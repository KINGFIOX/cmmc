InstInfo:
  IntegerBinary:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rs:GPR[Use], $Rt:GPR[Use]
    Instances:
      ADDU:
        Mnemonic: addu
      AND:
        Mnemonic: and
      NOR:
        Mnemonic: nor
      OR:
        Mnemonic: or
      SLLV:
        Mnemonic: sllv
      SRAV:
        Mnemonic: srav
      SRLV:
        Mnemonic: srlv
      SUBU:
        Mnemonic: subu
      XOR:
        Mnemonic: xor

  ADDIU:
    Format: addiu $Rd:GPR[Def], $Rs:GPR[Use], $Imm:Imm16[Metadata]
  IntegerBitwiseOps:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rs:GPR[Use], $Imm:UImm16[Metadata]
    Instances:
      ANDI:
        Mnemonic: andi
      ORI:
        Mnemonic: ori
      XORI:
        Mnemonic: xori
  IntegerShiftOps:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rs:GPR[Use], $Imm:UImm5[Metadata]
    Instances:
      SLL:
        Mnemonic: sll
      SRA:
        Mnemonic: sra
      SRL:
        Mnemonic: srl

  FloatingPointBinary:
    Format: $Mnemonic:Template $Rd:FPR[Def], $Rs:FPR[Use], $Rt:FPR[Use]
    Instances:
      ADD_S:
        Mnemonic: add.s
      SUB_S:
        Mnemonic: sub.s
      MUL_S:
        Mnemonic: mul.s
      DIV_S:
        Mnemonic: div.s

  FloatingPointUnary:
    Format: $Mnemonic:Template $Rd:FPR[Def], $Rs:FPR[Use]
    Instances:
      ABS_S:
        Mnemonic: abs.s
      NEG_S:
        Mnemonic: neg.s

  BREAK:
    Format: break
    Flag: [Terminator, NoFallthrough]
  B:
    Format: b $Tgt:Reloc[Metadata]
    Flag: [Terminator, Branch, NoFallthrough, WithDelaySlot]
  BC1F:
    Format: "bc1f $Tgt:Reloc[Metadata] # Implicit Use: $Rs:CC[Use] Branch Prob: $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch, WithDelaySlot]
  BC1T:
    Format: "bc1t $Tgt:Reloc[Metadata] # Implicit Use: $Rs:CC[Use] Branch Prob: $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch, WithDelaySlot]
  BranchCompare:
    Format: "$Mnemonic:Template $Rs:GPR[Use], $Rt:GPR[Use], $Tgt:Reloc[Metadata] # Branch Prob: $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch, WithDelaySlot]
    Instances:
      BEQ:
        Mnemonic: beq
      BNE:
        Mnemonic: bne
  BranchCompareZero:
    Format: "$Mnemonic:Template $Rs:GPR[Use], $Tgt:Reloc[Metadata] # Branch Prob: $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch, WithDelaySlot]
    Instances:
      BGEZ:
        Mnemonic: bgez
      BGTZ:
        Mnemonic: bgtz
      BLEZ:
        Mnemonic: blez
      BLTZ:
        Mnemonic: bltz

  FloatingPointCompare:
    Format: "$Mnemonic:Template $Rs:FPR[Use], $Rt:FPR[Use] # Implicit Def: $Rd:CC[Def]"
    Instances:
      C_EQ_S:
        Mnemonic: c.eq.s
      C_OLT_S:
        Mnemonic: c.olt.s
      C_OLE_S:
        Mnemonic: c.ole.s
      C_ULT_S:
        Mnemonic: c.ult.s
      C_ULE_S:
        Mnemonic: c.ule.s

  FloatingPointConvert:
    Format: "$Mnemonic:Template $Rd:FPR[Def], $Rs:FPR[Use]"
    Instances:
      CVT_S_W:
        Mnemonic: cvt.s.w
      #CVT_W_S:
      #  Mnemonic: cvt.w.s
      TRUNC_W_S:
        Mnemonic: trunc.w.s

  MULT:
    Format: "mult $Rs:GPR[Use], $Rt:GPR[Use] # Implicit Def: $Rd:HILO[Def]"
  Div:
    Format: "$Mnemonic:Template $Zero:Zero[Use], $Rs:GPR[Use], $Rt:GPR[Use] # Implicit Def: $Rd:HILO[Def]" # NOTICE: div/divu with two operands are macros.
    Instances:
      DIV:
        Mnemonic: div
      DIVU:
        Mnemonic: divu

  JAL:
    Format: "jal $Tgt:Reloc[Metadata]"
    Flag: [Call, WithDelaySlot]
  JR:
    Format: jr $Rs:GPR[Use]
    Flag: [Terminator, NoFallthrough, Return, WithDelaySlot]

  Load:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Imm:Imm16[Metadata]($Rs:BaseLike[Use])
    Flag: [Load]
    Instances:
      LB:
        Mnemonic: lb
      LBU:
        Mnemonic: lbu
      LH:
        Mnemonic: lh
      LHU:
        Mnemonic: lhu
      LW:
        Mnemonic: lw
  Store:
    Format: $Mnemonic:Template $Rd:GPR[Use], $Imm:Imm16[Metadata]($Rs:BaseLike[Use])
    Flag: [Store]
    Instances:
      SB:
        Mnemonic: sb
      SH:
        Mnemonic: sh
      SW:
        Mnemonic: sw

  LWC1:
    Format: lwc1 $Rd:FPR[Def], $Imm:Imm16[Metadata]($Rs:BaseLike[Use])
    Flag: [Load]

  SWC1:
    Format: swc1 $Rd:FPR[Use], $Imm:Imm16[Metadata]($Rs:BaseLike[Use])
    Flag: [Store]

  MFC1:
    Format: mfc1 $Rt:GPR[Def], $Fs:FPR[Use]
  MTC1:
    Format: mtc1 $Rt:GPR[Use], $Fs:FPR[Def]
  MFHI:
    Format: "mfhi $Rd:GPR[Def] # Implicit Use: $Rs:HILO[Use]"
  MFLO:
    Format: "mflo $Rd:GPR[Def] # Implicit Use: $Rs:HILO[Use]"
  MOV_S:
    Format: mov.s $Rd:FPR[Def], $Rs:FPR[Use]
    Flag: [RegCopy]

  Compare:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rs:GPR[Use], $Rt:GPR[Use]
    Instances:
      SLT:
        Mnemonic: slt
      SLTU:
        Mnemonic: sltu

  CompareImm:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rs:GPR[Use], $Imm:Imm16[Metadata]
    Instances:
      SLTI:
        Mnemonic: slti
      SLTIU:
        Mnemonic: sltiu

  LUI:
    Format: "lui $Rd:GPR[Def], $Imm:UImm16[Metadata]"
    Flag: [LoadConstant]

  # Pseudo Instrucitons
  LoadImm16:
    Format: "li $Rd:GPR[Def], $Imm:NonZeroImm16[Metadata]" # addiu
    Flag: [LoadConstant]

  # TODO: expand to LUI+ADDIU?
  LoadImm32:
    Format: "li $Rd:GPR[Def], $Imm:NonZeroImm32[Metadata]" # lui + addiu
    Flag: [LoadConstant]

  Nop:
    Format: "nop"
    Flag: []

  MoveGPR:
    Format: "move $Rd:GPR[Def], $Rs:GPR[Use]"
    Flag: [RegDef, RegCopy]

  # Conditional Move Instructions
  MOVN:
    Format: "movn $Rd:GPR[Def], $Rs:GPR[Use], $Rt:GPR[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVZ:
    Format: "movz $Rd:GPR[Def], $Rs:GPR[Use], $Rt:GPR[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVF:
    Format: "movf $Rd:GPR[Def], $Rs:GPR[Use], $Rt:CC[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVT:
    Format: "movt $Rd:GPR[Def], $Rs:GPR[Use], $Rt:CC[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVT_S:
    Format: "movt.s $Rd:FPR[Def], $Rs:FPR[Use], $Rt:CC[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVF_S:
    Format: "movf.s $Rd:FPR[Def], $Rs:FPR[Use], $Rt:CC[Use] # Implicit Use: $Rd2:GPR[Use]"
  MOVZ_S:
    Format: "movz.s $Rd:FPR[Def], $Rs:FPR[Use], $Rt:GPR[Use] # Implicit Use: $Rd2:FPR[Use]"

  # Illegal Pseudo Instrucitons
  # select[CC][Val]
  Select_GPR_GPR: # => Copy + MOVN
    Format: "select_gpr_gpr $Rd:GPR[Def], $Rs:GPR[Use], $Rt:IRegOrImm[Use], $Cond:GPR[Use]"
    Flag: [LegalizePreRA]

  Select_FCC_FPR_FPR: # => Copy + MOVT.s
    Format: "select_fcc_fpr_fpr $Rd:FPR[Def], $Rs:FPR[Use], $Rt:FPR[Use], $Cond:CC[Use]"
    Flag: [LegalizePreRA]

  Select_GPR_FPR_FPR: # => Copy + MOVZ.s
    Format: "select_gpr_fpr_fpr $Rd:FPR[Def], $Rs:FPR[Use], $Rt:FPR[Use], $Cond:GPR[Use]"
    Flag: [LegalizePreRA]

  # movt/movf
  # Flip == 0: Rs = Rs using movf
  # Flip == 1: Rd = !Rs using movt
  FCC2GPR:
    Format: "fcc2gpr $Rd:GPR[Def], $Rs:CC[Use], $Flip:Imm[Metadata]"
    Flag: [LegalizePreRA]

InstSelection:
  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isZero($Imm)
    Replace:
      # TODO: using ResetToZero -> InstFlagLoadConstant
      MoveGPR:
        Rd: $Dst
        Rs: getZero($Dst)

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isZero($Imm)
    Replace:
      # TODO: using InstResetToZero with flag InstFlagLoadConstant
      InstCopyFromReg:
        Dst: $Dst
        Src: getZero($Dst)

  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandNonZeroImm16($Imm)
    Replace:
      LoadImm16:
        Rd: $Dst
        Imm: $Imm

  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandNonZeroImm32($Imm)
    Replace:
      LoadImm32:
        Rd: $Dst
        Imm: $Imm

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandNonZeroImm16($Imm)
    Replace:
      LoadImm16:
        Rd: $Dst
        Imm: $Imm

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandNonZeroImm32($Imm)
    Replace:
      LoadImm32:
        Rd: $Dst
        Imm: $Imm

  # Integer Arithmetic
  - Pattern:
      InstAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      ADDU:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandImm16($Rhs)
    Replace:
      ADDIU:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstSub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      SUBU:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstAnd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm16($Rhs)
    Replace:
      ANDI:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstAnd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      AND:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstOr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm16($Rhs)
    Replace:
      ORI:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstOr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      OR:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstXor:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm16($Rhs)
    Replace:
      XORI:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstXor:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      XOR:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstShl:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm5($Rhs)
    Replace:
      SLL:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstAShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm5($Rhs)
    Replace:
      SRA:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstLShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandUImm5($Rhs)
    Replace:
      SRL:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstShl:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      SLLV:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstAShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      SRAV:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstLShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      SRLV:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  # Terminators
  - Pattern:
      InstJump:
        Tgt: $Tgt
    Replace:
      B:
        Tgt: $Tgt
  - Pattern:
      InstUnreachable:
    Replace:
      BREAK:
  # Branches
  # BLEZ BLTZ BGEZ BGTZ
  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
            $Predicate: isOperandIReg($Lhs) && isZero($Rhs) && isRationalOp($Op)
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchWithZeroOpcode($Op)
        $Template: BLTZ
        Rs: $Lhs
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
            $Predicate: isOperandIReg($Lhs) && isOperandImm($Rhs) && isOperandImm16(getNeg($Rhs)) && isRationalOp($Op)
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchWithZeroOpcode($Op)
        $Template: BLTZ
        Rs:
          ADDIU:
            Rd: getVRegAs(ctx, $Lhs)
            Rs: $Lhs
            Imm: getNeg($Rhs)
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
            $Predicate: isOperandIReg($Lhs) && isOperandImm32($Rhs) && isRationalOp($Op)
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchWithZeroOpcode($Op)
        $Template: BLTZ
        Rs:
          ADDU:
            Rd: getVRegAs(ctx, $Lhs)
            Rs: $Lhs
            Rt:
              LoadImm32:
                Rd: getVRegAs(ctx, $Rhs)
                Imm: getNeg($Rhs)
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
            $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isRationalOp($Op)
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchWithZeroOpcode($Op)
        $Template: BLTZ
        Rs:
          SUBU:
            Rd: getVRegAs(ctx, $Lhs)
            Rs: $Lhs
            Rt: $Rhs
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
            $Predicate: isOperandIReg($Lhs) && isOperandIRegOrImm($Rhs) && isEqualityOp($Op)
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchEqualityOpcode($Op)
        $Template: BEQ
        Rs: $Lhs
        Rt: getIReg(ctx, $Rhs)
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstBranch:
        Cond: $Cond
        Tgt: $Reloc
        Prob: $Prob
        $Predicate: isOperandIReg($Cond)
    Replace:
      BNE:
        Rs: $Cond
        Rt: getZero($Cond)
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isLessThanOp($Op)
    Replace:
      SLT:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstUCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isLessThanOp($Op)
    Replace:
      SLTU:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isGreaterThanOp($Op)
    Replace:
      SLT:
        Rd: $Dst
        Rs: $Rhs
        Rt: $Lhs

  - Pattern:
      InstUCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isGreaterThanOp($Op)
    Replace:
      SLTU:
        Rd: $Dst
        Rs: $Rhs
        Rt: $Lhs

  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandImm16($Rhs) && isLessThanOp($Op)
    Replace:
      SLTI:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstUCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandImm16($Rhs) && isLessThanOp($Op)
    Replace:
      SLTIU:
        Rd: $Dst
        Rs: $Lhs
        Imm: $Rhs

  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isZero($Rhs) && isEqualOp($Op)
    Replace:
      SLTIU:
        Rd: $Dst
        Rs: $Lhs
        Imm: getOne($Lhs)

  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isZero($Rhs) && isNotEqualOp($Op)
    Replace:
      XORI:
        Rd: $Dst
        Rs:
          SLTIU:
            Rd: getVRegAs(ctx, $Dst)
            Rs: $Lhs
            Imm: getOne($Lhs)
        Imm: getOne($Dst)

  # x<=y -> !(y<x)
  - Pattern:
      InstSCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs) && isLessEqualOp($Op)
    Replace:
      XORI:
        Rd: $Dst
        Rs:
          SLT:
            Rd: getVRegAs(ctx, $Dst)
            Rs: $Rhs
            Rt: $Lhs
        Imm: getOne($Dst)

  - Pattern:
      InstZExt:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandBoolReg($Src)
    Replace:
      InstCopy:
        Dst: $Dst
        Src: $Src

  - Pattern:
      InstZExt:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandIReg($Src)
    Replace:
      ANDI:
        Rd: $Dst
        Rs: $Src
        Imm: getZExtMask(($Dst).type(), ($Src).type())

  - Pattern:
      InstSExt:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandIReg($Src)
    Replace:
      InstCopy:
        Dst: $Dst
        Src: $Src

  # MUL/DIV/DIVU
  - Pattern:
      InstMul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MFLO:
        Rd: $Dst
        Rs:
          MULT:
            Rd: getHILO()
            Rs: $Lhs
            Rt: $Rhs

  - Pattern:
      InstSDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MFLO:
        Rd: $Dst
        Rs:
          DIV:
            Zero: getZero($Dst)
            Rd: getHILO()
            Rs: $Lhs
            Rt: $Rhs

  - Pattern:
      InstSRem:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MFHI:
        Rd: $Dst
        Rs:
          DIV:
            Zero: getZero($Dst)
            Rd: getHILO()
            Rs: $Lhs
            Rt: $Rhs

  - Pattern:
      InstUDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MFLO:
        Rd: $Dst
        Rs:
          DIVU:
            Zero: getZero($Dst)
            Rd: getHILO()
            Rs: $Lhs
            Rt: $Rhs

  - Pattern:
      InstURem:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MFHI:
        Rd: $Dst
        Rs:
          DIVU:
            Zero: getZero($Dst)
            Rd: getHILO()
            Rs: $Lhs
            Rt: $Rhs

  # Global Address
  - Pattern:
      InstLoadGlobalAddress:
        Dst: $Dst
        Addr: $Addr
    Replace:
      ADDIU:
        Rd: $Dst
        Rs:
          LUI:
            Rd: getVRegAs(ctx, $Dst)
            Imm: getHighBits($Addr)
        Imm: getLowBits($Addr)

  # Load/Store
  - Pattern:
      InstLoad:
        Dst: $Dst
        Addr: $Addr
        $Predicate: selectAddrOffset($Addr, ctx, [$Base], [$Offset])
    Replace:
      Load:
        $Opcode: getLoadOpcode($Dst)
        $Template: LW
        Rd: $Dst
        Rs: $Base
        Imm: $Offset

  - Pattern:
      InstZExt:
        Dst: $Dst
        Src:
          InstLoad:
            Dst: $Val
            Addr: $Addr
            $Predicate: selectAddrOffset($Addr, ctx, [$Base], [$Offset])
    Replace:
      Load:
        $Opcode: getZExtLoadOpcode($Dst)
        $Template: LBU
        Rd: $Dst
        Rs: $Base
        Imm: $Offset

  - Pattern:
      InstStore:
        Src:
          InstTrunc:
            Dst: $Dst
            Src: $Src
        Addr: $Addr
        $Predicate: isOperandVRegOrISAReg($Src) && selectAddrOffset($Addr, ctx, [$Base], [$Offset])
    Replace:
      Store:
        $Opcode: getStoreOpcode($Dst)
        $Template: SW
        Rd: $Src
        Rs: $Base
        Imm: $Offset

  - Pattern:
      InstStore:
        Src: $Src
        Addr: $Addr
        $Predicate: isOperandVRegOrISAReg($Src) && selectAddrOffset($Addr, ctx, [$Base], [$Offset])
    Replace:
      Store:
        $Opcode: getStoreOpcode($Src)
        $Template: SW
        Rd: $Src
        Rs: $Base
        Imm: $Offset

  # Select
  - Pattern:
      InstSelect:
        Dst: $Dst
        Cond: $Cond
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIRegOrImm($Rhs) && isOperandIReg($Cond)
    Replace:
      Select_GPR_GPR:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs
        Cond: $Cond

  # - Pattern:
  #     InstSelect:
  #       Dst: $Dst
  #       Cond:
  #         # FIXME: CC should not be redefined
  #         FCC2GPR:
  #           Rs: $CC
  #           Flip: $Flip
  #       Lhs: $Lhs
  #       Rhs: $Rhs
  #       $Predicate: selectFCC_FPR_FPR($Lhs, $Rhs, $Flip, [$OutLhs], [$OutRhs])
  #   Replace:
  #     Select_FCC_FPR_FPR:
  #       Rd: $Dst
  #       Rs: $OutLhs
  #       Rt: $OutRhs
  #       Cond: $CC

  - Pattern:
      InstSelect:
        Dst: $Dst
        Cond: $Cond
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Cond) && isOperandFPR($Lhs) && isOperandFPR($Rhs)
    Replace:
      Select_GPR_FPR_FPR:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs
        Cond: $Cond

  # Floating Point
  - Pattern:
      InstF2S:
        Dst: $Dst
        Src: $Src
    Replace:
      MFC1:
        Rt: $Dst
        Fs:
          TRUNC_W_S:
            Rd: getVRegAs(ctx, $Src)
            Rs: $Src

  - Pattern:
      InstS2F:
        Dst: $Dst
        Src: $Src
    Replace:
      CVT_S_W:
        Rd: $Dst
        Rs:
          MTC1:
            Fs: getVRegAs(ctx, $Dst)
            Rt: $Src

  - Pattern:
      InstFAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      ADD_S:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstFSub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      SUB_S:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstFMul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      MUL_S:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstFDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      DIV_S:
        Rd: $Dst
        Rs: $Lhs
        Rt: $Rhs

  - Pattern:
      InstFNeg:
        Dst: $Dst
        Src: $Src
    Replace:
      NEG_S:
        Rd: $Dst
        Rs: $Src

  - Pattern:
      InstFCmp:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        Op: $Op
    Replace:
      FCC2GPR:
        Rd: $Dst
        Rs:
          CMP:
            $Opcode: getFCmpOpcode($Op)
            $Template: C_EQ_S
            Rd: getCC()
            Rs: $Lhs
            Rt: $Rhs
        Flip: shouldInvertFCmp($Op)

  - Pattern:
      MFC1:
        Rt: $Dst
        Fs:
          MTC1:
            Rt: $Src
    Replace:
      InstCopy:
        Dst: $Dst
        Src: $Src

  - Pattern:
      MTC1:
        Fs: $Dst
        Rt:
          MFC1:
            Fs: $Src
    Replace:
      InstCopy:
        Dst: $Dst
        Src: $Src

ScheduleModel:
  emulator:
    CustomPeepholeOpt: true
