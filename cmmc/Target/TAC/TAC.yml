InstInfo:
  Assign:
    Format: $Dst:VReg[Def] := $Src:Val[Use]

  Binary:
    Format: $Dst:VReg[Def] := $Lhs:Val[Use] $Op:Template $Rhs:Val[Use]
    Instances:
      Add:
        Op: +
      Sub:
        Op: "-"
      Mul:
        Op: "*"
      Div:
        Op: /

  Addr:
    Format: $Dst:VReg[Def] := &$Src:StackObject[Use]

  Fetch:
    Format: $Dst:VReg[Def] := *$Src:VReg[Use]
    Flag: [Load]

  Deref:
    Format: "*$Dst:VReg[Use] := $Src:Val[Use]"
    Flag: [Store]

  Goto:
    Format: GOTO $Tgt:Reloc[Metadata]
    Flag: [Terminator, Branch, NoFallthrough]

  Branch:
    Format: "IF $Lhs:Val[Use] $Op:Template $Rhs:Val[Use] GOTO $Tgt:Reloc[Metadata] # Branch Prob $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch]
    Instances:
      BranchEq:
        Op: ==
      BranchNe:
        Op: "!="
      BranchLt:
        Op: <
      BranchLe:
        Op: <=
      BranchGt:
        Op: ">"
      BranchGe:
        Op: ">="

  Return:
    Format: RETURN $Src:Val[Use]
    Flag: [Terminator, NoFallthrough]

  Read:
    Format: READ $Dst:VReg[Def]
    Flag: [Call]

  Write:
    Format: WRITE $Src:Val[Use]
    Flag: [Call]

  Call:
    Format: $Dst:VReg[Def] := CALL $Tgt:Reloc[Metadata]
    Flag: [Call]

  Arg:
    Format: ARG $Val:Val[Use]
    Flag: [Call]

InstSelection:
  - Pattern:
      InstJump:
        Tgt: $Reloc
    Replace:
      Goto:
        Tgt: $Reloc

  - Pattern:
      InstBranch:
        Cond:
          InstSCmp:
            Lhs: $Lhs
            Rhs: $Rhs
            Op: $Op
        Tgt: $Reloc
        Prob: $Prob
    Replace:
      Branch:
        $Opcode: getBranchOpcode($Op)
        $Template: BranchEq
        Lhs: $Lhs
        Rhs: $Rhs
        Tgt: $Reloc
        Prob: $Prob

  - Pattern:
      InstCall:
        Dst: $Dst
        Tgt: $Reloc
        $Predicate: isRuntimeReadFunc($Reloc)
    Replace:
      Read:
        Dst: $Dst

  - Pattern:
      InstCall:
        Tgt: $Reloc
        $Predicate: isRuntimeWriteFunc($Reloc)
    Replace:
      Write:
        Src: selectWriteArg(ctx)

  - Pattern:
      InstPush:
        Src: $Src
    Replace:
      Arg:
        Val: $Src

  - Pattern:
      InstCall:
        Dst: $Dst
        Tgt: $Reloc
        $Predicate: "!isRuntimeFunc($Reloc)"
    Replace:
      Call:
        Dst: $Dst
        Tgt: $Reloc

  - Pattern:
      InstRet:
        Src: $Src
    Replace:
      Return:
        Src: $Src

  - Pattern:
      InstRetVoid:
    Replace:
      Return:
        Src: MIROperand::asImm(0, OperandType::Int32)

  - Pattern:
      InstUnreachable:
    Replace:
      Return:
        Src: MIROperand::asImm(0, OperandType::Int32)

  - Pattern:
      InstLoad:
        Dst: $Dst
        Addr: $Addr
    Replace:
      Fetch:
        Dst: $Dst
        Src: $Addr

  - Pattern:
      InstStore:
        Addr: $Addr
        Src: $Src
    Replace:
      Deref:
        Dst: $Addr
        Src: $Src

  - Pattern:
      InstAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      Add:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs

  - Pattern:
      InstSub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      Sub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs

  - Pattern:
      InstMul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      Mul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs

  - Pattern:
      InstSDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
    Replace:
      Div:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs

  - Pattern:
      InstNeg:
        Dst: $Dst
        Src: $Src
    Replace:
      Sub:
        Dst: $Dst
        Lhs: MIROperand::asImm(0, OperandType::Int32)
        Rhs: $Src

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Src
    Replace:
      Assign:
        Dst: $Dst
        Src: $Src

  - Pattern:
      InstLoadStackObjectAddr:
        Dst: $Dst
        Obj: $Src
    Replace:
      Addr:
        Dst: $Dst
        Src: $Src

ScheduleInfo:
  emulator:
