/*
    SPDX-License-Identifier: Apache-2.0
    Copyright 2023 CMMC Authors
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
// Automatically generated file, do not edit!

#include <{{target}}/ISelInfoDecl.hpp>

CMMC_TARGET_NAMESPACE_BEGIN

{% for inst in match_insts %}
static bool match{{inst}}(MIRInst& inst{% for operand in inst_map[inst].operands %}, MIROperand& {{operand.name}}{% endfor %}) {
    if(inst.opcode() != {{inst}})
        return false;
    {% for operand in inst_map[inst].operands %}{{operand.name}}=inst.getOperand({{operand.idx}});{% endfor %}
    return true;
}
{% endfor %}

{% for patterns in isel_patterns.values() %}{% for pattern in patterns %}
static MIRInst* matchAndSelectPattern{{pattern.match_id}}(MIRInst& inst{{pattern.match_id}}, ISelContext& ctx) {
    // Match
    {% for match in pattern.match_list %}{% if match.type == 'match_inst' %}{% for operand_idx in match.capture_list %} MIROperand op{{operand_idx}}; {% endfor %}if(!match{{match.inst}}(inst{{match.root}}{% for operand_idx in match.capture_list %},op{{operand_idx}}{% endfor %}))return nullptr;{% for lookup_idx in match.lookup_list %} MIRInst& inst{{lookup_idx}} = ctx.lookupDef(op{{lookup_idx}}); {% endfor %}{% else %}if(!({{match.code}}))return nullptr;{% endif %}{% endfor %}
    // Select
    {% for select in pattern.select_list %}{% if select.type == 'select_inst' %}auto& inst{{select.idx}} = ctx.newInst({{select.inst}}){% for operand in select.operands %}.setOperand<{{loop.index0}}>({% if operand is integer %}op{{operand}}{%else%}{{operand}}{%endif%}){%endfor%};{% if select.used_as_operand %}auto& op{{select.idx}} = ctx.getInstDef(inst{{select.idx}});{% endif %}{% else %}auto op{{select.idx}} = ({{select.code}});{% endif %}{% endfor %}
    return &inst{{pattern.replace_id}};
}
{% endfor %}{% endfor %}

static MIRInst* matchAndSelectImpl(MIRInst& inst, ISelContext& ctx) {
    switch(inst.opcode()) {
    {% for inst, patterns in isel_patterns.items() %}case {{inst}}: {
        {% for pattern in patterns %}if(auto ret = matchAndSelectPattern{{pattern.match_id}}(inst, ctx))return ret;{% endfor %}
        break;
    }{% endfor %}
    default:
        break;
    }
    return nullptr;
}

class {{target}}ISelInfo final: public TargetISelInfo {
public:
    [[nodiscard]] bool isLegalGenericInst(uint32_t opcode) const override;
    MIRInst* matchAndSelect(MIRInst& inst, ISelContext& ctx) const override;
};

const TargetISelInfo& get{{target}}ISelInfo() {
    static {{target}}ISelInfo iselInfo;
    return iselInfo;
}

CMMC_TARGET_NAMESPACE_END
