InstInfo:
  IntegerBinaryWithOp2:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rn:GPR[Use], $Op2:Op2[Use]
    Instances:
      ADD:
        Mnemonic: add
      SUB:
        Mnemonic: sub
      AND:
        Mnemonic: and
      ORR:
        Mnemonic: orr
      EOR:
        Mnemonic: eor
      ORN:
        Mnemonic: orn
      BIC:
        Mnemonic: bic

  MUL:
    Format: mul $Rd:GPR[Def], $Rm:GPR[Use], $Rs:GPR[Use]

  IntegerBinary:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rn:GPR[Use], $Rm:GPR[Use]
    Instances:
      SDIV:
        Mnemonic: sdiv
      UDIV:
        Mnemonic: udiv
      SEL:
        Mnemonic: sel

  Move:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Op2:Op2[Use]
    Instances:
      MOV:
        Mnemonic: mov
      MVN:
        Mnemonic: mvn

  Shift:
    Format: $Mnemonic:Template $Rd:GPR[Def], $Rm:GPR[Use], $Sh:Shamt[Use]
    Instances:
      ASR:
        Mnemonic: asr
      LSL:
        Mnemonic: lsl
      LSR:
        Mnemonic: lsr
      ROR:
        Mnemonic: ror

  Comparing:
    Format: $Mnemonic:Template $Rn:GPR[Use], $Op2:Op2[Use]
    Instances:
      CMP:
        Mnemonic: cmp
      CMN:
        Mnemonic: cmn
      TST:
        Mnemonic: tst
      TEQ:
        Mnemonic: teq

  B:
    Format: b $Tgt:Reloc[Metadata]
    Flag: [Terminator, Branch, NoFallthrough]

  BL:
    Format: bl $Tgt:Reloc[Metadata]
    Flag: [Call]

  BX:
    Format: bx $Rm:GPR[Use]
    Flag: [Terminator, NoFallthrough, Return]

  BranchCompare:
    Format: "$Mnemonic:Template $Rn:GPR[Use], $Tgt:Reloc[Metadata] @ Branch Prob: $Prob:Prob[Metadata]"
    Flag: [Terminator, Branch]
    Instances:
      CBZ:
        Mnemonic: cbz
      CBNZ:
        Mnemonic: cbnz

  VLDR:
    Format: $Mnemonic:Template $Fd:FPR[Def], [$Rn:GPR[Use], $Imm:Imm13[Metadata]]
    Flag: [Load]
    Instances:
      VLDR:
        Mnemonic: vldr

  Load:
    Format: $Mnemonic:Template $Rd:GPR[Def], [$Rn:GPR[Use], $Imm:Imm13[Metadata]]
    Flag: [Load]
    Instances:
      LDR:
        Mnemonic: ldr
      LDRB:
        Mnemonic: ldrb
      LDRSB:
        Mnemonic: ldrsb

  VSTR:
    Format: $Mnemonic:Template $Fd:FPR[Use] [$Rn:GPR[Use], $Imm:Imm13[Metadata]]
    Flag: [Store]
    Instances:
      VSTR:
        Mnemonic: vstr

  Store:
    Format: $Mnemonic:Template $Rd:GPR[Use] [$Rn:GPR[Use], $Imm:Imm13[Metadata]]
    Flag: [Store]
    Instances:
      STR:
        Mnemonic: str
      STRB:
        Mnemonic: strb

  MOVW:
    Format: movw $Rd:GPR[Def], $Imm:UImm16[Metadata]
  MOVT:
    Format: "movt $Rd:GPR[Def], $Imm:UImm16[Metadata] @ Implicit Use: $Rs:GPR[Use]"
    CustomVerifier: true

  FloatingBinary:
    Format: $Mnemonic:Template $Fd:FPR[Def], $Fn:FPR[Use], $Fm:FPR[Use]
    Instances:
      VADD_F32:
        Mnemonic: vadd.f32
      VSUB_F32:
        Mnemonic: vsub.f32
      VMUL_F32:
        Mnemonic: vmul.f32
      VDIV_F32:
        Mnemonic: vdiv.f32

  FloatingUnary:
    Format: $Mnemonic:Template $Fd:FPR[Def], $Fm:FPR[Use]
    Instances:
      VNEG_F32:
        Mnemonic: vneg.f32
      VABS_F32:
        Mnemonic: vabs.f32

  VCMP_F32:
    Format: vcmp.f32 $Fd:FPR[Use], $Fm:FPR[Use]

  VCMP_F32_WithZero:
    Format: vcmp.f32 $Fd:FPR[Use], #0.0

  VCVT_F32_S32:
    Format: vcvt.f32.s32 $Fd:FPR[Def], $Rm:FPR[Use]

  VCVT_S32_F32:
    Format: vcvt.s32.f32 $Rd:FPR[Def], $Fm:FPR[Use]

  VMOV:
    Format: vmov.f32 $Fd:FPR[Def], $Fm:FPR[Use]

  VMOV_GPR2FPR:
    Format: vmov $Sn:FPR[Def], $Rd:GPR[Use]

  VMOV_FPR2GPR:
    Format: vmov $Rd:GPR[Def], $Sn:FPR[Use]

  VMOV_Constant:
    Format: vmov.f32 $Fd:FPR[Def], $Imm:FP32[Metadata]

InstSelection:
  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandOp2Constant($Imm)
    Replace:
      MOV:
        Rd: $Dst
        Op2: $Imm

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Imm
        $Predicate: isOperandOp2Constant($Imm)
    Replace:
      MOV:
        Rd: $Dst
        Op2: $Imm

  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: selectInvertedOp2Constant($Imm, [$InvertedImm])
    Replace:
      MVN:
        Rd: $Dst
        Op2: $InvertedImm

  - Pattern:
      InstLoadImm:
        Dst: $Dst
        Imm: $Imm
        $Predicate: selectInvertedOp2Constant($Imm, [$InvertedImm])
    Replace:
      MVN:
        Rd: $Dst
        Op2: $InvertedImm

  - Pattern:
      InstLoadImmToReg:
        Dst: $Dst
        Imm: $Imm
        $Predicate: selectGenericImm32($Imm, [$Hi], [$Lo])
    Replace:
      MOVT:
        Rd: $Dst
        Imm: $Hi
        Rs:
          MOVW:
            Rd: $Dst
            Imm: $Lo

  - Pattern:
      InstAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandOp2($Rhs)
    Replace:
      ADD:
        Rd: $Dst
        Rn: $Lhs
        Op2: $Rhs

  - Pattern:
      InstSub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandOp2($Rhs)
    Replace:
      SUB:
        Rd: $Dst
        Rn: $Lhs
        Op2: $Rhs

  - Pattern:
      InstAnd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandOp2($Rhs)
    Replace:
      AND:
        Rd: $Dst
        Rn: $Lhs
        Op2: $Rhs

  - Pattern:
      InstOr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandOp2($Rhs)
    Replace:
      ORR:
        Rd: $Dst
        Rn: $Lhs
        Op2: $Rhs

  - Pattern:
      InstXor:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandOp2($Rhs)
    Replace:
      EOR:
        Rd: $Dst
        Rn: $Lhs
        Op2: $Rhs

  - Pattern:
      InstMul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      MUL:
        Rd: $Dst
        Rm: $Lhs
        Rs: $Rhs

  - Pattern:
      InstSDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      SDIV:
        Rd: $Dst
        Rn: $Lhs
        Rm: $Rhs

  - Pattern:
      InstUDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandIReg($Rhs)
    Replace:
      UDIV:
        Rd: $Dst
        Rn: $Lhs
        Rm: $Rhs

  - Pattern:
      InstShl:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandShamt($Rhs)
    Replace:
      LSL:
        Rd: $Dst
        Rm: $Lhs
        Sh: $Rhs

  - Pattern:
      InstLShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandShamt($Rhs)
    Replace:
      LSR:
        Rd: $Dst
        Rm: $Lhs
        Sh: $Rhs

  - Pattern:
      InstAShr:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandIReg($Lhs) && isOperandShamt($Rhs)
    Replace:
      ASR:
        Rd: $Dst
        Rm: $Lhs
        Sh: $Rhs

  - Pattern:
      InstS2F:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandFPR($Dst) && isOperandIReg($Src)
    Replace:
      VCVT_F32_S32:
        Fd: $Dst
        Rm:
          VMOV_GPR2FPR:
            Rd: getVRegAs(ctx, $Dst)
            Sn: $Src

  - Pattern:
      InstF2S:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandIReg($Dst) && isOperandFPR($Src)
    Replace:
      VMOV_FPR2GPR:
        Rd: $Dst
        Sn:
          VCVT_S32_F32:
            Rd: getVRegAs(ctx, $Src)
            Fm: $Src

  - Pattern:
      InstFAdd:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandFPR($Lhs) && isOperandFPR($Rhs)
    Replace:
      VADD_F32:
        Fd: $Dst
        Fn: $Lhs
        Fm: $Rhs

  - Pattern:
      InstFSub:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandFPR($Lhs) && isOperandFPR($Rhs)
    Replace:
      VSUB_F32:
        Fd: $Dst
        Fn: $Lhs
        Fm: $Rhs

  - Pattern:
      InstFMul:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandFPR($Lhs) && isOperandFPR($Rhs)
    Replace:
      VMUL_F32:
        Fd: $Dst
        Fn: $Lhs
        Fm: $Rhs

  - Pattern:
      InstFDiv:
        Dst: $Dst
        Lhs: $Lhs
        Rhs: $Rhs
        $Predicate: isOperandFPR($Lhs) && isOperandFPR($Rhs)
    Replace:
      VDIV_F32:
        Fd: $Dst
        Fn: $Lhs
        Fm: $Rhs

  - Pattern:
      InstFNeg:
        Dst: $Dst
        Src: $Src
        $Predicate: isOperandFPR($Dst) && isOperandFPR($Src)
    Replace:
      VNEG_F32:
        Fd: $Dst
        Fm: $Src

ScheduleModel:
  cortex_a72:
    CustomPeepholeOpt: true
