func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @test_1_r15() -> i32 {
^entry:
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = load i32* %b;
    i1 %5 = scmp gt i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
^b1:
    ret i32 -1;
^if.else:
    i32 %8 = load i32* %b;
    store i32* %a with i32 %8;
    ubr ^b2;
^if.then:
    i32 %9 = load i32* %c;
    i1 %10 = scmp gt i32 %9, i32 0;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else1;
^b2:
    ubr ^while.header;
^if.else1:
    store i32* %c with i32 9;
    ubr ^b3;
^if.then1:
    i32 %13 = load i32* %d;
    i1 %14 = scmp gt i32 %13, i32 0;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    store i32* %d with i32 -1;
    ubr ^b4;
^b3:
    ubr ^b2;
^b4:
    ubr ^b3;
}
