internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    ubr ^while.header;
^while.header:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %2 = call () -> i32 @getint();
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 0;
^if.else:
    i32 %4 = call () -> i32 @getint();
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then1, ^b1;
^if.then:
    ret i32 1;
^if.then1:
    i32 %6 = call () -> i32 @getint();
    store i32* %x with i32 %6;
    ubr ^while.header1;
^b1:
    ubr ^b2;
^b2:
    ubr ^while.header;
^while.header1:
    i32 %7 = load i32* %x;
    i1 %8 = scmp ge i32 %7, i32 0;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    ubr ^b3;
^b3:
    i32 %11 = call () -> i32 @getint();
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    ubr ^while.header;
^b4:
    ubr ^b1;
}
