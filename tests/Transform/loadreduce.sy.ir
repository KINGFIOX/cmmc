internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %x with i32 %0;
    store i32* %y with i32 0;
    i32 %1 = load i32* %x;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %3 = call () -> i32 @getint();
    store i32* %y with i32 %3;
    ubr ^b;
^if.else:
    store i32* %y with i32 1;
    ubr ^b;
^b:
    i32 %4 = load i32* %x;
    i32 %5 = load i32* %y;
    i32 %6 = add i32 %4, i32 %5;
    ret i32 %6;
}
