internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @pow1(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    ret i32 %0;
}
internal func @pow2(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = load i32* %x1;
    i32 %2 = mul i32 %0, i32 %1;
    ret i32 %2;
}
internal func @pow3(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = call (i32) -> i32 @pow2(i32 %0);
    i32 %2 = load i32* %x1;
    i32 %3 = mul i32 %1, i32 %2;
    ret i32 %3;
}
internal func @pow4(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = call (i32) -> i32 @pow3(i32 %0);
    i32 %2 = load i32* %x1;
    i32 %3 = mul i32 %1, i32 %2;
    ret i32 %3;
}
internal func @pow5(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = call (i32) -> i32 @pow4(i32 %0);
    i32 %2 = load i32* %x1;
    i32 %3 = mul i32 %1, i32 %2;
    ret i32 %3;
}
internal func @pow6(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = call (i32) -> i32 @pow5(i32 %0);
    i32 %2 = load i32* %x1;
    i32 %3 = mul i32 %1, i32 %2;
    ret i32 %3;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %x with i32 %0;
    i32 %1 = load i32* %x;
    i32 %2 = call (i32) -> i32 @pow1(i32 %1);
    call (i32) -> void @putint(i32 %2);
    i32 %3 = load i32* %x;
    i32 %4 = call (i32) -> i32 @pow2(i32 %3);
    call (i32) -> void @putint(i32 %4);
    i32 %5 = load i32* %x;
    i32 %6 = call (i32) -> i32 @pow3(i32 %5);
    call (i32) -> void @putint(i32 %6);
    i32 %7 = load i32* %x;
    i32 %8 = call (i32) -> i32 @pow4(i32 %7);
    call (i32) -> void @putint(i32 %8);
    i32 %9 = load i32* %x;
    i32 %10 = call (i32) -> i32 @pow5(i32 %9);
    call (i32) -> void @putint(i32 %10);
    i32 %11 = load i32* %x;
    i32 %12 = call (i32) -> i32 @pow6(i32 %11);
    call (i32) -> void @putint(i32 %12);
    i32 %13 = load i32* %x;
    ret i32 %13;
}
