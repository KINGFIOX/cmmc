func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse Entry } {
^entry():
    ubr [ ^for.body i32 0, i32 0 ];
^for.body(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 120;
    i32 %1 = mul i32 %arg1, i32 16;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = add i32 %arg1, i32 16;
    i32 %4 = add i32 %2, i32 120;
    i32 %5 = mul i32 %3, i32 16;
    i32 %6 = add i32 %4, i32 %5;
    i32 %7 = add i32 %arg1, i32 32;
    i32 %8 = add i32 %6, i32 120;
    i32 %9 = mul i32 %7, i32 16;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = add i32 %arg1, i32 48;
    i32 %12 = add i32 %10, i32 120;
    i32 %13 = mul i32 %11, i32 16;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = add i32 %arg1, i32 64;
    i32 %16 = add i32 %14, i32 120;
    i32 %17 = mul i32 %15, i32 16;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = add i32 %arg1, i32 80;
    i32 %20 = add i32 %18, i32 120;
    i32 %21 = mul i32 %19, i32 16;
    i32 %22 = add i32 %20, i32 %21;
    i32 %23 = add i32 %arg1, i32 96;
    i32 %24 = add i32 %22, i32 120;
    i32 %25 = mul i32 %23, i32 16;
    i32 %26 = add i32 %24, i32 %25;
    i32 %27 = add i32 %arg1, i32 112;
    i32 %28 = add i32 %26, i32 120;
    i32 %29 = mul i32 %27, i32 16;
    i32 %30 = add i32 %28, i32 %29;
    i32 %31 = add i32 %arg1, i32 128;
    i32 %32 = add i32 %30, i32 120;
    i32 %33 = mul i32 %31, i32 16;
    i32 %34 = add i32 %32, i32 %33;
    i32 %35 = add i32 %arg1, i32 144;
    i32 %36 = add i32 %34, i32 120;
    i32 %37 = mul i32 %35, i32 16;
    i32 %38 = add i32 %36, i32 %37;
    i32 %39 = add i32 %arg1, i32 160;
    i32 %40 = add i32 %38, i32 120;
    i32 %41 = mul i32 %39, i32 16;
    i32 %42 = add i32 %40, i32 %41;
    i32 %43 = add i32 %arg1, i32 176;
    i32 %44 = add i32 %42, i32 120;
    i32 %45 = mul i32 %43, i32 16;
    i32 %46 = add i32 %44, i32 %45;
    i32 %47 = add i32 %arg1, i32 192;
    i32 %48 = add i32 %46, i32 120;
    i32 %49 = mul i32 %47, i32 16;
    i32 %50 = add i32 %48, i32 %49;
    i32 %51 = add i32 %arg1, i32 208;
    i32 %52 = add i32 %50, i32 120;
    i32 %53 = mul i32 %51, i32 16;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = add i32 %arg1, i32 224;
    i32 %56 = add i32 %54, i32 120;
    i32 %57 = mul i32 %55, i32 16;
    i32 %58 = add i32 %56, i32 %57;
    i32 %59 = add i32 %arg1, i32 240;
    i32 %60 = add i32 %58, i32 120;
    i32 %61 = mul i32 %59, i32 16;
    i32 %62 = add i32 %60, i32 %61;
    i32 %63 = add i32 %arg1, i32 256;
    i1 %64 = scmp lt i32 %63, i32 1024;
    cbr i1 %64(prob = 0.75), [ ^for.body i32 %62, i32 %63 ], [ ^for.body1 i32 %62 ];
^for.body1(i32 %arg):
    i32 %0 = add i32 %arg, i32 1480284;
    ret i32 %0;
}
