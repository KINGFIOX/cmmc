internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @fac(i32 %a) -> i32 {
^entry:
    i32* %res = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %res with i32 0;
    i32 %0 = load i32* %a1;
    i1 %1 = scmp eq i32 %0, i32 1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %res with i32 1;
    ubr ^b;
^if.else:
    i32 %4 = load i32* %a1;
    i32 %5 = load i32* %a1;
    i32 %6 = sub i32 %5, i32 1;
    i32 %7 = call (i32) -> i32 @fac(i32 %6);
    i32 %8 = mul i32 %4, i32 %7;
    store i32* %res with i32 %8;
    ubr ^b;
^b:
    i32 %9 = load i32* %res;
    ret i32 %9;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %x with i32 %0;
    i32 %1 = load i32* %x;
    i32 %2 = call (i32) -> i32 @fac(i32 %1);
    ret i32 %2;
}
