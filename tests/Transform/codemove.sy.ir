internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %x = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %a with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %b with i32 %1;
    store i32* %x with i32 0;
    store i32* %i with i32 0;
    ubr ^for.header;
^for.header:
    i32 %2 = load i32* %i;
    i1 %3 = scmp lt i32 %2, i32 10;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^for.body, ^b1;
^for.body:
    i32 %6 = load i32* %x;
    i32 %7 = load i32* %a;
    i32 %8 = load i32* %b;
    i32 %9 = add i32 %7, i32 %8;
    i32 %10 = add i32 %6, i32 %9;
    store i32* %x with i32 %10;
    ubr ^for.iteration;
^b1:
    i32 %11 = load i32* %x;
    call (i32) -> void @putint(i32 %11);
    ret i32 0;
^for.iteration:
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^for.header;
}
