internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %x = alloc [10000 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 1;
    i32* %2 = getelementptr &([10000 * i32]* %x)[i64 0][i32 %0];
    i32* %3 = getelementptr &(i32* %2)[i64 1];
    i32 %4 = call () -> i32 @getint();
    store i32* %2 with i32 %4;
    i32 %5 = call () -> i32 @getint();
    store i32* %3 with i32 %5;
    i1 %6 = scmp lt i32 %4, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %2 with i32 %4;
    i32 %7 = load i32* %2;
    ubr ^b;
^b:
    i32 %8 = phi [^entry, i32 %4] [^if.then, i32 %7];
    i32* %9 = getelementptr &([10000 * i32]* %x)[i64 0][i32 %1];
    call (i32) -> void @putint(i32 %8);
    i32 %10 = load i32* %9;
    call (i32) -> void @putint(i32 %10);
    ret i32 0;
}
