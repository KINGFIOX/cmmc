internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    [10000 * i32]* %x = alloc [10000 * i32];
    i32 %0 = call () -> i32 @getint();
    store i32* %a with i32 %0;
    i32 %1 = load i32* %a;
    i64 %2 = sext i32 %1 to i64;
    i32* %3 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %2];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32 %5 = load i32* %a;
    i32 %6 = add i32 %5, i32 1;
    store i32* %b with i32 %6;
    i32 %7 = load i32* %b;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %8];
    i32 %10 = call () -> i32 @getint();
    store i32* %9 with i32 %10;
    i32 %11 = load i32* %a;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %12];
    i32 %14 = load i32* %13;
    i32 %15 = load i32* %b;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp lt i32 %14, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %22 = load i32* %a;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %23];
    i32 %25 = load i32* %24;
    store i32* %tmp with i32 %25;
    i32 %26 = load i32* %a;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %27];
    i32 %29 = load i32* %b;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %30];
    i32 %32 = load i32* %31;
    store i32* %28 with i32 %32;
    i32 %33 = load i32* %a;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %34];
    i32 %36 = load i32* %tmp;
    store i32* %35 with i32 %36;
    ubr ^b1;
^b1:
    i32 %37 = load i32* %a;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    call (i32) -> void @putint(i32 %40);
    i32 %41 = load i32* %b;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([10000 * i32]* %x)[i64 0][i64 %42];
    i32 %44 = load i32* %43;
    call (i32) -> void @putint(i32 %44);
    ret i32 0;
}
