internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [10000 * i32]* %x = alloc [10000 * i32];
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([10000 * i32]* %x)[i32 0][i32 %0];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %0, i32 1;
    i32* %4 = getelementptr &([10000 * i32]* %x)[i32 0][i32 %3];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32 %6 = load i32* %1;
    i32 %7 = load i32* %4;
    i1 %8 = scmp lt i32 %6, i32 %7;
    cbr i1 %8, [ ^indirect i32* %1, i32* %1, i32* %4 ], [ ^b i32* %1, i32 %7 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg;
    store i32* %arg with i32 %0;
    i32 %1 = load i32* %arg2;
    i32 %2 = load i32* %arg1;
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putint(i32 %1);
    ret i32 0;
^b(i32* %arg, i32 %arg1):
    i32 %0 = load i32* %arg;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putint(i32 %arg1);
    ret i32 0;
}
