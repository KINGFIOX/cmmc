internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %x with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %x;
    i1 %2 = scmp lt i32 %1, i32 10;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    i32 %5 = load i32* %x;
    ret i32 %5;
^while.header1:
    i32 %6 = load i32* %x;
    i1 %7 = scmp lt i32 %6, i32 10;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^b1:
    ubr ^while.header;
^while.body1:
    i32 %10 = load i32* %x;
    i1 %11 = scmp gt i32 %10, i32 5;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %14 = call () -> i32 @getint();
    store i32* %x with i32 %14;
    ubr ^b2;
^if.else:
    ubr ^while.header2;
^b2:
    ubr ^while.header1;
^while.header2:
    i32 %15 = load i32* %x;
    i1 %16 = scmp lt i32 %15, i32 10;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b3;
^b3:
    ubr ^b2;
^while.body2:
    i32 %19 = load i32* %x;
    i1 %20 = scmp gt i32 %19, i32 5;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %23 = call () -> i32 @getint();
    store i32* %x with i32 %23;
    ubr ^b4;
^if.else1:
    ubr ^while.header3;
^b4:
    ubr ^while.header2;
^while.header3:
    i32 %24 = load i32* %x;
    i1 %25 = scmp lt i32 %24, i32 10;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b5;
^b5:
    ubr ^b4;
^while.body3:
    i32 %28 = load i32* %x;
    i1 %29 = scmp gt i32 %28, i32 5;
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %32 = call () -> i32 @getint();
    store i32* %x with i32 %32;
    ubr ^b6;
^if.else2:
    ubr ^while.header4;
^b6:
    ubr ^while.header3;
^while.header4:
    i32 %33 = load i32* %x;
    i1 %34 = scmp lt i32 %33, i32 10;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body4, ^b7;
^b7:
    ubr ^b6;
^while.body4:
    i32 %37 = load i32* %x;
    i1 %38 = scmp gt i32 %37, i32 5;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32 %41 = call () -> i32 @getint();
    store i32* %x with i32 %41;
    ubr ^b8;
^if.else3:
    ubr ^while.header5;
^b8:
    ubr ^while.header4;
^while.header5:
    i32 %42 = load i32* %x;
    i1 %43 = scmp lt i32 %42, i32 10;
    i32 %44 = zext i1 %43 to i32;
    i1 %45 = scmp neq i32 %44, i32 0;
    cbr i1 %45(prob = 0.97), ^while.body5, ^b9;
^b9:
    ubr ^b8;
^while.body5:
    i32 %46 = load i32* %x;
    i1 %47 = scmp gt i32 %46, i32 5;
    i32 %48 = zext i1 %47 to i32;
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32 %50 = call () -> i32 @getint();
    store i32* %x with i32 %50;
    ubr ^b10;
^if.else4:
    i32 %51 = load i32* %x;
    i32 %52 = add i32 %51, i32 1;
    store i32* %x with i32 %52;
    ubr ^b10;
^b10:
    ubr ^while.header5;
}
