internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^indirect i32 %0 ], [ ^b i32 %0 ];
^indirect(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body i32 %arg ], [ ^while.header i32 %arg, i32 %arg ];
^b(i32 %arg):
    ret i32 %arg;
^while.body(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 5;
    cbr i1 %0, [ ^if.then ], [ ^while.header1 i32 %arg, i32 %arg ];
^while.header(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^indirect i32 %arg1 ], [ ^b i32 %arg1 ];
^if.then():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body i32 %0 ], [ ^while.header i32 %0, i32 %0 ];
^while.header1(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body1 i32 %arg1 ], [ ^while.header2 i32 %arg, i32 %arg1 ];
^while.body1(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 5;
    cbr i1 %0, [ ^if.then1 ], [ ^while.header3 i32 %arg, i32 %arg ];
^while.header2(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body i32 %arg1 ], [ ^while.header i32 %arg, i32 %arg1 ];
^if.then1():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body1 i32 %0 ], [ ^while.header2 i32 %0, i32 %0 ];
^while.header3(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body2 i32 %arg1 ], [ ^while.header1 i32 %arg, i32 %arg1 ];
^while.body2(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 5;
    cbr i1 %0, [ ^if.then2 ], [ ^while.header4 i32 %arg, i32 %arg ];
^if.then2():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body2 i32 %0 ], [ ^while.header1 i32 %0, i32 %0 ];
^while.header4(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body3 i32 %arg1 ], [ ^while.header3 i32 %arg, i32 %arg1 ];
^while.body3(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 5;
    cbr i1 %0, [ ^if.then3 ], [ ^while.header5 i32 %arg, i32 %arg ];
^if.then3():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body3 i32 %0 ], [ ^while.header3 i32 %0, i32 %0 ];
^while.header5(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0, [ ^while.body4 i32 %arg1 ], [ ^while.header4 i32 %arg, i32 %arg1 ];
^while.body4(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 5;
    cbr i1 %0, [ ^if.then4 ], [ ^indirect1 i32 %arg ];
^if.then4():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body4 i32 %0 ], [ ^while.header4 i32 %0, i32 %0 ];
^indirect1(i32 %arg):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body4 i32 %0 ], [ ^while.header4 i32 %0, i32 %0 ];
}
