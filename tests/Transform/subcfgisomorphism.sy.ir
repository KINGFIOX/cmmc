internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1(prob = 0.97), ^while.guard, ^b;
^while.guard:
    i32 %2 = phi [^b1, i32 %7] [^entry, i32 %0];
    i1 %3 = scmp lt i32 %2, i32 10;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^b:
    i32 %4 = phi [^b1, i32 %7] [^entry, i32 %0];
    ret i32 %4;
^while.body:
    i32 %5 = phi [^while.guard, i32 %2] [^b2, i32 %12];
    i1 %6 = scmp gt i32 %5, i32 5;
    cbr i1 %6(prob = 0.5), ^if.then, ^while.guard1;
^b1:
    i32 %7 = phi [^while.guard, i32 %2] [^b2, i32 %12];
    i1 %8 = scmp lt i32 %7, i32 10;
    cbr i1 %8(prob = 0.97), ^while.guard, ^b;
^if.then:
    i32 %9 = call () -> i32 @getint();
    ubr ^b2;
^while.guard1:
    i32 %10 = phi [^while.body, i32 %5] [^while.guard2, i32 %16] [^if.then1, i32 %15];
    i1 %11 = scmp lt i32 %10, i32 10;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b2;
^b2:
    i32 %12 = phi [^while.guard1, i32 %10] [^if.then, i32 %9];
    i1 %13 = scmp lt i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^while.body, ^b1;
^while.body1:
    i1 %14 = scmp gt i32 %10, i32 5;
    cbr i1 %14(prob = 0.5), ^if.then1, ^while.guard2;
^if.then1:
    i32 %15 = call () -> i32 @getint();
    ubr ^while.guard1;
^while.guard2:
    i32 %16 = phi [^while.guard3, i32 %20] [^if.then2, i32 %19] [^while.body1, i32 %10];
    i1 %17 = scmp lt i32 %16, i32 10;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.guard1;
^while.body2:
    i1 %18 = scmp gt i32 %16, i32 5;
    cbr i1 %18(prob = 0.5), ^if.then2, ^while.guard3;
^if.then2:
    i32 %19 = call () -> i32 @getint();
    ubr ^while.guard2;
^while.guard3:
    i32 %20 = phi [^while.guard4, i32 %24] [^if.then3, i32 %23] [^while.body2, i32 %16];
    i1 %21 = scmp lt i32 %20, i32 10;
    cbr i1 %21(prob = 0.97), ^while.body3, ^while.guard2;
^while.body3:
    i1 %22 = scmp gt i32 %20, i32 5;
    cbr i1 %22(prob = 0.5), ^if.then3, ^while.guard4;
^if.then3:
    i32 %23 = call () -> i32 @getint();
    ubr ^while.guard3;
^while.guard4:
    i32 %24 = phi [^if.else, i32 %28] [^if.then4, i32 %27] [^while.body3, i32 %20];
    i1 %25 = scmp lt i32 %24, i32 10;
    cbr i1 %25(prob = 0.97), ^while.body4, ^while.guard3;
^while.body4:
    i1 %26 = scmp gt i32 %24, i32 5;
    cbr i1 %26(prob = 0.5), ^if.then4, ^if.else;
^if.then4:
    i32 %27 = call () -> i32 @getint();
    ubr ^while.guard4;
^if.else:
    i32 %28 = add i32 %24, i32 1;
    ubr ^while.guard4;
}
