internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.header1, i32 %4] [^entry, i32 %0];
    i32 %2 = phi [^while.header1, i32 %5] [^entry, i32 %0];
    i1 %3 = scmp lt i32 %2, i32 10;
    cbr i1 %3(prob = 0.97), ^while.header1, ^b;
^while.header1:
    i32 %4 = phi [^while.header, i32 %1] [^while.header2, i32 %9] [^if.then, i32 %8];
    i32 %5 = phi [^while.header, i32 %1] [^while.header2, i32 %10] [^if.then, i32 %8];
    i1 %6 = scmp lt i32 %5, i32 10;
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header;
^b:
    ret i32 %1;
^while.body:
    i1 %7 = scmp gt i32 %4, i32 5;
    cbr i1 %7(prob = 0.5), ^if.then, ^while.header2;
^if.then:
    i32 %8 = call () -> i32 @getint();
    ubr ^while.header1;
^while.header2:
    i32 %9 = phi [^while.header3, i32 %14] [^if.then1, i32 %13] [^while.body, i32 %4];
    i32 %10 = phi [^while.header3, i32 %15] [^if.then1, i32 %13] [^while.body, i32 %4];
    i1 %11 = scmp lt i32 %10, i32 10;
    cbr i1 %11(prob = 0.97), ^while.body1, ^while.header1;
^while.body1:
    i1 %12 = scmp gt i32 %9, i32 5;
    cbr i1 %12(prob = 0.5), ^if.then1, ^while.header3;
^if.then1:
    i32 %13 = call () -> i32 @getint();
    ubr ^while.header2;
^while.header3:
    i32 %14 = phi [^while.header4, i32 %19] [^if.then2, i32 %18] [^while.body1, i32 %9];
    i32 %15 = phi [^while.header4, i32 %20] [^if.then2, i32 %18] [^while.body1, i32 %9];
    i1 %16 = scmp lt i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.header2;
^while.body2:
    i1 %17 = scmp gt i32 %14, i32 5;
    cbr i1 %17(prob = 0.5), ^if.then2, ^while.header4;
^if.then2:
    i32 %18 = call () -> i32 @getint();
    ubr ^while.header3;
^while.header4:
    i32 %19 = phi [^while.header5, i32 %24] [^if.then3, i32 %23] [^while.body2, i32 %14];
    i32 %20 = phi [^while.header5, i32 %25] [^if.then3, i32 %23] [^while.body2, i32 %14];
    i1 %21 = scmp lt i32 %20, i32 10;
    cbr i1 %21(prob = 0.97), ^while.body3, ^while.header3;
^while.body3:
    i1 %22 = scmp gt i32 %19, i32 5;
    cbr i1 %22(prob = 0.5), ^if.then3, ^while.header5;
^if.then3:
    i32 %23 = call () -> i32 @getint();
    ubr ^while.header4;
^while.header5:
    i32 %24 = phi [^if.else, i32 %29] [^if.then4, i32 %28] [^while.body3, i32 %19];
    i32 %25 = phi [^if.else, i32 %29] [^if.then4, i32 %28] [^while.body3, i32 %19];
    i1 %26 = scmp lt i32 %25, i32 10;
    cbr i1 %26(prob = 0.97), ^while.body4, ^while.header4;
^while.body4:
    i1 %27 = scmp gt i32 %24, i32 5;
    cbr i1 %27(prob = 0.5), ^if.then4, ^if.else;
^if.then4:
    i32 %28 = call () -> i32 @getint();
    ubr ^while.header5;
^if.else:
    i32 %29 = add i32 %24, i32 1;
    ubr ^while.header5;
}
