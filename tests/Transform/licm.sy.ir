internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = mul i32 %0, i32 %0;
    i32 %3 = mul i32 %0, i32 %2;
    i32 %4 = mul i32 %3, i32 16;
    cbr i1 %1(prob = 0.97), [ ^super.header i32 %0, i32 0, i32 0, i32 %3, i32 %4 ], [ ^b i32 0 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^for.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^for.body1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b(i32 %arg):
    call (i32) -> void @putint(i32 %arg);
    ret i32 0;
^for.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = mul i32 %arg2, i32 %arg2;
    i32 %1 = add i32 %arg2, i32 1;
    i32 %2 = mul i32 %1, i32 %1;
    i32 %3 = add i32 %arg2, i32 2;
    i32 %4 = mul i32 %3, i32 %3;
    i32 %5 = add i32 %arg2, i32 3;
    i32 %6 = mul i32 %5, i32 %5;
    i32 %7 = add i32 %arg2, i32 4;
    i32 %8 = mul i32 %7, i32 %7;
    i32 %9 = add i32 %arg2, i32 5;
    i32 %10 = mul i32 %9, i32 %9;
    i32 %11 = add i32 %arg2, i32 6;
    i32 %12 = mul i32 %11, i32 %11;
    i32 %13 = add i32 %arg2, i32 7;
    i32 %14 = mul i32 %13, i32 %13;
    i32 %15 = add i32 %arg2, i32 8;
    i32 %16 = mul i32 %15, i32 %15;
    i32 %17 = add i32 %arg2, i32 9;
    i32 %18 = mul i32 %17, i32 %17;
    i32 %19 = add i32 %arg2, i32 10;
    i32 %20 = mul i32 %19, i32 %19;
    i32 %21 = add i32 %arg2, i32 11;
    i32 %22 = mul i32 %21, i32 %21;
    i32 %23 = add i32 %arg2, i32 12;
    i32 %24 = mul i32 %23, i32 %23;
    i32 %25 = add i32 %arg2, i32 13;
    i32 %26 = mul i32 %25, i32 %25;
    i32 %27 = add i32 %arg2, i32 14;
    i32 %28 = mul i32 %27, i32 %27;
    i32 %29 = add i32 %arg2, i32 15;
    i32 %30 = mul i32 %29, i32 %29;
    i32 %31 = add i32 %10, i32 %12;
    i32 %32 = add i32 %31, i32 %14;
    i32 %33 = add i32 %32, i32 %16;
    i32 %34 = add i32 %33, i32 %18;
    i32 %35 = add i32 %34, i32 %20;
    i32 %36 = add i32 %35, i32 %22;
    i32 %37 = add i32 %36, i32 %24;
    i32 %38 = add i32 %37, i32 %26;
    i32 %39 = add i32 %38, i32 %28;
    i32 %40 = add i32 %39, i32 %30;
    i32 %41 = add i32 %40, i32 %arg1;
    i32 %42 = add i32 %41, i32 %arg4;
    i32 %43 = add i32 %42, i32 %0;
    i32 %44 = add i32 %43, i32 %2;
    i32 %45 = add i32 %44, i32 %4;
    i32 %46 = add i32 %45, i32 %6;
    i32 %47 = add i32 %46, i32 %8;
    i32 %48 = add i32 %arg2, i32 16;
    i1 %49 = scmp lt i32 %48, i32 %arg;
    cbr i1 %49(prob = 0.97), [ ^super.header i32 %arg, i32 %47, i32 %48, i32 %arg3, i32 %arg4 ], [ ^b i32 %47 ];
^for.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = mul i32 %arg2, i32 %arg2;
    i32 %1 = add i32 %0, i32 %arg1;
    i32 %2 = add i32 %1, i32 %arg3;
    i32 %3 = add i32 %arg2, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg;
    cbr i1 %4(prob = 0.97), [ ^for.body1 i32 %arg, i32 %2, i32 %3, i32 %arg3 ], [ ^b i32 %2 ];
}
