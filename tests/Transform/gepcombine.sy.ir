struct foo {i32 x, i32 y};

internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    [10 * struct foo]* %a = alloc [10 * struct foo];
    struct foo* %0 = getelementptr &([10 * struct foo]* %a)[i64 0][i64 0];
    i32* %1 = getelementptr &(struct foo* %0)[i64 0].x;
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    struct foo* %3 = getelementptr &([10 * struct foo]* %a)[i64 0][i64 1];
    i32* %4 = getelementptr &(struct foo* %3)[i64 0].y;
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    struct foo* %6 = getelementptr &([10 * struct foo]* %a)[i64 0][i64 0];
    i32* %7 = getelementptr &(struct foo* %6)[i64 0].y;
    i32 %8 = load i32* %7;
    struct foo* %9 = getelementptr &([10 * struct foo]* %a)[i64 0][i64 1];
    i32* %10 = getelementptr &(struct foo* %9)[i64 0].x;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %8, i32 %11;
    ret i32 %12;
}
