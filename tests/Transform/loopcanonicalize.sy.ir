internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %i1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %i3 = alloc i32;
    i32* %i4 = alloc i32;
    i32* %i5 = alloc i32;
    i32* %i6 = alloc i32;
    i32* %i7 = alloc i32;
    i32* %sum = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i7 with i32 0;
    ubr ^for.header;
^for.header:
    i32 %0 = load i32* %i7;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^for.body, ^b;
^for.body:
    i32 %4 = load i32* %sum;
    i32 %5 = load i32* %i7;
    i32 %6 = add i32 %4, i32 %5;
    store i32* %sum with i32 %6;
    ubr ^for.iteration;
^b:
    store i32* %i6 with i32 0;
    ubr ^for.header1;
^for.iteration:
    i32 %7 = load i32* %i7;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i7 with i32 %8;
    ubr ^for.header;
^for.header1:
    i32 %9 = load i32* %i6;
    i1 %10 = scmp lt i32 %9, i32 1000;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^for.body1, ^b1;
^for.body1:
    i32 %13 = load i32* %sum;
    i32 %14 = load i32* %i6;
    i32 %15 = add i32 %13, i32 %14;
    store i32* %sum with i32 %15;
    ubr ^for.iteration1;
^b1:
    store i32* %i5 with i32 0;
    ubr ^for.header2;
^for.iteration1:
    i32 %16 = load i32* %i6;
    i32 %17 = add i32 %16, i32 10;
    store i32* %i6 with i32 %17;
    ubr ^for.header1;
^for.header2:
    i32 %18 = load i32* %i5;
    i1 %19 = scmp gt i32 10, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.97), ^for.body2, ^b2;
^for.body2:
    i32 %22 = load i32* %sum;
    i32 %23 = load i32* %i5;
    i32 %24 = add i32 %22, i32 %23;
    store i32* %sum with i32 %24;
    ubr ^for.iteration2;
^b2:
    store i32* %i4 with i32 0;
    ubr ^for.header3;
^for.iteration2:
    i32 %25 = load i32* %i5;
    i32 %26 = add i32 %25, i32 1;
    store i32* %i5 with i32 %26;
    ubr ^for.header2;
^for.header3:
    i32 %27 = load i32* %i4;
    i1 %28 = scmp gt i32 1000, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^for.body3, ^b3;
^for.body3:
    i32 %31 = load i32* %sum;
    i32 %32 = load i32* %i4;
    i32 %33 = add i32 %31, i32 %32;
    store i32* %sum with i32 %33;
    ubr ^for.iteration3;
^b3:
    store i32* %i3 with i32 1000;
    ubr ^for.header4;
^for.iteration3:
    i32 %34 = load i32* %i4;
    i32 %35 = sub i32 %34, i32 -10;
    store i32* %i4 with i32 %35;
    ubr ^for.header3;
^for.header4:
    i32 %36 = load i32* %i3;
    i1 %37 = scmp gt i32 %36, i32 0;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^for.body4, ^b4;
^for.body4:
    i32 %40 = load i32* %sum;
    i32 %41 = load i32* %i3;
    i32 %42 = add i32 %40, i32 %41;
    store i32* %sum with i32 %42;
    ubr ^for.iteration4;
^b4:
    store i32* %i2 with i32 0;
    ubr ^for.header5;
^for.iteration4:
    i32 %43 = load i32* %i3;
    i32 %44 = sub i32 %43, i32 10;
    store i32* %i3 with i32 %44;
    ubr ^for.header4;
^for.header5:
    i32 %45 = load i32* %i2;
    i1 %46 = scmp neq i32 %45, i32 1000;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^for.body5, ^b5;
^for.body5:
    i32 %49 = load i32* %sum;
    i32 %50 = load i32* %i2;
    i32 %51 = add i32 %49, i32 %50;
    store i32* %sum with i32 %51;
    ubr ^for.iteration5;
^b5:
    store i32* %i1 with i32 0;
    ubr ^for.header6;
^for.iteration5:
    i32 %52 = load i32* %i2;
    i32 %53 = add i32 %52, i32 1;
    store i32* %i2 with i32 %53;
    ubr ^for.header5;
^for.header6:
    i32 %54 = load i32* %i1;
    i1 %55 = scmp le i32 %54, i32 1000;
    i32 %56 = zext i1 %55 to i32;
    i1 %57 = scmp neq i32 %56, i32 0;
    cbr i1 %57(prob = 0.97), ^for.body6, ^b6;
^for.body6:
    i32 %58 = load i32* %sum;
    i32 %59 = load i32* %i1;
    i32 %60 = add i32 %58, i32 %59;
    store i32* %sum with i32 %60;
    ubr ^for.iteration6;
^b6:
    i32 %61 = call () -> i32 @getint();
    store i32* %n with i32 %61;
    store i32* %i with i32 0;
    ubr ^for.header7;
^for.iteration6:
    i32 %62 = load i32* %i1;
    i32 %63 = add i32 %62, i32 1;
    store i32* %i1 with i32 %63;
    ubr ^for.header6;
^for.header7:
    i32 %64 = load i32* %i;
    i32 %65 = load i32* %n;
    i1 %66 = scmp lt i32 %64, i32 %65;
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.97), ^for.body7, ^b7;
^for.body7:
    i32 %69 = load i32* %sum;
    i32 %70 = load i32* %i;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %sum with i32 %71;
    ubr ^for.iteration7;
^b7:
    i32 %72 = load i32* %sum;
    ret i32 %72;
^for.iteration7:
    i32 %73 = load i32* %i;
    i32 %74 = add i32 %73, i32 1;
    store i32* %i with i32 %74;
    ubr ^for.header7;
}
