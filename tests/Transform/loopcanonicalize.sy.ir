internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^for.header;
^for.header:
    i32 %0 = phi [^for.body, i32 %4] [^entry, i32 0];
    i32 %1 = phi [^for.body, i32 %5] [^entry, i32 0];
    i32 %2 = phi [^for.body, i32 %5] [^entry, i32 0];
    i1 %3 = scmp lt i32 %2, i32 10;
    cbr i1 %3(prob = 0.97), ^for.body, ^for.header1;
^for.body:
    i32 %4 = add i32 %1, i32 %0;
    i32 %5 = add i32 %1, i32 1;
    ubr ^for.header;
^for.header1:
    i32 %6 = phi [^for.header, i32 %0] [^for.body1, i32 %10];
    i32 %7 = phi [^for.header, i32 0] [^for.body1, i32 %11];
    i32 %8 = phi [^for.header, i32 0] [^for.body1, i32 %11];
    i1 %9 = scmp lt i32 %8, i32 1000;
    cbr i1 %9(prob = 0.97), ^for.body1, ^for.header2;
^for.body1:
    i32 %10 = add i32 %7, i32 %6;
    i32 %11 = add i32 %7, i32 10;
    ubr ^for.header1;
^for.header2:
    i32 %12 = phi [^for.header1, i32 %6] [^for.body2, i32 %16];
    i32 %13 = phi [^for.header1, i32 0] [^for.body2, i32 %17];
    i32 %14 = phi [^for.header1, i32 0] [^for.body2, i32 %17];
    i1 %15 = scmp lt i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^for.body2, ^for.header3;
^for.body2:
    i32 %16 = add i32 %13, i32 %12;
    i32 %17 = add i32 %13, i32 1;
    ubr ^for.header2;
^for.header3:
    i32 %18 = phi [^for.header2, i32 %12] [^for.body3, i32 %22];
    i32 %19 = phi [^for.header2, i32 0] [^for.body3, i32 %23];
    i32 %20 = phi [^for.header2, i32 0] [^for.body3, i32 %23];
    i1 %21 = scmp lt i32 %20, i32 1000;
    cbr i1 %21(prob = 0.97), ^for.body3, ^for.header4;
^for.body3:
    i32 %22 = add i32 %19, i32 %18;
    i32 %23 = add i32 %19, i32 10;
    ubr ^for.header3;
^for.header4:
    i32 %24 = phi [^for.header3, i32 %18] [^for.body4, i32 %28];
    i32 %25 = phi [^for.header3, i32 1000] [^for.body4, i32 %29];
    i32 %26 = phi [^for.header3, i32 1000] [^for.body4, i32 %29];
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^for.body4, ^for.header5;
^for.body4:
    i32 %28 = add i32 %25, i32 %24;
    i32 %29 = add i32 %25, i32 -10;
    ubr ^for.header4;
^for.header5:
    i32 %30 = phi [^for.header4, i32 %24] [^for.body5, i32 %34];
    i32 %31 = phi [^for.header4, i32 0] [^for.body5, i32 %35];
    i32 %32 = phi [^for.header4, i32 0] [^for.body5, i32 %35];
    i1 %33 = scmp neq i32 %32, i32 1000;
    cbr i1 %33(prob = 0.97), ^for.body5, ^for.header6;
^for.body5:
    i32 %34 = add i32 %31, i32 %30;
    i32 %35 = add i32 %31, i32 1;
    ubr ^for.header5;
^for.header6:
    i32 %36 = phi [^for.header5, i32 %30] [^for.body6, i32 %40];
    i32 %37 = phi [^for.header5, i32 0] [^for.body6, i32 %41];
    i32 %38 = phi [^for.header5, i32 0] [^for.body6, i32 %41];
    i1 %39 = scmp lt i32 %38, i32 1001;
    cbr i1 %39(prob = 0.97), ^for.body6, ^b;
^for.body6:
    i32 %40 = add i32 %37, i32 %36;
    i32 %41 = add i32 %37, i32 1;
    ubr ^for.header6;
^b:
    i32 %42 = call () -> i32 @getint();
    ubr ^for.header7;
^for.header7:
    i32 %43 = phi [^for.body7, i32 %49] [^b, i32 %36];
    i32 %44 = phi [^for.body7, i32 %44] [^b, i32 %42];
    i32 %45 = phi [^for.body7, i32 %50] [^b, i32 0];
    i32 %46 = phi [^for.body7, i32 %44] [^b, i32 %42];
    i32 %47 = phi [^for.body7, i32 %50] [^b, i32 0];
    i1 %48 = scmp lt i32 %47, i32 %46;
    cbr i1 %48(prob = 0.97), ^for.body7, ^b1;
^for.body7:
    i32 %49 = add i32 %43, i32 %45;
    i32 %50 = add i32 %45, i32 1;
    ubr ^for.header7;
^b1:
    ret i32 %43;
}
