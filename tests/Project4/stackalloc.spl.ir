internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    [100 * i32]* %a = alloc [100 * i32], align 8;
    i32 %0 = call () -> i32 @read();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32 %3 = call () -> i32 @read();
    i32* %4 = getelementptr &([100 * i32]* %a)[i32 0][i32 %2];
    store i32* %4 with i32 %3;
    i32 %5 = add i32 %2, i32 1;
    i1 %6 = icmp sgt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 1] [^while.body, i32 1] [^b1, i32 %22];
    i1 %8 = icmp sgt i32 %0, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body1, ^while.header1;
  ^while.body1:
    i32* %9 = getelementptr &([100 * i32]* %a)[i32 0][i32 %7];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %7, i32 -1;
    ubr ^while.header2;
  ^while.header1:
    i1 %12 = icmp sgt i32 %0, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body2, ^b;
  ^while.header2:
    i32 %13 = phi [^while.body1, i32 %11] [^while.body3, i32 %28];
    i1 %14 = icmp sgt i32 %13, i32 -1;
    cbr i1 %14(prob = 0.5), ^b2, ^b1;
  ^while.body2:
    i32 %15 = phi [^while.header1, i32 0] [^while.body2, i32 %18];
    i32* %16 = getelementptr &([100 * i32]* %a)[i32 0][i32 %15];
    i32 %17 = load i32* %16;
    call (i32) -> void @write(i32 %17);
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body2, ^b;
  ^b:
    ret i32 0;
  ^b1:
    i32 %20 = add i32 %13, i32 1;
    i32* %21 = getelementptr &([100 * i32]* %a)[i32 0][i32 %20];
    store i32* %21 with i32 %10;
    i32 %22 = add i32 %7, i32 1;
    ubr ^while.header;
  ^b2:
    i32* %23 = getelementptr &([100 * i32]* %a)[i32 0][i32 %13];
    i32 %24 = load i32* %23;
    i1 %25 = icmp slt i32 %10, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %26 = add i32 %13, i32 1;
    i32* %27 = getelementptr &([100 * i32]* %a)[i32 0][i32 %26];
    store i32* %27 with i32 %24;
    i32 %28 = add i32 %13, i32 -1;
    ubr ^while.header2;
}
