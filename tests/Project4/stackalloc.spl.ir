func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %val = alloc i32;
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    [100 * i32]* %a = alloc [100 * i32];
    i32 %0 = call () -> i32 @read();
    store i32* %n with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* %n;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    i32* %7 = getelementptr &([100 * i32]* %a)[i32 0][i32 %6];
    i32 %8 = call () -> i32 @read();
    store i32* %7 with i32 %8;
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^b:
    store i32* %i with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %11 = load i32* %i;
    i32 %12 = load i32* %n;
    i1 %13 = scmp lt i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %16 = load i32* %i;
    i32* %17 = getelementptr &([100 * i32]* %a)[i32 0][i32 %16];
    i32 %18 = load i32* %17;
    store i32* %val with i32 %18;
    i32 %19 = load i32* %i;
    i32 %20 = sub i32 %19, i32 1;
    store i32* %j with i32 %20;
    ubr ^while.header2;
^b1:
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %21 = load i32* %j;
    i1 %22 = scmp ge i32 %21, i32 0;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^b2, ^b3;
^while.header3:
    i32 %25 = load i32* %i;
    i32 %26 = load i32* %n;
    i1 %27 = scmp lt i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b4;
^b2:
    i32 %30 = load i32* %j;
    i32* %31 = getelementptr &([100 * i32]* %a)[i32 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = load i32* %val;
    i1 %34 = scmp gt i32 %32, i32 %33;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    ubr ^b3;
^while.body2:
    i32 %37 = load i32* %i;
    i32* %38 = getelementptr &([100 * i32]* %a)[i32 0][i32 %37];
    i32 %39 = load i32* %38;
    call (i32) -> void @write(i32 %39);
    i32 %40 = load i32* %i;
    i32 %41 = add i32 %40, i32 1;
    store i32* %i with i32 %41;
    ubr ^while.header3;
^b3:
    i1 %42 = phi [^b2, i1 %36] [^while.header2, i1 false];
    i32 %43 = zext i1 %42 to i32;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body3, ^b5;
^b4:
    ret i32 0;
^while.body3:
    i32 %45 = load i32* %j;
    i32 %46 = add i32 %45, i32 1;
    i32* %47 = getelementptr &([100 * i32]* %a)[i32 0][i32 %46];
    i32 %48 = load i32* %j;
    i32* %49 = getelementptr &([100 * i32]* %a)[i32 0][i32 %48];
    i32 %50 = load i32* %49;
    store i32* %47 with i32 %50;
    i32 %51 = load i32* %j;
    i32 %52 = sub i32 %51, i32 1;
    store i32* %j with i32 %52;
    ubr ^while.header2;
^b5:
    i32 %53 = load i32* %j;
    i32 %54 = add i32 %53, i32 1;
    i32* %55 = getelementptr &([100 * i32]* %a)[i32 0][i32 %54];
    i32 %56 = load i32* %val;
    store i32* %55 with i32 %56;
    i32 %57 = load i32* %i;
    i32 %58 = add i32 %57, i32 1;
    store i32* %i with i32 %58;
    ubr ^while.header1;
}
