struct foo {i32 a, i32 b};

internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd(struct foo* %p) -> i32 { NoMemoryWrite NoSideEffect } {
^entry:
    struct foo* %pn = alloc struct foo;
    struct foo* %p1 = alloc struct foo;
    i32* %0 = getelementptr &(struct foo* %p1)[i32 0].a;
    i32* %1 = getelementptr &(struct foo* %p)[i32 0].a;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(struct foo* %p1)[i32 0].b;
    i32* %4 = getelementptr &(struct foo* %p)[i32 0].b;
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^if.then:
    i32* %7 = getelementptr &(struct foo* %pn)[i32 0].a;
    store i32* %7 with i32 %5;
    i32* %8 = getelementptr &(struct foo* %pn)[i32 0].b;
    i32 %9 = sdiv i32 %2, i32 %5;
    i32 %10 = mul i32 %5, i32 %9;
    i32 %11 = sub i32 %2, i32 %10;
    store i32* %8 with i32 %11;
    i32 %12 = call (struct foo*) -> i32 @gcd(struct foo* %pn);
    ubr ^b;
^b:
    i32 %13 = phi [^entry, i32 %2] [^if.then, i32 %12];
    ret i32 %13;
}
func @main() -> i32 { NoMemoryWrite NoRecurse } {
^entry:
    struct foo* %p = alloc struct foo;
    i32* %0 = getelementptr &(struct foo* %p)[i32 0].a;
    i32 %1 = call () -> i32 @read();
    store i32* %0 with i32 %1;
    i32* %2 = getelementptr &(struct foo* %p)[i32 0].b;
    i32 %3 = call () -> i32 @read();
    store i32* %2 with i32 %3;
    i32 %4 = call (struct foo*) -> i32 @gcd(struct foo* %p);
    call (i32) -> void @write(i32 %4);
    ret i32 0;
}
