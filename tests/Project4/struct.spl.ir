struct foo {i32 a, i32 b};

internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd(struct foo* %p) -> i32 { NoMemoryWrite NoSideEffect } {
  ^entry:
    struct foo* %pn = alloc struct foo, align 8;
    i32* %0 = getelementptr &(struct foo* %p)[i32 0].a;
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(struct foo* %p)[i32 0].b;
    i32 %3 = load i32* %2;
    i32 %4 = strunc i32 %3 to i32;
    i1 %5 = icmp neq i32 %4, i32 0;
    i32 %6 = strunc i32 %1 to i32;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %7 = sdiv i32 %6, i32 %4;
    i32 %8 = mul i32 %4, i32 %7;
    i32 %9 = sub i32 %6, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    i32* %11 = getelementptr &(struct foo* %pn)[i32 0].a;
    i32 %12 = ztrunc i32 %3 to i32;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(struct foo* %pn)[i32 0].b;
    store i32* %13 with i32 %10;
    i32 %14 = call (struct foo*) -> i32 @gcd(struct foo* %pn);
    ubr ^b;
  ^b:
    i32 %15 = phi [^entry, i32 %6] [^if.then, i32 %14];
    ret i32 %15;
}
func @main() -> i32 { NoMemoryWrite NoRecurse } {
  ^entry:
    struct foo* %p = alloc struct foo, align 8;
    i32 %0 = call () -> i32 @read();
    i32 %1 = ztrunc i32 %0 to i32;
    i32* %2 = getelementptr &(struct foo* %p)[i32 0].a;
    store i32* %2 with i32 %1;
    i32 %3 = call () -> i32 @read();
    i32 %4 = ztrunc i32 %3 to i32;
    i32* %5 = getelementptr &(struct foo* %p)[i32 0].b;
    store i32* %5 with i32 %4;
    i32 %6 = call (struct foo*) -> i32 @gcd(struct foo* %p);
    call (i32) -> void @write(i32 %6);
    ret i32 0;
}
