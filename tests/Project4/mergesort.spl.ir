internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @merge([100 * i32]* %a, [100 * i32]* %b, i32 %beg, i32 %end) -> i32 {
^entry:
    i32 %0 = add i32 %beg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %end;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %2 = add i32 %beg, i32 %end;
    i32 %3 = sdiv i32 %2, i32 2;
    i32 %4 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %beg, i32 %3);
    i32 %5 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %3, i32 %end);
    ubr ^while.header;
^b1:
    ret i32 0;
^while.header:
    i32 %6 = phi [^if.then, i32 %beg] [^b4, i32 %35];
    i32 %7 = phi [^if.then, i32 %3] [^b4, i32 %33];
    i32 %8 = phi [^if.then, i32 %beg] [^b4, i32 %34];
    i1 %9 = scmp neq i32 %6, i32 %end;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %10 = scmp neq i32 %8, i32 %3;
    cbr i1 %10(prob = 0.5), ^b2, ^b3;
^while.header1:
    i32 %11 = phi [^while.header, i32 %beg] [^while.body1, i32 %17];
    i1 %12 = scmp neq i32 %11, i32 %end;
    cbr i1 %12(prob = 0.97), ^while.body1, ^b1;
^b2:
    i1 %13 = scmp neq i32 %7, i32 %end;
    ubr ^b3;
^while.body1:
    i32* %14 = getelementptr &([100 * i32]* %a)[i32 0][i32 %11];
    i32* %15 = getelementptr &([100 * i32]* %b)[i32 0][i32 %11];
    i32 %16 = load i32* %15;
    store i32* %14 with i32 %16;
    i32 %17 = add i32 %11, i32 1;
    ubr ^while.header1;
^b3:
    i1 %18 = phi [^while.body, i1 false] [^b2, i1 %13];
    cbr i1 %18(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32* %19 = getelementptr &([100 * i32]* %a)[i32 0][i32 %8];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([100 * i32]* %a)[i32 0][i32 %7];
    i32 %22 = load i32* %21;
    i1 %23 = scmp lt i32 %20, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else1;
^if.else:
    i1 %24 = scmp neq i32 %8, i32 %3;
    cbr i1 %24(prob = 0.5), ^if.then2, ^if.else1;
^if.then2:
    i32* %25 = getelementptr &([100 * i32]* %b)[i32 0][i32 %6];
    i32* %26 = getelementptr &([100 * i32]* %a)[i32 0][i32 %8];
    i32 %27 = load i32* %26;
    store i32* %25 with i32 %27;
    i32 %28 = add i32 %8, i32 1;
    ubr ^b4;
^if.else1:
    i32* %29 = getelementptr &([100 * i32]* %b)[i32 0][i32 %6];
    i32* %30 = getelementptr &([100 * i32]* %a)[i32 0][i32 %7];
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %7, i32 1;
    ubr ^b4;
^b4:
    i32 %33 = phi [^if.then2, i32 %7] [^if.else1, i32 %32];
    i32 %34 = phi [^if.then2, i32 %28] [^if.else1, i32 %8];
    i32 %35 = add i32 %6, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse } {
^entry:
    [100 * i32]* %b = alloc [100 * i32];
    [100 * i32]* %a = alloc [100 * i32];
    i32 %0 = call () -> i32 @read();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32* %3 = getelementptr &([100 * i32]* %a)[i32 0][i32 %2];
    i32 %4 = call () -> i32 @read();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %2, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %7 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 0, i32 %0);
    i1 %8 = scmp gt i32 %0, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %12];
    i32* %10 = getelementptr &([100 * i32]* %a)[i32 0][i32 %9];
    i32 %11 = load i32* %10;
    call (i32) -> void @write(i32 %11);
    i32 %12 = add i32 %9, i32 1;
    i1 %13 = scmp lt i32 %12, i32 %0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
^b2:
    ret i32 0;
}
