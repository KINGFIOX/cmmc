func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @merge([100 * i32]* %a, [100 * i32]* %b, i32 %beg, i32 %end) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %mid = alloc i32;
    i32* %end1 = alloc i32;
    i32* %beg1 = alloc i32;
    store i32* %beg1 with i32 %beg;
    store i32* %end1 with i32 %end;
    store i32* %mid with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    i32 %0 = load i32* %beg1;
    i32 %1 = add i32 %0, i32 1;
    i32 %2 = load i32* %end1;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %6 = load i32* %beg1;
    i32 %7 = load i32* %end1;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = sdiv i32 %8, i32 2;
    store i32* %mid with i32 %9;
    i32 %10 = load i32* %beg1;
    i32 %11 = load i32* %mid;
    i32 %12 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %10, i32 %11);
    i32 %13 = load i32* %mid;
    i32 %14 = load i32* %end1;
    i32 %15 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %13, i32 %14);
    i32 %16 = load i32* %beg1;
    store i32* %i with i32 %16;
    i32 %17 = load i32* %mid;
    store i32* %j with i32 %17;
    i32 %18 = load i32* %beg1;
    store i32* %k with i32 %18;
    ubr ^while.header;
^b1:
    ret i32 0;
^while.header:
    i32 %19 = load i32* %k;
    i32 %20 = load i32* %end1;
    i1 %21 = scmp neq i32 %19, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body, ^b2;
^b2:
    i32 %24 = load i32* %beg1;
    store i32* %i with i32 %24;
    ubr ^while.header1;
^while.body:
    i32 %25 = load i32* %i;
    i32 %26 = load i32* %mid;
    i1 %27 = scmp neq i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
^b3:
    i32 %30 = load i32* %j;
    i32 %31 = load i32* %end1;
    i1 %32 = scmp neq i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    ubr ^b4;
^b4:
    i1 %35 = phi [^b3, i1 %34] [^while.body, i1 false];
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then1, ^if.else;
^while.header1:
    i32 %38 = load i32* %i;
    i32 %39 = load i32* %end1;
    i1 %40 = scmp neq i32 %38, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %43 = load i32* %i;
    i32* %44 = getelementptr &([100 * i32]* %a)[i32 0][i32 %43];
    i32 %45 = load i32* %i;
    i32* %46 = getelementptr &([100 * i32]* %b)[i32 0][i32 %45];
    i32 %47 = load i32* %46;
    store i32* %44 with i32 %47;
    i32 %48 = load i32* %i;
    i32 %49 = add i32 %48, i32 1;
    store i32* %i with i32 %49;
    ubr ^while.header1;
^b5:
    ubr ^b1;
^if.then1:
    i32 %50 = load i32* %i;
    i32* %51 = getelementptr &([100 * i32]* %a)[i32 0][i32 %50];
    i32 %52 = load i32* %51;
    i32 %53 = load i32* %j;
    i32* %54 = getelementptr &([100 * i32]* %a)[i32 0][i32 %53];
    i32 %55 = load i32* %54;
    i1 %56 = scmp lt i32 %52, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then2, ^if.else1;
^if.else:
    i32 %59 = load i32* %i;
    i32 %60 = load i32* %mid;
    i1 %61 = scmp neq i32 %59, i32 %60;
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^if.then3, ^if.else2;
^if.then2:
    i32 %64 = load i32* %k;
    i32* %65 = getelementptr &([100 * i32]* %b)[i32 0][i32 %64];
    i32 %66 = load i32* %i;
    i32* %67 = getelementptr &([100 * i32]* %a)[i32 0][i32 %66];
    i32 %68 = load i32* %67;
    store i32* %65 with i32 %68;
    i32 %69 = load i32* %i;
    i32 %70 = add i32 %69, i32 1;
    store i32* %i with i32 %70;
    ubr ^b6;
^if.else1:
    i32 %71 = load i32* %k;
    i32* %72 = getelementptr &([100 * i32]* %b)[i32 0][i32 %71];
    i32 %73 = load i32* %j;
    i32* %74 = getelementptr &([100 * i32]* %a)[i32 0][i32 %73];
    i32 %75 = load i32* %74;
    store i32* %72 with i32 %75;
    i32 %76 = load i32* %j;
    i32 %77 = add i32 %76, i32 1;
    store i32* %j with i32 %77;
    ubr ^b6;
^if.then3:
    i32 %78 = load i32* %k;
    i32* %79 = getelementptr &([100 * i32]* %b)[i32 0][i32 %78];
    i32 %80 = load i32* %i;
    i32* %81 = getelementptr &([100 * i32]* %a)[i32 0][i32 %80];
    i32 %82 = load i32* %81;
    store i32* %79 with i32 %82;
    i32 %83 = load i32* %i;
    i32 %84 = add i32 %83, i32 1;
    store i32* %i with i32 %84;
    ubr ^b7;
^if.else2:
    i32 %85 = load i32* %k;
    i32* %86 = getelementptr &([100 * i32]* %b)[i32 0][i32 %85];
    i32 %87 = load i32* %j;
    i32* %88 = getelementptr &([100 * i32]* %a)[i32 0][i32 %87];
    i32 %89 = load i32* %88;
    store i32* %86 with i32 %89;
    i32 %90 = load i32* %j;
    i32 %91 = add i32 %90, i32 1;
    store i32* %j with i32 %91;
    ubr ^b7;
^b6:
    ubr ^b8;
^b7:
    ubr ^b8;
^b8:
    i32 %92 = load i32* %k;
    i32 %93 = add i32 %92, i32 1;
    store i32* %k with i32 %93;
    ubr ^while.header;
}
func @main() -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    [100 * i32]* %b = alloc [100 * i32];
    [100 * i32]* %a = alloc [100 * i32];
    i32 %0 = call () -> i32 @read();
    store i32* %n with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* %n;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %6 = load i32* %i;
    i32* %7 = getelementptr &([100 * i32]* %a)[i32 0][i32 %6];
    i32 %8 = call () -> i32 @read();
    store i32* %7 with i32 %8;
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^b1:
    i32 %11 = load i32* %n;
    i32 %12 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 0, i32 %11);
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %13 = load i32* %i;
    i32 %14 = load i32* %n;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %18 = load i32* %i;
    i32* %19 = getelementptr &([100 * i32]* %a)[i32 0][i32 %18];
    i32 %20 = load i32* %19;
    call (i32) -> void @write(i32 %20);
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header1;
^b2:
    ret i32 0;
}
