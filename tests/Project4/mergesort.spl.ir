internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @merge([100 * i32]* %a, [100 * i32]* %b, i32 %beg, i32 %end) -> i32 {
  ^entry:
    i32 %0 = add i32 %beg, i32 1;
    i1 %1 = icmp sgt i32 %end, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %2 = add i32 %beg, i32 %end;
    i32 %3 = sdiv i32 %2, i32 2;
    i32 %4 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %beg, i32 %3);
    i32 %5 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 %3, i32 %end);
    ubr ^while.header;
  ^b1:
    ret i32 0;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %3] [^if.then1, i32 %6] [^if.else1, i32 %28];
    i32 %7 = phi [^if.then, i32 %beg] [^if.then1, i32 %23] [^if.else1, i32 %7];
    i32 %8 = phi [^if.then, i32 %beg] [^if.then1, i32 %24] [^if.else1, i32 %29];
    i1 %9 = icmp neq i32 %end, i32 %8;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i1 %10 = icmp neq i32 %3, i32 %7;
    cbr i1 %10(prob = 0.5), ^b2, ^if.else;
  ^while.header1:
    i1 %11 = icmp neq i32 %beg, i32 %end;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %12 = icmp neq i32 %end, i32 %6;
    cbr i1 %12(prob = 0.5), ^if.then2, ^if.else;
  ^while.body1:
    i32 %13 = phi [^while.header1, i32 %beg] [^while.body1, i32 %17];
    i32* %14 = getelementptr &([100 * i32]* %b)[i32 0][i32 %13];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &([100 * i32]* %a)[i32 0][i32 %13];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %13, i32 1;
    i1 %18 = icmp neq i32 %end, i32 %17;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
  ^if.else:
    i1 %19 = icmp neq i32 %3, i32 %7;
    cbr i1 %19(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32* %20 = getelementptr &([100 * i32]* %a)[i32 0][i32 %7];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &([100 * i32]* %b)[i32 0][i32 %8];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %7, i32 1;
    i32 %24 = add i32 %8, i32 1;
    ubr ^while.header;
  ^if.else1:
    i32* %25 = getelementptr &([100 * i32]* %a)[i32 0][i32 %6];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &([100 * i32]* %b)[i32 0][i32 %8];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %6, i32 1;
    i32 %29 = add i32 %8, i32 1;
    ubr ^while.header;
  ^if.then2:
    i32* %30 = getelementptr &([100 * i32]* %a)[i32 0][i32 %7];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &([100 * i32]* %a)[i32 0][i32 %6];
    i32 %33 = load i32* %32;
    i1 %34 = icmp slt i32 %31, i32 %33;
    cbr i1 %34(prob = 0.5), ^if.then1, ^if.else1;
}
func @main() -> i32 { NoRecurse } {
  ^entry:
    [100 * i32]* %b = alloc [100 * i32], align 8;
    [100 * i32]* %a = alloc [100 * i32], align 8;
    i32 %0 = call () -> i32 @read();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32 %3 = call () -> i32 @read();
    i32* %4 = getelementptr &([100 * i32]* %a)[i32 0][i32 %2];
    store i32* %4 with i32 %3;
    i32 %5 = add i32 %2, i32 1;
    i1 %6 = icmp sgt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.body, ^b1;
  ^b1:
    i32 %7 = call ([100 * i32]*, [100 * i32]*, i32, i32) -> i32 @merge([100 * i32]* %a, [100 * i32]* %b, i32 0, i32 %0);
    i1 %8 = icmp sgt i32 %0, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b2;
  ^while.body1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %12];
    i32* %10 = getelementptr &([100 * i32]* %a)[i32 0][i32 %9];
    i32 %11 = load i32* %10;
    call (i32) -> void @write(i32 %11);
    i32 %12 = add i32 %9, i32 1;
    i1 %13 = icmp sgt i32 %0, i32 %12;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
  ^b2:
    ret i32 0;
}
