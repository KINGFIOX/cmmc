func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @test(i32 %a, i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7, i32 %c8, i32 %c9, i32 %c10, i32 %c11, i32 %c12, i32 %c13, i32 %c14, i32 %c15) -> i32 {
^entry:
    i32* %c151 = alloc i32;
    i32* %c141 = alloc i32;
    i32* %c131 = alloc i32;
    i32* %c121 = alloc i32;
    i32* %c111 = alloc i32;
    i32* %c101 = alloc i32;
    i32* %c91 = alloc i32;
    i32* %c81 = alloc i32;
    i32* %c71 = alloc i32;
    i32* %c61 = alloc i32;
    i32* %c51 = alloc i32;
    i32* %c41 = alloc i32;
    i32* %c31 = alloc i32;
    i32* %c21 = alloc i32;
    i32* %c11 = alloc i32;
    i32* %c01 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %c01 with i32 %c0;
    store i32* %c11 with i32 %c1;
    store i32* %c21 with i32 %c2;
    store i32* %c31 with i32 %c3;
    store i32* %c41 with i32 %c4;
    store i32* %c51 with i32 %c5;
    store i32* %c61 with i32 %c6;
    store i32* %c71 with i32 %c7;
    store i32* %c81 with i32 %c8;
    store i32* %c91 with i32 %c9;
    store i32* %c101 with i32 %c10;
    store i32* %c111 with i32 %c11;
    store i32* %c121 with i32 %c12;
    store i32* %c131 with i32 %c13;
    store i32* %c141 with i32 %c14;
    store i32* %c151 with i32 %c15;
    i32 %0 = load i32* %a1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %4 = load i32* %a1;
    ret i32 %4;
^b:
    i32 %5 = load i32* %a1;
    i32 %6 = sub i32 %5, i32 1;
    i32 %7 = load i32* %c21;
    i32 %8 = load i32* %c31;
    i32 %9 = load i32* %c51;
    i32 %10 = load i32* %c71;
    i32 %11 = load i32* %c111;
    i32 %12 = load i32* %c131;
    i32 %13 = load i32* %c151;
    i32 %14 = load i32* %c141;
    i32 %15 = load i32* %c121;
    i32 %16 = load i32* %c101;
    i32 %17 = load i32* %c91;
    i32 %18 = load i32* %c81;
    i32 %19 = load i32* %c61;
    i32 %20 = load i32* %c41;
    i32 %21 = load i32* %c11;
    i32 %22 = load i32* %c01;
    i32 %23 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @test(i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20, i32 %21, i32 %22);
    i32 %24 = add i32 1, i32 %23;
    ret i32 %24;
}
func @main() -> i32 {
^entry:
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = call () -> i32 @read();
    i32 %3 = call () -> i32 @read();
    i32 %4 = call () -> i32 @read();
    i32 %5 = call () -> i32 @read();
    i32 %6 = call () -> i32 @read();
    i32 %7 = call () -> i32 @read();
    i32 %8 = call () -> i32 @read();
    i32 %9 = call () -> i32 @read();
    i32 %10 = call () -> i32 @read();
    i32 %11 = call () -> i32 @read();
    i32 %12 = call () -> i32 @read();
    i32 %13 = call () -> i32 @read();
    i32 %14 = call () -> i32 @read();
    i32 %15 = call () -> i32 @read();
    i32 %16 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @test(i32 10, i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15);
    call (i32) -> void @write(i32 %16);
    ret i32 0;
}
