internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 0;
    ubr ^for.header;
^for.header:
    i32 %0 = load i32* %i1;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^for.body, ^b;
^for.body:
    i32 %4 = load i32* %i1;
    call (i32) -> void @putint(i32 %4);
    ubr ^for.iteration;
^b:
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^for.header1;
^for.iteration:
    i32 %5 = load i32* %i1;
    i32 %6 = add i32 %5, i32 1;
    store i32* %i1 with i32 %6;
    ubr ^for.header;
^for.header1:
    i32 %7 = load i32* %i;
    i1 %8 = scmp lt i32 %7, i32 10;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^for.body1, ^b1;
^for.body1:
    i32 %11 = load i32* %i;
    call (i32) -> void @putint(i32 %11);
    ubr ^for.iteration1;
^b1:
    store i32* %i with i32 0;
    ubr ^for.header2;
^for.iteration1:
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^for.header1;
^for.header2:
    ubr ^for.body2;
^for.body2:
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    i32 %16 = load i32* %i;
    i1 %17 = scmp eq i32 %16, i32 5;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then, ^b2;
^if.then:
    ubr ^for.iteration2;
^b2:
    i32 %20 = load i32* %i;
    i1 %21 = scmp ge i32 %20, i32 10;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b3;
^for.iteration2:
    ubr ^for.header2;
^if.then1:
    ubr ^b4;
^b3:
    ubr ^for.iteration2;
^b4:
    i32 %24 = load i32* %i;
    ret i32 %24;
}
