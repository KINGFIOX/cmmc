struct bar {i32 x};
struct foo {i32 a, [1024 * i32] b, [2 * struct bar] c};

internal struct foo* @global;
internal [10 * struct foo]* @global_array;
internal func @cmmc::Intrinsic::memcpy() -> i8*;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    struct foo* %param = alloc struct foo;
    struct foo* %param1 = alloc struct foo;
    struct foo* %x = alloc struct foo;
    struct foo* %x1 = alloc struct foo;
    struct foo* %0 = alloc struct foo;
    struct foo* %1 = alloc struct foo;
    [10 * struct foo]* %local_ar = alloc [10 * struct foo];
    struct foo* %local = alloc struct foo;
    struct foo* %2 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    struct foo* %3 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0];
    i32* %4 = getelementptr &(struct foo* %x)[i64 0].a;
    i32* %5 = getelementptr &(struct foo* %x1)[i64 0].a;
    i32* %6 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0].a;
    i32* %7 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0].a;
    i32* %8 = getelementptr &(struct foo* %param)[i64 0].b[i64 0];
    i32* %9 = getelementptr &(struct foo* %param1)[i64 0].b[i64 0];
    i32* %10 = getelementptr &(struct foo* %x)[i64 0].b[i64 10];
    i32* %11 = getelementptr &(struct foo* %x1)[i64 0].b[i64 10];
    i32* %12 = getelementptr &(struct foo* %x)[i64 0].c[i64 0].x;
    i32* %13 = getelementptr &(struct foo* %x1)[i64 0].c[i64 0].x;
    i8* %14 = ptrcast struct foo* @global to i8*;
    i8* %15 = ptrcast struct foo* %param to i8*;
    i8* %16 = ptrcast struct foo* %param1 to i8*;
    i8* %17 = ptrcast struct foo* %x to i8*;
    i8* %18 = ptrcast struct foo* %x1 to i8*;
    i8* %19 = ptrcast struct foo* %0 to i8*;
    i8* %20 = ptrcast struct foo* %1 to i8*;
    i8* %21 = ptrcast struct foo* %local to i8*;
    i8* %22 = ptrcast struct foo* %2 to i8*;
    i8* %23 = ptrcast struct foo* %3 to i8*;
    i8* %24 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %21, i8* %14, i64 4108);
    i8* %25 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %14, i8* %21, i64 4108);
    i8* %26 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %23, i8* %21, i64 4108);
    i8* %27 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %21, i8* %23, i64 4108);
    i8* %28 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %22, i8* %21, i64 4108);
    i8* %29 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %22, i8* %14, i64 4108);
    i8* %30 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %14, i8* %22, i64 4108);
    i8* %31 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %21, i8* %22, i64 4108);
    store i32* %5 with i32 10;
    store i32* %11 with i32 20;
    store i32* %13 with i32 20;
    i8* %32 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %20, i8* %18, i64 4108);
    i8* %33 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %21, i8* %20, i64 4108);
    store i32* %4 with i32 10;
    store i32* %10 with i32 20;
    store i32* %12 with i32 20;
    i8* %34 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %19, i8* %17, i64 4108);
    i8* %35 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %14, i8* %19, i64 4108);
    store i32* %6 with i32 10;
    store i32* %7 with i32 10;
    i8* %36 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %16, i8* %21, i64 4108);
    i32 %37 = load i32* %9;
    i32 %38 = add i32 %37, i32 21;
    i8* %39 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %15, i8* %22, i64 4108);
    i32 %40 = load i32* %8;
    i32 %41 = add i32 %38, i32 %40;
    ret i32 %41;
}
