struct bar {i32 x};
struct foo {i32 a, [1024 * i32] b, [2 * struct bar] c};

internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal struct foo* @global;
internal [10 * struct foo]* @global_array;
internal func @func_struct_ret(struct foo* %0) -> void {
^entry:
    struct foo* %x = alloc struct foo;
    i32* %1 = getelementptr &(struct foo* %x)[i64 0].a;
    store i32* %1 with i32 10;
    [1024 * i32]* %2 = getelementptr &(struct foo* %x)[i64 0].b;
    i32* %3 = getelementptr &([1024 * i32]* %2)[i64 0][i64 10];
    store i32* %3 with i32 20;
    [2 * struct bar]* %4 = getelementptr &(struct foo* %x)[i64 0].c;
    struct bar* %5 = getelementptr &([2 * struct bar]* %4)[i64 0][i64 0];
    i32* %6 = getelementptr &(struct bar* %5)[i64 0].x;
    store i32* %6 with i32 20;
    i8* %7 = ptrcast struct foo* %0 to i8*;
    i8* %8 = ptrcast struct foo* %x to i8*;
    i8* %9 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %7, i8* %8, i64 4108);
    ret;
}
internal func @cmmc::Intrinsic::memcpy() -> i8*;
internal func @func_struct_array_param(struct foo* %param) -> void {
^entry:
    struct foo** %param1 = alloc struct foo*;
    store struct foo** %param1 with struct foo* %param;
    struct foo* %0 = load struct foo** %param1;
    struct foo* %1 = getelementptr &(struct foo* %0)[i64 0];
    i32* %2 = getelementptr &(struct foo* %1)[i64 0].a;
    store i32* %2 with i32 10;
    ret;
}
internal func @func_struct_param(struct foo* %param) -> i32 {
^entry:
    struct foo* %param1 = alloc struct foo;
    i8* %0 = ptrcast struct foo* %param1 to i8*;
    i8* %1 = ptrcast struct foo* %param to i8*;
    i8* %2 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %1, i64 4108);
    i32* %3 = getelementptr &(struct foo* %param1)[i64 0].a;
    store i32* %3 with i32 10;
    i32* %4 = getelementptr &(struct foo* %param1)[i64 0].a;
    i32 %5 = load i32* %4;
    [1024 * i32]* %6 = getelementptr &(struct foo* %param1)[i64 0].b;
    i32* %7 = getelementptr &([1024 * i32]* %6)[i64 0][i64 0];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %5, i32 %8;
    ret i32 %9;
}
internal func @func_struct_param2(struct bar* %param) -> i32 {
^entry:
    struct bar* %param1 = alloc struct bar;
    i32* %0 = getelementptr &(struct bar* %param1)[i64 0].x;
    i32* %1 = getelementptr &(struct bar* %param)[i64 0].x;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(struct bar* %param1)[i64 0].x;
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &(struct bar* %param1)[i64 0].x;
    i32 %5 = load i32* %4;
    ret i32 %5;
}
func @main() -> i32 { Entry } {
^entry:
    struct bar* %sub = alloc struct bar;
    i32* %res = alloc i32;
    struct foo* %0 = alloc struct foo;
    struct foo* %1 = alloc struct foo;
    [10 * struct foo]* %local_ar = alloc [10 * struct foo];
    struct foo* %local = alloc struct foo;
    i8* %2 = ptrcast struct foo* %local to i8*;
    i8* %3 = ptrcast struct foo* @global to i8*;
    i8* %4 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %2, i8* %3, i64 4108);
    i8* %5 = ptrcast struct foo* @global to i8*;
    i8* %6 = ptrcast struct foo* %local to i8*;
    i8* %7 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %5, i8* %6, i64 4108);
    i8* %8 = ptrcast struct foo* %local to i8*;
    i8* %9 = ptrcast struct foo* %local to i8*;
    i8* %10 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %8, i8* %9, i64 4108);
    i8* %11 = ptrcast struct foo* @global to i8*;
    i8* %12 = ptrcast struct foo* @global to i8*;
    i8* %13 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %11, i8* %12, i64 4108);
    struct foo* %14 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0];
    i8* %15 = ptrcast struct foo* %14 to i8*;
    i8* %16 = ptrcast struct foo* %local to i8*;
    i8* %17 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %15, i8* %16, i64 4108);
    struct foo* %18 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0];
    i8* %19 = ptrcast struct foo* %local to i8*;
    i8* %20 = ptrcast struct foo* %18 to i8*;
    i8* %21 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %19, i8* %20, i64 4108);
    struct foo* %22 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i8* %23 = ptrcast struct foo* %22 to i8*;
    i8* %24 = ptrcast struct foo* %local to i8*;
    i8* %25 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %23, i8* %24, i64 4108);
    struct foo* %26 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i8* %27 = ptrcast struct foo* %26 to i8*;
    i8* %28 = ptrcast struct foo* @global to i8*;
    i8* %29 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %27, i8* %28, i64 4108);
    struct foo* %30 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i8* %31 = ptrcast struct foo* @global to i8*;
    i8* %32 = ptrcast struct foo* %30 to i8*;
    i8* %33 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %31, i8* %32, i64 4108);
    struct foo* %34 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i8* %35 = ptrcast struct foo* %local to i8*;
    i8* %36 = ptrcast struct foo* %34 to i8*;
    i8* %37 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %35, i8* %36, i64 4108);
    call (struct foo*) -> void @func_struct_ret(struct foo* %1);
    i8* %38 = ptrcast struct foo* %local to i8*;
    i8* %39 = ptrcast struct foo* %1 to i8*;
    i8* %40 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %38, i8* %39, i64 4108);
    call (struct foo*) -> void @func_struct_ret(struct foo* %0);
    i8* %41 = ptrcast struct foo* @global to i8*;
    i8* %42 = ptrcast struct foo* %0 to i8*;
    i8* %43 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %41, i8* %42, i64 4108);
    struct foo* %44 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    call (struct foo*) -> void @func_struct_array_param(struct foo* %44);
    struct foo* %45 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0];
    call (struct foo*) -> void @func_struct_array_param(struct foo* %45);
    store i32* %res with i32 0;
    i32 %46 = load i32* %res;
    i32 %47 = call (struct foo*) -> i32 @func_struct_param(struct foo* %local);
    i32 %48 = add i32 %46, i32 %47;
    store i32* %res with i32 %48;
    i32 %49 = load i32* %res;
    struct foo* %50 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i32 %51 = call (struct foo*) -> i32 @func_struct_param(struct foo* %50);
    i32 %52 = add i32 %49, i32 %51;
    store i32* %res with i32 %52;
    i32 %53 = load i32* %res;
    [2 * struct bar]* %54 = getelementptr &(struct foo* %local)[i64 0].c;
    struct bar* %55 = getelementptr &([2 * struct bar]* %54)[i64 0][i64 0];
    i32 %56 = call (struct bar*) -> i32 @func_struct_param2(struct bar* %55);
    i32 %57 = add i32 %53, i32 %56;
    store i32* %res with i32 %57;
    i32 %58 = load i32* %res;
    struct foo* %59 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    [2 * struct bar]* %60 = getelementptr &(struct foo* %59)[i64 0].c;
    struct bar* %61 = getelementptr &([2 * struct bar]* %60)[i64 0][i64 1];
    i32 %62 = call (struct bar*) -> i32 @func_struct_param2(struct bar* %61);
    i32 %63 = add i32 %58, i32 %62;
    store i32* %res with i32 %63;
    i32* %64 = getelementptr &(struct bar* %sub)[i64 0].x;
    store i32* %64 with i32 1;
    [2 * struct bar]* %65 = getelementptr &(struct foo* %local)[i64 0].c;
    struct bar* %66 = getelementptr &([2 * struct bar]* %65)[i64 0][i64 1];
    i32* %67 = getelementptr &(struct bar* %66)[i64 0].x;
    i32* %68 = getelementptr &(struct bar* %sub)[i64 0].x;
    i32 %69 = load i32* %68;
    store i32* %67 with i32 %69;
    i32 %70 = load i32* %res;
    i32* %71 = getelementptr &(struct bar* %sub)[i64 0].x;
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    store i32* %res with i32 %73;
    i32 %74 = load i32* %res;
    ret i32 %74;
}
