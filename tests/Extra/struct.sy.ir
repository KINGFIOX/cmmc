struct bar {i32 x};
struct foo {i32 a, [1024 * i32] b, [2 * struct bar] c};

internal struct foo* @global;
internal [10 * struct foo]* @global_array;
internal func @cmmc::Intrinsic::memcpy(i8*, i8*, i32) -> i8*;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    struct foo* %local = alloc struct foo;
    [10 * struct foo]* %local_array = alloc [10 * struct foo];
    i8* %0 = ptrcast struct foo* %local to i8*;
    i8* %1 = ptrcast struct foo* @global to i8*;
    i8* %2 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %1, i32 4108);
    i8* %3 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %1, i8* %0, i32 4108);
    i8* %4 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %0, i32 4108);
    i8* %5 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %1, i8* %1, i32 4108);
    struct foo* %6 = getelementptr &([10 * struct foo]* %local_array)[i32 0][i32 0];
    i8* %7 = ptrcast struct foo* %6 to i8*;
    i8* %8 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %7, i8* %0, i32 4108);
    i8* %9 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %7, i32 4108);
    struct foo* %10 = getelementptr &([10 * struct foo]* @global_array)[i32 0][i32 0];
    i8* %11 = ptrcast struct foo* %10 to i8*;
    i8* %12 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %11, i8* %0, i32 4108);
    i8* %13 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %11, i8* %1, i32 4108);
    i8* %14 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %1, i8* %11, i32 4108);
    i8* %15 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %11, i32 4108);
    struct foo* %16 = alloc struct foo;
    struct foo* %x = alloc struct foo;
    i32* %17 = getelementptr &(struct foo* %x)[i32 0].a;
    store i32* %17 with i32 10;
    i32* %18 = getelementptr &(struct foo* %x)[i32 0].b[i32 10];
    store i32* %18 with i32 20;
    i32* %19 = getelementptr &(struct foo* %x)[i32 0].c[i32 0].x;
    store i32* %19 with i32 20;
    i8* %20 = ptrcast struct foo* %16 to i8*;
    i8* %21 = ptrcast struct foo* %x to i8*;
    i8* %22 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %20, i8* %21, i32 4108);
    i8* %23 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %0, i8* %20, i32 4108);
    struct foo* %24 = alloc struct foo;
    struct foo* %x1 = alloc struct foo;
    i32* %25 = getelementptr &(struct foo* %x1)[i32 0].a;
    store i32* %25 with i32 10;
    i32* %26 = getelementptr &(struct foo* %x1)[i32 0].b[i32 10];
    store i32* %26 with i32 20;
    i32* %27 = getelementptr &(struct foo* %x1)[i32 0].c[i32 0].x;
    store i32* %27 with i32 20;
    i8* %28 = ptrcast struct foo* %24 to i8*;
    i8* %29 = ptrcast struct foo* %x1 to i8*;
    i8* %30 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %28, i8* %29, i32 4108);
    i8* %31 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %1, i8* %28, i32 4108);
    i32* %32 = getelementptr &([10 * struct foo]* @global_array)[i32 0][i32 0].a;
    store i32* %32 with i32 10;
    i32* %33 = getelementptr &([10 * struct foo]* %local_array)[i32 0][i32 0].a;
    store i32* %33 with i32 10;
    struct foo* %param = alloc struct foo;
    i8* %34 = ptrcast struct foo* %param to i8*;
    i8* %35 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %34, i8* %0, i32 4108);
    i32* %36 = getelementptr &(struct foo* %param)[i32 0].b[i32 0];
    i32 %37 = load i32* %36;
    struct foo* %param1 = alloc struct foo;
    i8* %38 = ptrcast struct foo* %param1 to i8*;
    i8* %39 = call (i8*, i8*, i32) -> i8* @cmmc::Intrinsic::memcpy(i8* %38, i8* %11, i32 4108);
    i32* %40 = getelementptr &(struct foo* %param1)[i32 0].b[i32 0];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %37, i32 21;
    i32 %43 = add i32 %42, i32 %41;
    ret i32 %43;
}
