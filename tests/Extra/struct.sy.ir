struct bar {i32 x};
struct foo {i32 a, [1024 * i32] b, [2 * struct bar] c};

internal struct foo* @global;
internal [10 * struct foo]* @global_array;
internal func @cmmc::Intrinsic::memcpy() -> i8*;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    struct foo* %param = alloc struct foo;
    struct foo* %param1 = alloc struct foo;
    struct foo* %x = alloc struct foo;
    struct foo* %x1 = alloc struct foo;
    struct foo* %0 = alloc struct foo;
    struct foo* %1 = alloc struct foo;
    [10 * struct foo]* %local_ar = alloc [10 * struct foo];
    struct foo* %local = alloc struct foo;
    i8* %2 = ptrcast struct foo* %local to i8*;
    i8* %3 = ptrcast struct foo* @global to i8*;
    i8* %4 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %2, i8* %3, i64 4108);
    i8* %5 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %3, i8* %2, i64 4108);
    struct foo* %6 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0];
    i8* %7 = ptrcast struct foo* %6 to i8*;
    i8* %8 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %7, i8* %2, i64 4108);
    i8* %9 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %2, i8* %7, i64 4108);
    struct foo* %10 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0];
    i8* %11 = ptrcast struct foo* %10 to i8*;
    i8* %12 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %11, i8* %2, i64 4108);
    i8* %13 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %11, i8* %3, i64 4108);
    i8* %14 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %3, i8* %11, i64 4108);
    i8* %15 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %2, i8* %11, i64 4108);
    i32* %16 = getelementptr &(struct foo* %x1)[i64 0].a;
    store i32* %16 with i32 10;
    i32* %17 = getelementptr &(struct foo* %x1)[i64 0].b[i64 10];
    store i32* %17 with i32 20;
    i32* %18 = getelementptr &(struct foo* %x1)[i64 0].c[i64 0].x;
    store i32* %18 with i32 20;
    i8* %19 = ptrcast struct foo* %1 to i8*;
    i8* %20 = ptrcast struct foo* %x1 to i8*;
    i8* %21 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %19, i8* %20, i64 4108);
    i8* %22 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %2, i8* %19, i64 4108);
    i32* %23 = getelementptr &(struct foo* %x)[i64 0].a;
    store i32* %23 with i32 10;
    i32* %24 = getelementptr &(struct foo* %x)[i64 0].b[i64 10];
    store i32* %24 with i32 20;
    i32* %25 = getelementptr &(struct foo* %x)[i64 0].c[i64 0].x;
    store i32* %25 with i32 20;
    i8* %26 = ptrcast struct foo* %0 to i8*;
    i8* %27 = ptrcast struct foo* %x to i8*;
    i8* %28 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %26, i8* %27, i64 4108);
    i8* %29 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %3, i8* %26, i64 4108);
    i32* %30 = getelementptr &([10 * struct foo]* @global_array)[i64 0][i64 0].a;
    store i32* %30 with i32 10;
    i32* %31 = getelementptr &([10 * struct foo]* %local_ar)[i64 0][i64 0].a;
    store i32* %31 with i32 10;
    i8* %32 = ptrcast struct foo* %param1 to i8*;
    i8* %33 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %32, i8* %2, i64 4108);
    i32* %34 = getelementptr &(struct foo* %param1)[i64 0].b[i64 0];
    i32 %35 = load i32* %34;
    i8* %36 = ptrcast struct foo* %param to i8*;
    i8* %37 = call (i8*, i8*, i64) -> i8* @cmmc::Intrinsic::memcpy(i8* %36, i8* %11, i64 4108);
    i32* %38 = getelementptr &(struct foo* %param)[i64 0].b[i64 0];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %35, i32 21;
    i32 %41 = add i32 %40, i32 %39;
    ret i32 %41;
}
