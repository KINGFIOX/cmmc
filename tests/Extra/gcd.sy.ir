internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @gcd(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %y1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %2 = load i32* %y1;
    i32 %3 = load i32* %x1;
    i32 %4 = load i32* %y1;
    i32 %5 = srem i32 %3, i32 %4;
    i32 %6 = call (i32, i32) -> i32 @gcd(i32 %2, i32 %5);
    ret i32 %6;
^if.else:
    i32 %7 = load i32* %x1;
    ret i32 %7;
^b:
    unreachable;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call (i32, i32) -> i32 @gcd(i32 7, i32 11);
    ret i32 %0;
}
