internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^for.header;
^for.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 100;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^for.body, ^b;
^for.body:
    i32 %4 = load i32* %sum;
    i32 %5 = load i32* %i;
    i32 %6 = add i32 %4, i32 %5;
    store i32* %sum with i32 %6;
    ubr ^for.iteration;
^b:
    store i32* %x with i32 1;
    store i32* %y with i32 2;
    i32 %7 = load i32* %sum;
    i32 %8 = load i32* %x;
    i32 %9 = add i32 %8, i32 1;
    store i32* %x with i32 %9;
    i32 %10 = load i32* %x;
    i32 %11 = load i32* %y;
    i32 %12 = sub i32 %11, i32 1;
    store i32* %y with i32 %12;
    i32 %13 = add i32 %10, i32 %11;
    i32 %14 = add i32 %7, i32 %13;
    store i32* %sum with i32 %14;
    i32 %15 = load i32* %sum;
    i32 %16 = load i32* %x;
    i32 %17 = add i32 %16, i32 1;
    store i32* %x with i32 %17;
    i32 %18 = load i32* %x;
    i32 %19 = sub i32 %18, i32 1;
    store i32* %x with i32 %19;
    i32 %20 = load i32* %y;
    i32 %21 = add i32 %20, i32 1;
    store i32* %y with i32 %21;
    i32 %22 = load i32* %y;
    i32 %23 = mul i32 %18, i32 %22;
    i32 %24 = add i32 %15, i32 %23;
    store i32* %sum with i32 %24;
    i32 %25 = load i32* %sum;
    ret i32 %25;
^for.iteration:
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^for.header;
}
