func @main() -> i32 { NoRecurse Entry } {
^entry:
    i8** %a = alloc i8*;
    i8** %b = alloc i8*;
    i8** %c = alloc i8*;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    [6 * i8]* %cmmc.str.s295471233978816214 = alloc [6 * i8];
    [6 * i8]* %a1 = alloc [6 * i8];
    [512 * i8]* %c1 = alloc [512 * i8];
    i8* %0 = getelementptr &([6 * i8]* %a1)[i64 0][i64 0];
    store i8* %0 with i8 72;
    i8* %1 = getelementptr &([6 * i8]* %a1)[i64 0][i64 1];
    store i8* %1 with i8 101;
    i8* %2 = getelementptr &([6 * i8]* %a1)[i64 0][i64 2];
    store i8* %2 with i8 108;
    i8* %3 = getelementptr &([6 * i8]* %a1)[i64 0][i64 3];
    store i8* %3 with i8 108;
    i8* %4 = getelementptr &([6 * i8]* %a1)[i64 0][i64 4];
    store i8* %4 with i8 111;
    i8* %5 = getelementptr &([6 * i8]* %a1)[i64 0][i64 5];
    store i8* %5 with i8 0;
    i8* %6 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 0];
    store i8* %6 with i8 87;
    i8* %7 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 1];
    store i8* %7 with i8 111;
    i8* %8 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 2];
    store i8* %8 with i8 114;
    i8* %9 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 3];
    store i8* %9 with i8 108;
    i8* %10 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 4];
    store i8* %10 with i8 100;
    i8* %11 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 5];
    store i8* %11 with i8 0;
    i8* %12 = getelementptr &([512 * i8]* %c1)[i64 0][i64 0];
    store i8** %a with i8* %0;
    store i8** %b with i8* %6;
    store i8** %c with i8* %12;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^for.header;
^for.header:
    i32 %13 = phi [^for.body, i32 %30] [^entry, i32 0];
    i32 %14 = phi [^for.body, i32 %29] [^entry, i32 0];
    i8* %15 = phi [^for.body, i8* %27] [^entry, i8* %12];
    i8* %16 = phi [^for.body, i8* %28] [^entry, i8* %0];
    i8* %17 = phi [^entry, i8* %0] [^for.body, i8* %28];
    i32 %18 = phi [^entry, i32 0] [^for.body, i32 %30];
    i8* %19 = getelementptr &(i8* %17)[i32 %18];
    i8 %20 = load i8* %19;
    i1 %21 = scmp neq i8 %20, i8 0;
    cbr i1 %21(prob = 0.97), ^for.body, ^b1;
^for.body:
    i8* %22 = getelementptr &(i8* %15)[i32 %14];
    i8* %23 = getelementptr &(i8* %16)[i32 %13];
    i8 %24 = load i8* %23;
    store i8* %22 with i8 %24;
    i32 %25 = load i32* %i;
    i32 %26 = load i32* %j;
    i8* %27 = load i8** %c;
    i8* %28 = load i8** %a;
    i32 %29 = add i32 %26, i32 1;
    store i32* %j with i32 %29;
    i32 %30 = add i32 %25, i32 1;
    store i32* %i with i32 %30;
    ubr ^for.header;
^b1:
    i8* %31 = getelementptr &(i8* %15)[i32 %14];
    store i8* %31 with i8 32;
    i32 %32 = load i32* %j;
    i8* %33 = load i8** %c;
    i8* %34 = load i8** %b;
    i32 %35 = add i32 %32, i32 1;
    store i32* %j with i32 %35;
    store i32* %i1 with i32 0;
    ubr ^for.header1;
^for.header1:
    i32 %36 = phi [^for.body1, i32 %52] [^b1, i32 0];
    i32 %37 = phi [^for.body1, i32 %51] [^b1, i32 %35];
    i8* %38 = phi [^for.body1, i8* %49] [^b1, i8* %33];
    i8* %39 = phi [^for.body1, i8* %50] [^b1, i8* %34];
    i32 %40 = phi [^for.body1, i32 %52] [^b1, i32 0];
    i8* %41 = getelementptr &(i8* %39)[i32 %40];
    i8 %42 = load i8* %41;
    i1 %43 = scmp neq i8 %42, i8 0;
    cbr i1 %43(prob = 0.97), ^for.body1, ^b2;
^for.body1:
    i8* %44 = getelementptr &(i8* %38)[i32 %37];
    i8* %45 = getelementptr &(i8* %39)[i32 %36];
    i8 %46 = load i8* %45;
    store i8* %44 with i8 %46;
    i32 %47 = load i32* %i1;
    i32 %48 = load i32* %j;
    i8* %49 = load i8** %c;
    i8* %50 = load i8** %b;
    i32 %51 = add i32 %48, i32 1;
    store i32* %j with i32 %51;
    i32 %52 = add i32 %47, i32 1;
    store i32* %i1 with i32 %52;
    ubr ^for.header1;
^b2:
    i8* %53 = getelementptr &(i8* %38)[i32 %37];
    store i8* %53 with i8 0;
    ubr ^for.header2;
^for.header2:
    i32 %54 = phi [^for.body2, i32 %67] [^b2, i32 0];
    i32 %55 = phi [^for.body2, i32 %66] [^b2, i32 0];
    i8* %56 = phi [^for.body2, i8* %56] [^b2, i8* %12];
    i8* %57 = phi [^b2, i8* %12] [^for.body2, i8* %56];
    i32 %58 = phi [^b2, i32 0] [^for.body2, i32 %67];
    i8* %59 = getelementptr &(i8* %57)[i32 %58];
    i8 %60 = load i8* %59;
    i1 %61 = scmp neq i8 %60, i8 0;
    cbr i1 %61(prob = 0.97), ^for.body2, ^b3;
^for.body2:
    i32 %62 = mul i32 %55, i32 131;
    i8* %63 = getelementptr &(i8* %56)[i32 %54];
    i8 %64 = load i8* %63;
    i32 %65 = sext i8 %64 to i32;
    i32 %66 = add i32 %62, i32 %65;
    i32 %67 = add i32 %54, i32 1;
    ubr ^for.header2;
^b3:
    ret i32 %55;
}
