func @main() -> i32 { NoRecurse Entry } {
^entry:
    [6 * i8]* %cmmc.str.s295471233978816214 = alloc [6 * i8];
    [6 * i8]* %a = alloc [6 * i8];
    i8** %a1 = alloc i8*;
    i8** %b = alloc i8*;
    i8** %c = alloc i8*;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    [512 * i8]* %c1 = alloc [512 * i8];
    i8* %0 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 0];
    i8* %1 = getelementptr &([6 * i8]* %a)[i64 0][i64 0];
    store i8* %1 with i8 72;
    i8* %2 = getelementptr &([512 * i8]* %c1)[i64 0][i64 0];
    i8* %3 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 1];
    i8* %4 = getelementptr &([6 * i8]* %a)[i64 0][i64 1];
    store i8* %4 with i8 101;
    i8* %5 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 2];
    i8* %6 = getelementptr &([6 * i8]* %a)[i64 0][i64 2];
    store i8* %6 with i8 108;
    i8* %7 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 3];
    i8* %8 = getelementptr &([6 * i8]* %a)[i64 0][i64 3];
    store i8* %8 with i8 108;
    i8* %9 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 4];
    i8* %10 = getelementptr &([6 * i8]* %a)[i64 0][i64 4];
    store i8* %10 with i8 111;
    i8* %11 = getelementptr &([6 * i8]* %cmmc.str.s295471233978816214)[i64 0][i64 5];
    i8* %12 = getelementptr &([6 * i8]* %a)[i64 0][i64 5];
    store i8* %12 with i8 0;
    store i8* %0 with i8 87;
    store i8* %3 with i8 111;
    store i8* %5 with i8 114;
    store i8* %7 with i8 108;
    store i8* %9 with i8 100;
    store i8* %11 with i8 0;
    store i8** %a1 with i8* %1;
    store i8** %b with i8* %0;
    store i8** %c with i8* %2;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^for.header;
^for.header:
    i8* %13 = phi [^entry, i8* %1] [^for.body, i8* %24];
    i8* %14 = phi [^entry, i8* %2] [^for.body, i8* %23];
    i32 %15 = phi [^entry, i32 0] [^for.body, i32 %26];
    i32 %16 = phi [^entry, i32 0] [^for.body, i32 %25];
    i8* %17 = getelementptr &(i8* %13)[i32 %16];
    i8 %18 = load i8* %17;
    i1 %19 = scmp neq i8 %18, i8 0;
    cbr i1 %19(prob = 0.97), ^for.body, ^b1;
^for.body:
    i8* %20 = getelementptr &(i8* %14)[i32 %15];
    store i8* %20 with i8 %18;
    i32 %21 = load i32* %i;
    i32 %22 = load i32* %j;
    i8* %23 = load i8** %c;
    i8* %24 = load i8** %a1;
    i32 %25 = add i32 %21, i32 1;
    i32 %26 = add i32 %22, i32 1;
    store i32* %j with i32 %26;
    store i32* %i with i32 %25;
    ubr ^for.header;
^b1:
    i8* %27 = getelementptr &(i8* %14)[i32 %15];
    store i8* %27 with i8 32;
    i32 %28 = load i32* %j;
    i8* %29 = load i8** %c;
    i8* %30 = load i8** %b;
    i32 %31 = add i32 %28, i32 1;
    store i32* %j with i32 %31;
    store i32* %i1 with i32 0;
    ubr ^for.header1;
^for.header1:
    i8* %32 = phi [^b1, i8* %30] [^for.body1, i8* %43];
    i8* %33 = phi [^b1, i8* %29] [^for.body1, i8* %42];
    i32 %34 = phi [^b1, i32 %31] [^for.body1, i32 %45];
    i32 %35 = phi [^b1, i32 0] [^for.body1, i32 %44];
    i8* %36 = getelementptr &(i8* %32)[i32 %35];
    i8 %37 = load i8* %36;
    i1 %38 = scmp neq i8 %37, i8 0;
    cbr i1 %38(prob = 0.97), ^for.body1, ^b2;
^for.body1:
    i8* %39 = getelementptr &(i8* %33)[i32 %34];
    store i8* %39 with i8 %37;
    i32 %40 = load i32* %i1;
    i32 %41 = load i32* %j;
    i8* %42 = load i8** %c;
    i8* %43 = load i8** %b;
    i32 %44 = add i32 %40, i32 1;
    i32 %45 = add i32 %41, i32 1;
    store i32* %j with i32 %45;
    store i32* %i1 with i32 %44;
    ubr ^for.header1;
^b2:
    i8* %46 = getelementptr &(i8* %33)[i32 %34];
    store i8* %46 with i8 0;
    ubr ^for.header2;
^for.header2:
    i32 %47 = phi [^b2, i32 0] [^for.body2, i32 %55];
    i32 %48 = phi [^b2, i32 0] [^for.body2, i32 %52];
    i8* %49 = getelementptr &(i8* %2)[i32 %48];
    i8 %50 = load i8* %49;
    i1 %51 = scmp neq i8 %50, i8 0;
    cbr i1 %51(prob = 0.97), ^for.body2, ^entry1;
^for.body2:
    i32 %52 = add i32 %48, i32 1;
    i32 %53 = mul i32 %47, i32 131;
    i32 %54 = sext i8 %50 to i32;
    i32 %55 = add i32 %54, i32 %53;
    ubr ^for.header2;
^entry1:
    ret i32 %47;
}
