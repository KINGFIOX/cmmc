func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @foo() -> i32 {
^entry:
    i32* %a = alloc i32;
    store i32* %a with i32 10;
    i32 %0 = load i32* %a;
    ret i32 %0;
}
func @test_2_o01(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %a1 = alloc i32;
    i32* %c = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a2 = alloc i32;
    store i32* %a2 with i32 %a;
    store i32* %b1 with i32 %b;
    store i32* %c with i32 0;
    i32 %0 = call () -> i32 @foo();
    store i32* %c with i32 %0;
    i32 %1 = load i32* %b1;
    i1 %2 = scmp gt i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32 %5 = load i32* %c;
    i32 %6 = add i32 %5, i32 3;
    store i32* %a1 with i32 %6;
    i32 %7 = load i32* %b1;
    i32 %8 = load i32* %a1;
    i32 %9 = sub i32 %7, i32 %8;
    store i32* %b1 with i32 %9;
    ubr ^b2;
^b2:
    i32 %10 = load i32* %a2;
    i32 %11 = load i32* %b1;
    i32 %12 = add i32 %10, i32 %11;
    store i32* %a2 with i32 %12;
    i32 %13 = load i32* %a2;
    ret i32 %13;
}
