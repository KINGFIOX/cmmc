func @compare1(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 %y;
    cbr i1 %0(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i1 %1 = icmp slt i32 %x, i32 %y;
    cbr i1 %1(prob = 0.5), ^b, ^if.else1;
  ^b:
    i32 %2 = phi [^entry, i32 1] [^if.else, i32 -1] [^if.else1, i32 0];
    ret i32 %2;
  ^if.else1:
    ubr ^b;
}
func @compare2(i32 %a, i32 %b) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp slt i32 %a, i32 %b;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = icmp eq i32 %a, i32 %b;
    cbr i1 %1(prob = 0.5), ^b2, ^b3;
  ^b2:
    f32 %2 = phi [^entry, f32 -1] [^b1, f32 0] [^b3, f32 1];
    ret f32 %2;
  ^b3:
    ubr ^b2;
}
func @test_2_r08(i32 %i, i32 %m, i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp eq i32 %i, i32 0;
    cbr i1 %0(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i1 %1 = icmp sgt i32 %m, i32 %n;
    cbr i1 %1(prob = 0.5), ^b2, ^if.else;
  ^entry2:
    i1 %2 = icmp slt i32 %m, i32 %n;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
  ^b:
    f32 %3 = phi [^entry2, f32 -1] [^b1, f32 0] [^b3, f32 1];
    i32 %4 = f2s f32 %3 to i32;
    ubr ^b2;
  ^if.else:
    i1 %5 = icmp slt i32 %m, i32 %n;
    cbr i1 %5(prob = 0.5), ^b2, ^if.else1;
  ^b1:
    i1 %6 = icmp eq i32 %m, i32 %n;
    cbr i1 %6(prob = 0.5), ^b, ^b3;
  ^b2:
    i32 %7 = phi [^entry1, i32 1] [^b, i32 %4] [^if.else, i32 -1] [^if.else1, i32 0];
    ret i32 %7;
  ^if.else1:
    ubr ^b2;
  ^b3:
    ubr ^b;
}
