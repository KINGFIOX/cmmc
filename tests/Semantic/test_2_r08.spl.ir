func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @compare1(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %x1;
    i32 %1 = load i32* %y1;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %5 = load i32* %y1;
    i32 %6 = load i32* %x1;
    i1 %7 = scmp gt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    ret i32 1;
^if.then1:
    ret i32 -1;
^if.else1:
    ret i32 0;
^b:
    unreachable;
^b1:
    ubr ^b;
}
func @compare2(i32 %a, i32 %b) -> f32 {
^entry:
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %b1;
    i32 %1 = load i32* %a1;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %5 = load i32* %b1;
    i32 %6 = load i32* %a1;
    i1 %7 = scmp eq i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b3;
^if.then:
    ret f32 -1;
^if.then1:
    ret f32 0;
^b3:
    ret f32 1;
}
func @test_2_r08(i32 %i, i32 %m, i32 %n) -> i32 {
^entry:
    i32* %n1 = alloc i32;
    i32* %m1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %m1 with i32 %m;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* %i1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = load i32* %m1;
    i32 %5 = load i32* %n1;
    i32 %6 = call (i32, i32) -> i32 @compare1(i32 %4, i32 %5);
    ret i32 %6;
^if.else:
    i32 %7 = load i32* %m1;
    i32 %8 = load i32* %n1;
    f32 %9 = call (i32, i32) -> f32 @compare2(i32 %7, i32 %8);
    i32 %10 = f2s f32 %9 to i32;
    ret i32 %10;
^b:
    unreachable;
}
