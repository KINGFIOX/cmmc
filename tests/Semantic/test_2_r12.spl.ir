func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @test_2_r12() -> i32 {
^entry:
    i32* %i = alloc i32;
    f32* %a = alloc f32;
    [10 * f32]* %arr2 = alloc [10 * f32];
    [10 * f32]* %arr1 = alloc [10 * f32];
    store f32* %a with f32 1.1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    f32* %5 = getelementptr &([10 * f32]* %arr1)[i32 0][i32 %4];
    f32 %6 = load f32* %a;
    store f32* %5 with f32 %6;
    f32 %7 = load f32* %a;
    f32 %8 = load f32* %a;
    f32 %9 = fmul f32 %7, f32 %8;
    store f32* %a with f32 %9;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %10 = load i32* %i;
    i1 %11 = scmp lt i32 %10, i32 10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %14 = load i32* %i;
    f32* %15 = getelementptr &([10 * f32]* %arr1)[i32 0][i32 %14];
    f32 %16 = load f32* %15;
    i32 %17 = f2u f32 %16 to i32;
    f32* %18 = getelementptr &([10 * f32]* %arr2)[i32 0][i32 %17];
    f32 %19 = load f32* %a;
    store f32* %18 with f32 %19;
    ubr ^while.header1;
^b1:
    ret i32 0;
}
