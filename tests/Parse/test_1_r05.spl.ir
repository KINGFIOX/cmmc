func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @test_1_r05(i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.97), [ ^super.header i32 %arg, i32 1 ], [ ^b i32 1 ];
^super.header(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 -15;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1 ], [ ^while.body1 i32 %arg, i32 %arg1 ];
^b(i32 %arg):
    ret i32 %arg;
^while.body(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 -1;
    i32 %1 = add i32 %arg, i32 -2;
    i32 %2 = add i32 %arg, i32 -3;
    i32 %3 = add i32 %arg, i32 -4;
    i32 %4 = add i32 %arg, i32 -5;
    i32 %5 = add i32 %arg, i32 -6;
    i32 %6 = add i32 %arg, i32 -7;
    i32 %7 = add i32 %arg, i32 -8;
    i32 %8 = add i32 %arg, i32 -9;
    i32 %9 = add i32 %arg, i32 -10;
    i32 %10 = add i32 %arg, i32 -11;
    i32 %11 = add i32 %arg, i32 -12;
    i32 %12 = add i32 %arg, i32 -13;
    i32 %13 = add i32 %arg, i32 -14;
    i32 %14 = add i32 %arg, i32 -15;
    i32 %15 = mul i32 %1, i32 %2;
    i32 %16 = mul i32 %15, i32 %3;
    i32 %17 = mul i32 %16, i32 %4;
    i32 %18 = mul i32 %17, i32 %5;
    i32 %19 = mul i32 %18, i32 %6;
    i32 %20 = mul i32 %19, i32 %7;
    i32 %21 = mul i32 %20, i32 %8;
    i32 %22 = mul i32 %21, i32 %9;
    i32 %23 = mul i32 %22, i32 %10;
    i32 %24 = mul i32 %23, i32 %11;
    i32 %25 = mul i32 %24, i32 %12;
    i32 %26 = mul i32 %25, i32 %13;
    i32 %27 = mul i32 %26, i32 %14;
    i32 %28 = mul i32 %27, i32 %arg;
    i32 %29 = mul i32 %28, i32 %arg1;
    i32 %30 = mul i32 %29, i32 %0;
    i32 %31 = add i32 %arg, i32 -16;
    i1 %32 = scmp gt i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), [ ^super.header i32 %31, i32 %30 ], [ ^b i32 %30 ];
^while.body1(i32 %arg, i32 %arg1):
    i32 %0 = mul i32 %arg, i32 %arg1;
    i32 %1 = add i32 %arg, i32 -1;
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), [ ^while.body1 i32 %1, i32 %0 ], [ ^b i32 %0 ];
}
