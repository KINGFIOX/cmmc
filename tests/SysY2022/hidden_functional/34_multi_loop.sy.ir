func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse Entry } {
^entry():
    ubr [ ^while.body i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = add i32 %arg, i32 3;
    i32 %1 = srem i32 %0, i32 999;
    i32 %2 = add i32 %1, i32 3;
    i32 %3 = srem i32 %2, i32 999;
    i32 %4 = add i32 %3, i32 3;
    i32 %5 = srem i32 %4, i32 999;
    i32 %6 = add i32 %5, i32 3;
    i32 %7 = srem i32 %6, i32 999;
    i32 %8 = add i32 %7, i32 3;
    i32 %9 = srem i32 %8, i32 999;
    i32 %10 = add i32 %9, i32 3;
    i32 %11 = srem i32 %10, i32 999;
    i32 %12 = add i32 %11, i32 3;
    i32 %13 = srem i32 %12, i32 999;
    i32 %14 = add i32 %13, i32 3;
    i32 %15 = srem i32 %14, i32 999;
    i32 %16 = add i32 %15, i32 3;
    i32 %17 = srem i32 %16, i32 999;
    i32 %18 = add i32 %17, i32 3;
    i32 %19 = srem i32 %18, i32 999;
    i32 %20 = add i32 %19, i32 3;
    i32 %21 = srem i32 %20, i32 999;
    i32 %22 = add i32 %21, i32 3;
    i32 %23 = srem i32 %22, i32 999;
    i32 %24 = add i32 %23, i32 3;
    i32 %25 = srem i32 %24, i32 999;
    i32 %26 = add i32 %25, i32 3;
    i32 %27 = srem i32 %26, i32 999;
    i32 %28 = add i32 %27, i32 3;
    i32 %29 = srem i32 %28, i32 999;
    i32 %30 = add i32 %29, i32 3;
    i32 %31 = srem i32 %30, i32 999;
    i32 %32 = add i32 %31, i32 3;
    i32 %33 = srem i32 %32, i32 999;
    i32 %34 = add i32 %33, i32 3;
    i32 %35 = srem i32 %34, i32 999;
    i32 %36 = add i32 %35, i32 3;
    i32 %37 = srem i32 %36, i32 999;
    i32 %38 = add i32 %37, i32 3;
    i32 %39 = srem i32 %38, i32 999;
    i32 %40 = add i32 %39, i32 3;
    i32 %41 = srem i32 %40, i32 999;
    i32 %42 = add i32 %41, i32 3;
    i32 %43 = srem i32 %42, i32 999;
    i32 %44 = add i32 %43, i32 3;
    i32 %45 = srem i32 %44, i32 999;
    i32 %46 = add i32 %45, i32 3;
    i32 %47 = srem i32 %46, i32 999;
    i32 %48 = add i32 %47, i32 3;
    i32 %49 = srem i32 %48, i32 999;
    i32 %50 = add i32 %49, i32 3;
    i32 %51 = srem i32 %50, i32 999;
    i32 %52 = add i32 %51, i32 3;
    i32 %53 = srem i32 %52, i32 999;
    i32 %54 = add i32 %53, i32 3;
    i32 %55 = srem i32 %54, i32 999;
    i32 %56 = add i32 %55, i32 3;
    i32 %57 = srem i32 %56, i32 999;
    i32 %58 = add i32 %57, i32 3;
    i32 %59 = srem i32 %58, i32 999;
    i32 %60 = add i32 %59, i32 3;
    i32 %61 = srem i32 %60, i32 999;
    i32 %62 = add i32 %61, i32 3;
    i32 %63 = srem i32 %62, i32 999;
    i32 %64 = add i32 %63, i32 3;
    i32 %65 = srem i32 %64, i32 999;
    i32 %66 = add i32 %65, i32 3;
    i32 %67 = srem i32 %66, i32 999;
    i32 %68 = add i32 %67, i32 3;
    i32 %69 = srem i32 %68, i32 999;
    i32 %70 = add i32 %69, i32 3;
    i32 %71 = srem i32 %70, i32 999;
    i32 %72 = add i32 %arg11, i32 2;
    i1 %73 = scmp lt i32 %72, i32 6;
    cbr i1 %73(prob = 0.67), [ ^while.body i32 %71, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %72 ], [ ^b i32 %71, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg10, i32 1;
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg9, i32 1;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 0, i32 0 ], [ ^b2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^b2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 0, i32 0, i32 0 ], [ ^b3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    i1 %1 = scmp lt i32 %0, i32 6;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0, i32 0, i32 0, i32 0, i32 0 ], [ ^b4 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 1;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b5 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^b5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b6 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b6(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b7 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b7(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b8 i32 %arg, i32 %arg1, i32 %arg2 ];
^b8(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b9 i32 %arg, i32 %arg1 ];
^b9(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 ], [ ^b10 i32 %arg ];
^b10(i32 %arg):
    ret i32 %arg;
}
