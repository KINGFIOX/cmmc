internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %kkkkk = alloc i32;
    i32* %jjjjj = alloc i32;
    i32* %iiiii = alloc i32;
    i32* %kkkk = alloc i32;
    i32* %jjjj = alloc i32;
    i32* %iiii = alloc i32;
    i32* %kkk = alloc i32;
    i32* %jjj = alloc i32;
    i32* %iii = alloc i32;
    i32* %kk = alloc i32;
    i32* %jj = alloc i32;
    i32* %ii = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 3;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    i32 %4 = load i32* %a;
    ret i32 %4;
^while.header1:
    i32 %5 = load i32* %j;
    i1 %6 = scmp lt i32 %5, i32 4;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %k with i32 0;
    ubr ^while.header2;
^b1:
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^while.header2:
    i32 %11 = load i32* %k;
    i1 %12 = scmp lt i32 %11, i32 5;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %ii with i32 0;
    ubr ^while.header3;
^b2:
    i32 %15 = load i32* %j;
    i32 %16 = add i32 %15, i32 1;
    store i32* %j with i32 %16;
    ubr ^while.header1;
^while.header3:
    i32 %17 = load i32* %ii;
    i1 %18 = scmp lt i32 %17, i32 3;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    store i32* %jj with i32 0;
    ubr ^while.header4;
^b3:
    i32 %21 = load i32* %k;
    i32 %22 = add i32 %21, i32 1;
    store i32* %k with i32 %22;
    ubr ^while.header2;
^while.header4:
    i32 %23 = load i32* %jj;
    i1 %24 = scmp lt i32 %23, i32 5;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body4, ^b4;
^while.body4:
    store i32* %kk with i32 0;
    ubr ^while.header5;
^b4:
    i32 %27 = load i32* %ii;
    i32 %28 = add i32 %27, i32 1;
    store i32* %ii with i32 %28;
    ubr ^while.header3;
^while.header5:
    i32 %29 = load i32* %kk;
    i1 %30 = scmp lt i32 %29, i32 4;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    store i32* %iii with i32 0;
    ubr ^while.header6;
^b5:
    i32 %33 = load i32* %jj;
    i32 %34 = add i32 %33, i32 1;
    store i32* %jj with i32 %34;
    ubr ^while.header4;
^while.header6:
    i32 %35 = load i32* %iii;
    i1 %36 = scmp lt i32 %35, i32 6;
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    cbr i1 %38(prob = 0.97), ^while.body6, ^b6;
^while.body6:
    store i32* %jjj with i32 0;
    ubr ^while.header7;
^b6:
    i32 %39 = load i32* %kk;
    i32 %40 = add i32 %39, i32 1;
    store i32* %kk with i32 %40;
    ubr ^while.header5;
^while.header7:
    i32 %41 = load i32* %jjj;
    i1 %42 = scmp lt i32 %41, i32 5;
    i32 %43 = zext i1 %42 to i32;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body7, ^b7;
^while.body7:
    store i32* %kkk with i32 0;
    ubr ^while.header8;
^b7:
    i32 %45 = load i32* %iii;
    i32 %46 = add i32 %45, i32 1;
    store i32* %iii with i32 %46;
    ubr ^while.header6;
^while.header8:
    i32 %47 = load i32* %kkk;
    i1 %48 = scmp lt i32 %47, i32 5;
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.97), ^while.body8, ^b8;
^while.body8:
    store i32* %iiii with i32 0;
    ubr ^while.header9;
^b8:
    i32 %51 = load i32* %jjj;
    i32 %52 = add i32 %51, i32 1;
    store i32* %jjj with i32 %52;
    ubr ^while.header7;
^while.header9:
    i32 %53 = load i32* %iiii;
    i1 %54 = scmp lt i32 %53, i32 3;
    i32 %55 = zext i1 %54 to i32;
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body9, ^b9;
^while.body9:
    store i32* %jjjj with i32 0;
    ubr ^while.header10;
^b9:
    i32 %57 = load i32* %kkk;
    i32 %58 = add i32 %57, i32 1;
    store i32* %kkk with i32 %58;
    ubr ^while.header8;
^while.header10:
    i32 %59 = load i32* %jjjj;
    i1 %60 = scmp lt i32 %59, i32 6;
    i32 %61 = zext i1 %60 to i32;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body10, ^b10;
^while.body10:
    store i32* %kkkk with i32 0;
    ubr ^while.header11;
^b10:
    i32 %63 = load i32* %iiii;
    i32 %64 = add i32 %63, i32 1;
    store i32* %iiii with i32 %64;
    ubr ^while.header9;
^while.header11:
    i32 %65 = load i32* %kkkk;
    i1 %66 = scmp lt i32 %65, i32 7;
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.97), ^while.body11, ^b11;
^while.body11:
    store i32* %iiiii with i32 0;
    ubr ^while.header12;
^b11:
    i32 %69 = load i32* %jjjj;
    i32 %70 = add i32 %69, i32 2;
    store i32* %jjjj with i32 %70;
    ubr ^while.header10;
^while.header12:
    i32 %71 = load i32* %iiiii;
    i1 %72 = scmp lt i32 %71, i32 5;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body12, ^b12;
^while.body12:
    store i32* %jjjjj with i32 0;
    ubr ^while.header13;
^b12:
    i32 %75 = load i32* %kkkk;
    i32 %76 = add i32 %75, i32 2;
    store i32* %kkkk with i32 %76;
    ubr ^while.header11;
^while.header13:
    i32 %77 = load i32* %jjjjj;
    i1 %78 = scmp lt i32 %77, i32 3;
    i32 %79 = zext i1 %78 to i32;
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.97), ^while.body13, ^b13;
^while.body13:
    store i32* %kkkkk with i32 0;
    ubr ^while.header14;
^b13:
    i32 %81 = load i32* %iiiii;
    i32 %82 = add i32 %81, i32 2;
    store i32* %iiiii with i32 %82;
    ubr ^while.header12;
^while.header14:
    i32 %83 = load i32* %kkkkk;
    i1 %84 = scmp lt i32 %83, i32 6;
    i32 %85 = zext i1 %84 to i32;
    i1 %86 = scmp neq i32 %85, i32 0;
    cbr i1 %86(prob = 0.97), ^while.body14, ^b14;
^while.body14:
    i32 %87 = load i32* %a;
    i32 %88 = add i32 %87, i32 3;
    i32 %89 = srem i32 %88, i32 999;
    store i32* %a with i32 %89;
    i32 %90 = load i32* %kkkkk;
    i32 %91 = add i32 %90, i32 3;
    store i32* %kkkkk with i32 %91;
    ubr ^while.header14;
^b14:
    i32 %92 = load i32* %jjjjj;
    i32 %93 = add i32 %92, i32 1;
    store i32* %jjjjj with i32 %93;
    ubr ^while.header13;
}
