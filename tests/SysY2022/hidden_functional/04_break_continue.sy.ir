internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 20;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    i32 %4 = load i32* %sum;
    ret i32 %4;
^while.header1:
    i32 %5 = load i32* %j;
    i1 %6 = scmp lt i32 %5, i32 10;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %k with i32 0;
    ubr ^while.header2;
^b1:
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^while.header2:
    i32 %11 = load i32* %k;
    i1 %12 = scmp lt i32 %11, i32 5;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %m with i32 0;
    ubr ^while.header3;
^b2:
    i32 %15 = load i32* %j;
    i32 %16 = add i32 %15, i32 1;
    store i32* %j with i32 %16;
    ubr ^while.header1;
^while.header3:
    i32 %17 = load i32* %m;
    i1 %18 = scmp lt i32 %17, i32 3;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body3, ^b3;
^b3:
    ubr ^while.header4;
^while.body3:
    i32 %21 = load i32* %m;
    i32 %22 = add i32 %21, i32 1;
    i1 %23 = scmp ge i32 %22, i32 3;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then, ^b4;
^b4:
    store i32* %n with i32 0;
    ubr ^while.header5;
^if.then:
    i32 %26 = load i32* %m;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^b5;
^while.header4:
    i1 %28 = scmp neq i32 1, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body4, ^b6;
^b5:
    ubr ^b4;
^while.body4:
    ubr ^while.header6;
^if.then1:
    i32 %29 = load i32* %m;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^b8, ^b7;
^b6:
    i32 %31 = load i32* %k;
    i32 %32 = add i32 %31, i32 1;
    store i32* %k with i32 %32;
    ubr ^while.header2;
^while.header5:
    i32 %33 = load i32* %n;
    i1 %34 = scmp lt i32 %33, i32 2;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body5, ^b9;
^b7:
    i32 %37 = load i32* %m;
    i1 %38 = scmp neq i32 %37, i32 0;
    i1 %39 = xor i1 %38, i1 true;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    ubr ^b8;
^while.body5:
    i32 %42 = load i32* %n;
    i32 %43 = add i32 %42, i32 1;
    store i32* %n with i32 %43;
    ubr ^while.header5;
^b8:
    i1 %44 = phi [^b7, i1 %41] [^if.then1, i1 true];
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then2, ^b10;
^b9:
    i32 %47 = load i32* %m;
    i32 %48 = add i32 %47, i32 1;
    store i32* %m with i32 %48;
    i32 %49 = load i32* %sum;
    i32 %50 = add i32 %49, i32 1;
    store i32* %sum with i32 %50;
    ubr ^while.header3;
^while.header6:
    i1 %51 = scmp neq i32 1, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body6, ^b11;
^b10:
    ubr ^b5;
^while.body6:
    ubr ^b11;
^if.then2:
    i32 %52 = load i32* %m;
    i32 %53 = sub i32 %52, i32 -1;
    i1 %54 = scmp ge i32 %53, i32 3;
    i32 %55 = zext i1 %54 to i32;
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.5), ^if.then3, ^b12;
^b11:
    ubr ^b6;
^if.then3:
    ubr ^b3;
^b12:
    ubr ^b10;
}
