func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse Entry } {
^entry():
    ubr [ ^while.body i32 0, i32 0, i32 0, i32 0, i32 0 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp gt i32 %0, i32 2;
    cbr i1 %1(prob = 0.5), [ ^indirect i32 %arg4, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^b i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ], [ ^b i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i32 %1 = add i32 %arg, i32 1;
    i1 %2 = scmp lt i32 %0, i32 3;
    cbr i1 %2(prob = 0.97), [ ^while.body i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0 ], [ ^while.header i32 %1, i32 %arg1, i32 %arg2, i32 %arg3 ];
^if.then(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp neq i32 %arg4, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^indirect1 i1 %0, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^while.header(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2, i32 %0, i32 0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2 ];
^if.then1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp gt i32 %0, i32 2;
    cbr i1 %1(prob = 0.5), [ ^while.header i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^indirect1(i1 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = xor i1 %arg, i1 true;
    cbr i1 %0(prob = 0.5), [ ^if.then1 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ], [ ^b i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %arg1, i32 %0, i32 0, i32 0 ], [ ^b2 i32 %arg, i32 %arg1 ];
^b2(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 20;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg, i32 %0, i32 0, i32 0, i32 0 ], [ ^b3 i32 %arg ];
^b3(i32 %arg):
    ret i32 %arg;
}
