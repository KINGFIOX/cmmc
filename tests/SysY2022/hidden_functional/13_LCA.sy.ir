internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = scmp neq i32 %5, i32 0;
    [10005 * i32]* %7 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    i32 %9 = add i32 %d, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %10, i32 1;
    i32* %17 = getelementptr &([20 * i32]* %3)[i64 0][i32 %16];
    store i32* %17 with i32 %15;
    i1 %18 = scmp neq i32 %15, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = scmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %9);
    i32* %26 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %5 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    [10005 * i32]* %6 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    [10005 * [20 * i32]]* %7 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %9 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %11 = call () -> i32 @getch();
    i1 %12 = scmp lt i32 %11, i32 48;
    i1 %13 = scmp gt i32 %11, i32 57;
    i1 %14 = or i1 %12, i1 %13;
    i1 %15 = scmp eq i32 %9, i32 45;
    i32 %16 = select i1 %15 ? i32 1 : i32 %10;
    cbr i1 %14(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %17 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %18 = phi [^entry, i32 0] [^while.body, i32 %16];
    i1 %19 = scmp gt i32 %17, i32 47;
    i1 %20 = scmp le i32 %17, i32 57;
    i1 %21 = and i1 %19, i1 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %22 = phi [^indirect, i32 0] [^while.body1, i32 %30];
    i32 %23 = phi [^indirect, i32 %17] [^while.body1, i32 %24];
    i32 %24 = call () -> i32 @getch();
    i1 %25 = scmp gt i32 %24, i32 47;
    i1 %26 = scmp le i32 %24, i32 57;
    i1 %27 = and i1 %25, i1 %26;
    i32 %28 = mul i32 %22, i32 10;
    i32 %29 = add i32 %28, i32 -48;
    i32 %30 = add i32 %29, i32 %23;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %31 = phi [^indirect, i32 0] [^while.body1, i32 %30];
    i32 %32 = call () -> i32 @getch();
    i1 %33 = scmp lt i32 %32, i32 48;
    i1 %34 = scmp gt i32 %32, i32 57;
    i1 %35 = or i1 %33, i1 %34;
    i32 %36 = neg i32 %31;
    i1 %37 = scmp neq i32 %18, i32 0;
    i32 %38 = select i1 %37 ? i32 %36 : i32 %31;
    cbr i1 %35(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %39 = phi [^b, i32 %32] [^while.body2, i32 %41];
    i32 %40 = phi [^b, i32 0] [^while.body2, i32 %46];
    i32 %41 = call () -> i32 @getch();
    i1 %42 = scmp lt i32 %41, i32 48;
    i1 %43 = scmp gt i32 %41, i32 57;
    i1 %44 = or i1 %42, i1 %43;
    i1 %45 = scmp eq i32 %39, i32 45;
    i32 %46 = select i1 %45 ? i32 1 : i32 %40;
    cbr i1 %44(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %47 = phi [^b, i32 %32] [^while.body2, i32 %41];
    i32 %48 = phi [^b, i32 0] [^while.body2, i32 %46];
    i1 %49 = scmp gt i32 %47, i32 47;
    i1 %50 = scmp le i32 %47, i32 57;
    i1 %51 = and i1 %49, i1 %50;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %52 = phi [^indirect1, i32 0] [^while.body3, i32 %60];
    i32 %53 = phi [^indirect1, i32 %47] [^while.body3, i32 %54];
    i32 %54 = call () -> i32 @getch();
    i1 %55 = scmp gt i32 %54, i32 47;
    i1 %56 = scmp le i32 %54, i32 57;
    i1 %57 = and i1 %55, i1 %56;
    i32 %58 = mul i32 %52, i32 10;
    i32 %59 = add i32 %58, i32 -48;
    i32 %60 = add i32 %59, i32 %53;
    cbr i1 %57(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %61 = phi [^indirect1, i32 0] [^while.body3, i32 %60];
    i32 %62 = neg i32 %61;
    i1 %63 = scmp neq i32 %48, i32 0;
    i32 %64 = select i1 %63 ? i32 %62 : i32 %61;
    i32* %65 = getelementptr &([10005 * i32]* %8)[i64 0][i64 0];
    store i32* %65 with i32 1061109567;
    i1 %66 = scmp gt i32 %38, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %67 = phi [^b1, i32 1] [^while.body4, i32 %69];
    i32* %68 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %67];
    store i32* %68 with i32 -1;
    i32 %69 = add i32 %67, i32 1;
    i1 %70 = scmp le i32 %69, i32 %38;
    cbr i1 %70(prob = 0.97), ^while.body4, ^entry1;
  ^entry1:
    i1 %71 = scmp neq i32 %38, i32 1;
    cbr i1 %71(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %72 = phi [^entry1, i32 0] [^b6, i32 %186];
    i32 %73 = phi [^entry1, i32 1] [^b6, i32 %184];
    i32 %74 = call () -> i32 @getch();
    i1 %75 = scmp lt i32 %74, i32 48;
    i1 %76 = scmp gt i32 %74, i32 57;
    i1 %77 = or i1 %75, i1 %76;
    cbr i1 %77(prob = 0.97), ^while.body6, ^indirect2;
  ^b2:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %78 = scmp neq i32 %64, i32 0;
    cbr i1 %78(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32 %79 = phi [^while.body5, i32 %74] [^while.body6, i32 %81];
    i32 %80 = phi [^while.body5, i32 0] [^while.body6, i32 %86];
    i32 %81 = call () -> i32 @getch();
    i1 %82 = scmp lt i32 %81, i32 48;
    i1 %83 = scmp gt i32 %81, i32 57;
    i1 %84 = or i1 %82, i1 %83;
    i1 %85 = scmp eq i32 %79, i32 45;
    i32 %86 = select i1 %85 ? i32 1 : i32 %80;
    cbr i1 %84(prob = 0.97), ^while.body6, ^indirect2;
  ^while.body7:
    i32 %87 = phi [^b2, i32 %64] [^b10, i32 %229];
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp lt i32 %88, i32 48;
    i1 %90 = scmp gt i32 %88, i32 57;
    i1 %91 = or i1 %89, i1 %90;
    cbr i1 %91(prob = 0.97), ^while.body9, ^indirect3;
  ^indirect2:
    i32 %92 = phi [^while.body5, i32 %74] [^while.body6, i32 %81];
    i32 %93 = phi [^while.body5, i32 0] [^while.body6, i32 %86];
    i1 %94 = scmp gt i32 %92, i32 47;
    i1 %95 = scmp le i32 %92, i32 57;
    i1 %96 = and i1 %94, i1 %95;
    cbr i1 %96(prob = 0.97), ^while.body8, ^b4;
  ^b3:
    ret i32 0;
  ^while.body8:
    i32 %97 = phi [^indirect2, i32 0] [^while.body8, i32 %105];
    i32 %98 = phi [^indirect2, i32 %92] [^while.body8, i32 %99];
    i32 %99 = call () -> i32 @getch();
    i1 %100 = scmp gt i32 %99, i32 47;
    i1 %101 = scmp le i32 %99, i32 57;
    i1 %102 = and i1 %100, i1 %101;
    i32 %103 = mul i32 %97, i32 10;
    i32 %104 = add i32 %103, i32 -48;
    i32 %105 = add i32 %104, i32 %98;
    cbr i1 %102(prob = 0.97), ^while.body8, ^b4;
  ^while.body9:
    i32 %106 = phi [^while.body7, i32 %88] [^while.body9, i32 %108];
    i32 %107 = phi [^while.body7, i32 0] [^while.body9, i32 %113];
    i32 %108 = call () -> i32 @getch();
    i1 %109 = scmp lt i32 %108, i32 48;
    i1 %110 = scmp gt i32 %108, i32 57;
    i1 %111 = or i1 %109, i1 %110;
    i1 %112 = scmp eq i32 %106, i32 45;
    i32 %113 = select i1 %112 ? i32 1 : i32 %107;
    cbr i1 %111(prob = 0.97), ^while.body9, ^indirect3;
  ^b4:
    i32 %114 = phi [^indirect2, i32 0] [^while.body8, i32 %105];
    i32 %115 = call () -> i32 @getch();
    i1 %116 = scmp lt i32 %115, i32 48;
    i1 %117 = scmp gt i32 %115, i32 57;
    i1 %118 = or i1 %116, i1 %117;
    i32 %119 = neg i32 %114;
    i1 %120 = scmp neq i32 %93, i32 0;
    i32 %121 = select i1 %120 ? i32 %119 : i32 %114;
    cbr i1 %118(prob = 0.97), ^while.body11, ^indirect4;
  ^indirect3:
    i32 %122 = phi [^while.body7, i32 %88] [^while.body9, i32 %108];
    i32 %123 = phi [^while.body7, i32 0] [^while.body9, i32 %113];
    i1 %124 = scmp gt i32 %122, i32 47;
    i1 %125 = scmp le i32 %122, i32 57;
    i1 %126 = and i1 %124, i1 %125;
    cbr i1 %126(prob = 0.97), ^while.body10, ^b5;
  ^while.body10:
    i32 %127 = phi [^indirect3, i32 0] [^while.body10, i32 %135];
    i32 %128 = phi [^indirect3, i32 %122] [^while.body10, i32 %129];
    i32 %129 = call () -> i32 @getch();
    i1 %130 = scmp gt i32 %129, i32 47;
    i1 %131 = scmp le i32 %129, i32 57;
    i1 %132 = and i1 %130, i1 %131;
    i32 %133 = mul i32 %127, i32 10;
    i32 %134 = add i32 %133, i32 -48;
    i32 %135 = add i32 %134, i32 %128;
    cbr i1 %132(prob = 0.97), ^while.body10, ^b5;
  ^while.body11:
    i32 %136 = phi [^b4, i32 %115] [^while.body11, i32 %138];
    i32 %137 = phi [^b4, i32 0] [^while.body11, i32 %143];
    i32 %138 = call () -> i32 @getch();
    i1 %139 = scmp lt i32 %138, i32 48;
    i1 %140 = scmp gt i32 %138, i32 57;
    i1 %141 = or i1 %139, i1 %140;
    i1 %142 = scmp eq i32 %136, i32 45;
    i32 %143 = select i1 %142 ? i32 1 : i32 %137;
    cbr i1 %141(prob = 0.97), ^while.body11, ^indirect4;
  ^b5:
    i32 %144 = phi [^indirect3, i32 0] [^while.body10, i32 %135];
    i32 %145 = call () -> i32 @getch();
    i1 %146 = scmp lt i32 %145, i32 48;
    i1 %147 = scmp gt i32 %145, i32 57;
    i1 %148 = or i1 %146, i1 %147;
    i32 %149 = neg i32 %144;
    i1 %150 = scmp neq i32 %123, i32 0;
    i32 %151 = select i1 %150 ? i32 %149 : i32 %144;
    cbr i1 %148(prob = 0.97), ^while.body13, ^indirect5;
  ^indirect4:
    i32 %152 = phi [^b4, i32 %115] [^while.body11, i32 %138];
    i32 %153 = phi [^b4, i32 0] [^while.body11, i32 %143];
    i1 %154 = scmp gt i32 %152, i32 47;
    i1 %155 = scmp le i32 %152, i32 57;
    i1 %156 = and i1 %154, i1 %155;
    cbr i1 %156(prob = 0.97), ^while.body12, ^b6;
  ^while.body12:
    i32 %157 = phi [^indirect4, i32 0] [^while.body12, i32 %165];
    i32 %158 = phi [^indirect4, i32 %152] [^while.body12, i32 %159];
    i32 %159 = call () -> i32 @getch();
    i1 %160 = scmp gt i32 %159, i32 47;
    i1 %161 = scmp le i32 %159, i32 57;
    i1 %162 = and i1 %160, i1 %161;
    i32 %163 = mul i32 %157, i32 10;
    i32 %164 = add i32 %163, i32 -48;
    i32 %165 = add i32 %164, i32 %158;
    cbr i1 %162(prob = 0.97), ^while.body12, ^b6;
  ^while.body13:
    i32 %166 = phi [^b5, i32 %145] [^while.body13, i32 %168];
    i32 %167 = phi [^b5, i32 0] [^while.body13, i32 %173];
    i32 %168 = call () -> i32 @getch();
    i1 %169 = scmp lt i32 %168, i32 48;
    i1 %170 = scmp gt i32 %168, i32 57;
    i1 %171 = or i1 %169, i1 %170;
    i1 %172 = scmp eq i32 %166, i32 45;
    i32 %173 = select i1 %172 ? i32 1 : i32 %167;
    cbr i1 %171(prob = 0.97), ^while.body13, ^indirect5;
  ^b6:
    i32 %174 = phi [^indirect4, i32 0] [^while.body12, i32 %165];
    i32 %175 = neg i32 %174;
    i1 %176 = scmp neq i32 %153, i32 0;
    i32 %177 = select i1 %176 ? i32 %175 : i32 %174;
    i32* %178 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %72];
    store i32* %178 with i32 %177;
    [20 * i32]* %179 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %177];
    i32* %180 = getelementptr &([20 * i32]* %179)[i64 0][i64 0];
    i32* %181 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %121];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %72];
    store i32* %183 with i32 %182;
    store i32* %181 with i32 %72;
    store i32* %180 with i32 %121;
    i32 %184 = add i32 %73, i32 1;
    i1 %185 = scmp neq i32 %184, i32 %38;
    i32 %186 = add i32 %72, i32 1;
    cbr i1 %185(prob = 0.97), ^while.body5, ^b2;
  ^indirect5:
    i32 %187 = phi [^b5, i32 %145] [^while.body13, i32 %168];
    i32 %188 = phi [^b5, i32 0] [^while.body13, i32 %173];
    i1 %189 = scmp gt i32 %187, i32 47;
    i1 %190 = scmp le i32 %187, i32 57;
    i1 %191 = and i1 %189, i1 %190;
    cbr i1 %191(prob = 0.97), ^while.body14, ^b7;
  ^b7:
    i32 %192 = phi [^indirect5, i32 0] [^while.body14, i32 %212];
    i32 %193 = neg i32 %192;
    i1 %194 = scmp neq i32 %188, i32 0;
    i32 %195 = select i1 %194 ? i32 %193 : i32 %192;
    i32* %196 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %195];
    i32* %197 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %151];
    i32 %198 = load i32* %197;
    i32 %199 = load i32* %196;
    i1 %200 = scmp lt i32 %198, i32 %199;
    i32 %201 = select i1 %200 ? i32 %151 : i32 %195;
    i32* %202 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %201];
    i32 %203 = select i1 %200 ? i32 %195 : i32 %151;
    ubr ^while.header;
  ^while.body14:
    i32 %204 = phi [^indirect5, i32 0] [^while.body14, i32 %212];
    i32 %205 = phi [^indirect5, i32 %187] [^while.body14, i32 %206];
    i32 %206 = call () -> i32 @getch();
    i1 %207 = scmp gt i32 %206, i32 47;
    i1 %208 = scmp le i32 %206, i32 57;
    i1 %209 = and i1 %207, i1 %208;
    i32 %210 = mul i32 %204, i32 10;
    i32 %211 = add i32 %210, i32 -48;
    i32 %212 = add i32 %211, i32 %205;
    cbr i1 %209(prob = 0.97), ^while.body14, ^b7;
  ^while.header:
    i32 %213 = phi [^b7, i32 19] [^b12, i32 %238];
    i32 %214 = phi [^b7, i32 %203] [^b12, i32 %237];
    i32* %215 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %214];
    i32 %216 = load i32* %215;
    i32 %217 = load i32* %202;
    i1 %218 = scmp gt i32 %216, i32 %217;
    cbr i1 %218(prob = 0.97), ^while.body15, ^b8;
  ^while.body15:
    [20 * i32]* %219 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %214];
    i32* %220 = getelementptr &([20 * i32]* %219)[i64 0][i32 %213];
    i32 %221 = load i32* %220;
    i1 %222 = scmp neq i32 %221, i32 0;
    cbr i1 %222(prob = 0.5), ^b9, ^b11;
  ^b8:
    i1 %223 = scmp eq i32 %214, i32 %201;
    cbr i1 %223(prob = 0.5), ^b10, ^while.header1;
  ^b9:
    i32* %224 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %221];
    i32 %225 = load i32* %224;
    i32 %226 = load i32* %202;
    i1 %227 = scmp ge i32 %225, i32 %226;
    ubr ^b11;
  ^b10:
    i32 %228 = phi [^b8, i32 %214] [^b13, i32 %241];
    call (i32) -> void @putint(i32 %228);
    call (i32) -> void @putch(i32 10);
    i32 %229 = add i32 %87, i32 -1;
    i1 %230 = scmp neq i32 %229, i32 0;
    cbr i1 %230(prob = 0.97), ^while.body7, ^b3;
  ^b11:
    i1 %231 = phi [^while.body15, i1 false] [^b9, i1 %227];
    cbr i1 %231(prob = 0.5), ^if.then, ^b12;
  ^while.header1:
    i32 %232 = phi [^b8, i32 %201] [^b14, i32 %250];
    i32 %233 = phi [^b8, i32 19] [^b14, i32 %252];
    i32 %234 = phi [^b8, i32 %214] [^b14, i32 %251];
    i1 %235 = scmp gt i32 %233, i32 -1;
    cbr i1 %235(prob = 0.97), ^while.body16, ^b13;
  ^if.then:
    i32 %236 = load i32* %220;
    ubr ^b12;
  ^b12:
    i32 %237 = phi [^b11, i32 %214] [^if.then, i32 %236];
    i32 %238 = add i32 %213, i32 -1;
    ubr ^while.header;
  ^b13:
    [20 * i32]* %239 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %234];
    i32* %240 = getelementptr &([20 * i32]* %239)[i64 0][i64 0];
    i32 %241 = load i32* %240;
    ubr ^b10;
  ^while.body16:
    [20 * i32]* %242 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %234];
    i32* %243 = getelementptr &([20 * i32]* %242)[i64 0][i32 %233];
    i32 %244 = load i32* %243;
    [20 * i32]* %245 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %232];
    i32* %246 = getelementptr &([20 * i32]* %245)[i64 0][i32 %233];
    i32 %247 = load i32* %246;
    i1 %248 = scmp neq i32 %244, i32 %247;
    cbr i1 %248(prob = 0.5), ^if.then1, ^b14;
  ^if.then1:
    i32 %249 = load i32* %243;
    ubr ^b14;
  ^b14:
    i32 %250 = phi [^while.body16, i32 %232] [^if.then1, i32 %247];
    i32 %251 = phi [^while.body16, i32 %234] [^if.then1, i32 %249];
    i32 %252 = add i32 %233, i32 -1;
    ubr ^while.header1;
}
