internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @quick_read() -> i32 {
^entry:
    i32* %f = alloc i32;
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    store i32* %x with i32 0;
    store i32* %f with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %ch;
    i1 %2 = scmp lt i32 %1, i32 48;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i32 %5 = load i32* %ch;
    i1 %6 = scmp gt i32 %5, i32 57;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    ubr ^b1;
^b1:
    i1 %9 = phi [^b, i1 %8] [^while.header, i1 true];
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b2;
^b2:
    ubr ^while.header1;
^while.body:
    i32 %12 = load i32* %ch;
    i1 %13 = scmp eq i32 %12, i32 45;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^if.then:
    store i32* %f with i32 1;
    ubr ^b3;
^b3:
    i32 %16 = call () -> i32 @getch();
    store i32* %ch with i32 %16;
    ubr ^while.header;
^while.header1:
    i32 %17 = load i32* %ch;
    i1 %18 = scmp ge i32 %17, i32 48;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^b4, ^b5;
^b4:
    i32 %21 = load i32* %ch;
    i1 %22 = scmp le i32 %21, i32 57;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b5;
^b5:
    i1 %25 = phi [^b4, i1 %24] [^while.header1, i1 false];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b6;
^while.body1:
    i32 %28 = load i32* %x;
    i32 %29 = mul i32 %28, i32 10;
    i32 %30 = load i32* %ch;
    i32 %31 = add i32 %29, i32 %30;
    i32 %32 = sub i32 %31, i32 48;
    store i32* %x with i32 %32;
    i32 %33 = call () -> i32 @getch();
    store i32* %ch with i32 %33;
    ubr ^while.header1;
^b6:
    i32 %34 = load i32* %f;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %36 = load i32* %x;
    i32 %37 = neg i32 %36;
    ret i32 %37;
^if.else:
    i32 %38 = load i32* %x;
    ret i32 %38;
^b7:
    unreachable;
}
internal i32* @maxn { ReadOnly } = 10005;
internal i32* @n;
internal i32* @m;
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal i32* @cnt = 0;
internal func @add_edge(i32 %from, i32 %To) -> void {
^entry:
    i32* %To1 = alloc i32;
    i32* %from1 = alloc i32;
    store i32* %from1 with i32 %from;
    store i32* %To1 with i32 %To;
    i32 %0 = load i32* @cnt;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([10005 * i32]* @to)[i64 0][i64 %1];
    i32 %3 = load i32* %To1;
    store i32* %2 with i32 %3;
    i32 %4 = load i32* @cnt;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10005 * i32]* @next)[i64 0][i64 %5];
    i32 %7 = load i32* %from1;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([10005 * i32]* @head)[i64 0][i64 %8];
    i32 %10 = load i32* %9;
    store i32* %6 with i32 %10;
    i32 %11 = load i32* %from1;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([10005 * i32]* @head)[i64 0][i64 %12];
    i32 %14 = load i32* @cnt;
    store i32* %13 with i32 %14;
    i32 %15 = load i32* @cnt;
    i32 %16 = add i32 %15, i32 1;
    store i32* @cnt with i32 %16;
    i32 %17 = load i32* %To1;
    i64 %18 = sext i32 %17 to i64;
    [20 * i32]* %19 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %18];
    i32* %20 = getelementptr &([20 * i32]* %19)[i64 0][i64 0];
    i32 %21 = load i32* %from1;
    store i32* %20 with i32 %21;
    ret;
}
internal func @init() -> void {
^entry:
    i32* %i = alloc i32;
    i32* %0 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %0 with i32 1061109567;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* @n;
    i1 %3 = scmp le i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = getelementptr &([10005 * i32]* @head)[i64 0][i64 %7];
    store i32* %8 with i32 -1;
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^b:
    ret;
}
internal func @tree(i32 %x, i32 %d) -> void {
^entry:
    i32* %y = alloc i32;
    i32* %i = alloc i32;
    i32* %d1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %d1 with i32 %d;
    i32 %0 = load i32* %x1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %1];
    i32 %3 = load i32* %d1;
    store i32* %2 with i32 %3;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %x1;
    i64 %5 = sext i32 %4 to i64;
    [20 * i32]* %6 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %5];
    i32 %7 = load i32* %i;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([20 * i32]* %6)[i64 0][i64 %8];
    i32 %10 = load i32* %9;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = load i32* %x1;
    i64 %13 = sext i32 %12 to i64;
    [20 * i32]* %14 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %13];
    i32 %15 = load i32* %i;
    i32 %16 = add i32 %15, i32 1;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = getelementptr &([20 * i32]* %14)[i64 0][i64 %17];
    i32 %19 = load i32* %x1;
    i64 %20 = sext i32 %19 to i64;
    [20 * i32]* %21 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %20];
    i32 %22 = load i32* %i;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = getelementptr &([20 * i32]* %21)[i64 0][i64 %23];
    i32 %25 = load i32* %24;
    i64 %26 = sext i32 %25 to i64;
    [20 * i32]* %27 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %26];
    i32 %28 = load i32* %i;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([20 * i32]* %27)[i64 0][i64 %29];
    i32 %31 = load i32* %30;
    store i32* %18 with i32 %31;
    i32 %32 = load i32* %i;
    i32 %33 = add i32 %32, i32 1;
    store i32* %i with i32 %33;
    ubr ^while.header;
^b:
    i32 %34 = load i32* %x1;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([10005 * i32]* @head)[i64 0][i64 %35];
    i32 %37 = load i32* %36;
    store i32* %i with i32 %37;
    ubr ^while.header1;
^while.header1:
    i32 %38 = load i32* %i;
    i1 %39 = scmp neq i32 %38, i32 -1;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %42 = load i32* %i;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = getelementptr &([10005 * i32]* @to)[i64 0][i64 %43];
    i32 %45 = load i32* %44;
    store i32* %y with i32 %45;
    i32 %46 = load i32* %y;
    i32 %47 = load i32* %d1;
    i32 %48 = add i32 %47, i32 1;
    call (i32, i32) -> void @tree(i32 %46, i32 %48);
    i32 %49 = load i32* %i;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([10005 * i32]* @next)[i64 0][i64 %50];
    i32 %52 = load i32* %51;
    store i32* %i with i32 %52;
    ubr ^while.header1;
^b1:
    ret;
}
internal func @LCA(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %t = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %x1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %1];
    i32 %3 = load i32* %2;
    i32 %4 = load i32* %y1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %5];
    i32 %7 = load i32* %6;
    i1 %8 = scmp lt i32 %3, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %11 = load i32* %x1;
    store i32* %t with i32 %11;
    i32 %12 = load i32* %y1;
    store i32* %x1 with i32 %12;
    i32 %13 = load i32* %t;
    store i32* %y1 with i32 %13;
    ubr ^b;
^b:
    store i32* %i with i32 19;
    ubr ^while.header;
^while.header:
    i32 %14 = load i32* %x1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %15];
    i32 %17 = load i32* %16;
    i32 %18 = load i32* %y1;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %19];
    i32 %21 = load i32* %20;
    i1 %22 = scmp gt i32 %17, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %25 = load i32* %x1;
    i64 %26 = sext i32 %25 to i64;
    [20 * i32]* %27 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %26];
    i32 %28 = load i32* %i;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([20 * i32]* %27)[i64 0][i64 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^b2, ^b4;
^b1:
    i32 %33 = load i32* %x1;
    i32 %34 = load i32* %y1;
    i1 %35 = scmp eq i32 %33, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then1, ^b3;
^b2:
    i32 %38 = load i32* %x1;
    i64 %39 = sext i32 %38 to i64;
    [20 * i32]* %40 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %39];
    i32 %41 = load i32* %i;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([20 * i32]* %40)[i64 0][i64 %42];
    i32 %44 = load i32* %43;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %45];
    i32 %47 = load i32* %46;
    i32 %48 = load i32* %y1;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 %49];
    i32 %51 = load i32* %50;
    i1 %52 = scmp ge i32 %47, i32 %51;
    i32 %53 = zext i1 %52 to i32;
    i1 %54 = scmp neq i32 %53, i32 0;
    ubr ^b4;
^b3:
    store i32* %i with i32 19;
    ubr ^while.header1;
^b4:
    i1 %55 = phi [^b2, i1 %54] [^while.body, i1 false];
    i32 %56 = zext i1 %55 to i32;
    i1 %57 = scmp neq i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^if.then2, ^b5;
^if.then1:
    i32 %58 = load i32* %x1;
    ret i32 %58;
^if.then2:
    i32 %59 = load i32* %x1;
    i64 %60 = sext i32 %59 to i64;
    [20 * i32]* %61 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %60];
    i32 %62 = load i32* %i;
    i64 %63 = sext i32 %62 to i64;
    i32* %64 = getelementptr &([20 * i32]* %61)[i64 0][i64 %63];
    i32 %65 = load i32* %64;
    store i32* %x1 with i32 %65;
    ubr ^b5;
^b5:
    i32 %66 = load i32* %i;
    i32 %67 = sub i32 %66, i32 1;
    store i32* %i with i32 %67;
    ubr ^while.header;
^while.header1:
    i32 %68 = load i32* %i;
    i1 %69 = scmp ge i32 %68, i32 0;
    i32 %70 = zext i1 %69 to i32;
    i1 %71 = scmp neq i32 %70, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body1, ^b6;
^while.body1:
    i32 %72 = load i32* %x1;
    i64 %73 = sext i32 %72 to i64;
    [20 * i32]* %74 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %73];
    i32 %75 = load i32* %i;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = getelementptr &([20 * i32]* %74)[i64 0][i64 %76];
    i32 %78 = load i32* %77;
    i32 %79 = load i32* %y1;
    i64 %80 = sext i32 %79 to i64;
    [20 * i32]* %81 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %80];
    i32 %82 = load i32* %i;
    i64 %83 = sext i32 %82 to i64;
    i32* %84 = getelementptr &([20 * i32]* %81)[i64 0][i64 %83];
    i32 %85 = load i32* %84;
    i1 %86 = scmp neq i32 %78, i32 %85;
    i32 %87 = zext i1 %86 to i32;
    i1 %88 = scmp neq i32 %87, i32 0;
    cbr i1 %88(prob = 0.5), ^if.then3, ^b7;
^b6:
    i32 %89 = load i32* %x1;
    i64 %90 = sext i32 %89 to i64;
    [20 * i32]* %91 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %90];
    i32* %92 = getelementptr &([20 * i32]* %91)[i64 0][i64 0];
    i32 %93 = load i32* %92;
    ret i32 %93;
^if.then3:
    i32 %94 = load i32* %x1;
    i64 %95 = sext i32 %94 to i64;
    [20 * i32]* %96 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %95];
    i32 %97 = load i32* %i;
    i64 %98 = sext i32 %97 to i64;
    i32* %99 = getelementptr &([20 * i32]* %96)[i64 0][i64 %98];
    i32 %100 = load i32* %99;
    store i32* %x1 with i32 %100;
    i32 %101 = load i32* %y1;
    i64 %102 = sext i32 %101 to i64;
    [20 * i32]* %103 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i64 %102];
    i32 %104 = load i32* %i;
    i64 %105 = sext i32 %104 to i64;
    i32* %106 = getelementptr &([20 * i32]* %103)[i64 0][i64 %105];
    i32 %107 = load i32* %106;
    store i32* %y1 with i32 %107;
    ubr ^b7;
^b7:
    i32 %108 = load i32* %i;
    i32 %109 = sub i32 %108, i32 1;
    store i32* %i with i32 %109;
    ubr ^while.header1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %i = alloc i32;
    i32 %0 = call () -> i32 @quick_read();
    store i32* @n with i32 %0;
    i32 %1 = call () -> i32 @quick_read();
    store i32* @m with i32 %1;
    call () -> void @init();
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* @n;
    i1 %4 = scmp neq i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = call () -> i32 @quick_read();
    store i32* %x1 with i32 %7;
    i32 %8 = call () -> i32 @quick_read();
    store i32* %y1 with i32 %8;
    i32 %9 = load i32* %x1;
    i32 %10 = load i32* %y1;
    call (i32, i32) -> void @add_edge(i32 %9, i32 %10);
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 1;
    store i32* %i with i32 %12;
    ubr ^while.header;
^b:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    ubr ^while.header1;
^while.header1:
    i32 %13 = load i32* @m;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %15 = call () -> i32 @quick_read();
    store i32* %x with i32 %15;
    i32 %16 = call () -> i32 @quick_read();
    store i32* %y with i32 %16;
    i32 %17 = load i32* %x;
    i32 %18 = load i32* %y;
    i32 %19 = call (i32, i32) -> i32 @LCA(i32 %17, i32 %18);
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 10);
    i32 %20 = load i32* @m;
    i32 %21 = sub i32 %20, i32 1;
    store i32* @m with i32 %21;
    ubr ^while.header1;
^b1:
    ret i32 0;
}
