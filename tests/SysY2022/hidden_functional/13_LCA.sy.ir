internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f { Flexible };
internal [10005 * i32]* @dep { Flexible };
internal [10005 * i32]* @to { Flexible };
internal [10005 * i32]* @next { Flexible };
internal [10005 * i32]* @head { Flexible };
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    i32 %7 = add i32 %d, i32 1;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %9 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %10, i32 1;
    i32* %17 = getelementptr &([20 * i32]* %3)[i64 0][i32 %16];
    store i32* %17 with i32 %15;
    i1 %18 = icmp neq i32 %15, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %7);
    i32* %26 = getelementptr &([10005 * i32]* %9)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = icmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %5 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    [10005 * i32]* %6 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    [10005 * [20 * i32]]* %7 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %9 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %11 = call () -> i32 @getch();
    i1 %12 = icmp slt i32 %11, i32 48;
    i1 %13 = icmp sgt i32 %11, i32 57;
    i1 %14 = or i1 %12, i1 %13;
    i1 %15 = icmp eq i32 %9, i32 45;
    i32 %16 = select i1 %15 ? i32 1 : i32 %10;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %17 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %18 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %21 = phi [^while.header, i32 %17] [^while.body1, i32 %23];
    i32 %22 = phi [^while.header, i32 0] [^while.body1, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %29 = phi [^while.header, i32 0] [^while.body1, i32 %28];
    i32 %30 = call () -> i32 @getch();
    i1 %31 = icmp slt i32 %30, i32 48;
    i1 %32 = icmp sgt i32 %30, i32 57;
    i1 %33 = or i1 %31, i1 %32;
    i1 %34 = icmp neq i32 %18, i32 0;
    i32 %35 = neg i32 %29;
    i32 %36 = select i1 %34 ? i32 %35 : i32 %29;
    cbr i1 %33(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %37 = phi [^b, i32 %30] [^while.body2, i32 %39];
    i32 %38 = phi [^b, i32 0] [^while.body2, i32 %44];
    i32 %39 = call () -> i32 @getch();
    i1 %40 = icmp slt i32 %39, i32 48;
    i1 %41 = icmp sgt i32 %39, i32 57;
    i1 %42 = or i1 %40, i1 %41;
    i1 %43 = icmp eq i32 %37, i32 45;
    i32 %44 = select i1 %43 ? i32 1 : i32 %38;
    cbr i1 %42(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %45 = phi [^b, i32 %30] [^while.body2, i32 %39];
    i32 %46 = phi [^b, i32 0] [^while.body2, i32 %44];
    i32 %47 = add i32 %45, i32 -48;
    i1 %48 = icmp ult i32 %47, i32 10;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %49 = phi [^while.header1, i32 %45] [^while.body3, i32 %51];
    i32 %50 = phi [^while.header1, i32 0] [^while.body3, i32 %56];
    i32 %51 = call () -> i32 @getch();
    i32 %52 = add i32 %51, i32 -48;
    i1 %53 = icmp ult i32 %52, i32 10;
    i32 %54 = mul i32 %50, i32 10;
    i32 %55 = add i32 %54, i32 -48;
    i32 %56 = add i32 %49, i32 %55;
    cbr i1 %53(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %57 = phi [^while.header1, i32 0] [^while.body3, i32 %56];
    i1 %58 = icmp neq i32 %46, i32 0;
    i32 %59 = neg i32 %57;
    i32 %60 = select i1 %58 ? i32 %59 : i32 %57;
    i32* %61 = getelementptr &([10005 * i32]* %8)[i64 0][i64 0];
    store i32* %61 with i32 1061109567;
    i1 %62 = icmp sgt i32 %36, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %63 = phi [^b1, i32 1] [^while.body4, i32 %65];
    i32* %64 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %63];
    store i32* %64 with i32 -1;
    i32 %65 = add i32 %63, i32 1;
    i1 %66 = icmp sge i32 %36, i32 %65;
    cbr i1 %66(prob = 0.97), ^while.body4, ^entry1;
  ^entry1:
    i1 %67 = icmp neq i32 %36, i32 1;
    cbr i1 %67(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %68 = phi [^entry1, i32 0] [^b6, i32 %176];
    i32 %69 = phi [^entry1, i32 1] [^b6, i32 %174];
    i32 %70 = call () -> i32 @getch();
    i1 %71 = icmp slt i32 %70, i32 48;
    i1 %72 = icmp sgt i32 %70, i32 57;
    i1 %73 = or i1 %71, i1 %72;
    cbr i1 %73(prob = 0.97), ^while.body6, ^while.header2;
  ^b2:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %74 = icmp neq i32 %60, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32 %75 = phi [^while.body5, i32 %70] [^while.body6, i32 %77];
    i32 %76 = phi [^while.body5, i32 0] [^while.body6, i32 %82];
    i32 %77 = call () -> i32 @getch();
    i1 %78 = icmp slt i32 %77, i32 48;
    i1 %79 = icmp sgt i32 %77, i32 57;
    i1 %80 = or i1 %78, i1 %79;
    i1 %81 = icmp eq i32 %75, i32 45;
    i32 %82 = select i1 %81 ? i32 1 : i32 %76;
    cbr i1 %80(prob = 0.97), ^while.body6, ^while.header2;
  ^while.body7:
    i32 %83 = phi [^b2, i32 %60] [^b11, i32 %219];
    i32 %84 = call () -> i32 @getch();
    i1 %85 = icmp slt i32 %84, i32 48;
    i1 %86 = icmp sgt i32 %84, i32 57;
    i1 %87 = or i1 %85, i1 %86;
    cbr i1 %87(prob = 0.97), ^while.body9, ^while.header3;
  ^while.header2:
    i32 %88 = phi [^while.body5, i32 %70] [^while.body6, i32 %77];
    i32 %89 = phi [^while.body5, i32 0] [^while.body6, i32 %82];
    i32 %90 = add i32 %88, i32 -48;
    i1 %91 = icmp ult i32 %90, i32 10;
    cbr i1 %91(prob = 0.97), ^while.body8, ^b4;
  ^b3:
    ret i32 0;
  ^while.body8:
    i32 %92 = phi [^while.header2, i32 %88] [^while.body8, i32 %94];
    i32 %93 = phi [^while.header2, i32 0] [^while.body8, i32 %99];
    i32 %94 = call () -> i32 @getch();
    i32 %95 = add i32 %94, i32 -48;
    i1 %96 = icmp ult i32 %95, i32 10;
    i32 %97 = mul i32 %93, i32 10;
    i32 %98 = add i32 %97, i32 -48;
    i32 %99 = add i32 %92, i32 %98;
    cbr i1 %96(prob = 0.97), ^while.body8, ^b4;
  ^while.body9:
    i32 %100 = phi [^while.body7, i32 %84] [^while.body9, i32 %102];
    i32 %101 = phi [^while.body7, i32 0] [^while.body9, i32 %107];
    i32 %102 = call () -> i32 @getch();
    i1 %103 = icmp slt i32 %102, i32 48;
    i1 %104 = icmp sgt i32 %102, i32 57;
    i1 %105 = or i1 %103, i1 %104;
    i1 %106 = icmp eq i32 %100, i32 45;
    i32 %107 = select i1 %106 ? i32 1 : i32 %101;
    cbr i1 %105(prob = 0.97), ^while.body9, ^while.header3;
  ^b4:
    i32 %108 = phi [^while.header2, i32 0] [^while.body8, i32 %99];
    i32 %109 = call () -> i32 @getch();
    i1 %110 = icmp slt i32 %109, i32 48;
    i1 %111 = icmp sgt i32 %109, i32 57;
    i1 %112 = or i1 %110, i1 %111;
    i1 %113 = icmp neq i32 %89, i32 0;
    i32 %114 = neg i32 %108;
    i32 %115 = select i1 %113 ? i32 %114 : i32 %108;
    cbr i1 %112(prob = 0.97), ^while.body11, ^while.header4;
  ^while.header3:
    i32 %116 = phi [^while.body7, i32 %84] [^while.body9, i32 %102];
    i32 %117 = phi [^while.body7, i32 0] [^while.body9, i32 %107];
    i32 %118 = add i32 %116, i32 -48;
    i1 %119 = icmp ult i32 %118, i32 10;
    cbr i1 %119(prob = 0.97), ^while.body10, ^b5;
  ^while.body10:
    i32 %120 = phi [^while.header3, i32 %116] [^while.body10, i32 %122];
    i32 %121 = phi [^while.header3, i32 0] [^while.body10, i32 %127];
    i32 %122 = call () -> i32 @getch();
    i32 %123 = add i32 %122, i32 -48;
    i1 %124 = icmp ult i32 %123, i32 10;
    i32 %125 = mul i32 %121, i32 10;
    i32 %126 = add i32 %125, i32 -48;
    i32 %127 = add i32 %120, i32 %126;
    cbr i1 %124(prob = 0.97), ^while.body10, ^b5;
  ^while.body11:
    i32 %128 = phi [^b4, i32 %109] [^while.body11, i32 %130];
    i32 %129 = phi [^b4, i32 0] [^while.body11, i32 %135];
    i32 %130 = call () -> i32 @getch();
    i1 %131 = icmp slt i32 %130, i32 48;
    i1 %132 = icmp sgt i32 %130, i32 57;
    i1 %133 = or i1 %131, i1 %132;
    i1 %134 = icmp eq i32 %128, i32 45;
    i32 %135 = select i1 %134 ? i32 1 : i32 %129;
    cbr i1 %133(prob = 0.97), ^while.body11, ^while.header4;
  ^b5:
    i32 %136 = phi [^while.header3, i32 0] [^while.body10, i32 %127];
    i32 %137 = call () -> i32 @getch();
    i1 %138 = icmp slt i32 %137, i32 48;
    i1 %139 = icmp sgt i32 %137, i32 57;
    i1 %140 = or i1 %138, i1 %139;
    i1 %141 = icmp neq i32 %117, i32 0;
    i32 %142 = neg i32 %136;
    i32 %143 = select i1 %141 ? i32 %142 : i32 %136;
    cbr i1 %140(prob = 0.97), ^while.body13, ^while.header5;
  ^while.header4:
    i32 %144 = phi [^b4, i32 %109] [^while.body11, i32 %130];
    i32 %145 = phi [^b4, i32 0] [^while.body11, i32 %135];
    i32 %146 = add i32 %144, i32 -48;
    i1 %147 = icmp ult i32 %146, i32 10;
    cbr i1 %147(prob = 0.97), ^while.body12, ^b6;
  ^while.body12:
    i32 %148 = phi [^while.header4, i32 %144] [^while.body12, i32 %150];
    i32 %149 = phi [^while.header4, i32 0] [^while.body12, i32 %155];
    i32 %150 = call () -> i32 @getch();
    i32 %151 = add i32 %150, i32 -48;
    i1 %152 = icmp ult i32 %151, i32 10;
    i32 %153 = mul i32 %149, i32 10;
    i32 %154 = add i32 %153, i32 -48;
    i32 %155 = add i32 %148, i32 %154;
    cbr i1 %152(prob = 0.97), ^while.body12, ^b6;
  ^while.body13:
    i32 %156 = phi [^b5, i32 %137] [^while.body13, i32 %158];
    i32 %157 = phi [^b5, i32 0] [^while.body13, i32 %163];
    i32 %158 = call () -> i32 @getch();
    i1 %159 = icmp slt i32 %158, i32 48;
    i1 %160 = icmp sgt i32 %158, i32 57;
    i1 %161 = or i1 %159, i1 %160;
    i1 %162 = icmp eq i32 %156, i32 45;
    i32 %163 = select i1 %162 ? i32 1 : i32 %157;
    cbr i1 %161(prob = 0.97), ^while.body13, ^while.header5;
  ^b6:
    i32 %164 = phi [^while.header4, i32 0] [^while.body12, i32 %155];
    i1 %165 = icmp neq i32 %145, i32 0;
    i32 %166 = neg i32 %164;
    i32 %167 = select i1 %165 ? i32 %166 : i32 %164;
    i32* %168 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %68];
    store i32* %168 with i32 %167;
    [20 * i32]* %169 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %167];
    i32* %170 = getelementptr &([20 * i32]* %169)[i64 0][i64 0];
    i32* %171 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %115];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %68];
    store i32* %173 with i32 %172;
    store i32* %171 with i32 %68;
    store i32* %170 with i32 %115;
    i32 %174 = add i32 %69, i32 1;
    i1 %175 = icmp neq i32 %36, i32 %174;
    i32 %176 = add i32 %68, i32 1;
    cbr i1 %175(prob = 0.97), ^while.body5, ^b2;
  ^while.header5:
    i32 %177 = phi [^b5, i32 %137] [^while.body13, i32 %158];
    i32 %178 = phi [^b5, i32 0] [^while.body13, i32 %163];
    i32 %179 = add i32 %177, i32 -48;
    i1 %180 = icmp ult i32 %179, i32 10;
    cbr i1 %180(prob = 0.97), ^while.body14, ^b7;
  ^b7:
    i32 %181 = phi [^while.header5, i32 0] [^while.body14, i32 %200];
    i1 %182 = icmp neq i32 %178, i32 0;
    i32 %183 = neg i32 %181;
    i32 %184 = select i1 %182 ? i32 %183 : i32 %181;
    i32* %185 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %184];
    i32* %186 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %143];
    i32 %187 = load i32* %186;
    i32 %188 = load i32* %185;
    i1 %189 = icmp slt i32 %187, i32 %188;
    i32 %190 = select i1 %189 ? i32 %143 : i32 %184;
    i32* %191 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %190];
    i32 %192 = select i1 %189 ? i32 %184 : i32 %143;
    ubr ^while.header6;
  ^while.body14:
    i32 %193 = phi [^while.header5, i32 %177] [^while.body14, i32 %195];
    i32 %194 = phi [^while.header5, i32 0] [^while.body14, i32 %200];
    i32 %195 = call () -> i32 @getch();
    i32 %196 = add i32 %195, i32 -48;
    i1 %197 = icmp ult i32 %196, i32 10;
    i32 %198 = mul i32 %194, i32 10;
    i32 %199 = add i32 %198, i32 -48;
    i32 %200 = add i32 %193, i32 %199;
    cbr i1 %197(prob = 0.97), ^while.body14, ^b7;
  ^while.header6:
    i32 %201 = phi [^b7, i32 19] [^b10, i32 %217];
    i32 %202 = phi [^b7, i32 %192] [^b10, i32 %216];
    i32* %203 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %202];
    i32 %204 = load i32* %203;
    i32 %205 = load i32* %191;
    i1 %206 = icmp sgt i32 %204, i32 %205;
    cbr i1 %206(prob = 0.97), ^while.body15, ^b8;
  ^while.body15:
    [20 * i32]* %207 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %202];
    i32* %208 = getelementptr &([20 * i32]* %207)[i64 0][i32 %201];
    i32 %209 = load i32* %208;
    i1 %210 = icmp neq i32 %209, i32 0;
    cbr i1 %210(prob = 0.5), ^b9, ^b10;
  ^b8:
    i1 %211 = icmp eq i32 %190, i32 %202;
    cbr i1 %211(prob = 0.5), ^b11, ^while.body16;
  ^b9:
    i32* %212 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %209];
    i32 %213 = load i32* %212;
    i1 %214 = icmp sle i32 %205, i32 %213;
    ubr ^b10;
  ^b10:
    i1 %215 = phi [^while.body15, i1 false] [^b9, i1 %214];
    i32 %216 = select i1 %215 ? i32 %209 : i32 %202;
    i32 %217 = add i32 %201, i32 -1;
    ubr ^while.header6;
  ^b11:
    i32 %218 = phi [^b8, i32 %202] [^b12, i32 %267];
    call (i32) -> void @putint(i32 %218);
    call (i32) -> void @putch(i32 10);
    i32 %219 = add i32 %83, i32 -1;
    i1 %220 = icmp neq i32 %219, i32 0;
    cbr i1 %220(prob = 0.97), ^while.body7, ^b3;
  ^while.body16:
    i32 %221 = phi [^b8, i32 19] [^while.body16, i32 %263];
    i32 %222 = phi [^b8, i32 %202] [^while.body16, i32 %262];
    i32 %223 = phi [^b8, i32 %190] [^while.body16, i32 %261];
    [20 * i32]* %224 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %222];
    i32* %225 = getelementptr &([20 * i32]* %224)[i64 0][i32 %221];
    i32 %226 = load i32* %225;
    [20 * i32]* %227 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %223];
    i32* %228 = getelementptr &([20 * i32]* %227)[i64 0][i32 %221];
    i32 %229 = load i32* %228;
    i1 %230 = icmp neq i32 %226, i32 %229;
    i32 %231 = select i1 %230 ? i32 %226 : i32 %222;
    [20 * i32]* %232 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %231];
    i32 %233 = add i32 %221, i32 -1;
    i32* %234 = getelementptr &([20 * i32]* %232)[i64 0][i32 %233];
    i32 %235 = load i32* %234;
    i32 %236 = select i1 %230 ? i32 %229 : i32 %223;
    [20 * i32]* %237 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %236];
    i32* %238 = getelementptr &([20 * i32]* %237)[i64 0][i32 %233];
    i32 %239 = load i32* %238;
    i1 %240 = icmp neq i32 %235, i32 %239;
    i32 %241 = select i1 %240 ? i32 %235 : i32 %231;
    [20 * i32]* %242 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %241];
    i32 %243 = add i32 %221, i32 -2;
    i32* %244 = getelementptr &([20 * i32]* %242)[i64 0][i32 %243];
    i32 %245 = load i32* %244;
    i32 %246 = select i1 %240 ? i32 %239 : i32 %236;
    [20 * i32]* %247 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %246];
    i32* %248 = getelementptr &([20 * i32]* %247)[i64 0][i32 %243];
    i32 %249 = load i32* %248;
    i1 %250 = icmp neq i32 %245, i32 %249;
    i32 %251 = select i1 %250 ? i32 %245 : i32 %241;
    [20 * i32]* %252 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %251];
    i32 %253 = add i32 %221, i32 -3;
    i32* %254 = getelementptr &([20 * i32]* %252)[i64 0][i32 %253];
    i32 %255 = load i32* %254;
    i32 %256 = select i1 %250 ? i32 %249 : i32 %246;
    [20 * i32]* %257 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %256];
    i32* %258 = getelementptr &([20 * i32]* %257)[i64 0][i32 %253];
    i32 %259 = load i32* %258;
    i1 %260 = icmp neq i32 %255, i32 %259;
    i32 %261 = select i1 %260 ? i32 %259 : i32 %256;
    i32 %262 = select i1 %260 ? i32 %255 : i32 %251;
    i32 %263 = add i32 %221, i32 -4;
    i1 %264 = icmp sgt i32 %263, i32 -1;
    cbr i1 %264(prob = 0.8), ^while.body16, ^b12;
  ^b12:
    [20 * i32]* %265 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %262];
    i32* %266 = getelementptr &([20 * i32]* %265)[i64 0][i64 0];
    i32 %267 = load i32* %266;
    ubr ^b11;
}
