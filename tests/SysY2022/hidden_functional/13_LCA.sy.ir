internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f { Flexible };
internal [10005 * i32]* @dep { Flexible };
internal [10005 * i32]* @to { Flexible };
internal [10005 * i32]* @next { Flexible };
internal [10005 * i32]* @head { Flexible };
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    i32 %7 = add i32 %d, i32 1;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %9 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %10, i32 1;
    i32* %17 = getelementptr &([20 * i32]* %3)[i64 0][i32 %16];
    store i32* %17 with i32 %15;
    i1 %18 = icmp neq i32 %15, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %7);
    i32* %26 = getelementptr &([10005 * i32]* %9)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = icmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %5 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    [10005 * i32]* %6 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    [10005 * [20 * i32]]* %7 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^17;
  ^while.body:
    i32 %9 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %11 = call () -> i32 @getch();
    i1 %12 = icmp slt i32 %11, i32 48;
    i1 %13 = icmp sgt i32 %11, i32 57;
    i1 %14 = or i1 %12, i1 %13;
    i1 %15 = icmp eq i32 %9, i32 45;
    i32 %16 = select i1 %15 ? i32 1 : i32 %10;
    cbr i1 %14(prob = 0.97), ^while.body, ^17;
  ^17:
    i32 %18 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i32 %19 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %20 = add i32 %18, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %22 = phi [^17, i32 %18] [^while.body1, i32 %24];
    i32 %23 = phi [^17, i32 0] [^while.body1, i32 %29];
    i32 %24 = call () -> i32 @getch();
    i32 %25 = add i32 %24, i32 -48;
    i1 %26 = icmp ult i32 %25, i32 10;
    i32 %27 = mul i32 %23, i32 10;
    i32 %28 = add i32 %27, i32 -48;
    i32 %29 = add i32 %22, i32 %28;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %30 = phi [^17, i32 0] [^while.body1, i32 %29];
    i32 %31 = call () -> i32 @getch();
    i1 %32 = icmp slt i32 %31, i32 48;
    i1 %33 = icmp sgt i32 %31, i32 57;
    i1 %34 = or i1 %32, i1 %33;
    i1 %35 = icmp neq i32 %19, i32 0;
    i32 %36 = neg i32 %30;
    i32 %37 = select i1 %35 ? i32 %36 : i32 %30;
    cbr i1 %34(prob = 0.97), ^while.body2, ^46;
  ^while.body2:
    i32 %38 = phi [^b, i32 %31] [^while.body2, i32 %40];
    i32 %39 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %40 = call () -> i32 @getch();
    i1 %41 = icmp slt i32 %40, i32 48;
    i1 %42 = icmp sgt i32 %40, i32 57;
    i1 %43 = or i1 %41, i1 %42;
    i1 %44 = icmp eq i32 %38, i32 45;
    i32 %45 = select i1 %44 ? i32 1 : i32 %39;
    cbr i1 %43(prob = 0.97), ^while.body2, ^46;
  ^46:
    i32 %47 = phi [^b, i32 %31] [^while.body2, i32 %40];
    i32 %48 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %51 = phi [^46, i32 %47] [^while.body3, i32 %53];
    i32 %52 = phi [^46, i32 0] [^while.body3, i32 %58];
    i32 %53 = call () -> i32 @getch();
    i32 %54 = add i32 %53, i32 -48;
    i1 %55 = icmp ult i32 %54, i32 10;
    i32 %56 = mul i32 %52, i32 10;
    i32 %57 = add i32 %56, i32 -48;
    i32 %58 = add i32 %51, i32 %57;
    cbr i1 %55(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %59 = phi [^46, i32 0] [^while.body3, i32 %58];
    i1 %60 = icmp neq i32 %48, i32 0;
    i32 %61 = neg i32 %59;
    i32 %62 = select i1 %60 ? i32 %61 : i32 %59;
    i32* %63 = getelementptr &([10005 * i32]* %8)[i64 0][i64 0];
    store i32* %63 with i32 1061109567;
    i1 %64 = icmp sgt i32 %37, i32 0;
    cbr i1 %64(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %65 = phi [^b1, i32 1] [^while.body4, i32 %67];
    i32* %66 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %65];
    store i32* %66 with i32 -1;
    i32 %67 = add i32 %65, i32 1;
    i1 %68 = icmp sge i32 %37, i32 %67;
    cbr i1 %68(prob = 0.97), ^while.body4, ^entry1;
  ^entry1:
    i1 %69 = icmp neq i32 %37, i32 1;
    cbr i1 %69(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %70 = phi [^entry1, i32 0] [^b6, i32 %181];
    i32 %71 = phi [^entry1, i32 1] [^b6, i32 %179];
    i32 %72 = call () -> i32 @getch();
    i1 %73 = icmp slt i32 %72, i32 48;
    i1 %74 = icmp sgt i32 %72, i32 57;
    i1 %75 = or i1 %73, i1 %74;
    cbr i1 %75(prob = 0.97), ^while.body6, ^90;
  ^b2:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %76 = icmp neq i32 %62, i32 0;
    cbr i1 %76(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32 %77 = phi [^while.body5, i32 %72] [^while.body6, i32 %79];
    i32 %78 = phi [^while.body5, i32 0] [^while.body6, i32 %84];
    i32 %79 = call () -> i32 @getch();
    i1 %80 = icmp slt i32 %79, i32 48;
    i1 %81 = icmp sgt i32 %79, i32 57;
    i1 %82 = or i1 %80, i1 %81;
    i1 %83 = icmp eq i32 %77, i32 45;
    i32 %84 = select i1 %83 ? i32 1 : i32 %78;
    cbr i1 %82(prob = 0.97), ^while.body6, ^90;
  ^while.body7:
    i32 %85 = phi [^b2, i32 %62] [^b11, i32 %407];
    i32 %86 = call () -> i32 @getch();
    i1 %87 = icmp slt i32 %86, i32 48;
    i1 %88 = icmp sgt i32 %86, i32 57;
    i1 %89 = or i1 %87, i1 %88;
    cbr i1 %89(prob = 0.97), ^while.body9, ^119;
  ^90:
    i32 %91 = phi [^while.body5, i32 %72] [^while.body6, i32 %79];
    i32 %92 = phi [^while.body5, i32 0] [^while.body6, i32 %84];
    i32 %93 = add i32 %91, i32 -48;
    i1 %94 = icmp ult i32 %93, i32 10;
    cbr i1 %94(prob = 0.97), ^while.body8, ^b4;
  ^b3:
    ret i32 0;
  ^while.body8:
    i32 %95 = phi [^90, i32 %91] [^while.body8, i32 %97];
    i32 %96 = phi [^90, i32 0] [^while.body8, i32 %102];
    i32 %97 = call () -> i32 @getch();
    i32 %98 = add i32 %97, i32 -48;
    i1 %99 = icmp ult i32 %98, i32 10;
    i32 %100 = mul i32 %96, i32 10;
    i32 %101 = add i32 %100, i32 -48;
    i32 %102 = add i32 %95, i32 %101;
    cbr i1 %99(prob = 0.97), ^while.body8, ^b4;
  ^while.body9:
    i32 %103 = phi [^while.body7, i32 %86] [^while.body9, i32 %105];
    i32 %104 = phi [^while.body7, i32 0] [^while.body9, i32 %110];
    i32 %105 = call () -> i32 @getch();
    i1 %106 = icmp slt i32 %105, i32 48;
    i1 %107 = icmp sgt i32 %105, i32 57;
    i1 %108 = or i1 %106, i1 %107;
    i1 %109 = icmp eq i32 %103, i32 45;
    i32 %110 = select i1 %109 ? i32 1 : i32 %104;
    cbr i1 %108(prob = 0.97), ^while.body9, ^119;
  ^b4:
    i32 %111 = phi [^90, i32 0] [^while.body8, i32 %102];
    i32 %112 = call () -> i32 @getch();
    i1 %113 = icmp slt i32 %112, i32 48;
    i1 %114 = icmp sgt i32 %112, i32 57;
    i1 %115 = or i1 %113, i1 %114;
    i1 %116 = icmp neq i32 %92, i32 0;
    i32 %117 = neg i32 %111;
    i32 %118 = select i1 %116 ? i32 %117 : i32 %111;
    cbr i1 %115(prob = 0.97), ^while.body11, ^148;
  ^119:
    i32 %120 = phi [^while.body7, i32 %86] [^while.body9, i32 %105];
    i32 %121 = phi [^while.body7, i32 0] [^while.body9, i32 %110];
    i32 %122 = add i32 %120, i32 -48;
    i1 %123 = icmp ult i32 %122, i32 10;
    cbr i1 %123(prob = 0.97), ^while.body10, ^b5;
  ^while.body10:
    i32 %124 = phi [^119, i32 %120] [^while.body10, i32 %126];
    i32 %125 = phi [^119, i32 0] [^while.body10, i32 %131];
    i32 %126 = call () -> i32 @getch();
    i32 %127 = add i32 %126, i32 -48;
    i1 %128 = icmp ult i32 %127, i32 10;
    i32 %129 = mul i32 %125, i32 10;
    i32 %130 = add i32 %129, i32 -48;
    i32 %131 = add i32 %124, i32 %130;
    cbr i1 %128(prob = 0.97), ^while.body10, ^b5;
  ^while.body11:
    i32 %132 = phi [^b4, i32 %112] [^while.body11, i32 %134];
    i32 %133 = phi [^b4, i32 0] [^while.body11, i32 %139];
    i32 %134 = call () -> i32 @getch();
    i1 %135 = icmp slt i32 %134, i32 48;
    i1 %136 = icmp sgt i32 %134, i32 57;
    i1 %137 = or i1 %135, i1 %136;
    i1 %138 = icmp eq i32 %132, i32 45;
    i32 %139 = select i1 %138 ? i32 1 : i32 %133;
    cbr i1 %137(prob = 0.97), ^while.body11, ^148;
  ^b5:
    i32 %140 = phi [^119, i32 0] [^while.body10, i32 %131];
    i32 %141 = call () -> i32 @getch();
    i1 %142 = icmp slt i32 %141, i32 48;
    i1 %143 = icmp sgt i32 %141, i32 57;
    i1 %144 = or i1 %142, i1 %143;
    i1 %145 = icmp neq i32 %121, i32 0;
    i32 %146 = neg i32 %140;
    i32 %147 = select i1 %145 ? i32 %146 : i32 %140;
    cbr i1 %144(prob = 0.97), ^while.body13, ^182;
  ^148:
    i32 %149 = phi [^b4, i32 %112] [^while.body11, i32 %134];
    i32 %150 = phi [^b4, i32 0] [^while.body11, i32 %139];
    i32 %151 = add i32 %149, i32 -48;
    i1 %152 = icmp ult i32 %151, i32 10;
    cbr i1 %152(prob = 0.97), ^while.body12, ^b6;
  ^while.body12:
    i32 %153 = phi [^148, i32 %149] [^while.body12, i32 %155];
    i32 %154 = phi [^148, i32 0] [^while.body12, i32 %160];
    i32 %155 = call () -> i32 @getch();
    i32 %156 = add i32 %155, i32 -48;
    i1 %157 = icmp ult i32 %156, i32 10;
    i32 %158 = mul i32 %154, i32 10;
    i32 %159 = add i32 %158, i32 -48;
    i32 %160 = add i32 %153, i32 %159;
    cbr i1 %157(prob = 0.97), ^while.body12, ^b6;
  ^while.body13:
    i32 %161 = phi [^b5, i32 %141] [^while.body13, i32 %163];
    i32 %162 = phi [^b5, i32 0] [^while.body13, i32 %168];
    i32 %163 = call () -> i32 @getch();
    i1 %164 = icmp slt i32 %163, i32 48;
    i1 %165 = icmp sgt i32 %163, i32 57;
    i1 %166 = or i1 %164, i1 %165;
    i1 %167 = icmp eq i32 %161, i32 45;
    i32 %168 = select i1 %167 ? i32 1 : i32 %162;
    cbr i1 %166(prob = 0.97), ^while.body13, ^182;
  ^b6:
    i32 %169 = phi [^148, i32 0] [^while.body12, i32 %160];
    i1 %170 = icmp neq i32 %150, i32 0;
    i32 %171 = neg i32 %169;
    i32 %172 = select i1 %170 ? i32 %171 : i32 %169;
    i32* %173 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %70];
    store i32* %173 with i32 %172;
    [20 * i32]* %174 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %172];
    i32* %175 = getelementptr &([20 * i32]* %174)[i64 0][i64 0];
    i32* %176 = getelementptr &([10005 * i32]* %6)[i64 0][i32 %118];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %70];
    store i32* %178 with i32 %177;
    store i32* %176 with i32 %70;
    store i32* %175 with i32 %118;
    i32 %179 = add i32 %71, i32 1;
    i1 %180 = icmp neq i32 %37, i32 %179;
    i32 %181 = add i32 %70, i32 1;
    cbr i1 %180(prob = 0.97), ^while.body5, ^b2;
  ^182:
    i32 %183 = phi [^b5, i32 %141] [^while.body13, i32 %163];
    i32 %184 = phi [^b5, i32 0] [^while.body13, i32 %168];
    i32 %185 = add i32 %183, i32 -48;
    i1 %186 = icmp ult i32 %185, i32 10;
    cbr i1 %186(prob = 0.97), ^while.body14, ^b7;
  ^b7:
    i32 %187 = phi [^182, i32 0] [^while.body14, i32 %206];
    i1 %188 = icmp neq i32 %184, i32 0;
    i32 %189 = neg i32 %187;
    i32 %190 = select i1 %188 ? i32 %189 : i32 %187;
    i32* %191 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %190];
    i32* %192 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %147];
    i32 %193 = load i32* %192;
    i32 %194 = load i32* %191;
    i1 %195 = icmp slt i32 %193, i32 %194;
    i32 %196 = select i1 %195 ? i32 %147 : i32 %190;
    i32* %197 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %196];
    i32 %198 = select i1 %195 ? i32 %190 : i32 %147;
    ubr ^while.header;
  ^while.body14:
    i32 %199 = phi [^182, i32 %183] [^while.body14, i32 %201];
    i32 %200 = phi [^182, i32 0] [^while.body14, i32 %206];
    i32 %201 = call () -> i32 @getch();
    i32 %202 = add i32 %201, i32 -48;
    i1 %203 = icmp ult i32 %202, i32 10;
    i32 %204 = mul i32 %200, i32 10;
    i32 %205 = add i32 %204, i32 -48;
    i32 %206 = add i32 %199, i32 %205;
    cbr i1 %203(prob = 0.97), ^while.body14, ^b7;
  ^while.header:
    i32 %207 = phi [^b7, i32 19] [^b10, i32 %223];
    i32 %208 = phi [^b7, i32 %198] [^b10, i32 %222];
    i32* %209 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %208];
    i32 %210 = load i32* %209;
    i32 %211 = load i32* %197;
    i1 %212 = icmp sgt i32 %210, i32 %211;
    cbr i1 %212(prob = 0.97), ^while.body15, ^b8;
  ^while.body15:
    [20 * i32]* %213 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %208];
    i32* %214 = getelementptr &([20 * i32]* %213)[i64 0][i32 %207];
    i32 %215 = load i32* %214;
    i1 %216 = icmp neq i32 %215, i32 0;
    cbr i1 %216(prob = 0.5), ^b9, ^b10;
  ^b8:
    i1 %217 = icmp eq i32 %196, i32 %208;
    cbr i1 %217(prob = 0.5), ^b11, ^while.body16;
  ^b9:
    i32* %218 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %215];
    i32 %219 = load i32* %218;
    i1 %220 = icmp sle i32 %211, i32 %219;
    ubr ^b10;
  ^b10:
    i1 %221 = phi [^while.body15, i1 false] [^b9, i1 %220];
    i32 %222 = select i1 %221 ? i32 %215 : i32 %208;
    i32 %223 = add i32 %207, i32 -1;
    ubr ^while.header;
  ^while.body16:
    [20 * i32]* %224 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %208];
    i32* %225 = getelementptr &([20 * i32]* %224)[i64 0][i64 19];
    i32 %226 = load i32* %225;
    [20 * i32]* %227 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %196];
    i32* %228 = getelementptr &([20 * i32]* %227)[i64 0][i64 19];
    i32 %229 = load i32* %228;
    i1 %230 = icmp neq i32 %226, i32 %229;
    i32 %231 = select i1 %230 ? i32 %226 : i32 %208;
    [20 * i32]* %232 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %231];
    i32* %233 = getelementptr &([20 * i32]* %232)[i64 0][i64 18];
    i32 %234 = load i32* %233;
    i32 %235 = select i1 %230 ? i32 %229 : i32 %196;
    [20 * i32]* %236 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %235];
    i32* %237 = getelementptr &([20 * i32]* %236)[i64 0][i64 18];
    i32 %238 = load i32* %237;
    i1 %239 = icmp neq i32 %234, i32 %238;
    i32 %240 = select i1 %239 ? i32 %234 : i32 %231;
    [20 * i32]* %241 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %240];
    i32* %242 = getelementptr &([20 * i32]* %241)[i64 0][i64 17];
    i32 %243 = load i32* %242;
    i32 %244 = select i1 %239 ? i32 %238 : i32 %235;
    [20 * i32]* %245 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %244];
    i32* %246 = getelementptr &([20 * i32]* %245)[i64 0][i64 17];
    i32 %247 = load i32* %246;
    i1 %248 = icmp neq i32 %243, i32 %247;
    i32 %249 = select i1 %248 ? i32 %243 : i32 %240;
    [20 * i32]* %250 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %249];
    i32* %251 = getelementptr &([20 * i32]* %250)[i64 0][i64 16];
    i32 %252 = load i32* %251;
    i32 %253 = select i1 %248 ? i32 %247 : i32 %244;
    [20 * i32]* %254 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %253];
    i32* %255 = getelementptr &([20 * i32]* %254)[i64 0][i64 16];
    i32 %256 = load i32* %255;
    i1 %257 = icmp neq i32 %252, i32 %256;
    i32 %258 = select i1 %257 ? i32 %252 : i32 %249;
    [20 * i32]* %259 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %258];
    i32* %260 = getelementptr &([20 * i32]* %259)[i64 0][i64 15];
    i32 %261 = load i32* %260;
    i32 %262 = select i1 %257 ? i32 %256 : i32 %253;
    [20 * i32]* %263 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %262];
    i32* %264 = getelementptr &([20 * i32]* %263)[i64 0][i64 15];
    i32 %265 = load i32* %264;
    i1 %266 = icmp neq i32 %261, i32 %265;
    i32 %267 = select i1 %266 ? i32 %261 : i32 %258;
    [20 * i32]* %268 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %267];
    i32* %269 = getelementptr &([20 * i32]* %268)[i64 0][i64 14];
    i32 %270 = load i32* %269;
    i32 %271 = select i1 %266 ? i32 %265 : i32 %262;
    [20 * i32]* %272 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %271];
    i32* %273 = getelementptr &([20 * i32]* %272)[i64 0][i64 14];
    i32 %274 = load i32* %273;
    i1 %275 = icmp neq i32 %270, i32 %274;
    i32 %276 = select i1 %275 ? i32 %270 : i32 %267;
    [20 * i32]* %277 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %276];
    i32* %278 = getelementptr &([20 * i32]* %277)[i64 0][i64 13];
    i32 %279 = load i32* %278;
    i32 %280 = select i1 %275 ? i32 %274 : i32 %271;
    [20 * i32]* %281 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %280];
    i32* %282 = getelementptr &([20 * i32]* %281)[i64 0][i64 13];
    i32 %283 = load i32* %282;
    i1 %284 = icmp neq i32 %279, i32 %283;
    i32 %285 = select i1 %284 ? i32 %279 : i32 %276;
    [20 * i32]* %286 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %285];
    i32* %287 = getelementptr &([20 * i32]* %286)[i64 0][i64 12];
    i32 %288 = load i32* %287;
    i32 %289 = select i1 %284 ? i32 %283 : i32 %280;
    [20 * i32]* %290 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %289];
    i32* %291 = getelementptr &([20 * i32]* %290)[i64 0][i64 12];
    i32 %292 = load i32* %291;
    i1 %293 = icmp neq i32 %288, i32 %292;
    i32 %294 = select i1 %293 ? i32 %288 : i32 %285;
    [20 * i32]* %295 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %294];
    i32* %296 = getelementptr &([20 * i32]* %295)[i64 0][i64 11];
    i32 %297 = load i32* %296;
    i32 %298 = select i1 %293 ? i32 %292 : i32 %289;
    [20 * i32]* %299 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %298];
    i32* %300 = getelementptr &([20 * i32]* %299)[i64 0][i64 11];
    i32 %301 = load i32* %300;
    i1 %302 = icmp neq i32 %297, i32 %301;
    i32 %303 = select i1 %302 ? i32 %297 : i32 %294;
    [20 * i32]* %304 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %303];
    i32* %305 = getelementptr &([20 * i32]* %304)[i64 0][i64 10];
    i32 %306 = load i32* %305;
    i32 %307 = select i1 %302 ? i32 %301 : i32 %298;
    [20 * i32]* %308 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %307];
    i32* %309 = getelementptr &([20 * i32]* %308)[i64 0][i64 10];
    i32 %310 = load i32* %309;
    i1 %311 = icmp neq i32 %306, i32 %310;
    i32 %312 = select i1 %311 ? i32 %306 : i32 %303;
    [20 * i32]* %313 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %312];
    i32* %314 = getelementptr &([20 * i32]* %313)[i64 0][i64 9];
    i32 %315 = load i32* %314;
    i32 %316 = select i1 %311 ? i32 %310 : i32 %307;
    [20 * i32]* %317 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %316];
    i32* %318 = getelementptr &([20 * i32]* %317)[i64 0][i64 9];
    i32 %319 = load i32* %318;
    i1 %320 = icmp neq i32 %315, i32 %319;
    i32 %321 = select i1 %320 ? i32 %315 : i32 %312;
    [20 * i32]* %322 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %321];
    i32* %323 = getelementptr &([20 * i32]* %322)[i64 0][i64 8];
    i32 %324 = load i32* %323;
    i32 %325 = select i1 %320 ? i32 %319 : i32 %316;
    [20 * i32]* %326 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %325];
    i32* %327 = getelementptr &([20 * i32]* %326)[i64 0][i64 8];
    i32 %328 = load i32* %327;
    i1 %329 = icmp neq i32 %324, i32 %328;
    i32 %330 = select i1 %329 ? i32 %324 : i32 %321;
    [20 * i32]* %331 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %330];
    i32* %332 = getelementptr &([20 * i32]* %331)[i64 0][i64 7];
    i32 %333 = load i32* %332;
    i32 %334 = select i1 %329 ? i32 %328 : i32 %325;
    [20 * i32]* %335 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %334];
    i32* %336 = getelementptr &([20 * i32]* %335)[i64 0][i64 7];
    i32 %337 = load i32* %336;
    i1 %338 = icmp neq i32 %333, i32 %337;
    i32 %339 = select i1 %338 ? i32 %333 : i32 %330;
    [20 * i32]* %340 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %339];
    i32* %341 = getelementptr &([20 * i32]* %340)[i64 0][i64 6];
    i32 %342 = load i32* %341;
    i32 %343 = select i1 %338 ? i32 %337 : i32 %334;
    [20 * i32]* %344 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %343];
    i32* %345 = getelementptr &([20 * i32]* %344)[i64 0][i64 6];
    i32 %346 = load i32* %345;
    i1 %347 = icmp neq i32 %342, i32 %346;
    i32 %348 = select i1 %347 ? i32 %342 : i32 %339;
    [20 * i32]* %349 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %348];
    i32* %350 = getelementptr &([20 * i32]* %349)[i64 0][i64 5];
    i32 %351 = load i32* %350;
    i32 %352 = select i1 %347 ? i32 %346 : i32 %343;
    [20 * i32]* %353 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %352];
    i32* %354 = getelementptr &([20 * i32]* %353)[i64 0][i64 5];
    i32 %355 = load i32* %354;
    i1 %356 = icmp neq i32 %351, i32 %355;
    i32 %357 = select i1 %356 ? i32 %351 : i32 %348;
    [20 * i32]* %358 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %357];
    i32* %359 = getelementptr &([20 * i32]* %358)[i64 0][i64 4];
    i32 %360 = load i32* %359;
    i32 %361 = select i1 %356 ? i32 %355 : i32 %352;
    [20 * i32]* %362 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %361];
    i32* %363 = getelementptr &([20 * i32]* %362)[i64 0][i64 4];
    i32 %364 = load i32* %363;
    i1 %365 = icmp neq i32 %360, i32 %364;
    i32 %366 = select i1 %365 ? i32 %360 : i32 %357;
    [20 * i32]* %367 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %366];
    i32* %368 = getelementptr &([20 * i32]* %367)[i64 0][i64 3];
    i32 %369 = load i32* %368;
    i32 %370 = select i1 %365 ? i32 %364 : i32 %361;
    [20 * i32]* %371 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %370];
    i32* %372 = getelementptr &([20 * i32]* %371)[i64 0][i64 3];
    i32 %373 = load i32* %372;
    i1 %374 = icmp neq i32 %369, i32 %373;
    i32 %375 = select i1 %374 ? i32 %369 : i32 %366;
    [20 * i32]* %376 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %375];
    i32* %377 = getelementptr &([20 * i32]* %376)[i64 0][i64 2];
    i32 %378 = load i32* %377;
    i32 %379 = select i1 %374 ? i32 %373 : i32 %370;
    [20 * i32]* %380 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %379];
    i32* %381 = getelementptr &([20 * i32]* %380)[i64 0][i64 2];
    i32 %382 = load i32* %381;
    i1 %383 = icmp neq i32 %378, i32 %382;
    i32 %384 = select i1 %383 ? i32 %378 : i32 %375;
    [20 * i32]* %385 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %384];
    i32* %386 = getelementptr &([20 * i32]* %385)[i64 0][i64 1];
    i32 %387 = load i32* %386;
    i32 %388 = select i1 %383 ? i32 %382 : i32 %379;
    [20 * i32]* %389 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %388];
    i32* %390 = getelementptr &([20 * i32]* %389)[i64 0][i64 1];
    i32 %391 = load i32* %390;
    i1 %392 = icmp neq i32 %387, i32 %391;
    i32 %393 = select i1 %392 ? i32 %387 : i32 %384;
    [20 * i32]* %394 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %393];
    i32* %395 = getelementptr &([20 * i32]* %394)[i64 0][i64 0];
    i32 %396 = load i32* %395;
    i32 %397 = select i1 %392 ? i32 %391 : i32 %388;
    [20 * i32]* %398 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %397];
    i32* %399 = getelementptr &([20 * i32]* %398)[i64 0][i64 0];
    i32 %400 = load i32* %399;
    i1 %401 = icmp neq i32 %396, i32 %400;
    i32 %402 = select i1 %401 ? i32 %396 : i32 %393;
    [20 * i32]* %403 = getelementptr &([10005 * [20 * i32]]* %7)[i64 0][i32 %402];
    i32* %404 = getelementptr &([20 * i32]* %403)[i64 0][i64 0];
    i32 %405 = load i32* %404;
    ubr ^b11;
  ^b11:
    i32 %406 = phi [^b8, i32 %208] [^while.body16, i32 %405];
    call (i32) -> void @putint(i32 %406);
    call (i32) -> void @putch(i32 10);
    i32 %407 = add i32 %85, i32 -1;
    i1 %408 = icmp neq i32 %407, i32 0;
    cbr i1 %408(prob = 0.97), ^while.body7, ^b3;
}
