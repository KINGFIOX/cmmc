internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d, i32* %0, i32* %1, i32* %2) -> void {
^entry:
    i32* %3 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %x];
    store i32* %3 with i32 %d;
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 %x];
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %d];
    i32 %6 = phi [^while.body, i32 %11] [^entry, i32 0];
    [20 * i32]* %7 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %4];
    i32* %8 = getelementptr &([20 * i32]* %7)[i64 0][i32 %6];
    i32 %9 = load i32* %8;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = add i32 %6, i32 1;
    i32* %12 = getelementptr &([20 * i32]* %7)[i64 0][i32 %11];
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %9];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %6];
    i32 %15 = load i32* %14;
    store i32* %12 with i32 %15;
    ubr ^while.header;
^b:
    i32* %16 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %4];
    i32 %17 = load i32* %16;
    ubr ^while.header1;
^while.header1:
    i32 %18 = phi [^while.body1, i32 %18] [^b, i32 %5];
    i32 %19 = phi [^while.body1, i32 %25] [^b, i32 %17];
    i1 %20 = scmp neq i32 %19, i32 -1;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %21 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %19];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %18, i32 1;
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 %22, i32 %23, i32* %0, i32* %1, i32* %2);
    i32* %24 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %19];
    i32 %25 = load i32* %24;
    ubr ^while.header1;
^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    store i32* %cnt with i32 0;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %1] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %14] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %3] [^entry, i32 0];
    i32 %4 = phi [^b2, i32 %15] [^entry, i32 %0];
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp gt i32 %4, i32 57;
    ubr ^b1;
^b1:
    i1 %7 = phi [^b, i1 %6] [^while.header, i1 true];
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %8 = scmp eq i32 %4, i32 45;
    cbr i1 %8(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %9 = phi [^b1, i32 %1] [^while.body1, i32 %9];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %10];
    i32 %11 = phi [^b1, i32 %3] [^while.body1, i32 %20];
    i32 %12 = phi [^b1, i32 %4] [^while.body1, i32 %21];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %14 = phi [^if.then, i32 1] [^while.body, i32 %2];
    i32 %15 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %16 = scmp le i32 %12, i32 57;
    ubr ^b4;
^b4:
    i1 %17 = phi [^b3, i1 %16] [^while.header1, i1 false];
    cbr i1 %17(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %18 = mul i32 %11, i32 10;
    i32 %19 = add i32 %18, i32 -48;
    i32 %20 = add i32 %19, i32 %12;
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %22 = scmp neq i32 %10, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %23 = neg i32 %11;
    ubr ^entry1;
^entry1:
    i32 %24 = phi [^b5, i32 %11] [^if.then1, i32 %23];
    store i32* %n with i32 %24;
    i32 %25 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %26 = phi [^b8, i32 %26] [^entry1, i32 %24];
    i32 %27 = phi [^b8, i32 %27] [^entry1, i32 %9];
    i32 %28 = phi [^b8, i32 %41] [^entry1, i32 0];
    i32 %29 = phi [^b8, i32 %29] [^entry1, i32 0];
    i32 %30 = phi [^b8, i32 %42] [^entry1, i32 %25];
    i1 %31 = scmp lt i32 %30, i32 48;
    cbr i1 %31(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %32 = scmp gt i32 %30, i32 57;
    ubr ^b7;
^b7:
    i1 %33 = phi [^b6, i1 %32] [^while.header2, i1 true];
    cbr i1 %33(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %34 = scmp eq i32 %30, i32 45;
    cbr i1 %34(prob = 0.5), ^if.then2, ^b8;
^while.header3:
    i32 %35 = phi [^b7, i32 %26] [^while.body3, i32 %35];
    i32 %36 = phi [^b7, i32 %27] [^while.body3, i32 %36];
    i32 %37 = phi [^b7, i32 %28] [^while.body3, i32 %37];
    i32 %38 = phi [^b7, i32 %29] [^while.body3, i32 %47];
    i32 %39 = phi [^b7, i32 %30] [^while.body3, i32 %48];
    i1 %40 = scmp gt i32 %39, i32 47;
    cbr i1 %40(prob = 0.5), ^b9, ^b10;
^if.then2:
    ubr ^b8;
^b8:
    i32 %41 = phi [^if.then2, i32 1] [^while.body2, i32 %28];
    i32 %42 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %43 = scmp le i32 %39, i32 57;
    ubr ^b10;
^b10:
    i1 %44 = phi [^b9, i1 %43] [^while.header3, i1 false];
    cbr i1 %44(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %45 = mul i32 %38, i32 10;
    i32 %46 = add i32 %45, i32 -48;
    i32 %47 = add i32 %46, i32 %39;
    i32 %48 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %49 = scmp neq i32 %37, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then3, ^entry2;
^if.then3:
    i32 %50 = neg i32 %38;
    ubr ^entry2;
^entry2:
    i32 %51 = phi [^b11, i32 %38] [^if.then3, i32 %50];
    store i32* %m with i32 %51;
    i32* %52 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %52 with i32 1061109567;
    ubr ^while.header4;
^while.header4:
    i32 %53 = phi [^while.body4, i32 %53] [^entry2, i32 %35];
    i32 %54 = phi [^while.body4, i32 %54] [^entry2, i32 %36];
    i32 %55 = phi [^while.body4, i32 %58] [^entry2, i32 1];
    i1 %56 = scmp le i32 %55, i32 %53;
    cbr i1 %56(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %57 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %55];
    store i32* %57 with i32 -1;
    i32 %58 = add i32 %55, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %59 = phi [^while.body14, i32 %173] [^while.header4, i32 1];
    i32 %60 = phi [^while.body14, i32 %138] [^while.header4, i32 %53];
    i32 %61 = phi [^while.body14, i32 %170] [^while.header4, i32 %54];
    i1 %62 = scmp neq i32 %59, i32 %60;
    cbr i1 %62(prob = 0.97), ^entry3, ^b12;
^entry3:
    i32 %63 = call () -> i32 @getch();
    ubr ^while.header6;
^b12:
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 1, i32 1, i32* %n, i32* %m, i32* %cnt);
    i32 %64 = load i32* %m;
    ubr ^while.header7;
^while.header6:
    i32 %65 = phi [^b16, i32 %65] [^entry3, i32 %59];
    i32 %66 = phi [^b16, i32 %66] [^entry3, i32 %60];
    i32 %67 = phi [^b16, i32 %67] [^entry3, i32 %61];
    i32 %68 = phi [^b16, i32 %90] [^entry3, i32 0];
    i32 %69 = phi [^b16, i32 %69] [^entry3, i32 0];
    i32 %70 = phi [^b16, i32 %91] [^entry3, i32 %63];
    i1 %71 = scmp lt i32 %70, i32 48;
    cbr i1 %71(prob = 0.5), ^b14, ^b13;
^while.header7:
    i32 %72 = phi [^while.body18, i32 %209] [^b12, i32 %64];
    i1 %73 = scmp neq i32 %72, i32 0;
    cbr i1 %73(prob = 0.97), ^entry4, ^b15;
^b13:
    i1 %74 = scmp gt i32 %70, i32 57;
    ubr ^b14;
^entry4:
    i32 %75 = call () -> i32 @getch();
    ubr ^while.header8;
^b14:
    i1 %76 = phi [^b13, i1 %74] [^while.header6, i1 true];
    cbr i1 %76(prob = 0.97), ^while.body5, ^while.header9;
^b15:
    ret i32 0;
^while.body5:
    i1 %77 = scmp eq i32 %70, i32 45;
    cbr i1 %77(prob = 0.5), ^if.then4, ^b16;
^while.header8:
    i32 %78 = phi [^b22, i32 %78] [^entry4, i32 %72];
    i32 %79 = phi [^b22, i32 %107] [^entry4, i32 0];
    i32 %80 = phi [^b22, i32 %80] [^entry4, i32 0];
    i32 %81 = phi [^b22, i32 %108] [^entry4, i32 %75];
    i1 %82 = scmp lt i32 %81, i32 48;
    cbr i1 %82(prob = 0.5), ^b19, ^b18;
^while.header9:
    i32 %83 = phi [^b14, i32 %65] [^while.body6, i32 %83];
    i32 %84 = phi [^b14, i32 %66] [^while.body6, i32 %84];
    i32 %85 = phi [^b14, i32 %67] [^while.body6, i32 %85];
    i32 %86 = phi [^b14, i32 %68] [^while.body6, i32 %86];
    i32 %87 = phi [^b14, i32 %69] [^while.body6, i32 %98];
    i32 %88 = phi [^b14, i32 %70] [^while.body6, i32 %99];
    i1 %89 = scmp gt i32 %88, i32 47;
    cbr i1 %89(prob = 0.5), ^b17, ^b20;
^if.then4:
    ubr ^b16;
^b16:
    i32 %90 = phi [^if.then4, i32 1] [^while.body5, i32 %68];
    i32 %91 = call () -> i32 @getch();
    ubr ^while.header6;
^b17:
    i1 %92 = scmp le i32 %88, i32 57;
    ubr ^b20;
^b18:
    i1 %93 = scmp gt i32 %81, i32 57;
    ubr ^b19;
^b19:
    i1 %94 = phi [^b18, i1 %93] [^while.header8, i1 true];
    cbr i1 %94(prob = 0.97), ^while.body7, ^while.header10;
^b20:
    i1 %95 = phi [^b17, i1 %92] [^while.header9, i1 false];
    cbr i1 %95(prob = 0.97), ^while.body6, ^b21;
^while.body6:
    i32 %96 = mul i32 %87, i32 10;
    i32 %97 = add i32 %96, i32 -48;
    i32 %98 = add i32 %97, i32 %88;
    i32 %99 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body7:
    i1 %100 = scmp eq i32 %81, i32 45;
    cbr i1 %100(prob = 0.5), ^if.then5, ^b22;
^while.header10:
    i32 %101 = phi [^b19, i32 %78] [^while.body9, i32 %101];
    i32 %102 = phi [^b19, i32 %79] [^while.body9, i32 %102];
    i32 %103 = phi [^b19, i32 %80] [^while.body9, i32 %116];
    i32 %104 = phi [^b19, i32 %81] [^while.body9, i32 %117];
    i1 %105 = scmp gt i32 %104, i32 47;
    cbr i1 %105(prob = 0.5), ^b23, ^b24;
^b21:
    i1 %106 = scmp neq i32 %86, i32 0;
    cbr i1 %106(prob = 0.5), ^if.then6, ^while.body8;
^if.then5:
    ubr ^b22;
^b22:
    i32 %107 = phi [^if.then5, i32 1] [^while.body7, i32 %79];
    i32 %108 = call () -> i32 @getch();
    ubr ^while.header8;
^b23:
    i1 %109 = scmp le i32 %104, i32 57;
    ubr ^b24;
^if.then6:
    i32 %110 = neg i32 %87;
    ubr ^while.body8;
^while.body8:
    i32 %111 = phi [^b21, i32 %87] [^if.then6, i32 %110];
    i32 %112 = call () -> i32 @getch();
    ubr ^while.header11;
^b24:
    i1 %113 = phi [^b23, i1 %109] [^while.header10, i1 false];
    cbr i1 %113(prob = 0.97), ^while.body9, ^b25;
^while.body9:
    i32 %114 = mul i32 %103, i32 10;
    i32 %115 = add i32 %114, i32 -48;
    i32 %116 = add i32 %115, i32 %104;
    i32 %117 = call () -> i32 @getch();
    ubr ^while.header10;
^b25:
    i1 %118 = scmp neq i32 %102, i32 0;
    cbr i1 %118(prob = 0.5), ^if.then7, ^while.body10;
^while.header11:
    i32 %119 = phi [^b28, i32 %119] [^while.body8, i32 %83];
    i32 %120 = phi [^b28, i32 %120] [^while.body8, i32 %84];
    i32 %121 = phi [^b28, i32 %121] [^while.body8, i32 %85];
    i32 %122 = phi [^b28, i32 %144] [^while.body8, i32 0];
    i32 %123 = phi [^b28, i32 %123] [^while.body8, i32 0];
    i32 %124 = phi [^b28, i32 %145] [^while.body8, i32 %112];
    i1 %125 = scmp lt i32 %124, i32 48;
    cbr i1 %125(prob = 0.5), ^b27, ^b26;
^if.then7:
    i32 %126 = neg i32 %103;
    ubr ^while.body10;
^while.body10:
    i32 %127 = phi [^b25, i32 %103] [^if.then7, i32 %126];
    i32 %128 = call () -> i32 @getch();
    ubr ^while.header12;
^b26:
    i1 %129 = scmp gt i32 %124, i32 57;
    ubr ^b27;
^b27:
    i1 %130 = phi [^while.header11, i1 true] [^b26, i1 %129];
    cbr i1 %130(prob = 0.97), ^while.body11, ^while.header13;
^while.body11:
    i1 %131 = scmp eq i32 %124, i32 45;
    cbr i1 %131(prob = 0.5), ^if.then8, ^b28;
^while.header12:
    i32 %132 = phi [^b34, i32 %132] [^while.body10, i32 %101];
    i32 %133 = phi [^b34, i32 %161] [^while.body10, i32 0];
    i32 %134 = phi [^b34, i32 %134] [^while.body10, i32 0];
    i32 %135 = phi [^b34, i32 %162] [^while.body10, i32 %128];
    i1 %136 = scmp lt i32 %135, i32 48;
    cbr i1 %136(prob = 0.5), ^b31, ^b30;
^while.header13:
    i32 %137 = phi [^b27, i32 %119] [^while.body12, i32 %137];
    i32 %138 = phi [^b27, i32 %120] [^while.body12, i32 %138];
    i32 %139 = phi [^b27, i32 %121] [^while.body12, i32 %139];
    i32 %140 = phi [^b27, i32 %122] [^while.body12, i32 %140];
    i32 %141 = phi [^b27, i32 %123] [^while.body12, i32 %152];
    i32 %142 = phi [^b27, i32 %124] [^while.body12, i32 %153];
    i1 %143 = scmp gt i32 %142, i32 47;
    cbr i1 %143(prob = 0.5), ^b29, ^b32;
^if.then8:
    ubr ^b28;
^b28:
    i32 %144 = phi [^if.then8, i32 1] [^while.body11, i32 %122];
    i32 %145 = call () -> i32 @getch();
    ubr ^while.header11;
^b29:
    i1 %146 = scmp le i32 %142, i32 57;
    ubr ^b32;
^b30:
    i1 %147 = scmp gt i32 %135, i32 57;
    ubr ^b31;
^b31:
    i1 %148 = phi [^b30, i1 %147] [^while.header12, i1 true];
    cbr i1 %148(prob = 0.97), ^while.body13, ^while.header14;
^b32:
    i1 %149 = phi [^b29, i1 %146] [^while.header13, i1 false];
    cbr i1 %149(prob = 0.97), ^while.body12, ^b33;
^while.body12:
    i32 %150 = mul i32 %141, i32 10;
    i32 %151 = add i32 %150, i32 -48;
    i32 %152 = add i32 %151, i32 %142;
    i32 %153 = call () -> i32 @getch();
    ubr ^while.header13;
^while.body13:
    i1 %154 = scmp eq i32 %135, i32 45;
    cbr i1 %154(prob = 0.5), ^if.then9, ^b34;
^while.header14:
    i32 %155 = phi [^b31, i32 %132] [^while.body15, i32 %155];
    i32 %156 = phi [^b31, i32 %133] [^while.body15, i32 %156];
    i32 %157 = phi [^b31, i32 %134] [^while.body15, i32 %177];
    i32 %158 = phi [^b31, i32 %135] [^while.body15, i32 %178];
    i1 %159 = scmp gt i32 %158, i32 47;
    cbr i1 %159(prob = 0.5), ^b35, ^b36;
^b33:
    i1 %160 = scmp neq i32 %140, i32 0;
    cbr i1 %160(prob = 0.5), ^if.then10, ^while.body14;
^if.then9:
    ubr ^b34;
^b34:
    i32 %161 = phi [^if.then9, i32 1] [^while.body13, i32 %133];
    i32 %162 = call () -> i32 @getch();
    ubr ^while.header12;
^b35:
    i1 %163 = scmp le i32 %158, i32 57;
    ubr ^b36;
^if.then10:
    i32 %164 = neg i32 %141;
    ubr ^while.body14;
^while.body14:
    i32 %165 = phi [^b33, i32 %141] [^if.then10, i32 %164];
    i32* %166 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %139];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %139];
    i32* %168 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %111];
    i32 %169 = load i32* %168;
    store i32* %167 with i32 %169;
    store i32* %168 with i32 %139;
    i32 %170 = add i32 %139, i32 1;
    store i32* %cnt with i32 %170;
    [20 * i32]* %171 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %165];
    i32* %172 = getelementptr &([20 * i32]* %171)[i64 0][i64 0];
    store i32* %172 with i32 %111;
    i32 %173 = add i32 %137, i32 1;
    ubr ^while.header5;
^b36:
    i1 %174 = phi [^b35, i1 %163] [^while.header14, i1 false];
    cbr i1 %174(prob = 0.97), ^while.body15, ^b37;
^while.body15:
    i32 %175 = mul i32 %157, i32 10;
    i32 %176 = add i32 %175, i32 -48;
    i32 %177 = add i32 %176, i32 %158;
    i32 %178 = call () -> i32 @getch();
    ubr ^while.header14;
^b37:
    i1 %179 = scmp neq i32 %156, i32 0;
    cbr i1 %179(prob = 0.5), ^if.then11, ^while.body16;
^if.then11:
    i32 %180 = neg i32 %157;
    ubr ^while.body16;
^while.body16:
    i32 %181 = phi [^b37, i32 %157] [^if.then11, i32 %180];
    i32* %182 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %127];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %181];
    i32 %185 = load i32* %184;
    i1 %186 = scmp lt i32 %183, i32 %185;
    cbr i1 %186(prob = 0.5), ^if.then12, ^b38;
^if.then12:
    ubr ^b38;
^b38:
    i32 %187 = phi [^if.then12, i32 %127] [^while.body16, i32 %181];
    i32 %188 = phi [^if.then12, i32 %181] [^while.body16, i32 %127];
    ubr ^while.header15;
^while.header15:
    i32 %189 = phi [^b42, i32 %189] [^b38, i32 %155];
    i32 %190 = phi [^b42, i32 %218] [^b38, i32 19];
    i32 %191 = phi [^b42, i32 %191] [^b38, i32 %187];
    i32 %192 = phi [^b42, i32 %217] [^b38, i32 %188];
    i32* %193 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %191];
    i32 %196 = load i32* %195;
    i1 %197 = scmp gt i32 %194, i32 %196;
    cbr i1 %197(prob = 0.97), ^while.body17, ^b39;
^while.body17:
    [20 * i32]* %198 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %192];
    i32* %199 = getelementptr &([20 * i32]* %198)[i64 0][i32 %190];
    i32 %200 = load i32* %199;
    i1 %201 = scmp neq i32 %200, i32 0;
    cbr i1 %201(prob = 0.5), ^b40, ^b41;
^b39:
    i1 %202 = scmp eq i32 %192, i32 %191;
    cbr i1 %202(prob = 0.5), ^while.body18, ^while.header16;
^b40:
    i32* %203 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %200];
    i32 %204 = load i32* %203;
    i32 %205 = load i32* %195;
    i1 %206 = scmp ge i32 %204, i32 %205;
    ubr ^b41;
^while.body18:
    i32 %207 = phi [^b39, i32 %189] [^b43, i32 %211];
    i32 %208 = phi [^b39, i32 %192] [^b43, i32 %221];
    call (i32) -> void @putint(i32 %208);
    call (i32) -> void @putch(i32 10);
    i32 %209 = add i32 %207, i32 -1;
    ubr ^while.header7;
^b41:
    i1 %210 = phi [^while.body17, i1 false] [^b40, i1 %206];
    cbr i1 %210(prob = 0.5), ^if.then13, ^b42;
^while.header16:
    i32 %211 = phi [^b39, i32 %189] [^b44, i32 %211];
    i32 %212 = phi [^b39, i32 19] [^b44, i32 %232];
    i32 %213 = phi [^b39, i32 %191] [^b44, i32 %230];
    i32 %214 = phi [^b39, i32 %192] [^b44, i32 %231];
    i1 %215 = scmp gt i32 %212, i32 -1;
    cbr i1 %215(prob = 0.97), ^while.body19, ^b43;
^if.then13:
    i32 %216 = load i32* %199;
    ubr ^b42;
^b42:
    i32 %217 = phi [^b41, i32 %192] [^if.then13, i32 %216];
    i32 %218 = add i32 %190, i32 -1;
    ubr ^while.header15;
^b43:
    [20 * i32]* %219 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %214];
    i32* %220 = getelementptr &([20 * i32]* %219)[i64 0][i64 0];
    i32 %221 = load i32* %220;
    ubr ^while.body18;
^while.body19:
    [20 * i32]* %222 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %214];
    i32* %223 = getelementptr &([20 * i32]* %222)[i64 0][i32 %212];
    i32 %224 = load i32* %223;
    [20 * i32]* %225 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %213];
    i32* %226 = getelementptr &([20 * i32]* %225)[i64 0][i32 %212];
    i32 %227 = load i32* %226;
    i1 %228 = scmp neq i32 %224, i32 %227;
    cbr i1 %228(prob = 0.5), ^if.then14, ^b44;
^if.then14:
    i32 %229 = load i32* %223;
    ubr ^b44;
^b44:
    i32 %230 = phi [^if.then14, i32 %227] [^while.body19, i32 %213];
    i32 %231 = phi [^if.then14, i32 %229] [^while.body19, i32 %214];
    i32 %232 = add i32 %212, i32 -1;
    ubr ^while.header16;
}
