internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d, i32* %0, i32* %1, i32* %2) -> void {
^entry:
    i32* %3 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %x];
    store i32* %3 with i32 %d;
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 %x];
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %d];
    i32 %6 = phi [^while.body, i32 %14] [^entry, i32 0];
    i32 %7 = phi [^while.body, i32 %14] [^entry, i32 0];
    i32 %8 = phi [^while.body, i32 %4] [^entry, i32 %x];
    [20 * i32]* %9 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %8];
    i32* %10 = getelementptr &([20 * i32]* %9)[i64 0][i32 %7];
    i32 %11 = load i32* %10;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %4];
    i32 %14 = add i32 %6, i32 1;
    i32* %15 = getelementptr &([20 * i32]* %13)[i64 0][i32 %14];
    i32* %16 = getelementptr &([20 * i32]* %13)[i64 0][i32 %6];
    i32 %17 = load i32* %16;
    [20 * i32]* %18 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %17];
    i32* %19 = getelementptr &([20 * i32]* %18)[i64 0][i32 %6];
    i32 %20 = load i32* %19;
    store i32* %15 with i32 %20;
    ubr ^while.header;
^b:
    i32* %21 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %4];
    i32 %22 = load i32* %21;
    ubr ^while.header1;
^while.header1:
    i32 %23 = phi [^while.body1, i32 %23] [^b, i32 %5];
    i32 %24 = phi [^while.body1, i32 %31] [^b, i32 %22];
    i32 %25 = phi [^while.body1, i32 %31] [^b, i32 %22];
    i1 %26 = scmp neq i32 %25, i32 -1;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %27 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %24];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %23, i32 1;
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 %28, i32 %29, i32* %0, i32* %1, i32* %2);
    i32* %30 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %24];
    i32 %31 = load i32* %30;
    ubr ^while.header1;
^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    store i32* %cnt with i32 0;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %1] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %16] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %3] [^entry, i32 0];
    i32 %4 = phi [^b2, i32 %17] [^entry, i32 %0];
    i32 %5 = phi [^entry, i32 %0] [^b2, i32 %17];
    i1 %6 = scmp lt i32 %5, i32 48;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^b:
    i1 %7 = scmp gt i32 %4, i32 57;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^while.header, i1 true];
    cbr i1 %8(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %9 = scmp eq i32 %4, i32 45;
    cbr i1 %9(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %10 = phi [^b1, i32 %1] [^while.body1, i32 %10];
    i32 %11 = phi [^b1, i32 %2] [^while.body1, i32 %11];
    i32 %12 = phi [^b1, i32 %3] [^while.body1, i32 %22];
    i32 %13 = phi [^b1, i32 %4] [^while.body1, i32 %23];
    i32 %14 = phi [^b1, i32 %4] [^while.body1, i32 %23];
    i1 %15 = scmp gt i32 %14, i32 47;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %16 = phi [^if.then, i32 1] [^while.body, i32 %2];
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %18 = scmp le i32 %13, i32 57;
    ubr ^b4;
^b4:
    i1 %19 = phi [^b3, i1 %18] [^while.header1, i1 false];
    cbr i1 %19(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %20 = mul i32 %12, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %21, i32 %13;
    i32 %23 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %24 = scmp neq i32 %11, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %25 = neg i32 %12;
    ubr ^entry1;
^entry1:
    i32 %26 = phi [^b5, i32 %12] [^if.then1, i32 %25];
    store i32* %n with i32 %26;
    i32 %27 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %28 = phi [^b8, i32 %28] [^entry1, i32 %26];
    i32 %29 = phi [^b8, i32 %29] [^entry1, i32 %10];
    i32 %30 = phi [^b8, i32 %45] [^entry1, i32 0];
    i32 %31 = phi [^b8, i32 %31] [^entry1, i32 0];
    i32 %32 = phi [^b8, i32 %46] [^entry1, i32 %27];
    i32 %33 = phi [^entry1, i32 %27] [^b8, i32 %46];
    i1 %34 = scmp lt i32 %33, i32 48;
    cbr i1 %34(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %35 = scmp gt i32 %32, i32 57;
    ubr ^b7;
^b7:
    i1 %36 = phi [^b6, i1 %35] [^while.header2, i1 true];
    cbr i1 %36(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %37 = scmp eq i32 %32, i32 45;
    cbr i1 %37(prob = 0.5), ^if.then2, ^b8;
^while.header3:
    i32 %38 = phi [^b7, i32 %28] [^while.body3, i32 %38];
    i32 %39 = phi [^b7, i32 %29] [^while.body3, i32 %39];
    i32 %40 = phi [^b7, i32 %30] [^while.body3, i32 %40];
    i32 %41 = phi [^b7, i32 %31] [^while.body3, i32 %51];
    i32 %42 = phi [^b7, i32 %32] [^while.body3, i32 %52];
    i32 %43 = phi [^b7, i32 %32] [^while.body3, i32 %52];
    i1 %44 = scmp gt i32 %43, i32 47;
    cbr i1 %44(prob = 0.5), ^b9, ^b10;
^if.then2:
    ubr ^b8;
^b8:
    i32 %45 = phi [^if.then2, i32 1] [^while.body2, i32 %30];
    i32 %46 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %47 = scmp le i32 %42, i32 57;
    ubr ^b10;
^b10:
    i1 %48 = phi [^b9, i1 %47] [^while.header3, i1 false];
    cbr i1 %48(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %49 = mul i32 %41, i32 10;
    i32 %50 = add i32 %49, i32 -48;
    i32 %51 = add i32 %50, i32 %42;
    i32 %52 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %53 = scmp neq i32 %40, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then3, ^entry2;
^if.then3:
    i32 %54 = neg i32 %41;
    ubr ^entry2;
^entry2:
    i32 %55 = phi [^b11, i32 %41] [^if.then3, i32 %54];
    store i32* %m with i32 %55;
    i32* %56 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %56 with i32 1061109567;
    ubr ^while.header4;
^while.header4:
    i32 %57 = phi [^while.body4, i32 %57] [^entry2, i32 %38];
    i32 %58 = phi [^while.body4, i32 %58] [^entry2, i32 %39];
    i32 %59 = phi [^while.body4, i32 %63] [^entry2, i32 1];
    i32 %60 = phi [^entry2, i32 1] [^while.body4, i32 %63];
    i1 %61 = scmp le i32 %60, i32 %57;
    cbr i1 %61(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %62 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %59];
    store i32* %62 with i32 -1;
    i32 %63 = add i32 %59, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %64 = phi [^while.body14, i32 %188] [^while.header4, i32 1];
    i32 %65 = phi [^while.body14, i32 %151] [^while.header4, i32 %57];
    i32 %66 = phi [^while.body14, i32 %185] [^while.header4, i32 %58];
    i32 %67 = phi [^while.body14, i32 %188] [^while.header4, i32 1];
    i1 %68 = scmp neq i32 %67, i32 %65;
    cbr i1 %68(prob = 0.97), ^entry3, ^b12;
^entry3:
    i32 %69 = call () -> i32 @getch();
    ubr ^while.header6;
^b12:
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 1, i32 1, i32* %n, i32* %m, i32* %cnt);
    i32 %70 = load i32* %m;
    ubr ^while.header7;
^while.header6:
    i32 %71 = phi [^b16, i32 %71] [^entry3, i32 %64];
    i32 %72 = phi [^b16, i32 %72] [^entry3, i32 %65];
    i32 %73 = phi [^b16, i32 %73] [^entry3, i32 %66];
    i32 %74 = phi [^b16, i32 %100] [^entry3, i32 0];
    i32 %75 = phi [^b16, i32 %75] [^entry3, i32 0];
    i32 %76 = phi [^b16, i32 %101] [^entry3, i32 %69];
    i32 %77 = phi [^b16, i32 %101] [^entry3, i32 %69];
    i1 %78 = scmp lt i32 %77, i32 48;
    cbr i1 %78(prob = 0.5), ^b14, ^b13;
^while.header7:
    i32 %79 = phi [^while.body18, i32 %224] [^b12, i32 %70];
    i32 %80 = phi [^while.body18, i32 %224] [^b12, i32 %70];
    i1 %81 = scmp neq i32 %80, i32 0;
    cbr i1 %81(prob = 0.97), ^entry4, ^b15;
^b13:
    i1 %82 = scmp gt i32 %76, i32 57;
    ubr ^b14;
^entry4:
    i32 %83 = call () -> i32 @getch();
    ubr ^while.header8;
^b14:
    i1 %84 = phi [^b13, i1 %82] [^while.header6, i1 true];
    cbr i1 %84(prob = 0.97), ^while.body5, ^while.header9;
^b15:
    ret i32 0;
^while.body5:
    i1 %85 = scmp eq i32 %76, i32 45;
    cbr i1 %85(prob = 0.5), ^if.then4, ^b16;
^while.header8:
    i32 %86 = phi [^b22, i32 %86] [^entry4, i32 %79];
    i32 %87 = phi [^b22, i32 %118] [^entry4, i32 0];
    i32 %88 = phi [^b22, i32 %88] [^entry4, i32 0];
    i32 %89 = phi [^b22, i32 %119] [^entry4, i32 %83];
    i32 %90 = phi [^b22, i32 %119] [^entry4, i32 %83];
    i1 %91 = scmp lt i32 %90, i32 48;
    cbr i1 %91(prob = 0.5), ^b19, ^b18;
^while.header9:
    i32 %92 = phi [^b14, i32 %71] [^while.body6, i32 %92];
    i32 %93 = phi [^b14, i32 %72] [^while.body6, i32 %93];
    i32 %94 = phi [^b14, i32 %73] [^while.body6, i32 %94];
    i32 %95 = phi [^b14, i32 %74] [^while.body6, i32 %95];
    i32 %96 = phi [^b14, i32 %75] [^while.body6, i32 %108];
    i32 %97 = phi [^b14, i32 %76] [^while.body6, i32 %109];
    i32 %98 = phi [^b14, i32 %76] [^while.body6, i32 %109];
    i1 %99 = scmp gt i32 %98, i32 47;
    cbr i1 %99(prob = 0.5), ^b17, ^b20;
^if.then4:
    ubr ^b16;
^b16:
    i32 %100 = phi [^if.then4, i32 1] [^while.body5, i32 %74];
    i32 %101 = call () -> i32 @getch();
    ubr ^while.header6;
^b17:
    i1 %102 = scmp le i32 %97, i32 57;
    ubr ^b20;
^b18:
    i1 %103 = scmp gt i32 %89, i32 57;
    ubr ^b19;
^b19:
    i1 %104 = phi [^b18, i1 %103] [^while.header8, i1 true];
    cbr i1 %104(prob = 0.97), ^while.body7, ^while.header10;
^b20:
    i1 %105 = phi [^b17, i1 %102] [^while.header9, i1 false];
    cbr i1 %105(prob = 0.97), ^while.body6, ^b21;
^while.body6:
    i32 %106 = mul i32 %96, i32 10;
    i32 %107 = add i32 %106, i32 -48;
    i32 %108 = add i32 %107, i32 %97;
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body7:
    i1 %110 = scmp eq i32 %89, i32 45;
    cbr i1 %110(prob = 0.5), ^if.then5, ^b22;
^while.header10:
    i32 %111 = phi [^b19, i32 %86] [^while.body9, i32 %111];
    i32 %112 = phi [^b19, i32 %87] [^while.body9, i32 %112];
    i32 %113 = phi [^b19, i32 %88] [^while.body9, i32 %127];
    i32 %114 = phi [^b19, i32 %89] [^while.body9, i32 %128];
    i32 %115 = phi [^b19, i32 %89] [^while.body9, i32 %128];
    i1 %116 = scmp gt i32 %115, i32 47;
    cbr i1 %116(prob = 0.5), ^b23, ^b24;
^b21:
    i1 %117 = scmp neq i32 %95, i32 0;
    cbr i1 %117(prob = 0.5), ^if.then6, ^while.body8;
^if.then5:
    ubr ^b22;
^b22:
    i32 %118 = phi [^if.then5, i32 1] [^while.body7, i32 %87];
    i32 %119 = call () -> i32 @getch();
    ubr ^while.header8;
^b23:
    i1 %120 = scmp le i32 %114, i32 57;
    ubr ^b24;
^if.then6:
    i32 %121 = neg i32 %96;
    ubr ^while.body8;
^while.body8:
    i32 %122 = phi [^b21, i32 %96] [^if.then6, i32 %121];
    i32 %123 = call () -> i32 @getch();
    ubr ^while.header11;
^b24:
    i1 %124 = phi [^b23, i1 %120] [^while.header10, i1 false];
    cbr i1 %124(prob = 0.97), ^while.body9, ^b25;
^while.body9:
    i32 %125 = mul i32 %113, i32 10;
    i32 %126 = add i32 %125, i32 -48;
    i32 %127 = add i32 %126, i32 %114;
    i32 %128 = call () -> i32 @getch();
    ubr ^while.header10;
^b25:
    i1 %129 = scmp neq i32 %112, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then7, ^while.body10;
^while.header11:
    i32 %130 = phi [^b28, i32 %130] [^while.body8, i32 %92];
    i32 %131 = phi [^b28, i32 %131] [^while.body8, i32 %93];
    i32 %132 = phi [^b28, i32 %132] [^while.body8, i32 %94];
    i32 %133 = phi [^b28, i32 %158] [^while.body8, i32 0];
    i32 %134 = phi [^b28, i32 %134] [^while.body8, i32 0];
    i32 %135 = phi [^b28, i32 %159] [^while.body8, i32 %123];
    i32 %136 = phi [^while.body8, i32 %123] [^b28, i32 %159];
    i1 %137 = scmp lt i32 %136, i32 48;
    cbr i1 %137(prob = 0.5), ^b27, ^b26;
^if.then7:
    i32 %138 = neg i32 %113;
    ubr ^while.body10;
^while.body10:
    i32 %139 = phi [^b25, i32 %113] [^if.then7, i32 %138];
    i32 %140 = call () -> i32 @getch();
    ubr ^while.header12;
^b26:
    i1 %141 = scmp gt i32 %135, i32 57;
    ubr ^b27;
^b27:
    i1 %142 = phi [^b26, i1 %141] [^while.header11, i1 true];
    cbr i1 %142(prob = 0.97), ^while.body11, ^while.header13;
^while.body11:
    i1 %143 = scmp eq i32 %135, i32 45;
    cbr i1 %143(prob = 0.5), ^if.then8, ^b28;
^while.header12:
    i32 %144 = phi [^b34, i32 %144] [^while.body10, i32 %111];
    i32 %145 = phi [^b34, i32 %176] [^while.body10, i32 0];
    i32 %146 = phi [^b34, i32 %146] [^while.body10, i32 0];
    i32 %147 = phi [^b34, i32 %177] [^while.body10, i32 %140];
    i32 %148 = phi [^while.body10, i32 %140] [^b34, i32 %177];
    i1 %149 = scmp lt i32 %148, i32 48;
    cbr i1 %149(prob = 0.5), ^b31, ^b30;
^while.header13:
    i32 %150 = phi [^b27, i32 %130] [^while.body12, i32 %150];
    i32 %151 = phi [^b27, i32 %131] [^while.body12, i32 %151];
    i32 %152 = phi [^b27, i32 %132] [^while.body12, i32 %152];
    i32 %153 = phi [^b27, i32 %133] [^while.body12, i32 %153];
    i32 %154 = phi [^b27, i32 %134] [^while.body12, i32 %166];
    i32 %155 = phi [^b27, i32 %135] [^while.body12, i32 %167];
    i32 %156 = phi [^b27, i32 %135] [^while.body12, i32 %167];
    i1 %157 = scmp gt i32 %156, i32 47;
    cbr i1 %157(prob = 0.5), ^b29, ^b32;
^if.then8:
    ubr ^b28;
^b28:
    i32 %158 = phi [^if.then8, i32 1] [^while.body11, i32 %133];
    i32 %159 = call () -> i32 @getch();
    ubr ^while.header11;
^b29:
    i1 %160 = scmp le i32 %155, i32 57;
    ubr ^b32;
^b30:
    i1 %161 = scmp gt i32 %147, i32 57;
    ubr ^b31;
^b31:
    i1 %162 = phi [^b30, i1 %161] [^while.header12, i1 true];
    cbr i1 %162(prob = 0.97), ^while.body13, ^while.header14;
^b32:
    i1 %163 = phi [^b29, i1 %160] [^while.header13, i1 false];
    cbr i1 %163(prob = 0.97), ^while.body12, ^b33;
^while.body12:
    i32 %164 = mul i32 %154, i32 10;
    i32 %165 = add i32 %164, i32 -48;
    i32 %166 = add i32 %165, i32 %155;
    i32 %167 = call () -> i32 @getch();
    ubr ^while.header13;
^while.body13:
    i1 %168 = scmp eq i32 %147, i32 45;
    cbr i1 %168(prob = 0.5), ^if.then9, ^b34;
^while.header14:
    i32 %169 = phi [^b31, i32 %144] [^while.body15, i32 %169];
    i32 %170 = phi [^b31, i32 %145] [^while.body15, i32 %170];
    i32 %171 = phi [^b31, i32 %146] [^while.body15, i32 %192];
    i32 %172 = phi [^b31, i32 %147] [^while.body15, i32 %193];
    i32 %173 = phi [^b31, i32 %147] [^while.body15, i32 %193];
    i1 %174 = scmp gt i32 %173, i32 47;
    cbr i1 %174(prob = 0.5), ^b35, ^b36;
^b33:
    i1 %175 = scmp neq i32 %153, i32 0;
    cbr i1 %175(prob = 0.5), ^if.then10, ^while.body14;
^if.then9:
    ubr ^b34;
^b34:
    i32 %176 = phi [^if.then9, i32 1] [^while.body13, i32 %145];
    i32 %177 = call () -> i32 @getch();
    ubr ^while.header12;
^b35:
    i1 %178 = scmp le i32 %172, i32 57;
    ubr ^b36;
^if.then10:
    i32 %179 = neg i32 %154;
    ubr ^while.body14;
^while.body14:
    i32 %180 = phi [^b33, i32 %154] [^if.then10, i32 %179];
    i32* %181 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %152];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %152];
    i32* %183 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %122];
    i32 %184 = load i32* %183;
    store i32* %182 with i32 %184;
    store i32* %183 with i32 %152;
    i32 %185 = add i32 %152, i32 1;
    store i32* %cnt with i32 %185;
    [20 * i32]* %186 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %180];
    i32* %187 = getelementptr &([20 * i32]* %186)[i64 0][i64 0];
    store i32* %187 with i32 %122;
    i32 %188 = add i32 %150, i32 1;
    ubr ^while.header5;
^b36:
    i1 %189 = phi [^b35, i1 %178] [^while.header14, i1 false];
    cbr i1 %189(prob = 0.97), ^while.body15, ^b37;
^while.body15:
    i32 %190 = mul i32 %171, i32 10;
    i32 %191 = add i32 %190, i32 -48;
    i32 %192 = add i32 %191, i32 %172;
    i32 %193 = call () -> i32 @getch();
    ubr ^while.header14;
^b37:
    i1 %194 = scmp neq i32 %170, i32 0;
    cbr i1 %194(prob = 0.5), ^if.then11, ^while.body16;
^if.then11:
    i32 %195 = neg i32 %171;
    ubr ^while.body16;
^while.body16:
    i32 %196 = phi [^b37, i32 %171] [^if.then11, i32 %195];
    i32* %197 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %139];
    i32 %198 = load i32* %197;
    i32* %199 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %196];
    i32 %200 = load i32* %199;
    i1 %201 = scmp lt i32 %198, i32 %200;
    cbr i1 %201(prob = 0.5), ^if.then12, ^b38;
^if.then12:
    ubr ^b38;
^b38:
    i32 %202 = phi [^if.then12, i32 %139] [^while.body16, i32 %196];
    i32 %203 = phi [^if.then12, i32 %196] [^while.body16, i32 %139];
    ubr ^while.header15;
^while.header15:
    i32 %204 = phi [^b42, i32 %204] [^b38, i32 %169];
    i32 %205 = phi [^b42, i32 %234] [^b38, i32 19];
    i32 %206 = phi [^b42, i32 %206] [^b38, i32 %202];
    i32 %207 = phi [^b42, i32 %233] [^b38, i32 %203];
    i32* %208 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %207];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %206];
    i32 %211 = load i32* %210;
    i1 %212 = scmp gt i32 %209, i32 %211;
    cbr i1 %212(prob = 0.97), ^while.body17, ^b39;
^while.body17:
    [20 * i32]* %213 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %207];
    i32* %214 = getelementptr &([20 * i32]* %213)[i64 0][i32 %205];
    i32 %215 = load i32* %214;
    i1 %216 = scmp neq i32 %215, i32 0;
    cbr i1 %216(prob = 0.5), ^b40, ^b41;
^b39:
    i1 %217 = scmp eq i32 %207, i32 %206;
    cbr i1 %217(prob = 0.5), ^while.body18, ^while.header16;
^b40:
    i32* %218 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %215];
    i32 %219 = load i32* %218;
    i32 %220 = load i32* %210;
    i1 %221 = scmp ge i32 %219, i32 %220;
    ubr ^b41;
^while.body18:
    i32 %222 = phi [^b39, i32 %204] [^b43, i32 %226];
    i32 %223 = phi [^b39, i32 %207] [^b43, i32 %237];
    call (i32) -> void @putint(i32 %223);
    call (i32) -> void @putch(i32 10);
    i32 %224 = add i32 %222, i32 -1;
    ubr ^while.header7;
^b41:
    i1 %225 = phi [^while.body17, i1 false] [^b40, i1 %221];
    cbr i1 %225(prob = 0.5), ^if.then13, ^b42;
^while.header16:
    i32 %226 = phi [^b39, i32 %204] [^b44, i32 %226];
    i32 %227 = phi [^b39, i32 19] [^b44, i32 %248];
    i32 %228 = phi [^b39, i32 %206] [^b44, i32 %246];
    i32 %229 = phi [^b39, i32 %207] [^b44, i32 %247];
    i32 %230 = phi [^b39, i32 19] [^b44, i32 %248];
    i1 %231 = scmp gt i32 %230, i32 -1;
    cbr i1 %231(prob = 0.97), ^while.body19, ^b43;
^if.then13:
    i32 %232 = load i32* %214;
    ubr ^b42;
^b42:
    i32 %233 = phi [^b41, i32 %207] [^if.then13, i32 %232];
    i32 %234 = add i32 %205, i32 -1;
    ubr ^while.header15;
^b43:
    [20 * i32]* %235 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %229];
    i32* %236 = getelementptr &([20 * i32]* %235)[i64 0][i64 0];
    i32 %237 = load i32* %236;
    ubr ^while.body18;
^while.body19:
    [20 * i32]* %238 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %229];
    i32* %239 = getelementptr &([20 * i32]* %238)[i64 0][i32 %227];
    i32 %240 = load i32* %239;
    [20 * i32]* %241 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %228];
    i32* %242 = getelementptr &([20 * i32]* %241)[i64 0][i32 %227];
    i32 %243 = load i32* %242;
    i1 %244 = scmp neq i32 %240, i32 %243;
    cbr i1 %244(prob = 0.5), ^if.then14, ^b44;
^if.then14:
    i32 %245 = load i32* %239;
    ubr ^b44;
^b44:
    i32 %246 = phi [^if.then14, i32 %243] [^while.body19, i32 %228];
    i32 %247 = phi [^if.then14, i32 %245] [^while.body19, i32 %229];
    i32 %248 = add i32 %227, i32 -1;
    ubr ^while.header16;
}
