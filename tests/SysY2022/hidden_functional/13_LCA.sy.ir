internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f, align 8 { Flexible };
internal [10005 * i32]* @dep, align 8 { Flexible };
internal [10005 * i32]* @to, align 8 { Flexible };
internal [10005 * i32]* @next, align 8 { Flexible };
internal [10005 * i32]* @head, align 8 { Flexible };
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    i32 %7 = add i32 %d, i32 1;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %9 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %6(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32* %10 = phi [^entry, i32* %4] [^while.body, i32* %17];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %19];
    i32 %12 = load i32* %10;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %11];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &([20 * i32]* %3)[i64 0][i32 %11];
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 %15;
    i1 %18 = icmp neq i32 %15, i32 0;
    i32 %19 = add i32 %11, i32 1;
    cbr i1 %18(prob = 0.984615), ^while.body, ^b;
  ^b:
    [10005 * i32]* %20 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %21 = getelementptr &([10005 * i32]* %20)[i64 0][i32 %x];
    i32 %22 = load i32* %21;
    i1 %23 = icmp neq i32 %22, i32 -1;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %24 = phi [^b, i32 %22] [^while.body1, i32 %28];
    i32* %25 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    call (i32, i32) -> void @tree(i32 %26, i32 %7);
    i32* %27 = getelementptr &([10005 * i32]* %9)[i64 0][i32 %24];
    i32 %28 = load i32* %27;
    i1 %29 = icmp neq i32 %28, i32 -1;
    cbr i1 %29(prob = 0.984615), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [10005 * i32]* %3 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^12;
  ^while.body:
    i32 %5 = phi [^entry, i32 %0] [^while.body, i32 %7];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %7 = call () -> i32 @getch();
    i32 %8 = add i32 %7, i32 -48;
    i1 %9 = icmp ugt i32 %8, i32 9;
    i1 %10 = icmp eq i32 %5, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %6;
    cbr i1 %9(prob = 0.984615), ^while.body, ^12;
  ^12:
    i32 %13 = phi [^entry, i32 %0] [^while.body, i32 %7];
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %15 = add i32 %13, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = phi [^12, i32 %13] [^while.body1, i32 %19];
    i32 %18 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    i32 %22 = mul i32 %18, i32 10;
    i32 %23 = add i32 %22, i32 -48;
    i32 %24 = add i32 %17, i32 %23;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %25 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %26 = call () -> i32 @getch();
    i32 %27 = add i32 %26, i32 -48;
    i1 %28 = icmp ugt i32 %27, i32 9;
    i1 %29 = icmp neq i32 %14, i32 0;
    i32 %30 = neg i32 %25;
    i32 %31 = select i1 %29 ? i32 %30 : i32 %25;
    i32 %32 = add i32 %31, i32 -2;
    i32 %33 = add i32 %31, i32 -17;
    cbr i1 %28(prob = 0.984615), ^while.body2, ^41;
  ^while.body2:
    i32 %34 = phi [^b, i32 %26] [^while.body2, i32 %36];
    i32 %35 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %36 = call () -> i32 @getch();
    i32 %37 = add i32 %36, i32 -48;
    i1 %38 = icmp ugt i32 %37, i32 9;
    i1 %39 = icmp eq i32 %34, i32 45;
    i32 %40 = select i1 %39 ? i32 1 : i32 %35;
    cbr i1 %38(prob = 0.984615), ^while.body2, ^41;
  ^41:
    i32 %42 = phi [^b, i32 %26] [^while.body2, i32 %36];
    i32 %43 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %44 = add i32 %42, i32 -48;
    i1 %45 = icmp ult i32 %44, i32 10;
    cbr i1 %45(prob = 0.984615), ^while.body3, ^b1;
  ^while.body3:
    i32 %46 = phi [^41, i32 %42] [^while.body3, i32 %48];
    i32 %47 = phi [^41, i32 0] [^while.body3, i32 %53];
    i32 %48 = call () -> i32 @getch();
    i32 %49 = add i32 %48, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    i32 %51 = mul i32 %47, i32 10;
    i32 %52 = add i32 %51, i32 -48;
    i32 %53 = add i32 %46, i32 %52;
    cbr i1 %50(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %54 = phi [^41, i32 0] [^while.body3, i32 %53];
    i1 %55 = icmp neq i32 %43, i32 0;
    i32 %56 = neg i32 %54;
    i32 %57 = select i1 %55 ? i32 %56 : i32 %54;
    [10005 * i32]* %58 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %59 = getelementptr &([10005 * i32]* %58)[i64 0][i64 0];
    store i32* %59 with i32 1061109567;
    i1 %60 = icmp sgt i32 %31, i32 0;
    [10005 * i32]* %61 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    cbr i1 %60(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    i32 %62 = add i32 %31, i32 1;
    i1 %63 = icmp sgt i32 %62, i32 4;
    cbr i1 %63(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b2:
    i1 %64 = icmp neq i32 %31, i32 1;
    [10005 * [20 * i32]]* %65 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    cbr i1 %64(prob = 0.984615), ^while.body4, ^b3;
  ^super.header1:
    i1 %66 = icmp sgt i32 %32, i32 16;
    cbr i1 %66(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^scalar.header:
    i32 %67 = phi [^super.header, i32 1] [^scalar.header1, i32 %95] [^while.body9, i32 %122];
    i1 %68 = icmp sgt i32 %62, i32 %67;
    cbr i1 %68(prob = 0.75), ^while.body6, ^b2;
  ^while.body4:
    i32 %69 = phi [^b2, i32 0] [^b7, i32 %205];
    i32 %70 = phi [^b2, i32 1] [^b7, i32 %203];
    i32 %71 = call () -> i32 @getch();
    i32 %72 = add i32 %71, i32 -48;
    i1 %73 = icmp ugt i32 %72, i32 9;
    cbr i1 %73(prob = 0.984615), ^while.body7, ^112;
  ^b3:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %74 = icmp neq i32 %57, i32 0;
    cbr i1 %74(prob = 0.984615), ^while.body8, ^b4;
  ^while.body5:
    i32 %75 = phi [^super.header1, i32 1] [^while.body5, i32 %92];
    i32* %76 = getelementptr &([10005 * i32]* %61)[i64 0][i32 %75];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %76)[i64 1];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %76)[i64 2];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %76)[i64 3];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %76)[i64 4];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %76)[i64 5];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %76)[i64 6];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %76)[i64 7];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %76)[i64 8];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %76)[i64 9];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %76)[i64 10];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %76)[i64 11];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %76)[i64 12];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %76)[i64 13];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %76)[i64 14];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %76)[i64 15];
    store i32* %91 with i32 -1;
    i32 %92 = add i32 %75, i32 16;
    i1 %93 = icmp sgt i32 %33, i32 %92;
    cbr i1 %93(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^scalar.header1:
    i32 %94 = phi [^super.header1, i32 1] [^while.body5, i32 %92];
    i32 %95 = phi [^super.header1, i32 undef] [^while.body5, i32 %92];
    i1 %96 = icmp sgt i32 %32, i32 %94;
    cbr i1 %96(prob = 0.75), ^while.body9, ^scalar.header;
  ^while.body6 {scalar}:
    i32 %97 = phi [^scalar.header, i32 %67] [^while.body6, i32 %99];
    i32* %98 = getelementptr &([10005 * i32]* %61)[i64 0][i32 %97];
    store i32* %98 with i32 -1;
    i32 %99 = add i32 %97, i32 1;
    i1 %100 = icmp sgt i32 %62, i32 %99;
    cbr i1 %100(prob = 0.75), ^while.body6, ^b2;
  ^while.body7:
    i32 %101 = phi [^while.body4, i32 %71] [^while.body7, i32 %103];
    i32 %102 = phi [^while.body4, i32 0] [^while.body7, i32 %107];
    i32 %103 = call () -> i32 @getch();
    i32 %104 = add i32 %103, i32 -48;
    i1 %105 = icmp ugt i32 %104, i32 9;
    i1 %106 = icmp eq i32 %101, i32 45;
    i32 %107 = select i1 %106 ? i32 1 : i32 %102;
    cbr i1 %105(prob = 0.984615), ^while.body7, ^112;
  ^while.body8:
    i32 %108 = phi [^b3, i32 %57] [^b12, i32 %430];
    i32 %109 = call () -> i32 @getch();
    i32 %110 = add i32 %109, i32 -48;
    i1 %111 = icmp ugt i32 %110, i32 9;
    cbr i1 %111(prob = 0.984615), ^while.body11, ^146;
  ^112:
    i32 %113 = phi [^while.body4, i32 %71] [^while.body7, i32 %103];
    i32 %114 = phi [^while.body4, i32 0] [^while.body7, i32 %107];
    i32 %115 = add i32 %113, i32 -48;
    i1 %116 = icmp ult i32 %115, i32 10;
    cbr i1 %116(prob = 0.984615), ^while.body10, ^b5;
  ^b4:
    ret i32 0;
  ^while.body9 {scalar}:
    i32 %117 = phi [^scalar.header1, i32 %94] [^while.body9, i32 %122];
    i32* %118 = getelementptr &([10005 * i32]* %61)[i64 0][i32 %117];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %118)[i64 1];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %118)[i64 2];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %118)[i64 3];
    store i32* %121 with i32 -1;
    i32 %122 = add i32 %117, i32 4;
    i1 %123 = icmp sgt i32 %32, i32 %122;
    cbr i1 %123(prob = 0.75), ^while.body9, ^scalar.header;
  ^while.body10:
    i32 %124 = phi [^112, i32 %113] [^while.body10, i32 %126];
    i32 %125 = phi [^112, i32 0] [^while.body10, i32 %131];
    i32 %126 = call () -> i32 @getch();
    i32 %127 = add i32 %126, i32 -48;
    i1 %128 = icmp ult i32 %127, i32 10;
    i32 %129 = mul i32 %125, i32 10;
    i32 %130 = add i32 %129, i32 -48;
    i32 %131 = add i32 %124, i32 %130;
    cbr i1 %128(prob = 0.984615), ^while.body10, ^b5;
  ^while.body11:
    i32 %132 = phi [^while.body8, i32 %109] [^while.body11, i32 %134];
    i32 %133 = phi [^while.body8, i32 0] [^while.body11, i32 %138];
    i32 %134 = call () -> i32 @getch();
    i32 %135 = add i32 %134, i32 -48;
    i1 %136 = icmp ugt i32 %135, i32 9;
    i1 %137 = icmp eq i32 %132, i32 45;
    i32 %138 = select i1 %137 ? i32 1 : i32 %133;
    cbr i1 %136(prob = 0.984615), ^while.body11, ^146;
  ^b5:
    i32 %139 = phi [^112, i32 0] [^while.body10, i32 %131];
    i32 %140 = call () -> i32 @getch();
    i32 %141 = add i32 %140, i32 -48;
    i1 %142 = icmp ugt i32 %141, i32 9;
    i1 %143 = icmp neq i32 %114, i32 0;
    i32 %144 = neg i32 %139;
    i32 %145 = select i1 %143 ? i32 %144 : i32 %139;
    cbr i1 %142(prob = 0.984615), ^while.body13, ^173;
  ^146:
    i32 %147 = phi [^while.body8, i32 %109] [^while.body11, i32 %134];
    i32 %148 = phi [^while.body8, i32 0] [^while.body11, i32 %138];
    i32 %149 = add i32 %147, i32 -48;
    i1 %150 = icmp ult i32 %149, i32 10;
    cbr i1 %150(prob = 0.984615), ^while.body12, ^b6;
  ^while.body12:
    i32 %151 = phi [^146, i32 %147] [^while.body12, i32 %153];
    i32 %152 = phi [^146, i32 0] [^while.body12, i32 %158];
    i32 %153 = call () -> i32 @getch();
    i32 %154 = add i32 %153, i32 -48;
    i1 %155 = icmp ult i32 %154, i32 10;
    i32 %156 = mul i32 %152, i32 10;
    i32 %157 = add i32 %156, i32 -48;
    i32 %158 = add i32 %151, i32 %157;
    cbr i1 %155(prob = 0.984615), ^while.body12, ^b6;
  ^while.body13:
    i32 %159 = phi [^b5, i32 %140] [^while.body13, i32 %161];
    i32 %160 = phi [^b5, i32 0] [^while.body13, i32 %165];
    i32 %161 = call () -> i32 @getch();
    i32 %162 = add i32 %161, i32 -48;
    i1 %163 = icmp ugt i32 %162, i32 9;
    i1 %164 = icmp eq i32 %159, i32 45;
    i32 %165 = select i1 %164 ? i32 1 : i32 %160;
    cbr i1 %163(prob = 0.984615), ^while.body13, ^173;
  ^b6:
    i32 %166 = phi [^146, i32 0] [^while.body12, i32 %158];
    i32 %167 = call () -> i32 @getch();
    i32 %168 = add i32 %167, i32 -48;
    i1 %169 = icmp ugt i32 %168, i32 9;
    i1 %170 = icmp neq i32 %148, i32 0;
    i32 %171 = neg i32 %166;
    i32 %172 = select i1 %170 ? i32 %171 : i32 %166;
    cbr i1 %169(prob = 0.984615), ^while.body15, ^206;
  ^173:
    i32 %174 = phi [^b5, i32 %140] [^while.body13, i32 %161];
    i32 %175 = phi [^b5, i32 0] [^while.body13, i32 %165];
    i32 %176 = add i32 %174, i32 -48;
    i1 %177 = icmp ult i32 %176, i32 10;
    cbr i1 %177(prob = 0.984615), ^while.body14, ^b7;
  ^while.body14:
    i32 %178 = phi [^173, i32 %174] [^while.body14, i32 %180];
    i32 %179 = phi [^173, i32 0] [^while.body14, i32 %185];
    i32 %180 = call () -> i32 @getch();
    i32 %181 = add i32 %180, i32 -48;
    i1 %182 = icmp ult i32 %181, i32 10;
    i32 %183 = mul i32 %179, i32 10;
    i32 %184 = add i32 %183, i32 -48;
    i32 %185 = add i32 %178, i32 %184;
    cbr i1 %182(prob = 0.984615), ^while.body14, ^b7;
  ^while.body15:
    i32 %186 = phi [^b6, i32 %167] [^while.body15, i32 %188];
    i32 %187 = phi [^b6, i32 0] [^while.body15, i32 %192];
    i32 %188 = call () -> i32 @getch();
    i32 %189 = add i32 %188, i32 -48;
    i1 %190 = icmp ugt i32 %189, i32 9;
    i1 %191 = icmp eq i32 %186, i32 45;
    i32 %192 = select i1 %191 ? i32 1 : i32 %187;
    cbr i1 %190(prob = 0.984615), ^while.body15, ^206;
  ^b7:
    i32 %193 = phi [^173, i32 0] [^while.body14, i32 %185];
    i1 %194 = icmp neq i32 %175, i32 0;
    i32 %195 = neg i32 %193;
    i32 %196 = select i1 %194 ? i32 %195 : i32 %193;
    i32* %197 = getelementptr &([10005 * i32]* %3)[i64 0][i32 %69];
    store i32* %197 with i32 %196;
    [20 * i32]* %198 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %196];
    i32* %199 = getelementptr &([20 * i32]* %198)[i64 0][i64 0];
    i32* %200 = getelementptr &([10005 * i32]* %61)[i64 0][i32 %145];
    i32 %201 = load i32* %200;
    i32* %202 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %69];
    store i32* %202 with i32 %201;
    store i32* %200 with i32 %69;
    store i32* %199 with i32 %145;
    i32 %203 = add i32 %70, i32 1;
    i1 %204 = icmp neq i32 %31, i32 %203;
    i32 %205 = add i32 %69, i32 1;
    cbr i1 %204(prob = 0.984615), ^while.body4, ^b3;
  ^206:
    i32 %207 = phi [^b6, i32 %167] [^while.body15, i32 %188];
    i32 %208 = phi [^b6, i32 0] [^while.body15, i32 %192];
    i32 %209 = add i32 %207, i32 -48;
    i1 %210 = icmp ult i32 %209, i32 10;
    cbr i1 %210(prob = 0.984615), ^while.body16, ^b8;
  ^while.body16:
    i32 %211 = phi [^206, i32 %207] [^while.body16, i32 %213];
    i32 %212 = phi [^206, i32 0] [^while.body16, i32 %218];
    i32 %213 = call () -> i32 @getch();
    i32 %214 = add i32 %213, i32 -48;
    i1 %215 = icmp ult i32 %214, i32 10;
    i32 %216 = mul i32 %212, i32 10;
    i32 %217 = add i32 %216, i32 -48;
    i32 %218 = add i32 %211, i32 %217;
    cbr i1 %215(prob = 0.984615), ^while.body16, ^b8;
  ^b8:
    i32 %219 = phi [^206, i32 0] [^while.body16, i32 %218];
    i1 %220 = icmp neq i32 %208, i32 0;
    i32 %221 = neg i32 %219;
    i32 %222 = select i1 %220 ? i32 %221 : i32 %219;
    i32* %223 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %222];
    i32* %224 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %172];
    i32 %225 = load i32* %224;
    i32 %226 = load i32* %223;
    i1 %227 = icmp slt i32 %225, i32 %226;
    i32 %228 = select i1 %227 ? i32 %222 : i32 %172;
    i32* %229 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %228];
    i32 %230 = load i32* %229;
    i32 %231 = select i1 %227 ? i32 %172 : i32 %222;
    i32* %232 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %231];
    i32 %233 = load i32* %232;
    i1 %234 = icmp sgt i32 %230, i32 %233;
    cbr i1 %234(prob = 0.984615), ^while.body17, ^b9;
  ^while.body17:
    i32 %235 = phi [^b8, i32 %228] [^b13, i32 %432];
    i32 %236 = phi [^b8, i32 19] [^b13, i32 %436];
    [20 * i32]* %237 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %235];
    i32* %238 = getelementptr &([20 * i32]* %237)[i64 0][i32 %236];
    i32 %239 = load i32* %238;
    i1 %240 = icmp neq i32 %239, i32 0;
    cbr i1 %240(prob = 0.5), ^b10, ^b13;
  ^b9:
    i32 %241 = phi [^b8, i32 %228] [^b13, i32 %432];
    i1 %242 = icmp eq i32 %231, i32 %241;
    cbr i1 %242(prob = 0.5), ^b12, ^b11;
  ^b10:
    i32* %243 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %239];
    i32 %244 = load i32* %243;
    i1 %245 = icmp sle i32 %233, i32 %244;
    i32 %246 = select i1 %245 ? i32 %239 : i32 %235;
    ubr ^b13;
  ^b11:
    [20 * i32]* %247 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %241];
    i32* %248 = getelementptr &([20 * i32]* %247)[i64 0][i64 19];
    i32 %249 = load i32* %248;
    [20 * i32]* %250 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %231];
    i32* %251 = getelementptr &([20 * i32]* %250)[i64 0][i64 19];
    i32 %252 = load i32* %251;
    i1 %253 = icmp neq i32 %249, i32 %252;
    i32 %254 = select i1 %253 ? i32 %249 : i32 %241;
    [20 * i32]* %255 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %254];
    i32* %256 = getelementptr &([20 * i32]* %255)[i64 0][i64 18];
    i32 %257 = load i32* %256;
    i32 %258 = select i1 %253 ? i32 %252 : i32 %231;
    [20 * i32]* %259 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %258];
    i32* %260 = getelementptr &([20 * i32]* %259)[i64 0][i64 18];
    i32 %261 = load i32* %260;
    i1 %262 = icmp neq i32 %257, i32 %261;
    i32 %263 = select i1 %262 ? i32 %257 : i32 %254;
    [20 * i32]* %264 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %263];
    i32* %265 = getelementptr &([20 * i32]* %264)[i64 0][i64 17];
    i32 %266 = load i32* %265;
    i32 %267 = select i1 %262 ? i32 %261 : i32 %258;
    [20 * i32]* %268 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %267];
    i32* %269 = getelementptr &([20 * i32]* %268)[i64 0][i64 17];
    i32 %270 = load i32* %269;
    i1 %271 = icmp neq i32 %266, i32 %270;
    i32 %272 = select i1 %271 ? i32 %266 : i32 %263;
    [20 * i32]* %273 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %272];
    i32* %274 = getelementptr &([20 * i32]* %273)[i64 0][i64 16];
    i32 %275 = load i32* %274;
    i32 %276 = select i1 %271 ? i32 %270 : i32 %267;
    [20 * i32]* %277 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %276];
    i32* %278 = getelementptr &([20 * i32]* %277)[i64 0][i64 16];
    i32 %279 = load i32* %278;
    i1 %280 = icmp neq i32 %275, i32 %279;
    i32 %281 = select i1 %280 ? i32 %275 : i32 %272;
    [20 * i32]* %282 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %281];
    i32* %283 = getelementptr &([20 * i32]* %282)[i64 0][i64 15];
    i32 %284 = load i32* %283;
    i32 %285 = select i1 %280 ? i32 %279 : i32 %276;
    [20 * i32]* %286 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %285];
    i32* %287 = getelementptr &([20 * i32]* %286)[i64 0][i64 15];
    i32 %288 = load i32* %287;
    i1 %289 = icmp neq i32 %284, i32 %288;
    i32 %290 = select i1 %289 ? i32 %284 : i32 %281;
    [20 * i32]* %291 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %290];
    i32* %292 = getelementptr &([20 * i32]* %291)[i64 0][i64 14];
    i32 %293 = load i32* %292;
    i32 %294 = select i1 %289 ? i32 %288 : i32 %285;
    [20 * i32]* %295 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %294];
    i32* %296 = getelementptr &([20 * i32]* %295)[i64 0][i64 14];
    i32 %297 = load i32* %296;
    i1 %298 = icmp neq i32 %293, i32 %297;
    i32 %299 = select i1 %298 ? i32 %293 : i32 %290;
    [20 * i32]* %300 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %299];
    i32* %301 = getelementptr &([20 * i32]* %300)[i64 0][i64 13];
    i32 %302 = load i32* %301;
    i32 %303 = select i1 %298 ? i32 %297 : i32 %294;
    [20 * i32]* %304 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %303];
    i32* %305 = getelementptr &([20 * i32]* %304)[i64 0][i64 13];
    i32 %306 = load i32* %305;
    i1 %307 = icmp neq i32 %302, i32 %306;
    i32 %308 = select i1 %307 ? i32 %302 : i32 %299;
    [20 * i32]* %309 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %308];
    i32* %310 = getelementptr &([20 * i32]* %309)[i64 0][i64 12];
    i32 %311 = load i32* %310;
    i32 %312 = select i1 %307 ? i32 %306 : i32 %303;
    [20 * i32]* %313 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %312];
    i32* %314 = getelementptr &([20 * i32]* %313)[i64 0][i64 12];
    i32 %315 = load i32* %314;
    i1 %316 = icmp neq i32 %311, i32 %315;
    i32 %317 = select i1 %316 ? i32 %311 : i32 %308;
    [20 * i32]* %318 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %317];
    i32* %319 = getelementptr &([20 * i32]* %318)[i64 0][i64 11];
    i32 %320 = load i32* %319;
    i32 %321 = select i1 %316 ? i32 %315 : i32 %312;
    [20 * i32]* %322 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %321];
    i32* %323 = getelementptr &([20 * i32]* %322)[i64 0][i64 11];
    i32 %324 = load i32* %323;
    i1 %325 = icmp neq i32 %320, i32 %324;
    i32 %326 = select i1 %325 ? i32 %320 : i32 %317;
    [20 * i32]* %327 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %326];
    i32* %328 = getelementptr &([20 * i32]* %327)[i64 0][i64 10];
    i32 %329 = load i32* %328;
    i32 %330 = select i1 %325 ? i32 %324 : i32 %321;
    [20 * i32]* %331 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %330];
    i32* %332 = getelementptr &([20 * i32]* %331)[i64 0][i64 10];
    i32 %333 = load i32* %332;
    i1 %334 = icmp neq i32 %329, i32 %333;
    i32 %335 = select i1 %334 ? i32 %329 : i32 %326;
    [20 * i32]* %336 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %335];
    i32* %337 = getelementptr &([20 * i32]* %336)[i64 0][i64 9];
    i32 %338 = load i32* %337;
    i32 %339 = select i1 %334 ? i32 %333 : i32 %330;
    [20 * i32]* %340 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %339];
    i32* %341 = getelementptr &([20 * i32]* %340)[i64 0][i64 9];
    i32 %342 = load i32* %341;
    i1 %343 = icmp neq i32 %338, i32 %342;
    i32 %344 = select i1 %343 ? i32 %338 : i32 %335;
    [20 * i32]* %345 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %344];
    i32* %346 = getelementptr &([20 * i32]* %345)[i64 0][i64 8];
    i32 %347 = load i32* %346;
    i32 %348 = select i1 %343 ? i32 %342 : i32 %339;
    [20 * i32]* %349 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %348];
    i32* %350 = getelementptr &([20 * i32]* %349)[i64 0][i64 8];
    i32 %351 = load i32* %350;
    i1 %352 = icmp neq i32 %347, i32 %351;
    i32 %353 = select i1 %352 ? i32 %347 : i32 %344;
    [20 * i32]* %354 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %353];
    i32* %355 = getelementptr &([20 * i32]* %354)[i64 0][i64 7];
    i32 %356 = load i32* %355;
    i32 %357 = select i1 %352 ? i32 %351 : i32 %348;
    [20 * i32]* %358 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %357];
    i32* %359 = getelementptr &([20 * i32]* %358)[i64 0][i64 7];
    i32 %360 = load i32* %359;
    i1 %361 = icmp neq i32 %356, i32 %360;
    i32 %362 = select i1 %361 ? i32 %356 : i32 %353;
    [20 * i32]* %363 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %362];
    i32* %364 = getelementptr &([20 * i32]* %363)[i64 0][i64 6];
    i32 %365 = load i32* %364;
    i32 %366 = select i1 %361 ? i32 %360 : i32 %357;
    [20 * i32]* %367 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %366];
    i32* %368 = getelementptr &([20 * i32]* %367)[i64 0][i64 6];
    i32 %369 = load i32* %368;
    i1 %370 = icmp neq i32 %365, i32 %369;
    i32 %371 = select i1 %370 ? i32 %365 : i32 %362;
    [20 * i32]* %372 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %371];
    i32* %373 = getelementptr &([20 * i32]* %372)[i64 0][i64 5];
    i32 %374 = load i32* %373;
    i32 %375 = select i1 %370 ? i32 %369 : i32 %366;
    [20 * i32]* %376 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %375];
    i32* %377 = getelementptr &([20 * i32]* %376)[i64 0][i64 5];
    i32 %378 = load i32* %377;
    i1 %379 = icmp neq i32 %374, i32 %378;
    i32 %380 = select i1 %379 ? i32 %374 : i32 %371;
    [20 * i32]* %381 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %380];
    i32* %382 = getelementptr &([20 * i32]* %381)[i64 0][i64 4];
    i32 %383 = load i32* %382;
    i32 %384 = select i1 %379 ? i32 %378 : i32 %375;
    [20 * i32]* %385 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %384];
    i32* %386 = getelementptr &([20 * i32]* %385)[i64 0][i64 4];
    i32 %387 = load i32* %386;
    i1 %388 = icmp neq i32 %383, i32 %387;
    i32 %389 = select i1 %388 ? i32 %383 : i32 %380;
    [20 * i32]* %390 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %389];
    i32* %391 = getelementptr &([20 * i32]* %390)[i64 0][i64 3];
    i32 %392 = load i32* %391;
    i32 %393 = select i1 %388 ? i32 %387 : i32 %384;
    [20 * i32]* %394 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %393];
    i32* %395 = getelementptr &([20 * i32]* %394)[i64 0][i64 3];
    i32 %396 = load i32* %395;
    i1 %397 = icmp neq i32 %392, i32 %396;
    i32 %398 = select i1 %397 ? i32 %392 : i32 %389;
    [20 * i32]* %399 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %398];
    i32* %400 = getelementptr &([20 * i32]* %399)[i64 0][i64 2];
    i32 %401 = load i32* %400;
    i32 %402 = select i1 %397 ? i32 %396 : i32 %393;
    [20 * i32]* %403 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %402];
    i32* %404 = getelementptr &([20 * i32]* %403)[i64 0][i64 2];
    i32 %405 = load i32* %404;
    i1 %406 = icmp neq i32 %401, i32 %405;
    i32 %407 = select i1 %406 ? i32 %401 : i32 %398;
    [20 * i32]* %408 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %407];
    i32* %409 = getelementptr &([20 * i32]* %408)[i64 0][i64 1];
    i32 %410 = load i32* %409;
    i32 %411 = select i1 %406 ? i32 %405 : i32 %402;
    [20 * i32]* %412 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %411];
    i32* %413 = getelementptr &([20 * i32]* %412)[i64 0][i64 1];
    i32 %414 = load i32* %413;
    i1 %415 = icmp neq i32 %410, i32 %414;
    i32 %416 = select i1 %415 ? i32 %410 : i32 %407;
    [20 * i32]* %417 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %416];
    i32* %418 = getelementptr &([20 * i32]* %417)[i64 0][i64 0];
    i32 %419 = load i32* %418;
    i32 %420 = select i1 %415 ? i32 %414 : i32 %411;
    [20 * i32]* %421 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %420];
    i32* %422 = getelementptr &([20 * i32]* %421)[i64 0][i64 0];
    i32 %423 = load i32* %422;
    i1 %424 = icmp neq i32 %419, i32 %423;
    i32 %425 = select i1 %424 ? i32 %419 : i32 %416;
    [20 * i32]* %426 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %425];
    i32* %427 = getelementptr &([20 * i32]* %426)[i64 0][i64 0];
    i32 %428 = load i32* %427;
    ubr ^b12;
  ^b12:
    i32 %429 = phi [^b9, i32 %241] [^b11, i32 %428];
    call (i32) -> void @putint(i32 %429);
    call (i32) -> void @putch(i32 10);
    i32 %430 = add i32 %108, i32 -1;
    i1 %431 = icmp neq i32 %430, i32 0;
    cbr i1 %431(prob = 0.984615), ^while.body8, ^b4;
  ^b13:
    i32 %432 = phi [^while.body17, i32 %235] [^b10, i32 %246];
    i32* %433 = getelementptr &([10005 * i32]* %58)[i64 0][i32 %432];
    i32 %434 = load i32* %433;
    i1 %435 = icmp slt i32 %233, i32 %434;
    i32 %436 = add i32 %236, i32 -1;
    cbr i1 %435(prob = 0.984615), ^while.body17, ^b9;
}
