internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = scmp neq i32 %5, i32 0;
    [10005 * i32]* %7 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    i32 %9 = add i32 %d, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %10, i32 1;
    i32* %17 = getelementptr &([20 * i32]* %3)[i64 0][i32 %16];
    store i32* %17 with i32 %15;
    i1 %18 = scmp neq i32 %15, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = scmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %9);
    i32* %26 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    [10005 * i32]* %1 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %2 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    [10005 * i32]* %3 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    [10005 * [20 * i32]]* %4 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [10005 * i32]* %5 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %11];
    i1 %8 = scmp lt i32 %7, i32 48;
    cbr i1 %8(prob = 0.5), ^b1, ^b;
  ^b:
    i1 %9 = scmp gt i32 %7, i32 57;
    ubr ^b1;
  ^b1:
    i1 %10 = phi [^while.header, i1 true] [^b, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32 %11 = call () -> i32 @getch();
    i1 %12 = scmp eq i32 %7, i32 45;
    i32 %13 = select i1 %12 ? i32 1 : i32 %6;
    ubr ^while.header;
  ^while.header1:
    i32 %14 = phi [^b1, i32 0] [^while.body1, i32 %22];
    i32 %15 = phi [^b1, i32 %7] [^while.body1, i32 %19];
    i1 %16 = scmp gt i32 %15, i32 47;
    cbr i1 %16(prob = 0.5), ^b2, ^b3;
  ^b2:
    i1 %17 = scmp le i32 %15, i32 57;
    ubr ^b3;
  ^b3:
    i1 %18 = phi [^while.header1, i1 false] [^b2, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body1, ^b4;
  ^while.body1:
    i32 %19 = call () -> i32 @getch();
    i32 %20 = mul i32 %14, i32 10;
    i32 %21 = add i32 %15, i32 -48;
    i32 %22 = add i32 %21, i32 %20;
    ubr ^while.header1;
  ^b4:
    i1 %23 = scmp neq i32 %6, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then, ^b5;
  ^if.then:
    i32 %24 = neg i32 %14;
    ubr ^b5;
  ^b5:
    i32 %25 = phi [^b4, i32 %14] [^if.then, i32 %24];
    i32 %26 = call () -> i32 @getch();
    ubr ^while.header2;
  ^while.header2:
    i32 %27 = phi [^b5, i32 0] [^while.body2, i32 %34];
    i32 %28 = phi [^b5, i32 %26] [^while.body2, i32 %32];
    i1 %29 = scmp lt i32 %28, i32 48;
    cbr i1 %29(prob = 0.5), ^b7, ^b6;
  ^b6:
    i1 %30 = scmp gt i32 %28, i32 57;
    ubr ^b7;
  ^b7:
    i1 %31 = phi [^while.header2, i1 true] [^b6, i1 %30];
    cbr i1 %31(prob = 0.97), ^while.body2, ^while.header3;
  ^while.body2:
    i32 %32 = call () -> i32 @getch();
    i1 %33 = scmp eq i32 %28, i32 45;
    i32 %34 = select i1 %33 ? i32 1 : i32 %27;
    ubr ^while.header2;
  ^while.header3:
    i32 %35 = phi [^b7, i32 0] [^while.body3, i32 %43];
    i32 %36 = phi [^b7, i32 %28] [^while.body3, i32 %40];
    i1 %37 = scmp gt i32 %36, i32 47;
    cbr i1 %37(prob = 0.5), ^b8, ^b9;
  ^b8:
    i1 %38 = scmp le i32 %36, i32 57;
    ubr ^b9;
  ^b9:
    i1 %39 = phi [^while.header3, i1 false] [^b8, i1 %38];
    cbr i1 %39(prob = 0.97), ^while.body3, ^b10;
  ^while.body3:
    i32 %40 = call () -> i32 @getch();
    i32 %41 = mul i32 %35, i32 10;
    i32 %42 = add i32 %36, i32 -48;
    i32 %43 = add i32 %42, i32 %41;
    ubr ^while.header3;
  ^b10:
    i1 %44 = scmp neq i32 %27, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b11;
  ^if.then1:
    i32 %45 = neg i32 %35;
    ubr ^b11;
  ^b11:
    i32 %46 = phi [^b10, i32 %35] [^if.then1, i32 %45];
    i32* %47 = getelementptr &([10005 * i32]* %5)[i64 0][i64 0];
    store i32* %47 with i32 1061109567;
    i1 %48 = scmp gt i32 %25, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %49 = phi [^b11, i32 1] [^while.body4, i32 %51];
    i32* %50 = getelementptr &([10005 * i32]* %3)[i64 0][i32 %49];
    store i32* %50 with i32 -1;
    i32 %51 = add i32 %49, i32 1;
    i1 %52 = scmp le i32 %51, i32 %25;
    cbr i1 %52(prob = 0.97), ^while.body4, ^entry1;
  ^entry1:
    i1 %53 = scmp neq i32 %25, i32 1;
    cbr i1 %53(prob = 0.97), ^while.body5, ^b12;
  ^while.body5:
    i32 %54 = phi [^entry1, i32 0] [^b35, i32 %147];
    i32 %55 = phi [^entry1, i32 1] [^b35, i32 %145];
    i32 %56 = call () -> i32 @getch();
    ubr ^while.header4;
  ^b12:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %57 = scmp neq i32 %46, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body6, ^b13;
  ^while.body6:
    i32 %58 = phi [^b12, i32 %46] [^b40, i32 %175];
    i32 %59 = call () -> i32 @getch();
    ubr ^while.header5;
  ^while.header4:
    i32 %60 = phi [^while.body5, i32 0] [^while.body7, i32 %70];
    i32 %61 = phi [^while.body5, i32 %56] [^while.body7, i32 %68];
    i1 %62 = scmp lt i32 %61, i32 48;
    cbr i1 %62(prob = 0.5), ^b15, ^b14;
  ^b13:
    ret i32 0;
  ^b14:
    i1 %63 = scmp gt i32 %61, i32 57;
    ubr ^b15;
  ^b15:
    i1 %64 = phi [^while.header4, i1 true] [^b14, i1 %63];
    cbr i1 %64(prob = 0.97), ^while.body7, ^while.header6;
  ^while.header5:
    i32 %65 = phi [^while.body6, i32 0] [^while.body8, i32 %79];
    i32 %66 = phi [^while.body6, i32 %59] [^while.body8, i32 %77];
    i1 %67 = scmp lt i32 %66, i32 48;
    cbr i1 %67(prob = 0.5), ^b17, ^b16;
  ^while.body7:
    i32 %68 = call () -> i32 @getch();
    i1 %69 = scmp eq i32 %61, i32 45;
    i32 %70 = select i1 %69 ? i32 1 : i32 %60;
    ubr ^while.header4;
  ^b16:
    i1 %71 = scmp gt i32 %66, i32 57;
    ubr ^b17;
  ^while.header6:
    i32 %72 = phi [^b15, i32 0] [^while.body9, i32 %87];
    i32 %73 = phi [^b15, i32 %61] [^while.body9, i32 %84];
    i1 %74 = scmp gt i32 %73, i32 47;
    cbr i1 %74(prob = 0.5), ^b18, ^b19;
  ^b17:
    i1 %75 = phi [^while.header5, i1 true] [^b16, i1 %71];
    cbr i1 %75(prob = 0.97), ^while.body8, ^while.header7;
  ^b18:
    i1 %76 = scmp le i32 %73, i32 57;
    ubr ^b19;
  ^while.body8:
    i32 %77 = call () -> i32 @getch();
    i1 %78 = scmp eq i32 %66, i32 45;
    i32 %79 = select i1 %78 ? i32 1 : i32 %65;
    ubr ^while.header5;
  ^b19:
    i1 %80 = phi [^while.header6, i1 false] [^b18, i1 %76];
    cbr i1 %80(prob = 0.97), ^while.body9, ^b21;
  ^while.header7:
    i32 %81 = phi [^b17, i32 0] [^while.body10, i32 %95];
    i32 %82 = phi [^b17, i32 %66] [^while.body10, i32 %92];
    i1 %83 = scmp gt i32 %82, i32 47;
    cbr i1 %83(prob = 0.5), ^b20, ^b22;
  ^while.body9:
    i32 %84 = call () -> i32 @getch();
    i32 %85 = mul i32 %72, i32 10;
    i32 %86 = add i32 %73, i32 -48;
    i32 %87 = add i32 %86, i32 %85;
    ubr ^while.header6;
  ^b20:
    i1 %88 = scmp le i32 %82, i32 57;
    ubr ^b22;
  ^b21:
    i1 %89 = scmp neq i32 %60, i32 0;
    cbr i1 %89(prob = 0.5), ^if.then2, ^b23;
  ^b22:
    i1 %90 = phi [^while.header7, i1 false] [^b20, i1 %88];
    cbr i1 %90(prob = 0.97), ^while.body10, ^b24;
  ^if.then2:
    i32 %91 = neg i32 %72;
    ubr ^b23;
  ^while.body10:
    i32 %92 = call () -> i32 @getch();
    i32 %93 = mul i32 %81, i32 10;
    i32 %94 = add i32 %82, i32 -48;
    i32 %95 = add i32 %94, i32 %93;
    ubr ^while.header7;
  ^b23:
    i32 %96 = phi [^b21, i32 %72] [^if.then2, i32 %91];
    i32 %97 = call () -> i32 @getch();
    ubr ^while.header8;
  ^b24:
    i1 %98 = scmp neq i32 %65, i32 0;
    cbr i1 %98(prob = 0.5), ^if.then3, ^b25;
  ^if.then3:
    i32 %99 = neg i32 %81;
    ubr ^b25;
  ^b25:
    i32 %100 = phi [^b24, i32 %81] [^if.then3, i32 %99];
    i32 %101 = call () -> i32 @getch();
    ubr ^while.header9;
  ^while.header8:
    i32 %102 = phi [^b23, i32 0] [^while.body11, i32 %112];
    i32 %103 = phi [^b23, i32 %97] [^while.body11, i32 %110];
    i1 %104 = scmp lt i32 %103, i32 48;
    cbr i1 %104(prob = 0.5), ^b27, ^b26;
  ^b26:
    i1 %105 = scmp gt i32 %103, i32 57;
    ubr ^b27;
  ^b27:
    i1 %106 = phi [^while.header8, i1 true] [^b26, i1 %105];
    cbr i1 %106(prob = 0.97), ^while.body11, ^while.header10;
  ^while.header9:
    i32 %107 = phi [^b25, i32 0] [^while.body12, i32 %121];
    i32 %108 = phi [^b25, i32 %101] [^while.body12, i32 %119];
    i1 %109 = scmp lt i32 %108, i32 48;
    cbr i1 %109(prob = 0.5), ^b29, ^b28;
  ^while.body11:
    i32 %110 = call () -> i32 @getch();
    i1 %111 = scmp eq i32 %103, i32 45;
    i32 %112 = select i1 %111 ? i32 1 : i32 %102;
    ubr ^while.header8;
  ^b28:
    i1 %113 = scmp gt i32 %108, i32 57;
    ubr ^b29;
  ^while.header10:
    i32 %114 = phi [^b27, i32 0] [^while.body13, i32 %129];
    i32 %115 = phi [^b27, i32 %103] [^while.body13, i32 %126];
    i1 %116 = scmp gt i32 %115, i32 47;
    cbr i1 %116(prob = 0.5), ^b30, ^b31;
  ^b29:
    i1 %117 = phi [^while.header9, i1 true] [^b28, i1 %113];
    cbr i1 %117(prob = 0.97), ^while.body12, ^while.header11;
  ^b30:
    i1 %118 = scmp le i32 %115, i32 57;
    ubr ^b31;
  ^while.body12:
    i32 %119 = call () -> i32 @getch();
    i1 %120 = scmp eq i32 %108, i32 45;
    i32 %121 = select i1 %120 ? i32 1 : i32 %107;
    ubr ^while.header9;
  ^b31:
    i1 %122 = phi [^while.header10, i1 false] [^b30, i1 %118];
    cbr i1 %122(prob = 0.97), ^while.body13, ^b33;
  ^while.header11:
    i32 %123 = phi [^b29, i32 0] [^while.body14, i32 %137];
    i32 %124 = phi [^b29, i32 %108] [^while.body14, i32 %134];
    i1 %125 = scmp gt i32 %124, i32 47;
    cbr i1 %125(prob = 0.5), ^b32, ^b34;
  ^while.body13:
    i32 %126 = call () -> i32 @getch();
    i32 %127 = mul i32 %114, i32 10;
    i32 %128 = add i32 %115, i32 -48;
    i32 %129 = add i32 %128, i32 %127;
    ubr ^while.header10;
  ^b32:
    i1 %130 = scmp le i32 %124, i32 57;
    ubr ^b34;
  ^b33:
    i1 %131 = scmp neq i32 %102, i32 0;
    cbr i1 %131(prob = 0.5), ^if.then4, ^b35;
  ^b34:
    i1 %132 = phi [^while.header11, i1 false] [^b32, i1 %130];
    cbr i1 %132(prob = 0.97), ^while.body14, ^b36;
  ^if.then4:
    i32 %133 = neg i32 %114;
    ubr ^b35;
  ^while.body14:
    i32 %134 = call () -> i32 @getch();
    i32 %135 = mul i32 %123, i32 10;
    i32 %136 = add i32 %124, i32 -48;
    i32 %137 = add i32 %136, i32 %135;
    ubr ^while.header11;
  ^b35:
    i32 %138 = phi [^b33, i32 %114] [^if.then4, i32 %133];
    i32* %139 = getelementptr &([10005 * i32]* %1)[i64 0][i32 %54];
    store i32* %139 with i32 %138;
    i32* %140 = getelementptr &([10005 * i32]* %3)[i64 0][i32 %96];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([10005 * i32]* %2)[i64 0][i32 %54];
    store i32* %142 with i32 %141;
    [20 * i32]* %143 = getelementptr &([10005 * [20 * i32]]* %4)[i64 0][i32 %138];
    i32* %144 = getelementptr &([20 * i32]* %143)[i64 0][i64 0];
    store i32* %140 with i32 %54;
    store i32* %144 with i32 %96;
    i32 %145 = add i32 %55, i32 1;
    i1 %146 = scmp neq i32 %145, i32 %25;
    i32 %147 = add i32 %54, i32 1;
    cbr i1 %146(prob = 0.97), ^while.body5, ^b12;
  ^b36:
    i1 %148 = scmp neq i32 %107, i32 0;
    cbr i1 %148(prob = 0.5), ^if.then5, ^b37;
  ^if.then5:
    i32 %149 = neg i32 %123;
    ubr ^b37;
  ^b37:
    i32 %150 = phi [^b36, i32 %123] [^if.then5, i32 %149];
    i32* %151 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %100];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %150];
    i32 %154 = load i32* %153;
    i1 %155 = scmp lt i32 %152, i32 %154;
    i32 %156 = select i1 %155 ? i32 %100 : i32 %150;
    i32* %157 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %156];
    i32 %158 = select i1 %155 ? i32 %150 : i32 %100;
    ubr ^while.header12;
  ^while.header12:
    i32 %159 = phi [^b37, i32 19] [^b42, i32 %184];
    i32 %160 = phi [^b37, i32 %158] [^b42, i32 %183];
    i32* %161 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %160];
    i32 %162 = load i32* %161;
    i32 %163 = load i32* %157;
    i1 %164 = scmp gt i32 %162, i32 %163;
    cbr i1 %164(prob = 0.97), ^while.body15, ^b38;
  ^while.body15:
    [20 * i32]* %165 = getelementptr &([10005 * [20 * i32]]* %4)[i64 0][i32 %160];
    i32* %166 = getelementptr &([20 * i32]* %165)[i64 0][i32 %159];
    i32 %167 = load i32* %166;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^b39, ^b41;
  ^b38:
    i1 %169 = scmp eq i32 %160, i32 %156;
    cbr i1 %169(prob = 0.5), ^b40, ^while.header13;
  ^b39:
    i32* %170 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %167];
    i32 %171 = load i32* %170;
    i32 %172 = load i32* %157;
    i1 %173 = scmp ge i32 %171, i32 %172;
    ubr ^b41;
  ^b40:
    i32 %174 = phi [^b38, i32 %160] [^b43, i32 %187];
    call (i32) -> void @putint(i32 %174);
    call (i32) -> void @putch(i32 10);
    i32 %175 = add i32 %58, i32 -1;
    i1 %176 = scmp neq i32 %175, i32 0;
    cbr i1 %176(prob = 0.97), ^while.body6, ^b13;
  ^b41:
    i1 %177 = phi [^while.body15, i1 false] [^b39, i1 %173];
    cbr i1 %177(prob = 0.5), ^if.then6, ^b42;
  ^while.header13:
    i32 %178 = phi [^b38, i32 %156] [^b44, i32 %196];
    i32 %179 = phi [^b38, i32 19] [^b44, i32 %198];
    i32 %180 = phi [^b38, i32 %160] [^b44, i32 %197];
    i1 %181 = scmp gt i32 %179, i32 -1;
    cbr i1 %181(prob = 0.97), ^while.body16, ^b43;
  ^if.then6:
    i32 %182 = load i32* %166;
    ubr ^b42;
  ^b42:
    i32 %183 = phi [^b41, i32 %160] [^if.then6, i32 %182];
    i32 %184 = add i32 %159, i32 -1;
    ubr ^while.header12;
  ^b43:
    [20 * i32]* %185 = getelementptr &([10005 * [20 * i32]]* %4)[i64 0][i32 %180];
    i32* %186 = getelementptr &([20 * i32]* %185)[i64 0][i64 0];
    i32 %187 = load i32* %186;
    ubr ^b40;
  ^while.body16:
    [20 * i32]* %188 = getelementptr &([10005 * [20 * i32]]* %4)[i64 0][i32 %180];
    i32* %189 = getelementptr &([20 * i32]* %188)[i64 0][i32 %179];
    i32 %190 = load i32* %189;
    [20 * i32]* %191 = getelementptr &([10005 * [20 * i32]]* %4)[i64 0][i32 %178];
    i32* %192 = getelementptr &([20 * i32]* %191)[i64 0][i32 %179];
    i32 %193 = load i32* %192;
    i1 %194 = scmp neq i32 %190, i32 %193;
    cbr i1 %194(prob = 0.5), ^if.then7, ^b44;
  ^if.then7:
    i32 %195 = load i32* %189;
    ubr ^b44;
  ^b44:
    i32 %196 = phi [^while.body16, i32 %178] [^if.then7, i32 %193];
    i32 %197 = phi [^while.body16, i32 %180] [^if.then7, i32 %195];
    i32 %198 = add i32 %179, i32 -1;
    ubr ^while.header13;
}
