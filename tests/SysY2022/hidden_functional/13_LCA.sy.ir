internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d) -> void {
^entry:
    i32* %0 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %x];
    store i32* %0 with i32 %d;
    [20 * i32]* %1 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %x];
    i32* %2 = getelementptr &([20 * i32]* %1)[i64 0][i64 0];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i32 %5 = add i32 %d, i32 1;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %7 = add i32 %6, i32 1;
    i32* %8 = getelementptr &([20 * i32]* %1)[i64 0][i32 %7];
    i32* %9 = getelementptr &([20 * i32]* %1)[i64 0][i32 %6];
    i32 %10 = load i32* %9;
    [20 * i32]* %11 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %10];
    i32* %12 = getelementptr &([20 * i32]* %11)[i64 0][i32 %6];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^b:
    i32* %15 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %x];
    i32 %16 = load i32* %15;
    i1 %17 = scmp neq i32 %16, i32 -1;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %18 = phi [^b, i32 %16] [^while.body1, i32 %22];
    i32* %19 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    call (i32, i32) -> void @tree(i32 %20, i32 %5);
    i32* %21 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = scmp neq i32 %22, i32 -1;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^b, i32 0] [^b2, i32 %5];
    i32 %3 = phi [^entry, i32 %0] [^b, i32 %0] [^b2, i32 %6];
    i1 %4 = scmp eq i32 %3, i32 45;
    i32 %5 = select i1 %4 ? i32 1 : i32 %2;
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    cbr i1 %7(prob = 0.5), ^b2, ^b1;
^b:
    i1 %8 = scmp gt i32 %0, i32 57;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.guard;
^b1:
    i1 %9 = scmp gt i32 %6, i32 57;
    ubr ^b2;
^b2:
    i1 %10 = phi [^while.body, i1 true] [^b1, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.guard;
^while.guard:
    i32 %11 = phi [^b, i32 0] [^b2, i32 %5];
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %6];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %14 = scmp lt i32 %12, i32 58;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b4;
^b4:
    i32 %15 = phi [^while.guard, i32 0] [^b3, i32 0] [^b7, i32 %22];
    i1 %16 = scmp neq i32 %11, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %17 = neg i32 %15;
    ubr ^b5;
^while.body1:
    i32 %18 = phi [^b3, i32 %12] [^b7, i32 %23];
    i32 %19 = phi [^b3, i32 0] [^b7, i32 %22];
    i32 %20 = mul i32 %19, i32 10;
    i32 %21 = add i32 %18, i32 -48;
    i32 %22 = add i32 %21, i32 %20;
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %23, i32 47;
    cbr i1 %24(prob = 0.5), ^b6, ^b7;
^b5:
    i32 %25 = phi [^b4, i32 %15] [^if.then, i32 %17];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp lt i32 %26, i32 48;
    cbr i1 %27(prob = 0.5), ^while.body2, ^b8;
^b6:
    i1 %28 = scmp le i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %29 = phi [^while.body1, i1 false] [^b6, i1 %28];
    cbr i1 %29(prob = 0.97), ^while.body1, ^b4;
^while.body2:
    i32 %30 = phi [^b5, i32 0] [^b8, i32 0] [^b10, i32 %33];
    i32 %31 = phi [^b5, i32 %26] [^b8, i32 %26] [^b10, i32 %34];
    i1 %32 = scmp eq i32 %31, i32 45;
    i32 %33 = select i1 %32 ? i32 1 : i32 %30;
    i32 %34 = call () -> i32 @getch();
    i1 %35 = scmp lt i32 %34, i32 48;
    cbr i1 %35(prob = 0.5), ^b10, ^b9;
^b8:
    i1 %36 = scmp gt i32 %26, i32 57;
    cbr i1 %36(prob = 0.97), ^while.body2, ^while.guard1;
^b9:
    i1 %37 = scmp gt i32 %34, i32 57;
    ubr ^b10;
^b10:
    i1 %38 = phi [^while.body2, i1 true] [^b9, i1 %37];
    cbr i1 %38(prob = 0.97), ^while.body2, ^while.guard1;
^while.guard1:
    i32 %39 = phi [^b8, i32 0] [^b10, i32 %33];
    i32 %40 = phi [^b8, i32 %26] [^b10, i32 %34];
    i1 %41 = scmp gt i32 %40, i32 47;
    cbr i1 %41(prob = 0.5), ^b11, ^b12;
^b11:
    i1 %42 = scmp lt i32 %40, i32 58;
    cbr i1 %42(prob = 0.97), ^while.body3, ^b12;
^b12:
    i32 %43 = phi [^while.guard1, i32 0] [^b11, i32 0] [^b15, i32 %50];
    i1 %44 = scmp neq i32 %39, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b13;
^if.then1:
    i32 %45 = neg i32 %43;
    ubr ^b13;
^while.body3:
    i32 %46 = phi [^b11, i32 %40] [^b15, i32 %51];
    i32 %47 = phi [^b11, i32 0] [^b15, i32 %50];
    i32 %48 = mul i32 %47, i32 10;
    i32 %49 = add i32 %46, i32 -48;
    i32 %50 = add i32 %49, i32 %48;
    i32 %51 = call () -> i32 @getch();
    i1 %52 = scmp gt i32 %51, i32 47;
    cbr i1 %52(prob = 0.5), ^b14, ^b15;
^b13:
    i32 %53 = phi [^b12, i32 %43] [^if.then1, i32 %45];
    i32* %54 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %54 with i32 1061109567;
    i1 %55 = scmp gt i32 %25, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body4, ^entry1;
^b14:
    i1 %56 = scmp le i32 %51, i32 57;
    ubr ^b15;
^b15:
    i1 %57 = phi [^while.body3, i1 false] [^b14, i1 %56];
    cbr i1 %57(prob = 0.97), ^while.body3, ^b12;
^while.body4:
    i32 %58 = phi [^b13, i32 1] [^while.body4, i32 %60];
    i32* %59 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %58];
    store i32* %59 with i32 -1;
    i32 %60 = add i32 %58, i32 1;
    i1 %61 = scmp le i32 %60, i32 %25;
    cbr i1 %61(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    i1 %62 = scmp neq i32 %25, i32 1;
    cbr i1 %62(prob = 0.97), ^while.body5, ^b16;
^while.body5:
    i32 %63 = phi [^entry1, i32 0] [^b43, i32 %168];
    i32 %64 = phi [^entry1, i32 1] [^b43, i32 %171];
    i32 %65 = call () -> i32 @getch();
    i1 %66 = scmp lt i32 %65, i32 48;
    cbr i1 %66(prob = 0.5), ^while.body6, ^b17;
^b16:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %67 = scmp neq i32 %53, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body7, ^b18;
^while.body6:
    i32 %68 = phi [^while.body5, i32 0] [^b17, i32 0] [^b20, i32 %71];
    i32 %69 = phi [^while.body5, i32 %65] [^b17, i32 %65] [^b20, i32 %72];
    i1 %70 = scmp eq i32 %69, i32 45;
    i32 %71 = select i1 %70 ? i32 1 : i32 %68;
    i32 %72 = call () -> i32 @getch();
    i1 %73 = scmp lt i32 %72, i32 48;
    cbr i1 %73(prob = 0.5), ^b20, ^b19;
^while.body7:
    i32 %74 = phi [^b16, i32 %53] [^b52, i32 %213];
    i32 %75 = call () -> i32 @getch();
    i1 %76 = scmp lt i32 %75, i32 48;
    cbr i1 %76(prob = 0.5), ^while.body8, ^b21;
^b17:
    i1 %77 = scmp gt i32 %65, i32 57;
    cbr i1 %77(prob = 0.97), ^while.body6, ^while.guard2;
^b18:
    ret i32 0;
^b19:
    i1 %78 = scmp gt i32 %72, i32 57;
    ubr ^b20;
^b20:
    i1 %79 = phi [^while.body6, i1 true] [^b19, i1 %78];
    cbr i1 %79(prob = 0.97), ^while.body6, ^while.guard2;
^while.body8:
    i32 %80 = phi [^while.body7, i32 0] [^b21, i32 0] [^b23, i32 %83];
    i32 %81 = phi [^while.body7, i32 %75] [^b21, i32 %75] [^b23, i32 %84];
    i1 %82 = scmp eq i32 %81, i32 45;
    i32 %83 = select i1 %82 ? i32 1 : i32 %80;
    i32 %84 = call () -> i32 @getch();
    i1 %85 = scmp lt i32 %84, i32 48;
    cbr i1 %85(prob = 0.5), ^b23, ^b22;
^while.guard2:
    i32 %86 = phi [^b17, i32 0] [^b20, i32 %71];
    i32 %87 = phi [^b17, i32 %65] [^b20, i32 %72];
    i1 %88 = scmp gt i32 %87, i32 47;
    cbr i1 %88(prob = 0.5), ^b24, ^b25;
^b21:
    i1 %89 = scmp gt i32 %75, i32 57;
    cbr i1 %89(prob = 0.97), ^while.body8, ^while.guard3;
^b22:
    i1 %90 = scmp gt i32 %84, i32 57;
    ubr ^b23;
^b23:
    i1 %91 = phi [^while.body8, i1 true] [^b22, i1 %90];
    cbr i1 %91(prob = 0.97), ^while.body8, ^while.guard3;
^b24:
    i1 %92 = scmp lt i32 %87, i32 58;
    cbr i1 %92(prob = 0.97), ^while.body9, ^b25;
^b25:
    i32 %93 = phi [^while.guard2, i32 0] [^b24, i32 0] [^b30, i32 %103];
    i1 %94 = scmp neq i32 %86, i32 0;
    cbr i1 %94(prob = 0.5), ^if.then2, ^b27;
^while.guard3:
    i32 %95 = phi [^b21, i32 0] [^b23, i32 %83];
    i32 %96 = phi [^b21, i32 %75] [^b23, i32 %84];
    i1 %97 = scmp gt i32 %96, i32 47;
    cbr i1 %97(prob = 0.5), ^b26, ^b28;
^if.then2:
    i32 %98 = neg i32 %93;
    ubr ^b27;
^while.body9:
    i32 %99 = phi [^b24, i32 %87] [^b30, i32 %104];
    i32 %100 = phi [^b24, i32 0] [^b30, i32 %103];
    i32 %101 = mul i32 %100, i32 10;
    i32 %102 = add i32 %99, i32 -48;
    i32 %103 = add i32 %102, i32 %101;
    i32 %104 = call () -> i32 @getch();
    i1 %105 = scmp gt i32 %104, i32 47;
    cbr i1 %105(prob = 0.5), ^b29, ^b30;
^b26:
    i1 %106 = scmp lt i32 %96, i32 58;
    cbr i1 %106(prob = 0.97), ^while.body10, ^b28;
^b27:
    i32 %107 = phi [^b25, i32 %93] [^if.then2, i32 %98];
    i32 %108 = call () -> i32 @getch();
    i1 %109 = scmp lt i32 %108, i32 48;
    cbr i1 %109(prob = 0.5), ^while.body11, ^b32;
^b28:
    i32 %110 = phi [^while.guard3, i32 0] [^b26, i32 0] [^b35, i32 %119];
    i1 %111 = scmp neq i32 %95, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then3, ^b31;
^b29:
    i1 %112 = scmp le i32 %104, i32 57;
    ubr ^b30;
^if.then3:
    i32 %113 = neg i32 %110;
    ubr ^b31;
^b30:
    i1 %114 = phi [^while.body9, i1 false] [^b29, i1 %112];
    cbr i1 %114(prob = 0.97), ^while.body9, ^b25;
^while.body10:
    i32 %115 = phi [^b26, i32 %96] [^b35, i32 %120];
    i32 %116 = phi [^b26, i32 0] [^b35, i32 %119];
    i32 %117 = mul i32 %116, i32 10;
    i32 %118 = add i32 %115, i32 -48;
    i32 %119 = add i32 %118, i32 %117;
    i32 %120 = call () -> i32 @getch();
    i1 %121 = scmp gt i32 %120, i32 47;
    cbr i1 %121(prob = 0.5), ^b33, ^b35;
^while.body11:
    i32 %122 = phi [^b27, i32 0] [^b32, i32 0] [^b36, i32 %125];
    i32 %123 = phi [^b27, i32 %108] [^b32, i32 %108] [^b36, i32 %126];
    i1 %124 = scmp eq i32 %123, i32 45;
    i32 %125 = select i1 %124 ? i32 1 : i32 %122;
    i32 %126 = call () -> i32 @getch();
    i1 %127 = scmp lt i32 %126, i32 48;
    cbr i1 %127(prob = 0.5), ^b36, ^b34;
^b31:
    i32 %128 = phi [^b28, i32 %110] [^if.then3, i32 %113];
    i32 %129 = call () -> i32 @getch();
    i1 %130 = scmp lt i32 %129, i32 48;
    cbr i1 %130(prob = 0.5), ^while.body12, ^b37;
^b32:
    i1 %131 = scmp gt i32 %108, i32 57;
    cbr i1 %131(prob = 0.97), ^while.body11, ^while.guard4;
^b33:
    i1 %132 = scmp le i32 %120, i32 57;
    ubr ^b35;
^b34:
    i1 %133 = scmp gt i32 %126, i32 57;
    ubr ^b36;
^b35:
    i1 %134 = phi [^while.body10, i1 false] [^b33, i1 %132];
    cbr i1 %134(prob = 0.97), ^while.body10, ^b28;
^b36:
    i1 %135 = phi [^while.body11, i1 true] [^b34, i1 %133];
    cbr i1 %135(prob = 0.97), ^while.body11, ^while.guard4;
^while.body12:
    i32 %136 = phi [^b31, i32 0] [^b37, i32 0] [^b39, i32 %139];
    i32 %137 = phi [^b31, i32 %129] [^b37, i32 %129] [^b39, i32 %140];
    i1 %138 = scmp eq i32 %137, i32 45;
    i32 %139 = select i1 %138 ? i32 1 : i32 %136;
    i32 %140 = call () -> i32 @getch();
    i1 %141 = scmp lt i32 %140, i32 48;
    cbr i1 %141(prob = 0.5), ^b39, ^b38;
^while.guard4:
    i32 %142 = phi [^b32, i32 0] [^b36, i32 %125];
    i32 %143 = phi [^b32, i32 %108] [^b36, i32 %126];
    i1 %144 = scmp gt i32 %143, i32 47;
    cbr i1 %144(prob = 0.5), ^b40, ^b41;
^b37:
    i1 %145 = scmp gt i32 %129, i32 57;
    cbr i1 %145(prob = 0.97), ^while.body12, ^while.guard5;
^b38:
    i1 %146 = scmp gt i32 %140, i32 57;
    ubr ^b39;
^b39:
    i1 %147 = phi [^while.body12, i1 true] [^b38, i1 %146];
    cbr i1 %147(prob = 0.97), ^while.body12, ^while.guard5;
^b40:
    i1 %148 = scmp lt i32 %143, i32 58;
    cbr i1 %148(prob = 0.97), ^while.body13, ^b41;
^b41:
    i32 %149 = phi [^while.guard4, i32 0] [^b40, i32 0] [^b46, i32 %159];
    i1 %150 = scmp neq i32 %142, i32 0;
    cbr i1 %150(prob = 0.5), ^if.then4, ^b43;
^while.guard5:
    i32 %151 = phi [^b37, i32 0] [^b39, i32 %139];
    i32 %152 = phi [^b37, i32 %129] [^b39, i32 %140];
    i1 %153 = scmp gt i32 %152, i32 47;
    cbr i1 %153(prob = 0.5), ^b42, ^b44;
^if.then4:
    i32 %154 = neg i32 %149;
    ubr ^b43;
^while.body13:
    i32 %155 = phi [^b40, i32 %143] [^b46, i32 %160];
    i32 %156 = phi [^b40, i32 0] [^b46, i32 %159];
    i32 %157 = mul i32 %156, i32 10;
    i32 %158 = add i32 %155, i32 -48;
    i32 %159 = add i32 %158, i32 %157;
    i32 %160 = call () -> i32 @getch();
    i1 %161 = scmp gt i32 %160, i32 47;
    cbr i1 %161(prob = 0.5), ^b45, ^b46;
^b42:
    i1 %162 = scmp lt i32 %152, i32 58;
    cbr i1 %162(prob = 0.97), ^while.body14, ^b44;
^b43:
    i32 %163 = phi [^b41, i32 %149] [^if.then4, i32 %154];
    i32* %164 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %63];
    store i32* %164 with i32 %163;
    i32* %165 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %63];
    i32* %166 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %107];
    i32 %167 = load i32* %166;
    store i32* %165 with i32 %167;
    store i32* %166 with i32 %63;
    i32 %168 = add i32 %63, i32 1;
    [20 * i32]* %169 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %163];
    i32* %170 = getelementptr &([20 * i32]* %169)[i64 0][i64 0];
    store i32* %170 with i32 %107;
    i32 %171 = add i32 %64, i32 1;
    i1 %172 = scmp neq i32 %171, i32 %25;
    cbr i1 %172(prob = 0.97), ^while.body5, ^b16;
^b44:
    i32 %173 = phi [^while.guard5, i32 0] [^b42, i32 0] [^b49, i32 %182];
    i1 %174 = scmp neq i32 %151, i32 0;
    cbr i1 %174(prob = 0.5), ^if.then5, ^b47;
^b45:
    i1 %175 = scmp le i32 %160, i32 57;
    ubr ^b46;
^if.then5:
    i32 %176 = neg i32 %173;
    ubr ^b47;
^b46:
    i1 %177 = phi [^while.body13, i1 false] [^b45, i1 %175];
    cbr i1 %177(prob = 0.97), ^while.body13, ^b41;
^while.body14:
    i32 %178 = phi [^b42, i32 %152] [^b49, i32 %183];
    i32 %179 = phi [^b42, i32 0] [^b49, i32 %182];
    i32 %180 = mul i32 %179, i32 10;
    i32 %181 = add i32 %178, i32 -48;
    i32 %182 = add i32 %181, i32 %180;
    i32 %183 = call () -> i32 @getch();
    i1 %184 = scmp gt i32 %183, i32 47;
    cbr i1 %184(prob = 0.5), ^b48, ^b49;
^b47:
    i32 %185 = phi [^b44, i32 %173] [^if.then5, i32 %176];
    i32* %186 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %128];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %185];
    i32 %189 = load i32* %188;
    i1 %190 = scmp lt i32 %187, i32 %189;
    i32 %191 = select i1 %190 ? i32 %128 : i32 %185;
    i32 %192 = select i1 %190 ? i32 %185 : i32 %128;
    i32* %193 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %191];
    i32 %196 = load i32* %195;
    i1 %197 = scmp gt i32 %194, i32 %196;
    cbr i1 %197(prob = 0.97), ^while.body15, ^b50;
^b48:
    i1 %198 = scmp le i32 %183, i32 57;
    ubr ^b49;
^b49:
    i1 %199 = phi [^while.body14, i1 false] [^b48, i1 %198];
    cbr i1 %199(prob = 0.97), ^while.body14, ^b44;
^while.body15:
    i32 %200 = phi [^b47, i32 19] [^b54, i32 %229];
    i32 %201 = phi [^b47, i32 %192] [^b54, i32 %228];
    [20 * i32]* %202 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %201];
    i32* %203 = getelementptr &([20 * i32]* %202)[i64 0][i32 %200];
    i32 %204 = load i32* %203;
    i1 %205 = scmp neq i32 %204, i32 0;
    cbr i1 %205(prob = 0.5), ^b51, ^b53;
^b50:
    i32 %206 = phi [^b47, i32 %192] [^b54, i32 %228];
    i1 %207 = scmp eq i32 %206, i32 %191;
    cbr i1 %207(prob = 0.5), ^b52, ^while.body16;
^b51:
    i32* %208 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %204];
    i32 %209 = load i32* %208;
    i32 %210 = load i32* %195;
    i1 %211 = scmp ge i32 %209, i32 %210;
    ubr ^b53;
^b52:
    i32 %212 = phi [^b50, i32 %206] [^b56, i32 %240];
    call (i32) -> void @putint(i32 %212);
    call (i32) -> void @putch(i32 10);
    i32 %213 = add i32 %74, i32 -1;
    i1 %214 = scmp neq i32 %213, i32 0;
    cbr i1 %214(prob = 0.97), ^while.body7, ^b18;
^b53:
    i1 %215 = phi [^while.body15, i1 false] [^b51, i1 %211];
    cbr i1 %215(prob = 0.5), ^if.then6, ^b54;
^while.body16:
    i32 %216 = phi [^b50, i32 19] [^b55, i32 %236];
    i32 %217 = phi [^b50, i32 %191] [^b55, i32 %234];
    i32 %218 = phi [^b50, i32 %206] [^b55, i32 %235];
    [20 * i32]* %219 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %218];
    i32* %220 = getelementptr &([20 * i32]* %219)[i64 0][i32 %216];
    i32 %221 = load i32* %220;
    [20 * i32]* %222 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %217];
    i32* %223 = getelementptr &([20 * i32]* %222)[i64 0][i32 %216];
    i32 %224 = load i32* %223;
    i1 %225 = scmp neq i32 %221, i32 %224;
    cbr i1 %225(prob = 0.5), ^if.then7, ^b55;
^if.then6:
    i32 %226 = load i32* %203;
    ubr ^b54;
^if.then7:
    i32 %227 = load i32* %220;
    ubr ^b55;
^b54:
    i32 %228 = phi [^b53, i32 %201] [^if.then6, i32 %226];
    i32 %229 = add i32 %200, i32 -1;
    i32* %230 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %228];
    i32 %231 = load i32* %230;
    i32 %232 = load i32* %195;
    i1 %233 = scmp gt i32 %231, i32 %232;
    cbr i1 %233(prob = 0.97), ^while.body15, ^b50;
^b55:
    i32 %234 = phi [^while.body16, i32 %217] [^if.then7, i32 %224];
    i32 %235 = phi [^while.body16, i32 %218] [^if.then7, i32 %227];
    i32 %236 = add i32 %216, i32 -1;
    i1 %237 = scmp gt i32 %236, i32 -1;
    cbr i1 %237(prob = 0.95), ^while.body16, ^b56;
^b56:
    [20 * i32]* %238 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %235];
    i32* %239 = getelementptr &([20 * i32]* %238)[i64 0][i64 0];
    i32 %240 = load i32* %239;
    ubr ^b52;
}
