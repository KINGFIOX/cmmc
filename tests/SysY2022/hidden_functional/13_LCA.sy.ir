internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d, i32* %0, i32* %1, i32* %2) -> void {
^entry:
    i32* %3 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %x];
    store i32* %3 with i32 %d;
    [20 * i32]* %4 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %x];
    i32 %5 = add i32 %d, i32 1;
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^while.body, i32 %10] [^entry, i32 0];
    i32* %7 = getelementptr &([20 * i32]* %4)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %10 = add i32 %6, i32 1;
    i32* %11 = getelementptr &([20 * i32]* %4)[i64 0][i32 %10];
    [20 * i32]* %12 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %8];
    i32* %13 = getelementptr &([20 * i32]* %12)[i64 0][i32 %6];
    i32 %14 = load i32* %13;
    store i32* %11 with i32 %14;
    ubr ^while.header;
^b:
    i32* %15 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %x];
    i32 %16 = load i32* %15;
    ubr ^while.header1;
^while.header1:
    i32 %17 = phi [^while.body1, i32 %22] [^b, i32 %16];
    i1 %18 = scmp neq i32 %17, i32 -1;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %19 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %17];
    i32 %20 = load i32* %19;
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 %20, i32 %5, i32* %0, i32* %1, i32* %2);
    i32* %21 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %17];
    i32 %22 = load i32* %21;
    ubr ^while.header1;
^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    store i32* %cnt with i32 0;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %10] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %11] [^entry, i32 %0];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^b, i1 %4] [^while.header, i1 true];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %7 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %8 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %9 = scmp gt i32 %8, i32 47;
    cbr i1 %9(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %10 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %12 = scmp le i32 %8, i32 57;
    ubr ^b4;
^b4:
    i1 %13 = phi [^b3, i1 %12] [^while.header1, i1 false];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %14 = mul i32 %7, i32 10;
    i32 %15 = add i32 %14, i32 -48;
    i32 %16 = add i32 %15, i32 %8;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %19 = neg i32 %7;
    ubr ^entry1;
^entry1:
    i32 %20 = phi [^b5, i32 %7] [^if.then1, i32 %19];
    store i32* %n with i32 %20;
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %22 = phi [^b8, i32 %31] [^entry1, i32 0];
    i32 %23 = phi [^b8, i32 %32] [^entry1, i32 %21];
    i1 %24 = scmp lt i32 %23, i32 48;
    cbr i1 %24(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %25 = scmp gt i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %26 = phi [^b6, i1 %25] [^while.header2, i1 true];
    cbr i1 %26(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %27 = scmp eq i32 %23, i32 45;
    cbr i1 %27(prob = 0.5), ^if.then2, ^b8;
^while.header3:
    i32 %28 = phi [^b7, i32 0] [^while.body3, i32 %37];
    i32 %29 = phi [^b7, i32 %23] [^while.body3, i32 %38];
    i1 %30 = scmp gt i32 %29, i32 47;
    cbr i1 %30(prob = 0.5), ^b9, ^b10;
^if.then2:
    ubr ^b8;
^b8:
    i32 %31 = phi [^if.then2, i32 1] [^while.body2, i32 %22];
    i32 %32 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %33 = scmp le i32 %29, i32 57;
    ubr ^b10;
^b10:
    i1 %34 = phi [^b9, i1 %33] [^while.header3, i1 false];
    cbr i1 %34(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %35 = mul i32 %28, i32 10;
    i32 %36 = add i32 %35, i32 -48;
    i32 %37 = add i32 %36, i32 %29;
    i32 %38 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %39 = scmp neq i32 %22, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then3, ^entry2;
^if.then3:
    i32 %40 = neg i32 %28;
    ubr ^entry2;
^entry2:
    i32 %41 = phi [^b11, i32 %28] [^if.then3, i32 %40];
    store i32* %m with i32 %41;
    i32* %42 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %42 with i32 1061109567;
    ubr ^while.header4;
^while.header4:
    i32 %43 = phi [^while.body4, i32 %46] [^entry2, i32 1];
    i1 %44 = scmp le i32 %43, i32 %20;
    cbr i1 %44(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %45 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %43];
    store i32* %45 with i32 -1;
    i32 %46 = add i32 %43, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %47 = phi [^while.body14, i32 %136] [^while.header4, i32 1];
    i32 %48 = phi [^while.body14, i32 %133] [^while.header4, i32 0];
    i1 %49 = scmp neq i32 %47, i32 %20;
    cbr i1 %49(prob = 0.97), ^entry3, ^b12;
^entry3:
    i32 %50 = call () -> i32 @getch();
    ubr ^while.header6;
^b12:
    call (i32, i32, i32*, i32*, i32*) -> void @tree(i32 1, i32 1, i32* %n, i32* %m, i32* %cnt);
    i32 %51 = load i32* %m;
    ubr ^while.header7;
^while.header6:
    i32 %52 = phi [^b16, i32 %67] [^entry3, i32 0];
    i32 %53 = phi [^b16, i32 %68] [^entry3, i32 %50];
    i1 %54 = scmp lt i32 %53, i32 48;
    cbr i1 %54(prob = 0.5), ^b14, ^b13;
^while.header7:
    i32 %55 = phi [^while.body18, i32 %169] [^b12, i32 %51];
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^entry4, ^b15;
^b13:
    i1 %57 = scmp gt i32 %53, i32 57;
    ubr ^b14;
^entry4:
    i32 %58 = call () -> i32 @getch();
    ubr ^while.header8;
^b14:
    i1 %59 = phi [^b13, i1 %57] [^while.header6, i1 true];
    cbr i1 %59(prob = 0.97), ^while.body5, ^while.header9;
^b15:
    ret i32 0;
^while.body5:
    i1 %60 = scmp eq i32 %53, i32 45;
    cbr i1 %60(prob = 0.5), ^if.then4, ^b16;
^while.header8:
    i32 %61 = phi [^b22, i32 %82] [^entry4, i32 0];
    i32 %62 = phi [^b22, i32 %83] [^entry4, i32 %58];
    i1 %63 = scmp lt i32 %62, i32 48;
    cbr i1 %63(prob = 0.5), ^b19, ^b18;
^while.header9:
    i32 %64 = phi [^b14, i32 0] [^while.body6, i32 %75];
    i32 %65 = phi [^b14, i32 %53] [^while.body6, i32 %76];
    i1 %66 = scmp gt i32 %65, i32 47;
    cbr i1 %66(prob = 0.5), ^b17, ^b20;
^if.then4:
    ubr ^b16;
^b16:
    i32 %67 = phi [^if.then4, i32 1] [^while.body5, i32 %52];
    i32 %68 = call () -> i32 @getch();
    ubr ^while.header6;
^b17:
    i1 %69 = scmp le i32 %65, i32 57;
    ubr ^b20;
^b18:
    i1 %70 = scmp gt i32 %62, i32 57;
    ubr ^b19;
^b19:
    i1 %71 = phi [^b18, i1 %70] [^while.header8, i1 true];
    cbr i1 %71(prob = 0.97), ^while.body7, ^while.header10;
^b20:
    i1 %72 = phi [^b17, i1 %69] [^while.header9, i1 false];
    cbr i1 %72(prob = 0.97), ^while.body6, ^b21;
^while.body6:
    i32 %73 = mul i32 %64, i32 10;
    i32 %74 = add i32 %73, i32 -48;
    i32 %75 = add i32 %74, i32 %65;
    i32 %76 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body7:
    i1 %77 = scmp eq i32 %62, i32 45;
    cbr i1 %77(prob = 0.5), ^if.then5, ^b22;
^while.header10:
    i32 %78 = phi [^b19, i32 0] [^while.body9, i32 %91];
    i32 %79 = phi [^b19, i32 %62] [^while.body9, i32 %92];
    i1 %80 = scmp gt i32 %79, i32 47;
    cbr i1 %80(prob = 0.5), ^b23, ^b24;
^b21:
    i1 %81 = scmp neq i32 %52, i32 0;
    cbr i1 %81(prob = 0.5), ^if.then6, ^while.body8;
^if.then5:
    ubr ^b22;
^b22:
    i32 %82 = phi [^if.then5, i32 1] [^while.body7, i32 %61];
    i32 %83 = call () -> i32 @getch();
    ubr ^while.header8;
^b23:
    i1 %84 = scmp le i32 %79, i32 57;
    ubr ^b24;
^if.then6:
    i32 %85 = neg i32 %64;
    ubr ^while.body8;
^while.body8:
    i32 %86 = phi [^b21, i32 %64] [^if.then6, i32 %85];
    i32 %87 = call () -> i32 @getch();
    ubr ^while.header11;
^b24:
    i1 %88 = phi [^b23, i1 %84] [^while.header10, i1 false];
    cbr i1 %88(prob = 0.97), ^while.body9, ^b25;
^while.body9:
    i32 %89 = mul i32 %78, i32 10;
    i32 %90 = add i32 %89, i32 -48;
    i32 %91 = add i32 %90, i32 %79;
    i32 %92 = call () -> i32 @getch();
    ubr ^while.header10;
^b25:
    i1 %93 = scmp neq i32 %61, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then7, ^while.body10;
^while.header11:
    i32 %94 = phi [^b28, i32 %109] [^while.body8, i32 0];
    i32 %95 = phi [^b28, i32 %110] [^while.body8, i32 %87];
    i1 %96 = scmp lt i32 %95, i32 48;
    cbr i1 %96(prob = 0.5), ^b27, ^b26;
^if.then7:
    i32 %97 = neg i32 %78;
    ubr ^while.body10;
^while.body10:
    i32 %98 = phi [^b25, i32 %78] [^if.then7, i32 %97];
    i32 %99 = call () -> i32 @getch();
    ubr ^while.header12;
^b26:
    i1 %100 = scmp gt i32 %95, i32 57;
    ubr ^b27;
^b27:
    i1 %101 = phi [^b26, i1 %100] [^while.header11, i1 true];
    cbr i1 %101(prob = 0.97), ^while.body11, ^while.header13;
^while.body11:
    i1 %102 = scmp eq i32 %95, i32 45;
    cbr i1 %102(prob = 0.5), ^if.then8, ^b28;
^while.header12:
    i32 %103 = phi [^b34, i32 %124] [^while.body10, i32 0];
    i32 %104 = phi [^b34, i32 %125] [^while.body10, i32 %99];
    i1 %105 = scmp lt i32 %104, i32 48;
    cbr i1 %105(prob = 0.5), ^b31, ^b30;
^while.header13:
    i32 %106 = phi [^b27, i32 0] [^while.body12, i32 %117];
    i32 %107 = phi [^b27, i32 %95] [^while.body12, i32 %118];
    i1 %108 = scmp gt i32 %107, i32 47;
    cbr i1 %108(prob = 0.5), ^b29, ^b32;
^if.then8:
    ubr ^b28;
^b28:
    i32 %109 = phi [^if.then8, i32 1] [^while.body11, i32 %94];
    i32 %110 = call () -> i32 @getch();
    ubr ^while.header11;
^b29:
    i1 %111 = scmp le i32 %107, i32 57;
    ubr ^b32;
^b30:
    i1 %112 = scmp gt i32 %104, i32 57;
    ubr ^b31;
^b31:
    i1 %113 = phi [^b30, i1 %112] [^while.header12, i1 true];
    cbr i1 %113(prob = 0.97), ^while.body13, ^while.header14;
^b32:
    i1 %114 = phi [^b29, i1 %111] [^while.header13, i1 false];
    cbr i1 %114(prob = 0.97), ^while.body12, ^b33;
^while.body12:
    i32 %115 = mul i32 %106, i32 10;
    i32 %116 = add i32 %115, i32 -48;
    i32 %117 = add i32 %116, i32 %107;
    i32 %118 = call () -> i32 @getch();
    ubr ^while.header13;
^while.body13:
    i1 %119 = scmp eq i32 %104, i32 45;
    cbr i1 %119(prob = 0.5), ^if.then9, ^b34;
^while.header14:
    i32 %120 = phi [^b31, i32 0] [^while.body15, i32 %140];
    i32 %121 = phi [^b31, i32 %104] [^while.body15, i32 %141];
    i1 %122 = scmp gt i32 %121, i32 47;
    cbr i1 %122(prob = 0.5), ^b35, ^b36;
^b33:
    i1 %123 = scmp neq i32 %94, i32 0;
    cbr i1 %123(prob = 0.5), ^if.then10, ^while.body14;
^if.then9:
    ubr ^b34;
^b34:
    i32 %124 = phi [^if.then9, i32 1] [^while.body13, i32 %103];
    i32 %125 = call () -> i32 @getch();
    ubr ^while.header12;
^b35:
    i1 %126 = scmp le i32 %121, i32 57;
    ubr ^b36;
^if.then10:
    i32 %127 = neg i32 %106;
    ubr ^while.body14;
^while.body14:
    i32 %128 = phi [^b33, i32 %106] [^if.then10, i32 %127];
    i32* %129 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %48];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %48];
    i32* %131 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %86];
    i32 %132 = load i32* %131;
    store i32* %130 with i32 %132;
    store i32* %131 with i32 %48;
    i32 %133 = add i32 %48, i32 1;
    store i32* %cnt with i32 %133;
    [20 * i32]* %134 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %128];
    i32* %135 = getelementptr &([20 * i32]* %134)[i64 0][i64 0];
    store i32* %135 with i32 %86;
    i32 %136 = add i32 %47, i32 1;
    ubr ^while.header5;
^b36:
    i1 %137 = phi [^while.header14, i1 false] [^b35, i1 %126];
    cbr i1 %137(prob = 0.97), ^while.body15, ^b37;
^while.body15:
    i32 %138 = mul i32 %120, i32 10;
    i32 %139 = add i32 %138, i32 -48;
    i32 %140 = add i32 %139, i32 %121;
    i32 %141 = call () -> i32 @getch();
    ubr ^while.header14;
^b37:
    i1 %142 = scmp neq i32 %103, i32 0;
    cbr i1 %142(prob = 0.5), ^if.then11, ^while.body16;
^if.then11:
    i32 %143 = neg i32 %120;
    ubr ^while.body16;
^while.body16:
    i32 %144 = phi [^b37, i32 %120] [^if.then11, i32 %143];
    i32* %145 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %98];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %144];
    i32 %148 = load i32* %147;
    i1 %149 = scmp lt i32 %146, i32 %148;
    cbr i1 %149(prob = 0.5), ^if.then12, ^b38;
^if.then12:
    ubr ^b38;
^b38:
    i32 %150 = phi [^if.then12, i32 %98] [^while.body16, i32 %144];
    i32 %151 = phi [^if.then12, i32 %144] [^while.body16, i32 %98];
    i32* %152 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %150];
    ubr ^while.header15;
^while.header15:
    i32 %153 = phi [^b42, i32 %177] [^b38, i32 19];
    i32 %154 = phi [^b42, i32 %176] [^b38, i32 %151];
    i32* %155 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %154];
    i32 %156 = load i32* %155;
    i32 %157 = load i32* %152;
    i1 %158 = scmp gt i32 %156, i32 %157;
    cbr i1 %158(prob = 0.97), ^while.body17, ^b39;
^while.body17:
    [20 * i32]* %159 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %154];
    i32* %160 = getelementptr &([20 * i32]* %159)[i64 0][i32 %153];
    i32 %161 = load i32* %160;
    i1 %162 = scmp neq i32 %161, i32 0;
    cbr i1 %162(prob = 0.5), ^b40, ^b41;
^b39:
    i1 %163 = scmp eq i32 %154, i32 %150;
    cbr i1 %163(prob = 0.5), ^while.body18, ^while.header16;
^b40:
    i32* %164 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %161];
    i32 %165 = load i32* %164;
    i32 %166 = load i32* %152;
    i1 %167 = scmp ge i32 %165, i32 %166;
    ubr ^b41;
^while.body18:
    i32 %168 = phi [^b39, i32 %154] [^b43, i32 %180];
    call (i32) -> void @putint(i32 %168);
    call (i32) -> void @putch(i32 10);
    i32 %169 = add i32 %55, i32 -1;
    ubr ^while.header7;
^b41:
    i1 %170 = phi [^while.body17, i1 false] [^b40, i1 %167];
    cbr i1 %170(prob = 0.5), ^if.then13, ^b42;
^while.header16:
    i32 %171 = phi [^b39, i32 19] [^b44, i32 %191];
    i32 %172 = phi [^b39, i32 %150] [^b44, i32 %189];
    i32 %173 = phi [^b39, i32 %154] [^b44, i32 %190];
    i1 %174 = scmp gt i32 %171, i32 -1;
    cbr i1 %174(prob = 0.97), ^while.body19, ^b43;
^if.then13:
    i32 %175 = load i32* %160;
    ubr ^b42;
^b42:
    i32 %176 = phi [^b41, i32 %154] [^if.then13, i32 %175];
    i32 %177 = add i32 %153, i32 -1;
    ubr ^while.header15;
^b43:
    [20 * i32]* %178 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %173];
    i32* %179 = getelementptr &([20 * i32]* %178)[i64 0][i64 0];
    i32 %180 = load i32* %179;
    ubr ^while.body18;
^while.body19:
    [20 * i32]* %181 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %173];
    i32* %182 = getelementptr &([20 * i32]* %181)[i64 0][i32 %171];
    i32 %183 = load i32* %182;
    [20 * i32]* %184 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %172];
    i32* %185 = getelementptr &([20 * i32]* %184)[i64 0][i32 %171];
    i32 %186 = load i32* %185;
    i1 %187 = scmp neq i32 %183, i32 %186;
    cbr i1 %187(prob = 0.5), ^if.then14, ^b44;
^if.then14:
    i32 %188 = load i32* %182;
    ubr ^b44;
^b44:
    i32 %189 = phi [^if.then14, i32 %186] [^while.body19, i32 %172];
    i32 %190 = phi [^if.then14, i32 %188] [^while.body19, i32 %173];
    i32 %191 = add i32 %171, i32 -1;
    ubr ^while.header16;
}
