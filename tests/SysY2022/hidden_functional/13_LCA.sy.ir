internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f;
internal [10005 * i32]* @dep;
internal [10005 * i32]* @to;
internal [10005 * i32]* @next;
internal [10005 * i32]* @head;
internal func @tree(i32 %x, i32 %d) -> void {
^entry:
    i32* %0 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %x];
    store i32* %0 with i32 %d;
    [20 * i32]* %1 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %x];
    i32* %2 = getelementptr &([20 * i32]* %1)[i64 0][i64 0];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i32 %5 = add i32 %d, i32 1;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %7 = add i32 %6, i32 1;
    i32* %8 = getelementptr &([20 * i32]* %1)[i64 0][i32 %7];
    i32* %9 = getelementptr &([20 * i32]* %1)[i64 0][i32 %6];
    i32 %10 = load i32* %9;
    [20 * i32]* %11 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %10];
    i32* %12 = getelementptr &([20 * i32]* %11)[i64 0][i32 %6];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^b:
    i32* %15 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %x];
    i32 %16 = load i32* %15;
    i1 %17 = scmp neq i32 %16, i32 -1;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %18 = phi [^b, i32 %16] [^while.body1, i32 %22];
    i32* %19 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    call (i32, i32) -> void @tree(i32 %20, i32 %5);
    i32* %21 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = scmp neq i32 %22, i32 -1;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    i32 %7 = select i1 %6 ? i32 1 : i32 %1;
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp le i32 %10, i32 57;
    ubr ^b3;
^b3:
    i1 %13 = phi [^while.header1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %14 = mul i32 %9, i32 10;
    i32 %15 = add i32 %10, i32 -48;
    i32 %16 = add i32 %15, i32 %14;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %19 = neg i32 %9;
    ubr ^b5;
^b5:
    i32 %20 = phi [^b4, i32 %9] [^if.then, i32 %19];
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %22 = phi [^b5, i32 0] [^while.body2, i32 %28];
    i32 %23 = phi [^b5, i32 %21] [^while.body2, i32 %29];
    i1 %24 = scmp lt i32 %23, i32 48;
    cbr i1 %24(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %25 = scmp gt i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %26 = phi [^while.header2, i1 true] [^b6, i1 %25];
    cbr i1 %26(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %27 = scmp eq i32 %23, i32 45;
    i32 %28 = select i1 %27 ? i32 1 : i32 %22;
    i32 %29 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %30 = phi [^b7, i32 0] [^while.body3, i32 %37];
    i32 %31 = phi [^b7, i32 %23] [^while.body3, i32 %38];
    i1 %32 = scmp gt i32 %31, i32 47;
    cbr i1 %32(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %33 = scmp le i32 %31, i32 57;
    ubr ^b9;
^b9:
    i1 %34 = phi [^while.header3, i1 false] [^b8, i1 %33];
    cbr i1 %34(prob = 0.97), ^while.body3, ^b10;
^while.body3:
    i32 %35 = mul i32 %30, i32 10;
    i32 %36 = add i32 %31, i32 -48;
    i32 %37 = add i32 %36, i32 %35;
    i32 %38 = call () -> i32 @getch();
    ubr ^while.header3;
^b10:
    i1 %39 = scmp neq i32 %22, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b11;
^if.then1:
    i32 %40 = neg i32 %30;
    ubr ^b11;
^b11:
    i32 %41 = phi [^b10, i32 %30] [^if.then1, i32 %40];
    i32* %42 = getelementptr &([10005 * i32]* @dep)[i64 0][i64 0];
    store i32* %42 with i32 1061109567;
    i1 %43 = scmp gt i32 %20, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body4, ^entry1;
^while.body4:
    i32 %44 = phi [^b11, i32 1] [^while.body4, i32 %46];
    i32* %45 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %44];
    store i32* %45 with i32 -1;
    i32 %46 = add i32 %44, i32 1;
    i1 %47 = scmp le i32 %46, i32 %20;
    cbr i1 %47(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    i1 %48 = scmp neq i32 %20, i32 1;
    cbr i1 %48(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %49 = phi [^entry1, i32 0] [^b35, i32 %138];
    i32 %50 = phi [^entry1, i32 1] [^b35, i32 %141];
    i32 %51 = call () -> i32 @getch();
    ubr ^while.header4;
^b12:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %52 = scmp neq i32 %41, i32 0;
    cbr i1 %52(prob = 0.97), ^while.body6, ^b13;
^while.body6:
    i32 %53 = phi [^b12, i32 %41] [^b40, i32 %170];
    i32 %54 = call () -> i32 @getch();
    ubr ^while.header5;
^while.header4:
    i32 %55 = phi [^while.body5, i32 0] [^while.body7, i32 %64];
    i32 %56 = phi [^while.body5, i32 %51] [^while.body7, i32 %65];
    i1 %57 = scmp lt i32 %56, i32 48;
    cbr i1 %57(prob = 0.5), ^b15, ^b14;
^b13:
    ret i32 0;
^b14:
    i1 %58 = scmp gt i32 %56, i32 57;
    ubr ^b15;
^b15:
    i1 %59 = phi [^while.header4, i1 true] [^b14, i1 %58];
    cbr i1 %59(prob = 0.97), ^while.body7, ^while.header6;
^while.header5:
    i32 %60 = phi [^while.body6, i32 0] [^while.body8, i32 %73];
    i32 %61 = phi [^while.body6, i32 %54] [^while.body8, i32 %74];
    i1 %62 = scmp lt i32 %61, i32 48;
    cbr i1 %62(prob = 0.5), ^b17, ^b16;
^while.body7:
    i1 %63 = scmp eq i32 %56, i32 45;
    i32 %64 = select i1 %63 ? i32 1 : i32 %55;
    i32 %65 = call () -> i32 @getch();
    ubr ^while.header4;
^b16:
    i1 %66 = scmp gt i32 %61, i32 57;
    ubr ^b17;
^while.header6:
    i32 %67 = phi [^b15, i32 0] [^while.body9, i32 %81];
    i32 %68 = phi [^b15, i32 %56] [^while.body9, i32 %82];
    i1 %69 = scmp gt i32 %68, i32 47;
    cbr i1 %69(prob = 0.5), ^b18, ^b19;
^b17:
    i1 %70 = phi [^while.header5, i1 true] [^b16, i1 %66];
    cbr i1 %70(prob = 0.97), ^while.body8, ^while.header7;
^b18:
    i1 %71 = scmp le i32 %68, i32 57;
    ubr ^b19;
^while.body8:
    i1 %72 = scmp eq i32 %61, i32 45;
    i32 %73 = select i1 %72 ? i32 1 : i32 %60;
    i32 %74 = call () -> i32 @getch();
    ubr ^while.header5;
^b19:
    i1 %75 = phi [^while.header6, i1 false] [^b18, i1 %71];
    cbr i1 %75(prob = 0.97), ^while.body9, ^b21;
^while.header7:
    i32 %76 = phi [^b17, i32 0] [^while.body10, i32 %89];
    i32 %77 = phi [^b17, i32 %61] [^while.body10, i32 %90];
    i1 %78 = scmp gt i32 %77, i32 47;
    cbr i1 %78(prob = 0.5), ^b20, ^b22;
^while.body9:
    i32 %79 = mul i32 %67, i32 10;
    i32 %80 = add i32 %68, i32 -48;
    i32 %81 = add i32 %80, i32 %79;
    i32 %82 = call () -> i32 @getch();
    ubr ^while.header6;
^b20:
    i1 %83 = scmp le i32 %77, i32 57;
    ubr ^b22;
^b21:
    i1 %84 = scmp neq i32 %55, i32 0;
    cbr i1 %84(prob = 0.5), ^if.then2, ^b23;
^b22:
    i1 %85 = phi [^while.header7, i1 false] [^b20, i1 %83];
    cbr i1 %85(prob = 0.97), ^while.body10, ^b24;
^if.then2:
    i32 %86 = neg i32 %67;
    ubr ^b23;
^while.body10:
    i32 %87 = mul i32 %76, i32 10;
    i32 %88 = add i32 %77, i32 -48;
    i32 %89 = add i32 %88, i32 %87;
    i32 %90 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i32 %91 = phi [^b21, i32 %67] [^if.then2, i32 %86];
    i32 %92 = call () -> i32 @getch();
    ubr ^while.header8;
^b24:
    i1 %93 = scmp neq i32 %60, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then3, ^b25;
^if.then3:
    i32 %94 = neg i32 %76;
    ubr ^b25;
^b25:
    i32 %95 = phi [^b24, i32 %76] [^if.then3, i32 %94];
    i32 %96 = call () -> i32 @getch();
    ubr ^while.header9;
^while.header8:
    i32 %97 = phi [^b23, i32 0] [^while.body11, i32 %106];
    i32 %98 = phi [^b23, i32 %92] [^while.body11, i32 %107];
    i1 %99 = scmp lt i32 %98, i32 48;
    cbr i1 %99(prob = 0.5), ^b27, ^b26;
^b26:
    i1 %100 = scmp gt i32 %98, i32 57;
    ubr ^b27;
^b27:
    i1 %101 = phi [^while.header8, i1 true] [^b26, i1 %100];
    cbr i1 %101(prob = 0.97), ^while.body11, ^while.header10;
^while.header9:
    i32 %102 = phi [^b25, i32 0] [^while.body12, i32 %115];
    i32 %103 = phi [^b25, i32 %96] [^while.body12, i32 %116];
    i1 %104 = scmp lt i32 %103, i32 48;
    cbr i1 %104(prob = 0.5), ^b29, ^b28;
^while.body11:
    i1 %105 = scmp eq i32 %98, i32 45;
    i32 %106 = select i1 %105 ? i32 1 : i32 %97;
    i32 %107 = call () -> i32 @getch();
    ubr ^while.header8;
^b28:
    i1 %108 = scmp gt i32 %103, i32 57;
    ubr ^b29;
^while.header10:
    i32 %109 = phi [^b27, i32 0] [^while.body13, i32 %123];
    i32 %110 = phi [^b27, i32 %98] [^while.body13, i32 %124];
    i1 %111 = scmp gt i32 %110, i32 47;
    cbr i1 %111(prob = 0.5), ^b30, ^b31;
^b29:
    i1 %112 = phi [^while.header9, i1 true] [^b28, i1 %108];
    cbr i1 %112(prob = 0.97), ^while.body12, ^while.header11;
^b30:
    i1 %113 = scmp le i32 %110, i32 57;
    ubr ^b31;
^while.body12:
    i1 %114 = scmp eq i32 %103, i32 45;
    i32 %115 = select i1 %114 ? i32 1 : i32 %102;
    i32 %116 = call () -> i32 @getch();
    ubr ^while.header9;
^b31:
    i1 %117 = phi [^while.header10, i1 false] [^b30, i1 %113];
    cbr i1 %117(prob = 0.97), ^while.body13, ^b33;
^while.header11:
    i32 %118 = phi [^b29, i32 0] [^while.body14, i32 %131];
    i32 %119 = phi [^b29, i32 %103] [^while.body14, i32 %132];
    i1 %120 = scmp gt i32 %119, i32 47;
    cbr i1 %120(prob = 0.5), ^b32, ^b34;
^while.body13:
    i32 %121 = mul i32 %109, i32 10;
    i32 %122 = add i32 %110, i32 -48;
    i32 %123 = add i32 %122, i32 %121;
    i32 %124 = call () -> i32 @getch();
    ubr ^while.header10;
^b32:
    i1 %125 = scmp le i32 %119, i32 57;
    ubr ^b34;
^b33:
    i1 %126 = scmp neq i32 %97, i32 0;
    cbr i1 %126(prob = 0.5), ^if.then4, ^b35;
^b34:
    i1 %127 = phi [^while.header11, i1 false] [^b32, i1 %125];
    cbr i1 %127(prob = 0.97), ^while.body14, ^b36;
^if.then4:
    i32 %128 = neg i32 %109;
    ubr ^b35;
^while.body14:
    i32 %129 = mul i32 %118, i32 10;
    i32 %130 = add i32 %119, i32 -48;
    i32 %131 = add i32 %130, i32 %129;
    i32 %132 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i32 %133 = phi [^b33, i32 %109] [^if.then4, i32 %128];
    i32* %134 = getelementptr &([10005 * i32]* @to)[i64 0][i32 %49];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &([10005 * i32]* @next)[i64 0][i32 %49];
    i32* %136 = getelementptr &([10005 * i32]* @head)[i64 0][i32 %91];
    i32 %137 = load i32* %136;
    store i32* %135 with i32 %137;
    store i32* %136 with i32 %49;
    i32 %138 = add i32 %49, i32 1;
    [20 * i32]* %139 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %133];
    i32* %140 = getelementptr &([20 * i32]* %139)[i64 0][i64 0];
    store i32* %140 with i32 %91;
    i32 %141 = add i32 %50, i32 1;
    i1 %142 = scmp neq i32 %141, i32 %20;
    cbr i1 %142(prob = 0.97), ^while.body5, ^b12;
^b36:
    i1 %143 = scmp neq i32 %102, i32 0;
    cbr i1 %143(prob = 0.5), ^if.then5, ^b37;
^if.then5:
    i32 %144 = neg i32 %118;
    ubr ^b37;
^b37:
    i32 %145 = phi [^b36, i32 %118] [^if.then5, i32 %144];
    i32* %146 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %95];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %145];
    i32 %149 = load i32* %148;
    i1 %150 = scmp lt i32 %147, i32 %149;
    i32 %151 = select i1 %150 ? i32 %95 : i32 %145;
    i32 %152 = select i1 %150 ? i32 %145 : i32 %95;
    i32* %153 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %151];
    ubr ^while.header12;
^while.header12:
    i32 %154 = phi [^b37, i32 19] [^b42, i32 %179];
    i32 %155 = phi [^b37, i32 %152] [^b42, i32 %178];
    i32* %156 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %155];
    i32 %157 = load i32* %156;
    i32 %158 = load i32* %153;
    i1 %159 = scmp gt i32 %157, i32 %158;
    cbr i1 %159(prob = 0.97), ^while.body15, ^b38;
^while.body15:
    [20 * i32]* %160 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %155];
    i32* %161 = getelementptr &([20 * i32]* %160)[i64 0][i32 %154];
    i32 %162 = load i32* %161;
    i1 %163 = scmp neq i32 %162, i32 0;
    cbr i1 %163(prob = 0.5), ^b39, ^b41;
^b38:
    i1 %164 = scmp eq i32 %155, i32 %151;
    cbr i1 %164(prob = 0.5), ^b40, ^while.header13;
^b39:
    i32* %165 = getelementptr &([10005 * i32]* @dep)[i64 0][i32 %162];
    i32 %166 = load i32* %165;
    i32 %167 = load i32* %153;
    i1 %168 = scmp ge i32 %166, i32 %167;
    ubr ^b41;
^b40:
    i32 %169 = phi [^b38, i32 %155] [^b43, i32 %182];
    call (i32) -> void @putint(i32 %169);
    call (i32) -> void @putch(i32 10);
    i32 %170 = add i32 %53, i32 -1;
    i1 %171 = scmp neq i32 %170, i32 0;
    cbr i1 %171(prob = 0.97), ^while.body6, ^b13;
^b41:
    i1 %172 = phi [^while.body15, i1 false] [^b39, i1 %168];
    cbr i1 %172(prob = 0.5), ^if.then6, ^b42;
^while.header13:
    i32 %173 = phi [^b38, i32 %151] [^b44, i32 %191];
    i32 %174 = phi [^b38, i32 19] [^b44, i32 %193];
    i32 %175 = phi [^b38, i32 %155] [^b44, i32 %192];
    i1 %176 = scmp gt i32 %174, i32 -1;
    cbr i1 %176(prob = 0.97), ^while.body16, ^b43;
^if.then6:
    i32 %177 = load i32* %161;
    ubr ^b42;
^b42:
    i32 %178 = phi [^b41, i32 %155] [^if.then6, i32 %177];
    i32 %179 = add i32 %154, i32 -1;
    ubr ^while.header12;
^b43:
    [20 * i32]* %180 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %175];
    i32* %181 = getelementptr &([20 * i32]* %180)[i64 0][i64 0];
    i32 %182 = load i32* %181;
    ubr ^b40;
^while.body16:
    [20 * i32]* %183 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %175];
    i32* %184 = getelementptr &([20 * i32]* %183)[i64 0][i32 %174];
    i32 %185 = load i32* %184;
    [20 * i32]* %186 = getelementptr &([10005 * [20 * i32]]* @f)[i64 0][i32 %173];
    i32* %187 = getelementptr &([20 * i32]* %186)[i64 0][i32 %174];
    i32 %188 = load i32* %187;
    i1 %189 = scmp neq i32 %185, i32 %188;
    cbr i1 %189(prob = 0.5), ^if.then7, ^b44;
^if.then7:
    i32 %190 = load i32* %184;
    ubr ^b44;
^b44:
    i32 %191 = phi [^while.body16, i32 %173] [^if.then7, i32 %188];
    i32 %192 = phi [^while.body16, i32 %175] [^if.then7, i32 %190];
    i32 %193 = add i32 %174, i32 -1;
    ubr ^while.header13;
}
