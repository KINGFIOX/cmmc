internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f, align 8 { Flexible };
internal [10005 * i32]* @dep, align 8 { Flexible };
internal [10005 * i32]* @to, align 8 { Flexible };
internal [10005 * i32]* @next, align 8 { Flexible };
internal [10005 * i32]* @head, align 8 { Flexible };
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    i32 %7 = add i32 %d, i32 1;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %9 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %10, i32 1;
    i32* %17 = getelementptr &([20 * i32]* %3)[i64 0][i32 %16];
    store i32* %17 with i32 %15;
    i1 %18 = icmp neq i32 %15, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %7);
    i32* %26 = getelementptr &([10005 * i32]* %9)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = icmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [10005 * i32]* %3 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    [10005 * i32]* %5 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    [10005 * [20 * i32]]* %6 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [10005 * i32]* %7 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    cbr i1 %2(prob = 0.97), ^while.body, ^15;
  ^while.body:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %14];
    i32 %10 = call () -> i32 @getch();
    i32 %11 = add i32 %10, i32 -48;
    i1 %12 = icmp ugt i32 %11, i32 9;
    i1 %13 = icmp eq i32 %8, i32 45;
    i32 %14 = select i1 %13 ? i32 1 : i32 %9;
    cbr i1 %12(prob = 0.97), ^while.body, ^15;
  ^15:
    i32 %16 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %17 = phi [^entry, i32 0] [^while.body, i32 %14];
    i32 %18 = add i32 %16, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %20 = phi [^15, i32 %16] [^while.body1, i32 %22];
    i32 %21 = phi [^15, i32 0] [^while.body1, i32 %27];
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    i32 %25 = mul i32 %21, i32 10;
    i32 %26 = add i32 %25, i32 -48;
    i32 %27 = add i32 %20, i32 %26;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %28 = phi [^15, i32 0] [^while.body1, i32 %27];
    i32 %29 = call () -> i32 @getch();
    i32 %30 = add i32 %29, i32 -48;
    i1 %31 = icmp ugt i32 %30, i32 9;
    i1 %32 = icmp neq i32 %17, i32 0;
    i32 %33 = neg i32 %28;
    i32 %34 = select i1 %32 ? i32 %33 : i32 %28;
    cbr i1 %31(prob = 0.97), ^while.body2, ^42;
  ^while.body2:
    i32 %35 = phi [^b, i32 %29] [^while.body2, i32 %37];
    i32 %36 = phi [^b, i32 0] [^while.body2, i32 %41];
    i32 %37 = call () -> i32 @getch();
    i32 %38 = add i32 %37, i32 -48;
    i1 %39 = icmp ugt i32 %38, i32 9;
    i1 %40 = icmp eq i32 %35, i32 45;
    i32 %41 = select i1 %40 ? i32 1 : i32 %36;
    cbr i1 %39(prob = 0.97), ^while.body2, ^42;
  ^42:
    i32 %43 = phi [^b, i32 %29] [^while.body2, i32 %37];
    i32 %44 = phi [^b, i32 0] [^while.body2, i32 %41];
    i32 %45 = add i32 %43, i32 -48;
    i1 %46 = icmp ult i32 %45, i32 10;
    cbr i1 %46(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %47 = phi [^42, i32 %43] [^while.body3, i32 %49];
    i32 %48 = phi [^42, i32 0] [^while.body3, i32 %54];
    i32 %49 = call () -> i32 @getch();
    i32 %50 = add i32 %49, i32 -48;
    i1 %51 = icmp ult i32 %50, i32 10;
    i32 %52 = mul i32 %48, i32 10;
    i32 %53 = add i32 %52, i32 -48;
    i32 %54 = add i32 %47, i32 %53;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %55 = phi [^42, i32 0] [^while.body3, i32 %54];
    i1 %56 = icmp neq i32 %44, i32 0;
    i32 %57 = neg i32 %55;
    i32 %58 = select i1 %56 ? i32 %57 : i32 %55;
    i32* %59 = getelementptr &([10005 * i32]* %7)[i64 0][i64 0];
    store i32* %59 with i32 1061109567;
    i1 %60 = icmp sgt i32 %34, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %61 = phi [^b1, i32 1] [^while.body4, i32 %63];
    i32* %62 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %61];
    store i32* %62 with i32 -1;
    i32 %63 = add i32 %61, i32 1;
    i1 %64 = icmp sge i32 %34, i32 %63;
    cbr i1 %64(prob = 0.97), ^while.body4, ^entry1;
  ^entry1:
    i1 %65 = icmp neq i32 %34, i32 1;
    cbr i1 %65(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %66 = phi [^entry1, i32 0] [^b6, i32 %169];
    i32 %67 = phi [^entry1, i32 1] [^b6, i32 %167];
    i32 %68 = call () -> i32 @getch();
    i32 %69 = add i32 %68, i32 -48;
    i1 %70 = icmp ugt i32 %69, i32 9;
    cbr i1 %70(prob = 0.97), ^while.body6, ^83;
  ^b2:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %71 = icmp neq i32 %58, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32 %72 = phi [^while.body5, i32 %68] [^while.body6, i32 %74];
    i32 %73 = phi [^while.body5, i32 0] [^while.body6, i32 %78];
    i32 %74 = call () -> i32 @getch();
    i32 %75 = add i32 %74, i32 -48;
    i1 %76 = icmp ugt i32 %75, i32 9;
    i1 %77 = icmp eq i32 %72, i32 45;
    i32 %78 = select i1 %77 ? i32 1 : i32 %73;
    cbr i1 %76(prob = 0.97), ^while.body6, ^83;
  ^while.body7:
    i32 %79 = phi [^b2, i32 %58] [^b11, i32 %395];
    i32 %80 = call () -> i32 @getch();
    i32 %81 = add i32 %80, i32 -48;
    i1 %82 = icmp ugt i32 %81, i32 9;
    cbr i1 %82(prob = 0.97), ^while.body9, ^110;
  ^83:
    i32 %84 = phi [^while.body5, i32 %68] [^while.body6, i32 %74];
    i32 %85 = phi [^while.body5, i32 0] [^while.body6, i32 %78];
    i32 %86 = add i32 %84, i32 -48;
    i1 %87 = icmp ult i32 %86, i32 10;
    cbr i1 %87(prob = 0.97), ^while.body8, ^b4;
  ^b3:
    ret i32 0;
  ^while.body8:
    i32 %88 = phi [^83, i32 %84] [^while.body8, i32 %90];
    i32 %89 = phi [^83, i32 0] [^while.body8, i32 %95];
    i32 %90 = call () -> i32 @getch();
    i32 %91 = add i32 %90, i32 -48;
    i1 %92 = icmp ult i32 %91, i32 10;
    i32 %93 = mul i32 %89, i32 10;
    i32 %94 = add i32 %93, i32 -48;
    i32 %95 = add i32 %88, i32 %94;
    cbr i1 %92(prob = 0.97), ^while.body8, ^b4;
  ^while.body9:
    i32 %96 = phi [^while.body7, i32 %80] [^while.body9, i32 %98];
    i32 %97 = phi [^while.body7, i32 0] [^while.body9, i32 %102];
    i32 %98 = call () -> i32 @getch();
    i32 %99 = add i32 %98, i32 -48;
    i1 %100 = icmp ugt i32 %99, i32 9;
    i1 %101 = icmp eq i32 %96, i32 45;
    i32 %102 = select i1 %101 ? i32 1 : i32 %97;
    cbr i1 %100(prob = 0.97), ^while.body9, ^110;
  ^b4:
    i32 %103 = phi [^83, i32 0] [^while.body8, i32 %95];
    i32 %104 = call () -> i32 @getch();
    i32 %105 = add i32 %104, i32 -48;
    i1 %106 = icmp ugt i32 %105, i32 9;
    i1 %107 = icmp neq i32 %85, i32 0;
    i32 %108 = neg i32 %103;
    i32 %109 = select i1 %107 ? i32 %108 : i32 %103;
    cbr i1 %106(prob = 0.97), ^while.body11, ^137;
  ^110:
    i32 %111 = phi [^while.body7, i32 %80] [^while.body9, i32 %98];
    i32 %112 = phi [^while.body7, i32 0] [^while.body9, i32 %102];
    i32 %113 = add i32 %111, i32 -48;
    i1 %114 = icmp ult i32 %113, i32 10;
    cbr i1 %114(prob = 0.97), ^while.body10, ^b5;
  ^while.body10:
    i32 %115 = phi [^110, i32 %111] [^while.body10, i32 %117];
    i32 %116 = phi [^110, i32 0] [^while.body10, i32 %122];
    i32 %117 = call () -> i32 @getch();
    i32 %118 = add i32 %117, i32 -48;
    i1 %119 = icmp ult i32 %118, i32 10;
    i32 %120 = mul i32 %116, i32 10;
    i32 %121 = add i32 %120, i32 -48;
    i32 %122 = add i32 %115, i32 %121;
    cbr i1 %119(prob = 0.97), ^while.body10, ^b5;
  ^while.body11:
    i32 %123 = phi [^b4, i32 %104] [^while.body11, i32 %125];
    i32 %124 = phi [^b4, i32 0] [^while.body11, i32 %129];
    i32 %125 = call () -> i32 @getch();
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = icmp ugt i32 %126, i32 9;
    i1 %128 = icmp eq i32 %123, i32 45;
    i32 %129 = select i1 %128 ? i32 1 : i32 %124;
    cbr i1 %127(prob = 0.97), ^while.body11, ^137;
  ^b5:
    i32 %130 = phi [^110, i32 0] [^while.body10, i32 %122];
    i32 %131 = call () -> i32 @getch();
    i32 %132 = add i32 %131, i32 -48;
    i1 %133 = icmp ugt i32 %132, i32 9;
    i1 %134 = icmp neq i32 %112, i32 0;
    i32 %135 = neg i32 %130;
    i32 %136 = select i1 %134 ? i32 %135 : i32 %130;
    cbr i1 %133(prob = 0.97), ^while.body13, ^170;
  ^137:
    i32 %138 = phi [^b4, i32 %104] [^while.body11, i32 %125];
    i32 %139 = phi [^b4, i32 0] [^while.body11, i32 %129];
    i32 %140 = add i32 %138, i32 -48;
    i1 %141 = icmp ult i32 %140, i32 10;
    cbr i1 %141(prob = 0.97), ^while.body12, ^b6;
  ^while.body12:
    i32 %142 = phi [^137, i32 %138] [^while.body12, i32 %144];
    i32 %143 = phi [^137, i32 0] [^while.body12, i32 %149];
    i32 %144 = call () -> i32 @getch();
    i32 %145 = add i32 %144, i32 -48;
    i1 %146 = icmp ult i32 %145, i32 10;
    i32 %147 = mul i32 %143, i32 10;
    i32 %148 = add i32 %147, i32 -48;
    i32 %149 = add i32 %142, i32 %148;
    cbr i1 %146(prob = 0.97), ^while.body12, ^b6;
  ^while.body13:
    i32 %150 = phi [^b5, i32 %131] [^while.body13, i32 %152];
    i32 %151 = phi [^b5, i32 0] [^while.body13, i32 %156];
    i32 %152 = call () -> i32 @getch();
    i32 %153 = add i32 %152, i32 -48;
    i1 %154 = icmp ugt i32 %153, i32 9;
    i1 %155 = icmp eq i32 %150, i32 45;
    i32 %156 = select i1 %155 ? i32 1 : i32 %151;
    cbr i1 %154(prob = 0.97), ^while.body13, ^170;
  ^b6:
    i32 %157 = phi [^137, i32 0] [^while.body12, i32 %149];
    i1 %158 = icmp neq i32 %139, i32 0;
    i32 %159 = neg i32 %157;
    i32 %160 = select i1 %158 ? i32 %159 : i32 %157;
    i32* %161 = getelementptr &([10005 * i32]* %3)[i64 0][i32 %66];
    store i32* %161 with i32 %160;
    [20 * i32]* %162 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %160];
    i32* %163 = getelementptr &([20 * i32]* %162)[i64 0][i64 0];
    i32* %164 = getelementptr &([10005 * i32]* %5)[i64 0][i32 %109];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %66];
    store i32* %166 with i32 %165;
    store i32* %164 with i32 %66;
    store i32* %163 with i32 %109;
    i32 %167 = add i32 %67, i32 1;
    i1 %168 = icmp neq i32 %34, i32 %167;
    i32 %169 = add i32 %66, i32 1;
    cbr i1 %168(prob = 0.97), ^while.body5, ^b2;
  ^170:
    i32 %171 = phi [^b5, i32 %131] [^while.body13, i32 %152];
    i32 %172 = phi [^b5, i32 0] [^while.body13, i32 %156];
    i32 %173 = add i32 %171, i32 -48;
    i1 %174 = icmp ult i32 %173, i32 10;
    cbr i1 %174(prob = 0.97), ^while.body14, ^b7;
  ^b7:
    i32 %175 = phi [^170, i32 0] [^while.body14, i32 %194];
    i1 %176 = icmp neq i32 %172, i32 0;
    i32 %177 = neg i32 %175;
    i32 %178 = select i1 %176 ? i32 %177 : i32 %175;
    i32* %179 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %178];
    i32* %180 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %136];
    i32 %181 = load i32* %180;
    i32 %182 = load i32* %179;
    i1 %183 = icmp slt i32 %181, i32 %182;
    i32 %184 = select i1 %183 ? i32 %136 : i32 %178;
    i32* %185 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %184];
    i32 %186 = select i1 %183 ? i32 %178 : i32 %136;
    ubr ^while.header;
  ^while.body14:
    i32 %187 = phi [^170, i32 %171] [^while.body14, i32 %189];
    i32 %188 = phi [^170, i32 0] [^while.body14, i32 %194];
    i32 %189 = call () -> i32 @getch();
    i32 %190 = add i32 %189, i32 -48;
    i1 %191 = icmp ult i32 %190, i32 10;
    i32 %192 = mul i32 %188, i32 10;
    i32 %193 = add i32 %192, i32 -48;
    i32 %194 = add i32 %187, i32 %193;
    cbr i1 %191(prob = 0.97), ^while.body14, ^b7;
  ^while.header:
    i32 %195 = phi [^b7, i32 19] [^b10, i32 %211];
    i32 %196 = phi [^b7, i32 %186] [^b10, i32 %210];
    i32* %197 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %196];
    i32 %198 = load i32* %197;
    i32 %199 = load i32* %185;
    i1 %200 = icmp sgt i32 %198, i32 %199;
    cbr i1 %200(prob = 0.97), ^while.body15, ^b8;
  ^while.body15:
    [20 * i32]* %201 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %196];
    i32* %202 = getelementptr &([20 * i32]* %201)[i64 0][i32 %195];
    i32 %203 = load i32* %202;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.5), ^b9, ^b10;
  ^b8:
    i1 %205 = icmp eq i32 %184, i32 %196;
    cbr i1 %205(prob = 0.5), ^b11, ^while.header1;
  ^b9:
    i32* %206 = getelementptr &([10005 * i32]* %7)[i64 0][i32 %203];
    i32 %207 = load i32* %206;
    i1 %208 = icmp sle i32 %199, i32 %207;
    ubr ^b10;
  ^b10:
    i1 %209 = phi [^while.body15, i1 false] [^b9, i1 %208];
    i32 %210 = select i1 %209 ? i32 %203 : i32 %196;
    i32 %211 = add i32 %195, i32 -1;
    ubr ^while.header;
  ^while.header1:
    [20 * i32]* %212 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %196];
    i32* %213 = getelementptr &([20 * i32]* %212)[i64 0][i64 19];
    i32 %214 = load i32* %213;
    [20 * i32]* %215 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %184];
    i32* %216 = getelementptr &([20 * i32]* %215)[i64 0][i64 19];
    i32 %217 = load i32* %216;
    i1 %218 = icmp neq i32 %214, i32 %217;
    i32 %219 = select i1 %218 ? i32 %214 : i32 %196;
    [20 * i32]* %220 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %219];
    i32* %221 = getelementptr &([20 * i32]* %220)[i64 0][i64 18];
    i32 %222 = load i32* %221;
    i32 %223 = select i1 %218 ? i32 %217 : i32 %184;
    [20 * i32]* %224 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %223];
    i32* %225 = getelementptr &([20 * i32]* %224)[i64 0][i64 18];
    i32 %226 = load i32* %225;
    i1 %227 = icmp neq i32 %222, i32 %226;
    i32 %228 = select i1 %227 ? i32 %222 : i32 %219;
    [20 * i32]* %229 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %228];
    i32* %230 = getelementptr &([20 * i32]* %229)[i64 0][i64 17];
    i32 %231 = load i32* %230;
    i32 %232 = select i1 %227 ? i32 %226 : i32 %223;
    [20 * i32]* %233 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %232];
    i32* %234 = getelementptr &([20 * i32]* %233)[i64 0][i64 17];
    i32 %235 = load i32* %234;
    i1 %236 = icmp neq i32 %231, i32 %235;
    i32 %237 = select i1 %236 ? i32 %231 : i32 %228;
    [20 * i32]* %238 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %237];
    i32* %239 = getelementptr &([20 * i32]* %238)[i64 0][i64 16];
    i32 %240 = load i32* %239;
    i32 %241 = select i1 %236 ? i32 %235 : i32 %232;
    [20 * i32]* %242 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %241];
    i32* %243 = getelementptr &([20 * i32]* %242)[i64 0][i64 16];
    i32 %244 = load i32* %243;
    i1 %245 = icmp neq i32 %240, i32 %244;
    i32 %246 = select i1 %245 ? i32 %240 : i32 %237;
    [20 * i32]* %247 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %246];
    i32* %248 = getelementptr &([20 * i32]* %247)[i64 0][i64 15];
    i32 %249 = load i32* %248;
    i32 %250 = select i1 %245 ? i32 %244 : i32 %241;
    [20 * i32]* %251 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %250];
    i32* %252 = getelementptr &([20 * i32]* %251)[i64 0][i64 15];
    i32 %253 = load i32* %252;
    i1 %254 = icmp neq i32 %249, i32 %253;
    i32 %255 = select i1 %254 ? i32 %249 : i32 %246;
    [20 * i32]* %256 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %255];
    i32* %257 = getelementptr &([20 * i32]* %256)[i64 0][i64 14];
    i32 %258 = load i32* %257;
    i32 %259 = select i1 %254 ? i32 %253 : i32 %250;
    [20 * i32]* %260 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %259];
    i32* %261 = getelementptr &([20 * i32]* %260)[i64 0][i64 14];
    i32 %262 = load i32* %261;
    i1 %263 = icmp neq i32 %258, i32 %262;
    i32 %264 = select i1 %263 ? i32 %258 : i32 %255;
    [20 * i32]* %265 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %264];
    i32* %266 = getelementptr &([20 * i32]* %265)[i64 0][i64 13];
    i32 %267 = load i32* %266;
    i32 %268 = select i1 %263 ? i32 %262 : i32 %259;
    [20 * i32]* %269 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %268];
    i32* %270 = getelementptr &([20 * i32]* %269)[i64 0][i64 13];
    i32 %271 = load i32* %270;
    i1 %272 = icmp neq i32 %267, i32 %271;
    i32 %273 = select i1 %272 ? i32 %267 : i32 %264;
    [20 * i32]* %274 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %273];
    i32* %275 = getelementptr &([20 * i32]* %274)[i64 0][i64 12];
    i32 %276 = load i32* %275;
    i32 %277 = select i1 %272 ? i32 %271 : i32 %268;
    [20 * i32]* %278 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %277];
    i32* %279 = getelementptr &([20 * i32]* %278)[i64 0][i64 12];
    i32 %280 = load i32* %279;
    i1 %281 = icmp neq i32 %276, i32 %280;
    i32 %282 = select i1 %281 ? i32 %276 : i32 %273;
    [20 * i32]* %283 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %282];
    i32* %284 = getelementptr &([20 * i32]* %283)[i64 0][i64 11];
    i32 %285 = load i32* %284;
    i32 %286 = select i1 %281 ? i32 %280 : i32 %277;
    [20 * i32]* %287 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %286];
    i32* %288 = getelementptr &([20 * i32]* %287)[i64 0][i64 11];
    i32 %289 = load i32* %288;
    i1 %290 = icmp neq i32 %285, i32 %289;
    i32 %291 = select i1 %290 ? i32 %285 : i32 %282;
    [20 * i32]* %292 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %291];
    i32* %293 = getelementptr &([20 * i32]* %292)[i64 0][i64 10];
    i32 %294 = load i32* %293;
    i32 %295 = select i1 %290 ? i32 %289 : i32 %286;
    [20 * i32]* %296 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %295];
    i32* %297 = getelementptr &([20 * i32]* %296)[i64 0][i64 10];
    i32 %298 = load i32* %297;
    i1 %299 = icmp neq i32 %294, i32 %298;
    i32 %300 = select i1 %299 ? i32 %294 : i32 %291;
    [20 * i32]* %301 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %300];
    i32* %302 = getelementptr &([20 * i32]* %301)[i64 0][i64 9];
    i32 %303 = load i32* %302;
    i32 %304 = select i1 %299 ? i32 %298 : i32 %295;
    [20 * i32]* %305 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %304];
    i32* %306 = getelementptr &([20 * i32]* %305)[i64 0][i64 9];
    i32 %307 = load i32* %306;
    i1 %308 = icmp neq i32 %303, i32 %307;
    i32 %309 = select i1 %308 ? i32 %303 : i32 %300;
    [20 * i32]* %310 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %309];
    i32* %311 = getelementptr &([20 * i32]* %310)[i64 0][i64 8];
    i32 %312 = load i32* %311;
    i32 %313 = select i1 %308 ? i32 %307 : i32 %304;
    [20 * i32]* %314 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %313];
    i32* %315 = getelementptr &([20 * i32]* %314)[i64 0][i64 8];
    i32 %316 = load i32* %315;
    i1 %317 = icmp neq i32 %312, i32 %316;
    i32 %318 = select i1 %317 ? i32 %312 : i32 %309;
    [20 * i32]* %319 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %318];
    i32* %320 = getelementptr &([20 * i32]* %319)[i64 0][i64 7];
    i32 %321 = load i32* %320;
    i32 %322 = select i1 %317 ? i32 %316 : i32 %313;
    [20 * i32]* %323 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %322];
    i32* %324 = getelementptr &([20 * i32]* %323)[i64 0][i64 7];
    i32 %325 = load i32* %324;
    i1 %326 = icmp neq i32 %321, i32 %325;
    i32 %327 = select i1 %326 ? i32 %321 : i32 %318;
    [20 * i32]* %328 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %327];
    i32* %329 = getelementptr &([20 * i32]* %328)[i64 0][i64 6];
    i32 %330 = load i32* %329;
    i32 %331 = select i1 %326 ? i32 %325 : i32 %322;
    [20 * i32]* %332 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %331];
    i32* %333 = getelementptr &([20 * i32]* %332)[i64 0][i64 6];
    i32 %334 = load i32* %333;
    i1 %335 = icmp neq i32 %330, i32 %334;
    i32 %336 = select i1 %335 ? i32 %330 : i32 %327;
    [20 * i32]* %337 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %336];
    i32* %338 = getelementptr &([20 * i32]* %337)[i64 0][i64 5];
    i32 %339 = load i32* %338;
    i32 %340 = select i1 %335 ? i32 %334 : i32 %331;
    [20 * i32]* %341 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %340];
    i32* %342 = getelementptr &([20 * i32]* %341)[i64 0][i64 5];
    i32 %343 = load i32* %342;
    i1 %344 = icmp neq i32 %339, i32 %343;
    i32 %345 = select i1 %344 ? i32 %339 : i32 %336;
    [20 * i32]* %346 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %345];
    i32* %347 = getelementptr &([20 * i32]* %346)[i64 0][i64 4];
    i32 %348 = load i32* %347;
    i32 %349 = select i1 %344 ? i32 %343 : i32 %340;
    [20 * i32]* %350 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %349];
    i32* %351 = getelementptr &([20 * i32]* %350)[i64 0][i64 4];
    i32 %352 = load i32* %351;
    i1 %353 = icmp neq i32 %348, i32 %352;
    i32 %354 = select i1 %353 ? i32 %348 : i32 %345;
    [20 * i32]* %355 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %354];
    i32* %356 = getelementptr &([20 * i32]* %355)[i64 0][i64 3];
    i32 %357 = load i32* %356;
    i32 %358 = select i1 %353 ? i32 %352 : i32 %349;
    [20 * i32]* %359 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %358];
    i32* %360 = getelementptr &([20 * i32]* %359)[i64 0][i64 3];
    i32 %361 = load i32* %360;
    i1 %362 = icmp neq i32 %357, i32 %361;
    i32 %363 = select i1 %362 ? i32 %357 : i32 %354;
    [20 * i32]* %364 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %363];
    i32* %365 = getelementptr &([20 * i32]* %364)[i64 0][i64 2];
    i32 %366 = load i32* %365;
    i32 %367 = select i1 %362 ? i32 %361 : i32 %358;
    [20 * i32]* %368 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %367];
    i32* %369 = getelementptr &([20 * i32]* %368)[i64 0][i64 2];
    i32 %370 = load i32* %369;
    i1 %371 = icmp neq i32 %366, i32 %370;
    i32 %372 = select i1 %371 ? i32 %366 : i32 %363;
    [20 * i32]* %373 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %372];
    i32* %374 = getelementptr &([20 * i32]* %373)[i64 0][i64 1];
    i32 %375 = load i32* %374;
    i32 %376 = select i1 %371 ? i32 %370 : i32 %367;
    [20 * i32]* %377 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %376];
    i32* %378 = getelementptr &([20 * i32]* %377)[i64 0][i64 1];
    i32 %379 = load i32* %378;
    i1 %380 = icmp neq i32 %375, i32 %379;
    i32 %381 = select i1 %380 ? i32 %375 : i32 %372;
    [20 * i32]* %382 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %381];
    i32* %383 = getelementptr &([20 * i32]* %382)[i64 0][i64 0];
    i32 %384 = load i32* %383;
    i32 %385 = select i1 %380 ? i32 %379 : i32 %376;
    [20 * i32]* %386 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %385];
    i32* %387 = getelementptr &([20 * i32]* %386)[i64 0][i64 0];
    i32 %388 = load i32* %387;
    i1 %389 = icmp neq i32 %384, i32 %388;
    i32 %390 = select i1 %389 ? i32 %384 : i32 %381;
    [20 * i32]* %391 = getelementptr &([10005 * [20 * i32]]* %6)[i64 0][i32 %390];
    i32* %392 = getelementptr &([20 * i32]* %391)[i64 0][i64 0];
    i32 %393 = load i32* %392;
    ubr ^b11;
  ^b11:
    i32 %394 = phi [^b8, i32 %196] [^while.header1, i32 %393];
    call (i32) -> void @putint(i32 %394);
    call (i32) -> void @putch(i32 10);
    i32 %395 = add i32 %79, i32 -1;
    i1 %396 = icmp neq i32 %395, i32 0;
    cbr i1 %396(prob = 0.97), ^while.body7, ^b3;
}
