internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10005 * [20 * i32]]* @f, align 8 { Flexible };
internal [10005 * i32]* @dep, align 8 { Flexible };
internal [10005 * i32]* @to, align 8 { Flexible };
internal [10005 * i32]* @next, align 8 { Flexible };
internal [10005 * i32]* @head, align 8 { Flexible };
internal func @tree(i32 %x, i32 %d) -> void {
  ^entry:
    [10005 * i32]* %0 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %1 = getelementptr &([10005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 %d;
    [10005 * [20 * i32]]* %2 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    [20 * i32]* %3 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %x];
    i32* %4 = getelementptr &([20 * i32]* %3)[i64 0][i64 0];
    i32 %5 = load i32* %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    i32 %7 = add i32 %d, i32 1;
    [10005 * i32]* %8 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %9 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %6(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %18];
    i32* %11 = getelementptr &([20 * i32]* %3)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    [20 * i32]* %13 = getelementptr &([10005 * [20 * i32]]* %2)[i64 0][i32 %12];
    i32* %14 = getelementptr &([20 * i32]* %13)[i64 0][i32 %10];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &(i32* %11)[i64 1];
    store i32* %16 with i32 %15;
    i1 %17 = icmp neq i32 %15, i32 0;
    i32 %18 = add i32 %10, i32 1;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b;
  ^b:
    [10005 * i32]* %19 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    i32* %20 = getelementptr &([10005 * i32]* %19)[i64 0][i32 %x];
    i32 %21 = load i32* %20;
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %23 = phi [^b, i32 %21] [^while.body1, i32 %27];
    i32* %24 = getelementptr &([10005 * i32]* %8)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    call (i32, i32) -> void @tree(i32 %25, i32 %7);
    i32* %26 = getelementptr &([10005 * i32]* %9)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = icmp neq i32 %27, i32 -1;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b1;
  ^b1:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [10005 * i32]* %3 = ptrcast [10005 * i32]* @to to [10005 * i32]*;
    [10005 * i32]* %4 = ptrcast [10005 * i32]* @next to [10005 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^12;
  ^while.body:
    i32 %5 = phi [^entry, i32 %0] [^while.body, i32 %7];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %7 = call () -> i32 @getch();
    i32 %8 = add i32 %7, i32 -48;
    i1 %9 = icmp ugt i32 %8, i32 9;
    i1 %10 = icmp eq i32 %5, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %6;
    cbr i1 %9(prob = 0.984615), ^while.body, ^12;
  ^12:
    i32 %13 = phi [^entry, i32 %0] [^while.body, i32 %7];
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %15 = add i32 %13, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = phi [^12, i32 %13] [^while.body1, i32 %19];
    i32 %18 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    i32 %22 = mul i32 %18, i32 10;
    i32 %23 = add i32 %22, i32 -48;
    i32 %24 = add i32 %17, i32 %23;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %25 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %26 = call () -> i32 @getch();
    i32 %27 = add i32 %26, i32 -48;
    i1 %28 = icmp ugt i32 %27, i32 9;
    i1 %29 = icmp neq i32 %14, i32 0;
    i32 %30 = neg i32 %25;
    i32 %31 = select i1 %29 ? i32 %30 : i32 %25;
    cbr i1 %28(prob = 0.984615), ^while.body2, ^39;
  ^while.body2:
    i32 %32 = phi [^b, i32 %26] [^while.body2, i32 %34];
    i32 %33 = phi [^b, i32 0] [^while.body2, i32 %38];
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = icmp ugt i32 %35, i32 9;
    i1 %37 = icmp eq i32 %32, i32 45;
    i32 %38 = select i1 %37 ? i32 1 : i32 %33;
    cbr i1 %36(prob = 0.984615), ^while.body2, ^39;
  ^39:
    i32 %40 = phi [^b, i32 %26] [^while.body2, i32 %34];
    i32 %41 = phi [^b, i32 0] [^while.body2, i32 %38];
    i32 %42 = add i32 %40, i32 -48;
    i1 %43 = icmp ult i32 %42, i32 10;
    cbr i1 %43(prob = 0.984615), ^while.body3, ^b1;
  ^while.body3:
    i32 %44 = phi [^39, i32 %40] [^while.body3, i32 %46];
    i32 %45 = phi [^39, i32 0] [^while.body3, i32 %51];
    i32 %46 = call () -> i32 @getch();
    i32 %47 = add i32 %46, i32 -48;
    i1 %48 = icmp ult i32 %47, i32 10;
    i32 %49 = mul i32 %45, i32 10;
    i32 %50 = add i32 %49, i32 -48;
    i32 %51 = add i32 %44, i32 %50;
    cbr i1 %48(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %52 = phi [^39, i32 0] [^while.body3, i32 %51];
    i1 %53 = icmp neq i32 %41, i32 0;
    i32 %54 = neg i32 %52;
    i32 %55 = select i1 %53 ? i32 %54 : i32 %52;
    [10005 * i32]* %56 = ptrcast [10005 * i32]* @dep to [10005 * i32]*;
    i32* %57 = getelementptr &([10005 * i32]* %56)[i64 0][i64 0];
    store i32* %57 with i32 1061109567;
    i1 %58 = icmp sgt i32 %31, i32 0;
    [10005 * i32]* %59 = ptrcast [10005 * i32]* @head to [10005 * i32]*;
    cbr i1 %58(prob = 0.984615), ^while.body4, ^b2;
  ^while.body4:
    i32 %60 = phi [^b1, i32 1] [^while.body4, i32 %62];
    i32* %61 = getelementptr &([10005 * i32]* %59)[i64 0][i32 %60];
    store i32* %61 with i32 -1;
    i32 %62 = add i32 %60, i32 1;
    i1 %63 = icmp sge i32 %31, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.body4, ^b2;
  ^b2:
    i1 %64 = icmp neq i32 %31, i32 1;
    [10005 * [20 * i32]]* %65 = ptrcast [10005 * [20 * i32]]* @f to [10005 * [20 * i32]]*;
    cbr i1 %64(prob = 0.984615), ^while.body5, ^b3;
  ^while.body5:
    i32 %66 = phi [^b2, i32 0] [^b7, i32 %169];
    i32 %67 = phi [^b2, i32 1] [^b7, i32 %167];
    i32 %68 = call () -> i32 @getch();
    i32 %69 = add i32 %68, i32 -48;
    i1 %70 = icmp ugt i32 %69, i32 9;
    cbr i1 %70(prob = 0.984615), ^while.body6, ^83;
  ^b3:
    call (i32, i32) -> void @tree(i32 1, i32 1);
    i1 %71 = icmp neq i32 %55, i32 0;
    cbr i1 %71(prob = 0.984615), ^while.body7, ^b4;
  ^while.body6:
    i32 %72 = phi [^while.body5, i32 %68] [^while.body6, i32 %74];
    i32 %73 = phi [^while.body5, i32 0] [^while.body6, i32 %78];
    i32 %74 = call () -> i32 @getch();
    i32 %75 = add i32 %74, i32 -48;
    i1 %76 = icmp ugt i32 %75, i32 9;
    i1 %77 = icmp eq i32 %72, i32 45;
    i32 %78 = select i1 %77 ? i32 1 : i32 %73;
    cbr i1 %76(prob = 0.984615), ^while.body6, ^83;
  ^while.body7:
    i32 %79 = phi [^b3, i32 %55] [^b11, i32 %394];
    i32 %80 = call () -> i32 @getch();
    i32 %81 = add i32 %80, i32 -48;
    i1 %82 = icmp ugt i32 %81, i32 9;
    cbr i1 %82(prob = 0.984615), ^while.body9, ^110;
  ^83:
    i32 %84 = phi [^while.body5, i32 %68] [^while.body6, i32 %74];
    i32 %85 = phi [^while.body5, i32 0] [^while.body6, i32 %78];
    i32 %86 = add i32 %84, i32 -48;
    i1 %87 = icmp ult i32 %86, i32 10;
    cbr i1 %87(prob = 0.984615), ^while.body8, ^b5;
  ^b4:
    ret i32 0;
  ^while.body8:
    i32 %88 = phi [^83, i32 %84] [^while.body8, i32 %90];
    i32 %89 = phi [^83, i32 0] [^while.body8, i32 %95];
    i32 %90 = call () -> i32 @getch();
    i32 %91 = add i32 %90, i32 -48;
    i1 %92 = icmp ult i32 %91, i32 10;
    i32 %93 = mul i32 %89, i32 10;
    i32 %94 = add i32 %93, i32 -48;
    i32 %95 = add i32 %88, i32 %94;
    cbr i1 %92(prob = 0.984615), ^while.body8, ^b5;
  ^while.body9:
    i32 %96 = phi [^while.body7, i32 %80] [^while.body9, i32 %98];
    i32 %97 = phi [^while.body7, i32 0] [^while.body9, i32 %102];
    i32 %98 = call () -> i32 @getch();
    i32 %99 = add i32 %98, i32 -48;
    i1 %100 = icmp ugt i32 %99, i32 9;
    i1 %101 = icmp eq i32 %96, i32 45;
    i32 %102 = select i1 %101 ? i32 1 : i32 %97;
    cbr i1 %100(prob = 0.984615), ^while.body9, ^110;
  ^b5:
    i32 %103 = phi [^83, i32 0] [^while.body8, i32 %95];
    i32 %104 = call () -> i32 @getch();
    i32 %105 = add i32 %104, i32 -48;
    i1 %106 = icmp ugt i32 %105, i32 9;
    i1 %107 = icmp neq i32 %85, i32 0;
    i32 %108 = neg i32 %103;
    i32 %109 = select i1 %107 ? i32 %108 : i32 %103;
    cbr i1 %106(prob = 0.984615), ^while.body11, ^137;
  ^110:
    i32 %111 = phi [^while.body7, i32 %80] [^while.body9, i32 %98];
    i32 %112 = phi [^while.body7, i32 0] [^while.body9, i32 %102];
    i32 %113 = add i32 %111, i32 -48;
    i1 %114 = icmp ult i32 %113, i32 10;
    cbr i1 %114(prob = 0.984615), ^while.body10, ^b6;
  ^while.body10:
    i32 %115 = phi [^110, i32 %111] [^while.body10, i32 %117];
    i32 %116 = phi [^110, i32 0] [^while.body10, i32 %122];
    i32 %117 = call () -> i32 @getch();
    i32 %118 = add i32 %117, i32 -48;
    i1 %119 = icmp ult i32 %118, i32 10;
    i32 %120 = mul i32 %116, i32 10;
    i32 %121 = add i32 %120, i32 -48;
    i32 %122 = add i32 %115, i32 %121;
    cbr i1 %119(prob = 0.984615), ^while.body10, ^b6;
  ^while.body11:
    i32 %123 = phi [^b5, i32 %104] [^while.body11, i32 %125];
    i32 %124 = phi [^b5, i32 0] [^while.body11, i32 %129];
    i32 %125 = call () -> i32 @getch();
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = icmp ugt i32 %126, i32 9;
    i1 %128 = icmp eq i32 %123, i32 45;
    i32 %129 = select i1 %128 ? i32 1 : i32 %124;
    cbr i1 %127(prob = 0.984615), ^while.body11, ^137;
  ^b6:
    i32 %130 = phi [^110, i32 0] [^while.body10, i32 %122];
    i32 %131 = call () -> i32 @getch();
    i32 %132 = add i32 %131, i32 -48;
    i1 %133 = icmp ugt i32 %132, i32 9;
    i1 %134 = icmp neq i32 %112, i32 0;
    i32 %135 = neg i32 %130;
    i32 %136 = select i1 %134 ? i32 %135 : i32 %130;
    cbr i1 %133(prob = 0.984615), ^while.body13, ^170;
  ^137:
    i32 %138 = phi [^b5, i32 %104] [^while.body11, i32 %125];
    i32 %139 = phi [^b5, i32 0] [^while.body11, i32 %129];
    i32 %140 = add i32 %138, i32 -48;
    i1 %141 = icmp ult i32 %140, i32 10;
    cbr i1 %141(prob = 0.984615), ^while.body12, ^b7;
  ^while.body12:
    i32 %142 = phi [^137, i32 %138] [^while.body12, i32 %144];
    i32 %143 = phi [^137, i32 0] [^while.body12, i32 %149];
    i32 %144 = call () -> i32 @getch();
    i32 %145 = add i32 %144, i32 -48;
    i1 %146 = icmp ult i32 %145, i32 10;
    i32 %147 = mul i32 %143, i32 10;
    i32 %148 = add i32 %147, i32 -48;
    i32 %149 = add i32 %142, i32 %148;
    cbr i1 %146(prob = 0.984615), ^while.body12, ^b7;
  ^while.body13:
    i32 %150 = phi [^b6, i32 %131] [^while.body13, i32 %152];
    i32 %151 = phi [^b6, i32 0] [^while.body13, i32 %156];
    i32 %152 = call () -> i32 @getch();
    i32 %153 = add i32 %152, i32 -48;
    i1 %154 = icmp ugt i32 %153, i32 9;
    i1 %155 = icmp eq i32 %150, i32 45;
    i32 %156 = select i1 %155 ? i32 1 : i32 %151;
    cbr i1 %154(prob = 0.984615), ^while.body13, ^170;
  ^b7:
    i32 %157 = phi [^137, i32 0] [^while.body12, i32 %149];
    i1 %158 = icmp neq i32 %139, i32 0;
    i32 %159 = neg i32 %157;
    i32 %160 = select i1 %158 ? i32 %159 : i32 %157;
    i32* %161 = getelementptr &([10005 * i32]* %3)[i64 0][i32 %66];
    store i32* %161 with i32 %160;
    [20 * i32]* %162 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %160];
    i32* %163 = getelementptr &([20 * i32]* %162)[i64 0][i64 0];
    i32* %164 = getelementptr &([10005 * i32]* %59)[i64 0][i32 %109];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &([10005 * i32]* %4)[i64 0][i32 %66];
    store i32* %166 with i32 %165;
    store i32* %164 with i32 %66;
    store i32* %163 with i32 %109;
    i32 %167 = add i32 %67, i32 1;
    i1 %168 = icmp neq i32 %31, i32 %167;
    i32 %169 = add i32 %66, i32 1;
    cbr i1 %168(prob = 0.984615), ^while.body5, ^b3;
  ^170:
    i32 %171 = phi [^b6, i32 %131] [^while.body13, i32 %152];
    i32 %172 = phi [^b6, i32 0] [^while.body13, i32 %156];
    i32 %173 = add i32 %171, i32 -48;
    i1 %174 = icmp ult i32 %173, i32 10;
    cbr i1 %174(prob = 0.984615), ^while.body14, ^b8;
  ^while.body14:
    i32 %175 = phi [^170, i32 %171] [^while.body14, i32 %177];
    i32 %176 = phi [^170, i32 0] [^while.body14, i32 %182];
    i32 %177 = call () -> i32 @getch();
    i32 %178 = add i32 %177, i32 -48;
    i1 %179 = icmp ult i32 %178, i32 10;
    i32 %180 = mul i32 %176, i32 10;
    i32 %181 = add i32 %180, i32 -48;
    i32 %182 = add i32 %175, i32 %181;
    cbr i1 %179(prob = 0.984615), ^while.body14, ^b8;
  ^b8:
    i32 %183 = phi [^170, i32 0] [^while.body14, i32 %182];
    i1 %184 = icmp neq i32 %172, i32 0;
    i32 %185 = neg i32 %183;
    i32 %186 = select i1 %184 ? i32 %185 : i32 %183;
    i32* %187 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %186];
    i32* %188 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %136];
    i32 %189 = load i32* %188;
    i32 %190 = load i32* %187;
    i1 %191 = icmp slt i32 %189, i32 %190;
    i32 %192 = select i1 %191 ? i32 %186 : i32 %136;
    i32* %193 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i32 %195 = select i1 %191 ? i32 %136 : i32 %186;
    i32* %196 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %195];
    i32 %197 = load i32* %196;
    i1 %198 = icmp sgt i32 %194, i32 %197;
    cbr i1 %198(prob = 0.984615), ^while.body15, ^b9;
  ^while.body15:
    i32 %199 = phi [^b8, i32 %192] [^b12, i32 %396];
    i32 %200 = phi [^b8, i32 19] [^b12, i32 %400];
    [20 * i32]* %201 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %199];
    i32* %202 = getelementptr &([20 * i32]* %201)[i64 0][i32 %200];
    i32 %203 = load i32* %202;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.5), ^b10, ^b12;
  ^b9:
    i32 %205 = phi [^b8, i32 %192] [^b12, i32 %396];
    i1 %206 = icmp eq i32 %195, i32 %205;
    cbr i1 %206(prob = 0.5), ^b11, ^while.body16;
  ^b10:
    i32* %207 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %203];
    i32 %208 = load i32* %207;
    i1 %209 = icmp sle i32 %197, i32 %208;
    i32 %210 = select i1 %209 ? i32 %203 : i32 %199;
    ubr ^b12;
  ^while.body16:
    [20 * i32]* %211 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %205];
    i32* %212 = getelementptr &([20 * i32]* %211)[i64 0][i64 19];
    i32 %213 = load i32* %212;
    [20 * i32]* %214 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %195];
    i32* %215 = getelementptr &([20 * i32]* %214)[i64 0][i64 19];
    i32 %216 = load i32* %215;
    i1 %217 = icmp neq i32 %213, i32 %216;
    i32 %218 = select i1 %217 ? i32 %213 : i32 %205;
    [20 * i32]* %219 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %218];
    i32* %220 = getelementptr &([20 * i32]* %219)[i64 0][i64 18];
    i32 %221 = load i32* %220;
    i32 %222 = select i1 %217 ? i32 %216 : i32 %195;
    [20 * i32]* %223 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %222];
    i32* %224 = getelementptr &([20 * i32]* %223)[i64 0][i64 18];
    i32 %225 = load i32* %224;
    i1 %226 = icmp neq i32 %221, i32 %225;
    i32 %227 = select i1 %226 ? i32 %221 : i32 %218;
    [20 * i32]* %228 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %227];
    i32* %229 = getelementptr &([20 * i32]* %228)[i64 0][i64 17];
    i32 %230 = load i32* %229;
    i32 %231 = select i1 %226 ? i32 %225 : i32 %222;
    [20 * i32]* %232 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %231];
    i32* %233 = getelementptr &([20 * i32]* %232)[i64 0][i64 17];
    i32 %234 = load i32* %233;
    i1 %235 = icmp neq i32 %230, i32 %234;
    i32 %236 = select i1 %235 ? i32 %230 : i32 %227;
    [20 * i32]* %237 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %236];
    i32* %238 = getelementptr &([20 * i32]* %237)[i64 0][i64 16];
    i32 %239 = load i32* %238;
    i32 %240 = select i1 %235 ? i32 %234 : i32 %231;
    [20 * i32]* %241 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %240];
    i32* %242 = getelementptr &([20 * i32]* %241)[i64 0][i64 16];
    i32 %243 = load i32* %242;
    i1 %244 = icmp neq i32 %239, i32 %243;
    i32 %245 = select i1 %244 ? i32 %239 : i32 %236;
    [20 * i32]* %246 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %245];
    i32* %247 = getelementptr &([20 * i32]* %246)[i64 0][i64 15];
    i32 %248 = load i32* %247;
    i32 %249 = select i1 %244 ? i32 %243 : i32 %240;
    [20 * i32]* %250 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %249];
    i32* %251 = getelementptr &([20 * i32]* %250)[i64 0][i64 15];
    i32 %252 = load i32* %251;
    i1 %253 = icmp neq i32 %248, i32 %252;
    i32 %254 = select i1 %253 ? i32 %248 : i32 %245;
    [20 * i32]* %255 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %254];
    i32* %256 = getelementptr &([20 * i32]* %255)[i64 0][i64 14];
    i32 %257 = load i32* %256;
    i32 %258 = select i1 %253 ? i32 %252 : i32 %249;
    [20 * i32]* %259 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %258];
    i32* %260 = getelementptr &([20 * i32]* %259)[i64 0][i64 14];
    i32 %261 = load i32* %260;
    i1 %262 = icmp neq i32 %257, i32 %261;
    i32 %263 = select i1 %262 ? i32 %257 : i32 %254;
    [20 * i32]* %264 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %263];
    i32* %265 = getelementptr &([20 * i32]* %264)[i64 0][i64 13];
    i32 %266 = load i32* %265;
    i32 %267 = select i1 %262 ? i32 %261 : i32 %258;
    [20 * i32]* %268 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %267];
    i32* %269 = getelementptr &([20 * i32]* %268)[i64 0][i64 13];
    i32 %270 = load i32* %269;
    i1 %271 = icmp neq i32 %266, i32 %270;
    i32 %272 = select i1 %271 ? i32 %266 : i32 %263;
    [20 * i32]* %273 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %272];
    i32* %274 = getelementptr &([20 * i32]* %273)[i64 0][i64 12];
    i32 %275 = load i32* %274;
    i32 %276 = select i1 %271 ? i32 %270 : i32 %267;
    [20 * i32]* %277 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %276];
    i32* %278 = getelementptr &([20 * i32]* %277)[i64 0][i64 12];
    i32 %279 = load i32* %278;
    i1 %280 = icmp neq i32 %275, i32 %279;
    i32 %281 = select i1 %280 ? i32 %275 : i32 %272;
    [20 * i32]* %282 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %281];
    i32* %283 = getelementptr &([20 * i32]* %282)[i64 0][i64 11];
    i32 %284 = load i32* %283;
    i32 %285 = select i1 %280 ? i32 %279 : i32 %276;
    [20 * i32]* %286 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %285];
    i32* %287 = getelementptr &([20 * i32]* %286)[i64 0][i64 11];
    i32 %288 = load i32* %287;
    i1 %289 = icmp neq i32 %284, i32 %288;
    i32 %290 = select i1 %289 ? i32 %284 : i32 %281;
    [20 * i32]* %291 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %290];
    i32* %292 = getelementptr &([20 * i32]* %291)[i64 0][i64 10];
    i32 %293 = load i32* %292;
    i32 %294 = select i1 %289 ? i32 %288 : i32 %285;
    [20 * i32]* %295 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %294];
    i32* %296 = getelementptr &([20 * i32]* %295)[i64 0][i64 10];
    i32 %297 = load i32* %296;
    i1 %298 = icmp neq i32 %293, i32 %297;
    i32 %299 = select i1 %298 ? i32 %293 : i32 %290;
    [20 * i32]* %300 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %299];
    i32* %301 = getelementptr &([20 * i32]* %300)[i64 0][i64 9];
    i32 %302 = load i32* %301;
    i32 %303 = select i1 %298 ? i32 %297 : i32 %294;
    [20 * i32]* %304 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %303];
    i32* %305 = getelementptr &([20 * i32]* %304)[i64 0][i64 9];
    i32 %306 = load i32* %305;
    i1 %307 = icmp neq i32 %302, i32 %306;
    i32 %308 = select i1 %307 ? i32 %302 : i32 %299;
    [20 * i32]* %309 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %308];
    i32* %310 = getelementptr &([20 * i32]* %309)[i64 0][i64 8];
    i32 %311 = load i32* %310;
    i32 %312 = select i1 %307 ? i32 %306 : i32 %303;
    [20 * i32]* %313 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %312];
    i32* %314 = getelementptr &([20 * i32]* %313)[i64 0][i64 8];
    i32 %315 = load i32* %314;
    i1 %316 = icmp neq i32 %311, i32 %315;
    i32 %317 = select i1 %316 ? i32 %311 : i32 %308;
    [20 * i32]* %318 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %317];
    i32* %319 = getelementptr &([20 * i32]* %318)[i64 0][i64 7];
    i32 %320 = load i32* %319;
    i32 %321 = select i1 %316 ? i32 %315 : i32 %312;
    [20 * i32]* %322 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %321];
    i32* %323 = getelementptr &([20 * i32]* %322)[i64 0][i64 7];
    i32 %324 = load i32* %323;
    i1 %325 = icmp neq i32 %320, i32 %324;
    i32 %326 = select i1 %325 ? i32 %320 : i32 %317;
    [20 * i32]* %327 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %326];
    i32* %328 = getelementptr &([20 * i32]* %327)[i64 0][i64 6];
    i32 %329 = load i32* %328;
    i32 %330 = select i1 %325 ? i32 %324 : i32 %321;
    [20 * i32]* %331 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %330];
    i32* %332 = getelementptr &([20 * i32]* %331)[i64 0][i64 6];
    i32 %333 = load i32* %332;
    i1 %334 = icmp neq i32 %329, i32 %333;
    i32 %335 = select i1 %334 ? i32 %329 : i32 %326;
    [20 * i32]* %336 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %335];
    i32* %337 = getelementptr &([20 * i32]* %336)[i64 0][i64 5];
    i32 %338 = load i32* %337;
    i32 %339 = select i1 %334 ? i32 %333 : i32 %330;
    [20 * i32]* %340 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %339];
    i32* %341 = getelementptr &([20 * i32]* %340)[i64 0][i64 5];
    i32 %342 = load i32* %341;
    i1 %343 = icmp neq i32 %338, i32 %342;
    i32 %344 = select i1 %343 ? i32 %338 : i32 %335;
    [20 * i32]* %345 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %344];
    i32* %346 = getelementptr &([20 * i32]* %345)[i64 0][i64 4];
    i32 %347 = load i32* %346;
    i32 %348 = select i1 %343 ? i32 %342 : i32 %339;
    [20 * i32]* %349 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %348];
    i32* %350 = getelementptr &([20 * i32]* %349)[i64 0][i64 4];
    i32 %351 = load i32* %350;
    i1 %352 = icmp neq i32 %347, i32 %351;
    i32 %353 = select i1 %352 ? i32 %347 : i32 %344;
    [20 * i32]* %354 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %353];
    i32* %355 = getelementptr &([20 * i32]* %354)[i64 0][i64 3];
    i32 %356 = load i32* %355;
    i32 %357 = select i1 %352 ? i32 %351 : i32 %348;
    [20 * i32]* %358 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %357];
    i32* %359 = getelementptr &([20 * i32]* %358)[i64 0][i64 3];
    i32 %360 = load i32* %359;
    i1 %361 = icmp neq i32 %356, i32 %360;
    i32 %362 = select i1 %361 ? i32 %356 : i32 %353;
    [20 * i32]* %363 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %362];
    i32* %364 = getelementptr &([20 * i32]* %363)[i64 0][i64 2];
    i32 %365 = load i32* %364;
    i32 %366 = select i1 %361 ? i32 %360 : i32 %357;
    [20 * i32]* %367 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %366];
    i32* %368 = getelementptr &([20 * i32]* %367)[i64 0][i64 2];
    i32 %369 = load i32* %368;
    i1 %370 = icmp neq i32 %365, i32 %369;
    i32 %371 = select i1 %370 ? i32 %365 : i32 %362;
    [20 * i32]* %372 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %371];
    i32* %373 = getelementptr &([20 * i32]* %372)[i64 0][i64 1];
    i32 %374 = load i32* %373;
    i32 %375 = select i1 %370 ? i32 %369 : i32 %366;
    [20 * i32]* %376 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %375];
    i32* %377 = getelementptr &([20 * i32]* %376)[i64 0][i64 1];
    i32 %378 = load i32* %377;
    i1 %379 = icmp neq i32 %374, i32 %378;
    i32 %380 = select i1 %379 ? i32 %374 : i32 %371;
    [20 * i32]* %381 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %380];
    i32* %382 = getelementptr &([20 * i32]* %381)[i64 0][i64 0];
    i32 %383 = load i32* %382;
    i32 %384 = select i1 %379 ? i32 %378 : i32 %375;
    [20 * i32]* %385 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %384];
    i32* %386 = getelementptr &([20 * i32]* %385)[i64 0][i64 0];
    i32 %387 = load i32* %386;
    i1 %388 = icmp neq i32 %383, i32 %387;
    i32 %389 = select i1 %388 ? i32 %383 : i32 %380;
    [20 * i32]* %390 = getelementptr &([10005 * [20 * i32]]* %65)[i64 0][i32 %389];
    i32* %391 = getelementptr &([20 * i32]* %390)[i64 0][i64 0];
    i32 %392 = load i32* %391;
    ubr ^b11;
  ^b11:
    i32 %393 = phi [^b9, i32 %205] [^while.body16, i32 %392];
    call (i32) -> void @putint(i32 %393);
    call (i32) -> void @putch(i32 10);
    i32 %394 = add i32 %79, i32 -1;
    i1 %395 = icmp neq i32 %394, i32 0;
    cbr i1 %395(prob = 0.984615), ^while.body7, ^b4;
  ^b12:
    i32 %396 = phi [^while.body15, i32 %199] [^b10, i32 %210];
    i32* %397 = getelementptr &([10005 * i32]* %56)[i64 0][i32 %396];
    i32 %398 = load i32* %397;
    i1 %399 = icmp slt i32 %197, i32 %398;
    i32 %400 = add i32 %200, i32 -1;
    cbr i1 %399(prob = 0.984615), ^while.body15, ^b9;
}
