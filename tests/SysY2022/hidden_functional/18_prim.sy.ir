internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u { Flexible };
internal [1005 * i32]* @v { Flexible };
internal [1005 * i32]* @c { Flexible };
internal [1005 * i32]* @fa { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %4 = add i32 %0, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ult i32 %7, i32 10;
    cbr i1 %8(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp slt i32 %9, i32 48;
    i1 %11 = icmp sgt i32 %9, i32 57;
    i1 %12 = or i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %13 = phi [^entry1, i32 %9] [^while.body2, i32 %15];
    i32 %14 = phi [^entry1, i32 0] [^while.body2, i32 %20];
    i32 %15 = call () -> i32 @getch();
    i1 %16 = icmp slt i32 %15, i32 48;
    i1 %17 = icmp sgt i32 %15, i32 57;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %13, i32 45;
    i32 %20 = select i1 %19 ? i32 1 : i32 %14;
    cbr i1 %18(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %21 = phi [^entry1, i32 %9] [^while.body2, i32 %15];
    i32 %22 = phi [^entry1, i32 0] [^while.body2, i32 %20];
    i32 %23 = add i32 %21, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    cbr i1 %24(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %25 = phi [^while.header1, i32 %21] [^while.body3, i32 %27];
    i32 %26 = phi [^while.header1, i32 0] [^while.body3, i32 %32];
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -48;
    i1 %29 = icmp ult i32 %28, i32 10;
    i32 %30 = mul i32 %26, i32 10;
    i32 %31 = add i32 %30, i32 -48;
    i32 %32 = add i32 %25, i32 %31;
    cbr i1 %29(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %33 = phi [^while.header1, i32 0] [^while.body3, i32 %32];
    i1 %34 = icmp neq i32 %22, i32 0;
    i32 %35 = neg i32 %33;
    i32 %36 = select i1 %34 ? i32 %35 : i32 %33;
    i1 %37 = icmp sgt i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^prebody, ^entry2;
  ^prebody:
    [1005 * i32]* %38 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %39 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %40 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    ubr ^while.body4;
  ^entry2:
    [1005 * i32]* %41 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    [1005 * i32]* %42 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %43 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %44 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    ubr ^while.header2;
  ^while.body4:
    i32 %45 = phi [^prebody, i32 0] [^b5, i32 %151];
    i32 %46 = call () -> i32 @getch();
    i1 %47 = icmp slt i32 %46, i32 48;
    i1 %48 = icmp sgt i32 %46, i32 57;
    i1 %49 = or i1 %47, i1 %48;
    i32* %50 = getelementptr &([1005 * i32]* %38)[i64 0][i32 %45];
    cbr i1 %49(prob = 0.97), ^while.body5, ^while.header3;
  ^while.header2:
    i32 %51 = phi [^entry2, i32 0] [^while.body6, i32 %51] [^b2, i32 %79];
    i32 %52 = phi [^entry2, i32 0] [^while.body6, i32 %52] [^b2, i32 %80];
    i1 %53 = icmp slt i32 %52, i32 0;
    cbr i1 %53(prob = 0.97), ^while.body6, ^b1;
  ^while.body5:
    i32 %54 = phi [^while.body4, i32 %46] [^while.body5, i32 %56];
    i32 %55 = phi [^while.body4, i32 0] [^while.body5, i32 %61];
    i32 %56 = call () -> i32 @getch();
    i1 %57 = icmp slt i32 %56, i32 48;
    i1 %58 = icmp sgt i32 %56, i32 57;
    i1 %59 = or i1 %57, i1 %58;
    i1 %60 = icmp eq i32 %54, i32 45;
    i32 %61 = select i1 %60 ? i32 1 : i32 %55;
    cbr i1 %59(prob = 0.97), ^while.body5, ^while.header3;
  ^while.header3:
    i32 %62 = phi [^while.body4, i32 %46] [^while.body5, i32 %56];
    i32 %63 = phi [^while.body4, i32 0] [^while.body5, i32 %61];
    i32 %64 = add i32 %62, i32 -48;
    i1 %65 = icmp ult i32 %64, i32 10;
    cbr i1 %65(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32* %66 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %52];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %52];
    i32 %69 = load i32* %68;
    i32 %70 = call (i32) -> i32 @find(i32 %67);
    i32 %71 = call (i32) -> i32 @find(i32 %69);
    i1 %72 = icmp eq i32 %70, i32 %71;
    cbr i1 %72(prob = 0.5), ^while.header2, ^b2;
  ^b1:
    ret i32 %51;
  ^b2:
    i32* %73 = getelementptr &([1005 * i32]* %42)[i64 0][i32 %52];
    i32 %74 = load i32* %73;
    i32 %75 = load i32* %66;
    i32 %76 = call (i32) -> i32 @find(i32 %75);
    i32* %77 = getelementptr &([1005 * i32]* %41)[i64 0][i32 %76];
    i32 %78 = load i32* %68;
    store i32* %77 with i32 %78;
    i32 %79 = add i32 %51, i32 %74;
    i32 %80 = add i32 %52, i32 1;
    ubr ^while.header2;
  ^while.body7:
    i32 %81 = phi [^while.header3, i32 %62] [^while.body7, i32 %83];
    i32 %82 = phi [^while.header3, i32 0] [^while.body7, i32 %88];
    i32 %83 = call () -> i32 @getch();
    i32 %84 = add i32 %83, i32 -48;
    i1 %85 = icmp ult i32 %84, i32 10;
    i32 %86 = mul i32 %82, i32 10;
    i32 %87 = add i32 %86, i32 -48;
    i32 %88 = add i32 %81, i32 %87;
    cbr i1 %85(prob = 0.97), ^while.body7, ^b3;
  ^b3:
    i32 %89 = phi [^while.header3, i32 0] [^while.body7, i32 %88];
    i1 %90 = icmp neq i32 %63, i32 0;
    i32 %91 = neg i32 %89;
    i32 %92 = select i1 %90 ? i32 %91 : i32 %89;
    store i32* %50 with i32 %92;
    i32 %93 = call () -> i32 @getch();
    i1 %94 = icmp slt i32 %93, i32 48;
    i1 %95 = icmp sgt i32 %93, i32 57;
    i1 %96 = or i1 %94, i1 %95;
    i32* %97 = getelementptr &([1005 * i32]* %39)[i64 0][i32 %45];
    cbr i1 %96(prob = 0.97), ^while.body8, ^while.header4;
  ^while.body8:
    i32 %98 = phi [^b3, i32 %93] [^while.body8, i32 %100];
    i32 %99 = phi [^b3, i32 0] [^while.body8, i32 %105];
    i32 %100 = call () -> i32 @getch();
    i1 %101 = icmp slt i32 %100, i32 48;
    i1 %102 = icmp sgt i32 %100, i32 57;
    i1 %103 = or i1 %101, i1 %102;
    i1 %104 = icmp eq i32 %98, i32 45;
    i32 %105 = select i1 %104 ? i32 1 : i32 %99;
    cbr i1 %103(prob = 0.97), ^while.body8, ^while.header4;
  ^while.header4:
    i32 %106 = phi [^b3, i32 %93] [^while.body8, i32 %100];
    i32 %107 = phi [^b3, i32 0] [^while.body8, i32 %105];
    i32 %108 = add i32 %106, i32 -48;
    i1 %109 = icmp ult i32 %108, i32 10;
    cbr i1 %109(prob = 0.97), ^while.body9, ^b4;
  ^while.body9:
    i32 %110 = phi [^while.header4, i32 %106] [^while.body9, i32 %112];
    i32 %111 = phi [^while.header4, i32 0] [^while.body9, i32 %117];
    i32 %112 = call () -> i32 @getch();
    i32 %113 = add i32 %112, i32 -48;
    i1 %114 = icmp ult i32 %113, i32 10;
    i32 %115 = mul i32 %111, i32 10;
    i32 %116 = add i32 %115, i32 -48;
    i32 %117 = add i32 %110, i32 %116;
    cbr i1 %114(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %118 = phi [^while.header4, i32 0] [^while.body9, i32 %117];
    i1 %119 = icmp neq i32 %107, i32 0;
    i32 %120 = neg i32 %118;
    i32 %121 = select i1 %119 ? i32 %120 : i32 %118;
    store i32* %97 with i32 %121;
    i32 %122 = call () -> i32 @getch();
    i1 %123 = icmp slt i32 %122, i32 48;
    i1 %124 = icmp sgt i32 %122, i32 57;
    i1 %125 = or i1 %123, i1 %124;
    i32* %126 = getelementptr &([1005 * i32]* %40)[i64 0][i32 %45];
    cbr i1 %125(prob = 0.97), ^while.body10, ^while.header5;
  ^while.body10:
    i32 %127 = phi [^b4, i32 %122] [^while.body10, i32 %129];
    i32 %128 = phi [^b4, i32 0] [^while.body10, i32 %134];
    i32 %129 = call () -> i32 @getch();
    i1 %130 = icmp slt i32 %129, i32 48;
    i1 %131 = icmp sgt i32 %129, i32 57;
    i1 %132 = or i1 %130, i1 %131;
    i1 %133 = icmp eq i32 %127, i32 45;
    i32 %134 = select i1 %133 ? i32 1 : i32 %128;
    cbr i1 %132(prob = 0.97), ^while.body10, ^while.header5;
  ^while.header5:
    i32 %135 = phi [^b4, i32 %122] [^while.body10, i32 %129];
    i32 %136 = phi [^b4, i32 0] [^while.body10, i32 %134];
    i32 %137 = add i32 %135, i32 -48;
    i1 %138 = icmp ult i32 %137, i32 10;
    cbr i1 %138(prob = 0.97), ^while.body11, ^b5;
  ^while.body11:
    i32 %139 = phi [^while.header5, i32 %135] [^while.body11, i32 %141];
    i32 %140 = phi [^while.header5, i32 0] [^while.body11, i32 %146];
    i32 %141 = call () -> i32 @getch();
    i32 %142 = add i32 %141, i32 -48;
    i1 %143 = icmp ult i32 %142, i32 10;
    i32 %144 = mul i32 %140, i32 10;
    i32 %145 = add i32 %144, i32 -48;
    i32 %146 = add i32 %139, i32 %145;
    cbr i1 %143(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %147 = phi [^while.header5, i32 0] [^while.body11, i32 %146];
    i1 %148 = icmp neq i32 %136, i32 0;
    i32 %149 = neg i32 %147;
    i32 %150 = select i1 %148 ? i32 %149 : i32 %147;
    store i32* %126 with i32 %150;
    i32 %151 = add i32 %45, i32 1;
    i1 %152 = icmp sgt i32 %36, i32 %151;
    cbr i1 %152(prob = 0.97), ^while.body4, ^entry2;
}
