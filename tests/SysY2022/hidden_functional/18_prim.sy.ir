internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = icmp slt i32 %4, i32 48;
    i1 %6 = icmp sgt i32 %4, i32 57;
    i1 %7 = or i1 %5, i1 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %4];
    i32 %9 = add i32 %8, i32 -48;
    i1 %10 = icmp ult i32 %9, i32 10;
    cbr i1 %10(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ult i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %14 = call () -> i32 @getch();
    i1 %15 = icmp slt i32 %14, i32 48;
    i1 %16 = icmp sgt i32 %14, i32 57;
    i1 %17 = or i1 %15, i1 %16;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %18 = phi [^entry1, i32 %14] [^while.body2, i32 %20];
    i32 %19 = phi [^entry1, i32 0] [^while.body2, i32 %25];
    i32 %20 = call () -> i32 @getch();
    i1 %21 = icmp slt i32 %20, i32 48;
    i1 %22 = icmp sgt i32 %20, i32 57;
    i1 %23 = or i1 %21, i1 %22;
    i1 %24 = icmp eq i32 %18, i32 45;
    i32 %25 = select i1 %24 ? i32 1 : i32 %19;
    cbr i1 %23(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %26 = phi [^entry1, i32 %14] [^while.body2, i32 %20];
    i32 %27 = phi [^entry1, i32 0] [^while.body2, i32 %25];
    i32 %28 = add i32 %26, i32 -48;
    i1 %29 = icmp ult i32 %28, i32 10;
    cbr i1 %29(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %30 = phi [^while.header1, i32 %26] [^while.body3, i32 %32];
    i32 %31 = phi [^while.header1, i32 0] [^while.body3, i32 %37];
    i32 %32 = call () -> i32 @getch();
    i32 %33 = add i32 %32, i32 -48;
    i1 %34 = icmp ult i32 %33, i32 10;
    i32 %35 = mul i32 %31, i32 10;
    i32 %36 = add i32 %35, i32 -48;
    i32 %37 = add i32 %30, i32 %36;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %38 = phi [^while.header1, i32 0] [^while.body3, i32 %37];
    i1 %39 = icmp neq i32 %27, i32 0;
    i32 %40 = neg i32 %38;
    i32 %41 = select i1 %39 ? i32 %40 : i32 %38;
    i1 %42 = icmp sgt i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^prebody, ^entry2;
  ^prebody:
    [1005 * i32]* %43 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %44 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %45 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    ubr ^while.body4;
  ^entry2:
    [1005 * i32]* %46 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    [1005 * i32]* %47 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %48 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %49 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    ubr ^while.header2;
  ^while.body4:
    i32 %50 = phi [^prebody, i32 0] [^b6, i32 %175];
    i32 %51 = call () -> i32 @getch();
    i1 %52 = icmp slt i32 %51, i32 48;
    i1 %53 = icmp sgt i32 %51, i32 57;
    i1 %54 = or i1 %52, i1 %53;
    i32* %55 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %50];
    cbr i1 %54(prob = 0.97), ^while.body6, ^while.header3;
  ^while.header2:
    i32 %56 = phi [^entry2, i32 0] [^while.header5, i32 %61];
    i1 %57 = icmp slt i32 %56, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body5, ^while.header4;
  ^while.body5:
    i32* %58 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %56];
    i32* %59 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %56];
    i32* %60 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %56];
    i32 %61 = add i32 %56, i32 1;
    ubr ^while.header5;
  ^while.body6:
    i32 %62 = phi [^while.body4, i32 %51] [^while.body6, i32 %64];
    i32 %63 = phi [^while.body4, i32 0] [^while.body6, i32 %69];
    i32 %64 = call () -> i32 @getch();
    i1 %65 = icmp slt i32 %64, i32 48;
    i1 %66 = icmp sgt i32 %64, i32 57;
    i1 %67 = or i1 %65, i1 %66;
    i1 %68 = icmp eq i32 %62, i32 45;
    i32 %69 = select i1 %68 ? i32 1 : i32 %63;
    cbr i1 %67(prob = 0.97), ^while.body6, ^while.header3;
  ^while.header3:
    i32 %70 = phi [^while.body4, i32 %51] [^while.body6, i32 %64];
    i32 %71 = phi [^while.body4, i32 0] [^while.body6, i32 %69];
    i32 %72 = add i32 %70, i32 -48;
    i1 %73 = icmp ult i32 %72, i32 10;
    cbr i1 %73(prob = 0.97), ^while.body7, ^b1;
  ^while.header4:
    i32 %74 = phi [^while.header2, i32 0] [^while.body8, i32 %74] [^b3, i32 %113];
    i32 %75 = phi [^while.header2, i32 0] [^while.body8, i32 %75] [^b3, i32 %114];
    i1 %76 = icmp slt i32 %75, i32 0;
    cbr i1 %76(prob = 0.97), ^while.body8, ^b2;
  ^while.header5:
    i32 %77 = phi [^while.body5, i32 %61] [^b4, i32 %133];
    i1 %78 = icmp slt i32 %77, i32 0;
    cbr i1 %78(prob = 0.97), ^while.body9, ^while.header2;
  ^while.body7:
    i32 %79 = phi [^while.header3, i32 %70] [^while.body7, i32 %81];
    i32 %80 = phi [^while.header3, i32 0] [^while.body7, i32 %86];
    i32 %81 = call () -> i32 @getch();
    i32 %82 = add i32 %81, i32 -48;
    i1 %83 = icmp ult i32 %82, i32 10;
    i32 %84 = mul i32 %80, i32 10;
    i32 %85 = add i32 %84, i32 -48;
    i32 %86 = add i32 %79, i32 %85;
    cbr i1 %83(prob = 0.97), ^while.body7, ^b1;
  ^b1:
    i32 %87 = phi [^while.header3, i32 0] [^while.body7, i32 %86];
    i1 %88 = icmp neq i32 %71, i32 0;
    i32 %89 = neg i32 %87;
    i32 %90 = select i1 %88 ? i32 %89 : i32 %87;
    store i32* %55 with i32 %90;
    i32 %91 = call () -> i32 @getch();
    i1 %92 = icmp slt i32 %91, i32 48;
    i1 %93 = icmp sgt i32 %91, i32 57;
    i1 %94 = or i1 %92, i1 %93;
    i32* %95 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %50];
    cbr i1 %94(prob = 0.97), ^while.body10, ^while.header6;
  ^while.body8:
    i32* %96 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %75];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %75];
    i32 %99 = load i32* %98;
    i32 %100 = call (i32) -> i32 @find(i32 %97);
    i32 %101 = call (i32) -> i32 @find(i32 %99);
    i1 %102 = icmp eq i32 %100, i32 %101;
    cbr i1 %102(prob = 0.5), ^while.header4, ^b3;
  ^b2:
    ret i32 %74;
  ^while.body9:
    i32* %103 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %77];
    i32 %104 = load i32* %58;
    i32 %105 = load i32* %103;
    i1 %106 = icmp sgt i32 %104, i32 %105;
    cbr i1 %106(prob = 0.5), ^if.then, ^b4;
  ^b3:
    i32* %107 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %75];
    i32 %108 = load i32* %107;
    i32 %109 = load i32* %96;
    i32 %110 = call (i32) -> i32 @find(i32 %109);
    i32* %111 = getelementptr &([1005 * i32]* %46)[i64 0][i32 %110];
    i32 %112 = load i32* %98;
    store i32* %111 with i32 %112;
    i32 %113 = add i32 %74, i32 %108;
    i32 %114 = add i32 %75, i32 1;
    ubr ^while.header4;
  ^while.body10:
    i32 %115 = phi [^b1, i32 %91] [^while.body10, i32 %117];
    i32 %116 = phi [^b1, i32 0] [^while.body10, i32 %122];
    i32 %117 = call () -> i32 @getch();
    i1 %118 = icmp slt i32 %117, i32 48;
    i1 %119 = icmp sgt i32 %117, i32 57;
    i1 %120 = or i1 %118, i1 %119;
    i1 %121 = icmp eq i32 %115, i32 45;
    i32 %122 = select i1 %121 ? i32 1 : i32 %116;
    cbr i1 %120(prob = 0.97), ^while.body10, ^while.header6;
  ^while.header6:
    i32 %123 = phi [^b1, i32 %91] [^while.body10, i32 %117];
    i32 %124 = phi [^b1, i32 0] [^while.body10, i32 %122];
    i32 %125 = add i32 %123, i32 -48;
    i1 %126 = icmp ult i32 %125, i32 10;
    cbr i1 %126(prob = 0.97), ^while.body11, ^b5;
  ^if.then:
    i32* %127 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %77];
    i32 %128 = load i32* %60;
    i32 %129 = load i32* %127;
    store i32* %60 with i32 %129;
    store i32* %127 with i32 %128;
    i32* %130 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %77];
    i32 %131 = load i32* %59;
    i32 %132 = load i32* %130;
    store i32* %59 with i32 %132;
    store i32* %130 with i32 %131;
    store i32* %58 with i32 %105;
    store i32* %103 with i32 %104;
    ubr ^b4;
  ^b4:
    i32 %133 = add i32 %77, i32 1;
    ubr ^while.header5;
  ^while.body11:
    i32 %134 = phi [^while.header6, i32 %123] [^while.body11, i32 %136];
    i32 %135 = phi [^while.header6, i32 0] [^while.body11, i32 %141];
    i32 %136 = call () -> i32 @getch();
    i32 %137 = add i32 %136, i32 -48;
    i1 %138 = icmp ult i32 %137, i32 10;
    i32 %139 = mul i32 %135, i32 10;
    i32 %140 = add i32 %139, i32 -48;
    i32 %141 = add i32 %134, i32 %140;
    cbr i1 %138(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %142 = phi [^while.header6, i32 0] [^while.body11, i32 %141];
    i1 %143 = icmp neq i32 %124, i32 0;
    i32 %144 = neg i32 %142;
    i32 %145 = select i1 %143 ? i32 %144 : i32 %142;
    store i32* %95 with i32 %145;
    i32 %146 = call () -> i32 @getch();
    i1 %147 = icmp slt i32 %146, i32 48;
    i1 %148 = icmp sgt i32 %146, i32 57;
    i1 %149 = or i1 %147, i1 %148;
    i32* %150 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %50];
    cbr i1 %149(prob = 0.97), ^while.body12, ^while.header7;
  ^while.body12:
    i32 %151 = phi [^b5, i32 %146] [^while.body12, i32 %153];
    i32 %152 = phi [^b5, i32 0] [^while.body12, i32 %158];
    i32 %153 = call () -> i32 @getch();
    i1 %154 = icmp slt i32 %153, i32 48;
    i1 %155 = icmp sgt i32 %153, i32 57;
    i1 %156 = or i1 %154, i1 %155;
    i1 %157 = icmp eq i32 %151, i32 45;
    i32 %158 = select i1 %157 ? i32 1 : i32 %152;
    cbr i1 %156(prob = 0.97), ^while.body12, ^while.header7;
  ^while.header7:
    i32 %159 = phi [^b5, i32 %146] [^while.body12, i32 %153];
    i32 %160 = phi [^b5, i32 0] [^while.body12, i32 %158];
    i32 %161 = add i32 %159, i32 -48;
    i1 %162 = icmp ult i32 %161, i32 10;
    cbr i1 %162(prob = 0.97), ^while.body13, ^b6;
  ^while.body13:
    i32 %163 = phi [^while.header7, i32 %159] [^while.body13, i32 %165];
    i32 %164 = phi [^while.header7, i32 0] [^while.body13, i32 %170];
    i32 %165 = call () -> i32 @getch();
    i32 %166 = add i32 %165, i32 -48;
    i1 %167 = icmp ult i32 %166, i32 10;
    i32 %168 = mul i32 %164, i32 10;
    i32 %169 = add i32 %168, i32 -48;
    i32 %170 = add i32 %163, i32 %169;
    cbr i1 %167(prob = 0.97), ^while.body13, ^b6;
  ^b6:
    i32 %171 = phi [^while.header7, i32 0] [^while.body13, i32 %170];
    i1 %172 = icmp neq i32 %160, i32 0;
    i32 %173 = neg i32 %171;
    i32 %174 = select i1 %172 ? i32 %173 : i32 %171;
    store i32* %150 with i32 %174;
    i32 %175 = add i32 %50, i32 1;
    i1 %176 = icmp sgt i32 %41, i32 %175;
    cbr i1 %176(prob = 0.97), ^while.body4, ^entry2;
}
