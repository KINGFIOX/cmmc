internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %x];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %x, i32 %1;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
^b:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    ubr ^b1;
^b1:
    i32 %4 = phi [^entry, i32 %x] [^b, i32 %3];
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
^b:
    i1 %3 = scmp gt i32 %1, i32 57;
    ubr ^b1;
^b1:
    i1 %4 = phi [^while.header, i1 true] [^b, i1 %3];
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %5 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %6 = phi [^b1, i32 %1] [^while.body1, i32 %10];
    i1 %7 = scmp gt i32 %6, i32 47;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %8 = scmp le i32 %6, i32 57;
    ubr ^b3;
^b3:
    i1 %9 = phi [^while.header1, i1 false] [^b2, i1 %8];
    cbr i1 %9(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %12 = phi [^b4, i32 0] [^while.body2, i32 %18];
    i32 %13 = phi [^b4, i32 %11] [^while.body2, i32 %19];
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %15 = scmp gt i32 %13, i32 57;
    ubr ^b6;
^b6:
    i1 %16 = phi [^while.header2, i1 true] [^b5, i1 %15];
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %17 = scmp eq i32 %13, i32 45;
    i32 %18 = select i1 %17 ? i32 1 : i32 %12;
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %20 = phi [^b6, i32 0] [^while.body3, i32 %27];
    i32 %21 = phi [^b6, i32 %13] [^while.body3, i32 %28];
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b7, ^b8;
^b7:
    i1 %23 = scmp le i32 %21, i32 57;
    ubr ^b8;
^b8:
    i1 %24 = phi [^while.header3, i1 false] [^b7, i1 %23];
    cbr i1 %24(prob = 0.97), ^while.body3, ^b9;
^while.body3:
    i32 %25 = mul i32 %20, i32 10;
    i32 %26 = add i32 %21, i32 -48;
    i32 %27 = add i32 %26, i32 %25;
    i32 %28 = call () -> i32 @getch();
    ubr ^while.header3;
^b9:
    i1 %29 = scmp neq i32 %12, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b10;
^if.then:
    i32 %30 = neg i32 %20;
    ubr ^b10;
^b10:
    i32 %31 = phi [^b9, i32 %20] [^if.then, i32 %30];
    i1 %32 = scmp gt i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body4, ^while.header4;
^while.body4:
    i32 %33 = phi [^b10, i32 0] [^b31, i32 %138];
    i32* %34 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %33];
    i32 %35 = call () -> i32 @getch();
    ubr ^while.header5;
^while.header4:
    i32 %36 = phi [^b10, i32 0] [^while.header7, i32 %41] [^b31, i32 0];
    i1 %37 = scmp lt i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body5, ^while.header6;
^while.body5:
    i32* %38 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %36];
    i32* %39 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %36];
    i32* %40 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %36];
    i32 %41 = add i32 %36, i32 1;
    ubr ^while.header7;
^while.header5:
    i32 %42 = phi [^while.body4, i32 0] [^while.body7, i32 %60];
    i32 %43 = phi [^while.body4, i32 %35] [^while.body7, i32 %61];
    i1 %44 = scmp lt i32 %43, i32 48;
    cbr i1 %44(prob = 0.5), ^b12, ^b11;
^while.header6:
    i32 %45 = phi [^while.header4, i32 0] [^while.body6, i32 %45] [^b14, i32 %76];
    i32 %46 = phi [^while.header4, i32 0] [^while.body6, i32 %46] [^b14, i32 %71];
    i1 %47 = scmp lt i32 %45, i32 0;
    cbr i1 %47(prob = 0.97), ^while.body6, ^b13;
^b11:
    i1 %48 = scmp gt i32 %43, i32 57;
    ubr ^b12;
^b12:
    i1 %49 = phi [^while.header5, i1 true] [^b11, i1 %48];
    cbr i1 %49(prob = 0.97), ^while.body7, ^while.header8;
^while.header7:
    i32 %50 = phi [^while.body5, i32 %41] [^b16, i32 %85];
    i1 %51 = scmp lt i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body8, ^while.header4;
^while.body6:
    i32* %52 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %45];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %45];
    i32 %55 = load i32* %54;
    i32 %56 = call (i32) -> i32 @find(i32 %53);
    i32 %57 = call (i32) -> i32 @find(i32 %55);
    i1 %58 = scmp eq i32 %56, i32 %57;
    cbr i1 %58(prob = 0.5), ^while.header6, ^b14;
^b13:
    ret i32 %46;
^while.body7:
    i1 %59 = scmp eq i32 %43, i32 45;
    i32 %60 = select i1 %59 ? i32 1 : i32 %42;
    i32 %61 = call () -> i32 @getch();
    ubr ^while.header5;
^while.header8:
    i32 %62 = phi [^b12, i32 0] [^while.body9, i32 %89];
    i32 %63 = phi [^b12, i32 %43] [^while.body9, i32 %90];
    i1 %64 = scmp gt i32 %63, i32 47;
    cbr i1 %64(prob = 0.5), ^b15, ^b17;
^while.body8:
    i32 %65 = load i32* %40;
    i32* %66 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %50];
    i32 %67 = load i32* %66;
    i1 %68 = scmp gt i32 %65, i32 %67;
    cbr i1 %68(prob = 0.5), ^if.then1, ^b16;
^b14:
    i32* %69 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %45];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %46, i32 %70;
    i32 %72 = load i32* %52;
    i32 %73 = call (i32) -> i32 @find(i32 %72);
    i32* %74 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %73];
    i32 %75 = load i32* %54;
    store i32* %74 with i32 %75;
    i32 %76 = add i32 %45, i32 1;
    ubr ^while.header6;
^b15:
    i1 %77 = scmp le i32 %63, i32 57;
    ubr ^b17;
^if.then1:
    i32 %78 = load i32* %39;
    i32* %79 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %50];
    i32 %80 = load i32* %79;
    store i32* %39 with i32 %80;
    store i32* %79 with i32 %78;
    i32 %81 = load i32* %38;
    i32* %82 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %50];
    i32 %83 = load i32* %82;
    store i32* %38 with i32 %83;
    store i32* %82 with i32 %81;
    i32 %84 = load i32* %40;
    store i32* %40 with i32 %67;
    store i32* %66 with i32 %84;
    ubr ^b16;
^b16:
    i32 %85 = add i32 %50, i32 1;
    ubr ^while.header7;
^b17:
    i1 %86 = phi [^while.header8, i1 false] [^b15, i1 %77];
    cbr i1 %86(prob = 0.97), ^while.body9, ^b18;
^while.body9:
    i32 %87 = mul i32 %62, i32 10;
    i32 %88 = add i32 %63, i32 -48;
    i32 %89 = add i32 %88, i32 %87;
    i32 %90 = call () -> i32 @getch();
    ubr ^while.header8;
^b18:
    i1 %91 = scmp neq i32 %42, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then2, ^b19;
^if.then2:
    i32 %92 = neg i32 %62;
    ubr ^b19;
^b19:
    i32 %93 = phi [^b18, i32 %62] [^if.then2, i32 %92];
    store i32* %34 with i32 %93;
    i32* %94 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %33];
    i32 %95 = call () -> i32 @getch();
    ubr ^while.header9;
^while.header9:
    i32 %96 = phi [^b19, i32 0] [^while.body10, i32 %102];
    i32 %97 = phi [^b19, i32 %95] [^while.body10, i32 %103];
    i1 %98 = scmp lt i32 %97, i32 48;
    cbr i1 %98(prob = 0.5), ^b21, ^b20;
^b20:
    i1 %99 = scmp gt i32 %97, i32 57;
    ubr ^b21;
^b21:
    i1 %100 = phi [^while.header9, i1 true] [^b20, i1 %99];
    cbr i1 %100(prob = 0.97), ^while.body10, ^while.header10;
^while.body10:
    i1 %101 = scmp eq i32 %97, i32 45;
    i32 %102 = select i1 %101 ? i32 1 : i32 %96;
    i32 %103 = call () -> i32 @getch();
    ubr ^while.header9;
^while.header10:
    i32 %104 = phi [^b21, i32 0] [^while.body11, i32 %111];
    i32 %105 = phi [^b21, i32 %97] [^while.body11, i32 %112];
    i1 %106 = scmp gt i32 %105, i32 47;
    cbr i1 %106(prob = 0.5), ^b22, ^b23;
^b22:
    i1 %107 = scmp le i32 %105, i32 57;
    ubr ^b23;
^b23:
    i1 %108 = phi [^while.header10, i1 false] [^b22, i1 %107];
    cbr i1 %108(prob = 0.97), ^while.body11, ^b24;
^while.body11:
    i32 %109 = mul i32 %104, i32 10;
    i32 %110 = add i32 %105, i32 -48;
    i32 %111 = add i32 %110, i32 %109;
    i32 %112 = call () -> i32 @getch();
    ubr ^while.header10;
^b24:
    i1 %113 = scmp neq i32 %96, i32 0;
    cbr i1 %113(prob = 0.5), ^if.then3, ^b25;
^if.then3:
    i32 %114 = neg i32 %104;
    ubr ^b25;
^b25:
    i32 %115 = phi [^b24, i32 %104] [^if.then3, i32 %114];
    store i32* %94 with i32 %115;
    i32* %116 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %33];
    i32 %117 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header11:
    i32 %118 = phi [^b25, i32 0] [^while.body12, i32 %124];
    i32 %119 = phi [^b25, i32 %117] [^while.body12, i32 %125];
    i1 %120 = scmp lt i32 %119, i32 48;
    cbr i1 %120(prob = 0.5), ^b27, ^b26;
^b26:
    i1 %121 = scmp gt i32 %119, i32 57;
    ubr ^b27;
^b27:
    i1 %122 = phi [^while.header11, i1 true] [^b26, i1 %121];
    cbr i1 %122(prob = 0.97), ^while.body12, ^while.header12;
^while.body12:
    i1 %123 = scmp eq i32 %119, i32 45;
    i32 %124 = select i1 %123 ? i32 1 : i32 %118;
    i32 %125 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header12:
    i32 %126 = phi [^b27, i32 0] [^while.body13, i32 %133];
    i32 %127 = phi [^b27, i32 %119] [^while.body13, i32 %134];
    i1 %128 = scmp gt i32 %127, i32 47;
    cbr i1 %128(prob = 0.5), ^b28, ^b29;
^b28:
    i1 %129 = scmp le i32 %127, i32 57;
    ubr ^b29;
^b29:
    i1 %130 = phi [^while.header12, i1 false] [^b28, i1 %129];
    cbr i1 %130(prob = 0.97), ^while.body13, ^b30;
^while.body13:
    i32 %131 = mul i32 %126, i32 10;
    i32 %132 = add i32 %127, i32 -48;
    i32 %133 = add i32 %132, i32 %131;
    i32 %134 = call () -> i32 @getch();
    ubr ^while.header12;
^b30:
    i1 %135 = scmp neq i32 %118, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then4, ^b31;
^if.then4:
    i32 %136 = neg i32 %126;
    ubr ^b31;
^b31:
    i32 %137 = phi [^b30, i32 %126] [^if.then4, i32 %136];
    store i32* %116 with i32 %137;
    i32 %138 = add i32 %33, i32 1;
    i1 %139 = scmp lt i32 %138, i32 %31;
    cbr i1 %139(prob = 0.97), ^while.body4, ^while.header4;
}
