internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
func @main() -> i32 { NoMemoryRead NoReturn NoRecurse Entry } {
^entry():
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %x, i32* %ch ], [ ^b i32* %x, i32* %ch, i32 %0 ];
^while.body(i32* %arg, i32* %arg1):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1 ], [ ^b i32* %arg, i32* %arg1, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32 %arg2):
    i1 %0 = scmp gt i32 %arg2, i32 57;
    cbr i1 %0, [ ^while.body i32* %arg, i32* %arg1 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg2 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2):
    i1 %0 = scmp ge i32 %arg2, i32 48;
    cbr i1 %0, [ ^b1 i32* %arg, i32* %arg1, i32 %arg2, i32 0 ], [ ^b2 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp le i32 %arg2, i32 57;
    cbr i1 %0, [ ^while.body1 i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3 ], [ ^b2 ];
^b2():
    i32* %m = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %x, i32* %f, i32* %ch, i32* %m, i32 %0, i32 0 ], [ ^b3 i32* %f, i32* %x, i32* %ch, i32* %m, i32 %0, i32 0 ];
^while.body1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = mul i32 %arg3, i32 10;
    i32 %1 = add i32 %0, i32 %arg2;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b1 i32* %arg1, i32* %arg, i32 %3, i32 %2 ], [ ^b2 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp eq i32 %arg4, i32 45;
    cbr i1 %0, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg5 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp gt i32 %arg4, i32 57;
    cbr i1 %0, [ ^while.body2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^indirect1 i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32 %0, i32 1 ], [ ^b3 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %0, i32 1 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0, i32 %arg4 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %0, i32 %arg4 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp ge i32 %arg3, i32 48;
    cbr i1 %0, [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 0, i32 %arg4 ], [ ^b6 i32* %arg2, i32 0, i32 %arg4 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp le i32 %arg3, i32 57;
    cbr i1 %0, [ ^while.body3 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ], [ ^b6 i32* %arg2, i32 %arg4, i32 %arg5 ];
^b6(i32* %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp neq i32 %arg2, i32 0;
    cbr i1 %0, [ ^if.then1 i32* %arg, i32 %arg1 ], [ ^if.else i32* %arg, i32 %arg1 ];
^if.then1(i32* %arg, i32 %arg1):
    i32 %0 = neg i32 %arg1;
    store i32* %arg with i32 %0;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.header i32* %i, i32 %0, i32 0, i32 %0, i32 0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = mul i32 %arg4, i32 10;
    i32 %1 = add i32 %0, i32 %arg3;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b5 i32* %arg1, i32* %arg, i32* %arg2, i32 %3, i32 %2, i32 %arg5 ], [ ^b6 i32* %arg2, i32 %2, i32 %arg5 ];
^if.else(i32* %arg, i32 %arg1):
    store i32* %arg with i32 %arg1;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.header i32* %i, i32 %arg1, i32 0, i32 %arg1, i32 0 ];
^while.header(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp lt i32 %arg2, i32 %arg1;
    cbr i1 %0, [ ^while.body4 i32* %arg, i32 %arg3, i32 %arg4 ], [ ^entry1 ];
^while.body4(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @u)[i32 0][i32 %arg2];
    i32* %ch = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %ch with i32 %1;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2, [ ^while.body5 i32* %x, i32* %f, i32* %ch, i32* %0, i32 %arg2, i32* %arg, i32 %arg1, i32 %1, i32 0 ], [ ^b7 i32* %f, i32* %x, i32* %ch, i32* %arg, i32 %arg2, i32* %0, i32 %arg1, i32 %1, i32 0 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg7, i32 45;
    cbr i1 %0, [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg8 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg7, i32 57;
    cbr i1 %0, [ ^while.body5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect2 i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body5 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 1 ], [ ^b7 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 1 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 %arg7 ], [ ^b7 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 %arg7 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 48;
    cbr i1 %0, [ ^b9 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 0, i32 %arg7 ], [ ^b10 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 0, i32 %arg7 ];
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body6 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b10 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg7, i32 %arg8 ];
^b10(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^if.then3 i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3, i32 %arg4 ], [ ^while.body7 i32 %arg4, i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3 ];
^if.then3(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = neg i32 %arg4;
    ubr [ ^while.body7 i32 %0, i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = mul i32 %arg7, i32 10;
    i32 %1 = add i32 %0, i32 %arg6;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b9 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %3, i32 %2, i32 %arg8 ], [ ^b10 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %2, i32 %arg8 ];
^while.body7(i32 %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4):
    store i32* %arg3 with i32 %arg;
    i32* %0 = getelementptr &([1005 * i32]* @v)[i32 0][i32 %arg2];
    i32* %ch = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %ch with i32 %1;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2, [ ^while.body8 i32* %x, i32* %f, i32* %ch, i32* %0, i32 %arg2, i32* %arg1, i32 %arg4, i32 %1, i32 0 ], [ ^b11 i32* %f, i32* %x, i32* %ch, i32* %arg1, i32 %arg2, i32* %0, i32 %arg4, i32 %1, i32 0 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg7, i32 45;
    cbr i1 %0, [ ^if.then4 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6 ], [ ^b12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg8 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg7, i32 57;
    cbr i1 %0, [ ^while.body8 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect3 i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 1 ], [ ^b11 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 1 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 %arg7 ], [ ^b11 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 %arg7 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 48;
    cbr i1 %0, [ ^b13 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 0, i32 %arg7 ], [ ^b14 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 0, i32 %arg7 ];
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body9 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b14 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg7, i32 %arg8 ];
^b14(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^if.then5 i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3, i32 %arg4 ], [ ^while.body10 i32 %arg4, i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3 ];
^if.then5(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = neg i32 %arg4;
    ubr [ ^while.body10 i32 %0, i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = mul i32 %arg7, i32 10;
    i32 %1 = add i32 %0, i32 %arg6;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b13 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %3, i32 %2, i32 %arg8 ], [ ^b14 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %2, i32 %arg8 ];
^while.body10(i32 %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4):
    store i32* %arg3 with i32 %arg;
    i32* %0 = getelementptr &([1005 * i32]* @c)[i32 0][i32 %arg2];
    i32* %ch = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %ch with i32 %1;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2, [ ^while.body11 i32* %x, i32* %f, i32* %ch, i32* %0, i32 %arg2, i32* %arg1, i32 %arg4, i32 %1, i32 0 ], [ ^b15 i32* %f, i32* %x, i32* %ch, i32* %arg1, i32 %arg2, i32* %0, i32 %arg4, i32 %1, i32 0 ];
^while.body11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg7, i32 45;
    cbr i1 %0, [ ^if.then6 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6 ], [ ^b16 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg8 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg7, i32 57;
    cbr i1 %0, [ ^while.body11 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect4 i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body11 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 1 ], [ ^b15 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 1 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i32 %arg7 ], [ ^b15 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg6, i32 %0, i32 %arg7 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 48;
    cbr i1 %0, [ ^b17 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 0, i32 %arg7 ], [ ^b18 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 0, i32 %arg7 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body12 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b18 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg7, i32 %arg8 ];
^b18(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^if.then7 i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3, i32 %arg4 ], [ ^if.else1 i32* %arg2, i32 %arg1, i32* %arg, i32 %arg3, i32 %arg4 ];
^if.then7(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = neg i32 %arg4;
    store i32* %arg with i32 %0;
    i32 %1 = add i32 %arg1, i32 1;
    store i32* %arg2 with i32 %1;
    ubr [ ^while.header i32* %arg2, i32 %arg3, i32 %1, i32 %arg3, i32 %1 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = mul i32 %arg7, i32 10;
    i32 %1 = add i32 %0, i32 %arg6;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b17 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %3, i32 %2, i32 %arg8 ], [ ^b18 i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %2, i32 %arg8 ];
^if.else1(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg with i32 %arg4;
    i32 %0 = add i32 %arg1, i32 1;
    store i32* %arg2 with i32 %0;
    ubr [ ^while.header i32* %arg2, i32 %arg3, i32 %0, i32 %arg3, i32 %0 ];
^entry1():
    unreachable;
}
