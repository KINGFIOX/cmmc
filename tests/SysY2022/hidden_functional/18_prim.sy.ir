internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = icmp slt i32 %4, i32 48;
    i1 %6 = icmp sgt i32 %4, i32 57;
    i1 %7 = or i1 %5, i1 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %4];
    i32 %9 = add i32 %8, i32 -48;
    i1 %10 = icmp ult i32 %9, i32 10;
    cbr i1 %10(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ult i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %14 = call () -> i32 @getch();
    i1 %15 = icmp slt i32 %14, i32 48;
    i1 %16 = icmp sgt i32 %14, i32 57;
    i1 %17 = or i1 %15, i1 %16;
    cbr i1 %17(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %18 = phi [^entry1, i32 %14] [^while.body2, i32 %20];
    i32 %19 = phi [^entry1, i32 0] [^while.body2, i32 %25];
    i32 %20 = call () -> i32 @getch();
    i1 %21 = icmp slt i32 %20, i32 48;
    i1 %22 = icmp sgt i32 %20, i32 57;
    i1 %23 = or i1 %21, i1 %22;
    i1 %24 = icmp eq i32 %18, i32 45;
    i32 %25 = select i1 %24 ? i32 1 : i32 %19;
    cbr i1 %23(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %26 = phi [^entry1, i32 %14] [^while.body2, i32 %20];
    i32 %27 = phi [^entry1, i32 0] [^while.body2, i32 %25];
    i32 %28 = add i32 %26, i32 -48;
    i1 %29 = icmp ult i32 %28, i32 10;
    cbr i1 %29(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %30 = phi [^indirect1, i32 0] [^while.body3, i32 %37];
    i32 %31 = phi [^indirect1, i32 %26] [^while.body3, i32 %32];
    i32 %32 = call () -> i32 @getch();
    i32 %33 = add i32 %32, i32 -48;
    i1 %34 = icmp ult i32 %33, i32 10;
    i32 %35 = mul i32 %30, i32 10;
    i32 %36 = add i32 %35, i32 -48;
    i32 %37 = add i32 %31, i32 %36;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %38 = phi [^indirect1, i32 0] [^while.body3, i32 %37];
    i1 %39 = icmp neq i32 %27, i32 0;
    i32 %40 = neg i32 %38;
    i32 %41 = select i1 %39 ? i32 %40 : i32 %38;
    i1 %42 = icmp sgt i32 %41, i32 0;
    [1005 * i32]* %43 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %44 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %45 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    cbr i1 %42(prob = 0.97), ^while.body4, ^entry2;
  ^entry2:
    [1005 * i32]* %46 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %47 = phi [^b, i32 0] [^b6, i32 %173];
    i32 %48 = call () -> i32 @getch();
    i1 %49 = icmp slt i32 %48, i32 48;
    i1 %50 = icmp sgt i32 %48, i32 57;
    i1 %51 = or i1 %49, i1 %50;
    i32* %52 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %47];
    cbr i1 %51(prob = 0.97), ^while.body5, ^indirect2;
  ^while.body5:
    i32 %53 = phi [^while.body4, i32 %48] [^while.body5, i32 %55];
    i32 %54 = phi [^while.body4, i32 0] [^while.body5, i32 %60];
    i32 %55 = call () -> i32 @getch();
    i1 %56 = icmp slt i32 %55, i32 48;
    i1 %57 = icmp sgt i32 %55, i32 57;
    i1 %58 = or i1 %56, i1 %57;
    i1 %59 = icmp eq i32 %53, i32 45;
    i32 %60 = select i1 %59 ? i32 1 : i32 %54;
    cbr i1 %58(prob = 0.97), ^while.body5, ^indirect2;
  ^indirect2:
    i32 %61 = phi [^while.body4, i32 %48] [^while.body5, i32 %55];
    i32 %62 = phi [^while.body4, i32 0] [^while.body5, i32 %60];
    i32 %63 = add i32 %61, i32 -48;
    i1 %64 = icmp ult i32 %63, i32 10;
    cbr i1 %64(prob = 0.97), ^while.body7, ^b1;
  ^while.header:
    i32 %65 = phi [^entry2, i32 0] [^while.header2, i32 %70];
    i1 %66 = icmp slt i32 %65, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body6, ^while.header1;
  ^while.body6:
    i32* %67 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %65];
    i32* %68 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %65];
    i32* %69 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %65];
    i32 %70 = add i32 %65, i32 1;
    ubr ^while.header2;
  ^while.body7:
    i32 %71 = phi [^indirect2, i32 0] [^while.body7, i32 %78];
    i32 %72 = phi [^indirect2, i32 %61] [^while.body7, i32 %73];
    i32 %73 = call () -> i32 @getch();
    i32 %74 = add i32 %73, i32 -48;
    i1 %75 = icmp ult i32 %74, i32 10;
    i32 %76 = mul i32 %71, i32 10;
    i32 %77 = add i32 %76, i32 -48;
    i32 %78 = add i32 %72, i32 %77;
    cbr i1 %75(prob = 0.97), ^while.body7, ^b1;
  ^b1:
    i32 %79 = phi [^indirect2, i32 0] [^while.body7, i32 %78];
    i1 %80 = icmp neq i32 %62, i32 0;
    i32 %81 = neg i32 %79;
    i32 %82 = select i1 %80 ? i32 %81 : i32 %79;
    store i32* %52 with i32 %82;
    i32 %83 = call () -> i32 @getch();
    i1 %84 = icmp slt i32 %83, i32 48;
    i1 %85 = icmp sgt i32 %83, i32 57;
    i1 %86 = or i1 %84, i1 %85;
    i32* %87 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %47];
    cbr i1 %86(prob = 0.97), ^while.body8, ^indirect3;
  ^while.header1:
    i32 %88 = phi [^while.header, i32 0] [^while.body9, i32 %88] [^b3, i32 %123];
    i32 %89 = phi [^while.header, i32 0] [^while.body9, i32 %89] [^b3, i32 %122];
    i1 %90 = icmp slt i32 %88, i32 0;
    cbr i1 %90(prob = 0.97), ^while.body9, ^b2;
  ^while.header2:
    i32 %91 = phi [^while.body6, i32 %70] [^b5, i32 %148];
    i1 %92 = icmp slt i32 %91, i32 0;
    cbr i1 %92(prob = 0.97), ^while.body10, ^while.header;
  ^while.body8:
    i32 %93 = phi [^b1, i32 %83] [^while.body8, i32 %95];
    i32 %94 = phi [^b1, i32 0] [^while.body8, i32 %100];
    i32 %95 = call () -> i32 @getch();
    i1 %96 = icmp slt i32 %95, i32 48;
    i1 %97 = icmp sgt i32 %95, i32 57;
    i1 %98 = or i1 %96, i1 %97;
    i1 %99 = icmp eq i32 %93, i32 45;
    i32 %100 = select i1 %99 ? i32 1 : i32 %94;
    cbr i1 %98(prob = 0.97), ^while.body8, ^indirect3;
  ^while.body9:
    i32* %101 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %88];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %88];
    i32 %104 = load i32* %103;
    i32 %105 = call (i32) -> i32 @find(i32 %102);
    i32 %106 = call (i32) -> i32 @find(i32 %104);
    i1 %107 = icmp eq i32 %105, i32 %106;
    cbr i1 %107(prob = 0.5), ^while.header1, ^b3;
  ^indirect3:
    i32 %108 = phi [^b1, i32 %83] [^while.body8, i32 %95];
    i32 %109 = phi [^b1, i32 0] [^while.body8, i32 %100];
    i32 %110 = add i32 %108, i32 -48;
    i1 %111 = icmp ult i32 %110, i32 10;
    cbr i1 %111(prob = 0.97), ^while.body11, ^b4;
  ^b2:
    ret i32 %89;
  ^while.body10:
    i32* %112 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %91];
    i32 %113 = load i32* %69;
    i32 %114 = load i32* %112;
    i1 %115 = icmp sgt i32 %113, i32 %114;
    cbr i1 %115(prob = 0.5), ^if.then, ^b5;
  ^b3:
    i32* %116 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %88];
    i32 %117 = load i32* %116;
    i32 %118 = load i32* %101;
    i32 %119 = call (i32) -> i32 @find(i32 %118);
    i32* %120 = getelementptr &([1005 * i32]* %46)[i64 0][i32 %119];
    i32 %121 = load i32* %103;
    store i32* %120 with i32 %121;
    i32 %122 = add i32 %89, i32 %117;
    i32 %123 = add i32 %88, i32 1;
    ubr ^while.header1;
  ^while.body11:
    i32 %124 = phi [^indirect3, i32 0] [^while.body11, i32 %131];
    i32 %125 = phi [^indirect3, i32 %108] [^while.body11, i32 %126];
    i32 %126 = call () -> i32 @getch();
    i32 %127 = add i32 %126, i32 -48;
    i1 %128 = icmp ult i32 %127, i32 10;
    i32 %129 = mul i32 %124, i32 10;
    i32 %130 = add i32 %129, i32 -48;
    i32 %131 = add i32 %125, i32 %130;
    cbr i1 %128(prob = 0.97), ^while.body11, ^b4;
  ^b4:
    i32 %132 = phi [^indirect3, i32 0] [^while.body11, i32 %131];
    i1 %133 = icmp neq i32 %109, i32 0;
    i32 %134 = neg i32 %132;
    i32 %135 = select i1 %133 ? i32 %134 : i32 %132;
    store i32* %87 with i32 %135;
    i32 %136 = call () -> i32 @getch();
    i1 %137 = icmp slt i32 %136, i32 48;
    i1 %138 = icmp sgt i32 %136, i32 57;
    i1 %139 = or i1 %137, i1 %138;
    i32* %140 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %47];
    cbr i1 %139(prob = 0.97), ^while.body12, ^indirect4;
  ^if.then:
    i32* %141 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %91];
    i32 %142 = load i32* %68;
    i32 %143 = load i32* %141;
    store i32* %68 with i32 %143;
    store i32* %141 with i32 %142;
    i32* %144 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %91];
    i32 %145 = load i32* %67;
    i32 %146 = load i32* %144;
    store i32* %67 with i32 %146;
    store i32* %144 with i32 %145;
    i32 %147 = load i32* %69;
    store i32* %69 with i32 %114;
    store i32* %112 with i32 %147;
    ubr ^b5;
  ^b5:
    i32 %148 = add i32 %91, i32 1;
    ubr ^while.header2;
  ^while.body12:
    i32 %149 = phi [^b4, i32 %136] [^while.body12, i32 %151];
    i32 %150 = phi [^b4, i32 0] [^while.body12, i32 %156];
    i32 %151 = call () -> i32 @getch();
    i1 %152 = icmp slt i32 %151, i32 48;
    i1 %153 = icmp sgt i32 %151, i32 57;
    i1 %154 = or i1 %152, i1 %153;
    i1 %155 = icmp eq i32 %149, i32 45;
    i32 %156 = select i1 %155 ? i32 1 : i32 %150;
    cbr i1 %154(prob = 0.97), ^while.body12, ^indirect4;
  ^indirect4:
    i32 %157 = phi [^b4, i32 %136] [^while.body12, i32 %151];
    i32 %158 = phi [^b4, i32 0] [^while.body12, i32 %156];
    i32 %159 = add i32 %157, i32 -48;
    i1 %160 = icmp ult i32 %159, i32 10;
    cbr i1 %160(prob = 0.97), ^while.body13, ^b6;
  ^while.body13:
    i32 %161 = phi [^indirect4, i32 0] [^while.body13, i32 %168];
    i32 %162 = phi [^indirect4, i32 %157] [^while.body13, i32 %163];
    i32 %163 = call () -> i32 @getch();
    i32 %164 = add i32 %163, i32 -48;
    i1 %165 = icmp ult i32 %164, i32 10;
    i32 %166 = mul i32 %161, i32 10;
    i32 %167 = add i32 %166, i32 -48;
    i32 %168 = add i32 %162, i32 %167;
    cbr i1 %165(prob = 0.97), ^while.body13, ^b6;
  ^b6:
    i32 %169 = phi [^indirect4, i32 0] [^while.body13, i32 %168];
    i1 %170 = icmp neq i32 %158, i32 0;
    i32 %171 = neg i32 %169;
    i32 %172 = select i1 %170 ? i32 %171 : i32 %169;
    store i32* %140 with i32 %172;
    i32 %173 = add i32 %47, i32 1;
    i1 %174 = icmp sgt i32 %41, i32 %173;
    cbr i1 %174(prob = 0.97), ^while.body4, ^entry2;
}
