internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u, align 8 { Flexible };
internal [1005 * i32]* @v, align 8 { Flexible };
internal [1005 * i32]* @c, align 8 { Flexible };
internal [1005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^4;
  ^4:
    i32 %5 = add i32 %0, i32 -48;
    i1 %6 = icmp ult i32 %5, i32 10;
    cbr i1 %6(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %7 = call () -> i32 @getch();
    i32 %8 = add i32 %7, i32 -48;
    i1 %9 = icmp ult i32 %8, i32 10;
    cbr i1 %9(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %13(prob = 0.97), ^while.body2, ^22;
  ^while.body2:
    i32 %14 = phi [^entry1, i32 %10] [^while.body2, i32 %16];
    i32 %15 = phi [^entry1, i32 0] [^while.body2, i32 %21];
    i32 %16 = call () -> i32 @getch();
    i1 %17 = icmp slt i32 %16, i32 48;
    i1 %18 = icmp sgt i32 %16, i32 57;
    i1 %19 = or i1 %17, i1 %18;
    i1 %20 = icmp eq i32 %14, i32 45;
    i32 %21 = select i1 %20 ? i32 1 : i32 %15;
    cbr i1 %19(prob = 0.97), ^while.body2, ^22;
  ^22:
    i32 %23 = phi [^entry1, i32 %10] [^while.body2, i32 %16];
    i32 %24 = phi [^entry1, i32 0] [^while.body2, i32 %21];
    i32 %25 = add i32 %23, i32 -48;
    i1 %26 = icmp ult i32 %25, i32 10;
    cbr i1 %26(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %27 = phi [^22, i32 %23] [^while.body3, i32 %29];
    i32 %28 = phi [^22, i32 0] [^while.body3, i32 %34];
    i32 %29 = call () -> i32 @getch();
    i32 %30 = add i32 %29, i32 -48;
    i1 %31 = icmp ult i32 %30, i32 10;
    i32 %32 = mul i32 %28, i32 10;
    i32 %33 = add i32 %32, i32 -48;
    i32 %34 = add i32 %27, i32 %33;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %35 = phi [^22, i32 0] [^while.body3, i32 %34];
    i1 %36 = icmp neq i32 %24, i32 0;
    i32 %37 = neg i32 %35;
    i32 %38 = select i1 %36 ? i32 %37 : i32 %35;
    i1 %39 = icmp sgt i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^prebody, ^entry2;
  ^prebody:
    [1005 * i32]* %40 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %41 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %42 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    ubr ^while.body4;
  ^entry2:
    [1005 * i32]* %43 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    [1005 * i32]* %44 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %45 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %46 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %47 = phi [^prebody, i32 0] [^b5, i32 %156];
    i32 %48 = call () -> i32 @getch();
    i1 %49 = icmp slt i32 %48, i32 48;
    i1 %50 = icmp sgt i32 %48, i32 57;
    i1 %51 = or i1 %49, i1 %50;
    i32* %52 = getelementptr &([1005 * i32]* %40)[i64 0][i32 %47];
    cbr i1 %51(prob = 0.97), ^while.body5, ^64;
  ^while.header:
    i32 %53 = phi [^entry2, i32 0] [^while.body6, i32 %53] [^b2, i32 %82];
    i32 %54 = phi [^entry2, i32 0] [^while.body6, i32 %54] [^b2, i32 %83];
    i1 %55 = icmp slt i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body6, ^b1;
  ^while.body5:
    i32 %56 = phi [^while.body4, i32 %48] [^while.body5, i32 %58];
    i32 %57 = phi [^while.body4, i32 0] [^while.body5, i32 %63];
    i32 %58 = call () -> i32 @getch();
    i1 %59 = icmp slt i32 %58, i32 48;
    i1 %60 = icmp sgt i32 %58, i32 57;
    i1 %61 = or i1 %59, i1 %60;
    i1 %62 = icmp eq i32 %56, i32 45;
    i32 %63 = select i1 %62 ? i32 1 : i32 %57;
    cbr i1 %61(prob = 0.97), ^while.body5, ^64;
  ^64:
    i32 %65 = phi [^while.body4, i32 %48] [^while.body5, i32 %58];
    i32 %66 = phi [^while.body4, i32 0] [^while.body5, i32 %63];
    i32 %67 = add i32 %65, i32 -48;
    i1 %68 = icmp ult i32 %67, i32 10;
    cbr i1 %68(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32* %69 = getelementptr &([1005 * i32]* %45)[i64 0][i32 %54];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &([1005 * i32]* %46)[i64 0][i32 %54];
    i32 %72 = load i32* %71;
    i32 %73 = call (i32) -> i32 @find(i32 %70);
    i32 %74 = call (i32) -> i32 @find(i32 %72);
    i1 %75 = icmp eq i32 %73, i32 %74;
    cbr i1 %75(prob = 0.5), ^while.header, ^b2;
  ^b1:
    ret i32 %53;
  ^b2:
    i32* %76 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %54];
    i32 %77 = load i32* %76;
    i32 %78 = load i32* %69;
    i32 %79 = call (i32) -> i32 @find(i32 %78);
    i32* %80 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %79];
    i32 %81 = load i32* %71;
    store i32* %80 with i32 %81;
    i32 %82 = add i32 %53, i32 %77;
    i32 %83 = add i32 %54, i32 1;
    ubr ^while.header;
  ^while.body7:
    i32 %84 = phi [^64, i32 %65] [^while.body7, i32 %86];
    i32 %85 = phi [^64, i32 0] [^while.body7, i32 %91];
    i32 %86 = call () -> i32 @getch();
    i32 %87 = add i32 %86, i32 -48;
    i1 %88 = icmp ult i32 %87, i32 10;
    i32 %89 = mul i32 %85, i32 10;
    i32 %90 = add i32 %89, i32 -48;
    i32 %91 = add i32 %84, i32 %90;
    cbr i1 %88(prob = 0.97), ^while.body7, ^b3;
  ^b3:
    i32 %92 = phi [^64, i32 0] [^while.body7, i32 %91];
    i1 %93 = icmp neq i32 %66, i32 0;
    i32 %94 = neg i32 %92;
    i32 %95 = select i1 %93 ? i32 %94 : i32 %92;
    store i32* %52 with i32 %95;
    i32 %96 = call () -> i32 @getch();
    i1 %97 = icmp slt i32 %96, i32 48;
    i1 %98 = icmp sgt i32 %96, i32 57;
    i1 %99 = or i1 %97, i1 %98;
    i32* %100 = getelementptr &([1005 * i32]* %41)[i64 0][i32 %47];
    cbr i1 %99(prob = 0.97), ^while.body8, ^109;
  ^while.body8:
    i32 %101 = phi [^b3, i32 %96] [^while.body8, i32 %103];
    i32 %102 = phi [^b3, i32 0] [^while.body8, i32 %108];
    i32 %103 = call () -> i32 @getch();
    i1 %104 = icmp slt i32 %103, i32 48;
    i1 %105 = icmp sgt i32 %103, i32 57;
    i1 %106 = or i1 %104, i1 %105;
    i1 %107 = icmp eq i32 %101, i32 45;
    i32 %108 = select i1 %107 ? i32 1 : i32 %102;
    cbr i1 %106(prob = 0.97), ^while.body8, ^109;
  ^109:
    i32 %110 = phi [^b3, i32 %96] [^while.body8, i32 %103];
    i32 %111 = phi [^b3, i32 0] [^while.body8, i32 %108];
    i32 %112 = add i32 %110, i32 -48;
    i1 %113 = icmp ult i32 %112, i32 10;
    cbr i1 %113(prob = 0.97), ^while.body9, ^b4;
  ^while.body9:
    i32 %114 = phi [^109, i32 %110] [^while.body9, i32 %116];
    i32 %115 = phi [^109, i32 0] [^while.body9, i32 %121];
    i32 %116 = call () -> i32 @getch();
    i32 %117 = add i32 %116, i32 -48;
    i1 %118 = icmp ult i32 %117, i32 10;
    i32 %119 = mul i32 %115, i32 10;
    i32 %120 = add i32 %119, i32 -48;
    i32 %121 = add i32 %114, i32 %120;
    cbr i1 %118(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %122 = phi [^109, i32 0] [^while.body9, i32 %121];
    i1 %123 = icmp neq i32 %111, i32 0;
    i32 %124 = neg i32 %122;
    i32 %125 = select i1 %123 ? i32 %124 : i32 %122;
    store i32* %100 with i32 %125;
    i32 %126 = call () -> i32 @getch();
    i1 %127 = icmp slt i32 %126, i32 48;
    i1 %128 = icmp sgt i32 %126, i32 57;
    i1 %129 = or i1 %127, i1 %128;
    i32* %130 = getelementptr &([1005 * i32]* %42)[i64 0][i32 %47];
    cbr i1 %129(prob = 0.97), ^while.body10, ^139;
  ^while.body10:
    i32 %131 = phi [^b4, i32 %126] [^while.body10, i32 %133];
    i32 %132 = phi [^b4, i32 0] [^while.body10, i32 %138];
    i32 %133 = call () -> i32 @getch();
    i1 %134 = icmp slt i32 %133, i32 48;
    i1 %135 = icmp sgt i32 %133, i32 57;
    i1 %136 = or i1 %134, i1 %135;
    i1 %137 = icmp eq i32 %131, i32 45;
    i32 %138 = select i1 %137 ? i32 1 : i32 %132;
    cbr i1 %136(prob = 0.97), ^while.body10, ^139;
  ^139:
    i32 %140 = phi [^b4, i32 %126] [^while.body10, i32 %133];
    i32 %141 = phi [^b4, i32 0] [^while.body10, i32 %138];
    i32 %142 = add i32 %140, i32 -48;
    i1 %143 = icmp ult i32 %142, i32 10;
    cbr i1 %143(prob = 0.97), ^while.body11, ^b5;
  ^while.body11:
    i32 %144 = phi [^139, i32 %140] [^while.body11, i32 %146];
    i32 %145 = phi [^139, i32 0] [^while.body11, i32 %151];
    i32 %146 = call () -> i32 @getch();
    i32 %147 = add i32 %146, i32 -48;
    i1 %148 = icmp ult i32 %147, i32 10;
    i32 %149 = mul i32 %145, i32 10;
    i32 %150 = add i32 %149, i32 -48;
    i32 %151 = add i32 %144, i32 %150;
    cbr i1 %148(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %152 = phi [^139, i32 0] [^while.body11, i32 %151];
    i1 %153 = icmp neq i32 %141, i32 0;
    i32 %154 = neg i32 %152;
    i32 %155 = select i1 %153 ? i32 %154 : i32 %152;
    store i32* %130 with i32 %155;
    i32 %156 = add i32 %47, i32 1;
    i1 %157 = icmp sgt i32 %38, i32 %156;
    cbr i1 %157(prob = 0.97), ^while.body4, ^entry2;
}
