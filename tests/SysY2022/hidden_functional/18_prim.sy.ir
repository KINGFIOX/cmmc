internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^while.guard:
    i32 %6 = phi [^entry, i32 %0] [^b1, i32 %4];
    i1 %7 = scmp gt i32 %6, i32 47;
    i1 %8 = scmp lt i32 %6, i32 58;
    i1 %9 = and i1 %7, i1 %8;
    cbr i1 %9(prob = 0.48), ^while.body1, ^b2;
^b:
    i1 %10 = scmp gt i32 %4, i32 57;
    ubr ^b1;
^b1:
    i1 %11 = phi [^while.body, i1 true] [^b, i1 %10];
    cbr i1 %11(prob = 0.97), ^while.body, ^while.guard;
^while.body1:
    i32 %12 = call () -> i32 @getch();
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b2:
    i32 %14 = call () -> i32 @getch();
    i1 %15 = scmp lt i32 %14, i32 48;
    cbr i1 %15(prob = 0.5), ^while.body2, ^b5;
^b3:
    i1 %16 = scmp le i32 %12, i32 57;
    ubr ^b4;
^b4:
    i1 %17 = phi [^while.body1, i1 false] [^b3, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %18 = phi [^b2, i32 0] [^b5, i32 0] [^b7, i32 %21];
    i32 %19 = phi [^b2, i32 %14] [^b5, i32 %14] [^b7, i32 %22];
    i1 %20 = scmp eq i32 %19, i32 45;
    i32 %21 = select i1 %20 ? i32 1 : i32 %18;
    i32 %22 = call () -> i32 @getch();
    i1 %23 = scmp lt i32 %22, i32 48;
    cbr i1 %23(prob = 0.5), ^b7, ^b6;
^b5:
    i1 %24 = scmp gt i32 %14, i32 57;
    cbr i1 %24(prob = 0.97), ^while.body2, ^while.guard1;
^b6:
    i1 %25 = scmp gt i32 %22, i32 57;
    ubr ^b7;
^b7:
    i1 %26 = phi [^while.body2, i1 true] [^b6, i1 %25];
    cbr i1 %26(prob = 0.97), ^while.body2, ^while.guard1;
^while.guard1:
    i32 %27 = phi [^b5, i32 0] [^b7, i32 %21];
    i32 %28 = phi [^b5, i32 %14] [^b7, i32 %22];
    i1 %29 = scmp gt i32 %28, i32 47;
    cbr i1 %29(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %30 = scmp lt i32 %28, i32 58;
    cbr i1 %30(prob = 0.97), ^while.body3, ^b9;
^b9:
    i32 %31 = phi [^while.guard1, i32 0] [^b8, i32 0] [^b12, i32 %38];
    i1 %32 = scmp neq i32 %27, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then, ^b10;
^if.then:
    i32 %33 = neg i32 %31;
    ubr ^b10;
^while.body3:
    i32 %34 = phi [^b8, i32 %28] [^b12, i32 %39];
    i32 %35 = phi [^b8, i32 0] [^b12, i32 %38];
    i32 %36 = mul i32 %35, i32 10;
    i32 %37 = add i32 %34, i32 -48;
    i32 %38 = add i32 %37, i32 %36;
    i32 %39 = call () -> i32 @getch();
    i1 %40 = scmp gt i32 %39, i32 47;
    cbr i1 %40(prob = 0.5), ^b11, ^b12;
^b10:
    i32 %41 = phi [^b9, i32 %31] [^if.then, i32 %33];
    i1 %42 = scmp gt i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body4, ^b13;
^b11:
    i1 %43 = scmp le i32 %39, i32 57;
    ubr ^b12;
^b12:
    i1 %44 = phi [^while.body3, i1 false] [^b11, i1 %43];
    cbr i1 %44(prob = 0.97), ^while.body3, ^b9;
^while.body4:
    i32 %45 = phi [^b10, i32 0] [^b35, i32 %131];
    i32* %46 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %45];
    i32 %47 = call () -> i32 @getch();
    i1 %48 = scmp lt i32 %47, i32 48;
    cbr i1 %48(prob = 0.5), ^while.body5, ^b14;
^b13:
    ret i32 0;
^while.body5:
    i32 %49 = phi [^while.body4, i32 0] [^b14, i32 0] [^b16, i32 %52];
    i32 %50 = phi [^while.body4, i32 %47] [^b14, i32 %47] [^b16, i32 %53];
    i1 %51 = scmp eq i32 %50, i32 45;
    i32 %52 = select i1 %51 ? i32 1 : i32 %49;
    i32 %53 = call () -> i32 @getch();
    i1 %54 = scmp lt i32 %53, i32 48;
    cbr i1 %54(prob = 0.5), ^b16, ^b15;
^b14:
    i1 %55 = scmp gt i32 %47, i32 57;
    cbr i1 %55(prob = 0.97), ^while.body5, ^while.guard2;
^b15:
    i1 %56 = scmp gt i32 %53, i32 57;
    ubr ^b16;
^b16:
    i1 %57 = phi [^while.body5, i1 true] [^b15, i1 %56];
    cbr i1 %57(prob = 0.97), ^while.body5, ^while.guard2;
^while.guard2:
    i32 %58 = phi [^b14, i32 0] [^b16, i32 %52];
    i32 %59 = phi [^b14, i32 %47] [^b16, i32 %53];
    i1 %60 = scmp gt i32 %59, i32 47;
    cbr i1 %60(prob = 0.5), ^b17, ^b18;
^b17:
    i1 %61 = scmp lt i32 %59, i32 58;
    cbr i1 %61(prob = 0.97), ^while.body6, ^b18;
^b18:
    i32 %62 = phi [^while.guard2, i32 0] [^b17, i32 0] [^b21, i32 %69];
    i1 %63 = scmp neq i32 %58, i32 0;
    cbr i1 %63(prob = 0.5), ^if.then1, ^b19;
^if.then1:
    i32 %64 = neg i32 %62;
    ubr ^b19;
^while.body6:
    i32 %65 = phi [^b17, i32 %59] [^b21, i32 %70];
    i32 %66 = phi [^b17, i32 0] [^b21, i32 %69];
    i32 %67 = mul i32 %66, i32 10;
    i32 %68 = add i32 %65, i32 -48;
    i32 %69 = add i32 %68, i32 %67;
    i32 %70 = call () -> i32 @getch();
    i1 %71 = scmp gt i32 %70, i32 47;
    cbr i1 %71(prob = 0.5), ^b20, ^b21;
^b19:
    i32 %72 = phi [^b18, i32 %62] [^if.then1, i32 %64];
    store i32* %46 with i32 %72;
    i32* %73 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %45];
    i32 %74 = call () -> i32 @getch();
    i1 %75 = scmp lt i32 %74, i32 48;
    cbr i1 %75(prob = 0.5), ^while.body7, ^b22;
^b20:
    i1 %76 = scmp le i32 %70, i32 57;
    ubr ^b21;
^b21:
    i1 %77 = phi [^while.body6, i1 false] [^b20, i1 %76];
    cbr i1 %77(prob = 0.97), ^while.body6, ^b18;
^while.body7:
    i32 %78 = phi [^b19, i32 0] [^b22, i32 0] [^b24, i32 %81];
    i32 %79 = phi [^b19, i32 %74] [^b22, i32 %74] [^b24, i32 %82];
    i1 %80 = scmp eq i32 %79, i32 45;
    i32 %81 = select i1 %80 ? i32 1 : i32 %78;
    i32 %82 = call () -> i32 @getch();
    i1 %83 = scmp lt i32 %82, i32 48;
    cbr i1 %83(prob = 0.5), ^b24, ^b23;
^b22:
    i1 %84 = scmp gt i32 %74, i32 57;
    cbr i1 %84(prob = 0.97), ^while.body7, ^while.guard3;
^b23:
    i1 %85 = scmp gt i32 %82, i32 57;
    ubr ^b24;
^b24:
    i1 %86 = phi [^while.body7, i1 true] [^b23, i1 %85];
    cbr i1 %86(prob = 0.97), ^while.body7, ^while.guard3;
^while.guard3:
    i32 %87 = phi [^b22, i32 0] [^b24, i32 %81];
    i32 %88 = phi [^b22, i32 %74] [^b24, i32 %82];
    i1 %89 = scmp gt i32 %88, i32 47;
    cbr i1 %89(prob = 0.5), ^b25, ^b26;
^b25:
    i1 %90 = scmp lt i32 %88, i32 58;
    cbr i1 %90(prob = 0.97), ^while.body8, ^b26;
^b26:
    i32 %91 = phi [^while.guard3, i32 0] [^b25, i32 0] [^b29, i32 %98];
    i1 %92 = scmp neq i32 %87, i32 0;
    cbr i1 %92(prob = 0.5), ^if.then2, ^b27;
^if.then2:
    i32 %93 = neg i32 %91;
    ubr ^b27;
^while.body8:
    i32 %94 = phi [^b25, i32 %88] [^b29, i32 %99];
    i32 %95 = phi [^b25, i32 0] [^b29, i32 %98];
    i32 %96 = mul i32 %95, i32 10;
    i32 %97 = add i32 %94, i32 -48;
    i32 %98 = add i32 %97, i32 %96;
    i32 %99 = call () -> i32 @getch();
    i1 %100 = scmp gt i32 %99, i32 47;
    cbr i1 %100(prob = 0.5), ^b28, ^b29;
^b27:
    i32 %101 = phi [^b26, i32 %91] [^if.then2, i32 %93];
    store i32* %73 with i32 %101;
    i32* %102 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %45];
    i32 %103 = call () -> i32 @getch();
    i1 %104 = scmp lt i32 %103, i32 48;
    cbr i1 %104(prob = 0.5), ^while.body9, ^b30;
^b28:
    i1 %105 = scmp le i32 %99, i32 57;
    ubr ^b29;
^b29:
    i1 %106 = phi [^while.body8, i1 false] [^b28, i1 %105];
    cbr i1 %106(prob = 0.97), ^while.body8, ^b26;
^while.body9:
    i32 %107 = phi [^b27, i32 0] [^b30, i32 0] [^b32, i32 %110];
    i32 %108 = phi [^b27, i32 %103] [^b30, i32 %103] [^b32, i32 %111];
    i1 %109 = scmp eq i32 %108, i32 45;
    i32 %110 = select i1 %109 ? i32 1 : i32 %107;
    i32 %111 = call () -> i32 @getch();
    i1 %112 = scmp lt i32 %111, i32 48;
    cbr i1 %112(prob = 0.5), ^b32, ^b31;
^b30:
    i1 %113 = scmp gt i32 %103, i32 57;
    cbr i1 %113(prob = 0.97), ^while.body9, ^while.guard4;
^b31:
    i1 %114 = scmp gt i32 %111, i32 57;
    ubr ^b32;
^b32:
    i1 %115 = phi [^while.body9, i1 true] [^b31, i1 %114];
    cbr i1 %115(prob = 0.97), ^while.body9, ^while.guard4;
^while.guard4:
    i32 %116 = phi [^b30, i32 0] [^b32, i32 %110];
    i32 %117 = phi [^b30, i32 %103] [^b32, i32 %111];
    i1 %118 = scmp gt i32 %117, i32 47;
    cbr i1 %118(prob = 0.5), ^b33, ^b34;
^b33:
    i1 %119 = scmp lt i32 %117, i32 58;
    cbr i1 %119(prob = 0.97), ^while.body10, ^b34;
^b34:
    i32 %120 = phi [^while.guard4, i32 0] [^b33, i32 0] [^b37, i32 %127];
    i1 %121 = scmp neq i32 %116, i32 0;
    cbr i1 %121(prob = 0.5), ^if.then3, ^b35;
^if.then3:
    i32 %122 = neg i32 %120;
    ubr ^b35;
^while.body10:
    i32 %123 = phi [^b33, i32 %117] [^b37, i32 %128];
    i32 %124 = phi [^b33, i32 0] [^b37, i32 %127];
    i32 %125 = mul i32 %124, i32 10;
    i32 %126 = add i32 %123, i32 -48;
    i32 %127 = add i32 %126, i32 %125;
    i32 %128 = call () -> i32 @getch();
    i1 %129 = scmp gt i32 %128, i32 47;
    cbr i1 %129(prob = 0.5), ^b36, ^b37;
^b35:
    i32 %130 = phi [^b34, i32 %120] [^if.then3, i32 %122];
    store i32* %102 with i32 %130;
    i32 %131 = add i32 %45, i32 1;
    i1 %132 = scmp lt i32 %131, i32 %41;
    cbr i1 %132(prob = 0.97), ^while.body4, ^b13;
^b36:
    i1 %133 = scmp le i32 %128, i32 57;
    ubr ^b37;
^b37:
    i1 %134 = phi [^while.body10, i1 false] [^b36, i1 %133];
    cbr i1 %134(prob = 0.97), ^while.body10, ^b34;
}
