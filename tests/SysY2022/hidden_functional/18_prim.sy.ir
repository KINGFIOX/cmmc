internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u, align 8 { Flexible };
internal [1005 * i32]* @v, align 8 { Flexible };
internal [1005 * i32]* @c, align 8 { Flexible };
internal [1005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^while.body1;
  ^while.body1:
    i32 %3 = call () -> i32 @getch();
    i32 %4 = add i32 %3, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.984615), ^while.body1, ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ugt i32 %7, i32 9;
    cbr i1 %8(prob = 0.984615), ^while.body2, ^16;
  ^while.body2:
    i32 %9 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %10 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ugt i32 %12, i32 9;
    i1 %14 = icmp eq i32 %9, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %10;
    cbr i1 %13(prob = 0.984615), ^while.body2, ^16;
  ^16:
    i32 %17 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %18 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.984615), ^while.body3, ^b;
  ^while.body3:
    i32 %21 = phi [^16, i32 %17] [^while.body3, i32 %23];
    i32 %22 = phi [^16, i32 0] [^while.body3, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.984615), ^while.body3, ^b;
  ^b:
    i32 %29 = phi [^16, i32 0] [^while.body3, i32 %28];
    i1 %30 = icmp neq i32 %18, i32 0;
    i32 %31 = neg i32 %29;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %29;
    i1 %33 = icmp sgt i32 %32, i32 0;
    [1005 * i32]* %34 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %35 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %36 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    cbr i1 %33(prob = 0.984615), ^while.body4, ^entry2;
  ^entry2:
    [1005 * i32]* %37 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %38 = phi [^b, i32 0] [^b5, i32 %158];
    i32 %39 = call () -> i32 @getch();
    i32 %40 = add i32 %39, i32 -48;
    i1 %41 = icmp ugt i32 %40, i32 9;
    i32* %42 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %38];
    cbr i1 %41(prob = 0.984615), ^while.body5, ^52;
  ^while.body5:
    i32 %43 = phi [^while.body4, i32 %39] [^while.body5, i32 %45];
    i32 %44 = phi [^while.body4, i32 0] [^while.body5, i32 %49];
    i32 %45 = call () -> i32 @getch();
    i32 %46 = add i32 %45, i32 -48;
    i1 %47 = icmp ugt i32 %46, i32 9;
    i1 %48 = icmp eq i32 %43, i32 45;
    i32 %49 = select i1 %48 ? i32 1 : i32 %44;
    cbr i1 %47(prob = 0.984615), ^while.body5, ^52;
  ^while.header:
    i32 %50 = phi [^entry2, i32 0] [^while.body6, i32 %57] [^while.body8, i32 %57] [^if.then, i32 %57];
    i1 %51 = icmp slt i32 %50, i32 0;
    cbr i1 %51(prob = 0.984615), ^while.body6, ^while.header1;
  ^52:
    i32 %53 = phi [^while.body4, i32 %39] [^while.body5, i32 %45];
    i32 %54 = phi [^while.body4, i32 0] [^while.body5, i32 %49];
    i32 %55 = add i32 %53, i32 -48;
    i1 %56 = icmp ult i32 %55, i32 10;
    cbr i1 %56(prob = 0.984615), ^while.body7, ^b1;
  ^while.body6:
    i32 %57 = add i32 %50, i32 1;
    i1 %58 = icmp slt i32 %57, i32 0;
    cbr i1 %58(prob = 0.984615), ^while.body8, ^while.header;
  ^while.body7:
    i32 %59 = phi [^52, i32 %53] [^while.body7, i32 %61];
    i32 %60 = phi [^52, i32 0] [^while.body7, i32 %66];
    i32 %61 = call () -> i32 @getch();
    i32 %62 = add i32 %61, i32 -48;
    i1 %63 = icmp ult i32 %62, i32 10;
    i32 %64 = mul i32 %60, i32 10;
    i32 %65 = add i32 %64, i32 -48;
    i32 %66 = add i32 %59, i32 %65;
    cbr i1 %63(prob = 0.984615), ^while.body7, ^b1;
  ^b1:
    i32 %67 = phi [^52, i32 0] [^while.body7, i32 %66];
    i1 %68 = icmp neq i32 %54, i32 0;
    i32 %69 = neg i32 %67;
    i32 %70 = select i1 %68 ? i32 %69 : i32 %67;
    store i32* %42 with i32 %70;
    i32 %71 = call () -> i32 @getch();
    i32 %72 = add i32 %71, i32 -48;
    i1 %73 = icmp ugt i32 %72, i32 9;
    i32* %74 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %38];
    cbr i1 %73(prob = 0.984615), ^while.body9, ^97;
  ^while.header1:
    i32 %75 = phi [^while.header, i32 0] [^while.body10, i32 %75] [^b3, i32 %116];
    i32 %76 = phi [^while.header, i32 0] [^while.body10, i32 %76] [^b3, i32 %117];
    i1 %77 = icmp slt i32 %76, i32 0;
    cbr i1 %77(prob = 0.984615), ^while.body10, ^b2;
  ^while.body8:
    i32* %78 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %50];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %78)[i64 1];
    i32 %81 = load i32* %80;
    i1 %82 = icmp sgt i32 %79, i32 %81;
    cbr i1 %82(prob = 0.5), ^if.then, ^while.header;
  ^while.body9:
    i32 %83 = phi [^b1, i32 %71] [^while.body9, i32 %85];
    i32 %84 = phi [^b1, i32 0] [^while.body9, i32 %89];
    i32 %85 = call () -> i32 @getch();
    i32 %86 = add i32 %85, i32 -48;
    i1 %87 = icmp ugt i32 %86, i32 9;
    i1 %88 = icmp eq i32 %83, i32 45;
    i32 %89 = select i1 %88 ? i32 1 : i32 %84;
    cbr i1 %87(prob = 0.984615), ^while.body9, ^97;
  ^while.body10:
    i32* %90 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %76];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %76];
    i32 %93 = load i32* %92;
    i32 %94 = call (i32) -> i32 @find(i32 %91);
    i32 %95 = call (i32) -> i32 @find(i32 %93);
    i1 %96 = icmp eq i32 %94, i32 %95;
    cbr i1 %96(prob = 0.5), ^while.header1, ^b3;
  ^97:
    i32 %98 = phi [^b1, i32 %71] [^while.body9, i32 %85];
    i32 %99 = phi [^b1, i32 0] [^while.body9, i32 %89];
    i32 %100 = add i32 %98, i32 -48;
    i1 %101 = icmp ult i32 %100, i32 10;
    cbr i1 %101(prob = 0.984615), ^while.body11, ^b4;
  ^b2:
    ret i32 %75;
  ^if.then:
    i32* %102 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %50];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %102)[i64 1];
    i32 %105 = load i32* %104;
    store i32* %102 with i32 %105;
    store i32* %104 with i32 %103;
    i32* %106 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %50];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %106)[i64 1];
    i32 %109 = load i32* %108;
    store i32* %106 with i32 %109;
    store i32* %108 with i32 %107;
    store i32* %78 with i32 %81;
    store i32* %80 with i32 %79;
    ubr ^while.header;
  ^b3:
    i32* %110 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %76];
    i32 %111 = load i32* %110;
    i32 %112 = load i32* %90;
    i32 %113 = call (i32) -> i32 @find(i32 %112);
    i32* %114 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %113];
    i32 %115 = load i32* %92;
    store i32* %114 with i32 %115;
    i32 %116 = add i32 %75, i32 %111;
    i32 %117 = add i32 %76, i32 1;
    ubr ^while.header1;
  ^while.body11:
    i32 %118 = phi [^97, i32 %98] [^while.body11, i32 %120];
    i32 %119 = phi [^97, i32 0] [^while.body11, i32 %125];
    i32 %120 = call () -> i32 @getch();
    i32 %121 = add i32 %120, i32 -48;
    i1 %122 = icmp ult i32 %121, i32 10;
    i32 %123 = mul i32 %119, i32 10;
    i32 %124 = add i32 %123, i32 -48;
    i32 %125 = add i32 %118, i32 %124;
    cbr i1 %122(prob = 0.984615), ^while.body11, ^b4;
  ^b4:
    i32 %126 = phi [^97, i32 0] [^while.body11, i32 %125];
    i1 %127 = icmp neq i32 %99, i32 0;
    i32 %128 = neg i32 %126;
    i32 %129 = select i1 %127 ? i32 %128 : i32 %126;
    store i32* %74 with i32 %129;
    i32 %130 = call () -> i32 @getch();
    i32 %131 = add i32 %130, i32 -48;
    i1 %132 = icmp ugt i32 %131, i32 9;
    i32* %133 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %38];
    cbr i1 %132(prob = 0.984615), ^while.body12, ^141;
  ^while.body12:
    i32 %134 = phi [^b4, i32 %130] [^while.body12, i32 %136];
    i32 %135 = phi [^b4, i32 0] [^while.body12, i32 %140];
    i32 %136 = call () -> i32 @getch();
    i32 %137 = add i32 %136, i32 -48;
    i1 %138 = icmp ugt i32 %137, i32 9;
    i1 %139 = icmp eq i32 %134, i32 45;
    i32 %140 = select i1 %139 ? i32 1 : i32 %135;
    cbr i1 %138(prob = 0.984615), ^while.body12, ^141;
  ^141:
    i32 %142 = phi [^b4, i32 %130] [^while.body12, i32 %136];
    i32 %143 = phi [^b4, i32 0] [^while.body12, i32 %140];
    i32 %144 = add i32 %142, i32 -48;
    i1 %145 = icmp ult i32 %144, i32 10;
    cbr i1 %145(prob = 0.984615), ^while.body13, ^b5;
  ^while.body13:
    i32 %146 = phi [^141, i32 %142] [^while.body13, i32 %148];
    i32 %147 = phi [^141, i32 0] [^while.body13, i32 %153];
    i32 %148 = call () -> i32 @getch();
    i32 %149 = add i32 %148, i32 -48;
    i1 %150 = icmp ult i32 %149, i32 10;
    i32 %151 = mul i32 %147, i32 10;
    i32 %152 = add i32 %151, i32 -48;
    i32 %153 = add i32 %146, i32 %152;
    cbr i1 %150(prob = 0.984615), ^while.body13, ^b5;
  ^b5:
    i32 %154 = phi [^141, i32 0] [^while.body13, i32 %153];
    i1 %155 = icmp neq i32 %143, i32 0;
    i32 %156 = neg i32 %154;
    i32 %157 = select i1 %155 ? i32 %156 : i32 %154;
    store i32* %133 with i32 %157;
    i32 %158 = add i32 %38, i32 1;
    i1 %159 = icmp sgt i32 %32, i32 %158;
    cbr i1 %159(prob = 0.984615), ^while.body4, ^entry2;
}
