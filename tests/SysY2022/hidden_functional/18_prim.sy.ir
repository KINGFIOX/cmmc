internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b1;
  ^b1:
    i32 %5 = phi [^entry, i32 %x] [^b, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
  ^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    i1 %3 = scmp gt i32 %1, i32 57;
    ubr ^b1;
  ^b1:
    i1 %4 = phi [^while.header, i1 true] [^b, i1 %3];
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32 %5 = call () -> i32 @getch();
    ubr ^while.header;
  ^while.header1:
    i32 %6 = phi [^b1, i32 %1] [^while.body1, i32 %10];
    i1 %7 = scmp gt i32 %6, i32 47;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
  ^b2:
    i1 %8 = scmp le i32 %6, i32 57;
    ubr ^b3;
  ^b3:
    i1 %9 = phi [^while.header1, i1 false] [^b2, i1 %8];
    cbr i1 %9(prob = 0.97), ^while.body1, ^b4;
  ^while.body1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header1;
  ^b4:
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header2;
  ^while.header2:
    i32 %12 = phi [^b4, i32 0] [^while.body2, i32 %19];
    i32 %13 = phi [^b4, i32 %11] [^while.body2, i32 %17];
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b6, ^b5;
  ^b5:
    i1 %15 = scmp gt i32 %13, i32 57;
    ubr ^b6;
  ^b6:
    i1 %16 = phi [^while.header2, i1 true] [^b5, i1 %15];
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.header3;
  ^while.body2:
    i32 %17 = call () -> i32 @getch();
    i1 %18 = scmp eq i32 %13, i32 45;
    i32 %19 = select i1 %18 ? i32 1 : i32 %12;
    ubr ^while.header2;
  ^while.header3:
    i32 %20 = phi [^b6, i32 0] [^while.body3, i32 %28];
    i32 %21 = phi [^b6, i32 %13] [^while.body3, i32 %25];
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b7, ^b8;
  ^b7:
    i1 %23 = scmp le i32 %21, i32 57;
    ubr ^b8;
  ^b8:
    i1 %24 = phi [^while.header3, i1 false] [^b7, i1 %23];
    cbr i1 %24(prob = 0.97), ^while.body3, ^b9;
  ^while.body3:
    i32 %25 = call () -> i32 @getch();
    i32 %26 = mul i32 %20, i32 10;
    i32 %27 = add i32 %21, i32 -48;
    i32 %28 = add i32 %27, i32 %26;
    ubr ^while.header3;
  ^b9:
    i1 %29 = scmp neq i32 %12, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b10;
  ^if.then:
    i32 %30 = neg i32 %20;
    ubr ^b10;
  ^b10:
    i32 %31 = phi [^b9, i32 %20] [^if.then, i32 %30];
    i1 %32 = scmp gt i32 %31, i32 0;
    [1005 * i32]* %33 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %34 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %35 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    cbr i1 %32(prob = 0.97), ^while.body4, ^entry1;
  ^while.body4:
    i32 %36 = phi [^b10, i32 0] [^b31, i32 %142];
    i32 %37 = call () -> i32 @getch();
    i32* %38 = getelementptr &([1005 * i32]* %33)[i64 0][i32 %36];
    ubr ^while.header4;
  ^entry1:
    [1005 * i32]* %39 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header5;
  ^while.header4:
    i32 %40 = phi [^while.body4, i32 0] [^while.body6, i32 %56];
    i32 %41 = phi [^while.body4, i32 %37] [^while.body6, i32 %54];
    i1 %42 = scmp lt i32 %41, i32 48;
    cbr i1 %42(prob = 0.5), ^b12, ^b11;
  ^while.header5:
    i32 %43 = phi [^entry1, i32 0] [^while.header8, i32 %49];
    i1 %44 = scmp lt i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body5, ^while.header6;
  ^b11:
    i1 %45 = scmp gt i32 %41, i32 57;
    ubr ^b12;
  ^while.body5:
    i32* %46 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %43];
    i32* %47 = getelementptr &([1005 * i32]* %33)[i64 0][i32 %43];
    i32* %48 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %43];
    i32 %49 = add i32 %43, i32 1;
    ubr ^while.header8;
  ^b12:
    i1 %50 = phi [^while.header4, i1 true] [^b11, i1 %45];
    cbr i1 %50(prob = 0.97), ^while.body6, ^while.header7;
  ^while.header6:
    i32 %51 = phi [^while.header5, i32 0] [^while.body7, i32 %51] [^b15, i32 %81];
    i32 %52 = phi [^while.header5, i32 0] [^while.body7, i32 %52] [^b15, i32 %80];
    i1 %53 = scmp lt i32 %51, i32 0;
    cbr i1 %53(prob = 0.97), ^while.body7, ^b13;
  ^while.body6:
    i32 %54 = call () -> i32 @getch();
    i1 %55 = scmp eq i32 %41, i32 45;
    i32 %56 = select i1 %55 ? i32 1 : i32 %40;
    ubr ^while.header4;
  ^while.header7:
    i32 %57 = phi [^b12, i32 0] [^while.body9, i32 %93];
    i32 %58 = phi [^b12, i32 %41] [^while.body9, i32 %90];
    i1 %59 = scmp gt i32 %58, i32 47;
    cbr i1 %59(prob = 0.5), ^b14, ^b16;
  ^while.header8:
    i32 %60 = phi [^while.body5, i32 %49] [^b17, i32 %94];
    i1 %61 = scmp lt i32 %60, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body8, ^while.header5;
  ^while.body7:
    i32* %62 = getelementptr &([1005 * i32]* %33)[i64 0][i32 %51];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %51];
    i32 %65 = load i32* %64;
    i32 %66 = call (i32) -> i32 @find(i32 %63);
    i32 %67 = call (i32) -> i32 @find(i32 %65);
    i1 %68 = scmp eq i32 %66, i32 %67;
    cbr i1 %68(prob = 0.5), ^while.header6, ^b15;
  ^b13:
    ret i32 %52;
  ^b14:
    i1 %69 = scmp le i32 %58, i32 57;
    ubr ^b16;
  ^while.body8:
    i32 %70 = load i32* %48;
    i32* %71 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %60];
    i32 %72 = load i32* %71;
    i1 %73 = scmp gt i32 %70, i32 %72;
    cbr i1 %73(prob = 0.5), ^if.then1, ^b17;
  ^b15:
    i32* %74 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %51];
    i32 %75 = load i32* %74;
    i32 %76 = load i32* %62;
    i32 %77 = call (i32) -> i32 @find(i32 %76);
    i32* %78 = getelementptr &([1005 * i32]* %39)[i64 0][i32 %77];
    i32 %79 = load i32* %64;
    store i32* %78 with i32 %79;
    i32 %80 = add i32 %52, i32 %75;
    i32 %81 = add i32 %51, i32 1;
    ubr ^while.header6;
  ^b16:
    i1 %82 = phi [^while.header7, i1 false] [^b14, i1 %69];
    cbr i1 %82(prob = 0.97), ^while.body9, ^b18;
  ^if.then1:
    i32 %83 = load i32* %47;
    i32* %84 = getelementptr &([1005 * i32]* %33)[i64 0][i32 %60];
    i32 %85 = load i32* %84;
    store i32* %47 with i32 %85;
    store i32* %84 with i32 %83;
    i32 %86 = load i32* %46;
    i32* %87 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %60];
    i32 %88 = load i32* %87;
    store i32* %46 with i32 %88;
    store i32* %87 with i32 %86;
    i32 %89 = load i32* %48;
    store i32* %48 with i32 %72;
    store i32* %71 with i32 %89;
    ubr ^b17;
  ^while.body9:
    i32 %90 = call () -> i32 @getch();
    i32 %91 = mul i32 %57, i32 10;
    i32 %92 = add i32 %58, i32 -48;
    i32 %93 = add i32 %92, i32 %91;
    ubr ^while.header7;
  ^b17:
    i32 %94 = add i32 %60, i32 1;
    ubr ^while.header8;
  ^b18:
    i1 %95 = scmp neq i32 %40, i32 0;
    cbr i1 %95(prob = 0.5), ^if.then2, ^b19;
  ^if.then2:
    i32 %96 = neg i32 %57;
    ubr ^b19;
  ^b19:
    i32 %97 = phi [^b18, i32 %57] [^if.then2, i32 %96];
    store i32* %38 with i32 %97;
    i32 %98 = call () -> i32 @getch();
    i32* %99 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %36];
    ubr ^while.header9;
  ^while.header9:
    i32 %100 = phi [^b19, i32 0] [^while.body10, i32 %107];
    i32 %101 = phi [^b19, i32 %98] [^while.body10, i32 %105];
    i1 %102 = scmp lt i32 %101, i32 48;
    cbr i1 %102(prob = 0.5), ^b21, ^b20;
  ^b20:
    i1 %103 = scmp gt i32 %101, i32 57;
    ubr ^b21;
  ^b21:
    i1 %104 = phi [^while.header9, i1 true] [^b20, i1 %103];
    cbr i1 %104(prob = 0.97), ^while.body10, ^while.header10;
  ^while.body10:
    i32 %105 = call () -> i32 @getch();
    i1 %106 = scmp eq i32 %101, i32 45;
    i32 %107 = select i1 %106 ? i32 1 : i32 %100;
    ubr ^while.header9;
  ^while.header10:
    i32 %108 = phi [^b21, i32 0] [^while.body11, i32 %116];
    i32 %109 = phi [^b21, i32 %101] [^while.body11, i32 %113];
    i1 %110 = scmp gt i32 %109, i32 47;
    cbr i1 %110(prob = 0.5), ^b22, ^b23;
  ^b22:
    i1 %111 = scmp le i32 %109, i32 57;
    ubr ^b23;
  ^b23:
    i1 %112 = phi [^while.header10, i1 false] [^b22, i1 %111];
    cbr i1 %112(prob = 0.97), ^while.body11, ^b24;
  ^while.body11:
    i32 %113 = call () -> i32 @getch();
    i32 %114 = mul i32 %108, i32 10;
    i32 %115 = add i32 %109, i32 -48;
    i32 %116 = add i32 %115, i32 %114;
    ubr ^while.header10;
  ^b24:
    i1 %117 = scmp neq i32 %100, i32 0;
    cbr i1 %117(prob = 0.5), ^if.then3, ^b25;
  ^if.then3:
    i32 %118 = neg i32 %108;
    ubr ^b25;
  ^b25:
    i32 %119 = phi [^b24, i32 %108] [^if.then3, i32 %118];
    store i32* %99 with i32 %119;
    i32 %120 = call () -> i32 @getch();
    i32* %121 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %36];
    ubr ^while.header11;
  ^while.header11:
    i32 %122 = phi [^b25, i32 0] [^while.body12, i32 %129];
    i32 %123 = phi [^b25, i32 %120] [^while.body12, i32 %127];
    i1 %124 = scmp lt i32 %123, i32 48;
    cbr i1 %124(prob = 0.5), ^b27, ^b26;
  ^b26:
    i1 %125 = scmp gt i32 %123, i32 57;
    ubr ^b27;
  ^b27:
    i1 %126 = phi [^while.header11, i1 true] [^b26, i1 %125];
    cbr i1 %126(prob = 0.97), ^while.body12, ^while.header12;
  ^while.body12:
    i32 %127 = call () -> i32 @getch();
    i1 %128 = scmp eq i32 %123, i32 45;
    i32 %129 = select i1 %128 ? i32 1 : i32 %122;
    ubr ^while.header11;
  ^while.header12:
    i32 %130 = phi [^b27, i32 0] [^while.body13, i32 %138];
    i32 %131 = phi [^b27, i32 %123] [^while.body13, i32 %135];
    i1 %132 = scmp gt i32 %131, i32 47;
    cbr i1 %132(prob = 0.5), ^b28, ^b29;
  ^b28:
    i1 %133 = scmp le i32 %131, i32 57;
    ubr ^b29;
  ^b29:
    i1 %134 = phi [^while.header12, i1 false] [^b28, i1 %133];
    cbr i1 %134(prob = 0.97), ^while.body13, ^b30;
  ^while.body13:
    i32 %135 = call () -> i32 @getch();
    i32 %136 = mul i32 %130, i32 10;
    i32 %137 = add i32 %131, i32 -48;
    i32 %138 = add i32 %137, i32 %136;
    ubr ^while.header12;
  ^b30:
    i1 %139 = scmp neq i32 %122, i32 0;
    cbr i1 %139(prob = 0.5), ^if.then4, ^b31;
  ^if.then4:
    i32 %140 = neg i32 %130;
    ubr ^b31;
  ^b31:
    i32 %141 = phi [^b30, i32 %130] [^if.then4, i32 %140];
    store i32* %121 with i32 %141;
    i32 %142 = add i32 %36, i32 1;
    i1 %143 = scmp lt i32 %142, i32 %31;
    cbr i1 %143(prob = 0.97), ^while.body4, ^entry1;
}
