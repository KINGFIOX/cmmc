internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u, align 8 { Flexible };
internal [1005 * i32]* @v, align 8 { Flexible };
internal [1005 * i32]* @c, align 8 { Flexible };
internal [1005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^entry4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %20];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^entry4:
    i32* %17 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %14, i32 %18;
    cbr i1 %19(prob = 0.5), ^b4, ^entry5;
  ^b4:
    i32 %20 = phi [^entry4, i32 %14] [^b5, i32 %24];
    store i32* %13 with i32 %20;
    ubr ^b3;
  ^entry5:
    i32* %21 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %18, i32 %22;
    cbr i1 %23(prob = 0.5), ^b5, ^entry6;
  ^b5:
    i32 %24 = phi [^entry5, i32 %18] [^b6, i32 %28];
    store i32* %17 with i32 %24;
    ubr ^b4;
  ^entry6:
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %22, i32 %26;
    cbr i1 %27(prob = 0.5), ^b6, ^entry7;
  ^b6:
    i32 %28 = phi [^entry6, i32 %22] [^b7, i32 %32];
    store i32* %21 with i32 %28;
    ubr ^b5;
  ^entry7:
    i32* %29 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %26];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %26, i32 %30;
    cbr i1 %31(prob = 0.5), ^b7, ^b8;
  ^b7:
    i32 %32 = phi [^entry7, i32 %26] [^b8, i32 %33];
    store i32* %25 with i32 %32;
    ubr ^b6;
  ^b8:
    i32 %33 = call (i32) -> i32 @find(i32 %30);
    store i32* %29 with i32 %33;
    ubr ^b7;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^while.body1;
  ^while.body1:
    i32 %3 = call () -> i32 @getch();
    i32 %4 = add i32 %3, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.984615), ^while.body1, ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ugt i32 %7, i32 9;
    cbr i1 %8(prob = 0.984615), ^while.body2, ^16;
  ^while.body2:
    i32 %9 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %10 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ugt i32 %12, i32 9;
    i1 %14 = icmp eq i32 %9, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %10;
    cbr i1 %13(prob = 0.984615), ^while.body2, ^16;
  ^16:
    i32 %17 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %18 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.984615), ^while.body3, ^b;
  ^while.body3:
    i32 %21 = phi [^16, i32 %17] [^while.body3, i32 %23];
    i32 %22 = phi [^16, i32 0] [^while.body3, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.984615), ^while.body3, ^b;
  ^b:
    i32 %29 = phi [^16, i32 0] [^while.body3, i32 %28];
    i1 %30 = icmp neq i32 %18, i32 0;
    i32 %31 = neg i32 %29;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %29;
    i1 %33 = icmp sgt i32 %32, i32 0;
    [1005 * i32]* %34 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %35 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %36 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    cbr i1 %33(prob = 0.984615), ^while.body4, ^while.header;
  ^while.body4:
    i32 %37 = phi [^b, i32 0] [^b6, i32 %158];
    i32 %38 = call () -> i32 @getch();
    i32 %39 = add i32 %38, i32 -48;
    i1 %40 = icmp ugt i32 %39, i32 9;
    i32* %41 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %37];
    cbr i1 %40(prob = 0.984615), ^while.body5, ^52;
  ^while.header:
    i32 %42 = phi [^b, i32 0] [^while.body6, i32 %57] [^while.body8, i32 %57] [^if.then, i32 %57] [^b6, i32 0];
    i1 %43 = icmp slt i32 %42, i32 0;
    cbr i1 %43(prob = 0.984615), ^while.body6, ^b1;
  ^while.body5:
    i32 %44 = phi [^while.body4, i32 %38] [^while.body5, i32 %46];
    i32 %45 = phi [^while.body4, i32 0] [^while.body5, i32 %50];
    i32 %46 = call () -> i32 @getch();
    i32 %47 = add i32 %46, i32 -48;
    i1 %48 = icmp ugt i32 %47, i32 9;
    i1 %49 = icmp eq i32 %44, i32 45;
    i32 %50 = select i1 %49 ? i32 1 : i32 %45;
    cbr i1 %48(prob = 0.984615), ^while.body5, ^52;
  ^b1:
    [1005 * i32]* %51 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header1;
  ^52:
    i32 %53 = phi [^while.body4, i32 %38] [^while.body5, i32 %46];
    i32 %54 = phi [^while.body4, i32 0] [^while.body5, i32 %50];
    i32 %55 = add i32 %53, i32 -48;
    i1 %56 = icmp ult i32 %55, i32 10;
    cbr i1 %56(prob = 0.984615), ^while.body7, ^b2;
  ^while.body6:
    i32 %57 = add i32 %42, i32 1;
    i1 %58 = icmp slt i32 %57, i32 0;
    cbr i1 %58(prob = 0.984615), ^while.body8, ^while.header;
  ^while.body7:
    i32 %59 = phi [^52, i32 %53] [^while.body7, i32 %61];
    i32 %60 = phi [^52, i32 0] [^while.body7, i32 %66];
    i32 %61 = call () -> i32 @getch();
    i32 %62 = add i32 %61, i32 -48;
    i1 %63 = icmp ult i32 %62, i32 10;
    i32 %64 = mul i32 %60, i32 10;
    i32 %65 = add i32 %64, i32 -48;
    i32 %66 = add i32 %59, i32 %65;
    cbr i1 %63(prob = 0.984615), ^while.body7, ^b2;
  ^while.body8:
    i32* %67 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %42];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %67)[i64 1];
    i32 %70 = load i32* %69;
    i1 %71 = icmp sgt i32 %68, i32 %70;
    cbr i1 %71(prob = 0.5), ^if.then, ^while.header;
  ^b2:
    i32 %72 = phi [^52, i32 0] [^while.body7, i32 %66];
    i1 %73 = icmp neq i32 %54, i32 0;
    i32 %74 = neg i32 %72;
    i32 %75 = select i1 %73 ? i32 %74 : i32 %72;
    store i32* %41 with i32 %75;
    i32 %76 = call () -> i32 @getch();
    i32 %77 = add i32 %76, i32 -48;
    i1 %78 = icmp ugt i32 %77, i32 9;
    i32* %79 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %37];
    cbr i1 %78(prob = 0.984615), ^while.body9, ^105;
  ^while.header1:
    i32 %80 = phi [^b1, i32 0] [^while.body10, i32 %80] [^b4, i32 %116];
    i32 %81 = phi [^b1, i32 0] [^while.body10, i32 %81] [^b4, i32 %117];
    i1 %82 = icmp slt i32 %81, i32 0;
    cbr i1 %82(prob = 0.984615), ^while.body10, ^b3;
  ^if.then:
    i32* %83 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %42];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %83)[i64 1];
    i32 %86 = load i32* %85;
    store i32* %83 with i32 %86;
    store i32* %85 with i32 %84;
    i32* %87 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %42];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %87)[i64 1];
    i32 %90 = load i32* %89;
    store i32* %87 with i32 %90;
    store i32* %89 with i32 %88;
    store i32* %67 with i32 %70;
    store i32* %69 with i32 %68;
    ubr ^while.header;
  ^while.body9:
    i32 %91 = phi [^b2, i32 %76] [^while.body9, i32 %93];
    i32 %92 = phi [^b2, i32 0] [^while.body9, i32 %97];
    i32 %93 = call () -> i32 @getch();
    i32 %94 = add i32 %93, i32 -48;
    i1 %95 = icmp ugt i32 %94, i32 9;
    i1 %96 = icmp eq i32 %91, i32 45;
    i32 %97 = select i1 %96 ? i32 1 : i32 %92;
    cbr i1 %95(prob = 0.984615), ^while.body9, ^105;
  ^while.body10:
    i32* %98 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %81];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %81];
    i32 %101 = load i32* %100;
    i32 %102 = call (i32) -> i32 @find(i32 %99);
    i32 %103 = call (i32) -> i32 @find(i32 %101);
    i1 %104 = icmp eq i32 %102, i32 %103;
    cbr i1 %104(prob = 0.5), ^while.header1, ^b4;
  ^105:
    i32 %106 = phi [^b2, i32 %76] [^while.body9, i32 %93];
    i32 %107 = phi [^b2, i32 0] [^while.body9, i32 %97];
    i32 %108 = add i32 %106, i32 -48;
    i1 %109 = icmp ult i32 %108, i32 10;
    cbr i1 %109(prob = 0.984615), ^while.body11, ^b5;
  ^b3:
    ret i32 %80;
  ^b4:
    i32* %110 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %81];
    i32 %111 = load i32* %110;
    i32 %112 = load i32* %98;
    i32 %113 = call (i32) -> i32 @find(i32 %112);
    i32* %114 = getelementptr &([1005 * i32]* %51)[i64 0][i32 %113];
    i32 %115 = load i32* %100;
    store i32* %114 with i32 %115;
    i32 %116 = add i32 %80, i32 %111;
    i32 %117 = add i32 %81, i32 1;
    ubr ^while.header1;
  ^while.body11:
    i32 %118 = phi [^105, i32 %106] [^while.body11, i32 %120];
    i32 %119 = phi [^105, i32 0] [^while.body11, i32 %125];
    i32 %120 = call () -> i32 @getch();
    i32 %121 = add i32 %120, i32 -48;
    i1 %122 = icmp ult i32 %121, i32 10;
    i32 %123 = mul i32 %119, i32 10;
    i32 %124 = add i32 %123, i32 -48;
    i32 %125 = add i32 %118, i32 %124;
    cbr i1 %122(prob = 0.984615), ^while.body11, ^b5;
  ^b5:
    i32 %126 = phi [^105, i32 0] [^while.body11, i32 %125];
    i1 %127 = icmp neq i32 %107, i32 0;
    i32 %128 = neg i32 %126;
    i32 %129 = select i1 %127 ? i32 %128 : i32 %126;
    store i32* %79 with i32 %129;
    i32 %130 = call () -> i32 @getch();
    i32 %131 = add i32 %130, i32 -48;
    i1 %132 = icmp ugt i32 %131, i32 9;
    i32* %133 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %37];
    cbr i1 %132(prob = 0.984615), ^while.body12, ^141;
  ^while.body12:
    i32 %134 = phi [^b5, i32 %130] [^while.body12, i32 %136];
    i32 %135 = phi [^b5, i32 0] [^while.body12, i32 %140];
    i32 %136 = call () -> i32 @getch();
    i32 %137 = add i32 %136, i32 -48;
    i1 %138 = icmp ugt i32 %137, i32 9;
    i1 %139 = icmp eq i32 %134, i32 45;
    i32 %140 = select i1 %139 ? i32 1 : i32 %135;
    cbr i1 %138(prob = 0.984615), ^while.body12, ^141;
  ^141:
    i32 %142 = phi [^b5, i32 %130] [^while.body12, i32 %136];
    i32 %143 = phi [^b5, i32 0] [^while.body12, i32 %140];
    i32 %144 = add i32 %142, i32 -48;
    i1 %145 = icmp ult i32 %144, i32 10;
    cbr i1 %145(prob = 0.984615), ^while.body13, ^b6;
  ^while.body13:
    i32 %146 = phi [^141, i32 %142] [^while.body13, i32 %148];
    i32 %147 = phi [^141, i32 0] [^while.body13, i32 %153];
    i32 %148 = call () -> i32 @getch();
    i32 %149 = add i32 %148, i32 -48;
    i1 %150 = icmp ult i32 %149, i32 10;
    i32 %151 = mul i32 %147, i32 10;
    i32 %152 = add i32 %151, i32 -48;
    i32 %153 = add i32 %146, i32 %152;
    cbr i1 %150(prob = 0.984615), ^while.body13, ^b6;
  ^b6:
    i32 %154 = phi [^141, i32 0] [^while.body13, i32 %153];
    i1 %155 = icmp neq i32 %143, i32 0;
    i32 %156 = neg i32 %154;
    i32 %157 = select i1 %155 ? i32 %156 : i32 %154;
    store i32* %133 with i32 %157;
    i32 %158 = add i32 %37, i32 1;
    i1 %159 = icmp sgt i32 %32, i32 %158;
    cbr i1 %159(prob = 0.984615), ^while.body4, ^while.header;
}
