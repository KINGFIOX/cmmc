internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x, i32* %0, i32* %1) -> i32 {
^entry:
    i32* %2 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %x, i32 %3;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i32 %5 = call (i32, i32*, i32*) -> i32 @find(i32 %3, i32* %0, i32* %1);
    store i32* %2 with i32 %5;
    ubr ^b1;
^b1:
    i32 %6 = phi [^entry, i32 %x] [^b, i32 %5];
    ret i32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^while.guard:
    i32 %6 = phi [^entry, i32 %0] [^b1, i32 %4];
    i1 %7 = scmp gt i32 %6, i32 47;
    i1 %8 = scmp lt i32 %6, i32 58;
    i1 %9 = and i1 %7, i1 %8;
    cbr i1 %9(prob = 0.48), ^while.body1, ^b2;
^b:
    i1 %10 = scmp gt i32 %4, i32 57;
    ubr ^b1;
^b1:
    i1 %11 = phi [^while.body, i1 true] [^b, i1 %10];
    cbr i1 %11(prob = 0.97), ^while.body, ^while.guard;
^while.body1:
    i32 %12 = call () -> i32 @getch();
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b2:
    i32 %14 = call () -> i32 @getch();
    i1 %15 = scmp lt i32 %14, i32 48;
    i1 %16 = scmp gt i32 %14, i32 57;
    i1 %17 = or i1 %15, i1 %16;
    cbr i1 %17(prob = 0.98), ^while.body2, ^while.guard1;
^b3:
    i1 %18 = scmp le i32 %12, i32 57;
    ubr ^b4;
^b4:
    i1 %19 = phi [^while.body1, i1 false] [^b3, i1 %18];
    cbr i1 %19(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %20 = phi [^b2, i32 %14] [^b9, i32 %29];
    i32 %21 = phi [^b2, i32 0] [^b9, i32 %28];
    i1 %22 = scmp eq i32 %20, i32 45;
    cbr i1 %22(prob = 0.5), ^if.then, ^b5;
^while.guard1:
    i32 %23 = phi [^b2, i32 %14] [^b9, i32 %29];
    i32 %24 = phi [^b2, i32 0] [^b9, i32 %28];
    i1 %25 = scmp gt i32 %23, i32 47;
    i1 %26 = scmp lt i32 %23, i32 58;
    i1 %27 = and i1 %25, i1 %26;
    cbr i1 %27(prob = 0.48), ^while.body3, ^b6;
^if.then:
    ubr ^b5;
^b5:
    i32 %28 = phi [^while.body2, i32 %21] [^if.then, i32 1];
    i32 %29 = call () -> i32 @getch();
    i1 %30 = scmp lt i32 %29, i32 48;
    cbr i1 %30(prob = 0.5), ^b9, ^b8;
^while.body3:
    i32 %31 = phi [^while.guard1, i32 %23] [^b10, i32 %36];
    i32 %32 = phi [^while.guard1, i32 0] [^b10, i32 %35];
    i32 %33 = add i32 %31, i32 -48;
    i32 %34 = mul i32 %32, i32 10;
    i32 %35 = add i32 %33, i32 %34;
    i32 %36 = call () -> i32 @getch();
    i1 %37 = scmp gt i32 %36, i32 47;
    cbr i1 %37(prob = 0.5), ^b7, ^b10;
^b6:
    i32 %38 = phi [^while.guard1, i32 0] [^b10, i32 %35];
    i1 %39 = scmp neq i32 %24, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b11;
^b7:
    i1 %40 = scmp le i32 %36, i32 57;
    ubr ^b10;
^b8:
    i1 %41 = scmp gt i32 %29, i32 57;
    ubr ^b9;
^if.then1:
    i32 %42 = neg i32 %38;
    ubr ^b11;
^b9:
    i1 %43 = phi [^b5, i1 true] [^b8, i1 %41];
    cbr i1 %43(prob = 0.97), ^while.body2, ^while.guard1;
^b10:
    i1 %44 = phi [^while.body3, i1 false] [^b7, i1 %40];
    cbr i1 %44(prob = 0.97), ^while.body3, ^b6;
^b11:
    i32 %45 = phi [^b6, i32 %38] [^if.then1, i32 %42];
    i1 %46 = scmp gt i32 %45, i32 0;
    cbr i1 %46(prob = 0.97), ^while.body4, ^while.guard2;
^while.body4:
    i32 %47 = phi [^b11, i32 0] [^b36, i32 %168];
    i32* %48 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %47];
    i32 %49 = call () -> i32 @getch();
    i1 %50 = scmp lt i32 %49, i32 48;
    i1 %51 = scmp gt i32 %49, i32 57;
    i1 %52 = or i1 %50, i1 %51;
    cbr i1 %52(prob = 0.98), ^while.body5, ^while.guard3;
^while.guard2:
    i32 %53 = phi [^b11, i32 0] [^b15, i32 %73] [^b36, i32 0];
    i32 %54 = phi [^b11, i32 0] [^b15, i32 %65] [^b36, i32 0];
    i32 %55 = phi [^b11, i32 0] [^b15, i32 %66] [^b36, i32 0];
    i1 %56 = scmp lt i32 %54, i32 %53;
    cbr i1 %56(prob = 0.97), ^while.body6, ^b12;
^while.body5:
    i32 %57 = phi [^while.body4, i32 %49] [^b19, i32 %77];
    i32 %58 = phi [^while.body4, i32 0] [^b19, i32 %76];
    i1 %59 = scmp eq i32 %57, i32 45;
    cbr i1 %59(prob = 0.5), ^if.then2, ^b14;
^while.guard3:
    i32 %60 = phi [^while.body4, i32 %49] [^b19, i32 %77];
    i32 %61 = phi [^while.body4, i32 0] [^b19, i32 %76];
    i1 %62 = scmp gt i32 %60, i32 47;
    i1 %63 = scmp lt i32 %60, i32 58;
    i1 %64 = and i1 %62, i1 %63;
    cbr i1 %64(prob = 0.48), ^while.body7, ^b16;
^while.body6:
    i32 %65 = phi [^while.guard2, i32 %54] [^b21, i32 %103];
    i32 %66 = phi [^while.guard2, i32 %55] [^b21, i32 %97];
    i32* %67 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %65];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %65];
    i32 %70 = load i32* %69;
    i32 %71 = call (i32, i32*, i32*) -> i32 @find(i32 %68, i32* %n, i32* %m);
    i32 %72 = call (i32, i32*, i32*) -> i32 @find(i32 %70, i32* %n, i32* %m);
    i32 %73 = load i32* %m;
    i1 %74 = scmp eq i32 %71, i32 %72;
    cbr i1 %74(prob = 0.5), ^b15, ^b13;
^b12:
    i32 %75 = phi [^while.guard2, i32 %55] [^b21, i32 %97];
    ret i32 %75;
^if.then2:
    ubr ^b14;
^b13:
    ubr ^b15;
^b14:
    i32 %76 = phi [^while.body5, i32 %58] [^if.then2, i32 1];
    i32 %77 = call () -> i32 @getch();
    i1 %78 = scmp lt i32 %77, i32 48;
    cbr i1 %78(prob = 0.5), ^b19, ^b18;
^while.body7:
    i32 %79 = phi [^while.guard3, i32 %60] [^b20, i32 %84];
    i32 %80 = phi [^while.guard3, i32 0] [^b20, i32 %83];
    i32 %81 = add i32 %79, i32 -48;
    i32 %82 = mul i32 %80, i32 10;
    i32 %83 = add i32 %81, i32 %82;
    i32 %84 = call () -> i32 @getch();
    i1 %85 = scmp gt i32 %84, i32 47;
    cbr i1 %85(prob = 0.5), ^b17, ^b20;
^b15:
    i32 %86 = phi [^while.body6, i32 1] [^b13, i32 0];
    i1 %87 = scmp neq i32 %86, i32 0;
    cbr i1 %87(prob = 0.5), ^while.guard2, ^b21;
^b16:
    i32 %88 = phi [^while.guard3, i32 0] [^b20, i32 %83];
    i1 %89 = scmp neq i32 %61, i32 0;
    cbr i1 %89(prob = 0.5), ^if.then3, ^b22;
^b17:
    i1 %90 = scmp le i32 %84, i32 57;
    ubr ^b20;
^b18:
    i1 %91 = scmp gt i32 %77, i32 57;
    ubr ^b19;
^if.then3:
    i32 %92 = neg i32 %88;
    ubr ^b22;
^b19:
    i1 %93 = phi [^b14, i1 true] [^b18, i1 %91];
    cbr i1 %93(prob = 0.97), ^while.body5, ^while.guard3;
^b20:
    i1 %94 = phi [^while.body7, i1 false] [^b17, i1 %90];
    cbr i1 %94(prob = 0.97), ^while.body7, ^b16;
^b21:
    i32* %95 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %65];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %66, i32 %96;
    i32 %98 = load i32* %67;
    i32 %99 = call (i32, i32*, i32*) -> i32 @find(i32 %98, i32* %n, i32* %m);
    i32 %100 = load i32* %m;
    i32* %101 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %99];
    i32 %102 = load i32* %69;
    store i32* %101 with i32 %102;
    i32 %103 = add i32 %65, i32 1;
    i1 %104 = scmp lt i32 %103, i32 %100;
    cbr i1 %104(prob = 0.97), ^while.body6, ^b12;
^b22:
    i32 %105 = phi [^b16, i32 %88] [^if.then3, i32 %92];
    store i32* %48 with i32 %105;
    i32* %106 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %47];
    i32 %107 = call () -> i32 @getch();
    i1 %108 = scmp lt i32 %107, i32 48;
    i1 %109 = scmp gt i32 %107, i32 57;
    i1 %110 = or i1 %108, i1 %109;
    cbr i1 %110(prob = 0.98), ^while.body8, ^while.guard4;
^while.body8:
    i32 %111 = phi [^b22, i32 %107] [^b27, i32 %120];
    i32 %112 = phi [^b22, i32 0] [^b27, i32 %119];
    i1 %113 = scmp eq i32 %111, i32 45;
    cbr i1 %113(prob = 0.5), ^if.then4, ^b23;
^while.guard4:
    i32 %114 = phi [^b22, i32 %107] [^b27, i32 %120];
    i32 %115 = phi [^b22, i32 0] [^b27, i32 %119];
    i1 %116 = scmp gt i32 %114, i32 47;
    i1 %117 = scmp lt i32 %114, i32 58;
    i1 %118 = and i1 %116, i1 %117;
    cbr i1 %118(prob = 0.48), ^while.body9, ^b24;
^if.then4:
    ubr ^b23;
^b23:
    i32 %119 = phi [^while.body8, i32 %112] [^if.then4, i32 1];
    i32 %120 = call () -> i32 @getch();
    i1 %121 = scmp lt i32 %120, i32 48;
    cbr i1 %121(prob = 0.5), ^b27, ^b26;
^while.body9:
    i32 %122 = phi [^while.guard4, i32 %114] [^b28, i32 %127];
    i32 %123 = phi [^while.guard4, i32 0] [^b28, i32 %126];
    i32 %124 = add i32 %122, i32 -48;
    i32 %125 = mul i32 %123, i32 10;
    i32 %126 = add i32 %124, i32 %125;
    i32 %127 = call () -> i32 @getch();
    i1 %128 = scmp gt i32 %127, i32 47;
    cbr i1 %128(prob = 0.5), ^b25, ^b28;
^b24:
    i32 %129 = phi [^while.guard4, i32 0] [^b28, i32 %126];
    i1 %130 = scmp neq i32 %115, i32 0;
    cbr i1 %130(prob = 0.5), ^if.then5, ^b29;
^b25:
    i1 %131 = scmp le i32 %127, i32 57;
    ubr ^b28;
^b26:
    i1 %132 = scmp gt i32 %120, i32 57;
    ubr ^b27;
^if.then5:
    i32 %133 = neg i32 %129;
    ubr ^b29;
^b27:
    i1 %134 = phi [^b23, i1 true] [^b26, i1 %132];
    cbr i1 %134(prob = 0.97), ^while.body8, ^while.guard4;
^b28:
    i1 %135 = phi [^while.body9, i1 false] [^b25, i1 %131];
    cbr i1 %135(prob = 0.97), ^while.body9, ^b24;
^b29:
    i32 %136 = phi [^b24, i32 %129] [^if.then5, i32 %133];
    store i32* %106 with i32 %136;
    i32* %137 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %47];
    i32 %138 = call () -> i32 @getch();
    i1 %139 = scmp lt i32 %138, i32 48;
    i1 %140 = scmp gt i32 %138, i32 57;
    i1 %141 = or i1 %139, i1 %140;
    cbr i1 %141(prob = 0.98), ^while.body10, ^while.guard5;
^while.body10:
    i32 %142 = phi [^b29, i32 %138] [^b34, i32 %151];
    i32 %143 = phi [^b29, i32 0] [^b34, i32 %150];
    i1 %144 = scmp eq i32 %142, i32 45;
    cbr i1 %144(prob = 0.5), ^if.then6, ^b30;
^while.guard5:
    i32 %145 = phi [^b29, i32 %138] [^b34, i32 %151];
    i32 %146 = phi [^b29, i32 0] [^b34, i32 %150];
    i1 %147 = scmp gt i32 %145, i32 47;
    i1 %148 = scmp lt i32 %145, i32 58;
    i1 %149 = and i1 %147, i1 %148;
    cbr i1 %149(prob = 0.48), ^while.body11, ^b31;
^if.then6:
    ubr ^b30;
^b30:
    i32 %150 = phi [^while.body10, i32 %143] [^if.then6, i32 1];
    i32 %151 = call () -> i32 @getch();
    i1 %152 = scmp lt i32 %151, i32 48;
    cbr i1 %152(prob = 0.5), ^b34, ^b33;
^while.body11:
    i32 %153 = phi [^while.guard5, i32 %145] [^b35, i32 %158];
    i32 %154 = phi [^while.guard5, i32 0] [^b35, i32 %157];
    i32 %155 = add i32 %153, i32 -48;
    i32 %156 = mul i32 %154, i32 10;
    i32 %157 = add i32 %155, i32 %156;
    i32 %158 = call () -> i32 @getch();
    i1 %159 = scmp gt i32 %158, i32 47;
    cbr i1 %159(prob = 0.5), ^b32, ^b35;
^b31:
    i32 %160 = phi [^while.guard5, i32 0] [^b35, i32 %157];
    i1 %161 = scmp neq i32 %146, i32 0;
    cbr i1 %161(prob = 0.5), ^if.then7, ^b36;
^b32:
    i1 %162 = scmp le i32 %158, i32 57;
    ubr ^b35;
^b33:
    i1 %163 = scmp gt i32 %151, i32 57;
    ubr ^b34;
^if.then7:
    i32 %164 = neg i32 %160;
    ubr ^b36;
^b34:
    i1 %165 = phi [^b30, i1 true] [^b33, i1 %163];
    cbr i1 %165(prob = 0.97), ^while.body10, ^while.guard5;
^b35:
    i1 %166 = phi [^while.body11, i1 false] [^b32, i1 %162];
    cbr i1 %166(prob = 0.97), ^while.body11, ^b31;
^b36:
    i32 %167 = phi [^b31, i32 %160] [^if.then7, i32 %164];
    store i32* %137 with i32 %167;
    i32 %168 = add i32 %47, i32 1;
    i1 %169 = scmp lt i32 %168, i32 %45;
    cbr i1 %169(prob = 0.97), ^while.body4, ^while.guard2;
}
