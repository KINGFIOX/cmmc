internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b1;
  ^b1:
    i32 %5 = phi [^entry, i32 %x] [^b, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp lt i32 %4, i32 48;
    i1 %6 = scmp gt i32 %4, i32 57;
    i1 %7 = or i1 %5, i1 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %4];
    i1 %9 = scmp gt i32 %8, i32 47;
    i1 %10 = scmp le i32 %8, i32 57;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %12 = call () -> i32 @getch();
    i1 %13 = scmp gt i32 %12, i32 47;
    i1 %14 = scmp le i32 %12, i32 57;
    i1 %15 = and i1 %13, i1 %14;
    cbr i1 %15(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %16 = call () -> i32 @getch();
    i1 %17 = scmp lt i32 %16, i32 48;
    i1 %18 = scmp gt i32 %16, i32 57;
    i1 %19 = or i1 %17, i1 %18;
    cbr i1 %19(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %20 = phi [^entry1, i32 %16] [^while.body2, i32 %22];
    i32 %21 = phi [^entry1, i32 0] [^while.body2, i32 %27];
    i32 %22 = call () -> i32 @getch();
    i1 %23 = scmp lt i32 %22, i32 48;
    i1 %24 = scmp gt i32 %22, i32 57;
    i1 %25 = or i1 %23, i1 %24;
    i1 %26 = scmp eq i32 %20, i32 45;
    i32 %27 = select i1 %26 ? i32 1 : i32 %21;
    cbr i1 %25(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %28 = phi [^entry1, i32 %16] [^while.body2, i32 %22];
    i32 %29 = phi [^entry1, i32 0] [^while.body2, i32 %27];
    i1 %30 = scmp gt i32 %28, i32 47;
    i1 %31 = scmp le i32 %28, i32 57;
    i1 %32 = and i1 %30, i1 %31;
    cbr i1 %32(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %33 = phi [^indirect1, i32 0] [^while.body3, i32 %41];
    i32 %34 = phi [^indirect1, i32 %28] [^while.body3, i32 %35];
    i32 %35 = call () -> i32 @getch();
    i1 %36 = scmp gt i32 %35, i32 47;
    i1 %37 = scmp le i32 %35, i32 57;
    i1 %38 = and i1 %36, i1 %37;
    i32 %39 = mul i32 %33, i32 10;
    i32 %40 = add i32 %39, i32 -48;
    i32 %41 = add i32 %40, i32 %34;
    cbr i1 %38(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %42 = phi [^indirect1, i32 0] [^while.body3, i32 %41];
    i32 %43 = neg i32 %42;
    i1 %44 = scmp neq i32 %29, i32 0;
    i32 %45 = select i1 %44 ? i32 %43 : i32 %42;
    i1 %46 = scmp gt i32 %45, i32 0;
    [1005 * i32]* %47 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %48 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %49 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    cbr i1 %46(prob = 0.97), ^while.body4, ^entry2;
  ^entry2:
    [1005 * i32]* %50 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %51 = phi [^b, i32 0] [^b6, i32 %183];
    i32 %52 = call () -> i32 @getch();
    i1 %53 = scmp lt i32 %52, i32 48;
    i1 %54 = scmp gt i32 %52, i32 57;
    i1 %55 = or i1 %53, i1 %54;
    i32* %56 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %51];
    cbr i1 %55(prob = 0.97), ^while.body5, ^indirect2;
  ^while.body5:
    i32 %57 = phi [^while.body4, i32 %52] [^while.body5, i32 %59];
    i32 %58 = phi [^while.body4, i32 0] [^while.body5, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i1 %60 = scmp lt i32 %59, i32 48;
    i1 %61 = scmp gt i32 %59, i32 57;
    i1 %62 = or i1 %60, i1 %61;
    i1 %63 = scmp eq i32 %57, i32 45;
    i32 %64 = select i1 %63 ? i32 1 : i32 %58;
    cbr i1 %62(prob = 0.97), ^while.body5, ^indirect2;
  ^indirect2:
    i32 %65 = phi [^while.body4, i32 %52] [^while.body5, i32 %59];
    i32 %66 = phi [^while.body4, i32 0] [^while.body5, i32 %64];
    i1 %67 = scmp gt i32 %65, i32 47;
    i1 %68 = scmp le i32 %65, i32 57;
    i1 %69 = and i1 %67, i1 %68;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b1;
  ^while.header:
    i32 %70 = phi [^entry2, i32 0] [^while.header2, i32 %75];
    i1 %71 = scmp lt i32 %70, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body6, ^while.header1;
  ^while.body6:
    i32* %72 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %70];
    i32* %73 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %70];
    i32* %74 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %70];
    i32 %75 = add i32 %70, i32 1;
    ubr ^while.header2;
  ^while.body7:
    i32 %76 = phi [^indirect2, i32 0] [^while.body7, i32 %84];
    i32 %77 = phi [^indirect2, i32 %65] [^while.body7, i32 %78];
    i32 %78 = call () -> i32 @getch();
    i1 %79 = scmp gt i32 %78, i32 47;
    i1 %80 = scmp le i32 %78, i32 57;
    i1 %81 = and i1 %79, i1 %80;
    i32 %82 = mul i32 %76, i32 10;
    i32 %83 = add i32 %82, i32 -48;
    i32 %84 = add i32 %83, i32 %77;
    cbr i1 %81(prob = 0.97), ^while.body7, ^b1;
  ^b1:
    i32 %85 = phi [^indirect2, i32 0] [^while.body7, i32 %84];
    i32 %86 = neg i32 %85;
    i1 %87 = scmp neq i32 %66, i32 0;
    i32 %88 = select i1 %87 ? i32 %86 : i32 %85;
    store i32* %56 with i32 %88;
    i32 %89 = call () -> i32 @getch();
    i1 %90 = scmp lt i32 %89, i32 48;
    i1 %91 = scmp gt i32 %89, i32 57;
    i1 %92 = or i1 %90, i1 %91;
    i32* %93 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %51];
    cbr i1 %92(prob = 0.97), ^while.body8, ^indirect3;
  ^while.header1:
    i32 %94 = phi [^while.header, i32 0] [^while.body9, i32 %94] [^b3, i32 %130];
    i32 %95 = phi [^while.header, i32 0] [^while.body9, i32 %95] [^b3, i32 %129];
    i1 %96 = scmp lt i32 %94, i32 0;
    cbr i1 %96(prob = 0.97), ^while.body9, ^b2;
  ^while.header2:
    i32 %97 = phi [^while.body6, i32 %75] [^b5, i32 %156];
    i1 %98 = scmp lt i32 %97, i32 0;
    cbr i1 %98(prob = 0.97), ^while.body10, ^while.header;
  ^while.body8:
    i32 %99 = phi [^b1, i32 %89] [^while.body8, i32 %101];
    i32 %100 = phi [^b1, i32 0] [^while.body8, i32 %106];
    i32 %101 = call () -> i32 @getch();
    i1 %102 = scmp lt i32 %101, i32 48;
    i1 %103 = scmp gt i32 %101, i32 57;
    i1 %104 = or i1 %102, i1 %103;
    i1 %105 = scmp eq i32 %99, i32 45;
    i32 %106 = select i1 %105 ? i32 1 : i32 %100;
    cbr i1 %104(prob = 0.97), ^while.body8, ^indirect3;
  ^while.body9:
    i32* %107 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %94];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %94];
    i32 %110 = load i32* %109;
    i32 %111 = call (i32) -> i32 @find(i32 %108);
    i32 %112 = call (i32) -> i32 @find(i32 %110);
    i1 %113 = scmp eq i32 %111, i32 %112;
    cbr i1 %113(prob = 0.5), ^while.header1, ^b3;
  ^indirect3:
    i32 %114 = phi [^b1, i32 %89] [^while.body8, i32 %101];
    i32 %115 = phi [^b1, i32 0] [^while.body8, i32 %106];
    i1 %116 = scmp gt i32 %114, i32 47;
    i1 %117 = scmp le i32 %114, i32 57;
    i1 %118 = and i1 %116, i1 %117;
    cbr i1 %118(prob = 0.97), ^while.body11, ^b4;
  ^b2:
    ret i32 %95;
  ^while.body10:
    i32 %119 = load i32* %74;
    i32* %120 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %97];
    i32 %121 = load i32* %120;
    i1 %122 = scmp gt i32 %119, i32 %121;
    cbr i1 %122(prob = 0.5), ^if.then, ^b5;
  ^b3:
    i32* %123 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %94];
    i32 %124 = load i32* %123;
    i32 %125 = load i32* %107;
    i32 %126 = call (i32) -> i32 @find(i32 %125);
    i32* %127 = getelementptr &([1005 * i32]* %50)[i64 0][i32 %126];
    i32 %128 = load i32* %109;
    store i32* %127 with i32 %128;
    i32 %129 = add i32 %95, i32 %124;
    i32 %130 = add i32 %94, i32 1;
    ubr ^while.header1;
  ^while.body11:
    i32 %131 = phi [^indirect3, i32 0] [^while.body11, i32 %139];
    i32 %132 = phi [^indirect3, i32 %114] [^while.body11, i32 %133];
    i32 %133 = call () -> i32 @getch();
    i1 %134 = scmp gt i32 %133, i32 47;
    i1 %135 = scmp le i32 %133, i32 57;
    i1 %136 = and i1 %134, i1 %135;
    i32 %137 = mul i32 %131, i32 10;
    i32 %138 = add i32 %137, i32 -48;
    i32 %139 = add i32 %138, i32 %132;
    cbr i1 %136(prob = 0.97), ^while.body11, ^b4;
  ^b4:
    i32 %140 = phi [^indirect3, i32 0] [^while.body11, i32 %139];
    i32 %141 = neg i32 %140;
    i1 %142 = scmp neq i32 %115, i32 0;
    i32 %143 = select i1 %142 ? i32 %141 : i32 %140;
    store i32* %93 with i32 %143;
    i32 %144 = call () -> i32 @getch();
    i1 %145 = scmp lt i32 %144, i32 48;
    i1 %146 = scmp gt i32 %144, i32 57;
    i1 %147 = or i1 %145, i1 %146;
    i32* %148 = getelementptr &([1005 * i32]* %49)[i64 0][i32 %51];
    cbr i1 %147(prob = 0.97), ^while.body12, ^indirect4;
  ^if.then:
    i32 %149 = load i32* %73;
    i32* %150 = getelementptr &([1005 * i32]* %47)[i64 0][i32 %97];
    i32 %151 = load i32* %150;
    store i32* %73 with i32 %151;
    store i32* %150 with i32 %149;
    i32 %152 = load i32* %72;
    i32* %153 = getelementptr &([1005 * i32]* %48)[i64 0][i32 %97];
    i32 %154 = load i32* %153;
    store i32* %72 with i32 %154;
    store i32* %153 with i32 %152;
    i32 %155 = load i32* %74;
    store i32* %74 with i32 %121;
    store i32* %120 with i32 %155;
    ubr ^b5;
  ^b5:
    i32 %156 = add i32 %97, i32 1;
    ubr ^while.header2;
  ^while.body12:
    i32 %157 = phi [^b4, i32 %144] [^while.body12, i32 %159];
    i32 %158 = phi [^b4, i32 0] [^while.body12, i32 %164];
    i32 %159 = call () -> i32 @getch();
    i1 %160 = scmp lt i32 %159, i32 48;
    i1 %161 = scmp gt i32 %159, i32 57;
    i1 %162 = or i1 %160, i1 %161;
    i1 %163 = scmp eq i32 %157, i32 45;
    i32 %164 = select i1 %163 ? i32 1 : i32 %158;
    cbr i1 %162(prob = 0.97), ^while.body12, ^indirect4;
  ^indirect4:
    i32 %165 = phi [^b4, i32 %144] [^while.body12, i32 %159];
    i32 %166 = phi [^b4, i32 0] [^while.body12, i32 %164];
    i1 %167 = scmp gt i32 %165, i32 47;
    i1 %168 = scmp le i32 %165, i32 57;
    i1 %169 = and i1 %167, i1 %168;
    cbr i1 %169(prob = 0.97), ^while.body13, ^b6;
  ^while.body13:
    i32 %170 = phi [^indirect4, i32 0] [^while.body13, i32 %178];
    i32 %171 = phi [^indirect4, i32 %165] [^while.body13, i32 %172];
    i32 %172 = call () -> i32 @getch();
    i1 %173 = scmp gt i32 %172, i32 47;
    i1 %174 = scmp le i32 %172, i32 57;
    i1 %175 = and i1 %173, i1 %174;
    i32 %176 = mul i32 %170, i32 10;
    i32 %177 = add i32 %176, i32 -48;
    i32 %178 = add i32 %177, i32 %171;
    cbr i1 %175(prob = 0.97), ^while.body13, ^b6;
  ^b6:
    i32 %179 = phi [^indirect4, i32 0] [^while.body13, i32 %178];
    i32 %180 = neg i32 %179;
    i1 %181 = scmp neq i32 %166, i32 0;
    i32 %182 = select i1 %181 ? i32 %180 : i32 %179;
    store i32* %148 with i32 %182;
    i32 %183 = add i32 %51, i32 1;
    i1 %184 = scmp lt i32 %183, i32 %45;
    cbr i1 %184(prob = 0.97), ^while.body4, ^entry2;
}
