internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @quick_read() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    i32* %f = alloc i32;
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    store i32* %x with i32 0;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
^b:
    i1 %2 = scmp gt i32 %0, i32 57;
    ubr ^b1;
^b1:
    i1 %3 = phi [^entry, i1 true] [^b, i1 %2];
    cbr i1 %3(prob = 0.97), ^while.body, ^while.guard;
^while.body:
    i32 %4 = load i32* %ch;
    i1 %5 = scmp eq i32 %4, i32 45;
    cbr i1 %5(prob = 0.5), ^if.then, ^b3;
^while.guard:
    i32 %6 = load i32* %ch;
    i1 %7 = scmp gt i32 %6, i32 47;
    cbr i1 %7(prob = 0.5), ^b2, ^b4;
^if.then:
    store i32* %f with i32 1;
    ubr ^b3;
^b2:
    i1 %8 = scmp le i32 %6, i32 57;
    ubr ^b4;
^b3:
    i32 %9 = call () -> i32 @getch();
    store i32* %ch with i32 %9;
    i1 %10 = scmp lt i32 %9, i32 48;
    cbr i1 %10(prob = 0.5), ^b6, ^b5;
^b4:
    i1 %11 = phi [^b2, i1 %8] [^while.guard, i1 false];
    cbr i1 %11(prob = 0.97), ^while.body1, ^b7;
^b5:
    i1 %12 = scmp gt i32 %9, i32 57;
    ubr ^b6;
^b6:
    i1 %13 = phi [^b5, i1 %12] [^b3, i1 true];
    cbr i1 %13(prob = 0.97), ^while.body, ^while.guard;
^while.body1:
    i32 %14 = load i32* %x;
    i32 %15 = mul i32 %14, i32 10;
    i32 %16 = load i32* %ch;
    i32 %17 = add i32 %15, i32 %16;
    i32 %18 = add i32 %17, i32 -48;
    store i32* %x with i32 %18;
    i32 %19 = call () -> i32 @getch();
    store i32* %ch with i32 %19;
    i1 %20 = scmp gt i32 %19, i32 47;
    cbr i1 %20(prob = 0.5), ^b8, ^b9;
^b7:
    i32 %21 = load i32* %f;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else;
^b8:
    i1 %23 = scmp le i32 %19, i32 57;
    ubr ^b9;
^if.then1:
    i32 %24 = load i32* %x;
    i32 %25 = neg i32 %24;
    ubr ^b10;
^if.else:
    i32 %26 = load i32* %x;
    ubr ^b10;
^b9:
    i1 %27 = phi [^b8, i1 %23] [^while.body1, i1 false];
    cbr i1 %27(prob = 0.97), ^while.body1, ^b7;
^b10:
    i32 %28 = phi [^if.else, i32 %26] [^if.then1, i32 %25];
    ret i32 %28;
}
internal i32* @n { ReadOnly };
internal i32* @m { ReadOnly };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32* %0 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %x];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %x, i32 %1;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
^b:
    i32* %3 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %x];
    i32 %4 = load i32* %3;
    i32 %5 = call (i32) -> i32 @find(i32 %4);
    i32 %6 = load i32* %x1;
    i32* %7 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %6];
    store i32* %7 with i32 %5;
    ubr ^b1;
^b1:
    i32 %8 = phi [^entry, i32 %x] [^b, i32 %5];
    ret i32 %8;
}
internal func @same(i32 %x, i32 %y) -> i32 { NoRecurse } {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %y1 with i32 %y;
    i32 %0 = call (i32) -> i32 @find(i32 %x);
    store i32* %x1 with i32 %0;
    i32 %1 = load i32* %y1;
    i32 %2 = call (i32) -> i32 @find(i32 %1);
    i32 %3 = load i32* %x1;
    i1 %4 = scmp eq i32 %3, i32 %2;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    ubr ^b1;
^b1:
    i32 %5 = phi [^entry, i32 1] [^b, i32 0];
    ret i32 %5;
}
internal func @prim() -> i32 { NoRecurse } {
^entry:
    i32* %res = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32 %0 = load i32* @m;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^b2, i32 %34] [^entry, i32 %0];
    i32 %3 = phi [^b2, i32 %36] [^entry, i32 0];
    i32 %4 = add i32 %3, i32 1;
    store i32* %j with i32 %4;
    i1 %5 = scmp lt i32 %4, i32 %2;
    cbr i1 %5(prob = 0.97), ^while.body1, ^indirect;
^b:
    i32 %6 = load i32* @n;
    i1 %7 = scmp gt i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body2, ^b1;
^indirect:
    i32 %8 = load i32* @m;
    ubr ^b2;
^while.body1:
    i32 %9 = phi [^b3, i32 %42] [^while.body, i32 %4];
    i32 %10 = load i32* %i;
    i32* %11 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i1 %15 = scmp gt i32 %12, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.then, ^indirect1;
^b1:
    store i32* %i with i32 0;
    store i32* %res with i32 0;
    ubr ^while.guard;
^while.body2:
    i32 %16 = phi [^while.body2, i32 %18] [^b, i32 1];
    i32* %17 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %16];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %16, i32 1;
    i1 %19 = scmp le i32 %18, i32 %6;
    cbr i1 %19(prob = 0.97), ^while.body2, ^b1;
^if.then:
    i32* %20 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %10];
    i32 %21 = load i32* %20;
    i32 %22 = load i32* %j;
    i32* %23 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %22];
    i32 %24 = load i32* %23;
    store i32* %20 with i32 %24;
    store i32* %23 with i32 %21;
    i32* %25 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %10];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %22];
    i32 %28 = load i32* %27;
    store i32* %25 with i32 %28;
    store i32* %27 with i32 %26;
    i32* %29 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %10];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %22];
    i32 %32 = load i32* %31;
    store i32* %29 with i32 %32;
    store i32* %31 with i32 %30;
    ubr ^b3;
^indirect1:
    i32 %33 = load i32* %j;
    ubr ^b3;
^b2:
    i32 %34 = phi [^b3, i32 %43] [^indirect, i32 %8];
    i32 %35 = load i32* %i;
    i32 %36 = add i32 %35, i32 1;
    store i32* %i with i32 %36;
    i1 %37 = scmp lt i32 %36, i32 %34;
    cbr i1 %37(prob = 0.97), ^while.body, ^b;
^while.guard:
    i32 %38 = phi [^indirect3, i32 %54] [^b1, i32 0];
    i32 %39 = load i32* @m;
    i1 %40 = scmp lt i32 %38, i32 %39;
    cbr i1 %40(prob = 0.97), ^indirect2, ^b4;
^b3:
    i32 %41 = phi [^if.then, i32 %22] [^indirect1, i32 %33];
    i32 %42 = add i32 %41, i32 1;
    store i32* %j with i32 %42;
    i32 %43 = load i32* @m;
    i1 %44 = scmp lt i32 %42, i32 %43;
    cbr i1 %44(prob = 0.97), ^while.body1, ^b2;
^indirect2:
    i32 %45 = load i32* %i;
    ubr ^while.body3;
^b4:
    i32 %46 = load i32* %res;
    ret i32 %46;
^while.body3:
    i32 %47 = phi [^b5, i32 %67] [^indirect2, i32 %45];
    i32* %48 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %47];
    i32 %51 = load i32* %50;
    i32 %52 = call (i32, i32) -> i32 @same(i32 %49, i32 %51);
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^indirect3, ^b5;
^indirect3:
    i32 %54 = load i32* %i;
    ubr ^while.guard;
^b5:
    i32 %55 = load i32* %res;
    i32 %56 = load i32* %i;
    i32* %57 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %55, i32 %58;
    store i32* %res with i32 %59;
    i32* %60 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %56];
    i32 %61 = load i32* %60;
    i32 %62 = call (i32) -> i32 @find(i32 %61);
    i32* %63 = getelementptr &([1005 * i32]* @fa)[i64 0][i32 %62];
    i32 %64 = load i32* %i;
    i32* %65 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %64];
    i32 %66 = load i32* %65;
    store i32* %63 with i32 %66;
    i32 %67 = add i32 %64, i32 1;
    store i32* %i with i32 %67;
    i32 %68 = load i32* @m;
    i1 %69 = scmp lt i32 %67, i32 %68;
    cbr i1 %69(prob = 0.97), ^while.body3, ^b4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @quick_read();
    i32 %1 = call () -> i32 @quick_read();
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^while.body, i32 %10] [^entry, i32 0];
    i32* %4 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %3];
    i32 %5 = call () -> i32 @quick_read();
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %3];
    i32 %7 = call () -> i32 @quick_read();
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %3];
    i32 %9 = call () -> i32 @quick_read();
    store i32* %8 with i32 %9;
    i32 %10 = add i32 %3, i32 1;
    i1 %11 = scmp lt i32 %10, i32 %1;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^b:
    i32 %12 = call () -> i32 @prim();
    ret i32 %12;
}
