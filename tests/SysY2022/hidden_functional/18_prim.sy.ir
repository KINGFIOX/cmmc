internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u, align 8 { Flexible };
internal [1005 * i32]* @v, align 8 { Flexible };
internal [1005 * i32]* @c, align 8 { Flexible };
internal [1005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.992248), ^while.body, ^while.body1;
  ^while.body1:
    i32 %3 = call () -> i32 @getch();
    i32 %4 = add i32 %3, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.992248), ^while.body1, ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ugt i32 %7, i32 9;
    cbr i1 %8(prob = 0.992248), ^while.body2, ^16;
  ^while.body2:
    i32 %9 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %10 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ugt i32 %12, i32 9;
    i1 %14 = icmp eq i32 %9, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %10;
    cbr i1 %13(prob = 0.992248), ^while.body2, ^16;
  ^16:
    i32 %17 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %18 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.992248), ^while.body3, ^b;
  ^while.body3:
    i32 %21 = phi [^16, i32 %17] [^while.body3, i32 %23];
    i32 %22 = phi [^16, i32 0] [^while.body3, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.992248), ^while.body3, ^b;
  ^b:
    i32 %29 = phi [^16, i32 0] [^while.body3, i32 %28];
    i1 %30 = icmp neq i32 %18, i32 0;
    i32 %31 = neg i32 %29;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %29;
    i1 %33 = icmp sgt i32 %32, i32 0;
    [1005 * i32]* %34 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %35 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %36 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    cbr i1 %33(prob = 0.992248), ^while.body4, ^entry2;
  ^entry2:
    [1005 * i32]* %37 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %38 = phi [^b, i32 0] [^b5, i32 %141];
    i32 %39 = call () -> i32 @getch();
    i32 %40 = add i32 %39, i32 -48;
    i1 %41 = icmp ugt i32 %40, i32 9;
    i32* %42 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %38];
    cbr i1 %41(prob = 0.992248), ^while.body5, ^50;
  ^while.body5:
    i32 %43 = phi [^while.body4, i32 %39] [^while.body5, i32 %45];
    i32 %44 = phi [^while.body4, i32 0] [^while.body5, i32 %49];
    i32 %45 = call () -> i32 @getch();
    i32 %46 = add i32 %45, i32 -48;
    i1 %47 = icmp ugt i32 %46, i32 9;
    i1 %48 = icmp eq i32 %43, i32 45;
    i32 %49 = select i1 %48 ? i32 1 : i32 %44;
    cbr i1 %47(prob = 0.992248), ^while.body5, ^50;
  ^50:
    i32 %51 = phi [^while.body4, i32 %39] [^while.body5, i32 %45];
    i32 %52 = phi [^while.body4, i32 0] [^while.body5, i32 %49];
    i32 %53 = add i32 %51, i32 -48;
    i1 %54 = icmp ult i32 %53, i32 10;
    cbr i1 %54(prob = 0.992248), ^while.body6, ^b1;
  ^while.header:
    i32 %55 = phi [^entry2, i32 0] [^while.body7, i32 %55] [^b3, i32 %87];
    i32 %56 = phi [^entry2, i32 0] [^while.body7, i32 %56] [^b3, i32 %88];
    i1 %57 = icmp slt i32 %56, i32 0;
    cbr i1 %57(prob = 0.992248), ^while.body7, ^b2;
  ^while.body6:
    i32 %58 = phi [^50, i32 %51] [^while.body6, i32 %60];
    i32 %59 = phi [^50, i32 0] [^while.body6, i32 %65];
    i32 %60 = call () -> i32 @getch();
    i32 %61 = add i32 %60, i32 -48;
    i1 %62 = icmp ult i32 %61, i32 10;
    i32 %63 = mul i32 %59, i32 10;
    i32 %64 = add i32 %63, i32 -48;
    i32 %65 = add i32 %58, i32 %64;
    cbr i1 %62(prob = 0.992248), ^while.body6, ^b1;
  ^while.body7:
    i32* %66 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %56];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %56];
    i32 %69 = load i32* %68;
    i32 %70 = call (i32) -> i32 @find(i32 %67);
    i32 %71 = call (i32) -> i32 @find(i32 %69);
    i1 %72 = icmp eq i32 %70, i32 %71;
    cbr i1 %72(prob = 0.5), ^while.header, ^b3;
  ^b1:
    i32 %73 = phi [^50, i32 0] [^while.body6, i32 %65];
    i1 %74 = icmp neq i32 %52, i32 0;
    i32 %75 = neg i32 %73;
    i32 %76 = select i1 %74 ? i32 %75 : i32 %73;
    store i32* %42 with i32 %76;
    i32 %77 = call () -> i32 @getch();
    i32 %78 = add i32 %77, i32 -48;
    i1 %79 = icmp ugt i32 %78, i32 9;
    i32* %80 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %38];
    cbr i1 %79(prob = 0.992248), ^while.body8, ^96;
  ^b2:
    ret i32 %55;
  ^b3:
    i32* %81 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %56];
    i32 %82 = load i32* %81;
    i32 %83 = load i32* %66;
    i32 %84 = call (i32) -> i32 @find(i32 %83);
    i32* %85 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %84];
    i32 %86 = load i32* %68;
    store i32* %85 with i32 %86;
    i32 %87 = add i32 %55, i32 %82;
    i32 %88 = add i32 %56, i32 1;
    ubr ^while.header;
  ^while.body8:
    i32 %89 = phi [^b1, i32 %77] [^while.body8, i32 %91];
    i32 %90 = phi [^b1, i32 0] [^while.body8, i32 %95];
    i32 %91 = call () -> i32 @getch();
    i32 %92 = add i32 %91, i32 -48;
    i1 %93 = icmp ugt i32 %92, i32 9;
    i1 %94 = icmp eq i32 %89, i32 45;
    i32 %95 = select i1 %94 ? i32 1 : i32 %90;
    cbr i1 %93(prob = 0.992248), ^while.body8, ^96;
  ^96:
    i32 %97 = phi [^b1, i32 %77] [^while.body8, i32 %91];
    i32 %98 = phi [^b1, i32 0] [^while.body8, i32 %95];
    i32 %99 = add i32 %97, i32 -48;
    i1 %100 = icmp ult i32 %99, i32 10;
    cbr i1 %100(prob = 0.992248), ^while.body9, ^b4;
  ^while.body9:
    i32 %101 = phi [^96, i32 %97] [^while.body9, i32 %103];
    i32 %102 = phi [^96, i32 0] [^while.body9, i32 %108];
    i32 %103 = call () -> i32 @getch();
    i32 %104 = add i32 %103, i32 -48;
    i1 %105 = icmp ult i32 %104, i32 10;
    i32 %106 = mul i32 %102, i32 10;
    i32 %107 = add i32 %106, i32 -48;
    i32 %108 = add i32 %101, i32 %107;
    cbr i1 %105(prob = 0.992248), ^while.body9, ^b4;
  ^b4:
    i32 %109 = phi [^96, i32 0] [^while.body9, i32 %108];
    i1 %110 = icmp neq i32 %98, i32 0;
    i32 %111 = neg i32 %109;
    i32 %112 = select i1 %110 ? i32 %111 : i32 %109;
    store i32* %80 with i32 %112;
    i32 %113 = call () -> i32 @getch();
    i32 %114 = add i32 %113, i32 -48;
    i1 %115 = icmp ugt i32 %114, i32 9;
    i32* %116 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %38];
    cbr i1 %115(prob = 0.992248), ^while.body10, ^124;
  ^while.body10:
    i32 %117 = phi [^b4, i32 %113] [^while.body10, i32 %119];
    i32 %118 = phi [^b4, i32 0] [^while.body10, i32 %123];
    i32 %119 = call () -> i32 @getch();
    i32 %120 = add i32 %119, i32 -48;
    i1 %121 = icmp ugt i32 %120, i32 9;
    i1 %122 = icmp eq i32 %117, i32 45;
    i32 %123 = select i1 %122 ? i32 1 : i32 %118;
    cbr i1 %121(prob = 0.992248), ^while.body10, ^124;
  ^124:
    i32 %125 = phi [^b4, i32 %113] [^while.body10, i32 %119];
    i32 %126 = phi [^b4, i32 0] [^while.body10, i32 %123];
    i32 %127 = add i32 %125, i32 -48;
    i1 %128 = icmp ult i32 %127, i32 10;
    cbr i1 %128(prob = 0.992248), ^while.body11, ^b5;
  ^while.body11:
    i32 %129 = phi [^124, i32 %125] [^while.body11, i32 %131];
    i32 %130 = phi [^124, i32 0] [^while.body11, i32 %136];
    i32 %131 = call () -> i32 @getch();
    i32 %132 = add i32 %131, i32 -48;
    i1 %133 = icmp ult i32 %132, i32 10;
    i32 %134 = mul i32 %130, i32 10;
    i32 %135 = add i32 %134, i32 -48;
    i32 %136 = add i32 %129, i32 %135;
    cbr i1 %133(prob = 0.992248), ^while.body11, ^b5;
  ^b5:
    i32 %137 = phi [^124, i32 0] [^while.body11, i32 %136];
    i1 %138 = icmp neq i32 %126, i32 0;
    i32 %139 = neg i32 %137;
    i32 %140 = select i1 %138 ? i32 %139 : i32 %137;
    store i32* %116 with i32 %140;
    i32 %141 = add i32 %38, i32 1;
    i1 %142 = icmp sgt i32 %32, i32 %141;
    cbr i1 %142(prob = 0.992248), ^while.body4, ^entry2;
}
