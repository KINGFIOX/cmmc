internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u, align 8 { Flexible };
internal [1005 * i32]* @v, align 8 { Flexible };
internal [1005 * i32]* @c, align 8 { Flexible };
internal [1005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.97), ^while.body, ^while.body1;
  ^while.body1:
    i32 %3 = call () -> i32 @getch();
    i32 %4 = add i32 %3, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ugt i32 %7, i32 9;
    cbr i1 %8(prob = 0.97), ^while.body2, ^16;
  ^while.body2:
    i32 %9 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %10 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ugt i32 %12, i32 9;
    i1 %14 = icmp eq i32 %9, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %10;
    cbr i1 %13(prob = 0.97), ^while.body2, ^16;
  ^16:
    i32 %17 = phi [^entry1, i32 %6] [^while.body2, i32 %11];
    i32 %18 = phi [^entry1, i32 0] [^while.body2, i32 %15];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %21 = phi [^16, i32 %17] [^while.body3, i32 %23];
    i32 %22 = phi [^16, i32 0] [^while.body3, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %29 = phi [^16, i32 0] [^while.body3, i32 %28];
    i1 %30 = icmp neq i32 %18, i32 0;
    i32 %31 = neg i32 %29;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %29;
    i1 %33 = icmp sgt i32 %32, i32 0;
    cbr i1 %33(prob = 0.97), ^prebody, ^entry2;
  ^prebody:
    [1005 * i32]* %34 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %35 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %36 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    ubr ^while.body4;
  ^entry2:
    [1005 * i32]* %37 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    [1005 * i32]* %38 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %39 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %40 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %41 = phi [^prebody, i32 0] [^b5, i32 %144];
    i32 %42 = call () -> i32 @getch();
    i32 %43 = add i32 %42, i32 -48;
    i1 %44 = icmp ugt i32 %43, i32 9;
    i32* %45 = getelementptr &([1005 * i32]* %34)[i64 0][i32 %41];
    cbr i1 %44(prob = 0.97), ^while.body5, ^56;
  ^while.header:
    i32 %46 = phi [^entry2, i32 0] [^while.body6, i32 %46] [^b2, i32 %74];
    i32 %47 = phi [^entry2, i32 0] [^while.body6, i32 %47] [^b2, i32 %75];
    i1 %48 = icmp slt i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body6, ^b1;
  ^while.body5:
    i32 %49 = phi [^while.body4, i32 %42] [^while.body5, i32 %51];
    i32 %50 = phi [^while.body4, i32 0] [^while.body5, i32 %55];
    i32 %51 = call () -> i32 @getch();
    i32 %52 = add i32 %51, i32 -48;
    i1 %53 = icmp ugt i32 %52, i32 9;
    i1 %54 = icmp eq i32 %49, i32 45;
    i32 %55 = select i1 %54 ? i32 1 : i32 %50;
    cbr i1 %53(prob = 0.97), ^while.body5, ^56;
  ^56:
    i32 %57 = phi [^while.body4, i32 %42] [^while.body5, i32 %51];
    i32 %58 = phi [^while.body4, i32 0] [^while.body5, i32 %55];
    i32 %59 = add i32 %57, i32 -48;
    i1 %60 = icmp ult i32 %59, i32 10;
    cbr i1 %60(prob = 0.97), ^while.body7, ^b3;
  ^while.body6:
    i32* %61 = getelementptr &([1005 * i32]* %39)[i64 0][i32 %47];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([1005 * i32]* %40)[i64 0][i32 %47];
    i32 %64 = load i32* %63;
    i32 %65 = call (i32) -> i32 @find(i32 %62);
    i32 %66 = call (i32) -> i32 @find(i32 %64);
    i1 %67 = icmp eq i32 %65, i32 %66;
    cbr i1 %67(prob = 0.5), ^while.header, ^b2;
  ^b1:
    ret i32 %46;
  ^b2:
    i32* %68 = getelementptr &([1005 * i32]* %38)[i64 0][i32 %47];
    i32 %69 = load i32* %68;
    i32 %70 = load i32* %61;
    i32 %71 = call (i32) -> i32 @find(i32 %70);
    i32* %72 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %71];
    i32 %73 = load i32* %63;
    store i32* %72 with i32 %73;
    i32 %74 = add i32 %46, i32 %69;
    i32 %75 = add i32 %47, i32 1;
    ubr ^while.header;
  ^while.body7:
    i32 %76 = phi [^56, i32 %57] [^while.body7, i32 %78];
    i32 %77 = phi [^56, i32 0] [^while.body7, i32 %83];
    i32 %78 = call () -> i32 @getch();
    i32 %79 = add i32 %78, i32 -48;
    i1 %80 = icmp ult i32 %79, i32 10;
    i32 %81 = mul i32 %77, i32 10;
    i32 %82 = add i32 %81, i32 -48;
    i32 %83 = add i32 %76, i32 %82;
    cbr i1 %80(prob = 0.97), ^while.body7, ^b3;
  ^b3:
    i32 %84 = phi [^56, i32 0] [^while.body7, i32 %83];
    i1 %85 = icmp neq i32 %58, i32 0;
    i32 %86 = neg i32 %84;
    i32 %87 = select i1 %85 ? i32 %86 : i32 %84;
    store i32* %45 with i32 %87;
    i32 %88 = call () -> i32 @getch();
    i32 %89 = add i32 %88, i32 -48;
    i1 %90 = icmp ugt i32 %89, i32 9;
    i32* %91 = getelementptr &([1005 * i32]* %35)[i64 0][i32 %41];
    cbr i1 %90(prob = 0.97), ^while.body8, ^99;
  ^while.body8:
    i32 %92 = phi [^b3, i32 %88] [^while.body8, i32 %94];
    i32 %93 = phi [^b3, i32 0] [^while.body8, i32 %98];
    i32 %94 = call () -> i32 @getch();
    i32 %95 = add i32 %94, i32 -48;
    i1 %96 = icmp ugt i32 %95, i32 9;
    i1 %97 = icmp eq i32 %92, i32 45;
    i32 %98 = select i1 %97 ? i32 1 : i32 %93;
    cbr i1 %96(prob = 0.97), ^while.body8, ^99;
  ^99:
    i32 %100 = phi [^b3, i32 %88] [^while.body8, i32 %94];
    i32 %101 = phi [^b3, i32 0] [^while.body8, i32 %98];
    i32 %102 = add i32 %100, i32 -48;
    i1 %103 = icmp ult i32 %102, i32 10;
    cbr i1 %103(prob = 0.97), ^while.body9, ^b4;
  ^while.body9:
    i32 %104 = phi [^99, i32 %100] [^while.body9, i32 %106];
    i32 %105 = phi [^99, i32 0] [^while.body9, i32 %111];
    i32 %106 = call () -> i32 @getch();
    i32 %107 = add i32 %106, i32 -48;
    i1 %108 = icmp ult i32 %107, i32 10;
    i32 %109 = mul i32 %105, i32 10;
    i32 %110 = add i32 %109, i32 -48;
    i32 %111 = add i32 %104, i32 %110;
    cbr i1 %108(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %112 = phi [^99, i32 0] [^while.body9, i32 %111];
    i1 %113 = icmp neq i32 %101, i32 0;
    i32 %114 = neg i32 %112;
    i32 %115 = select i1 %113 ? i32 %114 : i32 %112;
    store i32* %91 with i32 %115;
    i32 %116 = call () -> i32 @getch();
    i32 %117 = add i32 %116, i32 -48;
    i1 %118 = icmp ugt i32 %117, i32 9;
    i32* %119 = getelementptr &([1005 * i32]* %36)[i64 0][i32 %41];
    cbr i1 %118(prob = 0.97), ^while.body10, ^127;
  ^while.body10:
    i32 %120 = phi [^b4, i32 %116] [^while.body10, i32 %122];
    i32 %121 = phi [^b4, i32 0] [^while.body10, i32 %126];
    i32 %122 = call () -> i32 @getch();
    i32 %123 = add i32 %122, i32 -48;
    i1 %124 = icmp ugt i32 %123, i32 9;
    i1 %125 = icmp eq i32 %120, i32 45;
    i32 %126 = select i1 %125 ? i32 1 : i32 %121;
    cbr i1 %124(prob = 0.97), ^while.body10, ^127;
  ^127:
    i32 %128 = phi [^b4, i32 %116] [^while.body10, i32 %122];
    i32 %129 = phi [^b4, i32 0] [^while.body10, i32 %126];
    i32 %130 = add i32 %128, i32 -48;
    i1 %131 = icmp ult i32 %130, i32 10;
    cbr i1 %131(prob = 0.97), ^while.body11, ^b5;
  ^while.body11:
    i32 %132 = phi [^127, i32 %128] [^while.body11, i32 %134];
    i32 %133 = phi [^127, i32 0] [^while.body11, i32 %139];
    i32 %134 = call () -> i32 @getch();
    i32 %135 = add i32 %134, i32 -48;
    i1 %136 = icmp ult i32 %135, i32 10;
    i32 %137 = mul i32 %133, i32 10;
    i32 %138 = add i32 %137, i32 -48;
    i32 %139 = add i32 %132, i32 %138;
    cbr i1 %136(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %140 = phi [^127, i32 0] [^while.body11, i32 %139];
    i1 %141 = icmp neq i32 %129, i32 0;
    i32 %142 = neg i32 %140;
    i32 %143 = select i1 %141 ? i32 %142 : i32 %140;
    store i32* %119 with i32 %143;
    i32 %144 = add i32 %41, i32 1;
    i1 %145 = icmp sgt i32 %32, i32 %144;
    cbr i1 %145(prob = 0.97), ^while.body4, ^entry2;
}
