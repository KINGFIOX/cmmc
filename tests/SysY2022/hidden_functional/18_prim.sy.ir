internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
internal [1005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^b1, i32 %8];
    ret i32 %7;
  ^b1:
    i32 %8 = phi [^entry1, i32 %2] [^b2, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b2, ^entry3;
  ^b2:
    i32 %12 = phi [^entry2, i32 %5] [^b3, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^b1;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %16 = phi [^entry3, i32 %10] [^b4, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b2;
  ^b4:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %4 = add i32 %0, i32 -48;
    i1 %5 = icmp ult i32 %4, i32 10;
    cbr i1 %5(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ult i32 %7, i32 10;
    cbr i1 %8(prob = 0.97), ^while.body1, ^entry1;
  ^entry1:
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp slt i32 %9, i32 48;
    i1 %11 = icmp sgt i32 %9, i32 57;
    i1 %12 = or i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %13 = phi [^entry1, i32 %9] [^while.body2, i32 %15];
    i32 %14 = phi [^entry1, i32 0] [^while.body2, i32 %20];
    i32 %15 = call () -> i32 @getch();
    i1 %16 = icmp slt i32 %15, i32 48;
    i1 %17 = icmp sgt i32 %15, i32 57;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %13, i32 45;
    i32 %20 = select i1 %19 ? i32 1 : i32 %14;
    cbr i1 %18(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %21 = phi [^entry1, i32 %9] [^while.body2, i32 %15];
    i32 %22 = phi [^entry1, i32 0] [^while.body2, i32 %20];
    i32 %23 = add i32 %21, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    cbr i1 %24(prob = 0.97), ^while.body3, ^b;
  ^while.body3:
    i32 %25 = phi [^while.header1, i32 %21] [^while.body3, i32 %27];
    i32 %26 = phi [^while.header1, i32 0] [^while.body3, i32 %32];
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -48;
    i1 %29 = icmp ult i32 %28, i32 10;
    i32 %30 = mul i32 %26, i32 10;
    i32 %31 = add i32 %30, i32 -48;
    i32 %32 = add i32 %25, i32 %31;
    cbr i1 %29(prob = 0.97), ^while.body3, ^b;
  ^b:
    i32 %33 = phi [^while.header1, i32 0] [^while.body3, i32 %32];
    i1 %34 = icmp neq i32 %22, i32 0;
    i32 %35 = neg i32 %33;
    i32 %36 = select i1 %34 ? i32 %35 : i32 %33;
    i1 %37 = icmp sgt i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^prebody, ^entry2;
  ^prebody:
    [1005 * i32]* %38 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %39 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    [1005 * i32]* %40 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    ubr ^while.body4;
  ^entry2:
    [1005 * i32]* %41 = ptrcast [1005 * i32]* @fa to [1005 * i32]*;
    [1005 * i32]* %42 = ptrcast [1005 * i32]* @c to [1005 * i32]*;
    [1005 * i32]* %43 = ptrcast [1005 * i32]* @u to [1005 * i32]*;
    [1005 * i32]* %44 = ptrcast [1005 * i32]* @v to [1005 * i32]*;
    ubr ^while.header2;
  ^while.body4:
    i32 %45 = phi [^prebody, i32 0] [^b6, i32 %170];
    i32 %46 = call () -> i32 @getch();
    i1 %47 = icmp slt i32 %46, i32 48;
    i1 %48 = icmp sgt i32 %46, i32 57;
    i1 %49 = or i1 %47, i1 %48;
    i32* %50 = getelementptr &([1005 * i32]* %38)[i64 0][i32 %45];
    cbr i1 %49(prob = 0.97), ^while.body6, ^while.header3;
  ^while.header2:
    i32 %51 = phi [^entry2, i32 0] [^while.header5, i32 %56];
    i1 %52 = icmp slt i32 %51, i32 0;
    cbr i1 %52(prob = 0.97), ^while.body5, ^while.header4;
  ^while.body5:
    i32* %53 = getelementptr &([1005 * i32]* %42)[i64 0][i32 %51];
    i32* %54 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %51];
    i32* %55 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %51];
    i32 %56 = add i32 %51, i32 1;
    ubr ^while.header5;
  ^while.body6:
    i32 %57 = phi [^while.body4, i32 %46] [^while.body6, i32 %59];
    i32 %58 = phi [^while.body4, i32 0] [^while.body6, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i1 %60 = icmp slt i32 %59, i32 48;
    i1 %61 = icmp sgt i32 %59, i32 57;
    i1 %62 = or i1 %60, i1 %61;
    i1 %63 = icmp eq i32 %57, i32 45;
    i32 %64 = select i1 %63 ? i32 1 : i32 %58;
    cbr i1 %62(prob = 0.97), ^while.body6, ^while.header3;
  ^while.header3:
    i32 %65 = phi [^while.body4, i32 %46] [^while.body6, i32 %59];
    i32 %66 = phi [^while.body4, i32 0] [^while.body6, i32 %64];
    i32 %67 = add i32 %65, i32 -48;
    i1 %68 = icmp ult i32 %67, i32 10;
    cbr i1 %68(prob = 0.97), ^while.body7, ^b1;
  ^while.header4:
    i32 %69 = phi [^while.header2, i32 0] [^while.body8, i32 %69] [^b3, i32 %108];
    i32 %70 = phi [^while.header2, i32 0] [^while.body8, i32 %70] [^b3, i32 %109];
    i1 %71 = icmp slt i32 %70, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body8, ^b2;
  ^while.header5:
    i32 %72 = phi [^while.body5, i32 %56] [^b4, i32 %128];
    i1 %73 = icmp slt i32 %72, i32 0;
    cbr i1 %73(prob = 0.97), ^while.body9, ^while.header2;
  ^while.body7:
    i32 %74 = phi [^while.header3, i32 %65] [^while.body7, i32 %76];
    i32 %75 = phi [^while.header3, i32 0] [^while.body7, i32 %81];
    i32 %76 = call () -> i32 @getch();
    i32 %77 = add i32 %76, i32 -48;
    i1 %78 = icmp ult i32 %77, i32 10;
    i32 %79 = mul i32 %75, i32 10;
    i32 %80 = add i32 %79, i32 -48;
    i32 %81 = add i32 %74, i32 %80;
    cbr i1 %78(prob = 0.97), ^while.body7, ^b1;
  ^b1:
    i32 %82 = phi [^while.header3, i32 0] [^while.body7, i32 %81];
    i1 %83 = icmp neq i32 %66, i32 0;
    i32 %84 = neg i32 %82;
    i32 %85 = select i1 %83 ? i32 %84 : i32 %82;
    store i32* %50 with i32 %85;
    i32 %86 = call () -> i32 @getch();
    i1 %87 = icmp slt i32 %86, i32 48;
    i1 %88 = icmp sgt i32 %86, i32 57;
    i1 %89 = or i1 %87, i1 %88;
    i32* %90 = getelementptr &([1005 * i32]* %39)[i64 0][i32 %45];
    cbr i1 %89(prob = 0.97), ^while.body10, ^while.header6;
  ^while.body8:
    i32* %91 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %70];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %70];
    i32 %94 = load i32* %93;
    i32 %95 = call (i32) -> i32 @find(i32 %92);
    i32 %96 = call (i32) -> i32 @find(i32 %94);
    i1 %97 = icmp eq i32 %95, i32 %96;
    cbr i1 %97(prob = 0.5), ^while.header4, ^b3;
  ^b2:
    ret i32 %69;
  ^while.body9:
    i32* %98 = getelementptr &([1005 * i32]* %42)[i64 0][i32 %72];
    i32 %99 = load i32* %53;
    i32 %100 = load i32* %98;
    i1 %101 = icmp sgt i32 %99, i32 %100;
    cbr i1 %101(prob = 0.5), ^if.then, ^b4;
  ^b3:
    i32* %102 = getelementptr &([1005 * i32]* %42)[i64 0][i32 %70];
    i32 %103 = load i32* %102;
    i32 %104 = load i32* %91;
    i32 %105 = call (i32) -> i32 @find(i32 %104);
    i32* %106 = getelementptr &([1005 * i32]* %41)[i64 0][i32 %105];
    i32 %107 = load i32* %93;
    store i32* %106 with i32 %107;
    i32 %108 = add i32 %69, i32 %103;
    i32 %109 = add i32 %70, i32 1;
    ubr ^while.header4;
  ^while.body10:
    i32 %110 = phi [^b1, i32 %86] [^while.body10, i32 %112];
    i32 %111 = phi [^b1, i32 0] [^while.body10, i32 %117];
    i32 %112 = call () -> i32 @getch();
    i1 %113 = icmp slt i32 %112, i32 48;
    i1 %114 = icmp sgt i32 %112, i32 57;
    i1 %115 = or i1 %113, i1 %114;
    i1 %116 = icmp eq i32 %110, i32 45;
    i32 %117 = select i1 %116 ? i32 1 : i32 %111;
    cbr i1 %115(prob = 0.97), ^while.body10, ^while.header6;
  ^while.header6:
    i32 %118 = phi [^b1, i32 %86] [^while.body10, i32 %112];
    i32 %119 = phi [^b1, i32 0] [^while.body10, i32 %117];
    i32 %120 = add i32 %118, i32 -48;
    i1 %121 = icmp ult i32 %120, i32 10;
    cbr i1 %121(prob = 0.97), ^while.body11, ^b5;
  ^if.then:
    i32* %122 = getelementptr &([1005 * i32]* %43)[i64 0][i32 %72];
    i32 %123 = load i32* %55;
    i32 %124 = load i32* %122;
    store i32* %55 with i32 %124;
    store i32* %122 with i32 %123;
    i32* %125 = getelementptr &([1005 * i32]* %44)[i64 0][i32 %72];
    i32 %126 = load i32* %54;
    i32 %127 = load i32* %125;
    store i32* %54 with i32 %127;
    store i32* %125 with i32 %126;
    store i32* %53 with i32 %100;
    store i32* %98 with i32 %99;
    ubr ^b4;
  ^b4:
    i32 %128 = add i32 %72, i32 1;
    ubr ^while.header5;
  ^while.body11:
    i32 %129 = phi [^while.header6, i32 %118] [^while.body11, i32 %131];
    i32 %130 = phi [^while.header6, i32 0] [^while.body11, i32 %136];
    i32 %131 = call () -> i32 @getch();
    i32 %132 = add i32 %131, i32 -48;
    i1 %133 = icmp ult i32 %132, i32 10;
    i32 %134 = mul i32 %130, i32 10;
    i32 %135 = add i32 %134, i32 -48;
    i32 %136 = add i32 %129, i32 %135;
    cbr i1 %133(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %137 = phi [^while.header6, i32 0] [^while.body11, i32 %136];
    i1 %138 = icmp neq i32 %119, i32 0;
    i32 %139 = neg i32 %137;
    i32 %140 = select i1 %138 ? i32 %139 : i32 %137;
    store i32* %90 with i32 %140;
    i32 %141 = call () -> i32 @getch();
    i1 %142 = icmp slt i32 %141, i32 48;
    i1 %143 = icmp sgt i32 %141, i32 57;
    i1 %144 = or i1 %142, i1 %143;
    i32* %145 = getelementptr &([1005 * i32]* %40)[i64 0][i32 %45];
    cbr i1 %144(prob = 0.97), ^while.body12, ^while.header7;
  ^while.body12:
    i32 %146 = phi [^b5, i32 %141] [^while.body12, i32 %148];
    i32 %147 = phi [^b5, i32 0] [^while.body12, i32 %153];
    i32 %148 = call () -> i32 @getch();
    i1 %149 = icmp slt i32 %148, i32 48;
    i1 %150 = icmp sgt i32 %148, i32 57;
    i1 %151 = or i1 %149, i1 %150;
    i1 %152 = icmp eq i32 %146, i32 45;
    i32 %153 = select i1 %152 ? i32 1 : i32 %147;
    cbr i1 %151(prob = 0.97), ^while.body12, ^while.header7;
  ^while.header7:
    i32 %154 = phi [^b5, i32 %141] [^while.body12, i32 %148];
    i32 %155 = phi [^b5, i32 0] [^while.body12, i32 %153];
    i32 %156 = add i32 %154, i32 -48;
    i1 %157 = icmp ult i32 %156, i32 10;
    cbr i1 %157(prob = 0.97), ^while.body13, ^b6;
  ^while.body13:
    i32 %158 = phi [^while.header7, i32 %154] [^while.body13, i32 %160];
    i32 %159 = phi [^while.header7, i32 0] [^while.body13, i32 %165];
    i32 %160 = call () -> i32 @getch();
    i32 %161 = add i32 %160, i32 -48;
    i1 %162 = icmp ult i32 %161, i32 10;
    i32 %163 = mul i32 %159, i32 10;
    i32 %164 = add i32 %163, i32 -48;
    i32 %165 = add i32 %158, i32 %164;
    cbr i1 %162(prob = 0.97), ^while.body13, ^b6;
  ^b6:
    i32 %166 = phi [^while.header7, i32 0] [^while.body13, i32 %165];
    i1 %167 = icmp neq i32 %155, i32 0;
    i32 %168 = neg i32 %166;
    i32 %169 = select i1 %167 ? i32 %168 : i32 %166;
    store i32* %145 with i32 %169;
    i32 %170 = add i32 %45, i32 1;
    i1 %171 = icmp sgt i32 %36, i32 %170;
    cbr i1 %171(prob = 0.97), ^while.body4, ^entry2;
}
