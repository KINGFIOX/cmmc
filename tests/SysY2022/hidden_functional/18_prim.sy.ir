internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @u;
internal [1005 * i32]* @v;
internal [1005 * i32]* @c;
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
^b:
    i1 %3 = scmp gt i32 %1, i32 57;
    ubr ^b1;
^b1:
    i1 %4 = phi [^while.header, i1 true] [^b, i1 %3];
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %5 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %6 = phi [^b1, i32 %1] [^while.body1, i32 %10];
    i1 %7 = scmp gt i32 %6, i32 47;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %8 = scmp le i32 %6, i32 57;
    ubr ^b3;
^b3:
    i1 %9 = phi [^while.header1, i1 false] [^b2, i1 %8];
    cbr i1 %9(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %12 = phi [^b4, i32 0] [^while.body2, i32 %18];
    i32 %13 = phi [^b4, i32 %11] [^while.body2, i32 %19];
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %15 = scmp gt i32 %13, i32 57;
    ubr ^b6;
^b6:
    i1 %16 = phi [^while.header2, i1 true] [^b5, i1 %15];
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %17 = scmp eq i32 %13, i32 45;
    i32 %18 = select i1 %17 ? i32 1 : i32 %12;
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %20 = phi [^b6, i32 0] [^while.body3, i32 %27];
    i32 %21 = phi [^b6, i32 %13] [^while.body3, i32 %28];
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b7, ^b8;
^b7:
    i1 %23 = scmp le i32 %21, i32 57;
    ubr ^b8;
^b8:
    i1 %24 = phi [^while.header3, i1 false] [^b7, i1 %23];
    cbr i1 %24(prob = 0.97), ^while.body3, ^b9;
^while.body3:
    i32 %25 = mul i32 %20, i32 10;
    i32 %26 = add i32 %21, i32 -48;
    i32 %27 = add i32 %26, i32 %25;
    i32 %28 = call () -> i32 @getch();
    ubr ^while.header3;
^b9:
    i1 %29 = scmp neq i32 %12, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b10;
^if.then:
    i32 %30 = neg i32 %20;
    ubr ^b10;
^b10:
    i32 %31 = phi [^b9, i32 %20] [^if.then, i32 %30];
    i1 %32 = scmp gt i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body4, ^while.header4;
^while.body4:
    i32 %33 = phi [^b10, i32 0] [^b28, i32 %100];
    i32* %34 = getelementptr &([1005 * i32]* @u)[i64 0][i32 %33];
    i32 %35 = call () -> i32 @getch();
    ubr ^while.header5;
^while.header4:
    ret i32 0;
^while.header5:
    i32 %36 = phi [^while.body4, i32 0] [^while.body5, i32 %42];
    i32 %37 = phi [^while.body4, i32 %35] [^while.body5, i32 %43];
    i1 %38 = scmp lt i32 %37, i32 48;
    cbr i1 %38(prob = 0.5), ^b12, ^b11;
^b11:
    i1 %39 = scmp gt i32 %37, i32 57;
    ubr ^b12;
^b12:
    i1 %40 = phi [^while.header5, i1 true] [^b11, i1 %39];
    cbr i1 %40(prob = 0.97), ^while.body5, ^while.header6;
^while.body5:
    i1 %41 = scmp eq i32 %37, i32 45;
    i32 %42 = select i1 %41 ? i32 1 : i32 %36;
    i32 %43 = call () -> i32 @getch();
    ubr ^while.header5;
^while.header6:
    i32 %44 = phi [^b12, i32 0] [^while.body6, i32 %51];
    i32 %45 = phi [^b12, i32 %37] [^while.body6, i32 %52];
    i1 %46 = scmp gt i32 %45, i32 47;
    cbr i1 %46(prob = 0.5), ^b13, ^b14;
^b13:
    i1 %47 = scmp le i32 %45, i32 57;
    ubr ^b14;
^b14:
    i1 %48 = phi [^while.header6, i1 false] [^b13, i1 %47];
    cbr i1 %48(prob = 0.97), ^while.body6, ^b15;
^while.body6:
    i32 %49 = mul i32 %44, i32 10;
    i32 %50 = add i32 %45, i32 -48;
    i32 %51 = add i32 %50, i32 %49;
    i32 %52 = call () -> i32 @getch();
    ubr ^while.header6;
^b15:
    i1 %53 = scmp neq i32 %36, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then1, ^b16;
^if.then1:
    i32 %54 = neg i32 %44;
    ubr ^b16;
^b16:
    i32 %55 = phi [^b15, i32 %44] [^if.then1, i32 %54];
    store i32* %34 with i32 %55;
    i32* %56 = getelementptr &([1005 * i32]* @v)[i64 0][i32 %33];
    i32 %57 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header7:
    i32 %58 = phi [^b16, i32 0] [^while.body7, i32 %64];
    i32 %59 = phi [^b16, i32 %57] [^while.body7, i32 %65];
    i1 %60 = scmp lt i32 %59, i32 48;
    cbr i1 %60(prob = 0.5), ^b18, ^b17;
^b17:
    i1 %61 = scmp gt i32 %59, i32 57;
    ubr ^b18;
^b18:
    i1 %62 = phi [^while.header7, i1 true] [^b17, i1 %61];
    cbr i1 %62(prob = 0.97), ^while.body7, ^while.header8;
^while.body7:
    i1 %63 = scmp eq i32 %59, i32 45;
    i32 %64 = select i1 %63 ? i32 1 : i32 %58;
    i32 %65 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header8:
    i32 %66 = phi [^b18, i32 0] [^while.body8, i32 %73];
    i32 %67 = phi [^b18, i32 %59] [^while.body8, i32 %74];
    i1 %68 = scmp gt i32 %67, i32 47;
    cbr i1 %68(prob = 0.5), ^b19, ^b20;
^b19:
    i1 %69 = scmp le i32 %67, i32 57;
    ubr ^b20;
^b20:
    i1 %70 = phi [^while.header8, i1 false] [^b19, i1 %69];
    cbr i1 %70(prob = 0.97), ^while.body8, ^b21;
^while.body8:
    i32 %71 = mul i32 %66, i32 10;
    i32 %72 = add i32 %67, i32 -48;
    i32 %73 = add i32 %72, i32 %71;
    i32 %74 = call () -> i32 @getch();
    ubr ^while.header8;
^b21:
    i1 %75 = scmp neq i32 %58, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then2, ^b22;
^if.then2:
    i32 %76 = neg i32 %66;
    ubr ^b22;
^b22:
    i32 %77 = phi [^b21, i32 %66] [^if.then2, i32 %76];
    store i32* %56 with i32 %77;
    i32* %78 = getelementptr &([1005 * i32]* @c)[i64 0][i32 %33];
    i32 %79 = call () -> i32 @getch();
    ubr ^while.header9;
^while.header9:
    i32 %80 = phi [^b22, i32 0] [^while.body9, i32 %86];
    i32 %81 = phi [^b22, i32 %79] [^while.body9, i32 %87];
    i1 %82 = scmp lt i32 %81, i32 48;
    cbr i1 %82(prob = 0.5), ^b24, ^b23;
^b23:
    i1 %83 = scmp gt i32 %81, i32 57;
    ubr ^b24;
^b24:
    i1 %84 = phi [^while.header9, i1 true] [^b23, i1 %83];
    cbr i1 %84(prob = 0.97), ^while.body9, ^while.header10;
^while.body9:
    i1 %85 = scmp eq i32 %81, i32 45;
    i32 %86 = select i1 %85 ? i32 1 : i32 %80;
    i32 %87 = call () -> i32 @getch();
    ubr ^while.header9;
^while.header10:
    i32 %88 = phi [^b24, i32 0] [^while.body10, i32 %95];
    i32 %89 = phi [^b24, i32 %81] [^while.body10, i32 %96];
    i1 %90 = scmp gt i32 %89, i32 47;
    cbr i1 %90(prob = 0.5), ^b25, ^b26;
^b25:
    i1 %91 = scmp le i32 %89, i32 57;
    ubr ^b26;
^b26:
    i1 %92 = phi [^while.header10, i1 false] [^b25, i1 %91];
    cbr i1 %92(prob = 0.97), ^while.body10, ^b27;
^while.body10:
    i32 %93 = mul i32 %88, i32 10;
    i32 %94 = add i32 %89, i32 -48;
    i32 %95 = add i32 %94, i32 %93;
    i32 %96 = call () -> i32 @getch();
    ubr ^while.header10;
^b27:
    i1 %97 = scmp neq i32 %80, i32 0;
    cbr i1 %97(prob = 0.5), ^if.then3, ^b28;
^if.then3:
    i32 %98 = neg i32 %88;
    ubr ^b28;
^b28:
    i32 %99 = phi [^b27, i32 %88] [^if.then3, i32 %98];
    store i32* %78 with i32 %99;
    i32 %100 = add i32 %33, i32 1;
    i1 %101 = scmp lt i32 %100, i32 %31;
    cbr i1 %101(prob = 0.97), ^while.body4, ^while.header4;
}
