internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @value;
internal [10000 * i32]* @left_child;
internal [10000 * i32]* @right_child;
internal func @find_minimum(i32, i32*) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^dummy_entry(i32 %arg, i32* %arg1):
    ubr [ ^entry i32 %arg ];
^entry(i32 %arg):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0, [ ^if.then ], [ ^indirect i32 %arg, i32 %arg ];
^indirect(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^if.then1 i32 %arg1 ], [ ^b i32 %arg1 ];
^if.then():
    ret i32 -1;
^if.then1(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    ubr [ ^entry i32 %1 ];
^b(i32 %arg):
    ret i32 %arg;
}
internal func @insert(i32, i32, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0, [ ^entry1 i32 %arg1, i32* %arg2 ], [ ^indirect i32 %arg, i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp gt i32 %arg1, i32 %1;
    cbr i1 %2, [ ^if.then i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^if.else i32* %arg2, i32 %arg3, i32 %arg4 ];
^entry1(i32 %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    i32* %1 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %0];
    store i32* %1 with i32 %arg;
    i32* %2 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %0];
    store i32* %3 with i32 -1;
    i32 %4 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %4;
    ret i32 %0;
^if.then(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @insert(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
^if.else(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @insert(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
}
internal func @delete(i32, i32, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0, [ ^if.then ], [ ^indirect i32 %arg, i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp gt i32 %arg1, i32 %1;
    cbr i1 %2, [ ^if.then1 i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^if.else i32* %arg2, i32 %arg3, i32 %arg4 ];
^if.then():
    ret i32 -1;
^if.else(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %arg2, i32 %1;
    cbr i1 %2, [ ^indirect2 i32 %arg2, i32 %arg1, i32* %arg, i32 %arg1 ], [ ^indirect1 i32 %arg1, i32* %arg, i32 %arg1 ];
^if.then1(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
^indirect1(i32 %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^b i32* %arg1, i32 %arg2 ], [ ^if.else1 i32* %arg1, i32 %arg2 ];
^indirect2(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %arg, i32* %arg2);
    store i32* %0 with i32 %2;
    ret i32 %arg3;
^b(i32* %arg, i32 %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^if.then ], [ ^if.else1 i32* %arg, i32 %arg1 ];
^if.else1(i32* %arg, i32 %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^if.then2 i32 %arg1 ], [ ^indirect3 i32 %arg1, i32* %arg, i32 %arg1 ];
^if.then2(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^indirect4 i32 %arg ], [ ^indirect5 i32 %arg ];
^indirect3(i32 %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^if.then2 i32 %arg2 ], [ ^if.else2 i32* %arg1, i32 %arg2 ];
^indirect4(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    ret i32 %1;
^indirect5(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    ret i32 %1;
^if.else2(i32* %arg, i32 %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32*) -> i32 @find_minimum(i32 %1, i32* %arg);
    i32* %3 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %arg1];
    i32* %4 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %2];
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    i32 %6 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %5, i32* %arg);
    store i32* %0 with i32 %6;
    ret i32 %arg1;
}
internal func @inorder(i32, i32*) -> void { NoMemoryWrite } {
^entry(i32 %arg, i32* %arg1):
    i32* %root = alloc i32;
    i1 %0 = scmp neq i32 %arg, i32 -1;
    cbr i1 %0, [ ^indirect i32* %root, i32 %arg, i32* %arg1 ], [ ^b i32* %root ];
^indirect(i32* %arg, i32 %arg1, i32* %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32, i32*) -> void @inorder(i32 %1, i32* %arg2);
    i32* %2 = getelementptr &([10000 * i32]* @value)[i32 0][i32 %arg1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 32);
    i32* %4 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 %arg1];
    i32 %5 = load i32* %4;
    call (i32, i32*) -> void @inorder(i32 %5, i32* %arg2);
    free i32* %arg;
    ret;
^b(i32* %arg):
    free i32* %arg;
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %now = alloc i32;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 0;
    i1 %2 = xor i1 %1, i1 true;
    cbr i1 %2, [ ^if.then ], [ ^indirect i32* %now, i32 %0 ];
^indirect(i32* %arg, i32 %arg1):
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([10000 * i32]* @value)[i32 0][i32 0];
    store i32* %1 with i32 %0;
    i32* %2 = getelementptr &([10000 * i32]* @left_child)[i32 0][i32 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([10000 * i32]* @right_child)[i32 0][i32 0];
    store i32* %3 with i32 -1;
    store i32* %arg with i32 1;
    i1 %4 = scmp lt i32 1, i32 %arg1;
    cbr i1 %4, [ ^while.body i32* %arg, i32 %arg1, i32 1 ], [ ^b i32* %arg ];
^if.then():
    ret i32 0;
^while.body(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %0, i32* %arg);
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body i32* %arg, i32 %arg1, i32 %2 ], [ ^b i32* %arg ];
^b(i32* %arg):
    call (i32, i32*) -> void @inorder(i32 0, i32* %arg);
    call (i32) -> void @putch(i32 10);
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body1 i32* %arg, i32 %0, i32 0, i32 0 ], [ ^b1 i32* %arg, i32 0 ];
^while.body1(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @delete(i32 %arg2, i32 %0, i32* %arg);
    i32 %2 = add i32 %arg3, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body1 i32* %arg, i32 %arg1, i32 %1, i32 %2 ], [ ^b1 i32* %arg, i32 %1 ];
^b1(i32* %arg, i32 %arg1):
    call (i32, i32*) -> void @inorder(i32 %arg1, i32* %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
