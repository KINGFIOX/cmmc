internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @value;
internal [10000 * i32]* @left_child;
internal [10000 * i32]* @right_child;
internal func @find_minimum(i32, i32*) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^dummy_entry(i32 %arg, i32* %arg1):
    ubr [ ^entry i32 %arg ];
^entry(i32 %arg):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^indirect i32 %arg, i32 %arg ];
^indirect(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^entry i32 %1 ], [ ^b i32 %arg1 ];
^if.then():
    ret i32 -1;
^b(i32 %arg):
    ret i32 %arg;
}
internal func @insert(i32, i32, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0(prob = 0.5), [ ^entry1 i32 %arg1, i32* %arg2 ], [ ^indirect i32 %arg, i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp gt i32 %arg1, i32 %1;
    cbr i1 %2(prob = 0.5), [ ^if.then i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^if.else i32* %arg2, i32 %arg3, i32 %arg4 ];
^entry1(i32 %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    i32* %1 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %0];
    store i32* %1 with i32 %arg;
    i32* %2 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %0];
    store i32* %3 with i32 -1;
    i32 %4 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %4;
    ret i32 %0;
^if.then(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @insert(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
^if.else(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @insert(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
}
internal func @delete(i32, i32, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg, i32 -1;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^indirect i32 %arg, i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp gt i32 %arg1, i32 %1;
    cbr i1 %2(prob = 0.5), [ ^if.then1 i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^indirect1 i32* %arg2, i32 %arg3, i32 %arg4, i32* %0, i32 %1 ];
^if.then():
    ret i32 -1;
^indirect1(i32* %arg, i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4):
    i1 %0 = scmp lt i32 %arg2, i32 %arg4;
    cbr i1 %0(prob = 0.5), [ ^indirect3 i32 %arg2, i32 %arg1, i32* %arg, i32 %arg1 ], [ ^indirect2 i32 %arg1, i32* %arg, i32 %arg1, i32* %arg3 ];
^if.then1(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %arg2, i32* %arg);
    store i32* %0 with i32 %2;
    ret i32 %arg1;
^indirect2(i32 %arg, i32* %arg1, i32 %arg2, i32* %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^b i32* %arg1, i32 %arg2, i32* %arg3 ], [ ^if.else i32* %arg1, i32 %arg2, i32* %arg3 ];
^indirect3(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %arg, i32* %arg2);
    store i32* %0 with i32 %2;
    ret i32 %arg3;
^b(i32* %arg, i32 %arg1, i32* %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^if.then ], [ ^if.else i32* %arg, i32 %arg1, i32* %arg2 ];
^if.else(i32* %arg, i32 %arg1, i32* %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^if.then2 i32 %arg1 ], [ ^indirect4 i32 %arg1, i32* %arg, i32 %arg1, i32* %arg2 ];
^if.then2(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^indirect5 i32 %arg ], [ ^indirect6 i32 %1 ];
^indirect4(i32 %arg, i32* %arg1, i32 %arg2, i32* %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^if.then2 i32 %arg2 ], [ ^if.else1 i32* %arg1, i32 %arg2, i32* %arg3 ];
^indirect5(i32 %arg):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    ret i32 %1;
^indirect6(i32 %arg):
    ret i32 %arg;
^if.else1(i32* %arg, i32 %arg1, i32* %arg2):
    i32* %0 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32*) -> i32 @find_minimum(i32 %1, i32* %arg);
    i32* %3 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %2];
    i32 %4 = load i32* %3;
    store i32* %arg2 with i32 %4;
    i32 %5 = load i32* %3;
    i32 %6 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %5, i32* %arg);
    store i32* %0 with i32 %6;
    ret i32 %arg1;
}
internal func @inorder(i32, i32*) -> void { NoMemoryWrite } {
^dummy_entry(i32 %arg, i32* %arg1):
    ubr [ ^entry i32 %arg, i32* %arg1 ];
^entry(i32 %arg, i32* %arg1):
    i1 %0 = scmp neq i32 %arg, i32 -1;
    cbr i1 %0(prob = 0.5), [ ^indirect i32 %arg, i32* %arg1 ], [ ^b ];
^indirect(i32 %arg, i32* %arg1):
    i32* %0 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    call (i32, i32*) -> void @inorder(i32 %1, i32* %arg1);
    i32* %2 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %arg];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 32);
    i32* %4 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %arg];
    i32 %5 = load i32* %4;
    ubr [ ^entry i32 %5, i32* %arg1 ];
^b():
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %now = alloc i32;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 0;
    i1 %2 = xor i1 %1, i1 true;
    cbr i1 %2(prob = 0.5), [ ^if.then ], [ ^indirect i32* %now, i32 %0 ];
^indirect(i32* %arg, i32 %arg1):
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([10000 * i32]* @value)[i64 0][i64 0];
    store i32* %1 with i32 %0;
    i32* %2 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 0];
    store i32* %3 with i32 -1;
    store i32* %arg with i32 1;
    i1 %4 = scmp gt i32 %arg1, i32 1;
    cbr i1 %4(prob = 0.97), [ ^super.header i32* %arg, i32 %arg1, i32 1 ], [ ^b i32* %arg ];
^if.then():
    ret i32 0;
^super.header(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.67), [ ^while.body i32* %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32* %arg, i32 %arg1, i32 %arg2 ];
^b(i32* %arg):
    call (i32, i32*) -> void @inorder(i32 0, i32* %arg);
    call (i32) -> void @putch(i32 10);
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^super.header1 i32* %arg, i32 %0, i32 0, i32 0 ], [ ^b1 i32* %arg, i32 0 ];
^while.body(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %0, i32* %arg);
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %2, i32* %arg);
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %4, i32* %arg);
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %6, i32* %arg);
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %8, i32* %arg);
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %10, i32* %arg);
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %12, i32* %arg);
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %14, i32* %arg);
    i32 %16 = call () -> i32 @getint();
    i32 %17 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %16, i32* %arg);
    i32 %18 = call () -> i32 @getint();
    i32 %19 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %18, i32* %arg);
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %20, i32* %arg);
    i32 %22 = call () -> i32 @getint();
    i32 %23 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %22, i32* %arg);
    i32 %24 = call () -> i32 @getint();
    i32 %25 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %24, i32* %arg);
    i32 %26 = call () -> i32 @getint();
    i32 %27 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %26, i32* %arg);
    i32 %28 = call () -> i32 @getint();
    i32 %29 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %28, i32* %arg);
    i32 %30 = call () -> i32 @getint();
    i32 %31 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %30, i32* %arg);
    i32 %32 = add i32 %arg2, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg1;
    cbr i1 %33(prob = 0.97), [ ^super.header i32* %arg, i32 %arg1, i32 %32 ], [ ^b i32* %arg ];
^while.body1(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %0, i32* %arg);
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3(prob = 0.97), [ ^while.body1 i32* %arg, i32 %arg1, i32 %2 ], [ ^b i32* %arg ];
^super.header1(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.67), [ ^while.body2 i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^while.body3 i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b1(i32* %arg, i32 %arg1):
    call (i32, i32*) -> void @inorder(i32 %arg1, i32* %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body2(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @delete(i32 %arg2, i32 %0, i32* %arg);
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call (i32, i32, i32*) -> i32 @delete(i32 %1, i32 %2, i32* %arg);
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call (i32, i32, i32*) -> i32 @delete(i32 %3, i32 %4, i32* %arg);
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call (i32, i32, i32*) -> i32 @delete(i32 %5, i32 %6, i32* %arg);
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call (i32, i32, i32*) -> i32 @delete(i32 %7, i32 %8, i32* %arg);
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call (i32, i32, i32*) -> i32 @delete(i32 %9, i32 %10, i32* %arg);
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call (i32, i32, i32*) -> i32 @delete(i32 %11, i32 %12, i32* %arg);
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call (i32, i32, i32*) -> i32 @delete(i32 %13, i32 %14, i32* %arg);
    i32 %16 = call () -> i32 @getint();
    i32 %17 = call (i32, i32, i32*) -> i32 @delete(i32 %15, i32 %16, i32* %arg);
    i32 %18 = call () -> i32 @getint();
    i32 %19 = call (i32, i32, i32*) -> i32 @delete(i32 %17, i32 %18, i32* %arg);
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call (i32, i32, i32*) -> i32 @delete(i32 %19, i32 %20, i32* %arg);
    i32 %22 = call () -> i32 @getint();
    i32 %23 = call (i32, i32, i32*) -> i32 @delete(i32 %21, i32 %22, i32* %arg);
    i32 %24 = call () -> i32 @getint();
    i32 %25 = call (i32, i32, i32*) -> i32 @delete(i32 %23, i32 %24, i32* %arg);
    i32 %26 = call () -> i32 @getint();
    i32 %27 = call (i32, i32, i32*) -> i32 @delete(i32 %25, i32 %26, i32* %arg);
    i32 %28 = call () -> i32 @getint();
    i32 %29 = call (i32, i32, i32*) -> i32 @delete(i32 %27, i32 %28, i32* %arg);
    i32 %30 = call () -> i32 @getint();
    i32 %31 = call (i32, i32, i32*) -> i32 @delete(i32 %29, i32 %30, i32* %arg);
    i32 %32 = add i32 %arg3, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg1;
    cbr i1 %33(prob = 0.97), [ ^super.header1 i32* %arg, i32 %arg1, i32 %31, i32 %32 ], [ ^b1 i32* %arg, i32 %31 ];
^while.body3(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call (i32, i32, i32*) -> i32 @delete(i32 %arg2, i32 %0, i32* %arg);
    i32 %2 = add i32 %arg3, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3(prob = 0.97), [ ^while.body3 i32* %arg, i32 %arg1, i32 %1, i32 %2 ], [ ^b1 i32* %arg, i32 %1 ];
}
