internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @space { ReadOnly } = 32;
internal i32* @LF { ReadOnly } = 10;
internal i32* @maxNode { ReadOnly } = 10000;
internal [10000 * i32]* @value;
internal [10000 * i32]* @left_child;
internal [10000 * i32]* @right_child;
internal i32* @now;
internal func @search(i32 %root, i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %root1;
    i1 %1 = scmp eq i32 %0, i32 -1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = load i32* %root1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %5];
    i32 %7 = load i32* %6;
    i32 %8 = load i32* %x1;
    i1 %9 = scmp eq i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    ubr ^b1;
^b1:
    i1 %12 = phi [^b, i1 %11] [^entry, i1 true];
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %15 = load i32* %x1;
    i32 %16 = load i32* %root1;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp gt i32 %15, i32 %19;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    i32 %23 = load i32* %root1;
    ret i32 %23;
^if.then1:
    i32 %24 = load i32* %root1;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %25];
    i32 %27 = load i32* %26;
    i32 %28 = load i32* %x1;
    i32 %29 = call (i32, i32) -> i32 @search(i32 %27, i32 %28);
    ret i32 %29;
^if.else1:
    i32 %30 = load i32* %root1;
    i64 %31 = sext i32 %30 to i64;
    i32* %32 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %31];
    i32 %33 = load i32* %32;
    i32 %34 = load i32* %x1;
    i32 %35 = call (i32, i32) -> i32 @search(i32 %33, i32 %34);
    ret i32 %35;
^b2:
    unreachable;
^b3:
    ubr ^b2;
}
internal func @find_minimum(i32 %root) -> i32 {
^entry:
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    i32 %0 = load i32* %root1;
    i1 %1 = scmp eq i32 %0, i32 -1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %root1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %5];
    i32 %7 = load i32* %6;
    i1 %8 = scmp neq i32 %7, i32 -1;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b;
^if.then:
    ret i32 -1;
^b:
    ubr ^b1;
^if.then1:
    i32 %11 = load i32* %root1;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %12];
    i32 %14 = load i32* %13;
    i32 %15 = call (i32) -> i32 @find_minimum(i32 %14);
    ret i32 %15;
^b1:
    i32 %16 = load i32* %root1;
    ret i32 %16;
}
internal func @new_node(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* @now;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %1];
    i32 %3 = load i32* %x1;
    store i32* %2 with i32 %3;
    i32 %4 = load i32* @now;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %5];
    store i32* %6 with i32 -1;
    i32 %7 = load i32* @now;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %8];
    store i32* %9 with i32 -1;
    i32 %10 = load i32* @now;
    i32 %11 = add i32 %10, i32 1;
    store i32* @now with i32 %11;
    i32 %12 = load i32* @now;
    i32 %13 = sub i32 %12, i32 1;
    ret i32 %13;
}
internal func @insert(i32 %root, i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %root1;
    i1 %1 = scmp eq i32 %0, i32 -1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %x1;
    i32 %5 = load i32* %root1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp gt i32 %4, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    i32 %12 = load i32* %x1;
    i32 %13 = call (i32) -> i32 @new_node(i32 %12);
    ret i32 %13;
^if.then1:
    i32 %14 = load i32* %root1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %15];
    i32 %17 = load i32* %root1;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %18];
    i32 %20 = load i32* %19;
    i32 %21 = load i32* %x1;
    i32 %22 = call (i32, i32) -> i32 @insert(i32 %20, i32 %21);
    store i32* %16 with i32 %22;
    ubr ^b;
^if.else1:
    i32 %23 = load i32* %root1;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %24];
    i32 %26 = load i32* %root1;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %27];
    i32 %29 = load i32* %28;
    i32 %30 = load i32* %x1;
    i32 %31 = call (i32, i32) -> i32 @insert(i32 %29, i32 %30);
    store i32* %25 with i32 %31;
    ubr ^b;
^b:
    ubr ^b1;
^b1:
    i32 %32 = load i32* %root1;
    ret i32 %32;
}
internal func @delete(i32 %root, i32 %x) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %x1 = alloc i32;
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %root1;
    i1 %1 = scmp eq i32 %0, i32 -1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    i32 %4 = load i32* %x1;
    i32 %5 = load i32* %root1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp gt i32 %4, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 -1;
^if.then1:
    i32 %12 = load i32* %root1;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %13];
    i32 %15 = load i32* %root1;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %16];
    i32 %18 = load i32* %17;
    i32 %19 = load i32* %x1;
    i32 %20 = call (i32, i32) -> i32 @delete(i32 %18, i32 %19);
    store i32* %14 with i32 %20;
    ubr ^b1;
^if.else:
    i32 %21 = load i32* %x1;
    i32 %22 = load i32* %root1;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp lt i32 %21, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else1;
^if.then2:
    i32 %29 = load i32* %root1;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %30];
    i32 %32 = load i32* %root1;
    i64 %33 = sext i32 %32 to i64;
    i32* %34 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %33];
    i32 %35 = load i32* %34;
    i32 %36 = load i32* %x1;
    i32 %37 = call (i32, i32) -> i32 @delete(i32 %35, i32 %36);
    store i32* %31 with i32 %37;
    ubr ^b2;
^if.else1:
    i32 %38 = load i32* %root1;
    i64 %39 = sext i32 %38 to i64;
    i32* %40 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %39];
    i32 %41 = load i32* %40;
    i1 %42 = scmp eq i32 %41, i32 -1;
    i32 %43 = zext i1 %42 to i32;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^b3, ^b4;
^b1:
    i32 %45 = load i32* %root1;
    ret i32 %45;
^b2:
    ubr ^b1;
^b3:
    i32 %46 = load i32* %root1;
    i64 %47 = sext i32 %46 to i64;
    i32* %48 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %47];
    i32 %49 = load i32* %48;
    i1 %50 = scmp eq i32 %49, i32 -1;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    ubr ^b4;
^b4:
    i1 %53 = phi [^b3, i1 %52] [^if.else1, i1 false];
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^if.then3, ^if.else2;
^if.else2:
    i32 %56 = load i32* %root1;
    i64 %57 = sext i32 %56 to i64;
    i32* %58 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %57];
    i32 %59 = load i32* %58;
    i1 %60 = scmp eq i32 %59, i32 -1;
    i32 %61 = zext i1 %60 to i32;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.5), ^b6, ^b5;
^if.then3:
    ret i32 -1;
^b5:
    i32 %63 = load i32* %root1;
    i64 %64 = sext i32 %63 to i64;
    i32* %65 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %64];
    i32 %66 = load i32* %65;
    i1 %67 = scmp eq i32 %66, i32 -1;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = scmp neq i32 %68, i32 0;
    ubr ^b6;
^b6:
    i1 %70 = phi [^b5, i1 %69] [^if.else2, i1 true];
    i32 %71 = zext i1 %70 to i32;
    i1 %72 = scmp neq i32 %71, i32 0;
    cbr i1 %72(prob = 0.5), ^if.then4, ^if.else3;
^if.else3:
    i32 %73 = load i32* %root1;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %74];
    i32 %76 = load i32* %75;
    i32 %77 = call (i32) -> i32 @find_minimum(i32 %76);
    store i32* %tmp with i32 %77;
    i32 %78 = load i32* %root1;
    i64 %79 = sext i32 %78 to i64;
    i32* %80 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %79];
    i32 %81 = load i32* %tmp;
    i64 %82 = sext i32 %81 to i64;
    i32* %83 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %82];
    i32 %84 = load i32* %83;
    store i32* %80 with i32 %84;
    i32 %85 = load i32* %root1;
    i64 %86 = sext i32 %85 to i64;
    i32* %87 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %86];
    i32 %88 = load i32* %root1;
    i64 %89 = sext i32 %88 to i64;
    i32* %90 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %89];
    i32 %91 = load i32* %90;
    i32 %92 = load i32* %tmp;
    i64 %93 = sext i32 %92 to i64;
    i32* %94 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %93];
    i32 %95 = load i32* %94;
    i32 %96 = call (i32, i32) -> i32 @delete(i32 %91, i32 %95);
    store i32* %87 with i32 %96;
    ubr ^b7;
^if.then4:
    i32 %97 = load i32* %root1;
    i64 %98 = sext i32 %97 to i64;
    i32* %99 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %98];
    i32 %100 = load i32* %99;
    i1 %101 = scmp eq i32 %100, i32 -1;
    i32 %102 = zext i1 %101 to i32;
    i1 %103 = scmp neq i32 %102, i32 0;
    cbr i1 %103(prob = 0.5), ^if.then5, ^if.else4;
^b7:
    ubr ^b8;
^if.then5:
    i32 %104 = load i32* %root1;
    i64 %105 = sext i32 %104 to i64;
    i32* %106 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %105];
    i32 %107 = load i32* %106;
    ret i32 %107;
^if.else4:
    i32 %108 = load i32* %root1;
    i64 %109 = sext i32 %108 to i64;
    i32* %110 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %109];
    i32 %111 = load i32* %110;
    ret i32 %111;
^b8:
    ubr ^b2;
^b9:
    ubr ^b7;
}
internal func @inorder(i32 %root) -> void {
^entry:
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    i32 %0 = load i32* %root1;
    i1 %1 = scmp neq i32 %0, i32 -1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %4 = load i32* %root1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 %5];
    i32 %7 = load i32* %6;
    call (i32) -> void @inorder(i32 %7);
    i32 %8 = load i32* %root1;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = getelementptr &([10000 * i32]* @value)[i64 0][i64 %9];
    i32 %11 = load i32* %10;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 32);
    i32 %12 = load i32* %root1;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    call (i32) -> void @inorder(i32 %15);
    ubr ^b;
^b:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %root = alloc i32;
    i32* %n = alloc i32;
    store i32* @now with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32 %1 = load i32* %n;
    i1 %2 = scmp neq i32 %1, i32 0;
    i1 %3 = xor i1 %2, i1 true;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
^b:
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call (i32) -> i32 @new_node(i32 %6);
    store i32* %root with i32 %7;
    store i32* %i with i32 1;
    ubr ^while.header;
^if.then:
    ret i32 0;
^while.header:
    i32 %8 = load i32* %i;
    i32 %9 = load i32* %n;
    i1 %10 = scmp lt i32 %8, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %13 = load i32* %root;
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call (i32, i32) -> i32 @insert(i32 %13, i32 %14);
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    store i32* %i with i32 %17;
    ubr ^while.header;
^b1:
    i32 %18 = load i32* %root;
    call (i32) -> void @inorder(i32 %18);
    call (i32) -> void @putch(i32 10);
    i32 %19 = call () -> i32 @getint();
    store i32* %n with i32 %19;
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %20 = load i32* %i;
    i32 %21 = load i32* %n;
    i1 %22 = scmp lt i32 %20, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %25 = load i32* %root;
    i32 %26 = call () -> i32 @getint();
    i32 %27 = call (i32, i32) -> i32 @delete(i32 %25, i32 %26);
    store i32* %root with i32 %27;
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %i with i32 %29;
    ubr ^while.header1;
^b2:
    i32 %30 = load i32* %root;
    call (i32) -> void @inorder(i32 %30);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
