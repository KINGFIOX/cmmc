internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @value;
internal [10000 * i32]* @left_child;
internal [10000 * i32]* @right_child;
internal func @insert(i32 %root, i32 %x, i32* %0) -> i32 {
  ^entry:
    i1 %1 = icmp eq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^entry1, ^if.else;
  ^entry1:
    i32 %2 = load i32* %0;
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %2];
    store i32* %4 with i32 %x;
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %6 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %2];
    store i32* %6 with i32 -1;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %8 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %2];
    store i32* %8 with i32 -1;
    i32 %9 = add i32 %2, i32 1;
    store i32* %0 with i32 %9;
    ubr ^b;
  ^if.else:
    [10000 * i32]* %10 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %11 = getelementptr &([10000 * i32]* %10)[i64 0][i32 %root];
    i32 %12 = load i32* %11;
    i1 %13 = icmp sgt i32 %x, i32 %12;
    [10000 * i32]* %14 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    [10000 * i32]* %15 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    [10000 * i32]* %16 = select i1 %13 ? [10000 * i32]* %14 : [10000 * i32]* %15;
    i32* %17 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %root];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 -1;
    cbr i1 %19(prob = 0.5), ^entry2, ^if.else1;
  ^entry2:
    i32 %20 = load i32* %0;
    [10000 * i32]* %21 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %22 = getelementptr &([10000 * i32]* %21)[i64 0][i32 %20];
    store i32* %22 with i32 %x;
    [10000 * i32]* %23 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %24 = getelementptr &([10000 * i32]* %23)[i64 0][i32 %20];
    store i32* %24 with i32 -1;
    [10000 * i32]* %25 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %26 = getelementptr &([10000 * i32]* %25)[i64 0][i32 %20];
    store i32* %26 with i32 -1;
    i32 %27 = add i32 %20, i32 1;
    store i32* %0 with i32 %27;
    store i32* %17 with i32 %20;
    ubr ^b;
  ^if.else1:
    [10000 * i32]* %28 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %29 = getelementptr &([10000 * i32]* %28)[i64 0][i32 %18];
    i32 %30 = load i32* %29;
    i1 %31 = icmp sgt i32 %x, i32 %30;
    [10000 * i32]* %32 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    [10000 * i32]* %33 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    [10000 * i32]* %34 = select i1 %31 ? [10000 * i32]* %32 : [10000 * i32]* %33;
    i32* %35 = getelementptr &([10000 * i32]* %34)[i64 0][i32 %18];
    i32 %36 = load i32* %35;
    i32 %37 = call (i32, i32, i32*) -> i32 @insert(i32 %36, i32 %x, i32* %0);
    store i32* %35 with i32 %37;
    store i32* %17 with i32 %18;
    ubr ^b;
  ^b:
    i32 %38 = phi [^entry1, i32 %2] [^entry2, i32 %root] [^if.else1, i32 %root];
    ret i32 %38;
}
internal func @delete(i32 %root, i32 %x) -> i32 {
  ^entry:
    i1 %0 = icmp eq i32 %root, i32 -1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %2 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %root];
    i32 %3 = load i32* %2;
    i1 %4 = icmp sgt i32 %x, i32 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^b1:
    i32 %5 = phi [^entry, i32 -1] [^if.then, i32 %root] [^if.then1, i32 %root] [^b2, i32 -1] [^if.then2, i32 %29] [^if.then3, i32 %37] [^b4, i32 %root];
    ret i32 %5;
  ^if.then:
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %root];
    i32 %8 = load i32* %7;
    i32 %9 = call (i32, i32) -> i32 @delete(i32 %8, i32 %x);
    store i32* %7 with i32 %9;
    ubr ^b1;
  ^if.else:
    i1 %10 = icmp slt i32 %x, i32 %3;
    cbr i1 %10(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    [10000 * i32]* %11 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %12 = getelementptr &([10000 * i32]* %11)[i64 0][i32 %root];
    i32 %13 = load i32* %12;
    i32 %14 = call (i32, i32) -> i32 @delete(i32 %13, i32 %x);
    store i32* %12 with i32 %14;
    ubr ^b1;
  ^if.else1:
    [10000 * i32]* %15 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %16 = getelementptr &([10000 * i32]* %15)[i64 0][i32 %root];
    i32 %17 = load i32* %16;
    i1 %18 = icmp eq i32 %17, i32 -1;
    cbr i1 %18(prob = 0.5), ^b2, ^if.else2;
  ^b2:
    [10000 * i32]* %19 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %20 = getelementptr &([10000 * i32]* %19)[i64 0][i32 %root];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.5), ^b1, ^if.else2;
  ^if.else2:
    [10000 * i32]* %23 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %24 = getelementptr &([10000 * i32]* %23)[i64 0][i32 %root];
    i32 %25 = load i32* %24;
    i1 %26 = icmp eq i32 %25, i32 -1;
    cbr i1 %26(prob = 0.5), ^if.then2, ^b3;
  ^if.then2:
    [10000 * i32]* %27 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %28 = getelementptr &([10000 * i32]* %27)[i64 0][i32 %root];
    i32 %29 = load i32* %28;
    i1 %30 = icmp eq i32 %29, i32 -1;
    cbr i1 %30(prob = 0.5), ^if.then3, ^b1;
  ^b3:
    [10000 * i32]* %31 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %32 = getelementptr &([10000 * i32]* %31)[i64 0][i32 %root];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 -1;
    cbr i1 %34(prob = 0.5), ^if.then2, ^if.else3;
  ^if.then3:
    [10000 * i32]* %35 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %36 = getelementptr &([10000 * i32]* %35)[i64 0][i32 %root];
    i32 %37 = load i32* %36;
    ubr ^b1;
  ^if.else3:
    [10000 * i32]* %38 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %39 = getelementptr &([10000 * i32]* %38)[i64 0][i32 %root];
    i32 %40 = load i32* %39;
    ubr ^entry1;
  ^entry1:
    i32 %41 = phi [^if.else3, i32 %40] [^if.else4, i32 %49];
    i1 %42 = icmp eq i32 %41, i32 -1;
    cbr i1 %42(prob = 0.5), ^b4, ^if.else4;
  ^b4:
    i32 %43 = phi [^entry1, i32 -1] [^if.else4, i32 %41];
    i32* %44 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %43];
    i32 %45 = load i32* %44;
    store i32* %2 with i32 %45;
    i32 %46 = call (i32, i32) -> i32 @delete(i32 %40, i32 %45);
    store i32* %39 with i32 %46;
    ubr ^b1;
  ^if.else4:
    [10000 * i32]* %47 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %48 = getelementptr &([10000 * i32]* %47)[i64 0][i32 %41];
    i32 %49 = load i32* %48;
    i1 %50 = icmp neq i32 %49, i32 -1;
    cbr i1 %50(prob = 0.5), ^entry1, ^b4;
}
internal func @inorder(i32 %root) -> void { NoMemoryWrite } {
  ^0:
    i1 %1 = icmp neq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %2 = phi [^0, i32 %root] [^if.then, i32 %11];
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    call (i32) -> void @inorder(i32 %5);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %2];
    i32 %8 = load i32* %7;
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putch(i32 32);
    [10000 * i32]* %9 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %10 = getelementptr &([10000 * i32]* %9)[i64 0][i32 %2];
    i32 %11 = load i32* %10;
    i1 %12 = icmp neq i32 %11, i32 -1;
    cbr i1 %12(prob = 0.5), ^if.then, ^b;
  ^b:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %now = alloc i32;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %2 = call () -> i32 @getint();
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i64 0];
    store i32* %4 with i32 %2;
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %6 = getelementptr &([10000 * i32]* %5)[i64 0][i64 0];
    store i32* %6 with i32 -1;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %8 = getelementptr &([10000 * i32]* %7)[i64 0][i64 0];
    store i32* %8 with i32 -1;
    store i32* %now with i32 1;
    i1 %9 = icmp sgt i32 %0, i32 1;
    cbr i1 %9(prob = 0.97), ^while.body, ^b2;
  ^b1:
    ret i32 0;
  ^while.body:
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %10, i32* %now);
    i1 %12 = icmp sgt i32 %0, i32 2;
    cbr i1 %12(prob = 0.97), ^indirect, ^b2;
  ^b2:
    call (i32) -> void @inorder(i32 0);
    call (i32) -> void @putch(i32 10);
    i32 %13 = call () -> i32 @getint();
    i1 %14 = icmp sgt i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b3;
  ^indirect:
    i32 %15 = phi [^while.body, i32 2] [^indirect, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32 %17 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %16, i32* %now);
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    cbr i1 %19(prob = 0.97), ^indirect, ^b2;
  ^b3:
    i32 %20 = phi [^b2, i32 0] [^while.body1, i32 %24];
    call (i32) -> void @inorder(i32 %20);
    call (i32) -> void @putch(i32 10);
    ubr ^b1;
  ^while.body1:
    i32 %21 = phi [^b2, i32 0] [^while.body1, i32 %25];
    i32 %22 = phi [^b2, i32 0] [^while.body1, i32 %24];
    i32 %23 = call () -> i32 @getint();
    i32 %24 = call (i32, i32) -> i32 @delete(i32 %22, i32 %23);
    i32 %25 = add i32 %21, i32 1;
    i1 %26 = icmp sgt i32 %13, i32 %25;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b3;
}
