internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @value;
internal [10000 * i32]* @left_child;
internal [10000 * i32]* @right_child;
internal func @find_minimum(i32 %root, i32* %0) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^dummy_entry:
    ubr ^entry;
^entry:
    i32 %1 = phi [^if.else, i32 %4] [^dummy_entry, i32 %root];
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32* %3 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %1];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 -1;
    cbr i1 %5(prob = 0.5), ^entry, ^b;
^if.then:
    ret i32 -1;
^b:
    ret i32 %1;
}
internal func @insert(i32 %root, i32 %x, i32* %0) -> i32 {
^entry:
    i1 %1 = scmp eq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^entry1, ^if.else;
^if.else:
    i32* %2 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %root];
    i32 %3 = load i32* %2;
    i1 %4 = scmp gt i32 %x, i32 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else1;
^entry1:
    i32 %5 = load i32* %0;
    i32* %6 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %5];
    store i32* %6 with i32 %x;
    i32* %7 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %5];
    store i32* %7 with i32 -1;
    i32* %8 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %5];
    store i32* %8 with i32 -1;
    i32 %9 = add i32 %5, i32 1;
    store i32* %0 with i32 %9;
    ret i32 %5;
^if.then:
    i32* %10 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %11 = load i32* %10;
    i32 %12 = call (i32, i32, i32*) -> i32 @insert(i32 %11, i32 %x, i32* %0);
    store i32* %10 with i32 %12;
    ubr ^b;
^if.else1:
    i32* %13 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %root];
    i32 %14 = load i32* %13;
    i32 %15 = call (i32, i32, i32*) -> i32 @insert(i32 %14, i32 %x, i32* %0);
    store i32* %13 with i32 %15;
    ubr ^b;
^b:
    ret i32 %root;
}
internal func @delete(i32 %root, i32 %x, i32* %0) -> i32 {
^entry:
    i1 %1 = scmp eq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^b:
    i32* %2 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %root];
    i32 %3 = load i32* %2;
    i1 %4 = scmp gt i32 %x, i32 %3;
    cbr i1 %4(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 -1;
^if.then1:
    i32* %5 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %6 = load i32* %5;
    i32 %7 = call (i32, i32, i32*) -> i32 @delete(i32 %6, i32 %x, i32* %0);
    store i32* %5 with i32 %7;
    ubr ^b1;
^if.else:
    i1 %8 = scmp lt i32 %x, i32 %3;
    cbr i1 %8(prob = 0.5), ^if.then2, ^if.else1;
^if.then2:
    i32* %9 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %root];
    i32 %10 = load i32* %9;
    i32 %11 = call (i32, i32, i32*) -> i32 @delete(i32 %10, i32 %x, i32* %0);
    store i32* %9 with i32 %11;
    ubr ^b1;
^if.else1:
    i32* %12 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %root];
    i32 %13 = load i32* %12;
    i1 %14 = scmp eq i32 %13, i32 -1;
    cbr i1 %14(prob = 0.5), ^b2, ^b3;
^b1:
    ret i32 %root;
^b2:
    i32* %15 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %16 = load i32* %15;
    i1 %17 = scmp eq i32 %16, i32 -1;
    ubr ^b3;
^b3:
    i1 %18 = phi [^b2, i1 %17] [^if.else1, i1 false];
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else2;
^if.else2:
    i32* %19 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %root];
    i32 %20 = load i32* %19;
    i1 %21 = scmp eq i32 %20, i32 -1;
    cbr i1 %21(prob = 0.5), ^b5, ^b4;
^b4:
    i32* %22 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %23 = load i32* %22;
    i1 %24 = scmp eq i32 %23, i32 -1;
    ubr ^b5;
^b5:
    i1 %25 = phi [^b4, i1 %24] [^if.else2, i1 true];
    cbr i1 %25(prob = 0.5), ^if.then3, ^if.else3;
^if.else3:
    i32* %26 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %27 = load i32* %26;
    i32 %28 = call (i32, i32*) -> i32 @find_minimum(i32 %27, i32* %0);
    i32* %29 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %28];
    i32 %30 = load i32* %29;
    store i32* %2 with i32 %30;
    i32 %31 = load i32* %29;
    i32 %32 = call (i32, i32, i32*) -> i32 @delete(i32 %27, i32 %31, i32* %0);
    store i32* %26 with i32 %32;
    ubr ^b1;
^if.then3:
    i32 %33 = load i32* %19;
    i1 %34 = scmp eq i32 %33, i32 -1;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %35 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %36 = load i32* %35;
    ret i32 %36;
^if.else4:
    ret i32 %33;
}
internal func @inorder(i32 %root, i32* %0) -> void { NoMemoryWrite } {
^entry:
    i1 %1 = scmp neq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    i32* %2 = getelementptr &([10000 * i32]* @left_child)[i64 0][i32 %root];
    i32 %3 = load i32* %2;
    call (i32, i32*) -> void @inorder(i32 %3, i32* %0);
    i32* %4 = getelementptr &([10000 * i32]* @value)[i64 0][i32 %root];
    i32 %5 = load i32* %4;
    call (i32) -> void @putint(i32 %5);
    call (i32) -> void @putch(i32 32);
    i32* %6 = getelementptr &([10000 * i32]* @right_child)[i64 0][i32 %root];
    i32 %7 = load i32* %6;
    call (i32, i32*) -> void @inorder(i32 %7, i32* %0);
    ubr ^b;
^b:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %now = alloc i32;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^b:
    i32 %2 = call () -> i32 @getint();
    i32* %3 = getelementptr &([10000 * i32]* @value)[i64 0][i64 0];
    store i32* %3 with i32 %2;
    i32* %4 = getelementptr &([10000 * i32]* @left_child)[i64 0][i64 0];
    store i32* %4 with i32 -1;
    i32* %5 = getelementptr &([10000 * i32]* @right_child)[i64 0][i64 0];
    store i32* %5 with i32 -1;
    store i32* %now with i32 1;
    ubr ^while.header;
^if.then:
    ret i32 0;
^while.header:
    i32 %6 = phi [^while.body, i32 %6] [^b, i32 %0];
    i32 %7 = phi [^while.body, i32 %7] [^b, i32 0];
    i32 %8 = phi [^while.body, i32 %13] [^b, i32 1];
    i32 %9 = phi [^b, i32 1] [^while.body, i32 %13];
    i1 %10 = scmp lt i32 %9, i32 %6;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call (i32, i32, i32*) -> i32 @insert(i32 %7, i32 %11, i32* %now);
    i32 %13 = add i32 %8, i32 1;
    ubr ^while.header;
^b1:
    call (i32, i32*) -> void @inorder(i32 %7, i32* %now);
    call (i32) -> void @putch(i32 10);
    i32 %14 = call () -> i32 @getint();
    ubr ^while.header1;
^while.header1:
    i32 %15 = phi [^while.body1, i32 %15] [^b1, i32 %14];
    i32 %16 = phi [^while.body1, i32 %22] [^b1, i32 %7];
    i32 %17 = phi [^while.body1, i32 %23] [^b1, i32 0];
    i32 %18 = phi [^while.body1, i32 %15] [^b1, i32 %14];
    i32 %19 = phi [^while.body1, i32 %23] [^b1, i32 0];
    i1 %20 = scmp lt i32 %19, i32 %18;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %21 = call () -> i32 @getint();
    i32 %22 = call (i32, i32, i32*) -> i32 @delete(i32 %16, i32 %21, i32* %now);
    i32 %23 = add i32 %17, i32 1;
    ubr ^while.header1;
^b2:
    call (i32, i32*) -> void @inorder(i32 %16, i32* %now);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
