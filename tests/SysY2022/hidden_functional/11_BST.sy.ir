internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @value, align 8 { Flexible };
internal [10000 * i32]* @left_child, align 8 { Flexible };
internal [10000 * i32]* @right_child, align 8 { Flexible };
internal func @insert(i32 %root, i32 %x, i32* %0) -> i32 {
  ^entry:
    i1 %1 = icmp eq i32 %root, i32 -1;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = load i32* %0;
    i32* %6 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %5];
    store i32* %6 with i32 %x;
    i32* %7 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %5];
    store i32* %7 with i32 -1;
    i32* %8 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %5];
    store i32* %8 with i32 -1;
    i32 %9 = add i32 %5, i32 1;
    store i32* %0 with i32 %9;
    ubr ^b;
  ^if.else:
    i32* %10 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %root];
    i32 %11 = load i32* %10;
    i1 %12 = icmp sgt i32 %x, i32 %11;
    [10000 * i32]* %13 = select i1 %12 ? [10000 * i32]* %4 : [10000 * i32]* %3;
    i32* %14 = getelementptr &([10000 * i32]* %13)[i64 0][i32 %root];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 -1;
    cbr i1 %16(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %17];
    store i32* %18 with i32 %x;
    i32* %19 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %17];
    store i32* %19 with i32 -1;
    i32* %20 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %17];
    store i32* %20 with i32 -1;
    i32 %21 = add i32 %17, i32 1;
    store i32* %0 with i32 %21;
    store i32* %14 with i32 %17;
    ubr ^b;
  ^if.else1:
    i32* %22 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %15];
    i32 %23 = load i32* %22;
    i1 %24 = icmp sgt i32 %x, i32 %23;
    [10000 * i32]* %25 = select i1 %24 ? [10000 * i32]* %4 : [10000 * i32]* %3;
    i32* %26 = getelementptr &([10000 * i32]* %25)[i64 0][i32 %15];
    i32 %27 = load i32* %26;
    i32 %28 = call (i32, i32, i32*) -> i32 @insert(i32 %27, i32 %x, i32* %0);
    store i32* %26 with i32 %28;
    store i32* %14 with i32 %15;
    ubr ^b;
  ^b:
    i32 %29 = phi [^if.then, i32 %5] [^if.then1, i32 %root] [^if.else1, i32 %root];
    ret i32 %29;
}
internal func @delete(i32 %root, i32 %x) -> i32 {
  ^entry:
    i1 %0 = icmp eq i32 %root, i32 -1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %2 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %root];
    i32 %3 = load i32* %2;
    i1 %4 = icmp sgt i32 %x, i32 %3;
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %6 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %root];
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^b1:
    i32 %7 = phi [^entry, i32 -1] [^if.then1, i32 %root] [^if.then3, i32 %root] [^b3, i32 %25] [^b5, i32 %19] [^if.then5, i32 %root] [^if.then8, i32 %root] [^b11, i32 %root];
    ret i32 %7;
  ^if.then:
    i32 %8 = load i32* %6;
    i1 %9 = icmp eq i32 %8, i32 -1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
  ^if.else:
    [10000 * i32]* %10 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %11 = getelementptr &([10000 * i32]* %10)[i64 0][i32 %root];
    i1 %12 = icmp slt i32 %x, i32 %3;
    cbr i1 %12(prob = 0.5), ^if.then2, ^if.else1;
  ^if.then1:
    store i32* %6 with i32 -1;
    ubr ^b1;
  ^if.then2:
    i32 %13 = load i32* %11;
    i1 %14 = icmp eq i32 %13, i32 -1;
    cbr i1 %14(prob = 0.5), ^if.then3, ^b4;
  ^b2:
    i32* %15 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %8];
    i32 %16 = load i32* %15;
    i1 %17 = icmp sgt i32 %x, i32 %16;
    i32* %18 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %8];
    cbr i1 %17(prob = 0.5), ^if.then4, ^if.else2;
  ^if.else1:
    i32 %19 = load i32* %11;
    i1 %20 = icmp eq i32 %19, i32 -1;
    cbr i1 %20(prob = 0.5), ^b3, ^b5;
  ^if.then3:
    store i32* %11 with i32 -1;
    ubr ^b1;
  ^if.then4:
    i32 %21 = load i32* %18;
    i32 %22 = call (i32, i32) -> i32 @delete(i32 %21, i32 %x);
    store i32* %18 with i32 %22;
    ubr ^if.then5;
  ^b3:
    i32 %23 = load i32* %6;
    i1 %24 = icmp eq i32 %23, i32 -1;
    i32 %25 = select i1 %24 ? i32 -1 : i32 %23;
    ubr ^b1;
  ^if.else2:
    [10000 * i32]* %26 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %27 = getelementptr &([10000 * i32]* %26)[i64 0][i32 %8];
    i1 %28 = icmp slt i32 %x, i32 %16;
    cbr i1 %28(prob = 0.5), ^if.then6, ^if.else3;
  ^b4:
    i32* %29 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %13];
    i32 %30 = load i32* %29;
    i1 %31 = icmp sgt i32 %x, i32 %30;
    i32* %32 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %13];
    cbr i1 %31(prob = 0.5), ^if.then7, ^if.else4;
  ^b5:
    i32 %33 = load i32* %6;
    i1 %34 = icmp eq i32 %33, i32 -1;
    cbr i1 %34(prob = 0.5), ^b1, ^entry1;
  ^if.then5:
    i32 %35 = phi [^if.then4, i32 %8] [^if.then6, i32 %8] [^b6, i32 %52] [^b7, i32 %40] [^b12, i32 %8];
    store i32* %6 with i32 %35;
    ubr ^b1;
  ^if.then6:
    i32 %36 = load i32* %27;
    i32 %37 = call (i32, i32) -> i32 @delete(i32 %36, i32 %x);
    store i32* %27 with i32 %37;
    ubr ^if.then5;
  ^if.then7:
    i32 %38 = load i32* %32;
    i32 %39 = call (i32, i32) -> i32 @delete(i32 %38, i32 %x);
    store i32* %32 with i32 %39;
    ubr ^if.then8;
  ^if.else3:
    i32 %40 = load i32* %27;
    i1 %41 = icmp eq i32 %40, i32 -1;
    cbr i1 %41(prob = 0.5), ^b6, ^b7;
  ^if.else4:
    [10000 * i32]* %42 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %43 = getelementptr &([10000 * i32]* %42)[i64 0][i32 %13];
    i1 %44 = icmp slt i32 %x, i32 %30;
    cbr i1 %44(prob = 0.5), ^if.then9, ^if.else5;
  ^entry1:
    i32 %45 = phi [^b5, i32 %33] [^entry1, i32 %47];
    i32* %46 = getelementptr &([10000 * i32]* %10)[i64 0][i32 %45];
    i32 %47 = load i32* %46;
    i1 %48 = icmp neq i32 %47, i32 -1;
    cbr i1 %48(prob = 0.5), ^entry1, ^b8;
  ^if.then8:
    i32 %49 = phi [^if.then7, i32 %13] [^if.then9, i32 %13] [^b9, i32 %67] [^b10, i32 %57] [^b13, i32 %13];
    store i32* %11 with i32 %49;
    ubr ^b1;
  ^b6:
    i32 %50 = load i32* %18;
    i1 %51 = icmp eq i32 %50, i32 -1;
    i32 %52 = select i1 %51 ? i32 -1 : i32 %50;
    ubr ^if.then5;
  ^if.then9:
    i32 %53 = load i32* %43;
    i32 %54 = call (i32, i32) -> i32 @delete(i32 %53, i32 %x);
    store i32* %43 with i32 %54;
    ubr ^if.then8;
  ^b7:
    i32 %55 = load i32* %18;
    i1 %56 = icmp eq i32 %55, i32 -1;
    cbr i1 %56(prob = 0.5), ^if.then5, ^entry2;
  ^if.else5:
    i32 %57 = load i32* %43;
    i1 %58 = icmp eq i32 %57, i32 -1;
    cbr i1 %58(prob = 0.5), ^b9, ^b10;
  ^b8:
    i32* %59 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %45];
    i32 %60 = load i32* %59;
    store i32* %2 with i32 %60;
    i32* %61 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %33];
    i32 %62 = load i32* %61;
    i1 %63 = icmp sgt i32 %60, i32 %62;
    i32* %64 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %33];
    cbr i1 %63(prob = 0.5), ^if.then10, ^if.else6;
  ^b9:
    i32 %65 = load i32* %32;
    i1 %66 = icmp eq i32 %65, i32 -1;
    i32 %67 = select i1 %66 ? i32 -1 : i32 %65;
    ubr ^if.then8;
  ^if.then10:
    i32 %68 = load i32* %64;
    i32 %69 = call (i32, i32) -> i32 @delete(i32 %68, i32 %60);
    store i32* %64 with i32 %69;
    ubr ^b11;
  ^entry2:
    i32 %70 = phi [^b7, i32 %55] [^entry2, i32 %72];
    i32* %71 = getelementptr &([10000 * i32]* %26)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    i1 %73 = icmp neq i32 %72, i32 -1;
    cbr i1 %73(prob = 0.5), ^entry2, ^b12;
  ^b10:
    i32 %74 = load i32* %32;
    i1 %75 = icmp eq i32 %74, i32 -1;
    cbr i1 %75(prob = 0.5), ^if.then8, ^entry3;
  ^if.else6:
    i1 %76 = icmp slt i32 %60, i32 %62;
    [10000 * i32]* %77 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %78 = getelementptr &([10000 * i32]* %77)[i64 0][i32 %33];
    cbr i1 %76(prob = 0.5), ^if.then11, ^if.else7;
  ^b11:
    i32 %79 = phi [^if.then10, i32 %33] [^if.then11, i32 %33] [^b14, i32 %96] [^b15, i32 %89] [^b16, i32 %33];
    store i32* %6 with i32 %79;
    ubr ^b1;
  ^b12:
    i32* %80 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %70];
    i32 %81 = load i32* %80;
    store i32* %15 with i32 %81;
    i32 %82 = call (i32, i32) -> i32 @delete(i32 %55, i32 %81);
    store i32* %18 with i32 %82;
    ubr ^if.then5;
  ^if.then11:
    i32 %83 = load i32* %78;
    i32 %84 = call (i32, i32) -> i32 @delete(i32 %83, i32 %60);
    store i32* %78 with i32 %84;
    ubr ^b11;
  ^entry3:
    i32 %85 = phi [^b10, i32 %74] [^entry3, i32 %87];
    i32* %86 = getelementptr &([10000 * i32]* %42)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i1 %88 = icmp neq i32 %87, i32 -1;
    cbr i1 %88(prob = 0.5), ^entry3, ^b13;
  ^if.else7:
    i32 %89 = load i32* %78;
    i1 %90 = icmp eq i32 %89, i32 -1;
    cbr i1 %90(prob = 0.5), ^b14, ^b15;
  ^b13:
    i32* %91 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %85];
    i32 %92 = load i32* %91;
    store i32* %29 with i32 %92;
    i32 %93 = call (i32, i32) -> i32 @delete(i32 %74, i32 %92);
    store i32* %32 with i32 %93;
    ubr ^if.then8;
  ^b14:
    i32 %94 = load i32* %64;
    i1 %95 = icmp eq i32 %94, i32 -1;
    i32 %96 = select i1 %95 ? i32 -1 : i32 %94;
    ubr ^b11;
  ^b15:
    i32 %97 = load i32* %64;
    i1 %98 = icmp eq i32 %97, i32 -1;
    cbr i1 %98(prob = 0.5), ^b11, ^entry4;
  ^entry4:
    i32 %99 = phi [^b15, i32 %97] [^entry4, i32 %101];
    i32* %100 = getelementptr &([10000 * i32]* %77)[i64 0][i32 %99];
    i32 %101 = load i32* %100;
    i1 %102 = icmp neq i32 %101, i32 -1;
    cbr i1 %102(prob = 0.5), ^entry4, ^b16;
  ^b16:
    i32* %103 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %99];
    i32 %104 = load i32* %103;
    store i32* %61 with i32 %104;
    i32 %105 = call (i32, i32) -> i32 @delete(i32 %97, i32 %104);
    store i32* %64 with i32 %105;
    ubr ^b11;
}
internal func @inorder(i32 %root) -> void { NoMemoryWrite } {
  ^0:
    i1 %1 = icmp neq i32 %root, i32 -1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %2 = phi [^0, i32 %root] [^if.then, i32 %11];
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    call (i32) -> void @inorder(i32 %5);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %2];
    i32 %8 = load i32* %7;
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putch(i32 32);
    [10000 * i32]* %9 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %10 = getelementptr &([10000 * i32]* %9)[i64 0][i32 %2];
    i32 %11 = load i32* %10;
    i1 %12 = icmp neq i32 %11, i32 -1;
    cbr i1 %12(prob = 0.5), ^if.then, ^b;
  ^b:
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %now = alloc i32, align 4;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %2 = call () -> i32 @getint();
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @value to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i64 0];
    store i32* %4 with i32 %2;
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @left_child to [10000 * i32]*;
    i32* %6 = getelementptr &([10000 * i32]* %5)[i64 0][i64 0];
    store i32* %6 with i32 -1;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @right_child to [10000 * i32]*;
    i32* %8 = getelementptr &([10000 * i32]* %7)[i64 0][i64 0];
    store i32* %8 with i32 -1;
    store i32* %now with i32 1;
    i1 %9 = icmp sgt i32 %0, i32 1;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b2;
  ^b1:
    ret i32 0;
  ^while.body:
    i32 %10 = phi [^b, i32 1] [^while.body, i32 %13];
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call (i32, i32, i32*) -> i32 @insert(i32 0, i32 %11, i32* %now);
    i32 %13 = add i32 %10, i32 1;
    i1 %14 = icmp sgt i32 %0, i32 %13;
    cbr i1 %14(prob = 0.984615), ^while.body, ^b2;
  ^b2:
    call (i32) -> void @inorder(i32 0);
    call (i32) -> void @putch(i32 10);
    i32 %15 = call () -> i32 @getint();
    i1 %16 = icmp sgt i32 %15, i32 0;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b3;
  ^b3:
    i32 %17 = phi [^b2, i32 0] [^while.body1, i32 %21];
    call (i32) -> void @inorder(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^b1;
  ^while.body1:
    i32 %18 = phi [^b2, i32 0] [^while.body1, i32 %22];
    i32 %19 = phi [^b2, i32 0] [^while.body1, i32 %21];
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call (i32, i32) -> i32 @delete(i32 %19, i32 %20);
    i32 %22 = add i32 %18, i32 1;
    i1 %23 = icmp sgt i32 %15, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b3;
}
