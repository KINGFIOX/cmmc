internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b4, f32 %20];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = fabs f32 %12;
    i1 %14 = fcmp ole f32 %13, f32 1e-06;
    cbr i1 %14(prob = 0.5), ^b4, ^b5;
  ^b4:
    f32 %15 = phi [^b3, f32 %12] [^b6, f32 %29];
    f32 %16 = fmul f32 %15, f32 4;
    f32 %17 = fmul f32 %16, f32 %15;
    f32 %18 = fmul f32 %17, f32 %15;
    f32 %19 = fmul f32 %15, f32 3;
    f32 %20 = fsub f32 %19, f32 %18;
    ubr ^b2;
  ^b5:
    f32 %21 = fdiv f32 %12, f32 3;
    f32 %22 = fabs f32 %21;
    i1 %23 = fcmp ole f32 %22, f32 1e-06;
    cbr i1 %23(prob = 0.5), ^b6, ^b7;
  ^b6:
    f32 %24 = phi [^b5, f32 %21] [^b7, f32 %36];
    f32 %25 = fmul f32 %24, f32 4;
    f32 %26 = fmul f32 %25, f32 %24;
    f32 %27 = fmul f32 %26, f32 %24;
    f32 %28 = fmul f32 %24, f32 3;
    f32 %29 = fsub f32 %28, f32 %27;
    ubr ^b4;
  ^b7:
    f32 %30 = fdiv f32 %21, f32 3;
    f32 %31 = call (f32) -> f32 @my_sin_impl(f32 %30);
    f32 %32 = fmul f32 %31, f32 4;
    f32 %33 = fmul f32 %32, f32 %31;
    f32 %34 = fmul f32 %33, f32 %31;
    f32 %35 = fmul f32 %31, f32 3;
    f32 %36 = fsub f32 %35, f32 %34;
    ubr ^b6;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 17;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = add i32 %3, i32 -4;
    i1 %5 = icmp sgt i32 %4, i32 17;
    i1 %6 = icmp sgt i32 %3, i32 0;
    i1 %7 = icmp sgt i32 %0, i32 5;
    i1 %8 = icmp sgt i32 %3, i32 5;
    i32 %9 = add i32 %0, i32 -20;
    i32 %10 = add i32 %3, i32 -20;
    [8 * [8 * f32]]* %11 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %12 = phi [^entry, i32 0] [^b1, i32 %22];
    i1 %13 = icmp sgt i32 %0, i32 %12;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^b:
    f32 %14 = s2f i32 %0 to f32;
    f32 %15 = fdiv f32 3.14159, f32 %14;
    f32 %16 = s2f i32 %3 to f32;
    f32 %17 = fdiv f32 3.14159, f32 %16;
    [8 * [8 * f32]]* %18 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %19 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0];
    [8 * f32]* %20 = getelementptr &([8 * [8 * f32]]* %11)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %6(prob = 0.984615), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %21 = getelementptr &([8 * [8 * f32]]* %11)[i64 0][i32 %12];
    ubr ^while.body1;
  ^b1:
    i32 %22 = add i32 %12, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %23 = phi [^b, i32 0] [^b3, i32 %37];
    i1 %24 = icmp sgt i32 %0, i32 %23;
    [8 * f32]* %25 = getelementptr &([8 * f32]* %19)[i32 %23];
    f32 %26 = s2f i32 %23 to f32;
    cbr i1 %24(prob = 0.984615), ^while.header2, ^b2;
  ^while.body1:
    i32 %27 = phi [^prebody, i32 0] [^while.body1, i32 %30];
    f32 %28 = call () -> f32 @getfloat();
    f32* %29 = getelementptr &([8 * f32]* %21)[i64 0][i32 %27];
    store f32* %29 with f32 %28;
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = icmp sgt i32 %3, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body1, ^b1;
  ^b2:
    i1 %32 = icmp sgt i32 %3, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %33 = phi [^while.header1, i32 0] [^b5, i32 %49];
    i1 %34 = icmp sgt i32 %3, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^b3;
  ^while.body2:
    f32* %35 = getelementptr &([8 * f32]* %25)[i64 0][i32 %33];
    store f32* %35 with f32 0;
    f32 %36 = s2f i32 %33 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %37 = add i32 %23, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %38 = phi [^b2, i32 0] [^b6, i32 %59];
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body3, ^b4;
  ^while.header4:
    i32 %40 = phi [^while.body2, i32 0] [^b12, i32 %135];
    i1 %41 = icmp sgt i32 %0, i32 %40;
    cbr i1 %41(prob = 0.984615), ^prebody1, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %42 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %43 = getelementptr &([8 * [8 * f32]]* %42)[i64 0][i64 0];
    f32* %44 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0][i64 0];
    i1 %45 = icmp sgt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %46 = getelementptr &([8 * f32]* %19)[i32 %38];
    f32* %47 = getelementptr &([8 * f32]* %46)[i64 0][i64 0];
    f32 %48 = load f32* %47;
    call (f32) -> void @putfloat(f32 %48);
    cbr i1 %32(prob = 0.984615), ^while.body4, ^b6;
  ^b5:
    i32 %49 = add i32 %33, i32 1;
    ubr ^while.header2;
  ^prebody1:
    f32 %50 = s2f i32 %40 to f32;
    f32 %51 = fadd f32 %50, f32 0.5;
    f32 %52 = fmul f32 %15, f32 %51;
    f32 %53 = fmul f32 %52, f32 %26;
    f32 %54 = fadd f32 %53, f32 1.5708;
    i1 %55 = fcmp ogt f32 %54, f32 6.28319;
    i1 %56 = fcmp olt f32 %54, f32 -6.28319;
    i1 %57 = or i1 %55, i1 %56;
    [8 * f32]* %58 = getelementptr &([8 * f32]* %20)[i32 %40];
    cbr i1 %57(prob = 0.5), ^if.then, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %38, i32 1;
    ubr ^while.header3;
  ^while.body4:
    i32 %60 = phi [^while.body3, i32 1] [^while.body4, i32 %63];
    call (i32) -> void @putch(i32 32);
    f32* %61 = getelementptr &([8 * f32]* %46)[i64 0][i32 %60];
    f32 %62 = load f32* %61;
    call (f32) -> void @putfloat(f32 %62);
    i32 %63 = add i32 %60, i32 1;
    i1 %64 = icmp sgt i32 %3, i32 %63;
    cbr i1 %64(prob = 0.984615), ^while.body4, ^b6;
  ^while.header5:
    i32 %65 = phi [^b4, i32 0] [^b9, i32 %110];
    i1 %66 = icmp sgt i32 %0, i32 %65;
    cbr i1 %66(prob = 0.984615), ^while.body5, ^while.header6;
  ^if.then:
    f32 %67 = fdiv f32 %54, f32 6.28319;
    i32 %68 = f2s f32 %67 to i32;
    f32 %69 = s2f i32 %68 to f32;
    f32 %70 = fmul f32 %69, f32 6.28319;
    f32 %71 = fsub f32 %54, f32 %70;
    ubr ^b7;
  ^b7:
    f32 %72 = phi [^prebody1, f32 %54] [^if.then, f32 %71];
    i1 %73 = fcmp ogt f32 %72, f32 3.14159;
    f32 %74 = fsub f32 %72, f32 6.28319;
    f32 %75 = select i1 %73 ? f32 %74 : f32 %72;
    i1 %76 = fcmp olt f32 %75, f32 -3.14159;
    f32 %77 = fadd f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    f32 %79 = call (f32) -> f32 @my_sin_impl(f32 %78);
    f32 %80 = load f32* %35;
    ubr ^while.body6;
  ^while.body5:
    f32 %81 = s2f i32 %65 to f32;
    f32 %82 = fadd f32 %81, f32 0.5;
    f32 %83 = fmul f32 %15, f32 %82;
    [8 * f32]* %84 = getelementptr &([8 * f32]* %43)[i32 %65];
    ubr ^while.header7;
  ^while.header6:
    i32 %85 = phi [^while.header5, i32 0] [^b11, i32 %129];
    i1 %86 = icmp sgt i32 %0, i32 %85;
    cbr i1 %86(prob = 0.984615), ^while.body7, ^b8;
  ^while.body6:
    f32 %87 = phi [^b7, f32 %80] [^b10, f32 %120];
    i32 %88 = phi [^b7, i32 0] [^b10, i32 %121];
    f32 %89 = s2f i32 %88 to f32;
    f32 %90 = fadd f32 %89, f32 0.5;
    f32 %91 = fmul f32 %17, f32 %90;
    f32 %92 = fmul f32 %91, f32 %36;
    f32 %93 = fadd f32 %92, f32 1.5708;
    i1 %94 = fcmp ogt f32 %93, f32 6.28319;
    i1 %95 = fcmp olt f32 %93, f32 -6.28319;
    i1 %96 = or i1 %94, i1 %95;
    f32* %97 = getelementptr &([8 * f32]* %58)[i64 0][i32 %88];
    f32 %98 = load f32* %97;
    f32 %99 = fmul f32 %98, f32 %79;
    cbr i1 %96(prob = 0.5), ^if.then1, ^b10;
  ^while.header7:
    i32 %100 = phi [^while.body5, i32 0] [^b13, i32 %243];
    i1 %101 = icmp sgt i32 %3, i32 %100;
    cbr i1 %101(prob = 0.984615), ^while.body8, ^b9;
  ^while.body7:
    [8 * f32]* %102 = getelementptr &([8 * f32]* %43)[i32 %85];
    f32* %103 = getelementptr &([8 * f32]* %102)[i64 0][i64 0];
    f32 %104 = load f32* %103;
    call (f32) -> void @putfloat(f32 %104);
    cbr i1 %32(prob = 0.984615), ^while.body9, ^b11;
  ^b8:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then1:
    f32 %105 = fdiv f32 %93, f32 6.28319;
    i32 %106 = f2s f32 %105 to i32;
    f32 %107 = s2f i32 %106 to f32;
    f32 %108 = fmul f32 %107, f32 6.28319;
    f32 %109 = fsub f32 %93, f32 %108;
    ubr ^b10;
  ^b9:
    i32 %110 = add i32 %65, i32 1;
    ubr ^while.header5;
  ^b10:
    f32 %111 = phi [^while.body6, f32 %93] [^if.then1, f32 %109];
    i1 %112 = fcmp ogt f32 %111, f32 3.14159;
    f32 %113 = fsub f32 %111, f32 6.28319;
    f32 %114 = select i1 %112 ? f32 %113 : f32 %111;
    i1 %115 = fcmp olt f32 %114, f32 -3.14159;
    f32 %116 = fadd f32 %114, f32 6.28319;
    f32 %117 = select i1 %115 ? f32 %116 : f32 %114;
    f32 %118 = call (f32) -> f32 @my_sin_impl(f32 %117);
    f32 %119 = fmul f32 %99, f32 %118;
    f32 %120 = fadd f32 %87, f32 %119;
    store f32* %35 with f32 %120;
    i32 %121 = add i32 %88, i32 1;
    i1 %122 = icmp sgt i32 %3, i32 %121;
    cbr i1 %122(prob = 0.984615), ^while.body6, ^b12;
  ^while.body8:
    f32* %123 = getelementptr &([8 * f32]* %84)[i64 0][i32 %100];
    f32 %124 = load f32* %44;
    f32 %125 = fmul f32 %124, f32 0.25;
    store f32* %123 with f32 %125;
    f32 %126 = s2f i32 %100 to f32;
    f32 %127 = fadd f32 %126, f32 0.5;
    f32 %128 = fmul f32 %17, f32 %127;
    cbr i1 %45(prob = 0.984615), ^super.header, ^while.header8;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %129 = add i32 %85, i32 1;
    ubr ^while.header6;
  ^while.body9:
    i32 %130 = phi [^while.body7, i32 1] [^while.body9, i32 %133];
    call (i32) -> void @putch(i32 32);
    f32* %131 = getelementptr &([8 * f32]* %102)[i64 0][i32 %130];
    f32 %132 = load f32* %131;
    call (f32) -> void @putfloat(f32 %132);
    i32 %133 = add i32 %130, i32 1;
    i1 %134 = icmp sgt i32 %3, i32 %133;
    cbr i1 %134(prob = 0.984615), ^while.body9, ^b11;
  ^b12:
    i32 %135 = add i32 %40, i32 1;
    ubr ^while.header4;
  ^super.header:
    cbr i1 %7(prob = 0.941176), ^super.header1, ^while.body10;
  ^while.header8:
    cbr i1 %32(prob = 0.984615), ^prebody2, ^while.header9;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body11, ^while.body12;
  ^prebody2:
    f32 %136 = load f32* %123;
    cbr i1 %8(prob = 0.941176), ^super.header2, ^while.body14;
  ^while.body10 {scalar}:
    f32 %137 = phi [^super.header, f32 %125] [^while.body10, f32 %143] [^while.body12, f32 %235];
    i32 %138 = phi [^super.header, i32 1] [^while.body10, i32 %144] [^while.body12, i32 %236];
    [8 * f32]* %139 = getelementptr &([8 * f32]* %19)[i32 %138];
    f32* %140 = getelementptr &([8 * f32]* %139)[i64 0][i64 0];
    f32 %141 = load f32* %140;
    f32 %142 = fmul f32 %141, f32 0.5;
    f32 %143 = fadd f32 %137, f32 %142;
    i32 %144 = add i32 %138, i32 1;
    i1 %145 = icmp sgt i32 %0, i32 %144;
    cbr i1 %145(prob = 0.75), ^while.body10, ^postbody;
  ^while.header9:
    i32 %146 = phi [^while.header8, i32 1] [^postbody1, i32 1] [^b15, i32 %361];
    i1 %147 = icmp sgt i32 %0, i32 %146;
    cbr i1 %147(prob = 0.984615), ^while.body13, ^b13;
  ^while.body11:
    f32 %148 = phi [^super.header1, f32 %125] [^while.body11, f32 %214];
    i32 %149 = phi [^super.header1, i32 1] [^while.body11, i32 %215];
    [8 * f32]* %150 = getelementptr &([8 * f32]* %19)[i32 %149];
    f32* %151 = getelementptr &([8 * f32]* %150)[i64 0][i64 0];
    f32 %152 = load f32* %151;
    f32 %153 = fmul f32 %152, f32 0.5;
    f32 %154 = fadd f32 %148, f32 %153;
    f32* %155 = getelementptr &([8 * f32]* %150)[i64 1][i64 0];
    f32 %156 = load f32* %155;
    f32 %157 = fmul f32 %156, f32 0.5;
    f32 %158 = fadd f32 %154, f32 %157;
    f32* %159 = getelementptr &([8 * f32]* %150)[i64 2][i64 0];
    f32 %160 = load f32* %159;
    f32 %161 = fmul f32 %160, f32 0.5;
    f32 %162 = fadd f32 %158, f32 %161;
    f32* %163 = getelementptr &([8 * f32]* %150)[i64 3][i64 0];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 %164, f32 0.5;
    f32 %166 = fadd f32 %162, f32 %165;
    f32* %167 = getelementptr &([8 * f32]* %150)[i64 4][i64 0];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 %168, f32 0.5;
    f32 %170 = fadd f32 %166, f32 %169;
    f32* %171 = getelementptr &([8 * f32]* %150)[i64 5][i64 0];
    f32 %172 = load f32* %171;
    f32 %173 = fmul f32 %172, f32 0.5;
    f32 %174 = fadd f32 %170, f32 %173;
    f32* %175 = getelementptr &([8 * f32]* %150)[i64 6][i64 0];
    f32 %176 = load f32* %175;
    f32 %177 = fmul f32 %176, f32 0.5;
    f32 %178 = fadd f32 %174, f32 %177;
    f32* %179 = getelementptr &([8 * f32]* %150)[i64 7][i64 0];
    f32 %180 = load f32* %179;
    f32 %181 = fmul f32 %180, f32 0.5;
    f32 %182 = fadd f32 %178, f32 %181;
    f32* %183 = getelementptr &([8 * f32]* %150)[i64 8][i64 0];
    f32 %184 = load f32* %183;
    f32 %185 = fmul f32 %184, f32 0.5;
    f32 %186 = fadd f32 %182, f32 %185;
    f32* %187 = getelementptr &([8 * f32]* %150)[i64 9][i64 0];
    f32 %188 = load f32* %187;
    f32 %189 = fmul f32 %188, f32 0.5;
    f32 %190 = fadd f32 %186, f32 %189;
    f32* %191 = getelementptr &([8 * f32]* %150)[i64 10][i64 0];
    f32 %192 = load f32* %191;
    f32 %193 = fmul f32 %192, f32 0.5;
    f32 %194 = fadd f32 %190, f32 %193;
    f32* %195 = getelementptr &([8 * f32]* %150)[i64 11][i64 0];
    f32 %196 = load f32* %195;
    f32 %197 = fmul f32 %196, f32 0.5;
    f32 %198 = fadd f32 %194, f32 %197;
    f32* %199 = getelementptr &([8 * f32]* %150)[i64 12][i64 0];
    f32 %200 = load f32* %199;
    f32 %201 = fmul f32 %200, f32 0.5;
    f32 %202 = fadd f32 %198, f32 %201;
    f32* %203 = getelementptr &([8 * f32]* %150)[i64 13][i64 0];
    f32 %204 = load f32* %203;
    f32 %205 = fmul f32 %204, f32 0.5;
    f32 %206 = fadd f32 %202, f32 %205;
    f32* %207 = getelementptr &([8 * f32]* %150)[i64 14][i64 0];
    f32 %208 = load f32* %207;
    f32 %209 = fmul f32 %208, f32 0.5;
    f32 %210 = fadd f32 %206, f32 %209;
    f32* %211 = getelementptr &([8 * f32]* %150)[i64 15][i64 0];
    f32 %212 = load f32* %211;
    f32 %213 = fmul f32 %212, f32 0.5;
    f32 %214 = fadd f32 %210, f32 %213;
    i32 %215 = add i32 %149, i32 16;
    i1 %216 = icmp sgt i32 %9, i32 %215;
    cbr i1 %216(prob = 0.941176), ^while.body11, ^while.body12;
  ^postbody:
    store f32* %123 with f32 %143;
    ubr ^while.header8;
  ^while.body12 {scalar}:
    i32 %217 = phi [^super.header1, i32 1] [^while.body11, i32 %215] [^while.body12, i32 %236];
    f32 %218 = phi [^super.header1, f32 %125] [^while.body11, f32 %214] [^while.body12, f32 %235];
    [8 * f32]* %219 = getelementptr &([8 * f32]* %19)[i32 %217];
    f32* %220 = getelementptr &([8 * f32]* %219)[i64 0][i64 0];
    f32 %221 = load f32* %220;
    f32 %222 = fmul f32 %221, f32 0.5;
    f32 %223 = fadd f32 %218, f32 %222;
    f32* %224 = getelementptr &([8 * f32]* %219)[i64 1][i64 0];
    f32 %225 = load f32* %224;
    f32 %226 = fmul f32 %225, f32 0.5;
    f32 %227 = fadd f32 %223, f32 %226;
    f32* %228 = getelementptr &([8 * f32]* %219)[i64 2][i64 0];
    f32 %229 = load f32* %228;
    f32 %230 = fmul f32 %229, f32 0.5;
    f32 %231 = fadd f32 %227, f32 %230;
    f32* %232 = getelementptr &([8 * f32]* %219)[i64 3][i64 0];
    f32 %233 = load f32* %232;
    f32 %234 = fmul f32 %233, f32 0.5;
    f32 %235 = fadd f32 %231, f32 %234;
    i32 %236 = add i32 %217, i32 4;
    i1 %237 = icmp sgt i32 %1, i32 %236;
    cbr i1 %237(prob = 0.75), ^while.body12, ^while.body10;
  ^b13:
    f32 %238 = load f32* %123;
    f32 %239 = fadd f32 %238, f32 %238;
    f32 %240 = fdiv f32 %239, f32 %14;
    f32 %241 = fadd f32 %240, f32 %240;
    f32 %242 = fdiv f32 %241, f32 %16;
    store f32* %123 with f32 %242;
    i32 %243 = add i32 %100, i32 1;
    ubr ^while.header7;
  ^super.header2:
    cbr i1 %5(prob = 0.941176), ^while.body15, ^while.body16;
  ^while.body13:
    f32 %244 = s2f i32 %146 to f32;
    f32 %245 = fmul f32 %83, f32 %244;
    f32 %246 = fadd f32 %245, f32 1.5708;
    i1 %247 = fcmp ogt f32 %246, f32 6.28319;
    i1 %248 = fcmp olt f32 %246, f32 -6.28319;
    i1 %249 = or i1 %247, i1 %248;
    cbr i1 %249(prob = 0.5), ^if.then2, ^b14;
  ^while.body14 {scalar}:
    f32 %250 = phi [^prebody2, f32 %136] [^while.body14, f32 %255] [^while.body16, f32 %348];
    i32 %251 = phi [^prebody2, i32 1] [^while.body14, i32 %256] [^while.body16, i32 %349];
    f32* %252 = getelementptr &([8 * f32]* %19)[i64 0][i32 %251];
    f32 %253 = load f32* %252;
    f32 %254 = fmul f32 %253, f32 0.5;
    f32 %255 = fadd f32 %250, f32 %254;
    i32 %256 = add i32 %251, i32 1;
    i1 %257 = icmp sgt i32 %3, i32 %256;
    cbr i1 %257(prob = 0.75), ^while.body14, ^postbody1;
  ^if.then2:
    f32 %258 = fdiv f32 %246, f32 6.28319;
    i32 %259 = f2s f32 %258 to i32;
    f32 %260 = s2f i32 %259 to f32;
    f32 %261 = fmul f32 %260, f32 6.28319;
    f32 %262 = fsub f32 %246, f32 %261;
    ubr ^b14;
  ^while.body15:
    f32 %263 = phi [^super.header2, f32 %136] [^while.body15, f32 %328];
    i32 %264 = phi [^super.header2, i32 1] [^while.body15, i32 %329];
    f32* %265 = getelementptr &([8 * f32]* %19)[i64 0][i32 %264];
    f32 %266 = load f32* %265;
    f32 %267 = fmul f32 %266, f32 0.5;
    f32 %268 = fadd f32 %263, f32 %267;
    f32* %269 = getelementptr &(f32* %265)[i64 1];
    f32 %270 = load f32* %269;
    f32 %271 = fmul f32 %270, f32 0.5;
    f32 %272 = fadd f32 %268, f32 %271;
    f32* %273 = getelementptr &(f32* %265)[i64 2];
    f32 %274 = load f32* %273;
    f32 %275 = fmul f32 %274, f32 0.5;
    f32 %276 = fadd f32 %272, f32 %275;
    f32* %277 = getelementptr &(f32* %265)[i64 3];
    f32 %278 = load f32* %277;
    f32 %279 = fmul f32 %278, f32 0.5;
    f32 %280 = fadd f32 %276, f32 %279;
    f32* %281 = getelementptr &(f32* %265)[i64 4];
    f32 %282 = load f32* %281;
    f32 %283 = fmul f32 %282, f32 0.5;
    f32 %284 = fadd f32 %280, f32 %283;
    f32* %285 = getelementptr &(f32* %265)[i64 5];
    f32 %286 = load f32* %285;
    f32 %287 = fmul f32 %286, f32 0.5;
    f32 %288 = fadd f32 %284, f32 %287;
    f32* %289 = getelementptr &(f32* %265)[i64 6];
    f32 %290 = load f32* %289;
    f32 %291 = fmul f32 %290, f32 0.5;
    f32 %292 = fadd f32 %288, f32 %291;
    f32* %293 = getelementptr &(f32* %265)[i64 7];
    f32 %294 = load f32* %293;
    f32 %295 = fmul f32 %294, f32 0.5;
    f32 %296 = fadd f32 %292, f32 %295;
    f32* %297 = getelementptr &(f32* %265)[i64 8];
    f32 %298 = load f32* %297;
    f32 %299 = fmul f32 %298, f32 0.5;
    f32 %300 = fadd f32 %296, f32 %299;
    f32* %301 = getelementptr &(f32* %265)[i64 9];
    f32 %302 = load f32* %301;
    f32 %303 = fmul f32 %302, f32 0.5;
    f32 %304 = fadd f32 %300, f32 %303;
    f32* %305 = getelementptr &(f32* %265)[i64 10];
    f32 %306 = load f32* %305;
    f32 %307 = fmul f32 %306, f32 0.5;
    f32 %308 = fadd f32 %304, f32 %307;
    f32* %309 = getelementptr &(f32* %265)[i64 11];
    f32 %310 = load f32* %309;
    f32 %311 = fmul f32 %310, f32 0.5;
    f32 %312 = fadd f32 %308, f32 %311;
    f32* %313 = getelementptr &(f32* %265)[i64 12];
    f32 %314 = load f32* %313;
    f32 %315 = fmul f32 %314, f32 0.5;
    f32 %316 = fadd f32 %312, f32 %315;
    f32* %317 = getelementptr &(f32* %265)[i64 13];
    f32 %318 = load f32* %317;
    f32 %319 = fmul f32 %318, f32 0.5;
    f32 %320 = fadd f32 %316, f32 %319;
    f32* %321 = getelementptr &(f32* %265)[i64 14];
    f32 %322 = load f32* %321;
    f32 %323 = fmul f32 %322, f32 0.5;
    f32 %324 = fadd f32 %320, f32 %323;
    f32* %325 = getelementptr &(f32* %265)[i64 15];
    f32 %326 = load f32* %325;
    f32 %327 = fmul f32 %326, f32 0.5;
    f32 %328 = fadd f32 %324, f32 %327;
    i32 %329 = add i32 %264, i32 16;
    i1 %330 = icmp sgt i32 %10, i32 %329;
    cbr i1 %330(prob = 0.941176), ^while.body15, ^while.body16;
  ^postbody1:
    store f32* %123 with f32 %255;
    ubr ^while.header9;
  ^while.body16 {scalar}:
    i32 %331 = phi [^super.header2, i32 1] [^while.body15, i32 %329] [^while.body16, i32 %349];
    f32 %332 = phi [^super.header2, f32 %136] [^while.body15, f32 %328] [^while.body16, f32 %348];
    f32* %333 = getelementptr &([8 * f32]* %19)[i64 0][i32 %331];
    f32 %334 = load f32* %333;
    f32 %335 = fmul f32 %334, f32 0.5;
    f32 %336 = fadd f32 %332, f32 %335;
    f32* %337 = getelementptr &(f32* %333)[i64 1];
    f32 %338 = load f32* %337;
    f32 %339 = fmul f32 %338, f32 0.5;
    f32 %340 = fadd f32 %336, f32 %339;
    f32* %341 = getelementptr &(f32* %333)[i64 2];
    f32 %342 = load f32* %341;
    f32 %343 = fmul f32 %342, f32 0.5;
    f32 %344 = fadd f32 %340, f32 %343;
    f32* %345 = getelementptr &(f32* %333)[i64 3];
    f32 %346 = load f32* %345;
    f32 %347 = fmul f32 %346, f32 0.5;
    f32 %348 = fadd f32 %344, f32 %347;
    i32 %349 = add i32 %331, i32 4;
    i1 %350 = icmp sgt i32 %4, i32 %349;
    cbr i1 %350(prob = 0.75), ^while.body16, ^while.body14;
  ^b14:
    f32 %351 = phi [^while.body13, f32 %246] [^if.then2, f32 %262];
    cbr i1 %32(prob = 0.984615), ^indirect, ^b15;
  ^indirect:
    f32 %352 = fsub f32 %351, f32 6.28319;
    i1 %353 = fcmp ogt f32 %351, f32 3.14159;
    f32 %354 = select i1 %353 ? f32 %352 : f32 %351;
    f32 %355 = fadd f32 %354, f32 6.28319;
    i1 %356 = fcmp olt f32 %354, f32 -3.14159;
    f32 %357 = select i1 %356 ? f32 %355 : f32 %354;
    f32 %358 = call (f32) -> f32 @my_sin_impl(f32 %357);
    [8 * f32]* %359 = getelementptr &([8 * f32]* %19)[i32 %146];
    f32 %360 = load f32* %123;
    ubr ^while.body17;
  ^b15:
    i32 %361 = add i32 %146, i32 1;
    ubr ^while.header9;
  ^while.body17:
    f32 %362 = phi [^indirect, f32 %360] [^b16, f32 %387];
    i32 %363 = phi [^indirect, i32 1] [^b16, i32 %388];
    f32 %364 = s2f i32 %363 to f32;
    f32 %365 = fmul f32 %128, f32 %364;
    f32 %366 = fadd f32 %365, f32 1.5708;
    i1 %367 = fcmp ogt f32 %366, f32 6.28319;
    i1 %368 = fcmp olt f32 %366, f32 -6.28319;
    i1 %369 = or i1 %367, i1 %368;
    f32* %370 = getelementptr &([8 * f32]* %359)[i64 0][i32 %363];
    f32 %371 = load f32* %370;
    f32 %372 = fmul f32 %371, f32 %358;
    cbr i1 %369(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %373 = fdiv f32 %366, f32 6.28319;
    i32 %374 = f2s f32 %373 to i32;
    f32 %375 = s2f i32 %374 to f32;
    f32 %376 = fmul f32 %375, f32 6.28319;
    f32 %377 = fsub f32 %366, f32 %376;
    ubr ^b16;
  ^b16:
    f32 %378 = phi [^while.body17, f32 %366] [^if.then3, f32 %377];
    i1 %379 = fcmp ogt f32 %378, f32 3.14159;
    f32 %380 = fsub f32 %378, f32 6.28319;
    f32 %381 = select i1 %379 ? f32 %380 : f32 %378;
    i1 %382 = fcmp olt f32 %381, f32 -3.14159;
    f32 %383 = fadd f32 %381, f32 6.28319;
    f32 %384 = select i1 %382 ? f32 %383 : f32 %381;
    f32 %385 = call (f32) -> f32 @my_sin_impl(f32 %384);
    f32 %386 = fmul f32 %372, f32 %385;
    f32 %387 = fadd f32 %362, f32 %386;
    store f32* %123 with f32 %387;
    i32 %388 = add i32 %363, i32 1;
    i1 %389 = icmp sgt i32 %3, i32 %388;
    cbr i1 %389(prob = 0.984615), ^while.body17, ^b15;
}
