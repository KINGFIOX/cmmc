internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 4, f32 %5;
    f32 %7 = fmul f32 %6, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 3, f32 %5;
    f32 %10 = fsub f32 %9, f32 %8;
    ubr ^b1;
  ^b1:
    f32 %11 = phi [^entry, f32 %x] [^b, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %0, i32 17;
    i1 %4 = scmp gt i32 %1, i32 17;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    [8 * [8 * f32]]* %8 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %9 = getelementptr &([8 * [8 * f32]]* %8)[i64 0][i64 0];
    f32 %10 = s2f i32 %1 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    f32 %12 = s2f i32 %0 to f32;
    f32 %13 = fdiv f32 3.14159, f32 %12;
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = scmp lt i32 %17, i32 %0;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %9)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b2;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %1;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %26 = scmp gt i32 %1, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %28 = scmp lt i32 %27, i32 %1;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b3;
  ^while.body2:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %44];
    i1 %33 = scmp lt i32 %32, i32 %0;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
  ^while.header4:
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %56];
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %8)[i64 0][i64 0][i64 0];
    i1 %39 = scmp gt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %9)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body5, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %44 = add i32 %32, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %45 = phi [^while.body3, i32 1] [^while.body5, i32 %48];
    call (i32) -> void @putch(i32 32);
    f32* %46 = getelementptr &([8 * f32]* %40)[i64 0][i32 %45];
    f32 %47 = load f32* %46;
    call (f32) -> void @putfloat(f32 %47);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %1;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b6;
  ^while.header5:
    i32 %50 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %51 = s2f i32 %50 to f32;
    f32 %52 = fadd f32 %51, f32 0.5;
    f32 %53 = fmul f32 %13, f32 %52;
    i1 %54 = scmp lt i32 %50, i32 %0;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %37)[i32 %50];
    cbr i1 %54(prob = 0.97), ^while.header6, ^while.header7;
  ^b7:
    i32 %56 = add i32 %34, i32 1;
    ubr ^while.header4;
  ^indirect1:
    f32 %57 = s2f i32 %34 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %13, f32 %58;
    f32 %60 = fmul f32 %59, f32 %20;
    f32 %61 = fadd f32 %60, f32 1.5708;
    i1 %62 = fcmp gt f32 %61, f32 6.28319;
    i1 %63 = fcmp lt f32 %61, f32 -6.28319;
    i1 %64 = or i1 %62, i1 %63;
    [8 * f32]* %65 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %64(prob = 0.5), ^if.then, ^b8;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b14, i32 %213];
    i1 %67 = scmp lt i32 %66, i32 %1;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b9;
  ^while.header7:
    i32 %68 = phi [^while.header5, i32 0] [^b11, i32 %104];
    i1 %69 = scmp lt i32 %68, i32 %0;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %61, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %61, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^indirect1, f32 %61] [^if.then, f32 %74];
    i1 %76 = fcmp gt f32 %75, f32 3.14159;
    f32 %77 = fsub f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    i1 %79 = fcmp lt f32 %78, f32 -3.14159;
    f32 %80 = fadd f32 %78, f32 6.28319;
    f32 %81 = select i1 %79 ? f32 %80 : f32 %78;
    f32 %82 = call (f32) -> f32 @my_sin_impl(f32 %81);
    f32 %83 = load f32* %29;
    ubr ^while.body8;
  ^b9:
    i32 %84 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32 %85 = load f32* %38;
    f32 %86 = fmul f32 0.25, f32 %85;
    f32* %87 = getelementptr &([8 * f32]* %55)[i64 0][i32 %66];
    store f32* %87 with f32 %86;
    cbr i1 %39(prob = 0.97), ^super.header, ^b12;
  ^while.body7:
    [8 * f32]* %88 = getelementptr &([8 * f32]* %37)[i32 %68];
    f32* %89 = getelementptr &([8 * f32]* %88)[i64 0][i64 0];
    f32 %90 = load f32* %89;
    call (f32) -> void @putfloat(f32 %90);
    cbr i1 %26(prob = 0.97), ^while.body9, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body8:
    f32 %91 = phi [^b8, f32 %83] [^b13, f32 %129];
    i32 %92 = phi [^b8, i32 0] [^b13, i32 %130];
    f32 %93 = s2f i32 %92 to f32;
    f32 %94 = fadd f32 %93, f32 0.5;
    f32 %95 = fmul f32 %11, f32 %94;
    f32 %96 = fmul f32 %95, f32 %30;
    f32 %97 = fadd f32 %96, f32 1.5708;
    i1 %98 = fcmp gt f32 %97, f32 6.28319;
    i1 %99 = fcmp lt f32 %97, f32 -6.28319;
    i1 %100 = or i1 %98, i1 %99;
    f32* %101 = getelementptr &([8 * f32]* %65)[i64 0][i32 %92];
    f32 %102 = load f32* %101;
    f32 %103 = fmul f32 %102, f32 %82;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b13;
  ^super.header:
    cbr i1 %3(prob = 0.67), ^indirect2, ^indirect3;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %104 = add i32 %68, i32 1;
    ubr ^while.header7;
  ^b12:
    f32 %105 = s2f i32 %66 to f32;
    f32 %106 = fadd f32 %105, f32 0.5;
    f32 %107 = fmul f32 %11, f32 %106;
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header8;
  ^while.body9:
    i32 %108 = phi [^while.body7, i32 1] [^while.body9, i32 %111];
    call (i32) -> void @putch(i32 32);
    f32* %109 = getelementptr &([8 * f32]* %88)[i64 0][i32 %108];
    f32 %110 = load f32* %109;
    call (f32) -> void @putfloat(f32 %110);
    i32 %111 = add i32 %108, i32 1;
    i1 %112 = scmp lt i32 %111, i32 %1;
    cbr i1 %112(prob = 0.97), ^while.body9, ^b11;
  ^if.then1:
    f32 %113 = fdiv f32 %97, f32 6.28319;
    i32 %114 = f2s f32 %113 to i32;
    f32 %115 = s2f i32 %114 to f32;
    f32 %116 = fmul f32 %115, f32 6.28319;
    f32 %117 = fsub f32 %97, f32 %116;
    ubr ^b13;
  ^indirect2:
    f32 %118 = load f32* %87;
    ubr ^while.body10;
  ^indirect3:
    f32 %119 = load f32* %87;
    ubr ^indirect4;
  ^b13:
    f32 %120 = phi [^while.body8, f32 %97] [^if.then1, f32 %117];
    i1 %121 = fcmp gt f32 %120, f32 3.14159;
    f32 %122 = fsub f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    i1 %124 = fcmp lt f32 %123, f32 -3.14159;
    f32 %125 = fadd f32 %123, f32 6.28319;
    f32 %126 = select i1 %124 ? f32 %125 : f32 %123;
    f32 %127 = call (f32) -> f32 @my_sin_impl(f32 %126);
    f32 %128 = fmul f32 %103, f32 %127;
    f32 %129 = fadd f32 %91, f32 %128;
    store f32* %29 with f32 %129;
    i32 %130 = add i32 %92, i32 1;
    i1 %131 = scmp lt i32 %130, i32 %1;
    cbr i1 %131(prob = 0.97), ^while.body8, ^b7;
  ^super.header1:
    cbr i1 %4(prob = 0.67), ^indirect5, ^indirect6;
  ^while.header8:
    i32 %132 = phi [^b12, i32 1] [^b15, i32 %289] [^while.body19, i32 1];
    i1 %133 = scmp lt i32 %132, i32 %0;
    cbr i1 %133(prob = 0.97), ^while.body11, ^b14;
  ^indirect4:
    f32 %134 = phi [^indirect3, f32 %119] [^while.body10, f32 %204];
    i32 %135 = phi [^indirect3, i32 1] [^while.body10, i32 %138];
    ubr ^super.header2;
  ^indirect5:
    f32 %136 = load f32* %87;
    ubr ^while.body12;
  ^while.body10:
    f32 %137 = phi [^indirect2, f32 %118] [^while.body10, f32 %204];
    i32 %138 = phi [^indirect2, i32 17] [^while.body10, i32 %205];
    i32 %139 = phi [^indirect2, i32 1] [^while.body10, i32 %138];
    [8 * f32]* %140 = getelementptr &([8 * f32]* %9)[i32 %139];
    f32* %141 = getelementptr &([8 * f32]* %140)[i64 0][i64 0];
    f32 %142 = load f32* %141;
    f32 %143 = fmul f32 0.5, f32 %142;
    f32 %144 = fadd f32 %137, f32 %143;
    f32* %145 = getelementptr &([8 * f32]* %140)[i64 1][i64 0];
    f32 %146 = load f32* %145;
    f32 %147 = fmul f32 0.5, f32 %146;
    f32 %148 = fadd f32 %144, f32 %147;
    f32* %149 = getelementptr &([8 * f32]* %140)[i64 2][i64 0];
    f32 %150 = load f32* %149;
    f32 %151 = fmul f32 0.5, f32 %150;
    f32 %152 = fadd f32 %148, f32 %151;
    f32* %153 = getelementptr &([8 * f32]* %140)[i64 3][i64 0];
    f32 %154 = load f32* %153;
    f32 %155 = fmul f32 0.5, f32 %154;
    f32 %156 = fadd f32 %152, f32 %155;
    f32* %157 = getelementptr &([8 * f32]* %140)[i64 4][i64 0];
    f32 %158 = load f32* %157;
    f32 %159 = fmul f32 0.5, f32 %158;
    f32 %160 = fadd f32 %156, f32 %159;
    f32* %161 = getelementptr &([8 * f32]* %140)[i64 5][i64 0];
    f32 %162 = load f32* %161;
    f32 %163 = fmul f32 0.5, f32 %162;
    f32 %164 = fadd f32 %160, f32 %163;
    f32* %165 = getelementptr &([8 * f32]* %140)[i64 6][i64 0];
    f32 %166 = load f32* %165;
    f32 %167 = fmul f32 0.5, f32 %166;
    f32 %168 = fadd f32 %164, f32 %167;
    f32* %169 = getelementptr &([8 * f32]* %140)[i64 7][i64 0];
    f32 %170 = load f32* %169;
    f32 %171 = fmul f32 0.5, f32 %170;
    f32 %172 = fadd f32 %168, f32 %171;
    f32* %173 = getelementptr &([8 * f32]* %140)[i64 8][i64 0];
    f32 %174 = load f32* %173;
    f32 %175 = fmul f32 0.5, f32 %174;
    f32 %176 = fadd f32 %172, f32 %175;
    f32* %177 = getelementptr &([8 * f32]* %140)[i64 9][i64 0];
    f32 %178 = load f32* %177;
    f32 %179 = fmul f32 0.5, f32 %178;
    f32 %180 = fadd f32 %176, f32 %179;
    f32* %181 = getelementptr &([8 * f32]* %140)[i64 10][i64 0];
    f32 %182 = load f32* %181;
    f32 %183 = fmul f32 0.5, f32 %182;
    f32 %184 = fadd f32 %180, f32 %183;
    f32* %185 = getelementptr &([8 * f32]* %140)[i64 11][i64 0];
    f32 %186 = load f32* %185;
    f32 %187 = fmul f32 0.5, f32 %186;
    f32 %188 = fadd f32 %184, f32 %187;
    f32* %189 = getelementptr &([8 * f32]* %140)[i64 12][i64 0];
    f32 %190 = load f32* %189;
    f32 %191 = fmul f32 0.5, f32 %190;
    f32 %192 = fadd f32 %188, f32 %191;
    f32* %193 = getelementptr &([8 * f32]* %140)[i64 13][i64 0];
    f32 %194 = load f32* %193;
    f32 %195 = fmul f32 0.5, f32 %194;
    f32 %196 = fadd f32 %192, f32 %195;
    f32* %197 = getelementptr &([8 * f32]* %140)[i64 14][i64 0];
    f32 %198 = load f32* %197;
    f32 %199 = fmul f32 0.5, f32 %198;
    f32 %200 = fadd f32 %196, f32 %199;
    f32* %201 = getelementptr &([8 * f32]* %140)[i64 15][i64 0];
    f32 %202 = load f32* %201;
    f32 %203 = fmul f32 0.5, f32 %202;
    f32 %204 = fadd f32 %200, f32 %203;
    store f32* %87 with f32 %204;
    i32 %205 = add i32 %138, i32 16;
    i1 %206 = scmp lt i32 %205, i32 %0;
    cbr i1 %206(prob = 0.67), ^while.body10, ^indirect4;
  ^indirect6:
    f32 %207 = load f32* %87;
    ubr ^indirect7;
  ^b14:
    f32 %208 = load f32* %87;
    f32 %209 = fadd f32 %208, f32 %208;
    f32 %210 = fdiv f32 %209, f32 %12;
    f32 %211 = fadd f32 %210, f32 %210;
    f32 %212 = fdiv f32 %211, f32 %10;
    store f32* %87 with f32 %212;
    i32 %213 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^while.body11:
    cbr i1 %26(prob = 0.97), ^indirect8, ^b15;
  ^indirect7:
    f32 %214 = phi [^indirect6, f32 %207] [^while.body12, f32 %282];
    i32 %215 = phi [^indirect6, i32 1] [^while.body12, i32 %217];
    ubr ^super.header4;
  ^while.body12:
    f32 %216 = phi [^indirect5, f32 %136] [^while.body12, f32 %282];
    i32 %217 = phi [^indirect5, i32 17] [^while.body12, i32 %283];
    i32 %218 = phi [^indirect5, i32 1] [^while.body12, i32 %217];
    f32* %219 = getelementptr &([8 * f32]* %9)[i64 0][i32 %218];
    f32 %220 = load f32* %219;
    f32 %221 = fmul f32 0.5, f32 %220;
    f32 %222 = fadd f32 %216, f32 %221;
    f32* %223 = getelementptr &(f32* %219)[i64 1];
    f32 %224 = load f32* %223;
    f32 %225 = fmul f32 0.5, f32 %224;
    f32 %226 = fadd f32 %222, f32 %225;
    f32* %227 = getelementptr &(f32* %219)[i64 2];
    f32 %228 = load f32* %227;
    f32 %229 = fmul f32 0.5, f32 %228;
    f32 %230 = fadd f32 %226, f32 %229;
    f32* %231 = getelementptr &(f32* %219)[i64 3];
    f32 %232 = load f32* %231;
    f32 %233 = fmul f32 0.5, f32 %232;
    f32 %234 = fadd f32 %230, f32 %233;
    f32* %235 = getelementptr &(f32* %219)[i64 4];
    f32 %236 = load f32* %235;
    f32 %237 = fmul f32 0.5, f32 %236;
    f32 %238 = fadd f32 %234, f32 %237;
    f32* %239 = getelementptr &(f32* %219)[i64 5];
    f32 %240 = load f32* %239;
    f32 %241 = fmul f32 0.5, f32 %240;
    f32 %242 = fadd f32 %238, f32 %241;
    f32* %243 = getelementptr &(f32* %219)[i64 6];
    f32 %244 = load f32* %243;
    f32 %245 = fmul f32 0.5, f32 %244;
    f32 %246 = fadd f32 %242, f32 %245;
    f32* %247 = getelementptr &(f32* %219)[i64 7];
    f32 %248 = load f32* %247;
    f32 %249 = fmul f32 0.5, f32 %248;
    f32 %250 = fadd f32 %246, f32 %249;
    f32* %251 = getelementptr &(f32* %219)[i64 8];
    f32 %252 = load f32* %251;
    f32 %253 = fmul f32 0.5, f32 %252;
    f32 %254 = fadd f32 %250, f32 %253;
    f32* %255 = getelementptr &(f32* %219)[i64 9];
    f32 %256 = load f32* %255;
    f32 %257 = fmul f32 0.5, f32 %256;
    f32 %258 = fadd f32 %254, f32 %257;
    f32* %259 = getelementptr &(f32* %219)[i64 10];
    f32 %260 = load f32* %259;
    f32 %261 = fmul f32 0.5, f32 %260;
    f32 %262 = fadd f32 %258, f32 %261;
    f32* %263 = getelementptr &(f32* %219)[i64 11];
    f32 %264 = load f32* %263;
    f32 %265 = fmul f32 0.5, f32 %264;
    f32 %266 = fadd f32 %262, f32 %265;
    f32* %267 = getelementptr &(f32* %219)[i64 12];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 0.5, f32 %268;
    f32 %270 = fadd f32 %266, f32 %269;
    f32* %271 = getelementptr &(f32* %219)[i64 13];
    f32 %272 = load f32* %271;
    f32 %273 = fmul f32 0.5, f32 %272;
    f32 %274 = fadd f32 %270, f32 %273;
    f32* %275 = getelementptr &(f32* %219)[i64 14];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 0.5, f32 %276;
    f32 %278 = fadd f32 %274, f32 %277;
    f32* %279 = getelementptr &(f32* %219)[i64 15];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 0.5, f32 %280;
    f32 %282 = fadd f32 %278, f32 %281;
    store f32* %87 with f32 %282;
    i32 %283 = add i32 %217, i32 16;
    i1 %284 = scmp lt i32 %283, i32 %1;
    cbr i1 %284(prob = 0.67), ^while.body12, ^indirect7;
  ^super.header2:
    f32 %285 = phi [^indirect4, f32 %134] [^while.body13, f32 %361];
    i32 %286 = phi [^indirect4, i32 %135] [^while.body13, i32 %287];
    i32 %287 = add i32 %286, i32 16;
    i1 %288 = scmp lt i32 %287, i32 %0;
    cbr i1 %288(prob = 0.67), ^while.body13, ^super.header3;
  ^b15:
    i32 %289 = add i32 %132, i32 1;
    ubr ^while.header8;
  ^indirect8:
    f32 %290 = s2f i32 %132 to f32;
    f32 %291 = fmul f32 %53, f32 %290;
    f32 %292 = fadd f32 %291, f32 1.5708;
    i1 %293 = fcmp gt f32 %292, f32 6.28319;
    i1 %294 = fcmp lt f32 %292, f32 -6.28319;
    i1 %295 = or i1 %293, i1 %294;
    [8 * f32]* %296 = getelementptr &([8 * f32]* %9)[i32 %132];
    cbr i1 %295(prob = 0.5), ^if.then2, ^b16;
  ^while.body13:
    [8 * f32]* %297 = getelementptr &([8 * f32]* %9)[i32 %286];
    f32* %298 = getelementptr &([8 * f32]* %297)[i64 0][i64 0];
    f32 %299 = load f32* %298;
    f32 %300 = fmul f32 0.5, f32 %299;
    f32 %301 = fadd f32 %285, f32 %300;
    f32* %302 = getelementptr &([8 * f32]* %297)[i64 1][i64 0];
    f32 %303 = load f32* %302;
    f32 %304 = fmul f32 0.5, f32 %303;
    f32 %305 = fadd f32 %301, f32 %304;
    f32* %306 = getelementptr &([8 * f32]* %297)[i64 2][i64 0];
    f32 %307 = load f32* %306;
    f32 %308 = fmul f32 0.5, f32 %307;
    f32 %309 = fadd f32 %305, f32 %308;
    f32* %310 = getelementptr &([8 * f32]* %297)[i64 3][i64 0];
    f32 %311 = load f32* %310;
    f32 %312 = fmul f32 0.5, f32 %311;
    f32 %313 = fadd f32 %309, f32 %312;
    f32* %314 = getelementptr &([8 * f32]* %297)[i64 4][i64 0];
    f32 %315 = load f32* %314;
    f32 %316 = fmul f32 0.5, f32 %315;
    f32 %317 = fadd f32 %313, f32 %316;
    f32* %318 = getelementptr &([8 * f32]* %297)[i64 5][i64 0];
    f32 %319 = load f32* %318;
    f32 %320 = fmul f32 0.5, f32 %319;
    f32 %321 = fadd f32 %317, f32 %320;
    f32* %322 = getelementptr &([8 * f32]* %297)[i64 6][i64 0];
    f32 %323 = load f32* %322;
    f32 %324 = fmul f32 0.5, f32 %323;
    f32 %325 = fadd f32 %321, f32 %324;
    f32* %326 = getelementptr &([8 * f32]* %297)[i64 7][i64 0];
    f32 %327 = load f32* %326;
    f32 %328 = fmul f32 0.5, f32 %327;
    f32 %329 = fadd f32 %325, f32 %328;
    f32* %330 = getelementptr &([8 * f32]* %297)[i64 8][i64 0];
    f32 %331 = load f32* %330;
    f32 %332 = fmul f32 0.5, f32 %331;
    f32 %333 = fadd f32 %329, f32 %332;
    f32* %334 = getelementptr &([8 * f32]* %297)[i64 9][i64 0];
    f32 %335 = load f32* %334;
    f32 %336 = fmul f32 0.5, f32 %335;
    f32 %337 = fadd f32 %333, f32 %336;
    f32* %338 = getelementptr &([8 * f32]* %297)[i64 10][i64 0];
    f32 %339 = load f32* %338;
    f32 %340 = fmul f32 0.5, f32 %339;
    f32 %341 = fadd f32 %337, f32 %340;
    f32* %342 = getelementptr &([8 * f32]* %297)[i64 11][i64 0];
    f32 %343 = load f32* %342;
    f32 %344 = fmul f32 0.5, f32 %343;
    f32 %345 = fadd f32 %341, f32 %344;
    f32* %346 = getelementptr &([8 * f32]* %297)[i64 12][i64 0];
    f32 %347 = load f32* %346;
    f32 %348 = fmul f32 0.5, f32 %347;
    f32 %349 = fadd f32 %345, f32 %348;
    f32* %350 = getelementptr &([8 * f32]* %297)[i64 13][i64 0];
    f32 %351 = load f32* %350;
    f32 %352 = fmul f32 0.5, f32 %351;
    f32 %353 = fadd f32 %349, f32 %352;
    f32* %354 = getelementptr &([8 * f32]* %297)[i64 14][i64 0];
    f32 %355 = load f32* %354;
    f32 %356 = fmul f32 0.5, f32 %355;
    f32 %357 = fadd f32 %353, f32 %356;
    f32* %358 = getelementptr &([8 * f32]* %297)[i64 15][i64 0];
    f32 %359 = load f32* %358;
    f32 %360 = fmul f32 0.5, f32 %359;
    f32 %361 = fadd f32 %357, f32 %360;
    store f32* %87 with f32 %361;
    ubr ^super.header2;
  ^if.then2:
    f32 %362 = fdiv f32 %292, f32 6.28319;
    i32 %363 = f2s f32 %362 to i32;
    f32 %364 = s2f i32 %363 to f32;
    f32 %365 = fmul f32 %364, f32 6.28319;
    f32 %366 = fsub f32 %292, f32 %365;
    ubr ^b16;
  ^b16:
    f32 %367 = phi [^indirect8, f32 %292] [^if.then2, f32 %366];
    i1 %368 = fcmp gt f32 %367, f32 3.14159;
    f32 %369 = fsub f32 %367, f32 6.28319;
    f32 %370 = select i1 %368 ? f32 %369 : f32 %367;
    i1 %371 = fcmp lt f32 %370, f32 -3.14159;
    f32 %372 = fadd f32 %370, f32 6.28319;
    f32 %373 = select i1 %371 ? f32 %372 : f32 %370;
    f32 %374 = call (f32) -> f32 @my_sin_impl(f32 %373);
    f32 %375 = load f32* %87;
    ubr ^while.body17;
  ^super.header3:
    f32 %376 = phi [^super.header2, f32 %285] [^while.body14, f32 %448];
    i32 %377 = phi [^super.header2, i32 %286] [^while.body14, i32 %378];
    i32 %378 = add i32 %377, i32 16;
    i1 %379 = scmp lt i32 %378, i32 %0;
    cbr i1 %379(prob = 0.67), ^while.body14, ^while.body16;
  ^super.header4:
    f32 %380 = phi [^indirect7, f32 %214] [^while.body15, f32 %512];
    i32 %381 = phi [^indirect7, i32 %215] [^while.body15, i32 %382];
    i32 %382 = add i32 %381, i32 16;
    i1 %383 = scmp lt i32 %382, i32 %1;
    cbr i1 %383(prob = 0.67), ^while.body15, ^super.header5;
  ^while.body14:
    [8 * f32]* %384 = getelementptr &([8 * f32]* %9)[i32 %377];
    f32* %385 = getelementptr &([8 * f32]* %384)[i64 0][i64 0];
    f32 %386 = load f32* %385;
    f32 %387 = fmul f32 0.5, f32 %386;
    f32 %388 = fadd f32 %376, f32 %387;
    f32* %389 = getelementptr &([8 * f32]* %384)[i64 1][i64 0];
    f32 %390 = load f32* %389;
    f32 %391 = fmul f32 0.5, f32 %390;
    f32 %392 = fadd f32 %388, f32 %391;
    f32* %393 = getelementptr &([8 * f32]* %384)[i64 2][i64 0];
    f32 %394 = load f32* %393;
    f32 %395 = fmul f32 0.5, f32 %394;
    f32 %396 = fadd f32 %392, f32 %395;
    f32* %397 = getelementptr &([8 * f32]* %384)[i64 3][i64 0];
    f32 %398 = load f32* %397;
    f32 %399 = fmul f32 0.5, f32 %398;
    f32 %400 = fadd f32 %396, f32 %399;
    f32* %401 = getelementptr &([8 * f32]* %384)[i64 4][i64 0];
    f32 %402 = load f32* %401;
    f32 %403 = fmul f32 0.5, f32 %402;
    f32 %404 = fadd f32 %400, f32 %403;
    f32* %405 = getelementptr &([8 * f32]* %384)[i64 5][i64 0];
    f32 %406 = load f32* %405;
    f32 %407 = fmul f32 0.5, f32 %406;
    f32 %408 = fadd f32 %404, f32 %407;
    f32* %409 = getelementptr &([8 * f32]* %384)[i64 6][i64 0];
    f32 %410 = load f32* %409;
    f32 %411 = fmul f32 0.5, f32 %410;
    f32 %412 = fadd f32 %408, f32 %411;
    f32* %413 = getelementptr &([8 * f32]* %384)[i64 7][i64 0];
    f32 %414 = load f32* %413;
    f32 %415 = fmul f32 0.5, f32 %414;
    f32 %416 = fadd f32 %412, f32 %415;
    f32* %417 = getelementptr &([8 * f32]* %384)[i64 8][i64 0];
    f32 %418 = load f32* %417;
    f32 %419 = fmul f32 0.5, f32 %418;
    f32 %420 = fadd f32 %416, f32 %419;
    f32* %421 = getelementptr &([8 * f32]* %384)[i64 9][i64 0];
    f32 %422 = load f32* %421;
    f32 %423 = fmul f32 0.5, f32 %422;
    f32 %424 = fadd f32 %420, f32 %423;
    f32* %425 = getelementptr &([8 * f32]* %384)[i64 10][i64 0];
    f32 %426 = load f32* %425;
    f32 %427 = fmul f32 0.5, f32 %426;
    f32 %428 = fadd f32 %424, f32 %427;
    f32* %429 = getelementptr &([8 * f32]* %384)[i64 11][i64 0];
    f32 %430 = load f32* %429;
    f32 %431 = fmul f32 0.5, f32 %430;
    f32 %432 = fadd f32 %428, f32 %431;
    f32* %433 = getelementptr &([8 * f32]* %384)[i64 12][i64 0];
    f32 %434 = load f32* %433;
    f32 %435 = fmul f32 0.5, f32 %434;
    f32 %436 = fadd f32 %432, f32 %435;
    f32* %437 = getelementptr &([8 * f32]* %384)[i64 13][i64 0];
    f32 %438 = load f32* %437;
    f32 %439 = fmul f32 0.5, f32 %438;
    f32 %440 = fadd f32 %436, f32 %439;
    f32* %441 = getelementptr &([8 * f32]* %384)[i64 14][i64 0];
    f32 %442 = load f32* %441;
    f32 %443 = fmul f32 0.5, f32 %442;
    f32 %444 = fadd f32 %440, f32 %443;
    f32* %445 = getelementptr &([8 * f32]* %384)[i64 15][i64 0];
    f32 %446 = load f32* %445;
    f32 %447 = fmul f32 0.5, f32 %446;
    f32 %448 = fadd f32 %444, f32 %447;
    store f32* %87 with f32 %448;
    ubr ^super.header3;
  ^while.body15:
    f32* %449 = getelementptr &([8 * f32]* %9)[i64 0][i32 %381];
    f32 %450 = load f32* %449;
    f32 %451 = fmul f32 0.5, f32 %450;
    f32 %452 = fadd f32 %380, f32 %451;
    f32* %453 = getelementptr &(f32* %449)[i64 1];
    f32 %454 = load f32* %453;
    f32 %455 = fmul f32 0.5, f32 %454;
    f32 %456 = fadd f32 %452, f32 %455;
    f32* %457 = getelementptr &(f32* %449)[i64 2];
    f32 %458 = load f32* %457;
    f32 %459 = fmul f32 0.5, f32 %458;
    f32 %460 = fadd f32 %456, f32 %459;
    f32* %461 = getelementptr &(f32* %449)[i64 3];
    f32 %462 = load f32* %461;
    f32 %463 = fmul f32 0.5, f32 %462;
    f32 %464 = fadd f32 %460, f32 %463;
    f32* %465 = getelementptr &(f32* %449)[i64 4];
    f32 %466 = load f32* %465;
    f32 %467 = fmul f32 0.5, f32 %466;
    f32 %468 = fadd f32 %464, f32 %467;
    f32* %469 = getelementptr &(f32* %449)[i64 5];
    f32 %470 = load f32* %469;
    f32 %471 = fmul f32 0.5, f32 %470;
    f32 %472 = fadd f32 %468, f32 %471;
    f32* %473 = getelementptr &(f32* %449)[i64 6];
    f32 %474 = load f32* %473;
    f32 %475 = fmul f32 0.5, f32 %474;
    f32 %476 = fadd f32 %472, f32 %475;
    f32* %477 = getelementptr &(f32* %449)[i64 7];
    f32 %478 = load f32* %477;
    f32 %479 = fmul f32 0.5, f32 %478;
    f32 %480 = fadd f32 %476, f32 %479;
    f32* %481 = getelementptr &(f32* %449)[i64 8];
    f32 %482 = load f32* %481;
    f32 %483 = fmul f32 0.5, f32 %482;
    f32 %484 = fadd f32 %480, f32 %483;
    f32* %485 = getelementptr &(f32* %449)[i64 9];
    f32 %486 = load f32* %485;
    f32 %487 = fmul f32 0.5, f32 %486;
    f32 %488 = fadd f32 %484, f32 %487;
    f32* %489 = getelementptr &(f32* %449)[i64 10];
    f32 %490 = load f32* %489;
    f32 %491 = fmul f32 0.5, f32 %490;
    f32 %492 = fadd f32 %488, f32 %491;
    f32* %493 = getelementptr &(f32* %449)[i64 11];
    f32 %494 = load f32* %493;
    f32 %495 = fmul f32 0.5, f32 %494;
    f32 %496 = fadd f32 %492, f32 %495;
    f32* %497 = getelementptr &(f32* %449)[i64 12];
    f32 %498 = load f32* %497;
    f32 %499 = fmul f32 0.5, f32 %498;
    f32 %500 = fadd f32 %496, f32 %499;
    f32* %501 = getelementptr &(f32* %449)[i64 13];
    f32 %502 = load f32* %501;
    f32 %503 = fmul f32 0.5, f32 %502;
    f32 %504 = fadd f32 %500, f32 %503;
    f32* %505 = getelementptr &(f32* %449)[i64 14];
    f32 %506 = load f32* %505;
    f32 %507 = fmul f32 0.5, f32 %506;
    f32 %508 = fadd f32 %504, f32 %507;
    f32* %509 = getelementptr &(f32* %449)[i64 15];
    f32 %510 = load f32* %509;
    f32 %511 = fmul f32 0.5, f32 %510;
    f32 %512 = fadd f32 %508, f32 %511;
    store f32* %87 with f32 %512;
    ubr ^super.header4;
  ^while.body16:
    f32 %513 = phi [^super.header3, f32 %376] [^while.body16, f32 %519];
    i32 %514 = phi [^super.header3, i32 %377] [^while.body16, i32 %520];
    [8 * f32]* %515 = getelementptr &([8 * f32]* %9)[i32 %514];
    f32* %516 = getelementptr &([8 * f32]* %515)[i64 0][i64 0];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 0.5, f32 %517;
    f32 %519 = fadd f32 %513, f32 %518;
    store f32* %87 with f32 %519;
    i32 %520 = add i32 %514, i32 1;
    i1 %521 = scmp lt i32 %520, i32 %0;
    cbr i1 %521(prob = 0.97), ^while.body16, ^b12;
  ^super.header5:
    f32 %522 = phi [^super.header4, f32 %380] [^while.body18, f32 %600];
    i32 %523 = phi [^super.header4, i32 %381] [^while.body18, i32 %524];
    i32 %524 = add i32 %523, i32 16;
    i1 %525 = scmp lt i32 %524, i32 %1;
    cbr i1 %525(prob = 0.67), ^while.body18, ^while.body19;
  ^while.body17:
    f32 %526 = phi [^b16, f32 %375] [^b17, f32 %623];
    i32 %527 = phi [^b16, i32 1] [^b17, i32 %624];
    f32 %528 = s2f i32 %527 to f32;
    f32 %529 = fmul f32 %107, f32 %528;
    f32 %530 = fadd f32 %529, f32 1.5708;
    i1 %531 = fcmp gt f32 %530, f32 6.28319;
    i1 %532 = fcmp lt f32 %530, f32 -6.28319;
    i1 %533 = or i1 %531, i1 %532;
    f32* %534 = getelementptr &([8 * f32]* %296)[i64 0][i32 %527];
    f32 %535 = load f32* %534;
    f32 %536 = fmul f32 %535, f32 %374;
    cbr i1 %533(prob = 0.5), ^if.then3, ^b17;
  ^while.body18:
    f32* %537 = getelementptr &([8 * f32]* %9)[i64 0][i32 %523];
    f32 %538 = load f32* %537;
    f32 %539 = fmul f32 0.5, f32 %538;
    f32 %540 = fadd f32 %522, f32 %539;
    f32* %541 = getelementptr &(f32* %537)[i64 1];
    f32 %542 = load f32* %541;
    f32 %543 = fmul f32 0.5, f32 %542;
    f32 %544 = fadd f32 %540, f32 %543;
    f32* %545 = getelementptr &(f32* %537)[i64 2];
    f32 %546 = load f32* %545;
    f32 %547 = fmul f32 0.5, f32 %546;
    f32 %548 = fadd f32 %544, f32 %547;
    f32* %549 = getelementptr &(f32* %537)[i64 3];
    f32 %550 = load f32* %549;
    f32 %551 = fmul f32 0.5, f32 %550;
    f32 %552 = fadd f32 %548, f32 %551;
    f32* %553 = getelementptr &(f32* %537)[i64 4];
    f32 %554 = load f32* %553;
    f32 %555 = fmul f32 0.5, f32 %554;
    f32 %556 = fadd f32 %552, f32 %555;
    f32* %557 = getelementptr &(f32* %537)[i64 5];
    f32 %558 = load f32* %557;
    f32 %559 = fmul f32 0.5, f32 %558;
    f32 %560 = fadd f32 %556, f32 %559;
    f32* %561 = getelementptr &(f32* %537)[i64 6];
    f32 %562 = load f32* %561;
    f32 %563 = fmul f32 0.5, f32 %562;
    f32 %564 = fadd f32 %560, f32 %563;
    f32* %565 = getelementptr &(f32* %537)[i64 7];
    f32 %566 = load f32* %565;
    f32 %567 = fmul f32 0.5, f32 %566;
    f32 %568 = fadd f32 %564, f32 %567;
    f32* %569 = getelementptr &(f32* %537)[i64 8];
    f32 %570 = load f32* %569;
    f32 %571 = fmul f32 0.5, f32 %570;
    f32 %572 = fadd f32 %568, f32 %571;
    f32* %573 = getelementptr &(f32* %537)[i64 9];
    f32 %574 = load f32* %573;
    f32 %575 = fmul f32 0.5, f32 %574;
    f32 %576 = fadd f32 %572, f32 %575;
    f32* %577 = getelementptr &(f32* %537)[i64 10];
    f32 %578 = load f32* %577;
    f32 %579 = fmul f32 0.5, f32 %578;
    f32 %580 = fadd f32 %576, f32 %579;
    f32* %581 = getelementptr &(f32* %537)[i64 11];
    f32 %582 = load f32* %581;
    f32 %583 = fmul f32 0.5, f32 %582;
    f32 %584 = fadd f32 %580, f32 %583;
    f32* %585 = getelementptr &(f32* %537)[i64 12];
    f32 %586 = load f32* %585;
    f32 %587 = fmul f32 0.5, f32 %586;
    f32 %588 = fadd f32 %584, f32 %587;
    f32* %589 = getelementptr &(f32* %537)[i64 13];
    f32 %590 = load f32* %589;
    f32 %591 = fmul f32 0.5, f32 %590;
    f32 %592 = fadd f32 %588, f32 %591;
    f32* %593 = getelementptr &(f32* %537)[i64 14];
    f32 %594 = load f32* %593;
    f32 %595 = fmul f32 0.5, f32 %594;
    f32 %596 = fadd f32 %592, f32 %595;
    f32* %597 = getelementptr &(f32* %537)[i64 15];
    f32 %598 = load f32* %597;
    f32 %599 = fmul f32 0.5, f32 %598;
    f32 %600 = fadd f32 %596, f32 %599;
    store f32* %87 with f32 %600;
    ubr ^super.header5;
  ^if.then3:
    f32 %601 = fdiv f32 %530, f32 6.28319;
    i32 %602 = f2s f32 %601 to i32;
    f32 %603 = s2f i32 %602 to f32;
    f32 %604 = fmul f32 %603, f32 6.28319;
    f32 %605 = fsub f32 %530, f32 %604;
    ubr ^b17;
  ^while.body19:
    f32 %606 = phi [^super.header5, f32 %522] [^while.body19, f32 %611];
    i32 %607 = phi [^super.header5, i32 %523] [^while.body19, i32 %612];
    f32* %608 = getelementptr &([8 * f32]* %9)[i64 0][i32 %607];
    f32 %609 = load f32* %608;
    f32 %610 = fmul f32 0.5, f32 %609;
    f32 %611 = fadd f32 %606, f32 %610;
    store f32* %87 with f32 %611;
    i32 %612 = add i32 %607, i32 1;
    i1 %613 = scmp lt i32 %612, i32 %1;
    cbr i1 %613(prob = 0.97), ^while.body19, ^while.header8;
  ^b17:
    f32 %614 = phi [^while.body17, f32 %530] [^if.then3, f32 %605];
    i1 %615 = fcmp gt f32 %614, f32 3.14159;
    f32 %616 = fsub f32 %614, f32 6.28319;
    f32 %617 = select i1 %615 ? f32 %616 : f32 %614;
    i1 %618 = fcmp lt f32 %617, f32 -3.14159;
    f32 %619 = fadd f32 %617, f32 6.28319;
    f32 %620 = select i1 %618 ? f32 %619 : f32 %617;
    f32 %621 = call (f32) -> f32 @my_sin_impl(f32 %620);
    f32 %622 = fmul f32 %536, f32 %621;
    f32 %623 = fadd f32 %526, f32 %622;
    store f32* %87 with f32 %623;
    i32 %624 = add i32 %527, i32 1;
    i1 %625 = scmp lt i32 %624, i32 %1;
    cbr i1 %625(prob = 0.97), ^while.body17, ^b15;
}
