internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    [8 * [8 * f32]]* %3 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.984615), ^while.header1, ^b;
  ^b:
    f32 %6 = s2f i32 %0 to f32;
    f32 %7 = fdiv f32 3.14159, f32 %6;
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    [8 * [8 * f32]]* %10 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %11 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0];
    [8 * f32]* %12 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %2(prob = 0.984615), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i32 %4];
    ubr ^while.body;
  ^b1:
    i32 %14 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %15 = phi [^b, i32 0] [^b3, i32 %29];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    [8 * f32]* %17 = getelementptr &([8 * f32]* %11)[i32 %15];
    f32 %18 = s2f i32 %15 to f32;
    cbr i1 %16(prob = 0.984615), ^while.header3, ^b2;
  ^while.body:
    i32 %19 = phi [^prebody, i32 0] [^while.body, i32 %22];
    f32 %20 = call () -> f32 @getfloat();
    f32* %21 = getelementptr &([8 * f32]* %13)[i64 0][i32 %19];
    store f32* %21 with f32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body, ^b1;
  ^b2:
    i1 %24 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %25 = phi [^while.header2, i32 0] [^b5, i32 %45];
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body1, ^b3;
  ^while.body1:
    f32* %27 = getelementptr &([8 * f32]* %17)[i64 0][i32 %25];
    store f32* %27 with f32 0;
    f32 %28 = s2f i32 %25 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %29 = add i32 %15, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %30 = phi [^b2, i32 0] [^b6, i32 %46];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body2, ^b4;
  ^while.header5:
    i32 %32 = phi [^while.body1, i32 0] [^b7, i32 %58];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.header6, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %34 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %35 = getelementptr &([8 * [8 * f32]]* %34)[i64 0][i64 0];
    f32* %36 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0][i64 0];
    i1 %37 = icmp sgt i32 %0, i32 1;
    i1 %38 = icmp sgt i32 %0, i32 9;
    i1 %39 = icmp sgt i32 %1, i32 9;
    i32 %40 = add i32 %0, i32 -8;
    i32 %41 = add i32 %1, i32 -8;
    ubr ^while.header7;
  ^while.body2:
    [8 * f32]* %42 = getelementptr &([8 * f32]* %11)[i32 %30];
    f32* %43 = getelementptr &([8 * f32]* %42)[i64 0][i64 0];
    f32 %44 = load f32* %43;
    call (f32) -> void @putfloat(f32 %44);
    cbr i1 %24(prob = 0.984615), ^while.body3, ^b6;
  ^b5:
    i32 %45 = add i32 %25, i32 1;
    ubr ^while.header3;
  ^while.header6:
    cbr i1 %2(prob = 0.984615), ^prebody1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %46 = add i32 %30, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %47 = phi [^while.body2, i32 1] [^while.body3, i32 %50];
    call (i32) -> void @putch(i32 32);
    f32* %48 = getelementptr &([8 * f32]* %42)[i64 0][i32 %47];
    f32 %49 = load f32* %48;
    call (f32) -> void @putfloat(f32 %49);
    i32 %50 = add i32 %47, i32 1;
    i1 %51 = icmp sgt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.984615), ^while.body3, ^b6;
  ^while.header7:
    i32 %52 = phi [^b4, i32 0] [^b9, i32 %86];
    f32 %53 = s2f i32 %52 to f32;
    f32 %54 = fadd f32 %53, f32 0.5;
    f32 %55 = fmul f32 %7, f32 %54;
    i1 %56 = icmp sgt i32 %0, i32 %52;
    [8 * f32]* %57 = getelementptr &([8 * f32]* %35)[i32 %52];
    cbr i1 %56(prob = 0.984615), ^while.header8, ^while.header9;
  ^b7:
    i32 %58 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^prebody1:
    f32 %59 = s2f i32 %32 to f32;
    f32 %60 = fadd f32 %59, f32 0.5;
    f32 %61 = fmul f32 %7, f32 %60;
    f32 %62 = fmul f32 %61, f32 %18;
    f32 %63 = fadd f32 %62, f32 1.5708;
    i1 %64 = fcmp ogt f32 %63, f32 6.28319;
    i1 %65 = fcmp olt f32 %63, f32 -6.28319;
    i1 %66 = or i1 %64, i1 %65;
    [8 * f32]* %67 = getelementptr &([8 * f32]* %12)[i32 %32];
    cbr i1 %66(prob = 0.5), ^if.then, ^b8;
  ^while.header8:
    i32 %68 = phi [^while.header7, i32 0] [^b13, i32 %189];
    i1 %69 = icmp sgt i32 %1, i32 %68;
    cbr i1 %69(prob = 0.984615), ^while.body4, ^b9;
  ^while.header9:
    i32 %70 = phi [^while.header7, i32 0] [^b11, i32 %109];
    i1 %71 = icmp sgt i32 %0, i32 %70;
    cbr i1 %71(prob = 0.984615), ^while.body5, ^b10;
  ^if.then:
    f32 %72 = fdiv f32 %63, f32 6.28319;
    i32 %73 = f2s f32 %72 to i32;
    f32 %74 = s2f i32 %73 to f32;
    f32 %75 = fmul f32 %74, f32 6.28319;
    f32 %76 = fsub f32 %63, f32 %75;
    ubr ^b8;
  ^b8:
    f32 %77 = phi [^prebody1, f32 %63] [^if.then, f32 %76];
    i1 %78 = fcmp ogt f32 %77, f32 3.14159;
    f32 %79 = fsub f32 %77, f32 6.28319;
    f32 %80 = select i1 %78 ? f32 %79 : f32 %77;
    i1 %81 = fcmp olt f32 %80, f32 -3.14159;
    f32 %82 = fadd f32 %80, f32 6.28319;
    f32 %83 = select i1 %81 ? f32 %82 : f32 %80;
    f32 %84 = call (f32) -> f32 @my_sin_impl(f32 %83);
    f32 %85 = load f32* %27;
    ubr ^while.body6;
  ^b9:
    i32 %86 = add i32 %52, i32 1;
    ubr ^while.header7;
  ^while.body4:
    f32* %87 = getelementptr &([8 * f32]* %57)[i64 0][i32 %68];
    f32 %88 = load f32* %36;
    f32 %89 = fmul f32 %88, f32 0.25;
    store f32* %87 with f32 %89;
    f32 %90 = s2f i32 %68 to f32;
    f32 %91 = fadd f32 %90, f32 0.5;
    f32 %92 = fmul f32 %9, f32 %91;
    cbr i1 %37(prob = 0.984615), ^super.header, ^while.header10;
  ^while.body5:
    [8 * f32]* %93 = getelementptr &([8 * f32]* %35)[i32 %70];
    f32* %94 = getelementptr &([8 * f32]* %93)[i64 0][i64 0];
    f32 %95 = load f32* %94;
    call (f32) -> void @putfloat(f32 %95);
    cbr i1 %24(prob = 0.984615), ^while.body7, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    f32 %96 = phi [^b8, f32 %85] [^b12, f32 %131];
    i32 %97 = phi [^b8, i32 0] [^b12, i32 %132];
    f32 %98 = s2f i32 %97 to f32;
    f32 %99 = fadd f32 %98, f32 0.5;
    f32 %100 = fmul f32 %9, f32 %99;
    f32 %101 = fmul f32 %100, f32 %28;
    f32 %102 = fadd f32 %101, f32 1.5708;
    i1 %103 = fcmp ogt f32 %102, f32 6.28319;
    i1 %104 = fcmp olt f32 %102, f32 -6.28319;
    i1 %105 = or i1 %103, i1 %104;
    f32* %106 = getelementptr &([8 * f32]* %67)[i64 0][i32 %97];
    f32 %107 = load f32* %106;
    f32 %108 = fmul f32 %107, f32 %84;
    cbr i1 %105(prob = 0.5), ^if.then1, ^b12;
  ^super.header:
    cbr i1 %38(prob = 0.888889), ^prebody2, ^indirect;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %109 = add i32 %70, i32 1;
    ubr ^while.header9;
  ^while.header10:
    cbr i1 %24(prob = 0.984615), ^super.header1, ^while.header11;
  ^while.body7:
    i32 %110 = phi [^while.body5, i32 1] [^while.body7, i32 %113];
    call (i32) -> void @putch(i32 32);
    f32* %111 = getelementptr &([8 * f32]* %93)[i64 0][i32 %110];
    f32 %112 = load f32* %111;
    call (f32) -> void @putfloat(f32 %112);
    i32 %113 = add i32 %110, i32 1;
    i1 %114 = icmp sgt i32 %1, i32 %113;
    cbr i1 %114(prob = 0.984615), ^while.body7, ^b11;
  ^if.then1:
    f32 %115 = fdiv f32 %102, f32 6.28319;
    i32 %116 = f2s f32 %115 to i32;
    f32 %117 = s2f i32 %116 to f32;
    f32 %118 = fmul f32 %117, f32 6.28319;
    f32 %119 = fsub f32 %102, f32 %118;
    ubr ^b12;
  ^prebody2:
    f32 %120 = load f32* %87;
    ubr ^while.body8;
  ^indirect:
    f32 %121 = load f32* %87;
    ubr ^while.body9;
  ^b12:
    f32 %122 = phi [^while.body6, f32 %102] [^if.then1, f32 %119];
    i1 %123 = fcmp ogt f32 %122, f32 3.14159;
    f32 %124 = fsub f32 %122, f32 6.28319;
    f32 %125 = select i1 %123 ? f32 %124 : f32 %122;
    i1 %126 = fcmp olt f32 %125, f32 -3.14159;
    f32 %127 = fadd f32 %125, f32 6.28319;
    f32 %128 = select i1 %126 ? f32 %127 : f32 %125;
    f32 %129 = call (f32) -> f32 @my_sin_impl(f32 %128);
    f32 %130 = fmul f32 %108, f32 %129;
    f32 %131 = fadd f32 %96, f32 %130;
    store f32* %27 with f32 %131;
    i32 %132 = add i32 %97, i32 1;
    i1 %133 = icmp sgt i32 %1, i32 %132;
    cbr i1 %133(prob = 0.984615), ^while.body6, ^b7;
  ^super.header1:
    cbr i1 %39(prob = 0.888889), ^prebody3, ^indirect1;
  ^while.header11:
    i32 %134 = phi [^while.header10, i32 1] [^b14, i32 %226] [^while.body11, i32 1];
    i1 %135 = icmp sgt i32 %0, i32 %134;
    cbr i1 %135(prob = 0.984615), ^while.header12, ^b13;
  ^prebody3:
    f32 %136 = load f32* %87;
    ubr ^while.body10;
  ^while.body8:
    f32 %137 = phi [^prebody2, f32 %120] [^while.body8, f32 %171];
    i32 %138 = phi [^prebody2, i32 1] [^while.body8, i32 %172];
    [8 * f32]* %139 = getelementptr &([8 * f32]* %11)[i32 %138];
    f32* %140 = getelementptr &([8 * f32]* %139)[i64 0][i64 0];
    f32 %141 = load f32* %140;
    f32 %142 = fmul f32 %141, f32 0.5;
    f32 %143 = fadd f32 %137, f32 %142;
    f32* %144 = getelementptr &([8 * f32]* %139)[i64 1][i64 0];
    f32 %145 = load f32* %144;
    f32 %146 = fmul f32 %145, f32 0.5;
    f32 %147 = fadd f32 %143, f32 %146;
    f32* %148 = getelementptr &([8 * f32]* %139)[i64 2][i64 0];
    f32 %149 = load f32* %148;
    f32 %150 = fmul f32 %149, f32 0.5;
    f32 %151 = fadd f32 %147, f32 %150;
    f32* %152 = getelementptr &([8 * f32]* %139)[i64 3][i64 0];
    f32 %153 = load f32* %152;
    f32 %154 = fmul f32 %153, f32 0.5;
    f32 %155 = fadd f32 %151, f32 %154;
    f32* %156 = getelementptr &([8 * f32]* %139)[i64 4][i64 0];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %157, f32 0.5;
    f32 %159 = fadd f32 %155, f32 %158;
    f32* %160 = getelementptr &([8 * f32]* %139)[i64 5][i64 0];
    f32 %161 = load f32* %160;
    f32 %162 = fmul f32 %161, f32 0.5;
    f32 %163 = fadd f32 %159, f32 %162;
    f32* %164 = getelementptr &([8 * f32]* %139)[i64 6][i64 0];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 0.5;
    f32 %167 = fadd f32 %163, f32 %166;
    f32* %168 = getelementptr &([8 * f32]* %139)[i64 7][i64 0];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %169, f32 0.5;
    f32 %171 = fadd f32 %167, f32 %170;
    i32 %172 = add i32 %138, i32 8;
    i1 %173 = icmp sgt i32 %40, i32 %172;
    cbr i1 %173(prob = 0.888889), ^while.body8, ^while.body9;
  ^indirect1:
    f32 %174 = load f32* %87;
    ubr ^while.body11;
  ^while.body9 {scalar}:
    f32 %175 = phi [^indirect, f32 %121] [^while.body8, f32 %171] [^while.body9, f32 %181];
    i32 %176 = phi [^indirect, i32 1] [^while.body8, i32 %172] [^while.body9, i32 %182];
    [8 * f32]* %177 = getelementptr &([8 * f32]* %11)[i32 %176];
    f32* %178 = getelementptr &([8 * f32]* %177)[i64 0][i64 0];
    f32 %179 = load f32* %178;
    f32 %180 = fmul f32 %179, f32 0.5;
    f32 %181 = fadd f32 %175, f32 %180;
    store f32* %87 with f32 %181;
    i32 %182 = add i32 %176, i32 1;
    i1 %183 = icmp sgt i32 %0, i32 %182;
    cbr i1 %183(prob = 0.875), ^while.body9, ^while.header10;
  ^b13:
    f32 %184 = load f32* %87;
    f32 %185 = fadd f32 %184, f32 %184;
    f32 %186 = fdiv f32 %185, f32 %6;
    f32 %187 = fadd f32 %186, f32 %186;
    f32 %188 = fdiv f32 %187, f32 %8;
    store f32* %87 with f32 %188;
    i32 %189 = add i32 %68, i32 1;
    ubr ^while.header8;
  ^while.header12:
    cbr i1 %24(prob = 0.984615), ^prebody4, ^b14;
  ^while.body10:
    f32 %190 = phi [^prebody3, f32 %136] [^while.body10, f32 %223];
    i32 %191 = phi [^prebody3, i32 1] [^while.body10, i32 %224];
    f32* %192 = getelementptr &([8 * f32]* %11)[i64 0][i32 %191];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %193, f32 0.5;
    f32 %195 = fadd f32 %190, f32 %194;
    f32* %196 = getelementptr &(f32* %192)[i64 1];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %197, f32 0.5;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &(f32* %192)[i64 2];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 %201, f32 0.5;
    f32 %203 = fadd f32 %199, f32 %202;
    f32* %204 = getelementptr &(f32* %192)[i64 3];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %205, f32 0.5;
    f32 %207 = fadd f32 %203, f32 %206;
    f32* %208 = getelementptr &(f32* %192)[i64 4];
    f32 %209 = load f32* %208;
    f32 %210 = fmul f32 %209, f32 0.5;
    f32 %211 = fadd f32 %207, f32 %210;
    f32* %212 = getelementptr &(f32* %192)[i64 5];
    f32 %213 = load f32* %212;
    f32 %214 = fmul f32 %213, f32 0.5;
    f32 %215 = fadd f32 %211, f32 %214;
    f32* %216 = getelementptr &(f32* %192)[i64 6];
    f32 %217 = load f32* %216;
    f32 %218 = fmul f32 %217, f32 0.5;
    f32 %219 = fadd f32 %215, f32 %218;
    f32* %220 = getelementptr &(f32* %192)[i64 7];
    f32 %221 = load f32* %220;
    f32 %222 = fmul f32 %221, f32 0.5;
    f32 %223 = fadd f32 %219, f32 %222;
    i32 %224 = add i32 %191, i32 8;
    i1 %225 = icmp sgt i32 %41, i32 %224;
    cbr i1 %225(prob = 0.888889), ^while.body10, ^while.body11;
  ^b14:
    i32 %226 = add i32 %134, i32 1;
    ubr ^while.header11;
  ^while.body11 {scalar}:
    f32 %227 = phi [^indirect1, f32 %174] [^while.body10, f32 %223] [^while.body11, f32 %232];
    i32 %228 = phi [^indirect1, i32 1] [^while.body10, i32 %224] [^while.body11, i32 %233];
    f32* %229 = getelementptr &([8 * f32]* %11)[i64 0][i32 %228];
    f32 %230 = load f32* %229;
    f32 %231 = fmul f32 %230, f32 0.5;
    f32 %232 = fadd f32 %227, f32 %231;
    store f32* %87 with f32 %232;
    i32 %233 = add i32 %228, i32 1;
    i1 %234 = icmp sgt i32 %1, i32 %233;
    cbr i1 %234(prob = 0.875), ^while.body11, ^while.header11;
  ^prebody4:
    f32 %235 = s2f i32 %134 to f32;
    f32 %236 = fmul f32 %55, f32 %235;
    f32 %237 = fadd f32 %236, f32 1.5708;
    i1 %238 = fcmp ogt f32 %237, f32 6.28319;
    i1 %239 = fcmp olt f32 %237, f32 -6.28319;
    i1 %240 = or i1 %238, i1 %239;
    [8 * f32]* %241 = getelementptr &([8 * f32]* %11)[i32 %134];
    cbr i1 %240(prob = 0.5), ^if.then2, ^b15;
  ^if.then2:
    f32 %242 = fdiv f32 %237, f32 6.28319;
    i32 %243 = f2s f32 %242 to i32;
    f32 %244 = s2f i32 %243 to f32;
    f32 %245 = fmul f32 %244, f32 6.28319;
    f32 %246 = fsub f32 %237, f32 %245;
    ubr ^b15;
  ^b15:
    f32 %247 = phi [^prebody4, f32 %237] [^if.then2, f32 %246];
    i1 %248 = fcmp ogt f32 %247, f32 3.14159;
    f32 %249 = fsub f32 %247, f32 6.28319;
    f32 %250 = select i1 %248 ? f32 %249 : f32 %247;
    i1 %251 = fcmp olt f32 %250, f32 -3.14159;
    f32 %252 = fadd f32 %250, f32 6.28319;
    f32 %253 = select i1 %251 ? f32 %252 : f32 %250;
    f32 %254 = call (f32) -> f32 @my_sin_impl(f32 %253);
    f32 %255 = load f32* %87;
    ubr ^while.body12;
  ^while.body12:
    f32 %256 = phi [^b15, f32 %255] [^b16, f32 %281];
    i32 %257 = phi [^b15, i32 1] [^b16, i32 %282];
    f32 %258 = s2f i32 %257 to f32;
    f32 %259 = fmul f32 %92, f32 %258;
    f32 %260 = fadd f32 %259, f32 1.5708;
    i1 %261 = fcmp ogt f32 %260, f32 6.28319;
    i1 %262 = fcmp olt f32 %260, f32 -6.28319;
    i1 %263 = or i1 %261, i1 %262;
    f32* %264 = getelementptr &([8 * f32]* %241)[i64 0][i32 %257];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 %254;
    cbr i1 %263(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %267 = fdiv f32 %260, f32 6.28319;
    i32 %268 = f2s f32 %267 to i32;
    f32 %269 = s2f i32 %268 to f32;
    f32 %270 = fmul f32 %269, f32 6.28319;
    f32 %271 = fsub f32 %260, f32 %270;
    ubr ^b16;
  ^b16:
    f32 %272 = phi [^while.body12, f32 %260] [^if.then3, f32 %271];
    i1 %273 = fcmp ogt f32 %272, f32 3.14159;
    f32 %274 = fsub f32 %272, f32 6.28319;
    f32 %275 = select i1 %273 ? f32 %274 : f32 %272;
    i1 %276 = fcmp olt f32 %275, f32 -3.14159;
    f32 %277 = fadd f32 %275, f32 6.28319;
    f32 %278 = select i1 %276 ? f32 %277 : f32 %275;
    f32 %279 = call (f32) -> f32 @my_sin_impl(f32 %278);
    f32 %280 = fmul f32 %266, f32 %279;
    f32 %281 = fadd f32 %256, f32 %280;
    store f32* %87 with f32 %281;
    i32 %282 = add i32 %257, i32 1;
    i1 %283 = icmp sgt i32 %1, i32 %282;
    cbr i1 %283(prob = 0.984615), ^while.body12, ^b14;
}
