internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    i1 %5 = fcmp gt f32 %4, f32 0;
    f32 %6 = fneg f32 %4;
    f32 %7 = select i1 %5 ? f32 %4 : f32 %6;
    i1 %8 = fcmp le f32 %7, f32 1e-06;
    cbr i1 %8(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %9 = phi [^entry, f32 %x] [^b2, f32 %15];
    ret f32 %9;
  ^b2:
    f32 %10 = phi [^b, f32 %4] [^b3, f32 %22];
    f32 %11 = fmul f32 4, f32 %10;
    f32 %12 = fmul f32 %11, f32 %10;
    f32 %13 = fmul f32 %12, f32 %10;
    f32 %14 = fmul f32 3, f32 %10;
    f32 %15 = fsub f32 %14, f32 %13;
    ubr ^b1;
  ^b3:
    f32 %16 = fdiv f32 %4, f32 3;
    f32 %17 = call (f32) -> f32 @my_sin_impl(f32 %16);
    f32 %18 = fmul f32 4, f32 %17;
    f32 %19 = fmul f32 %18, f32 %17;
    f32 %20 = fmul f32 %19, f32 %17;
    f32 %21 = fmul f32 3, f32 %17;
    f32 %22 = fsub f32 %21, f32 %20;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %0, i32 5;
    i1 %4 = scmp gt i32 %1, i32 5;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = scmp gt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    f32 %10 = s2f i32 %0 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = scmp gt i32 %0, i32 %17;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %13)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b2;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = scmp gt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %26 = scmp gt i32 %1, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %28 = scmp gt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b3;
  ^while.body2:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %44];
    i1 %33 = scmp gt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
  ^while.header4:
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %56];
    i1 %35 = scmp gt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0][i64 0];
    i1 %39 = scmp gt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %13)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body5, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %44 = add i32 %32, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %45 = phi [^while.body3, i32 1] [^while.body5, i32 %48];
    call (i32) -> void @putch(i32 32);
    f32* %46 = getelementptr &([8 * f32]* %40)[i64 0][i32 %45];
    f32 %47 = load f32* %46;
    call (f32) -> void @putfloat(f32 %47);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp gt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b6;
  ^while.header5:
    i32 %50 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %51 = s2f i32 %50 to f32;
    f32 %52 = fadd f32 %51, f32 0.5;
    f32 %53 = fmul f32 %11, f32 %52;
    i1 %54 = scmp gt i32 %0, i32 %50;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %37)[i32 %50];
    cbr i1 %54(prob = 0.97), ^while.header6, ^while.header7;
  ^b7:
    i32 %56 = add i32 %34, i32 1;
    ubr ^while.header4;
  ^indirect1:
    f32 %57 = s2f i32 %34 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %11, f32 %58;
    f32 %60 = fmul f32 %59, f32 %20;
    f32 %61 = fadd f32 %60, f32 1.5708;
    i1 %62 = fcmp gt f32 %61, f32 6.28319;
    i1 %63 = fcmp lt f32 %61, f32 -6.28319;
    i1 %64 = or i1 %62, i1 %63;
    [8 * f32]* %65 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %64(prob = 0.5), ^if.then, ^b8;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b14, i32 %146];
    i1 %67 = scmp gt i32 %1, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b9;
  ^while.header7:
    i32 %68 = phi [^while.header5, i32 0] [^b11, i32 %104];
    i1 %69 = scmp gt i32 %0, i32 %68;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %61, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %61, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^indirect1, f32 %61] [^if.then, f32 %74];
    i1 %76 = fcmp gt f32 %75, f32 3.14159;
    f32 %77 = fsub f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    i1 %79 = fcmp lt f32 %78, f32 -3.14159;
    f32 %80 = fadd f32 %78, f32 6.28319;
    f32 %81 = select i1 %79 ? f32 %80 : f32 %78;
    f32 %82 = call (f32) -> f32 @my_sin_impl(f32 %81);
    f32 %83 = load f32* %29;
    ubr ^while.body8;
  ^b9:
    i32 %84 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32* %85 = getelementptr &([8 * f32]* %55)[i64 0][i32 %66];
    f32 %86 = load f32* %38;
    f32 %87 = fmul f32 0.25, f32 %86;
    store f32* %85 with f32 %87;
    cbr i1 %39(prob = 0.97), ^super.header, ^b12;
  ^while.body7:
    [8 * f32]* %88 = getelementptr &([8 * f32]* %37)[i32 %68];
    f32* %89 = getelementptr &([8 * f32]* %88)[i64 0][i64 0];
    f32 %90 = load f32* %89;
    call (f32) -> void @putfloat(f32 %90);
    cbr i1 %26(prob = 0.97), ^while.body9, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body8:
    f32 %91 = phi [^b8, f32 %83] [^b13, f32 %129];
    i32 %92 = phi [^b8, i32 0] [^b13, i32 %130];
    f32 %93 = s2f i32 %92 to f32;
    f32 %94 = fadd f32 %93, f32 0.5;
    f32 %95 = fmul f32 %9, f32 %94;
    f32 %96 = fmul f32 %95, f32 %30;
    f32 %97 = fadd f32 %96, f32 1.5708;
    i1 %98 = fcmp gt f32 %97, f32 6.28319;
    i1 %99 = fcmp lt f32 %97, f32 -6.28319;
    i1 %100 = or i1 %98, i1 %99;
    f32* %101 = getelementptr &([8 * f32]* %65)[i64 0][i32 %92];
    f32 %102 = load f32* %101;
    f32 %103 = fmul f32 %102, f32 %82;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b13;
  ^super.header:
    cbr i1 %3(prob = 0.89), ^indirect2, ^indirect3;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %104 = add i32 %68, i32 1;
    ubr ^while.header7;
  ^b12:
    f32 %105 = s2f i32 %66 to f32;
    f32 %106 = fadd f32 %105, f32 0.5;
    f32 %107 = fmul f32 %9, f32 %106;
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header8;
  ^while.body9:
    i32 %108 = phi [^while.body7, i32 1] [^while.body9, i32 %111];
    call (i32) -> void @putch(i32 32);
    f32* %109 = getelementptr &([8 * f32]* %88)[i64 0][i32 %108];
    f32 %110 = load f32* %109;
    call (f32) -> void @putfloat(f32 %110);
    i32 %111 = add i32 %108, i32 1;
    i1 %112 = scmp gt i32 %1, i32 %111;
    cbr i1 %112(prob = 0.97), ^while.body9, ^b11;
  ^if.then1:
    f32 %113 = fdiv f32 %97, f32 6.28319;
    i32 %114 = f2s f32 %113 to i32;
    f32 %115 = s2f i32 %114 to f32;
    f32 %116 = fmul f32 %115, f32 6.28319;
    f32 %117 = fsub f32 %97, f32 %116;
    ubr ^b13;
  ^indirect2:
    f32 %118 = load f32* %85;
    ubr ^super.header2;
  ^indirect3:
    f32 %119 = load f32* %85;
    ubr ^while.body10;
  ^b13:
    f32 %120 = phi [^while.body8, f32 %97] [^if.then1, f32 %117];
    i1 %121 = fcmp gt f32 %120, f32 3.14159;
    f32 %122 = fsub f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    i1 %124 = fcmp lt f32 %123, f32 -3.14159;
    f32 %125 = fadd f32 %123, f32 6.28319;
    f32 %126 = select i1 %124 ? f32 %125 : f32 %123;
    f32 %127 = call (f32) -> f32 @my_sin_impl(f32 %126);
    f32 %128 = fmul f32 %103, f32 %127;
    f32 %129 = fadd f32 %91, f32 %128;
    store f32* %29 with f32 %129;
    i32 %130 = add i32 %92, i32 1;
    i1 %131 = scmp gt i32 %1, i32 %130;
    cbr i1 %131(prob = 0.97), ^while.body8, ^b7;
  ^super.header1:
    cbr i1 %4(prob = 0.89), ^indirect4, ^indirect5;
  ^while.header8:
    i32 %132 = phi [^b12, i32 1] [^b15, i32 %233] [^while.body13, i32 1];
    i1 %133 = scmp gt i32 %0, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.body11, ^b14;
  ^indirect4:
    f32 %134 = load f32* %85;
    ubr ^super.header4;
  ^super.header2:
    f32 %135 = phi [^indirect2, f32 %118] [^while.body12, f32 %221];
    i32 %136 = phi [^indirect2, i32 5] [^while.body12, i32 %138];
    i32 %137 = phi [^indirect2, i32 1] [^while.body12, i32 %222];
    i32 %138 = add i32 %136, i32 16;
    i1 %139 = scmp gt i32 %0, i32 %138;
    cbr i1 %139(prob = 0.89), ^while.body12, ^super.header3;
  ^indirect5:
    f32 %140 = load f32* %85;
    ubr ^while.body13;
  ^b14:
    f32 %141 = load f32* %85;
    f32 %142 = fadd f32 %141, f32 %141;
    f32 %143 = fdiv f32 %142, f32 %10;
    f32 %144 = fadd f32 %143, f32 %143;
    f32 %145 = fdiv f32 %144, f32 %8;
    store f32* %85 with f32 %145;
    i32 %146 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^while.body10:
    f32 %147 = phi [^indirect3, f32 %119] [^while.body10, f32 %153] [^while.body16, f32 %414];
    i32 %148 = phi [^indirect3, i32 1] [^while.body10, i32 %154] [^while.body16, i32 %396];
    [8 * f32]* %149 = getelementptr &([8 * f32]* %13)[i32 %148];
    f32* %150 = getelementptr &([8 * f32]* %149)[i64 0][i64 0];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 0.5, f32 %151;
    f32 %153 = fadd f32 %147, f32 %152;
    store f32* %85 with f32 %153;
    i32 %154 = add i32 %148, i32 1;
    i1 %155 = scmp gt i32 %0, i32 %154;
    cbr i1 %155(prob = 0.97), ^while.body10, ^b12;
  ^while.body11:
    cbr i1 %26(prob = 0.97), ^indirect6, ^b15;
  ^while.body12:
    [8 * f32]* %156 = getelementptr &([8 * f32]* %13)[i32 %137];
    f32* %157 = getelementptr &([8 * f32]* %156)[i64 0][i64 0];
    f32 %158 = load f32* %157;
    f32 %159 = fmul f32 0.5, f32 %158;
    f32 %160 = fadd f32 %135, f32 %159;
    f32* %161 = getelementptr &([8 * f32]* %156)[i64 1][i64 0];
    f32 %162 = load f32* %161;
    f32 %163 = fmul f32 0.5, f32 %162;
    f32 %164 = fadd f32 %160, f32 %163;
    f32* %165 = getelementptr &([8 * f32]* %156)[i64 2][i64 0];
    f32 %166 = load f32* %165;
    f32 %167 = fmul f32 0.5, f32 %166;
    f32 %168 = fadd f32 %164, f32 %167;
    f32* %169 = getelementptr &([8 * f32]* %156)[i64 3][i64 0];
    f32 %170 = load f32* %169;
    f32 %171 = fmul f32 0.5, f32 %170;
    f32 %172 = fadd f32 %168, f32 %171;
    [8 * f32]* %173 = getelementptr &([8 * f32]* %13)[i32 %136];
    f32* %174 = getelementptr &([8 * f32]* %173)[i64 0][i64 0];
    f32 %175 = load f32* %174;
    f32 %176 = fmul f32 0.5, f32 %175;
    f32 %177 = fadd f32 %172, f32 %176;
    f32* %178 = getelementptr &([8 * f32]* %173)[i64 1][i64 0];
    f32 %179 = load f32* %178;
    f32 %180 = fmul f32 0.5, f32 %179;
    f32 %181 = fadd f32 %177, f32 %180;
    f32* %182 = getelementptr &([8 * f32]* %173)[i64 2][i64 0];
    f32 %183 = load f32* %182;
    f32 %184 = fmul f32 0.5, f32 %183;
    f32 %185 = fadd f32 %181, f32 %184;
    f32* %186 = getelementptr &([8 * f32]* %173)[i64 3][i64 0];
    f32 %187 = load f32* %186;
    f32 %188 = fmul f32 0.5, f32 %187;
    f32 %189 = fadd f32 %185, f32 %188;
    f32* %190 = getelementptr &([8 * f32]* %173)[i64 4][i64 0];
    f32 %191 = load f32* %190;
    f32 %192 = fmul f32 0.5, f32 %191;
    f32 %193 = fadd f32 %189, f32 %192;
    f32* %194 = getelementptr &([8 * f32]* %173)[i64 5][i64 0];
    f32 %195 = load f32* %194;
    f32 %196 = fmul f32 0.5, f32 %195;
    f32 %197 = fadd f32 %193, f32 %196;
    f32* %198 = getelementptr &([8 * f32]* %173)[i64 6][i64 0];
    f32 %199 = load f32* %198;
    f32 %200 = fmul f32 0.5, f32 %199;
    f32 %201 = fadd f32 %197, f32 %200;
    f32* %202 = getelementptr &([8 * f32]* %173)[i64 7][i64 0];
    f32 %203 = load f32* %202;
    f32 %204 = fmul f32 0.5, f32 %203;
    f32 %205 = fadd f32 %201, f32 %204;
    f32* %206 = getelementptr &([8 * f32]* %173)[i64 8][i64 0];
    f32 %207 = load f32* %206;
    f32 %208 = fmul f32 0.5, f32 %207;
    f32 %209 = fadd f32 %205, f32 %208;
    f32* %210 = getelementptr &([8 * f32]* %173)[i64 9][i64 0];
    f32 %211 = load f32* %210;
    f32 %212 = fmul f32 0.5, f32 %211;
    f32 %213 = fadd f32 %209, f32 %212;
    f32* %214 = getelementptr &([8 * f32]* %173)[i64 10][i64 0];
    f32 %215 = load f32* %214;
    f32 %216 = fmul f32 0.5, f32 %215;
    f32 %217 = fadd f32 %213, f32 %216;
    f32* %218 = getelementptr &([8 * f32]* %173)[i64 11][i64 0];
    f32 %219 = load f32* %218;
    f32 %220 = fmul f32 0.5, f32 %219;
    f32 %221 = fadd f32 %217, f32 %220;
    i32 %222 = add i32 %136, i32 12;
    ubr ^super.header2;
  ^super.header3:
    f32 %223 = phi [^super.header2, f32 %135] [^while.body14, f32 %314];
    i32 %224 = phi [^super.header2, i32 %136] [^while.body14, i32 %226];
    i32 %225 = phi [^super.header2, i32 %137] [^while.body14, i32 %315];
    i32 %226 = add i32 %224, i32 16;
    i1 %227 = scmp gt i32 %0, i32 %226;
    cbr i1 %227(prob = 0.89), ^while.body14, ^while.body16;
  ^super.header4:
    f32 %228 = phi [^indirect4, f32 %134] [^while.body15, f32 %379];
    i32 %229 = phi [^indirect4, i32 5] [^while.body15, i32 %231];
    i32 %230 = phi [^indirect4, i32 1] [^while.body15, i32 %380];
    i32 %231 = add i32 %229, i32 16;
    i1 %232 = scmp gt i32 %1, i32 %231;
    cbr i1 %232(prob = 0.89), ^while.body15, ^super.header5;
  ^b15:
    i32 %233 = add i32 %132, i32 1;
    ubr ^while.header8;
  ^indirect6:
    f32 %234 = s2f i32 %132 to f32;
    f32 %235 = fmul f32 %53, f32 %234;
    f32 %236 = fadd f32 %235, f32 1.5708;
    i1 %237 = fcmp gt f32 %236, f32 6.28319;
    i1 %238 = fcmp lt f32 %236, f32 -6.28319;
    i1 %239 = or i1 %237, i1 %238;
    [8 * f32]* %240 = getelementptr &([8 * f32]* %13)[i32 %132];
    cbr i1 %239(prob = 0.5), ^if.then2, ^b16;
  ^while.body13:
    f32 %241 = phi [^indirect5, f32 %140] [^while.body13, f32 %246] [^while.body18, f32 %505];
    i32 %242 = phi [^indirect5, i32 1] [^while.body13, i32 %247] [^while.body18, i32 %488];
    f32* %243 = getelementptr &([8 * f32]* %13)[i64 0][i32 %242];
    f32 %244 = load f32* %243;
    f32 %245 = fmul f32 0.5, f32 %244;
    f32 %246 = fadd f32 %241, f32 %245;
    store f32* %85 with f32 %246;
    i32 %247 = add i32 %242, i32 1;
    i1 %248 = scmp gt i32 %1, i32 %247;
    cbr i1 %248(prob = 0.97), ^while.body13, ^while.header8;
  ^while.body14:
    [8 * f32]* %249 = getelementptr &([8 * f32]* %13)[i32 %225];
    f32* %250 = getelementptr &([8 * f32]* %249)[i64 0][i64 0];
    f32 %251 = load f32* %250;
    f32 %252 = fmul f32 0.5, f32 %251;
    f32 %253 = fadd f32 %223, f32 %252;
    f32* %254 = getelementptr &([8 * f32]* %249)[i64 1][i64 0];
    f32 %255 = load f32* %254;
    f32 %256 = fmul f32 0.5, f32 %255;
    f32 %257 = fadd f32 %253, f32 %256;
    f32* %258 = getelementptr &([8 * f32]* %249)[i64 2][i64 0];
    f32 %259 = load f32* %258;
    f32 %260 = fmul f32 0.5, f32 %259;
    f32 %261 = fadd f32 %257, f32 %260;
    f32* %262 = getelementptr &([8 * f32]* %249)[i64 3][i64 0];
    f32 %263 = load f32* %262;
    f32 %264 = fmul f32 0.5, f32 %263;
    f32 %265 = fadd f32 %261, f32 %264;
    [8 * f32]* %266 = getelementptr &([8 * f32]* %13)[i32 %224];
    f32* %267 = getelementptr &([8 * f32]* %266)[i64 0][i64 0];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 0.5, f32 %268;
    f32 %270 = fadd f32 %265, f32 %269;
    f32* %271 = getelementptr &([8 * f32]* %266)[i64 1][i64 0];
    f32 %272 = load f32* %271;
    f32 %273 = fmul f32 0.5, f32 %272;
    f32 %274 = fadd f32 %270, f32 %273;
    f32* %275 = getelementptr &([8 * f32]* %266)[i64 2][i64 0];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 0.5, f32 %276;
    f32 %278 = fadd f32 %274, f32 %277;
    f32* %279 = getelementptr &([8 * f32]* %266)[i64 3][i64 0];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 0.5, f32 %280;
    f32 %282 = fadd f32 %278, f32 %281;
    f32* %283 = getelementptr &([8 * f32]* %266)[i64 4][i64 0];
    f32 %284 = load f32* %283;
    f32 %285 = fmul f32 0.5, f32 %284;
    f32 %286 = fadd f32 %282, f32 %285;
    f32* %287 = getelementptr &([8 * f32]* %266)[i64 5][i64 0];
    f32 %288 = load f32* %287;
    f32 %289 = fmul f32 0.5, f32 %288;
    f32 %290 = fadd f32 %286, f32 %289;
    f32* %291 = getelementptr &([8 * f32]* %266)[i64 6][i64 0];
    f32 %292 = load f32* %291;
    f32 %293 = fmul f32 0.5, f32 %292;
    f32 %294 = fadd f32 %290, f32 %293;
    f32* %295 = getelementptr &([8 * f32]* %266)[i64 7][i64 0];
    f32 %296 = load f32* %295;
    f32 %297 = fmul f32 0.5, f32 %296;
    f32 %298 = fadd f32 %294, f32 %297;
    f32* %299 = getelementptr &([8 * f32]* %266)[i64 8][i64 0];
    f32 %300 = load f32* %299;
    f32 %301 = fmul f32 0.5, f32 %300;
    f32 %302 = fadd f32 %298, f32 %301;
    f32* %303 = getelementptr &([8 * f32]* %266)[i64 9][i64 0];
    f32 %304 = load f32* %303;
    f32 %305 = fmul f32 0.5, f32 %304;
    f32 %306 = fadd f32 %302, f32 %305;
    f32* %307 = getelementptr &([8 * f32]* %266)[i64 10][i64 0];
    f32 %308 = load f32* %307;
    f32 %309 = fmul f32 0.5, f32 %308;
    f32 %310 = fadd f32 %306, f32 %309;
    f32* %311 = getelementptr &([8 * f32]* %266)[i64 11][i64 0];
    f32 %312 = load f32* %311;
    f32 %313 = fmul f32 0.5, f32 %312;
    f32 %314 = fadd f32 %310, f32 %313;
    i32 %315 = add i32 %224, i32 12;
    ubr ^super.header3;
  ^while.body15:
    f32* %316 = getelementptr &([8 * f32]* %13)[i64 0][i32 %230];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 0.5, f32 %317;
    f32 %319 = fadd f32 %228, f32 %318;
    f32* %320 = getelementptr &(f32* %316)[i64 1];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 0.5, f32 %321;
    f32 %323 = fadd f32 %319, f32 %322;
    f32* %324 = getelementptr &(f32* %316)[i64 2];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 0.5, f32 %325;
    f32 %327 = fadd f32 %323, f32 %326;
    f32* %328 = getelementptr &(f32* %316)[i64 3];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 0.5, f32 %329;
    f32 %331 = fadd f32 %327, f32 %330;
    f32* %332 = getelementptr &([8 * f32]* %13)[i64 0][i32 %229];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 0.5, f32 %333;
    f32 %335 = fadd f32 %331, f32 %334;
    f32* %336 = getelementptr &(f32* %332)[i64 1];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 0.5, f32 %337;
    f32 %339 = fadd f32 %335, f32 %338;
    f32* %340 = getelementptr &(f32* %332)[i64 2];
    f32 %341 = load f32* %340;
    f32 %342 = fmul f32 0.5, f32 %341;
    f32 %343 = fadd f32 %339, f32 %342;
    f32* %344 = getelementptr &(f32* %332)[i64 3];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 0.5, f32 %345;
    f32 %347 = fadd f32 %343, f32 %346;
    f32* %348 = getelementptr &(f32* %332)[i64 4];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 0.5, f32 %349;
    f32 %351 = fadd f32 %347, f32 %350;
    f32* %352 = getelementptr &(f32* %332)[i64 5];
    f32 %353 = load f32* %352;
    f32 %354 = fmul f32 0.5, f32 %353;
    f32 %355 = fadd f32 %351, f32 %354;
    f32* %356 = getelementptr &(f32* %332)[i64 6];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 0.5, f32 %357;
    f32 %359 = fadd f32 %355, f32 %358;
    f32* %360 = getelementptr &(f32* %332)[i64 7];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 0.5, f32 %361;
    f32 %363 = fadd f32 %359, f32 %362;
    f32* %364 = getelementptr &(f32* %332)[i64 8];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 0.5, f32 %365;
    f32 %367 = fadd f32 %363, f32 %366;
    f32* %368 = getelementptr &(f32* %332)[i64 9];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 0.5, f32 %369;
    f32 %371 = fadd f32 %367, f32 %370;
    f32* %372 = getelementptr &(f32* %332)[i64 10];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 0.5, f32 %373;
    f32 %375 = fadd f32 %371, f32 %374;
    f32* %376 = getelementptr &(f32* %332)[i64 11];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 0.5, f32 %377;
    f32 %379 = fadd f32 %375, f32 %378;
    i32 %380 = add i32 %229, i32 12;
    ubr ^super.header4;
  ^if.then2:
    f32 %381 = fdiv f32 %236, f32 6.28319;
    i32 %382 = f2s f32 %381 to i32;
    f32 %383 = s2f i32 %382 to f32;
    f32 %384 = fmul f32 %383, f32 6.28319;
    f32 %385 = fsub f32 %236, f32 %384;
    ubr ^b16;
  ^b16:
    f32 %386 = phi [^indirect6, f32 %236] [^if.then2, f32 %385];
    i1 %387 = fcmp gt f32 %386, f32 3.14159;
    f32 %388 = fsub f32 %386, f32 6.28319;
    f32 %389 = select i1 %387 ? f32 %388 : f32 %386;
    i1 %390 = fcmp lt f32 %389, f32 -3.14159;
    f32 %391 = fadd f32 %389, f32 6.28319;
    f32 %392 = select i1 %390 ? f32 %391 : f32 %389;
    f32 %393 = call (f32) -> f32 @my_sin_impl(f32 %392);
    f32 %394 = load f32* %85;
    ubr ^while.body19;
  ^while.body16:
    f32 %395 = phi [^super.header3, f32 %223] [^while.body16, f32 %414];
    i32 %396 = phi [^super.header3, i32 %224] [^while.body16, i32 %415];
    i32 %397 = phi [^super.header3, i32 %225] [^while.body16, i32 %396];
    [8 * f32]* %398 = getelementptr &([8 * f32]* %13)[i32 %397];
    f32* %399 = getelementptr &([8 * f32]* %398)[i64 0][i64 0];
    f32 %400 = load f32* %399;
    f32 %401 = fmul f32 0.5, f32 %400;
    f32 %402 = fadd f32 %395, f32 %401;
    f32* %403 = getelementptr &([8 * f32]* %398)[i64 1][i64 0];
    f32 %404 = load f32* %403;
    f32 %405 = fmul f32 0.5, f32 %404;
    f32 %406 = fadd f32 %402, f32 %405;
    f32* %407 = getelementptr &([8 * f32]* %398)[i64 2][i64 0];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 0.5, f32 %408;
    f32 %410 = fadd f32 %406, f32 %409;
    f32* %411 = getelementptr &([8 * f32]* %398)[i64 3][i64 0];
    f32 %412 = load f32* %411;
    f32 %413 = fmul f32 0.5, f32 %412;
    f32 %414 = fadd f32 %410, f32 %413;
    i32 %415 = add i32 %396, i32 4;
    i1 %416 = scmp gt i32 %0, i32 %415;
    cbr i1 %416(prob = 0.89), ^while.body16, ^while.body10;
  ^super.header5:
    f32 %417 = phi [^super.header4, f32 %228] [^while.body17, f32 %485];
    i32 %418 = phi [^super.header4, i32 %229] [^while.body17, i32 %420];
    i32 %419 = phi [^super.header4, i32 %230] [^while.body17, i32 %486];
    i32 %420 = add i32 %418, i32 16;
    i1 %421 = scmp gt i32 %1, i32 %420;
    cbr i1 %421(prob = 0.89), ^while.body17, ^while.body18;
  ^while.body17:
    f32* %422 = getelementptr &([8 * f32]* %13)[i64 0][i32 %419];
    f32 %423 = load f32* %422;
    f32 %424 = fmul f32 0.5, f32 %423;
    f32 %425 = fadd f32 %417, f32 %424;
    f32* %426 = getelementptr &(f32* %422)[i64 1];
    f32 %427 = load f32* %426;
    f32 %428 = fmul f32 0.5, f32 %427;
    f32 %429 = fadd f32 %425, f32 %428;
    f32* %430 = getelementptr &(f32* %422)[i64 2];
    f32 %431 = load f32* %430;
    f32 %432 = fmul f32 0.5, f32 %431;
    f32 %433 = fadd f32 %429, f32 %432;
    f32* %434 = getelementptr &(f32* %422)[i64 3];
    f32 %435 = load f32* %434;
    f32 %436 = fmul f32 0.5, f32 %435;
    f32 %437 = fadd f32 %433, f32 %436;
    f32* %438 = getelementptr &([8 * f32]* %13)[i64 0][i32 %418];
    f32 %439 = load f32* %438;
    f32 %440 = fmul f32 0.5, f32 %439;
    f32 %441 = fadd f32 %437, f32 %440;
    f32* %442 = getelementptr &(f32* %438)[i64 1];
    f32 %443 = load f32* %442;
    f32 %444 = fmul f32 0.5, f32 %443;
    f32 %445 = fadd f32 %441, f32 %444;
    f32* %446 = getelementptr &(f32* %438)[i64 2];
    f32 %447 = load f32* %446;
    f32 %448 = fmul f32 0.5, f32 %447;
    f32 %449 = fadd f32 %445, f32 %448;
    f32* %450 = getelementptr &(f32* %438)[i64 3];
    f32 %451 = load f32* %450;
    f32 %452 = fmul f32 0.5, f32 %451;
    f32 %453 = fadd f32 %449, f32 %452;
    f32* %454 = getelementptr &(f32* %438)[i64 4];
    f32 %455 = load f32* %454;
    f32 %456 = fmul f32 0.5, f32 %455;
    f32 %457 = fadd f32 %453, f32 %456;
    f32* %458 = getelementptr &(f32* %438)[i64 5];
    f32 %459 = load f32* %458;
    f32 %460 = fmul f32 0.5, f32 %459;
    f32 %461 = fadd f32 %457, f32 %460;
    f32* %462 = getelementptr &(f32* %438)[i64 6];
    f32 %463 = load f32* %462;
    f32 %464 = fmul f32 0.5, f32 %463;
    f32 %465 = fadd f32 %461, f32 %464;
    f32* %466 = getelementptr &(f32* %438)[i64 7];
    f32 %467 = load f32* %466;
    f32 %468 = fmul f32 0.5, f32 %467;
    f32 %469 = fadd f32 %465, f32 %468;
    f32* %470 = getelementptr &(f32* %438)[i64 8];
    f32 %471 = load f32* %470;
    f32 %472 = fmul f32 0.5, f32 %471;
    f32 %473 = fadd f32 %469, f32 %472;
    f32* %474 = getelementptr &(f32* %438)[i64 9];
    f32 %475 = load f32* %474;
    f32 %476 = fmul f32 0.5, f32 %475;
    f32 %477 = fadd f32 %473, f32 %476;
    f32* %478 = getelementptr &(f32* %438)[i64 10];
    f32 %479 = load f32* %478;
    f32 %480 = fmul f32 0.5, f32 %479;
    f32 %481 = fadd f32 %477, f32 %480;
    f32* %482 = getelementptr &(f32* %438)[i64 11];
    f32 %483 = load f32* %482;
    f32 %484 = fmul f32 0.5, f32 %483;
    f32 %485 = fadd f32 %481, f32 %484;
    i32 %486 = add i32 %418, i32 12;
    ubr ^super.header5;
  ^while.body18:
    f32 %487 = phi [^super.header5, f32 %417] [^while.body18, f32 %505];
    i32 %488 = phi [^super.header5, i32 %418] [^while.body18, i32 %506];
    i32 %489 = phi [^super.header5, i32 %419] [^while.body18, i32 %488];
    f32* %490 = getelementptr &([8 * f32]* %13)[i64 0][i32 %489];
    f32 %491 = load f32* %490;
    f32 %492 = fmul f32 0.5, f32 %491;
    f32 %493 = fadd f32 %487, f32 %492;
    f32* %494 = getelementptr &(f32* %490)[i64 1];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 0.5, f32 %495;
    f32 %497 = fadd f32 %493, f32 %496;
    f32* %498 = getelementptr &(f32* %490)[i64 2];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 0.5, f32 %499;
    f32 %501 = fadd f32 %497, f32 %500;
    f32* %502 = getelementptr &(f32* %490)[i64 3];
    f32 %503 = load f32* %502;
    f32 %504 = fmul f32 0.5, f32 %503;
    f32 %505 = fadd f32 %501, f32 %504;
    i32 %506 = add i32 %488, i32 4;
    i1 %507 = scmp gt i32 %1, i32 %506;
    cbr i1 %507(prob = 0.89), ^while.body18, ^while.body13;
  ^while.body19:
    f32 %508 = phi [^b16, f32 %394] [^b17, f32 %533];
    i32 %509 = phi [^b16, i32 1] [^b17, i32 %534];
    f32 %510 = s2f i32 %509 to f32;
    f32 %511 = fmul f32 %107, f32 %510;
    f32 %512 = fadd f32 %511, f32 1.5708;
    i1 %513 = fcmp gt f32 %512, f32 6.28319;
    i1 %514 = fcmp lt f32 %512, f32 -6.28319;
    i1 %515 = or i1 %513, i1 %514;
    f32* %516 = getelementptr &([8 * f32]* %240)[i64 0][i32 %509];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 %517, f32 %393;
    cbr i1 %515(prob = 0.5), ^if.then3, ^b17;
  ^if.then3:
    f32 %519 = fdiv f32 %512, f32 6.28319;
    i32 %520 = f2s f32 %519 to i32;
    f32 %521 = s2f i32 %520 to f32;
    f32 %522 = fmul f32 %521, f32 6.28319;
    f32 %523 = fsub f32 %512, f32 %522;
    ubr ^b17;
  ^b17:
    f32 %524 = phi [^while.body19, f32 %512] [^if.then3, f32 %523];
    i1 %525 = fcmp gt f32 %524, f32 3.14159;
    f32 %526 = fsub f32 %524, f32 6.28319;
    f32 %527 = select i1 %525 ? f32 %526 : f32 %524;
    i1 %528 = fcmp lt f32 %527, f32 -3.14159;
    f32 %529 = fadd f32 %527, f32 6.28319;
    f32 %530 = select i1 %528 ? f32 %529 : f32 %527;
    f32 %531 = call (f32) -> f32 @my_sin_impl(f32 %530);
    f32 %532 = fmul f32 %518, f32 %531;
    f32 %533 = fadd f32 %508, f32 %532;
    store f32* %85 with f32 %533;
    i32 %534 = add i32 %509, i32 1;
    i1 %535 = scmp gt i32 %1, i32 %534;
    cbr i1 %535(prob = 0.97), ^while.body19, ^b15;
}
