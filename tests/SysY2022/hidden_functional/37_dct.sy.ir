internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    [8 * [8 * f32]]* %3 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.992248), ^while.header1, ^b;
  ^b:
    f32 %6 = s2f i32 %0 to f32;
    f32 %7 = fdiv f32 3.14159, f32 %6;
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    [8 * [8 * f32]]* %10 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %11 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0];
    [8 * f32]* %12 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %2(prob = 0.992248), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i32 %4];
    ubr ^while.body;
  ^b1:
    i32 %14 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %15 = phi [^b, i32 0] [^b3, i32 %29];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    cbr i1 %16(prob = 0.992248), ^while.header3, ^b2;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body, i32 %20];
    f32 %18 = call () -> f32 @getfloat();
    f32* %19 = getelementptr &([8 * f32]* %13)[i64 0][i32 %17];
    store f32* %19 with f32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %1, i32 %20;
    cbr i1 %21(prob = 0.992248), ^while.body, ^b1;
  ^b2:
    i1 %22 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %23 = phi [^while.header2, i32 0] [^b5, i32 %41];
    i1 %24 = icmp sgt i32 %1, i32 %23;
    [8 * f32]* %25 = getelementptr &([8 * f32]* %11)[i32 %15];
    cbr i1 %24(prob = 0.992248), ^while.body1, ^b3;
  ^while.body1:
    f32* %26 = getelementptr &([8 * f32]* %25)[i64 0][i32 %23];
    store f32* %26 with f32 0;
    f32 %27 = s2f i32 %23 to f32;
    f32 %28 = s2f i32 %15 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %29 = add i32 %15, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %30 = phi [^b2, i32 0] [^b6, i32 %42];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    cbr i1 %31(prob = 0.992248), ^while.body2, ^b4;
  ^while.header5:
    i32 %32 = phi [^while.body1, i32 0] [^b7, i32 %54];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.992248), ^while.header6, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %34 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %35 = getelementptr &([8 * [8 * f32]]* %34)[i64 0][i64 0];
    f32* %36 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0][i64 0];
    i1 %37 = icmp sgt i32 %0, i32 1;
    ubr ^while.header7;
  ^while.body2:
    [8 * f32]* %38 = getelementptr &([8 * f32]* %11)[i32 %30];
    f32* %39 = getelementptr &([8 * f32]* %38)[i64 0][i64 0];
    f32 %40 = load f32* %39;
    call (f32) -> void @putfloat(f32 %40);
    cbr i1 %22(prob = 0.992248), ^while.body3, ^b6;
  ^b5:
    i32 %41 = add i32 %23, i32 1;
    ubr ^while.header3;
  ^while.header6:
    cbr i1 %2(prob = 0.992248), ^prebody1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %42 = add i32 %30, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %43 = phi [^while.body2, i32 1] [^while.body3, i32 %46];
    call (i32) -> void @putch(i32 32);
    f32* %44 = getelementptr &([8 * f32]* %38)[i64 0][i32 %43];
    f32 %45 = load f32* %44;
    call (f32) -> void @putfloat(f32 %45);
    i32 %46 = add i32 %43, i32 1;
    i1 %47 = icmp sgt i32 %1, i32 %46;
    cbr i1 %47(prob = 0.992248), ^while.body3, ^b6;
  ^while.header7:
    i32 %48 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %49 = s2f i32 %48 to f32;
    f32 %50 = fadd f32 %49, f32 0.5;
    f32 %51 = fmul f32 %7, f32 %50;
    i1 %52 = icmp sgt i32 %0, i32 %48;
    [8 * f32]* %53 = getelementptr &([8 * f32]* %35)[i32 %48];
    cbr i1 %52(prob = 0.992248), ^while.header8, ^while.header9;
  ^b7:
    i32 %54 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^prebody1:
    f32 %55 = s2f i32 %32 to f32;
    f32 %56 = fadd f32 %55, f32 0.5;
    f32 %57 = fmul f32 %7, f32 %56;
    f32 %58 = fmul f32 %57, f32 %28;
    f32 %59 = fadd f32 %58, f32 1.5708;
    i1 %60 = fcmp ogt f32 %59, f32 6.28319;
    i1 %61 = fcmp olt f32 %59, f32 -6.28319;
    i1 %62 = or i1 %60, i1 %61;
    [8 * f32]* %63 = getelementptr &([8 * f32]* %12)[i32 %32];
    cbr i1 %62(prob = 0.5), ^if.then, ^b8;
  ^while.header8:
    i32 %64 = phi [^while.header7, i32 0] [^b13, i32 %188];
    i1 %65 = icmp sgt i32 %1, i32 %64;
    f32 %66 = s2f i32 %64 to f32;
    f32 %67 = fadd f32 %66, f32 0.5;
    cbr i1 %65(prob = 0.992248), ^while.body4, ^b9;
  ^while.header9:
    i32 %68 = phi [^while.header7, i32 0] [^b11, i32 %106];
    i1 %69 = icmp sgt i32 %0, i32 %68;
    cbr i1 %69(prob = 0.992248), ^while.body5, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %59, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %59, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^prebody1, f32 %59] [^if.then, f32 %74];
    i1 %76 = fcmp ogt f32 %75, f32 3.14159;
    f32 %77 = fsub f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    i1 %79 = fcmp olt f32 %78, f32 -3.14159;
    f32 %80 = fadd f32 %78, f32 6.28319;
    f32 %81 = select i1 %79 ? f32 %80 : f32 %78;
    f32 %82 = call (f32) -> f32 @my_sin_impl(f32 %81);
    f32 %83 = load f32* %26;
    ubr ^while.body6;
  ^b9:
    i32 %84 = add i32 %48, i32 1;
    ubr ^while.header7;
  ^while.body4:
    f32* %85 = getelementptr &([8 * f32]* %53)[i64 0][i32 %64];
    f32 %86 = load f32* %36;
    f32 %87 = fmul f32 %86, f32 0.25;
    store f32* %85 with f32 %87;
    f32 %88 = fmul f32 %9, f32 %67;
    cbr i1 %37(prob = 0.992248), ^super.header, ^while.header10;
  ^while.body5:
    [8 * f32]* %89 = getelementptr &([8 * f32]* %35)[i32 %68];
    f32* %90 = getelementptr &([8 * f32]* %89)[i64 0][i64 0];
    f32 %91 = load f32* %90;
    call (f32) -> void @putfloat(f32 %91);
    cbr i1 %22(prob = 0.992248), ^while.body7, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    f32 %92 = phi [^b8, f32 %83] [^b12, f32 %128];
    i32 %93 = phi [^b8, i32 0] [^b12, i32 %129];
    f32 %94 = s2f i32 %93 to f32;
    f32 %95 = fadd f32 %94, f32 0.5;
    f32 %96 = fmul f32 %9, f32 %95;
    f32 %97 = fmul f32 %96, f32 %27;
    f32 %98 = fadd f32 %97, f32 1.5708;
    i1 %99 = fcmp ogt f32 %98, f32 6.28319;
    i1 %100 = fcmp olt f32 %98, f32 -6.28319;
    i1 %101 = or i1 %99, i1 %100;
    f32* %102 = getelementptr &([8 * f32]* %63)[i64 0][i32 %93];
    f32 %103 = load f32* %102;
    f32 %104 = fmul f32 %103, f32 %82;
    cbr i1 %101(prob = 0.5), ^if.then1, ^b12;
  ^super.header:
    i1 %105 = icmp sgt i32 %0, i32 9;
    cbr i1 %105(prob = 0.941176), ^indirect, ^indirect1;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %106 = add i32 %68, i32 1;
    ubr ^while.header9;
  ^while.header10:
    cbr i1 %22(prob = 0.992248), ^super.header1, ^while.header11;
  ^while.body7:
    i32 %107 = phi [^while.body5, i32 1] [^while.body7, i32 %110];
    call (i32) -> void @putch(i32 32);
    f32* %108 = getelementptr &([8 * f32]* %89)[i64 0][i32 %107];
    f32 %109 = load f32* %108;
    call (f32) -> void @putfloat(f32 %109);
    i32 %110 = add i32 %107, i32 1;
    i1 %111 = icmp sgt i32 %1, i32 %110;
    cbr i1 %111(prob = 0.992248), ^while.body7, ^b11;
  ^if.then1:
    f32 %112 = fdiv f32 %98, f32 6.28319;
    i32 %113 = f2s f32 %112 to i32;
    f32 %114 = s2f i32 %113 to f32;
    f32 %115 = fmul f32 %114, f32 6.28319;
    f32 %116 = fsub f32 %98, f32 %115;
    ubr ^b12;
  ^indirect:
    f32 %117 = load f32* %85;
    ubr ^while.body8;
  ^indirect1:
    f32 %118 = load f32* %85;
    ubr ^while.body9;
  ^b12:
    f32 %119 = phi [^while.body6, f32 %98] [^if.then1, f32 %116];
    i1 %120 = fcmp ogt f32 %119, f32 3.14159;
    f32 %121 = fsub f32 %119, f32 6.28319;
    f32 %122 = select i1 %120 ? f32 %121 : f32 %119;
    i1 %123 = fcmp olt f32 %122, f32 -3.14159;
    f32 %124 = fadd f32 %122, f32 6.28319;
    f32 %125 = select i1 %123 ? f32 %124 : f32 %122;
    f32 %126 = call (f32) -> f32 @my_sin_impl(f32 %125);
    f32 %127 = fmul f32 %104, f32 %126;
    f32 %128 = fadd f32 %92, f32 %127;
    store f32* %26 with f32 %128;
    i32 %129 = add i32 %93, i32 1;
    i1 %130 = icmp sgt i32 %1, i32 %129;
    cbr i1 %130(prob = 0.992248), ^while.body6, ^b7;
  ^super.header1:
    i1 %131 = icmp sgt i32 %1, i32 9;
    cbr i1 %131(prob = 0.941176), ^indirect2, ^indirect3;
  ^while.header11:
    i32 %132 = phi [^while.header10, i32 1] [^b14, i32 %226] [^while.body11, i32 1];
    i1 %133 = icmp sgt i32 %0, i32 %132;
    cbr i1 %133(prob = 0.992248), ^while.header12, ^b13;
  ^indirect2:
    f32 %134 = load f32* %85;
    ubr ^while.body10;
  ^while.body8:
    f32 %135 = phi [^indirect, f32 %117] [^while.body8, f32 %169];
    i32 %136 = phi [^indirect, i32 1] [^while.body8, i32 %170];
    [8 * f32]* %137 = getelementptr &([8 * f32]* %11)[i32 %136];
    f32* %138 = getelementptr &([8 * f32]* %137)[i64 0][i64 0];
    f32 %139 = load f32* %138;
    f32 %140 = fmul f32 %139, f32 0.5;
    f32 %141 = fadd f32 %135, f32 %140;
    f32* %142 = getelementptr &([8 * f32]* %137)[i64 1][i64 0];
    f32 %143 = load f32* %142;
    f32 %144 = fmul f32 %143, f32 0.5;
    f32 %145 = fadd f32 %141, f32 %144;
    f32* %146 = getelementptr &([8 * f32]* %137)[i64 2][i64 0];
    f32 %147 = load f32* %146;
    f32 %148 = fmul f32 %147, f32 0.5;
    f32 %149 = fadd f32 %145, f32 %148;
    f32* %150 = getelementptr &([8 * f32]* %137)[i64 3][i64 0];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 %151, f32 0.5;
    f32 %153 = fadd f32 %149, f32 %152;
    f32* %154 = getelementptr &([8 * f32]* %137)[i64 4][i64 0];
    f32 %155 = load f32* %154;
    f32 %156 = fmul f32 %155, f32 0.5;
    f32 %157 = fadd f32 %153, f32 %156;
    f32* %158 = getelementptr &([8 * f32]* %137)[i64 5][i64 0];
    f32 %159 = load f32* %158;
    f32 %160 = fmul f32 %159, f32 0.5;
    f32 %161 = fadd f32 %157, f32 %160;
    f32* %162 = getelementptr &([8 * f32]* %137)[i64 6][i64 0];
    f32 %163 = load f32* %162;
    f32 %164 = fmul f32 %163, f32 0.5;
    f32 %165 = fadd f32 %161, f32 %164;
    f32* %166 = getelementptr &([8 * f32]* %137)[i64 7][i64 0];
    f32 %167 = load f32* %166;
    f32 %168 = fmul f32 %167, f32 0.5;
    f32 %169 = fadd f32 %165, f32 %168;
    i32 %170 = add i32 %136, i32 8;
    i32 %171 = add i32 %0, i32 -8;
    i1 %172 = icmp slt i32 %170, i32 %171;
    cbr i1 %172(prob = 0.941176), ^while.body8, ^while.body9;
  ^indirect3:
    f32 %173 = load f32* %85;
    ubr ^while.body11;
  ^while.body9 {scalar}:
    f32 %174 = phi [^indirect1, f32 %118] [^while.body8, f32 %169] [^while.body9, f32 %180];
    i32 %175 = phi [^indirect1, i32 1] [^while.body8, i32 %170] [^while.body9, i32 %181];
    [8 * f32]* %176 = getelementptr &([8 * f32]* %11)[i32 %175];
    f32* %177 = getelementptr &([8 * f32]* %176)[i64 0][i64 0];
    f32 %178 = load f32* %177;
    f32 %179 = fmul f32 %178, f32 0.5;
    f32 %180 = fadd f32 %174, f32 %179;
    store f32* %85 with f32 %180;
    i32 %181 = add i32 %175, i32 1;
    i1 %182 = icmp sgt i32 %0, i32 %181;
    cbr i1 %182(prob = 0.875), ^while.body9, ^while.header10;
  ^b13:
    f32 %183 = load f32* %85;
    f32 %184 = fadd f32 %183, f32 %183;
    f32 %185 = fdiv f32 %184, f32 %6;
    f32 %186 = fadd f32 %185, f32 %185;
    f32 %187 = fdiv f32 %186, f32 %8;
    store f32* %85 with f32 %187;
    i32 %188 = add i32 %64, i32 1;
    ubr ^while.header8;
  ^while.header12:
    cbr i1 %22(prob = 0.992248), ^prebody2, ^b14;
  ^while.body10:
    f32 %189 = phi [^indirect2, f32 %134] [^while.body10, f32 %222];
    i32 %190 = phi [^indirect2, i32 1] [^while.body10, i32 %223];
    f32* %191 = getelementptr &([8 * f32]* %11)[i64 0][i32 %190];
    f32 %192 = load f32* %191;
    f32 %193 = fmul f32 %192, f32 0.5;
    f32 %194 = fadd f32 %189, f32 %193;
    f32* %195 = getelementptr &(f32* %191)[i64 1];
    f32 %196 = load f32* %195;
    f32 %197 = fmul f32 %196, f32 0.5;
    f32 %198 = fadd f32 %194, f32 %197;
    f32* %199 = getelementptr &(f32* %191)[i64 2];
    f32 %200 = load f32* %199;
    f32 %201 = fmul f32 %200, f32 0.5;
    f32 %202 = fadd f32 %198, f32 %201;
    f32* %203 = getelementptr &(f32* %191)[i64 3];
    f32 %204 = load f32* %203;
    f32 %205 = fmul f32 %204, f32 0.5;
    f32 %206 = fadd f32 %202, f32 %205;
    f32* %207 = getelementptr &(f32* %191)[i64 4];
    f32 %208 = load f32* %207;
    f32 %209 = fmul f32 %208, f32 0.5;
    f32 %210 = fadd f32 %206, f32 %209;
    f32* %211 = getelementptr &(f32* %191)[i64 5];
    f32 %212 = load f32* %211;
    f32 %213 = fmul f32 %212, f32 0.5;
    f32 %214 = fadd f32 %210, f32 %213;
    f32* %215 = getelementptr &(f32* %191)[i64 6];
    f32 %216 = load f32* %215;
    f32 %217 = fmul f32 %216, f32 0.5;
    f32 %218 = fadd f32 %214, f32 %217;
    f32* %219 = getelementptr &(f32* %191)[i64 7];
    f32 %220 = load f32* %219;
    f32 %221 = fmul f32 %220, f32 0.5;
    f32 %222 = fadd f32 %218, f32 %221;
    i32 %223 = add i32 %190, i32 8;
    i32 %224 = add i32 %1, i32 -8;
    i1 %225 = icmp slt i32 %223, i32 %224;
    cbr i1 %225(prob = 0.941176), ^while.body10, ^while.body11;
  ^b14:
    i32 %226 = add i32 %132, i32 1;
    ubr ^while.header11;
  ^while.body11 {scalar}:
    f32 %227 = phi [^indirect3, f32 %173] [^while.body10, f32 %222] [^while.body11, f32 %232];
    i32 %228 = phi [^indirect3, i32 1] [^while.body10, i32 %223] [^while.body11, i32 %233];
    f32* %229 = getelementptr &([8 * f32]* %11)[i64 0][i32 %228];
    f32 %230 = load f32* %229;
    f32 %231 = fmul f32 %230, f32 0.5;
    f32 %232 = fadd f32 %227, f32 %231;
    store f32* %85 with f32 %232;
    i32 %233 = add i32 %228, i32 1;
    i1 %234 = icmp sgt i32 %1, i32 %233;
    cbr i1 %234(prob = 0.875), ^while.body11, ^while.header11;
  ^prebody2:
    f32 %235 = s2f i32 %132 to f32;
    f32 %236 = fmul f32 %51, f32 %235;
    f32 %237 = fadd f32 %236, f32 1.5708;
    i1 %238 = fcmp ogt f32 %237, f32 6.28319;
    i1 %239 = fcmp olt f32 %237, f32 -6.28319;
    i1 %240 = or i1 %238, i1 %239;
    [8 * f32]* %241 = getelementptr &([8 * f32]* %11)[i32 %132];
    cbr i1 %240(prob = 0.5), ^if.then2, ^b15;
  ^if.then2:
    f32 %242 = fdiv f32 %237, f32 6.28319;
    i32 %243 = f2s f32 %242 to i32;
    f32 %244 = s2f i32 %243 to f32;
    f32 %245 = fmul f32 %244, f32 6.28319;
    f32 %246 = fsub f32 %237, f32 %245;
    ubr ^b15;
  ^b15:
    f32 %247 = phi [^prebody2, f32 %237] [^if.then2, f32 %246];
    i1 %248 = fcmp ogt f32 %247, f32 3.14159;
    f32 %249 = fsub f32 %247, f32 6.28319;
    f32 %250 = select i1 %248 ? f32 %249 : f32 %247;
    i1 %251 = fcmp olt f32 %250, f32 -3.14159;
    f32 %252 = fadd f32 %250, f32 6.28319;
    f32 %253 = select i1 %251 ? f32 %252 : f32 %250;
    f32 %254 = call (f32) -> f32 @my_sin_impl(f32 %253);
    f32 %255 = load f32* %85;
    ubr ^while.body12;
  ^while.body12:
    f32 %256 = phi [^b15, f32 %255] [^b16, f32 %281];
    i32 %257 = phi [^b15, i32 1] [^b16, i32 %282];
    f32 %258 = s2f i32 %257 to f32;
    f32 %259 = fmul f32 %88, f32 %258;
    f32 %260 = fadd f32 %259, f32 1.5708;
    i1 %261 = fcmp ogt f32 %260, f32 6.28319;
    i1 %262 = fcmp olt f32 %260, f32 -6.28319;
    i1 %263 = or i1 %261, i1 %262;
    f32* %264 = getelementptr &([8 * f32]* %241)[i64 0][i32 %257];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 %254;
    cbr i1 %263(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %267 = fdiv f32 %260, f32 6.28319;
    i32 %268 = f2s f32 %267 to i32;
    f32 %269 = s2f i32 %268 to f32;
    f32 %270 = fmul f32 %269, f32 6.28319;
    f32 %271 = fsub f32 %260, f32 %270;
    ubr ^b16;
  ^b16:
    f32 %272 = phi [^while.body12, f32 %260] [^if.then3, f32 %271];
    i1 %273 = fcmp ogt f32 %272, f32 3.14159;
    f32 %274 = fsub f32 %272, f32 6.28319;
    f32 %275 = select i1 %273 ? f32 %274 : f32 %272;
    i1 %276 = fcmp olt f32 %275, f32 -3.14159;
    f32 %277 = fadd f32 %275, f32 6.28319;
    f32 %278 = select i1 %276 ? f32 %277 : f32 %275;
    f32 %279 = call (f32) -> f32 @my_sin_impl(f32 %278);
    f32 %280 = fmul f32 %266, f32 %279;
    f32 %281 = fadd f32 %256, f32 %280;
    store f32* %85 with f32 %281;
    i32 %282 = add i32 %257, i32 1;
    i1 %283 = icmp sgt i32 %1, i32 %282;
    cbr i1 %283(prob = 0.992248), ^while.body12, ^b14;
}
