internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = fcmp gt f32 %x, f32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    f32 %4 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %5 = phi [^entry, f32 %x] [^b, f32 %4];
    i1 %6 = fcmp le f32 %5, f32 1e-06;
    cbr i1 %6(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %7 = fdiv f32 %x, f32 3;
    f32 %8 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %7, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2);
    f32 %9 = fmul f32 3, f32 %8;
    f32 %10 = fmul f32 4, f32 %8;
    f32 %11 = fmul f32 %10, f32 %8;
    f32 %12 = fmul f32 %11, f32 %8;
    f32 %13 = fsub f32 %9, f32 %12;
    ubr ^b3;
^b3:
    f32 %14 = phi [^b1, f32 %x] [^b2, f32 %13];
    ret f32 %14;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    store f32* %1 with f32 0;
    store f32* %4 with f32 0;
    store f32* %7 with f32 0;
    store f32* %10 with f32 0;
    store f32* %13 with f32 0;
    store f32* %16 with f32 0;
    store f32* %19 with f32 0;
    store f32* %22 with f32 0;
    store f32* %25 with f32 0;
    store f32* %28 with f32 0;
    store f32* %31 with f32 0;
    store f32* %34 with f32 0;
    store f32* %37 with f32 0;
    store f32* %40 with f32 0;
    store f32* %43 with f32 0;
    store f32* %46 with f32 0;
    store f32* %49 with f32 0;
    store f32* %52 with f32 0;
    store f32* %55 with f32 0;
    store f32* %58 with f32 0;
    store f32* %61 with f32 0;
    store f32* %64 with f32 0;
    store f32* %67 with f32 0;
    store f32* %70 with f32 0;
    store f32* %73 with f32 0;
    store f32* %76 with f32 0;
    store f32* %79 with f32 0;
    store f32* %82 with f32 0;
    store f32* %85 with f32 0;
    store f32* %88 with f32 0;
    store f32* %91 with f32 0;
    store f32* %94 with f32 0;
    store f32* %97 with f32 0;
    store f32* %100 with f32 0;
    store f32* %103 with f32 0;
    store f32* %106 with f32 0;
    store f32* %109 with f32 0;
    store f32* %112 with f32 0;
    store f32* %115 with f32 0;
    store f32* %118 with f32 0;
    store f32* %121 with f32 0;
    store f32* %124 with f32 0;
    store f32* %127 with f32 0;
    store f32* %130 with f32 0;
    store f32* %133 with f32 0;
    store f32* %136 with f32 0;
    store f32* %139 with f32 0;
    store f32* %142 with f32 0;
    store f32* %145 with f32 0;
    store f32* %148 with f32 0;
    store f32* %151 with f32 0;
    store f32* %154 with f32 0;
    store f32* %157 with f32 0;
    store f32* %160 with f32 0;
    store f32* %163 with f32 0;
    store f32* %166 with f32 0;
    store f32* %169 with f32 0;
    store f32* %172 with f32 0;
    store f32* %175 with f32 0;
    store f32* %178 with f32 0;
    store f32* %181 with f32 0;
    store f32* %184 with f32 0;
    store f32* %187 with f32 0;
    store f32* %190 with f32 0;
    store f32* %0 with f32 0;
    store f32* %3 with f32 0;
    store f32* %6 with f32 0;
    store f32* %9 with f32 0;
    store f32* %12 with f32 0;
    store f32* %15 with f32 0;
    store f32* %18 with f32 0;
    store f32* %21 with f32 0;
    store f32* %24 with f32 0;
    store f32* %27 with f32 0;
    store f32* %30 with f32 0;
    store f32* %33 with f32 0;
    store f32* %36 with f32 0;
    store f32* %39 with f32 0;
    store f32* %42 with f32 0;
    store f32* %45 with f32 0;
    store f32* %48 with f32 0;
    store f32* %51 with f32 0;
    store f32* %54 with f32 0;
    store f32* %57 with f32 0;
    store f32* %60 with f32 0;
    store f32* %63 with f32 0;
    store f32* %66 with f32 0;
    store f32* %69 with f32 0;
    store f32* %72 with f32 0;
    store f32* %75 with f32 0;
    store f32* %78 with f32 0;
    store f32* %81 with f32 0;
    store f32* %84 with f32 0;
    store f32* %87 with f32 0;
    store f32* %90 with f32 0;
    store f32* %93 with f32 0;
    store f32* %96 with f32 0;
    store f32* %99 with f32 0;
    store f32* %102 with f32 0;
    store f32* %105 with f32 0;
    store f32* %108 with f32 0;
    store f32* %111 with f32 0;
    store f32* %114 with f32 0;
    store f32* %117 with f32 0;
    store f32* %120 with f32 0;
    store f32* %123 with f32 0;
    store f32* %126 with f32 0;
    store f32* %129 with f32 0;
    store f32* %132 with f32 0;
    store f32* %135 with f32 0;
    store f32* %138 with f32 0;
    store f32* %141 with f32 0;
    store f32* %144 with f32 0;
    store f32* %147 with f32 0;
    store f32* %150 with f32 0;
    store f32* %153 with f32 0;
    store f32* %156 with f32 0;
    store f32* %159 with f32 0;
    store f32* %162 with f32 0;
    store f32* %165 with f32 0;
    store f32* %168 with f32 0;
    store f32* %171 with f32 0;
    store f32* %174 with f32 0;
    store f32* %177 with f32 0;
    store f32* %180 with f32 0;
    store f32* %183 with f32 0;
    store f32* %186 with f32 0;
    store f32* %189 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i1 %193 = scmp gt i32 %192, i32 0;
    i32 %194 = call () -> i32 @getint();
    i1 %195 = scmp gt i32 %194, i32 0;
    cbr i1 %193(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %196 = phi [^entry, i32 0] [^b1, i32 %205];
    cbr i1 %195(prob = 0.97), ^indirect, ^b1;
^b:
    f32 %197 = s2f i32 %192 to f32;
    f32 %198 = fdiv f32 3.14159, f32 %197;
    f32 %199 = s2f i32 %194 to f32;
    f32 %200 = fdiv f32 3.14159, f32 %199;
    [8 * f32]* %201 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %202 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    [8 * f32]* %203 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    cbr i1 %193(prob = 0.97), ^while.body1, ^b2;
^indirect:
    [8 * f32]* %204 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %196];
    ubr ^while.body3;
^b1:
    i32 %205 = add i32 %196, i32 1;
    i1 %206 = scmp lt i32 %205, i32 %192;
    cbr i1 %206(prob = 0.97), ^while.body, ^b;
^while.body1:
    i32 %207 = phi [^b, i32 0] [^b3, i32 %219];
    f32 %208 = s2f i32 %207 to f32;
    [8 * f32]* %209 = getelementptr &([8 * f32]* %201)[i32 %207];
    cbr i1 %195(prob = 0.97), ^while.body2, ^b3;
^b2:
    i1 %210 = scmp gt i32 %194, i32 1;
    cbr i1 %193(prob = 0.97), ^while.body4, ^b4;
^while.body2:
    i32 %211 = phi [^while.body1, i32 0] [^b11, i32 %267];
    f32 %212 = s2f i32 %211 to f32;
    f32* %213 = getelementptr &([8 * f32]* %209)[i64 0][i32 %211];
    store f32* %213 with f32 0;
    ubr ^while.body5;
^while.body3:
    i32 %214 = phi [^indirect, i32 0] [^while.body3, i32 %215];
    i32 %215 = add i32 %214, i32 1;
    i1 %216 = scmp lt i32 %215, i32 %194;
    f32* %217 = getelementptr &([8 * f32]* %204)[i64 0][i32 %214];
    f32 %218 = call () -> f32 @getfloat();
    store f32* %217 with f32 %218;
    cbr i1 %216(prob = 0.97), ^while.body3, ^b1;
^b3:
    i32 %219 = add i32 %207, i32 1;
    i1 %220 = scmp lt i32 %219, i32 %192;
    cbr i1 %220(prob = 0.97), ^while.body1, ^b2;
^while.body4:
    i32 %221 = phi [^b2, i32 0] [^b5, i32 %232];
    [8 * f32]* %222 = getelementptr &([8 * f32]* %201)[i32 %221];
    f32* %223 = getelementptr &([8 * f32]* %222)[i64 0][i64 0];
    f32 %224 = load f32* %223;
    call (f32) -> void @putfloat(f32 %224);
    cbr i1 %210(prob = 0.97), ^while.body6, ^b5;
^b4:
    i1 %225 = scmp gt i32 %192, i32 1;
    call (i32) -> void @putch(i32 10);
    cbr i1 %193(prob = 0.97), ^while.body7, ^b6;
^while.body5:
    i32 %226 = phi [^while.body2, i32 0] [^b7, i32 %248];
    cbr i1 %195(prob = 0.97), ^indirect1, ^b7;
^while.body6:
    i32 %227 = phi [^while.body4, i32 1] [^while.body6, i32 %228];
    i32 %228 = add i32 %227, i32 1;
    i1 %229 = scmp lt i32 %228, i32 %194;
    f32* %230 = getelementptr &([8 * f32]* %222)[i64 0][i32 %227];
    call (i32) -> void @putch(i32 32);
    f32 %231 = load f32* %230;
    call (f32) -> void @putfloat(f32 %231);
    cbr i1 %229(prob = 0.97), ^while.body6, ^b5;
^b5:
    i32 %232 = add i32 %221, i32 1;
    i1 %233 = scmp lt i32 %232, i32 %192;
    call (i32) -> void @putch(i32 10);
    cbr i1 %233(prob = 0.97), ^while.body4, ^b4;
^while.body7:
    i32 %234 = phi [^b4, i32 0] [^b8, i32 %254];
    f32 %235 = s2f i32 %234 to f32;
    f32 %236 = fadd f32 %235, f32 0.5;
    f32 %237 = fmul f32 %198, f32 %236;
    [8 * f32]* %238 = getelementptr &([8 * f32]* %203)[i32 %234];
    cbr i1 %195(prob = 0.97), ^while.body8, ^b8;
^b6:
    cbr i1 %193(prob = 0.97), ^while.body9, ^b9;
^indirect1:
    f32 %239 = s2f i32 %226 to f32;
    f32 %240 = fadd f32 %239, f32 0.5;
    f32 %241 = fmul f32 %198, f32 %240;
    f32 %242 = fmul f32 %241, f32 %208;
    f32 %243 = fadd f32 %242, f32 1.5708;
    i1 %244 = fcmp lt f32 %243, f32 -6.28319;
    i1 %245 = fcmp gt f32 %243, f32 6.28319;
    i1 %246 = or i1 %244, i1 %245;
    [8 * f32]* %247 = getelementptr &([8 * f32]* %202)[i32 %226];
    cbr i1 %246(prob = 0.75), ^if.then, ^b10;
^b7:
    i32 %248 = add i32 %226, i32 1;
    i1 %249 = scmp lt i32 %248, i32 %192;
    cbr i1 %249(prob = 0.97), ^while.body5, ^b11;
^while.body8:
    i32 %250 = phi [^while.body7, i32 0] [^b17, i32 %305];
    f32 %251 = load f32* %1;
    f32 %252 = fmul f32 0.25, f32 %251;
    f32* %253 = getelementptr &([8 * f32]* %238)[i64 0][i32 %250];
    store f32* %253 with f32 %252;
    cbr i1 %225(prob = 0.97), ^while.body10, ^b12;
^b8:
    i32 %254 = add i32 %234, i32 1;
    i1 %255 = scmp lt i32 %254, i32 %192;
    cbr i1 %255(prob = 0.97), ^while.body7, ^b6;
^while.body9:
    i32 %256 = phi [^b6, i32 0] [^b13, i32 %286];
    [8 * f32]* %257 = getelementptr &([8 * f32]* %203)[i32 %256];
    f32* %258 = getelementptr &([8 * f32]* %257)[i64 0][i64 0];
    f32 %259 = load f32* %258;
    call (f32) -> void @putfloat(f32 %259);
    cbr i1 %210(prob = 0.97), ^while.body11, ^b13;
^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    f32 %260 = fdiv f32 %243, f32 6.28319;
    i32 %261 = f2s f32 %260 to i32;
    f32 %262 = s2f i32 %261 to f32;
    f32 %263 = fmul f32 %262, f32 6.28319;
    f32 %264 = fsub f32 %243, f32 %263;
    ubr ^b10;
^b10:
    f32 %265 = phi [^indirect1, f32 %243] [^if.then, f32 %264];
    i1 %266 = fcmp gt f32 %265, f32 3.14159;
    cbr i1 %266(prob = 0.5), ^if.then1, ^b14;
^b11:
    i32 %267 = add i32 %211, i32 1;
    i1 %268 = scmp lt i32 %267, i32 %194;
    cbr i1 %268(prob = 0.97), ^while.body2, ^b3;
^while.body10:
    f32 %269 = phi [^while.body8, f32 %252] [^indirect2, f32 %289];
    i32 %270 = phi [^while.body8, i32 1] [^indirect2, i32 %271];
    i32 %271 = add i32 %270, i32 1;
    i1 %272 = scmp lt i32 %271, i32 %192;
    [8 * f32]* %273 = getelementptr &([8 * f32]* %201)[i32 %270];
    f32* %274 = getelementptr &([8 * f32]* %273)[i64 0][i64 0];
    f32 %275 = load f32* %274;
    f32 %276 = fmul f32 0.5, f32 %275;
    f32 %277 = fadd f32 %269, f32 %276;
    store f32* %253 with f32 %277;
    cbr i1 %272(prob = 0.97), ^indirect2, ^b12;
^b12:
    f32 %278 = s2f i32 %250 to f32;
    f32 %279 = fadd f32 %278, f32 0.5;
    f32 %280 = fmul f32 %200, f32 %279;
    cbr i1 %210(prob = 0.97), ^while.body12, ^b15;
^while.body11:
    i32 %281 = phi [^while.body9, i32 1] [^while.body11, i32 %282];
    i32 %282 = add i32 %281, i32 1;
    i1 %283 = scmp lt i32 %282, i32 %194;
    f32* %284 = getelementptr &([8 * f32]* %257)[i64 0][i32 %281];
    call (i32) -> void @putch(i32 32);
    f32 %285 = load f32* %284;
    call (f32) -> void @putfloat(f32 %285);
    cbr i1 %283(prob = 0.97), ^while.body11, ^b13;
^b13:
    i32 %286 = add i32 %256, i32 1;
    i1 %287 = scmp lt i32 %286, i32 %192;
    call (i32) -> void @putch(i32 10);
    cbr i1 %287(prob = 0.97), ^while.body9, ^b9;
^if.then1:
    f32 %288 = fsub f32 %265, f32 6.28319;
    ubr ^b14;
^indirect2:
    f32 %289 = load f32* %253;
    ubr ^while.body10;
^b14:
    f32 %290 = phi [^b10, f32 %265] [^if.then1, f32 %288];
    i1 %291 = fcmp lt f32 %290, f32 -3.14159;
    cbr i1 %291(prob = 0.5), ^if.then2, ^b16;
^while.body12:
    i32 %292 = phi [^b12, i32 1] [^while.body12, i32 %294];
    f32 %293 = load f32* %253;
    i32 %294 = add i32 %292, i32 1;
    i1 %295 = scmp lt i32 %294, i32 %194;
    f32* %296 = getelementptr &([8 * f32]* %201)[i64 0][i32 %292];
    f32 %297 = load f32* %296;
    f32 %298 = fmul f32 0.5, f32 %297;
    f32 %299 = fadd f32 %293, f32 %298;
    store f32* %253 with f32 %299;
    cbr i1 %295(prob = 0.97), ^while.body12, ^b15;
^b15:
    cbr i1 %225(prob = 0.97), ^while.body13, ^b17;
^if.then2:
    f32 %300 = fadd f32 %290, f32 6.28319;
    ubr ^b16;
^b16:
    f32 %301 = phi [^b14, f32 %290] [^if.then2, f32 %300];
    f32 %302 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %301, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    ubr ^while.body14;
^while.body13:
    i32 %303 = phi [^b15, i32 1] [^b18, i32 %333];
    cbr i1 %210(prob = 0.97), ^indirect3, ^b18;
^b17:
    f32 %304 = load f32* %253;
    i32 %305 = add i32 %250, i32 1;
    f32 %306 = fmul f32 %304, f32 2;
    f32 %307 = fdiv f32 %306, f32 %197;
    f32 %308 = fmul f32 %307, f32 2;
    f32 %309 = fdiv f32 %308, f32 %199;
    store f32* %253 with f32 %309;
    i1 %310 = scmp lt i32 %305, i32 %194;
    cbr i1 %310(prob = 0.97), ^while.body8, ^b8;
^while.body14:
    i32 %311 = phi [^b16, i32 0] [^b24, i32 %313];
    f32 %312 = load f32* %213;
    i32 %313 = add i32 %311, i32 1;
    i1 %314 = scmp lt i32 %313, i32 %194;
    f32 %315 = s2f i32 %311 to f32;
    f32 %316 = fadd f32 %315, f32 0.5;
    f32 %317 = fmul f32 %200, f32 %316;
    f32 %318 = fmul f32 %317, f32 %212;
    f32 %319 = fadd f32 %318, f32 1.5708;
    i1 %320 = fcmp lt f32 %319, f32 -6.28319;
    i1 %321 = fcmp gt f32 %319, f32 6.28319;
    i1 %322 = or i1 %320, i1 %321;
    f32* %323 = getelementptr &([8 * f32]* %247)[i64 0][i32 %311];
    f32 %324 = load f32* %323;
    f32 %325 = fmul f32 %324, f32 %302;
    cbr i1 %322(prob = 0.75), ^if.then3, ^b19;
^indirect3:
    f32 %326 = s2f i32 %303 to f32;
    f32 %327 = fmul f32 %237, f32 %326;
    f32 %328 = fadd f32 %327, f32 1.5708;
    i1 %329 = fcmp lt f32 %328, f32 -6.28319;
    i1 %330 = fcmp gt f32 %328, f32 6.28319;
    i1 %331 = or i1 %329, i1 %330;
    [8 * f32]* %332 = getelementptr &([8 * f32]* %201)[i32 %303];
    cbr i1 %331(prob = 0.75), ^if.then4, ^b20;
^b18:
    i32 %333 = add i32 %303, i32 1;
    i1 %334 = scmp lt i32 %333, i32 %192;
    cbr i1 %334(prob = 0.97), ^while.body13, ^b17;
^if.then3:
    f32 %335 = fdiv f32 %319, f32 6.28319;
    i32 %336 = f2s f32 %335 to i32;
    f32 %337 = s2f i32 %336 to f32;
    f32 %338 = fmul f32 %337, f32 6.28319;
    f32 %339 = fsub f32 %319, f32 %338;
    ubr ^b19;
^if.then4:
    f32 %340 = fdiv f32 %328, f32 6.28319;
    i32 %341 = f2s f32 %340 to i32;
    f32 %342 = s2f i32 %341 to f32;
    f32 %343 = fmul f32 %342, f32 6.28319;
    f32 %344 = fsub f32 %328, f32 %343;
    ubr ^b20;
^b19:
    f32 %345 = phi [^while.body14, f32 %319] [^if.then3, f32 %339];
    i1 %346 = fcmp gt f32 %345, f32 3.14159;
    cbr i1 %346(prob = 0.5), ^if.then5, ^b21;
^b20:
    f32 %347 = phi [^indirect3, f32 %328] [^if.then4, f32 %344];
    i1 %348 = fcmp gt f32 %347, f32 3.14159;
    cbr i1 %348(prob = 0.5), ^if.then6, ^b22;
^if.then5:
    f32 %349 = fsub f32 %345, f32 6.28319;
    ubr ^b21;
^if.then6:
    f32 %350 = fsub f32 %347, f32 6.28319;
    ubr ^b22;
^b21:
    f32 %351 = phi [^b19, f32 %345] [^if.then5, f32 %349];
    i1 %352 = fcmp lt f32 %351, f32 -3.14159;
    cbr i1 %352(prob = 0.5), ^if.then7, ^b24;
^b22:
    f32 %353 = phi [^b20, f32 %347] [^if.then6, f32 %350];
    i1 %354 = fcmp lt f32 %353, f32 -3.14159;
    cbr i1 %354(prob = 0.5), ^if.then8, ^b23;
^if.then7:
    f32 %355 = fadd f32 %351, f32 6.28319;
    ubr ^b24;
^if.then8:
    f32 %356 = fadd f32 %353, f32 6.28319;
    ubr ^b23;
^b23:
    f32 %357 = phi [^b22, f32 %353] [^if.then8, f32 %356];
    f32 %358 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %357, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    ubr ^while.body15;
^b24:
    f32 %359 = phi [^b21, f32 %351] [^if.then7, f32 %355];
    f32 %360 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %359, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %361 = fmul f32 %325, f32 %360;
    f32 %362 = fadd f32 %312, f32 %361;
    store f32* %213 with f32 %362;
    cbr i1 %314(prob = 0.97), ^while.body14, ^b7;
^while.body15:
    i32 %363 = phi [^b23, i32 1] [^b27, i32 %365];
    f32 %364 = load f32* %253;
    i32 %365 = add i32 %363, i32 1;
    i1 %366 = scmp lt i32 %365, i32 %194;
    f32 %367 = s2f i32 %363 to f32;
    f32 %368 = fmul f32 %280, f32 %367;
    f32 %369 = fadd f32 %368, f32 1.5708;
    i1 %370 = fcmp lt f32 %369, f32 -6.28319;
    i1 %371 = fcmp gt f32 %369, f32 6.28319;
    i1 %372 = or i1 %370, i1 %371;
    f32* %373 = getelementptr &([8 * f32]* %332)[i64 0][i32 %363];
    f32 %374 = load f32* %373;
    f32 %375 = fmul f32 %374, f32 %358;
    cbr i1 %372(prob = 0.75), ^if.then9, ^b25;
^if.then9:
    f32 %376 = fdiv f32 %369, f32 6.28319;
    i32 %377 = f2s f32 %376 to i32;
    f32 %378 = s2f i32 %377 to f32;
    f32 %379 = fmul f32 %378, f32 6.28319;
    f32 %380 = fsub f32 %369, f32 %379;
    ubr ^b25;
^b25:
    f32 %381 = phi [^while.body15, f32 %369] [^if.then9, f32 %380];
    i1 %382 = fcmp gt f32 %381, f32 3.14159;
    cbr i1 %382(prob = 0.5), ^if.then10, ^b26;
^if.then10:
    f32 %383 = fsub f32 %381, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %384 = phi [^b25, f32 %381] [^if.then10, f32 %383];
    i1 %385 = fcmp lt f32 %384, f32 -3.14159;
    cbr i1 %385(prob = 0.5), ^if.then11, ^b27;
^if.then11:
    f32 %386 = fadd f32 %384, f32 6.28319;
    ubr ^b27;
^b27:
    f32 %387 = phi [^b26, f32 %384] [^if.then11, f32 %386];
    f32 %388 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %387, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %389 = fmul f32 %375, f32 %388;
    f32 %390 = fadd f32 %364, f32 %389;
    store f32* %253 with f32 %390;
    cbr i1 %366(prob = 0.97), ^while.body15, ^b18;
}
