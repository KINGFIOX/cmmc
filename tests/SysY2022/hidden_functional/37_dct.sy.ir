internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3):
    i1 %0 = fcmp gt f32 %arg, f32 0;
    cbr i1 %0(prob = 0.5), [ ^entry1 f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg ], [ ^indirect f32 %arg, f32 %arg, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1 ];
^entry1(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg4):
    i1 %0 = fcmp le f32 %arg, f32 1e-06;
    cbr i1 %0(prob = 0.5), [ ^indirect1 f32 %arg4 ], [ ^indirect2 f32 %arg4, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1 ];
^indirect(f32 %arg, f32 %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4):
    f32 %0 = fneg f32 %arg;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), [ ^indirect1 f32 %arg1 ], [ ^indirect2 f32 %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4 ];
^indirect1(f32 %arg):
    ret f32 %arg;
^indirect2(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3):
    f32 %0 = fdiv f32 %arg, f32 3;
    f32 %1 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %0, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1);
    f32 %2 = fmul f32 3, f32 %1;
    f32 %3 = fmul f32 4, f32 %1;
    f32 %4 = fmul f32 %3, f32 %1;
    f32 %5 = fmul f32 %4, f32 %1;
    f32 %6 = fsub f32 %2, f32 %5;
    ret f32 %6;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    i1 %194 = scmp gt i32 %192, i32 0;
    i1 %195 = scmp gt i32 %193, i32 0;
    i1 %196 = scmp gt i32 %193, i32 1;
    f32 %197 = s2f i32 %192 to f32;
    f32 %198 = fdiv f32 3.14159, f32 %197;
    i1 %199 = scmp gt i32 %192, i32 1;
    f32 %200 = s2f i32 %193 to f32;
    f32 %201 = fdiv f32 3.14159, f32 %200;
    cbr i1 %194(prob = 0.97), [ ^while.body [8 * [8 * f32]]* %test_idct, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_block, i32 %192, i32 %193, i32 0, f32 %201, i1 %195, i1 %195, i1 %195, i1 %196, f32 %197, i1 %199, f32 %200, i1 %195, i1 %196, f32 %198, f32 %198, i1 %196, f32 %201, i1 %196, i1 %199, f32* %64 ], [ ^b [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_idct, [8 * [8 * f32]]* %test_dct, i32 %192, i32 %193, i1 %196, i1 %199, i1 %195, f32 %201, i1 %195, f32 %198, i1 %195, f32 %200, i1 %199, i1 %196, f32 %197, f32 %198, i1 %196, f32 %201, i1 %196, i1 %194, f32* %64 ];
^while.body([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, i1 %arg10, f32 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22):
    cbr i1 %arg9(prob = 0.97), [ ^super.header [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 0, f32 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg10, i1 %arg18, f32 %arg19, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg20, i1 %arg21, i1 %arg7, f32 %arg6, i1 %arg9, i1 %arg8, f32* %arg22 ], [ ^b1 [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg18, f32 %arg19, i1 %arg15, f32 %arg16, i1 %arg10, i1 %arg20, i1 %arg21, i1 %arg7, f32 %arg6, i1 %arg9, i1 %arg8, f32 %arg17, i1 %arg14, f32 %arg13, i1 %arg12, f32 %arg11, f32* %arg22 ];
^b([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i1 %arg5, i1 %arg6, i1 %arg7, f32 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, f32* %arg21):
    [8 * f32]* %0 = getelementptr &([8 * [8 * f32]]* %arg2)[i64 0][i64 0];
    [8 * f32]* %1 = getelementptr &([8 * [8 * f32]]* %arg)[i64 0][i64 0];
    cbr i1 %arg20(prob = 0.97), [ ^while.body1 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, [8 * f32]* %0, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, i32 %arg3, i32 %arg4, [8 * f32]* %0, [8 * f32]* %1, i32 %arg3, i32 %arg4, i32 0, f32 %arg18, i1 %arg17, f32 %arg16, f32 %arg15, i1 %arg11, f32 %arg12, i1 %arg9, f32 %arg8, f32 %arg10, f32* %arg21, i1 %arg5, i1 %arg6, i1 %arg7, i1 %arg19, i1 %arg13, i1 %arg14 ], [ ^b2 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, [8 * f32]* %0, i32 %arg3, i32 %arg4, f32* %arg21, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg17, f32 %arg12, f32 %arg16, f32 %arg18, i1 %arg19, i1 %arg7, i1 %arg6, i1 %arg5, i1 %arg20 ];
^super.header([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23):
    i32 %0 = add i32 %arg6, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body3 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23 ], [ ^while.body4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23 ];
^b1([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, i1 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, f32 %arg21, f32* %arg22):
    i32 %0 = add i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.97), [ ^while.body [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, i32 %arg3, i32 %arg4, i32 %0, f32 %arg14, i1 %arg13, i1 %arg16, i1 %arg15, i1 %arg10, f32 %arg21, i1 %arg20, f32 %arg19, i1 %arg18, i1 %arg8, f32 %arg9, f32 %arg17, i1 %arg6, f32 %arg7, i1 %arg11, i1 %arg12, f32* %arg22 ], [ ^b [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i1 %arg11, i1 %arg12, i1 %arg13, f32 %arg14, i1 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg10, f32 %arg21, f32 %arg9, i1 %arg8, f32 %arg7, i1 %arg6, i1 true, f32* %arg22 ];
^while.body1([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, f32* %arg23, i1 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29):
    cbr i1 %arg18(prob = 0.97), [ ^while.body2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 0, i1 %arg29, i1 %arg28, i1 %arg27, i1 %arg26, f32* %arg23, f32 %arg22, i1 %arg18, f32 %arg19, f32 %arg21, i1 %arg20, f32 %arg14, f32 %arg16, i1 %arg15, f32 %arg17, i1 %arg24, i1 %arg25 ], [ ^b3 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg18, f32 %arg19, f32 %arg22, f32* %arg23, f32 %arg21, i1 %arg20, i1 %arg28, i1 %arg29, f32 %arg17, f32 %arg16, i1 %arg15, f32 %arg14 ];
^b2([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, f32* %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18):
    cbr i1 %arg18(prob = 0.97), [ ^while.body5 [8 * [8 * f32]]* %arg, [8 * f32]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg2, i32 %arg5, [8 * [8 * f32]]* %arg1, i32 %arg4, i32 %arg5, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, i32 0, f32* %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17 ], [ ^b4 [8 * [8 * f32]]* %arg, [8 * f32]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg2, i32 %arg5, [8 * [8 * f32]]* %arg1, i32 %arg4, i32 %arg5, i1 %arg15, i1 %arg14, f32 %arg13, f32 %arg12, f32 %arg11, i1 %arg10, f32 %arg9, i1 %arg16, i1 %arg8, i1 %arg7, f32* %arg6, i1 %arg18 ];
^while.body2([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, f32* %arg19, f32 %arg20, i1 %arg21, f32 %arg22, f32 %arg23, i1 %arg24, f32 %arg25, f32 %arg26, i1 %arg27, f32 %arg28, i1 %arg29, i1 %arg30):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg9)[i32 %arg13];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg14];
    store f32* %1 with f32 0;
    ubr [ ^while.body6 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 0, i1 %arg30, i1 %arg29, f32 %arg28, i1 %arg24, f32 %arg23, i1 %arg21, f32 %arg22, i1 %arg27, f32 %arg26, f32 %arg20, f32* %arg19, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, f32 %arg25 ];
^while.body3([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23):
    [8 * f32]* %0 = getelementptr &([8 * [8 * f32]]* %arg2)[i64 0][i32 %arg5];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg6];
    f32 %2 = call () -> f32 @getfloat();
    store f32* %1 with f32 %2;
    f32* %3 = getelementptr &(f32* %1)[i64 1];
    f32 %4 = call () -> f32 @getfloat();
    store f32* %3 with f32 %4;
    f32* %5 = getelementptr &(f32* %1)[i64 2];
    f32 %6 = call () -> f32 @getfloat();
    store f32* %5 with f32 %6;
    f32* %7 = getelementptr &(f32* %1)[i64 3];
    f32 %8 = call () -> f32 @getfloat();
    store f32* %7 with f32 %8;
    f32* %9 = getelementptr &(f32* %1)[i64 4];
    f32 %10 = call () -> f32 @getfloat();
    store f32* %9 with f32 %10;
    f32* %11 = getelementptr &(f32* %1)[i64 5];
    f32 %12 = call () -> f32 @getfloat();
    store f32* %11 with f32 %12;
    f32* %13 = getelementptr &(f32* %1)[i64 6];
    f32 %14 = call () -> f32 @getfloat();
    store f32* %13 with f32 %14;
    f32* %15 = getelementptr &(f32* %1)[i64 7];
    f32 %16 = call () -> f32 @getfloat();
    store f32* %15 with f32 %16;
    f32* %17 = getelementptr &(f32* %1)[i64 8];
    f32 %18 = call () -> f32 @getfloat();
    store f32* %17 with f32 %18;
    f32* %19 = getelementptr &(f32* %1)[i64 9];
    f32 %20 = call () -> f32 @getfloat();
    store f32* %19 with f32 %20;
    f32* %21 = getelementptr &(f32* %1)[i64 10];
    f32 %22 = call () -> f32 @getfloat();
    store f32* %21 with f32 %22;
    f32* %23 = getelementptr &(f32* %1)[i64 11];
    f32 %24 = call () -> f32 @getfloat();
    store f32* %23 with f32 %24;
    f32* %25 = getelementptr &(f32* %1)[i64 12];
    f32 %26 = call () -> f32 @getfloat();
    store f32* %25 with f32 %26;
    f32* %27 = getelementptr &(f32* %1)[i64 13];
    f32 %28 = call () -> f32 @getfloat();
    store f32* %27 with f32 %28;
    f32* %29 = getelementptr &(f32* %1)[i64 14];
    f32 %30 = call () -> f32 @getfloat();
    store f32* %29 with f32 %30;
    f32* %31 = getelementptr &(f32* %1)[i64 15];
    f32 %32 = call () -> f32 @getfloat();
    store f32* %31 with f32 %32;
    i32 %33 = add i32 %arg6, i32 16;
    i1 %34 = scmp lt i32 %33, i32 %arg4;
    cbr i1 %34(prob = 0.97), [ ^super.header [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %33, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23 ], [ ^b1 [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, i1 %arg11, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32 %arg16, i1 %arg10, f32 %arg9, i1 %arg8, f32 %arg7, f32* %arg23 ];
^while.body4([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23):
    [8 * f32]* %0 = getelementptr &([8 * [8 * f32]]* %arg2)[i64 0][i32 %arg5];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg6];
    f32 %2 = call () -> f32 @getfloat();
    store f32* %1 with f32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg4;
    cbr i1 %4(prob = 0.97), [ ^while.body4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %3, f32 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32* %arg23 ], [ ^b1 [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, i1 %arg11, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22, f32 %arg16, i1 %arg10, f32 %arg9, i1 %arg8, f32 %arg7, f32* %arg23 ];
^b3([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, f32 %arg19, f32 %arg20, f32* %arg21, f32 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32 %arg26, f32 %arg27, i1 %arg28, f32 %arg29):
    i32 %0 = add i32 %arg13, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg11;
    cbr i1 %1(prob = 0.97), [ ^while.body1 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %0, f32 %arg29, i1 %arg28, f32 %arg27, f32 %arg26, i1 %arg18, f32 %arg19, i1 %arg23, f32 %arg22, f32 %arg20, f32* %arg21, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg24, i1 %arg25 ], [ ^b2 [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg4, [8 * f32]* %arg3, i32 %arg7, i32 %arg8, f32* %arg21, i1 %arg24, i1 %arg25, f32 %arg26, i1 %arg28, f32 %arg19, f32 %arg27, f32 %arg29, i1 %arg17, i1 %arg16, i1 %arg15, i1 %arg14, i1 true ];
^while.body5([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32* %arg12, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg8)[i32 %arg11];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i64 0];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    cbr i1 %arg23(prob = 0.97), [ ^super.header1 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 1, i1 %arg21, i1 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, i1 %arg16, f32 %arg15, i1 %arg14, i1 %arg13, f32* %arg12, i1 %arg22, i1 %arg23 ], [ ^b5 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32* %arg12, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ];
^b4([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, i1 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32* %arg18, i1 %arg19):
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %0 = getelementptr &([8 * [8 * f32]]* %arg)[i64 0][i64 0];
    cbr i1 %arg19(prob = 0.97), [ ^while.body7 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg3, [8 * f32]* %0, i32 %arg6, i32 %arg7, [8 * f32]* %0, [8 * f32]* %arg1, i32 %arg2, i32 %arg4, i32 0, f32* %arg18, i1 %arg17, i1 %arg16, i1 %arg15, i1 %arg13, f32 %arg14, f32 %arg12, f32 %arg11, f32 %arg10, i1 %arg9, i1 %arg8 ], [ ^b6 [8 * f32]* %0, i32 %arg6, i32 %arg7, i1 %arg13, i1 %arg19 ];
^while.body6([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, f32 %arg22, i1 %arg23, f32 %arg24, f32 %arg25, f32* %arg26, i1 %arg27, i1 %arg28, i1 %arg29, i1 %arg30, f32 %arg31):
    cbr i1 %arg19(prob = 0.97), [ ^while.body8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 0, i1 %arg29, i1 %arg27, f32 %arg18, i1 %arg21, f32 %arg22, i1 %arg23, f32 %arg24, f32 %arg20, i1 %arg19, f32 %arg25, f32* %arg26, f32 %arg31, i1 %arg30, i1 %arg16, i1 %arg17, i1 %arg28 ], [ ^b7 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i1 %arg27, i1 %arg28, i1 %arg29, i1 %arg30, i1 %arg19, i1 %arg21, f32 %arg22, f32 %arg20, f32 %arg25, f32* %arg26, f32 %arg31, f32 %arg24, i1 %arg23, f32 %arg18, i1 %arg17, i1 %arg16 ];
^super.header1([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24):
    i32 %0 = add i32 %arg12, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body9 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24 ], [ ^while.body10 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24 ];
^b5([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32* %arg12, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg11, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg9;
    cbr i1 %1(prob = 0.97), [ ^while.body5 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %0, f32* %arg12, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ], [ ^b4 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, i1 %arg21, i1 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, i1 %arg16, f32 %arg15, i1 %arg22, i1 %arg14, i1 %arg13, f32* %arg12, i1 true ];
^while.body7([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32* %arg11, i1 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21):
    cbr i1 %arg21(prob = 0.97), [ ^while.body11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 0, i1 %arg21, i1 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, i1 %arg15, f32 %arg16, i1 %arg14, i1 %arg13, i1 %arg12, f32* %arg11 ], [ ^b8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, i1 %arg15, f32 %arg16, i1 %arg14, i1 %arg13, i1 %arg12, f32* %arg11, i1 %arg21 ];
^b6([8 * f32]* %arg, i32 %arg1, i32 %arg2, i1 %arg3, i1 %arg4):
    cbr i1 %arg4(prob = 0.97), [ ^while.body12 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 0, i1 %arg3 ], [ ^b9 ];
^while.body8([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i1 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, f32 %arg21, i1 %arg22, f32 %arg23, f32 %arg24, i1 %arg25, f32 %arg26, f32* %arg27, f32 %arg28, i1 %arg29, i1 %arg30, i1 %arg31, i1 %arg32):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg9)[i32 %arg13];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg14];
    f32 %2 = load f32* %1;
    [8 * f32]* %3 = getelementptr &([8 * f32]* %arg10)[i32 %arg15];
    f32* %4 = getelementptr &([8 * f32]* %3)[i64 0][i32 %arg16];
    f32 %5 = load f32* %4;
    f32 %6 = s2f i32 %arg15 to f32;
    f32 %7 = fadd f32 %6, f32 0.5;
    f32 %8 = fmul f32 %arg26, f32 %7;
    f32 %9 = s2f i32 %arg13 to f32;
    f32 %10 = fmul f32 %8, f32 %9;
    f32 %11 = fadd f32 %10, f32 1.5708;
    i1 %12 = fcmp gt f32 %11, f32 6.28319;
    cbr i1 %12(prob = 0.5), [ ^if.then [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, f32 %2, i32 %arg16, [8 * [8 * f32]]* %arg, f32* %1, [8 * [8 * f32]]* %arg1, f32 %5, [8 * [8 * f32]]* %arg2, i32 %arg14, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, f32 %11, f32 %arg28, i1 %arg29, i1 %arg30, i1 %arg32, i1 %arg20, f32 %arg21, f32 %arg24, i1 %arg25, f32 %arg26, f32* %arg27, i1 %arg31, f32 %arg23, i1 %arg22, f32 %arg19, i1 %arg18, i1 %arg17 ], [ ^indirect f32 %11, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg2, f32 %5, f32 %2, i32 %arg14, i32 %arg16, [8 * [8 * f32]]* %arg, f32* %1, [8 * [8 * f32]]* %arg1, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, f32 %11, i1 %arg17, i1 %arg18, f32 %arg19, f32 %arg24, i1 %arg20, f32 %arg21, i1 %arg22, f32 %arg23, i1 %arg25, f32 %arg26, f32* %arg27, f32 %arg28, i1 %arg29, i1 %arg30, i1 %arg31, i1 %arg32 ];
^while.body9([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24):
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg8)[i32 %arg11];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg12];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    call (i32) -> void @putch(i32 32);
    f32* %3 = getelementptr &(f32* %1)[i64 1];
    f32 %4 = load f32* %3;
    call (f32) -> void @putfloat(f32 %4);
    call (i32) -> void @putch(i32 32);
    f32* %5 = getelementptr &(f32* %1)[i64 2];
    f32 %6 = load f32* %5;
    call (f32) -> void @putfloat(f32 %6);
    call (i32) -> void @putch(i32 32);
    f32* %7 = getelementptr &(f32* %1)[i64 3];
    f32 %8 = load f32* %7;
    call (f32) -> void @putfloat(f32 %8);
    call (i32) -> void @putch(i32 32);
    f32* %9 = getelementptr &(f32* %1)[i64 4];
    f32 %10 = load f32* %9;
    call (f32) -> void @putfloat(f32 %10);
    call (i32) -> void @putch(i32 32);
    f32* %11 = getelementptr &(f32* %1)[i64 5];
    f32 %12 = load f32* %11;
    call (f32) -> void @putfloat(f32 %12);
    call (i32) -> void @putch(i32 32);
    f32* %13 = getelementptr &(f32* %1)[i64 6];
    f32 %14 = load f32* %13;
    call (f32) -> void @putfloat(f32 %14);
    call (i32) -> void @putch(i32 32);
    f32* %15 = getelementptr &(f32* %1)[i64 7];
    f32 %16 = load f32* %15;
    call (f32) -> void @putfloat(f32 %16);
    call (i32) -> void @putch(i32 32);
    f32* %17 = getelementptr &(f32* %1)[i64 8];
    f32 %18 = load f32* %17;
    call (f32) -> void @putfloat(f32 %18);
    call (i32) -> void @putch(i32 32);
    f32* %19 = getelementptr &(f32* %1)[i64 9];
    f32 %20 = load f32* %19;
    call (f32) -> void @putfloat(f32 %20);
    call (i32) -> void @putch(i32 32);
    f32* %21 = getelementptr &(f32* %1)[i64 10];
    f32 %22 = load f32* %21;
    call (f32) -> void @putfloat(f32 %22);
    call (i32) -> void @putch(i32 32);
    f32* %23 = getelementptr &(f32* %1)[i64 11];
    f32 %24 = load f32* %23;
    call (f32) -> void @putfloat(f32 %24);
    call (i32) -> void @putch(i32 32);
    f32* %25 = getelementptr &(f32* %1)[i64 12];
    f32 %26 = load f32* %25;
    call (f32) -> void @putfloat(f32 %26);
    call (i32) -> void @putch(i32 32);
    f32* %27 = getelementptr &(f32* %1)[i64 13];
    f32 %28 = load f32* %27;
    call (f32) -> void @putfloat(f32 %28);
    call (i32) -> void @putch(i32 32);
    f32* %29 = getelementptr &(f32* %1)[i64 14];
    f32 %30 = load f32* %29;
    call (f32) -> void @putfloat(f32 %30);
    call (i32) -> void @putch(i32 32);
    f32* %31 = getelementptr &(f32* %1)[i64 15];
    f32 %32 = load f32* %31;
    call (f32) -> void @putfloat(f32 %32);
    i32 %33 = add i32 %arg12, i32 16;
    i1 %34 = scmp lt i32 %33, i32 %arg10;
    cbr i1 %34(prob = 0.97), [ ^super.header1 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %33, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24 ], [ ^b5 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32* %arg22, i1 %arg21, i1 %arg20, f32 %arg19, i1 %arg18, f32 %arg17, f32 %arg16, f32 %arg15, i1 %arg14, i1 %arg13, i1 %arg23, i1 %arg24 ];
^b7([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32* %arg25, f32 %arg26, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, i1 %arg31):
    i32 %0 = add i32 %arg15, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg11;
    cbr i1 %1(prob = 0.97), [ ^while.body6 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %0, i1 %arg31, i1 %arg30, f32 %arg29, i1 %arg20, f32 %arg23, i1 %arg21, f32 %arg22, i1 %arg28, f32 %arg27, f32 %arg24, f32* %arg25, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg26 ], [ ^b10 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %arg26, i1 %arg28, f32 %arg27, f32 %arg29, i1 %arg20, f32 %arg23, f32* %arg25, f32 %arg24, i1 %arg21, f32 %arg22, i1 %arg30, i1 %arg31, i1 %arg19, i1 %arg18, i1 %arg17, i1 %arg16 ];
^while.body10([8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24):
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg8)[i32 %arg11];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg12];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    i32 %3 = add i32 %arg12, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg10;
    cbr i1 %4(prob = 0.97), [ ^while.body10 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %3, i1 %arg13, i1 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, f32* %arg22, i1 %arg23, i1 %arg24 ], [ ^b5 [8 * [8 * f32]]* %arg, [8 * f32]* %arg1, i32 %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, i32 %arg6, i32 %arg7, [8 * f32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32* %arg22, i1 %arg21, i1 %arg20, f32 %arg19, i1 %arg18, f32 %arg17, f32 %arg16, f32 %arg15, i1 %arg14, i1 %arg13, i1 %arg23, i1 %arg24 ];
^while.body11([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, f32* %arg22):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %arg22;
    f32 %3 = fmul f32 0.25, f32 %2;
    store f32* %1 with f32 %3;
    cbr i1 %arg21(prob = 0.97), [ ^super.header2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 1, i1 %arg12, i1 %arg20, i1 %arg19, i1 %arg17, f32 %arg18, f32 %arg16, f32 %arg15, f32 %arg14, i1 %arg13, f32* %arg22, i1 %arg21 ], [ ^b11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg21, f32* %arg22, i1 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20 ];
^b8([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32* %arg20, i1 %arg21):
    i32 %0 = add i32 %arg10, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg8;
    cbr i1 %1(prob = 0.97), [ ^while.body7 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %0, f32* %arg20, i1 %arg19, i1 %arg18, i1 %arg17, i1 %arg15, f32 %arg16, f32 %arg14, f32 %arg13, f32 %arg12, i1 %arg11, i1 %arg21 ], [ ^b6 [8 * f32]* %arg3, i32 %arg4, i32 %arg5, i1 %arg15, i1 true ];
^while.body12([8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg)[i32 %arg3];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i64 0];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    cbr i1 %arg4(prob = 0.97), [ ^super.header3 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 1, i1 %arg4 ], [ ^b12 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4 ];
^b9():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * [8 * f32]]* %arg7, f32 %arg8, [8 * [8 * f32]]* %arg9, i32 %arg10, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, f32 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, f32 %arg36, i1 %arg37, f32 %arg38, i1 %arg39, i1 %arg40):
    f32 %0 = fdiv f32 %arg24, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg24, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then1 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg5, f32 %arg8, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg7, i32 %arg10, f32 %arg3, i32 %arg4, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %4, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, f32 %arg25 ], [ ^indirect1 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg5, f32 %arg8, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg7, i32 %arg10, f32 %arg3, i32 %arg4, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %4, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, f32 %arg25 ];
^indirect(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, f32 %arg5, f32 %arg6, i32 %arg7, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, i1 %arg26, i1 %arg27, f32 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, i1 %arg34, f32 %arg35, f32* %arg36, f32 %arg37, i1 %arg38, i1 %arg39, i1 %arg40, i1 %arg41):
    i1 %0 = fcmp lt f32 %arg, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg6, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, [8 * [8 * f32]]* %arg11, f32 %arg5, [8 * [8 * f32]]* %arg4, i32 %arg7, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, f32 %arg37, i1 %arg38, i1 %arg39, i1 %arg41, i1 %arg30, f32 %arg31, f32 %arg29, i1 %arg34, f32 %arg35, f32* %arg36, i1 %arg40, f32 %arg33, i1 %arg32, f32 %arg28, i1 %arg27, i1 %arg26 ], [ ^indirect2 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg6, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, [8 * [8 * f32]]* %arg11, f32 %arg5, [8 * [8 * f32]]* %arg4, i32 %arg7, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, f32 %arg37, i1 %arg38, i1 %arg39, i1 %arg41, i1 %arg30, f32 %arg31, f32 %arg29, i1 %arg34, f32 %arg35, f32* %arg36, i1 %arg40, f32 %arg33, i1 %arg32, f32 %arg28, i1 %arg27, i1 %arg26 ];
^b10([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, i1 %arg19, f32 %arg20, f32* %arg21, f32 %arg22, i1 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, i1 %arg30):
    i32 %0 = add i32 %arg14, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1(prob = 0.97), [ ^while.body2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %0, i1 %arg30, i1 %arg29, i1 %arg28, i1 %arg27, f32* %arg21, f32 %arg22, i1 %arg23, f32 %arg24, f32 %arg20, i1 %arg19, f32 %arg15, f32 %arg17, i1 %arg16, f32 %arg18, i1 %arg25, i1 %arg26 ], [ ^b3 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, i32 %arg8, [8 * f32]* %arg9, [8 * f32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg23, f32 %arg24, f32 %arg22, f32* %arg21, f32 %arg20, i1 %arg19, i1 %arg29, i1 %arg30, f32 %arg18, f32 %arg17, i1 %arg16, f32 %arg15 ];
^super.header2([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    i32 %0 = add i32 %arg12, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body13 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^while.body14 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ];
^b11([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13, f32* %arg14, i1 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22):
    cbr i1 %arg22(prob = 0.97), [ ^super.header4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 1, i1 %arg12, i1 %arg22, i1 %arg21, i1 %arg19, f32 %arg20, f32 %arg18, f32 %arg17, f32 %arg16, i1 %arg15, f32* %arg14, i1 %arg13 ], [ ^b13 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg22, i1 %arg12, i1 %arg13, f32* %arg14, i1 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19, f32 %arg20, i1 %arg21 ];
^super.header3([8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    i32 %0 = add i32 %arg4, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1(prob = 0.67), [ ^while.body15 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5 ], [ ^while.body16 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5 ];
^b12([8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.97), [ ^while.body12 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %0, i1 %arg4 ], [ ^b9 ];
^if.then1([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg3, [8 * [8 * f32]]* %arg4, f32 %arg5, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, i32 %arg10, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, f32 %arg40):
    f32 %0 = fsub f32 %arg24, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, i32 %arg10, [8 * [8 * f32]]* %arg4, f32* %arg3, [8 * [8 * f32]]* %arg6, f32 %arg5, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %0, i1 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg30, f32 %arg31, f32 %arg29, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, f32 %arg40, f32 %arg28, f32 %arg27, i1 %arg26, i1 %arg25 ], [ ^b14 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg8, f32 %arg9, i32 %arg10, [8 * [8 * f32]]* %arg4, f32* %arg3, f32 %arg5, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * f32]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg39, f32 %arg40, f32 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, i1 %arg26, f32 %arg27, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg25, i1 %arg38, i1 %arg37, i1 %arg36, i1 %arg35 ];
^indirect1([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg3, [8 * [8 * f32]]* %arg4, f32 %arg5, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, i32 %arg10, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, f32 %arg40):
    i1 %0 = fcmp lt f32 %arg24, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, i32 %arg10, [8 * [8 * f32]]* %arg4, f32* %arg3, [8 * [8 * f32]]* %arg6, f32 %arg5, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg30, f32 %arg31, f32 %arg29, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, f32 %arg40, f32 %arg28, f32 %arg27, i1 %arg26, i1 %arg25 ], [ ^b14 f32 %arg24, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg8, f32 %arg9, i32 %arg10, [8 * [8 * f32]]* %arg4, f32* %arg3, f32 %arg5, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * f32]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg39, f32 %arg40, f32 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, i1 %arg26, f32 %arg27, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg25, i1 %arg38, i1 %arg37, i1 %arg36, i1 %arg35 ];
^while.body13([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    [8 * f32]* %3 = getelementptr &([8 * f32]* %arg7)[i32 %arg12];
    f32* %4 = getelementptr &([8 * f32]* %3)[i64 0][i64 0];
    f32 %5 = load f32* %4;
    f32 %6 = ffma f32 0.5, f32 %5, f32 %2;
    f32* %7 = getelementptr &([8 * f32]* %3)[i64 1][i64 0];
    f32 %8 = load f32* %7;
    f32 %9 = ffma f32 0.5, f32 %8, f32 %6;
    f32* %10 = getelementptr &([8 * f32]* %3)[i64 2][i64 0];
    f32 %11 = load f32* %10;
    f32 %12 = ffma f32 0.5, f32 %11, f32 %9;
    f32* %13 = getelementptr &([8 * f32]* %3)[i64 3][i64 0];
    f32 %14 = load f32* %13;
    f32 %15 = ffma f32 0.5, f32 %14, f32 %12;
    f32* %16 = getelementptr &([8 * f32]* %3)[i64 4][i64 0];
    f32 %17 = load f32* %16;
    f32 %18 = ffma f32 0.5, f32 %17, f32 %15;
    f32* %19 = getelementptr &([8 * f32]* %3)[i64 5][i64 0];
    f32 %20 = load f32* %19;
    f32 %21 = ffma f32 0.5, f32 %20, f32 %18;
    f32* %22 = getelementptr &([8 * f32]* %3)[i64 6][i64 0];
    f32 %23 = load f32* %22;
    f32 %24 = ffma f32 0.5, f32 %23, f32 %21;
    f32* %25 = getelementptr &([8 * f32]* %3)[i64 7][i64 0];
    f32 %26 = load f32* %25;
    f32 %27 = ffma f32 0.5, f32 %26, f32 %24;
    f32* %28 = getelementptr &([8 * f32]* %3)[i64 8][i64 0];
    f32 %29 = load f32* %28;
    f32 %30 = ffma f32 0.5, f32 %29, f32 %27;
    f32* %31 = getelementptr &([8 * f32]* %3)[i64 9][i64 0];
    f32 %32 = load f32* %31;
    f32 %33 = ffma f32 0.5, f32 %32, f32 %30;
    f32* %34 = getelementptr &([8 * f32]* %3)[i64 10][i64 0];
    f32 %35 = load f32* %34;
    f32 %36 = ffma f32 0.5, f32 %35, f32 %33;
    f32* %37 = getelementptr &([8 * f32]* %3)[i64 11][i64 0];
    f32 %38 = load f32* %37;
    f32 %39 = ffma f32 0.5, f32 %38, f32 %36;
    f32* %40 = getelementptr &([8 * f32]* %3)[i64 12][i64 0];
    f32 %41 = load f32* %40;
    f32 %42 = ffma f32 0.5, f32 %41, f32 %39;
    f32* %43 = getelementptr &([8 * f32]* %3)[i64 13][i64 0];
    f32 %44 = load f32* %43;
    f32 %45 = ffma f32 0.5, f32 %44, f32 %42;
    f32* %46 = getelementptr &([8 * f32]* %3)[i64 14][i64 0];
    f32 %47 = load f32* %46;
    f32 %48 = ffma f32 0.5, f32 %47, f32 %45;
    f32* %49 = getelementptr &([8 * f32]* %3)[i64 15][i64 0];
    f32 %50 = load f32* %49;
    f32 %51 = ffma f32 0.5, f32 %50, f32 %48;
    store f32* %1 with f32 %51;
    i32 %52 = add i32 %arg12, i32 16;
    i1 %53 = scmp lt i32 %52, i32 %arg8;
    cbr i1 %53(prob = 0.97), [ ^super.header2 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %52, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^b11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg23, f32* %arg22, i1 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, i1 %arg16, f32 %arg17, i1 %arg15, i1 %arg14 ];
^indirect2([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * [8 * f32]]* %arg7, f32 %arg8, [8 * [8 * f32]]* %arg9, i32 %arg10, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, f32 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, f32 %arg36, i1 %arg37, f32 %arg38, i1 %arg39, i1 %arg40):
    i1 %0 = fcmp gt f32 %arg24, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then1 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg5, f32 %arg8, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg7, i32 %arg10, f32 %arg3, i32 %arg4, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, f32 %arg25 ], [ ^indirect1 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg5, f32 %arg8, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg7, i32 %arg10, f32 %arg3, i32 %arg4, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, f32 %arg25 ];
^while.body14([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    [8 * f32]* %3 = getelementptr &([8 * f32]* %arg7)[i32 %arg12];
    f32* %4 = getelementptr &([8 * f32]* %3)[i64 0][i64 0];
    f32 %5 = load f32* %4;
    f32 %6 = ffma f32 0.5, f32 %5, f32 %2;
    store f32* %1 with f32 %6;
    i32 %7 = add i32 %arg12, i32 1;
    i1 %8 = scmp lt i32 %7, i32 %arg8;
    cbr i1 %8(prob = 0.97), [ ^while.body14 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %7, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^b11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg23, f32* %arg22, i1 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, i1 %arg16, f32 %arg17, i1 %arg15, i1 %arg14 ];
^while.body15([8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg)[i32 %arg3];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg4];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    call (i32) -> void @putch(i32 32);
    f32* %3 = getelementptr &(f32* %1)[i64 1];
    f32 %4 = load f32* %3;
    call (f32) -> void @putfloat(f32 %4);
    call (i32) -> void @putch(i32 32);
    f32* %5 = getelementptr &(f32* %1)[i64 2];
    f32 %6 = load f32* %5;
    call (f32) -> void @putfloat(f32 %6);
    call (i32) -> void @putch(i32 32);
    f32* %7 = getelementptr &(f32* %1)[i64 3];
    f32 %8 = load f32* %7;
    call (f32) -> void @putfloat(f32 %8);
    call (i32) -> void @putch(i32 32);
    f32* %9 = getelementptr &(f32* %1)[i64 4];
    f32 %10 = load f32* %9;
    call (f32) -> void @putfloat(f32 %10);
    call (i32) -> void @putch(i32 32);
    f32* %11 = getelementptr &(f32* %1)[i64 5];
    f32 %12 = load f32* %11;
    call (f32) -> void @putfloat(f32 %12);
    call (i32) -> void @putch(i32 32);
    f32* %13 = getelementptr &(f32* %1)[i64 6];
    f32 %14 = load f32* %13;
    call (f32) -> void @putfloat(f32 %14);
    call (i32) -> void @putch(i32 32);
    f32* %15 = getelementptr &(f32* %1)[i64 7];
    f32 %16 = load f32* %15;
    call (f32) -> void @putfloat(f32 %16);
    call (i32) -> void @putch(i32 32);
    f32* %17 = getelementptr &(f32* %1)[i64 8];
    f32 %18 = load f32* %17;
    call (f32) -> void @putfloat(f32 %18);
    call (i32) -> void @putch(i32 32);
    f32* %19 = getelementptr &(f32* %1)[i64 9];
    f32 %20 = load f32* %19;
    call (f32) -> void @putfloat(f32 %20);
    call (i32) -> void @putch(i32 32);
    f32* %21 = getelementptr &(f32* %1)[i64 10];
    f32 %22 = load f32* %21;
    call (f32) -> void @putfloat(f32 %22);
    call (i32) -> void @putch(i32 32);
    f32* %23 = getelementptr &(f32* %1)[i64 11];
    f32 %24 = load f32* %23;
    call (f32) -> void @putfloat(f32 %24);
    call (i32) -> void @putch(i32 32);
    f32* %25 = getelementptr &(f32* %1)[i64 12];
    f32 %26 = load f32* %25;
    call (f32) -> void @putfloat(f32 %26);
    call (i32) -> void @putch(i32 32);
    f32* %27 = getelementptr &(f32* %1)[i64 13];
    f32 %28 = load f32* %27;
    call (f32) -> void @putfloat(f32 %28);
    call (i32) -> void @putch(i32 32);
    f32* %29 = getelementptr &(f32* %1)[i64 14];
    f32 %30 = load f32* %29;
    call (f32) -> void @putfloat(f32 %30);
    call (i32) -> void @putch(i32 32);
    f32* %31 = getelementptr &(f32* %1)[i64 15];
    f32 %32 = load f32* %31;
    call (f32) -> void @putfloat(f32 %32);
    i32 %33 = add i32 %arg4, i32 16;
    i1 %34 = scmp lt i32 %33, i32 %arg2;
    cbr i1 %34(prob = 0.97), [ ^super.header3 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %33, i1 %arg5 ], [ ^b12 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg5 ];
^super.header4([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    i32 %0 = add i32 %arg12, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.67), [ ^while.body17 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^while.body18 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ];
^while.body16([8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg)[i32 %arg3];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg4];
    f32 %2 = load f32* %1;
    call (f32) -> void @putfloat(f32 %2);
    i32 %3 = add i32 %arg4, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4(prob = 0.97), [ ^while.body16 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i1 %arg5 ], [ ^b12 [8 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg5 ];
^b13([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13, i1 %arg14, f32* %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, f32 %arg21, i1 %arg22):
    cbr i1 %arg22(prob = 0.97), [ ^while.body19 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 1, i1 %arg13, i1 %arg12, i1 %arg22, f32* %arg15, i1 %arg14, i1 %arg20, f32 %arg21, f32 %arg19, f32 %arg18, f32 %arg17, i1 %arg16 ], [ ^indirect3 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg12, i1 %arg22, f32 %arg17, i1 %arg16, f32* %arg15, i1 %arg14, f32 %arg18, f32 %arg19, i1 %arg20, f32 %arg21 ];
^if.then2([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, f32 %arg5, i32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg8, [8 * [8 * f32]]* %arg9, f32 %arg10, [8 * f32]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, f32 %arg36, f32 %arg37, f32 %arg38, i1 %arg39, i1 %arg40):
    f32 %0 = fadd f32 %arg24, f32 6.28319;
    ubr [ ^b14 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg4, f32 %arg5, i32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg8, f32 %arg10, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * f32]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg35, f32 %arg36, f32 %arg37, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg39, f32 %arg38, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, i1 %arg25 ];
^b14(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, f32 %arg5, i32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg8, f32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i1 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, i1 %arg33, f32 %arg34, f32* %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40):
    f32 %0 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %arg, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1);
    f32 %1 = fmul f32 %arg9, f32 %0;
    f32 %2 = s2f i32 %arg6 to f32;
    f32 %3 = fadd f32 %2, f32 0.5;
    f32 %4 = fmul f32 %arg28, f32 %3;
    f32 %5 = s2f i32 %arg4 to f32;
    f32 %6 = fmul f32 %4, f32 %5;
    f32 %7 = fadd f32 %6, f32 1.5708;
    i1 %8 = fcmp gt f32 %7, f32 6.28319;
    cbr i1 %8(prob = 0.5), [ ^if.then3 [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg7, i32 %arg6, f32* %arg8, f32 %arg5, f32 %1, i32 %arg21, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %7, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg29, f32 %arg30, i1 %arg33, f32 %arg28, f32 %arg34, f32* %arg35, i1 %arg40, f32 %arg32, i1 %arg31, f32 %arg27, f32 %arg26, i1 %arg25 ], [ ^indirect4 f32 %7, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg7, f32 %1, f32 %arg5, [8 * [8 * f32]]* %arg10, i32 %arg21, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg7, i32 %arg6, f32* %arg8, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %7, i1 %arg25, f32 %arg26, f32 %arg27, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, f32 %arg28, i1 %arg33, f32 %arg34, f32* %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40 ];
^while.body17([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &([8 * f32]* %arg7)[i64 0][i32 %arg12];
    f32 %4 = load f32* %3;
    f32 %5 = ffma f32 0.5, f32 %4, f32 %2;
    f32* %6 = getelementptr &(f32* %3)[i64 1];
    f32 %7 = load f32* %6;
    f32 %8 = ffma f32 0.5, f32 %7, f32 %5;
    f32* %9 = getelementptr &(f32* %3)[i64 2];
    f32 %10 = load f32* %9;
    f32 %11 = ffma f32 0.5, f32 %10, f32 %8;
    f32* %12 = getelementptr &(f32* %3)[i64 3];
    f32 %13 = load f32* %12;
    f32 %14 = ffma f32 0.5, f32 %13, f32 %11;
    f32* %15 = getelementptr &(f32* %3)[i64 4];
    f32 %16 = load f32* %15;
    f32 %17 = ffma f32 0.5, f32 %16, f32 %14;
    f32* %18 = getelementptr &(f32* %3)[i64 5];
    f32 %19 = load f32* %18;
    f32 %20 = ffma f32 0.5, f32 %19, f32 %17;
    f32* %21 = getelementptr &(f32* %3)[i64 6];
    f32 %22 = load f32* %21;
    f32 %23 = ffma f32 0.5, f32 %22, f32 %20;
    f32* %24 = getelementptr &(f32* %3)[i64 7];
    f32 %25 = load f32* %24;
    f32 %26 = ffma f32 0.5, f32 %25, f32 %23;
    f32* %27 = getelementptr &(f32* %3)[i64 8];
    f32 %28 = load f32* %27;
    f32 %29 = ffma f32 0.5, f32 %28, f32 %26;
    f32* %30 = getelementptr &(f32* %3)[i64 9];
    f32 %31 = load f32* %30;
    f32 %32 = ffma f32 0.5, f32 %31, f32 %29;
    f32* %33 = getelementptr &(f32* %3)[i64 10];
    f32 %34 = load f32* %33;
    f32 %35 = ffma f32 0.5, f32 %34, f32 %32;
    f32* %36 = getelementptr &(f32* %3)[i64 11];
    f32 %37 = load f32* %36;
    f32 %38 = ffma f32 0.5, f32 %37, f32 %35;
    f32* %39 = getelementptr &(f32* %3)[i64 12];
    f32 %40 = load f32* %39;
    f32 %41 = ffma f32 0.5, f32 %40, f32 %38;
    f32* %42 = getelementptr &(f32* %3)[i64 13];
    f32 %43 = load f32* %42;
    f32 %44 = ffma f32 0.5, f32 %43, f32 %41;
    f32* %45 = getelementptr &(f32* %3)[i64 14];
    f32 %46 = load f32* %45;
    f32 %47 = ffma f32 0.5, f32 %46, f32 %44;
    f32* %48 = getelementptr &(f32* %3)[i64 15];
    f32 %49 = load f32* %48;
    f32 %50 = ffma f32 0.5, f32 %49, f32 %47;
    store f32* %1 with f32 %50;
    i32 %51 = add i32 %arg12, i32 16;
    i1 %52 = scmp lt i32 %51, i32 %arg9;
    cbr i1 %52(prob = 0.97), [ ^super.header4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %51, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^b13 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg14, i1 %arg13, i1 %arg23, f32* %arg22, i1 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, i1 %arg16, f32 %arg17, i1 %arg15 ];
^while.body18([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &([8 * f32]* %arg7)[i64 0][i32 %arg12];
    f32 %4 = load f32* %3;
    f32 %5 = ffma f32 0.5, f32 %4, f32 %2;
    store f32* %1 with f32 %5;
    i32 %6 = add i32 %arg12, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %arg9;
    cbr i1 %7(prob = 0.97), [ ^while.body18 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %6, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32* %arg22, i1 %arg23 ], [ ^b13 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg14, i1 %arg13, i1 %arg23, f32* %arg22, i1 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, i1 %arg16, f32 %arg17, i1 %arg15 ];
^while.body19([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32* %arg16, i1 %arg17, i1 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, i1 %arg23):
    cbr i1 %arg23(prob = 0.97), [ ^while.body20 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 1, i1 %arg13, i1 %arg14, i1 %arg15, f32* %arg16, i1 %arg17, i1 %arg23, i1 %arg18, f32 %arg19, f32 %arg22, f32 %arg20, f32 %arg21 ], [ ^b15 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg15, i1 %arg14, i1 %arg13, i1 %arg17, f32* %arg16, f32 %arg22, i1 %arg18, f32 %arg19, f32 %arg21, f32 %arg20, i1 %arg23 ];
^indirect3([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, f32* %arg17, i1 %arg18, f32 %arg19, f32 %arg20, i1 %arg21, f32 %arg22):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    f32 %3 = fmul f32 %2, f32 2;
    f32 %4 = fdiv f32 %3, f32 %arg22;
    f32 %5 = fmul f32 %4, f32 2;
    f32 %6 = fdiv f32 %5, f32 %arg20;
    store f32* %1 with f32 %6;
    i32 %7 = add i32 %arg11, i32 1;
    i1 %8 = scmp lt i32 %7, i32 %arg9;
    cbr i1 %8(prob = 0.97), [ ^while.body11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %7, i1 %arg12, i1 %arg16, f32 %arg15, f32 %arg19, f32 %arg20, i1 %arg21, f32 %arg22, i1 %arg14, i1 %arg13, i1 %arg18, f32* %arg17 ], [ ^b8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg16, f32 %arg15, f32 %arg19, f32 %arg20, i1 %arg21, f32 %arg22, i1 %arg14, i1 %arg13, i1 %arg18, f32* %arg17, i1 %arg12 ];
^if.then3([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, f32 %arg36, i1 %arg37, f32 %arg38, f32 %arg39, i1 %arg40):
    f32 %0 = fdiv f32 %arg24, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg24, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg3, f32* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %4, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, i1 %arg29, f32 %arg30, f32 %arg32, i1 %arg31, f32 %arg33, f32* %arg34, f32 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, i1 %arg25 ], [ ^indirect5 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg3, f32* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %4, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, i1 %arg29, f32 %arg30, f32 %arg32, i1 %arg31, f32 %arg33, f32* %arg34, f32 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, i1 %arg25 ];
^indirect4(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg4, f32 %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg9, i32 %arg10, f32* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, i1 %arg26, f32 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, f32 %arg33, i1 %arg34, f32 %arg35, f32* %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40, i1 %arg41):
    i1 %0 = fcmp lt f32 %arg, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then3 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg9, i32 %arg10, f32* %arg11, f32 %arg5, f32 %arg4, i32 %arg7, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40, i1 %arg29, f32 %arg30, i1 %arg34, f32 %arg33, f32 %arg35, f32* %arg36, i1 %arg41, f32 %arg32, i1 %arg31, f32 %arg28, f32 %arg27, i1 %arg26 ], [ ^indirect6 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg9, i32 %arg10, f32* %arg11, f32 %arg5, f32 %arg4, i32 %arg7, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40, i1 %arg29, f32 %arg30, i1 %arg34, f32 %arg33, f32 %arg35, f32* %arg36, i1 %arg41, f32 %arg32, i1 %arg31, f32 %arg28, f32 %arg27, i1 %arg26 ];
^while.body20([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32* %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24):
    [8 * f32]* %0 = getelementptr &([8 * f32]* %arg6)[i32 %arg10];
    f32* %1 = getelementptr &([8 * f32]* %0)[i64 0][i32 %arg11];
    f32 %2 = load f32* %1;
    [8 * f32]* %3 = getelementptr &([8 * f32]* %arg7)[i32 %arg12];
    f32* %4 = getelementptr &([8 * f32]* %3)[i64 0][i32 %arg13];
    f32 %5 = load f32* %4;
    f32 %6 = s2f i32 %arg10 to f32;
    f32 %7 = fadd f32 %6, f32 0.5;
    f32 %8 = fmul f32 %arg24, f32 %7;
    f32 %9 = s2f i32 %arg12 to f32;
    f32 %10 = fmul f32 %8, f32 %9;
    f32 %11 = fadd f32 %10, f32 1.5708;
    i1 %12 = fcmp gt f32 %11, f32 6.28319;
    cbr i1 %12(prob = 0.5), [ ^if.then5 [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg13, [8 * [8 * f32]]* %arg2, f32* %1, f32 %5, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg11, f32 %2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %11, i1 %arg16, i1 %arg15, i1 %arg14, i1 %arg18, f32* %arg17, i1 %arg20, f32 %arg21, i1 %arg19, f32 %arg22, f32 %arg23, f32 %arg24 ], [ ^indirect7 f32 %11, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, i32 %arg11, f32 %2, [8 * [8 * f32]]* %arg, i32 %arg13, [8 * [8 * f32]]* %arg2, f32* %1, f32 %5, [8 * [8 * f32]]* %arg1, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %11, i1 %arg14, i1 %arg15, i1 %arg16, f32* %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg23, f32 %arg24, f32 %arg22 ];
^b15([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32* %arg17, f32 %arg18, i1 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, i1 %arg23):
    i32 %0 = add i32 %arg12, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg8;
    cbr i1 %1(prob = 0.97), [ ^while.body19 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, i1 %arg15, i1 %arg14, i1 %arg13, f32* %arg17, i1 %arg16, i1 %arg19, f32 %arg20, f32 %arg22, f32 %arg21, f32 %arg18, i1 %arg23 ], [ ^indirect3 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * f32]* %arg3, i32 %arg4, i32 %arg5, [8 * f32]* %arg6, [8 * f32]* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg18, i1 %arg23, f32* %arg17, i1 %arg16, f32 %arg21, f32 %arg22, i1 %arg19, f32 %arg20 ];
^if.then4([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, f32 %arg4, f32 %arg5, i32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, f32 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, f32 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40):
    f32 %0 = fsub f32 %arg24, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then6 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg7, i32 %arg6, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, i32 %arg3, f32 %arg5, f32 %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %0, f32 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg31, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, f32 %arg28, f32 %arg27, i1 %arg26, i1 %arg25 ], [ ^b16 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, i32 %arg3, f32 %arg5, f32 %arg4, i32 %arg6, [8 * [8 * f32]]* %arg7, [8 * f32]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg39, i1 %arg40, f32 %arg28, i1 %arg29, f32 %arg30, i1 %arg26, f32 %arg27, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg25, i1 %arg38, i1 %arg37, i1 %arg36, f32 %arg35 ];
^indirect5([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, f32 %arg4, f32 %arg5, i32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, f32 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, f32 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg40):
    i1 %0 = fcmp lt f32 %arg24, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then6 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg7, i32 %arg6, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, i32 %arg3, f32 %arg5, f32 %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, f32 %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg29, f32 %arg30, i1 %arg32, f32 %arg31, f32 %arg33, f32* %arg34, i1 %arg39, i1 %arg40, f32 %arg28, f32 %arg27, i1 %arg26, i1 %arg25 ], [ ^b16 f32 %arg24, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg8, f32* %arg9, [8 * [8 * f32]]* %arg10, i32 %arg3, f32 %arg5, f32 %arg4, i32 %arg6, [8 * [8 * f32]]* %arg7, [8 * f32]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg39, i1 %arg40, f32 %arg28, i1 %arg29, f32 %arg30, i1 %arg26, f32 %arg27, f32 %arg31, i1 %arg32, f32 %arg33, f32* %arg34, i1 %arg25, i1 %arg38, i1 %arg37, i1 %arg36, f32 %arg35 ];
^indirect6([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, f32 %arg36, i1 %arg37, f32 %arg38, f32 %arg39, i1 %arg40):
    i1 %0 = fcmp gt f32 %arg24, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then4 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg3, f32* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, i1 %arg29, f32 %arg30, f32 %arg32, i1 %arg31, f32 %arg33, f32* %arg34, f32 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, i1 %arg25 ], [ ^indirect5 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg3, f32* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, i1 %arg35, i1 %arg37, f32 %arg36, f32 %arg38, i1 %arg29, f32 %arg30, f32 %arg32, i1 %arg31, f32 %arg33, f32* %arg34, f32 %arg39, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, i1 %arg25 ];
^if.then5([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, [8 * [8 * f32]]* %arg4, f32* %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32 %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, i1 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fdiv f32 %arg21, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg21, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then7 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg4, i32 %arg3, [8 * [8 * f32]]* %arg8, f32* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %4, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg29, i1 %arg27, f32 %arg28, f32 %arg31, f32 %arg32, f32 %arg30 ], [ ^indirect8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg4, i32 %arg3, [8 * [8 * f32]]* %arg8, f32* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %4, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg29, i1 %arg27, f32 %arg28, f32 %arg31, f32 %arg32, f32 %arg30 ];
^indirect7(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, f32 %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, [8 * [8 * f32]]* %arg8, f32* %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33):
    i1 %0 = fcmp lt f32 %arg, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then5 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg7, [8 * [8 * f32]]* %arg8, f32* %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg6, i32 %arg4, f32 %arg5, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg25, i1 %arg24, i1 %arg23, i1 %arg27, f32* %arg26, i1 %arg29, f32 %arg30, i1 %arg28, f32 %arg33, f32 %arg31, f32 %arg32 ], [ ^indirect9 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg7, [8 * [8 * f32]]* %arg8, f32* %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg6, i32 %arg4, f32 %arg5, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg25, i1 %arg24, i1 %arg23, i1 %arg27, f32* %arg26, i1 %arg29, f32 %arg30, i1 %arg28, f32 %arg33, f32 %arg31, f32 %arg32 ];
^if.then6([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, i32 %arg4, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg13, [8 * f32]* %arg14, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, f32 %arg24, f32 %arg25, i1 %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, i1 %arg31, f32 %arg32, f32 %arg33, f32* %arg34, i1 %arg35, i1 %arg36, f32 %arg37, f32 %arg38, i1 %arg39, i1 %arg40):
    f32 %0 = fadd f32 %arg24, f32 6.28319;
    ubr [ ^b16 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, f32 %arg9, f32 %arg10, i32 %arg4, [8 * [8 * f32]]* %arg3, [8 * f32]* %arg14, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg12, [8 * [8 * f32]]* %arg11, i32 %arg15, i32 %arg16, [8 * f32]* %arg17, [8 * f32]* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i1 %arg35, i1 %arg36, f32 %arg37, i1 %arg29, f32 %arg30, i1 %arg39, f32 %arg38, f32 %arg32, i1 %arg31, f32 %arg33, f32* %arg34, i1 %arg40, i1 %arg28, i1 %arg27, i1 %arg26, f32 %arg25 ];
^b16(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, f32* %arg5, [8 * [8 * f32]]* %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i1 %arg25, i1 %arg26, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, f32 %arg32, i1 %arg33, f32 %arg34, f32* %arg35, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, f32 %arg40):
    f32 %0 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %arg, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1);
    f32 %1 = ffma f32 %arg8, f32 %0, f32 %arg9;
    store f32* %arg5 with f32 %1;
    i32 %2 = add i32 %arg7, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg10;
    cbr i1 %3(prob = 0.97), [ ^while.body8 [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i32 %2, i1 %arg38, i1 %arg36, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, f32 %arg32, i1 %arg33, f32 %arg34, f32* %arg35, f32 %arg40, i1 %arg39, i1 %arg25, i1 %arg26, i1 %arg37 ], [ ^b7 [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, [8 * [8 * f32]]* %arg13, [8 * [8 * f32]]* %arg14, [8 * [8 * f32]]* %arg15, i32 %arg16, i32 %arg17, [8 * f32]* %arg18, [8 * f32]* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i1 %arg36, i1 %arg37, i1 %arg38, i1 %arg39, i1 %arg33, i1 %arg28, f32 %arg29, f32 %arg32, f32 %arg34, f32* %arg35, f32 %arg40, f32 %arg31, i1 %arg30, f32 %arg27, i1 %arg26, i1 %arg25 ];
^if.then7([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fsub f32 %arg21, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, [8 * [8 * f32]]* %arg7, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, f32 %arg6, f32 %arg3, [8 * [8 * f32]]* %arg4, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %0, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, i1 %arg28, f32 %arg29, i1 %arg27, f32 %arg32, f32 %arg30, f32 %arg31 ], [ ^b17 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg7, i32 %arg8, f32* %arg10, f32 %arg6, f32 %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg9, i32 %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32 ];
^indirect8([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    i1 %0 = fcmp lt f32 %arg21, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, [8 * [8 * f32]]* %arg7, i32 %arg8, [8 * [8 * f32]]* %arg9, f32* %arg10, f32 %arg6, f32 %arg3, [8 * [8 * f32]]* %arg4, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, i1 %arg28, f32 %arg29, i1 %arg27, f32 %arg32, f32 %arg30, f32 %arg31 ], [ ^b17 f32 %arg21, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg7, i32 %arg8, f32* %arg10, f32 %arg6, f32 %arg3, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg9, i32 %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32 ];
^indirect9([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, [8 * [8 * f32]]* %arg4, f32* %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32 %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, i1 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    i1 %0 = fcmp gt f32 %arg21, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then7 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg4, i32 %arg3, [8 * [8 * f32]]* %arg8, f32* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg29, i1 %arg27, f32 %arg28, f32 %arg31, f32 %arg32, f32 %arg30 ], [ ^indirect8 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg6, [8 * [8 * f32]]* %arg7, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg4, i32 %arg3, [8 * [8 * f32]]* %arg8, f32* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg29, i1 %arg27, f32 %arg28, f32 %arg31, f32 %arg32, f32 %arg30 ];
^if.then8([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, [8 * [8 * f32]]* %arg6, f32* %arg7, f32 %arg8, f32 %arg9, [8 * [8 * f32]]* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, i1 %arg27, f32 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fadd f32 %arg21, f32 6.28319;
    ubr [ ^b17 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg7, f32 %arg8, f32 %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg6, i32 %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg29, i1 %arg27, f32 %arg28, f32 %arg31, f32 %arg32, f32 %arg30 ];
^b17(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg10, i32 %arg11, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %arg, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1);
    f32 %1 = fmul f32 %arg8, f32 %0;
    f32 %2 = s2f i32 %arg11 to f32;
    f32 %3 = fadd f32 %2, f32 0.5;
    f32 %4 = fmul f32 %arg32, f32 %3;
    f32 %5 = s2f i32 %arg5 to f32;
    f32 %6 = fmul f32 %4, f32 %5;
    f32 %7 = fadd f32 %6, f32 1.5708;
    i1 %8 = fcmp gt f32 %7, f32 6.28319;
    cbr i1 %8(prob = 0.5), [ ^if.then9 [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg10, f32 %1, [8 * [8 * f32]]* %arg9, i32 %arg18, f32 %arg7, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %7, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, f32 %arg32, i1 %arg28, f32 %arg29, i1 %arg27, f32 %arg30, f32 %arg31 ], [ ^indirect10 f32 %7, [8 * [8 * f32]]* %arg4, [8 * [8 * f32]]* %arg9, [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, f32 %1, [8 * [8 * f32]]* %arg9, i32 %arg18, f32 %arg7, [8 * [8 * f32]]* %arg10, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %7, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg32, f32 %arg30, f32 %arg31 ];
^if.then9([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fdiv f32 %arg21, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg21, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then10 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg10, i32 %arg9, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg4, f32 %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %4, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg30, i1 %arg28, f32 %arg29, f32 %arg27, f32 %arg31, f32 %arg32 ], [ ^indirect11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg10, i32 %arg9, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg4, f32 %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %4, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg30, i1 %arg28, f32 %arg29, f32 %arg27, f32 %arg31, f32 %arg32 ];
^indirect10(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, f32 %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, i1 %arg27, i1 %arg28, i1 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33):
    i1 %0 = fcmp lt f32 %arg, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then9 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg25, i1 %arg24, i1 %arg23, i1 %arg27, f32* %arg26, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg28, f32 %arg32, f32 %arg33 ], [ ^indirect12 [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, f32 %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32 %arg10, [8 * [8 * f32]]* %arg11, [8 * [8 * f32]]* %arg4, i32 %arg5, f32* %arg6, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, f32 %arg22, i1 %arg25, i1 %arg24, i1 %arg23, i1 %arg27, f32* %arg26, f32 %arg31, i1 %arg29, f32 %arg30, i1 %arg28, f32 %arg32, f32 %arg33 ];
^if.then10([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, f32 %arg4, [8 * [8 * f32]]* %arg5, f32* %arg6, i32 %arg7, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg9, f32 %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fsub f32 %arg21, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg8, i32 %arg7, [8 * [8 * f32]]* %arg9, f32 %arg10, f32 %arg4, i32 %arg3, [8 * [8 * f32]]* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %0, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, f32 %arg30, i1 %arg28, f32 %arg29, i1 %arg27, f32 %arg31, f32 %arg32 ], [ ^b18 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg8, i32 %arg7, [8 * [8 * f32]]* %arg9, f32 %arg10, f32 %arg4, i32 %arg3, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32 ];
^indirect11([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg3, f32 %arg4, [8 * [8 * f32]]* %arg5, f32* %arg6, i32 %arg7, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg9, f32 %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    i1 %0 = fcmp lt f32 %arg21, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg6, [8 * [8 * f32]]* %arg8, i32 %arg7, [8 * [8 * f32]]* %arg9, f32 %arg10, f32 %arg4, i32 %arg3, [8 * [8 * f32]]* %arg5, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, f32 %arg30, i1 %arg28, f32 %arg29, i1 %arg27, f32 %arg31, f32 %arg32 ], [ ^b18 f32 %arg21, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg8, i32 %arg7, [8 * [8 * f32]]* %arg9, f32 %arg10, f32 %arg4, i32 %arg3, [8 * [8 * f32]]* %arg5, f32* %arg6, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32 ];
^indirect12([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32 %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, [8 * [8 * f32]]* %arg8, i32 %arg9, f32* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, f32 %arg32):
    i1 %0 = fcmp gt f32 %arg21, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then10 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg10, i32 %arg9, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg4, f32 %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg30, i1 %arg28, f32 %arg29, f32 %arg27, f32 %arg31, f32 %arg32 ], [ ^indirect11 [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, i32 %arg5, f32 %arg6, [8 * [8 * f32]]* %arg7, f32* %arg10, i32 %arg9, [8 * [8 * f32]]* %arg8, [8 * [8 * f32]]* %arg4, f32 %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg30, i1 %arg28, f32 %arg29, f32 %arg27, f32 %arg31, f32 %arg32 ];
^if.then11([8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, f32* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, [8 * [8 * f32]]* %arg6, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, i1 %arg25, f32* %arg26, f32 %arg27, i1 %arg28, f32 %arg29, i1 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = fadd f32 %arg21, f32 6.28319;
    ubr [ ^b18 f32 %0, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg, [8 * [8 * f32]]* %arg4, i32 %arg5, [8 * [8 * f32]]* %arg6, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, f32* %arg3, [8 * f32]* %arg11, i32 %arg12, i32 %arg13, [8 * f32]* %arg14, [8 * f32]* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i1 %arg24, i1 %arg23, i1 %arg22, f32* %arg26, i1 %arg25, i1 %arg30, i1 %arg28, f32 %arg29, f32 %arg27, f32 %arg31, f32 %arg32 ];
^b18(f32 %arg, [8 * [8 * f32]]* %arg1, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg4, i32 %arg5, [8 * [8 * f32]]* %arg6, f32 %arg7, f32 %arg8, i32 %arg9, [8 * [8 * f32]]* %arg10, f32* %arg11, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32):
    f32 %0 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %arg, [8 * [8 * f32]]* %arg3, [8 * [8 * f32]]* %arg2, [8 * [8 * f32]]* %arg1);
    f32 %1 = ffma f32 %arg7, f32 %0, f32 %arg8;
    store f32* %arg11 with f32 %1;
    i32 %2 = add i32 %arg5, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg9;
    cbr i1 %3(prob = 0.97), [ ^while.body20 [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg4, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %2, i1 %arg22, i1 %arg23, i1 %arg24, f32* %arg25, i1 %arg26, i1 %arg27, i1 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32 ], [ ^b15 [8 * [8 * f32]]* %arg10, [8 * [8 * f32]]* %arg6, [8 * [8 * f32]]* %arg4, [8 * f32]* %arg12, i32 %arg13, i32 %arg14, [8 * f32]* %arg15, [8 * f32]* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg26, f32* %arg25, f32 %arg30, i1 %arg28, f32 %arg29, f32 %arg32, f32 %arg31, i1 %arg27 ];
}
