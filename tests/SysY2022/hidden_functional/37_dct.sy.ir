internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 4, f32 %5;
    f32 %7 = fmul f32 %6, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 3, f32 %5;
    f32 %10 = fsub f32 %9, f32 %8;
    ubr ^b1;
  ^b1:
    f32 %11 = phi [^entry, f32 %x] [^b, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %0, i32 5;
    i1 %4 = scmp gt i32 %1, i32 5;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = scmp gt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    f32 %10 = s2f i32 %0 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = scmp gt i32 %0, i32 %17;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %13)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b2;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = scmp gt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %26 = scmp gt i32 %1, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %28 = scmp gt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b3;
  ^while.body2:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %44];
    i1 %33 = scmp gt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
  ^while.header4:
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %56];
    i1 %35 = scmp gt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0][i64 0];
    i1 %39 = scmp gt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %13)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body5, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %44 = add i32 %32, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %45 = phi [^while.body3, i32 1] [^while.body5, i32 %48];
    call (i32) -> void @putch(i32 32);
    f32* %46 = getelementptr &([8 * f32]* %40)[i64 0][i32 %45];
    f32 %47 = load f32* %46;
    call (f32) -> void @putfloat(f32 %47);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp gt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b6;
  ^while.header5:
    i32 %50 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %51 = s2f i32 %50 to f32;
    f32 %52 = fadd f32 %51, f32 0.5;
    f32 %53 = fmul f32 %11, f32 %52;
    i1 %54 = scmp gt i32 %0, i32 %50;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %37)[i32 %50];
    cbr i1 %54(prob = 0.97), ^while.header6, ^while.header7;
  ^b7:
    i32 %56 = add i32 %34, i32 1;
    ubr ^while.header4;
  ^indirect1:
    f32 %57 = s2f i32 %34 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %11, f32 %58;
    f32 %60 = fmul f32 %59, f32 %20;
    f32 %61 = fadd f32 %60, f32 1.5708;
    i1 %62 = fcmp gt f32 %61, f32 6.28319;
    i1 %63 = fcmp lt f32 %61, f32 -6.28319;
    i1 %64 = or i1 %62, i1 %63;
    [8 * f32]* %65 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %64(prob = 0.5), ^if.then, ^b8;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b14, i32 %148];
    i1 %67 = scmp gt i32 %1, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b9;
  ^while.header7:
    i32 %68 = phi [^while.header5, i32 0] [^b11, i32 %104];
    i1 %69 = scmp gt i32 %0, i32 %68;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %61, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %61, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^indirect1, f32 %61] [^if.then, f32 %74];
    i1 %76 = fcmp gt f32 %75, f32 3.14159;
    f32 %77 = fsub f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    i1 %79 = fcmp lt f32 %78, f32 -3.14159;
    f32 %80 = fadd f32 %78, f32 6.28319;
    f32 %81 = select i1 %79 ? f32 %80 : f32 %78;
    f32 %82 = call (f32) -> f32 @my_sin_impl(f32 %81);
    f32 %83 = load f32* %29;
    ubr ^while.body8;
  ^b9:
    i32 %84 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32* %85 = getelementptr &([8 * f32]* %55)[i64 0][i32 %66];
    f32 %86 = load f32* %38;
    f32 %87 = fmul f32 0.25, f32 %86;
    store f32* %85 with f32 %87;
    cbr i1 %39(prob = 0.97), ^super.header, ^b12;
  ^while.body7:
    [8 * f32]* %88 = getelementptr &([8 * f32]* %37)[i32 %68];
    f32* %89 = getelementptr &([8 * f32]* %88)[i64 0][i64 0];
    f32 %90 = load f32* %89;
    call (f32) -> void @putfloat(f32 %90);
    cbr i1 %26(prob = 0.97), ^while.body9, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body8:
    f32 %91 = phi [^b8, f32 %83] [^b13, f32 %129];
    i32 %92 = phi [^b8, i32 0] [^b13, i32 %130];
    f32 %93 = s2f i32 %92 to f32;
    f32 %94 = fadd f32 %93, f32 0.5;
    f32 %95 = fmul f32 %9, f32 %94;
    f32 %96 = fmul f32 %95, f32 %30;
    f32 %97 = fadd f32 %96, f32 1.5708;
    i1 %98 = fcmp gt f32 %97, f32 6.28319;
    i1 %99 = fcmp lt f32 %97, f32 -6.28319;
    i1 %100 = or i1 %98, i1 %99;
    f32* %101 = getelementptr &([8 * f32]* %65)[i64 0][i32 %92];
    f32 %102 = load f32* %101;
    f32 %103 = fmul f32 %102, f32 %82;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b13;
  ^super.header:
    cbr i1 %3(prob = 0.89), ^indirect2, ^indirect3;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %104 = add i32 %68, i32 1;
    ubr ^while.header7;
  ^b12:
    f32 %105 = s2f i32 %66 to f32;
    f32 %106 = fadd f32 %105, f32 0.5;
    f32 %107 = fmul f32 %9, f32 %106;
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header8;
  ^while.body9:
    i32 %108 = phi [^while.body7, i32 1] [^while.body9, i32 %111];
    call (i32) -> void @putch(i32 32);
    f32* %109 = getelementptr &([8 * f32]* %88)[i64 0][i32 %108];
    f32 %110 = load f32* %109;
    call (f32) -> void @putfloat(f32 %110);
    i32 %111 = add i32 %108, i32 1;
    i1 %112 = scmp gt i32 %1, i32 %111;
    cbr i1 %112(prob = 0.97), ^while.body9, ^b11;
  ^if.then1:
    f32 %113 = fdiv f32 %97, f32 6.28319;
    i32 %114 = f2s f32 %113 to i32;
    f32 %115 = s2f i32 %114 to f32;
    f32 %116 = fmul f32 %115, f32 6.28319;
    f32 %117 = fsub f32 %97, f32 %116;
    ubr ^b13;
  ^indirect2:
    f32 %118 = load f32* %85;
    ubr ^super.header2;
  ^indirect3:
    f32 %119 = load f32* %85;
    ubr ^indirect4;
  ^b13:
    f32 %120 = phi [^while.body8, f32 %97] [^if.then1, f32 %117];
    i1 %121 = fcmp gt f32 %120, f32 3.14159;
    f32 %122 = fsub f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    i1 %124 = fcmp lt f32 %123, f32 -3.14159;
    f32 %125 = fadd f32 %123, f32 6.28319;
    f32 %126 = select i1 %124 ? f32 %125 : f32 %123;
    f32 %127 = call (f32) -> f32 @my_sin_impl(f32 %126);
    f32 %128 = fmul f32 %103, f32 %127;
    f32 %129 = fadd f32 %91, f32 %128;
    store f32* %29 with f32 %129;
    i32 %130 = add i32 %92, i32 1;
    i1 %131 = scmp gt i32 %1, i32 %130;
    cbr i1 %131(prob = 0.97), ^while.body8, ^b7;
  ^super.header1:
    cbr i1 %4(prob = 0.89), ^indirect5, ^indirect6;
  ^while.header8:
    i32 %132 = phi [^b12, i32 1] [^b15, i32 %232] [^while.body23, i32 1];
    i1 %133 = scmp gt i32 %0, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.body10, ^b14;
  ^indirect4:
    f32 %134 = phi [^indirect3, f32 %119] [^while.body15, f32 %422];
    i32 %135 = phi [^indirect3, i32 1] [^while.body15, i32 %404];
    ubr ^super.header5;
  ^indirect5:
    f32 %136 = load f32* %85;
    ubr ^super.header4;
  ^super.header2:
    f32 %137 = phi [^indirect2, f32 %118] [^while.body11, f32 %214];
    i32 %138 = phi [^indirect2, i32 5] [^while.body11, i32 %140];
    i32 %139 = phi [^indirect2, i32 1] [^while.body11, i32 %215];
    i32 %140 = add i32 %138, i32 16;
    i1 %141 = scmp gt i32 %0, i32 %140;
    cbr i1 %141(prob = 0.89), ^while.body11, ^super.header3;
  ^indirect6:
    f32 %142 = load f32* %85;
    ubr ^indirect7;
  ^b14:
    f32 %143 = load f32* %85;
    f32 %144 = fadd f32 %143, f32 %143;
    f32 %145 = fdiv f32 %144, f32 %10;
    f32 %146 = fadd f32 %145, f32 %145;
    f32 %147 = fdiv f32 %146, f32 %8;
    store f32* %85 with f32 %147;
    i32 %148 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^while.body10:
    cbr i1 %26(prob = 0.97), ^indirect8, ^b15;
  ^while.body11:
    [8 * f32]* %149 = getelementptr &([8 * f32]* %13)[i32 %139];
    f32* %150 = getelementptr &([8 * f32]* %149)[i64 0][i64 0];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 0.5, f32 %151;
    f32 %153 = fadd f32 %137, f32 %152;
    f32* %154 = getelementptr &([8 * f32]* %149)[i64 1][i64 0];
    f32 %155 = load f32* %154;
    f32 %156 = fmul f32 0.5, f32 %155;
    f32 %157 = fadd f32 %153, f32 %156;
    f32* %158 = getelementptr &([8 * f32]* %149)[i64 2][i64 0];
    f32 %159 = load f32* %158;
    f32 %160 = fmul f32 0.5, f32 %159;
    f32 %161 = fadd f32 %157, f32 %160;
    f32* %162 = getelementptr &([8 * f32]* %149)[i64 3][i64 0];
    f32 %163 = load f32* %162;
    f32 %164 = fmul f32 0.5, f32 %163;
    f32 %165 = fadd f32 %161, f32 %164;
    [8 * f32]* %166 = getelementptr &([8 * f32]* %13)[i32 %138];
    f32* %167 = getelementptr &([8 * f32]* %166)[i64 0][i64 0];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 0.5, f32 %168;
    f32 %170 = fadd f32 %165, f32 %169;
    f32* %171 = getelementptr &([8 * f32]* %166)[i64 1][i64 0];
    f32 %172 = load f32* %171;
    f32 %173 = fmul f32 0.5, f32 %172;
    f32 %174 = fadd f32 %170, f32 %173;
    f32* %175 = getelementptr &([8 * f32]* %166)[i64 2][i64 0];
    f32 %176 = load f32* %175;
    f32 %177 = fmul f32 0.5, f32 %176;
    f32 %178 = fadd f32 %174, f32 %177;
    f32* %179 = getelementptr &([8 * f32]* %166)[i64 3][i64 0];
    f32 %180 = load f32* %179;
    f32 %181 = fmul f32 0.5, f32 %180;
    f32 %182 = fadd f32 %178, f32 %181;
    f32* %183 = getelementptr &([8 * f32]* %166)[i64 4][i64 0];
    f32 %184 = load f32* %183;
    f32 %185 = fmul f32 0.5, f32 %184;
    f32 %186 = fadd f32 %182, f32 %185;
    f32* %187 = getelementptr &([8 * f32]* %166)[i64 5][i64 0];
    f32 %188 = load f32* %187;
    f32 %189 = fmul f32 0.5, f32 %188;
    f32 %190 = fadd f32 %186, f32 %189;
    f32* %191 = getelementptr &([8 * f32]* %166)[i64 6][i64 0];
    f32 %192 = load f32* %191;
    f32 %193 = fmul f32 0.5, f32 %192;
    f32 %194 = fadd f32 %190, f32 %193;
    f32* %195 = getelementptr &([8 * f32]* %166)[i64 7][i64 0];
    f32 %196 = load f32* %195;
    f32 %197 = fmul f32 0.5, f32 %196;
    f32 %198 = fadd f32 %194, f32 %197;
    f32* %199 = getelementptr &([8 * f32]* %166)[i64 8][i64 0];
    f32 %200 = load f32* %199;
    f32 %201 = fmul f32 0.5, f32 %200;
    f32 %202 = fadd f32 %198, f32 %201;
    f32* %203 = getelementptr &([8 * f32]* %166)[i64 9][i64 0];
    f32 %204 = load f32* %203;
    f32 %205 = fmul f32 0.5, f32 %204;
    f32 %206 = fadd f32 %202, f32 %205;
    f32* %207 = getelementptr &([8 * f32]* %166)[i64 10][i64 0];
    f32 %208 = load f32* %207;
    f32 %209 = fmul f32 0.5, f32 %208;
    f32 %210 = fadd f32 %206, f32 %209;
    f32* %211 = getelementptr &([8 * f32]* %166)[i64 11][i64 0];
    f32 %212 = load f32* %211;
    f32 %213 = fmul f32 0.5, f32 %212;
    f32 %214 = fadd f32 %210, f32 %213;
    i32 %215 = add i32 %138, i32 12;
    ubr ^super.header2;
  ^indirect7:
    f32 %216 = phi [^indirect6, f32 %142] [^while.body19, f32 %554];
    i32 %217 = phi [^indirect6, i32 1] [^while.body19, i32 %537];
    ubr ^super.header8;
  ^super.header3:
    f32 %218 = phi [^super.header2, f32 %137] [^while.body12, f32 %305];
    i32 %219 = phi [^super.header2, i32 %138] [^while.body12, i32 %221];
    i32 %220 = phi [^super.header2, i32 %139] [^while.body12, i32 %306];
    i32 %221 = add i32 %219, i32 16;
    i1 %222 = scmp gt i32 %0, i32 %221;
    cbr i1 %222(prob = 0.89), ^while.body12, ^while.body15;
  ^super.header4:
    f32 %223 = phi [^indirect5, f32 %136] [^while.body13, f32 %370];
    i32 %224 = phi [^indirect5, i32 5] [^while.body13, i32 %226];
    i32 %225 = phi [^indirect5, i32 1] [^while.body13, i32 %371];
    i32 %226 = add i32 %224, i32 16;
    i1 %227 = scmp gt i32 %1, i32 %226;
    cbr i1 %227(prob = 0.89), ^while.body13, ^super.header6;
  ^super.header5:
    f32 %228 = phi [^indirect4, f32 %134] [^while.body14, f32 %388];
    i32 %229 = phi [^indirect4, i32 %135] [^while.body14, i32 %230];
    i32 %230 = add i32 %229, i32 4;
    i1 %231 = scmp gt i32 %0, i32 %230;
    cbr i1 %231(prob = 0.89), ^while.body14, ^super.header7;
  ^b15:
    i32 %232 = add i32 %132, i32 1;
    ubr ^while.header8;
  ^indirect8:
    f32 %233 = s2f i32 %132 to f32;
    f32 %234 = fmul f32 %53, f32 %233;
    f32 %235 = fadd f32 %234, f32 1.5708;
    i1 %236 = fcmp gt f32 %235, f32 6.28319;
    i1 %237 = fcmp lt f32 %235, f32 -6.28319;
    i1 %238 = or i1 %236, i1 %237;
    [8 * f32]* %239 = getelementptr &([8 * f32]* %13)[i32 %132];
    cbr i1 %238(prob = 0.5), ^if.then2, ^b16;
  ^while.body12:
    [8 * f32]* %240 = getelementptr &([8 * f32]* %13)[i32 %220];
    f32* %241 = getelementptr &([8 * f32]* %240)[i64 0][i64 0];
    f32 %242 = load f32* %241;
    f32 %243 = fmul f32 0.5, f32 %242;
    f32 %244 = fadd f32 %218, f32 %243;
    f32* %245 = getelementptr &([8 * f32]* %240)[i64 1][i64 0];
    f32 %246 = load f32* %245;
    f32 %247 = fmul f32 0.5, f32 %246;
    f32 %248 = fadd f32 %244, f32 %247;
    f32* %249 = getelementptr &([8 * f32]* %240)[i64 2][i64 0];
    f32 %250 = load f32* %249;
    f32 %251 = fmul f32 0.5, f32 %250;
    f32 %252 = fadd f32 %248, f32 %251;
    f32* %253 = getelementptr &([8 * f32]* %240)[i64 3][i64 0];
    f32 %254 = load f32* %253;
    f32 %255 = fmul f32 0.5, f32 %254;
    f32 %256 = fadd f32 %252, f32 %255;
    [8 * f32]* %257 = getelementptr &([8 * f32]* %13)[i32 %219];
    f32* %258 = getelementptr &([8 * f32]* %257)[i64 0][i64 0];
    f32 %259 = load f32* %258;
    f32 %260 = fmul f32 0.5, f32 %259;
    f32 %261 = fadd f32 %256, f32 %260;
    f32* %262 = getelementptr &([8 * f32]* %257)[i64 1][i64 0];
    f32 %263 = load f32* %262;
    f32 %264 = fmul f32 0.5, f32 %263;
    f32 %265 = fadd f32 %261, f32 %264;
    f32* %266 = getelementptr &([8 * f32]* %257)[i64 2][i64 0];
    f32 %267 = load f32* %266;
    f32 %268 = fmul f32 0.5, f32 %267;
    f32 %269 = fadd f32 %265, f32 %268;
    f32* %270 = getelementptr &([8 * f32]* %257)[i64 3][i64 0];
    f32 %271 = load f32* %270;
    f32 %272 = fmul f32 0.5, f32 %271;
    f32 %273 = fadd f32 %269, f32 %272;
    f32* %274 = getelementptr &([8 * f32]* %257)[i64 4][i64 0];
    f32 %275 = load f32* %274;
    f32 %276 = fmul f32 0.5, f32 %275;
    f32 %277 = fadd f32 %273, f32 %276;
    f32* %278 = getelementptr &([8 * f32]* %257)[i64 5][i64 0];
    f32 %279 = load f32* %278;
    f32 %280 = fmul f32 0.5, f32 %279;
    f32 %281 = fadd f32 %277, f32 %280;
    f32* %282 = getelementptr &([8 * f32]* %257)[i64 6][i64 0];
    f32 %283 = load f32* %282;
    f32 %284 = fmul f32 0.5, f32 %283;
    f32 %285 = fadd f32 %281, f32 %284;
    f32* %286 = getelementptr &([8 * f32]* %257)[i64 7][i64 0];
    f32 %287 = load f32* %286;
    f32 %288 = fmul f32 0.5, f32 %287;
    f32 %289 = fadd f32 %285, f32 %288;
    f32* %290 = getelementptr &([8 * f32]* %257)[i64 8][i64 0];
    f32 %291 = load f32* %290;
    f32 %292 = fmul f32 0.5, f32 %291;
    f32 %293 = fadd f32 %289, f32 %292;
    f32* %294 = getelementptr &([8 * f32]* %257)[i64 9][i64 0];
    f32 %295 = load f32* %294;
    f32 %296 = fmul f32 0.5, f32 %295;
    f32 %297 = fadd f32 %293, f32 %296;
    f32* %298 = getelementptr &([8 * f32]* %257)[i64 10][i64 0];
    f32 %299 = load f32* %298;
    f32 %300 = fmul f32 0.5, f32 %299;
    f32 %301 = fadd f32 %297, f32 %300;
    f32* %302 = getelementptr &([8 * f32]* %257)[i64 11][i64 0];
    f32 %303 = load f32* %302;
    f32 %304 = fmul f32 0.5, f32 %303;
    f32 %305 = fadd f32 %301, f32 %304;
    i32 %306 = add i32 %219, i32 12;
    ubr ^super.header3;
  ^while.body13:
    f32* %307 = getelementptr &([8 * f32]* %13)[i64 0][i32 %225];
    f32 %308 = load f32* %307;
    f32 %309 = fmul f32 0.5, f32 %308;
    f32 %310 = fadd f32 %223, f32 %309;
    f32* %311 = getelementptr &(f32* %307)[i64 1];
    f32 %312 = load f32* %311;
    f32 %313 = fmul f32 0.5, f32 %312;
    f32 %314 = fadd f32 %310, f32 %313;
    f32* %315 = getelementptr &(f32* %307)[i64 2];
    f32 %316 = load f32* %315;
    f32 %317 = fmul f32 0.5, f32 %316;
    f32 %318 = fadd f32 %314, f32 %317;
    f32* %319 = getelementptr &(f32* %307)[i64 3];
    f32 %320 = load f32* %319;
    f32 %321 = fmul f32 0.5, f32 %320;
    f32 %322 = fadd f32 %318, f32 %321;
    f32* %323 = getelementptr &([8 * f32]* %13)[i64 0][i32 %224];
    f32 %324 = load f32* %323;
    f32 %325 = fmul f32 0.5, f32 %324;
    f32 %326 = fadd f32 %322, f32 %325;
    f32* %327 = getelementptr &(f32* %323)[i64 1];
    f32 %328 = load f32* %327;
    f32 %329 = fmul f32 0.5, f32 %328;
    f32 %330 = fadd f32 %326, f32 %329;
    f32* %331 = getelementptr &(f32* %323)[i64 2];
    f32 %332 = load f32* %331;
    f32 %333 = fmul f32 0.5, f32 %332;
    f32 %334 = fadd f32 %330, f32 %333;
    f32* %335 = getelementptr &(f32* %323)[i64 3];
    f32 %336 = load f32* %335;
    f32 %337 = fmul f32 0.5, f32 %336;
    f32 %338 = fadd f32 %334, f32 %337;
    f32* %339 = getelementptr &(f32* %323)[i64 4];
    f32 %340 = load f32* %339;
    f32 %341 = fmul f32 0.5, f32 %340;
    f32 %342 = fadd f32 %338, f32 %341;
    f32* %343 = getelementptr &(f32* %323)[i64 5];
    f32 %344 = load f32* %343;
    f32 %345 = fmul f32 0.5, f32 %344;
    f32 %346 = fadd f32 %342, f32 %345;
    f32* %347 = getelementptr &(f32* %323)[i64 6];
    f32 %348 = load f32* %347;
    f32 %349 = fmul f32 0.5, f32 %348;
    f32 %350 = fadd f32 %346, f32 %349;
    f32* %351 = getelementptr &(f32* %323)[i64 7];
    f32 %352 = load f32* %351;
    f32 %353 = fmul f32 0.5, f32 %352;
    f32 %354 = fadd f32 %350, f32 %353;
    f32* %355 = getelementptr &(f32* %323)[i64 8];
    f32 %356 = load f32* %355;
    f32 %357 = fmul f32 0.5, f32 %356;
    f32 %358 = fadd f32 %354, f32 %357;
    f32* %359 = getelementptr &(f32* %323)[i64 9];
    f32 %360 = load f32* %359;
    f32 %361 = fmul f32 0.5, f32 %360;
    f32 %362 = fadd f32 %358, f32 %361;
    f32* %363 = getelementptr &(f32* %323)[i64 10];
    f32 %364 = load f32* %363;
    f32 %365 = fmul f32 0.5, f32 %364;
    f32 %366 = fadd f32 %362, f32 %365;
    f32* %367 = getelementptr &(f32* %323)[i64 11];
    f32 %368 = load f32* %367;
    f32 %369 = fmul f32 0.5, f32 %368;
    f32 %370 = fadd f32 %366, f32 %369;
    i32 %371 = add i32 %224, i32 12;
    ubr ^super.header4;
  ^while.body14:
    [8 * f32]* %372 = getelementptr &([8 * f32]* %13)[i32 %229];
    f32* %373 = getelementptr &([8 * f32]* %372)[i64 0][i64 0];
    f32 %374 = load f32* %373;
    f32 %375 = fmul f32 0.5, f32 %374;
    f32 %376 = fadd f32 %228, f32 %375;
    f32* %377 = getelementptr &([8 * f32]* %372)[i64 1][i64 0];
    f32 %378 = load f32* %377;
    f32 %379 = fmul f32 0.5, f32 %378;
    f32 %380 = fadd f32 %376, f32 %379;
    f32* %381 = getelementptr &([8 * f32]* %372)[i64 2][i64 0];
    f32 %382 = load f32* %381;
    f32 %383 = fmul f32 0.5, f32 %382;
    f32 %384 = fadd f32 %380, f32 %383;
    f32* %385 = getelementptr &([8 * f32]* %372)[i64 3][i64 0];
    f32 %386 = load f32* %385;
    f32 %387 = fmul f32 0.5, f32 %386;
    f32 %388 = fadd f32 %384, f32 %387;
    ubr ^super.header5;
  ^if.then2:
    f32 %389 = fdiv f32 %235, f32 6.28319;
    i32 %390 = f2s f32 %389 to i32;
    f32 %391 = s2f i32 %390 to f32;
    f32 %392 = fmul f32 %391, f32 6.28319;
    f32 %393 = fsub f32 %235, f32 %392;
    ubr ^b16;
  ^b16:
    f32 %394 = phi [^indirect8, f32 %235] [^if.then2, f32 %393];
    i1 %395 = fcmp gt f32 %394, f32 3.14159;
    f32 %396 = fsub f32 %394, f32 6.28319;
    f32 %397 = select i1 %395 ? f32 %396 : f32 %394;
    i1 %398 = fcmp lt f32 %397, f32 -3.14159;
    f32 %399 = fadd f32 %397, f32 6.28319;
    f32 %400 = select i1 %398 ? f32 %399 : f32 %397;
    f32 %401 = call (f32) -> f32 @my_sin_impl(f32 %400);
    f32 %402 = load f32* %85;
    ubr ^while.body21;
  ^while.body15:
    f32 %403 = phi [^super.header3, f32 %218] [^while.body15, f32 %422];
    i32 %404 = phi [^super.header3, i32 %219] [^while.body15, i32 %423];
    i32 %405 = phi [^super.header3, i32 %220] [^while.body15, i32 %404];
    [8 * f32]* %406 = getelementptr &([8 * f32]* %13)[i32 %405];
    f32* %407 = getelementptr &([8 * f32]* %406)[i64 0][i64 0];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 0.5, f32 %408;
    f32 %410 = fadd f32 %403, f32 %409;
    f32* %411 = getelementptr &([8 * f32]* %406)[i64 1][i64 0];
    f32 %412 = load f32* %411;
    f32 %413 = fmul f32 0.5, f32 %412;
    f32 %414 = fadd f32 %410, f32 %413;
    f32* %415 = getelementptr &([8 * f32]* %406)[i64 2][i64 0];
    f32 %416 = load f32* %415;
    f32 %417 = fmul f32 0.5, f32 %416;
    f32 %418 = fadd f32 %414, f32 %417;
    f32* %419 = getelementptr &([8 * f32]* %406)[i64 3][i64 0];
    f32 %420 = load f32* %419;
    f32 %421 = fmul f32 0.5, f32 %420;
    f32 %422 = fadd f32 %418, f32 %421;
    i32 %423 = add i32 %404, i32 4;
    i1 %424 = scmp gt i32 %0, i32 %423;
    cbr i1 %424(prob = 0.89), ^while.body15, ^indirect4;
  ^super.header6:
    f32 %425 = phi [^super.header4, f32 %223] [^while.body16, f32 %501];
    i32 %426 = phi [^super.header4, i32 %224] [^while.body16, i32 %428];
    i32 %427 = phi [^super.header4, i32 %225] [^while.body16, i32 %502];
    i32 %428 = add i32 %426, i32 16;
    i1 %429 = scmp gt i32 %1, i32 %428;
    cbr i1 %429(prob = 0.89), ^while.body16, ^while.body19;
  ^super.header7:
    f32 %430 = phi [^super.header5, f32 %228] [^while.body17, f32 %519];
    i32 %431 = phi [^super.header5, i32 %229] [^while.body17, i32 %432];
    i32 %432 = add i32 %431, i32 4;
    i1 %433 = scmp gt i32 %0, i32 %432;
    cbr i1 %433(prob = 0.89), ^while.body17, ^while.body20;
  ^super.header8:
    f32 %434 = phi [^indirect7, f32 %216] [^while.body18, f32 %535];
    i32 %435 = phi [^indirect7, i32 %217] [^while.body18, i32 %436];
    i32 %436 = add i32 %435, i32 4;
    i1 %437 = scmp gt i32 %1, i32 %436;
    cbr i1 %437(prob = 0.89), ^while.body18, ^super.header9;
  ^while.body16:
    f32* %438 = getelementptr &([8 * f32]* %13)[i64 0][i32 %427];
    f32 %439 = load f32* %438;
    f32 %440 = fmul f32 0.5, f32 %439;
    f32 %441 = fadd f32 %425, f32 %440;
    f32* %442 = getelementptr &(f32* %438)[i64 1];
    f32 %443 = load f32* %442;
    f32 %444 = fmul f32 0.5, f32 %443;
    f32 %445 = fadd f32 %441, f32 %444;
    f32* %446 = getelementptr &(f32* %438)[i64 2];
    f32 %447 = load f32* %446;
    f32 %448 = fmul f32 0.5, f32 %447;
    f32 %449 = fadd f32 %445, f32 %448;
    f32* %450 = getelementptr &(f32* %438)[i64 3];
    f32 %451 = load f32* %450;
    f32 %452 = fmul f32 0.5, f32 %451;
    f32 %453 = fadd f32 %449, f32 %452;
    f32* %454 = getelementptr &([8 * f32]* %13)[i64 0][i32 %426];
    f32 %455 = load f32* %454;
    f32 %456 = fmul f32 0.5, f32 %455;
    f32 %457 = fadd f32 %453, f32 %456;
    f32* %458 = getelementptr &(f32* %454)[i64 1];
    f32 %459 = load f32* %458;
    f32 %460 = fmul f32 0.5, f32 %459;
    f32 %461 = fadd f32 %457, f32 %460;
    f32* %462 = getelementptr &(f32* %454)[i64 2];
    f32 %463 = load f32* %462;
    f32 %464 = fmul f32 0.5, f32 %463;
    f32 %465 = fadd f32 %461, f32 %464;
    f32* %466 = getelementptr &(f32* %454)[i64 3];
    f32 %467 = load f32* %466;
    f32 %468 = fmul f32 0.5, f32 %467;
    f32 %469 = fadd f32 %465, f32 %468;
    f32* %470 = getelementptr &(f32* %454)[i64 4];
    f32 %471 = load f32* %470;
    f32 %472 = fmul f32 0.5, f32 %471;
    f32 %473 = fadd f32 %469, f32 %472;
    f32* %474 = getelementptr &(f32* %454)[i64 5];
    f32 %475 = load f32* %474;
    f32 %476 = fmul f32 0.5, f32 %475;
    f32 %477 = fadd f32 %473, f32 %476;
    f32* %478 = getelementptr &(f32* %454)[i64 6];
    f32 %479 = load f32* %478;
    f32 %480 = fmul f32 0.5, f32 %479;
    f32 %481 = fadd f32 %477, f32 %480;
    f32* %482 = getelementptr &(f32* %454)[i64 7];
    f32 %483 = load f32* %482;
    f32 %484 = fmul f32 0.5, f32 %483;
    f32 %485 = fadd f32 %481, f32 %484;
    f32* %486 = getelementptr &(f32* %454)[i64 8];
    f32 %487 = load f32* %486;
    f32 %488 = fmul f32 0.5, f32 %487;
    f32 %489 = fadd f32 %485, f32 %488;
    f32* %490 = getelementptr &(f32* %454)[i64 9];
    f32 %491 = load f32* %490;
    f32 %492 = fmul f32 0.5, f32 %491;
    f32 %493 = fadd f32 %489, f32 %492;
    f32* %494 = getelementptr &(f32* %454)[i64 10];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 0.5, f32 %495;
    f32 %497 = fadd f32 %493, f32 %496;
    f32* %498 = getelementptr &(f32* %454)[i64 11];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 0.5, f32 %499;
    f32 %501 = fadd f32 %497, f32 %500;
    i32 %502 = add i32 %426, i32 12;
    ubr ^super.header6;
  ^while.body17:
    [8 * f32]* %503 = getelementptr &([8 * f32]* %13)[i32 %431];
    f32* %504 = getelementptr &([8 * f32]* %503)[i64 0][i64 0];
    f32 %505 = load f32* %504;
    f32 %506 = fmul f32 0.5, f32 %505;
    f32 %507 = fadd f32 %430, f32 %506;
    f32* %508 = getelementptr &([8 * f32]* %503)[i64 1][i64 0];
    f32 %509 = load f32* %508;
    f32 %510 = fmul f32 0.5, f32 %509;
    f32 %511 = fadd f32 %507, f32 %510;
    f32* %512 = getelementptr &([8 * f32]* %503)[i64 2][i64 0];
    f32 %513 = load f32* %512;
    f32 %514 = fmul f32 0.5, f32 %513;
    f32 %515 = fadd f32 %511, f32 %514;
    f32* %516 = getelementptr &([8 * f32]* %503)[i64 3][i64 0];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 0.5, f32 %517;
    f32 %519 = fadd f32 %515, f32 %518;
    ubr ^super.header7;
  ^while.body18:
    f32* %520 = getelementptr &([8 * f32]* %13)[i64 0][i32 %435];
    f32 %521 = load f32* %520;
    f32 %522 = fmul f32 0.5, f32 %521;
    f32 %523 = fadd f32 %434, f32 %522;
    f32* %524 = getelementptr &(f32* %520)[i64 1];
    f32 %525 = load f32* %524;
    f32 %526 = fmul f32 0.5, f32 %525;
    f32 %527 = fadd f32 %523, f32 %526;
    f32* %528 = getelementptr &(f32* %520)[i64 2];
    f32 %529 = load f32* %528;
    f32 %530 = fmul f32 0.5, f32 %529;
    f32 %531 = fadd f32 %527, f32 %530;
    f32* %532 = getelementptr &(f32* %520)[i64 3];
    f32 %533 = load f32* %532;
    f32 %534 = fmul f32 0.5, f32 %533;
    f32 %535 = fadd f32 %531, f32 %534;
    ubr ^super.header8;
  ^while.body19:
    f32 %536 = phi [^super.header6, f32 %425] [^while.body19, f32 %554];
    i32 %537 = phi [^super.header6, i32 %426] [^while.body19, i32 %555];
    i32 %538 = phi [^super.header6, i32 %427] [^while.body19, i32 %537];
    f32* %539 = getelementptr &([8 * f32]* %13)[i64 0][i32 %538];
    f32 %540 = load f32* %539;
    f32 %541 = fmul f32 0.5, f32 %540;
    f32 %542 = fadd f32 %536, f32 %541;
    f32* %543 = getelementptr &(f32* %539)[i64 1];
    f32 %544 = load f32* %543;
    f32 %545 = fmul f32 0.5, f32 %544;
    f32 %546 = fadd f32 %542, f32 %545;
    f32* %547 = getelementptr &(f32* %539)[i64 2];
    f32 %548 = load f32* %547;
    f32 %549 = fmul f32 0.5, f32 %548;
    f32 %550 = fadd f32 %546, f32 %549;
    f32* %551 = getelementptr &(f32* %539)[i64 3];
    f32 %552 = load f32* %551;
    f32 %553 = fmul f32 0.5, f32 %552;
    f32 %554 = fadd f32 %550, f32 %553;
    i32 %555 = add i32 %537, i32 4;
    i1 %556 = scmp gt i32 %1, i32 %555;
    cbr i1 %556(prob = 0.89), ^while.body19, ^indirect7;
  ^while.body20:
    f32 %557 = phi [^super.header7, f32 %430] [^while.body20, f32 %563];
    i32 %558 = phi [^super.header7, i32 %431] [^while.body20, i32 %564];
    [8 * f32]* %559 = getelementptr &([8 * f32]* %13)[i32 %558];
    f32* %560 = getelementptr &([8 * f32]* %559)[i64 0][i64 0];
    f32 %561 = load f32* %560;
    f32 %562 = fmul f32 0.5, f32 %561;
    f32 %563 = fadd f32 %557, f32 %562;
    store f32* %85 with f32 %563;
    i32 %564 = add i32 %558, i32 1;
    i1 %565 = scmp gt i32 %0, i32 %564;
    cbr i1 %565(prob = 0.97), ^while.body20, ^b12;
  ^super.header9:
    f32 %566 = phi [^super.header8, f32 %434] [^while.body22, f32 %596];
    i32 %567 = phi [^super.header8, i32 %435] [^while.body22, i32 %568];
    i32 %568 = add i32 %567, i32 4;
    i1 %569 = scmp gt i32 %1, i32 %568;
    cbr i1 %569(prob = 0.89), ^while.body22, ^while.body23;
  ^while.body21:
    f32 %570 = phi [^b16, f32 %402] [^b17, f32 %619];
    i32 %571 = phi [^b16, i32 1] [^b17, i32 %620];
    f32 %572 = s2f i32 %571 to f32;
    f32 %573 = fmul f32 %107, f32 %572;
    f32 %574 = fadd f32 %573, f32 1.5708;
    i1 %575 = fcmp gt f32 %574, f32 6.28319;
    i1 %576 = fcmp lt f32 %574, f32 -6.28319;
    i1 %577 = or i1 %575, i1 %576;
    f32* %578 = getelementptr &([8 * f32]* %239)[i64 0][i32 %571];
    f32 %579 = load f32* %578;
    f32 %580 = fmul f32 %579, f32 %401;
    cbr i1 %577(prob = 0.5), ^if.then3, ^b17;
  ^while.body22:
    f32* %581 = getelementptr &([8 * f32]* %13)[i64 0][i32 %567];
    f32 %582 = load f32* %581;
    f32 %583 = fmul f32 0.5, f32 %582;
    f32 %584 = fadd f32 %566, f32 %583;
    f32* %585 = getelementptr &(f32* %581)[i64 1];
    f32 %586 = load f32* %585;
    f32 %587 = fmul f32 0.5, f32 %586;
    f32 %588 = fadd f32 %584, f32 %587;
    f32* %589 = getelementptr &(f32* %581)[i64 2];
    f32 %590 = load f32* %589;
    f32 %591 = fmul f32 0.5, f32 %590;
    f32 %592 = fadd f32 %588, f32 %591;
    f32* %593 = getelementptr &(f32* %581)[i64 3];
    f32 %594 = load f32* %593;
    f32 %595 = fmul f32 0.5, f32 %594;
    f32 %596 = fadd f32 %592, f32 %595;
    ubr ^super.header9;
  ^if.then3:
    f32 %597 = fdiv f32 %574, f32 6.28319;
    i32 %598 = f2s f32 %597 to i32;
    f32 %599 = s2f i32 %598 to f32;
    f32 %600 = fmul f32 %599, f32 6.28319;
    f32 %601 = fsub f32 %574, f32 %600;
    ubr ^b17;
  ^while.body23:
    f32 %602 = phi [^super.header9, f32 %566] [^while.body23, f32 %607];
    i32 %603 = phi [^super.header9, i32 %567] [^while.body23, i32 %608];
    f32* %604 = getelementptr &([8 * f32]* %13)[i64 0][i32 %603];
    f32 %605 = load f32* %604;
    f32 %606 = fmul f32 0.5, f32 %605;
    f32 %607 = fadd f32 %602, f32 %606;
    store f32* %85 with f32 %607;
    i32 %608 = add i32 %603, i32 1;
    i1 %609 = scmp gt i32 %1, i32 %608;
    cbr i1 %609(prob = 0.97), ^while.body23, ^while.header8;
  ^b17:
    f32 %610 = phi [^while.body21, f32 %574] [^if.then3, f32 %601];
    i1 %611 = fcmp gt f32 %610, f32 3.14159;
    f32 %612 = fsub f32 %610, f32 6.28319;
    f32 %613 = select i1 %611 ? f32 %612 : f32 %610;
    i1 %614 = fcmp lt f32 %613, f32 -3.14159;
    f32 %615 = fadd f32 %613, f32 6.28319;
    f32 %616 = select i1 %614 ? f32 %615 : f32 %613;
    f32 %617 = call (f32) -> f32 @my_sin_impl(f32 %616);
    f32 %618 = fmul f32 %580, f32 %617;
    f32 %619 = fadd f32 %570, f32 %618;
    store f32* %85 with f32 %619;
    i32 %620 = add i32 %571, i32 1;
    i1 %621 = scmp gt i32 %1, i32 %620;
    cbr i1 %621(prob = 0.97), ^while.body21, ^b15;
}
