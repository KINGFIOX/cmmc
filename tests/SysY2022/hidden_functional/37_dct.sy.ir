internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp ogt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp ole f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    i1 %5 = fcmp ogt f32 %4, f32 0;
    f32 %6 = fneg f32 %4;
    f32 %7 = select i1 %5 ? f32 %4 : f32 %6;
    i1 %8 = fcmp ole f32 %7, f32 1e-06;
    cbr i1 %8(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %9 = phi [^entry, f32 %x] [^b2, f32 %15];
    ret f32 %9;
  ^b2:
    f32 %10 = phi [^b, f32 %4] [^b3, f32 %22];
    f32 %11 = fmul f32 %10, f32 4;
    f32 %12 = fmul f32 %11, f32 %10;
    f32 %13 = fmul f32 %12, f32 %10;
    f32 %14 = fmul f32 %10, f32 3;
    f32 %15 = fsub f32 %14, f32 %13;
    ubr ^b1;
  ^b3:
    f32 %16 = fdiv f32 %4, f32 3;
    f32 %17 = call (f32) -> f32 @my_sin_impl(f32 %16);
    f32 %18 = fmul f32 %17, f32 4;
    f32 %19 = fmul f32 %18, f32 %17;
    f32 %20 = fmul f32 %19, f32 %17;
    f32 %21 = fmul f32 %17, f32 3;
    f32 %22 = fsub f32 %21, f32 %20;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %0, i32 5;
    i1 %4 = icmp sgt i32 %1, i32 5;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.header1, ^b;
  ^b:
    f32 %8 = s2f i32 %0 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    f32 %10 = s2f i32 %1 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %2(prob = 0.97), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = icmp sgt i32 %0, i32 %17;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %13)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header3, ^b2;
  ^while.body:
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body, ^b1;
  ^b2:
    i1 %26 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %27 = phi [^while.header2, i32 0] [^b5, i32 %43];
    i1 %28 = icmp sgt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b3;
  ^while.body1:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %53];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b4;
  ^while.header5:
    i32 %34 = phi [^while.body1, i32 0] [^b12, i32 %130];
    i1 %35 = icmp sgt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^prebody1, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0][i64 0];
    i1 %39 = icmp sgt i32 %0, i32 1;
    ubr ^while.header6;
  ^while.body2:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %13)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body3, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header3;
  ^prebody1:
    f32 %44 = s2f i32 %34 to f32;
    f32 %45 = fadd f32 %44, f32 0.5;
    f32 %46 = fmul f32 %9, f32 %45;
    f32 %47 = fmul f32 %46, f32 %20;
    f32 %48 = fadd f32 %47, f32 1.5708;
    i1 %49 = fcmp ogt f32 %48, f32 6.28319;
    i1 %50 = fcmp olt f32 %48, f32 -6.28319;
    i1 %51 = or i1 %49, i1 %50;
    [8 * f32]* %52 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %51(prob = 0.5), ^if.then, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %53 = add i32 %32, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %54 = phi [^while.body2, i32 1] [^while.body3, i32 %57];
    call (i32) -> void @putch(i32 32);
    f32* %55 = getelementptr &([8 * f32]* %40)[i64 0][i32 %54];
    f32 %56 = load f32* %55;
    call (f32) -> void @putfloat(f32 %56);
    i32 %57 = add i32 %54, i32 1;
    i1 %58 = icmp sgt i32 %1, i32 %57;
    cbr i1 %58(prob = 0.97), ^while.body3, ^b6;
  ^while.header6:
    i32 %59 = phi [^b4, i32 0] [^b8, i32 %96];
    f32 %60 = s2f i32 %59 to f32;
    f32 %61 = fadd f32 %60, f32 0.5;
    f32 %62 = fmul f32 %9, f32 %61;
    i1 %63 = icmp sgt i32 %0, i32 %59;
    [8 * f32]* %64 = getelementptr &([8 * f32]* %37)[i32 %59];
    cbr i1 %63(prob = 0.97), ^while.header7, ^while.header8;
  ^if.then:
    f32 %65 = fdiv f32 %48, f32 6.28319;
    i32 %66 = f2s f32 %65 to i32;
    f32 %67 = s2f i32 %66 to f32;
    f32 %68 = fmul f32 %67, f32 6.28319;
    f32 %69 = fsub f32 %48, f32 %68;
    ubr ^b7;
  ^b7:
    f32 %70 = phi [^prebody1, f32 %48] [^if.then, f32 %69];
    i1 %71 = fcmp ogt f32 %70, f32 3.14159;
    f32 %72 = fsub f32 %70, f32 6.28319;
    f32 %73 = select i1 %71 ? f32 %72 : f32 %70;
    i1 %74 = fcmp olt f32 %73, f32 -3.14159;
    f32 %75 = fadd f32 %73, f32 6.28319;
    f32 %76 = select i1 %74 ? f32 %75 : f32 %73;
    f32 %77 = call (f32) -> f32 @my_sin_impl(f32 %76);
    f32 %78 = load f32* %29;
    ubr ^while.body4;
  ^while.header7:
    i32 %79 = phi [^while.header6, i32 0] [^b13, i32 %163];
    i1 %80 = icmp sgt i32 %1, i32 %79;
    cbr i1 %80(prob = 0.97), ^while.body5, ^b8;
  ^while.header8:
    i32 %81 = phi [^while.header6, i32 0] [^b11, i32 %123];
    i1 %82 = icmp sgt i32 %0, i32 %81;
    cbr i1 %82(prob = 0.97), ^while.body6, ^b9;
  ^while.body4:
    f32 %83 = phi [^b7, f32 %78] [^b10, f32 %120];
    i32 %84 = phi [^b7, i32 0] [^b10, i32 %121];
    f32 %85 = s2f i32 %84 to f32;
    f32 %86 = fadd f32 %85, f32 0.5;
    f32 %87 = fmul f32 %11, f32 %86;
    f32 %88 = fmul f32 %87, f32 %30;
    f32 %89 = fadd f32 %88, f32 1.5708;
    i1 %90 = fcmp ogt f32 %89, f32 6.28319;
    i1 %91 = fcmp olt f32 %89, f32 -6.28319;
    i1 %92 = or i1 %90, i1 %91;
    f32* %93 = getelementptr &([8 * f32]* %52)[i64 0][i32 %84];
    f32 %94 = load f32* %93;
    f32 %95 = fmul f32 %94, f32 %77;
    cbr i1 %92(prob = 0.5), ^if.then1, ^b10;
  ^b8:
    i32 %96 = add i32 %59, i32 1;
    ubr ^while.header6;
  ^while.body5:
    f32* %97 = getelementptr &([8 * f32]* %64)[i64 0][i32 %79];
    f32 %98 = load f32* %38;
    f32 %99 = fmul f32 %98, f32 0.25;
    store f32* %97 with f32 %99;
    f32 %100 = s2f i32 %79 to f32;
    f32 %101 = fadd f32 %100, f32 0.5;
    f32 %102 = fmul f32 %11, f32 %101;
    cbr i1 %39(prob = 0.97), ^super.header, ^while.header9;
  ^while.body6:
    [8 * f32]* %103 = getelementptr &([8 * f32]* %37)[i32 %81];
    f32* %104 = getelementptr &([8 * f32]* %103)[i64 0][i64 0];
    f32 %105 = load f32* %104;
    call (f32) -> void @putfloat(f32 %105);
    cbr i1 %26(prob = 0.97), ^while.body7, ^b11;
  ^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then1:
    f32 %106 = fdiv f32 %89, f32 6.28319;
    i32 %107 = f2s f32 %106 to i32;
    f32 %108 = s2f i32 %107 to f32;
    f32 %109 = fmul f32 %108, f32 6.28319;
    f32 %110 = fsub f32 %89, f32 %109;
    ubr ^b10;
  ^b10:
    f32 %111 = phi [^while.body4, f32 %89] [^if.then1, f32 %110];
    i1 %112 = fcmp ogt f32 %111, f32 3.14159;
    f32 %113 = fsub f32 %111, f32 6.28319;
    f32 %114 = select i1 %112 ? f32 %113 : f32 %111;
    i1 %115 = fcmp olt f32 %114, f32 -3.14159;
    f32 %116 = fadd f32 %114, f32 6.28319;
    f32 %117 = select i1 %115 ? f32 %116 : f32 %114;
    f32 %118 = call (f32) -> f32 @my_sin_impl(f32 %117);
    f32 %119 = fmul f32 %95, f32 %118;
    f32 %120 = fadd f32 %83, f32 %119;
    store f32* %29 with f32 %120;
    i32 %121 = add i32 %84, i32 1;
    i1 %122 = icmp sgt i32 %1, i32 %121;
    cbr i1 %122(prob = 0.97), ^while.body4, ^b12;
  ^super.header:
    cbr i1 %3(prob = 0.89), ^prebody2, ^indirect;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %123 = add i32 %81, i32 1;
    ubr ^while.header8;
  ^while.header9:
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header10;
  ^while.body7:
    i32 %124 = phi [^while.body6, i32 1] [^while.body7, i32 %127];
    call (i32) -> void @putch(i32 32);
    f32* %125 = getelementptr &([8 * f32]* %103)[i64 0][i32 %124];
    f32 %126 = load f32* %125;
    call (f32) -> void @putfloat(f32 %126);
    i32 %127 = add i32 %124, i32 1;
    i1 %128 = icmp sgt i32 %1, i32 %127;
    cbr i1 %128(prob = 0.97), ^while.body7, ^b11;
  ^prebody2:
    f32 %129 = load f32* %97;
    ubr ^while.body8;
  ^b12:
    i32 %130 = add i32 %34, i32 1;
    ubr ^while.header5;
  ^indirect:
    f32 %131 = load f32* %97;
    ubr ^while.body9;
  ^super.header1:
    cbr i1 %4(prob = 0.89), ^prebody3, ^indirect1;
  ^while.header10:
    i32 %132 = phi [^while.header9, i32 1] [^b14, i32 %194] [^postbody1, i32 1];
    i1 %133 = icmp sgt i32 %0, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.header11, ^b13;
  ^prebody3:
    f32 %134 = load f32* %97;
    ubr ^while.body10;
  ^while.body8:
    f32 %135 = phi [^prebody2, f32 %129] [^while.body8, f32 %154];
    i32 %136 = phi [^prebody2, i32 5] [^while.body8, i32 %155];
    i32 %137 = phi [^prebody2, i32 1] [^while.body8, i32 %136];
    [8 * f32]* %138 = getelementptr &([8 * f32]* %13)[i32 %137];
    f32* %139 = getelementptr &([8 * f32]* %138)[i64 0][i64 0];
    f32 %140 = load f32* %139;
    f32 %141 = fmul f32 %140, f32 0.5;
    f32 %142 = fadd f32 %135, f32 %141;
    f32* %143 = getelementptr &([8 * f32]* %138)[i64 1][i64 0];
    f32 %144 = load f32* %143;
    f32 %145 = fmul f32 %144, f32 0.5;
    f32 %146 = fadd f32 %142, f32 %145;
    f32* %147 = getelementptr &([8 * f32]* %138)[i64 2][i64 0];
    f32 %148 = load f32* %147;
    f32 %149 = fmul f32 %148, f32 0.5;
    f32 %150 = fadd f32 %146, f32 %149;
    f32* %151 = getelementptr &([8 * f32]* %138)[i64 3][i64 0];
    f32 %152 = load f32* %151;
    f32 %153 = fmul f32 %152, f32 0.5;
    f32 %154 = fadd f32 %150, f32 %153;
    i32 %155 = add i32 %136, i32 4;
    i1 %156 = icmp sgt i32 %0, i32 %155;
    cbr i1 %156(prob = 0.89), ^while.body8, ^while.body9;
  ^indirect1:
    f32 %157 = load f32* %97;
    ubr ^while.body11;
  ^b13:
    f32 %158 = load f32* %97;
    f32 %159 = fadd f32 %158, f32 %158;
    f32 %160 = fdiv f32 %159, f32 %8;
    f32 %161 = fadd f32 %160, f32 %160;
    f32 %162 = fdiv f32 %161, f32 %10;
    store f32* %97 with f32 %162;
    i32 %163 = add i32 %79, i32 1;
    ubr ^while.header7;
  ^while.body9:
    f32 %164 = phi [^indirect, f32 %131] [^while.body8, f32 %154] [^while.body9, f32 %170];
    i32 %165 = phi [^indirect, i32 1] [^while.body8, i32 %136] [^while.body9, i32 %171];
    [8 * f32]* %166 = getelementptr &([8 * f32]* %13)[i32 %165];
    f32* %167 = getelementptr &([8 * f32]* %166)[i64 0][i64 0];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 %168, f32 0.5;
    f32 %170 = fadd f32 %164, f32 %169;
    i32 %171 = add i32 %165, i32 1;
    i1 %172 = icmp sgt i32 %0, i32 %171;
    cbr i1 %172(prob = 0.97), ^while.body9, ^postbody;
  ^while.header11:
    cbr i1 %26(prob = 0.97), ^prebody4, ^b14;
  ^postbody:
    store f32* %97 with f32 %170;
    ubr ^while.header9;
  ^while.body10:
    f32 %173 = phi [^prebody3, f32 %134] [^while.body10, f32 %191];
    i32 %174 = phi [^prebody3, i32 5] [^while.body10, i32 %192];
    i32 %175 = phi [^prebody3, i32 1] [^while.body10, i32 %174];
    f32* %176 = getelementptr &([8 * f32]* %13)[i64 0][i32 %175];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %177, f32 0.5;
    f32 %179 = fadd f32 %173, f32 %178;
    f32* %180 = getelementptr &(f32* %176)[i64 1];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %181, f32 0.5;
    f32 %183 = fadd f32 %179, f32 %182;
    f32* %184 = getelementptr &(f32* %176)[i64 2];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 %185, f32 0.5;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &(f32* %176)[i64 3];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 0.5;
    f32 %191 = fadd f32 %187, f32 %190;
    i32 %192 = add i32 %174, i32 4;
    i1 %193 = icmp sgt i32 %1, i32 %192;
    cbr i1 %193(prob = 0.89), ^while.body10, ^while.body11;
  ^b14:
    i32 %194 = add i32 %132, i32 1;
    ubr ^while.header10;
  ^prebody4:
    f32 %195 = s2f i32 %132 to f32;
    f32 %196 = fmul f32 %62, f32 %195;
    f32 %197 = fadd f32 %196, f32 1.5708;
    i1 %198 = fcmp ogt f32 %197, f32 6.28319;
    i1 %199 = fcmp olt f32 %197, f32 -6.28319;
    i1 %200 = or i1 %198, i1 %199;
    [8 * f32]* %201 = getelementptr &([8 * f32]* %13)[i32 %132];
    cbr i1 %200(prob = 0.5), ^if.then2, ^b15;
  ^while.body11:
    f32 %202 = phi [^indirect1, f32 %157] [^while.body10, f32 %191] [^while.body11, f32 %207];
    i32 %203 = phi [^indirect1, i32 1] [^while.body10, i32 %174] [^while.body11, i32 %208];
    f32* %204 = getelementptr &([8 * f32]* %13)[i64 0][i32 %203];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %205, f32 0.5;
    f32 %207 = fadd f32 %202, f32 %206;
    i32 %208 = add i32 %203, i32 1;
    i1 %209 = icmp sgt i32 %1, i32 %208;
    cbr i1 %209(prob = 0.97), ^while.body11, ^postbody1;
  ^if.then2:
    f32 %210 = fdiv f32 %197, f32 6.28319;
    i32 %211 = f2s f32 %210 to i32;
    f32 %212 = s2f i32 %211 to f32;
    f32 %213 = fmul f32 %212, f32 6.28319;
    f32 %214 = fsub f32 %197, f32 %213;
    ubr ^b15;
  ^b15:
    f32 %215 = phi [^prebody4, f32 %197] [^if.then2, f32 %214];
    i1 %216 = fcmp ogt f32 %215, f32 3.14159;
    f32 %217 = fsub f32 %215, f32 6.28319;
    f32 %218 = select i1 %216 ? f32 %217 : f32 %215;
    i1 %219 = fcmp olt f32 %218, f32 -3.14159;
    f32 %220 = fadd f32 %218, f32 6.28319;
    f32 %221 = select i1 %219 ? f32 %220 : f32 %218;
    f32 %222 = call (f32) -> f32 @my_sin_impl(f32 %221);
    f32 %223 = load f32* %97;
    ubr ^while.body12;
  ^postbody1:
    store f32* %97 with f32 %207;
    ubr ^while.header10;
  ^while.body12:
    f32 %224 = phi [^b15, f32 %223] [^b16, f32 %249];
    i32 %225 = phi [^b15, i32 1] [^b16, i32 %250];
    f32 %226 = s2f i32 %225 to f32;
    f32 %227 = fmul f32 %102, f32 %226;
    f32 %228 = fadd f32 %227, f32 1.5708;
    i1 %229 = fcmp ogt f32 %228, f32 6.28319;
    i1 %230 = fcmp olt f32 %228, f32 -6.28319;
    i1 %231 = or i1 %229, i1 %230;
    f32* %232 = getelementptr &([8 * f32]* %201)[i64 0][i32 %225];
    f32 %233 = load f32* %232;
    f32 %234 = fmul f32 %233, f32 %222;
    cbr i1 %231(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %235 = fdiv f32 %228, f32 6.28319;
    i32 %236 = f2s f32 %235 to i32;
    f32 %237 = s2f i32 %236 to f32;
    f32 %238 = fmul f32 %237, f32 6.28319;
    f32 %239 = fsub f32 %228, f32 %238;
    ubr ^b16;
  ^b16:
    f32 %240 = phi [^while.body12, f32 %228] [^if.then3, f32 %239];
    i1 %241 = fcmp ogt f32 %240, f32 3.14159;
    f32 %242 = fsub f32 %240, f32 6.28319;
    f32 %243 = select i1 %241 ? f32 %242 : f32 %240;
    i1 %244 = fcmp olt f32 %243, f32 -3.14159;
    f32 %245 = fadd f32 %243, f32 6.28319;
    f32 %246 = select i1 %244 ? f32 %245 : f32 %243;
    f32 %247 = call (f32) -> f32 @my_sin_impl(f32 %246);
    f32 %248 = fmul f32 %234, f32 %247;
    f32 %249 = fadd f32 %224, f32 %248;
    store f32* %97 with f32 %249;
    i32 %250 = add i32 %225, i32 1;
    i1 %251 = icmp sgt i32 %1, i32 %250;
    cbr i1 %251(prob = 0.97), ^while.body12, ^b14;
}
