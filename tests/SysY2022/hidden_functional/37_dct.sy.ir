internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp ogt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp ole f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    i1 %5 = fcmp ogt f32 %4, f32 0;
    f32 %6 = fneg f32 %4;
    f32 %7 = select i1 %5 ? f32 %4 : f32 %6;
    i1 %8 = fcmp ole f32 %7, f32 1e-06;
    cbr i1 %8(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %9 = phi [^entry, f32 %x] [^b2, f32 %15];
    ret f32 %9;
  ^b2:
    f32 %10 = phi [^b, f32 %4] [^b3, f32 %22];
    f32 %11 = fmul f32 %10, f32 4;
    f32 %12 = fmul f32 %11, f32 %10;
    f32 %13 = fmul f32 %12, f32 %10;
    f32 %14 = fmul f32 %10, f32 3;
    f32 %15 = fsub f32 %14, f32 %13;
    ubr ^b1;
  ^b3:
    f32 %16 = fdiv f32 %4, f32 3;
    f32 %17 = call (f32) -> f32 @my_sin_impl(f32 %16);
    f32 %18 = fmul f32 %17, f32 4;
    f32 %19 = fmul f32 %18, f32 %17;
    f32 %20 = fmul f32 %19, f32 %17;
    f32 %21 = fmul f32 %17, f32 3;
    f32 %22 = fsub f32 %21, f32 %20;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %0, i32 5;
    i1 %4 = icmp sgt i32 %1, i32 5;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.header1, ^b;
  ^b:
    f32 %8 = s2f i32 %0 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    f32 %10 = s2f i32 %1 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    cbr i1 %2(prob = 0.97), ^while.body, ^b1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %17 = phi [^while.header1, i32 0] [^while.body, i32 %20];
    f32 %18 = call () -> f32 @getfloat();
    f32* %19 = getelementptr &([8 * f32]* %15)[i64 0][i32 %17];
    store f32* %19 with f32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %1, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body, ^b1;
  ^while.header2:
    i32 %22 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %23 = icmp sgt i32 %0, i32 %22;
    [8 * f32]* %24 = getelementptr &([8 * f32]* %13)[i32 %22];
    f32 %25 = s2f i32 %22 to f32;
    cbr i1 %23(prob = 0.97), ^while.header3, ^b2;
  ^b2:
    i1 %26 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %27 = phi [^while.header2, i32 0] [^b5, i32 %43];
    i1 %28 = icmp sgt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b3;
  ^while.body1:
    f32* %29 = getelementptr &([8 * f32]* %24)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %31 = add i32 %22, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %52];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b4;
  ^while.header5:
    i32 %34 = phi [^while.body1, i32 0] [^b8, i32 %83];
    i1 %35 = icmp sgt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.header6, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0][i64 0];
    i1 %39 = icmp sgt i32 %0, i32 1;
    ubr ^while.header7;
  ^while.body2:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %13)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body3, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header3;
  ^while.header6:
    f32 %44 = s2f i32 %34 to f32;
    f32 %45 = fadd f32 %44, f32 0.5;
    f32 %46 = fmul f32 %9, f32 %45;
    f32 %47 = fmul f32 %46, f32 %25;
    f32 %48 = fadd f32 %47, f32 1.5708;
    i1 %49 = fcmp ogt f32 %48, f32 6.28319;
    i1 %50 = fcmp olt f32 %48, f32 -6.28319;
    i1 %51 = or i1 %49, i1 %50;
    cbr i1 %51(prob = 0.5), ^if.then, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %52 = add i32 %32, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %53 = phi [^while.body2, i32 1] [^while.body3, i32 %56];
    call (i32) -> void @putch(i32 32);
    f32* %54 = getelementptr &([8 * f32]* %40)[i64 0][i32 %53];
    f32 %55 = load f32* %54;
    call (f32) -> void @putfloat(f32 %55);
    i32 %56 = add i32 %53, i32 1;
    i1 %57 = icmp sgt i32 %1, i32 %56;
    cbr i1 %57(prob = 0.97), ^while.body3, ^b6;
  ^while.header7:
    i32 %58 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %59 = s2f i32 %58 to f32;
    f32 %60 = fadd f32 %59, f32 0.5;
    f32 %61 = fmul f32 %9, f32 %60;
    i1 %62 = icmp sgt i32 %0, i32 %58;
    [8 * f32]* %63 = getelementptr &([8 * f32]* %37)[i32 %58];
    cbr i1 %62(prob = 0.97), ^while.header8, ^while.header9;
  ^if.then:
    f32 %64 = fdiv f32 %48, f32 6.28319;
    i32 %65 = f2s f32 %64 to i32;
    f32 %66 = s2f i32 %65 to f32;
    f32 %67 = fmul f32 %66, f32 6.28319;
    f32 %68 = fsub f32 %48, f32 %67;
    ubr ^b7;
  ^b7:
    f32 %69 = phi [^while.header6, f32 %48] [^if.then, f32 %68];
    cbr i1 %2(prob = 0.97), ^indirect, ^b8;
  ^while.header8:
    i32 %70 = phi [^while.header7, i32 0] [^b13, i32 %146];
    i1 %71 = icmp sgt i32 %1, i32 %70;
    cbr i1 %71(prob = 0.97), ^while.body4, ^b9;
  ^while.header9:
    i32 %72 = phi [^while.header7, i32 0] [^b11, i32 %107];
    i1 %73 = icmp sgt i32 %0, i32 %72;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b10;
  ^indirect:
    f32 %74 = fsub f32 %69, f32 6.28319;
    i1 %75 = fcmp ogt f32 %69, f32 3.14159;
    f32 %76 = select i1 %75 ? f32 %74 : f32 %69;
    f32 %77 = fadd f32 %76, f32 6.28319;
    i1 %78 = fcmp olt f32 %76, f32 -3.14159;
    f32 %79 = select i1 %78 ? f32 %77 : f32 %76;
    f32 %80 = call (f32) -> f32 @my_sin_impl(f32 %79);
    [8 * f32]* %81 = getelementptr &([8 * f32]* %14)[i32 %34];
    f32 %82 = load f32* %29;
    ubr ^while.body6;
  ^b8:
    i32 %83 = add i32 %34, i32 1;
    ubr ^while.header5;
  ^b9:
    i32 %84 = add i32 %58, i32 1;
    ubr ^while.header7;
  ^while.body4:
    f32* %85 = getelementptr &([8 * f32]* %63)[i64 0][i32 %70];
    f32 %86 = load f32* %38;
    f32 %87 = fmul f32 %86, f32 0.25;
    store f32* %85 with f32 %87;
    f32 %88 = s2f i32 %70 to f32;
    f32 %89 = fadd f32 %88, f32 0.5;
    f32 %90 = fmul f32 %11, f32 %89;
    cbr i1 %39(prob = 0.97), ^super.header, ^while.header10;
  ^while.body5:
    [8 * f32]* %91 = getelementptr &([8 * f32]* %37)[i32 %72];
    f32* %92 = getelementptr &([8 * f32]* %91)[i64 0][i64 0];
    f32 %93 = load f32* %92;
    call (f32) -> void @putfloat(f32 %93);
    cbr i1 %26(prob = 0.97), ^while.body7, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    f32 %94 = phi [^indirect, f32 %82] [^b12, f32 %129];
    i32 %95 = phi [^indirect, i32 0] [^b12, i32 %130];
    f32 %96 = s2f i32 %95 to f32;
    f32 %97 = fadd f32 %96, f32 0.5;
    f32 %98 = fmul f32 %11, f32 %97;
    f32 %99 = fmul f32 %98, f32 %30;
    f32 %100 = fadd f32 %99, f32 1.5708;
    i1 %101 = fcmp ogt f32 %100, f32 6.28319;
    i1 %102 = fcmp olt f32 %100, f32 -6.28319;
    i1 %103 = or i1 %101, i1 %102;
    f32* %104 = getelementptr &([8 * f32]* %81)[i64 0][i32 %95];
    f32 %105 = load f32* %104;
    f32 %106 = fmul f32 %105, f32 %80;
    cbr i1 %103(prob = 0.5), ^if.then1, ^b12;
  ^super.header:
    cbr i1 %3(prob = 0.89), ^indirect1, ^indirect2;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %107 = add i32 %72, i32 1;
    ubr ^while.header9;
  ^while.header10:
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header11;
  ^while.body7:
    i32 %108 = phi [^while.body5, i32 1] [^while.body7, i32 %111];
    call (i32) -> void @putch(i32 32);
    f32* %109 = getelementptr &([8 * f32]* %91)[i64 0][i32 %108];
    f32 %110 = load f32* %109;
    call (f32) -> void @putfloat(f32 %110);
    i32 %111 = add i32 %108, i32 1;
    i1 %112 = icmp sgt i32 %1, i32 %111;
    cbr i1 %112(prob = 0.97), ^while.body7, ^b11;
  ^if.then1:
    f32 %113 = fdiv f32 %100, f32 6.28319;
    i32 %114 = f2s f32 %113 to i32;
    f32 %115 = s2f i32 %114 to f32;
    f32 %116 = fmul f32 %115, f32 6.28319;
    f32 %117 = fsub f32 %100, f32 %116;
    ubr ^b12;
  ^indirect1:
    f32 %118 = load f32* %85;
    ubr ^super.header2;
  ^indirect2:
    f32 %119 = load f32* %85;
    ubr ^while.body8;
  ^b12:
    f32 %120 = phi [^while.body6, f32 %100] [^if.then1, f32 %117];
    i1 %121 = fcmp ogt f32 %120, f32 3.14159;
    f32 %122 = fsub f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    i1 %124 = fcmp olt f32 %123, f32 -3.14159;
    f32 %125 = fadd f32 %123, f32 6.28319;
    f32 %126 = select i1 %124 ? f32 %125 : f32 %123;
    f32 %127 = call (f32) -> f32 @my_sin_impl(f32 %126);
    f32 %128 = fmul f32 %106, f32 %127;
    f32 %129 = fadd f32 %94, f32 %128;
    store f32* %29 with f32 %129;
    i32 %130 = add i32 %95, i32 1;
    i1 %131 = icmp sgt i32 %1, i32 %130;
    cbr i1 %131(prob = 0.97), ^while.body6, ^b8;
  ^super.header1:
    cbr i1 %4(prob = 0.89), ^indirect3, ^indirect4;
  ^while.header11:
    i32 %132 = phi [^while.header10, i32 1] [^while.body10, i32 1] [^b15, i32 %421];
    i1 %133 = icmp sgt i32 %0, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.header12, ^b13;
  ^indirect3:
    f32 %134 = load f32* %85;
    ubr ^super.header4;
  ^super.header2:
    f32 %135 = phi [^indirect1, f32 %118] [^while.body9, f32 %227];
    i32 %136 = phi [^indirect1, i32 5] [^while.body9, i32 %138];
    i32 %137 = phi [^indirect1, i32 1] [^while.body9, i32 %228];
    i32 %138 = add i32 %136, i32 16;
    i1 %139 = icmp sgt i32 %0, i32 %138;
    cbr i1 %139(prob = 0.89), ^while.body9, ^super.header3;
  ^indirect4:
    f32 %140 = load f32* %85;
    ubr ^while.body10;
  ^b13:
    f32 %141 = load f32* %85;
    f32 %142 = fadd f32 %141, f32 %141;
    f32 %143 = fdiv f32 %142, f32 %8;
    f32 %144 = fadd f32 %143, f32 %143;
    f32 %145 = fdiv f32 %144, f32 %10;
    store f32* %85 with f32 %145;
    i32 %146 = add i32 %70, i32 1;
    ubr ^while.header8;
  ^while.body8:
    f32 %147 = phi [^indirect2, f32 %119] [^while.body8, f32 %153] [^while.body13, f32 %413];
    i32 %148 = phi [^indirect2, i32 1] [^while.body8, i32 %154] [^while.body13, i32 %395];
    [8 * f32]* %149 = getelementptr &([8 * f32]* %13)[i32 %148];
    f32* %150 = getelementptr &([8 * f32]* %149)[i64 0][i64 0];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 %151, f32 0.5;
    f32 %153 = fadd f32 %147, f32 %152;
    store f32* %85 with f32 %153;
    i32 %154 = add i32 %148, i32 1;
    i1 %155 = icmp sgt i32 %0, i32 %154;
    cbr i1 %155(prob = 0.97), ^while.body8, ^while.header10;
  ^while.header12:
    f32 %156 = s2f i32 %132 to f32;
    f32 %157 = fmul f32 %61, f32 %156;
    f32 %158 = fadd f32 %157, f32 1.5708;
    i1 %159 = fcmp ogt f32 %158, f32 6.28319;
    i1 %160 = fcmp olt f32 %158, f32 -6.28319;
    i1 %161 = or i1 %159, i1 %160;
    cbr i1 %161(prob = 0.5), ^if.then2, ^b14;
  ^while.body9:
    [8 * f32]* %162 = getelementptr &([8 * f32]* %13)[i32 %137];
    f32* %163 = getelementptr &([8 * f32]* %162)[i64 0][i64 0];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 %164, f32 0.5;
    f32 %166 = fadd f32 %135, f32 %165;
    f32* %167 = getelementptr &([8 * f32]* %162)[i64 1][i64 0];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 %168, f32 0.5;
    f32 %170 = fadd f32 %166, f32 %169;
    f32* %171 = getelementptr &([8 * f32]* %162)[i64 2][i64 0];
    f32 %172 = load f32* %171;
    f32 %173 = fmul f32 %172, f32 0.5;
    f32 %174 = fadd f32 %170, f32 %173;
    f32* %175 = getelementptr &([8 * f32]* %162)[i64 3][i64 0];
    f32 %176 = load f32* %175;
    f32 %177 = fmul f32 %176, f32 0.5;
    f32 %178 = fadd f32 %174, f32 %177;
    [8 * f32]* %179 = getelementptr &([8 * f32]* %13)[i32 %136];
    f32* %180 = getelementptr &([8 * f32]* %179)[i64 0][i64 0];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %181, f32 0.5;
    f32 %183 = fadd f32 %178, f32 %182;
    f32* %184 = getelementptr &([8 * f32]* %179)[i64 1][i64 0];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 %185, f32 0.5;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &([8 * f32]* %179)[i64 2][i64 0];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 0.5;
    f32 %191 = fadd f32 %187, f32 %190;
    f32* %192 = getelementptr &([8 * f32]* %179)[i64 3][i64 0];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %193, f32 0.5;
    f32 %195 = fadd f32 %191, f32 %194;
    f32* %196 = getelementptr &([8 * f32]* %179)[i64 4][i64 0];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %197, f32 0.5;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &([8 * f32]* %179)[i64 5][i64 0];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 %201, f32 0.5;
    f32 %203 = fadd f32 %199, f32 %202;
    f32* %204 = getelementptr &([8 * f32]* %179)[i64 6][i64 0];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %205, f32 0.5;
    f32 %207 = fadd f32 %203, f32 %206;
    f32* %208 = getelementptr &([8 * f32]* %179)[i64 7][i64 0];
    f32 %209 = load f32* %208;
    f32 %210 = fmul f32 %209, f32 0.5;
    f32 %211 = fadd f32 %207, f32 %210;
    f32* %212 = getelementptr &([8 * f32]* %179)[i64 8][i64 0];
    f32 %213 = load f32* %212;
    f32 %214 = fmul f32 %213, f32 0.5;
    f32 %215 = fadd f32 %211, f32 %214;
    f32* %216 = getelementptr &([8 * f32]* %179)[i64 9][i64 0];
    f32 %217 = load f32* %216;
    f32 %218 = fmul f32 %217, f32 0.5;
    f32 %219 = fadd f32 %215, f32 %218;
    f32* %220 = getelementptr &([8 * f32]* %179)[i64 10][i64 0];
    f32 %221 = load f32* %220;
    f32 %222 = fmul f32 %221, f32 0.5;
    f32 %223 = fadd f32 %219, f32 %222;
    f32* %224 = getelementptr &([8 * f32]* %179)[i64 11][i64 0];
    f32 %225 = load f32* %224;
    f32 %226 = fmul f32 %225, f32 0.5;
    f32 %227 = fadd f32 %223, f32 %226;
    i32 %228 = add i32 %136, i32 12;
    ubr ^super.header2;
  ^if.then2:
    f32 %229 = fdiv f32 %158, f32 6.28319;
    i32 %230 = f2s f32 %229 to i32;
    f32 %231 = s2f i32 %230 to f32;
    f32 %232 = fmul f32 %231, f32 6.28319;
    f32 %233 = fsub f32 %158, f32 %232;
    ubr ^b14;
  ^super.header3:
    f32 %234 = phi [^super.header2, f32 %135] [^while.body11, f32 %318];
    i32 %235 = phi [^super.header2, i32 %136] [^while.body11, i32 %237];
    i32 %236 = phi [^super.header2, i32 %137] [^while.body11, i32 %319];
    i32 %237 = add i32 %235, i32 16;
    i1 %238 = icmp sgt i32 %0, i32 %237;
    cbr i1 %238(prob = 0.89), ^while.body11, ^while.body13;
  ^super.header4:
    f32 %239 = phi [^indirect3, f32 %134] [^while.body12, f32 %383];
    i32 %240 = phi [^indirect3, i32 5] [^while.body12, i32 %242];
    i32 %241 = phi [^indirect3, i32 1] [^while.body12, i32 %384];
    i32 %242 = add i32 %240, i32 16;
    i1 %243 = icmp sgt i32 %1, i32 %242;
    cbr i1 %243(prob = 0.89), ^while.body12, ^super.header5;
  ^while.body10:
    f32 %244 = phi [^indirect4, f32 %140] [^while.body10, f32 %249] [^while.body15, f32 %505];
    i32 %245 = phi [^indirect4, i32 1] [^while.body10, i32 %250] [^while.body15, i32 %488];
    f32* %246 = getelementptr &([8 * f32]* %13)[i64 0][i32 %245];
    f32 %247 = load f32* %246;
    f32 %248 = fmul f32 %247, f32 0.5;
    f32 %249 = fadd f32 %244, f32 %248;
    store f32* %85 with f32 %249;
    i32 %250 = add i32 %245, i32 1;
    i1 %251 = icmp sgt i32 %1, i32 %250;
    cbr i1 %251(prob = 0.97), ^while.body10, ^while.header11;
  ^b14:
    f32 %252 = phi [^while.header12, f32 %158] [^if.then2, f32 %233];
    cbr i1 %26(prob = 0.97), ^indirect5, ^b15;
  ^while.body11:
    [8 * f32]* %253 = getelementptr &([8 * f32]* %13)[i32 %236];
    f32* %254 = getelementptr &([8 * f32]* %253)[i64 0][i64 0];
    f32 %255 = load f32* %254;
    f32 %256 = fmul f32 %255, f32 0.5;
    f32 %257 = fadd f32 %234, f32 %256;
    f32* %258 = getelementptr &([8 * f32]* %253)[i64 1][i64 0];
    f32 %259 = load f32* %258;
    f32 %260 = fmul f32 %259, f32 0.5;
    f32 %261 = fadd f32 %257, f32 %260;
    f32* %262 = getelementptr &([8 * f32]* %253)[i64 2][i64 0];
    f32 %263 = load f32* %262;
    f32 %264 = fmul f32 %263, f32 0.5;
    f32 %265 = fadd f32 %261, f32 %264;
    f32* %266 = getelementptr &([8 * f32]* %253)[i64 3][i64 0];
    f32 %267 = load f32* %266;
    f32 %268 = fmul f32 %267, f32 0.5;
    f32 %269 = fadd f32 %265, f32 %268;
    [8 * f32]* %270 = getelementptr &([8 * f32]* %13)[i32 %235];
    f32* %271 = getelementptr &([8 * f32]* %270)[i64 0][i64 0];
    f32 %272 = load f32* %271;
    f32 %273 = fmul f32 %272, f32 0.5;
    f32 %274 = fadd f32 %269, f32 %273;
    f32* %275 = getelementptr &([8 * f32]* %270)[i64 1][i64 0];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 %276, f32 0.5;
    f32 %278 = fadd f32 %274, f32 %277;
    f32* %279 = getelementptr &([8 * f32]* %270)[i64 2][i64 0];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 %280, f32 0.5;
    f32 %282 = fadd f32 %278, f32 %281;
    f32* %283 = getelementptr &([8 * f32]* %270)[i64 3][i64 0];
    f32 %284 = load f32* %283;
    f32 %285 = fmul f32 %284, f32 0.5;
    f32 %286 = fadd f32 %282, f32 %285;
    f32* %287 = getelementptr &([8 * f32]* %270)[i64 4][i64 0];
    f32 %288 = load f32* %287;
    f32 %289 = fmul f32 %288, f32 0.5;
    f32 %290 = fadd f32 %286, f32 %289;
    f32* %291 = getelementptr &([8 * f32]* %270)[i64 5][i64 0];
    f32 %292 = load f32* %291;
    f32 %293 = fmul f32 %292, f32 0.5;
    f32 %294 = fadd f32 %290, f32 %293;
    f32* %295 = getelementptr &([8 * f32]* %270)[i64 6][i64 0];
    f32 %296 = load f32* %295;
    f32 %297 = fmul f32 %296, f32 0.5;
    f32 %298 = fadd f32 %294, f32 %297;
    f32* %299 = getelementptr &([8 * f32]* %270)[i64 7][i64 0];
    f32 %300 = load f32* %299;
    f32 %301 = fmul f32 %300, f32 0.5;
    f32 %302 = fadd f32 %298, f32 %301;
    f32* %303 = getelementptr &([8 * f32]* %270)[i64 8][i64 0];
    f32 %304 = load f32* %303;
    f32 %305 = fmul f32 %304, f32 0.5;
    f32 %306 = fadd f32 %302, f32 %305;
    f32* %307 = getelementptr &([8 * f32]* %270)[i64 9][i64 0];
    f32 %308 = load f32* %307;
    f32 %309 = fmul f32 %308, f32 0.5;
    f32 %310 = fadd f32 %306, f32 %309;
    f32* %311 = getelementptr &([8 * f32]* %270)[i64 10][i64 0];
    f32 %312 = load f32* %311;
    f32 %313 = fmul f32 %312, f32 0.5;
    f32 %314 = fadd f32 %310, f32 %313;
    f32* %315 = getelementptr &([8 * f32]* %270)[i64 11][i64 0];
    f32 %316 = load f32* %315;
    f32 %317 = fmul f32 %316, f32 0.5;
    f32 %318 = fadd f32 %314, f32 %317;
    i32 %319 = add i32 %235, i32 12;
    ubr ^super.header3;
  ^while.body12:
    f32* %320 = getelementptr &([8 * f32]* %13)[i64 0][i32 %241];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %321, f32 0.5;
    f32 %323 = fadd f32 %239, f32 %322;
    f32* %324 = getelementptr &(f32* %320)[i64 1];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 %325, f32 0.5;
    f32 %327 = fadd f32 %323, f32 %326;
    f32* %328 = getelementptr &(f32* %320)[i64 2];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 %329, f32 0.5;
    f32 %331 = fadd f32 %327, f32 %330;
    f32* %332 = getelementptr &(f32* %320)[i64 3];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 %333, f32 0.5;
    f32 %335 = fadd f32 %331, f32 %334;
    f32* %336 = getelementptr &([8 * f32]* %13)[i64 0][i32 %240];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 %337, f32 0.5;
    f32 %339 = fadd f32 %335, f32 %338;
    f32* %340 = getelementptr &(f32* %336)[i64 1];
    f32 %341 = load f32* %340;
    f32 %342 = fmul f32 %341, f32 0.5;
    f32 %343 = fadd f32 %339, f32 %342;
    f32* %344 = getelementptr &(f32* %336)[i64 2];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 %345, f32 0.5;
    f32 %347 = fadd f32 %343, f32 %346;
    f32* %348 = getelementptr &(f32* %336)[i64 3];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 %349, f32 0.5;
    f32 %351 = fadd f32 %347, f32 %350;
    f32* %352 = getelementptr &(f32* %336)[i64 4];
    f32 %353 = load f32* %352;
    f32 %354 = fmul f32 %353, f32 0.5;
    f32 %355 = fadd f32 %351, f32 %354;
    f32* %356 = getelementptr &(f32* %336)[i64 5];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 %357, f32 0.5;
    f32 %359 = fadd f32 %355, f32 %358;
    f32* %360 = getelementptr &(f32* %336)[i64 6];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 %361, f32 0.5;
    f32 %363 = fadd f32 %359, f32 %362;
    f32* %364 = getelementptr &(f32* %336)[i64 7];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %365, f32 0.5;
    f32 %367 = fadd f32 %363, f32 %366;
    f32* %368 = getelementptr &(f32* %336)[i64 8];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %369, f32 0.5;
    f32 %371 = fadd f32 %367, f32 %370;
    f32* %372 = getelementptr &(f32* %336)[i64 9];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 %373, f32 0.5;
    f32 %375 = fadd f32 %371, f32 %374;
    f32* %376 = getelementptr &(f32* %336)[i64 10];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 %377, f32 0.5;
    f32 %379 = fadd f32 %375, f32 %378;
    f32* %380 = getelementptr &(f32* %336)[i64 11];
    f32 %381 = load f32* %380;
    f32 %382 = fmul f32 %381, f32 0.5;
    f32 %383 = fadd f32 %379, f32 %382;
    i32 %384 = add i32 %240, i32 12;
    ubr ^super.header4;
  ^indirect5:
    f32 %385 = fsub f32 %252, f32 6.28319;
    i1 %386 = fcmp ogt f32 %252, f32 3.14159;
    f32 %387 = select i1 %386 ? f32 %385 : f32 %252;
    f32 %388 = fadd f32 %387, f32 6.28319;
    i1 %389 = fcmp olt f32 %387, f32 -3.14159;
    f32 %390 = select i1 %389 ? f32 %388 : f32 %387;
    f32 %391 = call (f32) -> f32 @my_sin_impl(f32 %390);
    [8 * f32]* %392 = getelementptr &([8 * f32]* %13)[i32 %132];
    f32 %393 = load f32* %85;
    ubr ^while.body16;
  ^while.body13:
    f32 %394 = phi [^super.header3, f32 %234] [^while.body13, f32 %413];
    i32 %395 = phi [^super.header3, i32 %235] [^while.body13, i32 %414];
    i32 %396 = phi [^super.header3, i32 %236] [^while.body13, i32 %395];
    [8 * f32]* %397 = getelementptr &([8 * f32]* %13)[i32 %396];
    f32* %398 = getelementptr &([8 * f32]* %397)[i64 0][i64 0];
    f32 %399 = load f32* %398;
    f32 %400 = fmul f32 %399, f32 0.5;
    f32 %401 = fadd f32 %394, f32 %400;
    f32* %402 = getelementptr &([8 * f32]* %397)[i64 1][i64 0];
    f32 %403 = load f32* %402;
    f32 %404 = fmul f32 %403, f32 0.5;
    f32 %405 = fadd f32 %401, f32 %404;
    f32* %406 = getelementptr &([8 * f32]* %397)[i64 2][i64 0];
    f32 %407 = load f32* %406;
    f32 %408 = fmul f32 %407, f32 0.5;
    f32 %409 = fadd f32 %405, f32 %408;
    f32* %410 = getelementptr &([8 * f32]* %397)[i64 3][i64 0];
    f32 %411 = load f32* %410;
    f32 %412 = fmul f32 %411, f32 0.5;
    f32 %413 = fadd f32 %409, f32 %412;
    i32 %414 = add i32 %395, i32 4;
    i1 %415 = icmp sgt i32 %0, i32 %414;
    cbr i1 %415(prob = 0.89), ^while.body13, ^while.body8;
  ^super.header5:
    f32 %416 = phi [^super.header4, f32 %239] [^while.body14, f32 %485];
    i32 %417 = phi [^super.header4, i32 %240] [^while.body14, i32 %419];
    i32 %418 = phi [^super.header4, i32 %241] [^while.body14, i32 %486];
    i32 %419 = add i32 %417, i32 16;
    i1 %420 = icmp sgt i32 %1, i32 %419;
    cbr i1 %420(prob = 0.89), ^while.body14, ^while.body15;
  ^b15:
    i32 %421 = add i32 %132, i32 1;
    ubr ^while.header11;
  ^while.body14:
    f32* %422 = getelementptr &([8 * f32]* %13)[i64 0][i32 %418];
    f32 %423 = load f32* %422;
    f32 %424 = fmul f32 %423, f32 0.5;
    f32 %425 = fadd f32 %416, f32 %424;
    f32* %426 = getelementptr &(f32* %422)[i64 1];
    f32 %427 = load f32* %426;
    f32 %428 = fmul f32 %427, f32 0.5;
    f32 %429 = fadd f32 %425, f32 %428;
    f32* %430 = getelementptr &(f32* %422)[i64 2];
    f32 %431 = load f32* %430;
    f32 %432 = fmul f32 %431, f32 0.5;
    f32 %433 = fadd f32 %429, f32 %432;
    f32* %434 = getelementptr &(f32* %422)[i64 3];
    f32 %435 = load f32* %434;
    f32 %436 = fmul f32 %435, f32 0.5;
    f32 %437 = fadd f32 %433, f32 %436;
    f32* %438 = getelementptr &([8 * f32]* %13)[i64 0][i32 %417];
    f32 %439 = load f32* %438;
    f32 %440 = fmul f32 %439, f32 0.5;
    f32 %441 = fadd f32 %437, f32 %440;
    f32* %442 = getelementptr &(f32* %438)[i64 1];
    f32 %443 = load f32* %442;
    f32 %444 = fmul f32 %443, f32 0.5;
    f32 %445 = fadd f32 %441, f32 %444;
    f32* %446 = getelementptr &(f32* %438)[i64 2];
    f32 %447 = load f32* %446;
    f32 %448 = fmul f32 %447, f32 0.5;
    f32 %449 = fadd f32 %445, f32 %448;
    f32* %450 = getelementptr &(f32* %438)[i64 3];
    f32 %451 = load f32* %450;
    f32 %452 = fmul f32 %451, f32 0.5;
    f32 %453 = fadd f32 %449, f32 %452;
    f32* %454 = getelementptr &(f32* %438)[i64 4];
    f32 %455 = load f32* %454;
    f32 %456 = fmul f32 %455, f32 0.5;
    f32 %457 = fadd f32 %453, f32 %456;
    f32* %458 = getelementptr &(f32* %438)[i64 5];
    f32 %459 = load f32* %458;
    f32 %460 = fmul f32 %459, f32 0.5;
    f32 %461 = fadd f32 %457, f32 %460;
    f32* %462 = getelementptr &(f32* %438)[i64 6];
    f32 %463 = load f32* %462;
    f32 %464 = fmul f32 %463, f32 0.5;
    f32 %465 = fadd f32 %461, f32 %464;
    f32* %466 = getelementptr &(f32* %438)[i64 7];
    f32 %467 = load f32* %466;
    f32 %468 = fmul f32 %467, f32 0.5;
    f32 %469 = fadd f32 %465, f32 %468;
    f32* %470 = getelementptr &(f32* %438)[i64 8];
    f32 %471 = load f32* %470;
    f32 %472 = fmul f32 %471, f32 0.5;
    f32 %473 = fadd f32 %469, f32 %472;
    f32* %474 = getelementptr &(f32* %438)[i64 9];
    f32 %475 = load f32* %474;
    f32 %476 = fmul f32 %475, f32 0.5;
    f32 %477 = fadd f32 %473, f32 %476;
    f32* %478 = getelementptr &(f32* %438)[i64 10];
    f32 %479 = load f32* %478;
    f32 %480 = fmul f32 %479, f32 0.5;
    f32 %481 = fadd f32 %477, f32 %480;
    f32* %482 = getelementptr &(f32* %438)[i64 11];
    f32 %483 = load f32* %482;
    f32 %484 = fmul f32 %483, f32 0.5;
    f32 %485 = fadd f32 %481, f32 %484;
    i32 %486 = add i32 %417, i32 12;
    ubr ^super.header5;
  ^while.body15:
    f32 %487 = phi [^super.header5, f32 %416] [^while.body15, f32 %505];
    i32 %488 = phi [^super.header5, i32 %417] [^while.body15, i32 %506];
    i32 %489 = phi [^super.header5, i32 %418] [^while.body15, i32 %488];
    f32* %490 = getelementptr &([8 * f32]* %13)[i64 0][i32 %489];
    f32 %491 = load f32* %490;
    f32 %492 = fmul f32 %491, f32 0.5;
    f32 %493 = fadd f32 %487, f32 %492;
    f32* %494 = getelementptr &(f32* %490)[i64 1];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 %495, f32 0.5;
    f32 %497 = fadd f32 %493, f32 %496;
    f32* %498 = getelementptr &(f32* %490)[i64 2];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 %499, f32 0.5;
    f32 %501 = fadd f32 %497, f32 %500;
    f32* %502 = getelementptr &(f32* %490)[i64 3];
    f32 %503 = load f32* %502;
    f32 %504 = fmul f32 %503, f32 0.5;
    f32 %505 = fadd f32 %501, f32 %504;
    i32 %506 = add i32 %488, i32 4;
    i1 %507 = icmp sgt i32 %1, i32 %506;
    cbr i1 %507(prob = 0.89), ^while.body15, ^while.body10;
  ^while.body16:
    f32 %508 = phi [^indirect5, f32 %393] [^b16, f32 %533];
    i32 %509 = phi [^indirect5, i32 1] [^b16, i32 %534];
    f32 %510 = s2f i32 %509 to f32;
    f32 %511 = fmul f32 %90, f32 %510;
    f32 %512 = fadd f32 %511, f32 1.5708;
    i1 %513 = fcmp ogt f32 %512, f32 6.28319;
    i1 %514 = fcmp olt f32 %512, f32 -6.28319;
    i1 %515 = or i1 %513, i1 %514;
    f32* %516 = getelementptr &([8 * f32]* %392)[i64 0][i32 %509];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 %517, f32 %391;
    cbr i1 %515(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %519 = fdiv f32 %512, f32 6.28319;
    i32 %520 = f2s f32 %519 to i32;
    f32 %521 = s2f i32 %520 to f32;
    f32 %522 = fmul f32 %521, f32 6.28319;
    f32 %523 = fsub f32 %512, f32 %522;
    ubr ^b16;
  ^b16:
    f32 %524 = phi [^while.body16, f32 %512] [^if.then3, f32 %523];
    i1 %525 = fcmp ogt f32 %524, f32 3.14159;
    f32 %526 = fsub f32 %524, f32 6.28319;
    f32 %527 = select i1 %525 ? f32 %526 : f32 %524;
    i1 %528 = fcmp olt f32 %527, f32 -3.14159;
    f32 %529 = fadd f32 %527, f32 6.28319;
    f32 %530 = select i1 %528 ? f32 %529 : f32 %527;
    f32 %531 = call (f32) -> f32 @my_sin_impl(f32 %530);
    f32 %532 = fmul f32 %518, f32 %531;
    f32 %533 = fadd f32 %508, f32 %532;
    store f32* %85 with f32 %533;
    i32 %534 = add i32 %509, i32 1;
    i1 %535 = icmp sgt i32 %1, i32 %534;
    cbr i1 %535(prob = 0.97), ^while.body16, ^b15;
}
