internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b4, f32 %20];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = fabs f32 %12;
    i1 %14 = fcmp ole f32 %13, f32 1e-06;
    cbr i1 %14(prob = 0.5), ^b4, ^b5;
  ^b4:
    f32 %15 = phi [^b3, f32 %12] [^b6, f32 %29];
    f32 %16 = fmul f32 %15, f32 4;
    f32 %17 = fmul f32 %16, f32 %15;
    f32 %18 = fmul f32 %17, f32 %15;
    f32 %19 = fmul f32 %15, f32 3;
    f32 %20 = fsub f32 %19, f32 %18;
    ubr ^b2;
  ^b5:
    f32 %21 = fdiv f32 %12, f32 3;
    f32 %22 = fabs f32 %21;
    i1 %23 = fcmp ole f32 %22, f32 1e-06;
    cbr i1 %23(prob = 0.5), ^b6, ^b7;
  ^b6:
    f32 %24 = phi [^b5, f32 %21] [^b7, f32 %36];
    f32 %25 = fmul f32 %24, f32 4;
    f32 %26 = fmul f32 %25, f32 %24;
    f32 %27 = fmul f32 %26, f32 %24;
    f32 %28 = fmul f32 %24, f32 3;
    f32 %29 = fsub f32 %28, f32 %27;
    ubr ^b4;
  ^b7:
    f32 %30 = fdiv f32 %21, f32 3;
    f32 %31 = call (f32) -> f32 @my_sin_impl(f32 %30);
    f32 %32 = fmul f32 %31, f32 4;
    f32 %33 = fmul f32 %32, f32 %31;
    f32 %34 = fmul f32 %33, f32 %31;
    f32 %35 = fmul f32 %31, f32 3;
    f32 %36 = fsub f32 %35, f32 %34;
    ubr ^b6;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = add i32 %1, i32 -3;
    i1 %3 = icmp sgt i32 %2, i32 16;
    i32 %4 = add i32 %0, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 16;
    i1 %6 = icmp sgt i32 %0, i32 0;
    i1 %7 = icmp sgt i32 %1, i32 0;
    i1 %8 = icmp sgt i32 %1, i32 4;
    i1 %9 = icmp sgt i32 %0, i32 4;
    i32 %10 = add i32 %1, i32 -18;
    i32 %11 = add i32 %0, i32 -18;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    cbr i1 %6(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %13 = phi [^entry, i32 0] [^b1, i32 %22];
    cbr i1 %7(prob = 0.984615), ^prebody, ^b1;
  ^b:
    f32 %14 = s2f i32 %0 to f32;
    f32 %15 = fdiv f32 3.14159, f32 %14;
    f32 %16 = s2f i32 %1 to f32;
    f32 %17 = fdiv f32 3.14159, f32 %16;
    [8 * [8 * f32]]* %18 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %19 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0];
    [8 * f32]* %20 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    cbr i1 %6(prob = 0.984615), ^while.body1, ^b2;
  ^prebody:
    [8 * f32]* %21 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i32 %13];
    ubr ^while.body3;
  ^b1:
    i32 %22 = add i32 %13, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body, ^b;
  ^while.body1:
    i32 %24 = phi [^b, i32 0] [^b3, i32 %36];
    [8 * f32]* %25 = getelementptr &([8 * f32]* %19)[i32 %24];
    f32 %26 = s2f i32 %24 to f32;
    cbr i1 %7(prob = 0.984615), ^while.body2, ^b3;
  ^b2:
    i1 %27 = icmp sgt i32 %1, i32 1;
    cbr i1 %6(prob = 0.984615), ^while.body4, ^b4;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 0] [^b15, i32 %332];
    f32* %29 = getelementptr &([8 * f32]* %25)[i64 0][i32 %28];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %28 to f32;
    ubr ^while.body5;
  ^while.body3:
    i32 %31 = phi [^prebody, i32 0] [^while.body3, i32 %34];
    f32 %32 = call () -> f32 @getfloat();
    f32* %33 = getelementptr &([8 * f32]* %21)[i64 0][i32 %31];
    store f32* %33 with f32 %32;
    i32 %34 = add i32 %31, i32 1;
    i1 %35 = icmp sgt i32 %1, i32 %34;
    cbr i1 %35(prob = 0.984615), ^while.body3, ^b1;
  ^b3:
    i32 %36 = add i32 %24, i32 1;
    i1 %37 = icmp sgt i32 %0, i32 %36;
    cbr i1 %37(prob = 0.984615), ^while.body1, ^b2;
  ^while.body4:
    i32 %38 = phi [^b2, i32 0] [^b5, i32 %61];
    [8 * f32]* %39 = getelementptr &([8 * f32]* %19)[i32 %38];
    f32* %40 = getelementptr &([8 * f32]* %39)[i64 0][i64 0];
    f32 %41 = load f32* %40;
    call (f32) -> void @putfloat(f32 %41);
    cbr i1 %27(prob = 0.984615), ^while.body6, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %42 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %43 = getelementptr &([8 * [8 * f32]]* %42)[i64 0][i64 0];
    f32* %44 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0][i64 0];
    i1 %45 = icmp sgt i32 %0, i32 1;
    cbr i1 %6(prob = 0.984615), ^while.body7, ^b6;
  ^while.body5:
    i32 %46 = phi [^while.body2, i32 0] [^b13, i32 %221];
    f32 %47 = s2f i32 %46 to f32;
    f32 %48 = fadd f32 %47, f32 0.5;
    f32 %49 = fmul f32 %15, f32 %48;
    f32 %50 = fmul f32 %49, f32 %26;
    f32 %51 = fadd f32 %50, f32 1.5708;
    i1 %52 = fcmp ogt f32 %51, f32 6.28319;
    i1 %53 = fcmp olt f32 %51, f32 -6.28319;
    i1 %54 = or i1 %52, i1 %53;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %20)[i32 %46];
    cbr i1 %54(prob = 0.5), ^if.then, ^b7;
  ^while.body6:
    i32 %56 = phi [^while.body4, i32 1] [^while.body6, i32 %59];
    call (i32) -> void @putch(i32 32);
    f32* %57 = getelementptr &([8 * f32]* %39)[i64 0][i32 %56];
    f32 %58 = load f32* %57;
    call (f32) -> void @putfloat(f32 %58);
    i32 %59 = add i32 %56, i32 1;
    i1 %60 = icmp sgt i32 %1, i32 %59;
    cbr i1 %60(prob = 0.984615), ^while.body6, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %61 = add i32 %38, i32 1;
    i1 %62 = icmp sgt i32 %0, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body4, ^b4;
  ^while.body7:
    i32 %63 = phi [^b4, i32 0] [^b8, i32 %89];
    f32 %64 = s2f i32 %63 to f32;
    f32 %65 = fadd f32 %64, f32 0.5;
    f32 %66 = fmul f32 %15, f32 %65;
    [8 * f32]* %67 = getelementptr &([8 * f32]* %43)[i32 %63];
    cbr i1 %7(prob = 0.984615), ^while.body8, ^b8;
  ^b6:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then:
    f32 %68 = fdiv f32 %51, f32 6.28319;
    i32 %69 = f2s f32 %68 to i32;
    f32 %70 = s2f i32 %69 to f32;
    f32 %71 = fmul f32 %70, f32 6.28319;
    f32 %72 = fsub f32 %51, f32 %71;
    ubr ^b7;
  ^b7:
    f32 %73 = phi [^while.body5, f32 %51] [^if.then, f32 %72];
    i1 %74 = fcmp ogt f32 %73, f32 3.14159;
    f32 %75 = fsub f32 %73, f32 6.28319;
    f32 %76 = select i1 %74 ? f32 %75 : f32 %73;
    i1 %77 = fcmp olt f32 %76, f32 -3.14159;
    f32 %78 = fadd f32 %76, f32 6.28319;
    f32 %79 = select i1 %77 ? f32 %78 : f32 %76;
    f32 %80 = call (f32) -> f32 @my_sin_impl(f32 %79);
    f32 %81 = load f32* %29;
    ubr ^while.body9;
  ^while.body8:
    i32 %82 = phi [^while.body7, i32 0] [^b14, i32 %233];
    f32* %83 = getelementptr &([8 * f32]* %67)[i64 0][i32 %82];
    f32 %84 = load f32* %44;
    f32 %85 = fmul f32 %84, f32 0.25;
    store f32* %83 with f32 %85;
    f32 %86 = s2f i32 %82 to f32;
    f32 %87 = fadd f32 %86, f32 0.5;
    f32 %88 = fmul f32 %17, f32 %87;
    cbr i1 %45(prob = 0.984615), ^super.header, ^b9;
  ^b8:
    i32 %89 = add i32 %63, i32 1;
    i1 %90 = icmp sgt i32 %0, i32 %89;
    cbr i1 %90(prob = 0.984615), ^while.body7, ^while.body10;
  ^while.body9:
    f32 %91 = phi [^b7, f32 %81] [^b10, f32 %122];
    i32 %92 = phi [^b7, i32 0] [^b10, i32 %123];
    f32 %93 = s2f i32 %92 to f32;
    f32 %94 = fadd f32 %93, f32 0.5;
    f32 %95 = fmul f32 %17, f32 %94;
    f32 %96 = fmul f32 %95, f32 %30;
    f32 %97 = fadd f32 %96, f32 1.5708;
    i1 %98 = fcmp ogt f32 %97, f32 6.28319;
    i1 %99 = fcmp olt f32 %97, f32 -6.28319;
    i1 %100 = or i1 %98, i1 %99;
    f32* %101 = getelementptr &([8 * f32]* %55)[i64 0][i32 %92];
    f32 %102 = load f32* %101;
    f32 %103 = fmul f32 %102, f32 %80;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b10;
  ^super.header:
    cbr i1 %9(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b9:
    cbr i1 %27(prob = 0.984615), ^prebody1, ^b11;
  ^while.body10:
    i32 %104 = phi [^b8, i32 0] [^b12, i32 %135];
    [8 * f32]* %105 = getelementptr &([8 * f32]* %43)[i32 %104];
    f32* %106 = getelementptr &([8 * f32]* %105)[i64 0][i64 0];
    f32 %107 = load f32* %106;
    call (f32) -> void @putfloat(f32 %107);
    cbr i1 %27(prob = 0.984615), ^while.body11, ^b12;
  ^if.then1:
    f32 %108 = fdiv f32 %97, f32 6.28319;
    i32 %109 = f2s f32 %108 to i32;
    f32 %110 = s2f i32 %109 to f32;
    f32 %111 = fmul f32 %110, f32 6.28319;
    f32 %112 = fsub f32 %97, f32 %111;
    ubr ^b10;
  ^super.header1:
    cbr i1 %5(prob = 0.941176), ^while.body12, ^scalar.header1;
  ^b10:
    f32 %113 = phi [^while.body9, f32 %97] [^if.then1, f32 %112];
    i1 %114 = fcmp ogt f32 %113, f32 3.14159;
    f32 %115 = fsub f32 %113, f32 6.28319;
    f32 %116 = select i1 %114 ? f32 %115 : f32 %113;
    i1 %117 = fcmp olt f32 %116, f32 -3.14159;
    f32 %118 = fadd f32 %116, f32 6.28319;
    f32 %119 = select i1 %117 ? f32 %118 : f32 %116;
    f32 %120 = call (f32) -> f32 @my_sin_impl(f32 %119);
    f32 %121 = fmul f32 %103, f32 %120;
    f32 %122 = fadd f32 %91, f32 %121;
    store f32* %29 with f32 %122;
    i32 %123 = add i32 %92, i32 1;
    i1 %124 = icmp sgt i32 %1, i32 %123;
    cbr i1 %124(prob = 0.984615), ^while.body9, ^b13;
  ^scalar.header:
    i32 %125 = phi [^super.header, i32 1] [^scalar.final1, i32 %236];
    f32 %126 = phi [^super.header, f32 %85] [^scalar.final1, f32 %235];
    f32 %127 = phi [^super.header, f32 undef] [^scalar.final1, f32 %235];
    i1 %128 = icmp sgt i32 %0, i32 %125;
    cbr i1 %128(prob = 0.75), ^while.body13, ^scalar.final;
  ^prebody1:
    f32 %129 = load f32* %83;
    cbr i1 %8(prob = 0.941176), ^super.header2, ^scalar.header2;
  ^b11:
    cbr i1 %45(prob = 0.984615), ^while.body14, ^b14;
  ^while.body11:
    i32 %130 = phi [^while.body10, i32 1] [^while.body11, i32 %133];
    call (i32) -> void @putch(i32 32);
    f32* %131 = getelementptr &([8 * f32]* %105)[i64 0][i32 %130];
    f32 %132 = load f32* %131;
    call (f32) -> void @putfloat(f32 %132);
    i32 %133 = add i32 %130, i32 1;
    i1 %134 = icmp sgt i32 %1, i32 %133;
    cbr i1 %134(prob = 0.984615), ^while.body11, ^b12;
  ^b12:
    call (i32) -> void @putch(i32 10);
    i32 %135 = add i32 %104, i32 1;
    i1 %136 = icmp sgt i32 %0, i32 %135;
    cbr i1 %136(prob = 0.984615), ^while.body10, ^b6;
  ^while.body12:
    f32 %137 = phi [^super.header1, f32 %85] [^while.body12, f32 %203];
    i32 %138 = phi [^super.header1, i32 1] [^while.body12, i32 %204];
    [8 * f32]* %139 = getelementptr &([8 * f32]* %19)[i32 %138];
    f32* %140 = getelementptr &([8 * f32]* %139)[i64 0][i64 0];
    f32 %141 = load f32* %140;
    f32 %142 = fmul f32 %141, f32 0.5;
    f32 %143 = fadd f32 %137, f32 %142;
    f32* %144 = getelementptr &([8 * f32]* %139)[i64 1][i64 0];
    f32 %145 = load f32* %144;
    f32 %146 = fmul f32 %145, f32 0.5;
    f32 %147 = fadd f32 %143, f32 %146;
    f32* %148 = getelementptr &([8 * f32]* %139)[i64 2][i64 0];
    f32 %149 = load f32* %148;
    f32 %150 = fmul f32 %149, f32 0.5;
    f32 %151 = fadd f32 %147, f32 %150;
    f32* %152 = getelementptr &([8 * f32]* %139)[i64 3][i64 0];
    f32 %153 = load f32* %152;
    f32 %154 = fmul f32 %153, f32 0.5;
    f32 %155 = fadd f32 %151, f32 %154;
    f32* %156 = getelementptr &([8 * f32]* %139)[i64 4][i64 0];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %157, f32 0.5;
    f32 %159 = fadd f32 %155, f32 %158;
    f32* %160 = getelementptr &([8 * f32]* %139)[i64 5][i64 0];
    f32 %161 = load f32* %160;
    f32 %162 = fmul f32 %161, f32 0.5;
    f32 %163 = fadd f32 %159, f32 %162;
    f32* %164 = getelementptr &([8 * f32]* %139)[i64 6][i64 0];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 0.5;
    f32 %167 = fadd f32 %163, f32 %166;
    f32* %168 = getelementptr &([8 * f32]* %139)[i64 7][i64 0];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %169, f32 0.5;
    f32 %171 = fadd f32 %167, f32 %170;
    f32* %172 = getelementptr &([8 * f32]* %139)[i64 8][i64 0];
    f32 %173 = load f32* %172;
    f32 %174 = fmul f32 %173, f32 0.5;
    f32 %175 = fadd f32 %171, f32 %174;
    f32* %176 = getelementptr &([8 * f32]* %139)[i64 9][i64 0];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %177, f32 0.5;
    f32 %179 = fadd f32 %175, f32 %178;
    f32* %180 = getelementptr &([8 * f32]* %139)[i64 10][i64 0];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %181, f32 0.5;
    f32 %183 = fadd f32 %179, f32 %182;
    f32* %184 = getelementptr &([8 * f32]* %139)[i64 11][i64 0];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 %185, f32 0.5;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &([8 * f32]* %139)[i64 12][i64 0];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 0.5;
    f32 %191 = fadd f32 %187, f32 %190;
    f32* %192 = getelementptr &([8 * f32]* %139)[i64 13][i64 0];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %193, f32 0.5;
    f32 %195 = fadd f32 %191, f32 %194;
    f32* %196 = getelementptr &([8 * f32]* %139)[i64 14][i64 0];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %197, f32 0.5;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &([8 * f32]* %139)[i64 15][i64 0];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 %201, f32 0.5;
    f32 %203 = fadd f32 %199, f32 %202;
    i32 %204 = add i32 %138, i32 16;
    i1 %205 = icmp sgt i32 %11, i32 %204;
    cbr i1 %205(prob = 0.941176), ^while.body12, ^scalar.header1;
  ^scalar.final:
    f32 %206 = phi [^scalar.header, f32 %127] [^while.body13, f32 %218];
    store f32* %83 with f32 %206;
    ubr ^b9;
  ^scalar.header1:
    f32 %207 = phi [^super.header1, f32 %85] [^while.body12, f32 %203];
    i32 %208 = phi [^super.header1, i32 1] [^while.body12, i32 %204];
    f32 %209 = phi [^super.header1, f32 undef] [^while.body12, f32 %203];
    i32 %210 = phi [^super.header1, i32 undef] [^while.body12, i32 %204];
    i1 %211 = icmp sgt i32 %4, i32 %208;
    cbr i1 %211(prob = 0.75), ^while.body15, ^scalar.final1;
  ^while.body13 {scalar}:
    f32 %212 = phi [^scalar.header, f32 %126] [^while.body13, f32 %218];
    i32 %213 = phi [^scalar.header, i32 %125] [^while.body13, i32 %219];
    [8 * f32]* %214 = getelementptr &([8 * f32]* %19)[i32 %213];
    f32* %215 = getelementptr &([8 * f32]* %214)[i64 0][i64 0];
    f32 %216 = load f32* %215;
    f32 %217 = fmul f32 %216, f32 0.5;
    f32 %218 = fadd f32 %212, f32 %217;
    i32 %219 = add i32 %213, i32 1;
    i1 %220 = icmp sgt i32 %0, i32 %219;
    cbr i1 %220(prob = 0.75), ^while.body13, ^scalar.final;
  ^b13:
    i32 %221 = add i32 %46, i32 1;
    i1 %222 = icmp sgt i32 %0, i32 %221;
    cbr i1 %222(prob = 0.984615), ^while.body5, ^b15;
  ^super.header2:
    cbr i1 %3(prob = 0.941176), ^while.body16, ^scalar.header3;
  ^while.body14:
    i32 %223 = phi [^b11, i32 1] [^b16, i32 %349];
    cbr i1 %27(prob = 0.984615), ^prebody2, ^b16;
  ^scalar.header2:
    i32 %224 = phi [^prebody1, i32 1] [^scalar.final3, i32 %357];
    f32 %225 = phi [^prebody1, f32 %129] [^scalar.final3, f32 %356];
    f32 %226 = phi [^prebody1, f32 undef] [^scalar.final3, f32 %356];
    i1 %227 = icmp sgt i32 %1, i32 %224;
    cbr i1 %227(prob = 0.75), ^while.body17, ^scalar.final2;
  ^b14:
    f32 %228 = load f32* %83;
    f32 %229 = fadd f32 %228, f32 %228;
    f32 %230 = fdiv f32 %229, f32 %14;
    f32 %231 = fadd f32 %230, f32 %230;
    f32 %232 = fdiv f32 %231, f32 %16;
    store f32* %83 with f32 %232;
    i32 %233 = add i32 %82, i32 1;
    i1 %234 = icmp sgt i32 %1, i32 %233;
    cbr i1 %234(prob = 0.984615), ^while.body8, ^b8;
  ^scalar.final1:
    f32 %235 = phi [^scalar.header1, f32 %209] [^while.body15, f32 %255];
    i32 %236 = phi [^scalar.header1, i32 %210] [^while.body15, i32 %256];
    ubr ^scalar.header;
  ^while.body15 {scalar}:
    i32 %237 = phi [^scalar.header1, i32 %208] [^while.body15, i32 %256];
    f32 %238 = phi [^scalar.header1, f32 %207] [^while.body15, f32 %255];
    [8 * f32]* %239 = getelementptr &([8 * f32]* %19)[i32 %237];
    f32* %240 = getelementptr &([8 * f32]* %239)[i64 0][i64 0];
    f32 %241 = load f32* %240;
    f32 %242 = fmul f32 %241, f32 0.5;
    f32 %243 = fadd f32 %238, f32 %242;
    f32* %244 = getelementptr &([8 * f32]* %239)[i64 1][i64 0];
    f32 %245 = load f32* %244;
    f32 %246 = fmul f32 %245, f32 0.5;
    f32 %247 = fadd f32 %243, f32 %246;
    f32* %248 = getelementptr &([8 * f32]* %239)[i64 2][i64 0];
    f32 %249 = load f32* %248;
    f32 %250 = fmul f32 %249, f32 0.5;
    f32 %251 = fadd f32 %247, f32 %250;
    f32* %252 = getelementptr &([8 * f32]* %239)[i64 3][i64 0];
    f32 %253 = load f32* %252;
    f32 %254 = fmul f32 %253, f32 0.5;
    f32 %255 = fadd f32 %251, f32 %254;
    i32 %256 = add i32 %237, i32 4;
    i1 %257 = icmp sgt i32 %4, i32 %256;
    cbr i1 %257(prob = 0.75), ^while.body15, ^scalar.final1;
  ^while.body16:
    f32 %258 = phi [^super.header2, f32 %129] [^while.body16, f32 %323];
    i32 %259 = phi [^super.header2, i32 1] [^while.body16, i32 %324];
    f32* %260 = getelementptr &([8 * f32]* %19)[i64 0][i32 %259];
    f32 %261 = load f32* %260;
    f32 %262 = fmul f32 %261, f32 0.5;
    f32 %263 = fadd f32 %258, f32 %262;
    f32* %264 = getelementptr &(f32* %260)[i64 1];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 0.5;
    f32 %267 = fadd f32 %263, f32 %266;
    f32* %268 = getelementptr &(f32* %260)[i64 2];
    f32 %269 = load f32* %268;
    f32 %270 = fmul f32 %269, f32 0.5;
    f32 %271 = fadd f32 %267, f32 %270;
    f32* %272 = getelementptr &(f32* %260)[i64 3];
    f32 %273 = load f32* %272;
    f32 %274 = fmul f32 %273, f32 0.5;
    f32 %275 = fadd f32 %271, f32 %274;
    f32* %276 = getelementptr &(f32* %260)[i64 4];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 %277, f32 0.5;
    f32 %279 = fadd f32 %275, f32 %278;
    f32* %280 = getelementptr &(f32* %260)[i64 5];
    f32 %281 = load f32* %280;
    f32 %282 = fmul f32 %281, f32 0.5;
    f32 %283 = fadd f32 %279, f32 %282;
    f32* %284 = getelementptr &(f32* %260)[i64 6];
    f32 %285 = load f32* %284;
    f32 %286 = fmul f32 %285, f32 0.5;
    f32 %287 = fadd f32 %283, f32 %286;
    f32* %288 = getelementptr &(f32* %260)[i64 7];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 %289, f32 0.5;
    f32 %291 = fadd f32 %287, f32 %290;
    f32* %292 = getelementptr &(f32* %260)[i64 8];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %293, f32 0.5;
    f32 %295 = fadd f32 %291, f32 %294;
    f32* %296 = getelementptr &(f32* %260)[i64 9];
    f32 %297 = load f32* %296;
    f32 %298 = fmul f32 %297, f32 0.5;
    f32 %299 = fadd f32 %295, f32 %298;
    f32* %300 = getelementptr &(f32* %260)[i64 10];
    f32 %301 = load f32* %300;
    f32 %302 = fmul f32 %301, f32 0.5;
    f32 %303 = fadd f32 %299, f32 %302;
    f32* %304 = getelementptr &(f32* %260)[i64 11];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 %305, f32 0.5;
    f32 %307 = fadd f32 %303, f32 %306;
    f32* %308 = getelementptr &(f32* %260)[i64 12];
    f32 %309 = load f32* %308;
    f32 %310 = fmul f32 %309, f32 0.5;
    f32 %311 = fadd f32 %307, f32 %310;
    f32* %312 = getelementptr &(f32* %260)[i64 13];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 %313, f32 0.5;
    f32 %315 = fadd f32 %311, f32 %314;
    f32* %316 = getelementptr &(f32* %260)[i64 14];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 %317, f32 0.5;
    f32 %319 = fadd f32 %315, f32 %318;
    f32* %320 = getelementptr &(f32* %260)[i64 15];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %321, f32 0.5;
    f32 %323 = fadd f32 %319, f32 %322;
    i32 %324 = add i32 %259, i32 16;
    i1 %325 = icmp sgt i32 %10, i32 %324;
    cbr i1 %325(prob = 0.941176), ^while.body16, ^scalar.header3;
  ^scalar.final2:
    f32 %326 = phi [^scalar.header2, f32 %226] [^while.body17, f32 %346];
    store f32* %83 with f32 %326;
    ubr ^b11;
  ^scalar.header3:
    f32 %327 = phi [^super.header2, f32 %129] [^while.body16, f32 %323];
    i32 %328 = phi [^super.header2, i32 1] [^while.body16, i32 %324];
    f32 %329 = phi [^super.header2, f32 undef] [^while.body16, f32 %323];
    i32 %330 = phi [^super.header2, i32 undef] [^while.body16, i32 %324];
    i1 %331 = icmp sgt i32 %2, i32 %328;
    cbr i1 %331(prob = 0.75), ^while.body18, ^scalar.final3;
  ^b15:
    i32 %332 = add i32 %28, i32 1;
    i1 %333 = icmp sgt i32 %1, i32 %332;
    cbr i1 %333(prob = 0.984615), ^while.body2, ^b3;
  ^prebody2:
    f32 %334 = s2f i32 %223 to f32;
    f32 %335 = fmul f32 %66, f32 %334;
    f32 %336 = fadd f32 %335, f32 1.5708;
    i1 %337 = fcmp ogt f32 %336, f32 6.28319;
    i1 %338 = fcmp olt f32 %336, f32 -6.28319;
    i1 %339 = or i1 %337, i1 %338;
    [8 * f32]* %340 = getelementptr &([8 * f32]* %19)[i32 %223];
    cbr i1 %339(prob = 0.5), ^if.then2, ^b17;
  ^while.body17 {scalar}:
    f32 %341 = phi [^scalar.header2, f32 %225] [^while.body17, f32 %346];
    i32 %342 = phi [^scalar.header2, i32 %224] [^while.body17, i32 %347];
    f32* %343 = getelementptr &([8 * f32]* %19)[i64 0][i32 %342];
    f32 %344 = load f32* %343;
    f32 %345 = fmul f32 %344, f32 0.5;
    f32 %346 = fadd f32 %341, f32 %345;
    i32 %347 = add i32 %342, i32 1;
    i1 %348 = icmp sgt i32 %1, i32 %347;
    cbr i1 %348(prob = 0.75), ^while.body17, ^scalar.final2;
  ^b16:
    i32 %349 = add i32 %223, i32 1;
    i1 %350 = icmp sgt i32 %0, i32 %349;
    cbr i1 %350(prob = 0.984615), ^while.body14, ^b14;
  ^if.then2:
    f32 %351 = fdiv f32 %336, f32 6.28319;
    i32 %352 = f2s f32 %351 to i32;
    f32 %353 = s2f i32 %352 to f32;
    f32 %354 = fmul f32 %353, f32 6.28319;
    f32 %355 = fsub f32 %336, f32 %354;
    ubr ^b17;
  ^scalar.final3:
    f32 %356 = phi [^scalar.header3, f32 %329] [^while.body18, f32 %384];
    i32 %357 = phi [^scalar.header3, i32 %330] [^while.body18, i32 %385];
    ubr ^scalar.header2;
  ^b17:
    f32 %358 = phi [^prebody2, f32 %336] [^if.then2, f32 %355];
    i1 %359 = fcmp ogt f32 %358, f32 3.14159;
    f32 %360 = fsub f32 %358, f32 6.28319;
    f32 %361 = select i1 %359 ? f32 %360 : f32 %358;
    i1 %362 = fcmp olt f32 %361, f32 -3.14159;
    f32 %363 = fadd f32 %361, f32 6.28319;
    f32 %364 = select i1 %362 ? f32 %363 : f32 %361;
    f32 %365 = call (f32) -> f32 @my_sin_impl(f32 %364);
    f32 %366 = load f32* %83;
    ubr ^while.body19;
  ^while.body18 {scalar}:
    i32 %367 = phi [^scalar.header3, i32 %328] [^while.body18, i32 %385];
    f32 %368 = phi [^scalar.header3, f32 %327] [^while.body18, f32 %384];
    f32* %369 = getelementptr &([8 * f32]* %19)[i64 0][i32 %367];
    f32 %370 = load f32* %369;
    f32 %371 = fmul f32 %370, f32 0.5;
    f32 %372 = fadd f32 %368, f32 %371;
    f32* %373 = getelementptr &(f32* %369)[i64 1];
    f32 %374 = load f32* %373;
    f32 %375 = fmul f32 %374, f32 0.5;
    f32 %376 = fadd f32 %372, f32 %375;
    f32* %377 = getelementptr &(f32* %369)[i64 2];
    f32 %378 = load f32* %377;
    f32 %379 = fmul f32 %378, f32 0.5;
    f32 %380 = fadd f32 %376, f32 %379;
    f32* %381 = getelementptr &(f32* %369)[i64 3];
    f32 %382 = load f32* %381;
    f32 %383 = fmul f32 %382, f32 0.5;
    f32 %384 = fadd f32 %380, f32 %383;
    i32 %385 = add i32 %367, i32 4;
    i1 %386 = icmp sgt i32 %2, i32 %385;
    cbr i1 %386(prob = 0.75), ^while.body18, ^scalar.final3;
  ^while.body19:
    f32 %387 = phi [^b17, f32 %366] [^b18, f32 %412];
    i32 %388 = phi [^b17, i32 1] [^b18, i32 %413];
    f32 %389 = s2f i32 %388 to f32;
    f32 %390 = fmul f32 %88, f32 %389;
    f32 %391 = fadd f32 %390, f32 1.5708;
    i1 %392 = fcmp ogt f32 %391, f32 6.28319;
    i1 %393 = fcmp olt f32 %391, f32 -6.28319;
    i1 %394 = or i1 %392, i1 %393;
    f32* %395 = getelementptr &([8 * f32]* %340)[i64 0][i32 %388];
    f32 %396 = load f32* %395;
    f32 %397 = fmul f32 %396, f32 %365;
    cbr i1 %394(prob = 0.5), ^if.then3, ^b18;
  ^if.then3:
    f32 %398 = fdiv f32 %391, f32 6.28319;
    i32 %399 = f2s f32 %398 to i32;
    f32 %400 = s2f i32 %399 to f32;
    f32 %401 = fmul f32 %400, f32 6.28319;
    f32 %402 = fsub f32 %391, f32 %401;
    ubr ^b18;
  ^b18:
    f32 %403 = phi [^while.body19, f32 %391] [^if.then3, f32 %402];
    i1 %404 = fcmp ogt f32 %403, f32 3.14159;
    f32 %405 = fsub f32 %403, f32 6.28319;
    f32 %406 = select i1 %404 ? f32 %405 : f32 %403;
    i1 %407 = fcmp olt f32 %406, f32 -3.14159;
    f32 %408 = fadd f32 %406, f32 6.28319;
    f32 %409 = select i1 %407 ? f32 %408 : f32 %406;
    f32 %410 = call (f32) -> f32 @my_sin_impl(f32 %409);
    f32 %411 = fmul f32 %397, f32 %410;
    f32 %412 = fadd f32 %387, f32 %411;
    store f32* %83 with f32 %412;
    i32 %413 = add i32 %388, i32 1;
    i1 %414 = icmp sgt i32 %1, i32 %413;
    cbr i1 %414(prob = 0.984615), ^while.body19, ^b16;
}
