internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = fcmp gt f32 %x, f32 0;
    cbr i1 %3(prob = 0.5), ^entry1, ^b;
^b:
    f32 %4 = fneg f32 %x;
    ubr ^entry1;
^entry1:
    f32 %5 = phi [^entry, f32 %x] [^b, f32 %4];
    i1 %6 = fcmp le f32 %5, f32 1e-06;
    cbr i1 %6(prob = 0.5), ^if.then, ^b1;
^if.then:
    ret f32 %x;
^b1:
    f32 %7 = fdiv f32 %x, f32 3;
    f32 %8 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %7, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2);
    f32 %9 = fmul f32 3, f32 %8;
    f32 %10 = fmul f32 4, f32 %8;
    f32 %11 = fmul f32 %10, f32 %8;
    f32 %12 = fmul f32 %11, f32 %8;
    f32 %13 = fsub f32 %9, f32 %12;
    ret f32 %13;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %194 = phi [^b1, i32 %202] [^entry, i32 %192];
    i32 %195 = phi [^b1, i32 %203] [^entry, i32 %193];
    i32 %196 = phi [^b1, i32 %212] [^entry, i32 0];
    i32 %197 = phi [^b1, i32 %202] [^entry, i32 %192];
    i32 %198 = phi [^b1, i32 %212] [^entry, i32 0];
    i1 %199 = scmp lt i32 %198, i32 %197;
    cbr i1 %199(prob = 0.97), ^while.header1, ^b;
^b:
    [8 * f32]* %200 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %201 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %202 = phi [^while.header, i32 %194] [^while.body, i32 %202];
    i32 %203 = phi [^while.header, i32 %195] [^while.body, i32 %203];
    i32 %204 = phi [^while.header, i32 %196] [^while.body, i32 %204];
    i32 %205 = phi [^while.header, i32 0] [^while.body, i32 %211];
    i32 %206 = phi [^while.header, i32 0] [^while.body, i32 %211];
    i1 %207 = scmp lt i32 %206, i32 %203;
    cbr i1 %207(prob = 0.97), ^while.body, ^b1;
^while.body:
    [8 * f32]* %208 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %204];
    f32* %209 = getelementptr &([8 * f32]* %208)[i64 0][i32 %205];
    f32 %210 = call () -> f32 @getfloat();
    store f32* %209 with f32 %210;
    i32 %211 = add i32 %205, i32 1;
    ubr ^while.header1;
^b1:
    i32 %212 = add i32 %204, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %213 = phi [^b2, i32 %223] [^b, i32 %194];
    i32 %214 = phi [^b2, i32 %224] [^b, i32 %195];
    i32 %215 = phi [^b2, i32 %244] [^b, i32 0];
    i32 %216 = phi [^b2, i32 %227] [^b, i32 %195];
    i32 %217 = phi [^b2, i32 %228] [^b, i32 %194];
    [8 * f32]* %218 = phi [^b2, [8 * f32]* %229] [^b, [8 * f32]* %201];
    [8 * f32]* %219 = phi [^b2, [8 * f32]* %230] [^b, [8 * f32]* %200];
    i32 %220 = phi [^b, i32 %194] [^b2, i32 %228];
    i32 %221 = phi [^b, i32 0] [^b2, i32 %244];
    i1 %222 = scmp lt i32 %221, i32 %220;
    cbr i1 %222(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %223 = phi [^while.header2, i32 %213] [^b4, i32 %249];
    i32 %224 = phi [^while.header2, i32 %214] [^b4, i32 %250];
    i32 %225 = phi [^while.header2, i32 0] [^b4, i32 %279];
    i32 %226 = phi [^while.header2, i32 %215] [^b4, i32 %253];
    i32 %227 = phi [^while.header2, i32 %216] [^b4, i32 %254];
    i32 %228 = phi [^while.header2, i32 %217] [^b4, i32 %255];
    [8 * f32]* %229 = phi [^while.header2, [8 * f32]* %218] [^b4, [8 * f32]* %256];
    [8 * f32]* %230 = phi [^while.header2, [8 * f32]* %219] [^b4, [8 * f32]* %257];
    i32 %231 = phi [^while.header2, i32 0] [^b4, i32 %279];
    i1 %232 = scmp lt i32 %231, i32 %227;
    cbr i1 %232(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %233 = phi [^while.header2, i32 %213] [^b5, i32 %260];
    i32 %234 = phi [^while.header2, i32 %214] [^b5, i32 %261];
    i32 %235 = phi [^while.header2, i32 0] [^b5, i32 %284];
    i32 %236 = phi [^while.header2, i32 %214] [^b5, i32 %264];
    i32 %237 = phi [^while.header2, i32 %213] [^b5, i32 %265];
    [8 * f32]* %238 = phi [^while.header2, [8 * f32]* %200] [^b5, [8 * f32]* %266];
    i32 %239 = phi [^while.header2, i32 %213] [^b5, i32 %265];
    i32 %240 = phi [^while.header2, i32 0] [^b5, i32 %284];
    i1 %241 = scmp lt i32 %240, i32 %239;
    cbr i1 %241(prob = 0.97), ^while.body2, ^b3;
^while.body1:
    [8 * f32]* %242 = getelementptr &([8 * f32]* %230)[i32 %226];
    f32* %243 = getelementptr &([8 * f32]* %242)[i64 0][i32 %225];
    store f32* %243 with f32 0;
    ubr ^while.header5;
^b2:
    i32 %244 = add i32 %226, i32 1;
    ubr ^while.header2;
^while.body2:
    [8 * f32]* %245 = getelementptr &([8 * f32]* %238)[i32 %235];
    f32* %246 = getelementptr &([8 * f32]* %245)[i64 0][i64 0];
    f32 %247 = load f32* %246;
    call (f32) -> void @putfloat(f32 %247);
    ubr ^while.header6;
^b3:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %248 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    ubr ^while.header7;
^while.header5:
    i32 %249 = phi [^b6, i32 %285] [^while.body1, i32 %223];
    i32 %250 = phi [^b6, i32 %286] [^while.body1, i32 %224];
    i32 %251 = phi [^b6, i32 %316] [^while.body1, i32 0];
    i32 %252 = phi [^b6, i32 %289] [^while.body1, i32 %225];
    i32 %253 = phi [^b6, i32 %290] [^while.body1, i32 %226];
    i32 %254 = phi [^b6, i32 %291] [^while.body1, i32 %227];
    i32 %255 = phi [^b6, i32 %292] [^while.body1, i32 %228];
    [8 * f32]* %256 = phi [^b6, [8 * f32]* %293] [^while.body1, [8 * f32]* %229];
    [8 * f32]* %257 = phi [^b6, [8 * f32]* %294] [^while.body1, [8 * f32]* %230];
    i32 %258 = phi [^while.body1, i32 0] [^b6, i32 %316];
    i1 %259 = scmp lt i32 %258, i32 %255;
    cbr i1 %259(prob = 0.97), ^while.header8, ^b4;
^while.header6:
    i32 %260 = phi [^while.body3, i32 %260] [^while.body2, i32 %233];
    i32 %261 = phi [^while.body3, i32 %261] [^while.body2, i32 %234];
    i32 %262 = phi [^while.body3, i32 %283] [^while.body2, i32 1];
    i32 %263 = phi [^while.body3, i32 %263] [^while.body2, i32 %235];
    i32 %264 = phi [^while.body3, i32 %264] [^while.body2, i32 %236];
    i32 %265 = phi [^while.body3, i32 %265] [^while.body2, i32 %237];
    [8 * f32]* %266 = phi [^while.body3, [8 * f32]* %266] [^while.body2, [8 * f32]* %238];
    i32 %267 = phi [^while.body2, i32 1] [^while.body3, i32 %283];
    i1 %268 = scmp lt i32 %267, i32 %264;
    cbr i1 %268(prob = 0.97), ^while.body3, ^b5;
^while.header7:
    i32 %269 = phi [^b7, i32 %298] [^b3, i32 %233];
    i32 %270 = phi [^b7, i32 %299] [^b3, i32 %234];
    i32 %271 = phi [^b7, i32 %337] [^b3, i32 0];
    i32 %272 = phi [^b7, i32 %302] [^b3, i32 %214];
    i32 %273 = phi [^b7, i32 %303] [^b3, i32 %213];
    [8 * f32]* %274 = phi [^b7, [8 * f32]* %304] [^b3, [8 * f32]* %200];
    [8 * f32]* %275 = phi [^b7, [8 * f32]* %305] [^b3, [8 * f32]* %248];
    i32 %276 = phi [^b3, i32 %213] [^b7, i32 %303];
    i32 %277 = phi [^b3, i32 0] [^b7, i32 %337];
    i1 %278 = scmp lt i32 %277, i32 %276;
    cbr i1 %278(prob = 0.97), ^while.header9, ^while.header10;
^b4:
    i32 %279 = add i32 %252, i32 1;
    ubr ^while.header3;
^while.body3:
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %280 = getelementptr &([8 * f32]* %266)[i32 %263];
    f32* %281 = getelementptr &([8 * f32]* %280)[i64 0][i32 %262];
    f32 %282 = load f32* %281;
    call (f32) -> void @putfloat(f32 %282);
    i32 %283 = add i32 %262, i32 1;
    ubr ^while.header6;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %284 = add i32 %263, i32 1;
    ubr ^while.header4;
^while.header8:
    i32 %285 = phi [^while.header5, i32 %249] [^b24, i32 %285];
    i32 %286 = phi [^while.header5, i32 %250] [^b24, i32 %286];
    i32 %287 = phi [^while.header5, i32 0] [^b24, i32 %499];
    i32 %288 = phi [^while.header5, i32 %251] [^b24, i32 %288];
    i32 %289 = phi [^while.header5, i32 %252] [^b24, i32 %289];
    i32 %290 = phi [^while.header5, i32 %253] [^b24, i32 %290];
    i32 %291 = phi [^while.header5, i32 %254] [^b24, i32 %291];
    i32 %292 = phi [^while.header5, i32 %255] [^b24, i32 %292];
    [8 * f32]* %293 = phi [^while.header5, [8 * f32]* %256] [^b24, [8 * f32]* %293];
    [8 * f32]* %294 = phi [^while.header5, [8 * f32]* %257] [^b24, [8 * f32]* %294];
    i32 %295 = phi [^while.header5, i32 %254] [^b24, i32 %291];
    i32 %296 = phi [^while.header5, i32 0] [^b24, i32 %499];
    i1 %297 = scmp lt i32 %296, i32 %295;
    cbr i1 %297(prob = 0.97), ^while.body4, ^b6;
^while.header9:
    i32 %298 = phi [^while.header7, i32 %269] [^b15, i32 %406];
    i32 %299 = phi [^while.header7, i32 %270] [^b15, i32 %407];
    i32 %300 = phi [^while.header7, i32 0] [^b15, i32 %439];
    i32 %301 = phi [^while.header7, i32 %271] [^b15, i32 %410];
    i32 %302 = phi [^while.header7, i32 %272] [^b15, i32 %411];
    i32 %303 = phi [^while.header7, i32 %273] [^b15, i32 %412];
    [8 * f32]* %304 = phi [^while.header7, [8 * f32]* %274] [^b15, [8 * f32]* %413];
    [8 * f32]* %305 = phi [^while.header7, [8 * f32]* %275] [^b15, [8 * f32]* %414];
    i32 %306 = phi [^while.header7, i32 %272] [^b15, i32 %411];
    i32 %307 = phi [^while.header7, i32 0] [^b15, i32 %439];
    i1 %308 = scmp lt i32 %307, i32 %306;
    cbr i1 %308(prob = 0.97), ^while.body5, ^b7;
^while.header10:
    i32 %309 = phi [^b12, i32 %382] [^while.header7, i32 0];
    i32 %310 = phi [^b12, i32 %356] [^while.header7, i32 %270];
    i32 %311 = phi [^b12, i32 %357] [^while.header7, i32 %269];
    [8 * f32]* %312 = phi [^b12, [8 * f32]* %358] [^while.header7, [8 * f32]* %248];
    i32 %313 = phi [^while.header7, i32 %269] [^b12, i32 %357];
    i32 %314 = phi [^while.header7, i32 0] [^b12, i32 %382];
    i1 %315 = scmp lt i32 %314, i32 %313;
    cbr i1 %315(prob = 0.97), ^while.body6, ^b8;
^b6:
    i32 %316 = add i32 %288, i32 1;
    ubr ^while.header5;
^while.body4:
    [8 * f32]* %317 = getelementptr &([8 * f32]* %294)[i32 %290];
    f32* %318 = getelementptr &([8 * f32]* %317)[i64 0][i32 %289];
    f32 %319 = load f32* %318;
    [8 * f32]* %320 = getelementptr &([8 * f32]* %293)[i32 %288];
    f32* %321 = getelementptr &([8 * f32]* %320)[i64 0][i32 %287];
    f32 %322 = load f32* %321;
    f32 %323 = s2f i32 %292 to f32;
    f32 %324 = fdiv f32 3.14159, f32 %323;
    f32 %325 = s2f i32 %288 to f32;
    f32 %326 = fadd f32 %325, f32 0.5;
    f32 %327 = fmul f32 %324, f32 %326;
    f32 %328 = s2f i32 %290 to f32;
    f32 %329 = fmul f32 %327, f32 %328;
    f32 %330 = fadd f32 %329, f32 1.5708;
    i1 %331 = fcmp gt f32 %330, f32 6.28319;
    cbr i1 %331(prob = 0.5), ^b10, ^b9;
^while.body5:
    [8 * f32]* %332 = getelementptr &([8 * f32]* %305)[i32 %301];
    f32* %333 = getelementptr &([8 * f32]* %332)[i64 0][i32 %300];
    f32* %334 = getelementptr &([8 * f32]* %304)[i64 0][i64 0];
    f32 %335 = load f32* %334;
    f32 %336 = fmul f32 0.25, f32 %335;
    store f32* %333 with f32 %336;
    ubr ^while.header11;
^b7:
    i32 %337 = add i32 %301, i32 1;
    ubr ^while.header7;
^while.body6:
    [8 * f32]* %338 = getelementptr &([8 * f32]* %312)[i32 %309];
    f32* %339 = getelementptr &([8 * f32]* %338)[i64 0][i64 0];
    f32 %340 = load f32* %339;
    call (f32) -> void @putfloat(f32 %340);
    ubr ^while.header12;
^b8:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b9:
    i1 %341 = fcmp lt f32 %330, f32 -6.28319;
    ubr ^b10;
^b10:
    i1 %342 = phi [^while.body4, i1 true] [^b9, i1 %341];
    cbr i1 %342(prob = 0.5), ^if.then, ^b11;
^while.header11:
    i32 %343 = phi [^while.body7, i32 %343] [^while.body5, i32 %298];
    i32 %344 = phi [^while.body7, i32 %344] [^while.body5, i32 %299];
    i32 %345 = phi [^while.body7, i32 %374] [^while.body5, i32 1];
    i32 %346 = phi [^while.body7, i32 %346] [^while.body5, i32 %300];
    i32 %347 = phi [^while.body7, i32 %347] [^while.body5, i32 %301];
    i32 %348 = phi [^while.body7, i32 %348] [^while.body5, i32 %302];
    i32 %349 = phi [^while.body7, i32 %349] [^while.body5, i32 %303];
    [8 * f32]* %350 = phi [^while.body7, [8 * f32]* %350] [^while.body5, [8 * f32]* %304];
    [8 * f32]* %351 = phi [^while.body7, [8 * f32]* %351] [^while.body5, [8 * f32]* %305];
    i32 %352 = phi [^while.body7, i32 %374] [^while.body5, i32 1];
    i1 %353 = scmp lt i32 %352, i32 %349;
    cbr i1 %353(prob = 0.97), ^while.body7, ^while.header13;
^while.header12:
    i32 %354 = phi [^while.body8, i32 %378] [^while.body6, i32 1];
    i32 %355 = phi [^while.body8, i32 %355] [^while.body6, i32 %309];
    i32 %356 = phi [^while.body8, i32 %356] [^while.body6, i32 %310];
    i32 %357 = phi [^while.body8, i32 %357] [^while.body6, i32 %311];
    [8 * f32]* %358 = phi [^while.body8, [8 * f32]* %358] [^while.body6, [8 * f32]* %312];
    i32 %359 = phi [^while.body6, i32 1] [^while.body8, i32 %378];
    i1 %360 = scmp lt i32 %359, i32 %356;
    cbr i1 %360(prob = 0.97), ^while.body8, ^b12;
^if.then:
    f32 %361 = fdiv f32 %330, f32 6.28319;
    i32 %362 = f2s f32 %361 to i32;
    f32 %363 = s2f i32 %362 to f32;
    f32 %364 = fmul f32 %363, f32 6.28319;
    f32 %365 = fsub f32 %330, f32 %364;
    ubr ^b11;
^while.body7:
    [8 * f32]* %366 = getelementptr &([8 * f32]* %351)[i32 %347];
    f32* %367 = getelementptr &([8 * f32]* %366)[i64 0][i32 %346];
    f32 %368 = load f32* %367;
    [8 * f32]* %369 = getelementptr &([8 * f32]* %350)[i32 %345];
    f32* %370 = getelementptr &([8 * f32]* %369)[i64 0][i64 0];
    f32 %371 = load f32* %370;
    f32 %372 = fmul f32 0.5, f32 %371;
    f32 %373 = fadd f32 %368, f32 %372;
    store f32* %367 with f32 %373;
    i32 %374 = add i32 %345, i32 1;
    ubr ^while.header11;
^while.body8:
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %375 = getelementptr &([8 * f32]* %358)[i32 %355];
    f32* %376 = getelementptr &([8 * f32]* %375)[i64 0][i32 %354];
    f32 %377 = load f32* %376;
    call (f32) -> void @putfloat(f32 %377);
    i32 %378 = add i32 %354, i32 1;
    ubr ^while.header12;
^b11:
    f32 %379 = phi [^b10, f32 %330] [^if.then, f32 %365];
    f32 %380 = phi [^b10, f32 %330] [^if.then, f32 %365];
    i1 %381 = fcmp gt f32 %380, f32 3.14159;
    cbr i1 %381(prob = 0.5), ^if.then1, ^b13;
^b12:
    call (i32) -> void @putch(i32 10);
    i32 %382 = add i32 %355, i32 1;
    ubr ^while.header10;
^while.header13:
    i32 %383 = phi [^while.header11, i32 %343] [^while.body9, i32 %383];
    i32 %384 = phi [^while.header11, i32 %344] [^while.body9, i32 %384];
    i32 %385 = phi [^while.header11, i32 1] [^while.body9, i32 %402];
    i32 %386 = phi [^while.header11, i32 %346] [^while.body9, i32 %386];
    i32 %387 = phi [^while.header11, i32 %347] [^while.body9, i32 %387];
    i32 %388 = phi [^while.header11, i32 %348] [^while.body9, i32 %388];
    i32 %389 = phi [^while.header11, i32 %349] [^while.body9, i32 %389];
    [8 * f32]* %390 = phi [^while.header11, [8 * f32]* %350] [^while.body9, [8 * f32]* %390];
    [8 * f32]* %391 = phi [^while.header11, [8 * f32]* %351] [^while.body9, [8 * f32]* %391];
    i32 %392 = phi [^while.header11, i32 1] [^while.body9, i32 %402];
    i1 %393 = scmp lt i32 %392, i32 %388;
    cbr i1 %393(prob = 0.97), ^while.body9, ^while.header14;
^if.then1:
    f32 %394 = fsub f32 %379, f32 6.28319;
    ubr ^b13;
^while.body9:
    [8 * f32]* %395 = getelementptr &([8 * f32]* %391)[i32 %387];
    f32* %396 = getelementptr &([8 * f32]* %395)[i64 0][i32 %386];
    f32 %397 = load f32* %396;
    f32* %398 = getelementptr &([8 * f32]* %390)[i64 0][i32 %385];
    f32 %399 = load f32* %398;
    f32 %400 = fmul f32 0.5, f32 %399;
    f32 %401 = fadd f32 %397, f32 %400;
    store f32* %396 with f32 %401;
    i32 %402 = add i32 %385, i32 1;
    ubr ^while.header13;
^b13:
    f32 %403 = phi [^b11, f32 %379] [^if.then1, f32 %394];
    f32 %404 = phi [^b11, f32 %379] [^if.then1, f32 %394];
    i1 %405 = fcmp lt f32 %404, f32 -3.14159;
    cbr i1 %405(prob = 0.5), ^if.then2, ^b14;
^while.header14:
    i32 %406 = phi [^while.header13, i32 %383] [^b18, i32 %440];
    i32 %407 = phi [^while.header13, i32 %384] [^b18, i32 %441];
    i32 %408 = phi [^while.header13, i32 1] [^b18, i32 %455];
    i32 %409 = phi [^while.header13, i32 %386] [^b18, i32 %444];
    i32 %410 = phi [^while.header13, i32 %387] [^b18, i32 %445];
    i32 %411 = phi [^while.header13, i32 %388] [^b18, i32 %446];
    i32 %412 = phi [^while.header13, i32 %389] [^b18, i32 %447];
    [8 * f32]* %413 = phi [^while.header13, [8 * f32]* %390] [^b18, [8 * f32]* %448];
    [8 * f32]* %414 = phi [^while.header13, [8 * f32]* %391] [^b18, [8 * f32]* %449];
    i32 %415 = phi [^while.header13, i32 1] [^b18, i32 %455];
    i1 %416 = scmp lt i32 %415, i32 %412;
    cbr i1 %416(prob = 0.97), ^while.header15, ^b15;
^if.then2:
    f32 %417 = fadd f32 %403, f32 6.28319;
    ubr ^b14;
^b14:
    f32 %418 = phi [^if.then2, f32 %417] [^b13, f32 %403];
    f32 %419 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %418, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %420 = fmul f32 %322, f32 %419;
    f32 %421 = s2f i32 %291 to f32;
    f32 %422 = fdiv f32 3.14159, f32 %421;
    f32 %423 = s2f i32 %287 to f32;
    f32 %424 = fadd f32 %423, f32 0.5;
    f32 %425 = fmul f32 %422, f32 %424;
    f32 %426 = s2f i32 %289 to f32;
    f32 %427 = fmul f32 %425, f32 %426;
    f32 %428 = fadd f32 %427, f32 1.5708;
    i1 %429 = fcmp gt f32 %428, f32 6.28319;
    cbr i1 %429(prob = 0.5), ^b17, ^b16;
^b15:
    [8 * f32]* %430 = getelementptr &([8 * f32]* %414)[i32 %410];
    f32* %431 = getelementptr &([8 * f32]* %430)[i64 0][i32 %409];
    f32 %432 = load f32* %431;
    f32 %433 = fmul f32 %432, f32 2;
    f32 %434 = s2f i32 %412 to f32;
    f32 %435 = fdiv f32 %433, f32 %434;
    f32 %436 = fmul f32 %435, f32 2;
    f32 %437 = s2f i32 %411 to f32;
    f32 %438 = fdiv f32 %436, f32 %437;
    store f32* %431 with f32 %438;
    i32 %439 = add i32 %409, i32 1;
    ubr ^while.header9;
^while.header15:
    i32 %440 = phi [^while.header14, i32 %406] [^b31, i32 %440];
    i32 %441 = phi [^while.header14, i32 %407] [^b31, i32 %441];
    i32 %442 = phi [^while.header14, i32 1] [^b31, i32 %535];
    i32 %443 = phi [^while.header14, i32 %408] [^b31, i32 %443];
    i32 %444 = phi [^while.header14, i32 %409] [^b31, i32 %444];
    i32 %445 = phi [^while.header14, i32 %410] [^b31, i32 %445];
    i32 %446 = phi [^while.header14, i32 %411] [^b31, i32 %446];
    i32 %447 = phi [^while.header14, i32 %412] [^b31, i32 %447];
    [8 * f32]* %448 = phi [^while.header14, [8 * f32]* %413] [^b31, [8 * f32]* %448];
    [8 * f32]* %449 = phi [^while.header14, [8 * f32]* %414] [^b31, [8 * f32]* %449];
    i32 %450 = phi [^while.header14, i32 %411] [^b31, i32 %446];
    i32 %451 = phi [^while.header14, i32 1] [^b31, i32 %535];
    i1 %452 = scmp lt i32 %451, i32 %450;
    cbr i1 %452(prob = 0.97), ^while.body10, ^b18;
^b16:
    i1 %453 = fcmp lt f32 %428, f32 -6.28319;
    ubr ^b17;
^b17:
    i1 %454 = phi [^b14, i1 true] [^b16, i1 %453];
    cbr i1 %454(prob = 0.5), ^if.then3, ^b20;
^b18:
    i32 %455 = add i32 %443, i32 1;
    ubr ^while.header14;
^while.body10:
    [8 * f32]* %456 = getelementptr &([8 * f32]* %449)[i32 %445];
    f32* %457 = getelementptr &([8 * f32]* %456)[i64 0][i32 %444];
    f32 %458 = load f32* %457;
    [8 * f32]* %459 = getelementptr &([8 * f32]* %448)[i32 %443];
    f32* %460 = getelementptr &([8 * f32]* %459)[i64 0][i32 %442];
    f32 %461 = load f32* %460;
    f32 %462 = s2f i32 %447 to f32;
    f32 %463 = fdiv f32 3.14159, f32 %462;
    f32 %464 = s2f i32 %445 to f32;
    f32 %465 = fadd f32 %464, f32 0.5;
    f32 %466 = fmul f32 %463, f32 %465;
    f32 %467 = s2f i32 %443 to f32;
    f32 %468 = fmul f32 %466, f32 %467;
    f32 %469 = fadd f32 %468, f32 1.5708;
    i1 %470 = fcmp gt f32 %469, f32 6.28319;
    cbr i1 %470(prob = 0.5), ^b21, ^b19;
^if.then3:
    f32 %471 = fdiv f32 %428, f32 6.28319;
    i32 %472 = f2s f32 %471 to i32;
    f32 %473 = s2f i32 %472 to f32;
    f32 %474 = fmul f32 %473, f32 6.28319;
    f32 %475 = fsub f32 %428, f32 %474;
    ubr ^b20;
^b19:
    i1 %476 = fcmp lt f32 %469, f32 -6.28319;
    ubr ^b21;
^b20:
    f32 %477 = phi [^b17, f32 %428] [^if.then3, f32 %475];
    f32 %478 = phi [^if.then3, f32 %475] [^b17, f32 %428];
    i1 %479 = fcmp gt f32 %478, f32 3.14159;
    cbr i1 %479(prob = 0.5), ^if.then4, ^b22;
^b21:
    i1 %480 = phi [^while.body10, i1 true] [^b19, i1 %476];
    cbr i1 %480(prob = 0.5), ^if.then5, ^b23;
^if.then4:
    f32 %481 = fsub f32 %477, f32 6.28319;
    ubr ^b22;
^if.then5:
    f32 %482 = fdiv f32 %469, f32 6.28319;
    i32 %483 = f2s f32 %482 to i32;
    f32 %484 = s2f i32 %483 to f32;
    f32 %485 = fmul f32 %484, f32 6.28319;
    f32 %486 = fsub f32 %469, f32 %485;
    ubr ^b23;
^b22:
    f32 %487 = phi [^b20, f32 %477] [^if.then4, f32 %481];
    f32 %488 = phi [^b20, f32 %477] [^if.then4, f32 %481];
    i1 %489 = fcmp lt f32 %488, f32 -3.14159;
    cbr i1 %489(prob = 0.5), ^if.then6, ^b24;
^b23:
    f32 %490 = phi [^b21, f32 %469] [^if.then5, f32 %486];
    f32 %491 = phi [^b21, f32 %469] [^if.then5, f32 %486];
    i1 %492 = fcmp gt f32 %491, f32 3.14159;
    cbr i1 %492(prob = 0.5), ^if.then7, ^b25;
^if.then6:
    f32 %493 = fadd f32 %487, f32 6.28319;
    ubr ^b24;
^if.then7:
    f32 %494 = fsub f32 %490, f32 6.28319;
    ubr ^b25;
^b24:
    f32 %495 = phi [^if.then6, f32 %493] [^b22, f32 %487];
    f32 %496 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %495, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %497 = fmul f32 %420, f32 %496;
    f32 %498 = fadd f32 %319, f32 %497;
    store f32* %318 with f32 %498;
    i32 %499 = add i32 %287, i32 1;
    ubr ^while.header8;
^b25:
    f32 %500 = phi [^b23, f32 %490] [^if.then7, f32 %494];
    f32 %501 = phi [^b23, f32 %490] [^if.then7, f32 %494];
    i1 %502 = fcmp lt f32 %501, f32 -3.14159;
    cbr i1 %502(prob = 0.5), ^if.then8, ^b26;
^if.then8:
    f32 %503 = fadd f32 %500, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %504 = phi [^if.then8, f32 %503] [^b25, f32 %500];
    f32 %505 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %504, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %506 = fmul f32 %461, f32 %505;
    f32 %507 = s2f i32 %446 to f32;
    f32 %508 = fdiv f32 3.14159, f32 %507;
    f32 %509 = s2f i32 %444 to f32;
    f32 %510 = fadd f32 %509, f32 0.5;
    f32 %511 = fmul f32 %508, f32 %510;
    f32 %512 = s2f i32 %442 to f32;
    f32 %513 = fmul f32 %511, f32 %512;
    f32 %514 = fadd f32 %513, f32 1.5708;
    i1 %515 = fcmp gt f32 %514, f32 6.28319;
    cbr i1 %515(prob = 0.5), ^b28, ^b27;
^b27:
    i1 %516 = fcmp lt f32 %514, f32 -6.28319;
    ubr ^b28;
^b28:
    i1 %517 = phi [^b26, i1 true] [^b27, i1 %516];
    cbr i1 %517(prob = 0.5), ^if.then9, ^b29;
^if.then9:
    f32 %518 = fdiv f32 %514, f32 6.28319;
    i32 %519 = f2s f32 %518 to i32;
    f32 %520 = s2f i32 %519 to f32;
    f32 %521 = fmul f32 %520, f32 6.28319;
    f32 %522 = fsub f32 %514, f32 %521;
    ubr ^b29;
^b29:
    f32 %523 = phi [^b28, f32 %514] [^if.then9, f32 %522];
    f32 %524 = phi [^b28, f32 %514] [^if.then9, f32 %522];
    i1 %525 = fcmp gt f32 %524, f32 3.14159;
    cbr i1 %525(prob = 0.5), ^if.then10, ^b30;
^if.then10:
    f32 %526 = fsub f32 %523, f32 6.28319;
    ubr ^b30;
^b30:
    f32 %527 = phi [^b29, f32 %523] [^if.then10, f32 %526];
    f32 %528 = phi [^b29, f32 %523] [^if.then10, f32 %526];
    i1 %529 = fcmp lt f32 %528, f32 -3.14159;
    cbr i1 %529(prob = 0.5), ^if.then11, ^b31;
^if.then11:
    f32 %530 = fadd f32 %527, f32 6.28319;
    ubr ^b31;
^b31:
    f32 %531 = phi [^if.then11, f32 %530] [^b30, f32 %527];
    f32 %532 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %531, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %533 = fmul f32 %506, f32 %532;
    f32 %534 = fadd f32 %458, f32 %533;
    store f32* %457 with f32 %534;
    i32 %535 = add i32 %442, i32 1;
    ubr ^while.header15;
}
