internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = fcmp gt f32 %x, f32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    f32 %4 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %5 = phi [^entry, f32 %x] [^b, f32 %4];
    i1 %6 = fcmp le f32 %5, f32 1e-06;
    cbr i1 %6(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %7 = fdiv f32 %x, f32 3;
    f32 %8 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %7, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2);
    f32 %9 = fmul f32 3, f32 %8;
    f32 %10 = fmul f32 4, f32 %8;
    f32 %11 = fmul f32 %10, f32 %8;
    f32 %12 = fmul f32 %11, f32 %8;
    f32 %13 = fsub f32 %9, f32 %12;
    ubr ^b3;
^b3:
    f32 %14 = phi [^b1, f32 %x] [^b2, f32 %13];
    ret f32 %14;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    i1 %194 = scmp gt i32 %192, i32 0;
    i1 %195 = scmp gt i32 %193, i32 0;
    cbr i1 %194(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %196 = phi [^b1, i32 %204] [^entry, i32 0];
    cbr i1 %195(prob = 0.97), ^indirect, ^b1;
^b:
    [8 * f32]* %197 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %198 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    f32 %199 = s2f i32 %193 to f32;
    f32 %200 = fdiv f32 3.14159, f32 %199;
    f32 %201 = s2f i32 %192 to f32;
    f32 %202 = fdiv f32 3.14159, f32 %201;
    cbr i1 %194(prob = 0.97), ^while.body1, ^b2;
^indirect:
    [8 * f32]* %203 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %196];
    ubr ^while.body3;
^b1:
    i32 %204 = add i32 %196, i32 1;
    i1 %205 = scmp lt i32 %204, i32 %192;
    cbr i1 %205(prob = 0.97), ^while.body, ^b;
^while.body1:
    i32 %206 = phi [^b, i32 0] [^b3, i32 %218];
    [8 * f32]* %207 = getelementptr &([8 * f32]* %197)[i32 %206];
    f32 %208 = s2f i32 %206 to f32;
    cbr i1 %195(prob = 0.97), ^while.body2, ^b3;
^b2:
    i1 %209 = scmp gt i32 %193, i32 1;
    cbr i1 %194(prob = 0.97), ^while.body4, ^b4;
^while.body2:
    i32 %210 = phi [^b11, i32 %267] [^while.body1, i32 0];
    f32* %211 = getelementptr &([8 * f32]* %207)[i64 0][i32 %210];
    store f32* %211 with f32 0;
    f32 %212 = s2f i32 %210 to f32;
    ubr ^while.body5;
^while.body3:
    i32 %213 = phi [^while.body3, i32 %216] [^indirect, i32 0];
    f32* %214 = getelementptr &([8 * f32]* %203)[i64 0][i32 %213];
    f32 %215 = call () -> f32 @getfloat();
    store f32* %214 with f32 %215;
    i32 %216 = add i32 %213, i32 1;
    i1 %217 = scmp lt i32 %216, i32 %193;
    cbr i1 %217(prob = 0.97), ^while.body3, ^b1;
^b3:
    i32 %218 = add i32 %206, i32 1;
    i1 %219 = scmp lt i32 %218, i32 %192;
    cbr i1 %219(prob = 0.97), ^while.body1, ^b2;
^while.body4:
    i32 %220 = phi [^b2, i32 0] [^b5, i32 %232];
    [8 * f32]* %221 = getelementptr &([8 * f32]* %197)[i32 %220];
    f32* %222 = getelementptr &([8 * f32]* %221)[i64 0][i64 0];
    f32 %223 = load f32* %222;
    call (f32) -> void @putfloat(f32 %223);
    cbr i1 %209(prob = 0.97), ^while.body6, ^b5;
^b4:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %224 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    i1 %225 = scmp gt i32 %192, i32 1;
    cbr i1 %194(prob = 0.97), ^while.body7, ^b6;
^while.body5:
    i32 %226 = phi [^b7, i32 %248] [^while.body2, i32 0];
    cbr i1 %195(prob = 0.97), ^indirect1, ^b7;
^while.body6:
    i32 %227 = phi [^while.body4, i32 1] [^while.body6, i32 %230];
    call (i32) -> void @putch(i32 32);
    f32* %228 = getelementptr &([8 * f32]* %221)[i64 0][i32 %227];
    f32 %229 = load f32* %228;
    call (f32) -> void @putfloat(f32 %229);
    i32 %230 = add i32 %227, i32 1;
    i1 %231 = scmp lt i32 %230, i32 %193;
    cbr i1 %231(prob = 0.97), ^while.body6, ^b5;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %232 = add i32 %220, i32 1;
    i1 %233 = scmp lt i32 %232, i32 %192;
    cbr i1 %233(prob = 0.97), ^while.body4, ^b4;
^while.body7:
    i32 %234 = phi [^b4, i32 0] [^b8, i32 %254];
    [8 * f32]* %235 = getelementptr &([8 * f32]* %224)[i32 %234];
    f32 %236 = s2f i32 %234 to f32;
    f32 %237 = fadd f32 %236, f32 0.5;
    f32 %238 = fmul f32 %202, f32 %237;
    cbr i1 %195(prob = 0.97), ^while.body8, ^b8;
^b6:
    cbr i1 %194(prob = 0.97), ^while.body9, ^b9;
^indirect1:
    [8 * f32]* %239 = getelementptr &([8 * f32]* %198)[i32 %226];
    f32 %240 = s2f i32 %226 to f32;
    f32 %241 = fadd f32 %240, f32 0.5;
    f32 %242 = fmul f32 %202, f32 %241;
    f32 %243 = fmul f32 %242, f32 %208;
    f32 %244 = fadd f32 %243, f32 1.5708;
    i1 %245 = fcmp gt f32 %244, f32 6.28319;
    i1 %246 = fcmp lt f32 %244, f32 -6.28319;
    i1 %247 = or i1 %245, i1 %246;
    cbr i1 %247(prob = 0.75), ^if.then, ^b10;
^b7:
    i32 %248 = add i32 %226, i32 1;
    i1 %249 = scmp lt i32 %248, i32 %192;
    cbr i1 %249(prob = 0.97), ^while.body5, ^b11;
^while.body8:
    i32 %250 = phi [^b17, i32 %309] [^while.body7, i32 0];
    f32* %251 = getelementptr &([8 * f32]* %235)[i64 0][i32 %250];
    f32 %252 = load f32* %64;
    f32 %253 = fmul f32 0.25, f32 %252;
    store f32* %251 with f32 %253;
    cbr i1 %225(prob = 0.97), ^while.body10, ^b12;
^b8:
    i32 %254 = add i32 %234, i32 1;
    i1 %255 = scmp lt i32 %254, i32 %192;
    cbr i1 %255(prob = 0.97), ^while.body7, ^b6;
^while.body9:
    i32 %256 = phi [^b6, i32 0] [^b13, i32 %286];
    [8 * f32]* %257 = getelementptr &([8 * f32]* %224)[i32 %256];
    f32* %258 = getelementptr &([8 * f32]* %257)[i64 0][i64 0];
    f32 %259 = load f32* %258;
    call (f32) -> void @putfloat(f32 %259);
    cbr i1 %209(prob = 0.97), ^while.body11, ^b13;
^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    f32 %260 = fdiv f32 %244, f32 6.28319;
    i32 %261 = f2s f32 %260 to i32;
    f32 %262 = s2f i32 %261 to f32;
    f32 %263 = fmul f32 %262, f32 6.28319;
    f32 %264 = fsub f32 %244, f32 %263;
    ubr ^b10;
^b10:
    f32 %265 = phi [^if.then, f32 %264] [^indirect1, f32 %244];
    i1 %266 = fcmp gt f32 %265, f32 3.14159;
    cbr i1 %266(prob = 0.5), ^if.then1, ^b14;
^b11:
    i32 %267 = add i32 %210, i32 1;
    i1 %268 = scmp lt i32 %267, i32 %193;
    cbr i1 %268(prob = 0.97), ^while.body2, ^b3;
^while.body10:
    f32 %269 = phi [^indirect2, f32 %289] [^while.body8, f32 %253];
    i32 %270 = phi [^indirect2, i32 %276] [^while.body8, i32 1];
    [8 * f32]* %271 = getelementptr &([8 * f32]* %197)[i32 %270];
    f32* %272 = getelementptr &([8 * f32]* %271)[i64 0][i64 0];
    f32 %273 = load f32* %272;
    f32 %274 = fmul f32 0.5, f32 %273;
    f32 %275 = fadd f32 %269, f32 %274;
    store f32* %251 with f32 %275;
    i32 %276 = add i32 %270, i32 1;
    i1 %277 = scmp lt i32 %276, i32 %192;
    cbr i1 %277(prob = 0.97), ^indirect2, ^b12;
^b12:
    f32 %278 = s2f i32 %250 to f32;
    f32 %279 = fadd f32 %278, f32 0.5;
    f32 %280 = fmul f32 %200, f32 %279;
    cbr i1 %209(prob = 0.97), ^while.body12, ^b15;
^while.body11:
    i32 %281 = phi [^while.body11, i32 %284] [^while.body9, i32 1];
    call (i32) -> void @putch(i32 32);
    f32* %282 = getelementptr &([8 * f32]* %257)[i64 0][i32 %281];
    f32 %283 = load f32* %282;
    call (f32) -> void @putfloat(f32 %283);
    i32 %284 = add i32 %281, i32 1;
    i1 %285 = scmp lt i32 %284, i32 %193;
    cbr i1 %285(prob = 0.97), ^while.body11, ^b13;
^b13:
    call (i32) -> void @putch(i32 10);
    i32 %286 = add i32 %256, i32 1;
    i1 %287 = scmp lt i32 %286, i32 %192;
    cbr i1 %287(prob = 0.97), ^while.body9, ^b9;
^if.then1:
    f32 %288 = fsub f32 %265, f32 6.28319;
    ubr ^b14;
^indirect2:
    f32 %289 = load f32* %251;
    ubr ^while.body10;
^b14:
    f32 %290 = phi [^if.then1, f32 %288] [^b10, f32 %265];
    i1 %291 = fcmp lt f32 %290, f32 -3.14159;
    cbr i1 %291(prob = 0.5), ^if.then2, ^b16;
^while.body12:
    i32 %292 = phi [^b12, i32 1] [^while.body12, i32 %298];
    f32 %293 = load f32* %251;
    f32* %294 = getelementptr &([8 * f32]* %197)[i64 0][i32 %292];
    f32 %295 = load f32* %294;
    f32 %296 = fmul f32 0.5, f32 %295;
    f32 %297 = fadd f32 %293, f32 %296;
    store f32* %251 with f32 %297;
    i32 %298 = add i32 %292, i32 1;
    i1 %299 = scmp lt i32 %298, i32 %193;
    cbr i1 %299(prob = 0.97), ^while.body12, ^b15;
^b15:
    cbr i1 %225(prob = 0.97), ^while.body13, ^b17;
^if.then2:
    f32 %300 = fadd f32 %290, f32 6.28319;
    ubr ^b16;
^b16:
    f32 %301 = phi [^b14, f32 %290] [^if.then2, f32 %300];
    f32 %302 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %301, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    ubr ^while.body14;
^while.body13:
    i32 %303 = phi [^b15, i32 1] [^b18, i32 %331];
    cbr i1 %209(prob = 0.97), ^indirect3, ^b18;
^b17:
    f32 %304 = load f32* %251;
    f32 %305 = fmul f32 %304, f32 2;
    f32 %306 = fdiv f32 %305, f32 %201;
    f32 %307 = fmul f32 %306, f32 2;
    f32 %308 = fdiv f32 %307, f32 %199;
    store f32* %251 with f32 %308;
    i32 %309 = add i32 %250, i32 1;
    i1 %310 = scmp lt i32 %309, i32 %193;
    cbr i1 %310(prob = 0.97), ^while.body8, ^b8;
^while.body14:
    i32 %311 = phi [^b16, i32 0] [^b24, i32 %361];
    f32 %312 = load f32* %211;
    f32* %313 = getelementptr &([8 * f32]* %239)[i64 0][i32 %311];
    f32 %314 = load f32* %313;
    f32 %315 = fmul f32 %314, f32 %302;
    f32 %316 = s2f i32 %311 to f32;
    f32 %317 = fadd f32 %316, f32 0.5;
    f32 %318 = fmul f32 %200, f32 %317;
    f32 %319 = fmul f32 %318, f32 %212;
    f32 %320 = fadd f32 %319, f32 1.5708;
    i1 %321 = fcmp gt f32 %320, f32 6.28319;
    i1 %322 = fcmp lt f32 %320, f32 -6.28319;
    i1 %323 = or i1 %321, i1 %322;
    cbr i1 %323(prob = 0.75), ^if.then3, ^b19;
^indirect3:
    [8 * f32]* %324 = getelementptr &([8 * f32]* %197)[i32 %303];
    f32 %325 = s2f i32 %303 to f32;
    f32 %326 = fmul f32 %238, f32 %325;
    f32 %327 = fadd f32 %326, f32 1.5708;
    i1 %328 = fcmp gt f32 %327, f32 6.28319;
    i1 %329 = fcmp lt f32 %327, f32 -6.28319;
    i1 %330 = or i1 %328, i1 %329;
    cbr i1 %330(prob = 0.75), ^if.then4, ^b20;
^b18:
    i32 %331 = add i32 %303, i32 1;
    i1 %332 = scmp lt i32 %331, i32 %192;
    cbr i1 %332(prob = 0.97), ^while.body13, ^b17;
^if.then3:
    f32 %333 = fdiv f32 %320, f32 6.28319;
    i32 %334 = f2s f32 %333 to i32;
    f32 %335 = s2f i32 %334 to f32;
    f32 %336 = fmul f32 %335, f32 6.28319;
    f32 %337 = fsub f32 %320, f32 %336;
    ubr ^b19;
^if.then4:
    f32 %338 = fdiv f32 %327, f32 6.28319;
    i32 %339 = f2s f32 %338 to i32;
    f32 %340 = s2f i32 %339 to f32;
    f32 %341 = fmul f32 %340, f32 6.28319;
    f32 %342 = fsub f32 %327, f32 %341;
    ubr ^b20;
^b19:
    f32 %343 = phi [^while.body14, f32 %320] [^if.then3, f32 %337];
    i1 %344 = fcmp gt f32 %343, f32 3.14159;
    cbr i1 %344(prob = 0.5), ^if.then5, ^b21;
^b20:
    f32 %345 = phi [^indirect3, f32 %327] [^if.then4, f32 %342];
    i1 %346 = fcmp gt f32 %345, f32 3.14159;
    cbr i1 %346(prob = 0.5), ^if.then6, ^b22;
^if.then5:
    f32 %347 = fsub f32 %343, f32 6.28319;
    ubr ^b21;
^if.then6:
    f32 %348 = fsub f32 %345, f32 6.28319;
    ubr ^b22;
^b21:
    f32 %349 = phi [^b19, f32 %343] [^if.then5, f32 %347];
    i1 %350 = fcmp lt f32 %349, f32 -3.14159;
    cbr i1 %350(prob = 0.5), ^if.then7, ^b24;
^b22:
    f32 %351 = phi [^b20, f32 %345] [^if.then6, f32 %348];
    i1 %352 = fcmp lt f32 %351, f32 -3.14159;
    cbr i1 %352(prob = 0.5), ^if.then8, ^b23;
^if.then7:
    f32 %353 = fadd f32 %349, f32 6.28319;
    ubr ^b24;
^if.then8:
    f32 %354 = fadd f32 %351, f32 6.28319;
    ubr ^b23;
^b23:
    f32 %355 = phi [^b22, f32 %351] [^if.then8, f32 %354];
    f32 %356 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %355, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    ubr ^while.body15;
^b24:
    f32 %357 = phi [^if.then7, f32 %353] [^b21, f32 %349];
    f32 %358 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %357, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %359 = fmul f32 %315, f32 %358;
    f32 %360 = fadd f32 %312, f32 %359;
    store f32* %211 with f32 %360;
    i32 %361 = add i32 %311, i32 1;
    i1 %362 = scmp lt i32 %361, i32 %193;
    cbr i1 %362(prob = 0.97), ^while.body14, ^b7;
^while.body15:
    i32 %363 = phi [^b23, i32 1] [^b27, i32 %389];
    f32 %364 = load f32* %251;
    f32* %365 = getelementptr &([8 * f32]* %324)[i64 0][i32 %363];
    f32 %366 = load f32* %365;
    f32 %367 = fmul f32 %366, f32 %356;
    f32 %368 = s2f i32 %363 to f32;
    f32 %369 = fmul f32 %280, f32 %368;
    f32 %370 = fadd f32 %369, f32 1.5708;
    i1 %371 = fcmp gt f32 %370, f32 6.28319;
    i1 %372 = fcmp lt f32 %370, f32 -6.28319;
    i1 %373 = or i1 %371, i1 %372;
    cbr i1 %373(prob = 0.75), ^if.then9, ^b25;
^if.then9:
    f32 %374 = fdiv f32 %370, f32 6.28319;
    i32 %375 = f2s f32 %374 to i32;
    f32 %376 = s2f i32 %375 to f32;
    f32 %377 = fmul f32 %376, f32 6.28319;
    f32 %378 = fsub f32 %370, f32 %377;
    ubr ^b25;
^b25:
    f32 %379 = phi [^while.body15, f32 %370] [^if.then9, f32 %378];
    i1 %380 = fcmp gt f32 %379, f32 3.14159;
    cbr i1 %380(prob = 0.5), ^if.then10, ^b26;
^if.then10:
    f32 %381 = fsub f32 %379, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %382 = phi [^b25, f32 %379] [^if.then10, f32 %381];
    i1 %383 = fcmp lt f32 %382, f32 -3.14159;
    cbr i1 %383(prob = 0.5), ^if.then11, ^b27;
^if.then11:
    f32 %384 = fadd f32 %382, f32 6.28319;
    ubr ^b27;
^b27:
    f32 %385 = phi [^if.then11, f32 %384] [^b26, f32 %382];
    f32 %386 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %385, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %387 = fmul f32 %367, f32 %386;
    f32 %388 = fadd f32 %364, f32 %387;
    store f32* %251 with f32 %388;
    i32 %389 = add i32 %363, i32 1;
    i1 %390 = scmp lt i32 %389, i32 %193;
    cbr i1 %390(prob = 0.97), ^while.body15, ^b18;
}
