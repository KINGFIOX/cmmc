internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = fcmp gt f32 %x, f32 0;
    cbr i1 %3(prob = 0.5), ^entry1, ^b;
^b:
    f32 %4 = fneg f32 %x;
    ubr ^entry1;
^entry1:
    f32 %5 = phi [^entry, f32 %x] [^b, f32 %4];
    i1 %6 = fcmp le f32 %5, f32 1e-06;
    cbr i1 %6(prob = 0.5), ^if.then, ^b1;
^if.then:
    ret f32 %x;
^b1:
    f32 %7 = fdiv f32 %x, f32 3;
    f32 %8 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %7, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2);
    f32 %9 = fmul f32 3, f32 %8;
    f32 %10 = fmul f32 4, f32 %8;
    f32 %11 = fmul f32 %10, f32 %8;
    f32 %12 = fmul f32 %11, f32 %8;
    f32 %13 = fsub f32 %9, f32 %12;
    ret f32 %13;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %194 = phi [^b1, i32 %200] [^entry, i32 %192];
    i32 %195 = phi [^b1, i32 %201] [^entry, i32 %193];
    i32 %196 = phi [^b1, i32 %209] [^entry, i32 0];
    i1 %197 = scmp lt i32 %196, i32 %194;
    cbr i1 %197(prob = 0.97), ^while.header1, ^b;
^b:
    [8 * f32]* %198 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %199 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %200 = phi [^while.header, i32 %194] [^while.body, i32 %200];
    i32 %201 = phi [^while.header, i32 %195] [^while.body, i32 %201];
    i32 %202 = phi [^while.header, i32 %196] [^while.body, i32 %202];
    i32 %203 = phi [^while.header, i32 0] [^while.body, i32 %208];
    i1 %204 = scmp lt i32 %203, i32 %201;
    cbr i1 %204(prob = 0.97), ^while.body, ^b1;
^while.body:
    [8 * f32]* %205 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %202];
    f32* %206 = getelementptr &([8 * f32]* %205)[i64 0][i32 %203];
    f32 %207 = call () -> f32 @getfloat();
    store f32* %206 with f32 %207;
    i32 %208 = add i32 %203, i32 1;
    ubr ^while.header1;
^b1:
    i32 %209 = add i32 %202, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %210 = phi [^b2, i32 %218] [^b, i32 %194];
    i32 %211 = phi [^b2, i32 %219] [^b, i32 %195];
    i32 %212 = phi [^b2, i32 %236] [^b, i32 0];
    i32 %213 = phi [^b2, i32 %222] [^b, i32 %195];
    i32 %214 = phi [^b2, i32 %223] [^b, i32 %194];
    [8 * f32]* %215 = phi [^b2, [8 * f32]* %224] [^b, [8 * f32]* %199];
    [8 * f32]* %216 = phi [^b2, [8 * f32]* %225] [^b, [8 * f32]* %198];
    i1 %217 = scmp lt i32 %212, i32 %214;
    cbr i1 %217(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %218 = phi [^while.header2, i32 %210] [^b4, i32 %241];
    i32 %219 = phi [^while.header2, i32 %211] [^b4, i32 %242];
    i32 %220 = phi [^while.header2, i32 0] [^b4, i32 %267];
    i32 %221 = phi [^while.header2, i32 %212] [^b4, i32 %245];
    i32 %222 = phi [^while.header2, i32 %213] [^b4, i32 %246];
    i32 %223 = phi [^while.header2, i32 %214] [^b4, i32 %247];
    [8 * f32]* %224 = phi [^while.header2, [8 * f32]* %215] [^b4, [8 * f32]* %248];
    [8 * f32]* %225 = phi [^while.header2, [8 * f32]* %216] [^b4, [8 * f32]* %249];
    i1 %226 = scmp lt i32 %220, i32 %222;
    cbr i1 %226(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %227 = phi [^while.header2, i32 %210] [^b5, i32 %251];
    i32 %228 = phi [^while.header2, i32 %211] [^b5, i32 %252];
    i32 %229 = phi [^while.header2, i32 0] [^b5, i32 %272];
    i32 %230 = phi [^while.header2, i32 %211] [^b5, i32 %255];
    i32 %231 = phi [^while.header2, i32 %210] [^b5, i32 %256];
    [8 * f32]* %232 = phi [^while.header2, [8 * f32]* %198] [^b5, [8 * f32]* %257];
    i1 %233 = scmp lt i32 %229, i32 %231;
    cbr i1 %233(prob = 0.97), ^while.body2, ^b3;
^while.body1:
    [8 * f32]* %234 = getelementptr &([8 * f32]* %225)[i32 %221];
    f32* %235 = getelementptr &([8 * f32]* %234)[i64 0][i32 %220];
    store f32* %235 with f32 0;
    ubr ^while.header5;
^b2:
    i32 %236 = add i32 %221, i32 1;
    ubr ^while.header2;
^while.body2:
    [8 * f32]* %237 = getelementptr &([8 * f32]* %232)[i32 %229];
    f32* %238 = getelementptr &([8 * f32]* %237)[i64 0][i64 0];
    f32 %239 = load f32* %238;
    call (f32) -> void @putfloat(f32 %239);
    ubr ^while.header6;
^b3:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %240 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    ubr ^while.header7;
^while.header5:
    i32 %241 = phi [^b6, i32 %273] [^while.body1, i32 %218];
    i32 %242 = phi [^b6, i32 %274] [^while.body1, i32 %219];
    i32 %243 = phi [^b6, i32 %298] [^while.body1, i32 0];
    i32 %244 = phi [^b6, i32 %277] [^while.body1, i32 %220];
    i32 %245 = phi [^b6, i32 %278] [^while.body1, i32 %221];
    i32 %246 = phi [^b6, i32 %279] [^while.body1, i32 %222];
    i32 %247 = phi [^b6, i32 %280] [^while.body1, i32 %223];
    [8 * f32]* %248 = phi [^b6, [8 * f32]* %281] [^while.body1, [8 * f32]* %224];
    [8 * f32]* %249 = phi [^b6, [8 * f32]* %282] [^while.body1, [8 * f32]* %225];
    i1 %250 = scmp lt i32 %243, i32 %247;
    cbr i1 %250(prob = 0.97), ^while.header8, ^b4;
^while.header6:
    i32 %251 = phi [^while.body3, i32 %251] [^while.body2, i32 %227];
    i32 %252 = phi [^while.body3, i32 %252] [^while.body2, i32 %228];
    i32 %253 = phi [^while.body3, i32 %271] [^while.body2, i32 1];
    i32 %254 = phi [^while.body3, i32 %254] [^while.body2, i32 %229];
    i32 %255 = phi [^while.body3, i32 %255] [^while.body2, i32 %230];
    i32 %256 = phi [^while.body3, i32 %256] [^while.body2, i32 %231];
    [8 * f32]* %257 = phi [^while.body3, [8 * f32]* %257] [^while.body2, [8 * f32]* %232];
    i1 %258 = scmp lt i32 %253, i32 %255;
    cbr i1 %258(prob = 0.97), ^while.body3, ^b5;
^while.header7:
    i32 %259 = phi [^b7, i32 %284] [^b3, i32 %227];
    i32 %260 = phi [^b7, i32 %285] [^b3, i32 %228];
    i32 %261 = phi [^b7, i32 %319] [^b3, i32 0];
    i32 %262 = phi [^b7, i32 %288] [^b3, i32 %211];
    i32 %263 = phi [^b7, i32 %289] [^b3, i32 %210];
    [8 * f32]* %264 = phi [^b7, [8 * f32]* %290] [^b3, [8 * f32]* %198];
    [8 * f32]* %265 = phi [^b7, [8 * f32]* %291] [^b3, [8 * f32]* %240];
    i1 %266 = scmp lt i32 %261, i32 %263;
    cbr i1 %266(prob = 0.97), ^while.header9, ^while.header10;
^b4:
    i32 %267 = add i32 %244, i32 1;
    ubr ^while.header3;
^while.body3:
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %268 = getelementptr &([8 * f32]* %257)[i32 %254];
    f32* %269 = getelementptr &([8 * f32]* %268)[i64 0][i32 %253];
    f32 %270 = load f32* %269;
    call (f32) -> void @putfloat(f32 %270);
    i32 %271 = add i32 %253, i32 1;
    ubr ^while.header6;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %272 = add i32 %254, i32 1;
    ubr ^while.header4;
^while.header8:
    i32 %273 = phi [^while.header5, i32 %241] [^b24, i32 %273];
    i32 %274 = phi [^while.header5, i32 %242] [^b24, i32 %274];
    i32 %275 = phi [^while.header5, i32 0] [^b24, i32 %470];
    i32 %276 = phi [^while.header5, i32 %243] [^b24, i32 %276];
    i32 %277 = phi [^while.header5, i32 %244] [^b24, i32 %277];
    i32 %278 = phi [^while.header5, i32 %245] [^b24, i32 %278];
    i32 %279 = phi [^while.header5, i32 %246] [^b24, i32 %279];
    i32 %280 = phi [^while.header5, i32 %247] [^b24, i32 %280];
    [8 * f32]* %281 = phi [^while.header5, [8 * f32]* %248] [^b24, [8 * f32]* %281];
    [8 * f32]* %282 = phi [^while.header5, [8 * f32]* %249] [^b24, [8 * f32]* %282];
    i1 %283 = scmp lt i32 %275, i32 %279;
    cbr i1 %283(prob = 0.97), ^while.body4, ^b6;
^while.header9:
    i32 %284 = phi [^while.header7, i32 %259] [^b15, i32 %383];
    i32 %285 = phi [^while.header7, i32 %260] [^b15, i32 %384];
    i32 %286 = phi [^while.header7, i32 0] [^b15, i32 %415];
    i32 %287 = phi [^while.header7, i32 %261] [^b15, i32 %387];
    i32 %288 = phi [^while.header7, i32 %262] [^b15, i32 %388];
    i32 %289 = phi [^while.header7, i32 %263] [^b15, i32 %389];
    [8 * f32]* %290 = phi [^while.header7, [8 * f32]* %264] [^b15, [8 * f32]* %390];
    [8 * f32]* %291 = phi [^while.header7, [8 * f32]* %265] [^b15, [8 * f32]* %391];
    i1 %292 = scmp lt i32 %286, i32 %288;
    cbr i1 %292(prob = 0.97), ^while.body5, ^b7;
^while.header10:
    i32 %293 = phi [^b12, i32 %361] [^while.header7, i32 0];
    i32 %294 = phi [^b12, i32 %337] [^while.header7, i32 %260];
    i32 %295 = phi [^b12, i32 %338] [^while.header7, i32 %259];
    [8 * f32]* %296 = phi [^b12, [8 * f32]* %339] [^while.header7, [8 * f32]* %240];
    i1 %297 = scmp lt i32 %293, i32 %295;
    cbr i1 %297(prob = 0.97), ^while.body6, ^b8;
^b6:
    i32 %298 = add i32 %276, i32 1;
    ubr ^while.header5;
^while.body4:
    [8 * f32]* %299 = getelementptr &([8 * f32]* %282)[i32 %278];
    f32* %300 = getelementptr &([8 * f32]* %299)[i64 0][i32 %277];
    f32 %301 = load f32* %300;
    [8 * f32]* %302 = getelementptr &([8 * f32]* %281)[i32 %276];
    f32* %303 = getelementptr &([8 * f32]* %302)[i64 0][i32 %275];
    f32 %304 = load f32* %303;
    f32 %305 = s2f i32 %280 to f32;
    f32 %306 = fdiv f32 3.14159, f32 %305;
    f32 %307 = s2f i32 %276 to f32;
    f32 %308 = fadd f32 %307, f32 0.5;
    f32 %309 = fmul f32 %306, f32 %308;
    f32 %310 = s2f i32 %278 to f32;
    f32 %311 = fmul f32 %309, f32 %310;
    f32 %312 = fadd f32 %311, f32 1.5708;
    i1 %313 = fcmp gt f32 %312, f32 6.28319;
    cbr i1 %313(prob = 0.5), ^b10, ^b9;
^while.body5:
    [8 * f32]* %314 = getelementptr &([8 * f32]* %291)[i32 %287];
    f32* %315 = getelementptr &([8 * f32]* %314)[i64 0][i32 %286];
    f32* %316 = getelementptr &([8 * f32]* %290)[i64 0][i64 0];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 0.25, f32 %317;
    store f32* %315 with f32 %318;
    ubr ^while.header11;
^b7:
    i32 %319 = add i32 %287, i32 1;
    ubr ^while.header7;
^while.body6:
    [8 * f32]* %320 = getelementptr &([8 * f32]* %296)[i32 %293];
    f32* %321 = getelementptr &([8 * f32]* %320)[i64 0][i64 0];
    f32 %322 = load f32* %321;
    call (f32) -> void @putfloat(f32 %322);
    ubr ^while.header12;
^b8:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b9:
    i1 %323 = fcmp lt f32 %312, f32 -6.28319;
    ubr ^b10;
^b10:
    i1 %324 = phi [^while.body4, i1 true] [^b9, i1 %323];
    cbr i1 %324(prob = 0.5), ^if.then, ^b11;
^while.header11:
    i32 %325 = phi [^while.body7, i32 %325] [^while.body5, i32 %284];
    i32 %326 = phi [^while.body7, i32 %326] [^while.body5, i32 %285];
    i32 %327 = phi [^while.body7, i32 %354] [^while.body5, i32 1];
    i32 %328 = phi [^while.body7, i32 %328] [^while.body5, i32 %286];
    i32 %329 = phi [^while.body7, i32 %329] [^while.body5, i32 %287];
    i32 %330 = phi [^while.body7, i32 %330] [^while.body5, i32 %288];
    i32 %331 = phi [^while.body7, i32 %331] [^while.body5, i32 %289];
    [8 * f32]* %332 = phi [^while.body7, [8 * f32]* %332] [^while.body5, [8 * f32]* %290];
    [8 * f32]* %333 = phi [^while.body7, [8 * f32]* %333] [^while.body5, [8 * f32]* %291];
    i1 %334 = scmp lt i32 %327, i32 %331;
    cbr i1 %334(prob = 0.97), ^while.body7, ^while.header13;
^while.header12:
    i32 %335 = phi [^while.body8, i32 %358] [^while.body6, i32 1];
    i32 %336 = phi [^while.body8, i32 %336] [^while.body6, i32 %293];
    i32 %337 = phi [^while.body8, i32 %337] [^while.body6, i32 %294];
    i32 %338 = phi [^while.body8, i32 %338] [^while.body6, i32 %295];
    [8 * f32]* %339 = phi [^while.body8, [8 * f32]* %339] [^while.body6, [8 * f32]* %296];
    i1 %340 = scmp lt i32 %335, i32 %337;
    cbr i1 %340(prob = 0.97), ^while.body8, ^b12;
^if.then:
    f32 %341 = fdiv f32 %312, f32 6.28319;
    i32 %342 = f2s f32 %341 to i32;
    f32 %343 = s2f i32 %342 to f32;
    f32 %344 = fmul f32 %343, f32 6.28319;
    f32 %345 = fsub f32 %312, f32 %344;
    ubr ^b11;
^while.body7:
    [8 * f32]* %346 = getelementptr &([8 * f32]* %333)[i32 %329];
    f32* %347 = getelementptr &([8 * f32]* %346)[i64 0][i32 %328];
    f32 %348 = load f32* %347;
    [8 * f32]* %349 = getelementptr &([8 * f32]* %332)[i32 %327];
    f32* %350 = getelementptr &([8 * f32]* %349)[i64 0][i64 0];
    f32 %351 = load f32* %350;
    f32 %352 = fmul f32 0.5, f32 %351;
    f32 %353 = fadd f32 %348, f32 %352;
    store f32* %347 with f32 %353;
    i32 %354 = add i32 %327, i32 1;
    ubr ^while.header11;
^while.body8:
    call (i32) -> void @putch(i32 32);
    [8 * f32]* %355 = getelementptr &([8 * f32]* %339)[i32 %336];
    f32* %356 = getelementptr &([8 * f32]* %355)[i64 0][i32 %335];
    f32 %357 = load f32* %356;
    call (f32) -> void @putfloat(f32 %357);
    i32 %358 = add i32 %335, i32 1;
    ubr ^while.header12;
^b11:
    f32 %359 = phi [^b10, f32 %312] [^if.then, f32 %345];
    i1 %360 = fcmp gt f32 %359, f32 3.14159;
    cbr i1 %360(prob = 0.5), ^if.then1, ^b13;
^b12:
    call (i32) -> void @putch(i32 10);
    i32 %361 = add i32 %336, i32 1;
    ubr ^while.header10;
^while.header13:
    i32 %362 = phi [^while.header11, i32 %325] [^while.body9, i32 %362];
    i32 %363 = phi [^while.header11, i32 %326] [^while.body9, i32 %363];
    i32 %364 = phi [^while.header11, i32 1] [^while.body9, i32 %380];
    i32 %365 = phi [^while.header11, i32 %328] [^while.body9, i32 %365];
    i32 %366 = phi [^while.header11, i32 %329] [^while.body9, i32 %366];
    i32 %367 = phi [^while.header11, i32 %330] [^while.body9, i32 %367];
    i32 %368 = phi [^while.header11, i32 %331] [^while.body9, i32 %368];
    [8 * f32]* %369 = phi [^while.header11, [8 * f32]* %332] [^while.body9, [8 * f32]* %369];
    [8 * f32]* %370 = phi [^while.header11, [8 * f32]* %333] [^while.body9, [8 * f32]* %370];
    i1 %371 = scmp lt i32 %364, i32 %367;
    cbr i1 %371(prob = 0.97), ^while.body9, ^while.header14;
^if.then1:
    f32 %372 = fsub f32 %359, f32 6.28319;
    ubr ^b13;
^while.body9:
    [8 * f32]* %373 = getelementptr &([8 * f32]* %370)[i32 %366];
    f32* %374 = getelementptr &([8 * f32]* %373)[i64 0][i32 %365];
    f32 %375 = load f32* %374;
    f32* %376 = getelementptr &([8 * f32]* %369)[i64 0][i32 %364];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 0.5, f32 %377;
    f32 %379 = fadd f32 %375, f32 %378;
    store f32* %374 with f32 %379;
    i32 %380 = add i32 %364, i32 1;
    ubr ^while.header13;
^b13:
    f32 %381 = phi [^b11, f32 %359] [^if.then1, f32 %372];
    i1 %382 = fcmp lt f32 %381, f32 -3.14159;
    cbr i1 %382(prob = 0.5), ^if.then2, ^b14;
^while.header14:
    i32 %383 = phi [^while.header13, i32 %362] [^b18, i32 %416];
    i32 %384 = phi [^while.header13, i32 %363] [^b18, i32 %417];
    i32 %385 = phi [^while.header13, i32 1] [^b18, i32 %429];
    i32 %386 = phi [^while.header13, i32 %365] [^b18, i32 %420];
    i32 %387 = phi [^while.header13, i32 %366] [^b18, i32 %421];
    i32 %388 = phi [^while.header13, i32 %367] [^b18, i32 %422];
    i32 %389 = phi [^while.header13, i32 %368] [^b18, i32 %423];
    [8 * f32]* %390 = phi [^while.header13, [8 * f32]* %369] [^b18, [8 * f32]* %424];
    [8 * f32]* %391 = phi [^while.header13, [8 * f32]* %370] [^b18, [8 * f32]* %425];
    i1 %392 = scmp lt i32 %385, i32 %389;
    cbr i1 %392(prob = 0.97), ^while.header15, ^b15;
^if.then2:
    f32 %393 = fadd f32 %381, f32 6.28319;
    ubr ^b14;
^b14:
    f32 %394 = phi [^if.then2, f32 %393] [^b13, f32 %381];
    f32 %395 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %394, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %396 = fmul f32 %304, f32 %395;
    f32 %397 = s2f i32 %279 to f32;
    f32 %398 = fdiv f32 3.14159, f32 %397;
    f32 %399 = s2f i32 %275 to f32;
    f32 %400 = fadd f32 %399, f32 0.5;
    f32 %401 = fmul f32 %398, f32 %400;
    f32 %402 = s2f i32 %277 to f32;
    f32 %403 = fmul f32 %401, f32 %402;
    f32 %404 = fadd f32 %403, f32 1.5708;
    i1 %405 = fcmp gt f32 %404, f32 6.28319;
    cbr i1 %405(prob = 0.5), ^b17, ^b16;
^b15:
    [8 * f32]* %406 = getelementptr &([8 * f32]* %391)[i32 %387];
    f32* %407 = getelementptr &([8 * f32]* %406)[i64 0][i32 %386];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 %408, f32 2;
    f32 %410 = s2f i32 %389 to f32;
    f32 %411 = fdiv f32 %409, f32 %410;
    f32 %412 = fmul f32 %411, f32 2;
    f32 %413 = s2f i32 %388 to f32;
    f32 %414 = fdiv f32 %412, f32 %413;
    store f32* %407 with f32 %414;
    i32 %415 = add i32 %386, i32 1;
    ubr ^while.header9;
^while.header15:
    i32 %416 = phi [^while.header14, i32 %383] [^b31, i32 %416];
    i32 %417 = phi [^while.header14, i32 %384] [^b31, i32 %417];
    i32 %418 = phi [^while.header14, i32 1] [^b31, i32 %503];
    i32 %419 = phi [^while.header14, i32 %385] [^b31, i32 %419];
    i32 %420 = phi [^while.header14, i32 %386] [^b31, i32 %420];
    i32 %421 = phi [^while.header14, i32 %387] [^b31, i32 %421];
    i32 %422 = phi [^while.header14, i32 %388] [^b31, i32 %422];
    i32 %423 = phi [^while.header14, i32 %389] [^b31, i32 %423];
    [8 * f32]* %424 = phi [^while.header14, [8 * f32]* %390] [^b31, [8 * f32]* %424];
    [8 * f32]* %425 = phi [^while.header14, [8 * f32]* %391] [^b31, [8 * f32]* %425];
    i1 %426 = scmp lt i32 %418, i32 %422;
    cbr i1 %426(prob = 0.97), ^while.body10, ^b18;
^b16:
    i1 %427 = fcmp lt f32 %404, f32 -6.28319;
    ubr ^b17;
^b17:
    i1 %428 = phi [^b14, i1 true] [^b16, i1 %427];
    cbr i1 %428(prob = 0.5), ^if.then3, ^b20;
^b18:
    i32 %429 = add i32 %419, i32 1;
    ubr ^while.header14;
^while.body10:
    [8 * f32]* %430 = getelementptr &([8 * f32]* %425)[i32 %421];
    f32* %431 = getelementptr &([8 * f32]* %430)[i64 0][i32 %420];
    f32 %432 = load f32* %431;
    [8 * f32]* %433 = getelementptr &([8 * f32]* %424)[i32 %419];
    f32* %434 = getelementptr &([8 * f32]* %433)[i64 0][i32 %418];
    f32 %435 = load f32* %434;
    f32 %436 = s2f i32 %423 to f32;
    f32 %437 = fdiv f32 3.14159, f32 %436;
    f32 %438 = s2f i32 %421 to f32;
    f32 %439 = fadd f32 %438, f32 0.5;
    f32 %440 = fmul f32 %437, f32 %439;
    f32 %441 = s2f i32 %419 to f32;
    f32 %442 = fmul f32 %440, f32 %441;
    f32 %443 = fadd f32 %442, f32 1.5708;
    i1 %444 = fcmp gt f32 %443, f32 6.28319;
    cbr i1 %444(prob = 0.5), ^b21, ^b19;
^if.then3:
    f32 %445 = fdiv f32 %404, f32 6.28319;
    i32 %446 = f2s f32 %445 to i32;
    f32 %447 = s2f i32 %446 to f32;
    f32 %448 = fmul f32 %447, f32 6.28319;
    f32 %449 = fsub f32 %404, f32 %448;
    ubr ^b20;
^b19:
    i1 %450 = fcmp lt f32 %443, f32 -6.28319;
    ubr ^b21;
^b20:
    f32 %451 = phi [^b17, f32 %404] [^if.then3, f32 %449];
    i1 %452 = fcmp gt f32 %451, f32 3.14159;
    cbr i1 %452(prob = 0.5), ^if.then4, ^b22;
^b21:
    i1 %453 = phi [^while.body10, i1 true] [^b19, i1 %450];
    cbr i1 %453(prob = 0.5), ^if.then5, ^b23;
^if.then4:
    f32 %454 = fsub f32 %451, f32 6.28319;
    ubr ^b22;
^if.then5:
    f32 %455 = fdiv f32 %443, f32 6.28319;
    i32 %456 = f2s f32 %455 to i32;
    f32 %457 = s2f i32 %456 to f32;
    f32 %458 = fmul f32 %457, f32 6.28319;
    f32 %459 = fsub f32 %443, f32 %458;
    ubr ^b23;
^b22:
    f32 %460 = phi [^b20, f32 %451] [^if.then4, f32 %454];
    i1 %461 = fcmp lt f32 %460, f32 -3.14159;
    cbr i1 %461(prob = 0.5), ^if.then6, ^b24;
^b23:
    f32 %462 = phi [^b21, f32 %443] [^if.then5, f32 %459];
    i1 %463 = fcmp gt f32 %462, f32 3.14159;
    cbr i1 %463(prob = 0.5), ^if.then7, ^b25;
^if.then6:
    f32 %464 = fadd f32 %460, f32 6.28319;
    ubr ^b24;
^if.then7:
    f32 %465 = fsub f32 %462, f32 6.28319;
    ubr ^b25;
^b24:
    f32 %466 = phi [^if.then6, f32 %464] [^b22, f32 %460];
    f32 %467 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %466, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %468 = fmul f32 %396, f32 %467;
    f32 %469 = fadd f32 %301, f32 %468;
    store f32* %300 with f32 %469;
    i32 %470 = add i32 %275, i32 1;
    ubr ^while.header8;
^b25:
    f32 %471 = phi [^b23, f32 %462] [^if.then7, f32 %465];
    i1 %472 = fcmp lt f32 %471, f32 -3.14159;
    cbr i1 %472(prob = 0.5), ^if.then8, ^b26;
^if.then8:
    f32 %473 = fadd f32 %471, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %474 = phi [^if.then8, f32 %473] [^b25, f32 %471];
    f32 %475 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %474, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %476 = fmul f32 %435, f32 %475;
    f32 %477 = s2f i32 %422 to f32;
    f32 %478 = fdiv f32 3.14159, f32 %477;
    f32 %479 = s2f i32 %420 to f32;
    f32 %480 = fadd f32 %479, f32 0.5;
    f32 %481 = fmul f32 %478, f32 %480;
    f32 %482 = s2f i32 %418 to f32;
    f32 %483 = fmul f32 %481, f32 %482;
    f32 %484 = fadd f32 %483, f32 1.5708;
    i1 %485 = fcmp gt f32 %484, f32 6.28319;
    cbr i1 %485(prob = 0.5), ^b28, ^b27;
^b27:
    i1 %486 = fcmp lt f32 %484, f32 -6.28319;
    ubr ^b28;
^b28:
    i1 %487 = phi [^b26, i1 true] [^b27, i1 %486];
    cbr i1 %487(prob = 0.5), ^if.then9, ^b29;
^if.then9:
    f32 %488 = fdiv f32 %484, f32 6.28319;
    i32 %489 = f2s f32 %488 to i32;
    f32 %490 = s2f i32 %489 to f32;
    f32 %491 = fmul f32 %490, f32 6.28319;
    f32 %492 = fsub f32 %484, f32 %491;
    ubr ^b29;
^b29:
    f32 %493 = phi [^b28, f32 %484] [^if.then9, f32 %492];
    i1 %494 = fcmp gt f32 %493, f32 3.14159;
    cbr i1 %494(prob = 0.5), ^if.then10, ^b30;
^if.then10:
    f32 %495 = fsub f32 %493, f32 6.28319;
    ubr ^b30;
^b30:
    f32 %496 = phi [^b29, f32 %493] [^if.then10, f32 %495];
    i1 %497 = fcmp lt f32 %496, f32 -3.14159;
    cbr i1 %497(prob = 0.5), ^if.then11, ^b31;
^if.then11:
    f32 %498 = fadd f32 %496, f32 6.28319;
    ubr ^b31;
^b31:
    f32 %499 = phi [^if.then11, f32 %498] [^b30, f32 %496];
    f32 %500 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %499, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %501 = fmul f32 %476, f32 %500;
    f32 %502 = fadd f32 %432, f32 %501;
    store f32* %431 with f32 %502;
    i32 %503 = add i32 %418, i32 1;
    ubr ^while.header15;
}
