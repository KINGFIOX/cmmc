internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b4, f32 %20];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = fabs f32 %12;
    i1 %14 = fcmp ole f32 %13, f32 1e-06;
    cbr i1 %14(prob = 0.5), ^b4, ^b5;
  ^b4:
    f32 %15 = phi [^b3, f32 %12] [^b6, f32 %29];
    f32 %16 = fmul f32 %15, f32 4;
    f32 %17 = fmul f32 %16, f32 %15;
    f32 %18 = fmul f32 %17, f32 %15;
    f32 %19 = fmul f32 %15, f32 3;
    f32 %20 = fsub f32 %19, f32 %18;
    ubr ^b2;
  ^b5:
    f32 %21 = fdiv f32 %12, f32 3;
    f32 %22 = fabs f32 %21;
    i1 %23 = fcmp ole f32 %22, f32 1e-06;
    cbr i1 %23(prob = 0.5), ^b6, ^b7;
  ^b6:
    f32 %24 = phi [^b5, f32 %21] [^b7, f32 %36];
    f32 %25 = fmul f32 %24, f32 4;
    f32 %26 = fmul f32 %25, f32 %24;
    f32 %27 = fmul f32 %26, f32 %24;
    f32 %28 = fmul f32 %24, f32 3;
    f32 %29 = fsub f32 %28, f32 %27;
    ubr ^b4;
  ^b7:
    f32 %30 = fdiv f32 %21, f32 3;
    f32 %31 = call (f32) -> f32 @my_sin_impl(f32 %30);
    f32 %32 = fmul f32 %31, f32 4;
    f32 %33 = fmul f32 %32, f32 %31;
    f32 %34 = fmul f32 %33, f32 %31;
    f32 %35 = fmul f32 %31, f32 3;
    f32 %36 = fsub f32 %35, f32 %34;
    ubr ^b6;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -3;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = add i32 %3, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 16;
    i1 %6 = icmp sgt i32 %3, i32 0;
    i1 %7 = icmp sgt i32 %0, i32 4;
    i1 %8 = icmp sgt i32 %3, i32 4;
    i32 %9 = add i32 %0, i32 -18;
    i32 %10 = add i32 %3, i32 -18;
    [8 * [8 * f32]]* %11 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %12 = phi [^entry, i32 0] [^b1, i32 %22];
    i1 %13 = icmp sgt i32 %0, i32 %12;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^b:
    f32 %14 = s2f i32 %0 to f32;
    f32 %15 = fdiv f32 3.14159, f32 %14;
    f32 %16 = s2f i32 %3 to f32;
    f32 %17 = fdiv f32 3.14159, f32 %16;
    [8 * [8 * f32]]* %18 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %19 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0];
    [8 * f32]* %20 = getelementptr &([8 * [8 * f32]]* %11)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %6(prob = 0.984615), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %21 = getelementptr &([8 * [8 * f32]]* %11)[i64 0][i32 %12];
    ubr ^while.body1;
  ^b1:
    i32 %22 = add i32 %12, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %23 = phi [^b, i32 0] [^b3, i32 %37];
    i1 %24 = icmp sgt i32 %0, i32 %23;
    [8 * f32]* %25 = getelementptr &([8 * f32]* %19)[i32 %23];
    f32 %26 = s2f i32 %23 to f32;
    cbr i1 %24(prob = 0.984615), ^while.header2, ^b2;
  ^while.body1:
    i32 %27 = phi [^prebody, i32 0] [^while.body1, i32 %30];
    f32 %28 = call () -> f32 @getfloat();
    f32* %29 = getelementptr &([8 * f32]* %21)[i64 0][i32 %27];
    store f32* %29 with f32 %28;
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = icmp sgt i32 %3, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body1, ^b1;
  ^b2:
    i1 %32 = icmp sgt i32 %3, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %33 = phi [^while.header1, i32 0] [^b5, i32 %49];
    i1 %34 = icmp sgt i32 %3, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^b3;
  ^while.body2:
    f32* %35 = getelementptr &([8 * f32]* %25)[i64 0][i32 %33];
    store f32* %35 with f32 0;
    f32 %36 = s2f i32 %33 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %37 = add i32 %23, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %38 = phi [^b2, i32 0] [^b6, i32 %59];
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body3, ^b4;
  ^while.header4:
    i32 %40 = phi [^while.body2, i32 0] [^b12, i32 %135];
    i1 %41 = icmp sgt i32 %0, i32 %40;
    cbr i1 %41(prob = 0.984615), ^prebody1, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %42 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %43 = getelementptr &([8 * [8 * f32]]* %42)[i64 0][i64 0];
    f32* %44 = getelementptr &([8 * [8 * f32]]* %18)[i64 0][i64 0][i64 0];
    i1 %45 = icmp sgt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %46 = getelementptr &([8 * f32]* %19)[i32 %38];
    f32* %47 = getelementptr &([8 * f32]* %46)[i64 0][i64 0];
    f32 %48 = load f32* %47;
    call (f32) -> void @putfloat(f32 %48);
    cbr i1 %32(prob = 0.984615), ^while.body4, ^b6;
  ^b5:
    i32 %49 = add i32 %33, i32 1;
    ubr ^while.header2;
  ^prebody1:
    f32 %50 = s2f i32 %40 to f32;
    f32 %51 = fadd f32 %50, f32 0.5;
    f32 %52 = fmul f32 %15, f32 %51;
    f32 %53 = fmul f32 %52, f32 %26;
    f32 %54 = fadd f32 %53, f32 1.5708;
    i1 %55 = fcmp ogt f32 %54, f32 6.28319;
    i1 %56 = fcmp olt f32 %54, f32 -6.28319;
    i1 %57 = or i1 %55, i1 %56;
    [8 * f32]* %58 = getelementptr &([8 * f32]* %20)[i32 %40];
    cbr i1 %57(prob = 0.5), ^if.then, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %38, i32 1;
    ubr ^while.header3;
  ^while.body4:
    i32 %60 = phi [^while.body3, i32 1] [^while.body4, i32 %63];
    call (i32) -> void @putch(i32 32);
    f32* %61 = getelementptr &([8 * f32]* %46)[i64 0][i32 %60];
    f32 %62 = load f32* %61;
    call (f32) -> void @putfloat(f32 %62);
    i32 %63 = add i32 %60, i32 1;
    i1 %64 = icmp sgt i32 %3, i32 %63;
    cbr i1 %64(prob = 0.984615), ^while.body4, ^b6;
  ^while.header5:
    i32 %65 = phi [^b4, i32 0] [^b8, i32 %102];
    f32 %66 = s2f i32 %65 to f32;
    f32 %67 = fadd f32 %66, f32 0.5;
    f32 %68 = fmul f32 %15, f32 %67;
    i1 %69 = icmp sgt i32 %0, i32 %65;
    [8 * f32]* %70 = getelementptr &([8 * f32]* %43)[i32 %65];
    cbr i1 %69(prob = 0.984615), ^while.header6, ^while.header7;
  ^if.then:
    f32 %71 = fdiv f32 %54, f32 6.28319;
    i32 %72 = f2s f32 %71 to i32;
    f32 %73 = s2f i32 %72 to f32;
    f32 %74 = fmul f32 %73, f32 6.28319;
    f32 %75 = fsub f32 %54, f32 %74;
    ubr ^b7;
  ^b7:
    f32 %76 = phi [^prebody1, f32 %54] [^if.then, f32 %75];
    i1 %77 = fcmp ogt f32 %76, f32 3.14159;
    f32 %78 = fsub f32 %76, f32 6.28319;
    f32 %79 = select i1 %77 ? f32 %78 : f32 %76;
    i1 %80 = fcmp olt f32 %79, f32 -3.14159;
    f32 %81 = fadd f32 %79, f32 6.28319;
    f32 %82 = select i1 %80 ? f32 %81 : f32 %79;
    f32 %83 = call (f32) -> f32 @my_sin_impl(f32 %82);
    f32 %84 = load f32* %35;
    ubr ^while.body5;
  ^while.header6:
    i32 %85 = phi [^while.header5, i32 0] [^b13, i32 %232];
    i1 %86 = icmp sgt i32 %3, i32 %85;
    cbr i1 %86(prob = 0.984615), ^while.body6, ^b8;
  ^while.header7:
    i32 %87 = phi [^while.header5, i32 0] [^b11, i32 %129];
    i1 %88 = icmp sgt i32 %0, i32 %87;
    cbr i1 %88(prob = 0.984615), ^while.body7, ^b9;
  ^while.body5:
    f32 %89 = phi [^b7, f32 %84] [^b10, f32 %126];
    i32 %90 = phi [^b7, i32 0] [^b10, i32 %127];
    f32 %91 = s2f i32 %90 to f32;
    f32 %92 = fadd f32 %91, f32 0.5;
    f32 %93 = fmul f32 %17, f32 %92;
    f32 %94 = fmul f32 %93, f32 %36;
    f32 %95 = fadd f32 %94, f32 1.5708;
    i1 %96 = fcmp ogt f32 %95, f32 6.28319;
    i1 %97 = fcmp olt f32 %95, f32 -6.28319;
    i1 %98 = or i1 %96, i1 %97;
    f32* %99 = getelementptr &([8 * f32]* %58)[i64 0][i32 %90];
    f32 %100 = load f32* %99;
    f32 %101 = fmul f32 %100, f32 %83;
    cbr i1 %98(prob = 0.5), ^if.then1, ^b10;
  ^b8:
    i32 %102 = add i32 %65, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32* %103 = getelementptr &([8 * f32]* %70)[i64 0][i32 %85];
    f32 %104 = load f32* %44;
    f32 %105 = fmul f32 %104, f32 0.25;
    store f32* %103 with f32 %105;
    f32 %106 = s2f i32 %85 to f32;
    f32 %107 = fadd f32 %106, f32 0.5;
    f32 %108 = fmul f32 %17, f32 %107;
    cbr i1 %45(prob = 0.984615), ^super.header, ^while.header8;
  ^while.body7:
    [8 * f32]* %109 = getelementptr &([8 * f32]* %43)[i32 %87];
    f32* %110 = getelementptr &([8 * f32]* %109)[i64 0][i64 0];
    f32 %111 = load f32* %110;
    call (f32) -> void @putfloat(f32 %111);
    cbr i1 %32(prob = 0.984615), ^while.body8, ^b11;
  ^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then1:
    f32 %112 = fdiv f32 %95, f32 6.28319;
    i32 %113 = f2s f32 %112 to i32;
    f32 %114 = s2f i32 %113 to f32;
    f32 %115 = fmul f32 %114, f32 6.28319;
    f32 %116 = fsub f32 %95, f32 %115;
    ubr ^b10;
  ^b10:
    f32 %117 = phi [^while.body5, f32 %95] [^if.then1, f32 %116];
    i1 %118 = fcmp ogt f32 %117, f32 3.14159;
    f32 %119 = fsub f32 %117, f32 6.28319;
    f32 %120 = select i1 %118 ? f32 %119 : f32 %117;
    i1 %121 = fcmp olt f32 %120, f32 -3.14159;
    f32 %122 = fadd f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    f32 %124 = call (f32) -> f32 @my_sin_impl(f32 %123);
    f32 %125 = fmul f32 %101, f32 %124;
    f32 %126 = fadd f32 %89, f32 %125;
    store f32* %35 with f32 %126;
    i32 %127 = add i32 %90, i32 1;
    i1 %128 = icmp sgt i32 %3, i32 %127;
    cbr i1 %128(prob = 0.984615), ^while.body5, ^b12;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %129 = add i32 %87, i32 1;
    ubr ^while.header7;
  ^super.header:
    cbr i1 %7(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.header8:
    cbr i1 %32(prob = 0.984615), ^prebody2, ^while.header9;
  ^while.body8:
    i32 %130 = phi [^while.body7, i32 1] [^while.body8, i32 %133];
    call (i32) -> void @putch(i32 32);
    f32* %131 = getelementptr &([8 * f32]* %109)[i64 0][i32 %130];
    f32 %132 = load f32* %131;
    call (f32) -> void @putfloat(f32 %132);
    i32 %133 = add i32 %130, i32 1;
    i1 %134 = icmp sgt i32 %3, i32 %133;
    cbr i1 %134(prob = 0.984615), ^while.body8, ^b11;
  ^b12:
    i32 %135 = add i32 %40, i32 1;
    ubr ^while.header4;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body9, ^scalar.header1;
  ^prebody2:
    f32 %136 = load f32* %103;
    cbr i1 %8(prob = 0.941176), ^super.header2, ^scalar.header2;
  ^scalar.header:
    i32 %137 = phi [^super.header, i32 1] [^scalar.final1, i32 %244];
    f32 %138 = phi [^super.header, f32 %105] [^scalar.final1, f32 %243];
    f32 %139 = phi [^super.header, f32 undef] [^scalar.final1, f32 %243];
    i1 %140 = icmp sgt i32 %0, i32 %137;
    cbr i1 %140(prob = 0.75), ^while.body10, ^scalar.final;
  ^while.header9:
    i32 %141 = phi [^while.header8, i32 1] [^scalar.final2, i32 1] [^b15, i32 %385];
    i1 %142 = icmp sgt i32 %0, i32 %141;
    cbr i1 %142(prob = 0.984615), ^while.header10, ^b13;
  ^while.body9:
    f32 %143 = phi [^super.header1, f32 %105] [^while.body9, f32 %209];
    i32 %144 = phi [^super.header1, i32 1] [^while.body9, i32 %210];
    [8 * f32]* %145 = getelementptr &([8 * f32]* %19)[i32 %144];
    f32* %146 = getelementptr &([8 * f32]* %145)[i64 0][i64 0];
    f32 %147 = load f32* %146;
    f32 %148 = fmul f32 %147, f32 0.5;
    f32 %149 = fadd f32 %143, f32 %148;
    f32* %150 = getelementptr &([8 * f32]* %145)[i64 1][i64 0];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 %151, f32 0.5;
    f32 %153 = fadd f32 %149, f32 %152;
    f32* %154 = getelementptr &([8 * f32]* %145)[i64 2][i64 0];
    f32 %155 = load f32* %154;
    f32 %156 = fmul f32 %155, f32 0.5;
    f32 %157 = fadd f32 %153, f32 %156;
    f32* %158 = getelementptr &([8 * f32]* %145)[i64 3][i64 0];
    f32 %159 = load f32* %158;
    f32 %160 = fmul f32 %159, f32 0.5;
    f32 %161 = fadd f32 %157, f32 %160;
    f32* %162 = getelementptr &([8 * f32]* %145)[i64 4][i64 0];
    f32 %163 = load f32* %162;
    f32 %164 = fmul f32 %163, f32 0.5;
    f32 %165 = fadd f32 %161, f32 %164;
    f32* %166 = getelementptr &([8 * f32]* %145)[i64 5][i64 0];
    f32 %167 = load f32* %166;
    f32 %168 = fmul f32 %167, f32 0.5;
    f32 %169 = fadd f32 %165, f32 %168;
    f32* %170 = getelementptr &([8 * f32]* %145)[i64 6][i64 0];
    f32 %171 = load f32* %170;
    f32 %172 = fmul f32 %171, f32 0.5;
    f32 %173 = fadd f32 %169, f32 %172;
    f32* %174 = getelementptr &([8 * f32]* %145)[i64 7][i64 0];
    f32 %175 = load f32* %174;
    f32 %176 = fmul f32 %175, f32 0.5;
    f32 %177 = fadd f32 %173, f32 %176;
    f32* %178 = getelementptr &([8 * f32]* %145)[i64 8][i64 0];
    f32 %179 = load f32* %178;
    f32 %180 = fmul f32 %179, f32 0.5;
    f32 %181 = fadd f32 %177, f32 %180;
    f32* %182 = getelementptr &([8 * f32]* %145)[i64 9][i64 0];
    f32 %183 = load f32* %182;
    f32 %184 = fmul f32 %183, f32 0.5;
    f32 %185 = fadd f32 %181, f32 %184;
    f32* %186 = getelementptr &([8 * f32]* %145)[i64 10][i64 0];
    f32 %187 = load f32* %186;
    f32 %188 = fmul f32 %187, f32 0.5;
    f32 %189 = fadd f32 %185, f32 %188;
    f32* %190 = getelementptr &([8 * f32]* %145)[i64 11][i64 0];
    f32 %191 = load f32* %190;
    f32 %192 = fmul f32 %191, f32 0.5;
    f32 %193 = fadd f32 %189, f32 %192;
    f32* %194 = getelementptr &([8 * f32]* %145)[i64 12][i64 0];
    f32 %195 = load f32* %194;
    f32 %196 = fmul f32 %195, f32 0.5;
    f32 %197 = fadd f32 %193, f32 %196;
    f32* %198 = getelementptr &([8 * f32]* %145)[i64 13][i64 0];
    f32 %199 = load f32* %198;
    f32 %200 = fmul f32 %199, f32 0.5;
    f32 %201 = fadd f32 %197, f32 %200;
    f32* %202 = getelementptr &([8 * f32]* %145)[i64 14][i64 0];
    f32 %203 = load f32* %202;
    f32 %204 = fmul f32 %203, f32 0.5;
    f32 %205 = fadd f32 %201, f32 %204;
    f32* %206 = getelementptr &([8 * f32]* %145)[i64 15][i64 0];
    f32 %207 = load f32* %206;
    f32 %208 = fmul f32 %207, f32 0.5;
    f32 %209 = fadd f32 %205, f32 %208;
    i32 %210 = add i32 %144, i32 16;
    i1 %211 = icmp sgt i32 %9, i32 %210;
    cbr i1 %211(prob = 0.941176), ^while.body9, ^scalar.header1;
  ^scalar.final:
    f32 %212 = phi [^scalar.header, f32 %139] [^while.body10, f32 %224];
    store f32* %103 with f32 %212;
    ubr ^while.header8;
  ^scalar.header1:
    f32 %213 = phi [^super.header1, f32 %105] [^while.body9, f32 %209];
    i32 %214 = phi [^super.header1, i32 1] [^while.body9, i32 %210];
    f32 %215 = phi [^super.header1, f32 undef] [^while.body9, f32 %209];
    i32 %216 = phi [^super.header1, i32 undef] [^while.body9, i32 %210];
    i1 %217 = icmp sgt i32 %1, i32 %214;
    cbr i1 %217(prob = 0.75), ^while.body12, ^scalar.final1;
  ^while.body10 {scalar}:
    f32 %218 = phi [^scalar.header, f32 %138] [^while.body10, f32 %224];
    i32 %219 = phi [^scalar.header, i32 %137] [^while.body10, i32 %225];
    [8 * f32]* %220 = getelementptr &([8 * f32]* %19)[i32 %219];
    f32* %221 = getelementptr &([8 * f32]* %220)[i64 0][i64 0];
    f32 %222 = load f32* %221;
    f32 %223 = fmul f32 %222, f32 0.5;
    f32 %224 = fadd f32 %218, f32 %223;
    i32 %225 = add i32 %219, i32 1;
    i1 %226 = icmp sgt i32 %0, i32 %225;
    cbr i1 %226(prob = 0.75), ^while.body10, ^scalar.final;
  ^b13:
    f32 %227 = load f32* %103;
    f32 %228 = fadd f32 %227, f32 %227;
    f32 %229 = fdiv f32 %228, f32 %14;
    f32 %230 = fadd f32 %229, f32 %229;
    f32 %231 = fdiv f32 %230, f32 %16;
    store f32* %103 with f32 %231;
    i32 %232 = add i32 %85, i32 1;
    ubr ^while.header6;
  ^super.header2:
    cbr i1 %5(prob = 0.941176), ^while.body11, ^scalar.header3;
  ^while.header10:
    f32 %233 = s2f i32 %141 to f32;
    f32 %234 = fmul f32 %68, f32 %233;
    f32 %235 = fadd f32 %234, f32 1.5708;
    i1 %236 = fcmp ogt f32 %235, f32 6.28319;
    i1 %237 = fcmp olt f32 %235, f32 -6.28319;
    i1 %238 = or i1 %236, i1 %237;
    cbr i1 %238(prob = 0.5), ^if.then2, ^b14;
  ^scalar.header2:
    i32 %239 = phi [^prebody2, i32 1] [^scalar.final3, i32 %355];
    f32 %240 = phi [^prebody2, f32 %136] [^scalar.final3, f32 %354];
    f32 %241 = phi [^prebody2, f32 undef] [^scalar.final3, f32 %354];
    i1 %242 = icmp sgt i32 %3, i32 %239;
    cbr i1 %242(prob = 0.75), ^while.body13, ^scalar.final2;
  ^scalar.final1:
    f32 %243 = phi [^scalar.header1, f32 %215] [^while.body12, f32 %336];
    i32 %244 = phi [^scalar.header1, i32 %216] [^while.body12, i32 %337];
    ubr ^scalar.header;
  ^if.then2:
    f32 %245 = fdiv f32 %235, f32 6.28319;
    i32 %246 = f2s f32 %245 to i32;
    f32 %247 = s2f i32 %246 to f32;
    f32 %248 = fmul f32 %247, f32 6.28319;
    f32 %249 = fsub f32 %235, f32 %248;
    ubr ^b14;
  ^while.body11:
    f32 %250 = phi [^super.header2, f32 %136] [^while.body11, f32 %315];
    i32 %251 = phi [^super.header2, i32 1] [^while.body11, i32 %316];
    f32* %252 = getelementptr &([8 * f32]* %19)[i64 0][i32 %251];
    f32 %253 = load f32* %252;
    f32 %254 = fmul f32 %253, f32 0.5;
    f32 %255 = fadd f32 %250, f32 %254;
    f32* %256 = getelementptr &(f32* %252)[i64 1];
    f32 %257 = load f32* %256;
    f32 %258 = fmul f32 %257, f32 0.5;
    f32 %259 = fadd f32 %255, f32 %258;
    f32* %260 = getelementptr &(f32* %252)[i64 2];
    f32 %261 = load f32* %260;
    f32 %262 = fmul f32 %261, f32 0.5;
    f32 %263 = fadd f32 %259, f32 %262;
    f32* %264 = getelementptr &(f32* %252)[i64 3];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 0.5;
    f32 %267 = fadd f32 %263, f32 %266;
    f32* %268 = getelementptr &(f32* %252)[i64 4];
    f32 %269 = load f32* %268;
    f32 %270 = fmul f32 %269, f32 0.5;
    f32 %271 = fadd f32 %267, f32 %270;
    f32* %272 = getelementptr &(f32* %252)[i64 5];
    f32 %273 = load f32* %272;
    f32 %274 = fmul f32 %273, f32 0.5;
    f32 %275 = fadd f32 %271, f32 %274;
    f32* %276 = getelementptr &(f32* %252)[i64 6];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 %277, f32 0.5;
    f32 %279 = fadd f32 %275, f32 %278;
    f32* %280 = getelementptr &(f32* %252)[i64 7];
    f32 %281 = load f32* %280;
    f32 %282 = fmul f32 %281, f32 0.5;
    f32 %283 = fadd f32 %279, f32 %282;
    f32* %284 = getelementptr &(f32* %252)[i64 8];
    f32 %285 = load f32* %284;
    f32 %286 = fmul f32 %285, f32 0.5;
    f32 %287 = fadd f32 %283, f32 %286;
    f32* %288 = getelementptr &(f32* %252)[i64 9];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 %289, f32 0.5;
    f32 %291 = fadd f32 %287, f32 %290;
    f32* %292 = getelementptr &(f32* %252)[i64 10];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %293, f32 0.5;
    f32 %295 = fadd f32 %291, f32 %294;
    f32* %296 = getelementptr &(f32* %252)[i64 11];
    f32 %297 = load f32* %296;
    f32 %298 = fmul f32 %297, f32 0.5;
    f32 %299 = fadd f32 %295, f32 %298;
    f32* %300 = getelementptr &(f32* %252)[i64 12];
    f32 %301 = load f32* %300;
    f32 %302 = fmul f32 %301, f32 0.5;
    f32 %303 = fadd f32 %299, f32 %302;
    f32* %304 = getelementptr &(f32* %252)[i64 13];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 %305, f32 0.5;
    f32 %307 = fadd f32 %303, f32 %306;
    f32* %308 = getelementptr &(f32* %252)[i64 14];
    f32 %309 = load f32* %308;
    f32 %310 = fmul f32 %309, f32 0.5;
    f32 %311 = fadd f32 %307, f32 %310;
    f32* %312 = getelementptr &(f32* %252)[i64 15];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 %313, f32 0.5;
    f32 %315 = fadd f32 %311, f32 %314;
    i32 %316 = add i32 %251, i32 16;
    i1 %317 = icmp sgt i32 %10, i32 %316;
    cbr i1 %317(prob = 0.941176), ^while.body11, ^scalar.header3;
  ^while.body12 {scalar}:
    i32 %318 = phi [^scalar.header1, i32 %214] [^while.body12, i32 %337];
    f32 %319 = phi [^scalar.header1, f32 %213] [^while.body12, f32 %336];
    [8 * f32]* %320 = getelementptr &([8 * f32]* %19)[i32 %318];
    f32* %321 = getelementptr &([8 * f32]* %320)[i64 0][i64 0];
    f32 %322 = load f32* %321;
    f32 %323 = fmul f32 %322, f32 0.5;
    f32 %324 = fadd f32 %319, f32 %323;
    f32* %325 = getelementptr &([8 * f32]* %320)[i64 1][i64 0];
    f32 %326 = load f32* %325;
    f32 %327 = fmul f32 %326, f32 0.5;
    f32 %328 = fadd f32 %324, f32 %327;
    f32* %329 = getelementptr &([8 * f32]* %320)[i64 2][i64 0];
    f32 %330 = load f32* %329;
    f32 %331 = fmul f32 %330, f32 0.5;
    f32 %332 = fadd f32 %328, f32 %331;
    f32* %333 = getelementptr &([8 * f32]* %320)[i64 3][i64 0];
    f32 %334 = load f32* %333;
    f32 %335 = fmul f32 %334, f32 0.5;
    f32 %336 = fadd f32 %332, f32 %335;
    i32 %337 = add i32 %318, i32 4;
    i1 %338 = icmp sgt i32 %1, i32 %337;
    cbr i1 %338(prob = 0.75), ^while.body12, ^scalar.final1;
  ^scalar.final2:
    f32 %339 = phi [^scalar.header2, f32 %241] [^while.body13, f32 %350];
    store f32* %103 with f32 %339;
    ubr ^while.header9;
  ^scalar.header3:
    f32 %340 = phi [^super.header2, f32 %136] [^while.body11, f32 %315];
    i32 %341 = phi [^super.header2, i32 1] [^while.body11, i32 %316];
    f32 %342 = phi [^super.header2, f32 undef] [^while.body11, f32 %315];
    i32 %343 = phi [^super.header2, i32 undef] [^while.body11, i32 %316];
    i1 %344 = icmp sgt i32 %4, i32 %341;
    cbr i1 %344(prob = 0.75), ^while.body14, ^scalar.final3;
  ^while.body13 {scalar}:
    f32 %345 = phi [^scalar.header2, f32 %240] [^while.body13, f32 %350];
    i32 %346 = phi [^scalar.header2, i32 %239] [^while.body13, i32 %351];
    f32* %347 = getelementptr &([8 * f32]* %19)[i64 0][i32 %346];
    f32 %348 = load f32* %347;
    f32 %349 = fmul f32 %348, f32 0.5;
    f32 %350 = fadd f32 %345, f32 %349;
    i32 %351 = add i32 %346, i32 1;
    i1 %352 = icmp sgt i32 %3, i32 %351;
    cbr i1 %352(prob = 0.75), ^while.body13, ^scalar.final2;
  ^b14:
    f32 %353 = phi [^while.header10, f32 %235] [^if.then2, f32 %249];
    cbr i1 %32(prob = 0.984615), ^indirect, ^b15;
  ^scalar.final3:
    f32 %354 = phi [^scalar.header3, f32 %342] [^while.body14, f32 %382];
    i32 %355 = phi [^scalar.header3, i32 %343] [^while.body14, i32 %383];
    ubr ^scalar.header2;
  ^indirect:
    f32 %356 = fsub f32 %353, f32 6.28319;
    i1 %357 = fcmp ogt f32 %353, f32 3.14159;
    f32 %358 = select i1 %357 ? f32 %356 : f32 %353;
    f32 %359 = fadd f32 %358, f32 6.28319;
    i1 %360 = fcmp olt f32 %358, f32 -3.14159;
    f32 %361 = select i1 %360 ? f32 %359 : f32 %358;
    f32 %362 = call (f32) -> f32 @my_sin_impl(f32 %361);
    [8 * f32]* %363 = getelementptr &([8 * f32]* %19)[i32 %141];
    f32 %364 = load f32* %103;
    ubr ^while.body15;
  ^while.body14 {scalar}:
    i32 %365 = phi [^scalar.header3, i32 %341] [^while.body14, i32 %383];
    f32 %366 = phi [^scalar.header3, f32 %340] [^while.body14, f32 %382];
    f32* %367 = getelementptr &([8 * f32]* %19)[i64 0][i32 %365];
    f32 %368 = load f32* %367;
    f32 %369 = fmul f32 %368, f32 0.5;
    f32 %370 = fadd f32 %366, f32 %369;
    f32* %371 = getelementptr &(f32* %367)[i64 1];
    f32 %372 = load f32* %371;
    f32 %373 = fmul f32 %372, f32 0.5;
    f32 %374 = fadd f32 %370, f32 %373;
    f32* %375 = getelementptr &(f32* %367)[i64 2];
    f32 %376 = load f32* %375;
    f32 %377 = fmul f32 %376, f32 0.5;
    f32 %378 = fadd f32 %374, f32 %377;
    f32* %379 = getelementptr &(f32* %367)[i64 3];
    f32 %380 = load f32* %379;
    f32 %381 = fmul f32 %380, f32 0.5;
    f32 %382 = fadd f32 %378, f32 %381;
    i32 %383 = add i32 %365, i32 4;
    i1 %384 = icmp sgt i32 %4, i32 %383;
    cbr i1 %384(prob = 0.75), ^while.body14, ^scalar.final3;
  ^b15:
    i32 %385 = add i32 %141, i32 1;
    ubr ^while.header9;
  ^while.body15:
    f32 %386 = phi [^indirect, f32 %364] [^b16, f32 %411];
    i32 %387 = phi [^indirect, i32 1] [^b16, i32 %412];
    f32 %388 = s2f i32 %387 to f32;
    f32 %389 = fmul f32 %108, f32 %388;
    f32 %390 = fadd f32 %389, f32 1.5708;
    i1 %391 = fcmp ogt f32 %390, f32 6.28319;
    i1 %392 = fcmp olt f32 %390, f32 -6.28319;
    i1 %393 = or i1 %391, i1 %392;
    f32* %394 = getelementptr &([8 * f32]* %363)[i64 0][i32 %387];
    f32 %395 = load f32* %394;
    f32 %396 = fmul f32 %395, f32 %362;
    cbr i1 %393(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %397 = fdiv f32 %390, f32 6.28319;
    i32 %398 = f2s f32 %397 to i32;
    f32 %399 = s2f i32 %398 to f32;
    f32 %400 = fmul f32 %399, f32 6.28319;
    f32 %401 = fsub f32 %390, f32 %400;
    ubr ^b16;
  ^b16:
    f32 %402 = phi [^while.body15, f32 %390] [^if.then3, f32 %401];
    i1 %403 = fcmp ogt f32 %402, f32 3.14159;
    f32 %404 = fsub f32 %402, f32 6.28319;
    f32 %405 = select i1 %403 ? f32 %404 : f32 %402;
    i1 %406 = fcmp olt f32 %405, f32 -3.14159;
    f32 %407 = fadd f32 %405, f32 6.28319;
    f32 %408 = select i1 %406 ? f32 %407 : f32 %405;
    f32 %409 = call (f32) -> f32 @my_sin_impl(f32 %408);
    f32 %410 = fmul f32 %396, f32 %409;
    f32 %411 = fadd f32 %386, f32 %410;
    store f32* %103 with f32 %411;
    i32 %412 = add i32 %387, i32 1;
    i1 %413 = icmp sgt i32 %3, i32 %412;
    cbr i1 %413(prob = 0.984615), ^while.body15, ^b15;
}
