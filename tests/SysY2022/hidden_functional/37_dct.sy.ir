internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    [8 * [8 * f32]]* %3 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.984615), ^while.header1, ^b;
  ^b:
    f32 %6 = s2f i32 %0 to f32;
    f32 %7 = fdiv f32 3.14159, f32 %6;
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    [8 * [8 * f32]]* %10 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %11 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0];
    [8 * f32]* %12 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %2(prob = 0.984615), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i32 %4];
    ubr ^while.body;
  ^b1:
    i32 %14 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %15 = phi [^b, i32 0] [^b3, i32 %29];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    [8 * f32]* %17 = getelementptr &([8 * f32]* %11)[i32 %15];
    f32 %18 = s2f i32 %15 to f32;
    cbr i1 %16(prob = 0.984615), ^while.header3, ^b2;
  ^while.body:
    i32 %19 = phi [^prebody, i32 0] [^while.body, i32 %22];
    f32 %20 = call () -> f32 @getfloat();
    f32* %21 = getelementptr &([8 * f32]* %13)[i64 0][i32 %19];
    store f32* %21 with f32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body, ^b1;
  ^b2:
    i1 %24 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %25 = phi [^while.header2, i32 0] [^b5, i32 %49];
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body1, ^b3;
  ^while.body1:
    f32* %27 = getelementptr &([8 * f32]* %17)[i64 0][i32 %25];
    store f32* %27 with f32 0;
    f32 %28 = s2f i32 %25 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %29 = add i32 %15, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %30 = phi [^b2, i32 0] [^b6, i32 %59];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body2, ^b4;
  ^while.header5:
    i32 %32 = phi [^while.body1, i32 0] [^b12, i32 %135];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.984615), ^prebody1, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %34 = add i32 %0, i32 -4;
    i1 %35 = icmp sgt i32 %34, i32 17;
    i32 %36 = add i32 %1, i32 -4;
    i1 %37 = icmp sgt i32 %36, i32 17;
    [8 * [8 * f32]]* %38 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %39 = getelementptr &([8 * [8 * f32]]* %38)[i64 0][i64 0];
    f32* %40 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0][i64 0];
    i1 %41 = icmp sgt i32 %0, i32 1;
    i1 %42 = icmp sgt i32 %0, i32 5;
    i1 %43 = icmp sgt i32 %1, i32 5;
    i32 %44 = add i32 %0, i32 -20;
    i32 %45 = add i32 %1, i32 -20;
    ubr ^while.header6;
  ^while.body2:
    [8 * f32]* %46 = getelementptr &([8 * f32]* %11)[i32 %30];
    f32* %47 = getelementptr &([8 * f32]* %46)[i64 0][i64 0];
    f32 %48 = load f32* %47;
    call (f32) -> void @putfloat(f32 %48);
    cbr i1 %24(prob = 0.984615), ^while.body3, ^b6;
  ^b5:
    i32 %49 = add i32 %25, i32 1;
    ubr ^while.header3;
  ^prebody1:
    f32 %50 = s2f i32 %32 to f32;
    f32 %51 = fadd f32 %50, f32 0.5;
    f32 %52 = fmul f32 %7, f32 %51;
    f32 %53 = fmul f32 %52, f32 %18;
    f32 %54 = fadd f32 %53, f32 1.5708;
    i1 %55 = fcmp ogt f32 %54, f32 6.28319;
    i1 %56 = fcmp olt f32 %54, f32 -6.28319;
    i1 %57 = or i1 %55, i1 %56;
    [8 * f32]* %58 = getelementptr &([8 * f32]* %12)[i32 %32];
    cbr i1 %57(prob = 0.5), ^if.then, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %30, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %60 = phi [^while.body2, i32 1] [^while.body3, i32 %63];
    call (i32) -> void @putch(i32 32);
    f32* %61 = getelementptr &([8 * f32]* %46)[i64 0][i32 %60];
    f32 %62 = load f32* %61;
    call (f32) -> void @putfloat(f32 %62);
    i32 %63 = add i32 %60, i32 1;
    i1 %64 = icmp sgt i32 %1, i32 %63;
    cbr i1 %64(prob = 0.984615), ^while.body3, ^b6;
  ^while.header6:
    i32 %65 = phi [^b4, i32 0] [^b8, i32 %102];
    f32 %66 = s2f i32 %65 to f32;
    f32 %67 = fadd f32 %66, f32 0.5;
    f32 %68 = fmul f32 %7, f32 %67;
    i1 %69 = icmp sgt i32 %0, i32 %65;
    [8 * f32]* %70 = getelementptr &([8 * f32]* %39)[i32 %65];
    cbr i1 %69(prob = 0.984615), ^while.header7, ^while.header8;
  ^if.then:
    f32 %71 = fdiv f32 %54, f32 6.28319;
    i32 %72 = f2s f32 %71 to i32;
    f32 %73 = s2f i32 %72 to f32;
    f32 %74 = fmul f32 %73, f32 6.28319;
    f32 %75 = fsub f32 %54, f32 %74;
    ubr ^b7;
  ^b7:
    f32 %76 = phi [^prebody1, f32 %54] [^if.then, f32 %75];
    i1 %77 = fcmp ogt f32 %76, f32 3.14159;
    f32 %78 = fsub f32 %76, f32 6.28319;
    f32 %79 = select i1 %77 ? f32 %78 : f32 %76;
    i1 %80 = fcmp olt f32 %79, f32 -3.14159;
    f32 %81 = fadd f32 %79, f32 6.28319;
    f32 %82 = select i1 %80 ? f32 %81 : f32 %79;
    f32 %83 = call (f32) -> f32 @my_sin_impl(f32 %82);
    f32 %84 = load f32* %27;
    ubr ^while.body4;
  ^while.header7:
    i32 %85 = phi [^while.header6, i32 0] [^b13, i32 %225];
    i1 %86 = icmp sgt i32 %1, i32 %85;
    cbr i1 %86(prob = 0.984615), ^while.body5, ^b8;
  ^while.header8:
    i32 %87 = phi [^while.header6, i32 0] [^b11, i32 %129];
    i1 %88 = icmp sgt i32 %0, i32 %87;
    cbr i1 %88(prob = 0.984615), ^while.body6, ^b9;
  ^while.body4:
    f32 %89 = phi [^b7, f32 %84] [^b10, f32 %126];
    i32 %90 = phi [^b7, i32 0] [^b10, i32 %127];
    f32 %91 = s2f i32 %90 to f32;
    f32 %92 = fadd f32 %91, f32 0.5;
    f32 %93 = fmul f32 %9, f32 %92;
    f32 %94 = fmul f32 %93, f32 %28;
    f32 %95 = fadd f32 %94, f32 1.5708;
    i1 %96 = fcmp ogt f32 %95, f32 6.28319;
    i1 %97 = fcmp olt f32 %95, f32 -6.28319;
    i1 %98 = or i1 %96, i1 %97;
    f32* %99 = getelementptr &([8 * f32]* %58)[i64 0][i32 %90];
    f32 %100 = load f32* %99;
    f32 %101 = fmul f32 %100, f32 %83;
    cbr i1 %98(prob = 0.5), ^if.then1, ^b10;
  ^b8:
    i32 %102 = add i32 %65, i32 1;
    ubr ^while.header6;
  ^while.body5:
    f32* %103 = getelementptr &([8 * f32]* %70)[i64 0][i32 %85];
    f32 %104 = load f32* %40;
    f32 %105 = fmul f32 %104, f32 0.25;
    store f32* %103 with f32 %105;
    f32 %106 = s2f i32 %85 to f32;
    f32 %107 = fadd f32 %106, f32 0.5;
    f32 %108 = fmul f32 %9, f32 %107;
    cbr i1 %41(prob = 0.984615), ^super.header, ^while.header9;
  ^while.body6:
    [8 * f32]* %109 = getelementptr &([8 * f32]* %39)[i32 %87];
    f32* %110 = getelementptr &([8 * f32]* %109)[i64 0][i64 0];
    f32 %111 = load f32* %110;
    call (f32) -> void @putfloat(f32 %111);
    cbr i1 %24(prob = 0.984615), ^while.body7, ^b11;
  ^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then1:
    f32 %112 = fdiv f32 %95, f32 6.28319;
    i32 %113 = f2s f32 %112 to i32;
    f32 %114 = s2f i32 %113 to f32;
    f32 %115 = fmul f32 %114, f32 6.28319;
    f32 %116 = fsub f32 %95, f32 %115;
    ubr ^b10;
  ^b10:
    f32 %117 = phi [^while.body4, f32 %95] [^if.then1, f32 %116];
    i1 %118 = fcmp ogt f32 %117, f32 3.14159;
    f32 %119 = fsub f32 %117, f32 6.28319;
    f32 %120 = select i1 %118 ? f32 %119 : f32 %117;
    i1 %121 = fcmp olt f32 %120, f32 -3.14159;
    f32 %122 = fadd f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    f32 %124 = call (f32) -> f32 @my_sin_impl(f32 %123);
    f32 %125 = fmul f32 %101, f32 %124;
    f32 %126 = fadd f32 %89, f32 %125;
    store f32* %27 with f32 %126;
    i32 %127 = add i32 %90, i32 1;
    i1 %128 = icmp sgt i32 %1, i32 %127;
    cbr i1 %128(prob = 0.984615), ^while.body4, ^b12;
  ^super.header:
    cbr i1 %42(prob = 0.941176), ^prebody2, ^indirect;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %129 = add i32 %87, i32 1;
    ubr ^while.header8;
  ^while.header9:
    cbr i1 %24(prob = 0.984615), ^super.header1, ^while.header10;
  ^while.body7:
    i32 %130 = phi [^while.body6, i32 1] [^while.body7, i32 %133];
    call (i32) -> void @putch(i32 32);
    f32* %131 = getelementptr &([8 * f32]* %109)[i64 0][i32 %130];
    f32 %132 = load f32* %131;
    call (f32) -> void @putfloat(f32 %132);
    i32 %133 = add i32 %130, i32 1;
    i1 %134 = icmp sgt i32 %1, i32 %133;
    cbr i1 %134(prob = 0.984615), ^while.body7, ^b11;
  ^b12:
    i32 %135 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^indirect:
    f32 %136 = load f32* %103;
    ubr ^while.body9;
  ^prebody2:
    f32 %137 = load f32* %103;
    cbr i1 %35(prob = 0.941176), ^while.body8, ^while.body10;
  ^super.header1:
    cbr i1 %43(prob = 0.941176), ^prebody3, ^indirect1;
  ^while.header10:
    i32 %138 = phi [^while.header9, i32 1] [^while.body12, i32 1] [^b15, i32 %364];
    i1 %139 = icmp sgt i32 %0, i32 %138;
    cbr i1 %139(prob = 0.984615), ^while.header11, ^b13;
  ^indirect1:
    f32 %140 = load f32* %103;
    ubr ^while.body12;
  ^while.body8:
    i32 %141 = phi [^prebody2, i32 1] [^while.body8, i32 %208];
    f32 %142 = phi [^prebody2, f32 %137] [^while.body8, f32 %207];
    [8 * f32]* %143 = getelementptr &([8 * f32]* %11)[i32 %141];
    f32* %144 = getelementptr &([8 * f32]* %143)[i64 0][i64 0];
    f32 %145 = load f32* %144;
    f32 %146 = fmul f32 %145, f32 0.5;
    f32 %147 = fadd f32 %142, f32 %146;
    f32* %148 = getelementptr &([8 * f32]* %143)[i64 1][i64 0];
    f32 %149 = load f32* %148;
    f32 %150 = fmul f32 %149, f32 0.5;
    f32 %151 = fadd f32 %147, f32 %150;
    f32* %152 = getelementptr &([8 * f32]* %143)[i64 2][i64 0];
    f32 %153 = load f32* %152;
    f32 %154 = fmul f32 %153, f32 0.5;
    f32 %155 = fadd f32 %151, f32 %154;
    f32* %156 = getelementptr &([8 * f32]* %143)[i64 3][i64 0];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %157, f32 0.5;
    f32 %159 = fadd f32 %155, f32 %158;
    f32* %160 = getelementptr &([8 * f32]* %143)[i64 4][i64 0];
    f32 %161 = load f32* %160;
    f32 %162 = fmul f32 %161, f32 0.5;
    f32 %163 = fadd f32 %159, f32 %162;
    f32* %164 = getelementptr &([8 * f32]* %143)[i64 5][i64 0];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 0.5;
    f32 %167 = fadd f32 %163, f32 %166;
    f32* %168 = getelementptr &([8 * f32]* %143)[i64 6][i64 0];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %169, f32 0.5;
    f32 %171 = fadd f32 %167, f32 %170;
    f32* %172 = getelementptr &([8 * f32]* %143)[i64 7][i64 0];
    f32 %173 = load f32* %172;
    f32 %174 = fmul f32 %173, f32 0.5;
    f32 %175 = fadd f32 %171, f32 %174;
    f32* %176 = getelementptr &([8 * f32]* %143)[i64 8][i64 0];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %177, f32 0.5;
    f32 %179 = fadd f32 %175, f32 %178;
    f32* %180 = getelementptr &([8 * f32]* %143)[i64 9][i64 0];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %181, f32 0.5;
    f32 %183 = fadd f32 %179, f32 %182;
    f32* %184 = getelementptr &([8 * f32]* %143)[i64 10][i64 0];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 %185, f32 0.5;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &([8 * f32]* %143)[i64 11][i64 0];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 0.5;
    f32 %191 = fadd f32 %187, f32 %190;
    f32* %192 = getelementptr &([8 * f32]* %143)[i64 12][i64 0];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %193, f32 0.5;
    f32 %195 = fadd f32 %191, f32 %194;
    f32* %196 = getelementptr &([8 * f32]* %143)[i64 13][i64 0];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %197, f32 0.5;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &([8 * f32]* %143)[i64 14][i64 0];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 %201, f32 0.5;
    f32 %203 = fadd f32 %199, f32 %202;
    f32* %204 = getelementptr &([8 * f32]* %143)[i64 15][i64 0];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %205, f32 0.5;
    f32 %207 = fadd f32 %203, f32 %206;
    i32 %208 = add i32 %141, i32 16;
    i1 %209 = icmp sgt i32 %44, i32 %208;
    cbr i1 %209(prob = 0.941176), ^while.body8, ^while.body10;
  ^prebody3:
    f32 %210 = load f32* %103;
    cbr i1 %37(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body9 {scalar}:
    f32 %211 = phi [^indirect, f32 %136] [^while.body9, f32 %217] [^while.body10, f32 %244];
    i32 %212 = phi [^indirect, i32 1] [^while.body9, i32 %218] [^while.body10, i32 %245];
    [8 * f32]* %213 = getelementptr &([8 * f32]* %11)[i32 %212];
    f32* %214 = getelementptr &([8 * f32]* %213)[i64 0][i64 0];
    f32 %215 = load f32* %214;
    f32 %216 = fmul f32 %215, f32 0.5;
    f32 %217 = fadd f32 %211, f32 %216;
    store f32* %103 with f32 %217;
    i32 %218 = add i32 %212, i32 1;
    i1 %219 = icmp sgt i32 %0, i32 %218;
    cbr i1 %219(prob = 0.75), ^while.body9, ^while.header9;
  ^b13:
    f32 %220 = load f32* %103;
    f32 %221 = fadd f32 %220, f32 %220;
    f32 %222 = fdiv f32 %221, f32 %6;
    f32 %223 = fadd f32 %222, f32 %222;
    f32 %224 = fdiv f32 %223, f32 %8;
    store f32* %103 with f32 %224;
    i32 %225 = add i32 %85, i32 1;
    ubr ^while.header7;
  ^while.body10 {scalar}:
    f32 %226 = phi [^prebody2, f32 %137] [^while.body8, f32 %207] [^while.body10, f32 %244];
    i32 %227 = phi [^prebody2, i32 1] [^while.body8, i32 %208] [^while.body10, i32 %245];
    [8 * f32]* %228 = getelementptr &([8 * f32]* %11)[i32 %227];
    f32* %229 = getelementptr &([8 * f32]* %228)[i64 0][i64 0];
    f32 %230 = load f32* %229;
    f32 %231 = fmul f32 %230, f32 0.5;
    f32 %232 = fadd f32 %226, f32 %231;
    f32* %233 = getelementptr &([8 * f32]* %228)[i64 1][i64 0];
    f32 %234 = load f32* %233;
    f32 %235 = fmul f32 %234, f32 0.5;
    f32 %236 = fadd f32 %232, f32 %235;
    f32* %237 = getelementptr &([8 * f32]* %228)[i64 2][i64 0];
    f32 %238 = load f32* %237;
    f32 %239 = fmul f32 %238, f32 0.5;
    f32 %240 = fadd f32 %236, f32 %239;
    f32* %241 = getelementptr &([8 * f32]* %228)[i64 3][i64 0];
    f32 %242 = load f32* %241;
    f32 %243 = fmul f32 %242, f32 0.5;
    f32 %244 = fadd f32 %240, f32 %243;
    i32 %245 = add i32 %227, i32 4;
    i1 %246 = icmp sgt i32 %34, i32 %245;
    cbr i1 %246(prob = 0.75), ^while.body10, ^while.body9;
  ^while.header11:
    f32 %247 = s2f i32 %138 to f32;
    f32 %248 = fmul f32 %68, f32 %247;
    f32 %249 = fadd f32 %248, f32 1.5708;
    i1 %250 = fcmp ogt f32 %249, f32 6.28319;
    i1 %251 = fcmp olt f32 %249, f32 -6.28319;
    i1 %252 = or i1 %250, i1 %251;
    cbr i1 %252(prob = 0.5), ^if.then2, ^b14;
  ^if.then2:
    f32 %253 = fdiv f32 %249, f32 6.28319;
    i32 %254 = f2s f32 %253 to i32;
    f32 %255 = s2f i32 %254 to f32;
    f32 %256 = fmul f32 %255, f32 6.28319;
    f32 %257 = fsub f32 %249, f32 %256;
    ubr ^b14;
  ^while.body11:
    i32 %258 = phi [^prebody3, i32 1] [^while.body11, i32 %324];
    f32 %259 = phi [^prebody3, f32 %210] [^while.body11, f32 %323];
    f32* %260 = getelementptr &([8 * f32]* %11)[i64 0][i32 %258];
    f32 %261 = load f32* %260;
    f32 %262 = fmul f32 %261, f32 0.5;
    f32 %263 = fadd f32 %259, f32 %262;
    f32* %264 = getelementptr &(f32* %260)[i64 1];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 0.5;
    f32 %267 = fadd f32 %263, f32 %266;
    f32* %268 = getelementptr &(f32* %260)[i64 2];
    f32 %269 = load f32* %268;
    f32 %270 = fmul f32 %269, f32 0.5;
    f32 %271 = fadd f32 %267, f32 %270;
    f32* %272 = getelementptr &(f32* %260)[i64 3];
    f32 %273 = load f32* %272;
    f32 %274 = fmul f32 %273, f32 0.5;
    f32 %275 = fadd f32 %271, f32 %274;
    f32* %276 = getelementptr &(f32* %260)[i64 4];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 %277, f32 0.5;
    f32 %279 = fadd f32 %275, f32 %278;
    f32* %280 = getelementptr &(f32* %260)[i64 5];
    f32 %281 = load f32* %280;
    f32 %282 = fmul f32 %281, f32 0.5;
    f32 %283 = fadd f32 %279, f32 %282;
    f32* %284 = getelementptr &(f32* %260)[i64 6];
    f32 %285 = load f32* %284;
    f32 %286 = fmul f32 %285, f32 0.5;
    f32 %287 = fadd f32 %283, f32 %286;
    f32* %288 = getelementptr &(f32* %260)[i64 7];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 %289, f32 0.5;
    f32 %291 = fadd f32 %287, f32 %290;
    f32* %292 = getelementptr &(f32* %260)[i64 8];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %293, f32 0.5;
    f32 %295 = fadd f32 %291, f32 %294;
    f32* %296 = getelementptr &(f32* %260)[i64 9];
    f32 %297 = load f32* %296;
    f32 %298 = fmul f32 %297, f32 0.5;
    f32 %299 = fadd f32 %295, f32 %298;
    f32* %300 = getelementptr &(f32* %260)[i64 10];
    f32 %301 = load f32* %300;
    f32 %302 = fmul f32 %301, f32 0.5;
    f32 %303 = fadd f32 %299, f32 %302;
    f32* %304 = getelementptr &(f32* %260)[i64 11];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 %305, f32 0.5;
    f32 %307 = fadd f32 %303, f32 %306;
    f32* %308 = getelementptr &(f32* %260)[i64 12];
    f32 %309 = load f32* %308;
    f32 %310 = fmul f32 %309, f32 0.5;
    f32 %311 = fadd f32 %307, f32 %310;
    f32* %312 = getelementptr &(f32* %260)[i64 13];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 %313, f32 0.5;
    f32 %315 = fadd f32 %311, f32 %314;
    f32* %316 = getelementptr &(f32* %260)[i64 14];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 %317, f32 0.5;
    f32 %319 = fadd f32 %315, f32 %318;
    f32* %320 = getelementptr &(f32* %260)[i64 15];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %321, f32 0.5;
    f32 %323 = fadd f32 %319, f32 %322;
    i32 %324 = add i32 %258, i32 16;
    i1 %325 = icmp sgt i32 %45, i32 %324;
    cbr i1 %325(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body12 {scalar}:
    f32 %326 = phi [^indirect1, f32 %140] [^while.body12, f32 %331] [^while.body13, f32 %351];
    i32 %327 = phi [^indirect1, i32 1] [^while.body12, i32 %332] [^while.body13, i32 %352];
    f32* %328 = getelementptr &([8 * f32]* %11)[i64 0][i32 %327];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 %329, f32 0.5;
    f32 %331 = fadd f32 %326, f32 %330;
    store f32* %103 with f32 %331;
    i32 %332 = add i32 %327, i32 1;
    i1 %333 = icmp sgt i32 %1, i32 %332;
    cbr i1 %333(prob = 0.75), ^while.body12, ^while.header10;
  ^while.body13 {scalar}:
    f32 %334 = phi [^prebody3, f32 %210] [^while.body11, f32 %323] [^while.body13, f32 %351];
    i32 %335 = phi [^prebody3, i32 1] [^while.body11, i32 %324] [^while.body13, i32 %352];
    f32* %336 = getelementptr &([8 * f32]* %11)[i64 0][i32 %335];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 %337, f32 0.5;
    f32 %339 = fadd f32 %334, f32 %338;
    f32* %340 = getelementptr &(f32* %336)[i64 1];
    f32 %341 = load f32* %340;
    f32 %342 = fmul f32 %341, f32 0.5;
    f32 %343 = fadd f32 %339, f32 %342;
    f32* %344 = getelementptr &(f32* %336)[i64 2];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 %345, f32 0.5;
    f32 %347 = fadd f32 %343, f32 %346;
    f32* %348 = getelementptr &(f32* %336)[i64 3];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 %349, f32 0.5;
    f32 %351 = fadd f32 %347, f32 %350;
    i32 %352 = add i32 %335, i32 4;
    i1 %353 = icmp sgt i32 %36, i32 %352;
    cbr i1 %353(prob = 0.75), ^while.body13, ^while.body12;
  ^b14:
    f32 %354 = phi [^while.header11, f32 %249] [^if.then2, f32 %257];
    cbr i1 %24(prob = 0.984615), ^indirect2, ^b15;
  ^indirect2:
    f32 %355 = fsub f32 %354, f32 6.28319;
    i1 %356 = fcmp ogt f32 %354, f32 3.14159;
    f32 %357 = select i1 %356 ? f32 %355 : f32 %354;
    f32 %358 = fadd f32 %357, f32 6.28319;
    i1 %359 = fcmp olt f32 %357, f32 -3.14159;
    f32 %360 = select i1 %359 ? f32 %358 : f32 %357;
    f32 %361 = call (f32) -> f32 @my_sin_impl(f32 %360);
    [8 * f32]* %362 = getelementptr &([8 * f32]* %11)[i32 %138];
    f32 %363 = load f32* %103;
    ubr ^while.body14;
  ^b15:
    i32 %364 = add i32 %138, i32 1;
    ubr ^while.header10;
  ^while.body14:
    f32 %365 = phi [^indirect2, f32 %363] [^b16, f32 %390];
    i32 %366 = phi [^indirect2, i32 1] [^b16, i32 %391];
    f32 %367 = s2f i32 %366 to f32;
    f32 %368 = fmul f32 %108, f32 %367;
    f32 %369 = fadd f32 %368, f32 1.5708;
    i1 %370 = fcmp ogt f32 %369, f32 6.28319;
    i1 %371 = fcmp olt f32 %369, f32 -6.28319;
    i1 %372 = or i1 %370, i1 %371;
    f32* %373 = getelementptr &([8 * f32]* %362)[i64 0][i32 %366];
    f32 %374 = load f32* %373;
    f32 %375 = fmul f32 %374, f32 %361;
    cbr i1 %372(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %376 = fdiv f32 %369, f32 6.28319;
    i32 %377 = f2s f32 %376 to i32;
    f32 %378 = s2f i32 %377 to f32;
    f32 %379 = fmul f32 %378, f32 6.28319;
    f32 %380 = fsub f32 %369, f32 %379;
    ubr ^b16;
  ^b16:
    f32 %381 = phi [^while.body14, f32 %369] [^if.then3, f32 %380];
    i1 %382 = fcmp ogt f32 %381, f32 3.14159;
    f32 %383 = fsub f32 %381, f32 6.28319;
    f32 %384 = select i1 %382 ? f32 %383 : f32 %381;
    i1 %385 = fcmp olt f32 %384, f32 -3.14159;
    f32 %386 = fadd f32 %384, f32 6.28319;
    f32 %387 = select i1 %385 ? f32 %386 : f32 %384;
    f32 %388 = call (f32) -> f32 @my_sin_impl(f32 %387);
    f32 %389 = fmul f32 %375, f32 %388;
    f32 %390 = fadd f32 %365, f32 %389;
    store f32* %103 with f32 %390;
    i32 %391 = add i32 %366, i32 1;
    i1 %392 = icmp sgt i32 %1, i32 %391;
    cbr i1 %392(prob = 0.984615), ^while.body14, ^b15;
}
