internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = fcmp gt f32 %x, f32 0;
    cbr i1 %3(prob = 0.5), ^entry1, ^b;
^b:
    f32 %4 = fneg f32 %x;
    ubr ^entry1;
^entry1:
    f32 %5 = phi [^entry, f32 %x] [^b, f32 %4];
    i1 %6 = fcmp le f32 %5, f32 1e-06;
    cbr i1 %6(prob = 0.5), ^if.then, ^b1;
^if.then:
    ret f32 %x;
^b1:
    f32 %7 = fdiv f32 %x, f32 3;
    f32 %8 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %7, [8 * [8 * f32]]* %0, [8 * [8 * f32]]* %1, [8 * [8 * f32]]* %2);
    f32 %9 = fmul f32 3, f32 %8;
    f32 %10 = fmul f32 4, f32 %8;
    f32 %11 = fmul f32 %10, f32 %8;
    f32 %12 = fmul f32 %11, f32 %8;
    f32 %13 = fsub f32 %9, f32 %12;
    ret f32 %13;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    f32 %194 = s2f i32 %192 to f32;
    f32 %195 = s2f i32 %193 to f32;
    f32 %196 = fdiv f32 3.14159, f32 %195;
    f32 %197 = fdiv f32 3.14159, f32 %194;
    ubr ^while.header;
^while.header:
    i32 %198 = phi [^b1, i32 %208] [^entry, i32 0];
    i1 %199 = scmp lt i32 %198, i32 %192;
    [8 * f32]* %200 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %198];
    cbr i1 %199(prob = 0.97), ^while.header1, ^b;
^b:
    [8 * f32]* %201 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %202 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %203 = phi [^while.header, i32 0] [^while.body, i32 %207];
    i1 %204 = scmp lt i32 %203, i32 %193;
    cbr i1 %204(prob = 0.97), ^while.body, ^b1;
^while.body:
    f32* %205 = getelementptr &([8 * f32]* %200)[i64 0][i32 %203];
    f32 %206 = call () -> f32 @getfloat();
    store f32* %205 with f32 %206;
    i32 %207 = add i32 %203, i32 1;
    ubr ^while.header1;
^b1:
    i32 %208 = add i32 %198, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %209 = phi [^b2, i32 %219] [^b, i32 0];
    i1 %210 = scmp lt i32 %209, i32 %192;
    [8 * f32]* %211 = getelementptr &([8 * f32]* %201)[i32 %209];
    f32 %212 = s2f i32 %209 to f32;
    cbr i1 %210(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %213 = phi [^while.header2, i32 0] [^b4, i32 %247];
    i1 %214 = scmp lt i32 %213, i32 %193;
    cbr i1 %214(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %215 = phi [^while.header2, i32 0] [^b5, i32 %251];
    i1 %216 = scmp lt i32 %215, i32 %192;
    cbr i1 %216(prob = 0.97), ^while.body2, ^b3;
^while.body1:
    f32 %217 = s2f i32 %213 to f32;
    f32* %218 = getelementptr &([8 * f32]* %211)[i64 0][i32 %213];
    store f32* %218 with f32 0;
    ubr ^while.header5;
^b2:
    i32 %219 = add i32 %209, i32 1;
    ubr ^while.header2;
^while.body2:
    [8 * f32]* %220 = getelementptr &([8 * f32]* %201)[i32 %215];
    f32* %221 = getelementptr &([8 * f32]* %220)[i64 0][i64 0];
    f32 %222 = load f32* %221;
    call (f32) -> void @putfloat(f32 %222);
    ubr ^while.header6;
^b3:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %223 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    ubr ^while.header7;
^while.header5:
    i32 %224 = phi [^b6, i32 %258] [^while.body1, i32 0];
    i1 %225 = scmp lt i32 %224, i32 %192;
    [8 * f32]* %226 = getelementptr &([8 * f32]* %202)[i32 %224];
    f32 %227 = s2f i32 %224 to f32;
    f32 %228 = fadd f32 %227, f32 0.5;
    f32 %229 = fmul f32 %197, f32 %228;
    f32 %230 = fmul f32 %229, f32 %212;
    f32 %231 = fadd f32 %230, f32 1.5708;
    i1 %232 = fcmp gt f32 %231, f32 6.28319;
    i1 %233 = fcmp lt f32 %231, f32 -6.28319;
    f32 %234 = fdiv f32 %231, f32 6.28319;
    i32 %235 = f2s f32 %234 to i32;
    f32 %236 = s2f i32 %235 to f32;
    f32 %237 = fmul f32 %236, f32 6.28319;
    f32 %238 = fsub f32 %231, f32 %237;
    cbr i1 %225(prob = 0.97), ^while.header8, ^b4;
^while.header6:
    i32 %239 = phi [^while.body3, i32 %250] [^while.body2, i32 1];
    i1 %240 = scmp lt i32 %239, i32 %193;
    cbr i1 %240(prob = 0.97), ^while.body3, ^b5;
^while.header7:
    i32 %241 = phi [^b7, i32 %268] [^b3, i32 0];
    i1 %242 = scmp lt i32 %241, i32 %192;
    [8 * f32]* %243 = getelementptr &([8 * f32]* %223)[i32 %241];
    f32 %244 = s2f i32 %241 to f32;
    f32 %245 = fadd f32 %244, f32 0.5;
    f32 %246 = fmul f32 %197, f32 %245;
    cbr i1 %242(prob = 0.97), ^while.header9, ^while.header10;
^b4:
    i32 %247 = add i32 %213, i32 1;
    ubr ^while.header3;
^while.body3:
    call (i32) -> void @putch(i32 32);
    f32* %248 = getelementptr &([8 * f32]* %220)[i64 0][i32 %239];
    f32 %249 = load f32* %248;
    call (f32) -> void @putfloat(f32 %249);
    i32 %250 = add i32 %239, i32 1;
    ubr ^while.header6;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %251 = add i32 %215, i32 1;
    ubr ^while.header4;
^while.header8:
    i32 %252 = phi [^while.header5, i32 0] [^b24, i32 %357];
    i1 %253 = scmp lt i32 %252, i32 %193;
    cbr i1 %253(prob = 0.97), ^while.body4, ^b6;
^while.header9:
    i32 %254 = phi [^while.header7, i32 0] [^b15, i32 %329];
    i1 %255 = scmp lt i32 %254, i32 %193;
    cbr i1 %255(prob = 0.97), ^while.body5, ^b7;
^while.header10:
    i32 %256 = phi [^b12, i32 %289] [^while.header7, i32 0];
    i1 %257 = scmp lt i32 %256, i32 %192;
    cbr i1 %257(prob = 0.97), ^while.body6, ^b8;
^b6:
    i32 %258 = add i32 %224, i32 1;
    ubr ^while.header5;
^while.body4:
    f32 %259 = load f32* %218;
    f32* %260 = getelementptr &([8 * f32]* %226)[i64 0][i32 %252];
    f32 %261 = load f32* %260;
    cbr i1 %232(prob = 0.5), ^b10, ^b9;
^while.body5:
    f32 %262 = s2f i32 %254 to f32;
    f32 %263 = fadd f32 %262, f32 0.5;
    f32 %264 = fmul f32 %196, f32 %263;
    f32* %265 = getelementptr &([8 * f32]* %243)[i64 0][i32 %254];
    f32 %266 = load f32* %64;
    f32 %267 = fmul f32 0.25, f32 %266;
    store f32* %265 with f32 %267;
    ubr ^while.header11;
^b7:
    i32 %268 = add i32 %241, i32 1;
    ubr ^while.header7;
^while.body6:
    [8 * f32]* %269 = getelementptr &([8 * f32]* %223)[i32 %256];
    f32* %270 = getelementptr &([8 * f32]* %269)[i64 0][i64 0];
    f32 %271 = load f32* %270;
    call (f32) -> void @putfloat(f32 %271);
    ubr ^while.header12;
^b8:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b9:
    ubr ^b10;
^b10:
    i1 %272 = phi [^while.body4, i1 true] [^b9, i1 %233];
    cbr i1 %272(prob = 0.5), ^if.then, ^b11;
^while.header11:
    i32 %273 = phi [^while.body7, i32 %283] [^while.body5, i32 1];
    i1 %274 = scmp lt i32 %273, i32 %192;
    cbr i1 %274(prob = 0.97), ^while.body7, ^while.header13;
^while.header12:
    i32 %275 = phi [^while.body8, i32 %286] [^while.body6, i32 1];
    i1 %276 = scmp lt i32 %275, i32 %193;
    cbr i1 %276(prob = 0.97), ^while.body8, ^b12;
^if.then:
    ubr ^b11;
^while.body7:
    f32 %277 = load f32* %265;
    [8 * f32]* %278 = getelementptr &([8 * f32]* %201)[i32 %273];
    f32* %279 = getelementptr &([8 * f32]* %278)[i64 0][i64 0];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 0.5, f32 %280;
    f32 %282 = fadd f32 %277, f32 %281;
    store f32* %265 with f32 %282;
    i32 %283 = add i32 %273, i32 1;
    ubr ^while.header11;
^while.body8:
    call (i32) -> void @putch(i32 32);
    f32* %284 = getelementptr &([8 * f32]* %269)[i64 0][i32 %275];
    f32 %285 = load f32* %284;
    call (f32) -> void @putfloat(f32 %285);
    i32 %286 = add i32 %275, i32 1;
    ubr ^while.header12;
^b11:
    f32 %287 = phi [^b10, f32 %231] [^if.then, f32 %238];
    i1 %288 = fcmp gt f32 %287, f32 3.14159;
    cbr i1 %288(prob = 0.5), ^if.then1, ^b13;
^b12:
    call (i32) -> void @putch(i32 10);
    i32 %289 = add i32 %256, i32 1;
    ubr ^while.header10;
^while.header13:
    i32 %290 = phi [^while.header11, i32 1] [^while.body9, i32 %298];
    i1 %291 = scmp lt i32 %290, i32 %193;
    cbr i1 %291(prob = 0.97), ^while.body9, ^while.header14;
^if.then1:
    f32 %292 = fsub f32 %287, f32 6.28319;
    ubr ^b13;
^while.body9:
    f32 %293 = load f32* %265;
    f32* %294 = getelementptr &([8 * f32]* %201)[i64 0][i32 %290];
    f32 %295 = load f32* %294;
    f32 %296 = fmul f32 0.5, f32 %295;
    f32 %297 = fadd f32 %293, f32 %296;
    store f32* %265 with f32 %297;
    i32 %298 = add i32 %290, i32 1;
    ubr ^while.header13;
^b13:
    f32 %299 = phi [^b11, f32 %287] [^if.then1, f32 %292];
    i1 %300 = fcmp lt f32 %299, f32 -3.14159;
    cbr i1 %300(prob = 0.5), ^if.then2, ^b14;
^while.header14:
    i32 %301 = phi [^while.header13, i32 1] [^b18, i32 %334];
    i1 %302 = scmp lt i32 %301, i32 %192;
    [8 * f32]* %303 = getelementptr &([8 * f32]* %201)[i32 %301];
    f32 %304 = s2f i32 %301 to f32;
    f32 %305 = fmul f32 %246, f32 %304;
    f32 %306 = fadd f32 %305, f32 1.5708;
    i1 %307 = fcmp gt f32 %306, f32 6.28319;
    i1 %308 = fcmp lt f32 %306, f32 -6.28319;
    f32 %309 = fdiv f32 %306, f32 6.28319;
    i32 %310 = f2s f32 %309 to i32;
    f32 %311 = s2f i32 %310 to f32;
    f32 %312 = fmul f32 %311, f32 6.28319;
    f32 %313 = fsub f32 %306, f32 %312;
    cbr i1 %302(prob = 0.97), ^while.header15, ^b15;
^if.then2:
    f32 %314 = fadd f32 %299, f32 6.28319;
    ubr ^b14;
^b14:
    f32 %315 = phi [^b13, f32 %299] [^if.then2, f32 %314];
    f32 %316 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %315, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %317 = fmul f32 %261, f32 %316;
    f32 %318 = s2f i32 %252 to f32;
    f32 %319 = fadd f32 %318, f32 0.5;
    f32 %320 = fmul f32 %196, f32 %319;
    f32 %321 = fmul f32 %320, f32 %217;
    f32 %322 = fadd f32 %321, f32 1.5708;
    i1 %323 = fcmp gt f32 %322, f32 6.28319;
    cbr i1 %323(prob = 0.5), ^b17, ^b16;
^b15:
    f32 %324 = load f32* %265;
    f32 %325 = fmul f32 %324, f32 2;
    f32 %326 = fdiv f32 %325, f32 %194;
    f32 %327 = fmul f32 %326, f32 2;
    f32 %328 = fdiv f32 %327, f32 %195;
    store f32* %265 with f32 %328;
    i32 %329 = add i32 %254, i32 1;
    ubr ^while.header9;
^while.header15:
    i32 %330 = phi [^while.header14, i32 1] [^b31, i32 %385];
    i1 %331 = scmp lt i32 %330, i32 %193;
    cbr i1 %331(prob = 0.97), ^while.body10, ^b18;
^b16:
    i1 %332 = fcmp lt f32 %322, f32 -6.28319;
    ubr ^b17;
^b17:
    i1 %333 = phi [^b14, i1 true] [^b16, i1 %332];
    cbr i1 %333(prob = 0.5), ^if.then3, ^b20;
^b18:
    i32 %334 = add i32 %301, i32 1;
    ubr ^while.header14;
^while.body10:
    f32 %335 = load f32* %265;
    f32* %336 = getelementptr &([8 * f32]* %303)[i64 0][i32 %330];
    f32 %337 = load f32* %336;
    cbr i1 %307(prob = 0.5), ^b21, ^b19;
^if.then3:
    f32 %338 = fdiv f32 %322, f32 6.28319;
    i32 %339 = f2s f32 %338 to i32;
    f32 %340 = s2f i32 %339 to f32;
    f32 %341 = fmul f32 %340, f32 6.28319;
    f32 %342 = fsub f32 %322, f32 %341;
    ubr ^b20;
^b19:
    ubr ^b21;
^b20:
    f32 %343 = phi [^b17, f32 %322] [^if.then3, f32 %342];
    i1 %344 = fcmp gt f32 %343, f32 3.14159;
    cbr i1 %344(prob = 0.5), ^if.then4, ^b22;
^b21:
    i1 %345 = phi [^while.body10, i1 true] [^b19, i1 %308];
    cbr i1 %345(prob = 0.5), ^if.then5, ^b23;
^if.then4:
    f32 %346 = fsub f32 %343, f32 6.28319;
    ubr ^b22;
^if.then5:
    ubr ^b23;
^b22:
    f32 %347 = phi [^b20, f32 %343] [^if.then4, f32 %346];
    i1 %348 = fcmp lt f32 %347, f32 -3.14159;
    cbr i1 %348(prob = 0.5), ^if.then6, ^b24;
^b23:
    f32 %349 = phi [^b21, f32 %306] [^if.then5, f32 %313];
    i1 %350 = fcmp gt f32 %349, f32 3.14159;
    cbr i1 %350(prob = 0.5), ^if.then7, ^b25;
^if.then6:
    f32 %351 = fadd f32 %347, f32 6.28319;
    ubr ^b24;
^if.then7:
    f32 %352 = fsub f32 %349, f32 6.28319;
    ubr ^b25;
^b24:
    f32 %353 = phi [^if.then6, f32 %351] [^b22, f32 %347];
    f32 %354 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %353, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %355 = fmul f32 %317, f32 %354;
    f32 %356 = fadd f32 %259, f32 %355;
    store f32* %218 with f32 %356;
    i32 %357 = add i32 %252, i32 1;
    ubr ^while.header8;
^b25:
    f32 %358 = phi [^b23, f32 %349] [^if.then7, f32 %352];
    i1 %359 = fcmp lt f32 %358, f32 -3.14159;
    cbr i1 %359(prob = 0.5), ^if.then8, ^b26;
^if.then8:
    f32 %360 = fadd f32 %358, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %361 = phi [^if.then8, f32 %360] [^b25, f32 %358];
    f32 %362 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %361, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %363 = fmul f32 %337, f32 %362;
    f32 %364 = s2f i32 %330 to f32;
    f32 %365 = fmul f32 %264, f32 %364;
    f32 %366 = fadd f32 %365, f32 1.5708;
    i1 %367 = fcmp gt f32 %366, f32 6.28319;
    cbr i1 %367(prob = 0.5), ^b28, ^b27;
^b27:
    i1 %368 = fcmp lt f32 %366, f32 -6.28319;
    ubr ^b28;
^b28:
    i1 %369 = phi [^b26, i1 true] [^b27, i1 %368];
    cbr i1 %369(prob = 0.5), ^if.then9, ^b29;
^if.then9:
    f32 %370 = fdiv f32 %366, f32 6.28319;
    i32 %371 = f2s f32 %370 to i32;
    f32 %372 = s2f i32 %371 to f32;
    f32 %373 = fmul f32 %372, f32 6.28319;
    f32 %374 = fsub f32 %366, f32 %373;
    ubr ^b29;
^b29:
    f32 %375 = phi [^b28, f32 %366] [^if.then9, f32 %374];
    i1 %376 = fcmp gt f32 %375, f32 3.14159;
    cbr i1 %376(prob = 0.5), ^if.then10, ^b30;
^if.then10:
    f32 %377 = fsub f32 %375, f32 6.28319;
    ubr ^b30;
^b30:
    f32 %378 = phi [^b29, f32 %375] [^if.then10, f32 %377];
    i1 %379 = fcmp lt f32 %378, f32 -3.14159;
    cbr i1 %379(prob = 0.5), ^if.then11, ^b31;
^if.then11:
    f32 %380 = fadd f32 %378, f32 6.28319;
    ubr ^b31;
^b31:
    f32 %381 = phi [^if.then11, f32 %380] [^b30, f32 %378];
    f32 %382 = call (f32, [8 * [8 * f32]]*, [8 * [8 * f32]]*, [8 * [8 * f32]]*) -> f32 @my_sin_impl(f32 %381, [8 * [8 * f32]]* %test_block, [8 * [8 * f32]]* %test_dct, [8 * [8 * f32]]* %test_idct);
    f32 %383 = fmul f32 %363, f32 %382;
    f32 %384 = fadd f32 %335, f32 %383;
    store f32* %265 with f32 %384;
    i32 %385 = add i32 %330, i32 1;
    ubr ^while.header15;
}
