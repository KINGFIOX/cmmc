internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 3, f32 %5;
    f32 %7 = fmul f32 4, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 %8, f32 %5;
    f32 %10 = fsub f32 %6, f32 %9;
    ubr ^b3;
^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    i1 %194 = scmp gt i32 %193, i32 0;
    ubr ^while.header;
^while.header:
    i32 %195 = phi [^entry, i32 0] [^b1, i32 %204];
    i1 %196 = scmp lt i32 %195, i32 %192;
    cbr i1 %196(prob = 0.97), ^while.body, ^b;
^b:
    [8 * f32]* %197 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %198 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    f32 %199 = s2f i32 %192 to f32;
    f32 %200 = fdiv f32 3.14159, f32 %199;
    f32 %201 = s2f i32 %193 to f32;
    f32 %202 = fdiv f32 3.14159, f32 %201;
    ubr ^while.header1;
^while.body:
    cbr i1 %194(prob = 0.97), ^indirect, ^b1;
^indirect:
    [8 * f32]* %203 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %195];
    ubr ^while.body1;
^b1:
    i32 %204 = add i32 %195, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %205 = phi [^b, i32 0] [^b3, i32 %219];
    i1 %206 = scmp lt i32 %205, i32 %192;
    [8 * f32]* %207 = getelementptr &([8 * f32]* %197)[i32 %205];
    f32 %208 = s2f i32 %205 to f32;
    cbr i1 %206(prob = 0.97), ^while.header2, ^b2;
^while.body1:
    i32 %209 = phi [^indirect, i32 0] [^while.body1, i32 %212];
    f32* %210 = getelementptr &([8 * f32]* %203)[i64 0][i32 %209];
    f32 %211 = call () -> f32 @getfloat();
    store f32* %210 with f32 %211;
    i32 %212 = add i32 %209, i32 1;
    i1 %213 = scmp lt i32 %212, i32 %193;
    cbr i1 %213(prob = 0.97), ^while.body1, ^b1;
^b2:
    i1 %214 = scmp gt i32 %193, i32 1;
    ubr ^while.header3;
^while.header2:
    i32 %215 = phi [^while.header1, i32 0] [^b5, i32 %229];
    i1 %216 = scmp lt i32 %215, i32 %193;
    cbr i1 %216(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    f32 %217 = s2f i32 %215 to f32;
    f32* %218 = getelementptr &([8 * f32]* %207)[i64 0][i32 %215];
    store f32* %218 with f32 0;
    ubr ^while.header4;
^b3:
    i32 %219 = add i32 %205, i32 1;
    ubr ^while.header1;
^while.header3:
    i32 %220 = phi [^b2, i32 0] [^b6, i32 %230];
    i1 %221 = scmp lt i32 %220, i32 %192;
    cbr i1 %221(prob = 0.97), ^while.body3, ^b4;
^while.header4:
    i32 %222 = phi [^while.body2, i32 0] [^b7, i32 %242];
    i1 %223 = scmp lt i32 %222, i32 %192;
    cbr i1 %223(prob = 0.97), ^while.body4, ^b5;
^b4:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %224 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    i1 %225 = scmp gt i32 %192, i32 1;
    ubr ^while.header5;
^while.body3:
    [8 * f32]* %226 = getelementptr &([8 * f32]* %197)[i32 %220];
    f32* %227 = getelementptr &([8 * f32]* %226)[i64 0][i64 0];
    f32 %228 = load f32* %227;
    call (f32) -> void @putfloat(f32 %228);
    cbr i1 %214(prob = 0.97), ^while.body5, ^b6;
^b5:
    i32 %229 = add i32 %215, i32 1;
    ubr ^while.header2;
^while.body4:
    cbr i1 %194(prob = 0.97), ^indirect1, ^b7;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %230 = add i32 %220, i32 1;
    ubr ^while.header3;
^while.body5:
    i32 %231 = phi [^while.body3, i32 1] [^while.body5, i32 %234];
    call (i32) -> void @putch(i32 32);
    f32* %232 = getelementptr &([8 * f32]* %226)[i64 0][i32 %231];
    f32 %233 = load f32* %232;
    call (f32) -> void @putfloat(f32 %233);
    i32 %234 = add i32 %231, i32 1;
    i1 %235 = scmp lt i32 %234, i32 %193;
    cbr i1 %235(prob = 0.97), ^while.body5, ^b6;
^while.header5:
    i32 %236 = phi [^b4, i32 0] [^b9, i32 %263];
    i1 %237 = scmp lt i32 %236, i32 %192;
    [8 * f32]* %238 = getelementptr &([8 * f32]* %224)[i32 %236];
    f32 %239 = s2f i32 %236 to f32;
    f32 %240 = fadd f32 %239, f32 0.5;
    f32 %241 = fmul f32 %200, f32 %240;
    cbr i1 %237(prob = 0.97), ^while.header6, ^while.header7;
^b7:
    i32 %242 = add i32 %222, i32 1;
    ubr ^while.header4;
^indirect1:
    [8 * f32]* %243 = getelementptr &([8 * f32]* %198)[i32 %222];
    f32 %244 = s2f i32 %222 to f32;
    f32 %245 = fadd f32 %244, f32 0.5;
    f32 %246 = fmul f32 %200, f32 %245;
    f32 %247 = fmul f32 %246, f32 %208;
    f32 %248 = fadd f32 %247, f32 1.5708;
    i1 %249 = fcmp gt f32 %248, f32 6.28319;
    i1 %250 = fcmp lt f32 %248, f32 -6.28319;
    i1 %251 = or i1 %249, i1 %250;
    cbr i1 %251(prob = 0.75), ^if.then, ^b8;
^while.header6:
    i32 %252 = phi [^while.header5, i32 0] [^b16, i32 %328];
    i1 %253 = scmp lt i32 %252, i32 %193;
    cbr i1 %253(prob = 0.97), ^while.body6, ^b9;
^while.header7:
    i32 %254 = phi [^while.header5, i32 0] [^b12, i32 %282];
    i1 %255 = scmp lt i32 %254, i32 %192;
    cbr i1 %255(prob = 0.97), ^while.body7, ^b10;
^if.then:
    f32 %256 = fdiv f32 %248, f32 6.28319;
    i32 %257 = f2s f32 %256 to i32;
    f32 %258 = s2f i32 %257 to f32;
    f32 %259 = fmul f32 %258, f32 6.28319;
    f32 %260 = fsub f32 %248, f32 %259;
    ubr ^b8;
^b8:
    f32 %261 = phi [^indirect1, f32 %248] [^if.then, f32 %260];
    i1 %262 = fcmp gt f32 %261, f32 3.14159;
    cbr i1 %262(prob = 0.5), ^if.then1, ^b11;
^b9:
    i32 %263 = add i32 %236, i32 1;
    ubr ^while.header5;
^while.body6:
    f32* %264 = getelementptr &([8 * f32]* %238)[i64 0][i32 %252];
    f32 %265 = load f32* %64;
    f32 %266 = fmul f32 0.25, f32 %265;
    store f32* %264 with f32 %266;
    cbr i1 %225(prob = 0.97), ^while.body8, ^b13;
^while.body7:
    [8 * f32]* %267 = getelementptr &([8 * f32]* %224)[i32 %254];
    f32* %268 = getelementptr &([8 * f32]* %267)[i64 0][i64 0];
    f32 %269 = load f32* %268;
    call (f32) -> void @putfloat(f32 %269);
    cbr i1 %214(prob = 0.97), ^while.body9, ^b12;
^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then1:
    f32 %270 = fsub f32 %261, f32 6.28319;
    ubr ^b11;
^b11:
    f32 %271 = phi [^b8, f32 %261] [^if.then1, f32 %270];
    i1 %272 = fcmp lt f32 %271, f32 -3.14159;
    cbr i1 %272(prob = 0.5), ^if.then2, ^b14;
^while.body8:
    f32 %273 = phi [^while.body6, f32 %266] [^indirect2, f32 %289];
    i32 %274 = phi [^while.body6, i32 1] [^indirect2, i32 %280];
    [8 * f32]* %275 = getelementptr &([8 * f32]* %197)[i32 %274];
    f32* %276 = getelementptr &([8 * f32]* %275)[i64 0][i64 0];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 0.5, f32 %277;
    f32 %279 = fadd f32 %273, f32 %278;
    store f32* %264 with f32 %279;
    i32 %280 = add i32 %274, i32 1;
    i1 %281 = scmp lt i32 %280, i32 %192;
    cbr i1 %281(prob = 0.97), ^indirect2, ^b13;
^b12:
    call (i32) -> void @putch(i32 10);
    i32 %282 = add i32 %254, i32 1;
    ubr ^while.header7;
^b13:
    cbr i1 %214(prob = 0.97), ^while.body10, ^b15;
^while.body9:
    i32 %283 = phi [^while.body7, i32 1] [^while.body9, i32 %286];
    call (i32) -> void @putch(i32 32);
    f32* %284 = getelementptr &([8 * f32]* %267)[i64 0][i32 %283];
    f32 %285 = load f32* %284;
    call (f32) -> void @putfloat(f32 %285);
    i32 %286 = add i32 %283, i32 1;
    i1 %287 = scmp lt i32 %286, i32 %193;
    cbr i1 %287(prob = 0.97), ^while.body9, ^b12;
^if.then2:
    f32 %288 = fadd f32 %271, f32 6.28319;
    ubr ^b14;
^indirect2:
    f32 %289 = load f32* %264;
    ubr ^while.body8;
^b14:
    f32 %290 = phi [^b11, f32 %271] [^if.then2, f32 %288];
    f32 %291 = call (f32) -> f32 @my_sin_impl(f32 %290);
    ubr ^while.body11;
^b15:
    f32 %292 = s2f i32 %252 to f32;
    f32 %293 = fadd f32 %292, f32 0.5;
    f32 %294 = fmul f32 %202, f32 %293;
    ubr ^while.header8;
^while.body10:
    i32 %295 = phi [^b13, i32 1] [^while.body10, i32 %301];
    f32 %296 = load f32* %264;
    f32* %297 = getelementptr &([8 * f32]* %197)[i64 0][i32 %295];
    f32 %298 = load f32* %297;
    f32 %299 = fmul f32 0.5, f32 %298;
    f32 %300 = fadd f32 %296, f32 %299;
    store f32* %264 with f32 %300;
    i32 %301 = add i32 %295, i32 1;
    i1 %302 = scmp lt i32 %301, i32 %193;
    cbr i1 %302(prob = 0.97), ^while.body10, ^b15;
^while.body11:
    i32 %303 = phi [^b14, i32 0] [^b21, i32 %354];
    f32 %304 = load f32* %218;
    f32* %305 = getelementptr &([8 * f32]* %243)[i64 0][i32 %303];
    f32 %306 = load f32* %305;
    f32 %307 = fmul f32 %306, f32 %291;
    f32 %308 = s2f i32 %303 to f32;
    f32 %309 = fadd f32 %308, f32 0.5;
    f32 %310 = fmul f32 %202, f32 %309;
    f32 %311 = fmul f32 %310, f32 %217;
    f32 %312 = fadd f32 %311, f32 1.5708;
    i1 %313 = fcmp gt f32 %312, f32 6.28319;
    i1 %314 = fcmp lt f32 %312, f32 -6.28319;
    i1 %315 = or i1 %313, i1 %314;
    cbr i1 %315(prob = 0.75), ^if.then3, ^b17;
^while.header8:
    i32 %316 = phi [^b15, i32 1] [^b18, i32 %332];
    i1 %317 = scmp lt i32 %316, i32 %192;
    cbr i1 %317(prob = 0.97), ^while.body12, ^b16;
^if.then3:
    f32 %318 = fdiv f32 %312, f32 6.28319;
    i32 %319 = f2s f32 %318 to i32;
    f32 %320 = s2f i32 %319 to f32;
    f32 %321 = fmul f32 %320, f32 6.28319;
    f32 %322 = fsub f32 %312, f32 %321;
    ubr ^b17;
^b16:
    f32 %323 = load f32* %264;
    f32 %324 = fmul f32 %323, f32 2;
    f32 %325 = fdiv f32 %324, f32 %199;
    f32 %326 = fmul f32 %325, f32 2;
    f32 %327 = fdiv f32 %326, f32 %201;
    store f32* %264 with f32 %327;
    i32 %328 = add i32 %252, i32 1;
    ubr ^while.header6;
^b17:
    f32 %329 = phi [^while.body11, f32 %312] [^if.then3, f32 %322];
    i1 %330 = fcmp gt f32 %329, f32 3.14159;
    cbr i1 %330(prob = 0.5), ^if.then4, ^b19;
^while.body12:
    cbr i1 %214(prob = 0.97), ^indirect3, ^b18;
^if.then4:
    f32 %331 = fsub f32 %329, f32 6.28319;
    ubr ^b19;
^b18:
    i32 %332 = add i32 %316, i32 1;
    ubr ^while.header8;
^indirect3:
    [8 * f32]* %333 = getelementptr &([8 * f32]* %197)[i32 %316];
    f32 %334 = s2f i32 %316 to f32;
    f32 %335 = fmul f32 %241, f32 %334;
    f32 %336 = fadd f32 %335, f32 1.5708;
    i1 %337 = fcmp gt f32 %336, f32 6.28319;
    i1 %338 = fcmp lt f32 %336, f32 -6.28319;
    i1 %339 = or i1 %337, i1 %338;
    cbr i1 %339(prob = 0.75), ^if.then5, ^b20;
^b19:
    f32 %340 = phi [^b17, f32 %329] [^if.then4, f32 %331];
    i1 %341 = fcmp lt f32 %340, f32 -3.14159;
    cbr i1 %341(prob = 0.5), ^if.then6, ^b21;
^if.then5:
    f32 %342 = fdiv f32 %336, f32 6.28319;
    i32 %343 = f2s f32 %342 to i32;
    f32 %344 = s2f i32 %343 to f32;
    f32 %345 = fmul f32 %344, f32 6.28319;
    f32 %346 = fsub f32 %336, f32 %345;
    ubr ^b20;
^if.then6:
    f32 %347 = fadd f32 %340, f32 6.28319;
    ubr ^b21;
^b20:
    f32 %348 = phi [^indirect3, f32 %336] [^if.then5, f32 %346];
    i1 %349 = fcmp gt f32 %348, f32 3.14159;
    cbr i1 %349(prob = 0.5), ^if.then7, ^b22;
^b21:
    f32 %350 = phi [^b19, f32 %340] [^if.then6, f32 %347];
    f32 %351 = call (f32) -> f32 @my_sin_impl(f32 %350);
    f32 %352 = fmul f32 %307, f32 %351;
    f32 %353 = fadd f32 %304, f32 %352;
    store f32* %218 with f32 %353;
    i32 %354 = add i32 %303, i32 1;
    i1 %355 = scmp lt i32 %354, i32 %193;
    cbr i1 %355(prob = 0.97), ^while.body11, ^b7;
^if.then7:
    f32 %356 = fsub f32 %348, f32 6.28319;
    ubr ^b22;
^b22:
    f32 %357 = phi [^b20, f32 %348] [^if.then7, f32 %356];
    i1 %358 = fcmp lt f32 %357, f32 -3.14159;
    cbr i1 %358(prob = 0.5), ^if.then8, ^b23;
^if.then8:
    f32 %359 = fadd f32 %357, f32 6.28319;
    ubr ^b23;
^b23:
    f32 %360 = phi [^b22, f32 %357] [^if.then8, f32 %359];
    f32 %361 = call (f32) -> f32 @my_sin_impl(f32 %360);
    ubr ^while.body13;
^while.body13:
    i32 %362 = phi [^b23, i32 1] [^b26, i32 %388];
    f32 %363 = load f32* %264;
    f32* %364 = getelementptr &([8 * f32]* %333)[i64 0][i32 %362];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %365, f32 %361;
    f32 %367 = s2f i32 %362 to f32;
    f32 %368 = fmul f32 %294, f32 %367;
    f32 %369 = fadd f32 %368, f32 1.5708;
    i1 %370 = fcmp gt f32 %369, f32 6.28319;
    i1 %371 = fcmp lt f32 %369, f32 -6.28319;
    i1 %372 = or i1 %370, i1 %371;
    cbr i1 %372(prob = 0.75), ^if.then9, ^b24;
^if.then9:
    f32 %373 = fdiv f32 %369, f32 6.28319;
    i32 %374 = f2s f32 %373 to i32;
    f32 %375 = s2f i32 %374 to f32;
    f32 %376 = fmul f32 %375, f32 6.28319;
    f32 %377 = fsub f32 %369, f32 %376;
    ubr ^b24;
^b24:
    f32 %378 = phi [^while.body13, f32 %369] [^if.then9, f32 %377];
    i1 %379 = fcmp gt f32 %378, f32 3.14159;
    cbr i1 %379(prob = 0.5), ^if.then10, ^b25;
^if.then10:
    f32 %380 = fsub f32 %378, f32 6.28319;
    ubr ^b25;
^b25:
    f32 %381 = phi [^b24, f32 %378] [^if.then10, f32 %380];
    i1 %382 = fcmp lt f32 %381, f32 -3.14159;
    cbr i1 %382(prob = 0.5), ^if.then11, ^b26;
^if.then11:
    f32 %383 = fadd f32 %381, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %384 = phi [^b25, f32 %381] [^if.then11, f32 %383];
    f32 %385 = call (f32) -> f32 @my_sin_impl(f32 %384);
    f32 %386 = fmul f32 %366, f32 %385;
    f32 %387 = fadd f32 %363, f32 %386;
    store f32* %264 with f32 %387;
    i32 %388 = add i32 %362, i32 1;
    i1 %389 = scmp lt i32 %388, i32 %193;
    cbr i1 %389(prob = 0.97), ^while.body13, ^b18;
}
