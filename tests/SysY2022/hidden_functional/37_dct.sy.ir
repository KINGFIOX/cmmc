internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
  ^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
  ^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 4, f32 %5;
    f32 %7 = fmul f32 %6, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 3, f32 %5;
    f32 %10 = fsub f32 %9, f32 %8;
    ubr ^b3;
  ^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %0, i32 17;
    i1 %4 = scmp gt i32 %1, i32 17;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    [8 * [8 * f32]]* %8 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %9 = getelementptr &([8 * [8 * f32]]* %8)[i64 0][i64 0];
    f32 %10 = s2f i32 %1 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    f32 %12 = s2f i32 %0 to f32;
    f32 %13 = fdiv f32 3.14159, f32 %12;
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = scmp lt i32 %17, i32 %0;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %9)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b2;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %1;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %26 = scmp gt i32 %1, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %28 = scmp lt i32 %27, i32 %1;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b3;
  ^while.body2:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %44];
    i1 %33 = scmp lt i32 %32, i32 %0;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
  ^while.header4:
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %56];
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %8)[i64 0][i64 0][i64 0];
    i1 %39 = scmp gt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %9)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body5, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %44 = add i32 %32, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %45 = phi [^while.body3, i32 1] [^while.body5, i32 %48];
    call (i32) -> void @putch(i32 32);
    f32* %46 = getelementptr &([8 * f32]* %40)[i64 0][i32 %45];
    f32 %47 = load f32* %46;
    call (f32) -> void @putfloat(f32 %47);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %1;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b6;
  ^while.header5:
    i32 %50 = phi [^b4, i32 0] [^b9, i32 %77];
    f32 %51 = s2f i32 %50 to f32;
    f32 %52 = fadd f32 %51, f32 0.5;
    f32 %53 = fmul f32 %13, f32 %52;
    i1 %54 = scmp lt i32 %50, i32 %0;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %37)[i32 %50];
    cbr i1 %54(prob = 0.97), ^while.header6, ^while.header7;
  ^b7:
    i32 %56 = add i32 %34, i32 1;
    ubr ^while.header4;
  ^indirect1:
    f32 %57 = s2f i32 %34 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %13, f32 %58;
    f32 %60 = fmul f32 %59, f32 %20;
    f32 %61 = fadd f32 %60, f32 1.5708;
    i1 %62 = fcmp gt f32 %61, f32 6.28319;
    i1 %63 = fcmp lt f32 %61, f32 -6.28319;
    i1 %64 = or i1 %62, i1 %63;
    [8 * f32]* %65 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %64(prob = 0.75), ^if.then, ^b8;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b15, i32 %196];
    i1 %67 = scmp lt i32 %66, i32 %1;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b9;
  ^while.header7:
    i32 %68 = phi [^while.header5, i32 0] [^b12, i32 %87];
    i1 %69 = scmp lt i32 %68, i32 %0;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %61, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %61, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^indirect1, f32 %61] [^if.then, f32 %74];
    i1 %76 = fcmp gt f32 %75, f32 3.14159;
    cbr i1 %76(prob = 0.5), ^if.then1, ^b11;
  ^b9:
    i32 %77 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32 %78 = load f32* %38;
    f32 %79 = fmul f32 0.25, f32 %78;
    f32* %80 = getelementptr &([8 * f32]* %55)[i64 0][i32 %66];
    store f32* %80 with f32 %79;
    cbr i1 %39(prob = 0.97), ^super.header, ^b13;
  ^while.body7:
    [8 * f32]* %81 = getelementptr &([8 * f32]* %37)[i32 %68];
    f32* %82 = getelementptr &([8 * f32]* %81)[i64 0][i64 0];
    f32 %83 = load f32* %82;
    call (f32) -> void @putfloat(f32 %83);
    cbr i1 %26(prob = 0.97), ^while.body8, ^b12;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then1:
    f32 %84 = fsub f32 %75, f32 6.28319;
    ubr ^b11;
  ^b11:
    f32 %85 = phi [^b8, f32 %75] [^if.then1, f32 %84];
    i1 %86 = fcmp lt f32 %85, f32 -3.14159;
    cbr i1 %86(prob = 0.5), ^if.then2, ^b14;
  ^super.header:
    cbr i1 %3(prob = 0.67), ^indirect2, ^indirect3;
  ^b12:
    call (i32) -> void @putch(i32 10);
    i32 %87 = add i32 %68, i32 1;
    ubr ^while.header7;
  ^b13:
    f32 %88 = s2f i32 %66 to f32;
    f32 %89 = fadd f32 %88, f32 0.5;
    f32 %90 = fmul f32 %11, f32 %89;
    cbr i1 %26(prob = 0.97), ^super.header1, ^while.header8;
  ^while.body8:
    i32 %91 = phi [^while.body7, i32 1] [^while.body8, i32 %94];
    call (i32) -> void @putch(i32 32);
    f32* %92 = getelementptr &([8 * f32]* %81)[i64 0][i32 %91];
    f32 %93 = load f32* %92;
    call (f32) -> void @putfloat(f32 %93);
    i32 %94 = add i32 %91, i32 1;
    i1 %95 = scmp lt i32 %94, i32 %1;
    cbr i1 %95(prob = 0.97), ^while.body8, ^b12;
  ^if.then2:
    f32 %96 = fadd f32 %85, f32 6.28319;
    ubr ^b14;
  ^indirect2:
    f32 %97 = load f32* %80;
    ubr ^while.body9;
  ^b14:
    f32 %98 = phi [^b11, f32 %85] [^if.then2, f32 %96];
    f32 %99 = call (f32) -> f32 @my_sin_impl(f32 %98);
    f32 %100 = load f32* %29;
    ubr ^while.body10;
  ^indirect3:
    f32 %101 = load f32* %80;
    ubr ^indirect4;
  ^super.header1:
    cbr i1 %4(prob = 0.67), ^indirect5, ^indirect6;
  ^while.header8:
    i32 %102 = phi [^b13, i32 1] [^b16, i32 %277] [^while.body18, i32 1];
    i1 %103 = scmp lt i32 %102, i32 %0;
    cbr i1 %103(prob = 0.97), ^while.body11, ^b15;
  ^indirect4:
    f32 %104 = phi [^indirect3, f32 %101] [^while.body9, f32 %174];
    i32 %105 = phi [^indirect3, i32 1] [^while.body9, i32 %108];
    ubr ^super.header2;
  ^indirect5:
    f32 %106 = load f32* %80;
    ubr ^while.body12;
  ^while.body9:
    f32 %107 = phi [^indirect2, f32 %97] [^while.body9, f32 %174];
    i32 %108 = phi [^indirect2, i32 17] [^while.body9, i32 %175];
    i32 %109 = phi [^indirect2, i32 1] [^while.body9, i32 %108];
    [8 * f32]* %110 = getelementptr &([8 * f32]* %9)[i32 %109];
    f32* %111 = getelementptr &([8 * f32]* %110)[i64 0][i64 0];
    f32 %112 = load f32* %111;
    f32 %113 = fmul f32 0.5, f32 %112;
    f32 %114 = fadd f32 %107, f32 %113;
    f32* %115 = getelementptr &([8 * f32]* %110)[i64 1][i64 0];
    f32 %116 = load f32* %115;
    f32 %117 = fmul f32 0.5, f32 %116;
    f32 %118 = fadd f32 %114, f32 %117;
    f32* %119 = getelementptr &([8 * f32]* %110)[i64 2][i64 0];
    f32 %120 = load f32* %119;
    f32 %121 = fmul f32 0.5, f32 %120;
    f32 %122 = fadd f32 %118, f32 %121;
    f32* %123 = getelementptr &([8 * f32]* %110)[i64 3][i64 0];
    f32 %124 = load f32* %123;
    f32 %125 = fmul f32 0.5, f32 %124;
    f32 %126 = fadd f32 %122, f32 %125;
    f32* %127 = getelementptr &([8 * f32]* %110)[i64 4][i64 0];
    f32 %128 = load f32* %127;
    f32 %129 = fmul f32 0.5, f32 %128;
    f32 %130 = fadd f32 %126, f32 %129;
    f32* %131 = getelementptr &([8 * f32]* %110)[i64 5][i64 0];
    f32 %132 = load f32* %131;
    f32 %133 = fmul f32 0.5, f32 %132;
    f32 %134 = fadd f32 %130, f32 %133;
    f32* %135 = getelementptr &([8 * f32]* %110)[i64 6][i64 0];
    f32 %136 = load f32* %135;
    f32 %137 = fmul f32 0.5, f32 %136;
    f32 %138 = fadd f32 %134, f32 %137;
    f32* %139 = getelementptr &([8 * f32]* %110)[i64 7][i64 0];
    f32 %140 = load f32* %139;
    f32 %141 = fmul f32 0.5, f32 %140;
    f32 %142 = fadd f32 %138, f32 %141;
    f32* %143 = getelementptr &([8 * f32]* %110)[i64 8][i64 0];
    f32 %144 = load f32* %143;
    f32 %145 = fmul f32 0.5, f32 %144;
    f32 %146 = fadd f32 %142, f32 %145;
    f32* %147 = getelementptr &([8 * f32]* %110)[i64 9][i64 0];
    f32 %148 = load f32* %147;
    f32 %149 = fmul f32 0.5, f32 %148;
    f32 %150 = fadd f32 %146, f32 %149;
    f32* %151 = getelementptr &([8 * f32]* %110)[i64 10][i64 0];
    f32 %152 = load f32* %151;
    f32 %153 = fmul f32 0.5, f32 %152;
    f32 %154 = fadd f32 %150, f32 %153;
    f32* %155 = getelementptr &([8 * f32]* %110)[i64 11][i64 0];
    f32 %156 = load f32* %155;
    f32 %157 = fmul f32 0.5, f32 %156;
    f32 %158 = fadd f32 %154, f32 %157;
    f32* %159 = getelementptr &([8 * f32]* %110)[i64 12][i64 0];
    f32 %160 = load f32* %159;
    f32 %161 = fmul f32 0.5, f32 %160;
    f32 %162 = fadd f32 %158, f32 %161;
    f32* %163 = getelementptr &([8 * f32]* %110)[i64 13][i64 0];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 0.5, f32 %164;
    f32 %166 = fadd f32 %162, f32 %165;
    f32* %167 = getelementptr &([8 * f32]* %110)[i64 14][i64 0];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 0.5, f32 %168;
    f32 %170 = fadd f32 %166, f32 %169;
    f32* %171 = getelementptr &([8 * f32]* %110)[i64 15][i64 0];
    f32 %172 = load f32* %171;
    f32 %173 = fmul f32 0.5, f32 %172;
    f32 %174 = fadd f32 %170, f32 %173;
    store f32* %80 with f32 %174;
    i32 %175 = add i32 %108, i32 16;
    i1 %176 = scmp lt i32 %175, i32 %0;
    cbr i1 %176(prob = 0.67), ^while.body9, ^indirect4;
  ^indirect6:
    f32 %177 = load f32* %80;
    ubr ^indirect7;
  ^while.body10:
    f32 %178 = phi [^b14, f32 %100] [^b20, f32 %517];
    i32 %179 = phi [^b14, i32 0] [^b20, i32 %518];
    f32 %180 = s2f i32 %179 to f32;
    f32 %181 = fadd f32 %180, f32 0.5;
    f32 %182 = fmul f32 %11, f32 %181;
    f32 %183 = fmul f32 %182, f32 %30;
    f32 %184 = fadd f32 %183, f32 1.5708;
    i1 %185 = fcmp gt f32 %184, f32 6.28319;
    i1 %186 = fcmp lt f32 %184, f32 -6.28319;
    i1 %187 = or i1 %185, i1 %186;
    f32* %188 = getelementptr &([8 * f32]* %65)[i64 0][i32 %179];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 %99;
    cbr i1 %187(prob = 0.75), ^if.then3, ^b17;
  ^b15:
    f32 %191 = load f32* %80;
    f32 %192 = fadd f32 %191, f32 %191;
    f32 %193 = fdiv f32 %192, f32 %12;
    f32 %194 = fadd f32 %193, f32 %193;
    f32 %195 = fdiv f32 %194, f32 %10;
    store f32* %80 with f32 %195;
    i32 %196 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^while.body11:
    cbr i1 %26(prob = 0.97), ^indirect8, ^b16;
  ^if.then3:
    f32 %197 = fdiv f32 %184, f32 6.28319;
    i32 %198 = f2s f32 %197 to i32;
    f32 %199 = s2f i32 %198 to f32;
    f32 %200 = fmul f32 %199, f32 6.28319;
    f32 %201 = fsub f32 %184, f32 %200;
    ubr ^b17;
  ^indirect7:
    f32 %202 = phi [^indirect6, f32 %177] [^while.body12, f32 %270];
    i32 %203 = phi [^indirect6, i32 1] [^while.body12, i32 %205];
    ubr ^super.header4;
  ^while.body12:
    f32 %204 = phi [^indirect5, f32 %106] [^while.body12, f32 %270];
    i32 %205 = phi [^indirect5, i32 17] [^while.body12, i32 %271];
    i32 %206 = phi [^indirect5, i32 1] [^while.body12, i32 %205];
    f32* %207 = getelementptr &([8 * f32]* %9)[i64 0][i32 %206];
    f32 %208 = load f32* %207;
    f32 %209 = fmul f32 0.5, f32 %208;
    f32 %210 = fadd f32 %204, f32 %209;
    f32* %211 = getelementptr &(f32* %207)[i64 1];
    f32 %212 = load f32* %211;
    f32 %213 = fmul f32 0.5, f32 %212;
    f32 %214 = fadd f32 %210, f32 %213;
    f32* %215 = getelementptr &(f32* %207)[i64 2];
    f32 %216 = load f32* %215;
    f32 %217 = fmul f32 0.5, f32 %216;
    f32 %218 = fadd f32 %214, f32 %217;
    f32* %219 = getelementptr &(f32* %207)[i64 3];
    f32 %220 = load f32* %219;
    f32 %221 = fmul f32 0.5, f32 %220;
    f32 %222 = fadd f32 %218, f32 %221;
    f32* %223 = getelementptr &(f32* %207)[i64 4];
    f32 %224 = load f32* %223;
    f32 %225 = fmul f32 0.5, f32 %224;
    f32 %226 = fadd f32 %222, f32 %225;
    f32* %227 = getelementptr &(f32* %207)[i64 5];
    f32 %228 = load f32* %227;
    f32 %229 = fmul f32 0.5, f32 %228;
    f32 %230 = fadd f32 %226, f32 %229;
    f32* %231 = getelementptr &(f32* %207)[i64 6];
    f32 %232 = load f32* %231;
    f32 %233 = fmul f32 0.5, f32 %232;
    f32 %234 = fadd f32 %230, f32 %233;
    f32* %235 = getelementptr &(f32* %207)[i64 7];
    f32 %236 = load f32* %235;
    f32 %237 = fmul f32 0.5, f32 %236;
    f32 %238 = fadd f32 %234, f32 %237;
    f32* %239 = getelementptr &(f32* %207)[i64 8];
    f32 %240 = load f32* %239;
    f32 %241 = fmul f32 0.5, f32 %240;
    f32 %242 = fadd f32 %238, f32 %241;
    f32* %243 = getelementptr &(f32* %207)[i64 9];
    f32 %244 = load f32* %243;
    f32 %245 = fmul f32 0.5, f32 %244;
    f32 %246 = fadd f32 %242, f32 %245;
    f32* %247 = getelementptr &(f32* %207)[i64 10];
    f32 %248 = load f32* %247;
    f32 %249 = fmul f32 0.5, f32 %248;
    f32 %250 = fadd f32 %246, f32 %249;
    f32* %251 = getelementptr &(f32* %207)[i64 11];
    f32 %252 = load f32* %251;
    f32 %253 = fmul f32 0.5, f32 %252;
    f32 %254 = fadd f32 %250, f32 %253;
    f32* %255 = getelementptr &(f32* %207)[i64 12];
    f32 %256 = load f32* %255;
    f32 %257 = fmul f32 0.5, f32 %256;
    f32 %258 = fadd f32 %254, f32 %257;
    f32* %259 = getelementptr &(f32* %207)[i64 13];
    f32 %260 = load f32* %259;
    f32 %261 = fmul f32 0.5, f32 %260;
    f32 %262 = fadd f32 %258, f32 %261;
    f32* %263 = getelementptr &(f32* %207)[i64 14];
    f32 %264 = load f32* %263;
    f32 %265 = fmul f32 0.5, f32 %264;
    f32 %266 = fadd f32 %262, f32 %265;
    f32* %267 = getelementptr &(f32* %207)[i64 15];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 0.5, f32 %268;
    f32 %270 = fadd f32 %266, f32 %269;
    store f32* %80 with f32 %270;
    i32 %271 = add i32 %205, i32 16;
    i1 %272 = scmp lt i32 %271, i32 %1;
    cbr i1 %272(prob = 0.67), ^while.body12, ^indirect7;
  ^super.header2:
    f32 %273 = phi [^indirect4, f32 %104] [^while.body13, f32 %351];
    i32 %274 = phi [^indirect4, i32 %105] [^while.body13, i32 %275];
    i32 %275 = add i32 %274, i32 16;
    i1 %276 = scmp lt i32 %275, i32 %0;
    cbr i1 %276(prob = 0.67), ^while.body13, ^super.header3;
  ^b16:
    i32 %277 = add i32 %102, i32 1;
    ubr ^while.header8;
  ^b17:
    f32 %278 = phi [^while.body10, f32 %184] [^if.then3, f32 %201];
    i1 %279 = fcmp gt f32 %278, f32 3.14159;
    cbr i1 %279(prob = 0.5), ^if.then4, ^b18;
  ^indirect8:
    f32 %280 = s2f i32 %102 to f32;
    f32 %281 = fmul f32 %53, f32 %280;
    f32 %282 = fadd f32 %281, f32 1.5708;
    i1 %283 = fcmp gt f32 %282, f32 6.28319;
    i1 %284 = fcmp lt f32 %282, f32 -6.28319;
    i1 %285 = or i1 %283, i1 %284;
    [8 * f32]* %286 = getelementptr &([8 * f32]* %9)[i32 %102];
    cbr i1 %285(prob = 0.75), ^if.then5, ^b19;
  ^while.body13:
    [8 * f32]* %287 = getelementptr &([8 * f32]* %9)[i32 %274];
    f32* %288 = getelementptr &([8 * f32]* %287)[i64 0][i64 0];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 0.5, f32 %289;
    f32 %291 = fadd f32 %273, f32 %290;
    f32* %292 = getelementptr &([8 * f32]* %287)[i64 1][i64 0];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 0.5, f32 %293;
    f32 %295 = fadd f32 %291, f32 %294;
    f32* %296 = getelementptr &([8 * f32]* %287)[i64 2][i64 0];
    f32 %297 = load f32* %296;
    f32 %298 = fmul f32 0.5, f32 %297;
    f32 %299 = fadd f32 %295, f32 %298;
    f32* %300 = getelementptr &([8 * f32]* %287)[i64 3][i64 0];
    f32 %301 = load f32* %300;
    f32 %302 = fmul f32 0.5, f32 %301;
    f32 %303 = fadd f32 %299, f32 %302;
    f32* %304 = getelementptr &([8 * f32]* %287)[i64 4][i64 0];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 0.5, f32 %305;
    f32 %307 = fadd f32 %303, f32 %306;
    f32* %308 = getelementptr &([8 * f32]* %287)[i64 5][i64 0];
    f32 %309 = load f32* %308;
    f32 %310 = fmul f32 0.5, f32 %309;
    f32 %311 = fadd f32 %307, f32 %310;
    f32* %312 = getelementptr &([8 * f32]* %287)[i64 6][i64 0];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 0.5, f32 %313;
    f32 %315 = fadd f32 %311, f32 %314;
    f32* %316 = getelementptr &([8 * f32]* %287)[i64 7][i64 0];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 0.5, f32 %317;
    f32 %319 = fadd f32 %315, f32 %318;
    f32* %320 = getelementptr &([8 * f32]* %287)[i64 8][i64 0];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 0.5, f32 %321;
    f32 %323 = fadd f32 %319, f32 %322;
    f32* %324 = getelementptr &([8 * f32]* %287)[i64 9][i64 0];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 0.5, f32 %325;
    f32 %327 = fadd f32 %323, f32 %326;
    f32* %328 = getelementptr &([8 * f32]* %287)[i64 10][i64 0];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 0.5, f32 %329;
    f32 %331 = fadd f32 %327, f32 %330;
    f32* %332 = getelementptr &([8 * f32]* %287)[i64 11][i64 0];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 0.5, f32 %333;
    f32 %335 = fadd f32 %331, f32 %334;
    f32* %336 = getelementptr &([8 * f32]* %287)[i64 12][i64 0];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 0.5, f32 %337;
    f32 %339 = fadd f32 %335, f32 %338;
    f32* %340 = getelementptr &([8 * f32]* %287)[i64 13][i64 0];
    f32 %341 = load f32* %340;
    f32 %342 = fmul f32 0.5, f32 %341;
    f32 %343 = fadd f32 %339, f32 %342;
    f32* %344 = getelementptr &([8 * f32]* %287)[i64 14][i64 0];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 0.5, f32 %345;
    f32 %347 = fadd f32 %343, f32 %346;
    f32* %348 = getelementptr &([8 * f32]* %287)[i64 15][i64 0];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 0.5, f32 %349;
    f32 %351 = fadd f32 %347, f32 %350;
    store f32* %80 with f32 %351;
    ubr ^super.header2;
  ^if.then4:
    f32 %352 = fsub f32 %278, f32 6.28319;
    ubr ^b18;
  ^if.then5:
    f32 %353 = fdiv f32 %282, f32 6.28319;
    i32 %354 = f2s f32 %353 to i32;
    f32 %355 = s2f i32 %354 to f32;
    f32 %356 = fmul f32 %355, f32 6.28319;
    f32 %357 = fsub f32 %282, f32 %356;
    ubr ^b19;
  ^super.header3:
    f32 %358 = phi [^super.header2, f32 %273] [^while.body14, f32 %434];
    i32 %359 = phi [^super.header2, i32 %274] [^while.body14, i32 %360];
    i32 %360 = add i32 %359, i32 16;
    i1 %361 = scmp lt i32 %360, i32 %0;
    cbr i1 %361(prob = 0.67), ^while.body14, ^while.body16;
  ^super.header4:
    f32 %362 = phi [^indirect7, f32 %202] [^while.body15, f32 %498];
    i32 %363 = phi [^indirect7, i32 %203] [^while.body15, i32 %364];
    i32 %364 = add i32 %363, i32 16;
    i1 %365 = scmp lt i32 %364, i32 %1;
    cbr i1 %365(prob = 0.67), ^while.body15, ^super.header5;
  ^b18:
    f32 %366 = phi [^b17, f32 %278] [^if.then4, f32 %352];
    i1 %367 = fcmp lt f32 %366, f32 -3.14159;
    cbr i1 %367(prob = 0.5), ^if.then6, ^b20;
  ^b19:
    f32 %368 = phi [^indirect8, f32 %282] [^if.then5, f32 %357];
    i1 %369 = fcmp gt f32 %368, f32 3.14159;
    cbr i1 %369(prob = 0.5), ^if.then7, ^b21;
  ^while.body14:
    [8 * f32]* %370 = getelementptr &([8 * f32]* %9)[i32 %359];
    f32* %371 = getelementptr &([8 * f32]* %370)[i64 0][i64 0];
    f32 %372 = load f32* %371;
    f32 %373 = fmul f32 0.5, f32 %372;
    f32 %374 = fadd f32 %358, f32 %373;
    f32* %375 = getelementptr &([8 * f32]* %370)[i64 1][i64 0];
    f32 %376 = load f32* %375;
    f32 %377 = fmul f32 0.5, f32 %376;
    f32 %378 = fadd f32 %374, f32 %377;
    f32* %379 = getelementptr &([8 * f32]* %370)[i64 2][i64 0];
    f32 %380 = load f32* %379;
    f32 %381 = fmul f32 0.5, f32 %380;
    f32 %382 = fadd f32 %378, f32 %381;
    f32* %383 = getelementptr &([8 * f32]* %370)[i64 3][i64 0];
    f32 %384 = load f32* %383;
    f32 %385 = fmul f32 0.5, f32 %384;
    f32 %386 = fadd f32 %382, f32 %385;
    f32* %387 = getelementptr &([8 * f32]* %370)[i64 4][i64 0];
    f32 %388 = load f32* %387;
    f32 %389 = fmul f32 0.5, f32 %388;
    f32 %390 = fadd f32 %386, f32 %389;
    f32* %391 = getelementptr &([8 * f32]* %370)[i64 5][i64 0];
    f32 %392 = load f32* %391;
    f32 %393 = fmul f32 0.5, f32 %392;
    f32 %394 = fadd f32 %390, f32 %393;
    f32* %395 = getelementptr &([8 * f32]* %370)[i64 6][i64 0];
    f32 %396 = load f32* %395;
    f32 %397 = fmul f32 0.5, f32 %396;
    f32 %398 = fadd f32 %394, f32 %397;
    f32* %399 = getelementptr &([8 * f32]* %370)[i64 7][i64 0];
    f32 %400 = load f32* %399;
    f32 %401 = fmul f32 0.5, f32 %400;
    f32 %402 = fadd f32 %398, f32 %401;
    f32* %403 = getelementptr &([8 * f32]* %370)[i64 8][i64 0];
    f32 %404 = load f32* %403;
    f32 %405 = fmul f32 0.5, f32 %404;
    f32 %406 = fadd f32 %402, f32 %405;
    f32* %407 = getelementptr &([8 * f32]* %370)[i64 9][i64 0];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 0.5, f32 %408;
    f32 %410 = fadd f32 %406, f32 %409;
    f32* %411 = getelementptr &([8 * f32]* %370)[i64 10][i64 0];
    f32 %412 = load f32* %411;
    f32 %413 = fmul f32 0.5, f32 %412;
    f32 %414 = fadd f32 %410, f32 %413;
    f32* %415 = getelementptr &([8 * f32]* %370)[i64 11][i64 0];
    f32 %416 = load f32* %415;
    f32 %417 = fmul f32 0.5, f32 %416;
    f32 %418 = fadd f32 %414, f32 %417;
    f32* %419 = getelementptr &([8 * f32]* %370)[i64 12][i64 0];
    f32 %420 = load f32* %419;
    f32 %421 = fmul f32 0.5, f32 %420;
    f32 %422 = fadd f32 %418, f32 %421;
    f32* %423 = getelementptr &([8 * f32]* %370)[i64 13][i64 0];
    f32 %424 = load f32* %423;
    f32 %425 = fmul f32 0.5, f32 %424;
    f32 %426 = fadd f32 %422, f32 %425;
    f32* %427 = getelementptr &([8 * f32]* %370)[i64 14][i64 0];
    f32 %428 = load f32* %427;
    f32 %429 = fmul f32 0.5, f32 %428;
    f32 %430 = fadd f32 %426, f32 %429;
    f32* %431 = getelementptr &([8 * f32]* %370)[i64 15][i64 0];
    f32 %432 = load f32* %431;
    f32 %433 = fmul f32 0.5, f32 %432;
    f32 %434 = fadd f32 %430, f32 %433;
    store f32* %80 with f32 %434;
    ubr ^super.header3;
  ^while.body15:
    f32* %435 = getelementptr &([8 * f32]* %9)[i64 0][i32 %363];
    f32 %436 = load f32* %435;
    f32 %437 = fmul f32 0.5, f32 %436;
    f32 %438 = fadd f32 %362, f32 %437;
    f32* %439 = getelementptr &(f32* %435)[i64 1];
    f32 %440 = load f32* %439;
    f32 %441 = fmul f32 0.5, f32 %440;
    f32 %442 = fadd f32 %438, f32 %441;
    f32* %443 = getelementptr &(f32* %435)[i64 2];
    f32 %444 = load f32* %443;
    f32 %445 = fmul f32 0.5, f32 %444;
    f32 %446 = fadd f32 %442, f32 %445;
    f32* %447 = getelementptr &(f32* %435)[i64 3];
    f32 %448 = load f32* %447;
    f32 %449 = fmul f32 0.5, f32 %448;
    f32 %450 = fadd f32 %446, f32 %449;
    f32* %451 = getelementptr &(f32* %435)[i64 4];
    f32 %452 = load f32* %451;
    f32 %453 = fmul f32 0.5, f32 %452;
    f32 %454 = fadd f32 %450, f32 %453;
    f32* %455 = getelementptr &(f32* %435)[i64 5];
    f32 %456 = load f32* %455;
    f32 %457 = fmul f32 0.5, f32 %456;
    f32 %458 = fadd f32 %454, f32 %457;
    f32* %459 = getelementptr &(f32* %435)[i64 6];
    f32 %460 = load f32* %459;
    f32 %461 = fmul f32 0.5, f32 %460;
    f32 %462 = fadd f32 %458, f32 %461;
    f32* %463 = getelementptr &(f32* %435)[i64 7];
    f32 %464 = load f32* %463;
    f32 %465 = fmul f32 0.5, f32 %464;
    f32 %466 = fadd f32 %462, f32 %465;
    f32* %467 = getelementptr &(f32* %435)[i64 8];
    f32 %468 = load f32* %467;
    f32 %469 = fmul f32 0.5, f32 %468;
    f32 %470 = fadd f32 %466, f32 %469;
    f32* %471 = getelementptr &(f32* %435)[i64 9];
    f32 %472 = load f32* %471;
    f32 %473 = fmul f32 0.5, f32 %472;
    f32 %474 = fadd f32 %470, f32 %473;
    f32* %475 = getelementptr &(f32* %435)[i64 10];
    f32 %476 = load f32* %475;
    f32 %477 = fmul f32 0.5, f32 %476;
    f32 %478 = fadd f32 %474, f32 %477;
    f32* %479 = getelementptr &(f32* %435)[i64 11];
    f32 %480 = load f32* %479;
    f32 %481 = fmul f32 0.5, f32 %480;
    f32 %482 = fadd f32 %478, f32 %481;
    f32* %483 = getelementptr &(f32* %435)[i64 12];
    f32 %484 = load f32* %483;
    f32 %485 = fmul f32 0.5, f32 %484;
    f32 %486 = fadd f32 %482, f32 %485;
    f32* %487 = getelementptr &(f32* %435)[i64 13];
    f32 %488 = load f32* %487;
    f32 %489 = fmul f32 0.5, f32 %488;
    f32 %490 = fadd f32 %486, f32 %489;
    f32* %491 = getelementptr &(f32* %435)[i64 14];
    f32 %492 = load f32* %491;
    f32 %493 = fmul f32 0.5, f32 %492;
    f32 %494 = fadd f32 %490, f32 %493;
    f32* %495 = getelementptr &(f32* %435)[i64 15];
    f32 %496 = load f32* %495;
    f32 %497 = fmul f32 0.5, f32 %496;
    f32 %498 = fadd f32 %494, f32 %497;
    store f32* %80 with f32 %498;
    ubr ^super.header4;
  ^if.then6:
    f32 %499 = fadd f32 %366, f32 6.28319;
    ubr ^b20;
  ^if.then7:
    f32 %500 = fsub f32 %368, f32 6.28319;
    ubr ^b21;
  ^while.body16:
    f32 %501 = phi [^super.header3, f32 %358] [^while.body16, f32 %507];
    i32 %502 = phi [^super.header3, i32 %359] [^while.body16, i32 %508];
    [8 * f32]* %503 = getelementptr &([8 * f32]* %9)[i32 %502];
    f32* %504 = getelementptr &([8 * f32]* %503)[i64 0][i64 0];
    f32 %505 = load f32* %504;
    f32 %506 = fmul f32 0.5, f32 %505;
    f32 %507 = fadd f32 %501, f32 %506;
    store f32* %80 with f32 %507;
    i32 %508 = add i32 %502, i32 1;
    i1 %509 = scmp lt i32 %508, i32 %0;
    cbr i1 %509(prob = 0.97), ^while.body16, ^b13;
  ^super.header5:
    f32 %510 = phi [^super.header4, f32 %362] [^while.body17, f32 %585];
    i32 %511 = phi [^super.header4, i32 %363] [^while.body17, i32 %512];
    i32 %512 = add i32 %511, i32 16;
    i1 %513 = scmp lt i32 %512, i32 %1;
    cbr i1 %513(prob = 0.67), ^while.body17, ^while.body18;
  ^b20:
    f32 %514 = phi [^b18, f32 %366] [^if.then6, f32 %499];
    f32 %515 = call (f32) -> f32 @my_sin_impl(f32 %514);
    f32 %516 = fmul f32 %190, f32 %515;
    f32 %517 = fadd f32 %178, f32 %516;
    store f32* %29 with f32 %517;
    i32 %518 = add i32 %179, i32 1;
    i1 %519 = scmp lt i32 %518, i32 %1;
    cbr i1 %519(prob = 0.97), ^while.body10, ^b7;
  ^b21:
    f32 %520 = phi [^b19, f32 %368] [^if.then7, f32 %500];
    i1 %521 = fcmp lt f32 %520, f32 -3.14159;
    cbr i1 %521(prob = 0.5), ^if.then8, ^b22;
  ^while.body17:
    f32* %522 = getelementptr &([8 * f32]* %9)[i64 0][i32 %511];
    f32 %523 = load f32* %522;
    f32 %524 = fmul f32 0.5, f32 %523;
    f32 %525 = fadd f32 %510, f32 %524;
    f32* %526 = getelementptr &(f32* %522)[i64 1];
    f32 %527 = load f32* %526;
    f32 %528 = fmul f32 0.5, f32 %527;
    f32 %529 = fadd f32 %525, f32 %528;
    f32* %530 = getelementptr &(f32* %522)[i64 2];
    f32 %531 = load f32* %530;
    f32 %532 = fmul f32 0.5, f32 %531;
    f32 %533 = fadd f32 %529, f32 %532;
    f32* %534 = getelementptr &(f32* %522)[i64 3];
    f32 %535 = load f32* %534;
    f32 %536 = fmul f32 0.5, f32 %535;
    f32 %537 = fadd f32 %533, f32 %536;
    f32* %538 = getelementptr &(f32* %522)[i64 4];
    f32 %539 = load f32* %538;
    f32 %540 = fmul f32 0.5, f32 %539;
    f32 %541 = fadd f32 %537, f32 %540;
    f32* %542 = getelementptr &(f32* %522)[i64 5];
    f32 %543 = load f32* %542;
    f32 %544 = fmul f32 0.5, f32 %543;
    f32 %545 = fadd f32 %541, f32 %544;
    f32* %546 = getelementptr &(f32* %522)[i64 6];
    f32 %547 = load f32* %546;
    f32 %548 = fmul f32 0.5, f32 %547;
    f32 %549 = fadd f32 %545, f32 %548;
    f32* %550 = getelementptr &(f32* %522)[i64 7];
    f32 %551 = load f32* %550;
    f32 %552 = fmul f32 0.5, f32 %551;
    f32 %553 = fadd f32 %549, f32 %552;
    f32* %554 = getelementptr &(f32* %522)[i64 8];
    f32 %555 = load f32* %554;
    f32 %556 = fmul f32 0.5, f32 %555;
    f32 %557 = fadd f32 %553, f32 %556;
    f32* %558 = getelementptr &(f32* %522)[i64 9];
    f32 %559 = load f32* %558;
    f32 %560 = fmul f32 0.5, f32 %559;
    f32 %561 = fadd f32 %557, f32 %560;
    f32* %562 = getelementptr &(f32* %522)[i64 10];
    f32 %563 = load f32* %562;
    f32 %564 = fmul f32 0.5, f32 %563;
    f32 %565 = fadd f32 %561, f32 %564;
    f32* %566 = getelementptr &(f32* %522)[i64 11];
    f32 %567 = load f32* %566;
    f32 %568 = fmul f32 0.5, f32 %567;
    f32 %569 = fadd f32 %565, f32 %568;
    f32* %570 = getelementptr &(f32* %522)[i64 12];
    f32 %571 = load f32* %570;
    f32 %572 = fmul f32 0.5, f32 %571;
    f32 %573 = fadd f32 %569, f32 %572;
    f32* %574 = getelementptr &(f32* %522)[i64 13];
    f32 %575 = load f32* %574;
    f32 %576 = fmul f32 0.5, f32 %575;
    f32 %577 = fadd f32 %573, f32 %576;
    f32* %578 = getelementptr &(f32* %522)[i64 14];
    f32 %579 = load f32* %578;
    f32 %580 = fmul f32 0.5, f32 %579;
    f32 %581 = fadd f32 %577, f32 %580;
    f32* %582 = getelementptr &(f32* %522)[i64 15];
    f32 %583 = load f32* %582;
    f32 %584 = fmul f32 0.5, f32 %583;
    f32 %585 = fadd f32 %581, f32 %584;
    store f32* %80 with f32 %585;
    ubr ^super.header5;
  ^if.then8:
    f32 %586 = fadd f32 %520, f32 6.28319;
    ubr ^b22;
  ^b22:
    f32 %587 = phi [^b21, f32 %520] [^if.then8, f32 %586];
    f32 %588 = call (f32) -> f32 @my_sin_impl(f32 %587);
    f32 %589 = load f32* %80;
    ubr ^while.body19;
  ^while.body18:
    f32 %590 = phi [^super.header5, f32 %510] [^while.body18, f32 %595];
    i32 %591 = phi [^super.header5, i32 %511] [^while.body18, i32 %596];
    f32* %592 = getelementptr &([8 * f32]* %9)[i64 0][i32 %591];
    f32 %593 = load f32* %592;
    f32 %594 = fmul f32 0.5, f32 %593;
    f32 %595 = fadd f32 %590, f32 %594;
    store f32* %80 with f32 %595;
    i32 %596 = add i32 %591, i32 1;
    i1 %597 = scmp lt i32 %596, i32 %1;
    cbr i1 %597(prob = 0.97), ^while.body18, ^while.header8;
  ^while.body19:
    f32 %598 = phi [^b22, f32 %589] [^b25, f32 %623];
    i32 %599 = phi [^b22, i32 1] [^b25, i32 %624];
    f32 %600 = s2f i32 %599 to f32;
    f32 %601 = fmul f32 %90, f32 %600;
    f32 %602 = fadd f32 %601, f32 1.5708;
    i1 %603 = fcmp gt f32 %602, f32 6.28319;
    i1 %604 = fcmp lt f32 %602, f32 -6.28319;
    i1 %605 = or i1 %603, i1 %604;
    f32* %606 = getelementptr &([8 * f32]* %286)[i64 0][i32 %599];
    f32 %607 = load f32* %606;
    f32 %608 = fmul f32 %607, f32 %588;
    cbr i1 %605(prob = 0.75), ^if.then9, ^b23;
  ^if.then9:
    f32 %609 = fdiv f32 %602, f32 6.28319;
    i32 %610 = f2s f32 %609 to i32;
    f32 %611 = s2f i32 %610 to f32;
    f32 %612 = fmul f32 %611, f32 6.28319;
    f32 %613 = fsub f32 %602, f32 %612;
    ubr ^b23;
  ^b23:
    f32 %614 = phi [^while.body19, f32 %602] [^if.then9, f32 %613];
    i1 %615 = fcmp gt f32 %614, f32 3.14159;
    cbr i1 %615(prob = 0.5), ^if.then10, ^b24;
  ^if.then10:
    f32 %616 = fsub f32 %614, f32 6.28319;
    ubr ^b24;
  ^b24:
    f32 %617 = phi [^b23, f32 %614] [^if.then10, f32 %616];
    i1 %618 = fcmp lt f32 %617, f32 -3.14159;
    cbr i1 %618(prob = 0.5), ^if.then11, ^b25;
  ^if.then11:
    f32 %619 = fadd f32 %617, f32 6.28319;
    ubr ^b25;
  ^b25:
    f32 %620 = phi [^b24, f32 %617] [^if.then11, f32 %619];
    f32 %621 = call (f32) -> f32 @my_sin_impl(f32 %620);
    f32 %622 = fmul f32 %608, f32 %621;
    f32 %623 = fadd f32 %598, f32 %622;
    store f32* %80 with f32 %623;
    i32 %624 = add i32 %599, i32 1;
    i1 %625 = scmp lt i32 %624, i32 %1;
    cbr i1 %625(prob = 0.97), ^while.body19, ^b16;
}
