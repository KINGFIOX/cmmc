internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    f32 %1 = fneg f32 %x;
    f32 %2 = select i1 %0 ? f32 %x : f32 %1;
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %4 = fdiv f32 %x, f32 3;
    i1 %5 = fcmp gt f32 %4, f32 0;
    f32 %6 = fneg f32 %4;
    f32 %7 = select i1 %5 ? f32 %4 : f32 %6;
    i1 %8 = fcmp le f32 %7, f32 1e-06;
    cbr i1 %8(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %9 = phi [^entry, f32 %x] [^b2, f32 %15];
    ret f32 %9;
  ^b2:
    f32 %10 = phi [^b, f32 %4] [^b3, f32 %22];
    f32 %11 = fmul f32 4, f32 %10;
    f32 %12 = fmul f32 %11, f32 %10;
    f32 %13 = fmul f32 %12, f32 %10;
    f32 %14 = fmul f32 3, f32 %10;
    f32 %15 = fsub f32 %14, f32 %13;
    ubr ^b1;
  ^b3:
    f32 %16 = fdiv f32 %4, f32 3;
    f32 %17 = call (f32) -> f32 @my_sin_impl(f32 %16);
    f32 %18 = fmul f32 4, f32 %17;
    f32 %19 = fmul f32 %18, f32 %17;
    f32 %20 = fmul f32 %19, f32 %17;
    f32 %21 = fmul f32 3, f32 %17;
    f32 %22 = fsub f32 %21, f32 %20;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %0, i32 5;
    i1 %4 = scmp gt i32 %1, i32 5;
    [8 * [8 * f32]]* %5 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %7 = scmp gt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    f32 %10 = s2f i32 %0 to f32;
    f32 %11 = fdiv f32 3.14159, f32 %10;
    [8 * [8 * f32]]* %12 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0];
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i64 0];
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %16 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %31];
    i1 %18 = scmp gt i32 %0, i32 %17;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %13)[i32 %17];
    f32 %20 = s2f i32 %17 to f32;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b2;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %24];
    f32 %22 = call () -> f32 @getfloat();
    f32* %23 = getelementptr &([8 * f32]* %15)[i64 0][i32 %21];
    store f32* %23 with f32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = scmp gt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b2:
    i1 %26 = scmp gt i32 %1, i32 1;
    ubr ^while.header3;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %28 = scmp gt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b3;
  ^while.body2:
    f32* %29 = getelementptr &([8 * f32]* %19)[i64 0][i32 %27];
    store f32* %29 with f32 0;
    f32 %30 = s2f i32 %27 to f32;
    ubr ^while.header4;
  ^b3:
    i32 %31 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %32 = phi [^b2, i32 0] [^b6, i32 %44];
    i1 %33 = scmp gt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
  ^while.header4:
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %56];
    i1 %35 = scmp gt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    [8 * [8 * f32]]* %36 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %37 = getelementptr &([8 * [8 * f32]]* %36)[i64 0][i64 0];
    f32* %38 = getelementptr &([8 * [8 * f32]]* %12)[i64 0][i64 0][i64 0];
    i1 %39 = scmp gt i32 %0, i32 1;
    ubr ^while.header5;
  ^while.body3:
    [8 * f32]* %40 = getelementptr &([8 * f32]* %13)[i32 %32];
    f32* %41 = getelementptr &([8 * f32]* %40)[i64 0][i64 0];
    f32 %42 = load f32* %41;
    call (f32) -> void @putfloat(f32 %42);
    cbr i1 %26(prob = 0.97), ^while.body5, ^b6;
  ^b5:
    i32 %43 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %44 = add i32 %32, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %45 = phi [^while.body3, i32 1] [^while.body5, i32 %48];
    call (i32) -> void @putch(i32 32);
    f32* %46 = getelementptr &([8 * f32]* %40)[i64 0][i32 %45];
    f32 %47 = load f32* %46;
    call (f32) -> void @putfloat(f32 %47);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp gt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b6;
  ^while.header5:
    i32 %50 = phi [^b4, i32 0] [^b9, i32 %84];
    f32 %51 = s2f i32 %50 to f32;
    f32 %52 = fadd f32 %51, f32 0.5;
    f32 %53 = fmul f32 %11, f32 %52;
    i1 %54 = scmp gt i32 %0, i32 %50;
    [8 * f32]* %55 = getelementptr &([8 * f32]* %37)[i32 %50];
    cbr i1 %54(prob = 0.97), ^while.header6, ^while.header7;
  ^b7:
    i32 %56 = add i32 %34, i32 1;
    ubr ^while.header4;
  ^indirect1:
    f32 %57 = s2f i32 %34 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %11, f32 %58;
    f32 %60 = fmul f32 %59, f32 %20;
    f32 %61 = fadd f32 %60, f32 1.5708;
    i1 %62 = fcmp gt f32 %61, f32 6.28319;
    i1 %63 = fcmp lt f32 %61, f32 -6.28319;
    i1 %64 = or i1 %62, i1 %63;
    [8 * f32]* %65 = getelementptr &([8 * f32]* %14)[i32 %34];
    cbr i1 %64(prob = 0.5), ^if.then, ^b8;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b15, i32 %232];
    i1 %67 = scmp gt i32 %1, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b9;
  ^while.header7:
    i32 %68 = phi [^while.header5, i32 0] [^b11, i32 %104];
    i1 %69 = scmp gt i32 %0, i32 %68;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b10;
  ^if.then:
    f32 %70 = fdiv f32 %61, f32 6.28319;
    i32 %71 = f2s f32 %70 to i32;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 6.28319;
    f32 %74 = fsub f32 %61, f32 %73;
    ubr ^b8;
  ^b8:
    f32 %75 = phi [^indirect1, f32 %61] [^if.then, f32 %74];
    i1 %76 = fcmp gt f32 %75, f32 3.14159;
    f32 %77 = fsub f32 %75, f32 6.28319;
    f32 %78 = select i1 %76 ? f32 %77 : f32 %75;
    i1 %79 = fcmp lt f32 %78, f32 -3.14159;
    f32 %80 = fadd f32 %78, f32 6.28319;
    f32 %81 = select i1 %79 ? f32 %80 : f32 %78;
    f32 %82 = call (f32) -> f32 @my_sin_impl(f32 %81);
    f32 %83 = load f32* %29;
    ubr ^while.body8;
  ^b9:
    i32 %84 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body6:
    f32* %85 = getelementptr &([8 * f32]* %55)[i64 0][i32 %66];
    f32 %86 = load f32* %38;
    f32 %87 = fmul f32 0.25, f32 %86;
    store f32* %85 with f32 %87;
    cbr i1 %39(prob = 0.97), ^super.header, ^b12;
  ^while.body7:
    [8 * f32]* %88 = getelementptr &([8 * f32]* %37)[i32 %68];
    f32* %89 = getelementptr &([8 * f32]* %88)[i64 0][i64 0];
    f32 %90 = load f32* %89;
    call (f32) -> void @putfloat(f32 %90);
    cbr i1 %26(prob = 0.97), ^while.body9, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body8:
    f32 %91 = phi [^b8, f32 %83] [^b13, f32 %126];
    i32 %92 = phi [^b8, i32 0] [^b13, i32 %127];
    f32 %93 = s2f i32 %92 to f32;
    f32 %94 = fadd f32 %93, f32 0.5;
    f32 %95 = fmul f32 %9, f32 %94;
    f32 %96 = fmul f32 %95, f32 %30;
    f32 %97 = fadd f32 %96, f32 1.5708;
    i1 %98 = fcmp gt f32 %97, f32 6.28319;
    i1 %99 = fcmp lt f32 %97, f32 -6.28319;
    i1 %100 = or i1 %98, i1 %99;
    f32* %101 = getelementptr &([8 * f32]* %65)[i64 0][i32 %92];
    f32 %102 = load f32* %101;
    f32 %103 = fmul f32 %102, f32 %82;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b13;
  ^super.header:
    cbr i1 %3(prob = 0.89), ^indirect2, ^indirect3;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %104 = add i32 %68, i32 1;
    ubr ^while.header7;
  ^b12:
    cbr i1 %26(prob = 0.97), ^super.header1, ^b14;
  ^while.body9:
    i32 %105 = phi [^while.body7, i32 1] [^while.body9, i32 %108];
    call (i32) -> void @putch(i32 32);
    f32* %106 = getelementptr &([8 * f32]* %88)[i64 0][i32 %105];
    f32 %107 = load f32* %106;
    call (f32) -> void @putfloat(f32 %107);
    i32 %108 = add i32 %105, i32 1;
    i1 %109 = scmp gt i32 %1, i32 %108;
    cbr i1 %109(prob = 0.97), ^while.body9, ^b11;
  ^if.then1:
    f32 %110 = fdiv f32 %97, f32 6.28319;
    i32 %111 = f2s f32 %110 to i32;
    f32 %112 = s2f i32 %111 to f32;
    f32 %113 = fmul f32 %112, f32 6.28319;
    f32 %114 = fsub f32 %97, f32 %113;
    ubr ^b13;
  ^indirect2:
    f32 %115 = load f32* %85;
    ubr ^super.header2;
  ^indirect3:
    f32 %116 = load f32* %85;
    ubr ^while.body10;
  ^b13:
    f32 %117 = phi [^while.body8, f32 %97] [^if.then1, f32 %114];
    i1 %118 = fcmp gt f32 %117, f32 3.14159;
    f32 %119 = fsub f32 %117, f32 6.28319;
    f32 %120 = select i1 %118 ? f32 %119 : f32 %117;
    i1 %121 = fcmp lt f32 %120, f32 -3.14159;
    f32 %122 = fadd f32 %120, f32 6.28319;
    f32 %123 = select i1 %121 ? f32 %122 : f32 %120;
    f32 %124 = call (f32) -> f32 @my_sin_impl(f32 %123);
    f32 %125 = fmul f32 %103, f32 %124;
    f32 %126 = fadd f32 %91, f32 %125;
    store f32* %29 with f32 %126;
    i32 %127 = add i32 %92, i32 1;
    i1 %128 = scmp gt i32 %1, i32 %127;
    cbr i1 %128(prob = 0.97), ^while.body8, ^b7;
  ^b14:
    f32 %129 = s2f i32 %66 to f32;
    f32 %130 = fadd f32 %129, f32 0.5;
    f32 %131 = fmul f32 %9, f32 %130;
    ubr ^while.header8;
  ^super.header1:
    cbr i1 %4(prob = 0.89), ^indirect4, ^indirect5;
  ^indirect4:
    f32 %132 = load f32* %85;
    ubr ^super.header4;
  ^super.header2:
    f32 %133 = phi [^indirect2, f32 %115] [^while.body11, f32 %215];
    i32 %134 = phi [^indirect2, i32 5] [^while.body11, i32 %136];
    i32 %135 = phi [^indirect2, i32 1] [^while.body11, i32 %216];
    i32 %136 = add i32 %134, i32 16;
    i1 %137 = scmp gt i32 %0, i32 %136;
    cbr i1 %137(prob = 0.89), ^while.body11, ^super.header3;
  ^indirect5:
    f32 %138 = load f32* %85;
    ubr ^while.body13;
  ^while.body10:
    f32 %139 = phi [^indirect3, f32 %116] [^while.body10, f32 %145] [^while.body16, f32 %393];
    i32 %140 = phi [^indirect3, i32 1] [^while.body10, i32 %146] [^while.body16, i32 %375];
    [8 * f32]* %141 = getelementptr &([8 * f32]* %13)[i32 %140];
    f32* %142 = getelementptr &([8 * f32]* %141)[i64 0][i64 0];
    f32 %143 = load f32* %142;
    f32 %144 = fmul f32 0.5, f32 %143;
    f32 %145 = fadd f32 %139, f32 %144;
    store f32* %85 with f32 %145;
    i32 %146 = add i32 %140, i32 1;
    i1 %147 = scmp gt i32 %0, i32 %146;
    cbr i1 %147(prob = 0.97), ^while.body10, ^b12;
  ^while.header8:
    i32 %148 = phi [^b14, i32 1] [^b16, i32 %373];
    i1 %149 = scmp gt i32 %0, i32 %148;
    cbr i1 %149(prob = 0.97), ^while.body12, ^b15;
  ^while.body11:
    [8 * f32]* %150 = getelementptr &([8 * f32]* %13)[i32 %135];
    f32* %151 = getelementptr &([8 * f32]* %150)[i64 0][i64 0];
    f32 %152 = load f32* %151;
    f32 %153 = fmul f32 0.5, f32 %152;
    f32 %154 = fadd f32 %133, f32 %153;
    f32* %155 = getelementptr &([8 * f32]* %150)[i64 1][i64 0];
    f32 %156 = load f32* %155;
    f32 %157 = fmul f32 0.5, f32 %156;
    f32 %158 = fadd f32 %154, f32 %157;
    f32* %159 = getelementptr &([8 * f32]* %150)[i64 2][i64 0];
    f32 %160 = load f32* %159;
    f32 %161 = fmul f32 0.5, f32 %160;
    f32 %162 = fadd f32 %158, f32 %161;
    f32* %163 = getelementptr &([8 * f32]* %150)[i64 3][i64 0];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 0.5, f32 %164;
    f32 %166 = fadd f32 %162, f32 %165;
    [8 * f32]* %167 = getelementptr &([8 * f32]* %13)[i32 %134];
    f32* %168 = getelementptr &([8 * f32]* %167)[i64 0][i64 0];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 0.5, f32 %169;
    f32 %171 = fadd f32 %166, f32 %170;
    f32* %172 = getelementptr &([8 * f32]* %167)[i64 1][i64 0];
    f32 %173 = load f32* %172;
    f32 %174 = fmul f32 0.5, f32 %173;
    f32 %175 = fadd f32 %171, f32 %174;
    f32* %176 = getelementptr &([8 * f32]* %167)[i64 2][i64 0];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 0.5, f32 %177;
    f32 %179 = fadd f32 %175, f32 %178;
    f32* %180 = getelementptr &([8 * f32]* %167)[i64 3][i64 0];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 0.5, f32 %181;
    f32 %183 = fadd f32 %179, f32 %182;
    f32* %184 = getelementptr &([8 * f32]* %167)[i64 4][i64 0];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 0.5, f32 %185;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &([8 * f32]* %167)[i64 5][i64 0];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 0.5, f32 %189;
    f32 %191 = fadd f32 %187, f32 %190;
    f32* %192 = getelementptr &([8 * f32]* %167)[i64 6][i64 0];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 0.5, f32 %193;
    f32 %195 = fadd f32 %191, f32 %194;
    f32* %196 = getelementptr &([8 * f32]* %167)[i64 7][i64 0];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 0.5, f32 %197;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &([8 * f32]* %167)[i64 8][i64 0];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 0.5, f32 %201;
    f32 %203 = fadd f32 %199, f32 %202;
    f32* %204 = getelementptr &([8 * f32]* %167)[i64 9][i64 0];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 0.5, f32 %205;
    f32 %207 = fadd f32 %203, f32 %206;
    f32* %208 = getelementptr &([8 * f32]* %167)[i64 10][i64 0];
    f32 %209 = load f32* %208;
    f32 %210 = fmul f32 0.5, f32 %209;
    f32 %211 = fadd f32 %207, f32 %210;
    f32* %212 = getelementptr &([8 * f32]* %167)[i64 11][i64 0];
    f32 %213 = load f32* %212;
    f32 %214 = fmul f32 0.5, f32 %213;
    f32 %215 = fadd f32 %211, f32 %214;
    i32 %216 = add i32 %134, i32 12;
    ubr ^super.header2;
  ^super.header3:
    f32 %217 = phi [^super.header2, f32 %133] [^while.body14, f32 %306];
    i32 %218 = phi [^super.header2, i32 %134] [^while.body14, i32 %220];
    i32 %219 = phi [^super.header2, i32 %135] [^while.body14, i32 %307];
    i32 %220 = add i32 %218, i32 16;
    i1 %221 = scmp gt i32 %0, i32 %220;
    cbr i1 %221(prob = 0.89), ^while.body14, ^while.body16;
  ^super.header4:
    f32 %222 = phi [^indirect4, f32 %132] [^while.body15, f32 %371];
    i32 %223 = phi [^indirect4, i32 5] [^while.body15, i32 %225];
    i32 %224 = phi [^indirect4, i32 1] [^while.body15, i32 %372];
    i32 %225 = add i32 %223, i32 16;
    i1 %226 = scmp gt i32 %1, i32 %225;
    cbr i1 %226(prob = 0.89), ^while.body15, ^super.header5;
  ^b15:
    f32 %227 = load f32* %85;
    f32 %228 = fadd f32 %227, f32 %227;
    f32 %229 = fdiv f32 %228, f32 %10;
    f32 %230 = fadd f32 %229, f32 %229;
    f32 %231 = fdiv f32 %230, f32 %8;
    store f32* %85 with f32 %231;
    i32 %232 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^while.body12:
    cbr i1 %26(prob = 0.97), ^indirect6, ^b16;
  ^while.body13:
    f32 %233 = phi [^indirect5, f32 %138] [^while.body13, f32 %238] [^while.body18, f32 %505];
    i32 %234 = phi [^indirect5, i32 1] [^while.body13, i32 %239] [^while.body18, i32 %488];
    f32* %235 = getelementptr &([8 * f32]* %13)[i64 0][i32 %234];
    f32 %236 = load f32* %235;
    f32 %237 = fmul f32 0.5, f32 %236;
    f32 %238 = fadd f32 %233, f32 %237;
    store f32* %85 with f32 %238;
    i32 %239 = add i32 %234, i32 1;
    i1 %240 = scmp gt i32 %1, i32 %239;
    cbr i1 %240(prob = 0.97), ^while.body13, ^b14;
  ^while.body14:
    [8 * f32]* %241 = getelementptr &([8 * f32]* %13)[i32 %219];
    f32* %242 = getelementptr &([8 * f32]* %241)[i64 0][i64 0];
    f32 %243 = load f32* %242;
    f32 %244 = fmul f32 0.5, f32 %243;
    f32 %245 = fadd f32 %217, f32 %244;
    f32* %246 = getelementptr &([8 * f32]* %241)[i64 1][i64 0];
    f32 %247 = load f32* %246;
    f32 %248 = fmul f32 0.5, f32 %247;
    f32 %249 = fadd f32 %245, f32 %248;
    f32* %250 = getelementptr &([8 * f32]* %241)[i64 2][i64 0];
    f32 %251 = load f32* %250;
    f32 %252 = fmul f32 0.5, f32 %251;
    f32 %253 = fadd f32 %249, f32 %252;
    f32* %254 = getelementptr &([8 * f32]* %241)[i64 3][i64 0];
    f32 %255 = load f32* %254;
    f32 %256 = fmul f32 0.5, f32 %255;
    f32 %257 = fadd f32 %253, f32 %256;
    [8 * f32]* %258 = getelementptr &([8 * f32]* %13)[i32 %218];
    f32* %259 = getelementptr &([8 * f32]* %258)[i64 0][i64 0];
    f32 %260 = load f32* %259;
    f32 %261 = fmul f32 0.5, f32 %260;
    f32 %262 = fadd f32 %257, f32 %261;
    f32* %263 = getelementptr &([8 * f32]* %258)[i64 1][i64 0];
    f32 %264 = load f32* %263;
    f32 %265 = fmul f32 0.5, f32 %264;
    f32 %266 = fadd f32 %262, f32 %265;
    f32* %267 = getelementptr &([8 * f32]* %258)[i64 2][i64 0];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 0.5, f32 %268;
    f32 %270 = fadd f32 %266, f32 %269;
    f32* %271 = getelementptr &([8 * f32]* %258)[i64 3][i64 0];
    f32 %272 = load f32* %271;
    f32 %273 = fmul f32 0.5, f32 %272;
    f32 %274 = fadd f32 %270, f32 %273;
    f32* %275 = getelementptr &([8 * f32]* %258)[i64 4][i64 0];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 0.5, f32 %276;
    f32 %278 = fadd f32 %274, f32 %277;
    f32* %279 = getelementptr &([8 * f32]* %258)[i64 5][i64 0];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 0.5, f32 %280;
    f32 %282 = fadd f32 %278, f32 %281;
    f32* %283 = getelementptr &([8 * f32]* %258)[i64 6][i64 0];
    f32 %284 = load f32* %283;
    f32 %285 = fmul f32 0.5, f32 %284;
    f32 %286 = fadd f32 %282, f32 %285;
    f32* %287 = getelementptr &([8 * f32]* %258)[i64 7][i64 0];
    f32 %288 = load f32* %287;
    f32 %289 = fmul f32 0.5, f32 %288;
    f32 %290 = fadd f32 %286, f32 %289;
    f32* %291 = getelementptr &([8 * f32]* %258)[i64 8][i64 0];
    f32 %292 = load f32* %291;
    f32 %293 = fmul f32 0.5, f32 %292;
    f32 %294 = fadd f32 %290, f32 %293;
    f32* %295 = getelementptr &([8 * f32]* %258)[i64 9][i64 0];
    f32 %296 = load f32* %295;
    f32 %297 = fmul f32 0.5, f32 %296;
    f32 %298 = fadd f32 %294, f32 %297;
    f32* %299 = getelementptr &([8 * f32]* %258)[i64 10][i64 0];
    f32 %300 = load f32* %299;
    f32 %301 = fmul f32 0.5, f32 %300;
    f32 %302 = fadd f32 %298, f32 %301;
    f32* %303 = getelementptr &([8 * f32]* %258)[i64 11][i64 0];
    f32 %304 = load f32* %303;
    f32 %305 = fmul f32 0.5, f32 %304;
    f32 %306 = fadd f32 %302, f32 %305;
    i32 %307 = add i32 %218, i32 12;
    ubr ^super.header3;
  ^while.body15:
    f32* %308 = getelementptr &([8 * f32]* %13)[i64 0][i32 %224];
    f32 %309 = load f32* %308;
    f32 %310 = fmul f32 0.5, f32 %309;
    f32 %311 = fadd f32 %222, f32 %310;
    f32* %312 = getelementptr &(f32* %308)[i64 1];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 0.5, f32 %313;
    f32 %315 = fadd f32 %311, f32 %314;
    f32* %316 = getelementptr &(f32* %308)[i64 2];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 0.5, f32 %317;
    f32 %319 = fadd f32 %315, f32 %318;
    f32* %320 = getelementptr &(f32* %308)[i64 3];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 0.5, f32 %321;
    f32 %323 = fadd f32 %319, f32 %322;
    f32* %324 = getelementptr &([8 * f32]* %13)[i64 0][i32 %223];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 0.5, f32 %325;
    f32 %327 = fadd f32 %323, f32 %326;
    f32* %328 = getelementptr &(f32* %324)[i64 1];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 0.5, f32 %329;
    f32 %331 = fadd f32 %327, f32 %330;
    f32* %332 = getelementptr &(f32* %324)[i64 2];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 0.5, f32 %333;
    f32 %335 = fadd f32 %331, f32 %334;
    f32* %336 = getelementptr &(f32* %324)[i64 3];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 0.5, f32 %337;
    f32 %339 = fadd f32 %335, f32 %338;
    f32* %340 = getelementptr &(f32* %324)[i64 4];
    f32 %341 = load f32* %340;
    f32 %342 = fmul f32 0.5, f32 %341;
    f32 %343 = fadd f32 %339, f32 %342;
    f32* %344 = getelementptr &(f32* %324)[i64 5];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 0.5, f32 %345;
    f32 %347 = fadd f32 %343, f32 %346;
    f32* %348 = getelementptr &(f32* %324)[i64 6];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 0.5, f32 %349;
    f32 %351 = fadd f32 %347, f32 %350;
    f32* %352 = getelementptr &(f32* %324)[i64 7];
    f32 %353 = load f32* %352;
    f32 %354 = fmul f32 0.5, f32 %353;
    f32 %355 = fadd f32 %351, f32 %354;
    f32* %356 = getelementptr &(f32* %324)[i64 8];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 0.5, f32 %357;
    f32 %359 = fadd f32 %355, f32 %358;
    f32* %360 = getelementptr &(f32* %324)[i64 9];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 0.5, f32 %361;
    f32 %363 = fadd f32 %359, f32 %362;
    f32* %364 = getelementptr &(f32* %324)[i64 10];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 0.5, f32 %365;
    f32 %367 = fadd f32 %363, f32 %366;
    f32* %368 = getelementptr &(f32* %324)[i64 11];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 0.5, f32 %369;
    f32 %371 = fadd f32 %367, f32 %370;
    i32 %372 = add i32 %223, i32 12;
    ubr ^super.header4;
  ^b16:
    i32 %373 = add i32 %148, i32 1;
    ubr ^while.header8;
  ^while.body16:
    f32 %374 = phi [^super.header3, f32 %217] [^while.body16, f32 %393];
    i32 %375 = phi [^super.header3, i32 %218] [^while.body16, i32 %394];
    i32 %376 = phi [^super.header3, i32 %219] [^while.body16, i32 %375];
    [8 * f32]* %377 = getelementptr &([8 * f32]* %13)[i32 %376];
    f32* %378 = getelementptr &([8 * f32]* %377)[i64 0][i64 0];
    f32 %379 = load f32* %378;
    f32 %380 = fmul f32 0.5, f32 %379;
    f32 %381 = fadd f32 %374, f32 %380;
    f32* %382 = getelementptr &([8 * f32]* %377)[i64 1][i64 0];
    f32 %383 = load f32* %382;
    f32 %384 = fmul f32 0.5, f32 %383;
    f32 %385 = fadd f32 %381, f32 %384;
    f32* %386 = getelementptr &([8 * f32]* %377)[i64 2][i64 0];
    f32 %387 = load f32* %386;
    f32 %388 = fmul f32 0.5, f32 %387;
    f32 %389 = fadd f32 %385, f32 %388;
    f32* %390 = getelementptr &([8 * f32]* %377)[i64 3][i64 0];
    f32 %391 = load f32* %390;
    f32 %392 = fmul f32 0.5, f32 %391;
    f32 %393 = fadd f32 %389, f32 %392;
    i32 %394 = add i32 %375, i32 4;
    i1 %395 = scmp gt i32 %0, i32 %394;
    cbr i1 %395(prob = 0.89), ^while.body16, ^while.body10;
  ^super.header5:
    f32 %396 = phi [^super.header4, f32 %222] [^while.body17, f32 %471];
    i32 %397 = phi [^super.header4, i32 %223] [^while.body17, i32 %399];
    i32 %398 = phi [^super.header4, i32 %224] [^while.body17, i32 %472];
    i32 %399 = add i32 %397, i32 16;
    i1 %400 = scmp gt i32 %1, i32 %399;
    cbr i1 %400(prob = 0.89), ^while.body17, ^while.body18;
  ^indirect6:
    f32 %401 = s2f i32 %148 to f32;
    f32 %402 = fmul f32 %53, f32 %401;
    f32 %403 = fadd f32 %402, f32 1.5708;
    i1 %404 = fcmp gt f32 %403, f32 6.28319;
    i1 %405 = fcmp lt f32 %403, f32 -6.28319;
    i1 %406 = or i1 %404, i1 %405;
    [8 * f32]* %407 = getelementptr &([8 * f32]* %13)[i32 %148];
    cbr i1 %406(prob = 0.5), ^if.then2, ^b17;
  ^while.body17:
    f32* %408 = getelementptr &([8 * f32]* %13)[i64 0][i32 %398];
    f32 %409 = load f32* %408;
    f32 %410 = fmul f32 0.5, f32 %409;
    f32 %411 = fadd f32 %396, f32 %410;
    f32* %412 = getelementptr &(f32* %408)[i64 1];
    f32 %413 = load f32* %412;
    f32 %414 = fmul f32 0.5, f32 %413;
    f32 %415 = fadd f32 %411, f32 %414;
    f32* %416 = getelementptr &(f32* %408)[i64 2];
    f32 %417 = load f32* %416;
    f32 %418 = fmul f32 0.5, f32 %417;
    f32 %419 = fadd f32 %415, f32 %418;
    f32* %420 = getelementptr &(f32* %408)[i64 3];
    f32 %421 = load f32* %420;
    f32 %422 = fmul f32 0.5, f32 %421;
    f32 %423 = fadd f32 %419, f32 %422;
    f32* %424 = getelementptr &([8 * f32]* %13)[i64 0][i32 %397];
    f32 %425 = load f32* %424;
    f32 %426 = fmul f32 0.5, f32 %425;
    f32 %427 = fadd f32 %423, f32 %426;
    f32* %428 = getelementptr &(f32* %424)[i64 1];
    f32 %429 = load f32* %428;
    f32 %430 = fmul f32 0.5, f32 %429;
    f32 %431 = fadd f32 %427, f32 %430;
    f32* %432 = getelementptr &(f32* %424)[i64 2];
    f32 %433 = load f32* %432;
    f32 %434 = fmul f32 0.5, f32 %433;
    f32 %435 = fadd f32 %431, f32 %434;
    f32* %436 = getelementptr &(f32* %424)[i64 3];
    f32 %437 = load f32* %436;
    f32 %438 = fmul f32 0.5, f32 %437;
    f32 %439 = fadd f32 %435, f32 %438;
    f32* %440 = getelementptr &(f32* %424)[i64 4];
    f32 %441 = load f32* %440;
    f32 %442 = fmul f32 0.5, f32 %441;
    f32 %443 = fadd f32 %439, f32 %442;
    f32* %444 = getelementptr &(f32* %424)[i64 5];
    f32 %445 = load f32* %444;
    f32 %446 = fmul f32 0.5, f32 %445;
    f32 %447 = fadd f32 %443, f32 %446;
    f32* %448 = getelementptr &(f32* %424)[i64 6];
    f32 %449 = load f32* %448;
    f32 %450 = fmul f32 0.5, f32 %449;
    f32 %451 = fadd f32 %447, f32 %450;
    f32* %452 = getelementptr &(f32* %424)[i64 7];
    f32 %453 = load f32* %452;
    f32 %454 = fmul f32 0.5, f32 %453;
    f32 %455 = fadd f32 %451, f32 %454;
    f32* %456 = getelementptr &(f32* %424)[i64 8];
    f32 %457 = load f32* %456;
    f32 %458 = fmul f32 0.5, f32 %457;
    f32 %459 = fadd f32 %455, f32 %458;
    f32* %460 = getelementptr &(f32* %424)[i64 9];
    f32 %461 = load f32* %460;
    f32 %462 = fmul f32 0.5, f32 %461;
    f32 %463 = fadd f32 %459, f32 %462;
    f32* %464 = getelementptr &(f32* %424)[i64 10];
    f32 %465 = load f32* %464;
    f32 %466 = fmul f32 0.5, f32 %465;
    f32 %467 = fadd f32 %463, f32 %466;
    f32* %468 = getelementptr &(f32* %424)[i64 11];
    f32 %469 = load f32* %468;
    f32 %470 = fmul f32 0.5, f32 %469;
    f32 %471 = fadd f32 %467, f32 %470;
    i32 %472 = add i32 %397, i32 12;
    ubr ^super.header5;
  ^if.then2:
    f32 %473 = fdiv f32 %403, f32 6.28319;
    i32 %474 = f2s f32 %473 to i32;
    f32 %475 = s2f i32 %474 to f32;
    f32 %476 = fmul f32 %475, f32 6.28319;
    f32 %477 = fsub f32 %403, f32 %476;
    ubr ^b17;
  ^b17:
    f32 %478 = phi [^indirect6, f32 %403] [^if.then2, f32 %477];
    i1 %479 = fcmp gt f32 %478, f32 3.14159;
    f32 %480 = fsub f32 %478, f32 6.28319;
    f32 %481 = select i1 %479 ? f32 %480 : f32 %478;
    i1 %482 = fcmp lt f32 %481, f32 -3.14159;
    f32 %483 = fadd f32 %481, f32 6.28319;
    f32 %484 = select i1 %482 ? f32 %483 : f32 %481;
    f32 %485 = call (f32) -> f32 @my_sin_impl(f32 %484);
    f32 %486 = load f32* %85;
    ubr ^while.body19;
  ^while.body18:
    f32 %487 = phi [^super.header5, f32 %396] [^while.body18, f32 %505];
    i32 %488 = phi [^super.header5, i32 %397] [^while.body18, i32 %506];
    i32 %489 = phi [^super.header5, i32 %398] [^while.body18, i32 %488];
    f32* %490 = getelementptr &([8 * f32]* %13)[i64 0][i32 %489];
    f32 %491 = load f32* %490;
    f32 %492 = fmul f32 0.5, f32 %491;
    f32 %493 = fadd f32 %487, f32 %492;
    f32* %494 = getelementptr &(f32* %490)[i64 1];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 0.5, f32 %495;
    f32 %497 = fadd f32 %493, f32 %496;
    f32* %498 = getelementptr &(f32* %490)[i64 2];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 0.5, f32 %499;
    f32 %501 = fadd f32 %497, f32 %500;
    f32* %502 = getelementptr &(f32* %490)[i64 3];
    f32 %503 = load f32* %502;
    f32 %504 = fmul f32 0.5, f32 %503;
    f32 %505 = fadd f32 %501, f32 %504;
    i32 %506 = add i32 %488, i32 4;
    i1 %507 = scmp gt i32 %1, i32 %506;
    cbr i1 %507(prob = 0.89), ^while.body18, ^while.body13;
  ^while.body19:
    f32 %508 = phi [^b17, f32 %486] [^b18, f32 %533];
    i32 %509 = phi [^b17, i32 1] [^b18, i32 %534];
    f32 %510 = s2f i32 %509 to f32;
    f32 %511 = fmul f32 %131, f32 %510;
    f32 %512 = fadd f32 %511, f32 1.5708;
    i1 %513 = fcmp gt f32 %512, f32 6.28319;
    i1 %514 = fcmp lt f32 %512, f32 -6.28319;
    i1 %515 = or i1 %513, i1 %514;
    f32* %516 = getelementptr &([8 * f32]* %407)[i64 0][i32 %509];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 %517, f32 %485;
    cbr i1 %515(prob = 0.5), ^if.then3, ^b18;
  ^if.then3:
    f32 %519 = fdiv f32 %512, f32 6.28319;
    i32 %520 = f2s f32 %519 to i32;
    f32 %521 = s2f i32 %520 to f32;
    f32 %522 = fmul f32 %521, f32 6.28319;
    f32 %523 = fsub f32 %512, f32 %522;
    ubr ^b18;
  ^b18:
    f32 %524 = phi [^while.body19, f32 %512] [^if.then3, f32 %523];
    i1 %525 = fcmp gt f32 %524, f32 3.14159;
    f32 %526 = fsub f32 %524, f32 6.28319;
    f32 %527 = select i1 %525 ? f32 %526 : f32 %524;
    i1 %528 = fcmp lt f32 %527, f32 -3.14159;
    f32 %529 = fadd f32 %527, f32 6.28319;
    f32 %530 = select i1 %528 ? f32 %529 : f32 %527;
    f32 %531 = call (f32) -> f32 @my_sin_impl(f32 %530);
    f32 %532 = fmul f32 %518, f32 %531;
    f32 %533 = fadd f32 %508, f32 %532;
    store f32* %85 with f32 %533;
    i32 %534 = add i32 %509, i32 1;
    i1 %535 = scmp gt i32 %1, i32 %534;
    cbr i1 %535(prob = 0.97), ^while.body19, ^b16;
}
