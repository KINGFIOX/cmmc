internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal [8 * [8 * f32]]* @test_block, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_dct, align 8 { Flexible };
internal [8 * [8 * f32]]* @test_idct, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    [8 * [8 * f32]]* %3 = ptrcast [8 * [8 * f32]]* @test_block to [8 * [8 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.984615), ^while.header1, ^b;
  ^b:
    f32 %6 = s2f i32 %0 to f32;
    f32 %7 = fdiv f32 3.14159, f32 %6;
    f32 %8 = s2f i32 %1 to f32;
    f32 %9 = fdiv f32 3.14159, f32 %8;
    [8 * [8 * f32]]* %10 = ptrcast [8 * [8 * f32]]* @test_dct to [8 * [8 * f32]]*;
    [8 * f32]* %11 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0];
    [8 * f32]* %12 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %2(prob = 0.984615), ^prebody, ^b1;
  ^prebody:
    [8 * f32]* %13 = getelementptr &([8 * [8 * f32]]* %3)[i64 0][i32 %4];
    ubr ^while.body;
  ^b1:
    i32 %14 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %15 = phi [^b, i32 0] [^b3, i32 %29];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    [8 * f32]* %17 = getelementptr &([8 * f32]* %11)[i32 %15];
    f32 %18 = s2f i32 %15 to f32;
    cbr i1 %16(prob = 0.984615), ^while.header3, ^b2;
  ^while.body:
    i32 %19 = phi [^prebody, i32 0] [^while.body, i32 %22];
    f32 %20 = call () -> f32 @getfloat();
    f32* %21 = getelementptr &([8 * f32]* %13)[i64 0][i32 %19];
    store f32* %21 with f32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body, ^b1;
  ^b2:
    i1 %24 = icmp sgt i32 %1, i32 1;
    ubr ^while.header4;
  ^while.header3:
    i32 %25 = phi [^while.header2, i32 0] [^b5, i32 %49];
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body1, ^b3;
  ^while.body1:
    f32* %27 = getelementptr &([8 * f32]* %17)[i64 0][i32 %25];
    store f32* %27 with f32 0;
    f32 %28 = s2f i32 %25 to f32;
    ubr ^while.header5;
  ^b3:
    i32 %29 = add i32 %15, i32 1;
    ubr ^while.header2;
  ^while.header4:
    i32 %30 = phi [^b2, i32 0] [^b6, i32 %50];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body2, ^b4;
  ^while.header5:
    i32 %32 = phi [^while.body1, i32 0] [^b7, i32 %62];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.header6, ^b5;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %34 = add i32 %0, i32 -4;
    i1 %35 = icmp sgt i32 %34, i32 17;
    i32 %36 = add i32 %1, i32 -4;
    i1 %37 = icmp sgt i32 %36, i32 17;
    [8 * [8 * f32]]* %38 = ptrcast [8 * [8 * f32]]* @test_idct to [8 * [8 * f32]]*;
    [8 * f32]* %39 = getelementptr &([8 * [8 * f32]]* %38)[i64 0][i64 0];
    f32* %40 = getelementptr &([8 * [8 * f32]]* %10)[i64 0][i64 0][i64 0];
    i1 %41 = icmp sgt i32 %0, i32 1;
    i1 %42 = icmp sgt i32 %0, i32 5;
    i1 %43 = icmp sgt i32 %1, i32 5;
    i32 %44 = add i32 %0, i32 -20;
    i32 %45 = add i32 %1, i32 -20;
    ubr ^while.header7;
  ^while.body2:
    [8 * f32]* %46 = getelementptr &([8 * f32]* %11)[i32 %30];
    f32* %47 = getelementptr &([8 * f32]* %46)[i64 0][i64 0];
    f32 %48 = load f32* %47;
    call (f32) -> void @putfloat(f32 %48);
    cbr i1 %24(prob = 0.984615), ^while.body3, ^b6;
  ^b5:
    i32 %49 = add i32 %25, i32 1;
    ubr ^while.header3;
  ^while.header6:
    cbr i1 %2(prob = 0.984615), ^prebody1, ^b7;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %50 = add i32 %30, i32 1;
    ubr ^while.header4;
  ^while.body3:
    i32 %51 = phi [^while.body2, i32 1] [^while.body3, i32 %54];
    call (i32) -> void @putch(i32 32);
    f32* %52 = getelementptr &([8 * f32]* %46)[i64 0][i32 %51];
    f32 %53 = load f32* %52;
    call (f32) -> void @putfloat(f32 %53);
    i32 %54 = add i32 %51, i32 1;
    i1 %55 = icmp sgt i32 %1, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body3, ^b6;
  ^while.header7:
    i32 %56 = phi [^b4, i32 0] [^b9, i32 %90];
    f32 %57 = s2f i32 %56 to f32;
    f32 %58 = fadd f32 %57, f32 0.5;
    f32 %59 = fmul f32 %7, f32 %58;
    i1 %60 = icmp sgt i32 %0, i32 %56;
    [8 * f32]* %61 = getelementptr &([8 * f32]* %39)[i32 %56];
    cbr i1 %60(prob = 0.984615), ^while.header8, ^while.header9;
  ^b7:
    i32 %62 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^prebody1:
    f32 %63 = s2f i32 %32 to f32;
    f32 %64 = fadd f32 %63, f32 0.5;
    f32 %65 = fmul f32 %7, f32 %64;
    f32 %66 = fmul f32 %65, f32 %18;
    f32 %67 = fadd f32 %66, f32 1.5708;
    i1 %68 = fcmp ogt f32 %67, f32 6.28319;
    i1 %69 = fcmp olt f32 %67, f32 -6.28319;
    i1 %70 = or i1 %68, i1 %69;
    [8 * f32]* %71 = getelementptr &([8 * f32]* %12)[i32 %32];
    cbr i1 %70(prob = 0.5), ^if.then, ^b8;
  ^while.header8:
    i32 %72 = phi [^while.header7, i32 0] [^b13, i32 %225];
    i1 %73 = icmp sgt i32 %1, i32 %72;
    cbr i1 %73(prob = 0.984615), ^while.body4, ^b9;
  ^while.header9:
    i32 %74 = phi [^while.header7, i32 0] [^b11, i32 %113];
    i1 %75 = icmp sgt i32 %0, i32 %74;
    cbr i1 %75(prob = 0.984615), ^while.body5, ^b10;
  ^if.then:
    f32 %76 = fdiv f32 %67, f32 6.28319;
    i32 %77 = f2s f32 %76 to i32;
    f32 %78 = s2f i32 %77 to f32;
    f32 %79 = fmul f32 %78, f32 6.28319;
    f32 %80 = fsub f32 %67, f32 %79;
    ubr ^b8;
  ^b8:
    f32 %81 = phi [^prebody1, f32 %67] [^if.then, f32 %80];
    i1 %82 = fcmp ogt f32 %81, f32 3.14159;
    f32 %83 = fsub f32 %81, f32 6.28319;
    f32 %84 = select i1 %82 ? f32 %83 : f32 %81;
    i1 %85 = fcmp olt f32 %84, f32 -3.14159;
    f32 %86 = fadd f32 %84, f32 6.28319;
    f32 %87 = select i1 %85 ? f32 %86 : f32 %84;
    f32 %88 = call (f32) -> f32 @my_sin_impl(f32 %87);
    f32 %89 = load f32* %27;
    ubr ^while.body6;
  ^b9:
    i32 %90 = add i32 %56, i32 1;
    ubr ^while.header7;
  ^while.body4:
    f32* %91 = getelementptr &([8 * f32]* %61)[i64 0][i32 %72];
    f32 %92 = load f32* %40;
    f32 %93 = fmul f32 %92, f32 0.25;
    store f32* %91 with f32 %93;
    f32 %94 = s2f i32 %72 to f32;
    f32 %95 = fadd f32 %94, f32 0.5;
    f32 %96 = fmul f32 %9, f32 %95;
    cbr i1 %41(prob = 0.984615), ^super.header, ^while.header10;
  ^while.body5:
    [8 * f32]* %97 = getelementptr &([8 * f32]* %39)[i32 %74];
    f32* %98 = getelementptr &([8 * f32]* %97)[i64 0][i64 0];
    f32 %99 = load f32* %98;
    call (f32) -> void @putfloat(f32 %99);
    cbr i1 %24(prob = 0.984615), ^while.body7, ^b11;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    f32 %100 = phi [^b8, f32 %89] [^b12, f32 %135];
    i32 %101 = phi [^b8, i32 0] [^b12, i32 %136];
    f32 %102 = s2f i32 %101 to f32;
    f32 %103 = fadd f32 %102, f32 0.5;
    f32 %104 = fmul f32 %9, f32 %103;
    f32 %105 = fmul f32 %104, f32 %28;
    f32 %106 = fadd f32 %105, f32 1.5708;
    i1 %107 = fcmp ogt f32 %106, f32 6.28319;
    i1 %108 = fcmp olt f32 %106, f32 -6.28319;
    i1 %109 = or i1 %107, i1 %108;
    f32* %110 = getelementptr &([8 * f32]* %71)[i64 0][i32 %101];
    f32 %111 = load f32* %110;
    f32 %112 = fmul f32 %111, f32 %88;
    cbr i1 %109(prob = 0.5), ^if.then1, ^b12;
  ^super.header:
    cbr i1 %42(prob = 0.941176), ^prebody2, ^indirect;
  ^b11:
    call (i32) -> void @putch(i32 10);
    i32 %113 = add i32 %74, i32 1;
    ubr ^while.header9;
  ^while.header10:
    cbr i1 %24(prob = 0.984615), ^super.header1, ^while.header11;
  ^while.body7:
    i32 %114 = phi [^while.body5, i32 1] [^while.body7, i32 %117];
    call (i32) -> void @putch(i32 32);
    f32* %115 = getelementptr &([8 * f32]* %97)[i64 0][i32 %114];
    f32 %116 = load f32* %115;
    call (f32) -> void @putfloat(f32 %116);
    i32 %117 = add i32 %114, i32 1;
    i1 %118 = icmp sgt i32 %1, i32 %117;
    cbr i1 %118(prob = 0.984615), ^while.body7, ^b11;
  ^if.then1:
    f32 %119 = fdiv f32 %106, f32 6.28319;
    i32 %120 = f2s f32 %119 to i32;
    f32 %121 = s2f i32 %120 to f32;
    f32 %122 = fmul f32 %121, f32 6.28319;
    f32 %123 = fsub f32 %106, f32 %122;
    ubr ^b12;
  ^indirect:
    f32 %124 = load f32* %91;
    ubr ^while.body9;
  ^prebody2:
    f32 %125 = load f32* %91;
    cbr i1 %35(prob = 0.941176), ^while.body8, ^while.body10;
  ^b12:
    f32 %126 = phi [^while.body6, f32 %106] [^if.then1, f32 %123];
    i1 %127 = fcmp ogt f32 %126, f32 3.14159;
    f32 %128 = fsub f32 %126, f32 6.28319;
    f32 %129 = select i1 %127 ? f32 %128 : f32 %126;
    i1 %130 = fcmp olt f32 %129, f32 -3.14159;
    f32 %131 = fadd f32 %129, f32 6.28319;
    f32 %132 = select i1 %130 ? f32 %131 : f32 %129;
    f32 %133 = call (f32) -> f32 @my_sin_impl(f32 %132);
    f32 %134 = fmul f32 %112, f32 %133;
    f32 %135 = fadd f32 %100, f32 %134;
    store f32* %27 with f32 %135;
    i32 %136 = add i32 %101, i32 1;
    i1 %137 = icmp sgt i32 %1, i32 %136;
    cbr i1 %137(prob = 0.984615), ^while.body6, ^b7;
  ^super.header1:
    cbr i1 %43(prob = 0.941176), ^prebody3, ^indirect1;
  ^while.header11:
    i32 %138 = phi [^while.header10, i32 1] [^b14, i32 %247] [^while.body12, i32 1];
    i1 %139 = icmp sgt i32 %0, i32 %138;
    cbr i1 %139(prob = 0.984615), ^while.header12, ^b13;
  ^indirect1:
    f32 %140 = load f32* %91;
    ubr ^while.body12;
  ^while.body8:
    i32 %141 = phi [^prebody2, i32 1] [^while.body8, i32 %208];
    f32 %142 = phi [^prebody2, f32 %125] [^while.body8, f32 %207];
    [8 * f32]* %143 = getelementptr &([8 * f32]* %11)[i32 %141];
    f32* %144 = getelementptr &([8 * f32]* %143)[i64 0][i64 0];
    f32 %145 = load f32* %144;
    f32 %146 = fmul f32 %145, f32 0.5;
    f32 %147 = fadd f32 %142, f32 %146;
    f32* %148 = getelementptr &([8 * f32]* %143)[i64 1][i64 0];
    f32 %149 = load f32* %148;
    f32 %150 = fmul f32 %149, f32 0.5;
    f32 %151 = fadd f32 %147, f32 %150;
    f32* %152 = getelementptr &([8 * f32]* %143)[i64 2][i64 0];
    f32 %153 = load f32* %152;
    f32 %154 = fmul f32 %153, f32 0.5;
    f32 %155 = fadd f32 %151, f32 %154;
    f32* %156 = getelementptr &([8 * f32]* %143)[i64 3][i64 0];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %157, f32 0.5;
    f32 %159 = fadd f32 %155, f32 %158;
    f32* %160 = getelementptr &([8 * f32]* %143)[i64 4][i64 0];
    f32 %161 = load f32* %160;
    f32 %162 = fmul f32 %161, f32 0.5;
    f32 %163 = fadd f32 %159, f32 %162;
    f32* %164 = getelementptr &([8 * f32]* %143)[i64 5][i64 0];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 0.5;
    f32 %167 = fadd f32 %163, f32 %166;
    f32* %168 = getelementptr &([8 * f32]* %143)[i64 6][i64 0];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %169, f32 0.5;
    f32 %171 = fadd f32 %167, f32 %170;
    f32* %172 = getelementptr &([8 * f32]* %143)[i64 7][i64 0];
    f32 %173 = load f32* %172;
    f32 %174 = fmul f32 %173, f32 0.5;
    f32 %175 = fadd f32 %171, f32 %174;
    f32* %176 = getelementptr &([8 * f32]* %143)[i64 8][i64 0];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %177, f32 0.5;
    f32 %179 = fadd f32 %175, f32 %178;
    f32* %180 = getelementptr &([8 * f32]* %143)[i64 9][i64 0];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %181, f32 0.5;
    f32 %183 = fadd f32 %179, f32 %182;
    f32* %184 = getelementptr &([8 * f32]* %143)[i64 10][i64 0];
    f32 %185 = load f32* %184;
    f32 %186 = fmul f32 %185, f32 0.5;
    f32 %187 = fadd f32 %183, f32 %186;
    f32* %188 = getelementptr &([8 * f32]* %143)[i64 11][i64 0];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 0.5;
    f32 %191 = fadd f32 %187, f32 %190;
    f32* %192 = getelementptr &([8 * f32]* %143)[i64 12][i64 0];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %193, f32 0.5;
    f32 %195 = fadd f32 %191, f32 %194;
    f32* %196 = getelementptr &([8 * f32]* %143)[i64 13][i64 0];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %197, f32 0.5;
    f32 %199 = fadd f32 %195, f32 %198;
    f32* %200 = getelementptr &([8 * f32]* %143)[i64 14][i64 0];
    f32 %201 = load f32* %200;
    f32 %202 = fmul f32 %201, f32 0.5;
    f32 %203 = fadd f32 %199, f32 %202;
    f32* %204 = getelementptr &([8 * f32]* %143)[i64 15][i64 0];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %205, f32 0.5;
    f32 %207 = fadd f32 %203, f32 %206;
    i32 %208 = add i32 %141, i32 16;
    i1 %209 = icmp sgt i32 %44, i32 %208;
    cbr i1 %209(prob = 0.941176), ^while.body8, ^while.body10;
  ^prebody3:
    f32 %210 = load f32* %91;
    cbr i1 %37(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body9 {scalar}:
    f32 %211 = phi [^indirect, f32 %124] [^while.body9, f32 %217] [^while.body10, f32 %244];
    i32 %212 = phi [^indirect, i32 1] [^while.body9, i32 %218] [^while.body10, i32 %245];
    [8 * f32]* %213 = getelementptr &([8 * f32]* %11)[i32 %212];
    f32* %214 = getelementptr &([8 * f32]* %213)[i64 0][i64 0];
    f32 %215 = load f32* %214;
    f32 %216 = fmul f32 %215, f32 0.5;
    f32 %217 = fadd f32 %211, f32 %216;
    store f32* %91 with f32 %217;
    i32 %218 = add i32 %212, i32 1;
    i1 %219 = icmp sgt i32 %0, i32 %218;
    cbr i1 %219(prob = 0.75), ^while.body9, ^while.header10;
  ^b13:
    f32 %220 = load f32* %91;
    f32 %221 = fadd f32 %220, f32 %220;
    f32 %222 = fdiv f32 %221, f32 %6;
    f32 %223 = fadd f32 %222, f32 %222;
    f32 %224 = fdiv f32 %223, f32 %8;
    store f32* %91 with f32 %224;
    i32 %225 = add i32 %72, i32 1;
    ubr ^while.header8;
  ^while.body10 {scalar}:
    f32 %226 = phi [^prebody2, f32 %125] [^while.body8, f32 %207] [^while.body10, f32 %244];
    i32 %227 = phi [^prebody2, i32 1] [^while.body8, i32 %208] [^while.body10, i32 %245];
    [8 * f32]* %228 = getelementptr &([8 * f32]* %11)[i32 %227];
    f32* %229 = getelementptr &([8 * f32]* %228)[i64 0][i64 0];
    f32 %230 = load f32* %229;
    f32 %231 = fmul f32 %230, f32 0.5;
    f32 %232 = fadd f32 %226, f32 %231;
    f32* %233 = getelementptr &([8 * f32]* %228)[i64 1][i64 0];
    f32 %234 = load f32* %233;
    f32 %235 = fmul f32 %234, f32 0.5;
    f32 %236 = fadd f32 %232, f32 %235;
    f32* %237 = getelementptr &([8 * f32]* %228)[i64 2][i64 0];
    f32 %238 = load f32* %237;
    f32 %239 = fmul f32 %238, f32 0.5;
    f32 %240 = fadd f32 %236, f32 %239;
    f32* %241 = getelementptr &([8 * f32]* %228)[i64 3][i64 0];
    f32 %242 = load f32* %241;
    f32 %243 = fmul f32 %242, f32 0.5;
    f32 %244 = fadd f32 %240, f32 %243;
    i32 %245 = add i32 %227, i32 4;
    i1 %246 = icmp sgt i32 %34, i32 %245;
    cbr i1 %246(prob = 0.75), ^while.body10, ^while.body9;
  ^while.header12:
    cbr i1 %24(prob = 0.984615), ^prebody4, ^b14;
  ^b14:
    i32 %247 = add i32 %138, i32 1;
    ubr ^while.header11;
  ^while.body11:
    i32 %248 = phi [^prebody3, i32 1] [^while.body11, i32 %314];
    f32 %249 = phi [^prebody3, f32 %210] [^while.body11, f32 %313];
    f32* %250 = getelementptr &([8 * f32]* %11)[i64 0][i32 %248];
    f32 %251 = load f32* %250;
    f32 %252 = fmul f32 %251, f32 0.5;
    f32 %253 = fadd f32 %249, f32 %252;
    f32* %254 = getelementptr &(f32* %250)[i64 1];
    f32 %255 = load f32* %254;
    f32 %256 = fmul f32 %255, f32 0.5;
    f32 %257 = fadd f32 %253, f32 %256;
    f32* %258 = getelementptr &(f32* %250)[i64 2];
    f32 %259 = load f32* %258;
    f32 %260 = fmul f32 %259, f32 0.5;
    f32 %261 = fadd f32 %257, f32 %260;
    f32* %262 = getelementptr &(f32* %250)[i64 3];
    f32 %263 = load f32* %262;
    f32 %264 = fmul f32 %263, f32 0.5;
    f32 %265 = fadd f32 %261, f32 %264;
    f32* %266 = getelementptr &(f32* %250)[i64 4];
    f32 %267 = load f32* %266;
    f32 %268 = fmul f32 %267, f32 0.5;
    f32 %269 = fadd f32 %265, f32 %268;
    f32* %270 = getelementptr &(f32* %250)[i64 5];
    f32 %271 = load f32* %270;
    f32 %272 = fmul f32 %271, f32 0.5;
    f32 %273 = fadd f32 %269, f32 %272;
    f32* %274 = getelementptr &(f32* %250)[i64 6];
    f32 %275 = load f32* %274;
    f32 %276 = fmul f32 %275, f32 0.5;
    f32 %277 = fadd f32 %273, f32 %276;
    f32* %278 = getelementptr &(f32* %250)[i64 7];
    f32 %279 = load f32* %278;
    f32 %280 = fmul f32 %279, f32 0.5;
    f32 %281 = fadd f32 %277, f32 %280;
    f32* %282 = getelementptr &(f32* %250)[i64 8];
    f32 %283 = load f32* %282;
    f32 %284 = fmul f32 %283, f32 0.5;
    f32 %285 = fadd f32 %281, f32 %284;
    f32* %286 = getelementptr &(f32* %250)[i64 9];
    f32 %287 = load f32* %286;
    f32 %288 = fmul f32 %287, f32 0.5;
    f32 %289 = fadd f32 %285, f32 %288;
    f32* %290 = getelementptr &(f32* %250)[i64 10];
    f32 %291 = load f32* %290;
    f32 %292 = fmul f32 %291, f32 0.5;
    f32 %293 = fadd f32 %289, f32 %292;
    f32* %294 = getelementptr &(f32* %250)[i64 11];
    f32 %295 = load f32* %294;
    f32 %296 = fmul f32 %295, f32 0.5;
    f32 %297 = fadd f32 %293, f32 %296;
    f32* %298 = getelementptr &(f32* %250)[i64 12];
    f32 %299 = load f32* %298;
    f32 %300 = fmul f32 %299, f32 0.5;
    f32 %301 = fadd f32 %297, f32 %300;
    f32* %302 = getelementptr &(f32* %250)[i64 13];
    f32 %303 = load f32* %302;
    f32 %304 = fmul f32 %303, f32 0.5;
    f32 %305 = fadd f32 %301, f32 %304;
    f32* %306 = getelementptr &(f32* %250)[i64 14];
    f32 %307 = load f32* %306;
    f32 %308 = fmul f32 %307, f32 0.5;
    f32 %309 = fadd f32 %305, f32 %308;
    f32* %310 = getelementptr &(f32* %250)[i64 15];
    f32 %311 = load f32* %310;
    f32 %312 = fmul f32 %311, f32 0.5;
    f32 %313 = fadd f32 %309, f32 %312;
    i32 %314 = add i32 %248, i32 16;
    i1 %315 = icmp sgt i32 %45, i32 %314;
    cbr i1 %315(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body12 {scalar}:
    f32 %316 = phi [^indirect1, f32 %140] [^while.body12, f32 %321] [^while.body13, f32 %348];
    i32 %317 = phi [^indirect1, i32 1] [^while.body12, i32 %322] [^while.body13, i32 %349];
    f32* %318 = getelementptr &([8 * f32]* %11)[i64 0][i32 %317];
    f32 %319 = load f32* %318;
    f32 %320 = fmul f32 %319, f32 0.5;
    f32 %321 = fadd f32 %316, f32 %320;
    store f32* %91 with f32 %321;
    i32 %322 = add i32 %317, i32 1;
    i1 %323 = icmp sgt i32 %1, i32 %322;
    cbr i1 %323(prob = 0.75), ^while.body12, ^while.header11;
  ^prebody4:
    f32 %324 = s2f i32 %138 to f32;
    f32 %325 = fmul f32 %59, f32 %324;
    f32 %326 = fadd f32 %325, f32 1.5708;
    i1 %327 = fcmp ogt f32 %326, f32 6.28319;
    i1 %328 = fcmp olt f32 %326, f32 -6.28319;
    i1 %329 = or i1 %327, i1 %328;
    [8 * f32]* %330 = getelementptr &([8 * f32]* %11)[i32 %138];
    cbr i1 %329(prob = 0.5), ^if.then2, ^b15;
  ^while.body13 {scalar}:
    f32 %331 = phi [^prebody3, f32 %210] [^while.body11, f32 %313] [^while.body13, f32 %348];
    i32 %332 = phi [^prebody3, i32 1] [^while.body11, i32 %314] [^while.body13, i32 %349];
    f32* %333 = getelementptr &([8 * f32]* %11)[i64 0][i32 %332];
    f32 %334 = load f32* %333;
    f32 %335 = fmul f32 %334, f32 0.5;
    f32 %336 = fadd f32 %331, f32 %335;
    f32* %337 = getelementptr &(f32* %333)[i64 1];
    f32 %338 = load f32* %337;
    f32 %339 = fmul f32 %338, f32 0.5;
    f32 %340 = fadd f32 %336, f32 %339;
    f32* %341 = getelementptr &(f32* %333)[i64 2];
    f32 %342 = load f32* %341;
    f32 %343 = fmul f32 %342, f32 0.5;
    f32 %344 = fadd f32 %340, f32 %343;
    f32* %345 = getelementptr &(f32* %333)[i64 3];
    f32 %346 = load f32* %345;
    f32 %347 = fmul f32 %346, f32 0.5;
    f32 %348 = fadd f32 %344, f32 %347;
    i32 %349 = add i32 %332, i32 4;
    i1 %350 = icmp sgt i32 %36, i32 %349;
    cbr i1 %350(prob = 0.75), ^while.body13, ^while.body12;
  ^if.then2:
    f32 %351 = fdiv f32 %326, f32 6.28319;
    i32 %352 = f2s f32 %351 to i32;
    f32 %353 = s2f i32 %352 to f32;
    f32 %354 = fmul f32 %353, f32 6.28319;
    f32 %355 = fsub f32 %326, f32 %354;
    ubr ^b15;
  ^b15:
    f32 %356 = phi [^prebody4, f32 %326] [^if.then2, f32 %355];
    i1 %357 = fcmp ogt f32 %356, f32 3.14159;
    f32 %358 = fsub f32 %356, f32 6.28319;
    f32 %359 = select i1 %357 ? f32 %358 : f32 %356;
    i1 %360 = fcmp olt f32 %359, f32 -3.14159;
    f32 %361 = fadd f32 %359, f32 6.28319;
    f32 %362 = select i1 %360 ? f32 %361 : f32 %359;
    f32 %363 = call (f32) -> f32 @my_sin_impl(f32 %362);
    f32 %364 = load f32* %91;
    ubr ^while.body14;
  ^while.body14:
    f32 %365 = phi [^b15, f32 %364] [^b16, f32 %390];
    i32 %366 = phi [^b15, i32 1] [^b16, i32 %391];
    f32 %367 = s2f i32 %366 to f32;
    f32 %368 = fmul f32 %96, f32 %367;
    f32 %369 = fadd f32 %368, f32 1.5708;
    i1 %370 = fcmp ogt f32 %369, f32 6.28319;
    i1 %371 = fcmp olt f32 %369, f32 -6.28319;
    i1 %372 = or i1 %370, i1 %371;
    f32* %373 = getelementptr &([8 * f32]* %330)[i64 0][i32 %366];
    f32 %374 = load f32* %373;
    f32 %375 = fmul f32 %374, f32 %363;
    cbr i1 %372(prob = 0.5), ^if.then3, ^b16;
  ^if.then3:
    f32 %376 = fdiv f32 %369, f32 6.28319;
    i32 %377 = f2s f32 %376 to i32;
    f32 %378 = s2f i32 %377 to f32;
    f32 %379 = fmul f32 %378, f32 6.28319;
    f32 %380 = fsub f32 %369, f32 %379;
    ubr ^b16;
  ^b16:
    f32 %381 = phi [^while.body14, f32 %369] [^if.then3, f32 %380];
    i1 %382 = fcmp ogt f32 %381, f32 3.14159;
    f32 %383 = fsub f32 %381, f32 6.28319;
    f32 %384 = select i1 %382 ? f32 %383 : f32 %381;
    i1 %385 = fcmp olt f32 %384, f32 -3.14159;
    f32 %386 = fadd f32 %384, f32 6.28319;
    f32 %387 = select i1 %385 ? f32 %386 : f32 %384;
    f32 %388 = call (f32) -> f32 @my_sin_impl(f32 %387);
    f32 %389 = fmul f32 %375, f32 %388;
    f32 %390 = fadd f32 %365, f32 %389;
    store f32* %91 with f32 %390;
    i32 %391 = add i32 %366, i32 1;
    i1 %392 = icmp sgt i32 %1, i32 %391;
    cbr i1 %392(prob = 0.984615), ^while.body14, ^b14;
}
