internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @MAX_DIM_X { ReadOnly } = 8;
internal i32* @MAX_DIM_Y { ReadOnly } = 8;
internal [8 * [8 * f32]]* @test_block;
internal [8 * [8 * f32]]* @test_dct;
internal [8 * [8 * f32]]* @test_idct;
internal f32* @PI { ReadOnly } = 3.14159;
internal f32* @TWO_PI { ReadOnly } = 6.28319;
internal f32* @EPSILON { ReadOnly } = 1e-06;
internal func @my_fabs(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = load f32* %x1;
    ret f32 %4;
^b:
    f32 %5 = load f32* %x1;
    f32 %6 = fneg f32 %5;
    ret f32 %6;
}
internal func @p(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fmul f32 3, f32 %0;
    f32 %2 = load f32* %x1;
    f32 %3 = fmul f32 4, f32 %2;
    f32 %4 = load f32* %x1;
    f32 %5 = fmul f32 %3, f32 %4;
    f32 %6 = load f32* %x1;
    f32 %7 = fmul f32 %5, f32 %6;
    f32 %8 = fsub f32 %1, f32 %7;
    ret f32 %8;
}
internal func @my_sin_impl(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = call (f32) -> f32 @my_fabs(f32 %0);
    i1 %2 = fcmp le f32 %1, f32 1e-06;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %5 = load f32* %x1;
    ret f32 %5;
^b:
    f32 %6 = load f32* %x1;
    f32 %7 = fdiv f32 %6, f32 3;
    f32 %8 = call (f32) -> f32 @my_sin_impl(f32 %7);
    f32 %9 = call (f32) -> f32 @p(f32 %8);
    ret f32 %9;
}
internal func @my_sin(f32 %x) -> f32 {
^entry:
    i32* %xx = alloc i32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 6.28319;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    f32 %4 = load f32* %x1;
    i1 %5 = fcmp lt f32 %4, f32 -6.28319;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^if.then:
    f32 %11 = load f32* %x1;
    f32 %12 = fdiv f32 %11, f32 6.28319;
    i32 %13 = f2s f32 %12 to i32;
    store i32* %xx with i32 %13;
    f32 %14 = load f32* %x1;
    i32 %15 = load i32* %xx;
    f32 %16 = s2f i32 %15 to f32;
    f32 %17 = fmul f32 %16, f32 6.28319;
    f32 %18 = fsub f32 %14, f32 %17;
    store f32* %x1 with f32 %18;
    ubr ^b2;
^b2:
    f32 %19 = load f32* %x1;
    i1 %20 = fcmp gt f32 %19, f32 3.14159;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^b3;
^if.then1:
    f32 %23 = load f32* %x1;
    f32 %24 = fsub f32 %23, f32 6.28319;
    store f32* %x1 with f32 %24;
    ubr ^b3;
^b3:
    f32 %25 = load f32* %x1;
    i1 %26 = fcmp lt f32 %25, f32 -3.14159;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    f32 %29 = load f32* %x1;
    f32 %30 = fadd f32 %29, f32 6.28319;
    store f32* %x1 with f32 %30;
    ubr ^b4;
^b4:
    f32 %31 = load f32* %x1;
    f32 %32 = call (f32) -> f32 @my_sin_impl(f32 %31);
    ret f32 %32;
}
internal func @my_cos(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fadd f32 %0, f32 1.5708;
    f32 %2 = call (f32) -> f32 @my_sin(f32 %1);
    ret f32 %2;
}
internal func @write_mat([8 * f32]* %mat, i32 %n, i32 %m) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    [8 * f32]** %mat1 = alloc [8 * f32]*;
    store [8 * f32]** %mat1 with [8 * f32]* %mat;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    [8 * f32]* %7 = load [8 * f32]** %mat1;
    [8 * f32]* %8 = getelementptr &([8 * f32]* %7)[i64 %6];
    f32* %9 = getelementptr &([8 * f32]* %8)[i64 0][i64 0];
    f32 %10 = load f32* %9;
    call (f32) -> void @putfloat(f32 %10);
    store i32* %j with i32 1;
    ubr ^while.header1;
^b:
    call (i32) -> void @putch(i32 10);
    ret;
^while.header1:
    i32 %11 = load i32* %j;
    i32 %12 = load i32* %m1;
    i1 %13 = scmp lt i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    call (i32) -> void @putch(i32 32);
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    [8 * f32]* %18 = load [8 * f32]** %mat1;
    [8 * f32]* %19 = getelementptr &([8 * f32]* %18)[i64 %17];
    i32 %20 = load i32* %j;
    i64 %21 = sext i32 %20 to i64;
    f32* %22 = getelementptr &([8 * f32]* %19)[i64 0][i64 %21];
    f32 %23 = load f32* %22;
    call (f32) -> void @putfloat(f32 %23);
    i32 %24 = load i32* %j;
    i32 %25 = add i32 %24, i32 1;
    store i32* %j with i32 %25;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.header;
}
internal func @dct([8 * f32]* %dct_mat, [8 * f32]* %mat, i32 %n, i32 %m) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %v = alloc i32;
    i32* %u = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    [8 * f32]** %mat1 = alloc [8 * f32]*;
    [8 * f32]** %dct_mat1 = alloc [8 * f32]*;
    store [8 * f32]** %dct_mat1 with [8 * f32]* %dct_mat;
    store [8 * f32]** %mat1 with [8 * f32]* %mat;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %u with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %u;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %v with i32 0;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %v;
    i32 %6 = load i32* %m1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %10 = load i32* %u;
    i64 %11 = sext i32 %10 to i64;
    [8 * f32]* %12 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %13 = getelementptr &([8 * f32]* %12)[i64 %11];
    i32 %14 = load i32* %v;
    i64 %15 = sext i32 %14 to i64;
    f32* %16 = getelementptr &([8 * f32]* %13)[i64 0][i64 %15];
    store f32* %16 with f32 0;
    store i32* %i with i32 0;
    ubr ^while.header2;
^b1:
    i32 %17 = load i32* %u;
    i32 %18 = add i32 %17, i32 1;
    store i32* %u with i32 %18;
    ubr ^while.header;
^while.header2:
    i32 %19 = load i32* %i;
    i32 %20 = load i32* %n1;
    i1 %21 = scmp lt i32 %19, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %j with i32 0;
    ubr ^while.header3;
^b2:
    i32 %24 = load i32* %v;
    i32 %25 = add i32 %24, i32 1;
    store i32* %v with i32 %25;
    ubr ^while.header1;
^while.header3:
    i32 %26 = load i32* %j;
    i32 %27 = load i32* %m1;
    i1 %28 = scmp lt i32 %26, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %31 = load i32* %u;
    i64 %32 = sext i32 %31 to i64;
    [8 * f32]* %33 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %34 = getelementptr &([8 * f32]* %33)[i64 %32];
    i32 %35 = load i32* %v;
    i64 %36 = sext i32 %35 to i64;
    f32* %37 = getelementptr &([8 * f32]* %34)[i64 0][i64 %36];
    i32 %38 = load i32* %u;
    i64 %39 = sext i32 %38 to i64;
    [8 * f32]* %40 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %41 = getelementptr &([8 * f32]* %40)[i64 %39];
    i32 %42 = load i32* %v;
    i64 %43 = sext i32 %42 to i64;
    f32* %44 = getelementptr &([8 * f32]* %41)[i64 0][i64 %43];
    f32 %45 = load f32* %44;
    i32 %46 = load i32* %i;
    i64 %47 = sext i32 %46 to i64;
    [8 * f32]* %48 = load [8 * f32]** %mat1;
    [8 * f32]* %49 = getelementptr &([8 * f32]* %48)[i64 %47];
    i32 %50 = load i32* %j;
    i64 %51 = sext i32 %50 to i64;
    f32* %52 = getelementptr &([8 * f32]* %49)[i64 0][i64 %51];
    f32 %53 = load f32* %52;
    i32 %54 = load i32* %n1;
    f32 %55 = s2f i32 %54 to f32;
    f32 %56 = fdiv f32 3.14159, f32 %55;
    i32 %57 = load i32* %i;
    f32 %58 = s2f i32 %57 to f32;
    f32 %59 = fadd f32 %58, f32 0.5;
    f32 %60 = fmul f32 %56, f32 %59;
    i32 %61 = load i32* %u;
    f32 %62 = s2f i32 %61 to f32;
    f32 %63 = fmul f32 %60, f32 %62;
    f32 %64 = call (f32) -> f32 @my_cos(f32 %63);
    f32 %65 = fmul f32 %53, f32 %64;
    i32 %66 = load i32* %m1;
    f32 %67 = s2f i32 %66 to f32;
    f32 %68 = fdiv f32 3.14159, f32 %67;
    i32 %69 = load i32* %j;
    f32 %70 = s2f i32 %69 to f32;
    f32 %71 = fadd f32 %70, f32 0.5;
    f32 %72 = fmul f32 %68, f32 %71;
    i32 %73 = load i32* %v;
    f32 %74 = s2f i32 %73 to f32;
    f32 %75 = fmul f32 %72, f32 %74;
    f32 %76 = call (f32) -> f32 @my_cos(f32 %75);
    f32 %77 = fmul f32 %65, f32 %76;
    f32 %78 = fadd f32 %45, f32 %77;
    store f32* %37 with f32 %78;
    i32 %79 = load i32* %j;
    i32 %80 = add i32 %79, i32 1;
    store i32* %j with i32 %80;
    ubr ^while.header3;
^b3:
    i32 %81 = load i32* %i;
    i32 %82 = add i32 %81, i32 1;
    store i32* %i with i32 %82;
    ubr ^while.header2;
}
internal func @idct([8 * f32]* %mat, [8 * f32]* %dct_mat, i32 %n, i32 %m) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %v = alloc i32;
    i32* %u = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    [8 * f32]** %dct_mat1 = alloc [8 * f32]*;
    [8 * f32]** %mat1 = alloc [8 * f32]*;
    store [8 * f32]** %mat1 with [8 * f32]* %mat;
    store [8 * f32]** %dct_mat1 with [8 * f32]* %dct_mat;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %u with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %u;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %v with i32 0;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %v;
    i32 %6 = load i32* %m1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %10 = load i32* %u;
    i64 %11 = sext i32 %10 to i64;
    [8 * f32]* %12 = load [8 * f32]** %mat1;
    [8 * f32]* %13 = getelementptr &([8 * f32]* %12)[i64 %11];
    i32 %14 = load i32* %v;
    i64 %15 = sext i32 %14 to i64;
    f32* %16 = getelementptr &([8 * f32]* %13)[i64 0][i64 %15];
    [8 * f32]* %17 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %18 = getelementptr &([8 * f32]* %17)[i64 0];
    f32* %19 = getelementptr &([8 * f32]* %18)[i64 0][i64 0];
    f32 %20 = load f32* %19;
    f32 %21 = fmul f32 0.25, f32 %20;
    store f32* %16 with f32 %21;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header2;
^b1:
    i32 %22 = load i32* %u;
    i32 %23 = add i32 %22, i32 1;
    store i32* %u with i32 %23;
    ubr ^while.header;
^while.header2:
    i32 %24 = load i32* %i;
    i32 %25 = load i32* %n1;
    i1 %26 = scmp lt i32 %24, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %29 = load i32* %u;
    i64 %30 = sext i32 %29 to i64;
    [8 * f32]* %31 = load [8 * f32]** %mat1;
    [8 * f32]* %32 = getelementptr &([8 * f32]* %31)[i64 %30];
    i32 %33 = load i32* %v;
    i64 %34 = sext i32 %33 to i64;
    f32* %35 = getelementptr &([8 * f32]* %32)[i64 0][i64 %34];
    i32 %36 = load i32* %u;
    i64 %37 = sext i32 %36 to i64;
    [8 * f32]* %38 = load [8 * f32]** %mat1;
    [8 * f32]* %39 = getelementptr &([8 * f32]* %38)[i64 %37];
    i32 %40 = load i32* %v;
    i64 %41 = sext i32 %40 to i64;
    f32* %42 = getelementptr &([8 * f32]* %39)[i64 0][i64 %41];
    f32 %43 = load f32* %42;
    i32 %44 = load i32* %i;
    i64 %45 = sext i32 %44 to i64;
    [8 * f32]* %46 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %47 = getelementptr &([8 * f32]* %46)[i64 %45];
    f32* %48 = getelementptr &([8 * f32]* %47)[i64 0][i64 0];
    f32 %49 = load f32* %48;
    f32 %50 = fmul f32 0.5, f32 %49;
    f32 %51 = fadd f32 %43, f32 %50;
    store f32* %35 with f32 %51;
    i32 %52 = load i32* %i;
    i32 %53 = add i32 %52, i32 1;
    store i32* %i with i32 %53;
    ubr ^while.header2;
^b2:
    store i32* %j with i32 1;
    ubr ^while.header3;
^while.header3:
    i32 %54 = load i32* %j;
    i32 %55 = load i32* %m1;
    i1 %56 = scmp lt i32 %54, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %59 = load i32* %u;
    i64 %60 = sext i32 %59 to i64;
    [8 * f32]* %61 = load [8 * f32]** %mat1;
    [8 * f32]* %62 = getelementptr &([8 * f32]* %61)[i64 %60];
    i32 %63 = load i32* %v;
    i64 %64 = sext i32 %63 to i64;
    f32* %65 = getelementptr &([8 * f32]* %62)[i64 0][i64 %64];
    i32 %66 = load i32* %u;
    i64 %67 = sext i32 %66 to i64;
    [8 * f32]* %68 = load [8 * f32]** %mat1;
    [8 * f32]* %69 = getelementptr &([8 * f32]* %68)[i64 %67];
    i32 %70 = load i32* %v;
    i64 %71 = sext i32 %70 to i64;
    f32* %72 = getelementptr &([8 * f32]* %69)[i64 0][i64 %71];
    f32 %73 = load f32* %72;
    [8 * f32]* %74 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %75 = getelementptr &([8 * f32]* %74)[i64 0];
    i32 %76 = load i32* %j;
    i64 %77 = sext i32 %76 to i64;
    f32* %78 = getelementptr &([8 * f32]* %75)[i64 0][i64 %77];
    f32 %79 = load f32* %78;
    f32 %80 = fmul f32 0.5, f32 %79;
    f32 %81 = fadd f32 %73, f32 %80;
    store f32* %65 with f32 %81;
    i32 %82 = load i32* %j;
    i32 %83 = add i32 %82, i32 1;
    store i32* %j with i32 %83;
    ubr ^while.header3;
^b3:
    store i32* %i with i32 1;
    ubr ^while.header4;
^while.header4:
    i32 %84 = load i32* %i;
    i32 %85 = load i32* %n1;
    i1 %86 = scmp lt i32 %84, i32 %85;
    i32 %87 = zext i1 %86 to i32;
    i1 %88 = scmp neq i32 %87, i32 0;
    cbr i1 %88(prob = 0.97), ^while.body4, ^b4;
^while.body4:
    store i32* %j with i32 1;
    ubr ^while.header5;
^b4:
    i32 %89 = load i32* %u;
    i64 %90 = sext i32 %89 to i64;
    [8 * f32]* %91 = load [8 * f32]** %mat1;
    [8 * f32]* %92 = getelementptr &([8 * f32]* %91)[i64 %90];
    i32 %93 = load i32* %v;
    i64 %94 = sext i32 %93 to i64;
    f32* %95 = getelementptr &([8 * f32]* %92)[i64 0][i64 %94];
    i32 %96 = load i32* %u;
    i64 %97 = sext i32 %96 to i64;
    [8 * f32]* %98 = load [8 * f32]** %mat1;
    [8 * f32]* %99 = getelementptr &([8 * f32]* %98)[i64 %97];
    i32 %100 = load i32* %v;
    i64 %101 = sext i32 %100 to i64;
    f32* %102 = getelementptr &([8 * f32]* %99)[i64 0][i64 %101];
    f32 %103 = load f32* %102;
    f32 %104 = fmul f32 %103, f32 2;
    i32 %105 = load i32* %n1;
    f32 %106 = s2f i32 %105 to f32;
    f32 %107 = fdiv f32 %104, f32 %106;
    f32 %108 = fmul f32 %107, f32 2;
    i32 %109 = load i32* %m1;
    f32 %110 = s2f i32 %109 to f32;
    f32 %111 = fdiv f32 %108, f32 %110;
    store f32* %95 with f32 %111;
    i32 %112 = load i32* %v;
    i32 %113 = add i32 %112, i32 1;
    store i32* %v with i32 %113;
    ubr ^while.header1;
^while.header5:
    i32 %114 = load i32* %j;
    i32 %115 = load i32* %m1;
    i1 %116 = scmp lt i32 %114, i32 %115;
    i32 %117 = zext i1 %116 to i32;
    i1 %118 = scmp neq i32 %117, i32 0;
    cbr i1 %118(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    i32 %119 = load i32* %u;
    i64 %120 = sext i32 %119 to i64;
    [8 * f32]* %121 = load [8 * f32]** %mat1;
    [8 * f32]* %122 = getelementptr &([8 * f32]* %121)[i64 %120];
    i32 %123 = load i32* %v;
    i64 %124 = sext i32 %123 to i64;
    f32* %125 = getelementptr &([8 * f32]* %122)[i64 0][i64 %124];
    i32 %126 = load i32* %u;
    i64 %127 = sext i32 %126 to i64;
    [8 * f32]* %128 = load [8 * f32]** %mat1;
    [8 * f32]* %129 = getelementptr &([8 * f32]* %128)[i64 %127];
    i32 %130 = load i32* %v;
    i64 %131 = sext i32 %130 to i64;
    f32* %132 = getelementptr &([8 * f32]* %129)[i64 0][i64 %131];
    f32 %133 = load f32* %132;
    i32 %134 = load i32* %i;
    i64 %135 = sext i32 %134 to i64;
    [8 * f32]* %136 = load [8 * f32]** %dct_mat1;
    [8 * f32]* %137 = getelementptr &([8 * f32]* %136)[i64 %135];
    i32 %138 = load i32* %j;
    i64 %139 = sext i32 %138 to i64;
    f32* %140 = getelementptr &([8 * f32]* %137)[i64 0][i64 %139];
    f32 %141 = load f32* %140;
    i32 %142 = load i32* %n1;
    f32 %143 = s2f i32 %142 to f32;
    f32 %144 = fdiv f32 3.14159, f32 %143;
    i32 %145 = load i32* %u;
    f32 %146 = s2f i32 %145 to f32;
    f32 %147 = fadd f32 %146, f32 0.5;
    f32 %148 = fmul f32 %144, f32 %147;
    i32 %149 = load i32* %i;
    f32 %150 = s2f i32 %149 to f32;
    f32 %151 = fmul f32 %148, f32 %150;
    f32 %152 = call (f32) -> f32 @my_cos(f32 %151);
    f32 %153 = fmul f32 %141, f32 %152;
    i32 %154 = load i32* %m1;
    f32 %155 = s2f i32 %154 to f32;
    f32 %156 = fdiv f32 3.14159, f32 %155;
    i32 %157 = load i32* %v;
    f32 %158 = s2f i32 %157 to f32;
    f32 %159 = fadd f32 %158, f32 0.5;
    f32 %160 = fmul f32 %156, f32 %159;
    i32 %161 = load i32* %j;
    f32 %162 = s2f i32 %161 to f32;
    f32 %163 = fmul f32 %160, f32 %162;
    f32 %164 = call (f32) -> f32 @my_cos(f32 %163);
    f32 %165 = fmul f32 %153, f32 %164;
    f32 %166 = fadd f32 %133, f32 %165;
    store f32* %125 with f32 %166;
    i32 %167 = load i32* %j;
    i32 %168 = add i32 %167, i32 1;
    store i32* %j with i32 %168;
    ubr ^while.header5;
^b5:
    i32 %169 = load i32* %i;
    i32 %170 = add i32 %169, i32 1;
    store i32* %i with i32 %170;
    ubr ^while.header4;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %dim_y = alloc i32;
    i32* %dim_x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %dim_x with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %dim_y with i32 %1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* %dim_x;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    [8 * f32]* %7 = getelementptr &([8 * [8 * f32]]* @test_dct)[i64 0][i64 0];
    [8 * f32]* %8 = getelementptr &([8 * [8 * f32]]* @test_block)[i64 0][i64 0];
    i32 %9 = load i32* %dim_x;
    i32 %10 = load i32* %dim_y;
    call ([8 * f32]*, [8 * f32]*, i32, i32) -> void @dct([8 * f32]* %7, [8 * f32]* %8, i32 %9, i32 %10);
    [8 * f32]* %11 = getelementptr &([8 * [8 * f32]]* @test_dct)[i64 0][i64 0];
    i32 %12 = load i32* %dim_x;
    i32 %13 = load i32* %dim_y;
    call ([8 * f32]*, i32, i32) -> void @write_mat([8 * f32]* %11, i32 %12, i32 %13);
    [8 * f32]* %14 = getelementptr &([8 * [8 * f32]]* @test_idct)[i64 0][i64 0];
    [8 * f32]* %15 = getelementptr &([8 * [8 * f32]]* @test_dct)[i64 0][i64 0];
    i32 %16 = load i32* %dim_x;
    i32 %17 = load i32* %dim_y;
    call ([8 * f32]*, [8 * f32]*, i32, i32) -> void @idct([8 * f32]* %14, [8 * f32]* %15, i32 %16, i32 %17);
    [8 * f32]* %18 = getelementptr &([8 * [8 * f32]]* @test_idct)[i64 0][i64 0];
    i32 %19 = load i32* %dim_x;
    i32 %20 = load i32* %dim_y;
    call ([8 * f32]*, i32, i32) -> void @write_mat([8 * f32]* %18, i32 %19, i32 %20);
    ret i32 0;
^while.header1:
    i32 %21 = load i32* %j;
    i32 %22 = load i32* %dim_y;
    i1 %23 = scmp lt i32 %21, i32 %22;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %26 = load i32* %i;
    i64 %27 = sext i32 %26 to i64;
    [8 * f32]* %28 = getelementptr &([8 * [8 * f32]]* @test_block)[i64 0][i64 %27];
    i32 %29 = load i32* %j;
    i64 %30 = sext i32 %29 to i64;
    f32* %31 = getelementptr &([8 * f32]* %28)[i64 0][i64 %30];
    f32 %32 = call () -> f32 @getfloat();
    store f32* %31 with f32 %32;
    i32 %33 = load i32* %j;
    i32 %34 = add i32 %33, i32 1;
    store i32* %j with i32 %34;
    ubr ^while.header1;
^b1:
    i32 %35 = load i32* %i;
    i32 %36 = add i32 %35, i32 1;
    store i32* %i with i32 %36;
    ubr ^while.header;
}
