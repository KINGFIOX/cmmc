internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 3, f32 %5;
    f32 %7 = fmul f32 4, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 %8, f32 %5;
    f32 %10 = fsub f32 %6, f32 %9;
    ubr ^b3;
^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8 * [8 * f32]]* %test_idct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_dct = alloc [8 * [8 * f32]];
    [8 * [8 * f32]]* %test_block = alloc [8 * [8 * f32]];
    f32* %0 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 1];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0][i64 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 0];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 1];
    store f32* %9 with f32 0;
    f32* %10 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 2];
    store f32* %10 with f32 0;
    f32* %11 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 3];
    store f32* %11 with f32 0;
    f32* %12 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 4];
    store f32* %12 with f32 0;
    f32* %13 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 5];
    store f32* %13 with f32 0;
    f32* %14 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 6];
    store f32* %14 with f32 0;
    f32* %15 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 1][i64 7];
    store f32* %15 with f32 0;
    f32* %16 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 0];
    store f32* %16 with f32 0;
    f32* %17 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 1];
    store f32* %17 with f32 0;
    f32* %18 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 2];
    store f32* %18 with f32 0;
    f32* %19 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 3];
    store f32* %19 with f32 0;
    f32* %20 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 4];
    store f32* %20 with f32 0;
    f32* %21 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 5];
    store f32* %21 with f32 0;
    f32* %22 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 6];
    store f32* %22 with f32 0;
    f32* %23 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 2][i64 7];
    store f32* %23 with f32 0;
    f32* %24 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 0];
    store f32* %24 with f32 0;
    f32* %25 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 1];
    store f32* %25 with f32 0;
    f32* %26 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 2];
    store f32* %26 with f32 0;
    f32* %27 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 3];
    store f32* %27 with f32 0;
    f32* %28 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 4];
    store f32* %28 with f32 0;
    f32* %29 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 5];
    store f32* %29 with f32 0;
    f32* %30 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 6];
    store f32* %30 with f32 0;
    f32* %31 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 3][i64 7];
    store f32* %31 with f32 0;
    f32* %32 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 0];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 1];
    store f32* %33 with f32 0;
    f32* %34 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 2];
    store f32* %34 with f32 0;
    f32* %35 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 3];
    store f32* %35 with f32 0;
    f32* %36 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 4];
    store f32* %36 with f32 0;
    f32* %37 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 5];
    store f32* %37 with f32 0;
    f32* %38 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 6];
    store f32* %38 with f32 0;
    f32* %39 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 4][i64 7];
    store f32* %39 with f32 0;
    f32* %40 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 0];
    store f32* %40 with f32 0;
    f32* %41 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 1];
    store f32* %41 with f32 0;
    f32* %42 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 2];
    store f32* %42 with f32 0;
    f32* %43 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 3];
    store f32* %43 with f32 0;
    f32* %44 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 4];
    store f32* %44 with f32 0;
    f32* %45 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 5];
    store f32* %45 with f32 0;
    f32* %46 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 6];
    store f32* %46 with f32 0;
    f32* %47 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 5][i64 7];
    store f32* %47 with f32 0;
    f32* %48 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 0];
    store f32* %48 with f32 0;
    f32* %49 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 1];
    store f32* %49 with f32 0;
    f32* %50 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 2];
    store f32* %50 with f32 0;
    f32* %51 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 3];
    store f32* %51 with f32 0;
    f32* %52 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 4];
    store f32* %52 with f32 0;
    f32* %53 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 5];
    store f32* %53 with f32 0;
    f32* %54 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 6];
    store f32* %54 with f32 0;
    f32* %55 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 6][i64 7];
    store f32* %55 with f32 0;
    f32* %56 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 0];
    store f32* %56 with f32 0;
    f32* %57 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 1];
    store f32* %57 with f32 0;
    f32* %58 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 2];
    store f32* %58 with f32 0;
    f32* %59 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 3];
    store f32* %59 with f32 0;
    f32* %60 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 4];
    store f32* %60 with f32 0;
    f32* %61 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 5];
    store f32* %61 with f32 0;
    f32* %62 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 6];
    store f32* %62 with f32 0;
    f32* %63 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 7][i64 7];
    store f32* %63 with f32 0;
    f32* %64 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 0];
    store f32* %64 with f32 0;
    f32* %65 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 1];
    store f32* %65 with f32 0;
    f32* %66 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 2];
    store f32* %66 with f32 0;
    f32* %67 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 3];
    store f32* %67 with f32 0;
    f32* %68 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 4];
    store f32* %68 with f32 0;
    f32* %69 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 5];
    store f32* %69 with f32 0;
    f32* %70 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 6];
    store f32* %70 with f32 0;
    f32* %71 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0][i64 7];
    store f32* %71 with f32 0;
    f32* %72 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 0];
    store f32* %72 with f32 0;
    f32* %73 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 1];
    store f32* %73 with f32 0;
    f32* %74 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 2];
    store f32* %74 with f32 0;
    f32* %75 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 3];
    store f32* %75 with f32 0;
    f32* %76 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 4];
    store f32* %76 with f32 0;
    f32* %77 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 5];
    store f32* %77 with f32 0;
    f32* %78 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 6];
    store f32* %78 with f32 0;
    f32* %79 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 1][i64 7];
    store f32* %79 with f32 0;
    f32* %80 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 0];
    store f32* %80 with f32 0;
    f32* %81 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 1];
    store f32* %81 with f32 0;
    f32* %82 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 2];
    store f32* %82 with f32 0;
    f32* %83 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 3];
    store f32* %83 with f32 0;
    f32* %84 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 4];
    store f32* %84 with f32 0;
    f32* %85 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 5];
    store f32* %85 with f32 0;
    f32* %86 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 6];
    store f32* %86 with f32 0;
    f32* %87 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 2][i64 7];
    store f32* %87 with f32 0;
    f32* %88 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 0];
    store f32* %88 with f32 0;
    f32* %89 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 1];
    store f32* %89 with f32 0;
    f32* %90 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 2];
    store f32* %90 with f32 0;
    f32* %91 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 3];
    store f32* %91 with f32 0;
    f32* %92 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 4];
    store f32* %92 with f32 0;
    f32* %93 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 5];
    store f32* %93 with f32 0;
    f32* %94 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 6];
    store f32* %94 with f32 0;
    f32* %95 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 3][i64 7];
    store f32* %95 with f32 0;
    f32* %96 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 0];
    store f32* %96 with f32 0;
    f32* %97 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 1];
    store f32* %97 with f32 0;
    f32* %98 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 2];
    store f32* %98 with f32 0;
    f32* %99 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 3];
    store f32* %99 with f32 0;
    f32* %100 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 4];
    store f32* %100 with f32 0;
    f32* %101 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 5];
    store f32* %101 with f32 0;
    f32* %102 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 6];
    store f32* %102 with f32 0;
    f32* %103 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 4][i64 7];
    store f32* %103 with f32 0;
    f32* %104 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 0];
    store f32* %104 with f32 0;
    f32* %105 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 1];
    store f32* %105 with f32 0;
    f32* %106 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 2];
    store f32* %106 with f32 0;
    f32* %107 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 3];
    store f32* %107 with f32 0;
    f32* %108 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 4];
    store f32* %108 with f32 0;
    f32* %109 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 5];
    store f32* %109 with f32 0;
    f32* %110 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 6];
    store f32* %110 with f32 0;
    f32* %111 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 5][i64 7];
    store f32* %111 with f32 0;
    f32* %112 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 0];
    store f32* %112 with f32 0;
    f32* %113 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 1];
    store f32* %113 with f32 0;
    f32* %114 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 2];
    store f32* %114 with f32 0;
    f32* %115 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 3];
    store f32* %115 with f32 0;
    f32* %116 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 4];
    store f32* %116 with f32 0;
    f32* %117 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 5];
    store f32* %117 with f32 0;
    f32* %118 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 6];
    store f32* %118 with f32 0;
    f32* %119 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 6][i64 7];
    store f32* %119 with f32 0;
    f32* %120 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 0];
    store f32* %120 with f32 0;
    f32* %121 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 1];
    store f32* %121 with f32 0;
    f32* %122 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 2];
    store f32* %122 with f32 0;
    f32* %123 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 3];
    store f32* %123 with f32 0;
    f32* %124 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 4];
    store f32* %124 with f32 0;
    f32* %125 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 5];
    store f32* %125 with f32 0;
    f32* %126 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 6];
    store f32* %126 with f32 0;
    f32* %127 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 7][i64 7];
    store f32* %127 with f32 0;
    f32* %128 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 0];
    store f32* %128 with f32 0;
    f32* %129 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 1];
    store f32* %129 with f32 0;
    f32* %130 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 2];
    store f32* %130 with f32 0;
    f32* %131 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 3];
    store f32* %131 with f32 0;
    f32* %132 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 4];
    store f32* %132 with f32 0;
    f32* %133 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 5];
    store f32* %133 with f32 0;
    f32* %134 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 6];
    store f32* %134 with f32 0;
    f32* %135 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0][i64 7];
    store f32* %135 with f32 0;
    f32* %136 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 0];
    store f32* %136 with f32 0;
    f32* %137 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 1];
    store f32* %137 with f32 0;
    f32* %138 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 2];
    store f32* %138 with f32 0;
    f32* %139 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 3];
    store f32* %139 with f32 0;
    f32* %140 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 4];
    store f32* %140 with f32 0;
    f32* %141 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 5];
    store f32* %141 with f32 0;
    f32* %142 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 6];
    store f32* %142 with f32 0;
    f32* %143 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 1][i64 7];
    store f32* %143 with f32 0;
    f32* %144 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 0];
    store f32* %144 with f32 0;
    f32* %145 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 1];
    store f32* %145 with f32 0;
    f32* %146 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 2];
    store f32* %146 with f32 0;
    f32* %147 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 3];
    store f32* %147 with f32 0;
    f32* %148 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 4];
    store f32* %148 with f32 0;
    f32* %149 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 5];
    store f32* %149 with f32 0;
    f32* %150 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 6];
    store f32* %150 with f32 0;
    f32* %151 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 2][i64 7];
    store f32* %151 with f32 0;
    f32* %152 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 0];
    store f32* %152 with f32 0;
    f32* %153 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 1];
    store f32* %153 with f32 0;
    f32* %154 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 2];
    store f32* %154 with f32 0;
    f32* %155 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 3];
    store f32* %155 with f32 0;
    f32* %156 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 4];
    store f32* %156 with f32 0;
    f32* %157 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 5];
    store f32* %157 with f32 0;
    f32* %158 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 6];
    store f32* %158 with f32 0;
    f32* %159 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 3][i64 7];
    store f32* %159 with f32 0;
    f32* %160 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 0];
    store f32* %160 with f32 0;
    f32* %161 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 1];
    store f32* %161 with f32 0;
    f32* %162 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 2];
    store f32* %162 with f32 0;
    f32* %163 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 3];
    store f32* %163 with f32 0;
    f32* %164 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 4];
    store f32* %164 with f32 0;
    f32* %165 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 5];
    store f32* %165 with f32 0;
    f32* %166 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 6];
    store f32* %166 with f32 0;
    f32* %167 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 4][i64 7];
    store f32* %167 with f32 0;
    f32* %168 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 0];
    store f32* %168 with f32 0;
    f32* %169 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 1];
    store f32* %169 with f32 0;
    f32* %170 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 2];
    store f32* %170 with f32 0;
    f32* %171 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 3];
    store f32* %171 with f32 0;
    f32* %172 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 4];
    store f32* %172 with f32 0;
    f32* %173 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 5];
    store f32* %173 with f32 0;
    f32* %174 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 6];
    store f32* %174 with f32 0;
    f32* %175 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 5][i64 7];
    store f32* %175 with f32 0;
    f32* %176 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 0];
    store f32* %176 with f32 0;
    f32* %177 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 1];
    store f32* %177 with f32 0;
    f32* %178 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 2];
    store f32* %178 with f32 0;
    f32* %179 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 3];
    store f32* %179 with f32 0;
    f32* %180 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 4];
    store f32* %180 with f32 0;
    f32* %181 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 5];
    store f32* %181 with f32 0;
    f32* %182 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 6];
    store f32* %182 with f32 0;
    f32* %183 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 6][i64 7];
    store f32* %183 with f32 0;
    f32* %184 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 0];
    store f32* %184 with f32 0;
    f32* %185 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 1];
    store f32* %185 with f32 0;
    f32* %186 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 2];
    store f32* %186 with f32 0;
    f32* %187 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 3];
    store f32* %187 with f32 0;
    f32* %188 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 4];
    store f32* %188 with f32 0;
    f32* %189 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 5];
    store f32* %189 with f32 0;
    f32* %190 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 6];
    store f32* %190 with f32 0;
    f32* %191 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 7][i64 7];
    store f32* %191 with f32 0;
    i32 %192 = call () -> i32 @getint();
    i32 %193 = call () -> i32 @getint();
    i1 %194 = scmp gt i32 %193, i32 0;
    ubr ^while.header;
^while.header:
    i32 %195 = phi [^entry, i32 0] [^b1, i32 %204];
    i1 %196 = scmp lt i32 %195, i32 %192;
    cbr i1 %196(prob = 0.97), ^while.body, ^b;
^b:
    [8 * f32]* %197 = getelementptr &([8 * [8 * f32]]* %test_dct)[i64 0][i64 0];
    [8 * f32]* %198 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i64 0];
    f32 %199 = s2f i32 %192 to f32;
    f32 %200 = fdiv f32 3.14159, f32 %199;
    f32 %201 = s2f i32 %193 to f32;
    f32 %202 = fdiv f32 3.14159, f32 %201;
    ubr ^while.header1;
^while.body:
    cbr i1 %194(prob = 0.97), ^indirect, ^b1;
^indirect:
    [8 * f32]* %203 = getelementptr &([8 * [8 * f32]]* %test_block)[i64 0][i32 %195];
    ubr ^while.body1;
^b1:
    i32 %204 = add i32 %195, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %205 = phi [^b, i32 0] [^b3, i32 %219];
    i1 %206 = scmp lt i32 %205, i32 %192;
    [8 * f32]* %207 = getelementptr &([8 * f32]* %197)[i32 %205];
    f32 %208 = s2f i32 %205 to f32;
    cbr i1 %206(prob = 0.97), ^while.header2, ^b2;
^while.body1:
    i32 %209 = phi [^indirect, i32 0] [^while.body1, i32 %212];
    f32* %210 = getelementptr &([8 * f32]* %203)[i64 0][i32 %209];
    f32 %211 = call () -> f32 @getfloat();
    store f32* %210 with f32 %211;
    i32 %212 = add i32 %209, i32 1;
    i1 %213 = scmp lt i32 %212, i32 %193;
    cbr i1 %213(prob = 0.97), ^while.body1, ^b1;
^b2:
    i1 %214 = scmp gt i32 %193, i32 1;
    ubr ^while.header3;
^while.header2:
    i32 %215 = phi [^while.header1, i32 0] [^b5, i32 %229];
    i1 %216 = scmp lt i32 %215, i32 %193;
    cbr i1 %216(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    f32 %217 = s2f i32 %215 to f32;
    f32* %218 = getelementptr &([8 * f32]* %207)[i64 0][i32 %215];
    store f32* %218 with f32 0;
    ubr ^while.header4;
^b3:
    i32 %219 = add i32 %205, i32 1;
    ubr ^while.header1;
^while.header3:
    i32 %220 = phi [^b2, i32 0] [^b6, i32 %230];
    i1 %221 = scmp lt i32 %220, i32 %192;
    cbr i1 %221(prob = 0.97), ^while.body3, ^b4;
^while.header4:
    i32 %222 = phi [^while.body2, i32 0] [^b7, i32 %242];
    i1 %223 = scmp lt i32 %222, i32 %192;
    cbr i1 %223(prob = 0.97), ^while.body4, ^b5;
^b4:
    call (i32) -> void @putch(i32 10);
    [8 * f32]* %224 = getelementptr &([8 * [8 * f32]]* %test_idct)[i64 0][i64 0];
    i1 %225 = scmp gt i32 %192, i32 1;
    ubr ^while.header5;
^while.body3:
    [8 * f32]* %226 = getelementptr &([8 * f32]* %197)[i32 %220];
    f32* %227 = getelementptr &([8 * f32]* %226)[i64 0][i64 0];
    f32 %228 = load f32* %227;
    call (f32) -> void @putfloat(f32 %228);
    cbr i1 %214(prob = 0.97), ^while.body5, ^b6;
^b5:
    i32 %229 = add i32 %215, i32 1;
    ubr ^while.header2;
^while.body4:
    cbr i1 %194(prob = 0.97), ^indirect1, ^b7;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %230 = add i32 %220, i32 1;
    ubr ^while.header3;
^while.body5:
    i32 %231 = phi [^while.body3, i32 1] [^while.body5, i32 %234];
    call (i32) -> void @putch(i32 32);
    f32* %232 = getelementptr &([8 * f32]* %226)[i64 0][i32 %231];
    f32 %233 = load f32* %232;
    call (f32) -> void @putfloat(f32 %233);
    i32 %234 = add i32 %231, i32 1;
    i1 %235 = scmp lt i32 %234, i32 %193;
    cbr i1 %235(prob = 0.97), ^while.body5, ^b6;
^while.header5:
    i32 %236 = phi [^b4, i32 0] [^b9, i32 %263];
    i1 %237 = scmp lt i32 %236, i32 %192;
    [8 * f32]* %238 = getelementptr &([8 * f32]* %224)[i32 %236];
    f32 %239 = s2f i32 %236 to f32;
    f32 %240 = fadd f32 %239, f32 0.5;
    f32 %241 = fmul f32 %200, f32 %240;
    cbr i1 %237(prob = 0.97), ^while.header6, ^while.header7;
^b7:
    i32 %242 = add i32 %222, i32 1;
    ubr ^while.header4;
^indirect1:
    [8 * f32]* %243 = getelementptr &([8 * f32]* %198)[i32 %222];
    f32 %244 = s2f i32 %222 to f32;
    f32 %245 = fadd f32 %244, f32 0.5;
    f32 %246 = fmul f32 %200, f32 %245;
    f32 %247 = fmul f32 %246, f32 %208;
    f32 %248 = fadd f32 %247, f32 1.5708;
    i1 %249 = fcmp gt f32 %248, f32 6.28319;
    i1 %250 = fcmp lt f32 %248, f32 -6.28319;
    i1 %251 = or i1 %249, i1 %250;
    cbr i1 %251(prob = 0.75), ^if.then, ^b8;
^while.header6:
    i32 %252 = phi [^while.header5, i32 0] [^b16, i32 %486];
    i1 %253 = scmp lt i32 %252, i32 %193;
    cbr i1 %253(prob = 0.97), ^while.body6, ^b9;
^while.header7:
    i32 %254 = phi [^while.header5, i32 0] [^b12, i32 %282];
    i1 %255 = scmp lt i32 %254, i32 %192;
    cbr i1 %255(prob = 0.97), ^while.body7, ^b10;
^if.then:
    f32 %256 = fdiv f32 %248, f32 6.28319;
    i32 %257 = f2s f32 %256 to i32;
    f32 %258 = s2f i32 %257 to f32;
    f32 %259 = fmul f32 %258, f32 6.28319;
    f32 %260 = fsub f32 %248, f32 %259;
    ubr ^b8;
^b8:
    f32 %261 = phi [^indirect1, f32 %248] [^if.then, f32 %260];
    i1 %262 = fcmp gt f32 %261, f32 3.14159;
    cbr i1 %262(prob = 0.5), ^if.then1, ^b11;
^b9:
    i32 %263 = add i32 %236, i32 1;
    ubr ^while.header5;
^while.body6:
    f32* %264 = getelementptr &([8 * f32]* %238)[i64 0][i32 %252];
    f32 %265 = load f32* %64;
    f32 %266 = fmul f32 0.25, f32 %265;
    store f32* %264 with f32 %266;
    cbr i1 %225(prob = 0.97), ^while.body8, ^b13;
^while.body7:
    [8 * f32]* %267 = getelementptr &([8 * f32]* %224)[i32 %254];
    f32* %268 = getelementptr &([8 * f32]* %267)[i64 0][i64 0];
    f32 %269 = load f32* %268;
    call (f32) -> void @putfloat(f32 %269);
    cbr i1 %214(prob = 0.97), ^while.body9, ^b12;
^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then1:
    f32 %270 = fsub f32 %261, f32 6.28319;
    ubr ^b11;
^b11:
    f32 %271 = phi [^b8, f32 %261] [^if.then1, f32 %270];
    i1 %272 = fcmp lt f32 %271, f32 -3.14159;
    cbr i1 %272(prob = 0.5), ^if.then2, ^b14;
^while.body8:
    f32 %273 = phi [^while.body6, f32 %266] [^indirect2, f32 %289];
    i32 %274 = phi [^while.body6, i32 1] [^indirect2, i32 %280];
    [8 * f32]* %275 = getelementptr &([8 * f32]* %197)[i32 %274];
    f32* %276 = getelementptr &([8 * f32]* %275)[i64 0][i64 0];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 0.5, f32 %277;
    f32 %279 = fadd f32 %273, f32 %278;
    store f32* %264 with f32 %279;
    i32 %280 = add i32 %274, i32 1;
    i1 %281 = scmp lt i32 %280, i32 %192;
    cbr i1 %281(prob = 0.97), ^indirect2, ^b13;
^b12:
    call (i32) -> void @putch(i32 10);
    i32 %282 = add i32 %254, i32 1;
    ubr ^while.header7;
^b13:
    cbr i1 %214(prob = 0.97), ^super.header, ^b15;
^while.body9:
    i32 %283 = phi [^while.body7, i32 1] [^while.body9, i32 %286];
    call (i32) -> void @putch(i32 32);
    f32* %284 = getelementptr &([8 * f32]* %267)[i64 0][i32 %283];
    f32 %285 = load f32* %284;
    call (f32) -> void @putfloat(f32 %285);
    i32 %286 = add i32 %283, i32 1;
    i1 %287 = scmp lt i32 %286, i32 %193;
    cbr i1 %287(prob = 0.97), ^while.body9, ^b12;
^if.then2:
    f32 %288 = fadd f32 %271, f32 6.28319;
    ubr ^b14;
^indirect2:
    f32 %289 = load f32* %264;
    ubr ^while.body8;
^b14:
    f32 %290 = phi [^b11, f32 %271] [^if.then2, f32 %288];
    f32 %291 = call (f32) -> f32 @my_sin_impl(f32 %290);
    ubr ^while.body11;
^b15:
    f32 %292 = s2f i32 %252 to f32;
    f32 %293 = fadd f32 %292, f32 0.5;
    f32 %294 = fmul f32 %202, f32 %293;
    ubr ^while.header8;
^super.header:
    i32 %295 = phi [^b13, i32 1] [^while.body10, i32 %296];
    i32 %296 = add i32 %295, i32 16;
    i1 %297 = scmp lt i32 %296, i32 %193;
    cbr i1 %297(prob = 0.67), ^while.body10, ^super.header1;
^while.body10:
    f32 %298 = load f32* %264;
    f32* %299 = getelementptr &([8 * f32]* %197)[i64 0][i32 %295];
    f32 %300 = load f32* %299;
    f32 %301 = fmul f32 0.5, f32 %300;
    f32 %302 = fadd f32 %298, f32 %301;
    store f32* %264 with f32 %302;
    f32 %303 = load f32* %264;
    f32* %304 = getelementptr &(f32* %299)[i64 1];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 0.5, f32 %305;
    f32 %307 = fadd f32 %303, f32 %306;
    store f32* %264 with f32 %307;
    f32 %308 = load f32* %264;
    f32* %309 = getelementptr &(f32* %299)[i64 2];
    f32 %310 = load f32* %309;
    f32 %311 = fmul f32 0.5, f32 %310;
    f32 %312 = fadd f32 %308, f32 %311;
    store f32* %264 with f32 %312;
    f32 %313 = load f32* %264;
    f32* %314 = getelementptr &(f32* %299)[i64 3];
    f32 %315 = load f32* %314;
    f32 %316 = fmul f32 0.5, f32 %315;
    f32 %317 = fadd f32 %313, f32 %316;
    store f32* %264 with f32 %317;
    f32 %318 = load f32* %264;
    f32* %319 = getelementptr &(f32* %299)[i64 4];
    f32 %320 = load f32* %319;
    f32 %321 = fmul f32 0.5, f32 %320;
    f32 %322 = fadd f32 %318, f32 %321;
    store f32* %264 with f32 %322;
    f32 %323 = load f32* %264;
    f32* %324 = getelementptr &(f32* %299)[i64 5];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 0.5, f32 %325;
    f32 %327 = fadd f32 %323, f32 %326;
    store f32* %264 with f32 %327;
    f32 %328 = load f32* %264;
    f32* %329 = getelementptr &(f32* %299)[i64 6];
    f32 %330 = load f32* %329;
    f32 %331 = fmul f32 0.5, f32 %330;
    f32 %332 = fadd f32 %328, f32 %331;
    store f32* %264 with f32 %332;
    f32 %333 = load f32* %264;
    f32* %334 = getelementptr &(f32* %299)[i64 7];
    f32 %335 = load f32* %334;
    f32 %336 = fmul f32 0.5, f32 %335;
    f32 %337 = fadd f32 %333, f32 %336;
    store f32* %264 with f32 %337;
    f32 %338 = load f32* %264;
    f32* %339 = getelementptr &(f32* %299)[i64 8];
    f32 %340 = load f32* %339;
    f32 %341 = fmul f32 0.5, f32 %340;
    f32 %342 = fadd f32 %338, f32 %341;
    store f32* %264 with f32 %342;
    f32 %343 = load f32* %264;
    f32* %344 = getelementptr &(f32* %299)[i64 9];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 0.5, f32 %345;
    f32 %347 = fadd f32 %343, f32 %346;
    store f32* %264 with f32 %347;
    f32 %348 = load f32* %264;
    f32* %349 = getelementptr &(f32* %299)[i64 10];
    f32 %350 = load f32* %349;
    f32 %351 = fmul f32 0.5, f32 %350;
    f32 %352 = fadd f32 %348, f32 %351;
    store f32* %264 with f32 %352;
    f32 %353 = load f32* %264;
    f32* %354 = getelementptr &(f32* %299)[i64 11];
    f32 %355 = load f32* %354;
    f32 %356 = fmul f32 0.5, f32 %355;
    f32 %357 = fadd f32 %353, f32 %356;
    store f32* %264 with f32 %357;
    f32 %358 = load f32* %264;
    f32* %359 = getelementptr &(f32* %299)[i64 12];
    f32 %360 = load f32* %359;
    f32 %361 = fmul f32 0.5, f32 %360;
    f32 %362 = fadd f32 %358, f32 %361;
    store f32* %264 with f32 %362;
    f32 %363 = load f32* %264;
    f32* %364 = getelementptr &(f32* %299)[i64 13];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 0.5, f32 %365;
    f32 %367 = fadd f32 %363, f32 %366;
    store f32* %264 with f32 %367;
    f32 %368 = load f32* %264;
    f32* %369 = getelementptr &(f32* %299)[i64 14];
    f32 %370 = load f32* %369;
    f32 %371 = fmul f32 0.5, f32 %370;
    f32 %372 = fadd f32 %368, f32 %371;
    store f32* %264 with f32 %372;
    f32 %373 = load f32* %264;
    f32* %374 = getelementptr &(f32* %299)[i64 15];
    f32 %375 = load f32* %374;
    f32 %376 = fmul f32 0.5, f32 %375;
    f32 %377 = fadd f32 %373, f32 %376;
    store f32* %264 with f32 %377;
    ubr ^super.header;
^while.body11:
    i32 %378 = phi [^b14, i32 0] [^b21, i32 %603];
    f32 %379 = load f32* %218;
    f32* %380 = getelementptr &([8 * f32]* %243)[i64 0][i32 %378];
    f32 %381 = load f32* %380;
    f32 %382 = fmul f32 %381, f32 %291;
    f32 %383 = s2f i32 %378 to f32;
    f32 %384 = fadd f32 %383, f32 0.5;
    f32 %385 = fmul f32 %202, f32 %384;
    f32 %386 = fmul f32 %385, f32 %217;
    f32 %387 = fadd f32 %386, f32 1.5708;
    i1 %388 = fcmp gt f32 %387, f32 6.28319;
    i1 %389 = fcmp lt f32 %387, f32 -6.28319;
    i1 %390 = or i1 %388, i1 %389;
    cbr i1 %390(prob = 0.75), ^if.then3, ^b17;
^super.header1:
    i32 %391 = phi [^super.header, i32 %295] [^while.body12, i32 %392];
    i32 %392 = add i32 %391, i32 16;
    i1 %393 = scmp lt i32 %392, i32 %193;
    cbr i1 %393(prob = 0.67), ^while.body12, ^super.header2;
^while.header8:
    i32 %394 = phi [^b15, i32 1] [^b18, i32 %573];
    i1 %395 = scmp lt i32 %394, i32 %192;
    cbr i1 %395(prob = 0.97), ^while.body13, ^b16;
^if.then3:
    f32 %396 = fdiv f32 %387, f32 6.28319;
    i32 %397 = f2s f32 %396 to i32;
    f32 %398 = s2f i32 %397 to f32;
    f32 %399 = fmul f32 %398, f32 6.28319;
    f32 %400 = fsub f32 %387, f32 %399;
    ubr ^b17;
^while.body12:
    f32 %401 = load f32* %264;
    f32* %402 = getelementptr &([8 * f32]* %197)[i64 0][i32 %391];
    f32 %403 = load f32* %402;
    f32 %404 = fmul f32 0.5, f32 %403;
    f32 %405 = fadd f32 %401, f32 %404;
    store f32* %264 with f32 %405;
    f32 %406 = load f32* %264;
    f32* %407 = getelementptr &(f32* %402)[i64 1];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 0.5, f32 %408;
    f32 %410 = fadd f32 %406, f32 %409;
    store f32* %264 with f32 %410;
    f32 %411 = load f32* %264;
    f32* %412 = getelementptr &(f32* %402)[i64 2];
    f32 %413 = load f32* %412;
    f32 %414 = fmul f32 0.5, f32 %413;
    f32 %415 = fadd f32 %411, f32 %414;
    store f32* %264 with f32 %415;
    f32 %416 = load f32* %264;
    f32* %417 = getelementptr &(f32* %402)[i64 3];
    f32 %418 = load f32* %417;
    f32 %419 = fmul f32 0.5, f32 %418;
    f32 %420 = fadd f32 %416, f32 %419;
    store f32* %264 with f32 %420;
    f32 %421 = load f32* %264;
    f32* %422 = getelementptr &(f32* %402)[i64 4];
    f32 %423 = load f32* %422;
    f32 %424 = fmul f32 0.5, f32 %423;
    f32 %425 = fadd f32 %421, f32 %424;
    store f32* %264 with f32 %425;
    f32 %426 = load f32* %264;
    f32* %427 = getelementptr &(f32* %402)[i64 5];
    f32 %428 = load f32* %427;
    f32 %429 = fmul f32 0.5, f32 %428;
    f32 %430 = fadd f32 %426, f32 %429;
    store f32* %264 with f32 %430;
    f32 %431 = load f32* %264;
    f32* %432 = getelementptr &(f32* %402)[i64 6];
    f32 %433 = load f32* %432;
    f32 %434 = fmul f32 0.5, f32 %433;
    f32 %435 = fadd f32 %431, f32 %434;
    store f32* %264 with f32 %435;
    f32 %436 = load f32* %264;
    f32* %437 = getelementptr &(f32* %402)[i64 7];
    f32 %438 = load f32* %437;
    f32 %439 = fmul f32 0.5, f32 %438;
    f32 %440 = fadd f32 %436, f32 %439;
    store f32* %264 with f32 %440;
    f32 %441 = load f32* %264;
    f32* %442 = getelementptr &(f32* %402)[i64 8];
    f32 %443 = load f32* %442;
    f32 %444 = fmul f32 0.5, f32 %443;
    f32 %445 = fadd f32 %441, f32 %444;
    store f32* %264 with f32 %445;
    f32 %446 = load f32* %264;
    f32* %447 = getelementptr &(f32* %402)[i64 9];
    f32 %448 = load f32* %447;
    f32 %449 = fmul f32 0.5, f32 %448;
    f32 %450 = fadd f32 %446, f32 %449;
    store f32* %264 with f32 %450;
    f32 %451 = load f32* %264;
    f32* %452 = getelementptr &(f32* %402)[i64 10];
    f32 %453 = load f32* %452;
    f32 %454 = fmul f32 0.5, f32 %453;
    f32 %455 = fadd f32 %451, f32 %454;
    store f32* %264 with f32 %455;
    f32 %456 = load f32* %264;
    f32* %457 = getelementptr &(f32* %402)[i64 11];
    f32 %458 = load f32* %457;
    f32 %459 = fmul f32 0.5, f32 %458;
    f32 %460 = fadd f32 %456, f32 %459;
    store f32* %264 with f32 %460;
    f32 %461 = load f32* %264;
    f32* %462 = getelementptr &(f32* %402)[i64 12];
    f32 %463 = load f32* %462;
    f32 %464 = fmul f32 0.5, f32 %463;
    f32 %465 = fadd f32 %461, f32 %464;
    store f32* %264 with f32 %465;
    f32 %466 = load f32* %264;
    f32* %467 = getelementptr &(f32* %402)[i64 13];
    f32 %468 = load f32* %467;
    f32 %469 = fmul f32 0.5, f32 %468;
    f32 %470 = fadd f32 %466, f32 %469;
    store f32* %264 with f32 %470;
    f32 %471 = load f32* %264;
    f32* %472 = getelementptr &(f32* %402)[i64 14];
    f32 %473 = load f32* %472;
    f32 %474 = fmul f32 0.5, f32 %473;
    f32 %475 = fadd f32 %471, f32 %474;
    store f32* %264 with f32 %475;
    f32 %476 = load f32* %264;
    f32* %477 = getelementptr &(f32* %402)[i64 15];
    f32 %478 = load f32* %477;
    f32 %479 = fmul f32 0.5, f32 %478;
    f32 %480 = fadd f32 %476, f32 %479;
    store f32* %264 with f32 %480;
    ubr ^super.header1;
^b16:
    f32 %481 = load f32* %264;
    f32 %482 = fadd f32 %481, f32 %481;
    f32 %483 = fdiv f32 %482, f32 %199;
    f32 %484 = fadd f32 %483, f32 %483;
    f32 %485 = fdiv f32 %484, f32 %201;
    store f32* %264 with f32 %485;
    i32 %486 = add i32 %252, i32 1;
    ubr ^while.header6;
^b17:
    f32 %487 = phi [^while.body11, f32 %387] [^if.then3, f32 %400];
    i1 %488 = fcmp gt f32 %487, f32 3.14159;
    cbr i1 %488(prob = 0.5), ^if.then4, ^b19;
^while.body13:
    cbr i1 %214(prob = 0.97), ^indirect3, ^b18;
^super.header2:
    i32 %489 = phi [^super.header1, i32 %391] [^while.body14, i32 %490];
    i32 %490 = add i32 %489, i32 16;
    i1 %491 = scmp lt i32 %490, i32 %193;
    cbr i1 %491(prob = 0.67), ^while.body14, ^while.body15;
^if.then4:
    f32 %492 = fsub f32 %487, f32 6.28319;
    ubr ^b19;
^while.body14:
    f32 %493 = load f32* %264;
    f32* %494 = getelementptr &([8 * f32]* %197)[i64 0][i32 %489];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 0.5, f32 %495;
    f32 %497 = fadd f32 %493, f32 %496;
    store f32* %264 with f32 %497;
    f32 %498 = load f32* %264;
    f32* %499 = getelementptr &(f32* %494)[i64 1];
    f32 %500 = load f32* %499;
    f32 %501 = fmul f32 0.5, f32 %500;
    f32 %502 = fadd f32 %498, f32 %501;
    store f32* %264 with f32 %502;
    f32 %503 = load f32* %264;
    f32* %504 = getelementptr &(f32* %494)[i64 2];
    f32 %505 = load f32* %504;
    f32 %506 = fmul f32 0.5, f32 %505;
    f32 %507 = fadd f32 %503, f32 %506;
    store f32* %264 with f32 %507;
    f32 %508 = load f32* %264;
    f32* %509 = getelementptr &(f32* %494)[i64 3];
    f32 %510 = load f32* %509;
    f32 %511 = fmul f32 0.5, f32 %510;
    f32 %512 = fadd f32 %508, f32 %511;
    store f32* %264 with f32 %512;
    f32 %513 = load f32* %264;
    f32* %514 = getelementptr &(f32* %494)[i64 4];
    f32 %515 = load f32* %514;
    f32 %516 = fmul f32 0.5, f32 %515;
    f32 %517 = fadd f32 %513, f32 %516;
    store f32* %264 with f32 %517;
    f32 %518 = load f32* %264;
    f32* %519 = getelementptr &(f32* %494)[i64 5];
    f32 %520 = load f32* %519;
    f32 %521 = fmul f32 0.5, f32 %520;
    f32 %522 = fadd f32 %518, f32 %521;
    store f32* %264 with f32 %522;
    f32 %523 = load f32* %264;
    f32* %524 = getelementptr &(f32* %494)[i64 6];
    f32 %525 = load f32* %524;
    f32 %526 = fmul f32 0.5, f32 %525;
    f32 %527 = fadd f32 %523, f32 %526;
    store f32* %264 with f32 %527;
    f32 %528 = load f32* %264;
    f32* %529 = getelementptr &(f32* %494)[i64 7];
    f32 %530 = load f32* %529;
    f32 %531 = fmul f32 0.5, f32 %530;
    f32 %532 = fadd f32 %528, f32 %531;
    store f32* %264 with f32 %532;
    f32 %533 = load f32* %264;
    f32* %534 = getelementptr &(f32* %494)[i64 8];
    f32 %535 = load f32* %534;
    f32 %536 = fmul f32 0.5, f32 %535;
    f32 %537 = fadd f32 %533, f32 %536;
    store f32* %264 with f32 %537;
    f32 %538 = load f32* %264;
    f32* %539 = getelementptr &(f32* %494)[i64 9];
    f32 %540 = load f32* %539;
    f32 %541 = fmul f32 0.5, f32 %540;
    f32 %542 = fadd f32 %538, f32 %541;
    store f32* %264 with f32 %542;
    f32 %543 = load f32* %264;
    f32* %544 = getelementptr &(f32* %494)[i64 10];
    f32 %545 = load f32* %544;
    f32 %546 = fmul f32 0.5, f32 %545;
    f32 %547 = fadd f32 %543, f32 %546;
    store f32* %264 with f32 %547;
    f32 %548 = load f32* %264;
    f32* %549 = getelementptr &(f32* %494)[i64 11];
    f32 %550 = load f32* %549;
    f32 %551 = fmul f32 0.5, f32 %550;
    f32 %552 = fadd f32 %548, f32 %551;
    store f32* %264 with f32 %552;
    f32 %553 = load f32* %264;
    f32* %554 = getelementptr &(f32* %494)[i64 12];
    f32 %555 = load f32* %554;
    f32 %556 = fmul f32 0.5, f32 %555;
    f32 %557 = fadd f32 %553, f32 %556;
    store f32* %264 with f32 %557;
    f32 %558 = load f32* %264;
    f32* %559 = getelementptr &(f32* %494)[i64 13];
    f32 %560 = load f32* %559;
    f32 %561 = fmul f32 0.5, f32 %560;
    f32 %562 = fadd f32 %558, f32 %561;
    store f32* %264 with f32 %562;
    f32 %563 = load f32* %264;
    f32* %564 = getelementptr &(f32* %494)[i64 14];
    f32 %565 = load f32* %564;
    f32 %566 = fmul f32 0.5, f32 %565;
    f32 %567 = fadd f32 %563, f32 %566;
    store f32* %264 with f32 %567;
    f32 %568 = load f32* %264;
    f32* %569 = getelementptr &(f32* %494)[i64 15];
    f32 %570 = load f32* %569;
    f32 %571 = fmul f32 0.5, f32 %570;
    f32 %572 = fadd f32 %568, f32 %571;
    store f32* %264 with f32 %572;
    ubr ^super.header2;
^b18:
    i32 %573 = add i32 %394, i32 1;
    ubr ^while.header8;
^indirect3:
    [8 * f32]* %574 = getelementptr &([8 * f32]* %197)[i32 %394];
    f32 %575 = s2f i32 %394 to f32;
    f32 %576 = fmul f32 %241, f32 %575;
    f32 %577 = fadd f32 %576, f32 1.5708;
    i1 %578 = fcmp gt f32 %577, f32 6.28319;
    i1 %579 = fcmp lt f32 %577, f32 -6.28319;
    i1 %580 = or i1 %578, i1 %579;
    cbr i1 %580(prob = 0.75), ^if.then5, ^b20;
^b19:
    f32 %581 = phi [^b17, f32 %487] [^if.then4, f32 %492];
    i1 %582 = fcmp lt f32 %581, f32 -3.14159;
    cbr i1 %582(prob = 0.5), ^if.then6, ^b21;
^while.body15:
    i32 %583 = phi [^super.header2, i32 %489] [^while.body15, i32 %589];
    f32 %584 = load f32* %264;
    f32* %585 = getelementptr &([8 * f32]* %197)[i64 0][i32 %583];
    f32 %586 = load f32* %585;
    f32 %587 = fmul f32 0.5, f32 %586;
    f32 %588 = fadd f32 %584, f32 %587;
    store f32* %264 with f32 %588;
    i32 %589 = add i32 %583, i32 1;
    i1 %590 = scmp lt i32 %589, i32 %193;
    cbr i1 %590(prob = 0.97), ^while.body15, ^b15;
^if.then5:
    f32 %591 = fdiv f32 %577, f32 6.28319;
    i32 %592 = f2s f32 %591 to i32;
    f32 %593 = s2f i32 %592 to f32;
    f32 %594 = fmul f32 %593, f32 6.28319;
    f32 %595 = fsub f32 %577, f32 %594;
    ubr ^b20;
^if.then6:
    f32 %596 = fadd f32 %581, f32 6.28319;
    ubr ^b21;
^b20:
    f32 %597 = phi [^indirect3, f32 %577] [^if.then5, f32 %595];
    i1 %598 = fcmp gt f32 %597, f32 3.14159;
    cbr i1 %598(prob = 0.5), ^if.then7, ^b22;
^b21:
    f32 %599 = phi [^b19, f32 %581] [^if.then6, f32 %596];
    f32 %600 = call (f32) -> f32 @my_sin_impl(f32 %599);
    f32 %601 = fmul f32 %382, f32 %600;
    f32 %602 = fadd f32 %379, f32 %601;
    store f32* %218 with f32 %602;
    i32 %603 = add i32 %378, i32 1;
    i1 %604 = scmp lt i32 %603, i32 %193;
    cbr i1 %604(prob = 0.97), ^while.body11, ^b7;
^if.then7:
    f32 %605 = fsub f32 %597, f32 6.28319;
    ubr ^b22;
^b22:
    f32 %606 = phi [^b20, f32 %597] [^if.then7, f32 %605];
    i1 %607 = fcmp lt f32 %606, f32 -3.14159;
    cbr i1 %607(prob = 0.5), ^if.then8, ^b23;
^if.then8:
    f32 %608 = fadd f32 %606, f32 6.28319;
    ubr ^b23;
^b23:
    f32 %609 = phi [^b22, f32 %606] [^if.then8, f32 %608];
    f32 %610 = call (f32) -> f32 @my_sin_impl(f32 %609);
    ubr ^while.body16;
^while.body16:
    i32 %611 = phi [^b23, i32 1] [^b26, i32 %637];
    f32 %612 = load f32* %264;
    f32* %613 = getelementptr &([8 * f32]* %574)[i64 0][i32 %611];
    f32 %614 = load f32* %613;
    f32 %615 = fmul f32 %614, f32 %610;
    f32 %616 = s2f i32 %611 to f32;
    f32 %617 = fmul f32 %294, f32 %616;
    f32 %618 = fadd f32 %617, f32 1.5708;
    i1 %619 = fcmp gt f32 %618, f32 6.28319;
    i1 %620 = fcmp lt f32 %618, f32 -6.28319;
    i1 %621 = or i1 %619, i1 %620;
    cbr i1 %621(prob = 0.75), ^if.then9, ^b24;
^if.then9:
    f32 %622 = fdiv f32 %618, f32 6.28319;
    i32 %623 = f2s f32 %622 to i32;
    f32 %624 = s2f i32 %623 to f32;
    f32 %625 = fmul f32 %624, f32 6.28319;
    f32 %626 = fsub f32 %618, f32 %625;
    ubr ^b24;
^b24:
    f32 %627 = phi [^while.body16, f32 %618] [^if.then9, f32 %626];
    i1 %628 = fcmp gt f32 %627, f32 3.14159;
    cbr i1 %628(prob = 0.5), ^if.then10, ^b25;
^if.then10:
    f32 %629 = fsub f32 %627, f32 6.28319;
    ubr ^b25;
^b25:
    f32 %630 = phi [^b24, f32 %627] [^if.then10, f32 %629];
    i1 %631 = fcmp lt f32 %630, f32 -3.14159;
    cbr i1 %631(prob = 0.5), ^if.then11, ^b26;
^if.then11:
    f32 %632 = fadd f32 %630, f32 6.28319;
    ubr ^b26;
^b26:
    f32 %633 = phi [^b25, f32 %630] [^if.then11, f32 %632];
    f32 %634 = call (f32) -> f32 @my_sin_impl(f32 %633);
    f32 %635 = fmul f32 %615, f32 %634;
    f32 %636 = fadd f32 %612, f32 %635;
    store f32* %264 with f32 %636;
    i32 %637 = add i32 %611, i32 1;
    i1 %638 = scmp lt i32 %637, i32 %193;
    cbr i1 %638(prob = 0.97), ^while.body16, ^b18;
}
