internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp lt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i32 %2 = srem i32 %1, i32 2;
    i1 %3 = scmp lt i32 %2, i32 0;
    i32 %4 = neg i32 %2;
    i32 %5 = select i1 %3 ? i32 %4 : i32 %2;
    i1 %6 = scmp eq i32 %5, i32 0;
    i32 %7 = srem i32 %n, i32 2;
    i1 %8 = scmp lt i32 %7, i32 0;
    i32 %9 = neg i32 %7;
    i32 %10 = select i1 %8 ? i32 %9 : i32 %7;
    i1 %11 = scmp neq i32 %10, i32 0;
    i1 %12 = and i1 %6, i1 %11;
    i1 %13 = scmp neq i32 %5, i32 0;
    i1 %14 = or i1 %12, i1 %13;
    i32 %15 = sdiv i32 %n, i32 4;
    i32 %16 = srem i32 %15, i32 2;
    i1 %17 = scmp lt i32 %16, i32 0;
    i32 %18 = neg i32 %16;
    i32 %19 = select i1 %17 ? i32 %18 : i32 %16;
    i1 %20 = scmp eq i32 %19, i32 0;
    i1 %21 = and i1 %14, i1 %20;
    i1 %22 = scmp neq i32 %19, i32 0;
    i1 %23 = or i1 %21, i1 %22;
    i32 %24 = sdiv i32 %n, i32 8;
    i32 %25 = srem i32 %24, i32 2;
    i1 %26 = scmp lt i32 %25, i32 0;
    i32 %27 = neg i32 %25;
    i32 %28 = select i1 %26 ? i32 %27 : i32 %25;
    i1 %29 = scmp eq i32 %28, i32 0;
    i1 %30 = and i1 %23, i1 %29;
    i1 %31 = scmp neq i32 %28, i32 0;
    i1 %32 = or i1 %30, i1 %31;
    i32 %33 = sdiv i32 %n, i32 16;
    i32 %34 = srem i32 %33, i32 2;
    i1 %35 = scmp lt i32 %34, i32 0;
    i32 %36 = neg i32 %34;
    i32 %37 = select i1 %35 ? i32 %36 : i32 %34;
    i1 %38 = scmp eq i32 %37, i32 0;
    i1 %39 = and i1 %32, i1 %38;
    i1 %40 = scmp neq i32 %37, i32 0;
    i1 %41 = or i1 %39, i1 %40;
    i32 %42 = sdiv i32 %n, i32 32;
    i32 %43 = srem i32 %42, i32 2;
    i1 %44 = scmp lt i32 %43, i32 0;
    i32 %45 = neg i32 %43;
    i32 %46 = select i1 %44 ? i32 %45 : i32 %43;
    i1 %47 = scmp eq i32 %46, i32 0;
    i1 %48 = and i1 %41, i1 %47;
    i1 %49 = scmp neq i32 %46, i32 0;
    i1 %50 = or i1 %48, i1 %49;
    i32 %51 = sdiv i32 %n, i32 64;
    i32 %52 = srem i32 %51, i32 2;
    i1 %53 = scmp lt i32 %52, i32 0;
    i32 %54 = neg i32 %52;
    i32 %55 = select i1 %53 ? i32 %54 : i32 %52;
    i1 %56 = scmp eq i32 %55, i32 0;
    i1 %57 = and i1 %50, i1 %56;
    i1 %58 = scmp neq i32 %55, i32 0;
    i1 %59 = or i1 %57, i1 %58;
    i32 %60 = sdiv i32 %n, i32 128;
    i32 %61 = srem i32 %60, i32 2;
    i1 %62 = scmp lt i32 %61, i32 0;
    i32 %63 = neg i32 %61;
    i32 %64 = select i1 %62 ? i32 %63 : i32 %61;
    i1 %65 = scmp eq i32 %64, i32 0;
    i1 %66 = and i1 %59, i1 %65;
    i1 %67 = scmp neq i32 %64, i32 0;
    i1 %68 = or i1 %66, i1 %67;
    i32 %69 = sdiv i32 %n, i32 256;
    i32 %70 = srem i32 %69, i32 2;
    i1 %71 = scmp lt i32 %70, i32 0;
    i32 %72 = neg i32 %70;
    i32 %73 = select i1 %71 ? i32 %72 : i32 %70;
    i1 %74 = scmp eq i32 %73, i32 0;
    i1 %75 = and i1 %68, i1 %74;
    i1 %76 = scmp neq i32 %73, i32 0;
    i1 %77 = or i1 %75, i1 %76;
    i32 %78 = sdiv i32 %n, i32 512;
    i32 %79 = srem i32 %78, i32 2;
    i1 %80 = scmp lt i32 %79, i32 0;
    i32 %81 = neg i32 %79;
    i32 %82 = select i1 %80 ? i32 %81 : i32 %79;
    i1 %83 = scmp eq i32 %82, i32 0;
    i1 %84 = and i1 %77, i1 %83;
    i1 %85 = scmp neq i32 %82, i32 0;
    i1 %86 = or i1 %84, i1 %85;
    i32 %87 = sdiv i32 %n, i32 1024;
    i32 %88 = srem i32 %87, i32 2;
    i1 %89 = scmp lt i32 %88, i32 0;
    i32 %90 = neg i32 %88;
    i32 %91 = select i1 %89 ? i32 %90 : i32 %88;
    i1 %92 = scmp eq i32 %91, i32 0;
    i1 %93 = and i1 %86, i1 %92;
    i1 %94 = scmp neq i32 %91, i32 0;
    i1 %95 = or i1 %93, i1 %94;
    i32 %96 = sdiv i32 %n, i32 2048;
    i32 %97 = srem i32 %96, i32 2;
    i1 %98 = scmp lt i32 %97, i32 0;
    i32 %99 = neg i32 %97;
    i32 %100 = select i1 %98 ? i32 %99 : i32 %97;
    i1 %101 = scmp eq i32 %100, i32 0;
    i1 %102 = and i1 %95, i1 %101;
    i1 %103 = scmp neq i32 %100, i32 0;
    i1 %104 = or i1 %102, i1 %103;
    i32 %105 = sdiv i32 %n, i32 4096;
    i32 %106 = srem i32 %105, i32 2;
    i1 %107 = scmp lt i32 %106, i32 0;
    i32 %108 = neg i32 %106;
    i32 %109 = select i1 %107 ? i32 %108 : i32 %106;
    i1 %110 = scmp eq i32 %109, i32 0;
    i1 %111 = and i1 %104, i1 %110;
    i1 %112 = scmp neq i32 %109, i32 0;
    i1 %113 = or i1 %111, i1 %112;
    i32 %114 = sdiv i32 %n, i32 8192;
    i32 %115 = srem i32 %114, i32 2;
    i1 %116 = scmp lt i32 %115, i32 0;
    i32 %117 = neg i32 %115;
    i32 %118 = select i1 %116 ? i32 %117 : i32 %115;
    i1 %119 = scmp eq i32 %118, i32 0;
    i1 %120 = and i1 %113, i1 %119;
    i1 %121 = scmp neq i32 %118, i32 0;
    i1 %122 = or i1 %120, i1 %121;
    i32 %123 = sdiv i32 %n, i32 16384;
    i32 %124 = srem i32 %123, i32 2;
    i1 %125 = scmp lt i32 %124, i32 0;
    i32 %126 = neg i32 %124;
    i32 %127 = select i1 %125 ? i32 %126 : i32 %124;
    i1 %128 = scmp eq i32 %127, i32 0;
    i1 %129 = and i1 %122, i1 %128;
    i1 %130 = scmp neq i32 %127, i32 0;
    i1 %131 = or i1 %129, i1 %130;
    i32 %132 = sdiv i32 %n, i32 32768;
    i32 %133 = srem i32 %132, i32 2;
    i1 %134 = scmp lt i32 %133, i32 0;
    i32 %135 = neg i32 %133;
    i32 %136 = select i1 %134 ? i32 %135 : i32 %133;
    i1 %137 = scmp eq i32 %136, i32 0;
    i1 %138 = and i1 %131, i1 %137;
    i1 %139 = xor i1 %138, i1 true;
    i1 %140 = or i1 %131, i1 %137;
    i1 %141 = and i1 %139, i1 %140;
    i32 %142 = zext i1 %141 to i32;
    i32 %143 = mul i32 %142, i32 2;
    i1 %144 = xor i1 %129, i1 true;
    i1 %145 = or i1 %122, i1 %128;
    i1 %146 = and i1 %144, i1 %145;
    i32 %147 = zext i1 %146 to i32;
    i32 %148 = add i32 %143, i32 %147;
    i32 %149 = mul i32 %148, i32 2;
    i1 %150 = xor i1 %120, i1 true;
    i1 %151 = or i1 %113, i1 %119;
    i1 %152 = and i1 %150, i1 %151;
    i32 %153 = zext i1 %152 to i32;
    i32 %154 = add i32 %149, i32 %153;
    i32 %155 = mul i32 %154, i32 2;
    i1 %156 = xor i1 %111, i1 true;
    i1 %157 = or i1 %104, i1 %110;
    i1 %158 = and i1 %156, i1 %157;
    i32 %159 = zext i1 %158 to i32;
    i32 %160 = add i32 %155, i32 %159;
    i32 %161 = mul i32 %160, i32 2;
    i1 %162 = xor i1 %102, i1 true;
    i1 %163 = or i1 %95, i1 %101;
    i1 %164 = and i1 %162, i1 %163;
    i32 %165 = zext i1 %164 to i32;
    i32 %166 = add i32 %161, i32 %165;
    i32 %167 = mul i32 %166, i32 2;
    i1 %168 = xor i1 %93, i1 true;
    i1 %169 = or i1 %86, i1 %92;
    i1 %170 = and i1 %168, i1 %169;
    i32 %171 = zext i1 %170 to i32;
    i32 %172 = add i32 %167, i32 %171;
    i32 %173 = mul i32 %172, i32 2;
    i1 %174 = xor i1 %84, i1 true;
    i1 %175 = or i1 %77, i1 %83;
    i1 %176 = and i1 %174, i1 %175;
    i32 %177 = zext i1 %176 to i32;
    i32 %178 = add i32 %173, i32 %177;
    i32 %179 = mul i32 %178, i32 2;
    i1 %180 = xor i1 %75, i1 true;
    i1 %181 = or i1 %68, i1 %74;
    i1 %182 = and i1 %180, i1 %181;
    i32 %183 = zext i1 %182 to i32;
    i32 %184 = add i32 %179, i32 %183;
    i32 %185 = mul i32 %184, i32 2;
    i1 %186 = xor i1 %66, i1 true;
    i1 %187 = or i1 %59, i1 %65;
    i1 %188 = and i1 %186, i1 %187;
    i32 %189 = zext i1 %188 to i32;
    i32 %190 = add i32 %185, i32 %189;
    i32 %191 = mul i32 %190, i32 2;
    i1 %192 = xor i1 %57, i1 true;
    i1 %193 = or i1 %50, i1 %56;
    i1 %194 = and i1 %192, i1 %193;
    i32 %195 = zext i1 %194 to i32;
    i32 %196 = add i32 %191, i32 %195;
    i32 %197 = mul i32 %196, i32 2;
    i1 %198 = xor i1 %48, i1 true;
    i1 %199 = or i1 %41, i1 %47;
    i1 %200 = and i1 %198, i1 %199;
    i32 %201 = zext i1 %200 to i32;
    i32 %202 = add i32 %197, i32 %201;
    i32 %203 = mul i32 %202, i32 2;
    i1 %204 = xor i1 %39, i1 true;
    i1 %205 = or i1 %32, i1 %38;
    i1 %206 = and i1 %204, i1 %205;
    i32 %207 = zext i1 %206 to i32;
    i32 %208 = add i32 %203, i32 %207;
    i32 %209 = mul i32 %208, i32 2;
    i1 %210 = xor i1 %30, i1 true;
    i1 %211 = or i1 %23, i1 %29;
    i1 %212 = and i1 %210, i1 %211;
    i32 %213 = zext i1 %212 to i32;
    i32 %214 = add i32 %209, i32 %213;
    i32 %215 = mul i32 %214, i32 2;
    i1 %216 = xor i1 %21, i1 true;
    i1 %217 = or i1 %14, i1 %20;
    i1 %218 = and i1 %216, i1 %217;
    i32 %219 = zext i1 %218 to i32;
    i32 %220 = add i32 %215, i32 %219;
    i32 %221 = mul i32 %220, i32 2;
    i1 %222 = xor i1 %12, i1 true;
    i1 %223 = or i1 %6, i1 %11;
    i1 %224 = and i1 %222, i1 %223;
    i32 %225 = zext i1 %224 to i32;
    i32 %226 = add i32 %221, i32 %225;
    i32 %227 = mul i32 %226, i32 2;
    i1 %228 = scmp eq i32 %10, i32 0;
    i32 %229 = zext i1 %228 to i32;
    i32 %230 = add i32 %227, i32 %229;
    i32 %231 = call (i32) -> i32 @fib(i32 %230);
    i32 %232 = sdiv i32 %231, i32 2;
    i32 %233 = srem i32 %232, i32 2;
    i1 %234 = scmp lt i32 %233, i32 0;
    i32 %235 = neg i32 %233;
    i32 %236 = select i1 %234 ? i32 %235 : i32 %233;
    i1 %237 = scmp neq i32 %236, i32 0;
    i1 %238 = and i1 %13, i1 %20;
    i1 %239 = or i1 %22, i1 %238;
    i1 %240 = and i1 %29, i1 %239;
    i1 %241 = or i1 %31, i1 %240;
    i1 %242 = and i1 %38, i1 %241;
    i1 %243 = or i1 %40, i1 %242;
    i1 %244 = and i1 %47, i1 %243;
    i1 %245 = or i1 %49, i1 %244;
    i1 %246 = and i1 %56, i1 %245;
    i1 %247 = or i1 %58, i1 %246;
    i1 %248 = and i1 %65, i1 %247;
    i1 %249 = or i1 %67, i1 %248;
    i1 %250 = and i1 %74, i1 %249;
    i1 %251 = or i1 %76, i1 %250;
    i1 %252 = and i1 %83, i1 %251;
    i1 %253 = or i1 %85, i1 %252;
    i1 %254 = and i1 %92, i1 %253;
    i1 %255 = or i1 %94, i1 %254;
    i1 %256 = and i1 %101, i1 %255;
    i1 %257 = or i1 %103, i1 %256;
    i1 %258 = and i1 %110, i1 %257;
    i1 %259 = or i1 %112, i1 %258;
    i1 %260 = and i1 %119, i1 %259;
    i1 %261 = or i1 %121, i1 %260;
    i1 %262 = and i1 %128, i1 %261;
    i1 %263 = or i1 %130, i1 %262;
    i1 %264 = and i1 %137, i1 %263;
    i1 %265 = xor i1 %264, i1 true;
    i1 %266 = or i1 %137, i1 %263;
    i1 %267 = and i1 %265, i1 %266;
    i32 %268 = zext i1 %267 to i32;
    i32 %269 = mul i32 %268, i32 2;
    i1 %270 = xor i1 %262, i1 true;
    i1 %271 = or i1 %128, i1 %261;
    i1 %272 = and i1 %270, i1 %271;
    i32 %273 = zext i1 %272 to i32;
    i32 %274 = add i32 %269, i32 %273;
    i32 %275 = mul i32 %274, i32 2;
    i1 %276 = xor i1 %260, i1 true;
    i1 %277 = or i1 %119, i1 %259;
    i1 %278 = and i1 %276, i1 %277;
    i32 %279 = zext i1 %278 to i32;
    i32 %280 = add i32 %275, i32 %279;
    i32 %281 = mul i32 %280, i32 2;
    i1 %282 = xor i1 %258, i1 true;
    i1 %283 = or i1 %110, i1 %257;
    i1 %284 = and i1 %282, i1 %283;
    i32 %285 = zext i1 %284 to i32;
    i32 %286 = add i32 %281, i32 %285;
    i32 %287 = mul i32 %286, i32 2;
    i1 %288 = xor i1 %256, i1 true;
    i1 %289 = or i1 %101, i1 %255;
    i1 %290 = and i1 %288, i1 %289;
    i32 %291 = zext i1 %290 to i32;
    i32 %292 = add i32 %287, i32 %291;
    i32 %293 = mul i32 %292, i32 2;
    i1 %294 = xor i1 %254, i1 true;
    i1 %295 = or i1 %92, i1 %253;
    i1 %296 = and i1 %294, i1 %295;
    i32 %297 = zext i1 %296 to i32;
    i32 %298 = add i32 %293, i32 %297;
    i32 %299 = mul i32 %298, i32 2;
    i1 %300 = xor i1 %252, i1 true;
    i1 %301 = or i1 %83, i1 %251;
    i1 %302 = and i1 %300, i1 %301;
    i32 %303 = zext i1 %302 to i32;
    i32 %304 = add i32 %299, i32 %303;
    i32 %305 = mul i32 %304, i32 2;
    i1 %306 = xor i1 %250, i1 true;
    i1 %307 = or i1 %74, i1 %249;
    i1 %308 = and i1 %306, i1 %307;
    i32 %309 = zext i1 %308 to i32;
    i32 %310 = add i32 %305, i32 %309;
    i32 %311 = mul i32 %310, i32 2;
    i1 %312 = xor i1 %248, i1 true;
    i1 %313 = or i1 %65, i1 %247;
    i1 %314 = and i1 %312, i1 %313;
    i32 %315 = zext i1 %314 to i32;
    i32 %316 = add i32 %311, i32 %315;
    i32 %317 = mul i32 %316, i32 2;
    i1 %318 = xor i1 %246, i1 true;
    i1 %319 = or i1 %56, i1 %245;
    i1 %320 = and i1 %318, i1 %319;
    i32 %321 = zext i1 %320 to i32;
    i32 %322 = add i32 %317, i32 %321;
    i32 %323 = mul i32 %322, i32 2;
    i1 %324 = xor i1 %244, i1 true;
    i1 %325 = or i1 %47, i1 %243;
    i1 %326 = and i1 %324, i1 %325;
    i32 %327 = zext i1 %326 to i32;
    i32 %328 = add i32 %323, i32 %327;
    i32 %329 = mul i32 %328, i32 2;
    i1 %330 = xor i1 %242, i1 true;
    i1 %331 = or i1 %38, i1 %241;
    i1 %332 = and i1 %330, i1 %331;
    i32 %333 = zext i1 %332 to i32;
    i32 %334 = add i32 %329, i32 %333;
    i32 %335 = mul i32 %334, i32 2;
    i1 %336 = xor i1 %240, i1 true;
    i1 %337 = or i1 %29, i1 %239;
    i1 %338 = and i1 %336, i1 %337;
    i32 %339 = zext i1 %338 to i32;
    i32 %340 = add i32 %335, i32 %339;
    i32 %341 = mul i32 %340, i32 2;
    i1 %342 = xor i1 %238, i1 true;
    i1 %343 = or i1 %13, i1 %20;
    i1 %344 = and i1 %342, i1 %343;
    i32 %345 = zext i1 %344 to i32;
    i32 %346 = add i32 %341, i32 %345;
    i32 %347 = mul i32 %346, i32 2;
    i32 %348 = zext i1 %6 to i32;
    i32 %349 = add i32 %347, i32 %348;
    i32 %350 = mul i32 %349, i32 2;
    i32 %351 = zext i1 %11 to i32;
    i32 %352 = add i32 %350, i32 %351;
    i32 %353 = call (i32) -> i32 @fib(i32 %352);
    i32 %354 = sdiv i32 %353, i32 2;
    i32 %355 = srem i32 %354, i32 2;
    i1 %356 = scmp lt i32 %355, i32 0;
    i32 %357 = neg i32 %355;
    i32 %358 = select i1 %356 ? i32 %357 : i32 %355;
    i1 %359 = scmp neq i32 %358, i32 0;
    i1 %360 = and i1 %237, i1 %359;
    i1 %361 = xor i1 %360, i1 true;
    i1 %362 = or i1 %237, i1 %359;
    i1 %363 = and i1 %361, i1 %362;
    i32 %364 = srem i32 %231, i32 2;
    i1 %365 = scmp lt i32 %364, i32 0;
    i32 %366 = neg i32 %364;
    i32 %367 = select i1 %365 ? i32 %366 : i32 %364;
    i1 %368 = scmp neq i32 %367, i32 0;
    i1 %369 = and i1 %363, i1 %368;
    i32 %370 = srem i32 %353, i32 2;
    i1 %371 = scmp lt i32 %370, i32 0;
    i32 %372 = neg i32 %370;
    i32 %373 = select i1 %371 ? i32 %372 : i32 %370;
    i1 %374 = scmp neq i32 %373, i32 0;
    i1 %375 = and i1 %369, i1 %374;
    i1 %376 = or i1 %360, i1 %375;
    i32 %377 = sdiv i32 %231, i32 4;
    i32 %378 = srem i32 %377, i32 2;
    i1 %379 = scmp lt i32 %378, i32 0;
    i32 %380 = neg i32 %378;
    i32 %381 = select i1 %379 ? i32 %380 : i32 %378;
    i1 %382 = scmp neq i32 %381, i32 0;
    i32 %383 = sdiv i32 %353, i32 4;
    i32 %384 = srem i32 %383, i32 2;
    i1 %385 = scmp lt i32 %384, i32 0;
    i32 %386 = neg i32 %384;
    i32 %387 = select i1 %385 ? i32 %386 : i32 %384;
    i1 %388 = scmp neq i32 %387, i32 0;
    i1 %389 = or i1 %382, i1 %388;
    i1 %390 = and i1 %376, i1 %389;
    i1 %391 = and i1 %382, i1 %388;
    i1 %392 = xor i1 %391, i1 true;
    i1 %393 = and i1 %390, i1 %392;
    i1 %394 = or i1 %391, i1 %393;
    i32 %395 = sdiv i32 %231, i32 8;
    i32 %396 = srem i32 %395, i32 2;
    i1 %397 = scmp lt i32 %396, i32 0;
    i32 %398 = neg i32 %396;
    i32 %399 = select i1 %397 ? i32 %398 : i32 %396;
    i1 %400 = scmp neq i32 %399, i32 0;
    i32 %401 = sdiv i32 %353, i32 8;
    i32 %402 = srem i32 %401, i32 2;
    i1 %403 = scmp lt i32 %402, i32 0;
    i32 %404 = neg i32 %402;
    i32 %405 = select i1 %403 ? i32 %404 : i32 %402;
    i1 %406 = scmp neq i32 %405, i32 0;
    i1 %407 = or i1 %400, i1 %406;
    i1 %408 = and i1 %394, i1 %407;
    i1 %409 = and i1 %400, i1 %406;
    i1 %410 = xor i1 %409, i1 true;
    i1 %411 = and i1 %408, i1 %410;
    i1 %412 = or i1 %409, i1 %411;
    i32 %413 = sdiv i32 %231, i32 16;
    i32 %414 = srem i32 %413, i32 2;
    i1 %415 = scmp lt i32 %414, i32 0;
    i32 %416 = neg i32 %414;
    i32 %417 = select i1 %415 ? i32 %416 : i32 %414;
    i1 %418 = scmp neq i32 %417, i32 0;
    i32 %419 = sdiv i32 %353, i32 16;
    i32 %420 = srem i32 %419, i32 2;
    i1 %421 = scmp lt i32 %420, i32 0;
    i32 %422 = neg i32 %420;
    i32 %423 = select i1 %421 ? i32 %422 : i32 %420;
    i1 %424 = scmp neq i32 %423, i32 0;
    i1 %425 = or i1 %418, i1 %424;
    i1 %426 = and i1 %412, i1 %425;
    i1 %427 = and i1 %418, i1 %424;
    i1 %428 = xor i1 %427, i1 true;
    i1 %429 = and i1 %426, i1 %428;
    i1 %430 = or i1 %427, i1 %429;
    i32 %431 = sdiv i32 %231, i32 32;
    i32 %432 = srem i32 %431, i32 2;
    i1 %433 = scmp lt i32 %432, i32 0;
    i32 %434 = neg i32 %432;
    i32 %435 = select i1 %433 ? i32 %434 : i32 %432;
    i1 %436 = scmp neq i32 %435, i32 0;
    i32 %437 = sdiv i32 %353, i32 32;
    i32 %438 = srem i32 %437, i32 2;
    i1 %439 = scmp lt i32 %438, i32 0;
    i32 %440 = neg i32 %438;
    i32 %441 = select i1 %439 ? i32 %440 : i32 %438;
    i1 %442 = scmp neq i32 %441, i32 0;
    i1 %443 = or i1 %436, i1 %442;
    i1 %444 = and i1 %430, i1 %443;
    i1 %445 = and i1 %436, i1 %442;
    i1 %446 = xor i1 %445, i1 true;
    i1 %447 = and i1 %444, i1 %446;
    i1 %448 = or i1 %445, i1 %447;
    i32 %449 = sdiv i32 %231, i32 64;
    i32 %450 = srem i32 %449, i32 2;
    i1 %451 = scmp lt i32 %450, i32 0;
    i32 %452 = neg i32 %450;
    i32 %453 = select i1 %451 ? i32 %452 : i32 %450;
    i1 %454 = scmp neq i32 %453, i32 0;
    i32 %455 = sdiv i32 %353, i32 64;
    i32 %456 = srem i32 %455, i32 2;
    i1 %457 = scmp lt i32 %456, i32 0;
    i32 %458 = neg i32 %456;
    i32 %459 = select i1 %457 ? i32 %458 : i32 %456;
    i1 %460 = scmp neq i32 %459, i32 0;
    i1 %461 = or i1 %454, i1 %460;
    i1 %462 = and i1 %448, i1 %461;
    i1 %463 = and i1 %454, i1 %460;
    i1 %464 = xor i1 %463, i1 true;
    i1 %465 = and i1 %462, i1 %464;
    i1 %466 = or i1 %463, i1 %465;
    i32 %467 = sdiv i32 %231, i32 128;
    i32 %468 = srem i32 %467, i32 2;
    i1 %469 = scmp lt i32 %468, i32 0;
    i32 %470 = neg i32 %468;
    i32 %471 = select i1 %469 ? i32 %470 : i32 %468;
    i1 %472 = scmp neq i32 %471, i32 0;
    i32 %473 = sdiv i32 %353, i32 128;
    i32 %474 = srem i32 %473, i32 2;
    i1 %475 = scmp lt i32 %474, i32 0;
    i32 %476 = neg i32 %474;
    i32 %477 = select i1 %475 ? i32 %476 : i32 %474;
    i1 %478 = scmp neq i32 %477, i32 0;
    i1 %479 = or i1 %472, i1 %478;
    i1 %480 = and i1 %466, i1 %479;
    i1 %481 = and i1 %472, i1 %478;
    i1 %482 = xor i1 %481, i1 true;
    i1 %483 = and i1 %480, i1 %482;
    i1 %484 = or i1 %481, i1 %483;
    i32 %485 = sdiv i32 %231, i32 256;
    i32 %486 = srem i32 %485, i32 2;
    i1 %487 = scmp lt i32 %486, i32 0;
    i32 %488 = neg i32 %486;
    i32 %489 = select i1 %487 ? i32 %488 : i32 %486;
    i1 %490 = scmp neq i32 %489, i32 0;
    i32 %491 = sdiv i32 %353, i32 256;
    i32 %492 = srem i32 %491, i32 2;
    i1 %493 = scmp lt i32 %492, i32 0;
    i32 %494 = neg i32 %492;
    i32 %495 = select i1 %493 ? i32 %494 : i32 %492;
    i1 %496 = scmp neq i32 %495, i32 0;
    i1 %497 = or i1 %490, i1 %496;
    i1 %498 = and i1 %484, i1 %497;
    i1 %499 = and i1 %490, i1 %496;
    i1 %500 = xor i1 %499, i1 true;
    i1 %501 = and i1 %498, i1 %500;
    i1 %502 = or i1 %499, i1 %501;
    i32 %503 = sdiv i32 %231, i32 512;
    i32 %504 = srem i32 %503, i32 2;
    i1 %505 = scmp lt i32 %504, i32 0;
    i32 %506 = neg i32 %504;
    i32 %507 = select i1 %505 ? i32 %506 : i32 %504;
    i1 %508 = scmp neq i32 %507, i32 0;
    i32 %509 = sdiv i32 %353, i32 512;
    i32 %510 = srem i32 %509, i32 2;
    i1 %511 = scmp lt i32 %510, i32 0;
    i32 %512 = neg i32 %510;
    i32 %513 = select i1 %511 ? i32 %512 : i32 %510;
    i1 %514 = scmp neq i32 %513, i32 0;
    i1 %515 = or i1 %508, i1 %514;
    i1 %516 = and i1 %502, i1 %515;
    i1 %517 = and i1 %508, i1 %514;
    i1 %518 = xor i1 %517, i1 true;
    i1 %519 = and i1 %516, i1 %518;
    i1 %520 = or i1 %517, i1 %519;
    i32 %521 = sdiv i32 %231, i32 1024;
    i32 %522 = srem i32 %521, i32 2;
    i1 %523 = scmp lt i32 %522, i32 0;
    i32 %524 = neg i32 %522;
    i32 %525 = select i1 %523 ? i32 %524 : i32 %522;
    i1 %526 = scmp neq i32 %525, i32 0;
    i32 %527 = sdiv i32 %353, i32 1024;
    i32 %528 = srem i32 %527, i32 2;
    i1 %529 = scmp lt i32 %528, i32 0;
    i32 %530 = neg i32 %528;
    i32 %531 = select i1 %529 ? i32 %530 : i32 %528;
    i1 %532 = scmp neq i32 %531, i32 0;
    i1 %533 = or i1 %526, i1 %532;
    i1 %534 = and i1 %520, i1 %533;
    i1 %535 = and i1 %526, i1 %532;
    i1 %536 = xor i1 %535, i1 true;
    i1 %537 = and i1 %534, i1 %536;
    i1 %538 = or i1 %535, i1 %537;
    i32 %539 = sdiv i32 %231, i32 2048;
    i32 %540 = srem i32 %539, i32 2;
    i1 %541 = scmp lt i32 %540, i32 0;
    i32 %542 = neg i32 %540;
    i32 %543 = select i1 %541 ? i32 %542 : i32 %540;
    i1 %544 = scmp neq i32 %543, i32 0;
    i32 %545 = sdiv i32 %353, i32 2048;
    i32 %546 = srem i32 %545, i32 2;
    i1 %547 = scmp lt i32 %546, i32 0;
    i32 %548 = neg i32 %546;
    i32 %549 = select i1 %547 ? i32 %548 : i32 %546;
    i1 %550 = scmp neq i32 %549, i32 0;
    i1 %551 = or i1 %544, i1 %550;
    i1 %552 = and i1 %538, i1 %551;
    i1 %553 = and i1 %544, i1 %550;
    i1 %554 = xor i1 %553, i1 true;
    i1 %555 = and i1 %552, i1 %554;
    i1 %556 = or i1 %553, i1 %555;
    i32 %557 = sdiv i32 %231, i32 4096;
    i32 %558 = srem i32 %557, i32 2;
    i1 %559 = scmp lt i32 %558, i32 0;
    i32 %560 = neg i32 %558;
    i32 %561 = select i1 %559 ? i32 %560 : i32 %558;
    i1 %562 = scmp neq i32 %561, i32 0;
    i32 %563 = sdiv i32 %353, i32 4096;
    i32 %564 = srem i32 %563, i32 2;
    i1 %565 = scmp lt i32 %564, i32 0;
    i32 %566 = neg i32 %564;
    i32 %567 = select i1 %565 ? i32 %566 : i32 %564;
    i1 %568 = scmp neq i32 %567, i32 0;
    i1 %569 = or i1 %562, i1 %568;
    i1 %570 = and i1 %556, i1 %569;
    i1 %571 = and i1 %562, i1 %568;
    i1 %572 = xor i1 %571, i1 true;
    i1 %573 = and i1 %570, i1 %572;
    i1 %574 = or i1 %571, i1 %573;
    i32 %575 = sdiv i32 %231, i32 8192;
    i32 %576 = srem i32 %575, i32 2;
    i1 %577 = scmp lt i32 %576, i32 0;
    i32 %578 = neg i32 %576;
    i32 %579 = select i1 %577 ? i32 %578 : i32 %576;
    i1 %580 = scmp neq i32 %579, i32 0;
    i32 %581 = sdiv i32 %353, i32 8192;
    i32 %582 = srem i32 %581, i32 2;
    i1 %583 = scmp lt i32 %582, i32 0;
    i32 %584 = neg i32 %582;
    i32 %585 = select i1 %583 ? i32 %584 : i32 %582;
    i1 %586 = scmp neq i32 %585, i32 0;
    i1 %587 = or i1 %580, i1 %586;
    i1 %588 = and i1 %574, i1 %587;
    i1 %589 = and i1 %580, i1 %586;
    i1 %590 = xor i1 %589, i1 true;
    i1 %591 = and i1 %588, i1 %590;
    i1 %592 = or i1 %589, i1 %591;
    i32 %593 = sdiv i32 %231, i32 16384;
    i32 %594 = srem i32 %593, i32 2;
    i1 %595 = scmp lt i32 %594, i32 0;
    i32 %596 = neg i32 %594;
    i32 %597 = select i1 %595 ? i32 %596 : i32 %594;
    i1 %598 = scmp neq i32 %597, i32 0;
    i32 %599 = sdiv i32 %353, i32 16384;
    i32 %600 = srem i32 %599, i32 2;
    i1 %601 = scmp lt i32 %600, i32 0;
    i32 %602 = neg i32 %600;
    i32 %603 = select i1 %601 ? i32 %602 : i32 %600;
    i1 %604 = scmp neq i32 %603, i32 0;
    i1 %605 = or i1 %598, i1 %604;
    i1 %606 = and i1 %592, i1 %605;
    i1 %607 = and i1 %598, i1 %604;
    i1 %608 = xor i1 %607, i1 true;
    i1 %609 = and i1 %606, i1 %608;
    i1 %610 = or i1 %607, i1 %609;
    i32 %611 = sdiv i32 %231, i32 32768;
    i32 %612 = srem i32 %611, i32 2;
    i1 %613 = scmp lt i32 %612, i32 0;
    i32 %614 = neg i32 %612;
    i32 %615 = select i1 %613 ? i32 %614 : i32 %612;
    i1 %616 = scmp neq i32 %615, i32 0;
    i32 %617 = sdiv i32 %353, i32 32768;
    i32 %618 = srem i32 %617, i32 2;
    i1 %619 = scmp lt i32 %618, i32 0;
    i32 %620 = neg i32 %618;
    i32 %621 = select i1 %619 ? i32 %620 : i32 %618;
    i1 %622 = scmp neq i32 %621, i32 0;
    i1 %623 = or i1 %616, i1 %622;
    i1 %624 = and i1 %610, i1 %623;
    i1 %625 = and i1 %616, i1 %622;
    i1 %626 = xor i1 %625, i1 true;
    i1 %627 = and i1 %624, i1 %626;
    i1 %628 = xor i1 %627, i1 true;
    i1 %629 = and i1 %623, i1 %626;
    i1 %630 = or i1 %610, i1 %629;
    i1 %631 = and i1 %628, i1 %630;
    i32 %632 = zext i1 %631 to i32;
    i32 %633 = mul i32 %632, i32 2;
    i1 %634 = xor i1 %609, i1 true;
    i1 %635 = and i1 %605, i1 %608;
    i1 %636 = or i1 %592, i1 %635;
    i1 %637 = and i1 %634, i1 %636;
    i32 %638 = zext i1 %637 to i32;
    i32 %639 = add i32 %633, i32 %638;
    i32 %640 = mul i32 %639, i32 2;
    i1 %641 = xor i1 %591, i1 true;
    i1 %642 = and i1 %587, i1 %590;
    i1 %643 = or i1 %574, i1 %642;
    i1 %644 = and i1 %641, i1 %643;
    i32 %645 = zext i1 %644 to i32;
    i32 %646 = add i32 %640, i32 %645;
    i32 %647 = mul i32 %646, i32 2;
    i1 %648 = xor i1 %573, i1 true;
    i1 %649 = and i1 %569, i1 %572;
    i1 %650 = or i1 %556, i1 %649;
    i1 %651 = and i1 %648, i1 %650;
    i32 %652 = zext i1 %651 to i32;
    i32 %653 = add i32 %647, i32 %652;
    i32 %654 = mul i32 %653, i32 2;
    i1 %655 = xor i1 %555, i1 true;
    i1 %656 = and i1 %551, i1 %554;
    i1 %657 = or i1 %538, i1 %656;
    i1 %658 = and i1 %655, i1 %657;
    i32 %659 = zext i1 %658 to i32;
    i32 %660 = add i32 %654, i32 %659;
    i32 %661 = mul i32 %660, i32 2;
    i1 %662 = xor i1 %537, i1 true;
    i1 %663 = and i1 %533, i1 %536;
    i1 %664 = or i1 %520, i1 %663;
    i1 %665 = and i1 %662, i1 %664;
    i32 %666 = zext i1 %665 to i32;
    i32 %667 = add i32 %661, i32 %666;
    i32 %668 = mul i32 %667, i32 2;
    i1 %669 = xor i1 %519, i1 true;
    i1 %670 = and i1 %515, i1 %518;
    i1 %671 = or i1 %502, i1 %670;
    i1 %672 = and i1 %669, i1 %671;
    i32 %673 = zext i1 %672 to i32;
    i32 %674 = add i32 %668, i32 %673;
    i32 %675 = mul i32 %674, i32 2;
    i1 %676 = xor i1 %501, i1 true;
    i1 %677 = and i1 %497, i1 %500;
    i1 %678 = or i1 %484, i1 %677;
    i1 %679 = and i1 %676, i1 %678;
    i32 %680 = zext i1 %679 to i32;
    i32 %681 = add i32 %675, i32 %680;
    i32 %682 = mul i32 %681, i32 2;
    i1 %683 = xor i1 %483, i1 true;
    i1 %684 = and i1 %479, i1 %482;
    i1 %685 = or i1 %466, i1 %684;
    i1 %686 = and i1 %683, i1 %685;
    i32 %687 = zext i1 %686 to i32;
    i32 %688 = add i32 %682, i32 %687;
    i32 %689 = mul i32 %688, i32 2;
    i1 %690 = xor i1 %465, i1 true;
    i1 %691 = and i1 %461, i1 %464;
    i1 %692 = or i1 %448, i1 %691;
    i1 %693 = and i1 %690, i1 %692;
    i32 %694 = zext i1 %693 to i32;
    i32 %695 = add i32 %689, i32 %694;
    i32 %696 = mul i32 %695, i32 2;
    i1 %697 = xor i1 %447, i1 true;
    i1 %698 = and i1 %443, i1 %446;
    i1 %699 = or i1 %430, i1 %698;
    i1 %700 = and i1 %697, i1 %699;
    i32 %701 = zext i1 %700 to i32;
    i32 %702 = add i32 %696, i32 %701;
    i32 %703 = mul i32 %702, i32 2;
    i1 %704 = xor i1 %429, i1 true;
    i1 %705 = and i1 %425, i1 %428;
    i1 %706 = or i1 %412, i1 %705;
    i1 %707 = and i1 %704, i1 %706;
    i32 %708 = zext i1 %707 to i32;
    i32 %709 = add i32 %703, i32 %708;
    i32 %710 = mul i32 %709, i32 2;
    i1 %711 = xor i1 %411, i1 true;
    i1 %712 = and i1 %407, i1 %410;
    i1 %713 = or i1 %394, i1 %712;
    i1 %714 = and i1 %711, i1 %713;
    i32 %715 = zext i1 %714 to i32;
    i32 %716 = add i32 %710, i32 %715;
    i32 %717 = mul i32 %716, i32 2;
    i1 %718 = xor i1 %393, i1 true;
    i1 %719 = and i1 %389, i1 %392;
    i1 %720 = or i1 %376, i1 %719;
    i1 %721 = and i1 %718, i1 %720;
    i32 %722 = zext i1 %721 to i32;
    i32 %723 = add i32 %717, i32 %722;
    i32 %724 = mul i32 %723, i32 2;
    i1 %725 = xor i1 %375, i1 true;
    i1 %726 = and i1 %368, i1 %374;
    i1 %727 = or i1 %363, i1 %726;
    i1 %728 = and i1 %725, i1 %727;
    i32 %729 = zext i1 %728 to i32;
    i32 %730 = add i32 %724, i32 %729;
    i32 %731 = mul i32 %730, i32 2;
    i1 %732 = xor i1 %726, i1 true;
    i1 %733 = or i1 %368, i1 %374;
    i1 %734 = and i1 %732, i1 %733;
    i32 %735 = zext i1 %734 to i32;
    i32 %736 = add i32 %731, i32 %735;
    ubr ^b1;
  ^b1:
    i32 %737 = phi [^entry, i32 1] [^b, i32 %736];
    ret i32 %737;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = scmp lt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
