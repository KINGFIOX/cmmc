internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    [4084 * i32]* %0 = ptrcast [4084 * i32]* @lut_fib to [4084 * i32]*;
    i32* %1 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %0, i32 %n, i32 0);
    i32* %2 = getelementptr &(i32* %1)[i64 3];
    i32 %3 = load i32* %2;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32* %5 = getelementptr &(i32* %1)[i64 2];
    cbr i1 %4(prob = 0.9), ^b, ^entry1;
  ^b:
    i32 %6 = load i32* %5;
    ubr ^b3;
  ^entry1:
    i1 %7 = icmp slt i32 %n, i32 3;
    cbr i1 %7(prob = 0.5), ^b1, ^b2;
  ^b1:
    store i32* %2 with i32 1;
    store i32* %5 with i32 1;
    ubr ^b3;
  ^b2:
    i32 %8 = sdiv i32 %n, i32 2;
    i1 %9 = ztrunc i32 %8 to i1;
    i1 %10 = xor i1 %9, i1 true;
    i1 %11 = ztrunc i32 %n to i1;
    i1 %12 = and i1 %10, i1 %11;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = and i32 %8, i32 1;
    i32 %15 = or i32 %13, i32 %14;
    i1 %16 = icmp neq i32 %15, i32 0;
    i32 %17 = sdiv i32 %n, i32 4;
    i1 %18 = ztrunc i32 %17 to i1;
    i1 %19 = xor i1 %18, i1 true;
    i1 %20 = and i1 %16, i1 %19;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = and i32 %17, i32 1;
    i32 %23 = or i32 %21, i32 %22;
    i1 %24 = icmp neq i32 %23, i32 0;
    i32 %25 = sdiv i32 %n, i32 8;
    i1 %26 = ztrunc i32 %25 to i1;
    i1 %27 = xor i1 %26, i1 true;
    i1 %28 = and i1 %24, i1 %27;
    i32 %29 = zext i1 %28 to i32;
    i32 %30 = and i32 %25, i32 1;
    i32 %31 = or i32 %29, i32 %30;
    i1 %32 = icmp neq i32 %31, i32 0;
    i32 %33 = sdiv i32 %n, i32 16;
    i1 %34 = ztrunc i32 %33 to i1;
    i1 %35 = xor i1 %34, i1 true;
    i1 %36 = and i1 %32, i1 %35;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = and i32 %33, i32 1;
    i32 %39 = or i32 %37, i32 %38;
    i1 %40 = icmp neq i32 %39, i32 0;
    i32 %41 = sdiv i32 %n, i32 32;
    i1 %42 = ztrunc i32 %41 to i1;
    i1 %43 = xor i1 %42, i1 true;
    i1 %44 = and i1 %40, i1 %43;
    i32 %45 = zext i1 %44 to i32;
    i32 %46 = and i32 %41, i32 1;
    i32 %47 = or i32 %45, i32 %46;
    i1 %48 = icmp neq i32 %47, i32 0;
    i32 %49 = sdiv i32 %n, i32 64;
    i1 %50 = ztrunc i32 %49 to i1;
    i1 %51 = xor i1 %50, i1 true;
    i1 %52 = and i1 %48, i1 %51;
    i32 %53 = zext i1 %52 to i32;
    i32 %54 = and i32 %49, i32 1;
    i32 %55 = or i32 %53, i32 %54;
    i1 %56 = icmp neq i32 %55, i32 0;
    i32 %57 = sdiv i32 %n, i32 128;
    i1 %58 = ztrunc i32 %57 to i1;
    i1 %59 = xor i1 %58, i1 true;
    i1 %60 = and i1 %56, i1 %59;
    i32 %61 = zext i1 %60 to i32;
    i32 %62 = and i32 %57, i32 1;
    i32 %63 = or i32 %61, i32 %62;
    i1 %64 = icmp neq i32 %63, i32 0;
    i32 %65 = sdiv i32 %n, i32 256;
    i1 %66 = ztrunc i32 %65 to i1;
    i1 %67 = xor i1 %66, i1 true;
    i1 %68 = and i1 %64, i1 %67;
    i32 %69 = zext i1 %68 to i32;
    i32 %70 = and i32 %65, i32 1;
    i32 %71 = or i32 %69, i32 %70;
    i1 %72 = icmp neq i32 %71, i32 0;
    i32 %73 = sdiv i32 %n, i32 512;
    i1 %74 = ztrunc i32 %73 to i1;
    i1 %75 = xor i1 %74, i1 true;
    i1 %76 = and i1 %72, i1 %75;
    i32 %77 = zext i1 %76 to i32;
    i32 %78 = and i32 %73, i32 1;
    i32 %79 = or i32 %77, i32 %78;
    i1 %80 = icmp neq i32 %79, i32 0;
    i32 %81 = sdiv i32 %n, i32 1024;
    i1 %82 = ztrunc i32 %81 to i1;
    i1 %83 = xor i1 %82, i1 true;
    i1 %84 = and i1 %80, i1 %83;
    i32 %85 = zext i1 %84 to i32;
    i32 %86 = and i32 %81, i32 1;
    i32 %87 = or i32 %85, i32 %86;
    i1 %88 = icmp neq i32 %87, i32 0;
    i32 %89 = sdiv i32 %n, i32 2048;
    i1 %90 = ztrunc i32 %89 to i1;
    i1 %91 = xor i1 %90, i1 true;
    i1 %92 = and i1 %88, i1 %91;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = and i32 %89, i32 1;
    i32 %95 = or i32 %93, i32 %94;
    i1 %96 = icmp neq i32 %95, i32 0;
    i32 %97 = sdiv i32 %n, i32 4096;
    i1 %98 = ztrunc i32 %97 to i1;
    i1 %99 = xor i1 %98, i1 true;
    i1 %100 = and i1 %96, i1 %99;
    i32 %101 = zext i1 %100 to i32;
    i32 %102 = and i32 %97, i32 1;
    i32 %103 = or i32 %101, i32 %102;
    i1 %104 = icmp neq i32 %103, i32 0;
    i32 %105 = sdiv i32 %n, i32 8192;
    i1 %106 = ztrunc i32 %105 to i1;
    i1 %107 = xor i1 %106, i1 true;
    i1 %108 = and i1 %104, i1 %107;
    i32 %109 = zext i1 %108 to i32;
    i32 %110 = and i32 %105, i32 1;
    i32 %111 = or i32 %109, i32 %110;
    i1 %112 = icmp neq i32 %111, i32 0;
    i32 %113 = sdiv i32 %n, i32 16384;
    i1 %114 = ztrunc i32 %113 to i1;
    i1 %115 = xor i1 %114, i1 true;
    i1 %116 = and i1 %112, i1 %115;
    i32 %117 = zext i1 %116 to i32;
    i32 %118 = and i32 %113, i32 1;
    i32 %119 = or i32 %117, i32 %118;
    i1 %120 = icmp neq i32 %119, i32 0;
    i32 %121 = sdiv i32 %n, i32 32768;
    i1 %122 = ztrunc i32 %121 to i1;
    i1 %123 = xor i1 %122, i1 true;
    i1 %124 = and i1 %120, i1 %123;
    i1 %125 = xor i1 %124, i1 true;
    i1 %126 = or i1 %120, i1 %123;
    i1 %127 = and i1 %125, i1 %126;
    i32 %128 = zext i1 %127 to i32;
    i32 %129 = mul i32 %128, i32 2;
    i1 %130 = xor i1 %116, i1 true;
    i1 %131 = or i1 %112, i1 %115;
    i1 %132 = and i1 %130, i1 %131;
    i32 %133 = zext i1 %132 to i32;
    i32 %134 = add i32 %129, i32 %133;
    i32 %135 = mul i32 %134, i32 2;
    i1 %136 = xor i1 %108, i1 true;
    i1 %137 = or i1 %104, i1 %107;
    i1 %138 = and i1 %136, i1 %137;
    i32 %139 = zext i1 %138 to i32;
    i32 %140 = add i32 %135, i32 %139;
    i32 %141 = mul i32 %140, i32 2;
    i1 %142 = xor i1 %100, i1 true;
    i1 %143 = or i1 %96, i1 %99;
    i1 %144 = and i1 %142, i1 %143;
    i32 %145 = zext i1 %144 to i32;
    i32 %146 = add i32 %141, i32 %145;
    i32 %147 = mul i32 %146, i32 2;
    i1 %148 = xor i1 %92, i1 true;
    i1 %149 = or i1 %88, i1 %91;
    i1 %150 = and i1 %148, i1 %149;
    i32 %151 = zext i1 %150 to i32;
    i32 %152 = add i32 %147, i32 %151;
    i32 %153 = mul i32 %152, i32 2;
    i1 %154 = xor i1 %84, i1 true;
    i1 %155 = or i1 %80, i1 %83;
    i1 %156 = and i1 %154, i1 %155;
    i32 %157 = zext i1 %156 to i32;
    i32 %158 = add i32 %153, i32 %157;
    i32 %159 = mul i32 %158, i32 2;
    i1 %160 = xor i1 %76, i1 true;
    i1 %161 = or i1 %72, i1 %75;
    i1 %162 = and i1 %160, i1 %161;
    i32 %163 = zext i1 %162 to i32;
    i32 %164 = add i32 %159, i32 %163;
    i32 %165 = mul i32 %164, i32 2;
    i1 %166 = xor i1 %68, i1 true;
    i1 %167 = or i1 %64, i1 %67;
    i1 %168 = and i1 %166, i1 %167;
    i32 %169 = zext i1 %168 to i32;
    i32 %170 = add i32 %165, i32 %169;
    i32 %171 = mul i32 %170, i32 2;
    i1 %172 = xor i1 %60, i1 true;
    i1 %173 = or i1 %56, i1 %59;
    i1 %174 = and i1 %172, i1 %173;
    i32 %175 = zext i1 %174 to i32;
    i32 %176 = add i32 %171, i32 %175;
    i32 %177 = mul i32 %176, i32 2;
    i1 %178 = xor i1 %52, i1 true;
    i1 %179 = or i1 %48, i1 %51;
    i1 %180 = and i1 %178, i1 %179;
    i32 %181 = zext i1 %180 to i32;
    i32 %182 = add i32 %177, i32 %181;
    i32 %183 = mul i32 %182, i32 2;
    i1 %184 = xor i1 %44, i1 true;
    i1 %185 = or i1 %40, i1 %43;
    i1 %186 = and i1 %184, i1 %185;
    i32 %187 = zext i1 %186 to i32;
    i32 %188 = add i32 %183, i32 %187;
    i32 %189 = mul i32 %188, i32 2;
    i1 %190 = xor i1 %36, i1 true;
    i1 %191 = or i1 %32, i1 %35;
    i1 %192 = and i1 %190, i1 %191;
    i32 %193 = zext i1 %192 to i32;
    i32 %194 = add i32 %189, i32 %193;
    i32 %195 = mul i32 %194, i32 2;
    i1 %196 = xor i1 %28, i1 true;
    i1 %197 = or i1 %24, i1 %27;
    i1 %198 = and i1 %196, i1 %197;
    i32 %199 = zext i1 %198 to i32;
    i32 %200 = add i32 %195, i32 %199;
    i32 %201 = mul i32 %200, i32 2;
    i1 %202 = xor i1 %20, i1 true;
    i1 %203 = or i1 %16, i1 %19;
    i1 %204 = and i1 %202, i1 %203;
    i32 %205 = zext i1 %204 to i32;
    i32 %206 = add i32 %201, i32 %205;
    i32 %207 = mul i32 %206, i32 2;
    i1 %208 = xor i1 %12, i1 true;
    i1 %209 = or i1 %10, i1 %11;
    i1 %210 = and i1 %208, i1 %209;
    i32 %211 = zext i1 %210 to i32;
    i32 %212 = add i32 %207, i32 %211;
    i32 %213 = mul i32 %212, i32 2;
    i1 %214 = xor i1 %11, i1 true;
    i32 %215 = zext i1 %214 to i32;
    i32 %216 = add i32 %213, i32 %215;
    i32 %217 = call (i32) -> i32 @fib(i32 %216);
    i32 %218 = sdiv i32 %217, i32 2;
    i1 %219 = ztrunc i32 %218 to i1;
    i1 %220 = and i1 %9, i1 %19;
    i32 %221 = zext i1 %220 to i32;
    i32 %222 = or i32 %22, i32 %221;
    i1 %223 = icmp neq i32 %222, i32 0;
    i1 %224 = and i1 %27, i1 %223;
    i32 %225 = zext i1 %224 to i32;
    i32 %226 = or i32 %30, i32 %225;
    i1 %227 = icmp neq i32 %226, i32 0;
    i1 %228 = and i1 %35, i1 %227;
    i32 %229 = zext i1 %228 to i32;
    i32 %230 = or i32 %38, i32 %229;
    i1 %231 = icmp neq i32 %230, i32 0;
    i1 %232 = and i1 %43, i1 %231;
    i32 %233 = zext i1 %232 to i32;
    i32 %234 = or i32 %46, i32 %233;
    i1 %235 = icmp neq i32 %234, i32 0;
    i1 %236 = and i1 %51, i1 %235;
    i32 %237 = zext i1 %236 to i32;
    i32 %238 = or i32 %54, i32 %237;
    i1 %239 = icmp neq i32 %238, i32 0;
    i1 %240 = and i1 %59, i1 %239;
    i32 %241 = zext i1 %240 to i32;
    i32 %242 = or i32 %62, i32 %241;
    i1 %243 = icmp neq i32 %242, i32 0;
    i1 %244 = and i1 %67, i1 %243;
    i32 %245 = zext i1 %244 to i32;
    i32 %246 = or i32 %70, i32 %245;
    i1 %247 = icmp neq i32 %246, i32 0;
    i1 %248 = and i1 %75, i1 %247;
    i32 %249 = zext i1 %248 to i32;
    i32 %250 = or i32 %78, i32 %249;
    i1 %251 = icmp neq i32 %250, i32 0;
    i1 %252 = and i1 %83, i1 %251;
    i32 %253 = zext i1 %252 to i32;
    i32 %254 = or i32 %86, i32 %253;
    i1 %255 = icmp neq i32 %254, i32 0;
    i1 %256 = and i1 %91, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = or i32 %94, i32 %257;
    i1 %259 = icmp neq i32 %258, i32 0;
    i1 %260 = and i1 %99, i1 %259;
    i32 %261 = zext i1 %260 to i32;
    i32 %262 = or i32 %102, i32 %261;
    i1 %263 = icmp neq i32 %262, i32 0;
    i1 %264 = and i1 %107, i1 %263;
    i32 %265 = zext i1 %264 to i32;
    i32 %266 = or i32 %110, i32 %265;
    i1 %267 = icmp neq i32 %266, i32 0;
    i1 %268 = and i1 %115, i1 %267;
    i32 %269 = zext i1 %268 to i32;
    i32 %270 = or i32 %118, i32 %269;
    i1 %271 = icmp neq i32 %270, i32 0;
    i1 %272 = and i1 %123, i1 %271;
    i1 %273 = xor i1 %272, i1 true;
    i1 %274 = or i1 %123, i1 %271;
    i1 %275 = and i1 %273, i1 %274;
    i32 %276 = zext i1 %275 to i32;
    i32 %277 = mul i32 %276, i32 2;
    i1 %278 = xor i1 %268, i1 true;
    i1 %279 = or i1 %115, i1 %267;
    i1 %280 = and i1 %278, i1 %279;
    i32 %281 = zext i1 %280 to i32;
    i32 %282 = add i32 %277, i32 %281;
    i32 %283 = mul i32 %282, i32 2;
    i1 %284 = xor i1 %264, i1 true;
    i1 %285 = or i1 %107, i1 %263;
    i1 %286 = and i1 %284, i1 %285;
    i32 %287 = zext i1 %286 to i32;
    i32 %288 = add i32 %283, i32 %287;
    i32 %289 = mul i32 %288, i32 2;
    i1 %290 = xor i1 %260, i1 true;
    i1 %291 = or i1 %99, i1 %259;
    i1 %292 = and i1 %290, i1 %291;
    i32 %293 = zext i1 %292 to i32;
    i32 %294 = add i32 %289, i32 %293;
    i32 %295 = mul i32 %294, i32 2;
    i1 %296 = xor i1 %256, i1 true;
    i1 %297 = or i1 %91, i1 %255;
    i1 %298 = and i1 %296, i1 %297;
    i32 %299 = zext i1 %298 to i32;
    i32 %300 = add i32 %295, i32 %299;
    i32 %301 = mul i32 %300, i32 2;
    i1 %302 = xor i1 %252, i1 true;
    i1 %303 = or i1 %83, i1 %251;
    i1 %304 = and i1 %302, i1 %303;
    i32 %305 = zext i1 %304 to i32;
    i32 %306 = add i32 %301, i32 %305;
    i32 %307 = mul i32 %306, i32 2;
    i1 %308 = xor i1 %248, i1 true;
    i1 %309 = or i1 %75, i1 %247;
    i1 %310 = and i1 %308, i1 %309;
    i32 %311 = zext i1 %310 to i32;
    i32 %312 = add i32 %307, i32 %311;
    i32 %313 = mul i32 %312, i32 2;
    i1 %314 = xor i1 %244, i1 true;
    i1 %315 = or i1 %67, i1 %243;
    i1 %316 = and i1 %314, i1 %315;
    i32 %317 = zext i1 %316 to i32;
    i32 %318 = add i32 %313, i32 %317;
    i32 %319 = mul i32 %318, i32 2;
    i1 %320 = xor i1 %240, i1 true;
    i1 %321 = or i1 %59, i1 %239;
    i1 %322 = and i1 %320, i1 %321;
    i32 %323 = zext i1 %322 to i32;
    i32 %324 = add i32 %319, i32 %323;
    i32 %325 = mul i32 %324, i32 2;
    i1 %326 = xor i1 %236, i1 true;
    i1 %327 = or i1 %51, i1 %235;
    i1 %328 = and i1 %326, i1 %327;
    i32 %329 = zext i1 %328 to i32;
    i32 %330 = add i32 %325, i32 %329;
    i32 %331 = mul i32 %330, i32 2;
    i1 %332 = xor i1 %232, i1 true;
    i1 %333 = or i1 %43, i1 %231;
    i1 %334 = and i1 %332, i1 %333;
    i32 %335 = zext i1 %334 to i32;
    i32 %336 = add i32 %331, i32 %335;
    i32 %337 = mul i32 %336, i32 2;
    i1 %338 = xor i1 %228, i1 true;
    i1 %339 = or i1 %35, i1 %227;
    i1 %340 = and i1 %338, i1 %339;
    i32 %341 = zext i1 %340 to i32;
    i32 %342 = add i32 %337, i32 %341;
    i32 %343 = mul i32 %342, i32 2;
    i1 %344 = xor i1 %224, i1 true;
    i1 %345 = or i1 %27, i1 %223;
    i1 %346 = and i1 %344, i1 %345;
    i32 %347 = zext i1 %346 to i32;
    i32 %348 = add i32 %343, i32 %347;
    i32 %349 = mul i32 %348, i32 2;
    i1 %350 = xor i1 %220, i1 true;
    i1 %351 = or i1 %9, i1 %19;
    i1 %352 = and i1 %350, i1 %351;
    i32 %353 = zext i1 %352 to i32;
    i32 %354 = add i32 %349, i32 %353;
    i32 %355 = mul i32 %354, i32 2;
    i32 %356 = zext i1 %10 to i32;
    i32 %357 = add i32 %355, i32 %356;
    i32 %358 = mul i32 %357, i32 2;
    i32 %359 = and i32 %n, i32 1;
    i32 %360 = add i32 %358, i32 %359;
    i32 %361 = call (i32) -> i32 @fib(i32 %360);
    i32 %362 = sdiv i32 %361, i32 2;
    i1 %363 = ztrunc i32 %362 to i1;
    i1 %364 = and i1 %219, i1 %363;
    i1 %365 = xor i1 %364, i1 true;
    i1 %366 = or i1 %219, i1 %363;
    i1 %367 = and i1 %365, i1 %366;
    i1 %368 = ztrunc i32 %217 to i1;
    i1 %369 = and i1 %367, i1 %368;
    i1 %370 = ztrunc i32 %361 to i1;
    i1 %371 = and i1 %369, i1 %370;
    i32 %372 = zext i1 %371 to i32;
    i32 %373 = zext i1 %364 to i32;
    i32 %374 = or i32 %372, i32 %373;
    i1 %375 = icmp neq i32 %374, i32 0;
    i32 %376 = sdiv i32 %217, i32 4;
    i1 %377 = ztrunc i32 %376 to i1;
    i32 %378 = sdiv i32 %361, i32 4;
    i1 %379 = ztrunc i32 %378 to i1;
    i1 %380 = and i1 %377, i1 %379;
    i1 %381 = xor i1 %380, i1 true;
    i1 %382 = or i1 %377, i1 %379;
    i1 %383 = and i1 %381, i1 %382;
    i1 %384 = and i1 %375, i1 %383;
    i32 %385 = zext i1 %384 to i32;
    i32 %386 = zext i1 %380 to i32;
    i32 %387 = or i32 %385, i32 %386;
    i1 %388 = icmp neq i32 %387, i32 0;
    i32 %389 = sdiv i32 %217, i32 8;
    i1 %390 = ztrunc i32 %389 to i1;
    i32 %391 = sdiv i32 %361, i32 8;
    i1 %392 = ztrunc i32 %391 to i1;
    i1 %393 = and i1 %390, i1 %392;
    i1 %394 = xor i1 %393, i1 true;
    i1 %395 = or i1 %390, i1 %392;
    i1 %396 = and i1 %394, i1 %395;
    i1 %397 = and i1 %388, i1 %396;
    i32 %398 = zext i1 %397 to i32;
    i32 %399 = zext i1 %393 to i32;
    i32 %400 = or i32 %398, i32 %399;
    i1 %401 = icmp neq i32 %400, i32 0;
    i32 %402 = sdiv i32 %217, i32 16;
    i1 %403 = ztrunc i32 %402 to i1;
    i32 %404 = sdiv i32 %361, i32 16;
    i1 %405 = ztrunc i32 %404 to i1;
    i1 %406 = and i1 %403, i1 %405;
    i1 %407 = xor i1 %406, i1 true;
    i1 %408 = or i1 %403, i1 %405;
    i1 %409 = and i1 %407, i1 %408;
    i1 %410 = and i1 %401, i1 %409;
    i32 %411 = zext i1 %410 to i32;
    i32 %412 = zext i1 %406 to i32;
    i32 %413 = or i32 %411, i32 %412;
    i1 %414 = icmp neq i32 %413, i32 0;
    i32 %415 = sdiv i32 %217, i32 32;
    i1 %416 = ztrunc i32 %415 to i1;
    i32 %417 = sdiv i32 %361, i32 32;
    i1 %418 = ztrunc i32 %417 to i1;
    i1 %419 = and i1 %416, i1 %418;
    i1 %420 = xor i1 %419, i1 true;
    i1 %421 = or i1 %416, i1 %418;
    i1 %422 = and i1 %420, i1 %421;
    i1 %423 = and i1 %414, i1 %422;
    i32 %424 = zext i1 %423 to i32;
    i32 %425 = zext i1 %419 to i32;
    i32 %426 = or i32 %424, i32 %425;
    i1 %427 = icmp neq i32 %426, i32 0;
    i32 %428 = sdiv i32 %217, i32 64;
    i1 %429 = ztrunc i32 %428 to i1;
    i32 %430 = sdiv i32 %361, i32 64;
    i1 %431 = ztrunc i32 %430 to i1;
    i1 %432 = and i1 %429, i1 %431;
    i1 %433 = xor i1 %432, i1 true;
    i1 %434 = or i1 %429, i1 %431;
    i1 %435 = and i1 %433, i1 %434;
    i1 %436 = and i1 %427, i1 %435;
    i32 %437 = zext i1 %436 to i32;
    i32 %438 = zext i1 %432 to i32;
    i32 %439 = or i32 %437, i32 %438;
    i1 %440 = icmp neq i32 %439, i32 0;
    i32 %441 = sdiv i32 %217, i32 128;
    i1 %442 = ztrunc i32 %441 to i1;
    i32 %443 = sdiv i32 %361, i32 128;
    i1 %444 = ztrunc i32 %443 to i1;
    i1 %445 = and i1 %442, i1 %444;
    i1 %446 = xor i1 %445, i1 true;
    i1 %447 = or i1 %442, i1 %444;
    i1 %448 = and i1 %446, i1 %447;
    i1 %449 = and i1 %440, i1 %448;
    i32 %450 = zext i1 %449 to i32;
    i32 %451 = zext i1 %445 to i32;
    i32 %452 = or i32 %450, i32 %451;
    i1 %453 = icmp neq i32 %452, i32 0;
    i32 %454 = sdiv i32 %217, i32 256;
    i1 %455 = ztrunc i32 %454 to i1;
    i32 %456 = sdiv i32 %361, i32 256;
    i1 %457 = ztrunc i32 %456 to i1;
    i1 %458 = and i1 %455, i1 %457;
    i1 %459 = xor i1 %458, i1 true;
    i1 %460 = or i1 %455, i1 %457;
    i1 %461 = and i1 %459, i1 %460;
    i1 %462 = and i1 %453, i1 %461;
    i32 %463 = zext i1 %462 to i32;
    i32 %464 = zext i1 %458 to i32;
    i32 %465 = or i32 %463, i32 %464;
    i1 %466 = icmp neq i32 %465, i32 0;
    i32 %467 = sdiv i32 %217, i32 512;
    i1 %468 = ztrunc i32 %467 to i1;
    i32 %469 = sdiv i32 %361, i32 512;
    i1 %470 = ztrunc i32 %469 to i1;
    i1 %471 = and i1 %468, i1 %470;
    i1 %472 = xor i1 %471, i1 true;
    i1 %473 = or i1 %468, i1 %470;
    i1 %474 = and i1 %472, i1 %473;
    i1 %475 = and i1 %466, i1 %474;
    i32 %476 = zext i1 %475 to i32;
    i32 %477 = zext i1 %471 to i32;
    i32 %478 = or i32 %476, i32 %477;
    i1 %479 = icmp neq i32 %478, i32 0;
    i32 %480 = sdiv i32 %217, i32 1024;
    i1 %481 = ztrunc i32 %480 to i1;
    i32 %482 = sdiv i32 %361, i32 1024;
    i1 %483 = ztrunc i32 %482 to i1;
    i1 %484 = and i1 %481, i1 %483;
    i1 %485 = xor i1 %484, i1 true;
    i1 %486 = or i1 %481, i1 %483;
    i1 %487 = and i1 %485, i1 %486;
    i1 %488 = and i1 %479, i1 %487;
    i32 %489 = zext i1 %488 to i32;
    i32 %490 = zext i1 %484 to i32;
    i32 %491 = or i32 %489, i32 %490;
    i1 %492 = icmp neq i32 %491, i32 0;
    i32 %493 = sdiv i32 %217, i32 2048;
    i1 %494 = ztrunc i32 %493 to i1;
    i32 %495 = sdiv i32 %361, i32 2048;
    i1 %496 = ztrunc i32 %495 to i1;
    i1 %497 = and i1 %494, i1 %496;
    i1 %498 = xor i1 %497, i1 true;
    i1 %499 = or i1 %494, i1 %496;
    i1 %500 = and i1 %498, i1 %499;
    i1 %501 = and i1 %492, i1 %500;
    i32 %502 = zext i1 %501 to i32;
    i32 %503 = zext i1 %497 to i32;
    i32 %504 = or i32 %502, i32 %503;
    i1 %505 = icmp neq i32 %504, i32 0;
    i32 %506 = sdiv i32 %217, i32 4096;
    i1 %507 = ztrunc i32 %506 to i1;
    i32 %508 = sdiv i32 %361, i32 4096;
    i1 %509 = ztrunc i32 %508 to i1;
    i1 %510 = and i1 %507, i1 %509;
    i1 %511 = xor i1 %510, i1 true;
    i1 %512 = or i1 %507, i1 %509;
    i1 %513 = and i1 %511, i1 %512;
    i1 %514 = and i1 %505, i1 %513;
    i32 %515 = zext i1 %514 to i32;
    i32 %516 = zext i1 %510 to i32;
    i32 %517 = or i32 %515, i32 %516;
    i1 %518 = icmp neq i32 %517, i32 0;
    i32 %519 = sdiv i32 %217, i32 8192;
    i1 %520 = ztrunc i32 %519 to i1;
    i32 %521 = sdiv i32 %361, i32 8192;
    i1 %522 = ztrunc i32 %521 to i1;
    i1 %523 = and i1 %520, i1 %522;
    i1 %524 = xor i1 %523, i1 true;
    i1 %525 = or i1 %520, i1 %522;
    i1 %526 = and i1 %524, i1 %525;
    i1 %527 = and i1 %518, i1 %526;
    i32 %528 = zext i1 %527 to i32;
    i32 %529 = zext i1 %523 to i32;
    i32 %530 = or i32 %528, i32 %529;
    i1 %531 = icmp neq i32 %530, i32 0;
    i32 %532 = sdiv i32 %217, i32 16384;
    i1 %533 = ztrunc i32 %532 to i1;
    i32 %534 = sdiv i32 %361, i32 16384;
    i1 %535 = ztrunc i32 %534 to i1;
    i1 %536 = and i1 %533, i1 %535;
    i1 %537 = xor i1 %536, i1 true;
    i1 %538 = or i1 %533, i1 %535;
    i1 %539 = and i1 %537, i1 %538;
    i1 %540 = and i1 %531, i1 %539;
    i32 %541 = zext i1 %540 to i32;
    i32 %542 = zext i1 %536 to i32;
    i32 %543 = or i32 %541, i32 %542;
    i1 %544 = icmp neq i32 %543, i32 0;
    i32 %545 = sdiv i32 %217, i32 32768;
    i1 %546 = ztrunc i32 %545 to i1;
    i32 %547 = sdiv i32 %361, i32 32768;
    i1 %548 = ztrunc i32 %547 to i1;
    i1 %549 = and i1 %546, i1 %548;
    i1 %550 = xor i1 %549, i1 true;
    i1 %551 = or i1 %546, i1 %548;
    i1 %552 = and i1 %550, i1 %551;
    i1 %553 = and i1 %544, i1 %552;
    i1 %554 = xor i1 %553, i1 true;
    i1 %555 = or i1 %544, i1 %552;
    i1 %556 = and i1 %554, i1 %555;
    i32 %557 = zext i1 %556 to i32;
    i32 %558 = mul i32 %557, i32 2;
    i1 %559 = xor i1 %540, i1 true;
    i1 %560 = or i1 %531, i1 %539;
    i1 %561 = and i1 %559, i1 %560;
    i32 %562 = zext i1 %561 to i32;
    i32 %563 = add i32 %558, i32 %562;
    i32 %564 = mul i32 %563, i32 2;
    i1 %565 = xor i1 %527, i1 true;
    i1 %566 = or i1 %518, i1 %526;
    i1 %567 = and i1 %565, i1 %566;
    i32 %568 = zext i1 %567 to i32;
    i32 %569 = add i32 %564, i32 %568;
    i32 %570 = mul i32 %569, i32 2;
    i1 %571 = xor i1 %514, i1 true;
    i1 %572 = or i1 %505, i1 %513;
    i1 %573 = and i1 %571, i1 %572;
    i32 %574 = zext i1 %573 to i32;
    i32 %575 = add i32 %570, i32 %574;
    i32 %576 = mul i32 %575, i32 2;
    i1 %577 = xor i1 %501, i1 true;
    i1 %578 = or i1 %492, i1 %500;
    i1 %579 = and i1 %577, i1 %578;
    i32 %580 = zext i1 %579 to i32;
    i32 %581 = add i32 %576, i32 %580;
    i32 %582 = mul i32 %581, i32 2;
    i1 %583 = xor i1 %488, i1 true;
    i1 %584 = or i1 %479, i1 %487;
    i1 %585 = and i1 %583, i1 %584;
    i32 %586 = zext i1 %585 to i32;
    i32 %587 = add i32 %582, i32 %586;
    i32 %588 = mul i32 %587, i32 2;
    i1 %589 = xor i1 %475, i1 true;
    i1 %590 = or i1 %466, i1 %474;
    i1 %591 = and i1 %589, i1 %590;
    i32 %592 = zext i1 %591 to i32;
    i32 %593 = add i32 %588, i32 %592;
    i32 %594 = mul i32 %593, i32 2;
    i1 %595 = xor i1 %462, i1 true;
    i1 %596 = or i1 %453, i1 %461;
    i1 %597 = and i1 %595, i1 %596;
    i32 %598 = zext i1 %597 to i32;
    i32 %599 = add i32 %594, i32 %598;
    i32 %600 = mul i32 %599, i32 2;
    i1 %601 = xor i1 %449, i1 true;
    i1 %602 = or i1 %440, i1 %448;
    i1 %603 = and i1 %601, i1 %602;
    i32 %604 = zext i1 %603 to i32;
    i32 %605 = add i32 %600, i32 %604;
    i32 %606 = mul i32 %605, i32 2;
    i1 %607 = xor i1 %436, i1 true;
    i1 %608 = or i1 %427, i1 %435;
    i1 %609 = and i1 %607, i1 %608;
    i32 %610 = zext i1 %609 to i32;
    i32 %611 = add i32 %606, i32 %610;
    i32 %612 = mul i32 %611, i32 2;
    i1 %613 = xor i1 %423, i1 true;
    i1 %614 = or i1 %414, i1 %422;
    i1 %615 = and i1 %613, i1 %614;
    i32 %616 = zext i1 %615 to i32;
    i32 %617 = add i32 %612, i32 %616;
    i32 %618 = mul i32 %617, i32 2;
    i1 %619 = xor i1 %410, i1 true;
    i1 %620 = or i1 %401, i1 %409;
    i1 %621 = and i1 %619, i1 %620;
    i32 %622 = zext i1 %621 to i32;
    i32 %623 = add i32 %618, i32 %622;
    i32 %624 = mul i32 %623, i32 2;
    i1 %625 = xor i1 %397, i1 true;
    i1 %626 = or i1 %388, i1 %396;
    i1 %627 = and i1 %625, i1 %626;
    i32 %628 = zext i1 %627 to i32;
    i32 %629 = add i32 %624, i32 %628;
    i32 %630 = mul i32 %629, i32 2;
    i1 %631 = xor i1 %384, i1 true;
    i1 %632 = or i1 %375, i1 %383;
    i1 %633 = and i1 %631, i1 %632;
    i32 %634 = zext i1 %633 to i32;
    i32 %635 = add i32 %630, i32 %634;
    i32 %636 = mul i32 %635, i32 2;
    i1 %637 = xor i1 %371, i1 true;
    i1 %638 = and i1 %368, i1 %370;
    i1 %639 = or i1 %367, i1 %638;
    i1 %640 = and i1 %637, i1 %639;
    i32 %641 = zext i1 %640 to i32;
    i32 %642 = add i32 %636, i32 %641;
    i32 %643 = mul i32 %642, i32 2;
    i1 %644 = xor i1 %638, i1 true;
    i1 %645 = or i1 %368, i1 %370;
    i1 %646 = and i1 %644, i1 %645;
    i32 %647 = zext i1 %646 to i32;
    i32 %648 = add i32 %643, i32 %647;
    store i32* %2 with i32 1;
    store i32* %5 with i32 %648;
    ubr ^b3;
  ^b3:
    i32 %649 = phi [^b, i32 %6] [^b1, i32 1] [^b2, i32 %648];
    ret i32 %649;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = icmp slt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
internal [4084 * i32]* @lut_fib, align 8;
