internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp slt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i1 %2 = ztrunc i32 %1 to i1;
    i1 %3 = xor i1 %2, i1 true;
    i1 %4 = ztrunc i32 %n to i1;
    i1 %5 = and i1 %3, i1 %4;
    i1 %6 = or i1 %2, i1 %5;
    i32 %7 = sdiv i32 %n, i32 4;
    i1 %8 = ztrunc i32 %7 to i1;
    i1 %9 = xor i1 %8, i1 true;
    i1 %10 = and i1 %6, i1 %9;
    i1 %11 = or i1 %8, i1 %10;
    i32 %12 = sdiv i32 %n, i32 8;
    i1 %13 = ztrunc i32 %12 to i1;
    i1 %14 = xor i1 %13, i1 true;
    i1 %15 = and i1 %11, i1 %14;
    i1 %16 = or i1 %13, i1 %15;
    i32 %17 = sdiv i32 %n, i32 16;
    i1 %18 = ztrunc i32 %17 to i1;
    i1 %19 = xor i1 %18, i1 true;
    i1 %20 = and i1 %16, i1 %19;
    i1 %21 = or i1 %18, i1 %20;
    i32 %22 = sdiv i32 %n, i32 32;
    i1 %23 = ztrunc i32 %22 to i1;
    i1 %24 = xor i1 %23, i1 true;
    i1 %25 = and i1 %21, i1 %24;
    i1 %26 = or i1 %23, i1 %25;
    i32 %27 = sdiv i32 %n, i32 64;
    i1 %28 = ztrunc i32 %27 to i1;
    i1 %29 = xor i1 %28, i1 true;
    i1 %30 = and i1 %26, i1 %29;
    i1 %31 = or i1 %28, i1 %30;
    i32 %32 = sdiv i32 %n, i32 128;
    i1 %33 = ztrunc i32 %32 to i1;
    i1 %34 = xor i1 %33, i1 true;
    i1 %35 = and i1 %31, i1 %34;
    i1 %36 = or i1 %33, i1 %35;
    i32 %37 = sdiv i32 %n, i32 256;
    i1 %38 = ztrunc i32 %37 to i1;
    i1 %39 = xor i1 %38, i1 true;
    i1 %40 = and i1 %36, i1 %39;
    i1 %41 = or i1 %38, i1 %40;
    i32 %42 = sdiv i32 %n, i32 512;
    i1 %43 = ztrunc i32 %42 to i1;
    i1 %44 = xor i1 %43, i1 true;
    i1 %45 = and i1 %41, i1 %44;
    i1 %46 = or i1 %43, i1 %45;
    i32 %47 = sdiv i32 %n, i32 1024;
    i1 %48 = ztrunc i32 %47 to i1;
    i1 %49 = xor i1 %48, i1 true;
    i1 %50 = and i1 %46, i1 %49;
    i1 %51 = or i1 %48, i1 %50;
    i32 %52 = sdiv i32 %n, i32 2048;
    i1 %53 = ztrunc i32 %52 to i1;
    i1 %54 = xor i1 %53, i1 true;
    i1 %55 = and i1 %51, i1 %54;
    i1 %56 = or i1 %53, i1 %55;
    i32 %57 = sdiv i32 %n, i32 4096;
    i1 %58 = ztrunc i32 %57 to i1;
    i1 %59 = xor i1 %58, i1 true;
    i1 %60 = and i1 %56, i1 %59;
    i1 %61 = or i1 %58, i1 %60;
    i32 %62 = sdiv i32 %n, i32 8192;
    i1 %63 = ztrunc i32 %62 to i1;
    i1 %64 = xor i1 %63, i1 true;
    i1 %65 = and i1 %61, i1 %64;
    i1 %66 = or i1 %63, i1 %65;
    i32 %67 = sdiv i32 %n, i32 16384;
    i1 %68 = ztrunc i32 %67 to i1;
    i1 %69 = xor i1 %68, i1 true;
    i1 %70 = and i1 %66, i1 %69;
    i1 %71 = or i1 %68, i1 %70;
    i32 %72 = sdiv i32 %n, i32 32768;
    i1 %73 = ztrunc i32 %72 to i1;
    i1 %74 = xor i1 %73, i1 true;
    i1 %75 = and i1 %71, i1 %74;
    i1 %76 = xor i1 %75, i1 true;
    i1 %77 = or i1 %70, i1 %74;
    i1 %78 = or i1 %68, i1 %77;
    i1 %79 = and i1 %76, i1 %78;
    i32 %80 = zext i1 %79 to i32;
    i32 %81 = mul i32 %80, i32 2;
    i1 %82 = xor i1 %70, i1 true;
    i1 %83 = or i1 %65, i1 %69;
    i1 %84 = or i1 %63, i1 %83;
    i1 %85 = and i1 %82, i1 %84;
    i32 %86 = zext i1 %85 to i32;
    i32 %87 = add i32 %81, i32 %86;
    i32 %88 = mul i32 %87, i32 2;
    i1 %89 = xor i1 %65, i1 true;
    i1 %90 = or i1 %60, i1 %64;
    i1 %91 = or i1 %58, i1 %90;
    i1 %92 = and i1 %89, i1 %91;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = add i32 %88, i32 %93;
    i32 %95 = mul i32 %94, i32 2;
    i1 %96 = xor i1 %60, i1 true;
    i1 %97 = or i1 %55, i1 %59;
    i1 %98 = or i1 %53, i1 %97;
    i1 %99 = and i1 %96, i1 %98;
    i32 %100 = zext i1 %99 to i32;
    i32 %101 = add i32 %95, i32 %100;
    i32 %102 = mul i32 %101, i32 2;
    i1 %103 = xor i1 %55, i1 true;
    i1 %104 = or i1 %50, i1 %54;
    i1 %105 = or i1 %48, i1 %104;
    i1 %106 = and i1 %103, i1 %105;
    i32 %107 = zext i1 %106 to i32;
    i32 %108 = add i32 %102, i32 %107;
    i32 %109 = mul i32 %108, i32 2;
    i1 %110 = xor i1 %50, i1 true;
    i1 %111 = or i1 %45, i1 %49;
    i1 %112 = or i1 %43, i1 %111;
    i1 %113 = and i1 %110, i1 %112;
    i32 %114 = zext i1 %113 to i32;
    i32 %115 = add i32 %109, i32 %114;
    i32 %116 = mul i32 %115, i32 2;
    i1 %117 = xor i1 %45, i1 true;
    i1 %118 = or i1 %40, i1 %44;
    i1 %119 = or i1 %38, i1 %118;
    i1 %120 = and i1 %117, i1 %119;
    i32 %121 = zext i1 %120 to i32;
    i32 %122 = add i32 %116, i32 %121;
    i32 %123 = mul i32 %122, i32 2;
    i1 %124 = xor i1 %40, i1 true;
    i1 %125 = or i1 %35, i1 %39;
    i1 %126 = or i1 %33, i1 %125;
    i1 %127 = and i1 %124, i1 %126;
    i32 %128 = zext i1 %127 to i32;
    i32 %129 = add i32 %123, i32 %128;
    i32 %130 = mul i32 %129, i32 2;
    i1 %131 = xor i1 %35, i1 true;
    i1 %132 = or i1 %30, i1 %34;
    i1 %133 = or i1 %28, i1 %132;
    i1 %134 = and i1 %131, i1 %133;
    i32 %135 = zext i1 %134 to i32;
    i32 %136 = add i32 %130, i32 %135;
    i32 %137 = mul i32 %136, i32 2;
    i1 %138 = xor i1 %30, i1 true;
    i1 %139 = or i1 %25, i1 %29;
    i1 %140 = or i1 %23, i1 %139;
    i1 %141 = and i1 %138, i1 %140;
    i32 %142 = zext i1 %141 to i32;
    i32 %143 = add i32 %137, i32 %142;
    i32 %144 = mul i32 %143, i32 2;
    i1 %145 = xor i1 %25, i1 true;
    i1 %146 = or i1 %20, i1 %24;
    i1 %147 = or i1 %18, i1 %146;
    i1 %148 = and i1 %145, i1 %147;
    i32 %149 = zext i1 %148 to i32;
    i32 %150 = add i32 %144, i32 %149;
    i32 %151 = mul i32 %150, i32 2;
    i1 %152 = xor i1 %20, i1 true;
    i1 %153 = or i1 %15, i1 %19;
    i1 %154 = or i1 %13, i1 %153;
    i1 %155 = and i1 %152, i1 %154;
    i32 %156 = zext i1 %155 to i32;
    i32 %157 = add i32 %151, i32 %156;
    i32 %158 = mul i32 %157, i32 2;
    i1 %159 = xor i1 %15, i1 true;
    i1 %160 = or i1 %10, i1 %14;
    i1 %161 = or i1 %8, i1 %160;
    i1 %162 = and i1 %159, i1 %161;
    i32 %163 = zext i1 %162 to i32;
    i32 %164 = add i32 %158, i32 %163;
    i32 %165 = mul i32 %164, i32 2;
    i1 %166 = xor i1 %10, i1 true;
    i1 %167 = or i1 %5, i1 %9;
    i1 %168 = or i1 %2, i1 %167;
    i1 %169 = and i1 %166, i1 %168;
    i32 %170 = zext i1 %169 to i32;
    i32 %171 = add i32 %165, i32 %170;
    i32 %172 = mul i32 %171, i32 2;
    i1 %173 = xor i1 %5, i1 true;
    i1 %174 = or i1 %3, i1 %4;
    i1 %175 = and i1 %173, i1 %174;
    i32 %176 = zext i1 %175 to i32;
    i32 %177 = add i32 %172, i32 %176;
    i32 %178 = mul i32 %177, i32 2;
    i1 %179 = xor i1 %4, i1 true;
    i32 %180 = zext i1 %179 to i32;
    i32 %181 = add i32 %178, i32 %180;
    i32 %182 = call (i32) -> i32 @fib(i32 %181);
    i32 %183 = sdiv i32 %182, i32 2;
    i1 %184 = ztrunc i32 %183 to i1;
    i1 %185 = and i1 %2, i1 %9;
    i1 %186 = or i1 %8, i1 %185;
    i1 %187 = and i1 %14, i1 %186;
    i1 %188 = or i1 %13, i1 %187;
    i1 %189 = and i1 %19, i1 %188;
    i1 %190 = or i1 %18, i1 %189;
    i1 %191 = and i1 %24, i1 %190;
    i1 %192 = or i1 %23, i1 %191;
    i1 %193 = and i1 %29, i1 %192;
    i1 %194 = or i1 %28, i1 %193;
    i1 %195 = and i1 %34, i1 %194;
    i1 %196 = or i1 %33, i1 %195;
    i1 %197 = and i1 %39, i1 %196;
    i1 %198 = or i1 %38, i1 %197;
    i1 %199 = and i1 %44, i1 %198;
    i1 %200 = or i1 %43, i1 %199;
    i1 %201 = and i1 %49, i1 %200;
    i1 %202 = or i1 %48, i1 %201;
    i1 %203 = and i1 %54, i1 %202;
    i1 %204 = or i1 %53, i1 %203;
    i1 %205 = and i1 %59, i1 %204;
    i1 %206 = or i1 %58, i1 %205;
    i1 %207 = and i1 %64, i1 %206;
    i1 %208 = or i1 %63, i1 %207;
    i1 %209 = and i1 %69, i1 %208;
    i1 %210 = or i1 %68, i1 %209;
    i1 %211 = and i1 %74, i1 %210;
    i1 %212 = xor i1 %211, i1 true;
    i1 %213 = or i1 %74, i1 %209;
    i1 %214 = or i1 %68, i1 %213;
    i1 %215 = and i1 %212, i1 %214;
    i32 %216 = zext i1 %215 to i32;
    i32 %217 = mul i32 %216, i32 2;
    i1 %218 = xor i1 %209, i1 true;
    i1 %219 = or i1 %69, i1 %207;
    i1 %220 = or i1 %63, i1 %219;
    i1 %221 = and i1 %218, i1 %220;
    i32 %222 = zext i1 %221 to i32;
    i32 %223 = add i32 %217, i32 %222;
    i32 %224 = mul i32 %223, i32 2;
    i1 %225 = xor i1 %207, i1 true;
    i1 %226 = or i1 %64, i1 %205;
    i1 %227 = or i1 %58, i1 %226;
    i1 %228 = and i1 %225, i1 %227;
    i32 %229 = zext i1 %228 to i32;
    i32 %230 = add i32 %224, i32 %229;
    i32 %231 = mul i32 %230, i32 2;
    i1 %232 = xor i1 %205, i1 true;
    i1 %233 = or i1 %59, i1 %203;
    i1 %234 = or i1 %53, i1 %233;
    i1 %235 = and i1 %232, i1 %234;
    i32 %236 = zext i1 %235 to i32;
    i32 %237 = add i32 %231, i32 %236;
    i32 %238 = mul i32 %237, i32 2;
    i1 %239 = xor i1 %203, i1 true;
    i1 %240 = or i1 %54, i1 %201;
    i1 %241 = or i1 %48, i1 %240;
    i1 %242 = and i1 %239, i1 %241;
    i32 %243 = zext i1 %242 to i32;
    i32 %244 = add i32 %238, i32 %243;
    i32 %245 = mul i32 %244, i32 2;
    i1 %246 = xor i1 %201, i1 true;
    i1 %247 = or i1 %49, i1 %199;
    i1 %248 = or i1 %43, i1 %247;
    i1 %249 = and i1 %246, i1 %248;
    i32 %250 = zext i1 %249 to i32;
    i32 %251 = add i32 %245, i32 %250;
    i32 %252 = mul i32 %251, i32 2;
    i1 %253 = xor i1 %199, i1 true;
    i1 %254 = or i1 %44, i1 %197;
    i1 %255 = or i1 %38, i1 %254;
    i1 %256 = and i1 %253, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = add i32 %252, i32 %257;
    i32 %259 = mul i32 %258, i32 2;
    i1 %260 = xor i1 %197, i1 true;
    i1 %261 = or i1 %39, i1 %195;
    i1 %262 = or i1 %33, i1 %261;
    i1 %263 = and i1 %260, i1 %262;
    i32 %264 = zext i1 %263 to i32;
    i32 %265 = add i32 %259, i32 %264;
    i32 %266 = mul i32 %265, i32 2;
    i1 %267 = xor i1 %195, i1 true;
    i1 %268 = or i1 %34, i1 %193;
    i1 %269 = or i1 %28, i1 %268;
    i1 %270 = and i1 %267, i1 %269;
    i32 %271 = zext i1 %270 to i32;
    i32 %272 = add i32 %266, i32 %271;
    i32 %273 = mul i32 %272, i32 2;
    i1 %274 = xor i1 %193, i1 true;
    i1 %275 = or i1 %29, i1 %191;
    i1 %276 = or i1 %23, i1 %275;
    i1 %277 = and i1 %274, i1 %276;
    i32 %278 = zext i1 %277 to i32;
    i32 %279 = add i32 %273, i32 %278;
    i32 %280 = mul i32 %279, i32 2;
    i1 %281 = xor i1 %191, i1 true;
    i1 %282 = or i1 %24, i1 %189;
    i1 %283 = or i1 %18, i1 %282;
    i1 %284 = and i1 %281, i1 %283;
    i32 %285 = zext i1 %284 to i32;
    i32 %286 = add i32 %280, i32 %285;
    i32 %287 = mul i32 %286, i32 2;
    i1 %288 = xor i1 %189, i1 true;
    i1 %289 = or i1 %19, i1 %187;
    i1 %290 = or i1 %13, i1 %289;
    i1 %291 = and i1 %288, i1 %290;
    i32 %292 = zext i1 %291 to i32;
    i32 %293 = add i32 %287, i32 %292;
    i32 %294 = mul i32 %293, i32 2;
    i1 %295 = xor i1 %187, i1 true;
    i1 %296 = or i1 %14, i1 %185;
    i1 %297 = or i1 %8, i1 %296;
    i1 %298 = and i1 %295, i1 %297;
    i32 %299 = zext i1 %298 to i32;
    i32 %300 = add i32 %294, i32 %299;
    i32 %301 = mul i32 %300, i32 2;
    i1 %302 = xor i1 %185, i1 true;
    i1 %303 = or i1 %2, i1 %9;
    i1 %304 = and i1 %302, i1 %303;
    i32 %305 = zext i1 %304 to i32;
    i32 %306 = add i32 %301, i32 %305;
    i32 %307 = mul i32 %306, i32 2;
    i32 %308 = zext i1 %3 to i32;
    i32 %309 = add i32 %307, i32 %308;
    i32 %310 = mul i32 %309, i32 2;
    i32 %311 = and i32 %n, i32 1;
    i32 %312 = add i32 %310, i32 %311;
    i32 %313 = call (i32) -> i32 @fib(i32 %312);
    i32 %314 = sdiv i32 %313, i32 2;
    i1 %315 = ztrunc i32 %314 to i1;
    i1 %316 = and i1 %184, i1 %315;
    i1 %317 = xor i1 %316, i1 true;
    i1 %318 = or i1 %184, i1 %315;
    i1 %319 = and i1 %317, i1 %318;
    i1 %320 = ztrunc i32 %182 to i1;
    i1 %321 = and i1 %319, i1 %320;
    i1 %322 = ztrunc i32 %313 to i1;
    i1 %323 = and i1 %321, i1 %322;
    i1 %324 = or i1 %316, i1 %323;
    i32 %325 = sdiv i32 %182, i32 4;
    i1 %326 = ztrunc i32 %325 to i1;
    i32 %327 = sdiv i32 %313, i32 4;
    i1 %328 = ztrunc i32 %327 to i1;
    i1 %329 = or i1 %326, i1 %328;
    i1 %330 = and i1 %324, i1 %329;
    i1 %331 = and i1 %326, i1 %328;
    i1 %332 = xor i1 %331, i1 true;
    i1 %333 = and i1 %330, i1 %332;
    i1 %334 = or i1 %331, i1 %333;
    i32 %335 = sdiv i32 %182, i32 8;
    i1 %336 = ztrunc i32 %335 to i1;
    i32 %337 = sdiv i32 %313, i32 8;
    i1 %338 = ztrunc i32 %337 to i1;
    i1 %339 = or i1 %336, i1 %338;
    i1 %340 = and i1 %334, i1 %339;
    i1 %341 = and i1 %336, i1 %338;
    i1 %342 = xor i1 %341, i1 true;
    i1 %343 = and i1 %340, i1 %342;
    i1 %344 = or i1 %341, i1 %343;
    i32 %345 = sdiv i32 %182, i32 16;
    i1 %346 = ztrunc i32 %345 to i1;
    i32 %347 = sdiv i32 %313, i32 16;
    i1 %348 = ztrunc i32 %347 to i1;
    i1 %349 = or i1 %346, i1 %348;
    i1 %350 = and i1 %344, i1 %349;
    i1 %351 = and i1 %346, i1 %348;
    i1 %352 = xor i1 %351, i1 true;
    i1 %353 = and i1 %350, i1 %352;
    i1 %354 = or i1 %351, i1 %353;
    i32 %355 = sdiv i32 %182, i32 32;
    i1 %356 = ztrunc i32 %355 to i1;
    i32 %357 = sdiv i32 %313, i32 32;
    i1 %358 = ztrunc i32 %357 to i1;
    i1 %359 = or i1 %356, i1 %358;
    i1 %360 = and i1 %354, i1 %359;
    i1 %361 = and i1 %356, i1 %358;
    i1 %362 = xor i1 %361, i1 true;
    i1 %363 = and i1 %360, i1 %362;
    i1 %364 = or i1 %361, i1 %363;
    i32 %365 = sdiv i32 %182, i32 64;
    i1 %366 = ztrunc i32 %365 to i1;
    i32 %367 = sdiv i32 %313, i32 64;
    i1 %368 = ztrunc i32 %367 to i1;
    i1 %369 = or i1 %366, i1 %368;
    i1 %370 = and i1 %364, i1 %369;
    i1 %371 = and i1 %366, i1 %368;
    i1 %372 = xor i1 %371, i1 true;
    i1 %373 = and i1 %370, i1 %372;
    i1 %374 = or i1 %371, i1 %373;
    i32 %375 = sdiv i32 %182, i32 128;
    i1 %376 = ztrunc i32 %375 to i1;
    i32 %377 = sdiv i32 %313, i32 128;
    i1 %378 = ztrunc i32 %377 to i1;
    i1 %379 = or i1 %376, i1 %378;
    i1 %380 = and i1 %374, i1 %379;
    i1 %381 = and i1 %376, i1 %378;
    i1 %382 = xor i1 %381, i1 true;
    i1 %383 = and i1 %380, i1 %382;
    i1 %384 = or i1 %381, i1 %383;
    i32 %385 = sdiv i32 %182, i32 256;
    i1 %386 = ztrunc i32 %385 to i1;
    i32 %387 = sdiv i32 %313, i32 256;
    i1 %388 = ztrunc i32 %387 to i1;
    i1 %389 = or i1 %386, i1 %388;
    i1 %390 = and i1 %384, i1 %389;
    i1 %391 = and i1 %386, i1 %388;
    i1 %392 = xor i1 %391, i1 true;
    i1 %393 = and i1 %390, i1 %392;
    i1 %394 = or i1 %391, i1 %393;
    i32 %395 = sdiv i32 %182, i32 512;
    i1 %396 = ztrunc i32 %395 to i1;
    i32 %397 = sdiv i32 %313, i32 512;
    i1 %398 = ztrunc i32 %397 to i1;
    i1 %399 = or i1 %396, i1 %398;
    i1 %400 = and i1 %394, i1 %399;
    i1 %401 = and i1 %396, i1 %398;
    i1 %402 = xor i1 %401, i1 true;
    i1 %403 = and i1 %400, i1 %402;
    i1 %404 = or i1 %401, i1 %403;
    i32 %405 = sdiv i32 %182, i32 1024;
    i1 %406 = ztrunc i32 %405 to i1;
    i32 %407 = sdiv i32 %313, i32 1024;
    i1 %408 = ztrunc i32 %407 to i1;
    i1 %409 = or i1 %406, i1 %408;
    i1 %410 = and i1 %404, i1 %409;
    i1 %411 = and i1 %406, i1 %408;
    i1 %412 = xor i1 %411, i1 true;
    i1 %413 = and i1 %410, i1 %412;
    i1 %414 = or i1 %411, i1 %413;
    i32 %415 = sdiv i32 %182, i32 2048;
    i1 %416 = ztrunc i32 %415 to i1;
    i32 %417 = sdiv i32 %313, i32 2048;
    i1 %418 = ztrunc i32 %417 to i1;
    i1 %419 = or i1 %416, i1 %418;
    i1 %420 = and i1 %414, i1 %419;
    i1 %421 = and i1 %416, i1 %418;
    i1 %422 = xor i1 %421, i1 true;
    i1 %423 = and i1 %420, i1 %422;
    i1 %424 = or i1 %421, i1 %423;
    i32 %425 = sdiv i32 %182, i32 4096;
    i1 %426 = ztrunc i32 %425 to i1;
    i32 %427 = sdiv i32 %313, i32 4096;
    i1 %428 = ztrunc i32 %427 to i1;
    i1 %429 = or i1 %426, i1 %428;
    i1 %430 = and i1 %424, i1 %429;
    i1 %431 = and i1 %426, i1 %428;
    i1 %432 = xor i1 %431, i1 true;
    i1 %433 = and i1 %430, i1 %432;
    i1 %434 = or i1 %431, i1 %433;
    i32 %435 = sdiv i32 %182, i32 8192;
    i1 %436 = ztrunc i32 %435 to i1;
    i32 %437 = sdiv i32 %313, i32 8192;
    i1 %438 = ztrunc i32 %437 to i1;
    i1 %439 = or i1 %436, i1 %438;
    i1 %440 = and i1 %434, i1 %439;
    i1 %441 = and i1 %436, i1 %438;
    i1 %442 = xor i1 %441, i1 true;
    i1 %443 = and i1 %440, i1 %442;
    i1 %444 = or i1 %441, i1 %443;
    i32 %445 = sdiv i32 %182, i32 16384;
    i1 %446 = ztrunc i32 %445 to i1;
    i32 %447 = sdiv i32 %313, i32 16384;
    i1 %448 = ztrunc i32 %447 to i1;
    i1 %449 = or i1 %446, i1 %448;
    i1 %450 = and i1 %444, i1 %449;
    i1 %451 = and i1 %446, i1 %448;
    i1 %452 = xor i1 %451, i1 true;
    i1 %453 = and i1 %450, i1 %452;
    i1 %454 = or i1 %451, i1 %453;
    i32 %455 = sdiv i32 %182, i32 32768;
    i1 %456 = ztrunc i32 %455 to i1;
    i32 %457 = sdiv i32 %313, i32 32768;
    i1 %458 = ztrunc i32 %457 to i1;
    i1 %459 = or i1 %456, i1 %458;
    i1 %460 = and i1 %454, i1 %459;
    i1 %461 = and i1 %456, i1 %458;
    i1 %462 = xor i1 %461, i1 true;
    i1 %463 = and i1 %460, i1 %462;
    i1 %464 = xor i1 %463, i1 true;
    i1 %465 = and i1 %459, i1 %462;
    i1 %466 = or i1 %454, i1 %465;
    i1 %467 = and i1 %464, i1 %466;
    i32 %468 = zext i1 %467 to i32;
    i32 %469 = mul i32 %468, i32 2;
    i1 %470 = xor i1 %453, i1 true;
    i1 %471 = and i1 %449, i1 %452;
    i1 %472 = or i1 %444, i1 %471;
    i1 %473 = and i1 %470, i1 %472;
    i32 %474 = zext i1 %473 to i32;
    i32 %475 = add i32 %469, i32 %474;
    i32 %476 = mul i32 %475, i32 2;
    i1 %477 = xor i1 %443, i1 true;
    i1 %478 = and i1 %439, i1 %442;
    i1 %479 = or i1 %434, i1 %478;
    i1 %480 = and i1 %477, i1 %479;
    i32 %481 = zext i1 %480 to i32;
    i32 %482 = add i32 %476, i32 %481;
    i32 %483 = mul i32 %482, i32 2;
    i1 %484 = xor i1 %433, i1 true;
    i1 %485 = and i1 %429, i1 %432;
    i1 %486 = or i1 %424, i1 %485;
    i1 %487 = and i1 %484, i1 %486;
    i32 %488 = zext i1 %487 to i32;
    i32 %489 = add i32 %483, i32 %488;
    i32 %490 = mul i32 %489, i32 2;
    i1 %491 = xor i1 %423, i1 true;
    i1 %492 = and i1 %419, i1 %422;
    i1 %493 = or i1 %414, i1 %492;
    i1 %494 = and i1 %491, i1 %493;
    i32 %495 = zext i1 %494 to i32;
    i32 %496 = add i32 %490, i32 %495;
    i32 %497 = mul i32 %496, i32 2;
    i1 %498 = xor i1 %413, i1 true;
    i1 %499 = and i1 %409, i1 %412;
    i1 %500 = or i1 %404, i1 %499;
    i1 %501 = and i1 %498, i1 %500;
    i32 %502 = zext i1 %501 to i32;
    i32 %503 = add i32 %497, i32 %502;
    i32 %504 = mul i32 %503, i32 2;
    i1 %505 = xor i1 %403, i1 true;
    i1 %506 = and i1 %399, i1 %402;
    i1 %507 = or i1 %394, i1 %506;
    i1 %508 = and i1 %505, i1 %507;
    i32 %509 = zext i1 %508 to i32;
    i32 %510 = add i32 %504, i32 %509;
    i32 %511 = mul i32 %510, i32 2;
    i1 %512 = xor i1 %393, i1 true;
    i1 %513 = and i1 %389, i1 %392;
    i1 %514 = or i1 %384, i1 %513;
    i1 %515 = and i1 %512, i1 %514;
    i32 %516 = zext i1 %515 to i32;
    i32 %517 = add i32 %511, i32 %516;
    i32 %518 = mul i32 %517, i32 2;
    i1 %519 = xor i1 %383, i1 true;
    i1 %520 = and i1 %379, i1 %382;
    i1 %521 = or i1 %374, i1 %520;
    i1 %522 = and i1 %519, i1 %521;
    i32 %523 = zext i1 %522 to i32;
    i32 %524 = add i32 %518, i32 %523;
    i32 %525 = mul i32 %524, i32 2;
    i1 %526 = xor i1 %373, i1 true;
    i1 %527 = and i1 %369, i1 %372;
    i1 %528 = or i1 %364, i1 %527;
    i1 %529 = and i1 %526, i1 %528;
    i32 %530 = zext i1 %529 to i32;
    i32 %531 = add i32 %525, i32 %530;
    i32 %532 = mul i32 %531, i32 2;
    i1 %533 = xor i1 %363, i1 true;
    i1 %534 = and i1 %359, i1 %362;
    i1 %535 = or i1 %354, i1 %534;
    i1 %536 = and i1 %533, i1 %535;
    i32 %537 = zext i1 %536 to i32;
    i32 %538 = add i32 %532, i32 %537;
    i32 %539 = mul i32 %538, i32 2;
    i1 %540 = xor i1 %353, i1 true;
    i1 %541 = and i1 %349, i1 %352;
    i1 %542 = or i1 %344, i1 %541;
    i1 %543 = and i1 %540, i1 %542;
    i32 %544 = zext i1 %543 to i32;
    i32 %545 = add i32 %539, i32 %544;
    i32 %546 = mul i32 %545, i32 2;
    i1 %547 = xor i1 %343, i1 true;
    i1 %548 = and i1 %339, i1 %342;
    i1 %549 = or i1 %334, i1 %548;
    i1 %550 = and i1 %547, i1 %549;
    i32 %551 = zext i1 %550 to i32;
    i32 %552 = add i32 %546, i32 %551;
    i32 %553 = mul i32 %552, i32 2;
    i1 %554 = xor i1 %333, i1 true;
    i1 %555 = and i1 %329, i1 %332;
    i1 %556 = or i1 %324, i1 %555;
    i1 %557 = and i1 %554, i1 %556;
    i32 %558 = zext i1 %557 to i32;
    i32 %559 = add i32 %553, i32 %558;
    i32 %560 = mul i32 %559, i32 2;
    i1 %561 = xor i1 %323, i1 true;
    i1 %562 = and i1 %320, i1 %322;
    i1 %563 = or i1 %319, i1 %562;
    i1 %564 = and i1 %561, i1 %563;
    i32 %565 = zext i1 %564 to i32;
    i32 %566 = add i32 %560, i32 %565;
    i32 %567 = mul i32 %566, i32 2;
    i1 %568 = xor i1 %562, i1 true;
    i1 %569 = or i1 %320, i1 %322;
    i1 %570 = and i1 %568, i1 %569;
    i32 %571 = zext i1 %570 to i32;
    i32 %572 = add i32 %567, i32 %571;
    ubr ^b1;
  ^b1:
    i32 %573 = phi [^entry, i32 1] [^b, i32 %572];
    ret i32 %573;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = icmp slt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
