internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp slt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i1 %2 = ztrunc i32 %1 to i1;
    i1 %3 = xor i1 %2, i1 true;
    i1 %4 = ztrunc i32 %n to i1;
    i1 %5 = and i1 %3, i1 %4;
    i1 %6 = or i1 %2, i1 %5;
    i32 %7 = sdiv i32 %n, i32 4;
    i1 %8 = ztrunc i32 %7 to i1;
    i1 %9 = xor i1 %8, i1 true;
    i1 %10 = and i1 %6, i1 %9;
    i1 %11 = or i1 %8, i1 %10;
    i32 %12 = sdiv i32 %n, i32 8;
    i1 %13 = ztrunc i32 %12 to i1;
    i1 %14 = xor i1 %13, i1 true;
    i1 %15 = and i1 %11, i1 %14;
    i1 %16 = or i1 %13, i1 %15;
    i32 %17 = sdiv i32 %n, i32 16;
    i1 %18 = ztrunc i32 %17 to i1;
    i1 %19 = xor i1 %18, i1 true;
    i1 %20 = and i1 %16, i1 %19;
    i1 %21 = or i1 %18, i1 %20;
    i32 %22 = sdiv i32 %n, i32 32;
    i1 %23 = ztrunc i32 %22 to i1;
    i1 %24 = xor i1 %23, i1 true;
    i1 %25 = and i1 %21, i1 %24;
    i1 %26 = or i1 %23, i1 %25;
    i32 %27 = sdiv i32 %n, i32 64;
    i1 %28 = ztrunc i32 %27 to i1;
    i1 %29 = xor i1 %28, i1 true;
    i1 %30 = and i1 %26, i1 %29;
    i1 %31 = or i1 %28, i1 %30;
    i32 %32 = sdiv i32 %n, i32 128;
    i1 %33 = ztrunc i32 %32 to i1;
    i1 %34 = xor i1 %33, i1 true;
    i1 %35 = and i1 %31, i1 %34;
    i1 %36 = or i1 %33, i1 %35;
    i32 %37 = sdiv i32 %n, i32 256;
    i1 %38 = ztrunc i32 %37 to i1;
    i1 %39 = xor i1 %38, i1 true;
    i1 %40 = and i1 %36, i1 %39;
    i1 %41 = or i1 %38, i1 %40;
    i32 %42 = sdiv i32 %n, i32 512;
    i1 %43 = ztrunc i32 %42 to i1;
    i1 %44 = xor i1 %43, i1 true;
    i1 %45 = and i1 %41, i1 %44;
    i1 %46 = or i1 %43, i1 %45;
    i32 %47 = sdiv i32 %n, i32 1024;
    i1 %48 = ztrunc i32 %47 to i1;
    i1 %49 = xor i1 %48, i1 true;
    i1 %50 = and i1 %46, i1 %49;
    i1 %51 = or i1 %48, i1 %50;
    i32 %52 = sdiv i32 %n, i32 2048;
    i1 %53 = ztrunc i32 %52 to i1;
    i1 %54 = xor i1 %53, i1 true;
    i1 %55 = and i1 %51, i1 %54;
    i1 %56 = or i1 %53, i1 %55;
    i32 %57 = sdiv i32 %n, i32 4096;
    i1 %58 = ztrunc i32 %57 to i1;
    i1 %59 = xor i1 %58, i1 true;
    i1 %60 = and i1 %56, i1 %59;
    i1 %61 = or i1 %58, i1 %60;
    i32 %62 = sdiv i32 %n, i32 8192;
    i1 %63 = ztrunc i32 %62 to i1;
    i1 %64 = xor i1 %63, i1 true;
    i1 %65 = and i1 %61, i1 %64;
    i1 %66 = or i1 %63, i1 %65;
    i32 %67 = sdiv i32 %n, i32 16384;
    i1 %68 = ztrunc i32 %67 to i1;
    i1 %69 = xor i1 %68, i1 true;
    i1 %70 = and i1 %66, i1 %69;
    i1 %71 = or i1 %68, i1 %70;
    i32 %72 = sdiv i32 %n, i32 32768;
    i1 %73 = ztrunc i32 %72 to i1;
    i1 %74 = xor i1 %73, i1 true;
    i1 %75 = and i1 %71, i1 %74;
    i1 %76 = xor i1 %75, i1 true;
    i1 %77 = or i1 %71, i1 %74;
    i1 %78 = and i1 %76, i1 %77;
    i32 %79 = zext i1 %78 to i32;
    i32 %80 = mul i32 %79, i32 2;
    i1 %81 = xor i1 %70, i1 true;
    i1 %82 = or i1 %66, i1 %69;
    i1 %83 = and i1 %81, i1 %82;
    i32 %84 = zext i1 %83 to i32;
    i32 %85 = add i32 %80, i32 %84;
    i32 %86 = mul i32 %85, i32 2;
    i1 %87 = xor i1 %65, i1 true;
    i1 %88 = or i1 %61, i1 %64;
    i1 %89 = and i1 %87, i1 %88;
    i32 %90 = zext i1 %89 to i32;
    i32 %91 = add i32 %86, i32 %90;
    i32 %92 = mul i32 %91, i32 2;
    i1 %93 = xor i1 %60, i1 true;
    i1 %94 = or i1 %56, i1 %59;
    i1 %95 = and i1 %93, i1 %94;
    i32 %96 = zext i1 %95 to i32;
    i32 %97 = add i32 %92, i32 %96;
    i32 %98 = mul i32 %97, i32 2;
    i1 %99 = xor i1 %55, i1 true;
    i1 %100 = or i1 %51, i1 %54;
    i1 %101 = and i1 %99, i1 %100;
    i32 %102 = zext i1 %101 to i32;
    i32 %103 = add i32 %98, i32 %102;
    i32 %104 = mul i32 %103, i32 2;
    i1 %105 = xor i1 %50, i1 true;
    i1 %106 = or i1 %46, i1 %49;
    i1 %107 = and i1 %105, i1 %106;
    i32 %108 = zext i1 %107 to i32;
    i32 %109 = add i32 %104, i32 %108;
    i32 %110 = mul i32 %109, i32 2;
    i1 %111 = xor i1 %45, i1 true;
    i1 %112 = or i1 %41, i1 %44;
    i1 %113 = and i1 %111, i1 %112;
    i32 %114 = zext i1 %113 to i32;
    i32 %115 = add i32 %110, i32 %114;
    i32 %116 = mul i32 %115, i32 2;
    i1 %117 = xor i1 %40, i1 true;
    i1 %118 = or i1 %36, i1 %39;
    i1 %119 = and i1 %117, i1 %118;
    i32 %120 = zext i1 %119 to i32;
    i32 %121 = add i32 %116, i32 %120;
    i32 %122 = mul i32 %121, i32 2;
    i1 %123 = xor i1 %35, i1 true;
    i1 %124 = or i1 %31, i1 %34;
    i1 %125 = and i1 %123, i1 %124;
    i32 %126 = zext i1 %125 to i32;
    i32 %127 = add i32 %122, i32 %126;
    i32 %128 = mul i32 %127, i32 2;
    i1 %129 = xor i1 %30, i1 true;
    i1 %130 = or i1 %26, i1 %29;
    i1 %131 = and i1 %129, i1 %130;
    i32 %132 = zext i1 %131 to i32;
    i32 %133 = add i32 %128, i32 %132;
    i32 %134 = mul i32 %133, i32 2;
    i1 %135 = xor i1 %25, i1 true;
    i1 %136 = or i1 %21, i1 %24;
    i1 %137 = and i1 %135, i1 %136;
    i32 %138 = zext i1 %137 to i32;
    i32 %139 = add i32 %134, i32 %138;
    i32 %140 = mul i32 %139, i32 2;
    i1 %141 = xor i1 %20, i1 true;
    i1 %142 = or i1 %16, i1 %19;
    i1 %143 = and i1 %141, i1 %142;
    i32 %144 = zext i1 %143 to i32;
    i32 %145 = add i32 %140, i32 %144;
    i32 %146 = mul i32 %145, i32 2;
    i1 %147 = xor i1 %15, i1 true;
    i1 %148 = or i1 %11, i1 %14;
    i1 %149 = and i1 %147, i1 %148;
    i32 %150 = zext i1 %149 to i32;
    i32 %151 = add i32 %146, i32 %150;
    i32 %152 = mul i32 %151, i32 2;
    i1 %153 = xor i1 %10, i1 true;
    i1 %154 = or i1 %6, i1 %9;
    i1 %155 = and i1 %153, i1 %154;
    i32 %156 = zext i1 %155 to i32;
    i32 %157 = add i32 %152, i32 %156;
    i32 %158 = mul i32 %157, i32 2;
    i1 %159 = xor i1 %5, i1 true;
    i1 %160 = or i1 %3, i1 %4;
    i1 %161 = and i1 %159, i1 %160;
    i32 %162 = zext i1 %161 to i32;
    i32 %163 = add i32 %158, i32 %162;
    i32 %164 = mul i32 %163, i32 2;
    i1 %165 = xor i1 %4, i1 true;
    i32 %166 = zext i1 %165 to i32;
    i32 %167 = add i32 %164, i32 %166;
    i32 %168 = call (i32) -> i32 @fib(i32 %167);
    i32 %169 = sdiv i32 %168, i32 2;
    i1 %170 = ztrunc i32 %169 to i1;
    i1 %171 = and i1 %2, i1 %9;
    i1 %172 = or i1 %8, i1 %171;
    i1 %173 = and i1 %14, i1 %172;
    i1 %174 = or i1 %13, i1 %173;
    i1 %175 = and i1 %19, i1 %174;
    i1 %176 = or i1 %18, i1 %175;
    i1 %177 = and i1 %24, i1 %176;
    i1 %178 = or i1 %23, i1 %177;
    i1 %179 = and i1 %29, i1 %178;
    i1 %180 = or i1 %28, i1 %179;
    i1 %181 = and i1 %34, i1 %180;
    i1 %182 = or i1 %33, i1 %181;
    i1 %183 = and i1 %39, i1 %182;
    i1 %184 = or i1 %38, i1 %183;
    i1 %185 = and i1 %44, i1 %184;
    i1 %186 = or i1 %43, i1 %185;
    i1 %187 = and i1 %49, i1 %186;
    i1 %188 = or i1 %48, i1 %187;
    i1 %189 = and i1 %54, i1 %188;
    i1 %190 = or i1 %53, i1 %189;
    i1 %191 = and i1 %59, i1 %190;
    i1 %192 = or i1 %58, i1 %191;
    i1 %193 = and i1 %64, i1 %192;
    i1 %194 = or i1 %63, i1 %193;
    i1 %195 = and i1 %69, i1 %194;
    i1 %196 = or i1 %68, i1 %195;
    i1 %197 = and i1 %74, i1 %196;
    i1 %198 = xor i1 %197, i1 true;
    i1 %199 = or i1 %68, i1 %74;
    i1 %200 = or i1 %195, i1 %199;
    i1 %201 = and i1 %198, i1 %200;
    i32 %202 = zext i1 %201 to i32;
    i32 %203 = mul i32 %202, i32 2;
    i1 %204 = xor i1 %195, i1 true;
    i1 %205 = or i1 %63, i1 %69;
    i1 %206 = or i1 %193, i1 %205;
    i1 %207 = and i1 %204, i1 %206;
    i32 %208 = zext i1 %207 to i32;
    i32 %209 = add i32 %203, i32 %208;
    i32 %210 = mul i32 %209, i32 2;
    i1 %211 = xor i1 %193, i1 true;
    i1 %212 = or i1 %58, i1 %64;
    i1 %213 = or i1 %191, i1 %212;
    i1 %214 = and i1 %211, i1 %213;
    i32 %215 = zext i1 %214 to i32;
    i32 %216 = add i32 %210, i32 %215;
    i32 %217 = mul i32 %216, i32 2;
    i1 %218 = xor i1 %191, i1 true;
    i1 %219 = or i1 %53, i1 %59;
    i1 %220 = or i1 %189, i1 %219;
    i1 %221 = and i1 %218, i1 %220;
    i32 %222 = zext i1 %221 to i32;
    i32 %223 = add i32 %217, i32 %222;
    i32 %224 = mul i32 %223, i32 2;
    i1 %225 = xor i1 %189, i1 true;
    i1 %226 = or i1 %48, i1 %54;
    i1 %227 = or i1 %187, i1 %226;
    i1 %228 = and i1 %225, i1 %227;
    i32 %229 = zext i1 %228 to i32;
    i32 %230 = add i32 %224, i32 %229;
    i32 %231 = mul i32 %230, i32 2;
    i1 %232 = xor i1 %187, i1 true;
    i1 %233 = or i1 %43, i1 %49;
    i1 %234 = or i1 %185, i1 %233;
    i1 %235 = and i1 %232, i1 %234;
    i32 %236 = zext i1 %235 to i32;
    i32 %237 = add i32 %231, i32 %236;
    i32 %238 = mul i32 %237, i32 2;
    i1 %239 = xor i1 %185, i1 true;
    i1 %240 = or i1 %38, i1 %44;
    i1 %241 = or i1 %183, i1 %240;
    i1 %242 = and i1 %239, i1 %241;
    i32 %243 = zext i1 %242 to i32;
    i32 %244 = add i32 %238, i32 %243;
    i32 %245 = mul i32 %244, i32 2;
    i1 %246 = xor i1 %183, i1 true;
    i1 %247 = or i1 %33, i1 %39;
    i1 %248 = or i1 %181, i1 %247;
    i1 %249 = and i1 %246, i1 %248;
    i32 %250 = zext i1 %249 to i32;
    i32 %251 = add i32 %245, i32 %250;
    i32 %252 = mul i32 %251, i32 2;
    i1 %253 = xor i1 %181, i1 true;
    i1 %254 = or i1 %28, i1 %34;
    i1 %255 = or i1 %179, i1 %254;
    i1 %256 = and i1 %253, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = add i32 %252, i32 %257;
    i32 %259 = mul i32 %258, i32 2;
    i1 %260 = xor i1 %179, i1 true;
    i1 %261 = or i1 %23, i1 %29;
    i1 %262 = or i1 %177, i1 %261;
    i1 %263 = and i1 %260, i1 %262;
    i32 %264 = zext i1 %263 to i32;
    i32 %265 = add i32 %259, i32 %264;
    i32 %266 = mul i32 %265, i32 2;
    i1 %267 = xor i1 %177, i1 true;
    i1 %268 = or i1 %18, i1 %24;
    i1 %269 = or i1 %175, i1 %268;
    i1 %270 = and i1 %267, i1 %269;
    i32 %271 = zext i1 %270 to i32;
    i32 %272 = add i32 %266, i32 %271;
    i32 %273 = mul i32 %272, i32 2;
    i1 %274 = xor i1 %175, i1 true;
    i1 %275 = or i1 %13, i1 %19;
    i1 %276 = or i1 %173, i1 %275;
    i1 %277 = and i1 %274, i1 %276;
    i32 %278 = zext i1 %277 to i32;
    i32 %279 = add i32 %273, i32 %278;
    i32 %280 = mul i32 %279, i32 2;
    i1 %281 = xor i1 %173, i1 true;
    i1 %282 = or i1 %8, i1 %14;
    i1 %283 = or i1 %171, i1 %282;
    i1 %284 = and i1 %281, i1 %283;
    i32 %285 = zext i1 %284 to i32;
    i32 %286 = add i32 %280, i32 %285;
    i32 %287 = mul i32 %286, i32 2;
    i1 %288 = xor i1 %171, i1 true;
    i1 %289 = or i1 %2, i1 %9;
    i1 %290 = and i1 %288, i1 %289;
    i32 %291 = zext i1 %290 to i32;
    i32 %292 = add i32 %287, i32 %291;
    i32 %293 = mul i32 %292, i32 2;
    i32 %294 = zext i1 %3 to i32;
    i32 %295 = add i32 %293, i32 %294;
    i32 %296 = mul i32 %295, i32 2;
    i32 %297 = and i32 %n, i32 1;
    i32 %298 = add i32 %296, i32 %297;
    i32 %299 = call (i32) -> i32 @fib(i32 %298);
    i32 %300 = sdiv i32 %299, i32 2;
    i1 %301 = ztrunc i32 %300 to i1;
    i1 %302 = and i1 %170, i1 %301;
    i1 %303 = xor i1 %302, i1 true;
    i1 %304 = or i1 %170, i1 %301;
    i1 %305 = and i1 %303, i1 %304;
    i1 %306 = ztrunc i32 %168 to i1;
    i1 %307 = and i1 %305, i1 %306;
    i1 %308 = ztrunc i32 %299 to i1;
    i1 %309 = and i1 %307, i1 %308;
    i1 %310 = or i1 %302, i1 %309;
    i32 %311 = sdiv i32 %168, i32 4;
    i1 %312 = ztrunc i32 %311 to i1;
    i32 %313 = sdiv i32 %299, i32 4;
    i1 %314 = ztrunc i32 %313 to i1;
    i1 %315 = or i1 %312, i1 %314;
    i1 %316 = and i1 %310, i1 %315;
    i1 %317 = and i1 %312, i1 %314;
    i1 %318 = xor i1 %317, i1 true;
    i1 %319 = and i1 %316, i1 %318;
    i1 %320 = or i1 %317, i1 %319;
    i32 %321 = sdiv i32 %168, i32 8;
    i1 %322 = ztrunc i32 %321 to i1;
    i32 %323 = sdiv i32 %299, i32 8;
    i1 %324 = ztrunc i32 %323 to i1;
    i1 %325 = or i1 %322, i1 %324;
    i1 %326 = and i1 %320, i1 %325;
    i1 %327 = and i1 %322, i1 %324;
    i1 %328 = xor i1 %327, i1 true;
    i1 %329 = and i1 %326, i1 %328;
    i1 %330 = or i1 %327, i1 %329;
    i32 %331 = sdiv i32 %168, i32 16;
    i1 %332 = ztrunc i32 %331 to i1;
    i32 %333 = sdiv i32 %299, i32 16;
    i1 %334 = ztrunc i32 %333 to i1;
    i1 %335 = or i1 %332, i1 %334;
    i1 %336 = and i1 %330, i1 %335;
    i1 %337 = and i1 %332, i1 %334;
    i1 %338 = xor i1 %337, i1 true;
    i1 %339 = and i1 %336, i1 %338;
    i1 %340 = or i1 %337, i1 %339;
    i32 %341 = sdiv i32 %168, i32 32;
    i1 %342 = ztrunc i32 %341 to i1;
    i32 %343 = sdiv i32 %299, i32 32;
    i1 %344 = ztrunc i32 %343 to i1;
    i1 %345 = or i1 %342, i1 %344;
    i1 %346 = and i1 %340, i1 %345;
    i1 %347 = and i1 %342, i1 %344;
    i1 %348 = xor i1 %347, i1 true;
    i1 %349 = and i1 %346, i1 %348;
    i1 %350 = or i1 %347, i1 %349;
    i32 %351 = sdiv i32 %168, i32 64;
    i1 %352 = ztrunc i32 %351 to i1;
    i32 %353 = sdiv i32 %299, i32 64;
    i1 %354 = ztrunc i32 %353 to i1;
    i1 %355 = or i1 %352, i1 %354;
    i1 %356 = and i1 %350, i1 %355;
    i1 %357 = and i1 %352, i1 %354;
    i1 %358 = xor i1 %357, i1 true;
    i1 %359 = and i1 %356, i1 %358;
    i1 %360 = or i1 %357, i1 %359;
    i32 %361 = sdiv i32 %168, i32 128;
    i1 %362 = ztrunc i32 %361 to i1;
    i32 %363 = sdiv i32 %299, i32 128;
    i1 %364 = ztrunc i32 %363 to i1;
    i1 %365 = or i1 %362, i1 %364;
    i1 %366 = and i1 %360, i1 %365;
    i1 %367 = and i1 %362, i1 %364;
    i1 %368 = xor i1 %367, i1 true;
    i1 %369 = and i1 %366, i1 %368;
    i1 %370 = or i1 %367, i1 %369;
    i32 %371 = sdiv i32 %168, i32 256;
    i1 %372 = ztrunc i32 %371 to i1;
    i32 %373 = sdiv i32 %299, i32 256;
    i1 %374 = ztrunc i32 %373 to i1;
    i1 %375 = or i1 %372, i1 %374;
    i1 %376 = and i1 %370, i1 %375;
    i1 %377 = and i1 %372, i1 %374;
    i1 %378 = xor i1 %377, i1 true;
    i1 %379 = and i1 %376, i1 %378;
    i1 %380 = or i1 %377, i1 %379;
    i32 %381 = sdiv i32 %168, i32 512;
    i1 %382 = ztrunc i32 %381 to i1;
    i32 %383 = sdiv i32 %299, i32 512;
    i1 %384 = ztrunc i32 %383 to i1;
    i1 %385 = or i1 %382, i1 %384;
    i1 %386 = and i1 %380, i1 %385;
    i1 %387 = and i1 %382, i1 %384;
    i1 %388 = xor i1 %387, i1 true;
    i1 %389 = and i1 %386, i1 %388;
    i1 %390 = or i1 %387, i1 %389;
    i32 %391 = sdiv i32 %168, i32 1024;
    i1 %392 = ztrunc i32 %391 to i1;
    i32 %393 = sdiv i32 %299, i32 1024;
    i1 %394 = ztrunc i32 %393 to i1;
    i1 %395 = or i1 %392, i1 %394;
    i1 %396 = and i1 %390, i1 %395;
    i1 %397 = and i1 %392, i1 %394;
    i1 %398 = xor i1 %397, i1 true;
    i1 %399 = and i1 %396, i1 %398;
    i1 %400 = or i1 %397, i1 %399;
    i32 %401 = sdiv i32 %168, i32 2048;
    i1 %402 = ztrunc i32 %401 to i1;
    i32 %403 = sdiv i32 %299, i32 2048;
    i1 %404 = ztrunc i32 %403 to i1;
    i1 %405 = or i1 %402, i1 %404;
    i1 %406 = and i1 %400, i1 %405;
    i1 %407 = and i1 %402, i1 %404;
    i1 %408 = xor i1 %407, i1 true;
    i1 %409 = and i1 %406, i1 %408;
    i1 %410 = or i1 %407, i1 %409;
    i32 %411 = sdiv i32 %168, i32 4096;
    i1 %412 = ztrunc i32 %411 to i1;
    i32 %413 = sdiv i32 %299, i32 4096;
    i1 %414 = ztrunc i32 %413 to i1;
    i1 %415 = or i1 %412, i1 %414;
    i1 %416 = and i1 %410, i1 %415;
    i1 %417 = and i1 %412, i1 %414;
    i1 %418 = xor i1 %417, i1 true;
    i1 %419 = and i1 %416, i1 %418;
    i1 %420 = or i1 %417, i1 %419;
    i32 %421 = sdiv i32 %168, i32 8192;
    i1 %422 = ztrunc i32 %421 to i1;
    i32 %423 = sdiv i32 %299, i32 8192;
    i1 %424 = ztrunc i32 %423 to i1;
    i1 %425 = or i1 %422, i1 %424;
    i1 %426 = and i1 %420, i1 %425;
    i1 %427 = and i1 %422, i1 %424;
    i1 %428 = xor i1 %427, i1 true;
    i1 %429 = and i1 %426, i1 %428;
    i1 %430 = or i1 %427, i1 %429;
    i32 %431 = sdiv i32 %168, i32 16384;
    i1 %432 = ztrunc i32 %431 to i1;
    i32 %433 = sdiv i32 %299, i32 16384;
    i1 %434 = ztrunc i32 %433 to i1;
    i1 %435 = or i1 %432, i1 %434;
    i1 %436 = and i1 %430, i1 %435;
    i1 %437 = and i1 %432, i1 %434;
    i1 %438 = xor i1 %437, i1 true;
    i1 %439 = and i1 %436, i1 %438;
    i1 %440 = or i1 %437, i1 %439;
    i32 %441 = sdiv i32 %168, i32 32768;
    i1 %442 = ztrunc i32 %441 to i1;
    i32 %443 = sdiv i32 %299, i32 32768;
    i1 %444 = ztrunc i32 %443 to i1;
    i1 %445 = and i1 %442, i1 %444;
    i1 %446 = xor i1 %445, i1 true;
    i1 %447 = and i1 %440, i1 %446;
    i1 %448 = or i1 %442, i1 %444;
    i1 %449 = and i1 %447, i1 %448;
    i1 %450 = xor i1 %449, i1 true;
    i1 %451 = and i1 %446, i1 %448;
    i1 %452 = or i1 %437, i1 %451;
    i1 %453 = or i1 %439, i1 %452;
    i1 %454 = and i1 %450, i1 %453;
    i32 %455 = zext i1 %454 to i32;
    i32 %456 = mul i32 %455, i32 2;
    i1 %457 = xor i1 %439, i1 true;
    i1 %458 = and i1 %435, i1 %438;
    i1 %459 = or i1 %427, i1 %458;
    i1 %460 = or i1 %429, i1 %459;
    i1 %461 = and i1 %457, i1 %460;
    i32 %462 = zext i1 %461 to i32;
    i32 %463 = add i32 %456, i32 %462;
    i32 %464 = mul i32 %463, i32 2;
    i1 %465 = xor i1 %429, i1 true;
    i1 %466 = and i1 %425, i1 %428;
    i1 %467 = or i1 %417, i1 %466;
    i1 %468 = or i1 %419, i1 %467;
    i1 %469 = and i1 %465, i1 %468;
    i32 %470 = zext i1 %469 to i32;
    i32 %471 = add i32 %464, i32 %470;
    i32 %472 = mul i32 %471, i32 2;
    i1 %473 = xor i1 %419, i1 true;
    i1 %474 = and i1 %415, i1 %418;
    i1 %475 = or i1 %407, i1 %474;
    i1 %476 = or i1 %409, i1 %475;
    i1 %477 = and i1 %473, i1 %476;
    i32 %478 = zext i1 %477 to i32;
    i32 %479 = add i32 %472, i32 %478;
    i32 %480 = mul i32 %479, i32 2;
    i1 %481 = xor i1 %409, i1 true;
    i1 %482 = and i1 %405, i1 %408;
    i1 %483 = or i1 %397, i1 %482;
    i1 %484 = or i1 %399, i1 %483;
    i1 %485 = and i1 %481, i1 %484;
    i32 %486 = zext i1 %485 to i32;
    i32 %487 = add i32 %480, i32 %486;
    i32 %488 = mul i32 %487, i32 2;
    i1 %489 = xor i1 %399, i1 true;
    i1 %490 = and i1 %395, i1 %398;
    i1 %491 = or i1 %387, i1 %490;
    i1 %492 = or i1 %389, i1 %491;
    i1 %493 = and i1 %489, i1 %492;
    i32 %494 = zext i1 %493 to i32;
    i32 %495 = add i32 %488, i32 %494;
    i32 %496 = mul i32 %495, i32 2;
    i1 %497 = xor i1 %389, i1 true;
    i1 %498 = and i1 %385, i1 %388;
    i1 %499 = or i1 %377, i1 %498;
    i1 %500 = or i1 %379, i1 %499;
    i1 %501 = and i1 %497, i1 %500;
    i32 %502 = zext i1 %501 to i32;
    i32 %503 = add i32 %496, i32 %502;
    i32 %504 = mul i32 %503, i32 2;
    i1 %505 = xor i1 %379, i1 true;
    i1 %506 = and i1 %375, i1 %378;
    i1 %507 = or i1 %367, i1 %506;
    i1 %508 = or i1 %369, i1 %507;
    i1 %509 = and i1 %505, i1 %508;
    i32 %510 = zext i1 %509 to i32;
    i32 %511 = add i32 %504, i32 %510;
    i32 %512 = mul i32 %511, i32 2;
    i1 %513 = xor i1 %369, i1 true;
    i1 %514 = and i1 %365, i1 %368;
    i1 %515 = or i1 %357, i1 %514;
    i1 %516 = or i1 %359, i1 %515;
    i1 %517 = and i1 %513, i1 %516;
    i32 %518 = zext i1 %517 to i32;
    i32 %519 = add i32 %512, i32 %518;
    i32 %520 = mul i32 %519, i32 2;
    i1 %521 = xor i1 %359, i1 true;
    i1 %522 = and i1 %355, i1 %358;
    i1 %523 = or i1 %347, i1 %522;
    i1 %524 = or i1 %349, i1 %523;
    i1 %525 = and i1 %521, i1 %524;
    i32 %526 = zext i1 %525 to i32;
    i32 %527 = add i32 %520, i32 %526;
    i32 %528 = mul i32 %527, i32 2;
    i1 %529 = xor i1 %349, i1 true;
    i1 %530 = and i1 %345, i1 %348;
    i1 %531 = or i1 %337, i1 %530;
    i1 %532 = or i1 %339, i1 %531;
    i1 %533 = and i1 %529, i1 %532;
    i32 %534 = zext i1 %533 to i32;
    i32 %535 = add i32 %528, i32 %534;
    i32 %536 = mul i32 %535, i32 2;
    i1 %537 = xor i1 %339, i1 true;
    i1 %538 = and i1 %335, i1 %338;
    i1 %539 = or i1 %327, i1 %538;
    i1 %540 = or i1 %329, i1 %539;
    i1 %541 = and i1 %537, i1 %540;
    i32 %542 = zext i1 %541 to i32;
    i32 %543 = add i32 %536, i32 %542;
    i32 %544 = mul i32 %543, i32 2;
    i1 %545 = xor i1 %329, i1 true;
    i1 %546 = and i1 %325, i1 %328;
    i1 %547 = or i1 %317, i1 %546;
    i1 %548 = or i1 %319, i1 %547;
    i1 %549 = and i1 %545, i1 %548;
    i32 %550 = zext i1 %549 to i32;
    i32 %551 = add i32 %544, i32 %550;
    i32 %552 = mul i32 %551, i32 2;
    i1 %553 = xor i1 %319, i1 true;
    i1 %554 = and i1 %315, i1 %318;
    i1 %555 = or i1 %302, i1 %554;
    i1 %556 = or i1 %309, i1 %555;
    i1 %557 = and i1 %553, i1 %556;
    i32 %558 = zext i1 %557 to i32;
    i32 %559 = add i32 %552, i32 %558;
    i32 %560 = mul i32 %559, i32 2;
    i1 %561 = xor i1 %309, i1 true;
    i1 %562 = and i1 %306, i1 %308;
    i1 %563 = or i1 %305, i1 %562;
    i1 %564 = and i1 %561, i1 %563;
    i32 %565 = zext i1 %564 to i32;
    i32 %566 = add i32 %560, i32 %565;
    i32 %567 = mul i32 %566, i32 2;
    i1 %568 = xor i1 %562, i1 true;
    i1 %569 = or i1 %306, i1 %308;
    i1 %570 = and i1 %568, i1 %569;
    i32 %571 = zext i1 %570 to i32;
    i32 %572 = add i32 %567, i32 %571;
    ubr ^b1;
  ^b1:
    i32 %573 = phi [^entry, i32 1] [^b, i32 %572];
    ret i32 %573;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = icmp slt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
