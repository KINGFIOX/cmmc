internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp lt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i32 %2 = srem i32 %1, i32 2;
    i1 %3 = scmp lt i32 %2, i32 0;
    i32 %4 = neg i32 %2;
    i32 %5 = select i1 %3 ? i32 %4 : i32 %2;
    i32 %6 = or i32 %5, i32 1;
    i1 %7 = scmp neq i32 %6, i32 0;
    i32 %8 = srem i32 %n, i32 2;
    i1 %9 = scmp lt i32 %8, i32 0;
    i32 %10 = neg i32 %8;
    i32 %11 = select i1 %9 ? i32 %10 : i32 %8;
    i1 %12 = scmp neq i32 %11, i32 0;
    i1 %13 = and i1 %12, i1 %7;
    i1 %14 = scmp eq i32 %5, i32 0;
    i1 %15 = and i1 %13, i1 %14;
    i1 %16 = scmp neq i32 %5, i32 0;
    i1 %17 = or i1 %15, i1 %16;
    i32 %18 = sdiv i32 %n, i32 4;
    i32 %19 = srem i32 %18, i32 2;
    i1 %20 = scmp lt i32 %19, i32 0;
    i32 %21 = neg i32 %19;
    i32 %22 = select i1 %20 ? i32 %21 : i32 %19;
    i32 %23 = or i32 %22, i32 1;
    i1 %24 = scmp neq i32 %23, i32 0;
    i1 %25 = and i1 %17, i1 %24;
    i1 %26 = scmp eq i32 %22, i32 0;
    i1 %27 = and i1 %25, i1 %26;
    i1 %28 = scmp neq i32 %22, i32 0;
    i1 %29 = or i1 %27, i1 %28;
    i32 %30 = sdiv i32 %n, i32 8;
    i32 %31 = srem i32 %30, i32 2;
    i1 %32 = scmp lt i32 %31, i32 0;
    i32 %33 = neg i32 %31;
    i32 %34 = select i1 %32 ? i32 %33 : i32 %31;
    i32 %35 = or i32 %34, i32 1;
    i1 %36 = scmp neq i32 %35, i32 0;
    i1 %37 = and i1 %29, i1 %36;
    i1 %38 = scmp eq i32 %34, i32 0;
    i1 %39 = and i1 %37, i1 %38;
    i1 %40 = scmp neq i32 %34, i32 0;
    i1 %41 = or i1 %39, i1 %40;
    i32 %42 = sdiv i32 %n, i32 16;
    i32 %43 = srem i32 %42, i32 2;
    i1 %44 = scmp lt i32 %43, i32 0;
    i32 %45 = neg i32 %43;
    i32 %46 = select i1 %44 ? i32 %45 : i32 %43;
    i32 %47 = or i32 %46, i32 1;
    i1 %48 = scmp neq i32 %47, i32 0;
    i1 %49 = and i1 %41, i1 %48;
    i1 %50 = scmp eq i32 %46, i32 0;
    i1 %51 = and i1 %49, i1 %50;
    i1 %52 = scmp neq i32 %46, i32 0;
    i1 %53 = or i1 %51, i1 %52;
    i32 %54 = sdiv i32 %n, i32 32;
    i32 %55 = srem i32 %54, i32 2;
    i1 %56 = scmp lt i32 %55, i32 0;
    i32 %57 = neg i32 %55;
    i32 %58 = select i1 %56 ? i32 %57 : i32 %55;
    i32 %59 = or i32 %58, i32 1;
    i1 %60 = scmp neq i32 %59, i32 0;
    i1 %61 = and i1 %53, i1 %60;
    i1 %62 = scmp eq i32 %58, i32 0;
    i1 %63 = and i1 %61, i1 %62;
    i1 %64 = scmp neq i32 %58, i32 0;
    i1 %65 = or i1 %63, i1 %64;
    i32 %66 = sdiv i32 %n, i32 64;
    i32 %67 = srem i32 %66, i32 2;
    i1 %68 = scmp lt i32 %67, i32 0;
    i32 %69 = neg i32 %67;
    i32 %70 = select i1 %68 ? i32 %69 : i32 %67;
    i32 %71 = or i32 %70, i32 1;
    i1 %72 = scmp neq i32 %71, i32 0;
    i1 %73 = and i1 %65, i1 %72;
    i1 %74 = scmp eq i32 %70, i32 0;
    i1 %75 = and i1 %73, i1 %74;
    i1 %76 = scmp neq i32 %70, i32 0;
    i1 %77 = or i1 %75, i1 %76;
    i32 %78 = sdiv i32 %n, i32 128;
    i32 %79 = srem i32 %78, i32 2;
    i1 %80 = scmp lt i32 %79, i32 0;
    i32 %81 = neg i32 %79;
    i32 %82 = select i1 %80 ? i32 %81 : i32 %79;
    i32 %83 = or i32 %82, i32 1;
    i1 %84 = scmp neq i32 %83, i32 0;
    i1 %85 = and i1 %77, i1 %84;
    i1 %86 = scmp eq i32 %82, i32 0;
    i1 %87 = and i1 %85, i1 %86;
    i1 %88 = scmp neq i32 %82, i32 0;
    i1 %89 = or i1 %87, i1 %88;
    i32 %90 = sdiv i32 %n, i32 256;
    i32 %91 = srem i32 %90, i32 2;
    i1 %92 = scmp lt i32 %91, i32 0;
    i32 %93 = neg i32 %91;
    i32 %94 = select i1 %92 ? i32 %93 : i32 %91;
    i32 %95 = or i32 %94, i32 1;
    i1 %96 = scmp neq i32 %95, i32 0;
    i1 %97 = and i1 %89, i1 %96;
    i1 %98 = scmp eq i32 %94, i32 0;
    i1 %99 = and i1 %97, i1 %98;
    i1 %100 = scmp neq i32 %94, i32 0;
    i1 %101 = or i1 %99, i1 %100;
    i32 %102 = sdiv i32 %n, i32 512;
    i32 %103 = srem i32 %102, i32 2;
    i1 %104 = scmp lt i32 %103, i32 0;
    i32 %105 = neg i32 %103;
    i32 %106 = select i1 %104 ? i32 %105 : i32 %103;
    i32 %107 = or i32 %106, i32 1;
    i1 %108 = scmp neq i32 %107, i32 0;
    i1 %109 = and i1 %101, i1 %108;
    i1 %110 = scmp eq i32 %106, i32 0;
    i1 %111 = and i1 %109, i1 %110;
    i1 %112 = scmp neq i32 %106, i32 0;
    i1 %113 = or i1 %111, i1 %112;
    i32 %114 = sdiv i32 %n, i32 1024;
    i32 %115 = srem i32 %114, i32 2;
    i1 %116 = scmp lt i32 %115, i32 0;
    i32 %117 = neg i32 %115;
    i32 %118 = select i1 %116 ? i32 %117 : i32 %115;
    i32 %119 = or i32 %118, i32 1;
    i1 %120 = scmp neq i32 %119, i32 0;
    i1 %121 = and i1 %113, i1 %120;
    i1 %122 = scmp eq i32 %118, i32 0;
    i1 %123 = and i1 %121, i1 %122;
    i1 %124 = scmp neq i32 %118, i32 0;
    i1 %125 = or i1 %123, i1 %124;
    i32 %126 = sdiv i32 %n, i32 2048;
    i32 %127 = srem i32 %126, i32 2;
    i1 %128 = scmp lt i32 %127, i32 0;
    i32 %129 = neg i32 %127;
    i32 %130 = select i1 %128 ? i32 %129 : i32 %127;
    i32 %131 = or i32 %130, i32 1;
    i1 %132 = scmp neq i32 %131, i32 0;
    i1 %133 = and i1 %125, i1 %132;
    i1 %134 = scmp eq i32 %130, i32 0;
    i1 %135 = and i1 %133, i1 %134;
    i1 %136 = scmp neq i32 %130, i32 0;
    i1 %137 = or i1 %135, i1 %136;
    i32 %138 = sdiv i32 %n, i32 4096;
    i32 %139 = srem i32 %138, i32 2;
    i1 %140 = scmp lt i32 %139, i32 0;
    i32 %141 = neg i32 %139;
    i32 %142 = select i1 %140 ? i32 %141 : i32 %139;
    i32 %143 = or i32 %142, i32 1;
    i1 %144 = scmp neq i32 %143, i32 0;
    i1 %145 = and i1 %137, i1 %144;
    i1 %146 = scmp eq i32 %142, i32 0;
    i1 %147 = and i1 %145, i1 %146;
    i1 %148 = scmp neq i32 %142, i32 0;
    i1 %149 = or i1 %147, i1 %148;
    i32 %150 = sdiv i32 %n, i32 8192;
    i32 %151 = srem i32 %150, i32 2;
    i1 %152 = scmp lt i32 %151, i32 0;
    i32 %153 = neg i32 %151;
    i32 %154 = select i1 %152 ? i32 %153 : i32 %151;
    i32 %155 = or i32 %154, i32 1;
    i1 %156 = scmp neq i32 %155, i32 0;
    i1 %157 = and i1 %149, i1 %156;
    i1 %158 = scmp eq i32 %154, i32 0;
    i1 %159 = and i1 %157, i1 %158;
    i1 %160 = scmp neq i32 %154, i32 0;
    i1 %161 = or i1 %159, i1 %160;
    i32 %162 = sdiv i32 %n, i32 16384;
    i32 %163 = srem i32 %162, i32 2;
    i1 %164 = scmp lt i32 %163, i32 0;
    i32 %165 = neg i32 %163;
    i32 %166 = select i1 %164 ? i32 %165 : i32 %163;
    i32 %167 = or i32 %166, i32 1;
    i1 %168 = scmp neq i32 %167, i32 0;
    i1 %169 = and i1 %161, i1 %168;
    i1 %170 = scmp eq i32 %166, i32 0;
    i1 %171 = and i1 %169, i1 %170;
    i1 %172 = scmp neq i32 %166, i32 0;
    i1 %173 = or i1 %171, i1 %172;
    i32 %174 = sdiv i32 %n, i32 32768;
    i32 %175 = srem i32 %174, i32 2;
    i1 %176 = scmp lt i32 %175, i32 0;
    i32 %177 = neg i32 %175;
    i32 %178 = select i1 %176 ? i32 %177 : i32 %175;
    i32 %179 = or i32 %178, i32 1;
    i1 %180 = scmp neq i32 %179, i32 0;
    i1 %181 = and i1 %173, i1 %180;
    i1 %182 = scmp eq i32 %178, i32 0;
    i1 %183 = and i1 %181, i1 %182;
    i1 %184 = xor i1 %183, i1 true;
    i1 %185 = and i1 %180, i1 %182;
    i1 %186 = or i1 %171, i1 %185;
    i1 %187 = or i1 %186, i1 %172;
    i1 %188 = and i1 %187, i1 %184;
    i32 %189 = zext i1 %188 to i32;
    i32 %190 = mul i32 %189, i32 2;
    i1 %191 = xor i1 %171, i1 true;
    i1 %192 = and i1 %168, i1 %170;
    i1 %193 = or i1 %159, i1 %192;
    i1 %194 = or i1 %193, i1 %160;
    i1 %195 = and i1 %194, i1 %191;
    i32 %196 = zext i1 %195 to i32;
    i32 %197 = add i32 %190, i32 %196;
    i32 %198 = mul i32 %197, i32 2;
    i1 %199 = xor i1 %159, i1 true;
    i1 %200 = and i1 %156, i1 %158;
    i1 %201 = or i1 %147, i1 %200;
    i1 %202 = or i1 %201, i1 %148;
    i1 %203 = and i1 %202, i1 %199;
    i32 %204 = zext i1 %203 to i32;
    i32 %205 = add i32 %198, i32 %204;
    i32 %206 = mul i32 %205, i32 2;
    i1 %207 = xor i1 %147, i1 true;
    i1 %208 = and i1 %144, i1 %146;
    i1 %209 = or i1 %135, i1 %208;
    i1 %210 = or i1 %209, i1 %136;
    i1 %211 = and i1 %210, i1 %207;
    i32 %212 = zext i1 %211 to i32;
    i32 %213 = add i32 %206, i32 %212;
    i32 %214 = mul i32 %213, i32 2;
    i1 %215 = xor i1 %135, i1 true;
    i1 %216 = and i1 %132, i1 %134;
    i1 %217 = or i1 %123, i1 %216;
    i1 %218 = or i1 %217, i1 %124;
    i1 %219 = and i1 %218, i1 %215;
    i32 %220 = zext i1 %219 to i32;
    i32 %221 = add i32 %214, i32 %220;
    i32 %222 = mul i32 %221, i32 2;
    i1 %223 = xor i1 %123, i1 true;
    i1 %224 = and i1 %120, i1 %122;
    i1 %225 = or i1 %111, i1 %224;
    i1 %226 = or i1 %225, i1 %112;
    i1 %227 = and i1 %226, i1 %223;
    i32 %228 = zext i1 %227 to i32;
    i32 %229 = add i32 %222, i32 %228;
    i32 %230 = mul i32 %229, i32 2;
    i1 %231 = xor i1 %111, i1 true;
    i1 %232 = and i1 %108, i1 %110;
    i1 %233 = or i1 %99, i1 %232;
    i1 %234 = or i1 %233, i1 %100;
    i1 %235 = and i1 %234, i1 %231;
    i32 %236 = zext i1 %235 to i32;
    i32 %237 = add i32 %230, i32 %236;
    i32 %238 = mul i32 %237, i32 2;
    i1 %239 = xor i1 %99, i1 true;
    i1 %240 = and i1 %96, i1 %98;
    i1 %241 = or i1 %87, i1 %240;
    i1 %242 = or i1 %241, i1 %88;
    i1 %243 = and i1 %242, i1 %239;
    i32 %244 = zext i1 %243 to i32;
    i32 %245 = add i32 %238, i32 %244;
    i32 %246 = mul i32 %245, i32 2;
    i1 %247 = xor i1 %87, i1 true;
    i1 %248 = and i1 %84, i1 %86;
    i1 %249 = or i1 %75, i1 %248;
    i1 %250 = or i1 %249, i1 %76;
    i1 %251 = and i1 %250, i1 %247;
    i32 %252 = zext i1 %251 to i32;
    i32 %253 = add i32 %246, i32 %252;
    i32 %254 = mul i32 %253, i32 2;
    i1 %255 = xor i1 %75, i1 true;
    i1 %256 = and i1 %72, i1 %74;
    i1 %257 = or i1 %63, i1 %256;
    i1 %258 = or i1 %257, i1 %64;
    i1 %259 = and i1 %258, i1 %255;
    i32 %260 = zext i1 %259 to i32;
    i32 %261 = add i32 %254, i32 %260;
    i32 %262 = mul i32 %261, i32 2;
    i1 %263 = xor i1 %63, i1 true;
    i1 %264 = and i1 %60, i1 %62;
    i1 %265 = or i1 %51, i1 %264;
    i1 %266 = or i1 %265, i1 %52;
    i1 %267 = and i1 %266, i1 %263;
    i32 %268 = zext i1 %267 to i32;
    i32 %269 = add i32 %262, i32 %268;
    i32 %270 = mul i32 %269, i32 2;
    i1 %271 = xor i1 %51, i1 true;
    i1 %272 = and i1 %48, i1 %50;
    i1 %273 = or i1 %39, i1 %272;
    i1 %274 = or i1 %273, i1 %40;
    i1 %275 = and i1 %274, i1 %271;
    i32 %276 = zext i1 %275 to i32;
    i32 %277 = add i32 %270, i32 %276;
    i32 %278 = mul i32 %277, i32 2;
    i1 %279 = xor i1 %39, i1 true;
    i1 %280 = and i1 %36, i1 %38;
    i1 %281 = or i1 %27, i1 %280;
    i1 %282 = or i1 %281, i1 %28;
    i1 %283 = and i1 %282, i1 %279;
    i32 %284 = zext i1 %283 to i32;
    i32 %285 = add i32 %278, i32 %284;
    i32 %286 = mul i32 %285, i32 2;
    i1 %287 = xor i1 %27, i1 true;
    i1 %288 = and i1 %24, i1 %26;
    i1 %289 = or i1 %15, i1 %288;
    i1 %290 = or i1 %289, i1 %16;
    i1 %291 = and i1 %290, i1 %287;
    i32 %292 = zext i1 %291 to i32;
    i32 %293 = add i32 %286, i32 %292;
    i32 %294 = mul i32 %293, i32 2;
    i1 %295 = xor i1 %15, i1 true;
    i1 %296 = and i1 %7, i1 %14;
    i1 %297 = or i1 %296, i1 %12;
    i1 %298 = and i1 %297, i1 %295;
    i32 %299 = zext i1 %298 to i32;
    i32 %300 = add i32 %294, i32 %299;
    i32 %301 = mul i32 %300, i32 2;
    i32 %302 = or i32 %11, i32 1;
    i1 %303 = scmp neq i32 %302, i32 0;
    i1 %304 = scmp eq i32 %11, i32 0;
    i1 %305 = and i1 %303, i1 %304;
    i32 %306 = zext i1 %305 to i32;
    i32 %307 = add i32 %301, i32 %306;
    i32 %308 = call (i32) -> i32 @fib(i32 %307);
    i32 %309 = sdiv i32 %308, i32 2;
    i32 %310 = srem i32 %309, i32 2;
    i1 %311 = scmp lt i32 %310, i32 0;
    i32 %312 = neg i32 %310;
    i32 %313 = select i1 %311 ? i32 %312 : i32 %310;
    i1 %314 = scmp neq i32 %313, i32 0;
    i1 %315 = and i1 %16, i1 %24;
    i1 %316 = and i1 %315, i1 %26;
    i1 %317 = or i1 %316, i1 %28;
    i1 %318 = and i1 %317, i1 %36;
    i1 %319 = and i1 %318, i1 %38;
    i1 %320 = or i1 %319, i1 %40;
    i1 %321 = and i1 %320, i1 %48;
    i1 %322 = and i1 %321, i1 %50;
    i1 %323 = or i1 %322, i1 %52;
    i1 %324 = and i1 %323, i1 %60;
    i1 %325 = and i1 %324, i1 %62;
    i1 %326 = or i1 %325, i1 %64;
    i1 %327 = and i1 %326, i1 %72;
    i1 %328 = and i1 %327, i1 %74;
    i1 %329 = or i1 %328, i1 %76;
    i1 %330 = and i1 %329, i1 %84;
    i1 %331 = and i1 %330, i1 %86;
    i1 %332 = or i1 %331, i1 %88;
    i1 %333 = and i1 %332, i1 %96;
    i1 %334 = and i1 %333, i1 %98;
    i1 %335 = or i1 %334, i1 %100;
    i1 %336 = and i1 %335, i1 %108;
    i1 %337 = and i1 %336, i1 %110;
    i1 %338 = or i1 %337, i1 %112;
    i1 %339 = and i1 %338, i1 %120;
    i1 %340 = and i1 %339, i1 %122;
    i1 %341 = or i1 %340, i1 %124;
    i1 %342 = and i1 %341, i1 %132;
    i1 %343 = and i1 %342, i1 %134;
    i1 %344 = or i1 %343, i1 %136;
    i1 %345 = and i1 %344, i1 %144;
    i1 %346 = and i1 %345, i1 %146;
    i1 %347 = or i1 %346, i1 %148;
    i1 %348 = and i1 %347, i1 %156;
    i1 %349 = and i1 %348, i1 %158;
    i1 %350 = or i1 %349, i1 %160;
    i1 %351 = and i1 %350, i1 %168;
    i1 %352 = and i1 %351, i1 %170;
    i1 %353 = or i1 %352, i1 %172;
    i1 %354 = and i1 %353, i1 %180;
    i1 %355 = and i1 %354, i1 %182;
    i1 %356 = xor i1 %355, i1 true;
    i1 %357 = or i1 %185, i1 %352;
    i1 %358 = or i1 %357, i1 %172;
    i1 %359 = and i1 %358, i1 %356;
    i32 %360 = zext i1 %359 to i32;
    i32 %361 = mul i32 %360, i32 2;
    i1 %362 = xor i1 %352, i1 true;
    i1 %363 = or i1 %192, i1 %349;
    i1 %364 = or i1 %363, i1 %160;
    i1 %365 = and i1 %364, i1 %362;
    i32 %366 = zext i1 %365 to i32;
    i32 %367 = add i32 %361, i32 %366;
    i32 %368 = mul i32 %367, i32 2;
    i1 %369 = xor i1 %349, i1 true;
    i1 %370 = or i1 %200, i1 %346;
    i1 %371 = or i1 %370, i1 %148;
    i1 %372 = and i1 %371, i1 %369;
    i32 %373 = zext i1 %372 to i32;
    i32 %374 = add i32 %368, i32 %373;
    i32 %375 = mul i32 %374, i32 2;
    i1 %376 = xor i1 %346, i1 true;
    i1 %377 = or i1 %208, i1 %343;
    i1 %378 = or i1 %377, i1 %136;
    i1 %379 = and i1 %378, i1 %376;
    i32 %380 = zext i1 %379 to i32;
    i32 %381 = add i32 %375, i32 %380;
    i32 %382 = mul i32 %381, i32 2;
    i1 %383 = xor i1 %343, i1 true;
    i1 %384 = or i1 %216, i1 %340;
    i1 %385 = or i1 %384, i1 %124;
    i1 %386 = and i1 %385, i1 %383;
    i32 %387 = zext i1 %386 to i32;
    i32 %388 = add i32 %382, i32 %387;
    i32 %389 = mul i32 %388, i32 2;
    i1 %390 = xor i1 %340, i1 true;
    i1 %391 = or i1 %224, i1 %337;
    i1 %392 = or i1 %391, i1 %112;
    i1 %393 = and i1 %392, i1 %390;
    i32 %394 = zext i1 %393 to i32;
    i32 %395 = add i32 %389, i32 %394;
    i32 %396 = mul i32 %395, i32 2;
    i1 %397 = xor i1 %337, i1 true;
    i1 %398 = or i1 %232, i1 %334;
    i1 %399 = or i1 %398, i1 %100;
    i1 %400 = and i1 %399, i1 %397;
    i32 %401 = zext i1 %400 to i32;
    i32 %402 = add i32 %396, i32 %401;
    i32 %403 = mul i32 %402, i32 2;
    i1 %404 = xor i1 %334, i1 true;
    i1 %405 = or i1 %240, i1 %331;
    i1 %406 = or i1 %405, i1 %88;
    i1 %407 = and i1 %406, i1 %404;
    i32 %408 = zext i1 %407 to i32;
    i32 %409 = add i32 %403, i32 %408;
    i32 %410 = mul i32 %409, i32 2;
    i1 %411 = xor i1 %331, i1 true;
    i1 %412 = or i1 %248, i1 %328;
    i1 %413 = or i1 %412, i1 %76;
    i1 %414 = and i1 %413, i1 %411;
    i32 %415 = zext i1 %414 to i32;
    i32 %416 = add i32 %410, i32 %415;
    i32 %417 = mul i32 %416, i32 2;
    i1 %418 = xor i1 %328, i1 true;
    i1 %419 = or i1 %256, i1 %325;
    i1 %420 = or i1 %419, i1 %64;
    i1 %421 = and i1 %420, i1 %418;
    i32 %422 = zext i1 %421 to i32;
    i32 %423 = add i32 %417, i32 %422;
    i32 %424 = mul i32 %423, i32 2;
    i1 %425 = xor i1 %325, i1 true;
    i1 %426 = or i1 %264, i1 %322;
    i1 %427 = or i1 %426, i1 %52;
    i1 %428 = and i1 %427, i1 %425;
    i32 %429 = zext i1 %428 to i32;
    i32 %430 = add i32 %424, i32 %429;
    i32 %431 = mul i32 %430, i32 2;
    i1 %432 = xor i1 %322, i1 true;
    i1 %433 = or i1 %272, i1 %319;
    i1 %434 = or i1 %433, i1 %40;
    i1 %435 = and i1 %434, i1 %432;
    i32 %436 = zext i1 %435 to i32;
    i32 %437 = add i32 %431, i32 %436;
    i32 %438 = mul i32 %437, i32 2;
    i1 %439 = xor i1 %319, i1 true;
    i1 %440 = or i1 %280, i1 %316;
    i1 %441 = or i1 %440, i1 %28;
    i1 %442 = and i1 %441, i1 %439;
    i32 %443 = zext i1 %442 to i32;
    i32 %444 = add i32 %438, i32 %443;
    i32 %445 = mul i32 %444, i32 2;
    i1 %446 = xor i1 %316, i1 true;
    i1 %447 = or i1 %288, i1 %16;
    i1 %448 = and i1 %447, i1 %446;
    i32 %449 = zext i1 %448 to i32;
    i32 %450 = add i32 %445, i32 %449;
    i32 %451 = mul i32 %450, i32 2;
    i32 %452 = zext i1 %296 to i32;
    i32 %453 = add i32 %451, i32 %452;
    i32 %454 = mul i32 %453, i32 2;
    i32 %455 = zext i1 %12 to i32;
    i32 %456 = add i32 %454, i32 %455;
    i32 %457 = call (i32) -> i32 @fib(i32 %456);
    i32 %458 = sdiv i32 %457, i32 2;
    i32 %459 = srem i32 %458, i32 2;
    i1 %460 = scmp lt i32 %459, i32 0;
    i32 %461 = neg i32 %459;
    i32 %462 = select i1 %460 ? i32 %461 : i32 %459;
    i1 %463 = scmp neq i32 %462, i32 0;
    i1 %464 = and i1 %314, i1 %463;
    i1 %465 = xor i1 %464, i1 true;
    i32 %466 = srem i32 %308, i32 2;
    i1 %467 = scmp lt i32 %466, i32 0;
    i32 %468 = neg i32 %466;
    i32 %469 = select i1 %467 ? i32 %468 : i32 %466;
    i1 %470 = scmp neq i32 %469, i32 0;
    i1 %471 = and i1 %465, i1 %470;
    i32 %472 = srem i32 %457, i32 2;
    i1 %473 = scmp lt i32 %472, i32 0;
    i32 %474 = neg i32 %472;
    i32 %475 = select i1 %473 ? i32 %474 : i32 %472;
    i1 %476 = scmp neq i32 %475, i32 0;
    i1 %477 = and i1 %471, i1 %476;
    i32 %478 = or i32 %313, i32 %462;
    i1 %479 = scmp neq i32 %478, i32 0;
    i1 %480 = and i1 %477, i1 %479;
    i1 %481 = or i1 %464, i1 %480;
    i32 %482 = sdiv i32 %308, i32 4;
    i32 %483 = srem i32 %482, i32 2;
    i1 %484 = scmp lt i32 %483, i32 0;
    i32 %485 = neg i32 %483;
    i32 %486 = select i1 %484 ? i32 %485 : i32 %483;
    i1 %487 = scmp neq i32 %486, i32 0;
    i32 %488 = sdiv i32 %457, i32 4;
    i32 %489 = srem i32 %488, i32 2;
    i1 %490 = scmp lt i32 %489, i32 0;
    i32 %491 = neg i32 %489;
    i32 %492 = select i1 %490 ? i32 %491 : i32 %489;
    i1 %493 = scmp neq i32 %492, i32 0;
    i1 %494 = and i1 %487, i1 %493;
    i1 %495 = xor i1 %494, i1 true;
    i1 %496 = and i1 %481, i1 %495;
    i32 %497 = or i32 %486, i32 %492;
    i1 %498 = scmp neq i32 %497, i32 0;
    i1 %499 = and i1 %496, i1 %498;
    i1 %500 = or i1 %494, i1 %499;
    i32 %501 = sdiv i32 %308, i32 8;
    i32 %502 = srem i32 %501, i32 2;
    i1 %503 = scmp lt i32 %502, i32 0;
    i32 %504 = neg i32 %502;
    i32 %505 = select i1 %503 ? i32 %504 : i32 %502;
    i1 %506 = scmp neq i32 %505, i32 0;
    i32 %507 = sdiv i32 %457, i32 8;
    i32 %508 = srem i32 %507, i32 2;
    i1 %509 = scmp lt i32 %508, i32 0;
    i32 %510 = neg i32 %508;
    i32 %511 = select i1 %509 ? i32 %510 : i32 %508;
    i1 %512 = scmp neq i32 %511, i32 0;
    i1 %513 = and i1 %506, i1 %512;
    i1 %514 = xor i1 %513, i1 true;
    i1 %515 = and i1 %500, i1 %514;
    i32 %516 = or i32 %505, i32 %511;
    i1 %517 = scmp neq i32 %516, i32 0;
    i1 %518 = and i1 %515, i1 %517;
    i1 %519 = or i1 %513, i1 %518;
    i32 %520 = sdiv i32 %308, i32 16;
    i32 %521 = srem i32 %520, i32 2;
    i1 %522 = scmp lt i32 %521, i32 0;
    i32 %523 = neg i32 %521;
    i32 %524 = select i1 %522 ? i32 %523 : i32 %521;
    i1 %525 = scmp neq i32 %524, i32 0;
    i32 %526 = sdiv i32 %457, i32 16;
    i32 %527 = srem i32 %526, i32 2;
    i1 %528 = scmp lt i32 %527, i32 0;
    i32 %529 = neg i32 %527;
    i32 %530 = select i1 %528 ? i32 %529 : i32 %527;
    i1 %531 = scmp neq i32 %530, i32 0;
    i1 %532 = and i1 %525, i1 %531;
    i1 %533 = xor i1 %532, i1 true;
    i1 %534 = and i1 %519, i1 %533;
    i32 %535 = or i32 %524, i32 %530;
    i1 %536 = scmp neq i32 %535, i32 0;
    i1 %537 = and i1 %534, i1 %536;
    i1 %538 = or i1 %532, i1 %537;
    i32 %539 = sdiv i32 %308, i32 32;
    i32 %540 = srem i32 %539, i32 2;
    i1 %541 = scmp lt i32 %540, i32 0;
    i32 %542 = neg i32 %540;
    i32 %543 = select i1 %541 ? i32 %542 : i32 %540;
    i1 %544 = scmp neq i32 %543, i32 0;
    i32 %545 = sdiv i32 %457, i32 32;
    i32 %546 = srem i32 %545, i32 2;
    i1 %547 = scmp lt i32 %546, i32 0;
    i32 %548 = neg i32 %546;
    i32 %549 = select i1 %547 ? i32 %548 : i32 %546;
    i1 %550 = scmp neq i32 %549, i32 0;
    i1 %551 = and i1 %544, i1 %550;
    i1 %552 = xor i1 %551, i1 true;
    i1 %553 = and i1 %538, i1 %552;
    i32 %554 = or i32 %543, i32 %549;
    i1 %555 = scmp neq i32 %554, i32 0;
    i1 %556 = and i1 %553, i1 %555;
    i1 %557 = or i1 %551, i1 %556;
    i32 %558 = sdiv i32 %308, i32 64;
    i32 %559 = srem i32 %558, i32 2;
    i1 %560 = scmp lt i32 %559, i32 0;
    i32 %561 = neg i32 %559;
    i32 %562 = select i1 %560 ? i32 %561 : i32 %559;
    i1 %563 = scmp neq i32 %562, i32 0;
    i32 %564 = sdiv i32 %457, i32 64;
    i32 %565 = srem i32 %564, i32 2;
    i1 %566 = scmp lt i32 %565, i32 0;
    i32 %567 = neg i32 %565;
    i32 %568 = select i1 %566 ? i32 %567 : i32 %565;
    i1 %569 = scmp neq i32 %568, i32 0;
    i1 %570 = and i1 %563, i1 %569;
    i1 %571 = xor i1 %570, i1 true;
    i1 %572 = and i1 %557, i1 %571;
    i32 %573 = or i32 %562, i32 %568;
    i1 %574 = scmp neq i32 %573, i32 0;
    i1 %575 = and i1 %572, i1 %574;
    i1 %576 = or i1 %570, i1 %575;
    i32 %577 = sdiv i32 %308, i32 128;
    i32 %578 = srem i32 %577, i32 2;
    i1 %579 = scmp lt i32 %578, i32 0;
    i32 %580 = neg i32 %578;
    i32 %581 = select i1 %579 ? i32 %580 : i32 %578;
    i1 %582 = scmp neq i32 %581, i32 0;
    i32 %583 = sdiv i32 %457, i32 128;
    i32 %584 = srem i32 %583, i32 2;
    i1 %585 = scmp lt i32 %584, i32 0;
    i32 %586 = neg i32 %584;
    i32 %587 = select i1 %585 ? i32 %586 : i32 %584;
    i1 %588 = scmp neq i32 %587, i32 0;
    i1 %589 = and i1 %582, i1 %588;
    i1 %590 = xor i1 %589, i1 true;
    i1 %591 = and i1 %576, i1 %590;
    i32 %592 = or i32 %581, i32 %587;
    i1 %593 = scmp neq i32 %592, i32 0;
    i1 %594 = and i1 %591, i1 %593;
    i1 %595 = or i1 %589, i1 %594;
    i32 %596 = sdiv i32 %308, i32 256;
    i32 %597 = srem i32 %596, i32 2;
    i1 %598 = scmp lt i32 %597, i32 0;
    i32 %599 = neg i32 %597;
    i32 %600 = select i1 %598 ? i32 %599 : i32 %597;
    i1 %601 = scmp neq i32 %600, i32 0;
    i32 %602 = sdiv i32 %457, i32 256;
    i32 %603 = srem i32 %602, i32 2;
    i1 %604 = scmp lt i32 %603, i32 0;
    i32 %605 = neg i32 %603;
    i32 %606 = select i1 %604 ? i32 %605 : i32 %603;
    i1 %607 = scmp neq i32 %606, i32 0;
    i1 %608 = and i1 %601, i1 %607;
    i1 %609 = xor i1 %608, i1 true;
    i1 %610 = and i1 %595, i1 %609;
    i32 %611 = or i32 %600, i32 %606;
    i1 %612 = scmp neq i32 %611, i32 0;
    i1 %613 = and i1 %610, i1 %612;
    i1 %614 = or i1 %608, i1 %613;
    i32 %615 = sdiv i32 %308, i32 512;
    i32 %616 = srem i32 %615, i32 2;
    i1 %617 = scmp lt i32 %616, i32 0;
    i32 %618 = neg i32 %616;
    i32 %619 = select i1 %617 ? i32 %618 : i32 %616;
    i1 %620 = scmp neq i32 %619, i32 0;
    i32 %621 = sdiv i32 %457, i32 512;
    i32 %622 = srem i32 %621, i32 2;
    i1 %623 = scmp lt i32 %622, i32 0;
    i32 %624 = neg i32 %622;
    i32 %625 = select i1 %623 ? i32 %624 : i32 %622;
    i1 %626 = scmp neq i32 %625, i32 0;
    i1 %627 = and i1 %620, i1 %626;
    i1 %628 = xor i1 %627, i1 true;
    i1 %629 = and i1 %614, i1 %628;
    i32 %630 = or i32 %619, i32 %625;
    i1 %631 = scmp neq i32 %630, i32 0;
    i1 %632 = and i1 %629, i1 %631;
    i1 %633 = or i1 %627, i1 %632;
    i32 %634 = sdiv i32 %308, i32 1024;
    i32 %635 = srem i32 %634, i32 2;
    i1 %636 = scmp lt i32 %635, i32 0;
    i32 %637 = neg i32 %635;
    i32 %638 = select i1 %636 ? i32 %637 : i32 %635;
    i1 %639 = scmp neq i32 %638, i32 0;
    i32 %640 = sdiv i32 %457, i32 1024;
    i32 %641 = srem i32 %640, i32 2;
    i1 %642 = scmp lt i32 %641, i32 0;
    i32 %643 = neg i32 %641;
    i32 %644 = select i1 %642 ? i32 %643 : i32 %641;
    i1 %645 = scmp neq i32 %644, i32 0;
    i1 %646 = and i1 %639, i1 %645;
    i1 %647 = xor i1 %646, i1 true;
    i1 %648 = and i1 %633, i1 %647;
    i32 %649 = or i32 %638, i32 %644;
    i1 %650 = scmp neq i32 %649, i32 0;
    i1 %651 = and i1 %648, i1 %650;
    i1 %652 = or i1 %646, i1 %651;
    i32 %653 = sdiv i32 %308, i32 2048;
    i32 %654 = srem i32 %653, i32 2;
    i1 %655 = scmp lt i32 %654, i32 0;
    i32 %656 = neg i32 %654;
    i32 %657 = select i1 %655 ? i32 %656 : i32 %654;
    i1 %658 = scmp neq i32 %657, i32 0;
    i32 %659 = sdiv i32 %457, i32 2048;
    i32 %660 = srem i32 %659, i32 2;
    i1 %661 = scmp lt i32 %660, i32 0;
    i32 %662 = neg i32 %660;
    i32 %663 = select i1 %661 ? i32 %662 : i32 %660;
    i1 %664 = scmp neq i32 %663, i32 0;
    i1 %665 = and i1 %658, i1 %664;
    i1 %666 = xor i1 %665, i1 true;
    i1 %667 = and i1 %652, i1 %666;
    i32 %668 = or i32 %657, i32 %663;
    i1 %669 = scmp neq i32 %668, i32 0;
    i1 %670 = and i1 %667, i1 %669;
    i1 %671 = or i1 %665, i1 %670;
    i32 %672 = sdiv i32 %308, i32 4096;
    i32 %673 = srem i32 %672, i32 2;
    i1 %674 = scmp lt i32 %673, i32 0;
    i32 %675 = neg i32 %673;
    i32 %676 = select i1 %674 ? i32 %675 : i32 %673;
    i1 %677 = scmp neq i32 %676, i32 0;
    i32 %678 = sdiv i32 %457, i32 4096;
    i32 %679 = srem i32 %678, i32 2;
    i1 %680 = scmp lt i32 %679, i32 0;
    i32 %681 = neg i32 %679;
    i32 %682 = select i1 %680 ? i32 %681 : i32 %679;
    i1 %683 = scmp neq i32 %682, i32 0;
    i1 %684 = and i1 %677, i1 %683;
    i1 %685 = xor i1 %684, i1 true;
    i1 %686 = and i1 %671, i1 %685;
    i32 %687 = or i32 %676, i32 %682;
    i1 %688 = scmp neq i32 %687, i32 0;
    i1 %689 = and i1 %686, i1 %688;
    i1 %690 = or i1 %684, i1 %689;
    i32 %691 = sdiv i32 %308, i32 8192;
    i32 %692 = srem i32 %691, i32 2;
    i1 %693 = scmp lt i32 %692, i32 0;
    i32 %694 = neg i32 %692;
    i32 %695 = select i1 %693 ? i32 %694 : i32 %692;
    i1 %696 = scmp neq i32 %695, i32 0;
    i32 %697 = sdiv i32 %457, i32 8192;
    i32 %698 = srem i32 %697, i32 2;
    i1 %699 = scmp lt i32 %698, i32 0;
    i32 %700 = neg i32 %698;
    i32 %701 = select i1 %699 ? i32 %700 : i32 %698;
    i1 %702 = scmp neq i32 %701, i32 0;
    i1 %703 = and i1 %696, i1 %702;
    i1 %704 = xor i1 %703, i1 true;
    i1 %705 = and i1 %690, i1 %704;
    i32 %706 = or i32 %695, i32 %701;
    i1 %707 = scmp neq i32 %706, i32 0;
    i1 %708 = and i1 %705, i1 %707;
    i1 %709 = or i1 %703, i1 %708;
    i32 %710 = sdiv i32 %308, i32 16384;
    i32 %711 = srem i32 %710, i32 2;
    i1 %712 = scmp lt i32 %711, i32 0;
    i32 %713 = neg i32 %711;
    i32 %714 = select i1 %712 ? i32 %713 : i32 %711;
    i1 %715 = scmp neq i32 %714, i32 0;
    i32 %716 = sdiv i32 %457, i32 16384;
    i32 %717 = srem i32 %716, i32 2;
    i1 %718 = scmp lt i32 %717, i32 0;
    i32 %719 = neg i32 %717;
    i32 %720 = select i1 %718 ? i32 %719 : i32 %717;
    i1 %721 = scmp neq i32 %720, i32 0;
    i1 %722 = and i1 %715, i1 %721;
    i1 %723 = xor i1 %722, i1 true;
    i1 %724 = and i1 %709, i1 %723;
    i32 %725 = or i32 %714, i32 %720;
    i1 %726 = scmp neq i32 %725, i32 0;
    i1 %727 = and i1 %724, i1 %726;
    i1 %728 = or i1 %722, i1 %727;
    i32 %729 = sdiv i32 %308, i32 32768;
    i32 %730 = srem i32 %729, i32 2;
    i1 %731 = scmp lt i32 %730, i32 0;
    i32 %732 = neg i32 %730;
    i32 %733 = select i1 %731 ? i32 %732 : i32 %730;
    i1 %734 = scmp neq i32 %733, i32 0;
    i32 %735 = sdiv i32 %457, i32 32768;
    i32 %736 = srem i32 %735, i32 2;
    i1 %737 = scmp lt i32 %736, i32 0;
    i32 %738 = neg i32 %736;
    i32 %739 = select i1 %737 ? i32 %738 : i32 %736;
    i1 %740 = scmp neq i32 %739, i32 0;
    i1 %741 = and i1 %734, i1 %740;
    i1 %742 = xor i1 %741, i1 true;
    i1 %743 = and i1 %728, i1 %742;
    i32 %744 = or i32 %733, i32 %739;
    i1 %745 = scmp neq i32 %744, i32 0;
    i1 %746 = and i1 %743, i1 %745;
    i1 %747 = xor i1 %746, i1 true;
    i1 %748 = and i1 %742, i1 %745;
    i1 %749 = or i1 %728, i1 %748;
    i1 %750 = and i1 %749, i1 %747;
    i32 %751 = zext i1 %750 to i32;
    i32 %752 = mul i32 %751, i32 2;
    i1 %753 = xor i1 %727, i1 true;
    i1 %754 = and i1 %723, i1 %726;
    i1 %755 = or i1 %709, i1 %754;
    i1 %756 = and i1 %755, i1 %753;
    i32 %757 = zext i1 %756 to i32;
    i32 %758 = add i32 %752, i32 %757;
    i32 %759 = mul i32 %758, i32 2;
    i1 %760 = xor i1 %708, i1 true;
    i1 %761 = and i1 %704, i1 %707;
    i1 %762 = or i1 %690, i1 %761;
    i1 %763 = and i1 %762, i1 %760;
    i32 %764 = zext i1 %763 to i32;
    i32 %765 = add i32 %759, i32 %764;
    i32 %766 = mul i32 %765, i32 2;
    i1 %767 = xor i1 %689, i1 true;
    i1 %768 = and i1 %685, i1 %688;
    i1 %769 = or i1 %671, i1 %768;
    i1 %770 = and i1 %769, i1 %767;
    i32 %771 = zext i1 %770 to i32;
    i32 %772 = add i32 %766, i32 %771;
    i32 %773 = mul i32 %772, i32 2;
    i1 %774 = xor i1 %670, i1 true;
    i1 %775 = and i1 %666, i1 %669;
    i1 %776 = or i1 %652, i1 %775;
    i1 %777 = and i1 %776, i1 %774;
    i32 %778 = zext i1 %777 to i32;
    i32 %779 = add i32 %773, i32 %778;
    i32 %780 = mul i32 %779, i32 2;
    i1 %781 = xor i1 %651, i1 true;
    i1 %782 = and i1 %647, i1 %650;
    i1 %783 = or i1 %633, i1 %782;
    i1 %784 = and i1 %783, i1 %781;
    i32 %785 = zext i1 %784 to i32;
    i32 %786 = add i32 %780, i32 %785;
    i32 %787 = mul i32 %786, i32 2;
    i1 %788 = xor i1 %632, i1 true;
    i1 %789 = and i1 %628, i1 %631;
    i1 %790 = or i1 %614, i1 %789;
    i1 %791 = and i1 %790, i1 %788;
    i32 %792 = zext i1 %791 to i32;
    i32 %793 = add i32 %787, i32 %792;
    i32 %794 = mul i32 %793, i32 2;
    i1 %795 = xor i1 %613, i1 true;
    i1 %796 = and i1 %609, i1 %612;
    i1 %797 = or i1 %595, i1 %796;
    i1 %798 = and i1 %797, i1 %795;
    i32 %799 = zext i1 %798 to i32;
    i32 %800 = add i32 %794, i32 %799;
    i32 %801 = mul i32 %800, i32 2;
    i1 %802 = xor i1 %594, i1 true;
    i1 %803 = and i1 %590, i1 %593;
    i1 %804 = or i1 %576, i1 %803;
    i1 %805 = and i1 %804, i1 %802;
    i32 %806 = zext i1 %805 to i32;
    i32 %807 = add i32 %801, i32 %806;
    i32 %808 = mul i32 %807, i32 2;
    i1 %809 = xor i1 %575, i1 true;
    i1 %810 = and i1 %571, i1 %574;
    i1 %811 = or i1 %557, i1 %810;
    i1 %812 = and i1 %811, i1 %809;
    i32 %813 = zext i1 %812 to i32;
    i32 %814 = add i32 %808, i32 %813;
    i32 %815 = mul i32 %814, i32 2;
    i1 %816 = xor i1 %556, i1 true;
    i1 %817 = and i1 %552, i1 %555;
    i1 %818 = or i1 %538, i1 %817;
    i1 %819 = and i1 %818, i1 %816;
    i32 %820 = zext i1 %819 to i32;
    i32 %821 = add i32 %815, i32 %820;
    i32 %822 = mul i32 %821, i32 2;
    i1 %823 = xor i1 %537, i1 true;
    i1 %824 = and i1 %533, i1 %536;
    i1 %825 = or i1 %519, i1 %824;
    i1 %826 = and i1 %825, i1 %823;
    i32 %827 = zext i1 %826 to i32;
    i32 %828 = add i32 %822, i32 %827;
    i32 %829 = mul i32 %828, i32 2;
    i1 %830 = xor i1 %518, i1 true;
    i1 %831 = and i1 %514, i1 %517;
    i1 %832 = or i1 %500, i1 %831;
    i1 %833 = and i1 %832, i1 %830;
    i32 %834 = zext i1 %833 to i32;
    i32 %835 = add i32 %829, i32 %834;
    i32 %836 = mul i32 %835, i32 2;
    i1 %837 = xor i1 %499, i1 true;
    i1 %838 = and i1 %495, i1 %498;
    i1 %839 = or i1 %481, i1 %838;
    i1 %840 = and i1 %839, i1 %837;
    i32 %841 = zext i1 %840 to i32;
    i32 %842 = add i32 %836, i32 %841;
    i32 %843 = mul i32 %842, i32 2;
    i1 %844 = xor i1 %480, i1 true;
    i1 %845 = and i1 %465, i1 %479;
    i1 %846 = and i1 %470, i1 %476;
    i1 %847 = or i1 %846, i1 %845;
    i1 %848 = and i1 %847, i1 %844;
    i32 %849 = zext i1 %848 to i32;
    i32 %850 = add i32 %843, i32 %849;
    i32 %851 = mul i32 %850, i32 2;
    i1 %852 = xor i1 %846, i1 true;
    i32 %853 = or i32 %469, i32 %475;
    i1 %854 = scmp neq i32 %853, i32 0;
    i1 %855 = and i1 %852, i1 %854;
    i32 %856 = zext i1 %855 to i32;
    i32 %857 = add i32 %851, i32 %856;
    ubr ^b1;
  ^b1:
    i32 %858 = phi [^entry, i32 1] [^b, i32 %857];
    ret i32 %858;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = scmp lt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
