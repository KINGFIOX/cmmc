internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp lt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    i32 %1 = srem i32 %n, i32 2;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^if.then, ^b2;
^b1:
    i32 %3 = phi [^entry, i32 1] [^b159, i32 %830];
    ret i32 %3;
^if.then:
    i32 %4 = neg i32 %1;
    ubr ^b2;
^b2:
    i32 %5 = phi [^b, i32 %1] [^if.then, i32 %4];
    i32 %6 = sdiv i32 %n, i32 2;
    i32 %7 = srem i32 %6, i32 2;
    i1 %8 = scmp lt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then1, ^b3;
^if.then1:
    i32 %9 = neg i32 %7;
    ubr ^b3;
^b3:
    i32 %10 = phi [^b2, i32 %7] [^if.then1, i32 %9];
    i32 %11 = sdiv i32 %6, i32 2;
    i32 %12 = srem i32 %11, i32 2;
    i1 %13 = scmp lt i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    i32 %14 = neg i32 %12;
    ubr ^b4;
^b4:
    i32 %15 = phi [^b3, i32 %12] [^if.then2, i32 %14];
    i32 %16 = sdiv i32 %11, i32 2;
    i32 %17 = srem i32 %16, i32 2;
    i1 %18 = scmp lt i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then3, ^b5;
^if.then3:
    i32 %19 = neg i32 %17;
    ubr ^b5;
^b5:
    i32 %20 = phi [^b4, i32 %17] [^if.then3, i32 %19];
    i32 %21 = sdiv i32 %16, i32 2;
    i32 %22 = srem i32 %21, i32 2;
    i1 %23 = scmp lt i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then4, ^b6;
^if.then4:
    i32 %24 = neg i32 %22;
    ubr ^b6;
^b6:
    i32 %25 = phi [^b5, i32 %22] [^if.then4, i32 %24];
    i32 %26 = sdiv i32 %21, i32 2;
    i32 %27 = srem i32 %26, i32 2;
    i1 %28 = scmp lt i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then5, ^b7;
^if.then5:
    i32 %29 = neg i32 %27;
    ubr ^b7;
^b7:
    i32 %30 = phi [^b6, i32 %27] [^if.then5, i32 %29];
    i32 %31 = sdiv i32 %26, i32 2;
    i32 %32 = srem i32 %31, i32 2;
    i1 %33 = scmp lt i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then6, ^b8;
^if.then6:
    i32 %34 = neg i32 %32;
    ubr ^b8;
^b8:
    i32 %35 = phi [^b7, i32 %32] [^if.then6, i32 %34];
    i32 %36 = sdiv i32 %31, i32 2;
    i32 %37 = srem i32 %36, i32 2;
    i1 %38 = scmp lt i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^if.then7, ^b9;
^if.then7:
    i32 %39 = neg i32 %37;
    ubr ^b9;
^b9:
    i32 %40 = phi [^b8, i32 %37] [^if.then7, i32 %39];
    i32 %41 = sdiv i32 %36, i32 2;
    i32 %42 = srem i32 %41, i32 2;
    i1 %43 = scmp lt i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then8, ^b10;
^if.then8:
    i32 %44 = neg i32 %42;
    ubr ^b10;
^b10:
    i32 %45 = phi [^b9, i32 %42] [^if.then8, i32 %44];
    i32 %46 = sdiv i32 %41, i32 2;
    i32 %47 = srem i32 %46, i32 2;
    i1 %48 = scmp lt i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then9, ^b11;
^if.then9:
    i32 %49 = neg i32 %47;
    ubr ^b11;
^b11:
    i32 %50 = phi [^b10, i32 %47] [^if.then9, i32 %49];
    i32 %51 = sdiv i32 %46, i32 2;
    i32 %52 = srem i32 %51, i32 2;
    i1 %53 = scmp lt i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then10, ^b12;
^if.then10:
    i32 %54 = neg i32 %52;
    ubr ^b12;
^b12:
    i32 %55 = phi [^b11, i32 %52] [^if.then10, i32 %54];
    i32 %56 = sdiv i32 %51, i32 2;
    i32 %57 = srem i32 %56, i32 2;
    i1 %58 = scmp lt i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then11, ^b13;
^if.then11:
    i32 %59 = neg i32 %57;
    ubr ^b13;
^b13:
    i32 %60 = phi [^b12, i32 %57] [^if.then11, i32 %59];
    i32 %61 = sdiv i32 %56, i32 2;
    i32 %62 = srem i32 %61, i32 2;
    i1 %63 = scmp lt i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^if.then12, ^b14;
^if.then12:
    i32 %64 = neg i32 %62;
    ubr ^b14;
^b14:
    i32 %65 = phi [^b13, i32 %62] [^if.then12, i32 %64];
    i32 %66 = sdiv i32 %61, i32 2;
    i32 %67 = srem i32 %66, i32 2;
    i1 %68 = scmp lt i32 %67, i32 0;
    cbr i1 %68(prob = 0.5), ^if.then13, ^b15;
^if.then13:
    i32 %69 = neg i32 %67;
    ubr ^b15;
^b15:
    i32 %70 = phi [^b14, i32 %67] [^if.then13, i32 %69];
    i32 %71 = sdiv i32 %66, i32 2;
    i32 %72 = srem i32 %71, i32 2;
    i1 %73 = scmp lt i32 %72, i32 0;
    cbr i1 %73(prob = 0.5), ^if.then14, ^b16;
^if.then14:
    i32 %74 = neg i32 %72;
    ubr ^b16;
^b16:
    i32 %75 = phi [^b15, i32 %72] [^if.then14, i32 %74];
    i32 %76 = sdiv i32 %71, i32 2;
    i32 %77 = srem i32 %76, i32 2;
    i1 %78 = scmp lt i32 %77, i32 0;
    cbr i1 %78(prob = 0.5), ^if.then15, ^b17;
^if.then15:
    i32 %79 = neg i32 %77;
    ubr ^b17;
^b17:
    i32 %80 = phi [^b16, i32 %77] [^if.then15, i32 %79];
    i1 %81 = scmp neq i32 %5, i32 0;
    i1 %82 = scmp eq i32 %5, i32 0;
    i32 %83 = zext i1 %82 to i32;
    i1 %84 = scmp neq i32 %10, i32 0;
    i1 %85 = scmp eq i32 %10, i32 0;
    i1 %86 = select i1 %85 ? i1 true : i1 %81;
    i1 %87 = select i1 %85 ? i1 %81 : i1 false;
    i1 %88 = xor i1 %87, i1 true;
    i1 %89 = select i1 %86 ? i1 %88 : i1 false;
    i32 %90 = zext i1 %89 to i32;
    i1 %91 = select i1 %84 ? i1 true : i1 %87;
    i1 %92 = scmp neq i32 %15, i32 0;
    i1 %93 = scmp eq i32 %15, i32 0;
    i1 %94 = select i1 %93 ? i1 true : i1 %91;
    i1 %95 = select i1 %93 ? i1 %91 : i1 false;
    i1 %96 = xor i1 %95, i1 true;
    i1 %97 = select i1 %94 ? i1 %96 : i1 false;
    i32 %98 = zext i1 %97 to i32;
    i1 %99 = select i1 %92 ? i1 true : i1 %95;
    i1 %100 = scmp neq i32 %20, i32 0;
    i1 %101 = scmp eq i32 %20, i32 0;
    i1 %102 = select i1 %101 ? i1 true : i1 %99;
    i1 %103 = select i1 %101 ? i1 %99 : i1 false;
    i1 %104 = xor i1 %103, i1 true;
    i1 %105 = select i1 %102 ? i1 %104 : i1 false;
    i32 %106 = zext i1 %105 to i32;
    i1 %107 = select i1 %100 ? i1 true : i1 %103;
    i1 %108 = scmp neq i32 %25, i32 0;
    i1 %109 = scmp eq i32 %25, i32 0;
    i1 %110 = select i1 %109 ? i1 true : i1 %107;
    i1 %111 = select i1 %109 ? i1 %107 : i1 false;
    i1 %112 = xor i1 %111, i1 true;
    i1 %113 = select i1 %110 ? i1 %112 : i1 false;
    i32 %114 = zext i1 %113 to i32;
    i1 %115 = select i1 %108 ? i1 true : i1 %111;
    i1 %116 = scmp neq i32 %30, i32 0;
    i1 %117 = scmp eq i32 %30, i32 0;
    i1 %118 = select i1 %117 ? i1 true : i1 %115;
    i1 %119 = select i1 %117 ? i1 %115 : i1 false;
    i1 %120 = xor i1 %119, i1 true;
    i1 %121 = select i1 %118 ? i1 %120 : i1 false;
    i32 %122 = zext i1 %121 to i32;
    i1 %123 = select i1 %116 ? i1 true : i1 %119;
    i1 %124 = scmp neq i32 %35, i32 0;
    i1 %125 = scmp eq i32 %35, i32 0;
    i1 %126 = select i1 %125 ? i1 true : i1 %123;
    i1 %127 = select i1 %125 ? i1 %123 : i1 false;
    i1 %128 = xor i1 %127, i1 true;
    i1 %129 = select i1 %126 ? i1 %128 : i1 false;
    i32 %130 = zext i1 %129 to i32;
    i1 %131 = select i1 %124 ? i1 true : i1 %127;
    i1 %132 = scmp neq i32 %40, i32 0;
    i1 %133 = scmp eq i32 %40, i32 0;
    i1 %134 = select i1 %133 ? i1 true : i1 %131;
    i1 %135 = select i1 %133 ? i1 %131 : i1 false;
    i1 %136 = xor i1 %135, i1 true;
    i1 %137 = select i1 %134 ? i1 %136 : i1 false;
    i32 %138 = zext i1 %137 to i32;
    i1 %139 = select i1 %132 ? i1 true : i1 %135;
    i1 %140 = scmp neq i32 %45, i32 0;
    i1 %141 = scmp eq i32 %45, i32 0;
    i1 %142 = select i1 %141 ? i1 true : i1 %139;
    i1 %143 = select i1 %141 ? i1 %139 : i1 false;
    i1 %144 = xor i1 %143, i1 true;
    i1 %145 = select i1 %142 ? i1 %144 : i1 false;
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = select i1 %140 ? i1 true : i1 %143;
    i1 %148 = scmp neq i32 %50, i32 0;
    i1 %149 = scmp eq i32 %50, i32 0;
    i1 %150 = select i1 %149 ? i1 true : i1 %147;
    i1 %151 = select i1 %149 ? i1 %147 : i1 false;
    i1 %152 = xor i1 %151, i1 true;
    i1 %153 = select i1 %150 ? i1 %152 : i1 false;
    i32 %154 = zext i1 %153 to i32;
    i1 %155 = select i1 %148 ? i1 true : i1 %151;
    i1 %156 = scmp neq i32 %55, i32 0;
    i1 %157 = scmp eq i32 %55, i32 0;
    i1 %158 = select i1 %157 ? i1 true : i1 %155;
    i1 %159 = select i1 %157 ? i1 %155 : i1 false;
    i1 %160 = xor i1 %159, i1 true;
    i1 %161 = select i1 %158 ? i1 %160 : i1 false;
    i32 %162 = zext i1 %161 to i32;
    i1 %163 = select i1 %156 ? i1 true : i1 %159;
    i1 %164 = scmp neq i32 %60, i32 0;
    i1 %165 = scmp eq i32 %60, i32 0;
    i1 %166 = select i1 %165 ? i1 true : i1 %163;
    i1 %167 = select i1 %165 ? i1 %163 : i1 false;
    i1 %168 = xor i1 %167, i1 true;
    i1 %169 = select i1 %166 ? i1 %168 : i1 false;
    i32 %170 = zext i1 %169 to i32;
    i1 %171 = select i1 %164 ? i1 true : i1 %167;
    i1 %172 = scmp neq i32 %65, i32 0;
    i1 %173 = scmp eq i32 %65, i32 0;
    i1 %174 = select i1 %173 ? i1 true : i1 %171;
    i1 %175 = select i1 %173 ? i1 %171 : i1 false;
    i1 %176 = xor i1 %175, i1 true;
    i1 %177 = select i1 %174 ? i1 %176 : i1 false;
    i32 %178 = zext i1 %177 to i32;
    i1 %179 = select i1 %172 ? i1 true : i1 %175;
    i1 %180 = scmp neq i32 %70, i32 0;
    i1 %181 = scmp eq i32 %70, i32 0;
    i1 %182 = select i1 %181 ? i1 true : i1 %179;
    i1 %183 = select i1 %181 ? i1 %179 : i1 false;
    i1 %184 = xor i1 %183, i1 true;
    i1 %185 = select i1 %182 ? i1 %184 : i1 false;
    i32 %186 = zext i1 %185 to i32;
    i1 %187 = select i1 %180 ? i1 true : i1 %183;
    i1 %188 = scmp neq i32 %75, i32 0;
    i1 %189 = scmp eq i32 %75, i32 0;
    i1 %190 = select i1 %189 ? i1 true : i1 %187;
    i1 %191 = select i1 %189 ? i1 %187 : i1 false;
    i1 %192 = xor i1 %191, i1 true;
    i1 %193 = select i1 %190 ? i1 %192 : i1 false;
    i32 %194 = zext i1 %193 to i32;
    i1 %195 = select i1 %188 ? i1 true : i1 %191;
    i1 %196 = scmp eq i32 %80, i32 0;
    i1 %197 = select i1 %196 ? i1 true : i1 %195;
    i1 %198 = select i1 %196 ? i1 %195 : i1 false;
    i1 %199 = xor i1 %198, i1 true;
    i1 %200 = select i1 %197 ? i1 %199 : i1 false;
    i32 %201 = zext i1 %200 to i32;
    i32 %202 = mul i32 %201, i32 2;
    i32 %203 = add i32 %194, i32 %202;
    i32 %204 = mul i32 %203, i32 2;
    i32 %205 = add i32 %186, i32 %204;
    i32 %206 = mul i32 %205, i32 2;
    i32 %207 = add i32 %178, i32 %206;
    i32 %208 = mul i32 %207, i32 2;
    i32 %209 = add i32 %170, i32 %208;
    i32 %210 = mul i32 %209, i32 2;
    i32 %211 = add i32 %162, i32 %210;
    i32 %212 = mul i32 %211, i32 2;
    i32 %213 = add i32 %154, i32 %212;
    i32 %214 = mul i32 %213, i32 2;
    i32 %215 = add i32 %146, i32 %214;
    i32 %216 = mul i32 %215, i32 2;
    i32 %217 = add i32 %138, i32 %216;
    i32 %218 = mul i32 %217, i32 2;
    i32 %219 = add i32 %130, i32 %218;
    i32 %220 = mul i32 %219, i32 2;
    i32 %221 = add i32 %122, i32 %220;
    i32 %222 = mul i32 %221, i32 2;
    i32 %223 = add i32 %114, i32 %222;
    i32 %224 = mul i32 %223, i32 2;
    i32 %225 = add i32 %106, i32 %224;
    i32 %226 = mul i32 %225, i32 2;
    i32 %227 = add i32 %98, i32 %226;
    i32 %228 = mul i32 %227, i32 2;
    i32 %229 = add i32 %90, i32 %228;
    i32 %230 = mul i32 %229, i32 2;
    i32 %231 = add i32 %83, i32 %230;
    i32 %232 = call (i32) -> i32 @fib(i32 %231);
    cbr i1 %2(prob = 0.5), ^if.then16, ^b18;
^if.then16:
    i32 %233 = neg i32 %1;
    ubr ^b18;
^b18:
    i32 %234 = phi [^b17, i32 %1] [^if.then16, i32 %233];
    cbr i1 %8(prob = 0.5), ^if.then17, ^b19;
^if.then17:
    i32 %235 = neg i32 %7;
    ubr ^b19;
^b19:
    i32 %236 = phi [^b18, i32 %7] [^if.then17, i32 %235];
    cbr i1 %13(prob = 0.5), ^if.then18, ^b20;
^if.then18:
    i32 %237 = neg i32 %12;
    ubr ^b20;
^b20:
    i32 %238 = phi [^b19, i32 %12] [^if.then18, i32 %237];
    cbr i1 %18(prob = 0.5), ^if.then19, ^b21;
^if.then19:
    i32 %239 = neg i32 %17;
    ubr ^b21;
^b21:
    i32 %240 = phi [^b20, i32 %17] [^if.then19, i32 %239];
    cbr i1 %23(prob = 0.5), ^if.then20, ^b22;
^if.then20:
    i32 %241 = neg i32 %22;
    ubr ^b22;
^b22:
    i32 %242 = phi [^b21, i32 %22] [^if.then20, i32 %241];
    cbr i1 %28(prob = 0.5), ^if.then21, ^b23;
^if.then21:
    i32 %243 = neg i32 %27;
    ubr ^b23;
^b23:
    i32 %244 = phi [^b22, i32 %27] [^if.then21, i32 %243];
    cbr i1 %33(prob = 0.5), ^if.then22, ^b24;
^if.then22:
    i32 %245 = neg i32 %32;
    ubr ^b24;
^b24:
    i32 %246 = phi [^b23, i32 %32] [^if.then22, i32 %245];
    cbr i1 %38(prob = 0.5), ^if.then23, ^b25;
^if.then23:
    i32 %247 = neg i32 %37;
    ubr ^b25;
^b25:
    i32 %248 = phi [^b24, i32 %37] [^if.then23, i32 %247];
    cbr i1 %43(prob = 0.5), ^if.then24, ^b26;
^if.then24:
    i32 %249 = neg i32 %42;
    ubr ^b26;
^b26:
    i32 %250 = phi [^b25, i32 %42] [^if.then24, i32 %249];
    cbr i1 %48(prob = 0.5), ^if.then25, ^b27;
^if.then25:
    i32 %251 = neg i32 %47;
    ubr ^b27;
^b27:
    i32 %252 = phi [^b26, i32 %47] [^if.then25, i32 %251];
    cbr i1 %53(prob = 0.5), ^if.then26, ^b28;
^if.then26:
    i32 %253 = neg i32 %52;
    ubr ^b28;
^b28:
    i32 %254 = phi [^b27, i32 %52] [^if.then26, i32 %253];
    cbr i1 %58(prob = 0.5), ^if.then27, ^b29;
^if.then27:
    i32 %255 = neg i32 %57;
    ubr ^b29;
^b29:
    i32 %256 = phi [^b28, i32 %57] [^if.then27, i32 %255];
    cbr i1 %63(prob = 0.5), ^if.then28, ^b30;
^if.then28:
    i32 %257 = neg i32 %62;
    ubr ^b30;
^b30:
    i32 %258 = phi [^b29, i32 %62] [^if.then28, i32 %257];
    cbr i1 %68(prob = 0.5), ^if.then29, ^b31;
^if.then29:
    i32 %259 = neg i32 %67;
    ubr ^b31;
^b31:
    i32 %260 = phi [^b30, i32 %67] [^if.then29, i32 %259];
    cbr i1 %73(prob = 0.5), ^if.then30, ^b32;
^if.then30:
    i32 %261 = neg i32 %72;
    ubr ^b32;
^b32:
    i32 %262 = phi [^b31, i32 %72] [^if.then30, i32 %261];
    cbr i1 %78(prob = 0.5), ^if.then31, ^b33;
^if.then31:
    i32 %263 = neg i32 %77;
    ubr ^b33;
^b33:
    i32 %264 = phi [^b32, i32 %77] [^if.then31, i32 %263];
    i1 %265 = scmp neq i32 %234, i32 0;
    i32 %266 = zext i1 %265 to i32;
    i1 %267 = scmp neq i32 %236, i32 0;
    i1 %268 = scmp eq i32 %236, i32 0;
    i32 %269 = zext i1 %268 to i32;
    i1 %270 = scmp neq i32 %238, i32 0;
    i1 %271 = scmp eq i32 %238, i32 0;
    i1 %272 = select i1 %271 ? i1 true : i1 %267;
    i1 %273 = select i1 %271 ? i1 %267 : i1 false;
    i1 %274 = xor i1 %273, i1 true;
    i1 %275 = select i1 %272 ? i1 %274 : i1 false;
    i32 %276 = zext i1 %275 to i32;
    i1 %277 = select i1 %270 ? i1 true : i1 %273;
    i1 %278 = scmp neq i32 %240, i32 0;
    i1 %279 = scmp eq i32 %240, i32 0;
    i1 %280 = select i1 %279 ? i1 true : i1 %277;
    i1 %281 = select i1 %279 ? i1 %277 : i1 false;
    i1 %282 = xor i1 %281, i1 true;
    i1 %283 = select i1 %280 ? i1 %282 : i1 false;
    i32 %284 = zext i1 %283 to i32;
    i1 %285 = select i1 %278 ? i1 true : i1 %281;
    i1 %286 = scmp neq i32 %242, i32 0;
    i1 %287 = scmp eq i32 %242, i32 0;
    i1 %288 = select i1 %287 ? i1 true : i1 %285;
    i1 %289 = select i1 %287 ? i1 %285 : i1 false;
    i1 %290 = xor i1 %289, i1 true;
    i1 %291 = select i1 %288 ? i1 %290 : i1 false;
    i32 %292 = zext i1 %291 to i32;
    i1 %293 = select i1 %286 ? i1 true : i1 %289;
    i1 %294 = scmp neq i32 %244, i32 0;
    i1 %295 = scmp eq i32 %244, i32 0;
    i1 %296 = select i1 %295 ? i1 true : i1 %293;
    i1 %297 = select i1 %295 ? i1 %293 : i1 false;
    i1 %298 = xor i1 %297, i1 true;
    i1 %299 = select i1 %296 ? i1 %298 : i1 false;
    i32 %300 = zext i1 %299 to i32;
    i1 %301 = select i1 %294 ? i1 true : i1 %297;
    i1 %302 = scmp neq i32 %246, i32 0;
    i1 %303 = scmp eq i32 %246, i32 0;
    i1 %304 = select i1 %303 ? i1 true : i1 %301;
    i1 %305 = select i1 %303 ? i1 %301 : i1 false;
    i1 %306 = xor i1 %305, i1 true;
    i1 %307 = select i1 %304 ? i1 %306 : i1 false;
    i32 %308 = zext i1 %307 to i32;
    i1 %309 = select i1 %302 ? i1 true : i1 %305;
    i1 %310 = scmp neq i32 %248, i32 0;
    i1 %311 = scmp eq i32 %248, i32 0;
    i1 %312 = select i1 %311 ? i1 true : i1 %309;
    i1 %313 = select i1 %311 ? i1 %309 : i1 false;
    i1 %314 = xor i1 %313, i1 true;
    i1 %315 = select i1 %312 ? i1 %314 : i1 false;
    i32 %316 = zext i1 %315 to i32;
    i1 %317 = select i1 %310 ? i1 true : i1 %313;
    i1 %318 = scmp neq i32 %250, i32 0;
    i1 %319 = scmp eq i32 %250, i32 0;
    i1 %320 = select i1 %319 ? i1 true : i1 %317;
    i1 %321 = select i1 %319 ? i1 %317 : i1 false;
    i1 %322 = xor i1 %321, i1 true;
    i1 %323 = select i1 %320 ? i1 %322 : i1 false;
    i32 %324 = zext i1 %323 to i32;
    i1 %325 = select i1 %318 ? i1 true : i1 %321;
    i1 %326 = scmp neq i32 %252, i32 0;
    i1 %327 = scmp eq i32 %252, i32 0;
    i1 %328 = select i1 %327 ? i1 true : i1 %325;
    i1 %329 = select i1 %327 ? i1 %325 : i1 false;
    i1 %330 = xor i1 %329, i1 true;
    i1 %331 = select i1 %328 ? i1 %330 : i1 false;
    i32 %332 = zext i1 %331 to i32;
    i1 %333 = select i1 %326 ? i1 true : i1 %329;
    i1 %334 = scmp neq i32 %254, i32 0;
    i1 %335 = scmp eq i32 %254, i32 0;
    i1 %336 = select i1 %335 ? i1 true : i1 %333;
    i1 %337 = select i1 %335 ? i1 %333 : i1 false;
    i1 %338 = xor i1 %337, i1 true;
    i1 %339 = select i1 %336 ? i1 %338 : i1 false;
    i32 %340 = zext i1 %339 to i32;
    i1 %341 = select i1 %334 ? i1 true : i1 %337;
    i1 %342 = scmp neq i32 %256, i32 0;
    i1 %343 = scmp eq i32 %256, i32 0;
    i1 %344 = select i1 %343 ? i1 true : i1 %341;
    i1 %345 = select i1 %343 ? i1 %341 : i1 false;
    i1 %346 = xor i1 %345, i1 true;
    i1 %347 = select i1 %344 ? i1 %346 : i1 false;
    i32 %348 = zext i1 %347 to i32;
    i1 %349 = select i1 %342 ? i1 true : i1 %345;
    i1 %350 = scmp neq i32 %258, i32 0;
    i1 %351 = scmp eq i32 %258, i32 0;
    i1 %352 = select i1 %351 ? i1 true : i1 %349;
    i1 %353 = select i1 %351 ? i1 %349 : i1 false;
    i1 %354 = xor i1 %353, i1 true;
    i1 %355 = select i1 %352 ? i1 %354 : i1 false;
    i32 %356 = zext i1 %355 to i32;
    i1 %357 = select i1 %350 ? i1 true : i1 %353;
    i1 %358 = scmp neq i32 %260, i32 0;
    i1 %359 = scmp eq i32 %260, i32 0;
    i1 %360 = select i1 %359 ? i1 true : i1 %357;
    i1 %361 = select i1 %359 ? i1 %357 : i1 false;
    i1 %362 = xor i1 %361, i1 true;
    i1 %363 = select i1 %360 ? i1 %362 : i1 false;
    i32 %364 = zext i1 %363 to i32;
    i1 %365 = select i1 %358 ? i1 true : i1 %361;
    i1 %366 = scmp neq i32 %262, i32 0;
    i1 %367 = scmp eq i32 %262, i32 0;
    i1 %368 = select i1 %367 ? i1 true : i1 %365;
    i1 %369 = select i1 %367 ? i1 %365 : i1 false;
    i1 %370 = xor i1 %369, i1 true;
    i1 %371 = select i1 %368 ? i1 %370 : i1 false;
    i32 %372 = zext i1 %371 to i32;
    i1 %373 = select i1 %366 ? i1 true : i1 %369;
    i1 %374 = scmp eq i32 %264, i32 0;
    i1 %375 = select i1 %374 ? i1 true : i1 %373;
    i1 %376 = select i1 %374 ? i1 %373 : i1 false;
    i1 %377 = xor i1 %376, i1 true;
    i1 %378 = select i1 %375 ? i1 %377 : i1 false;
    i32 %379 = zext i1 %378 to i32;
    i32 %380 = mul i32 %379, i32 2;
    i32 %381 = add i32 %380, i32 %372;
    i32 %382 = mul i32 %381, i32 2;
    i32 %383 = add i32 %382, i32 %364;
    i32 %384 = mul i32 %383, i32 2;
    i32 %385 = add i32 %384, i32 %356;
    i32 %386 = mul i32 %385, i32 2;
    i32 %387 = add i32 %386, i32 %348;
    i32 %388 = mul i32 %387, i32 2;
    i32 %389 = add i32 %388, i32 %340;
    i32 %390 = mul i32 %389, i32 2;
    i32 %391 = add i32 %390, i32 %332;
    i32 %392 = mul i32 %391, i32 2;
    i32 %393 = add i32 %392, i32 %324;
    i32 %394 = mul i32 %393, i32 2;
    i32 %395 = add i32 %394, i32 %316;
    i32 %396 = mul i32 %395, i32 2;
    i32 %397 = add i32 %396, i32 %308;
    i32 %398 = mul i32 %397, i32 2;
    i32 %399 = add i32 %398, i32 %300;
    i32 %400 = mul i32 %399, i32 2;
    i32 %401 = add i32 %400, i32 %292;
    i32 %402 = mul i32 %401, i32 2;
    i32 %403 = add i32 %402, i32 %284;
    i32 %404 = mul i32 %403, i32 2;
    i32 %405 = add i32 %404, i32 %276;
    i32 %406 = mul i32 %405, i32 2;
    i32 %407 = add i32 %269, i32 %406;
    i32 %408 = mul i32 %407, i32 2;
    i32 %409 = add i32 %266, i32 %408;
    i32 %410 = call (i32) -> i32 @fib(i32 %409);
    i32 %411 = srem i32 %232, i32 2;
    i1 %412 = scmp lt i32 %411, i32 0;
    cbr i1 %412(prob = 0.5), ^if.then32, ^b34;
^if.then32:
    i32 %413 = neg i32 %411;
    ubr ^b34;
^b34:
    i32 %414 = phi [^b33, i32 %411] [^if.then32, i32 %413];
    i32 %415 = sdiv i32 %232, i32 2;
    i32 %416 = srem i32 %415, i32 2;
    i1 %417 = scmp lt i32 %416, i32 0;
    cbr i1 %417(prob = 0.5), ^if.then33, ^b35;
^if.then33:
    i32 %418 = neg i32 %416;
    ubr ^b35;
^b35:
    i32 %419 = phi [^b34, i32 %416] [^if.then33, i32 %418];
    i32 %420 = sdiv i32 %415, i32 2;
    i32 %421 = srem i32 %420, i32 2;
    i1 %422 = scmp lt i32 %421, i32 0;
    cbr i1 %422(prob = 0.5), ^if.then34, ^b36;
^if.then34:
    i32 %423 = neg i32 %421;
    ubr ^b36;
^b36:
    i32 %424 = phi [^b35, i32 %421] [^if.then34, i32 %423];
    i32 %425 = sdiv i32 %420, i32 2;
    i32 %426 = srem i32 %425, i32 2;
    i1 %427 = scmp lt i32 %426, i32 0;
    cbr i1 %427(prob = 0.5), ^if.then35, ^b37;
^if.then35:
    i32 %428 = neg i32 %426;
    ubr ^b37;
^b37:
    i32 %429 = phi [^b36, i32 %426] [^if.then35, i32 %428];
    i32 %430 = sdiv i32 %425, i32 2;
    i32 %431 = srem i32 %430, i32 2;
    i1 %432 = scmp lt i32 %431, i32 0;
    cbr i1 %432(prob = 0.5), ^if.then36, ^b38;
^if.then36:
    i32 %433 = neg i32 %431;
    ubr ^b38;
^b38:
    i32 %434 = phi [^b37, i32 %431] [^if.then36, i32 %433];
    i32 %435 = sdiv i32 %430, i32 2;
    i32 %436 = srem i32 %435, i32 2;
    i1 %437 = scmp lt i32 %436, i32 0;
    cbr i1 %437(prob = 0.5), ^if.then37, ^b39;
^if.then37:
    i32 %438 = neg i32 %436;
    ubr ^b39;
^b39:
    i32 %439 = phi [^b38, i32 %436] [^if.then37, i32 %438];
    i32 %440 = sdiv i32 %435, i32 2;
    i32 %441 = srem i32 %440, i32 2;
    i1 %442 = scmp lt i32 %441, i32 0;
    cbr i1 %442(prob = 0.5), ^if.then38, ^b40;
^if.then38:
    i32 %443 = neg i32 %441;
    ubr ^b40;
^b40:
    i32 %444 = phi [^b39, i32 %441] [^if.then38, i32 %443];
    i32 %445 = sdiv i32 %440, i32 2;
    i32 %446 = srem i32 %445, i32 2;
    i1 %447 = scmp lt i32 %446, i32 0;
    cbr i1 %447(prob = 0.5), ^if.then39, ^b41;
^if.then39:
    i32 %448 = neg i32 %446;
    ubr ^b41;
^b41:
    i32 %449 = phi [^b40, i32 %446] [^if.then39, i32 %448];
    i32 %450 = sdiv i32 %445, i32 2;
    i32 %451 = srem i32 %450, i32 2;
    i1 %452 = scmp lt i32 %451, i32 0;
    cbr i1 %452(prob = 0.5), ^if.then40, ^b42;
^if.then40:
    i32 %453 = neg i32 %451;
    ubr ^b42;
^b42:
    i32 %454 = phi [^b41, i32 %451] [^if.then40, i32 %453];
    i32 %455 = sdiv i32 %450, i32 2;
    i32 %456 = srem i32 %455, i32 2;
    i1 %457 = scmp lt i32 %456, i32 0;
    cbr i1 %457(prob = 0.5), ^if.then41, ^b43;
^if.then41:
    i32 %458 = neg i32 %456;
    ubr ^b43;
^b43:
    i32 %459 = phi [^b42, i32 %456] [^if.then41, i32 %458];
    i32 %460 = sdiv i32 %455, i32 2;
    i32 %461 = srem i32 %460, i32 2;
    i1 %462 = scmp lt i32 %461, i32 0;
    cbr i1 %462(prob = 0.5), ^if.then42, ^b44;
^if.then42:
    i32 %463 = neg i32 %461;
    ubr ^b44;
^b44:
    i32 %464 = phi [^b43, i32 %461] [^if.then42, i32 %463];
    i32 %465 = sdiv i32 %460, i32 2;
    i32 %466 = srem i32 %465, i32 2;
    i1 %467 = scmp lt i32 %466, i32 0;
    cbr i1 %467(prob = 0.5), ^if.then43, ^b45;
^if.then43:
    i32 %468 = neg i32 %466;
    ubr ^b45;
^b45:
    i32 %469 = phi [^b44, i32 %466] [^if.then43, i32 %468];
    i32 %470 = sdiv i32 %465, i32 2;
    i32 %471 = srem i32 %470, i32 2;
    i1 %472 = scmp lt i32 %471, i32 0;
    cbr i1 %472(prob = 0.5), ^if.then44, ^b46;
^if.then44:
    i32 %473 = neg i32 %471;
    ubr ^b46;
^b46:
    i32 %474 = phi [^b45, i32 %471] [^if.then44, i32 %473];
    i32 %475 = sdiv i32 %470, i32 2;
    i32 %476 = srem i32 %475, i32 2;
    i1 %477 = scmp lt i32 %476, i32 0;
    cbr i1 %477(prob = 0.5), ^if.then45, ^b47;
^if.then45:
    i32 %478 = neg i32 %476;
    ubr ^b47;
^b47:
    i32 %479 = phi [^b46, i32 %476] [^if.then45, i32 %478];
    i32 %480 = sdiv i32 %475, i32 2;
    i32 %481 = srem i32 %480, i32 2;
    i1 %482 = scmp lt i32 %481, i32 0;
    cbr i1 %482(prob = 0.5), ^if.then46, ^b48;
^if.then46:
    i32 %483 = neg i32 %481;
    ubr ^b48;
^b48:
    i32 %484 = phi [^b47, i32 %481] [^if.then46, i32 %483];
    i32 %485 = sdiv i32 %480, i32 2;
    i32 %486 = srem i32 %485, i32 2;
    i1 %487 = scmp lt i32 %486, i32 0;
    cbr i1 %487(prob = 0.5), ^if.then47, ^b49;
^if.then47:
    i32 %488 = neg i32 %486;
    ubr ^b49;
^b49:
    i32 %489 = phi [^b48, i32 %486] [^if.then47, i32 %488];
    i32 %490 = srem i32 %410, i32 2;
    i1 %491 = scmp lt i32 %490, i32 0;
    cbr i1 %491(prob = 0.5), ^if.then48, ^b50;
^if.then48:
    i32 %492 = neg i32 %490;
    ubr ^b50;
^b50:
    i32 %493 = phi [^b49, i32 %490] [^if.then48, i32 %492];
    i32 %494 = sdiv i32 %410, i32 2;
    i32 %495 = srem i32 %494, i32 2;
    i1 %496 = scmp lt i32 %495, i32 0;
    cbr i1 %496(prob = 0.5), ^if.then49, ^b51;
^if.then49:
    i32 %497 = neg i32 %495;
    ubr ^b51;
^b51:
    i32 %498 = phi [^b50, i32 %495] [^if.then49, i32 %497];
    i32 %499 = sdiv i32 %494, i32 2;
    i32 %500 = srem i32 %499, i32 2;
    i1 %501 = scmp lt i32 %500, i32 0;
    cbr i1 %501(prob = 0.5), ^if.then50, ^b52;
^if.then50:
    i32 %502 = neg i32 %500;
    ubr ^b52;
^b52:
    i32 %503 = phi [^b51, i32 %500] [^if.then50, i32 %502];
    i32 %504 = sdiv i32 %499, i32 2;
    i32 %505 = srem i32 %504, i32 2;
    i1 %506 = scmp lt i32 %505, i32 0;
    cbr i1 %506(prob = 0.5), ^if.then51, ^b53;
^if.then51:
    i32 %507 = neg i32 %505;
    ubr ^b53;
^b53:
    i32 %508 = phi [^b52, i32 %505] [^if.then51, i32 %507];
    i32 %509 = sdiv i32 %504, i32 2;
    i32 %510 = srem i32 %509, i32 2;
    i1 %511 = scmp lt i32 %510, i32 0;
    cbr i1 %511(prob = 0.5), ^if.then52, ^b54;
^if.then52:
    i32 %512 = neg i32 %510;
    ubr ^b54;
^b54:
    i32 %513 = phi [^b53, i32 %510] [^if.then52, i32 %512];
    i32 %514 = sdiv i32 %509, i32 2;
    i32 %515 = srem i32 %514, i32 2;
    i1 %516 = scmp lt i32 %515, i32 0;
    cbr i1 %516(prob = 0.5), ^if.then53, ^b55;
^if.then53:
    i32 %517 = neg i32 %515;
    ubr ^b55;
^b55:
    i32 %518 = phi [^b54, i32 %515] [^if.then53, i32 %517];
    i32 %519 = sdiv i32 %514, i32 2;
    i32 %520 = srem i32 %519, i32 2;
    i1 %521 = scmp lt i32 %520, i32 0;
    cbr i1 %521(prob = 0.5), ^if.then54, ^b56;
^if.then54:
    i32 %522 = neg i32 %520;
    ubr ^b56;
^b56:
    i32 %523 = phi [^b55, i32 %520] [^if.then54, i32 %522];
    i32 %524 = sdiv i32 %519, i32 2;
    i32 %525 = srem i32 %524, i32 2;
    i1 %526 = scmp lt i32 %525, i32 0;
    cbr i1 %526(prob = 0.5), ^if.then55, ^b57;
^if.then55:
    i32 %527 = neg i32 %525;
    ubr ^b57;
^b57:
    i32 %528 = phi [^b56, i32 %525] [^if.then55, i32 %527];
    i32 %529 = sdiv i32 %524, i32 2;
    i32 %530 = srem i32 %529, i32 2;
    i1 %531 = scmp lt i32 %530, i32 0;
    cbr i1 %531(prob = 0.5), ^if.then56, ^b58;
^if.then56:
    i32 %532 = neg i32 %530;
    ubr ^b58;
^b58:
    i32 %533 = phi [^b57, i32 %530] [^if.then56, i32 %532];
    i32 %534 = sdiv i32 %529, i32 2;
    i32 %535 = srem i32 %534, i32 2;
    i1 %536 = scmp lt i32 %535, i32 0;
    cbr i1 %536(prob = 0.5), ^if.then57, ^b59;
^if.then57:
    i32 %537 = neg i32 %535;
    ubr ^b59;
^b59:
    i32 %538 = phi [^b58, i32 %535] [^if.then57, i32 %537];
    i32 %539 = sdiv i32 %534, i32 2;
    i32 %540 = srem i32 %539, i32 2;
    i1 %541 = scmp lt i32 %540, i32 0;
    cbr i1 %541(prob = 0.5), ^if.then58, ^b60;
^if.then58:
    i32 %542 = neg i32 %540;
    ubr ^b60;
^b60:
    i32 %543 = phi [^b59, i32 %540] [^if.then58, i32 %542];
    i32 %544 = sdiv i32 %539, i32 2;
    i32 %545 = srem i32 %544, i32 2;
    i1 %546 = scmp lt i32 %545, i32 0;
    cbr i1 %546(prob = 0.5), ^if.then59, ^b61;
^if.then59:
    i32 %547 = neg i32 %545;
    ubr ^b61;
^b61:
    i32 %548 = phi [^b60, i32 %545] [^if.then59, i32 %547];
    i32 %549 = sdiv i32 %544, i32 2;
    i32 %550 = srem i32 %549, i32 2;
    i1 %551 = scmp lt i32 %550, i32 0;
    cbr i1 %551(prob = 0.5), ^if.then60, ^b62;
^if.then60:
    i32 %552 = neg i32 %550;
    ubr ^b62;
^b62:
    i32 %553 = phi [^b61, i32 %550] [^if.then60, i32 %552];
    i32 %554 = sdiv i32 %549, i32 2;
    i32 %555 = srem i32 %554, i32 2;
    i1 %556 = scmp lt i32 %555, i32 0;
    cbr i1 %556(prob = 0.5), ^if.then61, ^b63;
^if.then61:
    i32 %557 = neg i32 %555;
    ubr ^b63;
^b63:
    i32 %558 = phi [^b62, i32 %555] [^if.then61, i32 %557];
    i32 %559 = sdiv i32 %554, i32 2;
    i32 %560 = srem i32 %559, i32 2;
    i1 %561 = scmp lt i32 %560, i32 0;
    cbr i1 %561(prob = 0.5), ^if.then62, ^b64;
^if.then62:
    i32 %562 = neg i32 %560;
    ubr ^b64;
^b64:
    i32 %563 = phi [^b63, i32 %560] [^if.then62, i32 %562];
    i32 %564 = sdiv i32 %559, i32 2;
    i32 %565 = srem i32 %564, i32 2;
    i1 %566 = scmp lt i32 %565, i32 0;
    cbr i1 %566(prob = 0.5), ^if.then63, ^b65;
^if.then63:
    i32 %567 = neg i32 %565;
    ubr ^b65;
^b65:
    i32 %568 = phi [^b64, i32 %565] [^if.then63, i32 %567];
    i1 %569 = scmp neq i32 %414, i32 0;
    cbr i1 %569(prob = 0.5), ^b67, ^b66;
^b66:
    i1 %570 = scmp neq i32 %493, i32 0;
    ubr ^b67;
^b67:
    i1 %571 = phi [^b65, i1 true] [^b66, i1 %570];
    cbr i1 %569(prob = 0.5), ^b68, ^b69;
^b68:
    i1 %572 = scmp neq i32 %493, i32 0;
    ubr ^b69;
^b69:
    i1 %573 = phi [^b67, i1 false] [^b68, i1 %572];
    i1 %574 = xor i1 %573, i1 true;
    i1 %575 = select i1 %571 ? i1 %574 : i1 false;
    i32 %576 = zext i1 %575 to i32;
    cbr i1 %569(prob = 0.5), ^b70, ^b71;
^b70:
    i1 %577 = scmp neq i32 %493, i32 0;
    ubr ^b71;
^b71:
    i1 %578 = phi [^b69, i1 false] [^b70, i1 %577];
    i1 %579 = scmp neq i32 %419, i32 0;
    cbr i1 %579(prob = 0.5), ^b73, ^b72;
^b72:
    i1 %580 = scmp neq i32 %498, i32 0;
    ubr ^b73;
^b73:
    i1 %581 = phi [^b71, i1 true] [^b72, i1 %580];
    cbr i1 %579(prob = 0.5), ^b74, ^b75;
^b74:
    i1 %582 = scmp neq i32 %498, i32 0;
    ubr ^b75;
^b75:
    i1 %583 = phi [^b73, i1 false] [^b74, i1 %582];
    i1 %584 = xor i1 %583, i1 true;
    i1 %585 = select i1 %581 ? i1 %584 : i1 false;
    i1 %586 = select i1 %585 ? i1 true : i1 %578;
    i1 %587 = select i1 %585 ? i1 %578 : i1 false;
    i1 %588 = xor i1 %587, i1 true;
    i1 %589 = select i1 %586 ? i1 %588 : i1 false;
    i32 %590 = zext i1 %589 to i32;
    cbr i1 %579(prob = 0.5), ^b76, ^b77;
^b76:
    i1 %591 = scmp neq i32 %498, i32 0;
    ubr ^b77;
^b77:
    i1 %592 = phi [^b75, i1 false] [^b76, i1 %591];
    i1 %593 = select i1 %592 ? i1 true : i1 %587;
    i1 %594 = scmp neq i32 %424, i32 0;
    cbr i1 %594(prob = 0.5), ^b79, ^b78;
^b78:
    i1 %595 = scmp neq i32 %503, i32 0;
    ubr ^b79;
^b79:
    i1 %596 = phi [^b77, i1 true] [^b78, i1 %595];
    cbr i1 %594(prob = 0.5), ^b80, ^b81;
^b80:
    i1 %597 = scmp neq i32 %503, i32 0;
    ubr ^b81;
^b81:
    i1 %598 = phi [^b79, i1 false] [^b80, i1 %597];
    i1 %599 = xor i1 %598, i1 true;
    i1 %600 = select i1 %596 ? i1 %599 : i1 false;
    i1 %601 = select i1 %600 ? i1 true : i1 %593;
    i1 %602 = select i1 %600 ? i1 %593 : i1 false;
    i1 %603 = xor i1 %602, i1 true;
    i1 %604 = select i1 %601 ? i1 %603 : i1 false;
    i32 %605 = zext i1 %604 to i32;
    cbr i1 %594(prob = 0.5), ^b82, ^b83;
^b82:
    i1 %606 = scmp neq i32 %503, i32 0;
    ubr ^b83;
^b83:
    i1 %607 = phi [^b81, i1 false] [^b82, i1 %606];
    i1 %608 = select i1 %607 ? i1 true : i1 %602;
    i1 %609 = scmp neq i32 %429, i32 0;
    cbr i1 %609(prob = 0.5), ^b85, ^b84;
^b84:
    i1 %610 = scmp neq i32 %508, i32 0;
    ubr ^b85;
^b85:
    i1 %611 = phi [^b83, i1 true] [^b84, i1 %610];
    cbr i1 %609(prob = 0.5), ^b86, ^b87;
^b86:
    i1 %612 = scmp neq i32 %508, i32 0;
    ubr ^b87;
^b87:
    i1 %613 = phi [^b85, i1 false] [^b86, i1 %612];
    i1 %614 = xor i1 %613, i1 true;
    i1 %615 = select i1 %611 ? i1 %614 : i1 false;
    i1 %616 = select i1 %615 ? i1 true : i1 %608;
    i1 %617 = select i1 %615 ? i1 %608 : i1 false;
    i1 %618 = xor i1 %617, i1 true;
    i1 %619 = select i1 %616 ? i1 %618 : i1 false;
    i32 %620 = zext i1 %619 to i32;
    cbr i1 %609(prob = 0.5), ^b88, ^b89;
^b88:
    i1 %621 = scmp neq i32 %508, i32 0;
    ubr ^b89;
^b89:
    i1 %622 = phi [^b87, i1 false] [^b88, i1 %621];
    i1 %623 = select i1 %622 ? i1 true : i1 %617;
    i1 %624 = scmp neq i32 %434, i32 0;
    cbr i1 %624(prob = 0.5), ^b91, ^b90;
^b90:
    i1 %625 = scmp neq i32 %513, i32 0;
    ubr ^b91;
^b91:
    i1 %626 = phi [^b89, i1 true] [^b90, i1 %625];
    cbr i1 %624(prob = 0.5), ^b92, ^b93;
^b92:
    i1 %627 = scmp neq i32 %513, i32 0;
    ubr ^b93;
^b93:
    i1 %628 = phi [^b91, i1 false] [^b92, i1 %627];
    i1 %629 = xor i1 %628, i1 true;
    i1 %630 = select i1 %626 ? i1 %629 : i1 false;
    i1 %631 = select i1 %630 ? i1 true : i1 %623;
    i1 %632 = select i1 %630 ? i1 %623 : i1 false;
    i1 %633 = xor i1 %632, i1 true;
    i1 %634 = select i1 %631 ? i1 %633 : i1 false;
    i32 %635 = zext i1 %634 to i32;
    cbr i1 %624(prob = 0.5), ^b94, ^b95;
^b94:
    i1 %636 = scmp neq i32 %513, i32 0;
    ubr ^b95;
^b95:
    i1 %637 = phi [^b93, i1 false] [^b94, i1 %636];
    i1 %638 = select i1 %637 ? i1 true : i1 %632;
    i1 %639 = scmp neq i32 %439, i32 0;
    cbr i1 %639(prob = 0.5), ^b97, ^b96;
^b96:
    i1 %640 = scmp neq i32 %518, i32 0;
    ubr ^b97;
^b97:
    i1 %641 = phi [^b95, i1 true] [^b96, i1 %640];
    cbr i1 %639(prob = 0.5), ^b98, ^b99;
^b98:
    i1 %642 = scmp neq i32 %518, i32 0;
    ubr ^b99;
^b99:
    i1 %643 = phi [^b97, i1 false] [^b98, i1 %642];
    i1 %644 = xor i1 %643, i1 true;
    i1 %645 = select i1 %641 ? i1 %644 : i1 false;
    i1 %646 = select i1 %645 ? i1 true : i1 %638;
    i1 %647 = select i1 %645 ? i1 %638 : i1 false;
    i1 %648 = xor i1 %647, i1 true;
    i1 %649 = select i1 %646 ? i1 %648 : i1 false;
    i32 %650 = zext i1 %649 to i32;
    cbr i1 %639(prob = 0.5), ^b100, ^b101;
^b100:
    i1 %651 = scmp neq i32 %518, i32 0;
    ubr ^b101;
^b101:
    i1 %652 = phi [^b99, i1 false] [^b100, i1 %651];
    i1 %653 = select i1 %652 ? i1 true : i1 %647;
    i1 %654 = scmp neq i32 %444, i32 0;
    cbr i1 %654(prob = 0.5), ^b103, ^b102;
^b102:
    i1 %655 = scmp neq i32 %523, i32 0;
    ubr ^b103;
^b103:
    i1 %656 = phi [^b101, i1 true] [^b102, i1 %655];
    cbr i1 %654(prob = 0.5), ^b104, ^b105;
^b104:
    i1 %657 = scmp neq i32 %523, i32 0;
    ubr ^b105;
^b105:
    i1 %658 = phi [^b103, i1 false] [^b104, i1 %657];
    i1 %659 = xor i1 %658, i1 true;
    i1 %660 = select i1 %656 ? i1 %659 : i1 false;
    i1 %661 = select i1 %660 ? i1 true : i1 %653;
    i1 %662 = select i1 %660 ? i1 %653 : i1 false;
    i1 %663 = xor i1 %662, i1 true;
    i1 %664 = select i1 %661 ? i1 %663 : i1 false;
    i32 %665 = zext i1 %664 to i32;
    cbr i1 %654(prob = 0.5), ^b106, ^b107;
^b106:
    i1 %666 = scmp neq i32 %523, i32 0;
    ubr ^b107;
^b107:
    i1 %667 = phi [^b105, i1 false] [^b106, i1 %666];
    i1 %668 = select i1 %667 ? i1 true : i1 %662;
    i1 %669 = scmp neq i32 %449, i32 0;
    cbr i1 %669(prob = 0.5), ^b109, ^b108;
^b108:
    i1 %670 = scmp neq i32 %528, i32 0;
    ubr ^b109;
^b109:
    i1 %671 = phi [^b107, i1 true] [^b108, i1 %670];
    cbr i1 %669(prob = 0.5), ^b110, ^b111;
^b110:
    i1 %672 = scmp neq i32 %528, i32 0;
    ubr ^b111;
^b111:
    i1 %673 = phi [^b109, i1 false] [^b110, i1 %672];
    i1 %674 = xor i1 %673, i1 true;
    i1 %675 = select i1 %671 ? i1 %674 : i1 false;
    i1 %676 = select i1 %675 ? i1 true : i1 %668;
    i1 %677 = select i1 %675 ? i1 %668 : i1 false;
    i1 %678 = xor i1 %677, i1 true;
    i1 %679 = select i1 %676 ? i1 %678 : i1 false;
    i32 %680 = zext i1 %679 to i32;
    cbr i1 %669(prob = 0.5), ^b112, ^b113;
^b112:
    i1 %681 = scmp neq i32 %528, i32 0;
    ubr ^b113;
^b113:
    i1 %682 = phi [^b111, i1 false] [^b112, i1 %681];
    i1 %683 = select i1 %682 ? i1 true : i1 %677;
    i1 %684 = scmp neq i32 %454, i32 0;
    cbr i1 %684(prob = 0.5), ^b115, ^b114;
^b114:
    i1 %685 = scmp neq i32 %533, i32 0;
    ubr ^b115;
^b115:
    i1 %686 = phi [^b113, i1 true] [^b114, i1 %685];
    cbr i1 %684(prob = 0.5), ^b116, ^b117;
^b116:
    i1 %687 = scmp neq i32 %533, i32 0;
    ubr ^b117;
^b117:
    i1 %688 = phi [^b115, i1 false] [^b116, i1 %687];
    i1 %689 = xor i1 %688, i1 true;
    i1 %690 = select i1 %686 ? i1 %689 : i1 false;
    i1 %691 = select i1 %690 ? i1 true : i1 %683;
    i1 %692 = select i1 %690 ? i1 %683 : i1 false;
    i1 %693 = xor i1 %692, i1 true;
    i1 %694 = select i1 %691 ? i1 %693 : i1 false;
    i32 %695 = zext i1 %694 to i32;
    cbr i1 %684(prob = 0.5), ^b118, ^b119;
^b118:
    i1 %696 = scmp neq i32 %533, i32 0;
    ubr ^b119;
^b119:
    i1 %697 = phi [^b117, i1 false] [^b118, i1 %696];
    i1 %698 = select i1 %697 ? i1 true : i1 %692;
    i1 %699 = scmp neq i32 %459, i32 0;
    cbr i1 %699(prob = 0.5), ^b121, ^b120;
^b120:
    i1 %700 = scmp neq i32 %538, i32 0;
    ubr ^b121;
^b121:
    i1 %701 = phi [^b119, i1 true] [^b120, i1 %700];
    cbr i1 %699(prob = 0.5), ^b122, ^b123;
^b122:
    i1 %702 = scmp neq i32 %538, i32 0;
    ubr ^b123;
^b123:
    i1 %703 = phi [^b121, i1 false] [^b122, i1 %702];
    i1 %704 = xor i1 %703, i1 true;
    i1 %705 = select i1 %701 ? i1 %704 : i1 false;
    i1 %706 = select i1 %705 ? i1 true : i1 %698;
    i1 %707 = select i1 %705 ? i1 %698 : i1 false;
    i1 %708 = xor i1 %707, i1 true;
    i1 %709 = select i1 %706 ? i1 %708 : i1 false;
    i32 %710 = zext i1 %709 to i32;
    cbr i1 %699(prob = 0.5), ^b124, ^b125;
^b124:
    i1 %711 = scmp neq i32 %538, i32 0;
    ubr ^b125;
^b125:
    i1 %712 = phi [^b123, i1 false] [^b124, i1 %711];
    i1 %713 = select i1 %712 ? i1 true : i1 %707;
    i1 %714 = scmp neq i32 %464, i32 0;
    cbr i1 %714(prob = 0.5), ^b127, ^b126;
^b126:
    i1 %715 = scmp neq i32 %543, i32 0;
    ubr ^b127;
^b127:
    i1 %716 = phi [^b125, i1 true] [^b126, i1 %715];
    cbr i1 %714(prob = 0.5), ^b128, ^b129;
^b128:
    i1 %717 = scmp neq i32 %543, i32 0;
    ubr ^b129;
^b129:
    i1 %718 = phi [^b127, i1 false] [^b128, i1 %717];
    i1 %719 = xor i1 %718, i1 true;
    i1 %720 = select i1 %716 ? i1 %719 : i1 false;
    i1 %721 = select i1 %720 ? i1 true : i1 %713;
    i1 %722 = select i1 %720 ? i1 %713 : i1 false;
    i1 %723 = xor i1 %722, i1 true;
    i1 %724 = select i1 %721 ? i1 %723 : i1 false;
    i32 %725 = zext i1 %724 to i32;
    cbr i1 %714(prob = 0.5), ^b130, ^b131;
^b130:
    i1 %726 = scmp neq i32 %543, i32 0;
    ubr ^b131;
^b131:
    i1 %727 = phi [^b129, i1 false] [^b130, i1 %726];
    i1 %728 = select i1 %727 ? i1 true : i1 %722;
    i1 %729 = scmp neq i32 %469, i32 0;
    cbr i1 %729(prob = 0.5), ^b133, ^b132;
^b132:
    i1 %730 = scmp neq i32 %548, i32 0;
    ubr ^b133;
^b133:
    i1 %731 = phi [^b131, i1 true] [^b132, i1 %730];
    cbr i1 %729(prob = 0.5), ^b134, ^b135;
^b134:
    i1 %732 = scmp neq i32 %548, i32 0;
    ubr ^b135;
^b135:
    i1 %733 = phi [^b133, i1 false] [^b134, i1 %732];
    i1 %734 = xor i1 %733, i1 true;
    i1 %735 = select i1 %731 ? i1 %734 : i1 false;
    i1 %736 = select i1 %735 ? i1 true : i1 %728;
    i1 %737 = select i1 %735 ? i1 %728 : i1 false;
    i1 %738 = xor i1 %737, i1 true;
    i1 %739 = select i1 %736 ? i1 %738 : i1 false;
    i32 %740 = zext i1 %739 to i32;
    cbr i1 %729(prob = 0.5), ^b136, ^b137;
^b136:
    i1 %741 = scmp neq i32 %548, i32 0;
    ubr ^b137;
^b137:
    i1 %742 = phi [^b135, i1 false] [^b136, i1 %741];
    i1 %743 = select i1 %742 ? i1 true : i1 %737;
    i1 %744 = scmp neq i32 %474, i32 0;
    cbr i1 %744(prob = 0.5), ^b139, ^b138;
^b138:
    i1 %745 = scmp neq i32 %553, i32 0;
    ubr ^b139;
^b139:
    i1 %746 = phi [^b137, i1 true] [^b138, i1 %745];
    cbr i1 %744(prob = 0.5), ^b140, ^b141;
^b140:
    i1 %747 = scmp neq i32 %553, i32 0;
    ubr ^b141;
^b141:
    i1 %748 = phi [^b139, i1 false] [^b140, i1 %747];
    i1 %749 = xor i1 %748, i1 true;
    i1 %750 = select i1 %746 ? i1 %749 : i1 false;
    i1 %751 = select i1 %750 ? i1 true : i1 %743;
    i1 %752 = select i1 %750 ? i1 %743 : i1 false;
    i1 %753 = xor i1 %752, i1 true;
    i1 %754 = select i1 %751 ? i1 %753 : i1 false;
    i32 %755 = zext i1 %754 to i32;
    cbr i1 %744(prob = 0.5), ^b142, ^b143;
^b142:
    i1 %756 = scmp neq i32 %553, i32 0;
    ubr ^b143;
^b143:
    i1 %757 = phi [^b141, i1 false] [^b142, i1 %756];
    i1 %758 = select i1 %757 ? i1 true : i1 %752;
    i1 %759 = scmp neq i32 %479, i32 0;
    cbr i1 %759(prob = 0.5), ^b145, ^b144;
^b144:
    i1 %760 = scmp neq i32 %558, i32 0;
    ubr ^b145;
^b145:
    i1 %761 = phi [^b143, i1 true] [^b144, i1 %760];
    cbr i1 %759(prob = 0.5), ^b146, ^b147;
^b146:
    i1 %762 = scmp neq i32 %558, i32 0;
    ubr ^b147;
^b147:
    i1 %763 = phi [^b145, i1 false] [^b146, i1 %762];
    i1 %764 = xor i1 %763, i1 true;
    i1 %765 = select i1 %761 ? i1 %764 : i1 false;
    i1 %766 = select i1 %765 ? i1 true : i1 %758;
    i1 %767 = select i1 %765 ? i1 %758 : i1 false;
    i1 %768 = xor i1 %767, i1 true;
    i1 %769 = select i1 %766 ? i1 %768 : i1 false;
    i32 %770 = zext i1 %769 to i32;
    cbr i1 %759(prob = 0.5), ^b148, ^b149;
^b148:
    i1 %771 = scmp neq i32 %558, i32 0;
    ubr ^b149;
^b149:
    i1 %772 = phi [^b147, i1 false] [^b148, i1 %771];
    i1 %773 = select i1 %772 ? i1 true : i1 %767;
    i1 %774 = scmp neq i32 %484, i32 0;
    cbr i1 %774(prob = 0.5), ^b151, ^b150;
^b150:
    i1 %775 = scmp neq i32 %563, i32 0;
    ubr ^b151;
^b151:
    i1 %776 = phi [^b149, i1 true] [^b150, i1 %775];
    cbr i1 %774(prob = 0.5), ^b152, ^b153;
^b152:
    i1 %777 = scmp neq i32 %563, i32 0;
    ubr ^b153;
^b153:
    i1 %778 = phi [^b151, i1 false] [^b152, i1 %777];
    i1 %779 = xor i1 %778, i1 true;
    i1 %780 = select i1 %776 ? i1 %779 : i1 false;
    i1 %781 = select i1 %780 ? i1 true : i1 %773;
    i1 %782 = select i1 %780 ? i1 %773 : i1 false;
    i1 %783 = xor i1 %782, i1 true;
    i1 %784 = select i1 %781 ? i1 %783 : i1 false;
    i32 %785 = zext i1 %784 to i32;
    cbr i1 %774(prob = 0.5), ^b154, ^b155;
^b154:
    i1 %786 = scmp neq i32 %563, i32 0;
    ubr ^b155;
^b155:
    i1 %787 = phi [^b153, i1 false] [^b154, i1 %786];
    i1 %788 = select i1 %787 ? i1 true : i1 %782;
    i1 %789 = scmp neq i32 %489, i32 0;
    cbr i1 %789(prob = 0.5), ^b157, ^b156;
^b156:
    i1 %790 = scmp neq i32 %568, i32 0;
    ubr ^b157;
^b157:
    i1 %791 = phi [^b155, i1 true] [^b156, i1 %790];
    cbr i1 %789(prob = 0.5), ^b158, ^b159;
^b158:
    i1 %792 = scmp neq i32 %568, i32 0;
    ubr ^b159;
^b159:
    i1 %793 = phi [^b157, i1 false] [^b158, i1 %792];
    i1 %794 = xor i1 %793, i1 true;
    i1 %795 = select i1 %791 ? i1 %794 : i1 false;
    i1 %796 = select i1 %795 ? i1 true : i1 %788;
    i1 %797 = select i1 %795 ? i1 %788 : i1 false;
    i1 %798 = xor i1 %797, i1 true;
    i1 %799 = select i1 %796 ? i1 %798 : i1 false;
    i32 %800 = zext i1 %799 to i32;
    i32 %801 = mul i32 %800, i32 2;
    i32 %802 = add i32 %785, i32 %801;
    i32 %803 = mul i32 %802, i32 2;
    i32 %804 = add i32 %770, i32 %803;
    i32 %805 = mul i32 %804, i32 2;
    i32 %806 = add i32 %755, i32 %805;
    i32 %807 = mul i32 %806, i32 2;
    i32 %808 = add i32 %740, i32 %807;
    i32 %809 = mul i32 %808, i32 2;
    i32 %810 = add i32 %725, i32 %809;
    i32 %811 = mul i32 %810, i32 2;
    i32 %812 = add i32 %710, i32 %811;
    i32 %813 = mul i32 %812, i32 2;
    i32 %814 = add i32 %695, i32 %813;
    i32 %815 = mul i32 %814, i32 2;
    i32 %816 = add i32 %680, i32 %815;
    i32 %817 = mul i32 %816, i32 2;
    i32 %818 = add i32 %665, i32 %817;
    i32 %819 = mul i32 %818, i32 2;
    i32 %820 = add i32 %650, i32 %819;
    i32 %821 = mul i32 %820, i32 2;
    i32 %822 = add i32 %635, i32 %821;
    i32 %823 = mul i32 %822, i32 2;
    i32 %824 = add i32 %620, i32 %823;
    i32 %825 = mul i32 %824, i32 2;
    i32 %826 = add i32 %605, i32 %825;
    i32 %827 = mul i32 %826, i32 2;
    i32 %828 = add i32 %590, i32 %827;
    i32 %829 = mul i32 %828, i32 2;
    i32 %830 = add i32 %829, i32 %576;
    ubr ^b1;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = scmp lt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
^b:
    ret i32 0;
}
