internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp slt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i32 %2 = and i32 %1, i32 1;
    i1 %3 = icmp eq i32 %2, i32 0;
    i1 %4 = ztrunc i32 %n to i1;
    i1 %5 = and i1 %3, i1 %4;
    i1 %6 = ztrunc i32 %1 to i1;
    i1 %7 = or i1 %5, i1 %6;
    i32 %8 = sdiv i32 %n, i32 4;
    i32 %9 = and i32 %8, i32 1;
    i1 %10 = icmp eq i32 %9, i32 0;
    i1 %11 = and i1 %7, i1 %10;
    i1 %12 = ztrunc i32 %8 to i1;
    i1 %13 = or i1 %11, i1 %12;
    i32 %14 = sdiv i32 %n, i32 8;
    i32 %15 = and i32 %14, i32 1;
    i1 %16 = icmp eq i32 %15, i32 0;
    i1 %17 = and i1 %13, i1 %16;
    i1 %18 = ztrunc i32 %14 to i1;
    i1 %19 = or i1 %17, i1 %18;
    i32 %20 = sdiv i32 %n, i32 16;
    i32 %21 = and i32 %20, i32 1;
    i1 %22 = icmp eq i32 %21, i32 0;
    i1 %23 = and i1 %19, i1 %22;
    i1 %24 = ztrunc i32 %20 to i1;
    i1 %25 = or i1 %23, i1 %24;
    i32 %26 = sdiv i32 %n, i32 32;
    i32 %27 = and i32 %26, i32 1;
    i1 %28 = icmp eq i32 %27, i32 0;
    i1 %29 = and i1 %25, i1 %28;
    i1 %30 = ztrunc i32 %26 to i1;
    i1 %31 = or i1 %29, i1 %30;
    i32 %32 = sdiv i32 %n, i32 64;
    i32 %33 = and i32 %32, i32 1;
    i1 %34 = icmp eq i32 %33, i32 0;
    i1 %35 = and i1 %31, i1 %34;
    i1 %36 = ztrunc i32 %32 to i1;
    i1 %37 = or i1 %35, i1 %36;
    i32 %38 = sdiv i32 %n, i32 128;
    i32 %39 = and i32 %38, i32 1;
    i1 %40 = icmp eq i32 %39, i32 0;
    i1 %41 = and i1 %37, i1 %40;
    i1 %42 = ztrunc i32 %38 to i1;
    i1 %43 = or i1 %41, i1 %42;
    i32 %44 = sdiv i32 %n, i32 256;
    i32 %45 = and i32 %44, i32 1;
    i1 %46 = icmp eq i32 %45, i32 0;
    i1 %47 = and i1 %43, i1 %46;
    i1 %48 = ztrunc i32 %44 to i1;
    i1 %49 = or i1 %47, i1 %48;
    i32 %50 = sdiv i32 %n, i32 512;
    i32 %51 = and i32 %50, i32 1;
    i1 %52 = icmp eq i32 %51, i32 0;
    i1 %53 = and i1 %49, i1 %52;
    i1 %54 = ztrunc i32 %50 to i1;
    i1 %55 = or i1 %53, i1 %54;
    i32 %56 = sdiv i32 %n, i32 1024;
    i32 %57 = and i32 %56, i32 1;
    i1 %58 = icmp eq i32 %57, i32 0;
    i1 %59 = and i1 %55, i1 %58;
    i1 %60 = ztrunc i32 %56 to i1;
    i1 %61 = or i1 %59, i1 %60;
    i32 %62 = sdiv i32 %n, i32 2048;
    i32 %63 = and i32 %62, i32 1;
    i1 %64 = icmp eq i32 %63, i32 0;
    i1 %65 = and i1 %61, i1 %64;
    i1 %66 = ztrunc i32 %62 to i1;
    i1 %67 = or i1 %65, i1 %66;
    i32 %68 = sdiv i32 %n, i32 4096;
    i32 %69 = and i32 %68, i32 1;
    i1 %70 = icmp eq i32 %69, i32 0;
    i1 %71 = and i1 %67, i1 %70;
    i1 %72 = ztrunc i32 %68 to i1;
    i1 %73 = or i1 %71, i1 %72;
    i32 %74 = sdiv i32 %n, i32 8192;
    i32 %75 = and i32 %74, i32 1;
    i1 %76 = icmp eq i32 %75, i32 0;
    i1 %77 = and i1 %73, i1 %76;
    i1 %78 = ztrunc i32 %74 to i1;
    i1 %79 = or i1 %77, i1 %78;
    i32 %80 = sdiv i32 %n, i32 16384;
    i32 %81 = and i32 %80, i32 1;
    i1 %82 = icmp eq i32 %81, i32 0;
    i1 %83 = and i1 %79, i1 %82;
    i1 %84 = ztrunc i32 %80 to i1;
    i1 %85 = or i1 %83, i1 %84;
    i32 %86 = sdiv i32 %n, i32 32768;
    i32 %87 = and i32 %86, i32 1;
    i1 %88 = icmp eq i32 %87, i32 0;
    i1 %89 = and i1 %85, i1 %88;
    i1 %90 = xor i1 %89, i1 true;
    i1 %91 = or i1 %85, i1 %88;
    i1 %92 = and i1 %90, i1 %91;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = mul i32 %93, i32 2;
    i1 %95 = xor i1 %83, i1 true;
    i1 %96 = or i1 %79, i1 %82;
    i1 %97 = and i1 %95, i1 %96;
    i32 %98 = zext i1 %97 to i32;
    i32 %99 = add i32 %94, i32 %98;
    i32 %100 = mul i32 %99, i32 2;
    i1 %101 = xor i1 %77, i1 true;
    i1 %102 = or i1 %73, i1 %76;
    i1 %103 = and i1 %101, i1 %102;
    i32 %104 = zext i1 %103 to i32;
    i32 %105 = add i32 %100, i32 %104;
    i32 %106 = mul i32 %105, i32 2;
    i1 %107 = xor i1 %71, i1 true;
    i1 %108 = or i1 %67, i1 %70;
    i1 %109 = and i1 %107, i1 %108;
    i32 %110 = zext i1 %109 to i32;
    i32 %111 = add i32 %106, i32 %110;
    i32 %112 = mul i32 %111, i32 2;
    i1 %113 = xor i1 %65, i1 true;
    i1 %114 = or i1 %61, i1 %64;
    i1 %115 = and i1 %113, i1 %114;
    i32 %116 = zext i1 %115 to i32;
    i32 %117 = add i32 %112, i32 %116;
    i32 %118 = mul i32 %117, i32 2;
    i1 %119 = xor i1 %59, i1 true;
    i1 %120 = or i1 %55, i1 %58;
    i1 %121 = and i1 %119, i1 %120;
    i32 %122 = zext i1 %121 to i32;
    i32 %123 = add i32 %118, i32 %122;
    i32 %124 = mul i32 %123, i32 2;
    i1 %125 = xor i1 %53, i1 true;
    i1 %126 = or i1 %49, i1 %52;
    i1 %127 = and i1 %125, i1 %126;
    i32 %128 = zext i1 %127 to i32;
    i32 %129 = add i32 %124, i32 %128;
    i32 %130 = mul i32 %129, i32 2;
    i1 %131 = xor i1 %47, i1 true;
    i1 %132 = or i1 %43, i1 %46;
    i1 %133 = and i1 %131, i1 %132;
    i32 %134 = zext i1 %133 to i32;
    i32 %135 = add i32 %130, i32 %134;
    i32 %136 = mul i32 %135, i32 2;
    i1 %137 = xor i1 %41, i1 true;
    i1 %138 = or i1 %37, i1 %40;
    i1 %139 = and i1 %137, i1 %138;
    i32 %140 = zext i1 %139 to i32;
    i32 %141 = add i32 %136, i32 %140;
    i32 %142 = mul i32 %141, i32 2;
    i1 %143 = xor i1 %35, i1 true;
    i1 %144 = or i1 %31, i1 %34;
    i1 %145 = and i1 %143, i1 %144;
    i32 %146 = zext i1 %145 to i32;
    i32 %147 = add i32 %142, i32 %146;
    i32 %148 = mul i32 %147, i32 2;
    i1 %149 = xor i1 %29, i1 true;
    i1 %150 = or i1 %25, i1 %28;
    i1 %151 = and i1 %149, i1 %150;
    i32 %152 = zext i1 %151 to i32;
    i32 %153 = add i32 %148, i32 %152;
    i32 %154 = mul i32 %153, i32 2;
    i1 %155 = xor i1 %23, i1 true;
    i1 %156 = or i1 %19, i1 %22;
    i1 %157 = and i1 %155, i1 %156;
    i32 %158 = zext i1 %157 to i32;
    i32 %159 = add i32 %154, i32 %158;
    i32 %160 = mul i32 %159, i32 2;
    i1 %161 = xor i1 %17, i1 true;
    i1 %162 = or i1 %13, i1 %16;
    i1 %163 = and i1 %161, i1 %162;
    i32 %164 = zext i1 %163 to i32;
    i32 %165 = add i32 %160, i32 %164;
    i32 %166 = mul i32 %165, i32 2;
    i1 %167 = xor i1 %11, i1 true;
    i1 %168 = or i1 %7, i1 %10;
    i1 %169 = and i1 %167, i1 %168;
    i32 %170 = zext i1 %169 to i32;
    i32 %171 = add i32 %166, i32 %170;
    i32 %172 = mul i32 %171, i32 2;
    i1 %173 = xor i1 %5, i1 true;
    i1 %174 = or i1 %3, i1 %4;
    i1 %175 = and i1 %173, i1 %174;
    i32 %176 = zext i1 %175 to i32;
    i32 %177 = add i32 %172, i32 %176;
    i32 %178 = mul i32 %177, i32 2;
    i32 %179 = and i32 %n, i32 1;
    i1 %180 = icmp eq i32 %179, i32 0;
    i32 %181 = zext i1 %180 to i32;
    i32 %182 = add i32 %178, i32 %181;
    i32 %183 = call (i32) -> i32 @fib(i32 %182);
    i32 %184 = sdiv i32 %183, i32 2;
    i1 %185 = ztrunc i32 %184 to i1;
    i1 %186 = and i1 %6, i1 %10;
    i1 %187 = or i1 %12, i1 %186;
    i1 %188 = and i1 %16, i1 %187;
    i1 %189 = or i1 %18, i1 %188;
    i1 %190 = and i1 %22, i1 %189;
    i1 %191 = or i1 %24, i1 %190;
    i1 %192 = and i1 %28, i1 %191;
    i1 %193 = or i1 %30, i1 %192;
    i1 %194 = and i1 %34, i1 %193;
    i1 %195 = or i1 %36, i1 %194;
    i1 %196 = and i1 %40, i1 %195;
    i1 %197 = or i1 %42, i1 %196;
    i1 %198 = and i1 %46, i1 %197;
    i1 %199 = or i1 %48, i1 %198;
    i1 %200 = and i1 %52, i1 %199;
    i1 %201 = or i1 %54, i1 %200;
    i1 %202 = and i1 %58, i1 %201;
    i1 %203 = or i1 %60, i1 %202;
    i1 %204 = and i1 %64, i1 %203;
    i1 %205 = or i1 %66, i1 %204;
    i1 %206 = and i1 %70, i1 %205;
    i1 %207 = or i1 %72, i1 %206;
    i1 %208 = and i1 %76, i1 %207;
    i1 %209 = or i1 %78, i1 %208;
    i1 %210 = and i1 %82, i1 %209;
    i1 %211 = or i1 %84, i1 %210;
    i1 %212 = and i1 %88, i1 %211;
    i1 %213 = xor i1 %212, i1 true;
    i1 %214 = or i1 %88, i1 %211;
    i1 %215 = and i1 %213, i1 %214;
    i32 %216 = zext i1 %215 to i32;
    i32 %217 = mul i32 %216, i32 2;
    i1 %218 = xor i1 %210, i1 true;
    i1 %219 = or i1 %82, i1 %209;
    i1 %220 = and i1 %218, i1 %219;
    i32 %221 = zext i1 %220 to i32;
    i32 %222 = add i32 %217, i32 %221;
    i32 %223 = mul i32 %222, i32 2;
    i1 %224 = xor i1 %208, i1 true;
    i1 %225 = or i1 %76, i1 %207;
    i1 %226 = and i1 %224, i1 %225;
    i32 %227 = zext i1 %226 to i32;
    i32 %228 = add i32 %223, i32 %227;
    i32 %229 = mul i32 %228, i32 2;
    i1 %230 = xor i1 %206, i1 true;
    i1 %231 = or i1 %70, i1 %205;
    i1 %232 = and i1 %230, i1 %231;
    i32 %233 = zext i1 %232 to i32;
    i32 %234 = add i32 %229, i32 %233;
    i32 %235 = mul i32 %234, i32 2;
    i1 %236 = xor i1 %204, i1 true;
    i1 %237 = or i1 %64, i1 %203;
    i1 %238 = and i1 %236, i1 %237;
    i32 %239 = zext i1 %238 to i32;
    i32 %240 = add i32 %235, i32 %239;
    i32 %241 = mul i32 %240, i32 2;
    i1 %242 = xor i1 %202, i1 true;
    i1 %243 = or i1 %58, i1 %201;
    i1 %244 = and i1 %242, i1 %243;
    i32 %245 = zext i1 %244 to i32;
    i32 %246 = add i32 %241, i32 %245;
    i32 %247 = mul i32 %246, i32 2;
    i1 %248 = xor i1 %200, i1 true;
    i1 %249 = or i1 %52, i1 %199;
    i1 %250 = and i1 %248, i1 %249;
    i32 %251 = zext i1 %250 to i32;
    i32 %252 = add i32 %247, i32 %251;
    i32 %253 = mul i32 %252, i32 2;
    i1 %254 = xor i1 %198, i1 true;
    i1 %255 = or i1 %46, i1 %197;
    i1 %256 = and i1 %254, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = add i32 %253, i32 %257;
    i32 %259 = mul i32 %258, i32 2;
    i1 %260 = xor i1 %196, i1 true;
    i1 %261 = or i1 %40, i1 %195;
    i1 %262 = and i1 %260, i1 %261;
    i32 %263 = zext i1 %262 to i32;
    i32 %264 = add i32 %259, i32 %263;
    i32 %265 = mul i32 %264, i32 2;
    i1 %266 = xor i1 %194, i1 true;
    i1 %267 = or i1 %34, i1 %193;
    i1 %268 = and i1 %266, i1 %267;
    i32 %269 = zext i1 %268 to i32;
    i32 %270 = add i32 %265, i32 %269;
    i32 %271 = mul i32 %270, i32 2;
    i1 %272 = xor i1 %192, i1 true;
    i1 %273 = or i1 %28, i1 %191;
    i1 %274 = and i1 %272, i1 %273;
    i32 %275 = zext i1 %274 to i32;
    i32 %276 = add i32 %271, i32 %275;
    i32 %277 = mul i32 %276, i32 2;
    i1 %278 = xor i1 %190, i1 true;
    i1 %279 = or i1 %22, i1 %189;
    i1 %280 = and i1 %278, i1 %279;
    i32 %281 = zext i1 %280 to i32;
    i32 %282 = add i32 %277, i32 %281;
    i32 %283 = mul i32 %282, i32 2;
    i1 %284 = xor i1 %188, i1 true;
    i1 %285 = or i1 %16, i1 %187;
    i1 %286 = and i1 %284, i1 %285;
    i32 %287 = zext i1 %286 to i32;
    i32 %288 = add i32 %283, i32 %287;
    i32 %289 = mul i32 %288, i32 2;
    i1 %290 = xor i1 %186, i1 true;
    i1 %291 = or i1 %6, i1 %10;
    i1 %292 = and i1 %290, i1 %291;
    i32 %293 = zext i1 %292 to i32;
    i32 %294 = add i32 %289, i32 %293;
    i32 %295 = mul i32 %294, i32 2;
    i32 %296 = zext i1 %3 to i32;
    i32 %297 = add i32 %295, i32 %296;
    i32 %298 = mul i32 %297, i32 2;
    i32 %299 = add i32 %179, i32 %298;
    i32 %300 = call (i32) -> i32 @fib(i32 %299);
    i32 %301 = sdiv i32 %300, i32 2;
    i1 %302 = ztrunc i32 %301 to i1;
    i1 %303 = and i1 %185, i1 %302;
    i1 %304 = xor i1 %303, i1 true;
    i1 %305 = or i1 %185, i1 %302;
    i1 %306 = and i1 %304, i1 %305;
    i1 %307 = ztrunc i32 %183 to i1;
    i1 %308 = and i1 %306, i1 %307;
    i1 %309 = ztrunc i32 %300 to i1;
    i1 %310 = and i1 %308, i1 %309;
    i1 %311 = or i1 %303, i1 %310;
    i32 %312 = sdiv i32 %183, i32 4;
    i1 %313 = ztrunc i32 %312 to i1;
    i32 %314 = sdiv i32 %300, i32 4;
    i1 %315 = ztrunc i32 %314 to i1;
    i1 %316 = or i1 %313, i1 %315;
    i1 %317 = and i1 %311, i1 %316;
    i1 %318 = and i1 %313, i1 %315;
    i1 %319 = xor i1 %318, i1 true;
    i1 %320 = and i1 %317, i1 %319;
    i1 %321 = or i1 %318, i1 %320;
    i32 %322 = sdiv i32 %183, i32 8;
    i1 %323 = ztrunc i32 %322 to i1;
    i32 %324 = sdiv i32 %300, i32 8;
    i1 %325 = ztrunc i32 %324 to i1;
    i1 %326 = or i1 %323, i1 %325;
    i1 %327 = and i1 %321, i1 %326;
    i1 %328 = and i1 %323, i1 %325;
    i1 %329 = xor i1 %328, i1 true;
    i1 %330 = and i1 %327, i1 %329;
    i1 %331 = or i1 %328, i1 %330;
    i32 %332 = sdiv i32 %183, i32 16;
    i1 %333 = ztrunc i32 %332 to i1;
    i32 %334 = sdiv i32 %300, i32 16;
    i1 %335 = ztrunc i32 %334 to i1;
    i1 %336 = or i1 %333, i1 %335;
    i1 %337 = and i1 %331, i1 %336;
    i1 %338 = and i1 %333, i1 %335;
    i1 %339 = xor i1 %338, i1 true;
    i1 %340 = and i1 %337, i1 %339;
    i1 %341 = or i1 %338, i1 %340;
    i32 %342 = sdiv i32 %183, i32 32;
    i1 %343 = ztrunc i32 %342 to i1;
    i32 %344 = sdiv i32 %300, i32 32;
    i1 %345 = ztrunc i32 %344 to i1;
    i1 %346 = or i1 %343, i1 %345;
    i1 %347 = and i1 %341, i1 %346;
    i1 %348 = and i1 %343, i1 %345;
    i1 %349 = xor i1 %348, i1 true;
    i1 %350 = and i1 %347, i1 %349;
    i1 %351 = or i1 %348, i1 %350;
    i32 %352 = sdiv i32 %183, i32 64;
    i1 %353 = ztrunc i32 %352 to i1;
    i32 %354 = sdiv i32 %300, i32 64;
    i1 %355 = ztrunc i32 %354 to i1;
    i1 %356 = or i1 %353, i1 %355;
    i1 %357 = and i1 %351, i1 %356;
    i1 %358 = and i1 %353, i1 %355;
    i1 %359 = xor i1 %358, i1 true;
    i1 %360 = and i1 %357, i1 %359;
    i1 %361 = or i1 %358, i1 %360;
    i32 %362 = sdiv i32 %183, i32 128;
    i1 %363 = ztrunc i32 %362 to i1;
    i32 %364 = sdiv i32 %300, i32 128;
    i1 %365 = ztrunc i32 %364 to i1;
    i1 %366 = or i1 %363, i1 %365;
    i1 %367 = and i1 %361, i1 %366;
    i1 %368 = and i1 %363, i1 %365;
    i1 %369 = xor i1 %368, i1 true;
    i1 %370 = and i1 %367, i1 %369;
    i1 %371 = or i1 %368, i1 %370;
    i32 %372 = sdiv i32 %183, i32 256;
    i1 %373 = ztrunc i32 %372 to i1;
    i32 %374 = sdiv i32 %300, i32 256;
    i1 %375 = ztrunc i32 %374 to i1;
    i1 %376 = or i1 %373, i1 %375;
    i1 %377 = and i1 %371, i1 %376;
    i1 %378 = and i1 %373, i1 %375;
    i1 %379 = xor i1 %378, i1 true;
    i1 %380 = and i1 %377, i1 %379;
    i1 %381 = or i1 %378, i1 %380;
    i32 %382 = sdiv i32 %183, i32 512;
    i1 %383 = ztrunc i32 %382 to i1;
    i32 %384 = sdiv i32 %300, i32 512;
    i1 %385 = ztrunc i32 %384 to i1;
    i1 %386 = or i1 %383, i1 %385;
    i1 %387 = and i1 %381, i1 %386;
    i1 %388 = and i1 %383, i1 %385;
    i1 %389 = xor i1 %388, i1 true;
    i1 %390 = and i1 %387, i1 %389;
    i1 %391 = or i1 %388, i1 %390;
    i32 %392 = sdiv i32 %183, i32 1024;
    i1 %393 = ztrunc i32 %392 to i1;
    i32 %394 = sdiv i32 %300, i32 1024;
    i1 %395 = ztrunc i32 %394 to i1;
    i1 %396 = or i1 %393, i1 %395;
    i1 %397 = and i1 %391, i1 %396;
    i1 %398 = and i1 %393, i1 %395;
    i1 %399 = xor i1 %398, i1 true;
    i1 %400 = and i1 %397, i1 %399;
    i1 %401 = or i1 %398, i1 %400;
    i32 %402 = sdiv i32 %183, i32 2048;
    i1 %403 = ztrunc i32 %402 to i1;
    i32 %404 = sdiv i32 %300, i32 2048;
    i1 %405 = ztrunc i32 %404 to i1;
    i1 %406 = or i1 %403, i1 %405;
    i1 %407 = and i1 %401, i1 %406;
    i1 %408 = and i1 %403, i1 %405;
    i1 %409 = xor i1 %408, i1 true;
    i1 %410 = and i1 %407, i1 %409;
    i1 %411 = or i1 %408, i1 %410;
    i32 %412 = sdiv i32 %183, i32 4096;
    i1 %413 = ztrunc i32 %412 to i1;
    i32 %414 = sdiv i32 %300, i32 4096;
    i1 %415 = ztrunc i32 %414 to i1;
    i1 %416 = or i1 %413, i1 %415;
    i1 %417 = and i1 %411, i1 %416;
    i1 %418 = and i1 %413, i1 %415;
    i1 %419 = xor i1 %418, i1 true;
    i1 %420 = and i1 %417, i1 %419;
    i1 %421 = or i1 %418, i1 %420;
    i32 %422 = sdiv i32 %183, i32 8192;
    i1 %423 = ztrunc i32 %422 to i1;
    i32 %424 = sdiv i32 %300, i32 8192;
    i1 %425 = ztrunc i32 %424 to i1;
    i1 %426 = or i1 %423, i1 %425;
    i1 %427 = and i1 %421, i1 %426;
    i1 %428 = and i1 %423, i1 %425;
    i1 %429 = xor i1 %428, i1 true;
    i1 %430 = and i1 %427, i1 %429;
    i1 %431 = or i1 %428, i1 %430;
    i32 %432 = sdiv i32 %183, i32 16384;
    i1 %433 = ztrunc i32 %432 to i1;
    i32 %434 = sdiv i32 %300, i32 16384;
    i1 %435 = ztrunc i32 %434 to i1;
    i1 %436 = or i1 %433, i1 %435;
    i1 %437 = and i1 %431, i1 %436;
    i1 %438 = and i1 %433, i1 %435;
    i1 %439 = xor i1 %438, i1 true;
    i1 %440 = and i1 %437, i1 %439;
    i1 %441 = or i1 %438, i1 %440;
    i32 %442 = sdiv i32 %183, i32 32768;
    i1 %443 = ztrunc i32 %442 to i1;
    i32 %444 = sdiv i32 %300, i32 32768;
    i1 %445 = ztrunc i32 %444 to i1;
    i1 %446 = or i1 %443, i1 %445;
    i1 %447 = and i1 %441, i1 %446;
    i1 %448 = and i1 %443, i1 %445;
    i1 %449 = xor i1 %448, i1 true;
    i1 %450 = and i1 %447, i1 %449;
    i1 %451 = xor i1 %450, i1 true;
    i1 %452 = and i1 %446, i1 %449;
    i1 %453 = or i1 %441, i1 %452;
    i1 %454 = and i1 %451, i1 %453;
    i32 %455 = zext i1 %454 to i32;
    i32 %456 = mul i32 %455, i32 2;
    i1 %457 = xor i1 %440, i1 true;
    i1 %458 = and i1 %436, i1 %439;
    i1 %459 = or i1 %431, i1 %458;
    i1 %460 = and i1 %457, i1 %459;
    i32 %461 = zext i1 %460 to i32;
    i32 %462 = add i32 %456, i32 %461;
    i32 %463 = mul i32 %462, i32 2;
    i1 %464 = xor i1 %430, i1 true;
    i1 %465 = and i1 %426, i1 %429;
    i1 %466 = or i1 %421, i1 %465;
    i1 %467 = and i1 %464, i1 %466;
    i32 %468 = zext i1 %467 to i32;
    i32 %469 = add i32 %463, i32 %468;
    i32 %470 = mul i32 %469, i32 2;
    i1 %471 = xor i1 %420, i1 true;
    i1 %472 = and i1 %416, i1 %419;
    i1 %473 = or i1 %411, i1 %472;
    i1 %474 = and i1 %471, i1 %473;
    i32 %475 = zext i1 %474 to i32;
    i32 %476 = add i32 %470, i32 %475;
    i32 %477 = mul i32 %476, i32 2;
    i1 %478 = xor i1 %410, i1 true;
    i1 %479 = and i1 %406, i1 %409;
    i1 %480 = or i1 %401, i1 %479;
    i1 %481 = and i1 %478, i1 %480;
    i32 %482 = zext i1 %481 to i32;
    i32 %483 = add i32 %477, i32 %482;
    i32 %484 = mul i32 %483, i32 2;
    i1 %485 = xor i1 %400, i1 true;
    i1 %486 = and i1 %396, i1 %399;
    i1 %487 = or i1 %391, i1 %486;
    i1 %488 = and i1 %485, i1 %487;
    i32 %489 = zext i1 %488 to i32;
    i32 %490 = add i32 %484, i32 %489;
    i32 %491 = mul i32 %490, i32 2;
    i1 %492 = xor i1 %390, i1 true;
    i1 %493 = and i1 %386, i1 %389;
    i1 %494 = or i1 %381, i1 %493;
    i1 %495 = and i1 %492, i1 %494;
    i32 %496 = zext i1 %495 to i32;
    i32 %497 = add i32 %491, i32 %496;
    i32 %498 = mul i32 %497, i32 2;
    i1 %499 = xor i1 %380, i1 true;
    i1 %500 = and i1 %376, i1 %379;
    i1 %501 = or i1 %371, i1 %500;
    i1 %502 = and i1 %499, i1 %501;
    i32 %503 = zext i1 %502 to i32;
    i32 %504 = add i32 %498, i32 %503;
    i32 %505 = mul i32 %504, i32 2;
    i1 %506 = xor i1 %370, i1 true;
    i1 %507 = and i1 %366, i1 %369;
    i1 %508 = or i1 %361, i1 %507;
    i1 %509 = and i1 %506, i1 %508;
    i32 %510 = zext i1 %509 to i32;
    i32 %511 = add i32 %505, i32 %510;
    i32 %512 = mul i32 %511, i32 2;
    i1 %513 = xor i1 %360, i1 true;
    i1 %514 = and i1 %356, i1 %359;
    i1 %515 = or i1 %351, i1 %514;
    i1 %516 = and i1 %513, i1 %515;
    i32 %517 = zext i1 %516 to i32;
    i32 %518 = add i32 %512, i32 %517;
    i32 %519 = mul i32 %518, i32 2;
    i1 %520 = xor i1 %350, i1 true;
    i1 %521 = and i1 %346, i1 %349;
    i1 %522 = or i1 %341, i1 %521;
    i1 %523 = and i1 %520, i1 %522;
    i32 %524 = zext i1 %523 to i32;
    i32 %525 = add i32 %519, i32 %524;
    i32 %526 = mul i32 %525, i32 2;
    i1 %527 = xor i1 %340, i1 true;
    i1 %528 = and i1 %336, i1 %339;
    i1 %529 = or i1 %331, i1 %528;
    i1 %530 = and i1 %527, i1 %529;
    i32 %531 = zext i1 %530 to i32;
    i32 %532 = add i32 %526, i32 %531;
    i32 %533 = mul i32 %532, i32 2;
    i1 %534 = xor i1 %330, i1 true;
    i1 %535 = and i1 %326, i1 %329;
    i1 %536 = or i1 %321, i1 %535;
    i1 %537 = and i1 %534, i1 %536;
    i32 %538 = zext i1 %537 to i32;
    i32 %539 = add i32 %533, i32 %538;
    i32 %540 = mul i32 %539, i32 2;
    i1 %541 = xor i1 %320, i1 true;
    i1 %542 = and i1 %316, i1 %319;
    i1 %543 = or i1 %311, i1 %542;
    i1 %544 = and i1 %541, i1 %543;
    i32 %545 = zext i1 %544 to i32;
    i32 %546 = add i32 %540, i32 %545;
    i32 %547 = mul i32 %546, i32 2;
    i1 %548 = xor i1 %310, i1 true;
    i1 %549 = and i1 %307, i1 %309;
    i1 %550 = or i1 %306, i1 %549;
    i1 %551 = and i1 %548, i1 %550;
    i32 %552 = zext i1 %551 to i32;
    i32 %553 = add i32 %547, i32 %552;
    i32 %554 = mul i32 %553, i32 2;
    i1 %555 = xor i1 %549, i1 true;
    i1 %556 = or i1 %307, i1 %309;
    i1 %557 = and i1 %555, i1 %556;
    i32 %558 = zext i1 %557 to i32;
    i32 %559 = add i32 %554, i32 %558;
    ubr ^b1;
  ^b1:
    i32 %560 = phi [^entry, i32 1] [^b, i32 %559];
    ret i32 %560;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = icmp slt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
