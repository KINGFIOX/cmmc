internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    [4084 * i32]* %0 = ptrcast [4084 * i32]* @lut_fib to [4084 * i32]*;
    i32* %1 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %0, i32 %n, i32 0);
    i32* %2 = getelementptr &(i32* %1)[i64 3];
    i32 %3 = load i32* %2;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32* %5 = getelementptr &(i32* %1)[i64 2];
    cbr i1 %4(prob = 0.9), ^b, ^entry1;
  ^b:
    i32 %6 = load i32* %5;
    ubr ^b3;
  ^entry1:
    i1 %7 = icmp slt i32 %n, i32 3;
    cbr i1 %7(prob = 0.5), ^b1, ^b2;
  ^b1:
    store i32* %2 with i32 1;
    store i32* %5 with i32 1;
    ubr ^b3;
  ^b2:
    i32 %8 = sdiv i32 %n, i32 2;
    i1 %9 = ztrunc i32 %8 to i1;
    i1 %10 = xor i1 %9, i1 true;
    i1 %11 = ztrunc i32 %n to i1;
    i1 %12 = and i1 %10, i1 %11;
    i1 %13 = or i1 %9, i1 %12;
    i32 %14 = sdiv i32 %n, i32 4;
    i1 %15 = ztrunc i32 %14 to i1;
    i1 %16 = xor i1 %15, i1 true;
    i1 %17 = and i1 %13, i1 %16;
    i1 %18 = or i1 %15, i1 %17;
    i32 %19 = sdiv i32 %n, i32 8;
    i1 %20 = ztrunc i32 %19 to i1;
    i1 %21 = xor i1 %20, i1 true;
    i1 %22 = and i1 %18, i1 %21;
    i1 %23 = or i1 %20, i1 %22;
    i32 %24 = sdiv i32 %n, i32 16;
    i1 %25 = ztrunc i32 %24 to i1;
    i1 %26 = xor i1 %25, i1 true;
    i1 %27 = and i1 %23, i1 %26;
    i1 %28 = or i1 %25, i1 %27;
    i32 %29 = sdiv i32 %n, i32 32;
    i1 %30 = ztrunc i32 %29 to i1;
    i1 %31 = xor i1 %30, i1 true;
    i1 %32 = and i1 %28, i1 %31;
    i1 %33 = or i1 %30, i1 %32;
    i32 %34 = sdiv i32 %n, i32 64;
    i1 %35 = ztrunc i32 %34 to i1;
    i1 %36 = xor i1 %35, i1 true;
    i1 %37 = and i1 %33, i1 %36;
    i1 %38 = or i1 %35, i1 %37;
    i32 %39 = sdiv i32 %n, i32 128;
    i1 %40 = ztrunc i32 %39 to i1;
    i1 %41 = xor i1 %40, i1 true;
    i1 %42 = and i1 %38, i1 %41;
    i1 %43 = or i1 %40, i1 %42;
    i32 %44 = sdiv i32 %n, i32 256;
    i1 %45 = ztrunc i32 %44 to i1;
    i1 %46 = xor i1 %45, i1 true;
    i1 %47 = and i1 %43, i1 %46;
    i1 %48 = or i1 %45, i1 %47;
    i32 %49 = sdiv i32 %n, i32 512;
    i1 %50 = ztrunc i32 %49 to i1;
    i1 %51 = xor i1 %50, i1 true;
    i1 %52 = and i1 %48, i1 %51;
    i1 %53 = or i1 %50, i1 %52;
    i32 %54 = sdiv i32 %n, i32 1024;
    i1 %55 = ztrunc i32 %54 to i1;
    i1 %56 = xor i1 %55, i1 true;
    i1 %57 = and i1 %53, i1 %56;
    i1 %58 = or i1 %55, i1 %57;
    i32 %59 = sdiv i32 %n, i32 2048;
    i1 %60 = ztrunc i32 %59 to i1;
    i1 %61 = xor i1 %60, i1 true;
    i1 %62 = and i1 %58, i1 %61;
    i1 %63 = or i1 %60, i1 %62;
    i32 %64 = sdiv i32 %n, i32 4096;
    i1 %65 = ztrunc i32 %64 to i1;
    i1 %66 = xor i1 %65, i1 true;
    i1 %67 = and i1 %63, i1 %66;
    i1 %68 = or i1 %65, i1 %67;
    i32 %69 = sdiv i32 %n, i32 8192;
    i1 %70 = ztrunc i32 %69 to i1;
    i1 %71 = xor i1 %70, i1 true;
    i1 %72 = and i1 %68, i1 %71;
    i1 %73 = or i1 %70, i1 %72;
    i32 %74 = sdiv i32 %n, i32 16384;
    i1 %75 = ztrunc i32 %74 to i1;
    i1 %76 = xor i1 %75, i1 true;
    i1 %77 = and i1 %73, i1 %76;
    i1 %78 = or i1 %75, i1 %77;
    i32 %79 = sdiv i32 %n, i32 32768;
    i1 %80 = ztrunc i32 %79 to i1;
    i1 %81 = xor i1 %80, i1 true;
    i1 %82 = and i1 %78, i1 %81;
    i1 %83 = xor i1 %82, i1 true;
    i1 %84 = or i1 %77, i1 %81;
    i1 %85 = or i1 %75, i1 %84;
    i1 %86 = and i1 %83, i1 %85;
    i32 %87 = zext i1 %86 to i32;
    i32 %88 = mul i32 %87, i32 2;
    i1 %89 = xor i1 %77, i1 true;
    i1 %90 = or i1 %72, i1 %76;
    i1 %91 = or i1 %70, i1 %90;
    i1 %92 = and i1 %89, i1 %91;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = add i32 %88, i32 %93;
    i32 %95 = mul i32 %94, i32 2;
    i1 %96 = xor i1 %72, i1 true;
    i1 %97 = or i1 %67, i1 %71;
    i1 %98 = or i1 %65, i1 %97;
    i1 %99 = and i1 %96, i1 %98;
    i32 %100 = zext i1 %99 to i32;
    i32 %101 = add i32 %95, i32 %100;
    i32 %102 = mul i32 %101, i32 2;
    i1 %103 = xor i1 %67, i1 true;
    i1 %104 = or i1 %62, i1 %66;
    i1 %105 = or i1 %60, i1 %104;
    i1 %106 = and i1 %103, i1 %105;
    i32 %107 = zext i1 %106 to i32;
    i32 %108 = add i32 %102, i32 %107;
    i32 %109 = mul i32 %108, i32 2;
    i1 %110 = xor i1 %62, i1 true;
    i1 %111 = or i1 %57, i1 %61;
    i1 %112 = or i1 %55, i1 %111;
    i1 %113 = and i1 %110, i1 %112;
    i32 %114 = zext i1 %113 to i32;
    i32 %115 = add i32 %109, i32 %114;
    i32 %116 = mul i32 %115, i32 2;
    i1 %117 = xor i1 %57, i1 true;
    i1 %118 = or i1 %52, i1 %56;
    i1 %119 = or i1 %50, i1 %118;
    i1 %120 = and i1 %117, i1 %119;
    i32 %121 = zext i1 %120 to i32;
    i32 %122 = add i32 %116, i32 %121;
    i32 %123 = mul i32 %122, i32 2;
    i1 %124 = xor i1 %52, i1 true;
    i1 %125 = or i1 %47, i1 %51;
    i1 %126 = or i1 %45, i1 %125;
    i1 %127 = and i1 %124, i1 %126;
    i32 %128 = zext i1 %127 to i32;
    i32 %129 = add i32 %123, i32 %128;
    i32 %130 = mul i32 %129, i32 2;
    i1 %131 = xor i1 %47, i1 true;
    i1 %132 = or i1 %42, i1 %46;
    i1 %133 = or i1 %40, i1 %132;
    i1 %134 = and i1 %131, i1 %133;
    i32 %135 = zext i1 %134 to i32;
    i32 %136 = add i32 %130, i32 %135;
    i32 %137 = mul i32 %136, i32 2;
    i1 %138 = xor i1 %42, i1 true;
    i1 %139 = or i1 %37, i1 %41;
    i1 %140 = or i1 %35, i1 %139;
    i1 %141 = and i1 %138, i1 %140;
    i32 %142 = zext i1 %141 to i32;
    i32 %143 = add i32 %137, i32 %142;
    i32 %144 = mul i32 %143, i32 2;
    i1 %145 = xor i1 %37, i1 true;
    i1 %146 = or i1 %32, i1 %36;
    i1 %147 = or i1 %30, i1 %146;
    i1 %148 = and i1 %145, i1 %147;
    i32 %149 = zext i1 %148 to i32;
    i32 %150 = add i32 %144, i32 %149;
    i32 %151 = mul i32 %150, i32 2;
    i1 %152 = xor i1 %32, i1 true;
    i1 %153 = or i1 %27, i1 %31;
    i1 %154 = or i1 %25, i1 %153;
    i1 %155 = and i1 %152, i1 %154;
    i32 %156 = zext i1 %155 to i32;
    i32 %157 = add i32 %151, i32 %156;
    i32 %158 = mul i32 %157, i32 2;
    i1 %159 = xor i1 %27, i1 true;
    i1 %160 = or i1 %22, i1 %26;
    i1 %161 = or i1 %20, i1 %160;
    i1 %162 = and i1 %159, i1 %161;
    i32 %163 = zext i1 %162 to i32;
    i32 %164 = add i32 %158, i32 %163;
    i32 %165 = mul i32 %164, i32 2;
    i1 %166 = xor i1 %22, i1 true;
    i1 %167 = or i1 %17, i1 %21;
    i1 %168 = or i1 %15, i1 %167;
    i1 %169 = and i1 %166, i1 %168;
    i32 %170 = zext i1 %169 to i32;
    i32 %171 = add i32 %165, i32 %170;
    i32 %172 = mul i32 %171, i32 2;
    i1 %173 = xor i1 %17, i1 true;
    i1 %174 = or i1 %12, i1 %16;
    i1 %175 = or i1 %9, i1 %174;
    i1 %176 = and i1 %173, i1 %175;
    i32 %177 = zext i1 %176 to i32;
    i32 %178 = add i32 %172, i32 %177;
    i32 %179 = mul i32 %178, i32 2;
    i1 %180 = xor i1 %12, i1 true;
    i1 %181 = or i1 %10, i1 %11;
    i1 %182 = and i1 %180, i1 %181;
    i32 %183 = zext i1 %182 to i32;
    i32 %184 = add i32 %179, i32 %183;
    i32 %185 = mul i32 %184, i32 2;
    i1 %186 = xor i1 %11, i1 true;
    i32 %187 = zext i1 %186 to i32;
    i32 %188 = add i32 %185, i32 %187;
    i32 %189 = call (i32) -> i32 @fib(i32 %188);
    i32 %190 = sdiv i32 %189, i32 2;
    i1 %191 = ztrunc i32 %190 to i1;
    i1 %192 = and i1 %9, i1 %16;
    i1 %193 = or i1 %15, i1 %192;
    i1 %194 = and i1 %21, i1 %193;
    i1 %195 = or i1 %20, i1 %194;
    i1 %196 = and i1 %26, i1 %195;
    i1 %197 = or i1 %25, i1 %196;
    i1 %198 = and i1 %31, i1 %197;
    i1 %199 = or i1 %30, i1 %198;
    i1 %200 = and i1 %36, i1 %199;
    i1 %201 = or i1 %35, i1 %200;
    i1 %202 = and i1 %41, i1 %201;
    i1 %203 = or i1 %40, i1 %202;
    i1 %204 = and i1 %46, i1 %203;
    i1 %205 = or i1 %45, i1 %204;
    i1 %206 = and i1 %51, i1 %205;
    i1 %207 = or i1 %50, i1 %206;
    i1 %208 = and i1 %56, i1 %207;
    i1 %209 = or i1 %55, i1 %208;
    i1 %210 = and i1 %61, i1 %209;
    i1 %211 = or i1 %60, i1 %210;
    i1 %212 = and i1 %66, i1 %211;
    i1 %213 = or i1 %65, i1 %212;
    i1 %214 = and i1 %71, i1 %213;
    i1 %215 = or i1 %70, i1 %214;
    i1 %216 = and i1 %76, i1 %215;
    i1 %217 = or i1 %75, i1 %216;
    i1 %218 = and i1 %81, i1 %217;
    i1 %219 = xor i1 %218, i1 true;
    i1 %220 = or i1 %81, i1 %216;
    i1 %221 = or i1 %75, i1 %220;
    i1 %222 = and i1 %219, i1 %221;
    i32 %223 = zext i1 %222 to i32;
    i32 %224 = mul i32 %223, i32 2;
    i1 %225 = xor i1 %216, i1 true;
    i1 %226 = or i1 %76, i1 %214;
    i1 %227 = or i1 %70, i1 %226;
    i1 %228 = and i1 %225, i1 %227;
    i32 %229 = zext i1 %228 to i32;
    i32 %230 = add i32 %224, i32 %229;
    i32 %231 = mul i32 %230, i32 2;
    i1 %232 = xor i1 %214, i1 true;
    i1 %233 = or i1 %71, i1 %212;
    i1 %234 = or i1 %65, i1 %233;
    i1 %235 = and i1 %232, i1 %234;
    i32 %236 = zext i1 %235 to i32;
    i32 %237 = add i32 %231, i32 %236;
    i32 %238 = mul i32 %237, i32 2;
    i1 %239 = xor i1 %212, i1 true;
    i1 %240 = or i1 %66, i1 %210;
    i1 %241 = or i1 %60, i1 %240;
    i1 %242 = and i1 %239, i1 %241;
    i32 %243 = zext i1 %242 to i32;
    i32 %244 = add i32 %238, i32 %243;
    i32 %245 = mul i32 %244, i32 2;
    i1 %246 = xor i1 %210, i1 true;
    i1 %247 = or i1 %61, i1 %208;
    i1 %248 = or i1 %55, i1 %247;
    i1 %249 = and i1 %246, i1 %248;
    i32 %250 = zext i1 %249 to i32;
    i32 %251 = add i32 %245, i32 %250;
    i32 %252 = mul i32 %251, i32 2;
    i1 %253 = xor i1 %208, i1 true;
    i1 %254 = or i1 %56, i1 %206;
    i1 %255 = or i1 %50, i1 %254;
    i1 %256 = and i1 %253, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = add i32 %252, i32 %257;
    i32 %259 = mul i32 %258, i32 2;
    i1 %260 = xor i1 %206, i1 true;
    i1 %261 = or i1 %51, i1 %204;
    i1 %262 = or i1 %45, i1 %261;
    i1 %263 = and i1 %260, i1 %262;
    i32 %264 = zext i1 %263 to i32;
    i32 %265 = add i32 %259, i32 %264;
    i32 %266 = mul i32 %265, i32 2;
    i1 %267 = xor i1 %204, i1 true;
    i1 %268 = or i1 %46, i1 %202;
    i1 %269 = or i1 %40, i1 %268;
    i1 %270 = and i1 %267, i1 %269;
    i32 %271 = zext i1 %270 to i32;
    i32 %272 = add i32 %266, i32 %271;
    i32 %273 = mul i32 %272, i32 2;
    i1 %274 = xor i1 %202, i1 true;
    i1 %275 = or i1 %41, i1 %200;
    i1 %276 = or i1 %35, i1 %275;
    i1 %277 = and i1 %274, i1 %276;
    i32 %278 = zext i1 %277 to i32;
    i32 %279 = add i32 %273, i32 %278;
    i32 %280 = mul i32 %279, i32 2;
    i1 %281 = xor i1 %200, i1 true;
    i1 %282 = or i1 %36, i1 %198;
    i1 %283 = or i1 %30, i1 %282;
    i1 %284 = and i1 %281, i1 %283;
    i32 %285 = zext i1 %284 to i32;
    i32 %286 = add i32 %280, i32 %285;
    i32 %287 = mul i32 %286, i32 2;
    i1 %288 = xor i1 %198, i1 true;
    i1 %289 = or i1 %31, i1 %196;
    i1 %290 = or i1 %25, i1 %289;
    i1 %291 = and i1 %288, i1 %290;
    i32 %292 = zext i1 %291 to i32;
    i32 %293 = add i32 %287, i32 %292;
    i32 %294 = mul i32 %293, i32 2;
    i1 %295 = xor i1 %196, i1 true;
    i1 %296 = or i1 %26, i1 %194;
    i1 %297 = or i1 %20, i1 %296;
    i1 %298 = and i1 %295, i1 %297;
    i32 %299 = zext i1 %298 to i32;
    i32 %300 = add i32 %294, i32 %299;
    i32 %301 = mul i32 %300, i32 2;
    i1 %302 = xor i1 %194, i1 true;
    i1 %303 = or i1 %21, i1 %192;
    i1 %304 = or i1 %15, i1 %303;
    i1 %305 = and i1 %302, i1 %304;
    i32 %306 = zext i1 %305 to i32;
    i32 %307 = add i32 %301, i32 %306;
    i32 %308 = mul i32 %307, i32 2;
    i1 %309 = xor i1 %192, i1 true;
    i1 %310 = or i1 %9, i1 %16;
    i1 %311 = and i1 %309, i1 %310;
    i32 %312 = zext i1 %311 to i32;
    i32 %313 = add i32 %308, i32 %312;
    i32 %314 = mul i32 %313, i32 2;
    i32 %315 = zext i1 %10 to i32;
    i32 %316 = add i32 %314, i32 %315;
    i32 %317 = mul i32 %316, i32 2;
    i32 %318 = and i32 %n, i32 1;
    i32 %319 = add i32 %317, i32 %318;
    i32 %320 = call (i32) -> i32 @fib(i32 %319);
    i32 %321 = sdiv i32 %320, i32 2;
    i1 %322 = ztrunc i32 %321 to i1;
    i1 %323 = and i1 %191, i1 %322;
    i1 %324 = xor i1 %323, i1 true;
    i1 %325 = or i1 %191, i1 %322;
    i1 %326 = and i1 %324, i1 %325;
    i1 %327 = ztrunc i32 %189 to i1;
    i1 %328 = and i1 %326, i1 %327;
    i1 %329 = ztrunc i32 %320 to i1;
    i1 %330 = and i1 %328, i1 %329;
    i1 %331 = or i1 %323, i1 %330;
    i32 %332 = sdiv i32 %189, i32 4;
    i1 %333 = ztrunc i32 %332 to i1;
    i32 %334 = sdiv i32 %320, i32 4;
    i1 %335 = ztrunc i32 %334 to i1;
    i1 %336 = or i1 %333, i1 %335;
    i1 %337 = and i1 %331, i1 %336;
    i1 %338 = and i1 %333, i1 %335;
    i1 %339 = xor i1 %338, i1 true;
    i1 %340 = and i1 %337, i1 %339;
    i1 %341 = or i1 %338, i1 %340;
    i32 %342 = sdiv i32 %189, i32 8;
    i1 %343 = ztrunc i32 %342 to i1;
    i32 %344 = sdiv i32 %320, i32 8;
    i1 %345 = ztrunc i32 %344 to i1;
    i1 %346 = or i1 %343, i1 %345;
    i1 %347 = and i1 %341, i1 %346;
    i1 %348 = and i1 %343, i1 %345;
    i1 %349 = xor i1 %348, i1 true;
    i1 %350 = and i1 %347, i1 %349;
    i1 %351 = or i1 %348, i1 %350;
    i32 %352 = sdiv i32 %189, i32 16;
    i1 %353 = ztrunc i32 %352 to i1;
    i32 %354 = sdiv i32 %320, i32 16;
    i1 %355 = ztrunc i32 %354 to i1;
    i1 %356 = or i1 %353, i1 %355;
    i1 %357 = and i1 %351, i1 %356;
    i1 %358 = and i1 %353, i1 %355;
    i1 %359 = xor i1 %358, i1 true;
    i1 %360 = and i1 %357, i1 %359;
    i1 %361 = or i1 %358, i1 %360;
    i32 %362 = sdiv i32 %189, i32 32;
    i1 %363 = ztrunc i32 %362 to i1;
    i32 %364 = sdiv i32 %320, i32 32;
    i1 %365 = ztrunc i32 %364 to i1;
    i1 %366 = or i1 %363, i1 %365;
    i1 %367 = and i1 %361, i1 %366;
    i1 %368 = and i1 %363, i1 %365;
    i1 %369 = xor i1 %368, i1 true;
    i1 %370 = and i1 %367, i1 %369;
    i1 %371 = or i1 %368, i1 %370;
    i32 %372 = sdiv i32 %189, i32 64;
    i1 %373 = ztrunc i32 %372 to i1;
    i32 %374 = sdiv i32 %320, i32 64;
    i1 %375 = ztrunc i32 %374 to i1;
    i1 %376 = or i1 %373, i1 %375;
    i1 %377 = and i1 %371, i1 %376;
    i1 %378 = and i1 %373, i1 %375;
    i1 %379 = xor i1 %378, i1 true;
    i1 %380 = and i1 %377, i1 %379;
    i1 %381 = or i1 %378, i1 %380;
    i32 %382 = sdiv i32 %189, i32 128;
    i1 %383 = ztrunc i32 %382 to i1;
    i32 %384 = sdiv i32 %320, i32 128;
    i1 %385 = ztrunc i32 %384 to i1;
    i1 %386 = or i1 %383, i1 %385;
    i1 %387 = and i1 %381, i1 %386;
    i1 %388 = and i1 %383, i1 %385;
    i1 %389 = xor i1 %388, i1 true;
    i1 %390 = and i1 %387, i1 %389;
    i1 %391 = or i1 %388, i1 %390;
    i32 %392 = sdiv i32 %189, i32 256;
    i1 %393 = ztrunc i32 %392 to i1;
    i32 %394 = sdiv i32 %320, i32 256;
    i1 %395 = ztrunc i32 %394 to i1;
    i1 %396 = or i1 %393, i1 %395;
    i1 %397 = and i1 %391, i1 %396;
    i1 %398 = and i1 %393, i1 %395;
    i1 %399 = xor i1 %398, i1 true;
    i1 %400 = and i1 %397, i1 %399;
    i1 %401 = or i1 %398, i1 %400;
    i32 %402 = sdiv i32 %189, i32 512;
    i1 %403 = ztrunc i32 %402 to i1;
    i32 %404 = sdiv i32 %320, i32 512;
    i1 %405 = ztrunc i32 %404 to i1;
    i1 %406 = or i1 %403, i1 %405;
    i1 %407 = and i1 %401, i1 %406;
    i1 %408 = and i1 %403, i1 %405;
    i1 %409 = xor i1 %408, i1 true;
    i1 %410 = and i1 %407, i1 %409;
    i1 %411 = or i1 %408, i1 %410;
    i32 %412 = sdiv i32 %189, i32 1024;
    i1 %413 = ztrunc i32 %412 to i1;
    i32 %414 = sdiv i32 %320, i32 1024;
    i1 %415 = ztrunc i32 %414 to i1;
    i1 %416 = or i1 %413, i1 %415;
    i1 %417 = and i1 %411, i1 %416;
    i1 %418 = and i1 %413, i1 %415;
    i1 %419 = xor i1 %418, i1 true;
    i1 %420 = and i1 %417, i1 %419;
    i1 %421 = or i1 %418, i1 %420;
    i32 %422 = sdiv i32 %189, i32 2048;
    i1 %423 = ztrunc i32 %422 to i1;
    i32 %424 = sdiv i32 %320, i32 2048;
    i1 %425 = ztrunc i32 %424 to i1;
    i1 %426 = or i1 %423, i1 %425;
    i1 %427 = and i1 %421, i1 %426;
    i1 %428 = and i1 %423, i1 %425;
    i1 %429 = xor i1 %428, i1 true;
    i1 %430 = and i1 %427, i1 %429;
    i1 %431 = or i1 %428, i1 %430;
    i32 %432 = sdiv i32 %189, i32 4096;
    i1 %433 = ztrunc i32 %432 to i1;
    i32 %434 = sdiv i32 %320, i32 4096;
    i1 %435 = ztrunc i32 %434 to i1;
    i1 %436 = or i1 %433, i1 %435;
    i1 %437 = and i1 %431, i1 %436;
    i1 %438 = and i1 %433, i1 %435;
    i1 %439 = xor i1 %438, i1 true;
    i1 %440 = and i1 %437, i1 %439;
    i1 %441 = or i1 %438, i1 %440;
    i32 %442 = sdiv i32 %189, i32 8192;
    i1 %443 = ztrunc i32 %442 to i1;
    i32 %444 = sdiv i32 %320, i32 8192;
    i1 %445 = ztrunc i32 %444 to i1;
    i1 %446 = or i1 %443, i1 %445;
    i1 %447 = and i1 %441, i1 %446;
    i1 %448 = and i1 %443, i1 %445;
    i1 %449 = xor i1 %448, i1 true;
    i1 %450 = and i1 %447, i1 %449;
    i1 %451 = or i1 %448, i1 %450;
    i32 %452 = sdiv i32 %189, i32 16384;
    i1 %453 = ztrunc i32 %452 to i1;
    i32 %454 = sdiv i32 %320, i32 16384;
    i1 %455 = ztrunc i32 %454 to i1;
    i1 %456 = or i1 %453, i1 %455;
    i1 %457 = and i1 %451, i1 %456;
    i1 %458 = and i1 %453, i1 %455;
    i1 %459 = xor i1 %458, i1 true;
    i1 %460 = and i1 %457, i1 %459;
    i1 %461 = or i1 %458, i1 %460;
    i32 %462 = sdiv i32 %189, i32 32768;
    i1 %463 = ztrunc i32 %462 to i1;
    i32 %464 = sdiv i32 %320, i32 32768;
    i1 %465 = ztrunc i32 %464 to i1;
    i1 %466 = or i1 %463, i1 %465;
    i1 %467 = and i1 %461, i1 %466;
    i1 %468 = and i1 %463, i1 %465;
    i1 %469 = xor i1 %468, i1 true;
    i1 %470 = and i1 %467, i1 %469;
    i1 %471 = xor i1 %470, i1 true;
    i1 %472 = and i1 %466, i1 %469;
    i1 %473 = or i1 %461, i1 %472;
    i1 %474 = and i1 %471, i1 %473;
    i32 %475 = zext i1 %474 to i32;
    i32 %476 = mul i32 %475, i32 2;
    i1 %477 = xor i1 %460, i1 true;
    i1 %478 = and i1 %456, i1 %459;
    i1 %479 = or i1 %451, i1 %478;
    i1 %480 = and i1 %477, i1 %479;
    i32 %481 = zext i1 %480 to i32;
    i32 %482 = add i32 %476, i32 %481;
    i32 %483 = mul i32 %482, i32 2;
    i1 %484 = xor i1 %450, i1 true;
    i1 %485 = and i1 %446, i1 %449;
    i1 %486 = or i1 %441, i1 %485;
    i1 %487 = and i1 %484, i1 %486;
    i32 %488 = zext i1 %487 to i32;
    i32 %489 = add i32 %483, i32 %488;
    i32 %490 = mul i32 %489, i32 2;
    i1 %491 = xor i1 %440, i1 true;
    i1 %492 = and i1 %436, i1 %439;
    i1 %493 = or i1 %431, i1 %492;
    i1 %494 = and i1 %491, i1 %493;
    i32 %495 = zext i1 %494 to i32;
    i32 %496 = add i32 %490, i32 %495;
    i32 %497 = mul i32 %496, i32 2;
    i1 %498 = xor i1 %430, i1 true;
    i1 %499 = and i1 %426, i1 %429;
    i1 %500 = or i1 %421, i1 %499;
    i1 %501 = and i1 %498, i1 %500;
    i32 %502 = zext i1 %501 to i32;
    i32 %503 = add i32 %497, i32 %502;
    i32 %504 = mul i32 %503, i32 2;
    i1 %505 = xor i1 %420, i1 true;
    i1 %506 = and i1 %416, i1 %419;
    i1 %507 = or i1 %411, i1 %506;
    i1 %508 = and i1 %505, i1 %507;
    i32 %509 = zext i1 %508 to i32;
    i32 %510 = add i32 %504, i32 %509;
    i32 %511 = mul i32 %510, i32 2;
    i1 %512 = xor i1 %410, i1 true;
    i1 %513 = and i1 %406, i1 %409;
    i1 %514 = or i1 %401, i1 %513;
    i1 %515 = and i1 %512, i1 %514;
    i32 %516 = zext i1 %515 to i32;
    i32 %517 = add i32 %511, i32 %516;
    i32 %518 = mul i32 %517, i32 2;
    i1 %519 = xor i1 %400, i1 true;
    i1 %520 = and i1 %396, i1 %399;
    i1 %521 = or i1 %391, i1 %520;
    i1 %522 = and i1 %519, i1 %521;
    i32 %523 = zext i1 %522 to i32;
    i32 %524 = add i32 %518, i32 %523;
    i32 %525 = mul i32 %524, i32 2;
    i1 %526 = xor i1 %390, i1 true;
    i1 %527 = and i1 %386, i1 %389;
    i1 %528 = or i1 %381, i1 %527;
    i1 %529 = and i1 %526, i1 %528;
    i32 %530 = zext i1 %529 to i32;
    i32 %531 = add i32 %525, i32 %530;
    i32 %532 = mul i32 %531, i32 2;
    i1 %533 = xor i1 %380, i1 true;
    i1 %534 = and i1 %376, i1 %379;
    i1 %535 = or i1 %371, i1 %534;
    i1 %536 = and i1 %533, i1 %535;
    i32 %537 = zext i1 %536 to i32;
    i32 %538 = add i32 %532, i32 %537;
    i32 %539 = mul i32 %538, i32 2;
    i1 %540 = xor i1 %370, i1 true;
    i1 %541 = and i1 %366, i1 %369;
    i1 %542 = or i1 %361, i1 %541;
    i1 %543 = and i1 %540, i1 %542;
    i32 %544 = zext i1 %543 to i32;
    i32 %545 = add i32 %539, i32 %544;
    i32 %546 = mul i32 %545, i32 2;
    i1 %547 = xor i1 %360, i1 true;
    i1 %548 = and i1 %356, i1 %359;
    i1 %549 = or i1 %351, i1 %548;
    i1 %550 = and i1 %547, i1 %549;
    i32 %551 = zext i1 %550 to i32;
    i32 %552 = add i32 %546, i32 %551;
    i32 %553 = mul i32 %552, i32 2;
    i1 %554 = xor i1 %350, i1 true;
    i1 %555 = and i1 %346, i1 %349;
    i1 %556 = or i1 %341, i1 %555;
    i1 %557 = and i1 %554, i1 %556;
    i32 %558 = zext i1 %557 to i32;
    i32 %559 = add i32 %553, i32 %558;
    i32 %560 = mul i32 %559, i32 2;
    i1 %561 = xor i1 %340, i1 true;
    i1 %562 = and i1 %336, i1 %339;
    i1 %563 = or i1 %331, i1 %562;
    i1 %564 = and i1 %561, i1 %563;
    i32 %565 = zext i1 %564 to i32;
    i32 %566 = add i32 %560, i32 %565;
    i32 %567 = mul i32 %566, i32 2;
    i1 %568 = xor i1 %330, i1 true;
    i1 %569 = and i1 %327, i1 %329;
    i1 %570 = or i1 %326, i1 %569;
    i1 %571 = and i1 %568, i1 %570;
    i32 %572 = zext i1 %571 to i32;
    i32 %573 = add i32 %567, i32 %572;
    i32 %574 = mul i32 %573, i32 2;
    i1 %575 = xor i1 %569, i1 true;
    i1 %576 = or i1 %327, i1 %329;
    i1 %577 = and i1 %575, i1 %576;
    i32 %578 = zext i1 %577 to i32;
    i32 %579 = add i32 %574, i32 %578;
    store i32* %2 with i32 1;
    store i32* %5 with i32 %579;
    ubr ^b3;
  ^b3:
    i32 %580 = phi [^b, i32 %6] [^b1, i32 1] [^b2, i32 %579];
    ret i32 %580;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = icmp slt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
internal [4084 * i32]* @lut_fib, align 8;
