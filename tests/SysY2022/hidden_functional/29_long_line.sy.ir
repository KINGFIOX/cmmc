internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @fib(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp lt i32 %n, i32 3;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    i32 %2 = srem i32 %1, i32 2;
    i32 %3 = abs i32 %2;
    i1 %4 = scmp eq i32 %3, i32 0;
    i32 %5 = srem i32 %n, i32 2;
    i32 %6 = abs i32 %5;
    i1 %7 = scmp neq i32 %6, i32 0;
    i1 %8 = and i1 %4, i1 %7;
    i1 %9 = scmp neq i32 %3, i32 0;
    i1 %10 = or i1 %8, i1 %9;
    i32 %11 = sdiv i32 %n, i32 4;
    i32 %12 = srem i32 %11, i32 2;
    i32 %13 = abs i32 %12;
    i1 %14 = scmp eq i32 %13, i32 0;
    i1 %15 = and i1 %10, i1 %14;
    i1 %16 = scmp neq i32 %13, i32 0;
    i1 %17 = or i1 %15, i1 %16;
    i32 %18 = sdiv i32 %n, i32 8;
    i32 %19 = srem i32 %18, i32 2;
    i32 %20 = abs i32 %19;
    i1 %21 = scmp eq i32 %20, i32 0;
    i1 %22 = and i1 %17, i1 %21;
    i1 %23 = scmp neq i32 %20, i32 0;
    i1 %24 = or i1 %22, i1 %23;
    i32 %25 = sdiv i32 %n, i32 16;
    i32 %26 = srem i32 %25, i32 2;
    i32 %27 = abs i32 %26;
    i1 %28 = scmp eq i32 %27, i32 0;
    i1 %29 = and i1 %24, i1 %28;
    i1 %30 = scmp neq i32 %27, i32 0;
    i1 %31 = or i1 %29, i1 %30;
    i32 %32 = sdiv i32 %n, i32 32;
    i32 %33 = srem i32 %32, i32 2;
    i32 %34 = abs i32 %33;
    i1 %35 = scmp eq i32 %34, i32 0;
    i1 %36 = and i1 %31, i1 %35;
    i1 %37 = scmp neq i32 %34, i32 0;
    i1 %38 = or i1 %36, i1 %37;
    i32 %39 = sdiv i32 %n, i32 64;
    i32 %40 = srem i32 %39, i32 2;
    i32 %41 = abs i32 %40;
    i1 %42 = scmp eq i32 %41, i32 0;
    i1 %43 = and i1 %38, i1 %42;
    i1 %44 = scmp neq i32 %41, i32 0;
    i1 %45 = or i1 %43, i1 %44;
    i32 %46 = sdiv i32 %n, i32 128;
    i32 %47 = srem i32 %46, i32 2;
    i32 %48 = abs i32 %47;
    i1 %49 = scmp eq i32 %48, i32 0;
    i1 %50 = and i1 %45, i1 %49;
    i1 %51 = scmp neq i32 %48, i32 0;
    i1 %52 = or i1 %50, i1 %51;
    i32 %53 = sdiv i32 %n, i32 256;
    i32 %54 = srem i32 %53, i32 2;
    i32 %55 = abs i32 %54;
    i1 %56 = scmp eq i32 %55, i32 0;
    i1 %57 = and i1 %52, i1 %56;
    i1 %58 = scmp neq i32 %55, i32 0;
    i1 %59 = or i1 %57, i1 %58;
    i32 %60 = sdiv i32 %n, i32 512;
    i32 %61 = srem i32 %60, i32 2;
    i32 %62 = abs i32 %61;
    i1 %63 = scmp eq i32 %62, i32 0;
    i1 %64 = and i1 %59, i1 %63;
    i1 %65 = scmp neq i32 %62, i32 0;
    i1 %66 = or i1 %64, i1 %65;
    i32 %67 = sdiv i32 %n, i32 1024;
    i32 %68 = srem i32 %67, i32 2;
    i32 %69 = abs i32 %68;
    i1 %70 = scmp eq i32 %69, i32 0;
    i1 %71 = and i1 %66, i1 %70;
    i1 %72 = scmp neq i32 %69, i32 0;
    i1 %73 = or i1 %71, i1 %72;
    i32 %74 = sdiv i32 %n, i32 2048;
    i32 %75 = srem i32 %74, i32 2;
    i32 %76 = abs i32 %75;
    i1 %77 = scmp eq i32 %76, i32 0;
    i1 %78 = and i1 %73, i1 %77;
    i1 %79 = scmp neq i32 %76, i32 0;
    i1 %80 = or i1 %78, i1 %79;
    i32 %81 = sdiv i32 %n, i32 4096;
    i32 %82 = srem i32 %81, i32 2;
    i32 %83 = abs i32 %82;
    i1 %84 = scmp eq i32 %83, i32 0;
    i1 %85 = and i1 %80, i1 %84;
    i1 %86 = scmp neq i32 %83, i32 0;
    i1 %87 = or i1 %85, i1 %86;
    i32 %88 = sdiv i32 %n, i32 8192;
    i32 %89 = srem i32 %88, i32 2;
    i32 %90 = abs i32 %89;
    i1 %91 = scmp eq i32 %90, i32 0;
    i1 %92 = and i1 %87, i1 %91;
    i1 %93 = scmp neq i32 %90, i32 0;
    i1 %94 = or i1 %92, i1 %93;
    i32 %95 = sdiv i32 %n, i32 16384;
    i32 %96 = srem i32 %95, i32 2;
    i32 %97 = abs i32 %96;
    i1 %98 = scmp eq i32 %97, i32 0;
    i1 %99 = and i1 %94, i1 %98;
    i1 %100 = scmp neq i32 %97, i32 0;
    i1 %101 = or i1 %99, i1 %100;
    i32 %102 = sdiv i32 %n, i32 32768;
    i32 %103 = srem i32 %102, i32 2;
    i32 %104 = abs i32 %103;
    i1 %105 = scmp eq i32 %104, i32 0;
    i1 %106 = and i1 %101, i1 %105;
    i1 %107 = xor i1 %106, i1 true;
    i1 %108 = or i1 %101, i1 %105;
    i1 %109 = and i1 %107, i1 %108;
    i32 %110 = zext i1 %109 to i32;
    i32 %111 = mul i32 %110, i32 2;
    i1 %112 = xor i1 %99, i1 true;
    i1 %113 = or i1 %94, i1 %98;
    i1 %114 = and i1 %112, i1 %113;
    i32 %115 = zext i1 %114 to i32;
    i32 %116 = add i32 %111, i32 %115;
    i32 %117 = mul i32 %116, i32 2;
    i1 %118 = xor i1 %92, i1 true;
    i1 %119 = or i1 %87, i1 %91;
    i1 %120 = and i1 %118, i1 %119;
    i32 %121 = zext i1 %120 to i32;
    i32 %122 = add i32 %117, i32 %121;
    i32 %123 = mul i32 %122, i32 2;
    i1 %124 = xor i1 %85, i1 true;
    i1 %125 = or i1 %80, i1 %84;
    i1 %126 = and i1 %124, i1 %125;
    i32 %127 = zext i1 %126 to i32;
    i32 %128 = add i32 %123, i32 %127;
    i32 %129 = mul i32 %128, i32 2;
    i1 %130 = xor i1 %78, i1 true;
    i1 %131 = or i1 %73, i1 %77;
    i1 %132 = and i1 %130, i1 %131;
    i32 %133 = zext i1 %132 to i32;
    i32 %134 = add i32 %129, i32 %133;
    i32 %135 = mul i32 %134, i32 2;
    i1 %136 = xor i1 %71, i1 true;
    i1 %137 = or i1 %66, i1 %70;
    i1 %138 = and i1 %136, i1 %137;
    i32 %139 = zext i1 %138 to i32;
    i32 %140 = add i32 %135, i32 %139;
    i32 %141 = mul i32 %140, i32 2;
    i1 %142 = xor i1 %64, i1 true;
    i1 %143 = or i1 %59, i1 %63;
    i1 %144 = and i1 %142, i1 %143;
    i32 %145 = zext i1 %144 to i32;
    i32 %146 = add i32 %141, i32 %145;
    i32 %147 = mul i32 %146, i32 2;
    i1 %148 = xor i1 %57, i1 true;
    i1 %149 = or i1 %52, i1 %56;
    i1 %150 = and i1 %148, i1 %149;
    i32 %151 = zext i1 %150 to i32;
    i32 %152 = add i32 %147, i32 %151;
    i32 %153 = mul i32 %152, i32 2;
    i1 %154 = xor i1 %50, i1 true;
    i1 %155 = or i1 %45, i1 %49;
    i1 %156 = and i1 %154, i1 %155;
    i32 %157 = zext i1 %156 to i32;
    i32 %158 = add i32 %153, i32 %157;
    i32 %159 = mul i32 %158, i32 2;
    i1 %160 = xor i1 %43, i1 true;
    i1 %161 = or i1 %38, i1 %42;
    i1 %162 = and i1 %160, i1 %161;
    i32 %163 = zext i1 %162 to i32;
    i32 %164 = add i32 %159, i32 %163;
    i32 %165 = mul i32 %164, i32 2;
    i1 %166 = xor i1 %36, i1 true;
    i1 %167 = or i1 %31, i1 %35;
    i1 %168 = and i1 %166, i1 %167;
    i32 %169 = zext i1 %168 to i32;
    i32 %170 = add i32 %165, i32 %169;
    i32 %171 = mul i32 %170, i32 2;
    i1 %172 = xor i1 %29, i1 true;
    i1 %173 = or i1 %24, i1 %28;
    i1 %174 = and i1 %172, i1 %173;
    i32 %175 = zext i1 %174 to i32;
    i32 %176 = add i32 %171, i32 %175;
    i32 %177 = mul i32 %176, i32 2;
    i1 %178 = xor i1 %22, i1 true;
    i1 %179 = or i1 %17, i1 %21;
    i1 %180 = and i1 %178, i1 %179;
    i32 %181 = zext i1 %180 to i32;
    i32 %182 = add i32 %177, i32 %181;
    i32 %183 = mul i32 %182, i32 2;
    i1 %184 = xor i1 %15, i1 true;
    i1 %185 = or i1 %10, i1 %14;
    i1 %186 = and i1 %184, i1 %185;
    i32 %187 = zext i1 %186 to i32;
    i32 %188 = add i32 %183, i32 %187;
    i32 %189 = mul i32 %188, i32 2;
    i1 %190 = xor i1 %8, i1 true;
    i1 %191 = or i1 %4, i1 %7;
    i1 %192 = and i1 %190, i1 %191;
    i32 %193 = zext i1 %192 to i32;
    i32 %194 = add i32 %189, i32 %193;
    i32 %195 = mul i32 %194, i32 2;
    i1 %196 = scmp eq i32 %6, i32 0;
    i32 %197 = zext i1 %196 to i32;
    i32 %198 = add i32 %195, i32 %197;
    i32 %199 = call (i32) -> i32 @fib(i32 %198);
    i32 %200 = sdiv i32 %199, i32 2;
    i32 %201 = srem i32 %200, i32 2;
    i32 %202 = abs i32 %201;
    i1 %203 = scmp neq i32 %202, i32 0;
    i1 %204 = and i1 %9, i1 %14;
    i1 %205 = or i1 %16, i1 %204;
    i1 %206 = and i1 %21, i1 %205;
    i1 %207 = or i1 %23, i1 %206;
    i1 %208 = and i1 %28, i1 %207;
    i1 %209 = or i1 %30, i1 %208;
    i1 %210 = and i1 %35, i1 %209;
    i1 %211 = or i1 %37, i1 %210;
    i1 %212 = and i1 %42, i1 %211;
    i1 %213 = or i1 %44, i1 %212;
    i1 %214 = and i1 %49, i1 %213;
    i1 %215 = or i1 %51, i1 %214;
    i1 %216 = and i1 %56, i1 %215;
    i1 %217 = or i1 %58, i1 %216;
    i1 %218 = and i1 %63, i1 %217;
    i1 %219 = or i1 %65, i1 %218;
    i1 %220 = and i1 %70, i1 %219;
    i1 %221 = or i1 %72, i1 %220;
    i1 %222 = and i1 %77, i1 %221;
    i1 %223 = or i1 %79, i1 %222;
    i1 %224 = and i1 %84, i1 %223;
    i1 %225 = or i1 %86, i1 %224;
    i1 %226 = and i1 %91, i1 %225;
    i1 %227 = or i1 %93, i1 %226;
    i1 %228 = and i1 %98, i1 %227;
    i1 %229 = or i1 %100, i1 %228;
    i1 %230 = and i1 %105, i1 %229;
    i1 %231 = xor i1 %230, i1 true;
    i1 %232 = or i1 %105, i1 %229;
    i1 %233 = and i1 %231, i1 %232;
    i32 %234 = zext i1 %233 to i32;
    i32 %235 = mul i32 %234, i32 2;
    i1 %236 = xor i1 %228, i1 true;
    i1 %237 = or i1 %98, i1 %227;
    i1 %238 = and i1 %236, i1 %237;
    i32 %239 = zext i1 %238 to i32;
    i32 %240 = add i32 %235, i32 %239;
    i32 %241 = mul i32 %240, i32 2;
    i1 %242 = xor i1 %226, i1 true;
    i1 %243 = or i1 %91, i1 %225;
    i1 %244 = and i1 %242, i1 %243;
    i32 %245 = zext i1 %244 to i32;
    i32 %246 = add i32 %241, i32 %245;
    i32 %247 = mul i32 %246, i32 2;
    i1 %248 = xor i1 %224, i1 true;
    i1 %249 = or i1 %84, i1 %223;
    i1 %250 = and i1 %248, i1 %249;
    i32 %251 = zext i1 %250 to i32;
    i32 %252 = add i32 %247, i32 %251;
    i32 %253 = mul i32 %252, i32 2;
    i1 %254 = xor i1 %222, i1 true;
    i1 %255 = or i1 %77, i1 %221;
    i1 %256 = and i1 %254, i1 %255;
    i32 %257 = zext i1 %256 to i32;
    i32 %258 = add i32 %253, i32 %257;
    i32 %259 = mul i32 %258, i32 2;
    i1 %260 = xor i1 %220, i1 true;
    i1 %261 = or i1 %70, i1 %219;
    i1 %262 = and i1 %260, i1 %261;
    i32 %263 = zext i1 %262 to i32;
    i32 %264 = add i32 %259, i32 %263;
    i32 %265 = mul i32 %264, i32 2;
    i1 %266 = xor i1 %218, i1 true;
    i1 %267 = or i1 %63, i1 %217;
    i1 %268 = and i1 %266, i1 %267;
    i32 %269 = zext i1 %268 to i32;
    i32 %270 = add i32 %265, i32 %269;
    i32 %271 = mul i32 %270, i32 2;
    i1 %272 = xor i1 %216, i1 true;
    i1 %273 = or i1 %56, i1 %215;
    i1 %274 = and i1 %272, i1 %273;
    i32 %275 = zext i1 %274 to i32;
    i32 %276 = add i32 %271, i32 %275;
    i32 %277 = mul i32 %276, i32 2;
    i1 %278 = xor i1 %214, i1 true;
    i1 %279 = or i1 %49, i1 %213;
    i1 %280 = and i1 %278, i1 %279;
    i32 %281 = zext i1 %280 to i32;
    i32 %282 = add i32 %277, i32 %281;
    i32 %283 = mul i32 %282, i32 2;
    i1 %284 = xor i1 %212, i1 true;
    i1 %285 = or i1 %42, i1 %211;
    i1 %286 = and i1 %284, i1 %285;
    i32 %287 = zext i1 %286 to i32;
    i32 %288 = add i32 %283, i32 %287;
    i32 %289 = mul i32 %288, i32 2;
    i1 %290 = xor i1 %210, i1 true;
    i1 %291 = or i1 %35, i1 %209;
    i1 %292 = and i1 %290, i1 %291;
    i32 %293 = zext i1 %292 to i32;
    i32 %294 = add i32 %289, i32 %293;
    i32 %295 = mul i32 %294, i32 2;
    i1 %296 = xor i1 %208, i1 true;
    i1 %297 = or i1 %28, i1 %207;
    i1 %298 = and i1 %296, i1 %297;
    i32 %299 = zext i1 %298 to i32;
    i32 %300 = add i32 %295, i32 %299;
    i32 %301 = mul i32 %300, i32 2;
    i1 %302 = xor i1 %206, i1 true;
    i1 %303 = or i1 %21, i1 %205;
    i1 %304 = and i1 %302, i1 %303;
    i32 %305 = zext i1 %304 to i32;
    i32 %306 = add i32 %301, i32 %305;
    i32 %307 = mul i32 %306, i32 2;
    i1 %308 = xor i1 %204, i1 true;
    i1 %309 = or i1 %9, i1 %14;
    i1 %310 = and i1 %308, i1 %309;
    i32 %311 = zext i1 %310 to i32;
    i32 %312 = add i32 %307, i32 %311;
    i32 %313 = mul i32 %312, i32 2;
    i32 %314 = zext i1 %4 to i32;
    i32 %315 = add i32 %313, i32 %314;
    i32 %316 = mul i32 %315, i32 2;
    i32 %317 = zext i1 %7 to i32;
    i32 %318 = add i32 %316, i32 %317;
    i32 %319 = call (i32) -> i32 @fib(i32 %318);
    i32 %320 = sdiv i32 %319, i32 2;
    i32 %321 = srem i32 %320, i32 2;
    i32 %322 = abs i32 %321;
    i1 %323 = scmp neq i32 %322, i32 0;
    i1 %324 = and i1 %203, i1 %323;
    i1 %325 = xor i1 %324, i1 true;
    i1 %326 = or i1 %203, i1 %323;
    i1 %327 = and i1 %325, i1 %326;
    i32 %328 = srem i32 %199, i32 2;
    i32 %329 = abs i32 %328;
    i1 %330 = scmp neq i32 %329, i32 0;
    i1 %331 = and i1 %327, i1 %330;
    i32 %332 = srem i32 %319, i32 2;
    i32 %333 = abs i32 %332;
    i1 %334 = scmp neq i32 %333, i32 0;
    i1 %335 = and i1 %331, i1 %334;
    i1 %336 = or i1 %324, i1 %335;
    i32 %337 = sdiv i32 %199, i32 4;
    i32 %338 = srem i32 %337, i32 2;
    i32 %339 = abs i32 %338;
    i1 %340 = scmp neq i32 %339, i32 0;
    i32 %341 = sdiv i32 %319, i32 4;
    i32 %342 = srem i32 %341, i32 2;
    i32 %343 = abs i32 %342;
    i1 %344 = scmp neq i32 %343, i32 0;
    i1 %345 = or i1 %340, i1 %344;
    i1 %346 = and i1 %336, i1 %345;
    i1 %347 = and i1 %340, i1 %344;
    i1 %348 = xor i1 %347, i1 true;
    i1 %349 = and i1 %346, i1 %348;
    i1 %350 = or i1 %347, i1 %349;
    i32 %351 = sdiv i32 %199, i32 8;
    i32 %352 = srem i32 %351, i32 2;
    i32 %353 = abs i32 %352;
    i1 %354 = scmp neq i32 %353, i32 0;
    i32 %355 = sdiv i32 %319, i32 8;
    i32 %356 = srem i32 %355, i32 2;
    i32 %357 = abs i32 %356;
    i1 %358 = scmp neq i32 %357, i32 0;
    i1 %359 = or i1 %354, i1 %358;
    i1 %360 = and i1 %350, i1 %359;
    i1 %361 = and i1 %354, i1 %358;
    i1 %362 = xor i1 %361, i1 true;
    i1 %363 = and i1 %360, i1 %362;
    i1 %364 = or i1 %361, i1 %363;
    i32 %365 = sdiv i32 %199, i32 16;
    i32 %366 = srem i32 %365, i32 2;
    i32 %367 = abs i32 %366;
    i1 %368 = scmp neq i32 %367, i32 0;
    i32 %369 = sdiv i32 %319, i32 16;
    i32 %370 = srem i32 %369, i32 2;
    i32 %371 = abs i32 %370;
    i1 %372 = scmp neq i32 %371, i32 0;
    i1 %373 = or i1 %368, i1 %372;
    i1 %374 = and i1 %364, i1 %373;
    i1 %375 = and i1 %368, i1 %372;
    i1 %376 = xor i1 %375, i1 true;
    i1 %377 = and i1 %374, i1 %376;
    i1 %378 = or i1 %375, i1 %377;
    i32 %379 = sdiv i32 %199, i32 32;
    i32 %380 = srem i32 %379, i32 2;
    i32 %381 = abs i32 %380;
    i1 %382 = scmp neq i32 %381, i32 0;
    i32 %383 = sdiv i32 %319, i32 32;
    i32 %384 = srem i32 %383, i32 2;
    i32 %385 = abs i32 %384;
    i1 %386 = scmp neq i32 %385, i32 0;
    i1 %387 = or i1 %382, i1 %386;
    i1 %388 = and i1 %378, i1 %387;
    i1 %389 = and i1 %382, i1 %386;
    i1 %390 = xor i1 %389, i1 true;
    i1 %391 = and i1 %388, i1 %390;
    i1 %392 = or i1 %389, i1 %391;
    i32 %393 = sdiv i32 %199, i32 64;
    i32 %394 = srem i32 %393, i32 2;
    i32 %395 = abs i32 %394;
    i1 %396 = scmp neq i32 %395, i32 0;
    i32 %397 = sdiv i32 %319, i32 64;
    i32 %398 = srem i32 %397, i32 2;
    i32 %399 = abs i32 %398;
    i1 %400 = scmp neq i32 %399, i32 0;
    i1 %401 = or i1 %396, i1 %400;
    i1 %402 = and i1 %392, i1 %401;
    i1 %403 = and i1 %396, i1 %400;
    i1 %404 = xor i1 %403, i1 true;
    i1 %405 = and i1 %402, i1 %404;
    i1 %406 = or i1 %403, i1 %405;
    i32 %407 = sdiv i32 %199, i32 128;
    i32 %408 = srem i32 %407, i32 2;
    i32 %409 = abs i32 %408;
    i1 %410 = scmp neq i32 %409, i32 0;
    i32 %411 = sdiv i32 %319, i32 128;
    i32 %412 = srem i32 %411, i32 2;
    i32 %413 = abs i32 %412;
    i1 %414 = scmp neq i32 %413, i32 0;
    i1 %415 = or i1 %410, i1 %414;
    i1 %416 = and i1 %406, i1 %415;
    i1 %417 = and i1 %410, i1 %414;
    i1 %418 = xor i1 %417, i1 true;
    i1 %419 = and i1 %416, i1 %418;
    i1 %420 = or i1 %417, i1 %419;
    i32 %421 = sdiv i32 %199, i32 256;
    i32 %422 = srem i32 %421, i32 2;
    i32 %423 = abs i32 %422;
    i1 %424 = scmp neq i32 %423, i32 0;
    i32 %425 = sdiv i32 %319, i32 256;
    i32 %426 = srem i32 %425, i32 2;
    i32 %427 = abs i32 %426;
    i1 %428 = scmp neq i32 %427, i32 0;
    i1 %429 = or i1 %424, i1 %428;
    i1 %430 = and i1 %420, i1 %429;
    i1 %431 = and i1 %424, i1 %428;
    i1 %432 = xor i1 %431, i1 true;
    i1 %433 = and i1 %430, i1 %432;
    i1 %434 = or i1 %431, i1 %433;
    i32 %435 = sdiv i32 %199, i32 512;
    i32 %436 = srem i32 %435, i32 2;
    i32 %437 = abs i32 %436;
    i1 %438 = scmp neq i32 %437, i32 0;
    i32 %439 = sdiv i32 %319, i32 512;
    i32 %440 = srem i32 %439, i32 2;
    i32 %441 = abs i32 %440;
    i1 %442 = scmp neq i32 %441, i32 0;
    i1 %443 = or i1 %438, i1 %442;
    i1 %444 = and i1 %434, i1 %443;
    i1 %445 = and i1 %438, i1 %442;
    i1 %446 = xor i1 %445, i1 true;
    i1 %447 = and i1 %444, i1 %446;
    i1 %448 = or i1 %445, i1 %447;
    i32 %449 = sdiv i32 %199, i32 1024;
    i32 %450 = srem i32 %449, i32 2;
    i32 %451 = abs i32 %450;
    i1 %452 = scmp neq i32 %451, i32 0;
    i32 %453 = sdiv i32 %319, i32 1024;
    i32 %454 = srem i32 %453, i32 2;
    i32 %455 = abs i32 %454;
    i1 %456 = scmp neq i32 %455, i32 0;
    i1 %457 = or i1 %452, i1 %456;
    i1 %458 = and i1 %448, i1 %457;
    i1 %459 = and i1 %452, i1 %456;
    i1 %460 = xor i1 %459, i1 true;
    i1 %461 = and i1 %458, i1 %460;
    i1 %462 = or i1 %459, i1 %461;
    i32 %463 = sdiv i32 %199, i32 2048;
    i32 %464 = srem i32 %463, i32 2;
    i32 %465 = abs i32 %464;
    i1 %466 = scmp neq i32 %465, i32 0;
    i32 %467 = sdiv i32 %319, i32 2048;
    i32 %468 = srem i32 %467, i32 2;
    i32 %469 = abs i32 %468;
    i1 %470 = scmp neq i32 %469, i32 0;
    i1 %471 = or i1 %466, i1 %470;
    i1 %472 = and i1 %462, i1 %471;
    i1 %473 = and i1 %466, i1 %470;
    i1 %474 = xor i1 %473, i1 true;
    i1 %475 = and i1 %472, i1 %474;
    i1 %476 = or i1 %473, i1 %475;
    i32 %477 = sdiv i32 %199, i32 4096;
    i32 %478 = srem i32 %477, i32 2;
    i32 %479 = abs i32 %478;
    i1 %480 = scmp neq i32 %479, i32 0;
    i32 %481 = sdiv i32 %319, i32 4096;
    i32 %482 = srem i32 %481, i32 2;
    i32 %483 = abs i32 %482;
    i1 %484 = scmp neq i32 %483, i32 0;
    i1 %485 = or i1 %480, i1 %484;
    i1 %486 = and i1 %476, i1 %485;
    i1 %487 = and i1 %480, i1 %484;
    i1 %488 = xor i1 %487, i1 true;
    i1 %489 = and i1 %486, i1 %488;
    i1 %490 = or i1 %487, i1 %489;
    i32 %491 = sdiv i32 %199, i32 8192;
    i32 %492 = srem i32 %491, i32 2;
    i32 %493 = abs i32 %492;
    i1 %494 = scmp neq i32 %493, i32 0;
    i32 %495 = sdiv i32 %319, i32 8192;
    i32 %496 = srem i32 %495, i32 2;
    i32 %497 = abs i32 %496;
    i1 %498 = scmp neq i32 %497, i32 0;
    i1 %499 = or i1 %494, i1 %498;
    i1 %500 = and i1 %490, i1 %499;
    i1 %501 = and i1 %494, i1 %498;
    i1 %502 = xor i1 %501, i1 true;
    i1 %503 = and i1 %500, i1 %502;
    i1 %504 = or i1 %501, i1 %503;
    i32 %505 = sdiv i32 %199, i32 16384;
    i32 %506 = srem i32 %505, i32 2;
    i32 %507 = abs i32 %506;
    i1 %508 = scmp neq i32 %507, i32 0;
    i32 %509 = sdiv i32 %319, i32 16384;
    i32 %510 = srem i32 %509, i32 2;
    i32 %511 = abs i32 %510;
    i1 %512 = scmp neq i32 %511, i32 0;
    i1 %513 = or i1 %508, i1 %512;
    i1 %514 = and i1 %504, i1 %513;
    i1 %515 = and i1 %508, i1 %512;
    i1 %516 = xor i1 %515, i1 true;
    i1 %517 = and i1 %514, i1 %516;
    i1 %518 = or i1 %515, i1 %517;
    i32 %519 = sdiv i32 %199, i32 32768;
    i32 %520 = srem i32 %519, i32 2;
    i32 %521 = abs i32 %520;
    i1 %522 = scmp neq i32 %521, i32 0;
    i32 %523 = sdiv i32 %319, i32 32768;
    i32 %524 = srem i32 %523, i32 2;
    i32 %525 = abs i32 %524;
    i1 %526 = scmp neq i32 %525, i32 0;
    i1 %527 = or i1 %522, i1 %526;
    i1 %528 = and i1 %518, i1 %527;
    i1 %529 = and i1 %522, i1 %526;
    i1 %530 = xor i1 %529, i1 true;
    i1 %531 = and i1 %528, i1 %530;
    i1 %532 = xor i1 %531, i1 true;
    i1 %533 = and i1 %527, i1 %530;
    i1 %534 = or i1 %518, i1 %533;
    i1 %535 = and i1 %532, i1 %534;
    i32 %536 = zext i1 %535 to i32;
    i32 %537 = mul i32 %536, i32 2;
    i1 %538 = xor i1 %517, i1 true;
    i1 %539 = and i1 %513, i1 %516;
    i1 %540 = or i1 %504, i1 %539;
    i1 %541 = and i1 %538, i1 %540;
    i32 %542 = zext i1 %541 to i32;
    i32 %543 = add i32 %537, i32 %542;
    i32 %544 = mul i32 %543, i32 2;
    i1 %545 = xor i1 %503, i1 true;
    i1 %546 = and i1 %499, i1 %502;
    i1 %547 = or i1 %490, i1 %546;
    i1 %548 = and i1 %545, i1 %547;
    i32 %549 = zext i1 %548 to i32;
    i32 %550 = add i32 %544, i32 %549;
    i32 %551 = mul i32 %550, i32 2;
    i1 %552 = xor i1 %489, i1 true;
    i1 %553 = and i1 %485, i1 %488;
    i1 %554 = or i1 %476, i1 %553;
    i1 %555 = and i1 %552, i1 %554;
    i32 %556 = zext i1 %555 to i32;
    i32 %557 = add i32 %551, i32 %556;
    i32 %558 = mul i32 %557, i32 2;
    i1 %559 = xor i1 %475, i1 true;
    i1 %560 = and i1 %471, i1 %474;
    i1 %561 = or i1 %462, i1 %560;
    i1 %562 = and i1 %559, i1 %561;
    i32 %563 = zext i1 %562 to i32;
    i32 %564 = add i32 %558, i32 %563;
    i32 %565 = mul i32 %564, i32 2;
    i1 %566 = xor i1 %461, i1 true;
    i1 %567 = and i1 %457, i1 %460;
    i1 %568 = or i1 %448, i1 %567;
    i1 %569 = and i1 %566, i1 %568;
    i32 %570 = zext i1 %569 to i32;
    i32 %571 = add i32 %565, i32 %570;
    i32 %572 = mul i32 %571, i32 2;
    i1 %573 = xor i1 %447, i1 true;
    i1 %574 = and i1 %443, i1 %446;
    i1 %575 = or i1 %434, i1 %574;
    i1 %576 = and i1 %573, i1 %575;
    i32 %577 = zext i1 %576 to i32;
    i32 %578 = add i32 %572, i32 %577;
    i32 %579 = mul i32 %578, i32 2;
    i1 %580 = xor i1 %433, i1 true;
    i1 %581 = and i1 %429, i1 %432;
    i1 %582 = or i1 %420, i1 %581;
    i1 %583 = and i1 %580, i1 %582;
    i32 %584 = zext i1 %583 to i32;
    i32 %585 = add i32 %579, i32 %584;
    i32 %586 = mul i32 %585, i32 2;
    i1 %587 = xor i1 %419, i1 true;
    i1 %588 = and i1 %415, i1 %418;
    i1 %589 = or i1 %406, i1 %588;
    i1 %590 = and i1 %587, i1 %589;
    i32 %591 = zext i1 %590 to i32;
    i32 %592 = add i32 %586, i32 %591;
    i32 %593 = mul i32 %592, i32 2;
    i1 %594 = xor i1 %405, i1 true;
    i1 %595 = and i1 %401, i1 %404;
    i1 %596 = or i1 %392, i1 %595;
    i1 %597 = and i1 %594, i1 %596;
    i32 %598 = zext i1 %597 to i32;
    i32 %599 = add i32 %593, i32 %598;
    i32 %600 = mul i32 %599, i32 2;
    i1 %601 = xor i1 %391, i1 true;
    i1 %602 = and i1 %387, i1 %390;
    i1 %603 = or i1 %378, i1 %602;
    i1 %604 = and i1 %601, i1 %603;
    i32 %605 = zext i1 %604 to i32;
    i32 %606 = add i32 %600, i32 %605;
    i32 %607 = mul i32 %606, i32 2;
    i1 %608 = xor i1 %377, i1 true;
    i1 %609 = and i1 %373, i1 %376;
    i1 %610 = or i1 %364, i1 %609;
    i1 %611 = and i1 %608, i1 %610;
    i32 %612 = zext i1 %611 to i32;
    i32 %613 = add i32 %607, i32 %612;
    i32 %614 = mul i32 %613, i32 2;
    i1 %615 = xor i1 %363, i1 true;
    i1 %616 = and i1 %359, i1 %362;
    i1 %617 = or i1 %350, i1 %616;
    i1 %618 = and i1 %615, i1 %617;
    i32 %619 = zext i1 %618 to i32;
    i32 %620 = add i32 %614, i32 %619;
    i32 %621 = mul i32 %620, i32 2;
    i1 %622 = xor i1 %349, i1 true;
    i1 %623 = and i1 %345, i1 %348;
    i1 %624 = or i1 %336, i1 %623;
    i1 %625 = and i1 %622, i1 %624;
    i32 %626 = zext i1 %625 to i32;
    i32 %627 = add i32 %621, i32 %626;
    i32 %628 = mul i32 %627, i32 2;
    i1 %629 = xor i1 %335, i1 true;
    i1 %630 = and i1 %330, i1 %334;
    i1 %631 = or i1 %327, i1 %630;
    i1 %632 = and i1 %629, i1 %631;
    i32 %633 = zext i1 %632 to i32;
    i32 %634 = add i32 %628, i32 %633;
    i32 %635 = mul i32 %634, i32 2;
    i1 %636 = xor i1 %630, i1 true;
    i1 %637 = or i1 %330, i1 %334;
    i1 %638 = and i1 %636, i1 %637;
    i32 %639 = zext i1 %638 to i32;
    i32 %640 = add i32 %635, i32 %639;
    ubr ^b1;
  ^b1:
    i32 %641 = phi [^entry, i32 1] [^b, i32 %640];
    ret i32 %641;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %2];
    call (i32) -> void @putch(i32 102);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 98);
    call (i32) -> void @putch(i32 40);
    call (i32) -> void @putint(i32 %0);
    i32 %1 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putch(i32 41);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 61);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    i1 %3 = scmp lt i32 %2, i32 21;
    cbr i1 %3(prob = 0.95), ^while.body, ^b;
  ^b:
    ret i32 0;
}
