internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %root];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %root, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %root] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = scmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32 %5 = add i32 %4, i32 4;
    i1 %6 = scmp gt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.89), ^while.body, ^super.header1;
  ^b:
    i1 %7 = scmp gt i32 %2, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^while.header;
  ^while.body:
    i32* %8 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %4];
    store i32* %8 with i32 %4;
    i32* %9 = getelementptr &(i32* %8)[i64 1];
    i32 %10 = add i32 %4, i32 1;
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(i32* %8)[i64 2];
    i32 %12 = add i32 %4, i32 2;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(i32* %8)[i64 3];
    i32 %14 = add i32 %4, i32 3;
    store i32* %13 with i32 %14;
    ubr ^super.header;
  ^super.header1:
    i32 %15 = phi [^super.header, i32 %4] [^while.body2, i32 %16];
    i32 %16 = add i32 %15, i32 4;
    i1 %17 = scmp gt i32 %0, i32 %16;
    cbr i1 %17(prob = 0.89), ^while.body2, ^while.body4;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^while.body5, i32 %45];
    i32 %19 = call () -> i32 @getint();
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call (i32) -> i32 @find(i32 %19);
    i32 %22 = call (i32) -> i32 @find(i32 %20);
    i1 %23 = scmp neq i32 %21, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.then, ^while.body5;
  ^while.header:
    i32 %24 = phi [^b, i32 0] [^while.body3, i32 %39] [^while.body5, i32 0];
    i32 %25 = phi [^b, i32 0] [^while.body3, i32 %40] [^while.body5, i32 0];
    i1 %26 = scmp gt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32* %27 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %15];
    store i32* %27 with i32 %15;
    i32* %28 = getelementptr &(i32* %27)[i64 1];
    i32 %29 = add i32 %15, i32 1;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %27)[i64 2];
    i32 %31 = add i32 %15, i32 2;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %27)[i64 3];
    i32 %33 = add i32 %15, i32 3;
    store i32* %32 with i32 %33;
    ubr ^super.header1;
  ^if.then:
    i32* %34 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %22];
    store i32* %34 with i32 %21;
    ubr ^while.body5;
  ^while.body3:
    i32* %35 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %25];
    i32 %36 = load i32* %35;
    i1 %37 = scmp eq i32 %25, i32 %36;
    i32 %38 = add i32 %24, i32 1;
    i32 %39 = select i1 %37 ? i32 %38 : i32 %24;
    i32 %40 = add i32 %25, i32 1;
    ubr ^while.header;
  ^while.body4:
    i32 %41 = phi [^super.header1, i32 %15] [^while.body4, i32 %43];
    i32* %42 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %41];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %41, i32 1;
    i1 %44 = scmp gt i32 %0, i32 %43;
    cbr i1 %44(prob = 0.97), ^while.body4, ^b;
  ^while.body5:
    i32 %45 = add i32 %18, i32 1;
    i1 %46 = scmp gt i32 %2, i32 %45;
    cbr i1 %46(prob = 0.97), ^while.body1, ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %24);
    ret i32 0;
}
