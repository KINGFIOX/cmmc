internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %root];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %root;
    cbr i1 %2(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %0;
    ubr ^b;
^b:
    i32 %5 = phi [^entry, i32 %root] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32* %4 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %3];
    store i32* %4 with i32 %3;
    i32 %5 = add i32 %3, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^b:
    i1 %7 = scmp gt i32 %1, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %8 = phi [^b, i32 0] [^while.body3, i32 %20];
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call (i32) -> i32 @find(i32 %9);
    i32 %12 = call (i32) -> i32 @find(i32 %10);
    i1 %13 = scmp neq i32 %11, i32 %12;
    cbr i1 %13(prob = 0.5), ^if.then, ^while.body3;
^b1:
    cbr i1 %2(prob = 0.97), ^while.body2, ^b2;
^if.then:
    i32* %14 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %12];
    store i32* %14 with i32 %11;
    ubr ^while.body3;
^while.body2:
    i32 %15 = phi [^b1, i32 0] [^b3, i32 %25];
    i32 %16 = phi [^b1, i32 0] [^b3, i32 %24];
    i32* %17 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %15];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 %15;
    cbr i1 %19(prob = 0.5), ^if.then1, ^b3;
^while.body3:
    i32 %20 = add i32 %8, i32 1;
    i1 %21 = scmp lt i32 %20, i32 %1;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b1;
^b2:
    i32 %22 = phi [^b1, i32 0] [^b3, i32 %24];
    call (i32) -> void @putint(i32 %22);
    ret i32 0;
^if.then1:
    i32 %23 = add i32 %16, i32 1;
    ubr ^b3;
^b3:
    i32 %24 = phi [^while.body2, i32 %16] [^if.then1, i32 %23];
    i32 %25 = add i32 %15, i32 1;
    i1 %26 = scmp lt i32 %25, i32 %0;
    cbr i1 %26(prob = 0.97), ^while.body2, ^b2;
}
