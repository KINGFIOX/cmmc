internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %root];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %root;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b;
  ^b:
    i32 %5 = phi [^entry, i32 %root] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32 %5 = add i32 %4, i32 16;
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.67), ^while.body, ^super.header1;
  ^b:
    i1 %7 = scmp gt i32 %2, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^while.header;
  ^while.body:
    i32* %8 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %4];
    store i32* %8 with i32 %4;
    i32* %9 = getelementptr &(i32* %8)[i64 1];
    i32 %10 = add i32 %4, i32 1;
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(i32* %8)[i64 2];
    i32 %12 = add i32 %4, i32 2;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(i32* %8)[i64 3];
    i32 %14 = add i32 %4, i32 3;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %8)[i64 4];
    i32 %16 = add i32 %4, i32 4;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %8)[i64 5];
    i32 %18 = add i32 %4, i32 5;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %8)[i64 6];
    i32 %20 = add i32 %4, i32 6;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %8)[i64 7];
    i32 %22 = add i32 %4, i32 7;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %8)[i64 8];
    i32 %24 = add i32 %4, i32 8;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %8)[i64 9];
    i32 %26 = add i32 %4, i32 9;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %8)[i64 10];
    i32 %28 = add i32 %4, i32 10;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %8)[i64 11];
    i32 %30 = add i32 %4, i32 11;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %8)[i64 12];
    i32 %32 = add i32 %4, i32 12;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %8)[i64 13];
    i32 %34 = add i32 %4, i32 13;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %8)[i64 14];
    i32 %36 = add i32 %4, i32 14;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %8)[i64 15];
    i32 %38 = add i32 %4, i32 15;
    store i32* %37 with i32 %38;
    ubr ^super.header;
  ^super.header1:
    i32 %39 = phi [^super.header, i32 %4] [^while.body2, i32 %40];
    i32 %40 = add i32 %39, i32 16;
    i1 %41 = scmp lt i32 %40, i32 %0;
    cbr i1 %41(prob = 0.67), ^while.body2, ^while.body4;
  ^while.body1:
    i32 %42 = phi [^b, i32 0] [^while.body5, i32 %93];
    i32 %43 = call () -> i32 @getint();
    i32 %44 = call () -> i32 @getint();
    i32 %45 = call (i32) -> i32 @find(i32 %43);
    i32 %46 = call (i32) -> i32 @find(i32 %44);
    i1 %47 = scmp neq i32 %45, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then, ^while.body5;
  ^while.header:
    i32 %48 = phi [^b, i32 0] [^while.body3, i32 %87] [^while.body5, i32 0];
    i32 %49 = phi [^b, i32 0] [^while.body3, i32 %88] [^while.body5, i32 0];
    i1 %50 = scmp lt i32 %49, i32 %0;
    cbr i1 %50(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32* %51 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %39];
    store i32* %51 with i32 %39;
    i32* %52 = getelementptr &(i32* %51)[i64 1];
    i32 %53 = add i32 %39, i32 1;
    store i32* %52 with i32 %53;
    i32* %54 = getelementptr &(i32* %51)[i64 2];
    i32 %55 = add i32 %39, i32 2;
    store i32* %54 with i32 %55;
    i32* %56 = getelementptr &(i32* %51)[i64 3];
    i32 %57 = add i32 %39, i32 3;
    store i32* %56 with i32 %57;
    i32* %58 = getelementptr &(i32* %51)[i64 4];
    i32 %59 = add i32 %39, i32 4;
    store i32* %58 with i32 %59;
    i32* %60 = getelementptr &(i32* %51)[i64 5];
    i32 %61 = add i32 %39, i32 5;
    store i32* %60 with i32 %61;
    i32* %62 = getelementptr &(i32* %51)[i64 6];
    i32 %63 = add i32 %39, i32 6;
    store i32* %62 with i32 %63;
    i32* %64 = getelementptr &(i32* %51)[i64 7];
    i32 %65 = add i32 %39, i32 7;
    store i32* %64 with i32 %65;
    i32* %66 = getelementptr &(i32* %51)[i64 8];
    i32 %67 = add i32 %39, i32 8;
    store i32* %66 with i32 %67;
    i32* %68 = getelementptr &(i32* %51)[i64 9];
    i32 %69 = add i32 %39, i32 9;
    store i32* %68 with i32 %69;
    i32* %70 = getelementptr &(i32* %51)[i64 10];
    i32 %71 = add i32 %39, i32 10;
    store i32* %70 with i32 %71;
    i32* %72 = getelementptr &(i32* %51)[i64 11];
    i32 %73 = add i32 %39, i32 11;
    store i32* %72 with i32 %73;
    i32* %74 = getelementptr &(i32* %51)[i64 12];
    i32 %75 = add i32 %39, i32 12;
    store i32* %74 with i32 %75;
    i32* %76 = getelementptr &(i32* %51)[i64 13];
    i32 %77 = add i32 %39, i32 13;
    store i32* %76 with i32 %77;
    i32* %78 = getelementptr &(i32* %51)[i64 14];
    i32 %79 = add i32 %39, i32 14;
    store i32* %78 with i32 %79;
    i32* %80 = getelementptr &(i32* %51)[i64 15];
    i32 %81 = add i32 %39, i32 15;
    store i32* %80 with i32 %81;
    ubr ^super.header1;
  ^if.then:
    i32* %82 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %46];
    store i32* %82 with i32 %45;
    ubr ^while.body5;
  ^while.body3:
    i32* %83 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %49];
    i32 %84 = load i32* %83;
    i1 %85 = scmp eq i32 %84, i32 %49;
    i32 %86 = add i32 %48, i32 1;
    i32 %87 = select i1 %85 ? i32 %86 : i32 %48;
    i32 %88 = add i32 %49, i32 1;
    ubr ^while.header;
  ^while.body4:
    i32 %89 = phi [^super.header1, i32 %39] [^while.body4, i32 %91];
    i32* %90 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %89];
    store i32* %90 with i32 %89;
    i32 %91 = add i32 %89, i32 1;
    i1 %92 = scmp lt i32 %91, i32 %0;
    cbr i1 %92(prob = 0.97), ^while.body4, ^b;
  ^while.body5:
    i32 %93 = add i32 %42, i32 1;
    i1 %94 = scmp lt i32 %93, i32 %2;
    cbr i1 %94(prob = 0.97), ^while.body1, ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %48);
    ret i32 0;
}
