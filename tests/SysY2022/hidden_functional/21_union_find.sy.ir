internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent, align 8 { Flexible };
internal func @find(i32 %root) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %root];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %root, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %root] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header;
  ^super.header:
    i1 %4 = icmp sgt i32 %0, i32 4;
    cbr i1 %4(prob = 0.89), ^super.header1, ^while.body;
  ^while.header:
    i1 %5 = icmp sgt i32 %2, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^while.header1;
  ^super.header1:
    i32 %6 = add i32 %0, i32 -4;
    i1 %7 = icmp sgt i32 %6, i32 16;
    i32 %8 = add i32 %0, i32 -20;
    cbr i1 %7(prob = 0.89), ^while.body2, ^while.body4;
  ^while.body {scalar}:
    i32 %9 = phi [^super.header, i32 0] [^while.body, i32 %11] [^while.body4, i32 %71];
    i32* %10 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %9];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %9, i32 1;
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.75), ^while.body, ^while.header;
  ^while.body1:
    i32 %13 = phi [^while.header, i32 0] [^while.body5, i32 %73];
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32 %16 = call (i32) -> i32 @find(i32 %14);
    i32 %17 = call (i32) -> i32 @find(i32 %15);
    i1 %18 = icmp neq i32 %16, i32 %17;
    cbr i1 %18(prob = 0.5), ^if.then, ^while.body5;
  ^while.header1:
    i32 %19 = phi [^while.header, i32 0] [^while.body3, i32 %61] [^while.body5, i32 0];
    i32 %20 = phi [^while.header, i32 0] [^while.body3, i32 %62] [^while.body5, i32 0];
    i1 %21 = icmp sgt i32 %0, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body3, ^b;
  ^if.then:
    i32* %22 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %17];
    store i32* %22 with i32 %16;
    ubr ^while.body5;
  ^while.body2:
    i32 %23 = phi [^super.header1, i32 0] [^while.body2, i32 %55];
    i32* %24 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %23];
    store i32* %24 with i32 %23;
    i32* %25 = getelementptr &(i32* %24)[i64 1];
    i32 %26 = add i32 %23, i32 1;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %24)[i64 2];
    i32 %28 = add i32 %23, i32 2;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %24)[i64 3];
    i32 %30 = add i32 %23, i32 3;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %24)[i64 4];
    i32 %32 = add i32 %23, i32 4;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %24)[i64 5];
    i32 %34 = add i32 %23, i32 5;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %24)[i64 6];
    i32 %36 = add i32 %23, i32 6;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %24)[i64 7];
    i32 %38 = add i32 %23, i32 7;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %24)[i64 8];
    i32 %40 = add i32 %23, i32 8;
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &(i32* %24)[i64 9];
    i32 %42 = add i32 %23, i32 9;
    store i32* %41 with i32 %42;
    i32* %43 = getelementptr &(i32* %24)[i64 10];
    i32 %44 = add i32 %23, i32 10;
    store i32* %43 with i32 %44;
    i32* %45 = getelementptr &(i32* %24)[i64 11];
    i32 %46 = add i32 %23, i32 11;
    store i32* %45 with i32 %46;
    i32* %47 = getelementptr &(i32* %24)[i64 12];
    i32 %48 = add i32 %23, i32 12;
    store i32* %47 with i32 %48;
    i32* %49 = getelementptr &(i32* %24)[i64 13];
    i32 %50 = add i32 %23, i32 13;
    store i32* %49 with i32 %50;
    i32* %51 = getelementptr &(i32* %24)[i64 14];
    i32 %52 = add i32 %23, i32 14;
    store i32* %51 with i32 %52;
    i32* %53 = getelementptr &(i32* %24)[i64 15];
    i32 %54 = add i32 %23, i32 15;
    store i32* %53 with i32 %54;
    i32 %55 = add i32 %23, i32 16;
    i1 %56 = icmp sgt i32 %8, i32 %55;
    cbr i1 %56(prob = 0.89), ^while.body2, ^while.body4;
  ^while.body3:
    i32* %57 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %20];
    i32 %58 = load i32* %57;
    i1 %59 = icmp eq i32 %20, i32 %58;
    i32 %60 = zext i1 %59 to i32;
    i32 %61 = add i32 %19, i32 %60;
    i32 %62 = add i32 %20, i32 1;
    ubr ^while.header1;
  ^while.body4 {scalar}:
    i32 %63 = phi [^super.header1, i32 0] [^while.body2, i32 %55] [^while.body4, i32 %71];
    i32* %64 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %63];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %64)[i64 1];
    i32 %66 = add i32 %63, i32 1;
    store i32* %65 with i32 %66;
    i32* %67 = getelementptr &(i32* %64)[i64 2];
    i32 %68 = add i32 %63, i32 2;
    store i32* %67 with i32 %68;
    i32* %69 = getelementptr &(i32* %64)[i64 3];
    i32 %70 = add i32 %63, i32 3;
    store i32* %69 with i32 %70;
    i32 %71 = add i32 %63, i32 4;
    i1 %72 = icmp sgt i32 %6, i32 %71;
    cbr i1 %72(prob = 0.75), ^while.body4, ^while.body;
  ^while.body5:
    i32 %73 = add i32 %13, i32 1;
    i1 %74 = icmp sgt i32 %2, i32 %73;
    cbr i1 %74(prob = 0.97), ^while.body1, ^while.header1;
  ^b:
    call (i32) -> void @putint(i32 %19);
    ret i32 0;
}
