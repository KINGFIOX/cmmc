internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32) -> i32 {
^entry(i32 %arg):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg;
    cbr i1 %2, [ ^indirect i32 %arg ], [ ^indirect1 i32 %arg, i32 %arg ];
^indirect(i32 %arg):
    ret i32 %arg;
^indirect1(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg1];
    i32 %4 = load i32* %3;
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body i32 %0, i32 %1, i32 0 ], [ ^b i32 %0, i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg2];
    store i32* %0 with i32 %arg2;
    i32 %1 = add i32 %arg2, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg;
    cbr i1 %2, [ ^while.body i32 %arg, i32 %arg1, i32 %1 ], [ ^b i32 %arg, i32 %arg1 ];
^b(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body1 i32 %arg, i32 %arg1, i32 0 ], [ ^b1 i32 %arg ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call (i32) -> i32 @find(i32 %0);
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    i1 %4 = scmp neq i32 %2, i32 %3;
    cbr i1 %4, [ ^indirect i32 %2, i32 %3, i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2 ];
^b1(i32 %arg):
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 0, i32 0 ], [ ^b2 i32 0 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg1];
    store i32* %0 with i32 %arg;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg3;
    cbr i1 %2, [ ^while.body1 i32 %arg2, i32 %arg3, i32 %1 ], [ ^b1 i32 %arg2 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body1 i32 %arg, i32 %arg1, i32 %0 ], [ ^b1 i32 %arg ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg1;
    cbr i1 %2, [ ^indirect1 i32 %arg1, i32 %arg, i32 %arg2 ], [ ^b3 i32 %arg1, i32 %arg, i32 %arg2 ];
^b2(i32 %arg):
    call (i32) -> void @putint(i32 %arg);
    ret i32 0;
^indirect1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i32 %1 = add i32 %arg, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg1;
    cbr i1 %2, [ ^while.body3 i32 %arg1, i32 %1, i32 %0 ], [ ^b2 i32 %0 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body3 i32 %arg1, i32 %0, i32 %arg2 ], [ ^b2 i32 %arg2 ];
}
