internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %root];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %root;
    cbr i1 %2(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %0;
    ubr ^b;
^b:
    i32 %5 = phi [^entry, i32 %root] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^super.header, ^b;
^super.header:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %4];
    i32 %4 = add i32 %3, i32 16;
    i1 %5 = scmp lt i32 %4, i32 %0;
    cbr i1 %5(prob = 0.67), ^while.body, ^super.header1;
^b:
    i1 %6 = scmp gt i32 %1, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body1, ^while.header;
^while.body:
    i32* %7 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %3];
    store i32* %7 with i32 %3;
    i32 %8 = add i32 %3, i32 1;
    i32* %9 = getelementptr &(i32* %7)[i64 1];
    store i32* %9 with i32 %8;
    i32 %10 = add i32 %3, i32 2;
    i32* %11 = getelementptr &(i32* %7)[i64 2];
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %3, i32 3;
    i32* %13 = getelementptr &(i32* %7)[i64 3];
    store i32* %13 with i32 %12;
    i32 %14 = add i32 %3, i32 4;
    i32* %15 = getelementptr &(i32* %7)[i64 4];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %3, i32 5;
    i32* %17 = getelementptr &(i32* %7)[i64 5];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %3, i32 6;
    i32* %19 = getelementptr &(i32* %7)[i64 6];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %3, i32 7;
    i32* %21 = getelementptr &(i32* %7)[i64 7];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %3, i32 8;
    i32* %23 = getelementptr &(i32* %7)[i64 8];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %3, i32 9;
    i32* %25 = getelementptr &(i32* %7)[i64 9];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %3, i32 10;
    i32* %27 = getelementptr &(i32* %7)[i64 10];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %3, i32 11;
    i32* %29 = getelementptr &(i32* %7)[i64 11];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %3, i32 12;
    i32* %31 = getelementptr &(i32* %7)[i64 12];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %3, i32 13;
    i32* %33 = getelementptr &(i32* %7)[i64 13];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %3, i32 14;
    i32* %35 = getelementptr &(i32* %7)[i64 14];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %3, i32 15;
    i32* %37 = getelementptr &(i32* %7)[i64 15];
    store i32* %37 with i32 %36;
    ubr ^super.header;
^super.header1:
    i32 %38 = phi [^super.header, i32 %3] [^while.body2, i32 %39];
    i32 %39 = add i32 %38, i32 16;
    i1 %40 = scmp lt i32 %39, i32 %0;
    cbr i1 %40(prob = 0.67), ^while.body2, ^while.body3;
^while.body1:
    i32 %41 = phi [^b, i32 0] [^while.body5, i32 %89];
    i32 %42 = call () -> i32 @getint();
    i32 %43 = call () -> i32 @getint();
    i32 %44 = call (i32) -> i32 @find(i32 %42);
    i32 %45 = call (i32) -> i32 @find(i32 %43);
    i1 %46 = scmp neq i32 %44, i32 %45;
    cbr i1 %46(prob = 0.5), ^if.then, ^while.body5;
^while.header:
    i32 %47 = phi [^b, i32 0] [^while.body5, i32 0] [^b2, i32 %92];
    i32 %48 = phi [^b, i32 0] [^while.body5, i32 0] [^b2, i32 %93];
    i1 %49 = scmp lt i32 %48, i32 %0;
    cbr i1 %49(prob = 0.97), ^while.body4, ^b1;
^while.body2:
    i32* %50 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %38];
    store i32* %50 with i32 %38;
    i32 %51 = add i32 %38, i32 1;
    i32* %52 = getelementptr &(i32* %50)[i64 1];
    store i32* %52 with i32 %51;
    i32 %53 = add i32 %38, i32 2;
    i32* %54 = getelementptr &(i32* %50)[i64 2];
    store i32* %54 with i32 %53;
    i32 %55 = add i32 %38, i32 3;
    i32* %56 = getelementptr &(i32* %50)[i64 3];
    store i32* %56 with i32 %55;
    i32 %57 = add i32 %38, i32 4;
    i32* %58 = getelementptr &(i32* %50)[i64 4];
    store i32* %58 with i32 %57;
    i32 %59 = add i32 %38, i32 5;
    i32* %60 = getelementptr &(i32* %50)[i64 5];
    store i32* %60 with i32 %59;
    i32 %61 = add i32 %38, i32 6;
    i32* %62 = getelementptr &(i32* %50)[i64 6];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %38, i32 7;
    i32* %64 = getelementptr &(i32* %50)[i64 7];
    store i32* %64 with i32 %63;
    i32 %65 = add i32 %38, i32 8;
    i32* %66 = getelementptr &(i32* %50)[i64 8];
    store i32* %66 with i32 %65;
    i32 %67 = add i32 %38, i32 9;
    i32* %68 = getelementptr &(i32* %50)[i64 9];
    store i32* %68 with i32 %67;
    i32 %69 = add i32 %38, i32 10;
    i32* %70 = getelementptr &(i32* %50)[i64 10];
    store i32* %70 with i32 %69;
    i32 %71 = add i32 %38, i32 11;
    i32* %72 = getelementptr &(i32* %50)[i64 11];
    store i32* %72 with i32 %71;
    i32 %73 = add i32 %38, i32 12;
    i32* %74 = getelementptr &(i32* %50)[i64 12];
    store i32* %74 with i32 %73;
    i32 %75 = add i32 %38, i32 13;
    i32* %76 = getelementptr &(i32* %50)[i64 13];
    store i32* %76 with i32 %75;
    i32 %77 = add i32 %38, i32 14;
    i32* %78 = getelementptr &(i32* %50)[i64 14];
    store i32* %78 with i32 %77;
    i32 %79 = add i32 %38, i32 15;
    i32* %80 = getelementptr &(i32* %50)[i64 15];
    store i32* %80 with i32 %79;
    ubr ^super.header1;
^if.then:
    i32* %81 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %45];
    store i32* %81 with i32 %44;
    ubr ^while.body5;
^while.body3:
    i32 %82 = phi [^super.header1, i32 %38] [^while.body3, i32 %84];
    i32* %83 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %82];
    store i32* %83 with i32 %82;
    i32 %84 = add i32 %82, i32 1;
    i1 %85 = scmp lt i32 %84, i32 %0;
    cbr i1 %85(prob = 0.97), ^while.body3, ^b;
^while.body4:
    i32* %86 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %48];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 %48;
    cbr i1 %88(prob = 0.5), ^if.then1, ^b2;
^while.body5:
    i32 %89 = add i32 %41, i32 1;
    i1 %90 = scmp lt i32 %89, i32 %1;
    cbr i1 %90(prob = 0.97), ^while.body1, ^while.header;
^b1:
    call (i32) -> void @putint(i32 %47);
    ret i32 0;
^if.then1:
    i32 %91 = add i32 %47, i32 1;
    ubr ^b2;
^b2:
    i32 %92 = phi [^while.body4, i32 %47] [^if.then1, i32 %91];
    i32 %93 = add i32 %48, i32 1;
    ubr ^while.header;
}
