internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent, align 8 { Flexible };
internal func @find(i32 %root) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %root];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %root, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else1, ^if.else2;
  ^b:
    i32 %7 = phi [^entry, i32 %root] [^if.else1, i32 %8];
    ret i32 %7;
  ^if.else1:
    i32 %8 = phi [^if.else, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^if.else2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^if.else3;
  ^b1:
    i32 %12 = phi [^if.else2, i32 %5] [^if.else4, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else1;
  ^if.else3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else4, ^if.else5;
  ^if.else4:
    i32 %16 = phi [^if.else3, i32 %10] [^b2, i32 %20];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else5:
    i32* %17 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %14, i32 %18;
    cbr i1 %19(prob = 0.5), ^b2, ^if.else6;
  ^b2:
    i32 %20 = phi [^if.else5, i32 %14] [^if.else7, i32 %24];
    store i32* %13 with i32 %20;
    ubr ^if.else4;
  ^if.else6:
    i32* %21 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %18, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.else7, ^if.else8;
  ^if.else7:
    i32 %24 = phi [^if.else6, i32 %18] [^b3, i32 %28];
    store i32* %17 with i32 %24;
    ubr ^b2;
  ^if.else8:
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %22, i32 %26;
    cbr i1 %27(prob = 0.5), ^b3, ^if.else9;
  ^b3:
    i32 %28 = phi [^if.else8, i32 %22] [^if.else10, i32 %32];
    store i32* %21 with i32 %28;
    ubr ^if.else7;
  ^if.else9:
    i32* %29 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %26];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %26, i32 %30;
    cbr i1 %31(prob = 0.5), ^if.else10, ^if.else11;
  ^if.else10:
    i32 %32 = phi [^if.else9, i32 %26] [^if.else11, i32 %33];
    store i32* %25 with i32 %32;
    ubr ^b3;
  ^if.else11:
    i32 %33 = call (i32) -> i32 @find(i32 %30);
    store i32* %29 with i32 %33;
    ubr ^if.else10;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -20;
    i32 %6 = call () -> i32 @getint();
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    cbr i1 %3(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %4(prob = 0.941176), ^super.header1, ^while.body;
  ^while.header:
    i1 %8 = icmp sgt i32 %6, i32 0;
    cbr i1 %8(prob = 0.984615), ^while.body1, ^while.header1;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body {scalar}:
    i32 %9 = phi [^super.header, i32 0] [^while.body, i32 %11] [^while.body3, i32 %62];
    i32* %10 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %9];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %9, i32 1;
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.75), ^while.body, ^while.header;
  ^while.body1:
    i32 %13 = phi [^while.header, i32 0] [^b, i32 %64];
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32 %16 = call (i32) -> i32 @find(i32 %14);
    i32 %17 = call (i32) -> i32 @find(i32 %15);
    i1 %18 = icmp neq i32 %16, i32 %17;
    cbr i1 %18(prob = 0.5), ^if.then, ^b;
  ^while.header1:
    cbr i1 %3(prob = 0.984615), ^super.header2, ^b1;
  ^if.then:
    i32* %19 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %17];
    store i32* %19 with i32 %16;
    ubr ^b;
  ^while.body2:
    i32 %20 = phi [^super.header1, i32 0] [^while.body2, i32 %52];
    i32* %21 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %20];
    store i32* %21 with i32 %20;
    i32* %22 = getelementptr &(i32* %21)[i64 1];
    i32 %23 = add i32 %20, i32 1;
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %21)[i64 2];
    i32 %25 = add i32 %20, i32 2;
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %21)[i64 3];
    i32 %27 = add i32 %20, i32 3;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %21)[i64 4];
    i32 %29 = add i32 %20, i32 4;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %21)[i64 5];
    i32 %31 = add i32 %20, i32 5;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %21)[i64 6];
    i32 %33 = add i32 %20, i32 6;
    store i32* %32 with i32 %33;
    i32* %34 = getelementptr &(i32* %21)[i64 7];
    i32 %35 = add i32 %20, i32 7;
    store i32* %34 with i32 %35;
    i32* %36 = getelementptr &(i32* %21)[i64 8];
    i32 %37 = add i32 %20, i32 8;
    store i32* %36 with i32 %37;
    i32* %38 = getelementptr &(i32* %21)[i64 9];
    i32 %39 = add i32 %20, i32 9;
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &(i32* %21)[i64 10];
    i32 %41 = add i32 %20, i32 10;
    store i32* %40 with i32 %41;
    i32* %42 = getelementptr &(i32* %21)[i64 11];
    i32 %43 = add i32 %20, i32 11;
    store i32* %42 with i32 %43;
    i32* %44 = getelementptr &(i32* %21)[i64 12];
    i32 %45 = add i32 %20, i32 12;
    store i32* %44 with i32 %45;
    i32* %46 = getelementptr &(i32* %21)[i64 13];
    i32 %47 = add i32 %20, i32 13;
    store i32* %46 with i32 %47;
    i32* %48 = getelementptr &(i32* %21)[i64 14];
    i32 %49 = add i32 %20, i32 14;
    store i32* %48 with i32 %49;
    i32* %50 = getelementptr &(i32* %21)[i64 15];
    i32 %51 = add i32 %20, i32 15;
    store i32* %50 with i32 %51;
    i32 %52 = add i32 %20, i32 16;
    i1 %53 = icmp sgt i32 %5, i32 %52;
    cbr i1 %53(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %54 = phi [^super.header1, i32 0] [^while.body2, i32 %52] [^while.body3, i32 %62];
    i32* %55 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %54];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %55)[i64 1];
    i32 %57 = add i32 %54, i32 1;
    store i32* %56 with i32 %57;
    i32* %58 = getelementptr &(i32* %55)[i64 2];
    i32 %59 = add i32 %54, i32 2;
    store i32* %58 with i32 %59;
    i32* %60 = getelementptr &(i32* %55)[i64 3];
    i32 %61 = add i32 %54, i32 3;
    store i32* %60 with i32 %61;
    i32 %62 = add i32 %54, i32 4;
    i1 %63 = icmp sgt i32 %1, i32 %62;
    cbr i1 %63(prob = 0.75), ^while.body3, ^while.body;
  ^super.header2:
    cbr i1 %4(prob = 0.941176), ^super.header3, ^while.body4;
  ^b:
    i32 %64 = add i32 %13, i32 1;
    i1 %65 = icmp sgt i32 %6, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.body1, ^while.header1;
  ^b1:
    i32 %66 = phi [^while.header1, i32 0] [^while.body4, i32 %73];
    call (i32) -> void @putint(i32 %66);
    ret i32 0;
  ^super.header3:
    cbr i1 %2(prob = 0.941176), ^while.body5, ^while.body6;
  ^while.body4 {scalar}:
    i32 %67 = phi [^super.header2, i32 0] [^while.body4, i32 %74] [^while.body6, i32 %200];
    i32 %68 = phi [^super.header2, i32 0] [^while.body4, i32 %73] [^while.body6, i32 %199];
    i32* %69 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %67];
    i32 %70 = load i32* %69;
    i1 %71 = icmp eq i32 %67, i32 %70;
    i32 %72 = zext i1 %71 to i32;
    i32 %73 = add i32 %68, i32 %72;
    i32 %74 = add i32 %67, i32 1;
    i1 %75 = icmp sgt i32 %0, i32 %74;
    cbr i1 %75(prob = 0.75), ^while.body4, ^b1;
  ^while.body5:
    i32 %76 = phi [^super.header3, i32 0] [^while.body5, i32 %173];
    i32 %77 = phi [^super.header3, i32 0] [^while.body5, i32 %172];
    i32* %78 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %76];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %78)[i64 1];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %76, i32 1;
    i1 %83 = icmp eq i32 %81, i32 %82;
    i32 %84 = zext i1 %83 to i32;
    i1 %85 = icmp eq i32 %76, i32 %79;
    i32 %86 = zext i1 %85 to i32;
    i32 %87 = add i32 %77, i32 %86;
    i32 %88 = add i32 %84, i32 %87;
    i32* %89 = getelementptr &(i32* %78)[i64 2];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %76, i32 2;
    i1 %92 = icmp eq i32 %90, i32 %91;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = add i32 %88, i32 %93;
    i32* %95 = getelementptr &(i32* %78)[i64 3];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %76, i32 3;
    i1 %98 = icmp eq i32 %96, i32 %97;
    i32 %99 = zext i1 %98 to i32;
    i32 %100 = add i32 %94, i32 %99;
    i32* %101 = getelementptr &(i32* %78)[i64 4];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %76, i32 4;
    i1 %104 = icmp eq i32 %102, i32 %103;
    i32 %105 = zext i1 %104 to i32;
    i32 %106 = add i32 %100, i32 %105;
    i32* %107 = getelementptr &(i32* %78)[i64 5];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %76, i32 5;
    i1 %110 = icmp eq i32 %108, i32 %109;
    i32 %111 = zext i1 %110 to i32;
    i32 %112 = add i32 %106, i32 %111;
    i32* %113 = getelementptr &(i32* %78)[i64 6];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %76, i32 6;
    i1 %116 = icmp eq i32 %114, i32 %115;
    i32 %117 = zext i1 %116 to i32;
    i32 %118 = add i32 %112, i32 %117;
    i32* %119 = getelementptr &(i32* %78)[i64 7];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %76, i32 7;
    i1 %122 = icmp eq i32 %120, i32 %121;
    i32 %123 = zext i1 %122 to i32;
    i32 %124 = add i32 %118, i32 %123;
    i32* %125 = getelementptr &(i32* %78)[i64 8];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %76, i32 8;
    i1 %128 = icmp eq i32 %126, i32 %127;
    i32 %129 = zext i1 %128 to i32;
    i32 %130 = add i32 %124, i32 %129;
    i32* %131 = getelementptr &(i32* %78)[i64 9];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %76, i32 9;
    i1 %134 = icmp eq i32 %132, i32 %133;
    i32 %135 = zext i1 %134 to i32;
    i32 %136 = add i32 %130, i32 %135;
    i32* %137 = getelementptr &(i32* %78)[i64 10];
    i32 %138 = load i32* %137;
    i32 %139 = add i32 %76, i32 10;
    i1 %140 = icmp eq i32 %138, i32 %139;
    i32 %141 = zext i1 %140 to i32;
    i32 %142 = add i32 %136, i32 %141;
    i32* %143 = getelementptr &(i32* %78)[i64 11];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %76, i32 11;
    i1 %146 = icmp eq i32 %144, i32 %145;
    i32 %147 = zext i1 %146 to i32;
    i32 %148 = add i32 %142, i32 %147;
    i32* %149 = getelementptr &(i32* %78)[i64 12];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %76, i32 12;
    i1 %152 = icmp eq i32 %150, i32 %151;
    i32 %153 = zext i1 %152 to i32;
    i32 %154 = add i32 %148, i32 %153;
    i32* %155 = getelementptr &(i32* %78)[i64 13];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %76, i32 13;
    i1 %158 = icmp eq i32 %156, i32 %157;
    i32 %159 = zext i1 %158 to i32;
    i32 %160 = add i32 %154, i32 %159;
    i32* %161 = getelementptr &(i32* %78)[i64 14];
    i32 %162 = load i32* %161;
    i32 %163 = add i32 %76, i32 14;
    i1 %164 = icmp eq i32 %162, i32 %163;
    i32 %165 = zext i1 %164 to i32;
    i32 %166 = add i32 %160, i32 %165;
    i32* %167 = getelementptr &(i32* %78)[i64 15];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %76, i32 15;
    i1 %170 = icmp eq i32 %168, i32 %169;
    i32 %171 = zext i1 %170 to i32;
    i32 %172 = add i32 %166, i32 %171;
    i32 %173 = add i32 %76, i32 16;
    i1 %174 = icmp sgt i32 %5, i32 %173;
    cbr i1 %174(prob = 0.941176), ^while.body5, ^while.body6;
  ^while.body6 {scalar}:
    i32 %175 = phi [^super.header3, i32 0] [^while.body5, i32 %172] [^while.body6, i32 %199];
    i32 %176 = phi [^super.header3, i32 0] [^while.body5, i32 %173] [^while.body6, i32 %200];
    i32* %177 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %176];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %177)[i64 1];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %176, i32 1;
    i1 %182 = icmp eq i32 %180, i32 %181;
    i32 %183 = zext i1 %182 to i32;
    i1 %184 = icmp eq i32 %176, i32 %178;
    i32 %185 = zext i1 %184 to i32;
    i32 %186 = add i32 %175, i32 %185;
    i32 %187 = add i32 %183, i32 %186;
    i32* %188 = getelementptr &(i32* %177)[i64 2];
    i32 %189 = load i32* %188;
    i32 %190 = add i32 %176, i32 2;
    i1 %191 = icmp eq i32 %189, i32 %190;
    i32 %192 = zext i1 %191 to i32;
    i32 %193 = add i32 %187, i32 %192;
    i32* %194 = getelementptr &(i32* %177)[i64 3];
    i32 %195 = load i32* %194;
    i32 %196 = add i32 %176, i32 3;
    i1 %197 = icmp eq i32 %195, i32 %196;
    i32 %198 = zext i1 %197 to i32;
    i32 %199 = add i32 %193, i32 %198;
    i32 %200 = add i32 %176, i32 4;
    i1 %201 = icmp sgt i32 %1, i32 %200;
    cbr i1 %201(prob = 0.75), ^while.body6, ^while.body4;
}
