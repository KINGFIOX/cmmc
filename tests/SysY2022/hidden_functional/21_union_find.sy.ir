internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @maxN { ReadOnly } = 1005;
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
^entry:
    i32* %root1 = alloc i32;
    store i32* %root1 with i32 %root;
    i32 %0 = load i32* %root1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %1];
    i32 %3 = load i32* %2;
    i32 %4 = load i32* %root1;
    i1 %5 = scmp eq i32 %3, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %8 = load i32* %root1;
    ret i32 %8;
^if.else:
    i32 %9 = load i32* %root1;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %10];
    i32 %12 = load i32* %root1;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    i32 %16 = call (i32) -> i32 @find(i32 %15);
    store i32* %11 with i32 %16;
    i32 %17 = load i32* %root1;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %18];
    i32 %20 = load i32* %19;
    ret i32 %20;
^b:
    unreachable;
}
internal func @merge(i32 %p, i32 %q) -> void {
^entry:
    i32* %root_q = alloc i32;
    i32* %root_p = alloc i32;
    i32* %q1 = alloc i32;
    i32* %p1 = alloc i32;
    store i32* %p1 with i32 %p;
    store i32* %q1 with i32 %q;
    store i32* %root_p with i32 0;
    store i32* %root_q with i32 0;
    i32 %0 = load i32* %p1;
    i32 %1 = call (i32) -> i32 @find(i32 %0);
    store i32* %root_p with i32 %1;
    i32 %2 = load i32* %q1;
    i32 %3 = call (i32) -> i32 @find(i32 %2);
    store i32* %root_q with i32 %3;
    i32 %4 = load i32* %root_p;
    i32 %5 = load i32* %root_q;
    i1 %6 = scmp neq i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %9 = load i32* %root_q;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %10];
    i32 %12 = load i32* %root_p;
    store i32* %11 with i32 %12;
    ubr ^b;
^b:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %clusters = alloc i32;
    i32* %q = alloc i32;
    i32* %p = alloc i32;
    i32* %i = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %m with i32 %1;
    store i32* %i with i32 0;
    store i32* %p with i32 0;
    store i32* %q with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* %n;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = load i32* %i;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %8];
    i32 %10 = load i32* %i;
    store i32* %9 with i32 %10;
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 1;
    store i32* %i with i32 %12;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %13 = load i32* %i;
    i32 %14 = load i32* %m;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %18 = call () -> i32 @getint();
    store i32* %p with i32 %18;
    i32 %19 = call () -> i32 @getint();
    store i32* %q with i32 %19;
    i32 %20 = load i32* %p;
    i32 %21 = load i32* %q;
    call (i32, i32) -> void @merge(i32 %20, i32 %21);
    i32 %22 = load i32* %i;
    i32 %23 = add i32 %22, i32 1;
    store i32* %i with i32 %23;
    ubr ^while.header1;
^b1:
    store i32* %clusters with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %24 = load i32* %i;
    i32 %25 = load i32* %n;
    i1 %26 = scmp lt i32 %24, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %29 = load i32* %i;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = getelementptr &([1005 * i32]* @parent)[i64 0][i64 %30];
    i32 %32 = load i32* %31;
    i32 %33 = load i32* %i;
    i1 %34 = scmp eq i32 %32, i32 %33;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %37 = load i32* %clusters;
    call (i32) -> void @putint(i32 %37);
    ret i32 0;
^if.then:
    i32 %38 = load i32* %clusters;
    i32 %39 = add i32 %38, i32 1;
    store i32* %clusters with i32 %39;
    ubr ^b3;
^b3:
    i32 %40 = load i32* %i;
    i32 %41 = add i32 %40, i32 1;
    store i32* %i with i32 %41;
    ubr ^while.header2;
}
