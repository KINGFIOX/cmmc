internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32 %root) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %root];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %root;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 %root;
^if.else:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %0;
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 %1];
    i32 %4 = phi [^while.body, i32 %7] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %2;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %6 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %4];
    store i32* %6 with i32 %4;
    i32 %7 = add i32 %4, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %8 = phi [^while.header, i32 %2] [^while.body2, i32 %8];
    i32 %9 = phi [^while.header, i32 %3] [^while.body2, i32 %9];
    i32 %10 = phi [^while.header, i32 0] [^while.body2, i32 %22];
    i1 %11 = scmp lt i32 %10, i32 %9;
    cbr i1 %11(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call (i32) -> i32 @find(i32 %12);
    i32 %15 = call (i32) -> i32 @find(i32 %13);
    i1 %16 = scmp neq i32 %14, i32 %15;
    cbr i1 %16(prob = 0.5), ^if.then, ^while.body2;
^while.header2:
    i32 %17 = phi [^while.header1, i32 %8] [^b1, i32 %17];
    i32 %18 = phi [^while.header1, i32 0] [^b1, i32 %28];
    i32 %19 = phi [^while.header1, i32 0] [^b1, i32 %27];
    i1 %20 = scmp lt i32 %18, i32 %17;
    cbr i1 %20(prob = 0.97), ^while.body3, ^b;
^if.then:
    i32* %21 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %15];
    store i32* %21 with i32 %14;
    ubr ^while.body2;
^while.body2:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header1;
^while.body3:
    i32* %23 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %18];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 %18;
    cbr i1 %25(prob = 0.5), ^if.then1, ^b1;
^b:
    call (i32) -> void @putint(i32 %19);
    ret i32 0;
^if.then1:
    i32 %26 = add i32 %19, i32 1;
    ubr ^b1;
^b1:
    i32 %27 = phi [^if.then1, i32 %26] [^while.body3, i32 %19];
    i32 %28 = add i32 %18, i32 1;
    ubr ^while.header2;
}
