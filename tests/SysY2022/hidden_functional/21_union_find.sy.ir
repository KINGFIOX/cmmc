internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent { Flexible };
internal func @find(i32 %root) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %root];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %root, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %root] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -4;
    i32 %3 = call () -> i32 @getint();
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @parent to [1005 * i32]*;
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header;
  ^super.header:
    i1 %5 = icmp sgt i32 %0, i32 4;
    cbr i1 %5(prob = 0.89), ^while.body, ^while.body1;
  ^while.header:
    i1 %6 = icmp sgt i32 %3, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body:
    i32 %7 = phi [^super.header, i32 0] [^while.body, i32 %15];
    i32* %8 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %7];
    store i32* %8 with i32 %7;
    i32* %9 = getelementptr &(i32* %8)[i64 1];
    i32 %10 = add i32 %7, i32 1;
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(i32* %8)[i64 2];
    i32 %12 = add i32 %7, i32 2;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(i32* %8)[i64 3];
    i32 %14 = add i32 %7, i32 3;
    store i32* %13 with i32 %14;
    i32 %15 = add i32 %7, i32 4;
    i1 %16 = icmp sgt i32 %2, i32 %15;
    cbr i1 %16(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %17 = phi [^super.header, i32 0] [^while.body, i32 %15] [^while.body1, i32 %19];
    i32* %18 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %17];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %17, i32 1;
    i1 %20 = icmp sgt i32 %0, i32 %19;
    cbr i1 %20(prob = 0.75), ^while.body1, ^while.header;
  ^while.body2:
    i32 %21 = phi [^while.header, i32 0] [^while.body4, i32 %37];
    i32 %22 = call () -> i32 @getint();
    i32 %23 = call () -> i32 @getint();
    i32 %24 = call (i32) -> i32 @find(i32 %22);
    i32 %25 = call (i32) -> i32 @find(i32 %23);
    i1 %26 = icmp neq i32 %24, i32 %25;
    cbr i1 %26(prob = 0.5), ^if.then, ^while.body4;
  ^while.header1:
    i32 %27 = phi [^while.header, i32 0] [^while.body3, i32 %35] [^while.body4, i32 0];
    i32 %28 = phi [^while.header, i32 0] [^while.body3, i32 %36] [^while.body4, i32 0];
    i1 %29 = icmp sgt i32 %0, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.body3, ^b;
  ^if.then:
    i32* %30 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %25];
    store i32* %30 with i32 %24;
    ubr ^while.body4;
  ^while.body3:
    i32* %31 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %28];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %28, i32 %32;
    i32 %34 = zext i1 %33 to i32;
    i32 %35 = add i32 %27, i32 %34;
    i32 %36 = add i32 %28, i32 1;
    ubr ^while.header1;
  ^while.body4:
    i32 %37 = add i32 %21, i32 1;
    i1 %38 = icmp sgt i32 %3, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.body2, ^while.header1;
  ^b:
    call (i32) -> void @putint(i32 %27);
    ret i32 0;
}
