internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * i32]* @parent;
internal func @find(i32) -> i32 {
^entry(i32 %arg):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg;
    cbr i1 %2(prob = 0.5), [ ^indirect i32 %arg ], [ ^indirect1 i32* %0, i32 %1, i32* %0 ];
^indirect(i32 %arg):
    ret i32 %arg;
^indirect1(i32* %arg, i32 %arg1, i32* %arg2):
    i32 %0 = call (i32) -> i32 @find(i32 %arg1);
    store i32* %arg with i32 %0;
    i32 %1 = load i32* %arg2;
    ret i32 %1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), [ ^super.header i32 %0, i32 %1, i32 0 ], [ ^b i32 %0, i32 %1, i1 %2 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg, i32 %arg1, i1 %arg2):
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body2 i32 %arg, i32 %arg1, i32 0, i1 %arg2 ], [ ^b1 i32 %arg, i1 %arg2 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %arg2];
    store i32* %0 with i32 %arg2;
    i32 %1 = add i32 %arg2, i32 1;
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    store i32* %2 with i32 %1;
    i32 %3 = add i32 %arg2, i32 2;
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    store i32* %4 with i32 %3;
    i32 %5 = add i32 %arg2, i32 3;
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    store i32* %6 with i32 %5;
    i32 %7 = add i32 %arg2, i32 4;
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    store i32* %8 with i32 %7;
    i32 %9 = add i32 %arg2, i32 5;
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %arg2, i32 6;
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    store i32* %12 with i32 %11;
    i32 %13 = add i32 %arg2, i32 7;
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    store i32* %14 with i32 %13;
    i32 %15 = add i32 %arg2, i32 8;
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %arg2, i32 9;
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %arg2, i32 10;
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %arg2, i32 11;
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %arg2, i32 12;
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    store i32* %24 with i32 %23;
    i32 %25 = add i32 %arg2, i32 13;
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %arg2, i32 14;
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    store i32* %28 with i32 %27;
    i32 %29 = add i32 %arg2, i32 15;
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %arg2, i32 16;
    i1 %32 = scmp lt i32 %31, i32 %arg;
    cbr i1 %32(prob = 0.97), [ ^super.header i32 %arg, i32 %arg1, i32 %31 ], [ ^b i32 %arg, i32 %arg1, i1 true ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %arg2];
    store i32* %0 with i32 %arg2;
    i32 %1 = add i32 %arg2, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg;
    cbr i1 %2(prob = 0.97), [ ^while.body1 i32 %arg, i32 %arg1, i32 %1 ], [ ^b i32 %arg, i32 %arg1, i1 true ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i1 %arg3):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call (i32) -> i32 @find(i32 %0);
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    i1 %4 = scmp neq i32 %2, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^indirect i32 %2, i32 %3, i32 %arg, i32 %arg1, i32 %arg2, i1 %arg3 ], [ ^while.body3 i32 %arg, i32 %arg1, i32 %arg2, i1 %arg3 ];
^b1(i32 %arg, i1 %arg1):
    cbr i1 %arg1(prob = 0.97), [ ^while.body4 i32 %arg, i32 0, i32 0 ], [ ^b2 i32 0 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %arg1];
    store i32* %0 with i32 %arg;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg3;
    cbr i1 %2(prob = 0.97), [ ^while.body2 i32 %arg2, i32 %arg3, i32 %1, i1 %arg5 ], [ ^b1 i32 %arg2, i1 %arg5 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i1 %arg3):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.97), [ ^while.body2 i32 %arg, i32 %arg1, i32 %0, i1 %arg3 ], [ ^b1 i32 %arg, i1 %arg3 ];
^while.body4(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1005 * i32]* @parent)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg1;
    cbr i1 %2(prob = 0.5), [ ^indirect1 i32 %arg1, i32 %arg, i32 %arg2 ], [ ^b3 i32 %arg1, i32 %arg, i32 %arg2 ];
^b2(i32 %arg):
    call (i32) -> void @putint(i32 %arg);
    ret i32 0;
^indirect1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i32 %1 = add i32 %arg, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg1;
    cbr i1 %2(prob = 0.97), [ ^while.body4 i32 %arg1, i32 %1, i32 %0 ], [ ^b2 i32 %0 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.97), [ ^while.body4 i32 %arg1, i32 %0, i32 %arg2 ], [ ^b2 i32 %arg2 ];
}
