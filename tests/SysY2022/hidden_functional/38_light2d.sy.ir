internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, i32* %0) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = fcmp gt f32 %x, f32 0;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
^b:
    f32 %2 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %3 = phi [^entry, f32 %x] [^b, f32 %2];
    i1 %4 = fcmp le f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %5 = fdiv f32 %x, f32 3;
    f32 %6 = call (f32, i32*) -> f32 @my_sin_impl(f32 %5, i32* %0);
    f32 %7 = fmul f32 3, f32 %6;
    f32 %8 = fmul f32 4, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %9, f32 %6;
    f32 %11 = fsub f32 %7, f32 %10;
    ubr ^b3;
^b3:
    f32 %12 = phi [^b1, f32 %x] [^b2, f32 %11];
    ret f32 %12;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32* %seed = alloc i32;
    [2 * f32]* %ret = alloc [2 * f32];
    f32* %0 = getelementptr &([2 * f32]* %ret)[i64 0][i64 0];
    f32* %1 = getelementptr &([2 * f32]* %ret)[i64 0][i64 1];
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^b11, i32 %21];
    i32 %3 = phi [^entry, i32 0] [^b11, i32 %171];
    f32 %4 = s2f i32 %3 to f32;
    f32 %5 = fdiv f32 %4, f32 192;
    ubr ^while.body1;
^while.body1:
    i32 %6 = phi [^while.body, i32 %2] [^b10, i32 %21];
    i32 %7 = phi [^while.body, i32 0] [^b10, i32 %169];
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fdiv f32 %8, f32 192;
    ubr ^while.body2;
^while.body2:
    i32 %10 = phi [^while.body1, i32 %6] [^b8, i32 %21];
    f32 %11 = phi [^while.body1, f32 0] [^b8, f32 %163];
    i32 %12 = phi [^while.body1, i32 0] [^b8, i32 %13];
    i32 %13 = add i32 %12, i32 1;
    i32 %14 = mul i32 %10, i32 19980130;
    i32 %15 = add i32 %14, i32 23333;
    i32 %16 = srem i32 %15, i32 100000007;
    store i32* %seed with i32 %16;
    i1 %17 = scmp lt i32 %13, i32 24;
    i1 %18 = scmp lt i32 %16, i32 0;
    f32 %19 = s2f i32 %12 to f32;
    cbr i1 %18(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %20 = add i32 %16, i32 100000007;
    store i32* %seed with i32 %20;
    ubr ^b;
^b:
    i32 %21 = phi [^while.body2, i32 %16] [^if.then, i32 %20];
    f32 %22 = s2f i32 %21 to f32;
    f32 %23 = fdiv f32 %22, f32 1e+08;
    f32 %24 = fadd f32 %19, f32 %23;
    f32 %25 = fmul f32 6.28319, f32 %24;
    f32 %26 = fdiv f32 %25, f32 24;
    i1 %27 = fcmp lt f32 %26, f32 -6.28319;
    i1 %28 = fcmp gt f32 %26, f32 6.28319;
    i1 %29 = or i1 %27, i1 %28;
    cbr i1 %29(prob = 0.75), ^if.then1, ^b1;
^if.then1:
    f32 %30 = fdiv f32 %26, f32 6.28319;
    i32 %31 = f2s f32 %30 to i32;
    f32 %32 = s2f i32 %31 to f32;
    f32 %33 = fmul f32 %32, f32 6.28319;
    f32 %34 = fsub f32 %26, f32 %33;
    ubr ^b1;
^b1:
    f32 %35 = phi [^b, f32 %26] [^if.then1, f32 %34];
    i1 %36 = fcmp gt f32 %35, f32 3.14159;
    cbr i1 %36(prob = 0.5), ^if.then2, ^b2;
^if.then2:
    f32 %37 = fsub f32 %35, f32 6.28319;
    ubr ^b2;
^b2:
    f32 %38 = phi [^b1, f32 %35] [^if.then2, f32 %37];
    i1 %39 = fcmp lt f32 %38, f32 -3.14159;
    cbr i1 %39(prob = 0.5), ^if.then3, ^b3;
^if.then3:
    f32 %40 = fadd f32 %38, f32 6.28319;
    ubr ^b3;
^b3:
    f32 %41 = phi [^b2, f32 %38] [^if.then3, f32 %40];
    f32 %42 = fadd f32 %26, f32 1.5708;
    i1 %43 = fcmp lt f32 %42, f32 -6.28319;
    i1 %44 = fcmp gt f32 %42, f32 6.28319;
    i1 %45 = or i1 %43, i1 %44;
    f32 %46 = call (f32, i32*) -> f32 @my_sin_impl(f32 %41, i32* %seed);
    cbr i1 %45(prob = 0.75), ^if.then4, ^b4;
^if.then4:
    f32 %47 = fdiv f32 %42, f32 6.28319;
    i32 %48 = f2s f32 %47 to i32;
    f32 %49 = s2f i32 %48 to f32;
    f32 %50 = fmul f32 %49, f32 6.28319;
    f32 %51 = fsub f32 %42, f32 %50;
    ubr ^b4;
^b4:
    f32 %52 = phi [^b3, f32 %42] [^if.then4, f32 %51];
    i1 %53 = fcmp gt f32 %52, f32 3.14159;
    cbr i1 %53(prob = 0.5), ^if.then5, ^b5;
^if.then5:
    f32 %54 = fsub f32 %52, f32 6.28319;
    ubr ^b5;
^b5:
    f32 %55 = phi [^b4, f32 %52] [^if.then5, f32 %54];
    i1 %56 = fcmp lt f32 %55, f32 -3.14159;
    cbr i1 %56(prob = 0.5), ^if.then6, ^b6;
^if.then6:
    f32 %57 = fadd f32 %55, f32 6.28319;
    ubr ^b6;
^b6:
    f32 %58 = phi [^b5, f32 %55] [^if.then6, f32 %57];
    f32 %59 = call (f32, i32*) -> f32 @my_sin_impl(f32 %58, i32* %seed);
    ubr ^while.body3;
^while.body3:
    i32 %60 = phi [^b6, i32 0] [^b7, i32 %157];
    f32 %61 = phi [^b6, f32 0] [^b7, f32 %158];
    f32 %62 = fmul f32 %46, f32 %61;
    f32 %63 = fadd f32 %5, f32 %62;
    f32 %64 = fsub f32 %63, f32 0.4;
    f32 %65 = fsub f32 %63, f32 0.6;
    f32 %66 = fmul f32 %59, f32 %61;
    f32 %67 = fadd f32 %9, f32 %66;
    f32 %68 = fsub f32 %67, f32 0.4;
    f32 %69 = fsub f32 %67, f32 0.6;
    f32 %70 = fmul f32 %64, f32 %64;
    f32 %71 = fmul f32 %65, f32 %65;
    f32 %72 = fmul f32 %68, f32 %68;
    f32 %73 = fadd f32 %72, f32 %70;
    f32 %74 = fadd f32 4, f32 %73;
    f32 %75 = fmul f32 2, f32 %73;
    f32 %76 = fmul f32 %69, f32 %69;
    f32 %77 = fadd f32 %76, f32 %71;
    f32 %78 = fadd f32 4, f32 %77;
    f32 %79 = fmul f32 2, f32 %77;
    f32 %80 = fdiv f32 %73, f32 8;
    f32 %81 = fadd f32 %80, f32 0.5;
    f32 %82 = fdiv f32 %75, f32 %74;
    f32 %83 = fadd f32 %81, f32 %82;
    f32 %84 = fdiv f32 %73, f32 %83;
    f32 %85 = fadd f32 %83, f32 %84;
    f32 %86 = fdiv f32 %77, f32 8;
    f32 %87 = fadd f32 %86, f32 0.5;
    f32 %88 = fdiv f32 %79, f32 %78;
    f32 %89 = fadd f32 %87, f32 %88;
    f32 %90 = fdiv f32 %77, f32 %89;
    f32 %91 = fadd f32 %89, f32 %90;
    f32 %92 = fdiv f32 %85, f32 2;
    f32 %93 = fdiv f32 %73, f32 %92;
    f32 %94 = fadd f32 %92, f32 %93;
    f32 %95 = fdiv f32 %91, f32 2;
    f32 %96 = fdiv f32 %77, f32 %95;
    f32 %97 = fadd f32 %95, f32 %96;
    f32 %98 = fdiv f32 %94, f32 2;
    f32 %99 = fdiv f32 %73, f32 %98;
    f32 %100 = fadd f32 %98, f32 %99;
    f32 %101 = fdiv f32 %97, f32 2;
    f32 %102 = fdiv f32 %77, f32 %101;
    f32 %103 = fadd f32 %101, f32 %102;
    f32 %104 = fdiv f32 %100, f32 2;
    f32 %105 = fdiv f32 %73, f32 %104;
    f32 %106 = fadd f32 %104, f32 %105;
    f32 %107 = fdiv f32 %103, f32 2;
    f32 %108 = fdiv f32 %77, f32 %107;
    f32 %109 = fadd f32 %107, f32 %108;
    f32 %110 = fdiv f32 %106, f32 2;
    f32 %111 = fdiv f32 %73, f32 %110;
    f32 %112 = fadd f32 %110, f32 %111;
    f32 %113 = fdiv f32 %109, f32 2;
    f32 %114 = fdiv f32 %77, f32 %113;
    f32 %115 = fadd f32 %113, f32 %114;
    f32 %116 = fdiv f32 %112, f32 2;
    f32 %117 = fdiv f32 %73, f32 %116;
    f32 %118 = fadd f32 %116, f32 %117;
    f32 %119 = fdiv f32 %115, f32 2;
    f32 %120 = fdiv f32 %77, f32 %119;
    f32 %121 = fadd f32 %119, f32 %120;
    f32 %122 = fdiv f32 %118, f32 2;
    f32 %123 = fdiv f32 %73, f32 %122;
    f32 %124 = fadd f32 %122, f32 %123;
    f32 %125 = fdiv f32 %121, f32 2;
    f32 %126 = fdiv f32 %77, f32 %125;
    f32 %127 = fadd f32 %125, f32 %126;
    f32 %128 = fdiv f32 %124, f32 2;
    f32 %129 = fdiv f32 %73, f32 %128;
    f32 %130 = fadd f32 %128, f32 %129;
    f32 %131 = fdiv f32 %127, f32 2;
    f32 %132 = fdiv f32 %77, f32 %131;
    f32 %133 = fadd f32 %131, f32 %132;
    f32 %134 = fdiv f32 %130, f32 2;
    f32 %135 = fdiv f32 %73, f32 %134;
    f32 %136 = fadd f32 %134, f32 %135;
    f32 %137 = fdiv f32 %133, f32 2;
    f32 %138 = fdiv f32 %77, f32 %137;
    f32 %139 = fadd f32 %137, f32 %138;
    f32 %140 = fdiv f32 %136, f32 2;
    f32 %141 = fdiv f32 %73, f32 %140;
    f32 %142 = fadd f32 %140, f32 %141;
    f32 %143 = fdiv f32 %139, f32 2;
    f32 %144 = fdiv f32 %77, f32 %143;
    f32 %145 = fadd f32 %143, f32 %144;
    f32 %146 = fdiv f32 %142, f32 2;
    f32 %147 = fsub f32 %146, f32 0.1;
    f32 %148 = fdiv f32 %145, f32 2;
    f32 %149 = fsub f32 %148, f32 0.05;
    i1 %150 = fcmp lt f32 %147, f32 %149;
    f32 %151 = select i1 %150 ? f32 3 : f32 0;
    f32 %152 = select i1 %150 ? f32 %147 : f32 %149;
    store f32* %0 with f32 %152;
    store f32* %1 with f32 %151;
    f32 %153 = load f32* %0;
    i1 %154 = fcmp lt f32 %153, f32 1e-06;
    cbr i1 %154(prob = 0.5), ^if.then7, ^b7;
^if.then7:
    f32 %155 = load f32* %1;
    ubr ^b8;
^b7:
    f32 %156 = load f32* %0;
    i32 %157 = add i32 %60, i32 1;
    f32 %158 = fadd f32 %61, f32 %156;
    i1 %159 = scmp lt i32 %157, i32 10;
    i1 %160 = fcmp lt f32 %158, f32 2;
    i1 %161 = and i1 %159, i1 %160;
    cbr i1 %161(prob = 0.48), ^while.body3, ^b8;
^b8:
    f32 %162 = phi [^if.then7, f32 %155] [^b7, f32 0];
    f32 %163 = fadd f32 %11, f32 %162;
    cbr i1 %17(prob = 0.96), ^while.body2, ^b9;
^b9:
    f32 %164 = fdiv f32 %163, f32 24;
    f32 %165 = fmul f32 %164, f32 255;
    i32 %166 = f2s f32 %165 to i32;
    i1 %167 = scmp gt i32 %166, i32 255;
    cbr i1 %167(prob = 0.5), ^if.then8, ^b10;
^if.then8:
    ubr ^b10;
^b10:
    i32 %168 = phi [^b9, i32 %166] [^if.then8, i32 255];
    i32 %169 = add i32 %7, i32 1;
    i1 %170 = scmp lt i32 %169, i32 192;
    call (i32) -> void @putint(i32 %168);
    call (i32) -> void @putch(i32 32);
    cbr i1 %170(prob = 0.99), ^while.body1, ^b11;
^b11:
    i32 %171 = add i32 %3, i32 1;
    i1 %172 = scmp lt i32 %171, i32 192;
    call (i32) -> void @putch(i32 10);
    cbr i1 %172(prob = 0.99), ^while.body, ^entry1;
^entry1:
    ret i32 0;
}
