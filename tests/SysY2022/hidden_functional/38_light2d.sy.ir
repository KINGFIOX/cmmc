internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b4, f32 %20];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = fabs f32 %12;
    i1 %14 = fcmp ole f32 %13, f32 1e-06;
    cbr i1 %14(prob = 0.5), ^b4, ^b5;
  ^b4:
    f32 %15 = phi [^b3, f32 %12] [^b6, f32 %29];
    f32 %16 = fmul f32 %15, f32 4;
    f32 %17 = fmul f32 %16, f32 %15;
    f32 %18 = fmul f32 %17, f32 %15;
    f32 %19 = fmul f32 %15, f32 3;
    f32 %20 = fsub f32 %19, f32 %18;
    ubr ^b2;
  ^b5:
    f32 %21 = fdiv f32 %12, f32 3;
    f32 %22 = fabs f32 %21;
    i1 %23 = fcmp ole f32 %22, f32 1e-06;
    cbr i1 %23(prob = 0.5), ^b6, ^b7;
  ^b6:
    f32 %24 = phi [^b5, f32 %21] [^b7, f32 %36];
    f32 %25 = fmul f32 %24, f32 4;
    f32 %26 = fmul f32 %25, f32 %24;
    f32 %27 = fmul f32 %26, f32 %24;
    f32 %28 = fmul f32 %24, f32 3;
    f32 %29 = fsub f32 %28, f32 %27;
    ubr ^b4;
  ^b7:
    f32 %30 = fdiv f32 %21, f32 3;
    f32 %31 = call (f32) -> f32 @my_sin_impl(f32 %30);
    f32 %32 = fmul f32 %31, f32 4;
    f32 %33 = fmul f32 %32, f32 %31;
    f32 %34 = fmul f32 %33, f32 %31;
    f32 %35 = fmul f32 %31, f32 3;
    f32 %36 = fsub f32 %35, f32 %34;
    ubr ^b6;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 0] [^b5, i32 %16];
    i32 %1 = phi [^entry, i32 0] [^b5, i32 %165];
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fdiv f32 %2, f32 192;
    ubr ^while.body1;
  ^while.body1:
    i32 %4 = phi [^while.body, i32 %0] [^b4, i32 %16];
    i32 %5 = phi [^while.body, i32 0] [^b4, i32 %163];
    f32 %6 = s2f i32 %5 to f32;
    f32 %7 = fdiv f32 %6, f32 192;
    ubr ^while.body2;
  ^while.body2:
    i32 %8 = phi [^while.body1, i32 %4] [^b2, i32 %16];
    i32 %9 = phi [^while.body1, i32 0] [^b2, i32 %155];
    f32 %10 = phi [^while.body1, f32 0] [^b2, f32 %154];
    i32 %11 = mul i32 %8, i32 19980130;
    i32 %12 = add i32 %11, i32 23333;
    i32 %13 = srem i32 %12, i32 100000007;
    i1 %14 = icmp slt i32 %13, i32 0;
    i32 %15 = add i32 %13, i32 100000007;
    i32 %16 = select i1 %14 ? i32 %15 : i32 %13;
    f32 %17 = s2f i32 %16 to f32;
    f32 %18 = fdiv f32 %17, f32 1e+08;
    f32 %19 = s2f i32 %9 to f32;
    f32 %20 = fadd f32 %19, f32 %18;
    f32 %21 = fmul f32 %20, f32 6.28319;
    f32 %22 = fdiv f32 %21, f32 24;
    f32 %23 = fadd f32 %22, f32 1.5708;
    i1 %24 = fcmp ogt f32 %23, f32 6.28319;
    i1 %25 = fcmp olt f32 %23, f32 -6.28319;
    i1 %26 = or i1 %24, i1 %25;
    cbr i1 %26(prob = 0.5), ^if.then, ^b;
  ^if.then:
    f32 %27 = fdiv f32 %23, f32 6.28319;
    i32 %28 = f2s f32 %27 to i32;
    f32 %29 = s2f i32 %28 to f32;
    f32 %30 = fmul f32 %29, f32 6.28319;
    f32 %31 = fsub f32 %23, f32 %30;
    ubr ^b;
  ^b:
    f32 %32 = phi [^while.body2, f32 %23] [^if.then, f32 %31];
    i1 %33 = fcmp ogt f32 %32, f32 3.14159;
    f32 %34 = fsub f32 %32, f32 6.28319;
    f32 %35 = select i1 %33 ? f32 %34 : f32 %32;
    i1 %36 = fcmp olt f32 %35, f32 -3.14159;
    f32 %37 = fadd f32 %35, f32 6.28319;
    f32 %38 = select i1 %36 ? f32 %37 : f32 %35;
    f32 %39 = call (f32) -> f32 @my_sin_impl(f32 %38);
    i1 %40 = fcmp ogt f32 %22, f32 6.28319;
    i1 %41 = fcmp olt f32 %22, f32 -6.28319;
    i1 %42 = or i1 %40, i1 %41;
    cbr i1 %42(prob = 0.5), ^if.then1, ^b1;
  ^if.then1:
    f32 %43 = fdiv f32 %22, f32 6.28319;
    i32 %44 = f2s f32 %43 to i32;
    f32 %45 = s2f i32 %44 to f32;
    f32 %46 = fmul f32 %45, f32 6.28319;
    f32 %47 = fsub f32 %22, f32 %46;
    ubr ^b1;
  ^b1:
    f32 %48 = phi [^b, f32 %22] [^if.then1, f32 %47];
    i1 %49 = fcmp ogt f32 %48, f32 3.14159;
    f32 %50 = fsub f32 %48, f32 6.28319;
    f32 %51 = select i1 %49 ? f32 %50 : f32 %48;
    i1 %52 = fcmp olt f32 %51, f32 -3.14159;
    f32 %53 = fadd f32 %51, f32 6.28319;
    f32 %54 = select i1 %52 ? f32 %53 : f32 %51;
    f32 %55 = call (f32) -> f32 @my_sin_impl(f32 %54);
    ubr ^while.header;
  ^while.header:
    f32 %56 = phi [^b1, f32 0] [^b3, f32 %157];
    i32 %57 = phi [^b1, i32 0] [^b3, i32 %158];
    i1 %58 = icmp slt i32 %57, i32 10;
    i1 %59 = fcmp olt f32 %56, f32 2;
    i1 %60 = and i1 %58, i1 %59;
    cbr i1 %60(prob = 0.984615), ^while.body3, ^b2;
  ^while.body3:
    f32 %61 = fmul f32 %39, f32 %56;
    f32 %62 = fadd f32 %7, f32 %61;
    f32 %63 = fsub f32 %62, f32 0.4;
    f32 %64 = fmul f32 %63, f32 %63;
    f32 %65 = fmul f32 %55, f32 %56;
    f32 %66 = fadd f32 %3, f32 %65;
    f32 %67 = fsub f32 %66, f32 0.4;
    f32 %68 = fmul f32 %67, f32 %67;
    f32 %69 = fadd f32 %64, f32 %68;
    f32 %70 = fadd f32 %69, f32 %69;
    f32 %71 = fadd f32 %69, f32 4;
    f32 %72 = fdiv f32 %70, f32 %71;
    f32 %73 = fmul f32 %69, f32 0.125;
    f32 %74 = fadd f32 %73, f32 0.5;
    f32 %75 = fadd f32 %74, f32 %72;
    f32 %76 = fdiv f32 %69, f32 %75;
    f32 %77 = fadd f32 %75, f32 %76;
    f32 %78 = fmul f32 %77, f32 0.5;
    f32 %79 = fdiv f32 %69, f32 %78;
    f32 %80 = fadd f32 %78, f32 %79;
    f32 %81 = fmul f32 %80, f32 0.5;
    f32 %82 = fdiv f32 %69, f32 %81;
    f32 %83 = fadd f32 %81, f32 %82;
    f32 %84 = fmul f32 %83, f32 0.5;
    f32 %85 = fdiv f32 %69, f32 %84;
    f32 %86 = fadd f32 %84, f32 %85;
    f32 %87 = fmul f32 %86, f32 0.5;
    f32 %88 = fdiv f32 %69, f32 %87;
    f32 %89 = fadd f32 %87, f32 %88;
    f32 %90 = fmul f32 %89, f32 0.5;
    f32 %91 = fdiv f32 %69, f32 %90;
    f32 %92 = fadd f32 %90, f32 %91;
    f32 %93 = fmul f32 %92, f32 0.5;
    f32 %94 = fdiv f32 %69, f32 %93;
    f32 %95 = fadd f32 %93, f32 %94;
    f32 %96 = fmul f32 %95, f32 0.5;
    f32 %97 = fdiv f32 %69, f32 %96;
    f32 %98 = fadd f32 %96, f32 %97;
    f32 %99 = fmul f32 %98, f32 0.5;
    f32 %100 = fdiv f32 %69, f32 %99;
    f32 %101 = fadd f32 %99, f32 %100;
    f32 %102 = fmul f32 %101, f32 0.5;
    f32 %103 = fdiv f32 %69, f32 %102;
    f32 %104 = fadd f32 %102, f32 %103;
    f32 %105 = fmul f32 %104, f32 0.5;
    f32 %106 = fsub f32 %105, f32 0.1;
    f32 %107 = fsub f32 %62, f32 0.6;
    f32 %108 = fmul f32 %107, f32 %107;
    f32 %109 = fsub f32 %66, f32 0.6;
    f32 %110 = fmul f32 %109, f32 %109;
    f32 %111 = fadd f32 %108, f32 %110;
    f32 %112 = fadd f32 %111, f32 %111;
    f32 %113 = fadd f32 %111, f32 4;
    f32 %114 = fdiv f32 %112, f32 %113;
    f32 %115 = fmul f32 %111, f32 0.125;
    f32 %116 = fadd f32 %115, f32 0.5;
    f32 %117 = fadd f32 %116, f32 %114;
    f32 %118 = fdiv f32 %111, f32 %117;
    f32 %119 = fadd f32 %117, f32 %118;
    f32 %120 = fmul f32 %119, f32 0.5;
    f32 %121 = fdiv f32 %111, f32 %120;
    f32 %122 = fadd f32 %120, f32 %121;
    f32 %123 = fmul f32 %122, f32 0.5;
    f32 %124 = fdiv f32 %111, f32 %123;
    f32 %125 = fadd f32 %123, f32 %124;
    f32 %126 = fmul f32 %125, f32 0.5;
    f32 %127 = fdiv f32 %111, f32 %126;
    f32 %128 = fadd f32 %126, f32 %127;
    f32 %129 = fmul f32 %128, f32 0.5;
    f32 %130 = fdiv f32 %111, f32 %129;
    f32 %131 = fadd f32 %129, f32 %130;
    f32 %132 = fmul f32 %131, f32 0.5;
    f32 %133 = fdiv f32 %111, f32 %132;
    f32 %134 = fadd f32 %132, f32 %133;
    f32 %135 = fmul f32 %134, f32 0.5;
    f32 %136 = fdiv f32 %111, f32 %135;
    f32 %137 = fadd f32 %135, f32 %136;
    f32 %138 = fmul f32 %137, f32 0.5;
    f32 %139 = fdiv f32 %111, f32 %138;
    f32 %140 = fadd f32 %138, f32 %139;
    f32 %141 = fmul f32 %140, f32 0.5;
    f32 %142 = fdiv f32 %111, f32 %141;
    f32 %143 = fadd f32 %141, f32 %142;
    f32 %144 = fmul f32 %143, f32 0.5;
    f32 %145 = fdiv f32 %111, f32 %144;
    f32 %146 = fadd f32 %144, f32 %145;
    f32 %147 = fmul f32 %146, f32 0.5;
    f32 %148 = fsub f32 %147, f32 0.05;
    i1 %149 = fcmp olt f32 %106, f32 %148;
    f32 %150 = select i1 %149 ? f32 %106 : f32 %148;
    i1 %151 = fcmp olt f32 %150, f32 1e-06;
    f32 %152 = select i1 %149 ? f32 3 : f32 0;
    cbr i1 %151(prob = 0.5), ^b2, ^b3;
  ^b2:
    f32 %153 = phi [^while.header, f32 0] [^while.body3, f32 %152];
    f32 %154 = fadd f32 %10, f32 %153;
    i32 %155 = add i32 %9, i32 1;
    i1 %156 = icmp slt i32 %155, i32 24;
    cbr i1 %156(prob = 0.958333), ^while.body2, ^b4;
  ^b3:
    f32 %157 = fadd f32 %56, f32 %150;
    i32 %158 = add i32 %57, i32 1;
    ubr ^while.header;
  ^b4:
    f32 %159 = fdiv f32 %154, f32 24;
    f32 %160 = fmul f32 %159, f32 255;
    i32 %161 = f2s f32 %160 to i32;
    i32 %162 = smin i32 %161, i32 255;
    call (i32) -> void @putint(i32 %162);
    call (i32) -> void @putch(i32 32);
    i32 %163 = add i32 %5, i32 1;
    i1 %164 = icmp slt i32 %163, i32 192;
    cbr i1 %164(prob = 0.994792), ^while.body1, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %165 = add i32 %1, i32 1;
    i1 %166 = icmp slt i32 %165, i32 192;
    cbr i1 %166(prob = 0.994792), ^while.body, ^b6;
  ^b6:
    ret i32 0;
}
