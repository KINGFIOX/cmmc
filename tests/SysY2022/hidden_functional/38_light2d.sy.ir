internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32, i32*) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(f32 %arg, i32* %arg1):
    i1 %0 = fcmp gt f32 %arg, f32 0;
    cbr i1 %0(prob = 0.5), [ ^entry1 f32 %arg, i32* %arg1, f32 %arg ], [ ^indirect f32 %arg, f32 %arg, i32* %arg1 ];
^entry1(f32 %arg, i32* %arg1, f32 %arg2):
    i1 %0 = fcmp le f32 %arg, f32 1e-06;
    cbr i1 %0(prob = 0.5), [ ^indirect1 f32 %arg2 ], [ ^indirect2 f32 %arg2, i32* %arg1 ];
^indirect(f32 %arg, f32 %arg1, i32* %arg2):
    f32 %0 = fneg f32 %arg;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), [ ^indirect1 f32 %arg1 ], [ ^indirect2 f32 %arg1, i32* %arg2 ];
^indirect1(f32 %arg):
    ret f32 %arg;
^indirect2(f32 %arg, i32* %arg1):
    f32 %0 = fdiv f32 %arg, f32 3;
    f32 %1 = call (f32, i32*) -> f32 @my_sin_impl(f32 %0, i32* %arg1);
    f32 %2 = fmul f32 3, f32 %1;
    f32 %3 = fmul f32 4, f32 %1;
    f32 %4 = fmul f32 %3, f32 %1;
    f32 %5 = fmul f32 %4, f32 %1;
    f32 %6 = fsub f32 %2, f32 %5;
    ret f32 %6;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32* %seed = alloc i32;
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr [ ^while.body i32* %seed, i32 0, i32 0, i32 0 ];
^while.body(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    f32 %0 = s2f i32 %arg3 to f32;
    f32 %1 = s2f i32 %arg2 to f32;
    f32 %2 = fdiv f32 %0, f32 192;
    f32 %3 = fdiv f32 %1, f32 192;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    ubr [ ^entry1 f32* %sum, i32* %arg, i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, f32 %2, f32 %3, f32 0, i32 0 ];
^entry1(f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32 %arg9):
    i32 %0 = mul i32 %arg3, i32 19980130;
    i32 %1 = add i32 %0, i32 23333;
    i32 %2 = srem i32 %1, i32 100000007;
    i1 %3 = scmp lt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), [ ^indirect i32 %2, i32* %arg1, f32* %arg, i32* %arg2, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32 %arg9 ], [ ^while.body1 i32 %2, i32* %arg1, f32* %arg, i32* %arg2, i32 %2, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32 %arg9 ];
^indirect(i32 %arg, i32* %arg1, f32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg, i32 100000007;
    ubr [ ^while.body1 i32 %0, i32* %arg1, f32* %arg2, i32* %arg3, i32 %0, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32 %arg9 ];
^while.body1(i32 %arg, i32* %arg1, f32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10):
    f32 %0 = s2f i32 %arg to f32;
    f32 %1 = fdiv f32 %0, f32 1e+08;
    f32 %2 = s2f i32 %arg10 to f32;
    f32 %3 = fadd f32 %2, f32 %1;
    f32 %4 = fmul f32 6.28319, f32 %3;
    f32 %5 = fdiv f32 %4, f32 24;
    f32 %6 = fadd f32 %5, f32 1.5708;
    f32* %x = alloc f32;
    store f32* %x with f32 %6;
    i1 %7 = fcmp gt f32 %6, f32 6.28319;
    cbr i1 %7(prob = 0.5), [ ^if.then f32* %x, i32* %arg1, f32 %5, i32* %arg1, f32 %arg9, f32* %arg2, f32 %arg8, f32 %arg7, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i32 %arg10, f32 %6 ], [ ^indirect1 f32* %x, f32 %6, i32* %arg1, f32 %5, i32* %arg1, f32 %arg9, f32* %arg2, f32 %arg8, f32 %arg7, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i32 %arg10, f32 %6 ];
^if.then(f32* %arg, i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    f32 %0 = fdiv f32 %arg15, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg15, f32 %3;
    store f32* %arg with f32 %4;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then1 f32* %arg, i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %4 ], [ ^indirect2 i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %4 ];
^indirect1(f32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, i32* %arg4, f32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16):
    i1 %0 = fcmp lt f32 %arg1, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then f32* %arg, i32* %arg2, f32 %arg3, i32* %arg4, f32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16 ], [ ^indirect3 f32* %arg, i32* %arg2, f32 %arg3, i32* %arg4, f32 %arg5, f32* %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16 ];
^if.then1(f32* %arg, i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    f32 %0 = fsub f32 %arg15, f32 6.28319;
    store f32* %arg with f32 %0;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then2 i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %0 ], [ ^indirect4 i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %0 ];
^indirect2(i32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14):
    i1 %0 = fcmp lt f32 %arg14, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then2 i32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14 ], [ ^indirect4 i32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14 ];
^indirect3(f32* %arg, i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    i1 %0 = fcmp gt f32 %arg15, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then1 f32* %arg, i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15 ], [ ^indirect2 i32* %arg1, f32 %arg2, i32* %arg3, f32 %arg4, f32* %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15 ];
^if.then2(i32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fadd f32 %arg14, f32 6.28319;
    f32 %1 = call (f32, i32*) -> f32 @my_sin_impl(f32 %0, i32* %arg);
    f32* %x = alloc f32;
    store f32* %x with f32 %arg1;
    i1 %2 = fcmp gt f32 %arg1, f32 6.28319;
    cbr i1 %2(prob = 0.5), [ ^if.then3 f32* %x, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg2, f32 %1, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg1 ], [ ^indirect5 f32* %x, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg2, f32 %1, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg1 ];
^indirect4(i32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = call (f32, i32*) -> f32 @my_sin_impl(f32 %arg14, i32* %arg);
    f32* %x = alloc f32;
    store f32* %x with f32 %arg1;
    i1 %1 = fcmp gt f32 %arg1, f32 6.28319;
    cbr i1 %1(prob = 0.5), [ ^if.then3 f32* %x, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg2, f32 %0, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg1 ], [ ^indirect5 f32* %x, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg2, f32 %0, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg1 ];
^if.then3(f32* %arg, i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    f32 %0 = fdiv f32 %arg15, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg15, f32 %3;
    store f32* %arg with f32 %4;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5(prob = 0.5), [ ^if.then4 f32* %arg, i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %4 ], [ ^indirect6 i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %4 ];
^indirect5(f32* %arg, f32 %arg1, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16):
    i1 %0 = fcmp lt f32 %arg1, f32 -6.28319;
    cbr i1 %0(prob = 0.5), [ ^if.then3 f32* %arg, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16 ], [ ^indirect7 f32* %arg, i32* %arg2, f32 %arg3, f32* %arg4, i32* %arg5, f32 %arg6, f32 %arg7, f32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16 ];
^if.then4(f32* %arg, i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    f32 %0 = fsub f32 %arg15, f32 6.28319;
    store f32* %arg with f32 %0;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then5 i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %0 ], [ ^b f32 %0, i32* %arg1, f32 %arg7, f32 %arg6, f32 %arg5, i32* %arg4, f32* %arg3, f32 %arg2, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14 ];
^indirect6(i32* %arg, f32 %arg1, f32* %arg2, i32* %arg3, f32 %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14):
    i1 %0 = fcmp lt f32 %arg14, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then5 i32* %arg, f32 %arg1, f32* %arg2, i32* %arg3, f32 %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14 ], [ ^b f32 %arg14, i32* %arg, f32 %arg6, f32 %arg5, f32 %arg4, i32* %arg3, f32* %arg2, f32 %arg1, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13 ];
^indirect7(f32* %arg, i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15):
    i1 %0 = fcmp gt f32 %arg15, f32 3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then4 f32* %arg, i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15 ], [ ^indirect6 i32* %arg1, f32 %arg2, f32* %arg3, i32* %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg15 ];
^if.then5(i32* %arg, f32 %arg1, f32* %arg2, i32* %arg3, f32 %arg4, f32 %arg5, f32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fadd f32 %arg14, f32 6.28319;
    ubr [ ^b f32 %0, i32* %arg, f32 %arg6, f32 %arg5, f32 %arg4, i32* %arg3, f32* %arg2, f32 %arg1, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13 ];
^b(f32 %arg, i32* %arg1, f32 %arg2, f32 %arg3, f32 %arg4, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14):
    f32 %0 = call (f32, i32*) -> f32 @my_sin_impl(f32 %arg, i32* %arg1);
    f32* %t = alloc f32;
    store f32* %t with f32 0;
    ubr [ ^b1 f32* %t, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, i32 %arg14, f32 %arg2, f32 %arg3, f32 %arg4, f32 %0, f32 0, i32 0 ];
^b1(f32* %arg, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, i32 %arg16):
    i1 %0 = fcmp lt f32 %arg15, f32 2;
    cbr i1 %0(prob = 0.97), [ ^while.body2 f32* %arg, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, i32 %arg16 ], [ ^while.body3 f32 0, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10 ];
^while.body2(f32* %arg, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, i32 %arg16):
    [2 * f32]* %ret = alloc [2 * f32];
    f32 %0 = ffma f32 %arg13, f32 %arg15, f32 %arg11;
    f32 %1 = ffma f32 %arg14, f32 %arg15, f32 %arg12;
    f32* %2 = getelementptr &([2 * f32]* %ret)[i64 0][i64 0];
    f32 %3 = fsub f32 %0, f32 0.4;
    f32 %4 = fsub f32 %1, f32 0.4;
    f32 %5 = fmul f32 %4, f32 %4;
    f32 %6 = ffma f32 %3, f32 %3, f32 %5;
    f32 %7 = fdiv f32 %6, f32 8;
    f32 %8 = fadd f32 %7, f32 0.5;
    f32 %9 = fmul f32 2, f32 %6;
    f32 %10 = fadd f32 4, f32 %6;
    f32 %11 = fdiv f32 %9, f32 %10;
    f32 %12 = fadd f32 %8, f32 %11;
    f32 %13 = fdiv f32 %6, f32 %12;
    f32 %14 = fadd f32 %12, f32 %13;
    f32 %15 = fdiv f32 %14, f32 2;
    f32 %16 = fdiv f32 %6, f32 %15;
    f32 %17 = fadd f32 %15, f32 %16;
    f32 %18 = fdiv f32 %17, f32 2;
    f32 %19 = fdiv f32 %6, f32 %18;
    f32 %20 = fadd f32 %18, f32 %19;
    f32 %21 = fdiv f32 %20, f32 2;
    f32 %22 = fdiv f32 %6, f32 %21;
    f32 %23 = fadd f32 %21, f32 %22;
    f32 %24 = fdiv f32 %23, f32 2;
    f32 %25 = fdiv f32 %6, f32 %24;
    f32 %26 = fadd f32 %24, f32 %25;
    f32 %27 = fdiv f32 %26, f32 2;
    f32 %28 = fdiv f32 %6, f32 %27;
    f32 %29 = fadd f32 %27, f32 %28;
    f32 %30 = fdiv f32 %29, f32 2;
    f32 %31 = fdiv f32 %6, f32 %30;
    f32 %32 = fadd f32 %30, f32 %31;
    f32 %33 = fdiv f32 %32, f32 2;
    f32 %34 = fdiv f32 %6, f32 %33;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fdiv f32 %35, f32 2;
    f32 %37 = fdiv f32 %6, f32 %36;
    f32 %38 = fadd f32 %36, f32 %37;
    f32 %39 = fdiv f32 %38, f32 2;
    f32 %40 = fdiv f32 %6, f32 %39;
    f32 %41 = fadd f32 %39, f32 %40;
    f32 %42 = fdiv f32 %41, f32 2;
    f32 %43 = fsub f32 %42, f32 0.1;
    f32 %44 = fsub f32 %0, f32 0.6;
    f32 %45 = fsub f32 %1, f32 0.6;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = ffma f32 %44, f32 %44, f32 %46;
    f32 %48 = fdiv f32 %47, f32 8;
    f32 %49 = fadd f32 %48, f32 0.5;
    f32 %50 = fmul f32 2, f32 %47;
    f32 %51 = fadd f32 4, f32 %47;
    f32 %52 = fdiv f32 %50, f32 %51;
    f32 %53 = fadd f32 %49, f32 %52;
    f32 %54 = fdiv f32 %47, f32 %53;
    f32 %55 = fadd f32 %53, f32 %54;
    f32 %56 = fdiv f32 %55, f32 2;
    f32 %57 = fdiv f32 %47, f32 %56;
    f32 %58 = fadd f32 %56, f32 %57;
    f32 %59 = fdiv f32 %58, f32 2;
    f32 %60 = fdiv f32 %47, f32 %59;
    f32 %61 = fadd f32 %59, f32 %60;
    f32 %62 = fdiv f32 %61, f32 2;
    f32 %63 = fdiv f32 %47, f32 %62;
    f32 %64 = fadd f32 %62, f32 %63;
    f32 %65 = fdiv f32 %64, f32 2;
    f32 %66 = fdiv f32 %47, f32 %65;
    f32 %67 = fadd f32 %65, f32 %66;
    f32 %68 = fdiv f32 %67, f32 2;
    f32 %69 = fdiv f32 %47, f32 %68;
    f32 %70 = fadd f32 %68, f32 %69;
    f32 %71 = fdiv f32 %70, f32 2;
    f32 %72 = fdiv f32 %47, f32 %71;
    f32 %73 = fadd f32 %71, f32 %72;
    f32 %74 = fdiv f32 %73, f32 2;
    f32 %75 = fdiv f32 %47, f32 %74;
    f32 %76 = fadd f32 %74, f32 %75;
    f32 %77 = fdiv f32 %76, f32 2;
    f32 %78 = fdiv f32 %47, f32 %77;
    f32 %79 = fadd f32 %77, f32 %78;
    f32 %80 = fdiv f32 %79, f32 2;
    f32 %81 = fdiv f32 %47, f32 %80;
    f32 %82 = fadd f32 %80, f32 %81;
    f32 %83 = fdiv f32 %82, f32 2;
    f32 %84 = fsub f32 %83, f32 0.05;
    i1 %85 = fcmp lt f32 %43, f32 %84;
    cbr i1 %85(prob = 0.5), [ ^indirect8 f32 %43, f32* %2, f32* %arg, [2 * f32]* %ret, f32* %2, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, [2 * f32]* %ret, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, i32 %arg16 ], [ ^indirect9 f32 %84, f32* %2, f32* %arg, [2 * f32]* %ret, f32* %2, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, [2 * f32]* %ret, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, i32 %arg16 ];
^while.body3(f32 %arg, i32* %arg1, f32* %arg2, f32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10):
    f32 %0 = fadd f32 %arg3, f32 %arg;
    store f32* %arg2 with f32 %0;
    i32 %1 = add i32 %arg10, i32 1;
    i1 %2 = scmp lt i32 %1, i32 24;
    cbr i1 %2(prob = 0.97), [ ^entry1 f32* %arg2, i32* %arg1, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %0, i32 %1 ], [ ^b2 i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %0 ];
^indirect8(f32 %arg, f32* %arg1, f32* %arg2, [2 * f32]* %arg3, f32* %arg4, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, [2 * f32]* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i32 %arg21):
    store f32* %arg1 with f32 %arg;
    f32* %0 = getelementptr &([2 * f32]* %arg9)[i64 0][i64 1];
    store f32* %0 with f32 3;
    f32 %1 = load f32* %arg4;
    i1 %2 = fcmp lt f32 %1, f32 1e-06;
    cbr i1 %2(prob = 0.5), [ ^if.then6 [2 * f32]* %arg3, f32 %arg7, f32* %arg6, i32* %arg5, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15 ], [ ^indirect10 f32* %arg2, f32 %1, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i32 %arg21 ];
^indirect9(f32 %arg, f32* %arg1, f32* %arg2, [2 * f32]* %arg3, f32* %arg4, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, [2 * f32]* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i32 %arg21):
    store f32* %arg1 with f32 %arg;
    f32* %0 = getelementptr &([2 * f32]* %arg9)[i64 0][i64 1];
    store f32* %0 with f32 0;
    f32 %1 = load f32* %arg4;
    i1 %2 = fcmp lt f32 %1, f32 1e-06;
    cbr i1 %2(prob = 0.5), [ ^if.then6 [2 * f32]* %arg3, f32 %arg7, f32* %arg6, i32* %arg5, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15 ], [ ^indirect10 f32* %arg2, f32 %1, i32* %arg5, f32* %arg6, f32 %arg7, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i32 %arg21 ];
^b2(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    f32 %0 = fdiv f32 %arg4, f32 24;
    f32 %1 = fmul f32 %0, f32 255;
    i32 %2 = f2s f32 %1 to i32;
    i1 %3 = scmp gt i32 %2, i32 255;
    i32 %4 = select i1 %3 ? i32 255 : i32 %2;
    call (i32) -> void @putint(i32 %4);
    call (i32) -> void @putch(i32 32);
    i32 %5 = add i32 %arg3, i32 1;
    i1 %6 = scmp lt i32 %5, i32 192;
    cbr i1 %6(prob = 0.97), [ ^while.body i32* %arg, i32 %arg1, i32 %arg2, i32 %5 ], [ ^b3 i32* %arg, i32 %arg1, i32 %arg2 ];
^if.then6([2 * f32]* %arg, f32 %arg1, f32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10):
    f32* %0 = getelementptr &([2 * f32]* %arg)[i64 0][i64 1];
    f32 %1 = load f32* %0;
    ubr [ ^while.body3 f32 %1, i32* %arg3, f32* %arg2, f32 %arg1, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10 ];
^indirect10(f32* %arg, f32 %arg1, i32* %arg2, f32* %arg3, f32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, i32 %arg17):
    f32 %0 = fadd f32 %arg16, f32 %arg1;
    store f32* %arg with f32 %0;
    i32 %1 = add i32 %arg17, i32 1;
    i1 %2 = scmp lt i32 %1, i32 10;
    cbr i1 %2(prob = 0.5), [ ^b1 f32* %arg, i32* %arg2, f32* %arg3, f32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %0, i32 %1 ], [ ^while.body3 f32 0, i32* %arg2, f32* %arg3, f32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg9, f32 %arg10, i32 %arg11 ];
^b3(i32* %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 192;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg, i32 %arg1, i32 %0, i32 0 ], [ ^entry2 ];
^entry2():
    ret i32 0;
}
