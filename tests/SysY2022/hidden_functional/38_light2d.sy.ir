internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x, i32* %0) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = fcmp gt f32 %x, f32 0;
    cbr i1 %1(prob = 0.5), ^entry1, ^b;
^b:
    f32 %2 = fneg f32 %x;
    ubr ^entry1;
^entry1:
    f32 %3 = phi [^entry, f32 %x] [^b, f32 %2];
    i1 %4 = fcmp le f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^if.then, ^b1;
^if.then:
    ret f32 %x;
^b1:
    f32 %5 = fdiv f32 %x, f32 3;
    f32 %6 = call (f32, i32*) -> f32 @my_sin_impl(f32 %5, i32* %0);
    f32 %7 = fmul f32 3, f32 %6;
    f32 %8 = fmul f32 4, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %9, f32 %6;
    f32 %11 = fsub f32 %7, f32 %10;
    ret f32 %11;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [2 * f32]* %ret = alloc [2 * f32];
    i32* %seed = alloc i32;
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^b, i32 %4] [^entry, i32 0];
    i32 %1 = phi [^b, i32 %13] [^entry, i32 0];
    i32 %2 = phi [^entry, i32 0] [^b, i32 %13];
    i1 %3 = scmp lt i32 %2, i32 192;
    cbr i1 %3(prob = 0.97), ^while.header1, ^entry1;
^while.header1:
    i32 %4 = phi [^while.header, i32 %0] [^b2, i32 %14];
    i32 %5 = phi [^while.header, i32 0] [^b2, i32 %33];
    i32 %6 = phi [^while.header, i32 %1] [^b2, i32 %20];
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %33];
    i1 %8 = scmp lt i32 %7, i32 192;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^entry1:
    ret i32 0;
^while.body:
    f32 %9 = s2f i32 %5 to f32;
    f32 %10 = s2f i32 %6 to f32;
    f32 %11 = fdiv f32 %9, f32 192;
    f32 %12 = fdiv f32 %10, f32 192;
    ubr ^while.header2;
^b:
    call (i32) -> void @putch(i32 10);
    i32 %13 = add i32 %6, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %14 = phi [^while.body2, i32 %111] [^while.body, i32 %4];
    f32 %15 = phi [^while.body2, f32 %112] [^while.body, f32 %11];
    f32 %16 = phi [^while.body2, f32 %113] [^while.body, f32 %12];
    f32 %17 = phi [^while.body2, f32 %118] [^while.body, f32 0];
    i32 %18 = phi [^while.body2, i32 %119] [^while.body, i32 0];
    i32 %19 = phi [^while.body2, i32 %115] [^while.body, i32 %5];
    i32 %20 = phi [^while.body2, i32 %116] [^while.body, i32 %6];
    i32 %21 = phi [^while.body, i32 0] [^while.body2, i32 %119];
    i1 %22 = scmp lt i32 %21, i32 24;
    cbr i1 %22(prob = 0.97), ^entry2, ^b1;
^entry2:
    i32 %23 = mul i32 %14, i32 19980130;
    i32 %24 = add i32 %23, i32 23333;
    i32 %25 = srem i32 %24, i32 100000007;
    i1 %26 = scmp lt i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^b3;
^b1:
    f32 %27 = fdiv f32 %17, f32 24;
    f32 %28 = fmul f32 %27, f32 255;
    i32 %29 = f2s f32 %28 to i32;
    i1 %30 = scmp gt i32 %29, i32 255;
    cbr i1 %30(prob = 0.5), ^if.then1, ^b2;
^if.then:
    i32 %31 = add i32 %25, i32 100000007;
    ubr ^b3;
^if.then1:
    ubr ^b2;
^b2:
    i32 %32 = phi [^b1, i32 %29] [^if.then1, i32 255];
    call (i32) -> void @putint(i32 %32);
    call (i32) -> void @putch(i32 32);
    i32 %33 = add i32 %19, i32 1;
    ubr ^while.header1;
^b3:
    i32 %34 = phi [^if.then, i32 %31] [^entry2, i32 %25];
    i32 %35 = phi [^entry2, i32 %25] [^if.then, i32 %31];
    f32 %36 = s2f i32 %35 to f32;
    f32 %37 = fdiv f32 %36, f32 1e+08;
    f32 %38 = s2f i32 %18 to f32;
    f32 %39 = fadd f32 %38, f32 %37;
    f32 %40 = fmul f32 6.28319, f32 %39;
    f32 %41 = fdiv f32 %40, f32 24;
    f32 %42 = fadd f32 %41, f32 1.5708;
    i1 %43 = fcmp gt f32 %42, f32 6.28319;
    cbr i1 %43(prob = 0.5), ^b5, ^b4;
^b4:
    i1 %44 = fcmp lt f32 %42, f32 -6.28319;
    ubr ^b5;
^b5:
    i1 %45 = phi [^b3, i1 true] [^b4, i1 %44];
    cbr i1 %45(prob = 0.5), ^if.then2, ^b6;
^if.then2:
    f32 %46 = fdiv f32 %42, f32 6.28319;
    i32 %47 = f2s f32 %46 to i32;
    f32 %48 = s2f i32 %47 to f32;
    f32 %49 = fmul f32 %48, f32 6.28319;
    f32 %50 = fsub f32 %42, f32 %49;
    ubr ^b6;
^b6:
    f32 %51 = phi [^b5, f32 %42] [^if.then2, f32 %50];
    f32 %52 = phi [^b5, f32 %42] [^if.then2, f32 %50];
    i1 %53 = fcmp gt f32 %52, f32 3.14159;
    cbr i1 %53(prob = 0.5), ^if.then3, ^b7;
^if.then3:
    f32 %54 = fsub f32 %51, f32 6.28319;
    ubr ^b7;
^b7:
    f32 %55 = phi [^b6, f32 %51] [^if.then3, f32 %54];
    f32 %56 = phi [^b6, f32 %51] [^if.then3, f32 %54];
    i1 %57 = fcmp lt f32 %56, f32 -3.14159;
    cbr i1 %57(prob = 0.5), ^if.then4, ^b8;
^if.then4:
    f32 %58 = fadd f32 %55, f32 6.28319;
    ubr ^b8;
^b8:
    f32 %59 = phi [^if.then4, f32 %58] [^b7, f32 %55];
    f32 %60 = call (f32, i32*) -> f32 @my_sin_impl(f32 %59, i32* %seed);
    i1 %61 = fcmp gt f32 %41, f32 6.28319;
    cbr i1 %61(prob = 0.5), ^b10, ^b9;
^b9:
    i1 %62 = fcmp lt f32 %41, f32 -6.28319;
    ubr ^b10;
^b10:
    i1 %63 = phi [^b8, i1 true] [^b9, i1 %62];
    cbr i1 %63(prob = 0.5), ^if.then5, ^b11;
^if.then5:
    f32 %64 = fdiv f32 %41, f32 6.28319;
    i32 %65 = f2s f32 %64 to i32;
    f32 %66 = s2f i32 %65 to f32;
    f32 %67 = fmul f32 %66, f32 6.28319;
    f32 %68 = fsub f32 %41, f32 %67;
    ubr ^b11;
^b11:
    f32 %69 = phi [^b10, f32 %41] [^if.then5, f32 %68];
    f32 %70 = phi [^b10, f32 %41] [^if.then5, f32 %68];
    i1 %71 = fcmp gt f32 %70, f32 3.14159;
    cbr i1 %71(prob = 0.5), ^if.then6, ^b12;
^if.then6:
    f32 %72 = fsub f32 %69, f32 6.28319;
    ubr ^b12;
^b12:
    f32 %73 = phi [^b11, f32 %69] [^if.then6, f32 %72];
    f32 %74 = phi [^b11, f32 %69] [^if.then6, f32 %72];
    i1 %75 = fcmp lt f32 %74, f32 -3.14159;
    cbr i1 %75(prob = 0.5), ^if.then7, ^b13;
^if.then7:
    f32 %76 = fadd f32 %73, f32 6.28319;
    ubr ^b13;
^b13:
    f32 %77 = phi [^b12, f32 %73] [^if.then7, f32 %76];
    f32 %78 = call (f32, i32*) -> f32 @my_sin_impl(f32 %77, i32* %seed);
    ubr ^while.header3;
^while.header3:
    i32 %79 = phi [^b18, i32 %153] [^b13, i32 %34];
    f32 %80 = phi [^b18, f32 %154] [^b13, f32 %15];
    f32 %81 = phi [^b18, f32 %155] [^b13, f32 %16];
    i32 %82 = phi [^b18, i32 %156] [^b13, i32 %18];
    i32 %83 = phi [^b18, i32 %183] [^b13, i32 0];
    f32 %84 = phi [^b18, f32 %182] [^b13, f32 0];
    f32 %85 = phi [^b18, f32 %162] [^b13, f32 %78];
    f32 %86 = phi [^b18, f32 %163] [^b13, f32 %60];
    f32 %87 = phi [^b18, f32 %164] [^b13, f32 %16];
    f32 %88 = phi [^b18, f32 %165] [^b13, f32 %15];
    i32 %89 = phi [^b18, i32 %166] [^b13, i32 %19];
    i32 %90 = phi [^b18, i32 %167] [^b13, i32 %20];
    i32 %91 = phi [^b13, i32 0] [^b18, i32 %183];
    i1 %92 = scmp lt i32 %91, i32 10;
    cbr i1 %92(prob = 0.5), ^b14, ^b15;
^b14:
    i1 %93 = fcmp lt f32 %84, f32 2;
    ubr ^b15;
^b15:
    i1 %94 = phi [^b14, i1 %93] [^while.header3, i1 false];
    cbr i1 %94(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    f32 %95 = fmul f32 %86, f32 %84;
    f32 %96 = fadd f32 %88, f32 %95;
    f32 %97 = fmul f32 %85, f32 %84;
    f32 %98 = fadd f32 %87, f32 %97;
    f32* %99 = getelementptr &([2 * f32]* %ret)[i64 0][i64 0];
    f32 %100 = fsub f32 %96, f32 0.4;
    f32 %101 = fsub f32 %98, f32 0.4;
    f32 %102 = fmul f32 %100, f32 %100;
    f32 %103 = fmul f32 %101, f32 %101;
    f32 %104 = fadd f32 %102, f32 %103;
    f32 %105 = fdiv f32 %104, f32 8;
    f32 %106 = fadd f32 %105, f32 0.5;
    f32 %107 = fmul f32 2, f32 %104;
    f32 %108 = fadd f32 4, f32 %104;
    f32 %109 = fdiv f32 %107, f32 %108;
    f32 %110 = fadd f32 %106, f32 %109;
    ubr ^while.header4;
^while.body2:
    i32 %111 = phi [^if.then9, i32 %153] [^b15, i32 %79];
    f32 %112 = phi [^if.then9, f32 %154] [^b15, f32 %80];
    f32 %113 = phi [^if.then9, f32 %155] [^b15, f32 %81];
    i32 %114 = phi [^if.then9, i32 %156] [^b15, i32 %82];
    i32 %115 = phi [^if.then9, i32 %166] [^b15, i32 %89];
    i32 %116 = phi [^if.then9, i32 %167] [^b15, i32 %90];
    f32 %117 = phi [^b15, f32 0] [^if.then9, f32 %181];
    f32 %118 = fadd f32 %17, f32 %117;
    i32 %119 = add i32 %114, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %120 = phi [^while.body3, i32 %120] [^while.body1, i32 %79];
    f32 %121 = phi [^while.body3, f32 %121] [^while.body1, f32 %80];
    f32 %122 = phi [^while.body3, f32 %122] [^while.body1, f32 %81];
    i32 %123 = phi [^while.body3, i32 %123] [^while.body1, i32 %82];
    f32 %124 = phi [^while.body3, f32 %124] [^while.body1, f32 %104];
    f32 %125 = phi [^while.body3, f32 %139] [^while.body1, f32 %110];
    i32 %126 = phi [^while.body3, i32 %140] [^while.body1, i32 10];
    i32 %127 = phi [^while.body3, i32 %127] [^while.body1, i32 %83];
    f32 %128 = phi [^while.body3, f32 %128] [^while.body1, f32 %84];
    f32 %129 = phi [^while.body3, f32 %129] [^while.body1, f32 %85];
    f32 %130 = phi [^while.body3, f32 %130] [^while.body1, f32 %86];
    f32 %131 = phi [^while.body3, f32 %131] [^while.body1, f32 %87];
    f32 %132 = phi [^while.body3, f32 %132] [^while.body1, f32 %88];
    i32 %133 = phi [^while.body3, i32 %133] [^while.body1, i32 %89];
    i32 %134 = phi [^while.body3, i32 %134] [^while.body1, i32 %90];
    i32 %135 = phi [^while.body1, i32 10] [^while.body3, i32 %140];
    i1 %136 = scmp neq i32 %135, i32 0;
    cbr i1 %136(prob = 0.97), ^while.body3, ^b16;
^while.body3:
    f32 %137 = fdiv f32 %124, f32 %125;
    f32 %138 = fadd f32 %125, f32 %137;
    f32 %139 = fdiv f32 %138, f32 2;
    i32 %140 = add i32 %126, i32 -1;
    ubr ^while.header4;
^b16:
    f32 %141 = fsub f32 %125, f32 0.1;
    f32 %142 = fsub f32 %96, f32 0.6;
    f32 %143 = fsub f32 %98, f32 0.6;
    f32 %144 = fmul f32 %142, f32 %142;
    f32 %145 = fmul f32 %143, f32 %143;
    f32 %146 = fadd f32 %144, f32 %145;
    f32 %147 = fdiv f32 %146, f32 8;
    f32 %148 = fadd f32 %147, f32 0.5;
    f32 %149 = fmul f32 2, f32 %146;
    f32 %150 = fadd f32 4, f32 %146;
    f32 %151 = fdiv f32 %149, f32 %150;
    f32 %152 = fadd f32 %148, f32 %151;
    ubr ^while.header5;
^while.header5:
    i32 %153 = phi [^while.body4, i32 %153] [^b16, i32 %120];
    f32 %154 = phi [^while.body4, f32 %154] [^b16, f32 %121];
    f32 %155 = phi [^while.body4, f32 %155] [^b16, f32 %122];
    i32 %156 = phi [^while.body4, i32 %156] [^b16, i32 %123];
    f32 %157 = phi [^while.body4, f32 %157] [^b16, f32 %146];
    f32 %158 = phi [^while.body4, f32 %172] [^b16, f32 %152];
    i32 %159 = phi [^while.body4, i32 %173] [^b16, i32 10];
    i32 %160 = phi [^while.body4, i32 %160] [^b16, i32 %127];
    f32 %161 = phi [^while.body4, f32 %161] [^b16, f32 %128];
    f32 %162 = phi [^while.body4, f32 %162] [^b16, f32 %129];
    f32 %163 = phi [^while.body4, f32 %163] [^b16, f32 %130];
    f32 %164 = phi [^while.body4, f32 %164] [^b16, f32 %131];
    f32 %165 = phi [^while.body4, f32 %165] [^b16, f32 %132];
    i32 %166 = phi [^while.body4, i32 %166] [^b16, i32 %133];
    i32 %167 = phi [^while.body4, i32 %167] [^b16, i32 %134];
    i32 %168 = phi [^b16, i32 10] [^while.body4, i32 %173];
    i1 %169 = scmp neq i32 %168, i32 0;
    cbr i1 %169(prob = 0.97), ^while.body4, ^b17;
^while.body4:
    f32 %170 = fdiv f32 %157, f32 %158;
    f32 %171 = fadd f32 %158, f32 %170;
    f32 %172 = fdiv f32 %171, f32 2;
    i32 %173 = add i32 %159, i32 -1;
    ubr ^while.header5;
^b17:
    f32 %174 = fsub f32 %158, f32 0.05;
    i1 %175 = fcmp lt f32 %141, f32 %174;
    cbr i1 %175(prob = 0.5), ^if.then8, ^if.else;
^if.then8:
    store f32* %99 with f32 %141;
    f32* %176 = getelementptr &([2 * f32]* %ret)[i64 0][i64 1];
    store f32* %176 with f32 3;
    ubr ^while.body5;
^if.else:
    store f32* %99 with f32 %174;
    f32* %177 = getelementptr &([2 * f32]* %ret)[i64 0][i64 1];
    store f32* %177 with f32 0;
    ubr ^while.body5;
^while.body5:
    f32 %178 = load f32* %99;
    i1 %179 = fcmp lt f32 %178, f32 1e-06;
    cbr i1 %179(prob = 0.5), ^if.then9, ^b18;
^if.then9:
    f32* %180 = getelementptr &([2 * f32]* %ret)[i64 0][i64 1];
    f32 %181 = load f32* %180;
    ubr ^while.body2;
^b18:
    f32 %182 = fadd f32 %161, f32 %178;
    i32 %183 = add i32 %160, i32 1;
    ubr ^while.header3;
}
