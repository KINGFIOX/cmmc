internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^while.header:
    i32 %0 = phi [^entry, i32 0] [^b5, i32 %17];
    i32 %1 = phi [^entry, i32 0] [^b5, i32 %166];
    i1 %2 = icmp slt i32 %1, i32 192;
    cbr i1 %2(prob = 0.97), ^while.header1, ^entry1;
  ^while.header1:
    f32 %3 = s2f i32 %1 to f32;
    f32 %4 = fdiv f32 %3, f32 192;
    ubr ^while.body;
  ^entry1:
    ret i32 0;
  ^while.body:
    i32 %5 = phi [^while.header1, i32 %0] [^b4, i32 %17];
    i32 %6 = phi [^while.header1, i32 0] [^b4, i32 %164];
    f32 %7 = s2f i32 %6 to f32;
    f32 %8 = fdiv f32 %7, f32 192;
    ubr ^while.body1;
  ^while.body1:
    i32 %9 = phi [^while.body, i32 %5] [^b2, i32 %17];
    i32 %10 = phi [^while.body, i32 0] [^b2, i32 %156];
    f32 %11 = phi [^while.body, f32 0] [^b2, f32 %155];
    i32 %12 = mul i32 %9, i32 19980130;
    i32 %13 = add i32 %12, i32 23333;
    i32 %14 = srem i32 %13, i32 100000007;
    i1 %15 = icmp slt i32 %14, i32 0;
    i32 %16 = add i32 %14, i32 100000007;
    i32 %17 = select i1 %15 ? i32 %16 : i32 %14;
    f32 %18 = s2f i32 %17 to f32;
    f32 %19 = fdiv f32 %18, f32 1e+08;
    f32 %20 = s2f i32 %10 to f32;
    f32 %21 = fadd f32 %20, f32 %19;
    f32 %22 = fmul f32 %21, f32 6.28319;
    f32 %23 = fdiv f32 %22, f32 24;
    f32 %24 = fadd f32 %23, f32 1.5708;
    i1 %25 = fcmp ogt f32 %24, f32 6.28319;
    i1 %26 = fcmp olt f32 %24, f32 -6.28319;
    i1 %27 = or i1 %25, i1 %26;
    cbr i1 %27(prob = 0.5), ^if.then, ^b;
  ^if.then:
    f32 %28 = fdiv f32 %24, f32 6.28319;
    i32 %29 = f2s f32 %28 to i32;
    f32 %30 = s2f i32 %29 to f32;
    f32 %31 = fmul f32 %30, f32 6.28319;
    f32 %32 = fsub f32 %24, f32 %31;
    ubr ^b;
  ^b:
    f32 %33 = phi [^while.body1, f32 %24] [^if.then, f32 %32];
    i1 %34 = fcmp ogt f32 %33, f32 3.14159;
    f32 %35 = fsub f32 %33, f32 6.28319;
    f32 %36 = select i1 %34 ? f32 %35 : f32 %33;
    i1 %37 = fcmp olt f32 %36, f32 -3.14159;
    f32 %38 = fadd f32 %36, f32 6.28319;
    f32 %39 = select i1 %37 ? f32 %38 : f32 %36;
    f32 %40 = call (f32) -> f32 @my_sin_impl(f32 %39);
    i1 %41 = fcmp ogt f32 %23, f32 6.28319;
    i1 %42 = fcmp olt f32 %23, f32 -6.28319;
    i1 %43 = or i1 %41, i1 %42;
    cbr i1 %43(prob = 0.5), ^if.then1, ^b1;
  ^if.then1:
    f32 %44 = fdiv f32 %23, f32 6.28319;
    i32 %45 = f2s f32 %44 to i32;
    f32 %46 = s2f i32 %45 to f32;
    f32 %47 = fmul f32 %46, f32 6.28319;
    f32 %48 = fsub f32 %23, f32 %47;
    ubr ^b1;
  ^b1:
    f32 %49 = phi [^b, f32 %23] [^if.then1, f32 %48];
    i1 %50 = fcmp ogt f32 %49, f32 3.14159;
    f32 %51 = fsub f32 %49, f32 6.28319;
    f32 %52 = select i1 %50 ? f32 %51 : f32 %49;
    i1 %53 = fcmp olt f32 %52, f32 -3.14159;
    f32 %54 = fadd f32 %52, f32 6.28319;
    f32 %55 = select i1 %53 ? f32 %54 : f32 %52;
    f32 %56 = call (f32) -> f32 @my_sin_impl(f32 %55);
    ubr ^while.header2;
  ^while.header2:
    f32 %57 = phi [^b1, f32 0] [^b3, f32 %158];
    i32 %58 = phi [^b1, i32 0] [^b3, i32 %159];
    i1 %59 = icmp slt i32 %58, i32 10;
    i1 %60 = fcmp olt f32 %57, f32 2;
    i1 %61 = and i1 %59, i1 %60;
    cbr i1 %61(prob = 0.97), ^while.body2, ^b2;
  ^while.body2:
    f32 %62 = fmul f32 %40, f32 %57;
    f32 %63 = fadd f32 %8, f32 %62;
    f32 %64 = fsub f32 %63, f32 0.4;
    f32 %65 = fmul f32 %64, f32 %64;
    f32 %66 = fmul f32 %56, f32 %57;
    f32 %67 = fadd f32 %4, f32 %66;
    f32 %68 = fsub f32 %67, f32 0.4;
    f32 %69 = fmul f32 %68, f32 %68;
    f32 %70 = fadd f32 %65, f32 %69;
    f32 %71 = fadd f32 %70, f32 %70;
    f32 %72 = fadd f32 %70, f32 4;
    f32 %73 = fdiv f32 %71, f32 %72;
    f32 %74 = fmul f32 %70, f32 0.125;
    f32 %75 = fadd f32 %74, f32 0.5;
    f32 %76 = fadd f32 %75, f32 %73;
    f32 %77 = fdiv f32 %70, f32 %76;
    f32 %78 = fadd f32 %76, f32 %77;
    f32 %79 = fmul f32 %78, f32 0.5;
    f32 %80 = fdiv f32 %70, f32 %79;
    f32 %81 = fadd f32 %79, f32 %80;
    f32 %82 = fmul f32 %81, f32 0.5;
    f32 %83 = fdiv f32 %70, f32 %82;
    f32 %84 = fadd f32 %82, f32 %83;
    f32 %85 = fmul f32 %84, f32 0.5;
    f32 %86 = fdiv f32 %70, f32 %85;
    f32 %87 = fadd f32 %85, f32 %86;
    f32 %88 = fmul f32 %87, f32 0.5;
    f32 %89 = fdiv f32 %70, f32 %88;
    f32 %90 = fadd f32 %88, f32 %89;
    f32 %91 = fmul f32 %90, f32 0.5;
    f32 %92 = fdiv f32 %70, f32 %91;
    f32 %93 = fadd f32 %91, f32 %92;
    f32 %94 = fmul f32 %93, f32 0.5;
    f32 %95 = fdiv f32 %70, f32 %94;
    f32 %96 = fadd f32 %94, f32 %95;
    f32 %97 = fmul f32 %96, f32 0.5;
    f32 %98 = fdiv f32 %70, f32 %97;
    f32 %99 = fadd f32 %97, f32 %98;
    f32 %100 = fmul f32 %99, f32 0.5;
    f32 %101 = fdiv f32 %70, f32 %100;
    f32 %102 = fadd f32 %100, f32 %101;
    f32 %103 = fmul f32 %102, f32 0.5;
    f32 %104 = fdiv f32 %70, f32 %103;
    f32 %105 = fadd f32 %103, f32 %104;
    f32 %106 = fmul f32 %105, f32 0.5;
    f32 %107 = fsub f32 %106, f32 0.1;
    f32 %108 = fsub f32 %63, f32 0.6;
    f32 %109 = fmul f32 %108, f32 %108;
    f32 %110 = fsub f32 %67, f32 0.6;
    f32 %111 = fmul f32 %110, f32 %110;
    f32 %112 = fadd f32 %109, f32 %111;
    f32 %113 = fadd f32 %112, f32 %112;
    f32 %114 = fadd f32 %112, f32 4;
    f32 %115 = fdiv f32 %113, f32 %114;
    f32 %116 = fmul f32 %112, f32 0.125;
    f32 %117 = fadd f32 %116, f32 0.5;
    f32 %118 = fadd f32 %117, f32 %115;
    f32 %119 = fdiv f32 %112, f32 %118;
    f32 %120 = fadd f32 %118, f32 %119;
    f32 %121 = fmul f32 %120, f32 0.5;
    f32 %122 = fdiv f32 %112, f32 %121;
    f32 %123 = fadd f32 %121, f32 %122;
    f32 %124 = fmul f32 %123, f32 0.5;
    f32 %125 = fdiv f32 %112, f32 %124;
    f32 %126 = fadd f32 %124, f32 %125;
    f32 %127 = fmul f32 %126, f32 0.5;
    f32 %128 = fdiv f32 %112, f32 %127;
    f32 %129 = fadd f32 %127, f32 %128;
    f32 %130 = fmul f32 %129, f32 0.5;
    f32 %131 = fdiv f32 %112, f32 %130;
    f32 %132 = fadd f32 %130, f32 %131;
    f32 %133 = fmul f32 %132, f32 0.5;
    f32 %134 = fdiv f32 %112, f32 %133;
    f32 %135 = fadd f32 %133, f32 %134;
    f32 %136 = fmul f32 %135, f32 0.5;
    f32 %137 = fdiv f32 %112, f32 %136;
    f32 %138 = fadd f32 %136, f32 %137;
    f32 %139 = fmul f32 %138, f32 0.5;
    f32 %140 = fdiv f32 %112, f32 %139;
    f32 %141 = fadd f32 %139, f32 %140;
    f32 %142 = fmul f32 %141, f32 0.5;
    f32 %143 = fdiv f32 %112, f32 %142;
    f32 %144 = fadd f32 %142, f32 %143;
    f32 %145 = fmul f32 %144, f32 0.5;
    f32 %146 = fdiv f32 %112, f32 %145;
    f32 %147 = fadd f32 %145, f32 %146;
    f32 %148 = fmul f32 %147, f32 0.5;
    f32 %149 = fsub f32 %148, f32 0.05;
    i1 %150 = fcmp olt f32 %107, f32 %149;
    f32 %151 = select i1 %150 ? f32 %107 : f32 %149;
    i1 %152 = fcmp olt f32 %151, f32 1e-06;
    f32 %153 = select i1 %150 ? f32 3 : f32 0;
    cbr i1 %152(prob = 0.5), ^b2, ^b3;
  ^b2:
    f32 %154 = phi [^while.header2, f32 0] [^while.body2, f32 %153];
    f32 %155 = fadd f32 %11, f32 %154;
    i32 %156 = add i32 %10, i32 1;
    i1 %157 = icmp slt i32 %156, i32 24;
    cbr i1 %157(prob = 0.96), ^while.body1, ^b4;
  ^b3:
    f32 %158 = fadd f32 %57, f32 %151;
    i32 %159 = add i32 %58, i32 1;
    ubr ^while.header2;
  ^b4:
    f32 %160 = fdiv f32 %155, f32 24;
    f32 %161 = fmul f32 %160, f32 255;
    i32 %162 = f2s f32 %161 to i32;
    i32 %163 = smin i32 %162, i32 255;
    call (i32) -> void @putint(i32 %163);
    call (i32) -> void @putch(i32 32);
    i32 %164 = add i32 %6, i32 1;
    i1 %165 = icmp slt i32 %164, i32 192;
    cbr i1 %165(prob = 0.99), ^while.body, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %166 = add i32 %1, i32 1;
    ubr ^while.header;
}
