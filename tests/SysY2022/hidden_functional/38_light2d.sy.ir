internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 3, f32 %5;
    f32 %7 = fmul f32 4, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 %8, f32 %5;
    f32 %10 = fsub f32 %6, f32 %9;
    ubr ^b3;
^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [2 * f32]* %ret = alloc [2 * f32];
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 192);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    f32* %0 = getelementptr &([2 * f32]* %ret)[i64 0][i64 0];
    f32* %1 = getelementptr &([2 * f32]* %ret)[i64 0][i64 1];
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 0] [^b11, i32 %19];
    i32 %3 = phi [^entry, i32 0] [^b11, i32 %170];
    i1 %4 = scmp lt i32 %3, i32 192;
    f32 %5 = s2f i32 %3 to f32;
    f32 %6 = fdiv f32 %5, f32 192;
    cbr i1 %4(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %7 = phi [^while.header, i32 %2] [^b9, i32 %19];
    i32 %8 = phi [^while.header, i32 0] [^b9, i32 %165];
    f32 %9 = s2f i32 %8 to f32;
    f32 %10 = fdiv f32 %9, f32 192;
    ubr ^while.body1;
^entry1:
    ret i32 0;
^while.body1:
    i32 %11 = phi [^while.body, i32 %7] [^b8, i32 %19];
    f32 %12 = phi [^while.body, f32 0] [^b8, f32 %64];
    i32 %13 = phi [^while.body, i32 0] [^b8, i32 %65];
    i32 %14 = mul i32 %11, i32 19980130;
    i32 %15 = add i32 %14, i32 23333;
    i32 %16 = srem i32 %15, i32 100000007;
    i1 %17 = scmp lt i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %18 = add i32 %16, i32 100000007;
    ubr ^b;
^b:
    i32 %19 = phi [^while.body1, i32 %16] [^if.then, i32 %18];
    f32 %20 = s2f i32 %19 to f32;
    f32 %21 = fdiv f32 %20, f32 1e+08;
    f32 %22 = s2f i32 %13 to f32;
    f32 %23 = fadd f32 %22, f32 %21;
    f32 %24 = fmul f32 6.28319, f32 %23;
    f32 %25 = fdiv f32 %24, f32 24;
    f32 %26 = fadd f32 %25, f32 1.5708;
    i1 %27 = fcmp gt f32 %26, f32 6.28319;
    i1 %28 = fcmp lt f32 %26, f32 -6.28319;
    i1 %29 = or i1 %27, i1 %28;
    cbr i1 %29(prob = 0.75), ^if.then1, ^b1;
^if.then1:
    f32 %30 = fdiv f32 %26, f32 6.28319;
    i32 %31 = f2s f32 %30 to i32;
    f32 %32 = s2f i32 %31 to f32;
    f32 %33 = fmul f32 %32, f32 6.28319;
    f32 %34 = fsub f32 %26, f32 %33;
    ubr ^b1;
^b1:
    f32 %35 = phi [^b, f32 %26] [^if.then1, f32 %34];
    i1 %36 = fcmp gt f32 %35, f32 3.14159;
    cbr i1 %36(prob = 0.5), ^if.then2, ^b2;
^if.then2:
    f32 %37 = fsub f32 %35, f32 6.28319;
    ubr ^b2;
^b2:
    f32 %38 = phi [^b1, f32 %35] [^if.then2, f32 %37];
    i1 %39 = fcmp lt f32 %38, f32 -3.14159;
    cbr i1 %39(prob = 0.5), ^if.then3, ^b3;
^if.then3:
    f32 %40 = fadd f32 %38, f32 6.28319;
    ubr ^b3;
^b3:
    f32 %41 = phi [^b2, f32 %38] [^if.then3, f32 %40];
    f32 %42 = call (f32) -> f32 @my_sin_impl(f32 %41);
    i1 %43 = fcmp gt f32 %25, f32 6.28319;
    i1 %44 = fcmp lt f32 %25, f32 -6.28319;
    i1 %45 = or i1 %43, i1 %44;
    cbr i1 %45(prob = 0.75), ^if.then4, ^b4;
^if.then4:
    f32 %46 = fdiv f32 %25, f32 6.28319;
    i32 %47 = f2s f32 %46 to i32;
    f32 %48 = s2f i32 %47 to f32;
    f32 %49 = fmul f32 %48, f32 6.28319;
    f32 %50 = fsub f32 %25, f32 %49;
    ubr ^b4;
^b4:
    f32 %51 = phi [^b3, f32 %25] [^if.then4, f32 %50];
    i1 %52 = fcmp gt f32 %51, f32 3.14159;
    cbr i1 %52(prob = 0.5), ^if.then5, ^b5;
^if.then5:
    f32 %53 = fsub f32 %51, f32 6.28319;
    ubr ^b5;
^b5:
    f32 %54 = phi [^b4, f32 %51] [^if.then5, f32 %53];
    i1 %55 = fcmp lt f32 %54, f32 -3.14159;
    cbr i1 %55(prob = 0.5), ^if.then6, ^b6;
^if.then6:
    f32 %56 = fadd f32 %54, f32 6.28319;
    ubr ^b6;
^b6:
    f32 %57 = phi [^b5, f32 %54] [^if.then6, f32 %56];
    f32 %58 = call (f32) -> f32 @my_sin_impl(f32 %57);
    ubr ^while.header1;
^while.header1:
    i32 %59 = phi [^b6, i32 0] [^b10, i32 %169];
    f32 %60 = phi [^b6, f32 0] [^b10, f32 %168];
    i1 %61 = scmp lt i32 %59, i32 10;
    cbr i1 %61(prob = 0.5), ^b7, ^b8;
^b7:
    i1 %62 = fcmp lt f32 %60, f32 2;
    cbr i1 %62(prob = 0.97), ^while.body2, ^b8;
^b8:
    f32 %63 = phi [^while.header1, f32 0] [^b7, f32 0] [^while.body2, f32 %157];
    f32 %64 = fadd f32 %12, f32 %63;
    i32 %65 = add i32 %13, i32 1;
    i1 %66 = scmp lt i32 %65, i32 24;
    cbr i1 %66(prob = 0.96), ^while.body1, ^b9;
^while.body2:
    f32 %67 = fmul f32 %42, f32 %60;
    f32 %68 = fadd f32 %10, f32 %67;
    f32 %69 = fmul f32 %58, f32 %60;
    f32 %70 = fadd f32 %6, f32 %69;
    f32 %71 = fsub f32 %68, f32 0.4;
    f32 %72 = fsub f32 %70, f32 0.4;
    f32 %73 = fmul f32 %71, f32 %71;
    f32 %74 = fmul f32 %72, f32 %72;
    f32 %75 = fadd f32 %73, f32 %74;
    f32 %76 = fmul f32 %75, f32 0.125;
    f32 %77 = fadd f32 %76, f32 0.5;
    f32 %78 = fadd f32 %75, f32 %75;
    f32 %79 = fadd f32 4, f32 %75;
    f32 %80 = fdiv f32 %78, f32 %79;
    f32 %81 = fadd f32 %77, f32 %80;
    f32 %82 = fdiv f32 %75, f32 %81;
    f32 %83 = fadd f32 %81, f32 %82;
    f32 %84 = fmul f32 %83, f32 0.5;
    f32 %85 = fdiv f32 %75, f32 %84;
    f32 %86 = fadd f32 %84, f32 %85;
    f32 %87 = fmul f32 %86, f32 0.5;
    f32 %88 = fdiv f32 %75, f32 %87;
    f32 %89 = fadd f32 %87, f32 %88;
    f32 %90 = fmul f32 %89, f32 0.5;
    f32 %91 = fdiv f32 %75, f32 %90;
    f32 %92 = fadd f32 %90, f32 %91;
    f32 %93 = fmul f32 %92, f32 0.5;
    f32 %94 = fdiv f32 %75, f32 %93;
    f32 %95 = fadd f32 %93, f32 %94;
    f32 %96 = fmul f32 %95, f32 0.5;
    f32 %97 = fdiv f32 %75, f32 %96;
    f32 %98 = fadd f32 %96, f32 %97;
    f32 %99 = fmul f32 %98, f32 0.5;
    f32 %100 = fdiv f32 %75, f32 %99;
    f32 %101 = fadd f32 %99, f32 %100;
    f32 %102 = fmul f32 %101, f32 0.5;
    f32 %103 = fdiv f32 %75, f32 %102;
    f32 %104 = fadd f32 %102, f32 %103;
    f32 %105 = fmul f32 %104, f32 0.5;
    f32 %106 = fdiv f32 %75, f32 %105;
    f32 %107 = fadd f32 %105, f32 %106;
    f32 %108 = fmul f32 %107, f32 0.5;
    f32 %109 = fdiv f32 %75, f32 %108;
    f32 %110 = fadd f32 %108, f32 %109;
    f32 %111 = fmul f32 %110, f32 0.5;
    f32 %112 = fsub f32 %111, f32 0.1;
    f32 %113 = fsub f32 %68, f32 0.6;
    f32 %114 = fsub f32 %70, f32 0.6;
    f32 %115 = fmul f32 %113, f32 %113;
    f32 %116 = fmul f32 %114, f32 %114;
    f32 %117 = fadd f32 %115, f32 %116;
    f32 %118 = fmul f32 %117, f32 0.125;
    f32 %119 = fadd f32 %118, f32 0.5;
    f32 %120 = fadd f32 %117, f32 %117;
    f32 %121 = fadd f32 4, f32 %117;
    f32 %122 = fdiv f32 %120, f32 %121;
    f32 %123 = fadd f32 %119, f32 %122;
    f32 %124 = fdiv f32 %117, f32 %123;
    f32 %125 = fadd f32 %123, f32 %124;
    f32 %126 = fmul f32 %125, f32 0.5;
    f32 %127 = fdiv f32 %117, f32 %126;
    f32 %128 = fadd f32 %126, f32 %127;
    f32 %129 = fmul f32 %128, f32 0.5;
    f32 %130 = fdiv f32 %117, f32 %129;
    f32 %131 = fadd f32 %129, f32 %130;
    f32 %132 = fmul f32 %131, f32 0.5;
    f32 %133 = fdiv f32 %117, f32 %132;
    f32 %134 = fadd f32 %132, f32 %133;
    f32 %135 = fmul f32 %134, f32 0.5;
    f32 %136 = fdiv f32 %117, f32 %135;
    f32 %137 = fadd f32 %135, f32 %136;
    f32 %138 = fmul f32 %137, f32 0.5;
    f32 %139 = fdiv f32 %117, f32 %138;
    f32 %140 = fadd f32 %138, f32 %139;
    f32 %141 = fmul f32 %140, f32 0.5;
    f32 %142 = fdiv f32 %117, f32 %141;
    f32 %143 = fadd f32 %141, f32 %142;
    f32 %144 = fmul f32 %143, f32 0.5;
    f32 %145 = fdiv f32 %117, f32 %144;
    f32 %146 = fadd f32 %144, f32 %145;
    f32 %147 = fmul f32 %146, f32 0.5;
    f32 %148 = fdiv f32 %117, f32 %147;
    f32 %149 = fadd f32 %147, f32 %148;
    f32 %150 = fmul f32 %149, f32 0.5;
    f32 %151 = fdiv f32 %117, f32 %150;
    f32 %152 = fadd f32 %150, f32 %151;
    f32 %153 = fmul f32 %152, f32 0.5;
    f32 %154 = fsub f32 %153, f32 0.05;
    i1 %155 = fcmp lt f32 %112, f32 %154;
    f32 %156 = select i1 %155 ? f32 %112 : f32 %154;
    f32 %157 = select i1 %155 ? f32 3 : f32 0;
    store f32* %0 with f32 %156;
    store f32* %1 with f32 %157;
    f32 %158 = load f32* %0;
    i1 %159 = fcmp lt f32 %158, f32 1e-06;
    cbr i1 %159(prob = 0.5), ^b8, ^b10;
^b9:
    f32 %160 = fdiv f32 %64, f32 24;
    f32 %161 = fmul f32 %160, f32 255;
    i32 %162 = f2s f32 %161 to i32;
    i1 %163 = scmp gt i32 %162, i32 255;
    i32 %164 = select i1 %163 ? i32 255 : i32 %162;
    call (i32) -> void @putint(i32 %164);
    call (i32) -> void @putch(i32 32);
    i32 %165 = add i32 %8, i32 1;
    i1 %166 = scmp lt i32 %165, i32 192;
    cbr i1 %166(prob = 0.99), ^while.body, ^b11;
^b10:
    f32 %167 = load f32* %0;
    f32 %168 = fadd f32 %60, f32 %167;
    i32 %169 = add i32 %59, i32 1;
    ubr ^while.header1;
^b11:
    call (i32) -> void @putch(i32 10);
    i32 %170 = add i32 %3, i32 1;
    ubr ^while.header;
}
