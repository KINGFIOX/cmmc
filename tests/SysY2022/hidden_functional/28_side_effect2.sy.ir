internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @sum = 0;
internal [20 * i32]* @array;
internal func @f(i32 %i, i32 %j) -> i32 {
^entry:
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    i32 %0 = load i32* @sum;
    i32 %1 = add i32 %0, i32 1;
    store i32* @sum with i32 %1;
    i32 %2 = load i32* %i1;
    i32 %3 = load i32* %j1;
    i1 %4 = scmp ge i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^b:
    i32 %7 = load i32* %i1;
    i1 %8 = scmp ge i32 %7, i32 20;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    ubr ^b1;
^b1:
    i1 %11 = phi [^b, i1 %10] [^entry, i1 true];
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %14 = load i32* %i1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([20 * i32]* @array)[i64 0][i64 %15];
    store i32* %16 with i32 1;
    i32 %17 = load i32* %i1;
    i1 %18 = scmp eq i32 %17, i32 0;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 0;
^if.then1:
    i32* %21 = getelementptr &([20 * i32]* @array)[i64 0][i64 0];
    i32 %22 = load i32* %21;
    ret i32 %22;
^if.else:
    i32 %23 = load i32* %i1;
    i32 %24 = sub i32 %23, i32 1;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([20 * i32]* @array)[i64 0][i64 %25];
    i32 %27 = load i32* %26;
    ret i32 %27;
^b3:
    unreachable;
}
internal func @g(i32 %i, i32 %j) -> i32 {
^entry:
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    i32 %0 = load i32* @sum;
    i32 %1 = add i32 %0, i32 2;
    store i32* @sum with i32 %1;
    i32 %2 = load i32* %i1;
    i32 %3 = load i32* %j1;
    i1 %4 = scmp ge i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^b:
    i32 %7 = load i32* %i1;
    i1 %8 = scmp ge i32 %7, i32 20;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    ubr ^b1;
^b1:
    i1 %11 = phi [^b, i1 %10] [^entry, i1 true];
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %14 = load i32* %i1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([20 * i32]* @array)[i64 0][i64 %15];
    store i32* %16 with i32 0;
    i32 %17 = load i32* %i1;
    i1 %18 = scmp eq i32 %17, i32 0;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 1;
^if.then1:
    i32* %21 = getelementptr &([20 * i32]* @array)[i64 0][i64 0];
    i32 %22 = load i32* %21;
    ret i32 %22;
^if.else:
    i32 %23 = load i32* %i1;
    i32 %24 = sub i32 %23, i32 1;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([20 * i32]* @array)[i64 0][i64 %25];
    i32 %27 = load i32* %26;
    ret i32 %27;
^b3:
    unreachable;
}
internal func @h(i32 %i) -> i32 {
^entry:
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    i32 %0 = load i32* @sum;
    i32 %1 = add i32 %0, i32 3;
    store i32* @sum with i32 %1;
    i32 %2 = load i32* %i1;
    i1 %3 = scmp lt i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i32 %6 = load i32* %i1;
    i1 %7 = scmp ge i32 %6, i32 20;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    ubr ^b1;
^b1:
    i1 %10 = phi [^b, i1 %9] [^entry, i1 true];
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then, ^b2;
^if.then:
    ret i32 0;
^b2:
    i32 %13 = load i32* %i1;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = getelementptr &([20 * i32]* @array)[i64 0][i64 %14];
    i32 %16 = load i32* %15;
    ret i32 %16;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %ans = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 20;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %4 = load i32* %i;
    i32 %5 = call (i32, i32) -> i32 @f(i32 0, i32 %4);
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %7 = load i32* %i;
    i32 %8 = call (i32, i32) -> i32 @f(i32 1, i32 %7);
    i1 %9 = scmp neq i32 %8, i32 0;
    ubr ^b2;
^b2:
    i1 %10 = phi [^b1, i1 %9] [^while.body, i1 false];
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^b3, ^b5;
^while.header1:
    i32 %13 = load i32* %i;
    i1 %14 = scmp lt i32 %13, i32 20;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b4;
^b3:
    i32 %17 = load i32* %i;
    i32 %18 = call (i32, i32) -> i32 @f(i32 2, i32 %17);
    i1 %19 = scmp neq i32 %18, i32 0;
    ubr ^b5;
^b4:
    store i32* %i with i32 1;
    ubr ^while.header2;
^while.body1:
    i32 %20 = load i32* %i;
    i32 %21 = call (i32, i32) -> i32 @g(i32 0, i32 %20);
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^b8, ^b7;
^b5:
    i1 %23 = phi [^b3, i1 %19] [^b2, i1 false];
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^b6, ^b9;
^b6:
    i32 %26 = load i32* %i;
    i32 %27 = call (i32, i32) -> i32 @f(i32 3, i32 %26);
    i1 %28 = scmp neq i32 %27, i32 0;
    ubr ^b9;
^b7:
    i32 %29 = load i32* %i;
    i32 %30 = call (i32, i32) -> i32 @g(i32 1, i32 %29);
    i1 %31 = scmp neq i32 %30, i32 0;
    ubr ^b8;
^b8:
    i1 %32 = phi [^b7, i1 %31] [^while.body1, i1 true];
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^b13, ^b10;
^while.header2:
    i32 %35 = load i32* %i;
    i1 %36 = scmp lt i32 %35, i32 20;
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^b11, ^b14;
^b9:
    i1 %39 = phi [^b6, i1 %28] [^b5, i1 false];
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^b12, ^b15;
^b10:
    i32 %42 = load i32* %i;
    i32 %43 = call (i32, i32) -> i32 @g(i32 2, i32 %42);
    i1 %44 = scmp neq i32 %43, i32 0;
    ubr ^b13;
^b11:
    i32 %45 = load i32* %i;
    i32 %46 = sub i32 %45, i32 1;
    i32 %47 = load i32* %i;
    i32 %48 = call (i32, i32) -> i32 @f(i32 %46, i32 %47);
    i1 %49 = scmp neq i32 %48, i32 0;
    ubr ^b14;
^b12:
    i32 %50 = load i32* %i;
    i32 %51 = call (i32, i32) -> i32 @f(i32 4, i32 %50);
    i1 %52 = scmp neq i32 %51, i32 0;
    ubr ^b15;
^b13:
    i1 %53 = phi [^b10, i1 %44] [^b8, i1 true];
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^b17, ^b16;
^b14:
    i1 %56 = phi [^b11, i1 %49] [^while.header2, i1 false];
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b19;
^b15:
    i1 %59 = phi [^b12, i1 %52] [^b9, i1 false];
    i32 %60 = zext i1 %59 to i32;
    i1 %61 = scmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.5), ^b18, ^b20;
^b16:
    i32 %62 = load i32* %i;
    i32 %63 = call (i32, i32) -> i32 @g(i32 3, i32 %62);
    i1 %64 = scmp neq i32 %63, i32 0;
    ubr ^b17;
^b17:
    i1 %65 = phi [^b16, i1 %64] [^b13, i1 true];
    i32 %66 = zext i1 %65 to i32;
    i1 %67 = scmp neq i32 %66, i32 0;
    cbr i1 %67(prob = 0.5), ^b22, ^b21;
^while.body2:
    i32 %68 = load i32* %i;
    i32 %69 = add i32 %68, i32 1;
    store i32* %i with i32 %69;
    ubr ^while.header2;
^b18:
    i32 %70 = load i32* %i;
    i32 %71 = call (i32, i32) -> i32 @f(i32 5, i32 %70);
    i1 %72 = scmp neq i32 %71, i32 0;
    ubr ^b20;
^b19:
    store i32* %ans with i32 0;
    store i32* %ans with i32 0;
    i32 %73 = call (i32) -> i32 @h(i32 0);
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^b23, ^b25;
^b20:
    i1 %75 = phi [^b18, i1 %72] [^b15, i1 false];
    i32 %76 = zext i1 %75 to i32;
    i1 %77 = scmp neq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^b24, ^b26;
^b21:
    i32 %78 = load i32* %i;
    i32 %79 = call (i32, i32) -> i32 @g(i32 4, i32 %78);
    i1 %80 = scmp neq i32 %79, i32 0;
    ubr ^b22;
^b22:
    i1 %81 = phi [^b21, i1 %80] [^b17, i1 true];
    i32 %82 = zext i1 %81 to i32;
    i1 %83 = scmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.5), ^b28, ^b27;
^b23:
    i32 %84 = call (i32) -> i32 @h(i32 1);
    i1 %85 = scmp neq i32 %84, i32 0;
    ubr ^b25;
^b24:
    i32 %86 = load i32* %i;
    i32 %87 = call (i32, i32) -> i32 @f(i32 6, i32 %86);
    i1 %88 = scmp neq i32 %87, i32 0;
    ubr ^b26;
^b25:
    i1 %89 = phi [^b23, i1 %85] [^b19, i1 false];
    i32 %90 = zext i1 %89 to i32;
    i1 %91 = scmp neq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^b31, ^b30;
^b26:
    i1 %92 = phi [^b24, i1 %88] [^b20, i1 false];
    i32 %93 = zext i1 %92 to i32;
    i1 %94 = scmp neq i32 %93, i32 0;
    cbr i1 %94(prob = 0.5), ^b29, ^b32;
^b27:
    i32 %95 = load i32* %i;
    i32 %96 = call (i32, i32) -> i32 @g(i32 5, i32 %95);
    i1 %97 = scmp neq i32 %96, i32 0;
    ubr ^b28;
^b28:
    i1 %98 = phi [^b27, i1 %97] [^b22, i1 true];
    i32 %99 = zext i1 %98 to i32;
    i1 %100 = scmp neq i32 %99, i32 0;
    cbr i1 %100(prob = 0.5), ^b34, ^b33;
^b29:
    i32 %101 = load i32* %i;
    i32 %102 = call (i32, i32) -> i32 @f(i32 7, i32 %101);
    i1 %103 = scmp neq i32 %102, i32 0;
    ubr ^b32;
^b30:
    i32 %104 = call (i32) -> i32 @h(i32 2);
    i1 %105 = scmp neq i32 %104, i32 0;
    i1 %106 = xor i1 %105, i1 true;
    i32 %107 = zext i1 %106 to i32;
    i1 %108 = scmp neq i32 %107, i32 0;
    ubr ^b31;
^b31:
    i1 %109 = phi [^b30, i1 %108] [^b25, i1 true];
    i32 %110 = zext i1 %109 to i32;
    i1 %111 = scmp neq i32 %110, i32 0;
    cbr i1 %111(prob = 0.5), ^b37, ^b35;
^b32:
    i1 %112 = phi [^b29, i1 %103] [^b26, i1 false];
    i32 %113 = zext i1 %112 to i32;
    i1 %114 = scmp neq i32 %113, i32 0;
    cbr i1 %114(prob = 0.5), ^b36, ^b38;
^b33:
    i32 %115 = load i32* %i;
    i32 %116 = call (i32, i32) -> i32 @g(i32 6, i32 %115);
    i1 %117 = scmp neq i32 %116, i32 0;
    ubr ^b34;
^b34:
    i1 %118 = phi [^b33, i1 %117] [^b28, i1 true];
    i32 %119 = zext i1 %118 to i32;
    i1 %120 = scmp neq i32 %119, i32 0;
    cbr i1 %120(prob = 0.5), ^b40, ^b39;
^b35:
    i32 %121 = call (i32) -> i32 @h(i32 3);
    i1 %122 = scmp neq i32 %121, i32 0;
    ubr ^b37;
^b36:
    i32 %123 = load i32* %i;
    i32 %124 = call (i32, i32) -> i32 @f(i32 8, i32 %123);
    i1 %125 = scmp neq i32 %124, i32 0;
    ubr ^b38;
^b37:
    i1 %126 = phi [^b35, i1 %122] [^b31, i1 true];
    i32 %127 = zext i1 %126 to i32;
    i1 %128 = scmp neq i32 %127, i32 0;
    cbr i1 %128(prob = 0.5), ^if.then, ^b42;
^b38:
    i1 %129 = phi [^b36, i1 %125] [^b32, i1 false];
    i32 %130 = zext i1 %129 to i32;
    i1 %131 = scmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.5), ^b41, ^b43;
^b39:
    i32 %132 = load i32* %i;
    i32 %133 = call (i32, i32) -> i32 @g(i32 7, i32 %132);
    i1 %134 = scmp neq i32 %133, i32 0;
    ubr ^b40;
^b40:
    i1 %135 = phi [^b39, i1 %134] [^b34, i1 true];
    i32 %136 = zext i1 %135 to i32;
    i1 %137 = scmp neq i32 %136, i32 0;
    cbr i1 %137(prob = 0.5), ^b45, ^b44;
^if.then:
    store i32* %ans with i32 1;
    ubr ^b42;
^b41:
    i32 %138 = load i32* %i;
    i32 %139 = call (i32, i32) -> i32 @f(i32 9, i32 %138);
    i1 %140 = scmp neq i32 %139, i32 0;
    ubr ^b43;
^b42:
    i32 %141 = load i32* @sum;
    i32 %142 = load i32* %ans;
    i32 %143 = add i32 %141, i32 %142;
    store i32* %ans with i32 0;
    i32 %144 = call (i32) -> i32 @h(i32 4);
    i1 %145 = scmp neq i32 %144, i32 0;
    i1 %146 = xor i1 %145, i1 true;
    i32 %147 = zext i1 %146 to i32;
    i1 %148 = scmp neq i32 %147, i32 0;
    cbr i1 %148(prob = 0.5), ^b46, ^b48;
^b43:
    i1 %149 = phi [^b41, i1 %140] [^b38, i1 false];
    i32 %150 = zext i1 %149 to i32;
    i1 %151 = scmp neq i32 %150, i32 0;
    cbr i1 %151(prob = 0.5), ^b47, ^b49;
^b44:
    i32 %152 = load i32* %i;
    i32 %153 = call (i32, i32) -> i32 @g(i32 8, i32 %152);
    i1 %154 = scmp neq i32 %153, i32 0;
    ubr ^b45;
^b45:
    i1 %155 = phi [^b44, i1 %154] [^b40, i1 true];
    i32 %156 = zext i1 %155 to i32;
    i1 %157 = scmp neq i32 %156, i32 0;
    cbr i1 %157(prob = 0.5), ^b51, ^b50;
^b46:
    i1 %158 = phi [^b61, i1 %207] [^b42, i1 true];
    i32 %159 = zext i1 %158 to i32;
    i1 %160 = scmp neq i32 %159, i32 0;
    cbr i1 %160(prob = 0.5), ^b54, ^b53;
^b47:
    i32 %161 = load i32* %i;
    i32 %162 = call (i32, i32) -> i32 @f(i32 10, i32 %161);
    i1 %163 = scmp neq i32 %162, i32 0;
    ubr ^b49;
^b48:
    i32 %164 = call (i32) -> i32 @h(i32 5);
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.5), ^b52, ^b56;
^b49:
    i1 %166 = phi [^b47, i1 %163] [^b43, i1 false];
    i32 %167 = zext i1 %166 to i32;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^b55, ^b57;
^b50:
    i32 %169 = load i32* %i;
    i32 %170 = call (i32, i32) -> i32 @g(i32 9, i32 %169);
    i1 %171 = scmp neq i32 %170, i32 0;
    ubr ^b51;
^b51:
    i1 %172 = phi [^b50, i1 %171] [^b45, i1 true];
    i32 %173 = zext i1 %172 to i32;
    i1 %174 = scmp neq i32 %173, i32 0;
    cbr i1 %174(prob = 0.5), ^b59, ^b58;
^b52:
    i32 %175 = call (i32) -> i32 @h(i32 6);
    i1 %176 = scmp neq i32 %175, i32 0;
    i1 %177 = xor i1 %176, i1 true;
    i32 %178 = zext i1 %177 to i32;
    i1 %179 = scmp neq i32 %178, i32 0;
    ubr ^b56;
^b53:
    i32 %180 = call (i32) -> i32 @h(i32 8);
    i1 %181 = scmp neq i32 %180, i32 0;
    i1 %182 = xor i1 %181, i1 true;
    i32 %183 = zext i1 %182 to i32;
    i1 %184 = scmp neq i32 %183, i32 0;
    ubr ^b54;
^b54:
    i1 %185 = phi [^b53, i1 %184] [^b46, i1 true];
    i32 %186 = zext i1 %185 to i32;
    i1 %187 = scmp neq i32 %186, i32 0;
    cbr i1 %187(prob = 0.5), ^if.then1, ^b62;
^b55:
    i32 %188 = load i32* %i;
    i32 %189 = call (i32, i32) -> i32 @f(i32 11, i32 %188);
    i1 %190 = scmp neq i32 %189, i32 0;
    ubr ^b57;
^b56:
    i1 %191 = phi [^b52, i1 %179] [^b48, i1 false];
    i32 %192 = zext i1 %191 to i32;
    i1 %193 = scmp neq i32 %192, i32 0;
    cbr i1 %193(prob = 0.5), ^b60, ^b61;
^b57:
    i1 %194 = phi [^b55, i1 %190] [^b49, i1 false];
    i32 %195 = zext i1 %194 to i32;
    i1 %196 = scmp neq i32 %195, i32 0;
    cbr i1 %196(prob = 0.5), ^b63, ^b64;
^b58:
    i32 %197 = load i32* %i;
    i32 %198 = call (i32, i32) -> i32 @g(i32 10, i32 %197);
    i1 %199 = scmp neq i32 %198, i32 0;
    ubr ^b59;
^b59:
    i1 %200 = phi [^b58, i1 %199] [^b51, i1 true];
    i32 %201 = zext i1 %200 to i32;
    i1 %202 = scmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.5), ^b66, ^b65;
^if.then1:
    store i32* %ans with i32 1;
    ubr ^b62;
^b60:
    i32 %203 = call (i32) -> i32 @h(i32 7);
    i1 %204 = scmp neq i32 %203, i32 0;
    ubr ^b61;
^b61:
    i1 %205 = phi [^b60, i1 %204] [^b56, i1 false];
    i32 %206 = zext i1 %205 to i32;
    i1 %207 = scmp neq i32 %206, i32 0;
    ubr ^b46;
^b62:
    i32 %208 = load i32* @sum;
    i32 %209 = load i32* %ans;
    i32 %210 = mul i32 %208, i32 %209;
    store i32* %ans with i32 0;
    i32 %211 = call (i32) -> i32 @h(i32 9);
    i1 %212 = scmp neq i32 %211, i32 0;
    cbr i1 %212(prob = 0.5), ^b67, ^b68;
^b63:
    i32 %213 = load i32* %i;
    i32 %214 = call (i32, i32) -> i32 @f(i32 12, i32 %213);
    i1 %215 = scmp neq i32 %214, i32 0;
    ubr ^b64;
^b64:
    i1 %216 = phi [^b63, i1 %215] [^b57, i1 false];
    i32 %217 = zext i1 %216 to i32;
    i1 %218 = scmp neq i32 %217, i32 0;
    cbr i1 %218(prob = 0.5), ^b69, ^b70;
^b65:
    i32 %219 = load i32* %i;
    i32 %220 = call (i32, i32) -> i32 @g(i32 11, i32 %219);
    i1 %221 = scmp neq i32 %220, i32 0;
    ubr ^b66;
^b66:
    i1 %222 = phi [^b65, i1 %221] [^b59, i1 true];
    i32 %223 = zext i1 %222 to i32;
    i1 %224 = scmp neq i32 %223, i32 0;
    cbr i1 %224(prob = 0.5), ^b72, ^b71;
^b67:
    i32 %225 = call (i32) -> i32 @h(i32 10);
    i1 %226 = scmp neq i32 %225, i32 0;
    i1 %227 = xor i1 %226, i1 true;
    i32 %228 = zext i1 %227 to i32;
    i1 %229 = scmp neq i32 %228, i32 0;
    ubr ^b68;
^b68:
    i1 %230 = phi [^b67, i1 %229] [^b62, i1 false];
    i32 %231 = zext i1 %230 to i32;
    i1 %232 = scmp neq i32 %231, i32 0;
    cbr i1 %232(prob = 0.5), ^b74, ^b73;
^b69:
    i32 %233 = load i32* %i;
    i32 %234 = call (i32, i32) -> i32 @f(i32 13, i32 %233);
    i1 %235 = scmp neq i32 %234, i32 0;
    ubr ^b70;
^b70:
    i1 %236 = phi [^b69, i1 %235] [^b64, i1 false];
    i32 %237 = zext i1 %236 to i32;
    i1 %238 = scmp neq i32 %237, i32 0;
    cbr i1 %238(prob = 0.5), ^b75, ^b76;
^b71:
    i32 %239 = load i32* %i;
    i32 %240 = call (i32, i32) -> i32 @g(i32 12, i32 %239);
    i1 %241 = scmp neq i32 %240, i32 0;
    ubr ^b72;
^b72:
    i1 %242 = phi [^b71, i1 %241] [^b66, i1 true];
    i32 %243 = zext i1 %242 to i32;
    i1 %244 = scmp neq i32 %243, i32 0;
    cbr i1 %244(prob = 0.5), ^b78, ^b77;
^b73:
    i32 %245 = call (i32) -> i32 @h(i32 11);
    i1 %246 = scmp neq i32 %245, i32 0;
    i1 %247 = xor i1 %246, i1 true;
    i32 %248 = zext i1 %247 to i32;
    i1 %249 = scmp neq i32 %248, i32 0;
    ubr ^b74;
^b74:
    i1 %250 = phi [^b73, i1 %249] [^b68, i1 true];
    i32 %251 = zext i1 %250 to i32;
    i1 %252 = scmp neq i32 %251, i32 0;
    cbr i1 %252(prob = 0.5), ^b80, ^b79;
^b75:
    i32 %253 = load i32* %i;
    i32 %254 = call (i32, i32) -> i32 @f(i32 14, i32 %253);
    i1 %255 = scmp neq i32 %254, i32 0;
    ubr ^b76;
^b76:
    i1 %256 = phi [^b75, i1 %255] [^b70, i1 false];
    i32 %257 = zext i1 %256 to i32;
    i1 %258 = scmp neq i32 %257, i32 0;
    cbr i1 %258(prob = 0.5), ^b81, ^b82;
^b77:
    i32 %259 = load i32* %i;
    i32 %260 = call (i32, i32) -> i32 @g(i32 13, i32 %259);
    i1 %261 = scmp neq i32 %260, i32 0;
    ubr ^b78;
^b78:
    i1 %262 = phi [^b77, i1 %261] [^b72, i1 true];
    i32 %263 = zext i1 %262 to i32;
    i1 %264 = scmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.5), ^b84, ^b83;
^b79:
    i32 %265 = call (i32) -> i32 @h(i32 12);
    i1 %266 = scmp neq i32 %265, i32 0;
    i1 %267 = xor i1 %266, i1 true;
    i32 %268 = zext i1 %267 to i32;
    i1 %269 = scmp neq i32 %268, i32 0;
    ubr ^b80;
^b80:
    i1 %270 = phi [^b79, i1 %269] [^b74, i1 true];
    i32 %271 = zext i1 %270 to i32;
    i1 %272 = scmp neq i32 %271, i32 0;
    cbr i1 %272(prob = 0.5), ^b86, ^b85;
^b81:
    i32 %273 = load i32* %i;
    i32 %274 = call (i32, i32) -> i32 @f(i32 15, i32 %273);
    i1 %275 = scmp neq i32 %274, i32 0;
    ubr ^b82;
^b82:
    i1 %276 = phi [^b81, i1 %275] [^b76, i1 false];
    i32 %277 = zext i1 %276 to i32;
    i1 %278 = scmp neq i32 %277, i32 0;
    cbr i1 %278(prob = 0.5), ^b87, ^b88;
^b83:
    i32 %279 = load i32* %i;
    i32 %280 = call (i32, i32) -> i32 @g(i32 14, i32 %279);
    i1 %281 = scmp neq i32 %280, i32 0;
    ubr ^b84;
^b84:
    i1 %282 = phi [^b83, i1 %281] [^b78, i1 true];
    i32 %283 = zext i1 %282 to i32;
    i1 %284 = scmp neq i32 %283, i32 0;
    cbr i1 %284(prob = 0.5), ^b90, ^b89;
^b85:
    i32 %285 = call (i32) -> i32 @h(i32 13);
    i1 %286 = scmp neq i32 %285, i32 0;
    i1 %287 = xor i1 %286, i1 true;
    i32 %288 = zext i1 %287 to i32;
    i1 %289 = scmp neq i32 %288, i32 0;
    ubr ^b86;
^b86:
    i1 %290 = phi [^b85, i1 %289] [^b80, i1 true];
    i32 %291 = zext i1 %290 to i32;
    i1 %292 = scmp neq i32 %291, i32 0;
    cbr i1 %292(prob = 0.5), ^b91, ^b92;
^b87:
    i32 %293 = load i32* %i;
    i32 %294 = call (i32, i32) -> i32 @f(i32 16, i32 %293);
    i1 %295 = scmp neq i32 %294, i32 0;
    ubr ^b88;
^b88:
    i1 %296 = phi [^b87, i1 %295] [^b82, i1 false];
    i32 %297 = zext i1 %296 to i32;
    i1 %298 = scmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.5), ^b93, ^b94;
^b89:
    i32 %299 = load i32* %i;
    i32 %300 = call (i32, i32) -> i32 @g(i32 15, i32 %299);
    i1 %301 = scmp neq i32 %300, i32 0;
    ubr ^b90;
^b90:
    i1 %302 = phi [^b89, i1 %301] [^b84, i1 true];
    i32 %303 = zext i1 %302 to i32;
    i1 %304 = scmp neq i32 %303, i32 0;
    cbr i1 %304(prob = 0.5), ^b96, ^b95;
^b91:
    i1 %305 = phi [^b98, i1 %326] [^b86, i1 true];
    i32 %306 = zext i1 %305 to i32;
    i1 %307 = scmp neq i32 %306, i32 0;
    cbr i1 %307(prob = 0.5), ^if.then2, ^b99;
^b92:
    i32 %308 = call (i32) -> i32 @h(i32 14);
    i1 %309 = scmp neq i32 %308, i32 0;
    cbr i1 %309(prob = 0.5), ^b97, ^b98;
^b93:
    i32 %310 = load i32* %i;
    i32 %311 = call (i32, i32) -> i32 @f(i32 17, i32 %310);
    i1 %312 = scmp neq i32 %311, i32 0;
    ubr ^b94;
^b94:
    i1 %313 = phi [^b93, i1 %312] [^b88, i1 false];
    i32 %314 = zext i1 %313 to i32;
    i1 %315 = scmp neq i32 %314, i32 0;
    cbr i1 %315(prob = 0.5), ^b100, ^b101;
^b95:
    i32 %316 = load i32* %i;
    i32 %317 = call (i32, i32) -> i32 @g(i32 16, i32 %316);
    i1 %318 = scmp neq i32 %317, i32 0;
    ubr ^b96;
^b96:
    i1 %319 = phi [^b95, i1 %318] [^b90, i1 true];
    i32 %320 = zext i1 %319 to i32;
    i1 %321 = scmp neq i32 %320, i32 0;
    cbr i1 %321(prob = 0.5), ^b103, ^b102;
^if.then2:
    store i32* %ans with i32 1;
    ubr ^b99;
^b97:
    i32 %322 = call (i32) -> i32 @h(i32 15);
    i1 %323 = scmp neq i32 %322, i32 0;
    ubr ^b98;
^b98:
    i1 %324 = phi [^b97, i1 %323] [^b92, i1 false];
    i32 %325 = zext i1 %324 to i32;
    i1 %326 = scmp neq i32 %325, i32 0;
    ubr ^b91;
^b99:
    i32 %327 = load i32* @sum;
    i32 %328 = load i32* %ans;
    i32 %329 = sub i32 %327, i32 %328;
    store i32* %ans with i32 0;
    i32 %330 = call (i32) -> i32 @h(i32 0);
    i1 %331 = scmp neq i32 %330, i32 0;
    cbr i1 %331(prob = 0.5), ^b104, ^b105;
^b100:
    i32 %332 = load i32* %i;
    i32 %333 = call (i32, i32) -> i32 @f(i32 18, i32 %332);
    i1 %334 = scmp neq i32 %333, i32 0;
    ubr ^b101;
^b101:
    i1 %335 = phi [^b100, i1 %334] [^b94, i1 false];
    i32 %336 = zext i1 %335 to i32;
    i1 %337 = scmp neq i32 %336, i32 0;
    cbr i1 %337(prob = 0.5), ^b106, ^b107;
^b102:
    i32 %338 = load i32* %i;
    i32 %339 = call (i32, i32) -> i32 @g(i32 17, i32 %338);
    i1 %340 = scmp neq i32 %339, i32 0;
    ubr ^b103;
^b103:
    i1 %341 = phi [^b102, i1 %340] [^b96, i1 true];
    i32 %342 = zext i1 %341 to i32;
    i1 %343 = scmp neq i32 %342, i32 0;
    cbr i1 %343(prob = 0.5), ^b109, ^b108;
^b104:
    i32 %344 = call (i32) -> i32 @h(i32 2);
    i1 %345 = scmp neq i32 %344, i32 0;
    ubr ^b105;
^b105:
    i1 %346 = phi [^b104, i1 %345] [^b99, i1 false];
    i32 %347 = zext i1 %346 to i32;
    i1 %348 = scmp neq i32 %347, i32 0;
    cbr i1 %348(prob = 0.5), ^b110, ^b111;
^b106:
    i32 %349 = load i32* %i;
    i32 %350 = call (i32, i32) -> i32 @f(i32 19, i32 %349);
    i1 %351 = scmp neq i32 %350, i32 0;
    ubr ^b107;
^b107:
    i1 %352 = phi [^b106, i1 %351] [^b101, i1 false];
    i32 %353 = zext i1 %352 to i32;
    i1 %354 = scmp neq i32 %353, i32 0;
    cbr i1 %354(prob = 0.5), ^if.then3, ^b112;
^b108:
    i32 %355 = load i32* %i;
    i32 %356 = call (i32, i32) -> i32 @g(i32 18, i32 %355);
    i1 %357 = scmp neq i32 %356, i32 0;
    ubr ^b109;
^b109:
    i1 %358 = phi [^b108, i1 %357] [^b103, i1 true];
    i32 %359 = zext i1 %358 to i32;
    i1 %360 = scmp neq i32 %359, i32 0;
    cbr i1 %360(prob = 0.5), ^b114, ^b113;
^b110:
    i32 %361 = call (i32) -> i32 @h(i32 3);
    i1 %362 = scmp neq i32 %361, i32 0;
    i1 %363 = xor i1 %362, i1 true;
    i32 %364 = zext i1 %363 to i32;
    i1 %365 = scmp neq i32 %364, i32 0;
    ubr ^b111;
^b111:
    i1 %366 = phi [^b110, i1 %365] [^b105, i1 false];
    i32 %367 = zext i1 %366 to i32;
    i1 %368 = scmp neq i32 %367, i32 0;
    cbr i1 %368(prob = 0.5), ^b115, ^b116;
^if.then3:
    ubr ^b112;
^b112:
    i32 %369 = load i32* %i;
    i32 %370 = add i32 %369, i32 1;
    store i32* %i with i32 %370;
    ubr ^while.header;
^b113:
    i32 %371 = load i32* %i;
    i32 %372 = call (i32, i32) -> i32 @g(i32 19, i32 %371);
    i1 %373 = scmp neq i32 %372, i32 0;
    ubr ^b114;
^b114:
    i1 %374 = phi [^b113, i1 %373] [^b109, i1 true];
    i32 %375 = zext i1 %374 to i32;
    i1 %376 = scmp neq i32 %375, i32 0;
    cbr i1 %376(prob = 0.5), ^if.then4, ^b117;
^b115:
    i32 %377 = call (i32) -> i32 @h(i32 4);
    i1 %378 = scmp neq i32 %377, i32 0;
    i1 %379 = xor i1 %378, i1 true;
    i32 %380 = zext i1 %379 to i32;
    i1 %381 = scmp neq i32 %380, i32 0;
    ubr ^b116;
^b116:
    i1 %382 = phi [^b115, i1 %381] [^b111, i1 false];
    i32 %383 = zext i1 %382 to i32;
    i1 %384 = scmp neq i32 %383, i32 0;
    cbr i1 %384(prob = 0.5), ^b119, ^b118;
^if.then4:
    ubr ^b117;
^b117:
    i32 %385 = load i32* %i;
    i32 %386 = add i32 %385, i32 1;
    store i32* %i with i32 %386;
    ubr ^while.header1;
^b118:
    i32 %387 = call (i32) -> i32 @h(i32 5);
    i1 %388 = scmp neq i32 %387, i32 0;
    ubr ^b119;
^b119:
    i1 %389 = phi [^b118, i1 %388] [^b116, i1 true];
    i32 %390 = zext i1 %389 to i32;
    i1 %391 = scmp neq i32 %390, i32 0;
    cbr i1 %391(prob = 0.5), ^b120, ^b121;
^b120:
    i1 %392 = phi [^b124, i1 %406] [^b119, i1 true];
    i32 %393 = zext i1 %392 to i32;
    i1 %394 = scmp neq i32 %393, i32 0;
    cbr i1 %394(prob = 0.5), ^b125, ^b123;
^b121:
    i32 %395 = call (i32) -> i32 @h(i32 6);
    i1 %396 = scmp neq i32 %395, i32 0;
    cbr i1 %396(prob = 0.5), ^b122, ^b124;
^b122:
    i32 %397 = call (i32) -> i32 @h(i32 7);
    i1 %398 = scmp neq i32 %397, i32 0;
    i1 %399 = xor i1 %398, i1 true;
    i32 %400 = zext i1 %399 to i32;
    i1 %401 = scmp neq i32 %400, i32 0;
    ubr ^b124;
^b123:
    i32 %402 = call (i32) -> i32 @h(i32 8);
    i1 %403 = scmp neq i32 %402, i32 0;
    ubr ^b125;
^b124:
    i1 %404 = phi [^b122, i1 %401] [^b121, i1 false];
    i32 %405 = zext i1 %404 to i32;
    i1 %406 = scmp neq i32 %405, i32 0;
    ubr ^b120;
^b125:
    i1 %407 = phi [^b123, i1 %403] [^b120, i1 true];
    i32 %408 = zext i1 %407 to i32;
    i1 %409 = scmp neq i32 %408, i32 0;
    cbr i1 %409(prob = 0.5), ^if.then5, ^b126;
^if.then5:
    store i32* %ans with i32 1;
    ubr ^b126;
^b126:
    i32 %410 = load i32* @sum;
    i32 %411 = load i32* %ans;
    i32 %412 = add i32 %410, i32 %411;
    call (i32) -> void @putint(i32 %412);
    ret i32 0;
}
