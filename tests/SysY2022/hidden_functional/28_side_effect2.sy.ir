internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [20 * i32]* %array = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %array)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([20 * i32]* %array)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([20 * i32]* %array)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([20 * i32]* %array)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([20 * i32]* %array)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([20 * i32]* %array)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([20 * i32]* %array)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([20 * i32]* %array)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([20 * i32]* %array)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([20 * i32]* %array)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([20 * i32]* %array)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([20 * i32]* %array)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([20 * i32]* %array)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([20 * i32]* %array)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([20 * i32]* %array)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([20 * i32]* %array)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([20 * i32]* %array)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([20 * i32]* %array)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([20 * i32]* %array)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([20 * i32]* %array)[i64 0][i64 19];
    store i32* %19 with i32 0;
    ubr ^while.body;
^while.body:
    i32 %20 = phi [^entry, i32 0] [^b56, i32 %155];
    i32 %21 = phi [^entry, i32 0] [^b56, i32 %156];
    i32 %22 = add i32 %20, i32 1;
    i1 %23 = scmp lt i32 %21, i32 1;
    cbr i1 %23(prob = 0.5), ^b1, ^b;
^b:
    store i32* %0 with i32 1;
    i32 %24 = load i32* %0;
    ubr ^b1;
^b1:
    i32 %25 = phi [^while.body, i32 0] [^b, i32 %24];
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^entry1, ^b2;
^entry1:
    i32 %27 = add i32 %20, i32 2;
    i1 %28 = scmp lt i32 %21, i32 2;
    cbr i1 %28(prob = 0.5), ^b3, ^b4;
^b2:
    i32 %29 = phi [^b1, i32 %22] [^b3, i32 %27];
    i1 %30 = phi [^b1, i1 false] [^b3, i1 %32];
    cbr i1 %30(prob = 0.5), ^entry2, ^b5;
^b3:
    i32 %31 = phi [^entry1, i32 0] [^b4, i32 %33];
    i1 %32 = scmp neq i32 %31, i32 0;
    ubr ^b2;
^b4:
    store i32* %1 with i32 1;
    i32 %33 = load i32* %0;
    ubr ^b3;
^entry2:
    i32 %34 = add i32 %29, i32 1;
    i1 %35 = scmp lt i32 %21, i32 3;
    cbr i1 %35(prob = 0.5), ^b6, ^b7;
^b5:
    i32 %36 = phi [^b2, i32 %29] [^b6, i32 %34];
    i1 %37 = phi [^b2, i1 false] [^b6, i1 %39];
    cbr i1 %37(prob = 0.5), ^entry3, ^b8;
^b6:
    i32 %38 = phi [^entry2, i32 0] [^b7, i32 %40];
    i1 %39 = scmp neq i32 %38, i32 0;
    ubr ^b5;
^b7:
    store i32* %2 with i32 1;
    i32 %40 = load i32* %1;
    ubr ^b6;
^entry3:
    i32 %41 = add i32 %36, i32 1;
    i1 %42 = scmp lt i32 %21, i32 4;
    cbr i1 %42(prob = 0.5), ^b9, ^b10;
^b8:
    i32 %43 = phi [^b5, i32 %36] [^b9, i32 %41];
    i1 %44 = phi [^b5, i1 false] [^b9, i1 %46];
    cbr i1 %44(prob = 0.5), ^entry4, ^b11;
^b9:
    i32 %45 = phi [^entry3, i32 0] [^b10, i32 %47];
    i1 %46 = scmp neq i32 %45, i32 0;
    ubr ^b8;
^b10:
    store i32* %3 with i32 1;
    i32 %47 = load i32* %2;
    ubr ^b9;
^entry4:
    i32 %48 = add i32 %43, i32 1;
    i1 %49 = scmp lt i32 %21, i32 5;
    cbr i1 %49(prob = 0.5), ^b12, ^b13;
^b11:
    i32 %50 = phi [^b8, i32 %43] [^b12, i32 %48];
    i1 %51 = phi [^b8, i1 false] [^b12, i1 %53];
    cbr i1 %51(prob = 0.5), ^entry5, ^b14;
^b12:
    i32 %52 = phi [^entry4, i32 0] [^b13, i32 %54];
    i1 %53 = scmp neq i32 %52, i32 0;
    ubr ^b11;
^b13:
    store i32* %4 with i32 1;
    i32 %54 = load i32* %3;
    ubr ^b12;
^entry5:
    i32 %55 = add i32 %50, i32 1;
    i1 %56 = scmp lt i32 %21, i32 6;
    cbr i1 %56(prob = 0.5), ^b15, ^b16;
^b14:
    i32 %57 = phi [^b11, i32 %50] [^b15, i32 %55];
    i1 %58 = phi [^b11, i1 false] [^b15, i1 %60];
    cbr i1 %58(prob = 0.5), ^entry6, ^b17;
^b15:
    i32 %59 = phi [^entry5, i32 0] [^b16, i32 %61];
    i1 %60 = scmp neq i32 %59, i32 0;
    ubr ^b14;
^b16:
    store i32* %5 with i32 1;
    i32 %61 = load i32* %4;
    ubr ^b15;
^entry6:
    i32 %62 = add i32 %57, i32 1;
    i1 %63 = scmp lt i32 %21, i32 7;
    cbr i1 %63(prob = 0.5), ^b18, ^b19;
^b17:
    i32 %64 = phi [^b14, i32 %57] [^b18, i32 %62];
    i1 %65 = phi [^b14, i1 false] [^b18, i1 %67];
    cbr i1 %65(prob = 0.5), ^entry7, ^b20;
^b18:
    i32 %66 = phi [^entry6, i32 0] [^b19, i32 %68];
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b17;
^b19:
    store i32* %6 with i32 1;
    i32 %68 = load i32* %5;
    ubr ^b18;
^entry7:
    i32 %69 = add i32 %64, i32 1;
    i1 %70 = scmp lt i32 %21, i32 8;
    cbr i1 %70(prob = 0.5), ^b21, ^b22;
^b20:
    i32 %71 = phi [^b17, i32 %64] [^b21, i32 %69];
    i1 %72 = phi [^b17, i1 false] [^b21, i1 %74];
    cbr i1 %72(prob = 0.5), ^entry8, ^b23;
^b21:
    i32 %73 = phi [^entry7, i32 0] [^b22, i32 %75];
    i1 %74 = scmp neq i32 %73, i32 0;
    ubr ^b20;
^b22:
    store i32* %7 with i32 1;
    i32 %75 = load i32* %6;
    ubr ^b21;
^entry8:
    i32 %76 = add i32 %71, i32 1;
    i1 %77 = scmp lt i32 %21, i32 9;
    cbr i1 %77(prob = 0.5), ^b24, ^b25;
^b23:
    i32 %78 = phi [^b20, i32 %71] [^b24, i32 %76];
    i1 %79 = phi [^b20, i1 false] [^b24, i1 %81];
    cbr i1 %79(prob = 0.5), ^entry9, ^b26;
^b24:
    i32 %80 = phi [^entry8, i32 0] [^b25, i32 %82];
    i1 %81 = scmp neq i32 %80, i32 0;
    ubr ^b23;
^b25:
    store i32* %8 with i32 1;
    i32 %82 = load i32* %7;
    ubr ^b24;
^entry9:
    i32 %83 = add i32 %78, i32 1;
    i1 %84 = scmp lt i32 %21, i32 10;
    cbr i1 %84(prob = 0.5), ^b27, ^b28;
^b26:
    i32 %85 = phi [^b23, i32 %78] [^b27, i32 %83];
    i1 %86 = phi [^b23, i1 false] [^b27, i1 %88];
    cbr i1 %86(prob = 0.5), ^entry10, ^b29;
^b27:
    i32 %87 = phi [^entry9, i32 0] [^b28, i32 %89];
    i1 %88 = scmp neq i32 %87, i32 0;
    ubr ^b26;
^b28:
    store i32* %9 with i32 1;
    i32 %89 = load i32* %8;
    ubr ^b27;
^entry10:
    i32 %90 = add i32 %85, i32 1;
    i1 %91 = scmp lt i32 %21, i32 11;
    cbr i1 %91(prob = 0.5), ^b30, ^b31;
^b29:
    i32 %92 = phi [^b26, i32 %85] [^b30, i32 %90];
    i1 %93 = phi [^b26, i1 false] [^b30, i1 %95];
    cbr i1 %93(prob = 0.5), ^entry11, ^b32;
^b30:
    i32 %94 = phi [^entry10, i32 0] [^b31, i32 %96];
    i1 %95 = scmp neq i32 %94, i32 0;
    ubr ^b29;
^b31:
    store i32* %10 with i32 1;
    i32 %96 = load i32* %9;
    ubr ^b30;
^entry11:
    i32 %97 = add i32 %92, i32 1;
    i1 %98 = scmp lt i32 %21, i32 12;
    cbr i1 %98(prob = 0.5), ^b33, ^b34;
^b32:
    i32 %99 = phi [^b29, i32 %92] [^b33, i32 %97];
    i1 %100 = phi [^b29, i1 false] [^b33, i1 %102];
    cbr i1 %100(prob = 0.5), ^entry12, ^b35;
^b33:
    i32 %101 = phi [^entry11, i32 0] [^b34, i32 %103];
    i1 %102 = scmp neq i32 %101, i32 0;
    ubr ^b32;
^b34:
    store i32* %11 with i32 1;
    i32 %103 = load i32* %10;
    ubr ^b33;
^entry12:
    i32 %104 = add i32 %99, i32 1;
    i1 %105 = scmp lt i32 %21, i32 13;
    cbr i1 %105(prob = 0.5), ^b36, ^b37;
^b35:
    i32 %106 = phi [^b32, i32 %99] [^b36, i32 %104];
    i1 %107 = phi [^b32, i1 false] [^b36, i1 %109];
    cbr i1 %107(prob = 0.5), ^entry13, ^b38;
^b36:
    i32 %108 = phi [^entry12, i32 0] [^b37, i32 %110];
    i1 %109 = scmp neq i32 %108, i32 0;
    ubr ^b35;
^b37:
    store i32* %12 with i32 1;
    i32 %110 = load i32* %11;
    ubr ^b36;
^entry13:
    i32 %111 = add i32 %106, i32 1;
    i1 %112 = scmp lt i32 %21, i32 14;
    cbr i1 %112(prob = 0.5), ^b39, ^b40;
^b38:
    i32 %113 = phi [^b35, i32 %106] [^b39, i32 %111];
    i1 %114 = phi [^b35, i1 false] [^b39, i1 %116];
    cbr i1 %114(prob = 0.5), ^entry14, ^b41;
^b39:
    i32 %115 = phi [^entry13, i32 0] [^b40, i32 %117];
    i1 %116 = scmp neq i32 %115, i32 0;
    ubr ^b38;
^b40:
    store i32* %13 with i32 1;
    i32 %117 = load i32* %12;
    ubr ^b39;
^entry14:
    i32 %118 = add i32 %113, i32 1;
    i1 %119 = scmp lt i32 %21, i32 15;
    cbr i1 %119(prob = 0.5), ^b42, ^b43;
^b41:
    i32 %120 = phi [^b38, i32 %113] [^b42, i32 %118];
    i1 %121 = phi [^b38, i1 false] [^b42, i1 %123];
    cbr i1 %121(prob = 0.5), ^entry15, ^b44;
^b42:
    i32 %122 = phi [^entry14, i32 0] [^b43, i32 %124];
    i1 %123 = scmp neq i32 %122, i32 0;
    ubr ^b41;
^b43:
    store i32* %14 with i32 1;
    i32 %124 = load i32* %13;
    ubr ^b42;
^entry15:
    i32 %125 = add i32 %120, i32 1;
    i1 %126 = scmp lt i32 %21, i32 16;
    cbr i1 %126(prob = 0.5), ^b45, ^b46;
^b44:
    i32 %127 = phi [^b41, i32 %120] [^b45, i32 %125];
    i1 %128 = phi [^b41, i1 false] [^b45, i1 %130];
    cbr i1 %128(prob = 0.5), ^entry16, ^b47;
^b45:
    i32 %129 = phi [^entry15, i32 0] [^b46, i32 %131];
    i1 %130 = scmp neq i32 %129, i32 0;
    ubr ^b44;
^b46:
    store i32* %15 with i32 1;
    i32 %131 = load i32* %14;
    ubr ^b45;
^entry16:
    i32 %132 = add i32 %127, i32 1;
    i1 %133 = scmp lt i32 %21, i32 17;
    cbr i1 %133(prob = 0.5), ^b48, ^b49;
^b47:
    i32 %134 = phi [^b44, i32 %127] [^b48, i32 %132];
    i1 %135 = phi [^b44, i1 false] [^b48, i1 %137];
    cbr i1 %135(prob = 0.5), ^entry17, ^b50;
^b48:
    i32 %136 = phi [^entry16, i32 0] [^b49, i32 %138];
    i1 %137 = scmp neq i32 %136, i32 0;
    ubr ^b47;
^b49:
    store i32* %16 with i32 1;
    i32 %138 = load i32* %15;
    ubr ^b48;
^entry17:
    i32 %139 = add i32 %134, i32 1;
    i1 %140 = scmp lt i32 %21, i32 18;
    cbr i1 %140(prob = 0.5), ^b51, ^b52;
^b50:
    i32 %141 = phi [^b47, i32 %134] [^b51, i32 %139];
    i1 %142 = phi [^b47, i1 false] [^b51, i1 %144];
    cbr i1 %142(prob = 0.5), ^entry18, ^b53;
^b51:
    i32 %143 = phi [^entry17, i32 0] [^b52, i32 %145];
    i1 %144 = scmp neq i32 %143, i32 0;
    ubr ^b50;
^b52:
    store i32* %17 with i32 1;
    i32 %145 = load i32* %16;
    ubr ^b51;
^entry18:
    i32 %146 = add i32 %141, i32 1;
    i1 %147 = scmp lt i32 %21, i32 19;
    cbr i1 %147(prob = 0.5), ^b54, ^b55;
^b53:
    i32 %148 = phi [^b50, i32 %141] [^b54, i32 %146];
    i1 %149 = phi [^b50, i1 false] [^b54, i1 %151];
    cbr i1 %149(prob = 0.5), ^entry19, ^b56;
^b54:
    i32 %150 = phi [^entry18, i32 0] [^b55, i32 %152];
    i1 %151 = scmp neq i32 %150, i32 0;
    ubr ^b53;
^b55:
    store i32* %18 with i32 1;
    i32 %152 = load i32* %17;
    ubr ^b54;
^entry19:
    i32 %153 = add i32 %148, i32 1;
    i1 %154 = scmp lt i32 %21, i32 20;
    cbr i1 %154(prob = 0.5), ^b56, ^b57;
^b56:
    i32 %155 = phi [^b53, i32 %148] [^entry19, i32 %153] [^b57, i32 %153];
    i32 %156 = add i32 %21, i32 1;
    i1 %157 = scmp lt i32 %156, i32 20;
    cbr i1 %157(prob = 0.95), ^while.body, ^while.body1;
^b57:
    store i32* %19 with i32 1;
    ubr ^b56;
^while.body1:
    i32 %158 = phi [^b56, i32 %155] [^b113, i32 %290];
    i32 %159 = phi [^b56, i32 0] [^b113, i32 %291];
    i32 %160 = add i32 %158, i32 2;
    i1 %161 = scmp lt i32 %159, i32 1;
    cbr i1 %161(prob = 0.5), ^b59, ^b58;
^b58:
    store i32* %0 with i32 0;
    i32 %162 = load i32* %0;
    ubr ^b59;
^b59:
    i32 %163 = phi [^while.body1, i32 1] [^b58, i32 %162];
    i1 %164 = scmp neq i32 %163, i32 0;
    cbr i1 %164(prob = 0.5), ^b60, ^entry20;
^b60:
    i32 %165 = phi [^b59, i32 %160] [^b61, i32 %167];
    i1 %166 = phi [^b59, i1 true] [^b61, i1 %170];
    cbr i1 %166(prob = 0.5), ^b62, ^entry21;
^entry20:
    i32 %167 = add i32 %158, i32 4;
    i1 %168 = scmp lt i32 %159, i32 2;
    cbr i1 %168(prob = 0.5), ^b61, ^b63;
^b61:
    i32 %169 = phi [^entry20, i32 1] [^b63, i32 %173];
    i1 %170 = scmp neq i32 %169, i32 0;
    ubr ^b60;
^b62:
    i32 %171 = phi [^b60, i32 %165] [^b64, i32 %174];
    i1 %172 = phi [^b60, i1 true] [^b64, i1 %177];
    cbr i1 %172(prob = 0.5), ^b65, ^entry22;
^b63:
    store i32* %1 with i32 0;
    i32 %173 = load i32* %0;
    ubr ^b61;
^entry21:
    i32 %174 = add i32 %165, i32 2;
    i1 %175 = scmp lt i32 %159, i32 3;
    cbr i1 %175(prob = 0.5), ^b64, ^b66;
^b64:
    i32 %176 = phi [^entry21, i32 1] [^b66, i32 %180];
    i1 %177 = scmp neq i32 %176, i32 0;
    ubr ^b62;
^b65:
    i32 %178 = phi [^b62, i32 %171] [^b67, i32 %181];
    i1 %179 = phi [^b62, i1 true] [^b67, i1 %184];
    cbr i1 %179(prob = 0.5), ^b68, ^entry23;
^b66:
    store i32* %2 with i32 0;
    i32 %180 = load i32* %1;
    ubr ^b64;
^entry22:
    i32 %181 = add i32 %171, i32 2;
    i1 %182 = scmp lt i32 %159, i32 4;
    cbr i1 %182(prob = 0.5), ^b67, ^b69;
^b67:
    i32 %183 = phi [^entry22, i32 1] [^b69, i32 %187];
    i1 %184 = scmp neq i32 %183, i32 0;
    ubr ^b65;
^b68:
    i32 %185 = phi [^b65, i32 %178] [^b70, i32 %188];
    i1 %186 = phi [^b65, i1 true] [^b70, i1 %191];
    cbr i1 %186(prob = 0.5), ^b71, ^entry24;
^b69:
    store i32* %3 with i32 0;
    i32 %187 = load i32* %2;
    ubr ^b67;
^entry23:
    i32 %188 = add i32 %178, i32 2;
    i1 %189 = scmp lt i32 %159, i32 5;
    cbr i1 %189(prob = 0.5), ^b70, ^b72;
^b70:
    i32 %190 = phi [^entry23, i32 1] [^b72, i32 %194];
    i1 %191 = scmp neq i32 %190, i32 0;
    ubr ^b68;
^b71:
    i32 %192 = phi [^b68, i32 %185] [^b73, i32 %195];
    i1 %193 = phi [^b68, i1 true] [^b73, i1 %198];
    cbr i1 %193(prob = 0.5), ^b74, ^entry25;
^b72:
    store i32* %4 with i32 0;
    i32 %194 = load i32* %3;
    ubr ^b70;
^entry24:
    i32 %195 = add i32 %185, i32 2;
    i1 %196 = scmp lt i32 %159, i32 6;
    cbr i1 %196(prob = 0.5), ^b73, ^b75;
^b73:
    i32 %197 = phi [^entry24, i32 1] [^b75, i32 %201];
    i1 %198 = scmp neq i32 %197, i32 0;
    ubr ^b71;
^b74:
    i32 %199 = phi [^b71, i32 %192] [^b76, i32 %202];
    i1 %200 = phi [^b71, i1 true] [^b76, i1 %205];
    cbr i1 %200(prob = 0.5), ^b77, ^entry26;
^b75:
    store i32* %5 with i32 0;
    i32 %201 = load i32* %4;
    ubr ^b73;
^entry25:
    i32 %202 = add i32 %192, i32 2;
    i1 %203 = scmp lt i32 %159, i32 7;
    cbr i1 %203(prob = 0.5), ^b76, ^b78;
^b76:
    i32 %204 = phi [^entry25, i32 1] [^b78, i32 %208];
    i1 %205 = scmp neq i32 %204, i32 0;
    ubr ^b74;
^b77:
    i32 %206 = phi [^b74, i32 %199] [^b79, i32 %209];
    i1 %207 = phi [^b74, i1 true] [^b79, i1 %212];
    cbr i1 %207(prob = 0.5), ^b80, ^entry27;
^b78:
    store i32* %6 with i32 0;
    i32 %208 = load i32* %5;
    ubr ^b76;
^entry26:
    i32 %209 = add i32 %199, i32 2;
    i1 %210 = scmp lt i32 %159, i32 8;
    cbr i1 %210(prob = 0.5), ^b79, ^b81;
^b79:
    i32 %211 = phi [^entry26, i32 1] [^b81, i32 %215];
    i1 %212 = scmp neq i32 %211, i32 0;
    ubr ^b77;
^b80:
    i32 %213 = phi [^b77, i32 %206] [^b82, i32 %216];
    i1 %214 = phi [^b77, i1 true] [^b82, i1 %219];
    cbr i1 %214(prob = 0.5), ^b83, ^entry28;
^b81:
    store i32* %7 with i32 0;
    i32 %215 = load i32* %6;
    ubr ^b79;
^entry27:
    i32 %216 = add i32 %206, i32 2;
    i1 %217 = scmp lt i32 %159, i32 9;
    cbr i1 %217(prob = 0.5), ^b82, ^b84;
^b82:
    i32 %218 = phi [^entry27, i32 1] [^b84, i32 %222];
    i1 %219 = scmp neq i32 %218, i32 0;
    ubr ^b80;
^b83:
    i32 %220 = phi [^b80, i32 %213] [^b85, i32 %223];
    i1 %221 = phi [^b80, i1 true] [^b85, i1 %226];
    cbr i1 %221(prob = 0.5), ^b86, ^entry29;
^b84:
    store i32* %8 with i32 0;
    i32 %222 = load i32* %7;
    ubr ^b82;
^entry28:
    i32 %223 = add i32 %213, i32 2;
    i1 %224 = scmp lt i32 %159, i32 10;
    cbr i1 %224(prob = 0.5), ^b85, ^b87;
^b85:
    i32 %225 = phi [^entry28, i32 1] [^b87, i32 %229];
    i1 %226 = scmp neq i32 %225, i32 0;
    ubr ^b83;
^b86:
    i32 %227 = phi [^b83, i32 %220] [^b88, i32 %230];
    i1 %228 = phi [^b83, i1 true] [^b88, i1 %233];
    cbr i1 %228(prob = 0.5), ^b89, ^entry30;
^b87:
    store i32* %9 with i32 0;
    i32 %229 = load i32* %8;
    ubr ^b85;
^entry29:
    i32 %230 = add i32 %220, i32 2;
    i1 %231 = scmp lt i32 %159, i32 11;
    cbr i1 %231(prob = 0.5), ^b88, ^b90;
^b88:
    i32 %232 = phi [^entry29, i32 1] [^b90, i32 %236];
    i1 %233 = scmp neq i32 %232, i32 0;
    ubr ^b86;
^b89:
    i32 %234 = phi [^b86, i32 %227] [^b91, i32 %237];
    i1 %235 = phi [^b86, i1 true] [^b91, i1 %240];
    cbr i1 %235(prob = 0.5), ^b92, ^entry31;
^b90:
    store i32* %10 with i32 0;
    i32 %236 = load i32* %9;
    ubr ^b88;
^entry30:
    i32 %237 = add i32 %227, i32 2;
    i1 %238 = scmp lt i32 %159, i32 12;
    cbr i1 %238(prob = 0.5), ^b91, ^b93;
^b91:
    i32 %239 = phi [^entry30, i32 1] [^b93, i32 %243];
    i1 %240 = scmp neq i32 %239, i32 0;
    ubr ^b89;
^b92:
    i32 %241 = phi [^b89, i32 %234] [^b94, i32 %244];
    i1 %242 = phi [^b89, i1 true] [^b94, i1 %247];
    cbr i1 %242(prob = 0.5), ^b95, ^entry32;
^b93:
    store i32* %11 with i32 0;
    i32 %243 = load i32* %10;
    ubr ^b91;
^entry31:
    i32 %244 = add i32 %234, i32 2;
    i1 %245 = scmp lt i32 %159, i32 13;
    cbr i1 %245(prob = 0.5), ^b94, ^b96;
^b94:
    i32 %246 = phi [^entry31, i32 1] [^b96, i32 %250];
    i1 %247 = scmp neq i32 %246, i32 0;
    ubr ^b92;
^b95:
    i32 %248 = phi [^b92, i32 %241] [^b97, i32 %251];
    i1 %249 = phi [^b92, i1 true] [^b97, i1 %254];
    cbr i1 %249(prob = 0.5), ^b98, ^entry33;
^b96:
    store i32* %12 with i32 0;
    i32 %250 = load i32* %11;
    ubr ^b94;
^entry32:
    i32 %251 = add i32 %241, i32 2;
    i1 %252 = scmp lt i32 %159, i32 14;
    cbr i1 %252(prob = 0.5), ^b97, ^b99;
^b97:
    i32 %253 = phi [^entry32, i32 1] [^b99, i32 %257];
    i1 %254 = scmp neq i32 %253, i32 0;
    ubr ^b95;
^b98:
    i32 %255 = phi [^b95, i32 %248] [^b100, i32 %258];
    i1 %256 = phi [^b95, i1 true] [^b100, i1 %261];
    cbr i1 %256(prob = 0.5), ^b101, ^entry34;
^b99:
    store i32* %13 with i32 0;
    i32 %257 = load i32* %12;
    ubr ^b97;
^entry33:
    i32 %258 = add i32 %248, i32 2;
    i1 %259 = scmp lt i32 %159, i32 15;
    cbr i1 %259(prob = 0.5), ^b100, ^b102;
^b100:
    i32 %260 = phi [^entry33, i32 1] [^b102, i32 %264];
    i1 %261 = scmp neq i32 %260, i32 0;
    ubr ^b98;
^b101:
    i32 %262 = phi [^b98, i32 %255] [^b103, i32 %265];
    i1 %263 = phi [^b98, i1 true] [^b103, i1 %268];
    cbr i1 %263(prob = 0.5), ^b104, ^entry35;
^b102:
    store i32* %14 with i32 0;
    i32 %264 = load i32* %13;
    ubr ^b100;
^entry34:
    i32 %265 = add i32 %255, i32 2;
    i1 %266 = scmp lt i32 %159, i32 16;
    cbr i1 %266(prob = 0.5), ^b103, ^b105;
^b103:
    i32 %267 = phi [^entry34, i32 1] [^b105, i32 %271];
    i1 %268 = scmp neq i32 %267, i32 0;
    ubr ^b101;
^b104:
    i32 %269 = phi [^b101, i32 %262] [^b106, i32 %272];
    i1 %270 = phi [^b101, i1 true] [^b106, i1 %275];
    cbr i1 %270(prob = 0.5), ^b107, ^entry36;
^b105:
    store i32* %15 with i32 0;
    i32 %271 = load i32* %14;
    ubr ^b103;
^entry35:
    i32 %272 = add i32 %262, i32 2;
    i1 %273 = scmp lt i32 %159, i32 17;
    cbr i1 %273(prob = 0.5), ^b106, ^b108;
^b106:
    i32 %274 = phi [^entry35, i32 1] [^b108, i32 %278];
    i1 %275 = scmp neq i32 %274, i32 0;
    ubr ^b104;
^b107:
    i32 %276 = phi [^b104, i32 %269] [^b109, i32 %279];
    i1 %277 = phi [^b104, i1 true] [^b109, i1 %282];
    cbr i1 %277(prob = 0.5), ^b110, ^entry37;
^b108:
    store i32* %16 with i32 0;
    i32 %278 = load i32* %15;
    ubr ^b106;
^entry36:
    i32 %279 = add i32 %269, i32 2;
    i1 %280 = scmp lt i32 %159, i32 18;
    cbr i1 %280(prob = 0.5), ^b109, ^b111;
^b109:
    i32 %281 = phi [^entry36, i32 1] [^b111, i32 %285];
    i1 %282 = scmp neq i32 %281, i32 0;
    ubr ^b107;
^b110:
    i32 %283 = phi [^b107, i32 %276] [^b112, i32 %286];
    i1 %284 = phi [^b107, i1 true] [^b112, i1 %289];
    cbr i1 %284(prob = 0.5), ^b113, ^entry38;
^b111:
    store i32* %17 with i32 0;
    i32 %285 = load i32* %16;
    ubr ^b109;
^entry37:
    i32 %286 = add i32 %276, i32 2;
    i1 %287 = scmp lt i32 %159, i32 19;
    cbr i1 %287(prob = 0.5), ^b112, ^b114;
^b112:
    i32 %288 = phi [^entry37, i32 1] [^b114, i32 %293];
    i1 %289 = scmp neq i32 %288, i32 0;
    ubr ^b110;
^b113:
    i32 %290 = phi [^b110, i32 %283] [^entry38, i32 %294] [^b115, i32 %294];
    i32 %291 = add i32 %159, i32 1;
    i1 %292 = scmp lt i32 %291, i32 20;
    cbr i1 %292(prob = 0.95), ^while.body1, ^entry39;
^b114:
    store i32* %18 with i32 0;
    i32 %293 = load i32* %17;
    ubr ^b112;
^entry38:
    i32 %294 = add i32 %283, i32 2;
    i1 %295 = scmp lt i32 %159, i32 20;
    cbr i1 %295(prob = 0.5), ^b113, ^b115;
^b115:
    store i32* %19 with i32 0;
    ubr ^b113;
^entry39:
    i32 %296 = add i32 %290, i32 1;
    store i32* %0 with i32 1;
    i32 %297 = load i32* %0;
    i1 %298 = scmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.97), ^while.body2, ^entry40;
^while.body2:
    i32 %299 = phi [^entry39, i32 %296] [^b116, i32 %309];
    i32 %300 = phi [^entry39, i32 1] [^b116, i32 %301];
    i32 %301 = add i32 %300, i32 1;
    i1 %302 = scmp lt i32 %301, i32 20;
    cbr i1 %302(prob = 0.5), ^entry41, ^b116;
^entry40:
    i32 %303 = phi [^entry39, i32 %296] [^b116, i32 %309];
    i32 %304 = add i32 %303, i32 3;
    i32 %305 = load i32* %0;
    i1 %306 = scmp neq i32 %305, i32 0;
    cbr i1 %306(prob = 0.5), ^entry42, ^entry43;
^entry41:
    i32 %307 = add i32 %299, i32 1;
    i1 %308 = scmp ge i32 %300, i32 %301;
    cbr i1 %308(prob = 0.5), ^b117, ^b118;
^b116:
    i32 %309 = phi [^while.body2, i32 %299] [^b117, i32 %307];
    i1 %310 = phi [^while.body2, i1 false] [^b117, i1 %319];
    cbr i1 %310(prob = 0.97), ^while.body2, ^entry40;
^entry42:
    i32 %311 = add i32 %303, i32 6;
    i32 %312 = load i32* %1;
    i1 %313 = scmp neq i32 %312, i32 0;
    cbr i1 %313(prob = 0.5), ^entry44, ^entry43;
^entry43:
    i32 %314 = phi [^entry40, i32 %304] [^entry42, i32 %311];
    i32 %315 = add i32 %314, i32 3;
    i32 %316 = load i32* %2;
    i1 %317 = scmp eq i32 %316, i32 0;
    cbr i1 %317(prob = 0.5), ^entry44, ^entry45;
^b117:
    i32 %318 = phi [^entry41, i32 0] [^b118, i32 0] [^if.then, i32 %335] [^if.else, i32 %338];
    i1 %319 = scmp neq i32 %318, i32 0;
    ubr ^b116;
^b118:
    i1 %320 = scmp gt i32 %300, i32 19;
    cbr i1 %320(prob = 0.5), ^b117, ^b119;
^entry44:
    i32 %321 = phi [^entry42, i32 %311] [^entry43, i32 %315] [^entry45, i32 %325];
    i32 %322 = add i32 %321, i32 3;
    i32 %323 = load i32* %4;
    i1 %324 = scmp eq i32 %323, i32 0;
    cbr i1 %324(prob = 0.5), ^entry46, ^entry47;
^entry45:
    i32 %325 = add i32 %314, i32 6;
    ubr ^entry44;
^entry46:
    i32 %326 = phi [^entry44, i32 %322] [^entry49, i32 %343] [^entry53, i32 %355];
    i32 %327 = add i32 %326, i32 3;
    i32 %328 = load i32* %9;
    i1 %329 = scmp neq i32 %328, i32 0;
    cbr i1 %329(prob = 0.5), ^entry48, ^entry51;
^b119:
    i32* %330 = getelementptr &([20 * i32]* %array)[i64 0][i32 %300];
    store i32* %330 with i32 1;
    i1 %331 = scmp eq i32 %300, i32 0;
    cbr i1 %331(prob = 0.5), ^if.then, ^if.else;
^entry47:
    i32 %332 = add i32 %321, i32 6;
    i32 %333 = load i32* %5;
    i1 %334 = scmp neq i32 %333, i32 0;
    cbr i1 %334(prob = 0.5), ^entry50, ^entry49;
^if.then:
    i32 %335 = load i32* %0;
    ubr ^b117;
^if.else:
    i32 %336 = add i32 %300, i32 -1;
    i32* %337 = getelementptr &([20 * i32]* %array)[i64 0][i32 %336];
    i32 %338 = load i32* %337;
    ubr ^b117;
^entry48:
    i32 %339 = add i32 %326, i32 6;
    i32 %340 = load i32* %10;
    i1 %341 = scmp eq i32 %340, i32 0;
    cbr i1 %341(prob = 0.5), ^entry52, ^entry51;
^entry49:
    i32 %342 = phi [^entry47, i32 %332] [^entry50, i32 %344] [^entry53, i32 %355];
    i32 %343 = add i32 %342, i32 3;
    ubr ^entry46;
^entry50:
    i32 %344 = add i32 %321, i32 9;
    i32 %345 = load i32* %6;
    i1 %346 = scmp eq i32 %345, i32 0;
    cbr i1 %346(prob = 0.5), ^entry53, ^entry49;
^entry51:
    i32 %347 = phi [^entry46, i32 %327] [^entry48, i32 %339];
    i32 %348 = add i32 %347, i32 3;
    i32 %349 = load i32* %11;
    i1 %350 = scmp eq i32 %349, i32 0;
    cbr i1 %350(prob = 0.5), ^entry52, ^entry54;
^entry52:
    i32 %351 = phi [^entry48, i32 %339] [^entry51, i32 %348] [^entry54, i32 %358] [^entry57, i32 %368] [^entry60, i32 %377] [^entry64, i32 %394];
    i32 %352 = add i32 %351, i32 3;
    i32 %353 = load i32* %0;
    i1 %354 = scmp neq i32 %353, i32 0;
    cbr i1 %354(prob = 0.5), ^entry55, ^entry56;
^entry53:
    i32 %355 = add i32 %321, i32 12;
    i32 %356 = load i32* %7;
    i1 %357 = scmp neq i32 %356, i32 0;
    cbr i1 %357(prob = 0.5), ^entry46, ^entry49;
^entry54:
    i32 %358 = add i32 %347, i32 6;
    i32 %359 = load i32* %12;
    i1 %360 = scmp eq i32 %359, i32 0;
    cbr i1 %360(prob = 0.5), ^entry52, ^entry57;
^entry55:
    i32 %361 = add i32 %351, i32 6;
    i32 %362 = load i32* %2;
    i1 %363 = scmp neq i32 %362, i32 0;
    cbr i1 %363(prob = 0.5), ^entry58, ^entry56;
^entry56:
    i32 %364 = phi [^entry52, i32 %352] [^entry55, i32 %361] [^entry58, i32 %371] [^entry61, i32 %384];
    i32 %365 = add i32 %364, i32 3;
    i32 %366 = load i32* %5;
    i1 %367 = scmp neq i32 %366, i32 0;
    cbr i1 %367(prob = 0.5), ^b120, ^entry59;
^entry57:
    i32 %368 = add i32 %347, i32 9;
    i32 %369 = load i32* %13;
    i1 %370 = scmp eq i32 %369, i32 0;
    cbr i1 %370(prob = 0.5), ^entry52, ^entry60;
^entry58:
    i32 %371 = add i32 %351, i32 9;
    i32 %372 = load i32* %3;
    i1 %373 = scmp eq i32 %372, i32 0;
    cbr i1 %373(prob = 0.5), ^entry61, ^entry56;
^entry59:
    i32 %374 = add i32 %364, i32 6;
    i32 %375 = load i32* %6;
    i1 %376 = scmp neq i32 %375, i32 0;
    cbr i1 %376(prob = 0.5), ^entry63, ^entry62;
^entry60:
    i32 %377 = add i32 %347, i32 12;
    i32 %378 = load i32* %14;
    i1 %379 = scmp neq i32 %378, i32 0;
    cbr i1 %379(prob = 0.5), ^entry64, ^entry52;
^b120:
    i32 %380 = phi [^entry56, i32 %365] [^entry61, i32 %384] [^entry62, i32 %388] [^entry63, i32 %391];
    i1 %381 = phi [^entry56, i1 true] [^entry61, i1 true] [^entry62, i1 %390] [^entry63, i1 true];
    i32 %382 = zext i1 %381 to i32;
    i32 %383 = add i32 %382, i32 %380;
    call (i32) -> void @putint(i32 %383);
    ret i32 0;
^entry61:
    i32 %384 = add i32 %351, i32 12;
    i32 %385 = load i32* %4;
    i1 %386 = scmp eq i32 %385, i32 0;
    cbr i1 %386(prob = 0.5), ^b120, ^entry56;
^entry62:
    i32 %387 = phi [^entry59, i32 %374] [^entry63, i32 %391];
    i32 %388 = add i32 %387, i32 3;
    i32 %389 = load i32* %8;
    i1 %390 = scmp neq i32 %389, i32 0;
    ubr ^b120;
^entry63:
    i32 %391 = add i32 %364, i32 9;
    i32 %392 = load i32* %7;
    i1 %393 = scmp eq i32 %392, i32 0;
    cbr i1 %393(prob = 0.5), ^b120, ^entry62;
^entry64:
    i32 %394 = add i32 %347, i32 15;
    ubr ^entry52;
}
