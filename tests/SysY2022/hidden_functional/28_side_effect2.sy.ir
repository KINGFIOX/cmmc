internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [20 * i32]* %array = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %array)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([20 * i32]* %array)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([20 * i32]* %array)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([20 * i32]* %array)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([20 * i32]* %array)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([20 * i32]* %array)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([20 * i32]* %array)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([20 * i32]* %array)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([20 * i32]* %array)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([20 * i32]* %array)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([20 * i32]* %array)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([20 * i32]* %array)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([20 * i32]* %array)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([20 * i32]* %array)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([20 * i32]* %array)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([20 * i32]* %array)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([20 * i32]* %array)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([20 * i32]* %array)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([20 * i32]* %array)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([20 * i32]* %array)[i64 0][i64 19];
    store i32* %19 with i32 0;
    ubr ^while.body;
^while.body:
    i32 %20 = phi [^b56, i32 %175] [^entry, i32 0];
    i32 %21 = phi [^b56, i32 %176] [^entry, i32 0];
    i32 %22 = add i32 %20, i32 1;
    i1 %23 = scmp ge i32 0, i32 %21;
    i1 %24 = or i1 %23, i1 false;
    cbr i1 %24(prob = 0.75), ^b1, ^b;
^b:
    store i32* %0 with i32 1;
    i32 %25 = load i32* %0;
    ubr ^b1;
^b1:
    i32 %26 = phi [^b, i32 %25] [^while.body, i32 0];
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^entry1, ^b2;
^entry1:
    i32 %28 = add i32 %20, i32 2;
    i1 %29 = scmp ge i32 1, i32 %21;
    i1 %30 = or i1 %29, i1 false;
    cbr i1 %30(prob = 0.75), ^b3, ^b4;
^b2:
    i32 %31 = phi [^b3, i32 %28] [^b1, i32 %22];
    i1 %32 = phi [^b3, i1 %34] [^b1, i1 false];
    cbr i1 %32(prob = 0.5), ^entry2, ^b5;
^b3:
    i32 %33 = phi [^b4, i32 %35] [^entry1, i32 0];
    i1 %34 = scmp neq i32 %33, i32 0;
    ubr ^b2;
^b4:
    store i32* %1 with i32 1;
    i32 %35 = load i32* %0;
    ubr ^b3;
^entry2:
    i32 %36 = add i32 %31, i32 1;
    i1 %37 = scmp ge i32 2, i32 %21;
    i1 %38 = or i1 %37, i1 false;
    cbr i1 %38(prob = 0.75), ^b6, ^b7;
^b5:
    i32 %39 = phi [^b6, i32 %36] [^b2, i32 %31];
    i1 %40 = phi [^b6, i1 %42] [^b2, i1 false];
    cbr i1 %40(prob = 0.5), ^entry3, ^b8;
^b6:
    i32 %41 = phi [^b7, i32 %43] [^entry2, i32 0];
    i1 %42 = scmp neq i32 %41, i32 0;
    ubr ^b5;
^b7:
    store i32* %2 with i32 1;
    i32 %43 = load i32* %1;
    ubr ^b6;
^entry3:
    i32 %44 = add i32 %39, i32 1;
    i1 %45 = scmp ge i32 3, i32 %21;
    i1 %46 = or i1 %45, i1 false;
    cbr i1 %46(prob = 0.75), ^b9, ^b10;
^b8:
    i32 %47 = phi [^b9, i32 %44] [^b5, i32 %39];
    i1 %48 = phi [^b9, i1 %50] [^b5, i1 false];
    cbr i1 %48(prob = 0.5), ^entry4, ^b11;
^b9:
    i32 %49 = phi [^b10, i32 %51] [^entry3, i32 0];
    i1 %50 = scmp neq i32 %49, i32 0;
    ubr ^b8;
^b10:
    store i32* %3 with i32 1;
    i32 %51 = load i32* %2;
    ubr ^b9;
^entry4:
    i32 %52 = add i32 %47, i32 1;
    i1 %53 = scmp ge i32 4, i32 %21;
    i1 %54 = or i1 %53, i1 false;
    cbr i1 %54(prob = 0.75), ^b12, ^b13;
^b11:
    i32 %55 = phi [^b12, i32 %52] [^b8, i32 %47];
    i1 %56 = phi [^b12, i1 %58] [^b8, i1 false];
    cbr i1 %56(prob = 0.5), ^entry5, ^b14;
^b12:
    i32 %57 = phi [^b13, i32 %59] [^entry4, i32 0];
    i1 %58 = scmp neq i32 %57, i32 0;
    ubr ^b11;
^b13:
    store i32* %4 with i32 1;
    i32 %59 = load i32* %3;
    ubr ^b12;
^entry5:
    i32 %60 = add i32 %55, i32 1;
    i1 %61 = scmp ge i32 5, i32 %21;
    i1 %62 = or i1 %61, i1 false;
    cbr i1 %62(prob = 0.75), ^b15, ^b16;
^b14:
    i32 %63 = phi [^b15, i32 %60] [^b11, i32 %55];
    i1 %64 = phi [^b15, i1 %66] [^b11, i1 false];
    cbr i1 %64(prob = 0.5), ^entry6, ^b17;
^b15:
    i32 %65 = phi [^b16, i32 %67] [^entry5, i32 0];
    i1 %66 = scmp neq i32 %65, i32 0;
    ubr ^b14;
^b16:
    store i32* %5 with i32 1;
    i32 %67 = load i32* %4;
    ubr ^b15;
^entry6:
    i32 %68 = add i32 %63, i32 1;
    i1 %69 = scmp ge i32 6, i32 %21;
    i1 %70 = or i1 %69, i1 false;
    cbr i1 %70(prob = 0.75), ^b18, ^b19;
^b17:
    i32 %71 = phi [^b18, i32 %68] [^b14, i32 %63];
    i1 %72 = phi [^b18, i1 %74] [^b14, i1 false];
    cbr i1 %72(prob = 0.5), ^entry7, ^b20;
^b18:
    i32 %73 = phi [^b19, i32 %75] [^entry6, i32 0];
    i1 %74 = scmp neq i32 %73, i32 0;
    ubr ^b17;
^b19:
    store i32* %6 with i32 1;
    i32 %75 = load i32* %5;
    ubr ^b18;
^entry7:
    i32 %76 = add i32 %71, i32 1;
    i1 %77 = scmp ge i32 7, i32 %21;
    i1 %78 = or i1 %77, i1 false;
    cbr i1 %78(prob = 0.75), ^b21, ^b22;
^b20:
    i32 %79 = phi [^b21, i32 %76] [^b17, i32 %71];
    i1 %80 = phi [^b21, i1 %82] [^b17, i1 false];
    cbr i1 %80(prob = 0.5), ^entry8, ^b23;
^b21:
    i32 %81 = phi [^b22, i32 %83] [^entry7, i32 0];
    i1 %82 = scmp neq i32 %81, i32 0;
    ubr ^b20;
^b22:
    store i32* %7 with i32 1;
    i32 %83 = load i32* %6;
    ubr ^b21;
^entry8:
    i32 %84 = add i32 %79, i32 1;
    i1 %85 = scmp ge i32 8, i32 %21;
    i1 %86 = or i1 %85, i1 false;
    cbr i1 %86(prob = 0.75), ^b24, ^b25;
^b23:
    i32 %87 = phi [^b24, i32 %84] [^b20, i32 %79];
    i1 %88 = phi [^b24, i1 %90] [^b20, i1 false];
    cbr i1 %88(prob = 0.5), ^entry9, ^b26;
^b24:
    i32 %89 = phi [^b25, i32 %91] [^entry8, i32 0];
    i1 %90 = scmp neq i32 %89, i32 0;
    ubr ^b23;
^b25:
    store i32* %8 with i32 1;
    i32 %91 = load i32* %7;
    ubr ^b24;
^entry9:
    i32 %92 = add i32 %87, i32 1;
    i1 %93 = scmp ge i32 9, i32 %21;
    i1 %94 = or i1 %93, i1 false;
    cbr i1 %94(prob = 0.75), ^b27, ^b28;
^b26:
    i32 %95 = phi [^b27, i32 %92] [^b23, i32 %87];
    i1 %96 = phi [^b27, i1 %98] [^b23, i1 false];
    cbr i1 %96(prob = 0.5), ^entry10, ^b29;
^b27:
    i32 %97 = phi [^b28, i32 %99] [^entry9, i32 0];
    i1 %98 = scmp neq i32 %97, i32 0;
    ubr ^b26;
^b28:
    store i32* %9 with i32 1;
    i32 %99 = load i32* %8;
    ubr ^b27;
^entry10:
    i32 %100 = add i32 %95, i32 1;
    i1 %101 = scmp ge i32 10, i32 %21;
    i1 %102 = or i1 %101, i1 false;
    cbr i1 %102(prob = 0.75), ^b30, ^b31;
^b29:
    i32 %103 = phi [^b30, i32 %100] [^b26, i32 %95];
    i1 %104 = phi [^b30, i1 %106] [^b26, i1 false];
    cbr i1 %104(prob = 0.5), ^entry11, ^b32;
^b30:
    i32 %105 = phi [^b31, i32 %107] [^entry10, i32 0];
    i1 %106 = scmp neq i32 %105, i32 0;
    ubr ^b29;
^b31:
    store i32* %10 with i32 1;
    i32 %107 = load i32* %9;
    ubr ^b30;
^entry11:
    i32 %108 = add i32 %103, i32 1;
    i1 %109 = scmp ge i32 11, i32 %21;
    i1 %110 = or i1 %109, i1 false;
    cbr i1 %110(prob = 0.75), ^b33, ^b34;
^b32:
    i32 %111 = phi [^b33, i32 %108] [^b29, i32 %103];
    i1 %112 = phi [^b33, i1 %114] [^b29, i1 false];
    cbr i1 %112(prob = 0.5), ^entry12, ^b35;
^b33:
    i32 %113 = phi [^b34, i32 %115] [^entry11, i32 0];
    i1 %114 = scmp neq i32 %113, i32 0;
    ubr ^b32;
^b34:
    store i32* %11 with i32 1;
    i32 %115 = load i32* %10;
    ubr ^b33;
^entry12:
    i32 %116 = add i32 %111, i32 1;
    i1 %117 = scmp ge i32 12, i32 %21;
    i1 %118 = or i1 %117, i1 false;
    cbr i1 %118(prob = 0.75), ^b36, ^b37;
^b35:
    i32 %119 = phi [^b36, i32 %116] [^b32, i32 %111];
    i1 %120 = phi [^b36, i1 %122] [^b32, i1 false];
    cbr i1 %120(prob = 0.5), ^entry13, ^b38;
^b36:
    i32 %121 = phi [^b37, i32 %123] [^entry12, i32 0];
    i1 %122 = scmp neq i32 %121, i32 0;
    ubr ^b35;
^b37:
    store i32* %12 with i32 1;
    i32 %123 = load i32* %11;
    ubr ^b36;
^entry13:
    i32 %124 = add i32 %119, i32 1;
    i1 %125 = scmp ge i32 13, i32 %21;
    i1 %126 = or i1 %125, i1 false;
    cbr i1 %126(prob = 0.75), ^b39, ^b40;
^b38:
    i32 %127 = phi [^b39, i32 %124] [^b35, i32 %119];
    i1 %128 = phi [^b39, i1 %130] [^b35, i1 false];
    cbr i1 %128(prob = 0.5), ^entry14, ^b41;
^b39:
    i32 %129 = phi [^b40, i32 %131] [^entry13, i32 0];
    i1 %130 = scmp neq i32 %129, i32 0;
    ubr ^b38;
^b40:
    store i32* %13 with i32 1;
    i32 %131 = load i32* %12;
    ubr ^b39;
^entry14:
    i32 %132 = add i32 %127, i32 1;
    i1 %133 = scmp ge i32 14, i32 %21;
    i1 %134 = or i1 %133, i1 false;
    cbr i1 %134(prob = 0.75), ^b42, ^b43;
^b41:
    i32 %135 = phi [^b42, i32 %132] [^b38, i32 %127];
    i1 %136 = phi [^b42, i1 %138] [^b38, i1 false];
    cbr i1 %136(prob = 0.5), ^entry15, ^b44;
^b42:
    i32 %137 = phi [^b43, i32 %139] [^entry14, i32 0];
    i1 %138 = scmp neq i32 %137, i32 0;
    ubr ^b41;
^b43:
    store i32* %14 with i32 1;
    i32 %139 = load i32* %13;
    ubr ^b42;
^entry15:
    i32 %140 = add i32 %135, i32 1;
    i1 %141 = scmp ge i32 15, i32 %21;
    i1 %142 = or i1 %141, i1 false;
    cbr i1 %142(prob = 0.75), ^b45, ^b46;
^b44:
    i32 %143 = phi [^b45, i32 %140] [^b41, i32 %135];
    i1 %144 = phi [^b45, i1 %146] [^b41, i1 false];
    cbr i1 %144(prob = 0.5), ^entry16, ^b47;
^b45:
    i32 %145 = phi [^b46, i32 %147] [^entry15, i32 0];
    i1 %146 = scmp neq i32 %145, i32 0;
    ubr ^b44;
^b46:
    store i32* %15 with i32 1;
    i32 %147 = load i32* %14;
    ubr ^b45;
^entry16:
    i32 %148 = add i32 %143, i32 1;
    i1 %149 = scmp ge i32 16, i32 %21;
    i1 %150 = or i1 %149, i1 false;
    cbr i1 %150(prob = 0.75), ^b48, ^b49;
^b47:
    i32 %151 = phi [^b48, i32 %148] [^b44, i32 %143];
    i1 %152 = phi [^b48, i1 %154] [^b44, i1 false];
    cbr i1 %152(prob = 0.5), ^entry17, ^b50;
^b48:
    i32 %153 = phi [^b49, i32 %155] [^entry16, i32 0];
    i1 %154 = scmp neq i32 %153, i32 0;
    ubr ^b47;
^b49:
    store i32* %16 with i32 1;
    i32 %155 = load i32* %15;
    ubr ^b48;
^entry17:
    i32 %156 = add i32 %151, i32 1;
    i1 %157 = scmp ge i32 17, i32 %21;
    i1 %158 = or i1 %157, i1 false;
    cbr i1 %158(prob = 0.75), ^b51, ^b52;
^b50:
    i32 %159 = phi [^b51, i32 %156] [^b47, i32 %151];
    i1 %160 = phi [^b51, i1 %162] [^b47, i1 false];
    cbr i1 %160(prob = 0.5), ^entry18, ^b53;
^b51:
    i32 %161 = phi [^b52, i32 %163] [^entry17, i32 0];
    i1 %162 = scmp neq i32 %161, i32 0;
    ubr ^b50;
^b52:
    store i32* %17 with i32 1;
    i32 %163 = load i32* %16;
    ubr ^b51;
^entry18:
    i32 %164 = add i32 %159, i32 1;
    i1 %165 = scmp ge i32 18, i32 %21;
    i1 %166 = or i1 %165, i1 false;
    cbr i1 %166(prob = 0.75), ^b54, ^b55;
^b53:
    i32 %167 = phi [^b54, i32 %164] [^b50, i32 %159];
    i1 %168 = phi [^b54, i1 %170] [^b50, i1 false];
    cbr i1 %168(prob = 0.5), ^entry19, ^b56;
^b54:
    i32 %169 = phi [^b55, i32 %171] [^entry18, i32 0];
    i1 %170 = scmp neq i32 %169, i32 0;
    ubr ^b53;
^b55:
    store i32* %18 with i32 1;
    i32 %171 = load i32* %17;
    ubr ^b54;
^entry19:
    i32 %172 = add i32 %167, i32 1;
    i1 %173 = scmp ge i32 19, i32 %21;
    i1 %174 = or i1 %173, i1 false;
    cbr i1 %174(prob = 0.75), ^b56, ^b57;
^b56:
    i32 %175 = phi [^b57, i32 %172] [^entry19, i32 %172] [^b53, i32 %167];
    i32 %176 = add i32 %21, i32 1;
    i1 %177 = scmp lt i32 %176, i32 20;
    cbr i1 %177(prob = 0.95), ^while.body, ^while.body1;
^b57:
    store i32* %19 with i32 1;
    ubr ^b56;
^while.body1:
    i32 %178 = phi [^b113, i32 %329] [^b56, i32 %175];
    i32 %179 = phi [^b56, i32 0] [^b113, i32 %330];
    i32 %180 = add i32 %178, i32 2;
    i1 %181 = scmp ge i32 0, i32 %179;
    i1 %182 = or i1 %181, i1 false;
    cbr i1 %182(prob = 0.75), ^b59, ^b58;
^b58:
    store i32* %0 with i32 0;
    i32 %183 = load i32* %0;
    ubr ^b59;
^b59:
    i32 %184 = phi [^b58, i32 %183] [^while.body1, i32 1];
    i1 %185 = scmp neq i32 %184, i32 0;
    cbr i1 %185(prob = 0.5), ^b60, ^entry20;
^b60:
    i32 %186 = phi [^b61, i32 %188] [^b59, i32 %180];
    i1 %187 = phi [^b61, i1 %192] [^b59, i1 true];
    cbr i1 %187(prob = 0.5), ^b62, ^entry21;
^entry20:
    i32 %188 = add i32 %178, i32 4;
    i1 %189 = scmp ge i32 1, i32 %179;
    i1 %190 = or i1 %189, i1 false;
    cbr i1 %190(prob = 0.75), ^b61, ^b63;
^b61:
    i32 %191 = phi [^b63, i32 %195] [^entry20, i32 1];
    i1 %192 = scmp neq i32 %191, i32 0;
    ubr ^b60;
^b62:
    i32 %193 = phi [^b64, i32 %196] [^b60, i32 %186];
    i1 %194 = phi [^b64, i1 %200] [^b60, i1 true];
    cbr i1 %194(prob = 0.5), ^b65, ^entry22;
^b63:
    store i32* %1 with i32 0;
    i32 %195 = load i32* %0;
    ubr ^b61;
^entry21:
    i32 %196 = add i32 %186, i32 2;
    i1 %197 = scmp ge i32 2, i32 %179;
    i1 %198 = or i1 %197, i1 false;
    cbr i1 %198(prob = 0.75), ^b64, ^b66;
^b64:
    i32 %199 = phi [^b66, i32 %203] [^entry21, i32 1];
    i1 %200 = scmp neq i32 %199, i32 0;
    ubr ^b62;
^b65:
    i32 %201 = phi [^b67, i32 %204] [^b62, i32 %193];
    i1 %202 = phi [^b67, i1 %208] [^b62, i1 true];
    cbr i1 %202(prob = 0.5), ^b68, ^entry23;
^b66:
    store i32* %2 with i32 0;
    i32 %203 = load i32* %1;
    ubr ^b64;
^entry22:
    i32 %204 = add i32 %193, i32 2;
    i1 %205 = scmp ge i32 3, i32 %179;
    i1 %206 = or i1 %205, i1 false;
    cbr i1 %206(prob = 0.75), ^b67, ^b69;
^b67:
    i32 %207 = phi [^b69, i32 %211] [^entry22, i32 1];
    i1 %208 = scmp neq i32 %207, i32 0;
    ubr ^b65;
^b68:
    i32 %209 = phi [^b70, i32 %212] [^b65, i32 %201];
    i1 %210 = phi [^b70, i1 %216] [^b65, i1 true];
    cbr i1 %210(prob = 0.5), ^b71, ^entry24;
^b69:
    store i32* %3 with i32 0;
    i32 %211 = load i32* %2;
    ubr ^b67;
^entry23:
    i32 %212 = add i32 %201, i32 2;
    i1 %213 = scmp ge i32 4, i32 %179;
    i1 %214 = or i1 %213, i1 false;
    cbr i1 %214(prob = 0.75), ^b70, ^b72;
^b70:
    i32 %215 = phi [^b72, i32 %219] [^entry23, i32 1];
    i1 %216 = scmp neq i32 %215, i32 0;
    ubr ^b68;
^b71:
    i32 %217 = phi [^b73, i32 %220] [^b68, i32 %209];
    i1 %218 = phi [^b73, i1 %224] [^b68, i1 true];
    cbr i1 %218(prob = 0.5), ^b74, ^entry25;
^b72:
    store i32* %4 with i32 0;
    i32 %219 = load i32* %3;
    ubr ^b70;
^entry24:
    i32 %220 = add i32 %209, i32 2;
    i1 %221 = scmp ge i32 5, i32 %179;
    i1 %222 = or i1 %221, i1 false;
    cbr i1 %222(prob = 0.75), ^b73, ^b75;
^b73:
    i32 %223 = phi [^b75, i32 %227] [^entry24, i32 1];
    i1 %224 = scmp neq i32 %223, i32 0;
    ubr ^b71;
^b74:
    i32 %225 = phi [^b76, i32 %228] [^b71, i32 %217];
    i1 %226 = phi [^b76, i1 %232] [^b71, i1 true];
    cbr i1 %226(prob = 0.5), ^b77, ^entry26;
^b75:
    store i32* %5 with i32 0;
    i32 %227 = load i32* %4;
    ubr ^b73;
^entry25:
    i32 %228 = add i32 %217, i32 2;
    i1 %229 = scmp ge i32 6, i32 %179;
    i1 %230 = or i1 %229, i1 false;
    cbr i1 %230(prob = 0.75), ^b76, ^b78;
^b76:
    i32 %231 = phi [^b78, i32 %235] [^entry25, i32 1];
    i1 %232 = scmp neq i32 %231, i32 0;
    ubr ^b74;
^b77:
    i32 %233 = phi [^b79, i32 %236] [^b74, i32 %225];
    i1 %234 = phi [^b79, i1 %240] [^b74, i1 true];
    cbr i1 %234(prob = 0.5), ^b80, ^entry27;
^b78:
    store i32* %6 with i32 0;
    i32 %235 = load i32* %5;
    ubr ^b76;
^entry26:
    i32 %236 = add i32 %225, i32 2;
    i1 %237 = scmp ge i32 7, i32 %179;
    i1 %238 = or i1 %237, i1 false;
    cbr i1 %238(prob = 0.75), ^b79, ^b81;
^b79:
    i32 %239 = phi [^b81, i32 %243] [^entry26, i32 1];
    i1 %240 = scmp neq i32 %239, i32 0;
    ubr ^b77;
^b80:
    i32 %241 = phi [^b82, i32 %244] [^b77, i32 %233];
    i1 %242 = phi [^b82, i1 %248] [^b77, i1 true];
    cbr i1 %242(prob = 0.5), ^b83, ^entry28;
^b81:
    store i32* %7 with i32 0;
    i32 %243 = load i32* %6;
    ubr ^b79;
^entry27:
    i32 %244 = add i32 %233, i32 2;
    i1 %245 = scmp ge i32 8, i32 %179;
    i1 %246 = or i1 %245, i1 false;
    cbr i1 %246(prob = 0.75), ^b82, ^b84;
^b82:
    i32 %247 = phi [^b84, i32 %251] [^entry27, i32 1];
    i1 %248 = scmp neq i32 %247, i32 0;
    ubr ^b80;
^b83:
    i32 %249 = phi [^b85, i32 %252] [^b80, i32 %241];
    i1 %250 = phi [^b85, i1 %256] [^b80, i1 true];
    cbr i1 %250(prob = 0.5), ^b86, ^entry29;
^b84:
    store i32* %8 with i32 0;
    i32 %251 = load i32* %7;
    ubr ^b82;
^entry28:
    i32 %252 = add i32 %241, i32 2;
    i1 %253 = scmp ge i32 9, i32 %179;
    i1 %254 = or i1 %253, i1 false;
    cbr i1 %254(prob = 0.75), ^b85, ^b87;
^b85:
    i32 %255 = phi [^b87, i32 %259] [^entry28, i32 1];
    i1 %256 = scmp neq i32 %255, i32 0;
    ubr ^b83;
^b86:
    i32 %257 = phi [^b88, i32 %260] [^b83, i32 %249];
    i1 %258 = phi [^b88, i1 %264] [^b83, i1 true];
    cbr i1 %258(prob = 0.5), ^b89, ^entry30;
^b87:
    store i32* %9 with i32 0;
    i32 %259 = load i32* %8;
    ubr ^b85;
^entry29:
    i32 %260 = add i32 %249, i32 2;
    i1 %261 = scmp ge i32 10, i32 %179;
    i1 %262 = or i1 %261, i1 false;
    cbr i1 %262(prob = 0.75), ^b88, ^b90;
^b88:
    i32 %263 = phi [^b90, i32 %267] [^entry29, i32 1];
    i1 %264 = scmp neq i32 %263, i32 0;
    ubr ^b86;
^b89:
    i32 %265 = phi [^b91, i32 %268] [^b86, i32 %257];
    i1 %266 = phi [^b91, i1 %272] [^b86, i1 true];
    cbr i1 %266(prob = 0.5), ^b92, ^entry31;
^b90:
    store i32* %10 with i32 0;
    i32 %267 = load i32* %9;
    ubr ^b88;
^entry30:
    i32 %268 = add i32 %257, i32 2;
    i1 %269 = scmp ge i32 11, i32 %179;
    i1 %270 = or i1 %269, i1 false;
    cbr i1 %270(prob = 0.75), ^b91, ^b93;
^b91:
    i32 %271 = phi [^b93, i32 %275] [^entry30, i32 1];
    i1 %272 = scmp neq i32 %271, i32 0;
    ubr ^b89;
^b92:
    i32 %273 = phi [^b94, i32 %276] [^b89, i32 %265];
    i1 %274 = phi [^b94, i1 %280] [^b89, i1 true];
    cbr i1 %274(prob = 0.5), ^b95, ^entry32;
^b93:
    store i32* %11 with i32 0;
    i32 %275 = load i32* %10;
    ubr ^b91;
^entry31:
    i32 %276 = add i32 %265, i32 2;
    i1 %277 = scmp ge i32 12, i32 %179;
    i1 %278 = or i1 %277, i1 false;
    cbr i1 %278(prob = 0.75), ^b94, ^b96;
^b94:
    i32 %279 = phi [^b96, i32 %283] [^entry31, i32 1];
    i1 %280 = scmp neq i32 %279, i32 0;
    ubr ^b92;
^b95:
    i32 %281 = phi [^b97, i32 %284] [^b92, i32 %273];
    i1 %282 = phi [^b97, i1 %288] [^b92, i1 true];
    cbr i1 %282(prob = 0.5), ^b98, ^entry33;
^b96:
    store i32* %12 with i32 0;
    i32 %283 = load i32* %11;
    ubr ^b94;
^entry32:
    i32 %284 = add i32 %273, i32 2;
    i1 %285 = scmp ge i32 13, i32 %179;
    i1 %286 = or i1 %285, i1 false;
    cbr i1 %286(prob = 0.75), ^b97, ^b99;
^b97:
    i32 %287 = phi [^b99, i32 %291] [^entry32, i32 1];
    i1 %288 = scmp neq i32 %287, i32 0;
    ubr ^b95;
^b98:
    i32 %289 = phi [^b100, i32 %292] [^b95, i32 %281];
    i1 %290 = phi [^b100, i1 %296] [^b95, i1 true];
    cbr i1 %290(prob = 0.5), ^b101, ^entry34;
^b99:
    store i32* %13 with i32 0;
    i32 %291 = load i32* %12;
    ubr ^b97;
^entry33:
    i32 %292 = add i32 %281, i32 2;
    i1 %293 = scmp ge i32 14, i32 %179;
    i1 %294 = or i1 %293, i1 false;
    cbr i1 %294(prob = 0.75), ^b100, ^b102;
^b100:
    i32 %295 = phi [^b102, i32 %299] [^entry33, i32 1];
    i1 %296 = scmp neq i32 %295, i32 0;
    ubr ^b98;
^b101:
    i32 %297 = phi [^b103, i32 %300] [^b98, i32 %289];
    i1 %298 = phi [^b103, i1 %304] [^b98, i1 true];
    cbr i1 %298(prob = 0.5), ^b104, ^entry35;
^b102:
    store i32* %14 with i32 0;
    i32 %299 = load i32* %13;
    ubr ^b100;
^entry34:
    i32 %300 = add i32 %289, i32 2;
    i1 %301 = scmp ge i32 15, i32 %179;
    i1 %302 = or i1 %301, i1 false;
    cbr i1 %302(prob = 0.75), ^b103, ^b105;
^b103:
    i32 %303 = phi [^b105, i32 %307] [^entry34, i32 1];
    i1 %304 = scmp neq i32 %303, i32 0;
    ubr ^b101;
^b104:
    i32 %305 = phi [^b106, i32 %308] [^b101, i32 %297];
    i1 %306 = phi [^b106, i1 %312] [^b101, i1 true];
    cbr i1 %306(prob = 0.5), ^b107, ^entry36;
^b105:
    store i32* %15 with i32 0;
    i32 %307 = load i32* %14;
    ubr ^b103;
^entry35:
    i32 %308 = add i32 %297, i32 2;
    i1 %309 = scmp ge i32 16, i32 %179;
    i1 %310 = or i1 %309, i1 false;
    cbr i1 %310(prob = 0.75), ^b106, ^b108;
^b106:
    i32 %311 = phi [^b108, i32 %315] [^entry35, i32 1];
    i1 %312 = scmp neq i32 %311, i32 0;
    ubr ^b104;
^b107:
    i32 %313 = phi [^b109, i32 %316] [^b104, i32 %305];
    i1 %314 = phi [^b109, i1 %320] [^b104, i1 true];
    cbr i1 %314(prob = 0.5), ^b110, ^entry37;
^b108:
    store i32* %16 with i32 0;
    i32 %315 = load i32* %15;
    ubr ^b106;
^entry36:
    i32 %316 = add i32 %305, i32 2;
    i1 %317 = scmp ge i32 17, i32 %179;
    i1 %318 = or i1 %317, i1 false;
    cbr i1 %318(prob = 0.75), ^b109, ^b111;
^b109:
    i32 %319 = phi [^b111, i32 %323] [^entry36, i32 1];
    i1 %320 = scmp neq i32 %319, i32 0;
    ubr ^b107;
^b110:
    i32 %321 = phi [^b112, i32 %324] [^b107, i32 %313];
    i1 %322 = phi [^b112, i1 %328] [^b107, i1 true];
    cbr i1 %322(prob = 0.5), ^b113, ^entry38;
^b111:
    store i32* %17 with i32 0;
    i32 %323 = load i32* %16;
    ubr ^b109;
^entry37:
    i32 %324 = add i32 %313, i32 2;
    i1 %325 = scmp ge i32 18, i32 %179;
    i1 %326 = or i1 %325, i1 false;
    cbr i1 %326(prob = 0.75), ^b112, ^b114;
^b112:
    i32 %327 = phi [^b114, i32 %332] [^entry37, i32 1];
    i1 %328 = scmp neq i32 %327, i32 0;
    ubr ^b110;
^b113:
    i32 %329 = phi [^b115, i32 %333] [^entry38, i32 %333] [^b110, i32 %321];
    i32 %330 = add i32 %179, i32 1;
    i1 %331 = scmp lt i32 %330, i32 20;
    cbr i1 %331(prob = 0.95), ^while.body1, ^entry39;
^b114:
    store i32* %18 with i32 0;
    i32 %332 = load i32* %17;
    ubr ^b112;
^entry38:
    i32 %333 = add i32 %321, i32 2;
    i1 %334 = scmp ge i32 19, i32 %179;
    i1 %335 = or i1 %334, i1 false;
    cbr i1 %335(prob = 0.75), ^b113, ^b115;
^b115:
    store i32* %19 with i32 0;
    ubr ^b113;
^entry39:
    i32 %336 = add i32 %329, i32 1;
    store i32* %0 with i32 1;
    i32 %337 = load i32* %0;
    i1 %338 = scmp neq i32 %337, i32 0;
    cbr i1 %338(prob = 0.97), ^while.body2, ^entry40;
^while.body2:
    i32 %339 = phi [^b116, i32 %351] [^entry39, i32 %336];
    i32 %340 = phi [^entry39, i32 1] [^b116, i32 %341];
    i32 %341 = add i32 %340, i32 1;
    i1 %342 = scmp lt i32 %341, i32 20;
    cbr i1 %342(prob = 0.5), ^entry41, ^b116;
^entry40:
    i32 %343 = phi [^b116, i32 %351] [^entry39, i32 %336];
    i32 %344 = add i32 %343, i32 3;
    i32 %345 = load i32* %0;
    i1 %346 = scmp neq i32 %345, i32 0;
    cbr i1 %346(prob = 0.5), ^entry42, ^entry43;
^entry41:
    i32 %347 = add i32 %339, i32 1;
    i1 %348 = scmp ge i32 %340, i32 %341;
    i1 %349 = scmp gt i32 %340, i32 19;
    i1 %350 = or i1 %348, i1 %349;
    cbr i1 %350(prob = 0.75), ^b117, ^b118;
^b116:
    i32 %351 = phi [^b117, i32 %347] [^while.body2, i32 %339];
    i1 %352 = phi [^b117, i1 %361] [^while.body2, i1 false];
    cbr i1 %352(prob = 0.97), ^while.body2, ^entry40;
^entry42:
    i32 %353 = add i32 %343, i32 6;
    i32 %354 = load i32* %1;
    i1 %355 = scmp neq i32 %354, i32 0;
    cbr i1 %355(prob = 0.5), ^entry45, ^entry43;
^entry43:
    i32 %356 = phi [^entry42, i32 %353] [^entry40, i32 %344];
    i32 %357 = add i32 %356, i32 3;
    i32 %358 = load i32* %2;
    i1 %359 = scmp eq i32 %358, i32 0;
    cbr i1 %359(prob = 0.5), ^entry45, ^entry44;
^b117:
    i32 %360 = phi [^if.then, i32 %369] [^if.else, i32 %372] [^entry41, i32 0];
    i1 %361 = scmp neq i32 %360, i32 0;
    ubr ^b116;
^b118:
    i32* %362 = getelementptr &([20 * i32]* %array)[i64 0][i32 %340];
    store i32* %362 with i32 1;
    i1 %363 = scmp eq i32 %340, i32 0;
    cbr i1 %363(prob = 0.5), ^if.then, ^if.else;
^entry44:
    i32 %364 = add i32 %356, i32 6;
    ubr ^entry45;
^entry45:
    i32 %365 = phi [^entry43, i32 %357] [^entry42, i32 %353] [^entry44, i32 %364];
    i32 %366 = add i32 %365, i32 3;
    i32 %367 = load i32* %4;
    i1 %368 = scmp eq i32 %367, i32 0;
    cbr i1 %368(prob = 0.5), ^entry46, ^entry47;
^if.then:
    i32 %369 = load i32* %0;
    ubr ^b117;
^if.else:
    i32 %370 = add i32 %340, i32 -1;
    i32* %371 = getelementptr &([20 * i32]* %array)[i64 0][i32 %370];
    i32 %372 = load i32* %371;
    ubr ^b117;
^entry46:
    i32 %373 = phi [^entry53, i32 %396] [^entry49, i32 %384] [^entry45, i32 %366];
    i32 %374 = add i32 %373, i32 3;
    i32 %375 = load i32* %9;
    i1 %376 = scmp neq i32 %375, i32 0;
    cbr i1 %376(prob = 0.5), ^entry48, ^entry51;
^entry47:
    i32 %377 = add i32 %365, i32 6;
    i32 %378 = load i32* %5;
    i1 %379 = scmp neq i32 %378, i32 0;
    cbr i1 %379(prob = 0.5), ^entry50, ^entry49;
^entry48:
    i32 %380 = add i32 %373, i32 6;
    i32 %381 = load i32* %10;
    i1 %382 = scmp eq i32 %381, i32 0;
    cbr i1 %382(prob = 0.5), ^entry52, ^entry51;
^entry49:
    i32 %383 = phi [^entry53, i32 %396] [^entry50, i32 %385] [^entry47, i32 %377];
    i32 %384 = add i32 %383, i32 3;
    ubr ^entry46;
^entry50:
    i32 %385 = add i32 %365, i32 9;
    i32 %386 = load i32* %6;
    i1 %387 = scmp eq i32 %386, i32 0;
    cbr i1 %387(prob = 0.5), ^entry53, ^entry49;
^entry51:
    i32 %388 = phi [^entry48, i32 %380] [^entry46, i32 %374];
    i32 %389 = add i32 %388, i32 3;
    i32 %390 = load i32* %11;
    i1 %391 = scmp eq i32 %390, i32 0;
    cbr i1 %391(prob = 0.5), ^entry52, ^entry54;
^entry52:
    i32 %392 = phi [^entry63, i32 %430] [^entry60, i32 %418] [^entry57, i32 %409] [^entry54, i32 %399] [^entry51, i32 %389] [^entry48, i32 %380];
    i32 %393 = add i32 %392, i32 3;
    i32 %394 = load i32* %0;
    i1 %395 = scmp neq i32 %394, i32 0;
    cbr i1 %395(prob = 0.5), ^entry55, ^entry56;
^entry53:
    i32 %396 = add i32 %365, i32 12;
    i32 %397 = load i32* %7;
    i1 %398 = scmp neq i32 %397, i32 0;
    cbr i1 %398(prob = 0.5), ^entry46, ^entry49;
^entry54:
    i32 %399 = add i32 %388, i32 6;
    i32 %400 = load i32* %12;
    i1 %401 = scmp eq i32 %400, i32 0;
    cbr i1 %401(prob = 0.5), ^entry52, ^entry57;
^entry55:
    i32 %402 = add i32 %392, i32 6;
    i32 %403 = load i32* %2;
    i1 %404 = scmp neq i32 %403, i32 0;
    cbr i1 %404(prob = 0.5), ^entry58, ^entry56;
^entry56:
    i32 %405 = phi [^entry61, i32 %424] [^entry58, i32 %412] [^entry55, i32 %402] [^entry52, i32 %393];
    i32 %406 = add i32 %405, i32 3;
    i32 %407 = load i32* %5;
    i1 %408 = scmp neq i32 %407, i32 0;
    cbr i1 %408(prob = 0.5), ^b119, ^entry59;
^entry57:
    i32 %409 = add i32 %388, i32 9;
    i32 %410 = load i32* %13;
    i1 %411 = scmp eq i32 %410, i32 0;
    cbr i1 %411(prob = 0.5), ^entry52, ^entry60;
^entry58:
    i32 %412 = add i32 %392, i32 9;
    i32 %413 = load i32* %3;
    i1 %414 = scmp eq i32 %413, i32 0;
    cbr i1 %414(prob = 0.5), ^entry61, ^entry56;
^entry59:
    i32 %415 = add i32 %405, i32 6;
    i32 %416 = load i32* %6;
    i1 %417 = scmp neq i32 %416, i32 0;
    cbr i1 %417(prob = 0.5), ^entry62, ^entry64;
^entry60:
    i32 %418 = add i32 %388, i32 12;
    i32 %419 = load i32* %14;
    i1 %420 = scmp neq i32 %419, i32 0;
    cbr i1 %420(prob = 0.5), ^entry63, ^entry52;
^b119:
    i32 %421 = phi [^indirect, i32 %432] [^entry64, i32 %432] [^entry62, i32 %427] [^entry61, i32 %424] [^entry56, i32 %406];
    i32 %422 = phi [^entry61, i32 1] [^entry56, i32 1] [^indirect, i32 0] [^entry64, i32 1] [^entry62, i32 1];
    i32 %423 = add i32 %422, i32 %421;
    call (i32) -> void @putint(i32 %423);
    ret i32 0;
^entry61:
    i32 %424 = add i32 %392, i32 12;
    i32 %425 = load i32* %4;
    i1 %426 = scmp eq i32 %425, i32 0;
    cbr i1 %426(prob = 0.5), ^b119, ^entry56;
^entry62:
    i32 %427 = add i32 %405, i32 9;
    i32 %428 = load i32* %7;
    i1 %429 = scmp eq i32 %428, i32 0;
    cbr i1 %429(prob = 0.5), ^b119, ^entry64;
^entry63:
    i32 %430 = add i32 %388, i32 15;
    ubr ^entry52;
^entry64:
    i32 %431 = phi [^entry62, i32 %427] [^entry59, i32 %415];
    i32 %432 = add i32 %431, i32 3;
    i32 %433 = load i32* %8;
    i1 %434 = scmp neq i32 %433, i32 0;
    cbr i1 %434(prob = 0.5), ^b119, ^indirect;
^indirect:
    ubr ^b119;
}
