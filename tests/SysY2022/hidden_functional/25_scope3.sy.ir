internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %main = alloc i32;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %a1 = alloc i32;
    i32* %main1 = alloc i32;
    i32* %b1 = alloc i32;
    i32* %putch = alloc i32;
    i32* %a2 = alloc i32;
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 10);
    store i32* %a2 with i32 1;
    store i32* %putch with i32 0;
    i32 %0 = load i32* %a2;
    i32 %1 = add i32 %0, i32 2;
    store i32* %a2 with i32 %1;
    i32 %2 = load i32* %a2;
    i32 %3 = add i32 %2, i32 3;
    store i32* %b1 with i32 %3;
    i32 %4 = load i32* %b1;
    i32 %5 = add i32 %4, i32 4;
    store i32* %b1 with i32 %5;
    i32 %6 = load i32* %putch;
    i32 %7 = load i32* %a2;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = load i32* %b1;
    i32 %10 = add i32 %8, i32 %9;
    store i32* %putch with i32 %10;
    i32 %11 = load i32* %b1;
    i32 %12 = add i32 %11, i32 5;
    store i32* %b1 with i32 %12;
    i32 %13 = load i32* %b1;
    i32 %14 = add i32 %13, i32 6;
    store i32* %main1 with i32 %14;
    i32 %15 = load i32* %a2;
    i32 %16 = load i32* %main1;
    i32 %17 = add i32 %15, i32 %16;
    store i32* %a2 with i32 %17;
    i32 %18 = load i32* %putch;
    i32 %19 = load i32* %a2;
    i32 %20 = add i32 %18, i32 %19;
    i32 %21 = load i32* %b1;
    i32 %22 = add i32 %20, i32 %21;
    i32 %23 = load i32* %main1;
    i32 %24 = add i32 %22, i32 %23;
    store i32* %putch with i32 %24;
    i32 %25 = load i32* %b1;
    i32 %26 = load i32* %a2;
    i32 %27 = add i32 %25, i32 %26;
    store i32* %b1 with i32 %27;
    i32 %28 = load i32* %main1;
    i32 %29 = add i32 %28, i32 7;
    store i32* %a1 with i32 %29;
    i32 %30 = load i32* %a1;
    i32 %31 = add i32 %30, i32 8;
    store i32* %a1 with i32 %31;
    i32 %32 = load i32* %putch;
    i32 %33 = load i32* %a1;
    i32 %34 = add i32 %32, i32 %33;
    i32 %35 = load i32* %b1;
    i32 %36 = add i32 %34, i32 %35;
    i32 %37 = load i32* %main1;
    i32 %38 = add i32 %36, i32 %37;
    store i32* %putch with i32 %38;
    i32 %39 = load i32* %b1;
    i32 %40 = load i32* %a1;
    i32 %41 = add i32 %39, i32 %40;
    store i32* %b1 with i32 %41;
    i32 %42 = load i32* %main1;
    i32 %43 = add i32 %42, i32 9;
    store i32* %b with i32 %43;
    i32 %44 = load i32* %a1;
    i32 %45 = add i32 %44, i32 10;
    store i32* %a1 with i32 %45;
    store i32* %a with i32 11;
    i32 %46 = load i32* %b;
    i32 %47 = add i32 %46, i32 12;
    store i32* %b with i32 %47;
    i32 %48 = load i32* %putch;
    i32 %49 = add i32 %48, i32 11;
    i32 %50 = load i32* %b;
    i32 %51 = add i32 %49, i32 %50;
    i32 %52 = load i32* %main1;
    i32 %53 = add i32 %51, i32 %52;
    store i32* %putch with i32 %53;
    i32 %54 = load i32* %main1;
    i32 %55 = load i32* %b;
    i32 %56 = add i32 %54, i32 %55;
    store i32* %main1 with i32 %56;
    i32 %57 = load i32* %b;
    i32 %58 = add i32 %57, i32 13;
    store i32* %main with i32 %58;
    i32 %59 = load i32* %main;
    i32 %60 = add i32 %59, i32 11;
    store i32* %main with i32 %60;
    i32 %61 = load i32* %putch;
    i32 %62 = add i32 %61, i32 11;
    i32 %63 = load i32* %b;
    i32 %64 = add i32 %62, i32 %63;
    i32 %65 = load i32* %main;
    i32 %66 = add i32 %64, i32 %65;
    store i32* %putch with i32 %66;
    i32 %67 = load i32* %putch;
    i32 %68 = load i32* %main1;
    i32 %69 = sub i32 %67, i32 %68;
    store i32* %putch with i32 %69;
    i32 %70 = load i32* %putch;
    i32 %71 = load i32* %b1;
    i32 %72 = sub i32 %70, i32 %71;
    store i32* %putch with i32 %72;
    i32 %73 = load i32* %putch;
    i32 %74 = load i32* %a2;
    i32 %75 = sub i32 %73, i32 %74;
    store i32* %putch with i32 %75;
    i32 %76 = load i32* %putch;
    i32 %77 = srem i32 %76, i32 77;
    ret i32 %77;
}
