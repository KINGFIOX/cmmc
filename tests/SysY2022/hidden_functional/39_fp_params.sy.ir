internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @params_f40(f32 %x0, f32 %x1, f32 %x2, f32 %x3, f32 %x4, f32 %x5, f32 %x6, f32 %x7, f32 %x8, f32 %x9, f32 %x10, f32 %x11, f32 %x12, f32 %x13, f32 %x14, f32 %x15, f32 %x16, f32 %x17, f32 %x18, f32 %x19, f32 %x20, f32 %x21, f32 %x22, f32 %x23, f32 %x24, f32 %x25, f32 %x26, f32 %x27, f32 %x28, f32 %x29, f32 %x30, f32 %x31, f32 %x32, f32 %x33, f32 %x34, f32 %x35, f32 %x36, f32 %x37, f32 %x38, f32 %x39, i32* %0) -> f32 { NoMemoryWrite } {
^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    i1 %1 = fcmp neq f32 %x39, f32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32 %2 = fadd f32 %x0, f32 %x1;
    f32 %3 = fadd f32 %x4, f32 %x5;
    f32 %4 = fadd f32 %x8, f32 %x9;
    f32 %5 = fadd f32 %x12, f32 %x13;
    f32 %6 = fadd f32 %x16, f32 %x17;
    f32 %7 = fadd f32 %x20, f32 %x21;
    f32 %8 = fadd f32 %x24, f32 %x25;
    f32 %9 = fadd f32 %x28, f32 %x29;
    f32 %10 = fadd f32 %x32, f32 %x33;
    f32 %11 = fadd f32 %x36, f32 %x37;
    f32 %12 = fadd f32 %2, f32 %x2;
    f32 %13 = fadd f32 %3, f32 %x6;
    f32 %14 = fadd f32 %4, f32 %x10;
    f32 %15 = fadd f32 %5, f32 %x14;
    f32 %16 = fadd f32 %6, f32 %x18;
    f32 %17 = fadd f32 %7, f32 %x22;
    f32 %18 = fadd f32 %8, f32 %x26;
    f32 %19 = fadd f32 %9, f32 %x30;
    f32 %20 = fadd f32 %10, f32 %x34;
    f32 %21 = fadd f32 %11, f32 %x38;
    f32 %22 = fadd f32 %12, f32 %x3;
    f32 %23 = fadd f32 %13, f32 %x7;
    f32 %24 = fadd f32 %14, f32 %x11;
    f32 %25 = fadd f32 %15, f32 %x15;
    f32 %26 = fadd f32 %16, f32 %x19;
    f32 %27 = fadd f32 %17, f32 %x23;
    f32 %28 = fadd f32 %18, f32 %x27;
    f32 %29 = fadd f32 %19, f32 %x31;
    f32 %30 = fadd f32 %20, f32 %x35;
    f32 %31 = fadd f32 %21, f32 %x39;
    f32* %32 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %32 with f32 %22;
    f32* %33 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %33 with f32 %23;
    f32* %34 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %34 with f32 %24;
    f32* %35 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %35 with f32 %25;
    f32* %36 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %36 with f32 %26;
    f32* %37 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %37 with f32 %27;
    f32* %38 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %38 with f32 %28;
    f32* %39 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %39 with f32 %29;
    f32* %40 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %40 with f32 %30;
    f32* %41 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %41 with f32 %31;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %32);
    i32 %42 = load i32* %0;
    f32* %43 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %42];
    f32 %44 = load f32* %43;
    ubr ^b;
^if.else:
    f32 %45 = fadd f32 %x0, f32 %x1;
    f32 %46 = fadd f32 %45, f32 %x2;
    f32 %47 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %x1, f32 %x2, f32 %x3, f32 %x4, f32 %x5, f32 %x6, f32 %x7, f32 %x8, f32 %x9, f32 %x10, f32 %x11, f32 %x12, f32 %x13, f32 %x14, f32 %x15, f32 %x16, f32 %x17, f32 %x18, f32 %x19, f32 %x20, f32 %x21, f32 %x22, f32 %x23, f32 %x24, f32 %x25, f32 %x26, f32 %x27, f32 %x28, f32 %x29, f32 %x30, f32 %x31, f32 %x32, f32 %x33, f32 %x34, f32 %x35, f32 %x36, f32 %x37, f32 %x38, f32 %x39, f32 %46, i32* %0);
    ubr ^b;
^b:
    f32 %48 = phi [^if.then, f32 %44] [^if.else, f32 %47];
    ret f32 %48;
}
internal func @params_f40_i24(i32 %i23, i32 %i2, i32 %i6, f32 %x4, i32 %i1, i32 %i4, i32 %i5, f32 %x8, f32 %x15, f32 %x7, i32 %i22, f32 %x3, f32 %x28, i32 %i0, f32 %x37, i32 %i19, f32 %x30, f32 %x12, f32 %x1, f32 %x11, f32 %x38, f32 %x6, i32 %i7, f32 %x32, i32 %i10, i32 %i13, f32 %x20, f32 %x33, f32 %x23, f32 %x9, f32 %x25, i32 %i8, f32 %x39, i32 %i17, f32 %x21, f32 %x16, f32 %x5, f32 %x34, i32 %i18, i32 %i9, f32 %x14, f32 %x10, f32 %x0, i32 %i12, f32 %x31, i32 %i11, i32 %i16, f32 %x27, f32 %x24, f32 %x13, f32 %x29, i32 %i3, i32 %i21, i32 %i20, f32 %x18, f32 %x19, f32 %x22, f32 %x26, f32 %x36, f32 %x17, i32 %i15, f32 %x2, i32 %i14, f32 %x35, i32* %0) -> f32 { NoMemoryWrite } {
^entry:
    [8 * i32]* %arr2 = alloc [8 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    i1 %1 = scmp neq i32 %i23, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %2 = add i32 %i23, i32 %i22;
    i32 %3 = add i32 %i2, i32 %i1;
    i32 %4 = add i32 %i6, i32 %i7;
    i32 %5 = add i32 %i4, i32 %i5;
    i32 %6 = add i32 %i19, i32 %i18;
    i32 %7 = add i32 %i10, i32 %i9;
    i32 %8 = add i32 %i13, i32 %i12;
    i32 %9 = add i32 %i17, i32 %i16;
    i32 %10 = add i32 %2, i32 %i21;
    i32 %11 = add i32 %3, i32 %i0;
    i32 %12 = add i32 %4, i32 %i8;
    i32 %13 = add i32 %5, i32 %i3;
    i32 %14 = add i32 %6, i32 %i20;
    i32 %15 = add i32 %7, i32 %i11;
    i32 %16 = add i32 %8, i32 %i14;
    i32 %17 = add i32 %9, i32 %i15;
    f32 %18 = fadd f32 %x4, f32 %x5;
    f32 %19 = fadd f32 %x8, f32 %x9;
    f32 %20 = fadd f32 %x28, f32 %x29;
    f32 %21 = fadd f32 %x12, f32 %x13;
    f32 %22 = fadd f32 %x32, f32 %x33;
    f32 %23 = fadd f32 %x20, f32 %x21;
    f32 %24 = fadd f32 %x16, f32 %x17;
    f32 %25 = fadd f32 %x0, f32 %x1;
    f32 %26 = fadd f32 %x24, f32 %x25;
    f32 %27 = fadd f32 %x36, f32 %x37;
    f32 %28 = fadd f32 %18, f32 %x6;
    f32 %29 = fadd f32 %19, f32 %x10;
    f32 %30 = fadd f32 %20, f32 %x30;
    f32 %31 = fadd f32 %21, f32 %x14;
    f32 %32 = fadd f32 %22, f32 %x34;
    f32 %33 = fadd f32 %23, f32 %x22;
    f32 %34 = fadd f32 %24, f32 %x18;
    f32 %35 = fadd f32 %25, f32 %x2;
    f32 %36 = fadd f32 %26, f32 %x26;
    f32 %37 = fadd f32 %27, f32 %x38;
    f32 %38 = fadd f32 %28, f32 %x7;
    f32 %39 = fadd f32 %29, f32 %x11;
    f32 %40 = fadd f32 %30, f32 %x31;
    f32 %41 = fadd f32 %31, f32 %x15;
    f32 %42 = fadd f32 %32, f32 %x35;
    f32 %43 = fadd f32 %33, f32 %x23;
    f32 %44 = fadd f32 %34, f32 %x19;
    f32 %45 = fadd f32 %35, f32 %x3;
    f32 %46 = fadd f32 %36, f32 %x27;
    f32 %47 = fadd f32 %37, f32 %x39;
    f32 %48 = s2f i32 %10 to f32;
    f32 %49 = fsub f32 %48, f32 %40;
    i32 %50 = f2s f32 %49 to i32;
    f32 %51 = s2f i32 %11 to f32;
    f32 %52 = fsub f32 %51, f32 %45;
    i32 %53 = f2s f32 %52 to i32;
    f32 %54 = s2f i32 %12 to f32;
    f32 %55 = fsub f32 %54, f32 %39;
    i32 %56 = f2s f32 %55 to i32;
    f32 %57 = s2f i32 %13 to f32;
    f32 %58 = fsub f32 %57, f32 %38;
    i32 %59 = f2s f32 %58 to i32;
    f32 %60 = s2f i32 %14 to f32;
    f32 %61 = fsub f32 %60, f32 %46;
    i32 %62 = f2s f32 %61 to i32;
    f32 %63 = s2f i32 %15 to f32;
    f32 %64 = fsub f32 %63, f32 %41;
    i32 %65 = f2s f32 %64 to i32;
    f32 %66 = s2f i32 %16 to f32;
    f32 %67 = fsub f32 %66, f32 %44;
    i32 %68 = f2s f32 %67 to i32;
    f32 %69 = s2f i32 %17 to f32;
    f32 %70 = fsub f32 %69, f32 %43;
    i32 %71 = f2s f32 %70 to i32;
    i32* %72 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 0];
    f32* %73 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %73 with f32 %45;
    i32* %74 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 1];
    f32* %75 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %75 with f32 %38;
    i32* %76 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 2];
    f32* %77 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %77 with f32 %39;
    i32* %78 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 3];
    f32* %79 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %79 with f32 %41;
    i32* %80 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 4];
    f32* %81 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %81 with f32 %44;
    i32* %82 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 5];
    f32* %83 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %83 with f32 %43;
    i32* %84 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 6];
    f32* %85 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %85 with f32 %46;
    i32* %86 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 7];
    f32* %87 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %87 with f32 %40;
    f32* %88 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %88 with f32 %42;
    f32* %89 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %89 with f32 %47;
    store i32* %72 with i32 %11;
    store i32* %74 with i32 %13;
    store i32* %76 with i32 %12;
    store i32* %78 with i32 %15;
    store i32* %80 with i32 %16;
    store i32* %82 with i32 %17;
    store i32* %84 with i32 %14;
    store i32* %86 with i32 %10;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %73);
    call (i32, i32*) -> void @putarray(i32 8, i32* %72);
    store i32* %72 with i32 %53;
    store i32* %74 with i32 %59;
    store i32* %76 with i32 %56;
    store i32* %78 with i32 %65;
    store i32* %80 with i32 %68;
    store i32* %82 with i32 %71;
    store i32* %84 with i32 %62;
    store i32* %86 with i32 %50;
    i32 %90 = load i32* %0;
    i32* %91 = getelementptr &([8 * i32]* %arr2)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    f32 %93 = s2f i32 %92 to f32;
    ubr ^b;
^if.else:
    f32 %94 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %i1, i32 %i2, i32 %i6, f32 %x4, i32 %i1, i32 %i4, i32 %i5, f32 %x8, f32 %x15, f32 %x7, i32 %i22, f32 %x3, f32 %x28, i32 %i0, f32 %x37, i32 %i19, f32 %x30, f32 %x12, f32 %x1, f32 %x11, f32 %x38, f32 %x6, i32 %i7, f32 %x32, i32 %i10, i32 %i13, f32 %x20, f32 %x33, f32 %x23, f32 %x9, f32 %x25, i32 %i8, f32 %x39, i32 %i17, f32 %x21, f32 %x16, f32 %x5, f32 %x34, i32 %i18, i32 %i9, f32 %x14, f32 %x10, f32 %x0, i32 %i12, f32 %x31, i32 %i11, i32 %i16, f32 %x27, f32 %x24, f32 %x13, f32 %x29, i32 %i3, i32 %i21, i32 %i20, f32 %x18, f32 %x19, f32 %x22, f32 %x26, f32 %x36, f32 %x17, i32 %i15, f32 %x2, i32 %i14, f32 %x35, i32* %0);
    ubr ^b;
^b:
    f32 %95 = phi [^if.then, f32 %93] [^if.else, f32 %94];
    ret f32 %95;
}
internal func @params_fa40(f32* %x0, f32* %x1, f32* %x2, f32* %x3, f32* %x4, f32* %x5, f32* %x6, f32* %x7, f32* %x8, f32* %x9, f32* %x10, f32* %x11, f32* %x12, f32* %x13, f32* %x14, f32* %x15, f32* %x16, f32* %x17, f32* %x18, f32* %x19, f32* %x20, f32* %x21, f32* %x22, f32* %x23, f32* %x24, f32* %x25, f32* %x26, f32* %x27, f32* %x28, f32* %x29, f32* %x30, f32* %x31, f32* %x32, f32* %x33, f32* %x34, f32* %x35, f32* %x36, f32* %x37, f32* %x38, f32* %x39, i32* %0) -> f32 { NoMemoryWrite } {
^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %1 = load i32* %0;
    f32* %2 = getelementptr &(f32* %x0)[i32 %1];
    f32 %3 = load f32* %2;
    f32* %4 = getelementptr &(f32* %x1)[i32 %1];
    f32 %5 = load f32* %4;
    f32 %6 = fadd f32 %3, f32 %5;
    f32* %7 = getelementptr &(f32* %x2)[i32 %1];
    f32 %8 = load f32* %7;
    f32 %9 = fadd f32 %6, f32 %8;
    f32* %10 = getelementptr &(f32* %x3)[i32 %1];
    f32 %11 = load f32* %10;
    f32 %12 = fadd f32 %9, f32 %11;
    f32* %13 = getelementptr &(f32* %x4)[i32 %1];
    f32* %14 = getelementptr &(f32* %x5)[i32 %1];
    f32* %15 = getelementptr &(f32* %x6)[i32 %1];
    f32* %16 = getelementptr &(f32* %x7)[i32 %1];
    f32* %17 = getelementptr &(f32* %x8)[i32 %1];
    f32* %18 = getelementptr &(f32* %x9)[i32 %1];
    f32* %19 = getelementptr &(f32* %x10)[i32 %1];
    f32* %20 = getelementptr &(f32* %x11)[i32 %1];
    f32* %21 = getelementptr &(f32* %x12)[i32 %1];
    f32* %22 = getelementptr &(f32* %x13)[i32 %1];
    f32* %23 = getelementptr &(f32* %x14)[i32 %1];
    f32* %24 = getelementptr &(f32* %x15)[i32 %1];
    f32* %25 = getelementptr &(f32* %x16)[i32 %1];
    f32* %26 = getelementptr &(f32* %x17)[i32 %1];
    f32* %27 = getelementptr &(f32* %x18)[i32 %1];
    f32* %28 = getelementptr &(f32* %x19)[i32 %1];
    f32* %29 = getelementptr &(f32* %x20)[i32 %1];
    f32* %30 = getelementptr &(f32* %x21)[i32 %1];
    f32* %31 = getelementptr &(f32* %x22)[i32 %1];
    f32* %32 = getelementptr &(f32* %x23)[i32 %1];
    f32* %33 = getelementptr &(f32* %x24)[i32 %1];
    f32* %34 = getelementptr &(f32* %x25)[i32 %1];
    f32* %35 = getelementptr &(f32* %x26)[i32 %1];
    f32* %36 = getelementptr &(f32* %x27)[i32 %1];
    f32* %37 = getelementptr &(f32* %x28)[i32 %1];
    f32* %38 = getelementptr &(f32* %x29)[i32 %1];
    f32* %39 = getelementptr &(f32* %x30)[i32 %1];
    f32* %40 = getelementptr &(f32* %x31)[i32 %1];
    f32* %41 = getelementptr &(f32* %x32)[i32 %1];
    f32* %42 = getelementptr &(f32* %x33)[i32 %1];
    f32* %43 = getelementptr &(f32* %x34)[i32 %1];
    f32* %44 = getelementptr &(f32* %x35)[i32 %1];
    f32* %45 = getelementptr &(f32* %x36)[i32 %1];
    f32* %46 = getelementptr &(f32* %x37)[i32 %1];
    f32* %47 = getelementptr &(f32* %x38)[i32 %1];
    f32* %48 = getelementptr &(f32* %x39)[i32 %1];
    f32* %49 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %49 with f32 %12;
    f32 %50 = load f32* %13;
    f32 %51 = load f32* %14;
    f32 %52 = load f32* %15;
    f32 %53 = load f32* %16;
    f32 %54 = fadd f32 %50, f32 %51;
    f32 %55 = fadd f32 %54, f32 %52;
    f32 %56 = fadd f32 %55, f32 %53;
    f32* %57 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %57 with f32 %56;
    f32 %58 = load f32* %17;
    f32 %59 = load f32* %18;
    f32 %60 = load f32* %19;
    f32 %61 = load f32* %20;
    f32 %62 = fadd f32 %58, f32 %59;
    f32 %63 = fadd f32 %62, f32 %60;
    f32 %64 = fadd f32 %63, f32 %61;
    f32* %65 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %65 with f32 %64;
    f32 %66 = load f32* %21;
    f32 %67 = load f32* %22;
    f32 %68 = load f32* %23;
    f32 %69 = load f32* %24;
    f32 %70 = fadd f32 %66, f32 %67;
    f32 %71 = fadd f32 %70, f32 %68;
    f32 %72 = fadd f32 %71, f32 %69;
    f32* %73 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %73 with f32 %72;
    f32 %74 = load f32* %25;
    f32 %75 = load f32* %26;
    f32 %76 = load f32* %27;
    f32 %77 = load f32* %28;
    f32 %78 = fadd f32 %74, f32 %75;
    f32 %79 = fadd f32 %78, f32 %76;
    f32 %80 = fadd f32 %79, f32 %77;
    f32* %81 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %81 with f32 %80;
    f32 %82 = load f32* %29;
    f32 %83 = load f32* %30;
    f32 %84 = load f32* %31;
    f32 %85 = load f32* %32;
    f32 %86 = fadd f32 %82, f32 %83;
    f32 %87 = fadd f32 %86, f32 %84;
    f32 %88 = fadd f32 %87, f32 %85;
    f32* %89 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %89 with f32 %88;
    f32 %90 = load f32* %33;
    f32 %91 = load f32* %34;
    f32 %92 = load f32* %35;
    f32 %93 = load f32* %36;
    f32 %94 = fadd f32 %90, f32 %91;
    f32 %95 = fadd f32 %94, f32 %92;
    f32 %96 = fadd f32 %95, f32 %93;
    f32* %97 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %97 with f32 %96;
    f32 %98 = load f32* %37;
    f32 %99 = load f32* %38;
    f32 %100 = load f32* %39;
    f32 %101 = load f32* %40;
    f32 %102 = fadd f32 %98, f32 %99;
    f32 %103 = fadd f32 %102, f32 %100;
    f32 %104 = fadd f32 %103, f32 %101;
    f32* %105 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %105 with f32 %104;
    f32 %106 = load f32* %41;
    f32 %107 = load f32* %42;
    f32 %108 = load f32* %43;
    f32 %109 = load f32* %44;
    f32 %110 = fadd f32 %106, f32 %107;
    f32 %111 = fadd f32 %110, f32 %108;
    f32 %112 = fadd f32 %111, f32 %109;
    f32* %113 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %113 with f32 %112;
    f32 %114 = load f32* %45;
    f32 %115 = load f32* %46;
    f32 %116 = load f32* %47;
    f32 %117 = load f32* %48;
    f32 %118 = fadd f32 %114, f32 %115;
    f32 %119 = fadd f32 %118, f32 %116;
    f32 %120 = fadd f32 %119, f32 %117;
    f32* %121 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %121 with f32 %120;
    f32 %122 = load f32* %48;
    i1 %123 = fcmp neq f32 %122, f32 0;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = ucmp neq i32 %124, i32 0;
    i32 %126 = zext i1 %125 to i32;
    f32 %127 = u2f i32 %126 to f32;
    i1 %128 = fcmp neq f32 %127, f32 0;
    i32 %129 = zext i1 %128 to i32;
    f32 %130 = u2f i32 %129 to f32;
    i1 %131 = fcmp neq f32 %130, f32 0;
    cbr i1 %131(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32* %132 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %1];
    call (i32, f32*) -> void @putfarray(i32 10, f32* %49);
    f32 %133 = load f32* %132;
    ubr ^b;
^if.else:
    f32 %134 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %x1, f32* %x2, f32* %x3, f32* %x4, f32* %x5, f32* %x6, f32* %x7, f32* %x8, f32* %x9, f32* %x10, f32* %x11, f32* %x12, f32* %x13, f32* %x14, f32* %x15, f32* %x16, f32* %x17, f32* %x18, f32* %x19, f32* %x20, f32* %x21, f32* %x22, f32* %x23, f32* %x24, f32* %x25, f32* %x26, f32* %x27, f32* %x28, f32* %x29, f32* %x30, f32* %x31, f32* %x32, f32* %x33, f32* %x34, f32* %x35, f32* %x36, f32* %x37, f32* %x38, f32* %x39, f32* %49, i32* %0);
    ubr ^b;
^b:
    f32 %135 = phi [^if.then, f32 %133] [^if.else, f32 %134];
    ret f32 %135;
}
internal func @params_mix(f32 %x0, i32* %i1, i32 %i2, f32* %x3, f32 %x4, i32 %i5, f32 %x6, f32 %x7, f32* %x8, i32* %i9, i32 %i10, i32 %i11, f32* %x12, i32* %i13, i32* %i14, i32 %i15, f32* %x16, f32* %x17, f32 %x18, f32 %x19, f32 %x20, f32* %x21, i32 %i22, f32 %x23, f32 %x24, f32 %x25, i32* %i26, f32* %x27, i32* %i28, i32* %i29, f32* %x30, f32 %x31, f32 %x32, i32* %i33, i32 %i34, f32* %x35, f32* %x36, f32 %x37, f32 %x38, i32* %i39, i32* %i40, i32 %i41, i32 %i42, f32 %x43, f32 %x44, i32* %i45, i32 %i46, f32* %x47, i32 %i48, i32* %i49, i32* %i50, f32 %x51, f32 %x52, f32* %x53, i32 %i54, i32* %i55, f32* %x56, f32 %x57, i32 %i58, f32 %x59, f32* %x60, f32* %x61, f32 %x62, i32 %i63, i32* %0) -> i32 { NoMemoryWrite } {
^entry:
    [10 * i32]* %arr2 = alloc [10 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %1 = load i32* %0;
    f32 %2 = fadd f32 %x43, f32 %x44;
    i1 %3 = scmp neq i32 %i63, i32 0;
    i32* %4 = getelementptr &(i32* %i1)[i32 %1];
    f32* %5 = getelementptr &(f32* %x3)[i32 %1];
    f32 %6 = load f32* %5;
    f32 %7 = fadd f32 %x0, f32 %6;
    f32 %8 = fadd f32 %7, f32 %x4;
    f32 %9 = fadd f32 %8, f32 %x6;
    f32* %10 = getelementptr &(f32* %x8)[i32 %1];
    f32* %11 = getelementptr &(f32* %x12)[i32 %1];
    f32* %12 = getelementptr &(f32* %x16)[i32 %1];
    f32* %13 = getelementptr &(f32* %x17)[i32 %1];
    f32* %14 = getelementptr &(f32* %x21)[i32 %1];
    f32* %15 = getelementptr &(f32* %x27)[i32 %1];
    f32* %16 = getelementptr &(f32* %x30)[i32 %1];
    f32* %17 = getelementptr &(f32* %x35)[i32 %1];
    f32* %18 = getelementptr &(f32* %x36)[i32 %1];
    f32* %19 = getelementptr &(f32* %x47)[i32 %1];
    f32* %20 = getelementptr &(f32* %x53)[i32 %1];
    f32* %21 = getelementptr &(f32* %x56)[i32 %1];
    f32* %22 = getelementptr &(f32* %x60)[i32 %1];
    f32* %23 = getelementptr &(f32* %x61)[i32 %1];
    i32* %24 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 0];
    f32* %25 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %25 with f32 %9;
    f32 %26 = load f32* %10;
    f32 %27 = load f32* %11;
    f32 %28 = load f32* %12;
    f32 %29 = fadd f32 %x7, f32 %26;
    f32 %30 = fadd f32 %29, f32 %27;
    f32 %31 = fadd f32 %30, f32 %28;
    i32* %32 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 1];
    f32* %33 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %33 with f32 %31;
    f32 %34 = load f32* %13;
    f32 %35 = fadd f32 %34, f32 %x18;
    f32 %36 = fadd f32 %35, f32 %x19;
    f32 %37 = fadd f32 %36, f32 %x20;
    i32* %38 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 2];
    f32* %39 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %39 with f32 %37;
    f32 %40 = load f32* %14;
    f32 %41 = fadd f32 %40, f32 %x23;
    f32 %42 = fadd f32 %41, f32 %x24;
    f32 %43 = fadd f32 %42, f32 %x25;
    i32* %44 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 3];
    f32* %45 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %45 with f32 %43;
    f32 %46 = load f32* %15;
    f32 %47 = load f32* %16;
    f32 %48 = fadd f32 %46, f32 %47;
    f32 %49 = fadd f32 %48, f32 %x31;
    f32 %50 = fadd f32 %49, f32 %x32;
    i32* %51 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 4];
    f32* %52 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %52 with f32 %50;
    f32 %53 = load f32* %17;
    f32 %54 = load f32* %18;
    f32 %55 = fadd f32 %53, f32 %54;
    f32 %56 = fadd f32 %55, f32 %x37;
    f32 %57 = fadd f32 %56, f32 %x38;
    i32* %58 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 5];
    f32* %59 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %59 with f32 %57;
    f32 %60 = load f32* %19;
    f32 %61 = fadd f32 %2, f32 %60;
    f32 %62 = fadd f32 %61, f32 %x51;
    i32* %63 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 6];
    f32* %64 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %64 with f32 %62;
    f32 %65 = load f32* %20;
    f32 %66 = load f32* %21;
    f32 %67 = fadd f32 %x52, f32 %65;
    f32 %68 = fadd f32 %67, f32 %66;
    f32 %69 = fadd f32 %68, f32 %x57;
    i32* %70 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 7];
    f32* %71 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %71 with f32 %69;
    f32 %72 = load f32* %22;
    f32 %73 = load f32* %23;
    f32 %74 = fadd f32 %x59, f32 %72;
    f32 %75 = fadd f32 %74, f32 %73;
    f32 %76 = fadd f32 %75, f32 %x62;
    i32* %77 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 8];
    f32* %78 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %78 with f32 %76;
    i32* %79 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 9];
    f32* %80 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %80 with f32 0;
    i32 %81 = load i32* %4;
    i32 %82 = add i32 %81, i32 %i2;
    i32 %83 = add i32 %82, i32 %i5;
    store i32* %24 with i32 %83;
    i32 %84 = load i32* %0;
    i32* %85 = getelementptr &(i32* %i9)[i32 %84];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %86, i32 %i10;
    i32 %88 = add i32 %87, i32 %i11;
    store i32* %32 with i32 %88;
    i32 %89 = load i32* %0;
    i32* %90 = getelementptr &(i32* %i13)[i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = load i32* %0;
    i32* %93 = getelementptr &(i32* %i14)[i32 %92];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %91, i32 %94;
    i32 %96 = add i32 %95, i32 %i15;
    store i32* %38 with i32 %96;
    i32 %97 = load i32* %0;
    i32* %98 = getelementptr &(i32* %i26)[i32 %97];
    i32 %99 = load i32* %98;
    i32 %100 = load i32* %0;
    i32* %101 = getelementptr &(i32* %i28)[i32 %100];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %99, i32 %102;
    i32 %104 = add i32 %103, i32 %i22;
    store i32* %44 with i32 %104;
    i32 %105 = load i32* %0;
    i32* %106 = getelementptr &(i32* %i29)[i32 %105];
    i32 %107 = load i32* %106;
    i32 %108 = load i32* %0;
    i32* %109 = getelementptr &(i32* %i33)[i32 %108];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %107, i32 %110;
    i32 %112 = add i32 %111, i32 %i34;
    store i32* %51 with i32 %112;
    i32 %113 = load i32* %0;
    i32* %114 = getelementptr &(i32* %i39)[i32 %113];
    i32 %115 = load i32* %114;
    i32 %116 = load i32* %0;
    i32* %117 = getelementptr &(i32* %i40)[i32 %116];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %115, i32 %118;
    i32 %120 = add i32 %119, i32 %i41;
    store i32* %58 with i32 %120;
    i32 %121 = load i32* %0;
    i32* %122 = getelementptr &(i32* %i45)[i32 %121];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %123, i32 %i42;
    i32 %125 = add i32 %124, i32 %i46;
    store i32* %63 with i32 %125;
    i32 %126 = load i32* %0;
    i32* %127 = getelementptr &(i32* %i49)[i32 %126];
    i32 %128 = load i32* %127;
    i32 %129 = load i32* %0;
    i32* %130 = getelementptr &(i32* %i50)[i32 %129];
    i32 %131 = load i32* %130;
    i32 %132 = add i32 %128, i32 %131;
    i32 %133 = add i32 %132, i32 %i48;
    store i32* %70 with i32 %133;
    i32 %134 = load i32* %0;
    i32* %135 = getelementptr &(i32* %i55)[i32 %134];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %136, i32 %i54;
    i32 %138 = add i32 %137, i32 %i58;
    i32 %139 = add i32 %138, i32 %i63;
    store i32* %77 with i32 %139;
    store i32* %79 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32 %140 = s2f i32 %139 to f32;
    f32 %141 = fsub f32 %140, f32 %76;
    i32 %142 = f2s f32 %141 to i32;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %25);
    call (i32, i32*) -> void @putarray(i32 10, i32* %24);
    i32 %143 = load i32* %24;
    f32 %144 = load f32* %25;
    f32 %145 = s2f i32 %143 to f32;
    f32 %146 = fsub f32 %145, f32 %144;
    i32 %147 = f2s f32 %146 to i32;
    store i32* %24 with i32 %147;
    i32 %148 = load i32* %32;
    f32 %149 = load f32* %33;
    f32 %150 = s2f i32 %148 to f32;
    f32 %151 = fsub f32 %150, f32 %149;
    i32 %152 = f2s f32 %151 to i32;
    store i32* %32 with i32 %152;
    i32 %153 = load i32* %38;
    f32 %154 = load f32* %39;
    f32 %155 = s2f i32 %153 to f32;
    f32 %156 = fsub f32 %155, f32 %154;
    i32 %157 = f2s f32 %156 to i32;
    store i32* %38 with i32 %157;
    i32 %158 = load i32* %44;
    f32 %159 = load f32* %45;
    f32 %160 = s2f i32 %158 to f32;
    f32 %161 = fsub f32 %160, f32 %159;
    i32 %162 = f2s f32 %161 to i32;
    store i32* %44 with i32 %162;
    i32 %163 = load i32* %51;
    f32 %164 = load f32* %52;
    f32 %165 = s2f i32 %163 to f32;
    f32 %166 = fsub f32 %165, f32 %164;
    i32 %167 = f2s f32 %166 to i32;
    store i32* %51 with i32 %167;
    i32 %168 = load i32* %58;
    f32 %169 = load f32* %59;
    f32 %170 = s2f i32 %168 to f32;
    f32 %171 = fsub f32 %170, f32 %169;
    i32 %172 = f2s f32 %171 to i32;
    store i32* %58 with i32 %172;
    i32 %173 = load i32* %63;
    f32 %174 = load f32* %64;
    f32 %175 = s2f i32 %173 to f32;
    f32 %176 = fsub f32 %175, f32 %174;
    i32 %177 = f2s f32 %176 to i32;
    store i32* %63 with i32 %177;
    i32 %178 = load i32* %70;
    f32 %179 = load f32* %71;
    f32 %180 = s2f i32 %178 to f32;
    f32 %181 = fsub f32 %180, f32 %179;
    i32 %182 = f2s f32 %181 to i32;
    store i32* %70 with i32 %182;
    store i32* %77 with i32 %142;
    store i32* %79 with i32 0;
    i32 %183 = load i32* %0;
    i32* %184 = getelementptr &([10 * i32]* %arr2)[i64 0][i32 %183];
    i32 %185 = load i32* %184;
    f32 %186 = s2f i32 %185 to f32;
    f32 %187 = fmul f32 %186, f32 %76;
    i32 %188 = f2s f32 %187 to i32;
    ubr ^b;
^if.else:
    i32 %189 = f2s f32 %x62 to i32;
    f32 %190 = s2f i32 %i63 to f32;
    i32 %191 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %x0, i32* %24, i32 %i2, f32* %25, f32 %x4, i32 %i5, f32 %x6, f32 %x7, f32* %x8, i32* %i9, i32 %i10, i32 %i11, f32* %x12, i32* %i13, i32* %i14, i32 %i15, f32* %x16, f32* %x17, f32 %x18, f32 %x19, f32 %x20, f32* %x21, i32 %i22, f32 %x23, f32 %x24, f32 %x25, i32* %i26, f32* %x27, i32* %i28, i32* %i29, f32* %x30, f32 %x31, f32 %x32, i32* %i33, i32 %i34, f32* %x35, f32* %x36, f32 %x37, f32 %x38, i32* %i39, i32* %i40, i32 %i41, i32 %i42, f32 %x43, f32 %x44, i32* %i45, i32 %i46, f32* %x47, i32 %i48, i32* %i49, i32* %i50, f32 %x51, f32 %x52, f32* %x53, i32 %i54, i32* %i55, f32* %x56, f32 %x57, i32 %i58, f32 %x59, f32* %x60, f32* %x61, f32 %190, i32 %189, i32* %0);
    ubr ^b;
^b:
    i32 %192 = phi [^if.then, i32 %188] [^if.else, i32 %191];
    ret i32 %192;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %k = alloc i32;
    i32* %i = alloc i32;
    [24 * [3 * i32]]* %arr2 = alloc [24 * [3 * i32]];
    [40 * [3 * f32]]* %arr = alloc [40 * [3 * f32]];
    i32 %0 = call () -> i32 @getint();
    store i32* %k with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %6];
    [3 * f32]* %2 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i32 %1];
    f32* %3 = getelementptr &([3 * f32]* %2)[i64 0][i64 0];
    i32 %4 = call (f32*) -> i32 @getfarray(f32* %3);
    i32 %5 = load i32* %i;
    i32 %6 = add i32 %5, i32 1;
    store i32* %i with i32 %6;
    i1 %7 = scmp lt i32 %6, i32 40;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^b:
    store i32* %i with i32 0;
    ubr ^while.body1;
^while.body1:
    i32 %8 = phi [^b, i32 0] [^while.body1, i32 %14];
    [3 * i32]* %9 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i32 %8];
    i32* %10 = getelementptr &([3 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %k;
    i32 %14 = add i32 %12, i32 1;
    store i32* %i with i32 %14;
    i1 %15 = scmp lt i32 %14, i32 24;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^b1:
    [3 * i32]* %16 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0];
    [3 * f32]* %17 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    [3 * i32]* %18 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1];
    [3 * f32]* %19 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    [3 * i32]* %20 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 2];
    [3 * f32]* %21 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    [3 * i32]* %22 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3];
    [3 * f32]* %23 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    [3 * i32]* %24 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 4];
    [3 * f32]* %25 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    [3 * i32]* %26 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 5];
    [3 * f32]* %27 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    [3 * i32]* %28 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6];
    [3 * f32]* %29 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    [3 * i32]* %30 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7];
    [3 * f32]* %31 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    [3 * i32]* %32 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 8];
    [3 * f32]* %33 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    [3 * i32]* %34 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 9];
    [3 * f32]* %35 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    [3 * i32]* %36 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10];
    [3 * f32]* %37 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    [3 * i32]* %38 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11];
    [3 * f32]* %39 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    [3 * i32]* %40 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12];
    [3 * f32]* %41 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    [3 * i32]* %42 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13];
    [3 * f32]* %43 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    [3 * i32]* %44 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 14];
    [3 * f32]* %45 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    [3 * i32]* %46 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15];
    [3 * f32]* %47 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    [3 * i32]* %48 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16];
    [3 * f32]* %49 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    [3 * i32]* %50 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 17];
    [3 * f32]* %51 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    [3 * i32]* %52 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 18];
    [3 * f32]* %53 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    [3 * i32]* %54 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19];
    [3 * f32]* %55 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    [3 * i32]* %56 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 20];
    [3 * f32]* %57 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    [3 * i32]* %58 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 21];
    [3 * f32]* %59 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    [3 * i32]* %60 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22];
    [3 * f32]* %61 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    [3 * i32]* %62 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23];
    [3 * f32]* %63 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    [3 * f32]* %64 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    [3 * f32]* %65 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    [3 * f32]* %66 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    [3 * f32]* %67 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    [3 * f32]* %68 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    [3 * f32]* %69 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    [3 * f32]* %70 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    [3 * f32]* %71 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    [3 * f32]* %72 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    [3 * f32]* %73 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    [3 * f32]* %74 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    [3 * f32]* %75 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    [3 * f32]* %76 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36];
    [3 * f32]* %77 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37];
    [3 * f32]* %78 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38];
    [3 * f32]* %79 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39];
    i32* %80 = getelementptr &([3 * i32]* %16)[i64 0][i32 %13];
    f32* %81 = getelementptr &([3 * f32]* %17)[i64 0][i32 %13];
    f32 %82 = load f32* %81;
    i32* %83 = getelementptr &([3 * i32]* %18)[i64 0][i32 %13];
    f32* %84 = getelementptr &([3 * f32]* %19)[i64 0][i32 %13];
    f32 %85 = load f32* %84;
    i32* %86 = getelementptr &([3 * i32]* %20)[i64 0][i32 %13];
    f32* %87 = getelementptr &([3 * f32]* %21)[i64 0][i32 %13];
    f32 %88 = load f32* %87;
    i32* %89 = getelementptr &([3 * i32]* %22)[i64 0][i32 %13];
    f32* %90 = getelementptr &([3 * f32]* %23)[i64 0][i32 %13];
    f32 %91 = load f32* %90;
    i32* %92 = getelementptr &([3 * i32]* %24)[i64 0][i32 %13];
    f32* %93 = getelementptr &([3 * f32]* %25)[i64 0][i32 %13];
    f32 %94 = load f32* %93;
    i32* %95 = getelementptr &([3 * i32]* %26)[i64 0][i32 %13];
    f32* %96 = getelementptr &([3 * f32]* %27)[i64 0][i32 %13];
    f32 %97 = load f32* %96;
    i32* %98 = getelementptr &([3 * i32]* %28)[i64 0][i32 %13];
    f32* %99 = getelementptr &([3 * f32]* %29)[i64 0][i32 %13];
    f32 %100 = load f32* %99;
    i32* %101 = getelementptr &([3 * i32]* %30)[i64 0][i32 %13];
    f32* %102 = getelementptr &([3 * f32]* %31)[i64 0][i32 %13];
    f32 %103 = load f32* %102;
    i32* %104 = getelementptr &([3 * i32]* %32)[i64 0][i32 %13];
    f32* %105 = getelementptr &([3 * f32]* %33)[i64 0][i32 %13];
    f32 %106 = load f32* %105;
    i32* %107 = getelementptr &([3 * i32]* %34)[i64 0][i32 %13];
    f32* %108 = getelementptr &([3 * f32]* %35)[i64 0][i32 %13];
    f32 %109 = load f32* %108;
    i32* %110 = getelementptr &([3 * i32]* %36)[i64 0][i32 %13];
    f32* %111 = getelementptr &([3 * f32]* %37)[i64 0][i32 %13];
    f32 %112 = load f32* %111;
    i32* %113 = getelementptr &([3 * i32]* %38)[i64 0][i32 %13];
    f32* %114 = getelementptr &([3 * f32]* %39)[i64 0][i32 %13];
    f32 %115 = load f32* %114;
    i32* %116 = getelementptr &([3 * i32]* %40)[i64 0][i32 %13];
    f32* %117 = getelementptr &([3 * f32]* %41)[i64 0][i32 %13];
    f32 %118 = load f32* %117;
    i32* %119 = getelementptr &([3 * i32]* %42)[i64 0][i32 %13];
    f32* %120 = getelementptr &([3 * f32]* %43)[i64 0][i32 %13];
    f32 %121 = load f32* %120;
    i32* %122 = getelementptr &([3 * i32]* %44)[i64 0][i32 %13];
    f32* %123 = getelementptr &([3 * f32]* %45)[i64 0][i32 %13];
    f32 %124 = load f32* %123;
    i32* %125 = getelementptr &([3 * i32]* %46)[i64 0][i32 %13];
    f32* %126 = getelementptr &([3 * f32]* %47)[i64 0][i32 %13];
    f32 %127 = load f32* %126;
    i32* %128 = getelementptr &([3 * i32]* %48)[i64 0][i32 %13];
    f32* %129 = getelementptr &([3 * f32]* %49)[i64 0][i32 %13];
    f32 %130 = load f32* %129;
    i32* %131 = getelementptr &([3 * i32]* %50)[i64 0][i32 %13];
    f32* %132 = getelementptr &([3 * f32]* %51)[i64 0][i32 %13];
    f32 %133 = load f32* %132;
    i32* %134 = getelementptr &([3 * i32]* %52)[i64 0][i32 %13];
    f32* %135 = getelementptr &([3 * f32]* %53)[i64 0][i32 %13];
    f32 %136 = load f32* %135;
    i32* %137 = getelementptr &([3 * i32]* %54)[i64 0][i32 %13];
    f32* %138 = getelementptr &([3 * f32]* %55)[i64 0][i32 %13];
    f32 %139 = load f32* %138;
    i32* %140 = getelementptr &([3 * i32]* %56)[i64 0][i32 %13];
    f32* %141 = getelementptr &([3 * f32]* %57)[i64 0][i32 %13];
    f32 %142 = load f32* %141;
    i32* %143 = getelementptr &([3 * i32]* %58)[i64 0][i32 %13];
    f32* %144 = getelementptr &([3 * f32]* %59)[i64 0][i32 %13];
    f32 %145 = load f32* %144;
    i32* %146 = getelementptr &([3 * i32]* %60)[i64 0][i32 %13];
    f32* %147 = getelementptr &([3 * f32]* %61)[i64 0][i32 %13];
    f32 %148 = load f32* %147;
    i32* %149 = getelementptr &([3 * i32]* %62)[i64 0][i32 %13];
    f32* %150 = getelementptr &([3 * f32]* %63)[i64 0][i32 %13];
    f32 %151 = load f32* %150;
    f32* %152 = getelementptr &([3 * f32]* %64)[i64 0][i32 %13];
    f32 %153 = load f32* %152;
    f32* %154 = getelementptr &([3 * f32]* %65)[i64 0][i32 %13];
    f32 %155 = load f32* %154;
    f32* %156 = getelementptr &([3 * f32]* %66)[i64 0][i32 %13];
    f32 %157 = load f32* %156;
    f32* %158 = getelementptr &([3 * f32]* %67)[i64 0][i32 %13];
    f32 %159 = load f32* %158;
    f32* %160 = getelementptr &([3 * f32]* %68)[i64 0][i32 %13];
    f32 %161 = load f32* %160;
    f32* %162 = getelementptr &([3 * f32]* %69)[i64 0][i32 %13];
    f32 %163 = load f32* %162;
    f32* %164 = getelementptr &([3 * f32]* %70)[i64 0][i32 %13];
    f32 %165 = load f32* %164;
    f32* %166 = getelementptr &([3 * f32]* %71)[i64 0][i32 %13];
    f32 %167 = load f32* %166;
    f32* %168 = getelementptr &([3 * f32]* %72)[i64 0][i32 %13];
    f32 %169 = load f32* %168;
    f32* %170 = getelementptr &([3 * f32]* %73)[i64 0][i32 %13];
    f32 %171 = load f32* %170;
    f32* %172 = getelementptr &([3 * f32]* %74)[i64 0][i32 %13];
    f32 %173 = load f32* %172;
    f32* %174 = getelementptr &([3 * f32]* %75)[i64 0][i32 %13];
    f32 %175 = load f32* %174;
    f32* %176 = getelementptr &([3 * f32]* %76)[i64 0][i32 %13];
    f32 %177 = load f32* %176;
    f32* %178 = getelementptr &([3 * f32]* %77)[i64 0][i32 %13];
    f32 %179 = load f32* %178;
    f32* %180 = getelementptr &([3 * f32]* %78)[i64 0][i32 %13];
    f32 %181 = load f32* %180;
    f32* %182 = getelementptr &([3 * f32]* %79)[i64 0][i32 %13];
    f32 %183 = load f32* %182;
    i32* %184 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0][i64 0];
    f32* %185 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0][i64 0];
    i32* %186 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1][i64 0];
    f32* %187 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1][i64 0];
    f32* %188 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2][i64 0];
    i32* %189 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3][i64 0];
    f32* %190 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3][i64 0];
    f32* %191 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4][i64 0];
    f32* %192 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5][i64 0];
    i32* %193 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6][i64 0];
    f32* %194 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6][i64 0];
    i32* %195 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7][i64 0];
    f32* %196 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7][i64 0];
    f32* %197 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8][i64 0];
    f32* %198 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9][i64 0];
    i32* %199 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10][i64 0];
    f32* %200 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10][i64 0];
    i32* %201 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11][i64 0];
    f32* %202 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11][i64 0];
    i32* %203 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12][i64 0];
    f32* %204 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12][i64 0];
    i32* %205 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13][i64 0];
    f32* %206 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13][i64 0];
    f32* %207 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14][i64 0];
    i32* %208 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15][i64 0];
    f32* %209 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15][i64 0];
    i32* %210 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16][i64 0];
    f32* %211 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16][i64 0];
    f32* %212 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17][i64 0];
    f32* %213 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18][i64 0];
    i32* %214 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19][i64 0];
    f32* %215 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19][i64 0];
    f32* %216 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20][i64 0];
    f32* %217 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21][i64 0];
    i32* %218 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22][i64 0];
    f32* %219 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22][i64 0];
    i32* %220 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23][i64 0];
    f32* %221 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23][i64 0];
    f32* %222 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24][i64 0];
    f32* %223 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25][i64 0];
    f32* %224 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26][i64 0];
    f32* %225 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27][i64 0];
    f32* %226 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28][i64 0];
    f32* %227 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29][i64 0];
    f32* %228 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30][i64 0];
    f32* %229 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31][i64 0];
    f32* %230 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32][i64 0];
    f32* %231 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33][i64 0];
    f32* %232 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34][i64 0];
    f32* %233 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35][i64 0];
    f32* %234 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36][i64 0];
    f32* %235 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37][i64 0];
    f32* %236 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38][i64 0];
    f32* %237 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39][i64 0];
    f32 %238 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %82, f32 %85, f32 %88, f32 %91, f32 %94, f32 %97, f32 %100, f32 %103, f32 %106, f32 %109, f32 %112, f32 %115, f32 %118, f32 %121, f32 %124, f32 %127, f32 %130, f32 %133, f32 %136, f32 %139, f32 %142, f32 %145, f32 %148, f32 %151, f32 %153, f32 %155, f32 %157, f32 %159, f32 %161, f32 %163, f32 %165, f32 %167, f32 %169, f32 %171, f32 %173, f32 %175, f32 %177, f32 %179, f32 %181, f32 %183, i32* %k);
    i32 %239 = load i32* %149;
    i32 %240 = load i32* %86;
    i32 %241 = load i32* %98;
    i32 %242 = load i32* %83;
    i32 %243 = load i32* %92;
    i32 %244 = load i32* %95;
    i32 %245 = load i32* %146;
    i32 %246 = load i32* %80;
    i32 %247 = load i32* %137;
    i32 %248 = load i32* %101;
    i32 %249 = load i32* %110;
    i32 %250 = load i32* %119;
    i32 %251 = load i32* %104;
    i32 %252 = load i32* %131;
    i32 %253 = load i32* %134;
    i32 %254 = load i32* %107;
    i32 %255 = load i32* %116;
    i32 %256 = load i32* %113;
    i32 %257 = load i32* %128;
    i32 %258 = load i32* %89;
    i32 %259 = load i32* %143;
    i32 %260 = load i32* %140;
    i32 %261 = load i32* %125;
    i32 %262 = load i32* %122;
    f32 %263 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %239, i32 %240, i32 %241, f32 %94, i32 %242, i32 %243, i32 %244, f32 %106, f32 %127, f32 %103, i32 %245, f32 %91, f32 %161, i32 %246, f32 %179, i32 %247, f32 %165, f32 %118, f32 %85, f32 %115, f32 %181, f32 %100, i32 %248, f32 %169, i32 %249, i32 %250, f32 %142, f32 %171, f32 %151, f32 %109, f32 %155, i32 %251, f32 %183, i32 %252, f32 %145, f32 %130, f32 %97, f32 %173, i32 %253, i32 %254, f32 %124, f32 %112, f32 %82, i32 %255, f32 %167, i32 %256, i32 %257, f32 %159, f32 %153, f32 %121, f32 %163, i32 %258, i32 %259, i32 %260, f32 %136, f32 %139, f32 %148, f32 %157, f32 %177, f32 %133, i32 %261, f32 %88, i32 %262, f32 %175, i32* %k);
    f32 %264 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %185, f32* %187, f32* %188, f32* %190, f32* %191, f32* %192, f32* %194, f32* %196, f32* %197, f32* %198, f32* %200, f32* %202, f32* %204, f32* %206, f32* %207, f32* %209, f32* %211, f32* %212, f32* %213, f32* %215, f32* %216, f32* %217, f32* %219, f32* %221, f32* %222, f32* %223, f32* %224, f32* %225, f32* %226, f32* %227, f32* %228, f32* %229, f32* %230, f32* %231, f32* %232, f32* %233, f32* %234, f32* %235, f32* %236, f32* %237, i32* %k);
    i32 %265 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %82, i32* %184, i32 %242, f32* %187, f32 %88, i32 %240, f32 %91, f32 %94, f32* %192, i32* %189, i32 %243, i32 %244, f32* %194, i32* %193, i32* %195, i32 %251, f32* %196, f32* %197, f32 %109, f32 %112, f32 %115, f32* %204, i32 %254, f32 %121, f32 %124, f32 %127, i32* %199, f32* %211, i32* %201, i32* %203, f32* %212, f32 %136, f32 %139, i32* %205, i32 %262, f32* %216, f32* %217, f32 %148, f32 %151, i32* %208, i32* %210, i32 %252, i32 %253, f32 %153, f32 %155, i32* %214, i32 %260, f32* %224, i32 %259, i32* %218, i32* %220, f32 %159, f32 %161, f32* %227, i32 %246, i32* %186, f32* %228, f32 %167, i32 %240, f32 %169, f32* %231, f32* %232, f32 %175, i32 %258, i32* %k);
    call (f32) -> void @putfloat(f32 %238);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %263);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %264);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %265);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
