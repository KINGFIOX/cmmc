internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @params_f40(f32 %x0, f32 %x1, f32 %x2, f32 %x3, f32 %x4, f32 %x5, f32 %x6, f32 %x7, f32 %x8, f32 %x9, f32 %x10, f32 %x11, f32 %x12, f32 %x13, f32 %x14, f32 %x15, f32 %x16, f32 %x17, f32 %x18, f32 %x19, f32 %x20, f32 %x21, f32 %x22, f32 %x23, f32 %x24, f32 %x25, f32 %x26, f32 %x27, f32 %x28, f32 %x29, f32 %x30, f32 %x31, f32 %x32, f32 %x33, f32 %x34, f32 %x35, f32 %x36, f32 %x37, f32 %x38, f32 %x39, i32* %0) -> f32 { NoMemoryWrite } {
  ^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    i1 %1 = fcmp neq f32 %x39, f32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    f32 %2 = fadd f32 %x0, f32 %x1;
    f32 %3 = fadd f32 %2, f32 %x2;
    f32 %4 = fadd f32 %3, f32 %x3;
    f32* %5 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %5 with f32 %4;
    f32 %6 = fadd f32 %x4, f32 %x5;
    f32 %7 = fadd f32 %6, f32 %x6;
    f32 %8 = fadd f32 %7, f32 %x7;
    f32* %9 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %9 with f32 %8;
    f32 %10 = fadd f32 %x8, f32 %x9;
    f32 %11 = fadd f32 %10, f32 %x10;
    f32 %12 = fadd f32 %11, f32 %x11;
    f32* %13 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %13 with f32 %12;
    f32 %14 = fadd f32 %x12, f32 %x13;
    f32 %15 = fadd f32 %14, f32 %x14;
    f32 %16 = fadd f32 %15, f32 %x15;
    f32* %17 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %17 with f32 %16;
    f32 %18 = fadd f32 %x16, f32 %x17;
    f32 %19 = fadd f32 %18, f32 %x18;
    f32 %20 = fadd f32 %19, f32 %x19;
    f32* %21 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %21 with f32 %20;
    f32 %22 = fadd f32 %x20, f32 %x21;
    f32 %23 = fadd f32 %22, f32 %x22;
    f32 %24 = fadd f32 %23, f32 %x23;
    f32* %25 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %25 with f32 %24;
    f32 %26 = fadd f32 %x24, f32 %x25;
    f32 %27 = fadd f32 %26, f32 %x26;
    f32 %28 = fadd f32 %27, f32 %x27;
    f32* %29 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %29 with f32 %28;
    f32 %30 = fadd f32 %x28, f32 %x29;
    f32 %31 = fadd f32 %30, f32 %x30;
    f32 %32 = fadd f32 %31, f32 %x31;
    f32* %33 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %33 with f32 %32;
    f32 %34 = fadd f32 %x32, f32 %x33;
    f32 %35 = fadd f32 %34, f32 %x34;
    f32 %36 = fadd f32 %35, f32 %x35;
    f32* %37 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %37 with f32 %36;
    f32 %38 = fadd f32 %x36, f32 %x37;
    f32 %39 = fadd f32 %38, f32 %x38;
    f32 %40 = fadd f32 %39, f32 %x39;
    f32* %41 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %41 with f32 %40;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %5);
    i32 %42 = load i32* %0;
    f32* %43 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %42];
    f32 %44 = load f32* %43;
    ubr ^b;
  ^if.else:
    f32 %45 = fadd f32 %x0, f32 %x1;
    f32 %46 = fadd f32 %45, f32 %x2;
    f32 %47 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %x1, f32 %x2, f32 %x3, f32 %x4, f32 %x5, f32 %x6, f32 %x7, f32 %x8, f32 %x9, f32 %x10, f32 %x11, f32 %x12, f32 %x13, f32 %x14, f32 %x15, f32 %x16, f32 %x17, f32 %x18, f32 %x19, f32 %x20, f32 %x21, f32 %x22, f32 %x23, f32 %x24, f32 %x25, f32 %x26, f32 %x27, f32 %x28, f32 %x29, f32 %x30, f32 %x31, f32 %x32, f32 %x33, f32 %x34, f32 %x35, f32 %x36, f32 %x37, f32 %x38, f32 %x39, f32 %46, i32* %0);
    ubr ^b;
  ^b:
    f32 %48 = phi [^if.then, f32 %44] [^if.else, f32 %47];
    ret f32 %48;
}
internal func @params_f40_i24(i32 %i23, i32 %i2, i32 %i6, f32 %x4, i32 %i1, i32 %i4, i32 %i5, f32 %x8, f32 %x15, f32 %x7, i32 %i22, f32 %x3, f32 %x28, i32 %i0, f32 %x37, i32 %i19, f32 %x30, f32 %x12, f32 %x1, f32 %x11, f32 %x38, f32 %x6, i32 %i7, f32 %x32, i32 %i10, i32 %i13, f32 %x20, f32 %x33, f32 %x23, f32 %x9, f32 %x25, i32 %i8, f32 %x39, i32 %i17, f32 %x21, f32 %x16, f32 %x5, f32 %x34, i32 %i18, i32 %i9, f32 %x14, f32 %x10, f32 %x0, i32 %i12, f32 %x31, i32 %i11, i32 %i16, f32 %x27, f32 %x24, f32 %x13, f32 %x29, i32 %i3, i32 %i21, i32 %i20, f32 %x18, f32 %x19, f32 %x22, f32 %x26, f32 %x36, f32 %x17, i32 %i15, f32 %x2, i32 %i14, f32 %x35, i32* %0) -> f32 { NoMemoryWrite } {
  ^entry:
    [8 * i32]* %arr2 = alloc [8 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    i1 %1 = scmp neq i32 %i23, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    f32 %2 = fadd f32 %x0, f32 %x1;
    f32 %3 = fadd f32 %2, f32 %x2;
    f32 %4 = fadd f32 %3, f32 %x3;
    f32* %5 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %5 with f32 %4;
    f32 %6 = fadd f32 %x4, f32 %x5;
    f32 %7 = fadd f32 %6, f32 %x6;
    f32 %8 = fadd f32 %7, f32 %x7;
    f32* %9 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %9 with f32 %8;
    f32 %10 = fadd f32 %x8, f32 %x9;
    f32 %11 = fadd f32 %10, f32 %x10;
    f32 %12 = fadd f32 %11, f32 %x11;
    f32* %13 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %13 with f32 %12;
    f32 %14 = fadd f32 %x12, f32 %x13;
    f32 %15 = fadd f32 %14, f32 %x14;
    f32 %16 = fadd f32 %15, f32 %x15;
    f32* %17 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %17 with f32 %16;
    f32 %18 = fadd f32 %x16, f32 %x17;
    f32 %19 = fadd f32 %18, f32 %x18;
    f32 %20 = fadd f32 %19, f32 %x19;
    f32* %21 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %21 with f32 %20;
    f32 %22 = fadd f32 %x20, f32 %x21;
    f32 %23 = fadd f32 %22, f32 %x22;
    f32 %24 = fadd f32 %23, f32 %x23;
    f32* %25 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %25 with f32 %24;
    f32 %26 = fadd f32 %x24, f32 %x25;
    f32 %27 = fadd f32 %26, f32 %x26;
    f32 %28 = fadd f32 %27, f32 %x27;
    f32* %29 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %29 with f32 %28;
    f32 %30 = fadd f32 %x28, f32 %x29;
    f32 %31 = fadd f32 %30, f32 %x30;
    f32 %32 = fadd f32 %31, f32 %x31;
    f32* %33 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %33 with f32 %32;
    f32 %34 = fadd f32 %x32, f32 %x33;
    f32 %35 = fadd f32 %34, f32 %x34;
    f32 %36 = fadd f32 %35, f32 %x35;
    f32* %37 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %37 with f32 %36;
    f32 %38 = fadd f32 %x36, f32 %x37;
    f32 %39 = fadd f32 %38, f32 %x38;
    f32 %40 = fadd f32 %39, f32 %x39;
    f32* %41 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %41 with f32 %40;
    i32 %42 = add i32 %i2, i32 %i1;
    i32 %43 = add i32 %i0, i32 %42;
    i32* %44 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 0];
    store i32* %44 with i32 %43;
    i32 %45 = add i32 %i4, i32 %i5;
    i32 %46 = add i32 %i3, i32 %45;
    i32* %47 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 1];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %i6, i32 %i7;
    i32 %49 = add i32 %i8, i32 %48;
    i32* %50 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 2];
    store i32* %50 with i32 %49;
    i32 %51 = add i32 %i10, i32 %i9;
    i32 %52 = add i32 %i11, i32 %51;
    i32* %53 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 3];
    store i32* %53 with i32 %52;
    i32 %54 = add i32 %i13, i32 %i12;
    i32 %55 = add i32 %i14, i32 %54;
    i32* %56 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 4];
    store i32* %56 with i32 %55;
    i32 %57 = add i32 %i17, i32 %i16;
    i32 %58 = add i32 %i15, i32 %57;
    i32* %59 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 5];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %i19, i32 %i18;
    i32 %61 = add i32 %i20, i32 %60;
    i32* %62 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 6];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %i23, i32 %i22;
    i32 %64 = add i32 %i21, i32 %63;
    i32* %65 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 7];
    store i32* %65 with i32 %64;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %5);
    call (i32, i32*) -> void @putarray(i32 8, i32* %44);
    f32 %66 = s2f i32 %43 to f32;
    f32 %67 = fsub f32 %66, f32 %4;
    i32 %68 = f2s f32 %67 to i32;
    store i32* %44 with i32 %68;
    f32 %69 = s2f i32 %46 to f32;
    f32 %70 = fsub f32 %69, f32 %8;
    i32 %71 = f2s f32 %70 to i32;
    store i32* %47 with i32 %71;
    f32 %72 = s2f i32 %49 to f32;
    f32 %73 = fsub f32 %72, f32 %12;
    i32 %74 = f2s f32 %73 to i32;
    store i32* %50 with i32 %74;
    f32 %75 = s2f i32 %52 to f32;
    f32 %76 = fsub f32 %75, f32 %16;
    i32 %77 = f2s f32 %76 to i32;
    store i32* %53 with i32 %77;
    f32 %78 = s2f i32 %55 to f32;
    f32 %79 = fsub f32 %78, f32 %20;
    i32 %80 = f2s f32 %79 to i32;
    store i32* %56 with i32 %80;
    f32 %81 = s2f i32 %58 to f32;
    f32 %82 = fsub f32 %81, f32 %24;
    i32 %83 = f2s f32 %82 to i32;
    store i32* %59 with i32 %83;
    f32 %84 = s2f i32 %61 to f32;
    f32 %85 = fsub f32 %84, f32 %28;
    i32 %86 = f2s f32 %85 to i32;
    store i32* %62 with i32 %86;
    f32 %87 = s2f i32 %64 to f32;
    f32 %88 = fsub f32 %87, f32 %32;
    i32 %89 = f2s f32 %88 to i32;
    store i32* %65 with i32 %89;
    i32 %90 = load i32* %0;
    i32* %91 = getelementptr &([8 * i32]* %arr2)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    f32 %93 = s2f i32 %92 to f32;
    ubr ^b;
  ^if.else:
    f32 %94 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %i1, i32 %i2, i32 %i6, f32 %x4, i32 %i1, i32 %i4, i32 %i5, f32 %x8, f32 %x15, f32 %x7, i32 %i22, f32 %x3, f32 %x28, i32 %i0, f32 %x37, i32 %i19, f32 %x30, f32 %x12, f32 %x1, f32 %x11, f32 %x38, f32 %x6, i32 %i7, f32 %x32, i32 %i10, i32 %i13, f32 %x20, f32 %x33, f32 %x23, f32 %x9, f32 %x25, i32 %i8, f32 %x39, i32 %i17, f32 %x21, f32 %x16, f32 %x5, f32 %x34, i32 %i18, i32 %i9, f32 %x14, f32 %x10, f32 %x0, i32 %i12, f32 %x31, i32 %i11, i32 %i16, f32 %x27, f32 %x24, f32 %x13, f32 %x29, i32 %i3, i32 %i21, i32 %i20, f32 %x18, f32 %x19, f32 %x22, f32 %x26, f32 %x36, f32 %x17, i32 %i15, f32 %x2, i32 %i14, f32 %x35, i32* %0);
    ubr ^b;
  ^b:
    f32 %95 = phi [^if.then, f32 %93] [^if.else, f32 %94];
    ret f32 %95;
}
internal func @params_fa40(f32* %x0, f32* %x1, f32* %x2, f32* %x3, f32* %x4, f32* %x5, f32* %x6, f32* %x7, f32* %x8, f32* %x9, f32* %x10, f32* %x11, f32* %x12, f32* %x13, f32* %x14, f32* %x15, f32* %x16, f32* %x17, f32* %x18, f32* %x19, f32* %x20, f32* %x21, f32* %x22, f32* %x23, f32* %x24, f32* %x25, f32* %x26, f32* %x27, f32* %x28, f32* %x29, f32* %x30, f32* %x31, f32* %x32, f32* %x33, f32* %x34, f32* %x35, f32* %x36, f32* %x37, f32* %x38, f32* %x39, i32* %0) -> f32 { NoMemoryWrite } {
  ^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %1 = load i32* %0;
    f32* %2 = getelementptr &(f32* %x0)[i32 %1];
    f32 %3 = load f32* %2;
    f32* %4 = getelementptr &(f32* %x1)[i32 %1];
    f32 %5 = load f32* %4;
    f32 %6 = fadd f32 %3, f32 %5;
    f32* %7 = getelementptr &(f32* %x2)[i32 %1];
    f32 %8 = load f32* %7;
    f32 %9 = fadd f32 %6, f32 %8;
    f32* %10 = getelementptr &(f32* %x3)[i32 %1];
    f32 %11 = load f32* %10;
    f32 %12 = fadd f32 %9, f32 %11;
    f32* %13 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %13 with f32 %12;
    f32* %14 = getelementptr &(f32* %x4)[i32 %1];
    f32 %15 = load f32* %14;
    f32* %16 = getelementptr &(f32* %x5)[i32 %1];
    f32 %17 = load f32* %16;
    f32 %18 = fadd f32 %15, f32 %17;
    f32* %19 = getelementptr &(f32* %x6)[i32 %1];
    f32 %20 = load f32* %19;
    f32 %21 = fadd f32 %18, f32 %20;
    f32* %22 = getelementptr &(f32* %x7)[i32 %1];
    f32 %23 = load f32* %22;
    f32 %24 = fadd f32 %21, f32 %23;
    f32* %25 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %25 with f32 %24;
    f32* %26 = getelementptr &(f32* %x8)[i32 %1];
    f32 %27 = load f32* %26;
    f32* %28 = getelementptr &(f32* %x9)[i32 %1];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %27, f32 %29;
    f32* %31 = getelementptr &(f32* %x10)[i32 %1];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %x11)[i32 %1];
    f32 %35 = load f32* %34;
    f32 %36 = fadd f32 %33, f32 %35;
    f32* %37 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %37 with f32 %36;
    f32* %38 = getelementptr &(f32* %x12)[i32 %1];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &(f32* %x13)[i32 %1];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32* %43 = getelementptr &(f32* %x14)[i32 %1];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %x15)[i32 %1];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    f32* %49 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %49 with f32 %48;
    f32* %50 = getelementptr &(f32* %x16)[i32 %1];
    f32 %51 = load f32* %50;
    f32* %52 = getelementptr &(f32* %x17)[i32 %1];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %51, f32 %53;
    f32* %55 = getelementptr &(f32* %x18)[i32 %1];
    f32 %56 = load f32* %55;
    f32 %57 = fadd f32 %54, f32 %56;
    f32* %58 = getelementptr &(f32* %x19)[i32 %1];
    f32 %59 = load f32* %58;
    f32 %60 = fadd f32 %57, f32 %59;
    f32* %61 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %61 with f32 %60;
    f32* %62 = getelementptr &(f32* %x20)[i32 %1];
    f32 %63 = load f32* %62;
    f32* %64 = getelementptr &(f32* %x21)[i32 %1];
    f32 %65 = load f32* %64;
    f32 %66 = fadd f32 %63, f32 %65;
    f32* %67 = getelementptr &(f32* %x22)[i32 %1];
    f32 %68 = load f32* %67;
    f32 %69 = fadd f32 %66, f32 %68;
    f32* %70 = getelementptr &(f32* %x23)[i32 %1];
    f32 %71 = load f32* %70;
    f32 %72 = fadd f32 %69, f32 %71;
    f32* %73 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %73 with f32 %72;
    f32* %74 = getelementptr &(f32* %x24)[i32 %1];
    f32 %75 = load f32* %74;
    f32* %76 = getelementptr &(f32* %x25)[i32 %1];
    f32 %77 = load f32* %76;
    f32 %78 = fadd f32 %75, f32 %77;
    f32* %79 = getelementptr &(f32* %x26)[i32 %1];
    f32 %80 = load f32* %79;
    f32 %81 = fadd f32 %78, f32 %80;
    f32* %82 = getelementptr &(f32* %x27)[i32 %1];
    f32 %83 = load f32* %82;
    f32 %84 = fadd f32 %81, f32 %83;
    f32* %85 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %85 with f32 %84;
    f32* %86 = getelementptr &(f32* %x28)[i32 %1];
    f32 %87 = load f32* %86;
    f32* %88 = getelementptr &(f32* %x29)[i32 %1];
    f32 %89 = load f32* %88;
    f32 %90 = fadd f32 %87, f32 %89;
    f32* %91 = getelementptr &(f32* %x30)[i32 %1];
    f32 %92 = load f32* %91;
    f32 %93 = fadd f32 %90, f32 %92;
    f32* %94 = getelementptr &(f32* %x31)[i32 %1];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    f32* %97 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %97 with f32 %96;
    f32* %98 = getelementptr &(f32* %x32)[i32 %1];
    f32 %99 = load f32* %98;
    f32* %100 = getelementptr &(f32* %x33)[i32 %1];
    f32 %101 = load f32* %100;
    f32 %102 = fadd f32 %99, f32 %101;
    f32* %103 = getelementptr &(f32* %x34)[i32 %1];
    f32 %104 = load f32* %103;
    f32 %105 = fadd f32 %102, f32 %104;
    f32* %106 = getelementptr &(f32* %x35)[i32 %1];
    f32 %107 = load f32* %106;
    f32 %108 = fadd f32 %105, f32 %107;
    f32* %109 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %109 with f32 %108;
    f32* %110 = getelementptr &(f32* %x36)[i32 %1];
    f32 %111 = load f32* %110;
    f32* %112 = getelementptr &(f32* %x37)[i32 %1];
    f32 %113 = load f32* %112;
    f32 %114 = fadd f32 %111, f32 %113;
    f32* %115 = getelementptr &(f32* %x38)[i32 %1];
    f32 %116 = load f32* %115;
    f32 %117 = fadd f32 %114, f32 %116;
    f32* %118 = getelementptr &(f32* %x39)[i32 %1];
    f32 %119 = load f32* %118;
    f32 %120 = fadd f32 %117, f32 %119;
    f32* %121 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %121 with f32 %120;
    f32 %122 = load f32* %118;
    i1 %123 = fcmp neq f32 %122, f32 0;
    i32 %124 = zext i1 %123 to i32;
    f32 %125 = s2f i32 %124 to f32;
    i1 %126 = fcmp neq f32 %125, f32 0;
    i32 %127 = zext i1 %126 to i32;
    f32 %128 = s2f i32 %127 to f32;
    i1 %129 = fcmp neq f32 %128, f32 0;
    cbr i1 %129(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32, f32*) -> void @putfarray(i32 10, f32* %13);
    f32* %130 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %1];
    f32 %131 = load f32* %130;
    ubr ^b;
  ^if.else:
    f32 %132 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %x1, f32* %x2, f32* %x3, f32* %x4, f32* %x5, f32* %x6, f32* %x7, f32* %x8, f32* %x9, f32* %x10, f32* %x11, f32* %x12, f32* %x13, f32* %x14, f32* %x15, f32* %x16, f32* %x17, f32* %x18, f32* %x19, f32* %x20, f32* %x21, f32* %x22, f32* %x23, f32* %x24, f32* %x25, f32* %x26, f32* %x27, f32* %x28, f32* %x29, f32* %x30, f32* %x31, f32* %x32, f32* %x33, f32* %x34, f32* %x35, f32* %x36, f32* %x37, f32* %x38, f32* %x39, f32* %13, i32* %0);
    ubr ^b;
  ^b:
    f32 %133 = phi [^if.then, f32 %131] [^if.else, f32 %132];
    ret f32 %133;
}
internal func @params_mix(f32 %x0, i32* %i1, i32 %i2, f32* %x3, f32 %x4, i32 %i5, f32 %x6, f32 %x7, f32* %x8, i32* %i9, i32 %i10, i32 %i11, f32* %x12, i32* %i13, i32* %i14, i32 %i15, f32* %x16, f32* %x17, f32 %x18, f32 %x19, f32 %x20, f32* %x21, i32 %i22, f32 %x23, f32 %x24, f32 %x25, i32* %i26, f32* %x27, i32* %i28, i32* %i29, f32* %x30, f32 %x31, f32 %x32, i32* %i33, i32 %i34, f32* %x35, f32* %x36, f32 %x37, f32 %x38, i32* %i39, i32* %i40, i32 %i41, i32 %i42, f32 %x43, f32 %x44, i32* %i45, i32 %i46, f32* %x47, i32 %i48, i32* %i49, i32* %i50, f32 %x51, f32 %x52, f32* %x53, i32 %i54, i32* %i55, f32* %x56, f32 %x57, i32 %i58, f32 %x59, f32* %x60, f32* %x61, f32 %x62, i32 %i63, i32* %0) -> i32 { NoMemoryWrite } {
  ^entry:
    [10 * i32]* %arr2 = alloc [10 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %1 = load i32* %0;
    f32* %2 = getelementptr &(f32* %x3)[i32 %1];
    f32 %3 = load f32* %2;
    f32 %4 = fadd f32 %x0, f32 %3;
    f32 %5 = fadd f32 %4, f32 %x4;
    f32 %6 = fadd f32 %5, f32 %x6;
    f32* %7 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %7 with f32 %6;
    f32* %8 = getelementptr &(f32* %x8)[i32 %1];
    f32 %9 = load f32* %8;
    f32 %10 = fadd f32 %x7, f32 %9;
    f32* %11 = getelementptr &(f32* %x12)[i32 %1];
    f32 %12 = load f32* %11;
    f32 %13 = fadd f32 %10, f32 %12;
    f32* %14 = getelementptr &(f32* %x16)[i32 %1];
    f32 %15 = load f32* %14;
    f32 %16 = fadd f32 %13, f32 %15;
    f32* %17 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %17 with f32 %16;
    f32* %18 = getelementptr &(f32* %x17)[i32 %1];
    f32 %19 = load f32* %18;
    f32 %20 = fadd f32 %19, f32 %x18;
    f32 %21 = fadd f32 %20, f32 %x19;
    f32 %22 = fadd f32 %21, f32 %x20;
    f32* %23 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %23 with f32 %22;
    f32* %24 = getelementptr &(f32* %x21)[i32 %1];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %25, f32 %x23;
    f32 %27 = fadd f32 %26, f32 %x24;
    f32 %28 = fadd f32 %27, f32 %x25;
    f32* %29 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %29 with f32 %28;
    f32* %30 = getelementptr &(f32* %x27)[i32 %1];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &(f32* %x30)[i32 %1];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32 %35 = fadd f32 %34, f32 %x31;
    f32 %36 = fadd f32 %35, f32 %x32;
    f32* %37 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %37 with f32 %36;
    f32* %38 = getelementptr &(f32* %x35)[i32 %1];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &(f32* %x36)[i32 %1];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32 %43 = fadd f32 %42, f32 %x37;
    f32 %44 = fadd f32 %43, f32 %x38;
    f32* %45 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %45 with f32 %44;
    f32* %46 = getelementptr &(f32* %x47)[i32 %1];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %x43, f32 %x44;
    f32 %49 = fadd f32 %48, f32 %47;
    f32 %50 = fadd f32 %49, f32 %x51;
    f32* %51 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %51 with f32 %50;
    f32* %52 = getelementptr &(f32* %x53)[i32 %1];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %x52, f32 %53;
    f32* %55 = getelementptr &(f32* %x56)[i32 %1];
    f32 %56 = load f32* %55;
    f32 %57 = fadd f32 %54, f32 %56;
    f32 %58 = fadd f32 %57, f32 %x57;
    f32* %59 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %59 with f32 %58;
    f32* %60 = getelementptr &(f32* %x60)[i32 %1];
    f32 %61 = load f32* %60;
    f32 %62 = fadd f32 %x59, f32 %61;
    f32* %63 = getelementptr &(f32* %x61)[i32 %1];
    f32 %64 = load f32* %63;
    f32 %65 = fadd f32 %62, f32 %64;
    f32 %66 = fadd f32 %65, f32 %x62;
    f32* %67 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %67 with f32 %66;
    i32* %68 = getelementptr &(i32* %i1)[i32 %1];
    f32* %69 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %69 with f32 0;
    i32 %70 = load i32* %68;
    i32 %71 = add i32 %i2, i32 %i5;
    i32 %72 = add i32 %70, i32 %71;
    i32* %73 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 0];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %i9)[i32 %1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %i10, i32 %i11;
    i32 %77 = add i32 %75, i32 %76;
    i32* %78 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 1];
    store i32* %78 with i32 %77;
    i32* %79 = getelementptr &(i32* %i13)[i32 %1];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %i15, i32 %80;
    i32* %82 = getelementptr &(i32* %i14)[i32 %1];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32* %85 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 2];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &(i32* %i26)[i32 %1];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %i22, i32 %87;
    i32* %89 = getelementptr &(i32* %i28)[i32 %1];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %88, i32 %90;
    i32* %92 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 3];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %i29)[i32 %1];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %i34, i32 %94;
    i32* %96 = getelementptr &(i32* %i33)[i32 %1];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %95, i32 %97;
    i32* %99 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 4];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %i39)[i32 %1];
    i32 %101 = load i32* %100;
    i32 %102 = add i32 %i41, i32 %101;
    i32* %103 = getelementptr &(i32* %i40)[i32 %1];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    i32* %106 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 5];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %i45)[i32 %1];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %i42, i32 %i46;
    i32 %110 = add i32 %108, i32 %109;
    i32* %111 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 6];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %i49)[i32 %1];
    i32 %113 = load i32* %112;
    i32 %114 = add i32 %i48, i32 %113;
    i32* %115 = getelementptr &(i32* %i50)[i32 %1];
    i32 %116 = load i32* %115;
    i32 %117 = add i32 %114, i32 %116;
    i32* %118 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 7];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %i55)[i32 %1];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %i54, i32 %i58;
    i32 %122 = add i32 %i63, i32 %121;
    i32 %123 = add i32 %120, i32 %122;
    i32* %124 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 8];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 9];
    store i32* %125 with i32 0;
    i1 %126 = scmp neq i32 %i63, i32 0;
    cbr i1 %126(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32, f32*) -> void @putfarray(i32 10, f32* %7);
    call (i32, i32*) -> void @putarray(i32 10, i32* %73);
    ubr ^while.body;
  ^if.else:
    i32 %127 = f2s f32 %x62 to i32;
    f32 %128 = s2f i32 %i63 to f32;
    i32 %129 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %x0, i32* %73, i32 %i2, f32* %7, f32 %x4, i32 %i5, f32 %x6, f32 %x7, f32* %x8, i32* %i9, i32 %i10, i32 %i11, f32* %x12, i32* %i13, i32* %i14, i32 %i15, f32* %x16, f32* %x17, f32 %x18, f32 %x19, f32 %x20, f32* %x21, i32 %i22, f32 %x23, f32 %x24, f32 %x25, i32* %i26, f32* %x27, i32* %i28, i32* %i29, f32* %x30, f32 %x31, f32 %x32, i32* %i33, i32 %i34, f32* %x35, f32* %x36, f32 %x37, f32 %x38, i32* %i39, i32* %i40, i32 %i41, i32 %i42, f32 %x43, f32 %x44, i32* %i45, i32 %i46, f32* %x47, i32 %i48, i32* %i49, i32* %i50, f32 %x51, f32 %x52, f32* %x53, i32 %i54, i32* %i55, f32* %x56, f32 %x57, i32 %i58, f32 %x59, f32* %x60, f32* %x61, f32 %128, i32 %127, i32* %0);
    ubr ^b;
  ^while.body:
    i32 %130 = phi [^if.then, i32 0] [^while.body, i32 %159];
    i32* %131 = getelementptr &([10 * i32]* %arr2)[i64 0][i32 %130];
    i32 %132 = load i32* %131;
    f32 %133 = s2f i32 %132 to f32;
    f32* %134 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %130];
    f32 %135 = load f32* %134;
    f32 %136 = fsub f32 %133, f32 %135;
    i32 %137 = f2s f32 %136 to i32;
    store i32* %131 with i32 %137;
    i32* %138 = getelementptr &(i32* %131)[i64 1];
    i32 %139 = load i32* %138;
    f32 %140 = s2f i32 %139 to f32;
    f32* %141 = getelementptr &(f32* %134)[i64 1];
    f32 %142 = load f32* %141;
    f32 %143 = fsub f32 %140, f32 %142;
    i32 %144 = f2s f32 %143 to i32;
    store i32* %138 with i32 %144;
    i32* %145 = getelementptr &(i32* %131)[i64 2];
    i32 %146 = load i32* %145;
    f32 %147 = s2f i32 %146 to f32;
    f32* %148 = getelementptr &(f32* %134)[i64 2];
    f32 %149 = load f32* %148;
    f32 %150 = fsub f32 %147, f32 %149;
    i32 %151 = f2s f32 %150 to i32;
    store i32* %145 with i32 %151;
    i32* %152 = getelementptr &(i32* %131)[i64 3];
    i32 %153 = load i32* %152;
    f32 %154 = s2f i32 %153 to f32;
    f32* %155 = getelementptr &(f32* %134)[i64 3];
    f32 %156 = load f32* %155;
    f32 %157 = fsub f32 %154, f32 %156;
    i32 %158 = f2s f32 %157 to i32;
    store i32* %152 with i32 %158;
    i32 %159 = add i32 %130, i32 4;
    i1 %160 = scmp lt i32 %159, i32 8;
    cbr i1 %160(prob = 0.5), ^while.body, ^while.body1;
  ^b:
    i32 %161 = phi [^if.else, i32 %129] [^while.body1, i32 %182];
    ret i32 %161;
  ^while.body1:
    i32* %162 = getelementptr &([10 * i32]* %arr2)[i64 0][i32 %159];
    i32 %163 = load i32* %162;
    f32 %164 = s2f i32 %163 to f32;
    f32* %165 = getelementptr &([10 * f32]* %arr)[i64 0][i32 %159];
    f32 %166 = load f32* %165;
    f32 %167 = fsub f32 %164, f32 %166;
    i32 %168 = f2s f32 %167 to i32;
    store i32* %162 with i32 %168;
    i32* %169 = getelementptr &(i32* %162)[i64 1];
    i32 %170 = load i32* %169;
    f32 %171 = s2f i32 %170 to f32;
    f32* %172 = getelementptr &(f32* %165)[i64 1];
    f32 %173 = load f32* %172;
    f32 %174 = fsub f32 %171, f32 %173;
    i32 %175 = f2s f32 %174 to i32;
    store i32* %169 with i32 %175;
    i32 %176 = load i32* %0;
    i32* %177 = getelementptr &([10 * i32]* %arr2)[i64 0][i32 %176];
    i32 %178 = load i32* %177;
    f32 %179 = s2f i32 %178 to f32;
    f32 %180 = load f32* %67;
    f32 %181 = fmul f32 %179, f32 %180;
    i32 %182 = f2s f32 %181 to i32;
    ubr ^b;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %k = alloc i32;
    [24 * [3 * i32]]* %arr2 = alloc [24 * [3 * i32]];
    [40 * [3 * f32]]* %arr = alloc [40 * [3 * f32]];
    i32 %0 = call () -> i32 @getint();
    store i32* %k with i32 %0;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %5];
    [3 * f32]* %2 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i32 %1];
    f32* %3 = getelementptr &([3 * f32]* %2)[i64 0][i64 0];
    i32 %4 = call (f32*) -> i32 @getfarray(f32* %3);
    i32 %5 = add i32 %1, i32 1;
    i1 %6 = scmp lt i32 %5, i32 40;
    cbr i1 %6(prob = 0.97), ^while.body, ^while.body1;
  ^while.body1:
    i32 %7 = phi [^while.body, i32 0] [^while.body1, i32 %11];
    [3 * i32]* %8 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i32 %7];
    i32* %9 = getelementptr &([3 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    i32 %11 = add i32 %7, i32 1;
    i1 %12 = scmp lt i32 %11, i32 24;
    cbr i1 %12(prob = 0.96), ^while.body1, ^b;
  ^b:
    [3 * f32]* %13 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    i32 %14 = load i32* %k;
    f32* %15 = getelementptr &([3 * f32]* %13)[i64 0][i32 %14];
    f32 %16 = load f32* %15;
    [3 * f32]* %17 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    f32* %18 = getelementptr &([3 * f32]* %17)[i64 0][i32 %14];
    f32 %19 = load f32* %18;
    [3 * f32]* %20 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    f32* %21 = getelementptr &([3 * f32]* %20)[i64 0][i32 %14];
    f32 %22 = load f32* %21;
    [3 * f32]* %23 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    f32* %24 = getelementptr &([3 * f32]* %23)[i64 0][i32 %14];
    f32 %25 = load f32* %24;
    [3 * f32]* %26 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    f32* %27 = getelementptr &([3 * f32]* %26)[i64 0][i32 %14];
    f32 %28 = load f32* %27;
    [3 * f32]* %29 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    f32* %30 = getelementptr &([3 * f32]* %29)[i64 0][i32 %14];
    f32 %31 = load f32* %30;
    [3 * f32]* %32 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    f32* %33 = getelementptr &([3 * f32]* %32)[i64 0][i32 %14];
    f32 %34 = load f32* %33;
    [3 * f32]* %35 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    f32* %36 = getelementptr &([3 * f32]* %35)[i64 0][i32 %14];
    f32 %37 = load f32* %36;
    [3 * f32]* %38 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    f32* %39 = getelementptr &([3 * f32]* %38)[i64 0][i32 %14];
    f32 %40 = load f32* %39;
    [3 * f32]* %41 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    f32* %42 = getelementptr &([3 * f32]* %41)[i64 0][i32 %14];
    f32 %43 = load f32* %42;
    [3 * f32]* %44 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    f32* %45 = getelementptr &([3 * f32]* %44)[i64 0][i32 %14];
    f32 %46 = load f32* %45;
    [3 * f32]* %47 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    f32* %48 = getelementptr &([3 * f32]* %47)[i64 0][i32 %14];
    f32 %49 = load f32* %48;
    [3 * f32]* %50 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    f32* %51 = getelementptr &([3 * f32]* %50)[i64 0][i32 %14];
    f32 %52 = load f32* %51;
    [3 * f32]* %53 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    f32* %54 = getelementptr &([3 * f32]* %53)[i64 0][i32 %14];
    f32 %55 = load f32* %54;
    [3 * f32]* %56 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    f32* %57 = getelementptr &([3 * f32]* %56)[i64 0][i32 %14];
    f32 %58 = load f32* %57;
    [3 * f32]* %59 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    f32* %60 = getelementptr &([3 * f32]* %59)[i64 0][i32 %14];
    f32 %61 = load f32* %60;
    [3 * f32]* %62 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    f32* %63 = getelementptr &([3 * f32]* %62)[i64 0][i32 %14];
    f32 %64 = load f32* %63;
    [3 * f32]* %65 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    f32* %66 = getelementptr &([3 * f32]* %65)[i64 0][i32 %14];
    f32 %67 = load f32* %66;
    [3 * f32]* %68 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    f32* %69 = getelementptr &([3 * f32]* %68)[i64 0][i32 %14];
    f32 %70 = load f32* %69;
    [3 * f32]* %71 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    f32* %72 = getelementptr &([3 * f32]* %71)[i64 0][i32 %14];
    f32 %73 = load f32* %72;
    [3 * f32]* %74 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    f32* %75 = getelementptr &([3 * f32]* %74)[i64 0][i32 %14];
    f32 %76 = load f32* %75;
    [3 * f32]* %77 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    f32* %78 = getelementptr &([3 * f32]* %77)[i64 0][i32 %14];
    f32 %79 = load f32* %78;
    [3 * f32]* %80 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    f32* %81 = getelementptr &([3 * f32]* %80)[i64 0][i32 %14];
    f32 %82 = load f32* %81;
    [3 * f32]* %83 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    f32* %84 = getelementptr &([3 * f32]* %83)[i64 0][i32 %14];
    f32 %85 = load f32* %84;
    [3 * f32]* %86 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    f32* %87 = getelementptr &([3 * f32]* %86)[i64 0][i32 %14];
    f32 %88 = load f32* %87;
    [3 * f32]* %89 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    f32* %90 = getelementptr &([3 * f32]* %89)[i64 0][i32 %14];
    f32 %91 = load f32* %90;
    [3 * f32]* %92 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    f32* %93 = getelementptr &([3 * f32]* %92)[i64 0][i32 %14];
    f32 %94 = load f32* %93;
    [3 * f32]* %95 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    f32* %96 = getelementptr &([3 * f32]* %95)[i64 0][i32 %14];
    f32 %97 = load f32* %96;
    [3 * f32]* %98 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    f32* %99 = getelementptr &([3 * f32]* %98)[i64 0][i32 %14];
    f32 %100 = load f32* %99;
    [3 * f32]* %101 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    f32* %102 = getelementptr &([3 * f32]* %101)[i64 0][i32 %14];
    f32 %103 = load f32* %102;
    [3 * f32]* %104 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    f32* %105 = getelementptr &([3 * f32]* %104)[i64 0][i32 %14];
    f32 %106 = load f32* %105;
    [3 * f32]* %107 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    f32* %108 = getelementptr &([3 * f32]* %107)[i64 0][i32 %14];
    f32 %109 = load f32* %108;
    [3 * f32]* %110 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    f32* %111 = getelementptr &([3 * f32]* %110)[i64 0][i32 %14];
    f32 %112 = load f32* %111;
    [3 * f32]* %113 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    f32* %114 = getelementptr &([3 * f32]* %113)[i64 0][i32 %14];
    f32 %115 = load f32* %114;
    [3 * f32]* %116 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    f32* %117 = getelementptr &([3 * f32]* %116)[i64 0][i32 %14];
    f32 %118 = load f32* %117;
    [3 * f32]* %119 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    f32* %120 = getelementptr &([3 * f32]* %119)[i64 0][i32 %14];
    f32 %121 = load f32* %120;
    [3 * f32]* %122 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36];
    f32* %123 = getelementptr &([3 * f32]* %122)[i64 0][i32 %14];
    f32 %124 = load f32* %123;
    [3 * f32]* %125 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37];
    f32* %126 = getelementptr &([3 * f32]* %125)[i64 0][i32 %14];
    f32 %127 = load f32* %126;
    [3 * f32]* %128 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38];
    f32* %129 = getelementptr &([3 * f32]* %128)[i64 0][i32 %14];
    f32 %130 = load f32* %129;
    [3 * f32]* %131 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39];
    f32* %132 = getelementptr &([3 * f32]* %131)[i64 0][i32 %14];
    f32 %133 = load f32* %132;
    f32 %134 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %16, f32 %19, f32 %22, f32 %25, f32 %28, f32 %31, f32 %34, f32 %37, f32 %40, f32 %43, f32 %46, f32 %49, f32 %52, f32 %55, f32 %58, f32 %61, f32 %64, f32 %67, f32 %70, f32 %73, f32 %76, f32 %79, f32 %82, f32 %85, f32 %88, f32 %91, f32 %94, f32 %97, f32 %100, f32 %103, f32 %106, f32 %109, f32 %112, f32 %115, f32 %118, f32 %121, f32 %124, f32 %127, f32 %130, f32 %133, i32* %k);
    [3 * i32]* %135 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23];
    i32* %136 = getelementptr &([3 * i32]* %135)[i64 0][i32 %14];
    i32 %137 = load i32* %136;
    [3 * i32]* %138 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 2];
    i32* %139 = getelementptr &([3 * i32]* %138)[i64 0][i32 %14];
    i32 %140 = load i32* %139;
    [3 * i32]* %141 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6];
    i32* %142 = getelementptr &([3 * i32]* %141)[i64 0][i32 %14];
    i32 %143 = load i32* %142;
    [3 * i32]* %144 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1];
    i32* %145 = getelementptr &([3 * i32]* %144)[i64 0][i32 %14];
    i32 %146 = load i32* %145;
    [3 * i32]* %147 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 4];
    i32* %148 = getelementptr &([3 * i32]* %147)[i64 0][i32 %14];
    i32 %149 = load i32* %148;
    [3 * i32]* %150 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 5];
    i32* %151 = getelementptr &([3 * i32]* %150)[i64 0][i32 %14];
    i32 %152 = load i32* %151;
    [3 * i32]* %153 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22];
    i32* %154 = getelementptr &([3 * i32]* %153)[i64 0][i32 %14];
    i32 %155 = load i32* %154;
    [3 * i32]* %156 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0];
    i32* %157 = getelementptr &([3 * i32]* %156)[i64 0][i32 %14];
    i32 %158 = load i32* %157;
    [3 * i32]* %159 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19];
    i32* %160 = getelementptr &([3 * i32]* %159)[i64 0][i32 %14];
    i32 %161 = load i32* %160;
    [3 * i32]* %162 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7];
    i32* %163 = getelementptr &([3 * i32]* %162)[i64 0][i32 %14];
    i32 %164 = load i32* %163;
    [3 * i32]* %165 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10];
    i32* %166 = getelementptr &([3 * i32]* %165)[i64 0][i32 %14];
    i32 %167 = load i32* %166;
    [3 * i32]* %168 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13];
    i32* %169 = getelementptr &([3 * i32]* %168)[i64 0][i32 %14];
    i32 %170 = load i32* %169;
    [3 * i32]* %171 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 8];
    i32* %172 = getelementptr &([3 * i32]* %171)[i64 0][i32 %14];
    i32 %173 = load i32* %172;
    [3 * i32]* %174 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 17];
    i32* %175 = getelementptr &([3 * i32]* %174)[i64 0][i32 %14];
    i32 %176 = load i32* %175;
    [3 * i32]* %177 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 18];
    i32* %178 = getelementptr &([3 * i32]* %177)[i64 0][i32 %14];
    i32 %179 = load i32* %178;
    [3 * i32]* %180 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 9];
    i32* %181 = getelementptr &([3 * i32]* %180)[i64 0][i32 %14];
    i32 %182 = load i32* %181;
    [3 * i32]* %183 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12];
    i32* %184 = getelementptr &([3 * i32]* %183)[i64 0][i32 %14];
    i32 %185 = load i32* %184;
    [3 * i32]* %186 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11];
    i32* %187 = getelementptr &([3 * i32]* %186)[i64 0][i32 %14];
    i32 %188 = load i32* %187;
    [3 * i32]* %189 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16];
    i32* %190 = getelementptr &([3 * i32]* %189)[i64 0][i32 %14];
    i32 %191 = load i32* %190;
    [3 * i32]* %192 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3];
    i32* %193 = getelementptr &([3 * i32]* %192)[i64 0][i32 %14];
    i32 %194 = load i32* %193;
    [3 * i32]* %195 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 21];
    i32* %196 = getelementptr &([3 * i32]* %195)[i64 0][i32 %14];
    i32 %197 = load i32* %196;
    [3 * i32]* %198 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 20];
    i32* %199 = getelementptr &([3 * i32]* %198)[i64 0][i32 %14];
    i32 %200 = load i32* %199;
    [3 * i32]* %201 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15];
    i32* %202 = getelementptr &([3 * i32]* %201)[i64 0][i32 %14];
    i32 %203 = load i32* %202;
    [3 * i32]* %204 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 14];
    i32* %205 = getelementptr &([3 * i32]* %204)[i64 0][i32 %14];
    i32 %206 = load i32* %205;
    f32 %207 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %137, i32 %140, i32 %143, f32 %28, i32 %146, i32 %149, i32 %152, f32 %40, f32 %61, f32 %37, i32 %155, f32 %25, f32 %100, i32 %158, f32 %127, i32 %161, f32 %106, f32 %52, f32 %19, f32 %49, f32 %130, f32 %34, i32 %164, f32 %112, i32 %167, i32 %170, f32 %76, f32 %115, f32 %85, f32 %43, f32 %91, i32 %173, f32 %133, i32 %176, f32 %79, f32 %64, f32 %31, f32 %118, i32 %179, i32 %182, f32 %58, f32 %46, f32 %16, i32 %185, f32 %109, i32 %188, i32 %191, f32 %97, f32 %88, f32 %55, f32 %103, i32 %194, i32 %197, i32 %200, f32 %70, f32 %73, f32 %82, f32 %94, f32 %124, f32 %67, i32 %203, f32 %22, i32 %206, f32 %121, i32* %k);
    f32* %208 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0][i64 0];
    f32* %209 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1][i64 0];
    f32* %210 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2][i64 0];
    f32* %211 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3][i64 0];
    f32* %212 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4][i64 0];
    f32* %213 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5][i64 0];
    f32* %214 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6][i64 0];
    f32* %215 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7][i64 0];
    f32* %216 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8][i64 0];
    f32* %217 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9][i64 0];
    f32* %218 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10][i64 0];
    f32* %219 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11][i64 0];
    f32* %220 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12][i64 0];
    f32* %221 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13][i64 0];
    f32* %222 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14][i64 0];
    f32* %223 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15][i64 0];
    f32* %224 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16][i64 0];
    f32* %225 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17][i64 0];
    f32* %226 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18][i64 0];
    f32* %227 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19][i64 0];
    f32* %228 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20][i64 0];
    f32* %229 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21][i64 0];
    f32* %230 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22][i64 0];
    f32* %231 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23][i64 0];
    f32* %232 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24][i64 0];
    f32* %233 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25][i64 0];
    f32* %234 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26][i64 0];
    f32* %235 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27][i64 0];
    f32* %236 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28][i64 0];
    f32* %237 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29][i64 0];
    f32* %238 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30][i64 0];
    f32* %239 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31][i64 0];
    f32* %240 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32][i64 0];
    f32* %241 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33][i64 0];
    f32* %242 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34][i64 0];
    f32* %243 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35][i64 0];
    f32* %244 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36][i64 0];
    f32* %245 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37][i64 0];
    f32* %246 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38][i64 0];
    f32* %247 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39][i64 0];
    f32 %248 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %208, f32* %209, f32* %210, f32* %211, f32* %212, f32* %213, f32* %214, f32* %215, f32* %216, f32* %217, f32* %218, f32* %219, f32* %220, f32* %221, f32* %222, f32* %223, f32* %224, f32* %225, f32* %226, f32* %227, f32* %228, f32* %229, f32* %230, f32* %231, f32* %232, f32* %233, f32* %234, f32* %235, f32* %236, f32* %237, f32* %238, f32* %239, f32* %240, f32* %241, f32* %242, f32* %243, f32* %244, f32* %245, f32* %246, f32* %247, i32* %k);
    i32* %249 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0][i64 0];
    i32* %250 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3][i64 0];
    i32* %251 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6][i64 0];
    i32* %252 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7][i64 0];
    i32* %253 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10][i64 0];
    i32* %254 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11][i64 0];
    i32* %255 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12][i64 0];
    i32* %256 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13][i64 0];
    i32* %257 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15][i64 0];
    i32* %258 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16][i64 0];
    i32* %259 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19][i64 0];
    i32* %260 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22][i64 0];
    i32* %261 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23][i64 0];
    i32* %262 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1][i64 0];
    i32 %263 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %16, i32* %249, i32 %146, f32* %209, f32 %22, i32 %140, f32 %25, f32 %28, f32* %213, i32* %250, i32 %149, i32 %152, f32* %214, i32* %251, i32* %252, i32 %173, f32* %215, f32* %216, f32 %43, f32 %46, f32 %49, f32* %220, i32 %182, f32 %55, f32 %58, f32 %61, i32* %253, f32* %224, i32* %254, i32* %255, f32* %225, f32 %70, f32 %73, i32* %256, i32 %206, f32* %228, f32* %229, f32 %82, f32 %85, i32* %257, i32* %258, i32 %176, i32 %179, f32 %88, f32 %91, i32* %259, i32 %200, f32* %234, i32 %197, i32* %260, i32* %261, f32 %97, f32 %100, f32* %237, i32 %158, i32* %262, f32* %238, f32 %109, i32 %140, f32 %112, f32* %241, f32* %242, f32 %121, i32 %194, i32* %k);
    call (f32) -> void @putfloat(f32 %134);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %207);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %248);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %263);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
