internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @k;
internal func @params_f40(f32 %x0, f32 %x1, f32 %x2, f32 %x3, f32 %x4, f32 %x5, f32 %x6, f32 %x7, f32 %x8, f32 %x9, f32 %x10, f32 %x11, f32 %x12, f32 %x13, f32 %x14, f32 %x15, f32 %x16, f32 %x17, f32 %x18, f32 %x19, f32 %x20, f32 %x21, f32 %x22, f32 %x23, f32 %x24, f32 %x25, f32 %x26, f32 %x27, f32 %x28, f32 %x29, f32 %x30, f32 %x31, f32 %x32, f32 %x33, f32 %x34, f32 %x35, f32 %x36, f32 %x37, f32 %x38, f32 %x39) -> f32 {
^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    f32* %x391 = alloc f32;
    f32* %x381 = alloc f32;
    f32* %x371 = alloc f32;
    f32* %x361 = alloc f32;
    f32* %x351 = alloc f32;
    f32* %x341 = alloc f32;
    f32* %x331 = alloc f32;
    f32* %x321 = alloc f32;
    f32* %x311 = alloc f32;
    f32* %x301 = alloc f32;
    f32* %x291 = alloc f32;
    f32* %x281 = alloc f32;
    f32* %x271 = alloc f32;
    f32* %x261 = alloc f32;
    f32* %x251 = alloc f32;
    f32* %x241 = alloc f32;
    f32* %x231 = alloc f32;
    f32* %x221 = alloc f32;
    f32* %x211 = alloc f32;
    f32* %x201 = alloc f32;
    f32* %x191 = alloc f32;
    f32* %x181 = alloc f32;
    f32* %x171 = alloc f32;
    f32* %x161 = alloc f32;
    f32* %x151 = alloc f32;
    f32* %x141 = alloc f32;
    f32* %x131 = alloc f32;
    f32* %x121 = alloc f32;
    f32* %x111 = alloc f32;
    f32* %x101 = alloc f32;
    f32* %x91 = alloc f32;
    f32* %x81 = alloc f32;
    f32* %x71 = alloc f32;
    f32* %x61 = alloc f32;
    f32* %x51 = alloc f32;
    f32* %x41 = alloc f32;
    f32* %x31 = alloc f32;
    f32* %x21 = alloc f32;
    f32* %x11 = alloc f32;
    f32* %x01 = alloc f32;
    store f32* %x01 with f32 %x0;
    store f32* %x11 with f32 %x1;
    store f32* %x21 with f32 %x2;
    store f32* %x31 with f32 %x3;
    store f32* %x41 with f32 %x4;
    store f32* %x51 with f32 %x5;
    store f32* %x61 with f32 %x6;
    store f32* %x71 with f32 %x7;
    store f32* %x81 with f32 %x8;
    store f32* %x91 with f32 %x9;
    store f32* %x101 with f32 %x10;
    store f32* %x111 with f32 %x11;
    store f32* %x121 with f32 %x12;
    store f32* %x131 with f32 %x13;
    store f32* %x141 with f32 %x14;
    store f32* %x151 with f32 %x15;
    store f32* %x161 with f32 %x16;
    store f32* %x171 with f32 %x17;
    store f32* %x181 with f32 %x18;
    store f32* %x191 with f32 %x19;
    store f32* %x201 with f32 %x20;
    store f32* %x211 with f32 %x21;
    store f32* %x221 with f32 %x22;
    store f32* %x231 with f32 %x23;
    store f32* %x241 with f32 %x24;
    store f32* %x251 with f32 %x25;
    store f32* %x261 with f32 %x26;
    store f32* %x271 with f32 %x27;
    store f32* %x281 with f32 %x28;
    store f32* %x291 with f32 %x29;
    store f32* %x301 with f32 %x30;
    store f32* %x311 with f32 %x31;
    store f32* %x321 with f32 %x32;
    store f32* %x331 with f32 %x33;
    store f32* %x341 with f32 %x34;
    store f32* %x351 with f32 %x35;
    store f32* %x361 with f32 %x36;
    store f32* %x371 with f32 %x37;
    store f32* %x381 with f32 %x38;
    store f32* %x391 with f32 %x39;
    f32 %0 = load f32* %x391;
    i1 %1 = fcmp neq f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32 %4 = load f32* %x01;
    f32 %5 = load f32* %x11;
    f32 %6 = fadd f32 %4, f32 %5;
    f32 %7 = load f32* %x21;
    f32 %8 = fadd f32 %6, f32 %7;
    f32 %9 = load f32* %x31;
    f32 %10 = fadd f32 %8, f32 %9;
    f32* %11 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %11 with f32 %10;
    f32 %12 = load f32* %x41;
    f32 %13 = load f32* %x51;
    f32 %14 = fadd f32 %12, f32 %13;
    f32 %15 = load f32* %x61;
    f32 %16 = fadd f32 %14, f32 %15;
    f32 %17 = load f32* %x71;
    f32 %18 = fadd f32 %16, f32 %17;
    f32* %19 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %19 with f32 %18;
    f32 %20 = load f32* %x81;
    f32 %21 = load f32* %x91;
    f32 %22 = fadd f32 %20, f32 %21;
    f32 %23 = load f32* %x101;
    f32 %24 = fadd f32 %22, f32 %23;
    f32 %25 = load f32* %x111;
    f32 %26 = fadd f32 %24, f32 %25;
    f32* %27 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %27 with f32 %26;
    f32 %28 = load f32* %x121;
    f32 %29 = load f32* %x131;
    f32 %30 = fadd f32 %28, f32 %29;
    f32 %31 = load f32* %x141;
    f32 %32 = fadd f32 %30, f32 %31;
    f32 %33 = load f32* %x151;
    f32 %34 = fadd f32 %32, f32 %33;
    f32* %35 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %35 with f32 %34;
    f32 %36 = load f32* %x161;
    f32 %37 = load f32* %x171;
    f32 %38 = fadd f32 %36, f32 %37;
    f32 %39 = load f32* %x181;
    f32 %40 = fadd f32 %38, f32 %39;
    f32 %41 = load f32* %x191;
    f32 %42 = fadd f32 %40, f32 %41;
    f32* %43 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %43 with f32 %42;
    f32 %44 = load f32* %x201;
    f32 %45 = load f32* %x211;
    f32 %46 = fadd f32 %44, f32 %45;
    f32 %47 = load f32* %x221;
    f32 %48 = fadd f32 %46, f32 %47;
    f32 %49 = load f32* %x231;
    f32 %50 = fadd f32 %48, f32 %49;
    f32* %51 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %51 with f32 %50;
    f32 %52 = load f32* %x241;
    f32 %53 = load f32* %x251;
    f32 %54 = fadd f32 %52, f32 %53;
    f32 %55 = load f32* %x261;
    f32 %56 = fadd f32 %54, f32 %55;
    f32 %57 = load f32* %x271;
    f32 %58 = fadd f32 %56, f32 %57;
    f32* %59 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %59 with f32 %58;
    f32 %60 = load f32* %x281;
    f32 %61 = load f32* %x291;
    f32 %62 = fadd f32 %60, f32 %61;
    f32 %63 = load f32* %x301;
    f32 %64 = fadd f32 %62, f32 %63;
    f32 %65 = load f32* %x311;
    f32 %66 = fadd f32 %64, f32 %65;
    f32* %67 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %67 with f32 %66;
    f32 %68 = load f32* %x321;
    f32 %69 = load f32* %x331;
    f32 %70 = fadd f32 %68, f32 %69;
    f32 %71 = load f32* %x341;
    f32 %72 = fadd f32 %70, f32 %71;
    f32 %73 = load f32* %x351;
    f32 %74 = fadd f32 %72, f32 %73;
    f32* %75 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %75 with f32 %74;
    f32 %76 = load f32* %x361;
    f32 %77 = load f32* %x371;
    f32 %78 = fadd f32 %76, f32 %77;
    f32 %79 = load f32* %x381;
    f32 %80 = fadd f32 %78, f32 %79;
    f32 %81 = load f32* %x391;
    f32 %82 = fadd f32 %80, f32 %81;
    f32* %83 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %83 with f32 %82;
    f32* %84 = getelementptr &([10 * f32]* %arr)[i64 1][i64 0];
    f32* %85 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 10, f32* %85);
    i32 %86 = load i32* @k;
    i64 %87 = sext i32 %86 to i64;
    f32* %88 = getelementptr &([10 * f32]* %arr)[i64 0][i64 %87];
    f32 %89 = load f32* %88;
    ret f32 %89;
^if.else:
    f32 %90 = load f32* %x11;
    f32 %91 = load f32* %x21;
    f32 %92 = load f32* %x31;
    f32 %93 = load f32* %x41;
    f32 %94 = load f32* %x51;
    f32 %95 = load f32* %x61;
    f32 %96 = load f32* %x71;
    f32 %97 = load f32* %x81;
    f32 %98 = load f32* %x91;
    f32 %99 = load f32* %x101;
    f32 %100 = load f32* %x111;
    f32 %101 = load f32* %x121;
    f32 %102 = load f32* %x131;
    f32 %103 = load f32* %x141;
    f32 %104 = load f32* %x151;
    f32 %105 = load f32* %x161;
    f32 %106 = load f32* %x171;
    f32 %107 = load f32* %x181;
    f32 %108 = load f32* %x191;
    f32 %109 = load f32* %x201;
    f32 %110 = load f32* %x211;
    f32 %111 = load f32* %x221;
    f32 %112 = load f32* %x231;
    f32 %113 = load f32* %x241;
    f32 %114 = load f32* %x251;
    f32 %115 = load f32* %x261;
    f32 %116 = load f32* %x271;
    f32 %117 = load f32* %x281;
    f32 %118 = load f32* %x291;
    f32 %119 = load f32* %x301;
    f32 %120 = load f32* %x311;
    f32 %121 = load f32* %x321;
    f32 %122 = load f32* %x331;
    f32 %123 = load f32* %x341;
    f32 %124 = load f32* %x351;
    f32 %125 = load f32* %x361;
    f32 %126 = load f32* %x371;
    f32 %127 = load f32* %x381;
    f32 %128 = load f32* %x391;
    f32 %129 = load f32* %x01;
    f32 %130 = load f32* %x11;
    f32 %131 = fadd f32 %129, f32 %130;
    f32 %132 = load f32* %x21;
    f32 %133 = fadd f32 %131, f32 %132;
    f32 %134 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32) -> f32 @params_f40(f32 %90, f32 %91, f32 %92, f32 %93, f32 %94, f32 %95, f32 %96, f32 %97, f32 %98, f32 %99, f32 %100, f32 %101, f32 %102, f32 %103, f32 %104, f32 %105, f32 %106, f32 %107, f32 %108, f32 %109, f32 %110, f32 %111, f32 %112, f32 %113, f32 %114, f32 %115, f32 %116, f32 %117, f32 %118, f32 %119, f32 %120, f32 %121, f32 %122, f32 %123, f32 %124, f32 %125, f32 %126, f32 %127, f32 %128, f32 %133);
    ret f32 %134;
^b:
    unreachable;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal func @params_f40_i24(i32 %i23, i32 %i2, i32 %i6, f32 %x4, i32 %i1, i32 %i4, i32 %i5, f32 %x8, f32 %x15, f32 %x7, i32 %i22, f32 %x3, f32 %x28, i32 %i0, f32 %x37, i32 %i19, f32 %x30, f32 %x12, f32 %x1, f32 %x11, f32 %x38, f32 %x6, i32 %i7, f32 %x32, i32 %i10, i32 %i13, f32 %x20, f32 %x33, f32 %x23, f32 %x9, f32 %x25, i32 %i8, f32 %x39, i32 %i17, f32 %x21, f32 %x16, f32 %x5, f32 %x34, i32 %i18, i32 %i9, f32 %x14, f32 %x10, f32 %x0, i32 %i12, f32 %x31, i32 %i11, i32 %i16, f32 %x27, f32 %x24, f32 %x13, f32 %x29, i32 %i3, i32 %i21, i32 %i20, f32 %x18, f32 %x19, f32 %x22, f32 %x26, f32 %x36, f32 %x17, i32 %i15, f32 %x2, i32 %i14, f32 %x35) -> f32 {
^entry:
    i32* %i = alloc i32;
    [8 * i32]* %arr2 = alloc [8 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    f32* %x351 = alloc f32;
    i32* %i141 = alloc i32;
    f32* %x21 = alloc f32;
    i32* %i151 = alloc i32;
    f32* %x171 = alloc f32;
    f32* %x361 = alloc f32;
    f32* %x261 = alloc f32;
    f32* %x221 = alloc f32;
    f32* %x191 = alloc f32;
    f32* %x181 = alloc f32;
    i32* %i201 = alloc i32;
    i32* %i211 = alloc i32;
    i32* %i31 = alloc i32;
    f32* %x291 = alloc f32;
    f32* %x131 = alloc f32;
    f32* %x241 = alloc f32;
    f32* %x271 = alloc f32;
    i32* %i161 = alloc i32;
    i32* %i111 = alloc i32;
    f32* %x311 = alloc f32;
    i32* %i121 = alloc i32;
    f32* %x01 = alloc f32;
    f32* %x101 = alloc f32;
    f32* %x141 = alloc f32;
    i32* %i91 = alloc i32;
    i32* %i181 = alloc i32;
    f32* %x341 = alloc f32;
    f32* %x51 = alloc f32;
    f32* %x161 = alloc f32;
    f32* %x211 = alloc f32;
    i32* %i171 = alloc i32;
    f32* %x391 = alloc f32;
    i32* %i81 = alloc i32;
    f32* %x251 = alloc f32;
    f32* %x91 = alloc f32;
    f32* %x231 = alloc f32;
    f32* %x331 = alloc f32;
    f32* %x201 = alloc f32;
    i32* %i131 = alloc i32;
    i32* %i101 = alloc i32;
    f32* %x321 = alloc f32;
    i32* %i71 = alloc i32;
    f32* %x61 = alloc f32;
    f32* %x381 = alloc f32;
    f32* %x111 = alloc f32;
    f32* %x11 = alloc f32;
    f32* %x121 = alloc f32;
    f32* %x301 = alloc f32;
    i32* %i191 = alloc i32;
    f32* %x371 = alloc f32;
    i32* %i01 = alloc i32;
    f32* %x281 = alloc f32;
    f32* %x31 = alloc f32;
    i32* %i221 = alloc i32;
    f32* %x71 = alloc f32;
    f32* %x151 = alloc f32;
    f32* %x81 = alloc f32;
    i32* %i51 = alloc i32;
    i32* %i41 = alloc i32;
    i32* %i11 = alloc i32;
    f32* %x41 = alloc f32;
    i32* %i61 = alloc i32;
    i32* %i21 = alloc i32;
    i32* %i231 = alloc i32;
    store i32* %i231 with i32 %i23;
    store i32* %i21 with i32 %i2;
    store i32* %i61 with i32 %i6;
    store f32* %x41 with f32 %x4;
    store i32* %i11 with i32 %i1;
    store i32* %i41 with i32 %i4;
    store i32* %i51 with i32 %i5;
    store f32* %x81 with f32 %x8;
    store f32* %x151 with f32 %x15;
    store f32* %x71 with f32 %x7;
    store i32* %i221 with i32 %i22;
    store f32* %x31 with f32 %x3;
    store f32* %x281 with f32 %x28;
    store i32* %i01 with i32 %i0;
    store f32* %x371 with f32 %x37;
    store i32* %i191 with i32 %i19;
    store f32* %x301 with f32 %x30;
    store f32* %x121 with f32 %x12;
    store f32* %x11 with f32 %x1;
    store f32* %x111 with f32 %x11;
    store f32* %x381 with f32 %x38;
    store f32* %x61 with f32 %x6;
    store i32* %i71 with i32 %i7;
    store f32* %x321 with f32 %x32;
    store i32* %i101 with i32 %i10;
    store i32* %i131 with i32 %i13;
    store f32* %x201 with f32 %x20;
    store f32* %x331 with f32 %x33;
    store f32* %x231 with f32 %x23;
    store f32* %x91 with f32 %x9;
    store f32* %x251 with f32 %x25;
    store i32* %i81 with i32 %i8;
    store f32* %x391 with f32 %x39;
    store i32* %i171 with i32 %i17;
    store f32* %x211 with f32 %x21;
    store f32* %x161 with f32 %x16;
    store f32* %x51 with f32 %x5;
    store f32* %x341 with f32 %x34;
    store i32* %i181 with i32 %i18;
    store i32* %i91 with i32 %i9;
    store f32* %x141 with f32 %x14;
    store f32* %x101 with f32 %x10;
    store f32* %x01 with f32 %x0;
    store i32* %i121 with i32 %i12;
    store f32* %x311 with f32 %x31;
    store i32* %i111 with i32 %i11;
    store i32* %i161 with i32 %i16;
    store f32* %x271 with f32 %x27;
    store f32* %x241 with f32 %x24;
    store f32* %x131 with f32 %x13;
    store f32* %x291 with f32 %x29;
    store i32* %i31 with i32 %i3;
    store i32* %i211 with i32 %i21;
    store i32* %i201 with i32 %i20;
    store f32* %x181 with f32 %x18;
    store f32* %x191 with f32 %x19;
    store f32* %x221 with f32 %x22;
    store f32* %x261 with f32 %x26;
    store f32* %x361 with f32 %x36;
    store f32* %x171 with f32 %x17;
    store i32* %i151 with i32 %i15;
    store f32* %x21 with f32 %x2;
    store i32* %i141 with i32 %i14;
    store f32* %x351 with f32 %x35;
    i32 %0 = load i32* %i231;
    i1 %1 = scmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32 %4 = load f32* %x01;
    f32 %5 = load f32* %x11;
    f32 %6 = fadd f32 %4, f32 %5;
    f32 %7 = load f32* %x21;
    f32 %8 = fadd f32 %6, f32 %7;
    f32 %9 = load f32* %x31;
    f32 %10 = fadd f32 %8, f32 %9;
    f32* %11 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %11 with f32 %10;
    f32 %12 = load f32* %x41;
    f32 %13 = load f32* %x51;
    f32 %14 = fadd f32 %12, f32 %13;
    f32 %15 = load f32* %x61;
    f32 %16 = fadd f32 %14, f32 %15;
    f32 %17 = load f32* %x71;
    f32 %18 = fadd f32 %16, f32 %17;
    f32* %19 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %19 with f32 %18;
    f32 %20 = load f32* %x81;
    f32 %21 = load f32* %x91;
    f32 %22 = fadd f32 %20, f32 %21;
    f32 %23 = load f32* %x101;
    f32 %24 = fadd f32 %22, f32 %23;
    f32 %25 = load f32* %x111;
    f32 %26 = fadd f32 %24, f32 %25;
    f32* %27 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %27 with f32 %26;
    f32 %28 = load f32* %x121;
    f32 %29 = load f32* %x131;
    f32 %30 = fadd f32 %28, f32 %29;
    f32 %31 = load f32* %x141;
    f32 %32 = fadd f32 %30, f32 %31;
    f32 %33 = load f32* %x151;
    f32 %34 = fadd f32 %32, f32 %33;
    f32* %35 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %35 with f32 %34;
    f32 %36 = load f32* %x161;
    f32 %37 = load f32* %x171;
    f32 %38 = fadd f32 %36, f32 %37;
    f32 %39 = load f32* %x181;
    f32 %40 = fadd f32 %38, f32 %39;
    f32 %41 = load f32* %x191;
    f32 %42 = fadd f32 %40, f32 %41;
    f32* %43 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %43 with f32 %42;
    f32 %44 = load f32* %x201;
    f32 %45 = load f32* %x211;
    f32 %46 = fadd f32 %44, f32 %45;
    f32 %47 = load f32* %x221;
    f32 %48 = fadd f32 %46, f32 %47;
    f32 %49 = load f32* %x231;
    f32 %50 = fadd f32 %48, f32 %49;
    f32* %51 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %51 with f32 %50;
    f32 %52 = load f32* %x241;
    f32 %53 = load f32* %x251;
    f32 %54 = fadd f32 %52, f32 %53;
    f32 %55 = load f32* %x261;
    f32 %56 = fadd f32 %54, f32 %55;
    f32 %57 = load f32* %x271;
    f32 %58 = fadd f32 %56, f32 %57;
    f32* %59 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %59 with f32 %58;
    f32 %60 = load f32* %x281;
    f32 %61 = load f32* %x291;
    f32 %62 = fadd f32 %60, f32 %61;
    f32 %63 = load f32* %x301;
    f32 %64 = fadd f32 %62, f32 %63;
    f32 %65 = load f32* %x311;
    f32 %66 = fadd f32 %64, f32 %65;
    f32* %67 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %67 with f32 %66;
    f32 %68 = load f32* %x321;
    f32 %69 = load f32* %x331;
    f32 %70 = fadd f32 %68, f32 %69;
    f32 %71 = load f32* %x341;
    f32 %72 = fadd f32 %70, f32 %71;
    f32 %73 = load f32* %x351;
    f32 %74 = fadd f32 %72, f32 %73;
    f32* %75 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %75 with f32 %74;
    f32 %76 = load f32* %x361;
    f32 %77 = load f32* %x371;
    f32 %78 = fadd f32 %76, f32 %77;
    f32 %79 = load f32* %x381;
    f32 %80 = fadd f32 %78, f32 %79;
    f32 %81 = load f32* %x391;
    f32 %82 = fadd f32 %80, f32 %81;
    f32* %83 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %83 with f32 %82;
    f32* %84 = getelementptr &([10 * f32]* %arr)[i64 1][i64 0];
    i32 %85 = load i32* %i01;
    i32 %86 = load i32* %i11;
    i32 %87 = add i32 %85, i32 %86;
    i32 %88 = load i32* %i21;
    i32 %89 = add i32 %87, i32 %88;
    i32* %90 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 0];
    store i32* %90 with i32 %89;
    i32 %91 = load i32* %i31;
    i32 %92 = load i32* %i41;
    i32 %93 = add i32 %91, i32 %92;
    i32 %94 = load i32* %i51;
    i32 %95 = add i32 %93, i32 %94;
    i32* %96 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 1];
    store i32* %96 with i32 %95;
    i32 %97 = load i32* %i61;
    i32 %98 = load i32* %i71;
    i32 %99 = add i32 %97, i32 %98;
    i32 %100 = load i32* %i81;
    i32 %101 = add i32 %99, i32 %100;
    i32* %102 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 2];
    store i32* %102 with i32 %101;
    i32 %103 = load i32* %i91;
    i32 %104 = load i32* %i101;
    i32 %105 = add i32 %103, i32 %104;
    i32 %106 = load i32* %i111;
    i32 %107 = add i32 %105, i32 %106;
    i32* %108 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 3];
    store i32* %108 with i32 %107;
    i32 %109 = load i32* %i121;
    i32 %110 = load i32* %i131;
    i32 %111 = add i32 %109, i32 %110;
    i32 %112 = load i32* %i141;
    i32 %113 = add i32 %111, i32 %112;
    i32* %114 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 4];
    store i32* %114 with i32 %113;
    i32 %115 = load i32* %i151;
    i32 %116 = load i32* %i161;
    i32 %117 = add i32 %115, i32 %116;
    i32 %118 = load i32* %i171;
    i32 %119 = add i32 %117, i32 %118;
    i32* %120 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 5];
    store i32* %120 with i32 %119;
    i32 %121 = load i32* %i181;
    i32 %122 = load i32* %i191;
    i32 %123 = add i32 %121, i32 %122;
    i32 %124 = load i32* %i201;
    i32 %125 = add i32 %123, i32 %124;
    i32* %126 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 6];
    store i32* %126 with i32 %125;
    i32 %127 = load i32* %i211;
    i32 %128 = load i32* %i221;
    i32 %129 = add i32 %127, i32 %128;
    i32 %130 = load i32* %i231;
    i32 %131 = add i32 %129, i32 %130;
    i32* %132 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 7];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &([8 * i32]* %arr2)[i64 1][i64 0];
    f32* %134 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 10, f32* %134);
    i32* %135 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 8, i32* %135);
    store i32* %i with i32 0;
    ubr ^while.header;
^if.else:
    i32 %136 = load i32* %i11;
    i32 %137 = load i32* %i21;
    i32 %138 = load i32* %i61;
    f32 %139 = load f32* %x41;
    i32 %140 = load i32* %i11;
    i32 %141 = load i32* %i41;
    i32 %142 = load i32* %i51;
    f32 %143 = load f32* %x81;
    f32 %144 = load f32* %x151;
    f32 %145 = load f32* %x71;
    i32 %146 = load i32* %i221;
    f32 %147 = load f32* %x31;
    f32 %148 = load f32* %x281;
    i32 %149 = load i32* %i01;
    f32 %150 = load f32* %x371;
    i32 %151 = load i32* %i191;
    f32 %152 = load f32* %x301;
    f32 %153 = load f32* %x121;
    f32 %154 = load f32* %x11;
    f32 %155 = load f32* %x111;
    f32 %156 = load f32* %x381;
    f32 %157 = load f32* %x61;
    i32 %158 = load i32* %i71;
    f32 %159 = load f32* %x321;
    i32 %160 = load i32* %i101;
    i32 %161 = load i32* %i131;
    f32 %162 = load f32* %x201;
    f32 %163 = load f32* %x331;
    f32 %164 = load f32* %x231;
    f32 %165 = load f32* %x91;
    f32 %166 = load f32* %x251;
    i32 %167 = load i32* %i81;
    f32 %168 = load f32* %x391;
    i32 %169 = load i32* %i171;
    f32 %170 = load f32* %x211;
    f32 %171 = load f32* %x161;
    f32 %172 = load f32* %x51;
    f32 %173 = load f32* %x341;
    i32 %174 = load i32* %i181;
    i32 %175 = load i32* %i91;
    f32 %176 = load f32* %x141;
    f32 %177 = load f32* %x101;
    f32 %178 = load f32* %x01;
    i32 %179 = load i32* %i121;
    f32 %180 = load f32* %x311;
    i32 %181 = load i32* %i111;
    i32 %182 = load i32* %i161;
    f32 %183 = load f32* %x271;
    f32 %184 = load f32* %x241;
    f32 %185 = load f32* %x131;
    f32 %186 = load f32* %x291;
    i32 %187 = load i32* %i31;
    i32 %188 = load i32* %i211;
    i32 %189 = load i32* %i201;
    f32 %190 = load f32* %x181;
    f32 %191 = load f32* %x191;
    f32 %192 = load f32* %x221;
    f32 %193 = load f32* %x261;
    f32 %194 = load f32* %x361;
    f32 %195 = load f32* %x171;
    i32 %196 = load i32* %i151;
    f32 %197 = load f32* %x21;
    i32 %198 = load i32* %i141;
    f32 %199 = load f32* %x351;
    f32 %200 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32) -> f32 @params_f40_i24(i32 %136, i32 %137, i32 %138, f32 %139, i32 %140, i32 %141, i32 %142, f32 %143, f32 %144, f32 %145, i32 %146, f32 %147, f32 %148, i32 %149, f32 %150, i32 %151, f32 %152, f32 %153, f32 %154, f32 %155, f32 %156, f32 %157, i32 %158, f32 %159, i32 %160, i32 %161, f32 %162, f32 %163, f32 %164, f32 %165, f32 %166, i32 %167, f32 %168, i32 %169, f32 %170, f32 %171, f32 %172, f32 %173, i32 %174, i32 %175, f32 %176, f32 %177, f32 %178, i32 %179, f32 %180, i32 %181, i32 %182, f32 %183, f32 %184, f32 %185, f32 %186, i32 %187, i32 %188, i32 %189, f32 %190, f32 %191, f32 %192, f32 %193, f32 %194, f32 %195, i32 %196, f32 %197, i32 %198, f32 %199);
    ret f32 %200;
^while.header:
    i32 %201 = load i32* %i;
    i1 %202 = scmp lt i32 %201, i32 8;
    i32 %203 = zext i1 %202 to i32;
    i1 %204 = scmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %205 = load i32* %i;
    i64 %206 = sext i32 %205 to i64;
    i32* %207 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 %206];
    i32 %208 = load i32* %i;
    i64 %209 = sext i32 %208 to i64;
    i32* %210 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 %209];
    i32 %211 = load i32* %210;
    i32 %212 = load i32* %i;
    i64 %213 = sext i32 %212 to i64;
    f32* %214 = getelementptr &([10 * f32]* %arr)[i64 0][i64 %213];
    f32 %215 = load f32* %214;
    f32 %216 = s2f i32 %211 to f32;
    f32 %217 = fsub f32 %216, f32 %215;
    i32 %218 = f2s f32 %217 to i32;
    store i32* %207 with i32 %218;
    i32 %219 = load i32* %i;
    i32 %220 = add i32 %219, i32 1;
    store i32* %i with i32 %220;
    ubr ^while.header;
^b:
    i32 %221 = load i32* @k;
    i64 %222 = sext i32 %221 to i64;
    i32* %223 = getelementptr &([8 * i32]* %arr2)[i64 0][i64 %222];
    i32 %224 = load i32* %223;
    f32 %225 = s2f i32 %224 to f32;
    ret f32 %225;
^b1:
    unreachable;
}
internal func @params_fa40(f32* %x0, f32* %x1, f32* %x2, f32* %x3, f32* %x4, f32* %x5, f32* %x6, f32* %x7, f32* %x8, f32* %x9, f32* %x10, f32* %x11, f32* %x12, f32* %x13, f32* %x14, f32* %x15, f32* %x16, f32* %x17, f32* %x18, f32* %x19, f32* %x20, f32* %x21, f32* %x22, f32* %x23, f32* %x24, f32* %x25, f32* %x26, f32* %x27, f32* %x28, f32* %x29, f32* %x30, f32* %x31, f32* %x32, f32* %x33, f32* %x34, f32* %x35, f32* %x36, f32* %x37, f32* %x38, f32* %x39) -> f32 {
^entry:
    [10 * f32]* %arr = alloc [10 * f32];
    f32** %x391 = alloc f32*;
    f32** %x381 = alloc f32*;
    f32** %x371 = alloc f32*;
    f32** %x361 = alloc f32*;
    f32** %x351 = alloc f32*;
    f32** %x341 = alloc f32*;
    f32** %x331 = alloc f32*;
    f32** %x321 = alloc f32*;
    f32** %x311 = alloc f32*;
    f32** %x301 = alloc f32*;
    f32** %x291 = alloc f32*;
    f32** %x281 = alloc f32*;
    f32** %x271 = alloc f32*;
    f32** %x261 = alloc f32*;
    f32** %x251 = alloc f32*;
    f32** %x241 = alloc f32*;
    f32** %x231 = alloc f32*;
    f32** %x221 = alloc f32*;
    f32** %x211 = alloc f32*;
    f32** %x201 = alloc f32*;
    f32** %x191 = alloc f32*;
    f32** %x181 = alloc f32*;
    f32** %x171 = alloc f32*;
    f32** %x161 = alloc f32*;
    f32** %x151 = alloc f32*;
    f32** %x141 = alloc f32*;
    f32** %x131 = alloc f32*;
    f32** %x121 = alloc f32*;
    f32** %x111 = alloc f32*;
    f32** %x101 = alloc f32*;
    f32** %x91 = alloc f32*;
    f32** %x81 = alloc f32*;
    f32** %x71 = alloc f32*;
    f32** %x61 = alloc f32*;
    f32** %x51 = alloc f32*;
    f32** %x41 = alloc f32*;
    f32** %x31 = alloc f32*;
    f32** %x21 = alloc f32*;
    f32** %x11 = alloc f32*;
    f32** %x01 = alloc f32*;
    store f32** %x01 with f32* %x0;
    store f32** %x11 with f32* %x1;
    store f32** %x21 with f32* %x2;
    store f32** %x31 with f32* %x3;
    store f32** %x41 with f32* %x4;
    store f32** %x51 with f32* %x5;
    store f32** %x61 with f32* %x6;
    store f32** %x71 with f32* %x7;
    store f32** %x81 with f32* %x8;
    store f32** %x91 with f32* %x9;
    store f32** %x101 with f32* %x10;
    store f32** %x111 with f32* %x11;
    store f32** %x121 with f32* %x12;
    store f32** %x131 with f32* %x13;
    store f32** %x141 with f32* %x14;
    store f32** %x151 with f32* %x15;
    store f32** %x161 with f32* %x16;
    store f32** %x171 with f32* %x17;
    store f32** %x181 with f32* %x18;
    store f32** %x191 with f32* %x19;
    store f32** %x201 with f32* %x20;
    store f32** %x211 with f32* %x21;
    store f32** %x221 with f32* %x22;
    store f32** %x231 with f32* %x23;
    store f32** %x241 with f32* %x24;
    store f32** %x251 with f32* %x25;
    store f32** %x261 with f32* %x26;
    store f32** %x271 with f32* %x27;
    store f32** %x281 with f32* %x28;
    store f32** %x291 with f32* %x29;
    store f32** %x301 with f32* %x30;
    store f32** %x311 with f32* %x31;
    store f32** %x321 with f32* %x32;
    store f32** %x331 with f32* %x33;
    store f32** %x341 with f32* %x34;
    store f32** %x351 with f32* %x35;
    store f32** %x361 with f32* %x36;
    store f32** %x371 with f32* %x37;
    store f32** %x381 with f32* %x38;
    store f32** %x391 with f32* %x39;
    i32 %0 = load i32* @k;
    i64 %1 = sext i32 %0 to i64;
    f32* %2 = load f32** %x01;
    f32* %3 = getelementptr &(f32* %2)[i64 %1];
    f32 %4 = load f32* %3;
    i32 %5 = load i32* @k;
    i64 %6 = sext i32 %5 to i64;
    f32* %7 = load f32** %x11;
    f32* %8 = getelementptr &(f32* %7)[i64 %6];
    f32 %9 = load f32* %8;
    f32 %10 = fadd f32 %4, f32 %9;
    i32 %11 = load i32* @k;
    i64 %12 = sext i32 %11 to i64;
    f32* %13 = load f32** %x21;
    f32* %14 = getelementptr &(f32* %13)[i64 %12];
    f32 %15 = load f32* %14;
    f32 %16 = fadd f32 %10, f32 %15;
    i32 %17 = load i32* @k;
    i64 %18 = sext i32 %17 to i64;
    f32* %19 = load f32** %x31;
    f32* %20 = getelementptr &(f32* %19)[i64 %18];
    f32 %21 = load f32* %20;
    f32 %22 = fadd f32 %16, f32 %21;
    f32* %23 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %23 with f32 %22;
    i32 %24 = load i32* @k;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = load f32** %x41;
    f32* %27 = getelementptr &(f32* %26)[i64 %25];
    f32 %28 = load f32* %27;
    i32 %29 = load i32* @k;
    i64 %30 = sext i32 %29 to i64;
    f32* %31 = load f32** %x51;
    f32* %32 = getelementptr &(f32* %31)[i64 %30];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %28, f32 %33;
    i32 %35 = load i32* @k;
    i64 %36 = sext i32 %35 to i64;
    f32* %37 = load f32** %x61;
    f32* %38 = getelementptr &(f32* %37)[i64 %36];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %34, f32 %39;
    i32 %41 = load i32* @k;
    i64 %42 = sext i32 %41 to i64;
    f32* %43 = load f32** %x71;
    f32* %44 = getelementptr &(f32* %43)[i64 %42];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %40, f32 %45;
    f32* %47 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %47 with f32 %46;
    i32 %48 = load i32* @k;
    i64 %49 = sext i32 %48 to i64;
    f32* %50 = load f32** %x81;
    f32* %51 = getelementptr &(f32* %50)[i64 %49];
    f32 %52 = load f32* %51;
    i32 %53 = load i32* @k;
    i64 %54 = sext i32 %53 to i64;
    f32* %55 = load f32** %x91;
    f32* %56 = getelementptr &(f32* %55)[i64 %54];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %52, f32 %57;
    i32 %59 = load i32* @k;
    i64 %60 = sext i32 %59 to i64;
    f32* %61 = load f32** %x101;
    f32* %62 = getelementptr &(f32* %61)[i64 %60];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %58, f32 %63;
    i32 %65 = load i32* @k;
    i64 %66 = sext i32 %65 to i64;
    f32* %67 = load f32** %x111;
    f32* %68 = getelementptr &(f32* %67)[i64 %66];
    f32 %69 = load f32* %68;
    f32 %70 = fadd f32 %64, f32 %69;
    f32* %71 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %71 with f32 %70;
    i32 %72 = load i32* @k;
    i64 %73 = sext i32 %72 to i64;
    f32* %74 = load f32** %x121;
    f32* %75 = getelementptr &(f32* %74)[i64 %73];
    f32 %76 = load f32* %75;
    i32 %77 = load i32* @k;
    i64 %78 = sext i32 %77 to i64;
    f32* %79 = load f32** %x131;
    f32* %80 = getelementptr &(f32* %79)[i64 %78];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %76, f32 %81;
    i32 %83 = load i32* @k;
    i64 %84 = sext i32 %83 to i64;
    f32* %85 = load f32** %x141;
    f32* %86 = getelementptr &(f32* %85)[i64 %84];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %82, f32 %87;
    i32 %89 = load i32* @k;
    i64 %90 = sext i32 %89 to i64;
    f32* %91 = load f32** %x151;
    f32* %92 = getelementptr &(f32* %91)[i64 %90];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %88, f32 %93;
    f32* %95 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %95 with f32 %94;
    i32 %96 = load i32* @k;
    i64 %97 = sext i32 %96 to i64;
    f32* %98 = load f32** %x161;
    f32* %99 = getelementptr &(f32* %98)[i64 %97];
    f32 %100 = load f32* %99;
    i32 %101 = load i32* @k;
    i64 %102 = sext i32 %101 to i64;
    f32* %103 = load f32** %x171;
    f32* %104 = getelementptr &(f32* %103)[i64 %102];
    f32 %105 = load f32* %104;
    f32 %106 = fadd f32 %100, f32 %105;
    i32 %107 = load i32* @k;
    i64 %108 = sext i32 %107 to i64;
    f32* %109 = load f32** %x181;
    f32* %110 = getelementptr &(f32* %109)[i64 %108];
    f32 %111 = load f32* %110;
    f32 %112 = fadd f32 %106, f32 %111;
    i32 %113 = load i32* @k;
    i64 %114 = sext i32 %113 to i64;
    f32* %115 = load f32** %x191;
    f32* %116 = getelementptr &(f32* %115)[i64 %114];
    f32 %117 = load f32* %116;
    f32 %118 = fadd f32 %112, f32 %117;
    f32* %119 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %119 with f32 %118;
    i32 %120 = load i32* @k;
    i64 %121 = sext i32 %120 to i64;
    f32* %122 = load f32** %x201;
    f32* %123 = getelementptr &(f32* %122)[i64 %121];
    f32 %124 = load f32* %123;
    i32 %125 = load i32* @k;
    i64 %126 = sext i32 %125 to i64;
    f32* %127 = load f32** %x211;
    f32* %128 = getelementptr &(f32* %127)[i64 %126];
    f32 %129 = load f32* %128;
    f32 %130 = fadd f32 %124, f32 %129;
    i32 %131 = load i32* @k;
    i64 %132 = sext i32 %131 to i64;
    f32* %133 = load f32** %x221;
    f32* %134 = getelementptr &(f32* %133)[i64 %132];
    f32 %135 = load f32* %134;
    f32 %136 = fadd f32 %130, f32 %135;
    i32 %137 = load i32* @k;
    i64 %138 = sext i32 %137 to i64;
    f32* %139 = load f32** %x231;
    f32* %140 = getelementptr &(f32* %139)[i64 %138];
    f32 %141 = load f32* %140;
    f32 %142 = fadd f32 %136, f32 %141;
    f32* %143 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %143 with f32 %142;
    i32 %144 = load i32* @k;
    i64 %145 = sext i32 %144 to i64;
    f32* %146 = load f32** %x241;
    f32* %147 = getelementptr &(f32* %146)[i64 %145];
    f32 %148 = load f32* %147;
    i32 %149 = load i32* @k;
    i64 %150 = sext i32 %149 to i64;
    f32* %151 = load f32** %x251;
    f32* %152 = getelementptr &(f32* %151)[i64 %150];
    f32 %153 = load f32* %152;
    f32 %154 = fadd f32 %148, f32 %153;
    i32 %155 = load i32* @k;
    i64 %156 = sext i32 %155 to i64;
    f32* %157 = load f32** %x261;
    f32* %158 = getelementptr &(f32* %157)[i64 %156];
    f32 %159 = load f32* %158;
    f32 %160 = fadd f32 %154, f32 %159;
    i32 %161 = load i32* @k;
    i64 %162 = sext i32 %161 to i64;
    f32* %163 = load f32** %x271;
    f32* %164 = getelementptr &(f32* %163)[i64 %162];
    f32 %165 = load f32* %164;
    f32 %166 = fadd f32 %160, f32 %165;
    f32* %167 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %167 with f32 %166;
    i32 %168 = load i32* @k;
    i64 %169 = sext i32 %168 to i64;
    f32* %170 = load f32** %x281;
    f32* %171 = getelementptr &(f32* %170)[i64 %169];
    f32 %172 = load f32* %171;
    i32 %173 = load i32* @k;
    i64 %174 = sext i32 %173 to i64;
    f32* %175 = load f32** %x291;
    f32* %176 = getelementptr &(f32* %175)[i64 %174];
    f32 %177 = load f32* %176;
    f32 %178 = fadd f32 %172, f32 %177;
    i32 %179 = load i32* @k;
    i64 %180 = sext i32 %179 to i64;
    f32* %181 = load f32** %x301;
    f32* %182 = getelementptr &(f32* %181)[i64 %180];
    f32 %183 = load f32* %182;
    f32 %184 = fadd f32 %178, f32 %183;
    i32 %185 = load i32* @k;
    i64 %186 = sext i32 %185 to i64;
    f32* %187 = load f32** %x311;
    f32* %188 = getelementptr &(f32* %187)[i64 %186];
    f32 %189 = load f32* %188;
    f32 %190 = fadd f32 %184, f32 %189;
    f32* %191 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %191 with f32 %190;
    i32 %192 = load i32* @k;
    i64 %193 = sext i32 %192 to i64;
    f32* %194 = load f32** %x321;
    f32* %195 = getelementptr &(f32* %194)[i64 %193];
    f32 %196 = load f32* %195;
    i32 %197 = load i32* @k;
    i64 %198 = sext i32 %197 to i64;
    f32* %199 = load f32** %x331;
    f32* %200 = getelementptr &(f32* %199)[i64 %198];
    f32 %201 = load f32* %200;
    f32 %202 = fadd f32 %196, f32 %201;
    i32 %203 = load i32* @k;
    i64 %204 = sext i32 %203 to i64;
    f32* %205 = load f32** %x341;
    f32* %206 = getelementptr &(f32* %205)[i64 %204];
    f32 %207 = load f32* %206;
    f32 %208 = fadd f32 %202, f32 %207;
    i32 %209 = load i32* @k;
    i64 %210 = sext i32 %209 to i64;
    f32* %211 = load f32** %x351;
    f32* %212 = getelementptr &(f32* %211)[i64 %210];
    f32 %213 = load f32* %212;
    f32 %214 = fadd f32 %208, f32 %213;
    f32* %215 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %215 with f32 %214;
    i32 %216 = load i32* @k;
    i64 %217 = sext i32 %216 to i64;
    f32* %218 = load f32** %x361;
    f32* %219 = getelementptr &(f32* %218)[i64 %217];
    f32 %220 = load f32* %219;
    i32 %221 = load i32* @k;
    i64 %222 = sext i32 %221 to i64;
    f32* %223 = load f32** %x371;
    f32* %224 = getelementptr &(f32* %223)[i64 %222];
    f32 %225 = load f32* %224;
    f32 %226 = fadd f32 %220, f32 %225;
    i32 %227 = load i32* @k;
    i64 %228 = sext i32 %227 to i64;
    f32* %229 = load f32** %x381;
    f32* %230 = getelementptr &(f32* %229)[i64 %228];
    f32 %231 = load f32* %230;
    f32 %232 = fadd f32 %226, f32 %231;
    i32 %233 = load i32* @k;
    i64 %234 = sext i32 %233 to i64;
    f32* %235 = load f32** %x391;
    f32* %236 = getelementptr &(f32* %235)[i64 %234];
    f32 %237 = load f32* %236;
    f32 %238 = fadd f32 %232, f32 %237;
    f32* %239 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %239 with f32 %238;
    f32* %240 = getelementptr &([10 * f32]* %arr)[i64 1][i64 0];
    i32 %241 = load i32* @k;
    i64 %242 = sext i32 %241 to i64;
    f32* %243 = load f32** %x391;
    f32* %244 = getelementptr &(f32* %243)[i64 %242];
    f32 %245 = load f32* %244;
    i1 %246 = fcmp neq f32 %245, f32 0;
    i32 %247 = zext i1 %246 to i32;
    i1 %248 = scmp neq i32 %247, i32 0;
    i32 %249 = zext i1 %248 to i32;
    f32 %250 = s2f i32 %249 to f32;
    i1 %251 = fcmp neq f32 %250, f32 0;
    i32 %252 = zext i1 %251 to i32;
    f32 %253 = s2f i32 %252 to f32;
    i1 %254 = fcmp neq f32 %253, f32 0;
    i32 %255 = zext i1 %254 to i32;
    i1 %256 = scmp neq i32 %255, i32 0;
    cbr i1 %256(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32* %257 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 10, f32* %257);
    i32 %258 = load i32* @k;
    i64 %259 = sext i32 %258 to i64;
    f32* %260 = getelementptr &([10 * f32]* %arr)[i64 0][i64 %259];
    f32 %261 = load f32* %260;
    ret f32 %261;
^if.else:
    f32* %262 = load f32** %x11;
    f32* %263 = load f32** %x21;
    f32* %264 = load f32** %x31;
    f32* %265 = load f32** %x41;
    f32* %266 = load f32** %x51;
    f32* %267 = load f32** %x61;
    f32* %268 = load f32** %x71;
    f32* %269 = load f32** %x81;
    f32* %270 = load f32** %x91;
    f32* %271 = load f32** %x101;
    f32* %272 = load f32** %x111;
    f32* %273 = load f32** %x121;
    f32* %274 = load f32** %x131;
    f32* %275 = load f32** %x141;
    f32* %276 = load f32** %x151;
    f32* %277 = load f32** %x161;
    f32* %278 = load f32** %x171;
    f32* %279 = load f32** %x181;
    f32* %280 = load f32** %x191;
    f32* %281 = load f32** %x201;
    f32* %282 = load f32** %x211;
    f32* %283 = load f32** %x221;
    f32* %284 = load f32** %x231;
    f32* %285 = load f32** %x241;
    f32* %286 = load f32** %x251;
    f32* %287 = load f32** %x261;
    f32* %288 = load f32** %x271;
    f32* %289 = load f32** %x281;
    f32* %290 = load f32** %x291;
    f32* %291 = load f32** %x301;
    f32* %292 = load f32** %x311;
    f32* %293 = load f32** %x321;
    f32* %294 = load f32** %x331;
    f32* %295 = load f32** %x341;
    f32* %296 = load f32** %x351;
    f32* %297 = load f32** %x361;
    f32* %298 = load f32** %x371;
    f32* %299 = load f32** %x381;
    f32* %300 = load f32** %x391;
    f32* %301 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    f32 %302 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*) -> f32 @params_fa40(f32* %262, f32* %263, f32* %264, f32* %265, f32* %266, f32* %267, f32* %268, f32* %269, f32* %270, f32* %271, f32* %272, f32* %273, f32* %274, f32* %275, f32* %276, f32* %277, f32* %278, f32* %279, f32* %280, f32* %281, f32* %282, f32* %283, f32* %284, f32* %285, f32* %286, f32* %287, f32* %288, f32* %289, f32* %290, f32* %291, f32* %292, f32* %293, f32* %294, f32* %295, f32* %296, f32* %297, f32* %298, f32* %299, f32* %300, f32* %301);
    ret f32 %302;
^b:
    unreachable;
}
internal func @params_mix(f32 %x0, i32* %i1, i32 %i2, f32* %x3, f32 %x4, i32 %i5, f32 %x6, f32 %x7, f32* %x8, i32* %i9, i32 %i10, i32 %i11, f32* %x12, i32* %i13, i32* %i14, i32 %i15, f32* %x16, f32* %x17, f32 %x18, f32 %x19, f32 %x20, f32* %x21, i32 %i22, f32 %x23, f32 %x24, f32 %x25, i32* %i26, f32* %x27, i32* %i28, i32* %i29, f32* %x30, f32 %x31, f32 %x32, i32* %i33, i32 %i34, f32* %x35, f32* %x36, f32 %x37, f32 %x38, i32* %i39, i32* %i40, i32 %i41, i32 %i42, f32 %x43, f32 %x44, i32* %i45, i32 %i46, f32* %x47, i32 %i48, i32* %i49, i32* %i50, f32 %x51, f32 %x52, f32* %x53, i32 %i54, i32* %i55, f32* %x56, f32 %x57, i32 %i58, f32 %x59, f32* %x60, f32* %x61, f32 %x62, i32 %i63) -> i32 {
^entry:
    i32* %i = alloc i32;
    [10 * i32]* %arr2 = alloc [10 * i32];
    [10 * f32]* %arr = alloc [10 * f32];
    i32* %i631 = alloc i32;
    f32* %x621 = alloc f32;
    f32** %x611 = alloc f32*;
    f32** %x601 = alloc f32*;
    f32* %x591 = alloc f32;
    i32* %i581 = alloc i32;
    f32* %x571 = alloc f32;
    f32** %x561 = alloc f32*;
    i32** %i551 = alloc i32*;
    i32* %i541 = alloc i32;
    f32** %x531 = alloc f32*;
    f32* %x521 = alloc f32;
    f32* %x511 = alloc f32;
    i32** %i501 = alloc i32*;
    i32** %i491 = alloc i32*;
    i32* %i481 = alloc i32;
    f32** %x471 = alloc f32*;
    i32* %i461 = alloc i32;
    i32** %i451 = alloc i32*;
    f32* %x441 = alloc f32;
    f32* %x431 = alloc f32;
    i32* %i421 = alloc i32;
    i32* %i411 = alloc i32;
    i32** %i401 = alloc i32*;
    i32** %i391 = alloc i32*;
    f32* %x381 = alloc f32;
    f32* %x371 = alloc f32;
    f32** %x361 = alloc f32*;
    f32** %x351 = alloc f32*;
    i32* %i341 = alloc i32;
    i32** %i331 = alloc i32*;
    f32* %x321 = alloc f32;
    f32* %x311 = alloc f32;
    f32** %x301 = alloc f32*;
    i32** %i291 = alloc i32*;
    i32** %i281 = alloc i32*;
    f32** %x271 = alloc f32*;
    i32** %i261 = alloc i32*;
    f32* %x251 = alloc f32;
    f32* %x241 = alloc f32;
    f32* %x231 = alloc f32;
    i32* %i221 = alloc i32;
    f32** %x211 = alloc f32*;
    f32* %x201 = alloc f32;
    f32* %x191 = alloc f32;
    f32* %x181 = alloc f32;
    f32** %x171 = alloc f32*;
    f32** %x161 = alloc f32*;
    i32* %i151 = alloc i32;
    i32** %i141 = alloc i32*;
    i32** %i131 = alloc i32*;
    f32** %x121 = alloc f32*;
    i32* %i111 = alloc i32;
    i32* %i101 = alloc i32;
    i32** %i91 = alloc i32*;
    f32** %x81 = alloc f32*;
    f32* %x71 = alloc f32;
    f32* %x61 = alloc f32;
    i32* %i51 = alloc i32;
    f32* %x41 = alloc f32;
    f32** %x31 = alloc f32*;
    i32* %i21 = alloc i32;
    i32** %i11 = alloc i32*;
    f32* %x01 = alloc f32;
    store f32* %x01 with f32 %x0;
    store i32** %i11 with i32* %i1;
    store i32* %i21 with i32 %i2;
    store f32** %x31 with f32* %x3;
    store f32* %x41 with f32 %x4;
    store i32* %i51 with i32 %i5;
    store f32* %x61 with f32 %x6;
    store f32* %x71 with f32 %x7;
    store f32** %x81 with f32* %x8;
    store i32** %i91 with i32* %i9;
    store i32* %i101 with i32 %i10;
    store i32* %i111 with i32 %i11;
    store f32** %x121 with f32* %x12;
    store i32** %i131 with i32* %i13;
    store i32** %i141 with i32* %i14;
    store i32* %i151 with i32 %i15;
    store f32** %x161 with f32* %x16;
    store f32** %x171 with f32* %x17;
    store f32* %x181 with f32 %x18;
    store f32* %x191 with f32 %x19;
    store f32* %x201 with f32 %x20;
    store f32** %x211 with f32* %x21;
    store i32* %i221 with i32 %i22;
    store f32* %x231 with f32 %x23;
    store f32* %x241 with f32 %x24;
    store f32* %x251 with f32 %x25;
    store i32** %i261 with i32* %i26;
    store f32** %x271 with f32* %x27;
    store i32** %i281 with i32* %i28;
    store i32** %i291 with i32* %i29;
    store f32** %x301 with f32* %x30;
    store f32* %x311 with f32 %x31;
    store f32* %x321 with f32 %x32;
    store i32** %i331 with i32* %i33;
    store i32* %i341 with i32 %i34;
    store f32** %x351 with f32* %x35;
    store f32** %x361 with f32* %x36;
    store f32* %x371 with f32 %x37;
    store f32* %x381 with f32 %x38;
    store i32** %i391 with i32* %i39;
    store i32** %i401 with i32* %i40;
    store i32* %i411 with i32 %i41;
    store i32* %i421 with i32 %i42;
    store f32* %x431 with f32 %x43;
    store f32* %x441 with f32 %x44;
    store i32** %i451 with i32* %i45;
    store i32* %i461 with i32 %i46;
    store f32** %x471 with f32* %x47;
    store i32* %i481 with i32 %i48;
    store i32** %i491 with i32* %i49;
    store i32** %i501 with i32* %i50;
    store f32* %x511 with f32 %x51;
    store f32* %x521 with f32 %x52;
    store f32** %x531 with f32* %x53;
    store i32* %i541 with i32 %i54;
    store i32** %i551 with i32* %i55;
    store f32** %x561 with f32* %x56;
    store f32* %x571 with f32 %x57;
    store i32* %i581 with i32 %i58;
    store f32* %x591 with f32 %x59;
    store f32** %x601 with f32* %x60;
    store f32** %x611 with f32* %x61;
    store f32* %x621 with f32 %x62;
    store i32* %i631 with i32 %i63;
    f32 %0 = load f32* %x01;
    i32 %1 = load i32* @k;
    i64 %2 = sext i32 %1 to i64;
    f32* %3 = load f32** %x31;
    f32* %4 = getelementptr &(f32* %3)[i64 %2];
    f32 %5 = load f32* %4;
    f32 %6 = fadd f32 %0, f32 %5;
    f32 %7 = load f32* %x41;
    f32 %8 = fadd f32 %6, f32 %7;
    f32 %9 = load f32* %x61;
    f32 %10 = fadd f32 %8, f32 %9;
    f32* %11 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    store f32* %11 with f32 %10;
    f32 %12 = load f32* %x71;
    i32 %13 = load i32* @k;
    i64 %14 = sext i32 %13 to i64;
    f32* %15 = load f32** %x81;
    f32* %16 = getelementptr &(f32* %15)[i64 %14];
    f32 %17 = load f32* %16;
    f32 %18 = fadd f32 %12, f32 %17;
    i32 %19 = load i32* @k;
    i64 %20 = sext i32 %19 to i64;
    f32* %21 = load f32** %x121;
    f32* %22 = getelementptr &(f32* %21)[i64 %20];
    f32 %23 = load f32* %22;
    f32 %24 = fadd f32 %18, f32 %23;
    i32 %25 = load i32* @k;
    i64 %26 = sext i32 %25 to i64;
    f32* %27 = load f32** %x161;
    f32* %28 = getelementptr &(f32* %27)[i64 %26];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %24, f32 %29;
    f32* %31 = getelementptr &([10 * f32]* %arr)[i64 0][i64 1];
    store f32* %31 with f32 %30;
    i32 %32 = load i32* @k;
    i64 %33 = sext i32 %32 to i64;
    f32* %34 = load f32** %x171;
    f32* %35 = getelementptr &(f32* %34)[i64 %33];
    f32 %36 = load f32* %35;
    f32 %37 = load f32* %x181;
    f32 %38 = fadd f32 %36, f32 %37;
    f32 %39 = load f32* %x191;
    f32 %40 = fadd f32 %38, f32 %39;
    f32 %41 = load f32* %x201;
    f32 %42 = fadd f32 %40, f32 %41;
    f32* %43 = getelementptr &([10 * f32]* %arr)[i64 0][i64 2];
    store f32* %43 with f32 %42;
    i32 %44 = load i32* @k;
    i64 %45 = sext i32 %44 to i64;
    f32* %46 = load f32** %x211;
    f32* %47 = getelementptr &(f32* %46)[i64 %45];
    f32 %48 = load f32* %47;
    f32 %49 = load f32* %x231;
    f32 %50 = fadd f32 %48, f32 %49;
    f32 %51 = load f32* %x241;
    f32 %52 = fadd f32 %50, f32 %51;
    f32 %53 = load f32* %x251;
    f32 %54 = fadd f32 %52, f32 %53;
    f32* %55 = getelementptr &([10 * f32]* %arr)[i64 0][i64 3];
    store f32* %55 with f32 %54;
    i32 %56 = load i32* @k;
    i64 %57 = sext i32 %56 to i64;
    f32* %58 = load f32** %x271;
    f32* %59 = getelementptr &(f32* %58)[i64 %57];
    f32 %60 = load f32* %59;
    i32 %61 = load i32* @k;
    i64 %62 = sext i32 %61 to i64;
    f32* %63 = load f32** %x301;
    f32* %64 = getelementptr &(f32* %63)[i64 %62];
    f32 %65 = load f32* %64;
    f32 %66 = fadd f32 %60, f32 %65;
    f32 %67 = load f32* %x311;
    f32 %68 = fadd f32 %66, f32 %67;
    f32 %69 = load f32* %x321;
    f32 %70 = fadd f32 %68, f32 %69;
    f32* %71 = getelementptr &([10 * f32]* %arr)[i64 0][i64 4];
    store f32* %71 with f32 %70;
    i32 %72 = load i32* @k;
    i64 %73 = sext i32 %72 to i64;
    f32* %74 = load f32** %x351;
    f32* %75 = getelementptr &(f32* %74)[i64 %73];
    f32 %76 = load f32* %75;
    i32 %77 = load i32* @k;
    i64 %78 = sext i32 %77 to i64;
    f32* %79 = load f32** %x361;
    f32* %80 = getelementptr &(f32* %79)[i64 %78];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %76, f32 %81;
    f32 %83 = load f32* %x371;
    f32 %84 = fadd f32 %82, f32 %83;
    f32 %85 = load f32* %x381;
    f32 %86 = fadd f32 %84, f32 %85;
    f32* %87 = getelementptr &([10 * f32]* %arr)[i64 0][i64 5];
    store f32* %87 with f32 %86;
    f32 %88 = load f32* %x431;
    f32 %89 = load f32* %x441;
    f32 %90 = fadd f32 %88, f32 %89;
    i32 %91 = load i32* @k;
    i64 %92 = sext i32 %91 to i64;
    f32* %93 = load f32** %x471;
    f32* %94 = getelementptr &(f32* %93)[i64 %92];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %90, f32 %95;
    f32 %97 = load f32* %x511;
    f32 %98 = fadd f32 %96, f32 %97;
    f32* %99 = getelementptr &([10 * f32]* %arr)[i64 0][i64 6];
    store f32* %99 with f32 %98;
    f32 %100 = load f32* %x521;
    i32 %101 = load i32* @k;
    i64 %102 = sext i32 %101 to i64;
    f32* %103 = load f32** %x531;
    f32* %104 = getelementptr &(f32* %103)[i64 %102];
    f32 %105 = load f32* %104;
    f32 %106 = fadd f32 %100, f32 %105;
    i32 %107 = load i32* @k;
    i64 %108 = sext i32 %107 to i64;
    f32* %109 = load f32** %x561;
    f32* %110 = getelementptr &(f32* %109)[i64 %108];
    f32 %111 = load f32* %110;
    f32 %112 = fadd f32 %106, f32 %111;
    f32 %113 = load f32* %x571;
    f32 %114 = fadd f32 %112, f32 %113;
    f32* %115 = getelementptr &([10 * f32]* %arr)[i64 0][i64 7];
    store f32* %115 with f32 %114;
    f32 %116 = load f32* %x591;
    i32 %117 = load i32* @k;
    i64 %118 = sext i32 %117 to i64;
    f32* %119 = load f32** %x601;
    f32* %120 = getelementptr &(f32* %119)[i64 %118];
    f32 %121 = load f32* %120;
    f32 %122 = fadd f32 %116, f32 %121;
    i32 %123 = load i32* @k;
    i64 %124 = sext i32 %123 to i64;
    f32* %125 = load f32** %x611;
    f32* %126 = getelementptr &(f32* %125)[i64 %124];
    f32 %127 = load f32* %126;
    f32 %128 = fadd f32 %122, f32 %127;
    f32 %129 = load f32* %x621;
    f32 %130 = fadd f32 %128, f32 %129;
    f32* %131 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    store f32* %131 with f32 %130;
    f32* %132 = getelementptr &([10 * f32]* %arr)[i64 1][i64 0];
    f32* %133 = getelementptr &([10 * f32]* %arr)[i64 0][i64 9];
    store f32* %133 with f32 0;
    i32 %134 = load i32* @k;
    i64 %135 = sext i32 %134 to i64;
    i32* %136 = load i32** %i11;
    i32* %137 = getelementptr &(i32* %136)[i64 %135];
    i32 %138 = load i32* %137;
    i32 %139 = load i32* %i21;
    i32 %140 = add i32 %138, i32 %139;
    i32 %141 = load i32* %i51;
    i32 %142 = add i32 %140, i32 %141;
    i32* %143 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 0];
    store i32* %143 with i32 %142;
    i32 %144 = load i32* @k;
    i64 %145 = sext i32 %144 to i64;
    i32* %146 = load i32** %i91;
    i32* %147 = getelementptr &(i32* %146)[i64 %145];
    i32 %148 = load i32* %147;
    i32 %149 = load i32* %i101;
    i32 %150 = add i32 %148, i32 %149;
    i32 %151 = load i32* %i111;
    i32 %152 = add i32 %150, i32 %151;
    i32* %153 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 1];
    store i32* %153 with i32 %152;
    i32 %154 = load i32* @k;
    i64 %155 = sext i32 %154 to i64;
    i32* %156 = load i32** %i131;
    i32* %157 = getelementptr &(i32* %156)[i64 %155];
    i32 %158 = load i32* %157;
    i32 %159 = load i32* @k;
    i64 %160 = sext i32 %159 to i64;
    i32* %161 = load i32** %i141;
    i32* %162 = getelementptr &(i32* %161)[i64 %160];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %158, i32 %163;
    i32 %165 = load i32* %i151;
    i32 %166 = add i32 %164, i32 %165;
    i32* %167 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 2];
    store i32* %167 with i32 %166;
    i32 %168 = load i32* %i221;
    i32 %169 = load i32* @k;
    i64 %170 = sext i32 %169 to i64;
    i32* %171 = load i32** %i261;
    i32* %172 = getelementptr &(i32* %171)[i64 %170];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %168, i32 %173;
    i32 %175 = load i32* @k;
    i64 %176 = sext i32 %175 to i64;
    i32* %177 = load i32** %i281;
    i32* %178 = getelementptr &(i32* %177)[i64 %176];
    i32 %179 = load i32* %178;
    i32 %180 = add i32 %174, i32 %179;
    i32* %181 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 3];
    store i32* %181 with i32 %180;
    i32 %182 = load i32* @k;
    i64 %183 = sext i32 %182 to i64;
    i32* %184 = load i32** %i291;
    i32* %185 = getelementptr &(i32* %184)[i64 %183];
    i32 %186 = load i32* %185;
    i32 %187 = load i32* @k;
    i64 %188 = sext i32 %187 to i64;
    i32* %189 = load i32** %i331;
    i32* %190 = getelementptr &(i32* %189)[i64 %188];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %186, i32 %191;
    i32 %193 = load i32* %i341;
    i32 %194 = add i32 %192, i32 %193;
    i32* %195 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 4];
    store i32* %195 with i32 %194;
    i32 %196 = load i32* @k;
    i64 %197 = sext i32 %196 to i64;
    i32* %198 = load i32** %i391;
    i32* %199 = getelementptr &(i32* %198)[i64 %197];
    i32 %200 = load i32* %199;
    i32 %201 = load i32* @k;
    i64 %202 = sext i32 %201 to i64;
    i32* %203 = load i32** %i401;
    i32* %204 = getelementptr &(i32* %203)[i64 %202];
    i32 %205 = load i32* %204;
    i32 %206 = add i32 %200, i32 %205;
    i32 %207 = load i32* %i411;
    i32 %208 = add i32 %206, i32 %207;
    i32* %209 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 5];
    store i32* %209 with i32 %208;
    i32 %210 = load i32* %i421;
    i32 %211 = load i32* @k;
    i64 %212 = sext i32 %211 to i64;
    i32* %213 = load i32** %i451;
    i32* %214 = getelementptr &(i32* %213)[i64 %212];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %210, i32 %215;
    i32 %217 = load i32* %i461;
    i32 %218 = add i32 %216, i32 %217;
    i32* %219 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 6];
    store i32* %219 with i32 %218;
    i32 %220 = load i32* %i481;
    i32 %221 = load i32* @k;
    i64 %222 = sext i32 %221 to i64;
    i32* %223 = load i32** %i491;
    i32* %224 = getelementptr &(i32* %223)[i64 %222];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %220, i32 %225;
    i32 %227 = load i32* @k;
    i64 %228 = sext i32 %227 to i64;
    i32* %229 = load i32** %i501;
    i32* %230 = getelementptr &(i32* %229)[i64 %228];
    i32 %231 = load i32* %230;
    i32 %232 = add i32 %226, i32 %231;
    i32* %233 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 7];
    store i32* %233 with i32 %232;
    i32 %234 = load i32* %i541;
    i32 %235 = load i32* @k;
    i64 %236 = sext i32 %235 to i64;
    i32* %237 = load i32** %i551;
    i32* %238 = getelementptr &(i32* %237)[i64 %236];
    i32 %239 = load i32* %238;
    i32 %240 = add i32 %234, i32 %239;
    i32 %241 = load i32* %i581;
    i32 %242 = add i32 %240, i32 %241;
    i32 %243 = load i32* %i631;
    i32 %244 = add i32 %242, i32 %243;
    i32* %245 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 8];
    store i32* %245 with i32 %244;
    i32* %246 = getelementptr &([10 * i32]* %arr2)[i64 1][i64 0];
    i32* %247 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 9];
    store i32* %247 with i32 0;
    i32 %248 = load i32* %i631;
    i1 %249 = scmp neq i32 %248, i32 0;
    i32 %250 = zext i1 %249 to i32;
    i1 %251 = scmp neq i32 %250, i32 0;
    cbr i1 %251(prob = 0.5), ^if.then, ^if.else;
^if.then:
    f32* %252 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 10, f32* %252);
    i32* %253 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 10, i32* %253);
    store i32* %i with i32 0;
    ubr ^while.header;
^if.else:
    f32 %254 = load f32* %x01;
    i32* %255 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 0];
    i32 %256 = load i32* %i21;
    f32* %257 = getelementptr &([10 * f32]* %arr)[i64 0][i64 0];
    f32 %258 = load f32* %x41;
    i32 %259 = load i32* %i51;
    f32 %260 = load f32* %x61;
    f32 %261 = load f32* %x71;
    f32* %262 = load f32** %x81;
    i32* %263 = load i32** %i91;
    i32 %264 = load i32* %i101;
    i32 %265 = load i32* %i111;
    f32* %266 = load f32** %x121;
    i32* %267 = load i32** %i131;
    i32* %268 = load i32** %i141;
    i32 %269 = load i32* %i151;
    f32* %270 = load f32** %x161;
    f32* %271 = load f32** %x171;
    f32 %272 = load f32* %x181;
    f32 %273 = load f32* %x191;
    f32 %274 = load f32* %x201;
    f32* %275 = load f32** %x211;
    i32 %276 = load i32* %i221;
    f32 %277 = load f32* %x231;
    f32 %278 = load f32* %x241;
    f32 %279 = load f32* %x251;
    i32* %280 = load i32** %i261;
    f32* %281 = load f32** %x271;
    i32* %282 = load i32** %i281;
    i32* %283 = load i32** %i291;
    f32* %284 = load f32** %x301;
    f32 %285 = load f32* %x311;
    f32 %286 = load f32* %x321;
    i32* %287 = load i32** %i331;
    i32 %288 = load i32* %i341;
    f32* %289 = load f32** %x351;
    f32* %290 = load f32** %x361;
    f32 %291 = load f32* %x371;
    f32 %292 = load f32* %x381;
    i32* %293 = load i32** %i391;
    i32* %294 = load i32** %i401;
    i32 %295 = load i32* %i411;
    i32 %296 = load i32* %i421;
    f32 %297 = load f32* %x431;
    f32 %298 = load f32* %x441;
    i32* %299 = load i32** %i451;
    i32 %300 = load i32* %i461;
    f32* %301 = load f32** %x471;
    i32 %302 = load i32* %i481;
    i32* %303 = load i32** %i491;
    i32* %304 = load i32** %i501;
    f32 %305 = load f32* %x511;
    f32 %306 = load f32* %x521;
    f32* %307 = load f32** %x531;
    i32 %308 = load i32* %i541;
    i32* %309 = load i32** %i551;
    f32* %310 = load f32** %x561;
    f32 %311 = load f32* %x571;
    i32 %312 = load i32* %i581;
    f32 %313 = load f32* %x591;
    f32* %314 = load f32** %x601;
    f32* %315 = load f32** %x611;
    i32 %316 = load i32* %i631;
    f32 %317 = s2f i32 %316 to f32;
    f32 %318 = load f32* %x621;
    i32 %319 = f2s f32 %318 to i32;
    i32 %320 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32) -> i32 @params_mix(f32 %254, i32* %255, i32 %256, f32* %257, f32 %258, i32 %259, f32 %260, f32 %261, f32* %262, i32* %263, i32 %264, i32 %265, f32* %266, i32* %267, i32* %268, i32 %269, f32* %270, f32* %271, f32 %272, f32 %273, f32 %274, f32* %275, i32 %276, f32 %277, f32 %278, f32 %279, i32* %280, f32* %281, i32* %282, i32* %283, f32* %284, f32 %285, f32 %286, i32* %287, i32 %288, f32* %289, f32* %290, f32 %291, f32 %292, i32* %293, i32* %294, i32 %295, i32 %296, f32 %297, f32 %298, i32* %299, i32 %300, f32* %301, i32 %302, i32* %303, i32* %304, f32 %305, f32 %306, f32* %307, i32 %308, i32* %309, f32* %310, f32 %311, i32 %312, f32 %313, f32* %314, f32* %315, f32 %317, i32 %319);
    ret i32 %320;
^while.header:
    i32 %321 = load i32* %i;
    i1 %322 = scmp lt i32 %321, i32 10;
    i32 %323 = zext i1 %322 to i32;
    i1 %324 = scmp neq i32 %323, i32 0;
    cbr i1 %324(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %325 = load i32* %i;
    i64 %326 = sext i32 %325 to i64;
    i32* %327 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 %326];
    i32 %328 = load i32* %i;
    i64 %329 = sext i32 %328 to i64;
    i32* %330 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 %329];
    i32 %331 = load i32* %330;
    i32 %332 = load i32* %i;
    i64 %333 = sext i32 %332 to i64;
    f32* %334 = getelementptr &([10 * f32]* %arr)[i64 0][i64 %333];
    f32 %335 = load f32* %334;
    f32 %336 = s2f i32 %331 to f32;
    f32 %337 = fsub f32 %336, f32 %335;
    i32 %338 = f2s f32 %337 to i32;
    store i32* %327 with i32 %338;
    i32 %339 = load i32* %i;
    i32 %340 = add i32 %339, i32 1;
    store i32* %i with i32 %340;
    ubr ^while.header;
^b:
    i32 %341 = load i32* @k;
    i64 %342 = sext i32 %341 to i64;
    i32* %343 = getelementptr &([10 * i32]* %arr2)[i64 0][i64 %342];
    i32 %344 = load i32* %343;
    f32* %345 = getelementptr &([10 * f32]* %arr)[i64 0][i64 8];
    f32 %346 = load f32* %345;
    f32 %347 = s2f i32 %344 to f32;
    f32 %348 = fmul f32 %347, f32 %346;
    i32 %349 = f2s f32 %348 to i32;
    ret i32 %349;
^b1:
    unreachable;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %ret3 = alloc i32;
    f32* %ret2 = alloc f32;
    f32* %ret1 = alloc f32;
    f32* %ret0 = alloc f32;
    i32* %i = alloc i32;
    [24 * [3 * i32]]* %arr2 = alloc [24 * [3 * i32]];
    [40 * [3 * f32]]* %arr = alloc [40 * [3 * f32]];
    store i32* %i with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* @k with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i1 %2 = scmp lt i32 %1, i32 40;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    [3 * f32]* %7 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 %6];
    f32* %8 = getelementptr &([3 * f32]* %7)[i64 0][i64 0];
    i32 %9 = call (f32*) -> i32 @getfarray(f32* %8);
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %12 = load i32* %i;
    i1 %13 = scmp lt i32 %12, i32 24;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    [3 * i32]* %18 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 %17];
    i32* %19 = getelementptr &([3 * i32]* %18)[i64 0][i64 0];
    i32 %20 = call (i32*) -> i32 @getarray(i32* %19);
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header1;
^b1:
    [3 * f32]* %23 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    i32 %24 = load i32* @k;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = getelementptr &([3 * f32]* %23)[i64 0][i64 %25];
    f32 %27 = load f32* %26;
    [3 * f32]* %28 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    i32 %29 = load i32* @k;
    i64 %30 = sext i32 %29 to i64;
    f32* %31 = getelementptr &([3 * f32]* %28)[i64 0][i64 %30];
    f32 %32 = load f32* %31;
    [3 * f32]* %33 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    i32 %34 = load i32* @k;
    i64 %35 = sext i32 %34 to i64;
    f32* %36 = getelementptr &([3 * f32]* %33)[i64 0][i64 %35];
    f32 %37 = load f32* %36;
    [3 * f32]* %38 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    i32 %39 = load i32* @k;
    i64 %40 = sext i32 %39 to i64;
    f32* %41 = getelementptr &([3 * f32]* %38)[i64 0][i64 %40];
    f32 %42 = load f32* %41;
    [3 * f32]* %43 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    i32 %44 = load i32* @k;
    i64 %45 = sext i32 %44 to i64;
    f32* %46 = getelementptr &([3 * f32]* %43)[i64 0][i64 %45];
    f32 %47 = load f32* %46;
    [3 * f32]* %48 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    i32 %49 = load i32* @k;
    i64 %50 = sext i32 %49 to i64;
    f32* %51 = getelementptr &([3 * f32]* %48)[i64 0][i64 %50];
    f32 %52 = load f32* %51;
    [3 * f32]* %53 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    i32 %54 = load i32* @k;
    i64 %55 = sext i32 %54 to i64;
    f32* %56 = getelementptr &([3 * f32]* %53)[i64 0][i64 %55];
    f32 %57 = load f32* %56;
    [3 * f32]* %58 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    i32 %59 = load i32* @k;
    i64 %60 = sext i32 %59 to i64;
    f32* %61 = getelementptr &([3 * f32]* %58)[i64 0][i64 %60];
    f32 %62 = load f32* %61;
    [3 * f32]* %63 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    i32 %64 = load i32* @k;
    i64 %65 = sext i32 %64 to i64;
    f32* %66 = getelementptr &([3 * f32]* %63)[i64 0][i64 %65];
    f32 %67 = load f32* %66;
    [3 * f32]* %68 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    i32 %69 = load i32* @k;
    i64 %70 = sext i32 %69 to i64;
    f32* %71 = getelementptr &([3 * f32]* %68)[i64 0][i64 %70];
    f32 %72 = load f32* %71;
    [3 * f32]* %73 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    i32 %74 = load i32* @k;
    i64 %75 = sext i32 %74 to i64;
    f32* %76 = getelementptr &([3 * f32]* %73)[i64 0][i64 %75];
    f32 %77 = load f32* %76;
    [3 * f32]* %78 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    i32 %79 = load i32* @k;
    i64 %80 = sext i32 %79 to i64;
    f32* %81 = getelementptr &([3 * f32]* %78)[i64 0][i64 %80];
    f32 %82 = load f32* %81;
    [3 * f32]* %83 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    i32 %84 = load i32* @k;
    i64 %85 = sext i32 %84 to i64;
    f32* %86 = getelementptr &([3 * f32]* %83)[i64 0][i64 %85];
    f32 %87 = load f32* %86;
    [3 * f32]* %88 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    i32 %89 = load i32* @k;
    i64 %90 = sext i32 %89 to i64;
    f32* %91 = getelementptr &([3 * f32]* %88)[i64 0][i64 %90];
    f32 %92 = load f32* %91;
    [3 * f32]* %93 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    i32 %94 = load i32* @k;
    i64 %95 = sext i32 %94 to i64;
    f32* %96 = getelementptr &([3 * f32]* %93)[i64 0][i64 %95];
    f32 %97 = load f32* %96;
    [3 * f32]* %98 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    i32 %99 = load i32* @k;
    i64 %100 = sext i32 %99 to i64;
    f32* %101 = getelementptr &([3 * f32]* %98)[i64 0][i64 %100];
    f32 %102 = load f32* %101;
    [3 * f32]* %103 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    i32 %104 = load i32* @k;
    i64 %105 = sext i32 %104 to i64;
    f32* %106 = getelementptr &([3 * f32]* %103)[i64 0][i64 %105];
    f32 %107 = load f32* %106;
    [3 * f32]* %108 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    i32 %109 = load i32* @k;
    i64 %110 = sext i32 %109 to i64;
    f32* %111 = getelementptr &([3 * f32]* %108)[i64 0][i64 %110];
    f32 %112 = load f32* %111;
    [3 * f32]* %113 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    i32 %114 = load i32* @k;
    i64 %115 = sext i32 %114 to i64;
    f32* %116 = getelementptr &([3 * f32]* %113)[i64 0][i64 %115];
    f32 %117 = load f32* %116;
    [3 * f32]* %118 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    i32 %119 = load i32* @k;
    i64 %120 = sext i32 %119 to i64;
    f32* %121 = getelementptr &([3 * f32]* %118)[i64 0][i64 %120];
    f32 %122 = load f32* %121;
    [3 * f32]* %123 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    i32 %124 = load i32* @k;
    i64 %125 = sext i32 %124 to i64;
    f32* %126 = getelementptr &([3 * f32]* %123)[i64 0][i64 %125];
    f32 %127 = load f32* %126;
    [3 * f32]* %128 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    i32 %129 = load i32* @k;
    i64 %130 = sext i32 %129 to i64;
    f32* %131 = getelementptr &([3 * f32]* %128)[i64 0][i64 %130];
    f32 %132 = load f32* %131;
    [3 * f32]* %133 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    i32 %134 = load i32* @k;
    i64 %135 = sext i32 %134 to i64;
    f32* %136 = getelementptr &([3 * f32]* %133)[i64 0][i64 %135];
    f32 %137 = load f32* %136;
    [3 * f32]* %138 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    i32 %139 = load i32* @k;
    i64 %140 = sext i32 %139 to i64;
    f32* %141 = getelementptr &([3 * f32]* %138)[i64 0][i64 %140];
    f32 %142 = load f32* %141;
    [3 * f32]* %143 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    i32 %144 = load i32* @k;
    i64 %145 = sext i32 %144 to i64;
    f32* %146 = getelementptr &([3 * f32]* %143)[i64 0][i64 %145];
    f32 %147 = load f32* %146;
    [3 * f32]* %148 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    i32 %149 = load i32* @k;
    i64 %150 = sext i32 %149 to i64;
    f32* %151 = getelementptr &([3 * f32]* %148)[i64 0][i64 %150];
    f32 %152 = load f32* %151;
    [3 * f32]* %153 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    i32 %154 = load i32* @k;
    i64 %155 = sext i32 %154 to i64;
    f32* %156 = getelementptr &([3 * f32]* %153)[i64 0][i64 %155];
    f32 %157 = load f32* %156;
    [3 * f32]* %158 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    i32 %159 = load i32* @k;
    i64 %160 = sext i32 %159 to i64;
    f32* %161 = getelementptr &([3 * f32]* %158)[i64 0][i64 %160];
    f32 %162 = load f32* %161;
    [3 * f32]* %163 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    i32 %164 = load i32* @k;
    i64 %165 = sext i32 %164 to i64;
    f32* %166 = getelementptr &([3 * f32]* %163)[i64 0][i64 %165];
    f32 %167 = load f32* %166;
    [3 * f32]* %168 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    i32 %169 = load i32* @k;
    i64 %170 = sext i32 %169 to i64;
    f32* %171 = getelementptr &([3 * f32]* %168)[i64 0][i64 %170];
    f32 %172 = load f32* %171;
    [3 * f32]* %173 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    i32 %174 = load i32* @k;
    i64 %175 = sext i32 %174 to i64;
    f32* %176 = getelementptr &([3 * f32]* %173)[i64 0][i64 %175];
    f32 %177 = load f32* %176;
    [3 * f32]* %178 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    i32 %179 = load i32* @k;
    i64 %180 = sext i32 %179 to i64;
    f32* %181 = getelementptr &([3 * f32]* %178)[i64 0][i64 %180];
    f32 %182 = load f32* %181;
    [3 * f32]* %183 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    i32 %184 = load i32* @k;
    i64 %185 = sext i32 %184 to i64;
    f32* %186 = getelementptr &([3 * f32]* %183)[i64 0][i64 %185];
    f32 %187 = load f32* %186;
    [3 * f32]* %188 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    i32 %189 = load i32* @k;
    i64 %190 = sext i32 %189 to i64;
    f32* %191 = getelementptr &([3 * f32]* %188)[i64 0][i64 %190];
    f32 %192 = load f32* %191;
    [3 * f32]* %193 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    i32 %194 = load i32* @k;
    i64 %195 = sext i32 %194 to i64;
    f32* %196 = getelementptr &([3 * f32]* %193)[i64 0][i64 %195];
    f32 %197 = load f32* %196;
    [3 * f32]* %198 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    i32 %199 = load i32* @k;
    i64 %200 = sext i32 %199 to i64;
    f32* %201 = getelementptr &([3 * f32]* %198)[i64 0][i64 %200];
    f32 %202 = load f32* %201;
    [3 * f32]* %203 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36];
    i32 %204 = load i32* @k;
    i64 %205 = sext i32 %204 to i64;
    f32* %206 = getelementptr &([3 * f32]* %203)[i64 0][i64 %205];
    f32 %207 = load f32* %206;
    [3 * f32]* %208 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37];
    i32 %209 = load i32* @k;
    i64 %210 = sext i32 %209 to i64;
    f32* %211 = getelementptr &([3 * f32]* %208)[i64 0][i64 %210];
    f32 %212 = load f32* %211;
    [3 * f32]* %213 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38];
    i32 %214 = load i32* @k;
    i64 %215 = sext i32 %214 to i64;
    f32* %216 = getelementptr &([3 * f32]* %213)[i64 0][i64 %215];
    f32 %217 = load f32* %216;
    [3 * f32]* %218 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39];
    i32 %219 = load i32* @k;
    i64 %220 = sext i32 %219 to i64;
    f32* %221 = getelementptr &([3 * f32]* %218)[i64 0][i64 %220];
    f32 %222 = load f32* %221;
    f32 %223 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32) -> f32 @params_f40(f32 %27, f32 %32, f32 %37, f32 %42, f32 %47, f32 %52, f32 %57, f32 %62, f32 %67, f32 %72, f32 %77, f32 %82, f32 %87, f32 %92, f32 %97, f32 %102, f32 %107, f32 %112, f32 %117, f32 %122, f32 %127, f32 %132, f32 %137, f32 %142, f32 %147, f32 %152, f32 %157, f32 %162, f32 %167, f32 %172, f32 %177, f32 %182, f32 %187, f32 %192, f32 %197, f32 %202, f32 %207, f32 %212, f32 %217, f32 %222);
    store f32* %ret0 with f32 %223;
    [3 * i32]* %224 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23];
    i32 %225 = load i32* @k;
    i64 %226 = sext i32 %225 to i64;
    i32* %227 = getelementptr &([3 * i32]* %224)[i64 0][i64 %226];
    i32 %228 = load i32* %227;
    [3 * i32]* %229 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 2];
    i32 %230 = load i32* @k;
    i64 %231 = sext i32 %230 to i64;
    i32* %232 = getelementptr &([3 * i32]* %229)[i64 0][i64 %231];
    i32 %233 = load i32* %232;
    [3 * i32]* %234 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6];
    i32 %235 = load i32* @k;
    i64 %236 = sext i32 %235 to i64;
    i32* %237 = getelementptr &([3 * i32]* %234)[i64 0][i64 %236];
    i32 %238 = load i32* %237;
    [3 * f32]* %239 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    i32 %240 = load i32* @k;
    i64 %241 = sext i32 %240 to i64;
    f32* %242 = getelementptr &([3 * f32]* %239)[i64 0][i64 %241];
    f32 %243 = load f32* %242;
    [3 * i32]* %244 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1];
    i32 %245 = load i32* @k;
    i64 %246 = sext i32 %245 to i64;
    i32* %247 = getelementptr &([3 * i32]* %244)[i64 0][i64 %246];
    i32 %248 = load i32* %247;
    [3 * i32]* %249 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 4];
    i32 %250 = load i32* @k;
    i64 %251 = sext i32 %250 to i64;
    i32* %252 = getelementptr &([3 * i32]* %249)[i64 0][i64 %251];
    i32 %253 = load i32* %252;
    [3 * i32]* %254 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 5];
    i32 %255 = load i32* @k;
    i64 %256 = sext i32 %255 to i64;
    i32* %257 = getelementptr &([3 * i32]* %254)[i64 0][i64 %256];
    i32 %258 = load i32* %257;
    [3 * f32]* %259 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    i32 %260 = load i32* @k;
    i64 %261 = sext i32 %260 to i64;
    f32* %262 = getelementptr &([3 * f32]* %259)[i64 0][i64 %261];
    f32 %263 = load f32* %262;
    [3 * f32]* %264 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    i32 %265 = load i32* @k;
    i64 %266 = sext i32 %265 to i64;
    f32* %267 = getelementptr &([3 * f32]* %264)[i64 0][i64 %266];
    f32 %268 = load f32* %267;
    [3 * f32]* %269 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    i32 %270 = load i32* @k;
    i64 %271 = sext i32 %270 to i64;
    f32* %272 = getelementptr &([3 * f32]* %269)[i64 0][i64 %271];
    f32 %273 = load f32* %272;
    [3 * i32]* %274 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22];
    i32 %275 = load i32* @k;
    i64 %276 = sext i32 %275 to i64;
    i32* %277 = getelementptr &([3 * i32]* %274)[i64 0][i64 %276];
    i32 %278 = load i32* %277;
    [3 * f32]* %279 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    i32 %280 = load i32* @k;
    i64 %281 = sext i32 %280 to i64;
    f32* %282 = getelementptr &([3 * f32]* %279)[i64 0][i64 %281];
    f32 %283 = load f32* %282;
    [3 * f32]* %284 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    i32 %285 = load i32* @k;
    i64 %286 = sext i32 %285 to i64;
    f32* %287 = getelementptr &([3 * f32]* %284)[i64 0][i64 %286];
    f32 %288 = load f32* %287;
    [3 * i32]* %289 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0];
    i32 %290 = load i32* @k;
    i64 %291 = sext i32 %290 to i64;
    i32* %292 = getelementptr &([3 * i32]* %289)[i64 0][i64 %291];
    i32 %293 = load i32* %292;
    [3 * f32]* %294 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37];
    i32 %295 = load i32* @k;
    i64 %296 = sext i32 %295 to i64;
    f32* %297 = getelementptr &([3 * f32]* %294)[i64 0][i64 %296];
    f32 %298 = load f32* %297;
    [3 * i32]* %299 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19];
    i32 %300 = load i32* @k;
    i64 %301 = sext i32 %300 to i64;
    i32* %302 = getelementptr &([3 * i32]* %299)[i64 0][i64 %301];
    i32 %303 = load i32* %302;
    [3 * f32]* %304 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    i32 %305 = load i32* @k;
    i64 %306 = sext i32 %305 to i64;
    f32* %307 = getelementptr &([3 * f32]* %304)[i64 0][i64 %306];
    f32 %308 = load f32* %307;
    [3 * f32]* %309 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    i32 %310 = load i32* @k;
    i64 %311 = sext i32 %310 to i64;
    f32* %312 = getelementptr &([3 * f32]* %309)[i64 0][i64 %311];
    f32 %313 = load f32* %312;
    [3 * f32]* %314 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    i32 %315 = load i32* @k;
    i64 %316 = sext i32 %315 to i64;
    f32* %317 = getelementptr &([3 * f32]* %314)[i64 0][i64 %316];
    f32 %318 = load f32* %317;
    [3 * f32]* %319 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    i32 %320 = load i32* @k;
    i64 %321 = sext i32 %320 to i64;
    f32* %322 = getelementptr &([3 * f32]* %319)[i64 0][i64 %321];
    f32 %323 = load f32* %322;
    [3 * f32]* %324 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38];
    i32 %325 = load i32* @k;
    i64 %326 = sext i32 %325 to i64;
    f32* %327 = getelementptr &([3 * f32]* %324)[i64 0][i64 %326];
    f32 %328 = load f32* %327;
    [3 * f32]* %329 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    i32 %330 = load i32* @k;
    i64 %331 = sext i32 %330 to i64;
    f32* %332 = getelementptr &([3 * f32]* %329)[i64 0][i64 %331];
    f32 %333 = load f32* %332;
    [3 * i32]* %334 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7];
    i32 %335 = load i32* @k;
    i64 %336 = sext i32 %335 to i64;
    i32* %337 = getelementptr &([3 * i32]* %334)[i64 0][i64 %336];
    i32 %338 = load i32* %337;
    [3 * f32]* %339 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    i32 %340 = load i32* @k;
    i64 %341 = sext i32 %340 to i64;
    f32* %342 = getelementptr &([3 * f32]* %339)[i64 0][i64 %341];
    f32 %343 = load f32* %342;
    [3 * i32]* %344 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10];
    i32 %345 = load i32* @k;
    i64 %346 = sext i32 %345 to i64;
    i32* %347 = getelementptr &([3 * i32]* %344)[i64 0][i64 %346];
    i32 %348 = load i32* %347;
    [3 * i32]* %349 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13];
    i32 %350 = load i32* @k;
    i64 %351 = sext i32 %350 to i64;
    i32* %352 = getelementptr &([3 * i32]* %349)[i64 0][i64 %351];
    i32 %353 = load i32* %352;
    [3 * f32]* %354 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    i32 %355 = load i32* @k;
    i64 %356 = sext i32 %355 to i64;
    f32* %357 = getelementptr &([3 * f32]* %354)[i64 0][i64 %356];
    f32 %358 = load f32* %357;
    [3 * f32]* %359 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    i32 %360 = load i32* @k;
    i64 %361 = sext i32 %360 to i64;
    f32* %362 = getelementptr &([3 * f32]* %359)[i64 0][i64 %361];
    f32 %363 = load f32* %362;
    [3 * f32]* %364 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    i32 %365 = load i32* @k;
    i64 %366 = sext i32 %365 to i64;
    f32* %367 = getelementptr &([3 * f32]* %364)[i64 0][i64 %366];
    f32 %368 = load f32* %367;
    [3 * f32]* %369 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    i32 %370 = load i32* @k;
    i64 %371 = sext i32 %370 to i64;
    f32* %372 = getelementptr &([3 * f32]* %369)[i64 0][i64 %371];
    f32 %373 = load f32* %372;
    [3 * f32]* %374 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    i32 %375 = load i32* @k;
    i64 %376 = sext i32 %375 to i64;
    f32* %377 = getelementptr &([3 * f32]* %374)[i64 0][i64 %376];
    f32 %378 = load f32* %377;
    [3 * i32]* %379 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 8];
    i32 %380 = load i32* @k;
    i64 %381 = sext i32 %380 to i64;
    i32* %382 = getelementptr &([3 * i32]* %379)[i64 0][i64 %381];
    i32 %383 = load i32* %382;
    [3 * f32]* %384 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39];
    i32 %385 = load i32* @k;
    i64 %386 = sext i32 %385 to i64;
    f32* %387 = getelementptr &([3 * f32]* %384)[i64 0][i64 %386];
    f32 %388 = load f32* %387;
    [3 * i32]* %389 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 17];
    i32 %390 = load i32* @k;
    i64 %391 = sext i32 %390 to i64;
    i32* %392 = getelementptr &([3 * i32]* %389)[i64 0][i64 %391];
    i32 %393 = load i32* %392;
    [3 * f32]* %394 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    i32 %395 = load i32* @k;
    i64 %396 = sext i32 %395 to i64;
    f32* %397 = getelementptr &([3 * f32]* %394)[i64 0][i64 %396];
    f32 %398 = load f32* %397;
    [3 * f32]* %399 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    i32 %400 = load i32* @k;
    i64 %401 = sext i32 %400 to i64;
    f32* %402 = getelementptr &([3 * f32]* %399)[i64 0][i64 %401];
    f32 %403 = load f32* %402;
    [3 * f32]* %404 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    i32 %405 = load i32* @k;
    i64 %406 = sext i32 %405 to i64;
    f32* %407 = getelementptr &([3 * f32]* %404)[i64 0][i64 %406];
    f32 %408 = load f32* %407;
    [3 * f32]* %409 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    i32 %410 = load i32* @k;
    i64 %411 = sext i32 %410 to i64;
    f32* %412 = getelementptr &([3 * f32]* %409)[i64 0][i64 %411];
    f32 %413 = load f32* %412;
    [3 * i32]* %414 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 18];
    i32 %415 = load i32* @k;
    i64 %416 = sext i32 %415 to i64;
    i32* %417 = getelementptr &([3 * i32]* %414)[i64 0][i64 %416];
    i32 %418 = load i32* %417;
    [3 * i32]* %419 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 9];
    i32 %420 = load i32* @k;
    i64 %421 = sext i32 %420 to i64;
    i32* %422 = getelementptr &([3 * i32]* %419)[i64 0][i64 %421];
    i32 %423 = load i32* %422;
    [3 * f32]* %424 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    i32 %425 = load i32* @k;
    i64 %426 = sext i32 %425 to i64;
    f32* %427 = getelementptr &([3 * f32]* %424)[i64 0][i64 %426];
    f32 %428 = load f32* %427;
    [3 * f32]* %429 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    i32 %430 = load i32* @k;
    i64 %431 = sext i32 %430 to i64;
    f32* %432 = getelementptr &([3 * f32]* %429)[i64 0][i64 %431];
    f32 %433 = load f32* %432;
    [3 * f32]* %434 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    i32 %435 = load i32* @k;
    i64 %436 = sext i32 %435 to i64;
    f32* %437 = getelementptr &([3 * f32]* %434)[i64 0][i64 %436];
    f32 %438 = load f32* %437;
    [3 * i32]* %439 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12];
    i32 %440 = load i32* @k;
    i64 %441 = sext i32 %440 to i64;
    i32* %442 = getelementptr &([3 * i32]* %439)[i64 0][i64 %441];
    i32 %443 = load i32* %442;
    [3 * f32]* %444 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    i32 %445 = load i32* @k;
    i64 %446 = sext i32 %445 to i64;
    f32* %447 = getelementptr &([3 * f32]* %444)[i64 0][i64 %446];
    f32 %448 = load f32* %447;
    [3 * i32]* %449 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11];
    i32 %450 = load i32* @k;
    i64 %451 = sext i32 %450 to i64;
    i32* %452 = getelementptr &([3 * i32]* %449)[i64 0][i64 %451];
    i32 %453 = load i32* %452;
    [3 * i32]* %454 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16];
    i32 %455 = load i32* @k;
    i64 %456 = sext i32 %455 to i64;
    i32* %457 = getelementptr &([3 * i32]* %454)[i64 0][i64 %456];
    i32 %458 = load i32* %457;
    [3 * f32]* %459 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    i32 %460 = load i32* @k;
    i64 %461 = sext i32 %460 to i64;
    f32* %462 = getelementptr &([3 * f32]* %459)[i64 0][i64 %461];
    f32 %463 = load f32* %462;
    [3 * f32]* %464 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    i32 %465 = load i32* @k;
    i64 %466 = sext i32 %465 to i64;
    f32* %467 = getelementptr &([3 * f32]* %464)[i64 0][i64 %466];
    f32 %468 = load f32* %467;
    [3 * f32]* %469 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    i32 %470 = load i32* @k;
    i64 %471 = sext i32 %470 to i64;
    f32* %472 = getelementptr &([3 * f32]* %469)[i64 0][i64 %471];
    f32 %473 = load f32* %472;
    [3 * f32]* %474 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    i32 %475 = load i32* @k;
    i64 %476 = sext i32 %475 to i64;
    f32* %477 = getelementptr &([3 * f32]* %474)[i64 0][i64 %476];
    f32 %478 = load f32* %477;
    [3 * i32]* %479 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3];
    i32 %480 = load i32* @k;
    i64 %481 = sext i32 %480 to i64;
    i32* %482 = getelementptr &([3 * i32]* %479)[i64 0][i64 %481];
    i32 %483 = load i32* %482;
    [3 * i32]* %484 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 21];
    i32 %485 = load i32* @k;
    i64 %486 = sext i32 %485 to i64;
    i32* %487 = getelementptr &([3 * i32]* %484)[i64 0][i64 %486];
    i32 %488 = load i32* %487;
    [3 * i32]* %489 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 20];
    i32 %490 = load i32* @k;
    i64 %491 = sext i32 %490 to i64;
    i32* %492 = getelementptr &([3 * i32]* %489)[i64 0][i64 %491];
    i32 %493 = load i32* %492;
    [3 * f32]* %494 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    i32 %495 = load i32* @k;
    i64 %496 = sext i32 %495 to i64;
    f32* %497 = getelementptr &([3 * f32]* %494)[i64 0][i64 %496];
    f32 %498 = load f32* %497;
    [3 * f32]* %499 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    i32 %500 = load i32* @k;
    i64 %501 = sext i32 %500 to i64;
    f32* %502 = getelementptr &([3 * f32]* %499)[i64 0][i64 %501];
    f32 %503 = load f32* %502;
    [3 * f32]* %504 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    i32 %505 = load i32* @k;
    i64 %506 = sext i32 %505 to i64;
    f32* %507 = getelementptr &([3 * f32]* %504)[i64 0][i64 %506];
    f32 %508 = load f32* %507;
    [3 * f32]* %509 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    i32 %510 = load i32* @k;
    i64 %511 = sext i32 %510 to i64;
    f32* %512 = getelementptr &([3 * f32]* %509)[i64 0][i64 %511];
    f32 %513 = load f32* %512;
    [3 * f32]* %514 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36];
    i32 %515 = load i32* @k;
    i64 %516 = sext i32 %515 to i64;
    f32* %517 = getelementptr &([3 * f32]* %514)[i64 0][i64 %516];
    f32 %518 = load f32* %517;
    [3 * f32]* %519 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    i32 %520 = load i32* @k;
    i64 %521 = sext i32 %520 to i64;
    f32* %522 = getelementptr &([3 * f32]* %519)[i64 0][i64 %521];
    f32 %523 = load f32* %522;
    [3 * i32]* %524 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15];
    i32 %525 = load i32* @k;
    i64 %526 = sext i32 %525 to i64;
    i32* %527 = getelementptr &([3 * i32]* %524)[i64 0][i64 %526];
    i32 %528 = load i32* %527;
    [3 * f32]* %529 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    i32 %530 = load i32* @k;
    i64 %531 = sext i32 %530 to i64;
    f32* %532 = getelementptr &([3 * f32]* %529)[i64 0][i64 %531];
    f32 %533 = load f32* %532;
    [3 * i32]* %534 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 14];
    i32 %535 = load i32* @k;
    i64 %536 = sext i32 %535 to i64;
    i32* %537 = getelementptr &([3 * i32]* %534)[i64 0][i64 %536];
    i32 %538 = load i32* %537;
    [3 * f32]* %539 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    i32 %540 = load i32* @k;
    i64 %541 = sext i32 %540 to i64;
    f32* %542 = getelementptr &([3 * f32]* %539)[i64 0][i64 %541];
    f32 %543 = load f32* %542;
    f32 %544 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32) -> f32 @params_f40_i24(i32 %228, i32 %233, i32 %238, f32 %243, i32 %248, i32 %253, i32 %258, f32 %263, f32 %268, f32 %273, i32 %278, f32 %283, f32 %288, i32 %293, f32 %298, i32 %303, f32 %308, f32 %313, f32 %318, f32 %323, f32 %328, f32 %333, i32 %338, f32 %343, i32 %348, i32 %353, f32 %358, f32 %363, f32 %368, f32 %373, f32 %378, i32 %383, f32 %388, i32 %393, f32 %398, f32 %403, f32 %408, f32 %413, i32 %418, i32 %423, f32 %428, f32 %433, f32 %438, i32 %443, f32 %448, i32 %453, i32 %458, f32 %463, f32 %468, f32 %473, f32 %478, i32 %483, i32 %488, i32 %493, f32 %498, f32 %503, f32 %508, f32 %513, f32 %518, f32 %523, i32 %528, f32 %533, i32 %538, f32 %543);
    store f32* %ret1 with f32 %544;
    [3 * f32]* %545 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    f32* %546 = getelementptr &([3 * f32]* %545)[i64 0][i64 0];
    [3 * f32]* %547 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    f32* %548 = getelementptr &([3 * f32]* %547)[i64 0][i64 0];
    [3 * f32]* %549 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    f32* %550 = getelementptr &([3 * f32]* %549)[i64 0][i64 0];
    [3 * f32]* %551 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    f32* %552 = getelementptr &([3 * f32]* %551)[i64 0][i64 0];
    [3 * f32]* %553 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    f32* %554 = getelementptr &([3 * f32]* %553)[i64 0][i64 0];
    [3 * f32]* %555 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    f32* %556 = getelementptr &([3 * f32]* %555)[i64 0][i64 0];
    [3 * f32]* %557 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    f32* %558 = getelementptr &([3 * f32]* %557)[i64 0][i64 0];
    [3 * f32]* %559 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    f32* %560 = getelementptr &([3 * f32]* %559)[i64 0][i64 0];
    [3 * f32]* %561 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    f32* %562 = getelementptr &([3 * f32]* %561)[i64 0][i64 0];
    [3 * f32]* %563 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    f32* %564 = getelementptr &([3 * f32]* %563)[i64 0][i64 0];
    [3 * f32]* %565 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    f32* %566 = getelementptr &([3 * f32]* %565)[i64 0][i64 0];
    [3 * f32]* %567 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    f32* %568 = getelementptr &([3 * f32]* %567)[i64 0][i64 0];
    [3 * f32]* %569 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    f32* %570 = getelementptr &([3 * f32]* %569)[i64 0][i64 0];
    [3 * f32]* %571 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    f32* %572 = getelementptr &([3 * f32]* %571)[i64 0][i64 0];
    [3 * f32]* %573 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    f32* %574 = getelementptr &([3 * f32]* %573)[i64 0][i64 0];
    [3 * f32]* %575 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    f32* %576 = getelementptr &([3 * f32]* %575)[i64 0][i64 0];
    [3 * f32]* %577 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    f32* %578 = getelementptr &([3 * f32]* %577)[i64 0][i64 0];
    [3 * f32]* %579 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    f32* %580 = getelementptr &([3 * f32]* %579)[i64 0][i64 0];
    [3 * f32]* %581 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    f32* %582 = getelementptr &([3 * f32]* %581)[i64 0][i64 0];
    [3 * f32]* %583 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    f32* %584 = getelementptr &([3 * f32]* %583)[i64 0][i64 0];
    [3 * f32]* %585 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    f32* %586 = getelementptr &([3 * f32]* %585)[i64 0][i64 0];
    [3 * f32]* %587 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    f32* %588 = getelementptr &([3 * f32]* %587)[i64 0][i64 0];
    [3 * f32]* %589 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    f32* %590 = getelementptr &([3 * f32]* %589)[i64 0][i64 0];
    [3 * f32]* %591 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    f32* %592 = getelementptr &([3 * f32]* %591)[i64 0][i64 0];
    [3 * f32]* %593 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    f32* %594 = getelementptr &([3 * f32]* %593)[i64 0][i64 0];
    [3 * f32]* %595 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    f32* %596 = getelementptr &([3 * f32]* %595)[i64 0][i64 0];
    [3 * f32]* %597 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    f32* %598 = getelementptr &([3 * f32]* %597)[i64 0][i64 0];
    [3 * f32]* %599 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    f32* %600 = getelementptr &([3 * f32]* %599)[i64 0][i64 0];
    [3 * f32]* %601 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    f32* %602 = getelementptr &([3 * f32]* %601)[i64 0][i64 0];
    [3 * f32]* %603 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    f32* %604 = getelementptr &([3 * f32]* %603)[i64 0][i64 0];
    [3 * f32]* %605 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    f32* %606 = getelementptr &([3 * f32]* %605)[i64 0][i64 0];
    [3 * f32]* %607 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    f32* %608 = getelementptr &([3 * f32]* %607)[i64 0][i64 0];
    [3 * f32]* %609 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    f32* %610 = getelementptr &([3 * f32]* %609)[i64 0][i64 0];
    [3 * f32]* %611 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    f32* %612 = getelementptr &([3 * f32]* %611)[i64 0][i64 0];
    [3 * f32]* %613 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    f32* %614 = getelementptr &([3 * f32]* %613)[i64 0][i64 0];
    [3 * f32]* %615 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    f32* %616 = getelementptr &([3 * f32]* %615)[i64 0][i64 0];
    [3 * f32]* %617 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 36];
    f32* %618 = getelementptr &([3 * f32]* %617)[i64 0][i64 0];
    [3 * f32]* %619 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 37];
    f32* %620 = getelementptr &([3 * f32]* %619)[i64 0][i64 0];
    [3 * f32]* %621 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 38];
    f32* %622 = getelementptr &([3 * f32]* %621)[i64 0][i64 0];
    [3 * f32]* %623 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 39];
    f32* %624 = getelementptr &([3 * f32]* %623)[i64 0][i64 0];
    f32 %625 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*) -> f32 @params_fa40(f32* %546, f32* %548, f32* %550, f32* %552, f32* %554, f32* %556, f32* %558, f32* %560, f32* %562, f32* %564, f32* %566, f32* %568, f32* %570, f32* %572, f32* %574, f32* %576, f32* %578, f32* %580, f32* %582, f32* %584, f32* %586, f32* %588, f32* %590, f32* %592, f32* %594, f32* %596, f32* %598, f32* %600, f32* %602, f32* %604, f32* %606, f32* %608, f32* %610, f32* %612, f32* %614, f32* %616, f32* %618, f32* %620, f32* %622, f32* %624);
    store f32* %ret2 with f32 %625;
    [3 * f32]* %626 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 0];
    i32 %627 = load i32* @k;
    i64 %628 = sext i32 %627 to i64;
    f32* %629 = getelementptr &([3 * f32]* %626)[i64 0][i64 %628];
    f32 %630 = load f32* %629;
    [3 * i32]* %631 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0];
    i32* %632 = getelementptr &([3 * i32]* %631)[i64 0][i64 0];
    [3 * i32]* %633 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1];
    i32 %634 = load i32* @k;
    i64 %635 = sext i32 %634 to i64;
    i32* %636 = getelementptr &([3 * i32]* %633)[i64 0][i64 %635];
    i32 %637 = load i32* %636;
    [3 * f32]* %638 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 1];
    f32* %639 = getelementptr &([3 * f32]* %638)[i64 0][i64 0];
    [3 * f32]* %640 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 2];
    i32 %641 = load i32* @k;
    i64 %642 = sext i32 %641 to i64;
    f32* %643 = getelementptr &([3 * f32]* %640)[i64 0][i64 %642];
    f32 %644 = load f32* %643;
    [3 * i32]* %645 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 2];
    i32 %646 = load i32* @k;
    i64 %647 = sext i32 %646 to i64;
    i32* %648 = getelementptr &([3 * i32]* %645)[i64 0][i64 %647];
    i32 %649 = load i32* %648;
    [3 * f32]* %650 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 3];
    i32 %651 = load i32* @k;
    i64 %652 = sext i32 %651 to i64;
    f32* %653 = getelementptr &([3 * f32]* %650)[i64 0][i64 %652];
    f32 %654 = load f32* %653;
    [3 * f32]* %655 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 4];
    i32 %656 = load i32* @k;
    i64 %657 = sext i32 %656 to i64;
    f32* %658 = getelementptr &([3 * f32]* %655)[i64 0][i64 %657];
    f32 %659 = load f32* %658;
    [3 * f32]* %660 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 5];
    f32* %661 = getelementptr &([3 * f32]* %660)[i64 0][i64 0];
    [3 * i32]* %662 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3];
    i32* %663 = getelementptr &([3 * i32]* %662)[i64 0][i64 0];
    [3 * i32]* %664 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 4];
    i32 %665 = load i32* @k;
    i64 %666 = sext i32 %665 to i64;
    i32* %667 = getelementptr &([3 * i32]* %664)[i64 0][i64 %666];
    i32 %668 = load i32* %667;
    [3 * i32]* %669 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 5];
    i32 %670 = load i32* @k;
    i64 %671 = sext i32 %670 to i64;
    i32* %672 = getelementptr &([3 * i32]* %669)[i64 0][i64 %671];
    i32 %673 = load i32* %672;
    [3 * f32]* %674 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 6];
    f32* %675 = getelementptr &([3 * f32]* %674)[i64 0][i64 0];
    [3 * i32]* %676 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 6];
    i32* %677 = getelementptr &([3 * i32]* %676)[i64 0][i64 0];
    [3 * i32]* %678 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 7];
    i32* %679 = getelementptr &([3 * i32]* %678)[i64 0][i64 0];
    [3 * i32]* %680 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 8];
    i32 %681 = load i32* @k;
    i64 %682 = sext i32 %681 to i64;
    i32* %683 = getelementptr &([3 * i32]* %680)[i64 0][i64 %682];
    i32 %684 = load i32* %683;
    [3 * f32]* %685 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 7];
    f32* %686 = getelementptr &([3 * f32]* %685)[i64 0][i64 0];
    [3 * f32]* %687 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 8];
    f32* %688 = getelementptr &([3 * f32]* %687)[i64 0][i64 0];
    [3 * f32]* %689 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 9];
    i32 %690 = load i32* @k;
    i64 %691 = sext i32 %690 to i64;
    f32* %692 = getelementptr &([3 * f32]* %689)[i64 0][i64 %691];
    f32 %693 = load f32* %692;
    [3 * f32]* %694 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 10];
    i32 %695 = load i32* @k;
    i64 %696 = sext i32 %695 to i64;
    f32* %697 = getelementptr &([3 * f32]* %694)[i64 0][i64 %696];
    f32 %698 = load f32* %697;
    [3 * f32]* %699 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 11];
    i32 %700 = load i32* @k;
    i64 %701 = sext i32 %700 to i64;
    f32* %702 = getelementptr &([3 * f32]* %699)[i64 0][i64 %701];
    f32 %703 = load f32* %702;
    [3 * f32]* %704 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 12];
    f32* %705 = getelementptr &([3 * f32]* %704)[i64 0][i64 0];
    [3 * i32]* %706 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 9];
    i32 %707 = load i32* @k;
    i64 %708 = sext i32 %707 to i64;
    i32* %709 = getelementptr &([3 * i32]* %706)[i64 0][i64 %708];
    i32 %710 = load i32* %709;
    [3 * f32]* %711 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 13];
    i32 %712 = load i32* @k;
    i64 %713 = sext i32 %712 to i64;
    f32* %714 = getelementptr &([3 * f32]* %711)[i64 0][i64 %713];
    f32 %715 = load f32* %714;
    [3 * f32]* %716 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 14];
    i32 %717 = load i32* @k;
    i64 %718 = sext i32 %717 to i64;
    f32* %719 = getelementptr &([3 * f32]* %716)[i64 0][i64 %718];
    f32 %720 = load f32* %719;
    [3 * f32]* %721 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 15];
    i32 %722 = load i32* @k;
    i64 %723 = sext i32 %722 to i64;
    f32* %724 = getelementptr &([3 * f32]* %721)[i64 0][i64 %723];
    f32 %725 = load f32* %724;
    [3 * i32]* %726 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 10];
    i32* %727 = getelementptr &([3 * i32]* %726)[i64 0][i64 0];
    [3 * f32]* %728 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 16];
    f32* %729 = getelementptr &([3 * f32]* %728)[i64 0][i64 0];
    [3 * i32]* %730 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 11];
    i32* %731 = getelementptr &([3 * i32]* %730)[i64 0][i64 0];
    [3 * i32]* %732 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 12];
    i32* %733 = getelementptr &([3 * i32]* %732)[i64 0][i64 0];
    [3 * f32]* %734 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 17];
    f32* %735 = getelementptr &([3 * f32]* %734)[i64 0][i64 0];
    [3 * f32]* %736 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 18];
    i32 %737 = load i32* @k;
    i64 %738 = sext i32 %737 to i64;
    f32* %739 = getelementptr &([3 * f32]* %736)[i64 0][i64 %738];
    f32 %740 = load f32* %739;
    [3 * f32]* %741 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 19];
    i32 %742 = load i32* @k;
    i64 %743 = sext i32 %742 to i64;
    f32* %744 = getelementptr &([3 * f32]* %741)[i64 0][i64 %743];
    f32 %745 = load f32* %744;
    [3 * i32]* %746 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 13];
    i32* %747 = getelementptr &([3 * i32]* %746)[i64 0][i64 0];
    [3 * i32]* %748 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 14];
    i32 %749 = load i32* @k;
    i64 %750 = sext i32 %749 to i64;
    i32* %751 = getelementptr &([3 * i32]* %748)[i64 0][i64 %750];
    i32 %752 = load i32* %751;
    [3 * f32]* %753 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 20];
    f32* %754 = getelementptr &([3 * f32]* %753)[i64 0][i64 0];
    [3 * f32]* %755 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 21];
    f32* %756 = getelementptr &([3 * f32]* %755)[i64 0][i64 0];
    [3 * f32]* %757 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 22];
    i32 %758 = load i32* @k;
    i64 %759 = sext i32 %758 to i64;
    f32* %760 = getelementptr &([3 * f32]* %757)[i64 0][i64 %759];
    f32 %761 = load f32* %760;
    [3 * f32]* %762 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 23];
    i32 %763 = load i32* @k;
    i64 %764 = sext i32 %763 to i64;
    f32* %765 = getelementptr &([3 * f32]* %762)[i64 0][i64 %764];
    f32 %766 = load f32* %765;
    [3 * i32]* %767 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 15];
    i32* %768 = getelementptr &([3 * i32]* %767)[i64 0][i64 0];
    [3 * i32]* %769 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 16];
    i32* %770 = getelementptr &([3 * i32]* %769)[i64 0][i64 0];
    [3 * i32]* %771 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 17];
    i32 %772 = load i32* @k;
    i64 %773 = sext i32 %772 to i64;
    i32* %774 = getelementptr &([3 * i32]* %771)[i64 0][i64 %773];
    i32 %775 = load i32* %774;
    [3 * i32]* %776 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 18];
    i32 %777 = load i32* @k;
    i64 %778 = sext i32 %777 to i64;
    i32* %779 = getelementptr &([3 * i32]* %776)[i64 0][i64 %778];
    i32 %780 = load i32* %779;
    [3 * f32]* %781 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 24];
    i32 %782 = load i32* @k;
    i64 %783 = sext i32 %782 to i64;
    f32* %784 = getelementptr &([3 * f32]* %781)[i64 0][i64 %783];
    f32 %785 = load f32* %784;
    [3 * f32]* %786 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 25];
    i32 %787 = load i32* @k;
    i64 %788 = sext i32 %787 to i64;
    f32* %789 = getelementptr &([3 * f32]* %786)[i64 0][i64 %788];
    f32 %790 = load f32* %789;
    [3 * i32]* %791 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 19];
    i32* %792 = getelementptr &([3 * i32]* %791)[i64 0][i64 0];
    [3 * i32]* %793 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 20];
    i32 %794 = load i32* @k;
    i64 %795 = sext i32 %794 to i64;
    i32* %796 = getelementptr &([3 * i32]* %793)[i64 0][i64 %795];
    i32 %797 = load i32* %796;
    [3 * f32]* %798 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 26];
    f32* %799 = getelementptr &([3 * f32]* %798)[i64 0][i64 0];
    [3 * i32]* %800 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 21];
    i32 %801 = load i32* @k;
    i64 %802 = sext i32 %801 to i64;
    i32* %803 = getelementptr &([3 * i32]* %800)[i64 0][i64 %802];
    i32 %804 = load i32* %803;
    [3 * i32]* %805 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 22];
    i32* %806 = getelementptr &([3 * i32]* %805)[i64 0][i64 0];
    [3 * i32]* %807 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 23];
    i32* %808 = getelementptr &([3 * i32]* %807)[i64 0][i64 0];
    [3 * f32]* %809 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 27];
    i32 %810 = load i32* @k;
    i64 %811 = sext i32 %810 to i64;
    f32* %812 = getelementptr &([3 * f32]* %809)[i64 0][i64 %811];
    f32 %813 = load f32* %812;
    [3 * f32]* %814 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 28];
    i32 %815 = load i32* @k;
    i64 %816 = sext i32 %815 to i64;
    f32* %817 = getelementptr &([3 * f32]* %814)[i64 0][i64 %816];
    f32 %818 = load f32* %817;
    [3 * f32]* %819 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 29];
    f32* %820 = getelementptr &([3 * f32]* %819)[i64 0][i64 0];
    [3 * i32]* %821 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 0];
    i32 %822 = load i32* @k;
    i64 %823 = sext i32 %822 to i64;
    i32* %824 = getelementptr &([3 * i32]* %821)[i64 0][i64 %823];
    i32 %825 = load i32* %824;
    [3 * i32]* %826 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 1];
    i32* %827 = getelementptr &([3 * i32]* %826)[i64 0][i64 0];
    [3 * f32]* %828 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 30];
    f32* %829 = getelementptr &([3 * f32]* %828)[i64 0][i64 0];
    [3 * f32]* %830 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 31];
    i32 %831 = load i32* @k;
    i64 %832 = sext i32 %831 to i64;
    f32* %833 = getelementptr &([3 * f32]* %830)[i64 0][i64 %832];
    f32 %834 = load f32* %833;
    [3 * i32]* %835 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 2];
    i32 %836 = load i32* @k;
    i64 %837 = sext i32 %836 to i64;
    i32* %838 = getelementptr &([3 * i32]* %835)[i64 0][i64 %837];
    i32 %839 = load i32* %838;
    [3 * f32]* %840 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 32];
    i32 %841 = load i32* @k;
    i64 %842 = sext i32 %841 to i64;
    f32* %843 = getelementptr &([3 * f32]* %840)[i64 0][i64 %842];
    f32 %844 = load f32* %843;
    [3 * f32]* %845 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 33];
    f32* %846 = getelementptr &([3 * f32]* %845)[i64 0][i64 0];
    [3 * f32]* %847 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 34];
    f32* %848 = getelementptr &([3 * f32]* %847)[i64 0][i64 0];
    [3 * f32]* %849 = getelementptr &([40 * [3 * f32]]* %arr)[i64 0][i64 35];
    i32 %850 = load i32* @k;
    i64 %851 = sext i32 %850 to i64;
    f32* %852 = getelementptr &([3 * f32]* %849)[i64 0][i64 %851];
    f32 %853 = load f32* %852;
    [3 * i32]* %854 = getelementptr &([24 * [3 * i32]]* %arr2)[i64 0][i64 3];
    i32 %855 = load i32* @k;
    i64 %856 = sext i32 %855 to i64;
    i32* %857 = getelementptr &([3 * i32]* %854)[i64 0][i64 %856];
    i32 %858 = load i32* %857;
    i32 %859 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32) -> i32 @params_mix(f32 %630, i32* %632, i32 %637, f32* %639, f32 %644, i32 %649, f32 %654, f32 %659, f32* %661, i32* %663, i32 %668, i32 %673, f32* %675, i32* %677, i32* %679, i32 %684, f32* %686, f32* %688, f32 %693, f32 %698, f32 %703, f32* %705, i32 %710, f32 %715, f32 %720, f32 %725, i32* %727, f32* %729, i32* %731, i32* %733, f32* %735, f32 %740, f32 %745, i32* %747, i32 %752, f32* %754, f32* %756, f32 %761, f32 %766, i32* %768, i32* %770, i32 %775, i32 %780, f32 %785, f32 %790, i32* %792, i32 %797, f32* %799, i32 %804, i32* %806, i32* %808, f32 %813, f32 %818, f32* %820, i32 %825, i32* %827, f32* %829, f32 %834, i32 %839, f32 %844, f32* %846, f32* %848, f32 %853, i32 %858);
    store i32* %ret3 with i32 %859;
    f32 %860 = load f32* %ret0;
    call (f32) -> void @putfloat(f32 %860);
    call (i32) -> void @putch(i32 10);
    f32 %861 = load f32* %ret1;
    call (f32) -> void @putfloat(f32 %861);
    call (i32) -> void @putch(i32 10);
    f32 %862 = load f32* %ret2;
    call (f32) -> void @putfloat(f32 %862);
    call (i32) -> void @putch(i32 10);
    i32 %863 = load i32* %ret3;
    call (i32) -> void @putint(i32 %863);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
