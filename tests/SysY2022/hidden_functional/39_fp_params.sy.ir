internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray(i32, f32*) -> void { NoMemoryWrite };
internal func @params_f40(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 { NoMemoryWrite } {
^entry(f32 %arg, f32 %arg1, f32 %arg2, f32 %arg3, f32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, f32 %arg38, f32 %arg39, i32* %arg40):
    i1 %0 = fcmp neq f32 %arg39, f32 0;
    cbr i1 %0, [ ^indirect f32 %arg39, f32 %arg36, f32 %arg35, f32 %arg32, f32 %arg31, f32 %arg12, f32 %arg8, f32 %arg4, f32 %arg16, f32 %arg20, f32 %arg24, f32 %arg28, f32 %arg9, f32 %arg5, f32 %arg13, f32 %arg30, f32 %arg19, f32 %arg34, f32 %arg23, f32 %arg38, f32 %arg27, f32 %arg17, f32 %arg6, f32 %arg21, f32 %arg10, f32 %arg25, f32 %arg14, f32 %arg29, f32 %arg7, f32 %arg18, f32 %arg33, f32 %arg11, f32 %arg22, f32 %arg37, f32 %arg15, f32 %arg26, f32 %arg3, f32 %arg2, f32 %arg1, f32 %arg, i32* %arg40 ], [ ^indirect1 f32 %arg, f32 %arg39, f32 %arg38, f32 %arg37, f32 %arg36, f32 %arg35, f32 %arg34, f32 %arg33, f32 %arg32, f32 %arg31, f32 %arg30, f32 %arg13, f32 %arg12, f32 %arg11, f32 %arg10, f32 %arg9, f32 %arg8, f32 %arg7, f32 %arg6, f32 %arg5, f32 %arg4, f32 %arg3, f32 %arg2, f32 %arg1, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, i32* %arg40 ];
^indirect(f32 %arg, f32 %arg1, f32 %arg2, f32 %arg3, f32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, f32 %arg38, f32 %arg39, i32* %arg40):
    [10 * f32]* %arr = alloc [10 * f32];
    f32 %0 = fadd f32 %arg39, f32 %arg38;
    f32 %1 = fadd f32 %0, f32 %arg37;
    f32 %2 = fadd f32 %1, f32 %arg36;
    f32* %3 = getelementptr &([10 * f32]* %arr)[i32 0][i32 0];
    store f32* %3 with f32 %2;
    f32 %4 = fadd f32 %arg7, f32 %arg13;
    f32 %5 = fadd f32 %4, f32 %arg22;
    f32 %6 = fadd f32 %5, f32 %arg28;
    f32* %7 = getelementptr &([10 * f32]* %arr)[i32 0][i32 1];
    store f32* %7 with f32 %6;
    f32 %8 = fadd f32 %arg6, f32 %arg12;
    f32 %9 = fadd f32 %8, f32 %arg24;
    f32 %10 = fadd f32 %9, f32 %arg31;
    f32* %11 = getelementptr &([10 * f32]* %arr)[i32 0][i32 2];
    store f32* %11 with f32 %10;
    f32 %12 = fadd f32 %arg5, f32 %arg14;
    f32 %13 = fadd f32 %12, f32 %arg26;
    f32 %14 = fadd f32 %13, f32 %arg34;
    f32* %15 = getelementptr &([10 * f32]* %arr)[i32 0][i32 3];
    store f32* %15 with f32 %14;
    f32 %16 = fadd f32 %arg8, f32 %arg21;
    f32 %17 = fadd f32 %16, f32 %arg29;
    f32 %18 = fadd f32 %17, f32 %arg16;
    f32* %19 = getelementptr &([10 * f32]* %arr)[i32 0][i32 4];
    store f32* %19 with f32 %18;
    f32 %20 = fadd f32 %arg9, f32 %arg23;
    f32 %21 = fadd f32 %20, f32 %arg32;
    f32 %22 = fadd f32 %21, f32 %arg18;
    f32* %23 = getelementptr &([10 * f32]* %arr)[i32 0][i32 5];
    store f32* %23 with f32 %22;
    f32 %24 = fadd f32 %arg10, f32 %arg25;
    f32 %25 = fadd f32 %24, f32 %arg35;
    f32 %26 = fadd f32 %25, f32 %arg20;
    f32* %27 = getelementptr &([10 * f32]* %arr)[i32 0][i32 6];
    store f32* %27 with f32 %26;
    f32 %28 = fadd f32 %arg11, f32 %arg27;
    f32 %29 = fadd f32 %28, f32 %arg15;
    f32 %30 = fadd f32 %29, f32 %arg4;
    f32* %31 = getelementptr &([10 * f32]* %arr)[i32 0][i32 7];
    store f32* %31 with f32 %30;
    f32 %32 = fadd f32 %arg3, f32 %arg30;
    f32 %33 = fadd f32 %32, f32 %arg17;
    f32 %34 = fadd f32 %33, f32 %arg2;
    f32* %35 = getelementptr &([10 * f32]* %arr)[i32 0][i32 8];
    store f32* %35 with f32 %34;
    f32 %36 = fadd f32 %arg1, f32 %arg33;
    f32 %37 = fadd f32 %36, f32 %arg19;
    f32 %38 = fadd f32 %37, f32 %arg;
    f32* %39 = getelementptr &([10 * f32]* %arr)[i32 0][i32 9];
    store f32* %39 with f32 %38;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %3);
    i32 %40 = load i32* %arg40;
    f32* %41 = getelementptr &([10 * f32]* %arr)[i32 0][i32 %40];
    f32 %42 = load f32* %41;
    ret f32 %42;
^indirect1(f32 %arg, f32 %arg1, f32 %arg2, f32 %arg3, f32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, f32 %arg38, f32 %arg39, i32* %arg40):
    f32 %0 = fadd f32 %arg, f32 %arg23;
    f32 %1 = fadd f32 %0, f32 %arg22;
    f32 %2 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %arg23, f32 %arg22, f32 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, f32 %arg16, f32 %arg15, f32 %arg14, f32 %arg13, f32 %arg12, f32 %arg11, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, f32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, f32 %arg38, f32 %arg39, f32 %arg10, f32 %arg9, f32 %arg8, f32 %arg7, f32 %arg6, f32 %arg5, f32 %arg4, f32 %arg3, f32 %arg2, f32 %arg1, f32 %1, i32* %arg40);
    ret f32 %2;
}
internal func @params_f40_i24(i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 { NoMemoryWrite } {
^entry(i32 %arg, i32 %arg1, i32 %arg2, f32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, i32 %arg22, f32 %arg23, i32 %arg24, i32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, f32 %arg29, f32 %arg30, i32 %arg31, f32 %arg32, i32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, i32 %arg38, i32 %arg39, f32 %arg40, f32 %arg41, f32 %arg42, i32 %arg43, f32 %arg44, i32 %arg45, i32 %arg46, f32 %arg47, f32 %arg48, f32 %arg49, f32 %arg50, i32 %arg51, i32 %arg52, i32 %arg53, f32 %arg54, f32 %arg55, f32 %arg56, f32 %arg57, f32 %arg58, f32 %arg59, i32 %arg60, f32 %arg61, i32 %arg62, f32 %arg63, i32* %arg64):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0, [ ^indirect i32 %arg10, i32 %arg52, i32 %arg53, i32 %arg15, f32 %arg12, i32 %arg, f32 %arg47, f32 %arg8, f32 %arg19, f32 %arg20, f32 %arg9, f32 %arg54, f32 %arg40, f32 %arg59, f32 %arg49, i32 %arg13, f32 %arg41, f32 %arg34, f32 %arg18, f32 %arg36, i32 %arg51, f32 %arg29, f32 %arg55, i32 %arg4, f32 %arg26, f32 %arg57, i32 %arg31, f32 %arg35, f32 %arg56, i32 %arg5, f32 %arg42, i32 %arg24, f32 %arg3, i32 %arg62, f32 %arg7, f32 %arg30, i32 %arg22, f32 %arg17, i32 %arg45, f32 %arg50, f32 %arg16, f32 %arg44, i32 %arg46, f32 %arg23, f32 %arg61, f32 %arg27, f32 %arg11, f32 %arg37, f32 %arg63, f32 %arg58, f32 %arg21, f32 %arg14, f32 %arg32, i32 %arg25, i32 %arg1, f32 %arg28, i32 %arg6, f32 %arg48, i32 %arg2, i32 %arg39, i32 %arg43, i32 %arg60, i32 %arg33, i32 %arg38, i32* %arg64 ], [ ^indirect1 f32 %arg63, i32 %arg62, f32 %arg61, i32 %arg60, f32 %arg59, f32 %arg28, f32 %arg27, f32 %arg26, i32 %arg25, i32 %arg24, f32 %arg23, i32 %arg22, f32 %arg21, f32 %arg20, f32 %arg19, f32 %arg18, f32 %arg17, f32 %arg58, f32 %arg16, f32 %arg57, i32 %arg15, f32 %arg56, f32 %arg14, i32 %arg13, i32 %arg4, i32 %arg1, i32 %arg2, f32 %arg3, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg29, f32 %arg30, i32 %arg31, f32 %arg32, i32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, i32 %arg38, i32 %arg39, f32 %arg40, f32 %arg41, f32 %arg42, i32 %arg43, f32 %arg44, i32 %arg45, i32 %arg46, f32 %arg47, f32 %arg48, f32 %arg49, f32 %arg50, i32 %arg51, i32 %arg52, i32 %arg53, f32 %arg54, f32 %arg55, i32* %arg64 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i32 %arg20, f32 %arg21, f32 %arg22, i32 %arg23, f32 %arg24, f32 %arg25, i32 %arg26, f32 %arg27, f32 %arg28, i32 %arg29, f32 %arg30, i32 %arg31, f32 %arg32, i32 %arg33, f32 %arg34, f32 %arg35, i32 %arg36, f32 %arg37, i32 %arg38, f32 %arg39, f32 %arg40, f32 %arg41, i32 %arg42, f32 %arg43, f32 %arg44, f32 %arg45, f32 %arg46, f32 %arg47, f32 %arg48, f32 %arg49, f32 %arg50, f32 %arg51, f32 %arg52, i32 %arg53, i32 %arg54, f32 %arg55, i32 %arg56, f32 %arg57, i32 %arg58, i32 %arg59, i32 %arg60, i32 %arg61, i32 %arg62, i32 %arg63, i32* %arg64):
    [10 * f32]* %arr = alloc [10 * f32];
    f32 %0 = fadd f32 %arg30, f32 %arg18;
    f32 %1 = fadd f32 %0, f32 %arg44;
    f32 %2 = fadd f32 %1, f32 %arg46;
    f32* %3 = getelementptr &([10 * f32]* %arr)[i32 0][i32 0];
    store f32* %3 with f32 %2;
    f32 %4 = fadd f32 %arg32, f32 %arg19;
    f32 %5 = fadd f32 %4, f32 %arg50;
    f32 %6 = fadd f32 %5, f32 %arg10;
    f32* %7 = getelementptr &([10 * f32]* %arr)[i32 0][i32 1];
    store f32* %7 with f32 %6;
    f32 %8 = fadd f32 %arg34, f32 %arg21;
    f32 %9 = fadd f32 %8, f32 %arg16;
    f32 %10 = fadd f32 %9, f32 %arg8;
    f32* %11 = getelementptr &([10 * f32]* %arr)[i32 0][i32 2];
    store f32* %11 with f32 %10;
    f32 %12 = fadd f32 %arg37, f32 %arg14;
    f32 %13 = fadd f32 %12, f32 %arg12;
    f32 %14 = fadd f32 %13, f32 %arg7;
    f32* %15 = getelementptr &([10 * f32]* %arr)[i32 0][i32 3];
    store f32* %15 with f32 %14;
    f32 %16 = fadd f32 %arg27, f32 %arg13;
    f32 %17 = fadd f32 %16, f32 %arg11;
    f32 %18 = fadd f32 %17, f32 %arg22;
    f32* %19 = getelementptr &([10 * f32]* %arr)[i32 0][i32 4];
    store f32* %19 with f32 %18;
    f32 %20 = fadd f32 %arg24, f32 %arg17;
    f32 %21 = fadd f32 %20, f32 %arg28;
    f32 %22 = fadd f32 %21, f32 %arg55;
    f32* %23 = getelementptr &([10 * f32]* %arr)[i32 0][i32 5];
    store f32* %23 with f32 %22;
    f32 %24 = fadd f32 %arg57, f32 %arg35;
    f32 %25 = fadd f32 %24, f32 %arg25;
    f32 %26 = fadd f32 %25, f32 %arg6;
    f32* %27 = getelementptr &([10 * f32]* %arr)[i32 0][i32 6];
    store f32* %27 with f32 %26;
    f32 %28 = fadd f32 %arg4, f32 %arg39;
    f32 %29 = fadd f32 %28, f32 %arg40;
    f32 %30 = fadd f32 %29, f32 %arg41;
    f32* %31 = getelementptr &([10 * f32]* %arr)[i32 0][i32 7];
    store f32* %31 with f32 %30;
    f32 %32 = fadd f32 %arg43, f32 %arg45;
    f32 %33 = fadd f32 %32, f32 %arg47;
    f32 %34 = fadd f32 %33, f32 %arg48;
    f32* %35 = getelementptr &([10 * f32]* %arr)[i32 0][i32 8];
    store f32* %35 with f32 %34;
    f32 %36 = fadd f32 %arg49, f32 %arg51;
    f32 %37 = fadd f32 %36, f32 %arg9;
    f32 %38 = fadd f32 %37, f32 %arg52;
    f32* %39 = getelementptr &([10 * f32]* %arr)[i32 0][i32 9];
    store f32* %39 with f32 %38;
    [8 * i32]* %arr2 = alloc [8 * i32];
    i32 %40 = add i32 %arg15, i32 %arg23;
    i32 %41 = add i32 %40, i32 %arg54;
    i32* %42 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 0];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %arg20, i32 %arg29;
    i32 %44 = add i32 %43, i32 %arg56;
    i32* %45 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 1];
    store i32* %45 with i32 %44;
    i32 %46 = add i32 %arg58, i32 %arg36;
    i32 %47 = add i32 %46, i32 %arg26;
    i32* %48 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 2];
    store i32* %48 with i32 %47;
    i32 %49 = add i32 %arg59, i32 %arg31;
    i32 %50 = add i32 %49, i32 %arg38;
    i32* %51 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 3];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %arg60, i32 %arg53;
    i32 %53 = add i32 %52, i32 %arg33;
    i32* %54 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 4];
    store i32* %54 with i32 %53;
    i32 %55 = add i32 %arg61, i32 %arg42;
    i32 %56 = add i32 %55, i32 %arg62;
    i32* %57 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 5];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %arg63, i32 %arg3;
    i32 %59 = add i32 %58, i32 %arg2;
    i32* %60 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 6];
    store i32* %60 with i32 %59;
    i32 %61 = add i32 %arg1, i32 %arg;
    i32 %62 = add i32 %61, i32 %arg5;
    i32* %63 = getelementptr &([8 * i32]* %arr2)[i32 0][i32 7];
    store i32* %63 with i32 %62;
    call (i32, f32*) -> void @putfarray(i32 10, f32* %3);
    call (i32, i32*) -> void @putarray(i32 8, i32* %42);
    i32* %i = alloc i32;
    ubr [ ^while.body [10 * f32]* %arr, [8 * i32]* %arr2, i32* %i, i32* %arg64, i32 0 ];
^indirect1(f32 %arg, i32 %arg1, f32 %arg2, i32 %arg3, f32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i32 %arg20, f32 %arg21, f32 %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, f32 %arg27, i32 %arg28, i32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, i32 %arg33, f32 %arg34, f32 %arg35, f32 %arg36, f32 %arg37, i32 %arg38, f32 %arg39, i32 %arg40, f32 %arg41, f32 %arg42, f32 %arg43, f32 %arg44, i32 %arg45, i32 %arg46, f32 %arg47, f32 %arg48, f32 %arg49, i32 %arg50, f32 %arg51, i32 %arg52, i32 %arg53, f32 %arg54, f32 %arg55, f32 %arg56, f32 %arg57, i32 %arg58, i32 %arg59, i32 %arg60, f32 %arg61, f32 %arg62, i32* %arg63):
    f32 %0 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %arg24, i32 %arg25, i32 %arg26, f32 %arg27, i32 %arg24, i32 %arg28, i32 %arg29, f32 %arg30, f32 %arg31, f32 %arg32, i32 %arg33, f32 %arg34, f32 %arg35, i32 %arg23, f32 %arg22, i32 %arg20, f32 %arg18, f32 %arg16, f32 %arg15, f32 %arg14, f32 %arg13, f32 %arg12, i32 %arg11, f32 %arg10, i32 %arg9, i32 %arg8, f32 %arg7, f32 %arg6, f32 %arg5, f32 %arg36, f32 %arg37, i32 %arg38, f32 %arg39, i32 %arg40, f32 %arg41, f32 %arg42, f32 %arg43, f32 %arg44, i32 %arg45, i32 %arg46, f32 %arg47, f32 %arg48, f32 %arg49, i32 %arg50, f32 %arg51, i32 %arg52, i32 %arg53, f32 %arg54, f32 %arg55, f32 %arg56, f32 %arg57, i32 %arg58, i32 %arg59, i32 %arg60, f32 %arg61, f32 %arg62, f32 %arg21, f32 %arg19, f32 %arg17, f32 %arg4, i32 %arg3, f32 %arg2, i32 %arg1, f32 %arg, i32* %arg63);
    ret f32 %0;
^while.body([10 * f32]* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32* %0 = getelementptr &([8 * i32]* %arg1)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    f32* %2 = getelementptr &([10 * f32]* %arg)[i32 0][i32 %arg4];
    f32 %3 = load f32* %2;
    f32 %4 = s2f i32 %1 to f32;
    f32 %5 = fsub f32 %4, f32 %3;
    i32 %6 = f2s f32 %5 to i32;
    store i32* %0 with i32 %6;
    i32 %7 = add i32 %arg4, i32 1;
    store i32* %arg2 with i32 %7;
    i1 %8 = scmp lt i32 %7, i32 8;
    cbr i1 %8, [ ^while.body [10 * f32]* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32 %7 ], [ ^b [8 * i32]* %arg1, i32* %arg3 ];
^b([8 * i32]* %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    i32* %1 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    f32 %3 = s2f i32 %2 to f32;
    ret f32 %3;
}
internal func @params_fa40(f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 { NoMemoryWrite } {
^entry(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, f32* %arg12, f32* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, f32* %arg17, f32* %arg18, f32* %arg19, f32* %arg20, f32* %arg21, f32* %arg22, f32* %arg23, f32* %arg24, f32* %arg25, f32* %arg26, f32* %arg27, f32* %arg28, f32* %arg29, f32* %arg30, f32* %arg31, f32* %arg32, f32* %arg33, f32* %arg34, f32* %arg35, f32* %arg36, f32* %arg37, f32* %arg38, f32* %arg39, i32* %arg40):
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %0 = load i32* %arg40;
    f32* %1 = getelementptr &(f32* %arg)[i32 %0];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &(f32* %arg1)[i32 %0];
    f32 %4 = load f32* %3;
    f32 %5 = fadd f32 %2, f32 %4;
    f32* %6 = getelementptr &(f32* %arg2)[i32 %0];
    f32 %7 = load f32* %6;
    f32 %8 = fadd f32 %5, f32 %7;
    f32* %9 = getelementptr &(f32* %arg3)[i32 %0];
    f32 %10 = load f32* %9;
    f32 %11 = fadd f32 %8, f32 %10;
    f32* %12 = getelementptr &([10 * f32]* %arr)[i32 0][i32 0];
    store f32* %12 with f32 %11;
    f32* %13 = getelementptr &(f32* %arg4)[i32 %0];
    f32 %14 = load f32* %13;
    f32* %15 = getelementptr &(f32* %arg5)[i32 %0];
    f32 %16 = load f32* %15;
    f32 %17 = fadd f32 %14, f32 %16;
    f32* %18 = getelementptr &(f32* %arg6)[i32 %0];
    f32 %19 = load f32* %18;
    f32 %20 = fadd f32 %17, f32 %19;
    f32* %21 = getelementptr &(f32* %arg7)[i32 %0];
    f32 %22 = load f32* %21;
    f32 %23 = fadd f32 %20, f32 %22;
    f32* %24 = getelementptr &([10 * f32]* %arr)[i32 0][i32 1];
    store f32* %24 with f32 %23;
    f32* %25 = getelementptr &(f32* %arg8)[i32 %0];
    f32 %26 = load f32* %25;
    f32* %27 = getelementptr &(f32* %arg9)[i32 %0];
    f32 %28 = load f32* %27;
    f32 %29 = fadd f32 %26, f32 %28;
    f32* %30 = getelementptr &(f32* %arg10)[i32 %0];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &(f32* %arg11)[i32 %0];
    f32 %34 = load f32* %33;
    f32 %35 = fadd f32 %32, f32 %34;
    f32* %36 = getelementptr &([10 * f32]* %arr)[i32 0][i32 2];
    store f32* %36 with f32 %35;
    f32* %37 = getelementptr &(f32* %arg12)[i32 %0];
    f32 %38 = load f32* %37;
    f32* %39 = getelementptr &(f32* %arg13)[i32 %0];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32* %42 = getelementptr &(f32* %arg14)[i32 %0];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %arg15)[i32 %0];
    f32 %46 = load f32* %45;
    f32 %47 = fadd f32 %44, f32 %46;
    f32* %48 = getelementptr &([10 * f32]* %arr)[i32 0][i32 3];
    store f32* %48 with f32 %47;
    f32* %49 = getelementptr &(f32* %arg16)[i32 %0];
    f32 %50 = load f32* %49;
    f32* %51 = getelementptr &(f32* %arg17)[i32 %0];
    f32 %52 = load f32* %51;
    f32 %53 = fadd f32 %50, f32 %52;
    f32* %54 = getelementptr &(f32* %arg18)[i32 %0];
    f32 %55 = load f32* %54;
    f32 %56 = fadd f32 %53, f32 %55;
    f32* %57 = getelementptr &(f32* %arg19)[i32 %0];
    f32 %58 = load f32* %57;
    f32 %59 = fadd f32 %56, f32 %58;
    f32* %60 = getelementptr &([10 * f32]* %arr)[i32 0][i32 4];
    store f32* %60 with f32 %59;
    f32* %61 = getelementptr &(f32* %arg20)[i32 %0];
    f32 %62 = load f32* %61;
    f32* %63 = getelementptr &(f32* %arg21)[i32 %0];
    f32 %64 = load f32* %63;
    f32 %65 = fadd f32 %62, f32 %64;
    f32* %66 = getelementptr &(f32* %arg22)[i32 %0];
    f32 %67 = load f32* %66;
    f32 %68 = fadd f32 %65, f32 %67;
    f32* %69 = getelementptr &(f32* %arg23)[i32 %0];
    f32 %70 = load f32* %69;
    f32 %71 = fadd f32 %68, f32 %70;
    f32* %72 = getelementptr &([10 * f32]* %arr)[i32 0][i32 5];
    store f32* %72 with f32 %71;
    f32* %73 = getelementptr &(f32* %arg24)[i32 %0];
    f32 %74 = load f32* %73;
    f32* %75 = getelementptr &(f32* %arg25)[i32 %0];
    f32 %76 = load f32* %75;
    f32 %77 = fadd f32 %74, f32 %76;
    f32* %78 = getelementptr &(f32* %arg26)[i32 %0];
    f32 %79 = load f32* %78;
    f32 %80 = fadd f32 %77, f32 %79;
    f32* %81 = getelementptr &(f32* %arg27)[i32 %0];
    f32 %82 = load f32* %81;
    f32 %83 = fadd f32 %80, f32 %82;
    f32* %84 = getelementptr &([10 * f32]* %arr)[i32 0][i32 6];
    store f32* %84 with f32 %83;
    f32* %85 = getelementptr &(f32* %arg28)[i32 %0];
    f32 %86 = load f32* %85;
    f32* %87 = getelementptr &(f32* %arg29)[i32 %0];
    f32 %88 = load f32* %87;
    f32 %89 = fadd f32 %86, f32 %88;
    f32* %90 = getelementptr &(f32* %arg30)[i32 %0];
    f32 %91 = load f32* %90;
    f32 %92 = fadd f32 %89, f32 %91;
    f32* %93 = getelementptr &(f32* %arg31)[i32 %0];
    f32 %94 = load f32* %93;
    f32 %95 = fadd f32 %92, f32 %94;
    f32* %96 = getelementptr &([10 * f32]* %arr)[i32 0][i32 7];
    store f32* %96 with f32 %95;
    f32* %97 = getelementptr &(f32* %arg32)[i32 %0];
    f32 %98 = load f32* %97;
    f32* %99 = getelementptr &(f32* %arg33)[i32 %0];
    f32 %100 = load f32* %99;
    f32 %101 = fadd f32 %98, f32 %100;
    f32* %102 = getelementptr &(f32* %arg34)[i32 %0];
    f32 %103 = load f32* %102;
    f32 %104 = fadd f32 %101, f32 %103;
    f32* %105 = getelementptr &(f32* %arg35)[i32 %0];
    f32 %106 = load f32* %105;
    f32 %107 = fadd f32 %104, f32 %106;
    f32* %108 = getelementptr &([10 * f32]* %arr)[i32 0][i32 8];
    store f32* %108 with f32 %107;
    f32* %109 = getelementptr &(f32* %arg36)[i32 %0];
    f32 %110 = load f32* %109;
    f32* %111 = getelementptr &(f32* %arg37)[i32 %0];
    f32 %112 = load f32* %111;
    f32 %113 = fadd f32 %110, f32 %112;
    f32* %114 = getelementptr &(f32* %arg38)[i32 %0];
    f32 %115 = load f32* %114;
    f32 %116 = fadd f32 %113, f32 %115;
    f32* %117 = getelementptr &(f32* %arg39)[i32 %0];
    f32 %118 = load f32* %117;
    f32 %119 = fadd f32 %116, f32 %118;
    f32* %120 = getelementptr &([10 * f32]* %arr)[i32 0][i32 9];
    store f32* %120 with f32 %119;
    i1 %121 = fcmp neq f32 %118, f32 0;
    i32 %122 = zext i1 %121 to i32;
    f32 %123 = s2f i32 %122 to f32;
    i1 %124 = fcmp neq f32 %123, f32 0;
    i32 %125 = zext i1 %124 to i32;
    f32 %126 = s2f i32 %125 to f32;
    i1 %127 = fcmp neq f32 %126, f32 0;
    cbr i1 %127, [ ^indirect [10 * f32]* %arr, i32 %0, f32* %12 ], [ ^indirect1 f32* %arg39, f32* %arg38, f32* %arg37, f32* %arg36, f32* %arg35, f32* %arg34, f32* %arg33, f32* %arg32, f32* %arg31, f32* %arg30, f32* %arg13, f32* %arg12, f32* %arg11, f32* %arg10, f32* %arg9, f32* %arg8, f32* %arg7, f32* %arg6, f32* %arg5, f32* %arg4, f32* %arg3, f32* %arg2, f32* %arg1, f32* %arg14, f32* %arg15, f32* %arg16, f32* %arg17, f32* %arg18, f32* %arg19, f32* %arg20, f32* %arg21, f32* %arg22, f32* %arg23, f32* %arg24, f32* %arg25, f32* %arg26, f32* %arg27, f32* %arg28, f32* %arg29, f32* %12, i32* %arg40 ];
^indirect([10 * f32]* %arg, i32 %arg1, f32* %arg2):
    call (i32, f32*) -> void @putfarray(i32 10, f32* %arg2);
    f32* %0 = getelementptr &([10 * f32]* %arg)[i32 0][i32 %arg1];
    f32 %1 = load f32* %0;
    ret f32 %1;
^indirect1(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, f32* %arg12, f32* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, f32* %arg17, f32* %arg18, f32* %arg19, f32* %arg20, f32* %arg21, f32* %arg22, f32* %arg23, f32* %arg24, f32* %arg25, f32* %arg26, f32* %arg27, f32* %arg28, f32* %arg29, f32* %arg30, f32* %arg31, f32* %arg32, f32* %arg33, f32* %arg34, f32* %arg35, f32* %arg36, f32* %arg37, f32* %arg38, f32* %arg39, i32* %arg40):
    f32 %0 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %arg22, f32* %arg21, f32* %arg20, f32* %arg19, f32* %arg18, f32* %arg17, f32* %arg16, f32* %arg15, f32* %arg14, f32* %arg13, f32* %arg12, f32* %arg11, f32* %arg10, f32* %arg23, f32* %arg24, f32* %arg25, f32* %arg26, f32* %arg27, f32* %arg28, f32* %arg29, f32* %arg30, f32* %arg31, f32* %arg32, f32* %arg33, f32* %arg34, f32* %arg35, f32* %arg36, f32* %arg37, f32* %arg38, f32* %arg9, f32* %arg8, f32* %arg7, f32* %arg6, f32* %arg5, f32* %arg4, f32* %arg3, f32* %arg2, f32* %arg1, f32* %arg, f32* %arg39, i32* %arg40);
    ret f32 %0;
}
internal func @params_mix(f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 { NoMemoryWrite } {
^entry(f32 %arg, i32* %arg1, i32 %arg2, f32* %arg3, f32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, f32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, f32* %arg16, f32* %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32* %arg21, i32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, i32* %arg26, f32* %arg27, i32* %arg28, i32* %arg29, f32* %arg30, f32 %arg31, f32 %arg32, i32* %arg33, i32 %arg34, f32* %arg35, f32* %arg36, f32 %arg37, f32 %arg38, i32* %arg39, i32* %arg40, i32 %arg41, i32 %arg42, f32 %arg43, f32 %arg44, i32* %arg45, i32 %arg46, f32* %arg47, i32 %arg48, i32* %arg49, i32* %arg50, f32 %arg51, f32 %arg52, f32* %arg53, i32 %arg54, i32* %arg55, f32* %arg56, f32 %arg57, i32 %arg58, f32 %arg59, f32* %arg60, f32* %arg61, f32 %arg62, i32 %arg63, i32* %arg64):
    [10 * f32]* %arr = alloc [10 * f32];
    i32 %0 = load i32* %arg64;
    f32* %1 = getelementptr &(f32* %arg3)[i32 %0];
    f32 %2 = load f32* %1;
    f32 %3 = fadd f32 %arg, f32 %2;
    f32 %4 = fadd f32 %3, f32 %arg4;
    f32 %5 = fadd f32 %4, f32 %arg6;
    f32* %6 = getelementptr &([10 * f32]* %arr)[i32 0][i32 0];
    store f32* %6 with f32 %5;
    f32* %7 = getelementptr &(f32* %arg8)[i32 %0];
    f32 %8 = load f32* %7;
    f32 %9 = fadd f32 %arg7, f32 %8;
    f32* %10 = getelementptr &(f32* %arg12)[i32 %0];
    f32 %11 = load f32* %10;
    f32 %12 = fadd f32 %9, f32 %11;
    f32* %13 = getelementptr &(f32* %arg16)[i32 %0];
    f32 %14 = load f32* %13;
    f32 %15 = fadd f32 %12, f32 %14;
    f32* %16 = getelementptr &([10 * f32]* %arr)[i32 0][i32 1];
    store f32* %16 with f32 %15;
    f32* %17 = getelementptr &(f32* %arg17)[i32 %0];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %18, f32 %arg18;
    f32 %20 = fadd f32 %19, f32 %arg19;
    f32 %21 = fadd f32 %20, f32 %arg20;
    f32* %22 = getelementptr &([10 * f32]* %arr)[i32 0][i32 2];
    store f32* %22 with f32 %21;
    f32* %23 = getelementptr &(f32* %arg21)[i32 %0];
    f32 %24 = load f32* %23;
    f32 %25 = fadd f32 %24, f32 %arg23;
    f32 %26 = fadd f32 %25, f32 %arg24;
    f32 %27 = fadd f32 %26, f32 %arg25;
    f32* %28 = getelementptr &([10 * f32]* %arr)[i32 0][i32 3];
    store f32* %28 with f32 %27;
    f32* %29 = getelementptr &(f32* %arg27)[i32 %0];
    f32 %30 = load f32* %29;
    f32* %31 = getelementptr &(f32* %arg30)[i32 %0];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32 %34 = fadd f32 %33, f32 %arg31;
    f32 %35 = fadd f32 %34, f32 %arg32;
    f32* %36 = getelementptr &([10 * f32]* %arr)[i32 0][i32 4];
    store f32* %36 with f32 %35;
    f32* %37 = getelementptr &(f32* %arg35)[i32 %0];
    f32 %38 = load f32* %37;
    f32* %39 = getelementptr &(f32* %arg36)[i32 %0];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32 %42 = fadd f32 %41, f32 %arg37;
    f32 %43 = fadd f32 %42, f32 %arg38;
    f32* %44 = getelementptr &([10 * f32]* %arr)[i32 0][i32 5];
    store f32* %44 with f32 %43;
    f32 %45 = fadd f32 %arg43, f32 %arg44;
    f32* %46 = getelementptr &(f32* %arg47)[i32 %0];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    f32 %49 = fadd f32 %48, f32 %arg51;
    f32* %50 = getelementptr &([10 * f32]* %arr)[i32 0][i32 6];
    store f32* %50 with f32 %49;
    f32* %51 = getelementptr &(f32* %arg53)[i32 %0];
    f32 %52 = load f32* %51;
    f32 %53 = fadd f32 %arg52, f32 %52;
    f32* %54 = getelementptr &(f32* %arg56)[i32 %0];
    f32 %55 = load f32* %54;
    f32 %56 = fadd f32 %53, f32 %55;
    f32 %57 = fadd f32 %56, f32 %arg57;
    f32* %58 = getelementptr &([10 * f32]* %arr)[i32 0][i32 7];
    store f32* %58 with f32 %57;
    f32* %59 = getelementptr &(f32* %arg60)[i32 %0];
    f32 %60 = load f32* %59;
    f32 %61 = fadd f32 %arg59, f32 %60;
    f32* %62 = getelementptr &(f32* %arg61)[i32 %0];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32 %65 = fadd f32 %64, f32 %arg62;
    f32* %66 = getelementptr &([10 * f32]* %arr)[i32 0][i32 8];
    store f32* %66 with f32 %65;
    f32* %67 = getelementptr &([10 * f32]* %arr)[i32 0][i32 9];
    store f32* %67 with f32 0;
    [10 * i32]* %arr2 = alloc [10 * i32];
    i32* %68 = getelementptr &(i32* %arg1)[i32 %0];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %69, i32 %arg2;
    i32 %71 = add i32 %70, i32 %arg5;
    i32* %72 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 0];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %arg9)[i32 %0];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %74, i32 %arg10;
    i32 %76 = add i32 %75, i32 %arg11;
    i32* %77 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 1];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %arg13)[i32 %0];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %arg14)[i32 %0];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %79, i32 %81;
    i32 %83 = add i32 %82, i32 %arg15;
    i32* %84 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 2];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %arg26)[i32 %0];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %arg22, i32 %86;
    i32* %88 = getelementptr &(i32* %arg28)[i32 %0];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %87, i32 %89;
    i32* %91 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 3];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %arg29)[i32 %0];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %arg33)[i32 %0];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32 %97 = add i32 %96, i32 %arg34;
    i32* %98 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 4];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %arg39)[i32 %0];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %arg40)[i32 %0];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    i32 %104 = add i32 %103, i32 %arg41;
    i32* %105 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 5];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %arg45)[i32 %0];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %arg42, i32 %107;
    i32 %109 = add i32 %108, i32 %arg46;
    i32* %110 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 6];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %arg49)[i32 %0];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %arg48, i32 %112;
    i32* %114 = getelementptr &(i32* %arg50)[i32 %0];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %113, i32 %115;
    i32* %117 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 7];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %arg55)[i32 %0];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %arg54, i32 %119;
    i32 %121 = add i32 %120, i32 %arg58;
    i32 %122 = add i32 %121, i32 %arg63;
    i32* %123 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 8];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &([10 * i32]* %arr2)[i32 0][i32 9];
    store i32* %124 with i32 0;
    i1 %125 = scmp neq i32 %arg63, i32 0;
    cbr i1 %125, [ ^if.then [10 * i32]* %arr2, [10 * f32]* %arr, i32* %72, f32* %66, f32* %6, i32* %arg64 ], [ ^indirect f32* %arg30, i32* %arg29, i32* %arg28, f32* %arg27, i32* %arg26, f32 %arg25, i32 %arg15, f32 %arg37, f32 %arg, f32 %arg62, f32* %arg12, i32 %arg34, f32* %arg21, i32 %arg11, i32* %arg33, f32* %arg16, f32* %arg17, f32 %arg18, f32 %arg19, f32* %arg61, i32* %arg9, f32 %arg31, f32 %arg20, i32 %arg63, i32 %arg10, f32 %arg32, i32 %arg22, i32 %arg2, f32 %arg23, i32* %arg13, f32* %arg35, f32 %arg24, i32* %arg14, f32* %arg36, f32 %arg38, i32* %arg39, i32* %arg40, i32 %arg41, i32 %arg42, f32 %arg43, f32 %arg44, i32* %arg45, i32 %arg46, f32* %arg47, i32 %arg48, i32* %arg49, i32* %arg50, f32 %arg51, f32 %arg52, f32* %arg53, i32 %arg54, i32* %arg55, f32 %arg4, f32* %arg56, i32 %arg5, f32 %arg57, f32 %arg6, i32 %arg58, f32 %arg7, f32 %arg59, f32* %arg8, f32* %arg60, f32* %6, i32* %72, i32* %arg64 ];
^if.then([10 * i32]* %arg, [10 * f32]* %arg1, i32* %arg2, f32* %arg3, f32* %arg4, i32* %arg5):
    call (i32, f32*) -> void @putfarray(i32 10, f32* %arg4);
    call (i32, i32*) -> void @putarray(i32 10, i32* %arg2);
    i32* %i = alloc i32;
    ubr [ ^while.body [10 * f32]* %arg1, [10 * i32]* %arg, i32* %i, f32* %arg3, i32* %arg5, i32 0 ];
^indirect(f32* %arg, i32* %arg1, i32* %arg2, f32* %arg3, i32* %arg4, f32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, i32 %arg11, f32* %arg12, i32 %arg13, i32* %arg14, f32* %arg15, f32* %arg16, f32 %arg17, f32 %arg18, f32* %arg19, i32* %arg20, f32 %arg21, f32 %arg22, i32 %arg23, i32 %arg24, f32 %arg25, i32 %arg26, i32 %arg27, f32 %arg28, i32* %arg29, f32* %arg30, f32 %arg31, i32* %arg32, f32* %arg33, f32 %arg34, i32* %arg35, i32* %arg36, i32 %arg37, i32 %arg38, f32 %arg39, f32 %arg40, i32* %arg41, i32 %arg42, f32* %arg43, i32 %arg44, i32* %arg45, i32* %arg46, f32 %arg47, f32 %arg48, f32* %arg49, i32 %arg50, i32* %arg51, f32 %arg52, f32* %arg53, i32 %arg54, f32 %arg55, f32 %arg56, i32 %arg57, f32 %arg58, f32 %arg59, f32* %arg60, f32* %arg61, f32* %arg62, i32* %arg63, i32* %arg64):
    f32 %0 = s2f i32 %arg23 to f32;
    i32 %1 = f2s f32 %arg9 to i32;
    i32 %2 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %arg8, i32* %arg63, i32 %arg27, f32* %arg62, f32 %arg52, i32 %arg54, f32 %arg56, f32 %arg58, f32* %arg60, i32* %arg20, i32 %arg24, i32 %arg13, f32* %arg10, i32* %arg29, i32* %arg32, i32 %arg6, f32* %arg15, f32* %arg16, f32 %arg17, f32 %arg18, f32 %arg22, f32* %arg12, i32 %arg26, f32 %arg28, f32 %arg31, f32 %arg5, i32* %arg4, f32* %arg3, i32* %arg2, i32* %arg1, f32* %arg, f32 %arg21, f32 %arg25, i32* %arg14, i32 %arg11, f32* %arg30, f32* %arg33, f32 %arg7, f32 %arg34, i32* %arg35, i32* %arg36, i32 %arg37, i32 %arg38, f32 %arg39, f32 %arg40, i32* %arg41, i32 %arg42, f32* %arg43, i32 %arg44, i32* %arg45, i32* %arg46, f32 %arg47, f32 %arg48, f32* %arg49, i32 %arg50, i32* %arg51, f32* %arg53, f32 %arg55, i32 %arg57, f32 %arg59, f32* %arg61, f32* %arg19, f32 %0, i32 %1, i32* %arg64);
    ret i32 %2;
^while.body([10 * f32]* %arg, [10 * i32]* %arg1, i32* %arg2, f32* %arg3, i32* %arg4, i32 %arg5):
    i32* %0 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    f32* %2 = getelementptr &([10 * f32]* %arg)[i32 0][i32 %arg5];
    f32 %3 = load f32* %2;
    f32 %4 = s2f i32 %1 to f32;
    f32 %5 = fsub f32 %4, f32 %3;
    i32 %6 = f2s f32 %5 to i32;
    store i32* %0 with i32 %6;
    i32 %7 = add i32 %arg5, i32 1;
    store i32* %arg2 with i32 %7;
    i1 %8 = scmp lt i32 %7, i32 10;
    cbr i1 %8, [ ^while.body [10 * f32]* %arg, [10 * i32]* %arg1, i32* %arg2, f32* %arg3, i32* %arg4, i32 %7 ], [ ^b [10 * i32]* %arg1, f32* %arg3, i32* %arg4 ];
^b([10 * i32]* %arg, f32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    i32* %1 = getelementptr &([10 * i32]* %arg)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    f32 %3 = load f32* %arg1;
    f32 %4 = s2f i32 %2 to f32;
    f32 %5 = fmul f32 %4, f32 %3;
    i32 %6 = f2s f32 %5 to i32;
    ret i32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %k = alloc i32;
    [40 * [3 * f32]]* %arr = alloc [40 * [3 * f32]];
    [24 * [3 * i32]]* %arr2 = alloc [24 * [3 * i32]];
    i32* %i = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %k with i32 %0;
    store i32* %i with i32 0;
    ubr [ ^while.body [24 * [3 * i32]]* %arr2, [40 * [3 * f32]]* %arr, i32* %i, i32* %k, i32 0 ];
^while.body([24 * [3 * i32]]* %arg, [40 * [3 * f32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    [3 * f32]* %0 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 %arg4];
    f32* %1 = getelementptr &([3 * f32]* %0)[i32 0][i32 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    i32 %3 = load i32* %arg2;
    i32 %4 = add i32 %3, i32 1;
    store i32* %arg2 with i32 %4;
    i1 %5 = scmp lt i32 %4, i32 40;
    cbr i1 %5, [ ^while.body [24 * [3 * i32]]* %arg, [40 * [3 * f32]]* %arg1, i32* %arg2, i32* %arg3, i32 %4 ], [ ^b [24 * [3 * i32]]* %arg, [40 * [3 * f32]]* %arg1, i32* %arg2, i32* %arg3 ];
^b([24 * [3 * i32]]* %arg, [40 * [3 * f32]]* %arg1, i32* %arg2, i32* %arg3):
    store i32* %arg2 with i32 0;
    ubr [ ^while.body1 [40 * [3 * f32]]* %arg1, [24 * [3 * i32]]* %arg, i32* %arg2, i32* %arg3, i32 0 ];
^while.body1([40 * [3 * f32]]* %arg, [24 * [3 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    [3 * i32]* %0 = getelementptr &([24 * [3 * i32]]* %arg1)[i32 0][i32 %arg4];
    i32* %1 = getelementptr &([3 * i32]* %0)[i32 0][i32 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg3;
    i32 %5 = add i32 %3, i32 1;
    store i32* %arg2 with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 24;
    cbr i1 %6, [ ^while.body1 [40 * [3 * f32]]* %arg, [24 * [3 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %5 ], [ ^b1 [24 * [3 * i32]]* %arg1, [40 * [3 * f32]]* %arg, i32* %arg3, i32 %4 ];
^b1([24 * [3 * i32]]* %arg, [40 * [3 * f32]]* %arg1, i32* %arg2, i32 %arg3):
    f32* %0 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 0][i32 %arg3];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 1][i32 %arg3];
    f32 %3 = load f32* %2;
    f32* %4 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 2][i32 %arg3];
    f32 %5 = load f32* %4;
    f32* %6 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 3][i32 %arg3];
    f32 %7 = load f32* %6;
    f32* %8 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 4][i32 %arg3];
    f32 %9 = load f32* %8;
    f32* %10 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 5][i32 %arg3];
    f32 %11 = load f32* %10;
    f32* %12 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 6][i32 %arg3];
    f32 %13 = load f32* %12;
    f32* %14 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 7][i32 %arg3];
    f32 %15 = load f32* %14;
    f32* %16 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 8][i32 %arg3];
    f32 %17 = load f32* %16;
    f32* %18 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 9][i32 %arg3];
    f32 %19 = load f32* %18;
    f32* %20 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 10][i32 %arg3];
    f32 %21 = load f32* %20;
    f32* %22 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 11][i32 %arg3];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 12][i32 %arg3];
    f32 %25 = load f32* %24;
    f32* %26 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 13][i32 %arg3];
    f32 %27 = load f32* %26;
    f32* %28 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 14][i32 %arg3];
    f32 %29 = load f32* %28;
    f32* %30 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 15][i32 %arg3];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 16][i32 %arg3];
    f32 %33 = load f32* %32;
    f32* %34 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 17][i32 %arg3];
    f32 %35 = load f32* %34;
    f32* %36 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 18][i32 %arg3];
    f32 %37 = load f32* %36;
    f32* %38 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 19][i32 %arg3];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 20][i32 %arg3];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 21][i32 %arg3];
    f32 %43 = load f32* %42;
    f32* %44 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 22][i32 %arg3];
    f32 %45 = load f32* %44;
    f32* %46 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 23][i32 %arg3];
    f32 %47 = load f32* %46;
    f32* %48 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 24][i32 %arg3];
    f32 %49 = load f32* %48;
    f32* %50 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 25][i32 %arg3];
    f32 %51 = load f32* %50;
    f32* %52 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 26][i32 %arg3];
    f32 %53 = load f32* %52;
    f32* %54 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 27][i32 %arg3];
    f32 %55 = load f32* %54;
    f32* %56 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 28][i32 %arg3];
    f32 %57 = load f32* %56;
    f32* %58 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 29][i32 %arg3];
    f32 %59 = load f32* %58;
    f32* %60 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 30][i32 %arg3];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 31][i32 %arg3];
    f32 %63 = load f32* %62;
    f32* %64 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 32][i32 %arg3];
    f32 %65 = load f32* %64;
    f32* %66 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 33][i32 %arg3];
    f32 %67 = load f32* %66;
    f32* %68 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 34][i32 %arg3];
    f32 %69 = load f32* %68;
    f32* %70 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 35][i32 %arg3];
    f32 %71 = load f32* %70;
    f32* %72 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 36][i32 %arg3];
    f32 %73 = load f32* %72;
    f32* %74 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 37][i32 %arg3];
    f32 %75 = load f32* %74;
    f32* %76 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 38][i32 %arg3];
    f32 %77 = load f32* %76;
    f32* %78 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 39][i32 %arg3];
    f32 %79 = load f32* %78;
    f32 %80 = call (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, i32*) -> f32 @params_f40(f32 %1, f32 %3, f32 %5, f32 %7, f32 %9, f32 %11, f32 %13, f32 %15, f32 %17, f32 %19, f32 %21, f32 %23, f32 %25, f32 %27, f32 %29, f32 %31, f32 %33, f32 %35, f32 %37, f32 %39, f32 %41, f32 %43, f32 %45, f32 %47, f32 %49, f32 %51, f32 %53, f32 %55, f32 %57, f32 %59, f32 %61, f32 %63, f32 %65, f32 %67, f32 %69, f32 %71, f32 %73, f32 %75, f32 %77, f32 %79, i32* %arg2);
    i32* %81 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 23][i32 %arg3];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 2][i32 %arg3];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 6][i32 %arg3];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 1][i32 %arg3];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 4][i32 %arg3];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 5][i32 %arg3];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 22][i32 %arg3];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 0][i32 %arg3];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 19][i32 %arg3];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 7][i32 %arg3];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 10][i32 %arg3];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 13][i32 %arg3];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 8][i32 %arg3];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 17][i32 %arg3];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 18][i32 %arg3];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 9][i32 %arg3];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 12][i32 %arg3];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 11][i32 %arg3];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 16][i32 %arg3];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 3][i32 %arg3];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 21][i32 %arg3];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 20][i32 %arg3];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 15][i32 %arg3];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 14][i32 %arg3];
    i32 %128 = load i32* %127;
    f32 %129 = call (i32, i32, i32, f32, i32, i32, i32, f32, f32, f32, i32, f32, f32, i32, f32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, f32, i32, f32, i32, f32, f32, f32, f32, i32, i32, f32, f32, f32, i32, f32, i32, i32, f32, f32, f32, f32, i32, i32, i32, f32, f32, f32, f32, f32, f32, i32, f32, i32, f32, i32*) -> f32 @params_f40_i24(i32 %82, i32 %84, i32 %86, f32 %9, i32 %88, i32 %90, i32 %92, f32 %17, f32 %31, f32 %15, i32 %94, f32 %7, f32 %57, i32 %96, f32 %75, i32 %98, f32 %61, f32 %25, f32 %3, f32 %23, f32 %77, f32 %13, i32 %100, f32 %65, i32 %102, i32 %104, f32 %41, f32 %67, f32 %47, f32 %19, f32 %51, i32 %106, f32 %79, i32 %108, f32 %43, f32 %33, f32 %11, f32 %69, i32 %110, i32 %112, f32 %29, f32 %21, f32 %1, i32 %114, f32 %63, i32 %116, i32 %118, f32 %55, f32 %49, f32 %27, f32 %59, i32 %120, i32 %122, i32 %124, f32 %37, f32 %39, f32 %45, f32 %53, f32 %73, f32 %35, i32 %126, f32 %5, i32 %128, f32 %71, i32* %arg2);
    f32* %130 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 0][i32 0];
    f32* %131 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 1][i32 0];
    f32* %132 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 2][i32 0];
    f32* %133 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 3][i32 0];
    f32* %134 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 4][i32 0];
    f32* %135 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 5][i32 0];
    f32* %136 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 6][i32 0];
    f32* %137 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 7][i32 0];
    f32* %138 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 8][i32 0];
    f32* %139 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 9][i32 0];
    f32* %140 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 10][i32 0];
    f32* %141 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 11][i32 0];
    f32* %142 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 12][i32 0];
    f32* %143 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 13][i32 0];
    f32* %144 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 14][i32 0];
    f32* %145 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 15][i32 0];
    f32* %146 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 16][i32 0];
    f32* %147 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 17][i32 0];
    f32* %148 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 18][i32 0];
    f32* %149 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 19][i32 0];
    f32* %150 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 20][i32 0];
    f32* %151 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 21][i32 0];
    f32* %152 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 22][i32 0];
    f32* %153 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 23][i32 0];
    f32* %154 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 24][i32 0];
    f32* %155 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 25][i32 0];
    f32* %156 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 26][i32 0];
    f32* %157 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 27][i32 0];
    f32* %158 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 28][i32 0];
    f32* %159 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 29][i32 0];
    f32* %160 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 30][i32 0];
    f32* %161 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 31][i32 0];
    f32* %162 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 32][i32 0];
    f32* %163 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 33][i32 0];
    f32* %164 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 34][i32 0];
    f32* %165 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 35][i32 0];
    f32* %166 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 36][i32 0];
    f32* %167 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 37][i32 0];
    f32* %168 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 38][i32 0];
    f32* %169 = getelementptr &([40 * [3 * f32]]* %arg1)[i32 0][i32 39][i32 0];
    f32 %170 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, i32*) -> f32 @params_fa40(f32* %130, f32* %131, f32* %132, f32* %133, f32* %134, f32* %135, f32* %136, f32* %137, f32* %138, f32* %139, f32* %140, f32* %141, f32* %142, f32* %143, f32* %144, f32* %145, f32* %146, f32* %147, f32* %148, f32* %149, f32* %150, f32* %151, f32* %152, f32* %153, f32* %154, f32* %155, f32* %156, f32* %157, f32* %158, f32* %159, f32* %160, f32* %161, f32* %162, f32* %163, f32* %164, f32* %165, f32* %166, f32* %167, f32* %168, f32* %169, i32* %arg2);
    i32* %171 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 0][i32 0];
    i32* %172 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 3][i32 0];
    i32* %173 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 6][i32 0];
    i32* %174 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 7][i32 0];
    i32* %175 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 10][i32 0];
    i32* %176 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 11][i32 0];
    i32* %177 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 12][i32 0];
    i32* %178 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 13][i32 0];
    i32* %179 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 15][i32 0];
    i32* %180 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 16][i32 0];
    i32* %181 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 19][i32 0];
    i32* %182 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 22][i32 0];
    i32* %183 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 23][i32 0];
    i32* %184 = getelementptr &([24 * [3 * i32]]* %arg)[i32 0][i32 1][i32 0];
    i32 %185 = call (f32, i32*, i32, f32*, f32, i32, f32, f32, f32*, i32*, i32, i32, f32*, i32*, i32*, i32, f32*, f32*, f32, f32, f32, f32*, i32, f32, f32, f32, i32*, f32*, i32*, i32*, f32*, f32, f32, i32*, i32, f32*, f32*, f32, f32, i32*, i32*, i32, i32, f32, f32, i32*, i32, f32*, i32, i32*, i32*, f32, f32, f32*, i32, i32*, f32*, f32, i32, f32, f32*, f32*, f32, i32, i32*) -> i32 @params_mix(f32 %1, i32* %171, i32 %88, f32* %131, f32 %5, i32 %84, f32 %7, f32 %9, f32* %135, i32* %172, i32 %90, i32 %92, f32* %136, i32* %173, i32* %174, i32 %106, f32* %137, f32* %138, f32 %19, f32 %21, f32 %23, f32* %142, i32 %112, f32 %27, f32 %29, f32 %31, i32* %175, f32* %146, i32* %176, i32* %177, f32* %147, f32 %37, f32 %39, i32* %178, i32 %128, f32* %150, f32* %151, f32 %45, f32 %47, i32* %179, i32* %180, i32 %108, i32 %110, f32 %49, f32 %51, i32* %181, i32 %124, f32* %156, i32 %122, i32* %182, i32* %183, f32 %55, f32 %57, f32* %159, i32 %96, i32* %184, f32* %160, f32 %63, i32 %84, f32 %65, f32* %163, f32* %164, f32 %71, i32 %120, i32* %arg2);
    call (f32) -> void @putfloat(f32 %80);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %129);
    call (i32) -> void @putch(i32 10);
    call (f32) -> void @putfloat(f32 %170);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %185);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
