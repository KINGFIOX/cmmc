internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %17];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = scmp le i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^while.body;
  ^while.body:
    i32 %8 = phi [^entry, i32 %5] [^if.then, i32 %16] [^if.then2, i32 %25] [^if.then6, i32 %40] [^if.then9, i32 %57];
    i1 %9 = scmp le i32 %len, i32 %8;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^if.then7, i32 %50] [^b3, i32 0] [^if.then10, i32 %68] [^if.else11, i32 0] [^b5, i32 0] [^if.then12, i32 %96] [^if.then14, i32 0] [^if.else16, i32 0] [^if.then17, i32 %130] [^b7, i32 0] [^if.else18, i32 0] [^if.then19, i32 0] [^if.else20, i32 0] [^if.then20, i32 1] [^b9, i32 1] [^if.then24, i32 %166] [^b12, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^if.then25, i32 0] [^if.then26, i32 1] [^if.then30, i32 %199] [^if.else28, i32 0] [^if.else29, i32 0] [^if.else30, i32 0] [^if.else31, i32 0] [^b13, i32 1] [^if.then34, i32 %236] [^if.else33, i32 0] [^if.else34, i32 0] [^if.else35, i32 0] [^if.then35, i32 1] [^b16, i32 0] [^b18, i32 1] [^if.else37, i32 0] [^if.else38, i32 0] [^b19, i32 0] [^b20, i32 0] [^if.else41, i32 0] [^if.else42, i32 0] [^while.body11, i32 0] [^b25, i32 0] [^b26, i32 1] [^while.header2, i32 1] [^b27, i32 0] [^while.body13, i32 1] [^b31, i32 0] [^while.body18, i32 0] [^if.else57, i32 0] [^b34, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %10;
  ^b1:
    i1 %11 = scmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %16 = add i32 %12, i32 1;
    store i32* %0 with i32 %16;
    ubr ^while.body;
  ^if.then1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %buf)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 123;
    cbr i1 %20(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %21 = scmp eq i32 %6, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %22 = load i32* %13;
    i1 %23 = scmp eq i32 %22, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else4;
  ^if.then2:
    i32 %24 = load i32* %0;
    i32 %25 = add i32 %24, i32 1;
    store i32* %0 with i32 %25;
    ubr ^while.body;
  ^if.else2:
    i32 %26 = load i32* %18;
    i1 %27 = scmp eq i32 %26, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then3:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 43;
    cbr i1 %31(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else3:
    i1 %32 = scmp eq i32 %6, i32 2;
    cbr i1 %32(prob = 0.5), ^if.then5, ^if.else7;
  ^if.else4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %buf)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then6, ^if.else8;
  ^if.then4:
    i32 %37 = add i32 %28, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then5:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.then6:
    i32 %40 = add i32 %33, i32 1;
    store i32* %0 with i32 %40;
    ubr ^while.body;
  ^if.else5:
    i32 %41 = load i32* %0;
    i32* %42 = getelementptr &(i32* %buf)[i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp eq i32 %43, i32 34;
    cbr i1 %44(prob = 0.5), ^if.then7, ^if.else9;
  ^if.else6:
    i32 %45 = load i32* %29;
    i1 %46 = scmp eq i32 %45, i32 45;
    cbr i1 %46(prob = 0.5), ^if.then4, ^indirect;
  ^if.else7:
    i1 %47 = scmp eq i32 %6, i32 3;
    cbr i1 %47(prob = 0.5), ^if.then8, ^if.else10;
  ^if.else8:
    i32 %48 = load i32* %34;
    i1 %49 = scmp eq i32 %48, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then9, ^b1;
  ^if.then7:
    i32 %50 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b3:
    i32 %51 = phi [^if.then4, i32 %37] [^indirect, i32 %53];
    i1 %52 = scmp le i32 %len, i32 %51;
    cbr i1 %52(prob = 0.5), ^b, ^if.else11;
  ^indirect:
    i32 %53 = load i32* %0;
    ubr ^b3;
  ^if.then8:
    i32 %54 = load i32* %0;
    i32 %55 = add i32 %54, i32 1;
    store i32* %0 with i32 %55;
    ubr ^while.body2;
  ^if.then9:
    i32 %56 = load i32* %0;
    i32 %57 = add i32 %56, i32 1;
    store i32* %0 with i32 %57;
    ubr ^while.body;
  ^while.header:
    i32 %58 = phi [^if.then5, i32 %39] [^b4, i32 %93];
    i1 %59 = scmp gt i32 %len, i32 %58;
    cbr i1 %59(prob = 0.97), ^while.body1, ^indirect1;
  ^if.else9:
    i32 %60 = load i32* %42;
    i1 %61 = scmp lt i32 %60, i32 58;
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp gt i32 %60, i32 47;
    i32 %64 = select i1 %63 ? i32 %62 : i32 0;
    i1 %65 = scmp eq i32 %64, i32 1;
    cbr i1 %65(prob = 0.5), ^if.then10, ^if.else12;
  ^if.else10:
    i1 %66 = scmp eq i32 %6, i32 4;
    cbr i1 %66(prob = 0.5), ^if.then11, ^if.else13;
  ^indirect1:
    i32 %67 = load i32* %0;
    ubr ^b5;
  ^if.then10:
    i32 %68 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else11:
    i32 %69 = load i32* %0;
    i32* %70 = getelementptr &(i32* %buf)[i32 %69];
    i32 %71 = load i32* %70;
    i1 %72 = scmp lt i32 %71, i32 58;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp gt i32 %71, i32 47;
    i32 %75 = select i1 %74 ? i32 %73 : i32 0;
    i1 %76 = scmp eq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^b, ^while.header1;
  ^while.body1:
    i32 %77 = load i32* %0;
    i32* %78 = getelementptr &(i32* %buf)[i32 %77];
    i32 %79 = load i32* %78;
    i1 %80 = scmp eq i32 %79, i32 34;
    cbr i1 %80(prob = 0.5), ^b5, ^b4;
  ^if.then11:
    i32 %81 = load i32* %0;
    i32 %82 = add i32 %81, i32 1;
    store i32* %0 with i32 %82;
    ubr ^while.body3;
  ^while.body2:
    i32 %83 = phi [^if.then8, i32 %55] [^if.then15, i32 %113] [^if.then21, i32 %158] [^if.then28, i32 %195] [^if.then32, i32 %230];
    i1 %84 = scmp le i32 %len, i32 %83;
    cbr i1 %84(prob = 0.5), ^if.then13, ^b6;
  ^if.else12:
    i32 %85 = load i32* %0;
    i32* %86 = getelementptr &(i32* %buf)[i32 %85];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 43;
    cbr i1 %88(prob = 0.5), ^if.then12, ^if.else14;
  ^if.else13:
    i1 %89 = scmp eq i32 %6, i32 5;
    cbr i1 %89(prob = 0.5), ^if.then14, ^if.else15;
  ^b4:
    i32 %90 = load i32* %78;
    i1 %91 = scmp eq i32 %90, i32 92;
    i32 %92 = select i1 %91 ? i32 2 : i32 1;
    i32 %93 = add i32 %77, i32 %92;
    store i32* %0 with i32 %93;
    ubr ^while.header;
  ^b5:
    i32 %94 = phi [^indirect1, i32 %67] [^while.body1, i32 %77];
    i1 %95 = scmp le i32 %len, i32 %94;
    cbr i1 %95(prob = 0.5), ^b, ^if.else16;
  ^if.then12:
    i32 %96 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then13:
    i32 %97 = load i32* %0;
    i1 %98 = scmp gt i32 %len, i32 %97;
    cbr i1 %98(prob = 0.5), ^if.then16, ^b7;
  ^while.header1:
    i32 %99 = phi [^if.else11, i32 %69] [^b10, i32 %156];
    i1 %100 = scmp gt i32 %len, i32 %99;
    cbr i1 %100(prob = 0.97), ^while.body4, ^indirect2;
  ^b6:
    i32 %101 = load i32* %0;
    i32* %102 = getelementptr &(i32* %buf)[i32 %101];
    i32 %103 = load i32* %102;
    i1 %104 = scmp eq i32 %103, i32 32;
    cbr i1 %104(prob = 0.5), ^if.then15, ^if.else17;
  ^while.body3:
    i32 %105 = phi [^if.then11, i32 %82] [^if.then22, i32 %159] [^if.then29, i32 %197] [^if.then33, i32 %231] [^if.then37, i32 %273];
    i1 %106 = scmp le i32 %len, i32 %105;
    cbr i1 %106(prob = 0.5), ^if.then18, ^b8;
  ^if.then14:
    i32 %107 = load i32* %0;
    i32 %108 = add i32 %107, i32 3;
    i1 %109 = scmp le i32 %len, i32 %108;
    cbr i1 %109(prob = 0.5), ^b, ^if.else18;
  ^if.else14:
    i32 %110 = load i32* %86;
    i1 %111 = scmp eq i32 %110, i32 45;
    cbr i1 %111(prob = 0.5), ^if.then17, ^if.else19;
  ^if.else15:
    i1 %112 = scmp eq i32 %6, i32 6;
    cbr i1 %112(prob = 0.5), ^if.then19, ^if.else20;
  ^if.then15:
    i32 %113 = add i32 %101, i32 1;
    store i32* %0 with i32 %113;
    ubr ^while.body2;
  ^indirect2:
    i32 %114 = load i32* %0;
    ubr ^b11;
  ^if.else16:
    i32 %115 = load i32* %0;
    i32* %116 = getelementptr &(i32* %buf)[i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = scmp neq i32 %117, i32 34;
    cbr i1 %118(prob = 0.5), ^b, ^b9;
  ^while.body4:
    i32 %119 = load i32* %0;
    i32* %120 = getelementptr &(i32* %buf)[i32 %119];
    i32 %121 = load i32* %120;
    i1 %122 = scmp lt i32 %121, i32 58;
    i32 %123 = zext i1 %122 to i32;
    i1 %124 = scmp gt i32 %121, i32 47;
    i32 %125 = select i1 %124 ? i32 %123 : i32 0;
    i1 %126 = scmp neq i32 %125, i32 1;
    cbr i1 %126(prob = 0.5), ^b11, ^b10;
  ^if.then16:
    i32* %127 = getelementptr &(i32* %buf)[i32 %97];
    i32 %128 = load i32* %127;
    i1 %129 = scmp eq i32 %128, i32 93;
    cbr i1 %129(prob = 0.5), ^if.then20, ^b7;
  ^if.then17:
    i32 %130 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then18:
    i32 %131 = load i32* %0;
    i1 %132 = scmp gt i32 %len, i32 %131;
    cbr i1 %132(prob = 0.5), ^if.then23, ^b12;
  ^b7:
    i32 %133 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %134 = scmp eq i32 %133, i32 0;
    cbr i1 %134(prob = 0.5), ^b, ^entry1;
  ^if.else17:
    i32 %135 = load i32* %102;
    i1 %136 = scmp eq i32 %135, i32 9;
    cbr i1 %136(prob = 0.5), ^if.then21, ^if.else21;
  ^b8:
    i32 %137 = load i32* %0;
    i32* %138 = getelementptr &(i32* %buf)[i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = scmp eq i32 %139, i32 32;
    cbr i1 %140(prob = 0.5), ^if.then22, ^if.else22;
  ^if.else18:
    i32* %141 = getelementptr &(i32* %buf)[i32 %107];
    i32 %142 = load i32* %141;
    i1 %143 = scmp neq i32 %142, i32 116;
    cbr i1 %143(prob = 0.5), ^b, ^if.else23;
  ^if.then19:
    i32 %144 = load i32* %0;
    i32 %145 = add i32 %144, i32 4;
    i1 %146 = scmp le i32 %len, i32 %145;
    cbr i1 %146(prob = 0.5), ^b, ^if.else24;
  ^if.else19:
    i32 %147 = load i32* %0;
    i32* %148 = getelementptr &(i32* %buf)[i32 %147];
    i32 %149 = load i32* %148;
    i1 %150 = scmp eq i32 %149, i32 116;
    cbr i1 %150(prob = 0.5), ^if.then24, ^if.else25;
  ^if.else20:
    i1 %151 = scmp eq i32 %6, i32 7;
    cbr i1 %151(prob = 0.5), ^if.then25, ^b;
  ^if.then20:
    i32 %152 = load i32* %0;
    i32 %153 = add i32 %152, i32 1;
    store i32* %0 with i32 %153;
    ubr ^b;
  ^b9:
    i32 %154 = phi [^if.else16, i32 %115] [^b25, i32 %302] [^if.else57, i32 %451];
    i32 %155 = add i32 %154, i32 1;
    store i32* %0 with i32 %155;
    ubr ^b;
  ^b10:
    i32 %156 = add i32 %119, i32 1;
    store i32* %0 with i32 %156;
    ubr ^while.header1;
  ^if.then21:
    i32 %157 = load i32* %0;
    i32 %158 = add i32 %157, i32 1;
    store i32* %0 with i32 %158;
    ubr ^while.body2;
  ^if.then22:
    i32 %159 = add i32 %137, i32 1;
    store i32* %0 with i32 %159;
    ubr ^while.body3;
  ^b11:
    i32 %160 = phi [^indirect2, i32 %114] [^while.body4, i32 %119];
    i1 %161 = scmp gt i32 %len, i32 %160;
    cbr i1 %161(prob = 0.5), ^if.then27, ^indirect3;
  ^entry1:
    i32 %162 = load i32* %0;
    ubr ^while.body5;
  ^if.then23:
    i32* %163 = getelementptr &(i32* %buf)[i32 %131];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %164, i32 125;
    cbr i1 %165(prob = 0.5), ^if.then26, ^b12;
  ^if.then24:
    i32 %166 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b12:
    i32 %167 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %168 = scmp eq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^b, ^entry2;
  ^if.else21:
    i32 %169 = load i32* %0;
    i32* %170 = getelementptr &(i32* %buf)[i32 %169];
    i32 %171 = load i32* %170;
    i1 %172 = scmp eq i32 %171, i32 10;
    cbr i1 %172(prob = 0.5), ^if.then28, ^if.else26;
  ^if.else22:
    i32 %173 = load i32* %138;
    i1 %174 = scmp eq i32 %173, i32 9;
    cbr i1 %174(prob = 0.5), ^if.then29, ^if.else27;
  ^if.else23:
    i32 %175 = load i32* %0;
    i32 %176 = add i32 %175, i32 1;
    i32* %177 = getelementptr &(i32* %buf)[i32 %176];
    i32 %178 = load i32* %177;
    i1 %179 = scmp neq i32 %178, i32 114;
    cbr i1 %179(prob = 0.5), ^b, ^if.else28;
  ^if.else24:
    i32* %180 = getelementptr &(i32* %buf)[i32 %144];
    i32 %181 = load i32* %180;
    i1 %182 = scmp neq i32 %181, i32 102;
    cbr i1 %182(prob = 0.5), ^b, ^if.else29;
  ^if.then25:
    i32 %183 = load i32* %0;
    i32 %184 = add i32 %183, i32 3;
    i1 %185 = scmp le i32 %len, i32 %184;
    cbr i1 %185(prob = 0.5), ^b, ^if.else30;
  ^if.else25:
    i32 %186 = load i32* %148;
    i1 %187 = scmp eq i32 %186, i32 102;
    cbr i1 %187(prob = 0.5), ^if.then30, ^if.else31;
  ^if.then26:
    i32 %188 = load i32* %0;
    i32 %189 = add i32 %188, i32 1;
    store i32* %0 with i32 %189;
    ubr ^b;
  ^indirect3:
    i32 %190 = load i32* %0;
    ubr ^b13;
  ^if.then27:
    i32 %191 = load i32* %0;
    i32* %192 = getelementptr &(i32* %buf)[i32 %191];
    i32 %193 = load i32* %192;
    i1 %194 = scmp eq i32 %193, i32 46;
    cbr i1 %194(prob = 0.5), ^if.then31, ^b13;
  ^if.then28:
    i32 %195 = add i32 %169, i32 1;
    store i32* %0 with i32 %195;
    ubr ^while.body2;
  ^if.then29:
    i32 %196 = load i32* %0;
    i32 %197 = add i32 %196, i32 1;
    store i32* %0 with i32 %197;
    ubr ^while.body3;
  ^entry2:
    i32 %198 = load i32* %0;
    ubr ^while.body6;
  ^if.then30:
    i32 %199 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^while.body5:
    i32 %200 = phi [^entry1, i32 %162] [^if.then36, i32 %271] [^if.then39, i32 %298] [^if.then43, i32 %334] [^if.then49, i32 %368];
    i1 %201 = scmp le i32 %len, i32 %200;
    cbr i1 %201(prob = 0.5), ^b14, ^b15;
  ^if.else26:
    i32 %202 = load i32* %170;
    i1 %203 = scmp eq i32 %202, i32 13;
    cbr i1 %203(prob = 0.5), ^if.then32, ^if.then13;
  ^if.else27:
    i32 %204 = load i32* %0;
    i32* %205 = getelementptr &(i32* %buf)[i32 %204];
    i32 %206 = load i32* %205;
    i1 %207 = scmp eq i32 %206, i32 10;
    cbr i1 %207(prob = 0.5), ^if.then33, ^if.else32;
  ^if.else28:
    i32 %208 = add i32 %175, i32 2;
    i32* %209 = getelementptr &(i32* %buf)[i32 %208];
    i32 %210 = load i32* %209;
    i1 %211 = scmp neq i32 %210, i32 117;
    cbr i1 %211(prob = 0.5), ^b, ^if.else33;
  ^if.else29:
    i32 %212 = load i32* %0;
    i32 %213 = add i32 %212, i32 1;
    i32* %214 = getelementptr &(i32* %buf)[i32 %213];
    i32 %215 = load i32* %214;
    i1 %216 = scmp neq i32 %215, i32 97;
    cbr i1 %216(prob = 0.5), ^b, ^if.else34;
  ^if.else30:
    i32* %217 = getelementptr &(i32* %buf)[i32 %183];
    i32 %218 = load i32* %217;
    i1 %219 = scmp neq i32 %218, i32 110;
    cbr i1 %219(prob = 0.5), ^b, ^if.else35;
  ^if.else31:
    i32 %220 = load i32* %0;
    i32* %221 = getelementptr &(i32* %buf)[i32 %220];
    i32 %222 = load i32* %221;
    i1 %223 = scmp eq i32 %222, i32 110;
    cbr i1 %223(prob = 0.5), ^if.then34, ^b;
  ^if.then31:
    i32 %224 = phi [^if.then27, i32 %191] [^while.body7, i32 %225];
    i32 %225 = add i32 %224, i32 1;
    i1 %226 = scmp gt i32 %len, i32 %225;
    store i32* %0 with i32 %225;
    cbr i1 %226(prob = 0.97), ^while.body7, ^b13;
  ^b13:
    i32 %227 = phi [^indirect3, i32 %190] [^if.then27, i32 %191] [^if.then31, i32 %225] [^while.body7, i32 %225];
    i1 %228 = scmp gt i32 %len, i32 %227;
    cbr i1 %228(prob = 0.5), ^if.then35, ^b;
  ^if.then32:
    i32 %229 = load i32* %0;
    i32 %230 = add i32 %229, i32 1;
    store i32* %0 with i32 %230;
    ubr ^while.body2;
  ^if.then33:
    i32 %231 = add i32 %204, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.body3;
  ^b14:
    i32 %232 = load i32* %0;
    i32* %233 = getelementptr &(i32* %buf)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = scmp eq i32 %234, i32 44;
    cbr i1 %235(prob = 0.97), ^while.body8, ^while.body9;
  ^if.then34:
    i32 %236 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b15:
    i32 %237 = load i32* %0;
    i32* %238 = getelementptr &(i32* %buf)[i32 %237];
    i32 %239 = load i32* %238;
    i1 %240 = scmp eq i32 %239, i32 32;
    cbr i1 %240(prob = 0.5), ^if.then36, ^if.else36;
  ^while.body6:
    i32 %241 = phi [^entry2, i32 %198] [^if.then40, i32 %299] [^if.then44, i32 %336] [^if.then50, i32 %369] [^if.then54, i32 %388];
    i1 %242 = scmp le i32 %len, i32 %241;
    cbr i1 %242(prob = 0.5), ^b16, ^b17;
  ^if.else32:
    i32 %243 = load i32* %205;
    i1 %244 = scmp eq i32 %243, i32 13;
    cbr i1 %244(prob = 0.5), ^if.then37, ^if.then18;
  ^if.else33:
    i32 %245 = load i32* %0;
    i32 %246 = add i32 %245, i32 3;
    i32* %247 = getelementptr &(i32* %buf)[i32 %246];
    i32 %248 = load i32* %247;
    i1 %249 = scmp neq i32 %248, i32 101;
    cbr i1 %249(prob = 0.5), ^b, ^b18;
  ^if.else34:
    i32 %250 = add i32 %212, i32 2;
    i32* %251 = getelementptr &(i32* %buf)[i32 %250];
    i32 %252 = load i32* %251;
    i1 %253 = scmp neq i32 %252, i32 108;
    cbr i1 %253(prob = 0.5), ^b, ^if.else37;
  ^if.else35:
    i32 %254 = load i32* %0;
    i32 %255 = add i32 %254, i32 1;
    i32* %256 = getelementptr &(i32* %buf)[i32 %255];
    i32 %257 = load i32* %256;
    i1 %258 = scmp neq i32 %257, i32 117;
    cbr i1 %258(prob = 0.5), ^b, ^if.else38;
  ^while.body7:
    i32* %259 = getelementptr &(i32* %buf)[i32 %225];
    i32 %260 = load i32* %259;
    i1 %261 = scmp lt i32 %260, i32 58;
    i32 %262 = zext i1 %261 to i32;
    i1 %263 = scmp gt i32 %260, i32 47;
    i32 %264 = select i1 %263 ? i32 %262 : i32 0;
    i1 %265 = scmp neq i32 %264, i32 1;
    cbr i1 %265(prob = 0.5), ^b13, ^if.then31;
  ^while.body8:
    i32 %266 = add i32 %232, i32 1;
    store i32* %0 with i32 %266;
    ubr ^while.body10;
  ^if.then35:
    i32 %267 = load i32* %0;
    i32* %268 = getelementptr &(i32* %buf)[i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = scmp eq i32 %269, i32 101;
    cbr i1 %270(prob = 0.5), ^if.then38, ^b;
  ^if.then36:
    i32 %271 = add i32 %237, i32 1;
    store i32* %0 with i32 %271;
    ubr ^while.body5;
  ^if.then37:
    i32 %272 = load i32* %0;
    i32 %273 = add i32 %272, i32 1;
    store i32* %0 with i32 %273;
    ubr ^while.body3;
  ^b16:
    i32 %274 = load i32* %0;
    i1 %275 = scmp le i32 %len, i32 %274;
    cbr i1 %275(prob = 0.5), ^b, ^b20;
  ^while.body9:
    i32 %276 = phi [^b14, i32 %232] [^if.then42, i32 %333] [^if.then48, i32 %366] [^if.then53, i32 %386] [^if.then57, i32 %413];
    i1 %277 = scmp le i32 %len, i32 %276;
    cbr i1 %277(prob = 0.5), ^b19, ^b21;
  ^if.else36:
    i32 %278 = load i32* %238;
    i1 %279 = scmp eq i32 %278, i32 9;
    cbr i1 %279(prob = 0.5), ^if.then39, ^if.else39;
  ^b17:
    i32 %280 = load i32* %0;
    i32* %281 = getelementptr &(i32* %buf)[i32 %280];
    i32 %282 = load i32* %281;
    i1 %283 = scmp eq i32 %282, i32 32;
    cbr i1 %283(prob = 0.5), ^if.then40, ^if.else40;
  ^b18:
    i32 %284 = phi [^if.else33, i32 %245] [^if.else42, i32 %321];
    i32 %285 = add i32 %284, i32 4;
    store i32* %0 with i32 %285;
    ubr ^b;
  ^if.else37:
    i32 %286 = load i32* %0;
    i32 %287 = add i32 %286, i32 3;
    i32* %288 = getelementptr &(i32* %buf)[i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = scmp neq i32 %289, i32 115;
    cbr i1 %290(prob = 0.5), ^b, ^if.else41;
  ^if.else38:
    i32 %291 = add i32 %254, i32 2;
    i32* %292 = getelementptr &(i32* %buf)[i32 %291];
    i32 %293 = load i32* %292;
    i1 %294 = scmp neq i32 %293, i32 108;
    cbr i1 %294(prob = 0.5), ^b, ^if.else42;
  ^if.then38:
    i32 %295 = add i32 %267, i32 1;
    i1 %296 = scmp gt i32 %len, i32 %295;
    store i32* %0 with i32 %295;
    cbr i1 %296(prob = 0.5), ^if.then41, ^b22;
  ^if.then39:
    i32 %297 = load i32* %0;
    i32 %298 = add i32 %297, i32 1;
    store i32* %0 with i32 %298;
    ubr ^while.body5;
  ^if.then40:
    i32 %299 = add i32 %280, i32 1;
    store i32* %0 with i32 %299;
    ubr ^while.body6;
  ^while.body10:
    i32 %300 = phi [^while.body8, i32 %266] [^if.then46, i32 %360] [^if.then52, i32 %383] [^if.then55, i32 %409] [^if.then58, i32 %419];
    i1 %301 = scmp le i32 %len, i32 %300;
    cbr i1 %301(prob = 0.5), ^while.body11, ^b24;
  ^b19:
    i32 %302 = load i32* %0;
    i1 %303 = scmp le i32 %len, i32 %302;
    cbr i1 %303(prob = 0.5), ^b, ^b25;
  ^b20:
    i32* %304 = getelementptr &(i32* %buf)[i32 %274];
    i32 %305 = load i32* %304;
    i1 %306 = scmp neq i32 %305, i32 58;
    cbr i1 %306(prob = 0.5), ^b, ^b23;
  ^b21:
    i32 %307 = load i32* %0;
    i32* %308 = getelementptr &(i32* %buf)[i32 %307];
    i32 %309 = load i32* %308;
    i1 %310 = scmp eq i32 %309, i32 32;
    cbr i1 %310(prob = 0.5), ^if.then42, ^if.else43;
  ^if.else39:
    i32 %311 = load i32* %0;
    i32* %312 = getelementptr &(i32* %buf)[i32 %311];
    i32 %313 = load i32* %312;
    i1 %314 = scmp eq i32 %313, i32 10;
    cbr i1 %314(prob = 0.5), ^if.then43, ^if.else44;
  ^if.else40:
    i32 %315 = load i32* %281;
    i1 %316 = scmp eq i32 %315, i32 9;
    cbr i1 %316(prob = 0.5), ^if.then44, ^if.else45;
  ^if.else41:
    i32 %317 = add i32 %286, i32 4;
    i32* %318 = getelementptr &(i32* %buf)[i32 %317];
    i32 %319 = load i32* %318;
    i1 %320 = scmp neq i32 %319, i32 101;
    cbr i1 %320(prob = 0.5), ^b, ^b26;
  ^if.else42:
    i32 %321 = load i32* %0;
    i32 %322 = add i32 %321, i32 3;
    i32* %323 = getelementptr &(i32* %buf)[i32 %322];
    i32 %324 = load i32* %323;
    i1 %325 = scmp neq i32 %324, i32 108;
    cbr i1 %325(prob = 0.5), ^b, ^b18;
  ^if.then41:
    i32* %326 = getelementptr &(i32* %buf)[i32 %295];
    i32 %327 = load i32* %326;
    i1 %328 = scmp eq i32 %327, i32 43;
    cbr i1 %328(prob = 0.5), ^if.then45, ^indirect4;
  ^b22:
    i32 %329 = phi [^if.then38, i32 %295] [^if.then45, i32 %357] [^indirect4, i32 %358];
    i1 %330 = scmp gt i32 %len, i32 %329;
    cbr i1 %330(prob = 0.5), ^if.then47, ^indirect5;
  ^while.body11:
    i32 %331 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %332 = scmp eq i32 %331, i32 0;
    cbr i1 %332(prob = 0.5), ^b, ^entry1;
  ^if.then42:
    i32 %333 = add i32 %307, i32 1;
    store i32* %0 with i32 %333;
    ubr ^while.body9;
  ^if.then43:
    i32 %334 = add i32 %311, i32 1;
    store i32* %0 with i32 %334;
    ubr ^while.body5;
  ^if.then44:
    i32 %335 = load i32* %0;
    i32 %336 = add i32 %335, i32 1;
    store i32* %0 with i32 %336;
    ubr ^while.body6;
  ^b23:
    i32 %337 = load i32* %0;
    i32 %338 = add i32 %337, i32 1;
    store i32* %0 with i32 %338;
    ubr ^while.body12;
  ^b24:
    i32 %339 = load i32* %0;
    i32* %340 = getelementptr &(i32* %buf)[i32 %339];
    i32 %341 = load i32* %340;
    i1 %342 = scmp eq i32 %341, i32 32;
    cbr i1 %342(prob = 0.5), ^if.then46, ^if.else46;
  ^b25:
    i32* %343 = getelementptr &(i32* %buf)[i32 %302];
    i32 %344 = load i32* %343;
    i1 %345 = scmp neq i32 %344, i32 93;
    cbr i1 %345(prob = 0.5), ^b, ^b9;
  ^if.else43:
    i32 %346 = load i32* %308;
    i1 %347 = scmp eq i32 %346, i32 9;
    cbr i1 %347(prob = 0.5), ^if.then48, ^if.else47;
  ^if.else44:
    i32 %348 = load i32* %312;
    i1 %349 = scmp eq i32 %348, i32 13;
    cbr i1 %349(prob = 0.5), ^if.then49, ^b14;
  ^if.else45:
    i32 %350 = load i32* %0;
    i32* %351 = getelementptr &(i32* %buf)[i32 %350];
    i32 %352 = load i32* %351;
    i1 %353 = scmp eq i32 %352, i32 10;
    cbr i1 %353(prob = 0.5), ^if.then50, ^if.else48;
  ^b26:
    i32 %354 = load i32* %0;
    i32 %355 = add i32 %354, i32 5;
    store i32* %0 with i32 %355;
    ubr ^b;
  ^if.then45:
    i32 %356 = load i32* %0;
    i32 %357 = add i32 %356, i32 1;
    store i32* %0 with i32 %357;
    ubr ^b22;
  ^indirect4:
    i32 %358 = load i32* %0;
    ubr ^b22;
  ^indirect5:
    i32 %359 = load i32* %0;
    ubr ^while.header2;
  ^if.then46:
    i32 %360 = add i32 %339, i32 1;
    store i32* %0 with i32 %360;
    ubr ^while.body10;
  ^if.then47:
    i32 %361 = load i32* %0;
    i32* %362 = getelementptr &(i32* %buf)[i32 %361];
    i32 %363 = load i32* %362;
    i1 %364 = scmp eq i32 %363, i32 45;
    cbr i1 %364(prob = 0.5), ^if.then51, ^while.header2;
  ^if.then48:
    i32 %365 = load i32* %0;
    i32 %366 = add i32 %365, i32 1;
    store i32* %0 with i32 %366;
    ubr ^while.body9;
  ^if.then49:
    i32 %367 = load i32* %0;
    i32 %368 = add i32 %367, i32 1;
    store i32* %0 with i32 %368;
    ubr ^while.body5;
  ^if.then50:
    i32 %369 = add i32 %350, i32 1;
    store i32* %0 with i32 %369;
    ubr ^while.body6;
  ^if.else46:
    i32 %370 = load i32* %340;
    i1 %371 = scmp eq i32 %370, i32 9;
    cbr i1 %371(prob = 0.5), ^if.then52, ^if.else49;
  ^while.body12:
    i32 %372 = phi [^b23, i32 %338] [^if.then56, i32 %410] [^if.then59, i32 %421] [^if.then60, i32 %428] [^if.then62, i32 %442];
    i1 %373 = scmp le i32 %len, i32 %372;
    cbr i1 %373(prob = 0.5), ^b27, ^b28;
  ^if.else47:
    i32 %374 = load i32* %0;
    i32* %375 = getelementptr &(i32* %buf)[i32 %374];
    i32 %376 = load i32* %375;
    i1 %377 = scmp eq i32 %376, i32 10;
    cbr i1 %377(prob = 0.5), ^if.then53, ^if.else50;
  ^if.else48:
    i32 %378 = load i32* %351;
    i1 %379 = scmp eq i32 %378, i32 13;
    cbr i1 %379(prob = 0.5), ^if.then54, ^b16;
  ^if.then51:
    i32 %380 = phi [^if.then47, i32 %361] [^while.body13, i32 %401];
    i32 %381 = add i32 %380, i32 1;
    store i32* %0 with i32 %381;
    ubr ^while.header2;
  ^if.then52:
    i32 %382 = load i32* %0;
    i32 %383 = add i32 %382, i32 1;
    store i32* %0 with i32 %383;
    ubr ^while.body10;
  ^while.header2:
    i32 %384 = phi [^indirect5, i32 %359] [^if.then47, i32 %361] [^if.then51, i32 %381];
    i1 %385 = scmp gt i32 %len, i32 %384;
    cbr i1 %385(prob = 0.97), ^while.body13, ^b;
  ^if.then53:
    i32 %386 = add i32 %374, i32 1;
    store i32* %0 with i32 %386;
    ubr ^while.body9;
  ^if.then54:
    i32 %387 = load i32* %0;
    i32 %388 = add i32 %387, i32 1;
    store i32* %0 with i32 %388;
    ubr ^while.body6;
  ^if.else49:
    i32 %389 = load i32* %0;
    i32* %390 = getelementptr &(i32* %buf)[i32 %389];
    i32 %391 = load i32* %390;
    i1 %392 = scmp eq i32 %391, i32 10;
    cbr i1 %392(prob = 0.5), ^if.then55, ^if.else51;
  ^b27:
    i32 %393 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %394 = scmp eq i32 %393, i32 0;
    cbr i1 %394(prob = 0.5), ^b, ^entry3;
  ^b28:
    i32 %395 = load i32* %0;
    i32* %396 = getelementptr &(i32* %buf)[i32 %395];
    i32 %397 = load i32* %396;
    i1 %398 = scmp eq i32 %397, i32 32;
    cbr i1 %398(prob = 0.5), ^if.then56, ^if.else52;
  ^if.else50:
    i32 %399 = load i32* %375;
    i1 %400 = scmp eq i32 %399, i32 13;
    cbr i1 %400(prob = 0.5), ^if.then57, ^b19;
  ^while.body13:
    i32 %401 = load i32* %0;
    i32* %402 = getelementptr &(i32* %buf)[i32 %401];
    i32 %403 = load i32* %402;
    i1 %404 = scmp lt i32 %403, i32 58;
    i32 %405 = zext i1 %404 to i32;
    i1 %406 = scmp gt i32 %403, i32 47;
    i32 %407 = select i1 %406 ? i32 %405 : i32 0;
    i1 %408 = scmp neq i32 %407, i32 1;
    cbr i1 %408(prob = 0.5), ^b, ^if.then51;
  ^if.then55:
    i32 %409 = add i32 %389, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body10;
  ^if.then56:
    i32 %410 = add i32 %395, i32 1;
    store i32* %0 with i32 %410;
    ubr ^while.body12;
  ^entry3:
    i32 %411 = load i32* %0;
    ubr ^while.body14;
  ^if.then57:
    i32 %412 = load i32* %0;
    i32 %413 = add i32 %412, i32 1;
    store i32* %0 with i32 %413;
    ubr ^while.body9;
  ^if.else51:
    i32 %414 = load i32* %390;
    i1 %415 = scmp eq i32 %414, i32 13;
    cbr i1 %415(prob = 0.5), ^if.then58, ^while.body11;
  ^if.else52:
    i32 %416 = load i32* %396;
    i1 %417 = scmp eq i32 %416, i32 9;
    cbr i1 %417(prob = 0.5), ^if.then59, ^if.else53;
  ^if.then58:
    i32 %418 = load i32* %0;
    i32 %419 = add i32 %418, i32 1;
    store i32* %0 with i32 %419;
    ubr ^while.body10;
  ^if.then59:
    i32 %420 = load i32* %0;
    i32 %421 = add i32 %420, i32 1;
    store i32* %0 with i32 %421;
    ubr ^while.body12;
  ^while.body14:
    i32 %422 = phi [^entry3, i32 %411] [^if.then61, i32 %440] [^if.then63, i32 %448] [^if.then65, i32 %464] [^if.then68, i32 %481];
    i1 %423 = scmp le i32 %len, i32 %422;
    cbr i1 %423(prob = 0.5), ^b29, ^b30;
  ^if.else53:
    i32 %424 = load i32* %0;
    i32* %425 = getelementptr &(i32* %buf)[i32 %424];
    i32 %426 = load i32* %425;
    i1 %427 = scmp eq i32 %426, i32 10;
    cbr i1 %427(prob = 0.5), ^if.then60, ^if.else54;
  ^if.then60:
    i32 %428 = add i32 %424, i32 1;
    store i32* %0 with i32 %428;
    ubr ^while.body12;
  ^b29:
    i32 %429 = load i32* %0;
    i32* %430 = getelementptr &(i32* %buf)[i32 %429];
    i32 %431 = load i32* %430;
    i1 %432 = scmp eq i32 %431, i32 44;
    cbr i1 %432(prob = 0.97), ^while.body15, ^while.body16;
  ^b30:
    i32 %433 = load i32* %0;
    i32* %434 = getelementptr &(i32* %buf)[i32 %433];
    i32 %435 = load i32* %434;
    i1 %436 = scmp eq i32 %435, i32 32;
    cbr i1 %436(prob = 0.5), ^if.then61, ^if.else55;
  ^if.else54:
    i32 %437 = load i32* %425;
    i1 %438 = scmp eq i32 %437, i32 13;
    cbr i1 %438(prob = 0.5), ^if.then62, ^b27;
  ^while.body15:
    i32 %439 = add i32 %429, i32 1;
    store i32* %0 with i32 %439;
    ubr ^while.body17;
  ^if.then61:
    i32 %440 = add i32 %433, i32 1;
    store i32* %0 with i32 %440;
    ubr ^while.body14;
  ^if.then62:
    i32 %441 = load i32* %0;
    i32 %442 = add i32 %441, i32 1;
    store i32* %0 with i32 %442;
    ubr ^while.body12;
  ^while.body16:
    i32 %443 = phi [^b29, i32 %429] [^if.then64, i32 %463] [^if.then67, i32 %479] [^if.then70, i32 %492] [^if.then72, i32 %507];
    i1 %444 = scmp le i32 %len, i32 %443;
    cbr i1 %444(prob = 0.5), ^b31, ^b32;
  ^if.else55:
    i32 %445 = load i32* %434;
    i1 %446 = scmp eq i32 %445, i32 9;
    cbr i1 %446(prob = 0.5), ^if.then63, ^if.else56;
  ^if.then63:
    i32 %447 = load i32* %0;
    i32 %448 = add i32 %447, i32 1;
    store i32* %0 with i32 %448;
    ubr ^while.body14;
  ^while.body17:
    i32 %449 = phi [^while.body15, i32 %439] [^if.then66, i32 %476] [^if.then69, i32 %489] [^if.then71, i32 %499] [^if.then74, i32 %512];
    i1 %450 = scmp le i32 %len, i32 %449;
    cbr i1 %450(prob = 0.5), ^while.body18, ^b33;
  ^b31:
    i32 %451 = load i32* %0;
    i1 %452 = scmp le i32 %len, i32 %451;
    cbr i1 %452(prob = 0.5), ^b, ^if.else57;
  ^b32:
    i32 %453 = load i32* %0;
    i32* %454 = getelementptr &(i32* %buf)[i32 %453];
    i32 %455 = load i32* %454;
    i1 %456 = scmp eq i32 %455, i32 32;
    cbr i1 %456(prob = 0.5), ^if.then64, ^if.else58;
  ^if.else56:
    i32 %457 = load i32* %0;
    i32* %458 = getelementptr &(i32* %buf)[i32 %457];
    i32 %459 = load i32* %458;
    i1 %460 = scmp eq i32 %459, i32 10;
    cbr i1 %460(prob = 0.5), ^if.then65, ^if.else59;
  ^while.body18:
    i32 %461 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %462 = scmp eq i32 %461, i32 0;
    cbr i1 %462(prob = 0.5), ^b, ^entry4;
  ^if.then64:
    i32 %463 = add i32 %453, i32 1;
    store i32* %0 with i32 %463;
    ubr ^while.body16;
  ^if.then65:
    i32 %464 = add i32 %457, i32 1;
    store i32* %0 with i32 %464;
    ubr ^while.body14;
  ^b33:
    i32 %465 = load i32* %0;
    i32* %466 = getelementptr &(i32* %buf)[i32 %465];
    i32 %467 = load i32* %466;
    i1 %468 = scmp eq i32 %467, i32 32;
    cbr i1 %468(prob = 0.5), ^if.then66, ^if.else60;
  ^if.else57:
    i32* %469 = getelementptr &(i32* %buf)[i32 %451];
    i32 %470 = load i32* %469;
    i1 %471 = scmp neq i32 %470, i32 125;
    cbr i1 %471(prob = 0.5), ^b, ^b9;
  ^if.else58:
    i32 %472 = load i32* %454;
    i1 %473 = scmp eq i32 %472, i32 9;
    cbr i1 %473(prob = 0.5), ^if.then67, ^if.else61;
  ^if.else59:
    i32 %474 = load i32* %458;
    i1 %475 = scmp eq i32 %474, i32 13;
    cbr i1 %475(prob = 0.5), ^if.then68, ^b29;
  ^if.then66:
    i32 %476 = add i32 %465, i32 1;
    store i32* %0 with i32 %476;
    ubr ^while.body17;
  ^entry4:
    i32 %477 = load i32* %0;
    ubr ^while.body19;
  ^if.then67:
    i32 %478 = load i32* %0;
    i32 %479 = add i32 %478, i32 1;
    store i32* %0 with i32 %479;
    ubr ^while.body16;
  ^if.then68:
    i32 %480 = load i32* %0;
    i32 %481 = add i32 %480, i32 1;
    store i32* %0 with i32 %481;
    ubr ^while.body14;
  ^if.else60:
    i32 %482 = load i32* %466;
    i1 %483 = scmp eq i32 %482, i32 9;
    cbr i1 %483(prob = 0.5), ^if.then69, ^if.else62;
  ^if.else61:
    i32 %484 = load i32* %0;
    i32* %485 = getelementptr &(i32* %buf)[i32 %484];
    i32 %486 = load i32* %485;
    i1 %487 = scmp eq i32 %486, i32 10;
    cbr i1 %487(prob = 0.5), ^if.then70, ^if.else63;
  ^if.then69:
    i32 %488 = load i32* %0;
    i32 %489 = add i32 %488, i32 1;
    store i32* %0 with i32 %489;
    ubr ^while.body17;
  ^while.body19:
    i32 %490 = phi [^entry4, i32 %477] [^if.then73, i32 %510] [^if.then75, i32 %519] [^if.then76, i32 %526] [^if.then77, i32 %532];
    i1 %491 = scmp le i32 %len, i32 %490;
    cbr i1 %491(prob = 0.5), ^b34, ^b35;
  ^if.then70:
    i32 %492 = add i32 %484, i32 1;
    store i32* %0 with i32 %492;
    ubr ^while.body16;
  ^if.else62:
    i32 %493 = load i32* %0;
    i32* %494 = getelementptr &(i32* %buf)[i32 %493];
    i32 %495 = load i32* %494;
    i1 %496 = scmp eq i32 %495, i32 10;
    cbr i1 %496(prob = 0.5), ^if.then71, ^if.else64;
  ^if.else63:
    i32 %497 = load i32* %485;
    i1 %498 = scmp eq i32 %497, i32 13;
    cbr i1 %498(prob = 0.5), ^if.then72, ^b31;
  ^if.then71:
    i32 %499 = add i32 %493, i32 1;
    store i32* %0 with i32 %499;
    ubr ^while.body17;
  ^b34:
    i32 %500 = load i32* %0;
    i1 %501 = scmp le i32 %len, i32 %500;
    cbr i1 %501(prob = 0.5), ^b, ^b36;
  ^b35:
    i32 %502 = load i32* %0;
    i32* %503 = getelementptr &(i32* %buf)[i32 %502];
    i32 %504 = load i32* %503;
    i1 %505 = scmp eq i32 %504, i32 32;
    cbr i1 %505(prob = 0.5), ^if.then73, ^if.else65;
  ^if.then72:
    i32 %506 = load i32* %0;
    i32 %507 = add i32 %506, i32 1;
    store i32* %0 with i32 %507;
    ubr ^while.body16;
  ^if.else64:
    i32 %508 = load i32* %494;
    i1 %509 = scmp eq i32 %508, i32 13;
    cbr i1 %509(prob = 0.5), ^if.then74, ^while.body18;
  ^if.then73:
    i32 %510 = add i32 %502, i32 1;
    store i32* %0 with i32 %510;
    ubr ^while.body19;
  ^if.then74:
    i32 %511 = load i32* %0;
    i32 %512 = add i32 %511, i32 1;
    store i32* %0 with i32 %512;
    ubr ^while.body17;
  ^b36:
    i32* %513 = getelementptr &(i32* %buf)[i32 %500];
    i32 %514 = load i32* %513;
    i1 %515 = scmp neq i32 %514, i32 58;
    cbr i1 %515(prob = 0.5), ^b, ^b37;
  ^if.else65:
    i32 %516 = load i32* %503;
    i1 %517 = scmp eq i32 %516, i32 9;
    cbr i1 %517(prob = 0.5), ^if.then75, ^if.else66;
  ^if.then75:
    i32 %518 = load i32* %0;
    i32 %519 = add i32 %518, i32 1;
    store i32* %0 with i32 %519;
    ubr ^while.body19;
  ^b37:
    i32 %520 = load i32* %0;
    i32 %521 = add i32 %520, i32 1;
    store i32* %0 with i32 %521;
    ubr ^while.body20;
  ^if.else66:
    i32 %522 = load i32* %0;
    i32* %523 = getelementptr &(i32* %buf)[i32 %522];
    i32 %524 = load i32* %523;
    i1 %525 = scmp eq i32 %524, i32 10;
    cbr i1 %525(prob = 0.5), ^if.then76, ^if.else67;
  ^if.then76:
    i32 %526 = add i32 %522, i32 1;
    store i32* %0 with i32 %526;
    ubr ^while.body19;
  ^while.body20:
    i32 %527 = phi [^b37, i32 %521] [^if.then78, i32 %539] [^if.then79, i32 %543] [^if.then80, i32 %548] [^if.then81, i32 %552];
    i1 %528 = scmp le i32 %len, i32 %527;
    cbr i1 %528(prob = 0.5), ^b38, ^b39;
  ^if.else67:
    i32 %529 = load i32* %523;
    i1 %530 = scmp eq i32 %529, i32 13;
    cbr i1 %530(prob = 0.5), ^if.then77, ^b34;
  ^if.then77:
    i32 %531 = load i32* %0;
    i32 %532 = add i32 %531, i32 1;
    store i32* %0 with i32 %532;
    ubr ^while.body19;
  ^b38:
    i32 %533 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %534 = scmp eq i32 %533, i32 0;
    cbr i1 %534(prob = 0.5), ^b, ^entry3;
  ^b39:
    i32 %535 = load i32* %0;
    i32* %536 = getelementptr &(i32* %buf)[i32 %535];
    i32 %537 = load i32* %536;
    i1 %538 = scmp eq i32 %537, i32 32;
    cbr i1 %538(prob = 0.5), ^if.then78, ^if.else68;
  ^if.then78:
    i32 %539 = add i32 %535, i32 1;
    store i32* %0 with i32 %539;
    ubr ^while.body20;
  ^if.else68:
    i32 %540 = load i32* %536;
    i1 %541 = scmp eq i32 %540, i32 9;
    cbr i1 %541(prob = 0.5), ^if.then79, ^if.else69;
  ^if.then79:
    i32 %542 = load i32* %0;
    i32 %543 = add i32 %542, i32 1;
    store i32* %0 with i32 %543;
    ubr ^while.body20;
  ^if.else69:
    i32 %544 = load i32* %0;
    i32* %545 = getelementptr &(i32* %buf)[i32 %544];
    i32 %546 = load i32* %545;
    i1 %547 = scmp eq i32 %546, i32 10;
    cbr i1 %547(prob = 0.5), ^if.then80, ^if.else70;
  ^if.then80:
    i32 %548 = add i32 %544, i32 1;
    store i32* %0 with i32 %548;
    ubr ^while.body20;
  ^if.else70:
    i32 %549 = load i32* %545;
    i1 %550 = scmp eq i32 %549, i32 13;
    cbr i1 %550(prob = 0.5), ^if.then81, ^b38;
  ^if.then81:
    i32 %551 = load i32* %0;
    i32 %552 = add i32 %551, i32 1;
    store i32* %0 with i32 %552;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %6];
    store i32* %8 with i32 %7;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    i32 %11 = add i32 %6, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %21] [^if.then1, i32 %26] [^if.then4, i32 %37] [^if.then6, i32 %43];
    i1 %14 = scmp le i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 32;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %21 = add i32 %17, i32 1;
    store i32* %pos with i32 %21;
    ubr ^while.body1;
  ^while.body2:
    i32 %22 = phi [^b1, i32 %16] [^if.then3, i32 %36] [^if.then5, i32 %41] [^if.then7, i32 %49] [^if.then8, i32 %52];
    i1 %23 = scmp le i32 %4, i32 %22;
    cbr i1 %23(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i1 %24 = scmp eq i32 %19, i32 9;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %25 = load i32* %pos;
    i32 %26 = add i32 %25, i32 1;
    store i32* %pos with i32 %26;
    ubr ^while.body1;
  ^b3:
    i1 %27 = scmp neq i32 %15, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then2, ^if.else2;
  ^b4:
    i32 %28 = load i32* %pos;
    i32* %29 = getelementptr &(i32* %5)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 32;
    cbr i1 %31(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %32 = load i32* %pos;
    i32* %33 = getelementptr &(i32* %5)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %34, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then3:
    i32 %36 = add i32 %28, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then4:
    i32 %37 = add i32 %32, i32 1;
    store i32* %pos with i32 %37;
    ubr ^while.body1;
  ^if.else3:
    i1 %38 = scmp eq i32 %30, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then5, ^if.else5;
  ^if.else4:
    i1 %39 = scmp eq i32 %34, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then6, ^b1;
  ^if.then5:
    i32 %40 = load i32* %pos;
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.then6:
    i32 %42 = load i32* %pos;
    i32 %43 = add i32 %42, i32 1;
    store i32* %pos with i32 %43;
    ubr ^while.body1;
  ^if.else5:
    i32 %44 = load i32* %pos;
    i32* %45 = getelementptr &(i32* %5)[i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %46, i32 10;
    cbr i1 %47(prob = 0.5), ^if.then7, ^if.else6;
  ^b5:
    i32 %48 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %48;
  ^if.then7:
    i32 %49 = add i32 %44, i32 1;
    store i32* %pos with i32 %49;
    ubr ^while.body2;
  ^if.else6:
    i1 %50 = scmp eq i32 %46, i32 13;
    cbr i1 %50(prob = 0.5), ^if.then8, ^b3;
  ^if.then8:
    i32 %51 = load i32* %pos;
    i32 %52 = add i32 %51, i32 1;
    store i32* %pos with i32 %52;
    ubr ^while.body2;
}
