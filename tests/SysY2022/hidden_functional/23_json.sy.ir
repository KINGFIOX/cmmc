internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^1:
    i32 %2 = load i32* %0;
    ubr ^entry;
^entry:
    i32 %3 = phi [^1, i32 %2] [^if.then1, i32 %15];
    i32 %4 = phi [^1, i32 %type] [^if.then1, i32 4];
    i1 %5 = scmp ge i32 %3, i32 %len;
    cbr i1 %5(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %6 = phi [^entry, i32 %3] [^if.then, i32 %14] [^if.then2, i32 %22] [^if.then7, i32 %39] [^if.then10, i32 %52];
    i1 %7 = scmp ge i32 %6, i32 %len;
    cbr i1 %7(prob = 0.5), ^b1, ^b2;
^b:
    i32 %8 = phi [^entry, i32 0] [^if.then5, i32 %36] [^b3, i32 0] [^if.then8, i32 %48] [^if.else8, i32 0] [^if.then13, i32 0] [^b6, i32 0] [^if.then14, i32 %80] [^if.then16, i32 0] [^if.else14, i32 0] [^if.then19, i32 %106] [^b8, i32 0] [^if.else16, i32 0] [^if.then21, i32 0] [^if.else18, i32 0] [^if.then22, i32 1] [^b10, i32 1] [^if.then26, i32 %140] [^b11, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^if.then28, i32 0] [^if.then29, i32 1] [^if.then32, i32 %173] [^b14, i32 1] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^if.then37, i32 %210] [^if.then38, i32 1] [^if.else31, i32 0] [^if.else32, i32 0] [^if.else33, i32 0] [^if.else34, i32 0] [^b17, i32 0] [^if.then42, i32 %253] [^b19, i32 1] [^if.else36, i32 0] [^if.else37, i32 0] [^b20, i32 0] [^b22, i32 0] [^if.else40, i32 0] [^if.else41, i32 0] [^while.body11, i32 0] [^b27, i32 0] [^b28, i32 1] [^while.header2, i32 1] [^b29, i32 0] [^b31, i32 1] [^b34, i32 0] [^while.body18, i32 0] [^if.else58, i32 0] [^b37, i32 0] [^b39, i32 0] [^b41, i32 0];
    ret i32 %8;
^b1:
    i1 %9 = scmp eq i32 %4, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %10 = load i32* %0;
    i32* %11 = getelementptr &(i32* %buf)[i32 %10];
    i32 %12 = load i32* %11;
    i1 %13 = scmp eq i32 %12, i32 32;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %14 = add i32 %10, i32 1;
    store i32* %0 with i32 %14;
    ubr ^while.body;
^if.then1:
    i32 %15 = load i32* %0;
    i32* %16 = getelementptr &(i32* %buf)[i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp eq i32 %17, i32 123;
    cbr i1 %18(prob = 0.5), ^entry, ^if.else2;
^if.else:
    i1 %19 = scmp eq i32 %4, i32 1;
    cbr i1 %19(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i1 %20 = scmp eq i32 %12, i32 9;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else4;
^if.then2:
    i32 %21 = load i32* %0;
    i32 %22 = add i32 %21, i32 1;
    store i32* %0 with i32 %22;
    ubr ^while.body;
^if.else2:
    i1 %23 = scmp eq i32 %17, i32 91;
    cbr i1 %23(prob = 0.5), ^if.then5, ^if.else5;
^if.then3:
    i32 %24 = load i32* %0;
    i32* %25 = getelementptr &(i32* %buf)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = scmp eq i32 %26, i32 43;
    i1 %28 = scmp eq i32 %26, i32 45;
    i1 %29 = or i1 %28, i1 %27;
    cbr i1 %29(prob = 0.75), ^if.then4, ^b3;
^if.else3:
    i1 %30 = scmp eq i32 %4, i32 2;
    cbr i1 %30(prob = 0.5), ^if.then6, ^if.else6;
^if.else4:
    i32 %31 = load i32* %0;
    i32* %32 = getelementptr &(i32* %buf)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = scmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then7, ^if.else7;
^if.then4:
    i32 %35 = add i32 %24, i32 1;
    store i32* %0 with i32 %35;
    ubr ^b3;
^if.then5:
    i32 %36 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then6:
    i32 %37 = load i32* %0;
    i32 %38 = add i32 %37, i32 1;
    store i32* %0 with i32 %38;
    ubr ^while.header;
^if.then7:
    i32 %39 = add i32 %31, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.body;
^if.else5:
    i32 %40 = load i32* %0;
    i32* %41 = getelementptr &(i32* %buf)[i32 %40];
    i32 %42 = load i32* %41;
    i1 %43 = scmp eq i32 %42, i32 34;
    cbr i1 %43(prob = 0.5), ^if.then8, ^entry1;
^b3:
    i32 %44 = phi [^if.then3, i32 %24] [^if.then4, i32 %35];
    i1 %45 = scmp ge i32 %44, i32 %len;
    cbr i1 %45(prob = 0.5), ^b, ^if.else8;
^if.else6:
    i1 %46 = scmp eq i32 %4, i32 3;
    cbr i1 %46(prob = 0.5), ^if.then9, ^if.else9;
^if.else7:
    i1 %47 = scmp eq i32 %33, i32 13;
    cbr i1 %47(prob = 0.5), ^if.then10, ^b1;
^if.then8:
    i32 %48 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then9:
    i32 %49 = load i32* %0;
    i32 %50 = add i32 %49, i32 1;
    store i32* %0 with i32 %50;
    ubr ^while.body2;
^if.then10:
    i32 %51 = load i32* %0;
    i32 %52 = add i32 %51, i32 1;
    store i32* %0 with i32 %52;
    ubr ^while.body;
^while.header:
    i32 %53 = phi [^if.then6, i32 %38] [^b5, i32 %77];
    i1 %54 = scmp lt i32 %53, i32 %len;
    cbr i1 %54(prob = 0.97), ^while.body1, ^indirect;
^if.else8:
    i32 %55 = load i32* %0;
    i32* %56 = getelementptr &(i32* %buf)[i32 %55];
    i32 %57 = load i32* %56;
    i1 %58 = scmp gt i32 %57, i32 47;
    cbr i1 %58(prob = 0.5), ^if.then13, ^b;
^entry1:
    i1 %59 = scmp gt i32 %42, i32 47;
    cbr i1 %59(prob = 0.5), ^if.then12, ^b4;
^if.else9:
    i1 %60 = scmp eq i32 %4, i32 4;
    cbr i1 %60(prob = 0.5), ^if.then11, ^if.else10;
^indirect:
    i32 %61 = load i32* %0;
    ubr ^b6;
^while.body1:
    i32 %62 = load i32* %0;
    i32* %63 = getelementptr &(i32* %buf)[i32 %62];
    i32 %64 = load i32* %63;
    i1 %65 = scmp eq i32 %64, i32 34;
    cbr i1 %65(prob = 0.5), ^b6, ^b5;
^if.then11:
    i32 %66 = load i32* %0;
    i32 %67 = add i32 %66, i32 1;
    store i32* %0 with i32 %67;
    ubr ^while.body3;
^if.then12:
    i1 %68 = scmp lt i32 %42, i32 58;
    cbr i1 %68(prob = 0.5), ^b4, ^if.else11;
^while.body2:
    i32 %69 = phi [^if.then9, i32 %50] [^if.then17, i32 %99] [^if.then23, i32 %134] [^if.then30, i32 %169] [^if.then34, i32 %201];
    i1 %70 = scmp ge i32 %69, i32 %len;
    cbr i1 %70(prob = 0.5), ^if.then15, ^b7;
^if.then13:
    i1 %71 = scmp gt i32 %57, i32 57;
    cbr i1 %71(prob = 0.5), ^b, ^while.header1;
^b4:
    i32 %72 = phi [^entry1, i32 0] [^if.then12, i32 1] [^if.else11, i32 0];
    i1 %73 = scmp eq i32 %72, i32 1;
    cbr i1 %73(prob = 0.5), ^if.then14, ^if.else12;
^if.else10:
    i1 %74 = scmp eq i32 %4, i32 5;
    cbr i1 %74(prob = 0.5), ^if.then16, ^if.else13;
^b5:
    i1 %75 = scmp eq i32 %64, i32 92;
    i32 %76 = select i1 %75 ? i32 2 : i32 1;
    i32 %77 = add i32 %76, i32 %62;
    store i32* %0 with i32 %77;
    ubr ^while.header;
^b6:
    i32 %78 = phi [^indirect, i32 %61] [^while.body1, i32 %62];
    i1 %79 = scmp ge i32 %78, i32 %len;
    cbr i1 %79(prob = 0.5), ^b, ^if.else14;
^if.else11:
    ubr ^b4;
^if.then14:
    i32 %80 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then15:
    i32 %81 = load i32* %0;
    i1 %82 = scmp lt i32 %81, i32 %len;
    cbr i1 %82(prob = 0.5), ^if.then18, ^b8;
^b7:
    i32 %83 = load i32* %0;
    i32* %84 = getelementptr &(i32* %buf)[i32 %83];
    i32 %85 = load i32* %84;
    i1 %86 = scmp eq i32 %85, i32 32;
    cbr i1 %86(prob = 0.5), ^if.then17, ^if.else15;
^while.body3:
    i32 %87 = phi [^if.then11, i32 %67] [^if.then24, i32 %135] [^if.then31, i32 %171] [^if.then35, i32 %202] [^if.then40, i32 %246];
    i1 %88 = scmp ge i32 %87, i32 %len;
    cbr i1 %88(prob = 0.5), ^if.then20, ^b9;
^while.header1:
    i32 %89 = phi [^if.then13, i32 %55] [^b13, i32 %168];
    i1 %90 = scmp lt i32 %89, i32 %len;
    cbr i1 %90(prob = 0.97), ^while.body4, ^indirect1;
^if.then16:
    i32 %91 = load i32* %0;
    i32 %92 = add i32 %91, i32 3;
    i1 %93 = scmp ge i32 %92, i32 %len;
    cbr i1 %93(prob = 0.5), ^b, ^if.else16;
^if.else12:
    i32 %94 = load i32* %0;
    i32* %95 = getelementptr &(i32* %buf)[i32 %94];
    i32 %96 = load i32* %95;
    i1 %97 = scmp eq i32 %96, i32 43;
    cbr i1 %97(prob = 0.5), ^if.then19, ^if.else17;
^if.else13:
    i1 %98 = scmp eq i32 %4, i32 6;
    cbr i1 %98(prob = 0.5), ^if.then21, ^if.else18;
^if.then17:
    i32 %99 = add i32 %83, i32 1;
    store i32* %0 with i32 %99;
    ubr ^while.body2;
^if.else14:
    i32* %100 = getelementptr &(i32* %buf)[i32 %78];
    i32 %101 = load i32* %100;
    i1 %102 = scmp neq i32 %101, i32 34;
    cbr i1 %102(prob = 0.5), ^b, ^b10;
^if.then18:
    i32* %103 = getelementptr &(i32* %buf)[i32 %81];
    i32 %104 = load i32* %103;
    i1 %105 = scmp eq i32 %104, i32 93;
    cbr i1 %105(prob = 0.5), ^if.then22, ^b8;
^if.then19:
    i32 %106 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^indirect1:
    i32 %107 = load i32* %0;
    ubr ^b12;
^if.then20:
    i32 %108 = load i32* %0;
    i1 %109 = scmp lt i32 %108, i32 %len;
    cbr i1 %109(prob = 0.5), ^if.then25, ^b11;
^b8:
    i32 %110 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %111 = scmp eq i32 %110, i32 0;
    cbr i1 %111(prob = 0.5), ^b, ^entry2;
^while.body4:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = scmp gt i32 %114, i32 47;
    cbr i1 %115(prob = 0.5), ^if.then27, ^b12;
^if.else15:
    i1 %116 = scmp eq i32 %85, i32 9;
    cbr i1 %116(prob = 0.5), ^if.then23, ^if.else19;
^b9:
    i32 %117 = load i32* %0;
    i32* %118 = getelementptr &(i32* %buf)[i32 %117];
    i32 %119 = load i32* %118;
    i1 %120 = scmp eq i32 %119, i32 32;
    cbr i1 %120(prob = 0.5), ^if.then24, ^if.else20;
^if.else16:
    i32* %121 = getelementptr &(i32* %buf)[i32 %91];
    i32 %122 = load i32* %121;
    i1 %123 = scmp neq i32 %122, i32 116;
    cbr i1 %123(prob = 0.5), ^b, ^if.else21;
^if.then21:
    i32 %124 = load i32* %0;
    i32 %125 = add i32 %124, i32 4;
    i1 %126 = scmp ge i32 %125, i32 %len;
    cbr i1 %126(prob = 0.5), ^b, ^if.else22;
^if.else17:
    i1 %127 = scmp eq i32 %96, i32 45;
    cbr i1 %127(prob = 0.5), ^if.then26, ^if.else23;
^if.else18:
    i1 %128 = scmp eq i32 %4, i32 7;
    cbr i1 %128(prob = 0.5), ^if.then28, ^b;
^if.then22:
    i32 %129 = load i32* %0;
    i32 %130 = add i32 %129, i32 1;
    store i32* %0 with i32 %130;
    ubr ^b;
^b10:
    i32 %131 = load i32* %0;
    i32 %132 = add i32 %131, i32 1;
    store i32* %0 with i32 %132;
    ubr ^b;
^if.then23:
    i32 %133 = load i32* %0;
    i32 %134 = add i32 %133, i32 1;
    store i32* %0 with i32 %134;
    ubr ^while.body2;
^if.then24:
    i32 %135 = add i32 %117, i32 1;
    store i32* %0 with i32 %135;
    ubr ^while.body3;
^entry2:
    i32 %136 = load i32* %0;
    ubr ^while.body5;
^if.then25:
    i32* %137 = getelementptr &(i32* %buf)[i32 %108];
    i32 %138 = load i32* %137;
    i1 %139 = scmp eq i32 %138, i32 125;
    cbr i1 %139(prob = 0.5), ^if.then29, ^b11;
^if.then26:
    i32 %140 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then27:
    i1 %141 = scmp gt i32 %114, i32 57;
    cbr i1 %141(prob = 0.5), ^b12, ^b13;
^b11:
    i32 %142 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %143 = scmp eq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b, ^entry3;
^b12:
    i32 %144 = phi [^indirect1, i32 %107] [^while.body4, i32 %112] [^if.then27, i32 %112];
    i1 %145 = scmp lt i32 %144, i32 %len;
    cbr i1 %145(prob = 0.5), ^if.then33, ^b14;
^if.else19:
    i32 %146 = load i32* %0;
    i32* %147 = getelementptr &(i32* %buf)[i32 %146];
    i32 %148 = load i32* %147;
    i1 %149 = scmp eq i32 %148, i32 10;
    cbr i1 %149(prob = 0.5), ^if.then30, ^if.else24;
^if.else20:
    i1 %150 = scmp eq i32 %119, i32 9;
    cbr i1 %150(prob = 0.5), ^if.then31, ^if.else25;
^if.else21:
    i32 %151 = load i32* %0;
    i32 %152 = add i32 %151, i32 1;
    i32* %153 = getelementptr &(i32* %buf)[i32 %152];
    i32 %154 = load i32* %153;
    i1 %155 = scmp neq i32 %154, i32 114;
    cbr i1 %155(prob = 0.5), ^b, ^if.else26;
^if.else22:
    i32* %156 = getelementptr &(i32* %buf)[i32 %124];
    i32 %157 = load i32* %156;
    i1 %158 = scmp neq i32 %157, i32 102;
    cbr i1 %158(prob = 0.5), ^b, ^if.else27;
^if.then28:
    i32 %159 = load i32* %0;
    i32 %160 = add i32 %159, i32 3;
    i1 %161 = scmp ge i32 %160, i32 %len;
    cbr i1 %161(prob = 0.5), ^b, ^if.else28;
^if.else23:
    i32 %162 = load i32* %0;
    i32* %163 = getelementptr &(i32* %buf)[i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %164, i32 116;
    cbr i1 %165(prob = 0.5), ^if.then32, ^if.else29;
^if.then29:
    i32 %166 = load i32* %0;
    i32 %167 = add i32 %166, i32 1;
    store i32* %0 with i32 %167;
    ubr ^b;
^b13:
    i32 %168 = add i32 %112, i32 1;
    store i32* %0 with i32 %168;
    ubr ^while.header1;
^if.then30:
    i32 %169 = add i32 %146, i32 1;
    store i32* %0 with i32 %169;
    ubr ^while.body2;
^if.then31:
    i32 %170 = load i32* %0;
    i32 %171 = add i32 %170, i32 1;
    store i32* %0 with i32 %171;
    ubr ^while.body3;
^entry3:
    i32 %172 = load i32* %0;
    ubr ^while.body6;
^if.then32:
    i32 %173 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.body5:
    i32 %174 = phi [^entry2, i32 %136] [^if.then39, i32 %241] [^if.then43, i32 %271] [^if.then49, i32 %313] [^if.then55, i32 %344];
    i1 %175 = scmp ge i32 %174, i32 %len;
    cbr i1 %175(prob = 0.5), ^b15, ^b16;
^if.then33:
    i32* %176 = getelementptr &(i32* %buf)[i32 %144];
    i32 %177 = load i32* %176;
    i1 %178 = scmp eq i32 %177, i32 46;
    cbr i1 %178(prob = 0.5), ^if.then36, ^indirect2;
^b14:
    i32 %179 = phi [^b12, i32 %144] [^indirect2, i32 %199] [^if.then36, i32 %208] [^indirect3, i32 %308];
    i1 %180 = scmp lt i32 %179, i32 %len;
    cbr i1 %180(prob = 0.5), ^if.then38, ^b;
^if.else24:
    i1 %181 = scmp eq i32 %148, i32 13;
    cbr i1 %181(prob = 0.5), ^if.then34, ^if.then15;
^if.else25:
    i32 %182 = load i32* %0;
    i32* %183 = getelementptr &(i32* %buf)[i32 %182];
    i32 %184 = load i32* %183;
    i1 %185 = scmp eq i32 %184, i32 10;
    cbr i1 %185(prob = 0.5), ^if.then35, ^if.else30;
^if.else26:
    i32 %186 = add i32 %151, i32 2;
    i32* %187 = getelementptr &(i32* %buf)[i32 %186];
    i32 %188 = load i32* %187;
    i1 %189 = scmp neq i32 %188, i32 117;
    cbr i1 %189(prob = 0.5), ^b, ^if.else31;
^if.else27:
    i32 %190 = load i32* %0;
    i32 %191 = add i32 %190, i32 1;
    i32* %192 = getelementptr &(i32* %buf)[i32 %191];
    i32 %193 = load i32* %192;
    i1 %194 = scmp neq i32 %193, i32 97;
    cbr i1 %194(prob = 0.5), ^b, ^if.else32;
^if.else28:
    i32* %195 = getelementptr &(i32* %buf)[i32 %159];
    i32 %196 = load i32* %195;
    i1 %197 = scmp neq i32 %196, i32 110;
    cbr i1 %197(prob = 0.5), ^b, ^if.else33;
^if.else29:
    i1 %198 = scmp eq i32 %164, i32 102;
    cbr i1 %198(prob = 0.5), ^if.then37, ^if.else34;
^indirect2:
    i32 %199 = load i32* %0;
    ubr ^b14;
^if.then34:
    i32 %200 = load i32* %0;
    i32 %201 = add i32 %200, i32 1;
    store i32* %0 with i32 %201;
    ubr ^while.body2;
^if.then35:
    i32 %202 = add i32 %182, i32 1;
    store i32* %0 with i32 %202;
    ubr ^while.body3;
^b15:
    i32 %203 = load i32* %0;
    i32* %204 = getelementptr &(i32* %buf)[i32 %203];
    i32 %205 = load i32* %204;
    i1 %206 = scmp eq i32 %205, i32 44;
    cbr i1 %206(prob = 0.97), ^while.body7, ^while.body9;
^if.then36:
    i32 %207 = load i32* %0;
    i32 %208 = add i32 %207, i32 1;
    store i32* %0 with i32 %208;
    i1 %209 = scmp lt i32 %208, i32 %len;
    cbr i1 %209(prob = 0.97), ^while.body8, ^b14;
^if.then37:
    i32 %210 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b16:
    i32 %211 = load i32* %0;
    i32* %212 = getelementptr &(i32* %buf)[i32 %211];
    i32 %213 = load i32* %212;
    i1 %214 = scmp eq i32 %213, i32 32;
    cbr i1 %214(prob = 0.5), ^if.then39, ^if.else35;
^while.body6:
    i32 %215 = phi [^entry3, i32 %172] [^if.then44, i32 %272] [^if.then50, i32 %315] [^if.then56, i32 %345] [^if.then59, i32 %360];
    i1 %216 = scmp ge i32 %215, i32 %len;
    cbr i1 %216(prob = 0.5), ^b17, ^b18;
^if.then38:
    i32 %217 = load i32* %0;
    i32* %218 = getelementptr &(i32* %buf)[i32 %217];
    i32 %219 = load i32* %218;
    i1 %220 = scmp eq i32 %219, i32 101;
    cbr i1 %220(prob = 0.5), ^if.then41, ^b;
^if.else30:
    i1 %221 = scmp eq i32 %184, i32 13;
    cbr i1 %221(prob = 0.5), ^if.then40, ^if.then20;
^if.else31:
    i32 %222 = load i32* %0;
    i32 %223 = add i32 %222, i32 3;
    i32* %224 = getelementptr &(i32* %buf)[i32 %223];
    i32 %225 = load i32* %224;
    i1 %226 = scmp neq i32 %225, i32 101;
    cbr i1 %226(prob = 0.5), ^b, ^b19;
^if.else32:
    i32 %227 = add i32 %190, i32 2;
    i32* %228 = getelementptr &(i32* %buf)[i32 %227];
    i32 %229 = load i32* %228;
    i1 %230 = scmp neq i32 %229, i32 108;
    cbr i1 %230(prob = 0.5), ^b, ^if.else36;
^if.else33:
    i32 %231 = load i32* %0;
    i32 %232 = add i32 %231, i32 1;
    i32* %233 = getelementptr &(i32* %buf)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = scmp neq i32 %234, i32 117;
    cbr i1 %235(prob = 0.5), ^b, ^if.else37;
^if.else34:
    i32 %236 = load i32* %0;
    i32* %237 = getelementptr &(i32* %buf)[i32 %236];
    i32 %238 = load i32* %237;
    i1 %239 = scmp eq i32 %238, i32 110;
    cbr i1 %239(prob = 0.5), ^if.then42, ^b;
^while.body7:
    i32 %240 = add i32 %203, i32 1;
    store i32* %0 with i32 %240;
    ubr ^while.body10;
^if.then39:
    i32 %241 = add i32 %211, i32 1;
    store i32* %0 with i32 %241;
    ubr ^while.body5;
^while.body8:
    i32* %242 = getelementptr &(i32* %buf)[i32 %208];
    i32 %243 = load i32* %242;
    i1 %244 = scmp gt i32 %243, i32 47;
    cbr i1 %244(prob = 0.5), ^if.then45, ^b21;
^if.then40:
    i32 %245 = load i32* %0;
    i32 %246 = add i32 %245, i32 1;
    store i32* %0 with i32 %246;
    ubr ^while.body3;
^b17:
    i32 %247 = load i32* %0;
    i1 %248 = scmp ge i32 %247, i32 %len;
    cbr i1 %248(prob = 0.5), ^b, ^b22;
^while.body9:
    i32 %249 = phi [^b15, i32 %203] [^if.then48, i32 %311] [^if.then54, i32 %342] [^if.then58, i32 %358] [^if.then62, i32 %380];
    i1 %250 = scmp ge i32 %249, i32 %len;
    cbr i1 %250(prob = 0.5), ^b20, ^b23;
^if.then41:
    i32 %251 = add i32 %217, i32 1;
    store i32* %0 with i32 %251;
    i1 %252 = scmp lt i32 %251, i32 %len;
    cbr i1 %252(prob = 0.5), ^if.then46, ^b24;
^if.then42:
    i32 %253 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else35:
    i1 %254 = scmp eq i32 %213, i32 9;
    cbr i1 %254(prob = 0.5), ^if.then43, ^if.else38;
^b18:
    i32 %255 = load i32* %0;
    i32* %256 = getelementptr &(i32* %buf)[i32 %255];
    i32 %257 = load i32* %256;
    i1 %258 = scmp eq i32 %257, i32 32;
    cbr i1 %258(prob = 0.5), ^if.then44, ^if.else39;
^b19:
    i32 %259 = phi [^if.else31, i32 %222] [^if.else41, i32 %301];
    i32 %260 = add i32 %259, i32 4;
    store i32* %0 with i32 %260;
    ubr ^b;
^if.else36:
    i32 %261 = load i32* %0;
    i32 %262 = add i32 %261, i32 3;
    i32* %263 = getelementptr &(i32* %buf)[i32 %262];
    i32 %264 = load i32* %263;
    i1 %265 = scmp neq i32 %264, i32 115;
    cbr i1 %265(prob = 0.5), ^b, ^if.else40;
^if.else37:
    i32 %266 = add i32 %231, i32 2;
    i32* %267 = getelementptr &(i32* %buf)[i32 %266];
    i32 %268 = load i32* %267;
    i1 %269 = scmp neq i32 %268, i32 108;
    cbr i1 %269(prob = 0.5), ^b, ^if.else41;
^if.then43:
    i32 %270 = load i32* %0;
    i32 %271 = add i32 %270, i32 1;
    store i32* %0 with i32 %271;
    ubr ^while.body5;
^if.then44:
    i32 %272 = add i32 %255, i32 1;
    store i32* %0 with i32 %272;
    ubr ^while.body6;
^while.body10:
    i32 %273 = phi [^while.body7, i32 %240] [^if.then52, i32 %338] [^if.then57, i32 %357] [^if.then60, i32 %376] [^if.then64, i32 %387];
    i1 %274 = scmp ge i32 %273, i32 %len;
    cbr i1 %274(prob = 0.5), ^while.body11, ^b26;
^if.then45:
    i1 %275 = scmp lt i32 %243, i32 58;
    cbr i1 %275(prob = 0.5), ^b21, ^if.else42;
^b20:
    i32 %276 = load i32* %0;
    i1 %277 = scmp ge i32 %276, i32 %len;
    cbr i1 %277(prob = 0.5), ^b, ^b27;
^if.then46:
    i32* %278 = getelementptr &(i32* %buf)[i32 %251];
    i32 %279 = load i32* %278;
    i1 %280 = scmp eq i32 %279, i32 43;
    cbr i1 %280(prob = 0.5), ^if.then47, ^indirect4;
^b21:
    i32 %281 = phi [^while.body8, i32 0] [^if.then45, i32 1] [^if.else42, i32 0];
    i1 %282 = scmp neq i32 %281, i32 1;
    cbr i1 %282(prob = 0.5), ^indirect3, ^if.then36;
^b22:
    i32* %283 = getelementptr &(i32* %buf)[i32 %247];
    i32 %284 = load i32* %283;
    i1 %285 = scmp neq i32 %284, i32 58;
    cbr i1 %285(prob = 0.5), ^b, ^b25;
^b23:
    i32 %286 = load i32* %0;
    i32* %287 = getelementptr &(i32* %buf)[i32 %286];
    i32 %288 = load i32* %287;
    i1 %289 = scmp eq i32 %288, i32 32;
    cbr i1 %289(prob = 0.5), ^if.then48, ^if.else43;
^b24:
    i32 %290 = phi [^if.then41, i32 %251] [^if.then47, i32 %307] [^indirect4, i32 %312];
    i1 %291 = scmp lt i32 %290, i32 %len;
    cbr i1 %291(prob = 0.5), ^if.then51, ^indirect5;
^if.else38:
    i32 %292 = load i32* %0;
    i32* %293 = getelementptr &(i32* %buf)[i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = scmp eq i32 %294, i32 10;
    cbr i1 %295(prob = 0.5), ^if.then49, ^if.else44;
^if.else39:
    i1 %296 = scmp eq i32 %257, i32 9;
    cbr i1 %296(prob = 0.5), ^if.then50, ^if.else45;
^if.else40:
    i32 %297 = add i32 %261, i32 4;
    i32* %298 = getelementptr &(i32* %buf)[i32 %297];
    i32 %299 = load i32* %298;
    i1 %300 = scmp neq i32 %299, i32 101;
    cbr i1 %300(prob = 0.5), ^b, ^b28;
^if.else41:
    i32 %301 = load i32* %0;
    i32 %302 = add i32 %301, i32 3;
    i32* %303 = getelementptr &(i32* %buf)[i32 %302];
    i32 %304 = load i32* %303;
    i1 %305 = scmp neq i32 %304, i32 108;
    cbr i1 %305(prob = 0.5), ^b, ^b19;
^if.then47:
    i32 %306 = load i32* %0;
    i32 %307 = add i32 %306, i32 1;
    store i32* %0 with i32 %307;
    ubr ^b24;
^if.else42:
    ubr ^b21;
^indirect3:
    i32 %308 = load i32* %0;
    ubr ^b14;
^while.body11:
    i32 %309 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %310 = scmp eq i32 %309, i32 0;
    cbr i1 %310(prob = 0.5), ^b, ^entry2;
^if.then48:
    i32 %311 = add i32 %286, i32 1;
    store i32* %0 with i32 %311;
    ubr ^while.body9;
^indirect4:
    i32 %312 = load i32* %0;
    ubr ^b24;
^if.then49:
    i32 %313 = add i32 %292, i32 1;
    store i32* %0 with i32 %313;
    ubr ^while.body5;
^if.then50:
    i32 %314 = load i32* %0;
    i32 %315 = add i32 %314, i32 1;
    store i32* %0 with i32 %315;
    ubr ^while.body6;
^b25:
    i32 %316 = load i32* %0;
    i32 %317 = add i32 %316, i32 1;
    store i32* %0 with i32 %317;
    ubr ^while.body12;
^b26:
    i32 %318 = load i32* %0;
    i32* %319 = getelementptr &(i32* %buf)[i32 %318];
    i32 %320 = load i32* %319;
    i1 %321 = scmp eq i32 %320, i32 32;
    cbr i1 %321(prob = 0.5), ^if.then52, ^if.else46;
^indirect5:
    i32 %322 = load i32* %0;
    ubr ^while.header2;
^b27:
    i32* %323 = getelementptr &(i32* %buf)[i32 %276];
    i32 %324 = load i32* %323;
    i1 %325 = scmp neq i32 %324, i32 93;
    cbr i1 %325(prob = 0.5), ^b, ^b10;
^if.then51:
    i32 %326 = load i32* %0;
    i32* %327 = getelementptr &(i32* %buf)[i32 %326];
    i32 %328 = load i32* %327;
    i1 %329 = scmp eq i32 %328, i32 45;
    cbr i1 %329(prob = 0.5), ^if.then53, ^while.header2;
^if.else43:
    i1 %330 = scmp eq i32 %288, i32 9;
    cbr i1 %330(prob = 0.5), ^if.then54, ^if.else47;
^if.else44:
    i1 %331 = scmp eq i32 %294, i32 13;
    cbr i1 %331(prob = 0.5), ^if.then55, ^b15;
^if.else45:
    i32 %332 = load i32* %0;
    i32* %333 = getelementptr &(i32* %buf)[i32 %332];
    i32 %334 = load i32* %333;
    i1 %335 = scmp eq i32 %334, i32 10;
    cbr i1 %335(prob = 0.5), ^if.then56, ^if.else48;
^b28:
    i32 %336 = load i32* %0;
    i32 %337 = add i32 %336, i32 5;
    store i32* %0 with i32 %337;
    ubr ^b;
^if.then52:
    i32 %338 = add i32 %318, i32 1;
    store i32* %0 with i32 %338;
    ubr ^while.body10;
^if.then53:
    i32 %339 = phi [^if.then51, i32 %326] [^b31, i32 %367];
    i32 %340 = add i32 %339, i32 1;
    store i32* %0 with i32 %340;
    ubr ^while.header2;
^if.then54:
    i32 %341 = load i32* %0;
    i32 %342 = add i32 %341, i32 1;
    store i32* %0 with i32 %342;
    ubr ^while.body9;
^if.then55:
    i32 %343 = load i32* %0;
    i32 %344 = add i32 %343, i32 1;
    store i32* %0 with i32 %344;
    ubr ^while.body5;
^if.then56:
    i32 %345 = add i32 %332, i32 1;
    store i32* %0 with i32 %345;
    ubr ^while.body6;
^if.else46:
    i1 %346 = scmp eq i32 %320, i32 9;
    cbr i1 %346(prob = 0.5), ^if.then57, ^if.else49;
^while.body12:
    i32 %347 = phi [^b25, i32 %317] [^if.then61, i32 %377] [^if.then65, i32 %389] [^if.then66, i32 %396] [^if.then68, i32 %409];
    i1 %348 = scmp ge i32 %347, i32 %len;
    cbr i1 %348(prob = 0.5), ^b29, ^b30;
^while.header2:
    i32 %349 = phi [^indirect5, i32 %322] [^if.then51, i32 %326] [^if.then53, i32 %340];
    i1 %350 = scmp lt i32 %349, i32 %len;
    cbr i1 %350(prob = 0.97), ^while.body13, ^b;
^if.else47:
    i32 %351 = load i32* %0;
    i32* %352 = getelementptr &(i32* %buf)[i32 %351];
    i32 %353 = load i32* %352;
    i1 %354 = scmp eq i32 %353, i32 10;
    cbr i1 %354(prob = 0.5), ^if.then58, ^if.else50;
^if.else48:
    i1 %355 = scmp eq i32 %334, i32 13;
    cbr i1 %355(prob = 0.5), ^if.then59, ^b17;
^if.then57:
    i32 %356 = load i32* %0;
    i32 %357 = add i32 %356, i32 1;
    store i32* %0 with i32 %357;
    ubr ^while.body10;
^if.then58:
    i32 %358 = add i32 %351, i32 1;
    store i32* %0 with i32 %358;
    ubr ^while.body9;
^if.then59:
    i32 %359 = load i32* %0;
    i32 %360 = add i32 %359, i32 1;
    store i32* %0 with i32 %360;
    ubr ^while.body6;
^if.else49:
    i32 %361 = load i32* %0;
    i32* %362 = getelementptr &(i32* %buf)[i32 %361];
    i32 %363 = load i32* %362;
    i1 %364 = scmp eq i32 %363, i32 10;
    cbr i1 %364(prob = 0.5), ^if.then60, ^if.else51;
^b29:
    i32 %365 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %366 = scmp eq i32 %365, i32 0;
    cbr i1 %366(prob = 0.5), ^b, ^entry4;
^while.body13:
    i32 %367 = load i32* %0;
    i32* %368 = getelementptr &(i32* %buf)[i32 %367];
    i32 %369 = load i32* %368;
    i1 %370 = scmp gt i32 %369, i32 47;
    cbr i1 %370(prob = 0.5), ^if.then63, ^b31;
^b30:
    i32 %371 = load i32* %0;
    i32* %372 = getelementptr &(i32* %buf)[i32 %371];
    i32 %373 = load i32* %372;
    i1 %374 = scmp eq i32 %373, i32 32;
    cbr i1 %374(prob = 0.5), ^if.then61, ^if.else52;
^if.else50:
    i1 %375 = scmp eq i32 %353, i32 13;
    cbr i1 %375(prob = 0.5), ^if.then62, ^b20;
^if.then60:
    i32 %376 = add i32 %361, i32 1;
    store i32* %0 with i32 %376;
    ubr ^while.body10;
^if.then61:
    i32 %377 = add i32 %371, i32 1;
    store i32* %0 with i32 %377;
    ubr ^while.body12;
^entry4:
    i32 %378 = load i32* %0;
    ubr ^while.body14;
^if.then62:
    i32 %379 = load i32* %0;
    i32 %380 = add i32 %379, i32 1;
    store i32* %0 with i32 %380;
    ubr ^while.body9;
^if.then63:
    i1 %381 = scmp lt i32 %369, i32 58;
    cbr i1 %381(prob = 0.5), ^b31, ^if.else53;
^if.else51:
    i1 %382 = scmp eq i32 %363, i32 13;
    cbr i1 %382(prob = 0.5), ^if.then64, ^while.body11;
^b31:
    i32 %383 = phi [^while.body13, i32 0] [^if.then63, i32 1] [^if.else53, i32 0];
    i1 %384 = scmp neq i32 %383, i32 1;
    cbr i1 %384(prob = 0.5), ^b, ^if.then53;
^if.else52:
    i1 %385 = scmp eq i32 %373, i32 9;
    cbr i1 %385(prob = 0.5), ^if.then65, ^if.else54;
^if.then64:
    i32 %386 = load i32* %0;
    i32 %387 = add i32 %386, i32 1;
    store i32* %0 with i32 %387;
    ubr ^while.body10;
^if.else53:
    ubr ^b31;
^if.then65:
    i32 %388 = load i32* %0;
    i32 %389 = add i32 %388, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.body12;
^while.body14:
    i32 %390 = phi [^entry4, i32 %378] [^if.then67, i32 %407] [^if.then69, i32 %414] [^if.then71, i32 %430] [^if.then74, i32 %445];
    i1 %391 = scmp ge i32 %390, i32 %len;
    cbr i1 %391(prob = 0.5), ^b32, ^b33;
^if.else54:
    i32 %392 = load i32* %0;
    i32* %393 = getelementptr &(i32* %buf)[i32 %392];
    i32 %394 = load i32* %393;
    i1 %395 = scmp eq i32 %394, i32 10;
    cbr i1 %395(prob = 0.5), ^if.then66, ^if.else55;
^if.then66:
    i32 %396 = add i32 %392, i32 1;
    store i32* %0 with i32 %396;
    ubr ^while.body12;
^b32:
    i32 %397 = load i32* %0;
    i32* %398 = getelementptr &(i32* %buf)[i32 %397];
    i32 %399 = load i32* %398;
    i1 %400 = scmp eq i32 %399, i32 44;
    cbr i1 %400(prob = 0.97), ^while.body15, ^while.body16;
^b33:
    i32 %401 = load i32* %0;
    i32* %402 = getelementptr &(i32* %buf)[i32 %401];
    i32 %403 = load i32* %402;
    i1 %404 = scmp eq i32 %403, i32 32;
    cbr i1 %404(prob = 0.5), ^if.then67, ^if.else56;
^if.else55:
    i1 %405 = scmp eq i32 %394, i32 13;
    cbr i1 %405(prob = 0.5), ^if.then68, ^b29;
^while.body15:
    i32 %406 = add i32 %397, i32 1;
    store i32* %0 with i32 %406;
    ubr ^while.body17;
^if.then67:
    i32 %407 = add i32 %401, i32 1;
    store i32* %0 with i32 %407;
    ubr ^while.body14;
^if.then68:
    i32 %408 = load i32* %0;
    i32 %409 = add i32 %408, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body12;
^while.body16:
    i32 %410 = phi [^b32, i32 %397] [^if.then70, i32 %429] [^if.then73, i32 %443] [^if.then76, i32 %455] [^if.then78, i32 %469];
    i1 %411 = scmp ge i32 %410, i32 %len;
    cbr i1 %411(prob = 0.5), ^b34, ^b35;
^if.else56:
    i1 %412 = scmp eq i32 %403, i32 9;
    cbr i1 %412(prob = 0.5), ^if.then69, ^if.else57;
^if.then69:
    i32 %413 = load i32* %0;
    i32 %414 = add i32 %413, i32 1;
    store i32* %0 with i32 %414;
    ubr ^while.body14;
^while.body17:
    i32 %415 = phi [^while.body15, i32 %406] [^if.then72, i32 %440] [^if.then75, i32 %452] [^if.then77, i32 %461] [^if.then80, i32 %473];
    i1 %416 = scmp ge i32 %415, i32 %len;
    cbr i1 %416(prob = 0.5), ^while.body18, ^b36;
^b34:
    i32 %417 = load i32* %0;
    i1 %418 = scmp ge i32 %417, i32 %len;
    cbr i1 %418(prob = 0.5), ^b, ^if.else58;
^b35:
    i32 %419 = load i32* %0;
    i32* %420 = getelementptr &(i32* %buf)[i32 %419];
    i32 %421 = load i32* %420;
    i1 %422 = scmp eq i32 %421, i32 32;
    cbr i1 %422(prob = 0.5), ^if.then70, ^if.else59;
^if.else57:
    i32 %423 = load i32* %0;
    i32* %424 = getelementptr &(i32* %buf)[i32 %423];
    i32 %425 = load i32* %424;
    i1 %426 = scmp eq i32 %425, i32 10;
    cbr i1 %426(prob = 0.5), ^if.then71, ^if.else60;
^while.body18:
    i32 %427 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %428 = scmp eq i32 %427, i32 0;
    cbr i1 %428(prob = 0.5), ^b, ^entry5;
^if.then70:
    i32 %429 = add i32 %419, i32 1;
    store i32* %0 with i32 %429;
    ubr ^while.body16;
^if.then71:
    i32 %430 = add i32 %423, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body14;
^b36:
    i32 %431 = load i32* %0;
    i32* %432 = getelementptr &(i32* %buf)[i32 %431];
    i32 %433 = load i32* %432;
    i1 %434 = scmp eq i32 %433, i32 32;
    cbr i1 %434(prob = 0.5), ^if.then72, ^if.else61;
^if.else58:
    i32* %435 = getelementptr &(i32* %buf)[i32 %417];
    i32 %436 = load i32* %435;
    i1 %437 = scmp neq i32 %436, i32 125;
    cbr i1 %437(prob = 0.5), ^b, ^b10;
^if.else59:
    i1 %438 = scmp eq i32 %421, i32 9;
    cbr i1 %438(prob = 0.5), ^if.then73, ^if.else62;
^if.else60:
    i1 %439 = scmp eq i32 %425, i32 13;
    cbr i1 %439(prob = 0.5), ^if.then74, ^b32;
^if.then72:
    i32 %440 = add i32 %431, i32 1;
    store i32* %0 with i32 %440;
    ubr ^while.body17;
^entry5:
    i32 %441 = load i32* %0;
    ubr ^while.body19;
^if.then73:
    i32 %442 = load i32* %0;
    i32 %443 = add i32 %442, i32 1;
    store i32* %0 with i32 %443;
    ubr ^while.body16;
^if.then74:
    i32 %444 = load i32* %0;
    i32 %445 = add i32 %444, i32 1;
    store i32* %0 with i32 %445;
    ubr ^while.body14;
^if.else61:
    i1 %446 = scmp eq i32 %433, i32 9;
    cbr i1 %446(prob = 0.5), ^if.then75, ^if.else63;
^if.else62:
    i32 %447 = load i32* %0;
    i32* %448 = getelementptr &(i32* %buf)[i32 %447];
    i32 %449 = load i32* %448;
    i1 %450 = scmp eq i32 %449, i32 10;
    cbr i1 %450(prob = 0.5), ^if.then76, ^if.else64;
^if.then75:
    i32 %451 = load i32* %0;
    i32 %452 = add i32 %451, i32 1;
    store i32* %0 with i32 %452;
    ubr ^while.body17;
^while.body19:
    i32 %453 = phi [^entry5, i32 %441] [^if.then79, i32 %471] [^if.then81, i32 %479] [^if.then82, i32 %486] [^if.then83, i32 %491];
    i1 %454 = scmp ge i32 %453, i32 %len;
    cbr i1 %454(prob = 0.5), ^b37, ^b38;
^if.then76:
    i32 %455 = add i32 %447, i32 1;
    store i32* %0 with i32 %455;
    ubr ^while.body16;
^if.else63:
    i32 %456 = load i32* %0;
    i32* %457 = getelementptr &(i32* %buf)[i32 %456];
    i32 %458 = load i32* %457;
    i1 %459 = scmp eq i32 %458, i32 10;
    cbr i1 %459(prob = 0.5), ^if.then77, ^if.else65;
^if.else64:
    i1 %460 = scmp eq i32 %449, i32 13;
    cbr i1 %460(prob = 0.5), ^if.then78, ^b34;
^if.then77:
    i32 %461 = add i32 %456, i32 1;
    store i32* %0 with i32 %461;
    ubr ^while.body17;
^b37:
    i32 %462 = load i32* %0;
    i1 %463 = scmp ge i32 %462, i32 %len;
    cbr i1 %463(prob = 0.5), ^b, ^b39;
^b38:
    i32 %464 = load i32* %0;
    i32* %465 = getelementptr &(i32* %buf)[i32 %464];
    i32 %466 = load i32* %465;
    i1 %467 = scmp eq i32 %466, i32 32;
    cbr i1 %467(prob = 0.5), ^if.then79, ^if.else66;
^if.then78:
    i32 %468 = load i32* %0;
    i32 %469 = add i32 %468, i32 1;
    store i32* %0 with i32 %469;
    ubr ^while.body16;
^if.else65:
    i1 %470 = scmp eq i32 %458, i32 13;
    cbr i1 %470(prob = 0.5), ^if.then80, ^while.body18;
^if.then79:
    i32 %471 = add i32 %464, i32 1;
    store i32* %0 with i32 %471;
    ubr ^while.body19;
^if.then80:
    i32 %472 = load i32* %0;
    i32 %473 = add i32 %472, i32 1;
    store i32* %0 with i32 %473;
    ubr ^while.body17;
^b39:
    i32* %474 = getelementptr &(i32* %buf)[i32 %462];
    i32 %475 = load i32* %474;
    i1 %476 = scmp neq i32 %475, i32 58;
    cbr i1 %476(prob = 0.5), ^b, ^b40;
^if.else66:
    i1 %477 = scmp eq i32 %466, i32 9;
    cbr i1 %477(prob = 0.5), ^if.then81, ^if.else67;
^if.then81:
    i32 %478 = load i32* %0;
    i32 %479 = add i32 %478, i32 1;
    store i32* %0 with i32 %479;
    ubr ^while.body19;
^b40:
    i32 %480 = load i32* %0;
    i32 %481 = add i32 %480, i32 1;
    store i32* %0 with i32 %481;
    ubr ^while.body20;
^if.else67:
    i32 %482 = load i32* %0;
    i32* %483 = getelementptr &(i32* %buf)[i32 %482];
    i32 %484 = load i32* %483;
    i1 %485 = scmp eq i32 %484, i32 10;
    cbr i1 %485(prob = 0.5), ^if.then82, ^if.else68;
^if.then82:
    i32 %486 = add i32 %482, i32 1;
    store i32* %0 with i32 %486;
    ubr ^while.body19;
^while.body20:
    i32 %487 = phi [^b40, i32 %481] [^if.then84, i32 %498] [^if.then85, i32 %501] [^if.then86, i32 %506] [^if.then87, i32 %509];
    i1 %488 = scmp ge i32 %487, i32 %len;
    cbr i1 %488(prob = 0.5), ^b41, ^b42;
^if.else68:
    i1 %489 = scmp eq i32 %484, i32 13;
    cbr i1 %489(prob = 0.5), ^if.then83, ^b37;
^if.then83:
    i32 %490 = load i32* %0;
    i32 %491 = add i32 %490, i32 1;
    store i32* %0 with i32 %491;
    ubr ^while.body19;
^b41:
    i32 %492 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %493 = scmp eq i32 %492, i32 0;
    cbr i1 %493(prob = 0.5), ^b, ^entry4;
^b42:
    i32 %494 = load i32* %0;
    i32* %495 = getelementptr &(i32* %buf)[i32 %494];
    i32 %496 = load i32* %495;
    i1 %497 = scmp eq i32 %496, i32 32;
    cbr i1 %497(prob = 0.5), ^if.then84, ^if.else69;
^if.then84:
    i32 %498 = add i32 %494, i32 1;
    store i32* %0 with i32 %498;
    ubr ^while.body20;
^if.else69:
    i1 %499 = scmp eq i32 %496, i32 9;
    cbr i1 %499(prob = 0.5), ^if.then85, ^if.else70;
^if.then85:
    i32 %500 = load i32* %0;
    i32 %501 = add i32 %500, i32 1;
    store i32* %0 with i32 %501;
    ubr ^while.body20;
^if.else70:
    i32 %502 = load i32* %0;
    i32* %503 = getelementptr &(i32* %buf)[i32 %502];
    i32 %504 = load i32* %503;
    i1 %505 = scmp eq i32 %504, i32 10;
    cbr i1 %505(prob = 0.5), ^if.then86, ^if.else71;
^if.then86:
    i32 %506 = add i32 %502, i32 1;
    store i32* %0 with i32 %506;
    ubr ^while.body20;
^if.else71:
    i1 %507 = scmp eq i32 %504, i32 13;
    cbr i1 %507(prob = 0.5), ^if.then87, ^b41;
^if.then87:
    i32 %508 = load i32* %0;
    i32 %509 = add i32 %508, i32 1;
    store i32* %0 with i32 %509;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %8];
    i32* %4 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %7 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
^indirect:
    i32 %11 = load i32* %pos;
    ubr ^b;
^while.body1:
    i32 %12 = phi [^b, i32 %2] [^if.then, i32 %20] [^if.then1, i32 %25] [^if.then4, i32 %36] [^if.then6, i32 %42];
    i1 %13 = scmp ge i32 %12, i32 %3;
    cbr i1 %13(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %14 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %4, i32 %3, i32* %pos);
    i32 %15 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32 %16 = load i32* %pos;
    i32* %17 = getelementptr &(i32* %4)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %20 = add i32 %16, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^while.body2:
    i32 %21 = phi [^b1, i32 %15] [^if.then3, i32 %35] [^if.then5, i32 %40] [^if.then7, i32 %48] [^if.then8, i32 %51];
    i1 %22 = scmp ge i32 %21, i32 %3;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %23 = scmp eq i32 %18, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %24 = load i32* %pos;
    i32 %25 = add i32 %24, i32 1;
    store i32* %pos with i32 %25;
    ubr ^while.body1;
^b3:
    i1 %26 = scmp neq i32 %14, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^b4:
    i32 %27 = load i32* %pos;
    i32* %28 = getelementptr &(i32* %4)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 32;
    cbr i1 %30(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %4)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = scmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then3:
    i32 %35 = add i32 %27, i32 1;
    store i32* %pos with i32 %35;
    ubr ^while.body2;
^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then4:
    i32 %36 = add i32 %31, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body1;
^if.else3:
    i1 %37 = scmp eq i32 %29, i32 9;
    cbr i1 %37(prob = 0.5), ^if.then5, ^if.else5;
^if.else4:
    i1 %38 = scmp eq i32 %33, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b1;
^if.then5:
    i32 %39 = load i32* %pos;
    i32 %40 = add i32 %39, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body2;
^if.then6:
    i32 %41 = load i32* %pos;
    i32 %42 = add i32 %41, i32 1;
    store i32* %pos with i32 %42;
    ubr ^while.body1;
^if.else5:
    i32 %43 = load i32* %pos;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 10;
    cbr i1 %46(prob = 0.5), ^if.then7, ^if.else6;
^b5:
    i32 %47 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %47;
^if.then7:
    i32 %48 = add i32 %43, i32 1;
    store i32* %pos with i32 %48;
    ubr ^while.body2;
^if.else6:
    i1 %49 = scmp eq i32 %45, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %50 = load i32* %pos;
    i32 %51 = add i32 %50, i32 1;
    store i32* %pos with i32 %51;
    ubr ^while.body2;
}
