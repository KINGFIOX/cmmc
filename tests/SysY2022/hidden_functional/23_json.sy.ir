internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %17];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = scmp le i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^while.body;
  ^while.body:
    i32 %8 = phi [^entry, i32 %5] [^if.then, i32 %16] [^if.then2, i32 %25] [^if.then6, i32 %40] [^if.then9, i32 %57];
    i1 %9 = scmp le i32 %len, i32 %8;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^if.then7, i32 %50] [^b3, i32 0] [^if.then10, i32 %68] [^if.else11, i32 0] [^b5, i32 0] [^if.then12, i32 %97] [^if.then14, i32 0] [^if.else16, i32 0] [^if.then17, i32 %131] [^b7, i32 0] [^if.else18, i32 0] [^if.then19, i32 0] [^if.else20, i32 0] [^if.then20, i32 1] [^b9, i32 1] [^if.then24, i32 %167] [^b12, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^if.then25, i32 0] [^if.then26, i32 1] [^if.then30, i32 %200] [^if.else28, i32 0] [^if.else29, i32 0] [^if.else30, i32 0] [^if.else31, i32 0] [^b13, i32 1] [^if.then34, i32 %237] [^if.else33, i32 0] [^if.else34, i32 0] [^if.else35, i32 0] [^if.then35, i32 1] [^b16, i32 0] [^b18, i32 1] [^if.else37, i32 0] [^if.else38, i32 0] [^b19, i32 0] [^b20, i32 0] [^if.else41, i32 0] [^if.else42, i32 0] [^while.body11, i32 0] [^b25, i32 0] [^b26, i32 1] [^while.header2, i32 1] [^b27, i32 0] [^while.body13, i32 1] [^b31, i32 0] [^while.body18, i32 0] [^if.else57, i32 0] [^b34, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %10;
  ^b1:
    i1 %11 = scmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %16 = add i32 %12, i32 1;
    store i32* %0 with i32 %16;
    ubr ^while.body;
  ^if.then1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %buf)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 123;
    cbr i1 %20(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %21 = scmp eq i32 %6, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %22 = load i32* %13;
    i1 %23 = scmp eq i32 %22, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else4;
  ^if.then2:
    i32 %24 = load i32* %0;
    i32 %25 = add i32 %24, i32 1;
    store i32* %0 with i32 %25;
    ubr ^while.body;
  ^if.else2:
    i32 %26 = load i32* %18;
    i1 %27 = scmp eq i32 %26, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then3:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 43;
    cbr i1 %31(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else3:
    i1 %32 = scmp eq i32 %6, i32 2;
    cbr i1 %32(prob = 0.5), ^if.then5, ^if.else7;
  ^if.else4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %buf)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then6, ^if.else8;
  ^if.then4:
    i32 %37 = add i32 %28, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then5:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.then6:
    i32 %40 = add i32 %33, i32 1;
    store i32* %0 with i32 %40;
    ubr ^while.body;
  ^if.else5:
    i32 %41 = load i32* %0;
    i32* %42 = getelementptr &(i32* %buf)[i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp eq i32 %43, i32 34;
    cbr i1 %44(prob = 0.5), ^if.then7, ^if.else9;
  ^if.else6:
    i32 %45 = load i32* %29;
    i1 %46 = scmp eq i32 %45, i32 45;
    cbr i1 %46(prob = 0.5), ^if.then4, ^indirect;
  ^if.else7:
    i1 %47 = scmp eq i32 %6, i32 3;
    cbr i1 %47(prob = 0.5), ^if.then8, ^if.else10;
  ^if.else8:
    i32 %48 = load i32* %34;
    i1 %49 = scmp eq i32 %48, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then9, ^b1;
  ^if.then7:
    i32 %50 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b3:
    i32 %51 = phi [^if.then4, i32 %37] [^indirect, i32 %53];
    i1 %52 = scmp le i32 %len, i32 %51;
    cbr i1 %52(prob = 0.5), ^b, ^if.else11;
  ^indirect:
    i32 %53 = load i32* %0;
    ubr ^b3;
  ^if.then8:
    i32 %54 = load i32* %0;
    i32 %55 = add i32 %54, i32 1;
    store i32* %0 with i32 %55;
    ubr ^while.body2;
  ^if.then9:
    i32 %56 = load i32* %0;
    i32 %57 = add i32 %56, i32 1;
    store i32* %0 with i32 %57;
    ubr ^while.body;
  ^while.header:
    i32 %58 = phi [^if.then5, i32 %39] [^b4, i32 %94];
    i1 %59 = scmp gt i32 %len, i32 %58;
    cbr i1 %59(prob = 0.97), ^while.body1, ^indirect1;
  ^if.else9:
    i32 %60 = load i32* %42;
    i1 %61 = scmp lt i32 %60, i32 58;
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp gt i32 %60, i32 47;
    i32 %64 = select i1 %63 ? i32 %62 : i32 0;
    i1 %65 = scmp eq i32 %64, i32 1;
    cbr i1 %65(prob = 0.5), ^if.then10, ^if.else12;
  ^if.else10:
    i1 %66 = scmp eq i32 %6, i32 4;
    cbr i1 %66(prob = 0.5), ^if.then11, ^if.else13;
  ^indirect1:
    i32 %67 = load i32* %0;
    ubr ^b5;
  ^if.then10:
    i32 %68 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else11:
    i32 %69 = load i32* %0;
    i32* %70 = getelementptr &(i32* %buf)[i32 %69];
    i32 %71 = load i32* %70;
    i1 %72 = scmp lt i32 %71, i32 58;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp gt i32 %71, i32 47;
    i32 %75 = select i1 %74 ? i32 %73 : i32 0;
    i1 %76 = scmp eq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^b, ^while.header1;
  ^while.body1:
    i32 %77 = load i32* %0;
    i32* %78 = getelementptr &(i32* %buf)[i32 %77];
    i32 %79 = load i32* %78;
    i1 %80 = scmp eq i32 %79, i32 34;
    cbr i1 %80(prob = 0.5), ^b5, ^b4;
  ^if.then11:
    i32 %81 = load i32* %0;
    i32 %82 = add i32 %81, i32 1;
    store i32* %0 with i32 %82;
    ubr ^while.body3;
  ^while.body2:
    i32 %83 = phi [^if.then8, i32 %55] [^if.then15, i32 %114] [^if.then21, i32 %159] [^if.then28, i32 %196] [^if.then32, i32 %231];
    i1 %84 = scmp le i32 %len, i32 %83;
    cbr i1 %84(prob = 0.5), ^if.then13, ^b6;
  ^if.else12:
    i32 %85 = load i32* %0;
    i32* %86 = getelementptr &(i32* %buf)[i32 %85];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 43;
    cbr i1 %88(prob = 0.5), ^if.then12, ^if.else14;
  ^if.else13:
    i1 %89 = scmp eq i32 %6, i32 5;
    cbr i1 %89(prob = 0.5), ^if.then14, ^if.else15;
  ^b4:
    i32 %90 = load i32* %78;
    i1 %91 = scmp eq i32 %90, i32 92;
    i32 %92 = zext i1 %91 to i32;
    i32 %93 = add i32 %77, i32 1;
    i32 %94 = add i32 %92, i32 %93;
    store i32* %0 with i32 %94;
    ubr ^while.header;
  ^b5:
    i32 %95 = phi [^indirect1, i32 %67] [^while.body1, i32 %77];
    i1 %96 = scmp le i32 %len, i32 %95;
    cbr i1 %96(prob = 0.5), ^b, ^if.else16;
  ^if.then12:
    i32 %97 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then13:
    i32 %98 = load i32* %0;
    i1 %99 = scmp gt i32 %len, i32 %98;
    cbr i1 %99(prob = 0.5), ^if.then16, ^b7;
  ^while.header1:
    i32 %100 = phi [^if.else11, i32 %69] [^b10, i32 %157];
    i1 %101 = scmp gt i32 %len, i32 %100;
    cbr i1 %101(prob = 0.97), ^while.body4, ^indirect2;
  ^b6:
    i32 %102 = load i32* %0;
    i32* %103 = getelementptr &(i32* %buf)[i32 %102];
    i32 %104 = load i32* %103;
    i1 %105 = scmp eq i32 %104, i32 32;
    cbr i1 %105(prob = 0.5), ^if.then15, ^if.else17;
  ^while.body3:
    i32 %106 = phi [^if.then11, i32 %82] [^if.then22, i32 %160] [^if.then29, i32 %198] [^if.then33, i32 %232] [^if.then37, i32 %274];
    i1 %107 = scmp le i32 %len, i32 %106;
    cbr i1 %107(prob = 0.5), ^if.then18, ^b8;
  ^if.then14:
    i32 %108 = load i32* %0;
    i32 %109 = add i32 %108, i32 3;
    i1 %110 = scmp le i32 %len, i32 %109;
    cbr i1 %110(prob = 0.5), ^b, ^if.else18;
  ^if.else14:
    i32 %111 = load i32* %86;
    i1 %112 = scmp eq i32 %111, i32 45;
    cbr i1 %112(prob = 0.5), ^if.then17, ^if.else19;
  ^if.else15:
    i1 %113 = scmp eq i32 %6, i32 6;
    cbr i1 %113(prob = 0.5), ^if.then19, ^if.else20;
  ^if.then15:
    i32 %114 = add i32 %102, i32 1;
    store i32* %0 with i32 %114;
    ubr ^while.body2;
  ^indirect2:
    i32 %115 = load i32* %0;
    ubr ^b11;
  ^if.else16:
    i32 %116 = load i32* %0;
    i32* %117 = getelementptr &(i32* %buf)[i32 %116];
    i32 %118 = load i32* %117;
    i1 %119 = scmp neq i32 %118, i32 34;
    cbr i1 %119(prob = 0.5), ^b, ^b9;
  ^while.body4:
    i32 %120 = load i32* %0;
    i32* %121 = getelementptr &(i32* %buf)[i32 %120];
    i32 %122 = load i32* %121;
    i1 %123 = scmp lt i32 %122, i32 58;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp gt i32 %122, i32 47;
    i32 %126 = select i1 %125 ? i32 %124 : i32 0;
    i1 %127 = scmp neq i32 %126, i32 1;
    cbr i1 %127(prob = 0.5), ^b11, ^b10;
  ^if.then16:
    i32* %128 = getelementptr &(i32* %buf)[i32 %98];
    i32 %129 = load i32* %128;
    i1 %130 = scmp eq i32 %129, i32 93;
    cbr i1 %130(prob = 0.5), ^if.then20, ^b7;
  ^if.then17:
    i32 %131 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then18:
    i32 %132 = load i32* %0;
    i1 %133 = scmp gt i32 %len, i32 %132;
    cbr i1 %133(prob = 0.5), ^if.then23, ^b12;
  ^b7:
    i32 %134 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %135 = scmp eq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^b, ^entry1;
  ^if.else17:
    i32 %136 = load i32* %103;
    i1 %137 = scmp eq i32 %136, i32 9;
    cbr i1 %137(prob = 0.5), ^if.then21, ^if.else21;
  ^b8:
    i32 %138 = load i32* %0;
    i32* %139 = getelementptr &(i32* %buf)[i32 %138];
    i32 %140 = load i32* %139;
    i1 %141 = scmp eq i32 %140, i32 32;
    cbr i1 %141(prob = 0.5), ^if.then22, ^if.else22;
  ^if.else18:
    i32* %142 = getelementptr &(i32* %buf)[i32 %108];
    i32 %143 = load i32* %142;
    i1 %144 = scmp neq i32 %143, i32 116;
    cbr i1 %144(prob = 0.5), ^b, ^if.else23;
  ^if.then19:
    i32 %145 = load i32* %0;
    i32 %146 = add i32 %145, i32 4;
    i1 %147 = scmp le i32 %len, i32 %146;
    cbr i1 %147(prob = 0.5), ^b, ^if.else24;
  ^if.else19:
    i32 %148 = load i32* %0;
    i32* %149 = getelementptr &(i32* %buf)[i32 %148];
    i32 %150 = load i32* %149;
    i1 %151 = scmp eq i32 %150, i32 116;
    cbr i1 %151(prob = 0.5), ^if.then24, ^if.else25;
  ^if.else20:
    i1 %152 = scmp eq i32 %6, i32 7;
    cbr i1 %152(prob = 0.5), ^if.then25, ^b;
  ^if.then20:
    i32 %153 = load i32* %0;
    i32 %154 = add i32 %153, i32 1;
    store i32* %0 with i32 %154;
    ubr ^b;
  ^b9:
    i32 %155 = phi [^if.else16, i32 %116] [^b25, i32 %303] [^if.else57, i32 %452];
    i32 %156 = add i32 %155, i32 1;
    store i32* %0 with i32 %156;
    ubr ^b;
  ^b10:
    i32 %157 = add i32 %120, i32 1;
    store i32* %0 with i32 %157;
    ubr ^while.header1;
  ^if.then21:
    i32 %158 = load i32* %0;
    i32 %159 = add i32 %158, i32 1;
    store i32* %0 with i32 %159;
    ubr ^while.body2;
  ^if.then22:
    i32 %160 = add i32 %138, i32 1;
    store i32* %0 with i32 %160;
    ubr ^while.body3;
  ^b11:
    i32 %161 = phi [^indirect2, i32 %115] [^while.body4, i32 %120];
    i1 %162 = scmp gt i32 %len, i32 %161;
    cbr i1 %162(prob = 0.5), ^if.then27, ^indirect3;
  ^entry1:
    i32 %163 = load i32* %0;
    ubr ^while.body5;
  ^if.then23:
    i32* %164 = getelementptr &(i32* %buf)[i32 %132];
    i32 %165 = load i32* %164;
    i1 %166 = scmp eq i32 %165, i32 125;
    cbr i1 %166(prob = 0.5), ^if.then26, ^b12;
  ^if.then24:
    i32 %167 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b12:
    i32 %168 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %169 = scmp eq i32 %168, i32 0;
    cbr i1 %169(prob = 0.5), ^b, ^entry2;
  ^if.else21:
    i32 %170 = load i32* %0;
    i32* %171 = getelementptr &(i32* %buf)[i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = scmp eq i32 %172, i32 10;
    cbr i1 %173(prob = 0.5), ^if.then28, ^if.else26;
  ^if.else22:
    i32 %174 = load i32* %139;
    i1 %175 = scmp eq i32 %174, i32 9;
    cbr i1 %175(prob = 0.5), ^if.then29, ^if.else27;
  ^if.else23:
    i32 %176 = load i32* %0;
    i32 %177 = add i32 %176, i32 1;
    i32* %178 = getelementptr &(i32* %buf)[i32 %177];
    i32 %179 = load i32* %178;
    i1 %180 = scmp neq i32 %179, i32 114;
    cbr i1 %180(prob = 0.5), ^b, ^if.else28;
  ^if.else24:
    i32* %181 = getelementptr &(i32* %buf)[i32 %145];
    i32 %182 = load i32* %181;
    i1 %183 = scmp neq i32 %182, i32 102;
    cbr i1 %183(prob = 0.5), ^b, ^if.else29;
  ^if.then25:
    i32 %184 = load i32* %0;
    i32 %185 = add i32 %184, i32 3;
    i1 %186 = scmp le i32 %len, i32 %185;
    cbr i1 %186(prob = 0.5), ^b, ^if.else30;
  ^if.else25:
    i32 %187 = load i32* %149;
    i1 %188 = scmp eq i32 %187, i32 102;
    cbr i1 %188(prob = 0.5), ^if.then30, ^if.else31;
  ^if.then26:
    i32 %189 = load i32* %0;
    i32 %190 = add i32 %189, i32 1;
    store i32* %0 with i32 %190;
    ubr ^b;
  ^indirect3:
    i32 %191 = load i32* %0;
    ubr ^b13;
  ^if.then27:
    i32 %192 = load i32* %0;
    i32* %193 = getelementptr &(i32* %buf)[i32 %192];
    i32 %194 = load i32* %193;
    i1 %195 = scmp eq i32 %194, i32 46;
    cbr i1 %195(prob = 0.5), ^if.then31, ^b13;
  ^if.then28:
    i32 %196 = add i32 %170, i32 1;
    store i32* %0 with i32 %196;
    ubr ^while.body2;
  ^if.then29:
    i32 %197 = load i32* %0;
    i32 %198 = add i32 %197, i32 1;
    store i32* %0 with i32 %198;
    ubr ^while.body3;
  ^entry2:
    i32 %199 = load i32* %0;
    ubr ^while.body6;
  ^if.then30:
    i32 %200 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^while.body5:
    i32 %201 = phi [^entry1, i32 %163] [^if.then36, i32 %272] [^if.then39, i32 %299] [^if.then43, i32 %335] [^if.then49, i32 %369];
    i1 %202 = scmp le i32 %len, i32 %201;
    cbr i1 %202(prob = 0.5), ^b14, ^b15;
  ^if.else26:
    i32 %203 = load i32* %171;
    i1 %204 = scmp eq i32 %203, i32 13;
    cbr i1 %204(prob = 0.5), ^if.then32, ^if.then13;
  ^if.else27:
    i32 %205 = load i32* %0;
    i32* %206 = getelementptr &(i32* %buf)[i32 %205];
    i32 %207 = load i32* %206;
    i1 %208 = scmp eq i32 %207, i32 10;
    cbr i1 %208(prob = 0.5), ^if.then33, ^if.else32;
  ^if.else28:
    i32 %209 = add i32 %176, i32 2;
    i32* %210 = getelementptr &(i32* %buf)[i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = scmp neq i32 %211, i32 117;
    cbr i1 %212(prob = 0.5), ^b, ^if.else33;
  ^if.else29:
    i32 %213 = load i32* %0;
    i32 %214 = add i32 %213, i32 1;
    i32* %215 = getelementptr &(i32* %buf)[i32 %214];
    i32 %216 = load i32* %215;
    i1 %217 = scmp neq i32 %216, i32 97;
    cbr i1 %217(prob = 0.5), ^b, ^if.else34;
  ^if.else30:
    i32* %218 = getelementptr &(i32* %buf)[i32 %184];
    i32 %219 = load i32* %218;
    i1 %220 = scmp neq i32 %219, i32 110;
    cbr i1 %220(prob = 0.5), ^b, ^if.else35;
  ^if.else31:
    i32 %221 = load i32* %0;
    i32* %222 = getelementptr &(i32* %buf)[i32 %221];
    i32 %223 = load i32* %222;
    i1 %224 = scmp eq i32 %223, i32 110;
    cbr i1 %224(prob = 0.5), ^if.then34, ^b;
  ^if.then31:
    i32 %225 = phi [^if.then27, i32 %192] [^while.body7, i32 %226];
    i32 %226 = add i32 %225, i32 1;
    i1 %227 = scmp gt i32 %len, i32 %226;
    store i32* %0 with i32 %226;
    cbr i1 %227(prob = 0.97), ^while.body7, ^b13;
  ^b13:
    i32 %228 = phi [^indirect3, i32 %191] [^if.then27, i32 %192] [^if.then31, i32 %226] [^while.body7, i32 %226];
    i1 %229 = scmp gt i32 %len, i32 %228;
    cbr i1 %229(prob = 0.5), ^if.then35, ^b;
  ^if.then32:
    i32 %230 = load i32* %0;
    i32 %231 = add i32 %230, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.body2;
  ^if.then33:
    i32 %232 = add i32 %205, i32 1;
    store i32* %0 with i32 %232;
    ubr ^while.body3;
  ^b14:
    i32 %233 = load i32* %0;
    i32* %234 = getelementptr &(i32* %buf)[i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = scmp eq i32 %235, i32 44;
    cbr i1 %236(prob = 0.97), ^while.body8, ^while.body9;
  ^if.then34:
    i32 %237 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b15:
    i32 %238 = load i32* %0;
    i32* %239 = getelementptr &(i32* %buf)[i32 %238];
    i32 %240 = load i32* %239;
    i1 %241 = scmp eq i32 %240, i32 32;
    cbr i1 %241(prob = 0.5), ^if.then36, ^if.else36;
  ^while.body6:
    i32 %242 = phi [^entry2, i32 %199] [^if.then40, i32 %300] [^if.then44, i32 %337] [^if.then50, i32 %370] [^if.then54, i32 %389];
    i1 %243 = scmp le i32 %len, i32 %242;
    cbr i1 %243(prob = 0.5), ^b16, ^b17;
  ^if.else32:
    i32 %244 = load i32* %206;
    i1 %245 = scmp eq i32 %244, i32 13;
    cbr i1 %245(prob = 0.5), ^if.then37, ^if.then18;
  ^if.else33:
    i32 %246 = load i32* %0;
    i32 %247 = add i32 %246, i32 3;
    i32* %248 = getelementptr &(i32* %buf)[i32 %247];
    i32 %249 = load i32* %248;
    i1 %250 = scmp neq i32 %249, i32 101;
    cbr i1 %250(prob = 0.5), ^b, ^b18;
  ^if.else34:
    i32 %251 = add i32 %213, i32 2;
    i32* %252 = getelementptr &(i32* %buf)[i32 %251];
    i32 %253 = load i32* %252;
    i1 %254 = scmp neq i32 %253, i32 108;
    cbr i1 %254(prob = 0.5), ^b, ^if.else37;
  ^if.else35:
    i32 %255 = load i32* %0;
    i32 %256 = add i32 %255, i32 1;
    i32* %257 = getelementptr &(i32* %buf)[i32 %256];
    i32 %258 = load i32* %257;
    i1 %259 = scmp neq i32 %258, i32 117;
    cbr i1 %259(prob = 0.5), ^b, ^if.else38;
  ^while.body7:
    i32* %260 = getelementptr &(i32* %buf)[i32 %226];
    i32 %261 = load i32* %260;
    i1 %262 = scmp lt i32 %261, i32 58;
    i32 %263 = zext i1 %262 to i32;
    i1 %264 = scmp gt i32 %261, i32 47;
    i32 %265 = select i1 %264 ? i32 %263 : i32 0;
    i1 %266 = scmp neq i32 %265, i32 1;
    cbr i1 %266(prob = 0.5), ^b13, ^if.then31;
  ^while.body8:
    i32 %267 = add i32 %233, i32 1;
    store i32* %0 with i32 %267;
    ubr ^while.body10;
  ^if.then35:
    i32 %268 = load i32* %0;
    i32* %269 = getelementptr &(i32* %buf)[i32 %268];
    i32 %270 = load i32* %269;
    i1 %271 = scmp eq i32 %270, i32 101;
    cbr i1 %271(prob = 0.5), ^if.then38, ^b;
  ^if.then36:
    i32 %272 = add i32 %238, i32 1;
    store i32* %0 with i32 %272;
    ubr ^while.body5;
  ^if.then37:
    i32 %273 = load i32* %0;
    i32 %274 = add i32 %273, i32 1;
    store i32* %0 with i32 %274;
    ubr ^while.body3;
  ^b16:
    i32 %275 = load i32* %0;
    i1 %276 = scmp le i32 %len, i32 %275;
    cbr i1 %276(prob = 0.5), ^b, ^b20;
  ^while.body9:
    i32 %277 = phi [^b14, i32 %233] [^if.then42, i32 %334] [^if.then48, i32 %367] [^if.then53, i32 %387] [^if.then57, i32 %414];
    i1 %278 = scmp le i32 %len, i32 %277;
    cbr i1 %278(prob = 0.5), ^b19, ^b21;
  ^if.else36:
    i32 %279 = load i32* %239;
    i1 %280 = scmp eq i32 %279, i32 9;
    cbr i1 %280(prob = 0.5), ^if.then39, ^if.else39;
  ^b17:
    i32 %281 = load i32* %0;
    i32* %282 = getelementptr &(i32* %buf)[i32 %281];
    i32 %283 = load i32* %282;
    i1 %284 = scmp eq i32 %283, i32 32;
    cbr i1 %284(prob = 0.5), ^if.then40, ^if.else40;
  ^b18:
    i32 %285 = phi [^if.else33, i32 %246] [^if.else42, i32 %322];
    i32 %286 = add i32 %285, i32 4;
    store i32* %0 with i32 %286;
    ubr ^b;
  ^if.else37:
    i32 %287 = load i32* %0;
    i32 %288 = add i32 %287, i32 3;
    i32* %289 = getelementptr &(i32* %buf)[i32 %288];
    i32 %290 = load i32* %289;
    i1 %291 = scmp neq i32 %290, i32 115;
    cbr i1 %291(prob = 0.5), ^b, ^if.else41;
  ^if.else38:
    i32 %292 = add i32 %255, i32 2;
    i32* %293 = getelementptr &(i32* %buf)[i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = scmp neq i32 %294, i32 108;
    cbr i1 %295(prob = 0.5), ^b, ^if.else42;
  ^if.then38:
    i32 %296 = add i32 %268, i32 1;
    i1 %297 = scmp gt i32 %len, i32 %296;
    store i32* %0 with i32 %296;
    cbr i1 %297(prob = 0.5), ^if.then41, ^b22;
  ^if.then39:
    i32 %298 = load i32* %0;
    i32 %299 = add i32 %298, i32 1;
    store i32* %0 with i32 %299;
    ubr ^while.body5;
  ^if.then40:
    i32 %300 = add i32 %281, i32 1;
    store i32* %0 with i32 %300;
    ubr ^while.body6;
  ^while.body10:
    i32 %301 = phi [^while.body8, i32 %267] [^if.then46, i32 %361] [^if.then52, i32 %384] [^if.then55, i32 %410] [^if.then58, i32 %420];
    i1 %302 = scmp le i32 %len, i32 %301;
    cbr i1 %302(prob = 0.5), ^while.body11, ^b24;
  ^b19:
    i32 %303 = load i32* %0;
    i1 %304 = scmp le i32 %len, i32 %303;
    cbr i1 %304(prob = 0.5), ^b, ^b25;
  ^b20:
    i32* %305 = getelementptr &(i32* %buf)[i32 %275];
    i32 %306 = load i32* %305;
    i1 %307 = scmp neq i32 %306, i32 58;
    cbr i1 %307(prob = 0.5), ^b, ^b23;
  ^b21:
    i32 %308 = load i32* %0;
    i32* %309 = getelementptr &(i32* %buf)[i32 %308];
    i32 %310 = load i32* %309;
    i1 %311 = scmp eq i32 %310, i32 32;
    cbr i1 %311(prob = 0.5), ^if.then42, ^if.else43;
  ^if.else39:
    i32 %312 = load i32* %0;
    i32* %313 = getelementptr &(i32* %buf)[i32 %312];
    i32 %314 = load i32* %313;
    i1 %315 = scmp eq i32 %314, i32 10;
    cbr i1 %315(prob = 0.5), ^if.then43, ^if.else44;
  ^if.else40:
    i32 %316 = load i32* %282;
    i1 %317 = scmp eq i32 %316, i32 9;
    cbr i1 %317(prob = 0.5), ^if.then44, ^if.else45;
  ^if.else41:
    i32 %318 = add i32 %287, i32 4;
    i32* %319 = getelementptr &(i32* %buf)[i32 %318];
    i32 %320 = load i32* %319;
    i1 %321 = scmp neq i32 %320, i32 101;
    cbr i1 %321(prob = 0.5), ^b, ^b26;
  ^if.else42:
    i32 %322 = load i32* %0;
    i32 %323 = add i32 %322, i32 3;
    i32* %324 = getelementptr &(i32* %buf)[i32 %323];
    i32 %325 = load i32* %324;
    i1 %326 = scmp neq i32 %325, i32 108;
    cbr i1 %326(prob = 0.5), ^b, ^b18;
  ^if.then41:
    i32* %327 = getelementptr &(i32* %buf)[i32 %296];
    i32 %328 = load i32* %327;
    i1 %329 = scmp eq i32 %328, i32 43;
    cbr i1 %329(prob = 0.5), ^if.then45, ^indirect4;
  ^b22:
    i32 %330 = phi [^if.then38, i32 %296] [^if.then45, i32 %358] [^indirect4, i32 %359];
    i1 %331 = scmp gt i32 %len, i32 %330;
    cbr i1 %331(prob = 0.5), ^if.then47, ^indirect5;
  ^while.body11:
    i32 %332 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %333 = scmp eq i32 %332, i32 0;
    cbr i1 %333(prob = 0.5), ^b, ^entry1;
  ^if.then42:
    i32 %334 = add i32 %308, i32 1;
    store i32* %0 with i32 %334;
    ubr ^while.body9;
  ^if.then43:
    i32 %335 = add i32 %312, i32 1;
    store i32* %0 with i32 %335;
    ubr ^while.body5;
  ^if.then44:
    i32 %336 = load i32* %0;
    i32 %337 = add i32 %336, i32 1;
    store i32* %0 with i32 %337;
    ubr ^while.body6;
  ^b23:
    i32 %338 = load i32* %0;
    i32 %339 = add i32 %338, i32 1;
    store i32* %0 with i32 %339;
    ubr ^while.body12;
  ^b24:
    i32 %340 = load i32* %0;
    i32* %341 = getelementptr &(i32* %buf)[i32 %340];
    i32 %342 = load i32* %341;
    i1 %343 = scmp eq i32 %342, i32 32;
    cbr i1 %343(prob = 0.5), ^if.then46, ^if.else46;
  ^b25:
    i32* %344 = getelementptr &(i32* %buf)[i32 %303];
    i32 %345 = load i32* %344;
    i1 %346 = scmp neq i32 %345, i32 93;
    cbr i1 %346(prob = 0.5), ^b, ^b9;
  ^if.else43:
    i32 %347 = load i32* %309;
    i1 %348 = scmp eq i32 %347, i32 9;
    cbr i1 %348(prob = 0.5), ^if.then48, ^if.else47;
  ^if.else44:
    i32 %349 = load i32* %313;
    i1 %350 = scmp eq i32 %349, i32 13;
    cbr i1 %350(prob = 0.5), ^if.then49, ^b14;
  ^if.else45:
    i32 %351 = load i32* %0;
    i32* %352 = getelementptr &(i32* %buf)[i32 %351];
    i32 %353 = load i32* %352;
    i1 %354 = scmp eq i32 %353, i32 10;
    cbr i1 %354(prob = 0.5), ^if.then50, ^if.else48;
  ^b26:
    i32 %355 = load i32* %0;
    i32 %356 = add i32 %355, i32 5;
    store i32* %0 with i32 %356;
    ubr ^b;
  ^if.then45:
    i32 %357 = load i32* %0;
    i32 %358 = add i32 %357, i32 1;
    store i32* %0 with i32 %358;
    ubr ^b22;
  ^indirect4:
    i32 %359 = load i32* %0;
    ubr ^b22;
  ^indirect5:
    i32 %360 = load i32* %0;
    ubr ^while.header2;
  ^if.then46:
    i32 %361 = add i32 %340, i32 1;
    store i32* %0 with i32 %361;
    ubr ^while.body10;
  ^if.then47:
    i32 %362 = load i32* %0;
    i32* %363 = getelementptr &(i32* %buf)[i32 %362];
    i32 %364 = load i32* %363;
    i1 %365 = scmp eq i32 %364, i32 45;
    cbr i1 %365(prob = 0.5), ^if.then51, ^while.header2;
  ^if.then48:
    i32 %366 = load i32* %0;
    i32 %367 = add i32 %366, i32 1;
    store i32* %0 with i32 %367;
    ubr ^while.body9;
  ^if.then49:
    i32 %368 = load i32* %0;
    i32 %369 = add i32 %368, i32 1;
    store i32* %0 with i32 %369;
    ubr ^while.body5;
  ^if.then50:
    i32 %370 = add i32 %351, i32 1;
    store i32* %0 with i32 %370;
    ubr ^while.body6;
  ^if.else46:
    i32 %371 = load i32* %341;
    i1 %372 = scmp eq i32 %371, i32 9;
    cbr i1 %372(prob = 0.5), ^if.then52, ^if.else49;
  ^while.body12:
    i32 %373 = phi [^b23, i32 %339] [^if.then56, i32 %411] [^if.then59, i32 %422] [^if.then60, i32 %429] [^if.then62, i32 %443];
    i1 %374 = scmp le i32 %len, i32 %373;
    cbr i1 %374(prob = 0.5), ^b27, ^b28;
  ^if.else47:
    i32 %375 = load i32* %0;
    i32* %376 = getelementptr &(i32* %buf)[i32 %375];
    i32 %377 = load i32* %376;
    i1 %378 = scmp eq i32 %377, i32 10;
    cbr i1 %378(prob = 0.5), ^if.then53, ^if.else50;
  ^if.else48:
    i32 %379 = load i32* %352;
    i1 %380 = scmp eq i32 %379, i32 13;
    cbr i1 %380(prob = 0.5), ^if.then54, ^b16;
  ^if.then51:
    i32 %381 = phi [^if.then47, i32 %362] [^while.body13, i32 %402];
    i32 %382 = add i32 %381, i32 1;
    store i32* %0 with i32 %382;
    ubr ^while.header2;
  ^if.then52:
    i32 %383 = load i32* %0;
    i32 %384 = add i32 %383, i32 1;
    store i32* %0 with i32 %384;
    ubr ^while.body10;
  ^while.header2:
    i32 %385 = phi [^indirect5, i32 %360] [^if.then47, i32 %362] [^if.then51, i32 %382];
    i1 %386 = scmp gt i32 %len, i32 %385;
    cbr i1 %386(prob = 0.97), ^while.body13, ^b;
  ^if.then53:
    i32 %387 = add i32 %375, i32 1;
    store i32* %0 with i32 %387;
    ubr ^while.body9;
  ^if.then54:
    i32 %388 = load i32* %0;
    i32 %389 = add i32 %388, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.body6;
  ^if.else49:
    i32 %390 = load i32* %0;
    i32* %391 = getelementptr &(i32* %buf)[i32 %390];
    i32 %392 = load i32* %391;
    i1 %393 = scmp eq i32 %392, i32 10;
    cbr i1 %393(prob = 0.5), ^if.then55, ^if.else51;
  ^b27:
    i32 %394 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %395 = scmp eq i32 %394, i32 0;
    cbr i1 %395(prob = 0.5), ^b, ^entry3;
  ^b28:
    i32 %396 = load i32* %0;
    i32* %397 = getelementptr &(i32* %buf)[i32 %396];
    i32 %398 = load i32* %397;
    i1 %399 = scmp eq i32 %398, i32 32;
    cbr i1 %399(prob = 0.5), ^if.then56, ^if.else52;
  ^if.else50:
    i32 %400 = load i32* %376;
    i1 %401 = scmp eq i32 %400, i32 13;
    cbr i1 %401(prob = 0.5), ^if.then57, ^b19;
  ^while.body13:
    i32 %402 = load i32* %0;
    i32* %403 = getelementptr &(i32* %buf)[i32 %402];
    i32 %404 = load i32* %403;
    i1 %405 = scmp lt i32 %404, i32 58;
    i32 %406 = zext i1 %405 to i32;
    i1 %407 = scmp gt i32 %404, i32 47;
    i32 %408 = select i1 %407 ? i32 %406 : i32 0;
    i1 %409 = scmp neq i32 %408, i32 1;
    cbr i1 %409(prob = 0.5), ^b, ^if.then51;
  ^if.then55:
    i32 %410 = add i32 %390, i32 1;
    store i32* %0 with i32 %410;
    ubr ^while.body10;
  ^if.then56:
    i32 %411 = add i32 %396, i32 1;
    store i32* %0 with i32 %411;
    ubr ^while.body12;
  ^entry3:
    i32 %412 = load i32* %0;
    ubr ^while.body14;
  ^if.then57:
    i32 %413 = load i32* %0;
    i32 %414 = add i32 %413, i32 1;
    store i32* %0 with i32 %414;
    ubr ^while.body9;
  ^if.else51:
    i32 %415 = load i32* %391;
    i1 %416 = scmp eq i32 %415, i32 13;
    cbr i1 %416(prob = 0.5), ^if.then58, ^while.body11;
  ^if.else52:
    i32 %417 = load i32* %397;
    i1 %418 = scmp eq i32 %417, i32 9;
    cbr i1 %418(prob = 0.5), ^if.then59, ^if.else53;
  ^if.then58:
    i32 %419 = load i32* %0;
    i32 %420 = add i32 %419, i32 1;
    store i32* %0 with i32 %420;
    ubr ^while.body10;
  ^if.then59:
    i32 %421 = load i32* %0;
    i32 %422 = add i32 %421, i32 1;
    store i32* %0 with i32 %422;
    ubr ^while.body12;
  ^while.body14:
    i32 %423 = phi [^entry3, i32 %412] [^if.then61, i32 %441] [^if.then63, i32 %449] [^if.then65, i32 %465] [^if.then68, i32 %482];
    i1 %424 = scmp le i32 %len, i32 %423;
    cbr i1 %424(prob = 0.5), ^b29, ^b30;
  ^if.else53:
    i32 %425 = load i32* %0;
    i32* %426 = getelementptr &(i32* %buf)[i32 %425];
    i32 %427 = load i32* %426;
    i1 %428 = scmp eq i32 %427, i32 10;
    cbr i1 %428(prob = 0.5), ^if.then60, ^if.else54;
  ^if.then60:
    i32 %429 = add i32 %425, i32 1;
    store i32* %0 with i32 %429;
    ubr ^while.body12;
  ^b29:
    i32 %430 = load i32* %0;
    i32* %431 = getelementptr &(i32* %buf)[i32 %430];
    i32 %432 = load i32* %431;
    i1 %433 = scmp eq i32 %432, i32 44;
    cbr i1 %433(prob = 0.97), ^while.body15, ^while.body16;
  ^b30:
    i32 %434 = load i32* %0;
    i32* %435 = getelementptr &(i32* %buf)[i32 %434];
    i32 %436 = load i32* %435;
    i1 %437 = scmp eq i32 %436, i32 32;
    cbr i1 %437(prob = 0.5), ^if.then61, ^if.else55;
  ^if.else54:
    i32 %438 = load i32* %426;
    i1 %439 = scmp eq i32 %438, i32 13;
    cbr i1 %439(prob = 0.5), ^if.then62, ^b27;
  ^while.body15:
    i32 %440 = add i32 %430, i32 1;
    store i32* %0 with i32 %440;
    ubr ^while.body17;
  ^if.then61:
    i32 %441 = add i32 %434, i32 1;
    store i32* %0 with i32 %441;
    ubr ^while.body14;
  ^if.then62:
    i32 %442 = load i32* %0;
    i32 %443 = add i32 %442, i32 1;
    store i32* %0 with i32 %443;
    ubr ^while.body12;
  ^while.body16:
    i32 %444 = phi [^b29, i32 %430] [^if.then64, i32 %464] [^if.then67, i32 %480] [^if.then70, i32 %493] [^if.then72, i32 %508];
    i1 %445 = scmp le i32 %len, i32 %444;
    cbr i1 %445(prob = 0.5), ^b31, ^b32;
  ^if.else55:
    i32 %446 = load i32* %435;
    i1 %447 = scmp eq i32 %446, i32 9;
    cbr i1 %447(prob = 0.5), ^if.then63, ^if.else56;
  ^if.then63:
    i32 %448 = load i32* %0;
    i32 %449 = add i32 %448, i32 1;
    store i32* %0 with i32 %449;
    ubr ^while.body14;
  ^while.body17:
    i32 %450 = phi [^while.body15, i32 %440] [^if.then66, i32 %477] [^if.then69, i32 %490] [^if.then71, i32 %500] [^if.then74, i32 %513];
    i1 %451 = scmp le i32 %len, i32 %450;
    cbr i1 %451(prob = 0.5), ^while.body18, ^b33;
  ^b31:
    i32 %452 = load i32* %0;
    i1 %453 = scmp le i32 %len, i32 %452;
    cbr i1 %453(prob = 0.5), ^b, ^if.else57;
  ^b32:
    i32 %454 = load i32* %0;
    i32* %455 = getelementptr &(i32* %buf)[i32 %454];
    i32 %456 = load i32* %455;
    i1 %457 = scmp eq i32 %456, i32 32;
    cbr i1 %457(prob = 0.5), ^if.then64, ^if.else58;
  ^if.else56:
    i32 %458 = load i32* %0;
    i32* %459 = getelementptr &(i32* %buf)[i32 %458];
    i32 %460 = load i32* %459;
    i1 %461 = scmp eq i32 %460, i32 10;
    cbr i1 %461(prob = 0.5), ^if.then65, ^if.else59;
  ^while.body18:
    i32 %462 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %463 = scmp eq i32 %462, i32 0;
    cbr i1 %463(prob = 0.5), ^b, ^entry4;
  ^if.then64:
    i32 %464 = add i32 %454, i32 1;
    store i32* %0 with i32 %464;
    ubr ^while.body16;
  ^if.then65:
    i32 %465 = add i32 %458, i32 1;
    store i32* %0 with i32 %465;
    ubr ^while.body14;
  ^b33:
    i32 %466 = load i32* %0;
    i32* %467 = getelementptr &(i32* %buf)[i32 %466];
    i32 %468 = load i32* %467;
    i1 %469 = scmp eq i32 %468, i32 32;
    cbr i1 %469(prob = 0.5), ^if.then66, ^if.else60;
  ^if.else57:
    i32* %470 = getelementptr &(i32* %buf)[i32 %452];
    i32 %471 = load i32* %470;
    i1 %472 = scmp neq i32 %471, i32 125;
    cbr i1 %472(prob = 0.5), ^b, ^b9;
  ^if.else58:
    i32 %473 = load i32* %455;
    i1 %474 = scmp eq i32 %473, i32 9;
    cbr i1 %474(prob = 0.5), ^if.then67, ^if.else61;
  ^if.else59:
    i32 %475 = load i32* %459;
    i1 %476 = scmp eq i32 %475, i32 13;
    cbr i1 %476(prob = 0.5), ^if.then68, ^b29;
  ^if.then66:
    i32 %477 = add i32 %466, i32 1;
    store i32* %0 with i32 %477;
    ubr ^while.body17;
  ^entry4:
    i32 %478 = load i32* %0;
    ubr ^while.body19;
  ^if.then67:
    i32 %479 = load i32* %0;
    i32 %480 = add i32 %479, i32 1;
    store i32* %0 with i32 %480;
    ubr ^while.body16;
  ^if.then68:
    i32 %481 = load i32* %0;
    i32 %482 = add i32 %481, i32 1;
    store i32* %0 with i32 %482;
    ubr ^while.body14;
  ^if.else60:
    i32 %483 = load i32* %467;
    i1 %484 = scmp eq i32 %483, i32 9;
    cbr i1 %484(prob = 0.5), ^if.then69, ^if.else62;
  ^if.else61:
    i32 %485 = load i32* %0;
    i32* %486 = getelementptr &(i32* %buf)[i32 %485];
    i32 %487 = load i32* %486;
    i1 %488 = scmp eq i32 %487, i32 10;
    cbr i1 %488(prob = 0.5), ^if.then70, ^if.else63;
  ^if.then69:
    i32 %489 = load i32* %0;
    i32 %490 = add i32 %489, i32 1;
    store i32* %0 with i32 %490;
    ubr ^while.body17;
  ^while.body19:
    i32 %491 = phi [^entry4, i32 %478] [^if.then73, i32 %511] [^if.then75, i32 %520] [^if.then76, i32 %527] [^if.then77, i32 %533];
    i1 %492 = scmp le i32 %len, i32 %491;
    cbr i1 %492(prob = 0.5), ^b34, ^b35;
  ^if.then70:
    i32 %493 = add i32 %485, i32 1;
    store i32* %0 with i32 %493;
    ubr ^while.body16;
  ^if.else62:
    i32 %494 = load i32* %0;
    i32* %495 = getelementptr &(i32* %buf)[i32 %494];
    i32 %496 = load i32* %495;
    i1 %497 = scmp eq i32 %496, i32 10;
    cbr i1 %497(prob = 0.5), ^if.then71, ^if.else64;
  ^if.else63:
    i32 %498 = load i32* %486;
    i1 %499 = scmp eq i32 %498, i32 13;
    cbr i1 %499(prob = 0.5), ^if.then72, ^b31;
  ^if.then71:
    i32 %500 = add i32 %494, i32 1;
    store i32* %0 with i32 %500;
    ubr ^while.body17;
  ^b34:
    i32 %501 = load i32* %0;
    i1 %502 = scmp le i32 %len, i32 %501;
    cbr i1 %502(prob = 0.5), ^b, ^b36;
  ^b35:
    i32 %503 = load i32* %0;
    i32* %504 = getelementptr &(i32* %buf)[i32 %503];
    i32 %505 = load i32* %504;
    i1 %506 = scmp eq i32 %505, i32 32;
    cbr i1 %506(prob = 0.5), ^if.then73, ^if.else65;
  ^if.then72:
    i32 %507 = load i32* %0;
    i32 %508 = add i32 %507, i32 1;
    store i32* %0 with i32 %508;
    ubr ^while.body16;
  ^if.else64:
    i32 %509 = load i32* %495;
    i1 %510 = scmp eq i32 %509, i32 13;
    cbr i1 %510(prob = 0.5), ^if.then74, ^while.body18;
  ^if.then73:
    i32 %511 = add i32 %503, i32 1;
    store i32* %0 with i32 %511;
    ubr ^while.body19;
  ^if.then74:
    i32 %512 = load i32* %0;
    i32 %513 = add i32 %512, i32 1;
    store i32* %0 with i32 %513;
    ubr ^while.body17;
  ^b36:
    i32* %514 = getelementptr &(i32* %buf)[i32 %501];
    i32 %515 = load i32* %514;
    i1 %516 = scmp neq i32 %515, i32 58;
    cbr i1 %516(prob = 0.5), ^b, ^b37;
  ^if.else65:
    i32 %517 = load i32* %504;
    i1 %518 = scmp eq i32 %517, i32 9;
    cbr i1 %518(prob = 0.5), ^if.then75, ^if.else66;
  ^if.then75:
    i32 %519 = load i32* %0;
    i32 %520 = add i32 %519, i32 1;
    store i32* %0 with i32 %520;
    ubr ^while.body19;
  ^b37:
    i32 %521 = load i32* %0;
    i32 %522 = add i32 %521, i32 1;
    store i32* %0 with i32 %522;
    ubr ^while.body20;
  ^if.else66:
    i32 %523 = load i32* %0;
    i32* %524 = getelementptr &(i32* %buf)[i32 %523];
    i32 %525 = load i32* %524;
    i1 %526 = scmp eq i32 %525, i32 10;
    cbr i1 %526(prob = 0.5), ^if.then76, ^if.else67;
  ^if.then76:
    i32 %527 = add i32 %523, i32 1;
    store i32* %0 with i32 %527;
    ubr ^while.body19;
  ^while.body20:
    i32 %528 = phi [^b37, i32 %522] [^if.then78, i32 %540] [^if.then79, i32 %544] [^if.then80, i32 %549] [^if.then81, i32 %553];
    i1 %529 = scmp le i32 %len, i32 %528;
    cbr i1 %529(prob = 0.5), ^b38, ^b39;
  ^if.else67:
    i32 %530 = load i32* %524;
    i1 %531 = scmp eq i32 %530, i32 13;
    cbr i1 %531(prob = 0.5), ^if.then77, ^b34;
  ^if.then77:
    i32 %532 = load i32* %0;
    i32 %533 = add i32 %532, i32 1;
    store i32* %0 with i32 %533;
    ubr ^while.body19;
  ^b38:
    i32 %534 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %535 = scmp eq i32 %534, i32 0;
    cbr i1 %535(prob = 0.5), ^b, ^entry3;
  ^b39:
    i32 %536 = load i32* %0;
    i32* %537 = getelementptr &(i32* %buf)[i32 %536];
    i32 %538 = load i32* %537;
    i1 %539 = scmp eq i32 %538, i32 32;
    cbr i1 %539(prob = 0.5), ^if.then78, ^if.else68;
  ^if.then78:
    i32 %540 = add i32 %536, i32 1;
    store i32* %0 with i32 %540;
    ubr ^while.body20;
  ^if.else68:
    i32 %541 = load i32* %537;
    i1 %542 = scmp eq i32 %541, i32 9;
    cbr i1 %542(prob = 0.5), ^if.then79, ^if.else69;
  ^if.then79:
    i32 %543 = load i32* %0;
    i32 %544 = add i32 %543, i32 1;
    store i32* %0 with i32 %544;
    ubr ^while.body20;
  ^if.else69:
    i32 %545 = load i32* %0;
    i32* %546 = getelementptr &(i32* %buf)[i32 %545];
    i32 %547 = load i32* %546;
    i1 %548 = scmp eq i32 %547, i32 10;
    cbr i1 %548(prob = 0.5), ^if.then80, ^if.else70;
  ^if.then80:
    i32 %549 = add i32 %545, i32 1;
    store i32* %0 with i32 %549;
    ubr ^while.body20;
  ^if.else70:
    i32 %550 = load i32* %546;
    i1 %551 = scmp eq i32 %550, i32 13;
    cbr i1 %551(prob = 0.5), ^if.then81, ^b38;
  ^if.then81:
    i32 %552 = load i32* %0;
    i32 %553 = add i32 %552, i32 1;
    store i32* %0 with i32 %553;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %6];
    store i32* %8 with i32 %7;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    i32 %11 = add i32 %6, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %21] [^if.then1, i32 %26] [^if.then4, i32 %37] [^if.then6, i32 %43];
    i1 %14 = scmp le i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 32;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %21 = add i32 %17, i32 1;
    store i32* %pos with i32 %21;
    ubr ^while.body1;
  ^while.body2:
    i32 %22 = phi [^b1, i32 %16] [^if.then3, i32 %36] [^if.then5, i32 %41] [^if.then7, i32 %49] [^if.then8, i32 %52];
    i1 %23 = scmp le i32 %4, i32 %22;
    cbr i1 %23(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i1 %24 = scmp eq i32 %19, i32 9;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %25 = load i32* %pos;
    i32 %26 = add i32 %25, i32 1;
    store i32* %pos with i32 %26;
    ubr ^while.body1;
  ^b3:
    i1 %27 = scmp neq i32 %15, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then2, ^if.else2;
  ^b4:
    i32 %28 = load i32* %pos;
    i32* %29 = getelementptr &(i32* %5)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 32;
    cbr i1 %31(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %32 = load i32* %pos;
    i32* %33 = getelementptr &(i32* %5)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %34, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then3:
    i32 %36 = add i32 %28, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then4:
    i32 %37 = add i32 %32, i32 1;
    store i32* %pos with i32 %37;
    ubr ^while.body1;
  ^if.else3:
    i1 %38 = scmp eq i32 %30, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then5, ^if.else5;
  ^if.else4:
    i1 %39 = scmp eq i32 %34, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then6, ^b1;
  ^if.then5:
    i32 %40 = load i32* %pos;
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.then6:
    i32 %42 = load i32* %pos;
    i32 %43 = add i32 %42, i32 1;
    store i32* %pos with i32 %43;
    ubr ^while.body1;
  ^if.else5:
    i32 %44 = load i32* %pos;
    i32* %45 = getelementptr &(i32* %5)[i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %46, i32 10;
    cbr i1 %47(prob = 0.5), ^if.then7, ^if.else6;
  ^b5:
    i32 %48 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %48;
  ^if.then7:
    i32 %49 = add i32 %44, i32 1;
    store i32* %pos with i32 %49;
    ubr ^while.body2;
  ^if.else6:
    i1 %50 = scmp eq i32 %46, i32 13;
    cbr i1 %50(prob = 0.5), ^if.then8, ^b3;
  ^if.then8:
    i32 %51 = load i32* %pos;
    i32 %52 = add i32 %51, i32 1;
    store i32* %pos with i32 %52;
    ubr ^while.body2;
}
