internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32* %len1 = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %len1 with i32 %len;
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^if.then7, i32 %35] [^if.then11, i32 %51] [^if.then3, i32 %20] [^if.then, i32 %11];
    i1 %4 = scmp ge i32 %3, i32 %len;
    cbr i1 %4(prob = 0.5), ^b1, ^b2;
^b:
    i32 %5 = phi [^if.else9, i32 0] [^b35, i32 1] [^b7, i32 0] [^b40, i32 0] [^b33, i32 0] [^b38, i32 1] [^if.else45, i32 0] [^if.else64, i32 0] [^if.else40, i32 0] [^b28, i32 0] [^if.else44, i32 0] [^b23, i32 1] [^if.else37, i32 0] [^if.else35, i32 0] [^if.else31, i32 0] [^if.else30, i32 0] [^b31, i32 1] [^if.else38, i32 0] [^if.else29, i32 0] [^if.else25, i32 0] [^while.body18, i32 0] [^b21, i32 0] [^b25, i32 0] [^while.body11, i32 0] [^b18, i32 1] [^if.else36, i32 0] [^if.else21, i32 0] [^if.else41, i32 0] [^if.then40, i32 1] [^b14, i32 0] [^if.else24, i32 0] [^while.guard1, i32 1] [^if.else11, i32 0] [^b10, i32 0] [^b4, i32 0] [^b3, i32 0] [^if.then19, i32 0] [^if.then42, i32 %291] [^if.then9, i32 %47] [^if.then17, i32 1] [^if.then22, i32 %115] [^b32, i32 0] [^if.then16, i32 %84] [^if.then6, i32 %34] [^if.then2, i32 %18] [^if.then29, i32 0] [^if.then28, i32 %156] [^if.else19, i32 0] [^if.then34, i32 %204] [^if.then24, i32 0] [^entry, i32 0] [^if.then38, i32 %245];
    ret i32 %5;
^b1:
    i1 %6 = scmp eq i32 %type, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %7 = load i32* %0;
    i32* %8 = getelementptr &(i32* %buf)[i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp eq i32 %9, i32 32;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %11 = add i32 %7, i32 1;
    store i32* %0 with i32 %11;
    ubr ^while.body;
^if.then1:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 123;
    cbr i1 %15(prob = 0.5), ^if.then2, ^if.else2;
^if.else:
    i1 %16 = scmp eq i32 %type, i32 1;
    cbr i1 %16(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i1 %17 = scmp eq i32 %9, i32 9;
    cbr i1 %17(prob = 0.5), ^if.then3, ^if.else4;
^if.then2:
    i32 %18 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then3:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.body;
^if.else2:
    i1 %21 = scmp eq i32 %14, i32 91;
    cbr i1 %21(prob = 0.5), ^if.then6, ^if.else5;
^if.then4:
    i32 %22 = load i32* %0;
    i32* %23 = getelementptr &(i32* %buf)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 43;
    i1 %26 = scmp eq i32 %24, i32 45;
    i1 %27 = or i1 %26, i1 %25;
    cbr i1 %27(prob = 0.75), ^if.then5, ^b3;
^if.else3:
    i1 %28 = scmp eq i32 %type, i32 2;
    cbr i1 %28(prob = 0.5), ^if.then8, ^if.else6;
^if.else4:
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %buf)[i32 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 10;
    cbr i1 %32(prob = 0.5), ^if.then7, ^if.else7;
^if.then5:
    i32 %33 = add i32 %22, i32 1;
    store i32* %0 with i32 %33;
    ubr ^b3;
^if.then6:
    i32 %34 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then7:
    i32 %35 = add i32 %29, i32 1;
    store i32* %0 with i32 %35;
    ubr ^while.body;
^if.then8:
    i32 %36 = load i32* %0;
    i32 %37 = add i32 %36, i32 1;
    store i32* %0 with i32 %37;
    i1 %38 = scmp lt i32 %37, i32 %len;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b4;
^if.else5:
    i32 %39 = load i32* %0;
    i32* %40 = getelementptr &(i32* %buf)[i32 %39];
    i32 %41 = load i32* %40;
    i1 %42 = scmp eq i32 %41, i32 34;
    cbr i1 %42(prob = 0.5), ^if.then9, ^if.else8;
^b3:
    i32 %43 = phi [^if.then4, i32 %22] [^if.then5, i32 %33];
    i1 %44 = scmp ge i32 %43, i32 %len;
    cbr i1 %44(prob = 0.5), ^b, ^if.else9;
^if.else6:
    i1 %45 = scmp eq i32 %type, i32 3;
    cbr i1 %45(prob = 0.5), ^if.then10, ^if.else10;
^if.else7:
    i1 %46 = scmp eq i32 %31, i32 13;
    cbr i1 %46(prob = 0.5), ^if.then11, ^b1;
^if.then9:
    i32 %47 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then10:
    i32 %48 = load i32* %0;
    i32 %49 = add i32 %48, i32 1;
    store i32* %0 with i32 %49;
    ubr ^while.body2;
^if.then11:
    i32 %50 = load i32* %0;
    i32 %51 = add i32 %50, i32 1;
    store i32* %0 with i32 %51;
    ubr ^while.body;
^while.body1:
    i32 %52 = phi [^b9, i32 %110] [^if.then8, i32 %37];
    i32* %53 = getelementptr &(i32* %buf)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 34;
    cbr i1 %55(prob = 0.5), ^indirect, ^b5;
^if.else8:
    i1 %56 = scmp gt i32 %41, i32 47;
    cbr i1 %56(prob = 0.5), ^if.then13, ^b6;
^b4:
    i32 %57 = phi [^indirect, i32 %64] [^b9, i32 %110] [^if.then8, i32 %37];
    i1 %58 = scmp ge i32 %57, i32 %len;
    cbr i1 %58(prob = 0.5), ^b, ^if.else11;
^if.else9:
    i32 %59 = load i32* %0;
    i32* %60 = getelementptr &(i32* %buf)[i32 %59];
    i32 %61 = load i32* %60;
    i1 %62 = scmp gt i32 %61, i32 47;
    cbr i1 %62(prob = 0.5), ^if.then14, ^b;
^if.else10:
    i1 %63 = scmp eq i32 %type, i32 4;
    cbr i1 %63(prob = 0.5), ^if.then12, ^if.else12;
^indirect:
    i32 %64 = load i32* %0;
    ubr ^b4;
^if.then12:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.body3;
^b5:
    i32 %67 = load i32* %0;
    i32* %68 = getelementptr &(i32* %buf)[i32 %67];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 92;
    cbr i1 %70(prob = 0.5), ^if.then15, ^if.else13;
^if.then13:
    i1 %71 = scmp lt i32 %41, i32 58;
    cbr i1 %71(prob = 0.5), ^b6, ^if.else14;
^while.body2:
    i32 %72 = phi [^if.then31, i32 %192] [^if.then36, i32 %231] [^if.then20, i32 %109] [^if.then25, i32 %144] [^if.then10, i32 %49];
    i1 %73 = scmp ge i32 %72, i32 %len;
    cbr i1 %73(prob = 0.5), ^if.then18, ^b8;
^if.then14:
    i1 %74 = scmp lt i32 %61, i32 58;
    cbr i1 %74(prob = 0.5), ^b7, ^if.else15;
^b6:
    i32 %75 = phi [^if.else8, i32 0] [^if.then13, i32 1] [^if.else14, i32 0];
    i1 %76 = scmp eq i32 %75, i32 1;
    cbr i1 %76(prob = 0.5), ^if.then16, ^if.else16;
^if.else11:
    i32 %77 = load i32* %0;
    i32* %78 = getelementptr &(i32* %buf)[i32 %77];
    i32 %79 = load i32* %78;
    i1 %80 = scmp neq i32 %79, i32 34;
    cbr i1 %80(prob = 0.5), ^b, ^if.then17;
^if.else12:
    i1 %81 = scmp eq i32 %type, i32 5;
    cbr i1 %81(prob = 0.5), ^if.then19, ^if.else17;
^if.then15:
    i32 %82 = add i32 %67, i32 2;
    store i32* %0 with i32 %82;
    ubr ^b9;
^if.else13:
    i32 %83 = add i32 %67, i32 1;
    store i32* %0 with i32 %83;
    ubr ^b9;
^if.else14:
    ubr ^b6;
^if.then16:
    i32 %84 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else15:
    ubr ^b7;
^b7:
    i32 %85 = phi [^if.then14, i32 1] [^if.else15, i32 0];
    i1 %86 = scmp eq i32 %85, i32 0;
    cbr i1 %86(prob = 0.5), ^b, ^while.guard;
^if.then17:
    i32 %87 = phi [^indirect11, i32 %502] [^indirect2, i32 %188] [^indirect1, i32 %142] [^indirect9, i32 %395] [^if.else11, i32 %77];
    i32 %88 = add i32 %87, i32 1;
    store i32* %0 with i32 %88;
    ubr ^b;
^if.then18:
    i32 %89 = load i32* %0;
    i1 %90 = scmp lt i32 %89, i32 %len;
    cbr i1 %90(prob = 0.5), ^if.then21, ^b10;
^b8:
    i32 %91 = load i32* %0;
    i32* %92 = getelementptr &(i32* %buf)[i32 %91];
    i32 %93 = load i32* %92;
    i1 %94 = scmp eq i32 %93, i32 32;
    cbr i1 %94(prob = 0.5), ^if.then20, ^if.else18;
^while.body3:
    i32 %95 = phi [^if.then12, i32 %66] [^if.then37, i32 %232] [^if.then26, i32 %145] [^if.then41, i32 %283] [^if.then32, i32 %194];
    i1 %96 = scmp ge i32 %95, i32 %len;
    cbr i1 %96(prob = 0.5), ^if.then23, ^b11;
^if.then19:
    i32* %97 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %97 with i32 116;
    i32* %98 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %98 with i32 114;
    i32* %99 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %99 with i32 117;
    i32* %100 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %100 with i32 101;
    i32 %101 = load i32* %0;
    i32 %102 = add i32 %101, i32 3;
    i1 %103 = scmp ge i32 %102, i32 %len;
    cbr i1 %103(prob = 0.5), ^b, ^if.else19;
^if.else16:
    i32 %104 = load i32* %0;
    i32* %105 = getelementptr &(i32* %buf)[i32 %104];
    i32 %106 = load i32* %105;
    i1 %107 = scmp eq i32 %106, i32 43;
    cbr i1 %107(prob = 0.5), ^if.then22, ^if.else20;
^if.else17:
    i1 %108 = scmp eq i32 %type, i32 6;
    cbr i1 %108(prob = 0.5), ^if.then24, ^if.else21;
^if.then20:
    i32 %109 = add i32 %91, i32 1;
    store i32* %0 with i32 %109;
    ubr ^while.body2;
^b9:
    i32 %110 = phi [^if.else13, i32 %83] [^if.then15, i32 %82];
    i1 %111 = scmp lt i32 %110, i32 %len;
    cbr i1 %111(prob = 0.97), ^while.body1, ^b4;
^if.then21:
    i32* %112 = getelementptr &(i32* %buf)[i32 %89];
    i32 %113 = load i32* %112;
    i1 %114 = scmp eq i32 %113, i32 93;
    cbr i1 %114(prob = 0.5), ^indirect1, ^b10;
^if.then22:
    i32 %115 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.guard:
    i32 %116 = load i32* %0;
    i1 %117 = scmp lt i32 %116, i32 %len;
    cbr i1 %117(prob = 0.97), ^while.body4, ^b13;
^if.then23:
    i32 %118 = load i32* %0;
    i1 %119 = scmp lt i32 %118, i32 %len;
    cbr i1 %119(prob = 0.5), ^if.then27, ^b14;
^b10:
    i32 %120 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i32* %121 = load i32** %buf1;
    i32 %122 = load i32* %len1;
    i1 %123 = scmp eq i32 %120, i32 0;
    cbr i1 %123(prob = 0.5), ^b, ^b12;
^if.else18:
    i1 %124 = scmp eq i32 %93, i32 9;
    cbr i1 %124(prob = 0.5), ^if.then25, ^if.else22;
^b11:
    i32 %125 = load i32* %0;
    i32* %126 = getelementptr &(i32* %buf)[i32 %125];
    i32 %127 = load i32* %126;
    i1 %128 = scmp eq i32 %127, i32 32;
    cbr i1 %128(prob = 0.5), ^if.then26, ^if.else23;
^if.else19:
    i32* %129 = getelementptr &(i32* %buf)[i32 %101];
    i32 %130 = load i32* %129;
    i1 %131 = scmp neq i32 %130, i32 116;
    cbr i1 %131(prob = 0.5), ^b, ^if.else24;
^if.then24:
    i32* %132 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %132 with i32 102;
    i32* %133 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %133 with i32 97;
    i32* %134 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %134 with i32 108;
    i32* %135 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %135 with i32 115;
    i32* %136 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %136 with i32 101;
    i32 %137 = load i32* %0;
    i32 %138 = add i32 %137, i32 4;
    i1 %139 = scmp ge i32 %138, i32 %len;
    cbr i1 %139(prob = 0.5), ^b, ^if.else25;
^if.else20:
    i1 %140 = scmp eq i32 %106, i32 45;
    cbr i1 %140(prob = 0.5), ^if.then28, ^if.else26;
^if.else21:
    i1 %141 = scmp eq i32 %type, i32 7;
    cbr i1 %141(prob = 0.5), ^if.then29, ^b;
^indirect1:
    i32 %142 = load i32* %0;
    ubr ^if.then17;
^if.then25:
    i32 %143 = load i32* %0;
    i32 %144 = add i32 %143, i32 1;
    store i32* %0 with i32 %144;
    ubr ^while.body2;
^if.then26:
    i32 %145 = add i32 %125, i32 1;
    store i32* %0 with i32 %145;
    ubr ^while.body3;
^b12:
    i32* %146 = phi [^while.body11, i32* %339] [^b10, i32* %121];
    i32 %147 = phi [^while.body11, i32 %340] [^b10, i32 %122];
    i32 %148 = load i32* %0;
    ubr ^while.body5;
^while.body4:
    i32 %149 = phi [^b20, i32 %273] [^while.guard, i32 %116];
    i32* %150 = getelementptr &(i32* %buf)[i32 %149];
    i32 %151 = load i32* %150;
    i1 %152 = scmp gt i32 %151, i32 47;
    cbr i1 %152(prob = 0.5), ^if.then30, ^indirect3;
^if.then27:
    i32* %153 = getelementptr &(i32* %buf)[i32 %118];
    i32 %154 = load i32* %153;
    i1 %155 = scmp eq i32 %154, i32 125;
    cbr i1 %155(prob = 0.5), ^indirect2, ^b14;
^if.then28:
    i32 %156 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b13:
    i32 %157 = phi [^indirect3, i32 %189] [^b20, i32 %273] [^while.guard, i32 %116];
    i1 %158 = scmp lt i32 %157, i32 %len;
    cbr i1 %158(prob = 0.5), ^if.then33, ^indirect4;
^b14:
    i32 %159 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i32* %160 = load i32** %buf1;
    i32 %161 = load i32* %len1;
    i1 %162 = scmp eq i32 %159, i32 0;
    cbr i1 %162(prob = 0.5), ^b, ^b15;
^if.else22:
    i32 %163 = load i32* %0;
    i32* %164 = getelementptr &(i32* %buf)[i32 %163];
    i32 %165 = load i32* %164;
    i1 %166 = scmp eq i32 %165, i32 10;
    cbr i1 %166(prob = 0.5), ^if.then31, ^if.else27;
^if.else23:
    i1 %167 = scmp eq i32 %127, i32 9;
    cbr i1 %167(prob = 0.5), ^if.then32, ^if.else28;
^if.else24:
    i32 %168 = load i32* %0;
    i32 %169 = add i32 %168, i32 1;
    i32* %170 = getelementptr &(i32* %buf)[i32 %169];
    i32 %171 = load i32* %170;
    i32 %172 = load i32* %98;
    i1 %173 = scmp neq i32 %171, i32 %172;
    cbr i1 %173(prob = 0.5), ^b, ^if.else29;
^if.else25:
    i32* %174 = getelementptr &(i32* %buf)[i32 %137];
    i32 %175 = load i32* %174;
    i1 %176 = scmp neq i32 %175, i32 102;
    cbr i1 %176(prob = 0.5), ^b, ^if.else30;
^if.then29:
    i32* %177 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %177 with i32 110;
    i32* %178 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %178 with i32 117;
    i32* %179 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %179 with i32 108;
    i32* %180 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %180 with i32 108;
    i32 %181 = load i32* %0;
    i32 %182 = add i32 %181, i32 3;
    i1 %183 = scmp ge i32 %182, i32 %len;
    cbr i1 %183(prob = 0.5), ^b, ^if.else31;
^if.else26:
    i32 %184 = load i32* %0;
    i32* %185 = getelementptr &(i32* %buf)[i32 %184];
    i32 %186 = load i32* %185;
    i1 %187 = scmp eq i32 %186, i32 116;
    cbr i1 %187(prob = 0.5), ^if.then34, ^if.else32;
^indirect2:
    i32 %188 = load i32* %0;
    ubr ^if.then17;
^indirect3:
    i32 %189 = load i32* %0;
    ubr ^b13;
^indirect4:
    i32 %190 = load i32* %0;
    ubr ^b18;
^if.then30:
    i1 %191 = scmp lt i32 %151, i32 58;
    cbr i1 %191(prob = 0.5), ^b16, ^if.else33;
^if.then31:
    i32 %192 = add i32 %163, i32 1;
    store i32* %0 with i32 %192;
    ubr ^while.body2;
^if.then32:
    i32 %193 = load i32* %0;
    i32 %194 = add i32 %193, i32 1;
    store i32* %0 with i32 %194;
    ubr ^while.body3;
^b15:
    i32* %195 = phi [^while.body18, i32* %474] [^b14, i32* %160];
    i32 %196 = phi [^while.body18, i32 %475] [^b14, i32 %161];
    i32 %197 = load i32* %0;
    ubr ^while.body6;
^if.then33:
    i32 %198 = load i32* %0;
    i32* %199 = getelementptr &(i32* %buf)[i32 %198];
    i32 %200 = load i32* %199;
    i1 %201 = scmp eq i32 %200, i32 46;
    cbr i1 %201(prob = 0.5), ^if.then35, ^b18;
^while.body5:
    i32 %202 = phi [^b12, i32 %148] [^if.then48, i32 %345] [^if.then54, i32 %380] [^if.then44, i32 %307] [^if.then39, i32 %270];
    i1 %203 = scmp ge i32 %202, i32 %147;
    cbr i1 %203(prob = 0.5), ^b17, ^b19;
^if.then34:
    i32 %204 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else27:
    i1 %205 = scmp eq i32 %165, i32 13;
    cbr i1 %205(prob = 0.5), ^if.then36, ^if.then18;
^if.else28:
    i32 %206 = load i32* %0;
    i32* %207 = getelementptr &(i32* %buf)[i32 %206];
    i32 %208 = load i32* %207;
    i1 %209 = scmp eq i32 %208, i32 10;
    cbr i1 %209(prob = 0.5), ^if.then37, ^if.else34;
^if.else29:
    i32 %210 = add i32 %168, i32 2;
    i32* %211 = getelementptr &(i32* %buf)[i32 %210];
    i32 %212 = load i32* %211;
    i32 %213 = load i32* %99;
    i1 %214 = scmp neq i32 %212, i32 %213;
    cbr i1 %214(prob = 0.5), ^b, ^if.else35;
^if.else30:
    i32 %215 = load i32* %0;
    i32 %216 = add i32 %215, i32 1;
    i32* %217 = getelementptr &(i32* %buf)[i32 %216];
    i32 %218 = load i32* %217;
    i32 %219 = load i32* %133;
    i1 %220 = scmp neq i32 %218, i32 %219;
    cbr i1 %220(prob = 0.5), ^b, ^if.else36;
^if.else31:
    i32* %221 = getelementptr &(i32* %buf)[i32 %181];
    i32 %222 = load i32* %221;
    i1 %223 = scmp neq i32 %222, i32 110;
    cbr i1 %223(prob = 0.5), ^b, ^if.else37;
^if.else32:
    i1 %224 = scmp eq i32 %186, i32 102;
    cbr i1 %224(prob = 0.5), ^if.then38, ^if.else38;
^if.else33:
    ubr ^b16;
^b16:
    i32 %225 = phi [^if.then30, i32 1] [^if.else33, i32 0];
    i1 %226 = scmp neq i32 %225, i32 1;
    cbr i1 %226(prob = 0.5), ^indirect3, ^b20;
^if.then35:
    i32 %227 = phi [^indirect6, i32 %337] [^if.then33, i32 %198];
    i32 %228 = add i32 %227, i32 1;
    store i32* %0 with i32 %228;
    i1 %229 = scmp lt i32 %228, i32 %len;
    cbr i1 %229(prob = 0.97), ^while.body8, ^b18;
^if.then36:
    i32 %230 = load i32* %0;
    i32 %231 = add i32 %230, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.body2;
^if.then37:
    i32 %232 = add i32 %206, i32 1;
    store i32* %0 with i32 %232;
    ubr ^while.body3;
^b17:
    i32 %233 = load i32* %0;
    i32* %234 = getelementptr &(i32* %146)[i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = scmp eq i32 %235, i32 44;
    cbr i1 %236(prob = 0.97), ^while.body7, ^entry1;
^b18:
    i32 %237 = phi [^if.then33, i32 %198] [^indirect5, i32 %336] [^if.then35, i32 %228] [^indirect4, i32 %190];
    i1 %238 = scmp lt i32 %237, i32 %len;
    cbr i1 %238(prob = 0.5), ^if.then40, ^b;
^b19:
    i32 %239 = load i32* %0;
    i32* %240 = getelementptr &(i32* %146)[i32 %239];
    i32 %241 = load i32* %240;
    i1 %242 = scmp eq i32 %241, i32 32;
    cbr i1 %242(prob = 0.5), ^if.then39, ^if.else39;
^while.body6:
    i32 %243 = phi [^if.then59, i32 %399] [^if.then45, i32 %308] [^if.then49, i32 %347] [^b15, i32 %197] [^if.then55, i32 %381];
    i1 %244 = scmp ge i32 %243, i32 %196;
    cbr i1 %244(prob = 0.5), ^b21, ^b22;
^if.then38:
    i32 %245 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else34:
    i1 %246 = scmp eq i32 %208, i32 13;
    cbr i1 %246(prob = 0.5), ^if.then41, ^if.then23;
^if.else35:
    i32 %247 = load i32* %0;
    i32 %248 = add i32 %247, i32 3;
    i32* %249 = getelementptr &(i32* %buf)[i32 %248];
    i32 %250 = load i32* %249;
    i32 %251 = load i32* %100;
    i1 %252 = scmp neq i32 %250, i32 %251;
    cbr i1 %252(prob = 0.5), ^b, ^b23;
^if.else36:
    i32 %253 = add i32 %215, i32 2;
    i32* %254 = getelementptr &(i32* %buf)[i32 %253];
    i32 %255 = load i32* %254;
    i32 %256 = load i32* %134;
    i1 %257 = scmp neq i32 %255, i32 %256;
    cbr i1 %257(prob = 0.5), ^b, ^if.else40;
^if.else37:
    i32 %258 = load i32* %0;
    i32 %259 = add i32 %258, i32 1;
    i32* %260 = getelementptr &(i32* %buf)[i32 %259];
    i32 %261 = load i32* %260;
    i32 %262 = load i32* %178;
    i1 %263 = scmp neq i32 %261, i32 %262;
    cbr i1 %263(prob = 0.5), ^b, ^if.else41;
^if.else38:
    i32 %264 = load i32* %0;
    i32* %265 = getelementptr &(i32* %buf)[i32 %264];
    i32 %266 = load i32* %265;
    i1 %267 = scmp eq i32 %266, i32 110;
    cbr i1 %267(prob = 0.5), ^if.then42, ^b;
^while.body7:
    i32 %268 = load i32* %0;
    i32 %269 = add i32 %268, i32 1;
    store i32* %0 with i32 %269;
    ubr ^while.body9;
^if.then39:
    i32 %270 = add i32 %239, i32 1;
    store i32* %0 with i32 %270;
    ubr ^while.body5;
^entry1:
    i32 %271 = load i32* %0;
    ubr ^while.body10;
^b20:
    i32 %272 = load i32* %0;
    i32 %273 = add i32 %272, i32 1;
    store i32* %0 with i32 %273;
    i1 %274 = scmp lt i32 %273, i32 %len;
    cbr i1 %274(prob = 0.97), ^while.body4, ^b13;
^while.body8:
    i32* %275 = getelementptr &(i32* %buf)[i32 %228];
    i32 %276 = load i32* %275;
    i1 %277 = scmp gt i32 %276, i32 47;
    cbr i1 %277(prob = 0.5), ^if.then43, ^b24;
^if.then40:
    i32 %278 = load i32* %0;
    i32* %279 = getelementptr &(i32* %buf)[i32 %278];
    i32 %280 = load i32* %279;
    i1 %281 = scmp eq i32 %280, i32 101;
    cbr i1 %281(prob = 0.5), ^if.then46, ^b;
^if.then41:
    i32 %282 = load i32* %0;
    i32 %283 = add i32 %282, i32 1;
    store i32* %0 with i32 %283;
    ubr ^while.body3;
^b21:
    i32 %284 = load i32* %0;
    i1 %285 = scmp ge i32 %284, i32 %196;
    cbr i1 %285(prob = 0.5), ^b, ^b25;
^if.else39:
    i1 %286 = scmp eq i32 %241, i32 9;
    cbr i1 %286(prob = 0.5), ^if.then44, ^if.else42;
^b22:
    i32 %287 = load i32* %0;
    i32* %288 = getelementptr &(i32* %195)[i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = scmp eq i32 %289, i32 32;
    cbr i1 %290(prob = 0.5), ^if.then45, ^if.else43;
^if.then42:
    i32 %291 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b23:
    i32 %292 = phi [^if.else45, i32 %330] [^if.else35, i32 %247];
    i32 %293 = add i32 %292, i32 4;
    store i32* %0 with i32 %293;
    ubr ^b;
^if.else40:
    i32 %294 = load i32* %0;
    i32 %295 = add i32 %294, i32 3;
    i32* %296 = getelementptr &(i32* %buf)[i32 %295];
    i32 %297 = load i32* %296;
    i32 %298 = load i32* %135;
    i1 %299 = scmp neq i32 %297, i32 %298;
    cbr i1 %299(prob = 0.5), ^b, ^if.else44;
^if.else41:
    i32 %300 = add i32 %258, i32 2;
    i32* %301 = getelementptr &(i32* %buf)[i32 %300];
    i32 %302 = load i32* %301;
    i32 %303 = load i32* %179;
    i1 %304 = scmp neq i32 %302, i32 %303;
    cbr i1 %304(prob = 0.5), ^b, ^if.else45;
^if.then43:
    i1 %305 = scmp lt i32 %276, i32 58;
    cbr i1 %305(prob = 0.5), ^b24, ^if.else46;
^if.then44:
    i32 %306 = load i32* %0;
    i32 %307 = add i32 %306, i32 1;
    store i32* %0 with i32 %307;
    ubr ^while.body5;
^if.then45:
    i32 %308 = add i32 %287, i32 1;
    store i32* %0 with i32 %308;
    ubr ^while.body6;
^while.body9:
    i32 %309 = phi [^if.then60, i32 %417] [^while.body7, i32 %269] [^if.then63, i32 %425] [^if.then57, i32 %392] [^if.then51, i32 %371];
    i1 %310 = scmp ge i32 %309, i32 %147;
    cbr i1 %310(prob = 0.5), ^while.body11, ^b27;
^b24:
    i32 %311 = phi [^if.then43, i32 1] [^while.body8, i32 0] [^if.else46, i32 0];
    i1 %312 = scmp neq i32 %311, i32 1;
    cbr i1 %312(prob = 0.5), ^indirect5, ^indirect6;
^if.then46:
    i32 %313 = add i32 %278, i32 1;
    store i32* %0 with i32 %313;
    i1 %314 = scmp lt i32 %313, i32 %len;
    cbr i1 %314(prob = 0.5), ^if.then47, ^b29;
^while.body10:
    i32 %315 = phi [^entry1, i32 %271] [^if.then61, i32 %418] [^if.then64, i32 %431] [^if.then52, i32 %373] [^if.then58, i32 %394];
    i1 %316 = scmp ge i32 %315, i32 %147;
    cbr i1 %316(prob = 0.5), ^b28, ^b30;
^b25:
    i32* %317 = getelementptr &(i32* %195)[i32 %284];
    i32 %318 = load i32* %317;
    i1 %319 = scmp neq i32 %318, i32 58;
    cbr i1 %319(prob = 0.5), ^b, ^b26;
^if.else42:
    i32 %320 = load i32* %0;
    i32* %321 = getelementptr &(i32* %146)[i32 %320];
    i32 %322 = load i32* %321;
    i1 %323 = scmp eq i32 %322, i32 10;
    cbr i1 %323(prob = 0.5), ^if.then48, ^if.else47;
^if.else43:
    i1 %324 = scmp eq i32 %289, i32 9;
    cbr i1 %324(prob = 0.5), ^if.then49, ^if.else48;
^if.else44:
    i32 %325 = add i32 %294, i32 4;
    i32* %326 = getelementptr &(i32* %buf)[i32 %325];
    i32 %327 = load i32* %326;
    i32 %328 = load i32* %136;
    i1 %329 = scmp neq i32 %327, i32 %328;
    cbr i1 %329(prob = 0.5), ^b, ^b31;
^if.else45:
    i32 %330 = load i32* %0;
    i32 %331 = add i32 %330, i32 3;
    i32* %332 = getelementptr &(i32* %buf)[i32 %331];
    i32 %333 = load i32* %332;
    i32 %334 = load i32* %180;
    i1 %335 = scmp neq i32 %333, i32 %334;
    cbr i1 %335(prob = 0.5), ^b, ^b23;
^if.else46:
    ubr ^b24;
^indirect5:
    i32 %336 = load i32* %0;
    ubr ^b18;
^indirect6:
    i32 %337 = load i32* %0;
    ubr ^if.then35;
^while.body11:
    i32 %338 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %146, i32 %147, i32* %0);
    i32* %339 = load i32** %buf1;
    i32 %340 = load i32* %len1;
    i1 %341 = scmp eq i32 %338, i32 0;
    cbr i1 %341(prob = 0.5), ^b, ^b12;
^if.then47:
    i32* %342 = getelementptr &(i32* %buf)[i32 %313];
    i32 %343 = load i32* %342;
    i1 %344 = scmp eq i32 %343, i32 43;
    cbr i1 %344(prob = 0.5), ^if.then50, ^indirect7;
^if.then48:
    i32 %345 = add i32 %320, i32 1;
    store i32* %0 with i32 %345;
    ubr ^while.body5;
^if.then49:
    i32 %346 = load i32* %0;
    i32 %347 = add i32 %346, i32 1;
    store i32* %0 with i32 %347;
    ubr ^while.body6;
^b26:
    i32 %348 = load i32* %0;
    i32 %349 = add i32 %348, i32 1;
    store i32* %0 with i32 %349;
    ubr ^while.body12;
^b27:
    i32 %350 = load i32* %0;
    i32* %351 = getelementptr &(i32* %146)[i32 %350];
    i32 %352 = load i32* %351;
    i1 %353 = scmp eq i32 %352, i32 32;
    cbr i1 %353(prob = 0.5), ^if.then51, ^if.else49;
^b28:
    i32 %354 = load i32* %0;
    i1 %355 = scmp ge i32 %354, i32 %147;
    cbr i1 %355(prob = 0.5), ^b, ^b32;
^b29:
    i32 %356 = phi [^if.then50, i32 %370] [^indirect7, i32 %372] [^if.then46, i32 %313];
    i1 %357 = scmp lt i32 %356, i32 %len;
    cbr i1 %357(prob = 0.5), ^if.then53, ^indirect8;
^b30:
    i32 %358 = load i32* %0;
    i32* %359 = getelementptr &(i32* %146)[i32 %358];
    i32 %360 = load i32* %359;
    i1 %361 = scmp eq i32 %360, i32 32;
    cbr i1 %361(prob = 0.5), ^if.then52, ^if.else50;
^if.else47:
    i1 %362 = scmp eq i32 %322, i32 13;
    cbr i1 %362(prob = 0.5), ^if.then54, ^b17;
^if.else48:
    i32 %363 = load i32* %0;
    i32* %364 = getelementptr &(i32* %195)[i32 %363];
    i32 %365 = load i32* %364;
    i1 %366 = scmp eq i32 %365, i32 10;
    cbr i1 %366(prob = 0.5), ^if.then55, ^if.else51;
^b31:
    i32 %367 = load i32* %0;
    i32 %368 = add i32 %367, i32 5;
    store i32* %0 with i32 %368;
    ubr ^b;
^if.then50:
    i32 %369 = load i32* %0;
    i32 %370 = add i32 %369, i32 1;
    store i32* %0 with i32 %370;
    ubr ^b29;
^if.then51:
    i32 %371 = add i32 %350, i32 1;
    store i32* %0 with i32 %371;
    ubr ^while.body9;
^indirect7:
    i32 %372 = load i32* %0;
    ubr ^b29;
^if.then52:
    i32 %373 = add i32 %358, i32 1;
    store i32* %0 with i32 %373;
    ubr ^while.body10;
^indirect8:
    i32 %374 = load i32* %0;
    ubr ^while.guard1;
^if.then53:
    i32 %375 = load i32* %0;
    i32* %376 = getelementptr &(i32* %buf)[i32 %375];
    i32 %377 = load i32* %376;
    i1 %378 = scmp eq i32 %377, i32 45;
    cbr i1 %378(prob = 0.5), ^if.then56, ^while.guard1;
^if.then54:
    i32 %379 = load i32* %0;
    i32 %380 = add i32 %379, i32 1;
    store i32* %0 with i32 %380;
    ubr ^while.body5;
^if.then55:
    i32 %381 = add i32 %363, i32 1;
    store i32* %0 with i32 %381;
    ubr ^while.body6;
^if.else49:
    i1 %382 = scmp eq i32 %352, i32 9;
    cbr i1 %382(prob = 0.5), ^if.then57, ^if.else52;
^b32:
    i32* %383 = getelementptr &(i32* %146)[i32 %354];
    i32 %384 = load i32* %383;
    i1 %385 = scmp neq i32 %384, i32 93;
    cbr i1 %385(prob = 0.5), ^b, ^indirect9;
^if.else50:
    i1 %386 = scmp eq i32 %360, i32 9;
    cbr i1 %386(prob = 0.5), ^if.then58, ^if.else53;
^while.body12:
    i32 %387 = phi [^b26, i32 %349] [^if.then67, i32 %443] [^if.then69, i32 %461] [^if.then62, i32 %419] [^if.then65, i32 %433];
    i1 %388 = scmp ge i32 %387, i32 %196;
    cbr i1 %388(prob = 0.5), ^b33, ^b34;
^if.else51:
    i1 %389 = scmp eq i32 %365, i32 13;
    cbr i1 %389(prob = 0.5), ^if.then59, ^b21;
^if.then56:
    i32 %390 = add i32 %375, i32 1;
    store i32* %0 with i32 %390;
    ubr ^while.guard1;
^if.then57:
    i32 %391 = load i32* %0;
    i32 %392 = add i32 %391, i32 1;
    store i32* %0 with i32 %392;
    ubr ^while.body9;
^if.then58:
    i32 %393 = load i32* %0;
    i32 %394 = add i32 %393, i32 1;
    store i32* %0 with i32 %394;
    ubr ^while.body10;
^indirect9:
    i32 %395 = load i32* %0;
    ubr ^if.then17;
^while.guard1:
    i32 %396 = phi [^if.then56, i32 %390] [^if.then53, i32 %375] [^indirect8, i32 %374];
    i1 %397 = scmp lt i32 %396, i32 %len;
    cbr i1 %397(prob = 0.97), ^indirect10, ^b;
^if.then59:
    i32 %398 = load i32* %0;
    i32 %399 = add i32 %398, i32 1;
    store i32* %0 with i32 %399;
    ubr ^while.body6;
^if.else52:
    i32 %400 = load i32* %0;
    i32* %401 = getelementptr &(i32* %146)[i32 %400];
    i32 %402 = load i32* %401;
    i1 %403 = scmp eq i32 %402, i32 10;
    cbr i1 %403(prob = 0.5), ^if.then60, ^if.else54;
^b33:
    i32 %404 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %195, i32 %196, i32* %0);
    i32* %405 = load i32** %buf1;
    i32 %406 = load i32* %len1;
    i1 %407 = scmp eq i32 %404, i32 0;
    cbr i1 %407(prob = 0.5), ^b, ^entry2;
^if.else53:
    i32 %408 = load i32* %0;
    i32* %409 = getelementptr &(i32* %146)[i32 %408];
    i32 %410 = load i32* %409;
    i1 %411 = scmp eq i32 %410, i32 10;
    cbr i1 %411(prob = 0.5), ^if.then61, ^if.else55;
^b34:
    i32 %412 = load i32* %0;
    i32* %413 = getelementptr &(i32* %195)[i32 %412];
    i32 %414 = load i32* %413;
    i1 %415 = scmp eq i32 %414, i32 32;
    cbr i1 %415(prob = 0.5), ^if.then62, ^if.else56;
^indirect10:
    i32 %416 = load i32* %0;
    ubr ^while.body13;
^if.then60:
    i32 %417 = add i32 %400, i32 1;
    store i32* %0 with i32 %417;
    ubr ^while.body9;
^if.then61:
    i32 %418 = add i32 %408, i32 1;
    store i32* %0 with i32 %418;
    ubr ^while.body10;
^if.then62:
    i32 %419 = add i32 %412, i32 1;
    store i32* %0 with i32 %419;
    ubr ^while.body12;
^entry2:
    i32 %420 = load i32* %0;
    ubr ^while.body14;
^if.else54:
    i1 %421 = scmp eq i32 %402, i32 13;
    cbr i1 %421(prob = 0.5), ^if.then63, ^while.body11;
^if.else55:
    i1 %422 = scmp eq i32 %410, i32 13;
    cbr i1 %422(prob = 0.5), ^if.then64, ^b28;
^if.else56:
    i1 %423 = scmp eq i32 %414, i32 9;
    cbr i1 %423(prob = 0.5), ^if.then65, ^if.else57;
^if.then63:
    i32 %424 = load i32* %0;
    i32 %425 = add i32 %424, i32 1;
    store i32* %0 with i32 %425;
    ubr ^while.body9;
^while.body13:
    i32 %426 = phi [^b38, i32 %458] [^indirect10, i32 %416];
    i32* %427 = getelementptr &(i32* %buf)[i32 %426];
    i32 %428 = load i32* %427;
    i1 %429 = scmp gt i32 %428, i32 47;
    cbr i1 %429(prob = 0.5), ^if.then66, ^b35;
^if.then64:
    i32 %430 = load i32* %0;
    i32 %431 = add i32 %430, i32 1;
    store i32* %0 with i32 %431;
    ubr ^while.body10;
^if.then65:
    i32 %432 = load i32* %0;
    i32 %433 = add i32 %432, i32 1;
    store i32* %0 with i32 %433;
    ubr ^while.body12;
^while.body14:
    i32 %434 = phi [^entry2, i32 %420] [^if.then71, i32 %477] [^if.then74, i32 %492] [^if.then68, i32 %455] [^if.then70, i32 %464];
    i1 %435 = scmp ge i32 %434, i32 %406;
    cbr i1 %435(prob = 0.5), ^b36, ^b37;
^if.else57:
    i32 %436 = load i32* %0;
    i32* %437 = getelementptr &(i32* %195)[i32 %436];
    i32 %438 = load i32* %437;
    i1 %439 = scmp eq i32 %438, i32 10;
    cbr i1 %439(prob = 0.5), ^if.then67, ^if.else58;
^if.then66:
    i1 %440 = scmp lt i32 %428, i32 58;
    cbr i1 %440(prob = 0.5), ^b35, ^if.else59;
^b35:
    i32 %441 = phi [^while.body13, i32 0] [^if.else59, i32 0] [^if.then66, i32 1];
    i1 %442 = scmp neq i32 %441, i32 1;
    cbr i1 %442(prob = 0.5), ^b, ^b38;
^if.then67:
    i32 %443 = add i32 %436, i32 1;
    store i32* %0 with i32 %443;
    ubr ^while.body12;
^b36:
    i32 %444 = load i32* %0;
    i32* %445 = getelementptr &(i32* %405)[i32 %444];
    i32 %446 = load i32* %445;
    i1 %447 = scmp eq i32 %446, i32 44;
    cbr i1 %447(prob = 0.97), ^while.body15, ^entry3;
^b37:
    i32 %448 = load i32* %0;
    i32* %449 = getelementptr &(i32* %405)[i32 %448];
    i32 %450 = load i32* %449;
    i1 %451 = scmp eq i32 %450, i32 32;
    cbr i1 %451(prob = 0.5), ^if.then68, ^if.else60;
^if.else58:
    i1 %452 = scmp eq i32 %438, i32 13;
    cbr i1 %452(prob = 0.5), ^if.then69, ^b33;
^if.else59:
    ubr ^b35;
^while.body15:
    i32 %453 = load i32* %0;
    i32 %454 = add i32 %453, i32 1;
    store i32* %0 with i32 %454;
    ubr ^while.body16;
^if.then68:
    i32 %455 = add i32 %448, i32 1;
    store i32* %0 with i32 %455;
    ubr ^while.body14;
^entry3:
    i32 %456 = load i32* %0;
    ubr ^while.body17;
^b38:
    i32 %457 = load i32* %0;
    i32 %458 = add i32 %457, i32 1;
    store i32* %0 with i32 %458;
    i1 %459 = scmp lt i32 %458, i32 %len;
    cbr i1 %459(prob = 0.97), ^while.body13, ^b;
^if.then69:
    i32 %460 = load i32* %0;
    i32 %461 = add i32 %460, i32 1;
    store i32* %0 with i32 %461;
    ubr ^while.body12;
^if.else60:
    i1 %462 = scmp eq i32 %450, i32 9;
    cbr i1 %462(prob = 0.5), ^if.then70, ^if.else61;
^if.then70:
    i32 %463 = load i32* %0;
    i32 %464 = add i32 %463, i32 1;
    store i32* %0 with i32 %464;
    ubr ^while.body14;
^while.body16:
    i32 %465 = phi [^while.body15, i32 %454] [^if.then77, i32 %511] [^if.then79, i32 %516] [^if.then72, i32 %489] [^if.then75, i32 %499];
    i1 %466 = scmp ge i32 %465, i32 %406;
    cbr i1 %466(prob = 0.5), ^while.body18, ^b39;
^while.body17:
    i32 %467 = phi [^entry3, i32 %456] [^if.then78, i32 %512] [^if.then80, i32 %518] [^if.then73, i32 %490] [^if.then76, i32 %501];
    i1 %468 = scmp ge i32 %467, i32 %406;
    cbr i1 %468(prob = 0.5), ^b40, ^b41;
^if.else61:
    i32 %469 = load i32* %0;
    i32* %470 = getelementptr &(i32* %405)[i32 %469];
    i32 %471 = load i32* %470;
    i1 %472 = scmp eq i32 %471, i32 10;
    cbr i1 %472(prob = 0.5), ^if.then71, ^if.else62;
^while.body18:
    i32 %473 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %405, i32 %406, i32* %0);
    i32* %474 = load i32** %buf1;
    i32 %475 = load i32* %len1;
    i1 %476 = scmp eq i32 %473, i32 0;
    cbr i1 %476(prob = 0.5), ^b, ^b15;
^if.then71:
    i32 %477 = add i32 %469, i32 1;
    store i32* %0 with i32 %477;
    ubr ^while.body14;
^b39:
    i32 %478 = load i32* %0;
    i32* %479 = getelementptr &(i32* %405)[i32 %478];
    i32 %480 = load i32* %479;
    i1 %481 = scmp eq i32 %480, i32 32;
    cbr i1 %481(prob = 0.5), ^if.then72, ^if.else63;
^b40:
    i32 %482 = load i32* %0;
    i1 %483 = scmp ge i32 %482, i32 %406;
    cbr i1 %483(prob = 0.5), ^b, ^if.else64;
^b41:
    i32 %484 = load i32* %0;
    i32* %485 = getelementptr &(i32* %405)[i32 %484];
    i32 %486 = load i32* %485;
    i1 %487 = scmp eq i32 %486, i32 32;
    cbr i1 %487(prob = 0.5), ^if.then73, ^if.else65;
^if.else62:
    i1 %488 = scmp eq i32 %471, i32 13;
    cbr i1 %488(prob = 0.5), ^if.then74, ^b36;
^if.then72:
    i32 %489 = add i32 %478, i32 1;
    store i32* %0 with i32 %489;
    ubr ^while.body16;
^if.then73:
    i32 %490 = add i32 %484, i32 1;
    store i32* %0 with i32 %490;
    ubr ^while.body17;
^if.then74:
    i32 %491 = load i32* %0;
    i32 %492 = add i32 %491, i32 1;
    store i32* %0 with i32 %492;
    ubr ^while.body14;
^if.else63:
    i1 %493 = scmp eq i32 %480, i32 9;
    cbr i1 %493(prob = 0.5), ^if.then75, ^if.else66;
^if.else64:
    i32* %494 = getelementptr &(i32* %405)[i32 %482];
    i32 %495 = load i32* %494;
    i1 %496 = scmp neq i32 %495, i32 125;
    cbr i1 %496(prob = 0.5), ^b, ^indirect11;
^if.else65:
    i1 %497 = scmp eq i32 %486, i32 9;
    cbr i1 %497(prob = 0.5), ^if.then76, ^if.else67;
^if.then75:
    i32 %498 = load i32* %0;
    i32 %499 = add i32 %498, i32 1;
    store i32* %0 with i32 %499;
    ubr ^while.body16;
^if.then76:
    i32 %500 = load i32* %0;
    i32 %501 = add i32 %500, i32 1;
    store i32* %0 with i32 %501;
    ubr ^while.body17;
^indirect11:
    i32 %502 = load i32* %0;
    ubr ^if.then17;
^if.else66:
    i32 %503 = load i32* %0;
    i32* %504 = getelementptr &(i32* %405)[i32 %503];
    i32 %505 = load i32* %504;
    i1 %506 = scmp eq i32 %505, i32 10;
    cbr i1 %506(prob = 0.5), ^if.then77, ^if.else68;
^if.else67:
    i32 %507 = load i32* %0;
    i32* %508 = getelementptr &(i32* %405)[i32 %507];
    i32 %509 = load i32* %508;
    i1 %510 = scmp eq i32 %509, i32 10;
    cbr i1 %510(prob = 0.5), ^if.then78, ^if.else69;
^if.then77:
    i32 %511 = add i32 %503, i32 1;
    store i32* %0 with i32 %511;
    ubr ^while.body16;
^if.then78:
    i32 %512 = add i32 %507, i32 1;
    store i32* %0 with i32 %512;
    ubr ^while.body17;
^if.else68:
    i1 %513 = scmp eq i32 %505, i32 13;
    cbr i1 %513(prob = 0.5), ^if.then79, ^while.body18;
^if.else69:
    i1 %514 = scmp eq i32 %509, i32 13;
    cbr i1 %514(prob = 0.5), ^if.then80, ^b40;
^if.then79:
    i32 %515 = load i32* %0;
    i32 %516 = add i32 %515, i32 1;
    store i32* %0 with i32 %516;
    ubr ^while.body16;
^if.then80:
    i32 %517 = load i32* %0;
    i32 %518 = add i32 %517, i32 1;
    store i32* %0 with i32 %518;
    ubr ^while.body17;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    i32* %i = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    store i32* %i with i32 0;
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^while.body, i32 %7] [^entry, i32 0];
    i32* %3 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %4 = phi [^while.body, i32 %8] [^entry, i32 %0];
    i32 %5 = phi [^while.body, i32 %7] [^entry, i32 0];
    i32* %6 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %6 with i32 %4;
    i32 %7 = add i32 %5, i32 1;
    store i32* %i with i32 %7;
    i32 %8 = call () -> i32 @getch();
    i1 %9 = scmp neq i32 %8, i32 35;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body1:
    i32 %10 = phi [^if.then6, i32 %34] [^if.then4, i32 %30] [^if.then1, i32 %22] [^if.then, i32 %18] [^b, i32 0];
    i1 %11 = scmp ge i32 %10, i32 %2;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %12 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %3, i32 %2, i32* %pos);
    i32 %13 = load i32* %i;
    i32 %14 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32* %15 = getelementptr &(i32* %3)[i32 %10];
    i32 %16 = load i32* %15;
    i1 %17 = scmp eq i32 %16, i32 32;
    cbr i1 %17(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %18 = add i32 %10, i32 1;
    store i32* %pos with i32 %18;
    ubr ^while.body1;
^while.body2:
    i32 %19 = phi [^if.then8, i32 %40] [^if.then7, i32 %38] [^if.then5, i32 %33] [^if.then3, i32 %29] [^b1, i32 %14];
    i1 %20 = scmp ge i32 %19, i32 %13;
    cbr i1 %20(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %21 = scmp eq i32 %16, i32 9;
    cbr i1 %21(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %22 = add i32 %10, i32 1;
    store i32* %pos with i32 %22;
    ubr ^while.body1;
^b3:
    i1 %23 = scmp neq i32 %12, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else2;
^b4:
    i32* %24 = getelementptr &(i32* %3)[i32 %19];
    i32 %25 = load i32* %24;
    i1 %26 = scmp eq i32 %25, i32 32;
    cbr i1 %26(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %27 = load i32* %15;
    i1 %28 = scmp eq i32 %27, i32 10;
    cbr i1 %28(prob = 0.5), ^if.then4, ^if.else4;
^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then3:
    i32 %29 = add i32 %19, i32 1;
    ubr ^while.body2;
^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then4:
    i32 %30 = add i32 %10, i32 1;
    store i32* %pos with i32 %30;
    ubr ^while.body1;
^if.else3:
    i1 %31 = scmp eq i32 %25, i32 9;
    cbr i1 %31(prob = 0.5), ^if.then5, ^if.else5;
^if.else4:
    i1 %32 = scmp eq i32 %27, i32 13;
    cbr i1 %32(prob = 0.5), ^if.then6, ^b1;
^if.then5:
    i32 %33 = add i32 %19, i32 1;
    ubr ^while.body2;
^if.then6:
    i32 %34 = add i32 %10, i32 1;
    store i32* %pos with i32 %34;
    ubr ^while.body1;
^if.else5:
    i32 %35 = load i32* %24;
    i1 %36 = scmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then7, ^if.else6;
^b5:
    i32 %37 = phi [^if.else2, i32 1] [^if.then2, i32 0];
    ret i32 %37;
^if.then7:
    i32 %38 = add i32 %19, i32 1;
    ubr ^while.body2;
^if.else6:
    i1 %39 = scmp eq i32 %35, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %40 = add i32 %19, i32 1;
    ubr ^while.body2;
}
