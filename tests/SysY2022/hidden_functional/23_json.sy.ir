internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32* %len1 = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %len1 with i32 %len;
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^if.then, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %type] [^if.then11, i32 %3] [^if.then8, i32 %3] [^if.then3, i32 %3] [^if.then1, i32 %3];
    i32* %4 = phi [^entry, i32* %buf] [^if.then11, i32* %4] [^if.then8, i32* %4] [^if.then3, i32* %4] [^if.then1, i32* %4];
    i32 %5 = phi [^entry, i32 %len] [^if.then11, i32 %5] [^if.then8, i32 %5] [^if.then3, i32 %5] [^if.then1, i32 %5];
    i32 %6 = phi [^entry, i32 %len] [^if.then11, i32 %6] [^if.then8, i32 %6] [^if.then3, i32 %6] [^if.then1, i32 %6];
    i32* %7 = phi [^entry, i32* %buf] [^if.then11, i32* %7] [^if.then8, i32* %7] [^if.then3, i32* %7] [^if.then1, i32* %7];
    i32 %8 = phi [^if.then8, i32 %50] [^entry, i32 %1] [^if.then11, i32 %71] [^if.then1, i32 %17] [^if.then3, i32 %28];
    i32 %9 = phi [^if.then8, i32 %6] [^entry, i32 %len] [^if.then11, i32 %6] [^if.then1, i32 %6] [^if.then3, i32 %6];
    i1 %10 = scmp ge i32 %8, i32 %9;
    cbr i1 %10(prob = 0.5), ^b, ^b1;
^if.then:
    ret i32 0;
^b:
    i1 %11 = scmp eq i32 %3, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then2, ^if.else;
^b1:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %7)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %16 = load i32* %0;
    i32 %17 = add i32 %16, i32 1;
    store i32* %0 with i32 %17;
    ubr ^while.body;
^if.then2:
    i32 %18 = load i32* %0;
    i32* %19 = getelementptr &(i32* %4)[i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = scmp eq i32 %20, i32 123;
    cbr i1 %21(prob = 0.5), ^if.then5, ^if.else2;
^if.else:
    i1 %22 = scmp eq i32 %3, i32 1;
    cbr i1 %22(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i32 %23 = load i32* %0;
    i32* %24 = getelementptr &(i32* %7)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp eq i32 %25, i32 9;
    cbr i1 %26(prob = 0.5), ^if.then3, ^if.else4;
^if.then3:
    i32 %27 = load i32* %0;
    i32 %28 = add i32 %27, i32 1;
    store i32* %0 with i32 %28;
    ubr ^while.body;
^if.else2:
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %4)[i32 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 91;
    cbr i1 %32(prob = 0.5), ^if.then9, ^if.else5;
^if.then4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %4)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 43;
    cbr i1 %36(prob = 0.5), ^if.then6, ^if.else6;
^if.else3:
    i1 %37 = scmp eq i32 %3, i32 2;
    cbr i1 %37(prob = 0.5), ^if.then7, ^if.else7;
^if.else4:
    i32 %38 = load i32* %0;
    i32* %39 = getelementptr &(i32* %7)[i32 %38];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %40, i32 10;
    cbr i1 %41(prob = 0.5), ^if.then8, ^if.else8;
^if.then5:
    i32 %42 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %4, i32 %5, i32* %0);
    ret i32 %42;
^if.then6:
    i32 %43 = load i32* %0;
    i32 %44 = add i32 %43, i32 1;
    store i32* %0 with i32 %44;
    ubr ^b2;
^if.then7:
    i32* %45 = phi [^b4, i32* %72] [^if.else3, i32* %4];
    i32 %46 = phi [^b4, i32 %73] [^if.else3, i32 %5];
    i32 %47 = load i32* %0;
    i32 %48 = add i32 %47, i32 1;
    store i32* %0 with i32 %48;
    ubr ^while.header;
^if.then8:
    i32 %49 = load i32* %0;
    i32 %50 = add i32 %49, i32 1;
    store i32* %0 with i32 %50;
    ubr ^while.body;
^if.else5:
    i32 %51 = load i32* %0;
    i32* %52 = getelementptr &(i32* %4)[i32 %51];
    i32 %53 = load i32* %52;
    i1 %54 = scmp eq i32 %53, i32 34;
    cbr i1 %54(prob = 0.5), ^if.then12, ^if.else9;
^if.else6:
    i32 %55 = load i32* %0;
    i32* %56 = getelementptr &(i32* %4)[i32 %55];
    i32 %57 = load i32* %56;
    i1 %58 = scmp eq i32 %57, i32 45;
    cbr i1 %58(prob = 0.5), ^if.then6, ^indirect;
^if.else7:
    i1 %59 = scmp eq i32 %3, i32 3;
    cbr i1 %59(prob = 0.5), ^if.then10, ^if.else10;
^if.else8:
    i32 %60 = load i32* %0;
    i32* %61 = getelementptr &(i32* %7)[i32 %60];
    i32 %62 = load i32* %61;
    i1 %63 = scmp eq i32 %62, i32 13;
    cbr i1 %63(prob = 0.5), ^if.then11, ^b;
^if.then9:
    i32 %64 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %4, i32 %5, i32* %0);
    ret i32 %64;
^b2:
    i32 %65 = phi [^indirect, i32 %67] [^if.then6, i32 %44];
    i1 %66 = scmp ge i32 %65, i32 %5;
    cbr i1 %66(prob = 0.5), ^if.then, ^if.else11;
^indirect:
    i32 %67 = load i32* %0;
    ubr ^b2;
^if.then10:
    i32 %68 = load i32* %0;
    i32 %69 = add i32 %68, i32 1;
    store i32* %0 with i32 %69;
    ubr ^while.body2;
^if.then11:
    i32 %70 = load i32* %0;
    i32 %71 = add i32 %70, i32 1;
    store i32* %0 with i32 %71;
    ubr ^while.body;
^while.header:
    i32* %72 = phi [^if.then18, i32* %72] [^if.then7, i32* %45];
    i32 %73 = phi [^if.then18, i32 %73] [^if.then7, i32 %46];
    i32 %74 = phi [^if.then18, i32 %142] [^if.then7, i32 %48];
    i1 %75 = scmp lt i32 %74, i32 %73;
    cbr i1 %75(prob = 0.97), ^while.body1, ^b3;
^if.else9:
    i32 %76 = load i32* %0;
    i32* %77 = getelementptr &(i32* %4)[i32 %76];
    i32 %78 = load i32* %77;
    i1 %79 = scmp gt i32 %78, i32 47;
    cbr i1 %79(prob = 0.5), ^if.then14, ^if.else12;
^if.else10:
    i1 %80 = scmp eq i32 %3, i32 4;
    cbr i1 %80(prob = 0.5), ^if.then13, ^if.else13;
^if.then12:
    i32 %81 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %4, i32 %5, i32* %0);
    ret i32 %81;
^if.else11:
    i32 %82 = load i32* %0;
    i32* %83 = getelementptr &(i32* %4)[i32 %82];
    i32 %84 = load i32* %83;
    i1 %85 = scmp gt i32 %84, i32 47;
    cbr i1 %85(prob = 0.5), ^if.then15, ^if.else15;
^while.body1:
    i32 %86 = load i32* %0;
    i32* %87 = getelementptr &(i32* %72)[i32 %86];
    i32 %88 = load i32* %87;
    i1 %89 = scmp eq i32 %88, i32 34;
    cbr i1 %89(prob = 0.5), ^b3, ^b4;
^if.then13:
    i32 %90 = load i32* %0;
    i32 %91 = add i32 %90, i32 1;
    store i32* %0 with i32 %91;
    ubr ^while.body3;
^b3:
    i32 %92 = load i32* %0;
    i1 %93 = scmp ge i32 %92, i32 %73;
    cbr i1 %93(prob = 0.5), ^if.then, ^if.else16;
^if.then14:
    i1 %94 = scmp lt i32 %78, i32 58;
    cbr i1 %94(prob = 0.5), ^if.else12, ^if.else14;
^while.body2:
    i32* %95 = phi [^if.then27, i32* %95] [^if.then23, i32* %95] [^if.then31, i32* %95] [^if.then19, i32* %95] [^if.then10, i32* %4];
    i32 %96 = phi [^if.then27, i32 %96] [^if.then23, i32 %96] [^if.then31, i32 %96] [^if.then19, i32 %96] [^if.then10, i32 %5];
    i32 %97 = phi [^if.then27, i32 %97] [^if.then23, i32 %97] [^if.then31, i32 %97] [^if.then19, i32 %97] [^if.then10, i32 %5];
    i32* %98 = phi [^if.then27, i32* %98] [^if.then23, i32* %98] [^if.then31, i32* %98] [^if.then19, i32* %98] [^if.then10, i32* %4];
    i32 %99 = phi [^if.then10, i32 %69] [^if.then27, i32 %228] [^if.then23, i32 %182] [^if.then31, i32 %277] [^if.then19, i32 %144];
    i32 %100 = phi [^if.then10, i32 %5] [^if.then27, i32 %97] [^if.then23, i32 %97] [^if.then31, i32 %97] [^if.then19, i32 %97];
    i1 %101 = scmp ge i32 %99, i32 %100;
    cbr i1 %101(prob = 0.5), ^if.then16, ^b5;
^if.else12:
    i32 %102 = phi [^if.else9, i32 0] [^if.then14, i32 1] [^if.else14, i32 0];
    i1 %103 = scmp eq i32 %102, i32 1;
    cbr i1 %103(prob = 0.5), ^indirect1, ^if.else17;
^if.else13:
    i1 %104 = scmp eq i32 %3, i32 5;
    cbr i1 %104(prob = 0.5), ^if.then17, ^if.else18;
^if.else14:
    ubr ^if.else12;
^if.then15:
    i1 %105 = scmp lt i32 %84, i32 58;
    cbr i1 %105(prob = 0.5), ^if.else15, ^if.else19;
^b4:
    i32 %106 = load i32* %0;
    i32* %107 = getelementptr &(i32* %72)[i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = scmp eq i32 %108, i32 92;
    cbr i1 %109(prob = 0.5), ^if.then18, ^if.then7;
^if.then16:
    i32 %110 = load i32* %0;
    i1 %111 = scmp lt i32 %110, i32 %96;
    cbr i1 %111(prob = 0.5), ^if.then20, ^b6;
^if.else15:
    i32 %112 = phi [^if.else11, i32 0] [^if.then15, i32 1] [^if.else19, i32 0];
    i1 %113 = scmp eq i32 %112, i32 0;
    cbr i1 %113(prob = 0.5), ^if.then, ^indirect2;
^if.else16:
    i32* %114 = getelementptr &(i32* %72)[i32 %92];
    i32 %115 = load i32* %114;
    i1 %116 = scmp neq i32 %115, i32 34;
    cbr i1 %116(prob = 0.5), ^if.then, ^b8;
^b5:
    i32 %117 = load i32* %0;
    i32* %118 = getelementptr &(i32* %98)[i32 %117];
    i32 %119 = load i32* %118;
    i1 %120 = scmp eq i32 %119, i32 32;
    cbr i1 %120(prob = 0.5), ^if.then19, ^if.else20;
^while.body3:
    i32* %121 = phi [^if.then32, i32* %121] [^if.then28, i32* %121] [^if.then37, i32* %121] [^if.then24, i32* %121] [^if.then13, i32* %4];
    i32 %122 = phi [^if.then32, i32 %122] [^if.then28, i32 %122] [^if.then37, i32 %122] [^if.then24, i32 %122] [^if.then13, i32 %5];
    i32 %123 = phi [^if.then32, i32 %123] [^if.then28, i32 %123] [^if.then37, i32 %123] [^if.then24, i32 %123] [^if.then13, i32 %5];
    i32* %124 = phi [^if.then32, i32* %124] [^if.then28, i32* %124] [^if.then37, i32* %124] [^if.then24, i32* %124] [^if.then13, i32* %4];
    i32 %125 = phi [^if.then13, i32 %91] [^if.then32, i32 %279] [^if.then37, i32 %346] [^if.then24, i32 %184] [^if.then28, i32 %230];
    i32 %126 = phi [^if.then13, i32 %5] [^if.then32, i32 %123] [^if.then37, i32 %123] [^if.then24, i32 %123] [^if.then28, i32 %123];
    i1 %127 = scmp ge i32 %125, i32 %126;
    cbr i1 %127(prob = 0.5), ^if.then21, ^b7;
^if.then17:
    i32* %128 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %128 with i32 116;
    i32* %129 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %129 with i32 114;
    i32* %130 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %130 with i32 117;
    i32* %131 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %131 with i32 101;
    i32 %132 = load i32* %0;
    i32 %133 = add i32 %132, i32 3;
    i1 %134 = scmp ge i32 %133, i32 %5;
    cbr i1 %134(prob = 0.5), ^if.then, ^if.else21;
^if.else17:
    i32 %135 = load i32* %0;
    i32* %136 = getelementptr &(i32* %4)[i32 %135];
    i32 %137 = load i32* %136;
    i1 %138 = scmp eq i32 %137, i32 43;
    cbr i1 %138(prob = 0.5), ^indirect1, ^if.else22;
^if.else18:
    i1 %139 = scmp eq i32 %3, i32 6;
    cbr i1 %139(prob = 0.5), ^if.then22, ^if.else23;
^indirect1:
    i32 %140 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %4, i32 %5, i32* %0);
    ret i32 %140;
^if.else19:
    ubr ^if.else15;
^if.then18:
    i32 %141 = load i32* %0;
    i32 %142 = add i32 %141, i32 2;
    store i32* %0 with i32 %142;
    ubr ^while.header;
^if.then19:
    i32 %143 = load i32* %0;
    i32 %144 = add i32 %143, i32 1;
    store i32* %0 with i32 %144;
    ubr ^while.body2;
^indirect2:
    i32 %145 = load i32* %0;
    ubr ^while.header1;
^if.then20:
    i32* %146 = getelementptr &(i32* %95)[i32 %110];
    i32 %147 = load i32* %146;
    i1 %148 = scmp eq i32 %147, i32 93;
    cbr i1 %148(prob = 0.5), ^b8, ^b6;
^if.then21:
    i32 %149 = load i32* %0;
    i1 %150 = scmp lt i32 %149, i32 %122;
    cbr i1 %150(prob = 0.5), ^if.then25, ^b10;
^b6:
    i32 %151 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %95, i32 %96, i32* %0);
    i32* %152 = load i32** %buf1;
    i32 %153 = load i32* %len1;
    i1 %154 = scmp eq i32 %151, i32 0;
    cbr i1 %154(prob = 0.5), ^if.then, ^b9;
^if.else20:
    i32 %155 = load i32* %0;
    i32* %156 = getelementptr &(i32* %98)[i32 %155];
    i32 %157 = load i32* %156;
    i1 %158 = scmp eq i32 %157, i32 9;
    cbr i1 %158(prob = 0.5), ^if.then23, ^if.else24;
^b7:
    i32 %159 = load i32* %0;
    i32* %160 = getelementptr &(i32* %124)[i32 %159];
    i32 %161 = load i32* %160;
    i1 %162 = scmp eq i32 %161, i32 32;
    cbr i1 %162(prob = 0.5), ^if.then24, ^if.else25;
^if.else21:
    i32* %163 = getelementptr &(i32* %4)[i32 %132];
    i32 %164 = load i32* %163;
    i1 %165 = scmp neq i32 %164, i32 116;
    cbr i1 %165(prob = 0.5), ^if.then, ^if.else26;
^if.then22:
    i32* %166 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %166 with i32 102;
    i32* %167 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %167 with i32 97;
    i32* %168 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %168 with i32 108;
    i32* %169 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %169 with i32 115;
    i32* %170 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %170 with i32 101;
    i32 %171 = load i32* %0;
    i32 %172 = add i32 %171, i32 4;
    i1 %173 = scmp ge i32 %172, i32 %5;
    cbr i1 %173(prob = 0.5), ^if.then, ^if.else27;
^if.else22:
    i32 %174 = load i32* %0;
    i32* %175 = getelementptr &(i32* %4)[i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = scmp eq i32 %176, i32 45;
    cbr i1 %177(prob = 0.5), ^indirect1, ^if.else28;
^if.else23:
    i1 %178 = scmp eq i32 %3, i32 7;
    cbr i1 %178(prob = 0.5), ^if.then26, ^if.then;
^b8:
    i32 %179 = load i32* %0;
    i32 %180 = add i32 %179, i32 1;
    store i32* %0 with i32 %180;
    ret i32 1;
^if.then23:
    i32 %181 = load i32* %0;
    i32 %182 = add i32 %181, i32 1;
    store i32* %0 with i32 %182;
    ubr ^while.body2;
^if.then24:
    i32 %183 = load i32* %0;
    i32 %184 = add i32 %183, i32 1;
    store i32* %0 with i32 %184;
    ubr ^while.body3;
^b9:
    i32* %185 = phi [^while.body12, i32* %425] [^b6, i32* %152];
    i32 %186 = phi [^while.body12, i32 %426] [^b6, i32 %153];
    i32 %187 = load i32* %0;
    ubr ^while.body5;
^if.then25:
    i32* %188 = getelementptr &(i32* %121)[i32 %149];
    i32 %189 = load i32* %188;
    i1 %190 = scmp eq i32 %189, i32 125;
    cbr i1 %190(prob = 0.5), ^b8, ^b10;
^while.header1:
    i32* %191 = phi [^b16, i32* %191] [^indirect2, i32* %4];
    i32 %192 = phi [^b16, i32 %192] [^indirect2, i32 %5];
    i32 %193 = phi [^b16, i32 %336] [^indirect2, i32 %145];
    i1 %194 = scmp lt i32 %193, i32 %192;
    cbr i1 %194(prob = 0.97), ^while.body4, ^b12;
^b10:
    i32 %195 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %121, i32 %122, i32* %0);
    i32* %196 = load i32** %buf1;
    i32 %197 = load i32* %len1;
    i1 %198 = scmp eq i32 %195, i32 0;
    cbr i1 %198(prob = 0.5), ^if.then, ^b11;
^if.else24:
    i32 %199 = load i32* %0;
    i32* %200 = getelementptr &(i32* %98)[i32 %199];
    i32 %201 = load i32* %200;
    i1 %202 = scmp eq i32 %201, i32 10;
    cbr i1 %202(prob = 0.5), ^if.then27, ^if.else29;
^if.else25:
    i32 %203 = load i32* %0;
    i32* %204 = getelementptr &(i32* %124)[i32 %203];
    i32 %205 = load i32* %204;
    i1 %206 = scmp eq i32 %205, i32 9;
    cbr i1 %206(prob = 0.5), ^if.then28, ^if.else30;
^if.else26:
    i32 %207 = load i32* %0;
    i32 %208 = add i32 %207, i32 1;
    i32* %209 = getelementptr &(i32* %4)[i32 %208];
    i32 %210 = load i32* %209;
    i32 %211 = load i32* %129;
    i1 %212 = scmp neq i32 %210, i32 %211;
    cbr i1 %212(prob = 0.5), ^if.then, ^if.else31;
^if.else27:
    i32* %213 = getelementptr &(i32* %4)[i32 %171];
    i32 %214 = load i32* %213;
    i1 %215 = scmp neq i32 %214, i32 102;
    cbr i1 %215(prob = 0.5), ^if.then, ^if.else32;
^if.then26:
    i32* %216 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %216 with i32 110;
    i32* %217 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %217 with i32 117;
    i32* %218 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %218 with i32 108;
    i32* %219 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %219 with i32 108;
    i32 %220 = load i32* %0;
    i32 %221 = add i32 %220, i32 3;
    i1 %222 = scmp ge i32 %221, i32 %5;
    cbr i1 %222(prob = 0.5), ^if.then, ^if.else33;
^if.else28:
    i32 %223 = load i32* %0;
    i32* %224 = getelementptr &(i32* %4)[i32 %223];
    i32 %225 = load i32* %224;
    i1 %226 = scmp eq i32 %225, i32 116;
    cbr i1 %226(prob = 0.5), ^if.then29, ^if.else34;
^if.then27:
    i32 %227 = load i32* %0;
    i32 %228 = add i32 %227, i32 1;
    store i32* %0 with i32 %228;
    ubr ^while.body2;
^if.then28:
    i32 %229 = load i32* %0;
    i32 %230 = add i32 %229, i32 1;
    store i32* %0 with i32 %230;
    ubr ^while.body3;
^while.body4:
    i32 %231 = load i32* %0;
    i32* %232 = getelementptr &(i32* %191)[i32 %231];
    i32 %233 = load i32* %232;
    i1 %234 = scmp gt i32 %233, i32 47;
    cbr i1 %234(prob = 0.5), ^if.then30, ^while.body6;
^b11:
    i32* %235 = phi [^while.body21, i32* %620] [^b10, i32* %196];
    i32 %236 = phi [^while.body21, i32 %621] [^b10, i32 %197];
    i32 %237 = load i32* %0;
    ubr ^while.body7;
^b12:
    i32 %238 = load i32* %0;
    i1 %239 = scmp lt i32 %238, i32 %192;
    cbr i1 %239(prob = 0.5), ^if.then33, ^b14;
^while.body5:
    i32* %240 = phi [^if.then45, i32* %240] [^if.then40, i32* %240] [^if.then35, i32* %240] [^if.then51, i32* %240] [^b9, i32* %185];
    i32 %241 = phi [^if.then45, i32 %241] [^if.then40, i32 %241] [^if.then35, i32 %241] [^if.then51, i32 %241] [^b9, i32 %186];
    i32 %242 = phi [^if.then45, i32 %242] [^if.then40, i32 %242] [^if.then35, i32 %242] [^if.then51, i32 %242] [^b9, i32 %186];
    i32* %243 = phi [^if.then45, i32* %243] [^if.then40, i32* %243] [^if.then35, i32* %243] [^if.then51, i32* %243] [^b9, i32* %185];
    i32 %244 = phi [^if.then45, i32 %434] [^b9, i32 %187] [^if.then51, i32 %475] [^if.then35, i32 %338] [^if.then40, i32 %380];
    i32 %245 = phi [^if.then45, i32 %242] [^b9, i32 %186] [^if.then51, i32 %242] [^if.then35, i32 %242] [^if.then40, i32 %242];
    i1 %246 = scmp ge i32 %244, i32 %245;
    cbr i1 %246(prob = 0.5), ^b13, ^b15;
^if.else29:
    i32 %247 = load i32* %0;
    i32* %248 = getelementptr &(i32* %98)[i32 %247];
    i32 %249 = load i32* %248;
    i1 %250 = scmp eq i32 %249, i32 13;
    cbr i1 %250(prob = 0.5), ^if.then31, ^if.then16;
^if.else30:
    i32 %251 = load i32* %0;
    i32* %252 = getelementptr &(i32* %124)[i32 %251];
    i32 %253 = load i32* %252;
    i1 %254 = scmp eq i32 %253, i32 10;
    cbr i1 %254(prob = 0.5), ^if.then32, ^if.else35;
^if.else31:
    i32 %255 = load i32* %0;
    i32 %256 = add i32 %255, i32 2;
    i32* %257 = getelementptr &(i32* %4)[i32 %256];
    i32 %258 = load i32* %257;
    i32 %259 = load i32* %130;
    i1 %260 = scmp neq i32 %258, i32 %259;
    cbr i1 %260(prob = 0.5), ^if.then, ^if.else36;
^if.else32:
    i32 %261 = load i32* %0;
    i32 %262 = add i32 %261, i32 1;
    i32* %263 = getelementptr &(i32* %4)[i32 %262];
    i32 %264 = load i32* %263;
    i32 %265 = load i32* %167;
    i1 %266 = scmp neq i32 %264, i32 %265;
    cbr i1 %266(prob = 0.5), ^if.then, ^if.else37;
^if.else33:
    i32* %267 = getelementptr &(i32* %4)[i32 %220];
    i32 %268 = load i32* %267;
    i1 %269 = scmp neq i32 %268, i32 110;
    cbr i1 %269(prob = 0.5), ^if.then, ^if.else38;
^if.else34:
    i32 %270 = load i32* %0;
    i32* %271 = getelementptr &(i32* %4)[i32 %270];
    i32 %272 = load i32* %271;
    i1 %273 = scmp eq i32 %272, i32 102;
    cbr i1 %273(prob = 0.5), ^if.then34, ^if.else39;
^if.then29:
    i32 %274 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %4, i32 %5, i32* %0);
    ret i32 %274;
^if.then30:
    i1 %275 = scmp lt i32 %233, i32 58;
    cbr i1 %275(prob = 0.5), ^while.body6, ^if.else40;
^if.then31:
    i32 %276 = load i32* %0;
    i32 %277 = add i32 %276, i32 1;
    store i32* %0 with i32 %277;
    ubr ^while.body2;
^if.then32:
    i32 %278 = load i32* %0;
    i32 %279 = add i32 %278, i32 1;
    store i32* %0 with i32 %279;
    ubr ^while.body3;
^if.then33:
    i32* %280 = getelementptr &(i32* %191)[i32 %238];
    i32 %281 = load i32* %280;
    i1 %282 = scmp eq i32 %281, i32 46;
    cbr i1 %282(prob = 0.5), ^if.then36, ^indirect3;
^while.body6:
    i32 %283 = phi [^while.body4, i32 0] [^if.then30, i32 1] [^if.else40, i32 0];
    i1 %284 = scmp neq i32 %283, i32 1;
    cbr i1 %284(prob = 0.5), ^b12, ^b16;
^b13:
    i32 %285 = load i32* %0;
    i32* %286 = getelementptr &(i32* %240)[i32 %285];
    i32 %287 = load i32* %286;
    i1 %288 = scmp eq i32 %287, i32 44;
    cbr i1 %288(prob = 0.97), ^while.body8, ^b17;
^b14:
    i32* %289 = phi [^indirect4, i32* %340] [^b12, i32* %191] [^if.then36, i32* %340] [^indirect3, i32* %191];
    i32 %290 = phi [^indirect4, i32 %341] [^b12, i32 %192] [^if.then36, i32 %341] [^indirect3, i32 %192];
    i32 %291 = phi [^indirect4, i32 %341] [^b12, i32 %192] [^if.then36, i32 %341] [^indirect3, i32 %192];
    i32 %292 = phi [^indirect4, i32 %461] [^b12, i32 %238] [^if.then36, i32 %343] [^indirect3, i32 %334];
    i1 %293 = scmp lt i32 %292, i32 %291;
    cbr i1 %293(prob = 0.5), ^if.then38, ^b20;
^b15:
    i32 %294 = load i32* %0;
    i32* %295 = getelementptr &(i32* %243)[i32 %294];
    i32 %296 = load i32* %295;
    i1 %297 = scmp eq i32 %296, i32 32;
    cbr i1 %297(prob = 0.5), ^if.then35, ^if.else41;
^while.body7:
    i32* %298 = phi [^if.then46, i32* %298] [^if.then56, i32* %298] [^if.then41, i32* %298] [^if.then52, i32* %298] [^b11, i32* %235];
    i32 %299 = phi [^if.then46, i32 %299] [^if.then56, i32 %299] [^if.then41, i32 %299] [^if.then52, i32 %299] [^b11, i32 %236];
    i32 %300 = phi [^if.then46, i32 %300] [^if.then56, i32 %300] [^if.then41, i32 %300] [^if.then52, i32 %300] [^b11, i32 %236];
    i32* %301 = phi [^if.then46, i32* %301] [^if.then56, i32* %301] [^if.then41, i32* %301] [^if.then52, i32* %301] [^b11, i32* %235];
    i32 %302 = phi [^b11, i32 %237] [^if.then52, i32 %477] [^if.then56, i32 %514] [^if.then41, i32 %382] [^if.then46, i32 %436];
    i32 %303 = phi [^b11, i32 %236] [^if.then52, i32 %300] [^if.then56, i32 %300] [^if.then41, i32 %300] [^if.then46, i32 %300];
    i1 %304 = scmp ge i32 %302, i32 %303;
    cbr i1 %304(prob = 0.5), ^b18, ^b19;
^if.else35:
    i32 %305 = load i32* %0;
    i32* %306 = getelementptr &(i32* %124)[i32 %305];
    i32 %307 = load i32* %306;
    i1 %308 = scmp eq i32 %307, i32 13;
    cbr i1 %308(prob = 0.5), ^if.then37, ^if.then21;
^if.else36:
    i32 %309 = load i32* %0;
    i32 %310 = add i32 %309, i32 3;
    i32* %311 = getelementptr &(i32* %4)[i32 %310];
    i32 %312 = load i32* %311;
    i32 %313 = load i32* %131;
    i1 %314 = scmp neq i32 %312, i32 %313;
    cbr i1 %314(prob = 0.5), ^if.then, ^b21;
^if.else37:
    i32 %315 = load i32* %0;
    i32 %316 = add i32 %315, i32 2;
    i32* %317 = getelementptr &(i32* %4)[i32 %316];
    i32 %318 = load i32* %317;
    i32 %319 = load i32* %168;
    i1 %320 = scmp neq i32 %318, i32 %319;
    cbr i1 %320(prob = 0.5), ^if.then, ^if.else42;
^if.else38:
    i32 %321 = load i32* %0;
    i32 %322 = add i32 %321, i32 1;
    i32* %323 = getelementptr &(i32* %4)[i32 %322];
    i32 %324 = load i32* %323;
    i32 %325 = load i32* %217;
    i1 %326 = scmp neq i32 %324, i32 %325;
    cbr i1 %326(prob = 0.5), ^if.then, ^if.else43;
^if.else39:
    i32 %327 = load i32* %0;
    i32* %328 = getelementptr &(i32* %4)[i32 %327];
    i32 %329 = load i32* %328;
    i1 %330 = scmp eq i32 %329, i32 110;
    cbr i1 %330(prob = 0.5), ^if.then39, ^if.then;
^if.then34:
    i32 %331 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %4, i32 %5, i32* %0);
    ret i32 %331;
^if.else40:
    ubr ^while.body6;
^while.body8:
    i32 %332 = load i32* %0;
    i32 %333 = add i32 %332, i32 1;
    store i32* %0 with i32 %333;
    ubr ^while.body10;
^indirect3:
    i32 %334 = load i32* %0;
    ubr ^b14;
^b16:
    i32 %335 = load i32* %0;
    i32 %336 = add i32 %335, i32 1;
    store i32* %0 with i32 %336;
    ubr ^while.header1;
^if.then35:
    i32 %337 = load i32* %0;
    i32 %338 = add i32 %337, i32 1;
    store i32* %0 with i32 %338;
    ubr ^while.body5;
^b17:
    i32 %339 = load i32* %0;
    ubr ^while.body11;
^if.then36:
    i32* %340 = phi [^while.body13, i32* %340] [^if.then33, i32* %191];
    i32 %341 = phi [^while.body13, i32 %341] [^if.then33, i32 %192];
    i32 %342 = load i32* %0;
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    i1 %344 = scmp lt i32 %343, i32 %341;
    cbr i1 %344(prob = 0.97), ^while.body9, ^b14;
^if.then37:
    i32 %345 = load i32* %0;
    i32 %346 = add i32 %345, i32 1;
    store i32* %0 with i32 %346;
    ubr ^while.body3;
^if.then38:
    i32 %347 = load i32* %0;
    i32* %348 = getelementptr &(i32* %289)[i32 %347];
    i32 %349 = load i32* %348;
    i1 %350 = scmp eq i32 %349, i32 101;
    cbr i1 %350(prob = 0.5), ^if.then42, ^b20;
^b18:
    i32 %351 = load i32* %0;
    i1 %352 = scmp ge i32 %351, i32 %299;
    cbr i1 %352(prob = 0.5), ^if.then, ^b22;
^if.else41:
    i32 %353 = load i32* %0;
    i32* %354 = getelementptr &(i32* %243)[i32 %353];
    i32 %355 = load i32* %354;
    i1 %356 = scmp eq i32 %355, i32 9;
    cbr i1 %356(prob = 0.5), ^if.then40, ^if.else44;
^b19:
    i32 %357 = load i32* %0;
    i32* %358 = getelementptr &(i32* %301)[i32 %357];
    i32 %359 = load i32* %358;
    i1 %360 = scmp eq i32 %359, i32 32;
    cbr i1 %360(prob = 0.5), ^if.then41, ^if.else45;
^if.else42:
    i32 %361 = load i32* %0;
    i32 %362 = add i32 %361, i32 3;
    i32* %363 = getelementptr &(i32* %4)[i32 %362];
    i32 %364 = load i32* %363;
    i32 %365 = load i32* %169;
    i1 %366 = scmp neq i32 %364, i32 %365;
    cbr i1 %366(prob = 0.5), ^if.then, ^if.else46;
^if.else43:
    i32 %367 = load i32* %0;
    i32 %368 = add i32 %367, i32 2;
    i32* %369 = getelementptr &(i32* %4)[i32 %368];
    i32 %370 = load i32* %369;
    i32 %371 = load i32* %218;
    i1 %372 = scmp neq i32 %370, i32 %371;
    cbr i1 %372(prob = 0.5), ^if.then, ^if.else47;
^b20:
    ret i32 1;
^if.then39:
    i32 %373 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %4, i32 %5, i32* %0);
    ret i32 %373;
^b21:
    i32 %374 = load i32* %0;
    i32 %375 = add i32 %374, i32 4;
    store i32* %0 with i32 %375;
    ret i32 1;
^while.body9:
    i32* %376 = getelementptr &(i32* %340)[i32 %343];
    i32 %377 = load i32* %376;
    i1 %378 = scmp gt i32 %377, i32 47;
    cbr i1 %378(prob = 0.5), ^if.then43, ^while.body13;
^if.then40:
    i32 %379 = load i32* %0;
    i32 %380 = add i32 %379, i32 1;
    store i32* %0 with i32 %380;
    ubr ^while.body5;
^if.then41:
    i32 %381 = load i32* %0;
    i32 %382 = add i32 %381, i32 1;
    store i32* %0 with i32 %382;
    ubr ^while.body7;
^while.body10:
    i32* %383 = phi [^if.then57, i32* %383] [^if.then54, i32* %383] [^if.then60, i32* %383] [^if.then48, i32* %383] [^while.body8, i32* %240];
    i32 %384 = phi [^if.then57, i32 %384] [^if.then54, i32 %384] [^if.then60, i32 %384] [^if.then48, i32 %384] [^while.body8, i32 %241];
    i32 %385 = phi [^if.then57, i32 %385] [^if.then54, i32 %385] [^if.then60, i32 %385] [^if.then48, i32 %385] [^while.body8, i32 %241];
    i32* %386 = phi [^if.then57, i32* %386] [^if.then54, i32* %386] [^if.then60, i32* %386] [^if.then48, i32* %386] [^while.body8, i32* %240];
    i32 %387 = phi [^while.body8, i32 %333] [^if.then57, i32 %532] [^if.then60, i32 %555] [^if.then48, i32 %465] [^if.then54, i32 %505];
    i32 %388 = phi [^while.body8, i32 %241] [^if.then57, i32 %385] [^if.then60, i32 %385] [^if.then48, i32 %385] [^if.then54, i32 %385];
    i1 %389 = scmp ge i32 %387, i32 %388;
    cbr i1 %389(prob = 0.5), ^while.body12, ^b24;
^if.then42:
    i32 %390 = load i32* %0;
    i32 %391 = add i32 %390, i32 1;
    store i32* %0 with i32 %391;
    i1 %392 = scmp lt i32 %391, i32 %290;
    cbr i1 %392(prob = 0.5), ^if.then44, ^b26;
^while.body11:
    i32* %393 = phi [^if.then62, i32* %393] [^if.then55, i32* %393] [^if.then58, i32* %393] [^if.then49, i32* %393] [^b17, i32* %240];
    i32 %394 = phi [^if.then62, i32 %394] [^if.then55, i32 %394] [^if.then58, i32 %394] [^if.then49, i32 %394] [^b17, i32 %241];
    i32 %395 = phi [^if.then62, i32 %395] [^if.then55, i32 %395] [^if.then58, i32 %395] [^if.then49, i32 %395] [^b17, i32 %241];
    i32* %396 = phi [^if.then62, i32* %396] [^if.then55, i32* %396] [^if.then58, i32* %396] [^if.then49, i32* %396] [^b17, i32* %240];
    i32 %397 = phi [^b17, i32 %339] [^if.then58, i32 %534] [^if.then49, i32 %468] [^if.then62, i32 %558] [^if.then55, i32 %508];
    i32 %398 = phi [^b17, i32 %241] [^if.then58, i32 %395] [^if.then49, i32 %395] [^if.then62, i32 %395] [^if.then55, i32 %395];
    i1 %399 = scmp ge i32 %397, i32 %398;
    cbr i1 %399(prob = 0.5), ^b25, ^b27;
^b22:
    i32* %400 = getelementptr &(i32* %298)[i32 %351];
    i32 %401 = load i32* %400;
    i1 %402 = scmp neq i32 %401, i32 58;
    cbr i1 %402(prob = 0.5), ^if.then, ^b23;
^if.else44:
    i32 %403 = load i32* %0;
    i32* %404 = getelementptr &(i32* %243)[i32 %403];
    i32 %405 = load i32* %404;
    i1 %406 = scmp eq i32 %405, i32 10;
    cbr i1 %406(prob = 0.5), ^if.then45, ^if.else48;
^if.else45:
    i32 %407 = load i32* %0;
    i32* %408 = getelementptr &(i32* %301)[i32 %407];
    i32 %409 = load i32* %408;
    i1 %410 = scmp eq i32 %409, i32 9;
    cbr i1 %410(prob = 0.5), ^if.then46, ^if.else49;
^if.else46:
    i32 %411 = load i32* %0;
    i32 %412 = add i32 %411, i32 4;
    i32* %413 = getelementptr &(i32* %4)[i32 %412];
    i32 %414 = load i32* %413;
    i32 %415 = load i32* %170;
    i1 %416 = scmp neq i32 %414, i32 %415;
    cbr i1 %416(prob = 0.5), ^if.then, ^b28;
^if.else47:
    i32 %417 = load i32* %0;
    i32 %418 = add i32 %417, i32 3;
    i32* %419 = getelementptr &(i32* %4)[i32 %418];
    i32 %420 = load i32* %419;
    i32 %421 = load i32* %219;
    i1 %422 = scmp neq i32 %420, i32 %421;
    cbr i1 %422(prob = 0.5), ^if.then, ^b21;
^if.then43:
    i1 %423 = scmp lt i32 %377, i32 58;
    cbr i1 %423(prob = 0.5), ^while.body13, ^if.else50;
^while.body12:
    i32 %424 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %383, i32 %384, i32* %0);
    i32* %425 = load i32** %buf1;
    i32 %426 = load i32* %len1;
    i1 %427 = scmp eq i32 %424, i32 0;
    cbr i1 %427(prob = 0.5), ^if.then, ^b9;
^while.body13:
    i32 %428 = phi [^while.body9, i32 0] [^if.then43, i32 1] [^if.else50, i32 0];
    i1 %429 = scmp neq i32 %428, i32 1;
    cbr i1 %429(prob = 0.5), ^indirect4, ^if.then36;
^if.then44:
    i32* %430 = getelementptr &(i32* %289)[i32 %391];
    i32 %431 = load i32* %430;
    i1 %432 = scmp eq i32 %431, i32 43;
    cbr i1 %432(prob = 0.5), ^if.then47, ^indirect5;
^if.then45:
    i32 %433 = load i32* %0;
    i32 %434 = add i32 %433, i32 1;
    store i32* %0 with i32 %434;
    ubr ^while.body5;
^if.then46:
    i32 %435 = load i32* %0;
    i32 %436 = add i32 %435, i32 1;
    store i32* %0 with i32 %436;
    ubr ^while.body7;
^b23:
    i32 %437 = load i32* %0;
    i32 %438 = add i32 %437, i32 1;
    store i32* %0 with i32 %438;
    ubr ^while.body14;
^b24:
    i32 %439 = load i32* %0;
    i32* %440 = getelementptr &(i32* %386)[i32 %439];
    i32 %441 = load i32* %440;
    i1 %442 = scmp eq i32 %441, i32 32;
    cbr i1 %442(prob = 0.5), ^if.then48, ^if.else51;
^b25:
    i32 %443 = load i32* %0;
    i1 %444 = scmp ge i32 %443, i32 %394;
    cbr i1 %444(prob = 0.5), ^if.then, ^b29;
^b26:
    i32 %445 = phi [^if.then47, i32 %463] [^indirect5, i32 %466] [^if.then42, i32 %391];
    i1 %446 = scmp lt i32 %445, i32 %290;
    cbr i1 %446(prob = 0.5), ^if.then50, ^indirect6;
^b27:
    i32 %447 = load i32* %0;
    i32* %448 = getelementptr &(i32* %396)[i32 %447];
    i32 %449 = load i32* %448;
    i1 %450 = scmp eq i32 %449, i32 32;
    cbr i1 %450(prob = 0.5), ^if.then49, ^if.else52;
^if.else48:
    i32 %451 = load i32* %0;
    i32* %452 = getelementptr &(i32* %243)[i32 %451];
    i32 %453 = load i32* %452;
    i1 %454 = scmp eq i32 %453, i32 13;
    cbr i1 %454(prob = 0.5), ^if.then51, ^b13;
^if.else49:
    i32 %455 = load i32* %0;
    i32* %456 = getelementptr &(i32* %301)[i32 %455];
    i32 %457 = load i32* %456;
    i1 %458 = scmp eq i32 %457, i32 10;
    cbr i1 %458(prob = 0.5), ^if.then52, ^if.else53;
^b28:
    i32 %459 = load i32* %0;
    i32 %460 = add i32 %459, i32 5;
    store i32* %0 with i32 %460;
    ret i32 1;
^if.else50:
    ubr ^while.body13;
^indirect4:
    i32 %461 = load i32* %0;
    ubr ^b14;
^if.then47:
    i32 %462 = load i32* %0;
    i32 %463 = add i32 %462, i32 1;
    store i32* %0 with i32 %463;
    ubr ^b26;
^if.then48:
    i32 %464 = load i32* %0;
    i32 %465 = add i32 %464, i32 1;
    store i32* %0 with i32 %465;
    ubr ^while.body10;
^indirect5:
    i32 %466 = load i32* %0;
    ubr ^b26;
^if.then49:
    i32 %467 = load i32* %0;
    i32 %468 = add i32 %467, i32 1;
    store i32* %0 with i32 %468;
    ubr ^while.body11;
^indirect6:
    i32 %469 = load i32* %0;
    ubr ^while.header2;
^if.then50:
    i32 %470 = load i32* %0;
    i32* %471 = getelementptr &(i32* %289)[i32 %470];
    i32 %472 = load i32* %471;
    i1 %473 = scmp eq i32 %472, i32 45;
    cbr i1 %473(prob = 0.5), ^if.then53, ^indirect7;
^if.then51:
    i32 %474 = load i32* %0;
    i32 %475 = add i32 %474, i32 1;
    store i32* %0 with i32 %475;
    ubr ^while.body5;
^if.then52:
    i32 %476 = load i32* %0;
    i32 %477 = add i32 %476, i32 1;
    store i32* %0 with i32 %477;
    ubr ^while.body7;
^if.else51:
    i32 %478 = load i32* %0;
    i32* %479 = getelementptr &(i32* %386)[i32 %478];
    i32 %480 = load i32* %479;
    i1 %481 = scmp eq i32 %480, i32 9;
    cbr i1 %481(prob = 0.5), ^if.then54, ^if.else54;
^b29:
    i32* %482 = getelementptr &(i32* %393)[i32 %443];
    i32 %483 = load i32* %482;
    i1 %484 = scmp neq i32 %483, i32 93;
    cbr i1 %484(prob = 0.5), ^if.then, ^b8;
^if.else52:
    i32 %485 = load i32* %0;
    i32* %486 = getelementptr &(i32* %396)[i32 %485];
    i32 %487 = load i32* %486;
    i1 %488 = scmp eq i32 %487, i32 9;
    cbr i1 %488(prob = 0.5), ^if.then55, ^if.else55;
^while.body14:
    i32* %489 = phi [^if.then64, i32* %489] [^if.then63, i32* %489] [^if.then66, i32* %489] [^if.then59, i32* %489] [^b23, i32* %298];
    i32 %490 = phi [^if.then64, i32 %490] [^if.then63, i32 %490] [^if.then66, i32 %490] [^if.then59, i32 %490] [^b23, i32 %299];
    i32 %491 = phi [^if.then64, i32 %491] [^if.then63, i32 %491] [^if.then66, i32 %491] [^if.then59, i32 %491] [^b23, i32 %299];
    i32* %492 = phi [^if.then64, i32* %492] [^if.then63, i32* %492] [^if.then66, i32* %492] [^if.then59, i32* %492] [^b23, i32* %298];
    i32 %493 = phi [^b23, i32 %438] [^if.then66, i32 %594] [^if.then59, i32 %536] [^if.then63, i32 %560] [^if.then64, i32 %575];
    i32 %494 = phi [^b23, i32 %299] [^if.then66, i32 %491] [^if.then59, i32 %491] [^if.then63, i32 %491] [^if.then64, i32 %491];
    i1 %495 = scmp ge i32 %493, i32 %494;
    cbr i1 %495(prob = 0.5), ^b30, ^b31;
^if.else53:
    i32 %496 = load i32* %0;
    i32* %497 = getelementptr &(i32* %301)[i32 %496];
    i32 %498 = load i32* %497;
    i1 %499 = scmp eq i32 %498, i32 13;
    cbr i1 %499(prob = 0.5), ^if.then56, ^b18;
^if.then53:
    i32* %500 = phi [^while.body16, i32* %509] [^if.then50, i32* %289];
    i32 %501 = phi [^while.body16, i32 %510] [^if.then50, i32 %290];
    i32 %502 = load i32* %0;
    i32 %503 = add i32 %502, i32 1;
    store i32* %0 with i32 %503;
    ubr ^while.header2;
^if.then54:
    i32 %504 = load i32* %0;
    i32 %505 = add i32 %504, i32 1;
    store i32* %0 with i32 %505;
    ubr ^while.body10;
^indirect7:
    i32 %506 = load i32* %0;
    ubr ^while.header2;
^if.then55:
    i32 %507 = load i32* %0;
    i32 %508 = add i32 %507, i32 1;
    store i32* %0 with i32 %508;
    ubr ^while.body11;
^while.header2:
    i32* %509 = phi [^indirect7, i32* %289] [^if.then53, i32* %500] [^indirect6, i32* %289];
    i32 %510 = phi [^indirect7, i32 %290] [^if.then53, i32 %501] [^indirect6, i32 %290];
    i32 %511 = phi [^if.then53, i32 %503] [^indirect7, i32 %506] [^indirect6, i32 %469];
    i1 %512 = scmp lt i32 %511, i32 %510;
    cbr i1 %512(prob = 0.97), ^while.body15, ^b20;
^if.then56:
    i32 %513 = load i32* %0;
    i32 %514 = add i32 %513, i32 1;
    store i32* %0 with i32 %514;
    ubr ^while.body7;
^if.else54:
    i32 %515 = load i32* %0;
    i32* %516 = getelementptr &(i32* %386)[i32 %515];
    i32 %517 = load i32* %516;
    i1 %518 = scmp eq i32 %517, i32 10;
    cbr i1 %518(prob = 0.5), ^if.then57, ^if.else56;
^b30:
    i32 %519 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %489, i32 %490, i32* %0);
    i32* %520 = load i32** %buf1;
    i32 %521 = load i32* %len1;
    i1 %522 = scmp eq i32 %519, i32 0;
    cbr i1 %522(prob = 0.5), ^if.then, ^b32;
^if.else55:
    i32 %523 = load i32* %0;
    i32* %524 = getelementptr &(i32* %396)[i32 %523];
    i32 %525 = load i32* %524;
    i1 %526 = scmp eq i32 %525, i32 10;
    cbr i1 %526(prob = 0.5), ^if.then58, ^if.else57;
^b31:
    i32 %527 = load i32* %0;
    i32* %528 = getelementptr &(i32* %492)[i32 %527];
    i32 %529 = load i32* %528;
    i1 %530 = scmp eq i32 %529, i32 32;
    cbr i1 %530(prob = 0.5), ^if.then59, ^if.else58;
^if.then57:
    i32 %531 = load i32* %0;
    i32 %532 = add i32 %531, i32 1;
    store i32* %0 with i32 %532;
    ubr ^while.body10;
^if.then58:
    i32 %533 = load i32* %0;
    i32 %534 = add i32 %533, i32 1;
    store i32* %0 with i32 %534;
    ubr ^while.body11;
^if.then59:
    i32 %535 = load i32* %0;
    i32 %536 = add i32 %535, i32 1;
    store i32* %0 with i32 %536;
    ubr ^while.body14;
^b32:
    i32 %537 = load i32* %0;
    ubr ^while.body17;
^while.body15:
    i32 %538 = load i32* %0;
    i32* %539 = getelementptr &(i32* %509)[i32 %538];
    i32 %540 = load i32* %539;
    i1 %541 = scmp gt i32 %540, i32 47;
    cbr i1 %541(prob = 0.5), ^if.then61, ^while.body16;
^if.else56:
    i32 %542 = load i32* %0;
    i32* %543 = getelementptr &(i32* %386)[i32 %542];
    i32 %544 = load i32* %543;
    i1 %545 = scmp eq i32 %544, i32 13;
    cbr i1 %545(prob = 0.5), ^if.then60, ^while.body12;
^if.else57:
    i32 %546 = load i32* %0;
    i32* %547 = getelementptr &(i32* %396)[i32 %546];
    i32 %548 = load i32* %547;
    i1 %549 = scmp eq i32 %548, i32 13;
    cbr i1 %549(prob = 0.5), ^if.then62, ^b25;
^if.else58:
    i32 %550 = load i32* %0;
    i32* %551 = getelementptr &(i32* %492)[i32 %550];
    i32 %552 = load i32* %551;
    i1 %553 = scmp eq i32 %552, i32 9;
    cbr i1 %553(prob = 0.5), ^if.then63, ^if.else59;
^if.then60:
    i32 %554 = load i32* %0;
    i32 %555 = add i32 %554, i32 1;
    store i32* %0 with i32 %555;
    ubr ^while.body10;
^if.then61:
    i1 %556 = scmp lt i32 %540, i32 58;
    cbr i1 %556(prob = 0.5), ^while.body16, ^if.else60;
^if.then62:
    i32 %557 = load i32* %0;
    i32 %558 = add i32 %557, i32 1;
    store i32* %0 with i32 %558;
    ubr ^while.body11;
^if.then63:
    i32 %559 = load i32* %0;
    i32 %560 = add i32 %559, i32 1;
    store i32* %0 with i32 %560;
    ubr ^while.body14;
^while.body16:
    i32 %561 = phi [^while.body15, i32 0] [^if.then61, i32 1] [^if.else60, i32 0];
    i1 %562 = scmp neq i32 %561, i32 1;
    cbr i1 %562(prob = 0.5), ^b20, ^if.then53;
^while.body17:
    i32* %563 = phi [^if.then68, i32* %563] [^if.then67, i32* %563] [^if.then71, i32* %563] [^if.then65, i32* %563] [^b32, i32* %520];
    i32 %564 = phi [^if.then68, i32 %564] [^if.then67, i32 %564] [^if.then71, i32 %564] [^if.then65, i32 %564] [^b32, i32 %521];
    i32 %565 = phi [^if.then68, i32 %565] [^if.then67, i32 %565] [^if.then71, i32 %565] [^if.then65, i32 %565] [^b32, i32 %521];
    i32* %566 = phi [^if.then68, i32* %566] [^if.then67, i32* %566] [^if.then71, i32* %566] [^if.then65, i32* %566] [^b32, i32* %520];
    i32 %567 = phi [^b32, i32 %537] [^if.then68, i32 %624] [^if.then71, i32 %644] [^if.then65, i32 %591] [^if.then67, i32 %600];
    i32 %568 = phi [^b32, i32 %521] [^if.then68, i32 %565] [^if.then71, i32 %565] [^if.then65, i32 %565] [^if.then67, i32 %565];
    i1 %569 = scmp ge i32 %567, i32 %568;
    cbr i1 %569(prob = 0.5), ^b33, ^b34;
^if.else59:
    i32 %570 = load i32* %0;
    i32* %571 = getelementptr &(i32* %492)[i32 %570];
    i32 %572 = load i32* %571;
    i1 %573 = scmp eq i32 %572, i32 10;
    cbr i1 %573(prob = 0.5), ^if.then64, ^if.else61;
^if.else60:
    ubr ^while.body16;
^if.then64:
    i32 %574 = load i32* %0;
    i32 %575 = add i32 %574, i32 1;
    store i32* %0 with i32 %575;
    ubr ^while.body14;
^b33:
    i32 %576 = load i32* %0;
    i32* %577 = getelementptr &(i32* %563)[i32 %576];
    i32 %578 = load i32* %577;
    i1 %579 = scmp eq i32 %578, i32 44;
    cbr i1 %579(prob = 0.97), ^while.body18, ^b35;
^b34:
    i32 %580 = load i32* %0;
    i32* %581 = getelementptr &(i32* %566)[i32 %580];
    i32 %582 = load i32* %581;
    i1 %583 = scmp eq i32 %582, i32 32;
    cbr i1 %583(prob = 0.5), ^if.then65, ^if.else62;
^if.else61:
    i32 %584 = load i32* %0;
    i32* %585 = getelementptr &(i32* %492)[i32 %584];
    i32 %586 = load i32* %585;
    i1 %587 = scmp eq i32 %586, i32 13;
    cbr i1 %587(prob = 0.5), ^if.then66, ^b30;
^while.body18:
    i32 %588 = load i32* %0;
    i32 %589 = add i32 %588, i32 1;
    store i32* %0 with i32 %589;
    ubr ^while.body19;
^if.then65:
    i32 %590 = load i32* %0;
    i32 %591 = add i32 %590, i32 1;
    store i32* %0 with i32 %591;
    ubr ^while.body17;
^b35:
    i32 %592 = load i32* %0;
    ubr ^while.body20;
^if.then66:
    i32 %593 = load i32* %0;
    i32 %594 = add i32 %593, i32 1;
    store i32* %0 with i32 %594;
    ubr ^while.body14;
^if.else62:
    i32 %595 = load i32* %0;
    i32* %596 = getelementptr &(i32* %566)[i32 %595];
    i32 %597 = load i32* %596;
    i1 %598 = scmp eq i32 %597, i32 9;
    cbr i1 %598(prob = 0.5), ^if.then67, ^if.else63;
^if.then67:
    i32 %599 = load i32* %0;
    i32 %600 = add i32 %599, i32 1;
    store i32* %0 with i32 %600;
    ubr ^while.body17;
^while.body19:
    i32* %601 = phi [^if.then74, i32* %601] [^if.then72, i32* %601] [^if.then76, i32* %601] [^if.then69, i32* %601] [^while.body18, i32* %563];
    i32 %602 = phi [^if.then74, i32 %602] [^if.then72, i32 %602] [^if.then76, i32 %602] [^if.then69, i32 %602] [^while.body18, i32 %564];
    i32 %603 = phi [^if.then74, i32 %603] [^if.then72, i32 %603] [^if.then76, i32 %603] [^if.then69, i32 %603] [^while.body18, i32 %564];
    i32* %604 = phi [^if.then74, i32* %604] [^if.then72, i32* %604] [^if.then76, i32* %604] [^if.then69, i32* %604] [^while.body18, i32* %563];
    i32 %605 = phi [^while.body18, i32 %589] [^if.then74, i32 %669] [^if.then72, i32 %657] [^if.then76, i32 %681] [^if.then69, i32 %640];
    i32 %606 = phi [^while.body18, i32 %564] [^if.then74, i32 %603] [^if.then72, i32 %603] [^if.then76, i32 %603] [^if.then69, i32 %603];
    i1 %607 = scmp ge i32 %605, i32 %606;
    cbr i1 %607(prob = 0.5), ^while.body21, ^b36;
^while.body20:
    i32* %608 = phi [^if.then75, i32* %608] [^if.then73, i32* %608] [^if.then77, i32* %608] [^if.then70, i32* %608] [^b35, i32* %563];
    i32 %609 = phi [^if.then75, i32 %609] [^if.then73, i32 %609] [^if.then77, i32 %609] [^if.then70, i32 %609] [^b35, i32 %564];
    i32 %610 = phi [^if.then75, i32 %610] [^if.then73, i32 %610] [^if.then77, i32 %610] [^if.then70, i32 %610] [^b35, i32 %564];
    i32* %611 = phi [^if.then75, i32* %611] [^if.then73, i32* %611] [^if.then77, i32* %611] [^if.then70, i32* %611] [^b35, i32* %563];
    i32 %612 = phi [^b35, i32 %592] [^if.then75, i32 %671] [^if.then73, i32 %659] [^if.then77, i32 %683] [^if.then70, i32 %642];
    i32 %613 = phi [^b35, i32 %564] [^if.then75, i32 %610] [^if.then73, i32 %610] [^if.then77, i32 %610] [^if.then70, i32 %610];
    i1 %614 = scmp ge i32 %612, i32 %613;
    cbr i1 %614(prob = 0.5), ^b37, ^b38;
^if.else63:
    i32 %615 = load i32* %0;
    i32* %616 = getelementptr &(i32* %566)[i32 %615];
    i32 %617 = load i32* %616;
    i1 %618 = scmp eq i32 %617, i32 10;
    cbr i1 %618(prob = 0.5), ^if.then68, ^if.else64;
^while.body21:
    i32 %619 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %601, i32 %602, i32* %0);
    i32* %620 = load i32** %buf1;
    i32 %621 = load i32* %len1;
    i1 %622 = scmp eq i32 %619, i32 0;
    cbr i1 %622(prob = 0.5), ^if.then, ^b11;
^if.then68:
    i32 %623 = load i32* %0;
    i32 %624 = add i32 %623, i32 1;
    store i32* %0 with i32 %624;
    ubr ^while.body17;
^b36:
    i32 %625 = load i32* %0;
    i32* %626 = getelementptr &(i32* %604)[i32 %625];
    i32 %627 = load i32* %626;
    i1 %628 = scmp eq i32 %627, i32 32;
    cbr i1 %628(prob = 0.5), ^if.then69, ^if.else65;
^b37:
    i32 %629 = load i32* %0;
    i1 %630 = scmp ge i32 %629, i32 %609;
    cbr i1 %630(prob = 0.5), ^if.then, ^if.else66;
^b38:
    i32 %631 = load i32* %0;
    i32* %632 = getelementptr &(i32* %611)[i32 %631];
    i32 %633 = load i32* %632;
    i1 %634 = scmp eq i32 %633, i32 32;
    cbr i1 %634(prob = 0.5), ^if.then70, ^if.else67;
^if.else64:
    i32 %635 = load i32* %0;
    i32* %636 = getelementptr &(i32* %566)[i32 %635];
    i32 %637 = load i32* %636;
    i1 %638 = scmp eq i32 %637, i32 13;
    cbr i1 %638(prob = 0.5), ^if.then71, ^b33;
^if.then69:
    i32 %639 = load i32* %0;
    i32 %640 = add i32 %639, i32 1;
    store i32* %0 with i32 %640;
    ubr ^while.body19;
^if.then70:
    i32 %641 = load i32* %0;
    i32 %642 = add i32 %641, i32 1;
    store i32* %0 with i32 %642;
    ubr ^while.body20;
^if.then71:
    i32 %643 = load i32* %0;
    i32 %644 = add i32 %643, i32 1;
    store i32* %0 with i32 %644;
    ubr ^while.body17;
^if.else65:
    i32 %645 = load i32* %0;
    i32* %646 = getelementptr &(i32* %604)[i32 %645];
    i32 %647 = load i32* %646;
    i1 %648 = scmp eq i32 %647, i32 9;
    cbr i1 %648(prob = 0.5), ^if.then72, ^if.else68;
^if.else66:
    i32* %649 = getelementptr &(i32* %608)[i32 %629];
    i32 %650 = load i32* %649;
    i1 %651 = scmp neq i32 %650, i32 125;
    cbr i1 %651(prob = 0.5), ^if.then, ^b8;
^if.else67:
    i32 %652 = load i32* %0;
    i32* %653 = getelementptr &(i32* %611)[i32 %652];
    i32 %654 = load i32* %653;
    i1 %655 = scmp eq i32 %654, i32 9;
    cbr i1 %655(prob = 0.5), ^if.then73, ^if.else69;
^if.then72:
    i32 %656 = load i32* %0;
    i32 %657 = add i32 %656, i32 1;
    store i32* %0 with i32 %657;
    ubr ^while.body19;
^if.then73:
    i32 %658 = load i32* %0;
    i32 %659 = add i32 %658, i32 1;
    store i32* %0 with i32 %659;
    ubr ^while.body20;
^if.else68:
    i32 %660 = load i32* %0;
    i32* %661 = getelementptr &(i32* %604)[i32 %660];
    i32 %662 = load i32* %661;
    i1 %663 = scmp eq i32 %662, i32 10;
    cbr i1 %663(prob = 0.5), ^if.then74, ^if.else70;
^if.else69:
    i32 %664 = load i32* %0;
    i32* %665 = getelementptr &(i32* %611)[i32 %664];
    i32 %666 = load i32* %665;
    i1 %667 = scmp eq i32 %666, i32 10;
    cbr i1 %667(prob = 0.5), ^if.then75, ^if.else71;
^if.then74:
    i32 %668 = load i32* %0;
    i32 %669 = add i32 %668, i32 1;
    store i32* %0 with i32 %669;
    ubr ^while.body19;
^if.then75:
    i32 %670 = load i32* %0;
    i32 %671 = add i32 %670, i32 1;
    store i32* %0 with i32 %671;
    ubr ^while.body20;
^if.else70:
    i32 %672 = load i32* %0;
    i32* %673 = getelementptr &(i32* %604)[i32 %672];
    i32 %674 = load i32* %673;
    i1 %675 = scmp eq i32 %674, i32 13;
    cbr i1 %675(prob = 0.5), ^if.then76, ^while.body21;
^if.else71:
    i32 %676 = load i32* %0;
    i32* %677 = getelementptr &(i32* %611)[i32 %676];
    i32 %678 = load i32* %677;
    i1 %679 = scmp eq i32 %678, i32 13;
    cbr i1 %679(prob = 0.5), ^if.then77, ^b37;
^if.then76:
    i32 %680 = load i32* %0;
    i32 %681 = add i32 %680, i32 1;
    store i32* %0 with i32 %681;
    ubr ^while.body19;
^if.then77:
    i32 %682 = load i32* %0;
    i32 %683 = add i32 %682, i32 1;
    store i32* %0 with i32 %683;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    i32* %i = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %8] [^entry, i32 %0];
    i32 %2 = phi [^while.body, i32 %7] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 0];
    i32 %4 = phi [^while.body, i32 %8] [^entry, i32 %0];
    i1 %5 = scmp neq i32 %4, i32 35;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %6 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %2];
    store i32* %6 with i32 %1;
    i32 %7 = add i32 %2, i32 1;
    store i32* %i with i32 %7;
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^b:
    i32* %9 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body1:
    i32 %10 = phi [^if.then3, i32 %10] [^if.then1, i32 %10] [^if.then6, i32 %10] [^if.then, i32 %10] [^b, i32 %2];
    i32 %11 = phi [^if.then3, i32 %40] [^if.then1, i32 %32] [^if.then6, i32 %45] [^if.then, i32 %23] [^b, i32 %3];
    i32 %12 = phi [^if.then3, i32 %12] [^if.then1, i32 %12] [^if.then6, i32 %12] [^if.then, i32 %12] [^b, i32 %2];
    i32* %13 = phi [^if.then3, i32* %13] [^if.then1, i32* %13] [^if.then6, i32* %13] [^if.then, i32* %13] [^b, i32* %9];
    i32 %14 = phi [^b, i32 %3] [^if.then3, i32 %40] [^if.then6, i32 %45] [^if.then, i32 %23] [^if.then1, i32 %32];
    i32 %15 = phi [^b, i32 %2] [^if.then3, i32 %12] [^if.then6, i32 %12] [^if.then, i32 %12] [^if.then1, i32 %12];
    i1 %16 = scmp ge i32 %14, i32 %15;
    cbr i1 %16(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %17 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %9, i32 %10, i32* %pos);
    i32 %18 = load i32* %i;
    i32 %19 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32* %20 = getelementptr &(i32* %13)[i32 %11];
    i32 %21 = load i32* %20;
    i1 %22 = scmp eq i32 %21, i32 32;
    cbr i1 %22(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %23 = add i32 %11, i32 1;
    store i32* %pos with i32 %23;
    ubr ^while.body1;
^while.body2:
    i32 %24 = phi [^if.then7, i32 %24] [^if.then5, i32 %24] [^if.then8, i32 %24] [^if.then2, i32 %24] [^b1, i32 %17];
    i32 %25 = phi [^if.then7, i32 %48] [^if.then5, i32 %44] [^if.then8, i32 %51] [^if.then2, i32 %39] [^b1, i32 %19];
    i32 %26 = phi [^if.then7, i32 %26] [^if.then5, i32 %26] [^if.then8, i32 %26] [^if.then2, i32 %26] [^b1, i32 %18];
    i32* %27 = phi [^if.then7, i32* %27] [^if.then5, i32* %27] [^if.then8, i32* %27] [^if.then2, i32* %27] [^b1, i32* %9];
    i32 %28 = phi [^b1, i32 %19] [^if.then7, i32 %48] [^if.then8, i32 %51] [^if.then2, i32 %39] [^if.then5, i32 %44];
    i32 %29 = phi [^b1, i32 %18] [^if.then7, i32 %26] [^if.then8, i32 %26] [^if.then2, i32 %26] [^if.then5, i32 %26];
    i1 %30 = scmp ge i32 %28, i32 %29;
    cbr i1 %30(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %31 = scmp eq i32 %21, i32 9;
    cbr i1 %31(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %32 = add i32 %11, i32 1;
    store i32* %pos with i32 %32;
    ubr ^while.body1;
^b3:
    i1 %33 = scmp neq i32 %24, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then4, ^if.else4;
^b4:
    i32* %34 = getelementptr &(i32* %27)[i32 %25];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 32;
    cbr i1 %36(prob = 0.5), ^if.then2, ^if.else2;
^if.else1:
    i32 %37 = load i32* %20;
    i1 %38 = scmp eq i32 %37, i32 10;
    cbr i1 %38(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    i32 %39 = add i32 %25, i32 1;
    store i32* %pos with i32 %39;
    ubr ^while.body2;
^if.then3:
    i32 %40 = add i32 %11, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body1;
^if.else2:
    i1 %41 = scmp eq i32 %35, i32 9;
    cbr i1 %41(prob = 0.5), ^if.then5, ^if.else5;
^if.else3:
    i32 %42 = load i32* %20;
    i1 %43 = scmp eq i32 %42, i32 13;
    cbr i1 %43(prob = 0.5), ^if.then6, ^b1;
^if.then4:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.else4:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 1;
^if.then5:
    i32 %44 = add i32 %25, i32 1;
    store i32* %pos with i32 %44;
    ubr ^while.body2;
^if.then6:
    i32 %45 = add i32 %11, i32 1;
    store i32* %pos with i32 %45;
    ubr ^while.body1;
^if.else5:
    i32 %46 = load i32* %34;
    i1 %47 = scmp eq i32 %46, i32 10;
    cbr i1 %47(prob = 0.5), ^if.then7, ^if.else6;
^if.then7:
    i32 %48 = add i32 %25, i32 1;
    store i32* %pos with i32 %48;
    ubr ^while.body2;
^if.else6:
    i32 %49 = load i32* %34;
    i1 %50 = scmp eq i32 %49, i32 13;
    cbr i1 %50(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %51 = add i32 %25, i32 1;
    store i32* %pos with i32 %51;
    ubr ^while.body2;
}
