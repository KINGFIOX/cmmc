internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^if.then, i32 %11] [^if.then3, i32 %20] [^if.then8, i32 %37] [^if.then11, i32 %50];
    i1 %4 = scmp ge i32 %3, i32 %len;
    cbr i1 %4(prob = 0.5), ^b1, ^b2;
^b:
    i32 %5 = phi [^entry, i32 0] [^if.then2, i32 %18] [^if.then6, i32 %34] [^b3, i32 0] [^if.then9, i32 %46] [^if.else8, i32 0] [^if.then14, i32 0] [^b6, i32 0] [^if.then15, i32 %78] [^if.then17, i32 0] [^if.else14, i32 0] [^if.then20, i32 %108] [^b8, i32 0] [^if.else16, i32 0] [^if.then22, i32 0] [^if.else18, i32 0] [^if.then23, i32 1] [^b10, i32 1] [^if.then27, i32 %147] [^b11, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^if.then29, i32 0] [^if.then30, i32 1] [^if.then33, i32 %185] [^b14, i32 1] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^if.then38, i32 %224] [^if.then39, i32 1] [^if.else31, i32 0] [^if.else32, i32 0] [^if.else33, i32 0] [^if.else34, i32 0] [^b17, i32 0] [^if.then43, i32 %270] [^b19, i32 1] [^if.else36, i32 0] [^if.else37, i32 0] [^b20, i32 0] [^b22, i32 0] [^if.else40, i32 0] [^if.else41, i32 0] [^while.body11, i32 0] [^b27, i32 0] [^b28, i32 1] [^while.header2, i32 1] [^b29, i32 0] [^b31, i32 1] [^b34, i32 0] [^while.body18, i32 0] [^if.else58, i32 0] [^b37, i32 0] [^b39, i32 0] [^b41, i32 0];
    ret i32 %5;
^b1:
    i1 %6 = scmp eq i32 %type, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %7 = load i32* %0;
    i32* %8 = getelementptr &(i32* %buf)[i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp eq i32 %9, i32 32;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %11 = add i32 %7, i32 1;
    store i32* %0 with i32 %11;
    ubr ^while.body;
^if.then1:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 123;
    cbr i1 %15(prob = 0.5), ^if.then2, ^if.else2;
^if.else:
    i1 %16 = scmp eq i32 %type, i32 1;
    cbr i1 %16(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i1 %17 = scmp eq i32 %9, i32 9;
    cbr i1 %17(prob = 0.5), ^if.then3, ^if.else4;
^if.then2:
    i32 %18 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then3:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.body;
^if.else2:
    i1 %21 = scmp eq i32 %14, i32 91;
    cbr i1 %21(prob = 0.5), ^if.then6, ^if.else5;
^if.then4:
    i32 %22 = load i32* %0;
    i32* %23 = getelementptr &(i32* %buf)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 43;
    i1 %26 = scmp eq i32 %24, i32 45;
    i1 %27 = or i1 %26, i1 %25;
    cbr i1 %27(prob = 0.75), ^if.then5, ^b3;
^if.else3:
    i1 %28 = scmp eq i32 %type, i32 2;
    cbr i1 %28(prob = 0.5), ^if.then7, ^if.else6;
^if.else4:
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %buf)[i32 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 10;
    cbr i1 %32(prob = 0.5), ^if.then8, ^if.else7;
^if.then5:
    i32 %33 = add i32 %22, i32 1;
    store i32* %0 with i32 %33;
    ubr ^b3;
^if.then6:
    i32 %34 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then7:
    i32 %35 = load i32* %0;
    i32 %36 = add i32 %35, i32 1;
    store i32* %0 with i32 %36;
    ubr ^while.header;
^if.then8:
    i32 %37 = add i32 %29, i32 1;
    store i32* %0 with i32 %37;
    ubr ^while.body;
^if.else5:
    i32 %38 = load i32* %0;
    i32* %39 = getelementptr &(i32* %buf)[i32 %38];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %40, i32 34;
    cbr i1 %41(prob = 0.5), ^if.then9, ^entry1;
^b3:
    i32 %42 = phi [^if.then4, i32 %22] [^if.then5, i32 %33];
    i1 %43 = scmp ge i32 %42, i32 %len;
    cbr i1 %43(prob = 0.5), ^b, ^if.else8;
^if.else6:
    i1 %44 = scmp eq i32 %type, i32 3;
    cbr i1 %44(prob = 0.5), ^if.then10, ^if.else9;
^if.else7:
    i1 %45 = scmp eq i32 %31, i32 13;
    cbr i1 %45(prob = 0.5), ^if.then11, ^b1;
^if.then9:
    i32 %46 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then10:
    i32 %47 = load i32* %0;
    i32 %48 = add i32 %47, i32 1;
    store i32* %0 with i32 %48;
    ubr ^while.body2;
^if.then11:
    i32 %49 = load i32* %0;
    i32 %50 = add i32 %49, i32 1;
    store i32* %0 with i32 %50;
    ubr ^while.body;
^while.header:
    i32 %51 = phi [^if.then7, i32 %36] [^b5, i32 %75];
    i1 %52 = scmp lt i32 %51, i32 %len;
    cbr i1 %52(prob = 0.97), ^while.body1, ^indirect;
^if.else8:
    i32 %53 = load i32* %0;
    i32* %54 = getelementptr &(i32* %buf)[i32 %53];
    i32 %55 = load i32* %54;
    i1 %56 = scmp gt i32 %55, i32 47;
    cbr i1 %56(prob = 0.5), ^if.then14, ^b;
^entry1:
    i1 %57 = scmp gt i32 %40, i32 47;
    cbr i1 %57(prob = 0.5), ^if.then13, ^b4;
^if.else9:
    i1 %58 = scmp eq i32 %type, i32 4;
    cbr i1 %58(prob = 0.5), ^if.then12, ^if.else10;
^indirect:
    i32 %59 = load i32* %0;
    ubr ^b6;
^while.body1:
    i32 %60 = load i32* %0;
    i32* %61 = getelementptr &(i32* %buf)[i32 %60];
    i32 %62 = load i32* %61;
    i1 %63 = scmp eq i32 %62, i32 34;
    cbr i1 %63(prob = 0.5), ^b6, ^b5;
^if.then12:
    i32 %64 = load i32* %0;
    i32 %65 = add i32 %64, i32 1;
    store i32* %0 with i32 %65;
    ubr ^while.body3;
^if.then13:
    i1 %66 = scmp lt i32 %40, i32 58;
    cbr i1 %66(prob = 0.5), ^b4, ^if.else11;
^while.body2:
    i32 %67 = phi [^if.then10, i32 %48] [^if.then18, i32 %101] [^if.then24, i32 %141] [^if.then31, i32 %181] [^if.then35, i32 %215];
    i1 %68 = scmp ge i32 %67, i32 %len;
    cbr i1 %68(prob = 0.5), ^if.then16, ^b7;
^if.then14:
    i1 %69 = scmp gt i32 %55, i32 57;
    cbr i1 %69(prob = 0.5), ^b, ^while.header1;
^b4:
    i32 %70 = phi [^entry1, i32 0] [^if.then13, i32 1] [^if.else11, i32 0];
    i1 %71 = scmp eq i32 %70, i32 1;
    cbr i1 %71(prob = 0.5), ^if.then15, ^if.else12;
^if.else10:
    i1 %72 = scmp eq i32 %type, i32 5;
    cbr i1 %72(prob = 0.5), ^if.then17, ^if.else13;
^b5:
    i1 %73 = scmp eq i32 %62, i32 92;
    i32 %74 = select i1 %73 ? i32 2 : i32 1;
    i32 %75 = add i32 %74, i32 %60;
    store i32* %0 with i32 %75;
    ubr ^while.header;
^b6:
    i32 %76 = phi [^indirect, i32 %59] [^while.body1, i32 %60];
    i1 %77 = scmp ge i32 %76, i32 %len;
    cbr i1 %77(prob = 0.5), ^b, ^if.else14;
^if.else11:
    ubr ^b4;
^if.then15:
    i32 %78 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then16:
    i32 %79 = load i32* %0;
    i1 %80 = scmp lt i32 %79, i32 %len;
    cbr i1 %80(prob = 0.5), ^if.then19, ^b8;
^b7:
    i32 %81 = load i32* %0;
    i32* %82 = getelementptr &(i32* %buf)[i32 %81];
    i32 %83 = load i32* %82;
    i1 %84 = scmp eq i32 %83, i32 32;
    cbr i1 %84(prob = 0.5), ^if.then18, ^if.else15;
^while.body3:
    i32 %85 = phi [^if.then12, i32 %65] [^if.then25, i32 %142] [^if.then32, i32 %183] [^if.then36, i32 %216] [^if.then41, i32 %263];
    i1 %86 = scmp ge i32 %85, i32 %len;
    cbr i1 %86(prob = 0.5), ^if.then21, ^b9;
^while.header1:
    i32 %87 = phi [^if.then14, i32 %53] [^b13, i32 %180];
    i1 %88 = scmp lt i32 %87, i32 %len;
    cbr i1 %88(prob = 0.97), ^while.body4, ^indirect1;
^if.then17:
    i32* %89 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %89 with i32 116;
    i32* %90 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %90 with i32 114;
    i32* %91 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %91 with i32 117;
    i32* %92 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %92 with i32 101;
    i32 %93 = load i32* %0;
    i32 %94 = add i32 %93, i32 3;
    i1 %95 = scmp ge i32 %94, i32 %len;
    cbr i1 %95(prob = 0.5), ^b, ^if.else16;
^if.else12:
    i32 %96 = load i32* %0;
    i32* %97 = getelementptr &(i32* %buf)[i32 %96];
    i32 %98 = load i32* %97;
    i1 %99 = scmp eq i32 %98, i32 43;
    cbr i1 %99(prob = 0.5), ^if.then20, ^if.else17;
^if.else13:
    i1 %100 = scmp eq i32 %type, i32 6;
    cbr i1 %100(prob = 0.5), ^if.then22, ^if.else18;
^if.then18:
    i32 %101 = add i32 %81, i32 1;
    store i32* %0 with i32 %101;
    ubr ^while.body2;
^if.else14:
    i32* %102 = getelementptr &(i32* %buf)[i32 %76];
    i32 %103 = load i32* %102;
    i1 %104 = scmp neq i32 %103, i32 34;
    cbr i1 %104(prob = 0.5), ^b, ^b10;
^if.then19:
    i32* %105 = getelementptr &(i32* %buf)[i32 %79];
    i32 %106 = load i32* %105;
    i1 %107 = scmp eq i32 %106, i32 93;
    cbr i1 %107(prob = 0.5), ^if.then23, ^b8;
^if.then20:
    i32 %108 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^indirect1:
    i32 %109 = load i32* %0;
    ubr ^b12;
^if.then21:
    i32 %110 = load i32* %0;
    i1 %111 = scmp lt i32 %110, i32 %len;
    cbr i1 %111(prob = 0.5), ^if.then26, ^b11;
^b8:
    i32 %112 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %113 = scmp eq i32 %112, i32 0;
    cbr i1 %113(prob = 0.5), ^b, ^entry2;
^while.body4:
    i32 %114 = load i32* %0;
    i32* %115 = getelementptr &(i32* %buf)[i32 %114];
    i32 %116 = load i32* %115;
    i1 %117 = scmp gt i32 %116, i32 47;
    cbr i1 %117(prob = 0.5), ^if.then28, ^b12;
^if.else15:
    i1 %118 = scmp eq i32 %83, i32 9;
    cbr i1 %118(prob = 0.5), ^if.then24, ^if.else19;
^b9:
    i32 %119 = load i32* %0;
    i32* %120 = getelementptr &(i32* %buf)[i32 %119];
    i32 %121 = load i32* %120;
    i1 %122 = scmp eq i32 %121, i32 32;
    cbr i1 %122(prob = 0.5), ^if.then25, ^if.else20;
^if.else16:
    i32* %123 = getelementptr &(i32* %buf)[i32 %93];
    i32 %124 = load i32* %123;
    i1 %125 = scmp neq i32 %124, i32 116;
    cbr i1 %125(prob = 0.5), ^b, ^if.else21;
^if.then22:
    i32* %126 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %126 with i32 102;
    i32* %127 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %127 with i32 97;
    i32* %128 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %128 with i32 108;
    i32* %129 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %129 with i32 115;
    i32* %130 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %130 with i32 101;
    i32 %131 = load i32* %0;
    i32 %132 = add i32 %131, i32 4;
    i1 %133 = scmp ge i32 %132, i32 %len;
    cbr i1 %133(prob = 0.5), ^b, ^if.else22;
^if.else17:
    i1 %134 = scmp eq i32 %98, i32 45;
    cbr i1 %134(prob = 0.5), ^if.then27, ^if.else23;
^if.else18:
    i1 %135 = scmp eq i32 %type, i32 7;
    cbr i1 %135(prob = 0.5), ^if.then29, ^b;
^if.then23:
    i32 %136 = load i32* %0;
    i32 %137 = add i32 %136, i32 1;
    store i32* %0 with i32 %137;
    ubr ^b;
^b10:
    i32 %138 = load i32* %0;
    i32 %139 = add i32 %138, i32 1;
    store i32* %0 with i32 %139;
    ubr ^b;
^if.then24:
    i32 %140 = load i32* %0;
    i32 %141 = add i32 %140, i32 1;
    store i32* %0 with i32 %141;
    ubr ^while.body2;
^if.then25:
    i32 %142 = add i32 %119, i32 1;
    store i32* %0 with i32 %142;
    ubr ^while.body3;
^entry2:
    i32 %143 = load i32* %0;
    ubr ^while.body5;
^if.then26:
    i32* %144 = getelementptr &(i32* %buf)[i32 %110];
    i32 %145 = load i32* %144;
    i1 %146 = scmp eq i32 %145, i32 125;
    cbr i1 %146(prob = 0.5), ^if.then30, ^b11;
^if.then27:
    i32 %147 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then28:
    i1 %148 = scmp gt i32 %116, i32 57;
    cbr i1 %148(prob = 0.5), ^b12, ^b13;
^b11:
    i32 %149 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %150 = scmp eq i32 %149, i32 0;
    cbr i1 %150(prob = 0.5), ^b, ^entry3;
^b12:
    i32 %151 = phi [^indirect1, i32 %109] [^while.body4, i32 %114] [^if.then28, i32 %114];
    i1 %152 = scmp lt i32 %151, i32 %len;
    cbr i1 %152(prob = 0.5), ^if.then34, ^b14;
^if.else19:
    i32 %153 = load i32* %0;
    i32* %154 = getelementptr &(i32* %buf)[i32 %153];
    i32 %155 = load i32* %154;
    i1 %156 = scmp eq i32 %155, i32 10;
    cbr i1 %156(prob = 0.5), ^if.then31, ^if.else24;
^if.else20:
    i1 %157 = scmp eq i32 %121, i32 9;
    cbr i1 %157(prob = 0.5), ^if.then32, ^if.else25;
^if.else21:
    i32 %158 = load i32* %0;
    i32 %159 = add i32 %158, i32 1;
    i32* %160 = getelementptr &(i32* %buf)[i32 %159];
    i32 %161 = load i32* %160;
    i32 %162 = load i32* %90;
    i1 %163 = scmp neq i32 %161, i32 %162;
    cbr i1 %163(prob = 0.5), ^b, ^if.else26;
^if.else22:
    i32* %164 = getelementptr &(i32* %buf)[i32 %131];
    i32 %165 = load i32* %164;
    i1 %166 = scmp neq i32 %165, i32 102;
    cbr i1 %166(prob = 0.5), ^b, ^if.else27;
^if.then29:
    i32* %167 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %167 with i32 110;
    i32* %168 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %168 with i32 117;
    i32* %169 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %169 with i32 108;
    i32* %170 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %170 with i32 108;
    i32 %171 = load i32* %0;
    i32 %172 = add i32 %171, i32 3;
    i1 %173 = scmp ge i32 %172, i32 %len;
    cbr i1 %173(prob = 0.5), ^b, ^if.else28;
^if.else23:
    i32 %174 = load i32* %0;
    i32* %175 = getelementptr &(i32* %buf)[i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = scmp eq i32 %176, i32 116;
    cbr i1 %177(prob = 0.5), ^if.then33, ^if.else29;
^if.then30:
    i32 %178 = load i32* %0;
    i32 %179 = add i32 %178, i32 1;
    store i32* %0 with i32 %179;
    ubr ^b;
^b13:
    i32 %180 = add i32 %114, i32 1;
    store i32* %0 with i32 %180;
    ubr ^while.header1;
^if.then31:
    i32 %181 = add i32 %153, i32 1;
    store i32* %0 with i32 %181;
    ubr ^while.body2;
^if.then32:
    i32 %182 = load i32* %0;
    i32 %183 = add i32 %182, i32 1;
    store i32* %0 with i32 %183;
    ubr ^while.body3;
^entry3:
    i32 %184 = load i32* %0;
    ubr ^while.body6;
^if.then33:
    i32 %185 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.body5:
    i32 %186 = phi [^entry2, i32 %143] [^if.then40, i32 %258] [^if.then44, i32 %290] [^if.then50, i32 %334] [^if.then56, i32 %365];
    i1 %187 = scmp ge i32 %186, i32 %len;
    cbr i1 %187(prob = 0.5), ^b15, ^b16;
^if.then34:
    i32* %188 = getelementptr &(i32* %buf)[i32 %151];
    i32 %189 = load i32* %188;
    i1 %190 = scmp eq i32 %189, i32 46;
    cbr i1 %190(prob = 0.5), ^if.then37, ^indirect2;
^b14:
    i32 %191 = phi [^b12, i32 %151] [^indirect2, i32 %213] [^if.then37, i32 %222] [^indirect3, i32 %329];
    i1 %192 = scmp lt i32 %191, i32 %len;
    cbr i1 %192(prob = 0.5), ^if.then39, ^b;
^if.else24:
    i1 %193 = scmp eq i32 %155, i32 13;
    cbr i1 %193(prob = 0.5), ^if.then35, ^if.then16;
^if.else25:
    i32 %194 = load i32* %0;
    i32* %195 = getelementptr &(i32* %buf)[i32 %194];
    i32 %196 = load i32* %195;
    i1 %197 = scmp eq i32 %196, i32 10;
    cbr i1 %197(prob = 0.5), ^if.then36, ^if.else30;
^if.else26:
    i32 %198 = add i32 %158, i32 2;
    i32* %199 = getelementptr &(i32* %buf)[i32 %198];
    i32 %200 = load i32* %199;
    i32 %201 = load i32* %91;
    i1 %202 = scmp neq i32 %200, i32 %201;
    cbr i1 %202(prob = 0.5), ^b, ^if.else31;
^if.else27:
    i32 %203 = load i32* %0;
    i32 %204 = add i32 %203, i32 1;
    i32* %205 = getelementptr &(i32* %buf)[i32 %204];
    i32 %206 = load i32* %205;
    i32 %207 = load i32* %127;
    i1 %208 = scmp neq i32 %206, i32 %207;
    cbr i1 %208(prob = 0.5), ^b, ^if.else32;
^if.else28:
    i32* %209 = getelementptr &(i32* %buf)[i32 %171];
    i32 %210 = load i32* %209;
    i1 %211 = scmp neq i32 %210, i32 110;
    cbr i1 %211(prob = 0.5), ^b, ^if.else33;
^if.else29:
    i1 %212 = scmp eq i32 %176, i32 102;
    cbr i1 %212(prob = 0.5), ^if.then38, ^if.else34;
^indirect2:
    i32 %213 = load i32* %0;
    ubr ^b14;
^if.then35:
    i32 %214 = load i32* %0;
    i32 %215 = add i32 %214, i32 1;
    store i32* %0 with i32 %215;
    ubr ^while.body2;
^if.then36:
    i32 %216 = add i32 %194, i32 1;
    store i32* %0 with i32 %216;
    ubr ^while.body3;
^b15:
    i32 %217 = load i32* %0;
    i32* %218 = getelementptr &(i32* %buf)[i32 %217];
    i32 %219 = load i32* %218;
    i1 %220 = scmp eq i32 %219, i32 44;
    cbr i1 %220(prob = 0.97), ^while.body7, ^while.body9;
^if.then37:
    i32 %221 = load i32* %0;
    i32 %222 = add i32 %221, i32 1;
    store i32* %0 with i32 %222;
    i1 %223 = scmp lt i32 %222, i32 %len;
    cbr i1 %223(prob = 0.97), ^while.body8, ^b14;
^if.then38:
    i32 %224 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b16:
    i32 %225 = load i32* %0;
    i32* %226 = getelementptr &(i32* %buf)[i32 %225];
    i32 %227 = load i32* %226;
    i1 %228 = scmp eq i32 %227, i32 32;
    cbr i1 %228(prob = 0.5), ^if.then40, ^if.else35;
^while.body6:
    i32 %229 = phi [^entry3, i32 %184] [^if.then45, i32 %291] [^if.then51, i32 %336] [^if.then57, i32 %366] [^if.then60, i32 %381];
    i1 %230 = scmp ge i32 %229, i32 %len;
    cbr i1 %230(prob = 0.5), ^b17, ^b18;
^if.then39:
    i32 %231 = load i32* %0;
    i32* %232 = getelementptr &(i32* %buf)[i32 %231];
    i32 %233 = load i32* %232;
    i1 %234 = scmp eq i32 %233, i32 101;
    cbr i1 %234(prob = 0.5), ^if.then42, ^b;
^if.else30:
    i1 %235 = scmp eq i32 %196, i32 13;
    cbr i1 %235(prob = 0.5), ^if.then41, ^if.then21;
^if.else31:
    i32 %236 = load i32* %0;
    i32 %237 = add i32 %236, i32 3;
    i32* %238 = getelementptr &(i32* %buf)[i32 %237];
    i32 %239 = load i32* %238;
    i32 %240 = load i32* %92;
    i1 %241 = scmp neq i32 %239, i32 %240;
    cbr i1 %241(prob = 0.5), ^b, ^b19;
^if.else32:
    i32 %242 = add i32 %203, i32 2;
    i32* %243 = getelementptr &(i32* %buf)[i32 %242];
    i32 %244 = load i32* %243;
    i32 %245 = load i32* %128;
    i1 %246 = scmp neq i32 %244, i32 %245;
    cbr i1 %246(prob = 0.5), ^b, ^if.else36;
^if.else33:
    i32 %247 = load i32* %0;
    i32 %248 = add i32 %247, i32 1;
    i32* %249 = getelementptr &(i32* %buf)[i32 %248];
    i32 %250 = load i32* %249;
    i32 %251 = load i32* %168;
    i1 %252 = scmp neq i32 %250, i32 %251;
    cbr i1 %252(prob = 0.5), ^b, ^if.else37;
^if.else34:
    i32 %253 = load i32* %0;
    i32* %254 = getelementptr &(i32* %buf)[i32 %253];
    i32 %255 = load i32* %254;
    i1 %256 = scmp eq i32 %255, i32 110;
    cbr i1 %256(prob = 0.5), ^if.then43, ^b;
^while.body7:
    i32 %257 = add i32 %217, i32 1;
    store i32* %0 with i32 %257;
    ubr ^while.body10;
^if.then40:
    i32 %258 = add i32 %225, i32 1;
    store i32* %0 with i32 %258;
    ubr ^while.body5;
^while.body8:
    i32* %259 = getelementptr &(i32* %buf)[i32 %222];
    i32 %260 = load i32* %259;
    i1 %261 = scmp gt i32 %260, i32 47;
    cbr i1 %261(prob = 0.5), ^if.then46, ^b21;
^if.then41:
    i32 %262 = load i32* %0;
    i32 %263 = add i32 %262, i32 1;
    store i32* %0 with i32 %263;
    ubr ^while.body3;
^b17:
    i32 %264 = load i32* %0;
    i1 %265 = scmp ge i32 %264, i32 %len;
    cbr i1 %265(prob = 0.5), ^b, ^b22;
^while.body9:
    i32 %266 = phi [^b15, i32 %217] [^if.then49, i32 %332] [^if.then55, i32 %363] [^if.then59, i32 %379] [^if.then63, i32 %401];
    i1 %267 = scmp ge i32 %266, i32 %len;
    cbr i1 %267(prob = 0.5), ^b20, ^b23;
^if.then42:
    i32 %268 = add i32 %231, i32 1;
    store i32* %0 with i32 %268;
    i1 %269 = scmp lt i32 %268, i32 %len;
    cbr i1 %269(prob = 0.5), ^if.then47, ^b24;
^if.then43:
    i32 %270 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else35:
    i1 %271 = scmp eq i32 %227, i32 9;
    cbr i1 %271(prob = 0.5), ^if.then44, ^if.else38;
^b18:
    i32 %272 = load i32* %0;
    i32* %273 = getelementptr &(i32* %buf)[i32 %272];
    i32 %274 = load i32* %273;
    i1 %275 = scmp eq i32 %274, i32 32;
    cbr i1 %275(prob = 0.5), ^if.then45, ^if.else39;
^b19:
    i32 %276 = phi [^if.else31, i32 %236] [^if.else41, i32 %321];
    i32 %277 = add i32 %276, i32 4;
    store i32* %0 with i32 %277;
    ubr ^b;
^if.else36:
    i32 %278 = load i32* %0;
    i32 %279 = add i32 %278, i32 3;
    i32* %280 = getelementptr &(i32* %buf)[i32 %279];
    i32 %281 = load i32* %280;
    i32 %282 = load i32* %129;
    i1 %283 = scmp neq i32 %281, i32 %282;
    cbr i1 %283(prob = 0.5), ^b, ^if.else40;
^if.else37:
    i32 %284 = add i32 %247, i32 2;
    i32* %285 = getelementptr &(i32* %buf)[i32 %284];
    i32 %286 = load i32* %285;
    i32 %287 = load i32* %169;
    i1 %288 = scmp neq i32 %286, i32 %287;
    cbr i1 %288(prob = 0.5), ^b, ^if.else41;
^if.then44:
    i32 %289 = load i32* %0;
    i32 %290 = add i32 %289, i32 1;
    store i32* %0 with i32 %290;
    ubr ^while.body5;
^if.then45:
    i32 %291 = add i32 %272, i32 1;
    store i32* %0 with i32 %291;
    ubr ^while.body6;
^while.body10:
    i32 %292 = phi [^while.body7, i32 %257] [^if.then53, i32 %359] [^if.then58, i32 %378] [^if.then61, i32 %397] [^if.then65, i32 %408];
    i1 %293 = scmp ge i32 %292, i32 %len;
    cbr i1 %293(prob = 0.5), ^while.body11, ^b26;
^if.then46:
    i1 %294 = scmp lt i32 %260, i32 58;
    cbr i1 %294(prob = 0.5), ^b21, ^if.else42;
^b20:
    i32 %295 = load i32* %0;
    i1 %296 = scmp ge i32 %295, i32 %len;
    cbr i1 %296(prob = 0.5), ^b, ^b27;
^if.then47:
    i32* %297 = getelementptr &(i32* %buf)[i32 %268];
    i32 %298 = load i32* %297;
    i1 %299 = scmp eq i32 %298, i32 43;
    cbr i1 %299(prob = 0.5), ^if.then48, ^indirect4;
^b21:
    i32 %300 = phi [^while.body8, i32 0] [^if.then46, i32 1] [^if.else42, i32 0];
    i1 %301 = scmp neq i32 %300, i32 1;
    cbr i1 %301(prob = 0.5), ^indirect3, ^if.then37;
^b22:
    i32* %302 = getelementptr &(i32* %buf)[i32 %264];
    i32 %303 = load i32* %302;
    i1 %304 = scmp neq i32 %303, i32 58;
    cbr i1 %304(prob = 0.5), ^b, ^b25;
^b23:
    i32 %305 = load i32* %0;
    i32* %306 = getelementptr &(i32* %buf)[i32 %305];
    i32 %307 = load i32* %306;
    i1 %308 = scmp eq i32 %307, i32 32;
    cbr i1 %308(prob = 0.5), ^if.then49, ^if.else43;
^b24:
    i32 %309 = phi [^if.then42, i32 %268] [^if.then48, i32 %328] [^indirect4, i32 %333];
    i1 %310 = scmp lt i32 %309, i32 %len;
    cbr i1 %310(prob = 0.5), ^if.then52, ^indirect5;
^if.else38:
    i32 %311 = load i32* %0;
    i32* %312 = getelementptr &(i32* %buf)[i32 %311];
    i32 %313 = load i32* %312;
    i1 %314 = scmp eq i32 %313, i32 10;
    cbr i1 %314(prob = 0.5), ^if.then50, ^if.else44;
^if.else39:
    i1 %315 = scmp eq i32 %274, i32 9;
    cbr i1 %315(prob = 0.5), ^if.then51, ^if.else45;
^if.else40:
    i32 %316 = add i32 %278, i32 4;
    i32* %317 = getelementptr &(i32* %buf)[i32 %316];
    i32 %318 = load i32* %317;
    i32 %319 = load i32* %130;
    i1 %320 = scmp neq i32 %318, i32 %319;
    cbr i1 %320(prob = 0.5), ^b, ^b28;
^if.else41:
    i32 %321 = load i32* %0;
    i32 %322 = add i32 %321, i32 3;
    i32* %323 = getelementptr &(i32* %buf)[i32 %322];
    i32 %324 = load i32* %323;
    i32 %325 = load i32* %170;
    i1 %326 = scmp neq i32 %324, i32 %325;
    cbr i1 %326(prob = 0.5), ^b, ^b19;
^if.then48:
    i32 %327 = load i32* %0;
    i32 %328 = add i32 %327, i32 1;
    store i32* %0 with i32 %328;
    ubr ^b24;
^if.else42:
    ubr ^b21;
^indirect3:
    i32 %329 = load i32* %0;
    ubr ^b14;
^while.body11:
    i32 %330 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %331 = scmp eq i32 %330, i32 0;
    cbr i1 %331(prob = 0.5), ^b, ^entry2;
^if.then49:
    i32 %332 = add i32 %305, i32 1;
    store i32* %0 with i32 %332;
    ubr ^while.body9;
^indirect4:
    i32 %333 = load i32* %0;
    ubr ^b24;
^if.then50:
    i32 %334 = add i32 %311, i32 1;
    store i32* %0 with i32 %334;
    ubr ^while.body5;
^if.then51:
    i32 %335 = load i32* %0;
    i32 %336 = add i32 %335, i32 1;
    store i32* %0 with i32 %336;
    ubr ^while.body6;
^b25:
    i32 %337 = load i32* %0;
    i32 %338 = add i32 %337, i32 1;
    store i32* %0 with i32 %338;
    ubr ^while.body12;
^b26:
    i32 %339 = load i32* %0;
    i32* %340 = getelementptr &(i32* %buf)[i32 %339];
    i32 %341 = load i32* %340;
    i1 %342 = scmp eq i32 %341, i32 32;
    cbr i1 %342(prob = 0.5), ^if.then53, ^if.else46;
^indirect5:
    i32 %343 = load i32* %0;
    ubr ^while.header2;
^b27:
    i32* %344 = getelementptr &(i32* %buf)[i32 %295];
    i32 %345 = load i32* %344;
    i1 %346 = scmp neq i32 %345, i32 93;
    cbr i1 %346(prob = 0.5), ^b, ^b10;
^if.then52:
    i32 %347 = load i32* %0;
    i32* %348 = getelementptr &(i32* %buf)[i32 %347];
    i32 %349 = load i32* %348;
    i1 %350 = scmp eq i32 %349, i32 45;
    cbr i1 %350(prob = 0.5), ^if.then54, ^while.header2;
^if.else43:
    i1 %351 = scmp eq i32 %307, i32 9;
    cbr i1 %351(prob = 0.5), ^if.then55, ^if.else47;
^if.else44:
    i1 %352 = scmp eq i32 %313, i32 13;
    cbr i1 %352(prob = 0.5), ^if.then56, ^b15;
^if.else45:
    i32 %353 = load i32* %0;
    i32* %354 = getelementptr &(i32* %buf)[i32 %353];
    i32 %355 = load i32* %354;
    i1 %356 = scmp eq i32 %355, i32 10;
    cbr i1 %356(prob = 0.5), ^if.then57, ^if.else48;
^b28:
    i32 %357 = load i32* %0;
    i32 %358 = add i32 %357, i32 5;
    store i32* %0 with i32 %358;
    ubr ^b;
^if.then53:
    i32 %359 = add i32 %339, i32 1;
    store i32* %0 with i32 %359;
    ubr ^while.body10;
^if.then54:
    i32 %360 = phi [^if.then52, i32 %347] [^b31, i32 %388];
    i32 %361 = add i32 %360, i32 1;
    store i32* %0 with i32 %361;
    ubr ^while.header2;
^if.then55:
    i32 %362 = load i32* %0;
    i32 %363 = add i32 %362, i32 1;
    store i32* %0 with i32 %363;
    ubr ^while.body9;
^if.then56:
    i32 %364 = load i32* %0;
    i32 %365 = add i32 %364, i32 1;
    store i32* %0 with i32 %365;
    ubr ^while.body5;
^if.then57:
    i32 %366 = add i32 %353, i32 1;
    store i32* %0 with i32 %366;
    ubr ^while.body6;
^if.else46:
    i1 %367 = scmp eq i32 %341, i32 9;
    cbr i1 %367(prob = 0.5), ^if.then58, ^if.else49;
^while.body12:
    i32 %368 = phi [^b25, i32 %338] [^if.then62, i32 %398] [^if.then66, i32 %410] [^if.then67, i32 %417] [^if.then69, i32 %430];
    i1 %369 = scmp ge i32 %368, i32 %len;
    cbr i1 %369(prob = 0.5), ^b29, ^b30;
^while.header2:
    i32 %370 = phi [^indirect5, i32 %343] [^if.then52, i32 %347] [^if.then54, i32 %361];
    i1 %371 = scmp lt i32 %370, i32 %len;
    cbr i1 %371(prob = 0.97), ^while.body13, ^b;
^if.else47:
    i32 %372 = load i32* %0;
    i32* %373 = getelementptr &(i32* %buf)[i32 %372];
    i32 %374 = load i32* %373;
    i1 %375 = scmp eq i32 %374, i32 10;
    cbr i1 %375(prob = 0.5), ^if.then59, ^if.else50;
^if.else48:
    i1 %376 = scmp eq i32 %355, i32 13;
    cbr i1 %376(prob = 0.5), ^if.then60, ^b17;
^if.then58:
    i32 %377 = load i32* %0;
    i32 %378 = add i32 %377, i32 1;
    store i32* %0 with i32 %378;
    ubr ^while.body10;
^if.then59:
    i32 %379 = add i32 %372, i32 1;
    store i32* %0 with i32 %379;
    ubr ^while.body9;
^if.then60:
    i32 %380 = load i32* %0;
    i32 %381 = add i32 %380, i32 1;
    store i32* %0 with i32 %381;
    ubr ^while.body6;
^if.else49:
    i32 %382 = load i32* %0;
    i32* %383 = getelementptr &(i32* %buf)[i32 %382];
    i32 %384 = load i32* %383;
    i1 %385 = scmp eq i32 %384, i32 10;
    cbr i1 %385(prob = 0.5), ^if.then61, ^if.else51;
^b29:
    i32 %386 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %387 = scmp eq i32 %386, i32 0;
    cbr i1 %387(prob = 0.5), ^b, ^entry4;
^while.body13:
    i32 %388 = load i32* %0;
    i32* %389 = getelementptr &(i32* %buf)[i32 %388];
    i32 %390 = load i32* %389;
    i1 %391 = scmp gt i32 %390, i32 47;
    cbr i1 %391(prob = 0.5), ^if.then64, ^b31;
^b30:
    i32 %392 = load i32* %0;
    i32* %393 = getelementptr &(i32* %buf)[i32 %392];
    i32 %394 = load i32* %393;
    i1 %395 = scmp eq i32 %394, i32 32;
    cbr i1 %395(prob = 0.5), ^if.then62, ^if.else52;
^if.else50:
    i1 %396 = scmp eq i32 %374, i32 13;
    cbr i1 %396(prob = 0.5), ^if.then63, ^b20;
^if.then61:
    i32 %397 = add i32 %382, i32 1;
    store i32* %0 with i32 %397;
    ubr ^while.body10;
^if.then62:
    i32 %398 = add i32 %392, i32 1;
    store i32* %0 with i32 %398;
    ubr ^while.body12;
^entry4:
    i32 %399 = load i32* %0;
    ubr ^while.body14;
^if.then63:
    i32 %400 = load i32* %0;
    i32 %401 = add i32 %400, i32 1;
    store i32* %0 with i32 %401;
    ubr ^while.body9;
^if.then64:
    i1 %402 = scmp lt i32 %390, i32 58;
    cbr i1 %402(prob = 0.5), ^b31, ^if.else53;
^if.else51:
    i1 %403 = scmp eq i32 %384, i32 13;
    cbr i1 %403(prob = 0.5), ^if.then65, ^while.body11;
^b31:
    i32 %404 = phi [^while.body13, i32 0] [^if.then64, i32 1] [^if.else53, i32 0];
    i1 %405 = scmp neq i32 %404, i32 1;
    cbr i1 %405(prob = 0.5), ^b, ^if.then54;
^if.else52:
    i1 %406 = scmp eq i32 %394, i32 9;
    cbr i1 %406(prob = 0.5), ^if.then66, ^if.else54;
^if.then65:
    i32 %407 = load i32* %0;
    i32 %408 = add i32 %407, i32 1;
    store i32* %0 with i32 %408;
    ubr ^while.body10;
^if.else53:
    ubr ^b31;
^if.then66:
    i32 %409 = load i32* %0;
    i32 %410 = add i32 %409, i32 1;
    store i32* %0 with i32 %410;
    ubr ^while.body12;
^while.body14:
    i32 %411 = phi [^entry4, i32 %399] [^if.then68, i32 %428] [^if.then70, i32 %435] [^if.then72, i32 %451] [^if.then75, i32 %466];
    i1 %412 = scmp ge i32 %411, i32 %len;
    cbr i1 %412(prob = 0.5), ^b32, ^b33;
^if.else54:
    i32 %413 = load i32* %0;
    i32* %414 = getelementptr &(i32* %buf)[i32 %413];
    i32 %415 = load i32* %414;
    i1 %416 = scmp eq i32 %415, i32 10;
    cbr i1 %416(prob = 0.5), ^if.then67, ^if.else55;
^if.then67:
    i32 %417 = add i32 %413, i32 1;
    store i32* %0 with i32 %417;
    ubr ^while.body12;
^b32:
    i32 %418 = load i32* %0;
    i32* %419 = getelementptr &(i32* %buf)[i32 %418];
    i32 %420 = load i32* %419;
    i1 %421 = scmp eq i32 %420, i32 44;
    cbr i1 %421(prob = 0.97), ^while.body15, ^while.body16;
^b33:
    i32 %422 = load i32* %0;
    i32* %423 = getelementptr &(i32* %buf)[i32 %422];
    i32 %424 = load i32* %423;
    i1 %425 = scmp eq i32 %424, i32 32;
    cbr i1 %425(prob = 0.5), ^if.then68, ^if.else56;
^if.else55:
    i1 %426 = scmp eq i32 %415, i32 13;
    cbr i1 %426(prob = 0.5), ^if.then69, ^b29;
^while.body15:
    i32 %427 = add i32 %418, i32 1;
    store i32* %0 with i32 %427;
    ubr ^while.body17;
^if.then68:
    i32 %428 = add i32 %422, i32 1;
    store i32* %0 with i32 %428;
    ubr ^while.body14;
^if.then69:
    i32 %429 = load i32* %0;
    i32 %430 = add i32 %429, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body12;
^while.body16:
    i32 %431 = phi [^b32, i32 %418] [^if.then71, i32 %450] [^if.then74, i32 %464] [^if.then77, i32 %476] [^if.then79, i32 %490];
    i1 %432 = scmp ge i32 %431, i32 %len;
    cbr i1 %432(prob = 0.5), ^b34, ^b35;
^if.else56:
    i1 %433 = scmp eq i32 %424, i32 9;
    cbr i1 %433(prob = 0.5), ^if.then70, ^if.else57;
^if.then70:
    i32 %434 = load i32* %0;
    i32 %435 = add i32 %434, i32 1;
    store i32* %0 with i32 %435;
    ubr ^while.body14;
^while.body17:
    i32 %436 = phi [^while.body15, i32 %427] [^if.then73, i32 %461] [^if.then76, i32 %473] [^if.then78, i32 %482] [^if.then81, i32 %494];
    i1 %437 = scmp ge i32 %436, i32 %len;
    cbr i1 %437(prob = 0.5), ^while.body18, ^b36;
^b34:
    i32 %438 = load i32* %0;
    i1 %439 = scmp ge i32 %438, i32 %len;
    cbr i1 %439(prob = 0.5), ^b, ^if.else58;
^b35:
    i32 %440 = load i32* %0;
    i32* %441 = getelementptr &(i32* %buf)[i32 %440];
    i32 %442 = load i32* %441;
    i1 %443 = scmp eq i32 %442, i32 32;
    cbr i1 %443(prob = 0.5), ^if.then71, ^if.else59;
^if.else57:
    i32 %444 = load i32* %0;
    i32* %445 = getelementptr &(i32* %buf)[i32 %444];
    i32 %446 = load i32* %445;
    i1 %447 = scmp eq i32 %446, i32 10;
    cbr i1 %447(prob = 0.5), ^if.then72, ^if.else60;
^while.body18:
    i32 %448 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %449 = scmp eq i32 %448, i32 0;
    cbr i1 %449(prob = 0.5), ^b, ^entry5;
^if.then71:
    i32 %450 = add i32 %440, i32 1;
    store i32* %0 with i32 %450;
    ubr ^while.body16;
^if.then72:
    i32 %451 = add i32 %444, i32 1;
    store i32* %0 with i32 %451;
    ubr ^while.body14;
^b36:
    i32 %452 = load i32* %0;
    i32* %453 = getelementptr &(i32* %buf)[i32 %452];
    i32 %454 = load i32* %453;
    i1 %455 = scmp eq i32 %454, i32 32;
    cbr i1 %455(prob = 0.5), ^if.then73, ^if.else61;
^if.else58:
    i32* %456 = getelementptr &(i32* %buf)[i32 %438];
    i32 %457 = load i32* %456;
    i1 %458 = scmp neq i32 %457, i32 125;
    cbr i1 %458(prob = 0.5), ^b, ^b10;
^if.else59:
    i1 %459 = scmp eq i32 %442, i32 9;
    cbr i1 %459(prob = 0.5), ^if.then74, ^if.else62;
^if.else60:
    i1 %460 = scmp eq i32 %446, i32 13;
    cbr i1 %460(prob = 0.5), ^if.then75, ^b32;
^if.then73:
    i32 %461 = add i32 %452, i32 1;
    store i32* %0 with i32 %461;
    ubr ^while.body17;
^entry5:
    i32 %462 = load i32* %0;
    ubr ^while.body19;
^if.then74:
    i32 %463 = load i32* %0;
    i32 %464 = add i32 %463, i32 1;
    store i32* %0 with i32 %464;
    ubr ^while.body16;
^if.then75:
    i32 %465 = load i32* %0;
    i32 %466 = add i32 %465, i32 1;
    store i32* %0 with i32 %466;
    ubr ^while.body14;
^if.else61:
    i1 %467 = scmp eq i32 %454, i32 9;
    cbr i1 %467(prob = 0.5), ^if.then76, ^if.else63;
^if.else62:
    i32 %468 = load i32* %0;
    i32* %469 = getelementptr &(i32* %buf)[i32 %468];
    i32 %470 = load i32* %469;
    i1 %471 = scmp eq i32 %470, i32 10;
    cbr i1 %471(prob = 0.5), ^if.then77, ^if.else64;
^if.then76:
    i32 %472 = load i32* %0;
    i32 %473 = add i32 %472, i32 1;
    store i32* %0 with i32 %473;
    ubr ^while.body17;
^while.body19:
    i32 %474 = phi [^entry5, i32 %462] [^if.then80, i32 %492] [^if.then82, i32 %500] [^if.then83, i32 %507] [^if.then84, i32 %512];
    i1 %475 = scmp ge i32 %474, i32 %len;
    cbr i1 %475(prob = 0.5), ^b37, ^b38;
^if.then77:
    i32 %476 = add i32 %468, i32 1;
    store i32* %0 with i32 %476;
    ubr ^while.body16;
^if.else63:
    i32 %477 = load i32* %0;
    i32* %478 = getelementptr &(i32* %buf)[i32 %477];
    i32 %479 = load i32* %478;
    i1 %480 = scmp eq i32 %479, i32 10;
    cbr i1 %480(prob = 0.5), ^if.then78, ^if.else65;
^if.else64:
    i1 %481 = scmp eq i32 %470, i32 13;
    cbr i1 %481(prob = 0.5), ^if.then79, ^b34;
^if.then78:
    i32 %482 = add i32 %477, i32 1;
    store i32* %0 with i32 %482;
    ubr ^while.body17;
^b37:
    i32 %483 = load i32* %0;
    i1 %484 = scmp ge i32 %483, i32 %len;
    cbr i1 %484(prob = 0.5), ^b, ^b39;
^b38:
    i32 %485 = load i32* %0;
    i32* %486 = getelementptr &(i32* %buf)[i32 %485];
    i32 %487 = load i32* %486;
    i1 %488 = scmp eq i32 %487, i32 32;
    cbr i1 %488(prob = 0.5), ^if.then80, ^if.else66;
^if.then79:
    i32 %489 = load i32* %0;
    i32 %490 = add i32 %489, i32 1;
    store i32* %0 with i32 %490;
    ubr ^while.body16;
^if.else65:
    i1 %491 = scmp eq i32 %479, i32 13;
    cbr i1 %491(prob = 0.5), ^if.then81, ^while.body18;
^if.then80:
    i32 %492 = add i32 %485, i32 1;
    store i32* %0 with i32 %492;
    ubr ^while.body19;
^if.then81:
    i32 %493 = load i32* %0;
    i32 %494 = add i32 %493, i32 1;
    store i32* %0 with i32 %494;
    ubr ^while.body17;
^b39:
    i32* %495 = getelementptr &(i32* %buf)[i32 %483];
    i32 %496 = load i32* %495;
    i1 %497 = scmp neq i32 %496, i32 58;
    cbr i1 %497(prob = 0.5), ^b, ^b40;
^if.else66:
    i1 %498 = scmp eq i32 %487, i32 9;
    cbr i1 %498(prob = 0.5), ^if.then82, ^if.else67;
^if.then82:
    i32 %499 = load i32* %0;
    i32 %500 = add i32 %499, i32 1;
    store i32* %0 with i32 %500;
    ubr ^while.body19;
^b40:
    i32 %501 = load i32* %0;
    i32 %502 = add i32 %501, i32 1;
    store i32* %0 with i32 %502;
    ubr ^while.body20;
^if.else67:
    i32 %503 = load i32* %0;
    i32* %504 = getelementptr &(i32* %buf)[i32 %503];
    i32 %505 = load i32* %504;
    i1 %506 = scmp eq i32 %505, i32 10;
    cbr i1 %506(prob = 0.5), ^if.then83, ^if.else68;
^if.then83:
    i32 %507 = add i32 %503, i32 1;
    store i32* %0 with i32 %507;
    ubr ^while.body19;
^while.body20:
    i32 %508 = phi [^b40, i32 %502] [^if.then85, i32 %519] [^if.then86, i32 %522] [^if.then87, i32 %527] [^if.then88, i32 %530];
    i1 %509 = scmp ge i32 %508, i32 %len;
    cbr i1 %509(prob = 0.5), ^b41, ^b42;
^if.else68:
    i1 %510 = scmp eq i32 %505, i32 13;
    cbr i1 %510(prob = 0.5), ^if.then84, ^b37;
^if.then84:
    i32 %511 = load i32* %0;
    i32 %512 = add i32 %511, i32 1;
    store i32* %0 with i32 %512;
    ubr ^while.body19;
^b41:
    i32 %513 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %514 = scmp eq i32 %513, i32 0;
    cbr i1 %514(prob = 0.5), ^b, ^entry4;
^b42:
    i32 %515 = load i32* %0;
    i32* %516 = getelementptr &(i32* %buf)[i32 %515];
    i32 %517 = load i32* %516;
    i1 %518 = scmp eq i32 %517, i32 32;
    cbr i1 %518(prob = 0.5), ^if.then85, ^if.else69;
^if.then85:
    i32 %519 = add i32 %515, i32 1;
    store i32* %0 with i32 %519;
    ubr ^while.body20;
^if.else69:
    i1 %520 = scmp eq i32 %517, i32 9;
    cbr i1 %520(prob = 0.5), ^if.then86, ^if.else70;
^if.then86:
    i32 %521 = load i32* %0;
    i32 %522 = add i32 %521, i32 1;
    store i32* %0 with i32 %522;
    ubr ^while.body20;
^if.else70:
    i32 %523 = load i32* %0;
    i32* %524 = getelementptr &(i32* %buf)[i32 %523];
    i32 %525 = load i32* %524;
    i1 %526 = scmp eq i32 %525, i32 10;
    cbr i1 %526(prob = 0.5), ^if.then87, ^if.else71;
^if.then87:
    i32 %527 = add i32 %523, i32 1;
    store i32* %0 with i32 %527;
    ubr ^while.body20;
^if.else71:
    i1 %528 = scmp eq i32 %525, i32 13;
    cbr i1 %528(prob = 0.5), ^if.then88, ^b41;
^if.then88:
    i32 %529 = load i32* %0;
    i32 %530 = add i32 %529, i32 1;
    store i32* %0 with i32 %530;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %8];
    i32* %4 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %7 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
^indirect:
    i32 %11 = load i32* %pos;
    ubr ^b;
^while.body1:
    i32 %12 = phi [^b, i32 %2] [^if.then, i32 %20] [^if.then1, i32 %25] [^if.then4, i32 %36] [^if.then6, i32 %42];
    i1 %13 = scmp ge i32 %12, i32 %3;
    cbr i1 %13(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %14 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %4, i32 %3, i32* %pos);
    i32 %15 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32 %16 = load i32* %pos;
    i32* %17 = getelementptr &(i32* %4)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %20 = add i32 %16, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^while.body2:
    i32 %21 = phi [^b1, i32 %15] [^if.then3, i32 %35] [^if.then5, i32 %40] [^if.then7, i32 %48] [^if.then8, i32 %51];
    i1 %22 = scmp ge i32 %21, i32 %3;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %23 = scmp eq i32 %18, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %24 = load i32* %pos;
    i32 %25 = add i32 %24, i32 1;
    store i32* %pos with i32 %25;
    ubr ^while.body1;
^b3:
    i1 %26 = scmp neq i32 %14, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^b4:
    i32 %27 = load i32* %pos;
    i32* %28 = getelementptr &(i32* %4)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 32;
    cbr i1 %30(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %4)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = scmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then3:
    i32 %35 = add i32 %27, i32 1;
    store i32* %pos with i32 %35;
    ubr ^while.body2;
^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then4:
    i32 %36 = add i32 %31, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body1;
^if.else3:
    i1 %37 = scmp eq i32 %29, i32 9;
    cbr i1 %37(prob = 0.5), ^if.then5, ^if.else5;
^if.else4:
    i1 %38 = scmp eq i32 %33, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b1;
^if.then5:
    i32 %39 = load i32* %pos;
    i32 %40 = add i32 %39, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body2;
^if.then6:
    i32 %41 = load i32* %pos;
    i32 %42 = add i32 %41, i32 1;
    store i32* %pos with i32 %42;
    ubr ^while.body1;
^if.else5:
    i32 %43 = load i32* %pos;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 10;
    cbr i1 %46(prob = 0.5), ^if.then7, ^if.else6;
^b5:
    i32 %47 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %47;
^if.then7:
    i32 %48 = add i32 %43, i32 1;
    store i32* %pos with i32 %48;
    ubr ^while.body2;
^if.else6:
    i1 %49 = scmp eq i32 %45, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %50 = load i32* %pos;
    i32 %51 = add i32 %50, i32 1;
    store i32* %pos with i32 %51;
    ubr ^while.body2;
}
