internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else, i32 3] [^if.else4, i32 2] [^if.else9, i32 1] [^if.else17, i32 5] [^if.else24, i32 6];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^if.then:
    i32 %5 = load i32* %0;
    i32* %6 = getelementptr &(i32* %buf)[i32 %5];
    i32 %7 = load i32* %6;
    i1 %8 = icmp eq i32 %7, i32 123;
    cbr i1 %8(prob = 0.5), ^entry, ^if.else;
  ^if.then1:
    i32 %9 = load i32* %0;
    i32 %10 = add i32 %9, i32 1;
    store i32* %0 with i32 %10;
    ubr ^while.header;
  ^if.then2:
    i32 %11 = load i32* %0;
    i32* %12 = getelementptr &(i32* %buf)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = icmp eq i32 %13, i32 43;
    i1 %15 = icmp eq i32 %13, i32 45;
    i1 %16 = or i1 %14, i1 %15;
    cbr i1 %16(prob = 0.75), ^if.then8, ^b;
  ^if.then3:
    i32 %17 = load i32* %0;
    i32 %18 = add i32 %17, i32 1;
    store i32* %0 with i32 %18;
    ubr ^while.header1;
  ^if.then4:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.header2;
  ^if.then5:
    i32 %21 = load i32* %0;
    i32 %22 = add i32 %21, i32 3;
    i1 %23 = icmp sle i32 %len, i32 %22;
    cbr i1 %23(prob = 0.5), ^b5, ^if.else1;
  ^if.then6:
    i32 %24 = load i32* %0;
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = icmp sle i32 %len, i32 %25;
    cbr i1 %26(prob = 0.5), ^b5, ^if.else2;
  ^if.then7:
    i32 %27 = load i32* %0;
    i32 %28 = add i32 %27, i32 3;
    i1 %29 = icmp sle i32 %len, i32 %28;
    cbr i1 %29(prob = 0.5), ^b5, ^if.else3;
  ^if.then8:
    i32 %30 = add i32 %11, i32 1;
    store i32* %0 with i32 %30;
    ubr ^b;
  ^entry:
    i32 %31 = phi [^2, i32 %4] [^if.then, i32 %5];
    i32 %32 = phi [^2, i32 %3] [^if.then, i32 4];
    i1 %33 = icmp sle i32 %len, i32 %31;
    cbr i1 %33(prob = 0.5), ^b5, ^while.header3;
  ^if.else:
    i1 %34 = icmp eq i32 %7, i32 91;
    cbr i1 %34(prob = 0.5), ^2, ^if.else4;
  ^b:
    i32 %35 = phi [^if.then2, i32 %11] [^if.then8, i32 %30];
    i1 %36 = icmp sle i32 %len, i32 %35;
    cbr i1 %36(prob = 0.5), ^b5, ^if.else5;
  ^while.header:
    i32 %37 = phi [^if.then1, i32 %10] [^b6, i32 %88];
    i1 %38 = icmp sgt i32 %len, i32 %37;
    cbr i1 %38(prob = 0.984615), ^while.body, ^indirect;
  ^while.header1:
    i32 %39 = phi [^if.then3, i32 %18] [^if.then12, i32 %135];
    i1 %40 = icmp sle i32 %len, i32 %39;
    cbr i1 %40(prob = 0.5), ^b1, ^b2;
  ^while.header2:
    i32 %41 = phi [^if.then4, i32 %20] [^if.then13, i32 %147];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^b3, ^b4;
  ^if.else1:
    i32* %43 = getelementptr &(i32* %buf)[i32 %21];
    i32 %44 = load i32* %43;
    i1 %45 = icmp neq i32 %44, i32 116;
    cbr i1 %45(prob = 0.5), ^b5, ^if.else6;
  ^if.else2:
    i32* %46 = getelementptr &(i32* %buf)[i32 %24];
    i32 %47 = load i32* %46;
    i1 %48 = icmp neq i32 %47, i32 102;
    cbr i1 %48(prob = 0.5), ^b5, ^if.else7;
  ^if.else3:
    i32* %49 = getelementptr &(i32* %buf)[i32 %27];
    i32 %50 = load i32* %49;
    i1 %51 = icmp neq i32 %50, i32 110;
    cbr i1 %51(prob = 0.5), ^b5, ^if.else8;
  ^while.header3:
    i32 %52 = phi [^entry, i32 %31] [^if.then14, i32 %167];
    i1 %53 = icmp sle i32 %len, i32 %52;
    cbr i1 %53(prob = 0.5), ^b7, ^b8;
  ^indirect:
    i32 %54 = load i32* %0;
    ubr ^b9;
  ^if.else4:
    i1 %55 = icmp eq i32 %7, i32 34;
    cbr i1 %55(prob = 0.5), ^2, ^if.else9;
  ^while.body:
    i32 %56 = load i32* %0;
    i32* %57 = getelementptr &(i32* %buf)[i32 %56];
    i32 %58 = load i32* %57;
    i1 %59 = icmp eq i32 %58, i32 34;
    cbr i1 %59(prob = 0.5), ^b9, ^b6;
  ^if.else5:
    i32 %60 = load i32* %0;
    i32* %61 = getelementptr &(i32* %buf)[i32 %60];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %62, i32 -48;
    i1 %64 = icmp uge i32 %63, i32 10;
    cbr i1 %64(prob = 0.5), ^b5, ^while.header4;
  ^b1:
    i32 %65 = load i32* %0;
    i1 %66 = icmp sgt i32 %len, i32 %65;
    cbr i1 %66(prob = 0.5), ^if.then9, ^b10;
  ^b2:
    i32* %67 = getelementptr &(i32* %buf)[i32 %39];
    i32 %68 = load i32* %67;
    i1 %69 = icmp eq i32 %68, i32 32;
    cbr i1 %69(prob = 0.5), ^indirect1, ^if.else10;
  ^b3:
    i32 %70 = load i32* %0;
    i1 %71 = icmp sgt i32 %len, i32 %70;
    cbr i1 %71(prob = 0.5), ^if.then10, ^b11;
  ^b4:
    i32* %72 = getelementptr &(i32* %buf)[i32 %41];
    i32 %73 = load i32* %72;
    i1 %74 = icmp eq i32 %73, i32 32;
    cbr i1 %74(prob = 0.5), ^indirect2, ^if.else11;
  ^if.else6:
    i32* %75 = getelementptr &(i32* %43)[i64 1];
    i32 %76 = load i32* %75;
    i1 %77 = icmp neq i32 %76, i32 114;
    cbr i1 %77(prob = 0.5), ^b5, ^if.else12;
  ^b5:
    i32 %78 = phi [^if.then5, i32 0] [^if.then6, i32 0] [^if.then7, i32 0] [^entry, i32 0] [^b, i32 0] [^if.else1, i32 0] [^if.else2, i32 0] [^if.else3, i32 0] [^if.else5, i32 0] [^if.else6, i32 0] [^if.else7, i32 0] [^if.else8, i32 0] [^b7, i32 0] [^b9, i32 0] [^b10, i32 0] [^b11, i32 0] [^if.else12, i32 0] [^if.else13, i32 0] [^if.else14, i32 0] [^if.then11, i32 1] [^if.else16, i32 0] [^if.else20, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^b16, i32 1] [^if.else27, i32 0] [^if.else29, i32 0] [^b19, i32 0] [^b21, i32 1] [^if.then16, i32 %205] [^b22, i32 1] [^b23, i32 0] [^if.then19, i32 1] [^b24, i32 0] [^b27, i32 0] [^b29, i32 0] [^b31, i32 0] [^while.header10, i32 1] [^while.body4, i32 1] [^b36, i32 0] [^b38, i32 0] [^if.else47, i32 0] [^b41, i32 0] [^b43, i32 0] [^b45, i32 0];
    ret i32 %78;
  ^if.else7:
    i32* %79 = getelementptr &(i32* %46)[i64 1];
    i32 %80 = load i32* %79;
    i1 %81 = icmp neq i32 %80, i32 97;
    cbr i1 %81(prob = 0.5), ^b5, ^if.else13;
  ^if.else8:
    i32* %82 = getelementptr &(i32* %49)[i64 1];
    i32 %83 = load i32* %82;
    i1 %84 = icmp neq i32 %83, i32 117;
    cbr i1 %84(prob = 0.5), ^b5, ^if.else14;
  ^b6:
    i1 %85 = icmp eq i32 %58, i32 92;
    i32 %86 = zext i1 %85 to i32;
    i32 %87 = add i32 %56, i32 1;
    i32 %88 = add i32 %86, i32 %87;
    store i32* %0 with i32 %88;
    ubr ^while.header;
  ^b7:
    switch i32 %32, [0, ^if.then], [1, ^if.then2], [2, ^if.then1], [3, ^if.then3], [4, ^if.then4], [5, ^if.then5], [6, ^if.then6], [7, ^if.then7], default ^b5;
  ^b8:
    i32* %89 = getelementptr &(i32* %buf)[i32 %52];
    i32 %90 = load i32* %89;
    i1 %91 = icmp eq i32 %90, i32 32;
    cbr i1 %91(prob = 0.5), ^indirect3, ^if.else15;
  ^b9:
    i32 %92 = phi [^indirect, i32 %54] [^while.body, i32 %56];
    i1 %93 = icmp sle i32 %len, i32 %92;
    cbr i1 %93(prob = 0.5), ^b5, ^if.else16;
  ^indirect1:
    i32 %94 = load i32* %0;
    ubr ^if.then12;
  ^if.else9:
    i1 %95 = icmp eq i32 %7, i32 43;
    i1 %96 = icmp eq i32 %7, i32 45;
    i1 %97 = or i1 %95, i1 %96;
    i32 %98 = add i32 %7, i32 -48;
    i1 %99 = icmp ult i32 %98, i32 10;
    i1 %100 = or i1 %97, i1 %99;
    cbr i1 %100(prob = 0.875), ^2, ^if.else17;
  ^if.then9:
    i32* %101 = getelementptr &(i32* %buf)[i32 %65];
    i32 %102 = load i32* %101;
    i1 %103 = icmp eq i32 %102, i32 93;
    cbr i1 %103(prob = 0.5), ^if.then11, ^b10;
  ^indirect2:
    i32 %104 = load i32* %0;
    ubr ^if.then13;
  ^while.header4:
    i32 %105 = phi [^if.else5, i32 %60] [^b14, i32 %168];
    i1 %106 = icmp sgt i32 %len, i32 %105;
    cbr i1 %106(prob = 0.984615), ^while.body1, ^indirect4;
  ^b10:
    i32 %107 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %108 = icmp eq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^b5, ^b12;
  ^if.then10:
    i32* %109 = getelementptr &(i32* %buf)[i32 %70];
    i32 %110 = load i32* %109;
    i1 %111 = icmp eq i32 %110, i32 125;
    cbr i1 %111(prob = 0.5), ^if.then11, ^b11;
  ^if.else10:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = icmp eq i32 %114, i32 9;
    cbr i1 %115(prob = 0.5), ^if.then12, ^if.else18;
  ^b11:
    i32 %116 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %117 = icmp eq i32 %116, i32 0;
    cbr i1 %117(prob = 0.5), ^b5, ^b13;
  ^if.else11:
    i32 %118 = load i32* %0;
    i32* %119 = getelementptr &(i32* %buf)[i32 %118];
    i32 %120 = load i32* %119;
    i1 %121 = icmp eq i32 %120, i32 9;
    cbr i1 %121(prob = 0.5), ^if.then13, ^if.else19;
  ^if.else12:
    i32* %122 = getelementptr &(i32* %43)[i64 2];
    i32 %123 = load i32* %122;
    i1 %124 = icmp neq i32 %123, i32 117;
    cbr i1 %124(prob = 0.5), ^b5, ^if.else20;
  ^if.else13:
    i32* %125 = getelementptr &(i32* %46)[i64 2];
    i32 %126 = load i32* %125;
    i1 %127 = icmp neq i32 %126, i32 108;
    cbr i1 %127(prob = 0.5), ^b5, ^if.else21;
  ^if.else14:
    i32* %128 = getelementptr &(i32* %49)[i64 2];
    i32 %129 = load i32* %128;
    i1 %130 = icmp neq i32 %129, i32 108;
    cbr i1 %130(prob = 0.5), ^b5, ^if.else22;
  ^indirect3:
    i32 %131 = load i32* %0;
    ubr ^if.then14;
  ^if.then11:
    i32 %132 = phi [^if.then9, i32 %65] [^if.then10, i32 %70] [^if.else16, i32 %141] [^b29, i32 %240] [^if.else47, i32 %338];
    i32 %133 = add i32 %132, i32 1;
    store i32* %0 with i32 %133;
    ubr ^b5;
  ^if.then12:
    i32 %134 = phi [^indirect1, i32 %94] [^if.else10, i32 %112] [^if.else18, i32 %112] [^if.else25, i32 %112];
    i32 %135 = add i32 %134, i32 1;
    store i32* %0 with i32 %135;
    ubr ^while.header1;
  ^if.else15:
    i32 %136 = load i32* %0;
    i32* %137 = getelementptr &(i32* %buf)[i32 %136];
    i32 %138 = load i32* %137;
    i1 %139 = icmp eq i32 %138, i32 9;
    cbr i1 %139(prob = 0.5), ^if.then14, ^if.else23;
  ^indirect4:
    i32 %140 = load i32* %0;
    ubr ^b15;
  ^if.else16:
    i32 %141 = load i32* %0;
    i32* %142 = getelementptr &(i32* %buf)[i32 %141];
    i32 %143 = load i32* %142;
    i1 %144 = icmp neq i32 %143, i32 34;
    cbr i1 %144(prob = 0.5), ^b5, ^if.then11;
  ^b12:
    i32 %145 = load i32* %0;
    ubr ^while.header5;
  ^if.then13:
    i32 %146 = phi [^indirect2, i32 %104] [^if.else11, i32 %118] [^if.else19, i32 %118] [^if.else26, i32 %118];
    i32 %147 = add i32 %146, i32 1;
    store i32* %0 with i32 %147;
    ubr ^while.header2;
  ^if.else17:
    i1 %148 = icmp eq i32 %7, i32 116;
    cbr i1 %148(prob = 0.5), ^2, ^if.else24;
  ^while.body1:
    i32 %149 = load i32* %0;
    i32* %150 = getelementptr &(i32* %buf)[i32 %149];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %151, i32 -48;
    i1 %153 = icmp uge i32 %152, i32 10;
    cbr i1 %153(prob = 0.5), ^b15, ^b14;
  ^b13:
    i32 %154 = load i32* %0;
    ubr ^while.header6;
  ^if.else18:
    i1 %155 = icmp eq i32 %114, i32 10;
    cbr i1 %155(prob = 0.5), ^if.then12, ^if.else25;
  ^if.else19:
    i1 %156 = icmp eq i32 %120, i32 10;
    cbr i1 %156(prob = 0.5), ^if.then13, ^if.else26;
  ^if.else20:
    i32* %157 = getelementptr &(i32* %43)[i64 3];
    i32 %158 = load i32* %157;
    i1 %159 = icmp neq i32 %158, i32 101;
    cbr i1 %159(prob = 0.5), ^b5, ^b16;
  ^if.else21:
    i32* %160 = getelementptr &(i32* %46)[i64 3];
    i32 %161 = load i32* %160;
    i1 %162 = icmp neq i32 %161, i32 115;
    cbr i1 %162(prob = 0.5), ^b5, ^if.else27;
  ^if.else22:
    i32* %163 = getelementptr &(i32* %49)[i64 3];
    i32 %164 = load i32* %163;
    i1 %165 = icmp neq i32 %164, i32 108;
    cbr i1 %165(prob = 0.5), ^b5, ^b16;
  ^if.then14:
    i32 %166 = phi [^indirect3, i32 %131] [^if.else15, i32 %136] [^if.else23, i32 %136] [^if.else28, i32 %136];
    i32 %167 = add i32 %166, i32 1;
    store i32* %0 with i32 %167;
    ubr ^while.header3;
  ^b14:
    i32 %168 = add i32 %149, i32 1;
    store i32* %0 with i32 %168;
    ubr ^while.header4;
  ^if.else23:
    i1 %169 = icmp eq i32 %138, i32 10;
    cbr i1 %169(prob = 0.5), ^if.then14, ^if.else28;
  ^b15:
    i32 %170 = phi [^indirect4, i32 %140] [^while.body1, i32 %149];
    i1 %171 = icmp sgt i32 %len, i32 %170;
    cbr i1 %171(prob = 0.5), ^if.then15, ^indirect5;
  ^if.else24:
    i1 %172 = icmp eq i32 %7, i32 102;
    cbr i1 %172(prob = 0.5), ^2, ^if.else29;
  ^while.header5:
    i32 %173 = phi [^b12, i32 %145] [^if.then18, i32 %231];
    i1 %174 = icmp sle i32 %len, i32 %173;
    cbr i1 %174(prob = 0.5), ^b17, ^b18;
  ^while.header6:
    i32 %175 = phi [^b13, i32 %154] [^if.then20, i32 %239];
    i1 %176 = icmp sle i32 %len, i32 %175;
    cbr i1 %176(prob = 0.5), ^b19, ^b20;
  ^if.else25:
    i1 %177 = icmp eq i32 %114, i32 13;
    cbr i1 %177(prob = 0.5), ^if.then12, ^b1;
  ^if.else26:
    i1 %178 = icmp eq i32 %120, i32 13;
    cbr i1 %178(prob = 0.5), ^if.then13, ^b3;
  ^b16:
    i32 %179 = phi [^if.else20, i32 %21] [^if.else22, i32 %27];
    i32 %180 = add i32 %179, i32 4;
    store i32* %0 with i32 %180;
    ubr ^b5;
  ^if.else27:
    i32* %181 = getelementptr &(i32* %46)[i64 4];
    i32 %182 = load i32* %181;
    i1 %183 = icmp neq i32 %182, i32 101;
    cbr i1 %183(prob = 0.5), ^b5, ^b21;
  ^indirect5:
    i32 %184 = load i32* %0;
    ubr ^b22;
  ^if.then15:
    i32 %185 = load i32* %0;
    i32* %186 = getelementptr &(i32* %buf)[i32 %185];
    i32 %187 = load i32* %186;
    i1 %188 = icmp eq i32 %187, i32 46;
    cbr i1 %188(prob = 0.5), ^if.then17, ^b22;
  ^if.else28:
    i1 %189 = icmp eq i32 %138, i32 13;
    cbr i1 %189(prob = 0.5), ^if.then14, ^b7;
  ^b17:
    i32 %190 = load i32* %0;
    i32* %191 = getelementptr &(i32* %buf)[i32 %190];
    i32 %192 = load i32* %191;
    i1 %193 = icmp eq i32 %192, i32 44;
    cbr i1 %193(prob = 0.984615), ^while.body2, ^while.header7;
  ^if.else29:
    i1 %194 = icmp eq i32 %7, i32 110;
    cbr i1 %194(prob = 0.5), ^if.then16, ^b5;
  ^b18:
    i32* %195 = getelementptr &(i32* %buf)[i32 %173];
    i32 %196 = load i32* %195;
    i1 %197 = icmp eq i32 %196, i32 32;
    cbr i1 %197(prob = 0.5), ^indirect6, ^if.else30;
  ^b19:
    i32 %198 = load i32* %0;
    i1 %199 = icmp sle i32 %len, i32 %198;
    cbr i1 %199(prob = 0.5), ^b5, ^b23;
  ^b20:
    i32* %200 = getelementptr &(i32* %buf)[i32 %175];
    i32 %201 = load i32* %200;
    i1 %202 = icmp eq i32 %201, i32 32;
    cbr i1 %202(prob = 0.5), ^indirect7, ^if.else31;
  ^b21:
    i32 %203 = add i32 %24, i32 5;
    store i32* %0 with i32 %203;
    ubr ^b5;
  ^while.body2:
    i32 %204 = add i32 %190, i32 1;
    store i32* %0 with i32 %204;
    ubr ^while.header8;
  ^if.then16:
    i32 %205 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b5;
  ^if.then17:
    i32 %206 = phi [^if.then15, i32 %185] [^while.body3, i32 %207];
    i32 %207 = add i32 %206, i32 1;
    i1 %208 = icmp sgt i32 %len, i32 %207;
    store i32* %0 with i32 %207;
    cbr i1 %208(prob = 0.984615), ^while.body3, ^b22;
  ^indirect6:
    i32 %209 = load i32* %0;
    ubr ^if.then18;
  ^b22:
    i32 %210 = phi [^indirect5, i32 %184] [^if.then15, i32 %185] [^if.then17, i32 %207] [^while.body3, i32 %207];
    i1 %211 = icmp sgt i32 %len, i32 %210;
    cbr i1 %211(prob = 0.5), ^if.then19, ^b5;
  ^indirect7:
    i32 %212 = load i32* %0;
    ubr ^if.then20;
  ^while.header7:
    i32 %213 = phi [^b17, i32 %190] [^if.then23, i32 %272];
    i1 %214 = icmp sle i32 %len, i32 %213;
    cbr i1 %214(prob = 0.5), ^b24, ^b26;
  ^if.else30:
    i32 %215 = load i32* %0;
    i32* %216 = getelementptr &(i32* %buf)[i32 %215];
    i32 %217 = load i32* %216;
    i1 %218 = icmp eq i32 %217, i32 9;
    cbr i1 %218(prob = 0.5), ^if.then18, ^if.else32;
  ^b23:
    i32* %219 = getelementptr &(i32* %buf)[i32 %198];
    i32 %220 = load i32* %219;
    i1 %221 = icmp neq i32 %220, i32 58;
    cbr i1 %221(prob = 0.5), ^b5, ^b25;
  ^if.else31:
    i32 %222 = load i32* %0;
    i32* %223 = getelementptr &(i32* %buf)[i32 %222];
    i32 %224 = load i32* %223;
    i1 %225 = icmp eq i32 %224, i32 9;
    cbr i1 %225(prob = 0.5), ^if.then20, ^if.else33;
  ^while.body3:
    i32* %226 = getelementptr &(i32* %buf)[i32 %207];
    i32 %227 = load i32* %226;
    i32 %228 = add i32 %227, i32 -48;
    i1 %229 = icmp ult i32 %228, i32 10;
    cbr i1 %229(prob = 0.5), ^if.then17, ^b22;
  ^if.then18:
    i32 %230 = phi [^indirect6, i32 %209] [^if.else30, i32 %215] [^if.else32, i32 %215] [^if.else35, i32 %215];
    i32 %231 = add i32 %230, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.header5;
  ^if.then19:
    i32 %232 = load i32* %0;
    i32* %233 = getelementptr &(i32* %buf)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = icmp eq i32 %234, i32 101;
    cbr i1 %235(prob = 0.5), ^if.then21, ^b5;
  ^while.header8:
    i32 %236 = phi [^while.body2, i32 %204] [^if.then25, i32 %289];
    i1 %237 = icmp sle i32 %len, i32 %236;
    cbr i1 %237(prob = 0.5), ^b27, ^b28;
  ^if.then20:
    i32 %238 = phi [^indirect7, i32 %212] [^if.else31, i32 %222] [^if.else33, i32 %222] [^if.else36, i32 %222];
    i32 %239 = add i32 %238, i32 1;
    store i32* %0 with i32 %239;
    ubr ^while.header6;
  ^b24:
    i32 %240 = load i32* %0;
    i1 %241 = icmp sle i32 %len, i32 %240;
    cbr i1 %241(prob = 0.5), ^b5, ^b29;
  ^b25:
    i32 %242 = add i32 %198, i32 1;
    store i32* %0 with i32 %242;
    ubr ^while.header9;
  ^b26:
    i32* %243 = getelementptr &(i32* %buf)[i32 %213];
    i32 %244 = load i32* %243;
    i1 %245 = icmp eq i32 %244, i32 32;
    cbr i1 %245(prob = 0.5), ^indirect8, ^if.else34;
  ^if.else32:
    i1 %246 = icmp eq i32 %217, i32 10;
    cbr i1 %246(prob = 0.5), ^if.then18, ^if.else35;
  ^if.else33:
    i1 %247 = icmp eq i32 %224, i32 10;
    cbr i1 %247(prob = 0.5), ^if.then20, ^if.else36;
  ^if.then21:
    i32 %248 = add i32 %232, i32 1;
    i1 %249 = icmp sgt i32 %len, i32 %248;
    store i32* %0 with i32 %248;
    cbr i1 %249(prob = 0.5), ^if.then22, ^b30;
  ^b27:
    i32 %250 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %251 = icmp neq i32 %250, i32 0;
    cbr i1 %251(prob = 0.5), ^b12, ^b5;
  ^indirect8:
    i32 %252 = load i32* %0;
    ubr ^if.then23;
  ^b28:
    i32* %253 = getelementptr &(i32* %buf)[i32 %236];
    i32 %254 = load i32* %253;
    i1 %255 = icmp eq i32 %254, i32 32;
    cbr i1 %255(prob = 0.5), ^indirect9, ^if.else37;
  ^b29:
    i32* %256 = getelementptr &(i32* %buf)[i32 %240];
    i32 %257 = load i32* %256;
    i1 %258 = icmp neq i32 %257, i32 93;
    cbr i1 %258(prob = 0.5), ^b5, ^if.then11;
  ^if.else34:
    i32 %259 = load i32* %0;
    i32* %260 = getelementptr &(i32* %buf)[i32 %259];
    i32 %261 = load i32* %260;
    i1 %262 = icmp eq i32 %261, i32 9;
    cbr i1 %262(prob = 0.5), ^if.then23, ^if.else38;
  ^while.header9:
    i32 %263 = phi [^b25, i32 %242] [^if.then28, i32 %308];
    i1 %264 = icmp sle i32 %len, i32 %263;
    cbr i1 %264(prob = 0.5), ^b31, ^b32;
  ^if.else35:
    i1 %265 = icmp eq i32 %217, i32 13;
    cbr i1 %265(prob = 0.5), ^if.then18, ^b17;
  ^if.else36:
    i1 %266 = icmp eq i32 %224, i32 13;
    cbr i1 %266(prob = 0.5), ^if.then20, ^b19;
  ^indirect9:
    i32 %267 = load i32* %0;
    ubr ^if.then25;
  ^if.then22:
    i32* %268 = getelementptr &(i32* %233)[i64 1];
    i32 %269 = load i32* %268;
    i1 %270 = icmp eq i32 %269, i32 43;
    cbr i1 %270(prob = 0.5), ^if.then24, ^indirect10;
  ^if.then23:
    i32 %271 = phi [^indirect8, i32 %252] [^if.else34, i32 %259] [^if.else38, i32 %259] [^if.else40, i32 %259];
    i32 %272 = add i32 %271, i32 1;
    store i32* %0 with i32 %272;
    ubr ^while.header7;
  ^b30:
    i32 %273 = phi [^if.then21, i32 %248] [^if.then24, i32 %286] [^indirect10, i32 %287];
    i1 %274 = icmp sgt i32 %len, i32 %273;
    cbr i1 %274(prob = 0.5), ^if.then26, ^indirect11;
  ^if.else37:
    i32 %275 = load i32* %0;
    i32* %276 = getelementptr &(i32* %buf)[i32 %275];
    i32 %277 = load i32* %276;
    i1 %278 = icmp eq i32 %277, i32 9;
    cbr i1 %278(prob = 0.5), ^if.then25, ^if.else39;
  ^b31:
    i32 %279 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %280 = icmp eq i32 %279, i32 0;
    cbr i1 %280(prob = 0.5), ^b5, ^b33;
  ^if.else38:
    i1 %281 = icmp eq i32 %261, i32 10;
    cbr i1 %281(prob = 0.5), ^if.then23, ^if.else40;
  ^b32:
    i32* %282 = getelementptr &(i32* %buf)[i32 %263];
    i32 %283 = load i32* %282;
    i1 %284 = icmp eq i32 %283, i32 32;
    cbr i1 %284(prob = 0.5), ^indirect12, ^if.else41;
  ^if.then24:
    i32 %285 = load i32* %0;
    i32 %286 = add i32 %285, i32 1;
    store i32* %0 with i32 %286;
    ubr ^b30;
  ^indirect10:
    i32 %287 = load i32* %0;
    ubr ^b30;
  ^if.then25:
    i32 %288 = phi [^indirect9, i32 %267] [^if.else37, i32 %275] [^if.else39, i32 %275] [^if.else42, i32 %275];
    i32 %289 = add i32 %288, i32 1;
    store i32* %0 with i32 %289;
    ubr ^while.header8;
  ^indirect11:
    i32 %290 = load i32* %0;
    ubr ^while.header10;
  ^if.then26:
    i32 %291 = load i32* %0;
    i32* %292 = getelementptr &(i32* %buf)[i32 %291];
    i32 %293 = load i32* %292;
    i1 %294 = icmp eq i32 %293, i32 45;
    cbr i1 %294(prob = 0.5), ^if.then27, ^while.header10;
  ^indirect12:
    i32 %295 = load i32* %0;
    ubr ^if.then28;
  ^b33:
    i32 %296 = load i32* %0;
    ubr ^while.header11;
  ^if.else39:
    i1 %297 = icmp eq i32 %277, i32 10;
    cbr i1 %297(prob = 0.5), ^if.then25, ^if.else42;
  ^if.else40:
    i1 %298 = icmp eq i32 %261, i32 13;
    cbr i1 %298(prob = 0.5), ^if.then23, ^b24;
  ^if.else41:
    i32 %299 = load i32* %0;
    i32* %300 = getelementptr &(i32* %buf)[i32 %299];
    i32 %301 = load i32* %300;
    i1 %302 = icmp eq i32 %301, i32 9;
    cbr i1 %302(prob = 0.5), ^if.then28, ^if.else43;
  ^if.then27:
    i32 %303 = phi [^if.then26, i32 %291] [^while.body4, i32 %313];
    i32 %304 = add i32 %303, i32 1;
    store i32* %0 with i32 %304;
    ubr ^while.header10;
  ^while.header10:
    i32 %305 = phi [^indirect11, i32 %290] [^if.then26, i32 %291] [^if.then27, i32 %304];
    i1 %306 = icmp sgt i32 %len, i32 %305;
    cbr i1 %306(prob = 0.984615), ^while.body4, ^b5;
  ^if.then28:
    i32 %307 = phi [^indirect12, i32 %295] [^if.else41, i32 %299] [^if.else43, i32 %299] [^if.else44, i32 %299];
    i32 %308 = add i32 %307, i32 1;
    store i32* %0 with i32 %308;
    ubr ^while.header9;
  ^if.else42:
    i1 %309 = icmp eq i32 %277, i32 13;
    cbr i1 %309(prob = 0.5), ^if.then25, ^b27;
  ^while.header11:
    i32 %310 = phi [^b33, i32 %296] [^if.then29, i32 %335];
    i1 %311 = icmp sle i32 %len, i32 %310;
    cbr i1 %311(prob = 0.5), ^b34, ^b35;
  ^if.else43:
    i1 %312 = icmp eq i32 %301, i32 10;
    cbr i1 %312(prob = 0.5), ^if.then28, ^if.else44;
  ^while.body4:
    i32 %313 = load i32* %0;
    i32* %314 = getelementptr &(i32* %buf)[i32 %313];
    i32 %315 = load i32* %314;
    i32 %316 = add i32 %315, i32 -48;
    i1 %317 = icmp uge i32 %316, i32 10;
    cbr i1 %317(prob = 0.5), ^b5, ^if.then27;
  ^b34:
    i32 %318 = load i32* %0;
    i32* %319 = getelementptr &(i32* %buf)[i32 %318];
    i32 %320 = load i32* %319;
    i1 %321 = icmp eq i32 %320, i32 44;
    cbr i1 %321(prob = 0.984615), ^while.body5, ^while.header12;
  ^b35:
    i32* %322 = getelementptr &(i32* %buf)[i32 %310];
    i32 %323 = load i32* %322;
    i1 %324 = icmp eq i32 %323, i32 32;
    cbr i1 %324(prob = 0.5), ^indirect13, ^if.else45;
  ^if.else44:
    i1 %325 = icmp eq i32 %301, i32 13;
    cbr i1 %325(prob = 0.5), ^if.then28, ^b31;
  ^while.body5:
    i32 %326 = add i32 %318, i32 1;
    store i32* %0 with i32 %326;
    ubr ^while.header13;
  ^indirect13:
    i32 %327 = load i32* %0;
    ubr ^if.then29;
  ^while.header12:
    i32 %328 = phi [^b34, i32 %318] [^if.then30, i32 %361];
    i1 %329 = icmp sle i32 %len, i32 %328;
    cbr i1 %329(prob = 0.5), ^b36, ^b37;
  ^if.else45:
    i32 %330 = load i32* %0;
    i32* %331 = getelementptr &(i32* %buf)[i32 %330];
    i32 %332 = load i32* %331;
    i1 %333 = icmp eq i32 %332, i32 9;
    cbr i1 %333(prob = 0.5), ^if.then29, ^if.else46;
  ^if.then29:
    i32 %334 = phi [^indirect13, i32 %327] [^if.else45, i32 %330] [^if.else46, i32 %330] [^if.else49, i32 %330];
    i32 %335 = add i32 %334, i32 1;
    store i32* %0 with i32 %335;
    ubr ^while.header11;
  ^while.header13:
    i32 %336 = phi [^while.body5, i32 %326] [^if.then31, i32 %368];
    i1 %337 = icmp sle i32 %len, i32 %336;
    cbr i1 %337(prob = 0.5), ^b38, ^b39;
  ^b36:
    i32 %338 = load i32* %0;
    i1 %339 = icmp sle i32 %len, i32 %338;
    cbr i1 %339(prob = 0.5), ^b5, ^if.else47;
  ^b37:
    i32* %340 = getelementptr &(i32* %buf)[i32 %328];
    i32 %341 = load i32* %340;
    i1 %342 = icmp eq i32 %341, i32 32;
    cbr i1 %342(prob = 0.5), ^indirect14, ^if.else48;
  ^if.else46:
    i1 %343 = icmp eq i32 %332, i32 10;
    cbr i1 %343(prob = 0.5), ^if.then29, ^if.else49;
  ^b38:
    i32 %344 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %345 = icmp eq i32 %344, i32 0;
    cbr i1 %345(prob = 0.5), ^b5, ^b40;
  ^indirect14:
    i32 %346 = load i32* %0;
    ubr ^if.then30;
  ^b39:
    i32* %347 = getelementptr &(i32* %buf)[i32 %336];
    i32 %348 = load i32* %347;
    i1 %349 = icmp eq i32 %348, i32 32;
    cbr i1 %349(prob = 0.5), ^indirect15, ^if.else50;
  ^if.else47:
    i32* %350 = getelementptr &(i32* %buf)[i32 %338];
    i32 %351 = load i32* %350;
    i1 %352 = icmp neq i32 %351, i32 125;
    cbr i1 %352(prob = 0.5), ^b5, ^if.then11;
  ^if.else48:
    i32 %353 = load i32* %0;
    i32* %354 = getelementptr &(i32* %buf)[i32 %353];
    i32 %355 = load i32* %354;
    i1 %356 = icmp eq i32 %355, i32 9;
    cbr i1 %356(prob = 0.5), ^if.then30, ^if.else51;
  ^if.else49:
    i1 %357 = icmp eq i32 %332, i32 13;
    cbr i1 %357(prob = 0.5), ^if.then29, ^b34;
  ^indirect15:
    i32 %358 = load i32* %0;
    ubr ^if.then31;
  ^b40:
    i32 %359 = load i32* %0;
    ubr ^while.header14;
  ^if.then30:
    i32 %360 = phi [^indirect14, i32 %346] [^if.else48, i32 %353] [^if.else51, i32 %353] [^if.else53, i32 %353];
    i32 %361 = add i32 %360, i32 1;
    store i32* %0 with i32 %361;
    ubr ^while.header12;
  ^if.else50:
    i32 %362 = load i32* %0;
    i32* %363 = getelementptr &(i32* %buf)[i32 %362];
    i32 %364 = load i32* %363;
    i1 %365 = icmp eq i32 %364, i32 9;
    cbr i1 %365(prob = 0.5), ^if.then31, ^if.else52;
  ^if.else51:
    i1 %366 = icmp eq i32 %355, i32 10;
    cbr i1 %366(prob = 0.5), ^if.then30, ^if.else53;
  ^if.then31:
    i32 %367 = phi [^indirect15, i32 %358] [^if.else50, i32 %362] [^if.else52, i32 %362] [^if.else54, i32 %362];
    i32 %368 = add i32 %367, i32 1;
    store i32* %0 with i32 %368;
    ubr ^while.header13;
  ^while.header14:
    i32 %369 = phi [^b40, i32 %359] [^if.then32, i32 %388];
    i1 %370 = icmp sle i32 %len, i32 %369;
    cbr i1 %370(prob = 0.5), ^b41, ^b42;
  ^if.else52:
    i1 %371 = icmp eq i32 %364, i32 10;
    cbr i1 %371(prob = 0.5), ^if.then31, ^if.else54;
  ^if.else53:
    i1 %372 = icmp eq i32 %355, i32 13;
    cbr i1 %372(prob = 0.5), ^if.then30, ^b36;
  ^b41:
    i32 %373 = load i32* %0;
    i1 %374 = icmp sle i32 %len, i32 %373;
    cbr i1 %374(prob = 0.5), ^b5, ^b43;
  ^b42:
    i32* %375 = getelementptr &(i32* %buf)[i32 %369];
    i32 %376 = load i32* %375;
    i1 %377 = icmp eq i32 %376, i32 32;
    cbr i1 %377(prob = 0.5), ^indirect16, ^if.else55;
  ^if.else54:
    i1 %378 = icmp eq i32 %364, i32 13;
    cbr i1 %378(prob = 0.5), ^if.then31, ^b38;
  ^indirect16:
    i32 %379 = load i32* %0;
    ubr ^if.then32;
  ^b43:
    i32* %380 = getelementptr &(i32* %buf)[i32 %373];
    i32 %381 = load i32* %380;
    i1 %382 = icmp neq i32 %381, i32 58;
    cbr i1 %382(prob = 0.5), ^b5, ^b44;
  ^if.else55:
    i32 %383 = load i32* %0;
    i32* %384 = getelementptr &(i32* %buf)[i32 %383];
    i32 %385 = load i32* %384;
    i1 %386 = icmp eq i32 %385, i32 9;
    cbr i1 %386(prob = 0.5), ^if.then32, ^if.else56;
  ^if.then32:
    i32 %387 = phi [^indirect16, i32 %379] [^if.else55, i32 %383] [^if.else56, i32 %383] [^if.else57, i32 %383];
    i32 %388 = add i32 %387, i32 1;
    store i32* %0 with i32 %388;
    ubr ^while.header14;
  ^b44:
    i32 %389 = add i32 %373, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.header15;
  ^if.else56:
    i1 %390 = icmp eq i32 %385, i32 10;
    cbr i1 %390(prob = 0.5), ^if.then32, ^if.else57;
  ^while.header15:
    i32 %391 = phi [^b44, i32 %389] [^if.then33, i32 %405];
    i1 %392 = icmp sle i32 %len, i32 %391;
    cbr i1 %392(prob = 0.5), ^b45, ^b46;
  ^if.else57:
    i1 %393 = icmp eq i32 %385, i32 13;
    cbr i1 %393(prob = 0.5), ^if.then32, ^b41;
  ^b45:
    i32 %394 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %395 = icmp neq i32 %394, i32 0;
    cbr i1 %395(prob = 0.5), ^b33, ^b5;
  ^b46:
    i32* %396 = getelementptr &(i32* %buf)[i32 %391];
    i32 %397 = load i32* %396;
    i1 %398 = icmp eq i32 %397, i32 32;
    cbr i1 %398(prob = 0.5), ^indirect17, ^if.else58;
  ^indirect17:
    i32 %399 = load i32* %0;
    ubr ^if.then33;
  ^if.else58:
    i32 %400 = load i32* %0;
    i32* %401 = getelementptr &(i32* %buf)[i32 %400];
    i32 %402 = load i32* %401;
    i1 %403 = icmp eq i32 %402, i32 9;
    cbr i1 %403(prob = 0.5), ^if.then33, ^if.else59;
  ^if.then33:
    i32 %404 = phi [^indirect17, i32 %399] [^if.else58, i32 %400] [^if.else59, i32 %400] [^if.else60, i32 %400];
    i32 %405 = add i32 %404, i32 1;
    store i32* %0 with i32 %405;
    ubr ^while.header15;
  ^if.else59:
    i1 %406 = icmp eq i32 %402, i32 10;
    cbr i1 %406(prob = 0.5), ^if.then33, ^if.else60;
  ^if.else60:
    i1 %407 = icmp eq i32 %402, i32 13;
    cbr i1 %407(prob = 0.5), ^if.then33, ^b45;
}
internal [50000000 * i32]* @buffer, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32, align 4;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.header:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %28];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.header1;
  ^b2:
    i32* %17 = getelementptr &(i32* %5)[i32 %13];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^indirect1, ^if.else;
  ^indirect1:
    i32 %20 = load i32* %pos;
    ubr ^if.then;
  ^while.header1:
    i32 %21 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %22 = icmp sle i32 %4, i32 %21;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i32 %23 = load i32* %pos;
    i32* %24 = getelementptr &(i32* %5)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = icmp eq i32 %25, i32 9;
    cbr i1 %26(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %27 = phi [^indirect1, i32 %20] [^if.else, i32 %23] [^if.else1, i32 %23] [^if.else4, i32 %23];
    i32 %28 = add i32 %27, i32 1;
    store i32* %pos with i32 %28;
    ubr ^while.header;
  ^b3:
    i1 %29 = icmp neq i32 %15, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else2;
  ^b4:
    i32* %30 = getelementptr &(i32* %5)[i32 %21];
    i32 %31 = load i32* %30;
    i1 %32 = icmp eq i32 %31, i32 32;
    cbr i1 %32(prob = 0.5), ^indirect2, ^if.else3;
  ^if.else1:
    i1 %33 = icmp eq i32 %25, i32 10;
    cbr i1 %33(prob = 0.5), ^if.then, ^if.else4;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^indirect2:
    i32 %34 = load i32* %pos;
    ubr ^if.then2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.else3:
    i32 %35 = load i32* %pos;
    i32* %36 = getelementptr &(i32* %5)[i32 %35];
    i32 %37 = load i32* %36;
    i1 %38 = icmp eq i32 %37, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then2, ^if.else5;
  ^if.else4:
    i1 %39 = icmp eq i32 %25, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then, ^b1;
  ^if.then2:
    i32 %40 = phi [^indirect2, i32 %34] [^if.else3, i32 %35] [^if.else5, i32 %35] [^if.else6, i32 %35];
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.header1;
  ^if.else5:
    i1 %42 = icmp eq i32 %37, i32 10;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else6;
  ^b5:
    i32 %43 = phi [^if.then1, i32 0] [^if.else2, i32 1];
    ret i32 %43;
  ^if.else6:
    i1 %44 = icmp eq i32 %37, i32 13;
    cbr i1 %44(prob = 0.5), ^if.then2, ^b3;
}
