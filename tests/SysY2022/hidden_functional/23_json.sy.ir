internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else, i32 3] [^if.else4, i32 2] [^if.else9, i32 1] [^if.else14, i32 5] [^if.else18, i32 6];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^if.then:
    i32 %5 = load i32* %0;
    i32* %6 = getelementptr &(i32* %buf)[i32 %5];
    i32 %7 = load i32* %6;
    i1 %8 = icmp eq i32 %7, i32 123;
    cbr i1 %8(prob = 0.5), ^entry, ^if.else;
  ^if.then1:
    i32 %9 = load i32* %0;
    i32 %10 = add i32 %9, i32 1;
    store i32* %0 with i32 %10;
    ubr ^while.header;
  ^if.then2:
    i32 %11 = load i32* %0;
    i32* %12 = getelementptr &(i32* %buf)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = icmp eq i32 %13, i32 43;
    i1 %15 = icmp eq i32 %13, i32 45;
    i1 %16 = or i1 %14, i1 %15;
    cbr i1 %16(prob = 0.75), ^if.then8, ^b;
  ^if.then3:
    i32 %17 = load i32* %0;
    i32 %18 = add i32 %17, i32 1;
    store i32* %0 with i32 %18;
    ubr ^while.header1;
  ^if.then4:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.header2;
  ^if.then5:
    i32 %21 = load i32* %0;
    i32 %22 = add i32 %21, i32 3;
    i1 %23 = icmp sle i32 %len, i32 %22;
    cbr i1 %23(prob = 0.5), ^b3, ^if.else1;
  ^if.then6:
    i32 %24 = load i32* %0;
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = icmp sle i32 %len, i32 %25;
    cbr i1 %26(prob = 0.5), ^b3, ^if.else2;
  ^if.then7:
    i32 %27 = load i32* %0;
    i32 %28 = add i32 %27, i32 3;
    i1 %29 = icmp sle i32 %len, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^if.else3;
  ^if.then8:
    i32 %30 = add i32 %11, i32 1;
    store i32* %0 with i32 %30;
    ubr ^b;
  ^entry:
    i32 %31 = phi [^2, i32 %4] [^if.then, i32 %5];
    i32 %32 = phi [^2, i32 %3] [^if.then, i32 4];
    i1 %33 = icmp sle i32 %len, i32 %31;
    cbr i1 %33(prob = 0.5), ^b3, ^while.header3;
  ^if.else:
    i1 %34 = icmp eq i32 %7, i32 91;
    cbr i1 %34(prob = 0.5), ^2, ^if.else4;
  ^b:
    i32 %35 = phi [^if.then2, i32 %11] [^if.then8, i32 %30];
    i1 %36 = icmp sle i32 %len, i32 %35;
    cbr i1 %36(prob = 0.5), ^b3, ^if.else5;
  ^while.header:
    i32 %37 = phi [^if.then1, i32 %10] [^b4, i32 %100];
    i1 %38 = icmp sgt i32 %len, i32 %37;
    cbr i1 %38(prob = 0.984615), ^while.body, ^indirect;
  ^while.header1:
    i32 %39 = phi [^if.then3, i32 %18] [^if.then9, i32 %113];
    i1 %40 = icmp sle i32 %len, i32 %39;
    cbr i1 %40(prob = 0.5), ^indirect1, ^b1;
  ^while.header2:
    i32 %41 = phi [^if.then4, i32 %20] [^if.then10, i32 %122];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^indirect2, ^b2;
  ^if.else1:
    i32* %43 = getelementptr &(i32* %buf)[i32 %21];
    i32 %44 = load i32* %43;
    i1 %45 = icmp neq i32 %44, i32 116;
    cbr i1 %45(prob = 0.5), ^b3, ^if.else6;
  ^if.else2:
    i32* %46 = getelementptr &(i32* %buf)[i32 %24];
    i32 %47 = load i32* %46;
    i1 %48 = icmp neq i32 %47, i32 102;
    cbr i1 %48(prob = 0.5), ^b3, ^if.else7;
  ^if.else3:
    i32* %49 = getelementptr &(i32* %buf)[i32 %27];
    i32 %50 = load i32* %49;
    i1 %51 = icmp neq i32 %50, i32 110;
    cbr i1 %51(prob = 0.5), ^b3, ^if.else8;
  ^while.header3:
    i32 %52 = phi [^entry, i32 %31] [^if.then11, i32 %136];
    i1 %53 = icmp sle i32 %len, i32 %52;
    cbr i1 %53(prob = 0.5), ^b5, ^b6;
  ^indirect:
    i32 %54 = load i32* %0;
    ubr ^b7;
  ^indirect1:
    i32 %55 = load i32* %0;
    ubr ^b8;
  ^if.else4:
    i1 %56 = icmp eq i32 %7, i32 34;
    cbr i1 %56(prob = 0.5), ^2, ^if.else9;
  ^while.body:
    i32 %57 = load i32* %0;
    i32* %58 = getelementptr &(i32* %buf)[i32 %57];
    i32 %59 = load i32* %58;
    i1 %60 = icmp eq i32 %59, i32 34;
    cbr i1 %60(prob = 0.5), ^b7, ^b4;
  ^indirect2:
    i32 %61 = load i32* %0;
    ubr ^b9;
  ^if.else5:
    i32 %62 = load i32* %0;
    i32* %63 = getelementptr &(i32* %buf)[i32 %62];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %64, i32 -48;
    i1 %66 = icmp uge i32 %65, i32 10;
    cbr i1 %66(prob = 0.5), ^b3, ^while.header4;
  ^b1:
    i32 %67 = load i32* %0;
    i32* %68 = getelementptr &(i32* %buf)[i32 %67];
    i32 %69 = load i32* %68;
    i1 %70 = icmp eq i32 %69, i32 32;
    i1 %71 = icmp eq i32 %69, i32 9;
    i1 %72 = or i1 %70, i1 %71;
    i1 %73 = icmp eq i32 %69, i32 10;
    i1 %74 = icmp eq i32 %69, i32 13;
    i1 %75 = or i1 %73, i1 %74;
    i1 %76 = or i1 %72, i1 %75;
    cbr i1 %76(prob = 0.9375), ^if.then9, ^b8;
  ^b2:
    i32 %77 = load i32* %0;
    i32* %78 = getelementptr &(i32* %buf)[i32 %77];
    i32 %79 = load i32* %78;
    i1 %80 = icmp eq i32 %79, i32 32;
    i1 %81 = icmp eq i32 %79, i32 9;
    i1 %82 = or i1 %80, i1 %81;
    i1 %83 = icmp eq i32 %79, i32 10;
    i1 %84 = icmp eq i32 %79, i32 13;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = or i1 %82, i1 %85;
    cbr i1 %86(prob = 0.9375), ^if.then10, ^b9;
  ^if.else6:
    i32* %87 = getelementptr &(i32* %43)[i64 1];
    i32 %88 = load i32* %87;
    i1 %89 = icmp neq i32 %88, i32 114;
    cbr i1 %89(prob = 0.5), ^b3, ^if.else10;
  ^b3:
    i32 %90 = phi [^if.then5, i32 0] [^if.then6, i32 0] [^if.then7, i32 0] [^entry, i32 0] [^b, i32 0] [^if.else1, i32 0] [^if.else2, i32 0] [^if.else3, i32 0] [^if.else5, i32 0] [^if.else6, i32 0] [^if.else7, i32 0] [^if.else8, i32 0] [^b5, i32 0] [^b7, i32 0] [^if.else10, i32 0] [^if.else11, i32 0] [^if.else12, i32 0] [^if.else13, i32 0] [^b10, i32 0] [^b11, i32 0] [^if.else15, i32 0] [^if.else16, i32 0] [^if.else17, i32 0] [^if.then14, i32 1] [^b16, i32 1] [^if.else19, i32 0] [^if.else20, i32 0] [^b17, i32 1] [^if.then16, i32 %192] [^b18, i32 1] [^if.then19, i32 1] [^b22, i32 0] [^b24, i32 0] [^b27, i32 0] [^b30, i32 0] [^while.header10, i32 1] [^b31, i32 0] [^while.body4, i32 1] [^b33, i32 0] [^b38, i32 0] [^b42, i32 0] [^if.else21, i32 0] [^b44, i32 0] [^b45, i32 0] [^b47, i32 0];
    ret i32 %90;
  ^if.else7:
    i32* %91 = getelementptr &(i32* %46)[i64 1];
    i32 %92 = load i32* %91;
    i1 %93 = icmp neq i32 %92, i32 97;
    cbr i1 %93(prob = 0.5), ^b3, ^if.else11;
  ^if.else8:
    i32* %94 = getelementptr &(i32* %49)[i64 1];
    i32 %95 = load i32* %94;
    i1 %96 = icmp neq i32 %95, i32 117;
    cbr i1 %96(prob = 0.5), ^b3, ^if.else12;
  ^b4:
    i1 %97 = icmp eq i32 %59, i32 92;
    i32 %98 = zext i1 %97 to i32;
    i32 %99 = add i32 %57, i32 1;
    i32 %100 = add i32 %98, i32 %99;
    store i32* %0 with i32 %100;
    ubr ^while.header;
  ^b5:
    switch i32 %32, [0, ^if.then], [1, ^if.then2], [2, ^if.then1], [3, ^if.then3], [4, ^if.then4], [5, ^if.then5], [6, ^if.then6], [7, ^if.then7], default ^b3;
  ^b6:
    i32 %101 = load i32* %0;
    i32* %102 = getelementptr &(i32* %buf)[i32 %101];
    i32 %103 = load i32* %102;
    i1 %104 = icmp eq i32 %103, i32 32;
    i1 %105 = icmp eq i32 %103, i32 9;
    i1 %106 = or i1 %104, i1 %105;
    i1 %107 = icmp eq i32 %103, i32 10;
    i1 %108 = icmp eq i32 %103, i32 13;
    i1 %109 = or i1 %107, i1 %108;
    i1 %110 = or i1 %106, i1 %109;
    cbr i1 %110(prob = 0.9375), ^if.then11, ^b5;
  ^b7:
    i32 %111 = phi [^indirect, i32 %54] [^while.body, i32 %57];
    i1 %112 = icmp sle i32 %len, i32 %111;
    cbr i1 %112(prob = 0.5), ^b3, ^if.else13;
  ^if.then9:
    i32 %113 = add i32 %67, i32 1;
    store i32* %0 with i32 %113;
    ubr ^while.header1;
  ^if.else9:
    i1 %114 = icmp eq i32 %7, i32 43;
    i1 %115 = icmp eq i32 %7, i32 45;
    i1 %116 = or i1 %114, i1 %115;
    i32 %117 = add i32 %7, i32 -48;
    i1 %118 = icmp ult i32 %117, i32 10;
    i1 %119 = or i1 %116, i1 %118;
    cbr i1 %119(prob = 0.875), ^2, ^if.else14;
  ^b8:
    i32 %120 = phi [^indirect1, i32 %55] [^b1, i32 %67];
    i1 %121 = icmp sgt i32 %len, i32 %120;
    cbr i1 %121(prob = 0.5), ^if.then12, ^b10;
  ^if.then10:
    i32 %122 = add i32 %77, i32 1;
    store i32* %0 with i32 %122;
    ubr ^while.header2;
  ^while.header4:
    i32 %123 = phi [^if.else5, i32 %62] [^b12, i32 %169];
    i1 %124 = icmp sgt i32 %len, i32 %123;
    cbr i1 %124(prob = 0.984615), ^while.body1, ^indirect3;
  ^b9:
    i32 %125 = phi [^indirect2, i32 %61] [^b2, i32 %77];
    i1 %126 = icmp sgt i32 %len, i32 %125;
    cbr i1 %126(prob = 0.5), ^if.then13, ^b11;
  ^if.else10:
    i32* %127 = getelementptr &(i32* %43)[i64 2];
    i32 %128 = load i32* %127;
    i1 %129 = icmp neq i32 %128, i32 117;
    cbr i1 %129(prob = 0.5), ^b3, ^if.else15;
  ^if.else11:
    i32* %130 = getelementptr &(i32* %46)[i64 2];
    i32 %131 = load i32* %130;
    i1 %132 = icmp neq i32 %131, i32 108;
    cbr i1 %132(prob = 0.5), ^b3, ^if.else16;
  ^if.else12:
    i32* %133 = getelementptr &(i32* %49)[i64 2];
    i32 %134 = load i32* %133;
    i1 %135 = icmp neq i32 %134, i32 108;
    cbr i1 %135(prob = 0.5), ^b3, ^if.else17;
  ^if.then11:
    i32 %136 = add i32 %101, i32 1;
    store i32* %0 with i32 %136;
    ubr ^while.header3;
  ^indirect3:
    i32 %137 = load i32* %0;
    ubr ^b14;
  ^if.else13:
    i32 %138 = load i32* %0;
    i32* %139 = getelementptr &(i32* %buf)[i32 %138];
    i32 %140 = load i32* %139;
    i1 %141 = icmp neq i32 %140, i32 34;
    cbr i1 %141(prob = 0.5), ^b3, ^if.then14;
  ^if.then12:
    i32* %142 = getelementptr &(i32* %buf)[i32 %120];
    i32 %143 = load i32* %142;
    i1 %144 = icmp eq i32 %143, i32 93;
    cbr i1 %144(prob = 0.5), ^if.then14, ^b10;
  ^if.else14:
    i1 %145 = icmp eq i32 %7, i32 116;
    cbr i1 %145(prob = 0.5), ^2, ^if.else18;
  ^while.body1:
    i32 %146 = load i32* %0;
    i32* %147 = getelementptr &(i32* %buf)[i32 %146];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %148, i32 -48;
    i1 %150 = icmp uge i32 %149, i32 10;
    cbr i1 %150(prob = 0.5), ^b14, ^b12;
  ^b10:
    i32 %151 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %152 = icmp eq i32 %151, i32 0;
    cbr i1 %152(prob = 0.5), ^b3, ^b13;
  ^if.then13:
    i32* %153 = getelementptr &(i32* %buf)[i32 %125];
    i32 %154 = load i32* %153;
    i1 %155 = icmp eq i32 %154, i32 125;
    cbr i1 %155(prob = 0.5), ^if.then14, ^b11;
  ^b11:
    i32 %156 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %157 = icmp eq i32 %156, i32 0;
    cbr i1 %157(prob = 0.5), ^b3, ^b15;
  ^if.else15:
    i32* %158 = getelementptr &(i32* %43)[i64 3];
    i32 %159 = load i32* %158;
    i1 %160 = icmp neq i32 %159, i32 101;
    cbr i1 %160(prob = 0.5), ^b3, ^b16;
  ^if.else16:
    i32* %161 = getelementptr &(i32* %46)[i64 3];
    i32 %162 = load i32* %161;
    i1 %163 = icmp neq i32 %162, i32 115;
    cbr i1 %163(prob = 0.5), ^b3, ^if.else19;
  ^if.else17:
    i32* %164 = getelementptr &(i32* %49)[i64 3];
    i32 %165 = load i32* %164;
    i1 %166 = icmp neq i32 %165, i32 108;
    cbr i1 %166(prob = 0.5), ^b3, ^b16;
  ^if.then14:
    i32 %167 = phi [^if.else13, i32 %138] [^if.then12, i32 %120] [^if.then13, i32 %125] [^b33, i32 %289] [^if.else21, i32 %365];
    i32 %168 = add i32 %167, i32 1;
    store i32* %0 with i32 %168;
    ubr ^b3;
  ^b12:
    i32 %169 = add i32 %146, i32 1;
    store i32* %0 with i32 %169;
    ubr ^while.header4;
  ^b13:
    i32 %170 = load i32* %0;
    ubr ^while.header5;
  ^b14:
    i32 %171 = phi [^indirect3, i32 %137] [^while.body1, i32 %146];
    i1 %172 = icmp sgt i32 %len, i32 %171;
    cbr i1 %172(prob = 0.5), ^if.then15, ^indirect4;
  ^b15:
    i32 %173 = load i32* %0;
    ubr ^while.header6;
  ^if.else18:
    i1 %174 = icmp eq i32 %7, i32 102;
    cbr i1 %174(prob = 0.5), ^2, ^if.else20;
  ^b16:
    i32 %175 = phi [^if.else15, i32 %21] [^if.else17, i32 %27];
    i32 %176 = add i32 %175, i32 4;
    store i32* %0 with i32 %176;
    ubr ^b3;
  ^if.else19:
    i32* %177 = getelementptr &(i32* %46)[i64 4];
    i32 %178 = load i32* %177;
    i1 %179 = icmp neq i32 %178, i32 101;
    cbr i1 %179(prob = 0.5), ^b3, ^b17;
  ^indirect4:
    i32 %180 = load i32* %0;
    ubr ^b18;
  ^if.then15:
    i32 %181 = load i32* %0;
    i32* %182 = getelementptr &(i32* %buf)[i32 %181];
    i32 %183 = load i32* %182;
    i1 %184 = icmp eq i32 %183, i32 46;
    cbr i1 %184(prob = 0.5), ^if.then17, ^b18;
  ^while.header5:
    i32 %185 = phi [^b13, i32 %170] [^if.then18, i32 %223];
    i1 %186 = icmp sle i32 %len, i32 %185;
    cbr i1 %186(prob = 0.5), ^indirect5, ^b19;
  ^if.else20:
    i1 %187 = icmp eq i32 %7, i32 110;
    cbr i1 %187(prob = 0.5), ^if.then16, ^b3;
  ^while.header6:
    i32 %188 = phi [^b15, i32 %173] [^if.then20, i32 %232];
    i1 %189 = icmp sle i32 %len, i32 %188;
    cbr i1 %189(prob = 0.5), ^indirect6, ^b20;
  ^b17:
    i32 %190 = add i32 %24, i32 5;
    store i32* %0 with i32 %190;
    ubr ^b3;
  ^indirect5:
    i32 %191 = load i32* %0;
    ubr ^b21;
  ^if.then16:
    i32 %192 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b3;
  ^if.then17:
    i32 %193 = phi [^if.then15, i32 %181] [^while.body2, i32 %194];
    i32 %194 = add i32 %193, i32 1;
    i1 %195 = icmp sgt i32 %len, i32 %194;
    store i32* %0 with i32 %194;
    cbr i1 %195(prob = 0.984615), ^while.body2, ^b18;
  ^indirect6:
    i32 %196 = load i32* %0;
    ubr ^b22;
  ^b18:
    i32 %197 = phi [^indirect4, i32 %180] [^if.then15, i32 %181] [^if.then17, i32 %194] [^while.body2, i32 %194];
    i1 %198 = icmp sgt i32 %len, i32 %197;
    cbr i1 %198(prob = 0.5), ^if.then19, ^b3;
  ^b19:
    i32 %199 = load i32* %0;
    i32* %200 = getelementptr &(i32* %buf)[i32 %199];
    i32 %201 = load i32* %200;
    i1 %202 = icmp eq i32 %201, i32 32;
    i1 %203 = icmp eq i32 %201, i32 9;
    i1 %204 = or i1 %202, i1 %203;
    i1 %205 = icmp eq i32 %201, i32 10;
    i1 %206 = icmp eq i32 %201, i32 13;
    i1 %207 = or i1 %205, i1 %206;
    i1 %208 = or i1 %204, i1 %207;
    cbr i1 %208(prob = 0.9375), ^if.then18, ^b21;
  ^b20:
    i32 %209 = load i32* %0;
    i32* %210 = getelementptr &(i32* %buf)[i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = icmp eq i32 %211, i32 32;
    i1 %213 = icmp eq i32 %211, i32 9;
    i1 %214 = or i1 %212, i1 %213;
    i1 %215 = icmp eq i32 %211, i32 10;
    i1 %216 = icmp eq i32 %211, i32 13;
    i1 %217 = or i1 %215, i1 %216;
    i1 %218 = or i1 %214, i1 %217;
    cbr i1 %218(prob = 0.9375), ^if.then20, ^b22;
  ^while.body2:
    i32* %219 = getelementptr &(i32* %buf)[i32 %194];
    i32 %220 = load i32* %219;
    i32 %221 = add i32 %220, i32 -48;
    i1 %222 = icmp ult i32 %221, i32 10;
    cbr i1 %222(prob = 0.5), ^if.then17, ^b18;
  ^if.then18:
    i32 %223 = add i32 %199, i32 1;
    store i32* %0 with i32 %223;
    ubr ^while.header5;
  ^if.then19:
    i32 %224 = load i32* %0;
    i32* %225 = getelementptr &(i32* %buf)[i32 %224];
    i32 %226 = load i32* %225;
    i1 %227 = icmp eq i32 %226, i32 101;
    cbr i1 %227(prob = 0.5), ^if.then21, ^b3;
  ^b21:
    i32 %228 = phi [^indirect5, i32 %191] [^b19, i32 %199];
    i32* %229 = getelementptr &(i32* %buf)[i32 %228];
    i32 %230 = load i32* %229;
    i1 %231 = icmp eq i32 %230, i32 44;
    cbr i1 %231(prob = 0.984615), ^while.body3, ^b23;
  ^if.then20:
    i32 %232 = add i32 %209, i32 1;
    store i32* %0 with i32 %232;
    ubr ^while.header6;
  ^b22:
    i32 %233 = phi [^indirect6, i32 %196] [^b20, i32 %209];
    i1 %234 = icmp sle i32 %len, i32 %233;
    cbr i1 %234(prob = 0.5), ^b3, ^b24;
  ^while.body3:
    i32 %235 = add i32 %228, i32 1;
    store i32* %0 with i32 %235;
    ubr ^while.header7;
  ^b23:
    i32 %236 = load i32* %0;
    ubr ^while.header8;
  ^if.then21:
    i32 %237 = add i32 %224, i32 1;
    i1 %238 = icmp sgt i32 %len, i32 %237;
    store i32* %0 with i32 %237;
    cbr i1 %238(prob = 0.5), ^if.then22, ^b25;
  ^b24:
    i32* %239 = getelementptr &(i32* %buf)[i32 %233];
    i32 %240 = load i32* %239;
    i1 %241 = icmp neq i32 %240, i32 58;
    cbr i1 %241(prob = 0.5), ^b3, ^b26;
  ^if.then22:
    i32* %242 = getelementptr &(i32* %225)[i64 1];
    i32 %243 = load i32* %242;
    i1 %244 = icmp eq i32 %243, i32 43;
    cbr i1 %244(prob = 0.5), ^if.then23, ^indirect7;
  ^while.header7:
    i32 %245 = phi [^while.body3, i32 %235] [^if.then26, i32 %287];
    i1 %246 = icmp sle i32 %len, i32 %245;
    cbr i1 %246(prob = 0.5), ^b27, ^b28;
  ^b25:
    i32 %247 = phi [^if.then21, i32 %237] [^if.then23, i32 %253] [^indirect7, i32 %254];
    i1 %248 = icmp sgt i32 %len, i32 %247;
    cbr i1 %248(prob = 0.5), ^if.then24, ^indirect9;
  ^while.header8:
    i32 %249 = phi [^b23, i32 %236] [^if.then27, i32 %288];
    i1 %250 = icmp sle i32 %len, i32 %249;
    cbr i1 %250(prob = 0.5), ^indirect8, ^b29;
  ^b26:
    i32 %251 = add i32 %233, i32 1;
    store i32* %0 with i32 %251;
    ubr ^while.header9;
  ^if.then23:
    i32 %252 = load i32* %0;
    i32 %253 = add i32 %252, i32 1;
    store i32* %0 with i32 %253;
    ubr ^b25;
  ^indirect7:
    i32 %254 = load i32* %0;
    ubr ^b25;
  ^indirect8:
    i32 %255 = load i32* %0;
    ubr ^b30;
  ^indirect9:
    i32 %256 = load i32* %0;
    ubr ^while.header10;
  ^b27:
    i32 %257 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %258 = icmp neq i32 %257, i32 0;
    cbr i1 %258(prob = 0.5), ^b13, ^b3;
  ^if.then24:
    i32 %259 = load i32* %0;
    i32* %260 = getelementptr &(i32* %buf)[i32 %259];
    i32 %261 = load i32* %260;
    i1 %262 = icmp eq i32 %261, i32 45;
    cbr i1 %262(prob = 0.5), ^if.then25, ^while.header10;
  ^b28:
    i32 %263 = load i32* %0;
    i32* %264 = getelementptr &(i32* %buf)[i32 %263];
    i32 %265 = load i32* %264;
    i1 %266 = icmp eq i32 %265, i32 32;
    i1 %267 = icmp eq i32 %265, i32 9;
    i1 %268 = or i1 %266, i1 %267;
    i1 %269 = icmp eq i32 %265, i32 10;
    i1 %270 = icmp eq i32 %265, i32 13;
    i1 %271 = or i1 %269, i1 %270;
    i1 %272 = or i1 %268, i1 %271;
    cbr i1 %272(prob = 0.9375), ^if.then26, ^b27;
  ^b29:
    i32 %273 = load i32* %0;
    i32* %274 = getelementptr &(i32* %buf)[i32 %273];
    i32 %275 = load i32* %274;
    i1 %276 = icmp eq i32 %275, i32 32;
    i1 %277 = icmp eq i32 %275, i32 9;
    i1 %278 = or i1 %276, i1 %277;
    i1 %279 = icmp eq i32 %275, i32 10;
    i1 %280 = icmp eq i32 %275, i32 13;
    i1 %281 = or i1 %279, i1 %280;
    i1 %282 = or i1 %278, i1 %281;
    cbr i1 %282(prob = 0.9375), ^if.then27, ^b30;
  ^while.header9:
    i32 %283 = phi [^b26, i32 %251] [^if.then28, i32 %313];
    i1 %284 = icmp sle i32 %len, i32 %283;
    cbr i1 %284(prob = 0.5), ^b31, ^b32;
  ^if.then25:
    i32 %285 = phi [^if.then24, i32 %259] [^while.body4, i32 %305];
    i32 %286 = add i32 %285, i32 1;
    store i32* %0 with i32 %286;
    ubr ^while.header10;
  ^if.then26:
    i32 %287 = add i32 %263, i32 1;
    store i32* %0 with i32 %287;
    ubr ^while.header7;
  ^if.then27:
    i32 %288 = add i32 %273, i32 1;
    store i32* %0 with i32 %288;
    ubr ^while.header8;
  ^b30:
    i32 %289 = phi [^indirect8, i32 %255] [^b29, i32 %273];
    i1 %290 = icmp sle i32 %len, i32 %289;
    cbr i1 %290(prob = 0.5), ^b3, ^b33;
  ^while.header10:
    i32 %291 = phi [^indirect9, i32 %256] [^if.then24, i32 %259] [^if.then25, i32 %286];
    i1 %292 = icmp sgt i32 %len, i32 %291;
    cbr i1 %292(prob = 0.984615), ^while.body4, ^b3;
  ^b31:
    i32 %293 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %294 = icmp eq i32 %293, i32 0;
    cbr i1 %294(prob = 0.5), ^b3, ^b34;
  ^b32:
    i32 %295 = load i32* %0;
    i32* %296 = getelementptr &(i32* %buf)[i32 %295];
    i32 %297 = load i32* %296;
    i1 %298 = icmp eq i32 %297, i32 32;
    i1 %299 = icmp eq i32 %297, i32 9;
    i1 %300 = or i1 %298, i1 %299;
    i1 %301 = icmp eq i32 %297, i32 10;
    i1 %302 = icmp eq i32 %297, i32 13;
    i1 %303 = or i1 %301, i1 %302;
    i1 %304 = or i1 %300, i1 %303;
    cbr i1 %304(prob = 0.9375), ^if.then28, ^b31;
  ^while.body4:
    i32 %305 = load i32* %0;
    i32* %306 = getelementptr &(i32* %buf)[i32 %305];
    i32 %307 = load i32* %306;
    i32 %308 = add i32 %307, i32 -48;
    i1 %309 = icmp uge i32 %308, i32 10;
    cbr i1 %309(prob = 0.5), ^b3, ^if.then25;
  ^b33:
    i32* %310 = getelementptr &(i32* %buf)[i32 %289];
    i32 %311 = load i32* %310;
    i1 %312 = icmp neq i32 %311, i32 93;
    cbr i1 %312(prob = 0.5), ^b3, ^if.then14;
  ^if.then28:
    i32 %313 = add i32 %295, i32 1;
    store i32* %0 with i32 %313;
    ubr ^while.header9;
  ^b34:
    i32 %314 = load i32* %0;
    ubr ^while.header11;
  ^while.header11:
    i32 %315 = phi [^b34, i32 %314] [^if.then29, i32 %328];
    i1 %316 = icmp sle i32 %len, i32 %315;
    cbr i1 %316(prob = 0.5), ^indirect10, ^b35;
  ^indirect10:
    i32 %317 = load i32* %0;
    ubr ^b36;
  ^b35:
    i32 %318 = load i32* %0;
    i32* %319 = getelementptr &(i32* %buf)[i32 %318];
    i32 %320 = load i32* %319;
    i1 %321 = icmp eq i32 %320, i32 32;
    i1 %322 = icmp eq i32 %320, i32 9;
    i1 %323 = or i1 %321, i1 %322;
    i1 %324 = icmp eq i32 %320, i32 10;
    i1 %325 = icmp eq i32 %320, i32 13;
    i1 %326 = or i1 %324, i1 %325;
    i1 %327 = or i1 %323, i1 %326;
    cbr i1 %327(prob = 0.9375), ^if.then29, ^b36;
  ^if.then29:
    i32 %328 = add i32 %318, i32 1;
    store i32* %0 with i32 %328;
    ubr ^while.header11;
  ^b36:
    i32 %329 = phi [^indirect10, i32 %317] [^b35, i32 %318];
    i32* %330 = getelementptr &(i32* %buf)[i32 %329];
    i32 %331 = load i32* %330;
    i1 %332 = icmp eq i32 %331, i32 44;
    cbr i1 %332(prob = 0.984615), ^while.body5, ^b37;
  ^while.body5:
    i32 %333 = add i32 %329, i32 1;
    store i32* %0 with i32 %333;
    ubr ^while.header12;
  ^b37:
    i32 %334 = load i32* %0;
    ubr ^while.header13;
  ^while.header12:
    i32 %335 = phi [^while.body5, i32 %333] [^if.then30, i32 %362];
    i1 %336 = icmp sle i32 %len, i32 %335;
    cbr i1 %336(prob = 0.5), ^b38, ^b39;
  ^while.header13:
    i32 %337 = phi [^b37, i32 %334] [^if.then31, i32 %364];
    i1 %338 = icmp sle i32 %len, i32 %337;
    cbr i1 %338(prob = 0.5), ^indirect11, ^b40;
  ^indirect11:
    i32 %339 = load i32* %0;
    ubr ^b42;
  ^b38:
    i32 %340 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %341 = icmp eq i32 %340, i32 0;
    cbr i1 %341(prob = 0.5), ^b3, ^b41;
  ^b39:
    i32 %342 = load i32* %0;
    i32* %343 = getelementptr &(i32* %buf)[i32 %342];
    i32 %344 = load i32* %343;
    i1 %345 = icmp eq i32 %344, i32 32;
    i1 %346 = icmp eq i32 %344, i32 9;
    i1 %347 = or i1 %345, i1 %346;
    i1 %348 = icmp eq i32 %344, i32 10;
    i1 %349 = icmp eq i32 %344, i32 13;
    i1 %350 = or i1 %348, i1 %349;
    i1 %351 = or i1 %347, i1 %350;
    cbr i1 %351(prob = 0.9375), ^if.then30, ^b38;
  ^b40:
    i32 %352 = load i32* %0;
    i32* %353 = getelementptr &(i32* %buf)[i32 %352];
    i32 %354 = load i32* %353;
    i1 %355 = icmp eq i32 %354, i32 32;
    i1 %356 = icmp eq i32 %354, i32 9;
    i1 %357 = or i1 %355, i1 %356;
    i1 %358 = icmp eq i32 %354, i32 10;
    i1 %359 = icmp eq i32 %354, i32 13;
    i1 %360 = or i1 %358, i1 %359;
    i1 %361 = or i1 %357, i1 %360;
    cbr i1 %361(prob = 0.9375), ^if.then31, ^b42;
  ^if.then30:
    i32 %362 = add i32 %342, i32 1;
    store i32* %0 with i32 %362;
    ubr ^while.header12;
  ^b41:
    i32 %363 = load i32* %0;
    ubr ^while.header14;
  ^if.then31:
    i32 %364 = add i32 %352, i32 1;
    store i32* %0 with i32 %364;
    ubr ^while.header13;
  ^b42:
    i32 %365 = phi [^indirect11, i32 %339] [^b40, i32 %352];
    i1 %366 = icmp sle i32 %len, i32 %365;
    cbr i1 %366(prob = 0.5), ^b3, ^if.else21;
  ^while.header14:
    i32 %367 = phi [^b41, i32 %363] [^if.then32, i32 %383];
    i1 %368 = icmp sle i32 %len, i32 %367;
    cbr i1 %368(prob = 0.5), ^indirect12, ^b43;
  ^if.else21:
    i32* %369 = getelementptr &(i32* %buf)[i32 %365];
    i32 %370 = load i32* %369;
    i1 %371 = icmp neq i32 %370, i32 125;
    cbr i1 %371(prob = 0.5), ^b3, ^if.then14;
  ^indirect12:
    i32 %372 = load i32* %0;
    ubr ^b44;
  ^b43:
    i32 %373 = load i32* %0;
    i32* %374 = getelementptr &(i32* %buf)[i32 %373];
    i32 %375 = load i32* %374;
    i1 %376 = icmp eq i32 %375, i32 32;
    i1 %377 = icmp eq i32 %375, i32 9;
    i1 %378 = or i1 %376, i1 %377;
    i1 %379 = icmp eq i32 %375, i32 10;
    i1 %380 = icmp eq i32 %375, i32 13;
    i1 %381 = or i1 %379, i1 %380;
    i1 %382 = or i1 %378, i1 %381;
    cbr i1 %382(prob = 0.9375), ^if.then32, ^b44;
  ^if.then32:
    i32 %383 = add i32 %373, i32 1;
    store i32* %0 with i32 %383;
    ubr ^while.header14;
  ^b44:
    i32 %384 = phi [^indirect12, i32 %372] [^b43, i32 %373];
    i1 %385 = icmp sle i32 %len, i32 %384;
    cbr i1 %385(prob = 0.5), ^b3, ^b45;
  ^b45:
    i32* %386 = getelementptr &(i32* %buf)[i32 %384];
    i32 %387 = load i32* %386;
    i1 %388 = icmp neq i32 %387, i32 58;
    cbr i1 %388(prob = 0.5), ^b3, ^b46;
  ^b46:
    i32 %389 = add i32 %384, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.header15;
  ^while.header15:
    i32 %390 = phi [^b46, i32 %389] [^if.then33, i32 %404];
    i1 %391 = icmp sle i32 %len, i32 %390;
    cbr i1 %391(prob = 0.5), ^b47, ^b48;
  ^b47:
    i32 %392 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %393 = icmp neq i32 %392, i32 0;
    cbr i1 %393(prob = 0.5), ^b34, ^b3;
  ^b48:
    i32 %394 = load i32* %0;
    i32* %395 = getelementptr &(i32* %buf)[i32 %394];
    i32 %396 = load i32* %395;
    i1 %397 = icmp eq i32 %396, i32 32;
    i1 %398 = icmp eq i32 %396, i32 9;
    i1 %399 = or i1 %397, i1 %398;
    i1 %400 = icmp eq i32 %396, i32 10;
    i1 %401 = icmp eq i32 %396, i32 13;
    i1 %402 = or i1 %400, i1 %401;
    i1 %403 = or i1 %399, i1 %402;
    cbr i1 %403(prob = 0.9375), ^if.then33, ^b47;
  ^if.then33:
    i32 %404 = add i32 %394, i32 1;
    store i32* %0 with i32 %404;
    ubr ^while.header15;
}
internal [50000000 * i32]* @buffer, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32, align 4;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.header:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %27];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.header1;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    i1 %21 = icmp eq i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    i1 %23 = icmp eq i32 %19, i32 10;
    i1 %24 = icmp eq i32 %19, i32 13;
    i1 %25 = or i1 %23, i1 %24;
    i1 %26 = or i1 %22, i1 %25;
    cbr i1 %26(prob = 0.9375), ^if.then, ^b1;
  ^if.then:
    i32 %27 = add i32 %17, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.header;
  ^while.header1:
    i32 %28 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %29 = icmp sle i32 %4, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
  ^b3:
    i1 %30 = icmp neq i32 %15, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
  ^b4:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 32;
    i1 %35 = icmp eq i32 %33, i32 9;
    i1 %36 = or i1 %34, i1 %35;
    i1 %37 = icmp eq i32 %33, i32 10;
    i1 %38 = icmp eq i32 %33, i32 13;
    i1 %39 = or i1 %37, i1 %38;
    i1 %40 = or i1 %36, i1 %39;
    cbr i1 %40(prob = 0.9375), ^if.then2, ^b3;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %41 = add i32 %31, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.header1;
  ^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b5:
    i32 %42 = phi [^if.then1, i32 0] [^if.else, i32 1];
    ret i32 %42;
}
