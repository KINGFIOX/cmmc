internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %17];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = scmp ge i32 %5, i32 %len;
    cbr i1 %7(prob = 0.5), ^b, ^while.body;
  ^while.body:
    i32 %8 = phi [^entry, i32 %5] [^if.then, i32 %16] [^if.then2, i32 %25] [^if.then6, i32 %40] [^if.then9, i32 %57];
    i1 %9 = scmp ge i32 %8, i32 %len;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^if.then7, i32 %50] [^b3, i32 0] [^if.else11, i32 0] [^b6, i32 0] [^if.then12, i32 0] [^if.then13, i32 %87] [^if.then15, i32 0] [^if.else16, i32 0] [^if.then18, i32 %112] [^b8, i32 0] [^if.else18, i32 0] [^if.then20, i32 0] [^if.else20, i32 0] [^if.then21, i32 1] [^b10, i32 1] [^if.then25, i32 %150] [^b11, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^if.then26, i32 0] [^if.then27, i32 1] [^if.then31, i32 %183] [^if.else28, i32 0] [^if.else29, i32 0] [^if.else30, i32 0] [^if.then35, i32 %219] [^if.else33, i32 0] [^if.else34, i32 0] [^if.else35, i32 0] [^if.else36, i32 0] [^b16, i32 1] [^b17, i32 0] [^if.then39, i32 %259] [^b19, i32 1] [^if.else38, i32 0] [^if.else39, i32 0] [^if.then42, i32 1] [^b20, i32 0] [^b21, i32 0] [^if.else42, i32 0] [^if.else43, i32 0] [^while.body11, i32 0] [^b26, i32 0] [^b27, i32 1] [^b29, i32 0] [^while.header2, i32 1] [^b31, i32 1] [^b34, i32 0] [^while.body18, i32 0] [^if.else60, i32 0] [^b37, i32 0] [^b39, i32 0] [^b41, i32 0];
    ret i32 %10;
  ^b1:
    i1 %11 = scmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %16 = add i32 %12, i32 1;
    store i32* %0 with i32 %16;
    ubr ^while.body;
  ^if.then1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %buf)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 123;
    cbr i1 %20(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %21 = scmp eq i32 %6, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %22 = load i32* %13;
    i1 %23 = scmp eq i32 %22, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else4;
  ^if.then2:
    i32 %24 = load i32* %0;
    i32 %25 = add i32 %24, i32 1;
    store i32* %0 with i32 %25;
    ubr ^while.body;
  ^if.else2:
    i32 %26 = load i32* %18;
    i1 %27 = scmp eq i32 %26, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then3:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 43;
    cbr i1 %31(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else3:
    i1 %32 = scmp eq i32 %6, i32 2;
    cbr i1 %32(prob = 0.5), ^if.then5, ^if.else7;
  ^if.else4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %buf)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then6, ^if.else8;
  ^if.then4:
    i32 %37 = add i32 %28, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then5:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.then6:
    i32 %40 = add i32 %33, i32 1;
    store i32* %0 with i32 %40;
    ubr ^while.body;
  ^if.else5:
    i32 %41 = load i32* %0;
    i32* %42 = getelementptr &(i32* %buf)[i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp eq i32 %43, i32 34;
    cbr i1 %44(prob = 0.5), ^if.then7, ^if.else9;
  ^if.else6:
    i32 %45 = load i32* %29;
    i1 %46 = scmp eq i32 %45, i32 45;
    cbr i1 %46(prob = 0.5), ^if.then4, ^indirect;
  ^if.else7:
    i1 %47 = scmp eq i32 %6, i32 3;
    cbr i1 %47(prob = 0.5), ^if.then8, ^if.else10;
  ^if.else8:
    i32 %48 = load i32* %34;
    i1 %49 = scmp eq i32 %48, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then9, ^b1;
  ^if.then7:
    i32 %50 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b3:
    i32 %51 = phi [^if.then4, i32 %37] [^indirect, i32 %53];
    i1 %52 = scmp ge i32 %51, i32 %len;
    cbr i1 %52(prob = 0.5), ^b, ^if.else11;
  ^indirect:
    i32 %53 = load i32* %0;
    ubr ^b3;
  ^if.then8:
    i32 %54 = load i32* %0;
    i32 %55 = add i32 %54, i32 1;
    store i32* %0 with i32 %55;
    ubr ^while.body2;
  ^if.then9:
    i32 %56 = load i32* %0;
    i32 %57 = add i32 %56, i32 1;
    store i32* %0 with i32 %57;
    ubr ^while.body;
  ^while.header:
    i32 %58 = phi [^if.then5, i32 %39] [^b5, i32 %83];
    i1 %59 = scmp lt i32 %58, i32 %len;
    cbr i1 %59(prob = 0.97), ^while.body1, ^indirect1;
  ^if.else9:
    i32 %60 = load i32* %42;
    i1 %61 = scmp gt i32 %60, i32 47;
    cbr i1 %61(prob = 0.5), ^if.then11, ^b4;
  ^if.else10:
    i1 %62 = scmp eq i32 %6, i32 4;
    cbr i1 %62(prob = 0.5), ^if.then10, ^if.else12;
  ^indirect1:
    i32 %63 = load i32* %0;
    ubr ^b6;
  ^if.else11:
    i32 %64 = load i32* %0;
    i32* %65 = getelementptr &(i32* %buf)[i32 %64];
    i32 %66 = load i32* %65;
    i1 %67 = scmp gt i32 %66, i32 47;
    cbr i1 %67(prob = 0.5), ^if.then12, ^b;
  ^while.body1:
    i32 %68 = load i32* %0;
    i32* %69 = getelementptr &(i32* %buf)[i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = scmp eq i32 %70, i32 34;
    cbr i1 %71(prob = 0.5), ^b6, ^b5;
  ^if.then10:
    i32 %72 = load i32* %0;
    i32 %73 = add i32 %72, i32 1;
    store i32* %0 with i32 %73;
    ubr ^while.body3;
  ^if.then11:
    i1 %74 = scmp lt i32 %60, i32 58;
    cbr i1 %74(prob = 0.5), ^b4, ^if.else13;
  ^while.body2:
    i32 %75 = phi [^if.then8, i32 %55] [^if.then16, i32 %104] [^if.then22, i32 %140] [^if.then29, i32 %177] [^if.then33, i32 %213];
    i1 %76 = scmp ge i32 %75, i32 %len;
    cbr i1 %76(prob = 0.5), ^if.then14, ^b7;
  ^b4:
    i32 %77 = phi [^if.else9, i32 0] [^if.then11, i32 1] [^if.else13, i32 0];
    i1 %78 = scmp eq i32 %77, i32 1;
    cbr i1 %78(prob = 0.5), ^if.then13, ^if.else14;
  ^if.else12:
    i1 %79 = scmp eq i32 %6, i32 5;
    cbr i1 %79(prob = 0.5), ^if.then15, ^if.else15;
  ^b5:
    i32 %80 = load i32* %69;
    i1 %81 = scmp eq i32 %80, i32 92;
    i32 %82 = select i1 %81 ? i32 2 : i32 1;
    i32 %83 = add i32 %68, i32 %82;
    store i32* %0 with i32 %83;
    ubr ^while.header;
  ^b6:
    i32 %84 = phi [^indirect1, i32 %63] [^while.body1, i32 %68];
    i1 %85 = scmp ge i32 %84, i32 %len;
    cbr i1 %85(prob = 0.5), ^b, ^if.else16;
  ^if.else13:
    ubr ^b4;
  ^if.then12:
    i1 %86 = scmp gt i32 %66, i32 57;
    cbr i1 %86(prob = 0.5), ^b, ^while.header1;
  ^if.then13:
    i32 %87 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then14:
    i32 %88 = load i32* %0;
    i1 %89 = scmp lt i32 %88, i32 %len;
    cbr i1 %89(prob = 0.5), ^if.then17, ^b8;
  ^b7:
    i32 %90 = load i32* %0;
    i32* %91 = getelementptr &(i32* %buf)[i32 %90];
    i32 %92 = load i32* %91;
    i1 %93 = scmp eq i32 %92, i32 32;
    cbr i1 %93(prob = 0.5), ^if.then16, ^if.else17;
  ^while.body3:
    i32 %94 = phi [^if.then10, i32 %73] [^if.then23, i32 %141] [^if.then30, i32 %179] [^if.then34, i32 %214] [^if.then38, i32 %254];
    i1 %95 = scmp ge i32 %94, i32 %len;
    cbr i1 %95(prob = 0.5), ^if.then19, ^b9;
  ^if.then15:
    i32 %96 = load i32* %0;
    i32 %97 = add i32 %96, i32 3;
    i1 %98 = scmp ge i32 %97, i32 %len;
    cbr i1 %98(prob = 0.5), ^b, ^if.else18;
  ^if.else14:
    i32 %99 = load i32* %0;
    i32* %100 = getelementptr &(i32* %buf)[i32 %99];
    i32 %101 = load i32* %100;
    i1 %102 = scmp eq i32 %101, i32 43;
    cbr i1 %102(prob = 0.5), ^if.then18, ^if.else19;
  ^if.else15:
    i1 %103 = scmp eq i32 %6, i32 6;
    cbr i1 %103(prob = 0.5), ^if.then20, ^if.else20;
  ^if.then16:
    i32 %104 = add i32 %90, i32 1;
    store i32* %0 with i32 %104;
    ubr ^while.body2;
  ^if.else16:
    i32 %105 = load i32* %0;
    i32* %106 = getelementptr &(i32* %buf)[i32 %105];
    i32 %107 = load i32* %106;
    i1 %108 = scmp neq i32 %107, i32 34;
    cbr i1 %108(prob = 0.5), ^b, ^b10;
  ^if.then17:
    i32* %109 = getelementptr &(i32* %buf)[i32 %88];
    i32 %110 = load i32* %109;
    i1 %111 = scmp eq i32 %110, i32 93;
    cbr i1 %111(prob = 0.5), ^if.then21, ^b8;
  ^if.then18:
    i32 %112 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^while.header1:
    i32 %113 = phi [^if.then12, i32 %64] [^b13, i32 %206];
    i1 %114 = scmp lt i32 %113, i32 %len;
    cbr i1 %114(prob = 0.97), ^while.body4, ^indirect2;
  ^if.then19:
    i32 %115 = load i32* %0;
    i1 %116 = scmp lt i32 %115, i32 %len;
    cbr i1 %116(prob = 0.5), ^if.then24, ^b11;
  ^b8:
    i32 %117 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %118 = scmp eq i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^b, ^entry1;
  ^if.else17:
    i32 %119 = load i32* %91;
    i1 %120 = scmp eq i32 %119, i32 9;
    cbr i1 %120(prob = 0.5), ^if.then22, ^if.else21;
  ^b9:
    i32 %121 = load i32* %0;
    i32* %122 = getelementptr &(i32* %buf)[i32 %121];
    i32 %123 = load i32* %122;
    i1 %124 = scmp eq i32 %123, i32 32;
    cbr i1 %124(prob = 0.5), ^if.then23, ^if.else22;
  ^if.else18:
    i32* %125 = getelementptr &(i32* %buf)[i32 %96];
    i32 %126 = load i32* %125;
    i1 %127 = scmp neq i32 %126, i32 116;
    cbr i1 %127(prob = 0.5), ^b, ^if.else23;
  ^if.then20:
    i32 %128 = load i32* %0;
    i32 %129 = add i32 %128, i32 4;
    i1 %130 = scmp ge i32 %129, i32 %len;
    cbr i1 %130(prob = 0.5), ^b, ^if.else24;
  ^if.else19:
    i32 %131 = load i32* %100;
    i1 %132 = scmp eq i32 %131, i32 45;
    cbr i1 %132(prob = 0.5), ^if.then25, ^if.else25;
  ^if.else20:
    i1 %133 = scmp eq i32 %6, i32 7;
    cbr i1 %133(prob = 0.5), ^if.then26, ^b;
  ^if.then21:
    i32 %134 = load i32* %0;
    i32 %135 = add i32 %134, i32 1;
    store i32* %0 with i32 %135;
    ubr ^b;
  ^b10:
    i32 %136 = phi [^if.else16, i32 %105] [^b26, i32 %289] [^if.else60, i32 %442];
    i32 %137 = add i32 %136, i32 1;
    store i32* %0 with i32 %137;
    ubr ^b;
  ^indirect2:
    i32 %138 = load i32* %0;
    ubr ^b12;
  ^if.then22:
    i32 %139 = load i32* %0;
    i32 %140 = add i32 %139, i32 1;
    store i32* %0 with i32 %140;
    ubr ^while.body2;
  ^if.then23:
    i32 %141 = add i32 %121, i32 1;
    store i32* %0 with i32 %141;
    ubr ^while.body3;
  ^entry1:
    i32 %142 = load i32* %0;
    ubr ^while.body5;
  ^while.body4:
    i32 %143 = load i32* %0;
    i32* %144 = getelementptr &(i32* %buf)[i32 %143];
    i32 %145 = load i32* %144;
    i1 %146 = scmp gt i32 %145, i32 47;
    cbr i1 %146(prob = 0.5), ^if.then28, ^b12;
  ^if.then24:
    i32* %147 = getelementptr &(i32* %buf)[i32 %115];
    i32 %148 = load i32* %147;
    i1 %149 = scmp eq i32 %148, i32 125;
    cbr i1 %149(prob = 0.5), ^if.then27, ^b11;
  ^if.then25:
    i32 %150 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b11:
    i32 %151 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %152 = scmp eq i32 %151, i32 0;
    cbr i1 %152(prob = 0.5), ^b, ^entry2;
  ^if.else21:
    i32 %153 = load i32* %0;
    i32* %154 = getelementptr &(i32* %buf)[i32 %153];
    i32 %155 = load i32* %154;
    i1 %156 = scmp eq i32 %155, i32 10;
    cbr i1 %156(prob = 0.5), ^if.then29, ^if.else26;
  ^if.else22:
    i32 %157 = load i32* %122;
    i1 %158 = scmp eq i32 %157, i32 9;
    cbr i1 %158(prob = 0.5), ^if.then30, ^if.else27;
  ^if.else23:
    i32 %159 = load i32* %0;
    i32 %160 = add i32 %159, i32 1;
    i32* %161 = getelementptr &(i32* %buf)[i32 %160];
    i32 %162 = load i32* %161;
    i1 %163 = scmp neq i32 %162, i32 114;
    cbr i1 %163(prob = 0.5), ^b, ^if.else28;
  ^if.else24:
    i32* %164 = getelementptr &(i32* %buf)[i32 %128];
    i32 %165 = load i32* %164;
    i1 %166 = scmp neq i32 %165, i32 102;
    cbr i1 %166(prob = 0.5), ^b, ^if.else29;
  ^if.then26:
    i32 %167 = load i32* %0;
    i32 %168 = add i32 %167, i32 3;
    i1 %169 = scmp ge i32 %168, i32 %len;
    cbr i1 %169(prob = 0.5), ^b, ^if.else30;
  ^if.else25:
    i32 %170 = load i32* %0;
    i32* %171 = getelementptr &(i32* %buf)[i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = scmp eq i32 %172, i32 116;
    cbr i1 %173(prob = 0.5), ^if.then31, ^if.else31;
  ^if.then27:
    i32 %174 = load i32* %0;
    i32 %175 = add i32 %174, i32 1;
    store i32* %0 with i32 %175;
    ubr ^b;
  ^if.then28:
    i1 %176 = scmp gt i32 %145, i32 57;
    cbr i1 %176(prob = 0.5), ^b12, ^b13;
  ^if.then29:
    i32 %177 = add i32 %153, i32 1;
    store i32* %0 with i32 %177;
    ubr ^while.body2;
  ^if.then30:
    i32 %178 = load i32* %0;
    i32 %179 = add i32 %178, i32 1;
    store i32* %0 with i32 %179;
    ubr ^while.body3;
  ^entry2:
    i32 %180 = load i32* %0;
    ubr ^while.body6;
  ^b12:
    i32 %181 = phi [^indirect2, i32 %138] [^while.body4, i32 %143] [^if.then28, i32 %143];
    i1 %182 = scmp lt i32 %181, i32 %len;
    cbr i1 %182(prob = 0.5), ^if.then32, ^indirect3;
  ^if.then31:
    i32 %183 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^while.body5:
    i32 %184 = phi [^entry1, i32 %142] [^if.then36, i32 %247] [^if.then40, i32 %281] [^if.then46, i32 %321] [^if.then51, i32 %352];
    i1 %185 = scmp ge i32 %184, i32 %len;
    cbr i1 %185(prob = 0.5), ^b14, ^b15;
  ^if.else26:
    i32 %186 = load i32* %154;
    i1 %187 = scmp eq i32 %186, i32 13;
    cbr i1 %187(prob = 0.5), ^if.then33, ^if.then14;
  ^if.else27:
    i32 %188 = load i32* %0;
    i32* %189 = getelementptr &(i32* %buf)[i32 %188];
    i32 %190 = load i32* %189;
    i1 %191 = scmp eq i32 %190, i32 10;
    cbr i1 %191(prob = 0.5), ^if.then34, ^if.else32;
  ^if.else28:
    i32 %192 = add i32 %159, i32 2;
    i32* %193 = getelementptr &(i32* %buf)[i32 %192];
    i32 %194 = load i32* %193;
    i1 %195 = scmp neq i32 %194, i32 117;
    cbr i1 %195(prob = 0.5), ^b, ^if.else33;
  ^if.else29:
    i32 %196 = load i32* %0;
    i32 %197 = add i32 %196, i32 1;
    i32* %198 = getelementptr &(i32* %buf)[i32 %197];
    i32 %199 = load i32* %198;
    i1 %200 = scmp neq i32 %199, i32 97;
    cbr i1 %200(prob = 0.5), ^b, ^if.else34;
  ^if.else30:
    i32* %201 = getelementptr &(i32* %buf)[i32 %167];
    i32 %202 = load i32* %201;
    i1 %203 = scmp neq i32 %202, i32 110;
    cbr i1 %203(prob = 0.5), ^b, ^if.else35;
  ^if.else31:
    i32 %204 = load i32* %171;
    i1 %205 = scmp eq i32 %204, i32 102;
    cbr i1 %205(prob = 0.5), ^if.then35, ^if.else36;
  ^b13:
    i32 %206 = add i32 %143, i32 1;
    store i32* %0 with i32 %206;
    ubr ^while.header1;
  ^indirect3:
    i32 %207 = load i32* %0;
    ubr ^b16;
  ^if.then32:
    i32 %208 = load i32* %0;
    i32* %209 = getelementptr &(i32* %buf)[i32 %208];
    i32 %210 = load i32* %209;
    i1 %211 = scmp eq i32 %210, i32 46;
    cbr i1 %211(prob = 0.5), ^if.then37, ^b16;
  ^if.then33:
    i32 %212 = load i32* %0;
    i32 %213 = add i32 %212, i32 1;
    store i32* %0 with i32 %213;
    ubr ^while.body2;
  ^if.then34:
    i32 %214 = add i32 %188, i32 1;
    store i32* %0 with i32 %214;
    ubr ^while.body3;
  ^b14:
    i32 %215 = load i32* %0;
    i32* %216 = getelementptr &(i32* %buf)[i32 %215];
    i32 %217 = load i32* %216;
    i1 %218 = scmp eq i32 %217, i32 44;
    cbr i1 %218(prob = 0.97), ^while.body7, ^while.body8;
  ^if.then35:
    i32 %219 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b15:
    i32 %220 = load i32* %0;
    i32* %221 = getelementptr &(i32* %buf)[i32 %220];
    i32 %222 = load i32* %221;
    i1 %223 = scmp eq i32 %222, i32 32;
    cbr i1 %223(prob = 0.5), ^if.then36, ^if.else37;
  ^while.body6:
    i32 %224 = phi [^entry2, i32 %180] [^if.then41, i32 %282] [^if.then47, i32 %323] [^if.then52, i32 %353] [^if.then57, i32 %376];
    i1 %225 = scmp ge i32 %224, i32 %len;
    cbr i1 %225(prob = 0.5), ^b17, ^b18;
  ^if.else32:
    i32 %226 = load i32* %189;
    i1 %227 = scmp eq i32 %226, i32 13;
    cbr i1 %227(prob = 0.5), ^if.then38, ^if.then19;
  ^if.else33:
    i32 %228 = load i32* %0;
    i32 %229 = add i32 %228, i32 3;
    i32* %230 = getelementptr &(i32* %buf)[i32 %229];
    i32 %231 = load i32* %230;
    i1 %232 = scmp neq i32 %231, i32 101;
    cbr i1 %232(prob = 0.5), ^b, ^b19;
  ^if.else34:
    i32 %233 = add i32 %196, i32 2;
    i32* %234 = getelementptr &(i32* %buf)[i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = scmp neq i32 %235, i32 108;
    cbr i1 %236(prob = 0.5), ^b, ^if.else38;
  ^if.else35:
    i32 %237 = load i32* %0;
    i32 %238 = add i32 %237, i32 1;
    i32* %239 = getelementptr &(i32* %buf)[i32 %238];
    i32 %240 = load i32* %239;
    i1 %241 = scmp neq i32 %240, i32 117;
    cbr i1 %241(prob = 0.5), ^b, ^if.else39;
  ^if.else36:
    i32 %242 = load i32* %0;
    i32* %243 = getelementptr &(i32* %buf)[i32 %242];
    i32 %244 = load i32* %243;
    i1 %245 = scmp eq i32 %244, i32 110;
    cbr i1 %245(prob = 0.5), ^if.then39, ^b;
  ^while.body7:
    i32 %246 = add i32 %215, i32 1;
    store i32* %0 with i32 %246;
    ubr ^while.body10;
  ^if.then36:
    i32 %247 = add i32 %220, i32 1;
    store i32* %0 with i32 %247;
    ubr ^while.body5;
  ^if.then37:
    i32 %248 = phi [^if.then32, i32 %208] [^b23, i32 %249];
    i32 %249 = add i32 %248, i32 1;
    store i32* %0 with i32 %249;
    i1 %250 = scmp lt i32 %249, i32 %len;
    cbr i1 %250(prob = 0.97), ^while.body9, ^b16;
  ^b16:
    i32 %251 = phi [^indirect3, i32 %207] [^if.then32, i32 %208] [^if.then37, i32 %249] [^b23, i32 %249];
    i1 %252 = scmp lt i32 %251, i32 %len;
    cbr i1 %252(prob = 0.5), ^if.then42, ^b;
  ^if.then38:
    i32 %253 = load i32* %0;
    i32 %254 = add i32 %253, i32 1;
    store i32* %0 with i32 %254;
    ubr ^while.body3;
  ^b17:
    i32 %255 = load i32* %0;
    i1 %256 = scmp ge i32 %255, i32 %len;
    cbr i1 %256(prob = 0.5), ^b, ^b21;
  ^while.body8:
    i32 %257 = phi [^b14, i32 %215] [^if.then44, i32 %316] [^if.then50, i32 %348] [^if.then56, i32 %374] [^if.then61, i32 %397];
    i1 %258 = scmp ge i32 %257, i32 %len;
    cbr i1 %258(prob = 0.5), ^b20, ^b22;
  ^if.then39:
    i32 %259 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else37:
    i32 %260 = load i32* %221;
    i1 %261 = scmp eq i32 %260, i32 9;
    cbr i1 %261(prob = 0.5), ^if.then40, ^if.else40;
  ^b18:
    i32 %262 = load i32* %0;
    i32* %263 = getelementptr &(i32* %buf)[i32 %262];
    i32 %264 = load i32* %263;
    i1 %265 = scmp eq i32 %264, i32 32;
    cbr i1 %265(prob = 0.5), ^if.then41, ^if.else41;
  ^b19:
    i32 %266 = phi [^if.else33, i32 %228] [^if.else43, i32 %308];
    i32 %267 = add i32 %266, i32 4;
    store i32* %0 with i32 %267;
    ubr ^b;
  ^if.else38:
    i32 %268 = load i32* %0;
    i32 %269 = add i32 %268, i32 3;
    i32* %270 = getelementptr &(i32* %buf)[i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = scmp neq i32 %271, i32 115;
    cbr i1 %272(prob = 0.5), ^b, ^if.else42;
  ^if.else39:
    i32 %273 = add i32 %237, i32 2;
    i32* %274 = getelementptr &(i32* %buf)[i32 %273];
    i32 %275 = load i32* %274;
    i1 %276 = scmp neq i32 %275, i32 108;
    cbr i1 %276(prob = 0.5), ^b, ^if.else43;
  ^while.body9:
    i32* %277 = getelementptr &(i32* %buf)[i32 %249];
    i32 %278 = load i32* %277;
    i1 %279 = scmp gt i32 %278, i32 47;
    cbr i1 %279(prob = 0.5), ^if.then43, ^b23;
  ^if.then40:
    i32 %280 = load i32* %0;
    i32 %281 = add i32 %280, i32 1;
    store i32* %0 with i32 %281;
    ubr ^while.body5;
  ^if.then41:
    i32 %282 = add i32 %262, i32 1;
    store i32* %0 with i32 %282;
    ubr ^while.body6;
  ^while.body10:
    i32 %283 = phi [^while.body7, i32 %246] [^if.then48, i32 %343] [^if.then54, i32 %368] [^if.then59, i32 %391] [^if.then62, i32 %403];
    i1 %284 = scmp ge i32 %283, i32 %len;
    cbr i1 %284(prob = 0.5), ^while.body11, ^b25;
  ^if.then42:
    i32 %285 = load i32* %0;
    i32* %286 = getelementptr &(i32* %buf)[i32 %285];
    i32 %287 = load i32* %286;
    i1 %288 = scmp eq i32 %287, i32 101;
    cbr i1 %288(prob = 0.5), ^if.then45, ^b;
  ^b20:
    i32 %289 = load i32* %0;
    i1 %290 = scmp ge i32 %289, i32 %len;
    cbr i1 %290(prob = 0.5), ^b, ^b26;
  ^b21:
    i32* %291 = getelementptr &(i32* %buf)[i32 %255];
    i32 %292 = load i32* %291;
    i1 %293 = scmp neq i32 %292, i32 58;
    cbr i1 %293(prob = 0.5), ^b, ^b24;
  ^b22:
    i32 %294 = load i32* %0;
    i32* %295 = getelementptr &(i32* %buf)[i32 %294];
    i32 %296 = load i32* %295;
    i1 %297 = scmp eq i32 %296, i32 32;
    cbr i1 %297(prob = 0.5), ^if.then44, ^if.else44;
  ^if.else40:
    i32 %298 = load i32* %0;
    i32* %299 = getelementptr &(i32* %buf)[i32 %298];
    i32 %300 = load i32* %299;
    i1 %301 = scmp eq i32 %300, i32 10;
    cbr i1 %301(prob = 0.5), ^if.then46, ^if.else45;
  ^if.else41:
    i32 %302 = load i32* %263;
    i1 %303 = scmp eq i32 %302, i32 9;
    cbr i1 %303(prob = 0.5), ^if.then47, ^if.else46;
  ^if.else42:
    i32 %304 = add i32 %268, i32 4;
    i32* %305 = getelementptr &(i32* %buf)[i32 %304];
    i32 %306 = load i32* %305;
    i1 %307 = scmp neq i32 %306, i32 101;
    cbr i1 %307(prob = 0.5), ^b, ^b27;
  ^if.else43:
    i32 %308 = load i32* %0;
    i32 %309 = add i32 %308, i32 3;
    i32* %310 = getelementptr &(i32* %buf)[i32 %309];
    i32 %311 = load i32* %310;
    i1 %312 = scmp neq i32 %311, i32 108;
    cbr i1 %312(prob = 0.5), ^b, ^b19;
  ^if.then43:
    i1 %313 = scmp lt i32 %278, i32 58;
    cbr i1 %313(prob = 0.5), ^b23, ^if.else47;
  ^while.body11:
    i32 %314 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %315 = scmp eq i32 %314, i32 0;
    cbr i1 %315(prob = 0.5), ^b, ^entry1;
  ^if.then44:
    i32 %316 = add i32 %294, i32 1;
    store i32* %0 with i32 %316;
    ubr ^while.body8;
  ^if.then45:
    i32 %317 = add i32 %285, i32 1;
    store i32* %0 with i32 %317;
    i1 %318 = scmp lt i32 %317, i32 %len;
    cbr i1 %318(prob = 0.5), ^if.then49, ^b28;
  ^b23:
    i32 %319 = phi [^while.body9, i32 0] [^if.then43, i32 1] [^if.else47, i32 0];
    i1 %320 = scmp neq i32 %319, i32 1;
    cbr i1 %320(prob = 0.5), ^b16, ^if.then37;
  ^if.then46:
    i32 %321 = add i32 %298, i32 1;
    store i32* %0 with i32 %321;
    ubr ^while.body5;
  ^if.then47:
    i32 %322 = load i32* %0;
    i32 %323 = add i32 %322, i32 1;
    store i32* %0 with i32 %323;
    ubr ^while.body6;
  ^b24:
    i32 %324 = load i32* %0;
    i32 %325 = add i32 %324, i32 1;
    store i32* %0 with i32 %325;
    ubr ^while.body12;
  ^b25:
    i32 %326 = load i32* %0;
    i32* %327 = getelementptr &(i32* %buf)[i32 %326];
    i32 %328 = load i32* %327;
    i1 %329 = scmp eq i32 %328, i32 32;
    cbr i1 %329(prob = 0.5), ^if.then48, ^if.else48;
  ^b26:
    i32* %330 = getelementptr &(i32* %buf)[i32 %289];
    i32 %331 = load i32* %330;
    i1 %332 = scmp neq i32 %331, i32 93;
    cbr i1 %332(prob = 0.5), ^b, ^b10;
  ^if.else44:
    i32 %333 = load i32* %295;
    i1 %334 = scmp eq i32 %333, i32 9;
    cbr i1 %334(prob = 0.5), ^if.then50, ^if.else49;
  ^if.else45:
    i32 %335 = load i32* %299;
    i1 %336 = scmp eq i32 %335, i32 13;
    cbr i1 %336(prob = 0.5), ^if.then51, ^b14;
  ^if.else46:
    i32 %337 = load i32* %0;
    i32* %338 = getelementptr &(i32* %buf)[i32 %337];
    i32 %339 = load i32* %338;
    i1 %340 = scmp eq i32 %339, i32 10;
    cbr i1 %340(prob = 0.5), ^if.then52, ^if.else50;
  ^b27:
    i32 %341 = load i32* %0;
    i32 %342 = add i32 %341, i32 5;
    store i32* %0 with i32 %342;
    ubr ^b;
  ^if.else47:
    ubr ^b23;
  ^if.then48:
    i32 %343 = add i32 %326, i32 1;
    store i32* %0 with i32 %343;
    ubr ^while.body10;
  ^if.then49:
    i32* %344 = getelementptr &(i32* %buf)[i32 %317];
    i32 %345 = load i32* %344;
    i1 %346 = scmp eq i32 %345, i32 43;
    cbr i1 %346(prob = 0.5), ^if.then53, ^indirect4;
  ^if.then50:
    i32 %347 = load i32* %0;
    i32 %348 = add i32 %347, i32 1;
    store i32* %0 with i32 %348;
    ubr ^while.body8;
  ^b28:
    i32 %349 = phi [^if.then45, i32 %317] [^if.then53, i32 %365] [^indirect4, i32 %366];
    i1 %350 = scmp lt i32 %349, i32 %len;
    cbr i1 %350(prob = 0.5), ^if.then55, ^indirect5;
  ^if.then51:
    i32 %351 = load i32* %0;
    i32 %352 = add i32 %351, i32 1;
    store i32* %0 with i32 %352;
    ubr ^while.body5;
  ^if.then52:
    i32 %353 = add i32 %337, i32 1;
    store i32* %0 with i32 %353;
    ubr ^while.body6;
  ^if.else48:
    i32 %354 = load i32* %327;
    i1 %355 = scmp eq i32 %354, i32 9;
    cbr i1 %355(prob = 0.5), ^if.then54, ^if.else51;
  ^while.body12:
    i32 %356 = phi [^b24, i32 %325] [^if.then60, i32 %392] [^if.then63, i32 %409] [^if.then65, i32 %419] [^if.then67, i32 %433];
    i1 %357 = scmp ge i32 %356, i32 %len;
    cbr i1 %357(prob = 0.5), ^b29, ^b30;
  ^if.else49:
    i32 %358 = load i32* %0;
    i32* %359 = getelementptr &(i32* %buf)[i32 %358];
    i32 %360 = load i32* %359;
    i1 %361 = scmp eq i32 %360, i32 10;
    cbr i1 %361(prob = 0.5), ^if.then56, ^if.else52;
  ^if.else50:
    i32 %362 = load i32* %338;
    i1 %363 = scmp eq i32 %362, i32 13;
    cbr i1 %363(prob = 0.5), ^if.then57, ^b17;
  ^if.then53:
    i32 %364 = load i32* %0;
    i32 %365 = add i32 %364, i32 1;
    store i32* %0 with i32 %365;
    ubr ^b28;
  ^indirect4:
    i32 %366 = load i32* %0;
    ubr ^b28;
  ^if.then54:
    i32 %367 = load i32* %0;
    i32 %368 = add i32 %367, i32 1;
    store i32* %0 with i32 %368;
    ubr ^while.body10;
  ^indirect5:
    i32 %369 = load i32* %0;
    ubr ^while.header2;
  ^if.then55:
    i32 %370 = load i32* %0;
    i32* %371 = getelementptr &(i32* %buf)[i32 %370];
    i32 %372 = load i32* %371;
    i1 %373 = scmp eq i32 %372, i32 45;
    cbr i1 %373(prob = 0.5), ^if.then58, ^while.header2;
  ^if.then56:
    i32 %374 = add i32 %358, i32 1;
    store i32* %0 with i32 %374;
    ubr ^while.body8;
  ^if.then57:
    i32 %375 = load i32* %0;
    i32 %376 = add i32 %375, i32 1;
    store i32* %0 with i32 %376;
    ubr ^while.body6;
  ^if.else51:
    i32 %377 = load i32* %0;
    i32* %378 = getelementptr &(i32* %buf)[i32 %377];
    i32 %379 = load i32* %378;
    i1 %380 = scmp eq i32 %379, i32 10;
    cbr i1 %380(prob = 0.5), ^if.then59, ^if.else53;
  ^b29:
    i32 %381 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %382 = scmp eq i32 %381, i32 0;
    cbr i1 %382(prob = 0.5), ^b, ^entry3;
  ^b30:
    i32 %383 = load i32* %0;
    i32* %384 = getelementptr &(i32* %buf)[i32 %383];
    i32 %385 = load i32* %384;
    i1 %386 = scmp eq i32 %385, i32 32;
    cbr i1 %386(prob = 0.5), ^if.then60, ^if.else54;
  ^if.else52:
    i32 %387 = load i32* %359;
    i1 %388 = scmp eq i32 %387, i32 13;
    cbr i1 %388(prob = 0.5), ^if.then61, ^b20;
  ^if.then58:
    i32 %389 = phi [^if.then55, i32 %370] [^b31, i32 %404];
    i32 %390 = add i32 %389, i32 1;
    store i32* %0 with i32 %390;
    ubr ^while.header2;
  ^if.then59:
    i32 %391 = add i32 %377, i32 1;
    store i32* %0 with i32 %391;
    ubr ^while.body10;
  ^if.then60:
    i32 %392 = add i32 %383, i32 1;
    store i32* %0 with i32 %392;
    ubr ^while.body12;
  ^entry3:
    i32 %393 = load i32* %0;
    ubr ^while.body14;
  ^while.header2:
    i32 %394 = phi [^indirect5, i32 %369] [^if.then55, i32 %370] [^if.then58, i32 %390];
    i1 %395 = scmp lt i32 %394, i32 %len;
    cbr i1 %395(prob = 0.97), ^while.body13, ^b;
  ^if.then61:
    i32 %396 = load i32* %0;
    i32 %397 = add i32 %396, i32 1;
    store i32* %0 with i32 %397;
    ubr ^while.body8;
  ^if.else53:
    i32 %398 = load i32* %378;
    i1 %399 = scmp eq i32 %398, i32 13;
    cbr i1 %399(prob = 0.5), ^if.then62, ^while.body11;
  ^if.else54:
    i32 %400 = load i32* %384;
    i1 %401 = scmp eq i32 %400, i32 9;
    cbr i1 %401(prob = 0.5), ^if.then63, ^if.else55;
  ^if.then62:
    i32 %402 = load i32* %0;
    i32 %403 = add i32 %402, i32 1;
    store i32* %0 with i32 %403;
    ubr ^while.body10;
  ^while.body13:
    i32 %404 = load i32* %0;
    i32* %405 = getelementptr &(i32* %buf)[i32 %404];
    i32 %406 = load i32* %405;
    i1 %407 = scmp gt i32 %406, i32 47;
    cbr i1 %407(prob = 0.5), ^if.then64, ^b31;
  ^if.then63:
    i32 %408 = load i32* %0;
    i32 %409 = add i32 %408, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body12;
  ^while.body14:
    i32 %410 = phi [^entry3, i32 %393] [^if.then66, i32 %431] [^if.then68, i32 %439] [^if.then70, i32 %455] [^if.then73, i32 %472];
    i1 %411 = scmp ge i32 %410, i32 %len;
    cbr i1 %411(prob = 0.5), ^b32, ^b33;
  ^if.else55:
    i32 %412 = load i32* %0;
    i32* %413 = getelementptr &(i32* %buf)[i32 %412];
    i32 %414 = load i32* %413;
    i1 %415 = scmp eq i32 %414, i32 10;
    cbr i1 %415(prob = 0.5), ^if.then65, ^if.else56;
  ^if.then64:
    i1 %416 = scmp lt i32 %406, i32 58;
    cbr i1 %416(prob = 0.5), ^b31, ^if.else57;
  ^b31:
    i32 %417 = phi [^while.body13, i32 0] [^if.then64, i32 1] [^if.else57, i32 0];
    i1 %418 = scmp neq i32 %417, i32 1;
    cbr i1 %418(prob = 0.5), ^b, ^if.then58;
  ^if.then65:
    i32 %419 = add i32 %412, i32 1;
    store i32* %0 with i32 %419;
    ubr ^while.body12;
  ^b32:
    i32 %420 = load i32* %0;
    i32* %421 = getelementptr &(i32* %buf)[i32 %420];
    i32 %422 = load i32* %421;
    i1 %423 = scmp eq i32 %422, i32 44;
    cbr i1 %423(prob = 0.97), ^while.body15, ^while.body16;
  ^b33:
    i32 %424 = load i32* %0;
    i32* %425 = getelementptr &(i32* %buf)[i32 %424];
    i32 %426 = load i32* %425;
    i1 %427 = scmp eq i32 %426, i32 32;
    cbr i1 %427(prob = 0.5), ^if.then66, ^if.else58;
  ^if.else56:
    i32 %428 = load i32* %413;
    i1 %429 = scmp eq i32 %428, i32 13;
    cbr i1 %429(prob = 0.5), ^if.then67, ^b29;
  ^if.else57:
    ubr ^b31;
  ^while.body15:
    i32 %430 = add i32 %420, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body17;
  ^if.then66:
    i32 %431 = add i32 %424, i32 1;
    store i32* %0 with i32 %431;
    ubr ^while.body14;
  ^if.then67:
    i32 %432 = load i32* %0;
    i32 %433 = add i32 %432, i32 1;
    store i32* %0 with i32 %433;
    ubr ^while.body12;
  ^while.body16:
    i32 %434 = phi [^b32, i32 %420] [^if.then69, i32 %454] [^if.then72, i32 %470] [^if.then75, i32 %483] [^if.then77, i32 %498];
    i1 %435 = scmp ge i32 %434, i32 %len;
    cbr i1 %435(prob = 0.5), ^b34, ^b35;
  ^if.else58:
    i32 %436 = load i32* %425;
    i1 %437 = scmp eq i32 %436, i32 9;
    cbr i1 %437(prob = 0.5), ^if.then68, ^if.else59;
  ^if.then68:
    i32 %438 = load i32* %0;
    i32 %439 = add i32 %438, i32 1;
    store i32* %0 with i32 %439;
    ubr ^while.body14;
  ^while.body17:
    i32 %440 = phi [^while.body15, i32 %430] [^if.then71, i32 %467] [^if.then74, i32 %480] [^if.then76, i32 %490] [^if.then79, i32 %503];
    i1 %441 = scmp ge i32 %440, i32 %len;
    cbr i1 %441(prob = 0.5), ^while.body18, ^b36;
  ^b34:
    i32 %442 = load i32* %0;
    i1 %443 = scmp ge i32 %442, i32 %len;
    cbr i1 %443(prob = 0.5), ^b, ^if.else60;
  ^b35:
    i32 %444 = load i32* %0;
    i32* %445 = getelementptr &(i32* %buf)[i32 %444];
    i32 %446 = load i32* %445;
    i1 %447 = scmp eq i32 %446, i32 32;
    cbr i1 %447(prob = 0.5), ^if.then69, ^if.else61;
  ^if.else59:
    i32 %448 = load i32* %0;
    i32* %449 = getelementptr &(i32* %buf)[i32 %448];
    i32 %450 = load i32* %449;
    i1 %451 = scmp eq i32 %450, i32 10;
    cbr i1 %451(prob = 0.5), ^if.then70, ^if.else62;
  ^while.body18:
    i32 %452 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %453 = scmp eq i32 %452, i32 0;
    cbr i1 %453(prob = 0.5), ^b, ^entry4;
  ^if.then69:
    i32 %454 = add i32 %444, i32 1;
    store i32* %0 with i32 %454;
    ubr ^while.body16;
  ^if.then70:
    i32 %455 = add i32 %448, i32 1;
    store i32* %0 with i32 %455;
    ubr ^while.body14;
  ^b36:
    i32 %456 = load i32* %0;
    i32* %457 = getelementptr &(i32* %buf)[i32 %456];
    i32 %458 = load i32* %457;
    i1 %459 = scmp eq i32 %458, i32 32;
    cbr i1 %459(prob = 0.5), ^if.then71, ^if.else63;
  ^if.else60:
    i32* %460 = getelementptr &(i32* %buf)[i32 %442];
    i32 %461 = load i32* %460;
    i1 %462 = scmp neq i32 %461, i32 125;
    cbr i1 %462(prob = 0.5), ^b, ^b10;
  ^if.else61:
    i32 %463 = load i32* %445;
    i1 %464 = scmp eq i32 %463, i32 9;
    cbr i1 %464(prob = 0.5), ^if.then72, ^if.else64;
  ^if.else62:
    i32 %465 = load i32* %449;
    i1 %466 = scmp eq i32 %465, i32 13;
    cbr i1 %466(prob = 0.5), ^if.then73, ^b32;
  ^if.then71:
    i32 %467 = add i32 %456, i32 1;
    store i32* %0 with i32 %467;
    ubr ^while.body17;
  ^entry4:
    i32 %468 = load i32* %0;
    ubr ^while.body19;
  ^if.then72:
    i32 %469 = load i32* %0;
    i32 %470 = add i32 %469, i32 1;
    store i32* %0 with i32 %470;
    ubr ^while.body16;
  ^if.then73:
    i32 %471 = load i32* %0;
    i32 %472 = add i32 %471, i32 1;
    store i32* %0 with i32 %472;
    ubr ^while.body14;
  ^if.else63:
    i32 %473 = load i32* %457;
    i1 %474 = scmp eq i32 %473, i32 9;
    cbr i1 %474(prob = 0.5), ^if.then74, ^if.else65;
  ^if.else64:
    i32 %475 = load i32* %0;
    i32* %476 = getelementptr &(i32* %buf)[i32 %475];
    i32 %477 = load i32* %476;
    i1 %478 = scmp eq i32 %477, i32 10;
    cbr i1 %478(prob = 0.5), ^if.then75, ^if.else66;
  ^if.then74:
    i32 %479 = load i32* %0;
    i32 %480 = add i32 %479, i32 1;
    store i32* %0 with i32 %480;
    ubr ^while.body17;
  ^while.body19:
    i32 %481 = phi [^entry4, i32 %468] [^if.then78, i32 %501] [^if.then80, i32 %510] [^if.then81, i32 %517] [^if.then82, i32 %523];
    i1 %482 = scmp ge i32 %481, i32 %len;
    cbr i1 %482(prob = 0.5), ^b37, ^b38;
  ^if.then75:
    i32 %483 = add i32 %475, i32 1;
    store i32* %0 with i32 %483;
    ubr ^while.body16;
  ^if.else65:
    i32 %484 = load i32* %0;
    i32* %485 = getelementptr &(i32* %buf)[i32 %484];
    i32 %486 = load i32* %485;
    i1 %487 = scmp eq i32 %486, i32 10;
    cbr i1 %487(prob = 0.5), ^if.then76, ^if.else67;
  ^if.else66:
    i32 %488 = load i32* %476;
    i1 %489 = scmp eq i32 %488, i32 13;
    cbr i1 %489(prob = 0.5), ^if.then77, ^b34;
  ^if.then76:
    i32 %490 = add i32 %484, i32 1;
    store i32* %0 with i32 %490;
    ubr ^while.body17;
  ^b37:
    i32 %491 = load i32* %0;
    i1 %492 = scmp ge i32 %491, i32 %len;
    cbr i1 %492(prob = 0.5), ^b, ^b39;
  ^b38:
    i32 %493 = load i32* %0;
    i32* %494 = getelementptr &(i32* %buf)[i32 %493];
    i32 %495 = load i32* %494;
    i1 %496 = scmp eq i32 %495, i32 32;
    cbr i1 %496(prob = 0.5), ^if.then78, ^if.else68;
  ^if.then77:
    i32 %497 = load i32* %0;
    i32 %498 = add i32 %497, i32 1;
    store i32* %0 with i32 %498;
    ubr ^while.body16;
  ^if.else67:
    i32 %499 = load i32* %485;
    i1 %500 = scmp eq i32 %499, i32 13;
    cbr i1 %500(prob = 0.5), ^if.then79, ^while.body18;
  ^if.then78:
    i32 %501 = add i32 %493, i32 1;
    store i32* %0 with i32 %501;
    ubr ^while.body19;
  ^if.then79:
    i32 %502 = load i32* %0;
    i32 %503 = add i32 %502, i32 1;
    store i32* %0 with i32 %503;
    ubr ^while.body17;
  ^b39:
    i32* %504 = getelementptr &(i32* %buf)[i32 %491];
    i32 %505 = load i32* %504;
    i1 %506 = scmp neq i32 %505, i32 58;
    cbr i1 %506(prob = 0.5), ^b, ^b40;
  ^if.else68:
    i32 %507 = load i32* %494;
    i1 %508 = scmp eq i32 %507, i32 9;
    cbr i1 %508(prob = 0.5), ^if.then80, ^if.else69;
  ^if.then80:
    i32 %509 = load i32* %0;
    i32 %510 = add i32 %509, i32 1;
    store i32* %0 with i32 %510;
    ubr ^while.body19;
  ^b40:
    i32 %511 = load i32* %0;
    i32 %512 = add i32 %511, i32 1;
    store i32* %0 with i32 %512;
    ubr ^while.body20;
  ^if.else69:
    i32 %513 = load i32* %0;
    i32* %514 = getelementptr &(i32* %buf)[i32 %513];
    i32 %515 = load i32* %514;
    i1 %516 = scmp eq i32 %515, i32 10;
    cbr i1 %516(prob = 0.5), ^if.then81, ^if.else70;
  ^if.then81:
    i32 %517 = add i32 %513, i32 1;
    store i32* %0 with i32 %517;
    ubr ^while.body19;
  ^while.body20:
    i32 %518 = phi [^b40, i32 %512] [^if.then83, i32 %530] [^if.then84, i32 %534] [^if.then85, i32 %539] [^if.then86, i32 %543];
    i1 %519 = scmp ge i32 %518, i32 %len;
    cbr i1 %519(prob = 0.5), ^b41, ^b42;
  ^if.else70:
    i32 %520 = load i32* %514;
    i1 %521 = scmp eq i32 %520, i32 13;
    cbr i1 %521(prob = 0.5), ^if.then82, ^b37;
  ^if.then82:
    i32 %522 = load i32* %0;
    i32 %523 = add i32 %522, i32 1;
    store i32* %0 with i32 %523;
    ubr ^while.body19;
  ^b41:
    i32 %524 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %525 = scmp eq i32 %524, i32 0;
    cbr i1 %525(prob = 0.5), ^b, ^entry3;
  ^b42:
    i32 %526 = load i32* %0;
    i32* %527 = getelementptr &(i32* %buf)[i32 %526];
    i32 %528 = load i32* %527;
    i1 %529 = scmp eq i32 %528, i32 32;
    cbr i1 %529(prob = 0.5), ^if.then83, ^if.else71;
  ^if.then83:
    i32 %530 = add i32 %526, i32 1;
    store i32* %0 with i32 %530;
    ubr ^while.body20;
  ^if.else71:
    i32 %531 = load i32* %527;
    i1 %532 = scmp eq i32 %531, i32 9;
    cbr i1 %532(prob = 0.5), ^if.then84, ^if.else72;
  ^if.then84:
    i32 %533 = load i32* %0;
    i32 %534 = add i32 %533, i32 1;
    store i32* %0 with i32 %534;
    ubr ^while.body20;
  ^if.else72:
    i32 %535 = load i32* %0;
    i32* %536 = getelementptr &(i32* %buf)[i32 %535];
    i32 %537 = load i32* %536;
    i1 %538 = scmp eq i32 %537, i32 10;
    cbr i1 %538(prob = 0.5), ^if.then85, ^if.else73;
  ^if.then85:
    i32 %539 = add i32 %535, i32 1;
    store i32* %0 with i32 %539;
    ubr ^while.body20;
  ^if.else73:
    i32 %540 = load i32* %536;
    i1 %541 = scmp eq i32 %540, i32 13;
    cbr i1 %541(prob = 0.5), ^if.then86, ^b41;
  ^if.then86:
    i32 %542 = load i32* %0;
    i32 %543 = add i32 %542, i32 1;
    store i32* %0 with i32 %543;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %6];
    store i32* %8 with i32 %7;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    i32 %11 = add i32 %6, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %21] [^if.then1, i32 %26] [^if.then4, i32 %37] [^if.then6, i32 %43];
    i1 %14 = scmp ge i32 %13, i32 %4;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 32;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %21 = add i32 %17, i32 1;
    store i32* %pos with i32 %21;
    ubr ^while.body1;
  ^while.body2:
    i32 %22 = phi [^b1, i32 %16] [^if.then3, i32 %36] [^if.then5, i32 %41] [^if.then7, i32 %49] [^if.then8, i32 %52];
    i1 %23 = scmp ge i32 %22, i32 %4;
    cbr i1 %23(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i1 %24 = scmp eq i32 %19, i32 9;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %25 = load i32* %pos;
    i32 %26 = add i32 %25, i32 1;
    store i32* %pos with i32 %26;
    ubr ^while.body1;
  ^b3:
    i1 %27 = scmp neq i32 %15, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then2, ^if.else2;
  ^b4:
    i32 %28 = load i32* %pos;
    i32* %29 = getelementptr &(i32* %5)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 32;
    cbr i1 %31(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %32 = load i32* %pos;
    i32* %33 = getelementptr &(i32* %5)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %34, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then3:
    i32 %36 = add i32 %28, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then4:
    i32 %37 = add i32 %32, i32 1;
    store i32* %pos with i32 %37;
    ubr ^while.body1;
  ^if.else3:
    i1 %38 = scmp eq i32 %30, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then5, ^if.else5;
  ^if.else4:
    i1 %39 = scmp eq i32 %34, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then6, ^b1;
  ^if.then5:
    i32 %40 = load i32* %pos;
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.then6:
    i32 %42 = load i32* %pos;
    i32 %43 = add i32 %42, i32 1;
    store i32* %pos with i32 %43;
    ubr ^while.body1;
  ^if.else5:
    i32 %44 = load i32* %pos;
    i32* %45 = getelementptr &(i32* %5)[i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %46, i32 10;
    cbr i1 %47(prob = 0.5), ^if.then7, ^if.else6;
  ^b5:
    i32 %48 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %48;
  ^if.then7:
    i32 %49 = add i32 %44, i32 1;
    store i32* %pos with i32 %49;
    ubr ^while.body2;
  ^if.else6:
    i1 %50 = scmp eq i32 %46, i32 13;
    cbr i1 %50(prob = 0.5), ^if.then8, ^b3;
  ^if.then8:
    i32 %51 = load i32* %pos;
    i32 %52 = add i32 %51, i32 1;
    store i32* %pos with i32 %52;
    ubr ^while.body2;
}
