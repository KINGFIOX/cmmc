internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3] [^if.else5, i32 2] [^if.else8, i32 1] [^if.else11, i32 5] [^if.else13, i32 6];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then, i32 %16];
    i32 %6 = phi [^2, i32 %3] [^if.then, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 %5] [^if.then1, i32 %26];
    i1 %9 = icmp sle i32 %len, i32 %8;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^b3, i32 0] [^if.else9, i32 0] [^b5, i32 0] [^if.then7, i32 0] [^if.else15, i32 0] [^b10, i32 0] [^if.else17, i32 0] [^if.then9, i32 0] [^if.else18, i32 0] [^if.else19, i32 0] [^if.then10, i32 1] [^if.then14, i32 %141] [^b14, i32 0] [^if.else22, i32 0] [^if.else23, i32 0] [^if.then15, i32 0] [^b16, i32 1] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^if.then18, i32 1] [^if.else30, i32 0] [^if.else31, i32 0] [^if.else32, i32 0] [^b19, i32 0] [^b21, i32 1] [^if.else34, i32 0] [^if.else35, i32 0] [^b23, i32 0] [^b24, i32 0] [^if.else38, i32 0] [^if.else39, i32 0] [^b26, i32 0] [^b29, i32 0] [^b30, i32 1] [^while.header9, i32 1] [^while.body4, i32 1] [^b31, i32 0] [^b36, i32 0] [^b38, i32 0] [^if.else54, i32 0] [^b41, i32 0] [^b43, i32 0] [^b45, i32 0];
    ret i32 %10;
  ^b1:
    i1 %11 = icmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %12 = getelementptr &(i32* %buf)[i32 %8];
    i32 %13 = load i32* %12;
    i1 %14 = icmp eq i32 %13, i32 32;
    cbr i1 %14(prob = 0.5), ^indirect, ^if.else1;
  ^indirect:
    i32 %15 = load i32* %0;
    ubr ^if.then1;
  ^if.then:
    i32 %16 = load i32* %0;
    i32* %17 = getelementptr &(i32* %buf)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 123;
    cbr i1 %19(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %20 = icmp eq i32 %6, i32 1;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else3;
  ^if.else1:
    i32 %21 = load i32* %0;
    i32* %22 = getelementptr &(i32* %buf)[i32 %21];
    i32 %23 = load i32* %22;
    i1 %24 = icmp eq i32 %23, i32 9;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else4;
  ^if.then1:
    i32 %25 = phi [^indirect, i32 %15] [^if.else1, i32 %21] [^if.else4, i32 %21] [^if.else7, i32 %21];
    i32 %26 = add i32 %25, i32 1;
    store i32* %0 with i32 %26;
    ubr ^while.header;
  ^if.else2:
    i1 %27 = icmp eq i32 %18, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then2:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %30, i32 43;
    i1 %32 = icmp eq i32 %30, i32 45;
    i1 %33 = or i1 %31, i1 %32;
    cbr i1 %33(prob = 0.75), ^if.then3, ^b3;
  ^if.else3:
    i1 %34 = icmp eq i32 %6, i32 2;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else4:
    i1 %35 = icmp eq i32 %23, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else7;
  ^if.then3:
    i32 %36 = add i32 %28, i32 1;
    store i32* %0 with i32 %36;
    ubr ^b3;
  ^if.then4:
    i32 %37 = load i32* %0;
    i32 %38 = add i32 %37, i32 1;
    store i32* %0 with i32 %38;
    ubr ^while.header1;
  ^if.else5:
    i1 %39 = icmp eq i32 %18, i32 34;
    cbr i1 %39(prob = 0.5), ^2, ^if.else8;
  ^b3:
    i32 %40 = phi [^if.then2, i32 %28] [^if.then3, i32 %36];
    i1 %41 = icmp sle i32 %len, i32 %40;
    cbr i1 %41(prob = 0.5), ^b, ^if.else9;
  ^if.else6:
    i1 %42 = icmp eq i32 %6, i32 3;
    cbr i1 %42(prob = 0.5), ^if.then5, ^if.else10;
  ^if.else7:
    i1 %43 = icmp eq i32 %23, i32 13;
    cbr i1 %43(prob = 0.5), ^if.then1, ^b1;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.header2;
  ^while.header1:
    i32 %46 = phi [^if.then4, i32 %38] [^b4, i32 %76];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body, ^indirect1;
  ^if.else8:
    i1 %48 = icmp eq i32 %18, i32 43;
    i1 %49 = icmp eq i32 %18, i32 45;
    i1 %50 = or i1 %48, i1 %49;
    i32 %51 = add i32 %18, i32 -48;
    i1 %52 = icmp ult i32 %51, i32 10;
    i1 %53 = or i1 %50, i1 %52;
    cbr i1 %53(prob = 0.875), ^2, ^if.else11;
  ^if.else9:
    i32 %54 = load i32* %0;
    i32* %55 = getelementptr &(i32* %buf)[i32 %54];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %56, i32 -48;
    i1 %58 = icmp uge i32 %57, i32 10;
    cbr i1 %58(prob = 0.5), ^b, ^while.header3;
  ^if.else10:
    i1 %59 = icmp eq i32 %6, i32 4;
    cbr i1 %59(prob = 0.5), ^if.then6, ^if.else12;
  ^indirect1:
    i32 %60 = load i32* %0;
    ubr ^b5;
  ^while.body:
    i32 %61 = load i32* %0;
    i32* %62 = getelementptr &(i32* %buf)[i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = icmp eq i32 %63, i32 34;
    cbr i1 %64(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.header4;
  ^while.header2:
    i32 %67 = phi [^if.then5, i32 %45] [^if.then11, i32 %130];
    i1 %68 = icmp sle i32 %len, i32 %67;
    cbr i1 %68(prob = 0.5), ^b6, ^b7;
  ^while.header3:
    i32 %69 = phi [^if.else9, i32 %54] [^b8, i32 %105];
    i1 %70 = icmp sgt i32 %len, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body1, ^indirect2;
  ^if.else11:
    i1 %71 = icmp eq i32 %18, i32 116;
    cbr i1 %71(prob = 0.5), ^2, ^if.else13;
  ^if.else12:
    i1 %72 = icmp eq i32 %6, i32 5;
    cbr i1 %72(prob = 0.5), ^if.then7, ^if.else14;
  ^b4:
    i1 %73 = icmp eq i32 %63, i32 92;
    i32 %74 = zext i1 %73 to i32;
    i32 %75 = add i32 %61, i32 1;
    i32 %76 = add i32 %74, i32 %75;
    store i32* %0 with i32 %76;
    ubr ^while.header1;
  ^b5:
    i32 %77 = phi [^indirect1, i32 %60] [^while.body, i32 %61];
    i1 %78 = icmp sle i32 %len, i32 %77;
    cbr i1 %78(prob = 0.5), ^b, ^if.else15;
  ^b6:
    i32 %79 = load i32* %0;
    i1 %80 = icmp sgt i32 %len, i32 %79;
    cbr i1 %80(prob = 0.5), ^if.then8, ^b10;
  ^indirect2:
    i32 %81 = load i32* %0;
    ubr ^b11;
  ^b7:
    i32* %82 = getelementptr &(i32* %buf)[i32 %67];
    i32 %83 = load i32* %82;
    i1 %84 = icmp eq i32 %83, i32 32;
    cbr i1 %84(prob = 0.5), ^indirect3, ^if.else16;
  ^while.header4:
    i32 %85 = phi [^if.then6, i32 %66] [^if.then16, i32 %159];
    i1 %86 = icmp sle i32 %len, i32 %85;
    cbr i1 %86(prob = 0.5), ^b9, ^b12;
  ^while.body1:
    i32 %87 = load i32* %0;
    i32* %88 = getelementptr &(i32* %buf)[i32 %87];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %89, i32 -48;
    i1 %91 = icmp uge i32 %90, i32 10;
    cbr i1 %91(prob = 0.5), ^b11, ^b8;
  ^if.then7:
    i32 %92 = load i32* %0;
    i32 %93 = add i32 %92, i32 3;
    i1 %94 = icmp sle i32 %len, i32 %93;
    cbr i1 %94(prob = 0.5), ^b, ^if.else17;
  ^if.else13:
    i1 %95 = icmp eq i32 %18, i32 102;
    cbr i1 %95(prob = 0.5), ^2, ^if.else18;
  ^if.else14:
    i1 %96 = icmp eq i32 %6, i32 6;
    cbr i1 %96(prob = 0.5), ^if.then9, ^if.else19;
  ^indirect3:
    i32 %97 = load i32* %0;
    ubr ^if.then11;
  ^if.else15:
    i32 %98 = load i32* %0;
    i32* %99 = getelementptr &(i32* %buf)[i32 %98];
    i32 %100 = load i32* %99;
    i1 %101 = icmp neq i32 %100, i32 34;
    cbr i1 %101(prob = 0.5), ^b, ^if.then10;
  ^if.then8:
    i32* %102 = getelementptr &(i32* %buf)[i32 %79];
    i32 %103 = load i32* %102;
    i1 %104 = icmp eq i32 %103, i32 93;
    cbr i1 %104(prob = 0.5), ^if.then10, ^b10;
  ^b8:
    i32 %105 = add i32 %87, i32 1;
    store i32* %0 with i32 %105;
    ubr ^while.header3;
  ^b9:
    i32 %106 = load i32* %0;
    i1 %107 = icmp sgt i32 %len, i32 %106;
    cbr i1 %107(prob = 0.5), ^if.then12, ^b14;
  ^b10:
    i32 %108 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %109 = icmp eq i32 %108, i32 0;
    cbr i1 %109(prob = 0.5), ^b, ^b13;
  ^b11:
    i32 %110 = phi [^indirect2, i32 %81] [^while.body1, i32 %87];
    i1 %111 = icmp sgt i32 %len, i32 %110;
    cbr i1 %111(prob = 0.5), ^if.then13, ^indirect5;
  ^if.else16:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = icmp eq i32 %114, i32 9;
    cbr i1 %115(prob = 0.5), ^if.then11, ^if.else20;
  ^b12:
    i32* %116 = getelementptr &(i32* %buf)[i32 %85];
    i32 %117 = load i32* %116;
    i1 %118 = icmp eq i32 %117, i32 32;
    cbr i1 %118(prob = 0.5), ^indirect4, ^if.else21;
  ^if.else17:
    i32* %119 = getelementptr &(i32* %buf)[i32 %92];
    i32 %120 = load i32* %119;
    i1 %121 = icmp neq i32 %120, i32 116;
    cbr i1 %121(prob = 0.5), ^b, ^if.else22;
  ^if.then9:
    i32 %122 = load i32* %0;
    i32 %123 = add i32 %122, i32 4;
    i1 %124 = icmp sle i32 %len, i32 %123;
    cbr i1 %124(prob = 0.5), ^b, ^if.else23;
  ^if.else18:
    i1 %125 = icmp eq i32 %18, i32 110;
    cbr i1 %125(prob = 0.5), ^if.then14, ^b;
  ^if.else19:
    i1 %126 = icmp eq i32 %6, i32 7;
    cbr i1 %126(prob = 0.5), ^if.then15, ^b;
  ^if.then10:
    i32 %127 = phi [^if.else15, i32 %98] [^if.then8, i32 %79] [^if.then12, i32 %106] [^b29, i32 %239] [^if.else54, i32 %346];
    i32 %128 = add i32 %127, i32 1;
    store i32* %0 with i32 %128;
    ubr ^b;
  ^if.then11:
    i32 %129 = phi [^indirect3, i32 %97] [^if.else16, i32 %112] [^if.else20, i32 %112] [^if.else24, i32 %112];
    i32 %130 = add i32 %129, i32 1;
    store i32* %0 with i32 %130;
    ubr ^while.header2;
  ^indirect4:
    i32 %131 = load i32* %0;
    ubr ^if.then16;
  ^b13:
    i32 %132 = load i32* %0;
    ubr ^while.header5;
  ^indirect5:
    i32 %133 = load i32* %0;
    ubr ^b16;
  ^if.then12:
    i32* %134 = getelementptr &(i32* %buf)[i32 %106];
    i32 %135 = load i32* %134;
    i1 %136 = icmp eq i32 %135, i32 125;
    cbr i1 %136(prob = 0.5), ^if.then10, ^b14;
  ^if.then13:
    i32 %137 = load i32* %0;
    i32* %138 = getelementptr &(i32* %buf)[i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = icmp eq i32 %139, i32 46;
    cbr i1 %140(prob = 0.5), ^if.then17, ^b16;
  ^if.then14:
    i32 %141 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b14:
    i32 %142 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %143 = icmp eq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b, ^b15;
  ^if.else20:
    i1 %144 = icmp eq i32 %114, i32 10;
    cbr i1 %144(prob = 0.5), ^if.then11, ^if.else24;
  ^if.else21:
    i32 %145 = load i32* %0;
    i32* %146 = getelementptr &(i32* %buf)[i32 %145];
    i32 %147 = load i32* %146;
    i1 %148 = icmp eq i32 %147, i32 9;
    cbr i1 %148(prob = 0.5), ^if.then16, ^if.else25;
  ^if.else22:
    i32* %149 = getelementptr &(i32* %119)[i64 1];
    i32 %150 = load i32* %149;
    i1 %151 = icmp neq i32 %150, i32 114;
    cbr i1 %151(prob = 0.5), ^b, ^if.else26;
  ^if.else23:
    i32* %152 = getelementptr &(i32* %buf)[i32 %122];
    i32 %153 = load i32* %152;
    i1 %154 = icmp neq i32 %153, i32 102;
    cbr i1 %154(prob = 0.5), ^b, ^if.else27;
  ^if.then15:
    i32 %155 = load i32* %0;
    i32 %156 = add i32 %155, i32 3;
    i1 %157 = icmp sle i32 %len, i32 %156;
    cbr i1 %157(prob = 0.5), ^b, ^if.else28;
  ^if.then16:
    i32 %158 = phi [^indirect4, i32 %131] [^if.else21, i32 %145] [^if.else25, i32 %145] [^if.else29, i32 %145];
    i32 %159 = add i32 %158, i32 1;
    store i32* %0 with i32 %159;
    ubr ^while.header4;
  ^b15:
    i32 %160 = load i32* %0;
    ubr ^while.header6;
  ^if.then17:
    i32 %161 = phi [^if.then13, i32 %137] [^while.body2, i32 %162];
    i32 %162 = add i32 %161, i32 1;
    i1 %163 = icmp sgt i32 %len, i32 %162;
    store i32* %0 with i32 %162;
    cbr i1 %163(prob = 0.984615), ^while.body2, ^b16;
  ^while.header5:
    i32 %164 = phi [^b13, i32 %132] [^if.then20, i32 %230];
    i1 %165 = icmp sle i32 %len, i32 %164;
    cbr i1 %165(prob = 0.5), ^b17, ^b18;
  ^b16:
    i32 %166 = phi [^indirect5, i32 %133] [^if.then13, i32 %137] [^if.then17, i32 %162] [^while.body2, i32 %162];
    i1 %167 = icmp sgt i32 %len, i32 %166;
    cbr i1 %167(prob = 0.5), ^if.then18, ^b;
  ^if.else24:
    i1 %168 = icmp eq i32 %114, i32 13;
    cbr i1 %168(prob = 0.5), ^if.then11, ^b6;
  ^if.else25:
    i1 %169 = icmp eq i32 %147, i32 10;
    cbr i1 %169(prob = 0.5), ^if.then16, ^if.else29;
  ^if.else26:
    i32* %170 = getelementptr &(i32* %119)[i64 2];
    i32 %171 = load i32* %170;
    i1 %172 = icmp neq i32 %171, i32 117;
    cbr i1 %172(prob = 0.5), ^b, ^if.else30;
  ^if.else27:
    i32* %173 = getelementptr &(i32* %152)[i64 1];
    i32 %174 = load i32* %173;
    i1 %175 = icmp neq i32 %174, i32 97;
    cbr i1 %175(prob = 0.5), ^b, ^if.else31;
  ^if.else28:
    i32* %176 = getelementptr &(i32* %buf)[i32 %155];
    i32 %177 = load i32* %176;
    i1 %178 = icmp neq i32 %177, i32 110;
    cbr i1 %178(prob = 0.5), ^b, ^if.else32;
  ^while.body2:
    i32* %179 = getelementptr &(i32* %buf)[i32 %162];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %180, i32 -48;
    i1 %182 = icmp ult i32 %181, i32 10;
    cbr i1 %182(prob = 0.5), ^if.then17, ^b16;
  ^b17:
    i32 %183 = load i32* %0;
    i32* %184 = getelementptr &(i32* %buf)[i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = icmp eq i32 %185, i32 44;
    cbr i1 %186(prob = 0.984615), ^while.body3, ^while.header7;
  ^if.then18:
    i32 %187 = load i32* %0;
    i32* %188 = getelementptr &(i32* %buf)[i32 %187];
    i32 %189 = load i32* %188;
    i1 %190 = icmp eq i32 %189, i32 101;
    cbr i1 %190(prob = 0.5), ^if.then19, ^b;
  ^b18:
    i32* %191 = getelementptr &(i32* %buf)[i32 %164];
    i32 %192 = load i32* %191;
    i1 %193 = icmp eq i32 %192, i32 32;
    cbr i1 %193(prob = 0.5), ^indirect6, ^if.else33;
  ^while.header6:
    i32 %194 = phi [^b15, i32 %160] [^if.then23, i32 %262];
    i1 %195 = icmp sle i32 %len, i32 %194;
    cbr i1 %195(prob = 0.5), ^b19, ^b20;
  ^if.else29:
    i1 %196 = icmp eq i32 %147, i32 13;
    cbr i1 %196(prob = 0.5), ^if.then16, ^b9;
  ^if.else30:
    i32* %197 = getelementptr &(i32* %119)[i64 3];
    i32 %198 = load i32* %197;
    i1 %199 = icmp neq i32 %198, i32 101;
    cbr i1 %199(prob = 0.5), ^b, ^b21;
  ^if.else31:
    i32* %200 = getelementptr &(i32* %152)[i64 2];
    i32 %201 = load i32* %200;
    i1 %202 = icmp neq i32 %201, i32 108;
    cbr i1 %202(prob = 0.5), ^b, ^if.else34;
  ^if.else32:
    i32* %203 = getelementptr &(i32* %176)[i64 1];
    i32 %204 = load i32* %203;
    i1 %205 = icmp neq i32 %204, i32 117;
    cbr i1 %205(prob = 0.5), ^b, ^if.else35;
  ^while.body3:
    i32 %206 = add i32 %183, i32 1;
    store i32* %0 with i32 %206;
    ubr ^while.header8;
  ^indirect6:
    i32 %207 = load i32* %0;
    ubr ^if.then20;
  ^if.then19:
    i32 %208 = add i32 %187, i32 1;
    i1 %209 = icmp sgt i32 %len, i32 %208;
    store i32* %0 with i32 %208;
    cbr i1 %209(prob = 0.5), ^if.then21, ^b22;
  ^b19:
    i32 %210 = load i32* %0;
    i1 %211 = icmp sle i32 %len, i32 %210;
    cbr i1 %211(prob = 0.5), ^b, ^b24;
  ^while.header7:
    i32 %212 = phi [^b17, i32 %183] [^if.then26, i32 %289];
    i1 %213 = icmp sle i32 %len, i32 %212;
    cbr i1 %213(prob = 0.5), ^b23, ^b25;
  ^if.else33:
    i32 %214 = load i32* %0;
    i32* %215 = getelementptr &(i32* %buf)[i32 %214];
    i32 %216 = load i32* %215;
    i1 %217 = icmp eq i32 %216, i32 9;
    cbr i1 %217(prob = 0.5), ^if.then20, ^if.else36;
  ^b20:
    i32* %218 = getelementptr &(i32* %buf)[i32 %194];
    i32 %219 = load i32* %218;
    i1 %220 = icmp eq i32 %219, i32 32;
    cbr i1 %220(prob = 0.5), ^indirect7, ^if.else37;
  ^b21:
    i32 %221 = phi [^if.else30, i32 %92] [^if.else39, i32 %155];
    i32 %222 = add i32 %221, i32 4;
    store i32* %0 with i32 %222;
    ubr ^b;
  ^if.else34:
    i32* %223 = getelementptr &(i32* %152)[i64 3];
    i32 %224 = load i32* %223;
    i1 %225 = icmp neq i32 %224, i32 115;
    cbr i1 %225(prob = 0.5), ^b, ^if.else38;
  ^if.else35:
    i32* %226 = getelementptr &(i32* %176)[i64 2];
    i32 %227 = load i32* %226;
    i1 %228 = icmp neq i32 %227, i32 108;
    cbr i1 %228(prob = 0.5), ^b, ^if.else39;
  ^if.then20:
    i32 %229 = phi [^indirect6, i32 %207] [^if.else33, i32 %214] [^if.else36, i32 %214] [^if.else41, i32 %214];
    i32 %230 = add i32 %229, i32 1;
    store i32* %0 with i32 %230;
    ubr ^while.header5;
  ^indirect7:
    i32 %231 = load i32* %0;
    ubr ^if.then23;
  ^if.then21:
    i32* %232 = getelementptr &(i32* %buf)[i32 %208];
    i32 %233 = load i32* %232;
    i1 %234 = icmp eq i32 %233, i32 43;
    cbr i1 %234(prob = 0.5), ^if.then22, ^indirect8;
  ^while.header8:
    i32 %235 = phi [^while.body3, i32 %206] [^if.then27, i32 %301];
    i1 %236 = icmp sle i32 %len, i32 %235;
    cbr i1 %236(prob = 0.5), ^b26, ^b28;
  ^b22:
    i32 %237 = phi [^if.then19, i32 %208] [^if.then22, i32 %259] [^indirect8, i32 %260];
    i1 %238 = icmp sgt i32 %len, i32 %237;
    cbr i1 %238(prob = 0.5), ^if.then24, ^indirect9;
  ^b23:
    i32 %239 = load i32* %0;
    i1 %240 = icmp sle i32 %len, i32 %239;
    cbr i1 %240(prob = 0.5), ^b, ^b29;
  ^b24:
    i32* %241 = getelementptr &(i32* %buf)[i32 %210];
    i32 %242 = load i32* %241;
    i1 %243 = icmp neq i32 %242, i32 58;
    cbr i1 %243(prob = 0.5), ^b, ^b27;
  ^b25:
    i32* %244 = getelementptr &(i32* %buf)[i32 %212];
    i32 %245 = load i32* %244;
    i1 %246 = icmp eq i32 %245, i32 32;
    cbr i1 %246(prob = 0.5), ^indirect10, ^if.else40;
  ^if.else36:
    i1 %247 = icmp eq i32 %216, i32 10;
    cbr i1 %247(prob = 0.5), ^if.then20, ^if.else41;
  ^if.else37:
    i32 %248 = load i32* %0;
    i32* %249 = getelementptr &(i32* %buf)[i32 %248];
    i32 %250 = load i32* %249;
    i1 %251 = icmp eq i32 %250, i32 9;
    cbr i1 %251(prob = 0.5), ^if.then23, ^if.else42;
  ^if.else38:
    i32* %252 = getelementptr &(i32* %152)[i64 4];
    i32 %253 = load i32* %252;
    i1 %254 = icmp neq i32 %253, i32 101;
    cbr i1 %254(prob = 0.5), ^b, ^b30;
  ^if.else39:
    i32* %255 = getelementptr &(i32* %176)[i64 3];
    i32 %256 = load i32* %255;
    i1 %257 = icmp neq i32 %256, i32 108;
    cbr i1 %257(prob = 0.5), ^b, ^b21;
  ^if.then22:
    i32 %258 = load i32* %0;
    i32 %259 = add i32 %258, i32 1;
    store i32* %0 with i32 %259;
    ubr ^b22;
  ^indirect8:
    i32 %260 = load i32* %0;
    ubr ^b22;
  ^if.then23:
    i32 %261 = phi [^indirect7, i32 %231] [^if.else37, i32 %248] [^if.else42, i32 %248] [^if.else45, i32 %248];
    i32 %262 = add i32 %261, i32 1;
    store i32* %0 with i32 %262;
    ubr ^while.header6;
  ^indirect9:
    i32 %263 = load i32* %0;
    ubr ^while.header9;
  ^b26:
    i32 %264 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %265 = icmp neq i32 %264, i32 0;
    cbr i1 %265(prob = 0.5), ^b13, ^b;
  ^indirect10:
    i32 %266 = load i32* %0;
    ubr ^if.then26;
  ^if.then24:
    i32 %267 = load i32* %0;
    i32* %268 = getelementptr &(i32* %buf)[i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = icmp eq i32 %269, i32 45;
    cbr i1 %270(prob = 0.5), ^if.then25, ^while.header9;
  ^b27:
    i32 %271 = add i32 %210, i32 1;
    store i32* %0 with i32 %271;
    ubr ^while.header10;
  ^b28:
    i32* %272 = getelementptr &(i32* %buf)[i32 %235];
    i32 %273 = load i32* %272;
    i1 %274 = icmp eq i32 %273, i32 32;
    cbr i1 %274(prob = 0.5), ^indirect11, ^if.else43;
  ^b29:
    i32* %275 = getelementptr &(i32* %buf)[i32 %239];
    i32 %276 = load i32* %275;
    i1 %277 = icmp neq i32 %276, i32 93;
    cbr i1 %277(prob = 0.5), ^b, ^if.then10;
  ^if.else40:
    i32 %278 = load i32* %0;
    i32* %279 = getelementptr &(i32* %buf)[i32 %278];
    i32 %280 = load i32* %279;
    i1 %281 = icmp eq i32 %280, i32 9;
    cbr i1 %281(prob = 0.5), ^if.then26, ^if.else44;
  ^if.else41:
    i1 %282 = icmp eq i32 %216, i32 13;
    cbr i1 %282(prob = 0.5), ^if.then20, ^b17;
  ^if.else42:
    i1 %283 = icmp eq i32 %250, i32 10;
    cbr i1 %283(prob = 0.5), ^if.then23, ^if.else45;
  ^b30:
    i32 %284 = add i32 %122, i32 5;
    store i32* %0 with i32 %284;
    ubr ^b;
  ^if.then25:
    i32 %285 = phi [^if.then24, i32 %267] [^while.body4, i32 %302];
    i32 %286 = add i32 %285, i32 1;
    store i32* %0 with i32 %286;
    ubr ^while.header9;
  ^indirect11:
    i32 %287 = load i32* %0;
    ubr ^if.then27;
  ^if.then26:
    i32 %288 = phi [^indirect10, i32 %266] [^if.else40, i32 %278] [^if.else44, i32 %278] [^if.else47, i32 %278];
    i32 %289 = add i32 %288, i32 1;
    store i32* %0 with i32 %289;
    ubr ^while.header7;
  ^while.header9:
    i32 %290 = phi [^indirect9, i32 %263] [^if.then24, i32 %267] [^if.then25, i32 %286];
    i1 %291 = icmp sgt i32 %len, i32 %290;
    cbr i1 %291(prob = 0.984615), ^while.body4, ^b;
  ^if.else43:
    i32 %292 = load i32* %0;
    i32* %293 = getelementptr &(i32* %buf)[i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = icmp eq i32 %294, i32 9;
    cbr i1 %295(prob = 0.5), ^if.then27, ^if.else46;
  ^while.header10:
    i32 %296 = phi [^b27, i32 %271] [^if.then28, i32 %322];
    i1 %297 = icmp sle i32 %len, i32 %296;
    cbr i1 %297(prob = 0.5), ^b31, ^b32;
  ^if.else44:
    i1 %298 = icmp eq i32 %280, i32 10;
    cbr i1 %298(prob = 0.5), ^if.then26, ^if.else47;
  ^if.else45:
    i1 %299 = icmp eq i32 %250, i32 13;
    cbr i1 %299(prob = 0.5), ^if.then23, ^b19;
  ^if.then27:
    i32 %300 = phi [^indirect11, i32 %287] [^if.else43, i32 %292] [^if.else46, i32 %292] [^if.else48, i32 %292];
    i32 %301 = add i32 %300, i32 1;
    store i32* %0 with i32 %301;
    ubr ^while.header8;
  ^while.body4:
    i32 %302 = load i32* %0;
    i32* %303 = getelementptr &(i32* %buf)[i32 %302];
    i32 %304 = load i32* %303;
    i32 %305 = add i32 %304, i32 -48;
    i1 %306 = icmp uge i32 %305, i32 10;
    cbr i1 %306(prob = 0.5), ^b, ^if.then25;
  ^b31:
    i32 %307 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %308 = icmp eq i32 %307, i32 0;
    cbr i1 %308(prob = 0.5), ^b, ^b33;
  ^if.else46:
    i1 %309 = icmp eq i32 %294, i32 10;
    cbr i1 %309(prob = 0.5), ^if.then27, ^if.else48;
  ^b32:
    i32* %310 = getelementptr &(i32* %buf)[i32 %296];
    i32 %311 = load i32* %310;
    i1 %312 = icmp eq i32 %311, i32 32;
    cbr i1 %312(prob = 0.5), ^indirect12, ^if.else49;
  ^if.else47:
    i1 %313 = icmp eq i32 %280, i32 13;
    cbr i1 %313(prob = 0.5), ^if.then26, ^b23;
  ^indirect12:
    i32 %314 = load i32* %0;
    ubr ^if.then28;
  ^b33:
    i32 %315 = load i32* %0;
    ubr ^while.header11;
  ^if.else48:
    i1 %316 = icmp eq i32 %294, i32 13;
    cbr i1 %316(prob = 0.5), ^if.then27, ^b26;
  ^if.else49:
    i32 %317 = load i32* %0;
    i32* %318 = getelementptr &(i32* %buf)[i32 %317];
    i32 %319 = load i32* %318;
    i1 %320 = icmp eq i32 %319, i32 9;
    cbr i1 %320(prob = 0.5), ^if.then28, ^if.else50;
  ^if.then28:
    i32 %321 = phi [^indirect12, i32 %314] [^if.else49, i32 %317] [^if.else50, i32 %317] [^if.else51, i32 %317];
    i32 %322 = add i32 %321, i32 1;
    store i32* %0 with i32 %322;
    ubr ^while.header10;
  ^while.header11:
    i32 %323 = phi [^b33, i32 %315] [^if.then29, i32 %343];
    i1 %324 = icmp sle i32 %len, i32 %323;
    cbr i1 %324(prob = 0.5), ^b34, ^b35;
  ^if.else50:
    i1 %325 = icmp eq i32 %319, i32 10;
    cbr i1 %325(prob = 0.5), ^if.then28, ^if.else51;
  ^b34:
    i32 %326 = load i32* %0;
    i32* %327 = getelementptr &(i32* %buf)[i32 %326];
    i32 %328 = load i32* %327;
    i1 %329 = icmp eq i32 %328, i32 44;
    cbr i1 %329(prob = 0.984615), ^while.body5, ^while.header12;
  ^b35:
    i32* %330 = getelementptr &(i32* %buf)[i32 %323];
    i32 %331 = load i32* %330;
    i1 %332 = icmp eq i32 %331, i32 32;
    cbr i1 %332(prob = 0.5), ^indirect13, ^if.else52;
  ^if.else51:
    i1 %333 = icmp eq i32 %319, i32 13;
    cbr i1 %333(prob = 0.5), ^if.then28, ^b31;
  ^while.body5:
    i32 %334 = add i32 %326, i32 1;
    store i32* %0 with i32 %334;
    ubr ^while.header13;
  ^indirect13:
    i32 %335 = load i32* %0;
    ubr ^if.then29;
  ^while.header12:
    i32 %336 = phi [^b34, i32 %326] [^if.then30, i32 %369];
    i1 %337 = icmp sle i32 %len, i32 %336;
    cbr i1 %337(prob = 0.5), ^b36, ^b37;
  ^if.else52:
    i32 %338 = load i32* %0;
    i32* %339 = getelementptr &(i32* %buf)[i32 %338];
    i32 %340 = load i32* %339;
    i1 %341 = icmp eq i32 %340, i32 9;
    cbr i1 %341(prob = 0.5), ^if.then29, ^if.else53;
  ^if.then29:
    i32 %342 = phi [^indirect13, i32 %335] [^if.else52, i32 %338] [^if.else53, i32 %338] [^if.else56, i32 %338];
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    ubr ^while.header11;
  ^while.header13:
    i32 %344 = phi [^while.body5, i32 %334] [^if.then31, i32 %376];
    i1 %345 = icmp sle i32 %len, i32 %344;
    cbr i1 %345(prob = 0.5), ^b38, ^b39;
  ^b36:
    i32 %346 = load i32* %0;
    i1 %347 = icmp sle i32 %len, i32 %346;
    cbr i1 %347(prob = 0.5), ^b, ^if.else54;
  ^b37:
    i32* %348 = getelementptr &(i32* %buf)[i32 %336];
    i32 %349 = load i32* %348;
    i1 %350 = icmp eq i32 %349, i32 32;
    cbr i1 %350(prob = 0.5), ^indirect14, ^if.else55;
  ^if.else53:
    i1 %351 = icmp eq i32 %340, i32 10;
    cbr i1 %351(prob = 0.5), ^if.then29, ^if.else56;
  ^b38:
    i32 %352 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %353 = icmp eq i32 %352, i32 0;
    cbr i1 %353(prob = 0.5), ^b, ^b40;
  ^indirect14:
    i32 %354 = load i32* %0;
    ubr ^if.then30;
  ^b39:
    i32* %355 = getelementptr &(i32* %buf)[i32 %344];
    i32 %356 = load i32* %355;
    i1 %357 = icmp eq i32 %356, i32 32;
    cbr i1 %357(prob = 0.5), ^indirect15, ^if.else57;
  ^if.else54:
    i32* %358 = getelementptr &(i32* %buf)[i32 %346];
    i32 %359 = load i32* %358;
    i1 %360 = icmp neq i32 %359, i32 125;
    cbr i1 %360(prob = 0.5), ^b, ^if.then10;
  ^if.else55:
    i32 %361 = load i32* %0;
    i32* %362 = getelementptr &(i32* %buf)[i32 %361];
    i32 %363 = load i32* %362;
    i1 %364 = icmp eq i32 %363, i32 9;
    cbr i1 %364(prob = 0.5), ^if.then30, ^if.else58;
  ^if.else56:
    i1 %365 = icmp eq i32 %340, i32 13;
    cbr i1 %365(prob = 0.5), ^if.then29, ^b34;
  ^indirect15:
    i32 %366 = load i32* %0;
    ubr ^if.then31;
  ^b40:
    i32 %367 = load i32* %0;
    ubr ^while.header14;
  ^if.then30:
    i32 %368 = phi [^indirect14, i32 %354] [^if.else55, i32 %361] [^if.else58, i32 %361] [^if.else60, i32 %361];
    i32 %369 = add i32 %368, i32 1;
    store i32* %0 with i32 %369;
    ubr ^while.header12;
  ^if.else57:
    i32 %370 = load i32* %0;
    i32* %371 = getelementptr &(i32* %buf)[i32 %370];
    i32 %372 = load i32* %371;
    i1 %373 = icmp eq i32 %372, i32 9;
    cbr i1 %373(prob = 0.5), ^if.then31, ^if.else59;
  ^if.else58:
    i1 %374 = icmp eq i32 %363, i32 10;
    cbr i1 %374(prob = 0.5), ^if.then30, ^if.else60;
  ^if.then31:
    i32 %375 = phi [^indirect15, i32 %366] [^if.else57, i32 %370] [^if.else59, i32 %370] [^if.else61, i32 %370];
    i32 %376 = add i32 %375, i32 1;
    store i32* %0 with i32 %376;
    ubr ^while.header13;
  ^while.header14:
    i32 %377 = phi [^b40, i32 %367] [^if.then32, i32 %396];
    i1 %378 = icmp sle i32 %len, i32 %377;
    cbr i1 %378(prob = 0.5), ^b41, ^b42;
  ^if.else59:
    i1 %379 = icmp eq i32 %372, i32 10;
    cbr i1 %379(prob = 0.5), ^if.then31, ^if.else61;
  ^if.else60:
    i1 %380 = icmp eq i32 %363, i32 13;
    cbr i1 %380(prob = 0.5), ^if.then30, ^b36;
  ^b41:
    i32 %381 = load i32* %0;
    i1 %382 = icmp sle i32 %len, i32 %381;
    cbr i1 %382(prob = 0.5), ^b, ^b43;
  ^b42:
    i32* %383 = getelementptr &(i32* %buf)[i32 %377];
    i32 %384 = load i32* %383;
    i1 %385 = icmp eq i32 %384, i32 32;
    cbr i1 %385(prob = 0.5), ^indirect16, ^if.else62;
  ^if.else61:
    i1 %386 = icmp eq i32 %372, i32 13;
    cbr i1 %386(prob = 0.5), ^if.then31, ^b38;
  ^indirect16:
    i32 %387 = load i32* %0;
    ubr ^if.then32;
  ^b43:
    i32* %388 = getelementptr &(i32* %buf)[i32 %381];
    i32 %389 = load i32* %388;
    i1 %390 = icmp neq i32 %389, i32 58;
    cbr i1 %390(prob = 0.5), ^b, ^b44;
  ^if.else62:
    i32 %391 = load i32* %0;
    i32* %392 = getelementptr &(i32* %buf)[i32 %391];
    i32 %393 = load i32* %392;
    i1 %394 = icmp eq i32 %393, i32 9;
    cbr i1 %394(prob = 0.5), ^if.then32, ^if.else63;
  ^if.then32:
    i32 %395 = phi [^indirect16, i32 %387] [^if.else62, i32 %391] [^if.else63, i32 %391] [^if.else64, i32 %391];
    i32 %396 = add i32 %395, i32 1;
    store i32* %0 with i32 %396;
    ubr ^while.header14;
  ^b44:
    i32 %397 = add i32 %381, i32 1;
    store i32* %0 with i32 %397;
    ubr ^while.header15;
  ^if.else63:
    i1 %398 = icmp eq i32 %393, i32 10;
    cbr i1 %398(prob = 0.5), ^if.then32, ^if.else64;
  ^while.header15:
    i32 %399 = phi [^b44, i32 %397] [^if.then33, i32 %413];
    i1 %400 = icmp sle i32 %len, i32 %399;
    cbr i1 %400(prob = 0.5), ^b45, ^b46;
  ^if.else64:
    i1 %401 = icmp eq i32 %393, i32 13;
    cbr i1 %401(prob = 0.5), ^if.then32, ^b41;
  ^b45:
    i32 %402 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %403 = icmp neq i32 %402, i32 0;
    cbr i1 %403(prob = 0.5), ^b33, ^b;
  ^b46:
    i32* %404 = getelementptr &(i32* %buf)[i32 %399];
    i32 %405 = load i32* %404;
    i1 %406 = icmp eq i32 %405, i32 32;
    cbr i1 %406(prob = 0.5), ^indirect17, ^if.else65;
  ^indirect17:
    i32 %407 = load i32* %0;
    ubr ^if.then33;
  ^if.else65:
    i32 %408 = load i32* %0;
    i32* %409 = getelementptr &(i32* %buf)[i32 %408];
    i32 %410 = load i32* %409;
    i1 %411 = icmp eq i32 %410, i32 9;
    cbr i1 %411(prob = 0.5), ^if.then33, ^if.else66;
  ^if.then33:
    i32 %412 = phi [^indirect17, i32 %407] [^if.else65, i32 %408] [^if.else66, i32 %408] [^if.else67, i32 %408];
    i32 %413 = add i32 %412, i32 1;
    store i32* %0 with i32 %413;
    ubr ^while.header15;
  ^if.else66:
    i1 %414 = icmp eq i32 %410, i32 10;
    cbr i1 %414(prob = 0.5), ^if.then33, ^if.else67;
  ^if.else67:
    i1 %415 = icmp eq i32 %410, i32 13;
    cbr i1 %415(prob = 0.5), ^if.then33, ^b45;
}
internal [50000000 * i32]* @buffer, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32, align 4;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.header:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %28];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.header1;
  ^b2:
    i32* %17 = getelementptr &(i32* %5)[i32 %13];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^indirect1, ^if.else;
  ^indirect1:
    i32 %20 = load i32* %pos;
    ubr ^if.then;
  ^while.header1:
    i32 %21 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %22 = icmp sle i32 %4, i32 %21;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i32 %23 = load i32* %pos;
    i32* %24 = getelementptr &(i32* %5)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = icmp eq i32 %25, i32 9;
    cbr i1 %26(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %27 = phi [^indirect1, i32 %20] [^if.else, i32 %23] [^if.else1, i32 %23] [^if.else4, i32 %23];
    i32 %28 = add i32 %27, i32 1;
    store i32* %pos with i32 %28;
    ubr ^while.header;
  ^b3:
    i1 %29 = icmp neq i32 %15, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else2;
  ^b4:
    i32* %30 = getelementptr &(i32* %5)[i32 %21];
    i32 %31 = load i32* %30;
    i1 %32 = icmp eq i32 %31, i32 32;
    cbr i1 %32(prob = 0.5), ^indirect2, ^if.else3;
  ^if.else1:
    i1 %33 = icmp eq i32 %25, i32 10;
    cbr i1 %33(prob = 0.5), ^if.then, ^if.else4;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^indirect2:
    i32 %34 = load i32* %pos;
    ubr ^if.then2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.else3:
    i32 %35 = load i32* %pos;
    i32* %36 = getelementptr &(i32* %5)[i32 %35];
    i32 %37 = load i32* %36;
    i1 %38 = icmp eq i32 %37, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then2, ^if.else5;
  ^if.else4:
    i1 %39 = icmp eq i32 %25, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then, ^b1;
  ^if.then2:
    i32 %40 = phi [^indirect2, i32 %34] [^if.else3, i32 %35] [^if.else5, i32 %35] [^if.else6, i32 %35];
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.header1;
  ^if.else5:
    i1 %42 = icmp eq i32 %37, i32 10;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else6;
  ^b5:
    i32 %43 = phi [^if.then1, i32 0] [^if.else2, i32 1];
    ret i32 %43;
  ^if.else6:
    i1 %44 = icmp eq i32 %37, i32 13;
    cbr i1 %44(prob = 0.5), ^if.then2, ^b3;
}
