internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^if.then, i32 %11] [^if.then3, i32 %20] [^if.then7, i32 %35] [^if.then11, i32 %51];
    i1 %4 = scmp ge i32 %3, i32 %len;
    cbr i1 %4(prob = 0.5), ^b1, ^b2;
^b:
    i32 %5 = phi [^entry, i32 0] [^if.then2, i32 %18] [^if.then6, i32 %34] [^b3, i32 0] [^if.then9, i32 %47] [^if.else8, i32 0] [^b4, i32 0] [^if.then14, i32 0] [^if.else10, i32 0] [^if.then15, i32 %85] [^b7, i32 1] [^if.then17, i32 0] [^if.then20, i32 %113] [^b9, i32 0] [^if.else16, i32 0] [^if.then22, i32 0] [^if.else18, i32 0] [^if.then23, i32 1] [^if.then27, i32 %152] [^b12, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^if.then30, i32 0] [^if.then31, i32 1] [^if.then34, i32 %192] [^b14, i32 1] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^if.then38, i32 %233] [^if.then39, i32 1] [^if.else31, i32 0] [^if.else32, i32 0] [^if.else33, i32 0] [^if.else34, i32 0] [^b17, i32 0] [^if.then44, i32 %279] [^b20, i32 1] [^if.else36, i32 0] [^if.else37, i32 0] [^b21, i32 0] [^b22, i32 0] [^if.else41, i32 0] [^if.else42, i32 0] [^while.body11, i32 0] [^b27, i32 0] [^b28, i32 1] [^while.guard1, i32 1] [^b29, i32 0] [^b31, i32 1] [^b34, i32 1] [^b35, i32 0] [^while.body18, i32 0] [^if.else58, i32 0] [^b38, i32 0] [^b40, i32 0] [^b42, i32 0];
    ret i32 %5;
^b1:
    i1 %6 = scmp eq i32 %type, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %7 = load i32* %0;
    i32* %8 = getelementptr &(i32* %buf)[i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp eq i32 %9, i32 32;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %11 = add i32 %7, i32 1;
    store i32* %0 with i32 %11;
    ubr ^while.body;
^if.then1:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 123;
    cbr i1 %15(prob = 0.5), ^if.then2, ^if.else2;
^if.else:
    i1 %16 = scmp eq i32 %type, i32 1;
    cbr i1 %16(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i1 %17 = scmp eq i32 %9, i32 9;
    cbr i1 %17(prob = 0.5), ^if.then3, ^if.else4;
^if.then2:
    i32 %18 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then3:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.body;
^if.else2:
    i1 %21 = scmp eq i32 %14, i32 91;
    cbr i1 %21(prob = 0.5), ^if.then6, ^if.else5;
^if.then4:
    i32 %22 = load i32* %0;
    i32* %23 = getelementptr &(i32* %buf)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 43;
    i1 %26 = scmp eq i32 %24, i32 45;
    i1 %27 = or i1 %26, i1 %25;
    cbr i1 %27(prob = 0.75), ^if.then5, ^b3;
^if.else3:
    i1 %28 = scmp eq i32 %type, i32 2;
    cbr i1 %28(prob = 0.5), ^if.then8, ^if.else6;
^if.else4:
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %buf)[i32 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 10;
    cbr i1 %32(prob = 0.5), ^if.then7, ^if.else7;
^if.then5:
    i32 %33 = add i32 %22, i32 1;
    store i32* %0 with i32 %33;
    ubr ^b3;
^if.then6:
    i32 %34 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then7:
    i32 %35 = add i32 %29, i32 1;
    store i32* %0 with i32 %35;
    ubr ^while.body;
^if.then8:
    i32 %36 = load i32* %0;
    i32 %37 = add i32 %36, i32 1;
    store i32* %0 with i32 %37;
    i1 %38 = scmp lt i32 %37, i32 %len;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b4;
^if.else5:
    i32 %39 = load i32* %0;
    i32* %40 = getelementptr &(i32* %buf)[i32 %39];
    i32 %41 = load i32* %40;
    i1 %42 = scmp eq i32 %41, i32 34;
    cbr i1 %42(prob = 0.5), ^if.then9, ^entry1;
^b3:
    i32 %43 = phi [^if.then4, i32 %22] [^if.then5, i32 %33];
    i1 %44 = scmp ge i32 %43, i32 %len;
    cbr i1 %44(prob = 0.5), ^b, ^if.else8;
^if.else6:
    i1 %45 = scmp eq i32 %type, i32 3;
    cbr i1 %45(prob = 0.5), ^if.then10, ^if.else9;
^if.else7:
    i1 %46 = scmp eq i32 %31, i32 13;
    cbr i1 %46(prob = 0.5), ^if.then11, ^b1;
^if.then9:
    i32 %47 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then10:
    i32 %48 = load i32* %0;
    i32 %49 = add i32 %48, i32 1;
    store i32* %0 with i32 %49;
    ubr ^while.body2;
^if.then11:
    i32 %50 = load i32* %0;
    i32 %51 = add i32 %50, i32 1;
    store i32* %0 with i32 %51;
    ubr ^while.body;
^while.body1:
    i32 %52 = phi [^if.then8, i32 %37] [^b5, i32 %72];
    i32* %53 = getelementptr &(i32* %buf)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 34;
    cbr i1 %55(prob = 0.5), ^indirect, ^b5;
^if.else8:
    i32 %56 = load i32* %0;
    i32* %57 = getelementptr &(i32* %buf)[i32 %56];
    i32 %58 = load i32* %57;
    i1 %59 = scmp gt i32 %58, i32 47;
    cbr i1 %59(prob = 0.5), ^if.then14, ^b;
^b4:
    i32 %60 = phi [^if.then8, i32 %37] [^indirect, i32 %64] [^b5, i32 %72];
    i1 %61 = scmp ge i32 %60, i32 %len;
    cbr i1 %61(prob = 0.5), ^b, ^if.else10;
^entry1:
    i1 %62 = scmp gt i32 %41, i32 47;
    cbr i1 %62(prob = 0.5), ^if.then13, ^b6;
^if.else9:
    i1 %63 = scmp eq i32 %type, i32 4;
    cbr i1 %63(prob = 0.5), ^if.then12, ^if.else11;
^indirect:
    i32 %64 = load i32* %0;
    ubr ^b4;
^if.then12:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.body3;
^b5:
    i32 %67 = load i32* %0;
    i32* %68 = getelementptr &(i32* %buf)[i32 %67];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 92;
    i32 %71 = select i1 %70 ? i32 2 : i32 1;
    i32 %72 = add i32 %71, i32 %67;
    store i32* %0 with i32 %72;
    i1 %73 = scmp lt i32 %72, i32 %len;
    cbr i1 %73(prob = 0.97), ^while.body1, ^b4;
^if.then13:
    i1 %74 = scmp lt i32 %41, i32 58;
    cbr i1 %74(prob = 0.5), ^b6, ^if.else12;
^while.body2:
    i32 %75 = phi [^if.then10, i32 %49] [^if.then18, i32 %109] [^if.then24, i32 %145] [^if.then32, i32 %188] [^if.then36, i32 %224];
    i1 %76 = scmp ge i32 %75, i32 %len;
    cbr i1 %76(prob = 0.5), ^if.then16, ^b8;
^if.then14:
    i1 %77 = scmp gt i32 %58, i32 57;
    cbr i1 %77(prob = 0.5), ^b, ^while.guard;
^if.else10:
    i32 %78 = load i32* %0;
    i32* %79 = getelementptr &(i32* %buf)[i32 %78];
    i32 %80 = load i32* %79;
    i1 %81 = scmp neq i32 %80, i32 34;
    cbr i1 %81(prob = 0.5), ^b, ^b7;
^b6:
    i32 %82 = phi [^entry1, i32 0] [^if.then13, i32 1] [^if.else12, i32 0];
    i1 %83 = scmp eq i32 %82, i32 1;
    cbr i1 %83(prob = 0.5), ^if.then15, ^if.else13;
^if.else11:
    i1 %84 = scmp eq i32 %type, i32 5;
    cbr i1 %84(prob = 0.5), ^if.then17, ^if.else14;
^if.else12:
    ubr ^b6;
^if.then15:
    i32 %85 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b7:
    i32 %86 = phi [^if.else10, i32 %78] [^indirect7, i32 %370] [^indirect9, i32 %476];
    i32 %87 = add i32 %86, i32 1;
    store i32* %0 with i32 %87;
    ubr ^b;
^if.then16:
    i32 %88 = load i32* %0;
    i1 %89 = scmp lt i32 %88, i32 %len;
    cbr i1 %89(prob = 0.5), ^if.then19, ^b9;
^b8:
    i32 %90 = load i32* %0;
    i32* %91 = getelementptr &(i32* %buf)[i32 %90];
    i32 %92 = load i32* %91;
    i1 %93 = scmp eq i32 %92, i32 32;
    cbr i1 %93(prob = 0.5), ^if.then18, ^if.else15;
^while.body3:
    i32 %94 = phi [^if.then12, i32 %66] [^if.then25, i32 %146] [^if.then33, i32 %190] [^if.then37, i32 %225] [^if.then42, i32 %270];
    i1 %95 = scmp ge i32 %94, i32 %len;
    cbr i1 %95(prob = 0.5), ^if.then21, ^b10;
^while.guard:
    i1 %96 = scmp lt i32 %56, i32 %len;
    cbr i1 %96(prob = 0.97), ^while.body4, ^b11;
^if.then17:
    i32* %97 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %97 with i32 116;
    i32* %98 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %98 with i32 114;
    i32* %99 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %99 with i32 117;
    i32* %100 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %100 with i32 101;
    i32 %101 = load i32* %0;
    i32 %102 = add i32 %101, i32 3;
    i1 %103 = scmp ge i32 %102, i32 %len;
    cbr i1 %103(prob = 0.5), ^b, ^if.else16;
^if.else13:
    i32 %104 = load i32* %0;
    i32* %105 = getelementptr &(i32* %buf)[i32 %104];
    i32 %106 = load i32* %105;
    i1 %107 = scmp eq i32 %106, i32 43;
    cbr i1 %107(prob = 0.5), ^if.then20, ^if.else17;
^if.else14:
    i1 %108 = scmp eq i32 %type, i32 6;
    cbr i1 %108(prob = 0.5), ^if.then22, ^if.else18;
^if.then18:
    i32 %109 = add i32 %90, i32 1;
    store i32* %0 with i32 %109;
    ubr ^while.body2;
^if.then19:
    i32* %110 = getelementptr &(i32* %buf)[i32 %88];
    i32 %111 = load i32* %110;
    i1 %112 = scmp eq i32 %111, i32 93;
    cbr i1 %112(prob = 0.5), ^if.then23, ^b9;
^if.then20:
    i32 %113 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then21:
    i32 %114 = load i32* %0;
    i1 %115 = scmp lt i32 %114, i32 %len;
    cbr i1 %115(prob = 0.5), ^if.then26, ^b12;
^b9:
    i32 %116 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %117 = scmp eq i32 %116, i32 0;
    cbr i1 %117(prob = 0.5), ^b, ^entry2;
^while.body4:
    i32 %118 = phi [^while.guard, i32 %56] [^b13, i32 %199];
    i32* %119 = getelementptr &(i32* %buf)[i32 %118];
    i32 %120 = load i32* %119;
    i1 %121 = scmp gt i32 %120, i32 47;
    cbr i1 %121(prob = 0.5), ^if.then28, ^indirect1;
^if.else15:
    i1 %122 = scmp eq i32 %92, i32 9;
    cbr i1 %122(prob = 0.5), ^if.then24, ^if.else19;
^b10:
    i32 %123 = load i32* %0;
    i32* %124 = getelementptr &(i32* %buf)[i32 %123];
    i32 %125 = load i32* %124;
    i1 %126 = scmp eq i32 %125, i32 32;
    cbr i1 %126(prob = 0.5), ^if.then25, ^if.else20;
^b11:
    i32 %127 = phi [^while.guard, i32 %56] [^indirect1, i32 %148] [^b13, i32 %199];
    i1 %128 = scmp lt i32 %127, i32 %len;
    cbr i1 %128(prob = 0.5), ^if.then29, ^indirect2;
^if.else16:
    i32* %129 = getelementptr &(i32* %buf)[i32 %101];
    i32 %130 = load i32* %129;
    i1 %131 = scmp neq i32 %130, i32 116;
    cbr i1 %131(prob = 0.5), ^b, ^if.else21;
^if.then22:
    i32* %132 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %132 with i32 102;
    i32* %133 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %133 with i32 97;
    i32* %134 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %134 with i32 108;
    i32* %135 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %135 with i32 115;
    i32* %136 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %136 with i32 101;
    i32 %137 = load i32* %0;
    i32 %138 = add i32 %137, i32 4;
    i1 %139 = scmp ge i32 %138, i32 %len;
    cbr i1 %139(prob = 0.5), ^b, ^if.else22;
^if.else17:
    i1 %140 = scmp eq i32 %106, i32 45;
    cbr i1 %140(prob = 0.5), ^if.then27, ^if.else23;
^if.else18:
    i1 %141 = scmp eq i32 %type, i32 7;
    cbr i1 %141(prob = 0.5), ^if.then30, ^b;
^if.then23:
    i32 %142 = load i32* %0;
    i32 %143 = add i32 %142, i32 1;
    store i32* %0 with i32 %143;
    ubr ^b;
^if.then24:
    i32 %144 = load i32* %0;
    i32 %145 = add i32 %144, i32 1;
    store i32* %0 with i32 %145;
    ubr ^while.body2;
^if.then25:
    i32 %146 = add i32 %123, i32 1;
    store i32* %0 with i32 %146;
    ubr ^while.body3;
^entry2:
    i32 %147 = load i32* %0;
    ubr ^while.body5;
^indirect1:
    i32 %148 = load i32* %0;
    ubr ^b11;
^if.then26:
    i32* %149 = getelementptr &(i32* %buf)[i32 %114];
    i32 %150 = load i32* %149;
    i1 %151 = scmp eq i32 %150, i32 125;
    cbr i1 %151(prob = 0.5), ^if.then31, ^b12;
^if.then27:
    i32 %152 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^indirect2:
    i32 %153 = load i32* %0;
    ubr ^b14;
^if.then28:
    i1 %154 = scmp gt i32 %120, i32 57;
    cbr i1 %154(prob = 0.5), ^indirect1, ^b13;
^b12:
    i32 %155 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %156 = scmp eq i32 %155, i32 0;
    cbr i1 %156(prob = 0.5), ^b, ^entry3;
^if.then29:
    i32 %157 = load i32* %0;
    i32* %158 = getelementptr &(i32* %buf)[i32 %157];
    i32 %159 = load i32* %158;
    i1 %160 = scmp eq i32 %159, i32 46;
    cbr i1 %160(prob = 0.5), ^if.then35, ^b14;
^if.else19:
    i32 %161 = load i32* %0;
    i32* %162 = getelementptr &(i32* %buf)[i32 %161];
    i32 %163 = load i32* %162;
    i1 %164 = scmp eq i32 %163, i32 10;
    cbr i1 %164(prob = 0.5), ^if.then32, ^if.else24;
^if.else20:
    i1 %165 = scmp eq i32 %125, i32 9;
    cbr i1 %165(prob = 0.5), ^if.then33, ^if.else25;
^if.else21:
    i32 %166 = load i32* %0;
    i32 %167 = add i32 %166, i32 1;
    i32* %168 = getelementptr &(i32* %buf)[i32 %167];
    i32 %169 = load i32* %168;
    i32 %170 = load i32* %98;
    i1 %171 = scmp neq i32 %169, i32 %170;
    cbr i1 %171(prob = 0.5), ^b, ^if.else26;
^if.else22:
    i32* %172 = getelementptr &(i32* %buf)[i32 %137];
    i32 %173 = load i32* %172;
    i1 %174 = scmp neq i32 %173, i32 102;
    cbr i1 %174(prob = 0.5), ^b, ^if.else27;
^if.then30:
    i32* %175 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %175 with i32 110;
    i32* %176 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %176 with i32 117;
    i32* %177 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %177 with i32 108;
    i32* %178 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %178 with i32 108;
    i32 %179 = load i32* %0;
    i32 %180 = add i32 %179, i32 3;
    i1 %181 = scmp ge i32 %180, i32 %len;
    cbr i1 %181(prob = 0.5), ^b, ^if.else28;
^if.else23:
    i32 %182 = load i32* %0;
    i32* %183 = getelementptr &(i32* %buf)[i32 %182];
    i32 %184 = load i32* %183;
    i1 %185 = scmp eq i32 %184, i32 116;
    cbr i1 %185(prob = 0.5), ^if.then34, ^if.else29;
^if.then31:
    i32 %186 = load i32* %0;
    i32 %187 = add i32 %186, i32 1;
    store i32* %0 with i32 %187;
    ubr ^b;
^if.then32:
    i32 %188 = add i32 %161, i32 1;
    store i32* %0 with i32 %188;
    ubr ^while.body2;
^if.then33:
    i32 %189 = load i32* %0;
    i32 %190 = add i32 %189, i32 1;
    store i32* %0 with i32 %190;
    ubr ^while.body3;
^entry3:
    i32 %191 = load i32* %0;
    ubr ^while.body7;
^if.then34:
    i32 %192 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.body5:
    i32 %193 = phi [^entry2, i32 %147] [^if.then40, i32 %267] [^if.then45, i32 %300] [^if.then50, i32 %341] [^if.then56, i32 %372];
    i1 %194 = scmp ge i32 %193, i32 %len;
    cbr i1 %194(prob = 0.5), ^b15, ^b16;
^if.then35:
    i32 %195 = phi [^if.then29, i32 %157] [^indirect4, i32 %304];
    i32 %196 = add i32 %195, i32 1;
    store i32* %0 with i32 %196;
    i1 %197 = scmp lt i32 %196, i32 %len;
    cbr i1 %197(prob = 0.97), ^while.body6, ^b14;
^b13:
    i32 %198 = load i32* %0;
    i32 %199 = add i32 %198, i32 1;
    store i32* %0 with i32 %199;
    i1 %200 = scmp lt i32 %199, i32 %len;
    cbr i1 %200(prob = 0.97), ^while.body4, ^b11;
^b14:
    i32 %201 = phi [^indirect2, i32 %153] [^if.then29, i32 %157] [^if.then35, i32 %196] [^indirect3, i32 %298];
    i1 %202 = scmp lt i32 %201, i32 %len;
    cbr i1 %202(prob = 0.5), ^if.then39, ^b;
^if.else24:
    i1 %203 = scmp eq i32 %163, i32 13;
    cbr i1 %203(prob = 0.5), ^if.then36, ^if.then16;
^if.else25:
    i32 %204 = load i32* %0;
    i32* %205 = getelementptr &(i32* %buf)[i32 %204];
    i32 %206 = load i32* %205;
    i1 %207 = scmp eq i32 %206, i32 10;
    cbr i1 %207(prob = 0.5), ^if.then37, ^if.else30;
^if.else26:
    i32 %208 = add i32 %166, i32 2;
    i32* %209 = getelementptr &(i32* %buf)[i32 %208];
    i32 %210 = load i32* %209;
    i32 %211 = load i32* %99;
    i1 %212 = scmp neq i32 %210, i32 %211;
    cbr i1 %212(prob = 0.5), ^b, ^if.else31;
^if.else27:
    i32 %213 = load i32* %0;
    i32 %214 = add i32 %213, i32 1;
    i32* %215 = getelementptr &(i32* %buf)[i32 %214];
    i32 %216 = load i32* %215;
    i32 %217 = load i32* %133;
    i1 %218 = scmp neq i32 %216, i32 %217;
    cbr i1 %218(prob = 0.5), ^b, ^if.else32;
^if.else28:
    i32* %219 = getelementptr &(i32* %buf)[i32 %179];
    i32 %220 = load i32* %219;
    i1 %221 = scmp neq i32 %220, i32 110;
    cbr i1 %221(prob = 0.5), ^b, ^if.else33;
^if.else29:
    i1 %222 = scmp eq i32 %184, i32 102;
    cbr i1 %222(prob = 0.5), ^if.then38, ^if.else34;
^if.then36:
    i32 %223 = load i32* %0;
    i32 %224 = add i32 %223, i32 1;
    store i32* %0 with i32 %224;
    ubr ^while.body2;
^if.then37:
    i32 %225 = add i32 %204, i32 1;
    store i32* %0 with i32 %225;
    ubr ^while.body3;
^b15:
    i32 %226 = load i32* %0;
    i32* %227 = getelementptr &(i32* %buf)[i32 %226];
    i32 %228 = load i32* %227;
    i1 %229 = scmp eq i32 %228, i32 44;
    cbr i1 %229(prob = 0.97), ^while.body8, ^while.body9;
^while.body6:
    i32* %230 = getelementptr &(i32* %buf)[i32 %196];
    i32 %231 = load i32* %230;
    i1 %232 = scmp gt i32 %231, i32 47;
    cbr i1 %232(prob = 0.5), ^if.then41, ^b18;
^if.then38:
    i32 %233 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b16:
    i32 %234 = load i32* %0;
    i32* %235 = getelementptr &(i32* %buf)[i32 %234];
    i32 %236 = load i32* %235;
    i1 %237 = scmp eq i32 %236, i32 32;
    cbr i1 %237(prob = 0.5), ^if.then40, ^if.else35;
^while.body7:
    i32 %238 = phi [^entry3, i32 %191] [^if.then46, i32 %301] [^if.then51, i32 %343] [^if.then57, i32 %373] [^if.then60, i32 %389];
    i1 %239 = scmp ge i32 %238, i32 %len;
    cbr i1 %239(prob = 0.5), ^b17, ^b19;
^if.then39:
    i32 %240 = load i32* %0;
    i32* %241 = getelementptr &(i32* %buf)[i32 %240];
    i32 %242 = load i32* %241;
    i1 %243 = scmp eq i32 %242, i32 101;
    cbr i1 %243(prob = 0.5), ^if.then43, ^b;
^if.else30:
    i1 %244 = scmp eq i32 %206, i32 13;
    cbr i1 %244(prob = 0.5), ^if.then42, ^if.then21;
^if.else31:
    i32 %245 = load i32* %0;
    i32 %246 = add i32 %245, i32 3;
    i32* %247 = getelementptr &(i32* %buf)[i32 %246];
    i32 %248 = load i32* %247;
    i32 %249 = load i32* %100;
    i1 %250 = scmp neq i32 %248, i32 %249;
    cbr i1 %250(prob = 0.5), ^b, ^b20;
^if.else32:
    i32 %251 = add i32 %213, i32 2;
    i32* %252 = getelementptr &(i32* %buf)[i32 %251];
    i32 %253 = load i32* %252;
    i32 %254 = load i32* %134;
    i1 %255 = scmp neq i32 %253, i32 %254;
    cbr i1 %255(prob = 0.5), ^b, ^if.else36;
^if.else33:
    i32 %256 = load i32* %0;
    i32 %257 = add i32 %256, i32 1;
    i32* %258 = getelementptr &(i32* %buf)[i32 %257];
    i32 %259 = load i32* %258;
    i32 %260 = load i32* %176;
    i1 %261 = scmp neq i32 %259, i32 %260;
    cbr i1 %261(prob = 0.5), ^b, ^if.else37;
^if.else34:
    i32 %262 = load i32* %0;
    i32* %263 = getelementptr &(i32* %buf)[i32 %262];
    i32 %264 = load i32* %263;
    i1 %265 = scmp eq i32 %264, i32 110;
    cbr i1 %265(prob = 0.5), ^if.then44, ^b;
^while.body8:
    i32 %266 = add i32 %226, i32 1;
    store i32* %0 with i32 %266;
    ubr ^while.body10;
^if.then40:
    i32 %267 = add i32 %234, i32 1;
    store i32* %0 with i32 %267;
    ubr ^while.body5;
^if.then41:
    i1 %268 = scmp lt i32 %231, i32 58;
    cbr i1 %268(prob = 0.5), ^b18, ^if.else38;
^if.then42:
    i32 %269 = load i32* %0;
    i32 %270 = add i32 %269, i32 1;
    store i32* %0 with i32 %270;
    ubr ^while.body3;
^b17:
    i32 %271 = load i32* %0;
    i1 %272 = scmp ge i32 %271, i32 %len;
    cbr i1 %272(prob = 0.5), ^b, ^b22;
^while.body9:
    i32 %273 = phi [^b15, i32 %226] [^if.then49, i32 %339] [^if.then55, i32 %369] [^if.then59, i32 %387] [^if.then63, i32 %405];
    i1 %274 = scmp ge i32 %273, i32 %len;
    cbr i1 %274(prob = 0.5), ^b21, ^b23;
^if.then43:
    i32 %275 = add i32 %240, i32 1;
    store i32* %0 with i32 %275;
    i1 %276 = scmp lt i32 %275, i32 %len;
    cbr i1 %276(prob = 0.5), ^if.then47, ^b24;
^b18:
    i32 %277 = phi [^while.body6, i32 0] [^if.then41, i32 1] [^if.else38, i32 0];
    i1 %278 = scmp neq i32 %277, i32 1;
    cbr i1 %278(prob = 0.5), ^indirect3, ^indirect4;
^if.then44:
    i32 %279 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else35:
    i1 %280 = scmp eq i32 %236, i32 9;
    cbr i1 %280(prob = 0.5), ^if.then45, ^if.else39;
^b19:
    i32 %281 = load i32* %0;
    i32* %282 = getelementptr &(i32* %buf)[i32 %281];
    i32 %283 = load i32* %282;
    i1 %284 = scmp eq i32 %283, i32 32;
    cbr i1 %284(prob = 0.5), ^if.then46, ^if.else40;
^b20:
    i32 %285 = phi [^if.else31, i32 %245] [^if.else42, i32 %329];
    i32 %286 = add i32 %285, i32 4;
    store i32* %0 with i32 %286;
    ubr ^b;
^if.else36:
    i32 %287 = load i32* %0;
    i32 %288 = add i32 %287, i32 3;
    i32* %289 = getelementptr &(i32* %buf)[i32 %288];
    i32 %290 = load i32* %289;
    i32 %291 = load i32* %135;
    i1 %292 = scmp neq i32 %290, i32 %291;
    cbr i1 %292(prob = 0.5), ^b, ^if.else41;
^if.else37:
    i32 %293 = add i32 %256, i32 2;
    i32* %294 = getelementptr &(i32* %buf)[i32 %293];
    i32 %295 = load i32* %294;
    i32 %296 = load i32* %177;
    i1 %297 = scmp neq i32 %295, i32 %296;
    cbr i1 %297(prob = 0.5), ^b, ^if.else42;
^if.else38:
    ubr ^b18;
^indirect3:
    i32 %298 = load i32* %0;
    ubr ^b14;
^if.then45:
    i32 %299 = load i32* %0;
    i32 %300 = add i32 %299, i32 1;
    store i32* %0 with i32 %300;
    ubr ^while.body5;
^if.then46:
    i32 %301 = add i32 %281, i32 1;
    store i32* %0 with i32 %301;
    ubr ^while.body7;
^while.body10:
    i32 %302 = phi [^while.body8, i32 %266] [^if.then53, i32 %366] [^if.then58, i32 %385] [^if.then61, i32 %401] [^if.then64, i32 %413];
    i1 %303 = scmp ge i32 %302, i32 %len;
    cbr i1 %303(prob = 0.5), ^while.body11, ^b26;
^indirect4:
    i32 %304 = load i32* %0;
    ubr ^if.then35;
^b21:
    i32 %305 = load i32* %0;
    i1 %306 = scmp ge i32 %305, i32 %len;
    cbr i1 %306(prob = 0.5), ^b, ^b27;
^if.then47:
    i32* %307 = getelementptr &(i32* %buf)[i32 %275];
    i32 %308 = load i32* %307;
    i1 %309 = scmp eq i32 %308, i32 43;
    cbr i1 %309(prob = 0.5), ^if.then48, ^indirect5;
^b22:
    i32* %310 = getelementptr &(i32* %buf)[i32 %271];
    i32 %311 = load i32* %310;
    i1 %312 = scmp neq i32 %311, i32 58;
    cbr i1 %312(prob = 0.5), ^b, ^b25;
^b23:
    i32 %313 = load i32* %0;
    i32* %314 = getelementptr &(i32* %buf)[i32 %313];
    i32 %315 = load i32* %314;
    i1 %316 = scmp eq i32 %315, i32 32;
    cbr i1 %316(prob = 0.5), ^if.then49, ^if.else43;
^b24:
    i32 %317 = phi [^if.then43, i32 %275] [^if.then48, i32 %336] [^indirect5, i32 %340];
    i1 %318 = scmp lt i32 %317, i32 %len;
    cbr i1 %318(prob = 0.5), ^if.then52, ^indirect6;
^if.else39:
    i32 %319 = load i32* %0;
    i32* %320 = getelementptr &(i32* %buf)[i32 %319];
    i32 %321 = load i32* %320;
    i1 %322 = scmp eq i32 %321, i32 10;
    cbr i1 %322(prob = 0.5), ^if.then50, ^if.else44;
^if.else40:
    i1 %323 = scmp eq i32 %283, i32 9;
    cbr i1 %323(prob = 0.5), ^if.then51, ^if.else45;
^if.else41:
    i32 %324 = add i32 %287, i32 4;
    i32* %325 = getelementptr &(i32* %buf)[i32 %324];
    i32 %326 = load i32* %325;
    i32 %327 = load i32* %136;
    i1 %328 = scmp neq i32 %326, i32 %327;
    cbr i1 %328(prob = 0.5), ^b, ^b28;
^if.else42:
    i32 %329 = load i32* %0;
    i32 %330 = add i32 %329, i32 3;
    i32* %331 = getelementptr &(i32* %buf)[i32 %330];
    i32 %332 = load i32* %331;
    i32 %333 = load i32* %178;
    i1 %334 = scmp neq i32 %332, i32 %333;
    cbr i1 %334(prob = 0.5), ^b, ^b20;
^if.then48:
    i32 %335 = load i32* %0;
    i32 %336 = add i32 %335, i32 1;
    store i32* %0 with i32 %336;
    ubr ^b24;
^while.body11:
    i32 %337 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %338 = scmp eq i32 %337, i32 0;
    cbr i1 %338(prob = 0.5), ^b, ^entry2;
^if.then49:
    i32 %339 = add i32 %313, i32 1;
    store i32* %0 with i32 %339;
    ubr ^while.body9;
^indirect5:
    i32 %340 = load i32* %0;
    ubr ^b24;
^if.then50:
    i32 %341 = add i32 %319, i32 1;
    store i32* %0 with i32 %341;
    ubr ^while.body5;
^if.then51:
    i32 %342 = load i32* %0;
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    ubr ^while.body7;
^b25:
    i32 %344 = load i32* %0;
    i32 %345 = add i32 %344, i32 1;
    store i32* %0 with i32 %345;
    ubr ^while.body12;
^b26:
    i32 %346 = load i32* %0;
    i32* %347 = getelementptr &(i32* %buf)[i32 %346];
    i32 %348 = load i32* %347;
    i1 %349 = scmp eq i32 %348, i32 32;
    cbr i1 %349(prob = 0.5), ^if.then53, ^if.else46;
^indirect6:
    i32 %350 = load i32* %0;
    ubr ^while.guard1;
^b27:
    i32* %351 = getelementptr &(i32* %buf)[i32 %305];
    i32 %352 = load i32* %351;
    i1 %353 = scmp neq i32 %352, i32 93;
    cbr i1 %353(prob = 0.5), ^b, ^indirect7;
^if.then52:
    i32 %354 = load i32* %0;
    i32* %355 = getelementptr &(i32* %buf)[i32 %354];
    i32 %356 = load i32* %355;
    i1 %357 = scmp eq i32 %356, i32 45;
    cbr i1 %357(prob = 0.5), ^if.then54, ^while.guard1;
^if.else43:
    i1 %358 = scmp eq i32 %315, i32 9;
    cbr i1 %358(prob = 0.5), ^if.then55, ^if.else47;
^if.else44:
    i1 %359 = scmp eq i32 %321, i32 13;
    cbr i1 %359(prob = 0.5), ^if.then56, ^b15;
^if.else45:
    i32 %360 = load i32* %0;
    i32* %361 = getelementptr &(i32* %buf)[i32 %360];
    i32 %362 = load i32* %361;
    i1 %363 = scmp eq i32 %362, i32 10;
    cbr i1 %363(prob = 0.5), ^if.then57, ^if.else48;
^b28:
    i32 %364 = load i32* %0;
    i32 %365 = add i32 %364, i32 5;
    store i32* %0 with i32 %365;
    ubr ^b;
^if.then53:
    i32 %366 = add i32 %346, i32 1;
    store i32* %0 with i32 %366;
    ubr ^while.body10;
^if.then54:
    i32 %367 = add i32 %354, i32 1;
    store i32* %0 with i32 %367;
    ubr ^while.guard1;
^if.then55:
    i32 %368 = load i32* %0;
    i32 %369 = add i32 %368, i32 1;
    store i32* %0 with i32 %369;
    ubr ^while.body9;
^indirect7:
    i32 %370 = load i32* %0;
    ubr ^b7;
^if.then56:
    i32 %371 = load i32* %0;
    i32 %372 = add i32 %371, i32 1;
    store i32* %0 with i32 %372;
    ubr ^while.body5;
^if.then57:
    i32 %373 = add i32 %360, i32 1;
    store i32* %0 with i32 %373;
    ubr ^while.body7;
^if.else46:
    i1 %374 = scmp eq i32 %348, i32 9;
    cbr i1 %374(prob = 0.5), ^if.then58, ^if.else49;
^while.body12:
    i32 %375 = phi [^b25, i32 %345] [^if.then62, i32 %402] [^if.then65, i32 %415] [^if.then67, i32 %425] [^if.then69, i32 %441];
    i1 %376 = scmp ge i32 %375, i32 %len;
    cbr i1 %376(prob = 0.5), ^b29, ^b30;
^while.guard1:
    i32 %377 = phi [^indirect6, i32 %350] [^if.then52, i32 %354] [^if.then54, i32 %367];
    i1 %378 = scmp lt i32 %377, i32 %len;
    cbr i1 %378(prob = 0.97), ^indirect8, ^b;
^if.else47:
    i32 %379 = load i32* %0;
    i32* %380 = getelementptr &(i32* %buf)[i32 %379];
    i32 %381 = load i32* %380;
    i1 %382 = scmp eq i32 %381, i32 10;
    cbr i1 %382(prob = 0.5), ^if.then59, ^if.else50;
^if.else48:
    i1 %383 = scmp eq i32 %362, i32 13;
    cbr i1 %383(prob = 0.5), ^if.then60, ^b17;
^if.then58:
    i32 %384 = load i32* %0;
    i32 %385 = add i32 %384, i32 1;
    store i32* %0 with i32 %385;
    ubr ^while.body10;
^indirect8:
    i32 %386 = load i32* %0;
    ubr ^while.body13;
^if.then59:
    i32 %387 = add i32 %379, i32 1;
    store i32* %0 with i32 %387;
    ubr ^while.body9;
^if.then60:
    i32 %388 = load i32* %0;
    i32 %389 = add i32 %388, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.body7;
^if.else49:
    i32 %390 = load i32* %0;
    i32* %391 = getelementptr &(i32* %buf)[i32 %390];
    i32 %392 = load i32* %391;
    i1 %393 = scmp eq i32 %392, i32 10;
    cbr i1 %393(prob = 0.5), ^if.then61, ^if.else51;
^b29:
    i32 %394 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %395 = scmp eq i32 %394, i32 0;
    cbr i1 %395(prob = 0.5), ^b, ^entry4;
^b30:
    i32 %396 = load i32* %0;
    i32* %397 = getelementptr &(i32* %buf)[i32 %396];
    i32 %398 = load i32* %397;
    i1 %399 = scmp eq i32 %398, i32 32;
    cbr i1 %399(prob = 0.5), ^if.then62, ^if.else52;
^if.else50:
    i1 %400 = scmp eq i32 %381, i32 13;
    cbr i1 %400(prob = 0.5), ^if.then63, ^b21;
^if.then61:
    i32 %401 = add i32 %390, i32 1;
    store i32* %0 with i32 %401;
    ubr ^while.body10;
^if.then62:
    i32 %402 = add i32 %396, i32 1;
    store i32* %0 with i32 %402;
    ubr ^while.body12;
^entry4:
    i32 %403 = load i32* %0;
    ubr ^while.body14;
^if.then63:
    i32 %404 = load i32* %0;
    i32 %405 = add i32 %404, i32 1;
    store i32* %0 with i32 %405;
    ubr ^while.body9;
^while.body13:
    i32 %406 = phi [^indirect8, i32 %386] [^b34, i32 %435];
    i32* %407 = getelementptr &(i32* %buf)[i32 %406];
    i32 %408 = load i32* %407;
    i1 %409 = scmp gt i32 %408, i32 47;
    cbr i1 %409(prob = 0.5), ^if.then66, ^b31;
^if.else51:
    i1 %410 = scmp eq i32 %392, i32 13;
    cbr i1 %410(prob = 0.5), ^if.then64, ^while.body11;
^if.else52:
    i1 %411 = scmp eq i32 %398, i32 9;
    cbr i1 %411(prob = 0.5), ^if.then65, ^if.else53;
^if.then64:
    i32 %412 = load i32* %0;
    i32 %413 = add i32 %412, i32 1;
    store i32* %0 with i32 %413;
    ubr ^while.body10;
^if.then65:
    i32 %414 = load i32* %0;
    i32 %415 = add i32 %414, i32 1;
    store i32* %0 with i32 %415;
    ubr ^while.body12;
^if.then66:
    i1 %416 = scmp lt i32 %408, i32 58;
    cbr i1 %416(prob = 0.5), ^b31, ^if.else54;
^while.body14:
    i32 %417 = phi [^entry4, i32 %403] [^if.then68, i32 %439] [^if.then70, i32 %446] [^if.then72, i32 %462] [^if.then75, i32 %478];
    i1 %418 = scmp ge i32 %417, i32 %len;
    cbr i1 %418(prob = 0.5), ^b32, ^b33;
^b31:
    i32 %419 = phi [^while.body13, i32 0] [^if.then66, i32 1] [^if.else54, i32 0];
    i1 %420 = scmp neq i32 %419, i32 1;
    cbr i1 %420(prob = 0.5), ^b, ^b34;
^if.else53:
    i32 %421 = load i32* %0;
    i32* %422 = getelementptr &(i32* %buf)[i32 %421];
    i32 %423 = load i32* %422;
    i1 %424 = scmp eq i32 %423, i32 10;
    cbr i1 %424(prob = 0.5), ^if.then67, ^if.else55;
^if.else54:
    ubr ^b31;
^if.then67:
    i32 %425 = add i32 %421, i32 1;
    store i32* %0 with i32 %425;
    ubr ^while.body12;
^b32:
    i32 %426 = load i32* %0;
    i32* %427 = getelementptr &(i32* %buf)[i32 %426];
    i32 %428 = load i32* %427;
    i1 %429 = scmp eq i32 %428, i32 44;
    cbr i1 %429(prob = 0.97), ^while.body15, ^while.body16;
^b33:
    i32 %430 = load i32* %0;
    i32* %431 = getelementptr &(i32* %buf)[i32 %430];
    i32 %432 = load i32* %431;
    i1 %433 = scmp eq i32 %432, i32 32;
    cbr i1 %433(prob = 0.5), ^if.then68, ^if.else56;
^b34:
    i32 %434 = load i32* %0;
    i32 %435 = add i32 %434, i32 1;
    store i32* %0 with i32 %435;
    i1 %436 = scmp lt i32 %435, i32 %len;
    cbr i1 %436(prob = 0.97), ^while.body13, ^b;
^if.else55:
    i1 %437 = scmp eq i32 %423, i32 13;
    cbr i1 %437(prob = 0.5), ^if.then69, ^b29;
^while.body15:
    i32 %438 = add i32 %426, i32 1;
    store i32* %0 with i32 %438;
    ubr ^while.body17;
^if.then68:
    i32 %439 = add i32 %430, i32 1;
    store i32* %0 with i32 %439;
    ubr ^while.body14;
^if.then69:
    i32 %440 = load i32* %0;
    i32 %441 = add i32 %440, i32 1;
    store i32* %0 with i32 %441;
    ubr ^while.body12;
^while.body16:
    i32 %442 = phi [^b32, i32 %426] [^if.then71, i32 %461] [^if.then74, i32 %475] [^if.then77, i32 %488] [^if.then79, i32 %502];
    i1 %443 = scmp ge i32 %442, i32 %len;
    cbr i1 %443(prob = 0.5), ^b35, ^b36;
^if.else56:
    i1 %444 = scmp eq i32 %432, i32 9;
    cbr i1 %444(prob = 0.5), ^if.then70, ^if.else57;
^if.then70:
    i32 %445 = load i32* %0;
    i32 %446 = add i32 %445, i32 1;
    store i32* %0 with i32 %446;
    ubr ^while.body14;
^while.body17:
    i32 %447 = phi [^while.body15, i32 %438] [^if.then73, i32 %472] [^if.then76, i32 %485] [^if.then78, i32 %494] [^if.then81, i32 %506];
    i1 %448 = scmp ge i32 %447, i32 %len;
    cbr i1 %448(prob = 0.5), ^while.body18, ^b37;
^b35:
    i32 %449 = load i32* %0;
    i1 %450 = scmp ge i32 %449, i32 %len;
    cbr i1 %450(prob = 0.5), ^b, ^if.else58;
^b36:
    i32 %451 = load i32* %0;
    i32* %452 = getelementptr &(i32* %buf)[i32 %451];
    i32 %453 = load i32* %452;
    i1 %454 = scmp eq i32 %453, i32 32;
    cbr i1 %454(prob = 0.5), ^if.then71, ^if.else59;
^if.else57:
    i32 %455 = load i32* %0;
    i32* %456 = getelementptr &(i32* %buf)[i32 %455];
    i32 %457 = load i32* %456;
    i1 %458 = scmp eq i32 %457, i32 10;
    cbr i1 %458(prob = 0.5), ^if.then72, ^if.else60;
^while.body18:
    i32 %459 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %460 = scmp eq i32 %459, i32 0;
    cbr i1 %460(prob = 0.5), ^b, ^entry5;
^if.then71:
    i32 %461 = add i32 %451, i32 1;
    store i32* %0 with i32 %461;
    ubr ^while.body16;
^if.then72:
    i32 %462 = add i32 %455, i32 1;
    store i32* %0 with i32 %462;
    ubr ^while.body14;
^b37:
    i32 %463 = load i32* %0;
    i32* %464 = getelementptr &(i32* %buf)[i32 %463];
    i32 %465 = load i32* %464;
    i1 %466 = scmp eq i32 %465, i32 32;
    cbr i1 %466(prob = 0.5), ^if.then73, ^if.else61;
^if.else58:
    i32* %467 = getelementptr &(i32* %buf)[i32 %449];
    i32 %468 = load i32* %467;
    i1 %469 = scmp neq i32 %468, i32 125;
    cbr i1 %469(prob = 0.5), ^b, ^indirect9;
^if.else59:
    i1 %470 = scmp eq i32 %453, i32 9;
    cbr i1 %470(prob = 0.5), ^if.then74, ^if.else62;
^if.else60:
    i1 %471 = scmp eq i32 %457, i32 13;
    cbr i1 %471(prob = 0.5), ^if.then75, ^b32;
^if.then73:
    i32 %472 = add i32 %463, i32 1;
    store i32* %0 with i32 %472;
    ubr ^while.body17;
^entry5:
    i32 %473 = load i32* %0;
    ubr ^while.body19;
^if.then74:
    i32 %474 = load i32* %0;
    i32 %475 = add i32 %474, i32 1;
    store i32* %0 with i32 %475;
    ubr ^while.body16;
^indirect9:
    i32 %476 = load i32* %0;
    ubr ^b7;
^if.then75:
    i32 %477 = load i32* %0;
    i32 %478 = add i32 %477, i32 1;
    store i32* %0 with i32 %478;
    ubr ^while.body14;
^if.else61:
    i1 %479 = scmp eq i32 %465, i32 9;
    cbr i1 %479(prob = 0.5), ^if.then76, ^if.else63;
^if.else62:
    i32 %480 = load i32* %0;
    i32* %481 = getelementptr &(i32* %buf)[i32 %480];
    i32 %482 = load i32* %481;
    i1 %483 = scmp eq i32 %482, i32 10;
    cbr i1 %483(prob = 0.5), ^if.then77, ^if.else64;
^if.then76:
    i32 %484 = load i32* %0;
    i32 %485 = add i32 %484, i32 1;
    store i32* %0 with i32 %485;
    ubr ^while.body17;
^while.body19:
    i32 %486 = phi [^entry5, i32 %473] [^if.then80, i32 %504] [^if.then82, i32 %512] [^if.then83, i32 %519] [^if.then84, i32 %524];
    i1 %487 = scmp ge i32 %486, i32 %len;
    cbr i1 %487(prob = 0.5), ^b38, ^b39;
^if.then77:
    i32 %488 = add i32 %480, i32 1;
    store i32* %0 with i32 %488;
    ubr ^while.body16;
^if.else63:
    i32 %489 = load i32* %0;
    i32* %490 = getelementptr &(i32* %buf)[i32 %489];
    i32 %491 = load i32* %490;
    i1 %492 = scmp eq i32 %491, i32 10;
    cbr i1 %492(prob = 0.5), ^if.then78, ^if.else65;
^if.else64:
    i1 %493 = scmp eq i32 %482, i32 13;
    cbr i1 %493(prob = 0.5), ^if.then79, ^b35;
^if.then78:
    i32 %494 = add i32 %489, i32 1;
    store i32* %0 with i32 %494;
    ubr ^while.body17;
^b38:
    i32 %495 = load i32* %0;
    i1 %496 = scmp ge i32 %495, i32 %len;
    cbr i1 %496(prob = 0.5), ^b, ^b40;
^b39:
    i32 %497 = load i32* %0;
    i32* %498 = getelementptr &(i32* %buf)[i32 %497];
    i32 %499 = load i32* %498;
    i1 %500 = scmp eq i32 %499, i32 32;
    cbr i1 %500(prob = 0.5), ^if.then80, ^if.else66;
^if.then79:
    i32 %501 = load i32* %0;
    i32 %502 = add i32 %501, i32 1;
    store i32* %0 with i32 %502;
    ubr ^while.body16;
^if.else65:
    i1 %503 = scmp eq i32 %491, i32 13;
    cbr i1 %503(prob = 0.5), ^if.then81, ^while.body18;
^if.then80:
    i32 %504 = add i32 %497, i32 1;
    store i32* %0 with i32 %504;
    ubr ^while.body19;
^if.then81:
    i32 %505 = load i32* %0;
    i32 %506 = add i32 %505, i32 1;
    store i32* %0 with i32 %506;
    ubr ^while.body17;
^b40:
    i32* %507 = getelementptr &(i32* %buf)[i32 %495];
    i32 %508 = load i32* %507;
    i1 %509 = scmp neq i32 %508, i32 58;
    cbr i1 %509(prob = 0.5), ^b, ^b41;
^if.else66:
    i1 %510 = scmp eq i32 %499, i32 9;
    cbr i1 %510(prob = 0.5), ^if.then82, ^if.else67;
^if.then82:
    i32 %511 = load i32* %0;
    i32 %512 = add i32 %511, i32 1;
    store i32* %0 with i32 %512;
    ubr ^while.body19;
^b41:
    i32 %513 = load i32* %0;
    i32 %514 = add i32 %513, i32 1;
    store i32* %0 with i32 %514;
    ubr ^while.body20;
^if.else67:
    i32 %515 = load i32* %0;
    i32* %516 = getelementptr &(i32* %buf)[i32 %515];
    i32 %517 = load i32* %516;
    i1 %518 = scmp eq i32 %517, i32 10;
    cbr i1 %518(prob = 0.5), ^if.then83, ^if.else68;
^if.then83:
    i32 %519 = add i32 %515, i32 1;
    store i32* %0 with i32 %519;
    ubr ^while.body19;
^while.body20:
    i32 %520 = phi [^b41, i32 %514] [^if.then85, i32 %531] [^if.then86, i32 %534] [^if.then87, i32 %539] [^if.then88, i32 %542];
    i1 %521 = scmp ge i32 %520, i32 %len;
    cbr i1 %521(prob = 0.5), ^b42, ^b43;
^if.else68:
    i1 %522 = scmp eq i32 %517, i32 13;
    cbr i1 %522(prob = 0.5), ^if.then84, ^b38;
^if.then84:
    i32 %523 = load i32* %0;
    i32 %524 = add i32 %523, i32 1;
    store i32* %0 with i32 %524;
    ubr ^while.body19;
^b42:
    i32 %525 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %526 = scmp eq i32 %525, i32 0;
    cbr i1 %526(prob = 0.5), ^b, ^entry4;
^b43:
    i32 %527 = load i32* %0;
    i32* %528 = getelementptr &(i32* %buf)[i32 %527];
    i32 %529 = load i32* %528;
    i1 %530 = scmp eq i32 %529, i32 32;
    cbr i1 %530(prob = 0.5), ^if.then85, ^if.else69;
^if.then85:
    i32 %531 = add i32 %527, i32 1;
    store i32* %0 with i32 %531;
    ubr ^while.body20;
^if.else69:
    i1 %532 = scmp eq i32 %529, i32 9;
    cbr i1 %532(prob = 0.5), ^if.then86, ^if.else70;
^if.then86:
    i32 %533 = load i32* %0;
    i32 %534 = add i32 %533, i32 1;
    store i32* %0 with i32 %534;
    ubr ^while.body20;
^if.else70:
    i32 %535 = load i32* %0;
    i32* %536 = getelementptr &(i32* %buf)[i32 %535];
    i32 %537 = load i32* %536;
    i1 %538 = scmp eq i32 %537, i32 10;
    cbr i1 %538(prob = 0.5), ^if.then87, ^if.else71;
^if.then87:
    i32 %539 = add i32 %535, i32 1;
    store i32* %0 with i32 %539;
    ubr ^while.body20;
^if.else71:
    i1 %540 = scmp eq i32 %537, i32 13;
    cbr i1 %540(prob = 0.5), ^if.then88, ^b42;
^if.then88:
    i32 %541 = load i32* %0;
    i32 %542 = add i32 %541, i32 1;
    store i32* %0 with i32 %542;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %8];
    i32* %4 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %7 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
^indirect:
    i32 %11 = load i32* %pos;
    ubr ^b;
^while.body1:
    i32 %12 = phi [^b, i32 %2] [^if.then, i32 %20] [^if.then1, i32 %25] [^if.then4, i32 %36] [^if.then6, i32 %42];
    i1 %13 = scmp ge i32 %12, i32 %3;
    cbr i1 %13(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %14 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %4, i32 %3, i32* %pos);
    i32 %15 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32 %16 = load i32* %pos;
    i32* %17 = getelementptr &(i32* %4)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %20 = add i32 %16, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^while.body2:
    i32 %21 = phi [^b1, i32 %15] [^if.then3, i32 %35] [^if.then5, i32 %40] [^if.then7, i32 %48] [^if.then8, i32 %51];
    i1 %22 = scmp ge i32 %21, i32 %3;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %23 = scmp eq i32 %18, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %24 = load i32* %pos;
    i32 %25 = add i32 %24, i32 1;
    store i32* %pos with i32 %25;
    ubr ^while.body1;
^b3:
    i1 %26 = scmp neq i32 %14, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^b4:
    i32 %27 = load i32* %pos;
    i32* %28 = getelementptr &(i32* %4)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 32;
    cbr i1 %30(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %4)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = scmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then3:
    i32 %35 = add i32 %27, i32 1;
    store i32* %pos with i32 %35;
    ubr ^while.body2;
^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then4:
    i32 %36 = add i32 %31, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body1;
^if.else3:
    i1 %37 = scmp eq i32 %29, i32 9;
    cbr i1 %37(prob = 0.5), ^if.then5, ^if.else5;
^if.else4:
    i1 %38 = scmp eq i32 %33, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b1;
^if.then5:
    i32 %39 = load i32* %pos;
    i32 %40 = add i32 %39, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body2;
^if.then6:
    i32 %41 = load i32* %pos;
    i32 %42 = add i32 %41, i32 1;
    store i32* %pos with i32 %42;
    ubr ^while.body1;
^if.else5:
    i32 %43 = load i32* %pos;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 10;
    cbr i1 %46(prob = 0.5), ^if.then7, ^if.else6;
^b5:
    i32 %47 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %47;
^if.then7:
    i32 %48 = add i32 %43, i32 1;
    store i32* %pos with i32 %48;
    ubr ^while.body2;
^if.else6:
    i1 %49 = scmp eq i32 %45, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %50 = load i32* %pos;
    i32 %51 = add i32 %50, i32 1;
    store i32* %pos with i32 %51;
    ubr ^while.body2;
}
