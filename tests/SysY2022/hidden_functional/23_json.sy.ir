internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^1:
    ubr ^2;
^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3];
    i32 %4 = load i32* %0;
    ubr ^entry;
^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %17];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = scmp ge i32 %5, i32 %len;
    cbr i1 %7(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %8 = phi [^entry, i32 %5] [^if.then, i32 %16] [^if.then2, i32 %24] [^if.then6, i32 %40] [^if.then9, i32 %53];
    i1 %9 = scmp ge i32 %8, i32 %len;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
^b:
    i32 %10 = phi [^entry, i32 0] [^b3, i32 0] [^if.then7, i32 %49] [^if.else8, i32 0] [^if.then12, i32 0] [^b6, i32 0] [^if.then13, i32 %81] [^if.then15, i32 0] [^if.else14, i32 0] [^if.then18, i32 %107] [^b8, i32 0] [^if.else16, i32 0] [^if.then20, i32 0] [^if.else18, i32 0] [^if.then21, i32 1] [^b10, i32 1] [^if.then25, i32 %141] [^b11, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^if.then27, i32 0] [^if.then28, i32 1] [^if.then31, i32 %174] [^b14, i32 1] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^if.then36, i32 %211] [^if.then37, i32 1] [^if.else31, i32 0] [^if.else32, i32 0] [^if.else33, i32 0] [^if.else34, i32 0] [^b17, i32 0] [^if.then41, i32 %254] [^b19, i32 1] [^if.else36, i32 0] [^if.else37, i32 0] [^b20, i32 0] [^b22, i32 0] [^if.else40, i32 0] [^if.else41, i32 0] [^while.body11, i32 0] [^b27, i32 0] [^b28, i32 1] [^while.header2, i32 1] [^b29, i32 0] [^b31, i32 1] [^b34, i32 0] [^while.body18, i32 0] [^if.else58, i32 0] [^b37, i32 0] [^b39, i32 0] [^b41, i32 0];
    ret i32 %10;
^b1:
    i1 %11 = scmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %16 = add i32 %12, i32 1;
    store i32* %0 with i32 %16;
    ubr ^while.body;
^if.then1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %buf)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 123;
    cbr i1 %20(prob = 0.5), ^entry, ^if.else2;
^if.else:
    i1 %21 = scmp eq i32 %6, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i1 %22 = scmp eq i32 %14, i32 9;
    cbr i1 %22(prob = 0.5), ^if.then2, ^if.else4;
^if.then2:
    i32 %23 = load i32* %0;
    i32 %24 = add i32 %23, i32 1;
    store i32* %0 with i32 %24;
    ubr ^while.body;
^if.else2:
    i1 %25 = scmp eq i32 %19, i32 91;
    cbr i1 %25(prob = 0.5), ^2, ^if.else5;
^if.then3:
    i32 %26 = load i32* %0;
    i32* %27 = getelementptr &(i32* %buf)[i32 %26];
    i32 %28 = load i32* %27;
    i1 %29 = scmp eq i32 %28, i32 43;
    i1 %30 = scmp eq i32 %28, i32 45;
    i1 %31 = or i1 %30, i1 %29;
    cbr i1 %31(prob = 0.75), ^if.then4, ^b3;
^if.else3:
    i1 %32 = scmp eq i32 %6, i32 2;
    cbr i1 %32(prob = 0.5), ^if.then5, ^if.else6;
^if.else4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %buf)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then6, ^if.else7;
^if.then4:
    i32 %37 = add i32 %26, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
^if.then5:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
^if.then6:
    i32 %40 = add i32 %33, i32 1;
    store i32* %0 with i32 %40;
    ubr ^while.body;
^if.else5:
    i32 %41 = load i32* %0;
    i32* %42 = getelementptr &(i32* %buf)[i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp eq i32 %43, i32 34;
    cbr i1 %44(prob = 0.5), ^if.then7, ^entry1;
^b3:
    i32 %45 = phi [^if.then3, i32 %26] [^if.then4, i32 %37];
    i1 %46 = scmp ge i32 %45, i32 %len;
    cbr i1 %46(prob = 0.5), ^b, ^if.else8;
^if.else6:
    i1 %47 = scmp eq i32 %6, i32 3;
    cbr i1 %47(prob = 0.5), ^if.then8, ^if.else9;
^if.else7:
    i1 %48 = scmp eq i32 %35, i32 13;
    cbr i1 %48(prob = 0.5), ^if.then9, ^b1;
^if.then7:
    i32 %49 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then8:
    i32 %50 = load i32* %0;
    i32 %51 = add i32 %50, i32 1;
    store i32* %0 with i32 %51;
    ubr ^while.body2;
^if.then9:
    i32 %52 = load i32* %0;
    i32 %53 = add i32 %52, i32 1;
    store i32* %0 with i32 %53;
    ubr ^while.body;
^while.header:
    i32 %54 = phi [^if.then5, i32 %39] [^b5, i32 %78];
    i1 %55 = scmp lt i32 %54, i32 %len;
    cbr i1 %55(prob = 0.97), ^while.body1, ^indirect;
^if.else8:
    i32 %56 = load i32* %0;
    i32* %57 = getelementptr &(i32* %buf)[i32 %56];
    i32 %58 = load i32* %57;
    i1 %59 = scmp gt i32 %58, i32 47;
    cbr i1 %59(prob = 0.5), ^if.then12, ^b;
^entry1:
    i1 %60 = scmp gt i32 %43, i32 47;
    cbr i1 %60(prob = 0.5), ^if.then11, ^b4;
^if.else9:
    i1 %61 = scmp eq i32 %6, i32 4;
    cbr i1 %61(prob = 0.5), ^if.then10, ^if.else10;
^indirect:
    i32 %62 = load i32* %0;
    ubr ^b6;
^while.body1:
    i32 %63 = load i32* %0;
    i32* %64 = getelementptr &(i32* %buf)[i32 %63];
    i32 %65 = load i32* %64;
    i1 %66 = scmp eq i32 %65, i32 34;
    cbr i1 %66(prob = 0.5), ^b6, ^b5;
^if.then10:
    i32 %67 = load i32* %0;
    i32 %68 = add i32 %67, i32 1;
    store i32* %0 with i32 %68;
    ubr ^while.body3;
^if.then11:
    i1 %69 = scmp lt i32 %43, i32 58;
    cbr i1 %69(prob = 0.5), ^b4, ^if.else11;
^while.body2:
    i32 %70 = phi [^if.then8, i32 %51] [^if.then16, i32 %100] [^if.then22, i32 %135] [^if.then29, i32 %170] [^if.then33, i32 %202];
    i1 %71 = scmp ge i32 %70, i32 %len;
    cbr i1 %71(prob = 0.5), ^if.then14, ^b7;
^if.then12:
    i1 %72 = scmp gt i32 %58, i32 57;
    cbr i1 %72(prob = 0.5), ^b, ^while.header1;
^b4:
    i32 %73 = phi [^entry1, i32 0] [^if.then11, i32 1] [^if.else11, i32 0];
    i1 %74 = scmp eq i32 %73, i32 1;
    cbr i1 %74(prob = 0.5), ^if.then13, ^if.else12;
^if.else10:
    i1 %75 = scmp eq i32 %6, i32 5;
    cbr i1 %75(prob = 0.5), ^if.then15, ^if.else13;
^b5:
    i1 %76 = scmp eq i32 %65, i32 92;
    i32 %77 = select i1 %76 ? i32 2 : i32 1;
    i32 %78 = add i32 %77, i32 %63;
    store i32* %0 with i32 %78;
    ubr ^while.header;
^b6:
    i32 %79 = phi [^indirect, i32 %62] [^while.body1, i32 %63];
    i1 %80 = scmp ge i32 %79, i32 %len;
    cbr i1 %80(prob = 0.5), ^b, ^if.else14;
^if.else11:
    ubr ^b4;
^if.then13:
    i32 %81 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then14:
    i32 %82 = load i32* %0;
    i1 %83 = scmp lt i32 %82, i32 %len;
    cbr i1 %83(prob = 0.5), ^if.then17, ^b8;
^b7:
    i32 %84 = load i32* %0;
    i32* %85 = getelementptr &(i32* %buf)[i32 %84];
    i32 %86 = load i32* %85;
    i1 %87 = scmp eq i32 %86, i32 32;
    cbr i1 %87(prob = 0.5), ^if.then16, ^if.else15;
^while.body3:
    i32 %88 = phi [^if.then10, i32 %68] [^if.then23, i32 %136] [^if.then30, i32 %172] [^if.then34, i32 %203] [^if.then39, i32 %247];
    i1 %89 = scmp ge i32 %88, i32 %len;
    cbr i1 %89(prob = 0.5), ^if.then19, ^b9;
^while.header1:
    i32 %90 = phi [^if.then12, i32 %56] [^b13, i32 %169];
    i1 %91 = scmp lt i32 %90, i32 %len;
    cbr i1 %91(prob = 0.97), ^while.body4, ^indirect1;
^if.then15:
    i32 %92 = load i32* %0;
    i32 %93 = add i32 %92, i32 3;
    i1 %94 = scmp ge i32 %93, i32 %len;
    cbr i1 %94(prob = 0.5), ^b, ^if.else16;
^if.else12:
    i32 %95 = load i32* %0;
    i32* %96 = getelementptr &(i32* %buf)[i32 %95];
    i32 %97 = load i32* %96;
    i1 %98 = scmp eq i32 %97, i32 43;
    cbr i1 %98(prob = 0.5), ^if.then18, ^if.else17;
^if.else13:
    i1 %99 = scmp eq i32 %6, i32 6;
    cbr i1 %99(prob = 0.5), ^if.then20, ^if.else18;
^if.then16:
    i32 %100 = add i32 %84, i32 1;
    store i32* %0 with i32 %100;
    ubr ^while.body2;
^if.else14:
    i32* %101 = getelementptr &(i32* %buf)[i32 %79];
    i32 %102 = load i32* %101;
    i1 %103 = scmp neq i32 %102, i32 34;
    cbr i1 %103(prob = 0.5), ^b, ^b10;
^if.then17:
    i32* %104 = getelementptr &(i32* %buf)[i32 %82];
    i32 %105 = load i32* %104;
    i1 %106 = scmp eq i32 %105, i32 93;
    cbr i1 %106(prob = 0.5), ^if.then21, ^b8;
^if.then18:
    i32 %107 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^indirect1:
    i32 %108 = load i32* %0;
    ubr ^b12;
^if.then19:
    i32 %109 = load i32* %0;
    i1 %110 = scmp lt i32 %109, i32 %len;
    cbr i1 %110(prob = 0.5), ^if.then24, ^b11;
^b8:
    i32 %111 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %112 = scmp eq i32 %111, i32 0;
    cbr i1 %112(prob = 0.5), ^b, ^entry2;
^while.body4:
    i32 %113 = load i32* %0;
    i32* %114 = getelementptr &(i32* %buf)[i32 %113];
    i32 %115 = load i32* %114;
    i1 %116 = scmp gt i32 %115, i32 47;
    cbr i1 %116(prob = 0.5), ^if.then26, ^b12;
^if.else15:
    i1 %117 = scmp eq i32 %86, i32 9;
    cbr i1 %117(prob = 0.5), ^if.then22, ^if.else19;
^b9:
    i32 %118 = load i32* %0;
    i32* %119 = getelementptr &(i32* %buf)[i32 %118];
    i32 %120 = load i32* %119;
    i1 %121 = scmp eq i32 %120, i32 32;
    cbr i1 %121(prob = 0.5), ^if.then23, ^if.else20;
^if.else16:
    i32* %122 = getelementptr &(i32* %buf)[i32 %92];
    i32 %123 = load i32* %122;
    i1 %124 = scmp neq i32 %123, i32 116;
    cbr i1 %124(prob = 0.5), ^b, ^if.else21;
^if.then20:
    i32 %125 = load i32* %0;
    i32 %126 = add i32 %125, i32 4;
    i1 %127 = scmp ge i32 %126, i32 %len;
    cbr i1 %127(prob = 0.5), ^b, ^if.else22;
^if.else17:
    i1 %128 = scmp eq i32 %97, i32 45;
    cbr i1 %128(prob = 0.5), ^if.then25, ^if.else23;
^if.else18:
    i1 %129 = scmp eq i32 %6, i32 7;
    cbr i1 %129(prob = 0.5), ^if.then27, ^b;
^if.then21:
    i32 %130 = load i32* %0;
    i32 %131 = add i32 %130, i32 1;
    store i32* %0 with i32 %131;
    ubr ^b;
^b10:
    i32 %132 = load i32* %0;
    i32 %133 = add i32 %132, i32 1;
    store i32* %0 with i32 %133;
    ubr ^b;
^if.then22:
    i32 %134 = load i32* %0;
    i32 %135 = add i32 %134, i32 1;
    store i32* %0 with i32 %135;
    ubr ^while.body2;
^if.then23:
    i32 %136 = add i32 %118, i32 1;
    store i32* %0 with i32 %136;
    ubr ^while.body3;
^entry2:
    i32 %137 = load i32* %0;
    ubr ^while.body5;
^if.then24:
    i32* %138 = getelementptr &(i32* %buf)[i32 %109];
    i32 %139 = load i32* %138;
    i1 %140 = scmp eq i32 %139, i32 125;
    cbr i1 %140(prob = 0.5), ^if.then28, ^b11;
^if.then25:
    i32 %141 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then26:
    i1 %142 = scmp gt i32 %115, i32 57;
    cbr i1 %142(prob = 0.5), ^b12, ^b13;
^b11:
    i32 %143 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %144 = scmp eq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^b, ^entry3;
^b12:
    i32 %145 = phi [^indirect1, i32 %108] [^while.body4, i32 %113] [^if.then26, i32 %113];
    i1 %146 = scmp lt i32 %145, i32 %len;
    cbr i1 %146(prob = 0.5), ^if.then32, ^b14;
^if.else19:
    i32 %147 = load i32* %0;
    i32* %148 = getelementptr &(i32* %buf)[i32 %147];
    i32 %149 = load i32* %148;
    i1 %150 = scmp eq i32 %149, i32 10;
    cbr i1 %150(prob = 0.5), ^if.then29, ^if.else24;
^if.else20:
    i1 %151 = scmp eq i32 %120, i32 9;
    cbr i1 %151(prob = 0.5), ^if.then30, ^if.else25;
^if.else21:
    i32 %152 = load i32* %0;
    i32 %153 = add i32 %152, i32 1;
    i32* %154 = getelementptr &(i32* %buf)[i32 %153];
    i32 %155 = load i32* %154;
    i1 %156 = scmp neq i32 %155, i32 114;
    cbr i1 %156(prob = 0.5), ^b, ^if.else26;
^if.else22:
    i32* %157 = getelementptr &(i32* %buf)[i32 %125];
    i32 %158 = load i32* %157;
    i1 %159 = scmp neq i32 %158, i32 102;
    cbr i1 %159(prob = 0.5), ^b, ^if.else27;
^if.then27:
    i32 %160 = load i32* %0;
    i32 %161 = add i32 %160, i32 3;
    i1 %162 = scmp ge i32 %161, i32 %len;
    cbr i1 %162(prob = 0.5), ^b, ^if.else28;
^if.else23:
    i32 %163 = load i32* %0;
    i32* %164 = getelementptr &(i32* %buf)[i32 %163];
    i32 %165 = load i32* %164;
    i1 %166 = scmp eq i32 %165, i32 116;
    cbr i1 %166(prob = 0.5), ^if.then31, ^if.else29;
^if.then28:
    i32 %167 = load i32* %0;
    i32 %168 = add i32 %167, i32 1;
    store i32* %0 with i32 %168;
    ubr ^b;
^b13:
    i32 %169 = add i32 %113, i32 1;
    store i32* %0 with i32 %169;
    ubr ^while.header1;
^if.then29:
    i32 %170 = add i32 %147, i32 1;
    store i32* %0 with i32 %170;
    ubr ^while.body2;
^if.then30:
    i32 %171 = load i32* %0;
    i32 %172 = add i32 %171, i32 1;
    store i32* %0 with i32 %172;
    ubr ^while.body3;
^entry3:
    i32 %173 = load i32* %0;
    ubr ^while.body6;
^if.then31:
    i32 %174 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.body5:
    i32 %175 = phi [^entry2, i32 %137] [^if.then38, i32 %242] [^if.then42, i32 %272] [^if.then48, i32 %314] [^if.then54, i32 %345];
    i1 %176 = scmp ge i32 %175, i32 %len;
    cbr i1 %176(prob = 0.5), ^b15, ^b16;
^if.then32:
    i32* %177 = getelementptr &(i32* %buf)[i32 %145];
    i32 %178 = load i32* %177;
    i1 %179 = scmp eq i32 %178, i32 46;
    cbr i1 %179(prob = 0.5), ^if.then35, ^indirect2;
^b14:
    i32 %180 = phi [^b12, i32 %145] [^indirect2, i32 %200] [^if.then35, i32 %209] [^indirect3, i32 %309];
    i1 %181 = scmp lt i32 %180, i32 %len;
    cbr i1 %181(prob = 0.5), ^if.then37, ^b;
^if.else24:
    i1 %182 = scmp eq i32 %149, i32 13;
    cbr i1 %182(prob = 0.5), ^if.then33, ^if.then14;
^if.else25:
    i32 %183 = load i32* %0;
    i32* %184 = getelementptr &(i32* %buf)[i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = scmp eq i32 %185, i32 10;
    cbr i1 %186(prob = 0.5), ^if.then34, ^if.else30;
^if.else26:
    i32 %187 = add i32 %152, i32 2;
    i32* %188 = getelementptr &(i32* %buf)[i32 %187];
    i32 %189 = load i32* %188;
    i1 %190 = scmp neq i32 %189, i32 117;
    cbr i1 %190(prob = 0.5), ^b, ^if.else31;
^if.else27:
    i32 %191 = load i32* %0;
    i32 %192 = add i32 %191, i32 1;
    i32* %193 = getelementptr &(i32* %buf)[i32 %192];
    i32 %194 = load i32* %193;
    i1 %195 = scmp neq i32 %194, i32 97;
    cbr i1 %195(prob = 0.5), ^b, ^if.else32;
^if.else28:
    i32* %196 = getelementptr &(i32* %buf)[i32 %160];
    i32 %197 = load i32* %196;
    i1 %198 = scmp neq i32 %197, i32 110;
    cbr i1 %198(prob = 0.5), ^b, ^if.else33;
^if.else29:
    i1 %199 = scmp eq i32 %165, i32 102;
    cbr i1 %199(prob = 0.5), ^if.then36, ^if.else34;
^indirect2:
    i32 %200 = load i32* %0;
    ubr ^b14;
^if.then33:
    i32 %201 = load i32* %0;
    i32 %202 = add i32 %201, i32 1;
    store i32* %0 with i32 %202;
    ubr ^while.body2;
^if.then34:
    i32 %203 = add i32 %183, i32 1;
    store i32* %0 with i32 %203;
    ubr ^while.body3;
^b15:
    i32 %204 = load i32* %0;
    i32* %205 = getelementptr &(i32* %buf)[i32 %204];
    i32 %206 = load i32* %205;
    i1 %207 = scmp eq i32 %206, i32 44;
    cbr i1 %207(prob = 0.97), ^while.body7, ^while.body9;
^if.then35:
    i32 %208 = load i32* %0;
    i32 %209 = add i32 %208, i32 1;
    store i32* %0 with i32 %209;
    i1 %210 = scmp lt i32 %209, i32 %len;
    cbr i1 %210(prob = 0.97), ^while.body8, ^b14;
^if.then36:
    i32 %211 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b16:
    i32 %212 = load i32* %0;
    i32* %213 = getelementptr &(i32* %buf)[i32 %212];
    i32 %214 = load i32* %213;
    i1 %215 = scmp eq i32 %214, i32 32;
    cbr i1 %215(prob = 0.5), ^if.then38, ^if.else35;
^while.body6:
    i32 %216 = phi [^entry3, i32 %173] [^if.then43, i32 %273] [^if.then49, i32 %316] [^if.then55, i32 %346] [^if.then58, i32 %361];
    i1 %217 = scmp ge i32 %216, i32 %len;
    cbr i1 %217(prob = 0.5), ^b17, ^b18;
^if.then37:
    i32 %218 = load i32* %0;
    i32* %219 = getelementptr &(i32* %buf)[i32 %218];
    i32 %220 = load i32* %219;
    i1 %221 = scmp eq i32 %220, i32 101;
    cbr i1 %221(prob = 0.5), ^if.then40, ^b;
^if.else30:
    i1 %222 = scmp eq i32 %185, i32 13;
    cbr i1 %222(prob = 0.5), ^if.then39, ^if.then19;
^if.else31:
    i32 %223 = load i32* %0;
    i32 %224 = add i32 %223, i32 3;
    i32* %225 = getelementptr &(i32* %buf)[i32 %224];
    i32 %226 = load i32* %225;
    i1 %227 = scmp neq i32 %226, i32 101;
    cbr i1 %227(prob = 0.5), ^b, ^b19;
^if.else32:
    i32 %228 = add i32 %191, i32 2;
    i32* %229 = getelementptr &(i32* %buf)[i32 %228];
    i32 %230 = load i32* %229;
    i1 %231 = scmp neq i32 %230, i32 108;
    cbr i1 %231(prob = 0.5), ^b, ^if.else36;
^if.else33:
    i32 %232 = load i32* %0;
    i32 %233 = add i32 %232, i32 1;
    i32* %234 = getelementptr &(i32* %buf)[i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = scmp neq i32 %235, i32 117;
    cbr i1 %236(prob = 0.5), ^b, ^if.else37;
^if.else34:
    i32 %237 = load i32* %0;
    i32* %238 = getelementptr &(i32* %buf)[i32 %237];
    i32 %239 = load i32* %238;
    i1 %240 = scmp eq i32 %239, i32 110;
    cbr i1 %240(prob = 0.5), ^if.then41, ^b;
^while.body7:
    i32 %241 = add i32 %204, i32 1;
    store i32* %0 with i32 %241;
    ubr ^while.body10;
^if.then38:
    i32 %242 = add i32 %212, i32 1;
    store i32* %0 with i32 %242;
    ubr ^while.body5;
^while.body8:
    i32* %243 = getelementptr &(i32* %buf)[i32 %209];
    i32 %244 = load i32* %243;
    i1 %245 = scmp gt i32 %244, i32 47;
    cbr i1 %245(prob = 0.5), ^if.then44, ^b21;
^if.then39:
    i32 %246 = load i32* %0;
    i32 %247 = add i32 %246, i32 1;
    store i32* %0 with i32 %247;
    ubr ^while.body3;
^b17:
    i32 %248 = load i32* %0;
    i1 %249 = scmp ge i32 %248, i32 %len;
    cbr i1 %249(prob = 0.5), ^b, ^b22;
^while.body9:
    i32 %250 = phi [^b15, i32 %204] [^if.then47, i32 %312] [^if.then53, i32 %343] [^if.then57, i32 %359] [^if.then61, i32 %381];
    i1 %251 = scmp ge i32 %250, i32 %len;
    cbr i1 %251(prob = 0.5), ^b20, ^b23;
^if.then40:
    i32 %252 = add i32 %218, i32 1;
    store i32* %0 with i32 %252;
    i1 %253 = scmp lt i32 %252, i32 %len;
    cbr i1 %253(prob = 0.5), ^if.then45, ^b24;
^if.then41:
    i32 %254 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else35:
    i1 %255 = scmp eq i32 %214, i32 9;
    cbr i1 %255(prob = 0.5), ^if.then42, ^if.else38;
^b18:
    i32 %256 = load i32* %0;
    i32* %257 = getelementptr &(i32* %buf)[i32 %256];
    i32 %258 = load i32* %257;
    i1 %259 = scmp eq i32 %258, i32 32;
    cbr i1 %259(prob = 0.5), ^if.then43, ^if.else39;
^b19:
    i32 %260 = phi [^if.else31, i32 %223] [^if.else41, i32 %302];
    i32 %261 = add i32 %260, i32 4;
    store i32* %0 with i32 %261;
    ubr ^b;
^if.else36:
    i32 %262 = load i32* %0;
    i32 %263 = add i32 %262, i32 3;
    i32* %264 = getelementptr &(i32* %buf)[i32 %263];
    i32 %265 = load i32* %264;
    i1 %266 = scmp neq i32 %265, i32 115;
    cbr i1 %266(prob = 0.5), ^b, ^if.else40;
^if.else37:
    i32 %267 = add i32 %232, i32 2;
    i32* %268 = getelementptr &(i32* %buf)[i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = scmp neq i32 %269, i32 108;
    cbr i1 %270(prob = 0.5), ^b, ^if.else41;
^if.then42:
    i32 %271 = load i32* %0;
    i32 %272 = add i32 %271, i32 1;
    store i32* %0 with i32 %272;
    ubr ^while.body5;
^if.then43:
    i32 %273 = add i32 %256, i32 1;
    store i32* %0 with i32 %273;
    ubr ^while.body6;
^while.body10:
    i32 %274 = phi [^while.body7, i32 %241] [^if.then51, i32 %339] [^if.then56, i32 %358] [^if.then59, i32 %377] [^if.then63, i32 %388];
    i1 %275 = scmp ge i32 %274, i32 %len;
    cbr i1 %275(prob = 0.5), ^while.body11, ^b26;
^if.then44:
    i1 %276 = scmp lt i32 %244, i32 58;
    cbr i1 %276(prob = 0.5), ^b21, ^if.else42;
^b20:
    i32 %277 = load i32* %0;
    i1 %278 = scmp ge i32 %277, i32 %len;
    cbr i1 %278(prob = 0.5), ^b, ^b27;
^if.then45:
    i32* %279 = getelementptr &(i32* %buf)[i32 %252];
    i32 %280 = load i32* %279;
    i1 %281 = scmp eq i32 %280, i32 43;
    cbr i1 %281(prob = 0.5), ^if.then46, ^indirect4;
^b21:
    i32 %282 = phi [^while.body8, i32 0] [^if.then44, i32 1] [^if.else42, i32 0];
    i1 %283 = scmp neq i32 %282, i32 1;
    cbr i1 %283(prob = 0.5), ^indirect3, ^if.then35;
^b22:
    i32* %284 = getelementptr &(i32* %buf)[i32 %248];
    i32 %285 = load i32* %284;
    i1 %286 = scmp neq i32 %285, i32 58;
    cbr i1 %286(prob = 0.5), ^b, ^b25;
^b23:
    i32 %287 = load i32* %0;
    i32* %288 = getelementptr &(i32* %buf)[i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = scmp eq i32 %289, i32 32;
    cbr i1 %290(prob = 0.5), ^if.then47, ^if.else43;
^b24:
    i32 %291 = phi [^if.then40, i32 %252] [^if.then46, i32 %308] [^indirect4, i32 %313];
    i1 %292 = scmp lt i32 %291, i32 %len;
    cbr i1 %292(prob = 0.5), ^if.then50, ^indirect5;
^if.else38:
    i32 %293 = load i32* %0;
    i32* %294 = getelementptr &(i32* %buf)[i32 %293];
    i32 %295 = load i32* %294;
    i1 %296 = scmp eq i32 %295, i32 10;
    cbr i1 %296(prob = 0.5), ^if.then48, ^if.else44;
^if.else39:
    i1 %297 = scmp eq i32 %258, i32 9;
    cbr i1 %297(prob = 0.5), ^if.then49, ^if.else45;
^if.else40:
    i32 %298 = add i32 %262, i32 4;
    i32* %299 = getelementptr &(i32* %buf)[i32 %298];
    i32 %300 = load i32* %299;
    i1 %301 = scmp neq i32 %300, i32 101;
    cbr i1 %301(prob = 0.5), ^b, ^b28;
^if.else41:
    i32 %302 = load i32* %0;
    i32 %303 = add i32 %302, i32 3;
    i32* %304 = getelementptr &(i32* %buf)[i32 %303];
    i32 %305 = load i32* %304;
    i1 %306 = scmp neq i32 %305, i32 108;
    cbr i1 %306(prob = 0.5), ^b, ^b19;
^if.then46:
    i32 %307 = load i32* %0;
    i32 %308 = add i32 %307, i32 1;
    store i32* %0 with i32 %308;
    ubr ^b24;
^if.else42:
    ubr ^b21;
^indirect3:
    i32 %309 = load i32* %0;
    ubr ^b14;
^while.body11:
    i32 %310 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %311 = scmp eq i32 %310, i32 0;
    cbr i1 %311(prob = 0.5), ^b, ^entry2;
^if.then47:
    i32 %312 = add i32 %287, i32 1;
    store i32* %0 with i32 %312;
    ubr ^while.body9;
^indirect4:
    i32 %313 = load i32* %0;
    ubr ^b24;
^if.then48:
    i32 %314 = add i32 %293, i32 1;
    store i32* %0 with i32 %314;
    ubr ^while.body5;
^if.then49:
    i32 %315 = load i32* %0;
    i32 %316 = add i32 %315, i32 1;
    store i32* %0 with i32 %316;
    ubr ^while.body6;
^b25:
    i32 %317 = load i32* %0;
    i32 %318 = add i32 %317, i32 1;
    store i32* %0 with i32 %318;
    ubr ^while.body12;
^b26:
    i32 %319 = load i32* %0;
    i32* %320 = getelementptr &(i32* %buf)[i32 %319];
    i32 %321 = load i32* %320;
    i1 %322 = scmp eq i32 %321, i32 32;
    cbr i1 %322(prob = 0.5), ^if.then51, ^if.else46;
^indirect5:
    i32 %323 = load i32* %0;
    ubr ^while.header2;
^b27:
    i32* %324 = getelementptr &(i32* %buf)[i32 %277];
    i32 %325 = load i32* %324;
    i1 %326 = scmp neq i32 %325, i32 93;
    cbr i1 %326(prob = 0.5), ^b, ^b10;
^if.then50:
    i32 %327 = load i32* %0;
    i32* %328 = getelementptr &(i32* %buf)[i32 %327];
    i32 %329 = load i32* %328;
    i1 %330 = scmp eq i32 %329, i32 45;
    cbr i1 %330(prob = 0.5), ^if.then52, ^while.header2;
^if.else43:
    i1 %331 = scmp eq i32 %289, i32 9;
    cbr i1 %331(prob = 0.5), ^if.then53, ^if.else47;
^if.else44:
    i1 %332 = scmp eq i32 %295, i32 13;
    cbr i1 %332(prob = 0.5), ^if.then54, ^b15;
^if.else45:
    i32 %333 = load i32* %0;
    i32* %334 = getelementptr &(i32* %buf)[i32 %333];
    i32 %335 = load i32* %334;
    i1 %336 = scmp eq i32 %335, i32 10;
    cbr i1 %336(prob = 0.5), ^if.then55, ^if.else48;
^b28:
    i32 %337 = load i32* %0;
    i32 %338 = add i32 %337, i32 5;
    store i32* %0 with i32 %338;
    ubr ^b;
^if.then51:
    i32 %339 = add i32 %319, i32 1;
    store i32* %0 with i32 %339;
    ubr ^while.body10;
^if.then52:
    i32 %340 = phi [^if.then50, i32 %327] [^b31, i32 %368];
    i32 %341 = add i32 %340, i32 1;
    store i32* %0 with i32 %341;
    ubr ^while.header2;
^if.then53:
    i32 %342 = load i32* %0;
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    ubr ^while.body9;
^if.then54:
    i32 %344 = load i32* %0;
    i32 %345 = add i32 %344, i32 1;
    store i32* %0 with i32 %345;
    ubr ^while.body5;
^if.then55:
    i32 %346 = add i32 %333, i32 1;
    store i32* %0 with i32 %346;
    ubr ^while.body6;
^if.else46:
    i1 %347 = scmp eq i32 %321, i32 9;
    cbr i1 %347(prob = 0.5), ^if.then56, ^if.else49;
^while.body12:
    i32 %348 = phi [^b25, i32 %318] [^if.then60, i32 %378] [^if.then64, i32 %390] [^if.then65, i32 %397] [^if.then67, i32 %410];
    i1 %349 = scmp ge i32 %348, i32 %len;
    cbr i1 %349(prob = 0.5), ^b29, ^b30;
^while.header2:
    i32 %350 = phi [^indirect5, i32 %323] [^if.then50, i32 %327] [^if.then52, i32 %341];
    i1 %351 = scmp lt i32 %350, i32 %len;
    cbr i1 %351(prob = 0.97), ^while.body13, ^b;
^if.else47:
    i32 %352 = load i32* %0;
    i32* %353 = getelementptr &(i32* %buf)[i32 %352];
    i32 %354 = load i32* %353;
    i1 %355 = scmp eq i32 %354, i32 10;
    cbr i1 %355(prob = 0.5), ^if.then57, ^if.else50;
^if.else48:
    i1 %356 = scmp eq i32 %335, i32 13;
    cbr i1 %356(prob = 0.5), ^if.then58, ^b17;
^if.then56:
    i32 %357 = load i32* %0;
    i32 %358 = add i32 %357, i32 1;
    store i32* %0 with i32 %358;
    ubr ^while.body10;
^if.then57:
    i32 %359 = add i32 %352, i32 1;
    store i32* %0 with i32 %359;
    ubr ^while.body9;
^if.then58:
    i32 %360 = load i32* %0;
    i32 %361 = add i32 %360, i32 1;
    store i32* %0 with i32 %361;
    ubr ^while.body6;
^if.else49:
    i32 %362 = load i32* %0;
    i32* %363 = getelementptr &(i32* %buf)[i32 %362];
    i32 %364 = load i32* %363;
    i1 %365 = scmp eq i32 %364, i32 10;
    cbr i1 %365(prob = 0.5), ^if.then59, ^if.else51;
^b29:
    i32 %366 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %367 = scmp eq i32 %366, i32 0;
    cbr i1 %367(prob = 0.5), ^b, ^entry4;
^while.body13:
    i32 %368 = load i32* %0;
    i32* %369 = getelementptr &(i32* %buf)[i32 %368];
    i32 %370 = load i32* %369;
    i1 %371 = scmp gt i32 %370, i32 47;
    cbr i1 %371(prob = 0.5), ^if.then62, ^b31;
^b30:
    i32 %372 = load i32* %0;
    i32* %373 = getelementptr &(i32* %buf)[i32 %372];
    i32 %374 = load i32* %373;
    i1 %375 = scmp eq i32 %374, i32 32;
    cbr i1 %375(prob = 0.5), ^if.then60, ^if.else52;
^if.else50:
    i1 %376 = scmp eq i32 %354, i32 13;
    cbr i1 %376(prob = 0.5), ^if.then61, ^b20;
^if.then59:
    i32 %377 = add i32 %362, i32 1;
    store i32* %0 with i32 %377;
    ubr ^while.body10;
^if.then60:
    i32 %378 = add i32 %372, i32 1;
    store i32* %0 with i32 %378;
    ubr ^while.body12;
^entry4:
    i32 %379 = load i32* %0;
    ubr ^while.body14;
^if.then61:
    i32 %380 = load i32* %0;
    i32 %381 = add i32 %380, i32 1;
    store i32* %0 with i32 %381;
    ubr ^while.body9;
^if.then62:
    i1 %382 = scmp lt i32 %370, i32 58;
    cbr i1 %382(prob = 0.5), ^b31, ^if.else53;
^if.else51:
    i1 %383 = scmp eq i32 %364, i32 13;
    cbr i1 %383(prob = 0.5), ^if.then63, ^while.body11;
^b31:
    i32 %384 = phi [^while.body13, i32 0] [^if.then62, i32 1] [^if.else53, i32 0];
    i1 %385 = scmp neq i32 %384, i32 1;
    cbr i1 %385(prob = 0.5), ^b, ^if.then52;
^if.else52:
    i1 %386 = scmp eq i32 %374, i32 9;
    cbr i1 %386(prob = 0.5), ^if.then64, ^if.else54;
^if.then63:
    i32 %387 = load i32* %0;
    i32 %388 = add i32 %387, i32 1;
    store i32* %0 with i32 %388;
    ubr ^while.body10;
^if.else53:
    ubr ^b31;
^if.then64:
    i32 %389 = load i32* %0;
    i32 %390 = add i32 %389, i32 1;
    store i32* %0 with i32 %390;
    ubr ^while.body12;
^while.body14:
    i32 %391 = phi [^entry4, i32 %379] [^if.then66, i32 %408] [^if.then68, i32 %415] [^if.then70, i32 %431] [^if.then73, i32 %446];
    i1 %392 = scmp ge i32 %391, i32 %len;
    cbr i1 %392(prob = 0.5), ^b32, ^b33;
^if.else54:
    i32 %393 = load i32* %0;
    i32* %394 = getelementptr &(i32* %buf)[i32 %393];
    i32 %395 = load i32* %394;
    i1 %396 = scmp eq i32 %395, i32 10;
    cbr i1 %396(prob = 0.5), ^if.then65, ^if.else55;
^if.then65:
    i32 %397 = add i32 %393, i32 1;
    store i32* %0 with i32 %397;
    ubr ^while.body12;
^b32:
    i32 %398 = load i32* %0;
    i32* %399 = getelementptr &(i32* %buf)[i32 %398];
    i32 %400 = load i32* %399;
    i1 %401 = scmp eq i32 %400, i32 44;
    cbr i1 %401(prob = 0.97), ^while.body15, ^while.body16;
^b33:
    i32 %402 = load i32* %0;
    i32* %403 = getelementptr &(i32* %buf)[i32 %402];
    i32 %404 = load i32* %403;
    i1 %405 = scmp eq i32 %404, i32 32;
    cbr i1 %405(prob = 0.5), ^if.then66, ^if.else56;
^if.else55:
    i1 %406 = scmp eq i32 %395, i32 13;
    cbr i1 %406(prob = 0.5), ^if.then67, ^b29;
^while.body15:
    i32 %407 = add i32 %398, i32 1;
    store i32* %0 with i32 %407;
    ubr ^while.body17;
^if.then66:
    i32 %408 = add i32 %402, i32 1;
    store i32* %0 with i32 %408;
    ubr ^while.body14;
^if.then67:
    i32 %409 = load i32* %0;
    i32 %410 = add i32 %409, i32 1;
    store i32* %0 with i32 %410;
    ubr ^while.body12;
^while.body16:
    i32 %411 = phi [^b32, i32 %398] [^if.then69, i32 %430] [^if.then72, i32 %444] [^if.then75, i32 %456] [^if.then77, i32 %470];
    i1 %412 = scmp ge i32 %411, i32 %len;
    cbr i1 %412(prob = 0.5), ^b34, ^b35;
^if.else56:
    i1 %413 = scmp eq i32 %404, i32 9;
    cbr i1 %413(prob = 0.5), ^if.then68, ^if.else57;
^if.then68:
    i32 %414 = load i32* %0;
    i32 %415 = add i32 %414, i32 1;
    store i32* %0 with i32 %415;
    ubr ^while.body14;
^while.body17:
    i32 %416 = phi [^while.body15, i32 %407] [^if.then71, i32 %441] [^if.then74, i32 %453] [^if.then76, i32 %462] [^if.then79, i32 %474];
    i1 %417 = scmp ge i32 %416, i32 %len;
    cbr i1 %417(prob = 0.5), ^while.body18, ^b36;
^b34:
    i32 %418 = load i32* %0;
    i1 %419 = scmp ge i32 %418, i32 %len;
    cbr i1 %419(prob = 0.5), ^b, ^if.else58;
^b35:
    i32 %420 = load i32* %0;
    i32* %421 = getelementptr &(i32* %buf)[i32 %420];
    i32 %422 = load i32* %421;
    i1 %423 = scmp eq i32 %422, i32 32;
    cbr i1 %423(prob = 0.5), ^if.then69, ^if.else59;
^if.else57:
    i32 %424 = load i32* %0;
    i32* %425 = getelementptr &(i32* %buf)[i32 %424];
    i32 %426 = load i32* %425;
    i1 %427 = scmp eq i32 %426, i32 10;
    cbr i1 %427(prob = 0.5), ^if.then70, ^if.else60;
^while.body18:
    i32 %428 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %429 = scmp eq i32 %428, i32 0;
    cbr i1 %429(prob = 0.5), ^b, ^entry5;
^if.then69:
    i32 %430 = add i32 %420, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body16;
^if.then70:
    i32 %431 = add i32 %424, i32 1;
    store i32* %0 with i32 %431;
    ubr ^while.body14;
^b36:
    i32 %432 = load i32* %0;
    i32* %433 = getelementptr &(i32* %buf)[i32 %432];
    i32 %434 = load i32* %433;
    i1 %435 = scmp eq i32 %434, i32 32;
    cbr i1 %435(prob = 0.5), ^if.then71, ^if.else61;
^if.else58:
    i32* %436 = getelementptr &(i32* %buf)[i32 %418];
    i32 %437 = load i32* %436;
    i1 %438 = scmp neq i32 %437, i32 125;
    cbr i1 %438(prob = 0.5), ^b, ^b10;
^if.else59:
    i1 %439 = scmp eq i32 %422, i32 9;
    cbr i1 %439(prob = 0.5), ^if.then72, ^if.else62;
^if.else60:
    i1 %440 = scmp eq i32 %426, i32 13;
    cbr i1 %440(prob = 0.5), ^if.then73, ^b32;
^if.then71:
    i32 %441 = add i32 %432, i32 1;
    store i32* %0 with i32 %441;
    ubr ^while.body17;
^entry5:
    i32 %442 = load i32* %0;
    ubr ^while.body19;
^if.then72:
    i32 %443 = load i32* %0;
    i32 %444 = add i32 %443, i32 1;
    store i32* %0 with i32 %444;
    ubr ^while.body16;
^if.then73:
    i32 %445 = load i32* %0;
    i32 %446 = add i32 %445, i32 1;
    store i32* %0 with i32 %446;
    ubr ^while.body14;
^if.else61:
    i1 %447 = scmp eq i32 %434, i32 9;
    cbr i1 %447(prob = 0.5), ^if.then74, ^if.else63;
^if.else62:
    i32 %448 = load i32* %0;
    i32* %449 = getelementptr &(i32* %buf)[i32 %448];
    i32 %450 = load i32* %449;
    i1 %451 = scmp eq i32 %450, i32 10;
    cbr i1 %451(prob = 0.5), ^if.then75, ^if.else64;
^if.then74:
    i32 %452 = load i32* %0;
    i32 %453 = add i32 %452, i32 1;
    store i32* %0 with i32 %453;
    ubr ^while.body17;
^while.body19:
    i32 %454 = phi [^entry5, i32 %442] [^if.then78, i32 %472] [^if.then80, i32 %480] [^if.then81, i32 %487] [^if.then82, i32 %492];
    i1 %455 = scmp ge i32 %454, i32 %len;
    cbr i1 %455(prob = 0.5), ^b37, ^b38;
^if.then75:
    i32 %456 = add i32 %448, i32 1;
    store i32* %0 with i32 %456;
    ubr ^while.body16;
^if.else63:
    i32 %457 = load i32* %0;
    i32* %458 = getelementptr &(i32* %buf)[i32 %457];
    i32 %459 = load i32* %458;
    i1 %460 = scmp eq i32 %459, i32 10;
    cbr i1 %460(prob = 0.5), ^if.then76, ^if.else65;
^if.else64:
    i1 %461 = scmp eq i32 %450, i32 13;
    cbr i1 %461(prob = 0.5), ^if.then77, ^b34;
^if.then76:
    i32 %462 = add i32 %457, i32 1;
    store i32* %0 with i32 %462;
    ubr ^while.body17;
^b37:
    i32 %463 = load i32* %0;
    i1 %464 = scmp ge i32 %463, i32 %len;
    cbr i1 %464(prob = 0.5), ^b, ^b39;
^b38:
    i32 %465 = load i32* %0;
    i32* %466 = getelementptr &(i32* %buf)[i32 %465];
    i32 %467 = load i32* %466;
    i1 %468 = scmp eq i32 %467, i32 32;
    cbr i1 %468(prob = 0.5), ^if.then78, ^if.else66;
^if.then77:
    i32 %469 = load i32* %0;
    i32 %470 = add i32 %469, i32 1;
    store i32* %0 with i32 %470;
    ubr ^while.body16;
^if.else65:
    i1 %471 = scmp eq i32 %459, i32 13;
    cbr i1 %471(prob = 0.5), ^if.then79, ^while.body18;
^if.then78:
    i32 %472 = add i32 %465, i32 1;
    store i32* %0 with i32 %472;
    ubr ^while.body19;
^if.then79:
    i32 %473 = load i32* %0;
    i32 %474 = add i32 %473, i32 1;
    store i32* %0 with i32 %474;
    ubr ^while.body17;
^b39:
    i32* %475 = getelementptr &(i32* %buf)[i32 %463];
    i32 %476 = load i32* %475;
    i1 %477 = scmp neq i32 %476, i32 58;
    cbr i1 %477(prob = 0.5), ^b, ^b40;
^if.else66:
    i1 %478 = scmp eq i32 %467, i32 9;
    cbr i1 %478(prob = 0.5), ^if.then80, ^if.else67;
^if.then80:
    i32 %479 = load i32* %0;
    i32 %480 = add i32 %479, i32 1;
    store i32* %0 with i32 %480;
    ubr ^while.body19;
^b40:
    i32 %481 = load i32* %0;
    i32 %482 = add i32 %481, i32 1;
    store i32* %0 with i32 %482;
    ubr ^while.body20;
^if.else67:
    i32 %483 = load i32* %0;
    i32* %484 = getelementptr &(i32* %buf)[i32 %483];
    i32 %485 = load i32* %484;
    i1 %486 = scmp eq i32 %485, i32 10;
    cbr i1 %486(prob = 0.5), ^if.then81, ^if.else68;
^if.then81:
    i32 %487 = add i32 %483, i32 1;
    store i32* %0 with i32 %487;
    ubr ^while.body19;
^while.body20:
    i32 %488 = phi [^b40, i32 %482] [^if.then83, i32 %499] [^if.then84, i32 %502] [^if.then85, i32 %507] [^if.then86, i32 %510];
    i1 %489 = scmp ge i32 %488, i32 %len;
    cbr i1 %489(prob = 0.5), ^b41, ^b42;
^if.else68:
    i1 %490 = scmp eq i32 %485, i32 13;
    cbr i1 %490(prob = 0.5), ^if.then82, ^b37;
^if.then82:
    i32 %491 = load i32* %0;
    i32 %492 = add i32 %491, i32 1;
    store i32* %0 with i32 %492;
    ubr ^while.body19;
^b41:
    i32 %493 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %494 = scmp eq i32 %493, i32 0;
    cbr i1 %494(prob = 0.5), ^b, ^entry4;
^b42:
    i32 %495 = load i32* %0;
    i32* %496 = getelementptr &(i32* %buf)[i32 %495];
    i32 %497 = load i32* %496;
    i1 %498 = scmp eq i32 %497, i32 32;
    cbr i1 %498(prob = 0.5), ^if.then83, ^if.else69;
^if.then83:
    i32 %499 = add i32 %495, i32 1;
    store i32* %0 with i32 %499;
    ubr ^while.body20;
^if.else69:
    i1 %500 = scmp eq i32 %497, i32 9;
    cbr i1 %500(prob = 0.5), ^if.then84, ^if.else70;
^if.then84:
    i32 %501 = load i32* %0;
    i32 %502 = add i32 %501, i32 1;
    store i32* %0 with i32 %502;
    ubr ^while.body20;
^if.else70:
    i32 %503 = load i32* %0;
    i32* %504 = getelementptr &(i32* %buf)[i32 %503];
    i32 %505 = load i32* %504;
    i1 %506 = scmp eq i32 %505, i32 10;
    cbr i1 %506(prob = 0.5), ^if.then85, ^if.else71;
^if.then85:
    i32 %507 = add i32 %503, i32 1;
    store i32* %0 with i32 %507;
    ubr ^while.body20;
^if.else71:
    i1 %508 = scmp eq i32 %505, i32 13;
    cbr i1 %508(prob = 0.5), ^if.then86, ^b41;
^if.then86:
    i32 %509 = load i32* %0;
    i32 %510 = add i32 %509, i32 1;
    store i32* %0 with i32 %510;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %8];
    i32* %4 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32* %7 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 35;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
^indirect:
    i32 %11 = load i32* %pos;
    ubr ^b;
^while.body1:
    i32 %12 = phi [^b, i32 %2] [^if.then, i32 %20] [^if.then1, i32 %25] [^if.then4, i32 %36] [^if.then6, i32 %42];
    i1 %13 = scmp ge i32 %12, i32 %3;
    cbr i1 %13(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %14 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %4, i32 %3, i32* %pos);
    i32 %15 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32 %16 = load i32* %pos;
    i32* %17 = getelementptr &(i32* %4)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %20 = add i32 %16, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^while.body2:
    i32 %21 = phi [^b1, i32 %15] [^if.then3, i32 %35] [^if.then5, i32 %40] [^if.then7, i32 %48] [^if.then8, i32 %51];
    i1 %22 = scmp ge i32 %21, i32 %3;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %23 = scmp eq i32 %18, i32 9;
    cbr i1 %23(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %24 = load i32* %pos;
    i32 %25 = add i32 %24, i32 1;
    store i32* %pos with i32 %25;
    ubr ^while.body1;
^b3:
    i1 %26 = scmp neq i32 %14, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^b4:
    i32 %27 = load i32* %pos;
    i32* %28 = getelementptr &(i32* %4)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 32;
    cbr i1 %30(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %4)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = scmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then2:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then3:
    i32 %35 = add i32 %27, i32 1;
    store i32* %pos with i32 %35;
    ubr ^while.body2;
^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^if.then4:
    i32 %36 = add i32 %31, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body1;
^if.else3:
    i1 %37 = scmp eq i32 %29, i32 9;
    cbr i1 %37(prob = 0.5), ^if.then5, ^if.else5;
^if.else4:
    i1 %38 = scmp eq i32 %33, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b1;
^if.then5:
    i32 %39 = load i32* %pos;
    i32 %40 = add i32 %39, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body2;
^if.then6:
    i32 %41 = load i32* %pos;
    i32 %42 = add i32 %41, i32 1;
    store i32* %pos with i32 %42;
    ubr ^while.body1;
^if.else5:
    i32 %43 = load i32* %pos;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 10;
    cbr i1 %46(prob = 0.5), ^if.then7, ^if.else6;
^b5:
    i32 %47 = phi [^if.then2, i32 0] [^if.else2, i32 1];
    ret i32 %47;
^if.then7:
    i32 %48 = add i32 %43, i32 1;
    store i32* %pos with i32 %48;
    ubr ^while.body2;
^if.else6:
    i1 %49 = scmp eq i32 %45, i32 13;
    cbr i1 %49(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %50 = load i32* %pos;
    i32 %51 = add i32 %50, i32 1;
    store i32* %pos with i32 %51;
    ubr ^while.body2;
}
