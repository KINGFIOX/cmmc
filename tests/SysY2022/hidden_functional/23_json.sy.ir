internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else1, i32 3] [^if.else3, i32 2] [^entry2, i32 1];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %24];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %8 = load i32* %0;
    ubr ^while.body;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 0] [^if.else5, i32 0] [^b5, i32 0] [^if.then7, i32 %79] [^if.then8, i32 0] [^if.else11, i32 0] [^if.then11, i32 %112] [^if.else12, i32 0] [^if.then12, i32 0] [^if.else14, i32 0] [^b10, i32 1] [^b11, i32 0] [^if.then16, i32 %145] [^if.else15, i32 0] [^if.else16, i32 0] [^if.then18, i32 0] [^if.then19, i32 1] [^b12, i32 0] [^if.then22, i32 %171] [^b13, i32 1] [^if.else18, i32 0] [^if.else19, i32 0] [^if.else20, i32 0] [^if.else21, i32 0] [^if.then23, i32 1] [^if.then24, i32 1] [^if.then25, i32 %199] [^if.else22, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^b15, i32 1] [^if.else25, i32 0] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^b19, i32 0] [^b20, i32 1] [^b21, i32 0] [^while.header2, i32 1] [^while.body11, i32 0] [^while.body12, i32 1] [^b25, i32 0] [^b26, i32 0] [^b27, i32 0] [^while.body18, i32 0] [^b33, i32 0] [^if.else29, i32 0] [^b35, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %9;
  ^while.body:
    i32 %10 = phi [^entry1, i32 %8] [^if.then, i32 %23];
    i1 %11 = icmp sle i32 %len, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %12 = icmp eq i32 %6, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %13 = load i32* %0;
    i32* %14 = getelementptr &(i32* %buf)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 32;
    i1 %17 = icmp eq i32 %15, i32 9;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %15, i32 10;
    i1 %20 = or i1 %18, i1 %19;
    i1 %21 = icmp eq i32 %15, i32 13;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %23 = add i32 %13, i32 1;
    store i32* %0 with i32 %23;
    ubr ^while.body;
  ^if.then1:
    i32 %24 = load i32* %0;
    i32* %25 = getelementptr &(i32* %buf)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 123;
    cbr i1 %27(prob = 0.5), ^entry, ^if.else1;
  ^if.else:
    i1 %28 = icmp eq i32 %6, i32 1;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else1:
    i1 %29 = icmp eq i32 %26, i32 91;
    cbr i1 %29(prob = 0.5), ^2, ^if.else3;
  ^if.then2:
    i32 %30 = load i32* %0;
    i32* %31 = getelementptr &(i32* %buf)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 43;
    i1 %34 = icmp eq i32 %32, i32 45;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.75), ^if.then3, ^b3;
  ^if.else2:
    i1 %36 = icmp eq i32 %6, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then3:
    i32 %37 = add i32 %30, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then4:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.else3:
    i1 %40 = icmp eq i32 %26, i32 34;
    cbr i1 %40(prob = 0.5), ^2, ^entry2;
  ^b3:
    i32 %41 = phi [^if.then2, i32 %30] [^if.then3, i32 %37];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^b, ^if.else5;
  ^if.else4:
    i1 %43 = icmp eq i32 %6, i32 3;
    cbr i1 %43(prob = 0.5), ^if.then5, ^if.else6;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.body2;
  ^while.header:
    i32 %46 = phi [^if.then4, i32 %39] [^b4, i32 %75];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.97), ^while.body1, ^indirect;
  ^if.else5:
    i32 %48 = load i32* %0;
    i32* %49 = getelementptr &(i32* %buf)[i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = icmp slt i32 %50, i32 58;
    i32 %52 = zext i1 %51 to i32;
    i1 %53 = icmp sgt i32 %50, i32 47;
    i32 %54 = select i1 %53 ? i32 %52 : i32 0;
    i1 %55 = icmp eq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^b, ^while.header1;
  ^entry2:
    i32 %56 = add i32 %26, i32 -48;
    i1 %57 = icmp ult i32 %56, i32 10;
    cbr i1 %57(prob = 0.5), ^2, ^if.else7;
  ^if.else6:
    i1 %58 = icmp eq i32 %6, i32 4;
    cbr i1 %58(prob = 0.5), ^if.then6, ^if.else8;
  ^indirect:
    i32 %59 = load i32* %0;
    ubr ^b5;
  ^while.body1:
    i32 %60 = load i32* %0;
    i32* %61 = getelementptr &(i32* %buf)[i32 %60];
    i32 %62 = load i32* %61;
    i1 %63 = icmp eq i32 %62, i32 34;
    cbr i1 %63(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %64 = load i32* %0;
    i32 %65 = add i32 %64, i32 1;
    store i32* %0 with i32 %65;
    ubr ^while.body3;
  ^while.body2:
    i32 %66 = phi [^if.then5, i32 %45] [^if.then9, i32 %104];
    i1 %67 = icmp sle i32 %len, i32 %66;
    cbr i1 %67(prob = 0.5), ^indirect1, ^b6;
  ^if.else7:
    i1 %68 = icmp eq i32 %26, i32 43;
    cbr i1 %68(prob = 0.5), ^if.then7, ^if.else9;
  ^while.header1:
    i32 %69 = phi [^if.else5, i32 %48] [^b7, i32 %113];
    i1 %70 = icmp sgt i32 %len, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.body4, ^indirect2;
  ^if.else8:
    i1 %71 = icmp eq i32 %6, i32 5;
    cbr i1 %71(prob = 0.5), ^if.then8, ^if.else10;
  ^b4:
    i1 %72 = icmp eq i32 %62, i32 92;
    i32 %73 = zext i1 %72 to i32;
    i32 %74 = add i32 %60, i32 1;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %0 with i32 %75;
    ubr ^while.header;
  ^indirect1:
    i32 %76 = load i32* %0;
    ubr ^if.then10;
  ^b5:
    i32 %77 = phi [^indirect, i32 %59] [^while.body1, i32 %60];
    i1 %78 = icmp sle i32 %len, i32 %77;
    cbr i1 %78(prob = 0.5), ^b, ^if.else11;
  ^if.then7:
    i32 %79 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^indirect2:
    i32 %80 = load i32* %0;
    ubr ^b8;
  ^b6:
    i32 %81 = load i32* %0;
    i32* %82 = getelementptr &(i32* %buf)[i32 %81];
    i32 %83 = load i32* %82;
    i1 %84 = icmp eq i32 %83, i32 32;
    i1 %85 = icmp eq i32 %83, i32 9;
    i1 %86 = or i1 %84, i1 %85;
    i1 %87 = icmp eq i32 %83, i32 10;
    i1 %88 = or i1 %86, i1 %87;
    i1 %89 = icmp eq i32 %83, i32 13;
    i1 %90 = or i1 %88, i1 %89;
    cbr i1 %90(prob = 0.94), ^if.then9, ^if.then10;
  ^while.body3:
    i32 %91 = phi [^if.then6, i32 %65] [^if.then14, i32 %139];
    i1 %92 = icmp sle i32 %len, i32 %91;
    cbr i1 %92(prob = 0.5), ^indirect3, ^b9;
  ^while.body4:
    i32 %93 = load i32* %0;
    i32* %94 = getelementptr &(i32* %buf)[i32 %93];
    i32 %95 = load i32* %94;
    i1 %96 = icmp sge i32 %95, i32 58;
    i1 %97 = icmp sle i32 %95, i32 47;
    i1 %98 = or i1 %96, i1 %97;
    cbr i1 %98(prob = 0.5), ^b8, ^b7;
  ^if.then8:
    i32 %99 = load i32* %0;
    i32 %100 = add i32 %99, i32 3;
    i1 %101 = icmp sle i32 %len, i32 %100;
    cbr i1 %101(prob = 0.5), ^b, ^if.else12;
  ^if.else9:
    i1 %102 = icmp eq i32 %26, i32 45;
    cbr i1 %102(prob = 0.5), ^if.then11, ^if.else13;
  ^if.else10:
    i1 %103 = icmp eq i32 %6, i32 6;
    cbr i1 %103(prob = 0.5), ^if.then12, ^if.else14;
  ^if.then9:
    i32 %104 = add i32 %81, i32 1;
    store i32* %0 with i32 %104;
    ubr ^while.body2;
  ^indirect3:
    i32 %105 = load i32* %0;
    ubr ^if.then15;
  ^if.then10:
    i32 %106 = phi [^indirect1, i32 %76] [^b6, i32 %81];
    i1 %107 = icmp sgt i32 %len, i32 %106;
    cbr i1 %107(prob = 0.5), ^if.then13, ^b11;
  ^if.else11:
    i32 %108 = load i32* %0;
    i32* %109 = getelementptr &(i32* %buf)[i32 %108];
    i32 %110 = load i32* %109;
    i1 %111 = icmp neq i32 %110, i32 34;
    cbr i1 %111(prob = 0.5), ^b, ^b10;
  ^if.then11:
    i32 %112 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b7:
    i32 %113 = add i32 %93, i32 1;
    store i32* %0 with i32 %113;
    ubr ^while.header1;
  ^b8:
    i32 %114 = phi [^indirect2, i32 %80] [^while.body4, i32 %93];
    i1 %115 = icmp sgt i32 %len, i32 %114;
    cbr i1 %115(prob = 0.5), ^if.then17, ^indirect4;
  ^b9:
    i32 %116 = load i32* %0;
    i32* %117 = getelementptr &(i32* %buf)[i32 %116];
    i32 %118 = load i32* %117;
    i1 %119 = icmp eq i32 %118, i32 32;
    i1 %120 = icmp eq i32 %118, i32 9;
    i1 %121 = or i1 %119, i1 %120;
    i1 %122 = icmp eq i32 %118, i32 10;
    i1 %123 = or i1 %121, i1 %122;
    i1 %124 = icmp eq i32 %118, i32 13;
    i1 %125 = or i1 %123, i1 %124;
    cbr i1 %125(prob = 0.94), ^if.then14, ^if.then15;
  ^if.else12:
    i32* %126 = getelementptr &(i32* %buf)[i32 %99];
    i32 %127 = load i32* %126;
    i1 %128 = icmp neq i32 %127, i32 116;
    cbr i1 %128(prob = 0.5), ^b, ^if.else15;
  ^if.then12:
    i32 %129 = load i32* %0;
    i32 %130 = add i32 %129, i32 4;
    i1 %131 = icmp sle i32 %len, i32 %130;
    cbr i1 %131(prob = 0.5), ^b, ^if.else16;
  ^if.else13:
    i1 %132 = icmp eq i32 %26, i32 116;
    cbr i1 %132(prob = 0.5), ^if.then16, ^if.else17;
  ^if.else14:
    i1 %133 = icmp eq i32 %6, i32 7;
    cbr i1 %133(prob = 0.5), ^if.then18, ^b;
  ^b10:
    i32 %134 = phi [^if.else11, i32 %108] [^b26, i32 %320] [^if.else29, i32 %391];
    i32 %135 = add i32 %134, i32 1;
    store i32* %0 with i32 %135;
    ubr ^b;
  ^if.then13:
    i32* %136 = getelementptr &(i32* %buf)[i32 %106];
    i32 %137 = load i32* %136;
    i1 %138 = icmp eq i32 %137, i32 93;
    cbr i1 %138(prob = 0.5), ^if.then19, ^b11;
  ^if.then14:
    i32 %139 = add i32 %116, i32 1;
    store i32* %0 with i32 %139;
    ubr ^while.body3;
  ^indirect4:
    i32 %140 = load i32* %0;
    ubr ^b13;
  ^if.then15:
    i32 %141 = phi [^indirect3, i32 %105] [^b9, i32 %116];
    i1 %142 = icmp sgt i32 %len, i32 %141;
    cbr i1 %142(prob = 0.5), ^if.then20, ^b12;
  ^b11:
    i32 %143 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %144 = icmp eq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^b, ^entry3;
  ^if.then16:
    i32 %145 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then17:
    i32 %146 = load i32* %0;
    i32* %147 = getelementptr &(i32* %buf)[i32 %146];
    i32 %148 = load i32* %147;
    i1 %149 = icmp eq i32 %148, i32 46;
    cbr i1 %149(prob = 0.5), ^if.then21, ^b13;
  ^if.else15:
    i32 %150 = add i32 %99, i32 1;
    i32* %151 = getelementptr &(i32* %buf)[i32 %150];
    i32 %152 = load i32* %151;
    i1 %153 = icmp neq i32 %152, i32 114;
    cbr i1 %153(prob = 0.5), ^b, ^if.else18;
  ^if.else16:
    i32* %154 = getelementptr &(i32* %buf)[i32 %129];
    i32 %155 = load i32* %154;
    i1 %156 = icmp neq i32 %155, i32 102;
    cbr i1 %156(prob = 0.5), ^b, ^if.else19;
  ^if.then18:
    i32 %157 = load i32* %0;
    i32 %158 = add i32 %157, i32 3;
    i1 %159 = icmp sle i32 %len, i32 %158;
    cbr i1 %159(prob = 0.5), ^b, ^if.else20;
  ^if.else17:
    i1 %160 = icmp eq i32 %26, i32 102;
    cbr i1 %160(prob = 0.5), ^if.then22, ^if.else21;
  ^if.then19:
    i32 %161 = add i32 %106, i32 1;
    store i32* %0 with i32 %161;
    ubr ^b;
  ^entry3:
    i32 %162 = load i32* %0;
    ubr ^while.body6;
  ^if.then20:
    i32* %163 = getelementptr &(i32* %buf)[i32 %141];
    i32 %164 = load i32* %163;
    i1 %165 = icmp eq i32 %164, i32 125;
    cbr i1 %165(prob = 0.5), ^if.then23, ^b12;
  ^if.then21:
    i32 %166 = phi [^if.then17, i32 %146] [^while.body5, i32 %167];
    i32 %167 = add i32 %166, i32 1;
    i1 %168 = icmp sgt i32 %len, i32 %167;
    store i32* %0 with i32 %167;
    cbr i1 %168(prob = 0.97), ^while.body5, ^b13;
  ^b12:
    i32 %169 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %170 = icmp eq i32 %169, i32 0;
    cbr i1 %170(prob = 0.5), ^b, ^entry4;
  ^if.then22:
    i32 %171 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b13:
    i32 %172 = phi [^indirect4, i32 %140] [^if.then17, i32 %146] [^if.then21, i32 %167] [^while.body5, i32 %167];
    i1 %173 = icmp sgt i32 %len, i32 %172;
    cbr i1 %173(prob = 0.5), ^if.then24, ^b;
  ^if.else18:
    i32 %174 = add i32 %99, i32 2;
    i32* %175 = getelementptr &(i32* %buf)[i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = icmp neq i32 %176, i32 117;
    cbr i1 %177(prob = 0.5), ^b, ^if.else22;
  ^if.else19:
    i32 %178 = add i32 %129, i32 1;
    i32* %179 = getelementptr &(i32* %buf)[i32 %178];
    i32 %180 = load i32* %179;
    i1 %181 = icmp neq i32 %180, i32 97;
    cbr i1 %181(prob = 0.5), ^b, ^if.else23;
  ^if.else20:
    i32* %182 = getelementptr &(i32* %buf)[i32 %157];
    i32 %183 = load i32* %182;
    i1 %184 = icmp neq i32 %183, i32 110;
    cbr i1 %184(prob = 0.5), ^b, ^if.else24;
  ^if.else21:
    i1 %185 = icmp eq i32 %26, i32 110;
    cbr i1 %185(prob = 0.5), ^if.then25, ^b;
  ^if.then23:
    i32 %186 = add i32 %141, i32 1;
    store i32* %0 with i32 %186;
    ubr ^b;
  ^entry4:
    i32 %187 = load i32* %0;
    ubr ^while.body7;
  ^while.body5:
    i32* %188 = getelementptr &(i32* %buf)[i32 %167];
    i32 %189 = load i32* %188;
    i1 %190 = icmp sge i32 %189, i32 58;
    i1 %191 = icmp sle i32 %189, i32 47;
    i1 %192 = or i1 %190, i1 %191;
    cbr i1 %192(prob = 0.5), ^b13, ^if.then21;
  ^while.body6:
    i32 %193 = phi [^entry3, i32 %162] [^if.then27, i32 %236];
    i1 %194 = icmp sle i32 %len, i32 %193;
    cbr i1 %194(prob = 0.5), ^indirect5, ^b14;
  ^if.then24:
    i32 %195 = load i32* %0;
    i32* %196 = getelementptr &(i32* %buf)[i32 %195];
    i32 %197 = load i32* %196;
    i1 %198 = icmp eq i32 %197, i32 101;
    cbr i1 %198(prob = 0.5), ^if.then26, ^b;
  ^if.then25:
    i32 %199 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else22:
    i32* %200 = getelementptr &(i32* %buf)[i32 %100];
    i32 %201 = load i32* %200;
    i1 %202 = icmp neq i32 %201, i32 101;
    cbr i1 %202(prob = 0.5), ^b, ^b15;
  ^if.else23:
    i32 %203 = add i32 %129, i32 2;
    i32* %204 = getelementptr &(i32* %buf)[i32 %203];
    i32 %205 = load i32* %204;
    i1 %206 = icmp neq i32 %205, i32 108;
    cbr i1 %206(prob = 0.5), ^b, ^if.else25;
  ^if.else24:
    i32 %207 = add i32 %157, i32 1;
    i32* %208 = getelementptr &(i32* %buf)[i32 %207];
    i32 %209 = load i32* %208;
    i1 %210 = icmp neq i32 %209, i32 117;
    cbr i1 %210(prob = 0.5), ^b, ^if.else26;
  ^indirect5:
    i32 %211 = load i32* %0;
    ubr ^b16;
  ^if.then26:
    i32 %212 = add i32 %195, i32 1;
    i1 %213 = icmp sgt i32 %len, i32 %212;
    store i32* %0 with i32 %212;
    cbr i1 %213(prob = 0.5), ^if.then28, ^b17;
  ^while.body7:
    i32 %214 = phi [^entry4, i32 %187] [^if.then30, i32 %268];
    i1 %215 = icmp sle i32 %len, i32 %214;
    cbr i1 %215(prob = 0.5), ^indirect6, ^b18;
  ^b14:
    i32 %216 = load i32* %0;
    i32* %217 = getelementptr &(i32* %buf)[i32 %216];
    i32 %218 = load i32* %217;
    i1 %219 = icmp eq i32 %218, i32 32;
    i1 %220 = icmp eq i32 %218, i32 9;
    i1 %221 = or i1 %219, i1 %220;
    i1 %222 = icmp eq i32 %218, i32 10;
    i1 %223 = or i1 %221, i1 %222;
    i1 %224 = icmp eq i32 %218, i32 13;
    i1 %225 = or i1 %223, i1 %224;
    cbr i1 %225(prob = 0.94), ^if.then27, ^b16;
  ^b15:
    i32 %226 = phi [^if.else22, i32 %99] [^if.else28, i32 %157];
    i32 %227 = add i32 %226, i32 4;
    store i32* %0 with i32 %227;
    ubr ^b;
  ^if.else25:
    i32 %228 = add i32 %129, i32 3;
    i32* %229 = getelementptr &(i32* %buf)[i32 %228];
    i32 %230 = load i32* %229;
    i1 %231 = icmp neq i32 %230, i32 115;
    cbr i1 %231(prob = 0.5), ^b, ^if.else27;
  ^if.else26:
    i32 %232 = add i32 %157, i32 2;
    i32* %233 = getelementptr &(i32* %buf)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = icmp neq i32 %234, i32 108;
    cbr i1 %235(prob = 0.5), ^b, ^if.else28;
  ^if.then27:
    i32 %236 = add i32 %216, i32 1;
    store i32* %0 with i32 %236;
    ubr ^while.body6;
  ^indirect6:
    i32 %237 = load i32* %0;
    ubr ^b19;
  ^b16:
    i32 %238 = phi [^indirect5, i32 %211] [^b14, i32 %216];
    i32* %239 = getelementptr &(i32* %buf)[i32 %238];
    i32 %240 = load i32* %239;
    i1 %241 = icmp eq i32 %240, i32 44;
    cbr i1 %241(prob = 0.97), ^while.body8, ^entry5;
  ^if.then28:
    i32* %242 = getelementptr &(i32* %buf)[i32 %212];
    i32 %243 = load i32* %242;
    i1 %244 = icmp eq i32 %243, i32 43;
    cbr i1 %244(prob = 0.5), ^if.then29, ^indirect7;
  ^b17:
    i32 %245 = phi [^if.then26, i32 %212] [^if.then29, i32 %265] [^indirect7, i32 %267];
    i1 %246 = icmp sgt i32 %len, i32 %245;
    cbr i1 %246(prob = 0.5), ^if.then31, ^indirect8;
  ^b18:
    i32 %247 = load i32* %0;
    i32* %248 = getelementptr &(i32* %buf)[i32 %247];
    i32 %249 = load i32* %248;
    i1 %250 = icmp eq i32 %249, i32 32;
    i1 %251 = icmp eq i32 %249, i32 9;
    i1 %252 = or i1 %250, i1 %251;
    i1 %253 = icmp eq i32 %249, i32 10;
    i1 %254 = or i1 %252, i1 %253;
    i1 %255 = icmp eq i32 %249, i32 13;
    i1 %256 = or i1 %254, i1 %255;
    cbr i1 %256(prob = 0.94), ^if.then30, ^b19;
  ^if.else27:
    i32* %257 = getelementptr &(i32* %buf)[i32 %130];
    i32 %258 = load i32* %257;
    i1 %259 = icmp neq i32 %258, i32 101;
    cbr i1 %259(prob = 0.5), ^b, ^b20;
  ^if.else28:
    i32* %260 = getelementptr &(i32* %buf)[i32 %158];
    i32 %261 = load i32* %260;
    i1 %262 = icmp neq i32 %261, i32 108;
    cbr i1 %262(prob = 0.5), ^b, ^b15;
  ^while.body8:
    i32 %263 = add i32 %238, i32 1;
    store i32* %0 with i32 %263;
    ubr ^while.body9;
  ^if.then29:
    i32 %264 = load i32* %0;
    i32 %265 = add i32 %264, i32 1;
    store i32* %0 with i32 %265;
    ubr ^b17;
  ^entry5:
    i32 %266 = load i32* %0;
    ubr ^while.body10;
  ^indirect7:
    i32 %267 = load i32* %0;
    ubr ^b17;
  ^if.then30:
    i32 %268 = add i32 %247, i32 1;
    store i32* %0 with i32 %268;
    ubr ^while.body7;
  ^indirect8:
    i32 %269 = load i32* %0;
    ubr ^while.header2;
  ^b19:
    i32 %270 = phi [^indirect6, i32 %237] [^b18, i32 %247];
    i1 %271 = icmp sle i32 %len, i32 %270;
    cbr i1 %271(prob = 0.5), ^b, ^b21;
  ^if.then31:
    i32 %272 = load i32* %0;
    i32* %273 = getelementptr &(i32* %buf)[i32 %272];
    i32 %274 = load i32* %273;
    i1 %275 = icmp eq i32 %274, i32 45;
    cbr i1 %275(prob = 0.5), ^if.then32, ^while.header2;
  ^b20:
    i32 %276 = add i32 %129, i32 5;
    store i32* %0 with i32 %276;
    ubr ^b;
  ^if.then32:
    i32 %277 = phi [^if.then31, i32 %272] [^while.body12, i32 %312];
    i32 %278 = add i32 %277, i32 1;
    store i32* %0 with i32 %278;
    ubr ^while.header2;
  ^while.body9:
    i32 %279 = phi [^while.body8, i32 %263] [^if.then33, i32 %318];
    i1 %280 = icmp sle i32 %len, i32 %279;
    cbr i1 %280(prob = 0.5), ^while.body11, ^b23;
  ^while.body10:
    i32 %281 = phi [^entry5, i32 %266] [^if.then34, i32 %319];
    i1 %282 = icmp sle i32 %len, i32 %281;
    cbr i1 %282(prob = 0.5), ^indirect9, ^b24;
  ^b21:
    i32* %283 = getelementptr &(i32* %buf)[i32 %270];
    i32 %284 = load i32* %283;
    i1 %285 = icmp neq i32 %284, i32 58;
    cbr i1 %285(prob = 0.5), ^b, ^b22;
  ^while.header2:
    i32 %286 = phi [^indirect8, i32 %269] [^if.then31, i32 %272] [^if.then32, i32 %278];
    i1 %287 = icmp sgt i32 %len, i32 %286;
    cbr i1 %287(prob = 0.97), ^while.body12, ^b;
  ^indirect9:
    i32 %288 = load i32* %0;
    ubr ^b25;
  ^while.body11:
    i32 %289 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %290 = icmp eq i32 %289, i32 0;
    cbr i1 %290(prob = 0.5), ^b, ^entry3;
  ^b22:
    i32 %291 = add i32 %270, i32 1;
    store i32* %0 with i32 %291;
    ubr ^while.body13;
  ^b23:
    i32 %292 = load i32* %0;
    i32* %293 = getelementptr &(i32* %buf)[i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = icmp eq i32 %294, i32 32;
    i1 %296 = icmp eq i32 %294, i32 9;
    i1 %297 = or i1 %295, i1 %296;
    i1 %298 = icmp eq i32 %294, i32 10;
    i1 %299 = or i1 %297, i1 %298;
    i1 %300 = icmp eq i32 %294, i32 13;
    i1 %301 = or i1 %299, i1 %300;
    cbr i1 %301(prob = 0.94), ^if.then33, ^while.body11;
  ^b24:
    i32 %302 = load i32* %0;
    i32* %303 = getelementptr &(i32* %buf)[i32 %302];
    i32 %304 = load i32* %303;
    i1 %305 = icmp eq i32 %304, i32 32;
    i1 %306 = icmp eq i32 %304, i32 9;
    i1 %307 = or i1 %305, i1 %306;
    i1 %308 = icmp eq i32 %304, i32 10;
    i1 %309 = or i1 %307, i1 %308;
    i1 %310 = icmp eq i32 %304, i32 13;
    i1 %311 = or i1 %309, i1 %310;
    cbr i1 %311(prob = 0.94), ^if.then34, ^b25;
  ^while.body12:
    i32 %312 = load i32* %0;
    i32* %313 = getelementptr &(i32* %buf)[i32 %312];
    i32 %314 = load i32* %313;
    i1 %315 = icmp sge i32 %314, i32 58;
    i1 %316 = icmp sle i32 %314, i32 47;
    i1 %317 = or i1 %315, i1 %316;
    cbr i1 %317(prob = 0.5), ^b, ^if.then32;
  ^if.then33:
    i32 %318 = add i32 %292, i32 1;
    store i32* %0 with i32 %318;
    ubr ^while.body9;
  ^if.then34:
    i32 %319 = add i32 %302, i32 1;
    store i32* %0 with i32 %319;
    ubr ^while.body10;
  ^b25:
    i32 %320 = phi [^indirect9, i32 %288] [^b24, i32 %302];
    i1 %321 = icmp sle i32 %len, i32 %320;
    cbr i1 %321(prob = 0.5), ^b, ^b26;
  ^while.body13:
    i32 %322 = phi [^b22, i32 %291] [^if.then35, i32 %339];
    i1 %323 = icmp sle i32 %len, i32 %322;
    cbr i1 %323(prob = 0.5), ^b27, ^b28;
  ^b26:
    i32* %324 = getelementptr &(i32* %buf)[i32 %320];
    i32 %325 = load i32* %324;
    i1 %326 = icmp neq i32 %325, i32 93;
    cbr i1 %326(prob = 0.5), ^b, ^b10;
  ^b27:
    i32 %327 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %328 = icmp eq i32 %327, i32 0;
    cbr i1 %328(prob = 0.5), ^b, ^entry6;
  ^b28:
    i32 %329 = load i32* %0;
    i32* %330 = getelementptr &(i32* %buf)[i32 %329];
    i32 %331 = load i32* %330;
    i1 %332 = icmp eq i32 %331, i32 32;
    i1 %333 = icmp eq i32 %331, i32 9;
    i1 %334 = or i1 %332, i1 %333;
    i1 %335 = icmp eq i32 %331, i32 10;
    i1 %336 = or i1 %334, i1 %335;
    i1 %337 = icmp eq i32 %331, i32 13;
    i1 %338 = or i1 %336, i1 %337;
    cbr i1 %338(prob = 0.94), ^if.then35, ^b27;
  ^if.then35:
    i32 %339 = add i32 %329, i32 1;
    store i32* %0 with i32 %339;
    ubr ^while.body13;
  ^entry6:
    i32 %340 = load i32* %0;
    ubr ^while.body14;
  ^while.body14:
    i32 %341 = phi [^entry6, i32 %340] [^if.then36, i32 %354];
    i1 %342 = icmp sle i32 %len, i32 %341;
    cbr i1 %342(prob = 0.5), ^indirect10, ^b29;
  ^indirect10:
    i32 %343 = load i32* %0;
    ubr ^b30;
  ^b29:
    i32 %344 = load i32* %0;
    i32* %345 = getelementptr &(i32* %buf)[i32 %344];
    i32 %346 = load i32* %345;
    i1 %347 = icmp eq i32 %346, i32 32;
    i1 %348 = icmp eq i32 %346, i32 9;
    i1 %349 = or i1 %347, i1 %348;
    i1 %350 = icmp eq i32 %346, i32 10;
    i1 %351 = or i1 %349, i1 %350;
    i1 %352 = icmp eq i32 %346, i32 13;
    i1 %353 = or i1 %351, i1 %352;
    cbr i1 %353(prob = 0.94), ^if.then36, ^b30;
  ^if.then36:
    i32 %354 = add i32 %344, i32 1;
    store i32* %0 with i32 %354;
    ubr ^while.body14;
  ^b30:
    i32 %355 = phi [^indirect10, i32 %343] [^b29, i32 %344];
    i32* %356 = getelementptr &(i32* %buf)[i32 %355];
    i32 %357 = load i32* %356;
    i1 %358 = icmp eq i32 %357, i32 44;
    cbr i1 %358(prob = 0.97), ^while.body15, ^entry7;
  ^while.body15:
    i32 %359 = add i32 %355, i32 1;
    store i32* %0 with i32 %359;
    ubr ^while.body16;
  ^entry7:
    i32 %360 = load i32* %0;
    ubr ^while.body17;
  ^while.body16:
    i32 %361 = phi [^while.body15, i32 %359] [^if.then37, i32 %388];
    i1 %362 = icmp sle i32 %len, i32 %361;
    cbr i1 %362(prob = 0.5), ^while.body18, ^b31;
  ^while.body17:
    i32 %363 = phi [^entry7, i32 %360] [^if.then38, i32 %390];
    i1 %364 = icmp sle i32 %len, i32 %363;
    cbr i1 %364(prob = 0.5), ^indirect11, ^b32;
  ^indirect11:
    i32 %365 = load i32* %0;
    ubr ^b33;
  ^while.body18:
    i32 %366 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %367 = icmp eq i32 %366, i32 0;
    cbr i1 %367(prob = 0.5), ^b, ^entry8;
  ^b31:
    i32 %368 = load i32* %0;
    i32* %369 = getelementptr &(i32* %buf)[i32 %368];
    i32 %370 = load i32* %369;
    i1 %371 = icmp eq i32 %370, i32 32;
    i1 %372 = icmp eq i32 %370, i32 9;
    i1 %373 = or i1 %371, i1 %372;
    i1 %374 = icmp eq i32 %370, i32 10;
    i1 %375 = or i1 %373, i1 %374;
    i1 %376 = icmp eq i32 %370, i32 13;
    i1 %377 = or i1 %375, i1 %376;
    cbr i1 %377(prob = 0.94), ^if.then37, ^while.body18;
  ^b32:
    i32 %378 = load i32* %0;
    i32* %379 = getelementptr &(i32* %buf)[i32 %378];
    i32 %380 = load i32* %379;
    i1 %381 = icmp eq i32 %380, i32 32;
    i1 %382 = icmp eq i32 %380, i32 9;
    i1 %383 = or i1 %381, i1 %382;
    i1 %384 = icmp eq i32 %380, i32 10;
    i1 %385 = or i1 %383, i1 %384;
    i1 %386 = icmp eq i32 %380, i32 13;
    i1 %387 = or i1 %385, i1 %386;
    cbr i1 %387(prob = 0.94), ^if.then38, ^b33;
  ^if.then37:
    i32 %388 = add i32 %368, i32 1;
    store i32* %0 with i32 %388;
    ubr ^while.body16;
  ^entry8:
    i32 %389 = load i32* %0;
    ubr ^while.body19;
  ^if.then38:
    i32 %390 = add i32 %378, i32 1;
    store i32* %0 with i32 %390;
    ubr ^while.body17;
  ^b33:
    i32 %391 = phi [^indirect11, i32 %365] [^b32, i32 %378];
    i1 %392 = icmp sle i32 %len, i32 %391;
    cbr i1 %392(prob = 0.5), ^b, ^if.else29;
  ^while.body19:
    i32 %393 = phi [^entry8, i32 %389] [^if.then39, i32 %409];
    i1 %394 = icmp sle i32 %len, i32 %393;
    cbr i1 %394(prob = 0.5), ^indirect12, ^b34;
  ^if.else29:
    i32* %395 = getelementptr &(i32* %buf)[i32 %391];
    i32 %396 = load i32* %395;
    i1 %397 = icmp neq i32 %396, i32 125;
    cbr i1 %397(prob = 0.5), ^b, ^b10;
  ^indirect12:
    i32 %398 = load i32* %0;
    ubr ^b35;
  ^b34:
    i32 %399 = load i32* %0;
    i32* %400 = getelementptr &(i32* %buf)[i32 %399];
    i32 %401 = load i32* %400;
    i1 %402 = icmp eq i32 %401, i32 32;
    i1 %403 = icmp eq i32 %401, i32 9;
    i1 %404 = or i1 %402, i1 %403;
    i1 %405 = icmp eq i32 %401, i32 10;
    i1 %406 = or i1 %404, i1 %405;
    i1 %407 = icmp eq i32 %401, i32 13;
    i1 %408 = or i1 %406, i1 %407;
    cbr i1 %408(prob = 0.94), ^if.then39, ^b35;
  ^if.then39:
    i32 %409 = add i32 %399, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body19;
  ^b35:
    i32 %410 = phi [^indirect12, i32 %398] [^b34, i32 %399];
    i1 %411 = icmp sle i32 %len, i32 %410;
    cbr i1 %411(prob = 0.5), ^b, ^b36;
  ^b36:
    i32* %412 = getelementptr &(i32* %buf)[i32 %410];
    i32 %413 = load i32* %412;
    i1 %414 = icmp neq i32 %413, i32 58;
    cbr i1 %414(prob = 0.5), ^b, ^b37;
  ^b37:
    i32 %415 = add i32 %410, i32 1;
    store i32* %0 with i32 %415;
    ubr ^while.body20;
  ^while.body20:
    i32 %416 = phi [^b37, i32 %415] [^if.then40, i32 %430];
    i1 %417 = icmp sle i32 %len, i32 %416;
    cbr i1 %417(prob = 0.5), ^b38, ^b39;
  ^b38:
    i32 %418 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %419 = icmp eq i32 %418, i32 0;
    cbr i1 %419(prob = 0.5), ^b, ^entry6;
  ^b39:
    i32 %420 = load i32* %0;
    i32* %421 = getelementptr &(i32* %buf)[i32 %420];
    i32 %422 = load i32* %421;
    i1 %423 = icmp eq i32 %422, i32 32;
    i1 %424 = icmp eq i32 %422, i32 9;
    i1 %425 = or i1 %423, i1 %424;
    i1 %426 = icmp eq i32 %422, i32 10;
    i1 %427 = or i1 %425, i1 %426;
    i1 %428 = icmp eq i32 %422, i32 13;
    i1 %429 = or i1 %427, i1 %428;
    cbr i1 %429(prob = 0.94), ^if.then40, ^b38;
  ^if.then40:
    i32 %430 = add i32 %420, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %27];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    i1 %21 = icmp eq i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    i1 %23 = icmp eq i32 %19, i32 10;
    i1 %24 = or i1 %22, i1 %23;
    i1 %25 = icmp eq i32 %19, i32 13;
    i1 %26 = or i1 %24, i1 %25;
    cbr i1 %26(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %27 = add i32 %17, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.body1;
  ^while.body2:
    i32 %28 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %29 = icmp sle i32 %4, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
  ^b3:
    i1 %30 = icmp neq i32 %15, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
  ^b4:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 32;
    i1 %35 = icmp eq i32 %33, i32 9;
    i1 %36 = or i1 %34, i1 %35;
    i1 %37 = icmp eq i32 %33, i32 10;
    i1 %38 = or i1 %36, i1 %37;
    i1 %39 = icmp eq i32 %33, i32 13;
    i1 %40 = or i1 %38, i1 %39;
    cbr i1 %40(prob = 0.94), ^if.then2, ^b3;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %41 = add i32 %31, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b5:
    i32 %42 = phi [^if.then1, i32 0] [^if.else, i32 1];
    ret i32 %42;
}
