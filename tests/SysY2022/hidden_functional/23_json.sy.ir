internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32* %len1 = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %len1 with i32 %len;
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^if.then, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %type] [^if.then11, i32 %3] [^if.then8, i32 %3] [^if.then3, i32 %3] [^if.then1, i32 %3];
    i32* %4 = phi [^entry, i32* %buf] [^if.then11, i32* %4] [^if.then8, i32* %4] [^if.then3, i32* %4] [^if.then1, i32* %4];
    i32 %5 = phi [^entry, i32 %len] [^if.then11, i32 %5] [^if.then8, i32 %5] [^if.then3, i32 %5] [^if.then1, i32 %5];
    i32 %6 = phi [^entry, i32 %len] [^if.then11, i32 %6] [^if.then8, i32 %6] [^if.then3, i32 %6] [^if.then1, i32 %6];
    i32* %7 = phi [^entry, i32* %buf] [^if.then11, i32* %7] [^if.then8, i32* %7] [^if.then3, i32* %7] [^if.then1, i32* %7];
    i32 %8 = phi [^entry, i32 %1] [^if.then8, i32 %49] [^if.then11, i32 %70] [^if.then3, i32 %27] [^if.then1, i32 %16];
    i1 %9 = scmp ge i32 %8, i32 %6;
    cbr i1 %9(prob = 0.5), ^b, ^b1;
^if.then:
    ret i32 0;
^b:
    i1 %10 = scmp eq i32 %3, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then2, ^if.else;
^b1:
    i32 %11 = load i32* %0;
    i32* %12 = getelementptr &(i32* %7)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp eq i32 %13, i32 32;
    cbr i1 %14(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %15 = load i32* %0;
    i32 %16 = add i32 %15, i32 1;
    store i32* %0 with i32 %16;
    ubr ^while.body;
^if.then2:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %4)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 123;
    cbr i1 %20(prob = 0.5), ^if.then5, ^if.else2;
^if.else:
    i1 %21 = scmp eq i32 %3, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i32 %22 = load i32* %0;
    i32* %23 = getelementptr &(i32* %7)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 9;
    cbr i1 %25(prob = 0.5), ^if.then3, ^if.else4;
^if.then3:
    i32 %26 = load i32* %0;
    i32 %27 = add i32 %26, i32 1;
    store i32* %0 with i32 %27;
    ubr ^while.body;
^if.else2:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %4)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 91;
    cbr i1 %31(prob = 0.5), ^if.then9, ^if.else5;
^if.then4:
    i32 %32 = load i32* %0;
    i32* %33 = getelementptr &(i32* %4)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %34, i32 43;
    cbr i1 %35(prob = 0.5), ^if.then6, ^if.else6;
^if.else3:
    i1 %36 = scmp eq i32 %3, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then7, ^if.else7;
^if.else4:
    i32 %37 = load i32* %0;
    i32* %38 = getelementptr &(i32* %7)[i32 %37];
    i32 %39 = load i32* %38;
    i1 %40 = scmp eq i32 %39, i32 10;
    cbr i1 %40(prob = 0.5), ^if.then8, ^if.else8;
^if.then5:
    i32 %41 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %4, i32 %5, i32* %0);
    ret i32 %41;
^if.then6:
    i32 %42 = load i32* %0;
    i32 %43 = add i32 %42, i32 1;
    store i32* %0 with i32 %43;
    ubr ^b2;
^if.then7:
    i32* %44 = phi [^b4, i32* %71] [^if.else3, i32* %4];
    i32 %45 = phi [^b4, i32 %72] [^if.else3, i32 %5];
    i32 %46 = load i32* %0;
    i32 %47 = add i32 %46, i32 1;
    store i32* %0 with i32 %47;
    ubr ^while.header;
^if.then8:
    i32 %48 = load i32* %0;
    i32 %49 = add i32 %48, i32 1;
    store i32* %0 with i32 %49;
    ubr ^while.body;
^if.else5:
    i32 %50 = load i32* %0;
    i32* %51 = getelementptr &(i32* %4)[i32 %50];
    i32 %52 = load i32* %51;
    i1 %53 = scmp eq i32 %52, i32 34;
    cbr i1 %53(prob = 0.5), ^if.then12, ^if.else9;
^if.else6:
    i32 %54 = load i32* %0;
    i32* %55 = getelementptr &(i32* %4)[i32 %54];
    i32 %56 = load i32* %55;
    i1 %57 = scmp eq i32 %56, i32 45;
    cbr i1 %57(prob = 0.5), ^if.then6, ^indirect;
^if.else7:
    i1 %58 = scmp eq i32 %3, i32 3;
    cbr i1 %58(prob = 0.5), ^if.then10, ^if.else10;
^if.else8:
    i32 %59 = load i32* %0;
    i32* %60 = getelementptr &(i32* %7)[i32 %59];
    i32 %61 = load i32* %60;
    i1 %62 = scmp eq i32 %61, i32 13;
    cbr i1 %62(prob = 0.5), ^if.then11, ^b;
^if.then9:
    i32 %63 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %4, i32 %5, i32* %0);
    ret i32 %63;
^b2:
    i32 %64 = phi [^indirect, i32 %66] [^if.then6, i32 %43];
    i1 %65 = scmp ge i32 %64, i32 %5;
    cbr i1 %65(prob = 0.5), ^if.then, ^if.else11;
^indirect:
    i32 %66 = load i32* %0;
    ubr ^b2;
^if.then10:
    i32 %67 = load i32* %0;
    i32 %68 = add i32 %67, i32 1;
    store i32* %0 with i32 %68;
    ubr ^while.body2;
^if.then11:
    i32 %69 = load i32* %0;
    i32 %70 = add i32 %69, i32 1;
    store i32* %0 with i32 %70;
    ubr ^while.body;
^while.header:
    i32* %71 = phi [^if.then18, i32* %71] [^if.then7, i32* %44];
    i32 %72 = phi [^if.then18, i32 %72] [^if.then7, i32 %45];
    i32 %73 = phi [^if.then18, i32 %139] [^if.then7, i32 %47];
    i1 %74 = scmp lt i32 %73, i32 %72;
    cbr i1 %74(prob = 0.97), ^while.body1, ^b3;
^if.else9:
    i32 %75 = load i32* %0;
    i32* %76 = getelementptr &(i32* %4)[i32 %75];
    i32 %77 = load i32* %76;
    i1 %78 = scmp gt i32 %77, i32 47;
    cbr i1 %78(prob = 0.5), ^if.then14, ^if.else12;
^if.else10:
    i1 %79 = scmp eq i32 %3, i32 4;
    cbr i1 %79(prob = 0.5), ^if.then13, ^if.else13;
^if.then12:
    i32 %80 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %4, i32 %5, i32* %0);
    ret i32 %80;
^if.else11:
    i32 %81 = load i32* %0;
    i32* %82 = getelementptr &(i32* %4)[i32 %81];
    i32 %83 = load i32* %82;
    i1 %84 = scmp gt i32 %83, i32 47;
    cbr i1 %84(prob = 0.5), ^if.then15, ^if.else15;
^while.body1:
    i32 %85 = load i32* %0;
    i32* %86 = getelementptr &(i32* %71)[i32 %85];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 34;
    cbr i1 %88(prob = 0.5), ^b3, ^b4;
^if.then13:
    i32 %89 = load i32* %0;
    i32 %90 = add i32 %89, i32 1;
    store i32* %0 with i32 %90;
    ubr ^while.body3;
^b3:
    i32 %91 = load i32* %0;
    i1 %92 = scmp ge i32 %91, i32 %72;
    cbr i1 %92(prob = 0.5), ^if.then, ^if.else16;
^if.then14:
    i1 %93 = scmp lt i32 %77, i32 58;
    cbr i1 %93(prob = 0.5), ^if.else12, ^if.else14;
^while.body2:
    i32* %94 = phi [^if.then27, i32* %94] [^if.then23, i32* %94] [^if.then31, i32* %94] [^if.then19, i32* %94] [^if.then10, i32* %4];
    i32 %95 = phi [^if.then27, i32 %95] [^if.then23, i32 %95] [^if.then31, i32 %95] [^if.then19, i32 %95] [^if.then10, i32 %5];
    i32 %96 = phi [^if.then27, i32 %96] [^if.then23, i32 %96] [^if.then31, i32 %96] [^if.then19, i32 %96] [^if.then10, i32 %5];
    i32* %97 = phi [^if.then27, i32* %97] [^if.then23, i32* %97] [^if.then31, i32* %97] [^if.then19, i32* %97] [^if.then10, i32* %4];
    i32 %98 = phi [^if.then10, i32 %68] [^if.then27, i32 %225] [^if.then23, i32 %179] [^if.then31, i32 %273] [^if.then19, i32 %141];
    i1 %99 = scmp ge i32 %98, i32 %96;
    cbr i1 %99(prob = 0.5), ^if.then16, ^b5;
^if.else12:
    i32 %100 = phi [^if.else9, i32 0] [^if.then14, i32 1] [^if.else14, i32 0];
    i1 %101 = scmp eq i32 %100, i32 1;
    cbr i1 %101(prob = 0.5), ^indirect1, ^if.else17;
^if.else13:
    i1 %102 = scmp eq i32 %3, i32 5;
    cbr i1 %102(prob = 0.5), ^if.then17, ^if.else18;
^if.else14:
    ubr ^if.else12;
^if.then15:
    i1 %103 = scmp lt i32 %83, i32 58;
    cbr i1 %103(prob = 0.5), ^if.else15, ^if.else19;
^b4:
    i32 %104 = load i32* %0;
    i32* %105 = getelementptr &(i32* %71)[i32 %104];
    i32 %106 = load i32* %105;
    i1 %107 = scmp eq i32 %106, i32 92;
    cbr i1 %107(prob = 0.5), ^if.then18, ^if.then7;
^if.then16:
    i32 %108 = load i32* %0;
    i1 %109 = scmp lt i32 %108, i32 %95;
    cbr i1 %109(prob = 0.5), ^if.then20, ^b6;
^if.else15:
    i32 %110 = phi [^if.else11, i32 0] [^if.then15, i32 1] [^if.else19, i32 0];
    i1 %111 = scmp eq i32 %110, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then, ^indirect2;
^if.else16:
    i32* %112 = getelementptr &(i32* %71)[i32 %91];
    i32 %113 = load i32* %112;
    i1 %114 = scmp neq i32 %113, i32 34;
    cbr i1 %114(prob = 0.5), ^if.then, ^b8;
^b5:
    i32 %115 = load i32* %0;
    i32* %116 = getelementptr &(i32* %97)[i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = scmp eq i32 %117, i32 32;
    cbr i1 %118(prob = 0.5), ^if.then19, ^if.else20;
^while.body3:
    i32* %119 = phi [^if.then32, i32* %119] [^if.then28, i32* %119] [^if.then37, i32* %119] [^if.then24, i32* %119] [^if.then13, i32* %4];
    i32 %120 = phi [^if.then32, i32 %120] [^if.then28, i32 %120] [^if.then37, i32 %120] [^if.then24, i32 %120] [^if.then13, i32 %5];
    i32 %121 = phi [^if.then32, i32 %121] [^if.then28, i32 %121] [^if.then37, i32 %121] [^if.then24, i32 %121] [^if.then13, i32 %5];
    i32* %122 = phi [^if.then32, i32* %122] [^if.then28, i32* %122] [^if.then37, i32* %122] [^if.then24, i32* %122] [^if.then13, i32* %4];
    i32 %123 = phi [^if.then13, i32 %90] [^if.then32, i32 %275] [^if.then37, i32 %340] [^if.then24, i32 %181] [^if.then28, i32 %227];
    i1 %124 = scmp ge i32 %123, i32 %121;
    cbr i1 %124(prob = 0.5), ^if.then21, ^b7;
^if.then17:
    i32* %125 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %125 with i32 116;
    i32* %126 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %126 with i32 114;
    i32* %127 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %127 with i32 117;
    i32* %128 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %128 with i32 101;
    i32 %129 = load i32* %0;
    i32 %130 = add i32 %129, i32 3;
    i1 %131 = scmp ge i32 %130, i32 %5;
    cbr i1 %131(prob = 0.5), ^if.then, ^if.else21;
^if.else17:
    i32 %132 = load i32* %0;
    i32* %133 = getelementptr &(i32* %4)[i32 %132];
    i32 %134 = load i32* %133;
    i1 %135 = scmp eq i32 %134, i32 43;
    cbr i1 %135(prob = 0.5), ^indirect1, ^if.else22;
^if.else18:
    i1 %136 = scmp eq i32 %3, i32 6;
    cbr i1 %136(prob = 0.5), ^if.then22, ^if.else23;
^indirect1:
    i32 %137 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %4, i32 %5, i32* %0);
    ret i32 %137;
^if.else19:
    ubr ^if.else15;
^if.then18:
    i32 %138 = load i32* %0;
    i32 %139 = add i32 %138, i32 2;
    store i32* %0 with i32 %139;
    ubr ^while.header;
^if.then19:
    i32 %140 = load i32* %0;
    i32 %141 = add i32 %140, i32 1;
    store i32* %0 with i32 %141;
    ubr ^while.body2;
^indirect2:
    i32 %142 = load i32* %0;
    ubr ^while.header1;
^if.then20:
    i32* %143 = getelementptr &(i32* %94)[i32 %108];
    i32 %144 = load i32* %143;
    i1 %145 = scmp eq i32 %144, i32 93;
    cbr i1 %145(prob = 0.5), ^b8, ^b6;
^if.then21:
    i32 %146 = load i32* %0;
    i1 %147 = scmp lt i32 %146, i32 %120;
    cbr i1 %147(prob = 0.5), ^if.then25, ^b10;
^b6:
    i32 %148 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %94, i32 %95, i32* %0);
    i32* %149 = load i32** %buf1;
    i32 %150 = load i32* %len1;
    i1 %151 = scmp eq i32 %148, i32 0;
    cbr i1 %151(prob = 0.5), ^if.then, ^b9;
^if.else20:
    i32 %152 = load i32* %0;
    i32* %153 = getelementptr &(i32* %97)[i32 %152];
    i32 %154 = load i32* %153;
    i1 %155 = scmp eq i32 %154, i32 9;
    cbr i1 %155(prob = 0.5), ^if.then23, ^if.else24;
^b7:
    i32 %156 = load i32* %0;
    i32* %157 = getelementptr &(i32* %122)[i32 %156];
    i32 %158 = load i32* %157;
    i1 %159 = scmp eq i32 %158, i32 32;
    cbr i1 %159(prob = 0.5), ^if.then24, ^if.else25;
^if.else21:
    i32* %160 = getelementptr &(i32* %4)[i32 %129];
    i32 %161 = load i32* %160;
    i1 %162 = scmp neq i32 %161, i32 116;
    cbr i1 %162(prob = 0.5), ^if.then, ^if.else26;
^if.then22:
    i32* %163 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %163 with i32 102;
    i32* %164 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %164 with i32 97;
    i32* %165 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %165 with i32 108;
    i32* %166 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %166 with i32 115;
    i32* %167 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %167 with i32 101;
    i32 %168 = load i32* %0;
    i32 %169 = add i32 %168, i32 4;
    i1 %170 = scmp ge i32 %169, i32 %5;
    cbr i1 %170(prob = 0.5), ^if.then, ^if.else27;
^if.else22:
    i32 %171 = load i32* %0;
    i32* %172 = getelementptr &(i32* %4)[i32 %171];
    i32 %173 = load i32* %172;
    i1 %174 = scmp eq i32 %173, i32 45;
    cbr i1 %174(prob = 0.5), ^indirect1, ^if.else28;
^if.else23:
    i1 %175 = scmp eq i32 %3, i32 7;
    cbr i1 %175(prob = 0.5), ^if.then26, ^if.then;
^b8:
    i32 %176 = load i32* %0;
    i32 %177 = add i32 %176, i32 1;
    store i32* %0 with i32 %177;
    ret i32 1;
^if.then23:
    i32 %178 = load i32* %0;
    i32 %179 = add i32 %178, i32 1;
    store i32* %0 with i32 %179;
    ubr ^while.body2;
^if.then24:
    i32 %180 = load i32* %0;
    i32 %181 = add i32 %180, i32 1;
    store i32* %0 with i32 %181;
    ubr ^while.body3;
^b9:
    i32* %182 = phi [^while.body12, i32* %417] [^b6, i32* %149];
    i32 %183 = phi [^while.body12, i32 %418] [^b6, i32 %150];
    i32 %184 = load i32* %0;
    ubr ^while.body5;
^if.then25:
    i32* %185 = getelementptr &(i32* %119)[i32 %146];
    i32 %186 = load i32* %185;
    i1 %187 = scmp eq i32 %186, i32 125;
    cbr i1 %187(prob = 0.5), ^b8, ^b10;
^while.header1:
    i32* %188 = phi [^b16, i32* %188] [^indirect2, i32* %4];
    i32 %189 = phi [^b16, i32 %189] [^indirect2, i32 %5];
    i32 %190 = phi [^b16, i32 %330] [^indirect2, i32 %142];
    i1 %191 = scmp lt i32 %190, i32 %189;
    cbr i1 %191(prob = 0.97), ^while.body4, ^b12;
^b10:
    i32 %192 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %119, i32 %120, i32* %0);
    i32* %193 = load i32** %buf1;
    i32 %194 = load i32* %len1;
    i1 %195 = scmp eq i32 %192, i32 0;
    cbr i1 %195(prob = 0.5), ^if.then, ^b11;
^if.else24:
    i32 %196 = load i32* %0;
    i32* %197 = getelementptr &(i32* %97)[i32 %196];
    i32 %198 = load i32* %197;
    i1 %199 = scmp eq i32 %198, i32 10;
    cbr i1 %199(prob = 0.5), ^if.then27, ^if.else29;
^if.else25:
    i32 %200 = load i32* %0;
    i32* %201 = getelementptr &(i32* %122)[i32 %200];
    i32 %202 = load i32* %201;
    i1 %203 = scmp eq i32 %202, i32 9;
    cbr i1 %203(prob = 0.5), ^if.then28, ^if.else30;
^if.else26:
    i32 %204 = load i32* %0;
    i32 %205 = add i32 %204, i32 1;
    i32* %206 = getelementptr &(i32* %4)[i32 %205];
    i32 %207 = load i32* %206;
    i32 %208 = load i32* %126;
    i1 %209 = scmp neq i32 %207, i32 %208;
    cbr i1 %209(prob = 0.5), ^if.then, ^if.else31;
^if.else27:
    i32* %210 = getelementptr &(i32* %4)[i32 %168];
    i32 %211 = load i32* %210;
    i1 %212 = scmp neq i32 %211, i32 102;
    cbr i1 %212(prob = 0.5), ^if.then, ^if.else32;
^if.then26:
    i32* %213 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %213 with i32 110;
    i32* %214 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %214 with i32 117;
    i32* %215 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %215 with i32 108;
    i32* %216 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %216 with i32 108;
    i32 %217 = load i32* %0;
    i32 %218 = add i32 %217, i32 3;
    i1 %219 = scmp ge i32 %218, i32 %5;
    cbr i1 %219(prob = 0.5), ^if.then, ^if.else33;
^if.else28:
    i32 %220 = load i32* %0;
    i32* %221 = getelementptr &(i32* %4)[i32 %220];
    i32 %222 = load i32* %221;
    i1 %223 = scmp eq i32 %222, i32 116;
    cbr i1 %223(prob = 0.5), ^if.then29, ^if.else34;
^if.then27:
    i32 %224 = load i32* %0;
    i32 %225 = add i32 %224, i32 1;
    store i32* %0 with i32 %225;
    ubr ^while.body2;
^if.then28:
    i32 %226 = load i32* %0;
    i32 %227 = add i32 %226, i32 1;
    store i32* %0 with i32 %227;
    ubr ^while.body3;
^while.body4:
    i32 %228 = load i32* %0;
    i32* %229 = getelementptr &(i32* %188)[i32 %228];
    i32 %230 = load i32* %229;
    i1 %231 = scmp gt i32 %230, i32 47;
    cbr i1 %231(prob = 0.5), ^if.then30, ^while.body6;
^b11:
    i32* %232 = phi [^while.body21, i32* %608] [^b10, i32* %193];
    i32 %233 = phi [^while.body21, i32 %609] [^b10, i32 %194];
    i32 %234 = load i32* %0;
    ubr ^while.body7;
^b12:
    i32 %235 = load i32* %0;
    i1 %236 = scmp lt i32 %235, i32 %189;
    cbr i1 %236(prob = 0.5), ^if.then33, ^b14;
^while.body5:
    i32* %237 = phi [^if.then51, i32* %237] [^if.then45, i32* %237] [^if.then40, i32* %237] [^if.then35, i32* %237] [^b9, i32* %182];
    i32 %238 = phi [^if.then51, i32 %238] [^if.then45, i32 %238] [^if.then40, i32 %238] [^if.then35, i32 %238] [^b9, i32 %183];
    i32 %239 = phi [^if.then51, i32 %239] [^if.then45, i32 %239] [^if.then40, i32 %239] [^if.then35, i32 %239] [^b9, i32 %183];
    i32* %240 = phi [^if.then51, i32* %240] [^if.then45, i32* %240] [^if.then40, i32* %240] [^if.then35, i32* %240] [^b9, i32* %182];
    i32 %241 = phi [^b9, i32 %184] [^if.then45, i32 %426] [^if.then35, i32 %332] [^if.then40, i32 %374] [^if.then51, i32 %467];
    i1 %242 = scmp ge i32 %241, i32 %239;
    cbr i1 %242(prob = 0.5), ^b13, ^b15;
^if.else29:
    i32 %243 = load i32* %0;
    i32* %244 = getelementptr &(i32* %97)[i32 %243];
    i32 %245 = load i32* %244;
    i1 %246 = scmp eq i32 %245, i32 13;
    cbr i1 %246(prob = 0.5), ^if.then31, ^if.then16;
^if.else30:
    i32 %247 = load i32* %0;
    i32* %248 = getelementptr &(i32* %122)[i32 %247];
    i32 %249 = load i32* %248;
    i1 %250 = scmp eq i32 %249, i32 10;
    cbr i1 %250(prob = 0.5), ^if.then32, ^if.else35;
^if.else31:
    i32 %251 = load i32* %0;
    i32 %252 = add i32 %251, i32 2;
    i32* %253 = getelementptr &(i32* %4)[i32 %252];
    i32 %254 = load i32* %253;
    i32 %255 = load i32* %127;
    i1 %256 = scmp neq i32 %254, i32 %255;
    cbr i1 %256(prob = 0.5), ^if.then, ^if.else36;
^if.else32:
    i32 %257 = load i32* %0;
    i32 %258 = add i32 %257, i32 1;
    i32* %259 = getelementptr &(i32* %4)[i32 %258];
    i32 %260 = load i32* %259;
    i32 %261 = load i32* %164;
    i1 %262 = scmp neq i32 %260, i32 %261;
    cbr i1 %262(prob = 0.5), ^if.then, ^if.else37;
^if.else33:
    i32* %263 = getelementptr &(i32* %4)[i32 %217];
    i32 %264 = load i32* %263;
    i1 %265 = scmp neq i32 %264, i32 110;
    cbr i1 %265(prob = 0.5), ^if.then, ^if.else38;
^if.else34:
    i32 %266 = load i32* %0;
    i32* %267 = getelementptr &(i32* %4)[i32 %266];
    i32 %268 = load i32* %267;
    i1 %269 = scmp eq i32 %268, i32 102;
    cbr i1 %269(prob = 0.5), ^if.then34, ^if.else39;
^if.then29:
    i32 %270 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %4, i32 %5, i32* %0);
    ret i32 %270;
^if.then30:
    i1 %271 = scmp lt i32 %230, i32 58;
    cbr i1 %271(prob = 0.5), ^while.body6, ^if.else40;
^if.then31:
    i32 %272 = load i32* %0;
    i32 %273 = add i32 %272, i32 1;
    store i32* %0 with i32 %273;
    ubr ^while.body2;
^if.then32:
    i32 %274 = load i32* %0;
    i32 %275 = add i32 %274, i32 1;
    store i32* %0 with i32 %275;
    ubr ^while.body3;
^if.then33:
    i32* %276 = getelementptr &(i32* %188)[i32 %235];
    i32 %277 = load i32* %276;
    i1 %278 = scmp eq i32 %277, i32 46;
    cbr i1 %278(prob = 0.5), ^if.then36, ^indirect3;
^while.body6:
    i32 %279 = phi [^while.body4, i32 0] [^if.then30, i32 1] [^if.else40, i32 0];
    i1 %280 = scmp neq i32 %279, i32 1;
    cbr i1 %280(prob = 0.5), ^b12, ^b16;
^b13:
    i32 %281 = load i32* %0;
    i32* %282 = getelementptr &(i32* %237)[i32 %281];
    i32 %283 = load i32* %282;
    i1 %284 = scmp eq i32 %283, i32 44;
    cbr i1 %284(prob = 0.97), ^while.body8, ^b17;
^b14:
    i32* %285 = phi [^b12, i32* %188] [^indirect4, i32* %334] [^if.then36, i32* %334] [^indirect3, i32* %188];
    i32 %286 = phi [^b12, i32 %189] [^indirect4, i32 %335] [^if.then36, i32 %335] [^indirect3, i32 %189];
    i32 %287 = phi [^b12, i32 %235] [^indirect4, i32 %453] [^if.then36, i32 %337] [^indirect3, i32 %328];
    i1 %288 = scmp lt i32 %287, i32 %286;
    cbr i1 %288(prob = 0.5), ^if.then38, ^b20;
^b15:
    i32 %289 = load i32* %0;
    i32* %290 = getelementptr &(i32* %240)[i32 %289];
    i32 %291 = load i32* %290;
    i1 %292 = scmp eq i32 %291, i32 32;
    cbr i1 %292(prob = 0.5), ^if.then35, ^if.else41;
^while.body7:
    i32* %293 = phi [^if.then52, i32* %293] [^if.then46, i32* %293] [^if.then56, i32* %293] [^if.then41, i32* %293] [^b11, i32* %232];
    i32 %294 = phi [^if.then52, i32 %294] [^if.then46, i32 %294] [^if.then56, i32 %294] [^if.then41, i32 %294] [^b11, i32 %233];
    i32 %295 = phi [^if.then52, i32 %295] [^if.then46, i32 %295] [^if.then56, i32 %295] [^if.then41, i32 %295] [^b11, i32 %233];
    i32* %296 = phi [^if.then52, i32* %296] [^if.then46, i32* %296] [^if.then56, i32* %296] [^if.then41, i32* %296] [^b11, i32* %232];
    i32 %297 = phi [^b11, i32 %234] [^if.then52, i32 %469] [^if.then56, i32 %505] [^if.then41, i32 %376] [^if.then46, i32 %428];
    i1 %298 = scmp ge i32 %297, i32 %295;
    cbr i1 %298(prob = 0.5), ^b18, ^b19;
^if.else35:
    i32 %299 = load i32* %0;
    i32* %300 = getelementptr &(i32* %122)[i32 %299];
    i32 %301 = load i32* %300;
    i1 %302 = scmp eq i32 %301, i32 13;
    cbr i1 %302(prob = 0.5), ^if.then37, ^if.then21;
^if.else36:
    i32 %303 = load i32* %0;
    i32 %304 = add i32 %303, i32 3;
    i32* %305 = getelementptr &(i32* %4)[i32 %304];
    i32 %306 = load i32* %305;
    i32 %307 = load i32* %128;
    i1 %308 = scmp neq i32 %306, i32 %307;
    cbr i1 %308(prob = 0.5), ^if.then, ^b21;
^if.else37:
    i32 %309 = load i32* %0;
    i32 %310 = add i32 %309, i32 2;
    i32* %311 = getelementptr &(i32* %4)[i32 %310];
    i32 %312 = load i32* %311;
    i32 %313 = load i32* %165;
    i1 %314 = scmp neq i32 %312, i32 %313;
    cbr i1 %314(prob = 0.5), ^if.then, ^if.else42;
^if.else38:
    i32 %315 = load i32* %0;
    i32 %316 = add i32 %315, i32 1;
    i32* %317 = getelementptr &(i32* %4)[i32 %316];
    i32 %318 = load i32* %317;
    i32 %319 = load i32* %214;
    i1 %320 = scmp neq i32 %318, i32 %319;
    cbr i1 %320(prob = 0.5), ^if.then, ^if.else43;
^if.else39:
    i32 %321 = load i32* %0;
    i32* %322 = getelementptr &(i32* %4)[i32 %321];
    i32 %323 = load i32* %322;
    i1 %324 = scmp eq i32 %323, i32 110;
    cbr i1 %324(prob = 0.5), ^if.then39, ^if.then;
^if.then34:
    i32 %325 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %4, i32 %5, i32* %0);
    ret i32 %325;
^if.else40:
    ubr ^while.body6;
^while.body8:
    i32 %326 = load i32* %0;
    i32 %327 = add i32 %326, i32 1;
    store i32* %0 with i32 %327;
    ubr ^while.body10;
^indirect3:
    i32 %328 = load i32* %0;
    ubr ^b14;
^b16:
    i32 %329 = load i32* %0;
    i32 %330 = add i32 %329, i32 1;
    store i32* %0 with i32 %330;
    ubr ^while.header1;
^if.then35:
    i32 %331 = load i32* %0;
    i32 %332 = add i32 %331, i32 1;
    store i32* %0 with i32 %332;
    ubr ^while.body5;
^b17:
    i32 %333 = load i32* %0;
    ubr ^while.body11;
^if.then36:
    i32* %334 = phi [^while.body13, i32* %334] [^if.then33, i32* %188];
    i32 %335 = phi [^while.body13, i32 %335] [^if.then33, i32 %189];
    i32 %336 = load i32* %0;
    i32 %337 = add i32 %336, i32 1;
    store i32* %0 with i32 %337;
    i1 %338 = scmp lt i32 %337, i32 %335;
    cbr i1 %338(prob = 0.97), ^while.body9, ^b14;
^if.then37:
    i32 %339 = load i32* %0;
    i32 %340 = add i32 %339, i32 1;
    store i32* %0 with i32 %340;
    ubr ^while.body3;
^if.then38:
    i32 %341 = load i32* %0;
    i32* %342 = getelementptr &(i32* %285)[i32 %341];
    i32 %343 = load i32* %342;
    i1 %344 = scmp eq i32 %343, i32 101;
    cbr i1 %344(prob = 0.5), ^if.then42, ^b20;
^b18:
    i32 %345 = load i32* %0;
    i1 %346 = scmp ge i32 %345, i32 %294;
    cbr i1 %346(prob = 0.5), ^if.then, ^b22;
^if.else41:
    i32 %347 = load i32* %0;
    i32* %348 = getelementptr &(i32* %240)[i32 %347];
    i32 %349 = load i32* %348;
    i1 %350 = scmp eq i32 %349, i32 9;
    cbr i1 %350(prob = 0.5), ^if.then40, ^if.else44;
^b19:
    i32 %351 = load i32* %0;
    i32* %352 = getelementptr &(i32* %296)[i32 %351];
    i32 %353 = load i32* %352;
    i1 %354 = scmp eq i32 %353, i32 32;
    cbr i1 %354(prob = 0.5), ^if.then41, ^if.else45;
^if.else42:
    i32 %355 = load i32* %0;
    i32 %356 = add i32 %355, i32 3;
    i32* %357 = getelementptr &(i32* %4)[i32 %356];
    i32 %358 = load i32* %357;
    i32 %359 = load i32* %166;
    i1 %360 = scmp neq i32 %358, i32 %359;
    cbr i1 %360(prob = 0.5), ^if.then, ^if.else46;
^if.else43:
    i32 %361 = load i32* %0;
    i32 %362 = add i32 %361, i32 2;
    i32* %363 = getelementptr &(i32* %4)[i32 %362];
    i32 %364 = load i32* %363;
    i32 %365 = load i32* %215;
    i1 %366 = scmp neq i32 %364, i32 %365;
    cbr i1 %366(prob = 0.5), ^if.then, ^if.else47;
^b20:
    ret i32 1;
^if.then39:
    i32 %367 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %4, i32 %5, i32* %0);
    ret i32 %367;
^b21:
    i32 %368 = load i32* %0;
    i32 %369 = add i32 %368, i32 4;
    store i32* %0 with i32 %369;
    ret i32 1;
^while.body9:
    i32* %370 = getelementptr &(i32* %334)[i32 %337];
    i32 %371 = load i32* %370;
    i1 %372 = scmp gt i32 %371, i32 47;
    cbr i1 %372(prob = 0.5), ^if.then43, ^while.body13;
^if.then40:
    i32 %373 = load i32* %0;
    i32 %374 = add i32 %373, i32 1;
    store i32* %0 with i32 %374;
    ubr ^while.body5;
^if.then41:
    i32 %375 = load i32* %0;
    i32 %376 = add i32 %375, i32 1;
    store i32* %0 with i32 %376;
    ubr ^while.body7;
^while.body10:
    i32* %377 = phi [^if.then57, i32* %377] [^if.then54, i32* %377] [^if.then60, i32* %377] [^if.then48, i32* %377] [^while.body8, i32* %237];
    i32 %378 = phi [^if.then57, i32 %378] [^if.then54, i32 %378] [^if.then60, i32 %378] [^if.then48, i32 %378] [^while.body8, i32 %238];
    i32 %379 = phi [^if.then57, i32 %379] [^if.then54, i32 %379] [^if.then60, i32 %379] [^if.then48, i32 %379] [^while.body8, i32 %238];
    i32* %380 = phi [^if.then57, i32* %380] [^if.then54, i32* %380] [^if.then60, i32* %380] [^if.then48, i32* %380] [^while.body8, i32* %237];
    i32 %381 = phi [^while.body8, i32 %327] [^if.then57, i32 %523] [^if.then60, i32 %546] [^if.then48, i32 %457] [^if.then54, i32 %496];
    i1 %382 = scmp ge i32 %381, i32 %379;
    cbr i1 %382(prob = 0.5), ^while.body12, ^b24;
^if.then42:
    i32 %383 = load i32* %0;
    i32 %384 = add i32 %383, i32 1;
    store i32* %0 with i32 %384;
    i1 %385 = scmp lt i32 %384, i32 %286;
    cbr i1 %385(prob = 0.5), ^if.then44, ^b26;
^while.body11:
    i32* %386 = phi [^if.then58, i32* %386] [^if.then49, i32* %386] [^if.then62, i32* %386] [^if.then55, i32* %386] [^b17, i32* %237];
    i32 %387 = phi [^if.then58, i32 %387] [^if.then49, i32 %387] [^if.then62, i32 %387] [^if.then55, i32 %387] [^b17, i32 %238];
    i32 %388 = phi [^if.then58, i32 %388] [^if.then49, i32 %388] [^if.then62, i32 %388] [^if.then55, i32 %388] [^b17, i32 %238];
    i32* %389 = phi [^if.then58, i32* %389] [^if.then49, i32* %389] [^if.then62, i32* %389] [^if.then55, i32* %389] [^b17, i32* %237];
    i32 %390 = phi [^if.then58, i32 %525] [^if.then49, i32 %460] [^b17, i32 %333] [^if.then62, i32 %549] [^if.then55, i32 %499];
    i1 %391 = scmp ge i32 %390, i32 %388;
    cbr i1 %391(prob = 0.5), ^b25, ^b27;
^b22:
    i32* %392 = getelementptr &(i32* %293)[i32 %345];
    i32 %393 = load i32* %392;
    i1 %394 = scmp neq i32 %393, i32 58;
    cbr i1 %394(prob = 0.5), ^if.then, ^b23;
^if.else44:
    i32 %395 = load i32* %0;
    i32* %396 = getelementptr &(i32* %240)[i32 %395];
    i32 %397 = load i32* %396;
    i1 %398 = scmp eq i32 %397, i32 10;
    cbr i1 %398(prob = 0.5), ^if.then45, ^if.else48;
^if.else45:
    i32 %399 = load i32* %0;
    i32* %400 = getelementptr &(i32* %296)[i32 %399];
    i32 %401 = load i32* %400;
    i1 %402 = scmp eq i32 %401, i32 9;
    cbr i1 %402(prob = 0.5), ^if.then46, ^if.else49;
^if.else46:
    i32 %403 = load i32* %0;
    i32 %404 = add i32 %403, i32 4;
    i32* %405 = getelementptr &(i32* %4)[i32 %404];
    i32 %406 = load i32* %405;
    i32 %407 = load i32* %167;
    i1 %408 = scmp neq i32 %406, i32 %407;
    cbr i1 %408(prob = 0.5), ^if.then, ^b28;
^if.else47:
    i32 %409 = load i32* %0;
    i32 %410 = add i32 %409, i32 3;
    i32* %411 = getelementptr &(i32* %4)[i32 %410];
    i32 %412 = load i32* %411;
    i32 %413 = load i32* %216;
    i1 %414 = scmp neq i32 %412, i32 %413;
    cbr i1 %414(prob = 0.5), ^if.then, ^b21;
^if.then43:
    i1 %415 = scmp lt i32 %371, i32 58;
    cbr i1 %415(prob = 0.5), ^while.body13, ^if.else50;
^while.body12:
    i32 %416 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %377, i32 %378, i32* %0);
    i32* %417 = load i32** %buf1;
    i32 %418 = load i32* %len1;
    i1 %419 = scmp eq i32 %416, i32 0;
    cbr i1 %419(prob = 0.5), ^if.then, ^b9;
^while.body13:
    i32 %420 = phi [^while.body9, i32 0] [^if.then43, i32 1] [^if.else50, i32 0];
    i1 %421 = scmp neq i32 %420, i32 1;
    cbr i1 %421(prob = 0.5), ^indirect4, ^if.then36;
^if.then44:
    i32* %422 = getelementptr &(i32* %285)[i32 %384];
    i32 %423 = load i32* %422;
    i1 %424 = scmp eq i32 %423, i32 43;
    cbr i1 %424(prob = 0.5), ^if.then47, ^indirect5;
^if.then45:
    i32 %425 = load i32* %0;
    i32 %426 = add i32 %425, i32 1;
    store i32* %0 with i32 %426;
    ubr ^while.body5;
^if.then46:
    i32 %427 = load i32* %0;
    i32 %428 = add i32 %427, i32 1;
    store i32* %0 with i32 %428;
    ubr ^while.body7;
^b23:
    i32 %429 = load i32* %0;
    i32 %430 = add i32 %429, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body14;
^b24:
    i32 %431 = load i32* %0;
    i32* %432 = getelementptr &(i32* %380)[i32 %431];
    i32 %433 = load i32* %432;
    i1 %434 = scmp eq i32 %433, i32 32;
    cbr i1 %434(prob = 0.5), ^if.then48, ^if.else51;
^b25:
    i32 %435 = load i32* %0;
    i1 %436 = scmp ge i32 %435, i32 %387;
    cbr i1 %436(prob = 0.5), ^if.then, ^b29;
^b26:
    i32 %437 = phi [^if.then47, i32 %455] [^indirect5, i32 %458] [^if.then42, i32 %384];
    i1 %438 = scmp lt i32 %437, i32 %286;
    cbr i1 %438(prob = 0.5), ^if.then50, ^indirect6;
^b27:
    i32 %439 = load i32* %0;
    i32* %440 = getelementptr &(i32* %389)[i32 %439];
    i32 %441 = load i32* %440;
    i1 %442 = scmp eq i32 %441, i32 32;
    cbr i1 %442(prob = 0.5), ^if.then49, ^if.else52;
^if.else48:
    i32 %443 = load i32* %0;
    i32* %444 = getelementptr &(i32* %240)[i32 %443];
    i32 %445 = load i32* %444;
    i1 %446 = scmp eq i32 %445, i32 13;
    cbr i1 %446(prob = 0.5), ^if.then51, ^b13;
^if.else49:
    i32 %447 = load i32* %0;
    i32* %448 = getelementptr &(i32* %296)[i32 %447];
    i32 %449 = load i32* %448;
    i1 %450 = scmp eq i32 %449, i32 10;
    cbr i1 %450(prob = 0.5), ^if.then52, ^if.else53;
^b28:
    i32 %451 = load i32* %0;
    i32 %452 = add i32 %451, i32 5;
    store i32* %0 with i32 %452;
    ret i32 1;
^if.else50:
    ubr ^while.body13;
^indirect4:
    i32 %453 = load i32* %0;
    ubr ^b14;
^if.then47:
    i32 %454 = load i32* %0;
    i32 %455 = add i32 %454, i32 1;
    store i32* %0 with i32 %455;
    ubr ^b26;
^if.then48:
    i32 %456 = load i32* %0;
    i32 %457 = add i32 %456, i32 1;
    store i32* %0 with i32 %457;
    ubr ^while.body10;
^indirect5:
    i32 %458 = load i32* %0;
    ubr ^b26;
^if.then49:
    i32 %459 = load i32* %0;
    i32 %460 = add i32 %459, i32 1;
    store i32* %0 with i32 %460;
    ubr ^while.body11;
^indirect6:
    i32 %461 = load i32* %0;
    ubr ^while.header2;
^if.then50:
    i32 %462 = load i32* %0;
    i32* %463 = getelementptr &(i32* %285)[i32 %462];
    i32 %464 = load i32* %463;
    i1 %465 = scmp eq i32 %464, i32 45;
    cbr i1 %465(prob = 0.5), ^if.then53, ^indirect7;
^if.then51:
    i32 %466 = load i32* %0;
    i32 %467 = add i32 %466, i32 1;
    store i32* %0 with i32 %467;
    ubr ^while.body5;
^if.then52:
    i32 %468 = load i32* %0;
    i32 %469 = add i32 %468, i32 1;
    store i32* %0 with i32 %469;
    ubr ^while.body7;
^if.else51:
    i32 %470 = load i32* %0;
    i32* %471 = getelementptr &(i32* %380)[i32 %470];
    i32 %472 = load i32* %471;
    i1 %473 = scmp eq i32 %472, i32 9;
    cbr i1 %473(prob = 0.5), ^if.then54, ^if.else54;
^b29:
    i32* %474 = getelementptr &(i32* %386)[i32 %435];
    i32 %475 = load i32* %474;
    i1 %476 = scmp neq i32 %475, i32 93;
    cbr i1 %476(prob = 0.5), ^if.then, ^b8;
^if.else52:
    i32 %477 = load i32* %0;
    i32* %478 = getelementptr &(i32* %389)[i32 %477];
    i32 %479 = load i32* %478;
    i1 %480 = scmp eq i32 %479, i32 9;
    cbr i1 %480(prob = 0.5), ^if.then55, ^if.else55;
^while.body14:
    i32* %481 = phi [^if.then64, i32* %481] [^if.then63, i32* %481] [^if.then66, i32* %481] [^if.then59, i32* %481] [^b23, i32* %293];
    i32 %482 = phi [^if.then64, i32 %482] [^if.then63, i32 %482] [^if.then66, i32 %482] [^if.then59, i32 %482] [^b23, i32 %294];
    i32 %483 = phi [^if.then64, i32 %483] [^if.then63, i32 %483] [^if.then66, i32 %483] [^if.then59, i32 %483] [^b23, i32 %294];
    i32* %484 = phi [^if.then64, i32* %484] [^if.then63, i32* %484] [^if.then66, i32* %484] [^if.then59, i32* %484] [^b23, i32* %293];
    i32 %485 = phi [^b23, i32 %430] [^if.then64, i32 %565] [^if.then66, i32 %584] [^if.then59, i32 %527] [^if.then63, i32 %551];
    i1 %486 = scmp ge i32 %485, i32 %483;
    cbr i1 %486(prob = 0.5), ^b30, ^b31;
^if.else53:
    i32 %487 = load i32* %0;
    i32* %488 = getelementptr &(i32* %296)[i32 %487];
    i32 %489 = load i32* %488;
    i1 %490 = scmp eq i32 %489, i32 13;
    cbr i1 %490(prob = 0.5), ^if.then56, ^b18;
^if.then53:
    i32* %491 = phi [^while.body16, i32* %500] [^if.then50, i32* %285];
    i32 %492 = phi [^while.body16, i32 %501] [^if.then50, i32 %286];
    i32 %493 = load i32* %0;
    i32 %494 = add i32 %493, i32 1;
    store i32* %0 with i32 %494;
    ubr ^while.header2;
^if.then54:
    i32 %495 = load i32* %0;
    i32 %496 = add i32 %495, i32 1;
    store i32* %0 with i32 %496;
    ubr ^while.body10;
^indirect7:
    i32 %497 = load i32* %0;
    ubr ^while.header2;
^if.then55:
    i32 %498 = load i32* %0;
    i32 %499 = add i32 %498, i32 1;
    store i32* %0 with i32 %499;
    ubr ^while.body11;
^while.header2:
    i32* %500 = phi [^indirect7, i32* %285] [^if.then53, i32* %491] [^indirect6, i32* %285];
    i32 %501 = phi [^indirect7, i32 %286] [^if.then53, i32 %492] [^indirect6, i32 %286];
    i32 %502 = phi [^if.then53, i32 %494] [^indirect7, i32 %497] [^indirect6, i32 %461];
    i1 %503 = scmp lt i32 %502, i32 %501;
    cbr i1 %503(prob = 0.97), ^while.body15, ^b20;
^if.then56:
    i32 %504 = load i32* %0;
    i32 %505 = add i32 %504, i32 1;
    store i32* %0 with i32 %505;
    ubr ^while.body7;
^if.else54:
    i32 %506 = load i32* %0;
    i32* %507 = getelementptr &(i32* %380)[i32 %506];
    i32 %508 = load i32* %507;
    i1 %509 = scmp eq i32 %508, i32 10;
    cbr i1 %509(prob = 0.5), ^if.then57, ^if.else56;
^b30:
    i32 %510 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %481, i32 %482, i32* %0);
    i32* %511 = load i32** %buf1;
    i32 %512 = load i32* %len1;
    i1 %513 = scmp eq i32 %510, i32 0;
    cbr i1 %513(prob = 0.5), ^if.then, ^b32;
^if.else55:
    i32 %514 = load i32* %0;
    i32* %515 = getelementptr &(i32* %389)[i32 %514];
    i32 %516 = load i32* %515;
    i1 %517 = scmp eq i32 %516, i32 10;
    cbr i1 %517(prob = 0.5), ^if.then58, ^if.else57;
^b31:
    i32 %518 = load i32* %0;
    i32* %519 = getelementptr &(i32* %484)[i32 %518];
    i32 %520 = load i32* %519;
    i1 %521 = scmp eq i32 %520, i32 32;
    cbr i1 %521(prob = 0.5), ^if.then59, ^if.else58;
^if.then57:
    i32 %522 = load i32* %0;
    i32 %523 = add i32 %522, i32 1;
    store i32* %0 with i32 %523;
    ubr ^while.body10;
^if.then58:
    i32 %524 = load i32* %0;
    i32 %525 = add i32 %524, i32 1;
    store i32* %0 with i32 %525;
    ubr ^while.body11;
^if.then59:
    i32 %526 = load i32* %0;
    i32 %527 = add i32 %526, i32 1;
    store i32* %0 with i32 %527;
    ubr ^while.body14;
^b32:
    i32 %528 = load i32* %0;
    ubr ^while.body17;
^while.body15:
    i32 %529 = load i32* %0;
    i32* %530 = getelementptr &(i32* %500)[i32 %529];
    i32 %531 = load i32* %530;
    i1 %532 = scmp gt i32 %531, i32 47;
    cbr i1 %532(prob = 0.5), ^if.then61, ^while.body16;
^if.else56:
    i32 %533 = load i32* %0;
    i32* %534 = getelementptr &(i32* %380)[i32 %533];
    i32 %535 = load i32* %534;
    i1 %536 = scmp eq i32 %535, i32 13;
    cbr i1 %536(prob = 0.5), ^if.then60, ^while.body12;
^if.else57:
    i32 %537 = load i32* %0;
    i32* %538 = getelementptr &(i32* %389)[i32 %537];
    i32 %539 = load i32* %538;
    i1 %540 = scmp eq i32 %539, i32 13;
    cbr i1 %540(prob = 0.5), ^if.then62, ^b25;
^if.else58:
    i32 %541 = load i32* %0;
    i32* %542 = getelementptr &(i32* %484)[i32 %541];
    i32 %543 = load i32* %542;
    i1 %544 = scmp eq i32 %543, i32 9;
    cbr i1 %544(prob = 0.5), ^if.then63, ^if.else59;
^if.then60:
    i32 %545 = load i32* %0;
    i32 %546 = add i32 %545, i32 1;
    store i32* %0 with i32 %546;
    ubr ^while.body10;
^if.then61:
    i1 %547 = scmp lt i32 %531, i32 58;
    cbr i1 %547(prob = 0.5), ^while.body16, ^if.else60;
^if.then62:
    i32 %548 = load i32* %0;
    i32 %549 = add i32 %548, i32 1;
    store i32* %0 with i32 %549;
    ubr ^while.body11;
^if.then63:
    i32 %550 = load i32* %0;
    i32 %551 = add i32 %550, i32 1;
    store i32* %0 with i32 %551;
    ubr ^while.body14;
^while.body16:
    i32 %552 = phi [^while.body15, i32 0] [^if.then61, i32 1] [^if.else60, i32 0];
    i1 %553 = scmp neq i32 %552, i32 1;
    cbr i1 %553(prob = 0.5), ^b20, ^if.then53;
^while.body17:
    i32* %554 = phi [^if.then68, i32* %554] [^if.then67, i32* %554] [^if.then71, i32* %554] [^if.then65, i32* %554] [^b32, i32* %511];
    i32 %555 = phi [^if.then68, i32 %555] [^if.then67, i32 %555] [^if.then71, i32 %555] [^if.then65, i32 %555] [^b32, i32 %512];
    i32 %556 = phi [^if.then68, i32 %556] [^if.then67, i32 %556] [^if.then71, i32 %556] [^if.then65, i32 %556] [^b32, i32 %512];
    i32* %557 = phi [^if.then68, i32* %557] [^if.then67, i32* %557] [^if.then71, i32* %557] [^if.then65, i32* %557] [^b32, i32* %511];
    i32 %558 = phi [^b32, i32 %528] [^if.then68, i32 %612] [^if.then71, i32 %632] [^if.then65, i32 %581] [^if.then67, i32 %590];
    i1 %559 = scmp ge i32 %558, i32 %556;
    cbr i1 %559(prob = 0.5), ^b33, ^b34;
^if.else59:
    i32 %560 = load i32* %0;
    i32* %561 = getelementptr &(i32* %484)[i32 %560];
    i32 %562 = load i32* %561;
    i1 %563 = scmp eq i32 %562, i32 10;
    cbr i1 %563(prob = 0.5), ^if.then64, ^if.else61;
^if.else60:
    ubr ^while.body16;
^if.then64:
    i32 %564 = load i32* %0;
    i32 %565 = add i32 %564, i32 1;
    store i32* %0 with i32 %565;
    ubr ^while.body14;
^b33:
    i32 %566 = load i32* %0;
    i32* %567 = getelementptr &(i32* %554)[i32 %566];
    i32 %568 = load i32* %567;
    i1 %569 = scmp eq i32 %568, i32 44;
    cbr i1 %569(prob = 0.97), ^while.body18, ^b35;
^b34:
    i32 %570 = load i32* %0;
    i32* %571 = getelementptr &(i32* %557)[i32 %570];
    i32 %572 = load i32* %571;
    i1 %573 = scmp eq i32 %572, i32 32;
    cbr i1 %573(prob = 0.5), ^if.then65, ^if.else62;
^if.else61:
    i32 %574 = load i32* %0;
    i32* %575 = getelementptr &(i32* %484)[i32 %574];
    i32 %576 = load i32* %575;
    i1 %577 = scmp eq i32 %576, i32 13;
    cbr i1 %577(prob = 0.5), ^if.then66, ^b30;
^while.body18:
    i32 %578 = load i32* %0;
    i32 %579 = add i32 %578, i32 1;
    store i32* %0 with i32 %579;
    ubr ^while.body19;
^if.then65:
    i32 %580 = load i32* %0;
    i32 %581 = add i32 %580, i32 1;
    store i32* %0 with i32 %581;
    ubr ^while.body17;
^b35:
    i32 %582 = load i32* %0;
    ubr ^while.body20;
^if.then66:
    i32 %583 = load i32* %0;
    i32 %584 = add i32 %583, i32 1;
    store i32* %0 with i32 %584;
    ubr ^while.body14;
^if.else62:
    i32 %585 = load i32* %0;
    i32* %586 = getelementptr &(i32* %557)[i32 %585];
    i32 %587 = load i32* %586;
    i1 %588 = scmp eq i32 %587, i32 9;
    cbr i1 %588(prob = 0.5), ^if.then67, ^if.else63;
^if.then67:
    i32 %589 = load i32* %0;
    i32 %590 = add i32 %589, i32 1;
    store i32* %0 with i32 %590;
    ubr ^while.body17;
^while.body19:
    i32* %591 = phi [^if.then74, i32* %591] [^if.then72, i32* %591] [^if.then76, i32* %591] [^if.then69, i32* %591] [^while.body18, i32* %554];
    i32 %592 = phi [^if.then74, i32 %592] [^if.then72, i32 %592] [^if.then76, i32 %592] [^if.then69, i32 %592] [^while.body18, i32 %555];
    i32 %593 = phi [^if.then74, i32 %593] [^if.then72, i32 %593] [^if.then76, i32 %593] [^if.then69, i32 %593] [^while.body18, i32 %555];
    i32* %594 = phi [^if.then74, i32* %594] [^if.then72, i32* %594] [^if.then76, i32* %594] [^if.then69, i32* %594] [^while.body18, i32* %554];
    i32 %595 = phi [^while.body18, i32 %579] [^if.then74, i32 %657] [^if.then76, i32 %669] [^if.then69, i32 %628] [^if.then72, i32 %645];
    i1 %596 = scmp ge i32 %595, i32 %593;
    cbr i1 %596(prob = 0.5), ^while.body21, ^b36;
^while.body20:
    i32* %597 = phi [^if.then75, i32* %597] [^if.then73, i32* %597] [^if.then77, i32* %597] [^if.then70, i32* %597] [^b35, i32* %554];
    i32 %598 = phi [^if.then75, i32 %598] [^if.then73, i32 %598] [^if.then77, i32 %598] [^if.then70, i32 %598] [^b35, i32 %555];
    i32 %599 = phi [^if.then75, i32 %599] [^if.then73, i32 %599] [^if.then77, i32 %599] [^if.then70, i32 %599] [^b35, i32 %555];
    i32* %600 = phi [^if.then75, i32* %600] [^if.then73, i32* %600] [^if.then77, i32* %600] [^if.then70, i32* %600] [^b35, i32* %554];
    i32 %601 = phi [^b35, i32 %582] [^if.then75, i32 %659] [^if.then73, i32 %647] [^if.then77, i32 %671] [^if.then70, i32 %630];
    i1 %602 = scmp ge i32 %601, i32 %599;
    cbr i1 %602(prob = 0.5), ^b37, ^b38;
^if.else63:
    i32 %603 = load i32* %0;
    i32* %604 = getelementptr &(i32* %557)[i32 %603];
    i32 %605 = load i32* %604;
    i1 %606 = scmp eq i32 %605, i32 10;
    cbr i1 %606(prob = 0.5), ^if.then68, ^if.else64;
^while.body21:
    i32 %607 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %591, i32 %592, i32* %0);
    i32* %608 = load i32** %buf1;
    i32 %609 = load i32* %len1;
    i1 %610 = scmp eq i32 %607, i32 0;
    cbr i1 %610(prob = 0.5), ^if.then, ^b11;
^if.then68:
    i32 %611 = load i32* %0;
    i32 %612 = add i32 %611, i32 1;
    store i32* %0 with i32 %612;
    ubr ^while.body17;
^b36:
    i32 %613 = load i32* %0;
    i32* %614 = getelementptr &(i32* %594)[i32 %613];
    i32 %615 = load i32* %614;
    i1 %616 = scmp eq i32 %615, i32 32;
    cbr i1 %616(prob = 0.5), ^if.then69, ^if.else65;
^b37:
    i32 %617 = load i32* %0;
    i1 %618 = scmp ge i32 %617, i32 %598;
    cbr i1 %618(prob = 0.5), ^if.then, ^if.else66;
^b38:
    i32 %619 = load i32* %0;
    i32* %620 = getelementptr &(i32* %600)[i32 %619];
    i32 %621 = load i32* %620;
    i1 %622 = scmp eq i32 %621, i32 32;
    cbr i1 %622(prob = 0.5), ^if.then70, ^if.else67;
^if.else64:
    i32 %623 = load i32* %0;
    i32* %624 = getelementptr &(i32* %557)[i32 %623];
    i32 %625 = load i32* %624;
    i1 %626 = scmp eq i32 %625, i32 13;
    cbr i1 %626(prob = 0.5), ^if.then71, ^b33;
^if.then69:
    i32 %627 = load i32* %0;
    i32 %628 = add i32 %627, i32 1;
    store i32* %0 with i32 %628;
    ubr ^while.body19;
^if.then70:
    i32 %629 = load i32* %0;
    i32 %630 = add i32 %629, i32 1;
    store i32* %0 with i32 %630;
    ubr ^while.body20;
^if.then71:
    i32 %631 = load i32* %0;
    i32 %632 = add i32 %631, i32 1;
    store i32* %0 with i32 %632;
    ubr ^while.body17;
^if.else65:
    i32 %633 = load i32* %0;
    i32* %634 = getelementptr &(i32* %594)[i32 %633];
    i32 %635 = load i32* %634;
    i1 %636 = scmp eq i32 %635, i32 9;
    cbr i1 %636(prob = 0.5), ^if.then72, ^if.else68;
^if.else66:
    i32* %637 = getelementptr &(i32* %597)[i32 %617];
    i32 %638 = load i32* %637;
    i1 %639 = scmp neq i32 %638, i32 125;
    cbr i1 %639(prob = 0.5), ^if.then, ^b8;
^if.else67:
    i32 %640 = load i32* %0;
    i32* %641 = getelementptr &(i32* %600)[i32 %640];
    i32 %642 = load i32* %641;
    i1 %643 = scmp eq i32 %642, i32 9;
    cbr i1 %643(prob = 0.5), ^if.then73, ^if.else69;
^if.then72:
    i32 %644 = load i32* %0;
    i32 %645 = add i32 %644, i32 1;
    store i32* %0 with i32 %645;
    ubr ^while.body19;
^if.then73:
    i32 %646 = load i32* %0;
    i32 %647 = add i32 %646, i32 1;
    store i32* %0 with i32 %647;
    ubr ^while.body20;
^if.else68:
    i32 %648 = load i32* %0;
    i32* %649 = getelementptr &(i32* %594)[i32 %648];
    i32 %650 = load i32* %649;
    i1 %651 = scmp eq i32 %650, i32 10;
    cbr i1 %651(prob = 0.5), ^if.then74, ^if.else70;
^if.else69:
    i32 %652 = load i32* %0;
    i32* %653 = getelementptr &(i32* %600)[i32 %652];
    i32 %654 = load i32* %653;
    i1 %655 = scmp eq i32 %654, i32 10;
    cbr i1 %655(prob = 0.5), ^if.then75, ^if.else71;
^if.then74:
    i32 %656 = load i32* %0;
    i32 %657 = add i32 %656, i32 1;
    store i32* %0 with i32 %657;
    ubr ^while.body19;
^if.then75:
    i32 %658 = load i32* %0;
    i32 %659 = add i32 %658, i32 1;
    store i32* %0 with i32 %659;
    ubr ^while.body20;
^if.else70:
    i32 %660 = load i32* %0;
    i32* %661 = getelementptr &(i32* %594)[i32 %660];
    i32 %662 = load i32* %661;
    i1 %663 = scmp eq i32 %662, i32 13;
    cbr i1 %663(prob = 0.5), ^if.then76, ^while.body21;
^if.else71:
    i32 %664 = load i32* %0;
    i32* %665 = getelementptr &(i32* %600)[i32 %664];
    i32 %666 = load i32* %665;
    i1 %667 = scmp eq i32 %666, i32 13;
    cbr i1 %667(prob = 0.5), ^if.then77, ^b37;
^if.then76:
    i32 %668 = load i32* %0;
    i32 %669 = add i32 %668, i32 1;
    store i32* %0 with i32 %669;
    ubr ^while.body19;
^if.then77:
    i32 %670 = load i32* %0;
    i32 %671 = add i32 %670, i32 1;
    store i32* %0 with i32 %671;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    i32* %i = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %7] [^entry, i32 %0];
    i32 %2 = phi [^while.body, i32 %6] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 0];
    i1 %4 = scmp neq i32 %1, i32 35;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %5 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %2];
    store i32* %5 with i32 %1;
    i32 %6 = add i32 %2, i32 1;
    store i32* %i with i32 %6;
    i32 %7 = call () -> i32 @getch();
    ubr ^while.header;
^b:
    i32* %8 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body1:
    i32 %9 = phi [^if.then3, i32 %9] [^if.then1, i32 %9] [^if.then6, i32 %9] [^if.then, i32 %9] [^b, i32 %2];
    i32 %10 = phi [^if.then3, i32 %35] [^if.then1, i32 %27] [^if.then6, i32 %40] [^if.then, i32 %20] [^b, i32 %3];
    i32 %11 = phi [^if.then3, i32 %11] [^if.then1, i32 %11] [^if.then6, i32 %11] [^if.then, i32 %11] [^b, i32 %2];
    i32* %12 = phi [^if.then3, i32* %12] [^if.then1, i32* %12] [^if.then6, i32* %12] [^if.then, i32* %12] [^b, i32* %8];
    i1 %13 = scmp ge i32 %10, i32 %11;
    cbr i1 %13(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %14 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %8, i32 %9, i32* %pos);
    i32 %15 = load i32* %i;
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32* %17 = getelementptr &(i32* %12)[i32 %10];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %20 = add i32 %10, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^while.body2:
    i32 %21 = phi [^if.then7, i32 %21] [^if.then5, i32 %21] [^if.then8, i32 %21] [^if.then2, i32 %21] [^b1, i32 %14];
    i32 %22 = phi [^if.then7, i32 %43] [^if.then5, i32 %39] [^if.then8, i32 %46] [^if.then2, i32 %34] [^b1, i32 %16];
    i32 %23 = phi [^if.then7, i32 %23] [^if.then5, i32 %23] [^if.then8, i32 %23] [^if.then2, i32 %23] [^b1, i32 %15];
    i32* %24 = phi [^if.then7, i32* %24] [^if.then5, i32* %24] [^if.then8, i32* %24] [^if.then2, i32* %24] [^b1, i32* %8];
    i1 %25 = scmp ge i32 %22, i32 %23;
    cbr i1 %25(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %26 = scmp eq i32 %18, i32 9;
    cbr i1 %26(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %27 = add i32 %10, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.body1;
^b3:
    i1 %28 = scmp neq i32 %21, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then4, ^if.else4;
^b4:
    i32* %29 = getelementptr &(i32* %24)[i32 %22];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 32;
    cbr i1 %31(prob = 0.5), ^if.then2, ^if.else2;
^if.else1:
    i32 %32 = load i32* %17;
    i1 %33 = scmp eq i32 %32, i32 10;
    cbr i1 %33(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    i32 %34 = add i32 %22, i32 1;
    store i32* %pos with i32 %34;
    ubr ^while.body2;
^if.then3:
    i32 %35 = add i32 %10, i32 1;
    store i32* %pos with i32 %35;
    ubr ^while.body1;
^if.else2:
    i1 %36 = scmp eq i32 %30, i32 9;
    cbr i1 %36(prob = 0.5), ^if.then5, ^if.else5;
^if.else3:
    i32 %37 = load i32* %17;
    i1 %38 = scmp eq i32 %37, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b1;
^if.then4:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.else4:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 1;
^if.then5:
    i32 %39 = add i32 %22, i32 1;
    store i32* %pos with i32 %39;
    ubr ^while.body2;
^if.then6:
    i32 %40 = add i32 %10, i32 1;
    store i32* %pos with i32 %40;
    ubr ^while.body1;
^if.else5:
    i32 %41 = load i32* %29;
    i1 %42 = scmp eq i32 %41, i32 10;
    cbr i1 %42(prob = 0.5), ^if.then7, ^if.else6;
^if.then7:
    i32 %43 = add i32 %22, i32 1;
    store i32* %pos with i32 %43;
    ubr ^while.body2;
^if.else6:
    i32 %44 = load i32* %29;
    i1 %45 = scmp eq i32 %44, i32 13;
    cbr i1 %45(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %46 = add i32 %22, i32 1;
    store i32* %pos with i32 %46;
    ubr ^while.body2;
}
