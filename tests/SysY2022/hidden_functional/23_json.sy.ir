internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else1, i32 3] [^if.else3, i32 2] [^entry2, i32 1];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %24];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %8 = load i32* %0;
    ubr ^while.body;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 0] [^if.else5, i32 0] [^b5, i32 0] [^if.then7, i32 %82] [^if.then8, i32 0] [^if.else11, i32 0] [^if.then11, i32 %117] [^if.else12, i32 0] [^if.then12, i32 0] [^if.else14, i32 0] [^b10, i32 1] [^b11, i32 0] [^if.then16, i32 %150] [^if.else15, i32 0] [^if.else16, i32 0] [^if.then18, i32 0] [^if.then19, i32 1] [^b12, i32 0] [^if.then22, i32 %176] [^b13, i32 1] [^if.else18, i32 0] [^if.else19, i32 0] [^if.else20, i32 0] [^if.else21, i32 0] [^if.then23, i32 1] [^if.then24, i32 1] [^if.then25, i32 %206] [^if.else22, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^b15, i32 1] [^if.else25, i32 0] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^b19, i32 0] [^b20, i32 1] [^b21, i32 0] [^while.header2, i32 1] [^while.body11, i32 0] [^while.body12, i32 1] [^b25, i32 0] [^b26, i32 0] [^b27, i32 0] [^while.body18, i32 0] [^b33, i32 0] [^if.else29, i32 0] [^b35, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %9;
  ^while.body:
    i32 %10 = phi [^entry1, i32 %8] [^if.then, i32 %23];
    i1 %11 = icmp sle i32 %len, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %12 = icmp eq i32 %6, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %13 = load i32* %0;
    i32* %14 = getelementptr &(i32* %buf)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 32;
    i1 %17 = icmp eq i32 %15, i32 9;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %15, i32 10;
    i1 %20 = or i1 %18, i1 %19;
    i1 %21 = icmp eq i32 %15, i32 13;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %23 = add i32 %13, i32 1;
    store i32* %0 with i32 %23;
    ubr ^while.body;
  ^if.then1:
    i32 %24 = load i32* %0;
    i32* %25 = getelementptr &(i32* %buf)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 123;
    cbr i1 %27(prob = 0.5), ^entry, ^if.else1;
  ^if.else:
    i1 %28 = icmp eq i32 %6, i32 1;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else1:
    i1 %29 = icmp eq i32 %26, i32 91;
    cbr i1 %29(prob = 0.5), ^2, ^if.else3;
  ^if.then2:
    i32 %30 = load i32* %0;
    i32* %31 = getelementptr &(i32* %buf)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 43;
    i1 %34 = icmp eq i32 %32, i32 45;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.75), ^if.then3, ^b3;
  ^if.else2:
    i1 %36 = icmp eq i32 %6, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then3:
    i32 %37 = add i32 %30, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then4:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.else3:
    i1 %40 = icmp eq i32 %26, i32 34;
    cbr i1 %40(prob = 0.5), ^2, ^entry2;
  ^b3:
    i32 %41 = phi [^if.then2, i32 %30] [^if.then3, i32 %37];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^b, ^if.else5;
  ^if.else4:
    i1 %43 = icmp eq i32 %6, i32 3;
    cbr i1 %43(prob = 0.5), ^if.then5, ^if.else6;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.body2;
  ^while.header:
    i32 %46 = phi [^if.then4, i32 %39] [^b4, i32 %78];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.97), ^while.body1, ^indirect;
  ^if.else5:
    i32 %48 = load i32* %0;
    i32* %49 = getelementptr &(i32* %buf)[i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = icmp slt i32 %50, i32 58;
    i32 %52 = zext i1 %51 to i32;
    i1 %53 = icmp sgt i32 %50, i32 47;
    i32 %54 = select i1 %53 ? i32 %52 : i32 0;
    i1 %55 = icmp eq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^b, ^while.header1;
  ^entry2:
    i1 %56 = icmp slt i32 %26, i32 58;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = icmp sgt i32 %26, i32 47;
    i32 %59 = select i1 %58 ? i32 %57 : i32 0;
    i1 %60 = icmp eq i32 %59, i32 1;
    cbr i1 %60(prob = 0.5), ^2, ^if.else7;
  ^if.else6:
    i1 %61 = icmp eq i32 %6, i32 4;
    cbr i1 %61(prob = 0.5), ^if.then6, ^if.else8;
  ^indirect:
    i32 %62 = load i32* %0;
    ubr ^b5;
  ^while.body1:
    i32 %63 = load i32* %0;
    i32* %64 = getelementptr &(i32* %buf)[i32 %63];
    i32 %65 = load i32* %64;
    i1 %66 = icmp eq i32 %65, i32 34;
    cbr i1 %66(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %67 = load i32* %0;
    i32 %68 = add i32 %67, i32 1;
    store i32* %0 with i32 %68;
    ubr ^while.body3;
  ^while.body2:
    i32 %69 = phi [^if.then5, i32 %45] [^if.then9, i32 %109];
    i1 %70 = icmp sle i32 %len, i32 %69;
    cbr i1 %70(prob = 0.5), ^indirect1, ^b6;
  ^if.else7:
    i1 %71 = icmp eq i32 %26, i32 43;
    cbr i1 %71(prob = 0.5), ^if.then7, ^if.else9;
  ^while.header1:
    i32 %72 = phi [^if.else5, i32 %48] [^b7, i32 %118];
    i1 %73 = icmp sgt i32 %len, i32 %72;
    cbr i1 %73(prob = 0.97), ^while.body4, ^indirect2;
  ^if.else8:
    i1 %74 = icmp eq i32 %6, i32 5;
    cbr i1 %74(prob = 0.5), ^if.then8, ^if.else10;
  ^b4:
    i1 %75 = icmp eq i32 %65, i32 92;
    i32 %76 = zext i1 %75 to i32;
    i32 %77 = add i32 %63, i32 1;
    i32 %78 = add i32 %76, i32 %77;
    store i32* %0 with i32 %78;
    ubr ^while.header;
  ^indirect1:
    i32 %79 = load i32* %0;
    ubr ^if.then10;
  ^b5:
    i32 %80 = phi [^indirect, i32 %62] [^while.body1, i32 %63];
    i1 %81 = icmp sle i32 %len, i32 %80;
    cbr i1 %81(prob = 0.5), ^b, ^if.else11;
  ^if.then7:
    i32 %82 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^indirect2:
    i32 %83 = load i32* %0;
    ubr ^b8;
  ^b6:
    i32 %84 = load i32* %0;
    i32* %85 = getelementptr &(i32* %buf)[i32 %84];
    i32 %86 = load i32* %85;
    i1 %87 = icmp eq i32 %86, i32 32;
    i1 %88 = icmp eq i32 %86, i32 9;
    i1 %89 = or i1 %87, i1 %88;
    i1 %90 = icmp eq i32 %86, i32 10;
    i1 %91 = or i1 %89, i1 %90;
    i1 %92 = icmp eq i32 %86, i32 13;
    i1 %93 = or i1 %91, i1 %92;
    cbr i1 %93(prob = 0.94), ^if.then9, ^if.then10;
  ^while.body3:
    i32 %94 = phi [^if.then6, i32 %68] [^if.then14, i32 %144];
    i1 %95 = icmp sle i32 %len, i32 %94;
    cbr i1 %95(prob = 0.5), ^indirect3, ^b9;
  ^while.body4:
    i32 %96 = load i32* %0;
    i32* %97 = getelementptr &(i32* %buf)[i32 %96];
    i32 %98 = load i32* %97;
    i1 %99 = icmp slt i32 %98, i32 58;
    i32 %100 = zext i1 %99 to i32;
    i1 %101 = icmp sgt i32 %98, i32 47;
    i32 %102 = select i1 %101 ? i32 %100 : i32 0;
    i1 %103 = icmp neq i32 %102, i32 1;
    cbr i1 %103(prob = 0.5), ^b8, ^b7;
  ^if.then8:
    i32 %104 = load i32* %0;
    i32 %105 = add i32 %104, i32 3;
    i1 %106 = icmp sle i32 %len, i32 %105;
    cbr i1 %106(prob = 0.5), ^b, ^if.else12;
  ^if.else9:
    i1 %107 = icmp eq i32 %26, i32 45;
    cbr i1 %107(prob = 0.5), ^if.then11, ^if.else13;
  ^if.else10:
    i1 %108 = icmp eq i32 %6, i32 6;
    cbr i1 %108(prob = 0.5), ^if.then12, ^if.else14;
  ^if.then9:
    i32 %109 = add i32 %84, i32 1;
    store i32* %0 with i32 %109;
    ubr ^while.body2;
  ^indirect3:
    i32 %110 = load i32* %0;
    ubr ^if.then15;
  ^if.then10:
    i32 %111 = phi [^indirect1, i32 %79] [^b6, i32 %84];
    i1 %112 = icmp sgt i32 %len, i32 %111;
    cbr i1 %112(prob = 0.5), ^if.then13, ^b11;
  ^if.else11:
    i32 %113 = load i32* %0;
    i32* %114 = getelementptr &(i32* %buf)[i32 %113];
    i32 %115 = load i32* %114;
    i1 %116 = icmp neq i32 %115, i32 34;
    cbr i1 %116(prob = 0.5), ^b, ^b10;
  ^if.then11:
    i32 %117 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b7:
    i32 %118 = add i32 %96, i32 1;
    store i32* %0 with i32 %118;
    ubr ^while.header1;
  ^b8:
    i32 %119 = phi [^indirect2, i32 %83] [^while.body4, i32 %96];
    i1 %120 = icmp sgt i32 %len, i32 %119;
    cbr i1 %120(prob = 0.5), ^if.then17, ^indirect4;
  ^b9:
    i32 %121 = load i32* %0;
    i32* %122 = getelementptr &(i32* %buf)[i32 %121];
    i32 %123 = load i32* %122;
    i1 %124 = icmp eq i32 %123, i32 32;
    i1 %125 = icmp eq i32 %123, i32 9;
    i1 %126 = or i1 %124, i1 %125;
    i1 %127 = icmp eq i32 %123, i32 10;
    i1 %128 = or i1 %126, i1 %127;
    i1 %129 = icmp eq i32 %123, i32 13;
    i1 %130 = or i1 %128, i1 %129;
    cbr i1 %130(prob = 0.94), ^if.then14, ^if.then15;
  ^if.else12:
    i32* %131 = getelementptr &(i32* %buf)[i32 %104];
    i32 %132 = load i32* %131;
    i1 %133 = icmp neq i32 %132, i32 116;
    cbr i1 %133(prob = 0.5), ^b, ^if.else15;
  ^if.then12:
    i32 %134 = load i32* %0;
    i32 %135 = add i32 %134, i32 4;
    i1 %136 = icmp sle i32 %len, i32 %135;
    cbr i1 %136(prob = 0.5), ^b, ^if.else16;
  ^if.else13:
    i1 %137 = icmp eq i32 %26, i32 116;
    cbr i1 %137(prob = 0.5), ^if.then16, ^if.else17;
  ^if.else14:
    i1 %138 = icmp eq i32 %6, i32 7;
    cbr i1 %138(prob = 0.5), ^if.then18, ^b;
  ^b10:
    i32 %139 = phi [^if.else11, i32 %113] [^b26, i32 %329] [^if.else29, i32 %400];
    i32 %140 = add i32 %139, i32 1;
    store i32* %0 with i32 %140;
    ubr ^b;
  ^if.then13:
    i32* %141 = getelementptr &(i32* %buf)[i32 %111];
    i32 %142 = load i32* %141;
    i1 %143 = icmp eq i32 %142, i32 93;
    cbr i1 %143(prob = 0.5), ^if.then19, ^b11;
  ^if.then14:
    i32 %144 = add i32 %121, i32 1;
    store i32* %0 with i32 %144;
    ubr ^while.body3;
  ^indirect4:
    i32 %145 = load i32* %0;
    ubr ^b13;
  ^if.then15:
    i32 %146 = phi [^indirect3, i32 %110] [^b9, i32 %121];
    i1 %147 = icmp sgt i32 %len, i32 %146;
    cbr i1 %147(prob = 0.5), ^if.then20, ^b12;
  ^b11:
    i32 %148 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %149 = icmp eq i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^b, ^entry3;
  ^if.then16:
    i32 %150 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then17:
    i32 %151 = load i32* %0;
    i32* %152 = getelementptr &(i32* %buf)[i32 %151];
    i32 %153 = load i32* %152;
    i1 %154 = icmp eq i32 %153, i32 46;
    cbr i1 %154(prob = 0.5), ^if.then21, ^b13;
  ^if.else15:
    i32 %155 = add i32 %104, i32 1;
    i32* %156 = getelementptr &(i32* %buf)[i32 %155];
    i32 %157 = load i32* %156;
    i1 %158 = icmp neq i32 %157, i32 114;
    cbr i1 %158(prob = 0.5), ^b, ^if.else18;
  ^if.else16:
    i32* %159 = getelementptr &(i32* %buf)[i32 %134];
    i32 %160 = load i32* %159;
    i1 %161 = icmp neq i32 %160, i32 102;
    cbr i1 %161(prob = 0.5), ^b, ^if.else19;
  ^if.then18:
    i32 %162 = load i32* %0;
    i32 %163 = add i32 %162, i32 3;
    i1 %164 = icmp sle i32 %len, i32 %163;
    cbr i1 %164(prob = 0.5), ^b, ^if.else20;
  ^if.else17:
    i1 %165 = icmp eq i32 %26, i32 102;
    cbr i1 %165(prob = 0.5), ^if.then22, ^if.else21;
  ^if.then19:
    i32 %166 = add i32 %111, i32 1;
    store i32* %0 with i32 %166;
    ubr ^b;
  ^entry3:
    i32 %167 = load i32* %0;
    ubr ^while.body6;
  ^if.then20:
    i32* %168 = getelementptr &(i32* %buf)[i32 %146];
    i32 %169 = load i32* %168;
    i1 %170 = icmp eq i32 %169, i32 125;
    cbr i1 %170(prob = 0.5), ^if.then23, ^b12;
  ^if.then21:
    i32 %171 = phi [^if.then17, i32 %151] [^while.body5, i32 %172];
    i32 %172 = add i32 %171, i32 1;
    i1 %173 = icmp sgt i32 %len, i32 %172;
    store i32* %0 with i32 %172;
    cbr i1 %173(prob = 0.97), ^while.body5, ^b13;
  ^b12:
    i32 %174 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %175 = icmp eq i32 %174, i32 0;
    cbr i1 %175(prob = 0.5), ^b, ^entry4;
  ^if.then22:
    i32 %176 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b13:
    i32 %177 = phi [^indirect4, i32 %145] [^if.then17, i32 %151] [^if.then21, i32 %172] [^while.body5, i32 %172];
    i1 %178 = icmp sgt i32 %len, i32 %177;
    cbr i1 %178(prob = 0.5), ^if.then24, ^b;
  ^if.else18:
    i32 %179 = add i32 %104, i32 2;
    i32* %180 = getelementptr &(i32* %buf)[i32 %179];
    i32 %181 = load i32* %180;
    i1 %182 = icmp neq i32 %181, i32 117;
    cbr i1 %182(prob = 0.5), ^b, ^if.else22;
  ^if.else19:
    i32 %183 = add i32 %134, i32 1;
    i32* %184 = getelementptr &(i32* %buf)[i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = icmp neq i32 %185, i32 97;
    cbr i1 %186(prob = 0.5), ^b, ^if.else23;
  ^if.else20:
    i32* %187 = getelementptr &(i32* %buf)[i32 %162];
    i32 %188 = load i32* %187;
    i1 %189 = icmp neq i32 %188, i32 110;
    cbr i1 %189(prob = 0.5), ^b, ^if.else24;
  ^if.else21:
    i1 %190 = icmp eq i32 %26, i32 110;
    cbr i1 %190(prob = 0.5), ^if.then25, ^b;
  ^if.then23:
    i32 %191 = add i32 %146, i32 1;
    store i32* %0 with i32 %191;
    ubr ^b;
  ^entry4:
    i32 %192 = load i32* %0;
    ubr ^while.body7;
  ^while.body5:
    i32* %193 = getelementptr &(i32* %buf)[i32 %172];
    i32 %194 = load i32* %193;
    i1 %195 = icmp slt i32 %194, i32 58;
    i32 %196 = zext i1 %195 to i32;
    i1 %197 = icmp sgt i32 %194, i32 47;
    i32 %198 = select i1 %197 ? i32 %196 : i32 0;
    i1 %199 = icmp neq i32 %198, i32 1;
    cbr i1 %199(prob = 0.5), ^b13, ^if.then21;
  ^while.body6:
    i32 %200 = phi [^entry3, i32 %167] [^if.then27, i32 %243];
    i1 %201 = icmp sle i32 %len, i32 %200;
    cbr i1 %201(prob = 0.5), ^indirect5, ^b14;
  ^if.then24:
    i32 %202 = load i32* %0;
    i32* %203 = getelementptr &(i32* %buf)[i32 %202];
    i32 %204 = load i32* %203;
    i1 %205 = icmp eq i32 %204, i32 101;
    cbr i1 %205(prob = 0.5), ^if.then26, ^b;
  ^if.then25:
    i32 %206 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else22:
    i32* %207 = getelementptr &(i32* %buf)[i32 %105];
    i32 %208 = load i32* %207;
    i1 %209 = icmp neq i32 %208, i32 101;
    cbr i1 %209(prob = 0.5), ^b, ^b15;
  ^if.else23:
    i32 %210 = add i32 %134, i32 2;
    i32* %211 = getelementptr &(i32* %buf)[i32 %210];
    i32 %212 = load i32* %211;
    i1 %213 = icmp neq i32 %212, i32 108;
    cbr i1 %213(prob = 0.5), ^b, ^if.else25;
  ^if.else24:
    i32 %214 = add i32 %162, i32 1;
    i32* %215 = getelementptr &(i32* %buf)[i32 %214];
    i32 %216 = load i32* %215;
    i1 %217 = icmp neq i32 %216, i32 117;
    cbr i1 %217(prob = 0.5), ^b, ^if.else26;
  ^indirect5:
    i32 %218 = load i32* %0;
    ubr ^b16;
  ^if.then26:
    i32 %219 = add i32 %202, i32 1;
    i1 %220 = icmp sgt i32 %len, i32 %219;
    store i32* %0 with i32 %219;
    cbr i1 %220(prob = 0.5), ^if.then28, ^b17;
  ^while.body7:
    i32 %221 = phi [^entry4, i32 %192] [^if.then30, i32 %275];
    i1 %222 = icmp sle i32 %len, i32 %221;
    cbr i1 %222(prob = 0.5), ^indirect6, ^b18;
  ^b14:
    i32 %223 = load i32* %0;
    i32* %224 = getelementptr &(i32* %buf)[i32 %223];
    i32 %225 = load i32* %224;
    i1 %226 = icmp eq i32 %225, i32 32;
    i1 %227 = icmp eq i32 %225, i32 9;
    i1 %228 = or i1 %226, i1 %227;
    i1 %229 = icmp eq i32 %225, i32 10;
    i1 %230 = or i1 %228, i1 %229;
    i1 %231 = icmp eq i32 %225, i32 13;
    i1 %232 = or i1 %230, i1 %231;
    cbr i1 %232(prob = 0.94), ^if.then27, ^b16;
  ^b15:
    i32 %233 = phi [^if.else22, i32 %104] [^if.else28, i32 %162];
    i32 %234 = add i32 %233, i32 4;
    store i32* %0 with i32 %234;
    ubr ^b;
  ^if.else25:
    i32 %235 = add i32 %134, i32 3;
    i32* %236 = getelementptr &(i32* %buf)[i32 %235];
    i32 %237 = load i32* %236;
    i1 %238 = icmp neq i32 %237, i32 115;
    cbr i1 %238(prob = 0.5), ^b, ^if.else27;
  ^if.else26:
    i32 %239 = add i32 %162, i32 2;
    i32* %240 = getelementptr &(i32* %buf)[i32 %239];
    i32 %241 = load i32* %240;
    i1 %242 = icmp neq i32 %241, i32 108;
    cbr i1 %242(prob = 0.5), ^b, ^if.else28;
  ^if.then27:
    i32 %243 = add i32 %223, i32 1;
    store i32* %0 with i32 %243;
    ubr ^while.body6;
  ^indirect6:
    i32 %244 = load i32* %0;
    ubr ^b19;
  ^b16:
    i32 %245 = phi [^indirect5, i32 %218] [^b14, i32 %223];
    i32* %246 = getelementptr &(i32* %buf)[i32 %245];
    i32 %247 = load i32* %246;
    i1 %248 = icmp eq i32 %247, i32 44;
    cbr i1 %248(prob = 0.97), ^while.body8, ^entry5;
  ^if.then28:
    i32* %249 = getelementptr &(i32* %buf)[i32 %219];
    i32 %250 = load i32* %249;
    i1 %251 = icmp eq i32 %250, i32 43;
    cbr i1 %251(prob = 0.5), ^if.then29, ^indirect7;
  ^b17:
    i32 %252 = phi [^if.then26, i32 %219] [^if.then29, i32 %272] [^indirect7, i32 %274];
    i1 %253 = icmp sgt i32 %len, i32 %252;
    cbr i1 %253(prob = 0.5), ^if.then31, ^indirect8;
  ^b18:
    i32 %254 = load i32* %0;
    i32* %255 = getelementptr &(i32* %buf)[i32 %254];
    i32 %256 = load i32* %255;
    i1 %257 = icmp eq i32 %256, i32 32;
    i1 %258 = icmp eq i32 %256, i32 9;
    i1 %259 = or i1 %257, i1 %258;
    i1 %260 = icmp eq i32 %256, i32 10;
    i1 %261 = or i1 %259, i1 %260;
    i1 %262 = icmp eq i32 %256, i32 13;
    i1 %263 = or i1 %261, i1 %262;
    cbr i1 %263(prob = 0.94), ^if.then30, ^b19;
  ^if.else27:
    i32* %264 = getelementptr &(i32* %buf)[i32 %135];
    i32 %265 = load i32* %264;
    i1 %266 = icmp neq i32 %265, i32 101;
    cbr i1 %266(prob = 0.5), ^b, ^b20;
  ^if.else28:
    i32* %267 = getelementptr &(i32* %buf)[i32 %163];
    i32 %268 = load i32* %267;
    i1 %269 = icmp neq i32 %268, i32 108;
    cbr i1 %269(prob = 0.5), ^b, ^b15;
  ^while.body8:
    i32 %270 = add i32 %245, i32 1;
    store i32* %0 with i32 %270;
    ubr ^while.body9;
  ^if.then29:
    i32 %271 = load i32* %0;
    i32 %272 = add i32 %271, i32 1;
    store i32* %0 with i32 %272;
    ubr ^b17;
  ^entry5:
    i32 %273 = load i32* %0;
    ubr ^while.body10;
  ^indirect7:
    i32 %274 = load i32* %0;
    ubr ^b17;
  ^if.then30:
    i32 %275 = add i32 %254, i32 1;
    store i32* %0 with i32 %275;
    ubr ^while.body7;
  ^indirect8:
    i32 %276 = load i32* %0;
    ubr ^while.header2;
  ^b19:
    i32 %277 = phi [^indirect6, i32 %244] [^b18, i32 %254];
    i1 %278 = icmp sle i32 %len, i32 %277;
    cbr i1 %278(prob = 0.5), ^b, ^b21;
  ^if.then31:
    i32 %279 = load i32* %0;
    i32* %280 = getelementptr &(i32* %buf)[i32 %279];
    i32 %281 = load i32* %280;
    i1 %282 = icmp eq i32 %281, i32 45;
    cbr i1 %282(prob = 0.5), ^if.then32, ^while.header2;
  ^b20:
    i32 %283 = add i32 %134, i32 5;
    store i32* %0 with i32 %283;
    ubr ^b;
  ^if.then32:
    i32 %284 = phi [^if.then31, i32 %279] [^while.body12, i32 %319];
    i32 %285 = add i32 %284, i32 1;
    store i32* %0 with i32 %285;
    ubr ^while.header2;
  ^while.body9:
    i32 %286 = phi [^while.body8, i32 %270] [^if.then33, i32 %327];
    i1 %287 = icmp sle i32 %len, i32 %286;
    cbr i1 %287(prob = 0.5), ^while.body11, ^b23;
  ^while.body10:
    i32 %288 = phi [^entry5, i32 %273] [^if.then34, i32 %328];
    i1 %289 = icmp sle i32 %len, i32 %288;
    cbr i1 %289(prob = 0.5), ^indirect9, ^b24;
  ^b21:
    i32* %290 = getelementptr &(i32* %buf)[i32 %277];
    i32 %291 = load i32* %290;
    i1 %292 = icmp neq i32 %291, i32 58;
    cbr i1 %292(prob = 0.5), ^b, ^b22;
  ^while.header2:
    i32 %293 = phi [^indirect8, i32 %276] [^if.then31, i32 %279] [^if.then32, i32 %285];
    i1 %294 = icmp sgt i32 %len, i32 %293;
    cbr i1 %294(prob = 0.97), ^while.body12, ^b;
  ^indirect9:
    i32 %295 = load i32* %0;
    ubr ^b25;
  ^while.body11:
    i32 %296 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %297 = icmp eq i32 %296, i32 0;
    cbr i1 %297(prob = 0.5), ^b, ^entry3;
  ^b22:
    i32 %298 = add i32 %277, i32 1;
    store i32* %0 with i32 %298;
    ubr ^while.body13;
  ^b23:
    i32 %299 = load i32* %0;
    i32* %300 = getelementptr &(i32* %buf)[i32 %299];
    i32 %301 = load i32* %300;
    i1 %302 = icmp eq i32 %301, i32 32;
    i1 %303 = icmp eq i32 %301, i32 9;
    i1 %304 = or i1 %302, i1 %303;
    i1 %305 = icmp eq i32 %301, i32 10;
    i1 %306 = or i1 %304, i1 %305;
    i1 %307 = icmp eq i32 %301, i32 13;
    i1 %308 = or i1 %306, i1 %307;
    cbr i1 %308(prob = 0.94), ^if.then33, ^while.body11;
  ^b24:
    i32 %309 = load i32* %0;
    i32* %310 = getelementptr &(i32* %buf)[i32 %309];
    i32 %311 = load i32* %310;
    i1 %312 = icmp eq i32 %311, i32 32;
    i1 %313 = icmp eq i32 %311, i32 9;
    i1 %314 = or i1 %312, i1 %313;
    i1 %315 = icmp eq i32 %311, i32 10;
    i1 %316 = or i1 %314, i1 %315;
    i1 %317 = icmp eq i32 %311, i32 13;
    i1 %318 = or i1 %316, i1 %317;
    cbr i1 %318(prob = 0.94), ^if.then34, ^b25;
  ^while.body12:
    i32 %319 = load i32* %0;
    i32* %320 = getelementptr &(i32* %buf)[i32 %319];
    i32 %321 = load i32* %320;
    i1 %322 = icmp slt i32 %321, i32 58;
    i32 %323 = zext i1 %322 to i32;
    i1 %324 = icmp sgt i32 %321, i32 47;
    i32 %325 = select i1 %324 ? i32 %323 : i32 0;
    i1 %326 = icmp neq i32 %325, i32 1;
    cbr i1 %326(prob = 0.5), ^b, ^if.then32;
  ^if.then33:
    i32 %327 = add i32 %299, i32 1;
    store i32* %0 with i32 %327;
    ubr ^while.body9;
  ^if.then34:
    i32 %328 = add i32 %309, i32 1;
    store i32* %0 with i32 %328;
    ubr ^while.body10;
  ^b25:
    i32 %329 = phi [^indirect9, i32 %295] [^b24, i32 %309];
    i1 %330 = icmp sle i32 %len, i32 %329;
    cbr i1 %330(prob = 0.5), ^b, ^b26;
  ^while.body13:
    i32 %331 = phi [^b22, i32 %298] [^if.then35, i32 %348];
    i1 %332 = icmp sle i32 %len, i32 %331;
    cbr i1 %332(prob = 0.5), ^b27, ^b28;
  ^b26:
    i32* %333 = getelementptr &(i32* %buf)[i32 %329];
    i32 %334 = load i32* %333;
    i1 %335 = icmp neq i32 %334, i32 93;
    cbr i1 %335(prob = 0.5), ^b, ^b10;
  ^b27:
    i32 %336 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %337 = icmp eq i32 %336, i32 0;
    cbr i1 %337(prob = 0.5), ^b, ^entry6;
  ^b28:
    i32 %338 = load i32* %0;
    i32* %339 = getelementptr &(i32* %buf)[i32 %338];
    i32 %340 = load i32* %339;
    i1 %341 = icmp eq i32 %340, i32 32;
    i1 %342 = icmp eq i32 %340, i32 9;
    i1 %343 = or i1 %341, i1 %342;
    i1 %344 = icmp eq i32 %340, i32 10;
    i1 %345 = or i1 %343, i1 %344;
    i1 %346 = icmp eq i32 %340, i32 13;
    i1 %347 = or i1 %345, i1 %346;
    cbr i1 %347(prob = 0.94), ^if.then35, ^b27;
  ^if.then35:
    i32 %348 = add i32 %338, i32 1;
    store i32* %0 with i32 %348;
    ubr ^while.body13;
  ^entry6:
    i32 %349 = load i32* %0;
    ubr ^while.body14;
  ^while.body14:
    i32 %350 = phi [^entry6, i32 %349] [^if.then36, i32 %363];
    i1 %351 = icmp sle i32 %len, i32 %350;
    cbr i1 %351(prob = 0.5), ^indirect10, ^b29;
  ^indirect10:
    i32 %352 = load i32* %0;
    ubr ^b30;
  ^b29:
    i32 %353 = load i32* %0;
    i32* %354 = getelementptr &(i32* %buf)[i32 %353];
    i32 %355 = load i32* %354;
    i1 %356 = icmp eq i32 %355, i32 32;
    i1 %357 = icmp eq i32 %355, i32 9;
    i1 %358 = or i1 %356, i1 %357;
    i1 %359 = icmp eq i32 %355, i32 10;
    i1 %360 = or i1 %358, i1 %359;
    i1 %361 = icmp eq i32 %355, i32 13;
    i1 %362 = or i1 %360, i1 %361;
    cbr i1 %362(prob = 0.94), ^if.then36, ^b30;
  ^if.then36:
    i32 %363 = add i32 %353, i32 1;
    store i32* %0 with i32 %363;
    ubr ^while.body14;
  ^b30:
    i32 %364 = phi [^indirect10, i32 %352] [^b29, i32 %353];
    i32* %365 = getelementptr &(i32* %buf)[i32 %364];
    i32 %366 = load i32* %365;
    i1 %367 = icmp eq i32 %366, i32 44;
    cbr i1 %367(prob = 0.97), ^while.body15, ^entry7;
  ^while.body15:
    i32 %368 = add i32 %364, i32 1;
    store i32* %0 with i32 %368;
    ubr ^while.body16;
  ^entry7:
    i32 %369 = load i32* %0;
    ubr ^while.body17;
  ^while.body16:
    i32 %370 = phi [^while.body15, i32 %368] [^if.then37, i32 %397];
    i1 %371 = icmp sle i32 %len, i32 %370;
    cbr i1 %371(prob = 0.5), ^while.body18, ^b31;
  ^while.body17:
    i32 %372 = phi [^entry7, i32 %369] [^if.then38, i32 %399];
    i1 %373 = icmp sle i32 %len, i32 %372;
    cbr i1 %373(prob = 0.5), ^indirect11, ^b32;
  ^indirect11:
    i32 %374 = load i32* %0;
    ubr ^b33;
  ^while.body18:
    i32 %375 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %376 = icmp eq i32 %375, i32 0;
    cbr i1 %376(prob = 0.5), ^b, ^entry8;
  ^b31:
    i32 %377 = load i32* %0;
    i32* %378 = getelementptr &(i32* %buf)[i32 %377];
    i32 %379 = load i32* %378;
    i1 %380 = icmp eq i32 %379, i32 32;
    i1 %381 = icmp eq i32 %379, i32 9;
    i1 %382 = or i1 %380, i1 %381;
    i1 %383 = icmp eq i32 %379, i32 10;
    i1 %384 = or i1 %382, i1 %383;
    i1 %385 = icmp eq i32 %379, i32 13;
    i1 %386 = or i1 %384, i1 %385;
    cbr i1 %386(prob = 0.94), ^if.then37, ^while.body18;
  ^b32:
    i32 %387 = load i32* %0;
    i32* %388 = getelementptr &(i32* %buf)[i32 %387];
    i32 %389 = load i32* %388;
    i1 %390 = icmp eq i32 %389, i32 32;
    i1 %391 = icmp eq i32 %389, i32 9;
    i1 %392 = or i1 %390, i1 %391;
    i1 %393 = icmp eq i32 %389, i32 10;
    i1 %394 = or i1 %392, i1 %393;
    i1 %395 = icmp eq i32 %389, i32 13;
    i1 %396 = or i1 %394, i1 %395;
    cbr i1 %396(prob = 0.94), ^if.then38, ^b33;
  ^if.then37:
    i32 %397 = add i32 %377, i32 1;
    store i32* %0 with i32 %397;
    ubr ^while.body16;
  ^entry8:
    i32 %398 = load i32* %0;
    ubr ^while.body19;
  ^if.then38:
    i32 %399 = add i32 %387, i32 1;
    store i32* %0 with i32 %399;
    ubr ^while.body17;
  ^b33:
    i32 %400 = phi [^indirect11, i32 %374] [^b32, i32 %387];
    i1 %401 = icmp sle i32 %len, i32 %400;
    cbr i1 %401(prob = 0.5), ^b, ^if.else29;
  ^while.body19:
    i32 %402 = phi [^entry8, i32 %398] [^if.then39, i32 %418];
    i1 %403 = icmp sle i32 %len, i32 %402;
    cbr i1 %403(prob = 0.5), ^indirect12, ^b34;
  ^if.else29:
    i32* %404 = getelementptr &(i32* %buf)[i32 %400];
    i32 %405 = load i32* %404;
    i1 %406 = icmp neq i32 %405, i32 125;
    cbr i1 %406(prob = 0.5), ^b, ^b10;
  ^indirect12:
    i32 %407 = load i32* %0;
    ubr ^b35;
  ^b34:
    i32 %408 = load i32* %0;
    i32* %409 = getelementptr &(i32* %buf)[i32 %408];
    i32 %410 = load i32* %409;
    i1 %411 = icmp eq i32 %410, i32 32;
    i1 %412 = icmp eq i32 %410, i32 9;
    i1 %413 = or i1 %411, i1 %412;
    i1 %414 = icmp eq i32 %410, i32 10;
    i1 %415 = or i1 %413, i1 %414;
    i1 %416 = icmp eq i32 %410, i32 13;
    i1 %417 = or i1 %415, i1 %416;
    cbr i1 %417(prob = 0.94), ^if.then39, ^b35;
  ^if.then39:
    i32 %418 = add i32 %408, i32 1;
    store i32* %0 with i32 %418;
    ubr ^while.body19;
  ^b35:
    i32 %419 = phi [^indirect12, i32 %407] [^b34, i32 %408];
    i1 %420 = icmp sle i32 %len, i32 %419;
    cbr i1 %420(prob = 0.5), ^b, ^b36;
  ^b36:
    i32* %421 = getelementptr &(i32* %buf)[i32 %419];
    i32 %422 = load i32* %421;
    i1 %423 = icmp neq i32 %422, i32 58;
    cbr i1 %423(prob = 0.5), ^b, ^b37;
  ^b37:
    i32 %424 = add i32 %419, i32 1;
    store i32* %0 with i32 %424;
    ubr ^while.body20;
  ^while.body20:
    i32 %425 = phi [^b37, i32 %424] [^if.then40, i32 %439];
    i1 %426 = icmp sle i32 %len, i32 %425;
    cbr i1 %426(prob = 0.5), ^b38, ^b39;
  ^b38:
    i32 %427 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %428 = icmp eq i32 %427, i32 0;
    cbr i1 %428(prob = 0.5), ^b, ^entry6;
  ^b39:
    i32 %429 = load i32* %0;
    i32* %430 = getelementptr &(i32* %buf)[i32 %429];
    i32 %431 = load i32* %430;
    i1 %432 = icmp eq i32 %431, i32 32;
    i1 %433 = icmp eq i32 %431, i32 9;
    i1 %434 = or i1 %432, i1 %433;
    i1 %435 = icmp eq i32 %431, i32 10;
    i1 %436 = or i1 %434, i1 %435;
    i1 %437 = icmp eq i32 %431, i32 13;
    i1 %438 = or i1 %436, i1 %437;
    cbr i1 %438(prob = 0.94), ^if.then40, ^b38;
  ^if.then40:
    i32 %439 = add i32 %429, i32 1;
    store i32* %0 with i32 %439;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %27];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    i1 %21 = icmp eq i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    i1 %23 = icmp eq i32 %19, i32 10;
    i1 %24 = or i1 %22, i1 %23;
    i1 %25 = icmp eq i32 %19, i32 13;
    i1 %26 = or i1 %24, i1 %25;
    cbr i1 %26(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %27 = add i32 %17, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.body1;
  ^while.body2:
    i32 %28 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %29 = icmp sle i32 %4, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
  ^b3:
    i1 %30 = icmp neq i32 %15, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
  ^b4:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 32;
    i1 %35 = icmp eq i32 %33, i32 9;
    i1 %36 = or i1 %34, i1 %35;
    i1 %37 = icmp eq i32 %33, i32 10;
    i1 %38 = or i1 %36, i1 %37;
    i1 %39 = icmp eq i32 %33, i32 13;
    i1 %40 = or i1 %38, i1 %39;
    cbr i1 %40(prob = 0.94), ^if.then2, ^b3;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %41 = add i32 %31, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b5:
    i32 %42 = phi [^if.then1, i32 0] [^if.else, i32 1];
    ret i32 %42;
}
