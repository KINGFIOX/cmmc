internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3] [^if.else5, i32 2] [^if.else9, i32 1];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %19];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %8 = load i32* %0;
    ubr ^while.body;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 0] [^if.else11, i32 0] [^b5, i32 0] [^if.then7, i32 %92] [^if.then9, i32 0] [^if.else16, i32 0] [^if.then12, i32 %127] [^b7, i32 0] [^if.else18, i32 0] [^if.then14, i32 0] [^if.else20, i32 0] [^if.then15, i32 1] [^b9, i32 1] [^if.then18, i32 %162] [^b12, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^if.then19, i32 0] [^if.then20, i32 1] [^if.then22, i32 %192] [^if.else28, i32 0] [^if.else29, i32 0] [^if.else30, i32 0] [^if.else31, i32 0] [^b13, i32 1] [^if.then24, i32 %226] [^if.else33, i32 0] [^if.else34, i32 0] [^if.else35, i32 0] [^if.then25, i32 1] [^b16, i32 0] [^b18, i32 1] [^if.else37, i32 0] [^if.else38, i32 0] [^b19, i32 0] [^b20, i32 0] [^if.else41, i32 0] [^if.else42, i32 0] [^while.body11, i32 0] [^b25, i32 0] [^b26, i32 1] [^while.header2, i32 1] [^b27, i32 0] [^while.body13, i32 1] [^b31, i32 0] [^while.body18, i32 0] [^if.else57, i32 0] [^b34, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %9;
  ^while.body:
    i32 %10 = phi [^entry1, i32 %8] [^if.then, i32 %18];
    i1 %11 = icmp sle i32 %len, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %12 = icmp eq i32 %6, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %13 = load i32* %0;
    i32* %14 = getelementptr &(i32* %buf)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 32;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %17 = phi [^b2, i32 %13] [^if.else1, i32 %13] [^if.else4, i32 %33] [^if.else8, i32 %33];
    i32 %18 = add i32 %17, i32 1;
    store i32* %0 with i32 %18;
    ubr ^while.body;
  ^if.then1:
    i32 %19 = load i32* %0;
    i32* %20 = getelementptr &(i32* %buf)[i32 %19];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %21, i32 123;
    cbr i1 %22(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %23 = icmp eq i32 %6, i32 1;
    cbr i1 %23(prob = 0.5), ^if.then2, ^if.else3;
  ^if.else1:
    i32 %24 = load i32* %14;
    i1 %25 = icmp eq i32 %24, i32 9;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else4;
  ^if.else2:
    i32 %26 = load i32* %20;
    i1 %27 = icmp eq i32 %26, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then2:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %30, i32 43;
    cbr i1 %31(prob = 0.5), ^if.then3, ^if.else6;
  ^if.else3:
    i1 %32 = icmp eq i32 %6, i32 2;
    cbr i1 %32(prob = 0.5), ^if.then4, ^if.else7;
  ^if.else4:
    i32 %33 = load i32* %0;
    i32* %34 = getelementptr &(i32* %buf)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = icmp eq i32 %35, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then, ^if.else8;
  ^if.then3:
    i32 %37 = add i32 %28, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then4:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.else5:
    i32 %40 = load i32* %0;
    i32* %41 = getelementptr &(i32* %buf)[i32 %40];
    i32 %42 = load i32* %41;
    i1 %43 = icmp eq i32 %42, i32 34;
    cbr i1 %43(prob = 0.5), ^2, ^if.else9;
  ^if.else6:
    i32 %44 = load i32* %29;
    i1 %45 = icmp eq i32 %44, i32 45;
    cbr i1 %45(prob = 0.5), ^if.then3, ^indirect;
  ^if.else7:
    i1 %46 = icmp eq i32 %6, i32 3;
    cbr i1 %46(prob = 0.5), ^if.then5, ^if.else10;
  ^if.else8:
    i32 %47 = load i32* %34;
    i1 %48 = icmp eq i32 %47, i32 13;
    cbr i1 %48(prob = 0.5), ^if.then, ^b1;
  ^b3:
    i32 %49 = phi [^if.then3, i32 %37] [^indirect, i32 %51];
    i1 %50 = icmp sle i32 %len, i32 %49;
    cbr i1 %50(prob = 0.5), ^b, ^if.else11;
  ^indirect:
    i32 %51 = load i32* %0;
    ubr ^b3;
  ^if.then5:
    i32 %52 = load i32* %0;
    i32 %53 = add i32 %52, i32 1;
    store i32* %0 with i32 %53;
    ubr ^while.body2;
  ^while.header:
    i32 %54 = phi [^if.then4, i32 %39] [^b4, i32 %89];
    i1 %55 = icmp sgt i32 %len, i32 %54;
    cbr i1 %55(prob = 0.97), ^while.body1, ^indirect1;
  ^if.else9:
    i32 %56 = load i32* %41;
    i1 %57 = icmp slt i32 %56, i32 58;
    i32 %58 = zext i1 %57 to i32;
    i1 %59 = icmp sgt i32 %56, i32 47;
    i32 %60 = select i1 %59 ? i32 %58 : i32 0;
    i1 %61 = icmp eq i32 %60, i32 1;
    cbr i1 %61(prob = 0.5), ^2, ^if.else12;
  ^if.else10:
    i1 %62 = icmp eq i32 %6, i32 4;
    cbr i1 %62(prob = 0.5), ^if.then6, ^if.else13;
  ^indirect1:
    i32 %63 = load i32* %0;
    ubr ^b5;
  ^if.else11:
    i32 %64 = load i32* %0;
    i32* %65 = getelementptr &(i32* %buf)[i32 %64];
    i32 %66 = load i32* %65;
    i1 %67 = icmp slt i32 %66, i32 58;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = icmp sgt i32 %66, i32 47;
    i32 %70 = select i1 %69 ? i32 %68 : i32 0;
    i1 %71 = icmp eq i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^b, ^while.header1;
  ^while.body1:
    i32 %72 = load i32* %0;
    i32* %73 = getelementptr &(i32* %buf)[i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = icmp eq i32 %74, i32 34;
    cbr i1 %75(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %76 = load i32* %0;
    i32 %77 = add i32 %76, i32 1;
    store i32* %0 with i32 %77;
    ubr ^while.body3;
  ^while.body2:
    i32 %78 = phi [^if.then5, i32 %53] [^if.then10, i32 %110];
    i1 %79 = icmp sle i32 %len, i32 %78;
    cbr i1 %79(prob = 0.5), ^if.then8, ^b6;
  ^if.else12:
    i32 %80 = load i32* %0;
    i32* %81 = getelementptr &(i32* %buf)[i32 %80];
    i32 %82 = load i32* %81;
    i1 %83 = icmp eq i32 %82, i32 43;
    cbr i1 %83(prob = 0.5), ^if.then7, ^if.else14;
  ^if.else13:
    i1 %84 = icmp eq i32 %6, i32 5;
    cbr i1 %84(prob = 0.5), ^if.then9, ^if.else15;
  ^b4:
    i32 %85 = load i32* %73;
    i1 %86 = icmp eq i32 %85, i32 92;
    i32 %87 = zext i1 %86 to i32;
    i32 %88 = add i32 %72, i32 1;
    i32 %89 = add i32 %87, i32 %88;
    store i32* %0 with i32 %89;
    ubr ^while.header;
  ^b5:
    i32 %90 = phi [^indirect1, i32 %63] [^while.body1, i32 %72];
    i1 %91 = icmp sle i32 %len, i32 %90;
    cbr i1 %91(prob = 0.5), ^b, ^if.else16;
  ^if.then7:
    i32 %92 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then8:
    i32 %93 = load i32* %0;
    i1 %94 = icmp sgt i32 %len, i32 %93;
    cbr i1 %94(prob = 0.5), ^if.then11, ^b7;
  ^while.header1:
    i32 %95 = phi [^if.else11, i32 %64] [^b10, i32 %153];
    i1 %96 = icmp sgt i32 %len, i32 %95;
    cbr i1 %96(prob = 0.97), ^while.body4, ^indirect2;
  ^b6:
    i32 %97 = load i32* %0;
    i32* %98 = getelementptr &(i32* %buf)[i32 %97];
    i32 %99 = load i32* %98;
    i1 %100 = icmp eq i32 %99, i32 32;
    cbr i1 %100(prob = 0.5), ^if.then10, ^if.else17;
  ^while.body3:
    i32 %101 = phi [^if.then6, i32 %77] [^if.then16, i32 %155];
    i1 %102 = icmp sle i32 %len, i32 %101;
    cbr i1 %102(prob = 0.5), ^if.then13, ^b8;
  ^if.then9:
    i32 %103 = load i32* %0;
    i32 %104 = add i32 %103, i32 3;
    i1 %105 = icmp sle i32 %len, i32 %104;
    cbr i1 %105(prob = 0.5), ^b, ^if.else18;
  ^if.else14:
    i32 %106 = load i32* %81;
    i1 %107 = icmp eq i32 %106, i32 45;
    cbr i1 %107(prob = 0.5), ^if.then12, ^if.else19;
  ^if.else15:
    i1 %108 = icmp eq i32 %6, i32 6;
    cbr i1 %108(prob = 0.5), ^if.then14, ^if.else20;
  ^if.then10:
    i32 %109 = phi [^b6, i32 %97] [^if.else17, i32 %97] [^if.else21, i32 %165] [^if.else26, i32 %165];
    i32 %110 = add i32 %109, i32 1;
    store i32* %0 with i32 %110;
    ubr ^while.body2;
  ^indirect2:
    i32 %111 = load i32* %0;
    ubr ^b11;
  ^if.else16:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = icmp neq i32 %114, i32 34;
    cbr i1 %115(prob = 0.5), ^b, ^b9;
  ^while.body4:
    i32 %116 = load i32* %0;
    i32* %117 = getelementptr &(i32* %buf)[i32 %116];
    i32 %118 = load i32* %117;
    i1 %119 = icmp slt i32 %118, i32 58;
    i32 %120 = zext i1 %119 to i32;
    i1 %121 = icmp sgt i32 %118, i32 47;
    i32 %122 = select i1 %121 ? i32 %120 : i32 0;
    i1 %123 = icmp neq i32 %122, i32 1;
    cbr i1 %123(prob = 0.5), ^b11, ^b10;
  ^if.then11:
    i32* %124 = getelementptr &(i32* %buf)[i32 %93];
    i32 %125 = load i32* %124;
    i1 %126 = icmp eq i32 %125, i32 93;
    cbr i1 %126(prob = 0.5), ^if.then15, ^b7;
  ^if.then12:
    i32 %127 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b7:
    i32 %128 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %129 = icmp eq i32 %128, i32 0;
    cbr i1 %129(prob = 0.5), ^b, ^entry2;
  ^if.then13:
    i32 %130 = load i32* %0;
    i1 %131 = icmp sgt i32 %len, i32 %130;
    cbr i1 %131(prob = 0.5), ^if.then17, ^b12;
  ^if.else17:
    i32 %132 = load i32* %98;
    i1 %133 = icmp eq i32 %132, i32 9;
    cbr i1 %133(prob = 0.5), ^if.then10, ^if.else21;
  ^b8:
    i32 %134 = load i32* %0;
    i32* %135 = getelementptr &(i32* %buf)[i32 %134];
    i32 %136 = load i32* %135;
    i1 %137 = icmp eq i32 %136, i32 32;
    cbr i1 %137(prob = 0.5), ^if.then16, ^if.else22;
  ^if.else18:
    i32* %138 = getelementptr &(i32* %buf)[i32 %103];
    i32 %139 = load i32* %138;
    i1 %140 = icmp neq i32 %139, i32 116;
    cbr i1 %140(prob = 0.5), ^b, ^if.else23;
  ^if.then14:
    i32 %141 = load i32* %0;
    i32 %142 = add i32 %141, i32 4;
    i1 %143 = icmp sle i32 %len, i32 %142;
    cbr i1 %143(prob = 0.5), ^b, ^if.else24;
  ^if.else19:
    i32 %144 = load i32* %0;
    i32* %145 = getelementptr &(i32* %buf)[i32 %144];
    i32 %146 = load i32* %145;
    i1 %147 = icmp eq i32 %146, i32 116;
    cbr i1 %147(prob = 0.5), ^if.then18, ^if.else25;
  ^if.else20:
    i1 %148 = icmp eq i32 %6, i32 7;
    cbr i1 %148(prob = 0.5), ^if.then19, ^b;
  ^if.then15:
    i32 %149 = load i32* %0;
    i32 %150 = add i32 %149, i32 1;
    store i32* %0 with i32 %150;
    ubr ^b;
  ^b9:
    i32 %151 = phi [^if.else16, i32 %112] [^b25, i32 %290] [^if.else57, i32 %418];
    i32 %152 = add i32 %151, i32 1;
    store i32* %0 with i32 %152;
    ubr ^b;
  ^b10:
    i32 %153 = add i32 %116, i32 1;
    store i32* %0 with i32 %153;
    ubr ^while.header1;
  ^if.then16:
    i32 %154 = phi [^b8, i32 %134] [^if.else22, i32 %134] [^if.else27, i32 %197] [^if.else32, i32 %197];
    i32 %155 = add i32 %154, i32 1;
    store i32* %0 with i32 %155;
    ubr ^while.body3;
  ^b11:
    i32 %156 = phi [^indirect2, i32 %111] [^while.body4, i32 %116];
    i1 %157 = icmp sgt i32 %len, i32 %156;
    cbr i1 %157(prob = 0.5), ^if.then21, ^indirect3;
  ^entry2:
    i32 %158 = load i32* %0;
    ubr ^while.body5;
  ^if.then17:
    i32* %159 = getelementptr &(i32* %buf)[i32 %130];
    i32 %160 = load i32* %159;
    i1 %161 = icmp eq i32 %160, i32 125;
    cbr i1 %161(prob = 0.5), ^if.then20, ^b12;
  ^if.then18:
    i32 %162 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b12:
    i32 %163 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %164 = icmp eq i32 %163, i32 0;
    cbr i1 %164(prob = 0.5), ^b, ^entry3;
  ^if.else21:
    i32 %165 = load i32* %0;
    i32* %166 = getelementptr &(i32* %buf)[i32 %165];
    i32 %167 = load i32* %166;
    i1 %168 = icmp eq i32 %167, i32 10;
    cbr i1 %168(prob = 0.5), ^if.then10, ^if.else26;
  ^if.else22:
    i32 %169 = load i32* %135;
    i1 %170 = icmp eq i32 %169, i32 9;
    cbr i1 %170(prob = 0.5), ^if.then16, ^if.else27;
  ^if.else23:
    i32 %171 = load i32* %0;
    i32 %172 = add i32 %171, i32 1;
    i32* %173 = getelementptr &(i32* %buf)[i32 %172];
    i32 %174 = load i32* %173;
    i1 %175 = icmp neq i32 %174, i32 114;
    cbr i1 %175(prob = 0.5), ^b, ^if.else28;
  ^if.else24:
    i32* %176 = getelementptr &(i32* %buf)[i32 %141];
    i32 %177 = load i32* %176;
    i1 %178 = icmp neq i32 %177, i32 102;
    cbr i1 %178(prob = 0.5), ^b, ^if.else29;
  ^if.then19:
    i32 %179 = load i32* %0;
    i32 %180 = add i32 %179, i32 3;
    i1 %181 = icmp sle i32 %len, i32 %180;
    cbr i1 %181(prob = 0.5), ^b, ^if.else30;
  ^if.else25:
    i32 %182 = load i32* %145;
    i1 %183 = icmp eq i32 %182, i32 102;
    cbr i1 %183(prob = 0.5), ^if.then22, ^if.else31;
  ^if.then20:
    i32 %184 = load i32* %0;
    i32 %185 = add i32 %184, i32 1;
    store i32* %0 with i32 %185;
    ubr ^b;
  ^indirect3:
    i32 %186 = load i32* %0;
    ubr ^b13;
  ^if.then21:
    i32 %187 = load i32* %0;
    i32* %188 = getelementptr &(i32* %buf)[i32 %187];
    i32 %189 = load i32* %188;
    i1 %190 = icmp eq i32 %189, i32 46;
    cbr i1 %190(prob = 0.5), ^if.then23, ^b13;
  ^entry3:
    i32 %191 = load i32* %0;
    ubr ^while.body6;
  ^if.then22:
    i32 %192 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^while.body5:
    i32 %193 = phi [^entry2, i32 %158] [^if.then26, i32 %262];
    i1 %194 = icmp sle i32 %len, i32 %193;
    cbr i1 %194(prob = 0.5), ^b14, ^b15;
  ^if.else26:
    i32 %195 = load i32* %166;
    i1 %196 = icmp eq i32 %195, i32 13;
    cbr i1 %196(prob = 0.5), ^if.then10, ^if.then8;
  ^if.else27:
    i32 %197 = load i32* %0;
    i32* %198 = getelementptr &(i32* %buf)[i32 %197];
    i32 %199 = load i32* %198;
    i1 %200 = icmp eq i32 %199, i32 10;
    cbr i1 %200(prob = 0.5), ^if.then16, ^if.else32;
  ^if.else28:
    i32 %201 = add i32 %171, i32 2;
    i32* %202 = getelementptr &(i32* %buf)[i32 %201];
    i32 %203 = load i32* %202;
    i1 %204 = icmp neq i32 %203, i32 117;
    cbr i1 %204(prob = 0.5), ^b, ^if.else33;
  ^if.else29:
    i32 %205 = load i32* %0;
    i32 %206 = add i32 %205, i32 1;
    i32* %207 = getelementptr &(i32* %buf)[i32 %206];
    i32 %208 = load i32* %207;
    i1 %209 = icmp neq i32 %208, i32 97;
    cbr i1 %209(prob = 0.5), ^b, ^if.else34;
  ^if.else30:
    i32* %210 = getelementptr &(i32* %buf)[i32 %179];
    i32 %211 = load i32* %210;
    i1 %212 = icmp neq i32 %211, i32 110;
    cbr i1 %212(prob = 0.5), ^b, ^if.else35;
  ^if.else31:
    i32 %213 = load i32* %0;
    i32* %214 = getelementptr &(i32* %buf)[i32 %213];
    i32 %215 = load i32* %214;
    i1 %216 = icmp eq i32 %215, i32 110;
    cbr i1 %216(prob = 0.5), ^if.then24, ^b;
  ^if.then23:
    i32 %217 = phi [^if.then21, i32 %187] [^while.body7, i32 %218];
    i32 %218 = add i32 %217, i32 1;
    i1 %219 = icmp sgt i32 %len, i32 %218;
    store i32* %0 with i32 %218;
    cbr i1 %219(prob = 0.97), ^while.body7, ^b13;
  ^b13:
    i32 %220 = phi [^indirect3, i32 %186] [^if.then21, i32 %187] [^if.then23, i32 %218] [^while.body7, i32 %218];
    i1 %221 = icmp sgt i32 %len, i32 %220;
    cbr i1 %221(prob = 0.5), ^if.then25, ^b;
  ^b14:
    i32 %222 = load i32* %0;
    i32* %223 = getelementptr &(i32* %buf)[i32 %222];
    i32 %224 = load i32* %223;
    i1 %225 = icmp eq i32 %224, i32 44;
    cbr i1 %225(prob = 0.97), ^while.body8, ^while.body9;
  ^if.then24:
    i32 %226 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b15:
    i32 %227 = load i32* %0;
    i32* %228 = getelementptr &(i32* %buf)[i32 %227];
    i32 %229 = load i32* %228;
    i1 %230 = icmp eq i32 %229, i32 32;
    cbr i1 %230(prob = 0.5), ^if.then26, ^if.else36;
  ^while.body6:
    i32 %231 = phi [^entry3, i32 %191] [^if.then28, i32 %287];
    i1 %232 = icmp sle i32 %len, i32 %231;
    cbr i1 %232(prob = 0.5), ^b16, ^b17;
  ^if.else32:
    i32 %233 = load i32* %198;
    i1 %234 = icmp eq i32 %233, i32 13;
    cbr i1 %234(prob = 0.5), ^if.then16, ^if.then13;
  ^if.else33:
    i32 %235 = load i32* %0;
    i32 %236 = add i32 %235, i32 3;
    i32* %237 = getelementptr &(i32* %buf)[i32 %236];
    i32 %238 = load i32* %237;
    i1 %239 = icmp neq i32 %238, i32 101;
    cbr i1 %239(prob = 0.5), ^b, ^b18;
  ^if.else34:
    i32 %240 = add i32 %205, i32 2;
    i32* %241 = getelementptr &(i32* %buf)[i32 %240];
    i32 %242 = load i32* %241;
    i1 %243 = icmp neq i32 %242, i32 108;
    cbr i1 %243(prob = 0.5), ^b, ^if.else37;
  ^if.else35:
    i32 %244 = load i32* %0;
    i32 %245 = add i32 %244, i32 1;
    i32* %246 = getelementptr &(i32* %buf)[i32 %245];
    i32 %247 = load i32* %246;
    i1 %248 = icmp neq i32 %247, i32 117;
    cbr i1 %248(prob = 0.5), ^b, ^if.else38;
  ^while.body7:
    i32* %249 = getelementptr &(i32* %buf)[i32 %218];
    i32 %250 = load i32* %249;
    i1 %251 = icmp slt i32 %250, i32 58;
    i32 %252 = zext i1 %251 to i32;
    i1 %253 = icmp sgt i32 %250, i32 47;
    i32 %254 = select i1 %253 ? i32 %252 : i32 0;
    i1 %255 = icmp neq i32 %254, i32 1;
    cbr i1 %255(prob = 0.5), ^b13, ^if.then23;
  ^while.body8:
    i32 %256 = add i32 %222, i32 1;
    store i32* %0 with i32 %256;
    ubr ^while.body10;
  ^if.then25:
    i32 %257 = load i32* %0;
    i32* %258 = getelementptr &(i32* %buf)[i32 %257];
    i32 %259 = load i32* %258;
    i1 %260 = icmp eq i32 %259, i32 101;
    cbr i1 %260(prob = 0.5), ^if.then27, ^b;
  ^if.then26:
    i32 %261 = phi [^b15, i32 %227] [^if.else36, i32 %227] [^if.else39, i32 %299] [^if.else44, i32 %299];
    i32 %262 = add i32 %261, i32 1;
    store i32* %0 with i32 %262;
    ubr ^while.body5;
  ^b16:
    i32 %263 = load i32* %0;
    i1 %264 = icmp sle i32 %len, i32 %263;
    cbr i1 %264(prob = 0.5), ^b, ^b20;
  ^while.body9:
    i32 %265 = phi [^b14, i32 %222] [^if.then30, i32 %322];
    i1 %266 = icmp sle i32 %len, i32 %265;
    cbr i1 %266(prob = 0.5), ^b19, ^b21;
  ^if.else36:
    i32 %267 = load i32* %228;
    i1 %268 = icmp eq i32 %267, i32 9;
    cbr i1 %268(prob = 0.5), ^if.then26, ^if.else39;
  ^b17:
    i32 %269 = load i32* %0;
    i32* %270 = getelementptr &(i32* %buf)[i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = icmp eq i32 %271, i32 32;
    cbr i1 %272(prob = 0.5), ^if.then28, ^if.else40;
  ^b18:
    i32 %273 = phi [^if.else33, i32 %235] [^if.else42, i32 %309];
    i32 %274 = add i32 %273, i32 4;
    store i32* %0 with i32 %274;
    ubr ^b;
  ^if.else37:
    i32 %275 = load i32* %0;
    i32 %276 = add i32 %275, i32 3;
    i32* %277 = getelementptr &(i32* %buf)[i32 %276];
    i32 %278 = load i32* %277;
    i1 %279 = icmp neq i32 %278, i32 115;
    cbr i1 %279(prob = 0.5), ^b, ^if.else41;
  ^if.else38:
    i32 %280 = add i32 %244, i32 2;
    i32* %281 = getelementptr &(i32* %buf)[i32 %280];
    i32 %282 = load i32* %281;
    i1 %283 = icmp neq i32 %282, i32 108;
    cbr i1 %283(prob = 0.5), ^b, ^if.else42;
  ^if.then27:
    i32 %284 = add i32 %257, i32 1;
    i1 %285 = icmp sgt i32 %len, i32 %284;
    store i32* %0 with i32 %284;
    cbr i1 %285(prob = 0.5), ^if.then29, ^b22;
  ^if.then28:
    i32 %286 = phi [^b17, i32 %269] [^if.else40, i32 %269] [^if.else45, i32 %336] [^if.else48, i32 %336];
    i32 %287 = add i32 %286, i32 1;
    store i32* %0 with i32 %287;
    ubr ^while.body6;
  ^while.body10:
    i32 %288 = phi [^while.body8, i32 %256] [^if.then32, i32 %347];
    i1 %289 = icmp sle i32 %len, i32 %288;
    cbr i1 %289(prob = 0.5), ^while.body11, ^b24;
  ^b19:
    i32 %290 = load i32* %0;
    i1 %291 = icmp sle i32 %len, i32 %290;
    cbr i1 %291(prob = 0.5), ^b, ^b25;
  ^b20:
    i32* %292 = getelementptr &(i32* %buf)[i32 %263];
    i32 %293 = load i32* %292;
    i1 %294 = icmp neq i32 %293, i32 58;
    cbr i1 %294(prob = 0.5), ^b, ^b23;
  ^b21:
    i32 %295 = load i32* %0;
    i32* %296 = getelementptr &(i32* %buf)[i32 %295];
    i32 %297 = load i32* %296;
    i1 %298 = icmp eq i32 %297, i32 32;
    cbr i1 %298(prob = 0.5), ^if.then30, ^if.else43;
  ^if.else39:
    i32 %299 = load i32* %0;
    i32* %300 = getelementptr &(i32* %buf)[i32 %299];
    i32 %301 = load i32* %300;
    i1 %302 = icmp eq i32 %301, i32 10;
    cbr i1 %302(prob = 0.5), ^if.then26, ^if.else44;
  ^if.else40:
    i32 %303 = load i32* %270;
    i1 %304 = icmp eq i32 %303, i32 9;
    cbr i1 %304(prob = 0.5), ^if.then28, ^if.else45;
  ^if.else41:
    i32 %305 = add i32 %275, i32 4;
    i32* %306 = getelementptr &(i32* %buf)[i32 %305];
    i32 %307 = load i32* %306;
    i1 %308 = icmp neq i32 %307, i32 101;
    cbr i1 %308(prob = 0.5), ^b, ^b26;
  ^if.else42:
    i32 %309 = load i32* %0;
    i32 %310 = add i32 %309, i32 3;
    i32* %311 = getelementptr &(i32* %buf)[i32 %310];
    i32 %312 = load i32* %311;
    i1 %313 = icmp neq i32 %312, i32 108;
    cbr i1 %313(prob = 0.5), ^b, ^b18;
  ^if.then29:
    i32* %314 = getelementptr &(i32* %buf)[i32 %284];
    i32 %315 = load i32* %314;
    i1 %316 = icmp eq i32 %315, i32 43;
    cbr i1 %316(prob = 0.5), ^if.then31, ^indirect4;
  ^b22:
    i32 %317 = phi [^if.then27, i32 %284] [^if.then31, i32 %343] [^indirect4, i32 %344];
    i1 %318 = icmp sgt i32 %len, i32 %317;
    cbr i1 %318(prob = 0.5), ^if.then33, ^indirect5;
  ^while.body11:
    i32 %319 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %320 = icmp eq i32 %319, i32 0;
    cbr i1 %320(prob = 0.5), ^b, ^entry2;
  ^if.then30:
    i32 %321 = phi [^b21, i32 %295] [^if.else43, i32 %295] [^if.else47, i32 %356] [^if.else50, i32 %356];
    i32 %322 = add i32 %321, i32 1;
    store i32* %0 with i32 %322;
    ubr ^while.body9;
  ^b23:
    i32 %323 = load i32* %0;
    i32 %324 = add i32 %323, i32 1;
    store i32* %0 with i32 %324;
    ubr ^while.body12;
  ^b24:
    i32 %325 = load i32* %0;
    i32* %326 = getelementptr &(i32* %buf)[i32 %325];
    i32 %327 = load i32* %326;
    i1 %328 = icmp eq i32 %327, i32 32;
    cbr i1 %328(prob = 0.5), ^if.then32, ^if.else46;
  ^b25:
    i32* %329 = getelementptr &(i32* %buf)[i32 %290];
    i32 %330 = load i32* %329;
    i1 %331 = icmp neq i32 %330, i32 93;
    cbr i1 %331(prob = 0.5), ^b, ^b9;
  ^if.else43:
    i32 %332 = load i32* %296;
    i1 %333 = icmp eq i32 %332, i32 9;
    cbr i1 %333(prob = 0.5), ^if.then30, ^if.else47;
  ^if.else44:
    i32 %334 = load i32* %300;
    i1 %335 = icmp eq i32 %334, i32 13;
    cbr i1 %335(prob = 0.5), ^if.then26, ^b14;
  ^if.else45:
    i32 %336 = load i32* %0;
    i32* %337 = getelementptr &(i32* %buf)[i32 %336];
    i32 %338 = load i32* %337;
    i1 %339 = icmp eq i32 %338, i32 10;
    cbr i1 %339(prob = 0.5), ^if.then28, ^if.else48;
  ^b26:
    i32 %340 = load i32* %0;
    i32 %341 = add i32 %340, i32 5;
    store i32* %0 with i32 %341;
    ubr ^b;
  ^if.then31:
    i32 %342 = load i32* %0;
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    ubr ^b22;
  ^indirect4:
    i32 %344 = load i32* %0;
    ubr ^b22;
  ^indirect5:
    i32 %345 = load i32* %0;
    ubr ^while.header2;
  ^if.then32:
    i32 %346 = phi [^b24, i32 %325] [^if.else46, i32 %325] [^if.else49, i32 %366] [^if.else51, i32 %366];
    i32 %347 = add i32 %346, i32 1;
    store i32* %0 with i32 %347;
    ubr ^while.body10;
  ^if.then33:
    i32 %348 = load i32* %0;
    i32* %349 = getelementptr &(i32* %buf)[i32 %348];
    i32 %350 = load i32* %349;
    i1 %351 = icmp eq i32 %350, i32 45;
    cbr i1 %351(prob = 0.5), ^if.then34, ^while.header2;
  ^if.else46:
    i32 %352 = load i32* %326;
    i1 %353 = icmp eq i32 %352, i32 9;
    cbr i1 %353(prob = 0.5), ^if.then32, ^if.else49;
  ^while.body12:
    i32 %354 = phi [^b23, i32 %324] [^if.then35, i32 %387];
    i1 %355 = icmp sle i32 %len, i32 %354;
    cbr i1 %355(prob = 0.5), ^b27, ^b28;
  ^if.else47:
    i32 %356 = load i32* %0;
    i32* %357 = getelementptr &(i32* %buf)[i32 %356];
    i32 %358 = load i32* %357;
    i1 %359 = icmp eq i32 %358, i32 10;
    cbr i1 %359(prob = 0.5), ^if.then30, ^if.else50;
  ^if.else48:
    i32 %360 = load i32* %337;
    i1 %361 = icmp eq i32 %360, i32 13;
    cbr i1 %361(prob = 0.5), ^if.then28, ^b16;
  ^if.then34:
    i32 %362 = phi [^if.then33, i32 %348] [^while.body13, i32 %378];
    i32 %363 = add i32 %362, i32 1;
    store i32* %0 with i32 %363;
    ubr ^while.header2;
  ^while.header2:
    i32 %364 = phi [^indirect5, i32 %345] [^if.then33, i32 %348] [^if.then34, i32 %363];
    i1 %365 = icmp sgt i32 %len, i32 %364;
    cbr i1 %365(prob = 0.97), ^while.body13, ^b;
  ^if.else49:
    i32 %366 = load i32* %0;
    i32* %367 = getelementptr &(i32* %buf)[i32 %366];
    i32 %368 = load i32* %367;
    i1 %369 = icmp eq i32 %368, i32 10;
    cbr i1 %369(prob = 0.5), ^if.then32, ^if.else51;
  ^b27:
    i32 %370 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %371 = icmp eq i32 %370, i32 0;
    cbr i1 %371(prob = 0.5), ^b, ^entry4;
  ^b28:
    i32 %372 = load i32* %0;
    i32* %373 = getelementptr &(i32* %buf)[i32 %372];
    i32 %374 = load i32* %373;
    i1 %375 = icmp eq i32 %374, i32 32;
    cbr i1 %375(prob = 0.5), ^if.then35, ^if.else52;
  ^if.else50:
    i32 %376 = load i32* %357;
    i1 %377 = icmp eq i32 %376, i32 13;
    cbr i1 %377(prob = 0.5), ^if.then30, ^b19;
  ^while.body13:
    i32 %378 = load i32* %0;
    i32* %379 = getelementptr &(i32* %buf)[i32 %378];
    i32 %380 = load i32* %379;
    i1 %381 = icmp slt i32 %380, i32 58;
    i32 %382 = zext i1 %381 to i32;
    i1 %383 = icmp sgt i32 %380, i32 47;
    i32 %384 = select i1 %383 ? i32 %382 : i32 0;
    i1 %385 = icmp neq i32 %384, i32 1;
    cbr i1 %385(prob = 0.5), ^b, ^if.then34;
  ^if.then35:
    i32 %386 = phi [^b28, i32 %372] [^if.else52, i32 %372] [^if.else53, i32 %395] [^if.else54, i32 %395];
    i32 %387 = add i32 %386, i32 1;
    store i32* %0 with i32 %387;
    ubr ^while.body12;
  ^entry4:
    i32 %388 = load i32* %0;
    ubr ^while.body14;
  ^if.else51:
    i32 %389 = load i32* %367;
    i1 %390 = icmp eq i32 %389, i32 13;
    cbr i1 %390(prob = 0.5), ^if.then32, ^while.body11;
  ^if.else52:
    i32 %391 = load i32* %373;
    i1 %392 = icmp eq i32 %391, i32 9;
    cbr i1 %392(prob = 0.5), ^if.then35, ^if.else53;
  ^while.body14:
    i32 %393 = phi [^entry4, i32 %388] [^if.then36, i32 %411];
    i1 %394 = icmp sle i32 %len, i32 %393;
    cbr i1 %394(prob = 0.5), ^b29, ^b30;
  ^if.else53:
    i32 %395 = load i32* %0;
    i32* %396 = getelementptr &(i32* %buf)[i32 %395];
    i32 %397 = load i32* %396;
    i1 %398 = icmp eq i32 %397, i32 10;
    cbr i1 %398(prob = 0.5), ^if.then35, ^if.else54;
  ^b29:
    i32 %399 = load i32* %0;
    i32* %400 = getelementptr &(i32* %buf)[i32 %399];
    i32 %401 = load i32* %400;
    i1 %402 = icmp eq i32 %401, i32 44;
    cbr i1 %402(prob = 0.97), ^while.body15, ^while.body16;
  ^b30:
    i32 %403 = load i32* %0;
    i32* %404 = getelementptr &(i32* %buf)[i32 %403];
    i32 %405 = load i32* %404;
    i1 %406 = icmp eq i32 %405, i32 32;
    cbr i1 %406(prob = 0.5), ^if.then36, ^if.else55;
  ^if.else54:
    i32 %407 = load i32* %396;
    i1 %408 = icmp eq i32 %407, i32 13;
    cbr i1 %408(prob = 0.5), ^if.then35, ^b27;
  ^while.body15:
    i32 %409 = add i32 %399, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body17;
  ^if.then36:
    i32 %410 = phi [^b30, i32 %403] [^if.else55, i32 %403] [^if.else56, i32 %424] [^if.else59, i32 %424];
    i32 %411 = add i32 %410, i32 1;
    store i32* %0 with i32 %411;
    ubr ^while.body14;
  ^while.body16:
    i32 %412 = phi [^b29, i32 %399] [^if.then37, i32 %431];
    i1 %413 = icmp sle i32 %len, i32 %412;
    cbr i1 %413(prob = 0.5), ^b31, ^b32;
  ^if.else55:
    i32 %414 = load i32* %404;
    i1 %415 = icmp eq i32 %414, i32 9;
    cbr i1 %415(prob = 0.5), ^if.then36, ^if.else56;
  ^while.body17:
    i32 %416 = phi [^while.body15, i32 %409] [^if.then38, i32 %444];
    i1 %417 = icmp sle i32 %len, i32 %416;
    cbr i1 %417(prob = 0.5), ^while.body18, ^b33;
  ^b31:
    i32 %418 = load i32* %0;
    i1 %419 = icmp sle i32 %len, i32 %418;
    cbr i1 %419(prob = 0.5), ^b, ^if.else57;
  ^b32:
    i32 %420 = load i32* %0;
    i32* %421 = getelementptr &(i32* %buf)[i32 %420];
    i32 %422 = load i32* %421;
    i1 %423 = icmp eq i32 %422, i32 32;
    cbr i1 %423(prob = 0.5), ^if.then37, ^if.else58;
  ^if.else56:
    i32 %424 = load i32* %0;
    i32* %425 = getelementptr &(i32* %buf)[i32 %424];
    i32 %426 = load i32* %425;
    i1 %427 = icmp eq i32 %426, i32 10;
    cbr i1 %427(prob = 0.5), ^if.then36, ^if.else59;
  ^while.body18:
    i32 %428 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %429 = icmp eq i32 %428, i32 0;
    cbr i1 %429(prob = 0.5), ^b, ^entry5;
  ^if.then37:
    i32 %430 = phi [^b32, i32 %420] [^if.else58, i32 %420] [^if.else61, i32 %448] [^if.else63, i32 %448];
    i32 %431 = add i32 %430, i32 1;
    store i32* %0 with i32 %431;
    ubr ^while.body16;
  ^b33:
    i32 %432 = load i32* %0;
    i32* %433 = getelementptr &(i32* %buf)[i32 %432];
    i32 %434 = load i32* %433;
    i1 %435 = icmp eq i32 %434, i32 32;
    cbr i1 %435(prob = 0.5), ^if.then38, ^if.else60;
  ^if.else57:
    i32* %436 = getelementptr &(i32* %buf)[i32 %418];
    i32 %437 = load i32* %436;
    i1 %438 = icmp neq i32 %437, i32 125;
    cbr i1 %438(prob = 0.5), ^b, ^b9;
  ^if.else58:
    i32 %439 = load i32* %421;
    i1 %440 = icmp eq i32 %439, i32 9;
    cbr i1 %440(prob = 0.5), ^if.then37, ^if.else61;
  ^if.else59:
    i32 %441 = load i32* %425;
    i1 %442 = icmp eq i32 %441, i32 13;
    cbr i1 %442(prob = 0.5), ^if.then36, ^b29;
  ^if.then38:
    i32 %443 = phi [^b33, i32 %432] [^if.else60, i32 %432] [^if.else62, i32 %454] [^if.else64, i32 %454];
    i32 %444 = add i32 %443, i32 1;
    store i32* %0 with i32 %444;
    ubr ^while.body17;
  ^entry5:
    i32 %445 = load i32* %0;
    ubr ^while.body19;
  ^if.else60:
    i32 %446 = load i32* %433;
    i1 %447 = icmp eq i32 %446, i32 9;
    cbr i1 %447(prob = 0.5), ^if.then38, ^if.else62;
  ^if.else61:
    i32 %448 = load i32* %0;
    i32* %449 = getelementptr &(i32* %buf)[i32 %448];
    i32 %450 = load i32* %449;
    i1 %451 = icmp eq i32 %450, i32 10;
    cbr i1 %451(prob = 0.5), ^if.then37, ^if.else63;
  ^while.body19:
    i32 %452 = phi [^entry5, i32 %445] [^if.then39, i32 %469];
    i1 %453 = icmp sle i32 %len, i32 %452;
    cbr i1 %453(prob = 0.5), ^b34, ^b35;
  ^if.else62:
    i32 %454 = load i32* %0;
    i32* %455 = getelementptr &(i32* %buf)[i32 %454];
    i32 %456 = load i32* %455;
    i1 %457 = icmp eq i32 %456, i32 10;
    cbr i1 %457(prob = 0.5), ^if.then38, ^if.else64;
  ^if.else63:
    i32 %458 = load i32* %449;
    i1 %459 = icmp eq i32 %458, i32 13;
    cbr i1 %459(prob = 0.5), ^if.then37, ^b31;
  ^b34:
    i32 %460 = load i32* %0;
    i1 %461 = icmp sle i32 %len, i32 %460;
    cbr i1 %461(prob = 0.5), ^b, ^b36;
  ^b35:
    i32 %462 = load i32* %0;
    i32* %463 = getelementptr &(i32* %buf)[i32 %462];
    i32 %464 = load i32* %463;
    i1 %465 = icmp eq i32 %464, i32 32;
    cbr i1 %465(prob = 0.5), ^if.then39, ^if.else65;
  ^if.else64:
    i32 %466 = load i32* %455;
    i1 %467 = icmp eq i32 %466, i32 13;
    cbr i1 %467(prob = 0.5), ^if.then38, ^while.body18;
  ^if.then39:
    i32 %468 = phi [^b35, i32 %462] [^if.else65, i32 %462] [^if.else66, i32 %477] [^if.else67, i32 %477];
    i32 %469 = add i32 %468, i32 1;
    store i32* %0 with i32 %469;
    ubr ^while.body19;
  ^b36:
    i32* %470 = getelementptr &(i32* %buf)[i32 %460];
    i32 %471 = load i32* %470;
    i1 %472 = icmp neq i32 %471, i32 58;
    cbr i1 %472(prob = 0.5), ^b, ^b37;
  ^if.else65:
    i32 %473 = load i32* %463;
    i1 %474 = icmp eq i32 %473, i32 9;
    cbr i1 %474(prob = 0.5), ^if.then39, ^if.else66;
  ^b37:
    i32 %475 = load i32* %0;
    i32 %476 = add i32 %475, i32 1;
    store i32* %0 with i32 %476;
    ubr ^while.body20;
  ^if.else66:
    i32 %477 = load i32* %0;
    i32* %478 = getelementptr &(i32* %buf)[i32 %477];
    i32 %479 = load i32* %478;
    i1 %480 = icmp eq i32 %479, i32 10;
    cbr i1 %480(prob = 0.5), ^if.then39, ^if.else67;
  ^while.body20:
    i32 %481 = phi [^b37, i32 %476] [^if.then40, i32 %492];
    i1 %482 = icmp sle i32 %len, i32 %481;
    cbr i1 %482(prob = 0.5), ^b38, ^b39;
  ^if.else67:
    i32 %483 = load i32* %478;
    i1 %484 = icmp eq i32 %483, i32 13;
    cbr i1 %484(prob = 0.5), ^if.then39, ^b34;
  ^b38:
    i32 %485 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %486 = icmp eq i32 %485, i32 0;
    cbr i1 %486(prob = 0.5), ^b, ^entry4;
  ^b39:
    i32 %487 = load i32* %0;
    i32* %488 = getelementptr &(i32* %buf)[i32 %487];
    i32 %489 = load i32* %488;
    i1 %490 = icmp eq i32 %489, i32 32;
    cbr i1 %490(prob = 0.5), ^if.then40, ^if.else68;
  ^if.then40:
    i32 %491 = phi [^b39, i32 %487] [^if.else68, i32 %487] [^if.else69, i32 %495] [^if.else70, i32 %495];
    i32 %492 = add i32 %491, i32 1;
    store i32* %0 with i32 %492;
    ubr ^while.body20;
  ^if.else68:
    i32 %493 = load i32* %488;
    i1 %494 = icmp eq i32 %493, i32 9;
    cbr i1 %494(prob = 0.5), ^if.then40, ^if.else69;
  ^if.else69:
    i32 %495 = load i32* %0;
    i32* %496 = getelementptr &(i32* %buf)[i32 %495];
    i32 %497 = load i32* %496;
    i1 %498 = icmp eq i32 %497, i32 10;
    cbr i1 %498(prob = 0.5), ^if.then40, ^if.else70;
  ^if.else70:
    i32 %499 = load i32* %496;
    i1 %500 = icmp eq i32 %499, i32 13;
    cbr i1 %500(prob = 0.5), ^if.then40, ^b38;
}
internal [50000000 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %22];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %21 = phi [^b2, i32 %17] [^if.else, i32 %17] [^if.else1, i32 %31] [^if.else4, i32 %31];
    i32 %22 = add i32 %21, i32 1;
    store i32* %pos with i32 %22;
    ubr ^while.body1;
  ^while.body2:
    i32 %23 = phi [^b1, i32 %16] [^if.then2, i32 %36];
    i1 %24 = icmp sle i32 %4, i32 %23;
    cbr i1 %24(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i1 %25 = icmp eq i32 %19, i32 9;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else1;
  ^b3:
    i1 %26 = icmp neq i32 %15, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then1, ^if.else2;
  ^b4:
    i32 %27 = load i32* %pos;
    i32* %28 = getelementptr &(i32* %5)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = icmp eq i32 %29, i32 32;
    cbr i1 %30(prob = 0.5), ^if.then2, ^if.else3;
  ^if.else1:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 10;
    cbr i1 %34(prob = 0.5), ^if.then, ^if.else4;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %35 = phi [^b4, i32 %27] [^if.else3, i32 %27] [^if.else5, i32 %39] [^if.else6, i32 %39];
    i32 %36 = add i32 %35, i32 1;
    store i32* %pos with i32 %36;
    ubr ^while.body2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.else3:
    i1 %37 = icmp eq i32 %29, i32 9;
    cbr i1 %37(prob = 0.5), ^if.then2, ^if.else5;
  ^if.else4:
    i1 %38 = icmp eq i32 %33, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then, ^b1;
  ^if.else5:
    i32 %39 = load i32* %pos;
    i32* %40 = getelementptr &(i32* %5)[i32 %39];
    i32 %41 = load i32* %40;
    i1 %42 = icmp eq i32 %41, i32 10;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else6;
  ^b5:
    i32 %43 = phi [^if.then1, i32 0] [^if.else2, i32 1];
    ret i32 %43;
  ^if.else6:
    i1 %44 = icmp eq i32 %41, i32 13;
    cbr i1 %44(prob = 0.5), ^if.then2, ^b3;
}
