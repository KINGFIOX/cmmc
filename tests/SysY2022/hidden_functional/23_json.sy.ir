internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32* %len1 = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %len1 with i32 %len;
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^b, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^if.then, i32 %11] [^if.then3, i32 %20] [^if.then7, i32 %35] [^if.then11, i32 %51];
    i1 %4 = scmp ge i32 %3, i32 %len;
    cbr i1 %4(prob = 0.5), ^b1, ^b2;
^b:
    i32 %5 = phi [^entry, i32 0] [^if.then2, i32 %18] [^if.then6, i32 %34] [^b3, i32 0] [^if.then9, i32 %47] [^b4, i32 0] [^if.else9, i32 0] [^if.else11, i32 0] [^if.then15, i32 %85] [^b7, i32 0] [^if.then16, i32 1] [^if.then18, i32 0] [^if.then21, i32 %114] [^b9, i32 0] [^if.else18, i32 0] [^if.then23, i32 0] [^if.else20, i32 0] [^if.then27, i32 %155] [^b13, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^if.then28, i32 0] [^if.then33, i32 %201] [^if.else28, i32 0] [^if.else29, i32 0] [^if.else30, i32 0] [^b17, i32 1] [^if.then37, i32 %238] [^if.else34, i32 0] [^if.else35, i32 0] [^if.else36, i32 0] [^if.else37, i32 0] [^if.then39, i32 1] [^b20, i32 0] [^if.then41, i32 %285] [^b22, i32 1] [^if.else39, i32 0] [^if.else40, i32 0] [^b24, i32 0] [^if.else43, i32 0] [^if.else44, i32 0] [^while.body11, i32 0] [^b27, i32 0] [^b30, i32 1] [^b31, i32 0] [^while.guard1, i32 1] [^b32, i32 0] [^b34, i32 1] [^b37, i32 1] [^while.body18, i32 0] [^b39, i32 0] [^if.else63, i32 0];
    ret i32 %5;
^b1:
    i1 %6 = scmp eq i32 %type, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^b2:
    i32 %7 = load i32* %0;
    i32* %8 = getelementptr &(i32* %buf)[i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp eq i32 %9, i32 32;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else1;
^if.then:
    i32 %11 = add i32 %7, i32 1;
    store i32* %0 with i32 %11;
    ubr ^while.body;
^if.then1:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 123;
    cbr i1 %15(prob = 0.5), ^if.then2, ^if.else2;
^if.else:
    i1 %16 = scmp eq i32 %type, i32 1;
    cbr i1 %16(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i1 %17 = scmp eq i32 %9, i32 9;
    cbr i1 %17(prob = 0.5), ^if.then3, ^if.else4;
^if.then2:
    i32 %18 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then3:
    i32 %19 = load i32* %0;
    i32 %20 = add i32 %19, i32 1;
    store i32* %0 with i32 %20;
    ubr ^while.body;
^if.else2:
    i1 %21 = scmp eq i32 %14, i32 91;
    cbr i1 %21(prob = 0.5), ^if.then6, ^if.else5;
^if.then4:
    i32 %22 = load i32* %0;
    i32* %23 = getelementptr &(i32* %buf)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp eq i32 %24, i32 43;
    i1 %26 = scmp eq i32 %24, i32 45;
    i1 %27 = or i1 %26, i1 %25;
    cbr i1 %27(prob = 0.75), ^if.then5, ^b3;
^if.else3:
    i1 %28 = scmp eq i32 %type, i32 2;
    cbr i1 %28(prob = 0.5), ^if.then8, ^if.else6;
^if.else4:
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %buf)[i32 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 10;
    cbr i1 %32(prob = 0.5), ^if.then7, ^if.else7;
^if.then5:
    i32 %33 = add i32 %22, i32 1;
    store i32* %0 with i32 %33;
    ubr ^b3;
^if.then6:
    i32 %34 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then7:
    i32 %35 = add i32 %29, i32 1;
    store i32* %0 with i32 %35;
    ubr ^while.body;
^if.then8:
    i32 %36 = load i32* %0;
    i32 %37 = add i32 %36, i32 1;
    store i32* %0 with i32 %37;
    i1 %38 = scmp lt i32 %37, i32 %len;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b4;
^if.else5:
    i32 %39 = load i32* %0;
    i32* %40 = getelementptr &(i32* %buf)[i32 %39];
    i32 %41 = load i32* %40;
    i1 %42 = scmp eq i32 %41, i32 34;
    cbr i1 %42(prob = 0.5), ^if.then9, ^if.else8;
^b3:
    i32 %43 = phi [^if.then4, i32 %22] [^if.then5, i32 %33];
    i1 %44 = scmp ge i32 %43, i32 %len;
    cbr i1 %44(prob = 0.5), ^b, ^if.else9;
^if.else6:
    i1 %45 = scmp eq i32 %type, i32 3;
    cbr i1 %45(prob = 0.5), ^if.then10, ^if.else10;
^if.else7:
    i1 %46 = scmp eq i32 %31, i32 13;
    cbr i1 %46(prob = 0.5), ^if.then11, ^b1;
^if.then9:
    i32 %47 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.then10:
    i32 %48 = load i32* %0;
    i32 %49 = add i32 %48, i32 1;
    store i32* %0 with i32 %49;
    ubr ^while.body2;
^if.then11:
    i32 %50 = load i32* %0;
    i32 %51 = add i32 %50, i32 1;
    store i32* %0 with i32 %51;
    ubr ^while.body;
^while.body1:
    i32 %52 = phi [^if.then8, i32 %37] [^b5, i32 %72];
    i32* %53 = getelementptr &(i32* %buf)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 34;
    cbr i1 %55(prob = 0.5), ^indirect, ^b5;
^if.else8:
    i1 %56 = scmp gt i32 %41, i32 47;
    cbr i1 %56(prob = 0.5), ^if.then13, ^b6;
^b4:
    i32 %57 = phi [^if.then8, i32 %37] [^indirect, i32 %64] [^b5, i32 %72];
    i1 %58 = scmp ge i32 %57, i32 %len;
    cbr i1 %58(prob = 0.5), ^b, ^if.else11;
^if.else9:
    i32 %59 = load i32* %0;
    i32* %60 = getelementptr &(i32* %buf)[i32 %59];
    i32 %61 = load i32* %60;
    i1 %62 = scmp gt i32 %61, i32 47;
    cbr i1 %62(prob = 0.5), ^if.then14, ^b;
^if.else10:
    i1 %63 = scmp eq i32 %type, i32 4;
    cbr i1 %63(prob = 0.5), ^if.then12, ^if.else12;
^indirect:
    i32 %64 = load i32* %0;
    ubr ^b4;
^if.then12:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.body3;
^b5:
    i32 %67 = load i32* %0;
    i32* %68 = getelementptr &(i32* %buf)[i32 %67];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 92;
    i32 %71 = select i1 %70 ? i32 2 : i32 1;
    i32 %72 = add i32 %71, i32 %67;
    store i32* %0 with i32 %72;
    i1 %73 = scmp lt i32 %72, i32 %len;
    cbr i1 %73(prob = 0.97), ^while.body1, ^b4;
^if.then13:
    i1 %74 = scmp lt i32 %41, i32 58;
    cbr i1 %74(prob = 0.5), ^b6, ^if.else13;
^while.body2:
    i32 %75 = phi [^if.then10, i32 %49] [^if.then19, i32 %110] [^if.then24, i32 %143] [^if.then30, i32 %191] [^if.then35, i32 %230];
    i1 %76 = scmp ge i32 %75, i32 %len;
    cbr i1 %76(prob = 0.5), ^if.then17, ^b8;
^if.then14:
    i1 %77 = scmp lt i32 %61, i32 58;
    cbr i1 %77(prob = 0.5), ^b7, ^if.else14;
^if.else11:
    i32 %78 = load i32* %0;
    i32* %79 = getelementptr &(i32* %buf)[i32 %78];
    i32 %80 = load i32* %79;
    i1 %81 = scmp neq i32 %80, i32 34;
    cbr i1 %81(prob = 0.5), ^b, ^if.then16;
^b6:
    i32 %82 = phi [^if.else8, i32 0] [^if.then13, i32 1] [^if.else13, i32 0];
    i1 %83 = scmp eq i32 %82, i32 1;
    cbr i1 %83(prob = 0.5), ^if.then15, ^if.else15;
^if.else12:
    i1 %84 = scmp eq i32 %type, i32 5;
    cbr i1 %84(prob = 0.5), ^if.then18, ^if.else16;
^if.else13:
    ubr ^b6;
^if.then15:
    i32 %85 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else14:
    ubr ^b7;
^b7:
    i32 %86 = phi [^if.then14, i32 1] [^if.else14, i32 0];
    i1 %87 = scmp eq i32 %86, i32 0;
    cbr i1 %87(prob = 0.5), ^b, ^while.guard;
^if.then16:
    i32 %88 = phi [^if.else11, i32 %78] [^indirect1, i32 %141] [^indirect2, i32 %187] [^indirect9, i32 %394] [^indirect11, i32 %501];
    i32 %89 = add i32 %88, i32 1;
    store i32* %0 with i32 %89;
    ubr ^b;
^if.then17:
    i32 %90 = load i32* %0;
    i1 %91 = scmp lt i32 %90, i32 %len;
    cbr i1 %91(prob = 0.5), ^if.then20, ^b9;
^b8:
    i32 %92 = load i32* %0;
    i32* %93 = getelementptr &(i32* %buf)[i32 %92];
    i32 %94 = load i32* %93;
    i1 %95 = scmp eq i32 %94, i32 32;
    cbr i1 %95(prob = 0.5), ^if.then19, ^if.else17;
^while.body3:
    i32 %96 = phi [^if.then12, i32 %66] [^if.then25, i32 %144] [^if.then31, i32 %193] [^if.then36, i32 %231] [^if.then40, i32 %282];
    i1 %97 = scmp ge i32 %96, i32 %len;
    cbr i1 %97(prob = 0.5), ^if.then22, ^b10;
^if.then18:
    i32* %98 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %98 with i32 116;
    i32* %99 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %99 with i32 114;
    i32* %100 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %100 with i32 117;
    i32* %101 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %101 with i32 101;
    i32 %102 = load i32* %0;
    i32 %103 = add i32 %102, i32 3;
    i1 %104 = scmp ge i32 %103, i32 %len;
    cbr i1 %104(prob = 0.5), ^b, ^if.else18;
^if.else15:
    i32 %105 = load i32* %0;
    i32* %106 = getelementptr &(i32* %buf)[i32 %105];
    i32 %107 = load i32* %106;
    i1 %108 = scmp eq i32 %107, i32 43;
    cbr i1 %108(prob = 0.5), ^if.then21, ^if.else19;
^if.else16:
    i1 %109 = scmp eq i32 %type, i32 6;
    cbr i1 %109(prob = 0.5), ^if.then23, ^if.else20;
^if.then19:
    i32 %110 = add i32 %92, i32 1;
    store i32* %0 with i32 %110;
    ubr ^while.body2;
^if.then20:
    i32* %111 = getelementptr &(i32* %buf)[i32 %90];
    i32 %112 = load i32* %111;
    i1 %113 = scmp eq i32 %112, i32 93;
    cbr i1 %113(prob = 0.5), ^indirect1, ^b9;
^if.then21:
    i32 %114 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.guard:
    i32 %115 = load i32* %0;
    i1 %116 = scmp lt i32 %115, i32 %len;
    cbr i1 %116(prob = 0.97), ^while.body4, ^b12;
^if.then22:
    i32 %117 = load i32* %0;
    i1 %118 = scmp lt i32 %117, i32 %len;
    cbr i1 %118(prob = 0.5), ^if.then26, ^b13;
^b9:
    i32 %119 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i32* %120 = load i32** %buf1;
    i32 %121 = load i32* %len1;
    i1 %122 = scmp eq i32 %119, i32 0;
    cbr i1 %122(prob = 0.5), ^b, ^b11;
^if.else17:
    i1 %123 = scmp eq i32 %94, i32 9;
    cbr i1 %123(prob = 0.5), ^if.then24, ^if.else21;
^b10:
    i32 %124 = load i32* %0;
    i32* %125 = getelementptr &(i32* %buf)[i32 %124];
    i32 %126 = load i32* %125;
    i1 %127 = scmp eq i32 %126, i32 32;
    cbr i1 %127(prob = 0.5), ^if.then25, ^if.else22;
^if.else18:
    i32* %128 = getelementptr &(i32* %buf)[i32 %102];
    i32 %129 = load i32* %128;
    i1 %130 = scmp neq i32 %129, i32 116;
    cbr i1 %130(prob = 0.5), ^b, ^if.else23;
^if.then23:
    i32* %131 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %131 with i32 102;
    i32* %132 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %132 with i32 97;
    i32* %133 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %133 with i32 108;
    i32* %134 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %134 with i32 115;
    i32* %135 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %135 with i32 101;
    i32 %136 = load i32* %0;
    i32 %137 = add i32 %136, i32 4;
    i1 %138 = scmp ge i32 %137, i32 %len;
    cbr i1 %138(prob = 0.5), ^b, ^if.else24;
^if.else19:
    i1 %139 = scmp eq i32 %107, i32 45;
    cbr i1 %139(prob = 0.5), ^if.then27, ^if.else25;
^if.else20:
    i1 %140 = scmp eq i32 %type, i32 7;
    cbr i1 %140(prob = 0.5), ^if.then28, ^b;
^indirect1:
    i32 %141 = load i32* %0;
    ubr ^if.then16;
^if.then24:
    i32 %142 = load i32* %0;
    i32 %143 = add i32 %142, i32 1;
    store i32* %0 with i32 %143;
    ubr ^while.body2;
^if.then25:
    i32 %144 = add i32 %124, i32 1;
    store i32* %0 with i32 %144;
    ubr ^while.body3;
^b11:
    i32* %145 = phi [^b9, i32* %120] [^while.body11, i32* %338];
    i32 %146 = phi [^b9, i32 %121] [^while.body11, i32 %339];
    i32 %147 = load i32* %0;
    ubr ^while.body5;
^while.body4:
    i32 %148 = phi [^while.guard, i32 %115] [^b19, i32 %272];
    i32* %149 = getelementptr &(i32* %buf)[i32 %148];
    i32 %150 = load i32* %149;
    i1 %151 = scmp gt i32 %150, i32 47;
    cbr i1 %151(prob = 0.5), ^if.then29, ^indirect3;
^if.then26:
    i32* %152 = getelementptr &(i32* %buf)[i32 %117];
    i32 %153 = load i32* %152;
    i1 %154 = scmp eq i32 %153, i32 125;
    cbr i1 %154(prob = 0.5), ^indirect2, ^b13;
^if.then27:
    i32 %155 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b12:
    i32 %156 = phi [^while.guard, i32 %115] [^indirect3, i32 %188] [^b19, i32 %272];
    i1 %157 = scmp lt i32 %156, i32 %len;
    cbr i1 %157(prob = 0.5), ^if.then32, ^indirect4;
^b13:
    i32 %158 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i32* %159 = load i32** %buf1;
    i32 %160 = load i32* %len1;
    i1 %161 = scmp eq i32 %158, i32 0;
    cbr i1 %161(prob = 0.5), ^b, ^b14;
^if.else21:
    i32 %162 = load i32* %0;
    i32* %163 = getelementptr &(i32* %buf)[i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %164, i32 10;
    cbr i1 %165(prob = 0.5), ^if.then30, ^if.else26;
^if.else22:
    i1 %166 = scmp eq i32 %126, i32 9;
    cbr i1 %166(prob = 0.5), ^if.then31, ^if.else27;
^if.else23:
    i32 %167 = load i32* %0;
    i32 %168 = add i32 %167, i32 1;
    i32* %169 = getelementptr &(i32* %buf)[i32 %168];
    i32 %170 = load i32* %169;
    i32 %171 = load i32* %99;
    i1 %172 = scmp neq i32 %170, i32 %171;
    cbr i1 %172(prob = 0.5), ^b, ^if.else28;
^if.else24:
    i32* %173 = getelementptr &(i32* %buf)[i32 %136];
    i32 %174 = load i32* %173;
    i1 %175 = scmp neq i32 %174, i32 102;
    cbr i1 %175(prob = 0.5), ^b, ^if.else29;
^if.then28:
    i32* %176 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %176 with i32 110;
    i32* %177 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %177 with i32 117;
    i32* %178 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %178 with i32 108;
    i32* %179 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %179 with i32 108;
    i32 %180 = load i32* %0;
    i32 %181 = add i32 %180, i32 3;
    i1 %182 = scmp ge i32 %181, i32 %len;
    cbr i1 %182(prob = 0.5), ^b, ^if.else30;
^if.else25:
    i32 %183 = load i32* %0;
    i32* %184 = getelementptr &(i32* %buf)[i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = scmp eq i32 %185, i32 116;
    cbr i1 %186(prob = 0.5), ^if.then33, ^if.else31;
^indirect2:
    i32 %187 = load i32* %0;
    ubr ^if.then16;
^indirect3:
    i32 %188 = load i32* %0;
    ubr ^b12;
^indirect4:
    i32 %189 = load i32* %0;
    ubr ^b17;
^if.then29:
    i1 %190 = scmp lt i32 %150, i32 58;
    cbr i1 %190(prob = 0.5), ^b15, ^if.else32;
^if.then30:
    i32 %191 = add i32 %162, i32 1;
    store i32* %0 with i32 %191;
    ubr ^while.body2;
^if.then31:
    i32 %192 = load i32* %0;
    i32 %193 = add i32 %192, i32 1;
    store i32* %0 with i32 %193;
    ubr ^while.body3;
^b14:
    i32* %194 = phi [^b13, i32* %159] [^while.body18, i32* %473];
    i32 %195 = phi [^b13, i32 %160] [^while.body18, i32 %474];
    i32 %196 = load i32* %0;
    ubr ^while.body6;
^if.then32:
    i32 %197 = load i32* %0;
    i32* %198 = getelementptr &(i32* %buf)[i32 %197];
    i32 %199 = load i32* %198;
    i1 %200 = scmp eq i32 %199, i32 46;
    cbr i1 %200(prob = 0.5), ^if.then34, ^b17;
^if.then33:
    i32 %201 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^while.body5:
    i32 %202 = phi [^b11, i32 %147] [^if.then38, i32 %269] [^if.then43, i32 %306] [^if.then47, i32 %344] [^if.then53, i32 %379];
    i1 %203 = scmp ge i32 %202, i32 %146;
    cbr i1 %203(prob = 0.5), ^b16, ^b18;
^if.else26:
    i1 %204 = scmp eq i32 %164, i32 13;
    cbr i1 %204(prob = 0.5), ^if.then35, ^if.then17;
^if.else27:
    i32 %205 = load i32* %0;
    i32* %206 = getelementptr &(i32* %buf)[i32 %205];
    i32 %207 = load i32* %206;
    i1 %208 = scmp eq i32 %207, i32 10;
    cbr i1 %208(prob = 0.5), ^if.then36, ^if.else33;
^if.else28:
    i32 %209 = add i32 %167, i32 2;
    i32* %210 = getelementptr &(i32* %buf)[i32 %209];
    i32 %211 = load i32* %210;
    i32 %212 = load i32* %100;
    i1 %213 = scmp neq i32 %211, i32 %212;
    cbr i1 %213(prob = 0.5), ^b, ^if.else34;
^if.else29:
    i32 %214 = load i32* %0;
    i32 %215 = add i32 %214, i32 1;
    i32* %216 = getelementptr &(i32* %buf)[i32 %215];
    i32 %217 = load i32* %216;
    i32 %218 = load i32* %132;
    i1 %219 = scmp neq i32 %217, i32 %218;
    cbr i1 %219(prob = 0.5), ^b, ^if.else35;
^if.else30:
    i32* %220 = getelementptr &(i32* %buf)[i32 %180];
    i32 %221 = load i32* %220;
    i1 %222 = scmp neq i32 %221, i32 110;
    cbr i1 %222(prob = 0.5), ^b, ^if.else36;
^if.else31:
    i1 %223 = scmp eq i32 %185, i32 102;
    cbr i1 %223(prob = 0.5), ^if.then37, ^if.else37;
^if.else32:
    ubr ^b15;
^b15:
    i32 %224 = phi [^if.then29, i32 1] [^if.else32, i32 0];
    i1 %225 = scmp neq i32 %224, i32 1;
    cbr i1 %225(prob = 0.5), ^indirect3, ^b19;
^if.then34:
    i32 %226 = phi [^if.then32, i32 %197] [^indirect6, i32 %336];
    i32 %227 = add i32 %226, i32 1;
    store i32* %0 with i32 %227;
    i1 %228 = scmp lt i32 %227, i32 %len;
    cbr i1 %228(prob = 0.97), ^while.body8, ^b17;
^if.then35:
    i32 %229 = load i32* %0;
    i32 %230 = add i32 %229, i32 1;
    store i32* %0 with i32 %230;
    ubr ^while.body2;
^if.then36:
    i32 %231 = add i32 %205, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.body3;
^b16:
    i32 %232 = load i32* %0;
    i32* %233 = getelementptr &(i32* %145)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = scmp eq i32 %234, i32 44;
    cbr i1 %235(prob = 0.97), ^while.body7, ^entry1;
^b17:
    i32 %236 = phi [^indirect4, i32 %189] [^if.then32, i32 %197] [^if.then34, i32 %227] [^indirect5, i32 %335];
    i1 %237 = scmp lt i32 %236, i32 %len;
    cbr i1 %237(prob = 0.5), ^if.then39, ^b;
^if.then37:
    i32 %238 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^b18:
    i32 %239 = load i32* %0;
    i32* %240 = getelementptr &(i32* %145)[i32 %239];
    i32 %241 = load i32* %240;
    i1 %242 = scmp eq i32 %241, i32 32;
    cbr i1 %242(prob = 0.5), ^if.then38, ^if.else38;
^while.body6:
    i32 %243 = phi [^b14, i32 %196] [^if.then44, i32 %307] [^if.then48, i32 %346] [^if.then54, i32 %380] [^if.then58, i32 %398];
    i1 %244 = scmp ge i32 %243, i32 %195;
    cbr i1 %244(prob = 0.5), ^b20, ^b21;
^if.else33:
    i1 %245 = scmp eq i32 %207, i32 13;
    cbr i1 %245(prob = 0.5), ^if.then40, ^if.then22;
^if.else34:
    i32 %246 = load i32* %0;
    i32 %247 = add i32 %246, i32 3;
    i32* %248 = getelementptr &(i32* %buf)[i32 %247];
    i32 %249 = load i32* %248;
    i32 %250 = load i32* %101;
    i1 %251 = scmp neq i32 %249, i32 %250;
    cbr i1 %251(prob = 0.5), ^b, ^b22;
^if.else35:
    i32 %252 = add i32 %214, i32 2;
    i32* %253 = getelementptr &(i32* %buf)[i32 %252];
    i32 %254 = load i32* %253;
    i32 %255 = load i32* %133;
    i1 %256 = scmp neq i32 %254, i32 %255;
    cbr i1 %256(prob = 0.5), ^b, ^if.else39;
^if.else36:
    i32 %257 = load i32* %0;
    i32 %258 = add i32 %257, i32 1;
    i32* %259 = getelementptr &(i32* %buf)[i32 %258];
    i32 %260 = load i32* %259;
    i32 %261 = load i32* %177;
    i1 %262 = scmp neq i32 %260, i32 %261;
    cbr i1 %262(prob = 0.5), ^b, ^if.else40;
^if.else37:
    i32 %263 = load i32* %0;
    i32* %264 = getelementptr &(i32* %buf)[i32 %263];
    i32 %265 = load i32* %264;
    i1 %266 = scmp eq i32 %265, i32 110;
    cbr i1 %266(prob = 0.5), ^if.then41, ^b;
^while.body7:
    i32 %267 = load i32* %0;
    i32 %268 = add i32 %267, i32 1;
    store i32* %0 with i32 %268;
    ubr ^while.body9;
^if.then38:
    i32 %269 = add i32 %239, i32 1;
    store i32* %0 with i32 %269;
    ubr ^while.body5;
^entry1:
    i32 %270 = load i32* %0;
    ubr ^while.body10;
^b19:
    i32 %271 = load i32* %0;
    i32 %272 = add i32 %271, i32 1;
    store i32* %0 with i32 %272;
    i1 %273 = scmp lt i32 %272, i32 %len;
    cbr i1 %273(prob = 0.97), ^while.body4, ^b12;
^while.body8:
    i32* %274 = getelementptr &(i32* %buf)[i32 %227];
    i32 %275 = load i32* %274;
    i1 %276 = scmp gt i32 %275, i32 47;
    cbr i1 %276(prob = 0.5), ^if.then42, ^b23;
^if.then39:
    i32 %277 = load i32* %0;
    i32* %278 = getelementptr &(i32* %buf)[i32 %277];
    i32 %279 = load i32* %278;
    i1 %280 = scmp eq i32 %279, i32 101;
    cbr i1 %280(prob = 0.5), ^if.then45, ^b;
^if.then40:
    i32 %281 = load i32* %0;
    i32 %282 = add i32 %281, i32 1;
    store i32* %0 with i32 %282;
    ubr ^while.body3;
^b20:
    i32 %283 = load i32* %0;
    i1 %284 = scmp ge i32 %283, i32 %195;
    cbr i1 %284(prob = 0.5), ^b, ^b24;
^if.then41:
    i32 %285 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
^if.else38:
    i1 %286 = scmp eq i32 %241, i32 9;
    cbr i1 %286(prob = 0.5), ^if.then43, ^if.else41;
^b21:
    i32 %287 = load i32* %0;
    i32* %288 = getelementptr &(i32* %194)[i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = scmp eq i32 %289, i32 32;
    cbr i1 %290(prob = 0.5), ^if.then44, ^if.else42;
^b22:
    i32 %291 = phi [^if.else34, i32 %246] [^if.else44, i32 %329];
    i32 %292 = add i32 %291, i32 4;
    store i32* %0 with i32 %292;
    ubr ^b;
^if.else39:
    i32 %293 = load i32* %0;
    i32 %294 = add i32 %293, i32 3;
    i32* %295 = getelementptr &(i32* %buf)[i32 %294];
    i32 %296 = load i32* %295;
    i32 %297 = load i32* %134;
    i1 %298 = scmp neq i32 %296, i32 %297;
    cbr i1 %298(prob = 0.5), ^b, ^if.else43;
^if.else40:
    i32 %299 = add i32 %257, i32 2;
    i32* %300 = getelementptr &(i32* %buf)[i32 %299];
    i32 %301 = load i32* %300;
    i32 %302 = load i32* %178;
    i1 %303 = scmp neq i32 %301, i32 %302;
    cbr i1 %303(prob = 0.5), ^b, ^if.else44;
^if.then42:
    i1 %304 = scmp lt i32 %275, i32 58;
    cbr i1 %304(prob = 0.5), ^b23, ^if.else45;
^if.then43:
    i32 %305 = load i32* %0;
    i32 %306 = add i32 %305, i32 1;
    store i32* %0 with i32 %306;
    ubr ^while.body5;
^if.then44:
    i32 %307 = add i32 %287, i32 1;
    store i32* %0 with i32 %307;
    ubr ^while.body6;
^while.body9:
    i32 %308 = phi [^while.body7, i32 %268] [^if.then50, i32 %370] [^if.then56, i32 %391] [^if.then59, i32 %416] [^if.then62, i32 %424];
    i1 %309 = scmp ge i32 %308, i32 %146;
    cbr i1 %309(prob = 0.5), ^while.body11, ^b26;
^if.then45:
    i32 %310 = add i32 %277, i32 1;
    store i32* %0 with i32 %310;
    i1 %311 = scmp lt i32 %310, i32 %len;
    cbr i1 %311(prob = 0.5), ^if.then46, ^b28;
^b23:
    i32 %312 = phi [^while.body8, i32 0] [^if.then42, i32 1] [^if.else45, i32 0];
    i1 %313 = scmp neq i32 %312, i32 1;
    cbr i1 %313(prob = 0.5), ^indirect5, ^indirect6;
^while.body10:
    i32 %314 = phi [^entry1, i32 %270] [^if.then51, i32 %372] [^if.then57, i32 %393] [^if.then60, i32 %417] [^if.then63, i32 %430];
    i1 %315 = scmp ge i32 %314, i32 %146;
    cbr i1 %315(prob = 0.5), ^b27, ^b29;
^b24:
    i32* %316 = getelementptr &(i32* %194)[i32 %283];
    i32 %317 = load i32* %316;
    i1 %318 = scmp neq i32 %317, i32 58;
    cbr i1 %318(prob = 0.5), ^b, ^b25;
^if.else41:
    i32 %319 = load i32* %0;
    i32* %320 = getelementptr &(i32* %145)[i32 %319];
    i32 %321 = load i32* %320;
    i1 %322 = scmp eq i32 %321, i32 10;
    cbr i1 %322(prob = 0.5), ^if.then47, ^if.else46;
^if.else42:
    i1 %323 = scmp eq i32 %289, i32 9;
    cbr i1 %323(prob = 0.5), ^if.then48, ^if.else47;
^if.else43:
    i32 %324 = add i32 %293, i32 4;
    i32* %325 = getelementptr &(i32* %buf)[i32 %324];
    i32 %326 = load i32* %325;
    i32 %327 = load i32* %135;
    i1 %328 = scmp neq i32 %326, i32 %327;
    cbr i1 %328(prob = 0.5), ^b, ^b30;
^if.else44:
    i32 %329 = load i32* %0;
    i32 %330 = add i32 %329, i32 3;
    i32* %331 = getelementptr &(i32* %buf)[i32 %330];
    i32 %332 = load i32* %331;
    i32 %333 = load i32* %179;
    i1 %334 = scmp neq i32 %332, i32 %333;
    cbr i1 %334(prob = 0.5), ^b, ^b22;
^if.else45:
    ubr ^b23;
^indirect5:
    i32 %335 = load i32* %0;
    ubr ^b17;
^indirect6:
    i32 %336 = load i32* %0;
    ubr ^if.then34;
^while.body11:
    i32 %337 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %145, i32 %146, i32* %0);
    i32* %338 = load i32** %buf1;
    i32 %339 = load i32* %len1;
    i1 %340 = scmp eq i32 %337, i32 0;
    cbr i1 %340(prob = 0.5), ^b, ^b11;
^if.then46:
    i32* %341 = getelementptr &(i32* %buf)[i32 %310];
    i32 %342 = load i32* %341;
    i1 %343 = scmp eq i32 %342, i32 43;
    cbr i1 %343(prob = 0.5), ^if.then49, ^indirect7;
^if.then47:
    i32 %344 = add i32 %319, i32 1;
    store i32* %0 with i32 %344;
    ubr ^while.body5;
^if.then48:
    i32 %345 = load i32* %0;
    i32 %346 = add i32 %345, i32 1;
    store i32* %0 with i32 %346;
    ubr ^while.body6;
^b25:
    i32 %347 = load i32* %0;
    i32 %348 = add i32 %347, i32 1;
    store i32* %0 with i32 %348;
    ubr ^while.body12;
^b26:
    i32 %349 = load i32* %0;
    i32* %350 = getelementptr &(i32* %145)[i32 %349];
    i32 %351 = load i32* %350;
    i1 %352 = scmp eq i32 %351, i32 32;
    cbr i1 %352(prob = 0.5), ^if.then50, ^if.else48;
^b27:
    i32 %353 = load i32* %0;
    i1 %354 = scmp ge i32 %353, i32 %146;
    cbr i1 %354(prob = 0.5), ^b, ^b31;
^b28:
    i32 %355 = phi [^if.then45, i32 %310] [^if.then49, i32 %369] [^indirect7, i32 %371];
    i1 %356 = scmp lt i32 %355, i32 %len;
    cbr i1 %356(prob = 0.5), ^if.then52, ^indirect8;
^b29:
    i32 %357 = load i32* %0;
    i32* %358 = getelementptr &(i32* %145)[i32 %357];
    i32 %359 = load i32* %358;
    i1 %360 = scmp eq i32 %359, i32 32;
    cbr i1 %360(prob = 0.5), ^if.then51, ^if.else49;
^if.else46:
    i1 %361 = scmp eq i32 %321, i32 13;
    cbr i1 %361(prob = 0.5), ^if.then53, ^b16;
^if.else47:
    i32 %362 = load i32* %0;
    i32* %363 = getelementptr &(i32* %194)[i32 %362];
    i32 %364 = load i32* %363;
    i1 %365 = scmp eq i32 %364, i32 10;
    cbr i1 %365(prob = 0.5), ^if.then54, ^if.else50;
^b30:
    i32 %366 = load i32* %0;
    i32 %367 = add i32 %366, i32 5;
    store i32* %0 with i32 %367;
    ubr ^b;
^if.then49:
    i32 %368 = load i32* %0;
    i32 %369 = add i32 %368, i32 1;
    store i32* %0 with i32 %369;
    ubr ^b28;
^if.then50:
    i32 %370 = add i32 %349, i32 1;
    store i32* %0 with i32 %370;
    ubr ^while.body9;
^indirect7:
    i32 %371 = load i32* %0;
    ubr ^b28;
^if.then51:
    i32 %372 = add i32 %357, i32 1;
    store i32* %0 with i32 %372;
    ubr ^while.body10;
^indirect8:
    i32 %373 = load i32* %0;
    ubr ^while.guard1;
^if.then52:
    i32 %374 = load i32* %0;
    i32* %375 = getelementptr &(i32* %buf)[i32 %374];
    i32 %376 = load i32* %375;
    i1 %377 = scmp eq i32 %376, i32 45;
    cbr i1 %377(prob = 0.5), ^if.then55, ^while.guard1;
^if.then53:
    i32 %378 = load i32* %0;
    i32 %379 = add i32 %378, i32 1;
    store i32* %0 with i32 %379;
    ubr ^while.body5;
^if.then54:
    i32 %380 = add i32 %362, i32 1;
    store i32* %0 with i32 %380;
    ubr ^while.body6;
^if.else48:
    i1 %381 = scmp eq i32 %351, i32 9;
    cbr i1 %381(prob = 0.5), ^if.then56, ^if.else51;
^b31:
    i32* %382 = getelementptr &(i32* %145)[i32 %353];
    i32 %383 = load i32* %382;
    i1 %384 = scmp neq i32 %383, i32 93;
    cbr i1 %384(prob = 0.5), ^b, ^indirect9;
^if.else49:
    i1 %385 = scmp eq i32 %359, i32 9;
    cbr i1 %385(prob = 0.5), ^if.then57, ^if.else52;
^while.body12:
    i32 %386 = phi [^b25, i32 %348] [^if.then61, i32 %418] [^if.then64, i32 %432] [^if.then66, i32 %442] [^if.then68, i32 %460];
    i1 %387 = scmp ge i32 %386, i32 %195;
    cbr i1 %387(prob = 0.5), ^b32, ^b33;
^if.else50:
    i1 %388 = scmp eq i32 %364, i32 13;
    cbr i1 %388(prob = 0.5), ^if.then58, ^b20;
^if.then55:
    i32 %389 = add i32 %374, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.guard1;
^if.then56:
    i32 %390 = load i32* %0;
    i32 %391 = add i32 %390, i32 1;
    store i32* %0 with i32 %391;
    ubr ^while.body9;
^if.then57:
    i32 %392 = load i32* %0;
    i32 %393 = add i32 %392, i32 1;
    store i32* %0 with i32 %393;
    ubr ^while.body10;
^indirect9:
    i32 %394 = load i32* %0;
    ubr ^if.then16;
^while.guard1:
    i32 %395 = phi [^indirect8, i32 %373] [^if.then52, i32 %374] [^if.then55, i32 %389];
    i1 %396 = scmp lt i32 %395, i32 %len;
    cbr i1 %396(prob = 0.97), ^indirect10, ^b;
^if.then58:
    i32 %397 = load i32* %0;
    i32 %398 = add i32 %397, i32 1;
    store i32* %0 with i32 %398;
    ubr ^while.body6;
^if.else51:
    i32 %399 = load i32* %0;
    i32* %400 = getelementptr &(i32* %145)[i32 %399];
    i32 %401 = load i32* %400;
    i1 %402 = scmp eq i32 %401, i32 10;
    cbr i1 %402(prob = 0.5), ^if.then59, ^if.else53;
^b32:
    i32 %403 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %194, i32 %195, i32* %0);
    i32* %404 = load i32** %buf1;
    i32 %405 = load i32* %len1;
    i1 %406 = scmp eq i32 %403, i32 0;
    cbr i1 %406(prob = 0.5), ^b, ^entry2;
^if.else52:
    i32 %407 = load i32* %0;
    i32* %408 = getelementptr &(i32* %145)[i32 %407];
    i32 %409 = load i32* %408;
    i1 %410 = scmp eq i32 %409, i32 10;
    cbr i1 %410(prob = 0.5), ^if.then60, ^if.else54;
^b33:
    i32 %411 = load i32* %0;
    i32* %412 = getelementptr &(i32* %194)[i32 %411];
    i32 %413 = load i32* %412;
    i1 %414 = scmp eq i32 %413, i32 32;
    cbr i1 %414(prob = 0.5), ^if.then61, ^if.else55;
^indirect10:
    i32 %415 = load i32* %0;
    ubr ^while.body13;
^if.then59:
    i32 %416 = add i32 %399, i32 1;
    store i32* %0 with i32 %416;
    ubr ^while.body9;
^if.then60:
    i32 %417 = add i32 %407, i32 1;
    store i32* %0 with i32 %417;
    ubr ^while.body10;
^if.then61:
    i32 %418 = add i32 %411, i32 1;
    store i32* %0 with i32 %418;
    ubr ^while.body12;
^entry2:
    i32 %419 = load i32* %0;
    ubr ^while.body14;
^if.else53:
    i1 %420 = scmp eq i32 %401, i32 13;
    cbr i1 %420(prob = 0.5), ^if.then62, ^while.body11;
^if.else54:
    i1 %421 = scmp eq i32 %409, i32 13;
    cbr i1 %421(prob = 0.5), ^if.then63, ^b27;
^if.else55:
    i1 %422 = scmp eq i32 %413, i32 9;
    cbr i1 %422(prob = 0.5), ^if.then64, ^if.else56;
^if.then62:
    i32 %423 = load i32* %0;
    i32 %424 = add i32 %423, i32 1;
    store i32* %0 with i32 %424;
    ubr ^while.body9;
^while.body13:
    i32 %425 = phi [^indirect10, i32 %415] [^b37, i32 %457];
    i32* %426 = getelementptr &(i32* %buf)[i32 %425];
    i32 %427 = load i32* %426;
    i1 %428 = scmp gt i32 %427, i32 47;
    cbr i1 %428(prob = 0.5), ^if.then65, ^b34;
^if.then63:
    i32 %429 = load i32* %0;
    i32 %430 = add i32 %429, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body10;
^if.then64:
    i32 %431 = load i32* %0;
    i32 %432 = add i32 %431, i32 1;
    store i32* %0 with i32 %432;
    ubr ^while.body12;
^while.body14:
    i32 %433 = phi [^entry2, i32 %419] [^if.then67, i32 %454] [^if.then69, i32 %463] [^if.then70, i32 %476] [^if.then73, i32 %491];
    i1 %434 = scmp ge i32 %433, i32 %405;
    cbr i1 %434(prob = 0.5), ^b35, ^b36;
^if.else56:
    i32 %435 = load i32* %0;
    i32* %436 = getelementptr &(i32* %194)[i32 %435];
    i32 %437 = load i32* %436;
    i1 %438 = scmp eq i32 %437, i32 10;
    cbr i1 %438(prob = 0.5), ^if.then66, ^if.else57;
^if.then65:
    i1 %439 = scmp lt i32 %427, i32 58;
    cbr i1 %439(prob = 0.5), ^b34, ^if.else58;
^b34:
    i32 %440 = phi [^while.body13, i32 0] [^if.then65, i32 1] [^if.else58, i32 0];
    i1 %441 = scmp neq i32 %440, i32 1;
    cbr i1 %441(prob = 0.5), ^b, ^b37;
^if.then66:
    i32 %442 = add i32 %435, i32 1;
    store i32* %0 with i32 %442;
    ubr ^while.body12;
^b35:
    i32 %443 = load i32* %0;
    i32* %444 = getelementptr &(i32* %404)[i32 %443];
    i32 %445 = load i32* %444;
    i1 %446 = scmp eq i32 %445, i32 44;
    cbr i1 %446(prob = 0.97), ^while.body15, ^entry3;
^b36:
    i32 %447 = load i32* %0;
    i32* %448 = getelementptr &(i32* %404)[i32 %447];
    i32 %449 = load i32* %448;
    i1 %450 = scmp eq i32 %449, i32 32;
    cbr i1 %450(prob = 0.5), ^if.then67, ^if.else59;
^if.else57:
    i1 %451 = scmp eq i32 %437, i32 13;
    cbr i1 %451(prob = 0.5), ^if.then68, ^b32;
^if.else58:
    ubr ^b34;
^while.body15:
    i32 %452 = load i32* %0;
    i32 %453 = add i32 %452, i32 1;
    store i32* %0 with i32 %453;
    ubr ^while.body16;
^if.then67:
    i32 %454 = add i32 %447, i32 1;
    store i32* %0 with i32 %454;
    ubr ^while.body14;
^entry3:
    i32 %455 = load i32* %0;
    ubr ^while.body17;
^b37:
    i32 %456 = load i32* %0;
    i32 %457 = add i32 %456, i32 1;
    store i32* %0 with i32 %457;
    i1 %458 = scmp lt i32 %457, i32 %len;
    cbr i1 %458(prob = 0.97), ^while.body13, ^b;
^if.then68:
    i32 %459 = load i32* %0;
    i32 %460 = add i32 %459, i32 1;
    store i32* %0 with i32 %460;
    ubr ^while.body12;
^if.else59:
    i1 %461 = scmp eq i32 %449, i32 9;
    cbr i1 %461(prob = 0.5), ^if.then69, ^if.else60;
^if.then69:
    i32 %462 = load i32* %0;
    i32 %463 = add i32 %462, i32 1;
    store i32* %0 with i32 %463;
    ubr ^while.body14;
^while.body16:
    i32 %464 = phi [^while.body15, i32 %453] [^if.then71, i32 %488] [^if.then74, i32 %498] [^if.then76, i32 %510] [^if.then78, i32 %515];
    i1 %465 = scmp ge i32 %464, i32 %405;
    cbr i1 %465(prob = 0.5), ^while.body18, ^b38;
^while.body17:
    i32 %466 = phi [^entry3, i32 %455] [^if.then72, i32 %489] [^if.then75, i32 %500] [^if.then77, i32 %511] [^if.then79, i32 %517];
    i1 %467 = scmp ge i32 %466, i32 %405;
    cbr i1 %467(prob = 0.5), ^b39, ^b40;
^if.else60:
    i32 %468 = load i32* %0;
    i32* %469 = getelementptr &(i32* %404)[i32 %468];
    i32 %470 = load i32* %469;
    i1 %471 = scmp eq i32 %470, i32 10;
    cbr i1 %471(prob = 0.5), ^if.then70, ^if.else61;
^while.body18:
    i32 %472 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %404, i32 %405, i32* %0);
    i32* %473 = load i32** %buf1;
    i32 %474 = load i32* %len1;
    i1 %475 = scmp eq i32 %472, i32 0;
    cbr i1 %475(prob = 0.5), ^b, ^b14;
^if.then70:
    i32 %476 = add i32 %468, i32 1;
    store i32* %0 with i32 %476;
    ubr ^while.body14;
^b38:
    i32 %477 = load i32* %0;
    i32* %478 = getelementptr &(i32* %404)[i32 %477];
    i32 %479 = load i32* %478;
    i1 %480 = scmp eq i32 %479, i32 32;
    cbr i1 %480(prob = 0.5), ^if.then71, ^if.else62;
^b39:
    i32 %481 = load i32* %0;
    i1 %482 = scmp ge i32 %481, i32 %405;
    cbr i1 %482(prob = 0.5), ^b, ^if.else63;
^b40:
    i32 %483 = load i32* %0;
    i32* %484 = getelementptr &(i32* %404)[i32 %483];
    i32 %485 = load i32* %484;
    i1 %486 = scmp eq i32 %485, i32 32;
    cbr i1 %486(prob = 0.5), ^if.then72, ^if.else64;
^if.else61:
    i1 %487 = scmp eq i32 %470, i32 13;
    cbr i1 %487(prob = 0.5), ^if.then73, ^b35;
^if.then71:
    i32 %488 = add i32 %477, i32 1;
    store i32* %0 with i32 %488;
    ubr ^while.body16;
^if.then72:
    i32 %489 = add i32 %483, i32 1;
    store i32* %0 with i32 %489;
    ubr ^while.body17;
^if.then73:
    i32 %490 = load i32* %0;
    i32 %491 = add i32 %490, i32 1;
    store i32* %0 with i32 %491;
    ubr ^while.body14;
^if.else62:
    i1 %492 = scmp eq i32 %479, i32 9;
    cbr i1 %492(prob = 0.5), ^if.then74, ^if.else65;
^if.else63:
    i32* %493 = getelementptr &(i32* %404)[i32 %481];
    i32 %494 = load i32* %493;
    i1 %495 = scmp neq i32 %494, i32 125;
    cbr i1 %495(prob = 0.5), ^b, ^indirect11;
^if.else64:
    i1 %496 = scmp eq i32 %485, i32 9;
    cbr i1 %496(prob = 0.5), ^if.then75, ^if.else66;
^if.then74:
    i32 %497 = load i32* %0;
    i32 %498 = add i32 %497, i32 1;
    store i32* %0 with i32 %498;
    ubr ^while.body16;
^if.then75:
    i32 %499 = load i32* %0;
    i32 %500 = add i32 %499, i32 1;
    store i32* %0 with i32 %500;
    ubr ^while.body17;
^indirect11:
    i32 %501 = load i32* %0;
    ubr ^if.then16;
^if.else65:
    i32 %502 = load i32* %0;
    i32* %503 = getelementptr &(i32* %404)[i32 %502];
    i32 %504 = load i32* %503;
    i1 %505 = scmp eq i32 %504, i32 10;
    cbr i1 %505(prob = 0.5), ^if.then76, ^if.else67;
^if.else66:
    i32 %506 = load i32* %0;
    i32* %507 = getelementptr &(i32* %404)[i32 %506];
    i32 %508 = load i32* %507;
    i1 %509 = scmp eq i32 %508, i32 10;
    cbr i1 %509(prob = 0.5), ^if.then77, ^if.else68;
^if.then76:
    i32 %510 = add i32 %502, i32 1;
    store i32* %0 with i32 %510;
    ubr ^while.body16;
^if.then77:
    i32 %511 = add i32 %506, i32 1;
    store i32* %0 with i32 %511;
    ubr ^while.body17;
^if.else67:
    i1 %512 = scmp eq i32 %504, i32 13;
    cbr i1 %512(prob = 0.5), ^if.then78, ^while.body18;
^if.else68:
    i1 %513 = scmp eq i32 %508, i32 13;
    cbr i1 %513(prob = 0.5), ^if.then79, ^b39;
^if.then78:
    i32 %514 = load i32* %0;
    i32 %515 = add i32 %514, i32 1;
    store i32* %0 with i32 %515;
    ubr ^while.body16;
^if.then79:
    i32 %516 = load i32* %0;
    i32 %517 = add i32 %516, i32 1;
    store i32* %0 with i32 %517;
    ubr ^while.body17;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32* %3 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32* %6 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %5];
    store i32* %6 with i32 %4;
    i32 %7 = add i32 %5, i32 1;
    i32 %8 = call () -> i32 @getch();
    i1 %9 = scmp neq i32 %8, i32 35;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body1:
    i32 %10 = phi [^b, i32 0] [^if.then1, i32 %17] [^if.then2, i32 %19] [^if.then3, i32 %23] [^if.then4, i32 %25];
    i1 %11 = scmp ge i32 %10, i32 %2;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %12 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %3, i32 %2, i32* %pos);
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else;
^b2:
    i32* %14 = getelementptr &(i32* %3)[i32 %10];
    i32 %15 = load i32* %14;
    i1 %16 = scmp eq i32 %15, i32 32;
    cbr i1 %16(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b3;
^if.then1:
    i32 %17 = add i32 %10, i32 1;
    store i32* %pos with i32 %17;
    ubr ^while.body1;
^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b3;
^if.else1:
    i1 %18 = scmp eq i32 %15, i32 9;
    cbr i1 %18(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %19 = add i32 %10, i32 1;
    store i32* %pos with i32 %19;
    ubr ^while.body1;
^if.else2:
    i32 %20 = load i32* %14;
    i1 %21 = scmp eq i32 %20, i32 10;
    cbr i1 %21(prob = 0.5), ^if.then3, ^if.else3;
^b3:
    i32 %22 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %22;
^if.then3:
    i32 %23 = add i32 %10, i32 1;
    store i32* %pos with i32 %23;
    ubr ^while.body1;
^if.else3:
    i1 %24 = scmp eq i32 %20, i32 13;
    cbr i1 %24(prob = 0.5), ^if.then4, ^b1;
^if.then4:
    i32 %25 = add i32 %10, i32 1;
    store i32* %pos with i32 %25;
    ubr ^while.body1;
}
