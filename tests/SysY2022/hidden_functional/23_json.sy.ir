internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
^entry:
    [4 * i32]* %mNull = alloc [4 * i32];
    [5 * i32]* %mFalse = alloc [5 * i32];
    [4 * i32]* %mTrue = alloc [4 * i32];
    i32* %len1 = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %len1 with i32 %len;
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %len;
    cbr i1 %2(prob = 0.5), ^if.then, ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^if.then8, i32 %42] [^if.then1, i32 %11] [^if.then3, i32 %22] [^if.then11, i32 %63];
    i1 %4 = scmp ge i32 %3, i32 %len;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^if.then:
    ret i32 0;
^b:
    i1 %5 = scmp eq i32 %type, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then2, ^if.else;
^b1:
    i32 %6 = load i32* %0;
    i32* %7 = getelementptr &(i32* %buf)[i32 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp eq i32 %8, i32 32;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %10 = load i32* %0;
    i32 %11 = add i32 %10, i32 1;
    store i32* %0 with i32 %11;
    ubr ^while.body;
^if.then2:
    i32 %12 = load i32* %0;
    i32* %13 = getelementptr &(i32* %buf)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 123;
    cbr i1 %15(prob = 0.5), ^if.then5, ^if.else2;
^if.else:
    i1 %16 = scmp eq i32 %type, i32 1;
    cbr i1 %16(prob = 0.5), ^if.then4, ^if.else3;
^if.else1:
    i32 %17 = load i32* %0;
    i32* %18 = getelementptr &(i32* %buf)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 9;
    cbr i1 %20(prob = 0.5), ^if.then3, ^if.else4;
^if.then3:
    i32 %21 = load i32* %0;
    i32 %22 = add i32 %21, i32 1;
    store i32* %0 with i32 %22;
    ubr ^while.body;
^if.else2:
    i32 %23 = load i32* %0;
    i32* %24 = getelementptr &(i32* %buf)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp eq i32 %25, i32 91;
    cbr i1 %26(prob = 0.5), ^if.then9, ^if.else5;
^if.then4:
    i32 %27 = load i32* %0;
    i32* %28 = getelementptr &(i32* %buf)[i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 43;
    cbr i1 %30(prob = 0.5), ^if.then6, ^if.else6;
^if.else3:
    i1 %31 = scmp eq i32 %type, i32 2;
    cbr i1 %31(prob = 0.5), ^if.then7, ^if.else7;
^if.else4:
    i32 %32 = load i32* %0;
    i32* %33 = getelementptr &(i32* %buf)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %34, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then8, ^if.else8;
^if.then5:
    i32 %36 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 4, i32* %buf, i32 %len, i32* %0);
    ret i32 %36;
^if.then6:
    i32 %37 = load i32* %0;
    i32 %38 = add i32 %37, i32 1;
    store i32* %0 with i32 %38;
    ubr ^b2;
^if.then7:
    i32 %39 = load i32* %0;
    i32 %40 = add i32 %39, i32 1;
    store i32* %0 with i32 %40;
    ubr ^while.header;
^if.then8:
    i32 %41 = load i32* %0;
    i32 %42 = add i32 %41, i32 1;
    store i32* %0 with i32 %42;
    ubr ^while.body;
^if.else5:
    i32 %43 = load i32* %0;
    i32* %44 = getelementptr &(i32* %buf)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 34;
    cbr i1 %46(prob = 0.5), ^if.then12, ^if.else9;
^if.else6:
    i32 %47 = load i32* %0;
    i32* %48 = getelementptr &(i32* %buf)[i32 %47];
    i32 %49 = load i32* %48;
    i1 %50 = scmp eq i32 %49, i32 45;
    cbr i1 %50(prob = 0.5), ^if.then6, ^indirect;
^if.else7:
    i1 %51 = scmp eq i32 %type, i32 3;
    cbr i1 %51(prob = 0.5), ^if.then10, ^if.else10;
^if.else8:
    i32 %52 = load i32* %0;
    i32* %53 = getelementptr &(i32* %buf)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 13;
    cbr i1 %55(prob = 0.5), ^if.then11, ^b;
^if.then9:
    i32 %56 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 3, i32* %buf, i32 %len, i32* %0);
    ret i32 %56;
^b2:
    i32 %57 = phi [^indirect, i32 %59] [^if.then6, i32 %38];
    i1 %58 = scmp ge i32 %57, i32 %len;
    cbr i1 %58(prob = 0.5), ^if.then, ^if.else11;
^indirect:
    i32 %59 = load i32* %0;
    ubr ^b2;
^if.then10:
    i32 %60 = load i32* %0;
    i32 %61 = add i32 %60, i32 1;
    store i32* %0 with i32 %61;
    ubr ^while.body2;
^if.then11:
    i32 %62 = load i32* %0;
    i32 %63 = add i32 %62, i32 1;
    store i32* %0 with i32 %63;
    ubr ^while.body;
^while.header:
    i32 %64 = phi [^if.then18, i32 %122] [^if.then7, i32 %40];
    i1 %65 = scmp lt i32 %64, i32 %len;
    cbr i1 %65(prob = 0.97), ^while.body1, ^b3;
^if.else9:
    i32 %66 = load i32* %0;
    i32* %67 = getelementptr &(i32* %buf)[i32 %66];
    i32 %68 = load i32* %67;
    i1 %69 = scmp gt i32 %68, i32 47;
    cbr i1 %69(prob = 0.5), ^if.then14, ^if.else12;
^if.else10:
    i1 %70 = scmp eq i32 %type, i32 4;
    cbr i1 %70(prob = 0.5), ^if.then13, ^if.else13;
^if.then12:
    i32 %71 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    ret i32 %71;
^if.else11:
    i32 %72 = load i32* %0;
    i32* %73 = getelementptr &(i32* %buf)[i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = scmp gt i32 %74, i32 47;
    cbr i1 %75(prob = 0.5), ^if.then15, ^if.else15;
^while.body1:
    i32 %76 = load i32* %0;
    i32* %77 = getelementptr &(i32* %buf)[i32 %76];
    i32 %78 = load i32* %77;
    i1 %79 = scmp eq i32 %78, i32 34;
    cbr i1 %79(prob = 0.5), ^b3, ^b4;
^if.then13:
    i32 %80 = load i32* %0;
    i32 %81 = add i32 %80, i32 1;
    store i32* %0 with i32 %81;
    ubr ^while.body3;
^b3:
    i32 %82 = load i32* %0;
    i1 %83 = scmp ge i32 %82, i32 %len;
    cbr i1 %83(prob = 0.5), ^if.then, ^if.else16;
^if.then14:
    i1 %84 = scmp lt i32 %68, i32 58;
    cbr i1 %84(prob = 0.5), ^if.else12, ^if.else14;
^while.body2:
    i32 %85 = phi [^if.then10, i32 %61] [^if.then27, i32 %206] [^if.then31, i32 %250] [^if.then19, i32 %124] [^if.then23, i32 %162];
    i1 %86 = scmp ge i32 %85, i32 %len;
    cbr i1 %86(prob = 0.5), ^if.then16, ^b5;
^if.else12:
    i32 %87 = phi [^if.else9, i32 0] [^if.then14, i32 1] [^if.else14, i32 0];
    i1 %88 = scmp eq i32 %87, i32 1;
    cbr i1 %88(prob = 0.5), ^indirect1, ^if.else17;
^if.else13:
    i1 %89 = scmp eq i32 %type, i32 5;
    cbr i1 %89(prob = 0.5), ^if.then17, ^if.else18;
^if.else14:
    ubr ^if.else12;
^if.then15:
    i1 %90 = scmp lt i32 %74, i32 58;
    cbr i1 %90(prob = 0.5), ^if.else15, ^if.else19;
^b4:
    i32 %91 = load i32* %0;
    i32* %92 = getelementptr &(i32* %buf)[i32 %91];
    i32 %93 = load i32* %92;
    i1 %94 = scmp eq i32 %93, i32 92;
    cbr i1 %94(prob = 0.5), ^if.then18, ^if.then7;
^if.then16:
    i32 %95 = load i32* %0;
    i1 %96 = scmp lt i32 %95, i32 %len;
    cbr i1 %96(prob = 0.5), ^if.then20, ^b6;
^if.else15:
    i32 %97 = phi [^if.else11, i32 0] [^if.then15, i32 1] [^if.else19, i32 0];
    i1 %98 = scmp eq i32 %97, i32 0;
    cbr i1 %98(prob = 0.5), ^if.then, ^indirect2;
^if.else16:
    i32* %99 = getelementptr &(i32* %buf)[i32 %82];
    i32 %100 = load i32* %99;
    i1 %101 = scmp neq i32 %100, i32 34;
    cbr i1 %101(prob = 0.5), ^if.then, ^b8;
^b5:
    i32 %102 = load i32* %0;
    i32* %103 = getelementptr &(i32* %buf)[i32 %102];
    i32 %104 = load i32* %103;
    i1 %105 = scmp eq i32 %104, i32 32;
    cbr i1 %105(prob = 0.5), ^if.then19, ^if.else20;
^while.body3:
    i32 %106 = phi [^if.then13, i32 %81] [^if.then32, i32 %252] [^if.then37, i32 %309] [^if.then24, i32 %164] [^if.then28, i32 %208];
    i1 %107 = scmp ge i32 %106, i32 %len;
    cbr i1 %107(prob = 0.5), ^if.then21, ^b7;
^if.then17:
    i32* %108 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 0];
    store i32* %108 with i32 116;
    i32* %109 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 1];
    store i32* %109 with i32 114;
    i32* %110 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 2];
    store i32* %110 with i32 117;
    i32* %111 = getelementptr &([4 * i32]* %mTrue)[i64 0][i64 3];
    store i32* %111 with i32 101;
    i32 %112 = load i32* %0;
    i32 %113 = add i32 %112, i32 3;
    i1 %114 = scmp ge i32 %113, i32 %len;
    cbr i1 %114(prob = 0.5), ^if.then, ^if.else21;
^if.else17:
    i32 %115 = load i32* %0;
    i32* %116 = getelementptr &(i32* %buf)[i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = scmp eq i32 %117, i32 43;
    cbr i1 %118(prob = 0.5), ^indirect1, ^if.else22;
^if.else18:
    i1 %119 = scmp eq i32 %type, i32 6;
    cbr i1 %119(prob = 0.5), ^if.then22, ^if.else23;
^indirect1:
    i32 %120 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ret i32 %120;
^if.else19:
    ubr ^if.else15;
^if.then18:
    i32 %121 = load i32* %0;
    i32 %122 = add i32 %121, i32 2;
    store i32* %0 with i32 %122;
    ubr ^while.header;
^if.then19:
    i32 %123 = load i32* %0;
    i32 %124 = add i32 %123, i32 1;
    store i32* %0 with i32 %124;
    ubr ^while.body2;
^indirect2:
    i32 %125 = load i32* %0;
    ubr ^while.header1;
^if.then20:
    i32* %126 = getelementptr &(i32* %buf)[i32 %95];
    i32 %127 = load i32* %126;
    i1 %128 = scmp eq i32 %127, i32 93;
    cbr i1 %128(prob = 0.5), ^b8, ^b6;
^if.then21:
    i32 %129 = load i32* %0;
    i1 %130 = scmp lt i32 %129, i32 %len;
    cbr i1 %130(prob = 0.5), ^if.then25, ^b10;
^b6:
    i32 %131 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i32* %132 = load i32** %buf1;
    i32 %133 = load i32* %len1;
    i1 %134 = scmp eq i32 %131, i32 0;
    cbr i1 %134(prob = 0.5), ^if.then, ^b9;
^if.else20:
    i32 %135 = load i32* %0;
    i32* %136 = getelementptr &(i32* %buf)[i32 %135];
    i32 %137 = load i32* %136;
    i1 %138 = scmp eq i32 %137, i32 9;
    cbr i1 %138(prob = 0.5), ^if.then23, ^if.else24;
^b7:
    i32 %139 = load i32* %0;
    i32* %140 = getelementptr &(i32* %buf)[i32 %139];
    i32 %141 = load i32* %140;
    i1 %142 = scmp eq i32 %141, i32 32;
    cbr i1 %142(prob = 0.5), ^if.then24, ^if.else25;
^if.else21:
    i32* %143 = getelementptr &(i32* %buf)[i32 %112];
    i32 %144 = load i32* %143;
    i1 %145 = scmp neq i32 %144, i32 116;
    cbr i1 %145(prob = 0.5), ^if.then, ^if.else26;
^if.then22:
    i32* %146 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 0];
    store i32* %146 with i32 102;
    i32* %147 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 1];
    store i32* %147 with i32 97;
    i32* %148 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 2];
    store i32* %148 with i32 108;
    i32* %149 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 3];
    store i32* %149 with i32 115;
    i32* %150 = getelementptr &([5 * i32]* %mFalse)[i64 0][i64 4];
    store i32* %150 with i32 101;
    i32 %151 = load i32* %0;
    i32 %152 = add i32 %151, i32 4;
    i1 %153 = scmp ge i32 %152, i32 %len;
    cbr i1 %153(prob = 0.5), ^if.then, ^if.else27;
^if.else22:
    i32 %154 = load i32* %0;
    i32* %155 = getelementptr &(i32* %buf)[i32 %154];
    i32 %156 = load i32* %155;
    i1 %157 = scmp eq i32 %156, i32 45;
    cbr i1 %157(prob = 0.5), ^indirect1, ^if.else28;
^if.else23:
    i1 %158 = scmp eq i32 %type, i32 7;
    cbr i1 %158(prob = 0.5), ^if.then26, ^if.then;
^b8:
    i32 %159 = load i32* %0;
    i32 %160 = add i32 %159, i32 1;
    store i32* %0 with i32 %160;
    ret i32 1;
^if.then23:
    i32 %161 = load i32* %0;
    i32 %162 = add i32 %161, i32 1;
    store i32* %0 with i32 %162;
    ubr ^while.body2;
^if.then24:
    i32 %163 = load i32* %0;
    i32 %164 = add i32 %163, i32 1;
    store i32* %0 with i32 %164;
    ubr ^while.body3;
^b9:
    i32* %165 = phi [^while.body12, i32* %378] [^b6, i32* %132];
    i32 %166 = phi [^while.body12, i32 %379] [^b6, i32 %133];
    i32 %167 = load i32* %0;
    ubr ^while.body5;
^if.then25:
    i32* %168 = getelementptr &(i32* %buf)[i32 %129];
    i32 %169 = load i32* %168;
    i1 %170 = scmp eq i32 %169, i32 125;
    cbr i1 %170(prob = 0.5), ^b8, ^b10;
^while.header1:
    i32 %171 = phi [^b16, i32 %301] [^indirect2, i32 %125];
    i1 %172 = scmp lt i32 %171, i32 %len;
    cbr i1 %172(prob = 0.97), ^while.body4, ^b12;
^b10:
    i32 %173 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i32* %174 = load i32** %buf1;
    i32 %175 = load i32* %len1;
    i1 %176 = scmp eq i32 %173, i32 0;
    cbr i1 %176(prob = 0.5), ^if.then, ^b11;
^if.else24:
    i32 %177 = load i32* %0;
    i32* %178 = getelementptr &(i32* %buf)[i32 %177];
    i32 %179 = load i32* %178;
    i1 %180 = scmp eq i32 %179, i32 10;
    cbr i1 %180(prob = 0.5), ^if.then27, ^if.else29;
^if.else25:
    i32 %181 = load i32* %0;
    i32* %182 = getelementptr &(i32* %buf)[i32 %181];
    i32 %183 = load i32* %182;
    i1 %184 = scmp eq i32 %183, i32 9;
    cbr i1 %184(prob = 0.5), ^if.then28, ^if.else30;
^if.else26:
    i32 %185 = load i32* %0;
    i32 %186 = add i32 %185, i32 1;
    i32* %187 = getelementptr &(i32* %buf)[i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = load i32* %109;
    i1 %190 = scmp neq i32 %188, i32 %189;
    cbr i1 %190(prob = 0.5), ^if.then, ^if.else31;
^if.else27:
    i32* %191 = getelementptr &(i32* %buf)[i32 %151];
    i32 %192 = load i32* %191;
    i1 %193 = scmp neq i32 %192, i32 102;
    cbr i1 %193(prob = 0.5), ^if.then, ^if.else32;
^if.then26:
    i32* %194 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 0];
    store i32* %194 with i32 110;
    i32* %195 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 1];
    store i32* %195 with i32 117;
    i32* %196 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 2];
    store i32* %196 with i32 108;
    i32* %197 = getelementptr &([4 * i32]* %mNull)[i64 0][i64 3];
    store i32* %197 with i32 108;
    i32 %198 = load i32* %0;
    i32 %199 = add i32 %198, i32 3;
    i1 %200 = scmp ge i32 %199, i32 %len;
    cbr i1 %200(prob = 0.5), ^if.then, ^if.else33;
^if.else28:
    i32 %201 = load i32* %0;
    i32* %202 = getelementptr &(i32* %buf)[i32 %201];
    i32 %203 = load i32* %202;
    i1 %204 = scmp eq i32 %203, i32 116;
    cbr i1 %204(prob = 0.5), ^if.then29, ^if.else34;
^if.then27:
    i32 %205 = load i32* %0;
    i32 %206 = add i32 %205, i32 1;
    store i32* %0 with i32 %206;
    ubr ^while.body2;
^if.then28:
    i32 %207 = load i32* %0;
    i32 %208 = add i32 %207, i32 1;
    store i32* %0 with i32 %208;
    ubr ^while.body3;
^while.body4:
    i32 %209 = load i32* %0;
    i32* %210 = getelementptr &(i32* %buf)[i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = scmp gt i32 %211, i32 47;
    cbr i1 %212(prob = 0.5), ^if.then30, ^while.body6;
^b11:
    i32* %213 = phi [^while.body21, i32* %553] [^b10, i32* %174];
    i32 %214 = phi [^while.body21, i32 %554] [^b10, i32 %175];
    i32 %215 = load i32* %0;
    ubr ^while.body7;
^b12:
    i32 %216 = load i32* %0;
    i1 %217 = scmp lt i32 %216, i32 %len;
    cbr i1 %217(prob = 0.5), ^if.then33, ^b14;
^while.body5:
    i32 %218 = phi [^b9, i32 %167] [^if.then45, i32 %387] [^if.then35, i32 %303] [^if.then40, i32 %343] [^if.then51, i32 %428];
    i1 %219 = scmp ge i32 %218, i32 %166;
    cbr i1 %219(prob = 0.5), ^b13, ^b15;
^if.else29:
    i32 %220 = load i32* %0;
    i32* %221 = getelementptr &(i32* %buf)[i32 %220];
    i32 %222 = load i32* %221;
    i1 %223 = scmp eq i32 %222, i32 13;
    cbr i1 %223(prob = 0.5), ^if.then31, ^if.then16;
^if.else30:
    i32 %224 = load i32* %0;
    i32* %225 = getelementptr &(i32* %buf)[i32 %224];
    i32 %226 = load i32* %225;
    i1 %227 = scmp eq i32 %226, i32 10;
    cbr i1 %227(prob = 0.5), ^if.then32, ^if.else35;
^if.else31:
    i32 %228 = load i32* %0;
    i32 %229 = add i32 %228, i32 2;
    i32* %230 = getelementptr &(i32* %buf)[i32 %229];
    i32 %231 = load i32* %230;
    i32 %232 = load i32* %110;
    i1 %233 = scmp neq i32 %231, i32 %232;
    cbr i1 %233(prob = 0.5), ^if.then, ^if.else36;
^if.else32:
    i32 %234 = load i32* %0;
    i32 %235 = add i32 %234, i32 1;
    i32* %236 = getelementptr &(i32* %buf)[i32 %235];
    i32 %237 = load i32* %236;
    i32 %238 = load i32* %147;
    i1 %239 = scmp neq i32 %237, i32 %238;
    cbr i1 %239(prob = 0.5), ^if.then, ^if.else37;
^if.else33:
    i32* %240 = getelementptr &(i32* %buf)[i32 %198];
    i32 %241 = load i32* %240;
    i1 %242 = scmp neq i32 %241, i32 110;
    cbr i1 %242(prob = 0.5), ^if.then, ^if.else38;
^if.else34:
    i32 %243 = load i32* %0;
    i32* %244 = getelementptr &(i32* %buf)[i32 %243];
    i32 %245 = load i32* %244;
    i1 %246 = scmp eq i32 %245, i32 102;
    cbr i1 %246(prob = 0.5), ^if.then34, ^if.else39;
^if.then29:
    i32 %247 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ret i32 %247;
^if.then30:
    i1 %248 = scmp lt i32 %211, i32 58;
    cbr i1 %248(prob = 0.5), ^while.body6, ^if.else40;
^if.then31:
    i32 %249 = load i32* %0;
    i32 %250 = add i32 %249, i32 1;
    store i32* %0 with i32 %250;
    ubr ^while.body2;
^if.then32:
    i32 %251 = load i32* %0;
    i32 %252 = add i32 %251, i32 1;
    store i32* %0 with i32 %252;
    ubr ^while.body3;
^if.then33:
    i32* %253 = getelementptr &(i32* %buf)[i32 %216];
    i32 %254 = load i32* %253;
    i1 %255 = scmp eq i32 %254, i32 46;
    cbr i1 %255(prob = 0.5), ^if.then36, ^indirect3;
^while.body6:
    i32 %256 = phi [^if.then30, i32 1] [^if.else40, i32 0] [^while.body4, i32 0];
    i1 %257 = scmp neq i32 %256, i32 1;
    cbr i1 %257(prob = 0.5), ^b12, ^b16;
^b13:
    i32 %258 = load i32* %0;
    i32* %259 = getelementptr &(i32* %165)[i32 %258];
    i32 %260 = load i32* %259;
    i1 %261 = scmp eq i32 %260, i32 44;
    cbr i1 %261(prob = 0.97), ^while.body8, ^b17;
^b14:
    i32 %262 = phi [^indirect4, i32 %414] [^b12, i32 %216] [^if.then36, i32 %306] [^indirect3, i32 %299];
    i1 %263 = scmp lt i32 %262, i32 %len;
    cbr i1 %263(prob = 0.5), ^if.then38, ^b20;
^b15:
    i32 %264 = load i32* %0;
    i32* %265 = getelementptr &(i32* %165)[i32 %264];
    i32 %266 = load i32* %265;
    i1 %267 = scmp eq i32 %266, i32 32;
    cbr i1 %267(prob = 0.5), ^if.then35, ^if.else41;
^while.body7:
    i32 %268 = phi [^b11, i32 %215] [^if.then52, i32 %430] [^if.then56, i32 %462] [^if.then41, i32 %345] [^if.then46, i32 %389];
    i1 %269 = scmp ge i32 %268, i32 %214;
    cbr i1 %269(prob = 0.5), ^b18, ^b19;
^if.else35:
    i32 %270 = load i32* %0;
    i32* %271 = getelementptr &(i32* %buf)[i32 %270];
    i32 %272 = load i32* %271;
    i1 %273 = scmp eq i32 %272, i32 13;
    cbr i1 %273(prob = 0.5), ^if.then37, ^if.then21;
^if.else36:
    i32 %274 = load i32* %0;
    i32 %275 = add i32 %274, i32 3;
    i32* %276 = getelementptr &(i32* %buf)[i32 %275];
    i32 %277 = load i32* %276;
    i32 %278 = load i32* %111;
    i1 %279 = scmp neq i32 %277, i32 %278;
    cbr i1 %279(prob = 0.5), ^if.then, ^b21;
^if.else37:
    i32 %280 = load i32* %0;
    i32 %281 = add i32 %280, i32 2;
    i32* %282 = getelementptr &(i32* %buf)[i32 %281];
    i32 %283 = load i32* %282;
    i32 %284 = load i32* %148;
    i1 %285 = scmp neq i32 %283, i32 %284;
    cbr i1 %285(prob = 0.5), ^if.then, ^if.else42;
^if.else38:
    i32 %286 = load i32* %0;
    i32 %287 = add i32 %286, i32 1;
    i32* %288 = getelementptr &(i32* %buf)[i32 %287];
    i32 %289 = load i32* %288;
    i32 %290 = load i32* %195;
    i1 %291 = scmp neq i32 %289, i32 %290;
    cbr i1 %291(prob = 0.5), ^if.then, ^if.else43;
^if.else39:
    i32 %292 = load i32* %0;
    i32* %293 = getelementptr &(i32* %buf)[i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = scmp eq i32 %294, i32 110;
    cbr i1 %295(prob = 0.5), ^if.then39, ^if.then;
^if.then34:
    i32 %296 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ret i32 %296;
^if.else40:
    ubr ^while.body6;
^while.body8:
    i32 %297 = load i32* %0;
    i32 %298 = add i32 %297, i32 1;
    store i32* %0 with i32 %298;
    ubr ^while.body10;
^indirect3:
    i32 %299 = load i32* %0;
    ubr ^b14;
^b16:
    i32 %300 = load i32* %0;
    i32 %301 = add i32 %300, i32 1;
    store i32* %0 with i32 %301;
    ubr ^while.header1;
^if.then35:
    i32 %302 = load i32* %0;
    i32 %303 = add i32 %302, i32 1;
    store i32* %0 with i32 %303;
    ubr ^while.body5;
^b17:
    i32 %304 = load i32* %0;
    ubr ^while.body11;
^if.then36:
    i32 %305 = load i32* %0;
    i32 %306 = add i32 %305, i32 1;
    store i32* %0 with i32 %306;
    i1 %307 = scmp lt i32 %306, i32 %len;
    cbr i1 %307(prob = 0.97), ^while.body9, ^b14;
^if.then37:
    i32 %308 = load i32* %0;
    i32 %309 = add i32 %308, i32 1;
    store i32* %0 with i32 %309;
    ubr ^while.body3;
^if.then38:
    i32 %310 = load i32* %0;
    i32* %311 = getelementptr &(i32* %buf)[i32 %310];
    i32 %312 = load i32* %311;
    i1 %313 = scmp eq i32 %312, i32 101;
    cbr i1 %313(prob = 0.5), ^if.then42, ^b20;
^b18:
    i32 %314 = load i32* %0;
    i1 %315 = scmp ge i32 %314, i32 %214;
    cbr i1 %315(prob = 0.5), ^if.then, ^b22;
^if.else41:
    i32 %316 = load i32* %0;
    i32* %317 = getelementptr &(i32* %165)[i32 %316];
    i32 %318 = load i32* %317;
    i1 %319 = scmp eq i32 %318, i32 9;
    cbr i1 %319(prob = 0.5), ^if.then40, ^if.else44;
^b19:
    i32 %320 = load i32* %0;
    i32* %321 = getelementptr &(i32* %213)[i32 %320];
    i32 %322 = load i32* %321;
    i1 %323 = scmp eq i32 %322, i32 32;
    cbr i1 %323(prob = 0.5), ^if.then41, ^if.else45;
^if.else42:
    i32 %324 = load i32* %0;
    i32 %325 = add i32 %324, i32 3;
    i32* %326 = getelementptr &(i32* %buf)[i32 %325];
    i32 %327 = load i32* %326;
    i32 %328 = load i32* %149;
    i1 %329 = scmp neq i32 %327, i32 %328;
    cbr i1 %329(prob = 0.5), ^if.then, ^if.else46;
^if.else43:
    i32 %330 = load i32* %0;
    i32 %331 = add i32 %330, i32 2;
    i32* %332 = getelementptr &(i32* %buf)[i32 %331];
    i32 %333 = load i32* %332;
    i32 %334 = load i32* %196;
    i1 %335 = scmp neq i32 %333, i32 %334;
    cbr i1 %335(prob = 0.5), ^if.then, ^if.else47;
^b20:
    ret i32 1;
^if.then39:
    i32 %336 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ret i32 %336;
^b21:
    i32 %337 = load i32* %0;
    i32 %338 = add i32 %337, i32 4;
    store i32* %0 with i32 %338;
    ret i32 1;
^while.body9:
    i32* %339 = getelementptr &(i32* %buf)[i32 %306];
    i32 %340 = load i32* %339;
    i1 %341 = scmp gt i32 %340, i32 47;
    cbr i1 %341(prob = 0.5), ^if.then43, ^while.body13;
^if.then40:
    i32 %342 = load i32* %0;
    i32 %343 = add i32 %342, i32 1;
    store i32* %0 with i32 %343;
    ubr ^while.body5;
^if.then41:
    i32 %344 = load i32* %0;
    i32 %345 = add i32 %344, i32 1;
    store i32* %0 with i32 %345;
    ubr ^while.body7;
^while.body10:
    i32 %346 = phi [^while.body8, i32 %298] [^if.then57, i32 %480] [^if.then54, i32 %453] [^if.then60, i32 %503] [^if.then48, i32 %418];
    i1 %347 = scmp ge i32 %346, i32 %166;
    cbr i1 %347(prob = 0.5), ^while.body12, ^b24;
^if.then42:
    i32 %348 = load i32* %0;
    i32 %349 = add i32 %348, i32 1;
    store i32* %0 with i32 %349;
    i1 %350 = scmp lt i32 %349, i32 %len;
    cbr i1 %350(prob = 0.5), ^if.then44, ^b26;
^while.body11:
    i32 %351 = phi [^b17, i32 %304] [^if.then58, i32 %482] [^if.then49, i32 %421] [^if.then62, i32 %506] [^if.then55, i32 %456];
    i1 %352 = scmp ge i32 %351, i32 %166;
    cbr i1 %352(prob = 0.5), ^b25, ^b27;
^b22:
    i32* %353 = getelementptr &(i32* %213)[i32 %314];
    i32 %354 = load i32* %353;
    i1 %355 = scmp neq i32 %354, i32 58;
    cbr i1 %355(prob = 0.5), ^if.then, ^b23;
^if.else44:
    i32 %356 = load i32* %0;
    i32* %357 = getelementptr &(i32* %165)[i32 %356];
    i32 %358 = load i32* %357;
    i1 %359 = scmp eq i32 %358, i32 10;
    cbr i1 %359(prob = 0.5), ^if.then45, ^if.else48;
^if.else45:
    i32 %360 = load i32* %0;
    i32* %361 = getelementptr &(i32* %213)[i32 %360];
    i32 %362 = load i32* %361;
    i1 %363 = scmp eq i32 %362, i32 9;
    cbr i1 %363(prob = 0.5), ^if.then46, ^if.else49;
^if.else46:
    i32 %364 = load i32* %0;
    i32 %365 = add i32 %364, i32 4;
    i32* %366 = getelementptr &(i32* %buf)[i32 %365];
    i32 %367 = load i32* %366;
    i32 %368 = load i32* %150;
    i1 %369 = scmp neq i32 %367, i32 %368;
    cbr i1 %369(prob = 0.5), ^if.then, ^b28;
^if.else47:
    i32 %370 = load i32* %0;
    i32 %371 = add i32 %370, i32 3;
    i32* %372 = getelementptr &(i32* %buf)[i32 %371];
    i32 %373 = load i32* %372;
    i32 %374 = load i32* %197;
    i1 %375 = scmp neq i32 %373, i32 %374;
    cbr i1 %375(prob = 0.5), ^if.then, ^b21;
^if.then43:
    i1 %376 = scmp lt i32 %340, i32 58;
    cbr i1 %376(prob = 0.5), ^while.body13, ^if.else50;
^while.body12:
    i32 %377 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %165, i32 %166, i32* %0);
    i32* %378 = load i32** %buf1;
    i32 %379 = load i32* %len1;
    i1 %380 = scmp eq i32 %377, i32 0;
    cbr i1 %380(prob = 0.5), ^if.then, ^b9;
^while.body13:
    i32 %381 = phi [^while.body9, i32 0] [^if.then43, i32 1] [^if.else50, i32 0];
    i1 %382 = scmp neq i32 %381, i32 1;
    cbr i1 %382(prob = 0.5), ^indirect4, ^if.then36;
^if.then44:
    i32* %383 = getelementptr &(i32* %buf)[i32 %349];
    i32 %384 = load i32* %383;
    i1 %385 = scmp eq i32 %384, i32 43;
    cbr i1 %385(prob = 0.5), ^if.then47, ^indirect5;
^if.then45:
    i32 %386 = load i32* %0;
    i32 %387 = add i32 %386, i32 1;
    store i32* %0 with i32 %387;
    ubr ^while.body5;
^if.then46:
    i32 %388 = load i32* %0;
    i32 %389 = add i32 %388, i32 1;
    store i32* %0 with i32 %389;
    ubr ^while.body7;
^b23:
    i32 %390 = load i32* %0;
    i32 %391 = add i32 %390, i32 1;
    store i32* %0 with i32 %391;
    ubr ^while.body14;
^b24:
    i32 %392 = load i32* %0;
    i32* %393 = getelementptr &(i32* %165)[i32 %392];
    i32 %394 = load i32* %393;
    i1 %395 = scmp eq i32 %394, i32 32;
    cbr i1 %395(prob = 0.5), ^if.then48, ^if.else51;
^b25:
    i32 %396 = load i32* %0;
    i1 %397 = scmp ge i32 %396, i32 %166;
    cbr i1 %397(prob = 0.5), ^if.then, ^b29;
^b26:
    i32 %398 = phi [^if.then47, i32 %416] [^indirect5, i32 %419] [^if.then42, i32 %349];
    i1 %399 = scmp lt i32 %398, i32 %len;
    cbr i1 %399(prob = 0.5), ^if.then50, ^indirect6;
^b27:
    i32 %400 = load i32* %0;
    i32* %401 = getelementptr &(i32* %165)[i32 %400];
    i32 %402 = load i32* %401;
    i1 %403 = scmp eq i32 %402, i32 32;
    cbr i1 %403(prob = 0.5), ^if.then49, ^if.else52;
^if.else48:
    i32 %404 = load i32* %0;
    i32* %405 = getelementptr &(i32* %165)[i32 %404];
    i32 %406 = load i32* %405;
    i1 %407 = scmp eq i32 %406, i32 13;
    cbr i1 %407(prob = 0.5), ^if.then51, ^b13;
^if.else49:
    i32 %408 = load i32* %0;
    i32* %409 = getelementptr &(i32* %213)[i32 %408];
    i32 %410 = load i32* %409;
    i1 %411 = scmp eq i32 %410, i32 10;
    cbr i1 %411(prob = 0.5), ^if.then52, ^if.else53;
^b28:
    i32 %412 = load i32* %0;
    i32 %413 = add i32 %412, i32 5;
    store i32* %0 with i32 %413;
    ret i32 1;
^if.else50:
    ubr ^while.body13;
^indirect4:
    i32 %414 = load i32* %0;
    ubr ^b14;
^if.then47:
    i32 %415 = load i32* %0;
    i32 %416 = add i32 %415, i32 1;
    store i32* %0 with i32 %416;
    ubr ^b26;
^if.then48:
    i32 %417 = load i32* %0;
    i32 %418 = add i32 %417, i32 1;
    store i32* %0 with i32 %418;
    ubr ^while.body10;
^indirect5:
    i32 %419 = load i32* %0;
    ubr ^b26;
^if.then49:
    i32 %420 = load i32* %0;
    i32 %421 = add i32 %420, i32 1;
    store i32* %0 with i32 %421;
    ubr ^while.body11;
^indirect6:
    i32 %422 = load i32* %0;
    ubr ^while.header2;
^if.then50:
    i32 %423 = load i32* %0;
    i32* %424 = getelementptr &(i32* %buf)[i32 %423];
    i32 %425 = load i32* %424;
    i1 %426 = scmp eq i32 %425, i32 45;
    cbr i1 %426(prob = 0.5), ^if.then53, ^indirect7;
^if.then51:
    i32 %427 = load i32* %0;
    i32 %428 = add i32 %427, i32 1;
    store i32* %0 with i32 %428;
    ubr ^while.body5;
^if.then52:
    i32 %429 = load i32* %0;
    i32 %430 = add i32 %429, i32 1;
    store i32* %0 with i32 %430;
    ubr ^while.body7;
^if.else51:
    i32 %431 = load i32* %0;
    i32* %432 = getelementptr &(i32* %165)[i32 %431];
    i32 %433 = load i32* %432;
    i1 %434 = scmp eq i32 %433, i32 9;
    cbr i1 %434(prob = 0.5), ^if.then54, ^if.else54;
^b29:
    i32* %435 = getelementptr &(i32* %165)[i32 %396];
    i32 %436 = load i32* %435;
    i1 %437 = scmp neq i32 %436, i32 93;
    cbr i1 %437(prob = 0.5), ^if.then, ^b8;
^if.else52:
    i32 %438 = load i32* %0;
    i32* %439 = getelementptr &(i32* %165)[i32 %438];
    i32 %440 = load i32* %439;
    i1 %441 = scmp eq i32 %440, i32 9;
    cbr i1 %441(prob = 0.5), ^if.then55, ^if.else55;
^while.body14:
    i32 %442 = phi [^if.then64, i32 %518] [^b23, i32 %391] [^if.then66, i32 %537] [^if.then59, i32 %484] [^if.then63, i32 %508];
    i1 %443 = scmp ge i32 %442, i32 %214;
    cbr i1 %443(prob = 0.5), ^b30, ^b31;
^if.else53:
    i32 %444 = load i32* %0;
    i32* %445 = getelementptr &(i32* %213)[i32 %444];
    i32 %446 = load i32* %445;
    i1 %447 = scmp eq i32 %446, i32 13;
    cbr i1 %447(prob = 0.5), ^if.then56, ^b18;
^if.then53:
    i32* %448 = phi [^while.body16, i32* %457] [^if.then50, i32* %buf];
    i32 %449 = phi [^while.body16, i32 %458] [^if.then50, i32 %len];
    i32 %450 = load i32* %0;
    i32 %451 = add i32 %450, i32 1;
    store i32* %0 with i32 %451;
    ubr ^while.header2;
^if.then54:
    i32 %452 = load i32* %0;
    i32 %453 = add i32 %452, i32 1;
    store i32* %0 with i32 %453;
    ubr ^while.body10;
^indirect7:
    i32 %454 = load i32* %0;
    ubr ^while.header2;
^if.then55:
    i32 %455 = load i32* %0;
    i32 %456 = add i32 %455, i32 1;
    store i32* %0 with i32 %456;
    ubr ^while.body11;
^while.header2:
    i32* %457 = phi [^indirect7, i32* %buf] [^if.then53, i32* %448] [^indirect6, i32* %buf];
    i32 %458 = phi [^indirect7, i32 %len] [^if.then53, i32 %449] [^indirect6, i32 %len];
    i32 %459 = phi [^if.then53, i32 %451] [^indirect7, i32 %454] [^indirect6, i32 %422];
    i1 %460 = scmp lt i32 %459, i32 %458;
    cbr i1 %460(prob = 0.97), ^while.body15, ^b20;
^if.then56:
    i32 %461 = load i32* %0;
    i32 %462 = add i32 %461, i32 1;
    store i32* %0 with i32 %462;
    ubr ^while.body7;
^if.else54:
    i32 %463 = load i32* %0;
    i32* %464 = getelementptr &(i32* %165)[i32 %463];
    i32 %465 = load i32* %464;
    i1 %466 = scmp eq i32 %465, i32 10;
    cbr i1 %466(prob = 0.5), ^if.then57, ^if.else56;
^b30:
    i32 %467 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %213, i32 %214, i32* %0);
    i32* %468 = load i32** %buf1;
    i32 %469 = load i32* %len1;
    i1 %470 = scmp eq i32 %467, i32 0;
    cbr i1 %470(prob = 0.5), ^if.then, ^b32;
^if.else55:
    i32 %471 = load i32* %0;
    i32* %472 = getelementptr &(i32* %165)[i32 %471];
    i32 %473 = load i32* %472;
    i1 %474 = scmp eq i32 %473, i32 10;
    cbr i1 %474(prob = 0.5), ^if.then58, ^if.else57;
^b31:
    i32 %475 = load i32* %0;
    i32* %476 = getelementptr &(i32* %213)[i32 %475];
    i32 %477 = load i32* %476;
    i1 %478 = scmp eq i32 %477, i32 32;
    cbr i1 %478(prob = 0.5), ^if.then59, ^if.else58;
^if.then57:
    i32 %479 = load i32* %0;
    i32 %480 = add i32 %479, i32 1;
    store i32* %0 with i32 %480;
    ubr ^while.body10;
^if.then58:
    i32 %481 = load i32* %0;
    i32 %482 = add i32 %481, i32 1;
    store i32* %0 with i32 %482;
    ubr ^while.body11;
^if.then59:
    i32 %483 = load i32* %0;
    i32 %484 = add i32 %483, i32 1;
    store i32* %0 with i32 %484;
    ubr ^while.body14;
^b32:
    i32 %485 = load i32* %0;
    ubr ^while.body17;
^while.body15:
    i32 %486 = load i32* %0;
    i32* %487 = getelementptr &(i32* %457)[i32 %486];
    i32 %488 = load i32* %487;
    i1 %489 = scmp gt i32 %488, i32 47;
    cbr i1 %489(prob = 0.5), ^if.then61, ^while.body16;
^if.else56:
    i32 %490 = load i32* %0;
    i32* %491 = getelementptr &(i32* %165)[i32 %490];
    i32 %492 = load i32* %491;
    i1 %493 = scmp eq i32 %492, i32 13;
    cbr i1 %493(prob = 0.5), ^if.then60, ^while.body12;
^if.else57:
    i32 %494 = load i32* %0;
    i32* %495 = getelementptr &(i32* %165)[i32 %494];
    i32 %496 = load i32* %495;
    i1 %497 = scmp eq i32 %496, i32 13;
    cbr i1 %497(prob = 0.5), ^if.then62, ^b25;
^if.else58:
    i32 %498 = load i32* %0;
    i32* %499 = getelementptr &(i32* %213)[i32 %498];
    i32 %500 = load i32* %499;
    i1 %501 = scmp eq i32 %500, i32 9;
    cbr i1 %501(prob = 0.5), ^if.then63, ^if.else59;
^if.then60:
    i32 %502 = load i32* %0;
    i32 %503 = add i32 %502, i32 1;
    store i32* %0 with i32 %503;
    ubr ^while.body10;
^if.then61:
    i1 %504 = scmp lt i32 %488, i32 58;
    cbr i1 %504(prob = 0.5), ^while.body16, ^if.else60;
^if.then62:
    i32 %505 = load i32* %0;
    i32 %506 = add i32 %505, i32 1;
    store i32* %0 with i32 %506;
    ubr ^while.body11;
^if.then63:
    i32 %507 = load i32* %0;
    i32 %508 = add i32 %507, i32 1;
    store i32* %0 with i32 %508;
    ubr ^while.body14;
^while.body16:
    i32 %509 = phi [^while.body15, i32 0] [^if.then61, i32 1] [^if.else60, i32 0];
    i1 %510 = scmp neq i32 %509, i32 1;
    cbr i1 %510(prob = 0.5), ^b20, ^if.then53;
^while.body17:
    i32 %511 = phi [^if.then68, i32 %557] [^if.then71, i32 %577] [^if.then65, i32 %534] [^b32, i32 %485] [^if.then67, i32 %543];
    i1 %512 = scmp ge i32 %511, i32 %469;
    cbr i1 %512(prob = 0.5), ^b33, ^b34;
^if.else59:
    i32 %513 = load i32* %0;
    i32* %514 = getelementptr &(i32* %213)[i32 %513];
    i32 %515 = load i32* %514;
    i1 %516 = scmp eq i32 %515, i32 10;
    cbr i1 %516(prob = 0.5), ^if.then64, ^if.else61;
^if.else60:
    ubr ^while.body16;
^if.then64:
    i32 %517 = load i32* %0;
    i32 %518 = add i32 %517, i32 1;
    store i32* %0 with i32 %518;
    ubr ^while.body14;
^b33:
    i32 %519 = load i32* %0;
    i32* %520 = getelementptr &(i32* %468)[i32 %519];
    i32 %521 = load i32* %520;
    i1 %522 = scmp eq i32 %521, i32 44;
    cbr i1 %522(prob = 0.97), ^while.body18, ^b35;
^b34:
    i32 %523 = load i32* %0;
    i32* %524 = getelementptr &(i32* %468)[i32 %523];
    i32 %525 = load i32* %524;
    i1 %526 = scmp eq i32 %525, i32 32;
    cbr i1 %526(prob = 0.5), ^if.then65, ^if.else62;
^if.else61:
    i32 %527 = load i32* %0;
    i32* %528 = getelementptr &(i32* %213)[i32 %527];
    i32 %529 = load i32* %528;
    i1 %530 = scmp eq i32 %529, i32 13;
    cbr i1 %530(prob = 0.5), ^if.then66, ^b30;
^while.body18:
    i32 %531 = load i32* %0;
    i32 %532 = add i32 %531, i32 1;
    store i32* %0 with i32 %532;
    ubr ^while.body19;
^if.then65:
    i32 %533 = load i32* %0;
    i32 %534 = add i32 %533, i32 1;
    store i32* %0 with i32 %534;
    ubr ^while.body17;
^b35:
    i32 %535 = load i32* %0;
    ubr ^while.body20;
^if.then66:
    i32 %536 = load i32* %0;
    i32 %537 = add i32 %536, i32 1;
    store i32* %0 with i32 %537;
    ubr ^while.body14;
^if.else62:
    i32 %538 = load i32* %0;
    i32* %539 = getelementptr &(i32* %468)[i32 %538];
    i32 %540 = load i32* %539;
    i1 %541 = scmp eq i32 %540, i32 9;
    cbr i1 %541(prob = 0.5), ^if.then67, ^if.else63;
^if.then67:
    i32 %542 = load i32* %0;
    i32 %543 = add i32 %542, i32 1;
    store i32* %0 with i32 %543;
    ubr ^while.body17;
^while.body19:
    i32 %544 = phi [^while.body18, i32 %532] [^if.then74, i32 %602] [^if.then72, i32 %590] [^if.then76, i32 %614] [^if.then69, i32 %573];
    i1 %545 = scmp ge i32 %544, i32 %469;
    cbr i1 %545(prob = 0.5), ^while.body21, ^b36;
^while.body20:
    i32 %546 = phi [^if.then75, i32 %604] [^b35, i32 %535] [^if.then77, i32 %616] [^if.then70, i32 %575] [^if.then73, i32 %592];
    i1 %547 = scmp ge i32 %546, i32 %469;
    cbr i1 %547(prob = 0.5), ^b37, ^b38;
^if.else63:
    i32 %548 = load i32* %0;
    i32* %549 = getelementptr &(i32* %468)[i32 %548];
    i32 %550 = load i32* %549;
    i1 %551 = scmp eq i32 %550, i32 10;
    cbr i1 %551(prob = 0.5), ^if.then68, ^if.else64;
^while.body21:
    i32 %552 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %468, i32 %469, i32* %0);
    i32* %553 = load i32** %buf1;
    i32 %554 = load i32* %len1;
    i1 %555 = scmp eq i32 %552, i32 0;
    cbr i1 %555(prob = 0.5), ^if.then, ^b11;
^if.then68:
    i32 %556 = load i32* %0;
    i32 %557 = add i32 %556, i32 1;
    store i32* %0 with i32 %557;
    ubr ^while.body17;
^b36:
    i32 %558 = load i32* %0;
    i32* %559 = getelementptr &(i32* %468)[i32 %558];
    i32 %560 = load i32* %559;
    i1 %561 = scmp eq i32 %560, i32 32;
    cbr i1 %561(prob = 0.5), ^if.then69, ^if.else65;
^b37:
    i32 %562 = load i32* %0;
    i1 %563 = scmp ge i32 %562, i32 %469;
    cbr i1 %563(prob = 0.5), ^if.then, ^if.else66;
^b38:
    i32 %564 = load i32* %0;
    i32* %565 = getelementptr &(i32* %468)[i32 %564];
    i32 %566 = load i32* %565;
    i1 %567 = scmp eq i32 %566, i32 32;
    cbr i1 %567(prob = 0.5), ^if.then70, ^if.else67;
^if.else64:
    i32 %568 = load i32* %0;
    i32* %569 = getelementptr &(i32* %468)[i32 %568];
    i32 %570 = load i32* %569;
    i1 %571 = scmp eq i32 %570, i32 13;
    cbr i1 %571(prob = 0.5), ^if.then71, ^b33;
^if.then69:
    i32 %572 = load i32* %0;
    i32 %573 = add i32 %572, i32 1;
    store i32* %0 with i32 %573;
    ubr ^while.body19;
^if.then70:
    i32 %574 = load i32* %0;
    i32 %575 = add i32 %574, i32 1;
    store i32* %0 with i32 %575;
    ubr ^while.body20;
^if.then71:
    i32 %576 = load i32* %0;
    i32 %577 = add i32 %576, i32 1;
    store i32* %0 with i32 %577;
    ubr ^while.body17;
^if.else65:
    i32 %578 = load i32* %0;
    i32* %579 = getelementptr &(i32* %468)[i32 %578];
    i32 %580 = load i32* %579;
    i1 %581 = scmp eq i32 %580, i32 9;
    cbr i1 %581(prob = 0.5), ^if.then72, ^if.else68;
^if.else66:
    i32* %582 = getelementptr &(i32* %468)[i32 %562];
    i32 %583 = load i32* %582;
    i1 %584 = scmp neq i32 %583, i32 125;
    cbr i1 %584(prob = 0.5), ^if.then, ^b8;
^if.else67:
    i32 %585 = load i32* %0;
    i32* %586 = getelementptr &(i32* %468)[i32 %585];
    i32 %587 = load i32* %586;
    i1 %588 = scmp eq i32 %587, i32 9;
    cbr i1 %588(prob = 0.5), ^if.then73, ^if.else69;
^if.then72:
    i32 %589 = load i32* %0;
    i32 %590 = add i32 %589, i32 1;
    store i32* %0 with i32 %590;
    ubr ^while.body19;
^if.then73:
    i32 %591 = load i32* %0;
    i32 %592 = add i32 %591, i32 1;
    store i32* %0 with i32 %592;
    ubr ^while.body20;
^if.else68:
    i32 %593 = load i32* %0;
    i32* %594 = getelementptr &(i32* %468)[i32 %593];
    i32 %595 = load i32* %594;
    i1 %596 = scmp eq i32 %595, i32 10;
    cbr i1 %596(prob = 0.5), ^if.then74, ^if.else70;
^if.else69:
    i32 %597 = load i32* %0;
    i32* %598 = getelementptr &(i32* %468)[i32 %597];
    i32 %599 = load i32* %598;
    i1 %600 = scmp eq i32 %599, i32 10;
    cbr i1 %600(prob = 0.5), ^if.then75, ^if.else71;
^if.then74:
    i32 %601 = load i32* %0;
    i32 %602 = add i32 %601, i32 1;
    store i32* %0 with i32 %602;
    ubr ^while.body19;
^if.then75:
    i32 %603 = load i32* %0;
    i32 %604 = add i32 %603, i32 1;
    store i32* %0 with i32 %604;
    ubr ^while.body20;
^if.else70:
    i32 %605 = load i32* %0;
    i32* %606 = getelementptr &(i32* %468)[i32 %605];
    i32 %607 = load i32* %606;
    i1 %608 = scmp eq i32 %607, i32 13;
    cbr i1 %608(prob = 0.5), ^if.then76, ^while.body21;
^if.else71:
    i32 %609 = load i32* %0;
    i32* %610 = getelementptr &(i32* %468)[i32 %609];
    i32 %611 = load i32* %610;
    i1 %612 = scmp eq i32 %611, i32 13;
    cbr i1 %612(prob = 0.5), ^if.then77, ^b37;
^if.then76:
    i32 %613 = load i32* %0;
    i32 %614 = add i32 %613, i32 1;
    store i32* %0 with i32 %614;
    ubr ^while.body19;
^if.then77:
    i32 %615 = load i32* %0;
    i32 %616 = add i32 %615, i32 1;
    store i32* %0 with i32 %616;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %pos = alloc i32;
    i32* %i = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %6] [^entry, i32 %0];
    i32 %2 = phi [^while.body, i32 %5] [^entry, i32 0];
    i1 %3 = scmp neq i32 %1, i32 35;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %4 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i32 %2];
    store i32* %4 with i32 %1;
    i32 %5 = add i32 %2, i32 1;
    store i32* %i with i32 %5;
    i32 %6 = call () -> i32 @getch();
    ubr ^while.header;
^b:
    i32* %7 = getelementptr &([50000000 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.body1;
^while.body1:
    i32 %8 = phi [^if.then3, i32 %28] [^if.then1, i32 %20] [^if.then6, i32 %33] [^if.then, i32 %16] [^b, i32 0];
    i1 %9 = scmp ge i32 %8, i32 %2;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %10 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %7, i32 %2, i32* %pos);
    i32 %11 = load i32* %i;
    i32 %12 = load i32* %pos;
    ubr ^while.body2;
^b2:
    i32* %13 = getelementptr &(i32* %7)[i32 %8];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 32;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %16 = add i32 %8, i32 1;
    store i32* %pos with i32 %16;
    ubr ^while.body1;
^while.body2:
    i32 %17 = phi [^if.then7, i32 %36] [^if.then5, i32 %32] [^if.then8, i32 %39] [^if.then2, i32 %27] [^b1, i32 %12];
    i1 %18 = scmp ge i32 %17, i32 %11;
    cbr i1 %18(prob = 0.5), ^b3, ^b4;
^if.else:
    i1 %19 = scmp eq i32 %14, i32 9;
    cbr i1 %19(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %20 = add i32 %8, i32 1;
    store i32* %pos with i32 %20;
    ubr ^while.body1;
^b3:
    i1 %21 = scmp neq i32 %10, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then4, ^if.else4;
^b4:
    i32* %22 = getelementptr &(i32* %7)[i32 %17];
    i32 %23 = load i32* %22;
    i1 %24 = scmp eq i32 %23, i32 32;
    cbr i1 %24(prob = 0.5), ^if.then2, ^if.else2;
^if.else1:
    i32 %25 = load i32* %13;
    i1 %26 = scmp eq i32 %25, i32 10;
    cbr i1 %26(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    i32 %27 = add i32 %17, i32 1;
    ubr ^while.body2;
^if.then3:
    i32 %28 = add i32 %8, i32 1;
    store i32* %pos with i32 %28;
    ubr ^while.body1;
^if.else2:
    i1 %29 = scmp eq i32 %23, i32 9;
    cbr i1 %29(prob = 0.5), ^if.then5, ^if.else5;
^if.else3:
    i32 %30 = load i32* %13;
    i1 %31 = scmp eq i32 %30, i32 13;
    cbr i1 %31(prob = 0.5), ^if.then6, ^b1;
^if.then4:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.else4:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ret i32 1;
^if.then5:
    i32 %32 = add i32 %17, i32 1;
    ubr ^while.body2;
^if.then6:
    i32 %33 = add i32 %8, i32 1;
    store i32* %pos with i32 %33;
    ubr ^while.body1;
^if.else5:
    i32 %34 = load i32* %22;
    i1 %35 = scmp eq i32 %34, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then7, ^if.else6;
^if.then7:
    i32 %36 = add i32 %17, i32 1;
    ubr ^while.body2;
^if.else6:
    i32 %37 = load i32* %22;
    i1 %38 = scmp eq i32 %37, i32 13;
    cbr i1 %38(prob = 0.5), ^if.then8, ^b3;
^if.then8:
    i32 %39 = add i32 %17, i32 1;
    ubr ^while.body2;
}
