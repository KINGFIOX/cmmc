internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else1, i32 3] [^if.else3, i32 2] [^entry2, i32 1];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %24];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %8 = load i32* %0;
    ubr ^while.body;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 0] [^if.else5, i32 0] [^b5, i32 0] [^if.then7, i32 %76] [^if.then8, i32 0] [^if.else11, i32 0] [^if.then11, i32 %108] [^if.else12, i32 0] [^if.then12, i32 0] [^if.else14, i32 0] [^b10, i32 1] [^b11, i32 0] [^if.then16, i32 %141] [^if.else15, i32 0] [^if.else16, i32 0] [^if.then18, i32 0] [^if.then19, i32 1] [^b12, i32 0] [^if.then22, i32 %167] [^b13, i32 1] [^if.else18, i32 0] [^if.else19, i32 0] [^if.else20, i32 0] [^if.else21, i32 0] [^if.then23, i32 1] [^if.then24, i32 1] [^if.then25, i32 %194] [^if.else22, i32 0] [^if.else23, i32 0] [^if.else24, i32 0] [^b15, i32 1] [^if.else25, i32 0] [^if.else26, i32 0] [^if.else27, i32 0] [^if.else28, i32 0] [^b19, i32 0] [^b20, i32 1] [^b21, i32 0] [^while.header2, i32 1] [^while.body11, i32 0] [^while.body12, i32 1] [^b25, i32 0] [^b26, i32 0] [^b27, i32 0] [^while.body18, i32 0] [^b33, i32 0] [^if.else29, i32 0] [^b35, i32 0] [^b36, i32 0] [^b38, i32 0];
    ret i32 %9;
  ^while.body:
    i32 %10 = phi [^entry1, i32 %8] [^if.then, i32 %23];
    i1 %11 = icmp sle i32 %len, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %12 = icmp eq i32 %6, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %13 = load i32* %0;
    i32* %14 = getelementptr &(i32* %buf)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 32;
    i1 %17 = icmp eq i32 %15, i32 9;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %15, i32 10;
    i1 %20 = or i1 %18, i1 %19;
    i1 %21 = icmp eq i32 %15, i32 13;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %23 = add i32 %13, i32 1;
    store i32* %0 with i32 %23;
    ubr ^while.body;
  ^if.then1:
    i32 %24 = load i32* %0;
    i32* %25 = getelementptr &(i32* %buf)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 123;
    cbr i1 %27(prob = 0.5), ^entry, ^if.else1;
  ^if.else:
    i1 %28 = icmp eq i32 %6, i32 1;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else1:
    i1 %29 = icmp eq i32 %26, i32 91;
    cbr i1 %29(prob = 0.5), ^2, ^if.else3;
  ^if.then2:
    i32 %30 = load i32* %0;
    i32* %31 = getelementptr &(i32* %buf)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 43;
    i1 %34 = icmp eq i32 %32, i32 45;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.75), ^if.then3, ^b3;
  ^if.else2:
    i1 %36 = icmp eq i32 %6, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then3:
    i32 %37 = add i32 %30, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then4:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.else3:
    i1 %40 = icmp eq i32 %26, i32 34;
    cbr i1 %40(prob = 0.5), ^2, ^entry2;
  ^b3:
    i32 %41 = phi [^if.then2, i32 %30] [^if.then3, i32 %37];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^b, ^if.else5;
  ^if.else4:
    i1 %43 = icmp eq i32 %6, i32 3;
    cbr i1 %43(prob = 0.5), ^if.then5, ^if.else6;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.body2;
  ^while.header:
    i32 %46 = phi [^if.then4, i32 %39] [^b4, i32 %72];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.97), ^while.body1, ^indirect;
  ^if.else5:
    i32 %48 = load i32* %0;
    i32* %49 = getelementptr &(i32* %buf)[i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %50, i32 -48;
    i1 %52 = icmp uge i32 %51, i32 10;
    cbr i1 %52(prob = 0.5), ^b, ^while.header1;
  ^entry2:
    i32 %53 = add i32 %26, i32 -48;
    i1 %54 = icmp ult i32 %53, i32 10;
    cbr i1 %54(prob = 0.5), ^2, ^if.else7;
  ^if.else6:
    i1 %55 = icmp eq i32 %6, i32 4;
    cbr i1 %55(prob = 0.5), ^if.then6, ^if.else8;
  ^indirect:
    i32 %56 = load i32* %0;
    ubr ^b5;
  ^while.body1:
    i32 %57 = load i32* %0;
    i32* %58 = getelementptr &(i32* %buf)[i32 %57];
    i32 %59 = load i32* %58;
    i1 %60 = icmp eq i32 %59, i32 34;
    cbr i1 %60(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %61 = load i32* %0;
    i32 %62 = add i32 %61, i32 1;
    store i32* %0 with i32 %62;
    ubr ^while.body3;
  ^while.body2:
    i32 %63 = phi [^if.then5, i32 %45] [^if.then9, i32 %100];
    i1 %64 = icmp sle i32 %len, i32 %63;
    cbr i1 %64(prob = 0.5), ^indirect1, ^b6;
  ^if.else7:
    i1 %65 = icmp eq i32 %26, i32 43;
    cbr i1 %65(prob = 0.5), ^if.then7, ^if.else9;
  ^while.header1:
    i32 %66 = phi [^if.else5, i32 %48] [^b7, i32 %109];
    i1 %67 = icmp sgt i32 %len, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body4, ^indirect2;
  ^if.else8:
    i1 %68 = icmp eq i32 %6, i32 5;
    cbr i1 %68(prob = 0.5), ^if.then8, ^if.else10;
  ^b4:
    i1 %69 = icmp eq i32 %59, i32 92;
    i32 %70 = zext i1 %69 to i32;
    i32 %71 = add i32 %57, i32 1;
    i32 %72 = add i32 %70, i32 %71;
    store i32* %0 with i32 %72;
    ubr ^while.header;
  ^indirect1:
    i32 %73 = load i32* %0;
    ubr ^if.then10;
  ^b5:
    i32 %74 = phi [^indirect, i32 %56] [^while.body1, i32 %57];
    i1 %75 = icmp sle i32 %len, i32 %74;
    cbr i1 %75(prob = 0.5), ^b, ^if.else11;
  ^if.then7:
    i32 %76 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^indirect2:
    i32 %77 = load i32* %0;
    ubr ^b8;
  ^b6:
    i32 %78 = load i32* %0;
    i32* %79 = getelementptr &(i32* %buf)[i32 %78];
    i32 %80 = load i32* %79;
    i1 %81 = icmp eq i32 %80, i32 32;
    i1 %82 = icmp eq i32 %80, i32 9;
    i1 %83 = or i1 %81, i1 %82;
    i1 %84 = icmp eq i32 %80, i32 10;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = icmp eq i32 %80, i32 13;
    i1 %87 = or i1 %85, i1 %86;
    cbr i1 %87(prob = 0.94), ^if.then9, ^if.then10;
  ^while.body3:
    i32 %88 = phi [^if.then6, i32 %62] [^if.then14, i32 %135];
    i1 %89 = icmp sle i32 %len, i32 %88;
    cbr i1 %89(prob = 0.5), ^indirect3, ^b9;
  ^while.body4:
    i32 %90 = load i32* %0;
    i32* %91 = getelementptr &(i32* %buf)[i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %92, i32 -48;
    i1 %94 = icmp uge i32 %93, i32 10;
    cbr i1 %94(prob = 0.5), ^b8, ^b7;
  ^if.then8:
    i32 %95 = load i32* %0;
    i32 %96 = add i32 %95, i32 3;
    i1 %97 = icmp sle i32 %len, i32 %96;
    cbr i1 %97(prob = 0.5), ^b, ^if.else12;
  ^if.else9:
    i1 %98 = icmp eq i32 %26, i32 45;
    cbr i1 %98(prob = 0.5), ^if.then11, ^if.else13;
  ^if.else10:
    i1 %99 = icmp eq i32 %6, i32 6;
    cbr i1 %99(prob = 0.5), ^if.then12, ^if.else14;
  ^if.then9:
    i32 %100 = add i32 %78, i32 1;
    store i32* %0 with i32 %100;
    ubr ^while.body2;
  ^indirect3:
    i32 %101 = load i32* %0;
    ubr ^if.then15;
  ^if.then10:
    i32 %102 = phi [^indirect1, i32 %73] [^b6, i32 %78];
    i1 %103 = icmp sgt i32 %len, i32 %102;
    cbr i1 %103(prob = 0.5), ^if.then13, ^b11;
  ^if.else11:
    i32 %104 = load i32* %0;
    i32* %105 = getelementptr &(i32* %buf)[i32 %104];
    i32 %106 = load i32* %105;
    i1 %107 = icmp neq i32 %106, i32 34;
    cbr i1 %107(prob = 0.5), ^b, ^b10;
  ^if.then11:
    i32 %108 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 1, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b7:
    i32 %109 = add i32 %90, i32 1;
    store i32* %0 with i32 %109;
    ubr ^while.header1;
  ^b8:
    i32 %110 = phi [^indirect2, i32 %77] [^while.body4, i32 %90];
    i1 %111 = icmp sgt i32 %len, i32 %110;
    cbr i1 %111(prob = 0.5), ^if.then17, ^indirect4;
  ^b9:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = icmp eq i32 %114, i32 32;
    i1 %116 = icmp eq i32 %114, i32 9;
    i1 %117 = or i1 %115, i1 %116;
    i1 %118 = icmp eq i32 %114, i32 10;
    i1 %119 = or i1 %117, i1 %118;
    i1 %120 = icmp eq i32 %114, i32 13;
    i1 %121 = or i1 %119, i1 %120;
    cbr i1 %121(prob = 0.94), ^if.then14, ^if.then15;
  ^if.else12:
    i32* %122 = getelementptr &(i32* %buf)[i32 %95];
    i32 %123 = load i32* %122;
    i1 %124 = icmp neq i32 %123, i32 116;
    cbr i1 %124(prob = 0.5), ^b, ^if.else15;
  ^if.then12:
    i32 %125 = load i32* %0;
    i32 %126 = add i32 %125, i32 4;
    i1 %127 = icmp sle i32 %len, i32 %126;
    cbr i1 %127(prob = 0.5), ^b, ^if.else16;
  ^if.else13:
    i1 %128 = icmp eq i32 %26, i32 116;
    cbr i1 %128(prob = 0.5), ^if.then16, ^if.else17;
  ^if.else14:
    i1 %129 = icmp eq i32 %6, i32 7;
    cbr i1 %129(prob = 0.5), ^if.then18, ^b;
  ^b10:
    i32 %130 = phi [^if.else11, i32 %104] [^b26, i32 %314] [^if.else29, i32 %385];
    i32 %131 = add i32 %130, i32 1;
    store i32* %0 with i32 %131;
    ubr ^b;
  ^if.then13:
    i32* %132 = getelementptr &(i32* %buf)[i32 %102];
    i32 %133 = load i32* %132;
    i1 %134 = icmp eq i32 %133, i32 93;
    cbr i1 %134(prob = 0.5), ^if.then19, ^b11;
  ^if.then14:
    i32 %135 = add i32 %112, i32 1;
    store i32* %0 with i32 %135;
    ubr ^while.body3;
  ^indirect4:
    i32 %136 = load i32* %0;
    ubr ^b13;
  ^if.then15:
    i32 %137 = phi [^indirect3, i32 %101] [^b9, i32 %112];
    i1 %138 = icmp sgt i32 %len, i32 %137;
    cbr i1 %138(prob = 0.5), ^if.then20, ^b12;
  ^b11:
    i32 %139 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %140 = icmp eq i32 %139, i32 0;
    cbr i1 %140(prob = 0.5), ^b, ^entry3;
  ^if.then16:
    i32 %141 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.then17:
    i32 %142 = load i32* %0;
    i32* %143 = getelementptr &(i32* %buf)[i32 %142];
    i32 %144 = load i32* %143;
    i1 %145 = icmp eq i32 %144, i32 46;
    cbr i1 %145(prob = 0.5), ^if.then21, ^b13;
  ^if.else15:
    i32 %146 = add i32 %95, i32 1;
    i32* %147 = getelementptr &(i32* %buf)[i32 %146];
    i32 %148 = load i32* %147;
    i1 %149 = icmp neq i32 %148, i32 114;
    cbr i1 %149(prob = 0.5), ^b, ^if.else18;
  ^if.else16:
    i32* %150 = getelementptr &(i32* %buf)[i32 %125];
    i32 %151 = load i32* %150;
    i1 %152 = icmp neq i32 %151, i32 102;
    cbr i1 %152(prob = 0.5), ^b, ^if.else19;
  ^if.then18:
    i32 %153 = load i32* %0;
    i32 %154 = add i32 %153, i32 3;
    i1 %155 = icmp sle i32 %len, i32 %154;
    cbr i1 %155(prob = 0.5), ^b, ^if.else20;
  ^if.else17:
    i1 %156 = icmp eq i32 %26, i32 102;
    cbr i1 %156(prob = 0.5), ^if.then22, ^if.else21;
  ^if.then19:
    i32 %157 = add i32 %102, i32 1;
    store i32* %0 with i32 %157;
    ubr ^b;
  ^entry3:
    i32 %158 = load i32* %0;
    ubr ^while.body6;
  ^if.then20:
    i32* %159 = getelementptr &(i32* %buf)[i32 %137];
    i32 %160 = load i32* %159;
    i1 %161 = icmp eq i32 %160, i32 125;
    cbr i1 %161(prob = 0.5), ^if.then23, ^b12;
  ^if.then21:
    i32 %162 = phi [^if.then17, i32 %142] [^while.body5, i32 %163];
    i32 %163 = add i32 %162, i32 1;
    i1 %164 = icmp sgt i32 %len, i32 %163;
    store i32* %0 with i32 %163;
    cbr i1 %164(prob = 0.97), ^while.body5, ^b13;
  ^b12:
    i32 %165 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %166 = icmp eq i32 %165, i32 0;
    cbr i1 %166(prob = 0.5), ^b, ^entry4;
  ^if.then22:
    i32 %167 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b13:
    i32 %168 = phi [^indirect4, i32 %136] [^if.then17, i32 %142] [^if.then21, i32 %163] [^while.body5, i32 %163];
    i1 %169 = icmp sgt i32 %len, i32 %168;
    cbr i1 %169(prob = 0.5), ^if.then24, ^b;
  ^if.else18:
    i32 %170 = add i32 %95, i32 2;
    i32* %171 = getelementptr &(i32* %buf)[i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = icmp neq i32 %172, i32 117;
    cbr i1 %173(prob = 0.5), ^b, ^if.else22;
  ^if.else19:
    i32 %174 = add i32 %125, i32 1;
    i32* %175 = getelementptr &(i32* %buf)[i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = icmp neq i32 %176, i32 97;
    cbr i1 %177(prob = 0.5), ^b, ^if.else23;
  ^if.else20:
    i32* %178 = getelementptr &(i32* %buf)[i32 %153];
    i32 %179 = load i32* %178;
    i1 %180 = icmp neq i32 %179, i32 110;
    cbr i1 %180(prob = 0.5), ^b, ^if.else24;
  ^if.else21:
    i1 %181 = icmp eq i32 %26, i32 110;
    cbr i1 %181(prob = 0.5), ^if.then25, ^b;
  ^if.then23:
    i32 %182 = add i32 %137, i32 1;
    store i32* %0 with i32 %182;
    ubr ^b;
  ^entry4:
    i32 %183 = load i32* %0;
    ubr ^while.body7;
  ^while.body5:
    i32* %184 = getelementptr &(i32* %buf)[i32 %163];
    i32 %185 = load i32* %184;
    i32 %186 = add i32 %185, i32 -48;
    i1 %187 = icmp uge i32 %186, i32 10;
    cbr i1 %187(prob = 0.5), ^b13, ^if.then21;
  ^while.body6:
    i32 %188 = phi [^entry3, i32 %158] [^if.then27, i32 %231];
    i1 %189 = icmp sle i32 %len, i32 %188;
    cbr i1 %189(prob = 0.5), ^indirect5, ^b14;
  ^if.then24:
    i32 %190 = load i32* %0;
    i32* %191 = getelementptr &(i32* %buf)[i32 %190];
    i32 %192 = load i32* %191;
    i1 %193 = icmp eq i32 %192, i32 101;
    cbr i1 %193(prob = 0.5), ^if.then26, ^b;
  ^if.then25:
    i32 %194 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else22:
    i32* %195 = getelementptr &(i32* %buf)[i32 %96];
    i32 %196 = load i32* %195;
    i1 %197 = icmp neq i32 %196, i32 101;
    cbr i1 %197(prob = 0.5), ^b, ^b15;
  ^if.else23:
    i32 %198 = add i32 %125, i32 2;
    i32* %199 = getelementptr &(i32* %buf)[i32 %198];
    i32 %200 = load i32* %199;
    i1 %201 = icmp neq i32 %200, i32 108;
    cbr i1 %201(prob = 0.5), ^b, ^if.else25;
  ^if.else24:
    i32 %202 = add i32 %153, i32 1;
    i32* %203 = getelementptr &(i32* %buf)[i32 %202];
    i32 %204 = load i32* %203;
    i1 %205 = icmp neq i32 %204, i32 117;
    cbr i1 %205(prob = 0.5), ^b, ^if.else26;
  ^indirect5:
    i32 %206 = load i32* %0;
    ubr ^b16;
  ^if.then26:
    i32 %207 = add i32 %190, i32 1;
    i1 %208 = icmp sgt i32 %len, i32 %207;
    store i32* %0 with i32 %207;
    cbr i1 %208(prob = 0.5), ^if.then28, ^b17;
  ^while.body7:
    i32 %209 = phi [^entry4, i32 %183] [^if.then30, i32 %263];
    i1 %210 = icmp sle i32 %len, i32 %209;
    cbr i1 %210(prob = 0.5), ^indirect6, ^b18;
  ^b14:
    i32 %211 = load i32* %0;
    i32* %212 = getelementptr &(i32* %buf)[i32 %211];
    i32 %213 = load i32* %212;
    i1 %214 = icmp eq i32 %213, i32 32;
    i1 %215 = icmp eq i32 %213, i32 9;
    i1 %216 = or i1 %214, i1 %215;
    i1 %217 = icmp eq i32 %213, i32 10;
    i1 %218 = or i1 %216, i1 %217;
    i1 %219 = icmp eq i32 %213, i32 13;
    i1 %220 = or i1 %218, i1 %219;
    cbr i1 %220(prob = 0.94), ^if.then27, ^b16;
  ^b15:
    i32 %221 = phi [^if.else22, i32 %95] [^if.else28, i32 %153];
    i32 %222 = add i32 %221, i32 4;
    store i32* %0 with i32 %222;
    ubr ^b;
  ^if.else25:
    i32 %223 = add i32 %125, i32 3;
    i32* %224 = getelementptr &(i32* %buf)[i32 %223];
    i32 %225 = load i32* %224;
    i1 %226 = icmp neq i32 %225, i32 115;
    cbr i1 %226(prob = 0.5), ^b, ^if.else27;
  ^if.else26:
    i32 %227 = add i32 %153, i32 2;
    i32* %228 = getelementptr &(i32* %buf)[i32 %227];
    i32 %229 = load i32* %228;
    i1 %230 = icmp neq i32 %229, i32 108;
    cbr i1 %230(prob = 0.5), ^b, ^if.else28;
  ^if.then27:
    i32 %231 = add i32 %211, i32 1;
    store i32* %0 with i32 %231;
    ubr ^while.body6;
  ^indirect6:
    i32 %232 = load i32* %0;
    ubr ^b19;
  ^b16:
    i32 %233 = phi [^indirect5, i32 %206] [^b14, i32 %211];
    i32* %234 = getelementptr &(i32* %buf)[i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = icmp eq i32 %235, i32 44;
    cbr i1 %236(prob = 0.97), ^while.body8, ^entry5;
  ^if.then28:
    i32* %237 = getelementptr &(i32* %buf)[i32 %207];
    i32 %238 = load i32* %237;
    i1 %239 = icmp eq i32 %238, i32 43;
    cbr i1 %239(prob = 0.5), ^if.then29, ^indirect7;
  ^b17:
    i32 %240 = phi [^if.then26, i32 %207] [^if.then29, i32 %260] [^indirect7, i32 %262];
    i1 %241 = icmp sgt i32 %len, i32 %240;
    cbr i1 %241(prob = 0.5), ^if.then31, ^indirect8;
  ^b18:
    i32 %242 = load i32* %0;
    i32* %243 = getelementptr &(i32* %buf)[i32 %242];
    i32 %244 = load i32* %243;
    i1 %245 = icmp eq i32 %244, i32 32;
    i1 %246 = icmp eq i32 %244, i32 9;
    i1 %247 = or i1 %245, i1 %246;
    i1 %248 = icmp eq i32 %244, i32 10;
    i1 %249 = or i1 %247, i1 %248;
    i1 %250 = icmp eq i32 %244, i32 13;
    i1 %251 = or i1 %249, i1 %250;
    cbr i1 %251(prob = 0.94), ^if.then30, ^b19;
  ^if.else27:
    i32* %252 = getelementptr &(i32* %buf)[i32 %126];
    i32 %253 = load i32* %252;
    i1 %254 = icmp neq i32 %253, i32 101;
    cbr i1 %254(prob = 0.5), ^b, ^b20;
  ^if.else28:
    i32* %255 = getelementptr &(i32* %buf)[i32 %154];
    i32 %256 = load i32* %255;
    i1 %257 = icmp neq i32 %256, i32 108;
    cbr i1 %257(prob = 0.5), ^b, ^b15;
  ^while.body8:
    i32 %258 = add i32 %233, i32 1;
    store i32* %0 with i32 %258;
    ubr ^while.body9;
  ^if.then29:
    i32 %259 = load i32* %0;
    i32 %260 = add i32 %259, i32 1;
    store i32* %0 with i32 %260;
    ubr ^b17;
  ^entry5:
    i32 %261 = load i32* %0;
    ubr ^while.body10;
  ^indirect7:
    i32 %262 = load i32* %0;
    ubr ^b17;
  ^if.then30:
    i32 %263 = add i32 %242, i32 1;
    store i32* %0 with i32 %263;
    ubr ^while.body7;
  ^indirect8:
    i32 %264 = load i32* %0;
    ubr ^while.header2;
  ^b19:
    i32 %265 = phi [^indirect6, i32 %232] [^b18, i32 %242];
    i1 %266 = icmp sle i32 %len, i32 %265;
    cbr i1 %266(prob = 0.5), ^b, ^b21;
  ^if.then31:
    i32 %267 = load i32* %0;
    i32* %268 = getelementptr &(i32* %buf)[i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = icmp eq i32 %269, i32 45;
    cbr i1 %270(prob = 0.5), ^if.then32, ^while.header2;
  ^b20:
    i32 %271 = add i32 %125, i32 5;
    store i32* %0 with i32 %271;
    ubr ^b;
  ^if.then32:
    i32 %272 = phi [^if.then31, i32 %267] [^while.body12, i32 %307];
    i32 %273 = add i32 %272, i32 1;
    store i32* %0 with i32 %273;
    ubr ^while.header2;
  ^while.body9:
    i32 %274 = phi [^while.body8, i32 %258] [^if.then33, i32 %312];
    i1 %275 = icmp sle i32 %len, i32 %274;
    cbr i1 %275(prob = 0.5), ^while.body11, ^b23;
  ^while.body10:
    i32 %276 = phi [^entry5, i32 %261] [^if.then34, i32 %313];
    i1 %277 = icmp sle i32 %len, i32 %276;
    cbr i1 %277(prob = 0.5), ^indirect9, ^b24;
  ^b21:
    i32* %278 = getelementptr &(i32* %buf)[i32 %265];
    i32 %279 = load i32* %278;
    i1 %280 = icmp neq i32 %279, i32 58;
    cbr i1 %280(prob = 0.5), ^b, ^b22;
  ^while.header2:
    i32 %281 = phi [^indirect8, i32 %264] [^if.then31, i32 %267] [^if.then32, i32 %273];
    i1 %282 = icmp sgt i32 %len, i32 %281;
    cbr i1 %282(prob = 0.97), ^while.body12, ^b;
  ^indirect9:
    i32 %283 = load i32* %0;
    ubr ^b25;
  ^while.body11:
    i32 %284 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %285 = icmp eq i32 %284, i32 0;
    cbr i1 %285(prob = 0.5), ^b, ^entry3;
  ^b22:
    i32 %286 = add i32 %265, i32 1;
    store i32* %0 with i32 %286;
    ubr ^while.body13;
  ^b23:
    i32 %287 = load i32* %0;
    i32* %288 = getelementptr &(i32* %buf)[i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = icmp eq i32 %289, i32 32;
    i1 %291 = icmp eq i32 %289, i32 9;
    i1 %292 = or i1 %290, i1 %291;
    i1 %293 = icmp eq i32 %289, i32 10;
    i1 %294 = or i1 %292, i1 %293;
    i1 %295 = icmp eq i32 %289, i32 13;
    i1 %296 = or i1 %294, i1 %295;
    cbr i1 %296(prob = 0.94), ^if.then33, ^while.body11;
  ^b24:
    i32 %297 = load i32* %0;
    i32* %298 = getelementptr &(i32* %buf)[i32 %297];
    i32 %299 = load i32* %298;
    i1 %300 = icmp eq i32 %299, i32 32;
    i1 %301 = icmp eq i32 %299, i32 9;
    i1 %302 = or i1 %300, i1 %301;
    i1 %303 = icmp eq i32 %299, i32 10;
    i1 %304 = or i1 %302, i1 %303;
    i1 %305 = icmp eq i32 %299, i32 13;
    i1 %306 = or i1 %304, i1 %305;
    cbr i1 %306(prob = 0.94), ^if.then34, ^b25;
  ^while.body12:
    i32 %307 = load i32* %0;
    i32* %308 = getelementptr &(i32* %buf)[i32 %307];
    i32 %309 = load i32* %308;
    i32 %310 = add i32 %309, i32 -48;
    i1 %311 = icmp uge i32 %310, i32 10;
    cbr i1 %311(prob = 0.5), ^b, ^if.then32;
  ^if.then33:
    i32 %312 = add i32 %287, i32 1;
    store i32* %0 with i32 %312;
    ubr ^while.body9;
  ^if.then34:
    i32 %313 = add i32 %297, i32 1;
    store i32* %0 with i32 %313;
    ubr ^while.body10;
  ^b25:
    i32 %314 = phi [^indirect9, i32 %283] [^b24, i32 %297];
    i1 %315 = icmp sle i32 %len, i32 %314;
    cbr i1 %315(prob = 0.5), ^b, ^b26;
  ^while.body13:
    i32 %316 = phi [^b22, i32 %286] [^if.then35, i32 %333];
    i1 %317 = icmp sle i32 %len, i32 %316;
    cbr i1 %317(prob = 0.5), ^b27, ^b28;
  ^b26:
    i32* %318 = getelementptr &(i32* %buf)[i32 %314];
    i32 %319 = load i32* %318;
    i1 %320 = icmp neq i32 %319, i32 93;
    cbr i1 %320(prob = 0.5), ^b, ^b10;
  ^b27:
    i32 %321 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %322 = icmp eq i32 %321, i32 0;
    cbr i1 %322(prob = 0.5), ^b, ^entry6;
  ^b28:
    i32 %323 = load i32* %0;
    i32* %324 = getelementptr &(i32* %buf)[i32 %323];
    i32 %325 = load i32* %324;
    i1 %326 = icmp eq i32 %325, i32 32;
    i1 %327 = icmp eq i32 %325, i32 9;
    i1 %328 = or i1 %326, i1 %327;
    i1 %329 = icmp eq i32 %325, i32 10;
    i1 %330 = or i1 %328, i1 %329;
    i1 %331 = icmp eq i32 %325, i32 13;
    i1 %332 = or i1 %330, i1 %331;
    cbr i1 %332(prob = 0.94), ^if.then35, ^b27;
  ^if.then35:
    i32 %333 = add i32 %323, i32 1;
    store i32* %0 with i32 %333;
    ubr ^while.body13;
  ^entry6:
    i32 %334 = load i32* %0;
    ubr ^while.body14;
  ^while.body14:
    i32 %335 = phi [^entry6, i32 %334] [^if.then36, i32 %348];
    i1 %336 = icmp sle i32 %len, i32 %335;
    cbr i1 %336(prob = 0.5), ^indirect10, ^b29;
  ^indirect10:
    i32 %337 = load i32* %0;
    ubr ^b30;
  ^b29:
    i32 %338 = load i32* %0;
    i32* %339 = getelementptr &(i32* %buf)[i32 %338];
    i32 %340 = load i32* %339;
    i1 %341 = icmp eq i32 %340, i32 32;
    i1 %342 = icmp eq i32 %340, i32 9;
    i1 %343 = or i1 %341, i1 %342;
    i1 %344 = icmp eq i32 %340, i32 10;
    i1 %345 = or i1 %343, i1 %344;
    i1 %346 = icmp eq i32 %340, i32 13;
    i1 %347 = or i1 %345, i1 %346;
    cbr i1 %347(prob = 0.94), ^if.then36, ^b30;
  ^if.then36:
    i32 %348 = add i32 %338, i32 1;
    store i32* %0 with i32 %348;
    ubr ^while.body14;
  ^b30:
    i32 %349 = phi [^indirect10, i32 %337] [^b29, i32 %338];
    i32* %350 = getelementptr &(i32* %buf)[i32 %349];
    i32 %351 = load i32* %350;
    i1 %352 = icmp eq i32 %351, i32 44;
    cbr i1 %352(prob = 0.97), ^while.body15, ^entry7;
  ^while.body15:
    i32 %353 = add i32 %349, i32 1;
    store i32* %0 with i32 %353;
    ubr ^while.body16;
  ^entry7:
    i32 %354 = load i32* %0;
    ubr ^while.body17;
  ^while.body16:
    i32 %355 = phi [^while.body15, i32 %353] [^if.then37, i32 %382];
    i1 %356 = icmp sle i32 %len, i32 %355;
    cbr i1 %356(prob = 0.5), ^while.body18, ^b31;
  ^while.body17:
    i32 %357 = phi [^entry7, i32 %354] [^if.then38, i32 %384];
    i1 %358 = icmp sle i32 %len, i32 %357;
    cbr i1 %358(prob = 0.5), ^indirect11, ^b32;
  ^indirect11:
    i32 %359 = load i32* %0;
    ubr ^b33;
  ^while.body18:
    i32 %360 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %361 = icmp eq i32 %360, i32 0;
    cbr i1 %361(prob = 0.5), ^b, ^entry8;
  ^b31:
    i32 %362 = load i32* %0;
    i32* %363 = getelementptr &(i32* %buf)[i32 %362];
    i32 %364 = load i32* %363;
    i1 %365 = icmp eq i32 %364, i32 32;
    i1 %366 = icmp eq i32 %364, i32 9;
    i1 %367 = or i1 %365, i1 %366;
    i1 %368 = icmp eq i32 %364, i32 10;
    i1 %369 = or i1 %367, i1 %368;
    i1 %370 = icmp eq i32 %364, i32 13;
    i1 %371 = or i1 %369, i1 %370;
    cbr i1 %371(prob = 0.94), ^if.then37, ^while.body18;
  ^b32:
    i32 %372 = load i32* %0;
    i32* %373 = getelementptr &(i32* %buf)[i32 %372];
    i32 %374 = load i32* %373;
    i1 %375 = icmp eq i32 %374, i32 32;
    i1 %376 = icmp eq i32 %374, i32 9;
    i1 %377 = or i1 %375, i1 %376;
    i1 %378 = icmp eq i32 %374, i32 10;
    i1 %379 = or i1 %377, i1 %378;
    i1 %380 = icmp eq i32 %374, i32 13;
    i1 %381 = or i1 %379, i1 %380;
    cbr i1 %381(prob = 0.94), ^if.then38, ^b33;
  ^if.then37:
    i32 %382 = add i32 %362, i32 1;
    store i32* %0 with i32 %382;
    ubr ^while.body16;
  ^entry8:
    i32 %383 = load i32* %0;
    ubr ^while.body19;
  ^if.then38:
    i32 %384 = add i32 %372, i32 1;
    store i32* %0 with i32 %384;
    ubr ^while.body17;
  ^b33:
    i32 %385 = phi [^indirect11, i32 %359] [^b32, i32 %372];
    i1 %386 = icmp sle i32 %len, i32 %385;
    cbr i1 %386(prob = 0.5), ^b, ^if.else29;
  ^while.body19:
    i32 %387 = phi [^entry8, i32 %383] [^if.then39, i32 %403];
    i1 %388 = icmp sle i32 %len, i32 %387;
    cbr i1 %388(prob = 0.5), ^indirect12, ^b34;
  ^if.else29:
    i32* %389 = getelementptr &(i32* %buf)[i32 %385];
    i32 %390 = load i32* %389;
    i1 %391 = icmp neq i32 %390, i32 125;
    cbr i1 %391(prob = 0.5), ^b, ^b10;
  ^indirect12:
    i32 %392 = load i32* %0;
    ubr ^b35;
  ^b34:
    i32 %393 = load i32* %0;
    i32* %394 = getelementptr &(i32* %buf)[i32 %393];
    i32 %395 = load i32* %394;
    i1 %396 = icmp eq i32 %395, i32 32;
    i1 %397 = icmp eq i32 %395, i32 9;
    i1 %398 = or i1 %396, i1 %397;
    i1 %399 = icmp eq i32 %395, i32 10;
    i1 %400 = or i1 %398, i1 %399;
    i1 %401 = icmp eq i32 %395, i32 13;
    i1 %402 = or i1 %400, i1 %401;
    cbr i1 %402(prob = 0.94), ^if.then39, ^b35;
  ^if.then39:
    i32 %403 = add i32 %393, i32 1;
    store i32* %0 with i32 %403;
    ubr ^while.body19;
  ^b35:
    i32 %404 = phi [^indirect12, i32 %392] [^b34, i32 %393];
    i1 %405 = icmp sle i32 %len, i32 %404;
    cbr i1 %405(prob = 0.5), ^b, ^b36;
  ^b36:
    i32* %406 = getelementptr &(i32* %buf)[i32 %404];
    i32 %407 = load i32* %406;
    i1 %408 = icmp neq i32 %407, i32 58;
    cbr i1 %408(prob = 0.5), ^b, ^b37;
  ^b37:
    i32 %409 = add i32 %404, i32 1;
    store i32* %0 with i32 %409;
    ubr ^while.body20;
  ^while.body20:
    i32 %410 = phi [^b37, i32 %409] [^if.then40, i32 %424];
    i1 %411 = icmp sle i32 %len, i32 %410;
    cbr i1 %411(prob = 0.5), ^b38, ^b39;
  ^b38:
    i32 %412 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %413 = icmp eq i32 %412, i32 0;
    cbr i1 %413(prob = 0.5), ^b, ^entry6;
  ^b39:
    i32 %414 = load i32* %0;
    i32* %415 = getelementptr &(i32* %buf)[i32 %414];
    i32 %416 = load i32* %415;
    i1 %417 = icmp eq i32 %416, i32 32;
    i1 %418 = icmp eq i32 %416, i32 9;
    i1 %419 = or i1 %417, i1 %418;
    i1 %420 = icmp eq i32 %416, i32 10;
    i1 %421 = or i1 %419, i1 %420;
    i1 %422 = icmp eq i32 %416, i32 13;
    i1 %423 = or i1 %421, i1 %422;
    cbr i1 %423(prob = 0.94), ^if.then40, ^b38;
  ^if.then40:
    i32 %424 = add i32 %414, i32 1;
    store i32* %0 with i32 %424;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %27];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    i1 %21 = icmp eq i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    i1 %23 = icmp eq i32 %19, i32 10;
    i1 %24 = or i1 %22, i1 %23;
    i1 %25 = icmp eq i32 %19, i32 13;
    i1 %26 = or i1 %24, i1 %25;
    cbr i1 %26(prob = 0.94), ^if.then, ^b1;
  ^if.then:
    i32 %27 = add i32 %17, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.body1;
  ^while.body2:
    i32 %28 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %29 = icmp sle i32 %4, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
  ^b3:
    i1 %30 = icmp neq i32 %15, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
  ^b4:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 32;
    i1 %35 = icmp eq i32 %33, i32 9;
    i1 %36 = or i1 %34, i1 %35;
    i1 %37 = icmp eq i32 %33, i32 10;
    i1 %38 = or i1 %36, i1 %37;
    i1 %39 = icmp eq i32 %33, i32 13;
    i1 %40 = or i1 %38, i1 %39;
    cbr i1 %40(prob = 0.94), ^if.then2, ^b3;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %41 = add i32 %31, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b5:
    i32 %42 = phi [^if.then1, i32 0] [^if.else, i32 1];
    ret i32 %42;
}
