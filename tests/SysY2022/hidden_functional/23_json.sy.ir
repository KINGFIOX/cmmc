internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else1, i32 3] [^if.else3, i32 2] [^entry2, i32 1];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then1, i32 %24];
    i32 %6 = phi [^2, i32 %3] [^if.then1, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %8 = load i32* %0;
    ubr ^while.body;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 0] [^if.else5, i32 0] [^b5, i32 0] [^if.then7, i32 %80] [^if.then8, i32 0] [^if.else11, i32 0] [^if.then11, i32 %113] [^if.else12, i32 0] [^if.then12, i32 0] [^if.else13, i32 0] [^if.else14, i32 0] [^if.then13, i32 1] [^b10, i32 0] [^if.then18, i32 %149] [^if.else15, i32 0] [^if.else16, i32 0] [^if.then19, i32 0] [^b11, i32 0] [^b12, i32 1] [^if.else17, i32 0] [^if.else18, i32 0] [^if.else19, i32 0] [^if.then22, i32 1] [^if.else20, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^b14, i32 1] [^if.else23, i32 0] [^if.else24, i32 0] [^if.else25, i32 0] [^if.else26, i32 0] [^b18, i32 0] [^b19, i32 1] [^b20, i32 0] [^while.header2, i32 1] [^while.body11, i32 0] [^while.body12, i32 1] [^b24, i32 0] [^b25, i32 0] [^b26, i32 0] [^while.body18, i32 0] [^b32, i32 0] [^if.else27, i32 0] [^b34, i32 0] [^b35, i32 0] [^b37, i32 0];
    ret i32 %9;
  ^while.body:
    i32 %10 = phi [^entry1, i32 %8] [^if.then, i32 %23];
    i1 %11 = icmp sle i32 %len, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %12 = icmp eq i32 %6, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else;
  ^b2:
    i32 %13 = load i32* %0;
    i32* %14 = getelementptr &(i32* %buf)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp eq i32 %15, i32 32;
    i1 %17 = icmp eq i32 %15, i32 9;
    i1 %18 = or i1 %16, i1 %17;
    i1 %19 = icmp eq i32 %15, i32 10;
    i1 %20 = icmp eq i32 %15, i32 13;
    i1 %21 = or i1 %19, i1 %20;
    i1 %22 = or i1 %18, i1 %21;
    cbr i1 %22(prob = 0.9375), ^if.then, ^b1;
  ^if.then:
    i32 %23 = add i32 %13, i32 1;
    store i32* %0 with i32 %23;
    ubr ^while.body;
  ^if.then1:
    i32 %24 = load i32* %0;
    i32* %25 = getelementptr &(i32* %buf)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 123;
    cbr i1 %27(prob = 0.5), ^entry, ^if.else1;
  ^if.else:
    i1 %28 = icmp eq i32 %6, i32 1;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else1:
    i1 %29 = icmp eq i32 %26, i32 91;
    cbr i1 %29(prob = 0.5), ^2, ^if.else3;
  ^if.then2:
    i32 %30 = load i32* %0;
    i32* %31 = getelementptr &(i32* %buf)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 43;
    i1 %34 = icmp eq i32 %32, i32 45;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.75), ^if.then3, ^b3;
  ^if.else2:
    i1 %36 = icmp eq i32 %6, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then3:
    i32 %37 = add i32 %30, i32 1;
    store i32* %0 with i32 %37;
    ubr ^b3;
  ^if.then4:
    i32 %38 = load i32* %0;
    i32 %39 = add i32 %38, i32 1;
    store i32* %0 with i32 %39;
    ubr ^while.header;
  ^if.else3:
    i1 %40 = icmp eq i32 %26, i32 34;
    cbr i1 %40(prob = 0.5), ^2, ^entry2;
  ^b3:
    i32 %41 = phi [^if.then2, i32 %30] [^if.then3, i32 %37];
    i1 %42 = icmp sle i32 %len, i32 %41;
    cbr i1 %42(prob = 0.5), ^b, ^if.else5;
  ^if.else4:
    i1 %43 = icmp eq i32 %6, i32 3;
    cbr i1 %43(prob = 0.5), ^if.then5, ^if.else6;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.body2;
  ^while.header:
    i32 %46 = phi [^if.then4, i32 %39] [^b4, i32 %76];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body1, ^indirect;
  ^if.else5:
    i32 %48 = load i32* %0;
    i32* %49 = getelementptr &(i32* %buf)[i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %50, i32 -48;
    i1 %52 = icmp uge i32 %51, i32 10;
    cbr i1 %52(prob = 0.5), ^b, ^while.header1;
  ^entry2:
    i1 %53 = icmp eq i32 %26, i32 43;
    i1 %54 = icmp eq i32 %26, i32 45;
    i1 %55 = or i1 %53, i1 %54;
    i32 %56 = add i32 %26, i32 -48;
    i1 %57 = icmp ult i32 %56, i32 10;
    i1 %58 = or i1 %55, i1 %57;
    cbr i1 %58(prob = 0.875), ^2, ^if.else7;
  ^if.else6:
    i1 %59 = icmp eq i32 %6, i32 4;
    cbr i1 %59(prob = 0.5), ^if.then6, ^if.else8;
  ^indirect:
    i32 %60 = load i32* %0;
    ubr ^b5;
  ^while.body1:
    i32 %61 = load i32* %0;
    i32* %62 = getelementptr &(i32* %buf)[i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = icmp eq i32 %63, i32 34;
    cbr i1 %64(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.body3;
  ^while.body2:
    i32 %67 = phi [^if.then5, i32 %45] [^if.then9, i32 %104];
    i1 %68 = icmp sle i32 %len, i32 %67;
    cbr i1 %68(prob = 0.5), ^indirect1, ^b6;
  ^while.header1:
    i32 %69 = phi [^if.else5, i32 %48] [^b7, i32 %112];
    i1 %70 = icmp sgt i32 %len, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body4, ^indirect2;
  ^if.else7:
    i1 %71 = icmp eq i32 %26, i32 116;
    cbr i1 %71(prob = 0.5), ^if.then7, ^if.else9;
  ^if.else8:
    i1 %72 = icmp eq i32 %6, i32 5;
    cbr i1 %72(prob = 0.5), ^if.then8, ^if.else10;
  ^b4:
    i1 %73 = icmp eq i32 %63, i32 92;
    i32 %74 = zext i1 %73 to i32;
    i32 %75 = add i32 %61, i32 1;
    i32 %76 = add i32 %74, i32 %75;
    store i32* %0 with i32 %76;
    ubr ^while.header;
  ^indirect1:
    i32 %77 = load i32* %0;
    ubr ^if.then10;
  ^b5:
    i32 %78 = phi [^indirect, i32 %60] [^while.body1, i32 %61];
    i1 %79 = icmp sle i32 %len, i32 %78;
    cbr i1 %79(prob = 0.5), ^b, ^if.else11;
  ^if.then7:
    i32 %80 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 5, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^indirect2:
    i32 %81 = load i32* %0;
    ubr ^b8;
  ^b6:
    i32 %82 = load i32* %0;
    i32* %83 = getelementptr &(i32* %buf)[i32 %82];
    i32 %84 = load i32* %83;
    i1 %85 = icmp eq i32 %84, i32 32;
    i1 %86 = icmp eq i32 %84, i32 9;
    i1 %87 = or i1 %85, i1 %86;
    i1 %88 = icmp eq i32 %84, i32 10;
    i1 %89 = icmp eq i32 %84, i32 13;
    i1 %90 = or i1 %88, i1 %89;
    i1 %91 = or i1 %87, i1 %90;
    cbr i1 %91(prob = 0.9375), ^if.then9, ^if.then10;
  ^while.body3:
    i32 %92 = phi [^if.then6, i32 %66] [^if.then15, i32 %139];
    i1 %93 = icmp sle i32 %len, i32 %92;
    cbr i1 %93(prob = 0.5), ^indirect3, ^b9;
  ^while.body4:
    i32 %94 = load i32* %0;
    i32* %95 = getelementptr &(i32* %buf)[i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %96, i32 -48;
    i1 %98 = icmp uge i32 %97, i32 10;
    cbr i1 %98(prob = 0.5), ^b8, ^b7;
  ^if.then8:
    i32 %99 = load i32* %0;
    i32 %100 = add i32 %99, i32 3;
    i1 %101 = icmp sle i32 %len, i32 %100;
    cbr i1 %101(prob = 0.5), ^b, ^if.else12;
  ^if.else9:
    i1 %102 = icmp eq i32 %26, i32 102;
    cbr i1 %102(prob = 0.5), ^if.then11, ^if.else13;
  ^if.else10:
    i1 %103 = icmp eq i32 %6, i32 6;
    cbr i1 %103(prob = 0.5), ^if.then12, ^if.else14;
  ^if.then9:
    i32 %104 = add i32 %82, i32 1;
    store i32* %0 with i32 %104;
    ubr ^while.body2;
  ^indirect3:
    i32 %105 = load i32* %0;
    ubr ^if.then16;
  ^if.then10:
    i32 %106 = phi [^indirect1, i32 %77] [^b6, i32 %82];
    i1 %107 = icmp sgt i32 %len, i32 %106;
    cbr i1 %107(prob = 0.5), ^if.then14, ^b10;
  ^if.else11:
    i32 %108 = load i32* %0;
    i32* %109 = getelementptr &(i32* %buf)[i32 %108];
    i32 %110 = load i32* %109;
    i1 %111 = icmp neq i32 %110, i32 34;
    cbr i1 %111(prob = 0.5), ^b, ^if.then13;
  ^b7:
    i32 %112 = add i32 %94, i32 1;
    store i32* %0 with i32 %112;
    ubr ^while.header1;
  ^if.then11:
    i32 %113 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 6, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b8:
    i32 %114 = phi [^indirect2, i32 %81] [^while.body4, i32 %94];
    i1 %115 = icmp sgt i32 %len, i32 %114;
    cbr i1 %115(prob = 0.5), ^if.then17, ^indirect4;
  ^b9:
    i32 %116 = load i32* %0;
    i32* %117 = getelementptr &(i32* %buf)[i32 %116];
    i32 %118 = load i32* %117;
    i1 %119 = icmp eq i32 %118, i32 32;
    i1 %120 = icmp eq i32 %118, i32 9;
    i1 %121 = or i1 %119, i1 %120;
    i1 %122 = icmp eq i32 %118, i32 10;
    i1 %123 = icmp eq i32 %118, i32 13;
    i1 %124 = or i1 %122, i1 %123;
    i1 %125 = or i1 %121, i1 %124;
    cbr i1 %125(prob = 0.9375), ^if.then15, ^if.then16;
  ^if.else12:
    i32* %126 = getelementptr &(i32* %buf)[i32 %99];
    i32 %127 = load i32* %126;
    i1 %128 = icmp neq i32 %127, i32 116;
    cbr i1 %128(prob = 0.5), ^b, ^if.else15;
  ^if.then12:
    i32 %129 = load i32* %0;
    i32 %130 = add i32 %129, i32 4;
    i1 %131 = icmp sle i32 %len, i32 %130;
    cbr i1 %131(prob = 0.5), ^b, ^if.else16;
  ^if.else13:
    i1 %132 = icmp eq i32 %26, i32 110;
    cbr i1 %132(prob = 0.5), ^if.then18, ^b;
  ^if.else14:
    i1 %133 = icmp eq i32 %6, i32 7;
    cbr i1 %133(prob = 0.5), ^if.then19, ^b;
  ^if.then13:
    i32 %134 = phi [^if.else11, i32 %108] [^if.then14, i32 %106] [^if.then20, i32 %141] [^b25, i32 %312] [^if.else27, i32 %383];
    i32 %135 = add i32 %134, i32 1;
    store i32* %0 with i32 %135;
    ubr ^b;
  ^if.then14:
    i32* %136 = getelementptr &(i32* %buf)[i32 %106];
    i32 %137 = load i32* %136;
    i1 %138 = icmp eq i32 %137, i32 93;
    cbr i1 %138(prob = 0.5), ^if.then13, ^b10;
  ^if.then15:
    i32 %139 = add i32 %116, i32 1;
    store i32* %0 with i32 %139;
    ubr ^while.body3;
  ^indirect4:
    i32 %140 = load i32* %0;
    ubr ^b12;
  ^if.then16:
    i32 %141 = phi [^indirect3, i32 %105] [^b9, i32 %116];
    i1 %142 = icmp sgt i32 %len, i32 %141;
    cbr i1 %142(prob = 0.5), ^if.then20, ^b11;
  ^b10:
    i32 %143 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %144 = icmp eq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^b, ^entry3;
  ^if.then17:
    i32 %145 = load i32* %0;
    i32* %146 = getelementptr &(i32* %buf)[i32 %145];
    i32 %147 = load i32* %146;
    i1 %148 = icmp eq i32 %147, i32 46;
    cbr i1 %148(prob = 0.5), ^if.then21, ^b12;
  ^if.then18:
    i32 %149 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^if.else15:
    i32 %150 = add i32 %99, i32 1;
    i32* %151 = getelementptr &(i32* %buf)[i32 %150];
    i32 %152 = load i32* %151;
    i1 %153 = icmp neq i32 %152, i32 114;
    cbr i1 %153(prob = 0.5), ^b, ^if.else17;
  ^if.else16:
    i32* %154 = getelementptr &(i32* %buf)[i32 %129];
    i32 %155 = load i32* %154;
    i1 %156 = icmp neq i32 %155, i32 102;
    cbr i1 %156(prob = 0.5), ^b, ^if.else18;
  ^if.then19:
    i32 %157 = load i32* %0;
    i32 %158 = add i32 %157, i32 3;
    i1 %159 = icmp sle i32 %len, i32 %158;
    cbr i1 %159(prob = 0.5), ^b, ^if.else19;
  ^entry3:
    i32 %160 = load i32* %0;
    ubr ^while.body6;
  ^if.then20:
    i32* %161 = getelementptr &(i32* %buf)[i32 %141];
    i32 %162 = load i32* %161;
    i1 %163 = icmp eq i32 %162, i32 125;
    cbr i1 %163(prob = 0.5), ^if.then13, ^b11;
  ^if.then21:
    i32 %164 = phi [^if.then17, i32 %145] [^while.body5, i32 %165];
    i32 %165 = add i32 %164, i32 1;
    i1 %166 = icmp sgt i32 %len, i32 %165;
    store i32* %0 with i32 %165;
    cbr i1 %166(prob = 0.984615), ^while.body5, ^b12;
  ^b11:
    i32 %167 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %168 = icmp eq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^b, ^entry4;
  ^b12:
    i32 %169 = phi [^indirect4, i32 %140] [^if.then17, i32 %145] [^if.then21, i32 %165] [^while.body5, i32 %165];
    i1 %170 = icmp sgt i32 %len, i32 %169;
    cbr i1 %170(prob = 0.5), ^if.then22, ^b;
  ^if.else17:
    i32 %171 = add i32 %99, i32 2;
    i32* %172 = getelementptr &(i32* %buf)[i32 %171];
    i32 %173 = load i32* %172;
    i1 %174 = icmp neq i32 %173, i32 117;
    cbr i1 %174(prob = 0.5), ^b, ^if.else20;
  ^if.else18:
    i32 %175 = add i32 %129, i32 1;
    i32* %176 = getelementptr &(i32* %buf)[i32 %175];
    i32 %177 = load i32* %176;
    i1 %178 = icmp neq i32 %177, i32 97;
    cbr i1 %178(prob = 0.5), ^b, ^if.else21;
  ^if.else19:
    i32* %179 = getelementptr &(i32* %buf)[i32 %157];
    i32 %180 = load i32* %179;
    i1 %181 = icmp neq i32 %180, i32 110;
    cbr i1 %181(prob = 0.5), ^b, ^if.else22;
  ^entry4:
    i32 %182 = load i32* %0;
    ubr ^while.body7;
  ^while.body5:
    i32* %183 = getelementptr &(i32* %buf)[i32 %165];
    i32 %184 = load i32* %183;
    i32 %185 = add i32 %184, i32 -48;
    i1 %186 = icmp ult i32 %185, i32 10;
    cbr i1 %186(prob = 0.5), ^if.then21, ^b12;
  ^while.body6:
    i32 %187 = phi [^entry3, i32 %160] [^if.then24, i32 %229];
    i1 %188 = icmp sle i32 %len, i32 %187;
    cbr i1 %188(prob = 0.5), ^indirect5, ^b13;
  ^if.then22:
    i32 %189 = load i32* %0;
    i32* %190 = getelementptr &(i32* %buf)[i32 %189];
    i32 %191 = load i32* %190;
    i1 %192 = icmp eq i32 %191, i32 101;
    cbr i1 %192(prob = 0.5), ^if.then23, ^b;
  ^if.else20:
    i32* %193 = getelementptr &(i32* %buf)[i32 %100];
    i32 %194 = load i32* %193;
    i1 %195 = icmp neq i32 %194, i32 101;
    cbr i1 %195(prob = 0.5), ^b, ^b14;
  ^if.else21:
    i32 %196 = add i32 %129, i32 2;
    i32* %197 = getelementptr &(i32* %buf)[i32 %196];
    i32 %198 = load i32* %197;
    i1 %199 = icmp neq i32 %198, i32 108;
    cbr i1 %199(prob = 0.5), ^b, ^if.else23;
  ^if.else22:
    i32 %200 = add i32 %157, i32 1;
    i32* %201 = getelementptr &(i32* %buf)[i32 %200];
    i32 %202 = load i32* %201;
    i1 %203 = icmp neq i32 %202, i32 117;
    cbr i1 %203(prob = 0.5), ^b, ^if.else24;
  ^indirect5:
    i32 %204 = load i32* %0;
    ubr ^b15;
  ^if.then23:
    i32 %205 = add i32 %189, i32 1;
    i1 %206 = icmp sgt i32 %len, i32 %205;
    store i32* %0 with i32 %205;
    cbr i1 %206(prob = 0.5), ^if.then25, ^b16;
  ^while.body7:
    i32 %207 = phi [^entry4, i32 %182] [^if.then27, i32 %261];
    i1 %208 = icmp sle i32 %len, i32 %207;
    cbr i1 %208(prob = 0.5), ^indirect6, ^b17;
  ^b13:
    i32 %209 = load i32* %0;
    i32* %210 = getelementptr &(i32* %buf)[i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = icmp eq i32 %211, i32 32;
    i1 %213 = icmp eq i32 %211, i32 9;
    i1 %214 = or i1 %212, i1 %213;
    i1 %215 = icmp eq i32 %211, i32 10;
    i1 %216 = icmp eq i32 %211, i32 13;
    i1 %217 = or i1 %215, i1 %216;
    i1 %218 = or i1 %214, i1 %217;
    cbr i1 %218(prob = 0.9375), ^if.then24, ^b15;
  ^b14:
    i32 %219 = phi [^if.else20, i32 %99] [^if.else26, i32 %157];
    i32 %220 = add i32 %219, i32 4;
    store i32* %0 with i32 %220;
    ubr ^b;
  ^if.else23:
    i32 %221 = add i32 %129, i32 3;
    i32* %222 = getelementptr &(i32* %buf)[i32 %221];
    i32 %223 = load i32* %222;
    i1 %224 = icmp neq i32 %223, i32 115;
    cbr i1 %224(prob = 0.5), ^b, ^if.else25;
  ^if.else24:
    i32 %225 = add i32 %157, i32 2;
    i32* %226 = getelementptr &(i32* %buf)[i32 %225];
    i32 %227 = load i32* %226;
    i1 %228 = icmp neq i32 %227, i32 108;
    cbr i1 %228(prob = 0.5), ^b, ^if.else26;
  ^if.then24:
    i32 %229 = add i32 %209, i32 1;
    store i32* %0 with i32 %229;
    ubr ^while.body6;
  ^indirect6:
    i32 %230 = load i32* %0;
    ubr ^b18;
  ^b15:
    i32 %231 = phi [^indirect5, i32 %204] [^b13, i32 %209];
    i32* %232 = getelementptr &(i32* %buf)[i32 %231];
    i32 %233 = load i32* %232;
    i1 %234 = icmp eq i32 %233, i32 44;
    cbr i1 %234(prob = 0.984615), ^while.body8, ^entry5;
  ^if.then25:
    i32* %235 = getelementptr &(i32* %buf)[i32 %205];
    i32 %236 = load i32* %235;
    i1 %237 = icmp eq i32 %236, i32 43;
    cbr i1 %237(prob = 0.5), ^if.then26, ^indirect7;
  ^b16:
    i32 %238 = phi [^if.then23, i32 %205] [^if.then26, i32 %258] [^indirect7, i32 %260];
    i1 %239 = icmp sgt i32 %len, i32 %238;
    cbr i1 %239(prob = 0.5), ^if.then28, ^indirect8;
  ^b17:
    i32 %240 = load i32* %0;
    i32* %241 = getelementptr &(i32* %buf)[i32 %240];
    i32 %242 = load i32* %241;
    i1 %243 = icmp eq i32 %242, i32 32;
    i1 %244 = icmp eq i32 %242, i32 9;
    i1 %245 = or i1 %243, i1 %244;
    i1 %246 = icmp eq i32 %242, i32 10;
    i1 %247 = icmp eq i32 %242, i32 13;
    i1 %248 = or i1 %246, i1 %247;
    i1 %249 = or i1 %245, i1 %248;
    cbr i1 %249(prob = 0.9375), ^if.then27, ^b18;
  ^if.else25:
    i32* %250 = getelementptr &(i32* %buf)[i32 %130];
    i32 %251 = load i32* %250;
    i1 %252 = icmp neq i32 %251, i32 101;
    cbr i1 %252(prob = 0.5), ^b, ^b19;
  ^if.else26:
    i32* %253 = getelementptr &(i32* %buf)[i32 %158];
    i32 %254 = load i32* %253;
    i1 %255 = icmp neq i32 %254, i32 108;
    cbr i1 %255(prob = 0.5), ^b, ^b14;
  ^while.body8:
    i32 %256 = add i32 %231, i32 1;
    store i32* %0 with i32 %256;
    ubr ^while.body9;
  ^if.then26:
    i32 %257 = load i32* %0;
    i32 %258 = add i32 %257, i32 1;
    store i32* %0 with i32 %258;
    ubr ^b16;
  ^entry5:
    i32 %259 = load i32* %0;
    ubr ^while.body10;
  ^indirect7:
    i32 %260 = load i32* %0;
    ubr ^b16;
  ^if.then27:
    i32 %261 = add i32 %240, i32 1;
    store i32* %0 with i32 %261;
    ubr ^while.body7;
  ^indirect8:
    i32 %262 = load i32* %0;
    ubr ^while.header2;
  ^b18:
    i32 %263 = phi [^indirect6, i32 %230] [^b17, i32 %240];
    i1 %264 = icmp sle i32 %len, i32 %263;
    cbr i1 %264(prob = 0.5), ^b, ^b20;
  ^if.then28:
    i32 %265 = load i32* %0;
    i32* %266 = getelementptr &(i32* %buf)[i32 %265];
    i32 %267 = load i32* %266;
    i1 %268 = icmp eq i32 %267, i32 45;
    cbr i1 %268(prob = 0.5), ^if.then29, ^while.header2;
  ^b19:
    i32 %269 = add i32 %129, i32 5;
    store i32* %0 with i32 %269;
    ubr ^b;
  ^if.then29:
    i32 %270 = phi [^if.then28, i32 %265] [^while.body12, i32 %305];
    i32 %271 = add i32 %270, i32 1;
    store i32* %0 with i32 %271;
    ubr ^while.header2;
  ^while.body9:
    i32 %272 = phi [^while.body8, i32 %256] [^if.then30, i32 %310];
    i1 %273 = icmp sle i32 %len, i32 %272;
    cbr i1 %273(prob = 0.5), ^while.body11, ^b22;
  ^while.body10:
    i32 %274 = phi [^entry5, i32 %259] [^if.then31, i32 %311];
    i1 %275 = icmp sle i32 %len, i32 %274;
    cbr i1 %275(prob = 0.5), ^indirect9, ^b23;
  ^b20:
    i32* %276 = getelementptr &(i32* %buf)[i32 %263];
    i32 %277 = load i32* %276;
    i1 %278 = icmp neq i32 %277, i32 58;
    cbr i1 %278(prob = 0.5), ^b, ^b21;
  ^while.header2:
    i32 %279 = phi [^indirect8, i32 %262] [^if.then28, i32 %265] [^if.then29, i32 %271];
    i1 %280 = icmp sgt i32 %len, i32 %279;
    cbr i1 %280(prob = 0.984615), ^while.body12, ^b;
  ^indirect9:
    i32 %281 = load i32* %0;
    ubr ^b24;
  ^while.body11:
    i32 %282 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %283 = icmp neq i32 %282, i32 0;
    cbr i1 %283(prob = 0.5), ^entry3, ^b;
  ^b21:
    i32 %284 = add i32 %263, i32 1;
    store i32* %0 with i32 %284;
    ubr ^while.body13;
  ^b22:
    i32 %285 = load i32* %0;
    i32* %286 = getelementptr &(i32* %buf)[i32 %285];
    i32 %287 = load i32* %286;
    i1 %288 = icmp eq i32 %287, i32 32;
    i1 %289 = icmp eq i32 %287, i32 9;
    i1 %290 = or i1 %288, i1 %289;
    i1 %291 = icmp eq i32 %287, i32 10;
    i1 %292 = icmp eq i32 %287, i32 13;
    i1 %293 = or i1 %291, i1 %292;
    i1 %294 = or i1 %290, i1 %293;
    cbr i1 %294(prob = 0.9375), ^if.then30, ^while.body11;
  ^b23:
    i32 %295 = load i32* %0;
    i32* %296 = getelementptr &(i32* %buf)[i32 %295];
    i32 %297 = load i32* %296;
    i1 %298 = icmp eq i32 %297, i32 32;
    i1 %299 = icmp eq i32 %297, i32 9;
    i1 %300 = or i1 %298, i1 %299;
    i1 %301 = icmp eq i32 %297, i32 10;
    i1 %302 = icmp eq i32 %297, i32 13;
    i1 %303 = or i1 %301, i1 %302;
    i1 %304 = or i1 %300, i1 %303;
    cbr i1 %304(prob = 0.9375), ^if.then31, ^b24;
  ^while.body12:
    i32 %305 = load i32* %0;
    i32* %306 = getelementptr &(i32* %buf)[i32 %305];
    i32 %307 = load i32* %306;
    i32 %308 = add i32 %307, i32 -48;
    i1 %309 = icmp uge i32 %308, i32 10;
    cbr i1 %309(prob = 0.5), ^b, ^if.then29;
  ^if.then30:
    i32 %310 = add i32 %285, i32 1;
    store i32* %0 with i32 %310;
    ubr ^while.body9;
  ^if.then31:
    i32 %311 = add i32 %295, i32 1;
    store i32* %0 with i32 %311;
    ubr ^while.body10;
  ^b24:
    i32 %312 = phi [^indirect9, i32 %281] [^b23, i32 %295];
    i1 %313 = icmp sle i32 %len, i32 %312;
    cbr i1 %313(prob = 0.5), ^b, ^b25;
  ^while.body13:
    i32 %314 = phi [^b21, i32 %284] [^if.then32, i32 %331];
    i1 %315 = icmp sle i32 %len, i32 %314;
    cbr i1 %315(prob = 0.5), ^b26, ^b27;
  ^b25:
    i32* %316 = getelementptr &(i32* %buf)[i32 %312];
    i32 %317 = load i32* %316;
    i1 %318 = icmp neq i32 %317, i32 93;
    cbr i1 %318(prob = 0.5), ^b, ^if.then13;
  ^b26:
    i32 %319 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %320 = icmp eq i32 %319, i32 0;
    cbr i1 %320(prob = 0.5), ^b, ^entry6;
  ^b27:
    i32 %321 = load i32* %0;
    i32* %322 = getelementptr &(i32* %buf)[i32 %321];
    i32 %323 = load i32* %322;
    i1 %324 = icmp eq i32 %323, i32 32;
    i1 %325 = icmp eq i32 %323, i32 9;
    i1 %326 = or i1 %324, i1 %325;
    i1 %327 = icmp eq i32 %323, i32 10;
    i1 %328 = icmp eq i32 %323, i32 13;
    i1 %329 = or i1 %327, i1 %328;
    i1 %330 = or i1 %326, i1 %329;
    cbr i1 %330(prob = 0.9375), ^if.then32, ^b26;
  ^if.then32:
    i32 %331 = add i32 %321, i32 1;
    store i32* %0 with i32 %331;
    ubr ^while.body13;
  ^entry6:
    i32 %332 = load i32* %0;
    ubr ^while.body14;
  ^while.body14:
    i32 %333 = phi [^entry6, i32 %332] [^if.then33, i32 %346];
    i1 %334 = icmp sle i32 %len, i32 %333;
    cbr i1 %334(prob = 0.5), ^indirect10, ^b28;
  ^indirect10:
    i32 %335 = load i32* %0;
    ubr ^b29;
  ^b28:
    i32 %336 = load i32* %0;
    i32* %337 = getelementptr &(i32* %buf)[i32 %336];
    i32 %338 = load i32* %337;
    i1 %339 = icmp eq i32 %338, i32 32;
    i1 %340 = icmp eq i32 %338, i32 9;
    i1 %341 = or i1 %339, i1 %340;
    i1 %342 = icmp eq i32 %338, i32 10;
    i1 %343 = icmp eq i32 %338, i32 13;
    i1 %344 = or i1 %342, i1 %343;
    i1 %345 = or i1 %341, i1 %344;
    cbr i1 %345(prob = 0.9375), ^if.then33, ^b29;
  ^if.then33:
    i32 %346 = add i32 %336, i32 1;
    store i32* %0 with i32 %346;
    ubr ^while.body14;
  ^b29:
    i32 %347 = phi [^indirect10, i32 %335] [^b28, i32 %336];
    i32* %348 = getelementptr &(i32* %buf)[i32 %347];
    i32 %349 = load i32* %348;
    i1 %350 = icmp eq i32 %349, i32 44;
    cbr i1 %350(prob = 0.984615), ^while.body15, ^entry7;
  ^while.body15:
    i32 %351 = add i32 %347, i32 1;
    store i32* %0 with i32 %351;
    ubr ^while.body16;
  ^entry7:
    i32 %352 = load i32* %0;
    ubr ^while.body17;
  ^while.body16:
    i32 %353 = phi [^while.body15, i32 %351] [^if.then34, i32 %380];
    i1 %354 = icmp sle i32 %len, i32 %353;
    cbr i1 %354(prob = 0.5), ^while.body18, ^b30;
  ^while.body17:
    i32 %355 = phi [^entry7, i32 %352] [^if.then35, i32 %382];
    i1 %356 = icmp sle i32 %len, i32 %355;
    cbr i1 %356(prob = 0.5), ^indirect11, ^b31;
  ^indirect11:
    i32 %357 = load i32* %0;
    ubr ^b32;
  ^while.body18:
    i32 %358 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %359 = icmp eq i32 %358, i32 0;
    cbr i1 %359(prob = 0.5), ^b, ^entry8;
  ^b30:
    i32 %360 = load i32* %0;
    i32* %361 = getelementptr &(i32* %buf)[i32 %360];
    i32 %362 = load i32* %361;
    i1 %363 = icmp eq i32 %362, i32 32;
    i1 %364 = icmp eq i32 %362, i32 9;
    i1 %365 = or i1 %363, i1 %364;
    i1 %366 = icmp eq i32 %362, i32 10;
    i1 %367 = icmp eq i32 %362, i32 13;
    i1 %368 = or i1 %366, i1 %367;
    i1 %369 = or i1 %365, i1 %368;
    cbr i1 %369(prob = 0.9375), ^if.then34, ^while.body18;
  ^b31:
    i32 %370 = load i32* %0;
    i32* %371 = getelementptr &(i32* %buf)[i32 %370];
    i32 %372 = load i32* %371;
    i1 %373 = icmp eq i32 %372, i32 32;
    i1 %374 = icmp eq i32 %372, i32 9;
    i1 %375 = or i1 %373, i1 %374;
    i1 %376 = icmp eq i32 %372, i32 10;
    i1 %377 = icmp eq i32 %372, i32 13;
    i1 %378 = or i1 %376, i1 %377;
    i1 %379 = or i1 %375, i1 %378;
    cbr i1 %379(prob = 0.9375), ^if.then35, ^b32;
  ^if.then34:
    i32 %380 = add i32 %360, i32 1;
    store i32* %0 with i32 %380;
    ubr ^while.body16;
  ^entry8:
    i32 %381 = load i32* %0;
    ubr ^while.body19;
  ^if.then35:
    i32 %382 = add i32 %370, i32 1;
    store i32* %0 with i32 %382;
    ubr ^while.body17;
  ^b32:
    i32 %383 = phi [^indirect11, i32 %357] [^b31, i32 %370];
    i1 %384 = icmp sle i32 %len, i32 %383;
    cbr i1 %384(prob = 0.5), ^b, ^if.else27;
  ^while.body19:
    i32 %385 = phi [^entry8, i32 %381] [^if.then36, i32 %401];
    i1 %386 = icmp sle i32 %len, i32 %385;
    cbr i1 %386(prob = 0.5), ^indirect12, ^b33;
  ^if.else27:
    i32* %387 = getelementptr &(i32* %buf)[i32 %383];
    i32 %388 = load i32* %387;
    i1 %389 = icmp neq i32 %388, i32 125;
    cbr i1 %389(prob = 0.5), ^b, ^if.then13;
  ^indirect12:
    i32 %390 = load i32* %0;
    ubr ^b34;
  ^b33:
    i32 %391 = load i32* %0;
    i32* %392 = getelementptr &(i32* %buf)[i32 %391];
    i32 %393 = load i32* %392;
    i1 %394 = icmp eq i32 %393, i32 32;
    i1 %395 = icmp eq i32 %393, i32 9;
    i1 %396 = or i1 %394, i1 %395;
    i1 %397 = icmp eq i32 %393, i32 10;
    i1 %398 = icmp eq i32 %393, i32 13;
    i1 %399 = or i1 %397, i1 %398;
    i1 %400 = or i1 %396, i1 %399;
    cbr i1 %400(prob = 0.9375), ^if.then36, ^b34;
  ^if.then36:
    i32 %401 = add i32 %391, i32 1;
    store i32* %0 with i32 %401;
    ubr ^while.body19;
  ^b34:
    i32 %402 = phi [^indirect12, i32 %390] [^b33, i32 %391];
    i1 %403 = icmp sle i32 %len, i32 %402;
    cbr i1 %403(prob = 0.5), ^b, ^b35;
  ^b35:
    i32* %404 = getelementptr &(i32* %buf)[i32 %402];
    i32 %405 = load i32* %404;
    i1 %406 = icmp neq i32 %405, i32 58;
    cbr i1 %406(prob = 0.5), ^b, ^b36;
  ^b36:
    i32 %407 = add i32 %402, i32 1;
    store i32* %0 with i32 %407;
    ubr ^while.body20;
  ^while.body20:
    i32 %408 = phi [^b36, i32 %407] [^if.then37, i32 %422];
    i1 %409 = icmp sle i32 %len, i32 %408;
    cbr i1 %409(prob = 0.5), ^b37, ^b38;
  ^b37:
    i32 %410 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %411 = icmp neq i32 %410, i32 0;
    cbr i1 %411(prob = 0.5), ^entry6, ^b;
  ^b38:
    i32 %412 = load i32* %0;
    i32* %413 = getelementptr &(i32* %buf)[i32 %412];
    i32 %414 = load i32* %413;
    i1 %415 = icmp eq i32 %414, i32 32;
    i1 %416 = icmp eq i32 %414, i32 9;
    i1 %417 = or i1 %415, i1 %416;
    i1 %418 = icmp eq i32 %414, i32 10;
    i1 %419 = icmp eq i32 %414, i32 13;
    i1 %420 = or i1 %418, i1 %419;
    i1 %421 = or i1 %417, i1 %420;
    cbr i1 %421(prob = 0.9375), ^if.then37, ^b37;
  ^if.then37:
    i32 %422 = add i32 %412, i32 1;
    store i32* %0 with i32 %422;
    ubr ^while.body20;
}
internal [50000000 * i32]* @buffer, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32, align 4;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %27];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32 %17 = load i32* %pos;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 32;
    i1 %21 = icmp eq i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    i1 %23 = icmp eq i32 %19, i32 10;
    i1 %24 = icmp eq i32 %19, i32 13;
    i1 %25 = or i1 %23, i1 %24;
    i1 %26 = or i1 %22, i1 %25;
    cbr i1 %26(prob = 0.9375), ^if.then, ^b1;
  ^if.then:
    i32 %27 = add i32 %17, i32 1;
    store i32* %pos with i32 %27;
    ubr ^while.body1;
  ^while.body2:
    i32 %28 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %29 = icmp sle i32 %4, i32 %28;
    cbr i1 %29(prob = 0.5), ^b3, ^b4;
  ^b3:
    i1 %30 = icmp neq i32 %15, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
  ^b4:
    i32 %31 = load i32* %pos;
    i32* %32 = getelementptr &(i32* %5)[i32 %31];
    i32 %33 = load i32* %32;
    i1 %34 = icmp eq i32 %33, i32 32;
    i1 %35 = icmp eq i32 %33, i32 9;
    i1 %36 = or i1 %34, i1 %35;
    i1 %37 = icmp eq i32 %33, i32 10;
    i1 %38 = icmp eq i32 %33, i32 13;
    i1 %39 = or i1 %37, i1 %38;
    i1 %40 = or i1 %36, i1 %39;
    cbr i1 %40(prob = 0.9375), ^if.then2, ^b3;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then2:
    i32 %41 = add i32 %31, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.else:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b5:
    i32 %42 = phi [^if.then1, i32 0] [^if.else, i32 1];
    ret i32 %42;
}
