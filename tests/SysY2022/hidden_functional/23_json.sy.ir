internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @detect_item(i32 %type, i32* %buf, i32 %len, i32* %0) -> i32 {
  ^1:
    ubr ^2;
  ^2:
    i32 %3 = phi [^1, i32 %type] [^if.else2, i32 3] [^if.else5, i32 2] [^entry1, i32 1] [^if.else10, i32 5] [^if.else12, i32 6];
    i32 %4 = load i32* %0;
    ubr ^entry;
  ^entry:
    i32 %5 = phi [^2, i32 %4] [^if.then, i32 %16];
    i32 %6 = phi [^2, i32 %3] [^if.then, i32 4];
    i1 %7 = icmp sle i32 %len, i32 %5;
    cbr i1 %7(prob = 0.5), ^b, ^while.body;
  ^while.body:
    i32 %8 = phi [^entry, i32 %5] [^if.then1, i32 %26];
    i1 %9 = icmp sle i32 %len, i32 %8;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^b3, i32 0] [^if.else8, i32 0] [^b5, i32 0] [^if.then8, i32 0] [^if.else14, i32 0] [^b8, i32 0] [^if.else16, i32 0] [^if.then11, i32 0] [^if.else17, i32 0] [^if.else18, i32 0] [^if.then12, i32 1] [^if.then16, i32 %141] [^b11, i32 0] [^if.else21, i32 0] [^if.else22, i32 0] [^if.then17, i32 0] [^b12, i32 1] [^if.else25, i32 0] [^if.else26, i32 0] [^if.else27, i32 0] [^if.then20, i32 1] [^if.else29, i32 0] [^if.else30, i32 0] [^if.else31, i32 0] [^b15, i32 0] [^b17, i32 1] [^if.else33, i32 0] [^if.else34, i32 0] [^b19, i32 0] [^b20, i32 0] [^if.else37, i32 0] [^if.else38, i32 0] [^while.body11, i32 0] [^b24, i32 0] [^b25, i32 1] [^while.header2, i32 1] [^while.body13, i32 1] [^b26, i32 0] [^b30, i32 0] [^while.body18, i32 0] [^if.else53, i32 0] [^b33, i32 0] [^b35, i32 0] [^b37, i32 0];
    ret i32 %10;
  ^b1:
    i1 %11 = icmp eq i32 %6, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %12 = getelementptr &(i32* %buf)[i32 %8];
    i32 %13 = load i32* %12;
    i1 %14 = icmp eq i32 %13, i32 32;
    cbr i1 %14(prob = 0.5), ^indirect, ^if.else1;
  ^indirect:
    i32 %15 = load i32* %0;
    ubr ^if.then1;
  ^if.then:
    i32 %16 = load i32* %0;
    i32* %17 = getelementptr &(i32* %buf)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 123;
    cbr i1 %19(prob = 0.5), ^entry, ^if.else2;
  ^if.else:
    i1 %20 = icmp eq i32 %6, i32 1;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else3;
  ^if.else1:
    i32 %21 = load i32* %0;
    i32* %22 = getelementptr &(i32* %buf)[i32 %21];
    i32 %23 = load i32* %22;
    i1 %24 = icmp eq i32 %23, i32 9;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else4;
  ^if.then1:
    i32 %25 = phi [^indirect, i32 %15] [^if.else1, i32 %21] [^if.else4, i32 %21] [^if.else7, i32 %21];
    i32 %26 = add i32 %25, i32 1;
    store i32* %0 with i32 %26;
    ubr ^while.body;
  ^if.else2:
    i1 %27 = icmp eq i32 %18, i32 91;
    cbr i1 %27(prob = 0.5), ^2, ^if.else5;
  ^if.then2:
    i32 %28 = load i32* %0;
    i32* %29 = getelementptr &(i32* %buf)[i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %30, i32 43;
    i1 %32 = icmp eq i32 %30, i32 45;
    i1 %33 = or i1 %31, i1 %32;
    cbr i1 %33(prob = 0.75), ^if.then3, ^b3;
  ^if.else3:
    i1 %34 = icmp eq i32 %6, i32 2;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else4:
    i1 %35 = icmp eq i32 %23, i32 10;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else7;
  ^if.then3:
    i32 %36 = add i32 %28, i32 1;
    store i32* %0 with i32 %36;
    ubr ^b3;
  ^if.then4:
    i32 %37 = load i32* %0;
    i32 %38 = add i32 %37, i32 1;
    store i32* %0 with i32 %38;
    ubr ^while.header;
  ^if.else5:
    i1 %39 = icmp eq i32 %18, i32 34;
    cbr i1 %39(prob = 0.5), ^2, ^entry1;
  ^b3:
    i32 %40 = phi [^if.then2, i32 %28] [^if.then3, i32 %36];
    i1 %41 = icmp sle i32 %len, i32 %40;
    cbr i1 %41(prob = 0.5), ^b, ^if.else8;
  ^if.else6:
    i1 %42 = icmp eq i32 %6, i32 3;
    cbr i1 %42(prob = 0.5), ^if.then5, ^if.else9;
  ^if.else7:
    i1 %43 = icmp eq i32 %23, i32 13;
    cbr i1 %43(prob = 0.5), ^if.then1, ^b1;
  ^if.then5:
    i32 %44 = load i32* %0;
    i32 %45 = add i32 %44, i32 1;
    store i32* %0 with i32 %45;
    ubr ^while.body2;
  ^while.header:
    i32 %46 = phi [^if.then4, i32 %38] [^b4, i32 %76];
    i1 %47 = icmp sgt i32 %len, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body1, ^indirect1;
  ^if.else8:
    i32 %48 = load i32* %0;
    i32* %49 = getelementptr &(i32* %buf)[i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %50, i32 -48;
    i1 %52 = icmp uge i32 %51, i32 10;
    cbr i1 %52(prob = 0.5), ^b, ^while.header1;
  ^entry1:
    i1 %53 = icmp eq i32 %18, i32 43;
    i1 %54 = icmp eq i32 %18, i32 45;
    i1 %55 = or i1 %53, i1 %54;
    i32 %56 = add i32 %18, i32 -48;
    i1 %57 = icmp ult i32 %56, i32 10;
    i1 %58 = or i1 %55, i1 %57;
    cbr i1 %58(prob = 0.875), ^2, ^if.else10;
  ^if.else9:
    i1 %59 = icmp eq i32 %6, i32 4;
    cbr i1 %59(prob = 0.5), ^if.then6, ^if.else11;
  ^indirect1:
    i32 %60 = load i32* %0;
    ubr ^b5;
  ^while.body1:
    i32 %61 = load i32* %0;
    i32* %62 = getelementptr &(i32* %buf)[i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = icmp eq i32 %63, i32 34;
    cbr i1 %64(prob = 0.5), ^b5, ^b4;
  ^if.then6:
    i32 %65 = load i32* %0;
    i32 %66 = add i32 %65, i32 1;
    store i32* %0 with i32 %66;
    ubr ^while.body3;
  ^while.body2:
    i32 %67 = phi [^if.then5, i32 %45] [^if.then13, i32 %130];
    i1 %68 = icmp sle i32 %len, i32 %67;
    cbr i1 %68(prob = 0.5), ^if.then7, ^b6;
  ^while.header1:
    i32 %69 = phi [^if.else8, i32 %48] [^b7, i32 %105];
    i1 %70 = icmp sgt i32 %len, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body4, ^indirect2;
  ^if.else10:
    i1 %71 = icmp eq i32 %18, i32 116;
    cbr i1 %71(prob = 0.5), ^2, ^if.else12;
  ^if.else11:
    i1 %72 = icmp eq i32 %6, i32 5;
    cbr i1 %72(prob = 0.5), ^if.then8, ^if.else13;
  ^b4:
    i1 %73 = icmp eq i32 %63, i32 92;
    i32 %74 = zext i1 %73 to i32;
    i32 %75 = add i32 %61, i32 1;
    i32 %76 = add i32 %74, i32 %75;
    store i32* %0 with i32 %76;
    ubr ^while.header;
  ^b5:
    i32 %77 = phi [^indirect1, i32 %60] [^while.body1, i32 %61];
    i1 %78 = icmp sle i32 %len, i32 %77;
    cbr i1 %78(prob = 0.5), ^b, ^if.else14;
  ^if.then7:
    i32 %79 = load i32* %0;
    i1 %80 = icmp sgt i32 %len, i32 %79;
    cbr i1 %80(prob = 0.5), ^if.then9, ^b8;
  ^indirect2:
    i32 %81 = load i32* %0;
    ubr ^b9;
  ^b6:
    i32* %82 = getelementptr &(i32* %buf)[i32 %67];
    i32 %83 = load i32* %82;
    i1 %84 = icmp eq i32 %83, i32 32;
    cbr i1 %84(prob = 0.5), ^indirect3, ^if.else15;
  ^while.body3:
    i32 %85 = phi [^if.then6, i32 %66] [^if.then18, i32 %160];
    i1 %86 = icmp sle i32 %len, i32 %85;
    cbr i1 %86(prob = 0.5), ^if.then10, ^b10;
  ^while.body4:
    i32 %87 = load i32* %0;
    i32* %88 = getelementptr &(i32* %buf)[i32 %87];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %89, i32 -48;
    i1 %91 = icmp uge i32 %90, i32 10;
    cbr i1 %91(prob = 0.5), ^b9, ^b7;
  ^if.then8:
    i32 %92 = load i32* %0;
    i32 %93 = add i32 %92, i32 3;
    i1 %94 = icmp sle i32 %len, i32 %93;
    cbr i1 %94(prob = 0.5), ^b, ^if.else16;
  ^if.else12:
    i1 %95 = icmp eq i32 %18, i32 102;
    cbr i1 %95(prob = 0.5), ^2, ^if.else17;
  ^if.else13:
    i1 %96 = icmp eq i32 %6, i32 6;
    cbr i1 %96(prob = 0.5), ^if.then11, ^if.else18;
  ^indirect3:
    i32 %97 = load i32* %0;
    ubr ^if.then13;
  ^if.else14:
    i32 %98 = load i32* %0;
    i32* %99 = getelementptr &(i32* %buf)[i32 %98];
    i32 %100 = load i32* %99;
    i1 %101 = icmp neq i32 %100, i32 34;
    cbr i1 %101(prob = 0.5), ^b, ^if.then12;
  ^if.then9:
    i32* %102 = getelementptr &(i32* %buf)[i32 %79];
    i32 %103 = load i32* %102;
    i1 %104 = icmp eq i32 %103, i32 93;
    cbr i1 %104(prob = 0.5), ^if.then12, ^b8;
  ^b7:
    i32 %105 = add i32 %87, i32 1;
    store i32* %0 with i32 %105;
    ubr ^while.header1;
  ^b8:
    i32 %106 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %107 = icmp eq i32 %106, i32 0;
    cbr i1 %107(prob = 0.5), ^b, ^entry2;
  ^if.then10:
    i32 %108 = load i32* %0;
    i1 %109 = icmp sgt i32 %len, i32 %108;
    cbr i1 %109(prob = 0.5), ^if.then14, ^b11;
  ^b9:
    i32 %110 = phi [^indirect2, i32 %81] [^while.body4, i32 %87];
    i1 %111 = icmp sgt i32 %len, i32 %110;
    cbr i1 %111(prob = 0.5), ^if.then15, ^indirect5;
  ^if.else15:
    i32 %112 = load i32* %0;
    i32* %113 = getelementptr &(i32* %buf)[i32 %112];
    i32 %114 = load i32* %113;
    i1 %115 = icmp eq i32 %114, i32 9;
    cbr i1 %115(prob = 0.5), ^if.then13, ^if.else19;
  ^b10:
    i32* %116 = getelementptr &(i32* %buf)[i32 %85];
    i32 %117 = load i32* %116;
    i1 %118 = icmp eq i32 %117, i32 32;
    cbr i1 %118(prob = 0.5), ^indirect4, ^if.else20;
  ^if.else16:
    i32* %119 = getelementptr &(i32* %buf)[i32 %92];
    i32 %120 = load i32* %119;
    i1 %121 = icmp neq i32 %120, i32 116;
    cbr i1 %121(prob = 0.5), ^b, ^if.else21;
  ^if.then11:
    i32 %122 = load i32* %0;
    i32 %123 = add i32 %122, i32 4;
    i1 %124 = icmp sle i32 %len, i32 %123;
    cbr i1 %124(prob = 0.5), ^b, ^if.else22;
  ^if.else17:
    i1 %125 = icmp eq i32 %18, i32 110;
    cbr i1 %125(prob = 0.5), ^if.then16, ^b;
  ^if.else18:
    i1 %126 = icmp eq i32 %6, i32 7;
    cbr i1 %126(prob = 0.5), ^if.then17, ^b;
  ^if.then12:
    i32 %127 = phi [^if.else14, i32 %98] [^if.then9, i32 %79] [^if.then14, i32 %108] [^b24, i32 %246] [^if.else53, i32 %353];
    i32 %128 = add i32 %127, i32 1;
    store i32* %0 with i32 %128;
    ubr ^b;
  ^if.then13:
    i32 %129 = phi [^indirect3, i32 %97] [^if.else15, i32 %112] [^if.else19, i32 %112] [^if.else23, i32 %112];
    i32 %130 = add i32 %129, i32 1;
    store i32* %0 with i32 %130;
    ubr ^while.body2;
  ^indirect4:
    i32 %131 = load i32* %0;
    ubr ^if.then18;
  ^entry2:
    i32 %132 = load i32* %0;
    ubr ^while.body5;
  ^indirect5:
    i32 %133 = load i32* %0;
    ubr ^b12;
  ^if.then14:
    i32* %134 = getelementptr &(i32* %buf)[i32 %108];
    i32 %135 = load i32* %134;
    i1 %136 = icmp eq i32 %135, i32 125;
    cbr i1 %136(prob = 0.5), ^if.then12, ^b11;
  ^if.then15:
    i32 %137 = load i32* %0;
    i32* %138 = getelementptr &(i32* %buf)[i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = icmp eq i32 %139, i32 46;
    cbr i1 %140(prob = 0.5), ^if.then19, ^b12;
  ^if.then16:
    i32 %141 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 7, i32* %buf, i32 %len, i32* %0);
    ubr ^b;
  ^b11:
    i32 %142 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %143 = icmp eq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b, ^entry3;
  ^if.else19:
    i1 %144 = icmp eq i32 %114, i32 10;
    cbr i1 %144(prob = 0.5), ^if.then13, ^if.else23;
  ^if.else20:
    i32 %145 = load i32* %0;
    i32* %146 = getelementptr &(i32* %buf)[i32 %145];
    i32 %147 = load i32* %146;
    i1 %148 = icmp eq i32 %147, i32 9;
    cbr i1 %148(prob = 0.5), ^if.then18, ^if.else24;
  ^if.else21:
    i32 %149 = add i32 %92, i32 1;
    i32* %150 = getelementptr &(i32* %buf)[i32 %149];
    i32 %151 = load i32* %150;
    i1 %152 = icmp neq i32 %151, i32 114;
    cbr i1 %152(prob = 0.5), ^b, ^if.else25;
  ^if.else22:
    i32* %153 = getelementptr &(i32* %buf)[i32 %122];
    i32 %154 = load i32* %153;
    i1 %155 = icmp neq i32 %154, i32 102;
    cbr i1 %155(prob = 0.5), ^b, ^if.else26;
  ^if.then17:
    i32 %156 = load i32* %0;
    i32 %157 = add i32 %156, i32 3;
    i1 %158 = icmp sle i32 %len, i32 %157;
    cbr i1 %158(prob = 0.5), ^b, ^if.else27;
  ^if.then18:
    i32 %159 = phi [^indirect4, i32 %131] [^if.else20, i32 %145] [^if.else24, i32 %145] [^if.else28, i32 %145];
    i32 %160 = add i32 %159, i32 1;
    store i32* %0 with i32 %160;
    ubr ^while.body3;
  ^entry3:
    i32 %161 = load i32* %0;
    ubr ^while.body7;
  ^if.then19:
    i32 %162 = phi [^if.then15, i32 %137] [^while.body6, i32 %163];
    i32 %163 = add i32 %162, i32 1;
    i1 %164 = icmp sgt i32 %len, i32 %163;
    store i32* %0 with i32 %163;
    cbr i1 %164(prob = 0.984615), ^while.body6, ^b12;
  ^while.body5:
    i32 %165 = phi [^entry2, i32 %132] [^if.then22, i32 %237];
    i1 %166 = icmp sle i32 %len, i32 %165;
    cbr i1 %166(prob = 0.5), ^b13, ^b14;
  ^b12:
    i32 %167 = phi [^indirect5, i32 %133] [^if.then15, i32 %137] [^if.then19, i32 %163] [^while.body6, i32 %163];
    i1 %168 = icmp sgt i32 %len, i32 %167;
    cbr i1 %168(prob = 0.5), ^if.then20, ^b;
  ^if.else23:
    i1 %169 = icmp eq i32 %114, i32 13;
    cbr i1 %169(prob = 0.5), ^if.then13, ^if.then7;
  ^if.else24:
    i1 %170 = icmp eq i32 %147, i32 10;
    cbr i1 %170(prob = 0.5), ^if.then18, ^if.else28;
  ^if.else25:
    i32 %171 = add i32 %92, i32 2;
    i32* %172 = getelementptr &(i32* %buf)[i32 %171];
    i32 %173 = load i32* %172;
    i1 %174 = icmp neq i32 %173, i32 117;
    cbr i1 %174(prob = 0.5), ^b, ^if.else29;
  ^if.else26:
    i32 %175 = add i32 %122, i32 1;
    i32* %176 = getelementptr &(i32* %buf)[i32 %175];
    i32 %177 = load i32* %176;
    i1 %178 = icmp neq i32 %177, i32 97;
    cbr i1 %178(prob = 0.5), ^b, ^if.else30;
  ^if.else27:
    i32* %179 = getelementptr &(i32* %buf)[i32 %156];
    i32 %180 = load i32* %179;
    i1 %181 = icmp neq i32 %180, i32 110;
    cbr i1 %181(prob = 0.5), ^b, ^if.else31;
  ^while.body6:
    i32* %182 = getelementptr &(i32* %buf)[i32 %163];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %183, i32 -48;
    i1 %185 = icmp ult i32 %184, i32 10;
    cbr i1 %185(prob = 0.5), ^if.then19, ^b12;
  ^if.then20:
    i32 %186 = load i32* %0;
    i32* %187 = getelementptr &(i32* %buf)[i32 %186];
    i32 %188 = load i32* %187;
    i1 %189 = icmp eq i32 %188, i32 101;
    cbr i1 %189(prob = 0.5), ^if.then21, ^b;
  ^b13:
    i32 %190 = load i32* %0;
    i32* %191 = getelementptr &(i32* %buf)[i32 %190];
    i32 %192 = load i32* %191;
    i1 %193 = icmp eq i32 %192, i32 44;
    cbr i1 %193(prob = 0.984615), ^while.body8, ^while.body9;
  ^b14:
    i32* %194 = getelementptr &(i32* %buf)[i32 %165];
    i32 %195 = load i32* %194;
    i1 %196 = icmp eq i32 %195, i32 32;
    cbr i1 %196(prob = 0.5), ^indirect6, ^if.else32;
  ^while.body7:
    i32 %197 = phi [^entry3, i32 %161] [^if.then25, i32 %269];
    i1 %198 = icmp sle i32 %len, i32 %197;
    cbr i1 %198(prob = 0.5), ^b15, ^b16;
  ^if.else28:
    i1 %199 = icmp eq i32 %147, i32 13;
    cbr i1 %199(prob = 0.5), ^if.then18, ^if.then10;
  ^if.else29:
    i32* %200 = getelementptr &(i32* %buf)[i32 %93];
    i32 %201 = load i32* %200;
    i1 %202 = icmp neq i32 %201, i32 101;
    cbr i1 %202(prob = 0.5), ^b, ^b17;
  ^if.else30:
    i32 %203 = add i32 %122, i32 2;
    i32* %204 = getelementptr &(i32* %buf)[i32 %203];
    i32 %205 = load i32* %204;
    i1 %206 = icmp neq i32 %205, i32 108;
    cbr i1 %206(prob = 0.5), ^b, ^if.else33;
  ^if.else31:
    i32 %207 = add i32 %156, i32 1;
    i32* %208 = getelementptr &(i32* %buf)[i32 %207];
    i32 %209 = load i32* %208;
    i1 %210 = icmp neq i32 %209, i32 117;
    cbr i1 %210(prob = 0.5), ^b, ^if.else34;
  ^while.body8:
    i32 %211 = add i32 %190, i32 1;
    store i32* %0 with i32 %211;
    ubr ^while.body10;
  ^indirect6:
    i32 %212 = load i32* %0;
    ubr ^if.then22;
  ^if.then21:
    i32 %213 = add i32 %186, i32 1;
    i1 %214 = icmp sgt i32 %len, i32 %213;
    store i32* %0 with i32 %213;
    cbr i1 %214(prob = 0.5), ^if.then23, ^b18;
  ^b15:
    i32 %215 = load i32* %0;
    i1 %216 = icmp sle i32 %len, i32 %215;
    cbr i1 %216(prob = 0.5), ^b, ^b20;
  ^while.body9:
    i32 %217 = phi [^b13, i32 %190] [^if.then28, i32 %296];
    i1 %218 = icmp sle i32 %len, i32 %217;
    cbr i1 %218(prob = 0.5), ^b19, ^b21;
  ^if.else32:
    i32 %219 = load i32* %0;
    i32* %220 = getelementptr &(i32* %buf)[i32 %219];
    i32 %221 = load i32* %220;
    i1 %222 = icmp eq i32 %221, i32 9;
    cbr i1 %222(prob = 0.5), ^if.then22, ^if.else35;
  ^b16:
    i32* %223 = getelementptr &(i32* %buf)[i32 %197];
    i32 %224 = load i32* %223;
    i1 %225 = icmp eq i32 %224, i32 32;
    cbr i1 %225(prob = 0.5), ^indirect7, ^if.else36;
  ^b17:
    i32 %226 = phi [^if.else29, i32 %92] [^if.else38, i32 %156];
    i32 %227 = add i32 %226, i32 4;
    store i32* %0 with i32 %227;
    ubr ^b;
  ^if.else33:
    i32 %228 = add i32 %122, i32 3;
    i32* %229 = getelementptr &(i32* %buf)[i32 %228];
    i32 %230 = load i32* %229;
    i1 %231 = icmp neq i32 %230, i32 115;
    cbr i1 %231(prob = 0.5), ^b, ^if.else37;
  ^if.else34:
    i32 %232 = add i32 %156, i32 2;
    i32* %233 = getelementptr &(i32* %buf)[i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = icmp neq i32 %234, i32 108;
    cbr i1 %235(prob = 0.5), ^b, ^if.else38;
  ^if.then22:
    i32 %236 = phi [^indirect6, i32 %212] [^if.else32, i32 %219] [^if.else35, i32 %219] [^if.else40, i32 %219];
    i32 %237 = add i32 %236, i32 1;
    store i32* %0 with i32 %237;
    ubr ^while.body5;
  ^indirect7:
    i32 %238 = load i32* %0;
    ubr ^if.then25;
  ^if.then23:
    i32* %239 = getelementptr &(i32* %buf)[i32 %213];
    i32 %240 = load i32* %239;
    i1 %241 = icmp eq i32 %240, i32 43;
    cbr i1 %241(prob = 0.5), ^if.then24, ^indirect8;
  ^while.body10:
    i32 %242 = phi [^while.body8, i32 %211] [^if.then29, i32 %308];
    i1 %243 = icmp sle i32 %len, i32 %242;
    cbr i1 %243(prob = 0.5), ^while.body11, ^b23;
  ^b18:
    i32 %244 = phi [^if.then21, i32 %213] [^if.then24, i32 %266] [^indirect8, i32 %267];
    i1 %245 = icmp sgt i32 %len, i32 %244;
    cbr i1 %245(prob = 0.5), ^if.then26, ^indirect9;
  ^b19:
    i32 %246 = load i32* %0;
    i1 %247 = icmp sle i32 %len, i32 %246;
    cbr i1 %247(prob = 0.5), ^b, ^b24;
  ^b20:
    i32* %248 = getelementptr &(i32* %buf)[i32 %215];
    i32 %249 = load i32* %248;
    i1 %250 = icmp neq i32 %249, i32 58;
    cbr i1 %250(prob = 0.5), ^b, ^b22;
  ^b21:
    i32* %251 = getelementptr &(i32* %buf)[i32 %217];
    i32 %252 = load i32* %251;
    i1 %253 = icmp eq i32 %252, i32 32;
    cbr i1 %253(prob = 0.5), ^indirect10, ^if.else39;
  ^if.else35:
    i1 %254 = icmp eq i32 %221, i32 10;
    cbr i1 %254(prob = 0.5), ^if.then22, ^if.else40;
  ^if.else36:
    i32 %255 = load i32* %0;
    i32* %256 = getelementptr &(i32* %buf)[i32 %255];
    i32 %257 = load i32* %256;
    i1 %258 = icmp eq i32 %257, i32 9;
    cbr i1 %258(prob = 0.5), ^if.then25, ^if.else41;
  ^if.else37:
    i32* %259 = getelementptr &(i32* %buf)[i32 %123];
    i32 %260 = load i32* %259;
    i1 %261 = icmp neq i32 %260, i32 101;
    cbr i1 %261(prob = 0.5), ^b, ^b25;
  ^if.else38:
    i32* %262 = getelementptr &(i32* %buf)[i32 %157];
    i32 %263 = load i32* %262;
    i1 %264 = icmp neq i32 %263, i32 108;
    cbr i1 %264(prob = 0.5), ^b, ^b17;
  ^if.then24:
    i32 %265 = load i32* %0;
    i32 %266 = add i32 %265, i32 1;
    store i32* %0 with i32 %266;
    ubr ^b18;
  ^indirect8:
    i32 %267 = load i32* %0;
    ubr ^b18;
  ^if.then25:
    i32 %268 = phi [^indirect7, i32 %238] [^if.else36, i32 %255] [^if.else41, i32 %255] [^if.else44, i32 %255];
    i32 %269 = add i32 %268, i32 1;
    store i32* %0 with i32 %269;
    ubr ^while.body7;
  ^indirect9:
    i32 %270 = load i32* %0;
    ubr ^while.header2;
  ^while.body11:
    i32 %271 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %272 = icmp neq i32 %271, i32 0;
    cbr i1 %272(prob = 0.5), ^entry2, ^b;
  ^indirect10:
    i32 %273 = load i32* %0;
    ubr ^if.then28;
  ^if.then26:
    i32 %274 = load i32* %0;
    i32* %275 = getelementptr &(i32* %buf)[i32 %274];
    i32 %276 = load i32* %275;
    i1 %277 = icmp eq i32 %276, i32 45;
    cbr i1 %277(prob = 0.5), ^if.then27, ^while.header2;
  ^b22:
    i32 %278 = add i32 %215, i32 1;
    store i32* %0 with i32 %278;
    ubr ^while.body12;
  ^b23:
    i32* %279 = getelementptr &(i32* %buf)[i32 %242];
    i32 %280 = load i32* %279;
    i1 %281 = icmp eq i32 %280, i32 32;
    cbr i1 %281(prob = 0.5), ^indirect11, ^if.else42;
  ^b24:
    i32* %282 = getelementptr &(i32* %buf)[i32 %246];
    i32 %283 = load i32* %282;
    i1 %284 = icmp neq i32 %283, i32 93;
    cbr i1 %284(prob = 0.5), ^b, ^if.then12;
  ^if.else39:
    i32 %285 = load i32* %0;
    i32* %286 = getelementptr &(i32* %buf)[i32 %285];
    i32 %287 = load i32* %286;
    i1 %288 = icmp eq i32 %287, i32 9;
    cbr i1 %288(prob = 0.5), ^if.then28, ^if.else43;
  ^if.else40:
    i1 %289 = icmp eq i32 %221, i32 13;
    cbr i1 %289(prob = 0.5), ^if.then22, ^b13;
  ^if.else41:
    i1 %290 = icmp eq i32 %257, i32 10;
    cbr i1 %290(prob = 0.5), ^if.then25, ^if.else44;
  ^b25:
    i32 %291 = add i32 %122, i32 5;
    store i32* %0 with i32 %291;
    ubr ^b;
  ^if.then27:
    i32 %292 = phi [^if.then26, i32 %274] [^while.body13, i32 %309];
    i32 %293 = add i32 %292, i32 1;
    store i32* %0 with i32 %293;
    ubr ^while.header2;
  ^indirect11:
    i32 %294 = load i32* %0;
    ubr ^if.then29;
  ^if.then28:
    i32 %295 = phi [^indirect10, i32 %273] [^if.else39, i32 %285] [^if.else43, i32 %285] [^if.else46, i32 %285];
    i32 %296 = add i32 %295, i32 1;
    store i32* %0 with i32 %296;
    ubr ^while.body9;
  ^while.header2:
    i32 %297 = phi [^indirect9, i32 %270] [^if.then26, i32 %274] [^if.then27, i32 %293];
    i1 %298 = icmp sgt i32 %len, i32 %297;
    cbr i1 %298(prob = 0.984615), ^while.body13, ^b;
  ^if.else42:
    i32 %299 = load i32* %0;
    i32* %300 = getelementptr &(i32* %buf)[i32 %299];
    i32 %301 = load i32* %300;
    i1 %302 = icmp eq i32 %301, i32 9;
    cbr i1 %302(prob = 0.5), ^if.then29, ^if.else45;
  ^while.body12:
    i32 %303 = phi [^b22, i32 %278] [^if.then30, i32 %329];
    i1 %304 = icmp sle i32 %len, i32 %303;
    cbr i1 %304(prob = 0.5), ^b26, ^b27;
  ^if.else43:
    i1 %305 = icmp eq i32 %287, i32 10;
    cbr i1 %305(prob = 0.5), ^if.then28, ^if.else46;
  ^if.else44:
    i1 %306 = icmp eq i32 %257, i32 13;
    cbr i1 %306(prob = 0.5), ^if.then25, ^b15;
  ^if.then29:
    i32 %307 = phi [^indirect11, i32 %294] [^if.else42, i32 %299] [^if.else45, i32 %299] [^if.else47, i32 %299];
    i32 %308 = add i32 %307, i32 1;
    store i32* %0 with i32 %308;
    ubr ^while.body10;
  ^while.body13:
    i32 %309 = load i32* %0;
    i32* %310 = getelementptr &(i32* %buf)[i32 %309];
    i32 %311 = load i32* %310;
    i32 %312 = add i32 %311, i32 -48;
    i1 %313 = icmp uge i32 %312, i32 10;
    cbr i1 %313(prob = 0.5), ^b, ^if.then27;
  ^if.else45:
    i1 %314 = icmp eq i32 %301, i32 10;
    cbr i1 %314(prob = 0.5), ^if.then29, ^if.else47;
  ^b26:
    i32 %315 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %316 = icmp eq i32 %315, i32 0;
    cbr i1 %316(prob = 0.5), ^b, ^entry4;
  ^b27:
    i32* %317 = getelementptr &(i32* %buf)[i32 %303];
    i32 %318 = load i32* %317;
    i1 %319 = icmp eq i32 %318, i32 32;
    cbr i1 %319(prob = 0.5), ^indirect12, ^if.else48;
  ^if.else46:
    i1 %320 = icmp eq i32 %287, i32 13;
    cbr i1 %320(prob = 0.5), ^if.then28, ^b19;
  ^indirect12:
    i32 %321 = load i32* %0;
    ubr ^if.then30;
  ^entry4:
    i32 %322 = load i32* %0;
    ubr ^while.body14;
  ^if.else47:
    i1 %323 = icmp eq i32 %301, i32 13;
    cbr i1 %323(prob = 0.5), ^if.then29, ^while.body11;
  ^if.else48:
    i32 %324 = load i32* %0;
    i32* %325 = getelementptr &(i32* %buf)[i32 %324];
    i32 %326 = load i32* %325;
    i1 %327 = icmp eq i32 %326, i32 9;
    cbr i1 %327(prob = 0.5), ^if.then30, ^if.else49;
  ^if.then30:
    i32 %328 = phi [^indirect12, i32 %321] [^if.else48, i32 %324] [^if.else49, i32 %324] [^if.else50, i32 %324];
    i32 %329 = add i32 %328, i32 1;
    store i32* %0 with i32 %329;
    ubr ^while.body12;
  ^while.body14:
    i32 %330 = phi [^entry4, i32 %322] [^if.then31, i32 %350];
    i1 %331 = icmp sle i32 %len, i32 %330;
    cbr i1 %331(prob = 0.5), ^b28, ^b29;
  ^if.else49:
    i1 %332 = icmp eq i32 %326, i32 10;
    cbr i1 %332(prob = 0.5), ^if.then30, ^if.else50;
  ^b28:
    i32 %333 = load i32* %0;
    i32* %334 = getelementptr &(i32* %buf)[i32 %333];
    i32 %335 = load i32* %334;
    i1 %336 = icmp eq i32 %335, i32 44;
    cbr i1 %336(prob = 0.984615), ^while.body15, ^while.body16;
  ^b29:
    i32* %337 = getelementptr &(i32* %buf)[i32 %330];
    i32 %338 = load i32* %337;
    i1 %339 = icmp eq i32 %338, i32 32;
    cbr i1 %339(prob = 0.5), ^indirect13, ^if.else51;
  ^if.else50:
    i1 %340 = icmp eq i32 %326, i32 13;
    cbr i1 %340(prob = 0.5), ^if.then30, ^b26;
  ^while.body15:
    i32 %341 = add i32 %333, i32 1;
    store i32* %0 with i32 %341;
    ubr ^while.body17;
  ^indirect13:
    i32 %342 = load i32* %0;
    ubr ^if.then31;
  ^while.body16:
    i32 %343 = phi [^b28, i32 %333] [^if.then32, i32 %376];
    i1 %344 = icmp sle i32 %len, i32 %343;
    cbr i1 %344(prob = 0.5), ^b30, ^b31;
  ^if.else51:
    i32 %345 = load i32* %0;
    i32* %346 = getelementptr &(i32* %buf)[i32 %345];
    i32 %347 = load i32* %346;
    i1 %348 = icmp eq i32 %347, i32 9;
    cbr i1 %348(prob = 0.5), ^if.then31, ^if.else52;
  ^if.then31:
    i32 %349 = phi [^indirect13, i32 %342] [^if.else51, i32 %345] [^if.else52, i32 %345] [^if.else55, i32 %345];
    i32 %350 = add i32 %349, i32 1;
    store i32* %0 with i32 %350;
    ubr ^while.body14;
  ^while.body17:
    i32 %351 = phi [^while.body15, i32 %341] [^if.then33, i32 %383];
    i1 %352 = icmp sle i32 %len, i32 %351;
    cbr i1 %352(prob = 0.5), ^while.body18, ^b32;
  ^b30:
    i32 %353 = load i32* %0;
    i1 %354 = icmp sle i32 %len, i32 %353;
    cbr i1 %354(prob = 0.5), ^b, ^if.else53;
  ^b31:
    i32* %355 = getelementptr &(i32* %buf)[i32 %343];
    i32 %356 = load i32* %355;
    i1 %357 = icmp eq i32 %356, i32 32;
    cbr i1 %357(prob = 0.5), ^indirect14, ^if.else54;
  ^if.else52:
    i1 %358 = icmp eq i32 %347, i32 10;
    cbr i1 %358(prob = 0.5), ^if.then31, ^if.else55;
  ^while.body18:
    i32 %359 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 2, i32* %buf, i32 %len, i32* %0);
    i1 %360 = icmp eq i32 %359, i32 0;
    cbr i1 %360(prob = 0.5), ^b, ^entry5;
  ^indirect14:
    i32 %361 = load i32* %0;
    ubr ^if.then32;
  ^b32:
    i32* %362 = getelementptr &(i32* %buf)[i32 %351];
    i32 %363 = load i32* %362;
    i1 %364 = icmp eq i32 %363, i32 32;
    cbr i1 %364(prob = 0.5), ^indirect15, ^if.else56;
  ^if.else53:
    i32* %365 = getelementptr &(i32* %buf)[i32 %353];
    i32 %366 = load i32* %365;
    i1 %367 = icmp neq i32 %366, i32 125;
    cbr i1 %367(prob = 0.5), ^b, ^if.then12;
  ^if.else54:
    i32 %368 = load i32* %0;
    i32* %369 = getelementptr &(i32* %buf)[i32 %368];
    i32 %370 = load i32* %369;
    i1 %371 = icmp eq i32 %370, i32 9;
    cbr i1 %371(prob = 0.5), ^if.then32, ^if.else57;
  ^if.else55:
    i1 %372 = icmp eq i32 %347, i32 13;
    cbr i1 %372(prob = 0.5), ^if.then31, ^b28;
  ^indirect15:
    i32 %373 = load i32* %0;
    ubr ^if.then33;
  ^entry5:
    i32 %374 = load i32* %0;
    ubr ^while.body19;
  ^if.then32:
    i32 %375 = phi [^indirect14, i32 %361] [^if.else54, i32 %368] [^if.else57, i32 %368] [^if.else59, i32 %368];
    i32 %376 = add i32 %375, i32 1;
    store i32* %0 with i32 %376;
    ubr ^while.body16;
  ^if.else56:
    i32 %377 = load i32* %0;
    i32* %378 = getelementptr &(i32* %buf)[i32 %377];
    i32 %379 = load i32* %378;
    i1 %380 = icmp eq i32 %379, i32 9;
    cbr i1 %380(prob = 0.5), ^if.then33, ^if.else58;
  ^if.else57:
    i1 %381 = icmp eq i32 %370, i32 10;
    cbr i1 %381(prob = 0.5), ^if.then32, ^if.else59;
  ^if.then33:
    i32 %382 = phi [^indirect15, i32 %373] [^if.else56, i32 %377] [^if.else58, i32 %377] [^if.else60, i32 %377];
    i32 %383 = add i32 %382, i32 1;
    store i32* %0 with i32 %383;
    ubr ^while.body17;
  ^while.body19:
    i32 %384 = phi [^entry5, i32 %374] [^if.then34, i32 %403];
    i1 %385 = icmp sle i32 %len, i32 %384;
    cbr i1 %385(prob = 0.5), ^b33, ^b34;
  ^if.else58:
    i1 %386 = icmp eq i32 %379, i32 10;
    cbr i1 %386(prob = 0.5), ^if.then33, ^if.else60;
  ^if.else59:
    i1 %387 = icmp eq i32 %370, i32 13;
    cbr i1 %387(prob = 0.5), ^if.then32, ^b30;
  ^b33:
    i32 %388 = load i32* %0;
    i1 %389 = icmp sle i32 %len, i32 %388;
    cbr i1 %389(prob = 0.5), ^b, ^b35;
  ^b34:
    i32* %390 = getelementptr &(i32* %buf)[i32 %384];
    i32 %391 = load i32* %390;
    i1 %392 = icmp eq i32 %391, i32 32;
    cbr i1 %392(prob = 0.5), ^indirect16, ^if.else61;
  ^if.else60:
    i1 %393 = icmp eq i32 %379, i32 13;
    cbr i1 %393(prob = 0.5), ^if.then33, ^while.body18;
  ^indirect16:
    i32 %394 = load i32* %0;
    ubr ^if.then34;
  ^b35:
    i32* %395 = getelementptr &(i32* %buf)[i32 %388];
    i32 %396 = load i32* %395;
    i1 %397 = icmp neq i32 %396, i32 58;
    cbr i1 %397(prob = 0.5), ^b, ^b36;
  ^if.else61:
    i32 %398 = load i32* %0;
    i32* %399 = getelementptr &(i32* %buf)[i32 %398];
    i32 %400 = load i32* %399;
    i1 %401 = icmp eq i32 %400, i32 9;
    cbr i1 %401(prob = 0.5), ^if.then34, ^if.else62;
  ^if.then34:
    i32 %402 = phi [^indirect16, i32 %394] [^if.else61, i32 %398] [^if.else62, i32 %398] [^if.else63, i32 %398];
    i32 %403 = add i32 %402, i32 1;
    store i32* %0 with i32 %403;
    ubr ^while.body19;
  ^b36:
    i32 %404 = add i32 %388, i32 1;
    store i32* %0 with i32 %404;
    ubr ^while.body20;
  ^if.else62:
    i1 %405 = icmp eq i32 %400, i32 10;
    cbr i1 %405(prob = 0.5), ^if.then34, ^if.else63;
  ^while.body20:
    i32 %406 = phi [^b36, i32 %404] [^if.then35, i32 %420];
    i1 %407 = icmp sle i32 %len, i32 %406;
    cbr i1 %407(prob = 0.5), ^b37, ^b38;
  ^if.else63:
    i1 %408 = icmp eq i32 %400, i32 13;
    cbr i1 %408(prob = 0.5), ^if.then34, ^b33;
  ^b37:
    i32 %409 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %buf, i32 %len, i32* %0);
    i1 %410 = icmp neq i32 %409, i32 0;
    cbr i1 %410(prob = 0.5), ^entry4, ^b;
  ^b38:
    i32* %411 = getelementptr &(i32* %buf)[i32 %406];
    i32 %412 = load i32* %411;
    i1 %413 = icmp eq i32 %412, i32 32;
    cbr i1 %413(prob = 0.5), ^indirect17, ^if.else64;
  ^indirect17:
    i32 %414 = load i32* %0;
    ubr ^if.then35;
  ^if.else64:
    i32 %415 = load i32* %0;
    i32* %416 = getelementptr &(i32* %buf)[i32 %415];
    i32 %417 = load i32* %416;
    i1 %418 = icmp eq i32 %417, i32 9;
    cbr i1 %418(prob = 0.5), ^if.then35, ^if.else65;
  ^if.then35:
    i32 %419 = phi [^indirect17, i32 %414] [^if.else64, i32 %415] [^if.else65, i32 %415] [^if.else66, i32 %415];
    i32 %420 = add i32 %419, i32 1;
    store i32* %0 with i32 %420;
    ubr ^while.body20;
  ^if.else65:
    i1 %421 = icmp eq i32 %417, i32 10;
    cbr i1 %421(prob = 0.5), ^if.then35, ^if.else66;
  ^if.else66:
    i1 %422 = icmp eq i32 %417, i32 13;
    cbr i1 %422(prob = 0.5), ^if.then35, ^b37;
}
internal [50000000 * i32]* @buffer, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %pos = alloc i32, align 4;
    store i32* %pos with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 35;
    [50000000 * i32]* %2 = ptrcast [50000000 * i32]* @buffer to [50000000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %12];
    i32 %4 = phi [^entry, i32 0] [^indirect, i32 %11];
    i32* %5 = getelementptr &([50000000 * i32]* %2)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32* %8 = getelementptr &([50000000 * i32]* %2)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 35;
    i32 %11 = add i32 %7, i32 1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = load i32* %pos;
    ubr ^b;
  ^while.body1:
    i32 %13 = phi [^b, i32 %3] [^if.then, i32 %28];
    i1 %14 = icmp sle i32 %4, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %15 = call (i32, i32*, i32, i32*) -> i32 @detect_item(i32 0, i32* %5, i32 %4, i32* %pos);
    i32 %16 = load i32* %pos;
    ubr ^while.body2;
  ^b2:
    i32* %17 = getelementptr &(i32* %5)[i32 %13];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 32;
    cbr i1 %19(prob = 0.5), ^indirect1, ^if.else;
  ^indirect1:
    i32 %20 = load i32* %pos;
    ubr ^if.then;
  ^while.body2:
    i32 %21 = phi [^b1, i32 %16] [^if.then2, i32 %41];
    i1 %22 = icmp sle i32 %4, i32 %21;
    cbr i1 %22(prob = 0.5), ^b3, ^b4;
  ^if.else:
    i32 %23 = load i32* %pos;
    i32* %24 = getelementptr &(i32* %5)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = icmp eq i32 %25, i32 9;
    cbr i1 %26(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %27 = phi [^indirect1, i32 %20] [^if.else, i32 %23] [^if.else1, i32 %23] [^if.else4, i32 %23];
    i32 %28 = add i32 %27, i32 1;
    store i32* %pos with i32 %28;
    ubr ^while.body1;
  ^b3:
    i1 %29 = icmp neq i32 %15, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else2;
  ^b4:
    i32* %30 = getelementptr &(i32* %5)[i32 %21];
    i32 %31 = load i32* %30;
    i1 %32 = icmp eq i32 %31, i32 32;
    cbr i1 %32(prob = 0.5), ^indirect2, ^if.else3;
  ^if.else1:
    i1 %33 = icmp eq i32 %25, i32 10;
    cbr i1 %33(prob = 0.5), ^if.then, ^if.else4;
  ^if.then1:
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^indirect2:
    i32 %34 = load i32* %pos;
    ubr ^if.then2;
  ^if.else2:
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.else3:
    i32 %35 = load i32* %pos;
    i32* %36 = getelementptr &(i32* %5)[i32 %35];
    i32 %37 = load i32* %36;
    i1 %38 = icmp eq i32 %37, i32 9;
    cbr i1 %38(prob = 0.5), ^if.then2, ^if.else5;
  ^if.else4:
    i1 %39 = icmp eq i32 %25, i32 13;
    cbr i1 %39(prob = 0.5), ^if.then, ^b1;
  ^if.then2:
    i32 %40 = phi [^indirect2, i32 %34] [^if.else3, i32 %35] [^if.else5, i32 %35] [^if.else6, i32 %35];
    i32 %41 = add i32 %40, i32 1;
    store i32* %pos with i32 %41;
    ubr ^while.body2;
  ^if.else5:
    i1 %42 = icmp eq i32 %37, i32 10;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else6;
  ^b5:
    i32 %43 = phi [^if.then1, i32 0] [^if.else2, i32 1];
    ret i32 %43;
  ^if.else6:
    i1 %44 = icmp eq i32 %37, i32 13;
    cbr i1 %44(prob = 0.5), ^if.then2, ^b3;
}
