internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32 %x, i32 %tar) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %x];
    store i32* %0 with i32 1;
    i1 %1 = scmp eq i32 %x, i32 %tar;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
^b:
    i32* %2 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    ubr ^while.header;
^b1:
    i32 %4 = phi [^entry, i32 1] [^while.header, i32 0] [^b3, i32 1];
    ret i32 %4;
^while.header:
    i32 %5 = phi [^b, i32 %3] [^b2, i32 %13];
    i1 %6 = scmp neq i32 %5, i32 -1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32* %7 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %5];
    i32 %8 = load i32* %7;
    i32* %9 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %8];
    i32 %10 = load i32* %9;
    i1 %11 = scmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b3, ^b2;
^b2:
    i32* %12 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %5];
    i32 %13 = load i32* %12;
    ubr ^while.header;
^b3:
    i32 %14 = call (i32, i32) -> i32 @same(i32 %8, i32 %tar);
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b1, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    i32 %7 = select i1 %6 ? i32 1 : i32 %1;
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp le i32 %10, i32 57;
    ubr ^b3;
^b3:
    i1 %13 = phi [^while.header1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %14 = mul i32 %9, i32 10;
    i32 %15 = add i32 %10, i32 -48;
    i32 %16 = add i32 %15, i32 %14;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %19 = neg i32 %9;
    ubr ^b5;
^b5:
    i32 %20 = phi [^b4, i32 %9] [^if.then, i32 %19];
    i32 %21 = call () -> i32 @getch();
    i1 %22 = scmp gt i32 %20, i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %23 = phi [^b5, i32 0] [^while.body2, i32 %29];
    i32 %24 = phi [^b5, i32 %21] [^while.body2, i32 %30];
    i1 %25 = scmp lt i32 %24, i32 48;
    cbr i1 %25(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %26 = scmp gt i32 %24, i32 57;
    ubr ^b7;
^b7:
    i1 %27 = phi [^while.header2, i1 true] [^b6, i1 %26];
    cbr i1 %27(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %28 = scmp eq i32 %24, i32 45;
    i32 %29 = select i1 %28 ? i32 1 : i32 %23;
    i32 %30 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %31 = phi [^b7, i32 0] [^while.body3, i32 %38];
    i32 %32 = phi [^b7, i32 %24] [^while.body3, i32 %39];
    i1 %33 = scmp gt i32 %32, i32 47;
    cbr i1 %33(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %34 = scmp le i32 %32, i32 57;
    ubr ^b9;
^b9:
    i1 %35 = phi [^while.header3, i1 false] [^b8, i1 %34];
    cbr i1 %35(prob = 0.97), ^while.body3, ^b10;
^while.body3:
    i32 %36 = mul i32 %31, i32 10;
    i32 %37 = add i32 %32, i32 -48;
    i32 %38 = add i32 %37, i32 %36;
    i32 %39 = call () -> i32 @getch();
    ubr ^while.header3;
^b10:
    i1 %40 = scmp neq i32 %23, i32 0;
    cbr i1 %40(prob = 0.5), ^if.then1, ^b11;
^if.then1:
    i32 %41 = neg i32 %31;
    ubr ^b11;
^b11:
    i32 %42 = phi [^b10, i32 %31] [^if.then1, i32 %41];
    ubr ^while.body4;
^while.body4:
    i32 %43 = phi [^b11, i32 0] [^while.body4, i32 %60];
    i32* %44 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %43];
    store i32* %44 with i32 -1;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 -1;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 -1;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 -1;
    i32* %48 = getelementptr &(i32* %44)[i64 4];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %44)[i64 5];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %44)[i64 6];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %44)[i64 7];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %44)[i64 8];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %44)[i64 9];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %44)[i64 10];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %44)[i64 11];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %44)[i64 12];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %44)[i64 13];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %44)[i64 14];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %44)[i64 15];
    store i32* %59 with i32 -1;
    i32 %60 = add i32 %43, i32 16;
    i1 %61 = scmp lt i32 %60, i32 992;
    cbr i1 %61(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i32* %62 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %60];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %62)[i64 1];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %62)[i64 2];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %62)[i64 3];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %62)[i64 4];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %62)[i64 5];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %62)[i64 6];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %62)[i64 7];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %62)[i64 8];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %62)[i64 9];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %62)[i64 10];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %62)[i64 11];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %62)[i64 12];
    store i32* %74 with i32 -1;
    ubr ^while.header4;
^while.header4:
    i32 %75 = phi [^while.body5, i32 %42] [^b40, i32 %179];
    i32 %76 = phi [^while.body5, i32 0] [^b40, i32 %178];
    i1 %77 = scmp neq i32 %75, i32 0;
    cbr i1 %77(prob = 0.97), ^while.body6, ^b12;
^while.body6:
    i32 %78 = call () -> i32 @getch();
    i1 %79 = scmp neq i32 %78, i32 81;
    cbr i1 %79(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %80 = scmp neq i32 %78, i32 85;
    ubr ^b14;
^b14:
    i1 %81 = phi [^while.body6, i1 false] [^b13, i1 %80];
    cbr i1 %81(prob = 0.97), ^while.body6, ^b15;
^b15:
    i1 %82 = scmp eq i32 %78, i32 81;
    cbr i1 %82(prob = 0.5), ^entry1, ^entry2;
^entry1:
    i32 %83 = call () -> i32 @getch();
    ubr ^while.header5;
^entry2:
    i32 %84 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header5:
    i32 %85 = phi [^entry1, i32 0] [^while.body7, i32 %96];
    i32 %86 = phi [^entry1, i32 %83] [^while.body7, i32 %97];
    i1 %87 = scmp lt i32 %86, i32 48;
    cbr i1 %87(prob = 0.5), ^b17, ^b16;
^while.header6:
    i32 %88 = phi [^entry2, i32 0] [^while.body8, i32 %99];
    i32 %89 = phi [^entry2, i32 %84] [^while.body8, i32 %100];
    i1 %90 = scmp lt i32 %89, i32 48;
    cbr i1 %90(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %91 = scmp gt i32 %86, i32 57;
    ubr ^b17;
^b17:
    i1 %92 = phi [^while.header5, i1 true] [^b16, i1 %91];
    cbr i1 %92(prob = 0.97), ^while.body7, ^while.header7;
^b18:
    i1 %93 = scmp gt i32 %89, i32 57;
    ubr ^b19;
^b19:
    i1 %94 = phi [^while.header6, i1 true] [^b18, i1 %93];
    cbr i1 %94(prob = 0.97), ^while.body8, ^while.header8;
^while.body7:
    i1 %95 = scmp eq i32 %86, i32 45;
    i32 %96 = select i1 %95 ? i32 1 : i32 %85;
    i32 %97 = call () -> i32 @getch();
    ubr ^while.header5;
^while.body8:
    i1 %98 = scmp eq i32 %89, i32 45;
    i32 %99 = select i1 %98 ? i32 1 : i32 %88;
    i32 %100 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header7:
    i32 %101 = phi [^b17, i32 0] [^while.body9, i32 %113];
    i32 %102 = phi [^b17, i32 %86] [^while.body9, i32 %114];
    i1 %103 = scmp gt i32 %102, i32 47;
    cbr i1 %103(prob = 0.5), ^b20, ^b22;
^while.header8:
    i32 %104 = phi [^b19, i32 0] [^while.body10, i32 %117];
    i32 %105 = phi [^b19, i32 %89] [^while.body10, i32 %118];
    i1 %106 = scmp gt i32 %105, i32 47;
    cbr i1 %106(prob = 0.5), ^b21, ^b23;
^b20:
    i1 %107 = scmp le i32 %102, i32 57;
    ubr ^b22;
^b21:
    i1 %108 = scmp le i32 %105, i32 57;
    ubr ^b23;
^b22:
    i1 %109 = phi [^while.header7, i1 false] [^b20, i1 %107];
    cbr i1 %109(prob = 0.97), ^while.body9, ^b24;
^b23:
    i1 %110 = phi [^while.header8, i1 false] [^b21, i1 %108];
    cbr i1 %110(prob = 0.97), ^while.body10, ^b25;
^while.body9:
    i32 %111 = mul i32 %101, i32 10;
    i32 %112 = add i32 %102, i32 -48;
    i32 %113 = add i32 %112, i32 %111;
    i32 %114 = call () -> i32 @getch();
    ubr ^while.header7;
^while.body10:
    i32 %115 = mul i32 %104, i32 10;
    i32 %116 = add i32 %105, i32 -48;
    i32 %117 = add i32 %116, i32 %115;
    i32 %118 = call () -> i32 @getch();
    ubr ^while.header8;
^b24:
    i1 %119 = scmp neq i32 %85, i32 0;
    cbr i1 %119(prob = 0.5), ^if.then2, ^b26;
^b25:
    i1 %120 = scmp neq i32 %88, i32 0;
    cbr i1 %120(prob = 0.5), ^if.then3, ^b27;
^if.then2:
    i32 %121 = neg i32 %101;
    ubr ^b26;
^b26:
    i32 %122 = phi [^b24, i32 %101] [^if.then2, i32 %121];
    i32 %123 = call () -> i32 @getch();
    ubr ^while.header9;
^if.then3:
    i32 %124 = neg i32 %104;
    ubr ^b27;
^b27:
    i32 %125 = phi [^b25, i32 %104] [^if.then3, i32 %124];
    i32 %126 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header9:
    i32 %127 = phi [^b26, i32 0] [^while.body11, i32 %138];
    i32 %128 = phi [^b26, i32 %123] [^while.body11, i32 %139];
    i1 %129 = scmp lt i32 %128, i32 48;
    cbr i1 %129(prob = 0.5), ^b29, ^b28;
^while.header10:
    i32 %130 = phi [^b27, i32 0] [^while.body12, i32 %141];
    i32 %131 = phi [^b27, i32 %126] [^while.body12, i32 %142];
    i1 %132 = scmp lt i32 %131, i32 48;
    cbr i1 %132(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %133 = scmp gt i32 %128, i32 57;
    ubr ^b29;
^b29:
    i1 %134 = phi [^while.header9, i1 true] [^b28, i1 %133];
    cbr i1 %134(prob = 0.97), ^while.body11, ^while.header11;
^b30:
    i1 %135 = scmp gt i32 %131, i32 57;
    ubr ^b31;
^b31:
    i1 %136 = phi [^while.header10, i1 true] [^b30, i1 %135];
    cbr i1 %136(prob = 0.97), ^while.body12, ^while.header12;
^while.body11:
    i1 %137 = scmp eq i32 %128, i32 45;
    i32 %138 = select i1 %137 ? i32 1 : i32 %127;
    i32 %139 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body12:
    i1 %140 = scmp eq i32 %131, i32 45;
    i32 %141 = select i1 %140 ? i32 1 : i32 %130;
    i32 %142 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header11:
    i32 %143 = phi [^b29, i32 0] [^while.body13, i32 %155];
    i32 %144 = phi [^b29, i32 %128] [^while.body13, i32 %156];
    i1 %145 = scmp gt i32 %144, i32 47;
    cbr i1 %145(prob = 0.5), ^b32, ^b34;
^while.header12:
    i32 %146 = phi [^b31, i32 0] [^while.body14, i32 %159];
    i32 %147 = phi [^b31, i32 %131] [^while.body14, i32 %160];
    i1 %148 = scmp gt i32 %147, i32 47;
    cbr i1 %148(prob = 0.5), ^b33, ^b35;
^b32:
    i1 %149 = scmp le i32 %144, i32 57;
    ubr ^b34;
^b33:
    i1 %150 = scmp le i32 %147, i32 57;
    ubr ^b35;
^b34:
    i1 %151 = phi [^while.header11, i1 false] [^b32, i1 %149];
    cbr i1 %151(prob = 0.97), ^while.body13, ^b36;
^b35:
    i1 %152 = phi [^while.header12, i1 false] [^b33, i1 %150];
    cbr i1 %152(prob = 0.97), ^while.body14, ^b37;
^while.body13:
    i32 %153 = mul i32 %143, i32 10;
    i32 %154 = add i32 %144, i32 -48;
    i32 %155 = add i32 %154, i32 %153;
    i32 %156 = call () -> i32 @getch();
    ubr ^while.header11;
^while.body14:
    i32 %157 = mul i32 %146, i32 10;
    i32 %158 = add i32 %147, i32 -48;
    i32 %159 = add i32 %158, i32 %157;
    i32 %160 = call () -> i32 @getch();
    ubr ^while.header12;
^b36:
    i1 %161 = scmp neq i32 %127, i32 0;
    cbr i1 %161(prob = 0.5), ^if.then4, ^b39;
^b37:
    i1 %162 = scmp neq i32 %130, i32 0;
    cbr i1 %162(prob = 0.5), ^if.then5, ^b38;
^if.then4:
    i32 %163 = neg i32 %143;
    ubr ^b39;
^if.then5:
    i32 %164 = neg i32 %146;
    ubr ^b38;
^b38:
    i32 %165 = phi [^b37, i32 %146] [^if.then5, i32 %164];
    i32* %166 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %76];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %76];
    i32* %168 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %125];
    i32 %169 = load i32* %168;
    store i32* %167 with i32 %169;
    store i32* %168 with i32 %76;
    i32 %170 = add i32 %76, i32 1;
    i32* %171 = getelementptr &(i32* %166)[i64 1];
    store i32* %171 with i32 %125;
    i32* %172 = getelementptr &(i32* %167)[i64 1];
    i32* %173 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %165];
    i32 %174 = load i32* %173;
    store i32* %172 with i32 %174;
    store i32* %173 with i32 %170;
    i32 %175 = add i32 %76, i32 2;
    ubr ^b40;
^b39:
    i32 %176 = phi [^b36, i32 %143] [^if.then4, i32 %163];
    cbr i1 %22(prob = 0.97), ^while.body15, ^if.then6;
^if.then6:
    i32 %177 = call (i32, i32) -> i32 @same(i32 %122, i32 %176);
    call (i32) -> void @putint(i32 %177);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^b40:
    i32 %178 = phi [^b38, i32 %175] [^if.then6, i32 %76];
    i32 %179 = add i32 %75, i32 -1;
    ubr ^while.header4;
^while.body15:
    i32 %180 = phi [^b39, i32 1] [^while.body15, i32 %182];
    i32* %181 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %180];
    store i32* %181 with i32 0;
    i32 %182 = add i32 %180, i32 1;
    i1 %183 = scmp le i32 %182, i32 %20;
    cbr i1 %183(prob = 0.97), ^while.body15, ^if.then6;
}
