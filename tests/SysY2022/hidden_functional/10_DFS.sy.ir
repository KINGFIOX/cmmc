internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to { Flexible };
internal [5005 * i32]* @next { Flexible };
internal [1005 * i32]* @head { Flexible };
internal [1005 * i32]* @vis { Flexible };
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = icmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^entry1, i32 1] [^b5, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = icmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^entry1, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^entry1:
    i1 %18 = icmp eq i32 %tar, i32 %12;
    store i32* %13 with i32 1;
    cbr i1 %18(prob = 0.5), ^b1, ^b3;
  ^b3:
    i32* %19 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    ubr ^while.header1;
  ^while.header1:
    i32 %21 = phi [^b3, i32 %20] [^b4, i32 %29];
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b2;
  ^while.body1:
    i32* %23 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^b5, ^b4;
  ^b4:
    i32* %28 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %21];
    i32 %29 = load i32* %28;
    ubr ^while.header1;
  ^b5:
    i32 %30 = call (i32, i32) -> i32 @same(i32 %24, i32 %tar);
    i1 %31 = icmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b1, ^b4;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    i1 %14 = icmp eq i32 %8, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %9;
    cbr i1 %13(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %17 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32 %18 = add i32 %16, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %20 = phi [^while.header, i32 %16] [^while.body1, i32 %22];
    i32 %21 = phi [^while.header, i32 0] [^while.body1, i32 %27];
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    i32 %25 = mul i32 %21, i32 10;
    i32 %26 = add i32 %25, i32 -48;
    i32 %27 = add i32 %20, i32 %26;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %28 = phi [^while.header, i32 0] [^while.body1, i32 %27];
    i32 %29 = call () -> i32 @getch();
    i1 %30 = icmp slt i32 %29, i32 48;
    i1 %31 = icmp sgt i32 %29, i32 57;
    i1 %32 = or i1 %30, i1 %31;
    i1 %33 = icmp neq i32 %17, i32 0;
    i32 %34 = neg i32 %28;
    i32 %35 = select i1 %33 ? i32 %34 : i32 %28;
    i1 %36 = icmp sgt i32 %35, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %37 = phi [^b, i32 %29] [^while.body2, i32 %39];
    i32 %38 = phi [^b, i32 0] [^while.body2, i32 %44];
    i32 %39 = call () -> i32 @getch();
    i1 %40 = icmp slt i32 %39, i32 48;
    i1 %41 = icmp sgt i32 %39, i32 57;
    i1 %42 = or i1 %40, i1 %41;
    i1 %43 = icmp eq i32 %37, i32 45;
    i32 %44 = select i1 %43 ? i32 1 : i32 %38;
    cbr i1 %42(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %45 = phi [^b, i32 %29] [^while.body2, i32 %39];
    i32 %46 = phi [^b, i32 0] [^while.body2, i32 %44];
    i32 %47 = add i32 %45, i32 -48;
    i1 %48 = icmp ult i32 %47, i32 10;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %49 = phi [^while.header1, i32 0] [^while.body3, i32 %60];
    i1 %50 = icmp neq i32 %46, i32 0;
    i32 %51 = neg i32 %49;
    i32 %52 = select i1 %50 ? i32 %51 : i32 %49;
    ubr ^while.body4;
  ^while.body3:
    i32 %53 = phi [^while.header1, i32 %45] [^while.body3, i32 %55];
    i32 %54 = phi [^while.header1, i32 0] [^while.body3, i32 %60];
    i32 %55 = call () -> i32 @getch();
    i32 %56 = add i32 %55, i32 -48;
    i1 %57 = icmp ult i32 %56, i32 10;
    i32 %58 = mul i32 %54, i32 10;
    i32 %59 = add i32 %58, i32 -48;
    i32 %60 = add i32 %53, i32 %59;
    cbr i1 %57(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %61 = phi [^b1, i32 0] [^while.body4, i32 %78];
    i32* %62 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %61];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %62)[i64 1];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %62)[i64 2];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %62)[i64 3];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %62)[i64 4];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %62)[i64 5];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %62)[i64 6];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %62)[i64 7];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %62)[i64 8];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %62)[i64 9];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %62)[i64 10];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %62)[i64 11];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %62)[i64 12];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %62)[i64 13];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %62)[i64 14];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %62)[i64 15];
    store i32* %77 with i32 -1;
    i32 %78 = add i32 %61, i32 16;
    i1 %79 = icmp slt i32 %78, i32 992;
    cbr i1 %79(prob = 0.98), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %80 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %78];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %80)[i64 1];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %80)[i64 2];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %80)[i64 3];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %80)[i64 4];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %80)[i64 5];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %80)[i64 6];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %80)[i64 7];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %80)[i64 8];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %80)[i64 9];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %80)[i64 10];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %80)[i64 11];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %80)[i64 12];
    store i32* %92 with i32 -1;
    ubr ^while.header2;
  ^while.header2:
    i32 %93 = phi [^while.body5, i32 %52] [^b6, i32 %211] [^if.then, i32 %225];
    i32 %94 = phi [^while.body5, i32 0] [^b6, i32 %210] [^if.then, i32 %94];
    i1 %95 = icmp neq i32 %93, i32 0;
    cbr i1 %95(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %96 = call () -> i32 @getch();
    i1 %97 = icmp neq i32 %96, i32 81;
    i1 %98 = icmp neq i32 %96, i32 85;
    i1 %99 = and i1 %97, i1 %98;
    cbr i1 %99(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %100 = icmp eq i32 %96, i32 81;
    cbr i1 %100(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %101 = call () -> i32 @getch();
    i1 %102 = icmp slt i32 %101, i32 48;
    i1 %103 = icmp sgt i32 %101, i32 57;
    i1 %104 = or i1 %102, i1 %103;
    cbr i1 %104(prob = 0.97), ^while.body7, ^while.header3;
  ^entry2:
    i32 %105 = call () -> i32 @getch();
    i1 %106 = icmp slt i32 %105, i32 48;
    i1 %107 = icmp sgt i32 %105, i32 57;
    i1 %108 = or i1 %106, i1 %107;
    cbr i1 %108(prob = 0.97), ^while.body8, ^while.header4;
  ^while.body7:
    i32 %109 = phi [^entry1, i32 %101] [^while.body7, i32 %111];
    i32 %110 = phi [^entry1, i32 0] [^while.body7, i32 %116];
    i32 %111 = call () -> i32 @getch();
    i1 %112 = icmp slt i32 %111, i32 48;
    i1 %113 = icmp sgt i32 %111, i32 57;
    i1 %114 = or i1 %112, i1 %113;
    i1 %115 = icmp eq i32 %109, i32 45;
    i32 %116 = select i1 %115 ? i32 1 : i32 %110;
    cbr i1 %114(prob = 0.97), ^while.body7, ^while.header3;
  ^while.header3:
    i32 %117 = phi [^entry1, i32 %101] [^while.body7, i32 %111];
    i32 %118 = phi [^entry1, i32 0] [^while.body7, i32 %116];
    i32 %119 = add i32 %117, i32 -48;
    i1 %120 = icmp ult i32 %119, i32 10;
    cbr i1 %120(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %121 = phi [^entry2, i32 %105] [^while.body8, i32 %123];
    i32 %122 = phi [^entry2, i32 0] [^while.body8, i32 %128];
    i32 %123 = call () -> i32 @getch();
    i1 %124 = icmp slt i32 %123, i32 48;
    i1 %125 = icmp sgt i32 %123, i32 57;
    i1 %126 = or i1 %124, i1 %125;
    i1 %127 = icmp eq i32 %121, i32 45;
    i32 %128 = select i1 %127 ? i32 1 : i32 %122;
    cbr i1 %126(prob = 0.97), ^while.body8, ^while.header4;
  ^while.header4:
    i32 %129 = phi [^entry2, i32 %105] [^while.body8, i32 %123];
    i32 %130 = phi [^entry2, i32 0] [^while.body8, i32 %128];
    i32 %131 = add i32 %129, i32 -48;
    i1 %132 = icmp ult i32 %131, i32 10;
    cbr i1 %132(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %133 = phi [^while.header3, i32 %117] [^while.body9, i32 %135];
    i32 %134 = phi [^while.header3, i32 0] [^while.body9, i32 %140];
    i32 %135 = call () -> i32 @getch();
    i32 %136 = add i32 %135, i32 -48;
    i1 %137 = icmp ult i32 %136, i32 10;
    i32 %138 = mul i32 %134, i32 10;
    i32 %139 = add i32 %138, i32 -48;
    i32 %140 = add i32 %133, i32 %139;
    cbr i1 %137(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %141 = phi [^while.header3, i32 0] [^while.body9, i32 %140];
    i32 %142 = call () -> i32 @getch();
    i1 %143 = icmp slt i32 %142, i32 48;
    i1 %144 = icmp sgt i32 %142, i32 57;
    i1 %145 = or i1 %143, i1 %144;
    i1 %146 = icmp neq i32 %118, i32 0;
    i32 %147 = neg i32 %141;
    i32 %148 = select i1 %146 ? i32 %147 : i32 %141;
    cbr i1 %145(prob = 0.97), ^while.body11, ^while.header5;
  ^while.body10:
    i32 %149 = phi [^while.header4, i32 %129] [^while.body10, i32 %151];
    i32 %150 = phi [^while.header4, i32 0] [^while.body10, i32 %156];
    i32 %151 = call () -> i32 @getch();
    i32 %152 = add i32 %151, i32 -48;
    i1 %153 = icmp ult i32 %152, i32 10;
    i32 %154 = mul i32 %150, i32 10;
    i32 %155 = add i32 %154, i32 -48;
    i32 %156 = add i32 %149, i32 %155;
    cbr i1 %153(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %157 = phi [^while.header4, i32 0] [^while.body10, i32 %156];
    i32 %158 = call () -> i32 @getch();
    i1 %159 = icmp slt i32 %158, i32 48;
    i1 %160 = icmp sgt i32 %158, i32 57;
    i1 %161 = or i1 %159, i1 %160;
    i1 %162 = icmp neq i32 %130, i32 0;
    i32 %163 = neg i32 %157;
    i32 %164 = select i1 %162 ? i32 %163 : i32 %157;
    cbr i1 %161(prob = 0.97), ^while.body12, ^while.header6;
  ^while.body11:
    i32 %165 = phi [^b4, i32 %142] [^while.body11, i32 %167];
    i32 %166 = phi [^b4, i32 0] [^while.body11, i32 %172];
    i32 %167 = call () -> i32 @getch();
    i1 %168 = icmp slt i32 %167, i32 48;
    i1 %169 = icmp sgt i32 %167, i32 57;
    i1 %170 = or i1 %168, i1 %169;
    i1 %171 = icmp eq i32 %165, i32 45;
    i32 %172 = select i1 %171 ? i32 1 : i32 %166;
    cbr i1 %170(prob = 0.97), ^while.body11, ^while.header5;
  ^while.header5:
    i32 %173 = phi [^b4, i32 %142] [^while.body11, i32 %167];
    i32 %174 = phi [^b4, i32 0] [^while.body11, i32 %172];
    i32 %175 = add i32 %173, i32 -48;
    i1 %176 = icmp ult i32 %175, i32 10;
    cbr i1 %176(prob = 0.97), ^while.body13, ^b7;
  ^while.body12:
    i32 %177 = phi [^b5, i32 %158] [^while.body12, i32 %179];
    i32 %178 = phi [^b5, i32 0] [^while.body12, i32 %184];
    i32 %179 = call () -> i32 @getch();
    i1 %180 = icmp slt i32 %179, i32 48;
    i1 %181 = icmp sgt i32 %179, i32 57;
    i1 %182 = or i1 %180, i1 %181;
    i1 %183 = icmp eq i32 %177, i32 45;
    i32 %184 = select i1 %183 ? i32 1 : i32 %178;
    cbr i1 %182(prob = 0.97), ^while.body12, ^while.header6;
  ^while.header6:
    i32 %185 = phi [^b5, i32 %158] [^while.body12, i32 %179];
    i32 %186 = phi [^b5, i32 0] [^while.body12, i32 %184];
    i32 %187 = add i32 %185, i32 -48;
    i1 %188 = icmp ult i32 %187, i32 10;
    cbr i1 %188(prob = 0.97), ^while.body14, ^b6;
  ^while.body13:
    i32 %189 = phi [^while.header5, i32 %173] [^while.body13, i32 %191];
    i32 %190 = phi [^while.header5, i32 0] [^while.body13, i32 %196];
    i32 %191 = call () -> i32 @getch();
    i32 %192 = add i32 %191, i32 -48;
    i1 %193 = icmp ult i32 %192, i32 10;
    i32 %194 = mul i32 %190, i32 10;
    i32 %195 = add i32 %194, i32 -48;
    i32 %196 = add i32 %189, i32 %195;
    cbr i1 %193(prob = 0.97), ^while.body13, ^b7;
  ^b6:
    i32 %197 = phi [^while.header6, i32 0] [^while.body14, i32 %223];
    i1 %198 = icmp neq i32 %186, i32 0;
    i32 %199 = neg i32 %197;
    i32 %200 = select i1 %198 ? i32 %199 : i32 %197;
    i32* %201 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %94];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %164];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %94];
    store i32* %204 with i32 %203;
    i32* %205 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %200];
    store i32* %202 with i32 %94;
    i32* %206 = getelementptr &(i32* %201)[i64 1];
    store i32* %206 with i32 %164;
    i32 %207 = load i32* %205;
    i32* %208 = getelementptr &(i32* %204)[i64 1];
    store i32* %208 with i32 %207;
    i32 %209 = add i32 %94, i32 1;
    store i32* %205 with i32 %209;
    i32 %210 = add i32 %94, i32 2;
    i32 %211 = add i32 %93, i32 -1;
    ubr ^while.header2;
  ^b7:
    i32 %212 = phi [^while.header5, i32 0] [^while.body13, i32 %196];
    i1 %213 = icmp neq i32 %174, i32 0;
    i32 %214 = neg i32 %212;
    i32 %215 = select i1 %213 ? i32 %214 : i32 %212;
    cbr i1 %36(prob = 0.97), ^while.body15, ^if.then;
  ^while.body14:
    i32 %216 = phi [^while.header6, i32 %185] [^while.body14, i32 %218];
    i32 %217 = phi [^while.header6, i32 0] [^while.body14, i32 %223];
    i32 %218 = call () -> i32 @getch();
    i32 %219 = add i32 %218, i32 -48;
    i1 %220 = icmp ult i32 %219, i32 10;
    i32 %221 = mul i32 %217, i32 10;
    i32 %222 = add i32 %221, i32 -48;
    i32 %223 = add i32 %216, i32 %222;
    cbr i1 %220(prob = 0.97), ^while.body14, ^b6;
  ^if.then:
    i32 %224 = call (i32, i32) -> i32 @same(i32 %148, i32 %215);
    call (i32) -> void @putint(i32 %224);
    call (i32) -> void @putch(i32 10);
    i32 %225 = add i32 %93, i32 -1;
    ubr ^while.header2;
  ^while.body15:
    i32 %226 = phi [^b7, i32 1] [^while.body15, i32 %228];
    i32* %227 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %226];
    store i32* %227 with i32 0;
    i32 %228 = add i32 %226, i32 1;
    i1 %229 = icmp sge i32 %35, i32 %228;
    cbr i1 %229(prob = 0.97), ^while.body15, ^if.then;
}
