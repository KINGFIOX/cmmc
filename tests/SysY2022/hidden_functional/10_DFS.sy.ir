internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32, i32, i32*, i32*, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    i32* %0 = getelementptr &([1005 * i32]* @vis)[i32 0][i32 %arg];
    store i32* %0 with i32 1;
    i1 %1 = scmp eq i32 %arg, i32 %arg1;
    cbr i1 %1, [ ^if.then ], [ ^indirect i32 %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg1 ];
^indirect(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^while.body i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %1 ], [ ^b ];
^if.then():
    ret i32 1;
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1005 * i32]* @vis)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i1 %5 = xor i1 %4, i1 true;
    cbr i1 %5, [ ^indirect1 i32 %1, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4 ], [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ];
^b():
    ret i32 0;
^indirect1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = call (i32, i32, i32*, i32*, i32*) -> i32 @same(i32 %arg, i32 %arg4, i32* %arg3, i32* %arg2, i32* %arg1);
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then ], [ ^b1 i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %1 ], [ ^b ];
}
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %cnt = alloc i32;
    store i32* %cnt with i32 0;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %x, i32* %f, i32* %ch, i32* %n, i32* %m, i32* %cnt, i32 %0 ], [ ^b i32* %f, i32* %x, i32* %ch, i32* %cnt, i32* %m, i32* %n, i32 %0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp eq i32 %arg6, i32 45;
    cbr i1 %0, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp gt i32 %arg6, i32 57;
    cbr i1 %0, [ ^indirect i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body1 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ], [ ^b3 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then1 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    ubr [ ^entry1 i32 %1, i32* %arg3, i32* %arg2, i32* %arg1 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    ubr [ ^entry1 i32 %0, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b2 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %5 ], [ ^b3 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ];
^entry1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    store i32* %arg3 with i32 %arg;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %x, i32* %f, i32* %ch, i32* %arg2, i32* %arg3, i32* %arg1, i32 %0 ], [ ^b4 i32* %f, i32* %x, i32* %ch, i32* %arg1, i32* %arg3, i32* %arg2, i32 %0 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp eq i32 %arg6, i32 45;
    cbr i1 %0, [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp gt i32 %arg6, i32 57;
    cbr i1 %0, [ ^indirect2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b4 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b4 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b6 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b7 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body3 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ], [ ^b7 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then3 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else1 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    store i32* %arg1 with i32 %1;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body4 i32* %i, i32* %arg1, i32* %arg3, i32* %arg2, i32 0 ];
^if.else1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    store i32* %arg1 with i32 %0;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body4 i32* %i, i32* %arg1, i32* %arg3, i32* %arg2, i32 0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b6 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %5 ], [ ^b7 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg4];
    store i32* %0 with i32 -1;
    i32 %1 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 1005;
    cbr i1 %2, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %1 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    free i32* %arg;
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^while.body5 i32* %arg3, i32* %arg1, i32* %arg2 ], [ ^b9 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 81;
    cbr i1 %1, [ ^b10 i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32 %0 ], [ ^b11 i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32 %0 ];
^b9():
    ret i32 0;
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i1 %0 = scmp neq i32 %arg4, i32 85;
    cbr i1 %0, [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3 ], [ ^b11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i1 %0 = scmp eq i32 %arg4, i32 81;
    cbr i1 %0, [ ^if.then4 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg1 ], [ ^if.else2 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 81;
    cbr i1 %1, [ ^b10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ], [ ^b11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body7 i32* %x1, i32* %f, i32* %ch, i32* %x, i32* %arg3, i32* %arg, i32* %arg2, i32* %arg1, i32 %0 ], [ ^b12 i32* %f, i32* %x1, i32* %ch, i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %x, i32 %0 ];
^if.else2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %x1, i32* %f, i32* %ch, i32* %x, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %0 ], [ ^b13 i32* %f, i32* %x1, i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %x, i32 %0 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 45;
    cbr i1 %0, [ ^if.then5 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b14 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg8, i32 57;
    cbr i1 %0, [ ^indirect4 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 45;
    cbr i1 %0, [ ^if.then6 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg8, i32 57;
    cbr i1 %0, [ ^indirect5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^if.then5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body7 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b12 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b13 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^b14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b12 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b16 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b17 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b13 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b18 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b19 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg8, i32 57;
    cbr i1 %0, [ ^while.body9 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ], [ ^b17 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then7 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else3 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ];
^b18(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg8, i32 57;
    cbr i1 %0, [ ^while.body10 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ], [ ^b19 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b19(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then8 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else4 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ];
^if.then7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    ubr [ ^if.then9 i32 %1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^if.else3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    ubr [ ^if.then9 i32 %0, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^if.then8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    ubr [ ^if.else5 i32 %1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b16 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %5 ], [ ^b17 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^if.else4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    ubr [ ^if.else5 i32 %0, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b18 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %5 ], [ ^b19 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^if.then9(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    store i32* %arg5 with i32 %arg;
    i32* %y = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body11 i32* %x, i32* %f, i32* %ch, i32* %y, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ], [ ^b20 i32* %f, i32* %x, i32* %ch, i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %y, i32 %0 ];
^if.else5(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    store i32* %arg5 with i32 %arg;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %x, i32* %f, i32* %ch, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %0 ], [ ^b21 i32* %f, i32* %x, i32* %ch, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^while.body11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg9, i32 45;
    cbr i1 %0, [ ^if.then10 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b22 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ];
^b20(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i1 %0 = scmp gt i32 %arg9, i32 57;
    cbr i1 %0, [ ^indirect8 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 45;
    cbr i1 %0, [ ^if.then11 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b23 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b21(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg8, i32 57;
    cbr i1 %0, [ ^indirect9 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^indirect11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^if.then10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body11 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b20 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^indirect9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^if.then11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ], [ ^b21 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^b22(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ], [ ^b20 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b24 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ], [ ^b25 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ];
^b23(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b21 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0 ];
^indirect11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp ge i32 %0, i32 48;
    cbr i1 %1, [ ^b26 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ], [ ^b27 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b24(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i1 %0 = scmp le i32 %arg9, i32 57;
    cbr i1 %0, [ ^while.body13 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ], [ ^b25 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ];
^b25(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then12 i32* %arg, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else6 i32* %arg, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ];
^b26(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg8, i32 57;
    cbr i1 %0, [ ^while.body14 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ], [ ^b27 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b27(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then13 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^if.else7 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ];
^if.then12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    store i32* %arg1 with i32 %1;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    ubr [ ^while.header i32* %i, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg6 ];
^if.else6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    store i32* %arg1 with i32 %0;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    ubr [ ^while.header i32* %i, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg6 ];
^if.then13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    i32 %1 = neg i32 %0;
    ubr [ ^if.else8 i32 %1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b24 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %5 ], [ ^b25 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8 ];
^if.else7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg;
    ubr [ ^if.else8 i32 %0, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = sub i32 %3, i32 48;
    store i32* %arg2 with i32 %4;
    i32 %5 = call () -> i32 @getch();
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp ge i32 %5, i32 48;
    cbr i1 %6, [ ^b26 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %5 ], [ ^b27 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^while.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp le i32 1, i32 %0;
    cbr i1 %1, [ ^while.body15 i32* %arg, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32 1 ], [ ^b28 i32* %arg, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ];
^if.else8(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32 %1 = load i32* %arg2;
    i32* %2 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %1];
    store i32* %2 with i32 %arg;
    i32* %3 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %1];
    i32* %4 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %0];
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    store i32* %4 with i32 %1;
    i32 %6 = add i32 %1, i32 1;
    i32* %7 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %6];
    store i32* %7 with i32 %0;
    i32* %8 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %6];
    i32* %9 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg];
    i32 %10 = load i32* %9;
    store i32* %8 with i32 %10;
    store i32* %9 with i32 %6;
    i32 %11 = add i32 %1, i32 2;
    store i32* %arg2 with i32 %11;
    free i32* %arg5;
    i32 %12 = load i32* %arg3;
    i32 %13 = sub i32 %12, i32 1;
    store i32* %arg3 with i32 %13;
    free i32* %arg1;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14, [ ^while.body5 i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^b9 ];
^while.body15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i32* %0 = getelementptr &([1005 * i32]* @vis)[i32 0][i32 %arg8];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg8, i32 1;
    store i32* %arg with i32 %1;
    i32 %2 = load i32* %arg1;
    i1 %3 = scmp le i32 %1, i32 %2;
    cbr i1 %3, [ ^while.body15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %1 ], [ ^b28 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7 ];
^b28(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    free i32* %arg;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg2;
    i32 %2 = call (i32, i32, i32*, i32*, i32*) -> i32 @same(i32 %0, i32 %1, i32* %arg3, i32* %arg5, i32* %arg6);
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    free i32* %arg2;
    free i32* %arg1;
    i32 %3 = load i32* %arg5;
    i32 %4 = sub i32 %3, i32 1;
    store i32* %arg5 with i32 %4;
    free i32* %arg4;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5, [ ^while.body5 i32* %arg3, i32* %arg5, i32* %arg6 ], [ ^b9 ];
}
