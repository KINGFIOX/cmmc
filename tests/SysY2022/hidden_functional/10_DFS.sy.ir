internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32 %x, i32 %tar) -> i32 {
^entry:
    i32* %0 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %x];
    store i32* %0 with i32 1;
    i1 %1 = scmp eq i32 %x, i32 %tar;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
^b:
    i32* %2 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 -1;
    cbr i1 %4(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %5 = phi [^entry, i32 1] [^b, i32 0] [^b2, i32 1] [^b3, i32 0];
    ret i32 %5;
^while.body:
    i32 %6 = phi [^b, i32 %3] [^b3, i32 %15];
    i32* %7 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32* %9 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %8];
    i32 %10 = load i32* %9;
    i1 %11 = scmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %12 = call (i32, i32) -> i32 @same(i32 %8, i32 %tar);
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^b1, ^b3;
^b3:
    i32* %14 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %6];
    i32 %15 = load i32* %14;
    i1 %16 = scmp neq i32 %15, i32 -1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^b, i32 0] [^b2, i32 %5];
    i32 %3 = phi [^entry, i32 %0] [^b, i32 %0] [^b2, i32 %6];
    i1 %4 = scmp eq i32 %3, i32 45;
    i32 %5 = select i1 %4 ? i32 1 : i32 %2;
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    cbr i1 %7(prob = 0.5), ^b2, ^b1;
^b:
    i1 %8 = scmp gt i32 %0, i32 57;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.guard;
^b1:
    i1 %9 = scmp gt i32 %6, i32 57;
    ubr ^b2;
^b2:
    i1 %10 = phi [^while.body, i1 true] [^b1, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.guard;
^while.guard:
    i32 %11 = phi [^b, i32 0] [^b2, i32 %5];
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %6];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %14 = scmp lt i32 %12, i32 58;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b4;
^b4:
    i32 %15 = phi [^while.guard, i32 0] [^b3, i32 0] [^b7, i32 %22];
    i1 %16 = scmp neq i32 %11, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %17 = neg i32 %15;
    ubr ^b5;
^while.body1:
    i32 %18 = phi [^b3, i32 %12] [^b7, i32 %23];
    i32 %19 = phi [^b3, i32 0] [^b7, i32 %22];
    i32 %20 = mul i32 %19, i32 10;
    i32 %21 = add i32 %18, i32 -48;
    i32 %22 = add i32 %21, i32 %20;
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %23, i32 47;
    cbr i1 %24(prob = 0.5), ^b6, ^b7;
^b5:
    i32 %25 = phi [^b4, i32 %15] [^if.then, i32 %17];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp lt i32 %26, i32 48;
    i1 %28 = scmp gt i32 %25, i32 0;
    cbr i1 %27(prob = 0.5), ^while.body2, ^b8;
^b6:
    i1 %29 = scmp le i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %30 = phi [^while.body1, i1 false] [^b6, i1 %29];
    cbr i1 %30(prob = 0.97), ^while.body1, ^b4;
^while.body2:
    i32 %31 = phi [^b5, i32 0] [^b8, i32 0] [^b10, i32 %34];
    i32 %32 = phi [^b5, i32 %26] [^b8, i32 %26] [^b10, i32 %35];
    i1 %33 = scmp eq i32 %32, i32 45;
    i32 %34 = select i1 %33 ? i32 1 : i32 %31;
    i32 %35 = call () -> i32 @getch();
    i1 %36 = scmp lt i32 %35, i32 48;
    cbr i1 %36(prob = 0.5), ^b10, ^b9;
^b8:
    i1 %37 = scmp gt i32 %26, i32 57;
    cbr i1 %37(prob = 0.97), ^while.body2, ^while.guard1;
^b9:
    i1 %38 = scmp gt i32 %35, i32 57;
    ubr ^b10;
^b10:
    i1 %39 = phi [^while.body2, i1 true] [^b9, i1 %38];
    cbr i1 %39(prob = 0.97), ^while.body2, ^while.guard1;
^while.guard1:
    i32 %40 = phi [^b8, i32 0] [^b10, i32 %34];
    i32 %41 = phi [^b8, i32 %26] [^b10, i32 %35];
    i1 %42 = scmp gt i32 %41, i32 47;
    cbr i1 %42(prob = 0.5), ^b11, ^b12;
^b11:
    i1 %43 = scmp lt i32 %41, i32 58;
    cbr i1 %43(prob = 0.97), ^while.body3, ^b12;
^b12:
    i32 %44 = phi [^while.guard1, i32 0] [^b11, i32 0] [^b15, i32 %51];
    i1 %45 = scmp neq i32 %40, i32 0;
    cbr i1 %45(prob = 0.5), ^if.then1, ^b13;
^if.then1:
    i32 %46 = neg i32 %44;
    ubr ^b13;
^while.body3:
    i32 %47 = phi [^b11, i32 %41] [^b15, i32 %52];
    i32 %48 = phi [^b11, i32 0] [^b15, i32 %51];
    i32 %49 = mul i32 %48, i32 10;
    i32 %50 = add i32 %47, i32 -48;
    i32 %51 = add i32 %50, i32 %49;
    i32 %52 = call () -> i32 @getch();
    i1 %53 = scmp gt i32 %52, i32 47;
    cbr i1 %53(prob = 0.5), ^b14, ^b15;
^b13:
    i32 %54 = phi [^b12, i32 %44] [^if.then1, i32 %46];
    ubr ^while.body4;
^b14:
    i1 %55 = scmp le i32 %52, i32 57;
    ubr ^b15;
^b15:
    i1 %56 = phi [^while.body3, i1 false] [^b14, i1 %55];
    cbr i1 %56(prob = 0.97), ^while.body3, ^b12;
^while.body4:
    i32 %57 = phi [^b13, i32 0] [^while.body4, i32 %74];
    i32* %58 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %57];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %58)[i64 1];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %58)[i64 2];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %58)[i64 3];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %58)[i64 4];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %58)[i64 5];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %58)[i64 6];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %58)[i64 7];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %58)[i64 8];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %58)[i64 9];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %58)[i64 10];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %58)[i64 11];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %58)[i64 12];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %58)[i64 13];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %58)[i64 14];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %58)[i64 15];
    store i32* %73 with i32 -1;
    i32 %74 = add i32 %57, i32 16;
    i1 %75 = scmp lt i32 %74, i32 992;
    cbr i1 %75(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i32* %76 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %74];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %76)[i64 1];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %76)[i64 2];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %76)[i64 3];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %76)[i64 4];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %76)[i64 5];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %76)[i64 6];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %76)[i64 7];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %76)[i64 8];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %76)[i64 9];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %76)[i64 10];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %76)[i64 11];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %76)[i64 12];
    store i32* %88 with i32 -1;
    i1 %89 = scmp neq i32 %54, i32 0;
    cbr i1 %89(prob = 0.97), ^while.body6, ^b16;
^while.body6:
    i32 %90 = phi [^while.body5, i32 %54] [^b54, i32 %230];
    i32 %91 = phi [^while.body5, i32 0] [^b54, i32 %229];
    i32 %92 = call () -> i32 @getch();
    i1 %93 = scmp neq i32 %92, i32 81;
    cbr i1 %93(prob = 0.5), ^b17, ^b18;
^b16:
    ret i32 0;
^b17:
    i1 %94 = scmp neq i32 %92, i32 85;
    ubr ^b18;
^b18:
    i1 %95 = phi [^while.body6, i1 false] [^b17, i1 %94];
    cbr i1 %95(prob = 0.97), ^while.body7, ^b19;
^while.body7:
    i32 %96 = call () -> i32 @getch();
    i1 %97 = scmp neq i32 %96, i32 81;
    cbr i1 %97(prob = 0.5), ^b20, ^b21;
^b19:
    i32 %98 = phi [^b18, i32 %92] [^b21, i32 %96];
    i1 %99 = scmp eq i32 %98, i32 81;
    cbr i1 %99(prob = 0.5), ^entry1, ^entry2;
^b20:
    i1 %100 = scmp neq i32 %96, i32 85;
    ubr ^b21;
^b21:
    i1 %101 = phi [^while.body7, i1 false] [^b20, i1 %100];
    cbr i1 %101(prob = 0.97), ^while.body7, ^b19;
^entry1:
    i32 %102 = call () -> i32 @getch();
    i1 %103 = scmp lt i32 %102, i32 48;
    cbr i1 %103(prob = 0.5), ^while.body8, ^b22;
^entry2:
    i32 %104 = call () -> i32 @getch();
    i1 %105 = scmp lt i32 %104, i32 48;
    cbr i1 %105(prob = 0.5), ^while.body9, ^b23;
^while.body8:
    i32 %106 = phi [^entry1, i32 0] [^b22, i32 0] [^b25, i32 %109];
    i32 %107 = phi [^entry1, i32 %102] [^b22, i32 %102] [^b25, i32 %110];
    i1 %108 = scmp eq i32 %107, i32 45;
    i32 %109 = select i1 %108 ? i32 1 : i32 %106;
    i32 %110 = call () -> i32 @getch();
    i1 %111 = scmp lt i32 %110, i32 48;
    cbr i1 %111(prob = 0.5), ^b25, ^b24;
^b22:
    i1 %112 = scmp gt i32 %102, i32 57;
    cbr i1 %112(prob = 0.97), ^while.body8, ^while.guard2;
^while.body9:
    i32 %113 = phi [^entry2, i32 0] [^b23, i32 0] [^b27, i32 %116];
    i32 %114 = phi [^entry2, i32 %104] [^b23, i32 %104] [^b27, i32 %117];
    i1 %115 = scmp eq i32 %114, i32 45;
    i32 %116 = select i1 %115 ? i32 1 : i32 %113;
    i32 %117 = call () -> i32 @getch();
    i1 %118 = scmp lt i32 %117, i32 48;
    cbr i1 %118(prob = 0.5), ^b27, ^b26;
^b23:
    i1 %119 = scmp gt i32 %104, i32 57;
    cbr i1 %119(prob = 0.97), ^while.body9, ^while.guard3;
^b24:
    i1 %120 = scmp gt i32 %110, i32 57;
    ubr ^b25;
^b25:
    i1 %121 = phi [^while.body8, i1 true] [^b24, i1 %120];
    cbr i1 %121(prob = 0.97), ^while.body8, ^while.guard2;
^b26:
    i1 %122 = scmp gt i32 %117, i32 57;
    ubr ^b27;
^b27:
    i1 %123 = phi [^while.body9, i1 true] [^b26, i1 %122];
    cbr i1 %123(prob = 0.97), ^while.body9, ^while.guard3;
^while.guard2:
    i32 %124 = phi [^b22, i32 0] [^b25, i32 %109];
    i32 %125 = phi [^b22, i32 %102] [^b25, i32 %110];
    i1 %126 = scmp gt i32 %125, i32 47;
    cbr i1 %126(prob = 0.5), ^b28, ^b29;
^while.guard3:
    i32 %127 = phi [^b23, i32 0] [^b27, i32 %116];
    i32 %128 = phi [^b23, i32 %104] [^b27, i32 %117];
    i1 %129 = scmp gt i32 %128, i32 47;
    cbr i1 %129(prob = 0.5), ^b30, ^b31;
^b28:
    i1 %130 = scmp lt i32 %125, i32 58;
    cbr i1 %130(prob = 0.97), ^while.body10, ^b29;
^b29:
    i32 %131 = phi [^while.guard2, i32 0] [^b28, i32 0] [^b36, i32 %141];
    i1 %132 = scmp neq i32 %124, i32 0;
    cbr i1 %132(prob = 0.5), ^if.then2, ^b32;
^b30:
    i1 %133 = scmp lt i32 %128, i32 58;
    cbr i1 %133(prob = 0.97), ^while.body11, ^b31;
^b31:
    i32 %134 = phi [^while.guard3, i32 0] [^b30, i32 0] [^b37, i32 %149];
    i1 %135 = scmp neq i32 %127, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then3, ^b33;
^if.then2:
    i32 %136 = neg i32 %131;
    ubr ^b32;
^while.body10:
    i32 %137 = phi [^b28, i32 %125] [^b36, i32 %142];
    i32 %138 = phi [^b28, i32 0] [^b36, i32 %141];
    i32 %139 = mul i32 %138, i32 10;
    i32 %140 = add i32 %137, i32 -48;
    i32 %141 = add i32 %140, i32 %139;
    i32 %142 = call () -> i32 @getch();
    i1 %143 = scmp gt i32 %142, i32 47;
    cbr i1 %143(prob = 0.5), ^b34, ^b36;
^if.then3:
    i32 %144 = neg i32 %134;
    ubr ^b33;
^while.body11:
    i32 %145 = phi [^b30, i32 %128] [^b37, i32 %150];
    i32 %146 = phi [^b30, i32 0] [^b37, i32 %149];
    i32 %147 = mul i32 %146, i32 10;
    i32 %148 = add i32 %145, i32 -48;
    i32 %149 = add i32 %148, i32 %147;
    i32 %150 = call () -> i32 @getch();
    i1 %151 = scmp gt i32 %150, i32 47;
    cbr i1 %151(prob = 0.5), ^b35, ^b37;
^b32:
    i32 %152 = phi [^b29, i32 %131] [^if.then2, i32 %136];
    i32 %153 = call () -> i32 @getch();
    i1 %154 = scmp lt i32 %153, i32 48;
    cbr i1 %154(prob = 0.5), ^while.body12, ^b38;
^b33:
    i32 %155 = phi [^b31, i32 %134] [^if.then3, i32 %144];
    i32 %156 = call () -> i32 @getch();
    i1 %157 = scmp lt i32 %156, i32 48;
    cbr i1 %157(prob = 0.5), ^while.body13, ^b39;
^b34:
    i1 %158 = scmp le i32 %142, i32 57;
    ubr ^b36;
^b35:
    i1 %159 = scmp le i32 %150, i32 57;
    ubr ^b37;
^b36:
    i1 %160 = phi [^while.body10, i1 false] [^b34, i1 %158];
    cbr i1 %160(prob = 0.97), ^while.body10, ^b29;
^b37:
    i1 %161 = phi [^while.body11, i1 false] [^b35, i1 %159];
    cbr i1 %161(prob = 0.97), ^while.body11, ^b31;
^while.body12:
    i32 %162 = phi [^b32, i32 0] [^b38, i32 0] [^b41, i32 %165];
    i32 %163 = phi [^b32, i32 %153] [^b38, i32 %153] [^b41, i32 %166];
    i1 %164 = scmp eq i32 %163, i32 45;
    i32 %165 = select i1 %164 ? i32 1 : i32 %162;
    i32 %166 = call () -> i32 @getch();
    i1 %167 = scmp lt i32 %166, i32 48;
    cbr i1 %167(prob = 0.5), ^b41, ^b40;
^b38:
    i1 %168 = scmp gt i32 %153, i32 57;
    cbr i1 %168(prob = 0.97), ^while.body12, ^while.guard4;
^while.body13:
    i32 %169 = phi [^b33, i32 0] [^b39, i32 0] [^b43, i32 %172];
    i32 %170 = phi [^b33, i32 %156] [^b39, i32 %156] [^b43, i32 %173];
    i1 %171 = scmp eq i32 %170, i32 45;
    i32 %172 = select i1 %171 ? i32 1 : i32 %169;
    i32 %173 = call () -> i32 @getch();
    i1 %174 = scmp lt i32 %173, i32 48;
    cbr i1 %174(prob = 0.5), ^b43, ^b42;
^b39:
    i1 %175 = scmp gt i32 %156, i32 57;
    cbr i1 %175(prob = 0.97), ^while.body13, ^while.guard5;
^b40:
    i1 %176 = scmp gt i32 %166, i32 57;
    ubr ^b41;
^b41:
    i1 %177 = phi [^while.body12, i1 true] [^b40, i1 %176];
    cbr i1 %177(prob = 0.97), ^while.body12, ^while.guard4;
^b42:
    i1 %178 = scmp gt i32 %173, i32 57;
    ubr ^b43;
^b43:
    i1 %179 = phi [^while.body13, i1 true] [^b42, i1 %178];
    cbr i1 %179(prob = 0.97), ^while.body13, ^while.guard5;
^while.guard4:
    i32 %180 = phi [^b38, i32 0] [^b41, i32 %165];
    i32 %181 = phi [^b38, i32 %153] [^b41, i32 %166];
    i1 %182 = scmp gt i32 %181, i32 47;
    cbr i1 %182(prob = 0.5), ^b44, ^b45;
^while.guard5:
    i32 %183 = phi [^b39, i32 0] [^b43, i32 %172];
    i32 %184 = phi [^b39, i32 %156] [^b43, i32 %173];
    i1 %185 = scmp gt i32 %184, i32 47;
    cbr i1 %185(prob = 0.5), ^b46, ^b47;
^b44:
    i1 %186 = scmp lt i32 %181, i32 58;
    cbr i1 %186(prob = 0.97), ^while.body14, ^b45;
^b45:
    i32 %187 = phi [^while.guard4, i32 0] [^b44, i32 0] [^b52, i32 %197];
    i1 %188 = scmp neq i32 %180, i32 0;
    cbr i1 %188(prob = 0.5), ^if.then4, ^b49;
^b46:
    i1 %189 = scmp lt i32 %184, i32 58;
    cbr i1 %189(prob = 0.97), ^while.body15, ^b47;
^b47:
    i32 %190 = phi [^while.guard5, i32 0] [^b46, i32 0] [^b53, i32 %205];
    i1 %191 = scmp neq i32 %183, i32 0;
    cbr i1 %191(prob = 0.5), ^if.then5, ^b48;
^if.then4:
    i32 %192 = neg i32 %187;
    ubr ^b49;
^while.body14:
    i32 %193 = phi [^b44, i32 %181] [^b52, i32 %198];
    i32 %194 = phi [^b44, i32 0] [^b52, i32 %197];
    i32 %195 = mul i32 %194, i32 10;
    i32 %196 = add i32 %193, i32 -48;
    i32 %197 = add i32 %196, i32 %195;
    i32 %198 = call () -> i32 @getch();
    i1 %199 = scmp gt i32 %198, i32 47;
    cbr i1 %199(prob = 0.5), ^b50, ^b52;
^if.then5:
    i32 %200 = neg i32 %190;
    ubr ^b48;
^while.body15:
    i32 %201 = phi [^b46, i32 %184] [^b53, i32 %206];
    i32 %202 = phi [^b46, i32 0] [^b53, i32 %205];
    i32 %203 = mul i32 %202, i32 10;
    i32 %204 = add i32 %201, i32 -48;
    i32 %205 = add i32 %204, i32 %203;
    i32 %206 = call () -> i32 @getch();
    i1 %207 = scmp gt i32 %206, i32 47;
    cbr i1 %207(prob = 0.5), ^b51, ^b53;
^b48:
    i32 %208 = phi [^b47, i32 %190] [^if.then5, i32 %200];
    i32* %209 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %91];
    store i32* %209 with i32 %208;
    i32* %210 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %91];
    i32* %211 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %155];
    i32 %212 = load i32* %211;
    store i32* %210 with i32 %212;
    store i32* %211 with i32 %91;
    i32 %213 = add i32 %91, i32 1;
    i32* %214 = getelementptr &(i32* %209)[i64 1];
    store i32* %214 with i32 %155;
    i32* %215 = getelementptr &(i32* %210)[i64 1];
    i32* %216 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %208];
    i32 %217 = load i32* %216;
    store i32* %215 with i32 %217;
    store i32* %216 with i32 %213;
    i32 %218 = add i32 %91, i32 2;
    ubr ^b54;
^b49:
    i32 %219 = phi [^b45, i32 %187] [^if.then4, i32 %192];
    cbr i1 %28(prob = 0.97), ^while.body16, ^if.then6;
^b50:
    i1 %220 = scmp le i32 %198, i32 57;
    ubr ^b52;
^b51:
    i1 %221 = scmp le i32 %206, i32 57;
    ubr ^b53;
^b52:
    i1 %222 = phi [^while.body14, i1 false] [^b50, i1 %220];
    cbr i1 %222(prob = 0.97), ^while.body14, ^b45;
^if.then6:
    i32 %223 = call (i32, i32) -> i32 @same(i32 %152, i32 %219);
    call (i32) -> void @putint(i32 %223);
    call (i32) -> void @putch(i32 10);
    ubr ^b54;
^b53:
    i1 %224 = phi [^while.body15, i1 false] [^b51, i1 %221];
    cbr i1 %224(prob = 0.97), ^while.body15, ^b47;
^while.body16:
    i32 %225 = phi [^b49, i32 1] [^while.body16, i32 %227];
    i32* %226 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %225];
    store i32* %226 with i32 0;
    i32 %227 = add i32 %225, i32 1;
    i1 %228 = scmp le i32 %227, i32 %25;
    cbr i1 %228(prob = 0.97), ^while.body16, ^if.then6;
^b54:
    i32 %229 = phi [^b48, i32 %218] [^if.then6, i32 %91];
    i32 %230 = add i32 %90, i32 -1;
    i1 %231 = scmp neq i32 %230, i32 0;
    cbr i1 %231(prob = 0.97), ^while.body6, ^b16;
}
