internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to, align 8 { Flexible };
internal [5005 * i32]* @next, align 8 { Flexible };
internal [1005 * i32]* @head, align 8 { Flexible };
internal [1005 * i32]* @vis, align 8 { Flexible };
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = icmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^b3, i32 1] [^b6, i32 1] [^b9, i32 1] [^b12, i32 1] [^b15, i32 1] [^b18, i32 1] [^b21, i32 1] [^b24, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = icmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^b3:
    i1 %18 = icmp eq i32 %tar, i32 %12;
    store i32* %13 with i32 1;
    cbr i1 %18(prob = 0.5), ^b1, ^b4;
  ^b4:
    i32* %19 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    ubr ^while.header1;
  ^while.header1:
    i32 %21 = phi [^b4, i32 %20] [^b5, i32 %29];
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b2;
  ^while.body1:
    i32* %23 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^b6, ^b5;
  ^b5:
    i32* %28 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %21];
    i32 %29 = load i32* %28;
    ubr ^while.header1;
  ^b6:
    i1 %30 = icmp eq i32 %tar, i32 %24;
    store i32* %25 with i32 1;
    cbr i1 %30(prob = 0.5), ^b1, ^b7;
  ^b7:
    i32* %31 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %24];
    i32 %32 = load i32* %31;
    ubr ^while.header2;
  ^while.header2:
    i32 %33 = phi [^b7, i32 %32] [^b8, i32 %41];
    i1 %34 = icmp neq i32 %33, i32 -1;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^b5;
  ^while.body2:
    i32* %35 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %33];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i1 %39 = icmp eq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^b9, ^b8;
  ^b8:
    i32* %40 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %33];
    i32 %41 = load i32* %40;
    ubr ^while.header2;
  ^b9:
    i1 %42 = icmp eq i32 %tar, i32 %36;
    store i32* %37 with i32 1;
    cbr i1 %42(prob = 0.5), ^b1, ^b10;
  ^b10:
    i32* %43 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %36];
    i32 %44 = load i32* %43;
    ubr ^while.header3;
  ^while.header3:
    i32 %45 = phi [^b10, i32 %44] [^b11, i32 %53];
    i1 %46 = icmp neq i32 %45, i32 -1;
    cbr i1 %46(prob = 0.984615), ^while.body3, ^b8;
  ^while.body3:
    i32* %47 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %45];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = icmp eq i32 %50, i32 0;
    cbr i1 %51(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32* %52 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %45];
    i32 %53 = load i32* %52;
    ubr ^while.header3;
  ^b12:
    i1 %54 = icmp eq i32 %tar, i32 %48;
    store i32* %49 with i32 1;
    cbr i1 %54(prob = 0.5), ^b1, ^b13;
  ^b13:
    i32* %55 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %48];
    i32 %56 = load i32* %55;
    ubr ^while.header4;
  ^while.header4:
    i32 %57 = phi [^b13, i32 %56] [^b14, i32 %65];
    i1 %58 = icmp neq i32 %57, i32 -1;
    cbr i1 %58(prob = 0.984615), ^while.body4, ^b11;
  ^while.body4:
    i32* %59 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %57];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i1 %63 = icmp eq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^b15, ^b14;
  ^b14:
    i32* %64 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %57];
    i32 %65 = load i32* %64;
    ubr ^while.header4;
  ^b15:
    i1 %66 = icmp eq i32 %tar, i32 %60;
    store i32* %61 with i32 1;
    cbr i1 %66(prob = 0.5), ^b1, ^b16;
  ^b16:
    i32* %67 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %60];
    i32 %68 = load i32* %67;
    ubr ^while.header5;
  ^while.header5:
    i32 %69 = phi [^b16, i32 %68] [^b17, i32 %77];
    i1 %70 = icmp neq i32 %69, i32 -1;
    cbr i1 %70(prob = 0.984615), ^while.body5, ^b14;
  ^while.body5:
    i32* %71 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %69];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = icmp eq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^b18, ^b17;
  ^b17:
    i32* %76 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %69];
    i32 %77 = load i32* %76;
    ubr ^while.header5;
  ^b18:
    i1 %78 = icmp eq i32 %tar, i32 %72;
    store i32* %73 with i32 1;
    cbr i1 %78(prob = 0.5), ^b1, ^b19;
  ^b19:
    i32* %79 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %72];
    i32 %80 = load i32* %79;
    ubr ^while.header6;
  ^while.header6:
    i32 %81 = phi [^b19, i32 %80] [^b20, i32 %89];
    i1 %82 = icmp neq i32 %81, i32 -1;
    cbr i1 %82(prob = 0.984615), ^while.body6, ^b17;
  ^while.body6:
    i32* %83 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %81];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i1 %87 = icmp eq i32 %86, i32 0;
    cbr i1 %87(prob = 0.5), ^b21, ^b20;
  ^b20:
    i32* %88 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %81];
    i32 %89 = load i32* %88;
    ubr ^while.header6;
  ^b21:
    i1 %90 = icmp eq i32 %tar, i32 %84;
    store i32* %85 with i32 1;
    cbr i1 %90(prob = 0.5), ^b1, ^b22;
  ^b22:
    i32* %91 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %84];
    i32 %92 = load i32* %91;
    ubr ^while.header7;
  ^while.header7:
    i32 %93 = phi [^b22, i32 %92] [^b23, i32 %101];
    i1 %94 = icmp neq i32 %93, i32 -1;
    cbr i1 %94(prob = 0.984615), ^while.body7, ^b20;
  ^while.body7:
    i32* %95 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %93];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %96];
    i32 %98 = load i32* %97;
    i1 %99 = icmp eq i32 %98, i32 0;
    cbr i1 %99(prob = 0.5), ^b24, ^b23;
  ^b23:
    i32* %100 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %93];
    i32 %101 = load i32* %100;
    ubr ^while.header7;
  ^b24:
    i32 %102 = call (i32, i32) -> i32 @same(i32 %96, i32 %tar);
    i1 %103 = icmp neq i32 %102, i32 0;
    cbr i1 %103(prob = 0.5), ^b1, ^b23;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %4 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^13;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %12];
    i32 %8 = call () -> i32 @getch();
    i32 %9 = add i32 %8, i32 -48;
    i1 %10 = icmp ugt i32 %9, i32 9;
    i1 %11 = icmp eq i32 %6, i32 45;
    i32 %12 = select i1 %11 ? i32 1 : i32 %7;
    cbr i1 %10(prob = 0.984615), ^while.body, ^13;
  ^13:
    i32 %14 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %15 = phi [^entry, i32 0] [^while.body, i32 %12];
    i32 %16 = add i32 %14, i32 -48;
    i1 %17 = icmp ult i32 %16, i32 10;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %18 = phi [^13, i32 %14] [^while.body1, i32 %20];
    i32 %19 = phi [^13, i32 0] [^while.body1, i32 %25];
    i32 %20 = call () -> i32 @getch();
    i32 %21 = add i32 %20, i32 -48;
    i1 %22 = icmp ult i32 %21, i32 10;
    i32 %23 = mul i32 %19, i32 10;
    i32 %24 = add i32 %23, i32 -48;
    i32 %25 = add i32 %18, i32 %24;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %26 = phi [^13, i32 0] [^while.body1, i32 %25];
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -48;
    i1 %29 = icmp ugt i32 %28, i32 9;
    i1 %30 = icmp neq i32 %15, i32 0;
    i32 %31 = neg i32 %26;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %26;
    i32 %33 = add i32 %32, i32 1;
    i1 %34 = icmp sgt i32 %33, i32 4;
    i32 %35 = add i32 %32, i32 -2;
    i1 %36 = icmp sgt i32 %35, i32 16;
    i1 %37 = icmp sgt i32 %32, i32 0;
    i32 %38 = add i32 %32, i32 -17;
    cbr i1 %29(prob = 0.984615), ^while.body2, ^46;
  ^while.body2:
    i32 %39 = phi [^b, i32 %27] [^while.body2, i32 %41];
    i32 %40 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %41 = call () -> i32 @getch();
    i32 %42 = add i32 %41, i32 -48;
    i1 %43 = icmp ugt i32 %42, i32 9;
    i1 %44 = icmp eq i32 %39, i32 45;
    i32 %45 = select i1 %44 ? i32 1 : i32 %40;
    cbr i1 %43(prob = 0.984615), ^while.body2, ^46;
  ^46:
    i32 %47 = phi [^b, i32 %27] [^while.body2, i32 %41];
    i32 %48 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %51 = phi [^46, i32 0] [^while.body3, i32 %63];
    i1 %52 = icmp neq i32 %48, i32 0;
    i32 %53 = neg i32 %51;
    i32 %54 = select i1 %52 ? i32 %53 : i32 %51;
    [1005 * i32]* %55 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    ubr ^while.body4;
  ^while.body3:
    i32 %56 = phi [^46, i32 %47] [^while.body3, i32 %58];
    i32 %57 = phi [^46, i32 0] [^while.body3, i32 %63];
    i32 %58 = call () -> i32 @getch();
    i32 %59 = add i32 %58, i32 -48;
    i1 %60 = icmp ult i32 %59, i32 10;
    i32 %61 = mul i32 %57, i32 10;
    i32 %62 = add i32 %61, i32 -48;
    i32 %63 = add i32 %56, i32 %62;
    cbr i1 %60(prob = 0.984615), ^while.body3, ^b1;
  ^while.body4:
    i32 %64 = phi [^b1, i32 0] [^while.body4, i32 %129];
    i32* %65 = getelementptr &([1005 * i32]* %55)[i64 0][i32 %64];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %65)[i64 1];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %65)[i64 2];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %65)[i64 3];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %65)[i64 4];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %65)[i64 5];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %65)[i64 6];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %65)[i64 7];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %65)[i64 8];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %65)[i64 9];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %65)[i64 10];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %65)[i64 11];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %65)[i64 12];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %65)[i64 13];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %65)[i64 14];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %65)[i64 15];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %65)[i64 16];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %65)[i64 17];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %65)[i64 18];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %65)[i64 19];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %65)[i64 20];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %65)[i64 21];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %65)[i64 22];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %65)[i64 23];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %65)[i64 24];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %65)[i64 25];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %65)[i64 26];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %65)[i64 27];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %65)[i64 28];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %65)[i64 29];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %65)[i64 30];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %65)[i64 31];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %65)[i64 32];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %65)[i64 33];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %65)[i64 34];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %65)[i64 35];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %65)[i64 36];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %65)[i64 37];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %65)[i64 38];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %65)[i64 39];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %65)[i64 40];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %65)[i64 41];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %65)[i64 42];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %65)[i64 43];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %65)[i64 44];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %65)[i64 45];
    store i32* %110 with i32 -1;
    i32* %111 = getelementptr &(i32* %65)[i64 46];
    store i32* %111 with i32 -1;
    i32* %112 = getelementptr &(i32* %65)[i64 47];
    store i32* %112 with i32 -1;
    i32* %113 = getelementptr &(i32* %65)[i64 48];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %65)[i64 49];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %65)[i64 50];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %65)[i64 51];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %65)[i64 52];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %65)[i64 53];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %65)[i64 54];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %65)[i64 55];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %65)[i64 56];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %65)[i64 57];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %65)[i64 58];
    store i32* %123 with i32 -1;
    i32* %124 = getelementptr &(i32* %65)[i64 59];
    store i32* %124 with i32 -1;
    i32* %125 = getelementptr &(i32* %65)[i64 60];
    store i32* %125 with i32 -1;
    i32* %126 = getelementptr &(i32* %65)[i64 61];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %65)[i64 62];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %65)[i64 63];
    store i32* %128 with i32 -1;
    i32 %129 = add i32 %64, i32 64;
    i1 %130 = icmp slt i32 %129, i32 960;
    cbr i1 %130(prob = 0.933333), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %131 = getelementptr &(i32* %65)[i64 64];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %65)[i64 65];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %65)[i64 66];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %65)[i64 67];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %65)[i64 68];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %65)[i64 69];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %65)[i64 70];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %65)[i64 71];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %65)[i64 72];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %65)[i64 73];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %65)[i64 74];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %65)[i64 75];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %65)[i64 76];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %65)[i64 77];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %65)[i64 78];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %65)[i64 79];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %65)[i64 80];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %65)[i64 81];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %65)[i64 82];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %65)[i64 83];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %65)[i64 84];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %65)[i64 85];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %65)[i64 86];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %65)[i64 87];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %65)[i64 88];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %65)[i64 89];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %65)[i64 90];
    store i32* %157 with i32 -1;
    i32* %158 = getelementptr &(i32* %65)[i64 91];
    store i32* %158 with i32 -1;
    i32* %159 = getelementptr &(i32* %65)[i64 92];
    store i32* %159 with i32 -1;
    i32* %160 = getelementptr &(i32* %65)[i64 93];
    store i32* %160 with i32 -1;
    i32* %161 = getelementptr &(i32* %65)[i64 94];
    store i32* %161 with i32 -1;
    i32* %162 = getelementptr &(i32* %65)[i64 95];
    store i32* %162 with i32 -1;
    i32* %163 = getelementptr &(i32* %65)[i64 96];
    store i32* %163 with i32 -1;
    i32* %164 = getelementptr &(i32* %65)[i64 97];
    store i32* %164 with i32 -1;
    i32* %165 = getelementptr &(i32* %65)[i64 98];
    store i32* %165 with i32 -1;
    i32* %166 = getelementptr &(i32* %65)[i64 99];
    store i32* %166 with i32 -1;
    i32* %167 = getelementptr &(i32* %65)[i64 100];
    store i32* %167 with i32 -1;
    i32* %168 = getelementptr &(i32* %65)[i64 101];
    store i32* %168 with i32 -1;
    i32* %169 = getelementptr &(i32* %65)[i64 102];
    store i32* %169 with i32 -1;
    i32* %170 = getelementptr &(i32* %65)[i64 103];
    store i32* %170 with i32 -1;
    i32* %171 = getelementptr &(i32* %65)[i64 104];
    store i32* %171 with i32 -1;
    i32* %172 = getelementptr &(i32* %65)[i64 105];
    store i32* %172 with i32 -1;
    i32* %173 = getelementptr &(i32* %65)[i64 106];
    store i32* %173 with i32 -1;
    i32* %174 = getelementptr &(i32* %65)[i64 107];
    store i32* %174 with i32 -1;
    i32* %175 = getelementptr &(i32* %65)[i64 108];
    store i32* %175 with i32 -1;
    i1 %176 = icmp neq i32 %54, i32 0;
    cbr i1 %176(prob = 0.984615), ^while.body6, ^b2;
  ^while.body6:
    i32 %177 = phi [^while.body5, i32 %54] [^while.body6, i32 %177] [^b9, i32 %304];
    i32 %178 = phi [^while.body5, i32 0] [^while.body6, i32 %178] [^b9, i32 %303];
    i32 %179 = call () -> i32 @getch();
    i1 %180 = icmp neq i32 %179, i32 81;
    i1 %181 = icmp neq i32 %179, i32 85;
    i1 %182 = and i1 %180, i1 %181;
    cbr i1 %182(prob = 0.984615), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %183 = icmp eq i32 %179, i32 81;
    cbr i1 %183(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %184 = call () -> i32 @getch();
    i32 %185 = add i32 %184, i32 -48;
    i1 %186 = icmp ugt i32 %185, i32 9;
    cbr i1 %186(prob = 0.984615), ^while.body7, ^197;
  ^if.else:
    i32 %187 = call () -> i32 @getch();
    i32 %188 = add i32 %187, i32 -48;
    i1 %189 = icmp ugt i32 %188, i32 9;
    cbr i1 %189(prob = 0.984615), ^while.body8, ^209;
  ^while.body7:
    i32 %190 = phi [^if.then, i32 %184] [^while.body7, i32 %192];
    i32 %191 = phi [^if.then, i32 0] [^while.body7, i32 %196];
    i32 %192 = call () -> i32 @getch();
    i32 %193 = add i32 %192, i32 -48;
    i1 %194 = icmp ugt i32 %193, i32 9;
    i1 %195 = icmp eq i32 %190, i32 45;
    i32 %196 = select i1 %195 ? i32 1 : i32 %191;
    cbr i1 %194(prob = 0.984615), ^while.body7, ^197;
  ^197:
    i32 %198 = phi [^if.then, i32 %184] [^while.body7, i32 %192];
    i32 %199 = phi [^if.then, i32 0] [^while.body7, i32 %196];
    i32 %200 = add i32 %198, i32 -48;
    i1 %201 = icmp ult i32 %200, i32 10;
    cbr i1 %201(prob = 0.984615), ^while.body9, ^b4;
  ^while.body8:
    i32 %202 = phi [^if.else, i32 %187] [^while.body8, i32 %204];
    i32 %203 = phi [^if.else, i32 0] [^while.body8, i32 %208];
    i32 %204 = call () -> i32 @getch();
    i32 %205 = add i32 %204, i32 -48;
    i1 %206 = icmp ugt i32 %205, i32 9;
    i1 %207 = icmp eq i32 %202, i32 45;
    i32 %208 = select i1 %207 ? i32 1 : i32 %203;
    cbr i1 %206(prob = 0.984615), ^while.body8, ^209;
  ^209:
    i32 %210 = phi [^if.else, i32 %187] [^while.body8, i32 %204];
    i32 %211 = phi [^if.else, i32 0] [^while.body8, i32 %208];
    i32 %212 = add i32 %210, i32 -48;
    i1 %213 = icmp ult i32 %212, i32 10;
    cbr i1 %213(prob = 0.984615), ^while.body10, ^b5;
  ^while.body9:
    i32 %214 = phi [^197, i32 %198] [^while.body9, i32 %216];
    i32 %215 = phi [^197, i32 0] [^while.body9, i32 %221];
    i32 %216 = call () -> i32 @getch();
    i32 %217 = add i32 %216, i32 -48;
    i1 %218 = icmp ult i32 %217, i32 10;
    i32 %219 = mul i32 %215, i32 10;
    i32 %220 = add i32 %219, i32 -48;
    i32 %221 = add i32 %214, i32 %220;
    cbr i1 %218(prob = 0.984615), ^while.body9, ^b4;
  ^b4:
    i32 %222 = phi [^197, i32 0] [^while.body9, i32 %221];
    i32 %223 = call () -> i32 @getch();
    i32 %224 = add i32 %223, i32 -48;
    i1 %225 = icmp ugt i32 %224, i32 9;
    i1 %226 = icmp neq i32 %199, i32 0;
    i32 %227 = neg i32 %222;
    i32 %228 = select i1 %226 ? i32 %227 : i32 %222;
    cbr i1 %225(prob = 0.984615), ^while.body11, ^251;
  ^while.body10:
    i32 %229 = phi [^209, i32 %210] [^while.body10, i32 %231];
    i32 %230 = phi [^209, i32 0] [^while.body10, i32 %236];
    i32 %231 = call () -> i32 @getch();
    i32 %232 = add i32 %231, i32 -48;
    i1 %233 = icmp ult i32 %232, i32 10;
    i32 %234 = mul i32 %230, i32 10;
    i32 %235 = add i32 %234, i32 -48;
    i32 %236 = add i32 %229, i32 %235;
    cbr i1 %233(prob = 0.984615), ^while.body10, ^b5;
  ^b5:
    i32 %237 = phi [^209, i32 0] [^while.body10, i32 %236];
    i32 %238 = call () -> i32 @getch();
    i32 %239 = add i32 %238, i32 -48;
    i1 %240 = icmp ugt i32 %239, i32 9;
    i1 %241 = icmp neq i32 %211, i32 0;
    i32 %242 = neg i32 %237;
    i32 %243 = select i1 %241 ? i32 %242 : i32 %237;
    cbr i1 %240(prob = 0.984615), ^while.body12, ^263;
  ^while.body11:
    i32 %244 = phi [^b4, i32 %223] [^while.body11, i32 %246];
    i32 %245 = phi [^b4, i32 0] [^while.body11, i32 %250];
    i32 %246 = call () -> i32 @getch();
    i32 %247 = add i32 %246, i32 -48;
    i1 %248 = icmp ugt i32 %247, i32 9;
    i1 %249 = icmp eq i32 %244, i32 45;
    i32 %250 = select i1 %249 ? i32 1 : i32 %245;
    cbr i1 %248(prob = 0.984615), ^while.body11, ^251;
  ^251:
    i32 %252 = phi [^b4, i32 %223] [^while.body11, i32 %246];
    i32 %253 = phi [^b4, i32 0] [^while.body11, i32 %250];
    i32 %254 = add i32 %252, i32 -48;
    i1 %255 = icmp ult i32 %254, i32 10;
    cbr i1 %255(prob = 0.984615), ^while.body13, ^b7;
  ^while.body12:
    i32 %256 = phi [^b5, i32 %238] [^while.body12, i32 %258];
    i32 %257 = phi [^b5, i32 0] [^while.body12, i32 %262];
    i32 %258 = call () -> i32 @getch();
    i32 %259 = add i32 %258, i32 -48;
    i1 %260 = icmp ugt i32 %259, i32 9;
    i1 %261 = icmp eq i32 %256, i32 45;
    i32 %262 = select i1 %261 ? i32 1 : i32 %257;
    cbr i1 %260(prob = 0.984615), ^while.body12, ^263;
  ^263:
    i32 %264 = phi [^b5, i32 %238] [^while.body12, i32 %258];
    i32 %265 = phi [^b5, i32 0] [^while.body12, i32 %262];
    i32 %266 = add i32 %264, i32 -48;
    i1 %267 = icmp ult i32 %266, i32 10;
    cbr i1 %267(prob = 0.984615), ^while.body14, ^b6;
  ^while.body13:
    i32 %268 = phi [^251, i32 %252] [^while.body13, i32 %270];
    i32 %269 = phi [^251, i32 0] [^while.body13, i32 %275];
    i32 %270 = call () -> i32 @getch();
    i32 %271 = add i32 %270, i32 -48;
    i1 %272 = icmp ult i32 %271, i32 10;
    i32 %273 = mul i32 %269, i32 10;
    i32 %274 = add i32 %273, i32 -48;
    i32 %275 = add i32 %268, i32 %274;
    cbr i1 %272(prob = 0.984615), ^while.body13, ^b7;
  ^b6:
    i32 %276 = phi [^263, i32 0] [^while.body14, i32 %301];
    i1 %277 = icmp neq i32 %265, i32 0;
    i32 %278 = neg i32 %276;
    i32 %279 = select i1 %277 ? i32 %278 : i32 %276;
    i32* %280 = getelementptr &([5005 * i32]* %4)[i64 0][i32 %178];
    store i32* %280 with i32 %279;
    i32* %281 = getelementptr &([1005 * i32]* %55)[i64 0][i32 %243];
    i32 %282 = load i32* %281;
    i32* %283 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %178];
    store i32* %283 with i32 %282;
    i32* %284 = getelementptr &([1005 * i32]* %55)[i64 0][i32 %279];
    store i32* %281 with i32 %178;
    i32* %285 = getelementptr &(i32* %280)[i64 1];
    store i32* %285 with i32 %243;
    i32 %286 = load i32* %284;
    i32* %287 = getelementptr &(i32* %283)[i64 1];
    store i32* %287 with i32 %286;
    i32 %288 = add i32 %178, i32 1;
    store i32* %284 with i32 %288;
    i32 %289 = add i32 %178, i32 2;
    ubr ^b9;
  ^b7:
    i32 %290 = phi [^251, i32 0] [^while.body13, i32 %275];
    i1 %291 = icmp neq i32 %253, i32 0;
    i32 %292 = neg i32 %290;
    i32 %293 = select i1 %291 ? i32 %292 : i32 %290;
    cbr i1 %37(prob = 0.984615), ^super.header, ^b8;
  ^while.body14:
    i32 %294 = phi [^263, i32 %264] [^while.body14, i32 %296];
    i32 %295 = phi [^263, i32 0] [^while.body14, i32 %301];
    i32 %296 = call () -> i32 @getch();
    i32 %297 = add i32 %296, i32 -48;
    i1 %298 = icmp ult i32 %297, i32 10;
    i32 %299 = mul i32 %295, i32 10;
    i32 %300 = add i32 %299, i32 -48;
    i32 %301 = add i32 %294, i32 %300;
    cbr i1 %298(prob = 0.984615), ^while.body14, ^b6;
  ^b8:
    i32 %302 = call (i32, i32) -> i32 @same(i32 %228, i32 %293);
    call (i32) -> void @putint(i32 %302);
    call (i32) -> void @putch(i32 10);
    ubr ^b9;
  ^super.header:
    cbr i1 %34(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b9:
    i32 %303 = phi [^b6, i32 %289] [^b8, i32 %178];
    i32 %304 = add i32 %177, i32 -1;
    i1 %305 = icmp neq i32 %304, i32 0;
    cbr i1 %305(prob = 0.984615), ^while.body6, ^b2;
  ^super.header1:
    cbr i1 %36(prob = 0.941176), ^while.body15, ^scalar.header1;
  ^scalar.header:
    i32 %306 = phi [^super.header, i32 1] [^scalar.header1, i32 %328] [^while.body17, i32 %339];
    i1 %307 = icmp sgt i32 %33, i32 %306;
    cbr i1 %307(prob = 0.75), ^while.body16, ^b8;
  ^while.body15:
    i32 %308 = phi [^super.header1, i32 1] [^while.body15, i32 %325];
    i32* %309 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %308];
    store i32* %309 with i32 0;
    i32* %310 = getelementptr &(i32* %309)[i64 1];
    store i32* %310 with i32 0;
    i32* %311 = getelementptr &(i32* %309)[i64 2];
    store i32* %311 with i32 0;
    i32* %312 = getelementptr &(i32* %309)[i64 3];
    store i32* %312 with i32 0;
    i32* %313 = getelementptr &(i32* %309)[i64 4];
    store i32* %313 with i32 0;
    i32* %314 = getelementptr &(i32* %309)[i64 5];
    store i32* %314 with i32 0;
    i32* %315 = getelementptr &(i32* %309)[i64 6];
    store i32* %315 with i32 0;
    i32* %316 = getelementptr &(i32* %309)[i64 7];
    store i32* %316 with i32 0;
    i32* %317 = getelementptr &(i32* %309)[i64 8];
    store i32* %317 with i32 0;
    i32* %318 = getelementptr &(i32* %309)[i64 9];
    store i32* %318 with i32 0;
    i32* %319 = getelementptr &(i32* %309)[i64 10];
    store i32* %319 with i32 0;
    i32* %320 = getelementptr &(i32* %309)[i64 11];
    store i32* %320 with i32 0;
    i32* %321 = getelementptr &(i32* %309)[i64 12];
    store i32* %321 with i32 0;
    i32* %322 = getelementptr &(i32* %309)[i64 13];
    store i32* %322 with i32 0;
    i32* %323 = getelementptr &(i32* %309)[i64 14];
    store i32* %323 with i32 0;
    i32* %324 = getelementptr &(i32* %309)[i64 15];
    store i32* %324 with i32 0;
    i32 %325 = add i32 %308, i32 16;
    i1 %326 = icmp sgt i32 %38, i32 %325;
    cbr i1 %326(prob = 0.941176), ^while.body15, ^scalar.header1;
  ^scalar.header1:
    i32 %327 = phi [^super.header1, i32 1] [^while.body15, i32 %325];
    i32 %328 = phi [^super.header1, i32 undef] [^while.body15, i32 %325];
    i1 %329 = icmp sgt i32 %35, i32 %327;
    cbr i1 %329(prob = 0.75), ^while.body17, ^scalar.header;
  ^while.body16 {scalar}:
    i32 %330 = phi [^scalar.header, i32 %306] [^while.body16, i32 %332];
    i32* %331 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %330];
    store i32* %331 with i32 0;
    i32 %332 = add i32 %330, i32 1;
    i1 %333 = icmp sgt i32 %33, i32 %332;
    cbr i1 %333(prob = 0.75), ^while.body16, ^b8;
  ^while.body17 {scalar}:
    i32 %334 = phi [^scalar.header1, i32 %327] [^while.body17, i32 %339];
    i32* %335 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %334];
    store i32* %335 with i32 0;
    i32* %336 = getelementptr &(i32* %335)[i64 1];
    store i32* %336 with i32 0;
    i32* %337 = getelementptr &(i32* %335)[i64 2];
    store i32* %337 with i32 0;
    i32* %338 = getelementptr &(i32* %335)[i64 3];
    store i32* %338 with i32 0;
    i32 %339 = add i32 %334, i32 4;
    i1 %340 = icmp sgt i32 %35, i32 %339;
    cbr i1 %340(prob = 0.75), ^while.body17, ^scalar.header;
}
