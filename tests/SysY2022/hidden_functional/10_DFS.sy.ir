internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = scmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^b3, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = scmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^b3:
    i32 %18 = call (i32, i32) -> i32 @same(i32 %12, i32 %tar);
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^b1, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32 %10 = call () -> i32 @getch();
    i1 %11 = scmp lt i32 %10, i32 48;
    i1 %12 = scmp gt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    i1 %14 = scmp eq i32 %8, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %9;
    cbr i1 %13(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %16 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %17 = phi [^entry, i32 0] [^while.body, i32 %15];
    i1 %18 = scmp gt i32 %16, i32 47;
    i1 %19 = scmp le i32 %16, i32 57;
    i1 %20 = and i1 %18, i1 %19;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body1, i32 %29];
    i32 %22 = phi [^indirect, i32 %16] [^while.body1, i32 %23];
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %23, i32 47;
    i1 %25 = scmp le i32 %23, i32 57;
    i1 %26 = and i1 %24, i1 %25;
    i32 %27 = mul i32 %21, i32 10;
    i32 %28 = add i32 %27, i32 -48;
    i32 %29 = add i32 %28, i32 %22;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %30 = phi [^indirect, i32 0] [^while.body1, i32 %29];
    i32 %31 = call () -> i32 @getch();
    i1 %32 = scmp lt i32 %31, i32 48;
    i1 %33 = scmp gt i32 %31, i32 57;
    i1 %34 = or i1 %32, i1 %33;
    i32 %35 = neg i32 %30;
    i1 %36 = scmp neq i32 %17, i32 0;
    i32 %37 = select i1 %36 ? i32 %35 : i32 %30;
    i1 %38 = scmp gt i32 %37, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %39 = phi [^b, i32 %31] [^while.body2, i32 %41];
    i32 %40 = phi [^b, i32 0] [^while.body2, i32 %46];
    i32 %41 = call () -> i32 @getch();
    i1 %42 = scmp lt i32 %41, i32 48;
    i1 %43 = scmp gt i32 %41, i32 57;
    i1 %44 = or i1 %42, i1 %43;
    i1 %45 = scmp eq i32 %39, i32 45;
    i32 %46 = select i1 %45 ? i32 1 : i32 %40;
    cbr i1 %44(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %47 = phi [^b, i32 %31] [^while.body2, i32 %41];
    i32 %48 = phi [^b, i32 0] [^while.body2, i32 %46];
    i1 %49 = scmp gt i32 %47, i32 47;
    i1 %50 = scmp le i32 %47, i32 57;
    i1 %51 = and i1 %49, i1 %50;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %52 = phi [^indirect1, i32 0] [^while.body3, i32 %64];
    i32 %53 = neg i32 %52;
    i1 %54 = scmp neq i32 %48, i32 0;
    i32 %55 = select i1 %54 ? i32 %53 : i32 %52;
    ubr ^while.body4;
  ^while.body3:
    i32 %56 = phi [^indirect1, i32 0] [^while.body3, i32 %64];
    i32 %57 = phi [^indirect1, i32 %47] [^while.body3, i32 %58];
    i32 %58 = call () -> i32 @getch();
    i1 %59 = scmp gt i32 %58, i32 47;
    i1 %60 = scmp le i32 %58, i32 57;
    i1 %61 = and i1 %59, i1 %60;
    i32 %62 = mul i32 %56, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %63, i32 %57;
    cbr i1 %61(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %65 = phi [^b1, i32 0] [^while.body4, i32 %82];
    i32* %66 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %65];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %66)[i64 1];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %66)[i64 2];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %66)[i64 3];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %66)[i64 4];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %66)[i64 5];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %66)[i64 6];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %66)[i64 7];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %66)[i64 8];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %66)[i64 9];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %66)[i64 10];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %66)[i64 11];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %66)[i64 12];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %66)[i64 13];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %66)[i64 14];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %66)[i64 15];
    store i32* %81 with i32 -1;
    i32 %82 = add i32 %65, i32 16;
    i1 %83 = scmp lt i32 %82, i32 992;
    cbr i1 %83(prob = 0.98), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %84 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %82];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %84)[i64 1];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %84)[i64 2];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %84)[i64 3];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %84)[i64 4];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %84)[i64 5];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %84)[i64 6];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %84)[i64 7];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %84)[i64 8];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %84)[i64 9];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %84)[i64 10];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %84)[i64 11];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %84)[i64 12];
    store i32* %96 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %97 = phi [^while.body5, i32 %55] [^b8, i32 %242];
    i32 %98 = phi [^while.body5, i32 0] [^b8, i32 %241];
    i1 %99 = scmp neq i32 %97, i32 0;
    cbr i1 %99(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %100 = call () -> i32 @getch();
    i1 %101 = scmp neq i32 %100, i32 81;
    i1 %102 = scmp neq i32 %100, i32 85;
    i1 %103 = and i1 %101, i1 %102;
    cbr i1 %103(prob = 0.97), ^while.body7, ^b3;
  ^b2:
    ret i32 0;
  ^while.body7:
    i32 %104 = call () -> i32 @getch();
    i1 %105 = scmp neq i32 %104, i32 81;
    i1 %106 = scmp neq i32 %104, i32 85;
    i1 %107 = and i1 %105, i1 %106;
    cbr i1 %107(prob = 0.97), ^while.body7, ^b3;
  ^b3:
    i32 %108 = phi [^while.body6, i32 %100] [^while.body7, i32 %104];
    i1 %109 = scmp eq i32 %108, i32 81;
    cbr i1 %109(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %110 = call () -> i32 @getch();
    i1 %111 = scmp lt i32 %110, i32 48;
    i1 %112 = scmp gt i32 %110, i32 57;
    i1 %113 = or i1 %111, i1 %112;
    cbr i1 %113(prob = 0.97), ^while.body8, ^indirect2;
  ^entry2:
    i32 %114 = call () -> i32 @getch();
    i1 %115 = scmp lt i32 %114, i32 48;
    i1 %116 = scmp gt i32 %114, i32 57;
    i1 %117 = or i1 %115, i1 %116;
    cbr i1 %117(prob = 0.97), ^while.body9, ^indirect3;
  ^while.body8:
    i32 %118 = phi [^entry1, i32 %110] [^while.body8, i32 %120];
    i32 %119 = phi [^entry1, i32 0] [^while.body8, i32 %125];
    i32 %120 = call () -> i32 @getch();
    i1 %121 = scmp lt i32 %120, i32 48;
    i1 %122 = scmp gt i32 %120, i32 57;
    i1 %123 = or i1 %121, i1 %122;
    i1 %124 = scmp eq i32 %118, i32 45;
    i32 %125 = select i1 %124 ? i32 1 : i32 %119;
    cbr i1 %123(prob = 0.97), ^while.body8, ^indirect2;
  ^indirect2:
    i32 %126 = phi [^entry1, i32 %110] [^while.body8, i32 %120];
    i32 %127 = phi [^entry1, i32 0] [^while.body8, i32 %125];
    i1 %128 = scmp gt i32 %126, i32 47;
    i1 %129 = scmp le i32 %126, i32 57;
    i1 %130 = and i1 %128, i1 %129;
    cbr i1 %130(prob = 0.97), ^while.body10, ^b4;
  ^while.body9:
    i32 %131 = phi [^entry2, i32 %114] [^while.body9, i32 %133];
    i32 %132 = phi [^entry2, i32 0] [^while.body9, i32 %138];
    i32 %133 = call () -> i32 @getch();
    i1 %134 = scmp lt i32 %133, i32 48;
    i1 %135 = scmp gt i32 %133, i32 57;
    i1 %136 = or i1 %134, i1 %135;
    i1 %137 = scmp eq i32 %131, i32 45;
    i32 %138 = select i1 %137 ? i32 1 : i32 %132;
    cbr i1 %136(prob = 0.97), ^while.body9, ^indirect3;
  ^indirect3:
    i32 %139 = phi [^entry2, i32 %114] [^while.body9, i32 %133];
    i32 %140 = phi [^entry2, i32 0] [^while.body9, i32 %138];
    i1 %141 = scmp gt i32 %139, i32 47;
    i1 %142 = scmp le i32 %139, i32 57;
    i1 %143 = and i1 %141, i1 %142;
    cbr i1 %143(prob = 0.97), ^while.body11, ^b5;
  ^while.body10:
    i32 %144 = phi [^indirect2, i32 0] [^while.body10, i32 %152];
    i32 %145 = phi [^indirect2, i32 %126] [^while.body10, i32 %146];
    i32 %146 = call () -> i32 @getch();
    i1 %147 = scmp gt i32 %146, i32 47;
    i1 %148 = scmp le i32 %146, i32 57;
    i1 %149 = and i1 %147, i1 %148;
    i32 %150 = mul i32 %144, i32 10;
    i32 %151 = add i32 %150, i32 -48;
    i32 %152 = add i32 %151, i32 %145;
    cbr i1 %149(prob = 0.97), ^while.body10, ^b4;
  ^b4:
    i32 %153 = phi [^indirect2, i32 0] [^while.body10, i32 %152];
    i32 %154 = call () -> i32 @getch();
    i1 %155 = scmp lt i32 %154, i32 48;
    i1 %156 = scmp gt i32 %154, i32 57;
    i1 %157 = or i1 %155, i1 %156;
    i32 %158 = neg i32 %153;
    i1 %159 = scmp neq i32 %127, i32 0;
    i32 %160 = select i1 %159 ? i32 %158 : i32 %153;
    cbr i1 %157(prob = 0.97), ^while.body12, ^indirect4;
  ^while.body11:
    i32 %161 = phi [^indirect3, i32 0] [^while.body11, i32 %169];
    i32 %162 = phi [^indirect3, i32 %139] [^while.body11, i32 %163];
    i32 %163 = call () -> i32 @getch();
    i1 %164 = scmp gt i32 %163, i32 47;
    i1 %165 = scmp le i32 %163, i32 57;
    i1 %166 = and i1 %164, i1 %165;
    i32 %167 = mul i32 %161, i32 10;
    i32 %168 = add i32 %167, i32 -48;
    i32 %169 = add i32 %168, i32 %162;
    cbr i1 %166(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %170 = phi [^indirect3, i32 0] [^while.body11, i32 %169];
    i32 %171 = call () -> i32 @getch();
    i1 %172 = scmp lt i32 %171, i32 48;
    i1 %173 = scmp gt i32 %171, i32 57;
    i1 %174 = or i1 %172, i1 %173;
    i32 %175 = neg i32 %170;
    i1 %176 = scmp neq i32 %140, i32 0;
    i32 %177 = select i1 %176 ? i32 %175 : i32 %170;
    cbr i1 %174(prob = 0.97), ^while.body13, ^indirect5;
  ^while.body12:
    i32 %178 = phi [^b4, i32 %154] [^while.body12, i32 %180];
    i32 %179 = phi [^b4, i32 0] [^while.body12, i32 %185];
    i32 %180 = call () -> i32 @getch();
    i1 %181 = scmp lt i32 %180, i32 48;
    i1 %182 = scmp gt i32 %180, i32 57;
    i1 %183 = or i1 %181, i1 %182;
    i1 %184 = scmp eq i32 %178, i32 45;
    i32 %185 = select i1 %184 ? i32 1 : i32 %179;
    cbr i1 %183(prob = 0.97), ^while.body12, ^indirect4;
  ^indirect4:
    i32 %186 = phi [^b4, i32 %154] [^while.body12, i32 %180];
    i32 %187 = phi [^b4, i32 0] [^while.body12, i32 %185];
    i1 %188 = scmp gt i32 %186, i32 47;
    i1 %189 = scmp le i32 %186, i32 57;
    i1 %190 = and i1 %188, i1 %189;
    cbr i1 %190(prob = 0.97), ^while.body14, ^b7;
  ^while.body13:
    i32 %191 = phi [^b5, i32 %171] [^while.body13, i32 %193];
    i32 %192 = phi [^b5, i32 0] [^while.body13, i32 %198];
    i32 %193 = call () -> i32 @getch();
    i1 %194 = scmp lt i32 %193, i32 48;
    i1 %195 = scmp gt i32 %193, i32 57;
    i1 %196 = or i1 %194, i1 %195;
    i1 %197 = scmp eq i32 %191, i32 45;
    i32 %198 = select i1 %197 ? i32 1 : i32 %192;
    cbr i1 %196(prob = 0.97), ^while.body13, ^indirect5;
  ^indirect5:
    i32 %199 = phi [^b5, i32 %171] [^while.body13, i32 %193];
    i32 %200 = phi [^b5, i32 0] [^while.body13, i32 %198];
    i1 %201 = scmp gt i32 %199, i32 47;
    i1 %202 = scmp le i32 %199, i32 57;
    i1 %203 = and i1 %201, i1 %202;
    cbr i1 %203(prob = 0.97), ^while.body15, ^b6;
  ^while.body14:
    i32 %204 = phi [^indirect4, i32 0] [^while.body14, i32 %212];
    i32 %205 = phi [^indirect4, i32 %186] [^while.body14, i32 %206];
    i32 %206 = call () -> i32 @getch();
    i1 %207 = scmp gt i32 %206, i32 47;
    i1 %208 = scmp le i32 %206, i32 57;
    i1 %209 = and i1 %207, i1 %208;
    i32 %210 = mul i32 %204, i32 10;
    i32 %211 = add i32 %210, i32 -48;
    i32 %212 = add i32 %211, i32 %205;
    cbr i1 %209(prob = 0.97), ^while.body14, ^b7;
  ^b6:
    i32 %213 = phi [^indirect5, i32 0] [^while.body15, i32 %239];
    i32 %214 = neg i32 %213;
    i1 %215 = scmp neq i32 %200, i32 0;
    i32 %216 = select i1 %215 ? i32 %214 : i32 %213;
    i32* %217 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %98];
    store i32* %217 with i32 %216;
    i32* %218 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %216];
    i32* %219 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %177];
    i32 %220 = load i32* %219;
    i32* %221 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %98];
    store i32* %221 with i32 %220;
    store i32* %219 with i32 %98;
    i32* %222 = getelementptr &(i32* %217)[i64 1];
    store i32* %222 with i32 %177;
    i32 %223 = load i32* %218;
    i32* %224 = getelementptr &(i32* %221)[i64 1];
    store i32* %224 with i32 %223;
    i32 %225 = add i32 %98, i32 1;
    store i32* %218 with i32 %225;
    i32 %226 = add i32 %98, i32 2;
    ubr ^b8;
  ^b7:
    i32 %227 = phi [^indirect4, i32 0] [^while.body14, i32 %212];
    i32 %228 = neg i32 %227;
    i1 %229 = scmp neq i32 %187, i32 0;
    i32 %230 = select i1 %229 ? i32 %228 : i32 %227;
    cbr i1 %38(prob = 0.97), ^while.body16, ^if.then;
  ^while.body15:
    i32 %231 = phi [^indirect5, i32 0] [^while.body15, i32 %239];
    i32 %232 = phi [^indirect5, i32 %199] [^while.body15, i32 %233];
    i32 %233 = call () -> i32 @getch();
    i1 %234 = scmp gt i32 %233, i32 47;
    i1 %235 = scmp le i32 %233, i32 57;
    i1 %236 = and i1 %234, i1 %235;
    i32 %237 = mul i32 %231, i32 10;
    i32 %238 = add i32 %237, i32 -48;
    i32 %239 = add i32 %238, i32 %232;
    cbr i1 %236(prob = 0.97), ^while.body15, ^b6;
  ^if.then:
    i32 %240 = call (i32, i32) -> i32 @same(i32 %160, i32 %230);
    call (i32) -> void @putint(i32 %240);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
  ^b8:
    i32 %241 = phi [^b6, i32 %226] [^if.then, i32 %98];
    i32 %242 = add i32 %97, i32 -1;
    ubr ^while.header;
  ^while.body16:
    i32 %243 = phi [^b7, i32 1] [^while.body16, i32 %245];
    i32* %244 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %243];
    store i32* %244 with i32 0;
    i32 %245 = add i32 %243, i32 1;
    i1 %246 = scmp le i32 %245, i32 %37;
    cbr i1 %246(prob = 0.97), ^while.body16, ^if.then;
}
