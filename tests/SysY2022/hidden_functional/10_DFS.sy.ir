internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32 %x, i32 %tar, i32* %0, i32* %1, i32* %2) -> i32 {
^entry:
    i1 %3 = scmp eq i32 %x, i32 %tar;
    i32* %4 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %x];
    store i32* %4 with i32 1;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32* %5 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %x];
    i32 %6 = load i32* %5;
    i1 %7 = scmp neq i32 %6, i32 -1;
    cbr i1 %7(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %8 = phi [^entry, i32 1] [^b, i32 0] [^b2, i32 1] [^b3, i32 0];
    ret i32 %8;
^while.body:
    i32 %9 = phi [^b, i32 %6] [^b3, i32 %18];
    i32* %10 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp eq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %15 = call (i32, i32, i32*, i32*, i32*) -> i32 @same(i32 %11, i32 %tar, i32* %0, i32* %1, i32* %2);
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^b1, ^b3;
^b3:
    i32* %17 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %9];
    i32 %18 = load i32* %17;
    i1 %19 = scmp neq i32 %18, i32 -1;
    cbr i1 %19(prob = 0.97), ^while.body, ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    store i32* %cnt with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %5 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %6 = scmp eq i32 %4, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^while.guard:
    i32 %7 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %8 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %9 = scmp gt i32 %7, i32 47;
    i1 %10 = scmp lt i32 %7, i32 58;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.48), ^while.body1, ^b1;
^if.then:
    ubr ^b;
^b:
    i32 %12 = phi [^while.body, i32 %5] [^if.then, i32 1];
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b4, ^b3;
^while.body1:
    i32 %15 = phi [^while.guard, i32 %7] [^b5, i32 %20];
    i32 %16 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i32 %17 = add i32 %15, i32 -48;
    i32 %18 = mul i32 %16, i32 10;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = call () -> i32 @getch();
    i1 %21 = scmp gt i32 %20, i32 47;
    cbr i1 %21(prob = 0.5), ^b2, ^b5;
^b1:
    i32 %22 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i1 %23 = scmp neq i32 %8, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b6;
^b2:
    i1 %24 = scmp le i32 %20, i32 57;
    ubr ^b5;
^b3:
    i1 %25 = scmp gt i32 %13, i32 57;
    ubr ^b4;
^if.then1:
    i32 %26 = neg i32 %22;
    ubr ^b6;
^b4:
    i1 %27 = phi [^b, i1 true] [^b3, i1 %25];
    cbr i1 %27(prob = 0.97), ^while.body, ^while.guard;
^b5:
    i1 %28 = phi [^while.body1, i1 false] [^b2, i1 %24];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
^b6:
    i32 %29 = phi [^b1, i32 %22] [^if.then1, i32 %26];
    store i32* %n with i32 %29;
    i32 %30 = call () -> i32 @getch();
    i1 %31 = scmp lt i32 %30, i32 48;
    i1 %32 = scmp gt i32 %30, i32 57;
    i1 %33 = or i1 %31, i1 %32;
    cbr i1 %33(prob = 0.98), ^while.body2, ^while.guard1;
^while.body2:
    i32 %34 = phi [^b6, i32 %30] [^b11, i32 %43];
    i32 %35 = phi [^b6, i32 0] [^b11, i32 %42];
    i1 %36 = scmp eq i32 %34, i32 45;
    cbr i1 %36(prob = 0.5), ^if.then2, ^b7;
^while.guard1:
    i32 %37 = phi [^b6, i32 %30] [^b11, i32 %43];
    i32 %38 = phi [^b6, i32 0] [^b11, i32 %42];
    i1 %39 = scmp gt i32 %37, i32 47;
    i1 %40 = scmp lt i32 %37, i32 58;
    i1 %41 = and i1 %39, i1 %40;
    cbr i1 %41(prob = 0.48), ^while.body3, ^b8;
^if.then2:
    ubr ^b7;
^b7:
    i32 %42 = phi [^while.body2, i32 %35] [^if.then2, i32 1];
    i32 %43 = call () -> i32 @getch();
    i1 %44 = scmp lt i32 %43, i32 48;
    cbr i1 %44(prob = 0.5), ^b11, ^b10;
^while.body3:
    i32 %45 = phi [^while.guard1, i32 %37] [^b13, i32 %50];
    i32 %46 = phi [^while.guard1, i32 0] [^b13, i32 %49];
    i32 %47 = add i32 %45, i32 -48;
    i32 %48 = mul i32 %46, i32 10;
    i32 %49 = add i32 %47, i32 %48;
    i32 %50 = call () -> i32 @getch();
    i1 %51 = scmp gt i32 %50, i32 47;
    cbr i1 %51(prob = 0.5), ^b9, ^b13;
^b8:
    i32 %52 = phi [^while.guard1, i32 0] [^b13, i32 %49];
    i1 %53 = scmp neq i32 %38, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then3, ^b12;
^b9:
    i1 %54 = scmp le i32 %50, i32 57;
    ubr ^b13;
^b10:
    i1 %55 = scmp gt i32 %43, i32 57;
    ubr ^b11;
^if.then3:
    i32 %56 = neg i32 %52;
    ubr ^b12;
^b11:
    i1 %57 = phi [^b7, i1 true] [^b10, i1 %55];
    cbr i1 %57(prob = 0.97), ^while.body2, ^while.guard1;
^b12:
    i32 %58 = phi [^b8, i32 %52] [^if.then3, i32 %56];
    store i32* %m with i32 %58;
    ubr ^while.body4;
^b13:
    i1 %59 = phi [^while.body3, i1 false] [^b9, i1 %54];
    cbr i1 %59(prob = 0.97), ^while.body3, ^b8;
^while.body4:
    i32 %60 = phi [^b12, i32 0] [^while.body4, i32 %61];
    i32 %61 = add i32 %60, i32 16;
    i1 %62 = scmp lt i32 %61, i32 992;
    i32* %63 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %60];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %63)[i64 1];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %63)[i64 2];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %63)[i64 3];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %63)[i64 4];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %63)[i64 5];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %63)[i64 6];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %63)[i64 7];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %63)[i64 8];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %63)[i64 9];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %63)[i64 10];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %63)[i64 11];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %63)[i64 12];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %63)[i64 13];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %63)[i64 14];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %63)[i64 15];
    store i32* %78 with i32 -1;
    cbr i1 %62(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i1 %79 = scmp neq i32 %58, i32 0;
    i32* %80 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %61];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %80)[i64 1];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %80)[i64 2];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %80)[i64 3];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %80)[i64 4];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %80)[i64 5];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %80)[i64 6];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %80)[i64 7];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %80)[i64 8];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %80)[i64 9];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %80)[i64 10];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %80)[i64 11];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %80)[i64 12];
    store i32* %92 with i32 -1;
    cbr i1 %79(prob = 0.97), ^while.body6, ^b14;
^while.body6:
    i32 %93 = phi [^while.body5, i32 %29] [^b48, i32 %245];
    i32 %94 = phi [^while.body5, i32 %58] [^b48, i32 %248];
    i32 %95 = phi [^while.body5, i32 0] [^b48, i32 %247];
    i32 %96 = call () -> i32 @getch();
    i1 %97 = scmp neq i32 %96, i32 81;
    cbr i1 %97(prob = 0.5), ^b15, ^b16;
^b14:
    ret i32 0;
^b15:
    i1 %98 = scmp neq i32 %96, i32 85;
    ubr ^b16;
^b16:
    i1 %99 = phi [^while.body6, i1 false] [^b15, i1 %98];
    cbr i1 %99(prob = 0.97), ^while.body7, ^b17;
^while.body7:
    i32 %100 = call () -> i32 @getch();
    i1 %101 = scmp neq i32 %100, i32 81;
    cbr i1 %101(prob = 0.5), ^b18, ^b19;
^b17:
    i32 %102 = phi [^b16, i32 %96] [^b19, i32 %100];
    i1 %103 = scmp eq i32 %102, i32 81;
    cbr i1 %103(prob = 0.5), ^entry1, ^entry2;
^b18:
    i1 %104 = scmp neq i32 %100, i32 85;
    ubr ^b19;
^b19:
    i1 %105 = phi [^while.body7, i1 false] [^b18, i1 %104];
    cbr i1 %105(prob = 0.97), ^while.body7, ^b17;
^entry1:
    i32 %106 = call () -> i32 @getch();
    i1 %107 = scmp lt i32 %106, i32 48;
    i1 %108 = scmp gt i32 %106, i32 57;
    i1 %109 = or i1 %107, i1 %108;
    cbr i1 %109(prob = 0.98), ^while.body8, ^while.guard2;
^entry2:
    i32 %110 = call () -> i32 @getch();
    i1 %111 = scmp lt i32 %110, i32 48;
    i1 %112 = scmp gt i32 %110, i32 57;
    i1 %113 = or i1 %111, i1 %112;
    cbr i1 %113(prob = 0.98), ^while.body9, ^while.guard3;
^while.body8:
    i32 %114 = phi [^entry1, i32 %106] [^b27, i32 %131];
    i32 %115 = phi [^entry1, i32 0] [^b27, i32 %130];
    i1 %116 = scmp eq i32 %114, i32 45;
    cbr i1 %116(prob = 0.5), ^if.then4, ^b20;
^while.guard2:
    i32 %117 = phi [^entry1, i32 %106] [^b27, i32 %131];
    i32 %118 = phi [^entry1, i32 0] [^b27, i32 %130];
    i1 %119 = scmp gt i32 %117, i32 47;
    i1 %120 = scmp lt i32 %117, i32 58;
    i1 %121 = and i1 %119, i1 %120;
    cbr i1 %121(prob = 0.48), ^while.body10, ^b21;
^while.body9:
    i32 %122 = phi [^entry2, i32 %110] [^b30, i32 %143];
    i32 %123 = phi [^entry2, i32 0] [^b30, i32 %142];
    i1 %124 = scmp eq i32 %122, i32 45;
    cbr i1 %124(prob = 0.5), ^if.then5, ^b22;
^while.guard3:
    i32 %125 = phi [^entry2, i32 %110] [^b30, i32 %143];
    i32 %126 = phi [^entry2, i32 0] [^b30, i32 %142];
    i1 %127 = scmp gt i32 %125, i32 47;
    i1 %128 = scmp lt i32 %125, i32 58;
    i1 %129 = and i1 %127, i1 %128;
    cbr i1 %129(prob = 0.48), ^while.body11, ^b23;
^if.then4:
    ubr ^b20;
^if.then5:
    ubr ^b22;
^b20:
    i32 %130 = phi [^while.body8, i32 %115] [^if.then4, i32 1];
    i32 %131 = call () -> i32 @getch();
    i1 %132 = scmp lt i32 %131, i32 48;
    cbr i1 %132(prob = 0.5), ^b27, ^b25;
^while.body10:
    i32 %133 = phi [^while.guard2, i32 %117] [^b29, i32 %138];
    i32 %134 = phi [^while.guard2, i32 0] [^b29, i32 %137];
    i32 %135 = add i32 %133, i32 -48;
    i32 %136 = mul i32 %134, i32 10;
    i32 %137 = add i32 %135, i32 %136;
    i32 %138 = call () -> i32 @getch();
    i1 %139 = scmp gt i32 %138, i32 47;
    cbr i1 %139(prob = 0.5), ^b24, ^b29;
^b21:
    i32 %140 = phi [^while.guard2, i32 0] [^b29, i32 %137];
    i1 %141 = scmp neq i32 %118, i32 0;
    cbr i1 %141(prob = 0.5), ^if.then6, ^b31;
^b22:
    i32 %142 = phi [^while.body9, i32 %123] [^if.then5, i32 1];
    i32 %143 = call () -> i32 @getch();
    i1 %144 = scmp lt i32 %143, i32 48;
    cbr i1 %144(prob = 0.5), ^b30, ^b28;
^while.body11:
    i32 %145 = phi [^while.guard3, i32 %125] [^b32, i32 %150];
    i32 %146 = phi [^while.guard3, i32 0] [^b32, i32 %149];
    i32 %147 = add i32 %145, i32 -48;
    i32 %148 = mul i32 %146, i32 10;
    i32 %149 = add i32 %147, i32 %148;
    i32 %150 = call () -> i32 @getch();
    i1 %151 = scmp gt i32 %150, i32 47;
    cbr i1 %151(prob = 0.5), ^b26, ^b32;
^b23:
    i32 %152 = phi [^while.guard3, i32 0] [^b32, i32 %149];
    i1 %153 = scmp neq i32 %126, i32 0;
    cbr i1 %153(prob = 0.5), ^if.then7, ^b33;
^b24:
    i1 %154 = scmp le i32 %138, i32 57;
    ubr ^b29;
^b25:
    i1 %155 = scmp gt i32 %131, i32 57;
    ubr ^b27;
^if.then6:
    i32 %156 = neg i32 %140;
    ubr ^b31;
^b26:
    i1 %157 = scmp le i32 %150, i32 57;
    ubr ^b32;
^b27:
    i1 %158 = phi [^b20, i1 true] [^b25, i1 %155];
    cbr i1 %158(prob = 0.97), ^while.body8, ^while.guard2;
^b28:
    i1 %159 = scmp gt i32 %143, i32 57;
    ubr ^b30;
^if.then7:
    i32 %160 = neg i32 %152;
    ubr ^b33;
^b29:
    i1 %161 = phi [^while.body10, i1 false] [^b24, i1 %154];
    cbr i1 %161(prob = 0.97), ^while.body10, ^b21;
^b30:
    i1 %162 = phi [^b22, i1 true] [^b28, i1 %159];
    cbr i1 %162(prob = 0.97), ^while.body9, ^while.guard3;
^b31:
    i32 %163 = phi [^b21, i32 %140] [^if.then6, i32 %156];
    i32 %164 = call () -> i32 @getch();
    i1 %165 = scmp lt i32 %164, i32 48;
    i1 %166 = scmp gt i32 %164, i32 57;
    i1 %167 = or i1 %165, i1 %166;
    cbr i1 %167(prob = 0.98), ^while.body12, ^while.guard4;
^b32:
    i1 %168 = phi [^while.body11, i1 false] [^b26, i1 %157];
    cbr i1 %168(prob = 0.97), ^while.body11, ^b23;
^b33:
    i32 %169 = phi [^b23, i32 %152] [^if.then7, i32 %160];
    i32 %170 = call () -> i32 @getch();
    i1 %171 = scmp lt i32 %170, i32 48;
    i1 %172 = scmp gt i32 %170, i32 57;
    i1 %173 = or i1 %171, i1 %172;
    cbr i1 %173(prob = 0.98), ^while.body13, ^while.guard5;
^while.body12:
    i32 %174 = phi [^b31, i32 %164] [^b41, i32 %191];
    i32 %175 = phi [^b31, i32 0] [^b41, i32 %190];
    i1 %176 = scmp eq i32 %174, i32 45;
    cbr i1 %176(prob = 0.5), ^if.then8, ^b34;
^while.guard4:
    i32 %177 = phi [^b31, i32 %164] [^b41, i32 %191];
    i32 %178 = phi [^b31, i32 0] [^b41, i32 %190];
    i1 %179 = scmp gt i32 %177, i32 47;
    i1 %180 = scmp lt i32 %177, i32 58;
    i1 %181 = and i1 %179, i1 %180;
    cbr i1 %181(prob = 0.48), ^while.body14, ^b35;
^while.body13:
    i32 %182 = phi [^b33, i32 %170] [^b44, i32 %203];
    i32 %183 = phi [^b33, i32 0] [^b44, i32 %202];
    i1 %184 = scmp eq i32 %182, i32 45;
    cbr i1 %184(prob = 0.5), ^if.then9, ^b36;
^while.guard5:
    i32 %185 = phi [^b33, i32 %170] [^b44, i32 %203];
    i32 %186 = phi [^b33, i32 0] [^b44, i32 %202];
    i1 %187 = scmp gt i32 %185, i32 47;
    i1 %188 = scmp lt i32 %185, i32 58;
    i1 %189 = and i1 %187, i1 %188;
    cbr i1 %189(prob = 0.48), ^while.body15, ^b37;
^if.then8:
    ubr ^b34;
^if.then9:
    ubr ^b36;
^b34:
    i32 %190 = phi [^while.body12, i32 %175] [^if.then8, i32 1];
    i32 %191 = call () -> i32 @getch();
    i1 %192 = scmp lt i32 %191, i32 48;
    cbr i1 %192(prob = 0.5), ^b41, ^b39;
^while.body14:
    i32 %193 = phi [^while.guard4, i32 %177] [^b43, i32 %198];
    i32 %194 = phi [^while.guard4, i32 0] [^b43, i32 %197];
    i32 %195 = add i32 %193, i32 -48;
    i32 %196 = mul i32 %194, i32 10;
    i32 %197 = add i32 %195, i32 %196;
    i32 %198 = call () -> i32 @getch();
    i1 %199 = scmp gt i32 %198, i32 47;
    cbr i1 %199(prob = 0.5), ^b38, ^b43;
^b35:
    i32 %200 = phi [^while.guard4, i32 0] [^b43, i32 %197];
    i1 %201 = scmp neq i32 %178, i32 0;
    cbr i1 %201(prob = 0.5), ^if.then10, ^b46;
^b36:
    i32 %202 = phi [^while.body13, i32 %183] [^if.then9, i32 1];
    i32 %203 = call () -> i32 @getch();
    i1 %204 = scmp lt i32 %203, i32 48;
    cbr i1 %204(prob = 0.5), ^b44, ^b42;
^while.body15:
    i32 %205 = phi [^while.guard5, i32 %185] [^b47, i32 %210];
    i32 %206 = phi [^while.guard5, i32 0] [^b47, i32 %209];
    i32 %207 = add i32 %205, i32 -48;
    i32 %208 = mul i32 %206, i32 10;
    i32 %209 = add i32 %207, i32 %208;
    i32 %210 = call () -> i32 @getch();
    i1 %211 = scmp gt i32 %210, i32 47;
    cbr i1 %211(prob = 0.5), ^b40, ^b47;
^b37:
    i32 %212 = phi [^while.guard5, i32 0] [^b47, i32 %209];
    i1 %213 = scmp neq i32 %186, i32 0;
    cbr i1 %213(prob = 0.5), ^if.then11, ^b45;
^b38:
    i1 %214 = scmp le i32 %198, i32 57;
    ubr ^b43;
^b39:
    i1 %215 = scmp gt i32 %191, i32 57;
    ubr ^b41;
^if.then10:
    i32 %216 = neg i32 %200;
    ubr ^b46;
^b40:
    i1 %217 = scmp le i32 %210, i32 57;
    ubr ^b47;
^b41:
    i1 %218 = phi [^b34, i1 true] [^b39, i1 %215];
    cbr i1 %218(prob = 0.97), ^while.body12, ^while.guard4;
^b42:
    i1 %219 = scmp gt i32 %203, i32 57;
    ubr ^b44;
^if.then11:
    i32 %220 = neg i32 %212;
    ubr ^b45;
^b43:
    i1 %221 = phi [^while.body14, i1 false] [^b38, i1 %214];
    cbr i1 %221(prob = 0.97), ^while.body14, ^b35;
^b44:
    i1 %222 = phi [^b36, i1 true] [^b42, i1 %219];
    cbr i1 %222(prob = 0.97), ^while.body13, ^while.guard5;
^b45:
    i32 %223 = phi [^b37, i32 %212] [^if.then11, i32 %220];
    i32 %224 = add i32 %95, i32 1;
    i32 %225 = add i32 %95, i32 2;
    i32* %226 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %95];
    store i32* %226 with i32 %223;
    i32* %227 = getelementptr &(i32* %226)[i64 1];
    i32* %228 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %95];
    i32* %229 = getelementptr &(i32* %228)[i64 1];
    i32* %230 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %169];
    i32 %231 = load i32* %230;
    store i32* %228 with i32 %231;
    store i32* %230 with i32 %95;
    store i32* %227 with i32 %169;
    i32* %232 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %223];
    i32 %233 = load i32* %232;
    store i32* %229 with i32 %233;
    store i32* %232 with i32 %224;
    store i32* %cnt with i32 %225;
    ubr ^b48;
^b46:
    i32 %234 = phi [^b35, i32 %200] [^if.then10, i32 %216];
    i1 %235 = scmp gt i32 %93, i32 0;
    cbr i1 %235(prob = 0.97), ^while.body16, ^if.then12;
^b47:
    i1 %236 = phi [^while.body15, i1 false] [^b40, i1 %217];
    cbr i1 %236(prob = 0.97), ^while.body15, ^b37;
^if.then12:
    i32 %237 = call (i32, i32, i32*, i32*, i32*) -> i32 @same(i32 %163, i32 %234, i32* %n, i32* %m, i32* %cnt);
    i32 %238 = load i32* %n;
    i32 %239 = load i32* %m;
    i32 %240 = load i32* %cnt;
    call (i32) -> void @putint(i32 %237);
    call (i32) -> void @putch(i32 10);
    ubr ^b48;
^while.body16:
    i32 %241 = phi [^b46, i32 1] [^while.body16, i32 %242];
    i32 %242 = add i32 %241, i32 1;
    i1 %243 = scmp le i32 %242, i32 %93;
    i32* %244 = getelementptr &([1005 * i32]* @vis)[i64 0][i32 %241];
    store i32* %244 with i32 0;
    cbr i1 %243(prob = 0.97), ^while.body16, ^if.then12;
^b48:
    i32 %245 = phi [^b45, i32 %93] [^if.then12, i32 %238];
    i32 %246 = phi [^b45, i32 %94] [^if.then12, i32 %239];
    i32 %247 = phi [^b45, i32 %225] [^if.then12, i32 %240];
    i32 %248 = add i32 %246, i32 -1;
    store i32* %m with i32 %248;
    i1 %249 = scmp neq i32 %248, i32 0;
    cbr i1 %249(prob = 0.97), ^while.body6, ^b14;
}
