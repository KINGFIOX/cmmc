internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to, align 8 { Flexible };
internal [5005 * i32]* @next, align 8 { Flexible };
internal [1005 * i32]* @head, align 8 { Flexible };
internal [1005 * i32]* @vis, align 8 { Flexible };
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = icmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^entry1, i32 1] [^b5, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = icmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^entry1, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^entry1:
    i1 %18 = icmp eq i32 %tar, i32 %12;
    store i32* %13 with i32 1;
    cbr i1 %18(prob = 0.5), ^b1, ^b3;
  ^b3:
    i32* %19 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    ubr ^while.header1;
  ^while.header1:
    i32 %21 = phi [^b3, i32 %20] [^b4, i32 %29];
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b2;
  ^while.body1:
    i32* %23 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^b5, ^b4;
  ^b4:
    i32* %28 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %21];
    i32 %29 = load i32* %28;
    ubr ^while.header1;
  ^b5:
    i32 %30 = call (i32, i32) -> i32 @same(i32 %24, i32 %tar);
    i1 %31 = icmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b1, ^b4;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %4 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %6 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    cbr i1 %2(prob = 0.97), ^while.body, ^14;
  ^while.body:
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %8 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32 %9 = call () -> i32 @getch();
    i32 %10 = add i32 %9, i32 -48;
    i1 %11 = icmp ugt i32 %10, i32 9;
    i1 %12 = icmp eq i32 %7, i32 45;
    i32 %13 = select i1 %12 ? i32 1 : i32 %8;
    cbr i1 %11(prob = 0.97), ^while.body, ^14;
  ^14:
    i32 %15 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %16 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32 %17 = add i32 %15, i32 -48;
    i1 %18 = icmp ult i32 %17, i32 10;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %19 = phi [^14, i32 %15] [^while.body1, i32 %21];
    i32 %20 = phi [^14, i32 0] [^while.body1, i32 %26];
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %21, i32 -48;
    i1 %23 = icmp ult i32 %22, i32 10;
    i32 %24 = mul i32 %20, i32 10;
    i32 %25 = add i32 %24, i32 -48;
    i32 %26 = add i32 %19, i32 %25;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %27 = phi [^14, i32 0] [^while.body1, i32 %26];
    i32 %28 = call () -> i32 @getch();
    i32 %29 = add i32 %28, i32 -48;
    i1 %30 = icmp ugt i32 %29, i32 9;
    i1 %31 = icmp neq i32 %16, i32 0;
    i32 %32 = neg i32 %27;
    i32 %33 = select i1 %31 ? i32 %32 : i32 %27;
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body2, ^42;
  ^while.body2:
    i32 %35 = phi [^b, i32 %28] [^while.body2, i32 %37];
    i32 %36 = phi [^b, i32 0] [^while.body2, i32 %41];
    i32 %37 = call () -> i32 @getch();
    i32 %38 = add i32 %37, i32 -48;
    i1 %39 = icmp ugt i32 %38, i32 9;
    i1 %40 = icmp eq i32 %35, i32 45;
    i32 %41 = select i1 %40 ? i32 1 : i32 %36;
    cbr i1 %39(prob = 0.97), ^while.body2, ^42;
  ^42:
    i32 %43 = phi [^b, i32 %28] [^while.body2, i32 %37];
    i32 %44 = phi [^b, i32 0] [^while.body2, i32 %41];
    i32 %45 = add i32 %43, i32 -48;
    i1 %46 = icmp ult i32 %45, i32 10;
    cbr i1 %46(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %47 = phi [^42, i32 0] [^while.body3, i32 %58];
    i1 %48 = icmp neq i32 %44, i32 0;
    i32 %49 = neg i32 %47;
    i32 %50 = select i1 %48 ? i32 %49 : i32 %47;
    ubr ^while.body4;
  ^while.body3:
    i32 %51 = phi [^42, i32 %43] [^while.body3, i32 %53];
    i32 %52 = phi [^42, i32 0] [^while.body3, i32 %58];
    i32 %53 = call () -> i32 @getch();
    i32 %54 = add i32 %53, i32 -48;
    i1 %55 = icmp ult i32 %54, i32 10;
    i32 %56 = mul i32 %52, i32 10;
    i32 %57 = add i32 %56, i32 -48;
    i32 %58 = add i32 %51, i32 %57;
    cbr i1 %55(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %59 = phi [^b1, i32 0] [^while.body4, i32 %124];
    i32* %60 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %59];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %60)[i64 1];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %60)[i64 2];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %60)[i64 3];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %60)[i64 4];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %60)[i64 5];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %60)[i64 6];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %60)[i64 7];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %60)[i64 8];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %60)[i64 9];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %60)[i64 10];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %60)[i64 11];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %60)[i64 12];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %60)[i64 13];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %60)[i64 14];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %60)[i64 15];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %60)[i64 16];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %60)[i64 17];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %60)[i64 18];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %60)[i64 19];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %60)[i64 20];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %60)[i64 21];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %60)[i64 22];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %60)[i64 23];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %60)[i64 24];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %60)[i64 25];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %60)[i64 26];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %60)[i64 27];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %60)[i64 28];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %60)[i64 29];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %60)[i64 30];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %60)[i64 31];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %60)[i64 32];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %60)[i64 33];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %60)[i64 34];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %60)[i64 35];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %60)[i64 36];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %60)[i64 37];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %60)[i64 38];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %60)[i64 39];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %60)[i64 40];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %60)[i64 41];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %60)[i64 42];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %60)[i64 43];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %60)[i64 44];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %60)[i64 45];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %60)[i64 46];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %60)[i64 47];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %60)[i64 48];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %60)[i64 49];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %60)[i64 50];
    store i32* %110 with i32 -1;
    i32* %111 = getelementptr &(i32* %60)[i64 51];
    store i32* %111 with i32 -1;
    i32* %112 = getelementptr &(i32* %60)[i64 52];
    store i32* %112 with i32 -1;
    i32* %113 = getelementptr &(i32* %60)[i64 53];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %60)[i64 54];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %60)[i64 55];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %60)[i64 56];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %60)[i64 57];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %60)[i64 58];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %60)[i64 59];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %60)[i64 60];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %60)[i64 61];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %60)[i64 62];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %60)[i64 63];
    store i32* %123 with i32 -1;
    i32 %124 = add i32 %59, i32 64;
    i1 %125 = icmp slt i32 %124, i32 960;
    cbr i1 %125(prob = 0.93), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %126 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %124];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %126)[i64 1];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %126)[i64 2];
    store i32* %128 with i32 -1;
    i32* %129 = getelementptr &(i32* %126)[i64 3];
    store i32* %129 with i32 -1;
    i32* %130 = getelementptr &(i32* %126)[i64 4];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %126)[i64 5];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %126)[i64 6];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %126)[i64 7];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %126)[i64 8];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %126)[i64 9];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %126)[i64 10];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %126)[i64 11];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %126)[i64 12];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %126)[i64 13];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %126)[i64 14];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %126)[i64 15];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %126)[i64 16];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %126)[i64 17];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %126)[i64 18];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %126)[i64 19];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %126)[i64 20];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %126)[i64 21];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %126)[i64 22];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %126)[i64 23];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %126)[i64 24];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %126)[i64 25];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %126)[i64 26];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %126)[i64 27];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %126)[i64 28];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %126)[i64 29];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %126)[i64 30];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %126)[i64 31];
    store i32* %157 with i32 -1;
    i32* %158 = getelementptr &(i32* %126)[i64 32];
    store i32* %158 with i32 -1;
    i32* %159 = getelementptr &(i32* %126)[i64 33];
    store i32* %159 with i32 -1;
    i32* %160 = getelementptr &(i32* %126)[i64 34];
    store i32* %160 with i32 -1;
    i32* %161 = getelementptr &(i32* %126)[i64 35];
    store i32* %161 with i32 -1;
    i32* %162 = getelementptr &(i32* %126)[i64 36];
    store i32* %162 with i32 -1;
    i32* %163 = getelementptr &(i32* %126)[i64 37];
    store i32* %163 with i32 -1;
    i32* %164 = getelementptr &(i32* %126)[i64 38];
    store i32* %164 with i32 -1;
    i32* %165 = getelementptr &(i32* %126)[i64 39];
    store i32* %165 with i32 -1;
    i32* %166 = getelementptr &(i32* %126)[i64 40];
    store i32* %166 with i32 -1;
    i32* %167 = getelementptr &(i32* %126)[i64 41];
    store i32* %167 with i32 -1;
    i32* %168 = getelementptr &(i32* %126)[i64 42];
    store i32* %168 with i32 -1;
    i32* %169 = getelementptr &(i32* %126)[i64 43];
    store i32* %169 with i32 -1;
    i32* %170 = getelementptr &(i32* %126)[i64 44];
    store i32* %170 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %171 = phi [^while.body5, i32 %50] [^b6, i32 %285] [^if.then, i32 %299];
    i32 %172 = phi [^while.body5, i32 0] [^b6, i32 %284] [^if.then, i32 %172];
    i1 %173 = icmp neq i32 %171, i32 0;
    cbr i1 %173(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %174 = call () -> i32 @getch();
    i1 %175 = icmp neq i32 %174, i32 81;
    i1 %176 = icmp neq i32 %174, i32 85;
    i1 %177 = and i1 %175, i1 %176;
    cbr i1 %177(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %178 = icmp eq i32 %174, i32 81;
    cbr i1 %178(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %179 = call () -> i32 @getch();
    i32 %180 = add i32 %179, i32 -48;
    i1 %181 = icmp ugt i32 %180, i32 9;
    cbr i1 %181(prob = 0.97), ^while.body7, ^192;
  ^entry2:
    i32 %182 = call () -> i32 @getch();
    i32 %183 = add i32 %182, i32 -48;
    i1 %184 = icmp ugt i32 %183, i32 9;
    cbr i1 %184(prob = 0.97), ^while.body8, ^204;
  ^while.body7:
    i32 %185 = phi [^entry1, i32 %179] [^while.body7, i32 %187];
    i32 %186 = phi [^entry1, i32 0] [^while.body7, i32 %191];
    i32 %187 = call () -> i32 @getch();
    i32 %188 = add i32 %187, i32 -48;
    i1 %189 = icmp ugt i32 %188, i32 9;
    i1 %190 = icmp eq i32 %185, i32 45;
    i32 %191 = select i1 %190 ? i32 1 : i32 %186;
    cbr i1 %189(prob = 0.97), ^while.body7, ^192;
  ^192:
    i32 %193 = phi [^entry1, i32 %179] [^while.body7, i32 %187];
    i32 %194 = phi [^entry1, i32 0] [^while.body7, i32 %191];
    i32 %195 = add i32 %193, i32 -48;
    i1 %196 = icmp ult i32 %195, i32 10;
    cbr i1 %196(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %197 = phi [^entry2, i32 %182] [^while.body8, i32 %199];
    i32 %198 = phi [^entry2, i32 0] [^while.body8, i32 %203];
    i32 %199 = call () -> i32 @getch();
    i32 %200 = add i32 %199, i32 -48;
    i1 %201 = icmp ugt i32 %200, i32 9;
    i1 %202 = icmp eq i32 %197, i32 45;
    i32 %203 = select i1 %202 ? i32 1 : i32 %198;
    cbr i1 %201(prob = 0.97), ^while.body8, ^204;
  ^204:
    i32 %205 = phi [^entry2, i32 %182] [^while.body8, i32 %199];
    i32 %206 = phi [^entry2, i32 0] [^while.body8, i32 %203];
    i32 %207 = add i32 %205, i32 -48;
    i1 %208 = icmp ult i32 %207, i32 10;
    cbr i1 %208(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %209 = phi [^192, i32 %193] [^while.body9, i32 %211];
    i32 %210 = phi [^192, i32 0] [^while.body9, i32 %216];
    i32 %211 = call () -> i32 @getch();
    i32 %212 = add i32 %211, i32 -48;
    i1 %213 = icmp ult i32 %212, i32 10;
    i32 %214 = mul i32 %210, i32 10;
    i32 %215 = add i32 %214, i32 -48;
    i32 %216 = add i32 %209, i32 %215;
    cbr i1 %213(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %217 = phi [^192, i32 0] [^while.body9, i32 %216];
    i32 %218 = call () -> i32 @getch();
    i32 %219 = add i32 %218, i32 -48;
    i1 %220 = icmp ugt i32 %219, i32 9;
    i1 %221 = icmp neq i32 %194, i32 0;
    i32 %222 = neg i32 %217;
    i32 %223 = select i1 %221 ? i32 %222 : i32 %217;
    cbr i1 %220(prob = 0.97), ^while.body11, ^246;
  ^while.body10:
    i32 %224 = phi [^204, i32 %205] [^while.body10, i32 %226];
    i32 %225 = phi [^204, i32 0] [^while.body10, i32 %231];
    i32 %226 = call () -> i32 @getch();
    i32 %227 = add i32 %226, i32 -48;
    i1 %228 = icmp ult i32 %227, i32 10;
    i32 %229 = mul i32 %225, i32 10;
    i32 %230 = add i32 %229, i32 -48;
    i32 %231 = add i32 %224, i32 %230;
    cbr i1 %228(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %232 = phi [^204, i32 0] [^while.body10, i32 %231];
    i32 %233 = call () -> i32 @getch();
    i32 %234 = add i32 %233, i32 -48;
    i1 %235 = icmp ugt i32 %234, i32 9;
    i1 %236 = icmp neq i32 %206, i32 0;
    i32 %237 = neg i32 %232;
    i32 %238 = select i1 %236 ? i32 %237 : i32 %232;
    cbr i1 %235(prob = 0.97), ^while.body12, ^258;
  ^while.body11:
    i32 %239 = phi [^b4, i32 %218] [^while.body11, i32 %241];
    i32 %240 = phi [^b4, i32 0] [^while.body11, i32 %245];
    i32 %241 = call () -> i32 @getch();
    i32 %242 = add i32 %241, i32 -48;
    i1 %243 = icmp ugt i32 %242, i32 9;
    i1 %244 = icmp eq i32 %239, i32 45;
    i32 %245 = select i1 %244 ? i32 1 : i32 %240;
    cbr i1 %243(prob = 0.97), ^while.body11, ^246;
  ^246:
    i32 %247 = phi [^b4, i32 %218] [^while.body11, i32 %241];
    i32 %248 = phi [^b4, i32 0] [^while.body11, i32 %245];
    i32 %249 = add i32 %247, i32 -48;
    i1 %250 = icmp ult i32 %249, i32 10;
    cbr i1 %250(prob = 0.97), ^while.body13, ^b7;
  ^while.body12:
    i32 %251 = phi [^b5, i32 %233] [^while.body12, i32 %253];
    i32 %252 = phi [^b5, i32 0] [^while.body12, i32 %257];
    i32 %253 = call () -> i32 @getch();
    i32 %254 = add i32 %253, i32 -48;
    i1 %255 = icmp ugt i32 %254, i32 9;
    i1 %256 = icmp eq i32 %251, i32 45;
    i32 %257 = select i1 %256 ? i32 1 : i32 %252;
    cbr i1 %255(prob = 0.97), ^while.body12, ^258;
  ^258:
    i32 %259 = phi [^b5, i32 %233] [^while.body12, i32 %253];
    i32 %260 = phi [^b5, i32 0] [^while.body12, i32 %257];
    i32 %261 = add i32 %259, i32 -48;
    i1 %262 = icmp ult i32 %261, i32 10;
    cbr i1 %262(prob = 0.97), ^while.body14, ^b6;
  ^while.body13:
    i32 %263 = phi [^246, i32 %247] [^while.body13, i32 %265];
    i32 %264 = phi [^246, i32 0] [^while.body13, i32 %270];
    i32 %265 = call () -> i32 @getch();
    i32 %266 = add i32 %265, i32 -48;
    i1 %267 = icmp ult i32 %266, i32 10;
    i32 %268 = mul i32 %264, i32 10;
    i32 %269 = add i32 %268, i32 -48;
    i32 %270 = add i32 %263, i32 %269;
    cbr i1 %267(prob = 0.97), ^while.body13, ^b7;
  ^b6:
    i32 %271 = phi [^258, i32 0] [^while.body14, i32 %297];
    i1 %272 = icmp neq i32 %260, i32 0;
    i32 %273 = neg i32 %271;
    i32 %274 = select i1 %272 ? i32 %273 : i32 %271;
    i32* %275 = getelementptr &([5005 * i32]* %4)[i64 0][i32 %172];
    store i32* %275 with i32 %274;
    i32* %276 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %238];
    i32 %277 = load i32* %276;
    i32* %278 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %172];
    store i32* %278 with i32 %277;
    i32* %279 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %274];
    store i32* %276 with i32 %172;
    i32* %280 = getelementptr &(i32* %275)[i64 1];
    store i32* %280 with i32 %238;
    i32 %281 = load i32* %279;
    i32* %282 = getelementptr &(i32* %278)[i64 1];
    store i32* %282 with i32 %281;
    i32 %283 = add i32 %172, i32 1;
    store i32* %279 with i32 %283;
    i32 %284 = add i32 %172, i32 2;
    i32 %285 = add i32 %171, i32 -1;
    ubr ^while.header;
  ^b7:
    i32 %286 = phi [^246, i32 0] [^while.body13, i32 %270];
    i1 %287 = icmp neq i32 %248, i32 0;
    i32 %288 = neg i32 %286;
    i32 %289 = select i1 %287 ? i32 %288 : i32 %286;
    cbr i1 %34(prob = 0.97), ^while.body15, ^if.then;
  ^while.body14:
    i32 %290 = phi [^258, i32 %259] [^while.body14, i32 %292];
    i32 %291 = phi [^258, i32 0] [^while.body14, i32 %297];
    i32 %292 = call () -> i32 @getch();
    i32 %293 = add i32 %292, i32 -48;
    i1 %294 = icmp ult i32 %293, i32 10;
    i32 %295 = mul i32 %291, i32 10;
    i32 %296 = add i32 %295, i32 -48;
    i32 %297 = add i32 %290, i32 %296;
    cbr i1 %294(prob = 0.97), ^while.body14, ^b6;
  ^if.then:
    i32 %298 = call (i32, i32) -> i32 @same(i32 %223, i32 %289);
    call (i32) -> void @putint(i32 %298);
    call (i32) -> void @putch(i32 10);
    i32 %299 = add i32 %171, i32 -1;
    ubr ^while.header;
  ^while.body15:
    i32 %300 = phi [^b7, i32 1] [^while.body15, i32 %302];
    i32* %301 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %300];
    store i32* %301 with i32 0;
    i32 %302 = add i32 %300, i32 1;
    i1 %303 = icmp sge i32 %33, i32 %302;
    cbr i1 %303(prob = 0.97), ^while.body15, ^if.then;
}
