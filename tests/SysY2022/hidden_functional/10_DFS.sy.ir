internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @vis;
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = scmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^b3, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = scmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^b3:
    i32 %18 = call (i32, i32) -> i32 @same(i32 %12, i32 %tar);
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^b1, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    [1005 * i32]* %1 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %2 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %3 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %12];
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i1 %7 = scmp lt i32 %6, i32 48;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
  ^b:
    i1 %8 = scmp gt i32 %6, i32 57;
    ubr ^b1;
  ^b1:
    i1 %9 = phi [^while.header, i1 true] [^b, i1 %8];
    cbr i1 %9(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32 %10 = call () -> i32 @getch();
    i1 %11 = scmp eq i32 %6, i32 45;
    i32 %12 = select i1 %11 ? i32 1 : i32 %5;
    ubr ^while.header;
  ^while.header1:
    i32 %13 = phi [^b1, i32 0] [^while.body1, i32 %21];
    i32 %14 = phi [^b1, i32 %6] [^while.body1, i32 %18];
    i1 %15 = scmp gt i32 %14, i32 47;
    cbr i1 %15(prob = 0.5), ^b2, ^b3;
  ^b2:
    i1 %16 = scmp le i32 %14, i32 57;
    ubr ^b3;
  ^b3:
    i1 %17 = phi [^while.header1, i1 false] [^b2, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body1, ^b4;
  ^while.body1:
    i32 %18 = call () -> i32 @getch();
    i32 %19 = mul i32 %13, i32 10;
    i32 %20 = add i32 %14, i32 -48;
    i32 %21 = add i32 %20, i32 %19;
    ubr ^while.header1;
  ^b4:
    i1 %22 = scmp neq i32 %5, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then, ^b5;
  ^if.then:
    i32 %23 = neg i32 %13;
    ubr ^b5;
  ^b5:
    i32 %24 = phi [^b4, i32 %13] [^if.then, i32 %23];
    i32 %25 = call () -> i32 @getch();
    i1 %26 = scmp gt i32 %24, i32 0;
    ubr ^while.header2;
  ^while.header2:
    i32 %27 = phi [^b5, i32 0] [^while.body2, i32 %34];
    i32 %28 = phi [^b5, i32 %25] [^while.body2, i32 %32];
    i1 %29 = scmp lt i32 %28, i32 48;
    cbr i1 %29(prob = 0.5), ^b7, ^b6;
  ^b6:
    i1 %30 = scmp gt i32 %28, i32 57;
    ubr ^b7;
  ^b7:
    i1 %31 = phi [^while.header2, i1 true] [^b6, i1 %30];
    cbr i1 %31(prob = 0.97), ^while.body2, ^while.header3;
  ^while.body2:
    i32 %32 = call () -> i32 @getch();
    i1 %33 = scmp eq i32 %28, i32 45;
    i32 %34 = select i1 %33 ? i32 1 : i32 %27;
    ubr ^while.header2;
  ^while.header3:
    i32 %35 = phi [^b7, i32 0] [^while.body3, i32 %43];
    i32 %36 = phi [^b7, i32 %28] [^while.body3, i32 %40];
    i1 %37 = scmp gt i32 %36, i32 47;
    cbr i1 %37(prob = 0.5), ^b8, ^b9;
  ^b8:
    i1 %38 = scmp le i32 %36, i32 57;
    ubr ^b9;
  ^b9:
    i1 %39 = phi [^while.header3, i1 false] [^b8, i1 %38];
    cbr i1 %39(prob = 0.97), ^while.body3, ^b10;
  ^while.body3:
    i32 %40 = call () -> i32 @getch();
    i32 %41 = mul i32 %35, i32 10;
    i32 %42 = add i32 %36, i32 -48;
    i32 %43 = add i32 %42, i32 %41;
    ubr ^while.header3;
  ^b10:
    i1 %44 = scmp neq i32 %27, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b11;
  ^if.then1:
    i32 %45 = neg i32 %35;
    ubr ^b11;
  ^b11:
    i32 %46 = phi [^b10, i32 %35] [^if.then1, i32 %45];
    ubr ^while.body4;
  ^while.body4:
    i32 %47 = phi [^b11, i32 0] [^while.body4, i32 %64];
    i32* %48 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %47];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %48)[i64 1];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %48)[i64 2];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %48)[i64 3];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %48)[i64 4];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %48)[i64 5];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %48)[i64 6];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %48)[i64 7];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %48)[i64 8];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %48)[i64 9];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %48)[i64 10];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %48)[i64 11];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %48)[i64 12];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %48)[i64 13];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %48)[i64 14];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %48)[i64 15];
    store i32* %63 with i32 -1;
    i32 %64 = add i32 %47, i32 16;
    i1 %65 = scmp lt i32 %64, i32 992;
    cbr i1 %65(prob = 0.98), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %66 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %64];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %66)[i64 1];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %66)[i64 2];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %66)[i64 3];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %66)[i64 4];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %66)[i64 5];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %66)[i64 6];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %66)[i64 7];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %66)[i64 8];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %66)[i64 9];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %66)[i64 10];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %66)[i64 11];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %66)[i64 12];
    store i32* %78 with i32 -1;
    ubr ^while.header4;
  ^while.header4:
    i32 %79 = phi [^while.body5, i32 %46] [^b40, i32 %185];
    i32 %80 = phi [^while.body5, i32 0] [^b40, i32 %184];
    i1 %81 = scmp neq i32 %79, i32 0;
    cbr i1 %81(prob = 0.97), ^while.body6, ^b12;
  ^while.body6:
    i32 %82 = call () -> i32 @getch();
    ubr ^while.header5;
  ^b12:
    ret i32 0;
  ^while.header5:
    i32 %83 = phi [^while.body6, i32 %82] [^while.body7, i32 %87];
    i1 %84 = scmp neq i32 %83, i32 81;
    cbr i1 %84(prob = 0.5), ^b13, ^b14;
  ^b13:
    i1 %85 = scmp neq i32 %83, i32 85;
    ubr ^b14;
  ^b14:
    i1 %86 = phi [^while.header5, i1 false] [^b13, i1 %85];
    cbr i1 %86(prob = 0.97), ^while.body7, ^b15;
  ^while.body7:
    i32 %87 = call () -> i32 @getch();
    ubr ^while.header5;
  ^b15:
    i1 %88 = scmp eq i32 %83, i32 81;
    cbr i1 %88(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %89 = call () -> i32 @getch();
    ubr ^while.header6;
  ^entry2:
    i32 %90 = call () -> i32 @getch();
    ubr ^while.header7;
  ^while.header6:
    i32 %91 = phi [^entry1, i32 0] [^while.body8, i32 %103];
    i32 %92 = phi [^entry1, i32 %89] [^while.body8, i32 %101];
    i1 %93 = scmp lt i32 %92, i32 48;
    cbr i1 %93(prob = 0.5), ^b17, ^b16;
  ^while.header7:
    i32 %94 = phi [^entry2, i32 0] [^while.body9, i32 %106];
    i32 %95 = phi [^entry2, i32 %90] [^while.body9, i32 %104];
    i1 %96 = scmp lt i32 %95, i32 48;
    cbr i1 %96(prob = 0.5), ^b19, ^b18;
  ^b16:
    i1 %97 = scmp gt i32 %92, i32 57;
    ubr ^b17;
  ^b17:
    i1 %98 = phi [^while.header6, i1 true] [^b16, i1 %97];
    cbr i1 %98(prob = 0.97), ^while.body8, ^while.header8;
  ^b18:
    i1 %99 = scmp gt i32 %95, i32 57;
    ubr ^b19;
  ^b19:
    i1 %100 = phi [^while.header7, i1 true] [^b18, i1 %99];
    cbr i1 %100(prob = 0.97), ^while.body9, ^while.header9;
  ^while.body8:
    i32 %101 = call () -> i32 @getch();
    i1 %102 = scmp eq i32 %92, i32 45;
    i32 %103 = select i1 %102 ? i32 1 : i32 %91;
    ubr ^while.header6;
  ^while.body9:
    i32 %104 = call () -> i32 @getch();
    i1 %105 = scmp eq i32 %95, i32 45;
    i32 %106 = select i1 %105 ? i32 1 : i32 %94;
    ubr ^while.header7;
  ^while.header8:
    i32 %107 = phi [^b17, i32 0] [^while.body10, i32 %120];
    i32 %108 = phi [^b17, i32 %92] [^while.body10, i32 %117];
    i1 %109 = scmp gt i32 %108, i32 47;
    cbr i1 %109(prob = 0.5), ^b20, ^b22;
  ^while.header9:
    i32 %110 = phi [^b19, i32 0] [^while.body11, i32 %124];
    i32 %111 = phi [^b19, i32 %95] [^while.body11, i32 %121];
    i1 %112 = scmp gt i32 %111, i32 47;
    cbr i1 %112(prob = 0.5), ^b21, ^b23;
  ^b20:
    i1 %113 = scmp le i32 %108, i32 57;
    ubr ^b22;
  ^b21:
    i1 %114 = scmp le i32 %111, i32 57;
    ubr ^b23;
  ^b22:
    i1 %115 = phi [^while.header8, i1 false] [^b20, i1 %113];
    cbr i1 %115(prob = 0.97), ^while.body10, ^b24;
  ^b23:
    i1 %116 = phi [^while.header9, i1 false] [^b21, i1 %114];
    cbr i1 %116(prob = 0.97), ^while.body11, ^b25;
  ^while.body10:
    i32 %117 = call () -> i32 @getch();
    i32 %118 = mul i32 %107, i32 10;
    i32 %119 = add i32 %108, i32 -48;
    i32 %120 = add i32 %119, i32 %118;
    ubr ^while.header8;
  ^while.body11:
    i32 %121 = call () -> i32 @getch();
    i32 %122 = mul i32 %110, i32 10;
    i32 %123 = add i32 %111, i32 -48;
    i32 %124 = add i32 %123, i32 %122;
    ubr ^while.header9;
  ^b24:
    i1 %125 = scmp neq i32 %91, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then2, ^b26;
  ^b25:
    i1 %126 = scmp neq i32 %94, i32 0;
    cbr i1 %126(prob = 0.5), ^if.then3, ^b27;
  ^if.then2:
    i32 %127 = neg i32 %107;
    ubr ^b26;
  ^b26:
    i32 %128 = phi [^b24, i32 %107] [^if.then2, i32 %127];
    i32 %129 = call () -> i32 @getch();
    ubr ^while.header10;
  ^if.then3:
    i32 %130 = neg i32 %110;
    ubr ^b27;
  ^b27:
    i32 %131 = phi [^b25, i32 %110] [^if.then3, i32 %130];
    i32 %132 = call () -> i32 @getch();
    ubr ^while.header11;
  ^while.header10:
    i32 %133 = phi [^b26, i32 0] [^while.body12, i32 %145];
    i32 %134 = phi [^b26, i32 %129] [^while.body12, i32 %143];
    i1 %135 = scmp lt i32 %134, i32 48;
    cbr i1 %135(prob = 0.5), ^b29, ^b28;
  ^while.header11:
    i32 %136 = phi [^b27, i32 0] [^while.body13, i32 %148];
    i32 %137 = phi [^b27, i32 %132] [^while.body13, i32 %146];
    i1 %138 = scmp lt i32 %137, i32 48;
    cbr i1 %138(prob = 0.5), ^b31, ^b30;
  ^b28:
    i1 %139 = scmp gt i32 %134, i32 57;
    ubr ^b29;
  ^b29:
    i1 %140 = phi [^while.header10, i1 true] [^b28, i1 %139];
    cbr i1 %140(prob = 0.97), ^while.body12, ^while.header12;
  ^b30:
    i1 %141 = scmp gt i32 %137, i32 57;
    ubr ^b31;
  ^b31:
    i1 %142 = phi [^while.header11, i1 true] [^b30, i1 %141];
    cbr i1 %142(prob = 0.97), ^while.body13, ^while.header13;
  ^while.body12:
    i32 %143 = call () -> i32 @getch();
    i1 %144 = scmp eq i32 %134, i32 45;
    i32 %145 = select i1 %144 ? i32 1 : i32 %133;
    ubr ^while.header10;
  ^while.body13:
    i32 %146 = call () -> i32 @getch();
    i1 %147 = scmp eq i32 %137, i32 45;
    i32 %148 = select i1 %147 ? i32 1 : i32 %136;
    ubr ^while.header11;
  ^while.header12:
    i32 %149 = phi [^b29, i32 0] [^while.body14, i32 %162];
    i32 %150 = phi [^b29, i32 %134] [^while.body14, i32 %159];
    i1 %151 = scmp gt i32 %150, i32 47;
    cbr i1 %151(prob = 0.5), ^b32, ^b34;
  ^while.header13:
    i32 %152 = phi [^b31, i32 0] [^while.body15, i32 %166];
    i32 %153 = phi [^b31, i32 %137] [^while.body15, i32 %163];
    i1 %154 = scmp gt i32 %153, i32 47;
    cbr i1 %154(prob = 0.5), ^b33, ^b35;
  ^b32:
    i1 %155 = scmp le i32 %150, i32 57;
    ubr ^b34;
  ^b33:
    i1 %156 = scmp le i32 %153, i32 57;
    ubr ^b35;
  ^b34:
    i1 %157 = phi [^while.header12, i1 false] [^b32, i1 %155];
    cbr i1 %157(prob = 0.97), ^while.body14, ^b36;
  ^b35:
    i1 %158 = phi [^while.header13, i1 false] [^b33, i1 %156];
    cbr i1 %158(prob = 0.97), ^while.body15, ^b37;
  ^while.body14:
    i32 %159 = call () -> i32 @getch();
    i32 %160 = mul i32 %149, i32 10;
    i32 %161 = add i32 %150, i32 -48;
    i32 %162 = add i32 %161, i32 %160;
    ubr ^while.header12;
  ^while.body15:
    i32 %163 = call () -> i32 @getch();
    i32 %164 = mul i32 %152, i32 10;
    i32 %165 = add i32 %153, i32 -48;
    i32 %166 = add i32 %165, i32 %164;
    ubr ^while.header13;
  ^b36:
    i1 %167 = scmp neq i32 %133, i32 0;
    cbr i1 %167(prob = 0.5), ^if.then4, ^b39;
  ^b37:
    i1 %168 = scmp neq i32 %136, i32 0;
    cbr i1 %168(prob = 0.5), ^if.then5, ^b38;
  ^if.then4:
    i32 %169 = neg i32 %149;
    ubr ^b39;
  ^if.then5:
    i32 %170 = neg i32 %152;
    ubr ^b38;
  ^b38:
    i32 %171 = phi [^b37, i32 %152] [^if.then5, i32 %170];
    i32* %172 = getelementptr &([5005 * i32]* %2)[i64 0][i32 %80];
    store i32* %172 with i32 %171;
    i32* %173 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %131];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &([5005 * i32]* %3)[i64 0][i32 %80];
    store i32* %175 with i32 %174;
    store i32* %173 with i32 %80;
    i32* %176 = getelementptr &(i32* %172)[i64 1];
    store i32* %176 with i32 %131;
    i32* %177 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %171];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %175)[i64 1];
    store i32* %179 with i32 %178;
    i32 %180 = add i32 %80, i32 1;
    store i32* %177 with i32 %180;
    i32 %181 = add i32 %80, i32 2;
    ubr ^b40;
  ^b39:
    i32 %182 = phi [^b36, i32 %149] [^if.then4, i32 %169];
    cbr i1 %26(prob = 0.97), ^while.body16, ^if.then6;
  ^if.then6:
    i32 %183 = call (i32, i32) -> i32 @same(i32 %128, i32 %182);
    call (i32) -> void @putint(i32 %183);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
  ^b40:
    i32 %184 = phi [^b38, i32 %181] [^if.then6, i32 %80];
    i32 %185 = add i32 %79, i32 -1;
    ubr ^while.header4;
  ^while.body16:
    i32 %186 = phi [^b39, i32 1] [^while.body16, i32 %188];
    i32* %187 = getelementptr &([1005 * i32]* %1)[i64 0][i32 %186];
    store i32* %187 with i32 0;
    i32 %188 = add i32 %186, i32 1;
    i1 %189 = scmp le i32 %188, i32 %24;
    cbr i1 %189(prob = 0.97), ^while.body16, ^if.then6;
}
