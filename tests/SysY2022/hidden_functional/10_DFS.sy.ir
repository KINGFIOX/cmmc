internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to { Flexible };
internal [5005 * i32]* @next { Flexible };
internal [1005 * i32]* @head { Flexible };
internal [1005 * i32]* @vis { Flexible };
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = icmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^entry1, i32 1] [^b5, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = icmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^entry1, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^entry1:
    i1 %18 = icmp eq i32 %tar, i32 %12;
    store i32* %13 with i32 1;
    cbr i1 %18(prob = 0.5), ^b1, ^b3;
  ^b3:
    i32* %19 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    ubr ^while.header1;
  ^while.header1:
    i32 %21 = phi [^b3, i32 %20] [^b4, i32 %29];
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b2;
  ^while.body1:
    i32* %23 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^b5, ^b4;
  ^b4:
    i32* %28 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %21];
    i32 %29 = load i32* %28;
    ubr ^while.header1;
  ^b5:
    i32 %30 = call (i32, i32) -> i32 @same(i32 %24, i32 %tar);
    i1 %31 = icmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b1, ^b4;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^16;
  ^while.body:
    i32 %8 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    i1 %14 = icmp eq i32 %8, i32 45;
    i32 %15 = select i1 %14 ? i32 1 : i32 %9;
    cbr i1 %13(prob = 0.97), ^while.body, ^16;
  ^16:
    i32 %17 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %18 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32 %19 = add i32 %17, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %21 = phi [^16, i32 %17] [^while.body1, i32 %23];
    i32 %22 = phi [^16, i32 0] [^while.body1, i32 %28];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = mul i32 %22, i32 10;
    i32 %27 = add i32 %26, i32 -48;
    i32 %28 = add i32 %21, i32 %27;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %29 = phi [^16, i32 0] [^while.body1, i32 %28];
    i32 %30 = call () -> i32 @getch();
    i1 %31 = icmp slt i32 %30, i32 48;
    i1 %32 = icmp sgt i32 %30, i32 57;
    i1 %33 = or i1 %31, i1 %32;
    i1 %34 = icmp neq i32 %18, i32 0;
    i32 %35 = neg i32 %29;
    i32 %36 = select i1 %34 ? i32 %35 : i32 %29;
    i1 %37 = icmp sgt i32 %36, i32 0;
    cbr i1 %33(prob = 0.97), ^while.body2, ^46;
  ^while.body2:
    i32 %38 = phi [^b, i32 %30] [^while.body2, i32 %40];
    i32 %39 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %40 = call () -> i32 @getch();
    i1 %41 = icmp slt i32 %40, i32 48;
    i1 %42 = icmp sgt i32 %40, i32 57;
    i1 %43 = or i1 %41, i1 %42;
    i1 %44 = icmp eq i32 %38, i32 45;
    i32 %45 = select i1 %44 ? i32 1 : i32 %39;
    cbr i1 %43(prob = 0.97), ^while.body2, ^46;
  ^46:
    i32 %47 = phi [^b, i32 %30] [^while.body2, i32 %40];
    i32 %48 = phi [^b, i32 0] [^while.body2, i32 %45];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %51 = phi [^46, i32 0] [^while.body3, i32 %62];
    i1 %52 = icmp neq i32 %48, i32 0;
    i32 %53 = neg i32 %51;
    i32 %54 = select i1 %52 ? i32 %53 : i32 %51;
    ubr ^while.body4;
  ^while.body3:
    i32 %55 = phi [^46, i32 %47] [^while.body3, i32 %57];
    i32 %56 = phi [^46, i32 0] [^while.body3, i32 %62];
    i32 %57 = call () -> i32 @getch();
    i32 %58 = add i32 %57, i32 -48;
    i1 %59 = icmp ult i32 %58, i32 10;
    i32 %60 = mul i32 %56, i32 10;
    i32 %61 = add i32 %60, i32 -48;
    i32 %62 = add i32 %55, i32 %61;
    cbr i1 %59(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %63 = phi [^b1, i32 0] [^while.body4, i32 %128];
    i32* %64 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %63];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %64)[i64 1];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %64)[i64 2];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %64)[i64 3];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %64)[i64 4];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %64)[i64 5];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %64)[i64 6];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %64)[i64 7];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %64)[i64 8];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %64)[i64 9];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %64)[i64 10];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %64)[i64 11];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %64)[i64 12];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %64)[i64 13];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %64)[i64 14];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %64)[i64 15];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %64)[i64 16];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %64)[i64 17];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %64)[i64 18];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %64)[i64 19];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %64)[i64 20];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %64)[i64 21];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %64)[i64 22];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %64)[i64 23];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %64)[i64 24];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %64)[i64 25];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %64)[i64 26];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %64)[i64 27];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %64)[i64 28];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %64)[i64 29];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %64)[i64 30];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %64)[i64 31];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %64)[i64 32];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %64)[i64 33];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %64)[i64 34];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %64)[i64 35];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %64)[i64 36];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %64)[i64 37];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %64)[i64 38];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %64)[i64 39];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %64)[i64 40];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %64)[i64 41];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %64)[i64 42];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %64)[i64 43];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %64)[i64 44];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %64)[i64 45];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %64)[i64 46];
    store i32* %110 with i32 -1;
    i32* %111 = getelementptr &(i32* %64)[i64 47];
    store i32* %111 with i32 -1;
    i32* %112 = getelementptr &(i32* %64)[i64 48];
    store i32* %112 with i32 -1;
    i32* %113 = getelementptr &(i32* %64)[i64 49];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %64)[i64 50];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %64)[i64 51];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %64)[i64 52];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %64)[i64 53];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %64)[i64 54];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %64)[i64 55];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %64)[i64 56];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %64)[i64 57];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %64)[i64 58];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %64)[i64 59];
    store i32* %123 with i32 -1;
    i32* %124 = getelementptr &(i32* %64)[i64 60];
    store i32* %124 with i32 -1;
    i32* %125 = getelementptr &(i32* %64)[i64 61];
    store i32* %125 with i32 -1;
    i32* %126 = getelementptr &(i32* %64)[i64 62];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %64)[i64 63];
    store i32* %127 with i32 -1;
    i32 %128 = add i32 %63, i32 64;
    i1 %129 = icmp slt i32 %128, i32 960;
    cbr i1 %129(prob = 0.93), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %130 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %128];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %130)[i64 1];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %130)[i64 2];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %130)[i64 3];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %130)[i64 4];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %130)[i64 5];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %130)[i64 6];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %130)[i64 7];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %130)[i64 8];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %130)[i64 9];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %130)[i64 10];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %130)[i64 11];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %130)[i64 12];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %130)[i64 13];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %130)[i64 14];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %130)[i64 15];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %130)[i64 16];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %130)[i64 17];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %130)[i64 18];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %130)[i64 19];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %130)[i64 20];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %130)[i64 21];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %130)[i64 22];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %130)[i64 23];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %130)[i64 24];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %130)[i64 25];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %130)[i64 26];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %130)[i64 27];
    store i32* %157 with i32 -1;
    i32* %158 = getelementptr &(i32* %130)[i64 28];
    store i32* %158 with i32 -1;
    i32* %159 = getelementptr &(i32* %130)[i64 29];
    store i32* %159 with i32 -1;
    i32* %160 = getelementptr &(i32* %130)[i64 30];
    store i32* %160 with i32 -1;
    i32* %161 = getelementptr &(i32* %130)[i64 31];
    store i32* %161 with i32 -1;
    i32* %162 = getelementptr &(i32* %130)[i64 32];
    store i32* %162 with i32 -1;
    i32* %163 = getelementptr &(i32* %130)[i64 33];
    store i32* %163 with i32 -1;
    i32* %164 = getelementptr &(i32* %130)[i64 34];
    store i32* %164 with i32 -1;
    i32* %165 = getelementptr &(i32* %130)[i64 35];
    store i32* %165 with i32 -1;
    i32* %166 = getelementptr &(i32* %130)[i64 36];
    store i32* %166 with i32 -1;
    i32* %167 = getelementptr &(i32* %130)[i64 37];
    store i32* %167 with i32 -1;
    i32* %168 = getelementptr &(i32* %130)[i64 38];
    store i32* %168 with i32 -1;
    i32* %169 = getelementptr &(i32* %130)[i64 39];
    store i32* %169 with i32 -1;
    i32* %170 = getelementptr &(i32* %130)[i64 40];
    store i32* %170 with i32 -1;
    i32* %171 = getelementptr &(i32* %130)[i64 41];
    store i32* %171 with i32 -1;
    i32* %172 = getelementptr &(i32* %130)[i64 42];
    store i32* %172 with i32 -1;
    i32* %173 = getelementptr &(i32* %130)[i64 43];
    store i32* %173 with i32 -1;
    i32* %174 = getelementptr &(i32* %130)[i64 44];
    store i32* %174 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %175 = phi [^while.body5, i32 %54] [^b6, i32 %297] [^if.then, i32 %311];
    i32 %176 = phi [^while.body5, i32 0] [^b6, i32 %296] [^if.then, i32 %176];
    i1 %177 = icmp neq i32 %175, i32 0;
    cbr i1 %177(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %178 = call () -> i32 @getch();
    i1 %179 = icmp neq i32 %178, i32 81;
    i1 %180 = icmp neq i32 %178, i32 85;
    i1 %181 = and i1 %179, i1 %180;
    cbr i1 %181(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %182 = icmp eq i32 %178, i32 81;
    cbr i1 %182(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %183 = call () -> i32 @getch();
    i1 %184 = icmp slt i32 %183, i32 48;
    i1 %185 = icmp sgt i32 %183, i32 57;
    i1 %186 = or i1 %184, i1 %185;
    cbr i1 %186(prob = 0.97), ^while.body7, ^199;
  ^entry2:
    i32 %187 = call () -> i32 @getch();
    i1 %188 = icmp slt i32 %187, i32 48;
    i1 %189 = icmp sgt i32 %187, i32 57;
    i1 %190 = or i1 %188, i1 %189;
    cbr i1 %190(prob = 0.97), ^while.body8, ^212;
  ^while.body7:
    i32 %191 = phi [^entry1, i32 %183] [^while.body7, i32 %193];
    i32 %192 = phi [^entry1, i32 0] [^while.body7, i32 %198];
    i32 %193 = call () -> i32 @getch();
    i1 %194 = icmp slt i32 %193, i32 48;
    i1 %195 = icmp sgt i32 %193, i32 57;
    i1 %196 = or i1 %194, i1 %195;
    i1 %197 = icmp eq i32 %191, i32 45;
    i32 %198 = select i1 %197 ? i32 1 : i32 %192;
    cbr i1 %196(prob = 0.97), ^while.body7, ^199;
  ^199:
    i32 %200 = phi [^entry1, i32 %183] [^while.body7, i32 %193];
    i32 %201 = phi [^entry1, i32 0] [^while.body7, i32 %198];
    i32 %202 = add i32 %200, i32 -48;
    i1 %203 = icmp ult i32 %202, i32 10;
    cbr i1 %203(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %204 = phi [^entry2, i32 %187] [^while.body8, i32 %206];
    i32 %205 = phi [^entry2, i32 0] [^while.body8, i32 %211];
    i32 %206 = call () -> i32 @getch();
    i1 %207 = icmp slt i32 %206, i32 48;
    i1 %208 = icmp sgt i32 %206, i32 57;
    i1 %209 = or i1 %207, i1 %208;
    i1 %210 = icmp eq i32 %204, i32 45;
    i32 %211 = select i1 %210 ? i32 1 : i32 %205;
    cbr i1 %209(prob = 0.97), ^while.body8, ^212;
  ^212:
    i32 %213 = phi [^entry2, i32 %187] [^while.body8, i32 %206];
    i32 %214 = phi [^entry2, i32 0] [^while.body8, i32 %211];
    i32 %215 = add i32 %213, i32 -48;
    i1 %216 = icmp ult i32 %215, i32 10;
    cbr i1 %216(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %217 = phi [^199, i32 %200] [^while.body9, i32 %219];
    i32 %218 = phi [^199, i32 0] [^while.body9, i32 %224];
    i32 %219 = call () -> i32 @getch();
    i32 %220 = add i32 %219, i32 -48;
    i1 %221 = icmp ult i32 %220, i32 10;
    i32 %222 = mul i32 %218, i32 10;
    i32 %223 = add i32 %222, i32 -48;
    i32 %224 = add i32 %217, i32 %223;
    cbr i1 %221(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %225 = phi [^199, i32 0] [^while.body9, i32 %224];
    i32 %226 = call () -> i32 @getch();
    i1 %227 = icmp slt i32 %226, i32 48;
    i1 %228 = icmp sgt i32 %226, i32 57;
    i1 %229 = or i1 %227, i1 %228;
    i1 %230 = icmp neq i32 %201, i32 0;
    i32 %231 = neg i32 %225;
    i32 %232 = select i1 %230 ? i32 %231 : i32 %225;
    cbr i1 %229(prob = 0.97), ^while.body11, ^257;
  ^while.body10:
    i32 %233 = phi [^212, i32 %213] [^while.body10, i32 %235];
    i32 %234 = phi [^212, i32 0] [^while.body10, i32 %240];
    i32 %235 = call () -> i32 @getch();
    i32 %236 = add i32 %235, i32 -48;
    i1 %237 = icmp ult i32 %236, i32 10;
    i32 %238 = mul i32 %234, i32 10;
    i32 %239 = add i32 %238, i32 -48;
    i32 %240 = add i32 %233, i32 %239;
    cbr i1 %237(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %241 = phi [^212, i32 0] [^while.body10, i32 %240];
    i32 %242 = call () -> i32 @getch();
    i1 %243 = icmp slt i32 %242, i32 48;
    i1 %244 = icmp sgt i32 %242, i32 57;
    i1 %245 = or i1 %243, i1 %244;
    i1 %246 = icmp neq i32 %214, i32 0;
    i32 %247 = neg i32 %241;
    i32 %248 = select i1 %246 ? i32 %247 : i32 %241;
    cbr i1 %245(prob = 0.97), ^while.body12, ^270;
  ^while.body11:
    i32 %249 = phi [^b4, i32 %226] [^while.body11, i32 %251];
    i32 %250 = phi [^b4, i32 0] [^while.body11, i32 %256];
    i32 %251 = call () -> i32 @getch();
    i1 %252 = icmp slt i32 %251, i32 48;
    i1 %253 = icmp sgt i32 %251, i32 57;
    i1 %254 = or i1 %252, i1 %253;
    i1 %255 = icmp eq i32 %249, i32 45;
    i32 %256 = select i1 %255 ? i32 1 : i32 %250;
    cbr i1 %254(prob = 0.97), ^while.body11, ^257;
  ^257:
    i32 %258 = phi [^b4, i32 %226] [^while.body11, i32 %251];
    i32 %259 = phi [^b4, i32 0] [^while.body11, i32 %256];
    i32 %260 = add i32 %258, i32 -48;
    i1 %261 = icmp ult i32 %260, i32 10;
    cbr i1 %261(prob = 0.97), ^while.body13, ^b7;
  ^while.body12:
    i32 %262 = phi [^b5, i32 %242] [^while.body12, i32 %264];
    i32 %263 = phi [^b5, i32 0] [^while.body12, i32 %269];
    i32 %264 = call () -> i32 @getch();
    i1 %265 = icmp slt i32 %264, i32 48;
    i1 %266 = icmp sgt i32 %264, i32 57;
    i1 %267 = or i1 %265, i1 %266;
    i1 %268 = icmp eq i32 %262, i32 45;
    i32 %269 = select i1 %268 ? i32 1 : i32 %263;
    cbr i1 %267(prob = 0.97), ^while.body12, ^270;
  ^270:
    i32 %271 = phi [^b5, i32 %242] [^while.body12, i32 %264];
    i32 %272 = phi [^b5, i32 0] [^while.body12, i32 %269];
    i32 %273 = add i32 %271, i32 -48;
    i1 %274 = icmp ult i32 %273, i32 10;
    cbr i1 %274(prob = 0.97), ^while.body14, ^b6;
  ^while.body13:
    i32 %275 = phi [^257, i32 %258] [^while.body13, i32 %277];
    i32 %276 = phi [^257, i32 0] [^while.body13, i32 %282];
    i32 %277 = call () -> i32 @getch();
    i32 %278 = add i32 %277, i32 -48;
    i1 %279 = icmp ult i32 %278, i32 10;
    i32 %280 = mul i32 %276, i32 10;
    i32 %281 = add i32 %280, i32 -48;
    i32 %282 = add i32 %275, i32 %281;
    cbr i1 %279(prob = 0.97), ^while.body13, ^b7;
  ^b6:
    i32 %283 = phi [^270, i32 0] [^while.body14, i32 %309];
    i1 %284 = icmp neq i32 %272, i32 0;
    i32 %285 = neg i32 %283;
    i32 %286 = select i1 %284 ? i32 %285 : i32 %283;
    i32* %287 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %176];
    store i32* %287 with i32 %286;
    i32* %288 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %248];
    i32 %289 = load i32* %288;
    i32* %290 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %176];
    store i32* %290 with i32 %289;
    i32* %291 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %286];
    store i32* %288 with i32 %176;
    i32* %292 = getelementptr &(i32* %287)[i64 1];
    store i32* %292 with i32 %248;
    i32 %293 = load i32* %291;
    i32* %294 = getelementptr &(i32* %290)[i64 1];
    store i32* %294 with i32 %293;
    i32 %295 = add i32 %176, i32 1;
    store i32* %291 with i32 %295;
    i32 %296 = add i32 %176, i32 2;
    i32 %297 = add i32 %175, i32 -1;
    ubr ^while.header;
  ^b7:
    i32 %298 = phi [^257, i32 0] [^while.body13, i32 %282];
    i1 %299 = icmp neq i32 %259, i32 0;
    i32 %300 = neg i32 %298;
    i32 %301 = select i1 %299 ? i32 %300 : i32 %298;
    cbr i1 %37(prob = 0.97), ^while.body15, ^if.then;
  ^while.body14:
    i32 %302 = phi [^270, i32 %271] [^while.body14, i32 %304];
    i32 %303 = phi [^270, i32 0] [^while.body14, i32 %309];
    i32 %304 = call () -> i32 @getch();
    i32 %305 = add i32 %304, i32 -48;
    i1 %306 = icmp ult i32 %305, i32 10;
    i32 %307 = mul i32 %303, i32 10;
    i32 %308 = add i32 %307, i32 -48;
    i32 %309 = add i32 %302, i32 %308;
    cbr i1 %306(prob = 0.97), ^while.body14, ^b6;
  ^if.then:
    i32 %310 = call (i32, i32) -> i32 @same(i32 %232, i32 %301);
    call (i32) -> void @putint(i32 %310);
    call (i32) -> void @putch(i32 10);
    i32 %311 = add i32 %175, i32 -1;
    ubr ^while.header;
  ^while.body15:
    i32 %312 = phi [^b7, i32 1] [^while.body15, i32 %314];
    i32* %313 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %312];
    store i32* %313 with i32 0;
    i32 %314 = add i32 %312, i32 1;
    i1 %315 = icmp sge i32 %36, i32 %314;
    cbr i1 %315(prob = 0.97), ^while.body15, ^if.then;
}
