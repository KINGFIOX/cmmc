internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to, align 8 { Flexible };
internal [5005 * i32]* @next, align 8 { Flexible };
internal [1005 * i32]* @head, align 8 { Flexible };
internal [1005 * i32]* @vis, align 8 { Flexible };
internal func @same(i32 %x, i32 %tar) -> i32 {
  ^entry:
    [1005 * i32]* %0 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    i32* %1 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %x];
    store i32* %1 with i32 1;
    i1 %2 = icmp eq i32 %x, i32 %tar;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %x];
    i32 %5 = load i32* %4;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    ubr ^while.header;
  ^b1:
    i32 %8 = phi [^entry, i32 1] [^while.header, i32 0] [^b3, i32 1] [^b6, i32 1] [^b9, i32 1] [^b12, i32 1] [^b15, i32 1] [^b18, i32 1] [^b21, i32 1] [^b24, i32 1];
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^b, i32 %5] [^b2, i32 %17];
    i1 %10 = icmp neq i32 %9, i32 -1;
    cbr i1 %10(prob = 0.984615), ^while.body, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %9];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^b2:
    i32* %16 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %9];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^b3:
    i1 %18 = icmp eq i32 %tar, i32 %12;
    store i32* %13 with i32 1;
    cbr i1 %18(prob = 0.5), ^b1, ^b4;
  ^b4:
    i32* %19 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    ubr ^while.header1;
  ^while.header1:
    i32 %21 = phi [^b4, i32 %20] [^b5, i32 %29];
    i1 %22 = icmp neq i32 %21, i32 -1;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b2;
  ^while.body1:
    i32* %23 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^b6, ^b5;
  ^b5:
    i32* %28 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %21];
    i32 %29 = load i32* %28;
    ubr ^while.header1;
  ^b6:
    i1 %30 = icmp eq i32 %tar, i32 %24;
    store i32* %25 with i32 1;
    cbr i1 %30(prob = 0.5), ^b1, ^b7;
  ^b7:
    i32* %31 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %24];
    i32 %32 = load i32* %31;
    ubr ^while.header2;
  ^while.header2:
    i32 %33 = phi [^b7, i32 %32] [^b8, i32 %41];
    i1 %34 = icmp neq i32 %33, i32 -1;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^b5;
  ^while.body2:
    i32* %35 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %33];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i1 %39 = icmp eq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^b9, ^b8;
  ^b8:
    i32* %40 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %33];
    i32 %41 = load i32* %40;
    ubr ^while.header2;
  ^b9:
    i1 %42 = icmp eq i32 %tar, i32 %36;
    store i32* %37 with i32 1;
    cbr i1 %42(prob = 0.5), ^b1, ^b10;
  ^b10:
    i32* %43 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %36];
    i32 %44 = load i32* %43;
    ubr ^while.header3;
  ^while.header3:
    i32 %45 = phi [^b10, i32 %44] [^b11, i32 %53];
    i1 %46 = icmp neq i32 %45, i32 -1;
    cbr i1 %46(prob = 0.984615), ^while.body3, ^b8;
  ^while.body3:
    i32* %47 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %45];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = icmp eq i32 %50, i32 0;
    cbr i1 %51(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32* %52 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %45];
    i32 %53 = load i32* %52;
    ubr ^while.header3;
  ^b12:
    i1 %54 = icmp eq i32 %tar, i32 %48;
    store i32* %49 with i32 1;
    cbr i1 %54(prob = 0.5), ^b1, ^b13;
  ^b13:
    i32* %55 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %48];
    i32 %56 = load i32* %55;
    ubr ^while.header4;
  ^while.header4:
    i32 %57 = phi [^b13, i32 %56] [^b14, i32 %65];
    i1 %58 = icmp neq i32 %57, i32 -1;
    cbr i1 %58(prob = 0.984615), ^while.body4, ^b11;
  ^while.body4:
    i32* %59 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %57];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i1 %63 = icmp eq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^b15, ^b14;
  ^b14:
    i32* %64 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %57];
    i32 %65 = load i32* %64;
    ubr ^while.header4;
  ^b15:
    i1 %66 = icmp eq i32 %tar, i32 %60;
    store i32* %61 with i32 1;
    cbr i1 %66(prob = 0.5), ^b1, ^b16;
  ^b16:
    i32* %67 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %60];
    i32 %68 = load i32* %67;
    ubr ^while.header5;
  ^while.header5:
    i32 %69 = phi [^b16, i32 %68] [^b17, i32 %77];
    i1 %70 = icmp neq i32 %69, i32 -1;
    cbr i1 %70(prob = 0.984615), ^while.body5, ^b14;
  ^while.body5:
    i32* %71 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %69];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = icmp eq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^b18, ^b17;
  ^b17:
    i32* %76 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %69];
    i32 %77 = load i32* %76;
    ubr ^while.header5;
  ^b18:
    i1 %78 = icmp eq i32 %tar, i32 %72;
    store i32* %73 with i32 1;
    cbr i1 %78(prob = 0.5), ^b1, ^b19;
  ^b19:
    i32* %79 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %72];
    i32 %80 = load i32* %79;
    ubr ^while.header6;
  ^while.header6:
    i32 %81 = phi [^b19, i32 %80] [^b20, i32 %89];
    i1 %82 = icmp neq i32 %81, i32 -1;
    cbr i1 %82(prob = 0.984615), ^while.body6, ^b17;
  ^while.body6:
    i32* %83 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %81];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i1 %87 = icmp eq i32 %86, i32 0;
    cbr i1 %87(prob = 0.5), ^b21, ^b20;
  ^b20:
    i32* %88 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %81];
    i32 %89 = load i32* %88;
    ubr ^while.header6;
  ^b21:
    i1 %90 = icmp eq i32 %tar, i32 %84;
    store i32* %85 with i32 1;
    cbr i1 %90(prob = 0.5), ^b1, ^b22;
  ^b22:
    i32* %91 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %84];
    i32 %92 = load i32* %91;
    ubr ^while.header7;
  ^while.header7:
    i32 %93 = phi [^b22, i32 %92] [^b23, i32 %101];
    i1 %94 = icmp neq i32 %93, i32 -1;
    cbr i1 %94(prob = 0.984615), ^while.body7, ^b20;
  ^while.body7:
    i32* %95 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %93];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([1005 * i32]* %0)[i64 0][i32 %96];
    i32 %98 = load i32* %97;
    i1 %99 = icmp eq i32 %98, i32 0;
    cbr i1 %99(prob = 0.5), ^b24, ^b23;
  ^b23:
    i32* %100 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %93];
    i32 %101 = load i32* %100;
    ubr ^while.header7;
  ^b24:
    i32 %102 = call (i32, i32) -> i32 @same(i32 %96, i32 %tar);
    i1 %103 = icmp neq i32 %102, i32 0;
    cbr i1 %103(prob = 0.5), ^b1, ^b23;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @vis to [1005 * i32]*;
    [5005 * i32]* %4 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^13;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %12];
    i32 %8 = call () -> i32 @getch();
    i32 %9 = add i32 %8, i32 -48;
    i1 %10 = icmp ugt i32 %9, i32 9;
    i1 %11 = icmp eq i32 %6, i32 45;
    i32 %12 = select i1 %11 ? i32 1 : i32 %7;
    cbr i1 %10(prob = 0.984615), ^while.body, ^13;
  ^13:
    i32 %14 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %15 = phi [^entry, i32 0] [^while.body, i32 %12];
    i32 %16 = add i32 %14, i32 -48;
    i1 %17 = icmp ult i32 %16, i32 10;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %18 = phi [^13, i32 %14] [^while.body1, i32 %20];
    i32 %19 = phi [^13, i32 0] [^while.body1, i32 %25];
    i32 %20 = call () -> i32 @getch();
    i32 %21 = add i32 %20, i32 -48;
    i1 %22 = icmp ult i32 %21, i32 10;
    i32 %23 = mul i32 %19, i32 10;
    i32 %24 = add i32 %23, i32 -48;
    i32 %25 = add i32 %18, i32 %24;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %26 = phi [^13, i32 0] [^while.body1, i32 %25];
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -48;
    i1 %29 = icmp ugt i32 %28, i32 9;
    i1 %30 = icmp neq i32 %15, i32 0;
    i32 %31 = neg i32 %26;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %26;
    i1 %33 = icmp sgt i32 %32, i32 0;
    cbr i1 %29(prob = 0.984615), ^while.body2, ^41;
  ^while.body2:
    i32 %34 = phi [^b, i32 %27] [^while.body2, i32 %36];
    i32 %35 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %36 = call () -> i32 @getch();
    i32 %37 = add i32 %36, i32 -48;
    i1 %38 = icmp ugt i32 %37, i32 9;
    i1 %39 = icmp eq i32 %34, i32 45;
    i32 %40 = select i1 %39 ? i32 1 : i32 %35;
    cbr i1 %38(prob = 0.984615), ^while.body2, ^41;
  ^41:
    i32 %42 = phi [^b, i32 %27] [^while.body2, i32 %36];
    i32 %43 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %44 = add i32 %42, i32 -48;
    i1 %45 = icmp ult i32 %44, i32 10;
    cbr i1 %45(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %46 = phi [^41, i32 0] [^while.body3, i32 %58];
    i1 %47 = icmp neq i32 %43, i32 0;
    i32 %48 = neg i32 %46;
    i32 %49 = select i1 %47 ? i32 %48 : i32 %46;
    [1005 * i32]* %50 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    ubr ^while.body4;
  ^while.body3:
    i32 %51 = phi [^41, i32 %42] [^while.body3, i32 %53];
    i32 %52 = phi [^41, i32 0] [^while.body3, i32 %58];
    i32 %53 = call () -> i32 @getch();
    i32 %54 = add i32 %53, i32 -48;
    i1 %55 = icmp ult i32 %54, i32 10;
    i32 %56 = mul i32 %52, i32 10;
    i32 %57 = add i32 %56, i32 -48;
    i32 %58 = add i32 %51, i32 %57;
    cbr i1 %55(prob = 0.984615), ^while.body3, ^b1;
  ^while.body4:
    i32 %59 = phi [^b1, i32 0] [^while.body4, i32 %124];
    i32* %60 = getelementptr &([1005 * i32]* %50)[i64 0][i32 %59];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %60)[i64 1];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %60)[i64 2];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %60)[i64 3];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %60)[i64 4];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %60)[i64 5];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %60)[i64 6];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %60)[i64 7];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %60)[i64 8];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %60)[i64 9];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %60)[i64 10];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %60)[i64 11];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %60)[i64 12];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %60)[i64 13];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %60)[i64 14];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %60)[i64 15];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %60)[i64 16];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %60)[i64 17];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %60)[i64 18];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %60)[i64 19];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %60)[i64 20];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %60)[i64 21];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %60)[i64 22];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %60)[i64 23];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %60)[i64 24];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %60)[i64 25];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %60)[i64 26];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %60)[i64 27];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %60)[i64 28];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %60)[i64 29];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %60)[i64 30];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %60)[i64 31];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %60)[i64 32];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %60)[i64 33];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %60)[i64 34];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %60)[i64 35];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %60)[i64 36];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %60)[i64 37];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %60)[i64 38];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %60)[i64 39];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %60)[i64 40];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %60)[i64 41];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %60)[i64 42];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %60)[i64 43];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %60)[i64 44];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %60)[i64 45];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %60)[i64 46];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %60)[i64 47];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %60)[i64 48];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %60)[i64 49];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %60)[i64 50];
    store i32* %110 with i32 -1;
    i32* %111 = getelementptr &(i32* %60)[i64 51];
    store i32* %111 with i32 -1;
    i32* %112 = getelementptr &(i32* %60)[i64 52];
    store i32* %112 with i32 -1;
    i32* %113 = getelementptr &(i32* %60)[i64 53];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %60)[i64 54];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %60)[i64 55];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %60)[i64 56];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %60)[i64 57];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %60)[i64 58];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %60)[i64 59];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %60)[i64 60];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %60)[i64 61];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %60)[i64 62];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %60)[i64 63];
    store i32* %123 with i32 -1;
    i32 %124 = add i32 %59, i32 64;
    i1 %125 = icmp slt i32 %124, i32 960;
    cbr i1 %125(prob = 0.933333), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %126 = getelementptr &(i32* %60)[i64 64];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %60)[i64 65];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %60)[i64 66];
    store i32* %128 with i32 -1;
    i32* %129 = getelementptr &(i32* %60)[i64 67];
    store i32* %129 with i32 -1;
    i32* %130 = getelementptr &(i32* %60)[i64 68];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %60)[i64 69];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %60)[i64 70];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %60)[i64 71];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %60)[i64 72];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %60)[i64 73];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %60)[i64 74];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %60)[i64 75];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %60)[i64 76];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %60)[i64 77];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %60)[i64 78];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %60)[i64 79];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %60)[i64 80];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %60)[i64 81];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %60)[i64 82];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %60)[i64 83];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %60)[i64 84];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %60)[i64 85];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %60)[i64 86];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %60)[i64 87];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %60)[i64 88];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %60)[i64 89];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %60)[i64 90];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %60)[i64 91];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %60)[i64 92];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %60)[i64 93];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %60)[i64 94];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %60)[i64 95];
    store i32* %157 with i32 -1;
    i32* %158 = getelementptr &(i32* %60)[i64 96];
    store i32* %158 with i32 -1;
    i32* %159 = getelementptr &(i32* %60)[i64 97];
    store i32* %159 with i32 -1;
    i32* %160 = getelementptr &(i32* %60)[i64 98];
    store i32* %160 with i32 -1;
    i32* %161 = getelementptr &(i32* %60)[i64 99];
    store i32* %161 with i32 -1;
    i32* %162 = getelementptr &(i32* %60)[i64 100];
    store i32* %162 with i32 -1;
    i32* %163 = getelementptr &(i32* %60)[i64 101];
    store i32* %163 with i32 -1;
    i32* %164 = getelementptr &(i32* %60)[i64 102];
    store i32* %164 with i32 -1;
    i32* %165 = getelementptr &(i32* %60)[i64 103];
    store i32* %165 with i32 -1;
    i32* %166 = getelementptr &(i32* %60)[i64 104];
    store i32* %166 with i32 -1;
    i32* %167 = getelementptr &(i32* %60)[i64 105];
    store i32* %167 with i32 -1;
    i32* %168 = getelementptr &(i32* %60)[i64 106];
    store i32* %168 with i32 -1;
    i32* %169 = getelementptr &(i32* %60)[i64 107];
    store i32* %169 with i32 -1;
    i32* %170 = getelementptr &(i32* %60)[i64 108];
    store i32* %170 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %171 = phi [^while.body5, i32 0] [^b6, i32 %285] [^b8, i32 %171];
    i32 %172 = phi [^while.body5, i32 %49] [^b6, i32 %179] [^b8, i32 %179];
    i1 %173 = icmp neq i32 %172, i32 0;
    cbr i1 %173(prob = 0.984615), ^while.body6, ^b2;
  ^while.body6:
    i32 %174 = call () -> i32 @getch();
    i1 %175 = icmp neq i32 %174, i32 81;
    i1 %176 = icmp neq i32 %174, i32 85;
    i1 %177 = and i1 %175, i1 %176;
    cbr i1 %177(prob = 0.984615), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %178 = icmp eq i32 %174, i32 81;
    i32 %179 = add i32 %172, i32 -1;
    cbr i1 %178(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %180 = call () -> i32 @getch();
    i32 %181 = add i32 %180, i32 -48;
    i1 %182 = icmp ugt i32 %181, i32 9;
    cbr i1 %182(prob = 0.984615), ^while.body7, ^193;
  ^if.else:
    i32 %183 = call () -> i32 @getch();
    i32 %184 = add i32 %183, i32 -48;
    i1 %185 = icmp ugt i32 %184, i32 9;
    cbr i1 %185(prob = 0.984615), ^while.body8, ^205;
  ^while.body7:
    i32 %186 = phi [^if.then, i32 %180] [^while.body7, i32 %188];
    i32 %187 = phi [^if.then, i32 0] [^while.body7, i32 %192];
    i32 %188 = call () -> i32 @getch();
    i32 %189 = add i32 %188, i32 -48;
    i1 %190 = icmp ugt i32 %189, i32 9;
    i1 %191 = icmp eq i32 %186, i32 45;
    i32 %192 = select i1 %191 ? i32 1 : i32 %187;
    cbr i1 %190(prob = 0.984615), ^while.body7, ^193;
  ^193:
    i32 %194 = phi [^if.then, i32 %180] [^while.body7, i32 %188];
    i32 %195 = phi [^if.then, i32 0] [^while.body7, i32 %192];
    i32 %196 = add i32 %194, i32 -48;
    i1 %197 = icmp ult i32 %196, i32 10;
    cbr i1 %197(prob = 0.984615), ^while.body9, ^b4;
  ^while.body8:
    i32 %198 = phi [^if.else, i32 %183] [^while.body8, i32 %200];
    i32 %199 = phi [^if.else, i32 0] [^while.body8, i32 %204];
    i32 %200 = call () -> i32 @getch();
    i32 %201 = add i32 %200, i32 -48;
    i1 %202 = icmp ugt i32 %201, i32 9;
    i1 %203 = icmp eq i32 %198, i32 45;
    i32 %204 = select i1 %203 ? i32 1 : i32 %199;
    cbr i1 %202(prob = 0.984615), ^while.body8, ^205;
  ^205:
    i32 %206 = phi [^if.else, i32 %183] [^while.body8, i32 %200];
    i32 %207 = phi [^if.else, i32 0] [^while.body8, i32 %204];
    i32 %208 = add i32 %206, i32 -48;
    i1 %209 = icmp ult i32 %208, i32 10;
    cbr i1 %209(prob = 0.984615), ^while.body10, ^b5;
  ^while.body9:
    i32 %210 = phi [^193, i32 %194] [^while.body9, i32 %212];
    i32 %211 = phi [^193, i32 0] [^while.body9, i32 %217];
    i32 %212 = call () -> i32 @getch();
    i32 %213 = add i32 %212, i32 -48;
    i1 %214 = icmp ult i32 %213, i32 10;
    i32 %215 = mul i32 %211, i32 10;
    i32 %216 = add i32 %215, i32 -48;
    i32 %217 = add i32 %210, i32 %216;
    cbr i1 %214(prob = 0.984615), ^while.body9, ^b4;
  ^b4:
    i32 %218 = phi [^193, i32 0] [^while.body9, i32 %217];
    i32 %219 = call () -> i32 @getch();
    i32 %220 = add i32 %219, i32 -48;
    i1 %221 = icmp ugt i32 %220, i32 9;
    i1 %222 = icmp neq i32 %195, i32 0;
    i32 %223 = neg i32 %218;
    i32 %224 = select i1 %222 ? i32 %223 : i32 %218;
    cbr i1 %221(prob = 0.984615), ^while.body11, ^247;
  ^while.body10:
    i32 %225 = phi [^205, i32 %206] [^while.body10, i32 %227];
    i32 %226 = phi [^205, i32 0] [^while.body10, i32 %232];
    i32 %227 = call () -> i32 @getch();
    i32 %228 = add i32 %227, i32 -48;
    i1 %229 = icmp ult i32 %228, i32 10;
    i32 %230 = mul i32 %226, i32 10;
    i32 %231 = add i32 %230, i32 -48;
    i32 %232 = add i32 %225, i32 %231;
    cbr i1 %229(prob = 0.984615), ^while.body10, ^b5;
  ^b5:
    i32 %233 = phi [^205, i32 0] [^while.body10, i32 %232];
    i32 %234 = call () -> i32 @getch();
    i32 %235 = add i32 %234, i32 -48;
    i1 %236 = icmp ugt i32 %235, i32 9;
    i1 %237 = icmp neq i32 %207, i32 0;
    i32 %238 = neg i32 %233;
    i32 %239 = select i1 %237 ? i32 %238 : i32 %233;
    cbr i1 %236(prob = 0.984615), ^while.body12, ^259;
  ^while.body11:
    i32 %240 = phi [^b4, i32 %219] [^while.body11, i32 %242];
    i32 %241 = phi [^b4, i32 0] [^while.body11, i32 %246];
    i32 %242 = call () -> i32 @getch();
    i32 %243 = add i32 %242, i32 -48;
    i1 %244 = icmp ugt i32 %243, i32 9;
    i1 %245 = icmp eq i32 %240, i32 45;
    i32 %246 = select i1 %245 ? i32 1 : i32 %241;
    cbr i1 %244(prob = 0.984615), ^while.body11, ^247;
  ^247:
    i32 %248 = phi [^b4, i32 %219] [^while.body11, i32 %242];
    i32 %249 = phi [^b4, i32 0] [^while.body11, i32 %246];
    i32 %250 = add i32 %248, i32 -48;
    i1 %251 = icmp ult i32 %250, i32 10;
    cbr i1 %251(prob = 0.984615), ^while.body13, ^b7;
  ^while.body12:
    i32 %252 = phi [^b5, i32 %234] [^while.body12, i32 %254];
    i32 %253 = phi [^b5, i32 0] [^while.body12, i32 %258];
    i32 %254 = call () -> i32 @getch();
    i32 %255 = add i32 %254, i32 -48;
    i1 %256 = icmp ugt i32 %255, i32 9;
    i1 %257 = icmp eq i32 %252, i32 45;
    i32 %258 = select i1 %257 ? i32 1 : i32 %253;
    cbr i1 %256(prob = 0.984615), ^while.body12, ^259;
  ^259:
    i32 %260 = phi [^b5, i32 %234] [^while.body12, i32 %254];
    i32 %261 = phi [^b5, i32 0] [^while.body12, i32 %258];
    i32 %262 = add i32 %260, i32 -48;
    i1 %263 = icmp ult i32 %262, i32 10;
    cbr i1 %263(prob = 0.984615), ^while.body14, ^b6;
  ^while.body13:
    i32 %264 = phi [^247, i32 %248] [^while.body13, i32 %266];
    i32 %265 = phi [^247, i32 0] [^while.body13, i32 %271];
    i32 %266 = call () -> i32 @getch();
    i32 %267 = add i32 %266, i32 -48;
    i1 %268 = icmp ult i32 %267, i32 10;
    i32 %269 = mul i32 %265, i32 10;
    i32 %270 = add i32 %269, i32 -48;
    i32 %271 = add i32 %264, i32 %270;
    cbr i1 %268(prob = 0.984615), ^while.body13, ^b7;
  ^b6:
    i32 %272 = phi [^259, i32 0] [^while.body14, i32 %297];
    i1 %273 = icmp neq i32 %261, i32 0;
    i32 %274 = neg i32 %272;
    i32 %275 = select i1 %273 ? i32 %274 : i32 %272;
    i32* %276 = getelementptr &([5005 * i32]* %4)[i64 0][i32 %171];
    store i32* %276 with i32 %275;
    i32* %277 = getelementptr &([1005 * i32]* %50)[i64 0][i32 %239];
    i32 %278 = load i32* %277;
    i32* %279 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %171];
    store i32* %279 with i32 %278;
    i32* %280 = getelementptr &([1005 * i32]* %50)[i64 0][i32 %275];
    store i32* %277 with i32 %171;
    i32* %281 = getelementptr &(i32* %276)[i64 1];
    store i32* %281 with i32 %239;
    i32 %282 = load i32* %280;
    i32* %283 = getelementptr &(i32* %279)[i64 1];
    store i32* %283 with i32 %282;
    i32 %284 = add i32 %171, i32 1;
    store i32* %280 with i32 %284;
    i32 %285 = add i32 %171, i32 2;
    ubr ^while.header;
  ^b7:
    i32 %286 = phi [^247, i32 0] [^while.body13, i32 %271];
    i1 %287 = icmp neq i32 %249, i32 0;
    i32 %288 = neg i32 %286;
    i32 %289 = select i1 %287 ? i32 %288 : i32 %286;
    cbr i1 %33(prob = 0.984615), ^while.body15, ^b8;
  ^while.body14:
    i32 %290 = phi [^259, i32 %260] [^while.body14, i32 %292];
    i32 %291 = phi [^259, i32 0] [^while.body14, i32 %297];
    i32 %292 = call () -> i32 @getch();
    i32 %293 = add i32 %292, i32 -48;
    i1 %294 = icmp ult i32 %293, i32 10;
    i32 %295 = mul i32 %291, i32 10;
    i32 %296 = add i32 %295, i32 -48;
    i32 %297 = add i32 %290, i32 %296;
    cbr i1 %294(prob = 0.984615), ^while.body14, ^b6;
  ^b8:
    i32 %298 = call (i32, i32) -> i32 @same(i32 %224, i32 %289);
    call (i32) -> void @putint(i32 %298);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^while.body15:
    i32 %299 = phi [^b7, i32 1] [^while.body15, i32 %301];
    i32* %300 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %299];
    store i32* %300 with i32 0;
    i32 %301 = add i32 %299, i32 1;
    i1 %302 = icmp sge i32 %32, i32 %301;
    cbr i1 %302(prob = 0.984615), ^while.body15, ^b8;
}
