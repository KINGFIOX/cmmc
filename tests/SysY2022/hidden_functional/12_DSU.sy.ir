internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^12;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp slt i32 %6, i32 48;
    i1 %8 = icmp sgt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = icmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^12;
  ^12:
    i32 %13 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %15 = add i32 %13, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = phi [^12, i32 %13] [^while.body1, i32 %19];
    i32 %18 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    i32 %22 = mul i32 %18, i32 10;
    i32 %23 = add i32 %22, i32 -48;
    i32 %24 = add i32 %17, i32 %23;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %25 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = icmp slt i32 %26, i32 48;
    i1 %28 = icmp sgt i32 %26, i32 57;
    i1 %29 = or i1 %27, i1 %28;
    i1 %30 = icmp neq i32 %14, i32 0;
    i32 %31 = neg i32 %25;
    i32 %32 = select i1 %30 ? i32 %31 : i32 %25;
    cbr i1 %29(prob = 0.97), ^while.body2, ^41;
  ^while.body2:
    i32 %33 = phi [^b, i32 %26] [^while.body2, i32 %35];
    i32 %34 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %35 = call () -> i32 @getch();
    i1 %36 = icmp slt i32 %35, i32 48;
    i1 %37 = icmp sgt i32 %35, i32 57;
    i1 %38 = or i1 %36, i1 %37;
    i1 %39 = icmp eq i32 %33, i32 45;
    i32 %40 = select i1 %39 ? i32 1 : i32 %34;
    cbr i1 %38(prob = 0.97), ^while.body2, ^41;
  ^41:
    i32 %42 = phi [^b, i32 %26] [^while.body2, i32 %35];
    i32 %43 = phi [^b, i32 0] [^while.body2, i32 %40];
    i32 %44 = add i32 %42, i32 -48;
    i1 %45 = icmp ult i32 %44, i32 10;
    cbr i1 %45(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %46 = phi [^41, i32 %42] [^while.body3, i32 %48];
    i32 %47 = phi [^41, i32 0] [^while.body3, i32 %53];
    i32 %48 = call () -> i32 @getch();
    i32 %49 = add i32 %48, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    i32 %51 = mul i32 %47, i32 10;
    i32 %52 = add i32 %51, i32 -48;
    i32 %53 = add i32 %46, i32 %52;
    cbr i1 %50(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %54 = phi [^41, i32 0] [^while.body3, i32 %53];
    i1 %55 = icmp neq i32 %43, i32 0;
    i32 %56 = neg i32 %54;
    i32 %57 = select i1 %55 ? i32 %56 : i32 %54;
    i1 %58 = icmp sgt i32 %32, i32 0;
    [100005 * i32]* %59 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    cbr i1 %58(prob = 0.97), ^while.body4, ^while.header;
  ^while.body4:
    i32 %60 = phi [^b1, i32 1] [^while.body4, i32 %62];
    i32* %61 = getelementptr &([100005 * i32]* %59)[i64 0][i32 %60];
    store i32* %61 with i32 %60;
    i32 %62 = add i32 %60, i32 1;
    i1 %63 = icmp sge i32 %32, i32 %62;
    cbr i1 %63(prob = 0.97), ^while.body4, ^while.header;
  ^while.header:
    i32 %64 = phi [^b1, i32 %57] [^while.body4, i32 %57] [^b6, i32 %172] [^b7, i32 %187];
    i1 %65 = icmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %66 = call () -> i32 @getch();
    i1 %67 = icmp neq i32 %66, i32 81;
    i1 %68 = icmp neq i32 %66, i32 85;
    i1 %69 = and i1 %67, i1 %68;
    cbr i1 %69(prob = 0.97), ^while.body5, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %70 = icmp eq i32 %66, i32 81;
    cbr i1 %70(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %71 = call () -> i32 @getch();
    i1 %72 = icmp slt i32 %71, i32 48;
    i1 %73 = icmp sgt i32 %71, i32 57;
    i1 %74 = or i1 %72, i1 %73;
    cbr i1 %74(prob = 0.97), ^while.body6, ^87;
  ^entry2:
    i32 %75 = call () -> i32 @getch();
    i1 %76 = icmp slt i32 %75, i32 48;
    i1 %77 = icmp sgt i32 %75, i32 57;
    i1 %78 = or i1 %76, i1 %77;
    cbr i1 %78(prob = 0.97), ^while.body7, ^100;
  ^while.body6:
    i32 %79 = phi [^entry1, i32 %71] [^while.body6, i32 %81];
    i32 %80 = phi [^entry1, i32 0] [^while.body6, i32 %86];
    i32 %81 = call () -> i32 @getch();
    i1 %82 = icmp slt i32 %81, i32 48;
    i1 %83 = icmp sgt i32 %81, i32 57;
    i1 %84 = or i1 %82, i1 %83;
    i1 %85 = icmp eq i32 %79, i32 45;
    i32 %86 = select i1 %85 ? i32 1 : i32 %80;
    cbr i1 %84(prob = 0.97), ^while.body6, ^87;
  ^87:
    i32 %88 = phi [^entry1, i32 %71] [^while.body6, i32 %81];
    i32 %89 = phi [^entry1, i32 0] [^while.body6, i32 %86];
    i32 %90 = add i32 %88, i32 -48;
    i1 %91 = icmp ult i32 %90, i32 10;
    cbr i1 %91(prob = 0.97), ^while.body8, ^b4;
  ^while.body7:
    i32 %92 = phi [^entry2, i32 %75] [^while.body7, i32 %94];
    i32 %93 = phi [^entry2, i32 0] [^while.body7, i32 %99];
    i32 %94 = call () -> i32 @getch();
    i1 %95 = icmp slt i32 %94, i32 48;
    i1 %96 = icmp sgt i32 %94, i32 57;
    i1 %97 = or i1 %95, i1 %96;
    i1 %98 = icmp eq i32 %92, i32 45;
    i32 %99 = select i1 %98 ? i32 1 : i32 %93;
    cbr i1 %97(prob = 0.97), ^while.body7, ^100;
  ^100:
    i32 %101 = phi [^entry2, i32 %75] [^while.body7, i32 %94];
    i32 %102 = phi [^entry2, i32 0] [^while.body7, i32 %99];
    i32 %103 = add i32 %101, i32 -48;
    i1 %104 = icmp ult i32 %103, i32 10;
    cbr i1 %104(prob = 0.97), ^while.body9, ^b5;
  ^while.body8:
    i32 %105 = phi [^87, i32 %88] [^while.body8, i32 %107];
    i32 %106 = phi [^87, i32 0] [^while.body8, i32 %112];
    i32 %107 = call () -> i32 @getch();
    i32 %108 = add i32 %107, i32 -48;
    i1 %109 = icmp ult i32 %108, i32 10;
    i32 %110 = mul i32 %106, i32 10;
    i32 %111 = add i32 %110, i32 -48;
    i32 %112 = add i32 %105, i32 %111;
    cbr i1 %109(prob = 0.97), ^while.body8, ^b4;
  ^b4:
    i32 %113 = phi [^87, i32 0] [^while.body8, i32 %112];
    i32 %114 = call () -> i32 @getch();
    i1 %115 = icmp slt i32 %114, i32 48;
    i1 %116 = icmp sgt i32 %114, i32 57;
    i1 %117 = or i1 %115, i1 %116;
    i1 %118 = icmp neq i32 %89, i32 0;
    i32 %119 = neg i32 %113;
    i32 %120 = select i1 %118 ? i32 %119 : i32 %113;
    cbr i1 %117(prob = 0.97), ^while.body10, ^146;
  ^while.body9:
    i32 %121 = phi [^100, i32 %101] [^while.body9, i32 %123];
    i32 %122 = phi [^100, i32 0] [^while.body9, i32 %128];
    i32 %123 = call () -> i32 @getch();
    i32 %124 = add i32 %123, i32 -48;
    i1 %125 = icmp ult i32 %124, i32 10;
    i32 %126 = mul i32 %122, i32 10;
    i32 %127 = add i32 %126, i32 -48;
    i32 %128 = add i32 %121, i32 %127;
    cbr i1 %125(prob = 0.97), ^while.body9, ^b5;
  ^b5:
    i32 %129 = phi [^100, i32 0] [^while.body9, i32 %128];
    i1 %130 = icmp neq i32 %102, i32 0;
    i32 %131 = neg i32 %129;
    i32 %132 = select i1 %130 ? i32 %131 : i32 %129;
    i32 %133 = call (i32) -> i32 @find(i32 %132);
    i32 %134 = call () -> i32 @getch();
    i1 %135 = icmp slt i32 %134, i32 48;
    i1 %136 = icmp sgt i32 %134, i32 57;
    i1 %137 = or i1 %135, i1 %136;
    cbr i1 %137(prob = 0.97), ^while.body11, ^159;
  ^while.body10:
    i32 %138 = phi [^b4, i32 %114] [^while.body10, i32 %140];
    i32 %139 = phi [^b4, i32 0] [^while.body10, i32 %145];
    i32 %140 = call () -> i32 @getch();
    i1 %141 = icmp slt i32 %140, i32 48;
    i1 %142 = icmp sgt i32 %140, i32 57;
    i1 %143 = or i1 %141, i1 %142;
    i1 %144 = icmp eq i32 %138, i32 45;
    i32 %145 = select i1 %144 ? i32 1 : i32 %139;
    cbr i1 %143(prob = 0.97), ^while.body10, ^146;
  ^146:
    i32 %147 = phi [^b4, i32 %114] [^while.body10, i32 %140];
    i32 %148 = phi [^b4, i32 0] [^while.body10, i32 %145];
    i32 %149 = add i32 %147, i32 -48;
    i1 %150 = icmp ult i32 %149, i32 10;
    cbr i1 %150(prob = 0.97), ^while.body12, ^b6;
  ^while.body11:
    i32 %151 = phi [^b5, i32 %134] [^while.body11, i32 %153];
    i32 %152 = phi [^b5, i32 0] [^while.body11, i32 %158];
    i32 %153 = call () -> i32 @getch();
    i1 %154 = icmp slt i32 %153, i32 48;
    i1 %155 = icmp sgt i32 %153, i32 57;
    i1 %156 = or i1 %154, i1 %155;
    i1 %157 = icmp eq i32 %151, i32 45;
    i32 %158 = select i1 %157 ? i32 1 : i32 %152;
    cbr i1 %156(prob = 0.97), ^while.body11, ^159;
  ^159:
    i32 %160 = phi [^b5, i32 %134] [^while.body11, i32 %153];
    i32 %161 = phi [^b5, i32 0] [^while.body11, i32 %158];
    i32 %162 = add i32 %160, i32 -48;
    i1 %163 = icmp ult i32 %162, i32 10;
    cbr i1 %163(prob = 0.97), ^while.body13, ^b7;
  ^b6:
    i32 %164 = phi [^146, i32 0] [^while.body12, i32 %180];
    i32 %165 = call (i32) -> i32 @find(i32 %120);
    i1 %166 = icmp neq i32 %148, i32 0;
    i32 %167 = neg i32 %164;
    i32 %168 = select i1 %166 ? i32 %167 : i32 %164;
    i32 %169 = call (i32) -> i32 @find(i32 %168);
    i1 %170 = icmp eq i32 %165, i32 %169;
    i32 %171 = zext i1 %170 to i32;
    call (i32) -> void @putint(i32 %171);
    call (i32) -> void @putch(i32 10);
    i32 %172 = add i32 %64, i32 -1;
    ubr ^while.header;
  ^while.body12:
    i32 %173 = phi [^146, i32 %147] [^while.body12, i32 %175];
    i32 %174 = phi [^146, i32 0] [^while.body12, i32 %180];
    i32 %175 = call () -> i32 @getch();
    i32 %176 = add i32 %175, i32 -48;
    i1 %177 = icmp ult i32 %176, i32 10;
    i32 %178 = mul i32 %174, i32 10;
    i32 %179 = add i32 %178, i32 -48;
    i32 %180 = add i32 %173, i32 %179;
    cbr i1 %177(prob = 0.97), ^while.body12, ^b6;
  ^b7:
    i32 %181 = phi [^159, i32 0] [^while.body13, i32 %195];
    i1 %182 = icmp neq i32 %161, i32 0;
    i32 %183 = neg i32 %181;
    i32 %184 = select i1 %182 ? i32 %183 : i32 %181;
    i32 %185 = call (i32) -> i32 @find(i32 %184);
    i32* %186 = getelementptr &([100005 * i32]* %59)[i64 0][i32 %133];
    store i32* %186 with i32 %185;
    i32 %187 = add i32 %64, i32 -1;
    ubr ^while.header;
  ^while.body13:
    i32 %188 = phi [^159, i32 %160] [^while.body13, i32 %190];
    i32 %189 = phi [^159, i32 0] [^while.body13, i32 %195];
    i32 %190 = call () -> i32 @getch();
    i32 %191 = add i32 %190, i32 -48;
    i1 %192 = icmp ult i32 %191, i32 10;
    i32 %193 = mul i32 %189, i32 10;
    i32 %194 = add i32 %193, i32 -48;
    i32 %195 = add i32 %188, i32 %194;
    cbr i1 %192(prob = 0.97), ^while.body13, ^b7;
}
