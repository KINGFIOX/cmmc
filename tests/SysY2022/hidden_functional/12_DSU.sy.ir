internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %x;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b;
  ^b:
    i32 %5 = phi [^entry, i32 %x] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    i1 %8 = scmp gt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = scmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %11];
    i1 %14 = scmp gt i32 %12, i32 47;
    i1 %15 = scmp le i32 %12, i32 57;
    i1 %16 = and i1 %14, i1 %15;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = phi [^indirect, i32 0] [^while.body1, i32 %25];
    i32 %18 = phi [^indirect, i32 %12] [^while.body1, i32 %19];
    i32 %19 = call () -> i32 @getch();
    i1 %20 = scmp gt i32 %19, i32 47;
    i1 %21 = scmp le i32 %19, i32 57;
    i1 %22 = and i1 %20, i1 %21;
    i32 %23 = mul i32 %17, i32 10;
    i32 %24 = add i32 %23, i32 -48;
    i32 %25 = add i32 %24, i32 %18;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %26 = phi [^indirect, i32 0] [^while.body1, i32 %25];
    i32 %27 = call () -> i32 @getch();
    i1 %28 = scmp lt i32 %27, i32 48;
    i1 %29 = scmp gt i32 %27, i32 57;
    i1 %30 = or i1 %28, i1 %29;
    i32 %31 = neg i32 %26;
    i1 %32 = scmp neq i32 %13, i32 0;
    i32 %33 = select i1 %32 ? i32 %31 : i32 %26;
    cbr i1 %30(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %34 = phi [^b, i32 %27] [^while.body2, i32 %36];
    i32 %35 = phi [^b, i32 0] [^while.body2, i32 %41];
    i32 %36 = call () -> i32 @getch();
    i1 %37 = scmp lt i32 %36, i32 48;
    i1 %38 = scmp gt i32 %36, i32 57;
    i1 %39 = or i1 %37, i1 %38;
    i1 %40 = scmp eq i32 %34, i32 45;
    i32 %41 = select i1 %40 ? i32 1 : i32 %35;
    cbr i1 %39(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %42 = phi [^b, i32 %27] [^while.body2, i32 %36];
    i32 %43 = phi [^b, i32 0] [^while.body2, i32 %41];
    i1 %44 = scmp gt i32 %42, i32 47;
    i1 %45 = scmp le i32 %42, i32 57;
    i1 %46 = and i1 %44, i1 %45;
    cbr i1 %46(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %47 = phi [^indirect1, i32 0] [^while.body3, i32 %55];
    i32 %48 = phi [^indirect1, i32 %42] [^while.body3, i32 %49];
    i32 %49 = call () -> i32 @getch();
    i1 %50 = scmp gt i32 %49, i32 47;
    i1 %51 = scmp le i32 %49, i32 57;
    i1 %52 = and i1 %50, i1 %51;
    i32 %53 = mul i32 %47, i32 10;
    i32 %54 = add i32 %53, i32 -48;
    i32 %55 = add i32 %54, i32 %48;
    cbr i1 %52(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %56 = phi [^indirect1, i32 0] [^while.body3, i32 %55];
    i32 %57 = neg i32 %56;
    i1 %58 = scmp neq i32 %43, i32 0;
    i32 %59 = select i1 %58 ? i32 %57 : i32 %56;
    [100005 * i32]* %60 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i1 %61 = scmp gt i32 %33, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body4, ^while.header;
  ^while.body4:
    i32 %62 = phi [^b1, i32 1] [^while.body4, i32 %64];
    i32* %63 = getelementptr &([100005 * i32]* %60)[i64 0][i32 %62];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %62, i32 1;
    i1 %65 = scmp le i32 %64, i32 %33;
    cbr i1 %65(prob = 0.97), ^while.body4, ^while.header;
  ^while.header:
    i32 %66 = phi [^b1, i32 %59] [^while.body4, i32 %59] [^b8, i32 %205];
    i1 %67 = scmp neq i32 %66, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %68 = call () -> i32 @getch();
    i1 %69 = scmp neq i32 %68, i32 81;
    i1 %70 = scmp neq i32 %68, i32 85;
    i1 %71 = and i1 %69, i1 %70;
    cbr i1 %71(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^while.body6:
    i32 %72 = call () -> i32 @getch();
    i1 %73 = scmp neq i32 %72, i32 81;
    i1 %74 = scmp neq i32 %72, i32 85;
    i1 %75 = and i1 %73, i1 %74;
    cbr i1 %75(prob = 0.97), ^while.body6, ^b3;
  ^b3:
    i32 %76 = phi [^while.body5, i32 %68] [^while.body6, i32 %72];
    i1 %77 = scmp eq i32 %76, i32 81;
    cbr i1 %77(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %78 = call () -> i32 @getch();
    i1 %79 = scmp lt i32 %78, i32 48;
    i1 %80 = scmp gt i32 %78, i32 57;
    i1 %81 = or i1 %79, i1 %80;
    cbr i1 %81(prob = 0.97), ^while.body7, ^indirect2;
  ^entry2:
    i32 %82 = call () -> i32 @getch();
    i1 %83 = scmp lt i32 %82, i32 48;
    i1 %84 = scmp gt i32 %82, i32 57;
    i1 %85 = or i1 %83, i1 %84;
    cbr i1 %85(prob = 0.97), ^while.body8, ^indirect3;
  ^while.body7:
    i32 %86 = phi [^entry1, i32 %78] [^while.body7, i32 %88];
    i32 %87 = phi [^entry1, i32 0] [^while.body7, i32 %93];
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp lt i32 %88, i32 48;
    i1 %90 = scmp gt i32 %88, i32 57;
    i1 %91 = or i1 %89, i1 %90;
    i1 %92 = scmp eq i32 %86, i32 45;
    i32 %93 = select i1 %92 ? i32 1 : i32 %87;
    cbr i1 %91(prob = 0.97), ^while.body7, ^indirect2;
  ^indirect2:
    i32 %94 = phi [^entry1, i32 %78] [^while.body7, i32 %88];
    i32 %95 = phi [^entry1, i32 0] [^while.body7, i32 %93];
    i1 %96 = scmp gt i32 %94, i32 47;
    i1 %97 = scmp le i32 %94, i32 57;
    i1 %98 = and i1 %96, i1 %97;
    cbr i1 %98(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %99 = phi [^entry2, i32 %82] [^while.body8, i32 %101];
    i32 %100 = phi [^entry2, i32 0] [^while.body8, i32 %106];
    i32 %101 = call () -> i32 @getch();
    i1 %102 = scmp lt i32 %101, i32 48;
    i1 %103 = scmp gt i32 %101, i32 57;
    i1 %104 = or i1 %102, i1 %103;
    i1 %105 = scmp eq i32 %99, i32 45;
    i32 %106 = select i1 %105 ? i32 1 : i32 %100;
    cbr i1 %104(prob = 0.97), ^while.body8, ^indirect3;
  ^indirect3:
    i32 %107 = phi [^entry2, i32 %82] [^while.body8, i32 %101];
    i32 %108 = phi [^entry2, i32 0] [^while.body8, i32 %106];
    i1 %109 = scmp gt i32 %107, i32 47;
    i1 %110 = scmp le i32 %107, i32 57;
    i1 %111 = and i1 %109, i1 %110;
    cbr i1 %111(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %112 = phi [^indirect2, i32 0] [^while.body9, i32 %120];
    i32 %113 = phi [^indirect2, i32 %94] [^while.body9, i32 %114];
    i32 %114 = call () -> i32 @getch();
    i1 %115 = scmp gt i32 %114, i32 47;
    i1 %116 = scmp le i32 %114, i32 57;
    i1 %117 = and i1 %115, i1 %116;
    i32 %118 = mul i32 %112, i32 10;
    i32 %119 = add i32 %118, i32 -48;
    i32 %120 = add i32 %119, i32 %113;
    cbr i1 %117(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %121 = phi [^indirect2, i32 0] [^while.body9, i32 %120];
    i32 %122 = call () -> i32 @getch();
    i1 %123 = scmp lt i32 %122, i32 48;
    i1 %124 = scmp gt i32 %122, i32 57;
    i1 %125 = or i1 %123, i1 %124;
    i32 %126 = neg i32 %121;
    i1 %127 = scmp neq i32 %95, i32 0;
    i32 %128 = select i1 %127 ? i32 %126 : i32 %121;
    cbr i1 %125(prob = 0.97), ^while.body11, ^indirect4;
  ^while.body10:
    i32 %129 = phi [^indirect3, i32 0] [^while.body10, i32 %137];
    i32 %130 = phi [^indirect3, i32 %107] [^while.body10, i32 %131];
    i32 %131 = call () -> i32 @getch();
    i1 %132 = scmp gt i32 %131, i32 47;
    i1 %133 = scmp le i32 %131, i32 57;
    i1 %134 = and i1 %132, i1 %133;
    i32 %135 = mul i32 %129, i32 10;
    i32 %136 = add i32 %135, i32 -48;
    i32 %137 = add i32 %136, i32 %130;
    cbr i1 %134(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %138 = phi [^indirect3, i32 0] [^while.body10, i32 %137];
    i32 %139 = neg i32 %138;
    i1 %140 = scmp neq i32 %108, i32 0;
    i32 %141 = select i1 %140 ? i32 %139 : i32 %138;
    i32 %142 = call (i32) -> i32 @find(i32 %141);
    i32 %143 = call () -> i32 @getch();
    i1 %144 = scmp lt i32 %143, i32 48;
    i1 %145 = scmp gt i32 %143, i32 57;
    i1 %146 = or i1 %144, i1 %145;
    cbr i1 %146(prob = 0.97), ^while.body12, ^indirect5;
  ^while.body11:
    i32 %147 = phi [^b4, i32 %122] [^while.body11, i32 %149];
    i32 %148 = phi [^b4, i32 0] [^while.body11, i32 %154];
    i32 %149 = call () -> i32 @getch();
    i1 %150 = scmp lt i32 %149, i32 48;
    i1 %151 = scmp gt i32 %149, i32 57;
    i1 %152 = or i1 %150, i1 %151;
    i1 %153 = scmp eq i32 %147, i32 45;
    i32 %154 = select i1 %153 ? i32 1 : i32 %148;
    cbr i1 %152(prob = 0.97), ^while.body11, ^indirect4;
  ^indirect4:
    i32 %155 = phi [^b4, i32 %122] [^while.body11, i32 %149];
    i32 %156 = phi [^b4, i32 0] [^while.body11, i32 %154];
    i1 %157 = scmp gt i32 %155, i32 47;
    i1 %158 = scmp le i32 %155, i32 57;
    i1 %159 = and i1 %157, i1 %158;
    cbr i1 %159(prob = 0.97), ^while.body13, ^b6;
  ^while.body12:
    i32 %160 = phi [^b5, i32 %143] [^while.body12, i32 %162];
    i32 %161 = phi [^b5, i32 0] [^while.body12, i32 %167];
    i32 %162 = call () -> i32 @getch();
    i1 %163 = scmp lt i32 %162, i32 48;
    i1 %164 = scmp gt i32 %162, i32 57;
    i1 %165 = or i1 %163, i1 %164;
    i1 %166 = scmp eq i32 %160, i32 45;
    i32 %167 = select i1 %166 ? i32 1 : i32 %161;
    cbr i1 %165(prob = 0.97), ^while.body12, ^indirect5;
  ^indirect5:
    i32 %168 = phi [^b5, i32 %143] [^while.body12, i32 %162];
    i32 %169 = phi [^b5, i32 0] [^while.body12, i32 %167];
    i1 %170 = scmp gt i32 %168, i32 47;
    i1 %171 = scmp le i32 %168, i32 57;
    i1 %172 = and i1 %170, i1 %171;
    cbr i1 %172(prob = 0.97), ^while.body14, ^b7;
  ^b6:
    i32 %173 = phi [^indirect4, i32 0] [^while.body13, i32 %189];
    i32 %174 = call (i32) -> i32 @find(i32 %128);
    i32 %175 = neg i32 %173;
    i1 %176 = scmp neq i32 %156, i32 0;
    i32 %177 = select i1 %176 ? i32 %175 : i32 %173;
    i32 %178 = call (i32) -> i32 @find(i32 %177);
    i1 %179 = scmp eq i32 %174, i32 %178;
    i32 %180 = zext i1 %179 to i32;
    call (i32) -> void @putint(i32 %180);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
  ^while.body13:
    i32 %181 = phi [^indirect4, i32 0] [^while.body13, i32 %189];
    i32 %182 = phi [^indirect4, i32 %155] [^while.body13, i32 %183];
    i32 %183 = call () -> i32 @getch();
    i1 %184 = scmp gt i32 %183, i32 47;
    i1 %185 = scmp le i32 %183, i32 57;
    i1 %186 = and i1 %184, i1 %185;
    i32 %187 = mul i32 %181, i32 10;
    i32 %188 = add i32 %187, i32 -48;
    i32 %189 = add i32 %188, i32 %182;
    cbr i1 %186(prob = 0.97), ^while.body13, ^b6;
  ^b7:
    i32 %190 = phi [^indirect5, i32 0] [^while.body14, i32 %204];
    i32 %191 = neg i32 %190;
    i1 %192 = scmp neq i32 %169, i32 0;
    i32 %193 = select i1 %192 ? i32 %191 : i32 %190;
    i32 %194 = call (i32) -> i32 @find(i32 %193);
    i32* %195 = getelementptr &([100005 * i32]* %60)[i64 0][i32 %142];
    store i32* %195 with i32 %194;
    ubr ^b8;
  ^while.body14:
    i32 %196 = phi [^indirect5, i32 0] [^while.body14, i32 %204];
    i32 %197 = phi [^indirect5, i32 %168] [^while.body14, i32 %198];
    i32 %198 = call () -> i32 @getch();
    i1 %199 = scmp gt i32 %198, i32 47;
    i1 %200 = scmp le i32 %198, i32 57;
    i1 %201 = and i1 %199, i1 %200;
    i32 %202 = mul i32 %196, i32 10;
    i32 %203 = add i32 %202, i32 -48;
    i32 %204 = add i32 %203, i32 %197;
    cbr i1 %201(prob = 0.97), ^while.body14, ^b7;
  ^b8:
    i32 %205 = add i32 %66, i32 -1;
    ubr ^while.header;
}
