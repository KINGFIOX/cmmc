internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
^entry:
    i32* %0 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %x];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %x;
    cbr i1 %2(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    ubr ^b;
^b:
    i32 %4 = phi [^entry, i32 %x] [^if.else, i32 %3];
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    i32 %7 = select i1 %6 ? i32 1 : i32 %1;
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp le i32 %10, i32 57;
    ubr ^b3;
^b3:
    i1 %13 = phi [^while.header1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %14 = mul i32 %9, i32 10;
    i32 %15 = add i32 %10, i32 -48;
    i32 %16 = add i32 %15, i32 %14;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %19 = neg i32 %9;
    ubr ^b5;
^b5:
    i32 %20 = phi [^b4, i32 %9] [^if.then, i32 %19];
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %22 = phi [^b5, i32 0] [^while.body2, i32 %28];
    i32 %23 = phi [^b5, i32 %21] [^while.body2, i32 %29];
    i1 %24 = scmp lt i32 %23, i32 48;
    cbr i1 %24(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %25 = scmp gt i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %26 = phi [^while.header2, i1 true] [^b6, i1 %25];
    cbr i1 %26(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %27 = scmp eq i32 %23, i32 45;
    i32 %28 = select i1 %27 ? i32 1 : i32 %22;
    i32 %29 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %30 = phi [^b7, i32 0] [^while.body3, i32 %37];
    i32 %31 = phi [^b7, i32 %23] [^while.body3, i32 %38];
    i1 %32 = scmp gt i32 %31, i32 47;
    cbr i1 %32(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %33 = scmp le i32 %31, i32 57;
    ubr ^b9;
^b9:
    i1 %34 = phi [^while.header3, i1 false] [^b8, i1 %33];
    cbr i1 %34(prob = 0.97), ^while.body3, ^b10;
^while.body3:
    i32 %35 = mul i32 %30, i32 10;
    i32 %36 = add i32 %31, i32 -48;
    i32 %37 = add i32 %36, i32 %35;
    i32 %38 = call () -> i32 @getch();
    ubr ^while.header3;
^b10:
    i1 %39 = scmp neq i32 %22, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b11;
^if.then1:
    i32 %40 = neg i32 %30;
    ubr ^b11;
^b11:
    i32 %41 = phi [^b10, i32 %30] [^if.then1, i32 %40];
    i1 %42 = scmp gt i32 %20, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body4, ^while.header4;
^while.body4:
    i32 %43 = phi [^b11, i32 1] [^while.body4, i32 %45];
    i32* %44 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %43];
    store i32* %44 with i32 %43;
    i32 %45 = add i32 %43, i32 1;
    i1 %46 = scmp le i32 %45, i32 %20;
    cbr i1 %46(prob = 0.97), ^while.body4, ^while.header4;
^while.header4:
    i32 %47 = phi [^b11, i32 %41] [^while.body4, i32 %41] [^b40, i32 %145];
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %49 = call () -> i32 @getch();
    i1 %50 = scmp neq i32 %49, i32 81;
    cbr i1 %50(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %51 = scmp neq i32 %49, i32 85;
    ubr ^b14;
^b14:
    i1 %52 = phi [^while.body5, i1 false] [^b13, i1 %51];
    cbr i1 %52(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %53 = scmp eq i32 %49, i32 81;
    cbr i1 %53(prob = 0.5), ^entry1, ^entry2;
^entry1:
    i32 %54 = call () -> i32 @getch();
    ubr ^while.header5;
^entry2:
    i32 %55 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header5:
    i32 %56 = phi [^entry1, i32 0] [^while.body6, i32 %67];
    i32 %57 = phi [^entry1, i32 %54] [^while.body6, i32 %68];
    i1 %58 = scmp lt i32 %57, i32 48;
    cbr i1 %58(prob = 0.5), ^b17, ^b16;
^while.header6:
    i32 %59 = phi [^entry2, i32 0] [^while.body7, i32 %70];
    i32 %60 = phi [^entry2, i32 %55] [^while.body7, i32 %71];
    i1 %61 = scmp lt i32 %60, i32 48;
    cbr i1 %61(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %62 = scmp gt i32 %57, i32 57;
    ubr ^b17;
^b17:
    i1 %63 = phi [^while.header5, i1 true] [^b16, i1 %62];
    cbr i1 %63(prob = 0.97), ^while.body6, ^while.header7;
^b18:
    i1 %64 = scmp gt i32 %60, i32 57;
    ubr ^b19;
^b19:
    i1 %65 = phi [^while.header6, i1 true] [^b18, i1 %64];
    cbr i1 %65(prob = 0.97), ^while.body7, ^while.header8;
^while.body6:
    i1 %66 = scmp eq i32 %57, i32 45;
    i32 %67 = select i1 %66 ? i32 1 : i32 %56;
    i32 %68 = call () -> i32 @getch();
    ubr ^while.header5;
^while.body7:
    i1 %69 = scmp eq i32 %60, i32 45;
    i32 %70 = select i1 %69 ? i32 1 : i32 %59;
    i32 %71 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header7:
    i32 %72 = phi [^b17, i32 0] [^while.body8, i32 %84];
    i32 %73 = phi [^b17, i32 %57] [^while.body8, i32 %85];
    i1 %74 = scmp gt i32 %73, i32 47;
    cbr i1 %74(prob = 0.5), ^b20, ^b22;
^while.header8:
    i32 %75 = phi [^b19, i32 0] [^while.body9, i32 %88];
    i32 %76 = phi [^b19, i32 %60] [^while.body9, i32 %89];
    i1 %77 = scmp gt i32 %76, i32 47;
    cbr i1 %77(prob = 0.5), ^b21, ^b23;
^b20:
    i1 %78 = scmp le i32 %73, i32 57;
    ubr ^b22;
^b21:
    i1 %79 = scmp le i32 %76, i32 57;
    ubr ^b23;
^b22:
    i1 %80 = phi [^while.header7, i1 false] [^b20, i1 %78];
    cbr i1 %80(prob = 0.97), ^while.body8, ^b24;
^b23:
    i1 %81 = phi [^while.header8, i1 false] [^b21, i1 %79];
    cbr i1 %81(prob = 0.97), ^while.body9, ^b25;
^while.body8:
    i32 %82 = mul i32 %72, i32 10;
    i32 %83 = add i32 %73, i32 -48;
    i32 %84 = add i32 %83, i32 %82;
    i32 %85 = call () -> i32 @getch();
    ubr ^while.header7;
^while.body9:
    i32 %86 = mul i32 %75, i32 10;
    i32 %87 = add i32 %76, i32 -48;
    i32 %88 = add i32 %87, i32 %86;
    i32 %89 = call () -> i32 @getch();
    ubr ^while.header8;
^b24:
    i1 %90 = scmp neq i32 %56, i32 0;
    cbr i1 %90(prob = 0.5), ^if.then2, ^b26;
^b25:
    i1 %91 = scmp neq i32 %59, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then3, ^b27;
^if.then2:
    i32 %92 = neg i32 %72;
    ubr ^b26;
^b26:
    i32 %93 = phi [^b24, i32 %72] [^if.then2, i32 %92];
    i32 %94 = call () -> i32 @getch();
    ubr ^while.header9;
^if.then3:
    i32 %95 = neg i32 %75;
    ubr ^b27;
^b27:
    i32 %96 = phi [^b25, i32 %75] [^if.then3, i32 %95];
    i32 %97 = call (i32) -> i32 @find(i32 %96);
    i32 %98 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header9:
    i32 %99 = phi [^b26, i32 0] [^while.body10, i32 %110];
    i32 %100 = phi [^b26, i32 %94] [^while.body10, i32 %111];
    i1 %101 = scmp lt i32 %100, i32 48;
    cbr i1 %101(prob = 0.5), ^b29, ^b28;
^while.header10:
    i32 %102 = phi [^b27, i32 0] [^while.body11, i32 %113];
    i32 %103 = phi [^b27, i32 %98] [^while.body11, i32 %114];
    i1 %104 = scmp lt i32 %103, i32 48;
    cbr i1 %104(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %105 = scmp gt i32 %100, i32 57;
    ubr ^b29;
^b29:
    i1 %106 = phi [^while.header9, i1 true] [^b28, i1 %105];
    cbr i1 %106(prob = 0.97), ^while.body10, ^while.header11;
^b30:
    i1 %107 = scmp gt i32 %103, i32 57;
    ubr ^b31;
^b31:
    i1 %108 = phi [^while.header10, i1 true] [^b30, i1 %107];
    cbr i1 %108(prob = 0.97), ^while.body11, ^while.header12;
^while.body10:
    i1 %109 = scmp eq i32 %100, i32 45;
    i32 %110 = select i1 %109 ? i32 1 : i32 %99;
    i32 %111 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body11:
    i1 %112 = scmp eq i32 %103, i32 45;
    i32 %113 = select i1 %112 ? i32 1 : i32 %102;
    i32 %114 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header11:
    i32 %115 = phi [^b29, i32 0] [^while.body12, i32 %127];
    i32 %116 = phi [^b29, i32 %100] [^while.body12, i32 %128];
    i1 %117 = scmp gt i32 %116, i32 47;
    cbr i1 %117(prob = 0.5), ^b32, ^b34;
^while.header12:
    i32 %118 = phi [^b31, i32 0] [^while.body13, i32 %131];
    i32 %119 = phi [^b31, i32 %103] [^while.body13, i32 %132];
    i1 %120 = scmp gt i32 %119, i32 47;
    cbr i1 %120(prob = 0.5), ^b33, ^b35;
^b32:
    i1 %121 = scmp le i32 %116, i32 57;
    ubr ^b34;
^b33:
    i1 %122 = scmp le i32 %119, i32 57;
    ubr ^b35;
^b34:
    i1 %123 = phi [^while.header11, i1 false] [^b32, i1 %121];
    cbr i1 %123(prob = 0.97), ^while.body12, ^b36;
^b35:
    i1 %124 = phi [^while.header12, i1 false] [^b33, i1 %122];
    cbr i1 %124(prob = 0.97), ^while.body13, ^b37;
^while.body12:
    i32 %125 = mul i32 %115, i32 10;
    i32 %126 = add i32 %116, i32 -48;
    i32 %127 = add i32 %126, i32 %125;
    i32 %128 = call () -> i32 @getch();
    ubr ^while.header11;
^while.body13:
    i32 %129 = mul i32 %118, i32 10;
    i32 %130 = add i32 %119, i32 -48;
    i32 %131 = add i32 %130, i32 %129;
    i32 %132 = call () -> i32 @getch();
    ubr ^while.header12;
^b36:
    i1 %133 = scmp neq i32 %99, i32 0;
    cbr i1 %133(prob = 0.5), ^if.then4, ^b38;
^b37:
    i1 %134 = scmp neq i32 %102, i32 0;
    cbr i1 %134(prob = 0.5), ^if.then5, ^b39;
^if.then4:
    i32 %135 = neg i32 %115;
    ubr ^b38;
^b38:
    i32 %136 = phi [^b36, i32 %115] [^if.then4, i32 %135];
    i32 %137 = call (i32) -> i32 @find(i32 %93);
    i32 %138 = call (i32) -> i32 @find(i32 %136);
    i1 %139 = scmp eq i32 %137, i32 %138;
    i32 %140 = zext i1 %139 to i32;
    call (i32) -> void @putint(i32 %140);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^if.then5:
    i32 %141 = neg i32 %118;
    ubr ^b39;
^b39:
    i32 %142 = phi [^b37, i32 %118] [^if.then5, i32 %141];
    i32 %143 = call (i32) -> i32 @find(i32 %142);
    i32* %144 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %97];
    store i32* %144 with i32 %143;
    ubr ^b40;
^b40:
    i32 %145 = add i32 %47, i32 -1;
    ubr ^while.header4;
}
