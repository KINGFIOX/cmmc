internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x, i32* %0, i32* %1) -> i32 {
^entry:
    i32* %2 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 %x;
    cbr i1 %4(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %5 = call (i32, i32*, i32*) -> i32 @find(i32 %3, i32* %0, i32* %1);
    store i32* %2 with i32 %5;
    ubr ^b;
^b:
    i32 %6 = phi [^entry, i32 %x] [^if.else, i32 %5];
    ret i32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %5 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %6 = scmp eq i32 %4, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^while.guard:
    i32 %7 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %8 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %9 = scmp gt i32 %7, i32 47;
    i1 %10 = scmp lt i32 %7, i32 58;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.48), ^while.body1, ^b1;
^if.then:
    ubr ^b;
^b:
    i32 %12 = phi [^while.body, i32 %5] [^if.then, i32 1];
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b4, ^b3;
^while.body1:
    i32 %15 = phi [^while.guard, i32 %7] [^b5, i32 %20];
    i32 %16 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i32 %17 = add i32 %15, i32 -48;
    i32 %18 = mul i32 %16, i32 10;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = call () -> i32 @getch();
    i1 %21 = scmp gt i32 %20, i32 47;
    cbr i1 %21(prob = 0.5), ^b2, ^b5;
^b1:
    i32 %22 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i1 %23 = scmp neq i32 %8, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b6;
^b2:
    i1 %24 = scmp le i32 %20, i32 57;
    ubr ^b5;
^b3:
    i1 %25 = scmp gt i32 %13, i32 57;
    ubr ^b4;
^if.then1:
    i32 %26 = neg i32 %22;
    ubr ^b6;
^b4:
    i1 %27 = phi [^b, i1 true] [^b3, i1 %25];
    cbr i1 %27(prob = 0.97), ^while.body, ^while.guard;
^b5:
    i1 %28 = phi [^while.body1, i1 false] [^b2, i1 %24];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
^b6:
    i32 %29 = phi [^b1, i32 %22] [^if.then1, i32 %26];
    store i32* %n with i32 %29;
    i32 %30 = call () -> i32 @getch();
    i1 %31 = scmp lt i32 %30, i32 48;
    i1 %32 = scmp gt i32 %30, i32 57;
    i1 %33 = or i1 %31, i1 %32;
    cbr i1 %33(prob = 0.98), ^while.body2, ^while.guard1;
^while.body2:
    i32 %34 = phi [^b6, i32 %30] [^b11, i32 %43];
    i32 %35 = phi [^b6, i32 0] [^b11, i32 %42];
    i1 %36 = scmp eq i32 %34, i32 45;
    cbr i1 %36(prob = 0.5), ^if.then2, ^b7;
^while.guard1:
    i32 %37 = phi [^b6, i32 %30] [^b11, i32 %43];
    i32 %38 = phi [^b6, i32 0] [^b11, i32 %42];
    i1 %39 = scmp gt i32 %37, i32 47;
    i1 %40 = scmp lt i32 %37, i32 58;
    i1 %41 = and i1 %39, i1 %40;
    cbr i1 %41(prob = 0.48), ^while.body3, ^b8;
^if.then2:
    ubr ^b7;
^b7:
    i32 %42 = phi [^while.body2, i32 %35] [^if.then2, i32 1];
    i32 %43 = call () -> i32 @getch();
    i1 %44 = scmp lt i32 %43, i32 48;
    cbr i1 %44(prob = 0.5), ^b11, ^b10;
^while.body3:
    i32 %45 = phi [^while.guard1, i32 %37] [^b12, i32 %50];
    i32 %46 = phi [^while.guard1, i32 0] [^b12, i32 %49];
    i32 %47 = add i32 %45, i32 -48;
    i32 %48 = mul i32 %46, i32 10;
    i32 %49 = add i32 %47, i32 %48;
    i32 %50 = call () -> i32 @getch();
    i1 %51 = scmp gt i32 %50, i32 47;
    cbr i1 %51(prob = 0.5), ^b9, ^b12;
^b8:
    i32 %52 = phi [^while.guard1, i32 0] [^b12, i32 %49];
    i1 %53 = scmp neq i32 %38, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then3, ^b13;
^b9:
    i1 %54 = scmp le i32 %50, i32 57;
    ubr ^b12;
^b10:
    i1 %55 = scmp gt i32 %43, i32 57;
    ubr ^b11;
^if.then3:
    i32 %56 = neg i32 %52;
    ubr ^b13;
^b11:
    i1 %57 = phi [^b7, i1 true] [^b10, i1 %55];
    cbr i1 %57(prob = 0.97), ^while.body2, ^while.guard1;
^b12:
    i1 %58 = phi [^while.body3, i1 false] [^b9, i1 %54];
    cbr i1 %58(prob = 0.97), ^while.body3, ^b8;
^b13:
    i32 %59 = phi [^b8, i32 %52] [^if.then3, i32 %56];
    store i32* %m with i32 %59;
    i1 %60 = scmp gt i32 %29, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body4, ^entry1;
^while.body4:
    i32 %61 = phi [^b13, i32 1] [^while.body4, i32 %63];
    i32* %62 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %61];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %61, i32 1;
    i1 %64 = scmp le i32 %63, i32 %29;
    cbr i1 %64(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    i1 %65 = scmp neq i32 %59, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body5, ^b14;
^while.body5:
    i32 %66 = call () -> i32 @getch();
    i1 %67 = scmp neq i32 %66, i32 81;
    cbr i1 %67(prob = 0.5), ^b15, ^b16;
^b14:
    ret i32 0;
^b15:
    i1 %68 = scmp neq i32 %66, i32 85;
    ubr ^b16;
^b16:
    i1 %69 = phi [^while.body5, i1 false] [^b15, i1 %68];
    cbr i1 %69(prob = 0.97), ^while.body6, ^b17;
^while.body6:
    i32 %70 = call () -> i32 @getch();
    i1 %71 = scmp neq i32 %70, i32 81;
    cbr i1 %71(prob = 0.5), ^b18, ^b19;
^b17:
    i32 %72 = phi [^b16, i32 %66] [^b19, i32 %70];
    i1 %73 = scmp eq i32 %72, i32 81;
    cbr i1 %73(prob = 0.5), ^entry2, ^entry3;
^b18:
    i1 %74 = scmp neq i32 %70, i32 85;
    ubr ^b19;
^b19:
    i1 %75 = phi [^while.body6, i1 false] [^b18, i1 %74];
    cbr i1 %75(prob = 0.97), ^while.body6, ^b17;
^entry2:
    i32 %76 = call () -> i32 @getch();
    i1 %77 = scmp lt i32 %76, i32 48;
    i1 %78 = scmp gt i32 %76, i32 57;
    i1 %79 = or i1 %77, i1 %78;
    cbr i1 %79(prob = 0.98), ^while.body7, ^while.guard2;
^entry3:
    i32 %80 = call () -> i32 @getch();
    i1 %81 = scmp lt i32 %80, i32 48;
    i1 %82 = scmp gt i32 %80, i32 57;
    i1 %83 = or i1 %81, i1 %82;
    cbr i1 %83(prob = 0.98), ^while.body8, ^while.guard3;
^while.body7:
    i32 %84 = phi [^entry2, i32 %76] [^b27, i32 %101];
    i32 %85 = phi [^entry2, i32 0] [^b27, i32 %100];
    i1 %86 = scmp eq i32 %84, i32 45;
    cbr i1 %86(prob = 0.5), ^if.then4, ^b20;
^while.guard2:
    i32 %87 = phi [^entry2, i32 %76] [^b27, i32 %101];
    i32 %88 = phi [^entry2, i32 0] [^b27, i32 %100];
    i1 %89 = scmp gt i32 %87, i32 47;
    i1 %90 = scmp lt i32 %87, i32 58;
    i1 %91 = and i1 %89, i1 %90;
    cbr i1 %91(prob = 0.48), ^while.body9, ^b21;
^while.body8:
    i32 %92 = phi [^entry3, i32 %80] [^b30, i32 %113];
    i32 %93 = phi [^entry3, i32 0] [^b30, i32 %112];
    i1 %94 = scmp eq i32 %92, i32 45;
    cbr i1 %94(prob = 0.5), ^if.then5, ^b22;
^while.guard3:
    i32 %95 = phi [^entry3, i32 %80] [^b30, i32 %113];
    i32 %96 = phi [^entry3, i32 0] [^b30, i32 %112];
    i1 %97 = scmp gt i32 %95, i32 47;
    i1 %98 = scmp lt i32 %95, i32 58;
    i1 %99 = and i1 %97, i1 %98;
    cbr i1 %99(prob = 0.48), ^while.body10, ^b23;
^if.then4:
    ubr ^b20;
^if.then5:
    ubr ^b22;
^b20:
    i32 %100 = phi [^while.body7, i32 %85] [^if.then4, i32 1];
    i32 %101 = call () -> i32 @getch();
    i1 %102 = scmp lt i32 %101, i32 48;
    cbr i1 %102(prob = 0.5), ^b27, ^b25;
^while.body9:
    i32 %103 = phi [^while.guard2, i32 %87] [^b29, i32 %108];
    i32 %104 = phi [^while.guard2, i32 0] [^b29, i32 %107];
    i32 %105 = add i32 %103, i32 -48;
    i32 %106 = mul i32 %104, i32 10;
    i32 %107 = add i32 %105, i32 %106;
    i32 %108 = call () -> i32 @getch();
    i1 %109 = scmp gt i32 %108, i32 47;
    cbr i1 %109(prob = 0.5), ^b24, ^b29;
^b21:
    i32 %110 = phi [^while.guard2, i32 0] [^b29, i32 %107];
    i1 %111 = scmp neq i32 %88, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then6, ^b31;
^b22:
    i32 %112 = phi [^while.body8, i32 %93] [^if.then5, i32 1];
    i32 %113 = call () -> i32 @getch();
    i1 %114 = scmp lt i32 %113, i32 48;
    cbr i1 %114(prob = 0.5), ^b30, ^b28;
^while.body10:
    i32 %115 = phi [^while.guard3, i32 %95] [^b32, i32 %120];
    i32 %116 = phi [^while.guard3, i32 0] [^b32, i32 %119];
    i32 %117 = add i32 %115, i32 -48;
    i32 %118 = mul i32 %116, i32 10;
    i32 %119 = add i32 %117, i32 %118;
    i32 %120 = call () -> i32 @getch();
    i1 %121 = scmp gt i32 %120, i32 47;
    cbr i1 %121(prob = 0.5), ^b26, ^b32;
^b23:
    i32 %122 = phi [^while.guard3, i32 0] [^b32, i32 %119];
    i1 %123 = scmp neq i32 %96, i32 0;
    cbr i1 %123(prob = 0.5), ^if.then7, ^b33;
^b24:
    i1 %124 = scmp le i32 %108, i32 57;
    ubr ^b29;
^b25:
    i1 %125 = scmp gt i32 %101, i32 57;
    ubr ^b27;
^if.then6:
    i32 %126 = neg i32 %110;
    ubr ^b31;
^b26:
    i1 %127 = scmp le i32 %120, i32 57;
    ubr ^b32;
^b27:
    i1 %128 = phi [^b20, i1 true] [^b25, i1 %125];
    cbr i1 %128(prob = 0.97), ^while.body7, ^while.guard2;
^b28:
    i1 %129 = scmp gt i32 %113, i32 57;
    ubr ^b30;
^if.then7:
    i32 %130 = neg i32 %122;
    ubr ^b33;
^b29:
    i1 %131 = phi [^while.body9, i1 false] [^b24, i1 %124];
    cbr i1 %131(prob = 0.97), ^while.body9, ^b21;
^b30:
    i1 %132 = phi [^b22, i1 true] [^b28, i1 %129];
    cbr i1 %132(prob = 0.97), ^while.body8, ^while.guard3;
^b31:
    i32 %133 = phi [^b21, i32 %110] [^if.then6, i32 %126];
    i32 %134 = call () -> i32 @getch();
    i1 %135 = scmp lt i32 %134, i32 48;
    i1 %136 = scmp gt i32 %134, i32 57;
    i1 %137 = or i1 %135, i1 %136;
    cbr i1 %137(prob = 0.98), ^while.body11, ^while.guard4;
^b32:
    i1 %138 = phi [^while.body10, i1 false] [^b26, i1 %127];
    cbr i1 %138(prob = 0.97), ^while.body10, ^b23;
^b33:
    i32 %139 = phi [^b23, i32 %122] [^if.then7, i32 %130];
    i32 %140 = call (i32, i32*, i32*) -> i32 @find(i32 %139, i32* %n, i32* %m);
    i32 %141 = call () -> i32 @getch();
    i1 %142 = scmp lt i32 %141, i32 48;
    i1 %143 = scmp gt i32 %141, i32 57;
    i1 %144 = or i1 %142, i1 %143;
    cbr i1 %144(prob = 0.98), ^while.body12, ^while.guard5;
^while.body11:
    i32 %145 = phi [^b31, i32 %134] [^b41, i32 %162];
    i32 %146 = phi [^b31, i32 0] [^b41, i32 %161];
    i1 %147 = scmp eq i32 %145, i32 45;
    cbr i1 %147(prob = 0.5), ^if.then8, ^b34;
^while.guard4:
    i32 %148 = phi [^b31, i32 %134] [^b41, i32 %162];
    i32 %149 = phi [^b31, i32 0] [^b41, i32 %161];
    i1 %150 = scmp gt i32 %148, i32 47;
    i1 %151 = scmp lt i32 %148, i32 58;
    i1 %152 = and i1 %150, i1 %151;
    cbr i1 %152(prob = 0.48), ^while.body13, ^b35;
^while.body12:
    i32 %153 = phi [^b33, i32 %141] [^b44, i32 %174];
    i32 %154 = phi [^b33, i32 0] [^b44, i32 %173];
    i1 %155 = scmp eq i32 %153, i32 45;
    cbr i1 %155(prob = 0.5), ^if.then9, ^b36;
^while.guard5:
    i32 %156 = phi [^b33, i32 %141] [^b44, i32 %174];
    i32 %157 = phi [^b33, i32 0] [^b44, i32 %173];
    i1 %158 = scmp gt i32 %156, i32 47;
    i1 %159 = scmp lt i32 %156, i32 58;
    i1 %160 = and i1 %158, i1 %159;
    cbr i1 %160(prob = 0.48), ^while.body14, ^b37;
^if.then8:
    ubr ^b34;
^if.then9:
    ubr ^b36;
^b34:
    i32 %161 = phi [^while.body11, i32 %146] [^if.then8, i32 1];
    i32 %162 = call () -> i32 @getch();
    i1 %163 = scmp lt i32 %162, i32 48;
    cbr i1 %163(prob = 0.5), ^b41, ^b39;
^while.body13:
    i32 %164 = phi [^while.guard4, i32 %148] [^b43, i32 %169];
    i32 %165 = phi [^while.guard4, i32 0] [^b43, i32 %168];
    i32 %166 = add i32 %164, i32 -48;
    i32 %167 = mul i32 %165, i32 10;
    i32 %168 = add i32 %166, i32 %167;
    i32 %169 = call () -> i32 @getch();
    i1 %170 = scmp gt i32 %169, i32 47;
    cbr i1 %170(prob = 0.5), ^b38, ^b43;
^b35:
    i32 %171 = phi [^while.guard4, i32 0] [^b43, i32 %168];
    i1 %172 = scmp neq i32 %149, i32 0;
    cbr i1 %172(prob = 0.5), ^if.then10, ^b46;
^b36:
    i32 %173 = phi [^while.body12, i32 %154] [^if.then9, i32 1];
    i32 %174 = call () -> i32 @getch();
    i1 %175 = scmp lt i32 %174, i32 48;
    cbr i1 %175(prob = 0.5), ^b44, ^b42;
^while.body14:
    i32 %176 = phi [^while.guard5, i32 %156] [^b47, i32 %181];
    i32 %177 = phi [^while.guard5, i32 0] [^b47, i32 %180];
    i32 %178 = add i32 %176, i32 -48;
    i32 %179 = mul i32 %177, i32 10;
    i32 %180 = add i32 %178, i32 %179;
    i32 %181 = call () -> i32 @getch();
    i1 %182 = scmp gt i32 %181, i32 47;
    cbr i1 %182(prob = 0.5), ^b40, ^b47;
^b37:
    i32 %183 = phi [^while.guard5, i32 0] [^b47, i32 %180];
    i1 %184 = scmp neq i32 %157, i32 0;
    cbr i1 %184(prob = 0.5), ^if.then11, ^b45;
^b38:
    i1 %185 = scmp le i32 %169, i32 57;
    ubr ^b43;
^b39:
    i1 %186 = scmp gt i32 %162, i32 57;
    ubr ^b41;
^if.then10:
    i32 %187 = neg i32 %171;
    ubr ^b46;
^b40:
    i1 %188 = scmp le i32 %181, i32 57;
    ubr ^b47;
^b41:
    i1 %189 = phi [^b34, i1 true] [^b39, i1 %186];
    cbr i1 %189(prob = 0.97), ^while.body11, ^while.guard4;
^b42:
    i1 %190 = scmp gt i32 %174, i32 57;
    ubr ^b44;
^if.then11:
    i32 %191 = neg i32 %183;
    ubr ^b45;
^b43:
    i1 %192 = phi [^while.body13, i1 false] [^b38, i1 %185];
    cbr i1 %192(prob = 0.97), ^while.body13, ^b35;
^b44:
    i1 %193 = phi [^b36, i1 true] [^b42, i1 %190];
    cbr i1 %193(prob = 0.97), ^while.body12, ^while.guard5;
^b45:
    i32 %194 = phi [^b37, i32 %183] [^if.then11, i32 %191];
    i32 %195 = call (i32, i32*, i32*) -> i32 @find(i32 %194, i32* %n, i32* %m);
    i32 %196 = load i32* %m;
    i32* %197 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %140];
    store i32* %197 with i32 %195;
    ubr ^b50;
^b46:
    i32 %198 = phi [^b35, i32 %171] [^if.then10, i32 %187];
    i32 %199 = call (i32, i32*, i32*) -> i32 @find(i32 %133, i32* %n, i32* %m);
    i32 %200 = call (i32, i32*, i32*) -> i32 @find(i32 %198, i32* %n, i32* %m);
    i32 %201 = load i32* %m;
    i1 %202 = scmp eq i32 %199, i32 %200;
    cbr i1 %202(prob = 0.5), ^b48, ^b49;
^b47:
    i1 %203 = phi [^while.body14, i1 false] [^b40, i1 %188];
    cbr i1 %203(prob = 0.97), ^while.body14, ^b37;
^b48:
    i32 %204 = phi [^b46, i32 1] [^b49, i32 0];
    call (i32) -> void @putint(i32 %204);
    call (i32) -> void @putch(i32 10);
    ubr ^b50;
^b49:
    ubr ^b48;
^b50:
    i32 %205 = phi [^b45, i32 %196] [^b48, i32 %201];
    i32 %206 = add i32 %205, i32 -1;
    store i32* %m with i32 %206;
    i1 %207 = scmp neq i32 %206, i32 0;
    cbr i1 %207(prob = 0.97), ^while.body5, ^b14;
}
