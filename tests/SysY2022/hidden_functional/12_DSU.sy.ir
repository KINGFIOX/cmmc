internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
^entry:
    i32* %0 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %x];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %x;
    cbr i1 %2(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %3 = call (i32) -> i32 @find(i32 %1);
    store i32* %0 with i32 %3;
    ubr ^b;
^b:
    i32 %4 = phi [^entry, i32 %x] [^if.else, i32 %3];
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^b, i32 0] [^b2, i32 %5];
    i32 %3 = phi [^entry, i32 %0] [^b, i32 %0] [^b2, i32 %6];
    i1 %4 = scmp eq i32 %3, i32 45;
    i32 %5 = select i1 %4 ? i32 1 : i32 %2;
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    cbr i1 %7(prob = 0.5), ^b2, ^b1;
^b:
    i1 %8 = scmp gt i32 %0, i32 57;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.guard;
^b1:
    i1 %9 = scmp gt i32 %6, i32 57;
    ubr ^b2;
^b2:
    i1 %10 = phi [^while.body, i1 true] [^b1, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.guard;
^while.guard:
    i32 %11 = phi [^b, i32 0] [^b2, i32 %5];
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %6];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %14 = scmp lt i32 %12, i32 58;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b4;
^b4:
    i32 %15 = phi [^while.guard, i32 0] [^b3, i32 0] [^b7, i32 %22];
    i1 %16 = scmp neq i32 %11, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %17 = neg i32 %15;
    ubr ^b5;
^while.body1:
    i32 %18 = phi [^b3, i32 %12] [^b7, i32 %23];
    i32 %19 = phi [^b3, i32 0] [^b7, i32 %22];
    i32 %20 = mul i32 %19, i32 10;
    i32 %21 = add i32 %18, i32 -48;
    i32 %22 = add i32 %21, i32 %20;
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %23, i32 47;
    cbr i1 %24(prob = 0.5), ^b6, ^b7;
^b5:
    i32 %25 = phi [^b4, i32 %15] [^if.then, i32 %17];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp lt i32 %26, i32 48;
    cbr i1 %27(prob = 0.5), ^while.body2, ^b8;
^b6:
    i1 %28 = scmp le i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %29 = phi [^while.body1, i1 false] [^b6, i1 %28];
    cbr i1 %29(prob = 0.97), ^while.body1, ^b4;
^while.body2:
    i32 %30 = phi [^b5, i32 0] [^b8, i32 0] [^b10, i32 %33];
    i32 %31 = phi [^b5, i32 %26] [^b8, i32 %26] [^b10, i32 %34];
    i1 %32 = scmp eq i32 %31, i32 45;
    i32 %33 = select i1 %32 ? i32 1 : i32 %30;
    i32 %34 = call () -> i32 @getch();
    i1 %35 = scmp lt i32 %34, i32 48;
    cbr i1 %35(prob = 0.5), ^b10, ^b9;
^b8:
    i1 %36 = scmp gt i32 %26, i32 57;
    cbr i1 %36(prob = 0.97), ^while.body2, ^while.guard1;
^b9:
    i1 %37 = scmp gt i32 %34, i32 57;
    ubr ^b10;
^b10:
    i1 %38 = phi [^while.body2, i1 true] [^b9, i1 %37];
    cbr i1 %38(prob = 0.97), ^while.body2, ^while.guard1;
^while.guard1:
    i32 %39 = phi [^b8, i32 0] [^b10, i32 %33];
    i32 %40 = phi [^b8, i32 %26] [^b10, i32 %34];
    i1 %41 = scmp gt i32 %40, i32 47;
    cbr i1 %41(prob = 0.5), ^b11, ^b12;
^b11:
    i1 %42 = scmp lt i32 %40, i32 58;
    cbr i1 %42(prob = 0.97), ^while.body3, ^b12;
^b12:
    i32 %43 = phi [^while.guard1, i32 0] [^b11, i32 0] [^b15, i32 %50];
    i1 %44 = scmp neq i32 %39, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b13;
^if.then1:
    i32 %45 = neg i32 %43;
    ubr ^b13;
^while.body3:
    i32 %46 = phi [^b11, i32 %40] [^b15, i32 %51];
    i32 %47 = phi [^b11, i32 0] [^b15, i32 %50];
    i32 %48 = mul i32 %47, i32 10;
    i32 %49 = add i32 %46, i32 -48;
    i32 %50 = add i32 %49, i32 %48;
    i32 %51 = call () -> i32 @getch();
    i1 %52 = scmp gt i32 %51, i32 47;
    cbr i1 %52(prob = 0.5), ^b14, ^b15;
^b13:
    i32 %53 = phi [^b12, i32 %43] [^if.then1, i32 %45];
    i1 %54 = scmp gt i32 %25, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body4, ^entry1;
^b14:
    i1 %55 = scmp le i32 %51, i32 57;
    ubr ^b15;
^b15:
    i1 %56 = phi [^while.body3, i1 false] [^b14, i1 %55];
    cbr i1 %56(prob = 0.97), ^while.body3, ^b12;
^while.body4:
    i32 %57 = phi [^b13, i32 1] [^while.body4, i32 %59];
    i32* %58 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %57];
    store i32* %58 with i32 %57;
    i32 %59 = add i32 %57, i32 1;
    i1 %60 = scmp le i32 %59, i32 %25;
    cbr i1 %60(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    i1 %61 = scmp neq i32 %53, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b16;
^while.body5:
    i32 %62 = phi [^entry1, i32 %53] [^b54, i32 %192];
    i32 %63 = call () -> i32 @getch();
    i1 %64 = scmp neq i32 %63, i32 81;
    cbr i1 %64(prob = 0.5), ^b17, ^b18;
^b16:
    ret i32 0;
^b17:
    i1 %65 = scmp neq i32 %63, i32 85;
    ubr ^b18;
^b18:
    i1 %66 = phi [^while.body5, i1 false] [^b17, i1 %65];
    cbr i1 %66(prob = 0.97), ^while.body6, ^b19;
^while.body6:
    i32 %67 = call () -> i32 @getch();
    i1 %68 = scmp neq i32 %67, i32 81;
    cbr i1 %68(prob = 0.5), ^b20, ^b21;
^b19:
    i32 %69 = phi [^b18, i32 %63] [^b21, i32 %67];
    i1 %70 = scmp eq i32 %69, i32 81;
    cbr i1 %70(prob = 0.5), ^entry2, ^entry3;
^b20:
    i1 %71 = scmp neq i32 %67, i32 85;
    ubr ^b21;
^b21:
    i1 %72 = phi [^while.body6, i1 false] [^b20, i1 %71];
    cbr i1 %72(prob = 0.97), ^while.body6, ^b19;
^entry2:
    i32 %73 = call () -> i32 @getch();
    i1 %74 = scmp lt i32 %73, i32 48;
    cbr i1 %74(prob = 0.5), ^while.body7, ^b22;
^entry3:
    i32 %75 = call () -> i32 @getch();
    i1 %76 = scmp lt i32 %75, i32 48;
    cbr i1 %76(prob = 0.5), ^while.body8, ^b23;
^while.body7:
    i32 %77 = phi [^entry2, i32 0] [^b22, i32 0] [^b25, i32 %80];
    i32 %78 = phi [^entry2, i32 %73] [^b22, i32 %73] [^b25, i32 %81];
    i1 %79 = scmp eq i32 %78, i32 45;
    i32 %80 = select i1 %79 ? i32 1 : i32 %77;
    i32 %81 = call () -> i32 @getch();
    i1 %82 = scmp lt i32 %81, i32 48;
    cbr i1 %82(prob = 0.5), ^b25, ^b24;
^b22:
    i1 %83 = scmp gt i32 %73, i32 57;
    cbr i1 %83(prob = 0.97), ^while.body7, ^while.guard2;
^while.body8:
    i32 %84 = phi [^entry3, i32 0] [^b23, i32 0] [^b27, i32 %87];
    i32 %85 = phi [^entry3, i32 %75] [^b23, i32 %75] [^b27, i32 %88];
    i1 %86 = scmp eq i32 %85, i32 45;
    i32 %87 = select i1 %86 ? i32 1 : i32 %84;
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp lt i32 %88, i32 48;
    cbr i1 %89(prob = 0.5), ^b27, ^b26;
^b23:
    i1 %90 = scmp gt i32 %75, i32 57;
    cbr i1 %90(prob = 0.97), ^while.body8, ^while.guard3;
^b24:
    i1 %91 = scmp gt i32 %81, i32 57;
    ubr ^b25;
^b25:
    i1 %92 = phi [^while.body7, i1 true] [^b24, i1 %91];
    cbr i1 %92(prob = 0.97), ^while.body7, ^while.guard2;
^b26:
    i1 %93 = scmp gt i32 %88, i32 57;
    ubr ^b27;
^b27:
    i1 %94 = phi [^while.body8, i1 true] [^b26, i1 %93];
    cbr i1 %94(prob = 0.97), ^while.body8, ^while.guard3;
^while.guard2:
    i32 %95 = phi [^b22, i32 0] [^b25, i32 %80];
    i32 %96 = phi [^b22, i32 %73] [^b25, i32 %81];
    i1 %97 = scmp gt i32 %96, i32 47;
    cbr i1 %97(prob = 0.5), ^b28, ^b29;
^while.guard3:
    i32 %98 = phi [^b23, i32 0] [^b27, i32 %87];
    i32 %99 = phi [^b23, i32 %75] [^b27, i32 %88];
    i1 %100 = scmp gt i32 %99, i32 47;
    cbr i1 %100(prob = 0.5), ^b30, ^b31;
^b28:
    i1 %101 = scmp lt i32 %96, i32 58;
    cbr i1 %101(prob = 0.97), ^while.body9, ^b29;
^b29:
    i32 %102 = phi [^while.guard2, i32 0] [^b28, i32 0] [^b36, i32 %112];
    i1 %103 = scmp neq i32 %95, i32 0;
    cbr i1 %103(prob = 0.5), ^if.then2, ^b32;
^b30:
    i1 %104 = scmp lt i32 %99, i32 58;
    cbr i1 %104(prob = 0.97), ^while.body10, ^b31;
^b31:
    i32 %105 = phi [^while.guard3, i32 0] [^b30, i32 0] [^b37, i32 %120];
    i1 %106 = scmp neq i32 %98, i32 0;
    cbr i1 %106(prob = 0.5), ^if.then3, ^b33;
^if.then2:
    i32 %107 = neg i32 %102;
    ubr ^b32;
^while.body9:
    i32 %108 = phi [^b28, i32 %96] [^b36, i32 %113];
    i32 %109 = phi [^b28, i32 0] [^b36, i32 %112];
    i32 %110 = mul i32 %109, i32 10;
    i32 %111 = add i32 %108, i32 -48;
    i32 %112 = add i32 %111, i32 %110;
    i32 %113 = call () -> i32 @getch();
    i1 %114 = scmp gt i32 %113, i32 47;
    cbr i1 %114(prob = 0.5), ^b34, ^b36;
^if.then3:
    i32 %115 = neg i32 %105;
    ubr ^b33;
^while.body10:
    i32 %116 = phi [^b30, i32 %99] [^b37, i32 %121];
    i32 %117 = phi [^b30, i32 0] [^b37, i32 %120];
    i32 %118 = mul i32 %117, i32 10;
    i32 %119 = add i32 %116, i32 -48;
    i32 %120 = add i32 %119, i32 %118;
    i32 %121 = call () -> i32 @getch();
    i1 %122 = scmp gt i32 %121, i32 47;
    cbr i1 %122(prob = 0.5), ^b35, ^b37;
^b32:
    i32 %123 = phi [^b29, i32 %102] [^if.then2, i32 %107];
    i32 %124 = call () -> i32 @getch();
    i1 %125 = scmp lt i32 %124, i32 48;
    cbr i1 %125(prob = 0.5), ^while.body11, ^b38;
^b33:
    i32 %126 = phi [^b31, i32 %105] [^if.then3, i32 %115];
    i32 %127 = call (i32) -> i32 @find(i32 %126);
    i32 %128 = call () -> i32 @getch();
    i1 %129 = scmp lt i32 %128, i32 48;
    cbr i1 %129(prob = 0.5), ^while.body12, ^b39;
^b34:
    i1 %130 = scmp le i32 %113, i32 57;
    ubr ^b36;
^b35:
    i1 %131 = scmp le i32 %121, i32 57;
    ubr ^b37;
^b36:
    i1 %132 = phi [^while.body9, i1 false] [^b34, i1 %130];
    cbr i1 %132(prob = 0.97), ^while.body9, ^b29;
^b37:
    i1 %133 = phi [^while.body10, i1 false] [^b35, i1 %131];
    cbr i1 %133(prob = 0.97), ^while.body10, ^b31;
^while.body11:
    i32 %134 = phi [^b32, i32 0] [^b38, i32 0] [^b41, i32 %137];
    i32 %135 = phi [^b32, i32 %124] [^b38, i32 %124] [^b41, i32 %138];
    i1 %136 = scmp eq i32 %135, i32 45;
    i32 %137 = select i1 %136 ? i32 1 : i32 %134;
    i32 %138 = call () -> i32 @getch();
    i1 %139 = scmp lt i32 %138, i32 48;
    cbr i1 %139(prob = 0.5), ^b41, ^b40;
^b38:
    i1 %140 = scmp gt i32 %124, i32 57;
    cbr i1 %140(prob = 0.97), ^while.body11, ^while.guard4;
^while.body12:
    i32 %141 = phi [^b33, i32 0] [^b39, i32 0] [^b43, i32 %144];
    i32 %142 = phi [^b33, i32 %128] [^b39, i32 %128] [^b43, i32 %145];
    i1 %143 = scmp eq i32 %142, i32 45;
    i32 %144 = select i1 %143 ? i32 1 : i32 %141;
    i32 %145 = call () -> i32 @getch();
    i1 %146 = scmp lt i32 %145, i32 48;
    cbr i1 %146(prob = 0.5), ^b43, ^b42;
^b39:
    i1 %147 = scmp gt i32 %128, i32 57;
    cbr i1 %147(prob = 0.97), ^while.body12, ^while.guard5;
^b40:
    i1 %148 = scmp gt i32 %138, i32 57;
    ubr ^b41;
^b41:
    i1 %149 = phi [^while.body11, i1 true] [^b40, i1 %148];
    cbr i1 %149(prob = 0.97), ^while.body11, ^while.guard4;
^b42:
    i1 %150 = scmp gt i32 %145, i32 57;
    ubr ^b43;
^b43:
    i1 %151 = phi [^while.body12, i1 true] [^b42, i1 %150];
    cbr i1 %151(prob = 0.97), ^while.body12, ^while.guard5;
^while.guard4:
    i32 %152 = phi [^b38, i32 0] [^b41, i32 %137];
    i32 %153 = phi [^b38, i32 %124] [^b41, i32 %138];
    i1 %154 = scmp gt i32 %153, i32 47;
    cbr i1 %154(prob = 0.5), ^b44, ^b45;
^while.guard5:
    i32 %155 = phi [^b39, i32 0] [^b43, i32 %144];
    i32 %156 = phi [^b39, i32 %128] [^b43, i32 %145];
    i1 %157 = scmp gt i32 %156, i32 47;
    cbr i1 %157(prob = 0.5), ^b46, ^b47;
^b44:
    i1 %158 = scmp lt i32 %153, i32 58;
    cbr i1 %158(prob = 0.97), ^while.body13, ^b45;
^b45:
    i32 %159 = phi [^while.guard4, i32 0] [^b44, i32 0] [^b52, i32 %169];
    i1 %160 = scmp neq i32 %152, i32 0;
    cbr i1 %160(prob = 0.5), ^if.then4, ^b48;
^b46:
    i1 %161 = scmp lt i32 %156, i32 58;
    cbr i1 %161(prob = 0.97), ^while.body14, ^b47;
^b47:
    i32 %162 = phi [^while.guard5, i32 0] [^b46, i32 0] [^b53, i32 %182];
    i1 %163 = scmp neq i32 %155, i32 0;
    cbr i1 %163(prob = 0.5), ^if.then5, ^b49;
^if.then4:
    i32 %164 = neg i32 %159;
    ubr ^b48;
^while.body13:
    i32 %165 = phi [^b44, i32 %153] [^b52, i32 %170];
    i32 %166 = phi [^b44, i32 0] [^b52, i32 %169];
    i32 %167 = mul i32 %166, i32 10;
    i32 %168 = add i32 %165, i32 -48;
    i32 %169 = add i32 %168, i32 %167;
    i32 %170 = call () -> i32 @getch();
    i1 %171 = scmp gt i32 %170, i32 47;
    cbr i1 %171(prob = 0.5), ^b50, ^b52;
^b48:
    i32 %172 = phi [^b45, i32 %159] [^if.then4, i32 %164];
    i32 %173 = call (i32) -> i32 @find(i32 %123);
    i32 %174 = call (i32) -> i32 @find(i32 %172);
    i1 %175 = scmp eq i32 %173, i32 %174;
    i32 %176 = zext i1 %175 to i32;
    call (i32) -> void @putint(i32 %176);
    call (i32) -> void @putch(i32 10);
    ubr ^b54;
^if.then5:
    i32 %177 = neg i32 %162;
    ubr ^b49;
^while.body14:
    i32 %178 = phi [^b46, i32 %156] [^b53, i32 %183];
    i32 %179 = phi [^b46, i32 0] [^b53, i32 %182];
    i32 %180 = mul i32 %179, i32 10;
    i32 %181 = add i32 %178, i32 -48;
    i32 %182 = add i32 %181, i32 %180;
    i32 %183 = call () -> i32 @getch();
    i1 %184 = scmp gt i32 %183, i32 47;
    cbr i1 %184(prob = 0.5), ^b51, ^b53;
^b49:
    i32 %185 = phi [^b47, i32 %162] [^if.then5, i32 %177];
    i32 %186 = call (i32) -> i32 @find(i32 %185);
    i32* %187 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %127];
    store i32* %187 with i32 %186;
    ubr ^b54;
^b50:
    i1 %188 = scmp le i32 %170, i32 57;
    ubr ^b52;
^b51:
    i1 %189 = scmp le i32 %183, i32 57;
    ubr ^b53;
^b52:
    i1 %190 = phi [^while.body13, i1 false] [^b50, i1 %188];
    cbr i1 %190(prob = 0.97), ^while.body13, ^b45;
^b53:
    i1 %191 = phi [^while.body14, i1 false] [^b51, i1 %189];
    cbr i1 %191(prob = 0.97), ^while.body14, ^b47;
^b54:
    i32 %192 = add i32 %62, i32 -1;
    i1 %193 = scmp neq i32 %192, i32 0;
    cbr i1 %193(prob = 0.97), ^while.body5, ^b16;
}
