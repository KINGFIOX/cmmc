internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32* %4 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else1, ^if.else2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^if.else1, i32 %8];
    ret i32 %7;
  ^if.else1:
    i32 %8 = phi [^if.else, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^if.else2:
    i32* %9 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^if.else3;
  ^b1:
    i32 %12 = phi [^if.else2, i32 %5] [^if.else4, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else1;
  ^if.else3:
    i32* %13 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else4, ^if.else5;
  ^if.else4:
    i32 %16 = phi [^if.else3, i32 %10] [^b2, i32 %20];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else5:
    i32* %17 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %14, i32 %18;
    cbr i1 %19(prob = 0.5), ^b2, ^if.else6;
  ^b2:
    i32 %20 = phi [^if.else5, i32 %14] [^if.else7, i32 %24];
    store i32* %13 with i32 %20;
    ubr ^if.else4;
  ^if.else6:
    i32* %21 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %18, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.else7, ^if.else8;
  ^if.else7:
    i32 %24 = phi [^if.else6, i32 %18] [^b3, i32 %28];
    store i32* %17 with i32 %24;
    ubr ^b2;
  ^if.else8:
    i32* %25 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %22, i32 %26;
    cbr i1 %27(prob = 0.5), ^b3, ^if.else9;
  ^b3:
    i32 %28 = phi [^if.else8, i32 %22] [^if.else10, i32 %32];
    store i32* %21 with i32 %28;
    ubr ^if.else7;
  ^if.else9:
    i32* %29 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %26];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %26, i32 %30;
    cbr i1 %31(prob = 0.5), ^if.else10, ^if.else11;
  ^if.else10:
    i32 %32 = phi [^if.else9, i32 %26] [^if.else11, i32 %33];
    store i32* %25 with i32 %32;
    ubr ^b3;
  ^if.else11:
    i32 %33 = call (i32) -> i32 @find(i32 %30);
    store i32* %29 with i32 %33;
    ubr ^if.else10;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %24 = call () -> i32 @getch();
    i32 %25 = add i32 %24, i32 -48;
    i1 %26 = icmp ugt i32 %25, i32 9;
    i1 %27 = icmp neq i32 %12, i32 0;
    i32 %28 = neg i32 %23;
    i32 %29 = select i1 %27 ? i32 %28 : i32 %23;
    cbr i1 %26(prob = 0.984615), ^while.body2, ^37;
  ^while.body2:
    i32 %30 = phi [^b, i32 %24] [^while.body2, i32 %32];
    i32 %31 = phi [^b, i32 0] [^while.body2, i32 %36];
    i32 %32 = call () -> i32 @getch();
    i32 %33 = add i32 %32, i32 -48;
    i1 %34 = icmp ugt i32 %33, i32 9;
    i1 %35 = icmp eq i32 %30, i32 45;
    i32 %36 = select i1 %35 ? i32 1 : i32 %31;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^37;
  ^37:
    i32 %38 = phi [^b, i32 %24] [^while.body2, i32 %32];
    i32 %39 = phi [^b, i32 0] [^while.body2, i32 %36];
    i32 %40 = add i32 %38, i32 -48;
    i1 %41 = icmp ult i32 %40, i32 10;
    cbr i1 %41(prob = 0.984615), ^while.body3, ^b1;
  ^while.body3:
    i32 %42 = phi [^37, i32 %38] [^while.body3, i32 %44];
    i32 %43 = phi [^37, i32 0] [^while.body3, i32 %49];
    i32 %44 = call () -> i32 @getch();
    i32 %45 = add i32 %44, i32 -48;
    i1 %46 = icmp ult i32 %45, i32 10;
    i32 %47 = mul i32 %43, i32 10;
    i32 %48 = add i32 %47, i32 -48;
    i32 %49 = add i32 %42, i32 %48;
    cbr i1 %46(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %50 = phi [^37, i32 0] [^while.body3, i32 %49];
    i1 %51 = icmp neq i32 %39, i32 0;
    i32 %52 = neg i32 %50;
    i32 %53 = select i1 %51 ? i32 %52 : i32 %50;
    i1 %54 = icmp sgt i32 %29, i32 0;
    [100005 * i32]* %55 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    cbr i1 %54(prob = 0.984615), ^while.body4, ^b2;
  ^while.body4:
    i32 %56 = phi [^b1, i32 1] [^while.body4, i32 %58];
    i32* %57 = getelementptr &([100005 * i32]* %55)[i64 0][i32 %56];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %56, i32 1;
    i1 %59 = icmp sge i32 %29, i32 %58;
    cbr i1 %59(prob = 0.984615), ^while.body4, ^b2;
  ^b2:
    i1 %60 = icmp neq i32 %53, i32 0;
    cbr i1 %60(prob = 0.984615), ^while.body5, ^b3;
  ^while.body5:
    i32 %61 = phi [^b2, i32 %53] [^while.body5, i32 %61] [^b9, i32 %182];
    i32 %62 = call () -> i32 @getch();
    i1 %63 = icmp neq i32 %62, i32 81;
    i1 %64 = icmp neq i32 %62, i32 85;
    i1 %65 = and i1 %63, i1 %64;
    cbr i1 %65(prob = 0.984615), ^while.body5, ^b4;
  ^b3:
    ret i32 0;
  ^b4:
    i1 %66 = icmp eq i32 %62, i32 81;
    cbr i1 %66(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %67 = call () -> i32 @getch();
    i32 %68 = add i32 %67, i32 -48;
    i1 %69 = icmp ugt i32 %68, i32 9;
    cbr i1 %69(prob = 0.984615), ^while.body6, ^80;
  ^if.else:
    i32 %70 = call () -> i32 @getch();
    i32 %71 = add i32 %70, i32 -48;
    i1 %72 = icmp ugt i32 %71, i32 9;
    cbr i1 %72(prob = 0.984615), ^while.body7, ^92;
  ^while.body6:
    i32 %73 = phi [^if.then, i32 %67] [^while.body6, i32 %75];
    i32 %74 = phi [^if.then, i32 0] [^while.body6, i32 %79];
    i32 %75 = call () -> i32 @getch();
    i32 %76 = add i32 %75, i32 -48;
    i1 %77 = icmp ugt i32 %76, i32 9;
    i1 %78 = icmp eq i32 %73, i32 45;
    i32 %79 = select i1 %78 ? i32 1 : i32 %74;
    cbr i1 %77(prob = 0.984615), ^while.body6, ^80;
  ^80:
    i32 %81 = phi [^if.then, i32 %67] [^while.body6, i32 %75];
    i32 %82 = phi [^if.then, i32 0] [^while.body6, i32 %79];
    i32 %83 = add i32 %81, i32 -48;
    i1 %84 = icmp ult i32 %83, i32 10;
    cbr i1 %84(prob = 0.984615), ^while.body8, ^b5;
  ^while.body7:
    i32 %85 = phi [^if.else, i32 %70] [^while.body7, i32 %87];
    i32 %86 = phi [^if.else, i32 0] [^while.body7, i32 %91];
    i32 %87 = call () -> i32 @getch();
    i32 %88 = add i32 %87, i32 -48;
    i1 %89 = icmp ugt i32 %88, i32 9;
    i1 %90 = icmp eq i32 %85, i32 45;
    i32 %91 = select i1 %90 ? i32 1 : i32 %86;
    cbr i1 %89(prob = 0.984615), ^while.body7, ^92;
  ^92:
    i32 %93 = phi [^if.else, i32 %70] [^while.body7, i32 %87];
    i32 %94 = phi [^if.else, i32 0] [^while.body7, i32 %91];
    i32 %95 = add i32 %93, i32 -48;
    i1 %96 = icmp ult i32 %95, i32 10;
    cbr i1 %96(prob = 0.984615), ^while.body9, ^b6;
  ^while.body8:
    i32 %97 = phi [^80, i32 %81] [^while.body8, i32 %99];
    i32 %98 = phi [^80, i32 0] [^while.body8, i32 %104];
    i32 %99 = call () -> i32 @getch();
    i32 %100 = add i32 %99, i32 -48;
    i1 %101 = icmp ult i32 %100, i32 10;
    i32 %102 = mul i32 %98, i32 10;
    i32 %103 = add i32 %102, i32 -48;
    i32 %104 = add i32 %97, i32 %103;
    cbr i1 %101(prob = 0.984615), ^while.body8, ^b5;
  ^b5:
    i32 %105 = phi [^80, i32 0] [^while.body8, i32 %104];
    i32 %106 = call () -> i32 @getch();
    i32 %107 = add i32 %106, i32 -48;
    i1 %108 = icmp ugt i32 %107, i32 9;
    i1 %109 = icmp neq i32 %82, i32 0;
    i32 %110 = neg i32 %105;
    i32 %111 = select i1 %109 ? i32 %110 : i32 %105;
    cbr i1 %108(prob = 0.984615), ^while.body10, ^135;
  ^while.body9:
    i32 %112 = phi [^92, i32 %93] [^while.body9, i32 %114];
    i32 %113 = phi [^92, i32 0] [^while.body9, i32 %119];
    i32 %114 = call () -> i32 @getch();
    i32 %115 = add i32 %114, i32 -48;
    i1 %116 = icmp ult i32 %115, i32 10;
    i32 %117 = mul i32 %113, i32 10;
    i32 %118 = add i32 %117, i32 -48;
    i32 %119 = add i32 %112, i32 %118;
    cbr i1 %116(prob = 0.984615), ^while.body9, ^b6;
  ^b6:
    i32 %120 = phi [^92, i32 0] [^while.body9, i32 %119];
    i1 %121 = icmp neq i32 %94, i32 0;
    i32 %122 = neg i32 %120;
    i32 %123 = select i1 %121 ? i32 %122 : i32 %120;
    i32 %124 = call (i32) -> i32 @find(i32 %123);
    i32 %125 = call () -> i32 @getch();
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = icmp ugt i32 %126, i32 9;
    cbr i1 %127(prob = 0.984615), ^while.body11, ^147;
  ^while.body10:
    i32 %128 = phi [^b5, i32 %106] [^while.body10, i32 %130];
    i32 %129 = phi [^b5, i32 0] [^while.body10, i32 %134];
    i32 %130 = call () -> i32 @getch();
    i32 %131 = add i32 %130, i32 -48;
    i1 %132 = icmp ugt i32 %131, i32 9;
    i1 %133 = icmp eq i32 %128, i32 45;
    i32 %134 = select i1 %133 ? i32 1 : i32 %129;
    cbr i1 %132(prob = 0.984615), ^while.body10, ^135;
  ^135:
    i32 %136 = phi [^b5, i32 %106] [^while.body10, i32 %130];
    i32 %137 = phi [^b5, i32 0] [^while.body10, i32 %134];
    i32 %138 = add i32 %136, i32 -48;
    i1 %139 = icmp ult i32 %138, i32 10;
    cbr i1 %139(prob = 0.984615), ^while.body12, ^b7;
  ^while.body11:
    i32 %140 = phi [^b6, i32 %125] [^while.body11, i32 %142];
    i32 %141 = phi [^b6, i32 0] [^while.body11, i32 %146];
    i32 %142 = call () -> i32 @getch();
    i32 %143 = add i32 %142, i32 -48;
    i1 %144 = icmp ugt i32 %143, i32 9;
    i1 %145 = icmp eq i32 %140, i32 45;
    i32 %146 = select i1 %145 ? i32 1 : i32 %141;
    cbr i1 %144(prob = 0.984615), ^while.body11, ^147;
  ^147:
    i32 %148 = phi [^b6, i32 %125] [^while.body11, i32 %142];
    i32 %149 = phi [^b6, i32 0] [^while.body11, i32 %146];
    i32 %150 = add i32 %148, i32 -48;
    i1 %151 = icmp ult i32 %150, i32 10;
    cbr i1 %151(prob = 0.984615), ^while.body13, ^b8;
  ^b7:
    i32 %152 = phi [^135, i32 0] [^while.body12, i32 %167];
    i32 %153 = call (i32) -> i32 @find(i32 %111);
    i1 %154 = icmp neq i32 %137, i32 0;
    i32 %155 = neg i32 %152;
    i32 %156 = select i1 %154 ? i32 %155 : i32 %152;
    i32 %157 = call (i32) -> i32 @find(i32 %156);
    i1 %158 = icmp eq i32 %153, i32 %157;
    i32 %159 = zext i1 %158 to i32;
    call (i32) -> void @putint(i32 %159);
    call (i32) -> void @putch(i32 10);
    ubr ^b9;
  ^while.body12:
    i32 %160 = phi [^135, i32 %136] [^while.body12, i32 %162];
    i32 %161 = phi [^135, i32 0] [^while.body12, i32 %167];
    i32 %162 = call () -> i32 @getch();
    i32 %163 = add i32 %162, i32 -48;
    i1 %164 = icmp ult i32 %163, i32 10;
    i32 %165 = mul i32 %161, i32 10;
    i32 %166 = add i32 %165, i32 -48;
    i32 %167 = add i32 %160, i32 %166;
    cbr i1 %164(prob = 0.984615), ^while.body12, ^b7;
  ^b8:
    i32 %168 = phi [^147, i32 0] [^while.body13, i32 %181];
    i1 %169 = icmp neq i32 %149, i32 0;
    i32 %170 = neg i32 %168;
    i32 %171 = select i1 %169 ? i32 %170 : i32 %168;
    i32 %172 = call (i32) -> i32 @find(i32 %171);
    i32* %173 = getelementptr &([100005 * i32]* %55)[i64 0][i32 %124];
    store i32* %173 with i32 %172;
    ubr ^b9;
  ^while.body13:
    i32 %174 = phi [^147, i32 %148] [^while.body13, i32 %176];
    i32 %175 = phi [^147, i32 0] [^while.body13, i32 %181];
    i32 %176 = call () -> i32 @getch();
    i32 %177 = add i32 %176, i32 -48;
    i1 %178 = icmp ult i32 %177, i32 10;
    i32 %179 = mul i32 %175, i32 10;
    i32 %180 = add i32 %179, i32 -48;
    i32 %181 = add i32 %174, i32 %180;
    cbr i1 %178(prob = 0.984615), ^while.body13, ^b8;
  ^b9:
    i32 %182 = add i32 %61, i32 -1;
    i1 %183 = icmp neq i32 %182, i32 0;
    cbr i1 %183(prob = 0.984615), ^while.body5, ^b3;
}
