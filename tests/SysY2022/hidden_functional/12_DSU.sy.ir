internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %x;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b;
  ^b:
    i32 %5 = phi [^entry, i32 %x] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    i1 %8 = scmp gt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = scmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %14 = add i32 %12, i32 -48;
    i1 %15 = ucmp lt i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %16 = phi [^indirect, i32 0] [^while.body1, i32 %23];
    i32 %17 = phi [^indirect, i32 %12] [^while.body1, i32 %18];
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = ucmp lt i32 %19, i32 10;
    i32 %21 = mul i32 %16, i32 10;
    i32 %22 = add i32 %21, i32 -48;
    i32 %23 = add i32 %22, i32 %17;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %24 = phi [^indirect, i32 0] [^while.body1, i32 %23];
    i32 %25 = call () -> i32 @getch();
    i1 %26 = scmp lt i32 %25, i32 48;
    i1 %27 = scmp gt i32 %25, i32 57;
    i1 %28 = or i1 %26, i1 %27;
    i32 %29 = neg i32 %24;
    i1 %30 = scmp neq i32 %13, i32 0;
    i32 %31 = select i1 %30 ? i32 %29 : i32 %24;
    cbr i1 %28(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %32 = phi [^b, i32 %25] [^while.body2, i32 %34];
    i32 %33 = phi [^b, i32 0] [^while.body2, i32 %39];
    i32 %34 = call () -> i32 @getch();
    i1 %35 = scmp lt i32 %34, i32 48;
    i1 %36 = scmp gt i32 %34, i32 57;
    i1 %37 = or i1 %35, i1 %36;
    i1 %38 = scmp eq i32 %32, i32 45;
    i32 %39 = select i1 %38 ? i32 1 : i32 %33;
    cbr i1 %37(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %40 = phi [^b, i32 %25] [^while.body2, i32 %34];
    i32 %41 = phi [^b, i32 0] [^while.body2, i32 %39];
    i32 %42 = add i32 %40, i32 -48;
    i1 %43 = ucmp lt i32 %42, i32 10;
    cbr i1 %43(prob = 0.97), ^while.body3, ^b1;
  ^while.body3:
    i32 %44 = phi [^indirect1, i32 0] [^while.body3, i32 %51];
    i32 %45 = phi [^indirect1, i32 %40] [^while.body3, i32 %46];
    i32 %46 = call () -> i32 @getch();
    i32 %47 = add i32 %46, i32 -48;
    i1 %48 = ucmp lt i32 %47, i32 10;
    i32 %49 = mul i32 %44, i32 10;
    i32 %50 = add i32 %49, i32 -48;
    i32 %51 = add i32 %50, i32 %45;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %52 = phi [^indirect1, i32 0] [^while.body3, i32 %51];
    i32 %53 = neg i32 %52;
    i1 %54 = scmp neq i32 %41, i32 0;
    i32 %55 = select i1 %54 ? i32 %53 : i32 %52;
    [100005 * i32]* %56 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i1 %57 = scmp gt i32 %31, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body4, ^while.header;
  ^while.body4:
    i32 %58 = phi [^b1, i32 1] [^while.body4, i32 %60];
    i32* %59 = getelementptr &([100005 * i32]* %56)[i64 0][i32 %58];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %58, i32 1;
    i1 %61 = scmp le i32 %60, i32 %31;
    cbr i1 %61(prob = 0.97), ^while.body4, ^while.header;
  ^while.header:
    i32 %62 = phi [^b1, i32 %55] [^while.body4, i32 %55] [^b8, i32 %193];
    i1 %63 = scmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body5, ^b2;
  ^while.body5:
    i32 %64 = call () -> i32 @getch();
    i1 %65 = scmp neq i32 %64, i32 81;
    i1 %66 = scmp neq i32 %64, i32 85;
    i1 %67 = and i1 %65, i1 %66;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^while.body6:
    i32 %68 = call () -> i32 @getch();
    i1 %69 = scmp neq i32 %68, i32 81;
    i1 %70 = scmp neq i32 %68, i32 85;
    i1 %71 = and i1 %69, i1 %70;
    cbr i1 %71(prob = 0.97), ^while.body6, ^b3;
  ^b3:
    i32 %72 = phi [^while.body5, i32 %64] [^while.body6, i32 %68];
    i1 %73 = scmp eq i32 %72, i32 81;
    cbr i1 %73(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %74 = call () -> i32 @getch();
    i1 %75 = scmp lt i32 %74, i32 48;
    i1 %76 = scmp gt i32 %74, i32 57;
    i1 %77 = or i1 %75, i1 %76;
    cbr i1 %77(prob = 0.97), ^while.body7, ^indirect2;
  ^entry2:
    i32 %78 = call () -> i32 @getch();
    i1 %79 = scmp lt i32 %78, i32 48;
    i1 %80 = scmp gt i32 %78, i32 57;
    i1 %81 = or i1 %79, i1 %80;
    cbr i1 %81(prob = 0.97), ^while.body8, ^indirect3;
  ^while.body7:
    i32 %82 = phi [^entry1, i32 %74] [^while.body7, i32 %84];
    i32 %83 = phi [^entry1, i32 0] [^while.body7, i32 %89];
    i32 %84 = call () -> i32 @getch();
    i1 %85 = scmp lt i32 %84, i32 48;
    i1 %86 = scmp gt i32 %84, i32 57;
    i1 %87 = or i1 %85, i1 %86;
    i1 %88 = scmp eq i32 %82, i32 45;
    i32 %89 = select i1 %88 ? i32 1 : i32 %83;
    cbr i1 %87(prob = 0.97), ^while.body7, ^indirect2;
  ^indirect2:
    i32 %90 = phi [^entry1, i32 %74] [^while.body7, i32 %84];
    i32 %91 = phi [^entry1, i32 0] [^while.body7, i32 %89];
    i32 %92 = add i32 %90, i32 -48;
    i1 %93 = ucmp lt i32 %92, i32 10;
    cbr i1 %93(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %94 = phi [^entry2, i32 %78] [^while.body8, i32 %96];
    i32 %95 = phi [^entry2, i32 0] [^while.body8, i32 %101];
    i32 %96 = call () -> i32 @getch();
    i1 %97 = scmp lt i32 %96, i32 48;
    i1 %98 = scmp gt i32 %96, i32 57;
    i1 %99 = or i1 %97, i1 %98;
    i1 %100 = scmp eq i32 %94, i32 45;
    i32 %101 = select i1 %100 ? i32 1 : i32 %95;
    cbr i1 %99(prob = 0.97), ^while.body8, ^indirect3;
  ^indirect3:
    i32 %102 = phi [^entry2, i32 %78] [^while.body8, i32 %96];
    i32 %103 = phi [^entry2, i32 0] [^while.body8, i32 %101];
    i32 %104 = add i32 %102, i32 -48;
    i1 %105 = ucmp lt i32 %104, i32 10;
    cbr i1 %105(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %106 = phi [^indirect2, i32 0] [^while.body9, i32 %113];
    i32 %107 = phi [^indirect2, i32 %90] [^while.body9, i32 %108];
    i32 %108 = call () -> i32 @getch();
    i32 %109 = add i32 %108, i32 -48;
    i1 %110 = ucmp lt i32 %109, i32 10;
    i32 %111 = mul i32 %106, i32 10;
    i32 %112 = add i32 %111, i32 -48;
    i32 %113 = add i32 %112, i32 %107;
    cbr i1 %110(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %114 = phi [^indirect2, i32 0] [^while.body9, i32 %113];
    i32 %115 = call () -> i32 @getch();
    i1 %116 = scmp lt i32 %115, i32 48;
    i1 %117 = scmp gt i32 %115, i32 57;
    i1 %118 = or i1 %116, i1 %117;
    i32 %119 = neg i32 %114;
    i1 %120 = scmp neq i32 %91, i32 0;
    i32 %121 = select i1 %120 ? i32 %119 : i32 %114;
    cbr i1 %118(prob = 0.97), ^while.body11, ^indirect4;
  ^while.body10:
    i32 %122 = phi [^indirect3, i32 0] [^while.body10, i32 %129];
    i32 %123 = phi [^indirect3, i32 %102] [^while.body10, i32 %124];
    i32 %124 = call () -> i32 @getch();
    i32 %125 = add i32 %124, i32 -48;
    i1 %126 = ucmp lt i32 %125, i32 10;
    i32 %127 = mul i32 %122, i32 10;
    i32 %128 = add i32 %127, i32 -48;
    i32 %129 = add i32 %128, i32 %123;
    cbr i1 %126(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %130 = phi [^indirect3, i32 0] [^while.body10, i32 %129];
    i32 %131 = neg i32 %130;
    i1 %132 = scmp neq i32 %103, i32 0;
    i32 %133 = select i1 %132 ? i32 %131 : i32 %130;
    i32 %134 = call (i32) -> i32 @find(i32 %133);
    i32 %135 = call () -> i32 @getch();
    i1 %136 = scmp lt i32 %135, i32 48;
    i1 %137 = scmp gt i32 %135, i32 57;
    i1 %138 = or i1 %136, i1 %137;
    cbr i1 %138(prob = 0.97), ^while.body12, ^indirect5;
  ^while.body11:
    i32 %139 = phi [^b4, i32 %115] [^while.body11, i32 %141];
    i32 %140 = phi [^b4, i32 0] [^while.body11, i32 %146];
    i32 %141 = call () -> i32 @getch();
    i1 %142 = scmp lt i32 %141, i32 48;
    i1 %143 = scmp gt i32 %141, i32 57;
    i1 %144 = or i1 %142, i1 %143;
    i1 %145 = scmp eq i32 %139, i32 45;
    i32 %146 = select i1 %145 ? i32 1 : i32 %140;
    cbr i1 %144(prob = 0.97), ^while.body11, ^indirect4;
  ^indirect4:
    i32 %147 = phi [^b4, i32 %115] [^while.body11, i32 %141];
    i32 %148 = phi [^b4, i32 0] [^while.body11, i32 %146];
    i32 %149 = add i32 %147, i32 -48;
    i1 %150 = ucmp lt i32 %149, i32 10;
    cbr i1 %150(prob = 0.97), ^while.body13, ^b6;
  ^while.body12:
    i32 %151 = phi [^b5, i32 %135] [^while.body12, i32 %153];
    i32 %152 = phi [^b5, i32 0] [^while.body12, i32 %158];
    i32 %153 = call () -> i32 @getch();
    i1 %154 = scmp lt i32 %153, i32 48;
    i1 %155 = scmp gt i32 %153, i32 57;
    i1 %156 = or i1 %154, i1 %155;
    i1 %157 = scmp eq i32 %151, i32 45;
    i32 %158 = select i1 %157 ? i32 1 : i32 %152;
    cbr i1 %156(prob = 0.97), ^while.body12, ^indirect5;
  ^indirect5:
    i32 %159 = phi [^b5, i32 %135] [^while.body12, i32 %153];
    i32 %160 = phi [^b5, i32 0] [^while.body12, i32 %158];
    i32 %161 = add i32 %159, i32 -48;
    i1 %162 = ucmp lt i32 %161, i32 10;
    cbr i1 %162(prob = 0.97), ^while.body14, ^b7;
  ^b6:
    i32 %163 = phi [^indirect4, i32 0] [^while.body13, i32 %178];
    i32 %164 = call (i32) -> i32 @find(i32 %121);
    i32 %165 = neg i32 %163;
    i1 %166 = scmp neq i32 %148, i32 0;
    i32 %167 = select i1 %166 ? i32 %165 : i32 %163;
    i32 %168 = call (i32) -> i32 @find(i32 %167);
    i1 %169 = scmp eq i32 %164, i32 %168;
    i32 %170 = zext i1 %169 to i32;
    call (i32) -> void @putint(i32 %170);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
  ^while.body13:
    i32 %171 = phi [^indirect4, i32 0] [^while.body13, i32 %178];
    i32 %172 = phi [^indirect4, i32 %147] [^while.body13, i32 %173];
    i32 %173 = call () -> i32 @getch();
    i32 %174 = add i32 %173, i32 -48;
    i1 %175 = ucmp lt i32 %174, i32 10;
    i32 %176 = mul i32 %171, i32 10;
    i32 %177 = add i32 %176, i32 -48;
    i32 %178 = add i32 %177, i32 %172;
    cbr i1 %175(prob = 0.97), ^while.body13, ^b6;
  ^b7:
    i32 %179 = phi [^indirect5, i32 0] [^while.body14, i32 %192];
    i32 %180 = neg i32 %179;
    i1 %181 = scmp neq i32 %160, i32 0;
    i32 %182 = select i1 %181 ? i32 %180 : i32 %179;
    i32 %183 = call (i32) -> i32 @find(i32 %182);
    i32* %184 = getelementptr &([100005 * i32]* %56)[i64 0][i32 %134];
    store i32* %184 with i32 %183;
    ubr ^b8;
  ^while.body14:
    i32 %185 = phi [^indirect5, i32 0] [^while.body14, i32 %192];
    i32 %186 = phi [^indirect5, i32 %159] [^while.body14, i32 %187];
    i32 %187 = call () -> i32 @getch();
    i32 %188 = add i32 %187, i32 -48;
    i1 %189 = ucmp lt i32 %188, i32 10;
    i32 %190 = mul i32 %185, i32 10;
    i32 %191 = add i32 %190, i32 -48;
    i32 %192 = add i32 %191, i32 %186;
    cbr i1 %189(prob = 0.97), ^while.body14, ^b7;
  ^b8:
    i32 %193 = add i32 %62, i32 -1;
    ubr ^while.header;
}
