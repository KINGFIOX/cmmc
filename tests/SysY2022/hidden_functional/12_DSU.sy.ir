internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %x;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %4 = call (i32) -> i32 @find(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b;
  ^b:
    i32 %5 = phi [^entry, i32 %x] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
  ^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
  ^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp eq i32 %2, i32 45;
    i32 %8 = select i1 %7 ? i32 1 : i32 %1;
    ubr ^while.header;
  ^while.header1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %17];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %14];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
  ^b2:
    i1 %12 = scmp le i32 %10, i32 57;
    ubr ^b3;
  ^b3:
    i1 %13 = phi [^while.header1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b4;
  ^while.body1:
    i32 %14 = call () -> i32 @getch();
    i32 %15 = mul i32 %9, i32 10;
    i32 %16 = add i32 %10, i32 -48;
    i32 %17 = add i32 %16, i32 %15;
    ubr ^while.header1;
  ^b4:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
  ^if.then:
    i32 %19 = neg i32 %9;
    ubr ^b5;
  ^b5:
    i32 %20 = phi [^b4, i32 %9] [^if.then, i32 %19];
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header2;
  ^while.header2:
    i32 %22 = phi [^b5, i32 0] [^while.body2, i32 %29];
    i32 %23 = phi [^b5, i32 %21] [^while.body2, i32 %27];
    i1 %24 = scmp lt i32 %23, i32 48;
    cbr i1 %24(prob = 0.5), ^b7, ^b6;
  ^b6:
    i1 %25 = scmp gt i32 %23, i32 57;
    ubr ^b7;
  ^b7:
    i1 %26 = phi [^while.header2, i1 true] [^b6, i1 %25];
    cbr i1 %26(prob = 0.97), ^while.body2, ^while.header3;
  ^while.body2:
    i32 %27 = call () -> i32 @getch();
    i1 %28 = scmp eq i32 %23, i32 45;
    i32 %29 = select i1 %28 ? i32 1 : i32 %22;
    ubr ^while.header2;
  ^while.header3:
    i32 %30 = phi [^b7, i32 0] [^while.body3, i32 %38];
    i32 %31 = phi [^b7, i32 %23] [^while.body3, i32 %35];
    i1 %32 = scmp gt i32 %31, i32 47;
    cbr i1 %32(prob = 0.5), ^b8, ^b9;
  ^b8:
    i1 %33 = scmp le i32 %31, i32 57;
    ubr ^b9;
  ^b9:
    i1 %34 = phi [^while.header3, i1 false] [^b8, i1 %33];
    cbr i1 %34(prob = 0.97), ^while.body3, ^b10;
  ^while.body3:
    i32 %35 = call () -> i32 @getch();
    i32 %36 = mul i32 %30, i32 10;
    i32 %37 = add i32 %31, i32 -48;
    i32 %38 = add i32 %37, i32 %36;
    ubr ^while.header3;
  ^b10:
    i1 %39 = scmp neq i32 %22, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b11;
  ^if.then1:
    i32 %40 = neg i32 %30;
    ubr ^b11;
  ^b11:
    i32 %41 = phi [^b10, i32 %30] [^if.then1, i32 %40];
    [100005 * i32]* %42 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i1 %43 = scmp gt i32 %20, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body4, ^while.header4;
  ^while.body4:
    i32 %44 = phi [^b11, i32 1] [^while.body4, i32 %46];
    i32* %45 = getelementptr &([100005 * i32]* %42)[i64 0][i32 %44];
    store i32* %45 with i32 %44;
    i32 %46 = add i32 %44, i32 1;
    i1 %47 = scmp le i32 %46, i32 %20;
    cbr i1 %47(prob = 0.97), ^while.body4, ^while.header4;
  ^while.header4:
    i32 %48 = phi [^b11, i32 %41] [^while.body4, i32 %41] [^b40, i32 %148];
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.97), ^while.body5, ^b12;
  ^while.body5:
    i32 %50 = call () -> i32 @getch();
    ubr ^while.header5;
  ^b12:
    ret i32 0;
  ^while.header5:
    i32 %51 = phi [^while.body5, i32 %50] [^while.body6, i32 %55];
    i1 %52 = scmp neq i32 %51, i32 81;
    cbr i1 %52(prob = 0.5), ^b13, ^b14;
  ^b13:
    i1 %53 = scmp neq i32 %51, i32 85;
    ubr ^b14;
  ^b14:
    i1 %54 = phi [^while.header5, i1 false] [^b13, i1 %53];
    cbr i1 %54(prob = 0.97), ^while.body6, ^b15;
  ^while.body6:
    i32 %55 = call () -> i32 @getch();
    ubr ^while.header5;
  ^b15:
    i1 %56 = scmp eq i32 %51, i32 81;
    cbr i1 %56(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %57 = call () -> i32 @getch();
    ubr ^while.header6;
  ^entry2:
    i32 %58 = call () -> i32 @getch();
    ubr ^while.header7;
  ^while.header6:
    i32 %59 = phi [^entry1, i32 0] [^while.body7, i32 %71];
    i32 %60 = phi [^entry1, i32 %57] [^while.body7, i32 %69];
    i1 %61 = scmp lt i32 %60, i32 48;
    cbr i1 %61(prob = 0.5), ^b17, ^b16;
  ^while.header7:
    i32 %62 = phi [^entry2, i32 0] [^while.body8, i32 %74];
    i32 %63 = phi [^entry2, i32 %58] [^while.body8, i32 %72];
    i1 %64 = scmp lt i32 %63, i32 48;
    cbr i1 %64(prob = 0.5), ^b19, ^b18;
  ^b16:
    i1 %65 = scmp gt i32 %60, i32 57;
    ubr ^b17;
  ^b17:
    i1 %66 = phi [^while.header6, i1 true] [^b16, i1 %65];
    cbr i1 %66(prob = 0.97), ^while.body7, ^while.header8;
  ^b18:
    i1 %67 = scmp gt i32 %63, i32 57;
    ubr ^b19;
  ^b19:
    i1 %68 = phi [^while.header7, i1 true] [^b18, i1 %67];
    cbr i1 %68(prob = 0.97), ^while.body8, ^while.header9;
  ^while.body7:
    i32 %69 = call () -> i32 @getch();
    i1 %70 = scmp eq i32 %60, i32 45;
    i32 %71 = select i1 %70 ? i32 1 : i32 %59;
    ubr ^while.header6;
  ^while.body8:
    i32 %72 = call () -> i32 @getch();
    i1 %73 = scmp eq i32 %63, i32 45;
    i32 %74 = select i1 %73 ? i32 1 : i32 %62;
    ubr ^while.header7;
  ^while.header8:
    i32 %75 = phi [^b17, i32 0] [^while.body9, i32 %88];
    i32 %76 = phi [^b17, i32 %60] [^while.body9, i32 %85];
    i1 %77 = scmp gt i32 %76, i32 47;
    cbr i1 %77(prob = 0.5), ^b20, ^b22;
  ^while.header9:
    i32 %78 = phi [^b19, i32 0] [^while.body10, i32 %92];
    i32 %79 = phi [^b19, i32 %63] [^while.body10, i32 %89];
    i1 %80 = scmp gt i32 %79, i32 47;
    cbr i1 %80(prob = 0.5), ^b21, ^b23;
  ^b20:
    i1 %81 = scmp le i32 %76, i32 57;
    ubr ^b22;
  ^b21:
    i1 %82 = scmp le i32 %79, i32 57;
    ubr ^b23;
  ^b22:
    i1 %83 = phi [^while.header8, i1 false] [^b20, i1 %81];
    cbr i1 %83(prob = 0.97), ^while.body9, ^b24;
  ^b23:
    i1 %84 = phi [^while.header9, i1 false] [^b21, i1 %82];
    cbr i1 %84(prob = 0.97), ^while.body10, ^b25;
  ^while.body9:
    i32 %85 = call () -> i32 @getch();
    i32 %86 = mul i32 %75, i32 10;
    i32 %87 = add i32 %76, i32 -48;
    i32 %88 = add i32 %87, i32 %86;
    ubr ^while.header8;
  ^while.body10:
    i32 %89 = call () -> i32 @getch();
    i32 %90 = mul i32 %78, i32 10;
    i32 %91 = add i32 %79, i32 -48;
    i32 %92 = add i32 %91, i32 %90;
    ubr ^while.header9;
  ^b24:
    i1 %93 = scmp neq i32 %59, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then2, ^b26;
  ^b25:
    i1 %94 = scmp neq i32 %62, i32 0;
    cbr i1 %94(prob = 0.5), ^if.then3, ^b27;
  ^if.then2:
    i32 %95 = neg i32 %75;
    ubr ^b26;
  ^b26:
    i32 %96 = phi [^b24, i32 %75] [^if.then2, i32 %95];
    i32 %97 = call () -> i32 @getch();
    ubr ^while.header10;
  ^if.then3:
    i32 %98 = neg i32 %78;
    ubr ^b27;
  ^b27:
    i32 %99 = phi [^b25, i32 %78] [^if.then3, i32 %98];
    i32 %100 = call (i32) -> i32 @find(i32 %99);
    i32 %101 = call () -> i32 @getch();
    ubr ^while.header11;
  ^while.header10:
    i32 %102 = phi [^b26, i32 0] [^while.body11, i32 %114];
    i32 %103 = phi [^b26, i32 %97] [^while.body11, i32 %112];
    i1 %104 = scmp lt i32 %103, i32 48;
    cbr i1 %104(prob = 0.5), ^b29, ^b28;
  ^while.header11:
    i32 %105 = phi [^b27, i32 0] [^while.body12, i32 %117];
    i32 %106 = phi [^b27, i32 %101] [^while.body12, i32 %115];
    i1 %107 = scmp lt i32 %106, i32 48;
    cbr i1 %107(prob = 0.5), ^b31, ^b30;
  ^b28:
    i1 %108 = scmp gt i32 %103, i32 57;
    ubr ^b29;
  ^b29:
    i1 %109 = phi [^while.header10, i1 true] [^b28, i1 %108];
    cbr i1 %109(prob = 0.97), ^while.body11, ^while.header12;
  ^b30:
    i1 %110 = scmp gt i32 %106, i32 57;
    ubr ^b31;
  ^b31:
    i1 %111 = phi [^while.header11, i1 true] [^b30, i1 %110];
    cbr i1 %111(prob = 0.97), ^while.body12, ^while.header13;
  ^while.body11:
    i32 %112 = call () -> i32 @getch();
    i1 %113 = scmp eq i32 %103, i32 45;
    i32 %114 = select i1 %113 ? i32 1 : i32 %102;
    ubr ^while.header10;
  ^while.body12:
    i32 %115 = call () -> i32 @getch();
    i1 %116 = scmp eq i32 %106, i32 45;
    i32 %117 = select i1 %116 ? i32 1 : i32 %105;
    ubr ^while.header11;
  ^while.header12:
    i32 %118 = phi [^b29, i32 0] [^while.body13, i32 %131];
    i32 %119 = phi [^b29, i32 %103] [^while.body13, i32 %128];
    i1 %120 = scmp gt i32 %119, i32 47;
    cbr i1 %120(prob = 0.5), ^b32, ^b34;
  ^while.header13:
    i32 %121 = phi [^b31, i32 0] [^while.body14, i32 %135];
    i32 %122 = phi [^b31, i32 %106] [^while.body14, i32 %132];
    i1 %123 = scmp gt i32 %122, i32 47;
    cbr i1 %123(prob = 0.5), ^b33, ^b35;
  ^b32:
    i1 %124 = scmp le i32 %119, i32 57;
    ubr ^b34;
  ^b33:
    i1 %125 = scmp le i32 %122, i32 57;
    ubr ^b35;
  ^b34:
    i1 %126 = phi [^while.header12, i1 false] [^b32, i1 %124];
    cbr i1 %126(prob = 0.97), ^while.body13, ^b36;
  ^b35:
    i1 %127 = phi [^while.header13, i1 false] [^b33, i1 %125];
    cbr i1 %127(prob = 0.97), ^while.body14, ^b37;
  ^while.body13:
    i32 %128 = call () -> i32 @getch();
    i32 %129 = mul i32 %118, i32 10;
    i32 %130 = add i32 %119, i32 -48;
    i32 %131 = add i32 %130, i32 %129;
    ubr ^while.header12;
  ^while.body14:
    i32 %132 = call () -> i32 @getch();
    i32 %133 = mul i32 %121, i32 10;
    i32 %134 = add i32 %122, i32 -48;
    i32 %135 = add i32 %134, i32 %133;
    ubr ^while.header13;
  ^b36:
    i1 %136 = scmp neq i32 %102, i32 0;
    cbr i1 %136(prob = 0.5), ^if.then4, ^b38;
  ^b37:
    i1 %137 = scmp neq i32 %105, i32 0;
    cbr i1 %137(prob = 0.5), ^if.then5, ^b39;
  ^if.then4:
    i32 %138 = neg i32 %118;
    ubr ^b38;
  ^b38:
    i32 %139 = phi [^b36, i32 %118] [^if.then4, i32 %138];
    i32 %140 = call (i32) -> i32 @find(i32 %96);
    i32 %141 = call (i32) -> i32 @find(i32 %139);
    i1 %142 = scmp eq i32 %140, i32 %141;
    i32 %143 = zext i1 %142 to i32;
    call (i32) -> void @putint(i32 %143);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
  ^if.then5:
    i32 %144 = neg i32 %121;
    ubr ^b39;
  ^b39:
    i32 %145 = phi [^b37, i32 %121] [^if.then5, i32 %144];
    i32 %146 = call (i32) -> i32 @find(i32 %145);
    i32* %147 = getelementptr &([100005 * i32]* %42)[i64 0][i32 %100];
    store i32* %147 with i32 %146;
    ubr ^b40;
  ^b40:
    i32 %148 = add i32 %48, i32 -1;
    ubr ^while.header4;
}
