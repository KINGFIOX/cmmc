internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x, i32* %0, i32* %1) -> i32 {
^entry:
    i32* %2 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 %x;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 %x;
^if.else:
    i32 %5 = call (i32, i32*, i32*) -> i32 @find(i32 %3, i32* %0, i32* %1);
    store i32* %2 with i32 %5;
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %14] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %15] [^entry, i32 %0];
    i32 %4 = phi [^entry, i32 %0] [^b2, i32 %15];
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %7 = phi [^b, i1 %6] [^while.header, i1 true];
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %8 = scmp eq i32 %3, i32 45;
    cbr i1 %8(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %9 = phi [^b1, i32 %1] [^while.body1, i32 %9];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %20];
    i32 %11 = phi [^b1, i32 %3] [^while.body1, i32 %21];
    i32 %12 = phi [^b1, i32 %3] [^while.body1, i32 %21];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %14 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %15 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %16 = scmp le i32 %11, i32 57;
    ubr ^b4;
^b4:
    i1 %17 = phi [^while.header1, i1 false] [^b3, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %18 = mul i32 %10, i32 10;
    i32 %19 = add i32 %11, i32 -48;
    i32 %20 = add i32 %19, i32 %18;
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %22 = scmp neq i32 %9, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %23 = neg i32 %10;
    ubr ^entry1;
^entry1:
    i32 %24 = phi [^b5, i32 %10] [^if.then1, i32 %23];
    store i32* %n with i32 %24;
    i32 %25 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %26 = phi [^b8, i32 %26] [^entry1, i32 %24];
    i32 %27 = phi [^b8, i32 %41] [^entry1, i32 0];
    i32 %28 = phi [^b8, i32 %28] [^entry1, i32 0];
    i32 %29 = phi [^b8, i32 %42] [^entry1, i32 %25];
    i32 %30 = phi [^entry1, i32 %25] [^b8, i32 %42];
    i1 %31 = scmp lt i32 %30, i32 48;
    cbr i1 %31(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %32 = scmp gt i32 %29, i32 57;
    ubr ^b7;
^b7:
    i1 %33 = phi [^b6, i1 %32] [^while.header2, i1 true];
    cbr i1 %33(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %34 = scmp eq i32 %29, i32 45;
    cbr i1 %34(prob = 0.5), ^if.then2, ^b8;
^while.header3:
    i32 %35 = phi [^b7, i32 %26] [^while.body3, i32 %35];
    i32 %36 = phi [^b7, i32 %27] [^while.body3, i32 %36];
    i32 %37 = phi [^b7, i32 %28] [^while.body3, i32 %47];
    i32 %38 = phi [^b7, i32 %29] [^while.body3, i32 %48];
    i32 %39 = phi [^b7, i32 %29] [^while.body3, i32 %48];
    i1 %40 = scmp gt i32 %39, i32 47;
    cbr i1 %40(prob = 0.5), ^b9, ^b10;
^if.then2:
    ubr ^b8;
^b8:
    i32 %41 = phi [^if.then2, i32 1] [^while.body2, i32 %27];
    i32 %42 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %43 = scmp le i32 %38, i32 57;
    ubr ^b10;
^b10:
    i1 %44 = phi [^b9, i1 %43] [^while.header3, i1 false];
    cbr i1 %44(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %45 = mul i32 %37, i32 10;
    i32 %46 = add i32 %45, i32 -48;
    i32 %47 = add i32 %46, i32 %38;
    i32 %48 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %49 = scmp neq i32 %36, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then3, ^entry2;
^if.then3:
    i32 %50 = neg i32 %37;
    ubr ^entry2;
^entry2:
    i32 %51 = phi [^b11, i32 %37] [^if.then3, i32 %50];
    store i32* %m with i32 %51;
    ubr ^while.header4;
^while.header4:
    i32 %52 = phi [^while.body4, i32 %52] [^entry2, i32 %35];
    i32 %53 = phi [^while.body4, i32 %53] [^entry2, i32 %51];
    i32 %54 = phi [^while.body4, i32 %58] [^entry2, i32 1];
    i32 %55 = phi [^entry2, i32 1] [^while.body4, i32 %58];
    i1 %56 = scmp le i32 %55, i32 %52;
    cbr i1 %56(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %57 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %54];
    store i32* %57 with i32 %54;
    i32 %58 = add i32 %54, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %59 = phi [^while.header4, i32 %53] [^b40, i32 %178];
    i1 %60 = scmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %61 = call () -> i32 @getch();
    i1 %62 = scmp neq i32 %61, i32 81;
    cbr i1 %62(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %63 = scmp neq i32 %61, i32 85;
    ubr ^b14;
^b14:
    i1 %64 = phi [^while.body5, i1 false] [^b13, i1 %63];
    cbr i1 %64(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %65 = scmp eq i32 %61, i32 81;
    cbr i1 %65(prob = 0.5), ^entry3, ^entry4;
^entry3:
    i32 %66 = call () -> i32 @getch();
    ubr ^while.header6;
^entry4:
    i32 %67 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header6:
    i32 %68 = phi [^b20, i32 %94] [^entry3, i32 0];
    i32 %69 = phi [^b20, i32 %69] [^entry3, i32 0];
    i32 %70 = phi [^b20, i32 %95] [^entry3, i32 %66];
    i32 %71 = phi [^b20, i32 %95] [^entry3, i32 %66];
    i1 %72 = scmp lt i32 %71, i32 48;
    cbr i1 %72(prob = 0.5), ^b17, ^b16;
^while.header7:
    i32 %73 = phi [^b22, i32 %97] [^entry4, i32 0];
    i32 %74 = phi [^b22, i32 %74] [^entry4, i32 0];
    i32 %75 = phi [^b22, i32 %98] [^entry4, i32 %67];
    i32 %76 = phi [^entry4, i32 %67] [^b22, i32 %98];
    i1 %77 = scmp lt i32 %76, i32 48;
    cbr i1 %77(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %78 = scmp gt i32 %70, i32 57;
    ubr ^b17;
^b17:
    i1 %79 = phi [^b16, i1 %78] [^while.header6, i1 true];
    cbr i1 %79(prob = 0.97), ^while.body6, ^while.header8;
^b18:
    i1 %80 = scmp gt i32 %75, i32 57;
    ubr ^b19;
^b19:
    i1 %81 = phi [^b18, i1 %80] [^while.header7, i1 true];
    cbr i1 %81(prob = 0.97), ^while.body7, ^while.header9;
^while.body6:
    i1 %82 = scmp eq i32 %70, i32 45;
    cbr i1 %82(prob = 0.5), ^if.then4, ^b20;
^while.body7:
    i1 %83 = scmp eq i32 %75, i32 45;
    cbr i1 %83(prob = 0.5), ^if.then5, ^b22;
^while.header8:
    i32 %84 = phi [^b17, i32 %68] [^while.body8, i32 %84];
    i32 %85 = phi [^b17, i32 %69] [^while.body8, i32 %104];
    i32 %86 = phi [^b17, i32 %70] [^while.body8, i32 %105];
    i32 %87 = phi [^b17, i32 %70] [^while.body8, i32 %105];
    i1 %88 = scmp gt i32 %87, i32 47;
    cbr i1 %88(prob = 0.5), ^b21, ^b24;
^while.header9:
    i32 %89 = phi [^b19, i32 %73] [^while.body9, i32 %89];
    i32 %90 = phi [^b19, i32 %74] [^while.body9, i32 %108];
    i32 %91 = phi [^b19, i32 %75] [^while.body9, i32 %109];
    i32 %92 = phi [^b19, i32 %75] [^while.body9, i32 %109];
    i1 %93 = scmp gt i32 %92, i32 47;
    cbr i1 %93(prob = 0.5), ^b23, ^b25;
^if.then4:
    ubr ^b20;
^b20:
    i32 %94 = phi [^if.then4, i32 1] [^while.body6, i32 %68];
    i32 %95 = call () -> i32 @getch();
    ubr ^while.header6;
^if.then5:
    ubr ^b22;
^b21:
    i1 %96 = scmp le i32 %86, i32 57;
    ubr ^b24;
^b22:
    i32 %97 = phi [^if.then5, i32 1] [^while.body7, i32 %73];
    i32 %98 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i1 %99 = scmp le i32 %91, i32 57;
    ubr ^b25;
^b24:
    i1 %100 = phi [^while.header8, i1 false] [^b21, i1 %96];
    cbr i1 %100(prob = 0.97), ^while.body8, ^b26;
^b25:
    i1 %101 = phi [^b23, i1 %99] [^while.header9, i1 false];
    cbr i1 %101(prob = 0.97), ^while.body9, ^b27;
^while.body8:
    i32 %102 = mul i32 %85, i32 10;
    i32 %103 = add i32 %102, i32 -48;
    i32 %104 = add i32 %103, i32 %86;
    i32 %105 = call () -> i32 @getch();
    ubr ^while.header8;
^while.body9:
    i32 %106 = mul i32 %90, i32 10;
    i32 %107 = add i32 %106, i32 -48;
    i32 %108 = add i32 %107, i32 %91;
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header9;
^b26:
    i1 %110 = scmp neq i32 %84, i32 0;
    cbr i1 %110(prob = 0.5), ^if.then6, ^if.then8;
^b27:
    i1 %111 = scmp neq i32 %89, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then7, ^if.else;
^if.then6:
    i32 %112 = neg i32 %85;
    ubr ^if.then8;
^if.then7:
    i32 %113 = neg i32 %90;
    ubr ^if.else;
^if.then8:
    i32 %114 = phi [^b26, i32 %85] [^if.then6, i32 %112];
    i32 %115 = call () -> i32 @getch();
    ubr ^while.header10;
^if.else:
    i32 %116 = phi [^b27, i32 %90] [^if.then7, i32 %113];
    i32 %117 = call (i32, i32*, i32*) -> i32 @find(i32 %116, i32* %n, i32* %m);
    i32 %118 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header10:
    i32 %119 = phi [^b32, i32 %147] [^if.then8, i32 0];
    i32 %120 = phi [^b32, i32 %120] [^if.then8, i32 0];
    i32 %121 = phi [^b32, i32 %148] [^if.then8, i32 %115];
    i32 %122 = phi [^if.then8, i32 %115] [^b32, i32 %148];
    i1 %123 = scmp lt i32 %122, i32 48;
    cbr i1 %123(prob = 0.5), ^b29, ^b28;
^while.header11:
    i32 %124 = phi [^b34, i32 %124] [^if.else, i32 %117];
    i32 %125 = phi [^b34, i32 %150] [^if.else, i32 0];
    i32 %126 = phi [^b34, i32 %126] [^if.else, i32 0];
    i32 %127 = phi [^b34, i32 %151] [^if.else, i32 %118];
    i32 %128 = phi [^if.else, i32 %118] [^b34, i32 %151];
    i1 %129 = scmp lt i32 %128, i32 48;
    cbr i1 %129(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %130 = scmp gt i32 %121, i32 57;
    ubr ^b29;
^b29:
    i1 %131 = phi [^b28, i1 %130] [^while.header10, i1 true];
    cbr i1 %131(prob = 0.97), ^while.body10, ^while.header12;
^b30:
    i1 %132 = scmp gt i32 %127, i32 57;
    ubr ^b31;
^b31:
    i1 %133 = phi [^b30, i1 %132] [^while.header11, i1 true];
    cbr i1 %133(prob = 0.97), ^while.body11, ^while.header13;
^while.body10:
    i1 %134 = scmp eq i32 %121, i32 45;
    cbr i1 %134(prob = 0.5), ^if.then9, ^b32;
^while.body11:
    i1 %135 = scmp eq i32 %127, i32 45;
    cbr i1 %135(prob = 0.5), ^if.then10, ^b34;
^while.header12:
    i32 %136 = phi [^b29, i32 %119] [^while.body12, i32 %136];
    i32 %137 = phi [^b29, i32 %120] [^while.body12, i32 %157];
    i32 %138 = phi [^b29, i32 %121] [^while.body12, i32 %158];
    i32 %139 = phi [^b29, i32 %121] [^while.body12, i32 %158];
    i1 %140 = scmp gt i32 %139, i32 47;
    cbr i1 %140(prob = 0.5), ^b33, ^b36;
^while.header13:
    i32 %141 = phi [^b31, i32 %124] [^while.body13, i32 %141];
    i32 %142 = phi [^b31, i32 %125] [^while.body13, i32 %142];
    i32 %143 = phi [^b31, i32 %126] [^while.body13, i32 %161];
    i32 %144 = phi [^b31, i32 %127] [^while.body13, i32 %162];
    i32 %145 = phi [^b31, i32 %127] [^while.body13, i32 %162];
    i1 %146 = scmp gt i32 %145, i32 47;
    cbr i1 %146(prob = 0.5), ^b35, ^b37;
^if.then9:
    ubr ^b32;
^b32:
    i32 %147 = phi [^if.then9, i32 1] [^while.body10, i32 %119];
    i32 %148 = call () -> i32 @getch();
    ubr ^while.header10;
^if.then10:
    ubr ^b34;
^b33:
    i1 %149 = scmp le i32 %138, i32 57;
    ubr ^b36;
^b34:
    i32 %150 = phi [^if.then10, i32 1] [^while.body11, i32 %125];
    i32 %151 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i1 %152 = scmp le i32 %144, i32 57;
    ubr ^b37;
^b36:
    i1 %153 = phi [^b33, i1 %149] [^while.header12, i1 false];
    cbr i1 %153(prob = 0.97), ^while.body12, ^b38;
^b37:
    i1 %154 = phi [^b35, i1 %152] [^while.header13, i1 false];
    cbr i1 %154(prob = 0.97), ^while.body13, ^b39;
^while.body12:
    i32 %155 = mul i32 %137, i32 10;
    i32 %156 = add i32 %155, i32 -48;
    i32 %157 = add i32 %156, i32 %138;
    i32 %158 = call () -> i32 @getch();
    ubr ^while.header12;
^while.body13:
    i32 %159 = mul i32 %143, i32 10;
    i32 %160 = add i32 %159, i32 -48;
    i32 %161 = add i32 %160, i32 %144;
    i32 %162 = call () -> i32 @getch();
    ubr ^while.header13;
^b38:
    i1 %163 = scmp neq i32 %136, i32 0;
    cbr i1 %163(prob = 0.5), ^if.then11, ^if.then13;
^b39:
    i1 %164 = scmp neq i32 %142, i32 0;
    cbr i1 %164(prob = 0.5), ^if.then12, ^if.else1;
^if.then11:
    i32 %165 = neg i32 %137;
    ubr ^if.then13;
^if.then12:
    i32 %166 = neg i32 %143;
    ubr ^if.else1;
^if.else1:
    i32 %167 = phi [^b39, i32 %143] [^if.then12, i32 %166];
    i32 %168 = call (i32, i32*, i32*) -> i32 @find(i32 %167, i32* %n, i32* %m);
    i32 %169 = load i32* %m;
    i32* %170 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %141];
    store i32* %170 with i32 %168;
    ubr ^b40;
^if.then13:
    i32 %171 = phi [^b38, i32 %137] [^if.then11, i32 %165];
    i32 %172 = call (i32, i32*, i32*) -> i32 @find(i32 %114, i32* %n, i32* %m);
    i32 %173 = call (i32, i32*, i32*) -> i32 @find(i32 %171, i32* %n, i32* %m);
    i32 %174 = load i32* %m;
    i1 %175 = scmp eq i32 %172, i32 %173;
    cbr i1 %175(prob = 0.5), ^if.then14, ^b41;
^if.then14:
    i32 %176 = phi [^if.then13, i32 1] [^b41, i32 0];
    call (i32) -> void @putint(i32 %176);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^b40:
    i32 %177 = phi [^if.then14, i32 %174] [^if.else1, i32 %169];
    i32 %178 = add i32 %177, i32 -1;
    store i32* %m with i32 %178;
    ubr ^while.header5;
^b41:
    ubr ^if.then14;
}
