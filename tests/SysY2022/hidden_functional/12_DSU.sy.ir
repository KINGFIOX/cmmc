internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32* %4 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else1, ^if.else2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^if.else1, i32 %8];
    ret i32 %7;
  ^if.else1:
    i32 %8 = phi [^if.else, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^if.else2:
    i32* %9 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^if.else3;
  ^b1:
    i32 %12 = phi [^if.else2, i32 %5] [^if.else4, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else1;
  ^if.else3:
    i32* %13 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else4, ^if.else5;
  ^if.else4:
    i32 %16 = phi [^if.else3, i32 %10] [^b2, i32 %20];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else5:
    i32* %17 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %14, i32 %18;
    cbr i1 %19(prob = 0.5), ^b2, ^if.else6;
  ^b2:
    i32 %20 = phi [^if.else5, i32 %14] [^if.else7, i32 %24];
    store i32* %13 with i32 %20;
    ubr ^if.else4;
  ^if.else6:
    i32* %21 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %18, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.else7, ^if.else8;
  ^if.else7:
    i32 %24 = phi [^if.else6, i32 %18] [^b3, i32 %28];
    store i32* %17 with i32 %24;
    ubr ^b2;
  ^if.else8:
    i32* %25 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %22, i32 %26;
    cbr i1 %27(prob = 0.5), ^b3, ^if.else9;
  ^b3:
    i32 %28 = phi [^if.else8, i32 %22] [^if.else10, i32 %32];
    store i32* %21 with i32 %28;
    ubr ^if.else7;
  ^if.else9:
    i32* %29 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %26];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %26, i32 %30;
    cbr i1 %31(prob = 0.5), ^if.else10, ^if.else11;
  ^if.else10:
    i32 %32 = phi [^if.else9, i32 %26] [^if.else11, i32 %33];
    store i32* %25 with i32 %32;
    ubr ^b3;
  ^if.else11:
    i32 %33 = call (i32) -> i32 @find(i32 %30);
    store i32* %29 with i32 %33;
    ubr ^if.else10;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %24 = call () -> i32 @getch();
    i32 %25 = add i32 %24, i32 -48;
    i1 %26 = icmp ugt i32 %25, i32 9;
    i1 %27 = icmp neq i32 %12, i32 0;
    i32 %28 = neg i32 %23;
    i32 %29 = select i1 %27 ? i32 %28 : i32 %23;
    i32 %30 = add i32 %29, i32 -2;
    i32 %31 = add i32 %29, i32 -17;
    cbr i1 %26(prob = 0.984615), ^while.body2, ^39;
  ^while.body2:
    i32 %32 = phi [^b, i32 %24] [^while.body2, i32 %34];
    i32 %33 = phi [^b, i32 0] [^while.body2, i32 %38];
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = icmp ugt i32 %35, i32 9;
    i1 %37 = icmp eq i32 %32, i32 45;
    i32 %38 = select i1 %37 ? i32 1 : i32 %33;
    cbr i1 %36(prob = 0.984615), ^while.body2, ^39;
  ^39:
    i32 %40 = phi [^b, i32 %24] [^while.body2, i32 %34];
    i32 %41 = phi [^b, i32 0] [^while.body2, i32 %38];
    i32 %42 = add i32 %40, i32 -48;
    i1 %43 = icmp ult i32 %42, i32 10;
    cbr i1 %43(prob = 0.984615), ^while.body3, ^b1;
  ^while.body3:
    i32 %44 = phi [^39, i32 %40] [^while.body3, i32 %46];
    i32 %45 = phi [^39, i32 0] [^while.body3, i32 %51];
    i32 %46 = call () -> i32 @getch();
    i32 %47 = add i32 %46, i32 -48;
    i1 %48 = icmp ult i32 %47, i32 10;
    i32 %49 = mul i32 %45, i32 10;
    i32 %50 = add i32 %49, i32 -48;
    i32 %51 = add i32 %44, i32 %50;
    cbr i1 %48(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %52 = phi [^39, i32 0] [^while.body3, i32 %51];
    i1 %53 = icmp neq i32 %41, i32 0;
    i32 %54 = neg i32 %52;
    i32 %55 = select i1 %53 ? i32 %54 : i32 %52;
    i1 %56 = icmp sgt i32 %29, i32 0;
    [100005 * i32]* %57 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    cbr i1 %56(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    i32 %58 = add i32 %29, i32 1;
    i1 %59 = icmp sgt i32 %58, i32 4;
    cbr i1 %59(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b2:
    i1 %60 = icmp neq i32 %55, i32 0;
    cbr i1 %60(prob = 0.984615), ^while.body4, ^b3;
  ^super.header1:
    i1 %61 = icmp sgt i32 %30, i32 16;
    cbr i1 %61(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^scalar.header:
    i32 %62 = phi [^super.header, i32 1] [^scalar.header1, i32 %104] [^while.body7, i32 %119];
    i1 %63 = icmp sgt i32 %58, i32 %62;
    cbr i1 %63(prob = 0.75), ^while.body6, ^b2;
  ^while.body4:
    i32 %64 = phi [^b2, i32 %55] [^while.body4, i32 %64] [^b9, i32 %236];
    i32 %65 = call () -> i32 @getch();
    i1 %66 = icmp neq i32 %65, i32 81;
    i1 %67 = icmp neq i32 %65, i32 85;
    i1 %68 = and i1 %66, i1 %67;
    cbr i1 %68(prob = 0.984615), ^while.body4, ^b4;
  ^b3:
    ret i32 0;
  ^while.body5:
    i32 %69 = phi [^super.header1, i32 1] [^while.body5, i32 %101];
    i32* %70 = getelementptr &([100005 * i32]* %57)[i64 0][i32 %69];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &(i32* %70)[i64 1];
    i32 %72 = add i32 %69, i32 1;
    store i32* %71 with i32 %72;
    i32* %73 = getelementptr &(i32* %70)[i64 2];
    i32 %74 = add i32 %69, i32 2;
    store i32* %73 with i32 %74;
    i32* %75 = getelementptr &(i32* %70)[i64 3];
    i32 %76 = add i32 %69, i32 3;
    store i32* %75 with i32 %76;
    i32* %77 = getelementptr &(i32* %70)[i64 4];
    i32 %78 = add i32 %69, i32 4;
    store i32* %77 with i32 %78;
    i32* %79 = getelementptr &(i32* %70)[i64 5];
    i32 %80 = add i32 %69, i32 5;
    store i32* %79 with i32 %80;
    i32* %81 = getelementptr &(i32* %70)[i64 6];
    i32 %82 = add i32 %69, i32 6;
    store i32* %81 with i32 %82;
    i32* %83 = getelementptr &(i32* %70)[i64 7];
    i32 %84 = add i32 %69, i32 7;
    store i32* %83 with i32 %84;
    i32* %85 = getelementptr &(i32* %70)[i64 8];
    i32 %86 = add i32 %69, i32 8;
    store i32* %85 with i32 %86;
    i32* %87 = getelementptr &(i32* %70)[i64 9];
    i32 %88 = add i32 %69, i32 9;
    store i32* %87 with i32 %88;
    i32* %89 = getelementptr &(i32* %70)[i64 10];
    i32 %90 = add i32 %69, i32 10;
    store i32* %89 with i32 %90;
    i32* %91 = getelementptr &(i32* %70)[i64 11];
    i32 %92 = add i32 %69, i32 11;
    store i32* %91 with i32 %92;
    i32* %93 = getelementptr &(i32* %70)[i64 12];
    i32 %94 = add i32 %69, i32 12;
    store i32* %93 with i32 %94;
    i32* %95 = getelementptr &(i32* %70)[i64 13];
    i32 %96 = add i32 %69, i32 13;
    store i32* %95 with i32 %96;
    i32* %97 = getelementptr &(i32* %70)[i64 14];
    i32 %98 = add i32 %69, i32 14;
    store i32* %97 with i32 %98;
    i32* %99 = getelementptr &(i32* %70)[i64 15];
    i32 %100 = add i32 %69, i32 15;
    store i32* %99 with i32 %100;
    i32 %101 = add i32 %69, i32 16;
    i1 %102 = icmp sgt i32 %31, i32 %101;
    cbr i1 %102(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^scalar.header1:
    i32 %103 = phi [^super.header1, i32 1] [^while.body5, i32 %101];
    i32 %104 = phi [^super.header1, i32 undef] [^while.body5, i32 %101];
    i1 %105 = icmp sgt i32 %30, i32 %103;
    cbr i1 %105(prob = 0.75), ^while.body7, ^scalar.header;
  ^while.body6 {scalar}:
    i32 %106 = phi [^scalar.header, i32 %62] [^while.body6, i32 %108];
    i32* %107 = getelementptr &([100005 * i32]* %57)[i64 0][i32 %106];
    store i32* %107 with i32 %106;
    i32 %108 = add i32 %106, i32 1;
    i1 %109 = icmp sgt i32 %58, i32 %108;
    cbr i1 %109(prob = 0.75), ^while.body6, ^b2;
  ^b4:
    i1 %110 = icmp eq i32 %65, i32 81;
    cbr i1 %110(prob = 0.5), ^if.then, ^if.else;
  ^while.body7 {scalar}:
    i32 %111 = phi [^scalar.header1, i32 %103] [^while.body7, i32 %119];
    i32* %112 = getelementptr &([100005 * i32]* %57)[i64 0][i32 %111];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %112)[i64 1];
    i32 %114 = add i32 %111, i32 1;
    store i32* %113 with i32 %114;
    i32* %115 = getelementptr &(i32* %112)[i64 2];
    i32 %116 = add i32 %111, i32 2;
    store i32* %115 with i32 %116;
    i32* %117 = getelementptr &(i32* %112)[i64 3];
    i32 %118 = add i32 %111, i32 3;
    store i32* %117 with i32 %118;
    i32 %119 = add i32 %111, i32 4;
    i1 %120 = icmp sgt i32 %30, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body7, ^scalar.header;
  ^if.then:
    i32 %121 = call () -> i32 @getch();
    i32 %122 = add i32 %121, i32 -48;
    i1 %123 = icmp ugt i32 %122, i32 9;
    cbr i1 %123(prob = 0.984615), ^while.body8, ^134;
  ^if.else:
    i32 %124 = call () -> i32 @getch();
    i32 %125 = add i32 %124, i32 -48;
    i1 %126 = icmp ugt i32 %125, i32 9;
    cbr i1 %126(prob = 0.984615), ^while.body9, ^146;
  ^while.body8:
    i32 %127 = phi [^if.then, i32 %121] [^while.body8, i32 %129];
    i32 %128 = phi [^if.then, i32 0] [^while.body8, i32 %133];
    i32 %129 = call () -> i32 @getch();
    i32 %130 = add i32 %129, i32 -48;
    i1 %131 = icmp ugt i32 %130, i32 9;
    i1 %132 = icmp eq i32 %127, i32 45;
    i32 %133 = select i1 %132 ? i32 1 : i32 %128;
    cbr i1 %131(prob = 0.984615), ^while.body8, ^134;
  ^134:
    i32 %135 = phi [^if.then, i32 %121] [^while.body8, i32 %129];
    i32 %136 = phi [^if.then, i32 0] [^while.body8, i32 %133];
    i32 %137 = add i32 %135, i32 -48;
    i1 %138 = icmp ult i32 %137, i32 10;
    cbr i1 %138(prob = 0.984615), ^while.body10, ^b5;
  ^while.body9:
    i32 %139 = phi [^if.else, i32 %124] [^while.body9, i32 %141];
    i32 %140 = phi [^if.else, i32 0] [^while.body9, i32 %145];
    i32 %141 = call () -> i32 @getch();
    i32 %142 = add i32 %141, i32 -48;
    i1 %143 = icmp ugt i32 %142, i32 9;
    i1 %144 = icmp eq i32 %139, i32 45;
    i32 %145 = select i1 %144 ? i32 1 : i32 %140;
    cbr i1 %143(prob = 0.984615), ^while.body9, ^146;
  ^146:
    i32 %147 = phi [^if.else, i32 %124] [^while.body9, i32 %141];
    i32 %148 = phi [^if.else, i32 0] [^while.body9, i32 %145];
    i32 %149 = add i32 %147, i32 -48;
    i1 %150 = icmp ult i32 %149, i32 10;
    cbr i1 %150(prob = 0.984615), ^while.body11, ^b6;
  ^while.body10:
    i32 %151 = phi [^134, i32 %135] [^while.body10, i32 %153];
    i32 %152 = phi [^134, i32 0] [^while.body10, i32 %158];
    i32 %153 = call () -> i32 @getch();
    i32 %154 = add i32 %153, i32 -48;
    i1 %155 = icmp ult i32 %154, i32 10;
    i32 %156 = mul i32 %152, i32 10;
    i32 %157 = add i32 %156, i32 -48;
    i32 %158 = add i32 %151, i32 %157;
    cbr i1 %155(prob = 0.984615), ^while.body10, ^b5;
  ^b5:
    i32 %159 = phi [^134, i32 0] [^while.body10, i32 %158];
    i32 %160 = call () -> i32 @getch();
    i32 %161 = add i32 %160, i32 -48;
    i1 %162 = icmp ugt i32 %161, i32 9;
    i1 %163 = icmp neq i32 %136, i32 0;
    i32 %164 = neg i32 %159;
    i32 %165 = select i1 %163 ? i32 %164 : i32 %159;
    cbr i1 %162(prob = 0.984615), ^while.body12, ^189;
  ^while.body11:
    i32 %166 = phi [^146, i32 %147] [^while.body11, i32 %168];
    i32 %167 = phi [^146, i32 0] [^while.body11, i32 %173];
    i32 %168 = call () -> i32 @getch();
    i32 %169 = add i32 %168, i32 -48;
    i1 %170 = icmp ult i32 %169, i32 10;
    i32 %171 = mul i32 %167, i32 10;
    i32 %172 = add i32 %171, i32 -48;
    i32 %173 = add i32 %166, i32 %172;
    cbr i1 %170(prob = 0.984615), ^while.body11, ^b6;
  ^b6:
    i32 %174 = phi [^146, i32 0] [^while.body11, i32 %173];
    i1 %175 = icmp neq i32 %148, i32 0;
    i32 %176 = neg i32 %174;
    i32 %177 = select i1 %175 ? i32 %176 : i32 %174;
    i32 %178 = call (i32) -> i32 @find(i32 %177);
    i32 %179 = call () -> i32 @getch();
    i32 %180 = add i32 %179, i32 -48;
    i1 %181 = icmp ugt i32 %180, i32 9;
    cbr i1 %181(prob = 0.984615), ^while.body13, ^201;
  ^while.body12:
    i32 %182 = phi [^b5, i32 %160] [^while.body12, i32 %184];
    i32 %183 = phi [^b5, i32 0] [^while.body12, i32 %188];
    i32 %184 = call () -> i32 @getch();
    i32 %185 = add i32 %184, i32 -48;
    i1 %186 = icmp ugt i32 %185, i32 9;
    i1 %187 = icmp eq i32 %182, i32 45;
    i32 %188 = select i1 %187 ? i32 1 : i32 %183;
    cbr i1 %186(prob = 0.984615), ^while.body12, ^189;
  ^189:
    i32 %190 = phi [^b5, i32 %160] [^while.body12, i32 %184];
    i32 %191 = phi [^b5, i32 0] [^while.body12, i32 %188];
    i32 %192 = add i32 %190, i32 -48;
    i1 %193 = icmp ult i32 %192, i32 10;
    cbr i1 %193(prob = 0.984615), ^while.body14, ^b7;
  ^while.body13:
    i32 %194 = phi [^b6, i32 %179] [^while.body13, i32 %196];
    i32 %195 = phi [^b6, i32 0] [^while.body13, i32 %200];
    i32 %196 = call () -> i32 @getch();
    i32 %197 = add i32 %196, i32 -48;
    i1 %198 = icmp ugt i32 %197, i32 9;
    i1 %199 = icmp eq i32 %194, i32 45;
    i32 %200 = select i1 %199 ? i32 1 : i32 %195;
    cbr i1 %198(prob = 0.984615), ^while.body13, ^201;
  ^201:
    i32 %202 = phi [^b6, i32 %179] [^while.body13, i32 %196];
    i32 %203 = phi [^b6, i32 0] [^while.body13, i32 %200];
    i32 %204 = add i32 %202, i32 -48;
    i1 %205 = icmp ult i32 %204, i32 10;
    cbr i1 %205(prob = 0.984615), ^while.body15, ^b8;
  ^b7:
    i32 %206 = phi [^189, i32 0] [^while.body14, i32 %221];
    i32 %207 = call (i32) -> i32 @find(i32 %165);
    i1 %208 = icmp neq i32 %191, i32 0;
    i32 %209 = neg i32 %206;
    i32 %210 = select i1 %208 ? i32 %209 : i32 %206;
    i32 %211 = call (i32) -> i32 @find(i32 %210);
    i1 %212 = icmp eq i32 %207, i32 %211;
    i32 %213 = zext i1 %212 to i32;
    call (i32) -> void @putint(i32 %213);
    call (i32) -> void @putch(i32 10);
    ubr ^b9;
  ^while.body14:
    i32 %214 = phi [^189, i32 %190] [^while.body14, i32 %216];
    i32 %215 = phi [^189, i32 0] [^while.body14, i32 %221];
    i32 %216 = call () -> i32 @getch();
    i32 %217 = add i32 %216, i32 -48;
    i1 %218 = icmp ult i32 %217, i32 10;
    i32 %219 = mul i32 %215, i32 10;
    i32 %220 = add i32 %219, i32 -48;
    i32 %221 = add i32 %214, i32 %220;
    cbr i1 %218(prob = 0.984615), ^while.body14, ^b7;
  ^b8:
    i32 %222 = phi [^201, i32 0] [^while.body15, i32 %235];
    i1 %223 = icmp neq i32 %203, i32 0;
    i32 %224 = neg i32 %222;
    i32 %225 = select i1 %223 ? i32 %224 : i32 %222;
    i32 %226 = call (i32) -> i32 @find(i32 %225);
    i32* %227 = getelementptr &([100005 * i32]* %57)[i64 0][i32 %178];
    store i32* %227 with i32 %226;
    ubr ^b9;
  ^while.body15:
    i32 %228 = phi [^201, i32 %202] [^while.body15, i32 %230];
    i32 %229 = phi [^201, i32 0] [^while.body15, i32 %235];
    i32 %230 = call () -> i32 @getch();
    i32 %231 = add i32 %230, i32 -48;
    i1 %232 = icmp ult i32 %231, i32 10;
    i32 %233 = mul i32 %229, i32 10;
    i32 %234 = add i32 %233, i32 -48;
    i32 %235 = add i32 %228, i32 %234;
    cbr i1 %232(prob = 0.984615), ^while.body15, ^b8;
  ^b9:
    i32 %236 = add i32 %64, i32 -1;
    i1 %237 = icmp neq i32 %236, i32 0;
    cbr i1 %237(prob = 0.984615), ^while.body4, ^b3;
}
