internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa;
internal func @find(i32 %x, i32* %0, i32* %1) -> i32 {
^entry:
    i32* %2 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 %x;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 %x;
^if.else:
    i32 %5 = call (i32, i32*, i32*) -> i32 @find(i32 %3, i32* %0, i32* %1);
    store i32* %2 with i32 %5;
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %12] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %13] [^entry, i32 %0];
    i1 %4 = scmp lt i32 %3, i32 48;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i1 %5 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %6 = phi [^b, i1 %5] [^while.header, i1 true];
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %7 = scmp eq i32 %3, i32 45;
    cbr i1 %7(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %8 = phi [^b1, i32 %1] [^while.body1, i32 %8];
    i32 %9 = phi [^b1, i32 %2] [^while.body1, i32 %18];
    i32 %10 = phi [^b1, i32 %3] [^while.body1, i32 %19];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %12 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %13 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %14 = scmp le i32 %10, i32 57;
    ubr ^b4;
^b4:
    i1 %15 = phi [^b3, i1 %14] [^while.header1, i1 false];
    cbr i1 %15(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %16 = mul i32 %9, i32 10;
    i32 %17 = add i32 %10, i32 -48;
    i32 %18 = add i32 %17, i32 %16;
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %20 = scmp neq i32 %8, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %21 = neg i32 %9;
    ubr ^entry1;
^entry1:
    i32 %22 = phi [^b5, i32 %9] [^if.then1, i32 %21];
    store i32* %n with i32 %22;
    i32 %23 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %24 = phi [^b8, i32 %24] [^entry1, i32 %22];
    i32 %25 = phi [^b8, i32 %37] [^entry1, i32 0];
    i32 %26 = phi [^b8, i32 %26] [^entry1, i32 0];
    i32 %27 = phi [^b8, i32 %38] [^entry1, i32 %23];
    i1 %28 = scmp lt i32 %27, i32 48;
    cbr i1 %28(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %29 = scmp gt i32 %27, i32 57;
    ubr ^b7;
^b7:
    i1 %30 = phi [^b6, i1 %29] [^while.header2, i1 true];
    cbr i1 %30(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %31 = scmp eq i32 %27, i32 45;
    cbr i1 %31(prob = 0.5), ^if.then2, ^b8;
^while.header3:
    i32 %32 = phi [^b7, i32 %24] [^while.body3, i32 %32];
    i32 %33 = phi [^b7, i32 %25] [^while.body3, i32 %33];
    i32 %34 = phi [^b7, i32 %26] [^while.body3, i32 %43];
    i32 %35 = phi [^b7, i32 %27] [^while.body3, i32 %44];
    i1 %36 = scmp gt i32 %35, i32 47;
    cbr i1 %36(prob = 0.5), ^b9, ^b10;
^if.then2:
    ubr ^b8;
^b8:
    i32 %37 = phi [^if.then2, i32 1] [^while.body2, i32 %25];
    i32 %38 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %39 = scmp le i32 %35, i32 57;
    ubr ^b10;
^b10:
    i1 %40 = phi [^b9, i1 %39] [^while.header3, i1 false];
    cbr i1 %40(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %41 = mul i32 %34, i32 10;
    i32 %42 = add i32 %41, i32 -48;
    i32 %43 = add i32 %42, i32 %35;
    i32 %44 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %45 = scmp neq i32 %33, i32 0;
    cbr i1 %45(prob = 0.5), ^if.then3, ^entry2;
^if.then3:
    i32 %46 = neg i32 %34;
    ubr ^entry2;
^entry2:
    i32 %47 = phi [^b11, i32 %34] [^if.then3, i32 %46];
    store i32* %m with i32 %47;
    ubr ^while.header4;
^while.header4:
    i32 %48 = phi [^while.body4, i32 %48] [^entry2, i32 %32];
    i32 %49 = phi [^while.body4, i32 %49] [^entry2, i32 %47];
    i32 %50 = phi [^while.body4, i32 %53] [^entry2, i32 1];
    i1 %51 = scmp le i32 %50, i32 %48;
    cbr i1 %51(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %52 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %50];
    store i32* %52 with i32 %50;
    i32 %53 = add i32 %50, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %54 = phi [^while.header4, i32 %49] [^b40, i32 %165];
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %56 = call () -> i32 @getch();
    i1 %57 = scmp neq i32 %56, i32 81;
    cbr i1 %57(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %58 = scmp neq i32 %56, i32 85;
    ubr ^b14;
^b14:
    i1 %59 = phi [^while.body5, i1 false] [^b13, i1 %58];
    cbr i1 %59(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %60 = scmp eq i32 %56, i32 81;
    cbr i1 %60(prob = 0.5), ^entry3, ^entry4;
^entry3:
    i32 %61 = call () -> i32 @getch();
    ubr ^while.header6;
^entry4:
    i32 %62 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header6:
    i32 %63 = phi [^b20, i32 %85] [^entry3, i32 0];
    i32 %64 = phi [^b20, i32 %64] [^entry3, i32 0];
    i32 %65 = phi [^b20, i32 %86] [^entry3, i32 %61];
    i1 %66 = scmp lt i32 %65, i32 48;
    cbr i1 %66(prob = 0.5), ^b17, ^b16;
^while.header7:
    i32 %67 = phi [^b22, i32 %88] [^entry4, i32 0];
    i32 %68 = phi [^b22, i32 %68] [^entry4, i32 0];
    i32 %69 = phi [^b22, i32 %89] [^entry4, i32 %62];
    i1 %70 = scmp lt i32 %69, i32 48;
    cbr i1 %70(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %71 = scmp gt i32 %65, i32 57;
    ubr ^b17;
^b17:
    i1 %72 = phi [^b16, i1 %71] [^while.header6, i1 true];
    cbr i1 %72(prob = 0.97), ^while.body6, ^while.header8;
^b18:
    i1 %73 = scmp gt i32 %69, i32 57;
    ubr ^b19;
^b19:
    i1 %74 = phi [^b18, i1 %73] [^while.header7, i1 true];
    cbr i1 %74(prob = 0.97), ^while.body7, ^while.header9;
^while.body6:
    i1 %75 = scmp eq i32 %65, i32 45;
    cbr i1 %75(prob = 0.5), ^if.then4, ^b20;
^while.body7:
    i1 %76 = scmp eq i32 %69, i32 45;
    cbr i1 %76(prob = 0.5), ^if.then5, ^b22;
^while.header8:
    i32 %77 = phi [^b17, i32 %63] [^while.body8, i32 %77];
    i32 %78 = phi [^b17, i32 %64] [^while.body8, i32 %95];
    i32 %79 = phi [^b17, i32 %65] [^while.body8, i32 %96];
    i1 %80 = scmp gt i32 %79, i32 47;
    cbr i1 %80(prob = 0.5), ^b21, ^b24;
^while.header9:
    i32 %81 = phi [^b19, i32 %67] [^while.body9, i32 %81];
    i32 %82 = phi [^b19, i32 %68] [^while.body9, i32 %99];
    i32 %83 = phi [^b19, i32 %69] [^while.body9, i32 %100];
    i1 %84 = scmp gt i32 %83, i32 47;
    cbr i1 %84(prob = 0.5), ^b23, ^b25;
^if.then4:
    ubr ^b20;
^b20:
    i32 %85 = phi [^if.then4, i32 1] [^while.body6, i32 %63];
    i32 %86 = call () -> i32 @getch();
    ubr ^while.header6;
^if.then5:
    ubr ^b22;
^b21:
    i1 %87 = scmp le i32 %79, i32 57;
    ubr ^b24;
^b22:
    i32 %88 = phi [^if.then5, i32 1] [^while.body7, i32 %67];
    i32 %89 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i1 %90 = scmp le i32 %83, i32 57;
    ubr ^b25;
^b24:
    i1 %91 = phi [^b21, i1 %87] [^while.header8, i1 false];
    cbr i1 %91(prob = 0.97), ^while.body8, ^b26;
^b25:
    i1 %92 = phi [^b23, i1 %90] [^while.header9, i1 false];
    cbr i1 %92(prob = 0.97), ^while.body9, ^b27;
^while.body8:
    i32 %93 = mul i32 %78, i32 10;
    i32 %94 = add i32 %93, i32 -48;
    i32 %95 = add i32 %94, i32 %79;
    i32 %96 = call () -> i32 @getch();
    ubr ^while.header8;
^while.body9:
    i32 %97 = mul i32 %82, i32 10;
    i32 %98 = add i32 %97, i32 -48;
    i32 %99 = add i32 %98, i32 %83;
    i32 %100 = call () -> i32 @getch();
    ubr ^while.header9;
^b26:
    i1 %101 = scmp neq i32 %77, i32 0;
    cbr i1 %101(prob = 0.5), ^if.then6, ^if.then8;
^b27:
    i1 %102 = scmp neq i32 %81, i32 0;
    cbr i1 %102(prob = 0.5), ^if.then7, ^if.else;
^if.then6:
    i32 %103 = neg i32 %78;
    ubr ^if.then8;
^if.then7:
    i32 %104 = neg i32 %82;
    ubr ^if.else;
^if.then8:
    i32 %105 = phi [^b26, i32 %78] [^if.then6, i32 %103];
    i32 %106 = call () -> i32 @getch();
    ubr ^while.header10;
^if.else:
    i32 %107 = phi [^b27, i32 %82] [^if.then7, i32 %104];
    i32 %108 = call (i32, i32*, i32*) -> i32 @find(i32 %107, i32* %n, i32* %m);
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header10:
    i32 %110 = phi [^b32, i32 %134] [^if.then8, i32 0];
    i32 %111 = phi [^b32, i32 %111] [^if.then8, i32 0];
    i32 %112 = phi [^b32, i32 %135] [^if.then8, i32 %106];
    i1 %113 = scmp lt i32 %112, i32 48;
    cbr i1 %113(prob = 0.5), ^b29, ^b28;
^while.header11:
    i32 %114 = phi [^b34, i32 %114] [^if.else, i32 %108];
    i32 %115 = phi [^b34, i32 %137] [^if.else, i32 0];
    i32 %116 = phi [^b34, i32 %116] [^if.else, i32 0];
    i32 %117 = phi [^b34, i32 %138] [^if.else, i32 %109];
    i1 %118 = scmp lt i32 %117, i32 48;
    cbr i1 %118(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %119 = scmp gt i32 %112, i32 57;
    ubr ^b29;
^b29:
    i1 %120 = phi [^b28, i1 %119] [^while.header10, i1 true];
    cbr i1 %120(prob = 0.97), ^while.body10, ^while.header12;
^b30:
    i1 %121 = scmp gt i32 %117, i32 57;
    ubr ^b31;
^b31:
    i1 %122 = phi [^b30, i1 %121] [^while.header11, i1 true];
    cbr i1 %122(prob = 0.97), ^while.body11, ^while.header13;
^while.body10:
    i1 %123 = scmp eq i32 %112, i32 45;
    cbr i1 %123(prob = 0.5), ^if.then9, ^b32;
^while.body11:
    i1 %124 = scmp eq i32 %117, i32 45;
    cbr i1 %124(prob = 0.5), ^if.then10, ^b34;
^while.header12:
    i32 %125 = phi [^b29, i32 %110] [^while.body12, i32 %125];
    i32 %126 = phi [^b29, i32 %111] [^while.body12, i32 %144];
    i32 %127 = phi [^b29, i32 %112] [^while.body12, i32 %145];
    i1 %128 = scmp gt i32 %127, i32 47;
    cbr i1 %128(prob = 0.5), ^b33, ^b36;
^while.header13:
    i32 %129 = phi [^b31, i32 %114] [^while.body13, i32 %129];
    i32 %130 = phi [^b31, i32 %115] [^while.body13, i32 %130];
    i32 %131 = phi [^b31, i32 %116] [^while.body13, i32 %148];
    i32 %132 = phi [^b31, i32 %117] [^while.body13, i32 %149];
    i1 %133 = scmp gt i32 %132, i32 47;
    cbr i1 %133(prob = 0.5), ^b35, ^b37;
^if.then9:
    ubr ^b32;
^b32:
    i32 %134 = phi [^if.then9, i32 1] [^while.body10, i32 %110];
    i32 %135 = call () -> i32 @getch();
    ubr ^while.header10;
^if.then10:
    ubr ^b34;
^b33:
    i1 %136 = scmp le i32 %127, i32 57;
    ubr ^b36;
^b34:
    i32 %137 = phi [^if.then10, i32 1] [^while.body11, i32 %115];
    i32 %138 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i1 %139 = scmp le i32 %132, i32 57;
    ubr ^b37;
^b36:
    i1 %140 = phi [^b33, i1 %136] [^while.header12, i1 false];
    cbr i1 %140(prob = 0.97), ^while.body12, ^b38;
^b37:
    i1 %141 = phi [^b35, i1 %139] [^while.header13, i1 false];
    cbr i1 %141(prob = 0.97), ^while.body13, ^b39;
^while.body12:
    i32 %142 = mul i32 %126, i32 10;
    i32 %143 = add i32 %142, i32 -48;
    i32 %144 = add i32 %143, i32 %127;
    i32 %145 = call () -> i32 @getch();
    ubr ^while.header12;
^while.body13:
    i32 %146 = mul i32 %131, i32 10;
    i32 %147 = add i32 %146, i32 -48;
    i32 %148 = add i32 %147, i32 %132;
    i32 %149 = call () -> i32 @getch();
    ubr ^while.header13;
^b38:
    i1 %150 = scmp neq i32 %125, i32 0;
    cbr i1 %150(prob = 0.5), ^if.then11, ^if.then13;
^b39:
    i1 %151 = scmp neq i32 %130, i32 0;
    cbr i1 %151(prob = 0.5), ^if.then12, ^if.else1;
^if.then11:
    i32 %152 = neg i32 %126;
    ubr ^if.then13;
^if.then12:
    i32 %153 = neg i32 %131;
    ubr ^if.else1;
^if.else1:
    i32 %154 = phi [^b39, i32 %131] [^if.then12, i32 %153];
    i32 %155 = call (i32, i32*, i32*) -> i32 @find(i32 %154, i32* %n, i32* %m);
    i32 %156 = load i32* %m;
    i32* %157 = getelementptr &([100005 * i32]* @fa)[i64 0][i32 %129];
    store i32* %157 with i32 %155;
    ubr ^b40;
^if.then13:
    i32 %158 = phi [^b38, i32 %126] [^if.then11, i32 %152];
    i32 %159 = call (i32, i32*, i32*) -> i32 @find(i32 %105, i32* %n, i32* %m);
    i32 %160 = call (i32, i32*, i32*) -> i32 @find(i32 %158, i32* %n, i32* %m);
    i32 %161 = load i32* %m;
    i1 %162 = scmp eq i32 %159, i32 %160;
    cbr i1 %162(prob = 0.5), ^if.then14, ^b41;
^if.then14:
    i32 %163 = phi [^if.then13, i32 1] [^b41, i32 0];
    call (i32) -> void @putint(i32 %163);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^b40:
    i32 %164 = phi [^if.then14, i32 %161] [^if.else1, i32 %156];
    i32 %165 = add i32 %164, i32 -1;
    store i32* %m with i32 %165;
    ubr ^while.header5;
^b41:
    ubr ^if.then14;
}
