internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100005 * i32]* @fa, align 8 { Flexible };
internal func @find(i32 %x) -> i32 {
  ^entry:
    [100005 * i32]* %0 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    i32* %1 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %x];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %x, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %x] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([100005 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @find(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %24 = call () -> i32 @getch();
    i32 %25 = add i32 %24, i32 -48;
    i1 %26 = icmp ugt i32 %25, i32 9;
    i1 %27 = icmp neq i32 %12, i32 0;
    i32 %28 = neg i32 %23;
    i32 %29 = select i1 %27 ? i32 %28 : i32 %23;
    cbr i1 %26(prob = 0.984615), ^while.body2, ^37;
  ^while.body2:
    i32 %30 = phi [^b, i32 %24] [^while.body2, i32 %32];
    i32 %31 = phi [^b, i32 0] [^while.body2, i32 %36];
    i32 %32 = call () -> i32 @getch();
    i32 %33 = add i32 %32, i32 -48;
    i1 %34 = icmp ugt i32 %33, i32 9;
    i1 %35 = icmp eq i32 %30, i32 45;
    i32 %36 = select i1 %35 ? i32 1 : i32 %31;
    cbr i1 %34(prob = 0.984615), ^while.body2, ^37;
  ^37:
    i32 %38 = phi [^b, i32 %24] [^while.body2, i32 %32];
    i32 %39 = phi [^b, i32 0] [^while.body2, i32 %36];
    i32 %40 = add i32 %38, i32 -48;
    i1 %41 = icmp ult i32 %40, i32 10;
    cbr i1 %41(prob = 0.984615), ^while.body3, ^b1;
  ^while.body3:
    i32 %42 = phi [^37, i32 %38] [^while.body3, i32 %44];
    i32 %43 = phi [^37, i32 0] [^while.body3, i32 %49];
    i32 %44 = call () -> i32 @getch();
    i32 %45 = add i32 %44, i32 -48;
    i1 %46 = icmp ult i32 %45, i32 10;
    i32 %47 = mul i32 %43, i32 10;
    i32 %48 = add i32 %47, i32 -48;
    i32 %49 = add i32 %42, i32 %48;
    cbr i1 %46(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %50 = phi [^37, i32 0] [^while.body3, i32 %49];
    i1 %51 = icmp neq i32 %39, i32 0;
    i32 %52 = neg i32 %50;
    i32 %53 = select i1 %51 ? i32 %52 : i32 %50;
    i1 %54 = icmp sgt i32 %29, i32 0;
    [100005 * i32]* %55 = ptrcast [100005 * i32]* @fa to [100005 * i32]*;
    cbr i1 %54(prob = 0.984615), ^while.body4, ^while.header;
  ^while.body4:
    i32 %56 = phi [^b1, i32 1] [^while.body4, i32 %58];
    i32* %57 = getelementptr &([100005 * i32]* %55)[i64 0][i32 %56];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %56, i32 1;
    i1 %59 = icmp sge i32 %29, i32 %58;
    cbr i1 %59(prob = 0.984615), ^while.body4, ^while.header;
  ^while.header:
    i32 %60 = phi [^b1, i32 %53] [^while.body4, i32 %53] [^b6, i32 %67] [^b7, i32 %67];
    i1 %61 = icmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.984615), ^while.body5, ^b2;
  ^while.body5:
    i32 %62 = call () -> i32 @getch();
    i1 %63 = icmp neq i32 %62, i32 81;
    i1 %64 = icmp neq i32 %62, i32 85;
    i1 %65 = and i1 %63, i1 %64;
    cbr i1 %65(prob = 0.984615), ^while.body5, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %66 = icmp eq i32 %62, i32 81;
    i32 %67 = add i32 %60, i32 -1;
    cbr i1 %66(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %68 = call () -> i32 @getch();
    i32 %69 = add i32 %68, i32 -48;
    i1 %70 = icmp ugt i32 %69, i32 9;
    cbr i1 %70(prob = 0.984615), ^while.body6, ^81;
  ^entry2:
    i32 %71 = call () -> i32 @getch();
    i32 %72 = add i32 %71, i32 -48;
    i1 %73 = icmp ugt i32 %72, i32 9;
    cbr i1 %73(prob = 0.984615), ^while.body7, ^93;
  ^while.body6:
    i32 %74 = phi [^entry1, i32 %68] [^while.body6, i32 %76];
    i32 %75 = phi [^entry1, i32 0] [^while.body6, i32 %80];
    i32 %76 = call () -> i32 @getch();
    i32 %77 = add i32 %76, i32 -48;
    i1 %78 = icmp ugt i32 %77, i32 9;
    i1 %79 = icmp eq i32 %74, i32 45;
    i32 %80 = select i1 %79 ? i32 1 : i32 %75;
    cbr i1 %78(prob = 0.984615), ^while.body6, ^81;
  ^81:
    i32 %82 = phi [^entry1, i32 %68] [^while.body6, i32 %76];
    i32 %83 = phi [^entry1, i32 0] [^while.body6, i32 %80];
    i32 %84 = add i32 %82, i32 -48;
    i1 %85 = icmp ult i32 %84, i32 10;
    cbr i1 %85(prob = 0.984615), ^while.body8, ^b4;
  ^while.body7:
    i32 %86 = phi [^entry2, i32 %71] [^while.body7, i32 %88];
    i32 %87 = phi [^entry2, i32 0] [^while.body7, i32 %92];
    i32 %88 = call () -> i32 @getch();
    i32 %89 = add i32 %88, i32 -48;
    i1 %90 = icmp ugt i32 %89, i32 9;
    i1 %91 = icmp eq i32 %86, i32 45;
    i32 %92 = select i1 %91 ? i32 1 : i32 %87;
    cbr i1 %90(prob = 0.984615), ^while.body7, ^93;
  ^93:
    i32 %94 = phi [^entry2, i32 %71] [^while.body7, i32 %88];
    i32 %95 = phi [^entry2, i32 0] [^while.body7, i32 %92];
    i32 %96 = add i32 %94, i32 -48;
    i1 %97 = icmp ult i32 %96, i32 10;
    cbr i1 %97(prob = 0.984615), ^while.body9, ^b5;
  ^while.body8:
    i32 %98 = phi [^81, i32 %82] [^while.body8, i32 %100];
    i32 %99 = phi [^81, i32 0] [^while.body8, i32 %105];
    i32 %100 = call () -> i32 @getch();
    i32 %101 = add i32 %100, i32 -48;
    i1 %102 = icmp ult i32 %101, i32 10;
    i32 %103 = mul i32 %99, i32 10;
    i32 %104 = add i32 %103, i32 -48;
    i32 %105 = add i32 %98, i32 %104;
    cbr i1 %102(prob = 0.984615), ^while.body8, ^b4;
  ^b4:
    i32 %106 = phi [^81, i32 0] [^while.body8, i32 %105];
    i32 %107 = call () -> i32 @getch();
    i32 %108 = add i32 %107, i32 -48;
    i1 %109 = icmp ugt i32 %108, i32 9;
    i1 %110 = icmp neq i32 %83, i32 0;
    i32 %111 = neg i32 %106;
    i32 %112 = select i1 %110 ? i32 %111 : i32 %106;
    cbr i1 %109(prob = 0.984615), ^while.body10, ^136;
  ^while.body9:
    i32 %113 = phi [^93, i32 %94] [^while.body9, i32 %115];
    i32 %114 = phi [^93, i32 0] [^while.body9, i32 %120];
    i32 %115 = call () -> i32 @getch();
    i32 %116 = add i32 %115, i32 -48;
    i1 %117 = icmp ult i32 %116, i32 10;
    i32 %118 = mul i32 %114, i32 10;
    i32 %119 = add i32 %118, i32 -48;
    i32 %120 = add i32 %113, i32 %119;
    cbr i1 %117(prob = 0.984615), ^while.body9, ^b5;
  ^b5:
    i32 %121 = phi [^93, i32 0] [^while.body9, i32 %120];
    i1 %122 = icmp neq i32 %95, i32 0;
    i32 %123 = neg i32 %121;
    i32 %124 = select i1 %122 ? i32 %123 : i32 %121;
    i32 %125 = call (i32) -> i32 @find(i32 %124);
    i32 %126 = call () -> i32 @getch();
    i32 %127 = add i32 %126, i32 -48;
    i1 %128 = icmp ugt i32 %127, i32 9;
    cbr i1 %128(prob = 0.984615), ^while.body11, ^148;
  ^while.body10:
    i32 %129 = phi [^b4, i32 %107] [^while.body10, i32 %131];
    i32 %130 = phi [^b4, i32 0] [^while.body10, i32 %135];
    i32 %131 = call () -> i32 @getch();
    i32 %132 = add i32 %131, i32 -48;
    i1 %133 = icmp ugt i32 %132, i32 9;
    i1 %134 = icmp eq i32 %129, i32 45;
    i32 %135 = select i1 %134 ? i32 1 : i32 %130;
    cbr i1 %133(prob = 0.984615), ^while.body10, ^136;
  ^136:
    i32 %137 = phi [^b4, i32 %107] [^while.body10, i32 %131];
    i32 %138 = phi [^b4, i32 0] [^while.body10, i32 %135];
    i32 %139 = add i32 %137, i32 -48;
    i1 %140 = icmp ult i32 %139, i32 10;
    cbr i1 %140(prob = 0.984615), ^while.body12, ^b6;
  ^while.body11:
    i32 %141 = phi [^b5, i32 %126] [^while.body11, i32 %143];
    i32 %142 = phi [^b5, i32 0] [^while.body11, i32 %147];
    i32 %143 = call () -> i32 @getch();
    i32 %144 = add i32 %143, i32 -48;
    i1 %145 = icmp ugt i32 %144, i32 9;
    i1 %146 = icmp eq i32 %141, i32 45;
    i32 %147 = select i1 %146 ? i32 1 : i32 %142;
    cbr i1 %145(prob = 0.984615), ^while.body11, ^148;
  ^148:
    i32 %149 = phi [^b5, i32 %126] [^while.body11, i32 %143];
    i32 %150 = phi [^b5, i32 0] [^while.body11, i32 %147];
    i32 %151 = add i32 %149, i32 -48;
    i1 %152 = icmp ult i32 %151, i32 10;
    cbr i1 %152(prob = 0.984615), ^while.body13, ^b7;
  ^b6:
    i32 %153 = phi [^136, i32 0] [^while.body12, i32 %168];
    i32 %154 = call (i32) -> i32 @find(i32 %112);
    i1 %155 = icmp neq i32 %138, i32 0;
    i32 %156 = neg i32 %153;
    i32 %157 = select i1 %155 ? i32 %156 : i32 %153;
    i32 %158 = call (i32) -> i32 @find(i32 %157);
    i1 %159 = icmp eq i32 %154, i32 %158;
    i32 %160 = zext i1 %159 to i32;
    call (i32) -> void @putint(i32 %160);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^while.body12:
    i32 %161 = phi [^136, i32 %137] [^while.body12, i32 %163];
    i32 %162 = phi [^136, i32 0] [^while.body12, i32 %168];
    i32 %163 = call () -> i32 @getch();
    i32 %164 = add i32 %163, i32 -48;
    i1 %165 = icmp ult i32 %164, i32 10;
    i32 %166 = mul i32 %162, i32 10;
    i32 %167 = add i32 %166, i32 -48;
    i32 %168 = add i32 %161, i32 %167;
    cbr i1 %165(prob = 0.984615), ^while.body12, ^b6;
  ^b7:
    i32 %169 = phi [^148, i32 0] [^while.body13, i32 %182];
    i1 %170 = icmp neq i32 %150, i32 0;
    i32 %171 = neg i32 %169;
    i32 %172 = select i1 %170 ? i32 %171 : i32 %169;
    i32 %173 = call (i32) -> i32 @find(i32 %172);
    i32* %174 = getelementptr &([100005 * i32]* %55)[i64 0][i32 %125];
    store i32* %174 with i32 %173;
    ubr ^while.header;
  ^while.body13:
    i32 %175 = phi [^148, i32 %149] [^while.body13, i32 %177];
    i32 %176 = phi [^148, i32 0] [^while.body13, i32 %182];
    i32 %177 = call () -> i32 @getch();
    i32 %178 = add i32 %177, i32 -48;
    i1 %179 = icmp ult i32 %178, i32 10;
    i32 %180 = mul i32 %176, i32 10;
    i32 %181 = add i32 %180, i32 -48;
    i32 %182 = add i32 %175, i32 %181;
    cbr i1 %179(prob = 0.984615), ^while.body13, ^b7;
}
