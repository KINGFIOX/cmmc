internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^entry, i32 49] [^entry2, i32 %22] [^entry3, i32 %40];
    i32 %1 = phi [^entry, i32 1352] [^entry2, i32 %28] [^entry3, i32 %39];
    i32 %2 = phi [^entry, i32 0] [^entry2, i32 %29] [^entry3, i32 %41];
    i32 %3 = phi [^entry, i32 2] [^entry2, i32 %3] [^entry3, i32 %40];
    i1 %4 = scmp lt i32 %2, i32 3;
    cbr i1 %4(prob = 0.97), ^entry1, ^b;
^entry1:
    i32 %5 = add i32 %0, i32 1;
    i32 %6 = mul i32 %5, i32 2;
    i32 %7 = mul i32 %0, i32 2;
    i32 %8 = add i32 %0, i32 3;
    i32 %9 = add i32 %0, i32 6;
    i32 %10 = mul i32 %8, i32 3;
    i32 %11 = add i32 %1, i32 10;
    i32 %12 = add i32 %11, i32 %6;
    i32 %13 = add i32 %12, i32 %7;
    i32 %14 = add i32 %13, i32 %10;
    i32 %15 = add i32 %14, i32 %3;
    i1 %16 = scmp eq i32 %2, i32 1;
    cbr i1 %16(prob = 0.5), ^entry2, ^entry3;
^b:
    call (i32) -> void @putint(i32 %1);
    ret i32 0;
^entry2:
    i32 %17 = add i32 %0, i32 7;
    i32 %18 = add i32 %0, i32 8;
    i32 %19 = mul i32 %18, i32 2;
    i32 %20 = mul i32 %17, i32 2;
    i32 %21 = add i32 %0, i32 10;
    i32 %22 = add i32 %0, i32 13;
    i32 %23 = mul i32 %21, i32 3;
    i32 %24 = add i32 %0, i32 17;
    i32 %25 = add i32 %24, i32 %15;
    i32 %26 = add i32 %25, i32 %19;
    i32 %27 = add i32 %26, i32 %20;
    i32 %28 = add i32 %27, i32 %23;
    i32 %29 = add i32 %2, i32 1;
    ubr ^while.header;
^entry3:
    i32 %30 = add i32 %0, i32 7;
    i32 %31 = mul i32 %30, i32 2;
    i32 %32 = mul i32 %9, i32 2;
    i32 %33 = add i32 %0, i32 9;
    i32 %34 = mul i32 %33, i32 3;
    i32 %35 = add i32 %15, i32 10;
    i32 %36 = add i32 %35, i32 %31;
    i32 %37 = add i32 %36, i32 %32;
    i32 %38 = add i32 %37, i32 %34;
    i32 %39 = add i32 %38, i32 %3;
    i32 %40 = add i32 %0, i32 13;
    i32 %41 = add i32 %2, i32 1;
    ubr ^while.header;
}
