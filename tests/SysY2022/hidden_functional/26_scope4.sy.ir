internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    ubr [ ^while.body i32 1352, i32 49, i32 2, i32 0 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 6;
    i32 %1 = add i32 %arg, i32 21;
    i32 %2 = mul i32 %arg1, i32 7;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = add i32 %3, i32 %arg2;
    i1 %5 = scmp eq i32 %arg3, i32 1;
    cbr i1 %5(prob = 0.5), [ ^indirect i32 %arg3, i32 %4, i32 %0, i32 %arg2 ], [ ^indirect1 i32 %arg3, i32 %0, i32 %4, i32 %arg2 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg2, i32 7;
    i32 %1 = add i32 %arg1, i32 29;
    i32 %2 = mul i32 %arg2, i32 8;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = add i32 %arg, i32 1;
    i1 %5 = scmp lt i32 %4, i32 3;
    cbr i1 %5(prob = 0.97), [ ^while.body i32 %3, i32 %0, i32 %arg3, i32 %4 ], [ ^b i32 %3 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = mul i32 %arg1, i32 7;
    i32 %1 = add i32 %0, i32 21;
    i32 %2 = add i32 %1, i32 %arg2;
    i32 %3 = add i32 %2, i32 %arg3;
    i32 %4 = add i32 %arg1, i32 7;
    i32 %5 = add i32 %arg, i32 1;
    i1 %6 = scmp lt i32 %5, i32 3;
    cbr i1 %6(prob = 0.97), [ ^while.body i32 %3, i32 %4, i32 %4, i32 %5 ], [ ^b i32 %3 ];
^b(i32 %arg):
    call (i32) -> void @putint(i32 %arg);
    ret i32 0;
}
