internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^if.else, i32 %18] [^entry1, i32 %0] [^entry, i32 2];
    i32 %1 = phi [^if.else, i32 %19] [^entry1, i32 %14] [^entry, i32 0];
    i32 %2 = phi [^if.else, i32 %17] [^entry1, i32 %13] [^entry, i32 1352];
    i32 %3 = phi [^if.else, i32 %18] [^entry1, i32 %10] [^entry, i32 49];
    i1 %4 = scmp lt i32 %1, i32 3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = mul i32 %3, i32 7;
    i32 %6 = add i32 %5, i32 21;
    i32 %7 = add i32 %6, i32 %2;
    i32 %8 = add i32 %7, i32 %0;
    i1 %9 = scmp eq i32 %1, i32 1;
    cbr i1 %9(prob = 0.5), ^entry1, ^if.else;
^b:
    call (i32) -> void @putint(i32 %2);
    ret i32 0;
^entry1:
    i32 %10 = add i32 %3, i32 13;
    i32 %11 = mul i32 %3, i32 8;
    i32 %12 = add i32 %11, i32 77;
    i32 %13 = add i32 %12, i32 %8;
    i32 %14 = add i32 %1, i32 1;
    ubr ^while.header;
^if.else:
    i32 %15 = add i32 %5, i32 63;
    i32 %16 = add i32 %15, i32 %0;
    i32 %17 = add i32 %16, i32 %8;
    i32 %18 = add i32 %3, i32 13;
    i32 %19 = add i32 %1, i32 1;
    ubr ^while.header;
}
