internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @a;
internal i32* @sum;
internal i32* @count = 0;
internal func @getA() -> i32 {
^entry:
    i32 %0 = load i32* @count;
    i32 %1 = add i32 %0, i32 1;
    store i32* @count with i32 %1;
    i32 %2 = load i32* @count;
    ret i32 %2;
}
internal func @f1(i32 %a) -> void {
^entry:
    i32* %a1 = alloc i32;
    i32* %a2 = alloc i32;
    store i32* %a2 with i32 %a;
    i32 %0 = load i32* @sum;
    i32 %1 = load i32* %a2;
    i32 %2 = add i32 %0, i32 %1;
    store i32* @sum with i32 %2;
    i32 %3 = call () -> i32 @getA();
    store i32* %a2 with i32 %3;
    i32 %4 = load i32* @sum;
    i32 %5 = load i32* %a2;
    i32 %6 = add i32 %4, i32 %5;
    store i32* @sum with i32 %6;
    i1 %7 = scmp neq i32 1, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %8 = call () -> i32 @getA();
    store i32* %a1 with i32 %8;
    i32 %9 = load i32* @sum;
    i32 %10 = load i32* %a1;
    i32 %11 = add i32 %9, i32 %10;
    store i32* @sum with i32 %11;
    ubr ^b;
^b:
    i32 %12 = load i32* @sum;
    i32 %13 = load i32* %a2;
    i32 %14 = add i32 %12, i32 %13;
    store i32* @sum with i32 %14;
    i32 %15 = load i32* @sum;
    i32 %16 = load i32* %a2;
    i32 %17 = add i32 %15, i32 %16;
    store i32* @sum with i32 %17;
    ret;
}
internal func @f2() -> void {
^entry:
    i32* %a = alloc i32;
    i32 %0 = load i32* @sum;
    i32 %1 = load i32* @a;
    i32 %2 = add i32 %0, i32 %1;
    store i32* @sum with i32 %2;
    i32 %3 = call () -> i32 @getA();
    store i32* %a with i32 %3;
    i32 %4 = load i32* @sum;
    i32 %5 = load i32* @a;
    i32 %6 = add i32 %4, i32 %5;
    store i32* @sum with i32 %6;
    ret;
}
internal func @f3() -> void {
^entry:
    i32* %a = alloc i32;
    i32* %a1 = alloc i32;
    i32 %0 = call () -> i32 @getA();
    store i32* %a1 with i32 %0;
    i32 %1 = load i32* @sum;
    i32 %2 = load i32* %a1;
    i32 %3 = add i32 %1, i32 %2;
    store i32* @sum with i32 %3;
    i32 %4 = call () -> i32 @getA();
    store i32* %a1 with i32 %4;
    i32 %5 = load i32* @sum;
    i32 %6 = load i32* %a1;
    i32 %7 = add i32 %5, i32 %6;
    store i32* @sum with i32 %7;
    i32 %8 = call () -> i32 @getA();
    store i32* %a with i32 %8;
    i32 %9 = load i32* @sum;
    i32 %10 = load i32* %a1;
    i32 %11 = add i32 %9, i32 %10;
    store i32* @sum with i32 %11;
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %a = alloc i32;
    i32* %i = alloc i32;
    i32* %a1 = alloc i32;
    i32* %a2 = alloc i32;
    i32* %a3 = alloc i32;
    i32* %a4 = alloc i32;
    i32* %a5 = alloc i32;
    store i32* @sum with i32 0;
    i32 %0 = call () -> i32 @getA();
    store i32* @a with i32 %0;
    i32 %1 = load i32* @sum;
    i32 %2 = load i32* @a;
    i32 %3 = add i32 %1, i32 %2;
    store i32* @sum with i32 %3;
    i32 %4 = call () -> i32 @getA();
    store i32* %a5 with i32 %4;
    i32 %5 = load i32* %a5;
    call (i32) -> void @f1(i32 %5);
    call () -> void @f2();
    call () -> void @f3();
    i32 %6 = load i32* %a5;
    call (i32) -> void @f1(i32 %6);
    call () -> void @f2();
    call () -> void @f3();
    i32 %7 = call () -> i32 @getA();
    store i32* %a4 with i32 %7;
    i32 %8 = load i32* %a5;
    call (i32) -> void @f1(i32 %8);
    call () -> void @f2();
    call () -> void @f3();
    i32 %9 = call () -> i32 @getA();
    store i32* %a3 with i32 %9;
    i32 %10 = call () -> i32 @getA();
    store i32* %a2 with i32 %10;
    i32 %11 = load i32* %a2;
    call (i32) -> void @f1(i32 %11);
    call () -> void @f2();
    call () -> void @f3();
    i32 %12 = call () -> i32 @getA();
    store i32* %a1 with i32 %12;
    i32 %13 = load i32* %a1;
    call (i32) -> void @f1(i32 %13);
    call () -> void @f2();
    call () -> void @f3();
    i32 %14 = call () -> i32 @getA();
    store i32* %a1 with i32 %14;
    i32 %15 = load i32* %a1;
    call (i32) -> void @f1(i32 %15);
    call () -> void @f2();
    call () -> void @f3();
    i32 %16 = load i32* %a5;
    call (i32) -> void @f1(i32 %16);
    call () -> void @f2();
    call () -> void @f3();
    ubr ^while.header;
^while.header:
    i1 %17 = scmp neq i32 1, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    i32 %18 = load i32* @sum;
    call (i32) -> void @putint(i32 %18);
    ret i32 0;
^while.header1:
    i1 %19 = scmp neq i32 1, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %i with i32 0;
    ubr ^while.header2;
^b1:
    ubr ^b;
^while.header2:
    i32 %20 = load i32* %i;
    i1 %21 = scmp lt i32 %20, i32 3;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    ubr ^while.header3;
^b2:
    ubr ^b1;
^while.header3:
    i1 %24 = scmp neq i32 1, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i1 %25 = scmp neq i32 1, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then, ^b4;
^b3:
    i32 %26 = load i32* %i;
    i1 %27 = scmp eq i32 %26, i32 1;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    i32 %30 = load i32* %a5;
    call (i32) -> void @f1(i32 %30);
    call () -> void @f2();
    call () -> void @f3();
    ubr ^b3;
^b4:
    i32 %31 = call () -> i32 @getA();
    store i32* %a5 with i32 %31;
    ubr ^while.header3;
^if.then1:
    i32 %32 = call () -> i32 @getA();
    store i32* %a with i32 %32;
    i32 %33 = load i32* %a;
    call (i32) -> void @f1(i32 %33);
    call () -> void @f2();
    call () -> void @f3();
    i32 %34 = load i32* %i;
    i32 %35 = add i32 %34, i32 1;
    store i32* %i with i32 %35;
    ubr ^while.header2;
^if.else:
    i32 %36 = load i32* %a5;
    call (i32) -> void @f1(i32 %36);
    call () -> void @f2();
    call () -> void @f3();
    ubr ^b5;
^b5:
    i32 %37 = call () -> i32 @getA();
    store i32* %a5 with i32 %37;
    i32 %38 = load i32* %i;
    i32 %39 = add i32 %38, i32 1;
    store i32* %i with i32 %39;
    ubr ^while.header2;
}
