internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %res = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %res with i32 0;
    store i32* %n with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* %n;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %res with i32 0;
    i32 %6 = call () -> i32 @getint();
    store i32* %a with i32 %6;
    i32 %7 = load i32* %a;
    i1 %8 = scmp gt i32 %7, i32 0;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^b1, ^b2;
^b:
    ret i32 0;
^b1:
    i32 %11 = load i32* %a;
    i1 %12 = scmp lt i32 %11, i32 100;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    ubr ^b2;
^b2:
    i1 %15 = phi [^b1, i1 %14] [^while.body, i1 false];
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %18 = load i32* %res;
    i32 %19 = add i32 %18, i32 100;
    store i32* %res with i32 %19;
    ubr ^b4;
^if.then:
    i32 %20 = load i32* %a;
    i1 %21 = scmp gt i32 %20, i32 0;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b3, ^b5;
^b3:
    i32 %24 = load i32* %a;
    i1 %25 = scmp lt i32 %24, i32 99;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    ubr ^b5;
^b4:
    i32 %28 = load i32* %res;
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    i32 %29 = load i32* %i;
    i32 %30 = add i32 %29, i32 1;
    store i32* %i with i32 %30;
    ubr ^while.header;
^b5:
    i1 %31 = phi [^b3, i1 %27] [^if.then, i1 false];
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then1, ^if.else1;
^if.else1:
    i32 %34 = load i32* %res;
    i32 %35 = add i32 %34, i32 99;
    store i32* %res with i32 %35;
    ubr ^b7;
^if.then1:
    i32 %36 = load i32* %a;
    i1 %37 = scmp gt i32 %36, i32 0;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^b6, ^b8;
^b6:
    i32 %40 = load i32* %a;
    i1 %41 = scmp lt i32 %40, i32 98;
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    ubr ^b8;
^b7:
    ubr ^b4;
^b8:
    i1 %44 = phi [^b6, i1 %43] [^if.then1, i1 false];
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then2, ^if.else2;
^if.else2:
    i32 %47 = load i32* %res;
    i32 %48 = add i32 %47, i32 98;
    store i32* %res with i32 %48;
    ubr ^b10;
^if.then2:
    i32 %49 = load i32* %a;
    i1 %50 = scmp gt i32 %49, i32 0;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.5), ^b9, ^b11;
^b9:
    i32 %53 = load i32* %a;
    i1 %54 = scmp lt i32 %53, i32 97;
    i32 %55 = zext i1 %54 to i32;
    i1 %56 = scmp neq i32 %55, i32 0;
    ubr ^b11;
^b10:
    ubr ^b7;
^b11:
    i1 %57 = phi [^b9, i1 %56] [^if.then2, i1 false];
    i32 %58 = zext i1 %57 to i32;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^if.then3, ^if.else3;
^if.else3:
    i32 %60 = load i32* %res;
    i32 %61 = add i32 %60, i32 97;
    store i32* %res with i32 %61;
    ubr ^b13;
^if.then3:
    i32 %62 = load i32* %a;
    i1 %63 = scmp gt i32 %62, i32 0;
    i32 %64 = zext i1 %63 to i32;
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.5), ^b12, ^b14;
^b12:
    i32 %66 = load i32* %a;
    i1 %67 = scmp lt i32 %66, i32 96;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = scmp neq i32 %68, i32 0;
    ubr ^b14;
^b13:
    ubr ^b10;
^b14:
    i1 %70 = phi [^b12, i1 %69] [^if.then3, i1 false];
    i32 %71 = zext i1 %70 to i32;
    i1 %72 = scmp neq i32 %71, i32 0;
    cbr i1 %72(prob = 0.5), ^if.then4, ^if.else4;
^if.else4:
    i32 %73 = load i32* %res;
    i32 %74 = add i32 %73, i32 96;
    store i32* %res with i32 %74;
    ubr ^b16;
^if.then4:
    i32 %75 = load i32* %a;
    i1 %76 = scmp gt i32 %75, i32 0;
    i32 %77 = zext i1 %76 to i32;
    i1 %78 = scmp neq i32 %77, i32 0;
    cbr i1 %78(prob = 0.5), ^b15, ^b17;
^b15:
    i32 %79 = load i32* %a;
    i1 %80 = scmp lt i32 %79, i32 95;
    i32 %81 = zext i1 %80 to i32;
    i1 %82 = scmp neq i32 %81, i32 0;
    ubr ^b17;
^b16:
    ubr ^b13;
^b17:
    i1 %83 = phi [^b15, i1 %82] [^if.then4, i1 false];
    i32 %84 = zext i1 %83 to i32;
    i1 %85 = scmp neq i32 %84, i32 0;
    cbr i1 %85(prob = 0.5), ^if.then5, ^if.else5;
^if.else5:
    i32 %86 = load i32* %res;
    i32 %87 = add i32 %86, i32 95;
    store i32* %res with i32 %87;
    ubr ^b19;
^if.then5:
    i32 %88 = load i32* %a;
    i1 %89 = scmp gt i32 %88, i32 0;
    i32 %90 = zext i1 %89 to i32;
    i1 %91 = scmp neq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^b18, ^b20;
^b18:
    i32 %92 = load i32* %a;
    i1 %93 = scmp lt i32 %92, i32 94;
    i32 %94 = zext i1 %93 to i32;
    i1 %95 = scmp neq i32 %94, i32 0;
    ubr ^b20;
^b19:
    ubr ^b16;
^b20:
    i1 %96 = phi [^b18, i1 %95] [^if.then5, i1 false];
    i32 %97 = zext i1 %96 to i32;
    i1 %98 = scmp neq i32 %97, i32 0;
    cbr i1 %98(prob = 0.5), ^if.then6, ^if.else6;
^if.else6:
    i32 %99 = load i32* %res;
    i32 %100 = add i32 %99, i32 94;
    store i32* %res with i32 %100;
    ubr ^b22;
^if.then6:
    i32 %101 = load i32* %a;
    i1 %102 = scmp gt i32 %101, i32 0;
    i32 %103 = zext i1 %102 to i32;
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.5), ^b21, ^b23;
^b21:
    i32 %105 = load i32* %a;
    i1 %106 = scmp lt i32 %105, i32 93;
    i32 %107 = zext i1 %106 to i32;
    i1 %108 = scmp neq i32 %107, i32 0;
    ubr ^b23;
^b22:
    ubr ^b19;
^b23:
    i1 %109 = phi [^b21, i1 %108] [^if.then6, i1 false];
    i32 %110 = zext i1 %109 to i32;
    i1 %111 = scmp neq i32 %110, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then7, ^if.else7;
^if.else7:
    i32 %112 = load i32* %res;
    i32 %113 = add i32 %112, i32 93;
    store i32* %res with i32 %113;
    ubr ^b25;
^if.then7:
    i32 %114 = load i32* %a;
    i1 %115 = scmp gt i32 %114, i32 0;
    i32 %116 = zext i1 %115 to i32;
    i1 %117 = scmp neq i32 %116, i32 0;
    cbr i1 %117(prob = 0.5), ^b24, ^b26;
^b24:
    i32 %118 = load i32* %a;
    i1 %119 = scmp lt i32 %118, i32 92;
    i32 %120 = zext i1 %119 to i32;
    i1 %121 = scmp neq i32 %120, i32 0;
    ubr ^b26;
^b25:
    ubr ^b22;
^b26:
    i1 %122 = phi [^b24, i1 %121] [^if.then7, i1 false];
    i32 %123 = zext i1 %122 to i32;
    i1 %124 = scmp neq i32 %123, i32 0;
    cbr i1 %124(prob = 0.5), ^if.then8, ^if.else8;
^if.else8:
    i32 %125 = load i32* %res;
    i32 %126 = add i32 %125, i32 92;
    store i32* %res with i32 %126;
    ubr ^b28;
^if.then8:
    i32 %127 = load i32* %a;
    i1 %128 = scmp gt i32 %127, i32 0;
    i32 %129 = zext i1 %128 to i32;
    i1 %130 = scmp neq i32 %129, i32 0;
    cbr i1 %130(prob = 0.5), ^b27, ^b29;
^b27:
    i32 %131 = load i32* %a;
    i1 %132 = scmp lt i32 %131, i32 91;
    i32 %133 = zext i1 %132 to i32;
    i1 %134 = scmp neq i32 %133, i32 0;
    ubr ^b29;
^b28:
    ubr ^b25;
^b29:
    i1 %135 = phi [^b27, i1 %134] [^if.then8, i1 false];
    i32 %136 = zext i1 %135 to i32;
    i1 %137 = scmp neq i32 %136, i32 0;
    cbr i1 %137(prob = 0.5), ^if.then9, ^if.else9;
^if.else9:
    i32 %138 = load i32* %res;
    i32 %139 = add i32 %138, i32 91;
    store i32* %res with i32 %139;
    ubr ^b31;
^if.then9:
    i32 %140 = load i32* %a;
    i1 %141 = scmp gt i32 %140, i32 0;
    i32 %142 = zext i1 %141 to i32;
    i1 %143 = scmp neq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b30, ^b32;
^b30:
    i32 %144 = load i32* %a;
    i1 %145 = scmp lt i32 %144, i32 90;
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = scmp neq i32 %146, i32 0;
    ubr ^b32;
^b31:
    ubr ^b28;
^b32:
    i1 %148 = phi [^b30, i1 %147] [^if.then9, i1 false];
    i32 %149 = zext i1 %148 to i32;
    i1 %150 = scmp neq i32 %149, i32 0;
    cbr i1 %150(prob = 0.5), ^if.then10, ^if.else10;
^if.else10:
    i32 %151 = load i32* %res;
    i32 %152 = add i32 %151, i32 90;
    store i32* %res with i32 %152;
    ubr ^b34;
^if.then10:
    i32 %153 = load i32* %a;
    i1 %154 = scmp gt i32 %153, i32 0;
    i32 %155 = zext i1 %154 to i32;
    i1 %156 = scmp neq i32 %155, i32 0;
    cbr i1 %156(prob = 0.5), ^b33, ^b35;
^b33:
    i32 %157 = load i32* %a;
    i1 %158 = scmp lt i32 %157, i32 89;
    i32 %159 = zext i1 %158 to i32;
    i1 %160 = scmp neq i32 %159, i32 0;
    ubr ^b35;
^b34:
    ubr ^b31;
^b35:
    i1 %161 = phi [^b33, i1 %160] [^if.then10, i1 false];
    i32 %162 = zext i1 %161 to i32;
    i1 %163 = scmp neq i32 %162, i32 0;
    cbr i1 %163(prob = 0.5), ^if.then11, ^if.else11;
^if.else11:
    i32 %164 = load i32* %res;
    i32 %165 = add i32 %164, i32 89;
    store i32* %res with i32 %165;
    ubr ^b37;
^if.then11:
    i32 %166 = load i32* %a;
    i1 %167 = scmp gt i32 %166, i32 0;
    i32 %168 = zext i1 %167 to i32;
    i1 %169 = scmp neq i32 %168, i32 0;
    cbr i1 %169(prob = 0.5), ^b36, ^b38;
^b36:
    i32 %170 = load i32* %a;
    i1 %171 = scmp lt i32 %170, i32 88;
    i32 %172 = zext i1 %171 to i32;
    i1 %173 = scmp neq i32 %172, i32 0;
    ubr ^b38;
^b37:
    ubr ^b34;
^b38:
    i1 %174 = phi [^b36, i1 %173] [^if.then11, i1 false];
    i32 %175 = zext i1 %174 to i32;
    i1 %176 = scmp neq i32 %175, i32 0;
    cbr i1 %176(prob = 0.5), ^if.then12, ^if.else12;
^if.else12:
    i32 %177 = load i32* %res;
    i32 %178 = add i32 %177, i32 88;
    store i32* %res with i32 %178;
    ubr ^b40;
^if.then12:
    i32 %179 = load i32* %a;
    i1 %180 = scmp gt i32 %179, i32 0;
    i32 %181 = zext i1 %180 to i32;
    i1 %182 = scmp neq i32 %181, i32 0;
    cbr i1 %182(prob = 0.5), ^b39, ^b41;
^b39:
    i32 %183 = load i32* %a;
    i1 %184 = scmp lt i32 %183, i32 87;
    i32 %185 = zext i1 %184 to i32;
    i1 %186 = scmp neq i32 %185, i32 0;
    ubr ^b41;
^b40:
    ubr ^b37;
^b41:
    i1 %187 = phi [^b39, i1 %186] [^if.then12, i1 false];
    i32 %188 = zext i1 %187 to i32;
    i1 %189 = scmp neq i32 %188, i32 0;
    cbr i1 %189(prob = 0.5), ^if.then13, ^if.else13;
^if.else13:
    i32 %190 = load i32* %res;
    i32 %191 = add i32 %190, i32 87;
    store i32* %res with i32 %191;
    ubr ^b43;
^if.then13:
    i32 %192 = load i32* %a;
    i1 %193 = scmp gt i32 %192, i32 0;
    i32 %194 = zext i1 %193 to i32;
    i1 %195 = scmp neq i32 %194, i32 0;
    cbr i1 %195(prob = 0.5), ^b42, ^b44;
^b42:
    i32 %196 = load i32* %a;
    i1 %197 = scmp lt i32 %196, i32 86;
    i32 %198 = zext i1 %197 to i32;
    i1 %199 = scmp neq i32 %198, i32 0;
    ubr ^b44;
^b43:
    ubr ^b40;
^b44:
    i1 %200 = phi [^b42, i1 %199] [^if.then13, i1 false];
    i32 %201 = zext i1 %200 to i32;
    i1 %202 = scmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.5), ^if.then14, ^if.else14;
^if.else14:
    i32 %203 = load i32* %res;
    i32 %204 = add i32 %203, i32 86;
    store i32* %res with i32 %204;
    ubr ^b46;
^if.then14:
    i32 %205 = load i32* %a;
    i1 %206 = scmp gt i32 %205, i32 0;
    i32 %207 = zext i1 %206 to i32;
    i1 %208 = scmp neq i32 %207, i32 0;
    cbr i1 %208(prob = 0.5), ^b45, ^b47;
^b45:
    i32 %209 = load i32* %a;
    i1 %210 = scmp lt i32 %209, i32 85;
    i32 %211 = zext i1 %210 to i32;
    i1 %212 = scmp neq i32 %211, i32 0;
    ubr ^b47;
^b46:
    ubr ^b43;
^b47:
    i1 %213 = phi [^b45, i1 %212] [^if.then14, i1 false];
    i32 %214 = zext i1 %213 to i32;
    i1 %215 = scmp neq i32 %214, i32 0;
    cbr i1 %215(prob = 0.5), ^if.then15, ^if.else15;
^if.else15:
    i32 %216 = load i32* %res;
    i32 %217 = add i32 %216, i32 85;
    store i32* %res with i32 %217;
    ubr ^b49;
^if.then15:
    i32 %218 = load i32* %a;
    i1 %219 = scmp gt i32 %218, i32 0;
    i32 %220 = zext i1 %219 to i32;
    i1 %221 = scmp neq i32 %220, i32 0;
    cbr i1 %221(prob = 0.5), ^b48, ^b50;
^b48:
    i32 %222 = load i32* %a;
    i1 %223 = scmp lt i32 %222, i32 84;
    i32 %224 = zext i1 %223 to i32;
    i1 %225 = scmp neq i32 %224, i32 0;
    ubr ^b50;
^b49:
    ubr ^b46;
^b50:
    i1 %226 = phi [^b48, i1 %225] [^if.then15, i1 false];
    i32 %227 = zext i1 %226 to i32;
    i1 %228 = scmp neq i32 %227, i32 0;
    cbr i1 %228(prob = 0.5), ^if.then16, ^if.else16;
^if.else16:
    i32 %229 = load i32* %res;
    i32 %230 = add i32 %229, i32 84;
    store i32* %res with i32 %230;
    ubr ^b52;
^if.then16:
    i32 %231 = load i32* %a;
    i1 %232 = scmp gt i32 %231, i32 0;
    i32 %233 = zext i1 %232 to i32;
    i1 %234 = scmp neq i32 %233, i32 0;
    cbr i1 %234(prob = 0.5), ^b51, ^b53;
^b51:
    i32 %235 = load i32* %a;
    i1 %236 = scmp lt i32 %235, i32 83;
    i32 %237 = zext i1 %236 to i32;
    i1 %238 = scmp neq i32 %237, i32 0;
    ubr ^b53;
^b52:
    ubr ^b49;
^b53:
    i1 %239 = phi [^b51, i1 %238] [^if.then16, i1 false];
    i32 %240 = zext i1 %239 to i32;
    i1 %241 = scmp neq i32 %240, i32 0;
    cbr i1 %241(prob = 0.5), ^if.then17, ^if.else17;
^if.else17:
    i32 %242 = load i32* %res;
    i32 %243 = add i32 %242, i32 83;
    store i32* %res with i32 %243;
    ubr ^b55;
^if.then17:
    i32 %244 = load i32* %a;
    i1 %245 = scmp gt i32 %244, i32 0;
    i32 %246 = zext i1 %245 to i32;
    i1 %247 = scmp neq i32 %246, i32 0;
    cbr i1 %247(prob = 0.5), ^b54, ^b56;
^b54:
    i32 %248 = load i32* %a;
    i1 %249 = scmp lt i32 %248, i32 82;
    i32 %250 = zext i1 %249 to i32;
    i1 %251 = scmp neq i32 %250, i32 0;
    ubr ^b56;
^b55:
    ubr ^b52;
^b56:
    i1 %252 = phi [^b54, i1 %251] [^if.then17, i1 false];
    i32 %253 = zext i1 %252 to i32;
    i1 %254 = scmp neq i32 %253, i32 0;
    cbr i1 %254(prob = 0.5), ^if.then18, ^if.else18;
^if.else18:
    i32 %255 = load i32* %res;
    i32 %256 = add i32 %255, i32 82;
    store i32* %res with i32 %256;
    ubr ^b58;
^if.then18:
    i32 %257 = load i32* %a;
    i1 %258 = scmp gt i32 %257, i32 0;
    i32 %259 = zext i1 %258 to i32;
    i1 %260 = scmp neq i32 %259, i32 0;
    cbr i1 %260(prob = 0.5), ^b57, ^b59;
^b57:
    i32 %261 = load i32* %a;
    i1 %262 = scmp lt i32 %261, i32 81;
    i32 %263 = zext i1 %262 to i32;
    i1 %264 = scmp neq i32 %263, i32 0;
    ubr ^b59;
^b58:
    ubr ^b55;
^b59:
    i1 %265 = phi [^b57, i1 %264] [^if.then18, i1 false];
    i32 %266 = zext i1 %265 to i32;
    i1 %267 = scmp neq i32 %266, i32 0;
    cbr i1 %267(prob = 0.5), ^if.then19, ^if.else19;
^if.else19:
    i32 %268 = load i32* %res;
    i32 %269 = add i32 %268, i32 81;
    store i32* %res with i32 %269;
    ubr ^b61;
^if.then19:
    i32 %270 = load i32* %a;
    i1 %271 = scmp gt i32 %270, i32 0;
    i32 %272 = zext i1 %271 to i32;
    i1 %273 = scmp neq i32 %272, i32 0;
    cbr i1 %273(prob = 0.5), ^b60, ^b62;
^b60:
    i32 %274 = load i32* %a;
    i1 %275 = scmp lt i32 %274, i32 80;
    i32 %276 = zext i1 %275 to i32;
    i1 %277 = scmp neq i32 %276, i32 0;
    ubr ^b62;
^b61:
    ubr ^b58;
^b62:
    i1 %278 = phi [^b60, i1 %277] [^if.then19, i1 false];
    i32 %279 = zext i1 %278 to i32;
    i1 %280 = scmp neq i32 %279, i32 0;
    cbr i1 %280(prob = 0.5), ^if.then20, ^if.else20;
^if.else20:
    i32 %281 = load i32* %res;
    i32 %282 = add i32 %281, i32 80;
    store i32* %res with i32 %282;
    ubr ^b64;
^if.then20:
    i32 %283 = load i32* %a;
    i1 %284 = scmp gt i32 %283, i32 0;
    i32 %285 = zext i1 %284 to i32;
    i1 %286 = scmp neq i32 %285, i32 0;
    cbr i1 %286(prob = 0.5), ^b63, ^b65;
^b63:
    i32 %287 = load i32* %a;
    i1 %288 = scmp lt i32 %287, i32 79;
    i32 %289 = zext i1 %288 to i32;
    i1 %290 = scmp neq i32 %289, i32 0;
    ubr ^b65;
^b64:
    ubr ^b61;
^b65:
    i1 %291 = phi [^b63, i1 %290] [^if.then20, i1 false];
    i32 %292 = zext i1 %291 to i32;
    i1 %293 = scmp neq i32 %292, i32 0;
    cbr i1 %293(prob = 0.5), ^if.then21, ^if.else21;
^if.else21:
    i32 %294 = load i32* %res;
    i32 %295 = add i32 %294, i32 79;
    store i32* %res with i32 %295;
    ubr ^b67;
^if.then21:
    i32 %296 = load i32* %a;
    i1 %297 = scmp gt i32 %296, i32 0;
    i32 %298 = zext i1 %297 to i32;
    i1 %299 = scmp neq i32 %298, i32 0;
    cbr i1 %299(prob = 0.5), ^b66, ^b68;
^b66:
    i32 %300 = load i32* %a;
    i1 %301 = scmp lt i32 %300, i32 78;
    i32 %302 = zext i1 %301 to i32;
    i1 %303 = scmp neq i32 %302, i32 0;
    ubr ^b68;
^b67:
    ubr ^b64;
^b68:
    i1 %304 = phi [^b66, i1 %303] [^if.then21, i1 false];
    i32 %305 = zext i1 %304 to i32;
    i1 %306 = scmp neq i32 %305, i32 0;
    cbr i1 %306(prob = 0.5), ^if.then22, ^if.else22;
^if.else22:
    i32 %307 = load i32* %res;
    i32 %308 = add i32 %307, i32 78;
    store i32* %res with i32 %308;
    ubr ^b70;
^if.then22:
    i32 %309 = load i32* %a;
    i1 %310 = scmp gt i32 %309, i32 0;
    i32 %311 = zext i1 %310 to i32;
    i1 %312 = scmp neq i32 %311, i32 0;
    cbr i1 %312(prob = 0.5), ^b69, ^b71;
^b69:
    i32 %313 = load i32* %a;
    i1 %314 = scmp lt i32 %313, i32 77;
    i32 %315 = zext i1 %314 to i32;
    i1 %316 = scmp neq i32 %315, i32 0;
    ubr ^b71;
^b70:
    ubr ^b67;
^b71:
    i1 %317 = phi [^b69, i1 %316] [^if.then22, i1 false];
    i32 %318 = zext i1 %317 to i32;
    i1 %319 = scmp neq i32 %318, i32 0;
    cbr i1 %319(prob = 0.5), ^if.then23, ^if.else23;
^if.else23:
    i32 %320 = load i32* %res;
    i32 %321 = add i32 %320, i32 77;
    store i32* %res with i32 %321;
    ubr ^b73;
^if.then23:
    i32 %322 = load i32* %a;
    i1 %323 = scmp gt i32 %322, i32 0;
    i32 %324 = zext i1 %323 to i32;
    i1 %325 = scmp neq i32 %324, i32 0;
    cbr i1 %325(prob = 0.5), ^b72, ^b74;
^b72:
    i32 %326 = load i32* %a;
    i1 %327 = scmp lt i32 %326, i32 76;
    i32 %328 = zext i1 %327 to i32;
    i1 %329 = scmp neq i32 %328, i32 0;
    ubr ^b74;
^b73:
    ubr ^b70;
^b74:
    i1 %330 = phi [^b72, i1 %329] [^if.then23, i1 false];
    i32 %331 = zext i1 %330 to i32;
    i1 %332 = scmp neq i32 %331, i32 0;
    cbr i1 %332(prob = 0.5), ^if.then24, ^if.else24;
^if.else24:
    i32 %333 = load i32* %res;
    i32 %334 = add i32 %333, i32 76;
    store i32* %res with i32 %334;
    ubr ^b76;
^if.then24:
    i32 %335 = load i32* %a;
    i1 %336 = scmp gt i32 %335, i32 0;
    i32 %337 = zext i1 %336 to i32;
    i1 %338 = scmp neq i32 %337, i32 0;
    cbr i1 %338(prob = 0.5), ^b75, ^b77;
^b75:
    i32 %339 = load i32* %a;
    i1 %340 = scmp lt i32 %339, i32 75;
    i32 %341 = zext i1 %340 to i32;
    i1 %342 = scmp neq i32 %341, i32 0;
    ubr ^b77;
^b76:
    ubr ^b73;
^b77:
    i1 %343 = phi [^b75, i1 %342] [^if.then24, i1 false];
    i32 %344 = zext i1 %343 to i32;
    i1 %345 = scmp neq i32 %344, i32 0;
    cbr i1 %345(prob = 0.5), ^if.then25, ^if.else25;
^if.else25:
    i32 %346 = load i32* %res;
    i32 %347 = add i32 %346, i32 75;
    store i32* %res with i32 %347;
    ubr ^b79;
^if.then25:
    i32 %348 = load i32* %a;
    i1 %349 = scmp gt i32 %348, i32 0;
    i32 %350 = zext i1 %349 to i32;
    i1 %351 = scmp neq i32 %350, i32 0;
    cbr i1 %351(prob = 0.5), ^b78, ^b80;
^b78:
    i32 %352 = load i32* %a;
    i1 %353 = scmp lt i32 %352, i32 74;
    i32 %354 = zext i1 %353 to i32;
    i1 %355 = scmp neq i32 %354, i32 0;
    ubr ^b80;
^b79:
    ubr ^b76;
^b80:
    i1 %356 = phi [^b78, i1 %355] [^if.then25, i1 false];
    i32 %357 = zext i1 %356 to i32;
    i1 %358 = scmp neq i32 %357, i32 0;
    cbr i1 %358(prob = 0.5), ^if.then26, ^if.else26;
^if.else26:
    i32 %359 = load i32* %res;
    i32 %360 = add i32 %359, i32 74;
    store i32* %res with i32 %360;
    ubr ^b82;
^if.then26:
    i32 %361 = load i32* %a;
    i1 %362 = scmp gt i32 %361, i32 0;
    i32 %363 = zext i1 %362 to i32;
    i1 %364 = scmp neq i32 %363, i32 0;
    cbr i1 %364(prob = 0.5), ^b81, ^b83;
^b81:
    i32 %365 = load i32* %a;
    i1 %366 = scmp lt i32 %365, i32 73;
    i32 %367 = zext i1 %366 to i32;
    i1 %368 = scmp neq i32 %367, i32 0;
    ubr ^b83;
^b82:
    ubr ^b79;
^b83:
    i1 %369 = phi [^b81, i1 %368] [^if.then26, i1 false];
    i32 %370 = zext i1 %369 to i32;
    i1 %371 = scmp neq i32 %370, i32 0;
    cbr i1 %371(prob = 0.5), ^if.then27, ^if.else27;
^if.else27:
    i32 %372 = load i32* %res;
    i32 %373 = add i32 %372, i32 73;
    store i32* %res with i32 %373;
    ubr ^b85;
^if.then27:
    i32 %374 = load i32* %a;
    i1 %375 = scmp gt i32 %374, i32 0;
    i32 %376 = zext i1 %375 to i32;
    i1 %377 = scmp neq i32 %376, i32 0;
    cbr i1 %377(prob = 0.5), ^b84, ^b86;
^b84:
    i32 %378 = load i32* %a;
    i1 %379 = scmp lt i32 %378, i32 72;
    i32 %380 = zext i1 %379 to i32;
    i1 %381 = scmp neq i32 %380, i32 0;
    ubr ^b86;
^b85:
    ubr ^b82;
^b86:
    i1 %382 = phi [^b84, i1 %381] [^if.then27, i1 false];
    i32 %383 = zext i1 %382 to i32;
    i1 %384 = scmp neq i32 %383, i32 0;
    cbr i1 %384(prob = 0.5), ^if.then28, ^if.else28;
^if.else28:
    i32 %385 = load i32* %res;
    i32 %386 = add i32 %385, i32 72;
    store i32* %res with i32 %386;
    ubr ^b88;
^if.then28:
    i32 %387 = load i32* %a;
    i1 %388 = scmp gt i32 %387, i32 0;
    i32 %389 = zext i1 %388 to i32;
    i1 %390 = scmp neq i32 %389, i32 0;
    cbr i1 %390(prob = 0.5), ^b87, ^b89;
^b87:
    i32 %391 = load i32* %a;
    i1 %392 = scmp lt i32 %391, i32 71;
    i32 %393 = zext i1 %392 to i32;
    i1 %394 = scmp neq i32 %393, i32 0;
    ubr ^b89;
^b88:
    ubr ^b85;
^b89:
    i1 %395 = phi [^b87, i1 %394] [^if.then28, i1 false];
    i32 %396 = zext i1 %395 to i32;
    i1 %397 = scmp neq i32 %396, i32 0;
    cbr i1 %397(prob = 0.5), ^if.then29, ^if.else29;
^if.else29:
    i32 %398 = load i32* %res;
    i32 %399 = add i32 %398, i32 71;
    store i32* %res with i32 %399;
    ubr ^b91;
^if.then29:
    i32 %400 = load i32* %a;
    i1 %401 = scmp gt i32 %400, i32 0;
    i32 %402 = zext i1 %401 to i32;
    i1 %403 = scmp neq i32 %402, i32 0;
    cbr i1 %403(prob = 0.5), ^b90, ^b92;
^b90:
    i32 %404 = load i32* %a;
    i1 %405 = scmp lt i32 %404, i32 70;
    i32 %406 = zext i1 %405 to i32;
    i1 %407 = scmp neq i32 %406, i32 0;
    ubr ^b92;
^b91:
    ubr ^b88;
^b92:
    i1 %408 = phi [^b90, i1 %407] [^if.then29, i1 false];
    i32 %409 = zext i1 %408 to i32;
    i1 %410 = scmp neq i32 %409, i32 0;
    cbr i1 %410(prob = 0.5), ^if.then30, ^if.else30;
^if.else30:
    i32 %411 = load i32* %res;
    i32 %412 = add i32 %411, i32 70;
    store i32* %res with i32 %412;
    ubr ^b94;
^if.then30:
    i32 %413 = load i32* %a;
    i1 %414 = scmp gt i32 %413, i32 0;
    i32 %415 = zext i1 %414 to i32;
    i1 %416 = scmp neq i32 %415, i32 0;
    cbr i1 %416(prob = 0.5), ^b93, ^b95;
^b93:
    i32 %417 = load i32* %a;
    i1 %418 = scmp lt i32 %417, i32 69;
    i32 %419 = zext i1 %418 to i32;
    i1 %420 = scmp neq i32 %419, i32 0;
    ubr ^b95;
^b94:
    ubr ^b91;
^b95:
    i1 %421 = phi [^b93, i1 %420] [^if.then30, i1 false];
    i32 %422 = zext i1 %421 to i32;
    i1 %423 = scmp neq i32 %422, i32 0;
    cbr i1 %423(prob = 0.5), ^if.then31, ^if.else31;
^if.else31:
    i32 %424 = load i32* %res;
    i32 %425 = add i32 %424, i32 69;
    store i32* %res with i32 %425;
    ubr ^b97;
^if.then31:
    i32 %426 = load i32* %a;
    i1 %427 = scmp gt i32 %426, i32 0;
    i32 %428 = zext i1 %427 to i32;
    i1 %429 = scmp neq i32 %428, i32 0;
    cbr i1 %429(prob = 0.5), ^b96, ^b98;
^b96:
    i32 %430 = load i32* %a;
    i1 %431 = scmp lt i32 %430, i32 68;
    i32 %432 = zext i1 %431 to i32;
    i1 %433 = scmp neq i32 %432, i32 0;
    ubr ^b98;
^b97:
    ubr ^b94;
^b98:
    i1 %434 = phi [^b96, i1 %433] [^if.then31, i1 false];
    i32 %435 = zext i1 %434 to i32;
    i1 %436 = scmp neq i32 %435, i32 0;
    cbr i1 %436(prob = 0.5), ^if.then32, ^if.else32;
^if.else32:
    i32 %437 = load i32* %res;
    i32 %438 = add i32 %437, i32 68;
    store i32* %res with i32 %438;
    ubr ^b100;
^if.then32:
    i32 %439 = load i32* %a;
    i1 %440 = scmp gt i32 %439, i32 0;
    i32 %441 = zext i1 %440 to i32;
    i1 %442 = scmp neq i32 %441, i32 0;
    cbr i1 %442(prob = 0.5), ^b99, ^b101;
^b99:
    i32 %443 = load i32* %a;
    i1 %444 = scmp lt i32 %443, i32 67;
    i32 %445 = zext i1 %444 to i32;
    i1 %446 = scmp neq i32 %445, i32 0;
    ubr ^b101;
^b100:
    ubr ^b97;
^b101:
    i1 %447 = phi [^b99, i1 %446] [^if.then32, i1 false];
    i32 %448 = zext i1 %447 to i32;
    i1 %449 = scmp neq i32 %448, i32 0;
    cbr i1 %449(prob = 0.5), ^if.then33, ^if.else33;
^if.else33:
    i32 %450 = load i32* %res;
    i32 %451 = add i32 %450, i32 67;
    store i32* %res with i32 %451;
    ubr ^b103;
^if.then33:
    i32 %452 = load i32* %a;
    i1 %453 = scmp gt i32 %452, i32 0;
    i32 %454 = zext i1 %453 to i32;
    i1 %455 = scmp neq i32 %454, i32 0;
    cbr i1 %455(prob = 0.5), ^b102, ^b104;
^b102:
    i32 %456 = load i32* %a;
    i1 %457 = scmp lt i32 %456, i32 66;
    i32 %458 = zext i1 %457 to i32;
    i1 %459 = scmp neq i32 %458, i32 0;
    ubr ^b104;
^b103:
    ubr ^b100;
^b104:
    i1 %460 = phi [^b102, i1 %459] [^if.then33, i1 false];
    i32 %461 = zext i1 %460 to i32;
    i1 %462 = scmp neq i32 %461, i32 0;
    cbr i1 %462(prob = 0.5), ^if.then34, ^if.else34;
^if.else34:
    i32 %463 = load i32* %res;
    i32 %464 = add i32 %463, i32 66;
    store i32* %res with i32 %464;
    ubr ^b106;
^if.then34:
    i32 %465 = load i32* %a;
    i1 %466 = scmp gt i32 %465, i32 0;
    i32 %467 = zext i1 %466 to i32;
    i1 %468 = scmp neq i32 %467, i32 0;
    cbr i1 %468(prob = 0.5), ^b105, ^b107;
^b105:
    i32 %469 = load i32* %a;
    i1 %470 = scmp lt i32 %469, i32 65;
    i32 %471 = zext i1 %470 to i32;
    i1 %472 = scmp neq i32 %471, i32 0;
    ubr ^b107;
^b106:
    ubr ^b103;
^b107:
    i1 %473 = phi [^b105, i1 %472] [^if.then34, i1 false];
    i32 %474 = zext i1 %473 to i32;
    i1 %475 = scmp neq i32 %474, i32 0;
    cbr i1 %475(prob = 0.5), ^if.then35, ^if.else35;
^if.else35:
    i32 %476 = load i32* %res;
    i32 %477 = add i32 %476, i32 65;
    store i32* %res with i32 %477;
    ubr ^b109;
^if.then35:
    i32 %478 = load i32* %a;
    i1 %479 = scmp gt i32 %478, i32 0;
    i32 %480 = zext i1 %479 to i32;
    i1 %481 = scmp neq i32 %480, i32 0;
    cbr i1 %481(prob = 0.5), ^b108, ^b110;
^b108:
    i32 %482 = load i32* %a;
    i1 %483 = scmp lt i32 %482, i32 64;
    i32 %484 = zext i1 %483 to i32;
    i1 %485 = scmp neq i32 %484, i32 0;
    ubr ^b110;
^b109:
    ubr ^b106;
^b110:
    i1 %486 = phi [^b108, i1 %485] [^if.then35, i1 false];
    i32 %487 = zext i1 %486 to i32;
    i1 %488 = scmp neq i32 %487, i32 0;
    cbr i1 %488(prob = 0.5), ^if.then36, ^if.else36;
^if.else36:
    i32 %489 = load i32* %res;
    i32 %490 = add i32 %489, i32 64;
    store i32* %res with i32 %490;
    ubr ^b112;
^if.then36:
    i32 %491 = load i32* %a;
    i1 %492 = scmp gt i32 %491, i32 0;
    i32 %493 = zext i1 %492 to i32;
    i1 %494 = scmp neq i32 %493, i32 0;
    cbr i1 %494(prob = 0.5), ^b111, ^b113;
^b111:
    i32 %495 = load i32* %a;
    i1 %496 = scmp lt i32 %495, i32 63;
    i32 %497 = zext i1 %496 to i32;
    i1 %498 = scmp neq i32 %497, i32 0;
    ubr ^b113;
^b112:
    ubr ^b109;
^b113:
    i1 %499 = phi [^b111, i1 %498] [^if.then36, i1 false];
    i32 %500 = zext i1 %499 to i32;
    i1 %501 = scmp neq i32 %500, i32 0;
    cbr i1 %501(prob = 0.5), ^if.then37, ^if.else37;
^if.else37:
    i32 %502 = load i32* %res;
    i32 %503 = add i32 %502, i32 63;
    store i32* %res with i32 %503;
    ubr ^b115;
^if.then37:
    i32 %504 = load i32* %a;
    i1 %505 = scmp gt i32 %504, i32 0;
    i32 %506 = zext i1 %505 to i32;
    i1 %507 = scmp neq i32 %506, i32 0;
    cbr i1 %507(prob = 0.5), ^b114, ^b116;
^b114:
    i32 %508 = load i32* %a;
    i1 %509 = scmp lt i32 %508, i32 62;
    i32 %510 = zext i1 %509 to i32;
    i1 %511 = scmp neq i32 %510, i32 0;
    ubr ^b116;
^b115:
    ubr ^b112;
^b116:
    i1 %512 = phi [^b114, i1 %511] [^if.then37, i1 false];
    i32 %513 = zext i1 %512 to i32;
    i1 %514 = scmp neq i32 %513, i32 0;
    cbr i1 %514(prob = 0.5), ^if.then38, ^if.else38;
^if.else38:
    i32 %515 = load i32* %res;
    i32 %516 = add i32 %515, i32 62;
    store i32* %res with i32 %516;
    ubr ^b118;
^if.then38:
    i32 %517 = load i32* %a;
    i1 %518 = scmp gt i32 %517, i32 0;
    i32 %519 = zext i1 %518 to i32;
    i1 %520 = scmp neq i32 %519, i32 0;
    cbr i1 %520(prob = 0.5), ^b117, ^b119;
^b117:
    i32 %521 = load i32* %a;
    i1 %522 = scmp lt i32 %521, i32 61;
    i32 %523 = zext i1 %522 to i32;
    i1 %524 = scmp neq i32 %523, i32 0;
    ubr ^b119;
^b118:
    ubr ^b115;
^b119:
    i1 %525 = phi [^b117, i1 %524] [^if.then38, i1 false];
    i32 %526 = zext i1 %525 to i32;
    i1 %527 = scmp neq i32 %526, i32 0;
    cbr i1 %527(prob = 0.5), ^if.then39, ^if.else39;
^if.else39:
    i32 %528 = load i32* %res;
    i32 %529 = add i32 %528, i32 61;
    store i32* %res with i32 %529;
    ubr ^b121;
^if.then39:
    i32 %530 = load i32* %a;
    i1 %531 = scmp gt i32 %530, i32 0;
    i32 %532 = zext i1 %531 to i32;
    i1 %533 = scmp neq i32 %532, i32 0;
    cbr i1 %533(prob = 0.5), ^b120, ^b122;
^b120:
    i32 %534 = load i32* %a;
    i1 %535 = scmp lt i32 %534, i32 60;
    i32 %536 = zext i1 %535 to i32;
    i1 %537 = scmp neq i32 %536, i32 0;
    ubr ^b122;
^b121:
    ubr ^b118;
^b122:
    i1 %538 = phi [^b120, i1 %537] [^if.then39, i1 false];
    i32 %539 = zext i1 %538 to i32;
    i1 %540 = scmp neq i32 %539, i32 0;
    cbr i1 %540(prob = 0.5), ^if.then40, ^if.else40;
^if.else40:
    i32 %541 = load i32* %res;
    i32 %542 = add i32 %541, i32 60;
    store i32* %res with i32 %542;
    ubr ^b124;
^if.then40:
    i32 %543 = load i32* %a;
    i1 %544 = scmp gt i32 %543, i32 0;
    i32 %545 = zext i1 %544 to i32;
    i1 %546 = scmp neq i32 %545, i32 0;
    cbr i1 %546(prob = 0.5), ^b123, ^b125;
^b123:
    i32 %547 = load i32* %a;
    i1 %548 = scmp lt i32 %547, i32 59;
    i32 %549 = zext i1 %548 to i32;
    i1 %550 = scmp neq i32 %549, i32 0;
    ubr ^b125;
^b124:
    ubr ^b121;
^b125:
    i1 %551 = phi [^b123, i1 %550] [^if.then40, i1 false];
    i32 %552 = zext i1 %551 to i32;
    i1 %553 = scmp neq i32 %552, i32 0;
    cbr i1 %553(prob = 0.5), ^if.then41, ^if.else41;
^if.else41:
    i32 %554 = load i32* %res;
    i32 %555 = add i32 %554, i32 59;
    store i32* %res with i32 %555;
    ubr ^b127;
^if.then41:
    i32 %556 = load i32* %a;
    i1 %557 = scmp gt i32 %556, i32 0;
    i32 %558 = zext i1 %557 to i32;
    i1 %559 = scmp neq i32 %558, i32 0;
    cbr i1 %559(prob = 0.5), ^b126, ^b128;
^b126:
    i32 %560 = load i32* %a;
    i1 %561 = scmp lt i32 %560, i32 58;
    i32 %562 = zext i1 %561 to i32;
    i1 %563 = scmp neq i32 %562, i32 0;
    ubr ^b128;
^b127:
    ubr ^b124;
^b128:
    i1 %564 = phi [^b126, i1 %563] [^if.then41, i1 false];
    i32 %565 = zext i1 %564 to i32;
    i1 %566 = scmp neq i32 %565, i32 0;
    cbr i1 %566(prob = 0.5), ^if.then42, ^if.else42;
^if.else42:
    i32 %567 = load i32* %res;
    i32 %568 = add i32 %567, i32 58;
    store i32* %res with i32 %568;
    ubr ^b130;
^if.then42:
    i32 %569 = load i32* %a;
    i1 %570 = scmp gt i32 %569, i32 0;
    i32 %571 = zext i1 %570 to i32;
    i1 %572 = scmp neq i32 %571, i32 0;
    cbr i1 %572(prob = 0.5), ^b129, ^b131;
^b129:
    i32 %573 = load i32* %a;
    i1 %574 = scmp lt i32 %573, i32 57;
    i32 %575 = zext i1 %574 to i32;
    i1 %576 = scmp neq i32 %575, i32 0;
    ubr ^b131;
^b130:
    ubr ^b127;
^b131:
    i1 %577 = phi [^b129, i1 %576] [^if.then42, i1 false];
    i32 %578 = zext i1 %577 to i32;
    i1 %579 = scmp neq i32 %578, i32 0;
    cbr i1 %579(prob = 0.5), ^if.then43, ^if.else43;
^if.else43:
    i32 %580 = load i32* %res;
    i32 %581 = add i32 %580, i32 57;
    store i32* %res with i32 %581;
    ubr ^b133;
^if.then43:
    i32 %582 = load i32* %a;
    i1 %583 = scmp gt i32 %582, i32 0;
    i32 %584 = zext i1 %583 to i32;
    i1 %585 = scmp neq i32 %584, i32 0;
    cbr i1 %585(prob = 0.5), ^b132, ^b134;
^b132:
    i32 %586 = load i32* %a;
    i1 %587 = scmp lt i32 %586, i32 56;
    i32 %588 = zext i1 %587 to i32;
    i1 %589 = scmp neq i32 %588, i32 0;
    ubr ^b134;
^b133:
    ubr ^b130;
^b134:
    i1 %590 = phi [^b132, i1 %589] [^if.then43, i1 false];
    i32 %591 = zext i1 %590 to i32;
    i1 %592 = scmp neq i32 %591, i32 0;
    cbr i1 %592(prob = 0.5), ^if.then44, ^if.else44;
^if.else44:
    i32 %593 = load i32* %res;
    i32 %594 = add i32 %593, i32 56;
    store i32* %res with i32 %594;
    ubr ^b136;
^if.then44:
    i32 %595 = load i32* %a;
    i1 %596 = scmp gt i32 %595, i32 0;
    i32 %597 = zext i1 %596 to i32;
    i1 %598 = scmp neq i32 %597, i32 0;
    cbr i1 %598(prob = 0.5), ^b135, ^b137;
^b135:
    i32 %599 = load i32* %a;
    i1 %600 = scmp lt i32 %599, i32 55;
    i32 %601 = zext i1 %600 to i32;
    i1 %602 = scmp neq i32 %601, i32 0;
    ubr ^b137;
^b136:
    ubr ^b133;
^b137:
    i1 %603 = phi [^b135, i1 %602] [^if.then44, i1 false];
    i32 %604 = zext i1 %603 to i32;
    i1 %605 = scmp neq i32 %604, i32 0;
    cbr i1 %605(prob = 0.5), ^if.then45, ^if.else45;
^if.else45:
    i32 %606 = load i32* %res;
    i32 %607 = add i32 %606, i32 55;
    store i32* %res with i32 %607;
    ubr ^b139;
^if.then45:
    i32 %608 = load i32* %a;
    i1 %609 = scmp gt i32 %608, i32 0;
    i32 %610 = zext i1 %609 to i32;
    i1 %611 = scmp neq i32 %610, i32 0;
    cbr i1 %611(prob = 0.5), ^b138, ^b140;
^b138:
    i32 %612 = load i32* %a;
    i1 %613 = scmp lt i32 %612, i32 54;
    i32 %614 = zext i1 %613 to i32;
    i1 %615 = scmp neq i32 %614, i32 0;
    ubr ^b140;
^b139:
    ubr ^b136;
^b140:
    i1 %616 = phi [^b138, i1 %615] [^if.then45, i1 false];
    i32 %617 = zext i1 %616 to i32;
    i1 %618 = scmp neq i32 %617, i32 0;
    cbr i1 %618(prob = 0.5), ^if.then46, ^if.else46;
^if.else46:
    i32 %619 = load i32* %res;
    i32 %620 = add i32 %619, i32 54;
    store i32* %res with i32 %620;
    ubr ^b142;
^if.then46:
    i32 %621 = load i32* %a;
    i1 %622 = scmp gt i32 %621, i32 0;
    i32 %623 = zext i1 %622 to i32;
    i1 %624 = scmp neq i32 %623, i32 0;
    cbr i1 %624(prob = 0.5), ^b141, ^b143;
^b141:
    i32 %625 = load i32* %a;
    i1 %626 = scmp lt i32 %625, i32 53;
    i32 %627 = zext i1 %626 to i32;
    i1 %628 = scmp neq i32 %627, i32 0;
    ubr ^b143;
^b142:
    ubr ^b139;
^b143:
    i1 %629 = phi [^b141, i1 %628] [^if.then46, i1 false];
    i32 %630 = zext i1 %629 to i32;
    i1 %631 = scmp neq i32 %630, i32 0;
    cbr i1 %631(prob = 0.5), ^if.then47, ^if.else47;
^if.else47:
    i32 %632 = load i32* %res;
    i32 %633 = add i32 %632, i32 53;
    store i32* %res with i32 %633;
    ubr ^b145;
^if.then47:
    i32 %634 = load i32* %a;
    i1 %635 = scmp gt i32 %634, i32 0;
    i32 %636 = zext i1 %635 to i32;
    i1 %637 = scmp neq i32 %636, i32 0;
    cbr i1 %637(prob = 0.5), ^b144, ^b146;
^b144:
    i32 %638 = load i32* %a;
    i1 %639 = scmp lt i32 %638, i32 52;
    i32 %640 = zext i1 %639 to i32;
    i1 %641 = scmp neq i32 %640, i32 0;
    ubr ^b146;
^b145:
    ubr ^b142;
^b146:
    i1 %642 = phi [^b144, i1 %641] [^if.then47, i1 false];
    i32 %643 = zext i1 %642 to i32;
    i1 %644 = scmp neq i32 %643, i32 0;
    cbr i1 %644(prob = 0.5), ^if.then48, ^if.else48;
^if.else48:
    i32 %645 = load i32* %res;
    i32 %646 = add i32 %645, i32 52;
    store i32* %res with i32 %646;
    ubr ^b148;
^if.then48:
    i32 %647 = load i32* %a;
    i1 %648 = scmp gt i32 %647, i32 0;
    i32 %649 = zext i1 %648 to i32;
    i1 %650 = scmp neq i32 %649, i32 0;
    cbr i1 %650(prob = 0.5), ^b147, ^b149;
^b147:
    i32 %651 = load i32* %a;
    i1 %652 = scmp lt i32 %651, i32 51;
    i32 %653 = zext i1 %652 to i32;
    i1 %654 = scmp neq i32 %653, i32 0;
    ubr ^b149;
^b148:
    ubr ^b145;
^b149:
    i1 %655 = phi [^b147, i1 %654] [^if.then48, i1 false];
    i32 %656 = zext i1 %655 to i32;
    i1 %657 = scmp neq i32 %656, i32 0;
    cbr i1 %657(prob = 0.5), ^if.then49, ^if.else49;
^if.else49:
    i32 %658 = load i32* %res;
    i32 %659 = add i32 %658, i32 51;
    store i32* %res with i32 %659;
    ubr ^b151;
^if.then49:
    i32 %660 = load i32* %a;
    i1 %661 = scmp gt i32 %660, i32 0;
    i32 %662 = zext i1 %661 to i32;
    i1 %663 = scmp neq i32 %662, i32 0;
    cbr i1 %663(prob = 0.5), ^b150, ^b152;
^b150:
    i32 %664 = load i32* %a;
    i1 %665 = scmp lt i32 %664, i32 50;
    i32 %666 = zext i1 %665 to i32;
    i1 %667 = scmp neq i32 %666, i32 0;
    ubr ^b152;
^b151:
    ubr ^b148;
^b152:
    i1 %668 = phi [^b150, i1 %667] [^if.then49, i1 false];
    i32 %669 = zext i1 %668 to i32;
    i1 %670 = scmp neq i32 %669, i32 0;
    cbr i1 %670(prob = 0.5), ^if.then50, ^if.else50;
^if.else50:
    i32 %671 = load i32* %res;
    i32 %672 = add i32 %671, i32 50;
    store i32* %res with i32 %672;
    ubr ^b154;
^if.then50:
    i32 %673 = load i32* %a;
    i1 %674 = scmp gt i32 %673, i32 0;
    i32 %675 = zext i1 %674 to i32;
    i1 %676 = scmp neq i32 %675, i32 0;
    cbr i1 %676(prob = 0.5), ^b153, ^b155;
^b153:
    i32 %677 = load i32* %a;
    i1 %678 = scmp lt i32 %677, i32 49;
    i32 %679 = zext i1 %678 to i32;
    i1 %680 = scmp neq i32 %679, i32 0;
    ubr ^b155;
^b154:
    ubr ^b151;
^b155:
    i1 %681 = phi [^b153, i1 %680] [^if.then50, i1 false];
    i32 %682 = zext i1 %681 to i32;
    i1 %683 = scmp neq i32 %682, i32 0;
    cbr i1 %683(prob = 0.5), ^if.then51, ^if.else51;
^if.else51:
    i32 %684 = load i32* %res;
    i32 %685 = add i32 %684, i32 49;
    store i32* %res with i32 %685;
    ubr ^b157;
^if.then51:
    i32 %686 = load i32* %a;
    i1 %687 = scmp gt i32 %686, i32 0;
    i32 %688 = zext i1 %687 to i32;
    i1 %689 = scmp neq i32 %688, i32 0;
    cbr i1 %689(prob = 0.5), ^b156, ^b158;
^b156:
    i32 %690 = load i32* %a;
    i1 %691 = scmp lt i32 %690, i32 48;
    i32 %692 = zext i1 %691 to i32;
    i1 %693 = scmp neq i32 %692, i32 0;
    ubr ^b158;
^b157:
    ubr ^b154;
^b158:
    i1 %694 = phi [^b156, i1 %693] [^if.then51, i1 false];
    i32 %695 = zext i1 %694 to i32;
    i1 %696 = scmp neq i32 %695, i32 0;
    cbr i1 %696(prob = 0.5), ^if.then52, ^if.else52;
^if.else52:
    i32 %697 = load i32* %res;
    i32 %698 = add i32 %697, i32 48;
    store i32* %res with i32 %698;
    ubr ^b160;
^if.then52:
    i32 %699 = load i32* %a;
    i1 %700 = scmp gt i32 %699, i32 0;
    i32 %701 = zext i1 %700 to i32;
    i1 %702 = scmp neq i32 %701, i32 0;
    cbr i1 %702(prob = 0.5), ^b159, ^b161;
^b159:
    i32 %703 = load i32* %a;
    i1 %704 = scmp lt i32 %703, i32 47;
    i32 %705 = zext i1 %704 to i32;
    i1 %706 = scmp neq i32 %705, i32 0;
    ubr ^b161;
^b160:
    ubr ^b157;
^b161:
    i1 %707 = phi [^b159, i1 %706] [^if.then52, i1 false];
    i32 %708 = zext i1 %707 to i32;
    i1 %709 = scmp neq i32 %708, i32 0;
    cbr i1 %709(prob = 0.5), ^if.then53, ^if.else53;
^if.else53:
    i32 %710 = load i32* %res;
    i32 %711 = add i32 %710, i32 47;
    store i32* %res with i32 %711;
    ubr ^b163;
^if.then53:
    i32 %712 = load i32* %a;
    i1 %713 = scmp gt i32 %712, i32 0;
    i32 %714 = zext i1 %713 to i32;
    i1 %715 = scmp neq i32 %714, i32 0;
    cbr i1 %715(prob = 0.5), ^b162, ^b164;
^b162:
    i32 %716 = load i32* %a;
    i1 %717 = scmp lt i32 %716, i32 46;
    i32 %718 = zext i1 %717 to i32;
    i1 %719 = scmp neq i32 %718, i32 0;
    ubr ^b164;
^b163:
    ubr ^b160;
^b164:
    i1 %720 = phi [^b162, i1 %719] [^if.then53, i1 false];
    i32 %721 = zext i1 %720 to i32;
    i1 %722 = scmp neq i32 %721, i32 0;
    cbr i1 %722(prob = 0.5), ^if.then54, ^if.else54;
^if.else54:
    i32 %723 = load i32* %res;
    i32 %724 = add i32 %723, i32 46;
    store i32* %res with i32 %724;
    ubr ^b166;
^if.then54:
    i32 %725 = load i32* %a;
    i1 %726 = scmp gt i32 %725, i32 0;
    i32 %727 = zext i1 %726 to i32;
    i1 %728 = scmp neq i32 %727, i32 0;
    cbr i1 %728(prob = 0.5), ^b165, ^b167;
^b165:
    i32 %729 = load i32* %a;
    i1 %730 = scmp lt i32 %729, i32 45;
    i32 %731 = zext i1 %730 to i32;
    i1 %732 = scmp neq i32 %731, i32 0;
    ubr ^b167;
^b166:
    ubr ^b163;
^b167:
    i1 %733 = phi [^b165, i1 %732] [^if.then54, i1 false];
    i32 %734 = zext i1 %733 to i32;
    i1 %735 = scmp neq i32 %734, i32 0;
    cbr i1 %735(prob = 0.5), ^if.then55, ^if.else55;
^if.else55:
    i32 %736 = load i32* %res;
    i32 %737 = add i32 %736, i32 45;
    store i32* %res with i32 %737;
    ubr ^b169;
^if.then55:
    i32 %738 = load i32* %a;
    i1 %739 = scmp gt i32 %738, i32 0;
    i32 %740 = zext i1 %739 to i32;
    i1 %741 = scmp neq i32 %740, i32 0;
    cbr i1 %741(prob = 0.5), ^b168, ^b170;
^b168:
    i32 %742 = load i32* %a;
    i1 %743 = scmp lt i32 %742, i32 44;
    i32 %744 = zext i1 %743 to i32;
    i1 %745 = scmp neq i32 %744, i32 0;
    ubr ^b170;
^b169:
    ubr ^b166;
^b170:
    i1 %746 = phi [^b168, i1 %745] [^if.then55, i1 false];
    i32 %747 = zext i1 %746 to i32;
    i1 %748 = scmp neq i32 %747, i32 0;
    cbr i1 %748(prob = 0.5), ^if.then56, ^if.else56;
^if.else56:
    i32 %749 = load i32* %res;
    i32 %750 = add i32 %749, i32 44;
    store i32* %res with i32 %750;
    ubr ^b172;
^if.then56:
    i32 %751 = load i32* %a;
    i1 %752 = scmp gt i32 %751, i32 0;
    i32 %753 = zext i1 %752 to i32;
    i1 %754 = scmp neq i32 %753, i32 0;
    cbr i1 %754(prob = 0.5), ^b171, ^b173;
^b171:
    i32 %755 = load i32* %a;
    i1 %756 = scmp lt i32 %755, i32 43;
    i32 %757 = zext i1 %756 to i32;
    i1 %758 = scmp neq i32 %757, i32 0;
    ubr ^b173;
^b172:
    ubr ^b169;
^b173:
    i1 %759 = phi [^b171, i1 %758] [^if.then56, i1 false];
    i32 %760 = zext i1 %759 to i32;
    i1 %761 = scmp neq i32 %760, i32 0;
    cbr i1 %761(prob = 0.5), ^if.then57, ^if.else57;
^if.else57:
    i32 %762 = load i32* %res;
    i32 %763 = add i32 %762, i32 43;
    store i32* %res with i32 %763;
    ubr ^b175;
^if.then57:
    i32 %764 = load i32* %a;
    i1 %765 = scmp gt i32 %764, i32 0;
    i32 %766 = zext i1 %765 to i32;
    i1 %767 = scmp neq i32 %766, i32 0;
    cbr i1 %767(prob = 0.5), ^b174, ^b176;
^b174:
    i32 %768 = load i32* %a;
    i1 %769 = scmp lt i32 %768, i32 42;
    i32 %770 = zext i1 %769 to i32;
    i1 %771 = scmp neq i32 %770, i32 0;
    ubr ^b176;
^b175:
    ubr ^b172;
^b176:
    i1 %772 = phi [^b174, i1 %771] [^if.then57, i1 false];
    i32 %773 = zext i1 %772 to i32;
    i1 %774 = scmp neq i32 %773, i32 0;
    cbr i1 %774(prob = 0.5), ^if.then58, ^if.else58;
^if.else58:
    i32 %775 = load i32* %res;
    i32 %776 = add i32 %775, i32 42;
    store i32* %res with i32 %776;
    ubr ^b178;
^if.then58:
    i32 %777 = load i32* %a;
    i1 %778 = scmp gt i32 %777, i32 0;
    i32 %779 = zext i1 %778 to i32;
    i1 %780 = scmp neq i32 %779, i32 0;
    cbr i1 %780(prob = 0.5), ^b177, ^b179;
^b177:
    i32 %781 = load i32* %a;
    i1 %782 = scmp lt i32 %781, i32 41;
    i32 %783 = zext i1 %782 to i32;
    i1 %784 = scmp neq i32 %783, i32 0;
    ubr ^b179;
^b178:
    ubr ^b175;
^b179:
    i1 %785 = phi [^b177, i1 %784] [^if.then58, i1 false];
    i32 %786 = zext i1 %785 to i32;
    i1 %787 = scmp neq i32 %786, i32 0;
    cbr i1 %787(prob = 0.5), ^if.then59, ^if.else59;
^if.else59:
    i32 %788 = load i32* %res;
    i32 %789 = add i32 %788, i32 41;
    store i32* %res with i32 %789;
    ubr ^b181;
^if.then59:
    i32 %790 = load i32* %a;
    i1 %791 = scmp gt i32 %790, i32 0;
    i32 %792 = zext i1 %791 to i32;
    i1 %793 = scmp neq i32 %792, i32 0;
    cbr i1 %793(prob = 0.5), ^b180, ^b182;
^b180:
    i32 %794 = load i32* %a;
    i1 %795 = scmp lt i32 %794, i32 40;
    i32 %796 = zext i1 %795 to i32;
    i1 %797 = scmp neq i32 %796, i32 0;
    ubr ^b182;
^b181:
    ubr ^b178;
^b182:
    i1 %798 = phi [^b180, i1 %797] [^if.then59, i1 false];
    i32 %799 = zext i1 %798 to i32;
    i1 %800 = scmp neq i32 %799, i32 0;
    cbr i1 %800(prob = 0.5), ^if.then60, ^if.else60;
^if.else60:
    i32 %801 = load i32* %res;
    i32 %802 = add i32 %801, i32 40;
    store i32* %res with i32 %802;
    ubr ^b184;
^if.then60:
    i32 %803 = load i32* %a;
    i1 %804 = scmp gt i32 %803, i32 0;
    i32 %805 = zext i1 %804 to i32;
    i1 %806 = scmp neq i32 %805, i32 0;
    cbr i1 %806(prob = 0.5), ^b183, ^b185;
^b183:
    i32 %807 = load i32* %a;
    i1 %808 = scmp lt i32 %807, i32 39;
    i32 %809 = zext i1 %808 to i32;
    i1 %810 = scmp neq i32 %809, i32 0;
    ubr ^b185;
^b184:
    ubr ^b181;
^b185:
    i1 %811 = phi [^b183, i1 %810] [^if.then60, i1 false];
    i32 %812 = zext i1 %811 to i32;
    i1 %813 = scmp neq i32 %812, i32 0;
    cbr i1 %813(prob = 0.5), ^if.then61, ^if.else61;
^if.else61:
    i32 %814 = load i32* %res;
    i32 %815 = add i32 %814, i32 39;
    store i32* %res with i32 %815;
    ubr ^b187;
^if.then61:
    i32 %816 = load i32* %a;
    i1 %817 = scmp gt i32 %816, i32 0;
    i32 %818 = zext i1 %817 to i32;
    i1 %819 = scmp neq i32 %818, i32 0;
    cbr i1 %819(prob = 0.5), ^b186, ^b188;
^b186:
    i32 %820 = load i32* %a;
    i1 %821 = scmp lt i32 %820, i32 38;
    i32 %822 = zext i1 %821 to i32;
    i1 %823 = scmp neq i32 %822, i32 0;
    ubr ^b188;
^b187:
    ubr ^b184;
^b188:
    i1 %824 = phi [^b186, i1 %823] [^if.then61, i1 false];
    i32 %825 = zext i1 %824 to i32;
    i1 %826 = scmp neq i32 %825, i32 0;
    cbr i1 %826(prob = 0.5), ^if.then62, ^if.else62;
^if.else62:
    i32 %827 = load i32* %res;
    i32 %828 = add i32 %827, i32 38;
    store i32* %res with i32 %828;
    ubr ^b190;
^if.then62:
    i32 %829 = load i32* %a;
    i1 %830 = scmp gt i32 %829, i32 0;
    i32 %831 = zext i1 %830 to i32;
    i1 %832 = scmp neq i32 %831, i32 0;
    cbr i1 %832(prob = 0.5), ^b189, ^b191;
^b189:
    i32 %833 = load i32* %a;
    i1 %834 = scmp lt i32 %833, i32 37;
    i32 %835 = zext i1 %834 to i32;
    i1 %836 = scmp neq i32 %835, i32 0;
    ubr ^b191;
^b190:
    ubr ^b187;
^b191:
    i1 %837 = phi [^b189, i1 %836] [^if.then62, i1 false];
    i32 %838 = zext i1 %837 to i32;
    i1 %839 = scmp neq i32 %838, i32 0;
    cbr i1 %839(prob = 0.5), ^if.then63, ^if.else63;
^if.else63:
    i32 %840 = load i32* %res;
    i32 %841 = add i32 %840, i32 37;
    store i32* %res with i32 %841;
    ubr ^b193;
^if.then63:
    i32 %842 = load i32* %a;
    i1 %843 = scmp gt i32 %842, i32 0;
    i32 %844 = zext i1 %843 to i32;
    i1 %845 = scmp neq i32 %844, i32 0;
    cbr i1 %845(prob = 0.5), ^b192, ^b194;
^b192:
    i32 %846 = load i32* %a;
    i1 %847 = scmp lt i32 %846, i32 36;
    i32 %848 = zext i1 %847 to i32;
    i1 %849 = scmp neq i32 %848, i32 0;
    ubr ^b194;
^b193:
    ubr ^b190;
^b194:
    i1 %850 = phi [^b192, i1 %849] [^if.then63, i1 false];
    i32 %851 = zext i1 %850 to i32;
    i1 %852 = scmp neq i32 %851, i32 0;
    cbr i1 %852(prob = 0.5), ^if.then64, ^if.else64;
^if.else64:
    i32 %853 = load i32* %res;
    i32 %854 = add i32 %853, i32 36;
    store i32* %res with i32 %854;
    ubr ^b196;
^if.then64:
    i32 %855 = load i32* %a;
    i1 %856 = scmp gt i32 %855, i32 0;
    i32 %857 = zext i1 %856 to i32;
    i1 %858 = scmp neq i32 %857, i32 0;
    cbr i1 %858(prob = 0.5), ^b195, ^b197;
^b195:
    i32 %859 = load i32* %a;
    i1 %860 = scmp lt i32 %859, i32 35;
    i32 %861 = zext i1 %860 to i32;
    i1 %862 = scmp neq i32 %861, i32 0;
    ubr ^b197;
^b196:
    ubr ^b193;
^b197:
    i1 %863 = phi [^b195, i1 %862] [^if.then64, i1 false];
    i32 %864 = zext i1 %863 to i32;
    i1 %865 = scmp neq i32 %864, i32 0;
    cbr i1 %865(prob = 0.5), ^if.then65, ^if.else65;
^if.else65:
    i32 %866 = load i32* %res;
    i32 %867 = add i32 %866, i32 35;
    store i32* %res with i32 %867;
    ubr ^b199;
^if.then65:
    i32 %868 = load i32* %a;
    i1 %869 = scmp gt i32 %868, i32 0;
    i32 %870 = zext i1 %869 to i32;
    i1 %871 = scmp neq i32 %870, i32 0;
    cbr i1 %871(prob = 0.5), ^b198, ^b200;
^b198:
    i32 %872 = load i32* %a;
    i1 %873 = scmp lt i32 %872, i32 34;
    i32 %874 = zext i1 %873 to i32;
    i1 %875 = scmp neq i32 %874, i32 0;
    ubr ^b200;
^b199:
    ubr ^b196;
^b200:
    i1 %876 = phi [^b198, i1 %875] [^if.then65, i1 false];
    i32 %877 = zext i1 %876 to i32;
    i1 %878 = scmp neq i32 %877, i32 0;
    cbr i1 %878(prob = 0.5), ^if.then66, ^if.else66;
^if.else66:
    i32 %879 = load i32* %res;
    i32 %880 = add i32 %879, i32 34;
    store i32* %res with i32 %880;
    ubr ^b202;
^if.then66:
    i32 %881 = load i32* %a;
    i1 %882 = scmp gt i32 %881, i32 0;
    i32 %883 = zext i1 %882 to i32;
    i1 %884 = scmp neq i32 %883, i32 0;
    cbr i1 %884(prob = 0.5), ^b201, ^b203;
^b201:
    i32 %885 = load i32* %a;
    i1 %886 = scmp lt i32 %885, i32 33;
    i32 %887 = zext i1 %886 to i32;
    i1 %888 = scmp neq i32 %887, i32 0;
    ubr ^b203;
^b202:
    ubr ^b199;
^b203:
    i1 %889 = phi [^b201, i1 %888] [^if.then66, i1 false];
    i32 %890 = zext i1 %889 to i32;
    i1 %891 = scmp neq i32 %890, i32 0;
    cbr i1 %891(prob = 0.5), ^if.then67, ^if.else67;
^if.else67:
    i32 %892 = load i32* %res;
    i32 %893 = add i32 %892, i32 33;
    store i32* %res with i32 %893;
    ubr ^b205;
^if.then67:
    i32 %894 = load i32* %a;
    i1 %895 = scmp gt i32 %894, i32 0;
    i32 %896 = zext i1 %895 to i32;
    i1 %897 = scmp neq i32 %896, i32 0;
    cbr i1 %897(prob = 0.5), ^b204, ^b206;
^b204:
    i32 %898 = load i32* %a;
    i1 %899 = scmp lt i32 %898, i32 32;
    i32 %900 = zext i1 %899 to i32;
    i1 %901 = scmp neq i32 %900, i32 0;
    ubr ^b206;
^b205:
    ubr ^b202;
^b206:
    i1 %902 = phi [^b204, i1 %901] [^if.then67, i1 false];
    i32 %903 = zext i1 %902 to i32;
    i1 %904 = scmp neq i32 %903, i32 0;
    cbr i1 %904(prob = 0.5), ^if.then68, ^if.else68;
^if.else68:
    i32 %905 = load i32* %res;
    i32 %906 = add i32 %905, i32 32;
    store i32* %res with i32 %906;
    ubr ^b208;
^if.then68:
    i32 %907 = load i32* %a;
    i1 %908 = scmp gt i32 %907, i32 0;
    i32 %909 = zext i1 %908 to i32;
    i1 %910 = scmp neq i32 %909, i32 0;
    cbr i1 %910(prob = 0.5), ^b207, ^b209;
^b207:
    i32 %911 = load i32* %a;
    i1 %912 = scmp lt i32 %911, i32 31;
    i32 %913 = zext i1 %912 to i32;
    i1 %914 = scmp neq i32 %913, i32 0;
    ubr ^b209;
^b208:
    ubr ^b205;
^b209:
    i1 %915 = phi [^b207, i1 %914] [^if.then68, i1 false];
    i32 %916 = zext i1 %915 to i32;
    i1 %917 = scmp neq i32 %916, i32 0;
    cbr i1 %917(prob = 0.5), ^if.then69, ^if.else69;
^if.else69:
    i32 %918 = load i32* %res;
    i32 %919 = add i32 %918, i32 31;
    store i32* %res with i32 %919;
    ubr ^b211;
^if.then69:
    i32 %920 = load i32* %a;
    i1 %921 = scmp gt i32 %920, i32 0;
    i32 %922 = zext i1 %921 to i32;
    i1 %923 = scmp neq i32 %922, i32 0;
    cbr i1 %923(prob = 0.5), ^b210, ^b212;
^b210:
    i32 %924 = load i32* %a;
    i1 %925 = scmp lt i32 %924, i32 30;
    i32 %926 = zext i1 %925 to i32;
    i1 %927 = scmp neq i32 %926, i32 0;
    ubr ^b212;
^b211:
    ubr ^b208;
^b212:
    i1 %928 = phi [^b210, i1 %927] [^if.then69, i1 false];
    i32 %929 = zext i1 %928 to i32;
    i1 %930 = scmp neq i32 %929, i32 0;
    cbr i1 %930(prob = 0.5), ^if.then70, ^if.else70;
^if.else70:
    i32 %931 = load i32* %res;
    i32 %932 = add i32 %931, i32 30;
    store i32* %res with i32 %932;
    ubr ^b214;
^if.then70:
    i32 %933 = load i32* %a;
    i1 %934 = scmp gt i32 %933, i32 0;
    i32 %935 = zext i1 %934 to i32;
    i1 %936 = scmp neq i32 %935, i32 0;
    cbr i1 %936(prob = 0.5), ^b213, ^b215;
^b213:
    i32 %937 = load i32* %a;
    i1 %938 = scmp lt i32 %937, i32 29;
    i32 %939 = zext i1 %938 to i32;
    i1 %940 = scmp neq i32 %939, i32 0;
    ubr ^b215;
^b214:
    ubr ^b211;
^b215:
    i1 %941 = phi [^b213, i1 %940] [^if.then70, i1 false];
    i32 %942 = zext i1 %941 to i32;
    i1 %943 = scmp neq i32 %942, i32 0;
    cbr i1 %943(prob = 0.5), ^if.then71, ^if.else71;
^if.else71:
    i32 %944 = load i32* %res;
    i32 %945 = add i32 %944, i32 29;
    store i32* %res with i32 %945;
    ubr ^b217;
^if.then71:
    i32 %946 = load i32* %a;
    i1 %947 = scmp gt i32 %946, i32 0;
    i32 %948 = zext i1 %947 to i32;
    i1 %949 = scmp neq i32 %948, i32 0;
    cbr i1 %949(prob = 0.5), ^b216, ^b218;
^b216:
    i32 %950 = load i32* %a;
    i1 %951 = scmp lt i32 %950, i32 28;
    i32 %952 = zext i1 %951 to i32;
    i1 %953 = scmp neq i32 %952, i32 0;
    ubr ^b218;
^b217:
    ubr ^b214;
^b218:
    i1 %954 = phi [^b216, i1 %953] [^if.then71, i1 false];
    i32 %955 = zext i1 %954 to i32;
    i1 %956 = scmp neq i32 %955, i32 0;
    cbr i1 %956(prob = 0.5), ^if.then72, ^if.else72;
^if.else72:
    i32 %957 = load i32* %res;
    i32 %958 = add i32 %957, i32 28;
    store i32* %res with i32 %958;
    ubr ^b220;
^if.then72:
    i32 %959 = load i32* %a;
    i1 %960 = scmp gt i32 %959, i32 0;
    i32 %961 = zext i1 %960 to i32;
    i1 %962 = scmp neq i32 %961, i32 0;
    cbr i1 %962(prob = 0.5), ^b219, ^b221;
^b219:
    i32 %963 = load i32* %a;
    i1 %964 = scmp lt i32 %963, i32 27;
    i32 %965 = zext i1 %964 to i32;
    i1 %966 = scmp neq i32 %965, i32 0;
    ubr ^b221;
^b220:
    ubr ^b217;
^b221:
    i1 %967 = phi [^b219, i1 %966] [^if.then72, i1 false];
    i32 %968 = zext i1 %967 to i32;
    i1 %969 = scmp neq i32 %968, i32 0;
    cbr i1 %969(prob = 0.5), ^if.then73, ^if.else73;
^if.else73:
    i32 %970 = load i32* %res;
    i32 %971 = add i32 %970, i32 27;
    store i32* %res with i32 %971;
    ubr ^b223;
^if.then73:
    i32 %972 = load i32* %a;
    i1 %973 = scmp gt i32 %972, i32 0;
    i32 %974 = zext i1 %973 to i32;
    i1 %975 = scmp neq i32 %974, i32 0;
    cbr i1 %975(prob = 0.5), ^b222, ^b224;
^b222:
    i32 %976 = load i32* %a;
    i1 %977 = scmp lt i32 %976, i32 26;
    i32 %978 = zext i1 %977 to i32;
    i1 %979 = scmp neq i32 %978, i32 0;
    ubr ^b224;
^b223:
    ubr ^b220;
^b224:
    i1 %980 = phi [^b222, i1 %979] [^if.then73, i1 false];
    i32 %981 = zext i1 %980 to i32;
    i1 %982 = scmp neq i32 %981, i32 0;
    cbr i1 %982(prob = 0.5), ^if.then74, ^if.else74;
^if.else74:
    i32 %983 = load i32* %res;
    i32 %984 = add i32 %983, i32 26;
    store i32* %res with i32 %984;
    ubr ^b226;
^if.then74:
    i32 %985 = load i32* %a;
    i1 %986 = scmp gt i32 %985, i32 0;
    i32 %987 = zext i1 %986 to i32;
    i1 %988 = scmp neq i32 %987, i32 0;
    cbr i1 %988(prob = 0.5), ^b225, ^b227;
^b225:
    i32 %989 = load i32* %a;
    i1 %990 = scmp lt i32 %989, i32 25;
    i32 %991 = zext i1 %990 to i32;
    i1 %992 = scmp neq i32 %991, i32 0;
    ubr ^b227;
^b226:
    ubr ^b223;
^b227:
    i1 %993 = phi [^b225, i1 %992] [^if.then74, i1 false];
    i32 %994 = zext i1 %993 to i32;
    i1 %995 = scmp neq i32 %994, i32 0;
    cbr i1 %995(prob = 0.5), ^if.then75, ^if.else75;
^if.else75:
    i32 %996 = load i32* %res;
    i32 %997 = add i32 %996, i32 25;
    store i32* %res with i32 %997;
    ubr ^b229;
^if.then75:
    i32 %998 = load i32* %a;
    i1 %999 = scmp gt i32 %998, i32 0;
    i32 %1000 = zext i1 %999 to i32;
    i1 %1001 = scmp neq i32 %1000, i32 0;
    cbr i1 %1001(prob = 0.5), ^b228, ^b230;
^b228:
    i32 %1002 = load i32* %a;
    i1 %1003 = scmp lt i32 %1002, i32 24;
    i32 %1004 = zext i1 %1003 to i32;
    i1 %1005 = scmp neq i32 %1004, i32 0;
    ubr ^b230;
^b229:
    ubr ^b226;
^b230:
    i1 %1006 = phi [^b228, i1 %1005] [^if.then75, i1 false];
    i32 %1007 = zext i1 %1006 to i32;
    i1 %1008 = scmp neq i32 %1007, i32 0;
    cbr i1 %1008(prob = 0.5), ^if.then76, ^if.else76;
^if.else76:
    i32 %1009 = load i32* %res;
    i32 %1010 = add i32 %1009, i32 24;
    store i32* %res with i32 %1010;
    ubr ^b232;
^if.then76:
    i32 %1011 = load i32* %a;
    i1 %1012 = scmp gt i32 %1011, i32 0;
    i32 %1013 = zext i1 %1012 to i32;
    i1 %1014 = scmp neq i32 %1013, i32 0;
    cbr i1 %1014(prob = 0.5), ^b231, ^b233;
^b231:
    i32 %1015 = load i32* %a;
    i1 %1016 = scmp lt i32 %1015, i32 23;
    i32 %1017 = zext i1 %1016 to i32;
    i1 %1018 = scmp neq i32 %1017, i32 0;
    ubr ^b233;
^b232:
    ubr ^b229;
^b233:
    i1 %1019 = phi [^b231, i1 %1018] [^if.then76, i1 false];
    i32 %1020 = zext i1 %1019 to i32;
    i1 %1021 = scmp neq i32 %1020, i32 0;
    cbr i1 %1021(prob = 0.5), ^if.then77, ^if.else77;
^if.else77:
    i32 %1022 = load i32* %res;
    i32 %1023 = add i32 %1022, i32 23;
    store i32* %res with i32 %1023;
    ubr ^b235;
^if.then77:
    i32 %1024 = load i32* %a;
    i1 %1025 = scmp gt i32 %1024, i32 0;
    i32 %1026 = zext i1 %1025 to i32;
    i1 %1027 = scmp neq i32 %1026, i32 0;
    cbr i1 %1027(prob = 0.5), ^b234, ^b236;
^b234:
    i32 %1028 = load i32* %a;
    i1 %1029 = scmp lt i32 %1028, i32 22;
    i32 %1030 = zext i1 %1029 to i32;
    i1 %1031 = scmp neq i32 %1030, i32 0;
    ubr ^b236;
^b235:
    ubr ^b232;
^b236:
    i1 %1032 = phi [^b234, i1 %1031] [^if.then77, i1 false];
    i32 %1033 = zext i1 %1032 to i32;
    i1 %1034 = scmp neq i32 %1033, i32 0;
    cbr i1 %1034(prob = 0.5), ^if.then78, ^if.else78;
^if.else78:
    i32 %1035 = load i32* %res;
    i32 %1036 = add i32 %1035, i32 22;
    store i32* %res with i32 %1036;
    ubr ^b238;
^if.then78:
    i32 %1037 = load i32* %a;
    i1 %1038 = scmp gt i32 %1037, i32 0;
    i32 %1039 = zext i1 %1038 to i32;
    i1 %1040 = scmp neq i32 %1039, i32 0;
    cbr i1 %1040(prob = 0.5), ^b237, ^b239;
^b237:
    i32 %1041 = load i32* %a;
    i1 %1042 = scmp lt i32 %1041, i32 21;
    i32 %1043 = zext i1 %1042 to i32;
    i1 %1044 = scmp neq i32 %1043, i32 0;
    ubr ^b239;
^b238:
    ubr ^b235;
^b239:
    i1 %1045 = phi [^b237, i1 %1044] [^if.then78, i1 false];
    i32 %1046 = zext i1 %1045 to i32;
    i1 %1047 = scmp neq i32 %1046, i32 0;
    cbr i1 %1047(prob = 0.5), ^if.then79, ^if.else79;
^if.else79:
    i32 %1048 = load i32* %res;
    i32 %1049 = add i32 %1048, i32 21;
    store i32* %res with i32 %1049;
    ubr ^b241;
^if.then79:
    i32 %1050 = load i32* %a;
    i1 %1051 = scmp gt i32 %1050, i32 0;
    i32 %1052 = zext i1 %1051 to i32;
    i1 %1053 = scmp neq i32 %1052, i32 0;
    cbr i1 %1053(prob = 0.5), ^b240, ^b242;
^b240:
    i32 %1054 = load i32* %a;
    i1 %1055 = scmp lt i32 %1054, i32 20;
    i32 %1056 = zext i1 %1055 to i32;
    i1 %1057 = scmp neq i32 %1056, i32 0;
    ubr ^b242;
^b241:
    ubr ^b238;
^b242:
    i1 %1058 = phi [^b240, i1 %1057] [^if.then79, i1 false];
    i32 %1059 = zext i1 %1058 to i32;
    i1 %1060 = scmp neq i32 %1059, i32 0;
    cbr i1 %1060(prob = 0.5), ^if.then80, ^if.else80;
^if.else80:
    i32 %1061 = load i32* %res;
    i32 %1062 = add i32 %1061, i32 20;
    store i32* %res with i32 %1062;
    ubr ^b244;
^if.then80:
    i32 %1063 = load i32* %a;
    i1 %1064 = scmp gt i32 %1063, i32 0;
    i32 %1065 = zext i1 %1064 to i32;
    i1 %1066 = scmp neq i32 %1065, i32 0;
    cbr i1 %1066(prob = 0.5), ^b243, ^b245;
^b243:
    i32 %1067 = load i32* %a;
    i1 %1068 = scmp lt i32 %1067, i32 19;
    i32 %1069 = zext i1 %1068 to i32;
    i1 %1070 = scmp neq i32 %1069, i32 0;
    ubr ^b245;
^b244:
    ubr ^b241;
^b245:
    i1 %1071 = phi [^b243, i1 %1070] [^if.then80, i1 false];
    i32 %1072 = zext i1 %1071 to i32;
    i1 %1073 = scmp neq i32 %1072, i32 0;
    cbr i1 %1073(prob = 0.5), ^if.then81, ^if.else81;
^if.else81:
    i32 %1074 = load i32* %res;
    i32 %1075 = add i32 %1074, i32 19;
    store i32* %res with i32 %1075;
    ubr ^b247;
^if.then81:
    i32 %1076 = load i32* %a;
    i1 %1077 = scmp gt i32 %1076, i32 0;
    i32 %1078 = zext i1 %1077 to i32;
    i1 %1079 = scmp neq i32 %1078, i32 0;
    cbr i1 %1079(prob = 0.5), ^b246, ^b248;
^b246:
    i32 %1080 = load i32* %a;
    i1 %1081 = scmp lt i32 %1080, i32 18;
    i32 %1082 = zext i1 %1081 to i32;
    i1 %1083 = scmp neq i32 %1082, i32 0;
    ubr ^b248;
^b247:
    ubr ^b244;
^b248:
    i1 %1084 = phi [^b246, i1 %1083] [^if.then81, i1 false];
    i32 %1085 = zext i1 %1084 to i32;
    i1 %1086 = scmp neq i32 %1085, i32 0;
    cbr i1 %1086(prob = 0.5), ^if.then82, ^if.else82;
^if.else82:
    i32 %1087 = load i32* %res;
    i32 %1088 = add i32 %1087, i32 18;
    store i32* %res with i32 %1088;
    ubr ^b250;
^if.then82:
    i32 %1089 = load i32* %a;
    i1 %1090 = scmp gt i32 %1089, i32 0;
    i32 %1091 = zext i1 %1090 to i32;
    i1 %1092 = scmp neq i32 %1091, i32 0;
    cbr i1 %1092(prob = 0.5), ^b249, ^b251;
^b249:
    i32 %1093 = load i32* %a;
    i1 %1094 = scmp lt i32 %1093, i32 17;
    i32 %1095 = zext i1 %1094 to i32;
    i1 %1096 = scmp neq i32 %1095, i32 0;
    ubr ^b251;
^b250:
    ubr ^b247;
^b251:
    i1 %1097 = phi [^b249, i1 %1096] [^if.then82, i1 false];
    i32 %1098 = zext i1 %1097 to i32;
    i1 %1099 = scmp neq i32 %1098, i32 0;
    cbr i1 %1099(prob = 0.5), ^if.then83, ^if.else83;
^if.else83:
    i32 %1100 = load i32* %res;
    i32 %1101 = add i32 %1100, i32 17;
    store i32* %res with i32 %1101;
    ubr ^b253;
^if.then83:
    i32 %1102 = load i32* %a;
    i1 %1103 = scmp gt i32 %1102, i32 0;
    i32 %1104 = zext i1 %1103 to i32;
    i1 %1105 = scmp neq i32 %1104, i32 0;
    cbr i1 %1105(prob = 0.5), ^b252, ^b254;
^b252:
    i32 %1106 = load i32* %a;
    i1 %1107 = scmp lt i32 %1106, i32 16;
    i32 %1108 = zext i1 %1107 to i32;
    i1 %1109 = scmp neq i32 %1108, i32 0;
    ubr ^b254;
^b253:
    ubr ^b250;
^b254:
    i1 %1110 = phi [^b252, i1 %1109] [^if.then83, i1 false];
    i32 %1111 = zext i1 %1110 to i32;
    i1 %1112 = scmp neq i32 %1111, i32 0;
    cbr i1 %1112(prob = 0.5), ^if.then84, ^if.else84;
^if.else84:
    i32 %1113 = load i32* %res;
    i32 %1114 = add i32 %1113, i32 16;
    store i32* %res with i32 %1114;
    ubr ^b256;
^if.then84:
    i32 %1115 = load i32* %a;
    i1 %1116 = scmp gt i32 %1115, i32 0;
    i32 %1117 = zext i1 %1116 to i32;
    i1 %1118 = scmp neq i32 %1117, i32 0;
    cbr i1 %1118(prob = 0.5), ^b255, ^b257;
^b255:
    i32 %1119 = load i32* %a;
    i1 %1120 = scmp lt i32 %1119, i32 15;
    i32 %1121 = zext i1 %1120 to i32;
    i1 %1122 = scmp neq i32 %1121, i32 0;
    ubr ^b257;
^b256:
    ubr ^b253;
^b257:
    i1 %1123 = phi [^b255, i1 %1122] [^if.then84, i1 false];
    i32 %1124 = zext i1 %1123 to i32;
    i1 %1125 = scmp neq i32 %1124, i32 0;
    cbr i1 %1125(prob = 0.5), ^if.then85, ^if.else85;
^if.else85:
    i32 %1126 = load i32* %res;
    i32 %1127 = add i32 %1126, i32 15;
    store i32* %res with i32 %1127;
    ubr ^b259;
^if.then85:
    i32 %1128 = load i32* %a;
    i1 %1129 = scmp gt i32 %1128, i32 0;
    i32 %1130 = zext i1 %1129 to i32;
    i1 %1131 = scmp neq i32 %1130, i32 0;
    cbr i1 %1131(prob = 0.5), ^b258, ^b260;
^b258:
    i32 %1132 = load i32* %a;
    i1 %1133 = scmp lt i32 %1132, i32 14;
    i32 %1134 = zext i1 %1133 to i32;
    i1 %1135 = scmp neq i32 %1134, i32 0;
    ubr ^b260;
^b259:
    ubr ^b256;
^b260:
    i1 %1136 = phi [^b258, i1 %1135] [^if.then85, i1 false];
    i32 %1137 = zext i1 %1136 to i32;
    i1 %1138 = scmp neq i32 %1137, i32 0;
    cbr i1 %1138(prob = 0.5), ^if.then86, ^if.else86;
^if.else86:
    i32 %1139 = load i32* %res;
    i32 %1140 = add i32 %1139, i32 14;
    store i32* %res with i32 %1140;
    ubr ^b262;
^if.then86:
    i32 %1141 = load i32* %a;
    i1 %1142 = scmp gt i32 %1141, i32 0;
    i32 %1143 = zext i1 %1142 to i32;
    i1 %1144 = scmp neq i32 %1143, i32 0;
    cbr i1 %1144(prob = 0.5), ^b261, ^b263;
^b261:
    i32 %1145 = load i32* %a;
    i1 %1146 = scmp lt i32 %1145, i32 13;
    i32 %1147 = zext i1 %1146 to i32;
    i1 %1148 = scmp neq i32 %1147, i32 0;
    ubr ^b263;
^b262:
    ubr ^b259;
^b263:
    i1 %1149 = phi [^b261, i1 %1148] [^if.then86, i1 false];
    i32 %1150 = zext i1 %1149 to i32;
    i1 %1151 = scmp neq i32 %1150, i32 0;
    cbr i1 %1151(prob = 0.5), ^if.then87, ^if.else87;
^if.else87:
    i32 %1152 = load i32* %res;
    i32 %1153 = add i32 %1152, i32 13;
    store i32* %res with i32 %1153;
    ubr ^b265;
^if.then87:
    i32 %1154 = load i32* %a;
    i1 %1155 = scmp gt i32 %1154, i32 0;
    i32 %1156 = zext i1 %1155 to i32;
    i1 %1157 = scmp neq i32 %1156, i32 0;
    cbr i1 %1157(prob = 0.5), ^b264, ^b266;
^b264:
    i32 %1158 = load i32* %a;
    i1 %1159 = scmp lt i32 %1158, i32 12;
    i32 %1160 = zext i1 %1159 to i32;
    i1 %1161 = scmp neq i32 %1160, i32 0;
    ubr ^b266;
^b265:
    ubr ^b262;
^b266:
    i1 %1162 = phi [^b264, i1 %1161] [^if.then87, i1 false];
    i32 %1163 = zext i1 %1162 to i32;
    i1 %1164 = scmp neq i32 %1163, i32 0;
    cbr i1 %1164(prob = 0.5), ^if.then88, ^if.else88;
^if.else88:
    i32 %1165 = load i32* %res;
    i32 %1166 = add i32 %1165, i32 12;
    store i32* %res with i32 %1166;
    ubr ^b268;
^if.then88:
    i32 %1167 = load i32* %a;
    i1 %1168 = scmp gt i32 %1167, i32 0;
    i32 %1169 = zext i1 %1168 to i32;
    i1 %1170 = scmp neq i32 %1169, i32 0;
    cbr i1 %1170(prob = 0.5), ^b267, ^b269;
^b267:
    i32 %1171 = load i32* %a;
    i1 %1172 = scmp lt i32 %1171, i32 11;
    i32 %1173 = zext i1 %1172 to i32;
    i1 %1174 = scmp neq i32 %1173, i32 0;
    ubr ^b269;
^b268:
    ubr ^b265;
^b269:
    i1 %1175 = phi [^b267, i1 %1174] [^if.then88, i1 false];
    i32 %1176 = zext i1 %1175 to i32;
    i1 %1177 = scmp neq i32 %1176, i32 0;
    cbr i1 %1177(prob = 0.5), ^if.then89, ^if.else89;
^if.else89:
    i32 %1178 = load i32* %res;
    i32 %1179 = add i32 %1178, i32 11;
    store i32* %res with i32 %1179;
    ubr ^b271;
^if.then89:
    i32 %1180 = load i32* %a;
    i1 %1181 = scmp gt i32 %1180, i32 0;
    i32 %1182 = zext i1 %1181 to i32;
    i1 %1183 = scmp neq i32 %1182, i32 0;
    cbr i1 %1183(prob = 0.5), ^b270, ^b272;
^b270:
    i32 %1184 = load i32* %a;
    i1 %1185 = scmp lt i32 %1184, i32 10;
    i32 %1186 = zext i1 %1185 to i32;
    i1 %1187 = scmp neq i32 %1186, i32 0;
    ubr ^b272;
^b271:
    ubr ^b268;
^b272:
    i1 %1188 = phi [^b270, i1 %1187] [^if.then89, i1 false];
    i32 %1189 = zext i1 %1188 to i32;
    i1 %1190 = scmp neq i32 %1189, i32 0;
    cbr i1 %1190(prob = 0.5), ^if.then90, ^if.else90;
^if.else90:
    i32 %1191 = load i32* %res;
    i32 %1192 = add i32 %1191, i32 10;
    store i32* %res with i32 %1192;
    ubr ^b274;
^if.then90:
    i32 %1193 = load i32* %a;
    i1 %1194 = scmp gt i32 %1193, i32 0;
    i32 %1195 = zext i1 %1194 to i32;
    i1 %1196 = scmp neq i32 %1195, i32 0;
    cbr i1 %1196(prob = 0.5), ^b273, ^b275;
^b273:
    i32 %1197 = load i32* %a;
    i1 %1198 = scmp lt i32 %1197, i32 9;
    i32 %1199 = zext i1 %1198 to i32;
    i1 %1200 = scmp neq i32 %1199, i32 0;
    ubr ^b275;
^b274:
    ubr ^b271;
^b275:
    i1 %1201 = phi [^b273, i1 %1200] [^if.then90, i1 false];
    i32 %1202 = zext i1 %1201 to i32;
    i1 %1203 = scmp neq i32 %1202, i32 0;
    cbr i1 %1203(prob = 0.5), ^if.then91, ^if.else91;
^if.else91:
    i32 %1204 = load i32* %res;
    i32 %1205 = add i32 %1204, i32 9;
    store i32* %res with i32 %1205;
    ubr ^b277;
^if.then91:
    i32 %1206 = load i32* %a;
    i1 %1207 = scmp gt i32 %1206, i32 0;
    i32 %1208 = zext i1 %1207 to i32;
    i1 %1209 = scmp neq i32 %1208, i32 0;
    cbr i1 %1209(prob = 0.5), ^b276, ^b278;
^b276:
    i32 %1210 = load i32* %a;
    i1 %1211 = scmp lt i32 %1210, i32 8;
    i32 %1212 = zext i1 %1211 to i32;
    i1 %1213 = scmp neq i32 %1212, i32 0;
    ubr ^b278;
^b277:
    ubr ^b274;
^b278:
    i1 %1214 = phi [^b276, i1 %1213] [^if.then91, i1 false];
    i32 %1215 = zext i1 %1214 to i32;
    i1 %1216 = scmp neq i32 %1215, i32 0;
    cbr i1 %1216(prob = 0.5), ^if.then92, ^if.else92;
^if.else92:
    i32 %1217 = load i32* %res;
    i32 %1218 = add i32 %1217, i32 8;
    store i32* %res with i32 %1218;
    ubr ^b280;
^if.then92:
    i32 %1219 = load i32* %a;
    i1 %1220 = scmp gt i32 %1219, i32 0;
    i32 %1221 = zext i1 %1220 to i32;
    i1 %1222 = scmp neq i32 %1221, i32 0;
    cbr i1 %1222(prob = 0.5), ^b279, ^b281;
^b279:
    i32 %1223 = load i32* %a;
    i1 %1224 = scmp lt i32 %1223, i32 7;
    i32 %1225 = zext i1 %1224 to i32;
    i1 %1226 = scmp neq i32 %1225, i32 0;
    ubr ^b281;
^b280:
    ubr ^b277;
^b281:
    i1 %1227 = phi [^b279, i1 %1226] [^if.then92, i1 false];
    i32 %1228 = zext i1 %1227 to i32;
    i1 %1229 = scmp neq i32 %1228, i32 0;
    cbr i1 %1229(prob = 0.5), ^if.then93, ^if.else93;
^if.else93:
    i32 %1230 = load i32* %res;
    i32 %1231 = add i32 %1230, i32 7;
    store i32* %res with i32 %1231;
    ubr ^b283;
^if.then93:
    i32 %1232 = load i32* %a;
    i1 %1233 = scmp gt i32 %1232, i32 0;
    i32 %1234 = zext i1 %1233 to i32;
    i1 %1235 = scmp neq i32 %1234, i32 0;
    cbr i1 %1235(prob = 0.5), ^b282, ^b284;
^b282:
    i32 %1236 = load i32* %a;
    i1 %1237 = scmp lt i32 %1236, i32 6;
    i32 %1238 = zext i1 %1237 to i32;
    i1 %1239 = scmp neq i32 %1238, i32 0;
    ubr ^b284;
^b283:
    ubr ^b280;
^b284:
    i1 %1240 = phi [^b282, i1 %1239] [^if.then93, i1 false];
    i32 %1241 = zext i1 %1240 to i32;
    i1 %1242 = scmp neq i32 %1241, i32 0;
    cbr i1 %1242(prob = 0.5), ^if.then94, ^if.else94;
^if.else94:
    i32 %1243 = load i32* %res;
    i32 %1244 = add i32 %1243, i32 6;
    store i32* %res with i32 %1244;
    ubr ^b286;
^if.then94:
    i32 %1245 = load i32* %a;
    i1 %1246 = scmp gt i32 %1245, i32 0;
    i32 %1247 = zext i1 %1246 to i32;
    i1 %1248 = scmp neq i32 %1247, i32 0;
    cbr i1 %1248(prob = 0.5), ^b285, ^b287;
^b285:
    i32 %1249 = load i32* %a;
    i1 %1250 = scmp lt i32 %1249, i32 5;
    i32 %1251 = zext i1 %1250 to i32;
    i1 %1252 = scmp neq i32 %1251, i32 0;
    ubr ^b287;
^b286:
    ubr ^b283;
^b287:
    i1 %1253 = phi [^b285, i1 %1252] [^if.then94, i1 false];
    i32 %1254 = zext i1 %1253 to i32;
    i1 %1255 = scmp neq i32 %1254, i32 0;
    cbr i1 %1255(prob = 0.5), ^if.then95, ^if.else95;
^if.else95:
    i32 %1256 = load i32* %res;
    i32 %1257 = add i32 %1256, i32 5;
    store i32* %res with i32 %1257;
    ubr ^b289;
^if.then95:
    i32 %1258 = load i32* %a;
    i1 %1259 = scmp gt i32 %1258, i32 0;
    i32 %1260 = zext i1 %1259 to i32;
    i1 %1261 = scmp neq i32 %1260, i32 0;
    cbr i1 %1261(prob = 0.5), ^b288, ^b290;
^b288:
    i32 %1262 = load i32* %a;
    i1 %1263 = scmp lt i32 %1262, i32 4;
    i32 %1264 = zext i1 %1263 to i32;
    i1 %1265 = scmp neq i32 %1264, i32 0;
    ubr ^b290;
^b289:
    ubr ^b286;
^b290:
    i1 %1266 = phi [^b288, i1 %1265] [^if.then95, i1 false];
    i32 %1267 = zext i1 %1266 to i32;
    i1 %1268 = scmp neq i32 %1267, i32 0;
    cbr i1 %1268(prob = 0.5), ^if.then96, ^if.else96;
^if.else96:
    i32 %1269 = load i32* %res;
    i32 %1270 = add i32 %1269, i32 4;
    store i32* %res with i32 %1270;
    ubr ^b292;
^if.then96:
    i32 %1271 = load i32* %a;
    i1 %1272 = scmp gt i32 %1271, i32 0;
    i32 %1273 = zext i1 %1272 to i32;
    i1 %1274 = scmp neq i32 %1273, i32 0;
    cbr i1 %1274(prob = 0.5), ^b291, ^b293;
^b291:
    i32 %1275 = load i32* %a;
    i1 %1276 = scmp lt i32 %1275, i32 3;
    i32 %1277 = zext i1 %1276 to i32;
    i1 %1278 = scmp neq i32 %1277, i32 0;
    ubr ^b293;
^b292:
    ubr ^b289;
^b293:
    i1 %1279 = phi [^b291, i1 %1278] [^if.then96, i1 false];
    i32 %1280 = zext i1 %1279 to i32;
    i1 %1281 = scmp neq i32 %1280, i32 0;
    cbr i1 %1281(prob = 0.5), ^if.then97, ^if.else97;
^if.else97:
    i32 %1282 = load i32* %res;
    i32 %1283 = add i32 %1282, i32 3;
    store i32* %res with i32 %1283;
    ubr ^b295;
^if.then97:
    i32 %1284 = load i32* %a;
    i1 %1285 = scmp gt i32 %1284, i32 0;
    i32 %1286 = zext i1 %1285 to i32;
    i1 %1287 = scmp neq i32 %1286, i32 0;
    cbr i1 %1287(prob = 0.5), ^b294, ^b296;
^b294:
    i32 %1288 = load i32* %a;
    i1 %1289 = scmp lt i32 %1288, i32 2;
    i32 %1290 = zext i1 %1289 to i32;
    i1 %1291 = scmp neq i32 %1290, i32 0;
    ubr ^b296;
^b295:
    ubr ^b292;
^b296:
    i1 %1292 = phi [^b294, i1 %1291] [^if.then97, i1 false];
    i32 %1293 = zext i1 %1292 to i32;
    i1 %1294 = scmp neq i32 %1293, i32 0;
    cbr i1 %1294(prob = 0.5), ^if.then98, ^if.else98;
^if.then98:
    i32 %1295 = load i32* %res;
    i32 %1296 = add i32 %1295, i32 1;
    store i32* %res with i32 %1296;
    ubr ^b297;
^if.else98:
    i32 %1297 = load i32* %res;
    i32 %1298 = add i32 %1297, i32 2;
    store i32* %res with i32 %1298;
    ubr ^b297;
^b297:
    ubr ^b295;
}
