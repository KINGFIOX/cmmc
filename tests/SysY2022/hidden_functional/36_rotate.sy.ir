internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32, i32*, i32*) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(f32 %arg, i32* %arg1, i32* %arg2):
    i1 %0 = fcmp gt f32 %arg, f32 0;
    cbr i1 %0, [ ^entry1 f32 %arg, i32* %arg1, i32* %arg2, f32 %arg ], [ ^indirect f32 %arg, f32 %arg, i32* %arg2, i32* %arg1 ];
^entry1(f32 %arg, i32* %arg1, i32* %arg2, f32 %arg3):
    i1 %0 = fcmp le f32 %arg, f32 1e-06;
    cbr i1 %0, [ ^indirect1 f32 %arg3 ], [ ^indirect2 f32 %arg3, i32* %arg2, i32* %arg1 ];
^indirect(f32 %arg, f32 %arg1, i32* %arg2, i32* %arg3):
    f32 %0 = fneg f32 %arg;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1, [ ^indirect1 f32 %arg1 ], [ ^indirect2 f32 %arg1, i32* %arg2, i32* %arg3 ];
^indirect1(f32 %arg):
    ret f32 %arg;
^indirect2(f32 %arg, i32* %arg1, i32* %arg2):
    f32 %0 = fdiv f32 %arg, f32 3;
    f32 %1 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %0, i32* %arg2, i32* %arg1);
    f32 %2 = fmul f32 3, f32 %1;
    f32 %3 = fmul f32 4, f32 %1;
    f32 %4 = fmul f32 %3, f32 %1;
    f32 %5 = fmul f32 %4, f32 %1;
    f32 %6 = fsub f32 %2, f32 %5;
    ret f32 %6;
}
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %width = alloc i32;
    i32* %height = alloc i32;
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    cbr i1 %3, [ ^entry1 i32 -1, i32* %width, i32* %height, i32 undef, i32 undef, f32 %0 ], [ ^b i32* %height, i32* %width, i32* %height, i32* %width, f32 %0 ];
^entry1(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^b1 i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, f32 %arg5 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, f32 %arg4):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 50;
    cbr i1 %1, [ ^entry1 i32 -1, i32* %arg3, i32* %arg2, i32 undef, i32 undef, f32 %arg4 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg2, f32 %arg4 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    f32* %rad = alloc f32;
    store f32* %rad with f32 %arg4;
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %arg2);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg3);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body i32* %y, f32* %rad, i32* %arg1, i32* %arg ], [ ^b3 f32* %rad, i32* %y ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, f32 %arg4):
    i32 %0 = call () -> i32 @getint();
    store i32* %arg1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %arg with i32 %1;
    i1 %2 = scmp gt i32 %0, i32 1024;
    cbr i1 %2, [ ^entry1 i32 -1, i32* %arg2, i32* %arg3, i32 %0, i32 %1, f32 %arg4 ], [ ^indirect i32 %1, i32* %arg2, i32* %arg3, i32 %0, i32 %1, f32 %arg4 ];
^if.then():
    ret i32 -1;
^while.body(i32* %arg, f32* %arg1, i32* %arg2, i32* %arg3):
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32 %0 = load i32* %arg2;
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body1 f32* %arg1, i32* %arg, i32* %x, i32* %arg3, i32* %arg2, i32 0 ], [ ^b4 f32* %arg1, i32* %x, i32* %arg, i32* %arg2, i32* %arg3 ];
^indirect(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5):
    i1 %0 = scmp gt i32 %arg, i32 1024;
    cbr i1 %0, [ ^entry1 i32 -1, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5 ], [ ^b5 i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, f32 %arg5 ];
^b3(f32* %arg, i32* %arg1):
    free i32* %arg1;
    free f32* %arg;
    ret i32 0;
^while.body1(f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32 %0 = load i32* %arg1;
    f32 %1 = load f32* %arg;
    f32* %x = alloc f32;
    store f32* %x with f32 %1;
    i1 %2 = fcmp gt f32 %1, f32 6.28319;
    cbr i1 %2, [ ^if.then1 f32* %x, i32* %arg4, i32* %arg3, i32 %arg5, i32 %0, i32* %arg3, i32* %arg4, f32 %1, i32* %arg4, i32* %arg3, i32* %arg1, f32* %arg, i32* %arg2, i32 %arg5, f32 %1 ], [ ^indirect1 f32* %x, f32 %1, i32* %arg4, i32* %arg3, i32 %arg5, i32 %0, i32* %arg3, i32* %arg4, f32 %1, i32* %arg4, i32* %arg3, i32* %arg1, f32* %arg, i32* %arg2, i32 %arg5, f32 %1 ];
^b4(f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    call (i32) -> void @putch(i32 10);
    i32 %0 = load i32* %arg2;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    free i32* %arg1;
    i32 %2 = load i32* %arg4;
    i1 %3 = scmp lt i32 %1, i32 %2;
    cbr i1 %3, [ ^while.body i32* %arg2, f32* %arg, i32* %arg3, i32* %arg4 ], [ ^b3 f32* %arg, i32* %arg2 ];
^b5(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 255;
    cbr i1 %1, [ ^entry1 i32 -1, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4 ];
^if.then1(f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fdiv f32 %arg14, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg14, f32 %3;
    store f32* %arg with f32 %4;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5, [ ^if.then2 f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %4 ], [ ^indirect2 i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %4 ];
^indirect1(f32* %arg, f32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15):
    i1 %0 = fcmp lt f32 %arg1, f32 -6.28319;
    cbr i1 %0, [ ^if.then1 f32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15 ], [ ^indirect3 f32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15 ];
^b6(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body2 i32* %y, i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 0 ], [ ^entry1 i32 0, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4 ];
^if.then2(f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fsub f32 %arg14, f32 6.28319;
    store f32* %arg with f32 %0;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1, [ ^if.then3 i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %0 ], [ ^b7 f32 %0, i32* %arg2, i32* %arg1, f32 %arg7, i32* %arg6, i32* %arg5, i32 %arg4, i32 %arg3, i32 %arg13, i32* %arg12, f32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8 ];
^indirect2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13):
    i1 %0 = fcmp lt f32 %arg13, f32 -3.14159;
    cbr i1 %0, [ ^if.then3 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13 ], [ ^b7 f32 %arg13, i32* %arg1, i32* %arg, f32 %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg2, i32 %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ];
^indirect3(f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    i1 %0 = fcmp gt f32 %arg14, f32 3.14159;
    cbr i1 %0, [ ^if.then2 f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14 ], [ ^indirect2 i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6):
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 0 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6 ];
^if.then3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13):
    f32 %0 = fadd f32 %arg13, f32 6.28319;
    ubr [ ^b7 f32 %0, i32* %arg1, i32* %arg, f32 %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg2, i32 %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ];
^b7(f32 %arg, i32* %arg1, i32* %arg2, f32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    f32 %0 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %arg, i32* %arg2, i32* %arg1);
    f32 %1 = fadd f32 %arg3, f32 1.5708;
    f32* %x = alloc f32;
    store f32* %x with f32 %1;
    i1 %2 = fcmp gt f32 %1, f32 6.28319;
    cbr i1 %2, [ ^if.then4 f32* %x, i32* %arg4, i32* %arg5, i32* %arg4, i32* %arg5, i32 %arg7, i32 %arg6, f32 %0, i32* %arg13, i32* %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32 %arg8, f32 %1 ], [ ^indirect4 f32* %x, f32 %1, i32* %arg4, i32* %arg5, i32* %arg4, i32* %arg5, i32 %arg7, i32 %arg6, f32 %0, i32* %arg13, i32* %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32 %arg8, f32 %1 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = mul i32 %arg6, i32 %arg3;
    i32 %1 = add i32 %0, i32 %arg7;
    i32* %2 = getelementptr &([1048576 * i32]* @image)[i32 0][i32 %1];
    i32 %3 = call () -> i32 @getint();
    store i32* %2 with i32 %3;
    i32 %4 = add i32 %arg7, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %arg3;
    cbr i1 %5, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %4 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %0 ], [ ^entry1 i32 0, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, f32 %arg5 ];
^if.then4(f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fdiv f32 %arg14, f32 6.28319;
    i32 %1 = f2s f32 %0 to i32;
    f32 %2 = s2f i32 %1 to f32;
    f32 %3 = fmul f32 %2, f32 6.28319;
    f32 %4 = fsub f32 %arg14, f32 %3;
    store f32* %arg with f32 %4;
    i1 %5 = fcmp gt f32 %4, f32 3.14159;
    cbr i1 %5, [ ^if.then5 f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %4 ], [ ^indirect5 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %4 ];
^indirect4(f32* %arg, f32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15):
    i1 %0 = fcmp lt f32 %arg1, f32 -6.28319;
    cbr i1 %0, [ ^if.then4 f32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15 ], [ ^indirect6 f32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, f32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, f32* %arg12, i32* %arg13, i32 %arg14, f32 %arg15 ];
^if.then5(f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    f32 %0 = fsub f32 %arg14, f32 6.28319;
    store f32* %arg with f32 %0;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1, [ ^if.then6 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %0 ], [ ^b9 f32 %0, i32* %arg2, i32* %arg1, f32 %arg7, i32 %arg6, i32 %arg5, i32* %arg4, i32* %arg3, i32 %arg13, i32* %arg12, f32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13):
    i1 %0 = fcmp lt f32 %arg13, f32 -3.14159;
    cbr i1 %0, [ ^if.then6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13 ], [ ^b9 f32 %arg13, i32* %arg1, i32* %arg, f32 %arg6, i32 %arg5, i32 %arg4, i32* %arg3, i32* %arg2, i32 %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ];
^indirect6(f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14):
    i1 %0 = fcmp gt f32 %arg14, f32 3.14159;
    cbr i1 %0, [ ^if.then5 f32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14 ], [ ^indirect5 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, f32* %arg11, i32* %arg12, i32 %arg13, f32 %arg14 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, f32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32 %arg12, f32 %arg13):
    f32 %0 = fadd f32 %arg13, f32 6.28319;
    ubr [ ^b9 f32 %0, i32* %arg1, i32* %arg, f32 %arg6, i32 %arg5, i32 %arg4, i32* %arg3, i32* %arg2, i32 %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ];
^b9(f32 %arg, i32* %arg1, i32* %arg2, f32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    f32 %0 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %arg, i32* %arg2, i32* %arg1);
    i32 %1 = load i32* %arg7;
    i32 %2 = sdiv i32 %1, i32 2;
    i32 %3 = load i32* %arg6;
    i32 %4 = sdiv i32 %3, i32 2;
    i32 %5 = sub i32 %arg5, i32 %2;
    i32 %6 = sub i32 %arg4, i32 %4;
    f32 %7 = s2f i32 %5 to f32;
    f32 %8 = fmul f32 %7, f32 %0;
    f32 %9 = s2f i32 %6 to f32;
    f32 %10 = fmul f32 %9, f32 %arg3;
    f32 %11 = fsub f32 %8, f32 %10;
    f32 %12 = s2f i32 %2 to f32;
    f32 %13 = fadd f32 %11, f32 %12;
    i32 %14 = f2s f32 %13 to i32;
    f32 %15 = fmul f32 %9, f32 %0;
    f32 %16 = ffma f32 %7, f32 %arg3, f32 %15;
    f32 %17 = s2f i32 %4 to f32;
    f32 %18 = fadd f32 %16, f32 %17;
    i32 %19 = f2s f32 %18 to i32;
    i1 %20 = scmp lt i32 %14, i32 0;
    cbr i1 %20, [ ^while.body4 i32 0, i32* %arg13, i32* %arg12, i32* %arg11, f32* %arg10, i32* %arg9, i32 %arg8 ], [ ^indirect7 i32 %1, i32 %14, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, f32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32 %14, i32 %19 ];
^while.body4(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, f32* %arg4, i32* %arg5, i32 %arg6):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 32);
    i32 %0 = add i32 %arg6, i32 1;
    store i32* %arg5 with i32 %0;
    i32 %1 = load i32* %arg1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body1 f32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1, i32 %0 ], [ ^b4 f32* %arg4, i32* %arg5, i32* %arg3, i32* %arg1, i32* %arg2 ];
^indirect7(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, f32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp ge i32 %arg1, i32 %arg;
    cbr i1 %0, [ ^while.body4 i32 0, i32* %arg9, i32* %arg8, i32* %arg7, f32* %arg6, i32* %arg5, i32 %arg4 ], [ ^b10 i32* %arg3, i32* %arg2, i32* %arg9, i32* %arg8, i32* %arg7, f32* %arg6, i32* %arg5, i32 %arg4, i32 %arg10, i32 %arg11 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp lt i32 %arg9, i32 0;
    cbr i1 %0, [ ^while.body4 i32 0, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b11 i32* %arg, i32* %arg1, i32 %arg7, i32* %arg6, f32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg8, i32 %arg9 ];
^b11(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, f32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp ge i32 %arg9, i32 %0;
    cbr i1 %1, [ ^while.body4 i32 0, i32* %arg7, i32* %arg6, i32* %arg5, f32* %arg4, i32* %arg3, i32 %arg2 ], [ ^b12 i32* %arg, i32 %arg2, i32* %arg3, f32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9 ];
^b12(i32* %arg, i32 %arg1, i32* %arg2, f32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = load i32* %arg;
    i32 %1 = mul i32 %arg8, i32 %0;
    i32 %2 = add i32 %1, i32 %arg7;
    i32* %3 = getelementptr &([1048576 * i32]* @image)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    ubr [ ^while.body4 i32 %4, i32* %arg6, i32* %arg5, i32* %arg4, f32* %arg3, i32* %arg2, i32 %arg1 ];
}
