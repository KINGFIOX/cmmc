internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32 %x, i32* %0, i32* %1) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %2 = fcmp gt f32 %x, f32 0;
    cbr i1 %2(prob = 0.5), ^entry1, ^b;
^b:
    f32 %3 = fneg f32 %x;
    ubr ^entry1;
^entry1:
    f32 %4 = phi [^entry, f32 %x] [^b, f32 %3];
    i1 %5 = fcmp le f32 %4, f32 1e-06;
    cbr i1 %5(prob = 0.5), ^if.then, ^b1;
^if.then:
    ret f32 %x;
^b1:
    f32 %6 = fdiv f32 %x, f32 3;
    f32 %7 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %6, i32* %0, i32* %1);
    f32 %8 = fmul f32 3, f32 %7;
    f32 %9 = fmul f32 4, f32 %7;
    f32 %10 = fmul f32 %9, f32 %7;
    f32 %11 = fmul f32 %10, f32 %7;
    f32 %12 = fsub f32 %8, f32 %11;
    ret f32 %12;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    i1 %4 = fcmp gt f32 %0, f32 6.28319;
    i1 %5 = fcmp lt f32 %0, f32 -6.28319;
    f32 %6 = fdiv f32 %0, f32 6.28319;
    i32 %7 = f2s f32 %6 to i32;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fmul f32 %8, f32 6.28319;
    f32 %10 = fsub f32 %0, f32 %9;
    f32 %11 = fadd f32 %0, f32 1.5708;
    i1 %12 = fcmp gt f32 %11, f32 6.28319;
    i1 %13 = fcmp lt f32 %11, f32 -6.28319;
    f32 %14 = fdiv f32 %11, f32 6.28319;
    i32 %15 = f2s f32 %14 to i32;
    f32 %16 = s2f i32 %15 to f32;
    f32 %17 = fmul f32 %16, f32 6.28319;
    f32 %18 = fsub f32 %11, f32 %17;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %19 = call () -> i32 @getch();
    i1 %20 = scmp neq i32 %19, i32 50;
    ubr ^b1;
^b1:
    i1 %21 = phi [^entry, i1 true] [^b, i1 %20];
    cbr i1 %21(prob = 0.5), ^entry1, ^b2;
^entry1:
    i32 %22 = phi [^while.header2, i32 %30] [^b7, i32 %30] [^b1, i32 0];
    i32 %23 = phi [^while.header2, i32 %31] [^b7, i32 %31] [^b1, i32 0];
    i32 %24 = phi [^while.header2, i32 0] [^b7, i32 -1] [^b1, i32 -1];
    i1 %25 = scmp lt i32 %24, i32 0;
    i32 %26 = sdiv i32 %22, i32 2;
    i32 %27 = sdiv i32 %23, i32 2;
    f32 %28 = s2f i32 %26 to f32;
    f32 %29 = s2f i32 %27 to f32;
    cbr i1 %25(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %30 = call () -> i32 @getint();
    i32 %31 = call () -> i32 @getint();
    i1 %32 = scmp gt i32 %30, i32 1024;
    cbr i1 %32(prob = 0.5), ^b5, ^b4;
^b3:
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %22);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %23);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
^b4:
    i1 %33 = scmp gt i32 %31, i32 1024;
    ubr ^b5;
^b5:
    i1 %34 = phi [^b4, i1 %33] [^b2, i1 true];
    cbr i1 %34(prob = 0.5), ^b7, ^b6;
^if.then:
    ret i32 -1;
^b6:
    i32 %35 = call () -> i32 @getint();
    i1 %36 = scmp neq i32 %35, i32 255;
    ubr ^b7;
^b7:
    i1 %37 = phi [^b5, i1 true] [^b6, i1 %36];
    cbr i1 %37(prob = 0.5), ^entry1, ^while.header2;
^while.header:
    i32 %38 = phi [^b9, i32 %47] [^b3, i32 0];
    i1 %39 = scmp lt i32 %38, i32 %23;
    i32 %40 = sub i32 %38, i32 %27;
    f32 %41 = s2f i32 %40 to f32;
    cbr i1 %39(prob = 0.97), ^while.header1, ^b8;
^while.header1:
    i32 %42 = phi [^while.header, i32 0] [^while.body2, i32 %93];
    i1 %43 = scmp lt i32 %42, i32 %22;
    cbr i1 %43(prob = 0.97), ^while.body, ^b9;
^while.header2:
    i32 %44 = phi [^b7, i32 0] [^b12, i32 %55];
    i1 %45 = scmp lt i32 %44, i32 %31;
    i32 %46 = mul i32 %30, i32 %44;
    cbr i1 %45(prob = 0.97), ^while.header3, ^entry1;
^b8:
    ret i32 0;
^b9:
    call (i32) -> void @putch(i32 10);
    i32 %47 = add i32 %38, i32 1;
    ubr ^while.header;
^while.body:
    cbr i1 %4(prob = 0.5), ^b11, ^b10;
^while.header3:
    i32 %48 = phi [^while.header2, i32 0] [^while.body1, i32 %53];
    i1 %49 = scmp lt i32 %48, i32 %30;
    cbr i1 %49(prob = 0.97), ^while.body1, ^b12;
^b10:
    ubr ^b11;
^while.body1:
    i32 %50 = add i32 %48, i32 %46;
    i32* %51 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %50];
    i32 %52 = call () -> i32 @getint();
    store i32* %51 with i32 %52;
    i32 %53 = add i32 %48, i32 1;
    ubr ^while.header3;
^b11:
    i1 %54 = phi [^while.body, i1 true] [^b10, i1 %5];
    cbr i1 %54(prob = 0.5), ^if.then1, ^b13;
^b12:
    i32 %55 = add i32 %44, i32 1;
    ubr ^while.header2;
^if.then1:
    ubr ^b13;
^b13:
    f32 %56 = phi [^b11, f32 %0] [^if.then1, f32 %10];
    i1 %57 = fcmp gt f32 %56, f32 3.14159;
    cbr i1 %57(prob = 0.5), ^if.then2, ^b14;
^if.then2:
    f32 %58 = fsub f32 %56, f32 6.28319;
    ubr ^b14;
^b14:
    f32 %59 = phi [^b13, f32 %56] [^if.then2, f32 %58];
    i1 %60 = fcmp lt f32 %59, f32 -3.14159;
    cbr i1 %60(prob = 0.5), ^if.then3, ^b15;
^if.then3:
    f32 %61 = fadd f32 %59, f32 6.28319;
    ubr ^b15;
^b15:
    f32 %62 = phi [^if.then3, f32 %61] [^b14, f32 %59];
    f32 %63 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %62, i32* %width, i32* %height);
    cbr i1 %12(prob = 0.5), ^b17, ^b16;
^b16:
    ubr ^b17;
^b17:
    i1 %64 = phi [^b15, i1 true] [^b16, i1 %13];
    cbr i1 %64(prob = 0.5), ^if.then4, ^b18;
^if.then4:
    ubr ^b18;
^b18:
    f32 %65 = phi [^b17, f32 %11] [^if.then4, f32 %18];
    i1 %66 = fcmp gt f32 %65, f32 3.14159;
    cbr i1 %66(prob = 0.5), ^if.then5, ^b19;
^if.then5:
    f32 %67 = fsub f32 %65, f32 6.28319;
    ubr ^b19;
^b19:
    f32 %68 = phi [^b18, f32 %65] [^if.then5, f32 %67];
    i1 %69 = fcmp lt f32 %68, f32 -3.14159;
    cbr i1 %69(prob = 0.5), ^if.then6, ^b20;
^if.then6:
    f32 %70 = fadd f32 %68, f32 6.28319;
    ubr ^b20;
^b20:
    f32 %71 = phi [^if.then6, f32 %70] [^b19, f32 %68];
    f32 %72 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %71, i32* %width, i32* %height);
    i32 %73 = sub i32 %42, i32 %26;
    f32 %74 = s2f i32 %73 to f32;
    f32 %75 = fmul f32 %74, f32 %72;
    f32 %76 = fmul f32 %41, f32 %63;
    f32 %77 = fsub f32 %75, f32 %76;
    f32 %78 = fadd f32 %77, f32 %28;
    i32 %79 = f2s f32 %78 to i32;
    f32 %80 = fmul f32 %74, f32 %63;
    f32 %81 = fmul f32 %41, f32 %72;
    f32 %82 = fadd f32 %80, f32 %81;
    f32 %83 = fadd f32 %82, f32 %29;
    i32 %84 = f2s f32 %83 to i32;
    i1 %85 = scmp lt i32 %79, i32 0;
    cbr i1 %85(prob = 0.5), ^b22, ^b21;
^b21:
    i1 %86 = scmp ge i32 %79, i32 %22;
    ubr ^b22;
^b22:
    i1 %87 = phi [^b20, i1 true] [^b21, i1 %86];
    cbr i1 %87(prob = 0.5), ^b24, ^b23;
^b23:
    i1 %88 = scmp lt i32 %84, i32 0;
    ubr ^b24;
^b24:
    i1 %89 = phi [^b22, i1 true] [^b23, i1 %88];
    cbr i1 %89(prob = 0.5), ^b26, ^b25;
^b25:
    i1 %90 = scmp ge i32 %84, i32 %23;
    ubr ^b26;
^b26:
    i1 %91 = phi [^b24, i1 true] [^b25, i1 %90];
    cbr i1 %91(prob = 0.5), ^while.body2, ^b27;
^while.body2:
    i32 %92 = phi [^b26, i32 0] [^b27, i32 %97];
    call (i32) -> void @putint(i32 %92);
    call (i32) -> void @putch(i32 32);
    i32 %93 = add i32 %42, i32 1;
    ubr ^while.header1;
^b27:
    i32 %94 = mul i32 %84, i32 %22;
    i32 %95 = add i32 %79, i32 %94;
    i32* %96 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %95];
    i32 %97 = load i32* %96;
    ubr ^while.body2;
}
