internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = icmp neq i32 %2, i32 80;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = icmp neq i32 %4, i32 50;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %6 = phi [^entry, i32 -1] [^b, i32 -1] [^b2, i32 -1] [^b3, i32 -1] [^while.header2, i32 0];
    ret i32 %6;
  ^b2:
    i32 %7 = call () -> i32 @getint();
    i1 %8 = icmp sgt i32 %7, i32 1024;
    i32 %9 = call () -> i32 @getint();
    i1 %10 = icmp sgt i32 %9, i32 1024;
    i1 %11 = or i1 %8, i1 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b3;
  ^b3:
    i32 %12 = call () -> i32 @getint();
    i1 %13 = icmp neq i32 %12, i32 255;
    i32 %14 = sdiv i32 %9, i32 2;
    f32 %15 = s2f i32 %14 to f32;
    i32 %16 = sdiv i32 %7, i32 2;
    f32 %17 = s2f i32 %16 to f32;
    i1 %18 = icmp sgt i32 %7, i32 0;
    [1048576 * i32]* %19 = ptrcast [1048576 * i32]* @image to [1048576 * i32]*;
    cbr i1 %13(prob = 0.5), ^b1, ^while.header;
  ^while.header:
    i32 %20 = phi [^b3, i32 0] [^b4, i32 %56];
    i1 %21 = icmp sgt i32 %9, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.header1, ^entry1;
  ^entry1:
    f32 %22 = fadd f32 %0, f32 1.5708;
    f32 %23 = fdiv f32 %22, f32 6.28319;
    i32 %24 = f2s f32 %23 to i32;
    f32 %25 = s2f i32 %24 to f32;
    f32 %26 = fmul f32 %25, f32 6.28319;
    f32 %27 = fsub f32 %22, f32 %26;
    i1 %28 = fcmp ogt f32 %22, f32 6.28319;
    i1 %29 = fcmp olt f32 %22, f32 -6.28319;
    i1 %30 = or i1 %28, i1 %29;
    f32 %31 = select i1 %30 ? f32 %27 : f32 %22;
    i1 %32 = fcmp ogt f32 %31, f32 3.14159;
    f32 %33 = fsub f32 %31, f32 6.28319;
    f32 %34 = select i1 %32 ? f32 %33 : f32 %31;
    i1 %35 = fcmp olt f32 %34, f32 -3.14159;
    f32 %36 = fadd f32 %34, f32 6.28319;
    f32 %37 = select i1 %35 ? f32 %36 : f32 %34;
    f32 %38 = call (f32) -> f32 @my_sin_impl(f32 %37);
    f32 %39 = fdiv f32 %0, f32 6.28319;
    i32 %40 = f2s f32 %39 to i32;
    f32 %41 = s2f i32 %40 to f32;
    f32 %42 = fmul f32 %41, f32 6.28319;
    f32 %43 = fsub f32 %0, f32 %42;
    i1 %44 = fcmp ogt f32 %0, f32 6.28319;
    i1 %45 = fcmp olt f32 %0, f32 -6.28319;
    i1 %46 = or i1 %44, i1 %45;
    f32 %47 = select i1 %46 ? f32 %43 : f32 %0;
    i1 %48 = fcmp ogt f32 %47, f32 3.14159;
    f32 %49 = fsub f32 %47, f32 6.28319;
    f32 %50 = select i1 %48 ? f32 %49 : f32 %47;
    i1 %51 = fcmp olt f32 %50, f32 -3.14159;
    f32 %52 = fadd f32 %50, f32 6.28319;
    f32 %53 = select i1 %51 ? f32 %52 : f32 %50;
    f32 %54 = call (f32) -> f32 @my_sin_impl(f32 %53);
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %18(prob = 0.97), ^prebody, ^b4;
  ^prebody:
    i32 %55 = mul i32 %7, i32 %20;
    ubr ^while.body;
  ^b4:
    i32 %56 = add i32 %20, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %57 = phi [^entry1, i32 0] [^b5, i32 %69];
    i1 %58 = icmp sgt i32 %9, i32 %57;
    cbr i1 %58(prob = 0.97), ^while.header3, ^b1;
  ^while.body:
    i32 %59 = phi [^prebody, i32 0] [^while.body, i32 %63];
    i32 %60 = call () -> i32 @getint();
    i32 %61 = add i32 %55, i32 %59;
    i32* %62 = getelementptr &([1048576 * i32]* %19)[i64 0][i32 %61];
    store i32* %62 with i32 %60;
    i32 %63 = add i32 %59, i32 1;
    i1 %64 = icmp sgt i32 %7, i32 %63;
    cbr i1 %64(prob = 0.97), ^while.body, ^b4;
  ^while.header3:
    i32 %65 = sub i32 %57, i32 %14;
    f32 %66 = s2f i32 %65 to f32;
    f32 %67 = fmul f32 %66, f32 %38;
    f32 %68 = fmul f32 %66, f32 %54;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %69 = add i32 %57, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %70 = phi [^while.header3, i32 0] [^b6, i32 %87];
    i32 %71 = sub i32 %70, i32 %16;
    f32 %72 = s2f i32 %71 to f32;
    f32 %73 = fmul f32 %72, f32 %38;
    f32 %74 = fsub f32 %73, f32 %68;
    f32 %75 = fadd f32 %74, f32 %17;
    i32 %76 = f2s f32 %75 to i32;
    i1 %77 = icmp sle i32 %7, i32 %76;
    i1 %78 = icmp slt i32 %76, i32 0;
    i1 %79 = or i1 %77, i1 %78;
    f32 %80 = fmul f32 %72, f32 %54;
    f32 %81 = fadd f32 %80, f32 %67;
    f32 %82 = fadd f32 %81, f32 %15;
    i32 %83 = f2s f32 %82 to i32;
    i1 %84 = icmp slt i32 %83, i32 0;
    i1 %85 = or i1 %79, i1 %84;
    cbr i1 %85(prob = 0.5), ^b6, ^b7;
  ^b6:
    i32 %86 = phi [^while.body1, i32 0] [^b7, i32 0] [^b8, i32 %93];
    call (i32) -> void @putint(i32 %86);
    call (i32) -> void @putch(i32 32);
    i32 %87 = add i32 %70, i32 1;
    i1 %88 = icmp sgt i32 %7, i32 %87;
    cbr i1 %88(prob = 0.97), ^while.body1, ^b5;
  ^b7:
    i1 %89 = icmp sle i32 %9, i32 %83;
    cbr i1 %89(prob = 0.5), ^b6, ^b8;
  ^b8:
    i32 %90 = mul i32 %7, i32 %83;
    i32 %91 = add i32 %76, i32 %90;
    i32* %92 = getelementptr &([1048576 * i32]* %19)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    ubr ^b6;
}
