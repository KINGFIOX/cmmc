internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32, i32*, i32*) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(f32 %arg, i32* %arg1, i32* %arg2):
    i1 %0 = fcmp gt f32 %arg, f32 0;
    cbr i1 %0(prob = 0.5), [ ^entry1 f32 %arg, i32* %arg1, i32* %arg2, f32 %arg ], [ ^indirect f32 %arg, f32 %arg, i32* %arg2, i32* %arg1 ];
^entry1(f32 %arg, i32* %arg1, i32* %arg2, f32 %arg3):
    i1 %0 = fcmp le f32 %arg, f32 1e-06;
    cbr i1 %0(prob = 0.5), [ ^indirect1 f32 %arg3 ], [ ^indirect2 f32 %arg3, i32* %arg2, i32* %arg1 ];
^indirect(f32 %arg, f32 %arg1, i32* %arg2, i32* %arg3):
    f32 %0 = fneg f32 %arg;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), [ ^indirect1 f32 %arg1 ], [ ^indirect2 f32 %arg1, i32* %arg2, i32* %arg3 ];
^indirect1(f32 %arg):
    ret f32 %arg;
^indirect2(f32 %arg, i32* %arg1, i32* %arg2):
    f32 %0 = fdiv f32 %arg, f32 3;
    f32 %1 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %0, i32* %arg2, i32* %arg1);
    f32 %2 = fmul f32 3, f32 %1;
    f32 %3 = fmul f32 4, f32 %1;
    f32 %4 = fmul f32 %3, f32 %1;
    f32 %5 = fmul f32 %4, f32 %1;
    f32 %6 = fsub f32 %2, f32 %5;
    ret f32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %width = alloc i32;
    i32* %height = alloc i32;
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    i1 %4 = fcmp gt f32 %0, f32 6.28319;
    i1 %5 = fcmp lt f32 %0, f32 -6.28319;
    f32 %6 = fdiv f32 %0, f32 6.28319;
    i32 %7 = f2s f32 %6 to i32;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fmul f32 %8, f32 6.28319;
    f32 %10 = fsub f32 %0, f32 %9;
    i1 %11 = fcmp gt f32 %10, f32 3.14159;
    i1 %12 = fcmp gt f32 %0, f32 3.14159;
    f32 %13 = fadd f32 %0, f32 1.5708;
    i1 %14 = fcmp gt f32 %13, f32 6.28319;
    i1 %15 = fcmp lt f32 %13, f32 -6.28319;
    f32 %16 = fdiv f32 %13, f32 6.28319;
    i32 %17 = f2s f32 %16 to i32;
    f32 %18 = s2f i32 %17 to f32;
    f32 %19 = fmul f32 %18, f32 6.28319;
    f32 %20 = fsub f32 %13, f32 %19;
    i1 %21 = fcmp gt f32 %20, f32 3.14159;
    i1 %22 = fcmp gt f32 %13, f32 3.14159;
    cbr i1 %3(prob = 0.5), [ ^entry1 i32 -1, i32* %width, i32* %height, i32 undef, i32 undef, f32 %0, i1 %4, i1 %14, f32 %13, f32 %20, i1 %22, i1 %15, i1 %5, f32 %10, i1 %21, i1 %11, i1 %12 ], [ ^b i32* %height, i32* %width, f32 %0, i1 %12, i1 %11, i1 %21, f32 %10, i1 %5, i1 %15, i1 %22, f32 %20, f32 %13, i1 %14, i1 %4 ];
^entry1(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg6, i1 %arg7, f32 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^b1 i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, f32 %arg8, i1 %arg7, i1 %arg6 ];
^b(i32* %arg, i32* %arg1, f32 %arg2, i1 %arg3, i1 %arg4, i1 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, f32 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 50;
    cbr i1 %1(prob = 0.5), [ ^entry1 i32 -1, i32* %arg1, i32* %arg, i32 undef, i32 undef, f32 %arg2, i1 %arg13, i1 %arg12, f32 %arg11, f32 %arg10, i1 %arg9, i1 %arg8, i1 %arg7, f32 %arg6, i1 %arg5, i1 %arg4, i1 %arg3 ], [ ^b2 i32* %arg1, i32* %arg, f32 %arg2, i1 %arg13, i1 %arg12, f32 %arg11, f32 %arg10, i1 %arg9, i1 %arg8, i1 %arg7, f32 %arg6, i1 %arg5, i1 %arg4, i1 %arg3 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i1 %arg5, i1 %arg6, i1 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, f32 %arg13, i1 %arg14, i1 %arg15):
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %arg2);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg3);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    i1 %0 = scmp gt i32 %arg3, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4, i32 0, i1 %arg15, i1 %arg14, f32 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, f32 %arg8, i1 %arg7, i1 %arg6, i1 %arg5 ], [ ^b3 ];
^b2(i32* %arg, i32* %arg1, f32 %arg2, i1 %arg3, i1 %arg4, f32 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 1024;
    i1 %3 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.5), [ ^entry1 i32 -1, i32* %arg, i32* %arg1, i32 %0, i32 %1, f32 %arg2, i1 %arg3, i1 %arg4, f32 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, i1 %arg12, i1 %arg13 ], [ ^indirect i32 %1, i32* %arg, i32* %arg1, i32 %0, i32 %1, f32 %arg2, i1 %arg13, i1 %arg12, i1 %arg11, f32 %arg10, i1 %arg9, i1 %arg8, i1 %arg7, f32 %arg6, f32 %arg5, i1 %arg4, i1 %arg3, i1 %3 ];
^if.then():
    ret i32 -1;
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg6, i1 %arg7, f32 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16):
    i1 %0 = scmp gt i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body1 i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 0, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, f32 %arg8, i1 %arg7, i1 %arg6 ], [ ^b4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, f32 %arg8, i1 %arg7, i1 %arg6 ];
^indirect(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17):
    i1 %0 = scmp gt i32 %arg, i32 1024;
    cbr i1 %0(prob = 0.5), [ ^entry1 i32 -1, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg16, i1 %arg15, f32 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, i1 %arg8, i1 %arg7, i1 %arg6 ], [ ^b5 i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17 ];
^b3():
    ret i32 0;
^while.body1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, i1 %arg12, i1 %arg13, f32 %arg14, f32 %arg15, i1 %arg16, i1 %arg17):
    cbr i1 %arg17(prob = 0.5), [ ^if.then1 i32* %arg1, i32* %arg, i32 %arg5, i32* %arg, i32 %arg6, i32* %arg1, i32* %arg1, i32* %arg, i32 %arg6, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg7, i1 %arg16, i1 %arg17, f32 %arg15, f32 %arg14, i1 %arg11, i1 %arg13, i1 %arg12, f32 %arg10, i1 %arg9, i1 %arg8 ], [ ^indirect1 i32* %arg1, i32* %arg, i32 %arg5, i32* %arg, i32 %arg6, i32* %arg1, i32* %arg1, i32* %arg, i32 %arg6, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, f32 %arg4, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, f32 %arg14, f32 %arg15, i1 %arg17, i1 %arg16, i1 %arg12, i1 %arg13, i1 %arg11 ];
^b4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %0, i1 %arg16, i1 %arg15, f32 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, i1 %arg8, i1 %arg7, i1 %arg6 ], [ ^b3 ];
^b5(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i1 %arg5, i1 %arg6, i1 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16):
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 255;
    cbr i1 %1(prob = 0.5), [ ^entry1 i32 -1, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4, i1 %arg15, i1 %arg14, f32 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, f32 %arg8, i1 %arg7, i1 %arg6, i1 %arg5 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, f32 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, f32 %arg8, i1 %arg7, i1 %arg6, i1 %arg5, i1 %arg15, i1 %arg14, i1 %arg16 ];
^if.then1(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, i1 %arg22, i1 %arg23):
    cbr i1 %arg23(prob = 0.5), [ ^if.then2 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg21, f32 %arg21, i1 %arg13, i1 %arg18, i1 %arg20, i1 %arg19, i1 %arg23, i1 %arg22, f32 %arg17, f32 %arg16, i1 %arg15, i1 %arg14 ], [ ^indirect2 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg21, f32 %arg21, i1 %arg13, i1 %arg18, i1 %arg20, i1 %arg19, i1 %arg23, i1 %arg22, f32 %arg17, f32 %arg16, i1 %arg15, i1 %arg14 ];
^indirect1(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23, i1 %arg24):
    cbr i1 %arg24(prob = 0.5), [ ^if.then1 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, i1 %arg14, i1 %arg21, i1 %arg20, f32 %arg19, f32 %arg18, i1 %arg24, i1 %arg23, i1 %arg22, f32 %arg17, i1 %arg16, i1 %arg15 ], [ ^indirect3 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg17, i1 %arg21, i1 %arg20, f32 %arg19, f32 %arg18, i1 %arg15, i1 %arg16, i1 %arg24, i1 %arg23, i1 %arg22, i1 %arg14 ];
^b6(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, f32 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, i1 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16):
    i1 %0 = scmp gt i32 %arg3, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 0, i1 %arg13, i1 %arg12, i1 %arg11, f32 %arg10, i1 %arg9, i1 %arg8, i1 %arg7, f32 %arg6, f32 %arg5, i1 %arg15, i1 %arg14, i1 %arg16 ], [ ^entry1 i32 0, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4, i1 %arg14, i1 %arg15, f32 %arg5, f32 %arg6, i1 %arg7, i1 %arg8, i1 %arg9, f32 %arg10, i1 %arg11, i1 %arg12, i1 %arg13 ];
^if.then2(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24):
    f32 %0 = fsub f32 %arg13, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then3 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %0, i1 %arg15, f32 %arg14, i1 %arg24, i1 %arg23, f32 %arg22, f32 %arg21, i1 %arg19, i1 %arg20, i1 %arg16, i1 %arg18, i1 %arg17 ], [ ^b7 f32 %0, i32* %arg1, i32* %arg, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg2, i32 %arg8, i32* %arg7, i32* %arg6, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24 ];
^indirect2(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24):
    i1 %0 = fcmp lt f32 %arg13, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then3 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, i1 %arg15, f32 %arg14, i1 %arg24, i1 %arg23, f32 %arg22, f32 %arg21, i1 %arg19, i1 %arg20, i1 %arg16, i1 %arg18, i1 %arg17 ], [ ^b7 f32 %arg13, i32* %arg1, i32* %arg, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg2, i32 %arg8, i32* %arg7, i32* %arg6, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24 ];
^indirect3(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23, i1 %arg24):
    cbr i1 %arg24(prob = 0.5), [ ^if.then2 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg24, i1 %arg21, i1 %arg23, i1 %arg22, i1 %arg19, i1 %arg20, f32 %arg18, f32 %arg17, i1 %arg16, i1 %arg15 ], [ ^indirect2 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg24, i1 %arg21, i1 %arg23, i1 %arg22, i1 %arg19, i1 %arg20, f32 %arg18, f32 %arg17, i1 %arg16, i1 %arg15 ];
^while.body2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17):
    cbr i1 %arg17(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 0, f32 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, i1 %arg8, i1 %arg7, i1 %arg6, i1 %arg16, i1 %arg15, i1 %arg17 ], [ ^b8 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17 ];
^if.then3(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, i1 %arg14, f32 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, f32 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23, i1 %arg24):
    f32 %0 = fadd f32 %arg13, f32 6.28319;
    ubr [ ^b7 f32 %0, i32* %arg1, i32* %arg, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg2, i32 %arg8, i32* %arg7, i32* %arg6, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg15, i1 %arg14, i1 %arg22, i1 %arg24, i1 %arg23, i1 %arg20, i1 %arg21, f32 %arg19, f32 %arg18, i1 %arg17, i1 %arg16 ];
^b7(f32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, f32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, f32 %arg21, f32 %arg22, i1 %arg23, i1 %arg24):
    f32 %0 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %arg, i32* %arg2, i32* %arg1);
    cbr i1 %arg24(prob = 0.5), [ ^if.then4 i32* %arg3, i32* %arg5, i32 %arg4, i32 %arg6, f32 %0, i32* %arg9, i32* %arg8, i32 %arg7, i32 %arg10, i32 %arg11, f32 %arg12, i32 %arg13, i1 %arg15, f32 %arg14, i1 %arg16, i1 %arg17, i1 %arg18, f32 %arg22, i1 %arg24, i1 %arg23, f32 %arg21, i1 %arg19, i1 %arg20 ], [ ^indirect4 i32* %arg3, i32* %arg5, i32 %arg4, i32 %arg6, f32 %0, i32* %arg9, i32* %arg8, i32 %arg7, i32 %arg10, i32 %arg11, f32 %arg12, i32 %arg13, f32 %arg22, f32 %arg22, f32 %arg14, i1 %arg15, i1 %arg19, i1 %arg20, f32 %arg21, i1 %arg24, i1 %arg23, i1 %arg16, i1 %arg18, i1 %arg17 ];
^super.header(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18):
    i32 %0 = add i32 %arg6, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1(prob = 0.67), [ ^while.body3 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18 ], [ ^while.body4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18 ];
^b8(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17):
    i32 %0 = add i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.97), [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %0, i1 %arg6, i1 %arg7, i1 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17 ], [ ^entry1 i32 0, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, f32 %arg4, i1 %arg16, i1 %arg15, f32 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, i1 %arg8, i1 %arg7, i1 %arg6 ];
^if.then4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, f32 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, i1 %arg21, i1 %arg22):
    cbr i1 %arg22(prob = 0.5), [ ^if.then5 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg20, f32 %arg17, f32 %arg20, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg22, i1 %arg21, i1 %arg12, i1 %arg18, i1 %arg19 ], [ ^indirect5 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg20, f32 %arg17, f32 %arg20, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg22, i1 %arg21, i1 %arg12, i1 %arg18, i1 %arg19 ];
^indirect4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    cbr i1 %arg23(prob = 0.5), [ ^if.then4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, i1 %arg15, f32 %arg14, i1 %arg21, i1 %arg23, i1 %arg22, f32 %arg13, i1 %arg19, i1 %arg20, f32 %arg18, i1 %arg16, i1 %arg17 ], [ ^indirect6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg14, f32 %arg18, f32 %arg13, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg23, i1 %arg22 ];
^while.body3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18):
    i32 %0 = mul i32 %arg2, i32 %arg5;
    i32 %1 = add i32 %arg6, i32 %0;
    i32* %2 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %1];
    i32 %3 = call () -> i32 @getint();
    store i32* %2 with i32 %3;
    i32 %4 = add i32 %arg6, i32 1;
    i32 %5 = add i32 %4, i32 %0;
    i32* %6 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %5];
    i32 %7 = call () -> i32 @getint();
    store i32* %6 with i32 %7;
    i32 %8 = add i32 %arg6, i32 2;
    i32 %9 = add i32 %8, i32 %0;
    i32* %10 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %9];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %arg6, i32 3;
    i32 %13 = add i32 %12, i32 %0;
    i32* %14 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %13];
    i32 %15 = call () -> i32 @getint();
    store i32* %14 with i32 %15;
    i32 %16 = add i32 %arg6, i32 4;
    i32 %17 = add i32 %16, i32 %0;
    i32* %18 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %17];
    i32 %19 = call () -> i32 @getint();
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %arg6, i32 5;
    i32 %21 = add i32 %20, i32 %0;
    i32* %22 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %21];
    i32 %23 = call () -> i32 @getint();
    store i32* %22 with i32 %23;
    i32 %24 = add i32 %arg6, i32 6;
    i32 %25 = add i32 %24, i32 %0;
    i32* %26 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %25];
    i32 %27 = call () -> i32 @getint();
    store i32* %26 with i32 %27;
    i32 %28 = add i32 %arg6, i32 7;
    i32 %29 = add i32 %28, i32 %0;
    i32* %30 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %29];
    i32 %31 = call () -> i32 @getint();
    store i32* %30 with i32 %31;
    i32 %32 = add i32 %arg6, i32 8;
    i32 %33 = add i32 %32, i32 %0;
    i32* %34 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %33];
    i32 %35 = call () -> i32 @getint();
    store i32* %34 with i32 %35;
    i32 %36 = add i32 %arg6, i32 9;
    i32 %37 = add i32 %36, i32 %0;
    i32* %38 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %37];
    i32 %39 = call () -> i32 @getint();
    store i32* %38 with i32 %39;
    i32 %40 = add i32 %arg6, i32 10;
    i32 %41 = add i32 %40, i32 %0;
    i32* %42 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %41];
    i32 %43 = call () -> i32 @getint();
    store i32* %42 with i32 %43;
    i32 %44 = add i32 %arg6, i32 11;
    i32 %45 = add i32 %44, i32 %0;
    i32* %46 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %45];
    i32 %47 = call () -> i32 @getint();
    store i32* %46 with i32 %47;
    i32 %48 = add i32 %arg6, i32 12;
    i32 %49 = add i32 %48, i32 %0;
    i32* %50 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %49];
    i32 %51 = call () -> i32 @getint();
    store i32* %50 with i32 %51;
    i32 %52 = add i32 %arg6, i32 13;
    i32 %53 = add i32 %52, i32 %0;
    i32* %54 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %53];
    i32 %55 = call () -> i32 @getint();
    store i32* %54 with i32 %55;
    i32 %56 = add i32 %arg6, i32 14;
    i32 %57 = add i32 %56, i32 %0;
    i32* %58 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %57];
    i32 %59 = call () -> i32 @getint();
    store i32* %58 with i32 %59;
    i32 %60 = add i32 %arg6, i32 15;
    i32 %61 = add i32 %60, i32 %0;
    i32* %62 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %61];
    i32 %63 = call () -> i32 @getint();
    store i32* %62 with i32 %63;
    i32 %64 = add i32 %arg6, i32 16;
    i1 %65 = scmp lt i32 %64, i32 %arg2;
    cbr i1 %65(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %64, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18 ], [ ^b8 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, f32 %arg8, f32 %arg7, i1 %arg17, i1 %arg16, i1 %arg18 ];
^while.body4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18):
    i32 %0 = mul i32 %arg2, i32 %arg5;
    i32 %1 = add i32 %0, i32 %arg6;
    i32* %2 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %1];
    i32 %3 = call () -> i32 @getint();
    store i32* %2 with i32 %3;
    i32 %4 = add i32 %arg6, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %arg2;
    cbr i1 %5(prob = 0.97), [ ^while.body4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i32 %4, f32 %arg7, f32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18 ], [ ^b8 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32 %arg5, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, f32 %arg8, f32 %arg7, i1 %arg17, i1 %arg16, i1 %arg18 ];
^if.then5(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    f32 %0 = fsub f32 %arg12, f32 6.28319;
    i1 %1 = fcmp lt f32 %0, f32 -3.14159;
    cbr i1 %1(prob = 0.5), [ ^if.then6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %0, i1 %arg21, i1 %arg20, i1 %arg19, f32 %arg18, i1 %arg17, i1 %arg16, i1 %arg15, f32 %arg14, f32 %arg13, i1 %arg22, i1 %arg23 ], [ ^b9 f32 %0, i32* %arg1, i32* %arg, f32 %arg4, i32 %arg3, i32 %arg2, i32 %arg7, i32* %arg6, i32* %arg5, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ];
^indirect5(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    i1 %0 = fcmp lt f32 %arg12, f32 -3.14159;
    cbr i1 %0(prob = 0.5), [ ^if.then6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, i1 %arg21, i1 %arg20, i1 %arg19, f32 %arg18, i1 %arg17, i1 %arg16, i1 %arg15, f32 %arg14, f32 %arg13, i1 %arg22, i1 %arg23 ], [ ^b9 f32 %arg12, i32* %arg1, i32* %arg, f32 %arg4, i32 %arg3, i32 %arg2, i32 %arg7, i32* %arg6, i32* %arg5, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ];
^indirect6(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    cbr i1 %arg23(prob = 0.5), [ ^if.then5 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg18, f32 %arg17, i1 %arg23, i1 %arg22, i1 %arg21, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, i1 %arg19, i1 %arg20 ], [ ^indirect5 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, f32 %arg18, f32 %arg17, i1 %arg23, i1 %arg22, i1 %arg21, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, i1 %arg19, i1 %arg20 ];
^if.then6(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, f32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, f32 %arg20, f32 %arg21, i1 %arg22, i1 %arg23):
    f32 %0 = fadd f32 %arg12, f32 6.28319;
    ubr [ ^b9 f32 %0, i32* %arg1, i32* %arg, f32 %arg4, i32 %arg3, i32 %arg2, i32 %arg7, i32* %arg6, i32* %arg5, i32 %arg8, i32 %arg9, f32 %arg10, i32 %arg11, f32 %arg21, f32 %arg20, i1 %arg19, i1 %arg18, i1 %arg17, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, i1 %arg22, i1 %arg23 ];
^b9(f32 %arg, i32* %arg1, i32* %arg2, f32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23):
    f32 %0 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %arg, i32* %arg2, i32* %arg1);
    i32 %1 = sdiv i32 %arg9, i32 2;
    i32 %2 = sdiv i32 %arg10, i32 2;
    i32 %3 = sub i32 %arg5, i32 %1;
    i32 %4 = sub i32 %arg4, i32 %2;
    f32 %5 = s2f i32 %3 to f32;
    f32 %6 = fmul f32 %5, f32 %0;
    f32 %7 = s2f i32 %4 to f32;
    f32 %8 = fmul f32 %7, f32 %arg3;
    f32 %9 = fsub f32 %6, f32 %8;
    f32 %10 = s2f i32 %1 to f32;
    f32 %11 = fadd f32 %9, f32 %10;
    i32 %12 = f2s f32 %11 to i32;
    f32 %13 = fmul f32 %7, f32 %0;
    f32 %14 = ffma f32 %5, f32 %arg3, f32 %13;
    f32 %15 = s2f i32 %2 to f32;
    f32 %16 = fadd f32 %14, f32 %15;
    i32 %17 = f2s f32 %16 to i32;
    i1 %18 = scmp lt i32 %12, i32 0;
    cbr i1 %18(prob = 0.5), [ ^while.body5 i32 0, i32* %arg8, i32* %arg7, i32 %arg6, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ], [ ^indirect7 i32 %arg9, i32 %12, i32 %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, f32 %arg11, i32 %arg12, i32 %12, i32 %17, f32 %arg13, f32 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, f32 %arg18, i1 %arg19, i1 %arg20, i1 %arg21, i1 %arg22, i1 %arg23 ];
^while.body5(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10, i1 %arg11, i1 %arg12, f32 %arg13, i1 %arg14, i1 %arg15, i1 %arg16, i1 %arg17, i1 %arg18):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 32);
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.97), [ ^while.body1 i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, f32 %arg6, i32 %arg7, i32 %0, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, f32 %arg8, i1 %arg17, i1 %arg18 ], [ ^b4 i32* %arg1, i32* %arg2, i32 %arg4, i32 %arg5, f32 %arg6, i32 %arg7, i1 %arg16, i1 %arg15, i1 %arg14, f32 %arg13, i1 %arg12, i1 %arg11, i1 %arg10, f32 %arg9, f32 %arg8, i1 %arg17, i1 %arg18 ];
^indirect7(i32 %arg, i32 %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, f32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, i1 %arg21):
    i1 %0 = scmp ge i32 %arg1, i32 %arg;
    cbr i1 %0(prob = 0.5), [ ^while.body5 i32 0, i32* %arg4, i32* %arg3, i32 %arg2, i32 %arg5, i32 %arg6, f32 %arg7, i32 %arg8, f32 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19, i1 %arg20, i1 %arg21 ], [ ^b10 i32* %arg4, i32* %arg3, i32 %arg2, i32 %arg5, i32 %arg6, f32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg19, i1 %arg18, i1 %arg17, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, f32 %arg11, i1 %arg20, i1 %arg21 ];
^b10(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19):
    i1 %0 = scmp lt i32 %arg8, i32 0;
    cbr i1 %0(prob = 0.5), [ ^while.body5 i32 0, i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, f32 %arg17, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, i1 %arg18, i1 %arg19 ], [ ^b11 i32 %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19 ];
^b11(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19):
    i1 %0 = scmp ge i32 %arg8, i32 %arg4;
    cbr i1 %0(prob = 0.5), [ ^while.body5 i32 0, i32* %arg2, i32* %arg1, i32 %arg, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, f32 %arg17, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, i1 %arg18, i1 %arg19 ], [ ^b12 i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19 ];
^b12(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i1 %arg10, i1 %arg11, f32 %arg12, i1 %arg13, i1 %arg14, i1 %arg15, f32 %arg16, f32 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = mul i32 %arg3, i32 %arg8;
    i32 %1 = add i32 %0, i32 %arg7;
    i32* %2 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %1];
    i32 %3 = load i32* %2;
    ubr [ ^while.body5 i32 %3, i32* %arg2, i32* %arg1, i32 %arg, i32 %arg3, i32 %arg4, f32 %arg5, i32 %arg6, f32 %arg17, f32 %arg16, i1 %arg15, i1 %arg14, i1 %arg13, f32 %arg12, i1 %arg11, i1 %arg10, i1 %arg9, i1 %arg18, i1 %arg19 ];
}
