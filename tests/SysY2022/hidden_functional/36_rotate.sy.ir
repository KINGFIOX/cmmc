internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @MAX_WIDTH { ReadOnly } = 1024;
internal i32* @MAX_HEIGHT { ReadOnly } = 1024;
internal [1048576 * i32]* @image;
internal i32* @width;
internal i32* @height;
internal f32* @PI { ReadOnly } = 3.14159;
internal f32* @TWO_PI { ReadOnly } = 6.28319;
internal f32* @EPSILON { ReadOnly } = 1e-06;
internal func @my_fabs(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = load f32* %x1;
    ret f32 %4;
^b:
    f32 %5 = load f32* %x1;
    f32 %6 = fneg f32 %5;
    ret f32 %6;
}
internal func @p(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fmul f32 3, f32 %0;
    f32 %2 = load f32* %x1;
    f32 %3 = fmul f32 4, f32 %2;
    f32 %4 = load f32* %x1;
    f32 %5 = fmul f32 %3, f32 %4;
    f32 %6 = load f32* %x1;
    f32 %7 = fmul f32 %5, f32 %6;
    f32 %8 = fsub f32 %1, f32 %7;
    ret f32 %8;
}
internal func @my_sin_impl(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = call (f32) -> f32 @my_fabs(f32 %0);
    i1 %2 = fcmp le f32 %1, f32 1e-06;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %5 = load f32* %x1;
    ret f32 %5;
^b:
    f32 %6 = load f32* %x1;
    f32 %7 = fdiv f32 %6, f32 3;
    f32 %8 = call (f32) -> f32 @my_sin_impl(f32 %7);
    f32 %9 = call (f32) -> f32 @p(f32 %8);
    ret f32 %9;
}
internal func @my_sin(f32 %x) -> f32 {
^entry:
    i32* %xx = alloc i32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 6.28319;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    f32 %4 = load f32* %x1;
    i1 %5 = fcmp lt f32 %4, f32 -6.28319;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^if.then:
    f32 %11 = load f32* %x1;
    f32 %12 = fdiv f32 %11, f32 6.28319;
    i32 %13 = f2s f32 %12 to i32;
    store i32* %xx with i32 %13;
    f32 %14 = load f32* %x1;
    i32 %15 = load i32* %xx;
    f32 %16 = s2f i32 %15 to f32;
    f32 %17 = fmul f32 %16, f32 6.28319;
    f32 %18 = fsub f32 %14, f32 %17;
    store f32* %x1 with f32 %18;
    ubr ^b2;
^b2:
    f32 %19 = load f32* %x1;
    i1 %20 = fcmp gt f32 %19, f32 3.14159;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^b3;
^if.then1:
    f32 %23 = load f32* %x1;
    f32 %24 = fsub f32 %23, f32 6.28319;
    store f32* %x1 with f32 %24;
    ubr ^b3;
^b3:
    f32 %25 = load f32* %x1;
    i1 %26 = fcmp lt f32 %25, f32 -3.14159;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    f32 %29 = load f32* %x1;
    f32 %30 = fadd f32 %29, f32 6.28319;
    store f32* %x1 with f32 %30;
    ubr ^b4;
^b4:
    f32 %31 = load f32* %x1;
    f32 %32 = call (f32) -> f32 @my_sin_impl(f32 %31);
    ret f32 %32;
}
internal func @my_cos(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fadd f32 %0, f32 1.5708;
    f32 %2 = call (f32) -> f32 @my_sin(f32 %1);
    ret f32 %2;
}
internal func @read_image() -> i32 {
^entry:
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 80;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp neq i32 %4, i32 50;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %11 = call () -> i32 @getint();
    store i32* @width with i32 %11;
    i32 %12 = call () -> i32 @getint();
    store i32* @height with i32 %12;
    i32 %13 = load i32* @width;
    i1 %14 = scmp gt i32 %13, i32 1024;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^b4, ^b3;
^if.then:
    ret i32 -1;
^b3:
    i32 %17 = load i32* @height;
    i1 %18 = scmp gt i32 %17, i32 1024;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    ubr ^b4;
^b4:
    i1 %21 = phi [^b3, i1 %20] [^b2, i1 true];
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b6, ^b5;
^b5:
    i32 %24 = call () -> i32 @getint();
    i1 %25 = scmp neq i32 %24, i32 255;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    ubr ^b6;
^b6:
    i1 %28 = phi [^b5, i1 %27] [^b4, i1 true];
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then1, ^b7;
^b7:
    store i32* %y with i32 0;
    ubr ^while.header;
^if.then1:
    ret i32 -1;
^while.header:
    i32 %31 = load i32* %y;
    i32 %32 = load i32* @height;
    i1 %33 = scmp lt i32 %31, i32 %32;
    i32 %34 = zext i1 %33 to i32;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body, ^b8;
^while.body:
    store i32* %x with i32 0;
    ubr ^while.header1;
^b8:
    ret i32 0;
^while.header1:
    i32 %36 = load i32* %x;
    i32 %37 = load i32* @width;
    i1 %38 = scmp lt i32 %36, i32 %37;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body1, ^b9;
^while.body1:
    i32 %41 = load i32* %y;
    i32 %42 = load i32* @width;
    i32 %43 = mul i32 %41, i32 %42;
    i32 %44 = load i32* %x;
    i32 %45 = add i32 %43, i32 %44;
    i64 %46 = sext i32 %45 to i64;
    i32* %47 = getelementptr &([1048576 * i32]* @image)[i64 0][i64 %46];
    i32 %48 = call () -> i32 @getint();
    store i32* %47 with i32 %48;
    i32 %49 = load i32* %x;
    i32 %50 = add i32 %49, i32 1;
    store i32* %x with i32 %50;
    ubr ^while.header1;
^b9:
    i32 %51 = load i32* %y;
    i32 %52 = add i32 %51, i32 1;
    store i32* %y with i32 %52;
    ubr ^while.header;
}
internal func @rotate(i32 %x, i32 %y, f32 %rad) -> i32 {
^entry:
    i32* %src_y = alloc i32;
    i32* %src_x = alloc i32;
    i32* %yt = alloc i32;
    i32* %xt = alloc i32;
    i32* %hheight = alloc i32;
    i32* %hwidth = alloc i32;
    f32* %cosma = alloc f32;
    f32* %sinma = alloc f32;
    f32* %rad1 = alloc f32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store f32* %rad1 with f32 %rad;
    f32 %0 = load f32* %rad1;
    f32 %1 = call (f32) -> f32 @my_sin(f32 %0);
    store f32* %sinma with f32 %1;
    f32 %2 = load f32* %rad1;
    f32 %3 = call (f32) -> f32 @my_cos(f32 %2);
    store f32* %cosma with f32 %3;
    i32 %4 = load i32* @width;
    i32 %5 = sdiv i32 %4, i32 2;
    store i32* %hwidth with i32 %5;
    i32 %6 = load i32* @height;
    i32 %7 = sdiv i32 %6, i32 2;
    store i32* %hheight with i32 %7;
    i32 %8 = load i32* %x1;
    i32 %9 = load i32* %hwidth;
    i32 %10 = sub i32 %8, i32 %9;
    store i32* %xt with i32 %10;
    i32 %11 = load i32* %y1;
    i32 %12 = load i32* %hheight;
    i32 %13 = sub i32 %11, i32 %12;
    store i32* %yt with i32 %13;
    i32 %14 = load i32* %xt;
    f32 %15 = load f32* %cosma;
    f32 %16 = s2f i32 %14 to f32;
    f32 %17 = fmul f32 %16, f32 %15;
    i32 %18 = load i32* %yt;
    f32 %19 = load f32* %sinma;
    f32 %20 = s2f i32 %18 to f32;
    f32 %21 = fmul f32 %20, f32 %19;
    f32 %22 = fsub f32 %17, f32 %21;
    i32 %23 = load i32* %hwidth;
    f32 %24 = s2f i32 %23 to f32;
    f32 %25 = fadd f32 %22, f32 %24;
    i32 %26 = f2s f32 %25 to i32;
    store i32* %src_x with i32 %26;
    i32 %27 = load i32* %xt;
    f32 %28 = load f32* %sinma;
    f32 %29 = s2f i32 %27 to f32;
    f32 %30 = fmul f32 %29, f32 %28;
    i32 %31 = load i32* %yt;
    f32 %32 = load f32* %cosma;
    f32 %33 = s2f i32 %31 to f32;
    f32 %34 = fmul f32 %33, f32 %32;
    f32 %35 = fadd f32 %30, f32 %34;
    i32 %36 = load i32* %hheight;
    f32 %37 = s2f i32 %36 to f32;
    f32 %38 = fadd f32 %35, f32 %37;
    i32 %39 = f2s f32 %38 to i32;
    store i32* %src_y with i32 %39;
    i32 %40 = load i32* %src_x;
    i1 %41 = scmp lt i32 %40, i32 0;
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^b1, ^b;
^b:
    i32 %44 = load i32* %src_x;
    i32 %45 = load i32* @width;
    i1 %46 = scmp ge i32 %44, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    ubr ^b1;
^b1:
    i1 %49 = phi [^b, i1 %48] [^entry, i1 true];
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %52 = load i32* %src_y;
    i1 %53 = scmp lt i32 %52, i32 0;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    ubr ^b3;
^b3:
    i1 %56 = phi [^b2, i1 %55] [^b1, i1 true];
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^b5, ^b4;
^b4:
    i32 %59 = load i32* %src_y;
    i32 %60 = load i32* @height;
    i1 %61 = scmp ge i32 %59, i32 %60;
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp neq i32 %62, i32 0;
    ubr ^b5;
^b5:
    i1 %64 = phi [^b4, i1 %63] [^b3, i1 true];
    i32 %65 = zext i1 %64 to i32;
    i1 %66 = scmp neq i32 %65, i32 0;
    cbr i1 %66(prob = 0.5), ^if.then, ^b6;
^if.then:
    ret i32 0;
^b6:
    i32 %67 = load i32* %src_y;
    i32 %68 = load i32* @width;
    i32 %69 = mul i32 %67, i32 %68;
    i32 %70 = load i32* %src_x;
    i32 %71 = add i32 %69, i32 %70;
    i64 %72 = sext i32 %71 to i64;
    i32* %73 = getelementptr &([1048576 * i32]* @image)[i64 0][i64 %72];
    i32 %74 = load i32* %73;
    ret i32 %74;
}
internal func @write_pgm(f32 %rad) -> void {
^entry:
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    f32* %rad1 = alloc f32;
    store f32* %rad1 with f32 %rad;
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    i32 %0 = load i32* @width;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 32);
    i32 %1 = load i32* @height;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    store i32* %y with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %y;
    i32 %3 = load i32* @height;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %x with i32 0;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %7 = load i32* %x;
    i32 %8 = load i32* @width;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %12 = load i32* %x;
    i32 %13 = load i32* %y;
    f32 %14 = load f32* %rad1;
    i32 %15 = call (i32, i32, f32) -> i32 @rotate(i32 %12, i32 %13, f32 %14);
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 32);
    i32 %16 = load i32* %x;
    i32 %17 = add i32 %16, i32 1;
    store i32* %x with i32 %17;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32 %18 = load i32* %y;
    i32 %19 = add i32 %18, i32 1;
    store i32* %y with i32 %19;
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    f32* %rad = alloc f32;
    f32 %0 = call () -> f32 @getfloat();
    store f32* %rad with f32 %0;
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @read_image();
    i1 %3 = scmp lt i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
^if.then:
    ret i32 -1;
^b:
    f32 %6 = load f32* %rad;
    call (f32) -> void @write_pgm(f32 %6);
    ret i32 0;
}
