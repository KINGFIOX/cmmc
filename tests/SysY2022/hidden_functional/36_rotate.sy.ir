internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
  ^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
  ^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 4, f32 %5;
    f32 %7 = fmul f32 %6, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 3, f32 %5;
    f32 %10 = fsub f32 %9, f32 %8;
    ubr ^b3;
  ^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp neq i32 %4, i32 50;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %6 = phi [^entry, i32 -1] [^b, i32 -1] [^b2, i32 -1] [^b3, i32 -1] [^b4, i32 -1] [^while.header1, i32 0];
    ret i32 %6;
  ^b2:
    i32 %7 = call () -> i32 @getint();
    i1 %8 = scmp gt i32 %7, i32 1024;
    i32 %9 = call () -> i32 @getint();
    cbr i1 %8(prob = 0.5), ^b1, ^b3;
  ^b3:
    i1 %10 = scmp gt i32 %9, i32 1024;
    cbr i1 %10(prob = 0.5), ^b1, ^b4;
  ^b4:
    i32 %11 = call () -> i32 @getint();
    i1 %12 = scmp neq i32 %11, i32 255;
    i1 %13 = scmp gt i32 %7, i32 0;
    [1048576 * i32]* %14 = ptrcast [1048576 * i32]* @image to [1048576 * i32]*;
    cbr i1 %12(prob = 0.5), ^b1, ^while.header;
  ^while.header:
    i32 %15 = phi [^b4, i32 0] [^b5, i32 %51];
    i1 %16 = scmp lt i32 %15, i32 %9;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry1;
  ^entry1:
    f32 %17 = fadd f32 %0, f32 1.5708;
    f32 %18 = fdiv f32 %17, f32 6.28319;
    i32 %19 = f2s f32 %18 to i32;
    f32 %20 = s2f i32 %19 to f32;
    f32 %21 = fmul f32 %20, f32 6.28319;
    f32 %22 = fsub f32 %17, f32 %21;
    i1 %23 = fcmp gt f32 %17, f32 6.28319;
    i1 %24 = fcmp lt f32 %17, f32 -6.28319;
    i1 %25 = or i1 %23, i1 %24;
    f32 %26 = select i1 %25 ? f32 %22 : f32 %17;
    i1 %27 = fcmp gt f32 %26, f32 3.14159;
    f32 %28 = fsub f32 %26, f32 6.28319;
    f32 %29 = select i1 %27 ? f32 %28 : f32 %26;
    i1 %30 = fcmp lt f32 %29, f32 -3.14159;
    f32 %31 = fadd f32 %29, f32 6.28319;
    f32 %32 = select i1 %30 ? f32 %31 : f32 %29;
    f32 %33 = call (f32) -> f32 @my_sin_impl(f32 %32);
    f32 %34 = fdiv f32 %0, f32 6.28319;
    i32 %35 = f2s f32 %34 to i32;
    f32 %36 = s2f i32 %35 to f32;
    f32 %37 = fmul f32 %36, f32 6.28319;
    f32 %38 = fsub f32 %0, f32 %37;
    i1 %39 = fcmp gt f32 %0, f32 6.28319;
    i1 %40 = fcmp lt f32 %0, f32 -6.28319;
    i1 %41 = or i1 %39, i1 %40;
    f32 %42 = select i1 %41 ? f32 %38 : f32 %0;
    i1 %43 = fcmp gt f32 %42, f32 3.14159;
    f32 %44 = fsub f32 %42, f32 6.28319;
    f32 %45 = select i1 %43 ? f32 %44 : f32 %42;
    i1 %46 = fcmp lt f32 %45, f32 -3.14159;
    f32 %47 = fadd f32 %45, f32 6.28319;
    f32 %48 = select i1 %46 ? f32 %47 : f32 %45;
    f32 %49 = call (f32) -> f32 @my_sin_impl(f32 %48);
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
  ^while.body:
    cbr i1 %13(prob = 0.97), ^indirect, ^b5;
  ^indirect:
    i32 %50 = mul i32 %7, i32 %15;
    ubr ^while.body1;
  ^b5:
    i32 %51 = add i32 %15, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %52 = phi [^entry1, i32 0] [^b6, i32 %60];
    i1 %53 = scmp lt i32 %52, i32 %9;
    cbr i1 %53(prob = 0.97), ^while.body2, ^b1;
  ^while.body1:
    i32 %54 = phi [^indirect, i32 0] [^while.body1, i32 %58];
    i32 %55 = call () -> i32 @getint();
    i32 %56 = add i32 %50, i32 %54;
    i32* %57 = getelementptr &([1048576 * i32]* %14)[i64 0][i32 %56];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %54, i32 1;
    i1 %59 = scmp lt i32 %58, i32 %7;
    cbr i1 %59(prob = 0.97), ^while.body1, ^b5;
  ^while.body2:
    cbr i1 %13(prob = 0.97), ^while.body3, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %60 = add i32 %52, i32 1;
    ubr ^while.header1;
  ^while.body3:
    i32 %61 = phi [^while.body2, i32 0] [^b7, i32 %76];
    i32 %62 = sdiv i32 %7, i32 2;
    i32 %63 = sub i32 %61, i32 %62;
    f32 %64 = s2f i32 %63 to f32;
    f32 %65 = fmul f32 %64, f32 %33;
    i32 %66 = sdiv i32 %9, i32 2;
    i32 %67 = sub i32 %52, i32 %66;
    f32 %68 = s2f i32 %67 to f32;
    f32 %69 = fmul f32 %68, f32 %49;
    f32 %70 = fsub f32 %65, f32 %69;
    f32 %71 = s2f i32 %62 to f32;
    f32 %72 = fadd f32 %70, f32 %71;
    i32 %73 = f2s f32 %72 to i32;
    i1 %74 = scmp lt i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^b7, ^b8;
  ^b7:
    i32 %75 = phi [^while.body3, i32 0] [^b8, i32 0] [^b9, i32 0] [^b10, i32 0] [^b11, i32 %90];
    call (i32) -> void @putint(i32 %75);
    call (i32) -> void @putch(i32 32);
    i32 %76 = add i32 %61, i32 1;
    i1 %77 = scmp lt i32 %76, i32 %7;
    cbr i1 %77(prob = 0.97), ^while.body3, ^b6;
  ^b8:
    i1 %78 = scmp ge i32 %73, i32 %7;
    cbr i1 %78(prob = 0.5), ^b7, ^b9;
  ^b9:
    f32 %79 = fmul f32 %64, f32 %49;
    f32 %80 = fmul f32 %68, f32 %33;
    f32 %81 = fadd f32 %79, f32 %80;
    f32 %82 = s2f i32 %66 to f32;
    f32 %83 = fadd f32 %81, f32 %82;
    i32 %84 = f2s f32 %83 to i32;
    i1 %85 = scmp lt i32 %84, i32 0;
    cbr i1 %85(prob = 0.5), ^b7, ^b10;
  ^b10:
    i1 %86 = scmp ge i32 %84, i32 %9;
    cbr i1 %86(prob = 0.5), ^b7, ^b11;
  ^b11:
    i32 %87 = mul i32 %7, i32 %84;
    i32 %88 = add i32 %73, i32 %87;
    i32* %89 = getelementptr &([1048576 * i32]* %14)[i64 0][i32 %88];
    i32 %90 = load i32* %89;
    ubr ^b7;
}
