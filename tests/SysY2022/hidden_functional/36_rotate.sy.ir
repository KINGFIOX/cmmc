internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    f32 %1 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %2 = phi [^entry, f32 %x] [^b, f32 %1];
    i1 %3 = fcmp le f32 %2, f32 1e-06;
    cbr i1 %3(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %4 = fdiv f32 %x, f32 3;
    f32 %5 = call (f32) -> f32 @my_sin_impl(f32 %4);
    f32 %6 = fmul f32 3, f32 %5;
    f32 %7 = fmul f32 4, f32 %5;
    f32 %8 = fmul f32 %7, f32 %5;
    f32 %9 = fmul f32 %8, f32 %5;
    f32 %10 = fsub f32 %6, f32 %9;
    ubr ^b3;
^b3:
    f32 %11 = phi [^b1, f32 %x] [^b2, f32 %10];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp neq i32 %4, i32 50;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %6 = phi [^entry, i32 -1] [^b, i32 -1] [^b2, i32 -1] [^b3, i32 -1] [^b4, i32 -1] [^while.header1, i32 0];
    ret i32 %6;
^b2:
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i1 %9 = scmp gt i32 %7, i32 1024;
    cbr i1 %9(prob = 0.5), ^b1, ^b3;
^b3:
    i1 %10 = scmp gt i32 %8, i32 1024;
    cbr i1 %10(prob = 0.5), ^b1, ^b4;
^b4:
    i32 %11 = sdiv i32 %7, i32 2;
    i32 %12 = sdiv i32 %8, i32 2;
    i1 %13 = scmp gt i32 %7, i32 0;
    f32 %14 = s2f i32 %11 to f32;
    f32 %15 = s2f i32 %12 to f32;
    i32 %16 = call () -> i32 @getint();
    i1 %17 = scmp neq i32 %16, i32 255;
    cbr i1 %17(prob = 0.5), ^b1, ^while.header;
^while.header:
    i32 %18 = phi [^b4, i32 0] [^b5, i32 %54];
    i1 %19 = scmp lt i32 %18, i32 %8;
    cbr i1 %19(prob = 0.97), ^while.body, ^entry1;
^entry1:
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    i1 %20 = fcmp gt f32 %0, f32 6.28319;
    i1 %21 = fcmp lt f32 %0, f32 -6.28319;
    i1 %22 = or i1 %20, i1 %21;
    f32 %23 = fdiv f32 %0, f32 6.28319;
    i32 %24 = f2s f32 %23 to i32;
    f32 %25 = s2f i32 %24 to f32;
    f32 %26 = fmul f32 %25, f32 6.28319;
    f32 %27 = fsub f32 %0, f32 %26;
    f32 %28 = fadd f32 %0, f32 1.5708;
    i1 %29 = fcmp gt f32 %28, f32 6.28319;
    i1 %30 = fcmp lt f32 %28, f32 -6.28319;
    i1 %31 = or i1 %29, i1 %30;
    f32 %32 = fdiv f32 %28, f32 6.28319;
    i32 %33 = f2s f32 %32 to i32;
    f32 %34 = s2f i32 %33 to f32;
    f32 %35 = fmul f32 %34, f32 6.28319;
    f32 %36 = fsub f32 %28, f32 %35;
    f32 %37 = select i1 %22 ? f32 %27 : f32 %0;
    i1 %38 = fcmp gt f32 %37, f32 3.14159;
    f32 %39 = fsub f32 %37, f32 6.28319;
    f32 %40 = select i1 %31 ? f32 %36 : f32 %28;
    i1 %41 = fcmp gt f32 %40, f32 3.14159;
    f32 %42 = fsub f32 %40, f32 6.28319;
    f32 %43 = select i1 %38 ? f32 %39 : f32 %37;
    i1 %44 = fcmp lt f32 %43, f32 -3.14159;
    f32 %45 = fadd f32 %43, f32 6.28319;
    f32 %46 = select i1 %41 ? f32 %42 : f32 %40;
    i1 %47 = fcmp lt f32 %46, f32 -3.14159;
    f32 %48 = fadd f32 %46, f32 6.28319;
    f32 %49 = select i1 %44 ? f32 %45 : f32 %43;
    f32 %50 = call (f32) -> f32 @my_sin_impl(f32 %49);
    f32 %51 = select i1 %47 ? f32 %48 : f32 %46;
    f32 %52 = call (f32) -> f32 @my_sin_impl(f32 %51);
    ubr ^while.header1;
^while.body:
    cbr i1 %13(prob = 0.97), ^indirect, ^b5;
^indirect:
    i32 %53 = mul i32 %7, i32 %18;
    ubr ^while.body1;
^b5:
    i32 %54 = add i32 %18, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %55 = phi [^entry1, i32 0] [^b6, i32 %67];
    i1 %56 = scmp lt i32 %55, i32 %8;
    i32 %57 = sub i32 %55, i32 %12;
    f32 %58 = s2f i32 %57 to f32;
    f32 %59 = fmul f32 %58, f32 %50;
    f32 %60 = fmul f32 %58, f32 %52;
    cbr i1 %56(prob = 0.97), ^while.body2, ^b1;
^while.body1:
    i32 %61 = phi [^indirect, i32 0] [^while.body1, i32 %65];
    i32 %62 = add i32 %61, i32 %53;
    i32* %63 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %62];
    i32 %64 = call () -> i32 @getint();
    store i32* %63 with i32 %64;
    i32 %65 = add i32 %61, i32 1;
    i1 %66 = scmp lt i32 %65, i32 %7;
    cbr i1 %66(prob = 0.97), ^while.body1, ^b5;
^while.body2:
    cbr i1 %13(prob = 0.97), ^while.body3, ^b6;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %67 = add i32 %55, i32 1;
    ubr ^while.header1;
^while.body3:
    i32 %68 = phi [^while.body2, i32 0] [^b7, i32 %77];
    i32 %69 = sub i32 %68, i32 %11;
    f32 %70 = s2f i32 %69 to f32;
    f32 %71 = fmul f32 %70, f32 %52;
    f32 %72 = fsub f32 %71, f32 %59;
    f32 %73 = fadd f32 %72, f32 %14;
    i32 %74 = f2s f32 %73 to i32;
    i1 %75 = scmp lt i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^b7, ^b8;
^b7:
    i32 %76 = phi [^while.body3, i32 0] [^b8, i32 0] [^b9, i32 0] [^b10, i32 0] [^b11, i32 %89];
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 32);
    i32 %77 = add i32 %68, i32 1;
    i1 %78 = scmp lt i32 %77, i32 %7;
    cbr i1 %78(prob = 0.97), ^while.body3, ^b6;
^b8:
    i1 %79 = scmp ge i32 %74, i32 %7;
    cbr i1 %79(prob = 0.5), ^b7, ^b9;
^b9:
    f32 %80 = fmul f32 %70, f32 %50;
    f32 %81 = fadd f32 %80, f32 %60;
    f32 %82 = fadd f32 %81, f32 %15;
    i32 %83 = f2s f32 %82 to i32;
    i1 %84 = scmp lt i32 %83, i32 0;
    cbr i1 %84(prob = 0.5), ^b7, ^b10;
^b10:
    i1 %85 = scmp ge i32 %83, i32 %8;
    cbr i1 %85(prob = 0.5), ^b7, ^b11;
^b11:
    i32 %86 = mul i32 %7, i32 %83;
    i32 %87 = add i32 %74, i32 %86;
    i32* %88 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %87];
    i32 %89 = load i32* %88;
    ubr ^b7;
}
