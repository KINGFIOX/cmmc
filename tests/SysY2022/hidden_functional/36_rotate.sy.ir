internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image, align 8 { Flexible };
internal func @my_sin_impl(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fabs f32 %x;
    i1 %1 = fcmp ole f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    f32 %2 = fdiv f32 %x, f32 3;
    f32 %3 = fabs f32 %2;
    i1 %4 = fcmp ole f32 %3, f32 1e-06;
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b1:
    f32 %5 = phi [^entry, f32 %x] [^b2, f32 %11];
    ret f32 %5;
  ^b2:
    f32 %6 = phi [^b, f32 %2] [^b3, f32 %18];
    f32 %7 = fmul f32 %6, f32 4;
    f32 %8 = fmul f32 %7, f32 %6;
    f32 %9 = fmul f32 %8, f32 %6;
    f32 %10 = fmul f32 %6, f32 3;
    f32 %11 = fsub f32 %10, f32 %9;
    ubr ^b1;
  ^b3:
    f32 %12 = fdiv f32 %2, f32 3;
    f32 %13 = call (f32) -> f32 @my_sin_impl(f32 %12);
    f32 %14 = fmul f32 %13, f32 4;
    f32 %15 = fmul f32 %14, f32 %13;
    f32 %16 = fmul f32 %15, f32 %13;
    f32 %17 = fmul f32 %13, f32 3;
    f32 %18 = fsub f32 %17, f32 %16;
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = icmp neq i32 %2, i32 80;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = icmp neq i32 %4, i32 50;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %6 = phi [^entry, i32 -1] [^b, i32 -1] [^b2, i32 -1] [^b3, i32 -1] [^b4, i32 -1] [^while.header2, i32 0];
    ret i32 %6;
  ^b2:
    i32 %7 = call () -> i32 @getint();
    i1 %8 = icmp sgt i32 %7, i32 1024;
    i32 %9 = call () -> i32 @getint();
    cbr i1 %8(prob = 0.5), ^b1, ^b3;
  ^b3:
    i1 %10 = icmp sgt i32 %9, i32 1024;
    cbr i1 %10(prob = 0.5), ^b1, ^b4;
  ^b4:
    i32 %11 = call () -> i32 @getint();
    i1 %12 = icmp neq i32 %11, i32 255;
    i32 %13 = sdiv i32 %7, i32 2;
    f32 %14 = s2f i32 %13 to f32;
    i32 %15 = sdiv i32 %9, i32 2;
    f32 %16 = s2f i32 %15 to f32;
    i1 %17 = icmp sgt i32 %7, i32 0;
    [1048576 * i32]* %18 = ptrcast [1048576 * i32]* @image to [1048576 * i32]*;
    cbr i1 %12(prob = 0.5), ^b1, ^while.header;
  ^while.header:
    i32 %19 = phi [^b4, i32 0] [^b5, i32 %55];
    i1 %20 = icmp sgt i32 %9, i32 %19;
    cbr i1 %20(prob = 0.984615), ^while.header1, ^entry1;
  ^entry1:
    f32 %21 = fadd f32 %0, f32 1.5708;
    f32 %22 = fdiv f32 %21, f32 6.28319;
    i32 %23 = f2s f32 %22 to i32;
    f32 %24 = s2f i32 %23 to f32;
    f32 %25 = fmul f32 %24, f32 6.28319;
    f32 %26 = fsub f32 %21, f32 %25;
    i1 %27 = fcmp ogt f32 %21, f32 6.28319;
    i1 %28 = fcmp olt f32 %21, f32 -6.28319;
    i1 %29 = or i1 %27, i1 %28;
    f32 %30 = select i1 %29 ? f32 %26 : f32 %21;
    i1 %31 = fcmp ogt f32 %30, f32 3.14159;
    f32 %32 = fsub f32 %30, f32 6.28319;
    f32 %33 = select i1 %31 ? f32 %32 : f32 %30;
    i1 %34 = fcmp olt f32 %33, f32 -3.14159;
    f32 %35 = fadd f32 %33, f32 6.28319;
    f32 %36 = select i1 %34 ? f32 %35 : f32 %33;
    f32 %37 = call (f32) -> f32 @my_sin_impl(f32 %36);
    f32 %38 = fdiv f32 %0, f32 6.28319;
    i32 %39 = f2s f32 %38 to i32;
    f32 %40 = s2f i32 %39 to f32;
    f32 %41 = fmul f32 %40, f32 6.28319;
    f32 %42 = fsub f32 %0, f32 %41;
    i1 %43 = fcmp ogt f32 %0, f32 6.28319;
    i1 %44 = fcmp olt f32 %0, f32 -6.28319;
    i1 %45 = or i1 %43, i1 %44;
    f32 %46 = select i1 %45 ? f32 %42 : f32 %0;
    i1 %47 = fcmp ogt f32 %46, f32 3.14159;
    f32 %48 = fsub f32 %46, f32 6.28319;
    f32 %49 = select i1 %47 ? f32 %48 : f32 %46;
    i1 %50 = fcmp olt f32 %49, f32 -3.14159;
    f32 %51 = fadd f32 %49, f32 6.28319;
    f32 %52 = select i1 %50 ? f32 %51 : f32 %49;
    f32 %53 = call (f32) -> f32 @my_sin_impl(f32 %52);
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    cbr i1 %17(prob = 0.984615), ^prebody, ^b5;
  ^prebody:
    i32 %54 = mul i32 %7, i32 %19;
    ubr ^while.body;
  ^b5:
    i32 %55 = add i32 %19, i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %56 = phi [^entry1, i32 0] [^b6, i32 %68];
    i1 %57 = icmp sgt i32 %9, i32 %56;
    cbr i1 %57(prob = 0.984615), ^while.header3, ^b1;
  ^while.body:
    i32 %58 = phi [^prebody, i32 0] [^while.body, i32 %62];
    i32 %59 = call () -> i32 @getint();
    i32 %60 = add i32 %54, i32 %58;
    i32* %61 = getelementptr &([1048576 * i32]* %18)[i64 0][i32 %60];
    store i32* %61 with i32 %59;
    i32 %62 = add i32 %58, i32 1;
    i1 %63 = icmp sgt i32 %7, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.body, ^b5;
  ^while.header3:
    i32 %64 = sub i32 %56, i32 %15;
    f32 %65 = s2f i32 %64 to f32;
    f32 %66 = fmul f32 %65, f32 %37;
    f32 %67 = fmul f32 %65, f32 %53;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %68 = add i32 %56, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %69 = phi [^while.header3, i32 0] [^b7, i32 %86];
    i32 %70 = sub i32 %69, i32 %13;
    f32 %71 = s2f i32 %70 to f32;
    f32 %72 = fmul f32 %71, f32 %37;
    f32 %73 = fsub f32 %72, f32 %67;
    f32 %74 = fadd f32 %73, f32 %14;
    i32 %75 = f2s f32 %74 to i32;
    i1 %76 = icmp sle i32 %7, i32 %75;
    i1 %77 = icmp slt i32 %75, i32 0;
    i1 %78 = or i1 %76, i1 %77;
    f32 %79 = fmul f32 %71, f32 %53;
    f32 %80 = fadd f32 %79, f32 %66;
    f32 %81 = fadd f32 %80, f32 %16;
    i32 %82 = f2s f32 %81 to i32;
    i1 %83 = icmp slt i32 %82, i32 0;
    i1 %84 = or i1 %78, i1 %83;
    cbr i1 %84(prob = 0.5), ^b7, ^b8;
  ^b7:
    i32 %85 = phi [^while.body1, i32 0] [^b8, i32 0] [^b9, i32 %92];
    call (i32) -> void @putint(i32 %85);
    call (i32) -> void @putch(i32 32);
    i32 %86 = add i32 %69, i32 1;
    i1 %87 = icmp sgt i32 %7, i32 %86;
    cbr i1 %87(prob = 0.984615), ^while.body1, ^b6;
  ^b8:
    i1 %88 = icmp sle i32 %9, i32 %82;
    cbr i1 %88(prob = 0.5), ^b7, ^b9;
  ^b9:
    i32 %89 = mul i32 %7, i32 %82;
    i32 %90 = add i32 %75, i32 %89;
    i32* %91 = getelementptr &([1048576 * i32]* %18)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    ubr ^b7;
}
