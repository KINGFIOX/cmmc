internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image;
internal func @my_sin_impl(f32 %x, i32* %0, i32* %1) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %2 = fcmp gt f32 %x, f32 0;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
^b:
    f32 %3 = fneg f32 %x;
    ubr ^b1;
^b1:
    f32 %4 = phi [^entry, f32 %x] [^b, f32 %3];
    i1 %5 = fcmp le f32 %4, f32 1e-06;
    cbr i1 %5(prob = 0.5), ^b3, ^b2;
^b2:
    f32 %6 = fdiv f32 %x, f32 3;
    f32 %7 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %6, i32* %0, i32* %1);
    f32 %8 = fmul f32 3, f32 %7;
    f32 %9 = fmul f32 4, f32 %7;
    f32 %10 = fmul f32 %9, f32 %7;
    f32 %11 = fmul f32 %10, f32 %7;
    f32 %12 = fsub f32 %8, f32 %11;
    ubr ^b3;
^b3:
    f32 %13 = phi [^b1, f32 %x] [^b2, f32 %12];
    ret f32 %13;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    f32 %0 = call () -> f32 @getfloat();
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @getch();
    i1 %3 = scmp neq i32 %2, i32 80;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp neq i32 %4, i32 50;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %6 = phi [^b3, i32 -1] [^b2, i32 -1] [^b, i32 -1] [^entry1, i32 0] [^entry, i32 -1] [^b6, i32 0];
    ret i32 %6;
^b2:
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i1 %9 = scmp gt i32 %7, i32 1024;
    i1 %10 = scmp gt i32 %8, i32 1024;
    i1 %11 = or i1 %9, i1 %10;
    cbr i1 %11(prob = 0.75), ^b1, ^b3;
^b3:
    i32 %12 = sdiv i32 %8, i32 2;
    i32 %13 = sdiv i32 %7, i32 2;
    f32 %14 = s2f i32 %12 to f32;
    f32 %15 = s2f i32 %13 to f32;
    i1 %16 = scmp gt i32 %7, i32 0;
    i32 %17 = call () -> i32 @getint();
    i1 %18 = scmp neq i32 %17, i32 255;
    cbr i1 %18(prob = 0.5), ^b1, ^b4;
^b4:
    i1 %19 = scmp gt i32 %8, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %20 = phi [^b4, i32 0] [^b5, i32 %42];
    cbr i1 %16(prob = 0.97), ^indirect, ^b5;
^entry1:
    call (i32) -> void @putch(i32 80);
    call (i32) -> void @putch(i32 50);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 255);
    call (i32) -> void @putch(i32 10);
    i1 %21 = fcmp gt f32 %0, f32 6.28319;
    i1 %22 = fcmp lt f32 %0, f32 -6.28319;
    i1 %23 = or i1 %21, i1 %22;
    f32 %24 = fdiv f32 %0, f32 6.28319;
    i32 %25 = f2s f32 %24 to i32;
    f32 %26 = s2f i32 %25 to f32;
    f32 %27 = fmul f32 %26, f32 6.28319;
    f32 %28 = fsub f32 %0, f32 %27;
    f32 %29 = fadd f32 %0, f32 1.5708;
    i1 %30 = fcmp gt f32 %29, f32 6.28319;
    i1 %31 = fcmp lt f32 %29, f32 -6.28319;
    i1 %32 = or i1 %30, i1 %31;
    f32 %33 = fdiv f32 %29, f32 6.28319;
    i32 %34 = f2s f32 %33 to i32;
    f32 %35 = s2f i32 %34 to f32;
    f32 %36 = fmul f32 %35, f32 6.28319;
    f32 %37 = fsub f32 %29, f32 %36;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b1;
^indirect:
    i32 %38 = mul i32 %7, i32 %20;
    ubr ^while.body2;
^while.body1:
    i32 %39 = phi [^b6, i32 %51] [^entry1, i32 0];
    i32 %40 = sub i32 %39, i32 %12;
    f32 %41 = s2f i32 %40 to f32;
    cbr i1 %16(prob = 0.97), ^while.body3, ^b6;
^b5:
    i32 %42 = add i32 %20, i32 1;
    i1 %43 = scmp lt i32 %42, i32 %8;
    cbr i1 %43(prob = 0.97), ^while.body, ^entry1;
^while.body2:
    i32 %44 = phi [^indirect, i32 0] [^while.body2, i32 %48];
    i32 %45 = add i32 %44, i32 %38;
    i32* %46 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %45];
    i32 %47 = call () -> i32 @getint();
    store i32* %46 with i32 %47;
    i32 %48 = add i32 %44, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %7;
    cbr i1 %49(prob = 0.97), ^while.body2, ^b5;
^while.body3:
    i32 %50 = phi [^while.body1, i32 0] [^b13, i32 %80];
    cbr i1 %23(prob = 0.75), ^if.then, ^b7;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %51 = add i32 %39, i32 1;
    i1 %52 = scmp lt i32 %51, i32 %8;
    cbr i1 %52(prob = 0.97), ^while.body1, ^b1;
^if.then:
    ubr ^b7;
^b7:
    f32 %53 = phi [^while.body3, f32 %0] [^if.then, f32 %28];
    i1 %54 = fcmp gt f32 %53, f32 3.14159;
    cbr i1 %54(prob = 0.5), ^if.then1, ^b8;
^if.then1:
    f32 %55 = fsub f32 %53, f32 6.28319;
    ubr ^b8;
^b8:
    f32 %56 = phi [^b7, f32 %53] [^if.then1, f32 %55];
    i1 %57 = fcmp lt f32 %56, f32 -3.14159;
    cbr i1 %57(prob = 0.5), ^if.then2, ^b9;
^if.then2:
    f32 %58 = fadd f32 %56, f32 6.28319;
    ubr ^b9;
^b9:
    f32 %59 = phi [^b8, f32 %56] [^if.then2, f32 %58];
    f32 %60 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %59, i32* %width, i32* %height);
    cbr i1 %32(prob = 0.75), ^if.then3, ^b10;
^if.then3:
    ubr ^b10;
^b10:
    f32 %61 = phi [^b9, f32 %29] [^if.then3, f32 %37];
    i1 %62 = fcmp gt f32 %61, f32 3.14159;
    cbr i1 %62(prob = 0.5), ^if.then4, ^b11;
^if.then4:
    f32 %63 = fsub f32 %61, f32 6.28319;
    ubr ^b11;
^b11:
    f32 %64 = phi [^if.then4, f32 %63] [^b10, f32 %61];
    i1 %65 = fcmp lt f32 %64, f32 -3.14159;
    cbr i1 %65(prob = 0.5), ^if.then5, ^b12;
^if.then5:
    f32 %66 = fadd f32 %64, f32 6.28319;
    ubr ^b12;
^b12:
    f32 %67 = phi [^b11, f32 %64] [^if.then5, f32 %66];
    f32 %68 = call (f32, i32*, i32*) -> f32 @my_sin_impl(f32 %67, i32* %width, i32* %height);
    i32 %69 = sub i32 %50, i32 %13;
    f32 %70 = s2f i32 %69 to f32;
    f32 %71 = fmul f32 %70, f32 %68;
    f32 %72 = fmul f32 %41, f32 %60;
    f32 %73 = fsub f32 %71, f32 %72;
    f32 %74 = fadd f32 %73, f32 %15;
    i32 %75 = f2s f32 %74 to i32;
    i1 %76 = scmp lt i32 %75, i32 0;
    i1 %77 = scmp ge i32 %75, i32 %7;
    i1 %78 = or i1 %76, i1 %77;
    cbr i1 %78(prob = 0.75), ^b13, ^b14;
^b13:
    i32 %79 = phi [^b12, i32 0] [^b14, i32 0] [^b15, i32 %93];
    call (i32) -> void @putint(i32 %79);
    call (i32) -> void @putch(i32 32);
    i32 %80 = add i32 %50, i32 1;
    i1 %81 = scmp lt i32 %80, i32 %7;
    cbr i1 %81(prob = 0.97), ^while.body3, ^b6;
^b14:
    f32 %82 = fmul f32 %41, f32 %68;
    f32 %83 = fmul f32 %70, f32 %60;
    f32 %84 = fadd f32 %83, f32 %82;
    f32 %85 = fadd f32 %84, f32 %14;
    i32 %86 = f2s f32 %85 to i32;
    i1 %87 = scmp lt i32 %86, i32 0;
    i1 %88 = scmp ge i32 %86, i32 %8;
    i1 %89 = or i1 %87, i1 %88;
    cbr i1 %89(prob = 0.75), ^b13, ^b15;
^b15:
    i32 %90 = mul i32 %7, i32 %86;
    i32 %91 = add i32 %75, i32 %90;
    i32* %92 = getelementptr &([1048576 * i32]* @image)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    ubr ^b13;
}
