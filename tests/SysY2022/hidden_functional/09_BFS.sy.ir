internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i32* %1 = getelementptr &([1005 * i32]* @que)[i64 0][i64 1];
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b2, i32 %9] [^entry, i32 %0];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^b, i1 %4] [^while.header, i1 true];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %7 = phi [^b1, i32 %2] [^while.body1, i32 %12];
    i1 %8 = scmp gt i32 %7, i32 47;
    cbr i1 %8(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %9 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %10 = scmp le i32 %7, i32 57;
    ubr ^b4;
^b4:
    i1 %11 = phi [^b3, i1 %10] [^while.header1, i1 false];
    cbr i1 %11(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %12 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i32 %13 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %14 = phi [^b8, i32 %23] [^b5, i32 0];
    i32 %15 = phi [^b8, i32 %24] [^b5, i32 %13];
    i1 %16 = scmp lt i32 %15, i32 48;
    cbr i1 %16(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %17 = scmp gt i32 %15, i32 57;
    ubr ^b7;
^b7:
    i1 %18 = phi [^b6, i1 %17] [^while.header2, i1 true];
    cbr i1 %18(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %19 = scmp eq i32 %15, i32 45;
    cbr i1 %19(prob = 0.5), ^if.then1, ^b8;
^while.header3:
    i32 %20 = phi [^b7, i32 0] [^while.body3, i32 %29];
    i32 %21 = phi [^b7, i32 %15] [^while.body3, i32 %30];
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b9, ^b10;
^if.then1:
    ubr ^b8;
^b8:
    i32 %23 = phi [^if.then1, i32 1] [^while.body2, i32 %14];
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %25 = scmp le i32 %21, i32 57;
    ubr ^b10;
^b10:
    i1 %26 = phi [^b9, i1 %25] [^while.header3, i1 false];
    cbr i1 %26(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %27 = mul i32 %20, i32 10;
    i32 %28 = add i32 %27, i32 -48;
    i32 %29 = add i32 %28, i32 %21;
    i32 %30 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %31 = scmp neq i32 %14, i32 0;
    cbr i1 %31(prob = 0.5), ^if.then2, ^entry1;
^if.then2:
    i32 %32 = neg i32 %20;
    ubr ^entry1;
^entry1:
    i32 %33 = phi [^b11, i32 %20] [^if.then2, i32 %32];
    ubr ^while.header4;
^while.header4:
    i32 %34 = phi [^while.body4, i32 %37] [^entry1, i32 0];
    i1 %35 = scmp lt i32 %34, i32 1005;
    cbr i1 %35(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %36 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %34];
    store i32* %36 with i32 -1;
    i32 %37 = add i32 %34, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %38 = phi [^while.header4, i32 %33] [^b40, i32 %142];
    i32 %39 = phi [^while.header4, i32 0] [^b40, i32 %141];
    i1 %40 = scmp neq i32 %38, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %41 = call () -> i32 @getch();
    i1 %42 = scmp neq i32 %41, i32 81;
    cbr i1 %42(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %43 = scmp neq i32 %41, i32 85;
    ubr ^b14;
^b14:
    i1 %44 = phi [^while.body5, i1 false] [^b13, i1 %43];
    cbr i1 %44(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %45 = scmp eq i32 %41, i32 81;
    cbr i1 %45(prob = 0.5), ^entry2, ^entry3;
^entry2:
    i32 %46 = call () -> i32 @getch();
    ubr ^while.header6;
^entry3:
    i32 %47 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header6:
    i32 %48 = phi [^b20, i32 %66] [^entry2, i32 0];
    i32 %49 = phi [^b20, i32 %67] [^entry2, i32 %46];
    i1 %50 = scmp lt i32 %49, i32 48;
    cbr i1 %50(prob = 0.5), ^b17, ^b16;
^while.header7:
    i32 %51 = phi [^b22, i32 %69] [^entry3, i32 0];
    i32 %52 = phi [^b22, i32 %70] [^entry3, i32 %47];
    i1 %53 = scmp lt i32 %52, i32 48;
    cbr i1 %53(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %54 = scmp gt i32 %49, i32 57;
    ubr ^b17;
^b17:
    i1 %55 = phi [^b16, i1 %54] [^while.header6, i1 true];
    cbr i1 %55(prob = 0.97), ^while.body6, ^while.header8;
^b18:
    i1 %56 = scmp gt i32 %52, i32 57;
    ubr ^b19;
^b19:
    i1 %57 = phi [^b18, i1 %56] [^while.header7, i1 true];
    cbr i1 %57(prob = 0.97), ^while.body7, ^while.header9;
^while.body6:
    i1 %58 = scmp eq i32 %49, i32 45;
    cbr i1 %58(prob = 0.5), ^if.then3, ^b20;
^while.body7:
    i1 %59 = scmp eq i32 %52, i32 45;
    cbr i1 %59(prob = 0.5), ^if.then4, ^b22;
^while.header8:
    i32 %60 = phi [^b17, i32 0] [^while.body8, i32 %76];
    i32 %61 = phi [^b17, i32 %49] [^while.body8, i32 %77];
    i1 %62 = scmp gt i32 %61, i32 47;
    cbr i1 %62(prob = 0.5), ^b21, ^b24;
^while.header9:
    i32 %63 = phi [^b19, i32 0] [^while.body9, i32 %80];
    i32 %64 = phi [^b19, i32 %52] [^while.body9, i32 %81];
    i1 %65 = scmp gt i32 %64, i32 47;
    cbr i1 %65(prob = 0.5), ^b23, ^b25;
^if.then3:
    ubr ^b20;
^b20:
    i32 %66 = phi [^if.then3, i32 1] [^while.body6, i32 %48];
    i32 %67 = call () -> i32 @getch();
    ubr ^while.header6;
^if.then4:
    ubr ^b22;
^b21:
    i1 %68 = scmp le i32 %61, i32 57;
    ubr ^b24;
^b22:
    i32 %69 = phi [^if.then4, i32 1] [^while.body7, i32 %51];
    i32 %70 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i1 %71 = scmp le i32 %64, i32 57;
    ubr ^b25;
^b24:
    i1 %72 = phi [^b21, i1 %68] [^while.header8, i1 false];
    cbr i1 %72(prob = 0.97), ^while.body8, ^b26;
^b25:
    i1 %73 = phi [^b23, i1 %71] [^while.header9, i1 false];
    cbr i1 %73(prob = 0.97), ^while.body9, ^b27;
^while.body8:
    i32 %74 = mul i32 %60, i32 10;
    i32 %75 = add i32 %74, i32 -48;
    i32 %76 = add i32 %75, i32 %61;
    i32 %77 = call () -> i32 @getch();
    ubr ^while.header8;
^while.body9:
    i32 %78 = mul i32 %63, i32 10;
    i32 %79 = add i32 %78, i32 -48;
    i32 %80 = add i32 %79, i32 %64;
    i32 %81 = call () -> i32 @getch();
    ubr ^while.header9;
^b26:
    i1 %82 = scmp neq i32 %48, i32 0;
    cbr i1 %82(prob = 0.5), ^if.then5, ^if.then7;
^b27:
    i1 %83 = scmp neq i32 %51, i32 0;
    cbr i1 %83(prob = 0.5), ^if.then6, ^if.else;
^if.then5:
    i32 %84 = neg i32 %60;
    ubr ^if.then7;
^if.then6:
    i32 %85 = neg i32 %63;
    ubr ^if.else;
^if.then7:
    i32 %86 = phi [^b26, i32 %60] [^if.then5, i32 %84];
    i32 %87 = call () -> i32 @getch();
    ubr ^while.header10;
^if.else:
    i32 %88 = phi [^b27, i32 %63] [^if.then6, i32 %85];
    i32 %89 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header10:
    i32 %90 = phi [^b32, i32 %108] [^if.then7, i32 0];
    i32 %91 = phi [^b32, i32 %109] [^if.then7, i32 %87];
    i1 %92 = scmp lt i32 %91, i32 48;
    cbr i1 %92(prob = 0.5), ^b29, ^b28;
^while.header11:
    i32 %93 = phi [^b34, i32 %111] [^if.else, i32 0];
    i32 %94 = phi [^b34, i32 %112] [^if.else, i32 %89];
    i1 %95 = scmp lt i32 %94, i32 48;
    cbr i1 %95(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %96 = scmp gt i32 %91, i32 57;
    ubr ^b29;
^b29:
    i1 %97 = phi [^b28, i1 %96] [^while.header10, i1 true];
    cbr i1 %97(prob = 0.97), ^while.body10, ^while.header12;
^b30:
    i1 %98 = scmp gt i32 %94, i32 57;
    ubr ^b31;
^b31:
    i1 %99 = phi [^b30, i1 %98] [^while.header11, i1 true];
    cbr i1 %99(prob = 0.97), ^while.body11, ^while.header13;
^while.body10:
    i1 %100 = scmp eq i32 %91, i32 45;
    cbr i1 %100(prob = 0.5), ^if.then8, ^b32;
^while.body11:
    i1 %101 = scmp eq i32 %94, i32 45;
    cbr i1 %101(prob = 0.5), ^if.then9, ^b34;
^while.header12:
    i32 %102 = phi [^b29, i32 0] [^while.body12, i32 %118];
    i32 %103 = phi [^b29, i32 %91] [^while.body12, i32 %119];
    i1 %104 = scmp gt i32 %103, i32 47;
    cbr i1 %104(prob = 0.5), ^b33, ^b36;
^while.header13:
    i32 %105 = phi [^b31, i32 0] [^while.body13, i32 %122];
    i32 %106 = phi [^b31, i32 %94] [^while.body13, i32 %123];
    i1 %107 = scmp gt i32 %106, i32 47;
    cbr i1 %107(prob = 0.5), ^b35, ^b37;
^if.then8:
    ubr ^b32;
^b32:
    i32 %108 = phi [^if.then8, i32 1] [^while.body10, i32 %90];
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header10;
^if.then9:
    ubr ^b34;
^b33:
    i1 %110 = scmp le i32 %103, i32 57;
    ubr ^b36;
^b34:
    i32 %111 = phi [^if.then9, i32 1] [^while.body11, i32 %93];
    i32 %112 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i1 %113 = scmp le i32 %106, i32 57;
    ubr ^b37;
^b36:
    i1 %114 = phi [^b33, i1 %110] [^while.header12, i1 false];
    cbr i1 %114(prob = 0.97), ^while.body12, ^b38;
^b37:
    i1 %115 = phi [^b35, i1 %113] [^while.header13, i1 false];
    cbr i1 %115(prob = 0.97), ^while.body13, ^b39;
^while.body12:
    i32 %116 = mul i32 %102, i32 10;
    i32 %117 = add i32 %116, i32 -48;
    i32 %118 = add i32 %117, i32 %103;
    i32 %119 = call () -> i32 @getch();
    ubr ^while.header12;
^while.body13:
    i32 %120 = mul i32 %105, i32 10;
    i32 %121 = add i32 %120, i32 -48;
    i32 %122 = add i32 %121, i32 %106;
    i32 %123 = call () -> i32 @getch();
    ubr ^while.header13;
^b38:
    i1 %124 = scmp neq i32 %90, i32 0;
    cbr i1 %124(prob = 0.5), ^if.then10, ^if.then12;
^b39:
    i1 %125 = scmp neq i32 %93, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then11, ^if.else1;
^if.then10:
    i32 %126 = neg i32 %102;
    ubr ^if.then12;
^if.then11:
    i32 %127 = neg i32 %105;
    ubr ^if.else1;
^if.then12:
    i32 %128 = phi [^b38, i32 %102] [^if.then10, i32 %126];
    i32* %129 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %86];
    store i32* %129 with i32 1;
    store i32* %1 with i32 %86;
    ubr ^while.header14;
^if.else1:
    i32 %130 = phi [^b39, i32 %105] [^if.then11, i32 %127];
    i32* %131 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %39];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %39];
    i32* %133 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %88];
    i32 %134 = load i32* %133;
    store i32* %132 with i32 %134;
    store i32* %133 with i32 %39;
    i32 %135 = add i32 %39, i32 1;
    i32* %136 = getelementptr &(i32* %131)[i64 1];
    store i32* %136 with i32 %88;
    i32* %137 = getelementptr &(i32* %132)[i64 1];
    i32* %138 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %130];
    i32 %139 = load i32* %138;
    store i32* %137 with i32 %139;
    store i32* %138 with i32 %135;
    i32 %140 = add i32 %39, i32 2;
    ubr ^b40;
^b40:
    i32 %141 = phi [^b42, i32 %39] [^if.else1, i32 %140];
    i32 %142 = add i32 %38, i32 -1;
    ubr ^while.header5;
^while.header14:
    i32 %143 = phi [^while.header16, i32 %147] [^if.then12, i32 0];
    i32 %144 = phi [^while.header16, i32 %160] [^if.then12, i32 1];
    i32 %145 = phi [^while.header16, i32 %153] [^if.then12, i32 0];
    i1 %146 = scmp lt i32 %143, i32 %144;
    cbr i1 %146(prob = 0.97), ^entry4, ^while.header15;
^entry4:
    i32 %147 = add i32 %143, i32 1;
    i32* %148 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %147];
    i32 %149 = load i32* %148;
    i1 %150 = scmp eq i32 %149, i32 %128;
    cbr i1 %150(prob = 0.5), ^if.then13, ^b41;
^while.header15:
    i32 %151 = phi [^while.header14, i32 0] [^while.body14, i32 %159];
    i1 %152 = scmp le i32 %151, i32 %144;
    cbr i1 %152(prob = 0.97), ^while.body14, ^b42;
^if.then13:
    ubr ^b41;
^b41:
    i32 %153 = phi [^if.then13, i32 1] [^entry4, i32 %145];
    i32* %154 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %149];
    i32 %155 = load i32* %154;
    ubr ^while.header16;
^while.body14:
    i32* %156 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %151];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %157];
    store i32* %158 with i32 0;
    i32 %159 = add i32 %151, i32 1;
    ubr ^while.header15;
^b42:
    call (i32) -> void @putint(i32 %145);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^while.header16:
    i32 %160 = phi [^b43, i32 %170] [^b41, i32 %144];
    i32 %161 = phi [^b43, i32 %172] [^b41, i32 %155];
    i1 %162 = scmp neq i32 %161, i32 -1;
    cbr i1 %162(prob = 0.97), ^while.body15, ^while.header14;
^while.body15:
    i32* %163 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %161];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i1 %167 = scmp eq i32 %166, i32 0;
    cbr i1 %167(prob = 0.5), ^entry5, ^b43;
^entry5:
    store i32* %165 with i32 1;
    i32 %168 = add i32 %160, i32 1;
    i32* %169 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %168];
    store i32* %169 with i32 %164;
    ubr ^b43;
^b43:
    i32 %170 = phi [^entry5, i32 %168] [^while.body15, i32 %160];
    i32* %171 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %161];
    i32 %172 = load i32* %171;
    ubr ^while.header16;
}
