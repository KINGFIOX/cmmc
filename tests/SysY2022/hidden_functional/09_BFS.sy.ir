internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i32* %1 = getelementptr &([1005 * i32]* @que)[i64 0][i64 1];
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %13] [^entry, i32 %0];
    i32 %4 = phi [^entry, i32 %0] [^b2, i32 %13];
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %7 = phi [^b, i1 %6] [^while.header, i1 true];
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %8 = scmp eq i32 %3, i32 45;
    cbr i1 %8(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %9 = phi [^b1, i32 %2] [^while.body1, i32 %9];
    i32 %10 = phi [^b1, i32 %3] [^while.body1, i32 %16];
    i32 %11 = phi [^b1, i32 %3] [^while.body1, i32 %16];
    i1 %12 = scmp gt i32 %11, i32 47;
    cbr i1 %12(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %13 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %14 = scmp le i32 %10, i32 57;
    ubr ^b4;
^b4:
    i1 %15 = phi [^b3, i1 %14] [^while.header1, i1 false];
    cbr i1 %15(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %16 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %18 = phi [^b8, i32 %18] [^b5, i32 %9];
    i32 %19 = phi [^b8, i32 %33] [^b5, i32 0];
    i32 %20 = phi [^b8, i32 %20] [^b5, i32 0];
    i32 %21 = phi [^b8, i32 %34] [^b5, i32 %17];
    i32 %22 = phi [^b5, i32 %17] [^b8, i32 %34];
    i1 %23 = scmp lt i32 %22, i32 48;
    cbr i1 %23(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %24 = scmp gt i32 %21, i32 57;
    ubr ^b7;
^b7:
    i1 %25 = phi [^b6, i1 %24] [^while.header2, i1 true];
    cbr i1 %25(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %26 = scmp eq i32 %21, i32 45;
    cbr i1 %26(prob = 0.5), ^if.then1, ^b8;
^while.header3:
    i32 %27 = phi [^b7, i32 %18] [^while.body3, i32 %27];
    i32 %28 = phi [^b7, i32 %19] [^while.body3, i32 %28];
    i32 %29 = phi [^b7, i32 %20] [^while.body3, i32 %39];
    i32 %30 = phi [^b7, i32 %21] [^while.body3, i32 %40];
    i32 %31 = phi [^b7, i32 %21] [^while.body3, i32 %40];
    i1 %32 = scmp gt i32 %31, i32 47;
    cbr i1 %32(prob = 0.5), ^b9, ^b10;
^if.then1:
    ubr ^b8;
^b8:
    i32 %33 = phi [^if.then1, i32 1] [^while.body2, i32 %19];
    i32 %34 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %35 = scmp le i32 %30, i32 57;
    ubr ^b10;
^b10:
    i1 %36 = phi [^b9, i1 %35] [^while.header3, i1 false];
    cbr i1 %36(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %37 = mul i32 %29, i32 10;
    i32 %38 = add i32 %37, i32 -48;
    i32 %39 = add i32 %38, i32 %30;
    i32 %40 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %41 = scmp neq i32 %28, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then2, ^entry1;
^if.then2:
    i32 %42 = neg i32 %29;
    ubr ^entry1;
^entry1:
    i32 %43 = phi [^b11, i32 %29] [^if.then2, i32 %42];
    ubr ^while.header4;
^while.header4:
    i32 %44 = phi [^while.body4, i32 %44] [^entry1, i32 %43];
    i32 %45 = phi [^while.body4, i32 %45] [^entry1, i32 %27];
    i32 %46 = phi [^while.body4, i32 %50] [^entry1, i32 0];
    i32 %47 = phi [^entry1, i32 0] [^while.body4, i32 %50];
    i1 %48 = scmp lt i32 %47, i32 1005;
    cbr i1 %48(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %49 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %46];
    store i32* %49 with i32 -1;
    i32 %50 = add i32 %46, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %51 = phi [^while.header4, i32 %44] [^b40, i32 %191];
    i32 %52 = phi [^while.header4, i32 %45] [^b40, i32 %190];
    i32 %53 = phi [^while.header4, i32 %44] [^b40, i32 %191];
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %55 = phi [^b14, i32 %55] [^while.header5, i32 %51];
    i32 %56 = phi [^b14, i32 %56] [^while.header5, i32 %52];
    i32 %57 = call () -> i32 @getch();
    i1 %58 = scmp neq i32 %57, i32 81;
    cbr i1 %58(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %59 = scmp neq i32 %57, i32 85;
    ubr ^b14;
^b14:
    i1 %60 = phi [^while.body5, i1 false] [^b13, i1 %59];
    cbr i1 %60(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %61 = scmp eq i32 %57, i32 81;
    cbr i1 %61(prob = 0.5), ^entry2, ^entry3;
^entry2:
    i32 %62 = call () -> i32 @getch();
    ubr ^while.header6;
^entry3:
    i32 %63 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header6:
    i32 %64 = phi [^b20, i32 %64] [^entry2, i32 %55];
    i32 %65 = phi [^b20, i32 %65] [^entry2, i32 %56];
    i32 %66 = phi [^b20, i32 %98] [^entry2, i32 0];
    i32 %67 = phi [^b20, i32 %67] [^entry2, i32 0];
    i32 %68 = phi [^b20, i32 %99] [^entry2, i32 %62];
    i32 %69 = phi [^b20, i32 %99] [^entry2, i32 %62];
    i1 %70 = scmp lt i32 %69, i32 48;
    cbr i1 %70(prob = 0.5), ^b17, ^b16;
^while.header7:
    i32 %71 = phi [^b22, i32 %71] [^entry3, i32 %55];
    i32 %72 = phi [^b22, i32 %72] [^entry3, i32 %56];
    i32 %73 = phi [^b22, i32 %101] [^entry3, i32 0];
    i32 %74 = phi [^b22, i32 %74] [^entry3, i32 0];
    i32 %75 = phi [^b22, i32 %102] [^entry3, i32 %63];
    i32 %76 = phi [^b22, i32 %102] [^entry3, i32 %63];
    i1 %77 = scmp lt i32 %76, i32 48;
    cbr i1 %77(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %78 = scmp gt i32 %68, i32 57;
    ubr ^b17;
^b17:
    i1 %79 = phi [^while.header6, i1 true] [^b16, i1 %78];
    cbr i1 %79(prob = 0.97), ^while.body6, ^while.header8;
^b18:
    i1 %80 = scmp gt i32 %75, i32 57;
    ubr ^b19;
^b19:
    i1 %81 = phi [^b18, i1 %80] [^while.header7, i1 true];
    cbr i1 %81(prob = 0.97), ^while.body7, ^while.header9;
^while.body6:
    i1 %82 = scmp eq i32 %68, i32 45;
    cbr i1 %82(prob = 0.5), ^if.then3, ^b20;
^while.body7:
    i1 %83 = scmp eq i32 %75, i32 45;
    cbr i1 %83(prob = 0.5), ^if.then4, ^b22;
^while.header8:
    i32 %84 = phi [^b17, i32 %64] [^while.body8, i32 %84];
    i32 %85 = phi [^b17, i32 %65] [^while.body8, i32 %85];
    i32 %86 = phi [^b17, i32 %66] [^while.body8, i32 %86];
    i32 %87 = phi [^b17, i32 %67] [^while.body8, i32 %108];
    i32 %88 = phi [^b17, i32 %68] [^while.body8, i32 %109];
    i32 %89 = phi [^b17, i32 %68] [^while.body8, i32 %109];
    i1 %90 = scmp gt i32 %89, i32 47;
    cbr i1 %90(prob = 0.5), ^b21, ^b24;
^while.header9:
    i32 %91 = phi [^b19, i32 %71] [^while.body9, i32 %91];
    i32 %92 = phi [^b19, i32 %72] [^while.body9, i32 %92];
    i32 %93 = phi [^b19, i32 %73] [^while.body9, i32 %93];
    i32 %94 = phi [^b19, i32 %74] [^while.body9, i32 %112];
    i32 %95 = phi [^b19, i32 %75] [^while.body9, i32 %113];
    i32 %96 = phi [^b19, i32 %75] [^while.body9, i32 %113];
    i1 %97 = scmp gt i32 %96, i32 47;
    cbr i1 %97(prob = 0.5), ^b23, ^b25;
^if.then3:
    ubr ^b20;
^b20:
    i32 %98 = phi [^if.then3, i32 1] [^while.body6, i32 %66];
    i32 %99 = call () -> i32 @getch();
    ubr ^while.header6;
^if.then4:
    ubr ^b22;
^b21:
    i1 %100 = scmp le i32 %88, i32 57;
    ubr ^b24;
^b22:
    i32 %101 = phi [^if.then4, i32 1] [^while.body7, i32 %73];
    i32 %102 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i1 %103 = scmp le i32 %95, i32 57;
    ubr ^b25;
^b24:
    i1 %104 = phi [^b21, i1 %100] [^while.header8, i1 false];
    cbr i1 %104(prob = 0.97), ^while.body8, ^b26;
^b25:
    i1 %105 = phi [^b23, i1 %103] [^while.header9, i1 false];
    cbr i1 %105(prob = 0.97), ^while.body9, ^b27;
^while.body8:
    i32 %106 = mul i32 %87, i32 10;
    i32 %107 = add i32 %106, i32 -48;
    i32 %108 = add i32 %107, i32 %88;
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header8;
^while.body9:
    i32 %110 = mul i32 %94, i32 10;
    i32 %111 = add i32 %110, i32 -48;
    i32 %112 = add i32 %111, i32 %95;
    i32 %113 = call () -> i32 @getch();
    ubr ^while.header9;
^b26:
    i1 %114 = scmp neq i32 %86, i32 0;
    cbr i1 %114(prob = 0.5), ^if.then5, ^if.then7;
^b27:
    i1 %115 = scmp neq i32 %93, i32 0;
    cbr i1 %115(prob = 0.5), ^if.then6, ^if.else;
^if.then5:
    i32 %116 = neg i32 %87;
    ubr ^if.then7;
^if.then6:
    i32 %117 = neg i32 %94;
    ubr ^if.else;
^if.then7:
    i32 %118 = phi [^b26, i32 %87] [^if.then5, i32 %116];
    i32 %119 = call () -> i32 @getch();
    ubr ^while.header10;
^if.else:
    i32 %120 = phi [^b27, i32 %94] [^if.then6, i32 %117];
    i32 %121 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header10:
    i32 %122 = phi [^b32, i32 %122] [^if.then7, i32 %84];
    i32 %123 = phi [^b32, i32 %123] [^if.then7, i32 %85];
    i32 %124 = phi [^b32, i32 %156] [^if.then7, i32 0];
    i32 %125 = phi [^b32, i32 %125] [^if.then7, i32 0];
    i32 %126 = phi [^b32, i32 %157] [^if.then7, i32 %119];
    i32 %127 = phi [^if.then7, i32 %119] [^b32, i32 %157];
    i1 %128 = scmp lt i32 %127, i32 48;
    cbr i1 %128(prob = 0.5), ^b29, ^b28;
^while.header11:
    i32 %129 = phi [^b34, i32 %129] [^if.else, i32 %91];
    i32 %130 = phi [^b34, i32 %130] [^if.else, i32 %92];
    i32 %131 = phi [^b34, i32 %159] [^if.else, i32 0];
    i32 %132 = phi [^b34, i32 %132] [^if.else, i32 0];
    i32 %133 = phi [^b34, i32 %160] [^if.else, i32 %121];
    i32 %134 = phi [^if.else, i32 %121] [^b34, i32 %160];
    i1 %135 = scmp lt i32 %134, i32 48;
    cbr i1 %135(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %136 = scmp gt i32 %126, i32 57;
    ubr ^b29;
^b29:
    i1 %137 = phi [^b28, i1 %136] [^while.header10, i1 true];
    cbr i1 %137(prob = 0.97), ^while.body10, ^while.header12;
^b30:
    i1 %138 = scmp gt i32 %133, i32 57;
    ubr ^b31;
^b31:
    i1 %139 = phi [^b30, i1 %138] [^while.header11, i1 true];
    cbr i1 %139(prob = 0.97), ^while.body11, ^while.header13;
^while.body10:
    i1 %140 = scmp eq i32 %126, i32 45;
    cbr i1 %140(prob = 0.5), ^if.then8, ^b32;
^while.body11:
    i1 %141 = scmp eq i32 %133, i32 45;
    cbr i1 %141(prob = 0.5), ^if.then9, ^b34;
^while.header12:
    i32 %142 = phi [^b29, i32 %122] [^while.body12, i32 %142];
    i32 %143 = phi [^b29, i32 %123] [^while.body12, i32 %143];
    i32 %144 = phi [^b29, i32 %124] [^while.body12, i32 %144];
    i32 %145 = phi [^b29, i32 %125] [^while.body12, i32 %166];
    i32 %146 = phi [^b29, i32 %126] [^while.body12, i32 %167];
    i32 %147 = phi [^b29, i32 %126] [^while.body12, i32 %167];
    i1 %148 = scmp gt i32 %147, i32 47;
    cbr i1 %148(prob = 0.5), ^b33, ^b36;
^while.header13:
    i32 %149 = phi [^b31, i32 %129] [^while.body13, i32 %149];
    i32 %150 = phi [^b31, i32 %130] [^while.body13, i32 %150];
    i32 %151 = phi [^b31, i32 %131] [^while.body13, i32 %151];
    i32 %152 = phi [^b31, i32 %132] [^while.body13, i32 %170];
    i32 %153 = phi [^b31, i32 %133] [^while.body13, i32 %171];
    i32 %154 = phi [^b31, i32 %133] [^while.body13, i32 %171];
    i1 %155 = scmp gt i32 %154, i32 47;
    cbr i1 %155(prob = 0.5), ^b35, ^b37;
^if.then8:
    ubr ^b32;
^b32:
    i32 %156 = phi [^if.then8, i32 1] [^while.body10, i32 %124];
    i32 %157 = call () -> i32 @getch();
    ubr ^while.header10;
^if.then9:
    ubr ^b34;
^b33:
    i1 %158 = scmp le i32 %146, i32 57;
    ubr ^b36;
^b34:
    i32 %159 = phi [^if.then9, i32 1] [^while.body11, i32 %131];
    i32 %160 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i1 %161 = scmp le i32 %153, i32 57;
    ubr ^b37;
^b36:
    i1 %162 = phi [^b33, i1 %158] [^while.header12, i1 false];
    cbr i1 %162(prob = 0.97), ^while.body12, ^b38;
^b37:
    i1 %163 = phi [^b35, i1 %161] [^while.header13, i1 false];
    cbr i1 %163(prob = 0.97), ^while.body13, ^b39;
^while.body12:
    i32 %164 = mul i32 %145, i32 10;
    i32 %165 = add i32 %164, i32 -48;
    i32 %166 = add i32 %165, i32 %146;
    i32 %167 = call () -> i32 @getch();
    ubr ^while.header12;
^while.body13:
    i32 %168 = mul i32 %152, i32 10;
    i32 %169 = add i32 %168, i32 -48;
    i32 %170 = add i32 %169, i32 %153;
    i32 %171 = call () -> i32 @getch();
    ubr ^while.header13;
^b38:
    i1 %172 = scmp neq i32 %144, i32 0;
    cbr i1 %172(prob = 0.5), ^if.then10, ^if.then12;
^b39:
    i1 %173 = scmp neq i32 %151, i32 0;
    cbr i1 %173(prob = 0.5), ^if.then11, ^if.else1;
^if.then10:
    i32 %174 = neg i32 %145;
    ubr ^if.then12;
^if.then11:
    i32 %175 = neg i32 %152;
    ubr ^if.else1;
^if.then12:
    i32 %176 = phi [^b38, i32 %145] [^if.then10, i32 %174];
    i32* %177 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %118];
    store i32* %177 with i32 1;
    store i32* %1 with i32 %118;
    ubr ^while.header14;
^if.else1:
    i32 %178 = phi [^b39, i32 %152] [^if.then11, i32 %175];
    i32* %179 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %150];
    store i32* %179 with i32 %178;
    i32* %180 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %150];
    i32* %181 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %120];
    i32 %182 = load i32* %181;
    store i32* %180 with i32 %182;
    store i32* %181 with i32 %150;
    i32 %183 = add i32 %150, i32 1;
    i32* %184 = getelementptr &(i32* %179)[i64 1];
    store i32* %184 with i32 %120;
    i32* %185 = getelementptr &(i32* %180)[i64 1];
    i32* %186 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %178];
    i32 %187 = load i32* %186;
    store i32* %185 with i32 %187;
    store i32* %186 with i32 %183;
    i32 %188 = add i32 %150, i32 2;
    ubr ^b40;
^b40:
    i32 %189 = phi [^b42, i32 %205] [^if.else1, i32 %149];
    i32 %190 = phi [^b42, i32 %206] [^if.else1, i32 %188];
    i32 %191 = add i32 %189, i32 -1;
    ubr ^while.header5;
^while.header14:
    i32 %192 = phi [^while.header16, i32 %219] [^if.then12, i32 %142];
    i32 %193 = phi [^while.header16, i32 %220] [^if.then12, i32 %143];
    i32 %194 = phi [^while.header16, i32 %221] [^if.then12, i32 0];
    i32 %195 = phi [^while.header16, i32 %222] [^if.then12, i32 1];
    i32 %196 = phi [^while.header16, i32 %224] [^if.then12, i32 0];
    i32 %197 = phi [^while.header16, i32 %225] [^if.then12, i32 %176];
    i32 %198 = phi [^while.header16, i32 %222] [^if.then12, i32 1];
    i32 %199 = phi [^while.header16, i32 %221] [^if.then12, i32 0];
    i1 %200 = scmp lt i32 %199, i32 %198;
    cbr i1 %200(prob = 0.97), ^entry4, ^while.header15;
^entry4:
    i32 %201 = add i32 %194, i32 1;
    i32* %202 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %201];
    i32 %203 = load i32* %202;
    i1 %204 = scmp eq i32 %203, i32 %197;
    cbr i1 %204(prob = 0.5), ^if.then13, ^b41;
^while.header15:
    i32 %205 = phi [^while.header14, i32 %192] [^while.body14, i32 %205];
    i32 %206 = phi [^while.header14, i32 %193] [^while.body14, i32 %206];
    i32 %207 = phi [^while.header14, i32 %195] [^while.body14, i32 %207];
    i32 %208 = phi [^while.header14, i32 0] [^while.body14, i32 %218];
    i32 %209 = phi [^while.header14, i32 %196] [^while.body14, i32 %209];
    i32 %210 = phi [^while.header14, i32 0] [^while.body14, i32 %218];
    i1 %211 = scmp le i32 %210, i32 %207;
    cbr i1 %211(prob = 0.97), ^while.body14, ^b42;
^if.then13:
    ubr ^b41;
^b41:
    i32 %212 = phi [^if.then13, i32 1] [^entry4, i32 %196];
    i32* %213 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %203];
    i32 %214 = load i32* %213;
    ubr ^while.header16;
^while.body14:
    i32* %215 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %208];
    i32 %216 = load i32* %215;
    i32* %217 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %216];
    store i32* %217 with i32 0;
    i32 %218 = add i32 %208, i32 1;
    ubr ^while.header15;
^b42:
    call (i32) -> void @putint(i32 %209);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^while.header16:
    i32 %219 = phi [^b43, i32 %219] [^b41, i32 %192];
    i32 %220 = phi [^b43, i32 %220] [^b41, i32 %193];
    i32 %221 = phi [^b43, i32 %221] [^b41, i32 %201];
    i32 %222 = phi [^b43, i32 %235] [^b41, i32 %195];
    i32 %223 = phi [^b43, i32 %237] [^b41, i32 %214];
    i32 %224 = phi [^b43, i32 %224] [^b41, i32 %212];
    i32 %225 = phi [^b43, i32 %225] [^b41, i32 %197];
    i32 %226 = phi [^b41, i32 %214] [^b43, i32 %237];
    i1 %227 = scmp neq i32 %226, i32 -1;
    cbr i1 %227(prob = 0.97), ^while.body15, ^while.header14;
^while.body15:
    i32* %228 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %223];
    i32 %229 = load i32* %228;
    i32* %230 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %229];
    i32 %231 = load i32* %230;
    i1 %232 = scmp eq i32 %231, i32 0;
    cbr i1 %232(prob = 0.5), ^entry5, ^b43;
^entry5:
    store i32* %230 with i32 1;
    i32 %233 = add i32 %222, i32 1;
    i32* %234 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %233];
    store i32* %234 with i32 %229;
    ubr ^b43;
^b43:
    i32 %235 = phi [^entry5, i32 %233] [^while.body15, i32 %222];
    i32* %236 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %223];
    i32 %237 = load i32* %236;
    ubr ^while.header16;
}
