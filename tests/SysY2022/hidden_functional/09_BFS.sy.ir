internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i32* %2 = getelementptr &([1005 * i32]* @que)[i64 0][i64 1];
    i1 %3 = scmp gt i32 %0, i32 57;
    i1 %4 = or i1 %1, i1 %3;
    cbr i1 %4(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %5 = call () -> i32 @getch();
    i1 %6 = scmp lt i32 %5, i32 48;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^while.guard:
    i32 %7 = phi [^entry, i32 %0] [^b1, i32 %5];
    i1 %8 = scmp gt i32 %7, i32 47;
    i1 %9 = scmp lt i32 %7, i32 58;
    i1 %10 = and i1 %8, i1 %9;
    cbr i1 %10(prob = 0.48), ^while.body1, ^b2;
^b:
    i1 %11 = scmp gt i32 %5, i32 57;
    ubr ^b1;
^b1:
    i1 %12 = phi [^while.body, i1 true] [^b, i1 %11];
    cbr i1 %12(prob = 0.97), ^while.body, ^while.guard;
^while.body1:
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp gt i32 %13, i32 47;
    cbr i1 %14(prob = 0.5), ^b3, ^b4;
^b2:
    i32 %15 = call () -> i32 @getch();
    i1 %16 = scmp lt i32 %15, i32 48;
    cbr i1 %16(prob = 0.5), ^while.body2, ^b5;
^b3:
    i1 %17 = scmp le i32 %13, i32 57;
    ubr ^b4;
^b4:
    i1 %18 = phi [^while.body1, i1 false] [^b3, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %19 = phi [^b2, i32 0] [^b5, i32 0] [^b7, i32 %22];
    i32 %20 = phi [^b2, i32 %15] [^b5, i32 %15] [^b7, i32 %23];
    i1 %21 = scmp eq i32 %20, i32 45;
    i32 %22 = select i1 %21 ? i32 1 : i32 %19;
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp lt i32 %23, i32 48;
    cbr i1 %24(prob = 0.5), ^b7, ^b6;
^b5:
    i1 %25 = scmp gt i32 %15, i32 57;
    cbr i1 %25(prob = 0.97), ^while.body2, ^while.guard1;
^b6:
    i1 %26 = scmp gt i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %27 = phi [^while.body2, i1 true] [^b6, i1 %26];
    cbr i1 %27(prob = 0.97), ^while.body2, ^while.guard1;
^while.guard1:
    i32 %28 = phi [^b5, i32 0] [^b7, i32 %22];
    i32 %29 = phi [^b5, i32 %15] [^b7, i32 %23];
    i1 %30 = scmp gt i32 %29, i32 47;
    cbr i1 %30(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %31 = scmp lt i32 %29, i32 58;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b9;
^b9:
    i32 %32 = phi [^while.guard1, i32 0] [^b8, i32 0] [^b12, i32 %39];
    i1 %33 = scmp neq i32 %28, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then, ^b10;
^if.then:
    i32 %34 = neg i32 %32;
    ubr ^b10;
^while.body3:
    i32 %35 = phi [^b8, i32 %29] [^b12, i32 %40];
    i32 %36 = phi [^b8, i32 0] [^b12, i32 %39];
    i32 %37 = mul i32 %36, i32 10;
    i32 %38 = add i32 %35, i32 -48;
    i32 %39 = add i32 %38, i32 %37;
    i32 %40 = call () -> i32 @getch();
    i1 %41 = scmp gt i32 %40, i32 47;
    cbr i1 %41(prob = 0.5), ^b11, ^b12;
^b10:
    i32 %42 = phi [^b9, i32 %32] [^if.then, i32 %34];
    ubr ^while.body4;
^b11:
    i1 %43 = scmp le i32 %40, i32 57;
    ubr ^b12;
^b12:
    i1 %44 = phi [^while.body3, i1 false] [^b11, i1 %43];
    cbr i1 %44(prob = 0.97), ^while.body3, ^b9;
^while.body4:
    i32 %45 = phi [^b10, i32 0] [^while.body4, i32 %62];
    i32* %46 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %45];
    store i32* %46 with i32 -1;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 -1;
    i32* %48 = getelementptr &(i32* %46)[i64 2];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %46)[i64 3];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %46)[i64 4];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %46)[i64 5];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %46)[i64 6];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %46)[i64 7];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %46)[i64 8];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %46)[i64 9];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %46)[i64 10];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %46)[i64 11];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %46)[i64 12];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %46)[i64 13];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %46)[i64 14];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %46)[i64 15];
    store i32* %61 with i32 -1;
    i32 %62 = add i32 %45, i32 16;
    i1 %63 = scmp lt i32 %62, i32 992;
    cbr i1 %63(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i32* %64 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %62];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %64)[i64 1];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %64)[i64 2];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %64)[i64 3];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %64)[i64 4];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %64)[i64 5];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %64)[i64 6];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %64)[i64 7];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %64)[i64 8];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %64)[i64 9];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %64)[i64 10];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %64)[i64 11];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %64)[i64 12];
    store i32* %76 with i32 -1;
    i1 %77 = scmp neq i32 %42, i32 0;
    cbr i1 %77(prob = 0.97), ^while.body6, ^b13;
^while.body6:
    i32 %78 = phi [^while.body5, i32 %42] [^b51, i32 %225];
    i32 %79 = phi [^while.body5, i32 0] [^b51, i32 %224];
    i32 %80 = call () -> i32 @getch();
    i1 %81 = scmp neq i32 %80, i32 81;
    cbr i1 %81(prob = 0.5), ^b14, ^b15;
^b13:
    ret i32 0;
^b14:
    i1 %82 = scmp neq i32 %80, i32 85;
    ubr ^b15;
^b15:
    i1 %83 = phi [^while.body6, i1 false] [^b14, i1 %82];
    cbr i1 %83(prob = 0.97), ^while.body7, ^b16;
^while.body7:
    i32 %84 = call () -> i32 @getch();
    i1 %85 = scmp neq i32 %84, i32 81;
    cbr i1 %85(prob = 0.5), ^b17, ^b18;
^b16:
    i32 %86 = phi [^b15, i32 %80] [^b18, i32 %84];
    i1 %87 = scmp eq i32 %86, i32 81;
    cbr i1 %87(prob = 0.5), ^entry1, ^entry2;
^b17:
    i1 %88 = scmp neq i32 %84, i32 85;
    ubr ^b18;
^b18:
    i1 %89 = phi [^while.body7, i1 false] [^b17, i1 %88];
    cbr i1 %89(prob = 0.97), ^while.body7, ^b16;
^entry1:
    i32 %90 = call () -> i32 @getch();
    i1 %91 = scmp lt i32 %90, i32 48;
    cbr i1 %91(prob = 0.5), ^while.body8, ^b19;
^entry2:
    i32 %92 = call () -> i32 @getch();
    i1 %93 = scmp lt i32 %92, i32 48;
    cbr i1 %93(prob = 0.5), ^while.body9, ^b20;
^while.body8:
    i32 %94 = phi [^entry1, i32 0] [^b19, i32 0] [^b22, i32 %97];
    i32 %95 = phi [^entry1, i32 %90] [^b19, i32 %90] [^b22, i32 %98];
    i1 %96 = scmp eq i32 %95, i32 45;
    i32 %97 = select i1 %96 ? i32 1 : i32 %94;
    i32 %98 = call () -> i32 @getch();
    i1 %99 = scmp lt i32 %98, i32 48;
    cbr i1 %99(prob = 0.5), ^b22, ^b21;
^b19:
    i1 %100 = scmp gt i32 %90, i32 57;
    cbr i1 %100(prob = 0.97), ^while.body8, ^while.guard2;
^while.body9:
    i32 %101 = phi [^entry2, i32 0] [^b20, i32 0] [^b24, i32 %104];
    i32 %102 = phi [^entry2, i32 %92] [^b20, i32 %92] [^b24, i32 %105];
    i1 %103 = scmp eq i32 %102, i32 45;
    i32 %104 = select i1 %103 ? i32 1 : i32 %101;
    i32 %105 = call () -> i32 @getch();
    i1 %106 = scmp lt i32 %105, i32 48;
    cbr i1 %106(prob = 0.5), ^b24, ^b23;
^b20:
    i1 %107 = scmp gt i32 %92, i32 57;
    cbr i1 %107(prob = 0.97), ^while.body9, ^while.guard3;
^b21:
    i1 %108 = scmp gt i32 %98, i32 57;
    ubr ^b22;
^b22:
    i1 %109 = phi [^while.body8, i1 true] [^b21, i1 %108];
    cbr i1 %109(prob = 0.97), ^while.body8, ^while.guard2;
^b23:
    i1 %110 = scmp gt i32 %105, i32 57;
    ubr ^b24;
^b24:
    i1 %111 = phi [^while.body9, i1 true] [^b23, i1 %110];
    cbr i1 %111(prob = 0.97), ^while.body9, ^while.guard3;
^while.guard2:
    i32 %112 = phi [^b19, i32 0] [^b22, i32 %97];
    i32 %113 = phi [^b19, i32 %90] [^b22, i32 %98];
    i1 %114 = scmp gt i32 %113, i32 47;
    cbr i1 %114(prob = 0.5), ^b25, ^b26;
^while.guard3:
    i32 %115 = phi [^b20, i32 0] [^b24, i32 %104];
    i32 %116 = phi [^b20, i32 %92] [^b24, i32 %105];
    i1 %117 = scmp gt i32 %116, i32 47;
    cbr i1 %117(prob = 0.5), ^b27, ^b28;
^b25:
    i1 %118 = scmp lt i32 %113, i32 58;
    cbr i1 %118(prob = 0.97), ^while.body10, ^b26;
^b26:
    i32 %119 = phi [^while.guard2, i32 0] [^b25, i32 0] [^b33, i32 %129];
    i1 %120 = scmp neq i32 %112, i32 0;
    cbr i1 %120(prob = 0.5), ^if.then1, ^b29;
^b27:
    i1 %121 = scmp lt i32 %116, i32 58;
    cbr i1 %121(prob = 0.97), ^while.body11, ^b28;
^b28:
    i32 %122 = phi [^while.guard3, i32 0] [^b27, i32 0] [^b34, i32 %137];
    i1 %123 = scmp neq i32 %115, i32 0;
    cbr i1 %123(prob = 0.5), ^if.then2, ^b30;
^if.then1:
    i32 %124 = neg i32 %119;
    ubr ^b29;
^while.body10:
    i32 %125 = phi [^b25, i32 %113] [^b33, i32 %130];
    i32 %126 = phi [^b25, i32 0] [^b33, i32 %129];
    i32 %127 = mul i32 %126, i32 10;
    i32 %128 = add i32 %125, i32 -48;
    i32 %129 = add i32 %128, i32 %127;
    i32 %130 = call () -> i32 @getch();
    i1 %131 = scmp gt i32 %130, i32 47;
    cbr i1 %131(prob = 0.5), ^b31, ^b33;
^if.then2:
    i32 %132 = neg i32 %122;
    ubr ^b30;
^while.body11:
    i32 %133 = phi [^b27, i32 %116] [^b34, i32 %138];
    i32 %134 = phi [^b27, i32 0] [^b34, i32 %137];
    i32 %135 = mul i32 %134, i32 10;
    i32 %136 = add i32 %133, i32 -48;
    i32 %137 = add i32 %136, i32 %135;
    i32 %138 = call () -> i32 @getch();
    i1 %139 = scmp gt i32 %138, i32 47;
    cbr i1 %139(prob = 0.5), ^b32, ^b34;
^b29:
    i32 %140 = phi [^b26, i32 %119] [^if.then1, i32 %124];
    i32 %141 = call () -> i32 @getch();
    i1 %142 = scmp lt i32 %141, i32 48;
    cbr i1 %142(prob = 0.5), ^while.body12, ^b35;
^b30:
    i32 %143 = phi [^b28, i32 %122] [^if.then2, i32 %132];
    i32 %144 = call () -> i32 @getch();
    i1 %145 = scmp lt i32 %144, i32 48;
    cbr i1 %145(prob = 0.5), ^while.body13, ^b36;
^b31:
    i1 %146 = scmp le i32 %130, i32 57;
    ubr ^b33;
^b32:
    i1 %147 = scmp le i32 %138, i32 57;
    ubr ^b34;
^b33:
    i1 %148 = phi [^while.body10, i1 false] [^b31, i1 %146];
    cbr i1 %148(prob = 0.97), ^while.body10, ^b26;
^b34:
    i1 %149 = phi [^while.body11, i1 false] [^b32, i1 %147];
    cbr i1 %149(prob = 0.97), ^while.body11, ^b28;
^while.body12:
    i32 %150 = phi [^b29, i32 0] [^b35, i32 0] [^b38, i32 %153];
    i32 %151 = phi [^b29, i32 %141] [^b35, i32 %141] [^b38, i32 %154];
    i1 %152 = scmp eq i32 %151, i32 45;
    i32 %153 = select i1 %152 ? i32 1 : i32 %150;
    i32 %154 = call () -> i32 @getch();
    i1 %155 = scmp lt i32 %154, i32 48;
    cbr i1 %155(prob = 0.5), ^b38, ^b37;
^b35:
    i1 %156 = scmp gt i32 %141, i32 57;
    cbr i1 %156(prob = 0.97), ^while.body12, ^while.guard4;
^while.body13:
    i32 %157 = phi [^b30, i32 0] [^b36, i32 0] [^b40, i32 %160];
    i32 %158 = phi [^b30, i32 %144] [^b36, i32 %144] [^b40, i32 %161];
    i1 %159 = scmp eq i32 %158, i32 45;
    i32 %160 = select i1 %159 ? i32 1 : i32 %157;
    i32 %161 = call () -> i32 @getch();
    i1 %162 = scmp lt i32 %161, i32 48;
    cbr i1 %162(prob = 0.5), ^b40, ^b39;
^b36:
    i1 %163 = scmp gt i32 %144, i32 57;
    cbr i1 %163(prob = 0.97), ^while.body13, ^while.guard5;
^b37:
    i1 %164 = scmp gt i32 %154, i32 57;
    ubr ^b38;
^b38:
    i1 %165 = phi [^while.body12, i1 true] [^b37, i1 %164];
    cbr i1 %165(prob = 0.97), ^while.body12, ^while.guard4;
^b39:
    i1 %166 = scmp gt i32 %161, i32 57;
    ubr ^b40;
^b40:
    i1 %167 = phi [^while.body13, i1 true] [^b39, i1 %166];
    cbr i1 %167(prob = 0.97), ^while.body13, ^while.guard5;
^while.guard4:
    i32 %168 = phi [^b35, i32 0] [^b38, i32 %153];
    i32 %169 = phi [^b35, i32 %141] [^b38, i32 %154];
    i1 %170 = scmp gt i32 %169, i32 47;
    cbr i1 %170(prob = 0.5), ^b41, ^b42;
^while.guard5:
    i32 %171 = phi [^b36, i32 0] [^b40, i32 %160];
    i32 %172 = phi [^b36, i32 %144] [^b40, i32 %161];
    i1 %173 = scmp gt i32 %172, i32 47;
    cbr i1 %173(prob = 0.5), ^b43, ^b44;
^b41:
    i1 %174 = scmp lt i32 %169, i32 58;
    cbr i1 %174(prob = 0.97), ^while.body14, ^b42;
^b42:
    i32 %175 = phi [^while.guard4, i32 0] [^b41, i32 0] [^b49, i32 %185];
    i1 %176 = scmp neq i32 %168, i32 0;
    cbr i1 %176(prob = 0.5), ^if.then3, ^b45;
^b43:
    i1 %177 = scmp lt i32 %172, i32 58;
    cbr i1 %177(prob = 0.97), ^while.body15, ^b44;
^b44:
    i32 %178 = phi [^while.guard5, i32 0] [^b43, i32 0] [^b50, i32 %195];
    i1 %179 = scmp neq i32 %171, i32 0;
    cbr i1 %179(prob = 0.5), ^if.then4, ^b46;
^if.then3:
    i32 %180 = neg i32 %175;
    ubr ^b45;
^while.body14:
    i32 %181 = phi [^b41, i32 %169] [^b49, i32 %186];
    i32 %182 = phi [^b41, i32 0] [^b49, i32 %185];
    i32 %183 = mul i32 %182, i32 10;
    i32 %184 = add i32 %181, i32 -48;
    i32 %185 = add i32 %184, i32 %183;
    i32 %186 = call () -> i32 @getch();
    i1 %187 = scmp gt i32 %186, i32 47;
    cbr i1 %187(prob = 0.5), ^b47, ^b49;
^b45:
    i32 %188 = phi [^b42, i32 %175] [^if.then3, i32 %180];
    i32* %189 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %140];
    store i32* %189 with i32 1;
    store i32* %2 with i32 %140;
    ubr ^while.body16;
^if.then4:
    i32 %190 = neg i32 %178;
    ubr ^b46;
^while.body15:
    i32 %191 = phi [^b43, i32 %172] [^b50, i32 %196];
    i32 %192 = phi [^b43, i32 0] [^b50, i32 %195];
    i32 %193 = mul i32 %192, i32 10;
    i32 %194 = add i32 %191, i32 -48;
    i32 %195 = add i32 %194, i32 %193;
    i32 %196 = call () -> i32 @getch();
    i1 %197 = scmp gt i32 %196, i32 47;
    cbr i1 %197(prob = 0.5), ^b48, ^b50;
^b46:
    i32 %198 = phi [^b44, i32 %178] [^if.then4, i32 %190];
    i32* %199 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %79];
    store i32* %199 with i32 %198;
    i32* %200 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %79];
    i32* %201 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %143];
    i32 %202 = load i32* %201;
    store i32* %200 with i32 %202;
    store i32* %201 with i32 %79;
    i32 %203 = add i32 %79, i32 1;
    i32* %204 = getelementptr &(i32* %199)[i64 1];
    store i32* %204 with i32 %143;
    i32* %205 = getelementptr &(i32* %200)[i64 1];
    i32* %206 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %198];
    i32 %207 = load i32* %206;
    store i32* %205 with i32 %207;
    store i32* %206 with i32 %203;
    i32 %208 = add i32 %79, i32 2;
    ubr ^b51;
^b47:
    i1 %209 = scmp le i32 %186, i32 57;
    ubr ^b49;
^b48:
    i1 %210 = scmp le i32 %196, i32 57;
    ubr ^b50;
^b49:
    i1 %211 = phi [^while.body14, i1 false] [^b47, i1 %209];
    cbr i1 %211(prob = 0.97), ^while.body14, ^b42;
^b50:
    i1 %212 = phi [^while.body15, i1 false] [^b48, i1 %210];
    cbr i1 %212(prob = 0.97), ^while.body15, ^b44;
^while.body16:
    i32 %213 = phi [^b45, i32 1] [^b52, i32 %234];
    i32 %214 = phi [^b45, i32 0] [^b52, i32 %216];
    i32 %215 = phi [^b45, i32 0] [^b52, i32 %220];
    i32 %216 = add i32 %214, i32 1;
    i32* %217 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i1 %219 = scmp eq i32 %218, i32 %188;
    i32 %220 = select i1 %219 ? i32 1 : i32 %215;
    i32* %221 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %218];
    i32 %222 = load i32* %221;
    i1 %223 = scmp neq i32 %222, i32 -1;
    cbr i1 %223(prob = 0.97), ^while.body17, ^b52;
^b51:
    i32 %224 = phi [^b46, i32 %208] [^if.then5, i32 %79];
    i32 %225 = add i32 %78, i32 -1;
    i1 %226 = scmp neq i32 %225, i32 0;
    cbr i1 %226(prob = 0.97), ^while.body6, ^b13;
^while.body17:
    i32 %227 = phi [^while.body16, i32 %213] [^b53, i32 %238];
    i32 %228 = phi [^while.body16, i32 %222] [^b53, i32 %240];
    i32* %229 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %228];
    i32 %230 = load i32* %229;
    i32* %231 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %230];
    i32 %232 = load i32* %231;
    i1 %233 = scmp eq i32 %232, i32 0;
    cbr i1 %233(prob = 0.5), ^entry3, ^b53;
^b52:
    i32 %234 = phi [^while.body16, i32 %213] [^b53, i32 %238];
    i1 %235 = scmp lt i32 %216, i32 %234;
    cbr i1 %235(prob = 0.97), ^while.body16, ^b54;
^entry3:
    store i32* %231 with i32 1;
    i32 %236 = add i32 %227, i32 1;
    i32* %237 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %236];
    store i32* %237 with i32 %230;
    ubr ^b53;
^b53:
    i32 %238 = phi [^while.body17, i32 %227] [^entry3, i32 %236];
    i32* %239 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %228];
    i32 %240 = load i32* %239;
    i1 %241 = scmp neq i32 %240, i32 -1;
    cbr i1 %241(prob = 0.97), ^while.body17, ^b52;
^b54:
    i1 %242 = scmp gt i32 %234, i32 -1;
    cbr i1 %242(prob = 0.97), ^while.body18, ^if.then5;
^if.then5:
    call (i32) -> void @putint(i32 %220);
    call (i32) -> void @putch(i32 10);
    ubr ^b51;
^while.body18:
    i32 %243 = phi [^b54, i32 0] [^while.body18, i32 %247];
    i32* %244 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %243];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %245];
    store i32* %246 with i32 0;
    i32 %247 = add i32 %243, i32 1;
    i1 %248 = scmp le i32 %247, i32 %234;
    cbr i1 %248(prob = 0.97), ^while.body18, ^if.then5;
}
