internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to, align 8 { Flexible };
internal [5005 * i32]* @next, align 8 { Flexible };
internal [1005 * i32]* @head, align 8 { Flexible };
internal [1005 * i32]* @que, align 8 { Flexible };
internal [1005 * i32]* @inq, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @que to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i64 1];
    [1005 * i32]* %5 = ptrcast [1005 * i32]* @inq to [1005 * i32]*;
    [1005 * i32]* %6 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    [5005 * i32]* %7 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %8 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %2(prob = 0.992248), ^while.body, ^12;
  ^while.body:
    i32 %9 = call () -> i32 @getch();
    i32 %10 = add i32 %9, i32 -48;
    i1 %11 = icmp ugt i32 %10, i32 9;
    cbr i1 %11(prob = 0.992248), ^while.body, ^12;
  ^12:
    i32 %13 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %14 = add i32 %13, i32 -48;
    i1 %15 = icmp ult i32 %14, i32 10;
    cbr i1 %15(prob = 0.992248), ^while.body1, ^b;
  ^while.body1:
    i32 %16 = call () -> i32 @getch();
    i32 %17 = add i32 %16, i32 -48;
    i1 %18 = icmp ult i32 %17, i32 10;
    cbr i1 %18(prob = 0.992248), ^while.body1, ^b;
  ^b:
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ugt i32 %20, i32 9;
    cbr i1 %21(prob = 0.992248), ^while.body2, ^29;
  ^while.body2:
    i32 %22 = phi [^b, i32 %19] [^while.body2, i32 %24];
    i32 %23 = phi [^b, i32 0] [^while.body2, i32 %28];
    i32 %24 = call () -> i32 @getch();
    i32 %25 = add i32 %24, i32 -48;
    i1 %26 = icmp ugt i32 %25, i32 9;
    i1 %27 = icmp eq i32 %22, i32 45;
    i32 %28 = select i1 %27 ? i32 1 : i32 %23;
    cbr i1 %26(prob = 0.992248), ^while.body2, ^29;
  ^29:
    i32 %30 = phi [^b, i32 %19] [^while.body2, i32 %24];
    i32 %31 = phi [^b, i32 0] [^while.body2, i32 %28];
    i32 %32 = add i32 %30, i32 -48;
    i1 %33 = icmp ult i32 %32, i32 10;
    cbr i1 %33(prob = 0.992248), ^while.body3, ^b1;
  ^b1:
    i32 %34 = phi [^29, i32 0] [^while.body3, i32 %45];
    i1 %35 = icmp neq i32 %31, i32 0;
    i32 %36 = neg i32 %34;
    i32 %37 = select i1 %35 ? i32 %36 : i32 %34;
    ubr ^while.body4;
  ^while.body3:
    i32 %38 = phi [^29, i32 %30] [^while.body3, i32 %40];
    i32 %39 = phi [^29, i32 0] [^while.body3, i32 %45];
    i32 %40 = call () -> i32 @getch();
    i32 %41 = add i32 %40, i32 -48;
    i1 %42 = icmp ult i32 %41, i32 10;
    i32 %43 = mul i32 %39, i32 10;
    i32 %44 = add i32 %43, i32 -48;
    i32 %45 = add i32 %38, i32 %44;
    cbr i1 %42(prob = 0.992248), ^while.body3, ^b1;
  ^while.body4:
    i32 %46 = phi [^b1, i32 0] [^while.body4, i32 %111];
    i32* %47 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %46];
    store i32* %47 with i32 -1;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %47)[i64 4];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %47)[i64 5];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %47)[i64 6];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %47)[i64 7];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %47)[i64 8];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %47)[i64 9];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %47)[i64 10];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %47)[i64 11];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %47)[i64 12];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %47)[i64 13];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %47)[i64 14];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %47)[i64 15];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %47)[i64 16];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %47)[i64 17];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %47)[i64 18];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %47)[i64 19];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %47)[i64 20];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %47)[i64 21];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %47)[i64 22];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %47)[i64 23];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %47)[i64 24];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %47)[i64 25];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %47)[i64 26];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %47)[i64 27];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %47)[i64 28];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %47)[i64 29];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %47)[i64 30];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %47)[i64 31];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %47)[i64 32];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %47)[i64 33];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %47)[i64 34];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %47)[i64 35];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %47)[i64 36];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %47)[i64 37];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %47)[i64 38];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %47)[i64 39];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %47)[i64 40];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %47)[i64 41];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %47)[i64 42];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %47)[i64 43];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %47)[i64 44];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %47)[i64 45];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %47)[i64 46];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %47)[i64 47];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %47)[i64 48];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %47)[i64 49];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %47)[i64 50];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %47)[i64 51];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %47)[i64 52];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %47)[i64 53];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %47)[i64 54];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %47)[i64 55];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %47)[i64 56];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %47)[i64 57];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %47)[i64 58];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %47)[i64 59];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %47)[i64 60];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %47)[i64 61];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %47)[i64 62];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %47)[i64 63];
    store i32* %110 with i32 -1;
    i32 %111 = add i32 %46, i32 64;
    i1 %112 = icmp slt i32 %111, i32 960;
    cbr i1 %112(prob = 0.933333), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %113 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %111];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %113)[i64 1];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %113)[i64 2];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %113)[i64 3];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %113)[i64 4];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %113)[i64 5];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %113)[i64 6];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %113)[i64 7];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %113)[i64 8];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %113)[i64 9];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %113)[i64 10];
    store i32* %123 with i32 -1;
    i32* %124 = getelementptr &(i32* %113)[i64 11];
    store i32* %124 with i32 -1;
    i32* %125 = getelementptr &(i32* %113)[i64 12];
    store i32* %125 with i32 -1;
    i32* %126 = getelementptr &(i32* %113)[i64 13];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %113)[i64 14];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %113)[i64 15];
    store i32* %128 with i32 -1;
    i32* %129 = getelementptr &(i32* %113)[i64 16];
    store i32* %129 with i32 -1;
    i32* %130 = getelementptr &(i32* %113)[i64 17];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %113)[i64 18];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %113)[i64 19];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %113)[i64 20];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %113)[i64 21];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %113)[i64 22];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %113)[i64 23];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %113)[i64 24];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %113)[i64 25];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %113)[i64 26];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %113)[i64 27];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %113)[i64 28];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %113)[i64 29];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %113)[i64 30];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %113)[i64 31];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %113)[i64 32];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %113)[i64 33];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %113)[i64 34];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %113)[i64 35];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %113)[i64 36];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %113)[i64 37];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %113)[i64 38];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %113)[i64 39];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %113)[i64 40];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %113)[i64 41];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %113)[i64 42];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %113)[i64 43];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %113)[i64 44];
    store i32* %157 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %158 = phi [^while.body5, i32 0] [^b7, i32 %277] [^if.then, i32 %158];
    i32 %159 = phi [^while.body5, i32 %37] [^b7, i32 %166] [^if.then, i32 %166];
    i1 %160 = icmp neq i32 %159, i32 0;
    cbr i1 %160(prob = 0.992248), ^while.body6, ^b2;
  ^while.body6:
    i32 %161 = call () -> i32 @getch();
    i1 %162 = icmp neq i32 %161, i32 81;
    i1 %163 = icmp neq i32 %161, i32 85;
    i1 %164 = and i1 %162, i1 %163;
    cbr i1 %164(prob = 0.992248), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %165 = icmp eq i32 %161, i32 81;
    i32 %166 = add i32 %159, i32 -1;
    cbr i1 %165(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %167 = call () -> i32 @getch();
    i32 %168 = add i32 %167, i32 -48;
    i1 %169 = icmp ugt i32 %168, i32 9;
    cbr i1 %169(prob = 0.992248), ^while.body7, ^180;
  ^entry2:
    i32 %170 = call () -> i32 @getch();
    i32 %171 = add i32 %170, i32 -48;
    i1 %172 = icmp ugt i32 %171, i32 9;
    cbr i1 %172(prob = 0.992248), ^while.body8, ^192;
  ^while.body7:
    i32 %173 = phi [^entry1, i32 %167] [^while.body7, i32 %175];
    i32 %174 = phi [^entry1, i32 0] [^while.body7, i32 %179];
    i32 %175 = call () -> i32 @getch();
    i32 %176 = add i32 %175, i32 -48;
    i1 %177 = icmp ugt i32 %176, i32 9;
    i1 %178 = icmp eq i32 %173, i32 45;
    i32 %179 = select i1 %178 ? i32 1 : i32 %174;
    cbr i1 %177(prob = 0.992248), ^while.body7, ^180;
  ^180:
    i32 %181 = phi [^entry1, i32 %167] [^while.body7, i32 %175];
    i32 %182 = phi [^entry1, i32 0] [^while.body7, i32 %179];
    i32 %183 = add i32 %181, i32 -48;
    i1 %184 = icmp ult i32 %183, i32 10;
    cbr i1 %184(prob = 0.992248), ^while.body9, ^b4;
  ^while.body8:
    i32 %185 = phi [^entry2, i32 %170] [^while.body8, i32 %187];
    i32 %186 = phi [^entry2, i32 0] [^while.body8, i32 %191];
    i32 %187 = call () -> i32 @getch();
    i32 %188 = add i32 %187, i32 -48;
    i1 %189 = icmp ugt i32 %188, i32 9;
    i1 %190 = icmp eq i32 %185, i32 45;
    i32 %191 = select i1 %190 ? i32 1 : i32 %186;
    cbr i1 %189(prob = 0.992248), ^while.body8, ^192;
  ^192:
    i32 %193 = phi [^entry2, i32 %170] [^while.body8, i32 %187];
    i32 %194 = phi [^entry2, i32 0] [^while.body8, i32 %191];
    i32 %195 = add i32 %193, i32 -48;
    i1 %196 = icmp ult i32 %195, i32 10;
    cbr i1 %196(prob = 0.992248), ^while.body10, ^b5;
  ^while.body9:
    i32 %197 = phi [^180, i32 %181] [^while.body9, i32 %199];
    i32 %198 = phi [^180, i32 0] [^while.body9, i32 %204];
    i32 %199 = call () -> i32 @getch();
    i32 %200 = add i32 %199, i32 -48;
    i1 %201 = icmp ult i32 %200, i32 10;
    i32 %202 = mul i32 %198, i32 10;
    i32 %203 = add i32 %202, i32 -48;
    i32 %204 = add i32 %197, i32 %203;
    cbr i1 %201(prob = 0.992248), ^while.body9, ^b4;
  ^b4:
    i32 %205 = phi [^180, i32 0] [^while.body9, i32 %204];
    i32 %206 = call () -> i32 @getch();
    i32 %207 = add i32 %206, i32 -48;
    i1 %208 = icmp ugt i32 %207, i32 9;
    i1 %209 = icmp neq i32 %182, i32 0;
    i32 %210 = neg i32 %205;
    i32 %211 = select i1 %209 ? i32 %210 : i32 %205;
    cbr i1 %208(prob = 0.992248), ^while.body11, ^234;
  ^while.body10:
    i32 %212 = phi [^192, i32 %193] [^while.body10, i32 %214];
    i32 %213 = phi [^192, i32 0] [^while.body10, i32 %219];
    i32 %214 = call () -> i32 @getch();
    i32 %215 = add i32 %214, i32 -48;
    i1 %216 = icmp ult i32 %215, i32 10;
    i32 %217 = mul i32 %213, i32 10;
    i32 %218 = add i32 %217, i32 -48;
    i32 %219 = add i32 %212, i32 %218;
    cbr i1 %216(prob = 0.992248), ^while.body10, ^b5;
  ^b5:
    i32 %220 = phi [^192, i32 0] [^while.body10, i32 %219];
    i32 %221 = call () -> i32 @getch();
    i32 %222 = add i32 %221, i32 -48;
    i1 %223 = icmp ugt i32 %222, i32 9;
    i1 %224 = icmp neq i32 %194, i32 0;
    i32 %225 = neg i32 %220;
    i32 %226 = select i1 %224 ? i32 %225 : i32 %220;
    cbr i1 %223(prob = 0.992248), ^while.body12, ^246;
  ^while.body11:
    i32 %227 = phi [^b4, i32 %206] [^while.body11, i32 %229];
    i32 %228 = phi [^b4, i32 0] [^while.body11, i32 %233];
    i32 %229 = call () -> i32 @getch();
    i32 %230 = add i32 %229, i32 -48;
    i1 %231 = icmp ugt i32 %230, i32 9;
    i1 %232 = icmp eq i32 %227, i32 45;
    i32 %233 = select i1 %232 ? i32 1 : i32 %228;
    cbr i1 %231(prob = 0.992248), ^while.body11, ^234;
  ^234:
    i32 %235 = phi [^b4, i32 %206] [^while.body11, i32 %229];
    i32 %236 = phi [^b4, i32 0] [^while.body11, i32 %233];
    i32 %237 = add i32 %235, i32 -48;
    i1 %238 = icmp ult i32 %237, i32 10;
    cbr i1 %238(prob = 0.992248), ^while.body13, ^b6;
  ^while.body12:
    i32 %239 = phi [^b5, i32 %221] [^while.body12, i32 %241];
    i32 %240 = phi [^b5, i32 0] [^while.body12, i32 %245];
    i32 %241 = call () -> i32 @getch();
    i32 %242 = add i32 %241, i32 -48;
    i1 %243 = icmp ugt i32 %242, i32 9;
    i1 %244 = icmp eq i32 %239, i32 45;
    i32 %245 = select i1 %244 ? i32 1 : i32 %240;
    cbr i1 %243(prob = 0.992248), ^while.body12, ^246;
  ^246:
    i32 %247 = phi [^b5, i32 %221] [^while.body12, i32 %241];
    i32 %248 = phi [^b5, i32 0] [^while.body12, i32 %245];
    i32 %249 = add i32 %247, i32 -48;
    i1 %250 = icmp ult i32 %249, i32 10;
    cbr i1 %250(prob = 0.992248), ^while.body14, ^b7;
  ^b6:
    i32 %251 = phi [^234, i32 0] [^while.body13, i32 %263];
    i1 %252 = icmp neq i32 %236, i32 0;
    i32 %253 = neg i32 %251;
    i32 %254 = select i1 %252 ? i32 %253 : i32 %251;
    i32* %255 = getelementptr &([1005 * i32]* %5)[i64 0][i32 %211];
    store i32* %255 with i32 1;
    store i32* %4 with i32 %211;
    ubr ^while.header1;
  ^while.body13:
    i32 %256 = phi [^234, i32 %235] [^while.body13, i32 %258];
    i32 %257 = phi [^234, i32 0] [^while.body13, i32 %263];
    i32 %258 = call () -> i32 @getch();
    i32 %259 = add i32 %258, i32 -48;
    i1 %260 = icmp ult i32 %259, i32 10;
    i32 %261 = mul i32 %257, i32 10;
    i32 %262 = add i32 %261, i32 -48;
    i32 %263 = add i32 %256, i32 %262;
    cbr i1 %260(prob = 0.992248), ^while.body13, ^b6;
  ^b7:
    i32 %264 = phi [^246, i32 0] [^while.body14, i32 %285];
    i1 %265 = icmp neq i32 %248, i32 0;
    i32 %266 = neg i32 %264;
    i32 %267 = select i1 %265 ? i32 %266 : i32 %264;
    i32* %268 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %158];
    store i32* %268 with i32 %267;
    i32* %269 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %226];
    i32 %270 = load i32* %269;
    i32* %271 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %158];
    store i32* %271 with i32 %270;
    i32* %272 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %267];
    store i32* %269 with i32 %158;
    i32* %273 = getelementptr &(i32* %268)[i64 1];
    store i32* %273 with i32 %226;
    i32 %274 = load i32* %272;
    i32* %275 = getelementptr &(i32* %271)[i64 1];
    store i32* %275 with i32 %274;
    i32 %276 = add i32 %158, i32 1;
    store i32* %272 with i32 %276;
    i32 %277 = add i32 %158, i32 2;
    ubr ^while.header;
  ^while.body14:
    i32 %278 = phi [^246, i32 %247] [^while.body14, i32 %280];
    i32 %279 = phi [^246, i32 0] [^while.body14, i32 %285];
    i32 %280 = call () -> i32 @getch();
    i32 %281 = add i32 %280, i32 -48;
    i1 %282 = icmp ult i32 %281, i32 10;
    i32 %283 = mul i32 %279, i32 10;
    i32 %284 = add i32 %283, i32 -48;
    i32 %285 = add i32 %278, i32 %284;
    cbr i1 %282(prob = 0.992248), ^while.body14, ^b7;
  ^while.header1:
    i32 %286 = phi [^b6, i32 1] [^while.header3, i32 %298];
    i32 %287 = phi [^b6, i32 0] [^while.header3, i32 %290];
    i32 %288 = phi [^b6, i32 0] [^while.header3, i32 %294];
    i1 %289 = icmp sgt i32 %286, i32 %287;
    cbr i1 %289(prob = 0.992248), ^entry3, ^while.header2;
  ^entry3:
    i32 %290 = add i32 %287, i32 1;
    i32* %291 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %290];
    i32 %292 = load i32* %291;
    i1 %293 = icmp eq i32 %254, i32 %292;
    i32 %294 = select i1 %293 ? i32 1 : i32 %288;
    i32* %295 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %292];
    i32 %296 = load i32* %295;
    ubr ^while.header3;
  ^while.header2:
    i1 %297 = icmp sgt i32 %286, i32 -1;
    cbr i1 %297(prob = 0.992248), ^while.body15, ^if.then;
  ^while.header3:
    i32 %298 = phi [^entry3, i32 %286] [^b8, i32 %314];
    i32 %299 = phi [^entry3, i32 %296] [^b8, i32 %316];
    i1 %300 = icmp neq i32 %299, i32 -1;
    cbr i1 %300(prob = 0.992248), ^while.body16, ^while.header1;
  ^if.then:
    call (i32) -> void @putint(i32 %288);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^while.body15:
    i32 %301 = phi [^while.header2, i32 0] [^while.body15, i32 %305];
    i32* %302 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %301];
    i32 %303 = load i32* %302;
    i32* %304 = getelementptr &([1005 * i32]* %5)[i64 0][i32 %303];
    store i32* %304 with i32 0;
    i32 %305 = add i32 %301, i32 1;
    i1 %306 = icmp sge i32 %286, i32 %305;
    cbr i1 %306(prob = 0.992248), ^while.body15, ^if.then;
  ^while.body16:
    i32* %307 = getelementptr &([5005 * i32]* %7)[i64 0][i32 %299];
    i32 %308 = load i32* %307;
    i32* %309 = getelementptr &([1005 * i32]* %5)[i64 0][i32 %308];
    i32 %310 = load i32* %309;
    i1 %311 = icmp eq i32 %310, i32 0;
    cbr i1 %311(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i32 %312 = add i32 %298, i32 1;
    i32* %313 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %312];
    store i32* %309 with i32 1;
    store i32* %313 with i32 %308;
    ubr ^b8;
  ^b8:
    i32 %314 = phi [^while.body16, i32 %298] [^entry4, i32 %312];
    i32* %315 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %299];
    i32 %316 = load i32* %315;
    ubr ^while.header3;
}
