internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i32* %1 = getelementptr &([1005 * i32]* @que)[i64 0][i64 1];
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %11] [^entry, i32 %0];
    i1 %4 = scmp lt i32 %3, i32 48;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i1 %5 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %6 = phi [^b, i1 %5] [^while.header, i1 true];
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %7 = scmp eq i32 %3, i32 45;
    cbr i1 %7(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %8 = phi [^b1, i32 %2] [^while.body1, i32 %8];
    i32 %9 = phi [^b1, i32 %3] [^while.body1, i32 %14];
    i1 %10 = scmp gt i32 %9, i32 47;
    cbr i1 %10(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %12 = scmp le i32 %9, i32 57;
    ubr ^b4;
^b4:
    i1 %13 = phi [^b3, i1 %12] [^while.header1, i1 false];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %14 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i32 %15 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %16 = phi [^b8, i32 %16] [^b5, i32 %8];
    i32 %17 = phi [^b8, i32 %29] [^b5, i32 0];
    i32 %18 = phi [^b8, i32 %18] [^b5, i32 0];
    i32 %19 = phi [^b8, i32 %30] [^b5, i32 %15];
    i1 %20 = scmp lt i32 %19, i32 48;
    cbr i1 %20(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %21 = scmp gt i32 %19, i32 57;
    ubr ^b7;
^b7:
    i1 %22 = phi [^b6, i1 %21] [^while.header2, i1 true];
    cbr i1 %22(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %23 = scmp eq i32 %19, i32 45;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b8;
^while.header3:
    i32 %24 = phi [^b7, i32 %16] [^while.body3, i32 %24];
    i32 %25 = phi [^b7, i32 %17] [^while.body3, i32 %25];
    i32 %26 = phi [^b7, i32 %18] [^while.body3, i32 %35];
    i32 %27 = phi [^b7, i32 %19] [^while.body3, i32 %36];
    i1 %28 = scmp gt i32 %27, i32 47;
    cbr i1 %28(prob = 0.5), ^b9, ^b10;
^if.then1:
    ubr ^b8;
^b8:
    i32 %29 = phi [^if.then1, i32 1] [^while.body2, i32 %17];
    i32 %30 = call () -> i32 @getch();
    ubr ^while.header2;
^b9:
    i1 %31 = scmp le i32 %27, i32 57;
    ubr ^b10;
^b10:
    i1 %32 = phi [^b9, i1 %31] [^while.header3, i1 false];
    cbr i1 %32(prob = 0.97), ^while.body3, ^b11;
^while.body3:
    i32 %33 = mul i32 %26, i32 10;
    i32 %34 = add i32 %33, i32 -48;
    i32 %35 = add i32 %34, i32 %27;
    i32 %36 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %37 = scmp neq i32 %25, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then2, ^entry1;
^if.then2:
    i32 %38 = neg i32 %26;
    ubr ^entry1;
^entry1:
    i32 %39 = phi [^b11, i32 %26] [^if.then2, i32 %38];
    ubr ^while.header4;
^while.header4:
    i32 %40 = phi [^while.body4, i32 %40] [^entry1, i32 %39];
    i32 %41 = phi [^while.body4, i32 %41] [^entry1, i32 %24];
    i32 %42 = phi [^while.body4, i32 %45] [^entry1, i32 0];
    i1 %43 = scmp lt i32 %42, i32 1005;
    cbr i1 %43(prob = 0.97), ^while.body4, ^while.header5;
^while.body4:
    i32* %44 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %42];
    store i32* %44 with i32 -1;
    i32 %45 = add i32 %42, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %46 = phi [^while.header4, i32 %40] [^b40, i32 %177];
    i32 %47 = phi [^while.header4, i32 %41] [^b40, i32 %176];
    i1 %48 = scmp neq i32 %46, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body5, ^b12;
^while.body5:
    i32 %49 = phi [^b14, i32 %49] [^while.header5, i32 %46];
    i32 %50 = phi [^b14, i32 %50] [^while.header5, i32 %47];
    i32 %51 = call () -> i32 @getch();
    i1 %52 = scmp neq i32 %51, i32 81;
    cbr i1 %52(prob = 0.5), ^b13, ^b14;
^b12:
    ret i32 0;
^b13:
    i1 %53 = scmp neq i32 %51, i32 85;
    ubr ^b14;
^b14:
    i1 %54 = phi [^while.body5, i1 false] [^b13, i1 %53];
    cbr i1 %54(prob = 0.97), ^while.body5, ^b15;
^b15:
    i1 %55 = scmp eq i32 %51, i32 81;
    cbr i1 %55(prob = 0.5), ^entry2, ^entry3;
^entry2:
    i32 %56 = call () -> i32 @getch();
    ubr ^while.header6;
^entry3:
    i32 %57 = call () -> i32 @getch();
    ubr ^while.header7;
^while.header6:
    i32 %58 = phi [^b20, i32 %58] [^entry2, i32 %49];
    i32 %59 = phi [^b20, i32 %59] [^entry2, i32 %50];
    i32 %60 = phi [^b20, i32 %88] [^entry2, i32 0];
    i32 %61 = phi [^b20, i32 %61] [^entry2, i32 0];
    i32 %62 = phi [^b20, i32 %89] [^entry2, i32 %56];
    i1 %63 = scmp lt i32 %62, i32 48;
    cbr i1 %63(prob = 0.5), ^b17, ^b16;
^while.header7:
    i32 %64 = phi [^b22, i32 %64] [^entry3, i32 %49];
    i32 %65 = phi [^b22, i32 %65] [^entry3, i32 %50];
    i32 %66 = phi [^b22, i32 %91] [^entry3, i32 0];
    i32 %67 = phi [^b22, i32 %67] [^entry3, i32 0];
    i32 %68 = phi [^b22, i32 %92] [^entry3, i32 %57];
    i1 %69 = scmp lt i32 %68, i32 48;
    cbr i1 %69(prob = 0.5), ^b19, ^b18;
^b16:
    i1 %70 = scmp gt i32 %62, i32 57;
    ubr ^b17;
^b17:
    i1 %71 = phi [^b16, i1 %70] [^while.header6, i1 true];
    cbr i1 %71(prob = 0.97), ^while.body6, ^while.header8;
^b18:
    i1 %72 = scmp gt i32 %68, i32 57;
    ubr ^b19;
^b19:
    i1 %73 = phi [^b18, i1 %72] [^while.header7, i1 true];
    cbr i1 %73(prob = 0.97), ^while.body7, ^while.header9;
^while.body6:
    i1 %74 = scmp eq i32 %62, i32 45;
    cbr i1 %74(prob = 0.5), ^if.then3, ^b20;
^while.body7:
    i1 %75 = scmp eq i32 %68, i32 45;
    cbr i1 %75(prob = 0.5), ^if.then4, ^b22;
^while.header8:
    i32 %76 = phi [^b17, i32 %58] [^while.body8, i32 %76];
    i32 %77 = phi [^b17, i32 %59] [^while.body8, i32 %77];
    i32 %78 = phi [^b17, i32 %60] [^while.body8, i32 %78];
    i32 %79 = phi [^b17, i32 %61] [^while.body8, i32 %98];
    i32 %80 = phi [^b17, i32 %62] [^while.body8, i32 %99];
    i1 %81 = scmp gt i32 %80, i32 47;
    cbr i1 %81(prob = 0.5), ^b21, ^b24;
^while.header9:
    i32 %82 = phi [^b19, i32 %64] [^while.body9, i32 %82];
    i32 %83 = phi [^b19, i32 %65] [^while.body9, i32 %83];
    i32 %84 = phi [^b19, i32 %66] [^while.body9, i32 %84];
    i32 %85 = phi [^b19, i32 %67] [^while.body9, i32 %102];
    i32 %86 = phi [^b19, i32 %68] [^while.body9, i32 %103];
    i1 %87 = scmp gt i32 %86, i32 47;
    cbr i1 %87(prob = 0.5), ^b23, ^b25;
^if.then3:
    ubr ^b20;
^b20:
    i32 %88 = phi [^if.then3, i32 1] [^while.body6, i32 %60];
    i32 %89 = call () -> i32 @getch();
    ubr ^while.header6;
^if.then4:
    ubr ^b22;
^b21:
    i1 %90 = scmp le i32 %80, i32 57;
    ubr ^b24;
^b22:
    i32 %91 = phi [^if.then4, i32 1] [^while.body7, i32 %66];
    i32 %92 = call () -> i32 @getch();
    ubr ^while.header7;
^b23:
    i1 %93 = scmp le i32 %86, i32 57;
    ubr ^b25;
^b24:
    i1 %94 = phi [^b21, i1 %90] [^while.header8, i1 false];
    cbr i1 %94(prob = 0.97), ^while.body8, ^b26;
^b25:
    i1 %95 = phi [^b23, i1 %93] [^while.header9, i1 false];
    cbr i1 %95(prob = 0.97), ^while.body9, ^b27;
^while.body8:
    i32 %96 = mul i32 %79, i32 10;
    i32 %97 = add i32 %96, i32 -48;
    i32 %98 = add i32 %97, i32 %80;
    i32 %99 = call () -> i32 @getch();
    ubr ^while.header8;
^while.body9:
    i32 %100 = mul i32 %85, i32 10;
    i32 %101 = add i32 %100, i32 -48;
    i32 %102 = add i32 %101, i32 %86;
    i32 %103 = call () -> i32 @getch();
    ubr ^while.header9;
^b26:
    i1 %104 = scmp neq i32 %78, i32 0;
    cbr i1 %104(prob = 0.5), ^if.then5, ^if.then7;
^b27:
    i1 %105 = scmp neq i32 %84, i32 0;
    cbr i1 %105(prob = 0.5), ^if.then6, ^if.else;
^if.then5:
    i32 %106 = neg i32 %79;
    ubr ^if.then7;
^if.then6:
    i32 %107 = neg i32 %85;
    ubr ^if.else;
^if.then7:
    i32 %108 = phi [^b26, i32 %79] [^if.then5, i32 %106];
    i32 %109 = call () -> i32 @getch();
    ubr ^while.header10;
^if.else:
    i32 %110 = phi [^b27, i32 %85] [^if.then6, i32 %107];
    i32 %111 = call () -> i32 @getch();
    ubr ^while.header11;
^while.header10:
    i32 %112 = phi [^b32, i32 %112] [^if.then7, i32 %76];
    i32 %113 = phi [^b32, i32 %113] [^if.then7, i32 %77];
    i32 %114 = phi [^b32, i32 %142] [^if.then7, i32 0];
    i32 %115 = phi [^b32, i32 %115] [^if.then7, i32 0];
    i32 %116 = phi [^b32, i32 %143] [^if.then7, i32 %109];
    i1 %117 = scmp lt i32 %116, i32 48;
    cbr i1 %117(prob = 0.5), ^b29, ^b28;
^while.header11:
    i32 %118 = phi [^b34, i32 %118] [^if.else, i32 %82];
    i32 %119 = phi [^b34, i32 %119] [^if.else, i32 %83];
    i32 %120 = phi [^b34, i32 %145] [^if.else, i32 0];
    i32 %121 = phi [^b34, i32 %121] [^if.else, i32 0];
    i32 %122 = phi [^b34, i32 %146] [^if.else, i32 %111];
    i1 %123 = scmp lt i32 %122, i32 48;
    cbr i1 %123(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %124 = scmp gt i32 %116, i32 57;
    ubr ^b29;
^b29:
    i1 %125 = phi [^b28, i1 %124] [^while.header10, i1 true];
    cbr i1 %125(prob = 0.97), ^while.body10, ^while.header12;
^b30:
    i1 %126 = scmp gt i32 %122, i32 57;
    ubr ^b31;
^b31:
    i1 %127 = phi [^b30, i1 %126] [^while.header11, i1 true];
    cbr i1 %127(prob = 0.97), ^while.body11, ^while.header13;
^while.body10:
    i1 %128 = scmp eq i32 %116, i32 45;
    cbr i1 %128(prob = 0.5), ^if.then8, ^b32;
^while.body11:
    i1 %129 = scmp eq i32 %122, i32 45;
    cbr i1 %129(prob = 0.5), ^if.then9, ^b34;
^while.header12:
    i32 %130 = phi [^b29, i32 %112] [^while.body12, i32 %130];
    i32 %131 = phi [^b29, i32 %113] [^while.body12, i32 %131];
    i32 %132 = phi [^b29, i32 %114] [^while.body12, i32 %132];
    i32 %133 = phi [^b29, i32 %115] [^while.body12, i32 %152];
    i32 %134 = phi [^b29, i32 %116] [^while.body12, i32 %153];
    i1 %135 = scmp gt i32 %134, i32 47;
    cbr i1 %135(prob = 0.5), ^b33, ^b36;
^while.header13:
    i32 %136 = phi [^b31, i32 %118] [^while.body13, i32 %136];
    i32 %137 = phi [^b31, i32 %119] [^while.body13, i32 %137];
    i32 %138 = phi [^b31, i32 %120] [^while.body13, i32 %138];
    i32 %139 = phi [^b31, i32 %121] [^while.body13, i32 %156];
    i32 %140 = phi [^b31, i32 %122] [^while.body13, i32 %157];
    i1 %141 = scmp gt i32 %140, i32 47;
    cbr i1 %141(prob = 0.5), ^b35, ^b37;
^if.then8:
    ubr ^b32;
^b32:
    i32 %142 = phi [^if.then8, i32 1] [^while.body10, i32 %114];
    i32 %143 = call () -> i32 @getch();
    ubr ^while.header10;
^if.then9:
    ubr ^b34;
^b33:
    i1 %144 = scmp le i32 %134, i32 57;
    ubr ^b36;
^b34:
    i32 %145 = phi [^if.then9, i32 1] [^while.body11, i32 %120];
    i32 %146 = call () -> i32 @getch();
    ubr ^while.header11;
^b35:
    i1 %147 = scmp le i32 %140, i32 57;
    ubr ^b37;
^b36:
    i1 %148 = phi [^b33, i1 %144] [^while.header12, i1 false];
    cbr i1 %148(prob = 0.97), ^while.body12, ^b38;
^b37:
    i1 %149 = phi [^b35, i1 %147] [^while.header13, i1 false];
    cbr i1 %149(prob = 0.97), ^while.body13, ^b39;
^while.body12:
    i32 %150 = mul i32 %133, i32 10;
    i32 %151 = add i32 %150, i32 -48;
    i32 %152 = add i32 %151, i32 %134;
    i32 %153 = call () -> i32 @getch();
    ubr ^while.header12;
^while.body13:
    i32 %154 = mul i32 %139, i32 10;
    i32 %155 = add i32 %154, i32 -48;
    i32 %156 = add i32 %155, i32 %140;
    i32 %157 = call () -> i32 @getch();
    ubr ^while.header13;
^b38:
    i1 %158 = scmp neq i32 %132, i32 0;
    cbr i1 %158(prob = 0.5), ^if.then10, ^if.then12;
^b39:
    i1 %159 = scmp neq i32 %138, i32 0;
    cbr i1 %159(prob = 0.5), ^if.then11, ^if.else1;
^if.then10:
    i32 %160 = neg i32 %133;
    ubr ^if.then12;
^if.then11:
    i32 %161 = neg i32 %139;
    ubr ^if.else1;
^if.then12:
    i32 %162 = phi [^b38, i32 %133] [^if.then10, i32 %160];
    i32* %163 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %108];
    store i32* %163 with i32 1;
    store i32* %1 with i32 %108;
    ubr ^while.header14;
^if.else1:
    i32 %164 = phi [^b39, i32 %139] [^if.then11, i32 %161];
    i32* %165 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %137];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %137];
    i32* %167 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %110];
    i32 %168 = load i32* %167;
    store i32* %166 with i32 %168;
    store i32* %167 with i32 %137;
    i32 %169 = add i32 %137, i32 1;
    i32* %170 = getelementptr &(i32* %165)[i64 1];
    store i32* %170 with i32 %110;
    i32* %171 = getelementptr &(i32* %166)[i64 1];
    i32* %172 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %164];
    i32 %173 = load i32* %172;
    store i32* %171 with i32 %173;
    store i32* %172 with i32 %169;
    i32 %174 = add i32 %137, i32 2;
    ubr ^b40;
^b40:
    i32 %175 = phi [^b42, i32 %189] [^if.else1, i32 %136];
    i32 %176 = phi [^b42, i32 %190] [^if.else1, i32 %174];
    i32 %177 = add i32 %175, i32 -1;
    ubr ^while.header5;
^while.header14:
    i32 %178 = phi [^while.header16, i32 %202] [^if.then12, i32 %130];
    i32 %179 = phi [^while.header16, i32 %203] [^if.then12, i32 %131];
    i32 %180 = phi [^while.header16, i32 %204] [^if.then12, i32 0];
    i32 %181 = phi [^while.header16, i32 %205] [^if.then12, i32 1];
    i32 %182 = phi [^while.header16, i32 %207] [^if.then12, i32 0];
    i32 %183 = phi [^while.header16, i32 %208] [^if.then12, i32 %162];
    i1 %184 = scmp lt i32 %180, i32 %181;
    cbr i1 %184(prob = 0.97), ^entry4, ^while.header15;
^entry4:
    i32 %185 = add i32 %180, i32 1;
    i32* %186 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %185];
    i32 %187 = load i32* %186;
    i1 %188 = scmp eq i32 %187, i32 %183;
    cbr i1 %188(prob = 0.5), ^if.then13, ^b41;
^while.header15:
    i32 %189 = phi [^while.header14, i32 %178] [^while.body14, i32 %189];
    i32 %190 = phi [^while.header14, i32 %179] [^while.body14, i32 %190];
    i32 %191 = phi [^while.header14, i32 %181] [^while.body14, i32 %191];
    i32 %192 = phi [^while.header14, i32 0] [^while.body14, i32 %201];
    i32 %193 = phi [^while.header14, i32 %182] [^while.body14, i32 %193];
    i1 %194 = scmp le i32 %192, i32 %191;
    cbr i1 %194(prob = 0.97), ^while.body14, ^b42;
^if.then13:
    ubr ^b41;
^b41:
    i32 %195 = phi [^if.then13, i32 1] [^entry4, i32 %182];
    i32* %196 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %187];
    i32 %197 = load i32* %196;
    ubr ^while.header16;
^while.body14:
    i32* %198 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %192];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %199];
    store i32* %200 with i32 0;
    i32 %201 = add i32 %192, i32 1;
    ubr ^while.header15;
^b42:
    call (i32) -> void @putint(i32 %193);
    call (i32) -> void @putch(i32 10);
    ubr ^b40;
^while.header16:
    i32 %202 = phi [^b43, i32 %202] [^b41, i32 %178];
    i32 %203 = phi [^b43, i32 %203] [^b41, i32 %179];
    i32 %204 = phi [^b43, i32 %204] [^b41, i32 %185];
    i32 %205 = phi [^b43, i32 %217] [^b41, i32 %181];
    i32 %206 = phi [^b43, i32 %219] [^b41, i32 %197];
    i32 %207 = phi [^b43, i32 %207] [^b41, i32 %195];
    i32 %208 = phi [^b43, i32 %208] [^b41, i32 %183];
    i1 %209 = scmp neq i32 %206, i32 -1;
    cbr i1 %209(prob = 0.97), ^while.body15, ^while.header14;
^while.body15:
    i32* %210 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %206];
    i32 %211 = load i32* %210;
    i32* %212 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %211];
    i32 %213 = load i32* %212;
    i1 %214 = scmp eq i32 %213, i32 0;
    cbr i1 %214(prob = 0.5), ^entry5, ^b43;
^entry5:
    store i32* %212 with i32 1;
    i32 %215 = add i32 %205, i32 1;
    i32* %216 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %215];
    store i32* %216 with i32 %211;
    ubr ^b43;
^b43:
    i32 %217 = phi [^entry5, i32 %215] [^while.body15, i32 %205];
    i32* %218 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %206];
    i32 %219 = load i32* %218;
    ubr ^while.header16;
}
