internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %m = alloc i32;
    i32* %cnt = alloc i32;
    store i32* %cnt with i32 0;
    i32* %h = alloc i32;
    i32* %tail = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %x, i32* %ch, i32* %m, i32* %cnt, i32* %h, i32* %tail ], [ ^b i32* %x, i32* %ch, i32* %tail, i32* %h, i32* %cnt, i32* %m, i32 %0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ], [ ^b i32* %arg, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp gt i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body i32* %arg, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp ge i32 %arg6, i32 48;
    cbr i1 %0, [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 0 ], [ ^b2 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^b2 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %x, i32* %f, i32* %ch, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %0, i32 0 ], [ ^b3 i32* %f, i32* %x, i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0, i32 0 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = mul i32 %arg7, i32 10;
    i32 %1 = add i32 %0, i32 %arg6;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %3, i32 %2 ], [ ^b2 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg7, i32 45;
    cbr i1 %0, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg8 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg7, i32 57;
    cbr i1 %0, [ ^while.body2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8 ], [ ^indirect1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0, i32 1 ], [ ^b3 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0, i32 1 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0, i32 %arg7 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %0, i32 %arg7 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 48;
    cbr i1 %0, [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 0, i32 %arg7 ], [ ^b6 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 0, i32 %arg7 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg6, i32 57;
    cbr i1 %0, [ ^while.body3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b6 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg7, i32 %arg8 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^if.then1 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4 ], [ ^if.else i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = neg i32 %arg4;
    store i32* %arg with i32 %0;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body4 i32* %i, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg1, i32 %0, i32 0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = mul i32 %arg7, i32 10;
    i32 %1 = add i32 %0, i32 %arg6;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %3, i32 %2, i32 %arg8 ], [ ^b6 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %2, i32 %arg8 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    store i32* %arg with i32 %arg4;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body4 i32* %i, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 0 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg6];
    store i32* %0 with i32 -1;
    i32 %1 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %1];
    store i32* %2 with i32 -1;
    i32 %3 = add i32 %arg6, i32 2;
    store i32* %arg with i32 %3;
    i32* %4 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %3];
    store i32* %4 with i32 -1;
    i32 %5 = add i32 %arg6, i32 3;
    store i32* %arg with i32 %5;
    i32* %6 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %5];
    store i32* %6 with i32 -1;
    i32 %7 = add i32 %arg6, i32 4;
    store i32* %arg with i32 %7;
    i32* %8 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %7];
    store i32* %8 with i32 -1;
    i32 %9 = add i32 %arg6, i32 5;
    store i32* %arg with i32 %9;
    i32* %10 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %9];
    store i32* %10 with i32 -1;
    i32 %11 = add i32 %arg6, i32 6;
    store i32* %arg with i32 %11;
    i32* %12 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %11];
    store i32* %12 with i32 -1;
    i32 %13 = add i32 %arg6, i32 7;
    store i32* %arg with i32 %13;
    i32* %14 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %13];
    store i32* %14 with i32 -1;
    i32 %15 = add i32 %arg6, i32 8;
    store i32* %arg with i32 %15;
    i32* %16 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %15];
    store i32* %16 with i32 -1;
    i32 %17 = add i32 %arg6, i32 9;
    store i32* %arg with i32 %17;
    i32* %18 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %17];
    store i32* %18 with i32 -1;
    i32 %19 = add i32 %arg6, i32 10;
    store i32* %arg with i32 %19;
    i32* %20 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %19];
    store i32* %20 with i32 -1;
    i32 %21 = add i32 %arg6, i32 11;
    store i32* %arg with i32 %21;
    i32* %22 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %21];
    store i32* %22 with i32 -1;
    i32 %23 = add i32 %arg6, i32 12;
    store i32* %arg with i32 %23;
    i32* %24 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %23];
    store i32* %24 with i32 -1;
    i32 %25 = add i32 %arg6, i32 13;
    store i32* %arg with i32 %25;
    i32* %26 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %25];
    store i32* %26 with i32 -1;
    i32 %27 = add i32 %arg6, i32 14;
    store i32* %arg with i32 %27;
    i32* %28 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %27];
    store i32* %28 with i32 -1;
    i32 %29 = add i32 %arg6, i32 15;
    store i32* %arg with i32 %29;
    i32* %30 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %29];
    store i32* %30 with i32 -1;
    i32 %31 = add i32 %arg6, i32 16;
    store i32* %arg with i32 %31;
    i1 %32 = scmp lt i32 %31, i32 960;
    cbr i1 %32, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %31 ], [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 960];
    store i32* %0 with i32 -1;
    store i32* %arg with i32 961;
    i32* %1 = getelementptr &([1005 * i32]* @head)[i32 0][i32 961];
    store i32* %1 with i32 -1;
    store i32* %arg with i32 962;
    i32* %2 = getelementptr &([1005 * i32]* @head)[i32 0][i32 962];
    store i32* %2 with i32 -1;
    store i32* %arg with i32 963;
    i32* %3 = getelementptr &([1005 * i32]* @head)[i32 0][i32 963];
    store i32* %3 with i32 -1;
    store i32* %arg with i32 964;
    i32* %4 = getelementptr &([1005 * i32]* @head)[i32 0][i32 964];
    store i32* %4 with i32 -1;
    store i32* %arg with i32 965;
    i32* %5 = getelementptr &([1005 * i32]* @head)[i32 0][i32 965];
    store i32* %5 with i32 -1;
    store i32* %arg with i32 966;
    i32* %6 = getelementptr &([1005 * i32]* @head)[i32 0][i32 966];
    store i32* %6 with i32 -1;
    store i32* %arg with i32 967;
    i32* %7 = getelementptr &([1005 * i32]* @head)[i32 0][i32 967];
    store i32* %7 with i32 -1;
    store i32* %arg with i32 968;
    i32* %8 = getelementptr &([1005 * i32]* @head)[i32 0][i32 968];
    store i32* %8 with i32 -1;
    store i32* %arg with i32 969;
    i32* %9 = getelementptr &([1005 * i32]* @head)[i32 0][i32 969];
    store i32* %9 with i32 -1;
    store i32* %arg with i32 970;
    i32* %10 = getelementptr &([1005 * i32]* @head)[i32 0][i32 970];
    store i32* %10 with i32 -1;
    store i32* %arg with i32 971;
    i32* %11 = getelementptr &([1005 * i32]* @head)[i32 0][i32 971];
    store i32* %11 with i32 -1;
    store i32* %arg with i32 972;
    i32* %12 = getelementptr &([1005 * i32]* @head)[i32 0][i32 972];
    store i32* %12 with i32 -1;
    store i32* %arg with i32 973;
    i32* %13 = getelementptr &([1005 * i32]* @head)[i32 0][i32 973];
    store i32* %13 with i32 -1;
    store i32* %arg with i32 974;
    i32* %14 = getelementptr &([1005 * i32]* @head)[i32 0][i32 974];
    store i32* %14 with i32 -1;
    store i32* %arg with i32 975;
    i32* %15 = getelementptr &([1005 * i32]* @head)[i32 0][i32 975];
    store i32* %15 with i32 -1;
    store i32* %arg with i32 976;
    i32* %16 = getelementptr &([1005 * i32]* @head)[i32 0][i32 976];
    store i32* %16 with i32 -1;
    store i32* %arg with i32 977;
    i32* %17 = getelementptr &([1005 * i32]* @head)[i32 0][i32 977];
    store i32* %17 with i32 -1;
    store i32* %arg with i32 978;
    i32* %18 = getelementptr &([1005 * i32]* @head)[i32 0][i32 978];
    store i32* %18 with i32 -1;
    store i32* %arg with i32 979;
    i32* %19 = getelementptr &([1005 * i32]* @head)[i32 0][i32 979];
    store i32* %19 with i32 -1;
    store i32* %arg with i32 980;
    i32* %20 = getelementptr &([1005 * i32]* @head)[i32 0][i32 980];
    store i32* %20 with i32 -1;
    store i32* %arg with i32 981;
    i32* %21 = getelementptr &([1005 * i32]* @head)[i32 0][i32 981];
    store i32* %21 with i32 -1;
    store i32* %arg with i32 982;
    i32* %22 = getelementptr &([1005 * i32]* @head)[i32 0][i32 982];
    store i32* %22 with i32 -1;
    store i32* %arg with i32 983;
    i32* %23 = getelementptr &([1005 * i32]* @head)[i32 0][i32 983];
    store i32* %23 with i32 -1;
    store i32* %arg with i32 984;
    i32* %24 = getelementptr &([1005 * i32]* @head)[i32 0][i32 984];
    store i32* %24 with i32 -1;
    store i32* %arg with i32 985;
    i32* %25 = getelementptr &([1005 * i32]* @head)[i32 0][i32 985];
    store i32* %25 with i32 -1;
    store i32* %arg with i32 986;
    i32* %26 = getelementptr &([1005 * i32]* @head)[i32 0][i32 986];
    store i32* %26 with i32 -1;
    store i32* %arg with i32 987;
    i32* %27 = getelementptr &([1005 * i32]* @head)[i32 0][i32 987];
    store i32* %27 with i32 -1;
    store i32* %arg with i32 988;
    i32* %28 = getelementptr &([1005 * i32]* @head)[i32 0][i32 988];
    store i32* %28 with i32 -1;
    store i32* %arg with i32 989;
    i32* %29 = getelementptr &([1005 * i32]* @head)[i32 0][i32 989];
    store i32* %29 with i32 -1;
    store i32* %arg with i32 990;
    i32* %30 = getelementptr &([1005 * i32]* @head)[i32 0][i32 990];
    store i32* %30 with i32 -1;
    store i32* %arg with i32 991;
    i32* %31 = getelementptr &([1005 * i32]* @head)[i32 0][i32 991];
    store i32* %31 with i32 -1;
    store i32* %arg with i32 992;
    i32* %32 = getelementptr &([1005 * i32]* @head)[i32 0][i32 992];
    store i32* %32 with i32 -1;
    store i32* %arg with i32 993;
    i32* %33 = getelementptr &([1005 * i32]* @head)[i32 0][i32 993];
    store i32* %33 with i32 -1;
    store i32* %arg with i32 994;
    i32* %34 = getelementptr &([1005 * i32]* @head)[i32 0][i32 994];
    store i32* %34 with i32 -1;
    store i32* %arg with i32 995;
    i32* %35 = getelementptr &([1005 * i32]* @head)[i32 0][i32 995];
    store i32* %35 with i32 -1;
    store i32* %arg with i32 996;
    i32* %36 = getelementptr &([1005 * i32]* @head)[i32 0][i32 996];
    store i32* %36 with i32 -1;
    store i32* %arg with i32 997;
    i32* %37 = getelementptr &([1005 * i32]* @head)[i32 0][i32 997];
    store i32* %37 with i32 -1;
    store i32* %arg with i32 998;
    i32* %38 = getelementptr &([1005 * i32]* @head)[i32 0][i32 998];
    store i32* %38 with i32 -1;
    store i32* %arg with i32 999;
    i32* %39 = getelementptr &([1005 * i32]* @head)[i32 0][i32 999];
    store i32* %39 with i32 -1;
    store i32* %arg with i32 1000;
    i32* %40 = getelementptr &([1005 * i32]* @head)[i32 0][i32 1000];
    store i32* %40 with i32 -1;
    store i32* %arg with i32 1001;
    i32* %41 = getelementptr &([1005 * i32]* @head)[i32 0][i32 1001];
    store i32* %41 with i32 -1;
    store i32* %arg with i32 1002;
    i32* %42 = getelementptr &([1005 * i32]* @head)[i32 0][i32 1002];
    store i32* %42 with i32 -1;
    store i32* %arg with i32 1003;
    i32* %43 = getelementptr &([1005 * i32]* @head)[i32 0][i32 1003];
    store i32* %43 with i32 -1;
    store i32* %arg with i32 1004;
    i32* %44 = getelementptr &([1005 * i32]* @head)[i32 0][i32 1004];
    store i32* %44 with i32 -1;
    store i32* %arg with i32 1005;
    i1 %45 = scmp neq i32 %arg5, i32 0;
    cbr i1 %45, [ ^while.body6 i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32 0 ], [ ^b7 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 81;
    cbr i1 %1, [ ^b8 i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0 ], [ ^b9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0 ];
^b7():
    ret i32 0;
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 85;
    cbr i1 %0, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6 ], [ ^b9 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp eq i32 %arg6, i32 81;
    cbr i1 %0, [ ^entry1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^entry2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 81;
    cbr i1 %1, [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %0 ], [ ^b9 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %0 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %x, i32* %f, i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 0 ], [ ^b10 i32* %f, i32* %x, i32* %ch, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %0, i32 0 ];
^entry2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body9 i32* %x, i32* %f, i32* %ch, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 0 ], [ ^b11 i32* %f, i32* %x, i32* %ch, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %0, i32 0 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp eq i32 %arg9, i32 45;
    cbr i1 %0, [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8 ], [ ^b12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg10 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp gt i32 %arg9, i32 57;
    cbr i1 %0, [ ^while.body8 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^indirect2 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp eq i32 %arg9, i32 45;
    cbr i1 %0, [ ^if.then3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8 ], [ ^b13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg10 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp gt i32 %arg9, i32 57;
    cbr i1 %0, [ ^while.body9 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^indirect3 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %0, i32 1 ], [ ^b10 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 1 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body9 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %0, i32 1 ], [ ^b11 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 1 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9 ], [ ^b10 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp ge i32 %arg8, i32 48;
    cbr i1 %0, [ ^b14 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i32 %arg9 ], [ ^b16 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 0, i32 %arg9 ];
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9 ], [ ^b11 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp ge i32 %arg8, i32 48;
    cbr i1 %0, [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i32 %arg9 ], [ ^b17 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 0, i32 %arg9 ];
^b14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp le i32 %arg8, i32 57;
    cbr i1 %0, [ ^while.body10 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b16 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg9, i32 %arg10 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp le i32 %arg8, i32 57;
    cbr i1 %0, [ ^while.body11 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b17 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg9, i32 %arg10 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 0;
    cbr i1 %0, [ ^if.then4 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^entry3 i32 %arg6, i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 0;
    cbr i1 %0, [ ^if.then5 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^entry4 i32 %arg6, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = neg i32 %arg6;
    ubr [ ^entry3 i32 %0, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^while.body10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = mul i32 %arg9, i32 10;
    i32 %1 = add i32 %0, i32 %arg8;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b14 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %3, i32 %2, i32 %arg10 ], [ ^b16 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %2, i32 %arg10 ];
^if.then5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = neg i32 %arg6;
    ubr [ ^entry4 i32 %0, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^while.body11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = mul i32 %arg9, i32 10;
    i32 %1 = add i32 %0, i32 %arg8;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b15 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %3, i32 %2, i32 %arg10 ], [ ^b17 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %2, i32 %arg10 ];
^entry3(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %x, i32* %f, i32* %ch, i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %0, i32 0 ], [ ^b18 i32* %f, i32* %x, i32* %ch, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg, i32 %arg5, i32 %arg6, i32 %0, i32 0 ];
^entry4(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body13 i32* %x, i32* %f, i32* %ch, i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %0, i32 0 ], [ ^b19 i32* %f, i32* %x, i32* %ch, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg, i32 %arg5, i32 %arg6, i32 %0, i32 0 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp eq i32 %arg10, i32 45;
    cbr i1 %0, [ ^if.then6 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg8, i32 %arg9 ], [ ^b20 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg11 ];
^b18(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp gt i32 %arg10, i32 57;
    cbr i1 %0, [ ^while.body12 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^indirect4 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^while.body13(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp eq i32 %arg10, i32 45;
    cbr i1 %0, [ ^if.then7 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg8, i32 %arg9 ], [ ^b21 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg11 ];
^b19(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp gt i32 %arg10, i32 57;
    cbr i1 %0, [ ^while.body13 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^indirect5 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg8, i32 %arg9, i32 %0, i32 1 ], [ ^b18 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 1 ];
^if.then7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body13 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg8, i32 %arg9, i32 %0, i32 1 ], [ ^b19 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 1 ];
^b20(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body12 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 %arg10 ], [ ^b18 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg8, i32 %arg9, i32 %0, i32 %arg10 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp ge i32 %arg9, i32 48;
    cbr i1 %0, [ ^b22 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 0, i32 %arg10 ], [ ^b24 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i32 %arg10 ];
^b21(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1, [ ^while.body13 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 %arg10 ], [ ^b19 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg3, i32 %arg8, i32 %arg9, i32 %0, i32 %arg10 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp ge i32 %arg9, i32 48;
    cbr i1 %0, [ ^b23 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 0, i32 %arg10 ], [ ^b25 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i32 %arg10 ];
^b22(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp le i32 %arg9, i32 57;
    cbr i1 %0, [ ^while.body14 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b24 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11 ];
^b23(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp le i32 %arg9, i32 57;
    cbr i1 %0, [ ^while.body15 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b25 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11 ];
^b24(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp neq i32 %arg8, i32 0;
    cbr i1 %0, [ ^if.then8 i32 %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^entry5 i32 %arg4, i32 %arg7, i32* %arg1, i32* %arg, i32* %arg3, i32* %arg1, i32* %arg, i32* %arg2, i32 %arg5, i32 %arg6 ];
^b25(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp neq i32 %arg8, i32 0;
    cbr i1 %0, [ ^if.then9 i32 %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^entry6 i32 %arg4, i32 %arg7, i32* %arg2, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32 %arg5, i32 %arg6 ];
^if.then8(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = neg i32 %arg7;
    ubr [ ^entry5 i32 %arg, i32 %0, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg2, i32 %arg5, i32 %arg6 ];
^while.body14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = mul i32 %arg10, i32 10;
    i32 %1 = add i32 %0, i32 %arg9;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b22 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %3, i32 %2, i32 %arg11 ], [ ^b24 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %2, i32 %arg11 ];
^if.then9(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = neg i32 %arg7;
    ubr [ ^entry6 i32 %arg, i32 %0, i32* %arg2, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg1, i32 %arg5, i32 %arg6 ];
^entry5(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([1005 * i32]* @inq)[i32 0][i32 %arg];
    store i32* %0 with i32 1;
    store i32* %arg3 with i32 1;
    i32* %1 = getelementptr &([1005 * i32]* @que)[i32 0][i32 1];
    store i32* %1 with i32 %arg;
    i32* %res = alloc i32;
    store i32* %res with i32 0;
    ubr [ ^entry7 i32* %arg2, i32* %arg3, i32* %res, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 0, i32 1, i32 %arg1, i32 0 ];
^while.body15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = mul i32 %arg10, i32 10;
    i32 %1 = add i32 %0, i32 %arg9;
    i32 %2 = sub i32 %1, i32 48;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp ge i32 %3, i32 48;
    cbr i1 %4, [ ^b23 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %3, i32 %2, i32 %arg11 ], [ ^b25 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %2, i32 %arg11 ];
^entry6(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %arg8];
    store i32* %0 with i32 %arg1;
    i32* %1 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %arg8];
    i32* %2 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    store i32* %2 with i32 %arg8;
    i32 %4 = add i32 %arg8, i32 1;
    i32* %5 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %4];
    store i32* %5 with i32 %arg;
    i32* %6 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %4];
    i32* %7 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg1];
    i32 %8 = load i32* %7;
    store i32* %6 with i32 %8;
    store i32* %7 with i32 %4;
    i32 %9 = add i32 %arg8, i32 2;
    store i32* %arg2 with i32 %9;
    i32 %10 = sub i32 %arg7, i32 1;
    store i32* %arg6 with i32 %10;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11, [ ^while.body6 i32* %arg6, i32* %arg3, i32* %arg4, i32* %arg5, i32 %10, i32 %9 ], [ ^b7 ];
^entry7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg10, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([1005 * i32]* @que)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %arg12;
    cbr i1 %3, [ ^indirect6 i32* %arg2, i32 %2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %0, i32 %arg11, i32 %arg12 ], [ ^b26 i32* %arg2, i32 %2, i32* %arg3, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg8, i32 %arg9, i32 %0, i32 %arg11, i32 %arg12, i32 %arg13 ];
^indirect6(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    store i32* %arg with i32 1;
    i32* %i = alloc i32;
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    store i32* %i with i32 %1;
    ubr [ ^while.header i32* %arg, i32* %i, i32 %1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 1, i32 %1 ];
^b26(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %i = alloc i32;
    i32* %0 = getelementptr &([1005 * i32]* @head)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    store i32* %i with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^while.body16 i32* %arg, i32* %i, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %1 ], [ ^indirect7 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^while.header(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp neq i32 %arg2, i32 -1;
    cbr i1 %0, [ ^while.body16 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^indirect7 i32* %arg, i32* %arg3, i32* %arg4, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^while.body16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i32* %0 = getelementptr &([5005 * i32]* @to)[i32 0][i32 %arg14];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1005 * i32]* @inq)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i1 %5 = xor i1 %4, i1 true;
    cbr i1 %5, [ ^indirect8 i32 %1, i32* %arg3, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg14, i32* %2, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^b27 i32* %arg, i32* %arg1, i32 %arg14, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg9, i32 %arg10;
    cbr i1 %0, [ ^entry7 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b28 i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg12 ];
^indirect8(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    store i32* %arg11 with i32 1;
    i32 %0 = add i32 %arg15, i32 1;
    store i32* %arg1 with i32 %0;
    i32* %1 = getelementptr &([1005 * i32]* @que)[i32 0][i32 %0];
    store i32* %1 with i32 %arg;
    i32* %2 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %arg10];
    i32 %3 = load i32* %2;
    store i32* %arg2 with i32 %3;
    ubr [ ^while.header i32* %arg3, i32* %arg2, i32 %3, i32* %arg5, i32* %arg4, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg12, i32 %arg13, i32 %arg14, i32 %0, i32 %arg16, i32 %arg17, i32 %3 ];
^b27(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i32* %0 = getelementptr &([5005 * i32]* @next)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    store i32* %arg1 with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^while.body16 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %1 ], [ ^indirect7 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^b28(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp le i32 0, i32 %arg6;
    cbr i1 %0, [ ^while.body17 i32* %i, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 0 ], [ ^b29 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg7 ];
^while.body17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([1005 * i32]* @que)[i32 0][i32 %arg9];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1005 * i32]* @inq)[i32 0][i32 %1];
    store i32* %2 with i32 0;
    i32 %3 = add i32 %arg9, i32 1;
    store i32* %arg with i32 %3;
    i1 %4 = scmp le i32 %3, i32 %arg7;
    cbr i1 %4, [ ^while.body17 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %3 ], [ ^b29 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg8 ];
^b29(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    call (i32) -> void @putint(i32 %arg6);
    call (i32) -> void @putch(i32 10);
    i32 %0 = sub i32 %arg4, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^while.body6 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32 %0, i32 %arg5 ], [ ^b7 ];
}
