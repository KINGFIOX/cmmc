internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to, align 8 { Flexible };
internal [5005 * i32]* @next, align 8 { Flexible };
internal [1005 * i32]* @head, align 8 { Flexible };
internal [1005 * i32]* @que, align 8 { Flexible };
internal [1005 * i32]* @inq, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    [1005 * i32]* %3 = ptrcast [1005 * i32]* @que to [1005 * i32]*;
    i32* %4 = getelementptr &([1005 * i32]* %3)[i64 0][i64 1];
    [5005 * i32]* %5 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %6 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @inq to [1005 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^11;
  ^while.body:
    i32 %8 = call () -> i32 @getch();
    i32 %9 = add i32 %8, i32 -48;
    i1 %10 = icmp ugt i32 %9, i32 9;
    cbr i1 %10(prob = 0.984615), ^while.body, ^11;
  ^11:
    i32 %12 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i32 %13 = add i32 %12, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = call () -> i32 @getch();
    i32 %16 = add i32 %15, i32 -48;
    i1 %17 = icmp ult i32 %16, i32 10;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = icmp ugt i32 %19, i32 9;
    cbr i1 %20(prob = 0.984615), ^while.body2, ^28;
  ^while.body2:
    i32 %21 = phi [^b, i32 %18] [^while.body2, i32 %23];
    i32 %22 = phi [^b, i32 0] [^while.body2, i32 %27];
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ugt i32 %24, i32 9;
    i1 %26 = icmp eq i32 %21, i32 45;
    i32 %27 = select i1 %26 ? i32 1 : i32 %22;
    cbr i1 %25(prob = 0.984615), ^while.body2, ^28;
  ^28:
    i32 %29 = phi [^b, i32 %18] [^while.body2, i32 %23];
    i32 %30 = phi [^b, i32 0] [^while.body2, i32 %27];
    i32 %31 = add i32 %29, i32 -48;
    i1 %32 = icmp ult i32 %31, i32 10;
    cbr i1 %32(prob = 0.984615), ^while.body3, ^b1;
  ^b1:
    i32 %33 = phi [^28, i32 0] [^while.body3, i32 %45];
    i1 %34 = icmp neq i32 %30, i32 0;
    i32 %35 = neg i32 %33;
    i32 %36 = select i1 %34 ? i32 %35 : i32 %33;
    [1005 * i32]* %37 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    ubr ^while.body4;
  ^while.body3:
    i32 %38 = phi [^28, i32 %29] [^while.body3, i32 %40];
    i32 %39 = phi [^28, i32 0] [^while.body3, i32 %45];
    i32 %40 = call () -> i32 @getch();
    i32 %41 = add i32 %40, i32 -48;
    i1 %42 = icmp ult i32 %41, i32 10;
    i32 %43 = mul i32 %39, i32 10;
    i32 %44 = add i32 %43, i32 -48;
    i32 %45 = add i32 %38, i32 %44;
    cbr i1 %42(prob = 0.984615), ^while.body3, ^b1;
  ^while.body4:
    i32 %46 = phi [^b1, i32 0] [^while.body4, i32 %111];
    i32* %47 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %46];
    store i32* %47 with i32 -1;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %47)[i64 4];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %47)[i64 5];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %47)[i64 6];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %47)[i64 7];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %47)[i64 8];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %47)[i64 9];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %47)[i64 10];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %47)[i64 11];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %47)[i64 12];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %47)[i64 13];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %47)[i64 14];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %47)[i64 15];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %47)[i64 16];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %47)[i64 17];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %47)[i64 18];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %47)[i64 19];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %47)[i64 20];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %47)[i64 21];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %47)[i64 22];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %47)[i64 23];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %47)[i64 24];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %47)[i64 25];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %47)[i64 26];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %47)[i64 27];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %47)[i64 28];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %47)[i64 29];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %47)[i64 30];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %47)[i64 31];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %47)[i64 32];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %47)[i64 33];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %47)[i64 34];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %47)[i64 35];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %47)[i64 36];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %47)[i64 37];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %47)[i64 38];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %47)[i64 39];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %47)[i64 40];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %47)[i64 41];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %47)[i64 42];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %47)[i64 43];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %47)[i64 44];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %47)[i64 45];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %47)[i64 46];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %47)[i64 47];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %47)[i64 48];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %47)[i64 49];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %47)[i64 50];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %47)[i64 51];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %47)[i64 52];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %47)[i64 53];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %47)[i64 54];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %47)[i64 55];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %47)[i64 56];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %47)[i64 57];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %47)[i64 58];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %47)[i64 59];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %47)[i64 60];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %47)[i64 61];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %47)[i64 62];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %47)[i64 63];
    store i32* %110 with i32 -1;
    i32 %111 = add i32 %46, i32 64;
    i1 %112 = icmp slt i32 %111, i32 960;
    cbr i1 %112(prob = 0.933333), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %113 = getelementptr &(i32* %47)[i64 64];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %47)[i64 65];
    store i32* %114 with i32 -1;
    i32* %115 = getelementptr &(i32* %47)[i64 66];
    store i32* %115 with i32 -1;
    i32* %116 = getelementptr &(i32* %47)[i64 67];
    store i32* %116 with i32 -1;
    i32* %117 = getelementptr &(i32* %47)[i64 68];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %47)[i64 69];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %47)[i64 70];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %47)[i64 71];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %47)[i64 72];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %47)[i64 73];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %47)[i64 74];
    store i32* %123 with i32 -1;
    i32* %124 = getelementptr &(i32* %47)[i64 75];
    store i32* %124 with i32 -1;
    i32* %125 = getelementptr &(i32* %47)[i64 76];
    store i32* %125 with i32 -1;
    i32* %126 = getelementptr &(i32* %47)[i64 77];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %47)[i64 78];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %47)[i64 79];
    store i32* %128 with i32 -1;
    i32* %129 = getelementptr &(i32* %47)[i64 80];
    store i32* %129 with i32 -1;
    i32* %130 = getelementptr &(i32* %47)[i64 81];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %47)[i64 82];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %47)[i64 83];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %47)[i64 84];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %47)[i64 85];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %47)[i64 86];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %47)[i64 87];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %47)[i64 88];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %47)[i64 89];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %47)[i64 90];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %47)[i64 91];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %47)[i64 92];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %47)[i64 93];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %47)[i64 94];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %47)[i64 95];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %47)[i64 96];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %47)[i64 97];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %47)[i64 98];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %47)[i64 99];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %47)[i64 100];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %47)[i64 101];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %47)[i64 102];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %47)[i64 103];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %47)[i64 104];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %47)[i64 105];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %47)[i64 106];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %47)[i64 107];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %47)[i64 108];
    store i32* %157 with i32 -1;
    i1 %158 = icmp neq i32 %36, i32 0;
    cbr i1 %158(prob = 0.984615), ^while.body6, ^b2;
  ^while.body6:
    i32 %159 = phi [^while.body5, i32 %36] [^while.body6, i32 %159] [^b8, i32 %297];
    i32 %160 = phi [^while.body5, i32 0] [^while.body6, i32 %160] [^b8, i32 %296];
    i32 %161 = call () -> i32 @getch();
    i1 %162 = icmp neq i32 %161, i32 81;
    i1 %163 = icmp neq i32 %161, i32 85;
    i1 %164 = and i1 %162, i1 %163;
    cbr i1 %164(prob = 0.984615), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %165 = icmp eq i32 %161, i32 81;
    cbr i1 %165(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %166 = call () -> i32 @getch();
    i32 %167 = add i32 %166, i32 -48;
    i1 %168 = icmp ugt i32 %167, i32 9;
    cbr i1 %168(prob = 0.984615), ^while.body7, ^179;
  ^if.else:
    i32 %169 = call () -> i32 @getch();
    i32 %170 = add i32 %169, i32 -48;
    i1 %171 = icmp ugt i32 %170, i32 9;
    cbr i1 %171(prob = 0.984615), ^while.body8, ^191;
  ^while.body7:
    i32 %172 = phi [^if.then, i32 %166] [^while.body7, i32 %174];
    i32 %173 = phi [^if.then, i32 0] [^while.body7, i32 %178];
    i32 %174 = call () -> i32 @getch();
    i32 %175 = add i32 %174, i32 -48;
    i1 %176 = icmp ugt i32 %175, i32 9;
    i1 %177 = icmp eq i32 %172, i32 45;
    i32 %178 = select i1 %177 ? i32 1 : i32 %173;
    cbr i1 %176(prob = 0.984615), ^while.body7, ^179;
  ^179:
    i32 %180 = phi [^if.then, i32 %166] [^while.body7, i32 %174];
    i32 %181 = phi [^if.then, i32 0] [^while.body7, i32 %178];
    i32 %182 = add i32 %180, i32 -48;
    i1 %183 = icmp ult i32 %182, i32 10;
    cbr i1 %183(prob = 0.984615), ^while.body9, ^b4;
  ^while.body8:
    i32 %184 = phi [^if.else, i32 %169] [^while.body8, i32 %186];
    i32 %185 = phi [^if.else, i32 0] [^while.body8, i32 %190];
    i32 %186 = call () -> i32 @getch();
    i32 %187 = add i32 %186, i32 -48;
    i1 %188 = icmp ugt i32 %187, i32 9;
    i1 %189 = icmp eq i32 %184, i32 45;
    i32 %190 = select i1 %189 ? i32 1 : i32 %185;
    cbr i1 %188(prob = 0.984615), ^while.body8, ^191;
  ^191:
    i32 %192 = phi [^if.else, i32 %169] [^while.body8, i32 %186];
    i32 %193 = phi [^if.else, i32 0] [^while.body8, i32 %190];
    i32 %194 = add i32 %192, i32 -48;
    i1 %195 = icmp ult i32 %194, i32 10;
    cbr i1 %195(prob = 0.984615), ^while.body10, ^b5;
  ^while.body9:
    i32 %196 = phi [^179, i32 %180] [^while.body9, i32 %198];
    i32 %197 = phi [^179, i32 0] [^while.body9, i32 %203];
    i32 %198 = call () -> i32 @getch();
    i32 %199 = add i32 %198, i32 -48;
    i1 %200 = icmp ult i32 %199, i32 10;
    i32 %201 = mul i32 %197, i32 10;
    i32 %202 = add i32 %201, i32 -48;
    i32 %203 = add i32 %196, i32 %202;
    cbr i1 %200(prob = 0.984615), ^while.body9, ^b4;
  ^b4:
    i32 %204 = phi [^179, i32 0] [^while.body9, i32 %203];
    i32 %205 = call () -> i32 @getch();
    i32 %206 = add i32 %205, i32 -48;
    i1 %207 = icmp ugt i32 %206, i32 9;
    i1 %208 = icmp neq i32 %181, i32 0;
    i32 %209 = neg i32 %204;
    i32 %210 = select i1 %208 ? i32 %209 : i32 %204;
    cbr i1 %207(prob = 0.984615), ^while.body11, ^233;
  ^while.body10:
    i32 %211 = phi [^191, i32 %192] [^while.body10, i32 %213];
    i32 %212 = phi [^191, i32 0] [^while.body10, i32 %218];
    i32 %213 = call () -> i32 @getch();
    i32 %214 = add i32 %213, i32 -48;
    i1 %215 = icmp ult i32 %214, i32 10;
    i32 %216 = mul i32 %212, i32 10;
    i32 %217 = add i32 %216, i32 -48;
    i32 %218 = add i32 %211, i32 %217;
    cbr i1 %215(prob = 0.984615), ^while.body10, ^b5;
  ^b5:
    i32 %219 = phi [^191, i32 0] [^while.body10, i32 %218];
    i32 %220 = call () -> i32 @getch();
    i32 %221 = add i32 %220, i32 -48;
    i1 %222 = icmp ugt i32 %221, i32 9;
    i1 %223 = icmp neq i32 %193, i32 0;
    i32 %224 = neg i32 %219;
    i32 %225 = select i1 %223 ? i32 %224 : i32 %219;
    cbr i1 %222(prob = 0.984615), ^while.body12, ^245;
  ^while.body11:
    i32 %226 = phi [^b4, i32 %205] [^while.body11, i32 %228];
    i32 %227 = phi [^b4, i32 0] [^while.body11, i32 %232];
    i32 %228 = call () -> i32 @getch();
    i32 %229 = add i32 %228, i32 -48;
    i1 %230 = icmp ugt i32 %229, i32 9;
    i1 %231 = icmp eq i32 %226, i32 45;
    i32 %232 = select i1 %231 ? i32 1 : i32 %227;
    cbr i1 %230(prob = 0.984615), ^while.body11, ^233;
  ^233:
    i32 %234 = phi [^b4, i32 %205] [^while.body11, i32 %228];
    i32 %235 = phi [^b4, i32 0] [^while.body11, i32 %232];
    i32 %236 = add i32 %234, i32 -48;
    i1 %237 = icmp ult i32 %236, i32 10;
    cbr i1 %237(prob = 0.984615), ^while.body13, ^b6;
  ^while.body12:
    i32 %238 = phi [^b5, i32 %220] [^while.body12, i32 %240];
    i32 %239 = phi [^b5, i32 0] [^while.body12, i32 %244];
    i32 %240 = call () -> i32 @getch();
    i32 %241 = add i32 %240, i32 -48;
    i1 %242 = icmp ugt i32 %241, i32 9;
    i1 %243 = icmp eq i32 %238, i32 45;
    i32 %244 = select i1 %243 ? i32 1 : i32 %239;
    cbr i1 %242(prob = 0.984615), ^while.body12, ^245;
  ^245:
    i32 %246 = phi [^b5, i32 %220] [^while.body12, i32 %240];
    i32 %247 = phi [^b5, i32 0] [^while.body12, i32 %244];
    i32 %248 = add i32 %246, i32 -48;
    i1 %249 = icmp ult i32 %248, i32 10;
    cbr i1 %249(prob = 0.984615), ^while.body14, ^b7;
  ^b6:
    i32 %250 = phi [^233, i32 0] [^while.body13, i32 %262];
    i1 %251 = icmp neq i32 %235, i32 0;
    i32 %252 = neg i32 %250;
    i32 %253 = select i1 %251 ? i32 %252 : i32 %250;
    i32* %254 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %210];
    store i32* %254 with i32 1;
    store i32* %4 with i32 %210;
    ubr ^while.body15;
  ^while.body13:
    i32 %255 = phi [^233, i32 %234] [^while.body13, i32 %257];
    i32 %256 = phi [^233, i32 0] [^while.body13, i32 %262];
    i32 %257 = call () -> i32 @getch();
    i32 %258 = add i32 %257, i32 -48;
    i1 %259 = icmp ult i32 %258, i32 10;
    i32 %260 = mul i32 %256, i32 10;
    i32 %261 = add i32 %260, i32 -48;
    i32 %262 = add i32 %255, i32 %261;
    cbr i1 %259(prob = 0.984615), ^while.body13, ^b6;
  ^b7:
    i32 %263 = phi [^245, i32 0] [^while.body14, i32 %284];
    i1 %264 = icmp neq i32 %247, i32 0;
    i32 %265 = neg i32 %263;
    i32 %266 = select i1 %264 ? i32 %265 : i32 %263;
    i32* %267 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %160];
    store i32* %267 with i32 %266;
    i32* %268 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %225];
    i32 %269 = load i32* %268;
    i32* %270 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %160];
    store i32* %270 with i32 %269;
    i32* %271 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %266];
    store i32* %268 with i32 %160;
    i32* %272 = getelementptr &(i32* %267)[i64 1];
    store i32* %272 with i32 %225;
    i32 %273 = load i32* %271;
    i32* %274 = getelementptr &(i32* %270)[i64 1];
    store i32* %274 with i32 %273;
    i32 %275 = add i32 %160, i32 1;
    store i32* %271 with i32 %275;
    i32 %276 = add i32 %160, i32 2;
    ubr ^b8;
  ^while.body14:
    i32 %277 = phi [^245, i32 %246] [^while.body14, i32 %279];
    i32 %278 = phi [^245, i32 0] [^while.body14, i32 %284];
    i32 %279 = call () -> i32 @getch();
    i32 %280 = add i32 %279, i32 -48;
    i1 %281 = icmp ult i32 %280, i32 10;
    i32 %282 = mul i32 %278, i32 10;
    i32 %283 = add i32 %282, i32 -48;
    i32 %284 = add i32 %277, i32 %283;
    cbr i1 %281(prob = 0.984615), ^while.body14, ^b7;
  ^while.body15:
    i32 %285 = phi [^b6, i32 1] [^306, i32 %307];
    i32 %286 = phi [^b6, i32 0] [^306, i32 %288];
    i32 %287 = phi [^b6, i32 0] [^306, i32 %292];
    i32 %288 = add i32 %286, i32 1;
    i32* %289 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %288];
    i32 %290 = load i32* %289;
    i1 %291 = icmp eq i32 %253, i32 %290;
    i32 %292 = select i1 %291 ? i32 1 : i32 %287;
    i32* %293 = getelementptr &([1005 * i32]* %37)[i64 0][i32 %290];
    i32 %294 = load i32* %293;
    i1 %295 = icmp neq i32 %294, i32 -1;
    cbr i1 %295(prob = 0.984615), ^while.body16, ^306;
  ^b8:
    i32 %296 = phi [^b7, i32 %276] [^b11, i32 %160];
    i32 %297 = add i32 %159, i32 -1;
    i1 %298 = icmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.984615), ^while.body6, ^b2;
  ^while.body16:
    i32 %299 = phi [^while.body15, i32 %285] [^b9, i32 %311];
    i32 %300 = phi [^while.body15, i32 %294] [^b9, i32 %313];
    i32* %301 = getelementptr &([5005 * i32]* %5)[i64 0][i32 %300];
    i32 %302 = load i32* %301;
    i32* %303 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %302];
    i32 %304 = load i32* %303;
    i1 %305 = icmp eq i32 %304, i32 0;
    cbr i1 %305(prob = 0.5), ^if.then1, ^b9;
  ^306:
    i32 %307 = phi [^while.body15, i32 %285] [^b9, i32 %311];
    i1 %308 = icmp slt i32 %288, i32 %307;
    cbr i1 %308(prob = 0.984615), ^while.body15, ^b10;
  ^if.then1:
    i32 %309 = add i32 %299, i32 1;
    i32* %310 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %309];
    store i32* %303 with i32 1;
    store i32* %310 with i32 %302;
    ubr ^b9;
  ^b9:
    i32 %311 = phi [^while.body16, i32 %299] [^if.then1, i32 %309];
    i32* %312 = getelementptr &([5005 * i32]* %6)[i64 0][i32 %300];
    i32 %313 = load i32* %312;
    i1 %314 = icmp neq i32 %313, i32 -1;
    cbr i1 %314(prob = 0.984615), ^while.body16, ^306;
  ^b10:
    i1 %315 = icmp sgt i32 %307, i32 -1;
    cbr i1 %315(prob = 0.984615), ^while.body17, ^b11;
  ^b11:
    call (i32) -> void @putint(i32 %292);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
  ^while.body17:
    i32 %316 = phi [^b10, i32 0] [^while.body17, i32 %320];
    i32* %317 = getelementptr &([1005 * i32]* %3)[i64 0][i32 %316];
    i32 %318 = load i32* %317;
    i32* %319 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %318];
    store i32* %319 with i32 0;
    i32 %320 = add i32 %316, i32 1;
    i1 %321 = icmp sge i32 %307, i32 %320;
    cbr i1 %321(prob = 0.984615), ^while.body17, ^b11;
}
