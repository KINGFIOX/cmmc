internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @que to [1005 * i32]*;
    i32* %5 = getelementptr &([1005 * i32]* %4)[i64 0][i64 1];
    [1005 * i32]* %6 = ptrcast [1005 * i32]* @inq to [1005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    [5005 * i32]* %8 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %9 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %14 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %20 = call () -> i32 @getch();
    i1 %21 = icmp slt i32 %20, i32 48;
    i1 %22 = icmp sgt i32 %20, i32 57;
    i1 %23 = or i1 %21, i1 %22;
    cbr i1 %23(prob = 0.97), ^while.body2, ^indirect1;
  ^while.body2:
    i32 %24 = phi [^b, i32 %20] [^while.body2, i32 %26];
    i32 %25 = phi [^b, i32 0] [^while.body2, i32 %31];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = icmp slt i32 %26, i32 48;
    i1 %28 = icmp sgt i32 %26, i32 57;
    i1 %29 = or i1 %27, i1 %28;
    i1 %30 = icmp eq i32 %24, i32 45;
    i32 %31 = select i1 %30 ? i32 1 : i32 %25;
    cbr i1 %29(prob = 0.97), ^while.body2, ^indirect1;
  ^indirect1:
    i32 %32 = phi [^b, i32 %20] [^while.body2, i32 %26];
    i32 %33 = phi [^b, i32 0] [^while.body2, i32 %31];
    i32 %34 = add i32 %32, i32 -48;
    i1 %35 = icmp ult i32 %34, i32 10;
    cbr i1 %35(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %36 = phi [^indirect1, i32 0] [^while.body3, i32 %47];
    i1 %37 = icmp neq i32 %33, i32 0;
    i32 %38 = neg i32 %36;
    i32 %39 = select i1 %37 ? i32 %38 : i32 %36;
    ubr ^while.body4;
  ^while.body3:
    i32 %40 = phi [^indirect1, i32 0] [^while.body3, i32 %47];
    i32 %41 = phi [^indirect1, i32 %32] [^while.body3, i32 %42];
    i32 %42 = call () -> i32 @getch();
    i32 %43 = add i32 %42, i32 -48;
    i1 %44 = icmp ult i32 %43, i32 10;
    i32 %45 = mul i32 %40, i32 10;
    i32 %46 = add i32 %45, i32 -48;
    i32 %47 = add i32 %41, i32 %46;
    cbr i1 %44(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %48 = phi [^b1, i32 0] [^while.body4, i32 %65];
    i32* %49 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %48];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %49)[i64 2];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %49)[i64 3];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %49)[i64 4];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %49)[i64 5];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %49)[i64 6];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %49)[i64 7];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %49)[i64 8];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %49)[i64 9];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %49)[i64 10];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %49)[i64 11];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %49)[i64 12];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %49)[i64 13];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %49)[i64 14];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %49)[i64 15];
    store i32* %64 with i32 -1;
    i32 %65 = add i32 %48, i32 16;
    i1 %66 = icmp slt i32 %65, i32 992;
    cbr i1 %66(prob = 0.98), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %67 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %65];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %67)[i64 2];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %67)[i64 3];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %67)[i64 4];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %67)[i64 5];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %67)[i64 6];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %67)[i64 7];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %67)[i64 8];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %67)[i64 9];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %67)[i64 10];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %67)[i64 11];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %67)[i64 12];
    store i32* %79 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %80 = phi [^while.body5, i32 %39] [^b7, i32 %208] [^if.then, i32 %232];
    i32 %81 = phi [^while.body5, i32 0] [^b7, i32 %207] [^if.then, i32 %81];
    i1 %82 = icmp neq i32 %80, i32 0;
    cbr i1 %82(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %83 = call () -> i32 @getch();
    i1 %84 = icmp neq i32 %83, i32 81;
    i1 %85 = icmp neq i32 %83, i32 85;
    i1 %86 = and i1 %84, i1 %85;
    cbr i1 %86(prob = 0.97), ^while.body7, ^b3;
  ^b2:
    ret i32 0;
  ^while.body7:
    i32 %87 = call () -> i32 @getch();
    i1 %88 = icmp neq i32 %87, i32 81;
    i1 %89 = icmp neq i32 %87, i32 85;
    i1 %90 = and i1 %88, i1 %89;
    cbr i1 %90(prob = 0.97), ^while.body7, ^b3;
  ^b3:
    i32 %91 = phi [^while.body6, i32 %83] [^while.body7, i32 %87];
    i1 %92 = icmp eq i32 %91, i32 81;
    cbr i1 %92(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %93 = call () -> i32 @getch();
    i1 %94 = icmp slt i32 %93, i32 48;
    i1 %95 = icmp sgt i32 %93, i32 57;
    i1 %96 = or i1 %94, i1 %95;
    cbr i1 %96(prob = 0.97), ^while.body8, ^indirect2;
  ^entry2:
    i32 %97 = call () -> i32 @getch();
    i1 %98 = icmp slt i32 %97, i32 48;
    i1 %99 = icmp sgt i32 %97, i32 57;
    i1 %100 = or i1 %98, i1 %99;
    cbr i1 %100(prob = 0.97), ^while.body9, ^indirect3;
  ^while.body8:
    i32 %101 = phi [^entry1, i32 %93] [^while.body8, i32 %103];
    i32 %102 = phi [^entry1, i32 0] [^while.body8, i32 %108];
    i32 %103 = call () -> i32 @getch();
    i1 %104 = icmp slt i32 %103, i32 48;
    i1 %105 = icmp sgt i32 %103, i32 57;
    i1 %106 = or i1 %104, i1 %105;
    i1 %107 = icmp eq i32 %101, i32 45;
    i32 %108 = select i1 %107 ? i32 1 : i32 %102;
    cbr i1 %106(prob = 0.97), ^while.body8, ^indirect2;
  ^indirect2:
    i32 %109 = phi [^entry1, i32 %93] [^while.body8, i32 %103];
    i32 %110 = phi [^entry1, i32 0] [^while.body8, i32 %108];
    i32 %111 = add i32 %109, i32 -48;
    i1 %112 = icmp ult i32 %111, i32 10;
    cbr i1 %112(prob = 0.97), ^while.body10, ^b4;
  ^while.body9:
    i32 %113 = phi [^entry2, i32 %97] [^while.body9, i32 %115];
    i32 %114 = phi [^entry2, i32 0] [^while.body9, i32 %120];
    i32 %115 = call () -> i32 @getch();
    i1 %116 = icmp slt i32 %115, i32 48;
    i1 %117 = icmp sgt i32 %115, i32 57;
    i1 %118 = or i1 %116, i1 %117;
    i1 %119 = icmp eq i32 %113, i32 45;
    i32 %120 = select i1 %119 ? i32 1 : i32 %114;
    cbr i1 %118(prob = 0.97), ^while.body9, ^indirect3;
  ^indirect3:
    i32 %121 = phi [^entry2, i32 %97] [^while.body9, i32 %115];
    i32 %122 = phi [^entry2, i32 0] [^while.body9, i32 %120];
    i32 %123 = add i32 %121, i32 -48;
    i1 %124 = icmp ult i32 %123, i32 10;
    cbr i1 %124(prob = 0.97), ^while.body11, ^b5;
  ^while.body10:
    i32 %125 = phi [^indirect2, i32 0] [^while.body10, i32 %132];
    i32 %126 = phi [^indirect2, i32 %109] [^while.body10, i32 %127];
    i32 %127 = call () -> i32 @getch();
    i32 %128 = add i32 %127, i32 -48;
    i1 %129 = icmp ult i32 %128, i32 10;
    i32 %130 = mul i32 %125, i32 10;
    i32 %131 = add i32 %130, i32 -48;
    i32 %132 = add i32 %126, i32 %131;
    cbr i1 %129(prob = 0.97), ^while.body10, ^b4;
  ^b4:
    i32 %133 = phi [^indirect2, i32 0] [^while.body10, i32 %132];
    i32 %134 = call () -> i32 @getch();
    i1 %135 = icmp slt i32 %134, i32 48;
    i1 %136 = icmp sgt i32 %134, i32 57;
    i1 %137 = or i1 %135, i1 %136;
    i1 %138 = icmp neq i32 %110, i32 0;
    i32 %139 = neg i32 %133;
    i32 %140 = select i1 %138 ? i32 %139 : i32 %133;
    cbr i1 %137(prob = 0.97), ^while.body12, ^indirect4;
  ^while.body11:
    i32 %141 = phi [^indirect3, i32 0] [^while.body11, i32 %148];
    i32 %142 = phi [^indirect3, i32 %121] [^while.body11, i32 %143];
    i32 %143 = call () -> i32 @getch();
    i32 %144 = add i32 %143, i32 -48;
    i1 %145 = icmp ult i32 %144, i32 10;
    i32 %146 = mul i32 %141, i32 10;
    i32 %147 = add i32 %146, i32 -48;
    i32 %148 = add i32 %142, i32 %147;
    cbr i1 %145(prob = 0.97), ^while.body11, ^b5;
  ^b5:
    i32 %149 = phi [^indirect3, i32 0] [^while.body11, i32 %148];
    i32 %150 = call () -> i32 @getch();
    i1 %151 = icmp slt i32 %150, i32 48;
    i1 %152 = icmp sgt i32 %150, i32 57;
    i1 %153 = or i1 %151, i1 %152;
    i1 %154 = icmp neq i32 %122, i32 0;
    i32 %155 = neg i32 %149;
    i32 %156 = select i1 %154 ? i32 %155 : i32 %149;
    cbr i1 %153(prob = 0.97), ^while.body13, ^indirect5;
  ^while.body12:
    i32 %157 = phi [^b4, i32 %134] [^while.body12, i32 %159];
    i32 %158 = phi [^b4, i32 0] [^while.body12, i32 %164];
    i32 %159 = call () -> i32 @getch();
    i1 %160 = icmp slt i32 %159, i32 48;
    i1 %161 = icmp sgt i32 %159, i32 57;
    i1 %162 = or i1 %160, i1 %161;
    i1 %163 = icmp eq i32 %157, i32 45;
    i32 %164 = select i1 %163 ? i32 1 : i32 %158;
    cbr i1 %162(prob = 0.97), ^while.body12, ^indirect4;
  ^indirect4:
    i32 %165 = phi [^b4, i32 %134] [^while.body12, i32 %159];
    i32 %166 = phi [^b4, i32 0] [^while.body12, i32 %164];
    i32 %167 = add i32 %165, i32 -48;
    i1 %168 = icmp ult i32 %167, i32 10;
    cbr i1 %168(prob = 0.97), ^while.body14, ^b6;
  ^while.body13:
    i32 %169 = phi [^b5, i32 %150] [^while.body13, i32 %171];
    i32 %170 = phi [^b5, i32 0] [^while.body13, i32 %176];
    i32 %171 = call () -> i32 @getch();
    i1 %172 = icmp slt i32 %171, i32 48;
    i1 %173 = icmp sgt i32 %171, i32 57;
    i1 %174 = or i1 %172, i1 %173;
    i1 %175 = icmp eq i32 %169, i32 45;
    i32 %176 = select i1 %175 ? i32 1 : i32 %170;
    cbr i1 %174(prob = 0.97), ^while.body13, ^indirect5;
  ^indirect5:
    i32 %177 = phi [^b5, i32 %150] [^while.body13, i32 %171];
    i32 %178 = phi [^b5, i32 0] [^while.body13, i32 %176];
    i32 %179 = add i32 %177, i32 -48;
    i1 %180 = icmp ult i32 %179, i32 10;
    cbr i1 %180(prob = 0.97), ^while.body15, ^b7;
  ^b6:
    i32 %181 = phi [^indirect4, i32 0] [^while.body14, i32 %193];
    i1 %182 = icmp neq i32 %166, i32 0;
    i32 %183 = neg i32 %181;
    i32 %184 = select i1 %182 ? i32 %183 : i32 %181;
    i32* %185 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %140];
    store i32* %185 with i32 1;
    store i32* %5 with i32 %140;
    ubr ^while.header1;
  ^while.body14:
    i32 %186 = phi [^indirect4, i32 0] [^while.body14, i32 %193];
    i32 %187 = phi [^indirect4, i32 %165] [^while.body14, i32 %188];
    i32 %188 = call () -> i32 @getch();
    i32 %189 = add i32 %188, i32 -48;
    i1 %190 = icmp ult i32 %189, i32 10;
    i32 %191 = mul i32 %186, i32 10;
    i32 %192 = add i32 %191, i32 -48;
    i32 %193 = add i32 %187, i32 %192;
    cbr i1 %190(prob = 0.97), ^while.body14, ^b6;
  ^b7:
    i32 %194 = phi [^indirect5, i32 0] [^while.body15, i32 %216];
    i1 %195 = icmp neq i32 %178, i32 0;
    i32 %196 = neg i32 %194;
    i32 %197 = select i1 %195 ? i32 %196 : i32 %194;
    i32* %198 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %81];
    store i32* %198 with i32 %197;
    i32* %199 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %156];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %81];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %197];
    store i32* %199 with i32 %81;
    i32* %203 = getelementptr &(i32* %198)[i64 1];
    store i32* %203 with i32 %156;
    i32 %204 = load i32* %202;
    i32* %205 = getelementptr &(i32* %201)[i64 1];
    store i32* %205 with i32 %204;
    i32 %206 = add i32 %81, i32 1;
    store i32* %202 with i32 %206;
    i32 %207 = add i32 %81, i32 2;
    i32 %208 = add i32 %80, i32 -1;
    ubr ^while.header;
  ^while.body15:
    i32 %209 = phi [^indirect5, i32 0] [^while.body15, i32 %216];
    i32 %210 = phi [^indirect5, i32 %177] [^while.body15, i32 %211];
    i32 %211 = call () -> i32 @getch();
    i32 %212 = add i32 %211, i32 -48;
    i1 %213 = icmp ult i32 %212, i32 10;
    i32 %214 = mul i32 %209, i32 10;
    i32 %215 = add i32 %214, i32 -48;
    i32 %216 = add i32 %210, i32 %215;
    cbr i1 %213(prob = 0.97), ^while.body15, ^b7;
  ^while.header1:
    i32 %217 = phi [^b6, i32 1] [^while.header2, i32 %229];
    i32 %218 = phi [^b6, i32 0] [^while.header2, i32 %221];
    i32 %219 = phi [^b6, i32 0] [^while.header2, i32 %225];
    i1 %220 = icmp sgt i32 %217, i32 %218;
    cbr i1 %220(prob = 0.97), ^entry3, ^b8;
  ^entry3:
    i32 %221 = add i32 %218, i32 1;
    i32* %222 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %221];
    i32 %223 = load i32* %222;
    i1 %224 = icmp eq i32 %184, i32 %223;
    i32 %225 = select i1 %224 ? i32 1 : i32 %219;
    i32* %226 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %223];
    i32 %227 = load i32* %226;
    ubr ^while.header2;
  ^b8:
    i1 %228 = icmp sgt i32 %217, i32 -1;
    cbr i1 %228(prob = 0.97), ^while.body16, ^if.then;
  ^while.header2:
    i32 %229 = phi [^entry3, i32 %217] [^b9, i32 %246];
    i32 %230 = phi [^entry3, i32 %227] [^b9, i32 %248];
    i1 %231 = icmp neq i32 %230, i32 -1;
    cbr i1 %231(prob = 0.97), ^while.body17, ^while.header1;
  ^if.then:
    call (i32) -> void @putint(i32 %219);
    call (i32) -> void @putch(i32 10);
    i32 %232 = add i32 %80, i32 -1;
    ubr ^while.header;
  ^while.body16:
    i32 %233 = phi [^b8, i32 0] [^while.body16, i32 %237];
    i32* %234 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %233];
    i32 %235 = load i32* %234;
    i32* %236 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %235];
    store i32* %236 with i32 0;
    i32 %237 = add i32 %233, i32 1;
    i1 %238 = icmp sge i32 %217, i32 %237;
    cbr i1 %238(prob = 0.97), ^while.body16, ^if.then;
  ^while.body17:
    i32* %239 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %230];
    i32 %240 = load i32* %239;
    i32* %241 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %240];
    i32 %242 = load i32* %241;
    i1 %243 = icmp eq i32 %242, i32 0;
    cbr i1 %243(prob = 0.5), ^entry4, ^b9;
  ^entry4:
    i32 %244 = add i32 %229, i32 1;
    i32* %245 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %244];
    store i32* %241 with i32 1;
    store i32* %245 with i32 %240;
    ubr ^b9;
  ^b9:
    i32 %246 = phi [^while.body17, i32 %229] [^entry4, i32 %244];
    i32* %247 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %230];
    i32 %248 = load i32* %247;
    ubr ^while.header2;
}
