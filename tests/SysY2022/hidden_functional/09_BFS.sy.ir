internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to { Flexible };
internal [5005 * i32]* @next { Flexible };
internal [1005 * i32]* @head { Flexible };
internal [1005 * i32]* @que { Flexible };
internal [1005 * i32]* @inq { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @que to [1005 * i32]*;
    i32* %5 = getelementptr &([1005 * i32]* %4)[i64 0][i64 1];
    [1005 * i32]* %6 = ptrcast [1005 * i32]* @inq to [1005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    [5005 * i32]* %8 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %9 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^14;
  ^while.body:
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^14;
  ^14:
    i32 %15 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %16 = add i32 %15, i32 -48;
    i1 %17 = icmp ult i32 %16, i32 10;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %21 = call () -> i32 @getch();
    i1 %22 = icmp slt i32 %21, i32 48;
    i1 %23 = icmp sgt i32 %21, i32 57;
    i1 %24 = or i1 %22, i1 %23;
    cbr i1 %24(prob = 0.97), ^while.body2, ^33;
  ^while.body2:
    i32 %25 = phi [^b, i32 %21] [^while.body2, i32 %27];
    i32 %26 = phi [^b, i32 0] [^while.body2, i32 %32];
    i32 %27 = call () -> i32 @getch();
    i1 %28 = icmp slt i32 %27, i32 48;
    i1 %29 = icmp sgt i32 %27, i32 57;
    i1 %30 = or i1 %28, i1 %29;
    i1 %31 = icmp eq i32 %25, i32 45;
    i32 %32 = select i1 %31 ? i32 1 : i32 %26;
    cbr i1 %30(prob = 0.97), ^while.body2, ^33;
  ^33:
    i32 %34 = phi [^b, i32 %21] [^while.body2, i32 %27];
    i32 %35 = phi [^b, i32 0] [^while.body2, i32 %32];
    i32 %36 = add i32 %34, i32 -48;
    i1 %37 = icmp ult i32 %36, i32 10;
    cbr i1 %37(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %38 = phi [^33, i32 0] [^while.body3, i32 %49];
    i1 %39 = icmp neq i32 %35, i32 0;
    i32 %40 = neg i32 %38;
    i32 %41 = select i1 %39 ? i32 %40 : i32 %38;
    ubr ^while.body4;
  ^while.body3:
    i32 %42 = phi [^33, i32 %34] [^while.body3, i32 %44];
    i32 %43 = phi [^33, i32 0] [^while.body3, i32 %49];
    i32 %44 = call () -> i32 @getch();
    i32 %45 = add i32 %44, i32 -48;
    i1 %46 = icmp ult i32 %45, i32 10;
    i32 %47 = mul i32 %43, i32 10;
    i32 %48 = add i32 %47, i32 -48;
    i32 %49 = add i32 %42, i32 %48;
    cbr i1 %46(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %50 = phi [^b1, i32 0] [^while.body4, i32 %115];
    i32* %51 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %50];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %51)[i64 1];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %51)[i64 2];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %51)[i64 3];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %51)[i64 4];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %51)[i64 5];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %51)[i64 6];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %51)[i64 7];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %51)[i64 8];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %51)[i64 9];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %51)[i64 10];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %51)[i64 11];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %51)[i64 12];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %51)[i64 13];
    store i32* %64 with i32 -1;
    i32* %65 = getelementptr &(i32* %51)[i64 14];
    store i32* %65 with i32 -1;
    i32* %66 = getelementptr &(i32* %51)[i64 15];
    store i32* %66 with i32 -1;
    i32* %67 = getelementptr &(i32* %51)[i64 16];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %51)[i64 17];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %51)[i64 18];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %51)[i64 19];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %51)[i64 20];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %51)[i64 21];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %51)[i64 22];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %51)[i64 23];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %51)[i64 24];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %51)[i64 25];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %51)[i64 26];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %51)[i64 27];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %51)[i64 28];
    store i32* %79 with i32 -1;
    i32* %80 = getelementptr &(i32* %51)[i64 29];
    store i32* %80 with i32 -1;
    i32* %81 = getelementptr &(i32* %51)[i64 30];
    store i32* %81 with i32 -1;
    i32* %82 = getelementptr &(i32* %51)[i64 31];
    store i32* %82 with i32 -1;
    i32* %83 = getelementptr &(i32* %51)[i64 32];
    store i32* %83 with i32 -1;
    i32* %84 = getelementptr &(i32* %51)[i64 33];
    store i32* %84 with i32 -1;
    i32* %85 = getelementptr &(i32* %51)[i64 34];
    store i32* %85 with i32 -1;
    i32* %86 = getelementptr &(i32* %51)[i64 35];
    store i32* %86 with i32 -1;
    i32* %87 = getelementptr &(i32* %51)[i64 36];
    store i32* %87 with i32 -1;
    i32* %88 = getelementptr &(i32* %51)[i64 37];
    store i32* %88 with i32 -1;
    i32* %89 = getelementptr &(i32* %51)[i64 38];
    store i32* %89 with i32 -1;
    i32* %90 = getelementptr &(i32* %51)[i64 39];
    store i32* %90 with i32 -1;
    i32* %91 = getelementptr &(i32* %51)[i64 40];
    store i32* %91 with i32 -1;
    i32* %92 = getelementptr &(i32* %51)[i64 41];
    store i32* %92 with i32 -1;
    i32* %93 = getelementptr &(i32* %51)[i64 42];
    store i32* %93 with i32 -1;
    i32* %94 = getelementptr &(i32* %51)[i64 43];
    store i32* %94 with i32 -1;
    i32* %95 = getelementptr &(i32* %51)[i64 44];
    store i32* %95 with i32 -1;
    i32* %96 = getelementptr &(i32* %51)[i64 45];
    store i32* %96 with i32 -1;
    i32* %97 = getelementptr &(i32* %51)[i64 46];
    store i32* %97 with i32 -1;
    i32* %98 = getelementptr &(i32* %51)[i64 47];
    store i32* %98 with i32 -1;
    i32* %99 = getelementptr &(i32* %51)[i64 48];
    store i32* %99 with i32 -1;
    i32* %100 = getelementptr &(i32* %51)[i64 49];
    store i32* %100 with i32 -1;
    i32* %101 = getelementptr &(i32* %51)[i64 50];
    store i32* %101 with i32 -1;
    i32* %102 = getelementptr &(i32* %51)[i64 51];
    store i32* %102 with i32 -1;
    i32* %103 = getelementptr &(i32* %51)[i64 52];
    store i32* %103 with i32 -1;
    i32* %104 = getelementptr &(i32* %51)[i64 53];
    store i32* %104 with i32 -1;
    i32* %105 = getelementptr &(i32* %51)[i64 54];
    store i32* %105 with i32 -1;
    i32* %106 = getelementptr &(i32* %51)[i64 55];
    store i32* %106 with i32 -1;
    i32* %107 = getelementptr &(i32* %51)[i64 56];
    store i32* %107 with i32 -1;
    i32* %108 = getelementptr &(i32* %51)[i64 57];
    store i32* %108 with i32 -1;
    i32* %109 = getelementptr &(i32* %51)[i64 58];
    store i32* %109 with i32 -1;
    i32* %110 = getelementptr &(i32* %51)[i64 59];
    store i32* %110 with i32 -1;
    i32* %111 = getelementptr &(i32* %51)[i64 60];
    store i32* %111 with i32 -1;
    i32* %112 = getelementptr &(i32* %51)[i64 61];
    store i32* %112 with i32 -1;
    i32* %113 = getelementptr &(i32* %51)[i64 62];
    store i32* %113 with i32 -1;
    i32* %114 = getelementptr &(i32* %51)[i64 63];
    store i32* %114 with i32 -1;
    i32 %115 = add i32 %50, i32 64;
    i1 %116 = icmp slt i32 %115, i32 960;
    cbr i1 %116(prob = 0.93), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %117 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %115];
    store i32* %117 with i32 -1;
    i32* %118 = getelementptr &(i32* %117)[i64 1];
    store i32* %118 with i32 -1;
    i32* %119 = getelementptr &(i32* %117)[i64 2];
    store i32* %119 with i32 -1;
    i32* %120 = getelementptr &(i32* %117)[i64 3];
    store i32* %120 with i32 -1;
    i32* %121 = getelementptr &(i32* %117)[i64 4];
    store i32* %121 with i32 -1;
    i32* %122 = getelementptr &(i32* %117)[i64 5];
    store i32* %122 with i32 -1;
    i32* %123 = getelementptr &(i32* %117)[i64 6];
    store i32* %123 with i32 -1;
    i32* %124 = getelementptr &(i32* %117)[i64 7];
    store i32* %124 with i32 -1;
    i32* %125 = getelementptr &(i32* %117)[i64 8];
    store i32* %125 with i32 -1;
    i32* %126 = getelementptr &(i32* %117)[i64 9];
    store i32* %126 with i32 -1;
    i32* %127 = getelementptr &(i32* %117)[i64 10];
    store i32* %127 with i32 -1;
    i32* %128 = getelementptr &(i32* %117)[i64 11];
    store i32* %128 with i32 -1;
    i32* %129 = getelementptr &(i32* %117)[i64 12];
    store i32* %129 with i32 -1;
    i32* %130 = getelementptr &(i32* %117)[i64 13];
    store i32* %130 with i32 -1;
    i32* %131 = getelementptr &(i32* %117)[i64 14];
    store i32* %131 with i32 -1;
    i32* %132 = getelementptr &(i32* %117)[i64 15];
    store i32* %132 with i32 -1;
    i32* %133 = getelementptr &(i32* %117)[i64 16];
    store i32* %133 with i32 -1;
    i32* %134 = getelementptr &(i32* %117)[i64 17];
    store i32* %134 with i32 -1;
    i32* %135 = getelementptr &(i32* %117)[i64 18];
    store i32* %135 with i32 -1;
    i32* %136 = getelementptr &(i32* %117)[i64 19];
    store i32* %136 with i32 -1;
    i32* %137 = getelementptr &(i32* %117)[i64 20];
    store i32* %137 with i32 -1;
    i32* %138 = getelementptr &(i32* %117)[i64 21];
    store i32* %138 with i32 -1;
    i32* %139 = getelementptr &(i32* %117)[i64 22];
    store i32* %139 with i32 -1;
    i32* %140 = getelementptr &(i32* %117)[i64 23];
    store i32* %140 with i32 -1;
    i32* %141 = getelementptr &(i32* %117)[i64 24];
    store i32* %141 with i32 -1;
    i32* %142 = getelementptr &(i32* %117)[i64 25];
    store i32* %142 with i32 -1;
    i32* %143 = getelementptr &(i32* %117)[i64 26];
    store i32* %143 with i32 -1;
    i32* %144 = getelementptr &(i32* %117)[i64 27];
    store i32* %144 with i32 -1;
    i32* %145 = getelementptr &(i32* %117)[i64 28];
    store i32* %145 with i32 -1;
    i32* %146 = getelementptr &(i32* %117)[i64 29];
    store i32* %146 with i32 -1;
    i32* %147 = getelementptr &(i32* %117)[i64 30];
    store i32* %147 with i32 -1;
    i32* %148 = getelementptr &(i32* %117)[i64 31];
    store i32* %148 with i32 -1;
    i32* %149 = getelementptr &(i32* %117)[i64 32];
    store i32* %149 with i32 -1;
    i32* %150 = getelementptr &(i32* %117)[i64 33];
    store i32* %150 with i32 -1;
    i32* %151 = getelementptr &(i32* %117)[i64 34];
    store i32* %151 with i32 -1;
    i32* %152 = getelementptr &(i32* %117)[i64 35];
    store i32* %152 with i32 -1;
    i32* %153 = getelementptr &(i32* %117)[i64 36];
    store i32* %153 with i32 -1;
    i32* %154 = getelementptr &(i32* %117)[i64 37];
    store i32* %154 with i32 -1;
    i32* %155 = getelementptr &(i32* %117)[i64 38];
    store i32* %155 with i32 -1;
    i32* %156 = getelementptr &(i32* %117)[i64 39];
    store i32* %156 with i32 -1;
    i32* %157 = getelementptr &(i32* %117)[i64 40];
    store i32* %157 with i32 -1;
    i32* %158 = getelementptr &(i32* %117)[i64 41];
    store i32* %158 with i32 -1;
    i32* %159 = getelementptr &(i32* %117)[i64 42];
    store i32* %159 with i32 -1;
    i32* %160 = getelementptr &(i32* %117)[i64 43];
    store i32* %160 with i32 -1;
    i32* %161 = getelementptr &(i32* %117)[i64 44];
    store i32* %161 with i32 -1;
    ubr ^while.header;
  ^while.header:
    i32 %162 = phi [^while.body5, i32 0] [^b7, i32 %288] [^if.then, i32 %162];
    i32 %163 = phi [^while.body5, i32 %41] [^b7, i32 %289] [^if.then, i32 %313];
    i1 %164 = icmp neq i32 %163, i32 0;
    cbr i1 %164(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %165 = call () -> i32 @getch();
    i1 %166 = icmp neq i32 %165, i32 81;
    i1 %167 = icmp neq i32 %165, i32 85;
    i1 %168 = and i1 %166, i1 %167;
    cbr i1 %168(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %169 = icmp eq i32 %165, i32 81;
    cbr i1 %169(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %170 = call () -> i32 @getch();
    i1 %171 = icmp slt i32 %170, i32 48;
    i1 %172 = icmp sgt i32 %170, i32 57;
    i1 %173 = or i1 %171, i1 %172;
    cbr i1 %173(prob = 0.97), ^while.body7, ^186;
  ^entry2:
    i32 %174 = call () -> i32 @getch();
    i1 %175 = icmp slt i32 %174, i32 48;
    i1 %176 = icmp sgt i32 %174, i32 57;
    i1 %177 = or i1 %175, i1 %176;
    cbr i1 %177(prob = 0.97), ^while.body8, ^199;
  ^while.body7:
    i32 %178 = phi [^entry1, i32 %170] [^while.body7, i32 %180];
    i32 %179 = phi [^entry1, i32 0] [^while.body7, i32 %185];
    i32 %180 = call () -> i32 @getch();
    i1 %181 = icmp slt i32 %180, i32 48;
    i1 %182 = icmp sgt i32 %180, i32 57;
    i1 %183 = or i1 %181, i1 %182;
    i1 %184 = icmp eq i32 %178, i32 45;
    i32 %185 = select i1 %184 ? i32 1 : i32 %179;
    cbr i1 %183(prob = 0.97), ^while.body7, ^186;
  ^186:
    i32 %187 = phi [^entry1, i32 %170] [^while.body7, i32 %180];
    i32 %188 = phi [^entry1, i32 0] [^while.body7, i32 %185];
    i32 %189 = add i32 %187, i32 -48;
    i1 %190 = icmp ult i32 %189, i32 10;
    cbr i1 %190(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %191 = phi [^entry2, i32 %174] [^while.body8, i32 %193];
    i32 %192 = phi [^entry2, i32 0] [^while.body8, i32 %198];
    i32 %193 = call () -> i32 @getch();
    i1 %194 = icmp slt i32 %193, i32 48;
    i1 %195 = icmp sgt i32 %193, i32 57;
    i1 %196 = or i1 %194, i1 %195;
    i1 %197 = icmp eq i32 %191, i32 45;
    i32 %198 = select i1 %197 ? i32 1 : i32 %192;
    cbr i1 %196(prob = 0.97), ^while.body8, ^199;
  ^199:
    i32 %200 = phi [^entry2, i32 %174] [^while.body8, i32 %193];
    i32 %201 = phi [^entry2, i32 0] [^while.body8, i32 %198];
    i32 %202 = add i32 %200, i32 -48;
    i1 %203 = icmp ult i32 %202, i32 10;
    cbr i1 %203(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %204 = phi [^186, i32 %187] [^while.body9, i32 %206];
    i32 %205 = phi [^186, i32 0] [^while.body9, i32 %211];
    i32 %206 = call () -> i32 @getch();
    i32 %207 = add i32 %206, i32 -48;
    i1 %208 = icmp ult i32 %207, i32 10;
    i32 %209 = mul i32 %205, i32 10;
    i32 %210 = add i32 %209, i32 -48;
    i32 %211 = add i32 %204, i32 %210;
    cbr i1 %208(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %212 = phi [^186, i32 0] [^while.body9, i32 %211];
    i32 %213 = call () -> i32 @getch();
    i1 %214 = icmp slt i32 %213, i32 48;
    i1 %215 = icmp sgt i32 %213, i32 57;
    i1 %216 = or i1 %214, i1 %215;
    i1 %217 = icmp neq i32 %188, i32 0;
    i32 %218 = neg i32 %212;
    i32 %219 = select i1 %217 ? i32 %218 : i32 %212;
    cbr i1 %216(prob = 0.97), ^while.body11, ^244;
  ^while.body10:
    i32 %220 = phi [^199, i32 %200] [^while.body10, i32 %222];
    i32 %221 = phi [^199, i32 0] [^while.body10, i32 %227];
    i32 %222 = call () -> i32 @getch();
    i32 %223 = add i32 %222, i32 -48;
    i1 %224 = icmp ult i32 %223, i32 10;
    i32 %225 = mul i32 %221, i32 10;
    i32 %226 = add i32 %225, i32 -48;
    i32 %227 = add i32 %220, i32 %226;
    cbr i1 %224(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %228 = phi [^199, i32 0] [^while.body10, i32 %227];
    i32 %229 = call () -> i32 @getch();
    i1 %230 = icmp slt i32 %229, i32 48;
    i1 %231 = icmp sgt i32 %229, i32 57;
    i1 %232 = or i1 %230, i1 %231;
    i1 %233 = icmp neq i32 %201, i32 0;
    i32 %234 = neg i32 %228;
    i32 %235 = select i1 %233 ? i32 %234 : i32 %228;
    cbr i1 %232(prob = 0.97), ^while.body12, ^257;
  ^while.body11:
    i32 %236 = phi [^b4, i32 %213] [^while.body11, i32 %238];
    i32 %237 = phi [^b4, i32 0] [^while.body11, i32 %243];
    i32 %238 = call () -> i32 @getch();
    i1 %239 = icmp slt i32 %238, i32 48;
    i1 %240 = icmp sgt i32 %238, i32 57;
    i1 %241 = or i1 %239, i1 %240;
    i1 %242 = icmp eq i32 %236, i32 45;
    i32 %243 = select i1 %242 ? i32 1 : i32 %237;
    cbr i1 %241(prob = 0.97), ^while.body11, ^244;
  ^244:
    i32 %245 = phi [^b4, i32 %213] [^while.body11, i32 %238];
    i32 %246 = phi [^b4, i32 0] [^while.body11, i32 %243];
    i32 %247 = add i32 %245, i32 -48;
    i1 %248 = icmp ult i32 %247, i32 10;
    cbr i1 %248(prob = 0.97), ^while.body13, ^b6;
  ^while.body12:
    i32 %249 = phi [^b5, i32 %229] [^while.body12, i32 %251];
    i32 %250 = phi [^b5, i32 0] [^while.body12, i32 %256];
    i32 %251 = call () -> i32 @getch();
    i1 %252 = icmp slt i32 %251, i32 48;
    i1 %253 = icmp sgt i32 %251, i32 57;
    i1 %254 = or i1 %252, i1 %253;
    i1 %255 = icmp eq i32 %249, i32 45;
    i32 %256 = select i1 %255 ? i32 1 : i32 %250;
    cbr i1 %254(prob = 0.97), ^while.body12, ^257;
  ^257:
    i32 %258 = phi [^b5, i32 %229] [^while.body12, i32 %251];
    i32 %259 = phi [^b5, i32 0] [^while.body12, i32 %256];
    i32 %260 = add i32 %258, i32 -48;
    i1 %261 = icmp ult i32 %260, i32 10;
    cbr i1 %261(prob = 0.97), ^while.body14, ^b7;
  ^b6:
    i32 %262 = phi [^244, i32 0] [^while.body13, i32 %274];
    i1 %263 = icmp neq i32 %246, i32 0;
    i32 %264 = neg i32 %262;
    i32 %265 = select i1 %263 ? i32 %264 : i32 %262;
    i32* %266 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %219];
    store i32* %266 with i32 1;
    store i32* %5 with i32 %219;
    ubr ^while.header1;
  ^while.body13:
    i32 %267 = phi [^244, i32 %245] [^while.body13, i32 %269];
    i32 %268 = phi [^244, i32 0] [^while.body13, i32 %274];
    i32 %269 = call () -> i32 @getch();
    i32 %270 = add i32 %269, i32 -48;
    i1 %271 = icmp ult i32 %270, i32 10;
    i32 %272 = mul i32 %268, i32 10;
    i32 %273 = add i32 %272, i32 -48;
    i32 %274 = add i32 %267, i32 %273;
    cbr i1 %271(prob = 0.97), ^while.body13, ^b6;
  ^b7:
    i32 %275 = phi [^257, i32 0] [^while.body14, i32 %297];
    i1 %276 = icmp neq i32 %259, i32 0;
    i32 %277 = neg i32 %275;
    i32 %278 = select i1 %276 ? i32 %277 : i32 %275;
    i32* %279 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %162];
    store i32* %279 with i32 %278;
    i32* %280 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %235];
    i32 %281 = load i32* %280;
    i32* %282 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %162];
    store i32* %282 with i32 %281;
    i32* %283 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %278];
    store i32* %280 with i32 %162;
    i32* %284 = getelementptr &(i32* %279)[i64 1];
    store i32* %284 with i32 %235;
    i32 %285 = load i32* %283;
    i32* %286 = getelementptr &(i32* %282)[i64 1];
    store i32* %286 with i32 %285;
    i32 %287 = add i32 %162, i32 1;
    store i32* %283 with i32 %287;
    i32 %288 = add i32 %162, i32 2;
    i32 %289 = add i32 %163, i32 -1;
    ubr ^while.header;
  ^while.body14:
    i32 %290 = phi [^257, i32 %258] [^while.body14, i32 %292];
    i32 %291 = phi [^257, i32 0] [^while.body14, i32 %297];
    i32 %292 = call () -> i32 @getch();
    i32 %293 = add i32 %292, i32 -48;
    i1 %294 = icmp ult i32 %293, i32 10;
    i32 %295 = mul i32 %291, i32 10;
    i32 %296 = add i32 %295, i32 -48;
    i32 %297 = add i32 %290, i32 %296;
    cbr i1 %294(prob = 0.97), ^while.body14, ^b7;
  ^while.header1:
    i32 %298 = phi [^b6, i32 1] [^while.header3, i32 %310];
    i32 %299 = phi [^b6, i32 0] [^while.header3, i32 %302];
    i32 %300 = phi [^b6, i32 0] [^while.header3, i32 %306];
    i1 %301 = icmp sgt i32 %298, i32 %299;
    cbr i1 %301(prob = 0.97), ^entry3, ^while.header2;
  ^entry3:
    i32 %302 = add i32 %299, i32 1;
    i32* %303 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %302];
    i32 %304 = load i32* %303;
    i1 %305 = icmp eq i32 %265, i32 %304;
    i32 %306 = select i1 %305 ? i32 1 : i32 %300;
    i32* %307 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %304];
    i32 %308 = load i32* %307;
    ubr ^while.header3;
  ^while.header2:
    i1 %309 = icmp sgt i32 %298, i32 -1;
    cbr i1 %309(prob = 0.97), ^while.body15, ^if.then;
  ^while.header3:
    i32 %310 = phi [^entry3, i32 %298] [^b8, i32 %327];
    i32 %311 = phi [^entry3, i32 %308] [^b8, i32 %329];
    i1 %312 = icmp neq i32 %311, i32 -1;
    cbr i1 %312(prob = 0.97), ^while.body16, ^while.header1;
  ^if.then:
    call (i32) -> void @putint(i32 %300);
    call (i32) -> void @putch(i32 10);
    i32 %313 = add i32 %163, i32 -1;
    ubr ^while.header;
  ^while.body15:
    i32 %314 = phi [^while.header2, i32 0] [^while.body15, i32 %318];
    i32* %315 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %314];
    i32 %316 = load i32* %315;
    i32* %317 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %316];
    store i32* %317 with i32 0;
    i32 %318 = add i32 %314, i32 1;
    i1 %319 = icmp sge i32 %298, i32 %318;
    cbr i1 %319(prob = 0.97), ^while.body15, ^if.then;
  ^while.body16:
    i32* %320 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %311];
    i32 %321 = load i32* %320;
    i32* %322 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %321];
    i32 %323 = load i32* %322;
    i1 %324 = icmp eq i32 %323, i32 0;
    cbr i1 %324(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i32 %325 = add i32 %310, i32 1;
    i32* %326 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %325];
    store i32* %322 with i32 1;
    store i32* %326 with i32 %321;
    ubr ^b8;
  ^b8:
    i32 %327 = phi [^while.body16, i32 %310] [^entry4, i32 %325];
    i32* %328 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %311];
    i32 %329 = load i32* %328;
    ubr ^while.header3;
}
