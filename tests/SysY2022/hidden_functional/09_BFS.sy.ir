internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    [1005 * i32]* %4 = ptrcast [1005 * i32]* @que to [1005 * i32]*;
    i32* %5 = getelementptr &([1005 * i32]* %4)[i64 0][i64 1];
    [1005 * i32]* %6 = ptrcast [1005 * i32]* @inq to [1005 * i32]*;
    [1005 * i32]* %7 = ptrcast [1005 * i32]* @head to [1005 * i32]*;
    [5005 * i32]* %8 = ptrcast [5005 * i32]* @to to [5005 * i32]*;
    [5005 * i32]* %9 = ptrcast [5005 * i32]* @next to [5005 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %10 = call () -> i32 @getch();
    i1 %11 = icmp slt i32 %10, i32 48;
    i1 %12 = icmp sgt i32 %10, i32 57;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %14 = phi [^entry, i32 %0] [^while.body, i32 %10];
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %20 = call () -> i32 @getch();
    i1 %21 = icmp slt i32 %20, i32 48;
    i1 %22 = icmp sgt i32 %20, i32 57;
    i1 %23 = or i1 %21, i1 %22;
    cbr i1 %23(prob = 0.97), ^while.body2, ^while.header1;
  ^while.body2:
    i32 %24 = phi [^b, i32 %20] [^while.body2, i32 %26];
    i32 %25 = phi [^b, i32 0] [^while.body2, i32 %31];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = icmp slt i32 %26, i32 48;
    i1 %28 = icmp sgt i32 %26, i32 57;
    i1 %29 = or i1 %27, i1 %28;
    i1 %30 = icmp eq i32 %24, i32 45;
    i32 %31 = select i1 %30 ? i32 1 : i32 %25;
    cbr i1 %29(prob = 0.97), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %32 = phi [^b, i32 %20] [^while.body2, i32 %26];
    i32 %33 = phi [^b, i32 0] [^while.body2, i32 %31];
    i32 %34 = add i32 %32, i32 -48;
    i1 %35 = icmp ult i32 %34, i32 10;
    cbr i1 %35(prob = 0.97), ^while.body3, ^b1;
  ^b1:
    i32 %36 = phi [^while.header1, i32 0] [^while.body3, i32 %47];
    i1 %37 = icmp neq i32 %33, i32 0;
    i32 %38 = neg i32 %36;
    i32 %39 = select i1 %37 ? i32 %38 : i32 %36;
    ubr ^while.body4;
  ^while.body3:
    i32 %40 = phi [^while.header1, i32 %32] [^while.body3, i32 %42];
    i32 %41 = phi [^while.header1, i32 0] [^while.body3, i32 %47];
    i32 %42 = call () -> i32 @getch();
    i32 %43 = add i32 %42, i32 -48;
    i1 %44 = icmp ult i32 %43, i32 10;
    i32 %45 = mul i32 %41, i32 10;
    i32 %46 = add i32 %45, i32 -48;
    i32 %47 = add i32 %40, i32 %46;
    cbr i1 %44(prob = 0.97), ^while.body3, ^b1;
  ^while.body4:
    i32 %48 = phi [^b1, i32 0] [^while.body4, i32 %65];
    i32* %49 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %48];
    store i32* %49 with i32 -1;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    store i32* %50 with i32 -1;
    i32* %51 = getelementptr &(i32* %49)[i64 2];
    store i32* %51 with i32 -1;
    i32* %52 = getelementptr &(i32* %49)[i64 3];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %49)[i64 4];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %49)[i64 5];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %49)[i64 6];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %49)[i64 7];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %49)[i64 8];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %49)[i64 9];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %49)[i64 10];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %49)[i64 11];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %49)[i64 12];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %49)[i64 13];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %49)[i64 14];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %49)[i64 15];
    store i32* %64 with i32 -1;
    i32 %65 = add i32 %48, i32 16;
    i1 %66 = icmp slt i32 %65, i32 992;
    cbr i1 %66(prob = 0.98), ^while.body4, ^while.body5;
  ^while.body5:
    i32* %67 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %65];
    store i32* %67 with i32 -1;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    store i32* %68 with i32 -1;
    i32* %69 = getelementptr &(i32* %67)[i64 2];
    store i32* %69 with i32 -1;
    i32* %70 = getelementptr &(i32* %67)[i64 3];
    store i32* %70 with i32 -1;
    i32* %71 = getelementptr &(i32* %67)[i64 4];
    store i32* %71 with i32 -1;
    i32* %72 = getelementptr &(i32* %67)[i64 5];
    store i32* %72 with i32 -1;
    i32* %73 = getelementptr &(i32* %67)[i64 6];
    store i32* %73 with i32 -1;
    i32* %74 = getelementptr &(i32* %67)[i64 7];
    store i32* %74 with i32 -1;
    i32* %75 = getelementptr &(i32* %67)[i64 8];
    store i32* %75 with i32 -1;
    i32* %76 = getelementptr &(i32* %67)[i64 9];
    store i32* %76 with i32 -1;
    i32* %77 = getelementptr &(i32* %67)[i64 10];
    store i32* %77 with i32 -1;
    i32* %78 = getelementptr &(i32* %67)[i64 11];
    store i32* %78 with i32 -1;
    i32* %79 = getelementptr &(i32* %67)[i64 12];
    store i32* %79 with i32 -1;
    ubr ^while.header2;
  ^while.header2:
    i32 %80 = phi [^while.body5, i32 0] [^b7, i32 %202] [^if.then, i32 %80];
    i32 %81 = phi [^while.body5, i32 %39] [^b7, i32 %203] [^if.then, i32 %227];
    i1 %82 = icmp neq i32 %81, i32 0;
    cbr i1 %82(prob = 0.97), ^while.body6, ^b2;
  ^while.body6:
    i32 %83 = call () -> i32 @getch();
    i1 %84 = icmp neq i32 %83, i32 81;
    i1 %85 = icmp neq i32 %83, i32 85;
    i1 %86 = and i1 %84, i1 %85;
    cbr i1 %86(prob = 0.97), ^while.body6, ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i1 %87 = icmp eq i32 %83, i32 81;
    cbr i1 %87(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %88 = call () -> i32 @getch();
    i1 %89 = icmp slt i32 %88, i32 48;
    i1 %90 = icmp sgt i32 %88, i32 57;
    i1 %91 = or i1 %89, i1 %90;
    cbr i1 %91(prob = 0.97), ^while.body7, ^while.header3;
  ^entry2:
    i32 %92 = call () -> i32 @getch();
    i1 %93 = icmp slt i32 %92, i32 48;
    i1 %94 = icmp sgt i32 %92, i32 57;
    i1 %95 = or i1 %93, i1 %94;
    cbr i1 %95(prob = 0.97), ^while.body8, ^while.header4;
  ^while.body7:
    i32 %96 = phi [^entry1, i32 %88] [^while.body7, i32 %98];
    i32 %97 = phi [^entry1, i32 0] [^while.body7, i32 %103];
    i32 %98 = call () -> i32 @getch();
    i1 %99 = icmp slt i32 %98, i32 48;
    i1 %100 = icmp sgt i32 %98, i32 57;
    i1 %101 = or i1 %99, i1 %100;
    i1 %102 = icmp eq i32 %96, i32 45;
    i32 %103 = select i1 %102 ? i32 1 : i32 %97;
    cbr i1 %101(prob = 0.97), ^while.body7, ^while.header3;
  ^while.header3:
    i32 %104 = phi [^entry1, i32 %88] [^while.body7, i32 %98];
    i32 %105 = phi [^entry1, i32 0] [^while.body7, i32 %103];
    i32 %106 = add i32 %104, i32 -48;
    i1 %107 = icmp ult i32 %106, i32 10;
    cbr i1 %107(prob = 0.97), ^while.body9, ^b4;
  ^while.body8:
    i32 %108 = phi [^entry2, i32 %92] [^while.body8, i32 %110];
    i32 %109 = phi [^entry2, i32 0] [^while.body8, i32 %115];
    i32 %110 = call () -> i32 @getch();
    i1 %111 = icmp slt i32 %110, i32 48;
    i1 %112 = icmp sgt i32 %110, i32 57;
    i1 %113 = or i1 %111, i1 %112;
    i1 %114 = icmp eq i32 %108, i32 45;
    i32 %115 = select i1 %114 ? i32 1 : i32 %109;
    cbr i1 %113(prob = 0.97), ^while.body8, ^while.header4;
  ^while.header4:
    i32 %116 = phi [^entry2, i32 %92] [^while.body8, i32 %110];
    i32 %117 = phi [^entry2, i32 0] [^while.body8, i32 %115];
    i32 %118 = add i32 %116, i32 -48;
    i1 %119 = icmp ult i32 %118, i32 10;
    cbr i1 %119(prob = 0.97), ^while.body10, ^b5;
  ^while.body9:
    i32 %120 = phi [^while.header3, i32 %104] [^while.body9, i32 %122];
    i32 %121 = phi [^while.header3, i32 0] [^while.body9, i32 %127];
    i32 %122 = call () -> i32 @getch();
    i32 %123 = add i32 %122, i32 -48;
    i1 %124 = icmp ult i32 %123, i32 10;
    i32 %125 = mul i32 %121, i32 10;
    i32 %126 = add i32 %125, i32 -48;
    i32 %127 = add i32 %120, i32 %126;
    cbr i1 %124(prob = 0.97), ^while.body9, ^b4;
  ^b4:
    i32 %128 = phi [^while.header3, i32 0] [^while.body9, i32 %127];
    i32 %129 = call () -> i32 @getch();
    i1 %130 = icmp slt i32 %129, i32 48;
    i1 %131 = icmp sgt i32 %129, i32 57;
    i1 %132 = or i1 %130, i1 %131;
    i1 %133 = icmp neq i32 %105, i32 0;
    i32 %134 = neg i32 %128;
    i32 %135 = select i1 %133 ? i32 %134 : i32 %128;
    cbr i1 %132(prob = 0.97), ^while.body11, ^while.header5;
  ^while.body10:
    i32 %136 = phi [^while.header4, i32 %116] [^while.body10, i32 %138];
    i32 %137 = phi [^while.header4, i32 0] [^while.body10, i32 %143];
    i32 %138 = call () -> i32 @getch();
    i32 %139 = add i32 %138, i32 -48;
    i1 %140 = icmp ult i32 %139, i32 10;
    i32 %141 = mul i32 %137, i32 10;
    i32 %142 = add i32 %141, i32 -48;
    i32 %143 = add i32 %136, i32 %142;
    cbr i1 %140(prob = 0.97), ^while.body10, ^b5;
  ^b5:
    i32 %144 = phi [^while.header4, i32 0] [^while.body10, i32 %143];
    i32 %145 = call () -> i32 @getch();
    i1 %146 = icmp slt i32 %145, i32 48;
    i1 %147 = icmp sgt i32 %145, i32 57;
    i1 %148 = or i1 %146, i1 %147;
    i1 %149 = icmp neq i32 %117, i32 0;
    i32 %150 = neg i32 %144;
    i32 %151 = select i1 %149 ? i32 %150 : i32 %144;
    cbr i1 %148(prob = 0.97), ^while.body12, ^while.header6;
  ^while.body11:
    i32 %152 = phi [^b4, i32 %129] [^while.body11, i32 %154];
    i32 %153 = phi [^b4, i32 0] [^while.body11, i32 %159];
    i32 %154 = call () -> i32 @getch();
    i1 %155 = icmp slt i32 %154, i32 48;
    i1 %156 = icmp sgt i32 %154, i32 57;
    i1 %157 = or i1 %155, i1 %156;
    i1 %158 = icmp eq i32 %152, i32 45;
    i32 %159 = select i1 %158 ? i32 1 : i32 %153;
    cbr i1 %157(prob = 0.97), ^while.body11, ^while.header5;
  ^while.header5:
    i32 %160 = phi [^b4, i32 %129] [^while.body11, i32 %154];
    i32 %161 = phi [^b4, i32 0] [^while.body11, i32 %159];
    i32 %162 = add i32 %160, i32 -48;
    i1 %163 = icmp ult i32 %162, i32 10;
    cbr i1 %163(prob = 0.97), ^while.body13, ^b6;
  ^while.body12:
    i32 %164 = phi [^b5, i32 %145] [^while.body12, i32 %166];
    i32 %165 = phi [^b5, i32 0] [^while.body12, i32 %171];
    i32 %166 = call () -> i32 @getch();
    i1 %167 = icmp slt i32 %166, i32 48;
    i1 %168 = icmp sgt i32 %166, i32 57;
    i1 %169 = or i1 %167, i1 %168;
    i1 %170 = icmp eq i32 %164, i32 45;
    i32 %171 = select i1 %170 ? i32 1 : i32 %165;
    cbr i1 %169(prob = 0.97), ^while.body12, ^while.header6;
  ^while.header6:
    i32 %172 = phi [^b5, i32 %145] [^while.body12, i32 %166];
    i32 %173 = phi [^b5, i32 0] [^while.body12, i32 %171];
    i32 %174 = add i32 %172, i32 -48;
    i1 %175 = icmp ult i32 %174, i32 10;
    cbr i1 %175(prob = 0.97), ^while.body14, ^b7;
  ^b6:
    i32 %176 = phi [^while.header5, i32 0] [^while.body13, i32 %188];
    i1 %177 = icmp neq i32 %161, i32 0;
    i32 %178 = neg i32 %176;
    i32 %179 = select i1 %177 ? i32 %178 : i32 %176;
    i32* %180 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %135];
    store i32* %180 with i32 1;
    store i32* %5 with i32 %135;
    ubr ^while.header7;
  ^while.body13:
    i32 %181 = phi [^while.header5, i32 %160] [^while.body13, i32 %183];
    i32 %182 = phi [^while.header5, i32 0] [^while.body13, i32 %188];
    i32 %183 = call () -> i32 @getch();
    i32 %184 = add i32 %183, i32 -48;
    i1 %185 = icmp ult i32 %184, i32 10;
    i32 %186 = mul i32 %182, i32 10;
    i32 %187 = add i32 %186, i32 -48;
    i32 %188 = add i32 %181, i32 %187;
    cbr i1 %185(prob = 0.97), ^while.body13, ^b6;
  ^b7:
    i32 %189 = phi [^while.header6, i32 0] [^while.body14, i32 %211];
    i1 %190 = icmp neq i32 %173, i32 0;
    i32 %191 = neg i32 %189;
    i32 %192 = select i1 %190 ? i32 %191 : i32 %189;
    i32* %193 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %80];
    store i32* %193 with i32 %192;
    i32* %194 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %151];
    i32 %195 = load i32* %194;
    i32* %196 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %80];
    store i32* %196 with i32 %195;
    i32* %197 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %192];
    store i32* %194 with i32 %80;
    i32* %198 = getelementptr &(i32* %193)[i64 1];
    store i32* %198 with i32 %151;
    i32 %199 = load i32* %197;
    i32* %200 = getelementptr &(i32* %196)[i64 1];
    store i32* %200 with i32 %199;
    i32 %201 = add i32 %80, i32 1;
    store i32* %197 with i32 %201;
    i32 %202 = add i32 %80, i32 2;
    i32 %203 = add i32 %81, i32 -1;
    ubr ^while.header2;
  ^while.body14:
    i32 %204 = phi [^while.header6, i32 %172] [^while.body14, i32 %206];
    i32 %205 = phi [^while.header6, i32 0] [^while.body14, i32 %211];
    i32 %206 = call () -> i32 @getch();
    i32 %207 = add i32 %206, i32 -48;
    i1 %208 = icmp ult i32 %207, i32 10;
    i32 %209 = mul i32 %205, i32 10;
    i32 %210 = add i32 %209, i32 -48;
    i32 %211 = add i32 %204, i32 %210;
    cbr i1 %208(prob = 0.97), ^while.body14, ^b7;
  ^while.header7:
    i32 %212 = phi [^b6, i32 1] [^while.header9, i32 %224];
    i32 %213 = phi [^b6, i32 0] [^while.header9, i32 %216];
    i32 %214 = phi [^b6, i32 0] [^while.header9, i32 %220];
    i1 %215 = icmp sgt i32 %212, i32 %213;
    cbr i1 %215(prob = 0.97), ^entry3, ^while.header8;
  ^entry3:
    i32 %216 = add i32 %213, i32 1;
    i32* %217 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i1 %219 = icmp eq i32 %179, i32 %218;
    i32 %220 = select i1 %219 ? i32 1 : i32 %214;
    i32* %221 = getelementptr &([1005 * i32]* %7)[i64 0][i32 %218];
    i32 %222 = load i32* %221;
    ubr ^while.header9;
  ^while.header8:
    i1 %223 = icmp sgt i32 %212, i32 -1;
    cbr i1 %223(prob = 0.97), ^while.body15, ^if.then;
  ^while.header9:
    i32 %224 = phi [^entry3, i32 %212] [^b8, i32 %241];
    i32 %225 = phi [^entry3, i32 %222] [^b8, i32 %243];
    i1 %226 = icmp neq i32 %225, i32 -1;
    cbr i1 %226(prob = 0.97), ^while.body16, ^while.header7;
  ^if.then:
    call (i32) -> void @putint(i32 %214);
    call (i32) -> void @putch(i32 10);
    i32 %227 = add i32 %81, i32 -1;
    ubr ^while.header2;
  ^while.body15:
    i32 %228 = phi [^while.header8, i32 0] [^while.body15, i32 %232];
    i32* %229 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %228];
    i32 %230 = load i32* %229;
    i32* %231 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %230];
    store i32* %231 with i32 0;
    i32 %232 = add i32 %228, i32 1;
    i1 %233 = icmp sge i32 %212, i32 %232;
    cbr i1 %233(prob = 0.97), ^while.body15, ^if.then;
  ^while.body16:
    i32* %234 = getelementptr &([5005 * i32]* %8)[i64 0][i32 %225];
    i32 %235 = load i32* %234;
    i32* %236 = getelementptr &([1005 * i32]* %6)[i64 0][i32 %235];
    i32 %237 = load i32* %236;
    i1 %238 = icmp eq i32 %237, i32 0;
    cbr i1 %238(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i32 %239 = add i32 %224, i32 1;
    i32* %240 = getelementptr &([1005 * i32]* %4)[i64 0][i32 %239];
    store i32* %236 with i32 1;
    store i32* %240 with i32 %235;
    ubr ^b8;
  ^b8:
    i32 %241 = phi [^while.body16, i32 %224] [^entry4, i32 %239];
    i32* %242 = getelementptr &([5005 * i32]* %9)[i64 0][i32 %225];
    i32 %243 = load i32* %242;
    ubr ^while.header9;
}
