internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal [1005 * i32]* @que;
internal [1005 * i32]* @inq;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i32* %1 = getelementptr &([1005 * i32]* @que)[i64 0][i64 1];
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %6 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %7 = phi [^b1, i32 %2] [^while.body1, i32 %11];
    i1 %8 = scmp gt i32 %7, i32 47;
    cbr i1 %8(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %9 = scmp le i32 %7, i32 57;
    ubr ^b3;
^b3:
    i1 %10 = phi [^while.header1, i1 false] [^b2, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i32 %12 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header2:
    i32 %13 = phi [^b4, i32 0] [^while.body2, i32 %19];
    i32 %14 = phi [^b4, i32 %12] [^while.body2, i32 %20];
    i1 %15 = scmp lt i32 %14, i32 48;
    cbr i1 %15(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %16 = scmp gt i32 %14, i32 57;
    ubr ^b6;
^b6:
    i1 %17 = phi [^while.header2, i1 true] [^b5, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i1 %18 = scmp eq i32 %14, i32 45;
    i32 %19 = select i1 %18 ? i32 1 : i32 %13;
    i32 %20 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header3:
    i32 %21 = phi [^b6, i32 0] [^while.body3, i32 %28];
    i32 %22 = phi [^b6, i32 %14] [^while.body3, i32 %29];
    i1 %23 = scmp gt i32 %22, i32 47;
    cbr i1 %23(prob = 0.5), ^b7, ^b8;
^b7:
    i1 %24 = scmp le i32 %22, i32 57;
    ubr ^b8;
^b8:
    i1 %25 = phi [^while.header3, i1 false] [^b7, i1 %24];
    cbr i1 %25(prob = 0.97), ^while.body3, ^b9;
^while.body3:
    i32 %26 = mul i32 %21, i32 10;
    i32 %27 = add i32 %22, i32 -48;
    i32 %28 = add i32 %27, i32 %26;
    i32 %29 = call () -> i32 @getch();
    ubr ^while.header3;
^b9:
    i1 %30 = scmp neq i32 %13, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then, ^b10;
^if.then:
    i32 %31 = neg i32 %21;
    ubr ^b10;
^b10:
    i32 %32 = phi [^b9, i32 %21] [^if.then, i32 %31];
    ubr ^while.body4;
^while.body4:
    i32 %33 = phi [^b10, i32 0] [^while.body4, i32 %50];
    i32* %34 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %33];
    store i32* %34 with i32 -1;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 -1;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 -1;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 -1;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 -1;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 -1;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 -1;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 -1;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 -1;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 -1;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 -1;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 -1;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 -1;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 -1;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 -1;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 -1;
    i32 %50 = add i32 %33, i32 16;
    i1 %51 = scmp lt i32 %50, i32 992;
    cbr i1 %51(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i32* %52 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %50];
    store i32* %52 with i32 -1;
    i32* %53 = getelementptr &(i32* %52)[i64 1];
    store i32* %53 with i32 -1;
    i32* %54 = getelementptr &(i32* %52)[i64 2];
    store i32* %54 with i32 -1;
    i32* %55 = getelementptr &(i32* %52)[i64 3];
    store i32* %55 with i32 -1;
    i32* %56 = getelementptr &(i32* %52)[i64 4];
    store i32* %56 with i32 -1;
    i32* %57 = getelementptr &(i32* %52)[i64 5];
    store i32* %57 with i32 -1;
    i32* %58 = getelementptr &(i32* %52)[i64 6];
    store i32* %58 with i32 -1;
    i32* %59 = getelementptr &(i32* %52)[i64 7];
    store i32* %59 with i32 -1;
    i32* %60 = getelementptr &(i32* %52)[i64 8];
    store i32* %60 with i32 -1;
    i32* %61 = getelementptr &(i32* %52)[i64 9];
    store i32* %61 with i32 -1;
    i32* %62 = getelementptr &(i32* %52)[i64 10];
    store i32* %62 with i32 -1;
    i32* %63 = getelementptr &(i32* %52)[i64 11];
    store i32* %63 with i32 -1;
    i32* %64 = getelementptr &(i32* %52)[i64 12];
    store i32* %64 with i32 -1;
    ubr ^while.header4;
^while.header4:
    i32 %65 = phi [^while.body5, i32 %32] [^b39, i32 %169];
    i32 %66 = phi [^while.body5, i32 0] [^b39, i32 %168];
    i1 %67 = scmp neq i32 %65, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b11;
^while.body6:
    i32 %68 = call () -> i32 @getch();
    i1 %69 = scmp neq i32 %68, i32 81;
    cbr i1 %69(prob = 0.5), ^b12, ^b13;
^b11:
    ret i32 0;
^b12:
    i1 %70 = scmp neq i32 %68, i32 85;
    ubr ^b13;
^b13:
    i1 %71 = phi [^while.body6, i1 false] [^b12, i1 %70];
    cbr i1 %71(prob = 0.97), ^while.body6, ^b14;
^b14:
    i1 %72 = scmp eq i32 %68, i32 81;
    cbr i1 %72(prob = 0.5), ^entry1, ^entry2;
^entry1:
    i32 %73 = call () -> i32 @getch();
    ubr ^while.header5;
^entry2:
    i32 %74 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header5:
    i32 %75 = phi [^entry1, i32 0] [^while.body7, i32 %86];
    i32 %76 = phi [^entry1, i32 %73] [^while.body7, i32 %87];
    i1 %77 = scmp lt i32 %76, i32 48;
    cbr i1 %77(prob = 0.5), ^b16, ^b15;
^while.header6:
    i32 %78 = phi [^entry2, i32 0] [^while.body8, i32 %89];
    i32 %79 = phi [^entry2, i32 %74] [^while.body8, i32 %90];
    i1 %80 = scmp lt i32 %79, i32 48;
    cbr i1 %80(prob = 0.5), ^b18, ^b17;
^b15:
    i1 %81 = scmp gt i32 %76, i32 57;
    ubr ^b16;
^b16:
    i1 %82 = phi [^while.header5, i1 true] [^b15, i1 %81];
    cbr i1 %82(prob = 0.97), ^while.body7, ^while.header7;
^b17:
    i1 %83 = scmp gt i32 %79, i32 57;
    ubr ^b18;
^b18:
    i1 %84 = phi [^while.header6, i1 true] [^b17, i1 %83];
    cbr i1 %84(prob = 0.97), ^while.body8, ^while.header8;
^while.body7:
    i1 %85 = scmp eq i32 %76, i32 45;
    i32 %86 = select i1 %85 ? i32 1 : i32 %75;
    i32 %87 = call () -> i32 @getch();
    ubr ^while.header5;
^while.body8:
    i1 %88 = scmp eq i32 %79, i32 45;
    i32 %89 = select i1 %88 ? i32 1 : i32 %78;
    i32 %90 = call () -> i32 @getch();
    ubr ^while.header6;
^while.header7:
    i32 %91 = phi [^b16, i32 0] [^while.body9, i32 %103];
    i32 %92 = phi [^b16, i32 %76] [^while.body9, i32 %104];
    i1 %93 = scmp gt i32 %92, i32 47;
    cbr i1 %93(prob = 0.5), ^b19, ^b21;
^while.header8:
    i32 %94 = phi [^b18, i32 0] [^while.body10, i32 %107];
    i32 %95 = phi [^b18, i32 %79] [^while.body10, i32 %108];
    i1 %96 = scmp gt i32 %95, i32 47;
    cbr i1 %96(prob = 0.5), ^b20, ^b22;
^b19:
    i1 %97 = scmp le i32 %92, i32 57;
    ubr ^b21;
^b20:
    i1 %98 = scmp le i32 %95, i32 57;
    ubr ^b22;
^b21:
    i1 %99 = phi [^while.header7, i1 false] [^b19, i1 %97];
    cbr i1 %99(prob = 0.97), ^while.body9, ^b23;
^b22:
    i1 %100 = phi [^while.header8, i1 false] [^b20, i1 %98];
    cbr i1 %100(prob = 0.97), ^while.body10, ^b24;
^while.body9:
    i32 %101 = mul i32 %91, i32 10;
    i32 %102 = add i32 %92, i32 -48;
    i32 %103 = add i32 %102, i32 %101;
    i32 %104 = call () -> i32 @getch();
    ubr ^while.header7;
^while.body10:
    i32 %105 = mul i32 %94, i32 10;
    i32 %106 = add i32 %95, i32 -48;
    i32 %107 = add i32 %106, i32 %105;
    i32 %108 = call () -> i32 @getch();
    ubr ^while.header8;
^b23:
    i1 %109 = scmp neq i32 %75, i32 0;
    cbr i1 %109(prob = 0.5), ^if.then1, ^b25;
^b24:
    i1 %110 = scmp neq i32 %78, i32 0;
    cbr i1 %110(prob = 0.5), ^if.then2, ^b26;
^if.then1:
    i32 %111 = neg i32 %91;
    ubr ^b25;
^b25:
    i32 %112 = phi [^b23, i32 %91] [^if.then1, i32 %111];
    i32 %113 = call () -> i32 @getch();
    ubr ^while.header9;
^if.then2:
    i32 %114 = neg i32 %94;
    ubr ^b26;
^b26:
    i32 %115 = phi [^b24, i32 %94] [^if.then2, i32 %114];
    i32 %116 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header9:
    i32 %117 = phi [^b25, i32 0] [^while.body11, i32 %128];
    i32 %118 = phi [^b25, i32 %113] [^while.body11, i32 %129];
    i1 %119 = scmp lt i32 %118, i32 48;
    cbr i1 %119(prob = 0.5), ^b28, ^b27;
^while.header10:
    i32 %120 = phi [^b26, i32 0] [^while.body12, i32 %131];
    i32 %121 = phi [^b26, i32 %116] [^while.body12, i32 %132];
    i1 %122 = scmp lt i32 %121, i32 48;
    cbr i1 %122(prob = 0.5), ^b30, ^b29;
^b27:
    i1 %123 = scmp gt i32 %118, i32 57;
    ubr ^b28;
^b28:
    i1 %124 = phi [^while.header9, i1 true] [^b27, i1 %123];
    cbr i1 %124(prob = 0.97), ^while.body11, ^while.header11;
^b29:
    i1 %125 = scmp gt i32 %121, i32 57;
    ubr ^b30;
^b30:
    i1 %126 = phi [^while.header10, i1 true] [^b29, i1 %125];
    cbr i1 %126(prob = 0.97), ^while.body12, ^while.header12;
^while.body11:
    i1 %127 = scmp eq i32 %118, i32 45;
    i32 %128 = select i1 %127 ? i32 1 : i32 %117;
    i32 %129 = call () -> i32 @getch();
    ubr ^while.header9;
^while.body12:
    i1 %130 = scmp eq i32 %121, i32 45;
    i32 %131 = select i1 %130 ? i32 1 : i32 %120;
    i32 %132 = call () -> i32 @getch();
    ubr ^while.header10;
^while.header11:
    i32 %133 = phi [^b28, i32 0] [^while.body13, i32 %145];
    i32 %134 = phi [^b28, i32 %118] [^while.body13, i32 %146];
    i1 %135 = scmp gt i32 %134, i32 47;
    cbr i1 %135(prob = 0.5), ^b31, ^b33;
^while.header12:
    i32 %136 = phi [^b30, i32 0] [^while.body14, i32 %149];
    i32 %137 = phi [^b30, i32 %121] [^while.body14, i32 %150];
    i1 %138 = scmp gt i32 %137, i32 47;
    cbr i1 %138(prob = 0.5), ^b32, ^b34;
^b31:
    i1 %139 = scmp le i32 %134, i32 57;
    ubr ^b33;
^b32:
    i1 %140 = scmp le i32 %137, i32 57;
    ubr ^b34;
^b33:
    i1 %141 = phi [^while.header11, i1 false] [^b31, i1 %139];
    cbr i1 %141(prob = 0.97), ^while.body13, ^b35;
^b34:
    i1 %142 = phi [^while.header12, i1 false] [^b32, i1 %140];
    cbr i1 %142(prob = 0.97), ^while.body14, ^b36;
^while.body13:
    i32 %143 = mul i32 %133, i32 10;
    i32 %144 = add i32 %134, i32 -48;
    i32 %145 = add i32 %144, i32 %143;
    i32 %146 = call () -> i32 @getch();
    ubr ^while.header11;
^while.body14:
    i32 %147 = mul i32 %136, i32 10;
    i32 %148 = add i32 %137, i32 -48;
    i32 %149 = add i32 %148, i32 %147;
    i32 %150 = call () -> i32 @getch();
    ubr ^while.header12;
^b35:
    i1 %151 = scmp neq i32 %117, i32 0;
    cbr i1 %151(prob = 0.5), ^if.then3, ^b37;
^b36:
    i1 %152 = scmp neq i32 %120, i32 0;
    cbr i1 %152(prob = 0.5), ^if.then4, ^b38;
^if.then3:
    i32 %153 = neg i32 %133;
    ubr ^b37;
^b37:
    i32 %154 = phi [^b35, i32 %133] [^if.then3, i32 %153];
    i32* %155 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %112];
    store i32* %155 with i32 1;
    store i32* %1 with i32 %112;
    ubr ^while.header13;
^if.then4:
    i32 %156 = neg i32 %136;
    ubr ^b38;
^b38:
    i32 %157 = phi [^b36, i32 %136] [^if.then4, i32 %156];
    i32* %158 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %66];
    store i32* %158 with i32 %157;
    i32* %159 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %66];
    i32* %160 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %115];
    i32 %161 = load i32* %160;
    store i32* %159 with i32 %161;
    store i32* %160 with i32 %66;
    i32 %162 = add i32 %66, i32 1;
    i32* %163 = getelementptr &(i32* %158)[i64 1];
    store i32* %163 with i32 %115;
    i32* %164 = getelementptr &(i32* %159)[i64 1];
    i32* %165 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %157];
    i32 %166 = load i32* %165;
    store i32* %164 with i32 %166;
    store i32* %165 with i32 %162;
    i32 %167 = add i32 %66, i32 2;
    ubr ^b39;
^b39:
    i32 %168 = phi [^b38, i32 %167] [^if.then5, i32 %66];
    i32 %169 = add i32 %65, i32 -1;
    ubr ^while.header4;
^while.header13:
    i32 %170 = phi [^b37, i32 1] [^while.header14, i32 %182];
    i32 %171 = phi [^b37, i32 0] [^while.header14, i32 %174];
    i32 %172 = phi [^b37, i32 0] [^while.header14, i32 %178];
    i1 %173 = scmp lt i32 %171, i32 %170;
    cbr i1 %173(prob = 0.97), ^entry3, ^b40;
^entry3:
    i32 %174 = add i32 %171, i32 1;
    i32* %175 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = scmp eq i32 %176, i32 %154;
    i32 %178 = select i1 %177 ? i32 1 : i32 %172;
    i32* %179 = getelementptr &([1005 * i32]* @head)[i64 0][i32 %176];
    i32 %180 = load i32* %179;
    ubr ^while.header14;
^b40:
    i1 %181 = scmp gt i32 %170, i32 -1;
    cbr i1 %181(prob = 0.97), ^while.body15, ^if.then5;
^while.header14:
    i32 %182 = phi [^entry3, i32 %170] [^b41, i32 %198];
    i32 %183 = phi [^entry3, i32 %180] [^b41, i32 %200];
    i1 %184 = scmp neq i32 %183, i32 -1;
    cbr i1 %184(prob = 0.97), ^while.body16, ^while.header13;
^if.then5:
    call (i32) -> void @putint(i32 %172);
    call (i32) -> void @putch(i32 10);
    ubr ^b39;
^while.body15:
    i32 %185 = phi [^b40, i32 0] [^while.body15, i32 %189];
    i32* %186 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %185];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %187];
    store i32* %188 with i32 0;
    i32 %189 = add i32 %185, i32 1;
    i1 %190 = scmp le i32 %189, i32 %170;
    cbr i1 %190(prob = 0.97), ^while.body15, ^if.then5;
^while.body16:
    i32* %191 = getelementptr &([5005 * i32]* @to)[i64 0][i32 %183];
    i32 %192 = load i32* %191;
    i32* %193 = getelementptr &([1005 * i32]* @inq)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i1 %195 = scmp eq i32 %194, i32 0;
    cbr i1 %195(prob = 0.5), ^entry4, ^b41;
^entry4:
    store i32* %193 with i32 1;
    i32 %196 = add i32 %182, i32 1;
    i32* %197 = getelementptr &([1005 * i32]* @que)[i64 0][i32 %196];
    store i32* %197 with i32 %192;
    ubr ^b41;
^b41:
    i32 %198 = phi [^while.body16, i32 %182] [^entry4, i32 %196];
    i32* %199 = getelementptr &([5005 * i32]* @next)[i64 0][i32 %183];
    i32 %200 = load i32* %199;
    ubr ^while.header14;
}
