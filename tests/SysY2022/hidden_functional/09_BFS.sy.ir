internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @quick_read() -> i32 {
^entry:
    i32* %f = alloc i32;
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    store i32* %x with i32 0;
    store i32* %f with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %ch;
    i1 %2 = scmp lt i32 %1, i32 48;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i32 %5 = load i32* %ch;
    i1 %6 = scmp gt i32 %5, i32 57;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    ubr ^b1;
^b1:
    i1 %9 = phi [^b, i1 %8] [^while.header, i1 true];
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b2;
^b2:
    ubr ^while.header1;
^while.body:
    i32 %12 = load i32* %ch;
    i1 %13 = scmp eq i32 %12, i32 45;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^if.then:
    store i32* %f with i32 1;
    ubr ^b3;
^b3:
    i32 %16 = call () -> i32 @getch();
    store i32* %ch with i32 %16;
    ubr ^while.header;
^while.header1:
    i32 %17 = load i32* %ch;
    i1 %18 = scmp ge i32 %17, i32 48;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^b4, ^b5;
^b4:
    i32 %21 = load i32* %ch;
    i1 %22 = scmp le i32 %21, i32 57;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b5;
^b5:
    i1 %25 = phi [^b4, i1 %24] [^while.header1, i1 false];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b6;
^while.body1:
    i32 %28 = load i32* %x;
    i32 %29 = mul i32 %28, i32 10;
    i32 %30 = load i32* %ch;
    i32 %31 = add i32 %29, i32 %30;
    i32 %32 = sub i32 %31, i32 48;
    store i32* %x with i32 %32;
    i32 %33 = call () -> i32 @getch();
    store i32* %ch with i32 %33;
    ubr ^while.header1;
^b6:
    i32 %34 = load i32* %f;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %36 = load i32* %x;
    i32 %37 = neg i32 %36;
    ret i32 %37;
^if.else:
    i32 %38 = load i32* %x;
    ret i32 %38;
^b7:
    unreachable;
}
internal i32* @n;
internal i32* @m;
internal i32* @maxn { ReadOnly } = 1005;
internal i32* @maxm { ReadOnly } = 5005;
internal [5005 * i32]* @to;
internal [5005 * i32]* @next;
internal [1005 * i32]* @head;
internal i32* @cnt = 0;
internal [1005 * i32]* @que;
internal i32* @h;
internal i32* @tail;
internal [1005 * i32]* @inq;
internal func @add_edge(i32 %from, i32 %To) -> void {
^entry:
    i32* %To1 = alloc i32;
    i32* %from1 = alloc i32;
    store i32* %from1 with i32 %from;
    store i32* %To1 with i32 %To;
    i32 %0 = load i32* @cnt;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([5005 * i32]* @to)[i64 0][i64 %1];
    i32 %3 = load i32* %To1;
    store i32* %2 with i32 %3;
    i32 %4 = load i32* @cnt;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([5005 * i32]* @next)[i64 0][i64 %5];
    i32 %7 = load i32* %from1;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %8];
    i32 %10 = load i32* %9;
    store i32* %6 with i32 %10;
    i32 %11 = load i32* %from1;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %12];
    i32 %14 = load i32* @cnt;
    store i32* %13 with i32 %14;
    i32 %15 = load i32* @cnt;
    i32 %16 = add i32 %15, i32 1;
    store i32* @cnt with i32 %16;
    i32 %17 = load i32* @cnt;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([5005 * i32]* @to)[i64 0][i64 %18];
    i32 %20 = load i32* %from1;
    store i32* %19 with i32 %20;
    i32 %21 = load i32* @cnt;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = getelementptr &([5005 * i32]* @next)[i64 0][i64 %22];
    i32 %24 = load i32* %To1;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %25];
    i32 %27 = load i32* %26;
    store i32* %23 with i32 %27;
    i32 %28 = load i32* %To1;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %29];
    i32 %31 = load i32* @cnt;
    store i32* %30 with i32 %31;
    i32 %32 = load i32* @cnt;
    i32 %33 = add i32 %32, i32 1;
    store i32* @cnt with i32 %33;
    ret;
}
internal func @init() -> void {
^entry:
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 1005;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %5];
    store i32* %6 with i32 -1;
    i32 %7 = load i32* %i;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i with i32 %8;
    ubr ^while.header;
^b:
    ret;
}
internal func @inqueue(i32 %x) -> void {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([1005 * i32]* @inq)[i64 0][i64 %1];
    store i32* %2 with i32 1;
    i32 %3 = load i32* @tail;
    i32 %4 = add i32 %3, i32 1;
    store i32* @tail with i32 %4;
    i32 %5 = load i32* @tail;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([1005 * i32]* @que)[i64 0][i64 %6];
    i32 %8 = load i32* %x1;
    store i32* %7 with i32 %8;
    ret;
}
internal func @pop_queue() -> i32 {
^entry:
    i32* %res = alloc i32;
    i32 %0 = load i32* @h;
    i32 %1 = add i32 %0, i32 1;
    store i32* @h with i32 %1;
    i32 %2 = load i32* @h;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = getelementptr &([1005 * i32]* @que)[i64 0][i64 %3];
    i32 %5 = load i32* %4;
    store i32* %res with i32 %5;
    i32 %6 = load i32* @h;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = getelementptr &([1005 * i32]* @que)[i64 0][i64 %7];
    i32 %9 = load i32* %8;
    ret i32 %9;
}
internal func @same(i32 %s, i32 %t) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    i32* %x = alloc i32;
    i32* %res = alloc i32;
    i32* %t1 = alloc i32;
    i32* %s1 = alloc i32;
    store i32* %s1 with i32 %s;
    store i32* %t1 with i32 %t;
    store i32* @h with i32 0;
    store i32* @tail with i32 0;
    i32 %0 = load i32* %s1;
    call (i32) -> void @inqueue(i32 %0);
    store i32* %res with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* @h;
    i32 %2 = load i32* @tail;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %6 = call () -> i32 @pop_queue();
    store i32* %x with i32 %6;
    i32 %7 = load i32* %x;
    i32 %8 = load i32* %t1;
    i1 %9 = scmp eq i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then, ^b1;
^if.then:
    store i32* %res with i32 1;
    ubr ^b1;
^b1:
    i32 %12 = load i32* %x;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([1005 * i32]* @head)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    store i32* %i1 with i32 %15;
    ubr ^while.header2;
^while.header1:
    i32 %16 = load i32* %i;
    i32 %17 = load i32* @tail;
    i1 %18 = scmp le i32 %16, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %21 = load i32* %i;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = getelementptr &([1005 * i32]* @que)[i64 0][i64 %22];
    i32 %24 = load i32* %23;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([1005 * i32]* @inq)[i64 0][i64 %25];
    store i32* %26 with i32 0;
    i32 %27 = load i32* %i;
    i32 %28 = add i32 %27, i32 1;
    store i32* %i with i32 %28;
    ubr ^while.header1;
^while.header2:
    i32 %29 = load i32* %i1;
    i1 %30 = scmp neq i32 %29, i32 -1;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b3;
^b2:
    i32 %33 = load i32* %res;
    ret i32 %33;
^b3:
    ubr ^while.header;
^while.body2:
    i32 %34 = load i32* %i1;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([5005 * i32]* @to)[i64 0][i64 %35];
    i32 %37 = load i32* %36;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([1005 * i32]* @inq)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    i1 %41 = scmp neq i32 %40, i32 0;
    i1 %42 = xor i1 %41, i1 true;
    i32 %43 = zext i1 %42 to i32;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    i32 %45 = load i32* %i1;
    i64 %46 = sext i32 %45 to i64;
    i32* %47 = getelementptr &([5005 * i32]* @to)[i64 0][i64 %46];
    i32 %48 = load i32* %47;
    call (i32) -> void @inqueue(i32 %48);
    ubr ^b4;
^b4:
    i32 %49 = load i32* %i1;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([5005 * i32]* @next)[i64 0][i64 %50];
    i32 %52 = load i32* %51;
    store i32* %i1 with i32 %52;
    ubr ^while.header2;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @quick_read();
    store i32* @n with i32 %0;
    i32 %1 = call () -> i32 @quick_read();
    store i32* @m with i32 %1;
    call () -> void @init();
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* @m;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = call () -> i32 @getch();
    store i32* %ch with i32 %4;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %5 = load i32* %ch;
    i1 %6 = scmp neq i32 %5, i32 81;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %9 = load i32* %ch;
    i1 %10 = scmp neq i32 %9, i32 85;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    ubr ^b2;
^b2:
    i1 %13 = phi [^b1, i1 %12] [^while.header1, i1 false];
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %16 = call () -> i32 @getch();
    store i32* %ch with i32 %16;
    ubr ^while.header1;
^b3:
    i32 %17 = load i32* %ch;
    i1 %18 = scmp eq i32 %17, i32 81;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %21 = call () -> i32 @quick_read();
    store i32* %x1 with i32 %21;
    i32 %22 = call () -> i32 @quick_read();
    store i32* %y1 with i32 %22;
    i32 %23 = load i32* %x1;
    i32 %24 = load i32* %y1;
    i32 %25 = call (i32, i32) -> i32 @same(i32 %23, i32 %24);
    call (i32) -> void @putint(i32 %25);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^if.else:
    i32 %26 = call () -> i32 @quick_read();
    store i32* %x with i32 %26;
    i32 %27 = call () -> i32 @quick_read();
    store i32* %y with i32 %27;
    i32 %28 = load i32* %x;
    i32 %29 = load i32* %y;
    call (i32, i32) -> void @add_edge(i32 %28, i32 %29);
    ubr ^b4;
^b4:
    i32 %30 = load i32* @m;
    i32 %31 = sub i32 %30, i32 1;
    store i32* @m with i32 %31;
    ubr ^while.header;
}
