internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4) -> i32 {
  ^entry:
    i1 %5 = scmp gt i32 %n, i32 10;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
  ^b:
    [30 * [30 * i32]]* %6 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    ubr ^while.header;
  ^b1:
    i32 %7 = phi [^entry, i32 1073741824] [^b2, i32 %15] [^b6, i32 1];
    ret i32 %7;
  ^while.header:
    i32 %8 = phi [^b, i32 1073741824] [^if.then, i32 %8] [^if.then1, i32 %8] [^b11, i32 %55];
    i32 %9 = phi [^b, i32 0] [^if.then, i32 %37] [^if.then1, i32 %39] [^b11, i32 %56];
    [2 * i32]* %10 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %9];
    i32* %11 = getelementptr &([2 * i32]* %10)[i64 0][i64 0];
    i32* %12 = getelementptr &([2 * i32]* %10)[i64 0][i64 1];
    i1 %13 = scmp lt i32 %9, i32 4;
    cbr i1 %13(prob = 0.97), ^while.header1, ^b2;
  ^b2:
    i1 %14 = scmp gt i32 %8, i32 10;
    i32 %15 = select i1 %14 ? i32 1073741824 : i32 %8;
    ubr ^b1;
  ^while.header1:
    i32 %16 = phi [^while.header, i32 0] [^b4, i32 %31];
    i32 %17 = phi [^while.header, i32 %y] [^b4, i32 %30];
    i32 %18 = phi [^while.header, i32 %x] [^b4, i32 %28];
    [30 * i32]* %19 = getelementptr &([30 * [30 * i32]]* %6)[i64 0][i32 %18];
    i32* %20 = getelementptr &([30 * i32]* %19)[i64 0][i32 %17];
    i32 %21 = load i32* %20;
    i1 %22 = scmp neq i32 %21, i32 1;
    cbr i1 %22(prob = 0.97), ^while.body, ^b3;
  ^while.body:
    i32 %23 = load i32* %3;
    i1 %24 = scmp eq i32 %18, i32 %23;
    cbr i1 %24(prob = 0.5), ^b5, ^b4;
  ^b3:
    i32 %25 = load i32* %3;
    i1 %26 = scmp eq i32 %18, i32 %25;
    cbr i1 %26(prob = 0.5), ^b6, ^b7;
  ^b4:
    i32 %27 = load i32* %11;
    i32 %28 = add i32 %18, i32 %27;
    i32 %29 = load i32* %12;
    i32 %30 = add i32 %17, i32 %29;
    i32 %31 = add i32 %16, i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %32 = load i32* %4;
    i1 %33 = scmp eq i32 %17, i32 %32;
    cbr i1 %33(prob = 0.5), ^b3, ^b4;
  ^b6:
    i32 %34 = load i32* %4;
    i1 %35 = scmp eq i32 %17, i32 %34;
    cbr i1 %35(prob = 0.5), ^b1, ^b7;
  ^b7:
    i1 %36 = scmp lt i32 %16, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then, ^b8;
  ^if.then:
    i32 %37 = add i32 %9, i32 1;
    ubr ^while.header;
  ^b8:
    i1 %38 = scmp eq i32 %18, i32 0;
    cbr i1 %38(prob = 0.5), ^if.then1, ^b9;
  ^if.then1:
    i32 %39 = add i32 %9, i32 1;
    ubr ^while.header;
  ^b9:
    i32 %40 = load i32* %2;
    i32 %41 = add i32 %40, i32 1;
    i1 %42 = scmp eq i32 %18, i32 %41;
    i1 %43 = scmp eq i32 %17, i32 0;
    i1 %44 = or i1 %42, i1 %43;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b10;
  ^b10:
    i32 %45 = load i32* %1;
    i32 %46 = add i32 %45, i32 1;
    i1 %47 = scmp eq i32 %17, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then1, ^b11;
  ^b11:
    store i32* %20 with i32 0;
    i32 %48 = load i32* %11;
    i32 %49 = sub i32 %18, i32 %48;
    i32 %50 = load i32* %12;
    i32 %51 = sub i32 %17, i32 %50;
    i32 %52 = add i32 %n, i32 1;
    i32 %53 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %49, i32 %51, i32 %52, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4);
    i32 %54 = add i32 %53, i32 1;
    i32 %55 = smin i32 %54, i32 %8;
    store i32* %20 with i32 1;
    i32 %56 = add i32 %9, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    store i32* %x_1 with i32 0;
    store i32* %y_1 with i32 0;
    [30 * [30 * i32]]* %8 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    ubr ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^b2, i32 %48];
    i32 %10 = phi [^entry, i32 0] [^b2, i32 %49];
    i32 %11 = call () -> i32 @getint();
    store i32* %w with i32 %11;
    i32 %12 = call () -> i32 @getint();
    store i32* %h with i32 %12;
    i1 %13 = scmp neq i32 %11, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %14 = phi [^b, i32 0] [^while.body, i32 %46];
    [30 * i32]* %15 = getelementptr &([30 * [30 * i32]]* %8)[i64 0][i32 %14];
    i32* %16 = getelementptr &([30 * i32]* %15)[i64 0][i64 0];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([30 * i32]* %15)[i64 0][i64 1];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %15)[i64 0][i64 2];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %15)[i64 0][i64 3];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %15)[i64 0][i64 4];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %15)[i64 0][i64 5];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %15)[i64 0][i64 6];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %15)[i64 0][i64 7];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %15)[i64 0][i64 8];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %15)[i64 0][i64 9];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %15)[i64 0][i64 10];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %15)[i64 0][i64 11];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %15)[i64 0][i64 12];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %15)[i64 0][i64 13];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %15)[i64 0][i64 14];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %15)[i64 0][i64 15];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %15)[i64 0][i64 16];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %15)[i64 0][i64 17];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %15)[i64 0][i64 18];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %15)[i64 0][i64 19];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %15)[i64 0][i64 20];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %15)[i64 0][i64 21];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %15)[i64 0][i64 22];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %15)[i64 0][i64 23];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %15)[i64 0][i64 24];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %15)[i64 0][i64 25];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %15)[i64 0][i64 26];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %15)[i64 0][i64 27];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %15)[i64 0][i64 28];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &([30 * i32]* %15)[i64 0][i64 29];
    store i32* %45 with i32 1;
    i32 %46 = add i32 %14, i32 1;
    i1 %47 = scmp lt i32 %46, i32 30;
    cbr i1 %47(prob = 0.97), ^while.body, ^while.header;
  ^b1:
    ret i32 0;
  ^while.header:
    i32 %48 = phi [^while.body, i32 %9] [^b3, i32 %57];
    i32 %49 = phi [^while.body, i32 %10] [^b3, i32 %58];
    i32 %50 = phi [^while.body, i32 1] [^b3, i32 %62];
    i32 %51 = load i32* %h;
    i1 %52 = scmp le i32 %50, i32 %51;
    [30 * i32]* %53 = getelementptr &([30 * [30 * i32]]* %8)[i64 0][i32 %50];
    cbr i1 %52(prob = 0.97), ^while.header1, ^b2;
  ^b2:
    i32 %54 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %49, i32 %48, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_1, i32* %y_1);
    i1 %55 = scmp lt i32 %54, i32 11;
    i32 %56 = select i1 %55 ? i32 %54 : i32 -1;
    call (i32) -> void @putint(i32 %56);
    call (i32) -> void @putch(i32 10);
    ubr ^b;
  ^while.header1:
    i32 %57 = phi [^while.header, i32 %48] [^b4, i32 %66];
    i32 %58 = phi [^while.header, i32 %49] [^b4, i32 %67];
    i32 %59 = phi [^while.header, i32 1] [^b4, i32 %68];
    i32 %60 = load i32* %w;
    i1 %61 = scmp le i32 %59, i32 %60;
    cbr i1 %61(prob = 0.97), ^while.body1, ^b3;
  ^b3:
    i32 %62 = add i32 %50, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %63 = call () -> i32 @getint();
    i32* %64 = getelementptr &([30 * i32]* %53)[i64 0][i32 %59];
    store i32* %64 with i32 %63;
    i1 %65 = scmp eq i32 %63, i32 2;
    cbr i1 %65(prob = 0.5), ^b4, ^if.else;
  ^b4:
    i32 %66 = phi [^while.body1, i32 %59] [^if.else, i32 %57] [^if.then, i32 %57];
    i32 %67 = phi [^while.body1, i32 %50] [^if.else, i32 %58] [^if.then, i32 %58];
    i32 %68 = add i32 %59, i32 1;
    ubr ^while.header1;
  ^if.else:
    i1 %69 = scmp eq i32 %63, i32 3;
    cbr i1 %69(prob = 0.5), ^if.then, ^b4;
  ^if.then:
    store i32* %x_1 with i32 %50;
    store i32* %y_1 with i32 %59;
    ubr ^b4;
}
