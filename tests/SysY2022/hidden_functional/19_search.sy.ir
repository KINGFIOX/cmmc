internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4) -> i32 {
^entry:
    i1 %5 = scmp gt i32 %n, i32 10;
    [30 * i32]* %6 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %x];
    i32* %7 = getelementptr &([30 * i32]* %6)[i64 0][i32 %y];
    cbr i1 %5(prob = 0.5), ^b, ^while.guard;
^while.guard:
    i32 %8 = phi [^entry, i32 1073741824] [^if.then, i32 %12] [^if.then1, i32 %12];
    i32 %9 = phi [^entry, i32 0] [^if.then, i32 %51] [^if.then1, i32 %57];
    i1 %10 = scmp lt i32 %9, i32 4;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
^b:
    i32 %11 = phi [^entry, i32 1073741824] [^b1, i32 1073741824] [^b2, i32 %19] [^b3, i32 1];
    ret i32 %11;
^while.body:
    i32 %12 = phi [^while.guard, i32 %8] [^b8, i32 %73];
    i32 %13 = phi [^while.guard, i32 %9] [^b8, i32 %74];
    i32 %14 = load i32* %7;
    i1 %15 = scmp neq i32 %14, i32 1;
    [2 * i32]* %16 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %13];
    i32* %17 = getelementptr &([2 * i32]* %16)[i64 0][i64 0];
    i32* %18 = getelementptr &([2 * i32]* %16)[i64 0][i64 1];
    cbr i1 %15(prob = 0.97), ^while.body1, ^indirect;
^b1:
    i32 %19 = phi [^while.guard, i32 %8] [^b8, i32 %73];
    i1 %20 = scmp gt i32 %19, i32 10;
    cbr i1 %20(prob = 0.5), ^b, ^b2;
^indirect:
    i32 %21 = load i32* %3;
    i32 %22 = load i32* %4;
    ubr ^b3;
^while.body1:
    i32 %23 = phi [^while.body, i32 0] [^b4, i32 %43];
    i32 %24 = phi [^while.body, i32 %x] [^b4, i32 %40];
    i32 %25 = phi [^while.body, i32 %y] [^b4, i32 %42];
    i32 %26 = load i32* %3;
    i1 %27 = scmp eq i32 %24, i32 %26;
    i32 %28 = load i32* %4;
    i1 %29 = scmp eq i32 %25, i32 %28;
    i1 %30 = and i1 %29, i1 %27;
    cbr i1 %30(prob = 0.25), ^b3, ^b4;
^b2:
    ubr ^b;
^b3:
    i32 %31 = phi [^indirect, i32 %21] [^while.body1, i32 %26] [^indirect1, i32 %48];
    i32 %32 = phi [^indirect, i32 %22] [^while.body1, i32 %28] [^indirect1, i32 %49];
    i32 %33 = phi [^indirect, i32 %x] [^while.body1, i32 %24] [^indirect1, i32 %40];
    i32 %34 = phi [^indirect, i32 0] [^while.body1, i32 %23] [^indirect1, i32 %43];
    i32 %35 = phi [^indirect, i32 %y] [^while.body1, i32 %25] [^indirect1, i32 %42];
    i1 %36 = scmp eq i32 %33, i32 %31;
    i1 %37 = scmp eq i32 %35, i32 %32;
    i1 %38 = and i1 %37, i1 %36;
    cbr i1 %38(prob = 0.25), ^b, ^b5;
^b4:
    i32 %39 = load i32* %17;
    i32 %40 = add i32 %24, i32 %39;
    i32 %41 = load i32* %18;
    i32 %42 = add i32 %25, i32 %41;
    i32 %43 = add i32 %23, i32 1;
    [30 * i32]* %44 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %40];
    i32* %45 = getelementptr &([30 * i32]* %44)[i64 0][i32 %42];
    i32 %46 = load i32* %45;
    i1 %47 = scmp neq i32 %46, i32 1;
    cbr i1 %47(prob = 0.97), ^while.body1, ^indirect1;
^indirect1:
    i32 %48 = load i32* %3;
    i32 %49 = load i32* %4;
    ubr ^b3;
^b5:
    i1 %50 = scmp lt i32 %34, i32 2;
    cbr i1 %50(prob = 0.5), ^if.then, ^b6;
^if.then:
    i32 %51 = add i32 %13, i32 1;
    ubr ^while.guard;
^b6:
    i1 %52 = scmp eq i32 %33, i32 0;
    i32 %53 = load i32* %2;
    i32 %54 = add i32 %53, i32 1;
    i1 %55 = scmp eq i32 %33, i32 %54;
    i1 %56 = or i1 %55, i1 %52;
    cbr i1 %56(prob = 0.75), ^if.then1, ^b7;
^if.then1:
    i32 %57 = add i32 %13, i32 1;
    ubr ^while.guard;
^b7:
    i1 %58 = scmp eq i32 %35, i32 0;
    i32 %59 = load i32* %1;
    i32 %60 = add i32 %59, i32 1;
    i1 %61 = scmp eq i32 %35, i32 %60;
    i1 %62 = or i1 %61, i1 %58;
    cbr i1 %62(prob = 0.75), ^if.then1, ^b8;
^b8:
    [30 * i32]* %63 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %33];
    i32* %64 = getelementptr &([30 * i32]* %63)[i64 0][i32 %35];
    store i32* %64 with i32 0;
    i32 %65 = load i32* %17;
    i32 %66 = sub i32 %33, i32 %65;
    i32 %67 = load i32* %18;
    i32 %68 = sub i32 %35, i32 %67;
    i32 %69 = add i32 %n, i32 1;
    i32 %70 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %66, i32 %68, i32 %69, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4);
    i32 %71 = add i32 %70, i32 1;
    i1 %72 = scmp lt i32 %71, i32 %12;
    i32 %73 = select i1 %72 ? i32 %71 : i32 %12;
    store i32* %64 with i32 1;
    i32 %74 = add i32 %13, i32 1;
    i1 %75 = scmp lt i32 %74, i32 4;
    cbr i1 %75(prob = 0.97), ^while.body, ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    i1 %10 = scmp neq i32 %8, i32 0;
    cbr i1 %10(prob = 0.97), ^indirect, ^b;
^indirect:
    i32 %11 = phi [^entry, i32 undef] [^indirect, i32 %11] [^b2, i32 %55];
    i32 %12 = phi [^entry, i32 undef] [^indirect, i32 %12] [^b2, i32 %56];
    i32 %13 = phi [^entry, i32 0] [^indirect, i32 %45] [^b2, i32 0];
    [30 * i32]* %14 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %13];
    i32* %15 = getelementptr &([30 * i32]* %14)[i64 0][i64 0];
    store i32* %15 with i32 1;
    i32* %16 = getelementptr &([30 * i32]* %14)[i64 0][i64 1];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([30 * i32]* %14)[i64 0][i64 2];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %14)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %14)[i64 0][i64 4];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %14)[i64 0][i64 5];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %14)[i64 0][i64 6];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %14)[i64 0][i64 7];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %14)[i64 0][i64 8];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %14)[i64 0][i64 9];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %14)[i64 0][i64 10];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %14)[i64 0][i64 11];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %14)[i64 0][i64 12];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %14)[i64 0][i64 13];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %14)[i64 0][i64 14];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %14)[i64 0][i64 15];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %14)[i64 0][i64 16];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %14)[i64 0][i64 17];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %14)[i64 0][i64 18];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %14)[i64 0][i64 19];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %14)[i64 0][i64 20];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %14)[i64 0][i64 21];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %14)[i64 0][i64 22];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %14)[i64 0][i64 23];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %14)[i64 0][i64 24];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %14)[i64 0][i64 25];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %14)[i64 0][i64 26];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %14)[i64 0][i64 27];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %14)[i64 0][i64 28];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %14)[i64 0][i64 29];
    store i32* %44 with i32 1;
    i32 %45 = add i32 %13, i32 1;
    i1 %46 = scmp lt i32 %45, i32 30;
    cbr i1 %46(prob = 0.97), ^indirect, ^b1;
^b:
    ret i32 0;
^b1:
    i32 %47 = load i32* %h;
    i1 %48 = scmp gt i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %49 = phi [^b1, i32 %11] [^b3, i32 %69];
    i32 %50 = phi [^b1, i32 %12] [^b3, i32 %70];
    i32 %51 = phi [^b1, i32 1] [^b3, i32 %71];
    i32 %52 = load i32* %w;
    i1 %53 = scmp gt i32 %52, i32 0;
    [30 * i32]* %54 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %51];
    cbr i1 %53(prob = 0.97), ^while.body1, ^b3;
^b2:
    i32 %55 = phi [^b1, i32 %11] [^b3, i32 %69];
    i32 %56 = phi [^b1, i32 %12] [^b3, i32 %70];
    i32 %57 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %56, i32 %55, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_1, i32* %y_1);
    i1 %58 = scmp lt i32 %57, i32 11;
    i32 %59 = select i1 %58 ? i32 %57 : i32 -1;
    call (i32) -> void @putint(i32 %59);
    call (i32) -> void @putch(i32 10);
    i32 %60 = call () -> i32 @getint();
    store i32* %w with i32 %60;
    i32 %61 = call () -> i32 @getint();
    store i32* %h with i32 %61;
    i1 %62 = scmp neq i32 %60, i32 0;
    cbr i1 %62(prob = 0.97), ^indirect, ^b;
^while.body1:
    i32 %63 = phi [^while.body, i32 %49] [^b4, i32 %74];
    i32 %64 = phi [^while.body, i32 %50] [^b4, i32 %75];
    i32 %65 = phi [^while.body, i32 1] [^b4, i32 %76];
    i32* %66 = getelementptr &([30 * i32]* %54)[i64 0][i32 %65];
    i32 %67 = call () -> i32 @getint();
    store i32* %66 with i32 %67;
    i1 %68 = scmp eq i32 %67, i32 2;
    cbr i1 %68(prob = 0.5), ^b4, ^if.else;
^b3:
    i32 %69 = phi [^while.body, i32 %49] [^b4, i32 %74];
    i32 %70 = phi [^while.body, i32 %50] [^b4, i32 %75];
    i32 %71 = add i32 %51, i32 1;
    i32 %72 = load i32* %h;
    i1 %73 = scmp le i32 %71, i32 %72;
    cbr i1 %73(prob = 0.97), ^while.body, ^b2;
^b4:
    i32 %74 = phi [^while.body1, i32 %65] [^if.else, i32 %63] [^if.then, i32 %63];
    i32 %75 = phi [^while.body1, i32 %51] [^if.else, i32 %64] [^if.then, i32 %64];
    i32 %76 = add i32 %65, i32 1;
    i32 %77 = load i32* %w;
    i1 %78 = scmp le i32 %76, i32 %77;
    cbr i1 %78(prob = 0.97), ^while.body1, ^b3;
^if.else:
    i1 %79 = scmp eq i32 %67, i32 3;
    cbr i1 %79(prob = 0.5), ^if.then, ^b4;
^if.then:
    store i32* %x_1 with i32 %51;
    store i32* %y_1 with i32 %65;
    ubr ^b4;
}
