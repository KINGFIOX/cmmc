internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4) -> i32 {
^entry:
    i1 %5 = scmp gt i32 %n, i32 10;
    cbr i1 %5(prob = 0.5), ^b, ^while.header;
^while.header:
    i32 %6 = phi [^entry, i32 1073741824] [^if.then, i32 %6] [^if.then1, i32 %6] [^b8, i32 %59];
    i32 %7 = phi [^entry, i32 0] [^if.then, i32 %39] [^if.then1, i32 %45] [^b8, i32 %60];
    i1 %8 = scmp lt i32 %7, i32 4;
    [2 * i32]* %9 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %7];
    i32* %10 = getelementptr &([2 * i32]* %9)[i64 0][i64 0];
    i32* %11 = getelementptr &([2 * i32]* %9)[i64 0][i64 1];
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
^b:
    i32 %12 = phi [^entry, i32 1073741824] [^b1, i32 1073741824] [^b2, i32 %6] [^b4, i32 1];
    ret i32 %12;
^while.header1:
    i32 %13 = phi [^while.header, i32 0] [^b3, i32 %32];
    i32 %14 = phi [^while.header, i32 %y] [^b3, i32 %31];
    i32 %15 = phi [^while.header, i32 %x] [^b3, i32 %29];
    [30 * i32]* %16 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %15];
    i32* %17 = getelementptr &([30 * i32]* %16)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = scmp neq i32 %18, i32 1;
    cbr i1 %19(prob = 0.97), ^while.body, ^indirect;
^b1:
    i1 %20 = scmp gt i32 %6, i32 10;
    cbr i1 %20(prob = 0.5), ^b, ^b2;
^indirect:
    i32 %21 = load i32* %3;
    i32 %22 = load i32* %4;
    ubr ^b4;
^b2:
    ubr ^b;
^while.body:
    i32 %23 = load i32* %3;
    i1 %24 = scmp eq i32 %15, i32 %23;
    i32 %25 = load i32* %4;
    i1 %26 = scmp eq i32 %14, i32 %25;
    i1 %27 = and i1 %26, i1 %24;
    cbr i1 %27(prob = 0.25), ^b4, ^b3;
^b3:
    i32 %28 = load i32* %10;
    i32 %29 = add i32 %15, i32 %28;
    i32 %30 = load i32* %11;
    i32 %31 = add i32 %14, i32 %30;
    i32 %32 = add i32 %13, i32 1;
    ubr ^while.header1;
^b4:
    i32 %33 = phi [^indirect, i32 %21] [^while.body, i32 %23];
    i32 %34 = phi [^indirect, i32 %22] [^while.body, i32 %25];
    i1 %35 = scmp eq i32 %15, i32 %33;
    i1 %36 = scmp eq i32 %14, i32 %34;
    i1 %37 = and i1 %36, i1 %35;
    cbr i1 %37(prob = 0.25), ^b, ^b5;
^b5:
    i1 %38 = scmp lt i32 %13, i32 2;
    cbr i1 %38(prob = 0.5), ^if.then, ^b6;
^if.then:
    i32 %39 = add i32 %7, i32 1;
    ubr ^while.header;
^b6:
    i1 %40 = scmp eq i32 %15, i32 0;
    i32 %41 = load i32* %2;
    i32 %42 = add i32 %41, i32 1;
    i1 %43 = scmp eq i32 %15, i32 %42;
    i1 %44 = or i1 %43, i1 %40;
    cbr i1 %44(prob = 0.75), ^if.then1, ^b7;
^if.then1:
    i32 %45 = add i32 %7, i32 1;
    ubr ^while.header;
^b7:
    i1 %46 = scmp eq i32 %14, i32 0;
    i32 %47 = load i32* %1;
    i32 %48 = add i32 %47, i32 1;
    i1 %49 = scmp eq i32 %14, i32 %48;
    i1 %50 = or i1 %49, i1 %46;
    cbr i1 %50(prob = 0.75), ^if.then1, ^b8;
^b8:
    store i32* %17 with i32 0;
    i32 %51 = load i32* %10;
    i32 %52 = sub i32 %15, i32 %51;
    i32 %53 = load i32* %11;
    i32 %54 = sub i32 %14, i32 %53;
    i32 %55 = add i32 %n, i32 1;
    i32 %56 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %52, i32 %54, i32 %55, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4);
    i32 %57 = add i32 %56, i32 1;
    i1 %58 = scmp lt i32 %57, i32 %6;
    i32 %59 = select i1 %58 ? i32 %57 : i32 %6;
    store i32* %17 with i32 1;
    i32 %60 = add i32 %7, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    store i32* %x_1 with i32 0;
    store i32* %y_1 with i32 0;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %48];
    i32 %11 = phi [^entry, i32 0] [^b1, i32 %49];
    i32 %12 = phi [^entry, i32 %8] [^b1, i32 %57];
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %14 = phi [^while.header, i32 0] [^while.body, i32 %46];
    [30 * i32]* %15 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %14];
    i32* %16 = getelementptr &([30 * i32]* %15)[i64 0][i64 0];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([30 * i32]* %15)[i64 0][i64 1];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %15)[i64 0][i64 2];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %15)[i64 0][i64 3];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %15)[i64 0][i64 4];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %15)[i64 0][i64 5];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %15)[i64 0][i64 6];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %15)[i64 0][i64 7];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %15)[i64 0][i64 8];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %15)[i64 0][i64 9];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %15)[i64 0][i64 10];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %15)[i64 0][i64 11];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %15)[i64 0][i64 12];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %15)[i64 0][i64 13];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %15)[i64 0][i64 14];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %15)[i64 0][i64 15];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %15)[i64 0][i64 16];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %15)[i64 0][i64 17];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %15)[i64 0][i64 18];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %15)[i64 0][i64 19];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %15)[i64 0][i64 20];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %15)[i64 0][i64 21];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %15)[i64 0][i64 22];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %15)[i64 0][i64 23];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %15)[i64 0][i64 24];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %15)[i64 0][i64 25];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %15)[i64 0][i64 26];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %15)[i64 0][i64 27];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %15)[i64 0][i64 28];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &([30 * i32]* %15)[i64 0][i64 29];
    store i32* %45 with i32 1;
    i32 %46 = add i32 %14, i32 1;
    i1 %47 = scmp lt i32 %46, i32 30;
    cbr i1 %47(prob = 0.97), ^while.body, ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %48 = phi [^while.body, i32 %10] [^b2, i32 %59];
    i32 %49 = phi [^while.body, i32 %11] [^b2, i32 %60];
    i32 %50 = phi [^while.body, i32 1] [^b2, i32 %64];
    i32 %51 = load i32* %h;
    i1 %52 = scmp le i32 %50, i32 %51;
    [30 * i32]* %53 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %50];
    cbr i1 %52(prob = 0.97), ^while.header2, ^b1;
^b1:
    i32 %54 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %49, i32 %48, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_1, i32* %y_1);
    i1 %55 = scmp lt i32 %54, i32 11;
    i32 %56 = select i1 %55 ? i32 %54 : i32 -1;
    call (i32) -> void @putint(i32 %56);
    call (i32) -> void @putch(i32 10);
    i32 %57 = call () -> i32 @getint();
    store i32* %w with i32 %57;
    i32 %58 = call () -> i32 @getint();
    store i32* %h with i32 %58;
    ubr ^while.header;
^while.header2:
    i32 %59 = phi [^while.header1, i32 %48] [^b3, i32 %68];
    i32 %60 = phi [^while.header1, i32 %49] [^b3, i32 %69];
    i32 %61 = phi [^while.header1, i32 1] [^b3, i32 %70];
    i32 %62 = load i32* %w;
    i1 %63 = scmp le i32 %61, i32 %62;
    cbr i1 %63(prob = 0.97), ^while.body1, ^b2;
^b2:
    i32 %64 = add i32 %50, i32 1;
    ubr ^while.header1;
^while.body1:
    i32* %65 = getelementptr &([30 * i32]* %53)[i64 0][i32 %61];
    i32 %66 = call () -> i32 @getint();
    store i32* %65 with i32 %66;
    i1 %67 = scmp eq i32 %66, i32 2;
    cbr i1 %67(prob = 0.5), ^b3, ^if.else;
^b3:
    i32 %68 = phi [^while.body1, i32 %61] [^if.else, i32 %59] [^if.then, i32 %59];
    i32 %69 = phi [^while.body1, i32 %50] [^if.else, i32 %60] [^if.then, i32 %60];
    i32 %70 = add i32 %61, i32 1;
    ubr ^while.header2;
^if.else:
    i1 %71 = scmp eq i32 %66, i32 3;
    cbr i1 %71(prob = 0.5), ^if.then, ^b3;
^if.then:
    store i32* %x_1 with i32 %50;
    store i32* %y_1 with i32 %61;
    ubr ^b3;
}
