internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6) -> i32 {
^entry:
    i1 %7 = scmp gt i32 %n, i32 10;
    cbr i1 %7(prob = 0.5), ^if.then, ^while.header;
^while.header:
    i32 %8 = phi [^entry, i32 %x] [^b17, i32 %15] [^if.then3, i32 %15] [^if.then2, i32 %15];
    i32 %9 = phi [^entry, i32 %y] [^b17, i32 %16] [^if.then3, i32 %16] [^if.then2, i32 %16];
    i32 %10 = phi [^entry, i32 %n] [^b17, i32 %17] [^if.then3, i32 %17] [^if.then2, i32 %17];
    i32 %11 = phi [^entry, i32 1073741824] [^b17, i32 %75] [^if.then3, i32 %18] [^if.then2, i32 %18];
    i32 %12 = phi [^entry, i32 0] [^b17, i32 %76] [^if.then3, i32 %61] [^if.then2, i32 %49];
    i32 %13 = phi [^entry, i32 0] [^b17, i32 %76] [^if.then3, i32 %61] [^if.then2, i32 %49];
    i1 %14 = scmp lt i32 %13, i32 4;
    cbr i1 %14(prob = 0.97), ^while.header1, ^b;
^if.then:
    ret i32 1073741824;
^while.header1:
    i32 %15 = phi [^while.header, i32 %8] [^b7, i32 %15];
    i32 %16 = phi [^while.header, i32 %9] [^b7, i32 %16];
    i32 %17 = phi [^while.header, i32 %10] [^b7, i32 %17];
    i32 %18 = phi [^while.header, i32 %11] [^b7, i32 %18];
    i32 %19 = phi [^while.header, i32 %12] [^b7, i32 %19];
    i32 %20 = phi [^while.header, i32 0] [^b7, i32 %47];
    i32 %21 = phi [^while.header, i32 %8] [^b7, i32 %43];
    i32 %22 = phi [^while.header, i32 %9] [^b7, i32 %46];
    i32 %23 = phi [^while.header, i32 %9] [^b7, i32 %46];
    i32 %24 = phi [^while.header, i32 %8] [^b7, i32 %43];
    [30 * i32]* %25 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %24];
    i32* %26 = getelementptr &([30 * i32]* %25)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 1;
    cbr i1 %28(prob = 0.97), ^while.body, ^b1;
^b:
    i1 %29 = scmp gt i32 %11, i32 10;
    cbr i1 %29(prob = 0.5), ^if.then, ^b2;
^while.body:
    i32 %30 = load i32* %5;
    i1 %31 = scmp eq i32 %21, i32 %30;
    cbr i1 %31(prob = 0.5), ^b3, ^b5;
^b1:
    i32 %32 = load i32* %5;
    i1 %33 = scmp eq i32 %21, i32 %32;
    cbr i1 %33(prob = 0.5), ^b4, ^b6;
^b2:
    ret i32 %11;
^b3:
    i32 %34 = load i32* %6;
    i1 %35 = scmp eq i32 %22, i32 %34;
    ubr ^b5;
^b4:
    i32 %36 = load i32* %6;
    i1 %37 = scmp eq i32 %22, i32 %36;
    ubr ^b6;
^b5:
    i1 %38 = phi [^b3, i1 %35] [^while.body, i1 false];
    cbr i1 %38(prob = 0.5), ^b1, ^b7;
^b6:
    i1 %39 = phi [^b4, i1 %37] [^b1, i1 false];
    cbr i1 %39(prob = 0.5), ^if.then1, ^b8;
^b7:
    [2 * i32]* %40 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %19];
    i32* %41 = getelementptr &([2 * i32]* %40)[i64 0][i64 0];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %21, i32 %42;
    i32* %44 = getelementptr &([2 * i32]* %40)[i64 0][i64 1];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %22, i32 %45;
    i32 %47 = add i32 %20, i32 1;
    ubr ^while.header1;
^b8:
    i1 %48 = scmp lt i32 %20, i32 2;
    cbr i1 %48(prob = 0.5), ^if.then2, ^b9;
^if.then1:
    ret i32 1;
^if.then2:
    i32 %49 = add i32 %19, i32 1;
    ubr ^while.header;
^b9:
    i1 %50 = scmp eq i32 %21, i32 0;
    cbr i1 %50(prob = 0.5), ^b11, ^b10;
^b10:
    i32 %51 = load i32* %2;
    i32 %52 = add i32 %51, i32 1;
    i1 %53 = scmp eq i32 %21, i32 %52;
    ubr ^b11;
^b11:
    i1 %54 = phi [^b10, i1 %53] [^b9, i1 true];
    cbr i1 %54(prob = 0.5), ^b13, ^b12;
^b12:
    i1 %55 = scmp eq i32 %22, i32 0;
    ubr ^b13;
^b13:
    i1 %56 = phi [^b12, i1 %55] [^b11, i1 true];
    cbr i1 %56(prob = 0.5), ^b15, ^b14;
^b14:
    i32 %57 = load i32* %1;
    i32 %58 = add i32 %57, i32 1;
    i1 %59 = scmp eq i32 %22, i32 %58;
    ubr ^b15;
^b15:
    i1 %60 = phi [^b14, i1 %59] [^b13, i1 true];
    cbr i1 %60(prob = 0.5), ^if.then3, ^b16;
^if.then3:
    i32 %61 = add i32 %19, i32 1;
    ubr ^while.header;
^b16:
    [30 * i32]* %62 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %21];
    i32* %63 = getelementptr &([30 * i32]* %62)[i64 0][i32 %22];
    store i32* %63 with i32 0;
    [2 * i32]* %64 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %19];
    i32* %65 = getelementptr &([2 * i32]* %64)[i64 0][i64 0];
    i32 %66 = load i32* %65;
    i32 %67 = sub i32 %21, i32 %66;
    i32* %68 = getelementptr &([2 * i32]* %64)[i64 0][i64 1];
    i32 %69 = load i32* %68;
    i32 %70 = sub i32 %22, i32 %69;
    i32 %71 = add i32 %17, i32 1;
    i32 %72 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %67, i32 %70, i32 %71, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6);
    i32 %73 = add i32 %72, i32 1;
    i1 %74 = scmp lt i32 %73, i32 %18;
    cbr i1 %74(prob = 0.5), ^if.then4, ^b17;
^if.then4:
    ubr ^b17;
^b17:
    i32 %75 = phi [^if.then4, i32 %73] [^b16, i32 %18];
    store i32* %63 with i32 1;
    i32 %76 = add i32 %19, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %y_0 = alloc i32;
    i32* %x_0 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^b4, i32 %55] [^entry, i32 %8];
    i32 %11 = phi [^b4, i32 %56] [^entry, i32 %9];
    i32 %12 = phi [^b4, i32 %55] [^entry, i32 %8];
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.header1, ^b;
^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b1, i32 %39];
    i32 %15 = phi [^while.header, i32 %10] [^b1, i32 %23];
    i32 %16 = phi [^while.header, i32 %11] [^b1, i32 %24];
    i32 %17 = phi [^while.header, i32 0] [^b1, i32 %25];
    i32 %18 = phi [^while.header, i32 0] [^b1, i32 %26];
    i32 %19 = phi [^while.header, i32 0] [^b1, i32 %39];
    i1 %20 = scmp lt i32 %19, i32 30;
    cbr i1 %20(prob = 0.97), ^while.header2, ^while.header3;
^b:
    ret i32 0;
^while.header2:
    i32 %21 = phi [^while.header1, i32 %14] [^while.body, i32 %21];
    i32 %22 = phi [^while.header1, i32 0] [^while.body, i32 %38];
    i32 %23 = phi [^while.header1, i32 %15] [^while.body, i32 %23];
    i32 %24 = phi [^while.header1, i32 %16] [^while.body, i32 %24];
    i32 %25 = phi [^while.header1, i32 %17] [^while.body, i32 %25];
    i32 %26 = phi [^while.header1, i32 %18] [^while.body, i32 %26];
    i32 %27 = phi [^while.header1, i32 0] [^while.body, i32 %38];
    i1 %28 = scmp lt i32 %27, i32 30;
    cbr i1 %28(prob = 0.97), ^while.body, ^b1;
^while.header3:
    i32 %29 = phi [^while.header1, i32 1] [^b3, i32 %50];
    i32 %30 = phi [^while.header1, i32 %15] [^b3, i32 %42];
    i32 %31 = phi [^while.header1, i32 %16] [^b3, i32 %43];
    i32 %32 = phi [^while.header1, i32 %17] [^b3, i32 %44];
    i32 %33 = phi [^while.header1, i32 %18] [^b3, i32 %45];
    i32 %34 = phi [^while.header1, i32 1] [^b3, i32 %50];
    i1 %35 = scmp le i32 %34, i32 %31;
    cbr i1 %35(prob = 0.97), ^while.header4, ^b2;
^while.body:
    [30 * i32]* %36 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %21];
    i32* %37 = getelementptr &([30 * i32]* %36)[i64 0][i32 %22];
    store i32* %37 with i32 1;
    i32 %38 = add i32 %22, i32 1;
    ubr ^while.header2;
^b1:
    i32 %39 = add i32 %21, i32 1;
    ubr ^while.header1;
^while.header4:
    i32 %40 = phi [^while.header3, i32 %29] [^b5, i32 %40];
    i32 %41 = phi [^while.header3, i32 1] [^b5, i32 %60];
    i32 %42 = phi [^while.header3, i32 %30] [^b5, i32 %42];
    i32 %43 = phi [^while.header3, i32 %31] [^b5, i32 %43];
    i32 %44 = phi [^while.header3, i32 %32] [^b5, i32 %58];
    i32 %45 = phi [^while.header3, i32 %33] [^b5, i32 %59];
    i32 %46 = phi [^while.header3, i32 1] [^b5, i32 %60];
    i1 %47 = scmp le i32 %46, i32 %42;
    cbr i1 %47(prob = 0.97), ^while.body1, ^b3;
^b2:
    i32 %48 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %32, i32 %33, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_0, i32* %y_0, i32* %x_1, i32* %y_1);
    i1 %49 = scmp lt i32 %48, i32 11;
    cbr i1 %49(prob = 0.5), ^if.then, ^if.else;
^if.then:
    call (i32) -> void @putint(i32 %48);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^b3:
    i32 %50 = add i32 %40, i32 1;
    ubr ^while.header3;
^if.else:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^while.body1:
    [30 * i32]* %51 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %40];
    i32* %52 = getelementptr &([30 * i32]* %51)[i64 0][i32 %41];
    i32 %53 = call () -> i32 @getint();
    store i32* %52 with i32 %53;
    i1 %54 = scmp eq i32 %53, i32 2;
    cbr i1 %54(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    store i32* %x_0 with i32 %40;
    store i32* %y_0 with i32 %41;
    ubr ^b5;
^b4:
    i32 %55 = call () -> i32 @getint();
    store i32* %w with i32 %55;
    i32 %56 = call () -> i32 @getint();
    store i32* %h with i32 %56;
    ubr ^while.header;
^if.else1:
    i1 %57 = scmp eq i32 %53, i32 3;
    cbr i1 %57(prob = 0.5), ^if.then2, ^b5;
^b5:
    i32 %58 = phi [^if.else1, i32 %44] [^if.then2, i32 %44] [^if.then1, i32 %40];
    i32 %59 = phi [^if.else1, i32 %45] [^if.then2, i32 %45] [^if.then1, i32 %41];
    i32 %60 = add i32 %41, i32 1;
    ubr ^while.header4;
^if.then2:
    store i32* %x_1 with i32 %40;
    store i32* %y_1 with i32 %41;
    ubr ^b5;
}
