internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a, align 8 { Flexible };
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4) -> i32 {
  ^entry:
    i1 %5 = icmp sgt i32 %n, i32 10;
    [30 * [30 * i32]]* %6 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    cbr i1 %5(prob = 0.5), ^b, ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 1073741824] [^b6, i32 %7] [^b7, i32 %7] [^b8, i32 %7] [^b9, i32 %7] [^b11, i32 %55];
    i32 %8 = phi [^entry, i32 0] [^b6, i32 %37] [^b7, i32 %37] [^b8, i32 %37] [^b9, i32 %37] [^b11, i32 %37];
    [2 * i32]* %9 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %8];
    i32* %10 = getelementptr &([2 * i32]* %9)[i64 0][i64 0];
    i32* %11 = getelementptr &([2 * i32]* %9)[i64 0][i64 1];
    i1 %12 = icmp slt i32 %8, i32 4;
    cbr i1 %12(prob = 0.984615), ^while.header1, ^b1;
  ^b:
    i32 %13 = phi [^entry, i32 1073741824] [^b1, i32 %15] [^b5, i32 1];
    ret i32 %13;
  ^b1:
    i1 %14 = icmp sgt i32 %7, i32 10;
    i32 %15 = select i1 %14 ? i32 1073741824 : i32 %7;
    ubr ^b;
  ^while.header1:
    i32 %16 = phi [^while.header, i32 0] [^b3, i32 %31];
    i32 %17 = phi [^while.header, i32 %y] [^b3, i32 %30];
    i32 %18 = phi [^while.header, i32 %x] [^b3, i32 %28];
    [30 * i32]* %19 = getelementptr &([30 * [30 * i32]]* %6)[i64 0][i32 %18];
    i32* %20 = getelementptr &([30 * i32]* %19)[i64 0][i32 %17];
    i32 %21 = load i32* %20;
    i1 %22 = icmp neq i32 %21, i32 1;
    cbr i1 %22(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32 %23 = load i32* %3;
    i1 %24 = icmp eq i32 %18, i32 %23;
    cbr i1 %24(prob = 0.5), ^b4, ^b3;
  ^b2:
    i32 %25 = load i32* %3;
    i1 %26 = icmp eq i32 %18, i32 %25;
    cbr i1 %26(prob = 0.5), ^b5, ^b6;
  ^b3:
    i32 %27 = load i32* %10;
    i32 %28 = add i32 %18, i32 %27;
    i32 %29 = load i32* %11;
    i32 %30 = add i32 %17, i32 %29;
    i32 %31 = add i32 %16, i32 1;
    ubr ^while.header1;
  ^b4:
    i32 %32 = load i32* %4;
    i1 %33 = icmp eq i32 %17, i32 %32;
    cbr i1 %33(prob = 0.5), ^b2, ^b3;
  ^b5:
    i32 %34 = load i32* %4;
    i1 %35 = icmp eq i32 %17, i32 %34;
    cbr i1 %35(prob = 0.5), ^b, ^b6;
  ^b6:
    i1 %36 = icmp slt i32 %16, i32 2;
    i32 %37 = add i32 %8, i32 1;
    cbr i1 %36(prob = 0.5), ^while.header, ^b7;
  ^b7:
    i1 %38 = icmp eq i32 %18, i32 0;
    cbr i1 %38(prob = 0.5), ^while.header, ^b8;
  ^b8:
    i32 %39 = load i32* %2;
    i32 %40 = add i32 %39, i32 1;
    i1 %41 = icmp eq i32 %18, i32 %40;
    i1 %42 = icmp eq i32 %17, i32 0;
    i1 %43 = or i1 %41, i1 %42;
    cbr i1 %43(prob = 0.5), ^while.header, ^b9;
  ^b9:
    i32 %44 = load i32* %1;
    i32 %45 = add i32 %44, i32 1;
    i1 %46 = icmp eq i32 %17, i32 %45;
    cbr i1 %46(prob = 0.5), ^while.header, ^b10;
  ^b10:
    store i32* %20 with i32 0;
    i32 %47 = load i32* %10;
    i32 %48 = sub i32 %18, i32 %47;
    i32 %49 = load i32* %11;
    i32 %50 = sub i32 %17, i32 %49;
    i32 %51 = add i32 %n, i32 1;
    i1 %52 = icmp sgt i32 %51, i32 10;
    cbr i1 %52(prob = 0.5), ^b11, ^while.header2;
  ^b11:
    i32 %53 = phi [^b10, i32 1073741824] [^b12, i32 %63] [^b16, i32 1];
    i32 %54 = add i32 %53, i32 1;
    i32 %55 = smin i32 %7, i32 %54;
    store i32* %20 with i32 1;
    ubr ^while.header;
  ^while.header2:
    i32 %56 = phi [^b10, i32 1073741824] [^b17, i32 %56] [^b18, i32 %56] [^b19, i32 %56] [^b20, i32 %56] [^b21, i32 %102];
    i32 %57 = phi [^b10, i32 0] [^b17, i32 %85] [^b18, i32 %85] [^b19, i32 %85] [^b20, i32 %85] [^b21, i32 %85];
    [2 * i32]* %58 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %57];
    i32* %59 = getelementptr &([2 * i32]* %58)[i64 0][i64 0];
    i32* %60 = getelementptr &([2 * i32]* %58)[i64 0][i64 1];
    i1 %61 = icmp slt i32 %57, i32 4;
    cbr i1 %61(prob = 0.984615), ^while.header3, ^b12;
  ^b12:
    i1 %62 = icmp sgt i32 %56, i32 10;
    i32 %63 = select i1 %62 ? i32 1073741824 : i32 %56;
    ubr ^b11;
  ^while.header3:
    i32 %64 = phi [^while.header2, i32 0] [^b14, i32 %79];
    i32 %65 = phi [^while.header2, i32 %50] [^b14, i32 %78];
    i32 %66 = phi [^while.header2, i32 %48] [^b14, i32 %76];
    [30 * i32]* %67 = getelementptr &([30 * [30 * i32]]* %6)[i64 0][i32 %66];
    i32* %68 = getelementptr &([30 * i32]* %67)[i64 0][i32 %65];
    i32 %69 = load i32* %68;
    i1 %70 = icmp neq i32 %69, i32 1;
    cbr i1 %70(prob = 0.984615), ^while.body1, ^b13;
  ^while.body1:
    i32 %71 = load i32* %3;
    i1 %72 = icmp eq i32 %66, i32 %71;
    cbr i1 %72(prob = 0.5), ^b15, ^b14;
  ^b13:
    i32 %73 = load i32* %3;
    i1 %74 = icmp eq i32 %66, i32 %73;
    cbr i1 %74(prob = 0.5), ^b16, ^b17;
  ^b14:
    i32 %75 = load i32* %59;
    i32 %76 = add i32 %66, i32 %75;
    i32 %77 = load i32* %60;
    i32 %78 = add i32 %65, i32 %77;
    i32 %79 = add i32 %64, i32 1;
    ubr ^while.header3;
  ^b15:
    i32 %80 = load i32* %4;
    i1 %81 = icmp eq i32 %65, i32 %80;
    cbr i1 %81(prob = 0.5), ^b13, ^b14;
  ^b16:
    i32 %82 = load i32* %4;
    i1 %83 = icmp eq i32 %65, i32 %82;
    cbr i1 %83(prob = 0.5), ^b11, ^b17;
  ^b17:
    i1 %84 = icmp slt i32 %64, i32 2;
    i32 %85 = add i32 %57, i32 1;
    cbr i1 %84(prob = 0.5), ^while.header2, ^b18;
  ^b18:
    i1 %86 = icmp eq i32 %66, i32 0;
    cbr i1 %86(prob = 0.5), ^while.header2, ^b19;
  ^b19:
    i32 %87 = load i32* %2;
    i32 %88 = add i32 %87, i32 1;
    i1 %89 = icmp eq i32 %66, i32 %88;
    i1 %90 = icmp eq i32 %65, i32 0;
    i1 %91 = or i1 %89, i1 %90;
    cbr i1 %91(prob = 0.5), ^while.header2, ^b20;
  ^b20:
    i32 %92 = load i32* %1;
    i32 %93 = add i32 %92, i32 1;
    i1 %94 = icmp eq i32 %65, i32 %93;
    cbr i1 %94(prob = 0.5), ^while.header2, ^b21;
  ^b21:
    store i32* %68 with i32 0;
    i32 %95 = load i32* %59;
    i32 %96 = sub i32 %66, i32 %95;
    i32 %97 = load i32* %60;
    i32 %98 = sub i32 %65, i32 %97;
    i32 %99 = add i32 %n, i32 2;
    i32 %100 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %96, i32 %98, i32 %99, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4);
    i32 %101 = add i32 %100, i32 1;
    i32 %102 = smin i32 %56, i32 %101;
    store i32* %68 with i32 1;
    ubr ^while.header2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %y_1 = alloc i32, align 4;
    i32* %x_1 = alloc i32, align 4;
    i32* %h = alloc i32, align 4;
    i32* %w = alloc i32, align 4;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]], align 8;
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    store i32* %x_1 with i32 0;
    store i32* %y_1 with i32 0;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    i1 %10 = icmp neq i32 %8, i32 0;
    [30 * [30 * i32]]* %11 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    cbr i1 %10(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %12] [^b2, i32 %56];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %13] [^b2, i32 %57];
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %46] [^b2, i32 0];
    [30 * i32]* %15 = getelementptr &([30 * [30 * i32]]* %11)[i64 0][i32 %14];
    i32* %16 = getelementptr &([30 * i32]* %15)[i64 0][i64 0];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([30 * i32]* %15)[i64 0][i64 1];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %15)[i64 0][i64 2];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %15)[i64 0][i64 3];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %15)[i64 0][i64 4];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %15)[i64 0][i64 5];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %15)[i64 0][i64 6];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %15)[i64 0][i64 7];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %15)[i64 0][i64 8];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %15)[i64 0][i64 9];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %15)[i64 0][i64 10];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %15)[i64 0][i64 11];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %15)[i64 0][i64 12];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %15)[i64 0][i64 13];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %15)[i64 0][i64 14];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %15)[i64 0][i64 15];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %15)[i64 0][i64 16];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %15)[i64 0][i64 17];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %15)[i64 0][i64 18];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %15)[i64 0][i64 19];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %15)[i64 0][i64 20];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %15)[i64 0][i64 21];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %15)[i64 0][i64 22];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %15)[i64 0][i64 23];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %15)[i64 0][i64 24];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %15)[i64 0][i64 25];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %15)[i64 0][i64 26];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %15)[i64 0][i64 27];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %15)[i64 0][i64 28];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &([30 * i32]* %15)[i64 0][i64 29];
    store i32* %45 with i32 1;
    i32 %46 = add i32 %14, i32 1;
    i1 %47 = icmp slt i32 %46, i32 30;
    cbr i1 %47(prob = 0.966667), ^while.body, ^b1;
  ^b:
    ret i32 0;
  ^b1:
    i32 %48 = load i32* %h;
    i1 %49 = icmp sgt i32 %48, i32 0;
    cbr i1 %49(prob = 0.984615), ^while.body1, ^b2;
  ^while.body1:
    i32 %50 = phi [^b1, i32 %12] [^b3, i32 %70];
    i32 %51 = phi [^b1, i32 %13] [^b3, i32 %71];
    i32 %52 = phi [^b1, i32 1] [^b3, i32 %72];
    i32 %53 = load i32* %w;
    i1 %54 = icmp sgt i32 %53, i32 0;
    [30 * i32]* %55 = getelementptr &([30 * [30 * i32]]* %11)[i64 0][i32 %52];
    cbr i1 %54(prob = 0.984615), ^while.body2, ^b3;
  ^b2:
    i32 %56 = phi [^b1, i32 %12] [^b3, i32 %70];
    i32 %57 = phi [^b1, i32 %13] [^b3, i32 %71];
    i32 %58 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %57, i32 %56, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_1, i32* %y_1);
    i1 %59 = icmp slt i32 %58, i32 11;
    i32 %60 = select i1 %59 ? i32 %58 : i32 -1;
    call (i32) -> void @putint(i32 %60);
    call (i32) -> void @putch(i32 10);
    i32 %61 = call () -> i32 @getint();
    store i32* %w with i32 %61;
    i32 %62 = call () -> i32 @getint();
    store i32* %h with i32 %62;
    i1 %63 = icmp neq i32 %61, i32 0;
    cbr i1 %63(prob = 0.984615), ^while.body, ^b;
  ^while.body2:
    i32 %64 = phi [^while.body1, i32 %50] [^b4, i32 %75];
    i32 %65 = phi [^while.body1, i32 %51] [^b4, i32 %76];
    i32 %66 = phi [^while.body1, i32 1] [^b4, i32 %77];
    i32 %67 = call () -> i32 @getint();
    i32* %68 = getelementptr &([30 * i32]* %55)[i64 0][i32 %66];
    store i32* %68 with i32 %67;
    i1 %69 = icmp eq i32 %67, i32 2;
    cbr i1 %69(prob = 0.5), ^b4, ^if.else;
  ^b3:
    i32 %70 = phi [^while.body1, i32 %50] [^b4, i32 %75];
    i32 %71 = phi [^while.body1, i32 %51] [^b4, i32 %76];
    i32 %72 = add i32 %52, i32 1;
    i32 %73 = load i32* %h;
    i1 %74 = icmp sle i32 %72, i32 %73;
    cbr i1 %74(prob = 0.984615), ^while.body1, ^b2;
  ^b4:
    i32 %75 = phi [^while.body2, i32 %66] [^if.else, i32 %64] [^if.then, i32 %64];
    i32 %76 = phi [^while.body2, i32 %52] [^if.else, i32 %65] [^if.then, i32 %65];
    i32 %77 = add i32 %66, i32 1;
    i32 %78 = load i32* %w;
    i1 %79 = icmp sle i32 %77, i32 %78;
    cbr i1 %79(prob = 0.984615), ^while.body2, ^b3;
  ^if.else:
    i1 %80 = icmp eq i32 %67, i32 3;
    cbr i1 %80(prob = 0.5), ^if.then, ^b4;
  ^if.then:
    store i32* %x_1 with i32 %52;
    store i32* %y_1 with i32 %66;
    ubr ^b4;
}
