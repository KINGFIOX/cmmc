internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32 %arg2, [4 * [2 * i32]]* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9):
    i32* %x = alloc i32;
    store i32* %x with i32 %arg;
    i32* %y = alloc i32;
    store i32* %y with i32 %arg1;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i1 %0 = scmp gt i32 %arg2, i32 10;
    cbr i1 %0, [ ^if.then ], [ ^b i32* %n, i32* %y, i32* %x, i32* %arg9, [4 * [2 * i32]]* %arg3, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [4 * [2 * i32]]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9):
    i32* %num = alloc i32;
    store i32* %num with i32 1073741824;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %i, i32* %num, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [4 * [2 * i32]]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9 ];
^if.then():
    ret i32 1073741824;
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11):
    i32* %coun = alloc i32;
    store i32* %coun with i32 0;
    i32* %x2 = alloc i32;
    i32 %0 = load i32* %arg4;
    store i32* %x2 with i32 %0;
    i32* %y2 = alloc i32;
    i32 %1 = load i32* %arg3;
    store i32* %y2 with i32 %1;
    [30 * i32]* %2 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %0];
    i32* %3 = getelementptr &([30 * i32]* %2)[i32 0][i32 %1];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 1;
    cbr i1 %5, [ ^while.body1 i32* %arg4, i32* %arg2, i32* %y2, i32* %arg, i32* %arg1, i32* %coun, i32* %arg3, i32* %x2, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32 0, i32 %0, i32 %1 ], [ ^b1 i32* %arg4, i32* %y2, i32* %coun, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %x2, i32* %arg5, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [4 * [2 * i32]]* %arg6, i32* %arg7, i32 0, i32 %0, i32 %1 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [4 * [2 * i32]]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg14;
    i1 %1 = scmp eq i32 %arg16, i32 %0;
    cbr i1 %1, [ ^b2 i32* %arg, i32* %arg1, i32* %arg6, i32* %arg7, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg14, [4 * [2 * i32]]* %arg13, i32* %arg12, i32 %arg15, i32 %arg16, i32 %arg17 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg12, i32* %arg14, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, [4 * [2 * i32]]* %arg13, i32 %arg15, i32 %arg16, i32 %arg17 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [4 * [2 * i32]]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg14;
    i1 %1 = scmp eq i32 %arg16, i32 %0;
    cbr i1 %1, [ ^b3 i32* %arg, i32* %arg6, i32* %arg7, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, [4 * [2 * i32]]* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg14, i32* %arg8, i32 %arg15, i32 %arg16, i32 %arg17 ], [ ^b5 i32* %arg, i32* %arg6, i32* %arg7, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, [4 * [2 * i32]]* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg14, i32* %arg8, i32 %arg15, i32 %arg16, i32 %arg17 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [4 * [2 * i32]]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg14;
    i1 %1 = scmp eq i32 %arg17, i32 %0;
    cbr i1 %1, [ ^b1 i32* %arg, i32* %arg7, i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg14, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [4 * [2 * i32]]* %arg13, i32* %arg12, i32 %arg15, i32 %arg16, i32 %arg17 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg7, i32* %arg6, i32* %arg2, i32* %arg3, i32* %arg14, i32* %arg12, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [4 * [2 * i32]]* %arg13, i32 %arg15, i32 %arg16, i32 %arg17 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg14;
    i1 %1 = scmp eq i32 %arg17, i32 %0;
    cbr i1 %1, [ ^if.then2 ], [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg7, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [4 * [2 * i32]]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [4 * [2 * i32]]* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg5;
    [2 * i32]* %1 = getelementptr &([4 * [2 * i32]]* %arg14)[i32 0][i32 %0];
    i32* %2 = getelementptr &([2 * i32]* %1)[i32 0][i32 0];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %arg16, i32 %3;
    store i32* %arg7 with i32 %4;
    i32* %5 = getelementptr &([2 * i32]* %1)[i32 0][i32 1];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %arg17, i32 %6;
    store i32* %arg4 with i32 %7;
    i32 %8 = add i32 %arg15, i32 1;
    store i32* %arg3 with i32 %8;
    [30 * i32]* %9 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %4];
    i32* %10 = getelementptr &([30 * i32]* %9)[i32 0][i32 %7];
    i32 %11 = load i32* %10;
    i1 %12 = scmp neq i32 %11, i32 1;
    cbr i1 %12, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg8, [4 * [2 * i32]]* %arg14, i32* %arg9, i32 %8, i32 %4, i32 %7 ], [ ^b1 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg1, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [4 * [2 * i32]]* %arg14, i32* %arg9, i32 %8, i32 %4, i32 %7 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i1 %0 = scmp le i32 %arg15, i32 1;
    cbr i1 %0, [ ^if.then1 i32* %arg6, i32* %arg4, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg14, [4 * [2 * i32]]* %arg8, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9 ], [ ^b6 i32* %arg, i32* %arg5, i32* %arg7, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg1, i32* %arg2, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, [4 * [2 * i32]]* %arg8, i32 %arg16, i32 %arg17 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11):
    i32 %0 = load i32* %arg4;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg4 with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 4;
    cbr i1 %2, [ ^while.body i32* %arg4, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11 ], [ ^b7 i32* %arg ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [4 * [2 * i32]]* %arg14, i32 %arg15, i32 %arg16):
    i1 %0 = scmp eq i32 %arg15, i32 0;
    cbr i1 %0, [ ^if.then1 i32* %arg3, i32* %arg4, i32* %arg6, i32* %arg, i32* %arg1, i32* %arg8, [4 * [2 * i32]]* %arg14, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg15, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg13, [4 * [2 * i32]]* %arg14, i32* %arg12, i32 %arg15, i32 %arg16 ];
^if.then2():
    ret i32 1;
^b7(i32* %arg):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp gt i32 %0, i32 10;
    cbr i1 %1, [ ^if.then ], [ ^indirect1 i32 %0 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [4 * [2 * i32]]* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg15;
    i32 %1 = add i32 %0, i32 1;
    i1 %2 = scmp eq i32 %arg8, i32 %1;
    cbr i1 %2, [ ^if.then1 i32* %arg3, i32* %arg4, i32* %arg6, i32* %arg, i32* %arg1, i32* %arg9, [4 * [2 * i32]]* %arg14, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg15, i32* %arg13 ], [ ^b8 i32* %arg, i32* %arg6, i32* %arg7, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, [4 * [2 * i32]]* %arg14, i32* %arg13, i32* %arg15, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32 %arg16, i32 %arg17 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16):
    i1 %0 = scmp eq i32 %arg16, i32 0;
    cbr i1 %0, [ ^if.then1 i32* %arg4, i32* %arg3, i32* %arg1, i32* %arg, i32* %arg6, i32* %arg14, [4 * [2 * i32]]* %arg8, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9 ], [ ^b9 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg1, i32* %arg2, i32* %arg7, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, [4 * [2 * i32]]* %arg8, i32* %arg9, i32 %arg15, i32 %arg16 ];
^indirect1(i32 %arg):
    ret i32 %arg;
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [4 * [2 * i32]]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = load i32* %arg14;
    i32 %1 = add i32 %0, i32 1;
    i1 %2 = scmp eq i32 %arg16, i32 %1;
    cbr i1 %2, [ ^if.then1 i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg, i32* %arg1, i32* %arg8, [4 * [2 * i32]]* %arg13, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg14 ], [ ^b10 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg7, i32* %arg5, i32* %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg14, [4 * [2 * i32]]* %arg13, i32 %arg15, i32 %arg16 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [4 * [2 * i32]]* %arg14, i32 %arg15, i32 %arg16):
    [30 * i32]* %0 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %arg15];
    i32* %1 = getelementptr &([30 * i32]* %0)[i32 0][i32 %arg16];
    store i32* %1 with i32 0;
    i32* %searchResult = alloc i32;
    i32 %2 = load i32* %arg4;
    [2 * i32]* %3 = getelementptr &([4 * [2 * i32]]* %arg14)[i32 0][i32 %2];
    i32* %4 = getelementptr &([2 * i32]* %3)[i32 0][i32 0];
    i32 %5 = load i32* %4;
    i32 %6 = sub i32 %arg15, i32 %5;
    i32* %7 = getelementptr &([2 * i32]* %3)[i32 0][i32 1];
    i32 %8 = load i32* %7;
    i32 %9 = sub i32 %arg16, i32 %8;
    i32 %10 = load i32* %arg3;
    i32 %11 = add i32 %10, i32 1;
    i32 %12 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %6, i32 %9, i32 %11, [4 * [2 * i32]]* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8);
    i32 %13 = add i32 %12, i32 1;
    store i32* %searchResult with i32 %13;
    i32 %14 = load i32* %arg2;
    i1 %15 = scmp lt i32 %13, i32 %14;
    cbr i1 %15, [ ^indirect2 i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg5, i32* %arg4, i32* %arg1, i32* %arg2, i32* %arg, i32* %searchResult, i32 %13, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, [4 * [2 * i32]]* %arg14, i32* %arg8 ], [ ^b11 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %searchResult, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [4 * [2 * i32]]* %arg14, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32 %arg15, i32 %arg16 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [4 * [2 * i32]]* %arg15, i32* %arg16):
    store i32* %arg6 with i32 %arg9;
    i32 %0 = load i32* %arg3;
    i32 %1 = load i32* %arg2;
    ubr [ ^b11 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg7, i32* %arg8, i32* %arg4, i32* %arg3, i32* %arg1, i32* %arg2, i32* %arg16, [4 * [2 * i32]]* %arg15, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32 %1, i32 %0 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [4 * [2 * i32]]* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    [30 * i32]* %0 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %arg16];
    i32* %1 = getelementptr &([30 * i32]* %0)[i32 0][i32 %arg17];
    store i32* %1 with i32 1;
    i32 %2 = load i32* %arg5;
    i32 %3 = add i32 %2, i32 1;
    store i32* %arg5 with i32 %3;
    free i32* %arg4;
    free i32* %arg8;
    free i32* %arg6;
    free i32* %arg2;
    i1 %4 = scmp lt i32 %3, i32 4;
    cbr i1 %4, [ ^while.body i32* %arg5, i32* %arg1, i32* %arg, i32* %arg7, i32* %arg3, i32* %arg9, [4 * [2 * i32]]* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15 ], [ ^b7 i32* %arg1 ];
}
func @main() -> i32 { NoRecurse } {
^entry():
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 0][i32 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 0][i32 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 1][i32 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 1][i32 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 2][i32 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 2][i32 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 3][i32 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i32 0][i32 3][i32 1];
    store i32* %7 with i32 -1;
    i32* %w = alloc i32;
    i32* %h = alloc i32;
    i32* %x_0 = alloc i32;
    i32* %y_0 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %y_1 = alloc i32;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    i1 %10 = scmp neq i32 %8, i32 0;
    cbr i1 %10, [ ^while.body i32* %h, i32* %w, i32* %y_1, i32* %x_1, i32* %x_0, i32* %y_0, [4 * [2 * i32]]* %step, i32 %8, i32 %9, i32 undef, i32 undef ], [ ^b ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    ubr [ ^while.body1 i32* %j, i32* %i, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 0, i32 0 ];
^b():
    ret i32 0;
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    [30 * i32]* %0 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %arg13];
    i32* %1 = getelementptr &([30 * i32]* %0)[i32 0][i32 %arg14];
    store i32* %1 with i32 1;
    i32 %2 = add i32 %arg14, i32 1;
    store i32* %arg with i32 %2;
    i1 %3 = scmp lt i32 %2, i32 30;
    cbr i1 %3, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %2 ], [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg13, i32 1;
    i1 %1 = scmp lt i32 %0, i32 30;
    cbr i1 %1, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0, i32 0 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    store i32* %arg1 with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg10;
    cbr i1 %0, [ ^while.body2 i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg8, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg2, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 1 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg3, [4 * [2 * i32]]* %arg8, i32* %arg7, i32* %arg6, i32 %arg11, i32 %arg12 ];
^while.body2(i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    store i32* %arg1 with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg9;
    cbr i1 %0, [ ^while.body3 i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg2, i32* %arg8, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg3, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 1 ], [ ^b4 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [4 * [2 * i32]]* %arg2, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %arg9, i32 %arg10, i32 1, [4 * [2 * i32]]* %arg6, i32* %arg5, i32* %arg4, i32* %arg8, i32* %arg7, i32* %arg3, i32* %arg2);
    i32 %1 = load i32* %arg7;
    i32 %2 = load i32* %arg8;
    i1 %3 = scmp le i32 %0, i32 10;
    cbr i1 %3, [ ^indirect i32* %arg1, i32* %arg, i32 %0, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32 %2, i32 %1 ], [ ^if.else i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32 %2, i32 %1 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, [4 * [2 * i32]]* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    call (i32) -> void @putint(i32 %arg2);
    call (i32) -> void @putch(i32 10);
    ubr [ ^b5 i32* %arg1, i32* %arg, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, [4 * [2 * i32]]* %arg3, i32* %arg9, i32* %arg8, i32 %arg10, i32 %arg11 ];
^if.else(i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr [ ^b5 i32* %arg1, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, [4 * [2 * i32]]* %arg2, i32* %arg8, i32* %arg7, i32 %arg9, i32 %arg10 ];
^while.body3(i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    [30 * i32]* %0 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %arg13];
    i32* %1 = getelementptr &([30 * i32]* %0)[i32 0][i32 %arg14];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i1 %3 = scmp eq i32 %2, i32 2;
    cbr i1 %3, [ ^indirect1 i32* %arg, i32* %arg1, i32 %arg14, i32 %arg13, [4 * [2 * i32]]* %arg2, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg9, i32 %arg10, i32 %arg13, i32 %arg14 ], [ ^indirect2 i32* %arg, i32* %arg1, i32 %arg14, i32 %arg13, [4 * [2 * i32]]* %arg2, i32* %arg6, i32* %arg7, i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [4 * [2 * i32]]* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg13, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body2 i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg7, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg8, i32* %arg2, [4 * [2 * i32]]* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12 ];
^indirect1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, [4 * [2 * i32]]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    store i32* %arg10 with i32 %arg3;
    store i32* %arg9 with i32 %arg2;
    i32 %0 = add i32 %arg14, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg11;
    cbr i1 %1, [ ^while.body3 i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg4, i32* %arg7, i32* %arg5, i32* %arg6, i32* %arg10, i32* %arg9, i32* %arg8, i32 %arg11, i32 %arg12, i32 %arg3, i32 %arg2, i32 %arg13, i32 %0 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg8, i32* %arg5, i32* %arg6, i32* %arg10, i32* %arg9, [4 * [2 * i32]]* %arg4, i32* %arg7, i32 %arg11, i32 %arg12, i32 %arg3, i32 %arg2, i32 %arg13 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = call () -> i32 @getint();
    store i32* %arg8 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %arg7 with i32 %1;
    free i32* %arg1;
    free i32* %arg;
    i1 %2 = scmp neq i32 %0, i32 0;
    cbr i1 %2, [ ^while.body i32* %arg7, i32* %arg8, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [4 * [2 * i32]]* %arg6, i32 %0, i32 %1, i32 %arg9, i32 %arg10 ], [ ^b ];
^indirect2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, [4 * [2 * i32]]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    [30 * i32]* %0 = getelementptr &([30 * [30 * i32]]* @a)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([30 * i32]* %0)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 3;
    cbr i1 %3, [ ^if.then i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg4, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg10, i32* %arg9, i32* %arg8, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ], [ ^indirect3 i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg4, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ];
^if.then(i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    store i32* %arg8 with i32 %arg13;
    store i32* %arg7 with i32 %arg14;
    i32 %0 = add i32 %arg14, i32 1;
    store i32* %arg with i32 %0;
    ubr [ ^while.header i32* %arg1, i32* %arg, i32 %0, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %0 ];
^indirect3(i32* %arg, i32* %arg1, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i32 %0 = add i32 %arg14, i32 1;
    store i32* %arg1 with i32 %0;
    ubr [ ^while.header i32* %arg, i32* %arg1, i32 %0, [4 * [2 * i32]]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %0 ];
^while.header(i32* %arg, i32* %arg1, i32 %arg2, [4 * [2 * i32]]* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp le i32 %arg2, i32 %arg10;
    cbr i1 %0, [ ^while.body3 i32* %arg1, i32* %arg, [4 * [2 * i32]]* %arg3, i32* %arg4, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^b4 i32* %arg1, i32* %arg, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, [4 * [2 * i32]]* %arg3, i32* %arg4, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
}
