internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4) -> i32 {
  ^entry:
    i1 %5 = scmp gt i32 %n, i32 10;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
  ^b:
    [30 * [30 * i32]]* %6 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    ubr ^while.header;
  ^b1:
    i32 %7 = phi [^entry, i32 1073741824] [^b2, i32 1073741824] [^b3, i32 %8] [^b7, i32 1];
    ret i32 %7;
  ^while.header:
    i32 %8 = phi [^b, i32 1073741824] [^if.then, i32 %8] [^if.then1, i32 %8] [^b12, i32 %55];
    i32 %9 = phi [^b, i32 0] [^if.then, i32 %36] [^if.then1, i32 %38] [^b12, i32 %56];
    [2 * i32]* %10 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %9];
    i32* %11 = getelementptr &([2 * i32]* %10)[i64 0][i64 0];
    i32* %12 = getelementptr &([2 * i32]* %10)[i64 0][i64 1];
    i1 %13 = scmp lt i32 %9, i32 4;
    cbr i1 %13(prob = 0.97), ^while.header1, ^b2;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b5, i32 %30];
    i32 %15 = phi [^while.header, i32 %y] [^b5, i32 %29];
    i32 %16 = phi [^while.header, i32 %x] [^b5, i32 %27];
    [30 * i32]* %17 = getelementptr &([30 * [30 * i32]]* %6)[i64 0][i32 %16];
    i32* %18 = getelementptr &([30 * i32]* %17)[i64 0][i32 %15];
    i32 %19 = load i32* %18;
    i1 %20 = scmp neq i32 %19, i32 1;
    cbr i1 %20(prob = 0.97), ^while.body, ^b4;
  ^b2:
    i1 %21 = scmp gt i32 %8, i32 10;
    cbr i1 %21(prob = 0.5), ^b1, ^b3;
  ^b3:
    ubr ^b1;
  ^while.body:
    i32 %22 = load i32* %3;
    i1 %23 = scmp eq i32 %16, i32 %22;
    cbr i1 %23(prob = 0.5), ^b6, ^b5;
  ^b4:
    i32 %24 = load i32* %3;
    i1 %25 = scmp eq i32 %16, i32 %24;
    cbr i1 %25(prob = 0.5), ^b7, ^b8;
  ^b5:
    i32 %26 = load i32* %11;
    i32 %27 = add i32 %16, i32 %26;
    i32 %28 = load i32* %12;
    i32 %29 = add i32 %15, i32 %28;
    i32 %30 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^b6:
    i32 %31 = load i32* %4;
    i1 %32 = scmp eq i32 %15, i32 %31;
    cbr i1 %32(prob = 0.5), ^b4, ^b5;
  ^b7:
    i32 %33 = load i32* %4;
    i1 %34 = scmp eq i32 %15, i32 %33;
    cbr i1 %34(prob = 0.5), ^b1, ^b8;
  ^b8:
    i1 %35 = scmp lt i32 %14, i32 2;
    cbr i1 %35(prob = 0.5), ^if.then, ^b9;
  ^if.then:
    i32 %36 = add i32 %9, i32 1;
    ubr ^while.header;
  ^b9:
    i1 %37 = scmp eq i32 %16, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then1, ^b10;
  ^if.then1:
    i32 %38 = add i32 %9, i32 1;
    ubr ^while.header;
  ^b10:
    i32 %39 = load i32* %2;
    i32 %40 = add i32 %39, i32 1;
    i1 %41 = scmp eq i32 %16, i32 %40;
    i1 %42 = scmp eq i32 %15, i32 0;
    i1 %43 = or i1 %41, i1 %42;
    cbr i1 %43(prob = 0.75), ^if.then1, ^b11;
  ^b11:
    i32 %44 = load i32* %1;
    i32 %45 = add i32 %44, i32 1;
    i1 %46 = scmp eq i32 %15, i32 %45;
    cbr i1 %46(prob = 0.5), ^if.then1, ^b12;
  ^b12:
    store i32* %18 with i32 0;
    i32 %47 = load i32* %11;
    i32 %48 = sub i32 %16, i32 %47;
    i32 %49 = load i32* %12;
    i32 %50 = sub i32 %15, i32 %49;
    i32 %51 = add i32 %n, i32 1;
    i32 %52 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %48, i32 %50, i32 %51, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4);
    i32 %53 = add i32 %52, i32 1;
    i1 %54 = scmp lt i32 %53, i32 %8;
    i32 %55 = select i1 %54 ? i32 %53 : i32 %8;
    store i32* %18 with i32 1;
    i32 %56 = add i32 %9, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    store i32* %x_1 with i32 0;
    store i32* %y_1 with i32 0;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    [30 * [30 * i32]]* %10 = ptrcast [30 * [30 * i32]]* @a to [30 * [30 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 0] [^b1, i32 %49];
    i32 %12 = phi [^entry, i32 0] [^b1, i32 %50];
    i32 %13 = phi [^entry, i32 %8] [^b1, i32 %58];
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %15 = phi [^while.header, i32 0] [^while.body, i32 %47];
    [30 * i32]* %16 = getelementptr &([30 * [30 * i32]]* %10)[i64 0][i32 %15];
    i32* %17 = getelementptr &([30 * i32]* %16)[i64 0][i64 0];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %16)[i64 0][i64 1];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %16)[i64 0][i64 2];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %16)[i64 0][i64 3];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %16)[i64 0][i64 4];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %16)[i64 0][i64 5];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %16)[i64 0][i64 6];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %16)[i64 0][i64 7];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %16)[i64 0][i64 8];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %16)[i64 0][i64 9];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %16)[i64 0][i64 10];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %16)[i64 0][i64 11];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %16)[i64 0][i64 12];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %16)[i64 0][i64 13];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %16)[i64 0][i64 14];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %16)[i64 0][i64 15];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %16)[i64 0][i64 16];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %16)[i64 0][i64 17];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %16)[i64 0][i64 18];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %16)[i64 0][i64 19];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %16)[i64 0][i64 20];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %16)[i64 0][i64 21];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %16)[i64 0][i64 22];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %16)[i64 0][i64 23];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %16)[i64 0][i64 24];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %16)[i64 0][i64 25];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %16)[i64 0][i64 26];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %16)[i64 0][i64 27];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &([30 * i32]* %16)[i64 0][i64 28];
    store i32* %45 with i32 1;
    i32* %46 = getelementptr &([30 * i32]* %16)[i64 0][i64 29];
    store i32* %46 with i32 1;
    i32 %47 = add i32 %15, i32 1;
    i1 %48 = scmp lt i32 %47, i32 30;
    cbr i1 %48(prob = 0.97), ^while.body, ^while.header1;
  ^b:
    ret i32 0;
  ^while.header1:
    i32 %49 = phi [^while.body, i32 %11] [^b2, i32 %60];
    i32 %50 = phi [^while.body, i32 %12] [^b2, i32 %61];
    i32 %51 = phi [^while.body, i32 1] [^b2, i32 %65];
    i32 %52 = load i32* %h;
    i1 %53 = scmp le i32 %51, i32 %52;
    [30 * i32]* %54 = getelementptr &([30 * [30 * i32]]* %10)[i64 0][i32 %51];
    cbr i1 %53(prob = 0.97), ^while.header2, ^b1;
  ^b1:
    i32 %55 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %50, i32 %49, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_1, i32* %y_1);
    i1 %56 = scmp lt i32 %55, i32 11;
    i32 %57 = select i1 %56 ? i32 %55 : i32 -1;
    call (i32) -> void @putint(i32 %57);
    call (i32) -> void @putch(i32 10);
    i32 %58 = call () -> i32 @getint();
    store i32* %w with i32 %58;
    i32 %59 = call () -> i32 @getint();
    store i32* %h with i32 %59;
    ubr ^while.header;
  ^while.header2:
    i32 %60 = phi [^while.header1, i32 %49] [^b3, i32 %69];
    i32 %61 = phi [^while.header1, i32 %50] [^b3, i32 %70];
    i32 %62 = phi [^while.header1, i32 1] [^b3, i32 %71];
    i32 %63 = load i32* %w;
    i1 %64 = scmp le i32 %62, i32 %63;
    cbr i1 %64(prob = 0.97), ^while.body1, ^b2;
  ^b2:
    i32 %65 = add i32 %51, i32 1;
    ubr ^while.header1;
  ^while.body1:
    i32 %66 = call () -> i32 @getint();
    i32* %67 = getelementptr &([30 * i32]* %54)[i64 0][i32 %62];
    store i32* %67 with i32 %66;
    i1 %68 = scmp eq i32 %66, i32 2;
    cbr i1 %68(prob = 0.5), ^b3, ^if.else;
  ^b3:
    i32 %69 = phi [^while.body1, i32 %62] [^if.else, i32 %60] [^if.then, i32 %60];
    i32 %70 = phi [^while.body1, i32 %51] [^if.else, i32 %61] [^if.then, i32 %61];
    i32 %71 = add i32 %62, i32 1;
    ubr ^while.header2;
  ^if.else:
    i1 %72 = scmp eq i32 %66, i32 3;
    cbr i1 %72(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    store i32* %x_1 with i32 %51;
    store i32* %y_1 with i32 %62;
    ubr ^b3;
}
