internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @a;
internal func @search(i32 %x, i32 %y, i32 %n, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6) -> i32 {
^entry:
    i1 %7 = scmp gt i32 %n, i32 10;
    [30 * i32]* %8 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %x];
    i32* %9 = getelementptr &([30 * i32]* %8)[i64 0][i32 %y];
    cbr i1 %7(prob = 0.5), ^b, ^while.guard;
^while.guard:
    i32 %10 = phi [^entry, i32 1073741824] [^if.then, i32 %14] [^if.then1, i32 %14];
    i32 %11 = phi [^entry, i32 0] [^if.then, i32 %53] [^if.then1, i32 %59];
    i1 %12 = scmp lt i32 %11, i32 4;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
^b:
    i32 %13 = phi [^entry, i32 1073741824] [^b1, i32 1073741824] [^b2, i32 %21] [^b3, i32 1];
    ret i32 %13;
^while.body:
    i32 %14 = phi [^while.guard, i32 %10] [^b9, i32 %75];
    i32 %15 = phi [^while.guard, i32 %11] [^b9, i32 %76];
    i32 %16 = load i32* %9;
    i1 %17 = scmp neq i32 %16, i32 1;
    [2 * i32]* %18 = getelementptr &([4 * [2 * i32]]* %0)[i64 0][i32 %15];
    i32* %19 = getelementptr &([2 * i32]* %18)[i64 0][i64 0];
    i32* %20 = getelementptr &([2 * i32]* %18)[i64 0][i64 1];
    cbr i1 %17(prob = 0.97), ^while.body1, ^indirect;
^b1:
    i32 %21 = phi [^while.guard, i32 %10] [^b9, i32 %75];
    i1 %22 = scmp gt i32 %21, i32 10;
    cbr i1 %22(prob = 0.5), ^b, ^b2;
^indirect:
    i32 %23 = load i32* %5;
    i32 %24 = load i32* %6;
    ubr ^b3;
^while.body1:
    i32 %25 = phi [^while.body, i32 0] [^b4, i32 %45];
    i32 %26 = phi [^while.body, i32 %x] [^b4, i32 %42];
    i32 %27 = phi [^while.body, i32 %y] [^b4, i32 %44];
    i32 %28 = load i32* %5;
    i1 %29 = scmp eq i32 %26, i32 %28;
    i32 %30 = load i32* %6;
    i1 %31 = scmp eq i32 %27, i32 %30;
    i1 %32 = and i1 %31, i1 %29;
    cbr i1 %32(prob = 0.25), ^b3, ^b4;
^b2:
    ubr ^b;
^b3:
    i32 %33 = phi [^indirect, i32 %24] [^while.body1, i32 %30] [^indirect1, i32 %51];
    i32 %34 = phi [^indirect, i32 %23] [^while.body1, i32 %28] [^indirect1, i32 %50];
    i32 %35 = phi [^indirect, i32 0] [^while.body1, i32 %25] [^indirect1, i32 %45];
    i32 %36 = phi [^indirect, i32 %x] [^while.body1, i32 %26] [^indirect1, i32 %42];
    i32 %37 = phi [^indirect, i32 %y] [^while.body1, i32 %27] [^indirect1, i32 %44];
    i1 %38 = scmp eq i32 %36, i32 %34;
    i1 %39 = scmp eq i32 %37, i32 %33;
    i1 %40 = and i1 %39, i1 %38;
    cbr i1 %40(prob = 0.25), ^b, ^b5;
^b4:
    i32 %41 = load i32* %19;
    i32 %42 = add i32 %26, i32 %41;
    i32 %43 = load i32* %20;
    i32 %44 = add i32 %27, i32 %43;
    i32 %45 = add i32 %25, i32 1;
    [30 * i32]* %46 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %42];
    i32* %47 = getelementptr &([30 * i32]* %46)[i64 0][i32 %44];
    i32 %48 = load i32* %47;
    i1 %49 = scmp neq i32 %48, i32 1;
    cbr i1 %49(prob = 0.97), ^while.body1, ^indirect1;
^indirect1:
    i32 %50 = load i32* %5;
    i32 %51 = load i32* %6;
    ubr ^b3;
^b5:
    i1 %52 = scmp lt i32 %35, i32 2;
    cbr i1 %52(prob = 0.5), ^if.then, ^b6;
^if.then:
    i32 %53 = add i32 %15, i32 1;
    ubr ^while.guard;
^b6:
    i1 %54 = scmp eq i32 %36, i32 0;
    i32 %55 = load i32* %2;
    i32 %56 = add i32 %55, i32 1;
    i1 %57 = scmp eq i32 %36, i32 %56;
    i1 %58 = or i1 %57, i1 %54;
    cbr i1 %58(prob = 0.75), ^if.then1, ^b7;
^if.then1:
    i32 %59 = add i32 %15, i32 1;
    ubr ^while.guard;
^b7:
    i1 %60 = scmp eq i32 %37, i32 0;
    i32 %61 = load i32* %1;
    i32 %62 = add i32 %61, i32 1;
    i1 %63 = scmp eq i32 %37, i32 %62;
    i1 %64 = or i1 %63, i1 %60;
    cbr i1 %64(prob = 0.75), ^if.then1, ^b8;
^b8:
    [30 * i32]* %65 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %36];
    i32* %66 = getelementptr &([30 * i32]* %65)[i64 0][i32 %37];
    store i32* %66 with i32 0;
    i32 %67 = load i32* %19;
    i32 %68 = sub i32 %36, i32 %67;
    i32 %69 = load i32* %20;
    i32 %70 = add i32 %n, i32 1;
    i32 %71 = sub i32 %37, i32 %69;
    i32 %72 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %68, i32 %71, i32 %70, [4 * [2 * i32]]* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6);
    i32 %73 = add i32 %72, i32 1;
    i1 %74 = scmp lt i32 %73, i32 %14;
    cbr i1 %74(prob = 0.5), ^if.then2, ^b9;
^if.then2:
    ubr ^b9;
^b9:
    i32 %75 = phi [^b8, i32 %14] [^if.then2, i32 %73];
    store i32* %66 with i32 1;
    i32 %76 = add i32 %15, i32 1;
    i1 %77 = scmp lt i32 %76, i32 4;
    cbr i1 %77(prob = 0.97), ^while.body, ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %y_1 = alloc i32;
    i32* %x_1 = alloc i32;
    i32* %y_0 = alloc i32;
    i32* %x_0 = alloc i32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    [4 * [2 * i32]]* %step = alloc [4 * [2 * i32]];
    i32* %0 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 1][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 2][i64 1];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 0];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([4 * [2 * i32]]* %step)[i64 0][i64 3][i64 1];
    store i32* %7 with i32 -1;
    i32 %8 = call () -> i32 @getint();
    store i32* %w with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %h with i32 %9;
    i1 %10 = scmp neq i32 %8, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = phi [^entry, i32 %8] [^while.body, i32 %11] [^b2, i32 %58];
    i32 %12 = phi [^entry, i32 %9] [^while.body, i32 %12] [^b2, i32 %59];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %45] [^b2, i32 0];
    [30 * i32]* %14 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %13];
    i32* %15 = getelementptr &([30 * i32]* %14)[i64 0][i64 0];
    store i32* %15 with i32 1;
    i32* %16 = getelementptr &([30 * i32]* %14)[i64 0][i64 1];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([30 * i32]* %14)[i64 0][i64 2];
    store i32* %17 with i32 1;
    i32* %18 = getelementptr &([30 * i32]* %14)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([30 * i32]* %14)[i64 0][i64 4];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([30 * i32]* %14)[i64 0][i64 5];
    store i32* %20 with i32 1;
    i32* %21 = getelementptr &([30 * i32]* %14)[i64 0][i64 6];
    store i32* %21 with i32 1;
    i32* %22 = getelementptr &([30 * i32]* %14)[i64 0][i64 7];
    store i32* %22 with i32 1;
    i32* %23 = getelementptr &([30 * i32]* %14)[i64 0][i64 8];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([30 * i32]* %14)[i64 0][i64 9];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([30 * i32]* %14)[i64 0][i64 10];
    store i32* %25 with i32 1;
    i32* %26 = getelementptr &([30 * i32]* %14)[i64 0][i64 11];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([30 * i32]* %14)[i64 0][i64 12];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([30 * i32]* %14)[i64 0][i64 13];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &([30 * i32]* %14)[i64 0][i64 14];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([30 * i32]* %14)[i64 0][i64 15];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([30 * i32]* %14)[i64 0][i64 16];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &([30 * i32]* %14)[i64 0][i64 17];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([30 * i32]* %14)[i64 0][i64 18];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &([30 * i32]* %14)[i64 0][i64 19];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &([30 * i32]* %14)[i64 0][i64 20];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &([30 * i32]* %14)[i64 0][i64 21];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([30 * i32]* %14)[i64 0][i64 22];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([30 * i32]* %14)[i64 0][i64 23];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([30 * i32]* %14)[i64 0][i64 24];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &([30 * i32]* %14)[i64 0][i64 25];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([30 * i32]* %14)[i64 0][i64 26];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &([30 * i32]* %14)[i64 0][i64 27];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &([30 * i32]* %14)[i64 0][i64 28];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &([30 * i32]* %14)[i64 0][i64 29];
    store i32* %44 with i32 1;
    i32 %45 = add i32 %13, i32 1;
    i1 %46 = scmp lt i32 %45, i32 30;
    cbr i1 %46(prob = 0.97), ^while.body, ^b1;
^b:
    ret i32 0;
^b1:
    i1 %47 = scmp gt i32 %11, i32 0;
    i1 %48 = scmp gt i32 %12, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %49 = phi [^b1, i32 0] [^b3, i32 %67];
    i32 %50 = phi [^b1, i32 0] [^b3, i32 %68];
    i32 %51 = phi [^b1, i32 1] [^b3, i32 %69];
    [30 * i32]* %52 = getelementptr &([30 * [30 * i32]]* @a)[i64 0][i32 %51];
    cbr i1 %47(prob = 0.97), ^while.body2, ^b3;
^b2:
    i32 %53 = phi [^b1, i32 0] [^b3, i32 %67];
    i32 %54 = phi [^b1, i32 0] [^b3, i32 %68];
    i32 %55 = call (i32, i32, i32, [4 * [2 * i32]]*, i32*, i32*, i32*, i32*, i32*, i32*) -> i32 @search(i32 %53, i32 %54, i32 1, [4 * [2 * i32]]* %step, i32* %w, i32* %h, i32* %x_0, i32* %y_0, i32* %x_1, i32* %y_1);
    i1 %56 = scmp lt i32 %55, i32 11;
    i32 %57 = select i1 %56 ? i32 %55 : i32 -1;
    call (i32) -> void @putint(i32 %57);
    call (i32) -> void @putch(i32 10);
    i32 %58 = call () -> i32 @getint();
    store i32* %w with i32 %58;
    i32 %59 = call () -> i32 @getint();
    store i32* %h with i32 %59;
    i1 %60 = scmp neq i32 %58, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body, ^b;
^while.body2:
    i32 %61 = phi [^while.body1, i32 %49] [^b4, i32 %72];
    i32 %62 = phi [^while.body1, i32 %50] [^b4, i32 %73];
    i32 %63 = phi [^while.body1, i32 1] [^b4, i32 %74];
    i32* %64 = getelementptr &([30 * i32]* %52)[i64 0][i32 %63];
    i32 %65 = call () -> i32 @getint();
    store i32* %64 with i32 %65;
    i1 %66 = scmp eq i32 %65, i32 2;
    cbr i1 %66(prob = 0.5), ^if.then, ^if.else;
^b3:
    i32 %67 = phi [^while.body1, i32 %49] [^b4, i32 %72];
    i32 %68 = phi [^while.body1, i32 %50] [^b4, i32 %73];
    i32 %69 = add i32 %51, i32 1;
    i1 %70 = scmp le i32 %69, i32 %12;
    cbr i1 %70(prob = 0.97), ^while.body1, ^b2;
^if.then:
    store i32* %x_0 with i32 %51;
    store i32* %y_0 with i32 %63;
    ubr ^b4;
^if.else:
    i1 %71 = scmp eq i32 %65, i32 3;
    cbr i1 %71(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    store i32* %x_1 with i32 %51;
    store i32* %y_1 with i32 %63;
    ubr ^b4;
^b4:
    i32 %72 = phi [^if.then, i32 %51] [^if.else, i32 %61] [^if.then1, i32 %61];
    i32 %73 = phi [^if.then, i32 %63] [^if.else, i32 %62] [^if.then1, i32 %62];
    i32 %74 = add i32 %63, i32 1;
    i1 %75 = scmp le i32 %74, i32 %11;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b3;
}
