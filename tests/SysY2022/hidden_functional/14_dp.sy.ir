internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { Entry } {
^entry:
    i32* %res = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %x = alloc i32;
    i32* %W = alloc i32;
    i32* %T = alloc i32;
    store i32* %T with i32 0;
    store i32* %W with i32 0;
    store i32* %x with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %T with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %W with i32 %1;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* %T;
    i1 %4 = scmp le i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = call () -> i32 @getint();
    store i32* %x with i32 %7;
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    [2 * i32]* %10 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %9];
    i32 %11 = load i32* %x;
    i32 %12 = srem i32 %11, i32 2;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([2 * i32]* %10)[i64 0][i64 %13];
    store i32* %14 with i32 1;
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    [35 * i32]* %17 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %16];
    i32* %18 = getelementptr &([35 * i32]* %17)[i64 0][i64 0];
    i32 %19 = load i32* %i;
    i32 %20 = sub i32 %19, i32 1;
    i64 %21 = sext i32 %20 to i64;
    [35 * i32]* %22 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %21];
    i32* %23 = getelementptr &([35 * i32]* %22)[i64 0][i64 0];
    i32 %24 = load i32* %23;
    i32 %25 = load i32* %i;
    i64 %26 = sext i32 %25 to i64;
    [2 * i32]* %27 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %26];
    i32* %28 = getelementptr &([2 * i32]* %27)[i64 0][i64 1];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %24, i32 %29;
    store i32* %18 with i32 %30;
    i32 %31 = load i32* %i;
    i32 %32 = add i32 %31, i32 1;
    store i32* %i with i32 %32;
    ubr ^while.header;
^b:
    store i32* %i with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %33 = load i32* %i;
    i32 %34 = load i32* %T;
    i1 %35 = scmp le i32 %33, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %j with i32 1;
    ubr ^while.header2;
^b1:
    store i32* %res with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %38 = load i32* %j;
    i32 %39 = load i32* %W;
    i1 %40 = scmp le i32 %38, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body2, ^b2;
^while.header3:
    i32 %43 = load i32* %j;
    i32 %44 = load i32* %W;
    i1 %45 = scmp le i32 %43, i32 %44;
    i32 %46 = zext i1 %45 to i32;
    i1 %47 = scmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.97), ^while.body3, ^b3;
^b2:
    i32 %48 = load i32* %i;
    i32 %49 = add i32 %48, i32 1;
    store i32* %i with i32 %49;
    ubr ^while.header1;
^while.body2:
    i32 %50 = load i32* %i;
    i32 %51 = sub i32 %50, i32 1;
    i64 %52 = sext i32 %51 to i64;
    [35 * i32]* %53 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %52];
    i32 %54 = load i32* %j;
    i64 %55 = sext i32 %54 to i64;
    i32* %56 = getelementptr &([35 * i32]* %53)[i64 0][i64 %55];
    i32 %57 = load i32* %56;
    i32 %58 = load i32* %i;
    i64 %59 = sext i32 %58 to i64;
    [2 * i32]* %60 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %59];
    i32 %61 = load i32* %j;
    i32 %62 = add i32 %61, i32 1;
    i32 %63 = srem i32 %62, i32 2;
    i64 %64 = sext i32 %63 to i64;
    i32* %65 = getelementptr &([2 * i32]* %60)[i64 0][i64 %64];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %57, i32 %66;
    i32 %68 = load i32* %i;
    i32 %69 = sub i32 %68, i32 1;
    i64 %70 = sext i32 %69 to i64;
    [35 * i32]* %71 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %70];
    i32 %72 = load i32* %j;
    i32 %73 = sub i32 %72, i32 1;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = getelementptr &([35 * i32]* %71)[i64 0][i64 %74];
    i32 %76 = load i32* %75;
    i32 %77 = load i32* %i;
    i64 %78 = sext i32 %77 to i64;
    [2 * i32]* %79 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %78];
    i32 %80 = load i32* %j;
    i32 %81 = add i32 %80, i32 1;
    i32 %82 = srem i32 %81, i32 2;
    i64 %83 = sext i32 %82 to i64;
    i32* %84 = getelementptr &([2 * i32]* %79)[i64 0][i64 %83];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %76, i32 %85;
    i1 %87 = scmp gt i32 %67, i32 %86;
    i32 %88 = zext i1 %87 to i32;
    i1 %89 = scmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.5), ^if.then, ^if.else;
^while.body3:
    i32 %90 = load i32* %res;
    i32 %91 = load i32* %T;
    i64 %92 = sext i32 %91 to i64;
    [35 * i32]* %93 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %92];
    i32 %94 = load i32* %j;
    i64 %95 = sext i32 %94 to i64;
    i32* %96 = getelementptr &([35 * i32]* %93)[i64 0][i64 %95];
    i32 %97 = load i32* %96;
    i1 %98 = scmp lt i32 %90, i32 %97;
    i32 %99 = zext i1 %98 to i32;
    i1 %100 = scmp neq i32 %99, i32 0;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b4;
^b3:
    i32 %101 = load i32* %res;
    ret i32 %101;
^if.then:
    i32 %102 = load i32* %i;
    i64 %103 = sext i32 %102 to i64;
    [35 * i32]* %104 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %103];
    i32 %105 = load i32* %j;
    i64 %106 = sext i32 %105 to i64;
    i32* %107 = getelementptr &([35 * i32]* %104)[i64 0][i64 %106];
    i32 %108 = load i32* %i;
    i32 %109 = sub i32 %108, i32 1;
    i64 %110 = sext i32 %109 to i64;
    [35 * i32]* %111 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %110];
    i32 %112 = load i32* %j;
    i64 %113 = sext i32 %112 to i64;
    i32* %114 = getelementptr &([35 * i32]* %111)[i64 0][i64 %113];
    i32 %115 = load i32* %114;
    i32 %116 = load i32* %i;
    i64 %117 = sext i32 %116 to i64;
    [2 * i32]* %118 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %117];
    i32 %119 = load i32* %j;
    i32 %120 = add i32 %119, i32 1;
    i32 %121 = srem i32 %120, i32 2;
    i64 %122 = sext i32 %121 to i64;
    i32* %123 = getelementptr &([2 * i32]* %118)[i64 0][i64 %122];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %115, i32 %124;
    store i32* %107 with i32 %125;
    ubr ^b5;
^if.else:
    i32 %126 = load i32* %i;
    i64 %127 = sext i32 %126 to i64;
    [35 * i32]* %128 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %127];
    i32 %129 = load i32* %j;
    i64 %130 = sext i32 %129 to i64;
    i32* %131 = getelementptr &([35 * i32]* %128)[i64 0][i64 %130];
    i32 %132 = load i32* %i;
    i32 %133 = sub i32 %132, i32 1;
    i64 %134 = sext i32 %133 to i64;
    [35 * i32]* %135 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %134];
    i32 %136 = load i32* %j;
    i32 %137 = sub i32 %136, i32 1;
    i64 %138 = sext i32 %137 to i64;
    i32* %139 = getelementptr &([35 * i32]* %135)[i64 0][i64 %138];
    i32 %140 = load i32* %139;
    i32 %141 = load i32* %i;
    i64 %142 = sext i32 %141 to i64;
    [2 * i32]* %143 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i64 %142];
    i32 %144 = load i32* %j;
    i32 %145 = add i32 %144, i32 1;
    i32 %146 = srem i32 %145, i32 2;
    i64 %147 = sext i32 %146 to i64;
    i32* %148 = getelementptr &([2 * i32]* %143)[i64 0][i64 %147];
    i32 %149 = load i32* %148;
    i32 %150 = add i32 %140, i32 %149;
    store i32* %131 with i32 %150;
    ubr ^b5;
^if.then1:
    i32 %151 = load i32* %T;
    i64 %152 = sext i32 %151 to i64;
    [35 * i32]* %153 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i64 %152];
    i32 %154 = load i32* %j;
    i64 %155 = sext i32 %154 to i64;
    i32* %156 = getelementptr &([35 * i32]* %153)[i64 0][i64 %155];
    i32 %157 = load i32* %156;
    store i32* %res with i32 %157;
    ubr ^b4;
^b4:
    i32 %158 = load i32* %j;
    i32 %159 = add i32 %158, i32 1;
    store i32* %j with i32 %159;
    ubr ^while.header3;
^b5:
    i32 %160 = load i32* %j;
    i32 %161 = add i32 %160, i32 1;
    store i32* %j with i32 %161;
    ubr ^while.header2;
}
