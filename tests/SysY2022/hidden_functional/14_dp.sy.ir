internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t, align 8 { Flexible };
internal [1005 * [35 * i32]]* @dp, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [1005 * [35 * i32]]* %1 = ptrcast [1005 * [35 * i32]]* @dp to [1005 * [35 * i32]]*;
    [35 * i32]* %2 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %0];
    i32 %3 = call () -> i32 @getint();
    i32 %4 = add i32 %3, i32 1;
    i1 %5 = icmp sgt i32 %4, i32 4;
    i32 %6 = add i32 %0, i32 1;
    i1 %7 = icmp sgt i32 %0, i32 0;
    i1 %8 = icmp sgt i32 %3, i32 0;
    i32 %9 = add i32 %3, i32 -2;
    i32 %10 = add i32 %3, i32 -17;
    [1005 * [2 * i32]]* %11 = ptrcast [1005 * [2 * i32]]* @t to [1005 * [2 * i32]]*;
    cbr i1 %7(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %24];
    i32 %13 = call () -> i32 @getint();
    i32 %14 = and i32 %13, i32 1;
    [2 * i32]* %15 = getelementptr &([1005 * [2 * i32]]* %11)[i64 0][i32 %12];
    i32* %16 = getelementptr &([2 * i32]* %15)[i64 0][i32 %14];
    store i32* %16 with i32 1;
    [35 * i32]* %17 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %12];
    i32* %18 = getelementptr &([35 * i32]* %17)[i64 -1][i64 0];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([2 * i32]* %15)[i64 0][i64 1];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &([35 * i32]* %17)[i64 0][i64 0];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %12, i32 1;
    i1 %25 = icmp sgt i32 %6, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body, ^while.body1;
  ^b:
    i1 %26 = icmp sgt i32 %3, i32 -1;
    cbr i1 %26(prob = 0.984615), ^super.header, ^b1;
  ^super.header:
    i1 %27 = icmp sgt i32 %4, i32 3;
    cbr i1 %27(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.body1:
    i32 %28 = phi [^while.body, i32 1] [^b2, i32 %38];
    cbr i1 %8(prob = 0.984615), ^super.header2, ^b2;
  ^b1:
    i32 %29 = phi [^b, i32 0] [^scalar.header, i32 %36] [^while.body4, i32 %142];
    ret i32 %29;
  ^super.header1:
    i1 %30 = icmp sgt i32 %9, i32 15;
    cbr i1 %30(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^super.header2:
    [35 * i32]* %31 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %28];
    [35 * i32]* %32 = getelementptr &([35 * i32]* %31)[i64 -1];
    [2 * i32]* %33 = getelementptr &([1005 * [2 * i32]]* %11)[i64 0][i32 %28];
    cbr i1 %5(prob = 0.941176), ^while.body3, ^scalar.header2;
  ^scalar.header:
    i32 %34 = phi [^super.header, i32 0] [^scalar.final, i32 %145];
    i32 %35 = phi [^super.header, i32 0] [^scalar.final, i32 %146];
    i32 %36 = phi [^super.header, i32 undef] [^scalar.final, i32 %145];
    i1 %37 = icmp sgt i32 %4, i32 %35;
    cbr i1 %37(prob = 0.75), ^while.body4, ^b1;
  ^b2:
    i32 %38 = add i32 %28, i32 1;
    i1 %39 = icmp sgt i32 %6, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body1, ^b;
  ^while.body2:
    i32 %40 = phi [^super.header1, i32 0] [^while.body2, i32 %90];
    i32 %41 = phi [^super.header1, i32 0] [^while.body2, i32 %89];
    i32* %42 = getelementptr &([35 * i32]* %2)[i64 0][i32 %40];
    i32 %43 = load i32* %42;
    i32 %44 = smax i32 %41, i32 %43;
    i32* %45 = getelementptr &(i32* %42)[i64 1];
    i32 %46 = load i32* %45;
    i32 %47 = smax i32 %44, i32 %46;
    i32* %48 = getelementptr &(i32* %42)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = smax i32 %47, i32 %49;
    i32* %51 = getelementptr &(i32* %42)[i64 3];
    i32 %52 = load i32* %51;
    i32 %53 = smax i32 %50, i32 %52;
    i32* %54 = getelementptr &(i32* %42)[i64 4];
    i32 %55 = load i32* %54;
    i32 %56 = smax i32 %53, i32 %55;
    i32* %57 = getelementptr &(i32* %42)[i64 5];
    i32 %58 = load i32* %57;
    i32 %59 = smax i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %42)[i64 6];
    i32 %61 = load i32* %60;
    i32 %62 = smax i32 %59, i32 %61;
    i32* %63 = getelementptr &(i32* %42)[i64 7];
    i32 %64 = load i32* %63;
    i32 %65 = smax i32 %62, i32 %64;
    i32* %66 = getelementptr &(i32* %42)[i64 8];
    i32 %67 = load i32* %66;
    i32 %68 = smax i32 %65, i32 %67;
    i32* %69 = getelementptr &(i32* %42)[i64 9];
    i32 %70 = load i32* %69;
    i32 %71 = smax i32 %68, i32 %70;
    i32* %72 = getelementptr &(i32* %42)[i64 10];
    i32 %73 = load i32* %72;
    i32 %74 = smax i32 %71, i32 %73;
    i32* %75 = getelementptr &(i32* %42)[i64 11];
    i32 %76 = load i32* %75;
    i32 %77 = smax i32 %74, i32 %76;
    i32* %78 = getelementptr &(i32* %42)[i64 12];
    i32 %79 = load i32* %78;
    i32 %80 = smax i32 %77, i32 %79;
    i32* %81 = getelementptr &(i32* %42)[i64 13];
    i32 %82 = load i32* %81;
    i32 %83 = smax i32 %80, i32 %82;
    i32* %84 = getelementptr &(i32* %42)[i64 14];
    i32 %85 = load i32* %84;
    i32 %86 = smax i32 %83, i32 %85;
    i32* %87 = getelementptr &(i32* %42)[i64 15];
    i32 %88 = load i32* %87;
    i32 %89 = smax i32 %86, i32 %88;
    i32 %90 = add i32 %40, i32 16;
    i1 %91 = icmp sgt i32 %10, i32 %90;
    cbr i1 %91(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^while.body3:
    i32 %92 = phi [^super.header2, i32 1] [^while.body3, i32 %122];
    i32 %93 = add i32 %92, i32 1;
    i32 %94 = and i32 %93, i32 1;
    i32* %95 = getelementptr &([2 * i32]* %33)[i64 0][i32 %94];
    i32* %96 = getelementptr &([35 * i32]* %32)[i64 0][i32 %92];
    i32 %97 = load i32* %96;
    i32 %98 = load i32* %95;
    i32* %99 = getelementptr &(i32* %96)[i64 -1];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %98, i32 %100;
    i32 %102 = add i32 %97, i32 %98;
    i32 %103 = smax i32 %101, i32 %102;
    i32* %104 = getelementptr &([35 * i32]* %31)[i64 0][i32 %92];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %96)[i64 1];
    i32 %106 = load i32* %105;
    i32 %107 = and i32 %92, i32 1;
    i32* %108 = getelementptr &([2 * i32]* %33)[i64 0][i32 %107];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %106, i32 %109;
    i32 %111 = add i32 %97, i32 %109;
    i32 %112 = smax i32 %110, i32 %111;
    i32* %113 = getelementptr &(i32* %104)[i64 1];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %96)[i64 2];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %98, i32 %115;
    i32 %117 = add i32 %98, i32 %106;
    i32 %118 = smax i32 %116, i32 %117;
    i32* %119 = getelementptr &(i32* %104)[i64 2];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %96)[i64 3];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %92, i32 4;
    i32 %123 = and i32 %122, i32 1;
    i32* %124 = getelementptr &([2 * i32]* %33)[i64 0][i32 %123];
    i32 %125 = load i32* %124;
    i32 %126 = add i32 %121, i32 %125;
    i32 %127 = add i32 %115, i32 %125;
    i32 %128 = smax i32 %126, i32 %127;
    i32* %129 = getelementptr &(i32* %104)[i64 3];
    store i32* %129 with i32 %128;
    i1 %130 = icmp sgt i32 %9, i32 %122;
    cbr i1 %130(prob = 0.941176), ^while.body3, ^scalar.header2;
  ^scalar.header1:
    i32 %131 = phi [^super.header1, i32 0] [^while.body2, i32 %90];
    i32 %132 = phi [^super.header1, i32 0] [^while.body2, i32 %89];
    i32 %133 = phi [^super.header1, i32 undef] [^while.body2, i32 %89];
    i32 %134 = phi [^super.header1, i32 undef] [^while.body2, i32 %90];
    i1 %135 = icmp sgt i32 %9, i32 %131;
    cbr i1 %135(prob = 0.75), ^while.body5, ^scalar.final;
  ^scalar.header2:
    i32 %136 = phi [^super.header2, i32 1] [^while.body3, i32 %122];
    i1 %137 = icmp sgt i32 %4, i32 %136;
    cbr i1 %137(prob = 0.75), ^while.body6, ^b2;
  ^while.body4 {scalar}:
    i32 %138 = phi [^scalar.header, i32 %35] [^while.body4, i32 %143];
    i32 %139 = phi [^scalar.header, i32 %34] [^while.body4, i32 %142];
    i32* %140 = getelementptr &([35 * i32]* %2)[i64 0][i32 %138];
    i32 %141 = load i32* %140;
    i32 %142 = smax i32 %139, i32 %141;
    i32 %143 = add i32 %138, i32 1;
    i1 %144 = icmp sgt i32 %4, i32 %143;
    cbr i1 %144(prob = 0.75), ^while.body4, ^b1;
  ^scalar.final:
    i32 %145 = phi [^scalar.header1, i32 %133] [^while.body5, i32 %160];
    i32 %146 = phi [^scalar.header1, i32 %134] [^while.body5, i32 %161];
    ubr ^scalar.header;
  ^while.body5 {scalar}:
    i32 %147 = phi [^scalar.header1, i32 %132] [^while.body5, i32 %160];
    i32 %148 = phi [^scalar.header1, i32 %131] [^while.body5, i32 %161];
    i32* %149 = getelementptr &([35 * i32]* %2)[i64 0][i32 %148];
    i32 %150 = load i32* %149;
    i32 %151 = smax i32 %147, i32 %150;
    i32* %152 = getelementptr &(i32* %149)[i64 1];
    i32 %153 = load i32* %152;
    i32 %154 = smax i32 %151, i32 %153;
    i32* %155 = getelementptr &(i32* %149)[i64 2];
    i32 %156 = load i32* %155;
    i32 %157 = smax i32 %154, i32 %156;
    i32* %158 = getelementptr &(i32* %149)[i64 3];
    i32 %159 = load i32* %158;
    i32 %160 = smax i32 %157, i32 %159;
    i32 %161 = add i32 %148, i32 4;
    i1 %162 = icmp sgt i32 %9, i32 %161;
    cbr i1 %162(prob = 0.75), ^while.body5, ^scalar.final;
  ^while.body6 {scalar}:
    i32 %163 = phi [^scalar.header2, i32 %136] [^while.body6, i32 %164];
    i32 %164 = add i32 %163, i32 1;
    i32 %165 = and i32 %164, i32 1;
    i32* %166 = getelementptr &([2 * i32]* %33)[i64 0][i32 %165];
    i32* %167 = getelementptr &([35 * i32]* %32)[i64 0][i32 %163];
    i32 %168 = load i32* %167;
    i32 %169 = load i32* %166;
    i32* %170 = getelementptr &(i32* %167)[i64 -1];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 %171;
    i32 %173 = add i32 %168, i32 %169;
    i32 %174 = smax i32 %172, i32 %173;
    i32* %175 = getelementptr &([35 * i32]* %31)[i64 0][i32 %163];
    store i32* %175 with i32 %174;
    i1 %176 = icmp sgt i32 %4, i32 %164;
    cbr i1 %176(prob = 0.75), ^while.body6, ^b2;
}
