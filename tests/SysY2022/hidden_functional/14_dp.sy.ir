internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t, align 8 { Flexible };
internal [1005 * [35 * i32]]* @dp, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [1005 * [35 * i32]]* %1 = ptrcast [1005 * [35 * i32]]* @dp to [1005 * [35 * i32]]*;
    [35 * i32]* %2 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %0];
    i1 %3 = icmp sgt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    i1 %5 = icmp sgt i32 %4, i32 0;
    [1005 * [2 * i32]]* %6 = ptrcast [1005 * [2 * i32]]* @t to [1005 * [2 * i32]]*;
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %7 = phi [^entry, i32 1] [^while.body, i32 %19];
    i32 %8 = call () -> i32 @getint();
    i32 %9 = and i32 %8, i32 1;
    [2 * i32]* %10 = getelementptr &([1005 * [2 * i32]]* %6)[i64 0][i32 %7];
    i32* %11 = getelementptr &([2 * i32]* %10)[i64 0][i32 %9];
    store i32* %11 with i32 1;
    [35 * i32]* %12 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %7];
    i32* %13 = getelementptr &([35 * i32]* %12)[i64 -1][i64 0];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([2 * i32]* %10)[i64 0][i64 1];
    i32 %16 = load i32* %15;
    i32 %17 = add i32 %14, i32 %16;
    i32* %18 = getelementptr &([35 * i32]* %12)[i64 0][i64 0];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %7, i32 1;
    i1 %20 = icmp sge i32 %0, i32 %19;
    cbr i1 %20(prob = 0.984615), ^while.body, ^while.body2;
  ^b:
    i1 %21 = icmp sgt i32 %4, i32 -1;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %22 = phi [^b, i32 0] [^while.body1, i32 %27];
    i32 %23 = phi [^b, i32 0] [^while.body1, i32 %26];
    i32* %24 = getelementptr &([35 * i32]* %2)[i64 0][i32 %22];
    i32 %25 = load i32* %24;
    i32 %26 = smax i32 %23, i32 %25;
    i32 %27 = add i32 %22, i32 1;
    i1 %28 = icmp sge i32 %4, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b1;
  ^while.body2:
    i32 %29 = phi [^while.body, i32 1] [^b2, i32 %48];
    [35 * i32]* %30 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %29];
    [35 * i32]* %31 = getelementptr &([35 * i32]* %30)[i64 -1];
    [2 * i32]* %32 = getelementptr &([1005 * [2 * i32]]* %6)[i64 0][i32 %29];
    cbr i1 %5(prob = 0.984615), ^while.body3, ^b2;
  ^b1:
    i32 %33 = phi [^b, i32 0] [^while.body1, i32 %26];
    ret i32 %33;
  ^while.body3:
    i32 %34 = phi [^while.body2, i32 1] [^while.body3, i32 %35];
    i32 %35 = add i32 %34, i32 1;
    i32 %36 = and i32 %35, i32 1;
    i32* %37 = getelementptr &([2 * i32]* %32)[i64 0][i32 %36];
    i32* %38 = getelementptr &([35 * i32]* %31)[i64 0][i32 %34];
    i32 %39 = load i32* %38;
    i32 %40 = load i32* %37;
    i32* %41 = getelementptr &(i32* %38)[i64 -1];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32 %44 = add i32 %39, i32 %40;
    i32 %45 = smax i32 %43, i32 %44;
    i32* %46 = getelementptr &([35 * i32]* %30)[i64 0][i32 %34];
    store i32* %46 with i32 %45;
    i1 %47 = icmp sge i32 %4, i32 %35;
    cbr i1 %47(prob = 0.984615), ^while.body3, ^b2;
  ^b2:
    i32 %48 = add i32 %29, i32 1;
    i1 %49 = icmp sge i32 %0, i32 %48;
    cbr i1 %49(prob = 0.984615), ^while.body2, ^b;
}
