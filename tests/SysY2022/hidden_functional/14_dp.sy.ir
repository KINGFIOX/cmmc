internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 %1];
    i32 %4 = phi [^while.body, i32 %17] [^entry, i32 1];
    i1 %5 = scmp le i32 %4, i32 %2;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %6 = call () -> i32 @getint();
    [2 * i32]* %7 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %4];
    i32 %8 = srem i32 %6, i32 2;
    i32* %9 = getelementptr &([2 * i32]* %7)[i64 0][i32 %8];
    store i32* %9 with i32 1;
    [35 * i32]* %10 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %4];
    i32* %11 = getelementptr &([35 * i32]* %10)[i64 0][i64 0];
    i32* %12 = getelementptr &([35 * i32]* %10)[i64 -1][i64 0];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([2 * i32]* %7)[i64 0][i64 1];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %13, i32 %15;
    store i32* %11 with i32 %16;
    i32 %17 = add i32 %4, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %18 = phi [^while.header, i32 %2] [^b, i32 %22];
    i32 %19 = phi [^while.header, i32 %3] [^b, i32 %23];
    i32 %20 = phi [^while.header, i32 1] [^b, i32 %32];
    i1 %21 = scmp le i32 %20, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.header2, ^while.header3;
^while.header2:
    i32 %22 = phi [^if.else, i32 %22] [^if.then, i32 %22] [^while.header1, i32 %18];
    i32 %23 = phi [^if.else, i32 %23] [^if.then, i32 %23] [^while.header1, i32 %19];
    i32 %24 = phi [^if.else, i32 %24] [^if.then, i32 %24] [^while.header1, i32 %20];
    i32 %25 = phi [^if.else, i32 %38] [^if.then, i32 %38] [^while.header1, i32 1];
    i1 %26 = scmp le i32 %25, i32 %23;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b;
^while.header3:
    i32 %27 = phi [^while.header1, i32 %18] [^b2, i32 %27];
    i32 %28 = phi [^while.header1, i32 %19] [^b2, i32 %28];
    i32 %29 = phi [^while.header1, i32 0] [^b2, i32 %65];
    i32 %30 = phi [^while.header1, i32 0] [^b2, i32 %64];
    i1 %31 = scmp le i32 %29, i32 %28;
    cbr i1 %31(prob = 0.97), ^while.body2, ^b1;
^b:
    i32 %32 = add i32 %24, i32 1;
    ubr ^while.header1;
^while.body1:
    i32 %33 = add i32 %24, i32 -1;
    [35 * i32]* %34 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %33];
    i32* %35 = getelementptr &([35 * i32]* %34)[i64 0][i32 %25];
    i32 %36 = load i32* %35;
    [2 * i32]* %37 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %24];
    i32 %38 = add i32 %25, i32 1;
    i32 %39 = srem i32 %38, i32 2;
    i32* %40 = getelementptr &([2 * i32]* %37)[i64 0][i32 %39];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %41, i32 %36;
    i32* %43 = getelementptr &(i32* %35)[i64 -1];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %41, i32 %44;
    i1 %46 = scmp gt i32 %42, i32 %45;
    cbr i1 %46(prob = 0.5), ^if.then, ^if.else;
^while.body2:
    [35 * i32]* %47 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %27];
    i32* %48 = getelementptr &([35 * i32]* %47)[i64 0][i32 %29];
    i32 %49 = load i32* %48;
    i1 %50 = scmp lt i32 %30, i32 %49;
    cbr i1 %50(prob = 0.5), ^if.then1, ^b2;
^b1:
    ret i32 %30;
^if.then:
    [35 * i32]* %51 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %24];
    i32* %52 = getelementptr &([35 * i32]* %51)[i64 0][i32 %25];
    [35 * i32]* %53 = getelementptr &([35 * i32]* %51)[i64 -1];
    i32* %54 = getelementptr &([35 * i32]* %53)[i64 0][i32 %25];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %41, i32 %55;
    store i32* %52 with i32 %56;
    ubr ^while.header2;
^if.else:
    [35 * i32]* %57 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %24];
    i32* %58 = getelementptr &([35 * i32]* %57)[i64 0][i32 %25];
    [35 * i32]* %59 = getelementptr &([35 * i32]* %57)[i64 -1];
    i32 %60 = add i32 %25, i32 -1;
    i32* %61 = getelementptr &([35 * i32]* %59)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %41, i32 %62;
    store i32* %58 with i32 %63;
    ubr ^while.header2;
^if.then1:
    ubr ^b2;
^b2:
    i32 %64 = phi [^if.then1, i32 %49] [^while.body2, i32 %30];
    i32 %65 = add i32 %29, i32 1;
    ubr ^while.header3;
}
