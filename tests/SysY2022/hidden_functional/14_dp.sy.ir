internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^b:
    [35 * i32]* %3 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %0];
    ubr ^while.header;
^while.body:
    i32 %4 = phi [^entry, i32 1] [^while.body, i32 %16];
    i32 %5 = call () -> i32 @getint();
    [2 * i32]* %6 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %4];
    i32 %7 = srem i32 %5, i32 2;
    i32* %8 = getelementptr &([2 * i32]* %6)[i64 0][i32 %7];
    store i32* %8 with i32 1;
    [35 * i32]* %9 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %4];
    i32* %10 = getelementptr &([35 * i32]* %9)[i64 0][i64 0];
    i32* %11 = getelementptr &([35 * i32]* %9)[i64 -1][i64 0];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([2 * i32]* %6)[i64 0][i64 1];
    i32 %14 = load i32* %13;
    i32 %15 = add i32 %12, i32 %14;
    store i32* %10 with i32 %15;
    i32 %16 = add i32 %4, i32 1;
    i1 %17 = scmp le i32 %16, i32 %0;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.header:
    i32 %18 = phi [^b, i32 1] [^b1, i32 %28];
    i1 %19 = scmp le i32 %18, i32 %0;
    i32 %20 = add i32 %18, i32 -1;
    [35 * i32]* %21 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %20];
    [2 * i32]* %22 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %18];
    [35 * i32]* %23 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %18];
    [35 * i32]* %24 = getelementptr &([35 * i32]* %23)[i64 -1];
    cbr i1 %19(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %25 = phi [^while.header, i32 1] [^if.then, i32 %31] [^if.else, i32 %31];
    i1 %26 = scmp le i32 %25, i32 %1;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i1 %27 = scmp gt i32 %1, i32 -1;
    cbr i1 %27(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %28 = add i32 %18, i32 1;
    ubr ^while.header;
^while.body1:
    i32* %29 = getelementptr &([35 * i32]* %21)[i64 0][i32 %25];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %25, i32 1;
    i32 %32 = srem i32 %31, i32 2;
    i32* %33 = getelementptr &([2 * i32]* %22)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %30, i32 %34;
    i32* %36 = getelementptr &(i32* %29)[i64 -1];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %34, i32 %37;
    i1 %39 = scmp gt i32 %35, i32 %38;
    cbr i1 %39(prob = 0.5), ^if.then, ^if.else;
^while.body2:
    i32 %40 = phi [^while.header2, i32 0] [^while.body2, i32 %45];
    i32 %41 = phi [^while.header2, i32 0] [^while.body2, i32 %46];
    i32* %42 = getelementptr &([35 * i32]* %3)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %40, i32 %43;
    i32 %45 = select i1 %44 ? i32 %43 : i32 %40;
    i32 %46 = add i32 %41, i32 1;
    i1 %47 = scmp le i32 %46, i32 %1;
    cbr i1 %47(prob = 0.97), ^while.body2, ^b2;
^b2:
    i32 %48 = phi [^while.header2, i32 0] [^while.body2, i32 %45];
    ret i32 %48;
^if.then:
    i32* %49 = getelementptr &([35 * i32]* %23)[i64 0][i32 %25];
    i32* %50 = getelementptr &([35 * i32]* %24)[i64 0][i32 %25];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %34, i32 %51;
    store i32* %49 with i32 %52;
    ubr ^while.header1;
^if.else:
    i32* %53 = getelementptr &([35 * i32]* %23)[i64 0][i32 %25];
    i32 %54 = add i32 %25, i32 -1;
    i32* %55 = getelementptr &([35 * i32]* %24)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %56, i32 %34;
    store i32* %53 with i32 %57;
    ubr ^while.header1;
}
