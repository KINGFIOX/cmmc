internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp le i32 1, i32 %0;
    cbr i1 %2, [ ^while.body i32 %0, i32 %1, i32 1 ], [ ^b i32 %0, i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = call () -> i32 @getint();
    [2 * i32]* %1 = getelementptr &([1005 * [2 * i32]]* @t)[i32 0][i32 %arg2];
    i32 %2 = srem i32 %0, i32 2;
    i32* %3 = getelementptr &([2 * i32]* %1)[i32 0][i32 %2];
    store i32* %3 with i32 1;
    [35 * i32]* %4 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %arg2];
    i32* %5 = getelementptr &([35 * i32]* %4)[i32 0][i32 0];
    i32 %6 = sub i32 %arg2, i32 1;
    [35 * i32]* %7 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %6];
    i32* %8 = getelementptr &([35 * i32]* %7)[i32 0][i32 0];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &([2 * i32]* %1)[i32 0][i32 1];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %9, i32 %11;
    store i32* %5 with i32 %12;
    i32 %13 = add i32 %arg2, i32 1;
    i1 %14 = scmp le i32 %13, i32 %arg;
    cbr i1 %14, [ ^while.body i32 %arg, i32 %arg1, i32 %13 ], [ ^b i32 %arg, i32 %arg1 ];
^b(i32 %arg, i32 %arg1):
    i1 %0 = scmp le i32 1, i32 %arg;
    cbr i1 %0, [ ^while.body1 i32 %arg, i32 %arg1, i32 1 ], [ ^b1 i32 %arg, i32 %arg1 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp le i32 1, i32 %arg1;
    cbr i1 %0, [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2, i32 1 ], [ ^b2 i32 %arg, i32 %arg1, i32 %arg2 ];
^b1(i32 %arg, i32 %arg1):
    i1 %0 = scmp le i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 %arg1, i32 0, i32 0 ], [ ^b3 i32 0 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg2, i32 1;
    [35 * i32]* %1 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %0];
    i32* %2 = getelementptr &([35 * i32]* %1)[i32 0][i32 %arg3];
    i32 %3 = load i32* %2;
    [2 * i32]* %4 = getelementptr &([1005 * [2 * i32]]* @t)[i32 0][i32 %arg2];
    i32 %5 = add i32 %arg3, i32 1;
    i32 %6 = srem i32 %5, i32 2;
    i32* %7 = getelementptr &([2 * i32]* %4)[i32 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %3, i32 %8;
    i32 %10 = sub i32 %arg3, i32 1;
    i32* %11 = getelementptr &([35 * i32]* %1)[i32 0][i32 %10];
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %12, i32 %8;
    i1 %14 = scmp gt i32 %9, i32 %13;
    cbr i1 %14, [ ^indirect i32 %arg3, i32 %arg2, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^indirect1 i32 %arg3, i32 %arg2, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg;
    cbr i1 %1, [ ^while.body1 i32 %arg, i32 %arg1, i32 %0 ], [ ^b1 i32 %arg, i32 %arg1 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [35 * i32]* %0 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([35 * i32]* %0)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    i1 %3 = scmp lt i32 %arg3, i32 %2;
    cbr i1 %3, [ ^indirect2 i32 %arg2, i32 %arg, i32 %arg2, i32 %arg, i32 %arg1 ], [ ^b4 i32 %arg2, i32 %arg, i32 %arg1, i32 %arg3 ];
^b3(i32 %arg):
    ret i32 %arg;
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    [35 * i32]* %0 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &([35 * i32]* %0)[i32 0][i32 %arg];
    i32 %2 = sub i32 %arg1, i32 1;
    [35 * i32]* %3 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %2];
    i32* %4 = getelementptr &([35 * i32]* %3)[i32 0][i32 %arg];
    i32 %5 = load i32* %4;
    [2 * i32]* %6 = getelementptr &([1005 * [2 * i32]]* @t)[i32 0][i32 %arg1];
    i32 %7 = add i32 %arg, i32 1;
    i32 %8 = srem i32 %7, i32 2;
    i32* %9 = getelementptr &([2 * i32]* %6)[i32 0][i32 %8];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %5, i32 %10;
    store i32* %1 with i32 %11;
    i32 %12 = add i32 %arg5, i32 1;
    ubr [ ^while.header i32 %12, i32 %arg2, i32 %arg3, i32 %arg4, i32 %12 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    [35 * i32]* %0 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &([35 * i32]* %0)[i32 0][i32 %arg];
    i32 %2 = sub i32 %arg1, i32 1;
    [35 * i32]* %3 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %2];
    i32 %4 = sub i32 %arg, i32 1;
    i32* %5 = getelementptr &([35 * i32]* %3)[i32 0][i32 %4];
    i32 %6 = load i32* %5;
    [2 * i32]* %7 = getelementptr &([1005 * [2 * i32]]* @t)[i32 0][i32 %arg1];
    i32 %8 = add i32 %arg, i32 1;
    i32 %9 = srem i32 %8, i32 2;
    i32* %10 = getelementptr &([2 * i32]* %7)[i32 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %6, i32 %11;
    store i32* %1 with i32 %12;
    i32 %13 = add i32 %arg5, i32 1;
    ubr [ ^while.header i32 %13, i32 %arg2, i32 %arg3, i32 %arg4, i32 %13 ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [35 * i32]* %0 = getelementptr &([1005 * [35 * i32]]* @dp)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &([35 * i32]* %0)[i32 0][i32 %arg];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg2, i32 1;
    i1 %4 = scmp le i32 %3, i32 %arg4;
    cbr i1 %4, [ ^while.body3 i32 %arg3, i32 %arg4, i32 %3, i32 %2 ], [ ^b3 i32 %2 ];
^b4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg2;
    cbr i1 %1, [ ^while.body3 i32 %arg1, i32 %arg2, i32 %0, i32 %arg3 ], [ ^b3 i32 %arg3 ];
^while.header(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp le i32 %arg, i32 %arg2;
    cbr i1 %0, [ ^while.body2 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^b2 i32 %arg1, i32 %arg2, i32 %arg3 ];
}
