internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t, align 8 { Flexible };
internal [1005 * [35 * i32]]* @dp, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [1005 * [35 * i32]]* %1 = ptrcast [1005 * [35 * i32]]* @dp to [1005 * [35 * i32]]*;
    [35 * i32]* %2 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %0];
    i1 %3 = icmp sgt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    [1005 * [2 * i32]]* %5 = ptrcast [1005 * [2 * i32]]* @t to [1005 * [2 * i32]]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %6 = phi [^entry, i32 1] [^while.body, i32 %18];
    i32 %7 = call () -> i32 @getint();
    i32 %8 = and i32 %7, i32 1;
    [2 * i32]* %9 = getelementptr &([1005 * [2 * i32]]* %5)[i64 0][i32 %6];
    i32* %10 = getelementptr &([2 * i32]* %9)[i64 0][i32 %8];
    store i32* %10 with i32 1;
    [35 * i32]* %11 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %6];
    i32* %12 = getelementptr &([35 * i32]* %11)[i64 -1][i64 0];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([2 * i32]* %9)[i64 0][i64 1];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %13, i32 %15;
    i32* %17 = getelementptr &([35 * i32]* %11)[i64 0][i64 0];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %6, i32 1;
    i1 %19 = icmp sge i32 %0, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %20 = phi [^entry, i32 1] [^while.body, i32 1] [^b, i32 %29];
    i32 %21 = add i32 %20, i32 -1;
    [35 * i32]* %22 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %21];
    i1 %23 = icmp sge i32 %0, i32 %20;
    [2 * i32]* %24 = getelementptr &([1005 * [2 * i32]]* %5)[i64 0][i32 %20];
    [35 * i32]* %25 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %20];
    cbr i1 %23(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %26 = phi [^while.header, i32 1] [^if.then, i32 %30] [^if.else, i32 %30];
    i1 %27 = icmp sge i32 %4, i32 %26;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b;
  ^while.header2:
    i1 %28 = icmp sgt i32 %4, i32 -1;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b1;
  ^b:
    i32 %29 = add i32 %20, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %30 = add i32 %26, i32 1;
    i32 %31 = and i32 %30, i32 1;
    i32* %32 = getelementptr &([2 * i32]* %24)[i64 0][i32 %31];
    i32* %33 = getelementptr &([35 * i32]* %22)[i64 0][i32 %26];
    i32 %34 = load i32* %33;
    i32 %35 = load i32* %32;
    i32* %36 = getelementptr &(i32* %33)[i64 -1];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 %37;
    i32 %39 = add i32 %34, i32 %35;
    i1 %40 = icmp slt i32 %38, i32 %39;
    i32* %41 = getelementptr &([35 * i32]* %25)[i64 0][i32 %26];
    cbr i1 %40(prob = 0.5), ^if.then, ^if.else;
  ^while.body2:
    i32 %42 = phi [^while.header2, i32 0] [^while.body2, i32 %47];
    i32 %43 = phi [^while.header2, i32 0] [^while.body2, i32 %46];
    i32* %44 = getelementptr &([35 * i32]* %2)[i64 0][i32 %42];
    i32 %45 = load i32* %44;
    i32 %46 = smax i32 %43, i32 %45;
    i32 %47 = add i32 %42, i32 1;
    i1 %48 = icmp sge i32 %4, i32 %47;
    cbr i1 %48(prob = 0.97), ^while.body2, ^b1;
  ^b1:
    i32 %49 = phi [^while.header2, i32 0] [^while.body2, i32 %46];
    ret i32 %49;
  ^if.then:
    store i32* %41 with i32 %39;
    ubr ^while.header1;
  ^if.else:
    store i32* %41 with i32 %38;
    ubr ^while.header1;
}
