internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 %1];
    i32 %4 = phi [^while.body, i32 %19] [^entry, i32 1];
    i32 %5 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %6 = phi [^while.body, i32 %19] [^entry, i32 1];
    i1 %7 = scmp le i32 %6, i32 %5;
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %8 = call () -> i32 @getint();
    [2 * i32]* %9 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %4];
    i32 %10 = srem i32 %8, i32 2;
    i32* %11 = getelementptr &([2 * i32]* %9)[i64 0][i32 %10];
    store i32* %11 with i32 1;
    [35 * i32]* %12 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %4];
    i32* %13 = getelementptr &([35 * i32]* %12)[i64 0][i64 0];
    i32* %14 = getelementptr &([35 * i32]* %12)[i64 -1][i64 0];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &([2 * i32]* %9)[i64 0][i64 1];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %15, i32 %17;
    store i32* %13 with i32 %18;
    i32 %19 = add i32 %4, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %20 = phi [^while.header, i32 %2] [^b, i32 %25];
    i32 %21 = phi [^while.header, i32 %3] [^b, i32 %26];
    i32 %22 = phi [^while.header, i32 1] [^b, i32 %37];
    i32 %23 = phi [^while.header, i32 1] [^b, i32 %37];
    i1 %24 = scmp le i32 %23, i32 %20;
    cbr i1 %24(prob = 0.97), ^while.header2, ^while.header3;
^while.header2:
    i32 %25 = phi [^if.else, i32 %25] [^if.then, i32 %25] [^while.header1, i32 %20];
    i32 %26 = phi [^if.else, i32 %26] [^if.then, i32 %26] [^while.header1, i32 %21];
    i32 %27 = phi [^if.else, i32 %27] [^if.then, i32 %27] [^while.header1, i32 %22];
    i32 %28 = phi [^if.else, i32 %43] [^if.then, i32 %43] [^while.header1, i32 1];
    i32 %29 = phi [^if.else, i32 %43] [^if.then, i32 %43] [^while.header1, i32 1];
    i1 %30 = scmp le i32 %29, i32 %26;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b;
^while.header3:
    i32 %31 = phi [^while.header1, i32 %20] [^b2, i32 %31];
    i32 %32 = phi [^while.header1, i32 %21] [^b2, i32 %32];
    i32 %33 = phi [^while.header1, i32 0] [^b2, i32 %70];
    i32 %34 = phi [^while.header1, i32 0] [^b2, i32 %69];
    i32 %35 = phi [^while.header1, i32 0] [^b2, i32 %70];
    i1 %36 = scmp le i32 %35, i32 %32;
    cbr i1 %36(prob = 0.97), ^while.body2, ^b1;
^b:
    i32 %37 = add i32 %27, i32 1;
    ubr ^while.header1;
^while.body1:
    i32 %38 = add i32 %27, i32 -1;
    [35 * i32]* %39 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %38];
    i32* %40 = getelementptr &([35 * i32]* %39)[i64 0][i32 %28];
    i32 %41 = load i32* %40;
    [2 * i32]* %42 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %27];
    i32 %43 = add i32 %28, i32 1;
    i32 %44 = srem i32 %43, i32 2;
    i32* %45 = getelementptr &([2 * i32]* %42)[i64 0][i32 %44];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %46, i32 %41;
    i32* %48 = getelementptr &(i32* %40)[i64 -1];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %46, i32 %49;
    i1 %51 = scmp gt i32 %47, i32 %50;
    cbr i1 %51(prob = 0.5), ^if.then, ^if.else;
^while.body2:
    [35 * i32]* %52 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %31];
    i32* %53 = getelementptr &([35 * i32]* %52)[i64 0][i32 %33];
    i32 %54 = load i32* %53;
    i1 %55 = scmp lt i32 %34, i32 %54;
    cbr i1 %55(prob = 0.5), ^if.then1, ^b2;
^b1:
    ret i32 %34;
^if.then:
    [35 * i32]* %56 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %27];
    i32* %57 = getelementptr &([35 * i32]* %56)[i64 0][i32 %28];
    [35 * i32]* %58 = getelementptr &([35 * i32]* %56)[i64 -1];
    i32* %59 = getelementptr &([35 * i32]* %58)[i64 0][i32 %28];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %46, i32 %60;
    store i32* %57 with i32 %61;
    ubr ^while.header2;
^if.else:
    [35 * i32]* %62 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %27];
    i32* %63 = getelementptr &([35 * i32]* %62)[i64 0][i32 %28];
    [35 * i32]* %64 = getelementptr &([35 * i32]* %62)[i64 -1];
    i32 %65 = add i32 %28, i32 -1;
    i32* %66 = getelementptr &([35 * i32]* %64)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %46, i32 %67;
    store i32* %63 with i32 %68;
    ubr ^while.header2;
^if.then1:
    ubr ^b2;
^b2:
    i32 %69 = phi [^if.then1, i32 %54] [^while.body2, i32 %34];
    i32 %70 = add i32 %33, i32 1;
    ubr ^while.header3;
}
