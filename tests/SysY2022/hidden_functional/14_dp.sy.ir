internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t = [[0]];
internal [1005 * [35 * i32]]* @dp = [[0]];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    [35 * i32]* %2 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %0];
    ubr ^while.header;
^while.header:
    i32 %3 = phi [^while.body, i32 %16] [^entry, i32 1];
    i1 %4 = scmp le i32 %3, i32 %0;
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %5 = call () -> i32 @getint();
    [2 * i32]* %6 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %3];
    i32 %7 = srem i32 %5, i32 2;
    i32* %8 = getelementptr &([2 * i32]* %6)[i64 0][i32 %7];
    store i32* %8 with i32 1;
    [35 * i32]* %9 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %3];
    i32* %10 = getelementptr &([35 * i32]* %9)[i64 0][i64 0];
    i32* %11 = getelementptr &([35 * i32]* %9)[i64 -1][i64 0];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([2 * i32]* %6)[i64 0][i64 1];
    i32 %14 = load i32* %13;
    i32 %15 = add i32 %12, i32 %14;
    store i32* %10 with i32 %15;
    i32 %16 = add i32 %3, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %17 = phi [^while.header, i32 1] [^b, i32 %29];
    i1 %18 = scmp le i32 %17, i32 %0;
    i32 %19 = add i32 %17, i32 -1;
    [35 * i32]* %20 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %19];
    [2 * i32]* %21 = getelementptr &([1005 * [2 * i32]]* @t)[i64 0][i32 %17];
    [35 * i32]* %22 = getelementptr &([1005 * [35 * i32]]* @dp)[i64 0][i32 %17];
    [35 * i32]* %23 = getelementptr &([35 * i32]* %22)[i64 -1];
    cbr i1 %18(prob = 0.97), ^while.header2, ^while.header3;
^while.header2:
    i32 %24 = phi [^if.else, i32 %32] [^if.then, i32 %32] [^while.header1, i32 1];
    i1 %25 = scmp le i32 %24, i32 %1;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b;
^while.header3:
    i32 %26 = phi [^while.header1, i32 0] [^b2, i32 %54];
    i32 %27 = phi [^while.header1, i32 0] [^b2, i32 %53];
    i1 %28 = scmp le i32 %26, i32 %1;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b1;
^b:
    i32 %29 = add i32 %17, i32 1;
    ubr ^while.header1;
^while.body1:
    i32* %30 = getelementptr &([35 * i32]* %20)[i64 0][i32 %24];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %24, i32 1;
    i32 %33 = srem i32 %32, i32 2;
    i32* %34 = getelementptr &([2 * i32]* %21)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %35, i32 %31;
    i32* %37 = getelementptr &(i32* %30)[i64 -1];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %35, i32 %38;
    i1 %40 = scmp gt i32 %36, i32 %39;
    cbr i1 %40(prob = 0.5), ^if.then, ^if.else;
^while.body2:
    i32* %41 = getelementptr &([35 * i32]* %2)[i64 0][i32 %26];
    i32 %42 = load i32* %41;
    i1 %43 = scmp lt i32 %27, i32 %42;
    cbr i1 %43(prob = 0.5), ^if.then1, ^b2;
^b1:
    ret i32 %27;
^if.then:
    i32* %44 = getelementptr &([35 * i32]* %22)[i64 0][i32 %24];
    i32* %45 = getelementptr &([35 * i32]* %23)[i64 0][i32 %24];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %35, i32 %46;
    store i32* %44 with i32 %47;
    ubr ^while.header2;
^if.else:
    i32* %48 = getelementptr &([35 * i32]* %22)[i64 0][i32 %24];
    i32 %49 = add i32 %24, i32 -1;
    i32* %50 = getelementptr &([35 * i32]* %23)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %35, i32 %51;
    store i32* %48 with i32 %52;
    ubr ^while.header2;
^if.then1:
    ubr ^b2;
^b2:
    i32 %53 = phi [^if.then1, i32 %42] [^while.body2, i32 %27];
    i32 %54 = add i32 %26, i32 1;
    ubr ^while.header3;
}
