internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [1005 * [2 * i32]]* @t, align 8 { Flexible };
internal [1005 * [35 * i32]]* @dp, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [1005 * [35 * i32]]* %1 = ptrcast [1005 * [35 * i32]]* @dp to [1005 * [35 * i32]]*;
    [35 * i32]* %2 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %0];
    i32 %3 = call () -> i32 @getint();
    i32 %4 = add i32 %3, i32 1;
    i1 %5 = icmp sgt i32 %4, i32 4;
    i32 %6 = add i32 %0, i32 1;
    i1 %7 = icmp sgt i32 %0, i32 0;
    i1 %8 = icmp sgt i32 %3, i32 0;
    i32 %9 = add i32 %3, i32 -2;
    i32 %10 = add i32 %3, i32 -17;
    [1005 * [2 * i32]]* %11 = ptrcast [1005 * [2 * i32]]* @t to [1005 * [2 * i32]]*;
    cbr i1 %7(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %24];
    i32 %13 = call () -> i32 @getint();
    i32 %14 = and i32 %13, i32 1;
    [2 * i32]* %15 = getelementptr &([1005 * [2 * i32]]* %11)[i64 0][i32 %12];
    i32* %16 = getelementptr &([2 * i32]* %15)[i64 0][i32 %14];
    store i32* %16 with i32 1;
    [35 * i32]* %17 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %12];
    i32* %18 = getelementptr &([35 * i32]* %17)[i64 -1][i64 0];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([2 * i32]* %15)[i64 0][i64 1];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &([35 * i32]* %17)[i64 0][i64 0];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %12, i32 1;
    i1 %25 = icmp sgt i32 %6, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body, ^while.body1;
  ^b:
    i1 %26 = icmp sgt i32 %3, i32 -1;
    cbr i1 %26(prob = 0.984615), ^super.header, ^b1;
  ^super.header:
    i1 %27 = icmp sgt i32 %4, i32 3;
    cbr i1 %27(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.body1:
    i32 %28 = phi [^while.body, i32 1] [^b2, i32 %38];
    cbr i1 %8(prob = 0.984615), ^super.header2, ^b2;
  ^b1:
    i32 %29 = phi [^b, i32 0] [^scalar.header, i32 %36] [^while.body4, i32 %142];
    ret i32 %29;
  ^super.header1:
    i1 %30 = icmp sgt i32 %9, i32 15;
    cbr i1 %30(prob = 0.941176), ^while.body3, ^scalar.header2;
  ^super.header2:
    [35 * i32]* %31 = getelementptr &([1005 * [35 * i32]]* %1)[i64 0][i32 %28];
    [35 * i32]* %32 = getelementptr &([35 * i32]* %31)[i64 -1];
    [2 * i32]* %33 = getelementptr &([1005 * [2 * i32]]* %11)[i64 0][i32 %28];
    cbr i1 %5(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^scalar.header:
    i32 %34 = phi [^super.header, i32 0] [^scalar.final, i32 %145];
    i32 %35 = phi [^super.header, i32 0] [^scalar.final, i32 %146];
    i32 %36 = phi [^super.header, i32 undef] [^scalar.final, i32 %145];
    i1 %37 = icmp sgt i32 %4, i32 %35;
    cbr i1 %37(prob = 0.75), ^while.body4, ^b1;
  ^b2:
    i32 %38 = add i32 %28, i32 1;
    i1 %39 = icmp sgt i32 %6, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body1, ^b;
  ^while.body2:
    i32 %40 = phi [^super.header2, i32 1] [^while.body2, i32 %70];
    i32 %41 = add i32 %40, i32 1;
    i32 %42 = and i32 %41, i32 1;
    i32* %43 = getelementptr &([2 * i32]* %33)[i64 0][i32 %42];
    i32* %44 = getelementptr &([35 * i32]* %32)[i64 0][i32 %40];
    i32 %45 = load i32* %44;
    i32 %46 = load i32* %43;
    i32* %47 = getelementptr &(i32* %44)[i64 -1];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32 %50 = add i32 %45, i32 %46;
    i32 %51 = smax i32 %49, i32 %50;
    i32* %52 = getelementptr &([35 * i32]* %31)[i64 0][i32 %40];
    store i32* %52 with i32 %51;
    i32* %53 = getelementptr &(i32* %44)[i64 1];
    i32 %54 = load i32* %53;
    i32 %55 = and i32 %40, i32 1;
    i32* %56 = getelementptr &([2 * i32]* %33)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %54, i32 %57;
    i32 %59 = add i32 %45, i32 %57;
    i32 %60 = smax i32 %58, i32 %59;
    i32* %61 = getelementptr &(i32* %52)[i64 1];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %44)[i64 2];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %46, i32 %63;
    i32 %65 = add i32 %46, i32 %54;
    i32 %66 = smax i32 %64, i32 %65;
    i32* %67 = getelementptr &(i32* %52)[i64 2];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %44)[i64 3];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %40, i32 4;
    i32 %71 = and i32 %70, i32 1;
    i32* %72 = getelementptr &([2 * i32]* %33)[i64 0][i32 %71];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %69, i32 %73;
    i32 %75 = add i32 %63, i32 %73;
    i32 %76 = smax i32 %74, i32 %75;
    i32* %77 = getelementptr &(i32* %52)[i64 3];
    store i32* %77 with i32 %76;
    i1 %78 = icmp sgt i32 %9, i32 %70;
    cbr i1 %78(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^while.body3:
    i32 %79 = phi [^super.header1, i32 0] [^while.body3, i32 %129];
    i32 %80 = phi [^super.header1, i32 0] [^while.body3, i32 %128];
    i32* %81 = getelementptr &([35 * i32]* %2)[i64 0][i32 %79];
    i32 %82 = load i32* %81;
    i32 %83 = smax i32 %80, i32 %82;
    i32* %84 = getelementptr &(i32* %81)[i64 1];
    i32 %85 = load i32* %84;
    i32 %86 = smax i32 %83, i32 %85;
    i32* %87 = getelementptr &(i32* %81)[i64 2];
    i32 %88 = load i32* %87;
    i32 %89 = smax i32 %86, i32 %88;
    i32* %90 = getelementptr &(i32* %81)[i64 3];
    i32 %91 = load i32* %90;
    i32 %92 = smax i32 %89, i32 %91;
    i32* %93 = getelementptr &(i32* %81)[i64 4];
    i32 %94 = load i32* %93;
    i32 %95 = smax i32 %92, i32 %94;
    i32* %96 = getelementptr &(i32* %81)[i64 5];
    i32 %97 = load i32* %96;
    i32 %98 = smax i32 %95, i32 %97;
    i32* %99 = getelementptr &(i32* %81)[i64 6];
    i32 %100 = load i32* %99;
    i32 %101 = smax i32 %98, i32 %100;
    i32* %102 = getelementptr &(i32* %81)[i64 7];
    i32 %103 = load i32* %102;
    i32 %104 = smax i32 %101, i32 %103;
    i32* %105 = getelementptr &(i32* %81)[i64 8];
    i32 %106 = load i32* %105;
    i32 %107 = smax i32 %104, i32 %106;
    i32* %108 = getelementptr &(i32* %81)[i64 9];
    i32 %109 = load i32* %108;
    i32 %110 = smax i32 %107, i32 %109;
    i32* %111 = getelementptr &(i32* %81)[i64 10];
    i32 %112 = load i32* %111;
    i32 %113 = smax i32 %110, i32 %112;
    i32* %114 = getelementptr &(i32* %81)[i64 11];
    i32 %115 = load i32* %114;
    i32 %116 = smax i32 %113, i32 %115;
    i32* %117 = getelementptr &(i32* %81)[i64 12];
    i32 %118 = load i32* %117;
    i32 %119 = smax i32 %116, i32 %118;
    i32* %120 = getelementptr &(i32* %81)[i64 13];
    i32 %121 = load i32* %120;
    i32 %122 = smax i32 %119, i32 %121;
    i32* %123 = getelementptr &(i32* %81)[i64 14];
    i32 %124 = load i32* %123;
    i32 %125 = smax i32 %122, i32 %124;
    i32* %126 = getelementptr &(i32* %81)[i64 15];
    i32 %127 = load i32* %126;
    i32 %128 = smax i32 %125, i32 %127;
    i32 %129 = add i32 %79, i32 16;
    i1 %130 = icmp sgt i32 %10, i32 %129;
    cbr i1 %130(prob = 0.941176), ^while.body3, ^scalar.header2;
  ^scalar.header1:
    i32 %131 = phi [^super.header2, i32 1] [^while.body2, i32 %70];
    i1 %132 = icmp sgt i32 %4, i32 %131;
    cbr i1 %132(prob = 0.75), ^while.body5, ^b2;
  ^scalar.header2:
    i32 %133 = phi [^super.header1, i32 0] [^while.body3, i32 %129];
    i32 %134 = phi [^super.header1, i32 0] [^while.body3, i32 %128];
    i32 %135 = phi [^super.header1, i32 undef] [^while.body3, i32 %128];
    i32 %136 = phi [^super.header1, i32 undef] [^while.body3, i32 %129];
    i1 %137 = icmp sgt i32 %9, i32 %133;
    cbr i1 %137(prob = 0.75), ^while.body6, ^scalar.final;
  ^while.body4 {scalar}:
    i32 %138 = phi [^scalar.header, i32 %35] [^while.body4, i32 %143];
    i32 %139 = phi [^scalar.header, i32 %34] [^while.body4, i32 %142];
    i32* %140 = getelementptr &([35 * i32]* %2)[i64 0][i32 %138];
    i32 %141 = load i32* %140;
    i32 %142 = smax i32 %139, i32 %141;
    i32 %143 = add i32 %138, i32 1;
    i1 %144 = icmp sgt i32 %4, i32 %143;
    cbr i1 %144(prob = 0.75), ^while.body4, ^b1;
  ^scalar.final:
    i32 %145 = phi [^scalar.header2, i32 %135] [^while.body6, i32 %174];
    i32 %146 = phi [^scalar.header2, i32 %136] [^while.body6, i32 %175];
    ubr ^scalar.header;
  ^while.body5 {scalar}:
    i32 %147 = phi [^scalar.header1, i32 %131] [^while.body5, i32 %148];
    i32 %148 = add i32 %147, i32 1;
    i32 %149 = and i32 %148, i32 1;
    i32* %150 = getelementptr &([2 * i32]* %33)[i64 0][i32 %149];
    i32* %151 = getelementptr &([35 * i32]* %32)[i64 0][i32 %147];
    i32 %152 = load i32* %151;
    i32 %153 = load i32* %150;
    i32* %154 = getelementptr &(i32* %151)[i64 -1];
    i32 %155 = load i32* %154;
    i32 %156 = add i32 %153, i32 %155;
    i32 %157 = add i32 %152, i32 %153;
    i32 %158 = smax i32 %156, i32 %157;
    i32* %159 = getelementptr &([35 * i32]* %31)[i64 0][i32 %147];
    store i32* %159 with i32 %158;
    i1 %160 = icmp sgt i32 %4, i32 %148;
    cbr i1 %160(prob = 0.75), ^while.body5, ^b2;
  ^while.body6 {scalar}:
    i32 %161 = phi [^scalar.header2, i32 %134] [^while.body6, i32 %174];
    i32 %162 = phi [^scalar.header2, i32 %133] [^while.body6, i32 %175];
    i32* %163 = getelementptr &([35 * i32]* %2)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i32 %165 = smax i32 %161, i32 %164;
    i32* %166 = getelementptr &(i32* %163)[i64 1];
    i32 %167 = load i32* %166;
    i32 %168 = smax i32 %165, i32 %167;
    i32* %169 = getelementptr &(i32* %163)[i64 2];
    i32 %170 = load i32* %169;
    i32 %171 = smax i32 %168, i32 %170;
    i32* %172 = getelementptr &(i32* %163)[i64 3];
    i32 %173 = load i32* %172;
    i32 %174 = smax i32 %171, i32 %173;
    i32 %175 = add i32 %162, i32 4;
    i1 %176 = icmp sgt i32 %9, i32 %175;
    cbr i1 %176(prob = 0.75), ^while.body6, ^scalar.final;
}
