internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @graphColoring([4 * i32]*, i32, i32, i32*) -> i32 {
^entry([4 * i32]* %arg, i32 %arg1, i32 %arg2, i32* %arg3):
    [4 * i32]** %graph = alloc [4 * i32]*;
    store [4 * i32]** %graph with [4 * i32]* %arg;
    i32* %m = alloc i32;
    store i32* %m with i32 %arg1;
    i32* %i = alloc i32;
    store i32* %i with i32 %arg2;
    i32** %color = alloc i32*;
    store i32** %color with i32* %arg3;
    i1 %0 = scmp eq i32 %arg2, i32 4;
    cbr i1 %0, [ ^entry1 [4 * i32]* %arg, i32* %arg3, i32* %arg3 ], [ ^b [4 * i32]** %graph, i32* %m, i32** %color, i32* %i, [4 * i32]* %arg, i32 %arg1, i32 %arg2, i32* %arg3 ];
^entry1([4 * i32]* %arg, i32* %arg1, i32* %arg2):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %i, i32* %arg2, [4 * i32]* %arg, i32* %arg1, i32 0 ];
^b([4 * i32]** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [4 * i32]* %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %j = alloc i32;
    store i32* %j with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg5;
    cbr i1 %0, [ ^while.body1 i32* %arg1, [4 * i32]** %arg, i32* %j, i32** %arg2, i32* %arg3, [4 * i32]* %arg4, i32 %arg6, i32* %arg7, i32 1 ], [ ^b1 ];
^while.body(i32* %arg, i32* %arg1, [4 * i32]* %arg2, i32* %arg3, i32 %arg4):
    i32* %j = alloc i32;
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %j with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1, [ ^while.body2 i32* %j, i32* %arg, i32* %arg1, [4 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %0 ], [ ^b2 i32* %arg, i32* %arg1, [4 * i32]* %arg2, i32* %arg3, i32 %arg4 ];
^while.body1(i32* %arg, [4 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [4 * i32]* %arg5, i32 %arg6, i32* %arg7, i32 %arg8):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg6];
    store i32* %0 with i32 %arg8;
    i32 %1 = load i32* %arg;
    i32 %2 = add i32 %arg6, i32 1;
    i32 %3 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %arg5, i32 %1, i32 %2, i32* %arg7);
    i32* %4 = load i32** %arg3;
    i32 %5 = load i32* %arg4;
    [4 * i32]* %6 = load [4 * i32]** %arg1;
    i1 %7 = scmp neq i32 %3, i32 0;
    cbr i1 %7, [ ^if.then ], [ ^b3 i32* %arg, [4 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [4 * i32]* %6, i32 %5, i32* %4 ];
^b1():
    ret i32 0;
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    [4 * i32]* %0 = getelementptr &([4 * i32]* %arg3)[i32 %arg5];
    i32* %1 = getelementptr &([4 * i32]* %0)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect i32* %arg1, i32* %arg, i32 %arg5, i32 %arg6, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6 ], [ ^b4 i32* %arg1, i32* %arg, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6 ];
^b2(i32* %arg, i32* %arg1, [4 * i32]* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, [4 * i32]* %arg2, i32* %arg3, i32 %0 ], [ ^indirect1 i32 1, i32* %arg1 ];
^b3(i32* %arg, [4 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [4 * i32]* %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg6];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg2;
    i32 %2 = load i32* %arg4;
    i32 %3 = load i32* %arg;
    i32 %4 = add i32 %1, i32 1;
    store i32* %arg2 with i32 %4;
    i1 %5 = scmp le i32 %4, i32 %3;
    cbr i1 %5, [ ^while.body1 i32* %arg, [4 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [4 * i32]* %arg5, i32 %2, i32* %arg7, i32 %4 ], [ ^b1 ];
^if.then():
    ret i32 1;
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, [4 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg3];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg6)[i32 %arg2];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %1, i32 %3;
    cbr i1 %4, [ ^indirect1 i32 0, i32* %arg4 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg4, [4 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1, [ ^while.body2 i32* %arg1, i32* %arg, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %0 ], [ ^b2 i32* %arg, i32* %arg2, [4 * i32]* %arg3, i32* %arg4, i32 %arg5 ];
^indirect1(i32 %arg, i32* %arg1):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0, [ ^if.then1 i32* %arg1 ], [ ^b1 ];
^if.then1(i32* %arg):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body3 i32* %i, i32* %arg, i32 0 ];
^while.body3(i32* %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &(i32* %arg1)[i32 %arg2];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32 %2 = add i32 %arg2, i32 1;
    store i32* %arg with i32 %2;
    i1 %3 = scmp lt i32 %2, i32 4;
    cbr i1 %3, [ ^while.body3 i32* %arg, i32* %arg1, i32 %2 ], [ ^b5 ];
^b5():
    call (i32) -> void @putch(i32 10);
    ret i32 1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [4 * [4 * i32]]* %graph = alloc [4 * [4 * i32]];
    i32* %0 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 0][i32 1];
    i32* %1 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 0][i32 0];
    store i32* %1 with i32 0;
    store i32* %0 with i32 1;
    i32* %2 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 0][i32 2];
    store i32* %2 with i32 1;
    i32* %3 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 0][i32 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 1][i32 0];
    store i32* %4 with i32 1;
    i32* %5 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 1][i32 2];
    i32* %6 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 1][i32 1];
    store i32* %6 with i32 0;
    store i32* %5 with i32 1;
    i32* %7 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 2][i32 0];
    i32* %8 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 1][i32 3];
    store i32* %8 with i32 0;
    store i32* %7 with i32 1;
    i32* %9 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 2][i32 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 2][i32 3];
    i32* %11 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 2][i32 2];
    store i32* %11 with i32 0;
    store i32* %10 with i32 1;
    i32* %12 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 3][i32 0];
    store i32* %12 with i32 1;
    i32* %13 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 3][i32 2];
    i32* %14 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 3][i32 1];
    store i32* %14 with i32 0;
    store i32* %13 with i32 1;
    i32* %15 = getelementptr &([4 * [4 * i32]]* %graph)[i32 0][i32 3][i32 3];
    store i32* %15 with i32 0;
    [4 * i32]* %color = alloc [4 * i32];
    i32* %i = alloc i32;
    ubr [ ^while.body [4 * [4 * i32]]* %graph, [4 * i32]* %color, i32* %i, i32 0 ];
^while.body([4 * [4 * i32]]* %arg, [4 * i32]* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([4 * i32]* %arg1)[i32 0][i32 %arg3];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 4;
    cbr i1 %2, [ ^while.body [4 * [4 * i32]]* %arg, [4 * i32]* %arg1, i32* %arg2, i32 %1 ], [ ^b [4 * i32]* %arg1, [4 * [4 * i32]]* %arg ];
^b([4 * i32]* %arg, [4 * [4 * i32]]* %arg1):
    [4 * i32]* %0 = getelementptr &([4 * [4 * i32]]* %arg1)[i32 0][i32 0];
    i32* %1 = getelementptr &([4 * i32]* %arg)[i32 0][i32 0];
    i32 %2 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %0, i32 3, i32 0, i32* %1);
    i1 %3 = scmp neq i32 %2, i32 0;
    i1 %4 = xor i1 %3, i1 true;
    cbr i1 %4, [ ^entry1 ], [ ^b1 ];
^entry1():
    call (i32) -> void @putch(i32 78);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 101);
    call (i32) -> void @putch(i32 120);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 115);
    call (i32) -> void @putch(i32 116);
    ret i32 0;
^b1():
    ret i32 0;
}
