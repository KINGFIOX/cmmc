internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @graphColoring([4 * i32]* %graph, i32 %m, i32 %i, i32* %color) -> i32 {
  ^entry:
    i1 %0 = icmp eq i32 %i, i32 4;
    cbr i1 %0(prob = 0.5), ^while.header, ^while.header1;
  ^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.header2, i32 %7];
    i1 %2 = icmp slt i32 %1, i32 4;
    cbr i1 %2(prob = 0.984615), ^while.body, ^while.body2;
  ^while.header1:
    i32 %3 = phi [^entry, i32 1] [^b1, i32 %18];
    i1 %4 = icmp slt i32 %3, i32 4;
    cbr i1 %4(prob = 0.984615), ^while.body1, ^b;
  ^while.body:
    [4 * i32]* %5 = getelementptr &([4 * i32]* %graph)[i32 %1];
    i32* %6 = getelementptr &(i32* %color)[i32 %1];
    i32 %7 = add i32 %1, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32* %8 = getelementptr &(i32* %color)[i32 %i];
    store i32* %8 with i32 %3;
    i32 %9 = add i32 %i, i32 1;
    i32 %10 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %graph, i32 3, i32 %9, i32* %color);
    i1 %11 = icmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b, ^b1;
  ^while.body2:
    i32 %12 = phi [^while.header, i32 0] [^while.body2, i32 %15];
    i32* %13 = getelementptr &(i32* %color)[i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 32);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 4;
    cbr i1 %16(prob = 0.75), ^while.body2, ^b2;
  ^b:
    i32 %17 = phi [^while.header1, i32 0] [^while.body1, i32 1] [^b2, i32 1] [^b4, i32 0];
    ret i32 %17;
  ^b1:
    store i32* %8 with i32 0;
    i32 %18 = add i32 %3, i32 1;
    ubr ^while.header1;
  ^while.header2:
    i32 %19 = phi [^while.body, i32 %7] [^b3, i32 %24];
    i1 %20 = icmp slt i32 %19, i32 4;
    cbr i1 %20(prob = 0.984615), ^while.body3, ^while.header;
  ^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^b;
  ^while.body3:
    i32* %21 = getelementptr &([4 * i32]* %5)[i64 0][i32 %19];
    i32 %22 = load i32* %21;
    i1 %23 = icmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b4, ^b3;
  ^b3:
    i32 %24 = add i32 %19, i32 1;
    ubr ^while.header2;
  ^b4:
    i32* %25 = getelementptr &(i32* %color)[i32 %19];
    i32 %26 = load i32* %25;
    i32 %27 = load i32* %6;
    i1 %28 = icmp eq i32 %26, i32 %27;
    cbr i1 %28(prob = 0.5), ^b, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [4 * i32]* %color = alloc [4 * i32], align 8;
    [4 * [4 * i32]]* %graph = alloc [4 * [4 * i32]], align 8;
    i32* %0 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 2];
    store i32* %2 with i32 1;
    i32* %3 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 0];
    store i32* %4 with i32 1;
    i32* %5 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 2];
    store i32* %6 with i32 1;
    i32* %7 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 0];
    store i32* %8 with i32 1;
    i32* %9 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 2];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 3];
    store i32* %11 with i32 1;
    i32* %12 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 0];
    store i32* %12 with i32 1;
    i32* %13 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 1];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 2];
    store i32* %14 with i32 1;
    i32* %15 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 3];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([4 * i32]* %color)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([4 * i32]* %color)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([4 * i32]* %color)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([4 * i32]* %color)[i64 0][i64 3];
    store i32* %19 with i32 0;
    [4 * i32]* %20 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0];
    i32 %21 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %20, i32 3, i32 0, i32* %16);
    i1 %22 = icmp eq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^entry1, ^b;
  ^entry1:
    call (i32) -> void @putch(i32 78);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 101);
    call (i32) -> void @putch(i32 120);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 115);
    call (i32) -> void @putch(i32 116);
    ubr ^b;
  ^b:
    ret i32 0;
}
