internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @graphColoring([4 * i32]* %graph, i32 %m, i32 %i, i32* %color) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32** %color1 = alloc i32*;
    i32* %i1 = alloc i32;
    i32* %m1 = alloc i32;
    [4 * i32]** %graph1 = alloc [4 * i32]*;
    store [4 * i32]** %graph1 with [4 * i32]* %graph;
    store i32* %m1 with i32 %m;
    store i32* %i1 with i32 %i;
    store i32** %color1 with i32* %color;
    i1 %0 = scmp eq i32 %i, i32 4;
    cbr i1 %0(prob = 0.5), ^while.header, ^b;
^b:
    store i32* %j with i32 1;
    ubr ^while.header1;
^while.header:
    i32 %1 = phi [^while.header2, i32 %4] [^entry, i32 0];
    i1 %2 = scmp lt i32 %1, i32 4;
    [4 * i32]* %3 = getelementptr &([4 * i32]* %graph)[i32 %1];
    cbr i1 %2(prob = 0.97), ^while.body, ^if.then;
^while.body:
    i32 %4 = add i32 %1, i32 1;
    ubr ^while.header2;
^while.header1:
    [4 * i32]* %5 = phi [^b2, [4 * i32]* %20] [^b, [4 * i32]* %graph];
    i32 %6 = phi [^b2, i32 %30] [^b, i32 %m];
    i32 %7 = phi [^b2, i32 %31] [^b, i32 %i];
    i32* %8 = phi [^b2, i32* %22] [^b, i32* %color];
    i32 %9 = phi [^b2, i32 %33] [^b, i32 1];
    i1 %10 = scmp le i32 %9, i32 %6;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
^if.then:
    i32 %11 = phi [^b5, i32 0] [^while.header, i32 1];
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^while.header3, ^b1;
^while.header2:
    i32 %13 = phi [^b6, i32 %43] [^while.body, i32 %4];
    i1 %14 = scmp lt i32 %13, i32 4;
    cbr i1 %14(prob = 0.97), ^while.body3, ^while.header;
^while.body1:
    i32* %15 = getelementptr &(i32* %8)[i32 %7];
    store i32* %15 with i32 %9;
    i32 %16 = load i32* %m1;
    i32 %17 = load i32* %i1;
    i32 %18 = add i32 %17, i32 1;
    i32 %19 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %5, i32 %16, i32 %18, i32* %8);
    [4 * i32]* %20 = load [4 * i32]** %graph1;
    i32 %21 = load i32* %i1;
    i32* %22 = load i32** %color1;
    i1 %23 = scmp neq i32 %19, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b2;
^while.header3:
    i32 %24 = phi [^if.then, i32 0] [^while.body2, i32 %28];
    i1 %25 = scmp lt i32 %24, i32 4;
    cbr i1 %25(prob = 0.97), ^while.body2, ^b3;
^b1:
    ret i32 0;
^while.body2:
    i32* %26 = getelementptr &(i32* %color)[i32 %24];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 32);
    i32 %28 = add i32 %24, i32 1;
    ubr ^while.header3;
^b2:
    i32* %29 = getelementptr &(i32* %22)[i32 %21];
    store i32* %29 with i32 0;
    i32 %30 = load i32* %m1;
    i32 %31 = load i32* %i1;
    i32 %32 = load i32* %j;
    i32 %33 = add i32 %32, i32 1;
    store i32* %j with i32 %33;
    ubr ^while.header1;
^while.body3:
    i32* %34 = getelementptr &([4 * i32]* %3)[i64 0][i32 %13];
    i32 %35 = load i32* %34;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.5), ^b4, ^b5;
^if.then1:
    ret i32 1;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 1;
^b4:
    i32* %37 = getelementptr &(i32* %color)[i32 %13];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %color)[i32 %1];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %38, i32 %40;
    ubr ^b5;
^b5:
    i1 %42 = phi [^b4, i1 %41] [^while.body3, i1 false];
    cbr i1 %42(prob = 0.5), ^if.then, ^b6;
^b6:
    i32 %43 = add i32 %13, i32 1;
    ubr ^while.header2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [4 * i32]* %color = alloc [4 * i32];
    [4 * [4 * i32]]* %graph = alloc [4 * [4 * i32]];
    i32* %0 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 1];
    i32* %1 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 0];
    store i32* %1 with i32 0;
    store i32* %0 with i32 1;
    i32* %2 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 2];
    store i32* %2 with i32 1;
    i32* %3 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 0];
    store i32* %4 with i32 1;
    i32* %5 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 2];
    i32* %6 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 1];
    store i32* %6 with i32 0;
    store i32* %5 with i32 1;
    i32* %7 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 0];
    i32* %8 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 3];
    store i32* %8 with i32 0;
    store i32* %7 with i32 1;
    i32* %9 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 3];
    i32* %11 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 2];
    store i32* %11 with i32 0;
    store i32* %10 with i32 1;
    i32* %12 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 0];
    store i32* %12 with i32 1;
    i32* %13 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 2];
    i32* %14 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 1];
    store i32* %14 with i32 0;
    store i32* %13 with i32 1;
    i32* %15 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 3];
    store i32* %15 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %16 = phi [^while.body, i32 %19] [^entry, i32 0];
    i1 %17 = scmp lt i32 %16, i32 4;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %18 = getelementptr &([4 * i32]* %color)[i64 0][i32 %16];
    store i32* %18 with i32 0;
    i32 %19 = add i32 %16, i32 1;
    ubr ^while.header;
^b:
    [4 * i32]* %20 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0];
    i32* %21 = getelementptr &([4 * i32]* %color)[i64 0][i64 0];
    i32 %22 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %20, i32 3, i32 0, i32* %21);
    i1 %23 = scmp eq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^entry1, ^b1;
^entry1:
    call (i32) -> void @putch(i32 78);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 101);
    call (i32) -> void @putch(i32 120);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 115);
    call (i32) -> void @putch(i32 116);
    ubr ^b1;
^b1:
    ret i32 0;
}
