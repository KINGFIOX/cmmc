internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @graphColoring([4 * i32]* %graph, i32 %m, i32 %i, i32* %color) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32** %color1 = alloc i32*;
    i32* %i1 = alloc i32;
    i32* %m1 = alloc i32;
    [4 * i32]** %graph1 = alloc [4 * i32]*;
    store [4 * i32]** %graph1 with [4 * i32]* %graph;
    store i32* %m1 with i32 %m;
    store i32* %i1 with i32 %i;
    store i32** %color1 with i32* %color;
    i1 %0 = scmp eq i32 %i, i32 4;
    cbr i1 %0(prob = 0.5), ^while.body, ^b;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^b1, i32 %2];
    i32 %2 = add i32 %1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 4;
    [4 * i32]* %4 = getelementptr &([4 * i32]* %graph)[i32 %1];
    i32* %5 = getelementptr &(i32* %color)[i32 %1];
    cbr i1 %3(prob = 0.97), ^while.body1, ^b1;
^b:
    store i32* %j with i32 1;
    i1 %6 = scmp gt i32 %m, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %7 = phi [^while.body, i32 %2] [^b4, i32 %29];
    i32* %8 = getelementptr &([4 * i32]* %4)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^b3, ^b4;
^while.body2:
    [4 * i32]* %11 = phi [^b, [4 * i32]* %graph] [^b5, [4 * i32]* %20];
    i32 %12 = phi [^b, i32 %i] [^b5, i32 %33];
    i32* %13 = phi [^b, i32* %color] [^b5, i32* %22];
    i32 %14 = phi [^b, i32 1] [^b5, i32 %35];
    i32* %15 = getelementptr &(i32* %13)[i32 %12];
    store i32* %15 with i32 %14;
    i32 %16 = load i32* %m1;
    i32 %17 = load i32* %i1;
    i32 %18 = add i32 %17, i32 1;
    i32 %19 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %11, i32 %16, i32 %18, i32* %13);
    [4 * i32]* %20 = load [4 * i32]** %graph1;
    i32 %21 = load i32* %i1;
    i32* %22 = load i32** %color1;
    i1 %23 = scmp neq i32 %19, i32 0;
    cbr i1 %23(prob = 0.5), ^b2, ^b5;
^b1:
    cbr i1 %3(prob = 0.75), ^while.body, ^while.body3;
^b2:
    i32 %24 = phi [^b, i32 0] [^while.body2, i32 1] [^b3, i32 0] [^b5, i32 0] [^b6, i32 1];
    ret i32 %24;
^b3:
    i32* %25 = getelementptr &(i32* %color)[i32 %7];
    i32 %26 = load i32* %25;
    i32 %27 = load i32* %5;
    i1 %28 = scmp eq i32 %26, i32 %27;
    cbr i1 %28(prob = 0.5), ^b2, ^b4;
^b4:
    i32 %29 = add i32 %7, i32 1;
    i1 %30 = scmp lt i32 %29, i32 4;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b1;
^b5:
    i32* %31 = getelementptr &(i32* %22)[i32 %21];
    store i32* %31 with i32 0;
    i32 %32 = load i32* %m1;
    i32 %33 = load i32* %i1;
    i32 %34 = load i32* %j;
    i32 %35 = add i32 %34, i32 1;
    store i32* %j with i32 %35;
    i1 %36 = scmp le i32 %35, i32 %32;
    cbr i1 %36(prob = 0.97), ^while.body2, ^b2;
^while.body3:
    i32 %37 = phi [^b1, i32 0] [^while.body3, i32 %40];
    i32* %38 = getelementptr &(i32* %color)[i32 %37];
    i32 %39 = load i32* %38;
    call (i32) -> void @putint(i32 %39);
    call (i32) -> void @putch(i32 32);
    i32 %40 = add i32 %37, i32 1;
    i1 %41 = scmp lt i32 %40, i32 4;
    cbr i1 %41(prob = 0.75), ^while.body3, ^b6;
^b6:
    call (i32) -> void @putch(i32 10);
    ubr ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [4 * i32]* %color = alloc [4 * i32];
    [4 * [4 * i32]]* %graph = alloc [4 * [4 * i32]];
    i32* %0 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 1];
    i32* %1 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 0];
    store i32* %1 with i32 0;
    store i32* %0 with i32 1;
    i32* %2 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 2];
    store i32* %2 with i32 1;
    i32* %3 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 0];
    store i32* %4 with i32 1;
    i32* %5 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 2];
    i32* %6 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 1];
    store i32* %6 with i32 0;
    store i32* %5 with i32 1;
    i32* %7 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 0];
    i32* %8 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 1][i64 3];
    store i32* %8 with i32 0;
    store i32* %7 with i32 1;
    i32* %9 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 3];
    i32* %11 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 2][i64 2];
    store i32* %11 with i32 0;
    store i32* %10 with i32 1;
    i32* %12 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 0];
    store i32* %12 with i32 1;
    i32* %13 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 2];
    i32* %14 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 1];
    store i32* %14 with i32 0;
    store i32* %13 with i32 1;
    i32* %15 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 3][i64 3];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([4 * i32]* %color)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([4 * i32]* %color)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([4 * i32]* %color)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([4 * i32]* %color)[i64 0][i64 3];
    store i32* %19 with i32 0;
    [4 * i32]* %20 = getelementptr &([4 * [4 * i32]]* %graph)[i64 0][i64 0];
    i32 %21 = call ([4 * i32]*, i32, i32, i32*) -> i32 @graphColoring([4 * i32]* %20, i32 3, i32 0, i32* %16);
    i1 %22 = scmp eq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^entry1, ^b;
^entry1:
    call (i32) -> void @putch(i32 78);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 116);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putch(i32 101);
    call (i32) -> void @putch(i32 120);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 115);
    call (i32) -> void @putch(i32 116);
    ubr ^b;
^b:
    ret i32 0;
}
