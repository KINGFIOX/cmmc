internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32 %k, [30 * i32]* %0, i32* %1) -> i32 {
^entry:
    i32 %2 = load i32* %1;
    i1 %3 = scmp gt i32 %2, i32 0;
    i32* %4 = getelementptr &([30 * i32]* %0)[i64 0][i32 %k];
    i32 %5 = add i32 %k, i32 1;
    i1 %6 = scmp gt i32 %5, i32 1;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = phi [^entry, i32 1] [^b3, i32 %29];
    i32 %8 = phi [^entry, i32 0] [^b3, i32 %28];
    store i32* %4 with i32 %7;
    cbr i1 %6(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %9 = phi [^entry, i32 0] [^b3, i32 %28];
    ret i32 %9;
^while.body1:
    i32 %10 = phi [^while.body, i32 1] [^b2, i32 %11];
    i32 %11 = add i32 %10, i32 1;
    i1 %12 = scmp lt i32 %11, i32 %5;
    i32* %13 = getelementptr &([30 * i32]* %0)[i64 0][i32 %10];
    cbr i1 %12(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %14 = phi [^while.body, i32 1] [^while.body2, i32 0];
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^while.body2:
    i32 %16 = phi [^while.body1, i32 %11] [^b4, i32 %32];
    i32 %17 = load i32* %13;
    [30 * i32]* %18 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %17];
    i32* %19 = getelementptr &([30 * i32]* %0)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([30 * i32]* %18)[i64 0][i32 %20];
    i32 %22 = load i32* %21;
    i1 %23 = scmp eq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b1, ^b4;
^b2:
    cbr i1 %12(prob = 0.97), ^while.body1, ^if.then;
^if.then:
    i1 %24 = scmp gt i32 %k, i32 %8;
    i32 %25 = select i1 %24 ? i32 %k : i32 %8;
    i32 %26 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 %5, [30 * i32]* %0, i32* %1);
    i1 %27 = scmp gt i32 %26, i32 %25;
    cbr i1 %27(prob = 0.5), ^if.then1, ^b3;
^b3:
    i32 %28 = phi [^b1, i32 %8] [^if.then, i32 %25] [^if.then1, i32 %26];
    i32 %29 = add i32 %7, i32 1;
    i32 %30 = load i32* %1;
    i1 %31 = scmp le i32 %29, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body, ^b;
^if.then1:
    ubr ^b3;
^b4:
    i32 %32 = add i32 %16, i32 1;
    i1 %33 = scmp lt i32 %32, i32 %5;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    [30 * i32]* %store = alloc [30 * i32];
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    i1 %32 = scmp gt i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %33 = phi [^entry, i32 0] [^while.body, i32 %39];
    [2 * i32]* %34 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %33];
    i32* %35 = getelementptr &([2 * i32]* %34)[i64 0][i64 0];
    i32 %36 = call () -> i32 @getint();
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &([2 * i32]* %34)[i64 0][i64 1];
    i32 %38 = call () -> i32 @getint();
    store i32* %37 with i32 %38;
    i32 %39 = add i32 %33, i32 1;
    i1 %40 = scmp lt i32 %39, i32 %31;
    cbr i1 %40(prob = 0.97), ^while.body, ^b;
^b:
    cbr i1 %32(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %41 = phi [^b, i32 0] [^while.body1, i32 %51];
    [2 * i32]* %42 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %41];
    i32* %43 = getelementptr &([2 * i32]* %42)[i64 0][i64 0];
    i32 %44 = load i32* %43;
    [30 * i32]* %45 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %44];
    i32* %46 = getelementptr &([2 * i32]* %42)[i64 0][i64 1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &([30 * i32]* %45)[i64 0][i32 %47];
    store i32* %48 with i32 1;
    [30 * i32]* %49 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %47];
    i32* %50 = getelementptr &([30 * i32]* %49)[i64 0][i32 %44];
    store i32* %50 with i32 1;
    i32 %51 = add i32 %41, i32 1;
    i1 %52 = scmp lt i32 %51, i32 %31;
    cbr i1 %52(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %53 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 1, [30 * i32]* %store, i32* %n);
    call (i32) -> void @putint(i32 %53);
    ret i32 0;
}
