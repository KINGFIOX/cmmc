internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @maxN { ReadOnly } = 30;
internal i32* @maxM { ReadOnly } = 600;
internal [30 * i32]* @store;
internal i32* @n;
internal i32* @m;
internal [30 * [30 * i32]]* @graph;
internal func @is_clique(i32 %num) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %num1 = alloc i32;
    store i32* %num1 with i32 %num;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %num1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i32 %6 = add i32 %5, i32 1;
    store i32* %j with i32 %6;
    ubr ^while.header1;
^b:
    ret i32 1;
^while.header1:
    i32 %7 = load i32* %j;
    i32 %8 = load i32* %num1;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^while.body1:
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([30 * i32]* @store)[i64 0][i64 %15];
    i32 %17 = load i32* %16;
    i64 %18 = sext i32 %17 to i64;
    [30 * i32]* %19 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i64 %18];
    i32 %20 = load i32* %j;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = getelementptr &([30 * i32]* @store)[i64 0][i64 %21];
    i32 %23 = load i32* %22;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([30 * i32]* %19)[i64 0][i64 %24];
    i32 %26 = load i32* %25;
    i1 %27 = scmp eq i32 %26, i32 0;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %30 = load i32* %j;
    i32 %31 = add i32 %30, i32 1;
    store i32* %j with i32 %31;
    ubr ^while.header1;
^if.then:
    ret i32 0;
}
internal func @maxCliques(i32 %i, i32 %k) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %j = alloc i32;
    i32* %max_ = alloc i32;
    i32* %k1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %k1 with i32 %k;
    store i32* %max_ with i32 0;
    store i32* %j with i32 1;
    store i32* %i1 with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %j;
    i32 %1 = load i32* @n;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %k1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([30 * i32]* @store)[i64 0][i64 %6];
    i32 %8 = load i32* %j;
    store i32* %7 with i32 %8;
    i32 %9 = load i32* %k1;
    i32 %10 = add i32 %9, i32 1;
    i32 %11 = call (i32) -> i32 @is_clique(i32 %10);
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %13 = load i32* %max_;
    ret i32 %13;
^b1:
    i32 %14 = load i32* %j;
    i32 %15 = add i32 %14, i32 1;
    store i32* %j with i32 %15;
    ubr ^while.header;
^if.then:
    i32 %16 = load i32* %k1;
    i32 %17 = load i32* %max_;
    i1 %18 = scmp gt i32 %16, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %21 = load i32* %k1;
    store i32* %max_ with i32 %21;
    ubr ^b2;
^b2:
    i32 %22 = load i32* %j;
    i32 %23 = load i32* %k1;
    i32 %24 = add i32 %23, i32 1;
    i32 %25 = call (i32, i32) -> i32 @maxCliques(i32 %22, i32 %24);
    store i32* %tmp with i32 %25;
    i32 %26 = load i32* %tmp;
    i32 %27 = load i32* %max_;
    i1 %28 = scmp gt i32 %26, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then2, ^b3;
^if.then2:
    i32 %31 = load i32* %tmp;
    store i32* %max_ with i32 %31;
    ubr ^b3;
^b3:
    ubr ^b1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i32 %0 = call () -> i32 @getint();
    store i32* @n with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @m with i32 %1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* @m;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = load i32* %i;
    i64 %8 = sext i32 %7 to i64;
    [2 * i32]* %9 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %8];
    i32* %10 = getelementptr &([2 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    [2 * i32]* %14 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %13];
    i32* %15 = getelementptr &([2 * i32]* %14)[i64 0][i64 1];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = load i32* %i;
    i32 %18 = add i32 %17, i32 1;
    store i32* %i with i32 %18;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %19 = load i32* %i;
    i32 %20 = load i32* @m;
    i1 %21 = scmp lt i32 %19, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    [2 * i32]* %26 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %25];
    i32* %27 = getelementptr &([2 * i32]* %26)[i64 0][i64 0];
    i32 %28 = load i32* %27;
    i64 %29 = sext i32 %28 to i64;
    [30 * i32]* %30 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i64 %29];
    i32 %31 = load i32* %i;
    i64 %32 = sext i32 %31 to i64;
    [2 * i32]* %33 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %32];
    i32* %34 = getelementptr &([2 * i32]* %33)[i64 0][i64 1];
    i32 %35 = load i32* %34;
    i64 %36 = sext i32 %35 to i64;
    i32* %37 = getelementptr &([30 * i32]* %30)[i64 0][i64 %36];
    store i32* %37 with i32 1;
    i32 %38 = load i32* %i;
    i64 %39 = sext i32 %38 to i64;
    [2 * i32]* %40 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %39];
    i32* %41 = getelementptr &([2 * i32]* %40)[i64 0][i64 1];
    i32 %42 = load i32* %41;
    i64 %43 = sext i32 %42 to i64;
    [30 * i32]* %44 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i64 %43];
    i32 %45 = load i32* %i;
    i64 %46 = sext i32 %45 to i64;
    [2 * i32]* %47 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i64 %46];
    i32* %48 = getelementptr &([2 * i32]* %47)[i64 0][i64 0];
    i32 %49 = load i32* %48;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([30 * i32]* %44)[i64 0][i64 %50];
    store i32* %51 with i32 1;
    i32 %52 = load i32* %i;
    i32 %53 = add i32 %52, i32 1;
    store i32* %i with i32 %53;
    ubr ^while.header1;
^b1:
    i32 %54 = call (i32, i32) -> i32 @maxCliques(i32 0, i32 1);
    call (i32) -> void @putint(i32 %54);
    ret i32 0;
}
