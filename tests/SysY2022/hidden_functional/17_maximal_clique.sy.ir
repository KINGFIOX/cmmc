internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph, align 8 { Flexible };
internal func @maxCliques(i32 %k, [30 * i32]* %0, i32* %1) -> i32 {
  ^entry:
    i32* %2 = getelementptr &([30 * i32]* %0)[i64 0][i32 %k];
    i32 %3 = add i32 %k, i32 1;
    [30 * [30 * i32]]* %4 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %20];
    i32 %6 = phi [^entry, i32 1] [^b2, i32 %21];
    i32 %7 = load i32* %1;
    i1 %8 = icmp sle i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    store i32* %2 with i32 %6;
    ubr ^while.header1;
  ^b:
    ret i32 %5;
  ^while.header1:
    i32 %9 = phi [^while.body, i32 1] [^while.header2, i32 %12];
    i1 %10 = icmp sgt i32 %3, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32* %11 = getelementptr &([30 * i32]* %0)[i64 0][i32 %9];
    i32 %12 = add i32 %9, i32 1;
    ubr ^while.header2;
  ^b1:
    i32 %13 = phi [^while.header1, i32 1] [^while.body2, i32 0];
    i1 %14 = icmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %15 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 %3, [30 * i32]* %0, i32* %1);
    i32 %16 = smax i32 %k, i32 %5;
    i32 %17 = smax i32 %15, i32 %16;
    ubr ^b2;
  ^while.header2:
    i32 %18 = phi [^while.body1, i32 %12] [^b3, i32 %29];
    i1 %19 = icmp sgt i32 %3, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body2, ^while.header1;
  ^b2:
    i32 %20 = phi [^b1, i32 %5] [^if.then, i32 %17];
    i32 %21 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %22 = load i32* %11;
    [30 * i32]* %23 = getelementptr &([30 * [30 * i32]]* %4)[i64 0][i32 %22];
    i32* %24 = getelementptr &([30 * i32]* %0)[i64 0][i32 %18];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([30 * i32]* %23)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i1 %28 = icmp eq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^b1, ^b3;
  ^b3:
    i32 %29 = add i32 %18, i32 1;
    ubr ^while.header2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %n = alloc i32, align 8;
    [30 * i32]* %store = alloc [30 * i32], align 8;
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    i1 %32 = icmp sgt i32 %31, i32 0;
    [30 * [30 * i32]]* %33 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    [600 * [2 * i32]]* %34 = ptrcast [600 * [2 * i32]]* @edges to [600 * [2 * i32]]*;
    cbr i1 %32(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %35 = phi [^entry, i32 0] [^while.body, i32 %41];
    i32 %36 = call () -> i32 @getint();
    [2 * i32]* %37 = getelementptr &([600 * [2 * i32]]* %34)[i64 0][i32 %35];
    i32* %38 = getelementptr &([2 * i32]* %37)[i64 0][i64 0];
    store i32* %38 with i32 %36;
    i32 %39 = call () -> i32 @getint();
    i32* %40 = getelementptr &([2 * i32]* %37)[i64 0][i64 1];
    store i32* %40 with i32 %39;
    i32 %41 = add i32 %35, i32 1;
    i1 %42 = icmp sgt i32 %31, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body, ^indirect;
  ^b:
    i32 %43 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 1, [30 * i32]* %store, i32* %n);
    call (i32) -> void @putint(i32 %43);
    ret i32 0;
  ^indirect:
    i1 %44 = icmp sgt i32 %31, i32 4;
    cbr i1 %44(prob = 0.89), ^prebody, ^while.body1;
  ^prebody:
    i32 %45 = add i32 %31, i32 -4;
    ubr ^while.body2;
  ^while.body1 {scalar}:
    i32 %46 = phi [^indirect, i32 0] [^while.body1, i32 %56] [^while.body2, i32 %92];
    [2 * i32]* %47 = getelementptr &([600 * [2 * i32]]* %34)[i64 0][i32 %46];
    i32* %48 = getelementptr &([2 * i32]* %47)[i64 0][i64 0];
    i32 %49 = load i32* %48;
    [30 * i32]* %50 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %49];
    i32* %51 = getelementptr &([2 * i32]* %47)[i64 0][i64 1];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([30 * i32]* %50)[i64 0][i32 %52];
    store i32* %53 with i32 1;
    [30 * i32]* %54 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %52];
    i32* %55 = getelementptr &([30 * i32]* %54)[i64 0][i32 %49];
    store i32* %55 with i32 1;
    i32 %56 = add i32 %46, i32 1;
    i1 %57 = icmp sgt i32 %31, i32 %56;
    cbr i1 %57(prob = 0.75), ^while.body1, ^b;
  ^while.body2:
    i32 %58 = phi [^prebody, i32 0] [^while.body2, i32 %92];
    [2 * i32]* %59 = getelementptr &([600 * [2 * i32]]* %34)[i64 0][i32 %58];
    i32* %60 = getelementptr &([2 * i32]* %59)[i64 0][i64 0];
    i32 %61 = load i32* %60;
    [30 * i32]* %62 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %61];
    i32* %63 = getelementptr &([2 * i32]* %59)[i64 0][i64 1];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &([30 * i32]* %62)[i64 0][i32 %64];
    store i32* %65 with i32 1;
    [30 * i32]* %66 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %64];
    i32* %67 = getelementptr &([30 * i32]* %66)[i64 0][i32 %61];
    store i32* %67 with i32 1;
    i32* %68 = getelementptr &([2 * i32]* %59)[i64 1][i64 0];
    i32 %69 = load i32* %68;
    [30 * i32]* %70 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %69];
    i32* %71 = getelementptr &([2 * i32]* %59)[i64 1][i64 1];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &([30 * i32]* %70)[i64 0][i32 %72];
    store i32* %73 with i32 1;
    [30 * i32]* %74 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %72];
    i32* %75 = getelementptr &([30 * i32]* %74)[i64 0][i32 %69];
    store i32* %75 with i32 1;
    i32* %76 = getelementptr &([2 * i32]* %59)[i64 2][i64 0];
    i32 %77 = load i32* %76;
    [30 * i32]* %78 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %77];
    i32* %79 = getelementptr &([2 * i32]* %59)[i64 2][i64 1];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([30 * i32]* %78)[i64 0][i32 %80];
    store i32* %81 with i32 1;
    [30 * i32]* %82 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %80];
    i32* %83 = getelementptr &([30 * i32]* %82)[i64 0][i32 %77];
    store i32* %83 with i32 1;
    i32* %84 = getelementptr &([2 * i32]* %59)[i64 3][i64 0];
    i32 %85 = load i32* %84;
    [30 * i32]* %86 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %85];
    i32* %87 = getelementptr &([2 * i32]* %59)[i64 3][i64 1];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &([30 * i32]* %86)[i64 0][i32 %88];
    store i32* %89 with i32 1;
    [30 * i32]* %90 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %88];
    i32* %91 = getelementptr &([30 * i32]* %90)[i64 0][i32 %85];
    store i32* %91 with i32 1;
    i32 %92 = add i32 %58, i32 4;
    i1 %93 = icmp sgt i32 %45, i32 %92;
    cbr i1 %93(prob = 0.89), ^while.body2, ^while.body1;
}
internal [600 * [2 * i32]]* @edges, align 8 { Flexible };
