internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32 %i, i32 %k, [30 * i32]* %0, i32* %1, i32* %2) -> i32 {
^entry:
    i32* %3 = getelementptr &([30 * i32]* %0)[i64 0][i32 %k];
    i32 %4 = add i32 %k, i32 1;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^b1, i32 %17] [^entry, i32 0];
    i32 %6 = phi [^b1, i32 %18] [^entry, i32 1];
    i32 %7 = load i32* %1;
    i1 %8 = scmp le i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %3 with i32 %6;
    ubr ^while.header1;
^b:
    ret i32 %5;
^while.header1:
    i32 %9 = phi [^while.header2, i32 %12] [^while.body, i32 1];
    i1 %10 = scmp lt i32 %9, i32 %4;
    cbr i1 %10(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    i32* %11 = getelementptr &([30 * i32]* %0)[i64 0][i32 %9];
    i32 %12 = add i32 %9, i32 1;
    ubr ^while.header2;
^while.body2:
    i32 %13 = phi [^while.body3, i32 0] [^while.header1, i32 1];
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^b1;
^while.header2:
    i32 %15 = phi [^b3, i32 %30] [^while.body1, i32 %12];
    i1 %16 = scmp lt i32 %15, i32 %4;
    cbr i1 %16(prob = 0.97), ^while.body3, ^while.header1;
^b1:
    i32 %17 = phi [^b2, i32 %27] [^if.then2, i32 %28] [^while.body2, i32 %5];
    i32 %18 = add i32 %6, i32 1;
    ubr ^while.header;
^if.then:
    i1 %19 = scmp gt i32 %k, i32 %5;
    cbr i1 %19(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    ubr ^b2;
^while.body3:
    i32 %20 = load i32* %11;
    [30 * i32]* %21 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %20];
    i32* %22 = getelementptr &([30 * i32]* %0)[i64 0][i32 %15];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &([30 * i32]* %21)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp eq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^while.body2, ^b3;
^b2:
    i32 %27 = phi [^if.then, i32 %5] [^if.then1, i32 %k];
    i32 %28 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 %6, i32 %4, [30 * i32]* %0, i32* %1, i32* %2);
    i1 %29 = scmp gt i32 %28, i32 %27;
    cbr i1 %29(prob = 0.5), ^if.then2, ^b1;
^b3:
    i32 %30 = add i32 %15, i32 1;
    ubr ^while.header2;
^if.then2:
    ubr ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    [30 * i32]* %store = alloc [30 * i32];
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    store i32* %m with i32 %31;
    ubr ^while.header;
^while.header:
    i32 %32 = phi [^while.body, i32 %39] [^entry, i32 0];
    i1 %33 = scmp lt i32 %32, i32 %31;
    cbr i1 %33(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    [2 * i32]* %34 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %32];
    i32* %35 = getelementptr &([2 * i32]* %34)[i64 0][i64 0];
    i32 %36 = call () -> i32 @getint();
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &([2 * i32]* %34)[i64 0][i64 1];
    i32 %38 = call () -> i32 @getint();
    store i32* %37 with i32 %38;
    i32 %39 = add i32 %32, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %40 = phi [^while.header, i32 0] [^while.body1, i32 %51];
    i1 %41 = scmp lt i32 %40, i32 %31;
    cbr i1 %41(prob = 0.97), ^while.body1, ^b;
^while.body1:
    [2 * i32]* %42 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %40];
    i32* %43 = getelementptr &([2 * i32]* %42)[i64 0][i64 0];
    i32 %44 = load i32* %43;
    [30 * i32]* %45 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %44];
    i32* %46 = getelementptr &([2 * i32]* %42)[i64 0][i64 1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &([30 * i32]* %45)[i64 0][i32 %47];
    store i32* %48 with i32 1;
    [30 * i32]* %49 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %47];
    i32* %50 = getelementptr &([30 * i32]* %49)[i64 0][i32 %44];
    store i32* %50 with i32 1;
    i32 %51 = add i32 %40, i32 1;
    ubr ^while.header1;
^b:
    i32 %52 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 0, i32 1, [30 * i32]* %store, i32* %n, i32* %m);
    call (i32) -> void @putint(i32 %52);
    ret i32 0;
}
