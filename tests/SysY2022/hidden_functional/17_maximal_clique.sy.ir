internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32, i32, [30 * i32]*, i32*, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, [30 * i32]* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = load i32* %arg3;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32* %2 = getelementptr &([30 * i32]* %arg2)[i64 0][i32 %arg1];
    i32 %3 = add i32 %arg1, i32 1;
    i1 %4 = scmp gt i32 %3, i32 1;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg4, i32* %arg3, [30 * i32]* %arg2, i32 %arg1, i32 0, i32 1, i32 %3, i32 %3, i32 %3, i1 %4, i32* %2 ], [ ^b i32 0 ];
^while.body(i32* %arg, i32* %arg1, [30 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9, i32* %arg10):
    store i32* %arg10 with i32 %arg5;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    cbr i1 %arg9(prob = 0.97), [ ^while.body1 i32* %i, [30 * i32]* %arg2, i32 %arg5, [30 * i32]* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg8, i32 1, i32 %arg8, i1 %arg9, i32* %arg10, i32 %arg7, i32 %arg6 ], [ ^while.body2 i32 1, i32 %arg5, [30 * i32]* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg8, i1 %arg9, i32* %arg10, i32 %arg7, i32 %arg6 ];
^b(i32 %arg):
    ret i32 %arg;
^while.body1(i32* %arg, [30 * i32]* %arg1, i32 %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i32* %arg14, i32 %arg15, i32 %arg16):
    i32* %j = alloc i32;
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %j with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1(prob = 0.97), [ ^while.body3 i32* %j, i32* %arg, [30 * i32]* %arg1, i32 %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg16, i32 %arg15, i32* %arg14, i1 %arg13, i32 %arg12 ], [ ^indirect1 i32* %arg, i32 %arg10, [30 * i32]* %arg1, i32 %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg16, i32 %arg15, i32* %arg14, i1 %arg13, i32 %arg12 ];
^while.body2(i32 %arg, i32 %arg1, [30 * i32]* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i1 %arg10, i32* %arg11, i32 %arg12, i32 %arg13):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32 %arg5, i32* %arg4, i32* %arg3, [30 * i32]* %arg2, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg13, i32 %arg12, i32* %arg11, i1 %arg10, i32 %arg9 ], [ ^b1 i32 %arg1, i32* %arg4, [30 * i32]* %arg2, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg12, i32 %arg13, i32* %arg11, i1 %arg10, i32 %arg9 ];
^while.body3(i32* %arg, i32* %arg1, [30 * i32]* %arg2, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32* %arg16, i1 %arg17, i32 %arg18):
    i32* %0 = getelementptr &([30 * i32]* %arg2)[i64 0][i32 %arg12];
    i32 %1 = load i32* %0;
    [30 * i32]* %2 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %1];
    i32* %3 = getelementptr &([30 * i32]* %arg2)[i64 0][i32 %arg13];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &([30 * i32]* %2)[i64 0][i32 %4];
    i32 %6 = load i32* %5;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), [ ^while.body2 i32 0, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg18, i1 %arg17, i32* %arg16, i32 %arg15, i32 %arg14 ], [ ^indirect2 i32* %arg1, i32* %arg, i32 %arg13, [30 * i32]* %arg2, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg18, i1 %arg17, i32* %arg16, i32 %arg15, i32 %arg14 ];
^indirect(i32 %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32* %arg9, i1 %arg10, i32 %arg11):
    i1 %0 = scmp gt i32 %arg, i32 %arg5;
    cbr i1 %0(prob = 0.5), [ ^if.then [30 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg6, i32 %arg7, i32 %arg11, i1 %arg10, i32* %arg9, i32 %arg8 ], [ ^indirect3 [30 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg8, i32 %arg11, i1 %arg10, i32* %arg9, i32 %arg7 ];
^indirect1(i32* %arg, i32 %arg1, [30 * i32]* %arg2, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32* %arg15, i1 %arg16, i32 %arg17):
    i32 %0 = add i32 %arg12, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.97), [ ^while.body1 i32* %arg, [30 * i32]* %arg2, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg17, i1 %arg16, i32* %arg15, i32 %arg14, i32 %arg13 ], [ ^while.body2 i32 1, i32 %arg3, [30 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg17, i1 %arg16, i32* %arg15, i32 %arg14, i32 %arg13 ];
^b1(i32 %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i1 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = load i32* %arg3;
    i1 %2 = scmp le i32 %0, i32 %1;
    cbr i1 %2(prob = 0.97), [ ^while.body i32* %arg1, i32* %arg3, [30 * i32]* %arg2, i32 %arg4, i32 %arg5, i32 %0, i32 %arg7, i32 %arg6, i32 %arg10, i1 %arg9, i32* %arg8 ], [ ^b i32 %arg5 ];
^if.then([30 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 %arg4, i32 %arg9, [30 * i32]* %arg, i32* %arg1, i32* %arg2);
    i1 %1 = scmp gt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.5), [ ^b1 i32 %arg4, i32* %arg2, [30 * i32]* %arg, i32* %arg1, i32 %arg3, i32 %0, i32 %arg9, i32 %arg5, i32* %arg8, i1 %arg7, i32 %arg6 ], [ ^b2 [30 * i32]* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg3, i32 %arg4, i32 %arg9, i32 %arg5, i32* %arg8, i1 %arg7, i32 %arg6 ];
^indirect2(i32* %arg, i32* %arg1, i32 %arg2, [30 * i32]* %arg3, i32 %arg4, [30 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i32* %arg16, i32 %arg17, i32 %arg18):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1(prob = 0.97), [ ^while.body3 i32* %arg1, i32* %arg, [30 * i32]* %arg3, i32 %arg4, [30 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %0, i32 %arg18, i32 %arg17, i32* %arg16, i1 %arg15, i32 %arg14 ], [ ^indirect1 i32* %arg, i32 %arg12, [30 * i32]* %arg3, i32 %arg4, [30 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg18, i32 %arg17, i32* %arg16, i1 %arg15, i32 %arg14 ];
^indirect3([30 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8, i32* %arg9, i32 %arg10):
    i32 %0 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 %arg5, i32 %arg10, [30 * i32]* %arg, i32* %arg1, i32* %arg2);
    i1 %1 = scmp gt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.5), [ ^b1 i32 %arg5, i32* %arg2, [30 * i32]* %arg, i32* %arg1, i32 %arg3, i32 %0, i32 %arg6, i32 %arg10, i32* %arg9, i1 %arg8, i32 %arg7 ], [ ^b2 [30 * i32]* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg10, i32* %arg9, i1 %arg8, i32 %arg7 ];
^b2([30 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i1 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg5, i32 1;
    i32 %1 = load i32* %arg2;
    i1 %2 = scmp le i32 %0, i32 %1;
    cbr i1 %2(prob = 0.97), [ ^while.body i32* %arg1, i32* %arg2, [30 * i32]* %arg, i32 %arg3, i32 %arg4, i32 %0, i32 %arg7, i32 %arg6, i32 %arg10, i1 %arg9, i32* %arg8 ], [ ^b i32 %arg4 ];
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [30 * i32]* %store = alloc [30 * i32];
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    store i32* %m with i32 %31;
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i1 %32 = scmp gt i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), [ ^super.header [600 * [2 * i32]]* %edges, i32* %n, [30 * i32]* %store, i32* %m, i32 %31, i32 0 ], [ ^b [600 * [2 * i32]]* %edges, i32* %m, i32* %n, [30 * i32]* %store, i32 %31, i1 %32 ];
^super.header([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg5, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^while.body1 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^b([600 * [2 * i32]]* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32 %arg4, i1 %arg5):
    cbr i1 %arg5(prob = 0.97), [ ^super.header1 [600 * [2 * i32]]* %arg, i32* %arg2, [30 * i32]* %arg3, i32* %arg1, i32 %arg4, i32 0 ], [ ^b1 i32* %arg1, i32* %arg2, [30 * i32]* %arg3 ];
^while.body([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i64 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32* %3 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32* %5 = getelementptr &([2 * i32]* %0)[i64 1][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32* %7 = getelementptr &([2 * i32]* %0)[i64 1][i64 1];
    i32 %8 = call () -> i32 @getint();
    store i32* %7 with i32 %8;
    i32* %9 = getelementptr &([2 * i32]* %0)[i64 2][i64 0];
    i32 %10 = call () -> i32 @getint();
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &([2 * i32]* %0)[i64 2][i64 1];
    i32 %12 = call () -> i32 @getint();
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &([2 * i32]* %0)[i64 3][i64 0];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &([2 * i32]* %0)[i64 3][i64 1];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &([2 * i32]* %0)[i64 4][i64 0];
    i32 %18 = call () -> i32 @getint();
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &([2 * i32]* %0)[i64 4][i64 1];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &([2 * i32]* %0)[i64 5][i64 0];
    i32 %22 = call () -> i32 @getint();
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &([2 * i32]* %0)[i64 5][i64 1];
    i32 %24 = call () -> i32 @getint();
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &([2 * i32]* %0)[i64 6][i64 0];
    i32 %26 = call () -> i32 @getint();
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &([2 * i32]* %0)[i64 6][i64 1];
    i32 %28 = call () -> i32 @getint();
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &([2 * i32]* %0)[i64 7][i64 0];
    i32 %30 = call () -> i32 @getint();
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &([2 * i32]* %0)[i64 7][i64 1];
    i32 %32 = call () -> i32 @getint();
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &([2 * i32]* %0)[i64 8][i64 0];
    i32 %34 = call () -> i32 @getint();
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &([2 * i32]* %0)[i64 8][i64 1];
    i32 %36 = call () -> i32 @getint();
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &([2 * i32]* %0)[i64 9][i64 0];
    i32 %38 = call () -> i32 @getint();
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &([2 * i32]* %0)[i64 9][i64 1];
    i32 %40 = call () -> i32 @getint();
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &([2 * i32]* %0)[i64 10][i64 0];
    i32 %42 = call () -> i32 @getint();
    store i32* %41 with i32 %42;
    i32* %43 = getelementptr &([2 * i32]* %0)[i64 10][i64 1];
    i32 %44 = call () -> i32 @getint();
    store i32* %43 with i32 %44;
    i32* %45 = getelementptr &([2 * i32]* %0)[i64 11][i64 0];
    i32 %46 = call () -> i32 @getint();
    store i32* %45 with i32 %46;
    i32* %47 = getelementptr &([2 * i32]* %0)[i64 11][i64 1];
    i32 %48 = call () -> i32 @getint();
    store i32* %47 with i32 %48;
    i32* %49 = getelementptr &([2 * i32]* %0)[i64 12][i64 0];
    i32 %50 = call () -> i32 @getint();
    store i32* %49 with i32 %50;
    i32* %51 = getelementptr &([2 * i32]* %0)[i64 12][i64 1];
    i32 %52 = call () -> i32 @getint();
    store i32* %51 with i32 %52;
    i32* %53 = getelementptr &([2 * i32]* %0)[i64 13][i64 0];
    i32 %54 = call () -> i32 @getint();
    store i32* %53 with i32 %54;
    i32* %55 = getelementptr &([2 * i32]* %0)[i64 13][i64 1];
    i32 %56 = call () -> i32 @getint();
    store i32* %55 with i32 %56;
    i32* %57 = getelementptr &([2 * i32]* %0)[i64 14][i64 0];
    i32 %58 = call () -> i32 @getint();
    store i32* %57 with i32 %58;
    i32* %59 = getelementptr &([2 * i32]* %0)[i64 14][i64 1];
    i32 %60 = call () -> i32 @getint();
    store i32* %59 with i32 %60;
    i32* %61 = getelementptr &([2 * i32]* %0)[i64 15][i64 0];
    i32 %62 = call () -> i32 @getint();
    store i32* %61 with i32 %62;
    i32* %63 = getelementptr &([2 * i32]* %0)[i64 15][i64 1];
    i32 %64 = call () -> i32 @getint();
    store i32* %63 with i32 %64;
    i32 %65 = add i32 %arg5, i32 16;
    i1 %66 = scmp lt i32 %65, i32 %arg4;
    cbr i1 %66(prob = 0.97), [ ^super.header [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %65 ], [ ^b [600 * [2 * i32]]* %arg, i32* %arg3, i32* %arg1, [30 * i32]* %arg2, i32 %arg4, i1 true ];
^while.body1([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i64 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32* %3 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %arg5, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg4;
    cbr i1 %6(prob = 0.97), [ ^while.body1 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %5 ], [ ^b [600 * [2 * i32]]* %arg, i32* %arg3, i32* %arg1, [30 * i32]* %arg2, i32 %arg4, i1 true ];
^super.header1([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg5, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body2 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^while.body3 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^b1(i32* %arg, i32* %arg1, [30 * i32]* %arg2):
    i32 %0 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 0, i32 1, [30 * i32]* %arg2, i32* %arg1, i32* %arg);
    call (i32) -> void @putint(i32 %0);
    ret i32 0;
^while.body2([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i64 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    i32 %2 = load i32* %1;
    [30 * i32]* %3 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %2];
    i32* %4 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &([30 * i32]* %3)[i64 0][i32 %5];
    store i32* %6 with i32 1;
    [30 * i32]* %7 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %5];
    i32* %8 = getelementptr &([30 * i32]* %7)[i64 0][i32 %2];
    store i32* %8 with i32 1;
    i32* %9 = getelementptr &([2 * i32]* %0)[i64 1][i64 0];
    i32 %10 = load i32* %9;
    [30 * i32]* %11 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %10];
    i32* %12 = getelementptr &([2 * i32]* %0)[i64 1][i64 1];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([30 * i32]* %11)[i64 0][i32 %13];
    store i32* %14 with i32 1;
    [30 * i32]* %15 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %13];
    i32* %16 = getelementptr &([30 * i32]* %15)[i64 0][i32 %10];
    store i32* %16 with i32 1;
    i32* %17 = getelementptr &([2 * i32]* %0)[i64 2][i64 0];
    i32 %18 = load i32* %17;
    [30 * i32]* %19 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %18];
    i32* %20 = getelementptr &([2 * i32]* %0)[i64 2][i64 1];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &([30 * i32]* %19)[i64 0][i32 %21];
    store i32* %22 with i32 1;
    [30 * i32]* %23 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %21];
    i32* %24 = getelementptr &([30 * i32]* %23)[i64 0][i32 %18];
    store i32* %24 with i32 1;
    i32* %25 = getelementptr &([2 * i32]* %0)[i64 3][i64 0];
    i32 %26 = load i32* %25;
    [30 * i32]* %27 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %26];
    i32* %28 = getelementptr &([2 * i32]* %0)[i64 3][i64 1];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &([30 * i32]* %27)[i64 0][i32 %29];
    store i32* %30 with i32 1;
    [30 * i32]* %31 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %29];
    i32* %32 = getelementptr &([30 * i32]* %31)[i64 0][i32 %26];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([2 * i32]* %0)[i64 4][i64 0];
    i32 %34 = load i32* %33;
    [30 * i32]* %35 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %34];
    i32* %36 = getelementptr &([2 * i32]* %0)[i64 4][i64 1];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &([30 * i32]* %35)[i64 0][i32 %37];
    store i32* %38 with i32 1;
    [30 * i32]* %39 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %37];
    i32* %40 = getelementptr &([30 * i32]* %39)[i64 0][i32 %34];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([2 * i32]* %0)[i64 5][i64 0];
    i32 %42 = load i32* %41;
    [30 * i32]* %43 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %42];
    i32* %44 = getelementptr &([2 * i32]* %0)[i64 5][i64 1];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &([30 * i32]* %43)[i64 0][i32 %45];
    store i32* %46 with i32 1;
    [30 * i32]* %47 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %45];
    i32* %48 = getelementptr &([30 * i32]* %47)[i64 0][i32 %42];
    store i32* %48 with i32 1;
    i32* %49 = getelementptr &([2 * i32]* %0)[i64 6][i64 0];
    i32 %50 = load i32* %49;
    [30 * i32]* %51 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %50];
    i32* %52 = getelementptr &([2 * i32]* %0)[i64 6][i64 1];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([30 * i32]* %51)[i64 0][i32 %53];
    store i32* %54 with i32 1;
    [30 * i32]* %55 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %53];
    i32* %56 = getelementptr &([30 * i32]* %55)[i64 0][i32 %50];
    store i32* %56 with i32 1;
    i32* %57 = getelementptr &([2 * i32]* %0)[i64 7][i64 0];
    i32 %58 = load i32* %57;
    [30 * i32]* %59 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %58];
    i32* %60 = getelementptr &([2 * i32]* %0)[i64 7][i64 1];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &([30 * i32]* %59)[i64 0][i32 %61];
    store i32* %62 with i32 1;
    [30 * i32]* %63 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %61];
    i32* %64 = getelementptr &([30 * i32]* %63)[i64 0][i32 %58];
    store i32* %64 with i32 1;
    i32* %65 = getelementptr &([2 * i32]* %0)[i64 8][i64 0];
    i32 %66 = load i32* %65;
    [30 * i32]* %67 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %66];
    i32* %68 = getelementptr &([2 * i32]* %0)[i64 8][i64 1];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &([30 * i32]* %67)[i64 0][i32 %69];
    store i32* %70 with i32 1;
    [30 * i32]* %71 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %69];
    i32* %72 = getelementptr &([30 * i32]* %71)[i64 0][i32 %66];
    store i32* %72 with i32 1;
    i32* %73 = getelementptr &([2 * i32]* %0)[i64 9][i64 0];
    i32 %74 = load i32* %73;
    [30 * i32]* %75 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %74];
    i32* %76 = getelementptr &([2 * i32]* %0)[i64 9][i64 1];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &([30 * i32]* %75)[i64 0][i32 %77];
    store i32* %78 with i32 1;
    [30 * i32]* %79 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %77];
    i32* %80 = getelementptr &([30 * i32]* %79)[i64 0][i32 %74];
    store i32* %80 with i32 1;
    i32* %81 = getelementptr &([2 * i32]* %0)[i64 10][i64 0];
    i32 %82 = load i32* %81;
    [30 * i32]* %83 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %82];
    i32* %84 = getelementptr &([2 * i32]* %0)[i64 10][i64 1];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([30 * i32]* %83)[i64 0][i32 %85];
    store i32* %86 with i32 1;
    [30 * i32]* %87 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %85];
    i32* %88 = getelementptr &([30 * i32]* %87)[i64 0][i32 %82];
    store i32* %88 with i32 1;
    i32* %89 = getelementptr &([2 * i32]* %0)[i64 11][i64 0];
    i32 %90 = load i32* %89;
    [30 * i32]* %91 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %90];
    i32* %92 = getelementptr &([2 * i32]* %0)[i64 11][i64 1];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &([30 * i32]* %91)[i64 0][i32 %93];
    store i32* %94 with i32 1;
    [30 * i32]* %95 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %93];
    i32* %96 = getelementptr &([30 * i32]* %95)[i64 0][i32 %90];
    store i32* %96 with i32 1;
    i32* %97 = getelementptr &([2 * i32]* %0)[i64 12][i64 0];
    i32 %98 = load i32* %97;
    [30 * i32]* %99 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %98];
    i32* %100 = getelementptr &([2 * i32]* %0)[i64 12][i64 1];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &([30 * i32]* %99)[i64 0][i32 %101];
    store i32* %102 with i32 1;
    [30 * i32]* %103 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %101];
    i32* %104 = getelementptr &([30 * i32]* %103)[i64 0][i32 %98];
    store i32* %104 with i32 1;
    i32* %105 = getelementptr &([2 * i32]* %0)[i64 13][i64 0];
    i32 %106 = load i32* %105;
    [30 * i32]* %107 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %106];
    i32* %108 = getelementptr &([2 * i32]* %0)[i64 13][i64 1];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &([30 * i32]* %107)[i64 0][i32 %109];
    store i32* %110 with i32 1;
    [30 * i32]* %111 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %109];
    i32* %112 = getelementptr &([30 * i32]* %111)[i64 0][i32 %106];
    store i32* %112 with i32 1;
    i32* %113 = getelementptr &([2 * i32]* %0)[i64 14][i64 0];
    i32 %114 = load i32* %113;
    [30 * i32]* %115 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %114];
    i32* %116 = getelementptr &([2 * i32]* %0)[i64 14][i64 1];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &([30 * i32]* %115)[i64 0][i32 %117];
    store i32* %118 with i32 1;
    [30 * i32]* %119 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %117];
    i32* %120 = getelementptr &([30 * i32]* %119)[i64 0][i32 %114];
    store i32* %120 with i32 1;
    i32* %121 = getelementptr &([2 * i32]* %0)[i64 15][i64 0];
    i32 %122 = load i32* %121;
    [30 * i32]* %123 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %122];
    i32* %124 = getelementptr &([2 * i32]* %0)[i64 15][i64 1];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &([30 * i32]* %123)[i64 0][i32 %125];
    store i32* %126 with i32 1;
    [30 * i32]* %127 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %125];
    i32* %128 = getelementptr &([30 * i32]* %127)[i64 0][i32 %122];
    store i32* %128 with i32 1;
    i32 %129 = add i32 %arg5, i32 16;
    i1 %130 = scmp lt i32 %129, i32 %arg4;
    cbr i1 %130(prob = 0.97), [ ^super.header1 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %129 ], [ ^b1 i32* %arg3, i32* %arg1, [30 * i32]* %arg2 ];
^while.body3([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i64 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    i32 %2 = load i32* %1;
    [30 * i32]* %3 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %2];
    i32* %4 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &([30 * i32]* %3)[i64 0][i32 %5];
    store i32* %6 with i32 1;
    [30 * i32]* %7 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %5];
    i32* %8 = getelementptr &([30 * i32]* %7)[i64 0][i32 %2];
    store i32* %8 with i32 1;
    i32 %9 = add i32 %arg5, i32 1;
    i1 %10 = scmp lt i32 %9, i32 %arg4;
    cbr i1 %10(prob = 0.97), [ ^while.body3 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %9 ], [ ^b1 i32* %arg3, i32* %arg1, [30 * i32]* %arg2 ];
}
