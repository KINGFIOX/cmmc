internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32 %i, i32 %k, [30 * i32]* %0, i32* %1, i32* %2) -> i32 {
^entry:
    ubr ^while.header;
^while.header:
    i32 %3 = phi [^b1, i32 %20] [^entry, i32 %k];
    i32 %4 = phi [^b1, i32 %33] [^entry, i32 0];
    i32 %5 = phi [^b1, i32 %35] [^entry, i32 1];
    i32 %6 = phi [^b1, i32 %35] [^entry, i32 1];
    i32 %7 = load i32* %1;
    i1 %8 = scmp le i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %9 = getelementptr &([30 * i32]* %0)[i64 0][i32 %3];
    store i32* %9 with i32 %5;
    i32 %10 = add i32 %3, i32 1;
    ubr ^while.header1;
^b:
    ret i32 %4;
^while.header1:
    i32 %11 = phi [^b2, i32 %25] [^while.body, i32 %3];
    i32 %12 = phi [^b2, i32 %26] [^while.body, i32 %4];
    i32 %13 = phi [^b2, i32 %27] [^while.body, i32 %5];
    i32 %14 = phi [^b2, i32 %37] [^while.body, i32 1];
    i32 %15 = phi [^b2, i32 %30] [^while.body, i32 %10];
    i32 %16 = phi [^while.body, i32 %10] [^b2, i32 %30];
    i32 %17 = phi [^while.body, i32 1] [^b2, i32 %37];
    i1 %18 = scmp lt i32 %17, i32 %16;
    cbr i1 %18(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    i32 %19 = add i32 %14, i32 1;
    ubr ^while.header2;
^while.body2:
    i32 %20 = phi [^while.body3, i32 %25] [^while.header1, i32 %11];
    i32 %21 = phi [^while.body3, i32 %26] [^while.header1, i32 %12];
    i32 %22 = phi [^while.body3, i32 %27] [^while.header1, i32 %13];
    i32 %23 = phi [^while.body3, i32 0] [^while.header1, i32 1];
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^b1;
^while.header2:
    i32 %25 = phi [^b4, i32 %25] [^while.body1, i32 %11];
    i32 %26 = phi [^b4, i32 %26] [^while.body1, i32 %12];
    i32 %27 = phi [^b4, i32 %27] [^while.body1, i32 %13];
    i32 %28 = phi [^b4, i32 %50] [^while.body1, i32 %19];
    i32 %29 = phi [^b4, i32 %29] [^while.body1, i32 %14];
    i32 %30 = phi [^b4, i32 %30] [^while.body1, i32 %15];
    i32 %31 = phi [^while.body1, i32 %19] [^b4, i32 %50];
    i1 %32 = scmp lt i32 %31, i32 %30;
    cbr i1 %32(prob = 0.97), ^while.body3, ^b2;
^b1:
    i32 %33 = phi [^b3, i32 %46] [^if.then2, i32 %48] [^while.body2, i32 %21];
    i32 %34 = phi [^b3, i32 %22] [^while.body2, i32 %5] [^if.then2, i32 %22];
    i32 %35 = add i32 %34, i32 1;
    ubr ^while.header;
^if.then:
    i1 %36 = scmp gt i32 %3, i32 %21;
    cbr i1 %36(prob = 0.5), ^if.then1, ^b3;
^b2:
    i32 %37 = add i32 %29, i32 1;
    ubr ^while.header1;
^if.then1:
    ubr ^b3;
^while.body3:
    i32* %38 = getelementptr &([30 * i32]* %0)[i64 0][i32 %29];
    i32 %39 = load i32* %38;
    [30 * i32]* %40 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %39];
    i32* %41 = getelementptr &([30 * i32]* %0)[i64 0][i32 %28];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &([30 * i32]* %40)[i64 0][i32 %42];
    i32 %44 = load i32* %43;
    i1 %45 = scmp eq i32 %44, i32 0;
    cbr i1 %45(prob = 0.5), ^while.body2, ^b4;
^b3:
    i32 %46 = phi [^if.then, i32 %21] [^if.then1, i32 %20];
    i32 %47 = add i32 %20, i32 1;
    i32 %48 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 %22, i32 %47, [30 * i32]* %0, i32* %1, i32* %2);
    i1 %49 = scmp gt i32 %48, i32 %46;
    cbr i1 %49(prob = 0.5), ^if.then2, ^b1;
^b4:
    i32 %50 = add i32 %28, i32 1;
    ubr ^while.header2;
^if.then2:
    ubr ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    [30 * i32]* %store = alloc [30 * i32];
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    store i32* %m with i32 %31;
    ubr ^while.header;
^while.header:
    i32 %32 = phi [^while.body, i32 %42] [^entry, i32 0];
    i32 %33 = phi [^while.body, i32 %33] [^entry, i32 %31];
    i32 %34 = phi [^while.body, i32 %33] [^entry, i32 %31];
    i32 %35 = phi [^while.body, i32 %42] [^entry, i32 0];
    i1 %36 = scmp lt i32 %35, i32 %34;
    cbr i1 %36(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    [2 * i32]* %37 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %32];
    i32* %38 = getelementptr &([2 * i32]* %37)[i64 0][i64 0];
    i32 %39 = call () -> i32 @getint();
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &([2 * i32]* %37)[i64 0][i64 1];
    i32 %41 = call () -> i32 @getint();
    store i32* %40 with i32 %41;
    i32 %42 = add i32 %32, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %43 = phi [^while.header, i32 0] [^while.body1, i32 %56];
    i32 %44 = phi [^while.header, i32 %33] [^while.body1, i32 %44];
    i32 %45 = phi [^while.header, i32 0] [^while.body1, i32 %56];
    i1 %46 = scmp lt i32 %45, i32 %44;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b;
^while.body1:
    [2 * i32]* %47 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %43];
    i32* %48 = getelementptr &([2 * i32]* %47)[i64 0][i64 0];
    i32 %49 = load i32* %48;
    [30 * i32]* %50 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %49];
    i32* %51 = getelementptr &([2 * i32]* %47)[i64 0][i64 1];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([30 * i32]* %50)[i64 0][i32 %52];
    store i32* %53 with i32 1;
    [30 * i32]* %54 = getelementptr &([30 * [30 * i32]]* @graph)[i64 0][i32 %52];
    i32* %55 = getelementptr &([30 * i32]* %54)[i64 0][i32 %49];
    store i32* %55 with i32 1;
    i32 %56 = add i32 %43, i32 1;
    ubr ^while.header1;
^b:
    i32 %57 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 0, i32 1, [30 * i32]* %store, i32* %n, i32* %m);
    call (i32) -> void @putint(i32 %57);
    ret i32 0;
}
