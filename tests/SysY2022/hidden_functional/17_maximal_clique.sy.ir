internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph, align 8 { Flexible };
internal func @maxCliques(i32 %k, [30 * i32]* %0, i32* %1) -> i32 {
  ^entry:
    i32* %2 = getelementptr &([30 * i32]* %0)[i64 0][i32 %k];
    i32* %3 = getelementptr &(i32* %2)[i64 1];
    i32* %4 = getelementptr &(i32* %2)[i64 2];
    i32* %5 = getelementptr &(i32* %2)[i64 3];
    i32 %6 = load i32* %1;
    i1 %7 = icmp sgt i32 %6, i32 0;
    i32 %8 = add i32 %k, i32 1;
    i32 %9 = add i32 %k, i32 2;
    i32 %10 = add i32 %k, i32 3;
    i32 %11 = add i32 %k, i32 4;
    [30 * [30 * i32]]* %12 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    cbr i1 %7(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %13 = phi [^entry, i32 1] [^b2, i32 %27];
    i32 %14 = phi [^entry, i32 0] [^b2, i32 %26];
    store i32* %2 with i32 %13;
    ubr ^while.header;
  ^b:
    i32 %15 = phi [^entry, i32 0] [^b2, i32 %26];
    ret i32 %15;
  ^while.header:
    i32 %16 = phi [^while.body, i32 1] [^while.header1, i32 %19];
    i1 %17 = icmp sgt i32 %8, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32* %18 = getelementptr &([30 * i32]* %0)[i64 0][i32 %16];
    i32 %19 = add i32 %16, i32 1;
    ubr ^while.header1;
  ^b1:
    i32 %20 = phi [^while.header, i32 1] [^while.body3, i32 0];
    i1 %21 = icmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then, ^b2;
  ^while.header1:
    i32 %22 = phi [^while.body1, i32 %19] [^b4, i32 %42];
    i1 %23 = icmp sle i32 %8, i32 %22;
    cbr i1 %23(prob = 0.0153846), ^while.header, ^while.body3;
  ^if.then:
    i32 %24 = load i32* %1;
    i1 %25 = icmp sgt i32 %24, i32 0;
    cbr i1 %25(prob = 0.984615), ^while.body2, ^b3;
  ^b2:
    i32 %26 = phi [^b1, i32 %14] [^b3, i32 %34];
    i32 %27 = add i32 %13, i32 1;
    i32 %28 = load i32* %1;
    i1 %29 = icmp sle i32 %27, i32 %28;
    cbr i1 %29(prob = 0.984615), ^while.body, ^b;
  ^while.body2:
    i32 %30 = phi [^if.then, i32 1] [^b6, i32 %54];
    i32 %31 = phi [^if.then, i32 0] [^b6, i32 %53];
    store i32* %3 with i32 %30;
    ubr ^while.header2;
  ^b3:
    i32 %32 = phi [^if.then, i32 0] [^b6, i32 %53];
    i32 %33 = smax i32 %k, i32 %14;
    i32 %34 = smax i32 %32, i32 %33;
    ubr ^b2;
  ^while.body3:
    i32 %35 = load i32* %18;
    [30 * i32]* %36 = getelementptr &([30 * [30 * i32]]* %12)[i64 0][i32 %35];
    i32* %37 = getelementptr &([30 * i32]* %0)[i64 0][i32 %22];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([30 * i32]* %36)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    i1 %41 = icmp eq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^b1, ^b4;
  ^b4:
    i32 %42 = add i32 %22, i32 1;
    ubr ^while.header1;
  ^while.header2:
    i32 %43 = phi [^while.body2, i32 1] [^while.header3, i32 %46];
    i1 %44 = icmp sgt i32 %9, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body4, ^b5;
  ^while.body4:
    i32* %45 = getelementptr &([30 * i32]* %0)[i64 0][i32 %43];
    i32 %46 = add i32 %43, i32 1;
    ubr ^while.header3;
  ^b5:
    i32 %47 = phi [^while.header2, i32 1] [^while.body6, i32 0];
    i1 %48 = icmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then1, ^b6;
  ^while.header3:
    i32 %49 = phi [^while.body4, i32 %46] [^b8, i32 %69];
    i1 %50 = icmp sle i32 %9, i32 %49;
    cbr i1 %50(prob = 0.0153846), ^while.header2, ^while.body6;
  ^if.then1:
    i32 %51 = load i32* %1;
    i1 %52 = icmp sgt i32 %51, i32 0;
    cbr i1 %52(prob = 0.984615), ^while.body5, ^b7;
  ^b6:
    i32 %53 = phi [^b5, i32 %31] [^b7, i32 %61];
    i32 %54 = add i32 %30, i32 1;
    i32 %55 = load i32* %1;
    i1 %56 = icmp sle i32 %54, i32 %55;
    cbr i1 %56(prob = 0.984615), ^while.body2, ^b3;
  ^while.body5:
    i32 %57 = phi [^if.then1, i32 1] [^b10, i32 %81];
    i32 %58 = phi [^if.then1, i32 0] [^b10, i32 %80];
    store i32* %4 with i32 %57;
    ubr ^while.header4;
  ^b7:
    i32 %59 = phi [^if.then1, i32 0] [^b10, i32 %80];
    i32 %60 = smax i32 %8, i32 %31;
    i32 %61 = smax i32 %59, i32 %60;
    ubr ^b6;
  ^while.body6:
    i32 %62 = load i32* %45;
    [30 * i32]* %63 = getelementptr &([30 * [30 * i32]]* %12)[i64 0][i32 %62];
    i32* %64 = getelementptr &([30 * i32]* %0)[i64 0][i32 %49];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &([30 * i32]* %63)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i1 %68 = icmp eq i32 %67, i32 0;
    cbr i1 %68(prob = 0.5), ^b5, ^b8;
  ^b8:
    i32 %69 = add i32 %49, i32 1;
    ubr ^while.header3;
  ^while.header4:
    i32 %70 = phi [^while.body5, i32 1] [^while.header5, i32 %73];
    i1 %71 = icmp sgt i32 %10, i32 %70;
    cbr i1 %71(prob = 0.984615), ^while.body7, ^b9;
  ^while.body7:
    i32* %72 = getelementptr &([30 * i32]* %0)[i64 0][i32 %70];
    i32 %73 = add i32 %70, i32 1;
    ubr ^while.header5;
  ^b9:
    i32 %74 = phi [^while.header4, i32 1] [^while.body9, i32 0];
    i1 %75 = icmp neq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then2, ^b10;
  ^while.header5:
    i32 %76 = phi [^while.body7, i32 %73] [^b12, i32 %96];
    i1 %77 = icmp sle i32 %10, i32 %76;
    cbr i1 %77(prob = 0.0153846), ^while.header4, ^while.body9;
  ^if.then2:
    i32 %78 = load i32* %1;
    i1 %79 = icmp sgt i32 %78, i32 0;
    cbr i1 %79(prob = 0.984615), ^while.body8, ^b11;
  ^b10:
    i32 %80 = phi [^b9, i32 %58] [^b11, i32 %88];
    i32 %81 = add i32 %57, i32 1;
    i32 %82 = load i32* %1;
    i1 %83 = icmp sle i32 %81, i32 %82;
    cbr i1 %83(prob = 0.984615), ^while.body5, ^b7;
  ^while.body8:
    i32 %84 = phi [^if.then2, i32 1] [^b14, i32 %109];
    i32 %85 = phi [^if.then2, i32 0] [^b14, i32 %108];
    store i32* %5 with i32 %84;
    ubr ^while.header6;
  ^b11:
    i32 %86 = phi [^if.then2, i32 0] [^b14, i32 %108];
    i32 %87 = smax i32 %9, i32 %58;
    i32 %88 = smax i32 %86, i32 %87;
    ubr ^b10;
  ^while.body9:
    i32 %89 = load i32* %72;
    [30 * i32]* %90 = getelementptr &([30 * [30 * i32]]* %12)[i64 0][i32 %89];
    i32* %91 = getelementptr &([30 * i32]* %0)[i64 0][i32 %76];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([30 * i32]* %90)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i1 %95 = icmp eq i32 %94, i32 0;
    cbr i1 %95(prob = 0.5), ^b9, ^b12;
  ^b12:
    i32 %96 = add i32 %76, i32 1;
    ubr ^while.header5;
  ^while.header6:
    i32 %97 = phi [^while.body8, i32 1] [^while.header7, i32 %100];
    i1 %98 = icmp sgt i32 %11, i32 %97;
    cbr i1 %98(prob = 0.984615), ^while.body10, ^b13;
  ^while.body10:
    i32* %99 = getelementptr &([30 * i32]* %0)[i64 0][i32 %97];
    i32 %100 = add i32 %97, i32 1;
    ubr ^while.header7;
  ^b13:
    i32 %101 = phi [^while.header6, i32 1] [^while.body11, i32 0];
    i1 %102 = icmp neq i32 %101, i32 0;
    cbr i1 %102(prob = 0.5), ^if.then3, ^b14;
  ^if.then3:
    i32 %103 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 %11, [30 * i32]* %0, i32* %1);
    i32 %104 = smax i32 %10, i32 %85;
    i32 %105 = smax i32 %103, i32 %104;
    ubr ^b14;
  ^while.header7:
    i32 %106 = phi [^while.body10, i32 %100] [^b15, i32 %119];
    i1 %107 = icmp sle i32 %11, i32 %106;
    cbr i1 %107(prob = 0.0153846), ^while.header6, ^while.body11;
  ^b14:
    i32 %108 = phi [^b13, i32 %85] [^if.then3, i32 %105];
    i32 %109 = add i32 %84, i32 1;
    i32 %110 = load i32* %1;
    i1 %111 = icmp sle i32 %109, i32 %110;
    cbr i1 %111(prob = 0.984615), ^while.body8, ^b11;
  ^while.body11:
    i32 %112 = load i32* %99;
    [30 * i32]* %113 = getelementptr &([30 * [30 * i32]]* %12)[i64 0][i32 %112];
    i32* %114 = getelementptr &([30 * i32]* %0)[i64 0][i32 %106];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([30 * i32]* %113)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = icmp eq i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^b13, ^b15;
  ^b15:
    i32 %119 = add i32 %106, i32 1;
    ubr ^while.header7;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %n = alloc i32, align 4;
    [30 * i32]* %store = alloc [30 * i32], align 8;
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    i1 %32 = icmp sgt i32 %31, i32 0;
    i32 %33 = add i32 %31, i32 -3;
    [30 * [30 * i32]]* %34 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    [600 * [2 * i32]]* %35 = ptrcast [600 * [2 * i32]]* @edges to [600 * [2 * i32]]*;
    cbr i1 %32(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %36 = phi [^entry, i32 0] [^while.body, i32 %42];
    i32 %37 = call () -> i32 @getint();
    [2 * i32]* %38 = getelementptr &([600 * [2 * i32]]* %35)[i64 0][i32 %36];
    i32* %39 = getelementptr &([2 * i32]* %38)[i64 0][i64 0];
    store i32* %39 with i32 %37;
    i32 %40 = call () -> i32 @getint();
    i32* %41 = getelementptr &([2 * i32]* %38)[i64 0][i64 1];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %36, i32 1;
    i1 %43 = icmp sgt i32 %31, i32 %42;
    cbr i1 %43(prob = 0.984615), ^while.body, ^super.header;
  ^b:
    i32 %44 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 1, [30 * i32]* %store, i32* %n);
    call (i32) -> void @putint(i32 %44);
    ret i32 0;
  ^super.header:
    i1 %45 = icmp sgt i32 %31, i32 3;
    cbr i1 %45(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body1:
    i32 %46 = phi [^super.header, i32 0] [^while.body1, i32 %80];
    [2 * i32]* %47 = getelementptr &([600 * [2 * i32]]* %35)[i64 0][i32 %46];
    i32* %48 = getelementptr &([2 * i32]* %47)[i64 0][i64 0];
    i32 %49 = load i32* %48;
    [30 * i32]* %50 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %49];
    i32* %51 = getelementptr &([2 * i32]* %47)[i64 0][i64 1];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([30 * i32]* %50)[i64 0][i32 %52];
    store i32* %53 with i32 1;
    [30 * i32]* %54 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %52];
    i32* %55 = getelementptr &([30 * i32]* %54)[i64 0][i32 %49];
    store i32* %55 with i32 1;
    i32* %56 = getelementptr &([2 * i32]* %47)[i64 1][i64 0];
    i32 %57 = load i32* %56;
    [30 * i32]* %58 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %57];
    i32* %59 = getelementptr &([2 * i32]* %47)[i64 1][i64 1];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([30 * i32]* %58)[i64 0][i32 %60];
    store i32* %61 with i32 1;
    [30 * i32]* %62 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %60];
    i32* %63 = getelementptr &([30 * i32]* %62)[i64 0][i32 %57];
    store i32* %63 with i32 1;
    i32* %64 = getelementptr &([2 * i32]* %47)[i64 2][i64 0];
    i32 %65 = load i32* %64;
    [30 * i32]* %66 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %65];
    i32* %67 = getelementptr &([2 * i32]* %47)[i64 2][i64 1];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([30 * i32]* %66)[i64 0][i32 %68];
    store i32* %69 with i32 1;
    [30 * i32]* %70 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %68];
    i32* %71 = getelementptr &([30 * i32]* %70)[i64 0][i32 %65];
    store i32* %71 with i32 1;
    i32* %72 = getelementptr &([2 * i32]* %47)[i64 3][i64 0];
    i32 %73 = load i32* %72;
    [30 * i32]* %74 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %73];
    i32* %75 = getelementptr &([2 * i32]* %47)[i64 3][i64 1];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &([30 * i32]* %74)[i64 0][i32 %76];
    store i32* %77 with i32 1;
    [30 * i32]* %78 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %76];
    i32* %79 = getelementptr &([30 * i32]* %78)[i64 0][i32 %73];
    store i32* %79 with i32 1;
    i32 %80 = add i32 %46, i32 4;
    i1 %81 = icmp sgt i32 %33, i32 %80;
    cbr i1 %81(prob = 0.941176), ^while.body1, ^scalar.header;
  ^scalar.header:
    i32 %82 = phi [^super.header, i32 0] [^while.body1, i32 %80];
    i1 %83 = icmp sgt i32 %31, i32 %82;
    cbr i1 %83(prob = 0.75), ^while.body2, ^b;
  ^while.body2 {scalar}:
    i32 %84 = phi [^scalar.header, i32 %82] [^while.body2, i32 %94];
    [2 * i32]* %85 = getelementptr &([600 * [2 * i32]]* %35)[i64 0][i32 %84];
    i32* %86 = getelementptr &([2 * i32]* %85)[i64 0][i64 0];
    i32 %87 = load i32* %86;
    [30 * i32]* %88 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %87];
    i32* %89 = getelementptr &([2 * i32]* %85)[i64 0][i64 1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([30 * i32]* %88)[i64 0][i32 %90];
    store i32* %91 with i32 1;
    [30 * i32]* %92 = getelementptr &([30 * [30 * i32]]* %34)[i64 0][i32 %90];
    i32* %93 = getelementptr &([30 * i32]* %92)[i64 0][i32 %87];
    store i32* %93 with i32 1;
    i32 %94 = add i32 %84, i32 1;
    i1 %95 = icmp sgt i32 %31, i32 %94;
    cbr i1 %95(prob = 0.75), ^while.body2, ^b;
}
internal [600 * [2 * i32]]* @edges, align 8 { Flexible };
