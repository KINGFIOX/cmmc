internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32 %k, [30 * i32]* %0, i32* %1) -> i32 {
  ^entry:
    i32* %2 = getelementptr &([30 * i32]* %0)[i64 0][i32 %k];
    i32 %3 = add i32 %k, i32 1;
    [30 * [30 * i32]]* %4 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %17];
    i32 %6 = phi [^entry, i32 1] [^b2, i32 %18];
    i32 %7 = load i32* %1;
    i1 %8 = scmp le i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    store i32* %2 with i32 %6;
    ubr ^while.header1;
  ^b:
    ret i32 %5;
  ^while.header1:
    i32 %9 = phi [^while.body, i32 1] [^while.header2, i32 %12];
    i1 %10 = scmp lt i32 %9, i32 %3;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32* %11 = getelementptr &([30 * i32]* %0)[i64 0][i32 %9];
    i32 %12 = add i32 %9, i32 1;
    ubr ^while.header2;
  ^b1:
    i32 %13 = phi [^while.header1, i32 1] [^while.body2, i32 0];
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^b2;
  ^while.header2:
    i32 %15 = phi [^while.body1, i32 %12] [^b3, i32 %29];
    i1 %16 = scmp lt i32 %15, i32 %3;
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.header1;
  ^b2:
    i32 %17 = phi [^b1, i32 %5] [^if.then, i32 %19] [^indirect, i32 %20];
    i32 %18 = add i32 %6, i32 1;
    ubr ^while.header;
  ^if.then:
    i32 %19 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 %3, [30 * i32]* %0, i32* %1);
    i32 %20 = smax i32 %k, i32 %5;
    i1 %21 = scmp gt i32 %19, i32 %20;
    cbr i1 %21(prob = 0.5), ^b2, ^indirect;
  ^while.body2:
    i32 %22 = load i32* %11;
    [30 * i32]* %23 = getelementptr &([30 * [30 * i32]]* %4)[i64 0][i32 %22];
    i32* %24 = getelementptr &([30 * i32]* %0)[i64 0][i32 %15];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([30 * i32]* %23)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i1 %28 = scmp eq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^b1, ^b3;
  ^indirect:
    ubr ^b2;
  ^b3:
    i32 %29 = add i32 %15, i32 1;
    ubr ^while.header2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %n = alloc i32;
    [30 * i32]* %store = alloc [30 * i32];
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i32* %0 = getelementptr &([30 * i32]* %store)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    i1 %32 = scmp gt i32 %31, i32 0;
    [30 * [30 * i32]]* %33 = ptrcast [30 * [30 * i32]]* @graph to [30 * [30 * i32]]*;
    cbr i1 %32(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %34 = phi [^entry, i32 0] [^while.body, i32 %40];
    i32 %35 = call () -> i32 @getint();
    [2 * i32]* %36 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %34];
    i32* %37 = getelementptr &([2 * i32]* %36)[i64 0][i64 0];
    store i32* %37 with i32 %35;
    i32 %38 = call () -> i32 @getint();
    i32* %39 = getelementptr &([2 * i32]* %36)[i64 0][i64 1];
    store i32* %39 with i32 %38;
    i32 %40 = add i32 %34, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %31;
    cbr i1 %41(prob = 0.97), ^while.body, ^b;
  ^b:
    cbr i1 %32(prob = 0.97), ^super.header, ^b1;
  ^super.header:
    i32 %42 = phi [^b, i32 0] [^while.body1, i32 %43];
    i32 %43 = add i32 %42, i32 4;
    i1 %44 = scmp lt i32 %43, i32 %31;
    cbr i1 %44(prob = 0.89), ^while.body1, ^super.header1;
  ^b1:
    i32 %45 = call (i32, [30 * i32]*, i32*) -> i32 @maxCliques(i32 1, [30 * i32]* %store, i32* %n);
    call (i32) -> void @putint(i32 %45);
    ret i32 0;
  ^while.body1:
    [2 * i32]* %46 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %42];
    i32* %47 = getelementptr &([2 * i32]* %46)[i64 0][i64 0];
    i32 %48 = load i32* %47;
    [30 * i32]* %49 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %48];
    i32* %50 = getelementptr &([2 * i32]* %46)[i64 0][i64 1];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([30 * i32]* %49)[i64 0][i32 %51];
    store i32* %52 with i32 1;
    [30 * i32]* %53 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %51];
    i32* %54 = getelementptr &([30 * i32]* %53)[i64 0][i32 %48];
    store i32* %54 with i32 1;
    i32* %55 = getelementptr &([2 * i32]* %46)[i64 1][i64 0];
    i32 %56 = load i32* %55;
    [30 * i32]* %57 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %56];
    i32* %58 = getelementptr &([2 * i32]* %46)[i64 1][i64 1];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([30 * i32]* %57)[i64 0][i32 %59];
    store i32* %60 with i32 1;
    [30 * i32]* %61 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %59];
    i32* %62 = getelementptr &([30 * i32]* %61)[i64 0][i32 %56];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([2 * i32]* %46)[i64 2][i64 0];
    i32 %64 = load i32* %63;
    [30 * i32]* %65 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %64];
    i32* %66 = getelementptr &([2 * i32]* %46)[i64 2][i64 1];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([30 * i32]* %65)[i64 0][i32 %67];
    store i32* %68 with i32 1;
    [30 * i32]* %69 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %67];
    i32* %70 = getelementptr &([30 * i32]* %69)[i64 0][i32 %64];
    store i32* %70 with i32 1;
    i32* %71 = getelementptr &([2 * i32]* %46)[i64 3][i64 0];
    i32 %72 = load i32* %71;
    [30 * i32]* %73 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %72];
    i32* %74 = getelementptr &([2 * i32]* %46)[i64 3][i64 1];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &([30 * i32]* %73)[i64 0][i32 %75];
    store i32* %76 with i32 1;
    [30 * i32]* %77 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %75];
    i32* %78 = getelementptr &([30 * i32]* %77)[i64 0][i32 %72];
    store i32* %78 with i32 1;
    ubr ^super.header;
  ^super.header1:
    i32 %79 = phi [^super.header, i32 %42] [^while.body2, i32 %80];
    i32 %80 = add i32 %79, i32 4;
    i1 %81 = scmp lt i32 %80, i32 %31;
    cbr i1 %81(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body2:
    [2 * i32]* %82 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %79];
    i32* %83 = getelementptr &([2 * i32]* %82)[i64 0][i64 0];
    i32 %84 = load i32* %83;
    [30 * i32]* %85 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %84];
    i32* %86 = getelementptr &([2 * i32]* %82)[i64 0][i64 1];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([30 * i32]* %85)[i64 0][i32 %87];
    store i32* %88 with i32 1;
    [30 * i32]* %89 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %87];
    i32* %90 = getelementptr &([30 * i32]* %89)[i64 0][i32 %84];
    store i32* %90 with i32 1;
    i32* %91 = getelementptr &([2 * i32]* %82)[i64 1][i64 0];
    i32 %92 = load i32* %91;
    [30 * i32]* %93 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %92];
    i32* %94 = getelementptr &([2 * i32]* %82)[i64 1][i64 1];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &([30 * i32]* %93)[i64 0][i32 %95];
    store i32* %96 with i32 1;
    [30 * i32]* %97 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %95];
    i32* %98 = getelementptr &([30 * i32]* %97)[i64 0][i32 %92];
    store i32* %98 with i32 1;
    i32* %99 = getelementptr &([2 * i32]* %82)[i64 2][i64 0];
    i32 %100 = load i32* %99;
    [30 * i32]* %101 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %100];
    i32* %102 = getelementptr &([2 * i32]* %82)[i64 2][i64 1];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &([30 * i32]* %101)[i64 0][i32 %103];
    store i32* %104 with i32 1;
    [30 * i32]* %105 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %103];
    i32* %106 = getelementptr &([30 * i32]* %105)[i64 0][i32 %100];
    store i32* %106 with i32 1;
    i32* %107 = getelementptr &([2 * i32]* %82)[i64 3][i64 0];
    i32 %108 = load i32* %107;
    [30 * i32]* %109 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %108];
    i32* %110 = getelementptr &([2 * i32]* %82)[i64 3][i64 1];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &([30 * i32]* %109)[i64 0][i32 %111];
    store i32* %112 with i32 1;
    [30 * i32]* %113 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %111];
    i32* %114 = getelementptr &([30 * i32]* %113)[i64 0][i32 %108];
    store i32* %114 with i32 1;
    ubr ^super.header1;
  ^while.body3:
    i32 %115 = phi [^super.header1, i32 %79] [^while.body3, i32 %125];
    [2 * i32]* %116 = getelementptr &([600 * [2 * i32]]* %edges)[i64 0][i32 %115];
    i32* %117 = getelementptr &([2 * i32]* %116)[i64 0][i64 0];
    i32 %118 = load i32* %117;
    [30 * i32]* %119 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %118];
    i32* %120 = getelementptr &([2 * i32]* %116)[i64 0][i64 1];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &([30 * i32]* %119)[i64 0][i32 %121];
    store i32* %122 with i32 1;
    [30 * i32]* %123 = getelementptr &([30 * [30 * i32]]* %33)[i64 0][i32 %121];
    i32* %124 = getelementptr &([30 * i32]* %123)[i64 0][i32 %118];
    store i32* %124 with i32 1;
    i32 %125 = add i32 %115, i32 1;
    i1 %126 = scmp lt i32 %125, i32 %31;
    cbr i1 %126(prob = 0.97), ^while.body3, ^b1;
}
