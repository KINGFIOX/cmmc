internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [30 * [30 * i32]]* @graph;
internal func @maxCliques(i32, i32, [30 * i32]*, i32*, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, [30 * i32]* %arg2, i32* %arg3, i32* %arg4):
    i32* %k = alloc i32;
    store i32* %k with i32 %arg1;
    i32* %max_ = alloc i32;
    store i32* %max_ with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 1;
    i32 %0 = load i32* %arg3;
    i1 %1 = scmp le i32 1, i32 %0;
    cbr i1 %1, [ ^while.body i32* %max_, i32* %j, i32* %k, i32* %arg4, i32* %arg3, [30 * i32]* %arg2, i32 1, i32 %arg1 ], [ ^b i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [30 * i32]* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([30 * i32]* %arg5)[i32 0][i32 %arg7];
    store i32* %0 with i32 %arg6;
    i32 %1 = add i32 %arg7, i32 1;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    i1 %2 = scmp lt i32 1, i32 %1;
    cbr i1 %2, [ ^while.body1 i32* %i, [30 * i32]* %arg5, [30 * i32]* %arg5, i32 %arg6, i32* %arg4, i32* %arg3, i32 %arg7, i32* %arg2, i32* %arg, i32* %arg1, i32 %1, i32 1 ], [ ^while.body2 i32 1, [30 * i32]* %arg5, i32 %arg6, i32* %arg4, i32* %arg3, i32 %arg7, i32* %arg2, i32* %arg, i32* %arg1 ];
^b(i32 %arg):
    ret i32 %arg;
^while.body1(i32* %arg, [30 * i32]* %arg1, [30 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32* %j = alloc i32;
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %j with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body3 i32* %j, i32* %arg, [30 * i32]* %arg1, [30 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %0 ], [ ^indirect1 i32* %j, i32* %arg, i32 %arg10, [30 * i32]* %arg1, [30 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11 ];
^while.body2(i32 %arg, [30 * i32]* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0, [ ^indirect i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg5, i32* %arg4, i32* %arg3, [30 * i32]* %arg1 ], [ ^b1 i32* %arg7, i32* %arg6, i32* %arg8, i32 %arg2, i32* %arg4, [30 * i32]* %arg1, i32* %arg3 ];
^while.body3(i32* %arg, i32* %arg1, [30 * i32]* %arg2, [30 * i32]* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([30 * i32]* %arg2)[i32 0][i32 %arg12];
    i32 %1 = load i32* %0;
    [30 * i32]* %2 = getelementptr &([30 * [30 * i32]]* @graph)[i32 0][i32 %1];
    i32* %3 = getelementptr &([30 * i32]* %arg2)[i32 0][i32 %arg13];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &([30 * i32]* %2)[i32 0][i32 %4];
    i32 %6 = load i32* %5;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7, [ ^while.body2 i32 0, [30 * i32]* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10 ], [ ^indirect4 i32* %arg1, i32* %arg, i32 %arg13, [30 * i32]* %arg2, [30 * i32]* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, [30 * i32]* %arg6):
    i32 %0 = load i32* %arg1;
    i1 %1 = scmp gt i32 %arg3, i32 %0;
    cbr i1 %1, [ ^if.then i32* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg6, i32* %arg5, i32* %arg4 ], [ ^indirect2 i32* %arg1, i32* %arg2, i32* %arg, [30 * i32]* %arg6, i32* %arg5, i32* %arg4 ];
^indirect1(i32* %arg, i32* %arg1, i32 %arg2, [30 * i32]* %arg3, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg13, i32 1;
    store i32* %arg1 with i32 %0;
    free i32* %arg;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1, [ ^while.body1 i32* %arg1, [30 * i32]* %arg3, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %0 ], [ ^while.body2 i32 1, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, [30 * i32]* %arg5, i32* %arg6):
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %0;
    i32 %1 = load i32* %arg6;
    i1 %2 = scmp le i32 %0, i32 %1;
    cbr i1 %2, [ ^indirect3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg6, [30 * i32]* %arg5, i32 %0 ], [ ^indirect5 i32* %arg ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    store i32* %arg1 with i32 %0;
    ubr [ ^b2 i32* %arg1, i32* %arg2, i32* %arg, i32 %0, i32* %arg5, i32* %arg4, [30 * i32]* %arg3 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg1;
    ubr [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32 %0, i32* %arg5, i32* %arg4, [30 * i32]* %arg3 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [30 * i32]* %arg5, i32 %arg6):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [30 * i32]* %arg5, i32 %arg6, i32 %0 ];
^indirect4(i32* %arg, i32* %arg1, i32 %arg2, [30 * i32]* %arg3, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1, [ ^while.body3 i32* %arg1, i32* %arg, [30 * i32]* %arg3, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %0 ], [ ^indirect1 i32* %arg1, i32* %arg, i32 %arg12, [30 * i32]* %arg3, [30 * i32]* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13 ];
^indirect5(i32* %arg):
    i32 %0 = load i32* %arg;
    ubr [ ^b i32 %0 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, [30 * i32]* %arg6):
    i32 %0 = load i32* %arg2;
    i32 %1 = add i32 %arg3, i32 1;
    i32 %2 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 %0, i32 %1, [30 * i32]* %arg6, i32* %arg5, i32* %arg4);
    i32 %3 = load i32* %arg;
    i1 %4 = scmp gt i32 %2, i32 %3;
    cbr i1 %4, [ ^indirect6 i32* %arg1, i32* %arg2, i32* %arg, i32 %2, i32* %arg4, [30 * i32]* %arg6, i32* %arg5 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg2, [30 * i32]* %arg6, i32* %arg4, i32* %arg5 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, [30 * i32]* %arg5, i32* %arg6):
    store i32* %arg2 with i32 %arg3;
    i32 %0 = load i32* %arg1;
    ubr [ ^b1 i32* %arg2, i32* %arg, i32* %arg1, i32 %0, i32* %arg4, [30 * i32]* %arg5, i32* %arg6 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg2;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    i32 %2 = load i32* %arg5;
    i1 %3 = scmp le i32 %1, i32 %2;
    cbr i1 %3, [ ^indirect3 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg4, i32* %arg5, [30 * i32]* %arg3, i32 %1 ], [ ^indirect5 i32* %arg1 ];
}
func @main() -> i32 { NoRecurse } {
^entry():
    [30 * i32]* %store = alloc [30 * i32];
    i32* %0 = getelementptr &([30 * i32]* %store)[i32 0][i32 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([30 * i32]* %store)[i32 0][i32 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([30 * i32]* %store)[i32 0][i32 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([30 * i32]* %store)[i32 0][i32 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([30 * i32]* %store)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([30 * i32]* %store)[i32 0][i32 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([30 * i32]* %store)[i32 0][i32 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([30 * i32]* %store)[i32 0][i32 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([30 * i32]* %store)[i32 0][i32 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([30 * i32]* %store)[i32 0][i32 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([30 * i32]* %store)[i32 0][i32 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([30 * i32]* %store)[i32 0][i32 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([30 * i32]* %store)[i32 0][i32 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([30 * i32]* %store)[i32 0][i32 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([30 * i32]* %store)[i32 0][i32 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([30 * i32]* %store)[i32 0][i32 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([30 * i32]* %store)[i32 0][i32 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([30 * i32]* %store)[i32 0][i32 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([30 * i32]* %store)[i32 0][i32 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([30 * i32]* %store)[i32 0][i32 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([30 * i32]* %store)[i32 0][i32 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([30 * i32]* %store)[i32 0][i32 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([30 * i32]* %store)[i32 0][i32 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([30 * i32]* %store)[i32 0][i32 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([30 * i32]* %store)[i32 0][i32 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([30 * i32]* %store)[i32 0][i32 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([30 * i32]* %store)[i32 0][i32 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([30 * i32]* %store)[i32 0][i32 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([30 * i32]* %store)[i32 0][i32 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([30 * i32]* %store)[i32 0][i32 29];
    store i32* %29 with i32 0;
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32 %30 = call () -> i32 @getint();
    store i32* %n with i32 %30;
    i32 %31 = call () -> i32 @getint();
    store i32* %m with i32 %31;
    [600 * [2 * i32]]* %edges = alloc [600 * [2 * i32]];
    i1 %32 = scmp lt i32 0, i32 %31;
    cbr i1 %32, [ ^while.body [600 * [2 * i32]]* %edges, i32* %n, [30 * i32]* %store, i32* %m, i32 %31, i32 0 ], [ ^b [600 * [2 * i32]]* %edges, i32* %m, i32* %n, [30 * i32]* %store, i32 %31 ];
^while.body([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i32 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i32 0][i32 0];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32* %3 = getelementptr &([2 * i32]* %0)[i32 0][i32 1];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %arg5, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg4;
    cbr i1 %6, [ ^while.body [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %5 ], [ ^b [600 * [2 * i32]]* %arg, i32* %arg3, i32* %arg1, [30 * i32]* %arg2, i32 %arg4 ];
^b([600 * [2 * i32]]* %arg, i32* %arg1, i32* %arg2, [30 * i32]* %arg3, i32 %arg4):
    i1 %0 = scmp lt i32 0, i32 %arg4;
    cbr i1 %0, [ ^while.body1 [600 * [2 * i32]]* %arg, i32* %arg2, [30 * i32]* %arg3, i32* %arg1, i32 %arg4, i32 0 ], [ ^b1 i32* %arg1, i32* %arg2, [30 * i32]* %arg3 ];
^while.body1([600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    [2 * i32]* %0 = getelementptr &([600 * [2 * i32]]* %arg)[i32 0][i32 %arg5];
    i32* %1 = getelementptr &([2 * i32]* %0)[i32 0][i32 0];
    i32 %2 = load i32* %1;
    [30 * i32]* %3 = getelementptr &([30 * [30 * i32]]* @graph)[i32 0][i32 %2];
    i32* %4 = getelementptr &([2 * i32]* %0)[i32 0][i32 1];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &([30 * i32]* %3)[i32 0][i32 %5];
    store i32* %6 with i32 1;
    [30 * i32]* %7 = getelementptr &([30 * [30 * i32]]* @graph)[i32 0][i32 %5];
    i32* %8 = getelementptr &([30 * i32]* %7)[i32 0][i32 %2];
    store i32* %8 with i32 1;
    i32 %9 = add i32 %arg5, i32 1;
    i1 %10 = scmp lt i32 %9, i32 %arg4;
    cbr i1 %10, [ ^while.body1 [600 * [2 * i32]]* %arg, i32* %arg1, [30 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %9 ], [ ^b1 i32* %arg3, i32* %arg1, [30 * i32]* %arg2 ];
^b1(i32* %arg, i32* %arg1, [30 * i32]* %arg2):
    i32 %0 = call (i32, i32, [30 * i32]*, i32*, i32*) -> i32 @maxCliques(i32 0, i32 1, [30 * i32]* %arg2, i32* %arg1, i32* %arg);
    call (i32) -> void @putint(i32 %0);
    ret i32 0;
}
