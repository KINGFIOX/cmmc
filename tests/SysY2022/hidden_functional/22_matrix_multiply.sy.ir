internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @MAX_SIZE { ReadOnly } = 100;
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
internal i32* @n1;
internal i32* @m1;
internal i32* @n2;
internal i32* @m2;
internal func @matrix_multiply() -> void {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @m1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %j;
    i32 %6 = load i32* @n2;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %k with i32 0;
    ubr ^while.header2;
^b1:
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    ubr ^while.header;
^while.header2:
    i32 %12 = load i32* %k;
    i32 %13 = load i32* @n1;
    i1 %14 = scmp lt i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    [100 * i32]* %19 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i64 %18];
    i32 %20 = load i32* %j;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = getelementptr &([100 * i32]* %19)[i64 0][i64 %21];
    i32 %23 = load i32* %i;
    i64 %24 = sext i32 %23 to i64;
    [100 * i32]* %25 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i64 %24];
    i32 %26 = load i32* %j;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = getelementptr &([100 * i32]* %25)[i64 0][i64 %27];
    i32 %29 = load i32* %28;
    i32 %30 = load i32* %i;
    i64 %31 = sext i32 %30 to i64;
    [100 * i32]* %32 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i64 %31];
    i32 %33 = load i32* %k;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([100 * i32]* %32)[i64 0][i64 %34];
    i32 %36 = load i32* %35;
    i32 %37 = load i32* %k;
    i64 %38 = sext i32 %37 to i64;
    [100 * i32]* %39 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i64 %38];
    i32 %40 = load i32* %j;
    i64 %41 = sext i32 %40 to i64;
    i32* %42 = getelementptr &([100 * i32]* %39)[i64 0][i64 %41];
    i32 %43 = load i32* %42;
    i32 %44 = mul i32 %36, i32 %43;
    i32 %45 = add i32 %29, i32 %44;
    store i32* %22 with i32 %45;
    i32 %46 = load i32* %k;
    i32 %47 = add i32 %46, i32 1;
    store i32* %k with i32 %47;
    ubr ^while.header2;
^b2:
    i32 %48 = load i32* %j;
    i32 %49 = add i32 %48, i32 1;
    store i32* %j with i32 %49;
    ubr ^while.header1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* @m1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @n1 with i32 %1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* @m1;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    i32 %7 = call () -> i32 @getint();
    store i32* @m2 with i32 %7;
    i32 %8 = call () -> i32 @getint();
    store i32* @n2 with i32 %8;
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %9 = load i32* %j;
    i32 %10 = load i32* @n1;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %14 = load i32* %i;
    i32 %15 = load i32* @m2;
    i1 %16 = scmp lt i32 %14, i32 %15;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    [100 * i32]* %21 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i64 %20];
    i32 %22 = load i32* %j;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = getelementptr &([100 * i32]* %21)[i64 0][i64 %23];
    i32 %25 = call () -> i32 @getint();
    store i32* %24 with i32 %25;
    i32 %26 = load i32* %j;
    i32 %27 = add i32 %26, i32 1;
    store i32* %j with i32 %27;
    ubr ^while.header1;
^b1:
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %i with i32 %29;
    ubr ^while.header;
^while.body2:
    store i32* %j with i32 0;
    ubr ^while.header3;
^b2:
    call () -> void @matrix_multiply();
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %30 = load i32* %j;
    i32 %31 = load i32* @n2;
    i1 %32 = scmp lt i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b3;
^while.header4:
    i32 %35 = load i32* %i;
    i32 %36 = load i32* @m1;
    i1 %37 = scmp lt i32 %35, i32 %36;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body4, ^b4;
^while.body3:
    i32 %40 = load i32* %i;
    i64 %41 = sext i32 %40 to i64;
    [100 * i32]* %42 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i64 %41];
    i32 %43 = load i32* %j;
    i64 %44 = sext i32 %43 to i64;
    i32* %45 = getelementptr &([100 * i32]* %42)[i64 0][i64 %44];
    i32 %46 = call () -> i32 @getint();
    store i32* %45 with i32 %46;
    i32 %47 = load i32* %j;
    i32 %48 = add i32 %47, i32 1;
    store i32* %j with i32 %48;
    ubr ^while.header3;
^b3:
    i32 %49 = load i32* %i;
    i32 %50 = add i32 %49, i32 1;
    store i32* %i with i32 %50;
    ubr ^while.header2;
^while.body4:
    store i32* %j with i32 0;
    ubr ^while.header5;
^b4:
    ret i32 0;
^while.header5:
    i32 %51 = load i32* %j;
    i32 %52 = load i32* @n2;
    i1 %53 = scmp lt i32 %51, i32 %52;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    i32 %56 = load i32* %i;
    i64 %57 = sext i32 %56 to i64;
    [100 * i32]* %58 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i64 %57];
    i32 %59 = load i32* %j;
    i64 %60 = sext i32 %59 to i64;
    i32* %61 = getelementptr &([100 * i32]* %58)[i64 0][i64 %60];
    i32 %62 = load i32* %61;
    call (i32) -> void @putint(i32 %62);
    call (i32) -> void @putch(i32 32);
    i32 %63 = load i32* %j;
    i32 %64 = add i32 %63, i32 1;
    store i32* %j with i32 %64;
    ubr ^while.header5;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %65 = load i32* %i;
    i32 %66 = add i32 %65, i32 1;
    store i32* %i with i32 %66;
    ubr ^while.header4;
}
