internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a, align 8 { Flexible };
internal [100 * [100 * i32]]* @b, align 8 { Flexible };
internal [100 * [100 * i32]]* @res, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i1 %3 = icmp sgt i32 %2, i32 0;
    i1 %4 = icmp sgt i32 %2, i32 3;
    i32 %5 = add i32 %2, i32 -3;
    [100 * [100 * i32]]* %6 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %7 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %8 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^b1, i32 %15];
    cbr i1 %3(prob = 0.984615), ^indirect, ^b1;
  ^b:
    i32 %10 = call () -> i32 @getint();
    i1 %11 = icmp sgt i32 %10, i32 0;
    i32 %12 = call () -> i32 @getint();
    i1 %13 = icmp sgt i32 %12, i32 0;
    cbr i1 %11(prob = 0.984615), ^while.body1, ^b2;
  ^indirect:
    [100 * i32]* %14 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %9];
    ubr ^while.body2;
  ^b1:
    i32 %15 = add i32 %9, i32 1;
    i1 %16 = icmp sgt i32 %0, i32 %15;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^while.body1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %24];
    cbr i1 %13(prob = 0.984615), ^indirect1, ^b3;
  ^b2:
    cbr i1 %1(prob = 0.984615), ^while.body3, ^b4;
  ^indirect1:
    [100 * i32]* %18 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %17];
    ubr ^while.body4;
  ^while.body2:
    i32 %19 = phi [^indirect, i32 0] [^while.body2, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([100 * i32]* %14)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %2, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body2, ^b1;
  ^b3:
    i32 %24 = add i32 %17, i32 1;
    i1 %25 = icmp sgt i32 %10, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body1, ^b2;
  ^while.body3:
    i32 %26 = phi [^b2, i32 0] [^b5, i32 %35];
    [100 * i32]* %27 = getelementptr &([100 * [100 * i32]]* %8)[i64 0][i32 %26];
    [100 * i32]* %28 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %26];
    cbr i1 %13(prob = 0.984615), ^while.body5, ^b5;
  ^b4:
    ret i32 0;
  ^while.body4:
    i32 %29 = phi [^indirect1, i32 0] [^while.body4, i32 %32];
    i32 %30 = call () -> i32 @getint();
    i32* %31 = getelementptr &([100 * i32]* %18)[i64 0][i32 %29];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %29, i32 1;
    i1 %33 = icmp sgt i32 %12, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.body4, ^b3;
  ^while.body5:
    i32 %34 = phi [^while.body3, i32 0] [^b6, i32 %39];
    cbr i1 %3(prob = 0.984615), ^indirect2, ^b6;
  ^b5:
    i32 %35 = add i32 %26, i32 1;
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.body3, ^while.body6;
  ^indirect2:
    i32* %37 = getelementptr &([100 * i32]* %27)[i64 0][i32 %34];
    i32 %38 = load i32* %37;
    cbr i1 %4(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b6:
    i32 %39 = add i32 %34, i32 1;
    i1 %40 = icmp sgt i32 %12, i32 %39;
    cbr i1 %40(prob = 0.984615), ^while.body5, ^b5;
  ^while.body6:
    i32 %41 = phi [^b5, i32 0] [^b7, i32 %84];
    [100 * i32]* %42 = getelementptr &([100 * [100 * i32]]* %8)[i64 0][i32 %41];
    cbr i1 %13(prob = 0.984615), ^while.body8, ^b7;
  ^while.body7:
    i32 %43 = phi [^indirect2, i32 0] [^while.body7, i32 %73];
    i32 %44 = phi [^indirect2, i32 %38] [^while.body7, i32 %72];
    [100 * i32]* %45 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %43];
    i32* %46 = getelementptr &([100 * i32]* %45)[i64 0][i32 %34];
    i32* %47 = getelementptr &([100 * i32]* %28)[i64 0][i32 %43];
    i32 %48 = load i32* %47;
    i32 %49 = load i32* %46;
    [100 * i32]* %50 = getelementptr &([100 * i32]* %45)[i64 1];
    i32* %51 = getelementptr &([100 * i32]* %50)[i64 0][i32 %34];
    i32* %52 = getelementptr &(i32* %47)[i64 1];
    i32 %53 = load i32* %52;
    i32 %54 = load i32* %51;
    i32 %55 = mul i32 %53, i32 %54;
    i32 %56 = mul i32 %48, i32 %49;
    i32 %57 = add i32 %55, i32 %56;
    [100 * i32]* %58 = getelementptr &([100 * i32]* %45)[i64 2];
    i32* %59 = getelementptr &([100 * i32]* %58)[i64 0][i32 %34];
    i32* %60 = getelementptr &(i32* %47)[i64 2];
    i32 %61 = load i32* %60;
    i32 %62 = load i32* %59;
    i32 %63 = mul i32 %61, i32 %62;
    i32 %64 = add i32 %57, i32 %63;
    [100 * i32]* %65 = getelementptr &([100 * i32]* %45)[i64 3];
    i32* %66 = getelementptr &([100 * i32]* %65)[i64 0][i32 %34];
    i32* %67 = getelementptr &(i32* %47)[i64 3];
    i32 %68 = load i32* %67;
    i32 %69 = load i32* %66;
    i32 %70 = mul i32 %68, i32 %69;
    i32 %71 = add i32 %64, i32 %70;
    i32 %72 = add i32 %44, i32 %71;
    i32 %73 = add i32 %43, i32 4;
    i1 %74 = icmp sgt i32 %5, i32 %73;
    cbr i1 %74(prob = 0.941176), ^while.body7, ^scalar.header;
  ^scalar.header:
    i32 %75 = phi [^indirect2, i32 0] [^while.body7, i32 %73];
    i32 %76 = phi [^indirect2, i32 %38] [^while.body7, i32 %72];
    i32 %77 = phi [^indirect2, i32 undef] [^while.body7, i32 %72];
    i1 %78 = icmp sgt i32 %2, i32 %75;
    cbr i1 %78(prob = 0.75), ^while.body9, ^scalar.final;
  ^while.body8:
    i32 %79 = phi [^while.body6, i32 0] [^while.body8, i32 %82];
    i32* %80 = getelementptr &([100 * i32]* %42)[i64 0][i32 %79];
    i32 %81 = load i32* %80;
    call (i32) -> void @putint(i32 %81);
    call (i32) -> void @putch(i32 32);
    i32 %82 = add i32 %79, i32 1;
    i1 %83 = icmp sgt i32 %12, i32 %82;
    cbr i1 %83(prob = 0.984615), ^while.body8, ^b7;
  ^b7:
    call (i32) -> void @putch(i32 10);
    i32 %84 = add i32 %41, i32 1;
    i1 %85 = icmp sgt i32 %0, i32 %84;
    cbr i1 %85(prob = 0.984615), ^while.body6, ^b4;
  ^scalar.final:
    i32 %86 = phi [^scalar.header, i32 %77] [^while.body9, i32 %95];
    store i32* %37 with i32 %86;
    ubr ^b6;
  ^while.body9 {scalar}:
    i32 %87 = phi [^scalar.header, i32 %76] [^while.body9, i32 %95];
    i32 %88 = phi [^scalar.header, i32 %75] [^while.body9, i32 %96];
    [100 * i32]* %89 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %88];
    i32* %90 = getelementptr &([100 * i32]* %89)[i64 0][i32 %34];
    i32* %91 = getelementptr &([100 * i32]* %28)[i64 0][i32 %88];
    i32 %92 = load i32* %91;
    i32 %93 = load i32* %90;
    i32 %94 = mul i32 %92, i32 %93;
    i32 %95 = add i32 %87, i32 %94;
    i32 %96 = add i32 %88, i32 1;
    i1 %97 = icmp sgt i32 %2, i32 %96;
    cbr i1 %97(prob = 0.75), ^while.body9, ^scalar.final;
}
