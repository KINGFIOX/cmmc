internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    [100 * [100 * i32]]* %3 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %4 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %5 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %12];
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i1 %10 = scmp gt i32 %9, i32 0;
    ubr ^while.header1;
  ^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
  ^indirect:
    [100 * i32]* %11 = getelementptr &([100 * [100 * i32]]* %3)[i64 0][i32 %6];
    ubr ^while.body1;
  ^b1:
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %13 = phi [^b, i32 0] [^b2, i32 %25];
    i1 %14 = scmp lt i32 %13, i32 %8;
    cbr i1 %14(prob = 0.97), ^while.body2, ^while.header2;
  ^while.body1:
    i32 %15 = phi [^indirect, i32 0] [^while.body1, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32* %17 = getelementptr &([100 * i32]* %11)[i64 0][i32 %15];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = scmp lt i32 %18, i32 %1;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b1;
  ^while.body2:
    cbr i1 %10(prob = 0.97), ^indirect1, ^b2;
  ^while.header2:
    i32 %20 = phi [^while.header1, i32 0] [^b3, i32 %35];
    i1 %21 = scmp lt i32 %20, i32 %0;
    [100 * i32]* %22 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %20];
    [100 * i32]* %23 = getelementptr &([100 * [100 * i32]]* %3)[i64 0][i32 %20];
    cbr i1 %21(prob = 0.97), ^while.header3, ^while.header4;
  ^indirect1:
    [100 * i32]* %24 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %13];
    ubr ^while.body3;
  ^b2:
    i32 %25 = add i32 %13, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %26 = phi [^while.header2, i32 0] [^b5, i32 %38];
    i1 %27 = scmp lt i32 %26, i32 %9;
    cbr i1 %27(prob = 0.97), ^while.body4, ^b3;
  ^while.header4:
    i32 %28 = phi [^while.header2, i32 0] [^b6, i32 %40];
    i1 %29 = scmp lt i32 %28, i32 %0;
    cbr i1 %29(prob = 0.97), ^while.body5, ^b4;
  ^while.body3:
    i32 %30 = phi [^indirect1, i32 0] [^while.body3, i32 %33];
    i32 %31 = call () -> i32 @getint();
    i32* %32 = getelementptr &([100 * i32]* %24)[i64 0][i32 %30];
    store i32* %32 with i32 %31;
    i32 %33 = add i32 %30, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %9;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b2;
  ^b3:
    i32 %35 = add i32 %20, i32 1;
    ubr ^while.header2;
  ^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect2, ^b5;
  ^while.body5:
    cbr i1 %10(prob = 0.97), ^indirect3, ^b6;
  ^b4:
    ret i32 0;
  ^indirect2:
    i32* %36 = getelementptr &([100 * i32]* %22)[i64 0][i32 %26];
    i32 %37 = load i32* %36;
    ubr ^super.header;
  ^b5:
    i32 %38 = add i32 %26, i32 1;
    ubr ^while.header3;
  ^indirect3:
    [100 * i32]* %39 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %28];
    ubr ^while.body6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %40 = add i32 %28, i32 1;
    ubr ^while.header4;
  ^super.header:
    i32 %41 = phi [^indirect2, i32 %37] [^while.body7, i32 %77];
    i32 %42 = phi [^indirect2, i32 0] [^while.body7, i32 %43];
    i32 %43 = add i32 %42, i32 4;
    i1 %44 = scmp lt i32 %43, i32 %1;
    cbr i1 %44(prob = 0.89), ^while.body7, ^super.header1;
  ^while.body6:
    i32 %45 = phi [^indirect3, i32 0] [^while.body6, i32 %48];
    i32* %46 = getelementptr &([100 * i32]* %39)[i64 0][i32 %45];
    i32 %47 = load i32* %46;
    call (i32) -> void @putint(i32 %47);
    call (i32) -> void @putch(i32 32);
    i32 %48 = add i32 %45, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %9;
    cbr i1 %49(prob = 0.97), ^while.body6, ^b6;
  ^while.body7:
    [100 * i32]* %50 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %42];
    i32* %51 = getelementptr &([100 * i32]* %50)[i64 0][i32 %26];
    i32* %52 = getelementptr &([100 * i32]* %23)[i64 0][i32 %42];
    i32 %53 = load i32* %52;
    i32 %54 = load i32* %51;
    [100 * i32]* %55 = getelementptr &([100 * i32]* %50)[i64 1];
    i32* %56 = getelementptr &([100 * i32]* %55)[i64 0][i32 %26];
    i32* %57 = getelementptr &(i32* %52)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = load i32* %56;
    i32 %60 = mul i32 %58, i32 %59;
    i32 %61 = mul i32 %53, i32 %54;
    i32 %62 = add i32 %41, i32 %61;
    i32 %63 = add i32 %60, i32 %62;
    [100 * i32]* %64 = getelementptr &([100 * i32]* %50)[i64 2];
    i32* %65 = getelementptr &([100 * i32]* %64)[i64 0][i32 %26];
    i32* %66 = getelementptr &(i32* %52)[i64 2];
    i32 %67 = load i32* %66;
    i32 %68 = load i32* %65;
    i32 %69 = mul i32 %67, i32 %68;
    i32 %70 = add i32 %63, i32 %69;
    [100 * i32]* %71 = getelementptr &([100 * i32]* %50)[i64 3];
    i32* %72 = getelementptr &([100 * i32]* %71)[i64 0][i32 %26];
    i32* %73 = getelementptr &(i32* %52)[i64 3];
    i32 %74 = load i32* %73;
    i32 %75 = load i32* %72;
    i32 %76 = mul i32 %74, i32 %75;
    i32 %77 = add i32 %70, i32 %76;
    ubr ^super.header;
  ^super.header1:
    i32 %78 = phi [^super.header, i32 %41] [^while.body8, i32 %109];
    i32 %79 = phi [^super.header, i32 %42] [^while.body8, i32 %80];
    i32 %80 = add i32 %79, i32 4;
    i1 %81 = scmp lt i32 %80, i32 %1;
    cbr i1 %81(prob = 0.89), ^while.body8, ^super.header2;
  ^while.body8:
    [100 * i32]* %82 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %79];
    i32* %83 = getelementptr &([100 * i32]* %82)[i64 0][i32 %26];
    i32* %84 = getelementptr &([100 * i32]* %23)[i64 0][i32 %79];
    i32 %85 = load i32* %84;
    i32 %86 = load i32* %83;
    [100 * i32]* %87 = getelementptr &([100 * i32]* %82)[i64 1];
    i32* %88 = getelementptr &([100 * i32]* %87)[i64 0][i32 %26];
    i32* %89 = getelementptr &(i32* %84)[i64 1];
    i32 %90 = load i32* %89;
    i32 %91 = load i32* %88;
    i32 %92 = mul i32 %90, i32 %91;
    i32 %93 = mul i32 %85, i32 %86;
    i32 %94 = add i32 %78, i32 %93;
    i32 %95 = add i32 %92, i32 %94;
    [100 * i32]* %96 = getelementptr &([100 * i32]* %82)[i64 2];
    i32* %97 = getelementptr &([100 * i32]* %96)[i64 0][i32 %26];
    i32* %98 = getelementptr &(i32* %84)[i64 2];
    i32 %99 = load i32* %98;
    i32 %100 = load i32* %97;
    i32 %101 = mul i32 %99, i32 %100;
    i32 %102 = add i32 %95, i32 %101;
    [100 * i32]* %103 = getelementptr &([100 * i32]* %82)[i64 3];
    i32* %104 = getelementptr &([100 * i32]* %103)[i64 0][i32 %26];
    i32* %105 = getelementptr &(i32* %84)[i64 3];
    i32 %106 = load i32* %105;
    i32 %107 = load i32* %104;
    i32 %108 = mul i32 %106, i32 %107;
    i32 %109 = add i32 %102, i32 %108;
    ubr ^super.header1;
  ^super.header2:
    i32 %110 = phi [^super.header1, i32 %78] [^while.body9, i32 %141];
    i32 %111 = phi [^super.header1, i32 %79] [^while.body9, i32 %112];
    i32 %112 = add i32 %111, i32 4;
    i1 %113 = scmp lt i32 %112, i32 %1;
    cbr i1 %113(prob = 0.89), ^while.body9, ^while.body10;
  ^while.body9:
    [100 * i32]* %114 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %111];
    i32* %115 = getelementptr &([100 * i32]* %114)[i64 0][i32 %26];
    i32* %116 = getelementptr &([100 * i32]* %23)[i64 0][i32 %111];
    i32 %117 = load i32* %116;
    i32 %118 = load i32* %115;
    [100 * i32]* %119 = getelementptr &([100 * i32]* %114)[i64 1];
    i32* %120 = getelementptr &([100 * i32]* %119)[i64 0][i32 %26];
    i32* %121 = getelementptr &(i32* %116)[i64 1];
    i32 %122 = load i32* %121;
    i32 %123 = load i32* %120;
    i32 %124 = mul i32 %122, i32 %123;
    i32 %125 = mul i32 %117, i32 %118;
    i32 %126 = add i32 %110, i32 %125;
    i32 %127 = add i32 %124, i32 %126;
    [100 * i32]* %128 = getelementptr &([100 * i32]* %114)[i64 2];
    i32* %129 = getelementptr &([100 * i32]* %128)[i64 0][i32 %26];
    i32* %130 = getelementptr &(i32* %116)[i64 2];
    i32 %131 = load i32* %130;
    i32 %132 = load i32* %129;
    i32 %133 = mul i32 %131, i32 %132;
    i32 %134 = add i32 %127, i32 %133;
    [100 * i32]* %135 = getelementptr &([100 * i32]* %114)[i64 3];
    i32* %136 = getelementptr &([100 * i32]* %135)[i64 0][i32 %26];
    i32* %137 = getelementptr &(i32* %116)[i64 3];
    i32 %138 = load i32* %137;
    i32 %139 = load i32* %136;
    i32 %140 = mul i32 %138, i32 %139;
    i32 %141 = add i32 %134, i32 %140;
    ubr ^super.header2;
  ^while.body10:
    i32 %142 = phi [^super.header2, i32 %110] [^while.body10, i32 %150];
    i32 %143 = phi [^super.header2, i32 %111] [^while.body10, i32 %151];
    [100 * i32]* %144 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %143];
    i32* %145 = getelementptr &([100 * i32]* %144)[i64 0][i32 %26];
    i32* %146 = getelementptr &([100 * i32]* %23)[i64 0][i32 %143];
    i32 %147 = load i32* %146;
    i32 %148 = load i32* %145;
    i32 %149 = mul i32 %147, i32 %148;
    i32 %150 = add i32 %142, i32 %149;
    store i32* %36 with i32 %150;
    i32 %151 = add i32 %143, i32 1;
    i1 %152 = scmp lt i32 %151, i32 %1;
    cbr i1 %152(prob = 0.97), ^while.body10, ^b5;
}
