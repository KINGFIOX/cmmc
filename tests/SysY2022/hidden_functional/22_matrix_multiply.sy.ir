internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b1, i32 %17] [^entry, i32 0];
    i32 %3 = phi [^b1, i32 %10] [^entry, i32 %1];
    i32 %4 = phi [^b1, i32 %11] [^entry, i32 %0];
    i1 %5 = scmp lt i32 %2, i32 %4;
    cbr i1 %5(prob = 0.97), ^while.header1, ^b;
^b:
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    ubr ^while.header2;
^while.header1:
    i32 %8 = phi [^while.header, i32 %2] [^while.body, i32 %8];
    i32 %9 = phi [^while.header, i32 0] [^while.body, i32 %16];
    i32 %10 = phi [^while.header, i32 %3] [^while.body, i32 %10];
    i32 %11 = phi [^while.header, i32 %4] [^while.body, i32 %11];
    i1 %12 = scmp lt i32 %9, i32 %10;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
^while.body:
    [100 * i32]* %13 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %8];
    i32* %14 = getelementptr &([100 * i32]* %13)[i64 0][i32 %9];
    i32 %15 = call () -> i32 @getint();
    store i32* %14 with i32 %15;
    i32 %16 = add i32 %9, i32 1;
    ubr ^while.header1;
^b1:
    i32 %17 = add i32 %8, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %18 = phi [^b2, i32 %40] [^b, i32 0];
    i32 %19 = phi [^b2, i32 %26] [^b, i32 %3];
    i32 %20 = phi [^b2, i32 %27] [^b, i32 %4];
    i32 %21 = phi [^b2, i32 %28] [^b, i32 %7];
    i32 %22 = phi [^b2, i32 %29] [^b, i32 %6];
    i1 %23 = scmp lt i32 %18, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %24 = phi [^while.header2, i32 %18] [^while.body1, i32 %24];
    i32 %25 = phi [^while.header2, i32 0] [^while.body1, i32 %39];
    i32 %26 = phi [^while.header2, i32 %19] [^while.body1, i32 %26];
    i32 %27 = phi [^while.header2, i32 %20] [^while.body1, i32 %27];
    i32 %28 = phi [^while.header2, i32 %21] [^while.body1, i32 %28];
    i32 %29 = phi [^while.header2, i32 %22] [^while.body1, i32 %29];
    i1 %30 = scmp lt i32 %25, i32 %28;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %31 = phi [^while.header2, i32 %19] [^b3, i32 %41];
    i32 %32 = phi [^while.header2, i32 %20] [^b3, i32 %42];
    i32 %33 = phi [^while.header2, i32 %21] [^b3, i32 %43];
    i32 %34 = phi [^while.header2, i32 0] [^b3, i32 %51];
    i1 %35 = scmp lt i32 %34, i32 %32;
    cbr i1 %35(prob = 0.97), ^while.header5, ^while.header6;
^while.body1:
    [100 * i32]* %36 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %24];
    i32* %37 = getelementptr &([100 * i32]* %36)[i64 0][i32 %25];
    i32 %38 = call () -> i32 @getint();
    store i32* %37 with i32 %38;
    i32 %39 = add i32 %25, i32 1;
    ubr ^while.header3;
^b2:
    i32 %40 = add i32 %24, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %41 = phi [^while.header4, i32 %31] [^b5, i32 %52];
    i32 %42 = phi [^while.header4, i32 %32] [^b5, i32 %53];
    i32 %43 = phi [^while.header4, i32 %33] [^b5, i32 %54];
    i32 %44 = phi [^while.header4, i32 0] [^b5, i32 %76];
    i32 %45 = phi [^while.header4, i32 %34] [^b5, i32 %57];
    i1 %46 = scmp lt i32 %44, i32 %43;
    cbr i1 %46(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %47 = phi [^while.header4, i32 0] [^b6, i32 %81];
    i32 %48 = phi [^while.header4, i32 %32] [^b6, i32 %61];
    i32 %49 = phi [^while.header4, i32 %33] [^b6, i32 %62];
    i1 %50 = scmp lt i32 %47, i32 %48;
    cbr i1 %50(prob = 0.97), ^while.header8, ^b4;
^b3:
    i32 %51 = add i32 %45, i32 1;
    ubr ^while.header4;
^while.header7:
    i32 %52 = phi [^while.header5, i32 %41] [^while.body2, i32 %52];
    i32 %53 = phi [^while.header5, i32 %42] [^while.body2, i32 %53];
    i32 %54 = phi [^while.header5, i32 %43] [^while.body2, i32 %54];
    i32 %55 = phi [^while.header5, i32 0] [^while.body2, i32 %75];
    i32 %56 = phi [^while.header5, i32 %44] [^while.body2, i32 %56];
    i32 %57 = phi [^while.header5, i32 %45] [^while.body2, i32 %57];
    i1 %58 = scmp lt i32 %55, i32 %52;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b5;
^while.header8:
    i32 %59 = phi [^while.header6, i32 %47] [^while.body3, i32 %59];
    i32 %60 = phi [^while.header6, i32 0] [^while.body3, i32 %80];
    i32 %61 = phi [^while.header6, i32 %48] [^while.body3, i32 %61];
    i32 %62 = phi [^while.header6, i32 %49] [^while.body3, i32 %62];
    i1 %63 = scmp lt i32 %60, i32 %62;
    cbr i1 %63(prob = 0.97), ^while.body3, ^b6;
^b4:
    ret i32 0;
^while.body2:
    [100 * i32]* %64 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %57];
    i32* %65 = getelementptr &([100 * i32]* %64)[i64 0][i32 %56];
    i32 %66 = load i32* %65;
    [100 * i32]* %67 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %57];
    i32* %68 = getelementptr &([100 * i32]* %67)[i64 0][i32 %55];
    i32 %69 = load i32* %68;
    [100 * i32]* %70 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %55];
    i32* %71 = getelementptr &([100 * i32]* %70)[i64 0][i32 %56];
    i32 %72 = load i32* %71;
    i32 %73 = mul i32 %69, i32 %72;
    i32 %74 = add i32 %66, i32 %73;
    store i32* %65 with i32 %74;
    i32 %75 = add i32 %55, i32 1;
    ubr ^while.header7;
^b5:
    i32 %76 = add i32 %56, i32 1;
    ubr ^while.header5;
^while.body3:
    [100 * i32]* %77 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %59];
    i32* %78 = getelementptr &([100 * i32]* %77)[i64 0][i32 %60];
    i32 %79 = load i32* %78;
    call (i32) -> void @putint(i32 %79);
    call (i32) -> void @putch(i32 32);
    i32 %80 = add i32 %60, i32 1;
    ubr ^while.header8;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %81 = add i32 %59, i32 1;
    ubr ^while.header6;
}
