internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b1, i32 %12] [^entry, i32 0];
    i1 %3 = scmp lt i32 %2, i32 %0;
    [100 * i32]* %4 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %2];
    cbr i1 %3(prob = 0.97), ^while.header1, ^b;
^b:
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    ubr ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^while.body, i32 %11];
    i1 %8 = scmp lt i32 %7, i32 %1;
    cbr i1 %8(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32* %9 = getelementptr &([100 * i32]* %4)[i64 0][i32 %7];
    i32 %10 = call () -> i32 @getint();
    store i32* %9 with i32 %10;
    i32 %11 = add i32 %7, i32 1;
    ubr ^while.header1;
^b1:
    i32 %12 = add i32 %2, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %13 = phi [^b2, i32 %25] [^b, i32 0];
    i1 %14 = scmp lt i32 %13, i32 %5;
    [100 * i32]* %15 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %13];
    cbr i1 %14(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %16 = phi [^while.header2, i32 0] [^while.body1, i32 %24];
    i1 %17 = scmp lt i32 %16, i32 %6;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %18 = phi [^while.header2, i32 0] [^b3, i32 %32];
    i1 %19 = scmp lt i32 %18, i32 %0;
    [100 * i32]* %20 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %18];
    [100 * i32]* %21 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %18];
    cbr i1 %19(prob = 0.97), ^while.header5, ^while.header6;
^while.body1:
    i32* %22 = getelementptr &([100 * i32]* %15)[i64 0][i32 %16];
    i32 %23 = call () -> i32 @getint();
    store i32* %22 with i32 %23;
    i32 %24 = add i32 %16, i32 1;
    ubr ^while.header3;
^b2:
    i32 %25 = add i32 %13, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %26 = phi [^while.header4, i32 0] [^b5, i32 %46];
    i1 %27 = scmp lt i32 %26, i32 %6;
    i32* %28 = getelementptr &([100 * i32]* %20)[i64 0][i32 %26];
    cbr i1 %27(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %29 = phi [^while.header4, i32 0] [^b6, i32 %50];
    i1 %30 = scmp lt i32 %29, i32 %0;
    [100 * i32]* %31 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %29];
    cbr i1 %30(prob = 0.97), ^while.header8, ^b4;
^b3:
    i32 %32 = add i32 %18, i32 1;
    ubr ^while.header4;
^while.header7:
    i32 %33 = phi [^while.header5, i32 0] [^while.body2, i32 %45];
    i1 %34 = scmp lt i32 %33, i32 %1;
    cbr i1 %34(prob = 0.97), ^while.body2, ^b5;
^while.header8:
    i32 %35 = phi [^while.header6, i32 0] [^while.body3, i32 %49];
    i1 %36 = scmp lt i32 %35, i32 %6;
    cbr i1 %36(prob = 0.97), ^while.body3, ^b6;
^b4:
    ret i32 0;
^while.body2:
    i32 %37 = load i32* %28;
    i32* %38 = getelementptr &([100 * i32]* %21)[i64 0][i32 %33];
    i32 %39 = load i32* %38;
    [100 * i32]* %40 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %33];
    i32* %41 = getelementptr &([100 * i32]* %40)[i64 0][i32 %26];
    i32 %42 = load i32* %41;
    i32 %43 = mul i32 %39, i32 %42;
    i32 %44 = add i32 %37, i32 %43;
    store i32* %28 with i32 %44;
    i32 %45 = add i32 %33, i32 1;
    ubr ^while.header7;
^b5:
    i32 %46 = add i32 %26, i32 1;
    ubr ^while.header5;
^while.body3:
    i32* %47 = getelementptr &([100 * i32]* %31)[i64 0][i32 %35];
    i32 %48 = load i32* %47;
    call (i32) -> void @putint(i32 %48);
    call (i32) -> void @putch(i32 32);
    i32 %49 = add i32 %35, i32 1;
    ubr ^while.header8;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %50 = add i32 %29, i32 1;
    ubr ^while.header6;
}
