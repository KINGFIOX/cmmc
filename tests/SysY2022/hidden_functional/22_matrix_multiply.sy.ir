internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a, align 8 { Flexible };
internal [100 * [100 * i32]]* @b, align 8 { Flexible };
internal [100 * [100 * i32]]* @res, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i32 %3 = add i32 %1, i32 -8;
    i1 %4 = icmp sgt i32 %1, i32 8;
    [100 * [100 * i32]]* %5 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %6 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %7 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.984615), ^while.header1, ^b;
  ^b:
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i1 %12 = icmp sgt i32 %11, i32 0;
    ubr ^while.header2;
  ^while.header1:
    [100 * i32]* %13 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %8];
    cbr i1 %2(prob = 0.984615), ^while.body, ^b1;
  ^b1:
    i32 %14 = add i32 %8, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %15 = phi [^while.header1, i32 0] [^while.body, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32* %17 = getelementptr &([100 * i32]* %13)[i64 0][i32 %15];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %1, i32 %18;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b1;
  ^while.header2:
    i32 %20 = phi [^b, i32 0] [^b2, i32 %27];
    i1 %21 = icmp sgt i32 %10, i32 %20;
    cbr i1 %21(prob = 0.984615), ^while.header3, ^while.header4;
  ^while.header3:
    [100 * i32]* %22 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %20];
    cbr i1 %12(prob = 0.984615), ^while.body1, ^b2;
  ^while.header4:
    i32 %23 = phi [^while.header2, i32 0] [^b3, i32 %37];
    i1 %24 = icmp sgt i32 %0, i32 %23;
    [100 * i32]* %25 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %23];
    [100 * i32]* %26 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %23];
    cbr i1 %24(prob = 0.984615), ^while.header5, ^while.header6;
  ^b2:
    i32 %27 = add i32 %20, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %28 = phi [^while.header3, i32 0] [^while.body1, i32 %31];
    i32 %29 = call () -> i32 @getint();
    i32* %30 = getelementptr &([100 * i32]* %22)[i64 0][i32 %28];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %28, i32 1;
    i1 %32 = icmp sgt i32 %11, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.body1, ^b2;
  ^while.header5:
    i32 %33 = phi [^while.header4, i32 0] [^b5, i32 %39];
    i1 %34 = icmp sgt i32 %11, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.header7, ^b3;
  ^while.header6:
    i32 %35 = phi [^while.header4, i32 0] [^b6, i32 %42];
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.header8, ^b4;
  ^b3:
    i32 %37 = add i32 %23, i32 1;
    ubr ^while.header4;
  ^while.header7:
    cbr i1 %2(prob = 0.984615), ^indirect, ^b5;
  ^while.header8:
    [100 * i32]* %38 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %35];
    cbr i1 %12(prob = 0.984615), ^while.body2, ^b6;
  ^b4:
    ret i32 0;
  ^b5:
    i32 %39 = add i32 %33, i32 1;
    ubr ^while.header5;
  ^indirect:
    i32* %40 = getelementptr &([100 * i32]* %25)[i64 0][i32 %33];
    i32 %41 = load i32* %40;
    cbr i1 %4(prob = 0.888889), ^while.body3, ^while.body4;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %42 = add i32 %35, i32 1;
    ubr ^while.header6;
  ^while.body2:
    i32 %43 = phi [^while.header8, i32 0] [^while.body2, i32 %46];
    i32* %44 = getelementptr &([100 * i32]* %38)[i64 0][i32 %43];
    i32 %45 = load i32* %44;
    call (i32) -> void @putint(i32 %45);
    call (i32) -> void @putch(i32 32);
    i32 %46 = add i32 %43, i32 1;
    i1 %47 = icmp sgt i32 %11, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body2, ^b6;
  ^while.body3:
    i32 %48 = phi [^indirect, i32 0] [^while.body3, i32 %106];
    i32 %49 = phi [^indirect, i32 %41] [^while.body3, i32 %105];
    [100 * i32]* %50 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %48];
    i32* %51 = getelementptr &([100 * i32]* %50)[i64 0][i32 %33];
    i32* %52 = getelementptr &([100 * i32]* %26)[i64 0][i32 %48];
    i32 %53 = load i32* %52;
    i32 %54 = load i32* %51;
    [100 * i32]* %55 = getelementptr &([100 * i32]* %50)[i64 1];
    i32* %56 = getelementptr &([100 * i32]* %55)[i64 0][i32 %33];
    i32* %57 = getelementptr &(i32* %52)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = load i32* %56;
    i32 %60 = mul i32 %58, i32 %59;
    i32 %61 = mul i32 %53, i32 %54;
    i32 %62 = add i32 %60, i32 %61;
    [100 * i32]* %63 = getelementptr &([100 * i32]* %50)[i64 2];
    i32* %64 = getelementptr &([100 * i32]* %63)[i64 0][i32 %33];
    i32* %65 = getelementptr &(i32* %52)[i64 2];
    i32 %66 = load i32* %65;
    i32 %67 = load i32* %64;
    i32 %68 = mul i32 %66, i32 %67;
    i32 %69 = add i32 %62, i32 %68;
    [100 * i32]* %70 = getelementptr &([100 * i32]* %50)[i64 3];
    i32* %71 = getelementptr &([100 * i32]* %70)[i64 0][i32 %33];
    i32* %72 = getelementptr &(i32* %52)[i64 3];
    i32 %73 = load i32* %72;
    i32 %74 = load i32* %71;
    i32 %75 = mul i32 %73, i32 %74;
    i32 %76 = add i32 %69, i32 %75;
    [100 * i32]* %77 = getelementptr &([100 * i32]* %50)[i64 4];
    i32* %78 = getelementptr &([100 * i32]* %77)[i64 0][i32 %33];
    i32* %79 = getelementptr &(i32* %52)[i64 4];
    i32 %80 = load i32* %79;
    i32 %81 = load i32* %78;
    i32 %82 = mul i32 %80, i32 %81;
    i32 %83 = add i32 %76, i32 %82;
    [100 * i32]* %84 = getelementptr &([100 * i32]* %50)[i64 5];
    i32* %85 = getelementptr &([100 * i32]* %84)[i64 0][i32 %33];
    i32* %86 = getelementptr &(i32* %52)[i64 5];
    i32 %87 = load i32* %86;
    i32 %88 = load i32* %85;
    i32 %89 = mul i32 %87, i32 %88;
    i32 %90 = add i32 %83, i32 %89;
    [100 * i32]* %91 = getelementptr &([100 * i32]* %50)[i64 6];
    i32* %92 = getelementptr &([100 * i32]* %91)[i64 0][i32 %33];
    i32* %93 = getelementptr &(i32* %52)[i64 6];
    i32 %94 = load i32* %93;
    i32 %95 = load i32* %92;
    i32 %96 = mul i32 %94, i32 %95;
    i32 %97 = add i32 %90, i32 %96;
    [100 * i32]* %98 = getelementptr &([100 * i32]* %50)[i64 7];
    i32* %99 = getelementptr &([100 * i32]* %98)[i64 0][i32 %33];
    i32* %100 = getelementptr &(i32* %52)[i64 7];
    i32 %101 = load i32* %100;
    i32 %102 = load i32* %99;
    i32 %103 = mul i32 %101, i32 %102;
    i32 %104 = add i32 %97, i32 %103;
    i32 %105 = add i32 %49, i32 %104;
    i32 %106 = add i32 %48, i32 8;
    i1 %107 = icmp sgt i32 %3, i32 %106;
    cbr i1 %107(prob = 0.888889), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %108 = phi [^indirect, i32 %41] [^while.body3, i32 %105] [^while.body4, i32 %116];
    i32 %109 = phi [^indirect, i32 0] [^while.body3, i32 %106] [^while.body4, i32 %117];
    [100 * i32]* %110 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %109];
    i32* %111 = getelementptr &([100 * i32]* %110)[i64 0][i32 %33];
    i32* %112 = getelementptr &([100 * i32]* %26)[i64 0][i32 %109];
    i32 %113 = load i32* %112;
    i32 %114 = load i32* %111;
    i32 %115 = mul i32 %113, i32 %114;
    i32 %116 = add i32 %108, i32 %115;
    i32 %117 = add i32 %109, i32 1;
    i1 %118 = icmp sgt i32 %1, i32 %117;
    cbr i1 %118(prob = 0.875), ^while.body4, ^postbody;
  ^postbody:
    store i32* %40 with i32 %116;
    ubr ^b5;
}
