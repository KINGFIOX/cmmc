internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a, align 8 { Flexible };
internal [100 * [100 * i32]]* @b, align 8 { Flexible Transposed };
internal [100 * [100 * i32]]* @res, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i1 %3 = icmp sgt i32 %2, i32 0;
    i1 %4 = icmp sgt i32 %2, i32 3;
    i32 %5 = add i32 %2, i32 -3;
    [100 * [100 * i32]]* %6 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %7 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %8 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^b1, i32 %15];
    cbr i1 %3(prob = 0.984615), ^indirect, ^b1;
  ^b:
    i32 %10 = call () -> i32 @getint();
    i1 %11 = icmp sgt i32 %10, i32 0;
    i32 %12 = call () -> i32 @getint();
    i1 %13 = icmp sgt i32 %12, i32 0;
    cbr i1 %11(prob = 0.984615), ^while.body1, ^b2;
  ^indirect:
    [100 * i32]* %14 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %9];
    ubr ^while.body2;
  ^b1:
    i32 %15 = add i32 %9, i32 1;
    i1 %16 = icmp sgt i32 %0, i32 %15;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^while.body1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %29];
    cbr i1 %13(prob = 0.984615), ^while.body3, ^b3;
  ^b2:
    cbr i1 %1(prob = 0.984615), ^while.body4, ^b4;
  ^while.body2:
    i32 %18 = phi [^indirect, i32 0] [^while.body2, i32 %21];
    i32 %19 = call () -> i32 @getint();
    i32* %20 = getelementptr &([100 * i32]* %14)[i64 0][i32 %18];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %18, i32 1;
    i1 %22 = icmp sgt i32 %2, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body2, ^b1;
  ^while.body3:
    i32 %23 = phi [^while.body1, i32 0] [^while.body3, i32 %27];
    i32 %24 = call () -> i32 @getint();
    [100 * i32]* %25 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %23];
    i32* %26 = getelementptr &([100 * i32]* %25)[i64 0][i32 %17];
    store i32* %26 with i32 %24;
    i32 %27 = add i32 %23, i32 1;
    i1 %28 = icmp sgt i32 %12, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body3, ^b3;
  ^b3:
    i32 %29 = add i32 %17, i32 1;
    i1 %30 = icmp sgt i32 %10, i32 %29;
    cbr i1 %30(prob = 0.984615), ^while.body1, ^b2;
  ^while.body4:
    i32 %31 = phi [^b2, i32 0] [^b5, i32 %35];
    [100 * i32]* %32 = getelementptr &([100 * [100 * i32]]* %8)[i64 0][i32 %31];
    [100 * i32]* %33 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %31];
    cbr i1 %13(prob = 0.984615), ^while.body5, ^b5;
  ^b4:
    ret i32 0;
  ^while.body5:
    i32 %34 = phi [^while.body4, i32 0] [^b6, i32 %40];
    cbr i1 %3(prob = 0.984615), ^indirect1, ^b6;
  ^b5:
    i32 %35 = add i32 %31, i32 1;
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.body4, ^while.body6;
  ^indirect1:
    i32* %37 = getelementptr &([100 * i32]* %32)[i64 0][i32 %34];
    i32 %38 = load i32* %37;
    [100 * i32]* %39 = getelementptr &([100 * [100 * i32]]* %7)[i64 0][i32 %34];
    cbr i1 %4(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b6:
    i32 %40 = add i32 %34, i32 1;
    i1 %41 = icmp sgt i32 %12, i32 %40;
    cbr i1 %41(prob = 0.984615), ^while.body5, ^b5;
  ^while.body6:
    i32 %42 = phi [^b5, i32 0] [^b7, i32 %81];
    [100 * i32]* %43 = getelementptr &([100 * [100 * i32]]* %8)[i64 0][i32 %42];
    cbr i1 %13(prob = 0.984615), ^while.body8, ^b7;
  ^while.body7:
    i32 %44 = phi [^indirect1, i32 0] [^while.body7, i32 %70];
    i32 %45 = phi [^indirect1, i32 %38] [^while.body7, i32 %69];
    i32* %46 = getelementptr &([100 * i32]* %33)[i64 0][i32 %44];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &([100 * i32]* %39)[i64 0][i32 %44];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %46)[i64 1];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %48)[i64 1];
    i32 %53 = load i32* %52;
    i32 %54 = mul i32 %51, i32 %53;
    i32 %55 = mul i32 %47, i32 %49;
    i32 %56 = add i32 %54, i32 %55;
    i32* %57 = getelementptr &(i32* %46)[i64 2];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %48)[i64 2];
    i32 %60 = load i32* %59;
    i32 %61 = mul i32 %58, i32 %60;
    i32 %62 = add i32 %56, i32 %61;
    i32* %63 = getelementptr &(i32* %46)[i64 3];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %48)[i64 3];
    i32 %66 = load i32* %65;
    i32 %67 = mul i32 %64, i32 %66;
    i32 %68 = add i32 %62, i32 %67;
    i32 %69 = add i32 %45, i32 %68;
    i32 %70 = add i32 %44, i32 4;
    i1 %71 = icmp sgt i32 %5, i32 %70;
    cbr i1 %71(prob = 0.941176), ^while.body7, ^scalar.header;
  ^scalar.header:
    i32 %72 = phi [^indirect1, i32 0] [^while.body7, i32 %70];
    i32 %73 = phi [^indirect1, i32 %38] [^while.body7, i32 %69];
    i32 %74 = phi [^indirect1, i32 undef] [^while.body7, i32 %69];
    i1 %75 = icmp sgt i32 %2, i32 %72;
    cbr i1 %75(prob = 0.75), ^while.body9, ^scalar.final;
  ^while.body8:
    i32 %76 = phi [^while.body6, i32 0] [^while.body8, i32 %79];
    i32* %77 = getelementptr &([100 * i32]* %43)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    call (i32) -> void @putch(i32 32);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp sgt i32 %12, i32 %79;
    cbr i1 %80(prob = 0.984615), ^while.body8, ^b7;
  ^b7:
    call (i32) -> void @putch(i32 10);
    i32 %81 = add i32 %42, i32 1;
    i1 %82 = icmp sgt i32 %0, i32 %81;
    cbr i1 %82(prob = 0.984615), ^while.body6, ^b4;
  ^scalar.final:
    i32 %83 = phi [^scalar.header, i32 %74] [^while.body9, i32 %91];
    store i32* %37 with i32 %83;
    ubr ^b6;
  ^while.body9 {scalar}:
    i32 %84 = phi [^scalar.header, i32 %73] [^while.body9, i32 %91];
    i32 %85 = phi [^scalar.header, i32 %72] [^while.body9, i32 %92];
    i32* %86 = getelementptr &([100 * i32]* %33)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([100 * i32]* %39)[i64 0][i32 %85];
    i32 %89 = load i32* %88;
    i32 %90 = mul i32 %87, i32 %89;
    i32 %91 = add i32 %84, i32 %90;
    i32 %92 = add i32 %85, i32 1;
    i1 %93 = icmp sgt i32 %2, i32 %92;
    cbr i1 %93(prob = 0.75), ^while.body9, ^scalar.final;
}
