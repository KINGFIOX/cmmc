internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a { Flexible };
internal [100 * [100 * i32]]* @b { Flexible };
internal [100 * [100 * i32]]* @res { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %1, i32 4;
    [100 * [100 * i32]]* %4 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %5 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %6 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 0] [^b1, i32 %13];
    i1 %8 = icmp sgt i32 %0, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b;
  ^b:
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i1 %11 = icmp sgt i32 %10, i32 0;
    ubr ^while.header2;
  ^while.header1:
    [100 * i32]* %12 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %7];
    cbr i1 %2(prob = 0.97), ^while.body, ^b1;
  ^b1:
    i32 %13 = add i32 %7, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %14 = phi [^while.header1, i32 0] [^while.body, i32 %17];
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([100 * i32]* %12)[i64 0][i32 %14];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = icmp sgt i32 %1, i32 %17;
    cbr i1 %18(prob = 0.97), ^while.body, ^b1;
  ^while.header2:
    i32 %19 = phi [^b, i32 0] [^b2, i32 %26];
    i1 %20 = icmp sgt i32 %9, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.header3, ^while.header4;
  ^while.header3:
    [100 * i32]* %21 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %19];
    cbr i1 %11(prob = 0.97), ^while.body1, ^b2;
  ^while.header4:
    i32 %22 = phi [^while.header2, i32 0] [^b3, i32 %36];
    i1 %23 = icmp sgt i32 %0, i32 %22;
    [100 * i32]* %24 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %22];
    [100 * i32]* %25 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %22];
    cbr i1 %23(prob = 0.97), ^while.header5, ^while.header6;
  ^b2:
    i32 %26 = add i32 %19, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %27 = phi [^while.header3, i32 0] [^while.body1, i32 %30];
    i32 %28 = call () -> i32 @getint();
    i32* %29 = getelementptr &([100 * i32]* %21)[i64 0][i32 %27];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = icmp sgt i32 %10, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b2;
  ^while.header5:
    i32 %32 = phi [^while.header4, i32 0] [^b5, i32 %38];
    i1 %33 = icmp sgt i32 %10, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.header7, ^b3;
  ^while.header6:
    i32 %34 = phi [^while.header4, i32 0] [^b6, i32 %41];
    i1 %35 = icmp sgt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.header8, ^b4;
  ^b3:
    i32 %36 = add i32 %22, i32 1;
    ubr ^while.header4;
  ^while.header7:
    cbr i1 %2(prob = 0.97), ^indirect, ^b5;
  ^while.header8:
    [100 * i32]* %37 = getelementptr &([100 * [100 * i32]]* %6)[i64 0][i32 %34];
    cbr i1 %11(prob = 0.97), ^while.body2, ^b6;
  ^b4:
    ret i32 0;
  ^b5:
    i32 %38 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^indirect:
    i32* %39 = getelementptr &([100 * i32]* %24)[i64 0][i32 %32];
    i32 %40 = load i32* %39;
    cbr i1 %3(prob = 0.89), ^while.body3, ^while.body4;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %41 = add i32 %34, i32 1;
    ubr ^while.header6;
  ^while.body2:
    i32 %42 = phi [^while.header8, i32 0] [^while.body2, i32 %45];
    i32* %43 = getelementptr &([100 * i32]* %37)[i64 0][i32 %42];
    i32 %44 = load i32* %43;
    call (i32) -> void @putint(i32 %44);
    call (i32) -> void @putch(i32 32);
    i32 %45 = add i32 %42, i32 1;
    i1 %46 = icmp sgt i32 %10, i32 %45;
    cbr i1 %46(prob = 0.97), ^while.body2, ^b6;
  ^while.body3:
    i32 %47 = phi [^indirect, i32 0] [^while.body3, i32 %79];
    i32 %48 = phi [^indirect, i32 %40] [^while.body3, i32 %76];
    [100 * i32]* %49 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %47];
    i32* %50 = getelementptr &([100 * i32]* %49)[i64 0][i32 %32];
    i32* %51 = getelementptr &([100 * i32]* %25)[i64 0][i32 %47];
    i32 %52 = load i32* %51;
    i32 %53 = load i32* %50;
    [100 * i32]* %54 = getelementptr &([100 * i32]* %49)[i64 1];
    i32* %55 = getelementptr &([100 * i32]* %54)[i64 0][i32 %32];
    i32* %56 = getelementptr &(i32* %51)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = load i32* %55;
    i32 %59 = mul i32 %57, i32 %58;
    i32 %60 = mul i32 %52, i32 %53;
    i32 %61 = add i32 %59, i32 %60;
    [100 * i32]* %62 = getelementptr &([100 * i32]* %49)[i64 2];
    i32* %63 = getelementptr &([100 * i32]* %62)[i64 0][i32 %32];
    i32* %64 = getelementptr &(i32* %51)[i64 2];
    i32 %65 = load i32* %64;
    i32 %66 = load i32* %63;
    i32 %67 = mul i32 %65, i32 %66;
    i32 %68 = add i32 %61, i32 %67;
    [100 * i32]* %69 = getelementptr &([100 * i32]* %49)[i64 3];
    i32* %70 = getelementptr &([100 * i32]* %69)[i64 0][i32 %32];
    i32* %71 = getelementptr &(i32* %51)[i64 3];
    i32 %72 = load i32* %71;
    i32 %73 = load i32* %70;
    i32 %74 = mul i32 %72, i32 %73;
    i32 %75 = add i32 %68, i32 %74;
    i32 %76 = add i32 %48, i32 %75;
    i32 %77 = add i32 %47, i32 8;
    i1 %78 = icmp sgt i32 %1, i32 %77;
    i32 %79 = add i32 %47, i32 4;
    cbr i1 %78(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %80 = phi [^indirect, i32 %40] [^while.body3, i32 %76] [^while.body4, i32 %88];
    i32 %81 = phi [^indirect, i32 0] [^while.body3, i32 %79] [^while.body4, i32 %89];
    [100 * i32]* %82 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %81];
    i32* %83 = getelementptr &([100 * i32]* %82)[i64 0][i32 %32];
    i32* %84 = getelementptr &([100 * i32]* %25)[i64 0][i32 %81];
    i32 %85 = load i32* %84;
    i32 %86 = load i32* %83;
    i32 %87 = mul i32 %85, i32 %86;
    i32 %88 = add i32 %80, i32 %87;
    i32 %89 = add i32 %81, i32 1;
    i1 %90 = icmp sgt i32 %1, i32 %89;
    cbr i1 %90(prob = 0.75), ^while.body4, ^postbody;
  ^postbody:
    store i32* %39 with i32 %88;
    ubr ^b5;
}
