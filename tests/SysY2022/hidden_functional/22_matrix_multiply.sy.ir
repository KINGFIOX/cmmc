internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i1 %3 = scmp gt i32 %2, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %11];
    cbr i1 %3(prob = 0.97), ^indirect, ^b1;
^b:
    i32 %5 = call () -> i32 @getint();
    i1 %6 = scmp gt i32 %5, i32 0;
    i32 %7 = call () -> i32 @getint();
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body1, ^entry1;
^indirect:
    [100 * i32]* %9 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %4];
    ubr ^while.body2;
^while.body1:
    i32 %10 = phi [^b, i32 0] [^b2, i32 %19];
    cbr i1 %8(prob = 0.97), ^indirect1, ^b2;
^b1:
    i32 %11 = add i32 %4, i32 1;
    i1 %12 = scmp lt i32 %11, i32 %0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^entry1:
    cbr i1 %1(prob = 0.97), ^while.body3, ^b3;
^indirect1:
    [100 * i32]* %13 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %10];
    ubr ^while.body4;
^while.body2:
    i32 %14 = phi [^indirect, i32 0] [^while.body2, i32 %15];
    i32 %15 = add i32 %14, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %2;
    i32* %17 = getelementptr &([100 * i32]* %9)[i64 0][i32 %14];
    i32 %18 = call () -> i32 @getint();
    store i32* %17 with i32 %18;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b1;
^b2:
    i32 %19 = add i32 %10, i32 1;
    i1 %20 = scmp lt i32 %19, i32 %5;
    cbr i1 %20(prob = 0.97), ^while.body1, ^entry1;
^while.body3:
    i32 %21 = phi [^entry1, i32 0] [^b4, i32 %30];
    [100 * i32]* %22 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %21];
    [100 * i32]* %23 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %21];
    cbr i1 %8(prob = 0.97), ^while.body5, ^b4;
^b3:
    cbr i1 %1(prob = 0.97), ^while.body6, ^b5;
^while.body4:
    i32 %24 = phi [^indirect1, i32 0] [^while.body4, i32 %25];
    i32 %25 = add i32 %24, i32 1;
    i1 %26 = scmp lt i32 %25, i32 %7;
    i32* %27 = getelementptr &([100 * i32]* %13)[i64 0][i32 %24];
    i32 %28 = call () -> i32 @getint();
    store i32* %27 with i32 %28;
    cbr i1 %26(prob = 0.97), ^while.body4, ^b2;
^while.body5:
    i32 %29 = phi [^while.body3, i32 0] [^b6, i32 %35];
    cbr i1 %3(prob = 0.97), ^indirect2, ^b6;
^b4:
    i32 %30 = add i32 %21, i32 1;
    i1 %31 = scmp lt i32 %30, i32 %0;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b3;
^while.body6:
    i32 %32 = phi [^b3, i32 0] [^b7, i32 %37];
    cbr i1 %8(prob = 0.97), ^indirect3, ^b7;
^b5:
    ret i32 0;
^indirect2:
    i32* %33 = getelementptr &([100 * i32]* %22)[i64 0][i32 %29];
    ubr ^while.body7;
^indirect3:
    [100 * i32]* %34 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %32];
    ubr ^while.body8;
^b6:
    i32 %35 = add i32 %29, i32 1;
    i1 %36 = scmp lt i32 %35, i32 %7;
    cbr i1 %36(prob = 0.97), ^while.body5, ^b4;
^b7:
    i32 %37 = add i32 %32, i32 1;
    i1 %38 = scmp lt i32 %37, i32 %0;
    call (i32) -> void @putch(i32 10);
    cbr i1 %38(prob = 0.97), ^while.body6, ^b5;
^while.body7:
    i32 %39 = phi [^indirect2, i32 0] [^while.body7, i32 %41];
    i32 %40 = load i32* %33;
    i32 %41 = add i32 %39, i32 1;
    i1 %42 = scmp lt i32 %41, i32 %2;
    i32* %43 = getelementptr &([100 * i32]* %23)[i64 0][i32 %39];
    i32 %44 = load i32* %43;
    [100 * i32]* %45 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %39];
    i32* %46 = getelementptr &([100 * i32]* %45)[i64 0][i32 %29];
    i32 %47 = load i32* %46;
    i32 %48 = mul i32 %44, i32 %47;
    i32 %49 = add i32 %40, i32 %48;
    store i32* %33 with i32 %49;
    cbr i1 %42(prob = 0.97), ^while.body7, ^b6;
^while.body8:
    i32 %50 = phi [^indirect3, i32 0] [^while.body8, i32 %51];
    i32 %51 = add i32 %50, i32 1;
    i1 %52 = scmp lt i32 %51, i32 %7;
    i32* %53 = getelementptr &([100 * i32]* %34)[i64 0][i32 %50];
    i32 %54 = load i32* %53;
    call (i32) -> void @putint(i32 %54);
    call (i32) -> void @putch(i32 32);
    cbr i1 %52(prob = 0.97), ^while.body8, ^b7;
}
