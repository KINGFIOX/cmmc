internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %1, i32 0;
    ubr ^while.header;
^while.header:
    i32 %3 = phi [^entry, i32 0] [^b1, i32 %9];
    i1 %4 = scmp lt i32 %3, i32 %0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^b:
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i1 %7 = scmp gt i32 %6, i32 0;
    ubr ^while.header1;
^while.body:
    cbr i1 %2(prob = 0.97), ^indirect, ^b1;
^indirect:
    [100 * i32]* %8 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %3];
    ubr ^while.body1;
^b1:
    i32 %9 = add i32 %3, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %10 = phi [^b, i32 0] [^b2, i32 %22];
    i1 %11 = scmp lt i32 %10, i32 %5;
    cbr i1 %11(prob = 0.97), ^while.body2, ^while.header2;
^while.body1:
    i32 %12 = phi [^indirect, i32 0] [^while.body1, i32 %15];
    i32* %13 = getelementptr &([100 * i32]* %8)[i64 0][i32 %12];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %1;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b1;
^while.body2:
    cbr i1 %7(prob = 0.97), ^indirect1, ^b2;
^while.header2:
    i32 %17 = phi [^while.header1, i32 0] [^b3, i32 %32];
    i1 %18 = scmp lt i32 %17, i32 %0;
    [100 * i32]* %19 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %17];
    [100 * i32]* %20 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %17];
    cbr i1 %18(prob = 0.97), ^while.header3, ^while.header4;
^indirect1:
    [100 * i32]* %21 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %10];
    ubr ^while.body3;
^b2:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header1;
^while.header3:
    i32 %23 = phi [^while.header2, i32 0] [^b5, i32 %34];
    i1 %24 = scmp lt i32 %23, i32 %6;
    cbr i1 %24(prob = 0.97), ^while.body4, ^b3;
^while.header4:
    i32 %25 = phi [^while.header2, i32 0] [^b6, i32 %36];
    i1 %26 = scmp lt i32 %25, i32 %0;
    cbr i1 %26(prob = 0.97), ^while.body5, ^b4;
^while.body3:
    i32 %27 = phi [^indirect1, i32 0] [^while.body3, i32 %30];
    i32* %28 = getelementptr &([100 * i32]* %21)[i64 0][i32 %27];
    i32 %29 = call () -> i32 @getint();
    store i32* %28 with i32 %29;
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = scmp lt i32 %30, i32 %6;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b2;
^b3:
    i32 %32 = add i32 %17, i32 1;
    ubr ^while.header2;
^while.body4:
    cbr i1 %2(prob = 0.97), ^indirect2, ^b5;
^while.body5:
    cbr i1 %7(prob = 0.97), ^indirect3, ^b6;
^b4:
    ret i32 0;
^indirect2:
    i32* %33 = getelementptr &([100 * i32]* %19)[i64 0][i32 %23];
    ubr ^while.body6;
^b5:
    i32 %34 = add i32 %23, i32 1;
    ubr ^while.header3;
^indirect3:
    [100 * i32]* %35 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %25];
    ubr ^while.body7;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %36 = add i32 %25, i32 1;
    ubr ^while.header4;
^while.body6:
    i32 %37 = phi [^indirect2, i32 0] [^while.body6, i32 %46];
    i32 %38 = load i32* %33;
    i32* %39 = getelementptr &([100 * i32]* %20)[i64 0][i32 %37];
    i32 %40 = load i32* %39;
    [100 * i32]* %41 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %37];
    i32* %42 = getelementptr &([100 * i32]* %41)[i64 0][i32 %23];
    i32 %43 = load i32* %42;
    i32 %44 = mul i32 %40, i32 %43;
    i32 %45 = add i32 %38, i32 %44;
    store i32* %33 with i32 %45;
    i32 %46 = add i32 %37, i32 1;
    i1 %47 = scmp lt i32 %46, i32 %1;
    cbr i1 %47(prob = 0.97), ^while.body6, ^b5;
^while.body7:
    i32 %48 = phi [^indirect3, i32 0] [^while.body7, i32 %51];
    i32* %49 = getelementptr &([100 * i32]* %35)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    call (i32) -> void @putint(i32 %50);
    call (i32) -> void @putch(i32 32);
    i32 %51 = add i32 %48, i32 1;
    i1 %52 = scmp lt i32 %51, i32 %6;
    cbr i1 %52(prob = 0.97), ^while.body7, ^b6;
}
