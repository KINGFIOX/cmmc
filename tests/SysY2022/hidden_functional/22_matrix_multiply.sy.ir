internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a { Flexible };
internal [100 * [100 * i32]]* @b { Flexible };
internal [100 * [100 * i32]]* @res { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    [100 * [100 * i32]]* %3 = ptrcast [100 * [100 * i32]]* @a to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %4 = ptrcast [100 * [100 * i32]]* @b to [100 * [100 * i32]]*;
    [100 * [100 * i32]]* %5 = ptrcast [100 * [100 * i32]]* @res to [100 * [100 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %12];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.header1, ^b;
  ^b:
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i1 %10 = icmp sgt i32 %9, i32 0;
    ubr ^while.header2;
  ^while.header1:
    [100 * i32]* %11 = getelementptr &([100 * [100 * i32]]* %3)[i64 0][i32 %6];
    cbr i1 %2(prob = 0.97), ^while.body, ^b1;
  ^b1:
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %13 = phi [^while.header1, i32 0] [^while.body, i32 %16];
    i32 %14 = call () -> i32 @getint();
    i32* %15 = getelementptr &([100 * i32]* %11)[i64 0][i32 %13];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %13, i32 1;
    i1 %17 = icmp sgt i32 %1, i32 %16;
    cbr i1 %17(prob = 0.97), ^while.body, ^b1;
  ^while.header2:
    i32 %18 = phi [^b, i32 0] [^b2, i32 %25];
    i1 %19 = icmp sgt i32 %8, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.header3, ^while.header4;
  ^while.header3:
    [100 * i32]* %20 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %18];
    cbr i1 %10(prob = 0.97), ^while.body1, ^b2;
  ^while.header4:
    i32 %21 = phi [^while.header2, i32 0] [^b3, i32 %35];
    i1 %22 = icmp sgt i32 %0, i32 %21;
    [100 * i32]* %23 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %21];
    [100 * i32]* %24 = getelementptr &([100 * [100 * i32]]* %3)[i64 0][i32 %21];
    cbr i1 %22(prob = 0.97), ^while.header5, ^while.header6;
  ^b2:
    i32 %25 = add i32 %18, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %26 = phi [^while.header3, i32 0] [^while.body1, i32 %29];
    i32 %27 = call () -> i32 @getint();
    i32* %28 = getelementptr &([100 * i32]* %20)[i64 0][i32 %26];
    store i32* %28 with i32 %27;
    i32 %29 = add i32 %26, i32 1;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b2;
  ^while.header5:
    i32 %31 = phi [^while.header4, i32 0] [^b5, i32 %39];
    i1 %32 = icmp sgt i32 %9, i32 %31;
    cbr i1 %32(prob = 0.97), ^while.header7, ^b3;
  ^while.header6:
    i32 %33 = phi [^while.header4, i32 0] [^b6, i32 %40];
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.97), ^while.header8, ^b4;
  ^b3:
    i32 %35 = add i32 %21, i32 1;
    ubr ^while.header4;
  ^while.header7:
    cbr i1 %2(prob = 0.97), ^indirect, ^b5;
  ^while.header8:
    [100 * i32]* %36 = getelementptr &([100 * [100 * i32]]* %5)[i64 0][i32 %33];
    cbr i1 %10(prob = 0.97), ^while.body2, ^b6;
  ^b4:
    ret i32 0;
  ^indirect:
    i32* %37 = getelementptr &([100 * i32]* %23)[i64 0][i32 %31];
    i32 %38 = load i32* %37;
    ubr ^super.header;
  ^b5:
    i32 %39 = add i32 %31, i32 1;
    ubr ^while.header5;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %40 = add i32 %33, i32 1;
    ubr ^while.header6;
  ^while.body2:
    i32 %41 = phi [^while.header8, i32 0] [^while.body2, i32 %44];
    i32* %42 = getelementptr &([100 * i32]* %36)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    call (i32) -> void @putint(i32 %43);
    call (i32) -> void @putch(i32 32);
    i32 %44 = add i32 %41, i32 1;
    i1 %45 = icmp sgt i32 %9, i32 %44;
    cbr i1 %45(prob = 0.97), ^while.body2, ^b6;
  ^super.header:
    i32 %46 = phi [^indirect, i32 %38] [^while.body3, i32 %77];
    i32 %47 = phi [^indirect, i32 0] [^while.body3, i32 %48];
    i32 %48 = add i32 %47, i32 4;
    i1 %49 = icmp sgt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body3:
    [100 * i32]* %50 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %47];
    i32* %51 = getelementptr &([100 * i32]* %50)[i64 0][i32 %31];
    i32* %52 = getelementptr &([100 * i32]* %24)[i64 0][i32 %47];
    i32 %53 = load i32* %52;
    i32 %54 = load i32* %51;
    [100 * i32]* %55 = getelementptr &([100 * i32]* %50)[i64 1];
    i32* %56 = getelementptr &([100 * i32]* %55)[i64 0][i32 %31];
    i32* %57 = getelementptr &(i32* %52)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = load i32* %56;
    i32 %60 = mul i32 %58, i32 %59;
    i32 %61 = mul i32 %53, i32 %54;
    i32 %62 = add i32 %46, i32 %61;
    i32 %63 = add i32 %60, i32 %62;
    [100 * i32]* %64 = getelementptr &([100 * i32]* %50)[i64 2];
    i32* %65 = getelementptr &([100 * i32]* %64)[i64 0][i32 %31];
    i32* %66 = getelementptr &(i32* %52)[i64 2];
    i32 %67 = load i32* %66;
    i32 %68 = load i32* %65;
    i32 %69 = mul i32 %67, i32 %68;
    i32 %70 = add i32 %63, i32 %69;
    [100 * i32]* %71 = getelementptr &([100 * i32]* %50)[i64 3];
    i32* %72 = getelementptr &([100 * i32]* %71)[i64 0][i32 %31];
    i32* %73 = getelementptr &(i32* %52)[i64 3];
    i32 %74 = load i32* %73;
    i32 %75 = load i32* %72;
    i32 %76 = mul i32 %74, i32 %75;
    i32 %77 = add i32 %70, i32 %76;
    ubr ^super.header;
  ^while.body4:
    i32 %78 = phi [^super.header, i32 %46] [^while.body4, i32 %86];
    i32 %79 = phi [^super.header, i32 %47] [^while.body4, i32 %87];
    [100 * i32]* %80 = getelementptr &([100 * [100 * i32]]* %4)[i64 0][i32 %79];
    i32* %81 = getelementptr &([100 * i32]* %80)[i64 0][i32 %31];
    i32* %82 = getelementptr &([100 * i32]* %24)[i64 0][i32 %79];
    i32 %83 = load i32* %82;
    i32 %84 = load i32* %81;
    i32 %85 = mul i32 %83, i32 %84;
    i32 %86 = add i32 %78, i32 %85;
    i32 %87 = add i32 %79, i32 1;
    i1 %88 = icmp sgt i32 %1, i32 %87;
    cbr i1 %88(prob = 0.75), ^while.body4, ^postbody;
  ^postbody:
    store i32* %37 with i32 %86;
    ubr ^b5;
}
