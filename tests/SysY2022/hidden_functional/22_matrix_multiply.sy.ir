internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b1, i32 %20] [^entry, i32 0];
    i32 %3 = phi [^b1, i32 %12] [^entry, i32 %1];
    i32 %4 = phi [^b1, i32 %13] [^entry, i32 %0];
    i32 %5 = phi [^b1, i32 %13] [^entry, i32 %0];
    i32 %6 = phi [^b1, i32 %20] [^entry, i32 0];
    i1 %7 = scmp lt i32 %6, i32 %5;
    cbr i1 %7(prob = 0.97), ^while.header1, ^b;
^b:
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    ubr ^while.header2;
^while.header1:
    i32 %10 = phi [^while.header, i32 %2] [^while.body, i32 %10];
    i32 %11 = phi [^while.header, i32 0] [^while.body, i32 %19];
    i32 %12 = phi [^while.header, i32 %3] [^while.body, i32 %12];
    i32 %13 = phi [^while.header, i32 %4] [^while.body, i32 %13];
    i32 %14 = phi [^while.header, i32 0] [^while.body, i32 %19];
    i1 %15 = scmp lt i32 %14, i32 %12;
    cbr i1 %15(prob = 0.97), ^while.body, ^b1;
^while.body:
    [100 * i32]* %16 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %10];
    i32* %17 = getelementptr &([100 * i32]* %16)[i64 0][i32 %11];
    i32 %18 = call () -> i32 @getint();
    store i32* %17 with i32 %18;
    i32 %19 = add i32 %11, i32 1;
    ubr ^while.header1;
^b1:
    i32 %20 = add i32 %10, i32 1;
    ubr ^while.header;
^while.header2:
    i32 %21 = phi [^b2, i32 %47] [^b, i32 0];
    i32 %22 = phi [^b2, i32 %31] [^b, i32 %3];
    i32 %23 = phi [^b2, i32 %32] [^b, i32 %4];
    i32 %24 = phi [^b2, i32 %33] [^b, i32 %9];
    i32 %25 = phi [^b2, i32 %34] [^b, i32 %8];
    i32 %26 = phi [^b2, i32 %34] [^b, i32 %8];
    i32 %27 = phi [^b2, i32 %47] [^b, i32 0];
    i1 %28 = scmp lt i32 %27, i32 %26;
    cbr i1 %28(prob = 0.97), ^while.header3, ^while.header4;
^while.header3:
    i32 %29 = phi [^while.header2, i32 %21] [^while.body1, i32 %29];
    i32 %30 = phi [^while.header2, i32 0] [^while.body1, i32 %46];
    i32 %31 = phi [^while.header2, i32 %22] [^while.body1, i32 %31];
    i32 %32 = phi [^while.header2, i32 %23] [^while.body1, i32 %32];
    i32 %33 = phi [^while.header2, i32 %24] [^while.body1, i32 %33];
    i32 %34 = phi [^while.header2, i32 %25] [^while.body1, i32 %34];
    i32 %35 = phi [^while.header2, i32 0] [^while.body1, i32 %46];
    i1 %36 = scmp lt i32 %35, i32 %33;
    cbr i1 %36(prob = 0.97), ^while.body1, ^b2;
^while.header4:
    i32 %37 = phi [^while.header2, i32 %22] [^b3, i32 %48];
    i32 %38 = phi [^while.header2, i32 %23] [^b3, i32 %49];
    i32 %39 = phi [^while.header2, i32 %24] [^b3, i32 %50];
    i32 %40 = phi [^while.header2, i32 0] [^b3, i32 %60];
    i32 %41 = phi [^while.header2, i32 0] [^b3, i32 %60];
    i1 %42 = scmp lt i32 %41, i32 %38;
    cbr i1 %42(prob = 0.97), ^while.header5, ^while.header6;
^while.body1:
    [100 * i32]* %43 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %29];
    i32* %44 = getelementptr &([100 * i32]* %43)[i64 0][i32 %30];
    i32 %45 = call () -> i32 @getint();
    store i32* %44 with i32 %45;
    i32 %46 = add i32 %30, i32 1;
    ubr ^while.header3;
^b2:
    i32 %47 = add i32 %29, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %48 = phi [^while.header4, i32 %37] [^b5, i32 %61];
    i32 %49 = phi [^while.header4, i32 %38] [^b5, i32 %62];
    i32 %50 = phi [^while.header4, i32 %39] [^b5, i32 %63];
    i32 %51 = phi [^while.header4, i32 0] [^b5, i32 %87];
    i32 %52 = phi [^while.header4, i32 %40] [^b5, i32 %66];
    i32 %53 = phi [^while.header4, i32 0] [^b5, i32 %87];
    i1 %54 = scmp lt i32 %53, i32 %50;
    cbr i1 %54(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %55 = phi [^while.header4, i32 0] [^b6, i32 %92];
    i32 %56 = phi [^while.header4, i32 %38] [^b6, i32 %71];
    i32 %57 = phi [^while.header4, i32 %39] [^b6, i32 %72];
    i32 %58 = phi [^while.header4, i32 0] [^b6, i32 %92];
    i1 %59 = scmp lt i32 %58, i32 %56;
    cbr i1 %59(prob = 0.97), ^while.header8, ^b4;
^b3:
    i32 %60 = add i32 %52, i32 1;
    ubr ^while.header4;
^while.header7:
    i32 %61 = phi [^while.header5, i32 %48] [^while.body2, i32 %61];
    i32 %62 = phi [^while.header5, i32 %49] [^while.body2, i32 %62];
    i32 %63 = phi [^while.header5, i32 %50] [^while.body2, i32 %63];
    i32 %64 = phi [^while.header5, i32 0] [^while.body2, i32 %86];
    i32 %65 = phi [^while.header5, i32 %51] [^while.body2, i32 %65];
    i32 %66 = phi [^while.header5, i32 %52] [^while.body2, i32 %66];
    i32 %67 = phi [^while.header5, i32 0] [^while.body2, i32 %86];
    i1 %68 = scmp lt i32 %67, i32 %61;
    cbr i1 %68(prob = 0.97), ^while.body2, ^b5;
^while.header8:
    i32 %69 = phi [^while.header6, i32 %55] [^while.body3, i32 %69];
    i32 %70 = phi [^while.header6, i32 0] [^while.body3, i32 %91];
    i32 %71 = phi [^while.header6, i32 %56] [^while.body3, i32 %71];
    i32 %72 = phi [^while.header6, i32 %57] [^while.body3, i32 %72];
    i32 %73 = phi [^while.header6, i32 0] [^while.body3, i32 %91];
    i1 %74 = scmp lt i32 %73, i32 %72;
    cbr i1 %74(prob = 0.97), ^while.body3, ^b6;
^b4:
    ret i32 0;
^while.body2:
    [100 * i32]* %75 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %66];
    i32* %76 = getelementptr &([100 * i32]* %75)[i64 0][i32 %65];
    i32 %77 = load i32* %76;
    [100 * i32]* %78 = getelementptr &([100 * [100 * i32]]* @a)[i64 0][i32 %66];
    i32* %79 = getelementptr &([100 * i32]* %78)[i64 0][i32 %64];
    i32 %80 = load i32* %79;
    [100 * i32]* %81 = getelementptr &([100 * [100 * i32]]* @b)[i64 0][i32 %64];
    i32* %82 = getelementptr &([100 * i32]* %81)[i64 0][i32 %65];
    i32 %83 = load i32* %82;
    i32 %84 = mul i32 %80, i32 %83;
    i32 %85 = add i32 %77, i32 %84;
    store i32* %76 with i32 %85;
    i32 %86 = add i32 %64, i32 1;
    ubr ^while.header7;
^b5:
    i32 %87 = add i32 %65, i32 1;
    ubr ^while.header5;
^while.body3:
    [100 * i32]* %88 = getelementptr &([100 * [100 * i32]]* @res)[i64 0][i32 %69];
    i32* %89 = getelementptr &([100 * i32]* %88)[i64 0][i32 %70];
    i32 %90 = load i32* %89;
    call (i32) -> void @putint(i32 %90);
    call (i32) -> void @putch(i32 32);
    i32 %91 = add i32 %70, i32 1;
    ubr ^while.header8;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %92 = add i32 %69, i32 1;
    ubr ^while.header6;
}
