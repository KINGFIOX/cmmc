internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100 * [100 * i32]]* @a;
internal [100 * [100 * i32]]* @b;
internal [100 * [100 * i32]]* @res;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body i32 %1, i32 %0, i32 0 ], [ ^b i32 %1, i32 %0 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2, i32 0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg, i32 %arg1):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body2 i32 %arg, i32 %arg1, i32 %1, i32 %0, i32 0 ], [ ^entry1 i32 %arg, i32 %arg1, i32 %1 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [100 * i32]* %0 = getelementptr &([100 * [100 * i32]]* @a)[i32 0][i32 %arg2];
    i32* %1 = getelementptr &([100 * i32]* %0)[i32 0][i32 %arg3];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg;
    cbr i1 %4, [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2, i32 %3 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0 ], [ ^b2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body i32 %arg, i32 %arg1, i32 %0 ], [ ^b i32 %arg, i32 %arg1 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %i = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body4 i32* %i, i32 %arg, i32 %arg1, i32 %arg2, i32 0 ], [ ^b3 i32* %i, i32 %arg1, i32 %arg2 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    [100 * i32]* %0 = getelementptr &([100 * [100 * i32]]* @b)[i32 0][i32 %arg4];
    i32* %1 = getelementptr &([100 * i32]* %0)[i32 0][i32 %arg5];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg5, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4, [ ^while.body3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %3 ], [ ^b2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0 ], [ ^entry1 i32 %arg, i32 %arg1, i32 %arg2 ];
^while.body4(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32* %j = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body5 i32* %j, i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0 ], [ ^b4 i32* %j, i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b3(i32* %arg, i32 %arg1, i32 %arg2):
    free i32* %arg;
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body6 i32 %arg1, i32 %arg2, i32 0 ], [ ^b5 ];
^while.body5(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %k = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body7 i32* %k, i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 0 ], [ ^b6 i32* %arg1, i32* %k, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg5, i32 1;
    free i32* %arg;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body4 i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0 ], [ ^b3 i32* %arg1, i32 %arg3, i32 %arg4 ];
^while.body6(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body8 i32 %arg, i32 %arg1, i32 %arg2, i32 0 ], [ ^b7 i32 %arg, i32 %arg1, i32 %arg2 ];
^b5():
    ret i32 0;
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    [100 * i32]* %0 = getelementptr &([100 * [100 * i32]]* @res)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([100 * i32]* %0)[i32 0][i32 %arg7];
    i32 %2 = load i32* %1;
    [100 * i32]* %3 = getelementptr &([100 * [100 * i32]]* @a)[i32 0][i32 %arg6];
    i32* %4 = getelementptr &([100 * i32]* %3)[i32 0][i32 %arg8];
    i32 %5 = load i32* %4;
    [100 * i32]* %6 = getelementptr &([100 * [100 * i32]]* @b)[i32 0][i32 %arg8];
    i32* %7 = getelementptr &([100 * i32]* %6)[i32 0][i32 %arg7];
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %2, i32 %9;
    store i32* %1 with i32 %10;
    i32 %11 = add i32 %arg8, i32 1;
    i1 %12 = scmp lt i32 %11, i32 %arg3;
    cbr i1 %12, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %11 ], [ ^b6 i32* %arg2, i32* %arg, i32* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    free i32* %arg1;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1, [ ^while.body5 i32* %arg2, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0 ], [ ^b4 i32* %arg2, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^while.body8(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [100 * i32]* %0 = getelementptr &([100 * [100 * i32]]* @res)[i32 0][i32 %arg2];
    i32* %1 = getelementptr &([100 * i32]* %0)[i32 0][i32 %arg3];
    i32 %2 = load i32* %1;
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 32);
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg1;
    cbr i1 %4, [ ^while.body8 i32 %arg, i32 %arg1, i32 %arg2, i32 %3 ], [ ^b7 i32 %arg, i32 %arg1, i32 %arg2 ];
^b7(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1, [ ^while.body6 i32 %arg, i32 %arg1, i32 %0 ], [ ^b5 ];
}
