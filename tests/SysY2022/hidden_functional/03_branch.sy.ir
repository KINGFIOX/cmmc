internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 1;
    store i32* %b with i32 2;
    store i32* %c with i32 3;
    store i32* %d with i32 4;
    store i32* %e with i32 5;
    store i32* %f with i32 6;
    i1 %0 = scmp lt i32 5, i32 6;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^b1, ^b2;
^b1:
    i1 %3 = scmp neq i32 4, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    ubr ^b2;
^b2:
    i1 %6 = phi [^b1, i1 %5] [^entry, i1 false];
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i1 %9 = scmp neq i32 5, i32 0;
    cbr i1 %9(prob = 0.5), ^b4, ^b3;
^if.else:
    ret i32 1;
^b3:
    i1 %10 = scmp neq i32 1, i32 0;
    i1 %11 = xor i1 %10, i1 true;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = add i32 %12, i32 0;
    i1 %14 = scmp neq i32 %13, i32 0;
    ubr ^b4;
^b4:
    i1 %15 = phi [^b3, i1 %14] [^if.then, i1 true];
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i1 %18 = scmp eq i32 3, i32 2;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^b5, ^b6;
^if.else1:
    ret i32 2;
^b5:
    i1 %21 = scmp gt i32 9, i32 2;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    ubr ^b6;
^b6:
    i1 %24 = phi [^b5, i1 %23] [^if.then1, i1 false];
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^if.else2:
    i1 %27 = scmp neq i32 0, i32 0;
    cbr i1 %27(prob = 0.5), ^b7, ^b8;
^if.then2:
    ret i32 3;
^b7:
    i1 %28 = scmp neq i32 5, i32 0;
    ubr ^b8;
^b8:
    i1 %29 = phi [^b7, i1 %28] [^if.else2, i1 false];
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^if.then3, ^if.else3;
^if.else3:
    i1 %32 = scmp ge i32 3, i32 2;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then3:
    ret i32 4;
^if.then4:
    i1 %35 = scmp ge i32 -1, i32 0;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^b10, ^b9;
^if.else4:
    ret i32 5;
^b9:
    i1 %38 = scmp gt i32 4, i32 4;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    ubr ^b10;
^b10:
    i1 %41 = phi [^b9, i1 %40] [^if.then4, i1 true];
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then5, ^if.else5;
^if.else5:
    i1 %44 = scmp neq i32 3, i32 6;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then6, ^if.else6;
^if.then5:
    ret i32 6;
^if.then6:
    i1 %47 = scmp gt i32 22, i32 10;
    i32 %48 = zext i1 %47 to i32;
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then7, ^if.else7;
^if.else6:
    ret i32 7;
^if.then7:
    i1 %50 = scmp neq i32 6, i32 0;
    i1 %51 = xor i1 %50, i1 true;
    i32 %52 = zext i1 %51 to i32;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then8, ^if.else8;
^if.else7:
    ret i32 8;
^if.then8:
    ret i32 9;
^if.else8:
    ret i32 10;
^b11:
    unreachable;
^b12:
    ubr ^b11;
^b13:
    ubr ^b12;
^b14:
    ubr ^b13;
^b15:
    ubr ^b14;
^b16:
    ubr ^b15;
^b17:
    ubr ^b16;
^b18:
    ubr ^b17;
^b19:
    ubr ^b18;
}
