internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
  ^entry:
    [2 * i32]* %0 = alloc [2 * i32], align 8;
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    store i32* %1 with i32 -1;
    i32* %2 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call (i32*) -> i32 @getarray(i32* %1);
    i1 %6 = icmp neq i32 %4, i32 0;
    i1 %7 = icmp eq i32 %3, i32 0;
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^if.then2, i32 %31];
    cbr i1 %6(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = load i32* %1;
    i1 %10 = icmp slt i32 %9, i32 5;
    cbr i1 %10(prob = 0.984615), ^while.body1, ^entry1;
  ^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body1:
    i32 %11 = phi [^while.body, i32 %9] [^if.then4, i32 %40];
    i32 %12 = phi [^while.body, i32 %9] [^if.then4, i32 %49];
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putint(i32 %4);
    call (i32) -> void @putint(i32 %12);
    cbr i1 %7(prob = 0.5), ^indirect, ^indirect1;
  ^entry1:
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i32 %13 = load i32* %1;
    ubr ^if.then1;
  ^indirect1:
    i32 %14 = load i32* %1;
    ubr ^if.else1;
  ^if.then:
    i32 %15 = phi [^entry1, i32 %8] [^if.else, i32 %21];
    i32 %16 = add i32 %15, i32 1;
    cbr i1 %7(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else:
    i32 %17 = phi [^entry1, i32 %8] [^if.else, i32 %21];
    i32 %18 = phi [^entry1, i32 %3] [^if.else, i32 %19];
    i32 %19 = add i32 %18, i32 -1;
    i1 %20 = icmp neq i32 %19, i32 0;
    i32 %21 = mul i32 %17, i32 2;
    cbr i1 %20(prob = 0.5), ^if.else, ^if.then;
  ^if.then1:
    i32 %22 = phi [^indirect, i32 %13] [^if.else1, i32 %28];
    i32 %23 = add i32 %4, i32 %22;
    store i32* %1 with i32 %23;
    cbr i1 %7(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %24 = phi [^indirect1, i32 %14] [^if.else1, i32 %28];
    i32 %25 = phi [^indirect1, i32 %3] [^if.else1, i32 %26];
    i32 %26 = add i32 %25, i32 -1;
    i1 %27 = icmp neq i32 %26, i32 0;
    i32 %28 = mul i32 %24, i32 2;
    cbr i1 %27(prob = 0.5), ^if.else1, ^if.then1;
  ^if.then2:
    i32 %29 = phi [^if.then, i32 %16] [^if.else2, i32 %38];
    i32 %30 = load i32* %1;
    i32 %31 = add i32 %29, i32 %30;
    i32 %32 = load i32* %2;
    i1 %33 = icmp eq i32 %31, i32 %32;
    cbr i1 %33(prob = 0.5), ^b, ^while.header;
  ^if.else2:
    i32 %34 = phi [^if.then, i32 %16] [^if.else2, i32 %38];
    i32 %35 = phi [^if.then, i32 %3] [^if.else2, i32 %36];
    i32 %36 = add i32 %35, i32 -1;
    i1 %37 = icmp neq i32 %36, i32 0;
    i32 %38 = mul i32 %34, i32 2;
    cbr i1 %37(prob = 0.5), ^if.else2, ^if.then2;
  ^if.then3:
    i32 %39 = phi [^if.then1, i32 %11] [^if.else3, i32 %45];
    i32 %40 = add i32 %4, i32 %39;
    cbr i1 %7(prob = 0.5), ^indirect2, ^indirect3;
  ^if.else3:
    i32 %41 = phi [^if.then1, i32 %11] [^if.else3, i32 %45];
    i32 %42 = phi [^if.then1, i32 %3] [^if.else3, i32 %43];
    i32 %43 = add i32 %42, i32 -1;
    i1 %44 = icmp neq i32 %43, i32 0;
    i32 %45 = mul i32 %41, i32 2;
    cbr i1 %44(prob = 0.5), ^if.else3, ^if.then3;
  ^indirect2:
    i32 %46 = load i32* %1;
    ubr ^if.then4;
  ^indirect3:
    i32 %47 = load i32* %1;
    ubr ^if.else4;
  ^if.then4:
    i32 %48 = phi [^indirect2, i32 %46] [^if.else4, i32 %55];
    i32 %49 = sub i32 %48, i32 %4;
    store i32* %1 with i32 %49;
    i1 %50 = icmp slt i32 %40, i32 5;
    cbr i1 %50(prob = 0.984615), ^while.body1, ^entry1;
  ^if.else4:
    i32 %51 = phi [^indirect3, i32 %47] [^if.else4, i32 %55];
    i32 %52 = phi [^indirect3, i32 %3] [^if.else4, i32 %53];
    i32 %53 = add i32 %52, i32 -1;
    i1 %54 = icmp neq i32 %53, i32 0;
    i32 %55 = mul i32 %51, i32 2;
    cbr i1 %54(prob = 0.5), ^if.else4, ^if.then4;
}
