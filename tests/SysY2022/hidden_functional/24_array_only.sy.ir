internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
  ^entry:
    [2 * i32]* %0 = alloc [2 * i32];
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    store i32* %1 with i32 -1;
    i32* %2 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call (i32*) -> i32 @getarray(i32* %1);
    i1 %6 = icmp neq i32 %4, i32 0;
    i1 %7 = icmp eq i32 %3, i32 0;
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^if.then2, i32 %30];
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = load i32* %1;
    i1 %10 = icmp slt i32 %9, i32 5;
    cbr i1 %10(prob = 0.97), ^while.body1, ^entry1;
  ^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body1:
    i32 %11 = phi [^while.body, i32 %9] [^if.then4, i32 %44];
    call (i32) -> void @putint(i32 %8);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putint(i32 %4);
    call (i32) -> void @putint(i32 %11);
    cbr i1 %7(prob = 0.5), ^indirect, ^indirect1;
  ^entry1:
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i32 %12 = load i32* %1;
    ubr ^if.then1;
  ^indirect1:
    i32 %13 = load i32* %1;
    ubr ^if.else1;
  ^if.then:
    i32 %14 = phi [^entry1, i32 %8] [^if.else, i32 %20];
    i32 %15 = add i32 %14, i32 1;
    cbr i1 %7(prob = 0.5), ^if.then2, ^if.else2;
  ^if.else:
    i32 %16 = phi [^entry1, i32 %8] [^if.else, i32 %20];
    i32 %17 = phi [^entry1, i32 %3] [^if.else, i32 %18];
    i32 %18 = add i32 %17, i32 -1;
    i1 %19 = icmp eq i32 %18, i32 0;
    i32 %20 = mul i32 %16, i32 2;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
  ^if.then1:
    i32 %21 = phi [^indirect, i32 %12] [^if.else1, i32 %27];
    i32 %22 = add i32 %4, i32 %21;
    store i32* %1 with i32 %22;
    cbr i1 %7(prob = 0.5), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %23 = phi [^indirect1, i32 %13] [^if.else1, i32 %27];
    i32 %24 = phi [^indirect1, i32 %3] [^if.else1, i32 %25];
    i32 %25 = add i32 %24, i32 -1;
    i1 %26 = icmp eq i32 %25, i32 0;
    i32 %27 = mul i32 %23, i32 2;
    cbr i1 %26(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then2:
    i32 %28 = phi [^if.then, i32 %15] [^if.else2, i32 %37];
    i32 %29 = load i32* %1;
    i32 %30 = add i32 %28, i32 %29;
    i32 %31 = load i32* %2;
    i1 %32 = icmp eq i32 %30, i32 %31;
    cbr i1 %32(prob = 0.5), ^b, ^while.header;
  ^if.else2:
    i32 %33 = phi [^if.then, i32 %15] [^if.else2, i32 %37];
    i32 %34 = phi [^if.then, i32 %3] [^if.else2, i32 %35];
    i32 %35 = add i32 %34, i32 -1;
    i1 %36 = icmp eq i32 %35, i32 0;
    i32 %37 = mul i32 %33, i32 2;
    cbr i1 %36(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then3:
    cbr i1 %7(prob = 0.5), ^indirect2, ^indirect3;
  ^if.else3:
    i32 %38 = phi [^if.then1, i32 %3] [^if.else3, i32 %39];
    i32 %39 = add i32 %38, i32 -1;
    i1 %40 = icmp eq i32 %39, i32 0;
    cbr i1 %40(prob = 0.5), ^if.then3, ^if.else3;
  ^indirect2:
    i32 %41 = load i32* %1;
    ubr ^if.then4;
  ^indirect3:
    i32 %42 = load i32* %1;
    ubr ^if.else4;
  ^if.then4:
    i32 %43 = phi [^indirect2, i32 %41] [^if.else4, i32 %49];
    i32 %44 = sub i32 %43, i32 %4;
    store i32* %1 with i32 %44;
    cbr i1 %10(prob = 0.97), ^while.body1, ^entry1;
  ^if.else4:
    i32 %45 = phi [^indirect3, i32 %42] [^if.else4, i32 %49];
    i32 %46 = phi [^indirect3, i32 %3] [^if.else4, i32 %47];
    i32 %47 = add i32 %46, i32 -1;
    i1 %48 = icmp eq i32 %47, i32 0;
    i32 %49 = mul i32 %45, i32 2;
    cbr i1 %48(prob = 0.5), ^if.then4, ^if.else4;
}
