internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    i32* %0 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 -1;
    i32* %1 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %1 with i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call (i32*) -> i32 @getarray(i32* %0);
    i1 %5 = scmp neq i32 %3, i32 0;
    i1 %6 = scmp eq i32 %2, i32 0;
    ubr ^while.header;
^while.header:
    i32 %7 = phi [^entry, i32 0] [^if.then2, i32 %30];
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %0;
    ubr ^while.header1;
^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header1:
    i32 %9 = phi [^while.body, i32 %8] [^if.then4, i32 %39];
    i1 %10 = scmp lt i32 %9, i32 5;
    cbr i1 %10(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putint(i32 %3);
    i32 %11 = load i32* %0;
    call (i32) -> void @putint(i32 %11);
    cbr i1 %6(prob = 0.5), ^indirect, ^indirect1;
^entry1:
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
^indirect:
    i32 %12 = load i32* %0;
    ubr ^if.then1;
^indirect1:
    i32 %13 = load i32* %0;
    ubr ^if.else1;
^if.then:
    i32 %14 = phi [^entry1, i32 %7] [^if.else, i32 %18];
    i32 %15 = add i32 %14, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then2, ^if.else2;
^if.else:
    i32 %16 = phi [^entry1, i32 %7] [^if.else, i32 %18];
    i32 %17 = phi [^entry1, i32 %2] [^if.else, i32 %19];
    i32 %18 = shl i32 %16, i32 1;
    i32 %19 = add i32 %17, i32 -1;
    i1 %20 = scmp eq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
^if.then1:
    i32 %21 = phi [^indirect, i32 %12] [^if.else1, i32 %25];
    i32 %22 = add i32 %21, i32 %3;
    store i32* %0 with i32 %22;
    cbr i1 %6(prob = 0.5), ^if.then3, ^if.else3;
^if.else1:
    i32 %23 = phi [^indirect1, i32 %13] [^if.else1, i32 %25];
    i32 %24 = phi [^indirect1, i32 %2] [^if.else1, i32 %26];
    i32 %25 = shl i32 %23, i32 1;
    i32 %26 = add i32 %24, i32 -1;
    i1 %27 = scmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^if.else1;
^if.then2:
    i32 %28 = phi [^if.then, i32 %15] [^if.else2, i32 %35];
    i32 %29 = load i32* %0;
    i32 %30 = add i32 %28, i32 %29;
    i32 %31 = load i32* %1;
    i1 %32 = scmp eq i32 %30, i32 %31;
    cbr i1 %32(prob = 0.5), ^b, ^while.header;
^if.else2:
    i32 %33 = phi [^if.then, i32 %15] [^if.else2, i32 %35];
    i32 %34 = phi [^if.then, i32 %2] [^if.else2, i32 %36];
    i32 %35 = shl i32 %33, i32 1;
    i32 %36 = add i32 %34, i32 -1;
    i1 %37 = scmp eq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then2, ^if.else2;
^if.then3:
    i32 %38 = phi [^if.then1, i32 %9] [^if.else3, i32 %42];
    i32 %39 = add i32 %38, i32 %3;
    cbr i1 %6(prob = 0.5), ^indirect2, ^indirect3;
^if.else3:
    i32 %40 = phi [^if.then1, i32 %9] [^if.else3, i32 %42];
    i32 %41 = phi [^if.then1, i32 %2] [^if.else3, i32 %43];
    i32 %42 = shl i32 %40, i32 1;
    i32 %43 = add i32 %41, i32 -1;
    i1 %44 = scmp eq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then3, ^if.else3;
^indirect2:
    i32 %45 = load i32* %0;
    ubr ^if.then4;
^indirect3:
    i32 %46 = load i32* %0;
    ubr ^if.else4;
^if.then4:
    i32 %47 = phi [^indirect2, i32 %45] [^if.else4, i32 %51];
    i32 %48 = sub i32 %47, i32 %3;
    store i32* %0 with i32 %48;
    ubr ^while.header1;
^if.else4:
    i32 %49 = phi [^indirect3, i32 %46] [^if.else4, i32 %51];
    i32 %50 = phi [^indirect3, i32 %2] [^if.else4, i32 %52];
    i32 %51 = shl i32 %49, i32 1;
    i32 %52 = add i32 %50, i32 -1;
    i1 %53 = scmp eq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then4, ^if.else4;
}
