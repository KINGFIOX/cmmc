internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1 * i32]* @i;
internal [1 * i32]* @k;
internal func @inc_impl(i32* %x, i32 %rec) -> void {
^entry:
    i32* %rec1 = alloc i32;
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    store i32* %rec1 with i32 %rec;
    i32 %0 = load i32* %rec1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32* %4 = load i32** %x1;
    i32* %5 = getelementptr &(i32* %4)[i64 0];
    i32* %6 = load i32** %x1;
    i32* %7 = getelementptr &(i32* %6)[i64 0];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %8, i32 1;
    store i32* %5 with i32 %9;
    ubr ^b;
^if.else:
    i32* %10 = load i32** %x1;
    i32* %11 = getelementptr &(i32* %10)[i64 0];
    i32* %12 = load i32** %x1;
    i32* %13 = getelementptr &(i32* %12)[i64 0];
    i32 %14 = load i32* %13;
    i32 %15 = mul i32 %14, i32 2;
    store i32* %11 with i32 %15;
    i32* %16 = load i32** %x1;
    i32 %17 = load i32* %rec1;
    i32 %18 = sub i32 %17, i32 1;
    call (i32*, i32) -> void @inc_impl(i32* %16, i32 %18);
    ubr ^b;
^b:
    ret;
}
internal func @inc(i32* %x) -> void {
^entry:
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    i32* %0 = load i32** %x1;
    i32* %1 = getelementptr &([1 * i32]* @k)[i64 0][i64 0];
    i32 %2 = load i32* %1;
    call (i32*, i32) -> void @inc_impl(i32* %0, i32 %2);
    ret;
}
internal func @add_impl(i32* %x, i32* %y, i32 %rec) -> void {
^entry:
    i32* %rec1 = alloc i32;
    i32** %y1 = alloc i32*;
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    store i32** %y1 with i32* %y;
    store i32* %rec1 with i32 %rec;
    i32 %0 = load i32* %rec1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32* %4 = load i32** %x1;
    i32* %5 = getelementptr &(i32* %4)[i64 0];
    i32* %6 = load i32** %x1;
    i32* %7 = getelementptr &(i32* %6)[i64 0];
    i32 %8 = load i32* %7;
    i32* %9 = load i32** %y1;
    i32* %10 = getelementptr &(i32* %9)[i64 0];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %8, i32 %11;
    store i32* %5 with i32 %12;
    ubr ^b;
^if.else:
    i32* %13 = load i32** %x1;
    i32* %14 = getelementptr &(i32* %13)[i64 0];
    i32* %15 = load i32** %x1;
    i32* %16 = getelementptr &(i32* %15)[i64 0];
    i32 %17 = load i32* %16;
    i32 %18 = mul i32 %17, i32 2;
    store i32* %14 with i32 %18;
    i32* %19 = load i32** %x1;
    i32* %20 = load i32** %y1;
    i32 %21 = load i32* %rec1;
    i32 %22 = sub i32 %21, i32 1;
    call (i32*, i32*, i32) -> void @add_impl(i32* %19, i32* %20, i32 %22);
    ubr ^b;
^b:
    ret;
}
internal func @add(i32* %x, i32* %y) -> void {
^entry:
    i32** %y1 = alloc i32*;
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    store i32** %y1 with i32* %y;
    i32* %0 = load i32** %x1;
    i32* %1 = load i32** %y1;
    i32* %2 = getelementptr &([1 * i32]* @k)[i64 0][i64 0];
    i32 %3 = load i32* %2;
    call (i32*, i32*, i32) -> void @add_impl(i32* %0, i32* %1, i32 %3);
    ret;
}
internal func @sub_impl(i32* %x, i32* %y, i32 %rec) -> void {
^entry:
    i32* %rec1 = alloc i32;
    i32** %y1 = alloc i32*;
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    store i32** %y1 with i32* %y;
    store i32* %rec1 with i32 %rec;
    i32 %0 = load i32* %rec1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32* %4 = load i32** %x1;
    i32* %5 = getelementptr &(i32* %4)[i64 0];
    i32* %6 = load i32** %x1;
    i32* %7 = getelementptr &(i32* %6)[i64 0];
    i32 %8 = load i32* %7;
    i32* %9 = load i32** %y1;
    i32* %10 = getelementptr &(i32* %9)[i64 0];
    i32 %11 = load i32* %10;
    i32 %12 = sub i32 %8, i32 %11;
    store i32* %5 with i32 %12;
    ubr ^b;
^if.else:
    i32* %13 = load i32** %x1;
    i32* %14 = getelementptr &(i32* %13)[i64 0];
    i32* %15 = load i32** %x1;
    i32* %16 = getelementptr &(i32* %15)[i64 0];
    i32 %17 = load i32* %16;
    i32 %18 = mul i32 %17, i32 2;
    store i32* %14 with i32 %18;
    i32* %19 = load i32** %x1;
    i32* %20 = load i32** %y1;
    i32 %21 = load i32* %rec1;
    i32 %22 = sub i32 %21, i32 1;
    call (i32*, i32*, i32) -> void @sub_impl(i32* %19, i32* %20, i32 %22);
    ubr ^b;
^b:
    ret;
}
internal func @sub(i32* %x, i32* %y) -> void {
^entry:
    i32** %y1 = alloc i32*;
    i32** %x1 = alloc i32*;
    store i32** %x1 with i32* %x;
    store i32** %y1 with i32* %y;
    i32* %0 = load i32** %x1;
    i32* %1 = load i32** %y1;
    i32* %2 = getelementptr &([1 * i32]* @k)[i64 0][i64 0];
    i32 %3 = load i32* %2;
    call (i32*, i32*, i32) -> void @sub_impl(i32* %0, i32* %1, i32 %3);
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %j = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %0 with i32 -1;
    i32* %1 = getelementptr &([1 * [2 * i32]]* %z)[i64 1][i64 0][i64 0];
    i32* %2 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([1 * i32]* @k)[i64 0][i64 0];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32* %5 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    [2 * i32]* %7 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %8 = getelementptr &([2 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    ubr ^while.header;
^while.header:
    i32* %10 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %11 = load i32* %10;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %13 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    [2 * i32]* %14 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %15 = getelementptr &([2 * i32]* %14)[i64 0][i64 0];
    i32 %16 = load i32* %15;
    store i32* %13 with i32 %16;
    ubr ^while.header1;
^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header1:
    i32* %17 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    i32 %18 = load i32* %17;
    i1 %19 = scmp lt i32 %18, i32 5;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %22 = getelementptr &([1 * i32]* @i)[i64 0][i64 0];
    i32 %23 = load i32* %22;
    call (i32) -> void @putint(i32 %23);
    i32* %24 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    i32 %25 = load i32* %24;
    call (i32) -> void @putint(i32 %25);
    i32* %26 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    [2 * i32]* %28 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %29 = getelementptr &([2 * i32]* %28)[i64 0][i64 0];
    i32 %30 = load i32* %29;
    call (i32) -> void @putint(i32 %30);
    [2 * i32]* %31 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %32 = getelementptr &([2 * i32]* %31)[i64 0][i64 0];
    i32* %33 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    call (i32*, i32*) -> void @add(i32* %32, i32* %33);
    i32* %34 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    i32* %35 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    call (i32*, i32*) -> void @add(i32* %34, i32* %35);
    [2 * i32]* %36 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %37 = getelementptr &([2 * i32]* %36)[i64 0][i64 0];
    i32* %38 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    call (i32*, i32*) -> void @sub(i32* %37, i32* %38);
    ubr ^while.header1;
^b1:
    i32* %39 = getelementptr &([1 * i32]* @i)[i64 0][i64 0];
    call (i32*) -> void @inc(i32* %39);
    i32* %40 = getelementptr &([1 * i32]* @i)[i64 0][i64 0];
    [2 * i32]* %41 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %42 = getelementptr &([2 * i32]* %41)[i64 0][i64 0];
    call (i32*, i32*) -> void @add(i32* %40, i32* %42);
    i32* %43 = getelementptr &([1 * i32]* @i)[i64 0][i64 0];
    i32 %44 = load i32* %43;
    [2 * i32]* %45 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0];
    i32* %46 = getelementptr &([2 * i32]* %45)[i64 0][i64 1];
    i32 %47 = load i32* %46;
    i1 %48 = scmp eq i32 %44, i32 %47;
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^if.then, ^b2;
^if.then:
    ubr ^b;
^b2:
    ubr ^while.header;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
