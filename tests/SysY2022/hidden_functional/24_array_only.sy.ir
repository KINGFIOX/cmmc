internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
  ^entry:
    [2 * i32]* %0 = alloc [2 * i32], align 8;
    i32* %1 = getelementptr &([2 * i32]* %0)[i64 0][i64 0];
    store i32* %1 with i32 -1;
    i32* %2 = getelementptr &([2 * i32]* %0)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call (i32*) -> i32 @getarray(i32* %1);
    i1 %6 = icmp neq i32 %4, i32 0;
    cbr i1 %6(prob = 0.984615), ^indirect, ^b;
  ^indirect:
    i1 %7 = icmp eq i32 %3, i32 0;
    i32 %8 = load i32* %1;
    ubr ^while.body;
  ^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32 %9 = phi [^indirect, i32 0] [^if.then2, i32 %32];
    i32 %10 = phi [^indirect, i32 %8] [^if.then2, i32 %31];
    i1 %11 = icmp slt i32 %10, i32 5;
    cbr i1 %11(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %12 = phi [^while.body, i32 %10] [^if.then4, i32 %41];
    i32 %13 = phi [^while.body, i32 %10] [^if.then4, i32 %50];
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putint(i32 %12);
    call (i32) -> void @putint(i32 %4);
    call (i32) -> void @putint(i32 %13);
    cbr i1 %7(prob = 0.49), ^indirect1, ^indirect2;
  ^b1:
    cbr i1 %7(prob = 0.49), ^if.then, ^if.else;
  ^indirect1:
    i32 %14 = load i32* %1;
    ubr ^if.then1;
  ^indirect2:
    i32 %15 = load i32* %1;
    ubr ^if.else1;
  ^if.then:
    i32 %16 = phi [^b1, i32 %9] [^if.else, i32 %22];
    i32 %17 = add i32 %16, i32 1;
    cbr i1 %7(prob = 0.49), ^if.then2, ^if.else2;
  ^if.else:
    i32 %18 = phi [^b1, i32 %9] [^if.else, i32 %22];
    i32 %19 = phi [^b1, i32 %3] [^if.else, i32 %20];
    i32 %20 = add i32 %19, i32 -1;
    i1 %21 = icmp neq i32 %20, i32 0;
    i32 %22 = mul i32 %18, i32 2;
    cbr i1 %21(prob = 0.5), ^if.else, ^if.then;
  ^if.then1:
    i32 %23 = phi [^indirect1, i32 %14] [^if.else1, i32 %29];
    i32 %24 = add i32 %4, i32 %23;
    store i32* %1 with i32 %24;
    cbr i1 %7(prob = 0.49), ^if.then3, ^if.else3;
  ^if.else1:
    i32 %25 = phi [^indirect2, i32 %15] [^if.else1, i32 %29];
    i32 %26 = phi [^indirect2, i32 %3] [^if.else1, i32 %27];
    i32 %27 = add i32 %26, i32 -1;
    i1 %28 = icmp neq i32 %27, i32 0;
    i32 %29 = mul i32 %25, i32 2;
    cbr i1 %28(prob = 0.5), ^if.else1, ^if.then1;
  ^if.then2:
    i32 %30 = phi [^if.then, i32 %17] [^if.else2, i32 %39];
    i32 %31 = load i32* %1;
    i32 %32 = add i32 %30, i32 %31;
    i32 %33 = load i32* %2;
    i1 %34 = icmp neq i32 %32, i32 %33;
    cbr i1 %34(prob = 0.492308), ^while.body, ^b;
  ^if.else2:
    i32 %35 = phi [^if.then, i32 %17] [^if.else2, i32 %39];
    i32 %36 = phi [^if.then, i32 %3] [^if.else2, i32 %37];
    i32 %37 = add i32 %36, i32 -1;
    i1 %38 = icmp neq i32 %37, i32 0;
    i32 %39 = mul i32 %35, i32 2;
    cbr i1 %38(prob = 0.5), ^if.else2, ^if.then2;
  ^if.then3:
    i32 %40 = phi [^if.then1, i32 %12] [^if.else3, i32 %46];
    i32 %41 = add i32 %4, i32 %40;
    cbr i1 %7(prob = 0.49), ^indirect3, ^indirect4;
  ^if.else3:
    i32 %42 = phi [^if.then1, i32 %12] [^if.else3, i32 %46];
    i32 %43 = phi [^if.then1, i32 %3] [^if.else3, i32 %44];
    i32 %44 = add i32 %43, i32 -1;
    i1 %45 = icmp neq i32 %44, i32 0;
    i32 %46 = mul i32 %42, i32 2;
    cbr i1 %45(prob = 0.5), ^if.else3, ^if.then3;
  ^indirect3:
    i32 %47 = load i32* %1;
    ubr ^if.then4;
  ^indirect4:
    i32 %48 = load i32* %1;
    ubr ^if.else4;
  ^if.then4:
    i32 %49 = phi [^indirect3, i32 %47] [^if.else4, i32 %56];
    i32 %50 = sub i32 %49, i32 %4;
    store i32* %1 with i32 %50;
    i1 %51 = icmp slt i32 %41, i32 5;
    cbr i1 %51(prob = 0.984615), ^while.body1, ^b1;
  ^if.else4:
    i32 %52 = phi [^indirect4, i32 %48] [^if.else4, i32 %56];
    i32 %53 = phi [^indirect4, i32 %3] [^if.else4, i32 %54];
    i32 %54 = add i32 %53, i32 -1;
    i1 %55 = icmp neq i32 %54, i32 0;
    i32 %56 = mul i32 %52, i32 2;
    cbr i1 %55(prob = 0.5), ^if.else4, ^if.then4;
}
