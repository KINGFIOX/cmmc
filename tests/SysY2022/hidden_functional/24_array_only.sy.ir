internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @inc_impl(i32* %x, i32 %rec, [1 * i32]* %0, [1 * i32]* %1) -> void { NoRecurse } {
^dummy_entry:
    ubr ^entry;
^entry:
    i32 %2 = phi [^if.else, i32 %6] [^dummy_entry, i32 %rec];
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %x;
    i32 %5 = mul i32 %4, i32 2;
    store i32* %x with i32 %5;
    i32 %6 = add i32 %2, i32 -1;
    ubr ^entry;
^if.then:
    i32 %7 = load i32* %x;
    i32 %8 = add i32 %7, i32 1;
    store i32* %x with i32 %8;
    ret;
}
internal func @add_impl(i32* %x, i32* %y, i32 %rec, [1 * i32]* %0, [1 * i32]* %1) -> void { NoRecurse } {
^dummy_entry:
    ubr ^entry;
^entry:
    i32 %2 = phi [^if.else, i32 %6] [^dummy_entry, i32 %rec];
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %x;
    i32 %5 = mul i32 %4, i32 2;
    store i32* %x with i32 %5;
    i32 %6 = add i32 %2, i32 -1;
    ubr ^entry;
^if.then:
    i32 %7 = load i32* %x;
    i32 %8 = load i32* %y;
    i32 %9 = add i32 %7, i32 %8;
    store i32* %x with i32 %9;
    ret;
}
internal func @sub_impl(i32* %x, i32* %y, i32 %rec, [1 * i32]* %0, [1 * i32]* %1) -> void { NoRecurse } {
^dummy_entry:
    ubr ^entry;
^entry:
    i32 %2 = phi [^if.else, i32 %6] [^dummy_entry, i32 %rec];
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %x;
    i32 %5 = mul i32 %4, i32 2;
    store i32* %x with i32 %5;
    i32 %6 = add i32 %2, i32 -1;
    ubr ^entry;
^if.then:
    i32 %7 = load i32* %x;
    i32 %8 = load i32* %y;
    i32 %9 = sub i32 %7, i32 %8;
    store i32* %x with i32 %9;
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [1 * i32]* %k = alloc [1 * i32];
    [1 * i32]* %i = alloc [1 * i32];
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %j = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %i)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([1 * i32]* %k)[i64 0][i64 0];
    i32* %2 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %3 with i32 0;
    i32 %4 = call () -> i32 @getint();
    store i32* %1 with i32 %4;
    i32* %5 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = call (i32*) -> i32 @getarray(i32* %2);
    i32* %8 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %9 = load i32* %5;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = load i32* %2;
    store i32* %8 with i32 %11;
    ubr ^while.header1;
^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header1:
    i32 %12 = load i32* %8;
    i1 %13 = scmp lt i32 %12, i32 5;
    cbr i1 %13(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i32 %14 = load i32* %0;
    call (i32) -> void @putint(i32 %14);
    i32 %15 = load i32* %8;
    call (i32) -> void @putint(i32 %15);
    i32 %16 = load i32* %5;
    call (i32) -> void @putint(i32 %16);
    i32 %17 = load i32* %2;
    call (i32) -> void @putint(i32 %17);
    i32 %18 = load i32* %1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %2, i32* %5, i32 %18, [1 * i32]* %i, [1 * i32]* %k);
    i32 %19 = load i32* %1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %8, i32* %5, i32 %19, [1 * i32]* %i, [1 * i32]* %k);
    i32 %20 = load i32* %1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @sub_impl(i32* %2, i32* %5, i32 %20, [1 * i32]* %i, [1 * i32]* %k);
    ubr ^while.header1;
^entry1:
    i32 %21 = load i32* %1;
    call (i32*, i32, [1 * i32]*, [1 * i32]*) -> void @inc_impl(i32* %0, i32 %21, [1 * i32]* %i, [1 * i32]* %k);
    i32 %22 = load i32* %1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %0, i32* %2, i32 %22, [1 * i32]* %i, [1 * i32]* %k);
    i32 %23 = load i32* %0;
    i32 %24 = load i32* %3;
    i1 %25 = scmp eq i32 %23, i32 %24;
    cbr i1 %25(prob = 0.5), ^b, ^while.header;
}
