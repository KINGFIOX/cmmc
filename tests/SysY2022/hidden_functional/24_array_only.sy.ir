internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @inc_impl(i32*, i32, [1 * i32]*, [1 * i32]*) -> void {
^entry(i32* %arg, i32 %arg1, [1 * i32]* %arg2, [1 * i32]* %arg3):
    i32** %x = alloc i32*;
    store i32** %x with i32* %arg;
    i32* %rec = alloc i32;
    store i32* %rec with i32 %arg1;
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32* %rec, i32** %x, i32* %arg ], [ ^indirect1 i32* %rec, i32** %x, i32* %arg, i32 %arg1, [1 * i32]* %arg3, [1 * i32]* %arg2 ];
^indirect(i32* %arg, i32** %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    free i32* %arg;
    free i32** %arg1;
    ret;
^indirect1(i32* %arg, i32** %arg1, i32* %arg2, i32 %arg3, [1 * i32]* %arg4, [1 * i32]* %arg5):
    i32 %0 = load i32* %arg2;
    i32 %1 = mul i32 %0, i32 2;
    store i32* %arg2 with i32 %1;
    i32 %2 = add i32 %arg3, i32 -1;
    call (i32*, i32, [1 * i32]*, [1 * i32]*) -> void @inc_impl(i32* %arg2, i32 %2, [1 * i32]* %arg5, [1 * i32]* %arg4);
    free i32* %arg;
    free i32** %arg1;
    ret;
}
internal func @add_impl(i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void {
^entry(i32* %arg, i32* %arg1, i32 %arg2, [1 * i32]* %arg3, [1 * i32]* %arg4):
    i32** %x = alloc i32*;
    store i32** %x with i32* %arg;
    i32** %y = alloc i32*;
    store i32** %y with i32* %arg1;
    i32* %rec = alloc i32;
    store i32* %rec with i32 %arg2;
    i1 %0 = scmp eq i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32* %rec, i32** %y, i32** %x, i32* %arg1, i32* %arg ], [ ^indirect1 i32* %rec, i32** %y, i32** %x, i32* %arg1, i32* %arg, i32 %arg2, [1 * i32]* %arg4, [1 * i32]* %arg3 ];
^indirect(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = load i32* %arg4;
    i32 %1 = load i32* %arg3;
    i32 %2 = add i32 %0, i32 %1;
    store i32* %arg4 with i32 %2;
    free i32* %arg;
    free i32** %arg1;
    free i32** %arg2;
    ret;
^indirect1(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32 %arg5, [1 * i32]* %arg6, [1 * i32]* %arg7):
    i32 %0 = load i32* %arg4;
    i32 %1 = mul i32 %0, i32 2;
    store i32* %arg4 with i32 %1;
    i32 %2 = add i32 %arg5, i32 -1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %arg4, i32* %arg3, i32 %2, [1 * i32]* %arg7, [1 * i32]* %arg6);
    free i32* %arg;
    free i32** %arg1;
    free i32** %arg2;
    ret;
}
internal func @sub_impl(i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void {
^entry(i32* %arg, i32* %arg1, i32 %arg2, [1 * i32]* %arg3, [1 * i32]* %arg4):
    i32** %x = alloc i32*;
    store i32** %x with i32* %arg;
    i32** %y = alloc i32*;
    store i32** %y with i32* %arg1;
    i32* %rec = alloc i32;
    store i32* %rec with i32 %arg2;
    i1 %0 = scmp eq i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32* %rec, i32** %y, i32** %x, i32* %arg1, i32* %arg ], [ ^indirect1 i32* %rec, i32** %y, i32** %x, i32* %arg1, i32* %arg, i32 %arg2, [1 * i32]* %arg4, [1 * i32]* %arg3 ];
^indirect(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = load i32* %arg4;
    i32 %1 = load i32* %arg3;
    i32 %2 = sub i32 %0, i32 %1;
    store i32* %arg4 with i32 %2;
    free i32* %arg;
    free i32** %arg1;
    free i32** %arg2;
    ret;
^indirect1(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32 %arg5, [1 * i32]* %arg6, [1 * i32]* %arg7):
    i32 %0 = load i32* %arg4;
    i32 %1 = mul i32 %0, i32 2;
    store i32* %arg4 with i32 %1;
    i32 %2 = add i32 %arg5, i32 -1;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @sub_impl(i32* %arg4, i32* %arg3, i32 %2, [1 * i32]* %arg7, [1 * i32]* %arg6);
    free i32* %arg;
    free i32** %arg1;
    free i32** %arg2;
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [1 * i32]* %i = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %i)[i64 0][i64 0];
    store i32* %0 with i32 0;
    [1 * i32]* %k = alloc [1 * i32];
    i32* %1 = getelementptr &([1 * i32]* %k)[i64 0][i64 0];
    [1 * i32]* %j = alloc [1 * i32];
    [1 * i32]* %y = alloc [1 * i32];
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    i32* %2 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %3 with i32 0;
    i32 %4 = call () -> i32 @getint();
    store i32* %1 with i32 %4;
    i32* %5 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = call (i32*) -> i32 @getarray(i32* %2);
    i32* %8 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    i32 %9 = load i32* %5;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), [ ^while.body i32* %8, i32* %3, i32* %8, i32* %2, i32* %0, i32* %2, i32* %0, i32* %5, i32* %8, i32* %5, i32* %2, [1 * i32]* %k, [1 * i32]* %i, i32* %1, i32* %1, i32* %1, i32* %1, i32* %1 ], [ ^b ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [1 * i32]* %arg11, [1 * i32]* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17):
    i32 %0 = load i32* %arg10;
    store i32* %arg8 with i32 %0;
    i32 %1 = load i32* %arg;
    i1 %2 = scmp lt i32 %1, i32 5;
    cbr i1 %2(prob = 0.97), [ ^while.body1 i32* %arg10, i32* %arg9, i32* %arg5, i32* %arg6, i32* %arg1, i32* %arg, i32* %arg8, i32* %arg7, i32* %arg2, i32* %arg3, i32* %arg4, [1 * i32]* %arg11, [1 * i32]* %arg12, i32* %arg16, i32* %arg17, i32* %arg13, i32* %arg14, i32* %arg15 ], [ ^entry1 i32* %arg6, [1 * i32]* %arg12, [1 * i32]* %arg11, i32* %arg6, i32* %arg5, [1 * i32]* %arg12, i32* %arg, [1 * i32]* %arg11, i32* %arg9, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg10, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17 ];
^b():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [1 * i32]* %arg11, [1 * i32]* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17):
    i32 %0 = load i32* %arg10;
    call (i32) -> void @putint(i32 %0);
    i32 %1 = load i32* %arg8;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = load i32* %arg7;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = load i32* %arg9;
    call (i32) -> void @putint(i32 %3);
    i32 %4 = load i32* %arg17;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %arg9, i32* %arg7, i32 %4, [1 * i32]* %arg12, [1 * i32]* %arg11);
    i32 %5 = load i32* %arg16;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %arg8, i32* %arg7, i32 %5, [1 * i32]* %arg12, [1 * i32]* %arg11);
    i32 %6 = load i32* %arg15;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @sub_impl(i32* %arg9, i32* %arg7, i32 %6, [1 * i32]* %arg12, [1 * i32]* %arg11);
    i32 %7 = load i32* %arg5;
    i1 %8 = scmp lt i32 %7, i32 5;
    cbr i1 %8(prob = 0.97), [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [1 * i32]* %arg11, [1 * i32]* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17 ], [ ^entry1 i32* %arg3, [1 * i32]* %arg12, [1 * i32]* %arg11, i32* %arg3, i32* %arg2, [1 * i32]* %arg12, i32* %arg5, [1 * i32]* %arg11, i32* %arg1, i32* %arg4, i32* %arg6, i32* %arg7, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg13, i32* %arg14 ];
^entry1(i32* %arg, [1 * i32]* %arg1, [1 * i32]* %arg2, i32* %arg3, i32* %arg4, [1 * i32]* %arg5, i32* %arg6, [1 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20):
    i32 %0 = load i32* %arg20;
    call (i32*, i32, [1 * i32]*, [1 * i32]*) -> void @inc_impl(i32* %arg, i32 %0, [1 * i32]* %arg1, [1 * i32]* %arg2);
    i32 %1 = load i32* %arg19;
    call (i32*, i32*, i32, [1 * i32]*, [1 * i32]*) -> void @add_impl(i32* %arg3, i32* %arg4, i32 %1, [1 * i32]* %arg5, [1 * i32]* %arg7);
    i32 %2 = load i32* %arg3;
    i32 %3 = load i32* %arg9;
    i1 %4 = scmp eq i32 %2, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^b ], [ ^while.header i32* %arg10, i32* %arg11, i32* %arg3, i32* %arg4, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg9, i32* %arg6, i32* %arg15, i32* %arg8, [1 * i32]* %arg5, [1 * i32]* %arg7, i32* %arg20, i32* %arg19, i32* %arg18, i32* %arg17, i32* %arg16 ];
^while.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [1 * i32]* %arg11, [1 * i32]* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17):
    i32 %0 = load i32* %arg10;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg10, i32* %arg9, [1 * i32]* %arg12, [1 * i32]* %arg11, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg14, i32* %arg13 ], [ ^b ];
}
