internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    [1 * i32]* %k = alloc [1 * i32];
    [1 * i32]* %i = alloc [1 * i32];
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %j = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %i)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([1 * i32]* %k)[i64 0][i64 0];
    i32* %2 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %3 with i32 0;
    i32 %4 = call () -> i32 @getint();
    store i32* %1 with i32 %4;
    i32* %5 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = call (i32*) -> i32 @getarray(i32* %2);
    i32* %8 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %9 = load i32* %5;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = load i32* %2;
    store i32* %8 with i32 %11;
    ubr ^while.header1;
^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header1:
    i32 %12 = load i32* %8;
    i1 %13 = scmp lt i32 %12, i32 5;
    cbr i1 %13(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i32 %14 = load i32* %0;
    call (i32) -> void @putint(i32 %14);
    i32 %15 = load i32* %8;
    call (i32) -> void @putint(i32 %15);
    i32 %16 = load i32* %5;
    call (i32) -> void @putint(i32 %16);
    i32 %17 = load i32* %2;
    call (i32) -> void @putint(i32 %17);
    i32 %18 = load i32* %1;
    i1 %19 = scmp eq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^indirect, ^indirect1;
^entry1:
    i32 %20 = load i32* %1;
    i1 %21 = scmp eq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^indirect2, ^indirect3;
^indirect:
    i32 %22 = load i32* %2;
    ubr ^if.then;
^indirect1:
    i32 %23 = load i32* %2;
    ubr ^if.else;
^indirect2:
    i32 %24 = load i32* %0;
    ubr ^if.then1;
^indirect3:
    i32 %25 = load i32* %0;
    ubr ^if.else1;
^if.then:
    i32 %26 = phi [^indirect, i32 %22] [^if.else, i32 %37];
    i32 %27 = load i32* %5;
    i32 %28 = add i32 %26, i32 %27;
    store i32* %2 with i32 %28;
    i32 %29 = load i32* %1;
    i1 %30 = scmp eq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^indirect4, ^indirect5;
^if.then1:
    i32 %31 = phi [^indirect2, i32 %24] [^if.else1, i32 %42];
    i32 %32 = add i32 %31, i32 1;
    store i32* %0 with i32 %32;
    i32 %33 = load i32* %1;
    i1 %34 = scmp eq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^indirect6, ^indirect7;
^if.else:
    i32 %35 = phi [^indirect1, i32 %23] [^if.else, i32 %37];
    i32 %36 = phi [^indirect1, i32 %18] [^if.else, i32 %38];
    i32 %37 = shl i32 %35, i32 1;
    i32 %38 = add i32 %36, i32 -1;
    i1 %39 = scmp eq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then, ^if.else;
^if.else1:
    i32 %40 = phi [^indirect3, i32 %25] [^if.else1, i32 %42];
    i32 %41 = phi [^indirect3, i32 %20] [^if.else1, i32 %43];
    i32 %42 = shl i32 %40, i32 1;
    i32 %43 = add i32 %41, i32 -1;
    i1 %44 = scmp eq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^if.else1;
^indirect4:
    i32 %45 = load i32* %8;
    ubr ^if.then2;
^indirect5:
    i32 %46 = load i32* %8;
    ubr ^if.else2;
^indirect6:
    i32 %47 = load i32* %0;
    ubr ^if.then3;
^indirect7:
    i32 %48 = load i32* %0;
    ubr ^if.else3;
^if.then2:
    i32 %49 = phi [^indirect4, i32 %45] [^if.else2, i32 %62];
    i32 %50 = load i32* %5;
    i32 %51 = add i32 %49, i32 %50;
    store i32* %8 with i32 %51;
    i32 %52 = load i32* %1;
    i1 %53 = scmp eq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^indirect8, ^indirect9;
^if.then3:
    i32 %54 = phi [^indirect6, i32 %47] [^if.else3, i32 %67];
    i32 %55 = load i32* %2;
    i32 %56 = add i32 %54, i32 %55;
    store i32* %0 with i32 %56;
    i32 %57 = load i32* %0;
    i32 %58 = load i32* %3;
    i1 %59 = scmp eq i32 %57, i32 %58;
    cbr i1 %59(prob = 0.5), ^b, ^while.header;
^if.else2:
    i32 %60 = phi [^indirect5, i32 %46] [^if.else2, i32 %62];
    i32 %61 = phi [^indirect5, i32 %29] [^if.else2, i32 %63];
    i32 %62 = shl i32 %60, i32 1;
    i32 %63 = add i32 %61, i32 -1;
    i1 %64 = scmp eq i32 %63, i32 0;
    cbr i1 %64(prob = 0.5), ^if.then2, ^if.else2;
^if.else3:
    i32 %65 = phi [^indirect7, i32 %48] [^if.else3, i32 %67];
    i32 %66 = phi [^indirect7, i32 %33] [^if.else3, i32 %68];
    i32 %67 = shl i32 %65, i32 1;
    i32 %68 = add i32 %66, i32 -1;
    i1 %69 = scmp eq i32 %68, i32 0;
    cbr i1 %69(prob = 0.5), ^if.then3, ^if.else3;
^indirect8:
    i32 %70 = load i32* %2;
    ubr ^if.then4;
^indirect9:
    i32 %71 = load i32* %2;
    ubr ^if.else4;
^if.then4:
    i32 %72 = phi [^indirect8, i32 %70] [^if.else4, i32 %77];
    i32 %73 = load i32* %5;
    i32 %74 = sub i32 %72, i32 %73;
    store i32* %2 with i32 %74;
    ubr ^while.header1;
^if.else4:
    i32 %75 = phi [^indirect9, i32 %71] [^if.else4, i32 %77];
    i32 %76 = phi [^indirect9, i32 %52] [^if.else4, i32 %78];
    i32 %77 = shl i32 %75, i32 1;
    i32 %78 = add i32 %76, i32 -1;
    i1 %79 = scmp eq i32 %78, i32 0;
    cbr i1 %79(prob = 0.5), ^if.then4, ^if.else4;
}
