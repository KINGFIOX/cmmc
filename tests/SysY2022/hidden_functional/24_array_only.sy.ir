internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    [1 * i32]* %k = alloc [1 * i32];
    [1 * i32]* %i = alloc [1 * i32];
    [1 * [2 * i32]]* %z = alloc [1 * [2 * i32]];
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %j = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %i)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([1 * i32]* %k)[i64 0][i64 0];
    i32* %2 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 0];
    store i32* %2 with i32 -1;
    i32* %3 = getelementptr &([1 * [2 * i32]]* %z)[i64 0][i64 0][i64 1];
    store i32* %3 with i32 0;
    i32 %4 = call () -> i32 @getint();
    store i32* %1 with i32 %4;
    i32* %5 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %8 = load i32* %5;
    i1 %9 = scmp neq i32 %8, i32 0;
    i32* %10 = getelementptr &([1 * i32]* %j)[i64 0][i64 0];
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = load i32* %2;
    store i32* %10 with i32 %11;
    i1 %12 = scmp lt i32 %11, i32 5;
    cbr i1 %12(prob = 0.97), ^while.body1, ^entry1;
^b:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body1:
    i32 %13 = load i32* %0;
    call (i32) -> void @putint(i32 %13);
    i32 %14 = load i32* %10;
    call (i32) -> void @putint(i32 %14);
    i32 %15 = load i32* %5;
    call (i32) -> void @putint(i32 %15);
    i32 %16 = load i32* %2;
    call (i32) -> void @putint(i32 %16);
    i32 %17 = load i32* %1;
    ubr ^entry2;
^entry1:
    i32 %18 = load i32* %1;
    ubr ^entry3;
^entry2:
    i32 %19 = phi [^while.body1, i32 %17] [^if.else, i32 %29];
    i1 %20 = scmp eq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
^entry3:
    i32 %21 = phi [^entry1, i32 %18] [^if.else1, i32 %35];
    i1 %22 = scmp eq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    i32 %23 = load i32* %2;
    i32 %24 = load i32* %5;
    i32 %25 = add i32 %23, i32 %24;
    store i32* %2 with i32 %25;
    i32 %26 = load i32* %1;
    ubr ^entry4;
^if.else:
    i32 %27 = load i32* %2;
    i32 %28 = mul i32 %27, i32 2;
    store i32* %2 with i32 %28;
    i32 %29 = add i32 %19, i32 -1;
    ubr ^entry2;
^if.then1:
    i32 %30 = load i32* %0;
    i32 %31 = add i32 %30, i32 1;
    store i32* %0 with i32 %31;
    i32 %32 = load i32* %1;
    ubr ^entry5;
^if.else1:
    i32 %33 = load i32* %0;
    i32 %34 = mul i32 %33, i32 2;
    store i32* %0 with i32 %34;
    i32 %35 = add i32 %21, i32 -1;
    ubr ^entry3;
^entry4:
    i32 %36 = phi [^if.then, i32 %26] [^if.else2, i32 %46];
    i1 %37 = scmp eq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then2, ^if.else2;
^entry5:
    i32 %38 = phi [^if.then1, i32 %32] [^if.else3, i32 %49];
    i1 %39 = scmp eq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    i32 %40 = load i32* %10;
    i32 %41 = load i32* %5;
    i32 %42 = add i32 %40, i32 %41;
    store i32* %10 with i32 %42;
    i32 %43 = load i32* %1;
    ubr ^entry6;
^if.else2:
    i32 %44 = load i32* %10;
    i32 %45 = mul i32 %44, i32 2;
    store i32* %10 with i32 %45;
    i32 %46 = add i32 %36, i32 -1;
    ubr ^entry4;
^if.else3:
    i32 %47 = load i32* %0;
    i32 %48 = mul i32 %47, i32 2;
    store i32* %0 with i32 %48;
    i32 %49 = add i32 %38, i32 -1;
    ubr ^entry5;
^if.then3:
    i32 %50 = load i32* %0;
    i32 %51 = load i32* %2;
    i32 %52 = add i32 %50, i32 %51;
    store i32* %0 with i32 %52;
    i32 %53 = load i32* %0;
    i32 %54 = load i32* %3;
    i1 %55 = scmp eq i32 %53, i32 %54;
    cbr i1 %55(prob = 0.5), ^b, ^b1;
^entry6:
    i32 %56 = phi [^if.then2, i32 %43] [^if.else4, i32 %62];
    i1 %57 = scmp eq i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^if.then4, ^if.else4;
^b1:
    i32 %58 = load i32* %5;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.97), ^while.body, ^b;
^if.else4:
    i32 %60 = load i32* %2;
    i32 %61 = mul i32 %60, i32 2;
    store i32* %2 with i32 %61;
    i32 %62 = add i32 %56, i32 -1;
    ubr ^entry6;
^if.then4:
    i32 %63 = load i32* %2;
    i32 %64 = load i32* %5;
    i32 %65 = sub i32 %63, i32 %64;
    store i32* %2 with i32 %65;
    i32 %66 = load i32* %10;
    i1 %67 = scmp lt i32 %66, i32 5;
    cbr i1 %67(prob = 0.97), ^while.body1, ^entry1;
}
