internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32 %low, i32 %high, i32 %k, i32 %n) -> void {
^0:
    ubr ^entry;
^entry:
    i32 %1 = phi [^0, i32 %high] [^if.then1, i32 %26];
    i1 %2 = scmp eq i32 %low, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^entry1;
^entry1:
    i32* %3 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %1];
    i32 %4 = load i32* %3;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %5 = phi [^entry1, i32 %low] [^b, i32 %18];
    i32 %6 = phi [^entry1, i32 %low] [^b, i32 %19];
    i1 %7 = scmp lt i32 %6, i32 %1;
    cbr i1 %7(prob = 0.97), ^while.body, ^entry2;
^while.body:
    i32* %8 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %6];
    i32 %9 = load i32* %8;
    i1 %10 = scmp le i32 %9, i32 %4;
    cbr i1 %10(prob = 0.5), ^entry3, ^b;
^entry2:
    i32* %11 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %5];
    i32 %12 = load i32* %11;
    i32 %13 = load i32* %3;
    store i32* %11 with i32 %13;
    store i32* %3 with i32 %12;
    i1 %14 = scmp eq i32 %k, i32 %5;
    cbr i1 %14(prob = 0.5), ^while.header1, ^if.else;
^entry3:
    i32* %15 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %5];
    i32 %16 = load i32* %15;
    store i32* %8 with i32 %16;
    store i32* %15 with i32 %9;
    i32 %17 = add i32 %5, i32 1;
    ubr ^b;
^b:
    i32 %18 = phi [^while.body, i32 %5] [^entry3, i32 %17];
    i32 %19 = add i32 %6, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %20 = phi [^entry2, i32 0] [^while.body1, i32 %25];
    i1 %21 = scmp lt i32 %20, i32 %5;
    cbr i1 %21(prob = 0.97), ^while.body1, ^if.then;
^if.else:
    i1 %22 = scmp lt i32 %k, i32 %5;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else1;
^while.body1:
    i32* %23 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %20];
    i32 %24 = load i32* %23;
    call (i32) -> void @putint(i32 %24);
    call (i32) -> void @putch(i32 32);
    i32 %25 = add i32 %20, i32 1;
    ubr ^while.header1;
^if.then1:
    i32 %26 = add i32 %5, i32 -1;
    ubr ^entry;
^if.else1:
    i32 %27 = add i32 %5, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %27, i32 %1, i32 %k, i32 %n);
    ubr ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32* %4 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %3];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32 %6 = add i32 %3, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^b:
    i32 %8 = add i32 %0, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %8, i32 %1, i32 %0);
    ret i32 0;
}
