internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    [1000 * i32]* %3 = ptrcast [1000 * i32]* @array to [1000 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %4 = add i32 %0, i32 -1;
    ubr ^10;
  ^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = call () -> i32 @getint();
    i32* %7 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^10:
    i32 %11 = phi [^b, i32 %4] [^if.else2, i32 %13];
    i32 %12 = phi [^b, i32 0] [^if.else2, i32 %39];
    ubr ^entry1;
  ^entry1:
    i32 %13 = phi [^10, i32 %11] [^if.then, i32 %38];
    i1 %14 = icmp eq i32 %12, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^if.else;
  ^if.else:
    i32* %15 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %13];
    i32 %16 = load i32* %15;
    ubr ^while.header;
  ^b1:
    ret i32 0;
  ^while.header:
    i32 %17 = phi [^if.else, i32 %12] [^b2, i32 %30];
    i32 %18 = phi [^if.else, i32 %12] [^b2, i32 %31];
    i1 %19 = icmp sgt i32 %13, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body1, ^entry2;
  ^while.body1:
    i32* %20 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %18];
    i32 %21 = load i32* %20;
    i1 %22 = icmp sge i32 %16, i32 %21;
    cbr i1 %22(prob = 0.5), ^entry3, ^b2;
  ^entry2:
    i32* %23 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %17];
    i32 %24 = load i32* %23;
    i32 %25 = load i32* %15;
    store i32* %23 with i32 %25;
    store i32* %15 with i32 %24;
    i1 %26 = icmp eq i32 %2, i32 %17;
    cbr i1 %26(prob = 0.5), ^while.header1, ^if.else1;
  ^entry3:
    i32* %27 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %17];
    i32 %28 = load i32* %27;
    store i32* %20 with i32 %28;
    store i32* %27 with i32 %21;
    i32 %29 = add i32 %17, i32 1;
    ubr ^b2;
  ^b2:
    i32 %30 = phi [^while.body1, i32 %17] [^entry3, i32 %29];
    i32 %31 = add i32 %18, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %32 = phi [^entry2, i32 0] [^while.body2, i32 %37];
    i1 %33 = icmp sgt i32 %17, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b1;
  ^if.else1:
    i1 %34 = icmp slt i32 %2, i32 %17;
    cbr i1 %34(prob = 0.5), ^if.then, ^if.else2;
  ^while.body2:
    i32* %35 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %32];
    i32 %36 = load i32* %35;
    call (i32) -> void @putint(i32 %36);
    call (i32) -> void @putch(i32 32);
    i32 %37 = add i32 %32, i32 1;
    ubr ^while.header1;
  ^if.then:
    i32 %38 = add i32 %17, i32 -1;
    ubr ^entry1;
  ^if.else2:
    i32 %39 = add i32 %17, i32 1;
    ubr ^10;
}
