internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32, i32, i32, i32) -> void { NoRecurse } {
^dummy_entry(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    ubr [ ^entry i32 %arg, i32 %arg1, i32 %arg2 ];
^entry(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp eq i32 %arg, i32 %arg1;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^indirect i32 %arg1, i32 %arg, i32 %arg, i32 %arg1, i32 %arg2 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %arg1, i32 %arg;
    cbr i1 %2(prob = 0.97), [ ^while.body i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg, i32 %1, i32 %arg1, i32 %arg1, i32* %0 ], [ ^b i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg1, i32* %0 ];
^if.then():
    ret;
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp le i32 %1, i32 %arg4;
    cbr i1 %2(prob = 0.5), [ ^indirect1 i32 %arg6, i32* %0, i32 %1, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg7 ], [ ^b1 i32 %arg6, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg7 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = load i32* %arg4;
    store i32* %0 with i32 %2;
    store i32* %arg4 with i32 %1;
    i1 %3 = scmp eq i32 %arg2, i32 %arg3;
    cbr i1 %3(prob = 0.5), [ ^if.then1 i32 %arg3 ], [ ^indirect2 i32 %arg3, i32 %arg2, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^indirect1(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32* %arg9):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg8];
    i32 %1 = load i32* %0;
    store i32* %arg1 with i32 %1;
    store i32* %0 with i32 %arg2;
    i32 %2 = add i32 %arg8, i32 1;
    i32 %3 = add i32 %arg, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg6;
    cbr i1 %4(prob = 0.97), [ ^while.body i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %2, i32 %3, i32* %arg9 ], [ ^b i32 %arg3, i32 %arg4, i32 %arg5, i32 %2, i32* %arg9 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.97), [ ^while.body i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0, i32* %arg7 ], [ ^b i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg6, i32* %arg7 ];
^if.then1(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.97), [ ^super.header i32 %arg, i32 0 ], [ ^if.then ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp lt i32 %arg1, i32 %arg;
    cbr i1 %0(prob = 0.5), [ ^if.then2 i32 %arg2, i32 %arg4, i32 %arg5 ], [ ^if.else i32 %arg3, i32 %arg4, i32 %arg5 ];
^if.then2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 -1;
    ubr [ ^entry i32 %arg, i32 %0, i32 %arg1 ];
^super.header(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body1 i32 %arg, i32 %arg1 ], [ ^while.body2 i32 %arg, i32 %arg1 ];
^if.else(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    ubr [ ^entry i32 %0, i32 %arg, i32 %arg1 ];
^while.body1(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 32);
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = load i32* %4;
    call (i32) -> void @putint(i32 %5);
    call (i32) -> void @putch(i32 32);
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = load i32* %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = load i32* %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 32);
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = load i32* %10;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 32);
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = load i32* %12;
    call (i32) -> void @putint(i32 %13);
    call (i32) -> void @putch(i32 32);
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = load i32* %14;
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 32);
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 32);
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 32);
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = load i32* %20;
    call (i32) -> void @putint(i32 %21);
    call (i32) -> void @putch(i32 32);
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = load i32* %22;
    call (i32) -> void @putint(i32 %23);
    call (i32) -> void @putch(i32 32);
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = load i32* %24;
    call (i32) -> void @putint(i32 %25);
    call (i32) -> void @putch(i32 32);
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 32);
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = load i32* %28;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 32);
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = load i32* %30;
    call (i32) -> void @putint(i32 %31);
    call (i32) -> void @putch(i32 32);
    i32 %32 = add i32 %arg1, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg;
    cbr i1 %33(prob = 0.97), [ ^super.header i32 %arg, i32 %32 ], [ ^if.then ];
^while.body2(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3(prob = 0.97), [ ^while.body2 i32 %arg, i32 %2 ], [ ^if.then ];
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), [ ^super.header i32 %0, i32 %1, i32 0 ], [ ^b i32 %0, i32 %1 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %0, i32 %arg1, i32 %arg);
    ret i32 0;
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg2];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = call () -> i32 @getint();
    store i32* %2 with i32 %3;
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = call () -> i32 @getint();
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = call () -> i32 @getint();
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = call () -> i32 @getint();
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = call () -> i32 @getint();
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = call () -> i32 @getint();
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = call () -> i32 @getint();
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = call () -> i32 @getint();
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = call () -> i32 @getint();
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = call () -> i32 @getint();
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = call () -> i32 @getint();
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = call () -> i32 @getint();
    store i32* %30 with i32 %31;
    i32 %32 = add i32 %arg2, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg;
    cbr i1 %33(prob = 0.97), [ ^super.header i32 %arg, i32 %arg1, i32 %32 ], [ ^b i32 %arg, i32 %arg1 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %arg2];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3(prob = 0.97), [ ^while.body1 i32 %arg, i32 %arg1, i32 %2 ], [ ^b i32 %arg, i32 %arg1 ];
}
