internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32 %low, i32 %high, i32 %k, i32 %n) -> void {
^entry:
    i1 %0 = scmp eq i32 %low, i32 %high;
    cbr i1 %0(prob = 0.5), ^if.then, ^entry1;
^entry1:
    i32* %1 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %high];
    i32 %2 = load i32* %1;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %3 = phi [^b1, i32 %17] [^entry1, i32 %low];
    i32 %4 = phi [^b1, i32 %16] [^entry1, i32 %low];
    i1 %5 = scmp lt i32 %3, i32 %high;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %6 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %3];
    i32 %7 = load i32* %6;
    i1 %8 = scmp le i32 %7, i32 %2;
    cbr i1 %8(prob = 0.5), ^if.then1, ^b1;
^b:
    i32* %9 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %4];
    i32 %10 = load i32* %9;
    i32 %11 = load i32* %1;
    store i32* %9 with i32 %11;
    store i32* %1 with i32 %10;
    i1 %12 = scmp eq i32 %k, i32 %4;
    cbr i1 %12(prob = 0.5), ^while.header1, ^if.else;
^if.then1:
    i32* %13 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %4];
    i32 %14 = load i32* %13;
    store i32* %6 with i32 %14;
    store i32* %13 with i32 %7;
    i32 %15 = add i32 %4, i32 1;
    ubr ^b1;
^b1:
    i32 %16 = phi [^if.then1, i32 %15] [^while.body, i32 %4];
    i32 %17 = add i32 %3, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %18 = phi [^b, i32 0] [^while.body1, i32 %23];
    i1 %19 = scmp lt i32 %18, i32 %4;
    cbr i1 %19(prob = 0.97), ^while.body1, ^if.then;
^if.else:
    i1 %20 = scmp lt i32 %k, i32 %4;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else1;
^while.body1:
    i32* %21 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    call (i32) -> void @putint(i32 %22);
    call (i32) -> void @putch(i32 32);
    i32 %23 = add i32 %18, i32 1;
    ubr ^while.header1;
^if.then2:
    i32 %24 = add i32 %4, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %low, i32 %24, i32 %k, i32 %n);
    ubr ^if.then;
^if.else1:
    i32 %25 = add i32 %4, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %25, i32 %high, i32 %k, i32 %n);
    ubr ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %6] [^entry, i32 0];
    i1 %3 = scmp lt i32 %2, i32 %0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %4 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %2];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32 %6 = add i32 %2, i32 1;
    ubr ^while.header;
^b:
    i32 %7 = add i32 %0, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %7, i32 %1, i32 %0);
    ret i32 0;
}
