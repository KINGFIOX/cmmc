internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^b:
    i32 %3 = add i32 %0, i32 -1;
    ubr ^9;
^while.body:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32* %5 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %4];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = add i32 %4, i32 1;
    i1 %8 = scmp lt i32 %7, i32 %0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^9:
    i32 %10 = phi [^b, i32 %3] [^if.else1, i32 %12];
    i32 %11 = phi [^b, i32 0] [^if.else1, i32 %38];
    ubr ^entry1;
^entry1:
    i32 %12 = phi [^9, i32 %10] [^if.then, i32 %37];
    i1 %13 = scmp eq i32 %11, i32 %12;
    cbr i1 %13(prob = 0.5), ^b1, ^entry2;
^entry2:
    i32* %14 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %12];
    i32 %15 = load i32* %14;
    ubr ^while.header;
^b1:
    ret i32 0;
^while.header:
    i32 %16 = phi [^entry2, i32 %11] [^b2, i32 %29];
    i32 %17 = phi [^entry2, i32 %11] [^b2, i32 %30];
    i1 %18 = scmp lt i32 %17, i32 %12;
    cbr i1 %18(prob = 0.97), ^while.body1, ^entry3;
^while.body1:
    i32* %19 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %17];
    i32 %20 = load i32* %19;
    i1 %21 = scmp le i32 %20, i32 %15;
    cbr i1 %21(prob = 0.5), ^entry4, ^b2;
^entry3:
    i32* %22 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %16];
    i32 %23 = load i32* %22;
    i32 %24 = load i32* %14;
    store i32* %22 with i32 %24;
    store i32* %14 with i32 %23;
    i1 %25 = scmp eq i32 %1, i32 %16;
    cbr i1 %25(prob = 0.5), ^while.header1, ^if.else;
^entry4:
    i32* %26 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %16];
    i32 %27 = load i32* %26;
    store i32* %19 with i32 %27;
    store i32* %26 with i32 %20;
    i32 %28 = add i32 %16, i32 1;
    ubr ^b2;
^b2:
    i32 %29 = phi [^while.body1, i32 %16] [^entry4, i32 %28];
    i32 %30 = add i32 %17, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %31 = phi [^entry3, i32 0] [^while.body2, i32 %36];
    i1 %32 = scmp lt i32 %31, i32 %16;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b1;
^if.else:
    i1 %33 = scmp lt i32 %1, i32 %16;
    cbr i1 %33(prob = 0.5), ^if.then, ^if.else1;
^while.body2:
    i32* %34 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %31];
    i32 %35 = load i32* %34;
    call (i32) -> void @putint(i32 %35);
    call (i32) -> void @putch(i32 32);
    i32 %36 = add i32 %31, i32 1;
    ubr ^while.header1;
^if.then:
    i32 %37 = add i32 %16, i32 -1;
    ubr ^entry1;
^if.else1:
    i32 %38 = add i32 %16, i32 1;
    ubr ^9;
}
