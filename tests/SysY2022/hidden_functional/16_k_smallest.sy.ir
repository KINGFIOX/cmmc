internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @maxN { ReadOnly } = 1000;
internal i32* @space { ReadOnly } = 32;
internal [1000 * i32]* @array;
internal func @swap(i32 %i, i32 %j) -> void {
^entry:
    i32* %tmp = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    i32 %0 = load i32* %i1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %1];
    i32 %3 = load i32* %2;
    store i32* %tmp with i32 %3;
    i32 %4 = load i32* %i1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %5];
    i32 %7 = load i32* %j1;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %8];
    i32 %10 = load i32* %9;
    store i32* %6 with i32 %10;
    i32 %11 = load i32* %j1;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %12];
    i32 %14 = load i32* %tmp;
    store i32* %13 with i32 %14;
    ret;
}
internal func @findPivot(i32 %start, i32 %end) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %pIndex = alloc i32;
    i32* %pivot = alloc i32;
    i32* %end1 = alloc i32;
    i32* %start1 = alloc i32;
    store i32* %start1 with i32 %start;
    store i32* %end1 with i32 %end;
    i32 %0 = load i32* %end1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %1];
    i32 %3 = load i32* %2;
    store i32* %pivot with i32 %3;
    i32 %4 = load i32* %start1;
    store i32* %pIndex with i32 %4;
    i32 %5 = load i32* %start1;
    store i32* %i with i32 %5;
    ubr ^while.header;
^while.header:
    i32 %6 = load i32* %i;
    i32 %7 = load i32* %end1;
    i1 %8 = scmp lt i32 %6, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = load i32* %i;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %12];
    i32 %14 = load i32* %13;
    i32 %15 = load i32* %pivot;
    i1 %16 = scmp le i32 %14, i32 %15;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %19 = load i32* %pIndex;
    i32 %20 = load i32* %end1;
    call (i32, i32) -> void @swap(i32 %19, i32 %20);
    i32 %21 = load i32* %pIndex;
    ret i32 %21;
^if.then:
    i32 %22 = load i32* %i;
    i32 %23 = load i32* %pIndex;
    call (i32, i32) -> void @swap(i32 %22, i32 %23);
    i32 %24 = load i32* %pIndex;
    i32 %25 = add i32 %24, i32 1;
    store i32* %pIndex with i32 %25;
    ubr ^b1;
^b1:
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.header;
}
internal func @findSmallest(i32 %low, i32 %high, i32 %k, i32 %n) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %pIndex = alloc i32;
    i32* %n1 = alloc i32;
    i32* %k1 = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    store i32* %k1 with i32 %k;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* %low1;
    i32 %1 = load i32* %high1;
    i1 %2 = scmp eq i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %5 = load i32* %low1;
    i32 %6 = load i32* %high1;
    i32 %7 = call (i32, i32) -> i32 @findPivot(i32 %5, i32 %6);
    store i32* %pIndex with i32 %7;
    i32 %8 = load i32* %k1;
    i32 %9 = load i32* %pIndex;
    i1 %10 = scmp eq i32 %8, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    ret;
^if.then1:
    store i32* %i with i32 0;
    ubr ^while.header;
^if.else1:
    i32 %13 = load i32* %k1;
    i32 %14 = load i32* %pIndex;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %18 = load i32* %low1;
    i32 %19 = load i32* %pIndex;
    i32 %20 = sub i32 %19, i32 1;
    i32 %21 = load i32* %k1;
    i32 %22 = load i32* %n1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %18, i32 %20, i32 %21, i32 %22);
    ubr ^b1;
^while.header:
    i32 %23 = load i32* %i;
    i32 %24 = load i32* %pIndex;
    i1 %25 = scmp lt i32 %23, i32 %24;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body, ^b;
^if.else2:
    i32 %28 = load i32* %pIndex;
    i32 %29 = add i32 %28, i32 1;
    i32 %30 = load i32* %high1;
    i32 %31 = load i32* %k1;
    i32 %32 = load i32* %n1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %29, i32 %30, i32 %31, i32 %32);
    ubr ^b1;
^while.body:
    i32 %33 = load i32* %i;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %34];
    i32 %36 = load i32* %35;
    call (i32) -> void @putint(i32 %36);
    call (i32) -> void @putch(i32 32);
    i32 %37 = load i32* %i;
    i32 %38 = add i32 %37, i32 1;
    store i32* %i with i32 %38;
    ubr ^while.header;
^b:
    ubr ^b2;
^b1:
    ubr ^b2;
^b2:
    ubr ^b3;
^b3:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %high = alloc i32;
    i32* %low = alloc i32;
    i32* %i = alloc i32;
    i32* %k = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %k with i32 %1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* %n;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = load i32* %i;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([1000 * i32]* @array)[i64 0][i64 %8];
    i32 %10 = call () -> i32 @getint();
    store i32* %9 with i32 %10;
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 1;
    store i32* %i with i32 %12;
    ubr ^while.header;
^b:
    store i32* %low with i32 0;
    i32 %13 = load i32* %n;
    i32 %14 = sub i32 %13, i32 1;
    store i32* %high with i32 %14;
    i32 %15 = load i32* %low;
    i32 %16 = load i32* %high;
    i32 %17 = load i32* %k;
    i32 %18 = load i32* %n;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %15, i32 %16, i32 %17, i32 %18);
    ret i32 0;
}
