internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32 %low, i32 %high, i32 %k, i32 %n) -> void {
^entry:
    i1 %0 = scmp eq i32 %low, i32 %high;
    cbr i1 %0(prob = 0.5), ^if.then, ^entry1;
^entry1:
    i32* %1 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %high];
    i32 %2 = load i32* %1;
    i1 %3 = scmp lt i32 %low, i32 %high;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^if.then:
    ret;
^while.body:
    i32 %4 = phi [^entry1, i32 %low] [^b1, i32 %17];
    i32 %5 = phi [^entry1, i32 %low] [^b1, i32 %18];
    i32* %6 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %5];
    i32 %7 = load i32* %6;
    i1 %8 = scmp le i32 %7, i32 %2;
    cbr i1 %8(prob = 0.5), ^entry2, ^b1;
^b:
    i32 %9 = phi [^entry1, i32 %low] [^b1, i32 %17];
    i32* %10 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = load i32* %1;
    store i32* %10 with i32 %12;
    store i32* %1 with i32 %11;
    i1 %13 = scmp eq i32 %k, i32 %9;
    cbr i1 %13(prob = 0.5), ^if.then1, ^if.else;
^entry2:
    i32* %14 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %4];
    i32 %15 = load i32* %14;
    store i32* %6 with i32 %15;
    store i32* %14 with i32 %7;
    i32 %16 = add i32 %4, i32 1;
    ubr ^b1;
^b1:
    i32 %17 = phi [^while.body, i32 %4] [^entry2, i32 %16];
    i32 %18 = add i32 %5, i32 1;
    i1 %19 = scmp lt i32 %18, i32 %high;
    cbr i1 %19(prob = 0.97), ^while.body, ^b;
^if.then1:
    i1 %20 = scmp gt i32 %9, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body1, ^if.then;
^if.else:
    i1 %21 = scmp lt i32 %k, i32 %9;
    cbr i1 %21(prob = 0.5), ^if.then2, ^if.else1;
^if.then2:
    i32 %22 = add i32 %9, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %low, i32 %22, i32 %k, i32 %n);
    ubr ^if.then;
^if.else1:
    i32 %23 = add i32 %9, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %23, i32 %high, i32 %k, i32 %n);
    ubr ^if.then;
^while.body1:
    i32 %24 = phi [^if.then1, i32 0] [^while.body1, i32 %27];
    i32* %25 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %24];
    i32 %26 = load i32* %25;
    call (i32) -> void @putint(i32 %26);
    call (i32) -> void @putch(i32 32);
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = scmp lt i32 %27, i32 %9;
    cbr i1 %28(prob = 0.97), ^while.body1, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32* %4 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %3];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32 %6 = add i32 %3, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^b:
    i32 %8 = add i32 %0, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %8, i32 %1, i32 %0);
    ret i32 0;
}
