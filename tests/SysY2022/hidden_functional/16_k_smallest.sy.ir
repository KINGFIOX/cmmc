internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32, i32, i32, i32) -> void {
^entry(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %low = alloc i32;
    i32* %high = alloc i32;
    i32* %k = alloc i32;
    i32* %n = alloc i32;
    i1 %0 = scmp eq i32 %arg, i32 %arg1;
    cbr i1 %0, [ ^if.then ], [ ^indirect i32* %n, i32* %k, i32* %high, i32* %low, i32 %arg1, i32 %arg, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %pIndex = alloc i32;
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %arg5, i32 %arg4;
    cbr i1 %2, [ ^while.body i32* %pIndex, i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg4, i32 %1, i32 %arg5, i32 %arg5 ], [ ^b i32* %pIndex, i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg4, i32 %arg5 ];
^if.then():
    ret;
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg12];
    i32 %1 = load i32* %0;
    i1 %2 = scmp le i32 %1, i32 %arg10;
    cbr i1 %2, [ ^indirect1 i32 %arg12, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg12, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b1 i32 %arg12, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg9];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i1 %4 = scmp eq i32 %arg7, i32 %arg10;
    cbr i1 %4, [ ^if.then1 i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg4, i32* %arg, i32 %arg10 ], [ ^indirect2 i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg, i32* %arg1, i32 %arg10, i32 %arg7, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10 ];
^indirect1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg13];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i32 %4 = add i32 %arg13, i32 1;
    i32 %5 = add i32 %arg6, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg11;
    cbr i1 %6, [ ^while.body i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %4, i32 %5 ], [ ^b i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %4 ];
^b1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0 ], [ ^b i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg12 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32* %i = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg5;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %i, i32 %arg5, i32 0 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %i ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp lt i32 %arg6, i32 %arg5;
    cbr i1 %0, [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg1, i32 %arg7, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^if.else i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg, i32* %arg3, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = sub i32 %arg8, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %arg5, i32 %0, i32 %arg6, i32 %arg7);
    ubr [ ^b3 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg4, i32* %arg3 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    free i32* %arg5;
    ubr [ ^b3 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg4 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %0, i32 %arg5, i32 %arg6, i32 %arg7);
    ubr [ ^b3 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg, i32* %arg4 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32 %2 = add i32 %arg7, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg6;
    cbr i1 %3, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %2 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    free i32* %arg4;
    free i32* %arg;
    free i32* %arg1;
    free i32* %arg2;
    free i32* %arg3;
    ret;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body i32 %0, i32 %1, i32 0 ], [ ^b i32 %0, i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([1000 * i32]* @array)[i32 0][i32 %arg2];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3, [ ^while.body i32 %arg, i32 %arg1, i32 %2 ], [ ^b i32 %arg, i32 %arg1 ];
^b(i32 %arg, i32 %arg1):
    i32 %0 = sub i32 %arg, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %0, i32 %arg1, i32 %arg);
    ret i32 0;
}
