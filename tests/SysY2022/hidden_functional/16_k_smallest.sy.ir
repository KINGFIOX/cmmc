internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array;
internal func @findSmallest(i32 %low, i32 %high, i32 %k, i32 %n) -> void {
^entry:
    i1 %0 = scmp eq i32 %low, i32 %high;
    cbr i1 %0(prob = 0.5), ^if.then, ^entry1;
^entry1:
    i32* %1 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %high];
    i32 %2 = load i32* %1;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %3 = phi [^b1, i32 %3] [^entry1, i32 %low];
    i32 %4 = phi [^b1, i32 %4] [^entry1, i32 %high];
    i32 %5 = phi [^b1, i32 %5] [^entry1, i32 %k];
    i32 %6 = phi [^b1, i32 %6] [^entry1, i32 %n];
    i32 %7 = phi [^b1, i32 %26] [^entry1, i32 %low];
    i32 %8 = phi [^b1, i32 %25] [^entry1, i32 %low];
    i32 %9 = phi [^b1, i32 %9] [^entry1, i32 %2];
    i32 %10 = phi [^b1, i32 %10] [^entry1, i32 %high];
    i32 %11 = phi [^entry1, i32 %low] [^b1, i32 %26];
    i32 %12 = phi [^entry1, i32 %high] [^b1, i32 %10];
    i1 %13 = scmp lt i32 %11, i32 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %14 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %7];
    i32 %15 = load i32* %14;
    i1 %16 = scmp le i32 %15, i32 %9;
    cbr i1 %16(prob = 0.5), ^if.then1, ^b1;
^b:
    i32* %17 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %8];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %10];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    store i32* %19 with i32 %18;
    i1 %21 = scmp eq i32 %5, i32 %8;
    cbr i1 %21(prob = 0.5), ^while.header1, ^if.else;
^if.then1:
    i32* %22 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %8];
    i32 %23 = load i32* %22;
    store i32* %14 with i32 %23;
    store i32* %22 with i32 %15;
    i32 %24 = add i32 %8, i32 1;
    ubr ^b1;
^b1:
    i32 %25 = phi [^if.then1, i32 %24] [^while.body, i32 %8];
    i32 %26 = add i32 %7, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %27 = phi [^b, i32 %8] [^while.body1, i32 %27];
    i32 %28 = phi [^b, i32 0] [^while.body1, i32 %34];
    i32 %29 = phi [^b, i32 0] [^while.body1, i32 %34];
    i1 %30 = scmp lt i32 %29, i32 %27;
    cbr i1 %30(prob = 0.97), ^while.body1, ^if.then;
^if.else:
    i1 %31 = scmp lt i32 %5, i32 %8;
    cbr i1 %31(prob = 0.5), ^if.then2, ^if.else1;
^while.body1:
    i32* %32 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %28];
    i32 %33 = load i32* %32;
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 32);
    i32 %34 = add i32 %28, i32 1;
    ubr ^while.header1;
^if.then2:
    i32 %35 = add i32 %8, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %3, i32 %35, i32 %5, i32 %6);
    ubr ^if.then;
^if.else1:
    i32 %36 = add i32 %8, i32 1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 %36, i32 %4, i32 %5, i32 %6);
    ubr ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 %1];
    i32 %4 = phi [^while.body, i32 %10] [^entry, i32 0];
    i32 %5 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %6 = phi [^while.body, i32 %10] [^entry, i32 0];
    i1 %7 = scmp lt i32 %6, i32 %5;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %8 = getelementptr &([1000 * i32]* @array)[i64 0][i32 %4];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32 %10 = add i32 %4, i32 1;
    ubr ^while.header;
^b:
    i32 %11 = add i32 %2, i32 -1;
    call (i32, i32, i32, i32) -> void @findSmallest(i32 0, i32 %11, i32 %3, i32 %2);
    ret i32 0;
}
