internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    [1000 * i32]* %3 = ptrcast [1000 * i32]* @array to [1000 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %4 = add i32 %0, i32 -1;
    ubr ^10;
  ^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %6 = call () -> i32 @getint();
    i32* %7 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b;
  ^10:
    i32 %11 = phi [^b, i32 %4] [^if.else1, i32 %13];
    i32 %12 = phi [^b, i32 0] [^if.else1, i32 %50];
    ubr ^entry1;
  ^entry1:
    i32 %13 = phi [^10, i32 %11] [^if.then, i32 %44];
    i1 %14 = icmp eq i32 %12, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^entry2;
  ^entry2:
    i32* %15 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %13];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %12, i32 %13;
    cbr i1 %17(prob = 0.984615), ^super.header, ^b2;
  ^b1:
    ret i32 0;
  ^super.header:
    i32 %18 = add i32 %12, i32 4;
    i1 %19 = icmp sgt i32 %13, i32 %18;
    i32 %20 = add i32 %13, i32 -4;
    cbr i1 %19(prob = 0.941176), ^b3, ^b4;
  ^b2:
    i32 %21 = phi [^entry2, i32 %12] [^b6, i32 %56];
    i32* %22 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %21];
    i32 %23 = load i32* %22;
    i32 %24 = load i32* %15;
    store i32* %22 with i32 %24;
    store i32* %15 with i32 %23;
    i1 %25 = icmp eq i32 %2, i32 %21;
    cbr i1 %25(prob = 0.5), ^while.header, ^if.else;
  ^b3:
    i32 %26 = phi [^super.header, i32 %12] [^b9, i32 %79];
    i32 %27 = phi [^super.header, i32 %12] [^b9, i32 %78];
    i32* %28 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %26];
    i32 %29 = load i32* %28;
    i1 %30 = icmp sge i32 %16, i32 %29;
    cbr i1 %30(prob = 0.5), ^entry3, ^b5;
  ^b4 {scalar}:
    i32 %31 = phi [^super.header, i32 %12] [^b6, i32 %56] [^b9, i32 %78];
    i32 %32 = phi [^super.header, i32 %12] [^b6, i32 %57] [^b9, i32 %79];
    i32* %33 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = icmp sge i32 %16, i32 %34;
    cbr i1 %35(prob = 0.5), ^entry4, ^b6;
  ^while.header:
    i1 %36 = icmp sgt i32 %21, i32 0;
    cbr i1 %36(prob = 0.984615), ^while.body1, ^b1;
  ^if.else:
    i1 %37 = icmp slt i32 %2, i32 %21;
    cbr i1 %37(prob = 0.5), ^if.then, ^if.else1;
  ^entry3:
    i32* %38 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %27];
    i32 %39 = load i32* %38;
    store i32* %28 with i32 %39;
    store i32* %38 with i32 %29;
    i32 %40 = add i32 %27, i32 1;
    ubr ^b5;
  ^entry4:
    i32* %41 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %31];
    i32 %42 = load i32* %41;
    store i32* %33 with i32 %42;
    store i32* %41 with i32 %34;
    i32 %43 = add i32 %31, i32 1;
    ubr ^b6;
  ^if.then:
    i32 %44 = add i32 %21, i32 -1;
    ubr ^entry1;
  ^b5:
    i32 %45 = phi [^b3, i32 %27] [^entry3, i32 %40];
    i32 %46 = add i32 %26, i32 1;
    i32* %47 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i1 %49 = icmp sge i32 %16, i32 %48;
    cbr i1 %49(prob = 0.5), ^entry5, ^b7;
  ^if.else1:
    i32 %50 = add i32 %21, i32 1;
    ubr ^10;
  ^while.body1:
    i32 %51 = phi [^while.header, i32 0] [^while.body1, i32 %54];
    i32* %52 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %51];
    i32 %53 = load i32* %52;
    call (i32) -> void @putint(i32 %53);
    call (i32) -> void @putch(i32 32);
    i32 %54 = add i32 %51, i32 1;
    i1 %55 = icmp sgt i32 %21, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body1, ^b1;
  ^b6:
    i32 %56 = phi [^b4, i32 %31] [^entry4, i32 %43];
    i32 %57 = add i32 %32, i32 1;
    i1 %58 = icmp sgt i32 %13, i32 %57;
    cbr i1 %58(prob = 0.75), ^b4, ^b2;
  ^entry5:
    i32* %59 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %45];
    i32 %60 = load i32* %59;
    store i32* %47 with i32 %60;
    store i32* %59 with i32 %48;
    i32 %61 = add i32 %45, i32 1;
    ubr ^b7;
  ^b7:
    i32 %62 = phi [^b5, i32 %45] [^entry5, i32 %61];
    i32 %63 = add i32 %26, i32 2;
    i32* %64 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %63];
    i32 %65 = load i32* %64;
    i1 %66 = icmp sge i32 %16, i32 %65;
    cbr i1 %66(prob = 0.5), ^entry6, ^b8;
  ^entry6:
    i32* %67 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %62];
    i32 %68 = load i32* %67;
    store i32* %64 with i32 %68;
    store i32* %67 with i32 %65;
    i32 %69 = add i32 %62, i32 1;
    ubr ^b8;
  ^b8:
    i32 %70 = phi [^b7, i32 %62] [^entry6, i32 %69];
    i32 %71 = add i32 %26, i32 3;
    i32* %72 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %71];
    i32 %73 = load i32* %72;
    i1 %74 = icmp sge i32 %16, i32 %73;
    cbr i1 %74(prob = 0.5), ^entry7, ^b9;
  ^entry7:
    i32* %75 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %70];
    i32 %76 = load i32* %75;
    store i32* %72 with i32 %76;
    store i32* %75 with i32 %73;
    i32 %77 = add i32 %70, i32 1;
    ubr ^b9;
  ^b9:
    i32 %78 = phi [^b8, i32 %70] [^entry7, i32 %77];
    i32 %79 = add i32 %26, i32 4;
    i1 %80 = icmp sgt i32 %20, i32 %79;
    cbr i1 %80(prob = 0.941176), ^b3, ^b4;
}
