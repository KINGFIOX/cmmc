internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * i32]* @array { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [1000 * i32]* %3 = ptrcast [1000 * i32]* @array to [1000 * i32]*;
    ubr ^while.body;
  ^b:
    i32 %4 = add i32 %0, i32 -1;
    ubr ^5;
  ^5:
    i32 %6 = phi [^b, i32 %4] [^if.else1, i32 %13];
    i32 %7 = phi [^b, i32 0] [^if.else1, i32 %36];
    ubr ^entry1;
  ^while.body:
    i32 %8 = phi [^prebody, i32 0] [^while.body, i32 %11];
    i32 %9 = call () -> i32 @getint();
    i32* %10 = getelementptr &([1000 * i32]* %3)[i64 0][i32 %8];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %8, i32 1;
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
  ^entry1:
    i32 %13 = phi [^5, i32 %6] [^if.then, i32 %35];
    i1 %14 = icmp eq i32 %7, i32 %13;
    cbr i1 %14(prob = 0.5), ^b1, ^entry2;
  ^entry2:
    [1000 * i32]* %15 = ptrcast [1000 * i32]* @array to [1000 * i32]*;
    i32* %16 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %13];
    i32 %17 = load i32* %16;
    ubr ^while.header;
  ^b1:
    ret i32 0;
  ^while.header:
    i32 %18 = phi [^entry2, i32 %7] [^b2, i32 %31];
    i32 %19 = phi [^entry2, i32 %7] [^b2, i32 %32];
    i1 %20 = icmp sgt i32 %13, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.body1, ^entry3;
  ^while.body1:
    i32* %21 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %19];
    i32 %22 = load i32* %21;
    i1 %23 = icmp sge i32 %17, i32 %22;
    cbr i1 %23(prob = 0.5), ^entry4, ^b2;
  ^entry3:
    i32* %24 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %18];
    i32 %25 = load i32* %24;
    i32 %26 = load i32* %16;
    store i32* %24 with i32 %26;
    store i32* %16 with i32 %25;
    i1 %27 = icmp eq i32 %2, i32 %18;
    cbr i1 %27(prob = 0.5), ^while.header1, ^if.else;
  ^entry4:
    i32* %28 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %18];
    i32 %29 = load i32* %28;
    store i32* %21 with i32 %29;
    store i32* %28 with i32 %22;
    i32 %30 = add i32 %18, i32 1;
    ubr ^b2;
  ^b2:
    i32 %31 = phi [^while.body1, i32 %18] [^entry4, i32 %30];
    i32 %32 = add i32 %19, i32 1;
    ubr ^while.header;
  ^while.header1:
    i1 %33 = icmp sgt i32 %18, i32 0;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b1;
  ^if.else:
    i1 %34 = icmp slt i32 %2, i32 %18;
    cbr i1 %34(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %35 = add i32 %18, i32 -1;
    ubr ^entry1;
  ^if.else1:
    i32 %36 = add i32 %18, i32 1;
    ubr ^5;
  ^while.body2:
    i32 %37 = phi [^while.header1, i32 0] [^while.body2, i32 %40];
    i32* %38 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    call (i32) -> void @putint(i32 %39);
    call (i32) -> void @putch(i32 32);
    i32 %40 = add i32 %37, i32 1;
    i1 %41 = icmp sgt i32 %18, i32 %40;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b1;
}
