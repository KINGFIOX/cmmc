internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal f32* @e { ReadOnly } = 2.71828;
internal func @my_fabs(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = load f32* %x1;
    ret f32 %4;
^b:
    f32 %5 = load f32* %x1;
    f32 %6 = fneg f32 %5;
    ret f32 %6;
}
internal func @my_pow(f32 %a, i32 %n) -> f32 {
^entry:
    f32* %res = alloc f32;
    i32* %n1 = alloc i32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* %n1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    store f32* %res with f32 1;
    ubr ^while.header;
^if.then:
    f32 %4 = load f32* %a1;
    i32 %5 = load i32* %n1;
    i32 %6 = neg i32 %5;
    f32 %7 = call (f32, i32) -> f32 @my_pow(f32 %4, i32 %6);
    f32 %8 = fdiv f32 1, f32 %7;
    ret f32 %8;
^while.header:
    i32 %9 = load i32* %n1;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %11 = load i32* %n1;
    i32 %12 = srem i32 %11, i32 2;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then1, ^b2;
^b1:
    f32 %14 = load f32* %res;
    ret f32 %14;
^if.then1:
    f32 %15 = load f32* %res;
    f32 %16 = load f32* %a1;
    f32 %17 = fmul f32 %15, f32 %16;
    store f32* %res with f32 %17;
    ubr ^b2;
^b2:
    f32 %18 = load f32* %a1;
    f32 %19 = load f32* %a1;
    f32 %20 = fmul f32 %18, f32 %19;
    store f32* %a1 with f32 %20;
    i32 %21 = load i32* %n1;
    i32 %22 = sdiv i32 %21, i32 2;
    store i32* %n1 with i32 %22;
    ubr ^while.header;
}
internal func @my_sqrt(f32 %x) -> f32 {
^entry:
    i32* %c = alloc i32;
    f32* %t = alloc f32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 100;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    f32 %4 = load f32* %x1;
    f32 %5 = fdiv f32 %4, f32 8;
    f32 %6 = fadd f32 %5, f32 0.5;
    f32 %7 = load f32* %x1;
    f32 %8 = fmul f32 2, f32 %7;
    f32 %9 = load f32* %x1;
    f32 %10 = fadd f32 4, f32 %9;
    f32 %11 = fdiv f32 %8, f32 %10;
    f32 %12 = fadd f32 %6, f32 %11;
    store f32* %t with f32 %12;
    store i32* %c with i32 10;
    ubr ^while.header;
^if.then:
    f32 %13 = load f32* %x1;
    f32 %14 = fdiv f32 %13, f32 100;
    f32 %15 = call (f32) -> f32 @my_sqrt(f32 %14);
    f32 %16 = fmul f32 10, f32 %15;
    ret f32 %16;
^while.header:
    i32 %17 = load i32* %c;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b1;
^while.body:
    f32 %19 = load f32* %t;
    f32 %20 = load f32* %x1;
    f32 %21 = load f32* %t;
    f32 %22 = fdiv f32 %20, f32 %21;
    f32 %23 = fadd f32 %19, f32 %22;
    f32 %24 = fdiv f32 %23, f32 2;
    store f32* %t with f32 %24;
    i32 %25 = load i32* %c;
    i32 %26 = sub i32 %25, i32 1;
    store i32* %c with i32 %26;
    ubr ^while.header;
^b1:
    f32 %27 = load f32* %t;
    ret f32 %27;
}
internal func @F1(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fdiv f32 1, f32 %0;
    ret f32 %1;
}
internal func @F2(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = load f32* %x1;
    f32 %2 = fmul f32 %0, f32 %1;
    f32 %3 = fsub f32 1, f32 %2;
    f32 %4 = call (f32) -> f32 @my_sqrt(f32 %3);
    f32 %5 = fdiv f32 1, f32 %4;
    ret f32 %5;
}
internal func @simpson(f32 %a, f32 %b, i32 %flag) -> f32 {
^entry:
    f32* %c = alloc f32;
    i32* %flag1 = alloc i32;
    f32* %b1 = alloc f32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store f32* %b1 with f32 %b;
    store i32* %flag1 with i32 %flag;
    f32 %0 = load f32* %a1;
    f32 %1 = load f32* %b1;
    f32 %2 = load f32* %a1;
    f32 %3 = fsub f32 %1, f32 %2;
    f32 %4 = fdiv f32 %3, f32 2;
    f32 %5 = fadd f32 %0, f32 %4;
    store f32* %c with f32 %5;
    i32 %6 = load i32* %flag1;
    i1 %7 = scmp eq i32 %6, i32 1;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %10 = load i32* %flag1;
    i1 %11 = scmp eq i32 %10, i32 2;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then1, ^b3;
^if.then:
    f32 %14 = load f32* %a1;
    f32 %15 = call (f32) -> f32 @F1(f32 %14);
    f32 %16 = load f32* %c;
    f32 %17 = call (f32) -> f32 @F1(f32 %16);
    f32 %18 = fmul f32 4, f32 %17;
    f32 %19 = fadd f32 %15, f32 %18;
    f32 %20 = load f32* %b1;
    f32 %21 = call (f32) -> f32 @F1(f32 %20);
    f32 %22 = fadd f32 %19, f32 %21;
    f32 %23 = load f32* %b1;
    f32 %24 = load f32* %a1;
    f32 %25 = fsub f32 %23, f32 %24;
    f32 %26 = fmul f32 %22, f32 %25;
    f32 %27 = fdiv f32 %26, f32 6;
    ret f32 %27;
^if.then1:
    f32 %28 = load f32* %a1;
    f32 %29 = call (f32) -> f32 @F2(f32 %28);
    f32 %30 = load f32* %c;
    f32 %31 = call (f32) -> f32 @F2(f32 %30);
    f32 %32 = fmul f32 4, f32 %31;
    f32 %33 = fadd f32 %29, f32 %32;
    f32 %34 = load f32* %b1;
    f32 %35 = call (f32) -> f32 @F2(f32 %34);
    f32 %36 = fadd f32 %33, f32 %35;
    f32 %37 = load f32* %b1;
    f32 %38 = load f32* %a1;
    f32 %39 = fsub f32 %37, f32 %38;
    f32 %40 = fmul f32 %36, f32 %39;
    f32 %41 = fdiv f32 %40, f32 6;
    ret f32 %41;
^b3:
    ret f32 0;
}
internal func @asr5(f32 %a, f32 %b, f32 %eps, f32 %A, i32 %flag) -> f32 {
^entry:
    f32* %R = alloc f32;
    f32* %L = alloc f32;
    f32* %c = alloc f32;
    i32* %flag1 = alloc i32;
    f32* %A1 = alloc f32;
    f32* %eps1 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store f32* %b1 with f32 %b;
    store f32* %eps1 with f32 %eps;
    store f32* %A1 with f32 %A;
    store i32* %flag1 with i32 %flag;
    f32 %0 = load f32* %a1;
    f32 %1 = load f32* %b1;
    f32 %2 = load f32* %a1;
    f32 %3 = fsub f32 %1, f32 %2;
    f32 %4 = fdiv f32 %3, f32 2;
    f32 %5 = fadd f32 %0, f32 %4;
    store f32* %c with f32 %5;
    f32 %6 = load f32* %a1;
    f32 %7 = load f32* %c;
    i32 %8 = load i32* %flag1;
    f32 %9 = call (f32, f32, i32) -> f32 @simpson(f32 %6, f32 %7, i32 %8);
    store f32* %L with f32 %9;
    f32 %10 = load f32* %c;
    f32 %11 = load f32* %b1;
    i32 %12 = load i32* %flag1;
    f32 %13 = call (f32, f32, i32) -> f32 @simpson(f32 %10, f32 %11, i32 %12);
    store f32* %R with f32 %13;
    f32 %14 = load f32* %L;
    f32 %15 = load f32* %R;
    f32 %16 = fadd f32 %14, f32 %15;
    f32 %17 = load f32* %A1;
    f32 %18 = fsub f32 %16, f32 %17;
    f32 %19 = call (f32) -> f32 @my_fabs(f32 %18);
    f32 %20 = load f32* %eps1;
    f32 %21 = fmul f32 15, f32 %20;
    i1 %22 = fcmp le f32 %19, f32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^b2;
^if.then:
    f32 %25 = load f32* %L;
    f32 %26 = load f32* %R;
    f32 %27 = fadd f32 %25, f32 %26;
    f32 %28 = load f32* %L;
    f32 %29 = load f32* %R;
    f32 %30 = fadd f32 %28, f32 %29;
    f32 %31 = load f32* %A1;
    f32 %32 = fsub f32 %30, f32 %31;
    f32 %33 = fdiv f32 %32, f32 15;
    f32 %34 = fadd f32 %27, f32 %33;
    ret f32 %34;
^b2:
    f32 %35 = load f32* %a1;
    f32 %36 = load f32* %c;
    f32 %37 = load f32* %eps1;
    f32 %38 = fdiv f32 %37, f32 2;
    f32 %39 = load f32* %L;
    i32 %40 = load i32* %flag1;
    f32 %41 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 %35, f32 %36, f32 %38, f32 %39, i32 %40);
    f32 %42 = load f32* %c;
    f32 %43 = load f32* %b1;
    f32 %44 = load f32* %eps1;
    f32 %45 = fdiv f32 %44, f32 2;
    f32 %46 = load f32* %R;
    i32 %47 = load i32* %flag1;
    f32 %48 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 %42, f32 %43, f32 %45, f32 %46, i32 %47);
    f32 %49 = fadd f32 %41, f32 %48;
    ret f32 %49;
}
internal func @asr4(f32 %a, f32 %b, f32 %eps, i32 %flag) -> f32 {
^entry:
    i32* %flag1 = alloc i32;
    f32* %eps1 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store f32* %b1 with f32 %b;
    store f32* %eps1 with f32 %eps;
    store i32* %flag1 with i32 %flag;
    f32 %0 = load f32* %a1;
    f32 %1 = load f32* %b1;
    f32 %2 = load f32* %eps1;
    f32 %3 = load f32* %a1;
    f32 %4 = load f32* %b1;
    i32 %5 = load i32* %flag1;
    f32 %6 = call (f32, f32, i32) -> f32 @simpson(f32 %3, f32 %4, i32 %5);
    i32 %7 = load i32* %flag1;
    f32 %8 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 %0, f32 %1, f32 %2, f32 %6, i32 %7);
    ret f32 %8;
}
internal func @eee(f32 %x) -> f32 {
^entry:
    f32* %ee = alloc f32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp gt f32 %0, f32 0.001;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = load f32* %x1;
    f32 %5 = fdiv f32 %4, f32 2;
    f32 %6 = call (f32) -> f32 @eee(f32 %5);
    store f32* %ee with f32 %6;
    f32 %7 = load f32* %ee;
    f32 %8 = load f32* %ee;
    f32 %9 = fmul f32 %7, f32 %8;
    ret f32 %9;
^b:
    f32 %10 = load f32* %x1;
    f32 %11 = fadd f32 1, f32 %10;
    f32 %12 = load f32* %x1;
    f32 %13 = load f32* %x1;
    f32 %14 = fmul f32 %12, f32 %13;
    f32 %15 = fdiv f32 %14, f32 2;
    f32 %16 = fadd f32 %11, f32 %15;
    f32 %17 = load f32* %x1;
    f32 %18 = call (f32, i32) -> f32 @my_pow(f32 %17, i32 3);
    f32 %19 = fdiv f32 %18, f32 6;
    f32 %20 = fadd f32 %16, f32 %19;
    f32 %21 = load f32* %x1;
    f32 %22 = call (f32, i32) -> f32 @my_pow(f32 %21, i32 4);
    f32 %23 = fdiv f32 %22, f32 24;
    f32 %24 = fadd f32 %20, f32 %23;
    f32 %25 = load f32* %x1;
    f32 %26 = call (f32, i32) -> f32 @my_pow(f32 %25, i32 5);
    f32 %27 = fdiv f32 %26, f32 120;
    f32 %28 = fadd f32 %24, f32 %27;
    ret f32 %28;
}
internal func @my_exp(f32 %x) -> f32 {
^entry:
    f32* %e2 = alloc f32;
    f32* %e1 = alloc f32;
    i32* %n = alloc i32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    i1 %1 = fcmp lt f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = load f32* %x1;
    f32 %5 = fneg f32 %4;
    f32 %6 = call (f32) -> f32 @my_exp(f32 %5);
    f32 %7 = fdiv f32 1, f32 %6;
    ret f32 %7;
^b:
    f32 %8 = load f32* %x1;
    i32 %9 = f2s f32 %8 to i32;
    store i32* %n with i32 %9;
    f32 %10 = load f32* %x1;
    i32 %11 = load i32* %n;
    f32 %12 = s2f i32 %11 to f32;
    f32 %13 = fsub f32 %10, f32 %12;
    store f32* %x1 with f32 %13;
    i32 %14 = load i32* %n;
    f32 %15 = call (f32, i32) -> f32 @my_pow(f32 2.71828, i32 %14);
    store f32* %e1 with f32 %15;
    f32 %16 = load f32* %x1;
    f32 %17 = call (f32) -> f32 @eee(f32 %16);
    store f32* %e2 with f32 %17;
    f32 %18 = load f32* %e1;
    f32 %19 = load f32* %e2;
    f32 %20 = fmul f32 %18, f32 %19;
    ret f32 %20;
}
internal func @my_ln(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = call (f32, f32, f32, i32) -> f32 @asr4(f32 1, f32 %0, f32 1e-08, i32 1);
    ret f32 %1;
}
internal func @my_log(f32 %a, f32 %N) -> f32 {
^entry:
    f32* %N1 = alloc f32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store f32* %N1 with f32 %N;
    f32 %0 = load f32* %N1;
    f32 %1 = call (f32) -> f32 @my_ln(f32 %0);
    f32 %2 = load f32* %a1;
    f32 %3 = call (f32) -> f32 @my_ln(f32 %2);
    f32 %4 = fdiv f32 %1, f32 %3;
    ret f32 %4;
}
internal func @my_powf(f32 %a, f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    f32* %a1 = alloc f32;
    store f32* %a1 with f32 %a;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = load f32* %a1;
    f32 %2 = call (f32) -> f32 @my_ln(f32 %1);
    f32 %3 = fmul f32 %0, f32 %2;
    f32 %4 = call (f32) -> f32 @my_exp(f32 %3);
    ret f32 %4;
}
func @main() -> i32 { Entry } {
^entry:
    f32* %y = alloc f32;
    f32* %x = alloc f32;
    i32* %num = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %num with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %num;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    f32 %3 = call () -> f32 @getfloat();
    store f32* %x with f32 %3;
    f32 %4 = call () -> f32 @getfloat();
    store f32* %y with f32 %4;
    f32 %5 = load f32* %x;
    f32 %6 = call (f32) -> f32 @my_fabs(f32 %5);
    call (f32) -> void @putfloat(f32 %6);
    call (i32) -> void @putch(i32 32);
    f32 %7 = load f32* %x;
    f32 %8 = call (f32, i32) -> f32 @my_pow(f32 %7, i32 2);
    call (f32) -> void @putfloat(f32 %8);
    call (i32) -> void @putch(i32 32);
    f32 %9 = load f32* %x;
    f32 %10 = call (f32) -> f32 @my_sqrt(f32 %9);
    call (f32) -> void @putfloat(f32 %10);
    call (i32) -> void @putch(i32 32);
    f32 %11 = load f32* %x;
    f32 %12 = call (f32) -> f32 @my_exp(f32 %11);
    call (f32) -> void @putfloat(f32 %12);
    call (i32) -> void @putch(i32 32);
    f32 %13 = load f32* %x;
    i1 %14 = fcmp gt f32 %13, f32 0;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 0;
^if.then:
    f32 %17 = load f32* %x;
    f32 %18 = call (f32) -> f32 @my_ln(f32 %17);
    call (f32) -> void @putfloat(f32 %18);
    ubr ^b1;
^if.else:
    call (i32) -> void @putch(i32 45);
    ubr ^b1;
^b1:
    call (i32) -> void @putch(i32 32);
    f32 %19 = load f32* %x;
    i1 %20 = fcmp gt f32 %19, f32 0;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^b2, ^b3;
^b2:
    f32 %23 = load f32* %y;
    i1 %24 = fcmp gt f32 %23, f32 0;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    ubr ^b3;
^b3:
    i1 %27 = phi [^b2, i1 %26] [^b1, i1 false];
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    f32 %30 = load f32* %x;
    f32 %31 = load f32* %y;
    f32 %32 = call (f32, f32) -> f32 @my_log(f32 %30, f32 %31);
    call (f32) -> void @putfloat(f32 %32);
    ubr ^b4;
^if.else1:
    call (i32) -> void @putch(i32 45);
    ubr ^b4;
^b4:
    call (i32) -> void @putch(i32 32);
    f32 %33 = load f32* %x;
    i1 %34 = fcmp gt f32 %33, f32 0;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    f32 %37 = load f32* %x;
    f32 %38 = load f32* %y;
    f32 %39 = call (f32, f32) -> f32 @my_powf(f32 %37, f32 %38);
    call (f32) -> void @putfloat(f32 %39);
    ubr ^b5;
^if.else2:
    call (i32) -> void @putch(i32 45);
    ubr ^b5;
^b5:
    call (i32) -> void @putch(i32 10);
    i32 %40 = load i32* %num;
    i32 %41 = sub i32 %40, i32 1;
    store i32* %num with i32 %41;
    ubr ^while.header;
}
