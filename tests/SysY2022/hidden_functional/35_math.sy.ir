internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @my_pow(f32 %a, i32 %n) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp lt i32 %n, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %1 = neg i32 %n;
    f32 %2 = call (f32, i32) -> f32 @my_pow(f32 %a, i32 %1);
    f32 %3 = fdiv f32 1, f32 %2;
    ubr ^b2;
^b:
    i1 %4 = scmp neq i32 %n, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b1;
^b1:
    f32 %5 = phi [^b, f32 1] [^b3, f32 %13];
    ubr ^b2;
^while.body:
    i32 %6 = phi [^b, i32 %n] [^b3, i32 %15];
    f32 %7 = phi [^b, f32 %a] [^b3, f32 %14];
    f32 %8 = phi [^b, f32 1] [^b3, f32 %13];
    i32 %9 = srem i32 %6, i32 2;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b3;
^b2:
    f32 %11 = phi [^if.then, f32 %3] [^b1, f32 %5];
    ret f32 %11;
^if.then1:
    f32 %12 = fmul f32 %8, f32 %7;
    ubr ^b3;
^b3:
    f32 %13 = phi [^while.body, f32 %8] [^if.then1, f32 %12];
    f32 %14 = fmul f32 %7, f32 %7;
    i32 %15 = sdiv i32 %6, i32 2;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b1;
}
internal func @my_sqrt(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 100;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %1 = fdiv f32 %x, f32 100;
    f32 %2 = call (f32) -> f32 @my_sqrt(f32 %1);
    f32 %3 = fmul f32 10, f32 %2;
    ubr ^b1;
^b:
    f32 %4 = fdiv f32 %x, f32 8;
    f32 %5 = fadd f32 %4, f32 0.5;
    f32 %6 = fmul f32 2, f32 %x;
    f32 %7 = fadd f32 4, f32 %x;
    f32 %8 = fdiv f32 %6, f32 %7;
    f32 %9 = fadd f32 %5, f32 %8;
    f32 %10 = fdiv f32 %x, f32 %9;
    f32 %11 = fadd f32 %9, f32 %10;
    f32 %12 = fdiv f32 %11, f32 2;
    f32 %13 = fdiv f32 %x, f32 %12;
    f32 %14 = fadd f32 %12, f32 %13;
    f32 %15 = fdiv f32 %14, f32 2;
    f32 %16 = fdiv f32 %x, f32 %15;
    f32 %17 = fadd f32 %15, f32 %16;
    f32 %18 = fdiv f32 %17, f32 2;
    f32 %19 = fdiv f32 %x, f32 %18;
    f32 %20 = fadd f32 %18, f32 %19;
    f32 %21 = fdiv f32 %20, f32 2;
    f32 %22 = fdiv f32 %x, f32 %21;
    f32 %23 = fadd f32 %21, f32 %22;
    f32 %24 = fdiv f32 %23, f32 2;
    f32 %25 = fdiv f32 %x, f32 %24;
    f32 %26 = fadd f32 %24, f32 %25;
    f32 %27 = fdiv f32 %26, f32 2;
    f32 %28 = fdiv f32 %x, f32 %27;
    f32 %29 = fadd f32 %27, f32 %28;
    f32 %30 = fdiv f32 %29, f32 2;
    f32 %31 = fdiv f32 %x, f32 %30;
    f32 %32 = fadd f32 %30, f32 %31;
    f32 %33 = fdiv f32 %32, f32 2;
    f32 %34 = fdiv f32 %x, f32 %33;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fdiv f32 %35, f32 2;
    f32 %37 = fdiv f32 %x, f32 %36;
    f32 %38 = fadd f32 %36, f32 %37;
    f32 %39 = fdiv f32 %38, f32 2;
    ubr ^b1;
^b1:
    f32 %40 = phi [^if.then, f32 %3] [^b, f32 %39];
    ret f32 %40;
}
internal func @asr5(f32 %a, f32 %b, f32 %eps, f32 %A, i32 %flag) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    f32 %0 = fsub f32 %b, f32 %a;
    f32 %1 = fdiv f32 %0, f32 2;
    f32 %2 = fadd f32 %a, f32 %1;
    f32 %3 = fsub f32 %2, f32 %a;
    f32 %4 = fdiv f32 %3, f32 2;
    f32 %5 = fadd f32 %a, f32 %4;
    i1 %6 = scmp eq i32 %flag, i32 1;
    cbr i1 %6(prob = 0.5), ^entry1, ^b1;
^entry1:
    f32 %7 = fdiv f32 1, f32 %a;
    f32 %8 = fdiv f32 1, f32 %5;
    f32 %9 = fmul f32 4, f32 %8;
    f32 %10 = fadd f32 %7, f32 %9;
    f32 %11 = fdiv f32 1, f32 %2;
    f32 %12 = fadd f32 %10, f32 %11;
    f32 %13 = fmul f32 %12, f32 %3;
    f32 %14 = fdiv f32 %13, f32 6;
    ubr ^b2;
^b1:
    i1 %15 = scmp eq i32 %flag, i32 2;
    cbr i1 %15(prob = 0.5), ^entry2, ^b2;
^entry2:
    f32 %16 = fmul f32 %a, f32 %a;
    f32 %17 = fsub f32 1, f32 %16;
    f32 %18 = call (f32) -> f32 @my_sqrt(f32 %17);
    f32 %19 = fdiv f32 1, f32 %18;
    f32 %20 = fmul f32 %5, f32 %5;
    f32 %21 = fsub f32 1, f32 %20;
    f32 %22 = call (f32) -> f32 @my_sqrt(f32 %21);
    f32 %23 = fdiv f32 1, f32 %22;
    f32 %24 = fmul f32 4, f32 %23;
    f32 %25 = fadd f32 %19, f32 %24;
    f32 %26 = fmul f32 %2, f32 %2;
    f32 %27 = fsub f32 1, f32 %26;
    f32 %28 = call (f32) -> f32 @my_sqrt(f32 %27);
    f32 %29 = fdiv f32 1, f32 %28;
    f32 %30 = fadd f32 %25, f32 %29;
    f32 %31 = fmul f32 %30, f32 %3;
    f32 %32 = fdiv f32 %31, f32 6;
    ubr ^b2;
^b2:
    f32 %33 = phi [^entry1, f32 %14] [^b1, f32 0] [^entry2, f32 %32];
    f32 %34 = fsub f32 %b, f32 %2;
    f32 %35 = fdiv f32 %34, f32 2;
    f32 %36 = fadd f32 %2, f32 %35;
    cbr i1 %6(prob = 0.5), ^entry3, ^b3;
^entry3:
    f32 %37 = fdiv f32 1, f32 %2;
    f32 %38 = fdiv f32 1, f32 %36;
    f32 %39 = fmul f32 4, f32 %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32 %41 = fdiv f32 1, f32 %b;
    f32 %42 = fadd f32 %40, f32 %41;
    f32 %43 = fmul f32 %42, f32 %34;
    f32 %44 = fdiv f32 %43, f32 6;
    ubr ^b4;
^b3:
    i1 %45 = scmp eq i32 %flag, i32 2;
    cbr i1 %45(prob = 0.5), ^entry4, ^b4;
^entry4:
    f32 %46 = fmul f32 %2, f32 %2;
    f32 %47 = fsub f32 1, f32 %46;
    f32 %48 = call (f32) -> f32 @my_sqrt(f32 %47);
    f32 %49 = fdiv f32 1, f32 %48;
    f32 %50 = fmul f32 %36, f32 %36;
    f32 %51 = fsub f32 1, f32 %50;
    f32 %52 = call (f32) -> f32 @my_sqrt(f32 %51);
    f32 %53 = fdiv f32 1, f32 %52;
    f32 %54 = fmul f32 4, f32 %53;
    f32 %55 = fadd f32 %49, f32 %54;
    f32 %56 = fmul f32 %b, f32 %b;
    f32 %57 = fsub f32 1, f32 %56;
    f32 %58 = call (f32) -> f32 @my_sqrt(f32 %57);
    f32 %59 = fdiv f32 1, f32 %58;
    f32 %60 = fadd f32 %55, f32 %59;
    f32 %61 = fmul f32 %60, f32 %34;
    f32 %62 = fdiv f32 %61, f32 6;
    ubr ^b4;
^b4:
    f32 %63 = phi [^entry3, f32 %44] [^b3, f32 0] [^entry4, f32 %62];
    f32 %64 = fadd f32 %33, f32 %63;
    f32 %65 = fsub f32 %64, f32 %A;
    i1 %66 = fcmp gt f32 %65, f32 0;
    cbr i1 %66(prob = 0.5), ^b6, ^b5;
^b5:
    f32 %67 = fneg f32 %65;
    ubr ^b6;
^b6:
    f32 %68 = phi [^b4, f32 %65] [^b5, f32 %67];
    f32 %69 = fmul f32 15, f32 %eps;
    i1 %70 = fcmp le f32 %68, f32 %69;
    cbr i1 %70(prob = 0.5), ^if.then, ^b7;
^if.then:
    f32 %71 = fdiv f32 %65, f32 15;
    f32 %72 = fadd f32 %64, f32 %71;
    ubr ^b8;
^b7:
    f32 %73 = fdiv f32 %eps, f32 2;
    f32 %74 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 %a, f32 %2, f32 %73, f32 %33, i32 %flag);
    f32 %75 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 %2, f32 %b, f32 %73, f32 %63, i32 %flag);
    f32 %76 = fadd f32 %74, f32 %75;
    ubr ^b8;
^b8:
    f32 %77 = phi [^if.then, f32 %72] [^b7, f32 %76];
    ret f32 %77;
}
internal func @eee(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp gt f32 %x, f32 0.001;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %1 = fdiv f32 %x, f32 2;
    f32 %2 = call (f32) -> f32 @eee(f32 %1);
    f32 %3 = fmul f32 %2, f32 %2;
    ubr ^b1;
^b:
    f32 %4 = fadd f32 1, f32 %x;
    f32 %5 = fmul f32 %x, f32 %x;
    f32 %6 = fdiv f32 %5, f32 2;
    f32 %7 = fadd f32 %4, f32 %6;
    f32 %8 = call (f32, i32) -> f32 @my_pow(f32 %x, i32 3);
    f32 %9 = fdiv f32 %8, f32 6;
    f32 %10 = fadd f32 %7, f32 %9;
    f32 %11 = call (f32, i32) -> f32 @my_pow(f32 %x, i32 4);
    f32 %12 = fdiv f32 %11, f32 24;
    f32 %13 = fadd f32 %10, f32 %12;
    f32 %14 = call (f32, i32) -> f32 @my_pow(f32 %x, i32 5);
    f32 %15 = fdiv f32 %14, f32 120;
    f32 %16 = fadd f32 %13, f32 %15;
    ubr ^b1;
^b1:
    f32 %17 = phi [^if.then, f32 %3] [^b, f32 %16];
    ret f32 %17;
}
internal func @my_exp(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp lt f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %1 = fneg f32 %x;
    f32 %2 = call (f32) -> f32 @my_exp(f32 %1);
    f32 %3 = fdiv f32 1, f32 %2;
    ubr ^b1;
^b:
    i32 %4 = f2s f32 %x to i32;
    f32 %5 = s2f i32 %4 to f32;
    f32 %6 = fsub f32 %x, f32 %5;
    f32 %7 = call (f32, i32) -> f32 @my_pow(f32 2.71828, i32 %4);
    f32 %8 = call (f32) -> f32 @eee(f32 %6);
    f32 %9 = fmul f32 %7, f32 %8;
    ubr ^b1;
^b1:
    f32 %10 = phi [^if.then, f32 %3] [^b, f32 %9];
    ret f32 %10;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 %0] [^b7, i32 %60];
    f32 %3 = call () -> f32 @getfloat();
    f32 %4 = call () -> f32 @getfloat();
    i1 %5 = fcmp gt f32 %3, f32 0;
    cbr i1 %5(prob = 0.5), ^b2, ^b1;
^b:
    ret i32 0;
^b1:
    f32 %6 = fneg f32 %3;
    ubr ^b2;
^b2:
    f32 %7 = phi [^while.body, f32 %3] [^b1, f32 %6];
    call (f32) -> void @putfloat(f32 %7);
    call (i32) -> void @putch(i32 32);
    f32 %8 = call (f32, i32) -> f32 @my_pow(f32 %3, i32 2);
    call (f32) -> void @putfloat(f32 %8);
    call (i32) -> void @putch(i32 32);
    f32 %9 = call (f32) -> f32 @my_sqrt(f32 %3);
    call (f32) -> void @putfloat(f32 %9);
    call (i32) -> void @putch(i32 32);
    f32 %10 = call (f32) -> f32 @my_exp(f32 %3);
    call (f32) -> void @putfloat(f32 %10);
    call (i32) -> void @putch(i32 32);
    cbr i1 %5(prob = 0.5), ^entry1, ^if.else;
^entry1:
    f32 %11 = fsub f32 %3, f32 1;
    f32 %12 = fdiv f32 %11, f32 2;
    f32 %13 = fadd f32 1, f32 %12;
    f32 %14 = fdiv f32 1, f32 %13;
    f32 %15 = fmul f32 4, f32 %14;
    f32 %16 = fadd f32 1, f32 %15;
    f32 %17 = fdiv f32 1, f32 %3;
    f32 %18 = fadd f32 %16, f32 %17;
    f32 %19 = fmul f32 %18, f32 %11;
    f32 %20 = fdiv f32 %19, f32 6;
    f32 %21 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 1, f32 %3, f32 1e-08, f32 %20, i32 1);
    call (f32) -> void @putfloat(f32 %21);
    ubr ^b3;
^if.else:
    call (i32) -> void @putch(i32 45);
    ubr ^b3;
^b3:
    call (i32) -> void @putch(i32 32);
    cbr i1 %5(prob = 0.5), ^b4, ^b5;
^b4:
    i1 %22 = fcmp gt f32 %4, f32 0;
    ubr ^b5;
^b5:
    i1 %23 = phi [^b3, i1 false] [^b4, i1 %22];
    cbr i1 %23(prob = 0.5), ^entry2, ^if.else1;
^entry2:
    f32 %24 = fsub f32 %4, f32 1;
    f32 %25 = fdiv f32 %24, f32 2;
    f32 %26 = fadd f32 1, f32 %25;
    f32 %27 = fdiv f32 1, f32 %26;
    f32 %28 = fmul f32 4, f32 %27;
    f32 %29 = fadd f32 1, f32 %28;
    f32 %30 = fdiv f32 1, f32 %4;
    f32 %31 = fadd f32 %29, f32 %30;
    f32 %32 = fmul f32 %31, f32 %24;
    f32 %33 = fdiv f32 %32, f32 6;
    f32 %34 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 1, f32 %4, f32 1e-08, f32 %33, i32 1);
    f32 %35 = fsub f32 %3, f32 1;
    f32 %36 = fdiv f32 %35, f32 2;
    f32 %37 = fadd f32 1, f32 %36;
    f32 %38 = fdiv f32 1, f32 %37;
    f32 %39 = fmul f32 4, f32 %38;
    f32 %40 = fadd f32 1, f32 %39;
    f32 %41 = fdiv f32 1, f32 %3;
    f32 %42 = fadd f32 %40, f32 %41;
    f32 %43 = fmul f32 %42, f32 %35;
    f32 %44 = fdiv f32 %43, f32 6;
    f32 %45 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 1, f32 %3, f32 1e-08, f32 %44, i32 1);
    f32 %46 = fdiv f32 %34, f32 %45;
    call (f32) -> void @putfloat(f32 %46);
    ubr ^b6;
^if.else1:
    call (i32) -> void @putch(i32 45);
    ubr ^b6;
^b6:
    call (i32) -> void @putch(i32 32);
    cbr i1 %5(prob = 0.5), ^entry3, ^if.else2;
^entry3:
    f32 %47 = fsub f32 %3, f32 1;
    f32 %48 = fdiv f32 %47, f32 2;
    f32 %49 = fadd f32 1, f32 %48;
    f32 %50 = fdiv f32 1, f32 %49;
    f32 %51 = fmul f32 4, f32 %50;
    f32 %52 = fadd f32 1, f32 %51;
    f32 %53 = fdiv f32 1, f32 %3;
    f32 %54 = fadd f32 %52, f32 %53;
    f32 %55 = fmul f32 %54, f32 %47;
    f32 %56 = fdiv f32 %55, f32 6;
    f32 %57 = call (f32, f32, f32, f32, i32) -> f32 @asr5(f32 1, f32 %3, f32 1e-08, f32 %56, i32 1);
    f32 %58 = fmul f32 %4, f32 %57;
    f32 %59 = call (f32) -> f32 @my_exp(f32 %58);
    call (f32) -> void @putfloat(f32 %59);
    ubr ^b7;
^if.else2:
    call (i32) -> void @putch(i32 45);
    ubr ^b7;
^b7:
    call (i32) -> void @putch(i32 10);
    i32 %60 = add i32 %2, i32 -1;
    i1 %61 = scmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body, ^b;
}
