internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp slt i32 %6, i32 48;
    i1 %8 = icmp sgt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = icmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %12 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %14 = add i32 %12, i32 -48;
    i1 %15 = icmp ult i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %16 = phi [^while.header, i32 %12] [^while.body1, i32 %18];
    i32 %17 = phi [^while.header, i32 0] [^while.body1, i32 %23];
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = icmp ult i32 %19, i32 10;
    i32 %21 = mul i32 %17, i32 10;
    i32 %22 = add i32 %21, i32 -48;
    i32 %23 = add i32 %16, i32 %22;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %24 = phi [^while.header, i32 0] [^while.body1, i32 %23];
    i1 %25 = icmp neq i32 %13, i32 0;
    i32 %26 = neg i32 %24;
    i32 %27 = select i1 %25 ? i32 %26 : i32 %24;
    i1 %28 = icmp neq i32 %27, i32 0;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b1;
  ^b1:
    i32* %32 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.body2:
    i32 %33 = phi [^b, i32 0] [^b3, i32 %71];
    i32 %34 = call () -> i32 @getch();
    i1 %35 = icmp slt i32 %34, i32 48;
    i1 %36 = icmp sgt i32 %34, i32 57;
    i1 %37 = or i1 %35, i1 %36;
    i32* %38 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %33];
    cbr i1 %37(prob = 0.97), ^while.body3, ^while.header1;
  ^while.body3:
    i32 %39 = phi [^while.body2, i32 %34] [^while.body3, i32 %41];
    i32 %40 = phi [^while.body2, i32 0] [^while.body3, i32 %46];
    i32 %41 = call () -> i32 @getch();
    i1 %42 = icmp slt i32 %41, i32 48;
    i1 %43 = icmp sgt i32 %41, i32 57;
    i1 %44 = or i1 %42, i1 %43;
    i1 %45 = icmp eq i32 %39, i32 45;
    i32 %46 = select i1 %45 ? i32 1 : i32 %40;
    cbr i1 %44(prob = 0.97), ^while.body3, ^while.header1;
  ^while.header1:
    i32 %47 = phi [^while.body2, i32 %34] [^while.body3, i32 %41];
    i32 %48 = phi [^while.body2, i32 0] [^while.body3, i32 %46];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.97), ^while.body5, ^b3;
  ^while.header2:
    i32 %51 = phi [^b1, i32 0] [^while.header3, i32 %54];
    i1 %52 = icmp sgt i32 %27, i32 %51;
    cbr i1 %52(prob = 0.97), ^while.body4, ^b2;
  ^while.body4:
    i32* %53 = getelementptr &(i32* %32)[i32 %51];
    i32 %54 = add i32 %51, i32 1;
    ubr ^while.header3;
  ^b2:
    i32* %55 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    [400020 * i32]* %56 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    ubr ^while.header4;
  ^while.body5:
    i32 %57 = phi [^while.header1, i32 %47] [^while.body5, i32 %59];
    i32 %58 = phi [^while.header1, i32 0] [^while.body5, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i32 %60 = add i32 %59, i32 -48;
    i1 %61 = icmp ult i32 %60, i32 10;
    i32 %62 = mul i32 %58, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %57, i32 %63;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b3;
  ^b3:
    i32 %65 = phi [^while.header1, i32 0] [^while.body5, i32 %64];
    i1 %66 = icmp neq i32 %48, i32 0;
    i32 %67 = neg i32 %65;
    i32 %68 = select i1 %66 ? i32 %67 : i32 %65;
    store i32* %38 with i32 %68;
    i32* %69 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %33];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %33];
    store i32* %70 with i32 %68;
    i32 %71 = add i32 %33, i32 1;
    i1 %72 = icmp neq i32 %27, i32 %71;
    cbr i1 %72(prob = 0.97), ^while.body2, ^b1;
  ^while.header3:
    i32 %73 = phi [^while.body4, i32 %54] [^b4, i32 %92];
    i1 %74 = icmp sgt i32 %27, i32 %73;
    cbr i1 %74(prob = 0.97), ^while.body7, ^while.header2;
  ^while.header4:
    i32 %75 = phi [^b2, i32 -100] [^while.body6, i32 %83];
    i32 %76 = phi [^b2, i32 0] [^while.body6, i32 %84];
    i1 %77 = icmp sgt i32 %27, i32 %76;
    cbr i1 %77(prob = 0.97), ^while.body6, ^while.header5;
  ^while.body6:
    i32* %78 = getelementptr &(i32* %55)[i32 %76];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %79];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %81, i32 1;
    store i32* %80 with i32 %82;
    i32 %83 = smax i32 %75, i32 %79;
    i32 %84 = add i32 %76, i32 1;
    ubr ^while.header4;
  ^while.body7:
    i32* %85 = getelementptr &(i32* %32)[i32 %73];
    i32 %86 = load i32* %53;
    i32 %87 = load i32* %85;
    i1 %88 = icmp sgt i32 %86, i32 %87;
    cbr i1 %88(prob = 0.5), ^if.then, ^b4;
  ^while.header5:
    i32 %89 = phi [^while.header4, i32 0] [^b6, i32 %97];
    i32 %90 = phi [^while.header4, i32 0] [^b6, i32 %98];
    i1 %91 = icmp sge i32 %75, i32 %90;
    cbr i1 %91(prob = 0.97), ^while.body8, ^b5;
  ^if.then:
    store i32* %53 with i32 %87;
    store i32* %85 with i32 %86;
    ubr ^b4;
  ^b4:
    i32 %92 = add i32 %73, i32 1;
    ubr ^while.header3;
  ^b5:
    i32* %93 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    ubr ^while.header6;
  ^while.body8:
    i32* %94 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %90];
    i32 %95 = load i32* %94;
    i1 %96 = icmp neq i32 %95, i32 0;
    cbr i1 %96(prob = 0.97), ^while.body9, ^b6;
  ^b6:
    i32 %97 = phi [^while.body8, i32 %89] [^while.body9, i32 %104];
    i32 %98 = add i32 %90, i32 1;
    ubr ^while.header5;
  ^while.body9:
    i32 %99 = phi [^while.body8, i32 %95] [^while.body9, i32 %102];
    i32 %100 = phi [^while.body8, i32 %89] [^while.body9, i32 %104];
    i32* %101 = getelementptr &(i32* %55)[i32 %100];
    store i32* %101 with i32 %90;
    i32 %102 = add i32 %99, i32 -1;
    i1 %103 = icmp neq i32 %102, i32 0;
    i32 %104 = add i32 %100, i32 1;
    cbr i1 %103(prob = 0.97), ^while.body9, ^b6;
  ^while.header6:
    i32 %105 = phi [^b5, i32 0] [^b8, i32 %107];
    i1 %106 = icmp sgt i32 %27, i32 %105;
    cbr i1 %106(prob = 0.97), ^while.body10, ^b7;
  ^while.body10:
    i32 %107 = add i32 %105, i32 1;
    i1 %108 = icmp sgt i32 %27, i32 %107;
    cbr i1 %108(prob = 0.97), ^super.header, ^b8;
  ^b7:
    cbr i1 %28(prob = 0.97), ^while.body11, ^while.header7;
  ^b8:
    i32 %109 = phi [^while.body10, i32 %105] [^while.body16, i32 %238];
    i32* %110 = getelementptr &(i32* %93)[i32 %105];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %93)[i32 %109];
    i32 %113 = load i32* %112;
    store i32* %110 with i32 %113;
    store i32* %112 with i32 %111;
    ubr ^while.header6;
  ^super.header:
    i32 %114 = phi [^while.body10, i32 %107] [^while.body12, i32 %116];
    i32 %115 = phi [^while.body10, i32 %105] [^while.body12, i32 %160];
    i32 %116 = add i32 %114, i32 4;
    i1 %117 = icmp sgt i32 %27, i32 %116;
    cbr i1 %117(prob = 0.89), ^while.body12, ^super.header1;
  ^while.body11:
    i32 %118 = phi [^b7, i32 0] [^while.body11, i32 %128];
    i32* %119 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %118];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %118];
    i32 %122 = load i32* %121;
    i32 %123 = sub i32 %120, i32 %122;
    store i32* %119 with i32 %123;
    i32* %124 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %118];
    i32 %125 = load i32* %124;
    i32 %126 = sub i32 %125, i32 %123;
    i32 %127 = sub i32 %126, i32 %122;
    store i32* %124 with i32 %127;
    i32 %128 = add i32 %118, i32 1;
    i32 %129 = sub i32 %27, i32 %128;
    i1 %130 = icmp neq i32 %129, i32 0;
    cbr i1 %130(prob = 0.97), ^while.body11, ^while.header7;
  ^while.header7:
    i32 %131 = phi [^b7, i32 0] [^while.body11, i32 0] [^b11, i32 %230];
    i32 %132 = sub i32 %131, i32 %27;
    i1 %133 = icmp neq i32 %132, i32 0;
    cbr i1 %133(prob = 0.97), ^while.body13, ^b9;
  ^while.body12:
    i32* %134 = getelementptr &(i32* %93)[i32 %114];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %93)[i32 %115];
    i32 %137 = load i32* %136;
    i1 %138 = icmp slt i32 %135, i32 %137;
    i32 %139 = select i1 %138 ? i32 %114 : i32 %115;
    i32* %140 = getelementptr &(i32* %93)[i32 %139];
    i32 %141 = add i32 %114, i32 1;
    i32* %142 = getelementptr &(i32* %93)[i32 %141];
    i32 %143 = load i32* %142;
    i32 %144 = load i32* %140;
    i1 %145 = icmp slt i32 %143, i32 %144;
    i32 %146 = select i1 %145 ? i32 %141 : i32 %139;
    i32* %147 = getelementptr &(i32* %93)[i32 %146];
    i32 %148 = add i32 %114, i32 2;
    i32* %149 = getelementptr &(i32* %93)[i32 %148];
    i32 %150 = load i32* %149;
    i32 %151 = load i32* %147;
    i1 %152 = icmp slt i32 %150, i32 %151;
    i32 %153 = select i1 %152 ? i32 %148 : i32 %146;
    i32* %154 = getelementptr &(i32* %93)[i32 %153];
    i32 %155 = add i32 %114, i32 3;
    i32* %156 = getelementptr &(i32* %93)[i32 %155];
    i32 %157 = load i32* %156;
    i32 %158 = load i32* %154;
    i1 %159 = icmp slt i32 %157, i32 %158;
    i32 %160 = select i1 %159 ? i32 %155 : i32 %153;
    ubr ^super.header;
  ^super.header1:
    i32 %161 = phi [^super.header, i32 %114] [^while.body14, i32 %163];
    i32 %162 = phi [^super.header, i32 %115] [^while.body14, i32 %195];
    i32 %163 = add i32 %161, i32 4;
    i1 %164 = icmp sgt i32 %27, i32 %163;
    cbr i1 %164(prob = 0.89), ^while.body14, ^super.header2;
  ^while.body13:
    i32* %165 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %131];
    i32 %166 = load i32* %165;
    i1 %167 = icmp neq i32 %166, i32 0;
    cbr i1 %167(prob = 0.5), ^b9, ^b10;
  ^b9:
    i32 %168 = phi [^while.header7, i32 -123] [^while.body13, i32 1] [^b10, i32 2];
    ret i32 %168;
  ^while.body14:
    i32* %169 = getelementptr &(i32* %93)[i32 %161];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %93)[i32 %162];
    i32 %172 = load i32* %171;
    i1 %173 = icmp slt i32 %170, i32 %172;
    i32 %174 = select i1 %173 ? i32 %161 : i32 %162;
    i32* %175 = getelementptr &(i32* %93)[i32 %174];
    i32 %176 = add i32 %161, i32 1;
    i32* %177 = getelementptr &(i32* %93)[i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = load i32* %175;
    i1 %180 = icmp slt i32 %178, i32 %179;
    i32 %181 = select i1 %180 ? i32 %176 : i32 %174;
    i32* %182 = getelementptr &(i32* %93)[i32 %181];
    i32 %183 = add i32 %161, i32 2;
    i32* %184 = getelementptr &(i32* %93)[i32 %183];
    i32 %185 = load i32* %184;
    i32 %186 = load i32* %182;
    i1 %187 = icmp slt i32 %185, i32 %186;
    i32 %188 = select i1 %187 ? i32 %183 : i32 %181;
    i32* %189 = getelementptr &(i32* %93)[i32 %188];
    i32 %190 = add i32 %161, i32 3;
    i32* %191 = getelementptr &(i32* %93)[i32 %190];
    i32 %192 = load i32* %191;
    i32 %193 = load i32* %189;
    i1 %194 = icmp slt i32 %192, i32 %193;
    i32 %195 = select i1 %194 ? i32 %190 : i32 %188;
    ubr ^super.header1;
  ^super.header2:
    i32 %196 = phi [^super.header1, i32 %161] [^while.body15, i32 %198];
    i32 %197 = phi [^super.header1, i32 %162] [^while.body15, i32 %229];
    i32 %198 = add i32 %196, i32 4;
    i1 %199 = icmp sgt i32 %27, i32 %198;
    cbr i1 %199(prob = 0.89), ^while.body15, ^while.body16;
  ^b10:
    i32* %200 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %131];
    i32 %201 = load i32* %200;
    i1 %202 = icmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.5), ^b9, ^b11;
  ^while.body15:
    i32* %203 = getelementptr &(i32* %93)[i32 %196];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &(i32* %93)[i32 %197];
    i32 %206 = load i32* %205;
    i1 %207 = icmp slt i32 %204, i32 %206;
    i32 %208 = select i1 %207 ? i32 %196 : i32 %197;
    i32* %209 = getelementptr &(i32* %93)[i32 %208];
    i32 %210 = add i32 %196, i32 1;
    i32* %211 = getelementptr &(i32* %93)[i32 %210];
    i32 %212 = load i32* %211;
    i32 %213 = load i32* %209;
    i1 %214 = icmp slt i32 %212, i32 %213;
    i32 %215 = select i1 %214 ? i32 %210 : i32 %208;
    i32* %216 = getelementptr &(i32* %93)[i32 %215];
    i32 %217 = add i32 %196, i32 2;
    i32* %218 = getelementptr &(i32* %93)[i32 %217];
    i32 %219 = load i32* %218;
    i32 %220 = load i32* %216;
    i1 %221 = icmp slt i32 %219, i32 %220;
    i32 %222 = select i1 %221 ? i32 %217 : i32 %215;
    i32* %223 = getelementptr &(i32* %93)[i32 %222];
    i32 %224 = add i32 %196, i32 3;
    i32* %225 = getelementptr &(i32* %93)[i32 %224];
    i32 %226 = load i32* %225;
    i32 %227 = load i32* %223;
    i1 %228 = icmp slt i32 %226, i32 %227;
    i32 %229 = select i1 %228 ? i32 %224 : i32 %222;
    ubr ^super.header2;
  ^b11:
    i32 %230 = add i32 %131, i32 1;
    ubr ^while.header7;
  ^while.body16:
    i32 %231 = phi [^super.header2, i32 %196] [^while.body16, i32 %239];
    i32 %232 = phi [^super.header2, i32 %197] [^while.body16, i32 %238];
    i32* %233 = getelementptr &(i32* %93)[i32 %231];
    i32 %234 = load i32* %233;
    i32* %235 = getelementptr &(i32* %93)[i32 %232];
    i32 %236 = load i32* %235;
    i1 %237 = icmp slt i32 %234, i32 %236;
    i32 %238 = select i1 %237 ? i32 %231 : i32 %232;
    i32 %239 = add i32 %231, i32 1;
    i1 %240 = icmp sgt i32 %27, i32 %239;
    cbr i1 %240(prob = 0.97), ^while.body16, ^b8;
}
