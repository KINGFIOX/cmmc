internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %8];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 true] [^b, i1 %4];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    i32 %7 = select i1 %6 ? i32 1 : i32 %1;
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %9 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp le i32 %10, i32 57;
    ubr ^b3;
^b3:
    i1 %13 = phi [^while.header1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %14 = mul i32 %9, i32 10;
    i32 %15 = add i32 %10, i32 -48;
    i32 %16 = add i32 %15, i32 %14;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b4:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %19 = neg i32 %9;
    ubr ^b5;
^b5:
    i32 %20 = phi [^b4, i32 %9] [^if.then, i32 %19];
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    i32 %22 = phi [^b5, i32 0] [^b16, i32 %87];
    i32* %23 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %22];
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header2;
^b6:
    i32* %25 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    ubr ^while.header3;
^while.header2:
    i32 %26 = phi [^while.body2, i32 0] [^while.body4, i32 %37];
    i32 %27 = phi [^while.body2, i32 %24] [^while.body4, i32 %38];
    i1 %28 = scmp lt i32 %27, i32 48;
    cbr i1 %28(prob = 0.5), ^b8, ^b7;
^while.header3:
    i32 %29 = phi [^b6, i32 0] [^while.header5, i32 %33];
    i1 %30 = scmp lt i32 %29, i32 %20;
    cbr i1 %30(prob = 0.97), ^while.body3, ^b9;
^b7:
    i1 %31 = scmp gt i32 %27, i32 57;
    ubr ^b8;
^while.body3:
    i32* %32 = getelementptr &(i32* %25)[i32 %29];
    i32 %33 = add i32 %29, i32 1;
    ubr ^while.header5;
^b8:
    i1 %34 = phi [^while.header2, i1 true] [^b7, i1 %31];
    cbr i1 %34(prob = 0.97), ^while.body4, ^while.header4;
^b9:
    i32* %35 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header6;
^while.body4:
    i1 %36 = scmp eq i32 %27, i32 45;
    i32 %37 = select i1 %36 ? i32 1 : i32 %26;
    i32 %38 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header4:
    i32 %39 = phi [^b8, i32 0] [^while.body7, i32 %67];
    i32 %40 = phi [^b8, i32 %27] [^while.body7, i32 %68];
    i1 %41 = scmp gt i32 %40, i32 47;
    cbr i1 %41(prob = 0.5), ^b10, ^b11;
^while.header5:
    i32 %42 = phi [^while.body3, i32 %33] [^b12, i32 %69];
    i1 %43 = scmp lt i32 %42, i32 %20;
    cbr i1 %43(prob = 0.97), ^while.body6, ^while.header3;
^while.header6:
    i32 %44 = phi [^b9, i32 -100] [^while.body5, i32 %54];
    i32 %45 = phi [^b9, i32 0] [^while.body5, i32 %55];
    i1 %46 = scmp lt i32 %45, i32 %20;
    cbr i1 %46(prob = 0.97), ^while.body5, ^while.header7;
^b10:
    i1 %47 = scmp le i32 %40, i32 57;
    ubr ^b11;
^while.body5:
    i32* %48 = getelementptr &(i32* %35)[i32 %45];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %51, i32 1;
    store i32* %50 with i32 %52;
    i1 %53 = scmp gt i32 %49, i32 %44;
    i32 %54 = select i1 %53 ? i32 %49 : i32 %44;
    i32 %55 = add i32 %45, i32 1;
    ubr ^while.header6;
^while.body6:
    i32 %56 = load i32* %32;
    i32* %57 = getelementptr &(i32* %25)[i32 %42];
    i32 %58 = load i32* %57;
    i1 %59 = scmp gt i32 %56, i32 %58;
    cbr i1 %59(prob = 0.5), ^if.then1, ^b12;
^b11:
    i1 %60 = phi [^while.header4, i1 false] [^b10, i1 %47];
    cbr i1 %60(prob = 0.97), ^while.body7, ^b14;
^while.header7:
    i32 %61 = phi [^while.header6, i32 0] [^b15, i32 %76];
    i32 %62 = phi [^while.header6, i32 0] [^b15, i32 %77];
    i1 %63 = scmp le i32 %62, i32 %44;
    cbr i1 %63(prob = 0.97), ^while.body8, ^b13;
^if.then1:
    i32 %64 = load i32* %32;
    store i32* %32 with i32 %58;
    store i32* %57 with i32 %64;
    ubr ^b12;
^while.body7:
    i32 %65 = mul i32 %39, i32 10;
    i32 %66 = add i32 %40, i32 -48;
    i32 %67 = add i32 %66, i32 %65;
    i32 %68 = call () -> i32 @getch();
    ubr ^while.header4;
^b12:
    i32 %69 = add i32 %42, i32 1;
    ubr ^while.header5;
^b13:
    i32* %70 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    ubr ^while.header8;
^b14:
    i1 %71 = scmp neq i32 %26, i32 0;
    cbr i1 %71(prob = 0.5), ^if.then2, ^b16;
^while.body8:
    i32* %72 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %62];
    i32 %73 = load i32* %72;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body9, ^b15;
^if.then2:
    i32 %75 = neg i32 %39;
    ubr ^b16;
^b15:
    i32 %76 = phi [^while.body8, i32 %61] [^while.body9, i32 %81];
    i32 %77 = add i32 %62, i32 1;
    ubr ^while.header7;
^while.body9:
    i32 %78 = phi [^while.body8, i32 %73] [^while.body9, i32 %82];
    i32 %79 = phi [^while.body8, i32 %61] [^while.body9, i32 %81];
    i32* %80 = getelementptr &(i32* %35)[i32 %79];
    store i32* %80 with i32 %62;
    i32 %81 = add i32 %79, i32 1;
    i32 %82 = add i32 %78, i32 -1;
    i1 %83 = scmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.97), ^while.body9, ^b15;
^b16:
    i32 %84 = phi [^b14, i32 %39] [^if.then2, i32 %75];
    store i32* %23 with i32 %84;
    i32* %85 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %22];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %22];
    store i32* %86 with i32 %84;
    i32 %87 = add i32 %22, i32 1;
    i1 %88 = scmp neq i32 %87, i32 %20;
    cbr i1 %88(prob = 0.97), ^while.body2, ^b6;
^while.header8:
    i32 %89 = phi [^b13, i32 0] [^b18, i32 %91];
    i1 %90 = scmp lt i32 %89, i32 %20;
    cbr i1 %90(prob = 0.97), ^while.body10, ^b17;
^while.body10:
    i32 %91 = add i32 %89, i32 1;
    i1 %92 = scmp lt i32 %91, i32 %20;
    cbr i1 %92(prob = 0.97), ^while.body11, ^b18;
^b17:
    cbr i1 %21(prob = 0.97), ^while.body12, ^while.header9;
^b18:
    i32 %93 = phi [^while.body10, i32 %89] [^while.body11, i32 %105];
    i32* %94 = getelementptr &(i32* %70)[i32 %89];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %70)[i32 %93];
    i32 %97 = load i32* %96;
    store i32* %94 with i32 %97;
    store i32* %96 with i32 %95;
    ubr ^while.header8;
^while.body11:
    i32 %98 = phi [^while.body10, i32 %91] [^while.body11, i32 %106];
    i32 %99 = phi [^while.body10, i32 %89] [^while.body11, i32 %105];
    i32* %100 = getelementptr &(i32* %70)[i32 %98];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %70)[i32 %99];
    i32 %103 = load i32* %102;
    i1 %104 = scmp lt i32 %101, i32 %103;
    i32 %105 = select i1 %104 ? i32 %98 : i32 %99;
    i32 %106 = add i32 %98, i32 1;
    i1 %107 = scmp lt i32 %106, i32 %20;
    cbr i1 %107(prob = 0.97), ^while.body11, ^b18;
^while.body12:
    i32 %108 = phi [^b17, i32 0] [^while.body12, i32 %118];
    i32* %109 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %108];
    i32 %112 = load i32* %111;
    i32 %113 = sub i32 %110, i32 %112;
    store i32* %109 with i32 %113;
    i32* %114 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %108];
    i32 %115 = load i32* %114;
    i32 %116 = sub i32 %115, i32 %113;
    i32 %117 = sub i32 %116, i32 %112;
    store i32* %114 with i32 %117;
    i32 %118 = add i32 %108, i32 1;
    i32 %119 = sub i32 %20, i32 %118;
    i1 %120 = scmp neq i32 %119, i32 0;
    cbr i1 %120(prob = 0.97), ^while.body12, ^while.header9;
^while.header9:
    i32 %121 = phi [^b17, i32 0] [^while.body12, i32 0] [^b21, i32 %131];
    i32 %122 = sub i32 %121, i32 %20;
    i1 %123 = scmp neq i32 %122, i32 0;
    cbr i1 %123(prob = 0.97), ^while.body13, ^b19;
^while.body13:
    i32* %124 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %121];
    i32 %125 = load i32* %124;
    i1 %126 = scmp neq i32 %125, i32 0;
    cbr i1 %126(prob = 0.5), ^b19, ^b20;
^b19:
    i32 %127 = phi [^while.header9, i32 -123] [^while.body13, i32 1] [^b20, i32 2];
    ret i32 %127;
^b20:
    i32* %128 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %121];
    i32 %129 = load i32* %128;
    i1 %130 = scmp neq i32 %129, i32 0;
    cbr i1 %130(prob = 0.5), ^b19, ^b21;
^b21:
    i32 %131 = add i32 %121, i32 1;
    ubr ^while.header9;
}
