internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %5 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %6 = scmp eq i32 %4, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^while.guard:
    i32 %7 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %8 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %9 = scmp lt i32 %7, i32 58;
    i1 %10 = scmp gt i32 %7, i32 47;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.48), ^while.body1, ^b1;
^if.then:
    ubr ^b;
^b:
    i32 %12 = phi [^while.body, i32 %5] [^if.then, i32 1];
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b4, ^b3;
^while.body1:
    i32 %15 = phi [^while.guard, i32 %7] [^b5, i32 %20];
    i32 %16 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i32 %17 = add i32 %15, i32 -48;
    i32 %18 = mul i32 %16, i32 10;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = call () -> i32 @getch();
    i1 %21 = scmp gt i32 %20, i32 47;
    cbr i1 %21(prob = 0.5), ^b2, ^b5;
^b1:
    i32 %22 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i1 %23 = scmp neq i32 %8, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b6;
^b2:
    i1 %24 = scmp le i32 %20, i32 57;
    ubr ^b5;
^b3:
    i1 %25 = scmp gt i32 %13, i32 57;
    ubr ^b4;
^if.then1:
    i32 %26 = neg i32 %22;
    ubr ^b6;
^b4:
    i1 %27 = phi [^b, i1 true] [^b3, i1 %25];
    cbr i1 %27(prob = 0.97), ^while.body, ^while.guard;
^b5:
    i1 %28 = phi [^while.body1, i1 false] [^b2, i1 %24];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
^b6:
    i32 %29 = phi [^b1, i32 %22] [^if.then1, i32 %26];
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body2, ^b7;
^while.body2:
    i32 %31 = phi [^b6, i32 0] [^b17, i32 %32];
    i32 %32 = add i32 %31, i32 1;
    i1 %33 = scmp neq i32 %32, i32 %29;
    i32* %34 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %31];
    i32* %35 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %31];
    i32* %36 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %31];
    i32 %37 = call () -> i32 @getch();
    i1 %38 = scmp lt i32 %37, i32 48;
    i1 %39 = scmp gt i32 %37, i32 57;
    i1 %40 = or i1 %38, i1 %39;
    cbr i1 %40(prob = 0.98), ^while.body3, ^while.guard1;
^b7:
    i1 %41 = scmp gt i32 %29, i32 0;
    i32* %42 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    i32* %43 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    i32* %44 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    cbr i1 %41(prob = 0.97), ^while.body4, ^entry1;
^while.body3:
    i32 %45 = phi [^while.body2, i32 %37] [^b14, i32 %57];
    i32 %46 = phi [^while.body2, i32 0] [^b14, i32 %56];
    i1 %47 = scmp eq i32 %45, i32 45;
    cbr i1 %47(prob = 0.5), ^if.then2, ^b8;
^while.guard1:
    i32 %48 = phi [^while.body2, i32 %37] [^b14, i32 %57];
    i32 %49 = phi [^while.body2, i32 0] [^b14, i32 %56];
    i1 %50 = scmp lt i32 %48, i32 58;
    i1 %51 = scmp gt i32 %48, i32 47;
    i1 %52 = and i1 %50, i1 %51;
    cbr i1 %52(prob = 0.48), ^while.body5, ^b9;
^while.body4:
    i32 %53 = phi [^b7, i32 0] [^b10, i32 %85];
    i32 %54 = add i32 %53, i32 1;
    i1 %55 = scmp lt i32 %54, i32 %29;
    cbr i1 %55(prob = 0.97), ^while.body6, ^b10;
^entry1:
    cbr i1 %41(prob = 0.97), ^while.body7, ^b11;
^if.then2:
    ubr ^b8;
^b8:
    i32 %56 = phi [^while.body3, i32 %46] [^if.then2, i32 1];
    i32 %57 = call () -> i32 @getch();
    i1 %58 = scmp lt i32 %57, i32 48;
    cbr i1 %58(prob = 0.5), ^b14, ^b13;
^while.body5:
    i32 %59 = phi [^while.guard1, i32 %48] [^b15, i32 %64];
    i32 %60 = phi [^while.guard1, i32 0] [^b15, i32 %63];
    i32 %61 = add i32 %59, i32 -48;
    i32 %62 = mul i32 %60, i32 10;
    i32 %63 = add i32 %61, i32 %62;
    i32 %64 = call () -> i32 @getch();
    i1 %65 = scmp gt i32 %64, i32 47;
    cbr i1 %65(prob = 0.5), ^b12, ^b15;
^while.body6:
    i32 %66 = phi [^while.body4, i32 %54] [^b16, i32 %97];
    i32 %67 = phi [^while.body4, i32 %53] [^b16, i32 %96];
    i32* %68 = getelementptr &(i32* %42)[i32 %66];
    i32* %69 = getelementptr &(i32* %42)[i32 %67];
    i32 %70 = load i32* %69;
    i32 %71 = load i32* %68;
    i1 %72 = scmp gt i32 %70, i32 %71;
    cbr i1 %72(prob = 0.5), ^if.then3, ^b16;
^b9:
    i32 %73 = phi [^while.guard1, i32 0] [^b15, i32 %63];
    i1 %74 = scmp neq i32 %49, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then4, ^b17;
^while.body7:
    i32 %75 = phi [^entry1, i32 -100] [^b18, i32 %100];
    i32 %76 = phi [^entry1, i32 0] [^b18, i32 %102];
    i32 %77 = phi [^entry1, i32 -100] [^b18, i32 %101];
    i32* %78 = getelementptr &(i32* %43)[i32 %76];
    i32 %79 = load i32* %78;
    i1 %80 = scmp gt i32 %79, i32 %77;
    i32* %81 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %79];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %82, i32 1;
    store i32* %81 with i32 %83;
    cbr i1 %80(prob = 0.5), ^if.then5, ^b18;
^b10:
    i32 %84 = phi [^while.body4, i32 %53] [^b16, i32 %96];
    i32 %85 = add i32 %84, i32 1;
    i1 %86 = scmp lt i32 %85, i32 %29;
    cbr i1 %86(prob = 0.97), ^while.body4, ^entry1;
^b11:
    i32 %87 = phi [^entry1, i32 -100] [^b18, i32 %100];
    i32 %88 = phi [^entry1, i32 -100] [^b18, i32 %101];
    i1 %89 = scmp gt i32 %88, i32 -1;
    cbr i1 %89(prob = 0.97), ^while.body8, ^entry2;
^b12:
    i1 %90 = scmp le i32 %64, i32 57;
    ubr ^b15;
^if.then3:
    i32 %91 = load i32* %69;
    store i32* %69 with i32 %71;
    store i32* %68 with i32 %91;
    ubr ^b16;
^b13:
    i1 %92 = scmp gt i32 %57, i32 57;
    ubr ^b14;
^if.then4:
    i32 %93 = neg i32 %73;
    ubr ^b17;
^if.then5:
    ubr ^b18;
^b14:
    i1 %94 = phi [^b8, i1 true] [^b13, i1 %92];
    cbr i1 %94(prob = 0.97), ^while.body3, ^while.guard1;
^b15:
    i1 %95 = phi [^while.body5, i1 false] [^b12, i1 %90];
    cbr i1 %95(prob = 0.97), ^while.body5, ^b9;
^b16:
    i32 %96 = phi [^while.body6, i32 %67] [^if.then3, i32 %53];
    i32 %97 = add i32 %66, i32 1;
    i1 %98 = scmp lt i32 %97, i32 %29;
    cbr i1 %98(prob = 0.97), ^while.body6, ^b10;
^b17:
    i32 %99 = phi [^b9, i32 %73] [^if.then4, i32 %93];
    store i32* %34 with i32 %99;
    store i32* %35 with i32 %99;
    store i32* %36 with i32 %99;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b7;
^b18:
    i32 %100 = phi [^while.body7, i32 %75] [^if.then5, i32 %79];
    i32 %101 = phi [^while.body7, i32 %77] [^if.then5, i32 %79];
    i32 %102 = add i32 %76, i32 1;
    i1 %103 = scmp lt i32 %102, i32 %29;
    cbr i1 %103(prob = 0.97), ^while.body7, ^b11;
^while.body8:
    i32 %104 = phi [^b11, i32 0] [^b19, i32 %118];
    i32 %105 = phi [^b11, i32 0] [^b19, i32 %121];
    i32 %106 = phi [^b11, i32 %88] [^b19, i32 %119];
    i32 %107 = phi [^b11, i32 0] [^b19, i32 %120];
    i32* %108 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %105];
    i32 %109 = load i32* %108;
    i1 %110 = scmp neq i32 %109, i32 0;
    cbr i1 %110(prob = 0.97), ^while.body9, ^b19;
^entry2:
    cbr i1 %41(prob = 0.97), ^while.body10, ^b20;
^while.body9:
    i32 %111 = phi [^while.body8, i32 %104] [^while.body9, i32 %114];
    i32 %112 = phi [^while.body8, i32 %109] [^while.body9, i32 %115];
    i32 %113 = phi [^while.body8, i32 %107] [^while.body9, i32 %114];
    i32 %114 = add i32 %111, i32 1;
    i32 %115 = add i32 %112, i32 -1;
    i1 %116 = scmp neq i32 %115, i32 0;
    i32* %117 = getelementptr &(i32* %43)[i32 %113];
    store i32* %117 with i32 %105;
    cbr i1 %116(prob = 0.97), ^while.body9, ^b19;
^b19:
    i32 %118 = phi [^while.body8, i32 %104] [^while.body9, i32 %114];
    i32 %119 = phi [^while.body8, i32 %106] [^while.body9, i32 %87];
    i32 %120 = phi [^while.body8, i32 %107] [^while.body9, i32 %114];
    i32 %121 = add i32 %105, i32 1;
    i1 %122 = scmp le i32 %121, i32 %119;
    cbr i1 %122(prob = 0.97), ^while.body8, ^entry2;
^while.body10:
    i32 %123 = phi [^entry2, i32 0] [^b21, i32 %124];
    i32 %124 = add i32 %123, i32 1;
    i1 %125 = scmp lt i32 %124, i32 %29;
    cbr i1 %125(prob = 0.97), ^while.body11, ^b21;
^b20:
    cbr i1 %30(prob = 0.97), ^while.body12, ^b22;
^while.body11:
    i32 %126 = phi [^while.body10, i32 %123] [^b23, i32 %154];
    i32 %127 = phi [^while.body10, i32 %123] [^b23, i32 %155];
    i32 %128 = phi [^while.body10, i32 %124] [^b23, i32 %156];
    i32* %129 = getelementptr &(i32* %44)[i32 %127];
    i32* %130 = getelementptr &(i32* %44)[i32 %128];
    i32 %131 = load i32* %130;
    i32 %132 = load i32* %129;
    i1 %133 = scmp lt i32 %131, i32 %132;
    cbr i1 %133(prob = 0.5), ^if.then6, ^b23;
^while.body12:
    i32 %134 = phi [^b20, i32 0] [^while.body12, i32 %135];
    i32 %135 = add i32 %134, i32 1;
    i32 %136 = sub i32 %29, i32 %135;
    i1 %137 = scmp neq i32 %136, i32 0;
    i32* %138 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %134];
    i32* %139 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %134];
    i32 %140 = load i32* %139;
    i32 %141 = load i32* %138;
    i32 %142 = sub i32 %140, i32 %141;
    store i32* %139 with i32 %142;
    i32* %143 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %134];
    i32 %144 = load i32* %143;
    i32 %145 = sub i32 %144, i32 %142;
    i32 %146 = sub i32 %145, i32 %141;
    store i32* %143 with i32 %146;
    cbr i1 %137(prob = 0.97), ^while.body12, ^b22;
^b21:
    i32 %147 = phi [^while.body10, i32 %123] [^b23, i32 %154];
    i32 %148 = phi [^while.body10, i32 %123] [^b23, i32 %155];
    i32* %149 = getelementptr &(i32* %44)[i32 %123];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %44)[i32 %147];
    i32* %152 = getelementptr &(i32* %44)[i32 %148];
    i32 %153 = load i32* %152;
    store i32* %149 with i32 %153;
    store i32* %151 with i32 %150;
    cbr i1 %125(prob = 0.97), ^while.body10, ^b20;
^b22:
    cbr i1 %30(prob = 0.97), ^while.body13, ^b24;
^if.then6:
    ubr ^b23;
^b23:
    i32 %154 = phi [^while.body11, i32 %126] [^if.then6, i32 %128];
    i32 %155 = phi [^while.body11, i32 %127] [^if.then6, i32 %128];
    i32 %156 = add i32 %128, i32 1;
    i1 %157 = scmp lt i32 %156, i32 %29;
    cbr i1 %157(prob = 0.97), ^while.body11, ^b21;
^while.body13:
    i32 %158 = phi [^b22, i32 0] [^b26, i32 %166];
    i32* %159 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %158];
    i32 %160 = load i32* %159;
    i1 %161 = scmp neq i32 %160, i32 0;
    cbr i1 %161(prob = 0.5), ^b24, ^b25;
^b24:
    i32 %162 = phi [^b22, i32 -123] [^while.body13, i32 1] [^b25, i32 2] [^b26, i32 -123];
    ret i32 %162;
^b25:
    i32* %163 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %158];
    i32 %164 = load i32* %163;
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.5), ^b24, ^b26;
^b26:
    i32 %166 = add i32 %158, i32 1;
    i32 %167 = sub i32 %166, i32 %29;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.97), ^while.body13, ^b24;
}
