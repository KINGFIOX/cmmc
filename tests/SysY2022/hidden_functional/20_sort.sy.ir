internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i1 %24 = icmp neq i32 %12, i32 0;
    i32 %25 = neg i32 %23;
    i32 %26 = select i1 %24 ? i32 %25 : i32 %23;
    i1 %27 = icmp neq i32 %26, i32 0;
    i32 %28 = add i32 %26, i32 -4;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %27(prob = 0.984615), ^while.body2, ^b1;
  ^b1:
    i32* %32 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body2:
    i32 %33 = phi [^b, i32 0] [^b2, i32 %69];
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = icmp ugt i32 %35, i32 9;
    i32* %37 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %33];
    cbr i1 %36(prob = 0.984615), ^while.body3, ^45;
  ^while.body3:
    i32 %38 = phi [^while.body2, i32 %34] [^while.body3, i32 %40];
    i32 %39 = phi [^while.body2, i32 0] [^while.body3, i32 %44];
    i32 %40 = call () -> i32 @getch();
    i32 %41 = add i32 %40, i32 -48;
    i1 %42 = icmp ugt i32 %41, i32 9;
    i1 %43 = icmp eq i32 %38, i32 45;
    i32 %44 = select i1 %43 ? i32 1 : i32 %39;
    cbr i1 %42(prob = 0.984615), ^while.body3, ^45;
  ^45:
    i32 %46 = phi [^while.body2, i32 %34] [^while.body3, i32 %40];
    i32 %47 = phi [^while.body2, i32 0] [^while.body3, i32 %44];
    i32 %48 = add i32 %46, i32 -48;
    i1 %49 = icmp ult i32 %48, i32 10;
    cbr i1 %49(prob = 0.984615), ^while.body4, ^b2;
  ^while.header:
    i32 %50 = phi [^b1, i32 0] [^while.body5, i32 %60] [^b5, i32 %60];
    i1 %51 = icmp sgt i32 %26, i32 %50;
    cbr i1 %51(prob = 0.984615), ^while.body5, ^b3;
  ^while.body4:
    i32 %52 = phi [^45, i32 %46] [^while.body4, i32 %54];
    i32 %53 = phi [^45, i32 0] [^while.body4, i32 %59];
    i32 %54 = call () -> i32 @getch();
    i32 %55 = add i32 %54, i32 -48;
    i1 %56 = icmp ult i32 %55, i32 10;
    i32 %57 = mul i32 %53, i32 10;
    i32 %58 = add i32 %57, i32 -48;
    i32 %59 = add i32 %52, i32 %58;
    cbr i1 %56(prob = 0.984615), ^while.body4, ^b2;
  ^while.body5:
    i32 %60 = add i32 %50, i32 1;
    i1 %61 = icmp sle i32 %26, i32 %60;
    i32* %62 = getelementptr &(i32* %32)[i32 %50];
    cbr i1 %61(prob = 0.0153846), ^while.header, ^while.body6;
  ^b2:
    i32 %63 = phi [^45, i32 0] [^while.body4, i32 %59];
    i1 %64 = icmp neq i32 %47, i32 0;
    i32 %65 = neg i32 %63;
    i32 %66 = select i1 %64 ? i32 %65 : i32 %63;
    store i32* %37 with i32 %66;
    i32* %67 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %33];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %33];
    store i32* %68 with i32 %66;
    i32 %69 = add i32 %33, i32 1;
    i1 %70 = icmp neq i32 %26, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body2, ^b1;
  ^b3:
    i32* %71 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    i1 %72 = icmp sgt i32 %26, i32 0;
    [400020 * i32]* %73 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %72(prob = 0.984615), ^super.header, ^b4;
  ^b4:
    i32 %74 = phi [^b3, i32 -100] [^while.body8, i32 %116];
    ubr ^while.header1;
  ^while.body6:
    i32 %75 = phi [^while.body5, i32 %60] [^b5, i32 %119];
    i32* %76 = getelementptr &(i32* %32)[i32 %75];
    i32 %77 = load i32* %62;
    i32 %78 = load i32* %76;
    i1 %79 = icmp sgt i32 %77, i32 %78;
    cbr i1 %79(prob = 0.5), ^if.then, ^b5;
  ^super.header:
    i1 %80 = icmp sgt i32 %26, i32 4;
    cbr i1 %80(prob = 0.941176), ^while.body7, ^while.body8;
  ^if.then:
    store i32* %62 with i32 %78;
    store i32* %76 with i32 %77;
    ubr ^b5;
  ^while.body7:
    i32 %81 = phi [^super.header, i32 -100] [^while.body7, i32 %103];
    i32 %82 = phi [^super.header, i32 0] [^while.body7, i32 %107];
    i32* %83 = getelementptr &(i32* %71)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %86, i32 1;
    store i32* %85 with i32 %87;
    i32* %88 = getelementptr &(i32* %83)[i64 1];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %91, i32 1;
    store i32* %90 with i32 %92;
    i32 %93 = smax i32 %81, i32 %84;
    i32 %94 = smax i32 %89, i32 %93;
    i32* %95 = getelementptr &(i32* %83)[i64 2];
    i32 %96 = load i32* %95;
    i32 %97 = smax i32 %94, i32 %96;
    i32* %98 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %96];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %99, i32 1;
    store i32* %98 with i32 %100;
    i32* %101 = getelementptr &(i32* %83)[i64 3];
    i32 %102 = load i32* %101;
    i32 %103 = smax i32 %97, i32 %102;
    i32* %104 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %102];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %105, i32 1;
    store i32* %104 with i32 %106;
    i32 %107 = add i32 %82, i32 4;
    i1 %108 = icmp sgt i32 %28, i32 %107;
    cbr i1 %108(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %109 = phi [^super.header, i32 0] [^while.body7, i32 %107] [^while.body8, i32 %117];
    i32 %110 = phi [^super.header, i32 -100] [^while.body7, i32 %103] [^while.body8, i32 %116];
    i32* %111 = getelementptr &(i32* %71)[i32 %109];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %112];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %114, i32 1;
    store i32* %113 with i32 %115;
    i32 %116 = smax i32 %110, i32 %112;
    i32 %117 = add i32 %109, i32 1;
    i1 %118 = icmp sgt i32 %26, i32 %117;
    cbr i1 %118(prob = 0.75), ^while.body8, ^b4;
  ^b5:
    i32 %119 = add i32 %75, i32 1;
    i1 %120 = icmp sgt i32 %26, i32 %119;
    cbr i1 %120(prob = 0.984615), ^while.body6, ^while.header;
  ^while.header1:
    i32 %121 = phi [^b4, i32 0] [^b7, i32 %128];
    i32 %122 = phi [^b4, i32 0] [^b7, i32 %129];
    i1 %123 = icmp sge i32 %74, i32 %122;
    cbr i1 %123(prob = 0.984615), ^while.body9, ^b6;
  ^b6:
    i32* %124 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.body9:
    i32* %125 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %122];
    i32 %126 = load i32* %125;
    i1 %127 = icmp neq i32 %126, i32 0;
    cbr i1 %127(prob = 0.984615), ^while.body10, ^b7;
  ^b7:
    i32 %128 = phi [^while.body9, i32 %121] [^while.body10, i32 %135];
    i32 %129 = add i32 %122, i32 1;
    ubr ^while.header1;
  ^while.body10:
    i32 %130 = phi [^while.body9, i32 %126] [^while.body10, i32 %133];
    i32 %131 = phi [^while.body9, i32 %121] [^while.body10, i32 %135];
    i32* %132 = getelementptr &(i32* %71)[i32 %131];
    store i32* %132 with i32 %122;
    i32 %133 = add i32 %130, i32 -1;
    i1 %134 = icmp neq i32 %133, i32 0;
    i32 %135 = add i32 %131, i32 1;
    cbr i1 %134(prob = 0.984615), ^while.body10, ^b7;
  ^while.header2:
    i32 %136 = phi [^b6, i32 0] [^b9, i32 %138];
    i1 %137 = icmp sgt i32 %26, i32 %136;
    cbr i1 %137(prob = 0.984615), ^while.body11, ^b8;
  ^while.body11:
    i32 %138 = add i32 %136, i32 1;
    i1 %139 = icmp sgt i32 %26, i32 %138;
    cbr i1 %139(prob = 0.984615), ^super.header1, ^b9;
  ^b8:
    cbr i1 %27(prob = 0.984615), ^while.body12, ^while.header3;
  ^b9:
    i32 %140 = phi [^while.body11, i32 %136] [^while.body14, i32 %201];
    i32* %141 = getelementptr &(i32* %124)[i32 %136];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %124)[i32 %140];
    i32 %144 = load i32* %143;
    store i32* %141 with i32 %144;
    store i32* %143 with i32 %142;
    ubr ^while.header2;
  ^super.header1:
    i32 %145 = add i32 %136, i32 5;
    i1 %146 = icmp sgt i32 %26, i32 %145;
    cbr i1 %146(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body12:
    i32 %147 = phi [^b8, i32 0] [^while.body12, i32 %157];
    i32* %148 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %147];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %147];
    i32 %151 = load i32* %150;
    i32 %152 = sub i32 %149, i32 %151;
    store i32* %148 with i32 %152;
    i32* %153 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %147];
    i32 %154 = load i32* %153;
    i32 %155 = sub i32 %154, i32 %152;
    i32 %156 = sub i32 %155, i32 %151;
    store i32* %153 with i32 %156;
    i32 %157 = add i32 %147, i32 1;
    i32 %158 = sub i32 %26, i32 %157;
    i1 %159 = icmp neq i32 %158, i32 0;
    cbr i1 %159(prob = 0.984615), ^while.body12, ^while.header3;
  ^while.header3:
    i32 %160 = phi [^b8, i32 0] [^while.body12, i32 0] [^b12, i32 %211];
    i32 %161 = sub i32 %160, i32 %26;
    i1 %162 = icmp neq i32 %161, i32 0;
    cbr i1 %162(prob = 0.984615), ^while.body15, ^b10;
  ^while.body13:
    i32 %163 = phi [^super.header1, i32 %136] [^while.body13, i32 %191];
    i32 %164 = phi [^super.header1, i32 %138] [^while.body13, i32 %192];
    i32* %165 = getelementptr &(i32* %124)[i32 %164];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %124)[i32 %163];
    i32 %168 = load i32* %167;
    i1 %169 = icmp slt i32 %166, i32 %168;
    i32 %170 = select i1 %169 ? i32 %164 : i32 %163;
    i32* %171 = getelementptr &(i32* %124)[i32 %170];
    i32 %172 = add i32 %164, i32 1;
    i32* %173 = getelementptr &(i32* %124)[i32 %172];
    i32 %174 = load i32* %173;
    i32 %175 = load i32* %171;
    i1 %176 = icmp slt i32 %174, i32 %175;
    i32 %177 = select i1 %176 ? i32 %172 : i32 %170;
    i32* %178 = getelementptr &(i32* %124)[i32 %177];
    i32 %179 = add i32 %164, i32 2;
    i32* %180 = getelementptr &(i32* %124)[i32 %179];
    i32 %181 = load i32* %180;
    i32 %182 = load i32* %178;
    i1 %183 = icmp slt i32 %181, i32 %182;
    i32 %184 = select i1 %183 ? i32 %179 : i32 %177;
    i32* %185 = getelementptr &(i32* %124)[i32 %184];
    i32 %186 = add i32 %164, i32 3;
    i32* %187 = getelementptr &(i32* %124)[i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = load i32* %185;
    i1 %190 = icmp slt i32 %188, i32 %189;
    i32 %191 = select i1 %190 ? i32 %186 : i32 %184;
    i32 %192 = add i32 %164, i32 4;
    i1 %193 = icmp sgt i32 %28, i32 %192;
    cbr i1 %193(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %194 = phi [^super.header1, i32 %138] [^while.body13, i32 %192] [^while.body14, i32 %202];
    i32 %195 = phi [^super.header1, i32 %136] [^while.body13, i32 %191] [^while.body14, i32 %201];
    i32* %196 = getelementptr &(i32* %124)[i32 %194];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %124)[i32 %195];
    i32 %199 = load i32* %198;
    i1 %200 = icmp slt i32 %197, i32 %199;
    i32 %201 = select i1 %200 ? i32 %194 : i32 %195;
    i32 %202 = add i32 %194, i32 1;
    i1 %203 = icmp sgt i32 %26, i32 %202;
    cbr i1 %203(prob = 0.75), ^while.body14, ^b9;
  ^while.body15:
    i32* %204 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %160];
    i32 %205 = load i32* %204;
    i1 %206 = icmp neq i32 %205, i32 0;
    cbr i1 %206(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %207 = phi [^while.header3, i32 -123] [^while.body15, i32 1] [^b11, i32 2];
    ret i32 %207;
  ^b11:
    i32* %208 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %160];
    i32 %209 = load i32* %208;
    i1 %210 = icmp neq i32 %209, i32 0;
    cbr i1 %210(prob = 0.5), ^b10, ^b12;
  ^b12:
    i32 %211 = add i32 %160, i32 1;
    ubr ^while.header3;
}
