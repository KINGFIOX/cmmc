internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp slt i32 %0, i32 48;
    i1 %2 = icmp sgt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^12;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp slt i32 %6, i32 48;
    i1 %8 = icmp sgt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = icmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^12;
  ^12:
    i32 %13 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %15 = add i32 %13, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %17 = phi [^12, i32 %13] [^while.body1, i32 %19];
    i32 %18 = phi [^12, i32 0] [^while.body1, i32 %24];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    i32 %22 = mul i32 %18, i32 10;
    i32 %23 = add i32 %22, i32 -48;
    i32 %24 = add i32 %17, i32 %23;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %25 = phi [^12, i32 0] [^while.body1, i32 %24];
    i1 %26 = icmp neq i32 %14, i32 0;
    i32 %27 = neg i32 %25;
    i32 %28 = select i1 %26 ? i32 %27 : i32 %25;
    i1 %29 = icmp neq i32 %28, i32 0;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %32 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b1;
  ^b1:
    i32* %33 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body2:
    i32 %34 = phi [^b, i32 0] [^b2, i32 %71];
    i32 %35 = call () -> i32 @getch();
    i1 %36 = icmp slt i32 %35, i32 48;
    i1 %37 = icmp sgt i32 %35, i32 57;
    i1 %38 = or i1 %36, i1 %37;
    i32* %39 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %34];
    cbr i1 %38(prob = 0.97), ^while.body3, ^48;
  ^while.body3:
    i32 %40 = phi [^while.body2, i32 %35] [^while.body3, i32 %42];
    i32 %41 = phi [^while.body2, i32 0] [^while.body3, i32 %47];
    i32 %42 = call () -> i32 @getch();
    i1 %43 = icmp slt i32 %42, i32 48;
    i1 %44 = icmp sgt i32 %42, i32 57;
    i1 %45 = or i1 %43, i1 %44;
    i1 %46 = icmp eq i32 %40, i32 45;
    i32 %47 = select i1 %46 ? i32 1 : i32 %41;
    cbr i1 %45(prob = 0.97), ^while.body3, ^48;
  ^48:
    i32 %49 = phi [^while.body2, i32 %35] [^while.body3, i32 %42];
    i32 %50 = phi [^while.body2, i32 0] [^while.body3, i32 %47];
    i32 %51 = add i32 %49, i32 -48;
    i1 %52 = icmp ult i32 %51, i32 10;
    cbr i1 %52(prob = 0.97), ^while.body5, ^b2;
  ^while.header:
    i32 %53 = phi [^b1, i32 0] [^while.header1, i32 %56];
    i1 %54 = icmp sgt i32 %28, i32 %53;
    cbr i1 %54(prob = 0.97), ^while.body4, ^b3;
  ^while.body4:
    i32* %55 = getelementptr &(i32* %33)[i32 %53];
    i32 %56 = add i32 %53, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %57 = phi [^48, i32 %49] [^while.body5, i32 %59];
    i32 %58 = phi [^48, i32 0] [^while.body5, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i32 %60 = add i32 %59, i32 -48;
    i1 %61 = icmp ult i32 %60, i32 10;
    i32 %62 = mul i32 %58, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %57, i32 %63;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b2;
  ^b2:
    i32 %65 = phi [^48, i32 0] [^while.body5, i32 %64];
    i1 %66 = icmp neq i32 %50, i32 0;
    i32 %67 = neg i32 %65;
    i32 %68 = select i1 %66 ? i32 %67 : i32 %65;
    store i32* %39 with i32 %68;
    i32* %69 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %34];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &([100005 * i32]* %32)[i64 0][i32 %34];
    store i32* %70 with i32 %68;
    i32 %71 = add i32 %34, i32 1;
    i1 %72 = icmp neq i32 %28, i32 %71;
    cbr i1 %72(prob = 0.97), ^while.body2, ^b1;
  ^b3:
    i32* %73 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    i1 %74 = icmp sgt i32 %28, i32 0;
    i32 %75 = add i32 %28, i32 -4;
    [400020 * i32]* %76 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %74(prob = 0.97), ^super.header, ^79;
  ^while.header1:
    i32 %77 = phi [^while.body4, i32 %56] [^b4, i32 %127];
    i1 %78 = icmp sgt i32 %28, i32 %77;
    cbr i1 %78(prob = 0.97), ^while.body6, ^while.header;
  ^79:
    i32 %80 = phi [^b3, i32 -100] [^while.body8, i32 %121];
    ubr ^while.header2;
  ^super.header:
    i1 %81 = icmp sgt i32 %28, i32 4;
    cbr i1 %81(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body6:
    i32* %82 = getelementptr &(i32* %33)[i32 %77];
    i32 %83 = load i32* %55;
    i32 %84 = load i32* %82;
    i1 %85 = icmp sgt i32 %83, i32 %84;
    cbr i1 %85(prob = 0.5), ^if.then, ^b4;
  ^while.body7:
    i32 %86 = phi [^super.header, i32 -100] [^while.body7, i32 %108];
    i32 %87 = phi [^super.header, i32 0] [^while.body7, i32 %112];
    i32* %88 = getelementptr &(i32* %73)[i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %91, i32 1;
    store i32* %90 with i32 %92;
    i32* %93 = getelementptr &(i32* %88)[i64 1];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %96, i32 1;
    store i32* %95 with i32 %97;
    i32 %98 = smax i32 %86, i32 %89;
    i32 %99 = smax i32 %94, i32 %98;
    i32* %100 = getelementptr &(i32* %88)[i64 2];
    i32 %101 = load i32* %100;
    i32 %102 = smax i32 %99, i32 %101;
    i32* %103 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %101];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %104, i32 1;
    store i32* %103 with i32 %105;
    i32* %106 = getelementptr &(i32* %88)[i64 3];
    i32 %107 = load i32* %106;
    i32 %108 = smax i32 %102, i32 %107;
    i32* %109 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %107];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %110, i32 1;
    store i32* %109 with i32 %111;
    i32 %112 = add i32 %87, i32 4;
    i1 %113 = icmp sgt i32 %75, i32 %112;
    cbr i1 %113(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %114 = phi [^super.header, i32 0] [^while.body7, i32 %112] [^while.body8, i32 %122];
    i32 %115 = phi [^super.header, i32 -100] [^while.body7, i32 %108] [^while.body8, i32 %121];
    i32* %116 = getelementptr &(i32* %73)[i32 %114];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %117];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %119, i32 1;
    store i32* %118 with i32 %120;
    i32 %121 = smax i32 %115, i32 %117;
    i32 %122 = add i32 %114, i32 1;
    i1 %123 = icmp sgt i32 %28, i32 %122;
    cbr i1 %123(prob = 0.75), ^while.body8, ^79;
  ^while.header2:
    i32 %124 = phi [^79, i32 0] [^b6, i32 %132];
    i32 %125 = phi [^79, i32 0] [^b6, i32 %133];
    i1 %126 = icmp sge i32 %80, i32 %125;
    cbr i1 %126(prob = 0.97), ^while.body9, ^b5;
  ^if.then:
    store i32* %55 with i32 %84;
    store i32* %82 with i32 %83;
    ubr ^b4;
  ^b4:
    i32 %127 = add i32 %77, i32 1;
    ubr ^while.header1;
  ^b5:
    i32* %128 = getelementptr &([100005 * i32]* %32)[i64 0][i64 0];
    ubr ^while.header3;
  ^while.body9:
    i32* %129 = getelementptr &([400020 * i32]* %76)[i64 0][i32 %125];
    i32 %130 = load i32* %129;
    i1 %131 = icmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.97), ^while.body10, ^b6;
  ^b6:
    i32 %132 = phi [^while.body9, i32 %124] [^while.body10, i32 %139];
    i32 %133 = add i32 %125, i32 1;
    ubr ^while.header2;
  ^while.body10:
    i32 %134 = phi [^while.body9, i32 %130] [^while.body10, i32 %137];
    i32 %135 = phi [^while.body9, i32 %124] [^while.body10, i32 %139];
    i32* %136 = getelementptr &(i32* %73)[i32 %135];
    store i32* %136 with i32 %125;
    i32 %137 = add i32 %134, i32 -1;
    i1 %138 = icmp neq i32 %137, i32 0;
    i32 %139 = add i32 %135, i32 1;
    cbr i1 %138(prob = 0.97), ^while.body10, ^b6;
  ^while.header3:
    i32 %140 = phi [^b5, i32 0] [^b8, i32 %142];
    i1 %141 = icmp sgt i32 %28, i32 %140;
    cbr i1 %141(prob = 0.97), ^while.body11, ^b7;
  ^while.body11:
    i32 %142 = add i32 %140, i32 1;
    i1 %143 = icmp sgt i32 %28, i32 %142;
    cbr i1 %143(prob = 0.97), ^super.header1, ^b8;
  ^b7:
    cbr i1 %29(prob = 0.97), ^while.body12, ^while.header4;
  ^b8:
    i32 %144 = phi [^while.body11, i32 %140] [^while.body14, i32 %205];
    i32* %145 = getelementptr &(i32* %128)[i32 %140];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %128)[i32 %144];
    i32 %148 = load i32* %147;
    store i32* %145 with i32 %148;
    store i32* %147 with i32 %146;
    ubr ^while.header3;
  ^super.header1:
    i32 %149 = add i32 %140, i32 5;
    i1 %150 = icmp sgt i32 %28, i32 %149;
    cbr i1 %150(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body12:
    i32 %151 = phi [^b7, i32 0] [^while.body12, i32 %161];
    i32* %152 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %151];
    i32 %155 = load i32* %154;
    i32 %156 = sub i32 %153, i32 %155;
    store i32* %152 with i32 %156;
    i32* %157 = getelementptr &([100005 * i32]* %32)[i64 0][i32 %151];
    i32 %158 = load i32* %157;
    i32 %159 = sub i32 %158, i32 %156;
    i32 %160 = sub i32 %159, i32 %155;
    store i32* %157 with i32 %160;
    i32 %161 = add i32 %151, i32 1;
    i32 %162 = sub i32 %28, i32 %161;
    i1 %163 = icmp neq i32 %162, i32 0;
    cbr i1 %163(prob = 0.97), ^while.body12, ^while.header4;
  ^while.header4:
    i32 %164 = phi [^b7, i32 0] [^while.body12, i32 0] [^b11, i32 %215];
    i32 %165 = sub i32 %164, i32 %28;
    i1 %166 = icmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.97), ^while.body15, ^b9;
  ^while.body13:
    i32 %167 = phi [^super.header1, i32 %140] [^while.body13, i32 %195];
    i32 %168 = phi [^super.header1, i32 %142] [^while.body13, i32 %196];
    i32* %169 = getelementptr &(i32* %128)[i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %128)[i32 %167];
    i32 %172 = load i32* %171;
    i1 %173 = icmp slt i32 %170, i32 %172;
    i32 %174 = select i1 %173 ? i32 %168 : i32 %167;
    i32* %175 = getelementptr &(i32* %128)[i32 %174];
    i32 %176 = add i32 %168, i32 1;
    i32* %177 = getelementptr &(i32* %128)[i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = load i32* %175;
    i1 %180 = icmp slt i32 %178, i32 %179;
    i32 %181 = select i1 %180 ? i32 %176 : i32 %174;
    i32* %182 = getelementptr &(i32* %128)[i32 %181];
    i32 %183 = add i32 %168, i32 2;
    i32* %184 = getelementptr &(i32* %128)[i32 %183];
    i32 %185 = load i32* %184;
    i32 %186 = load i32* %182;
    i1 %187 = icmp slt i32 %185, i32 %186;
    i32 %188 = select i1 %187 ? i32 %183 : i32 %181;
    i32* %189 = getelementptr &(i32* %128)[i32 %188];
    i32 %190 = add i32 %168, i32 3;
    i32* %191 = getelementptr &(i32* %128)[i32 %190];
    i32 %192 = load i32* %191;
    i32 %193 = load i32* %189;
    i1 %194 = icmp slt i32 %192, i32 %193;
    i32 %195 = select i1 %194 ? i32 %190 : i32 %188;
    i32 %196 = add i32 %168, i32 4;
    i1 %197 = icmp sgt i32 %75, i32 %196;
    cbr i1 %197(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %198 = phi [^super.header1, i32 %142] [^while.body13, i32 %196] [^while.body14, i32 %206];
    i32 %199 = phi [^super.header1, i32 %140] [^while.body13, i32 %195] [^while.body14, i32 %205];
    i32* %200 = getelementptr &(i32* %128)[i32 %198];
    i32 %201 = load i32* %200;
    i32* %202 = getelementptr &(i32* %128)[i32 %199];
    i32 %203 = load i32* %202;
    i1 %204 = icmp slt i32 %201, i32 %203;
    i32 %205 = select i1 %204 ? i32 %198 : i32 %199;
    i32 %206 = add i32 %198, i32 1;
    i1 %207 = icmp sgt i32 %28, i32 %206;
    cbr i1 %207(prob = 0.75), ^while.body14, ^b8;
  ^while.body15:
    i32* %208 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %164];
    i32 %209 = load i32* %208;
    i1 %210 = icmp neq i32 %209, i32 0;
    cbr i1 %210(prob = 0.5), ^b9, ^b10;
  ^b9:
    i32 %211 = phi [^while.header4, i32 -123] [^while.body15, i32 1] [^b10, i32 2];
    ret i32 %211;
  ^b10:
    i32* %212 = getelementptr &([100005 * i32]* %32)[i64 0][i32 %164];
    i32 %213 = load i32* %212;
    i1 %214 = icmp neq i32 %213, i32 0;
    cbr i1 %214(prob = 0.5), ^b9, ^b11;
  ^b11:
    i32 %215 = add i32 %164, i32 1;
    ubr ^while.header4;
}
