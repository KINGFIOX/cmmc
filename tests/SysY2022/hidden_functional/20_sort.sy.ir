internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), [ ^while.body i32* %x, i32* %f, i32* %ch, i32* %n, i32 %0, i32 0 ], [ ^b i32* %f, i32* %x, i32* %ch, i32* %n, i32 %0, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp eq i32 %arg4, i32 45;
    cbr i1 %0(prob = 0.5), [ ^if.then i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3 ], [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg5 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp gt i32 %arg4, i32 57;
    cbr i1 %0(prob = 0.97), [ ^while.body i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^indirect i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), [ ^while.body i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32 %0, i32 1 ], [ ^b i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %0, i32 1 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0, i32 %arg4 ], [ ^b i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %0, i32 %arg4 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp gt i32 %arg3, i32 47;
    cbr i1 %0(prob = 0.5), [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 0, i32 %arg4 ], [ ^b3 i32* %arg2, i32 0, i32 %arg4 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp lt i32 %arg3, i32 58;
    cbr i1 %0(prob = 0.97), [ ^while.body1 i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ], [ ^b3 i32* %arg2, i32 %arg4, i32 %arg5 ];
^b3(i32* %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp neq i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then1 i32* %arg, i32 %arg1 ], [ ^if.else i32* %arg, i32 %arg1 ];
^if.then1(i32* %arg, i32 %arg1):
    i32 %0 = neg i32 %arg1;
    store i32* %arg with i32 %0;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.header i32* %i, i32 %0, i32* %arg, i32 %0 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = mul i32 %arg4, i32 10;
    i32 %1 = add i32 %0, i32 -48;
    i32 %2 = add i32 %1, i32 %arg3;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp gt i32 %3, i32 47;
    cbr i1 %4(prob = 0.5), [ ^b2 i32* %arg1, i32* %arg, i32* %arg2, i32 %3, i32 %2, i32 %arg5 ], [ ^b3 i32* %arg2, i32 %2, i32 %arg5 ];
^if.else(i32* %arg, i32 %arg1):
    store i32* %arg with i32 %arg1;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.header i32* %i, i32 %arg1, i32* %arg, i32 %arg1 ];
^while.header(i32* %arg, i32 %arg1, i32* %arg2, i32 %arg3):
    i1 %0 = scmp neq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body2 i32* %arg, i32* %arg2, i32 %arg3, i32 0 ], [ ^b4 i32* %arg, i32* %arg2, i32 %arg3 ];
^while.body2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %arg3];
    i32* %ch = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %ch with i32 %1;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    i32* %f = alloc i32;
    store i32* %f with i32 0;
    i1 %2 = scmp lt i32 %1, i32 48;
    cbr i1 %2(prob = 0.5), [ ^while.body3 i32* %x, i32* %f, i32* %ch, i32* %0, i32 %arg3, i32* %arg, i32* %arg1, i32 %arg2, i32 %1, i32 0 ], [ ^b5 i32* %f, i32* %x, i32* %ch, i32* %arg1, i32* %arg, i32 %arg3, i32* %0, i32 %arg2, i32 %1, i32 0 ];
^b4(i32* %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    i1 %1 = scmp gt i32 %arg2, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body4 i32* %j, i32* %i, i32* %arg1, i32* %arg1, i32* %arg, i32 %arg2, i32* %0, i32 0 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg2 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg8, i32 45;
    cbr i1 %0(prob = 0.5), [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg7 ], [ ^b7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg9 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp gt i32 %arg8, i32 57;
    cbr i1 %0(prob = 0.97), [ ^while.body3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32 %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^indirect1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.97), [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %0 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7 ];
^b6(i32* %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    i32* %i = alloc i32;
    i32* %mx = alloc i32;
    store i32* %mx with i32 -100;
    i1 %1 = scmp gt i32 %arg2, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body6 i32* %mx, i32* %i, i32* %arg1, i32* %arg, i32 %arg2, i32* %0, i32 0, i32 -100 ], [ ^b9 i32* %mx, i32* %i, i32* %arg1, i32* %arg, i32 %arg2, i32* %0, i32 -100 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    store i32* %arg2 with i32 1;
    i32 %0 = call () -> i32 @getch();
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), [ ^while.body3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32 %arg5, i32* %arg4, i32* %arg3, i32 %arg7, i32 %0, i32 1 ], [ ^b5 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %0, i32 1 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg7];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg6)[i32 %arg8];
    i32 %3 = load i32* %2;
    i1 %4 = scmp gt i32 %1, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^indirect2 i32* %arg, i32* %arg1, i32* %arg6, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^b11 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %0, i32 %arg8 ], [ ^b5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg6, i32* %arg5, i32 %arg4, i32* %arg3, i32 %arg7, i32 %0, i32 %arg8 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg7, i32 47;
    cbr i1 %0(prob = 0.5), [ ^b10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 0, i32 %arg8 ], [ ^b13 i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 0, i32 %arg8 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.97), [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %0 ], [ ^b6 i32* %arg4, i32* %arg3, i32 %arg5 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &(i32* %arg5)[i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %3, i32 1;
    store i32* %2 with i32 %4;
    i1 %5 = scmp gt i32 %1, i32 %arg7;
    cbr i1 %5(prob = 0.5), [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32 %arg4, i32* %arg5, i32 %arg6 ], [ ^b12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ];
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg1 with i32 0;
    i32* %now = alloc i32;
    store i32* %now with i32 0;
    i1 %0 = scmp gt i32 %arg6, i32 -1;
    cbr i1 %0(prob = 0.97), [ ^while.body7 i32* %now, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 0, i32 %arg6, i32 0 ], [ ^b14 i32* %arg3, i32* %arg2, i32 %arg4 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg7];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg2)[i32 %arg8];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %arg;
    i32* %5 = getelementptr &(i32* %arg2)[i32 %4];
    store i32* %5 with i32 %1;
    i32 %6 = load i32* %arg1;
    i32 %7 = load i32* %arg3;
    i32 %8 = add i32 %4, i32 1;
    store i32* %arg with i32 %8;
    i1 %9 = scmp lt i32 %8, i32 %7;
    cbr i1 %9(prob = 0.97), [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg5, i32* %arg4, i32 %7, i32* %arg6, i32 %6, i32 %8 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg5, i32* %arg4, i32 %7, i32* %arg6, i32 %6 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg7];
    i32 %1 = load i32* %0;
    store i32* %arg with i32 %1;
    i32 %2 = add i32 %arg7, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg5;
    cbr i1 %3(prob = 0.97), [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32 %arg5, i32* %arg6, i32 %2, i32 %1 ], [ ^b9 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32 %arg5, i32* %arg6, i32 %1 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp lt i32 %arg7, i32 58;
    cbr i1 %0(prob = 0.97), [ ^while.body8 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^b13 i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg8, i32 %arg9 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.97), [ ^while.body5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %0 ], [ ^b8 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg6, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.97), [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %0, i32 %arg7 ], [ ^b9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg7 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %j = alloc i32;
    i32* %0 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %arg7];
    i32 %1 = load i32* %0;
    store i32* %j with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), [ ^indirect4 i32* %arg1, i32* %j, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg6, i32 %arg7, i32 %arg9, i32 %1 ], [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b13(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then3 i32* %arg3, i32 %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5 ], [ ^while.body10 i32 %arg5, i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4 ];
^b14(i32* %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %1 = scmp gt i32 %arg2, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body9 i32* %i, i32* %arg1, i32* %arg, i32 %arg2, i32* %0, i32 0 ], [ ^b16 i32* %arg, i32 %arg2 ];
^if.then3(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = neg i32 %arg5;
    ubr [ ^while.body10 i32 %0, i32* %arg3, i32* %arg2, i32 %arg1, i32* %arg, i32 %arg4 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = load i32* %arg3;
    ubr [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = mul i32 %arg8, i32 10;
    i32 %1 = add i32 %0, i32 -48;
    i32 %2 = add i32 %1, i32 %arg7;
    store i32* %arg1 with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %arg with i32 %3;
    i1 %4 = scmp gt i32 %3, i32 47;
    cbr i1 %4(prob = 0.5), [ ^b10 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %3, i32 %2, i32 %arg9 ], [ ^b13 i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %2, i32 %arg9 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg8;
    cbr i1 %1(prob = 0.97), [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %0, i32 %arg8, i32 %arg9 ], [ ^b14 i32* %arg4, i32* %arg3, i32 %arg5 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5):
    i32* %id = alloc i32;
    store i32* %id with i32 %arg5;
    i32* %j = alloc i32;
    i32 %0 = add i32 %arg5, i32 1;
    store i32* %j with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.97), [ ^while.body12 i32* %arg, i32* %id, i32* %j, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg5, i32 %0 ], [ ^b17 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32 %arg5, i32 %arg5, i32 %arg5 ];
^while.body10(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32 %arg5):
    store i32* %arg4 with i32 %arg;
    i32* %0 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %arg3];
    store i32* %0 with i32 %arg;
    i32* %1 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %arg3];
    store i32* %1 with i32 %arg;
    i32 %2 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %2;
    i1 %3 = scmp neq i32 %2, i32 %arg5;
    cbr i1 %3(prob = 0.97), [ ^while.body2 i32* %arg2, i32* %arg1, i32 %arg5, i32 %2 ], [ ^b4 i32* %arg2, i32* %arg1, i32 %arg5 ];
^b16(i32* %arg, i32 %arg1):
    store i32* %arg with i32 0;
    i1 %0 = scmp neq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body13 i32* %arg, i32 %arg1, i32 0 ], [ ^b18 i32* %arg, i32 %arg1 ];
^while.body11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg8];
    store i32* %0 with i32 %arg7;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg2;
    i32 %3 = load i32* %arg4;
    i32 %4 = add i32 %arg9, i32 1;
    store i32* %arg3 with i32 %4;
    i32 %5 = add i32 %arg10, i32 -1;
    store i32* %arg1 with i32 %5;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %2, i32 %4, i32 %4, i32 %5 ], [ ^b15 i32* %arg3, i32* %arg, i32* %arg2, i32* %arg4, i32* %arg5, i32 %3, i32* %arg6, i32 %2, i32 %1, i32 %4 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg6)[i32 %arg8];
    i32 %3 = load i32* %2;
    i1 %4 = scmp lt i32 %1, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^if.then4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg9 ], [ ^indirect5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^while.body13(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %arg2];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %arg2];
    i32 %3 = load i32* %2;
    i32 %4 = sub i32 %1, i32 %3;
    store i32* %0 with i32 %4;
    i32* %5 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %arg2];
    i32 %6 = load i32* %5;
    i32 %7 = sub i32 %6, i32 %4;
    i32 %8 = sub i32 %7, i32 %3;
    store i32* %5 with i32 %8;
    i32 %9 = add i32 %arg2, i32 1;
    store i32* %arg with i32 %9;
    i32 %10 = sub i32 %arg1, i32 %9;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), [ ^while.body13 i32* %arg, i32 %arg1, i32 %9 ], [ ^b18 i32* %arg, i32 %arg1 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg3)[i32 %arg5];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32* %4 = getelementptr &(i32* %arg3)[i32 %arg6];
    store i32* %4 with i32 %1;
    i32 %5 = load i32* %arg;
    i32 %6 = load i32* %arg1;
    i32 %7 = add i32 %5, i32 1;
    store i32* %arg with i32 %7;
    i1 %8 = scmp lt i32 %7, i32 %6;
    cbr i1 %8(prob = 0.97), [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32 %6, i32* %arg3, i32 %7 ], [ ^b16 i32* %arg2, i32 %6 ];
^b18(i32* %arg, i32 %arg1):
    store i32* %arg with i32 0;
    i32 %0 = neg i32 %arg1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body14 i32* %arg, i32 %arg1, i32 0 ], [ ^b19 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    store i32* %arg1 with i32 %arg8;
    i32 %0 = add i32 %arg8, i32 1;
    store i32* %arg2 with i32 %0;
    ubr [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32 %0, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg9, i32 1;
    store i32* %arg2 with i32 %0;
    ubr [ ^indirect6 i32* %arg1, i32* %arg, i32* %arg2, i32 %0, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %0 ];
^while.body14(i32* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %arg2];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^if.then5 ], [ ^indirect7 i32* %arg, i32 %arg2, i32 %arg1, i32 %arg2 ];
^b19():
    ret i32 -123;
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg3, i32 %arg6;
    cbr i1 %0(prob = 0.97), [ ^while.body12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^indirect8 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg5, i32* %arg7, i32 %arg8, i32 %arg9 ];
^indirect7(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^if.then6 ], [ ^b20 i32* %arg, i32 %arg2, i32 %arg3 ];
^if.then5():
    ret i32 1;
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^b17 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %0 ];
^b20(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg with i32 %0;
    i32 %1 = sub i32 %0, i32 %arg1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), [ ^while.body14 i32* %arg, i32 %arg1, i32 %0 ], [ ^b19 ];
^if.then6():
    ret i32 2;
}
