internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i1 %24 = icmp neq i32 %12, i32 0;
    i32 %25 = neg i32 %23;
    i32 %26 = select i1 %24 ? i32 %25 : i32 %23;
    i1 %27 = icmp neq i32 %26, i32 0;
    i32 %28 = add i32 %26, i32 -3;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %27(prob = 0.984615), ^while.body2, ^b1;
  ^b1:
    i32* %32 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body2:
    i32 %33 = phi [^b, i32 0] [^b2, i32 %69];
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = icmp ugt i32 %35, i32 9;
    i32* %37 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %33];
    cbr i1 %36(prob = 0.984615), ^while.body3, ^45;
  ^while.body3:
    i32 %38 = phi [^while.body2, i32 %34] [^while.body3, i32 %40];
    i32 %39 = phi [^while.body2, i32 0] [^while.body3, i32 %44];
    i32 %40 = call () -> i32 @getch();
    i32 %41 = add i32 %40, i32 -48;
    i1 %42 = icmp ugt i32 %41, i32 9;
    i1 %43 = icmp eq i32 %38, i32 45;
    i32 %44 = select i1 %43 ? i32 1 : i32 %39;
    cbr i1 %42(prob = 0.984615), ^while.body3, ^45;
  ^45:
    i32 %46 = phi [^while.body2, i32 %34] [^while.body3, i32 %40];
    i32 %47 = phi [^while.body2, i32 0] [^while.body3, i32 %44];
    i32 %48 = add i32 %46, i32 -48;
    i1 %49 = icmp ult i32 %48, i32 10;
    cbr i1 %49(prob = 0.984615), ^while.body4, ^b2;
  ^while.header:
    i32 %50 = phi [^b1, i32 0] [^while.body5, i32 %60] [^b5, i32 %60];
    i1 %51 = icmp sgt i32 %26, i32 %50;
    cbr i1 %51(prob = 0.984615), ^while.body5, ^b3;
  ^while.body4:
    i32 %52 = phi [^45, i32 %46] [^while.body4, i32 %54];
    i32 %53 = phi [^45, i32 0] [^while.body4, i32 %59];
    i32 %54 = call () -> i32 @getch();
    i32 %55 = add i32 %54, i32 -48;
    i1 %56 = icmp ult i32 %55, i32 10;
    i32 %57 = mul i32 %53, i32 10;
    i32 %58 = add i32 %57, i32 -48;
    i32 %59 = add i32 %52, i32 %58;
    cbr i1 %56(prob = 0.984615), ^while.body4, ^b2;
  ^while.body5:
    i32 %60 = add i32 %50, i32 1;
    i1 %61 = icmp sle i32 %26, i32 %60;
    i32* %62 = getelementptr &(i32* %32)[i32 %50];
    cbr i1 %61(prob = 0.0153846), ^while.header, ^while.body6;
  ^b2:
    i32 %63 = phi [^45, i32 0] [^while.body4, i32 %59];
    i1 %64 = icmp neq i32 %47, i32 0;
    i32 %65 = neg i32 %63;
    i32 %66 = select i1 %64 ? i32 %65 : i32 %63;
    store i32* %37 with i32 %66;
    i32* %67 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %33];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %33];
    store i32* %68 with i32 %66;
    i32 %69 = add i32 %33, i32 1;
    i1 %70 = icmp neq i32 %26, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body2, ^b1;
  ^b3:
    i32* %71 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    i1 %72 = icmp sgt i32 %26, i32 0;
    [400020 * i32]* %73 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %72(prob = 0.984615), ^super.header, ^b4;
  ^b4:
    i32 %74 = phi [^b3, i32 -100] [^scalar.header, i32 %111] [^while.body8, i32 %126];
    ubr ^while.header1;
  ^while.body6:
    i32 %75 = phi [^while.body5, i32 %60] [^b5, i32 %113];
    i32* %76 = getelementptr &(i32* %32)[i32 %75];
    i32 %77 = load i32* %62;
    i32 %78 = load i32* %76;
    i1 %79 = icmp sgt i32 %77, i32 %78;
    cbr i1 %79(prob = 0.5), ^if.then, ^b5;
  ^super.header:
    i1 %80 = icmp sgt i32 %26, i32 3;
    cbr i1 %80(prob = 0.941176), ^while.body7, ^scalar.header;
  ^if.then:
    store i32* %62 with i32 %78;
    store i32* %76 with i32 %77;
    ubr ^b5;
  ^while.body7:
    i32 %81 = phi [^super.header, i32 -100] [^while.body7, i32 %103];
    i32 %82 = phi [^super.header, i32 0] [^while.body7, i32 %107];
    i32* %83 = getelementptr &(i32* %71)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %86, i32 1;
    store i32* %85 with i32 %87;
    i32* %88 = getelementptr &(i32* %83)[i64 1];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %91, i32 1;
    store i32* %90 with i32 %92;
    i32 %93 = smax i32 %81, i32 %84;
    i32 %94 = smax i32 %89, i32 %93;
    i32* %95 = getelementptr &(i32* %83)[i64 2];
    i32 %96 = load i32* %95;
    i32 %97 = smax i32 %94, i32 %96;
    i32* %98 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %96];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %99, i32 1;
    store i32* %98 with i32 %100;
    i32* %101 = getelementptr &(i32* %83)[i64 3];
    i32 %102 = load i32* %101;
    i32 %103 = smax i32 %97, i32 %102;
    i32* %104 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %102];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %105, i32 1;
    store i32* %104 with i32 %106;
    i32 %107 = add i32 %82, i32 4;
    i1 %108 = icmp sgt i32 %28, i32 %107;
    cbr i1 %108(prob = 0.941176), ^while.body7, ^scalar.header;
  ^scalar.header:
    i32 %109 = phi [^super.header, i32 -100] [^while.body7, i32 %103];
    i32 %110 = phi [^super.header, i32 0] [^while.body7, i32 %107];
    i32 %111 = phi [^super.header, i32 undef] [^while.body7, i32 %103];
    i1 %112 = icmp sgt i32 %26, i32 %110;
    cbr i1 %112(prob = 0.75), ^while.body8, ^b4;
  ^b5:
    i32 %113 = add i32 %75, i32 1;
    i1 %114 = icmp sgt i32 %26, i32 %113;
    cbr i1 %114(prob = 0.984615), ^while.body6, ^while.header;
  ^while.header1:
    i32 %115 = phi [^b4, i32 0] [^b7, i32 %132];
    i32 %116 = phi [^b4, i32 0] [^b7, i32 %133];
    i1 %117 = icmp sge i32 %74, i32 %116;
    cbr i1 %117(prob = 0.984615), ^while.body9, ^b6;
  ^b6:
    i32* %118 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    ubr ^while.header2;
  ^while.body8 {scalar}:
    i32 %119 = phi [^scalar.header, i32 %110] [^while.body8, i32 %127];
    i32 %120 = phi [^scalar.header, i32 %109] [^while.body8, i32 %126];
    i32* %121 = getelementptr &(i32* %71)[i32 %119];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %122];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %124, i32 1;
    store i32* %123 with i32 %125;
    i32 %126 = smax i32 %120, i32 %122;
    i32 %127 = add i32 %119, i32 1;
    i1 %128 = icmp sgt i32 %26, i32 %127;
    cbr i1 %128(prob = 0.75), ^while.body8, ^b4;
  ^while.body9:
    i32* %129 = getelementptr &([400020 * i32]* %73)[i64 0][i32 %116];
    i32 %130 = load i32* %129;
    i1 %131 = icmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.984615), ^while.body10, ^b7;
  ^b7:
    i32 %132 = phi [^while.body9, i32 %115] [^while.body10, i32 %139];
    i32 %133 = add i32 %116, i32 1;
    ubr ^while.header1;
  ^while.body10:
    i32 %134 = phi [^while.body9, i32 %130] [^while.body10, i32 %137];
    i32 %135 = phi [^while.body9, i32 %115] [^while.body10, i32 %139];
    i32* %136 = getelementptr &(i32* %71)[i32 %135];
    store i32* %136 with i32 %116;
    i32 %137 = add i32 %134, i32 -1;
    i1 %138 = icmp neq i32 %137, i32 0;
    i32 %139 = add i32 %135, i32 1;
    cbr i1 %138(prob = 0.984615), ^while.body10, ^b7;
  ^while.header2:
    i32 %140 = phi [^b6, i32 0] [^b9, i32 %142];
    i1 %141 = icmp sgt i32 %26, i32 %140;
    cbr i1 %141(prob = 0.984615), ^while.body11, ^b8;
  ^while.body11:
    i32 %142 = add i32 %140, i32 1;
    i1 %143 = icmp sgt i32 %26, i32 %142;
    cbr i1 %143(prob = 0.984615), ^super.header1, ^b9;
  ^b8:
    cbr i1 %27(prob = 0.984615), ^while.body12, ^while.header3;
  ^b9:
    i32 %144 = phi [^while.body11, i32 %140] [^scalar.header1, i32 %200] [^while.body15, i32 %213];
    i32* %145 = getelementptr &(i32* %118)[i32 %140];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %118)[i32 %144];
    i32 %148 = load i32* %147;
    store i32* %145 with i32 %148;
    store i32* %147 with i32 %146;
    ubr ^while.header2;
  ^super.header1:
    i32 %149 = add i32 %140, i32 4;
    i1 %150 = icmp sgt i32 %26, i32 %149;
    cbr i1 %150(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^while.body12:
    i32 %151 = phi [^b8, i32 0] [^while.body12, i32 %161];
    i32* %152 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %151];
    i32 %155 = load i32* %154;
    i32 %156 = sub i32 %153, i32 %155;
    store i32* %152 with i32 %156;
    i32* %157 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %151];
    i32 %158 = load i32* %157;
    i32 %159 = sub i32 %158, i32 %156;
    i32 %160 = sub i32 %159, i32 %155;
    store i32* %157 with i32 %160;
    i32 %161 = add i32 %151, i32 1;
    i32 %162 = sub i32 %26, i32 %161;
    i1 %163 = icmp neq i32 %162, i32 0;
    cbr i1 %163(prob = 0.984615), ^while.body12, ^while.header3;
  ^while.header3:
    i32 %164 = phi [^b8, i32 0] [^while.body12, i32 0] [^b12, i32 %219];
    i32 %165 = sub i32 %164, i32 %26;
    i1 %166 = icmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.984615), ^while.body14, ^b10;
  ^while.body13:
    i32 %167 = phi [^super.header1, i32 %140] [^while.body13, i32 %195];
    i32 %168 = phi [^super.header1, i32 %142] [^while.body13, i32 %196];
    i32* %169 = getelementptr &(i32* %118)[i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %118)[i32 %167];
    i32 %172 = load i32* %171;
    i1 %173 = icmp slt i32 %170, i32 %172;
    i32 %174 = select i1 %173 ? i32 %168 : i32 %167;
    i32* %175 = getelementptr &(i32* %118)[i32 %174];
    i32 %176 = add i32 %168, i32 1;
    i32* %177 = getelementptr &(i32* %118)[i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = load i32* %175;
    i1 %180 = icmp slt i32 %178, i32 %179;
    i32 %181 = select i1 %180 ? i32 %176 : i32 %174;
    i32* %182 = getelementptr &(i32* %118)[i32 %181];
    i32 %183 = add i32 %168, i32 2;
    i32* %184 = getelementptr &(i32* %118)[i32 %183];
    i32 %185 = load i32* %184;
    i32 %186 = load i32* %182;
    i1 %187 = icmp slt i32 %185, i32 %186;
    i32 %188 = select i1 %187 ? i32 %183 : i32 %181;
    i32* %189 = getelementptr &(i32* %118)[i32 %188];
    i32 %190 = add i32 %168, i32 3;
    i32* %191 = getelementptr &(i32* %118)[i32 %190];
    i32 %192 = load i32* %191;
    i32 %193 = load i32* %189;
    i1 %194 = icmp slt i32 %192, i32 %193;
    i32 %195 = select i1 %194 ? i32 %190 : i32 %188;
    i32 %196 = add i32 %168, i32 4;
    i1 %197 = icmp sgt i32 %28, i32 %196;
    cbr i1 %197(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^scalar.header1:
    i32 %198 = phi [^super.header1, i32 %140] [^while.body13, i32 %195];
    i32 %199 = phi [^super.header1, i32 %142] [^while.body13, i32 %196];
    i32 %200 = phi [^super.header1, i32 undef] [^while.body13, i32 %195];
    i1 %201 = icmp sgt i32 %26, i32 %199;
    cbr i1 %201(prob = 0.75), ^while.body15, ^b9;
  ^while.body14:
    i32* %202 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %164];
    i32 %203 = load i32* %202;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %205 = phi [^while.header3, i32 -123] [^while.body14, i32 1] [^b11, i32 2];
    ret i32 %205;
  ^while.body15 {scalar}:
    i32 %206 = phi [^scalar.header1, i32 %199] [^while.body15, i32 %214];
    i32 %207 = phi [^scalar.header1, i32 %198] [^while.body15, i32 %213];
    i32* %208 = getelementptr &(i32* %118)[i32 %206];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %118)[i32 %207];
    i32 %211 = load i32* %210;
    i1 %212 = icmp slt i32 %209, i32 %211;
    i32 %213 = select i1 %212 ? i32 %206 : i32 %207;
    i32 %214 = add i32 %206, i32 1;
    i1 %215 = icmp sgt i32 %26, i32 %214;
    cbr i1 %215(prob = 0.75), ^while.body15, ^b9;
  ^b11:
    i32* %216 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %164];
    i32 %217 = load i32* %216;
    i1 %218 = icmp neq i32 %217, i32 0;
    cbr i1 %218(prob = 0.5), ^b10, ^b12;
  ^b12:
    i32 %219 = add i32 %164, i32 1;
    ubr ^while.header3;
}
