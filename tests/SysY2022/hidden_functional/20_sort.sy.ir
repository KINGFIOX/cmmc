internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    i1 %8 = scmp gt i32 %6, i32 57;
    i1 %9 = or i1 %7, i1 %8;
    i1 %10 = scmp eq i32 %4, i32 45;
    i32 %11 = select i1 %10 ? i32 1 : i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %12 = phi [^entry, i32 %0] [^while.body, i32 %6];
    i32 %13 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %14 = add i32 %12, i32 -48;
    i1 %15 = ucmp lt i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %16 = phi [^indirect, i32 0] [^while.body1, i32 %23];
    i32 %17 = phi [^indirect, i32 %12] [^while.body1, i32 %18];
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = ucmp lt i32 %19, i32 10;
    i32 %21 = mul i32 %16, i32 10;
    i32 %22 = add i32 %21, i32 -48;
    i32 %23 = add i32 %17, i32 %22;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
  ^b:
    i32 %24 = phi [^indirect, i32 0] [^while.body1, i32 %23];
    i1 %25 = scmp neq i32 %13, i32 0;
    i32 %26 = neg i32 %24;
    i32 %27 = select i1 %25 ? i32 %26 : i32 %24;
    i1 %28 = scmp neq i32 %27, i32 0;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b1;
  ^b1:
    i32* %32 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body2:
    i32 %33 = phi [^b, i32 0] [^b3, i32 %71];
    i32 %34 = call () -> i32 @getch();
    i1 %35 = scmp lt i32 %34, i32 48;
    i1 %36 = scmp gt i32 %34, i32 57;
    i1 %37 = or i1 %35, i1 %36;
    i32* %38 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %33];
    cbr i1 %37(prob = 0.97), ^while.body3, ^indirect1;
  ^while.body3:
    i32 %39 = phi [^while.body2, i32 %34] [^while.body3, i32 %41];
    i32 %40 = phi [^while.body2, i32 0] [^while.body3, i32 %46];
    i32 %41 = call () -> i32 @getch();
    i1 %42 = scmp lt i32 %41, i32 48;
    i1 %43 = scmp gt i32 %41, i32 57;
    i1 %44 = or i1 %42, i1 %43;
    i1 %45 = scmp eq i32 %39, i32 45;
    i32 %46 = select i1 %45 ? i32 1 : i32 %40;
    cbr i1 %44(prob = 0.97), ^while.body3, ^indirect1;
  ^indirect1:
    i32 %47 = phi [^while.body2, i32 %34] [^while.body3, i32 %41];
    i32 %48 = phi [^while.body2, i32 0] [^while.body3, i32 %46];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = ucmp lt i32 %49, i32 10;
    cbr i1 %50(prob = 0.97), ^while.body5, ^b3;
  ^while.header:
    i32 %51 = phi [^b1, i32 0] [^while.header1, i32 %54];
    i1 %52 = scmp lt i32 %51, i32 %27;
    cbr i1 %52(prob = 0.97), ^while.body4, ^b2;
  ^while.body4:
    i32* %53 = getelementptr &(i32* %32)[i32 %51];
    i32 %54 = add i32 %51, i32 1;
    ubr ^while.header1;
  ^b2:
    i32* %55 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    [400020 * i32]* %56 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    ubr ^while.header2;
  ^while.body5:
    i32 %57 = phi [^indirect1, i32 0] [^while.body5, i32 %64];
    i32 %58 = phi [^indirect1, i32 %47] [^while.body5, i32 %59];
    i32 %59 = call () -> i32 @getch();
    i32 %60 = add i32 %59, i32 -48;
    i1 %61 = ucmp lt i32 %60, i32 10;
    i32 %62 = mul i32 %57, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %58, i32 %63;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b3;
  ^b3:
    i32 %65 = phi [^indirect1, i32 0] [^while.body5, i32 %64];
    i1 %66 = scmp neq i32 %48, i32 0;
    i32 %67 = neg i32 %65;
    i32 %68 = select i1 %66 ? i32 %67 : i32 %65;
    store i32* %38 with i32 %68;
    i32* %69 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %33];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %33];
    store i32* %70 with i32 %68;
    i32 %71 = add i32 %33, i32 1;
    i1 %72 = scmp neq i32 %27, i32 %71;
    cbr i1 %72(prob = 0.97), ^while.body2, ^b1;
  ^while.header1:
    i32 %73 = phi [^while.body4, i32 %54] [^b4, i32 %93];
    i1 %74 = scmp lt i32 %73, i32 %27;
    cbr i1 %74(prob = 0.97), ^while.body7, ^while.header;
  ^while.header2:
    i32 %75 = phi [^b2, i32 0] [^while.body6, i32 %84];
    i32 %76 = phi [^b2, i32 -100] [^while.body6, i32 %83];
    i1 %77 = scmp lt i32 %75, i32 %27;
    cbr i1 %77(prob = 0.97), ^while.body6, ^while.header3;
  ^while.body6:
    i32* %78 = getelementptr &(i32* %55)[i32 %75];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %79];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %81, i32 1;
    store i32* %80 with i32 %82;
    i32 %83 = smax i32 %79, i32 %76;
    i32 %84 = add i32 %75, i32 1;
    ubr ^while.header2;
  ^while.body7:
    i32* %85 = getelementptr &(i32* %32)[i32 %73];
    i32 %86 = load i32* %53;
    i32 %87 = load i32* %85;
    i1 %88 = scmp gt i32 %86, i32 %87;
    cbr i1 %88(prob = 0.5), ^if.then, ^b4;
  ^while.header3:
    i32 %89 = phi [^while.header2, i32 0] [^b6, i32 %98];
    i32 %90 = phi [^while.header2, i32 0] [^b6, i32 %99];
    i1 %91 = scmp le i32 %90, i32 %76;
    cbr i1 %91(prob = 0.97), ^while.body8, ^b5;
  ^if.then:
    i32 %92 = load i32* %53;
    store i32* %53 with i32 %87;
    store i32* %85 with i32 %92;
    ubr ^b4;
  ^b4:
    i32 %93 = add i32 %73, i32 1;
    ubr ^while.header1;
  ^b5:
    i32* %94 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    ubr ^while.header4;
  ^while.body8:
    i32* %95 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %90];
    i32 %96 = load i32* %95;
    i1 %97 = scmp neq i32 %96, i32 0;
    cbr i1 %97(prob = 0.97), ^while.body9, ^b6;
  ^b6:
    i32 %98 = phi [^while.body8, i32 %89] [^while.body9, i32 %105];
    i32 %99 = add i32 %90, i32 1;
    ubr ^while.header3;
  ^while.body9:
    i32 %100 = phi [^while.body8, i32 %96] [^while.body9, i32 %103];
    i32 %101 = phi [^while.body8, i32 %89] [^while.body9, i32 %105];
    i32* %102 = getelementptr &(i32* %55)[i32 %101];
    store i32* %102 with i32 %90;
    i32 %103 = add i32 %100, i32 -1;
    i1 %104 = scmp neq i32 %103, i32 0;
    i32 %105 = add i32 %101, i32 1;
    cbr i1 %104(prob = 0.97), ^while.body9, ^b6;
  ^while.header4:
    i32 %106 = phi [^b5, i32 0] [^b8, i32 %108];
    i1 %107 = scmp lt i32 %106, i32 %27;
    cbr i1 %107(prob = 0.97), ^while.body10, ^b7;
  ^while.body10:
    i32 %108 = add i32 %106, i32 1;
    i1 %109 = scmp lt i32 %108, i32 %27;
    cbr i1 %109(prob = 0.97), ^super.header, ^b8;
  ^b7:
    cbr i1 %28(prob = 0.97), ^while.body11, ^while.header5;
  ^b8:
    i32 %110 = phi [^while.body10, i32 %106] [^while.body16, i32 %239];
    i32* %111 = getelementptr &(i32* %94)[i32 %106];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %94)[i32 %110];
    i32 %114 = load i32* %113;
    store i32* %111 with i32 %114;
    store i32* %113 with i32 %112;
    ubr ^while.header4;
  ^super.header:
    i32 %115 = phi [^while.body10, i32 %106] [^while.body12, i32 %161];
    i32 %116 = phi [^while.body10, i32 %108] [^while.body12, i32 %117];
    i32 %117 = add i32 %116, i32 4;
    i1 %118 = scmp lt i32 %117, i32 %27;
    cbr i1 %118(prob = 0.89), ^while.body12, ^super.header1;
  ^while.body11:
    i32 %119 = phi [^b7, i32 0] [^while.body11, i32 %129];
    i32* %120 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %119];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %119];
    i32 %123 = load i32* %122;
    i32 %124 = sub i32 %121, i32 %123;
    store i32* %120 with i32 %124;
    i32* %125 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %119];
    i32 %126 = load i32* %125;
    i32 %127 = sub i32 %126, i32 %124;
    i32 %128 = sub i32 %127, i32 %123;
    store i32* %125 with i32 %128;
    i32 %129 = add i32 %119, i32 1;
    i32 %130 = sub i32 %27, i32 %129;
    i1 %131 = scmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.97), ^while.body11, ^while.header5;
  ^while.header5:
    i32 %132 = phi [^b7, i32 0] [^while.body11, i32 0] [^b11, i32 %231];
    i32 %133 = sub i32 %132, i32 %27;
    i1 %134 = scmp neq i32 %133, i32 0;
    cbr i1 %134(prob = 0.97), ^while.body13, ^b9;
  ^while.body12:
    i32* %135 = getelementptr &(i32* %94)[i32 %116];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %94)[i32 %115];
    i32 %138 = load i32* %137;
    i1 %139 = scmp lt i32 %136, i32 %138;
    i32 %140 = select i1 %139 ? i32 %116 : i32 %115;
    i32* %141 = getelementptr &(i32* %94)[i32 %140];
    i32 %142 = add i32 %116, i32 1;
    i32* %143 = getelementptr &(i32* %94)[i32 %142];
    i32 %144 = load i32* %143;
    i32 %145 = load i32* %141;
    i1 %146 = scmp lt i32 %144, i32 %145;
    i32 %147 = select i1 %146 ? i32 %142 : i32 %140;
    i32* %148 = getelementptr &(i32* %94)[i32 %147];
    i32 %149 = add i32 %116, i32 2;
    i32* %150 = getelementptr &(i32* %94)[i32 %149];
    i32 %151 = load i32* %150;
    i32 %152 = load i32* %148;
    i1 %153 = scmp lt i32 %151, i32 %152;
    i32 %154 = select i1 %153 ? i32 %149 : i32 %147;
    i32* %155 = getelementptr &(i32* %94)[i32 %154];
    i32 %156 = add i32 %116, i32 3;
    i32* %157 = getelementptr &(i32* %94)[i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = load i32* %155;
    i1 %160 = scmp lt i32 %158, i32 %159;
    i32 %161 = select i1 %160 ? i32 %156 : i32 %154;
    ubr ^super.header;
  ^super.header1:
    i32 %162 = phi [^super.header, i32 %115] [^while.body14, i32 %196];
    i32 %163 = phi [^super.header, i32 %116] [^while.body14, i32 %164];
    i32 %164 = add i32 %163, i32 4;
    i1 %165 = scmp lt i32 %164, i32 %27;
    cbr i1 %165(prob = 0.89), ^while.body14, ^super.header2;
  ^while.body13:
    i32* %166 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %132];
    i32 %167 = load i32* %166;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^b9, ^b10;
  ^b9:
    i32 %169 = phi [^while.header5, i32 -123] [^while.body13, i32 1] [^b10, i32 2];
    ret i32 %169;
  ^while.body14:
    i32* %170 = getelementptr &(i32* %94)[i32 %163];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %94)[i32 %162];
    i32 %173 = load i32* %172;
    i1 %174 = scmp lt i32 %171, i32 %173;
    i32 %175 = select i1 %174 ? i32 %163 : i32 %162;
    i32* %176 = getelementptr &(i32* %94)[i32 %175];
    i32 %177 = add i32 %163, i32 1;
    i32* %178 = getelementptr &(i32* %94)[i32 %177];
    i32 %179 = load i32* %178;
    i32 %180 = load i32* %176;
    i1 %181 = scmp lt i32 %179, i32 %180;
    i32 %182 = select i1 %181 ? i32 %177 : i32 %175;
    i32* %183 = getelementptr &(i32* %94)[i32 %182];
    i32 %184 = add i32 %163, i32 2;
    i32* %185 = getelementptr &(i32* %94)[i32 %184];
    i32 %186 = load i32* %185;
    i32 %187 = load i32* %183;
    i1 %188 = scmp lt i32 %186, i32 %187;
    i32 %189 = select i1 %188 ? i32 %184 : i32 %182;
    i32* %190 = getelementptr &(i32* %94)[i32 %189];
    i32 %191 = add i32 %163, i32 3;
    i32* %192 = getelementptr &(i32* %94)[i32 %191];
    i32 %193 = load i32* %192;
    i32 %194 = load i32* %190;
    i1 %195 = scmp lt i32 %193, i32 %194;
    i32 %196 = select i1 %195 ? i32 %191 : i32 %189;
    ubr ^super.header1;
  ^super.header2:
    i32 %197 = phi [^super.header1, i32 %162] [^while.body15, i32 %230];
    i32 %198 = phi [^super.header1, i32 %163] [^while.body15, i32 %199];
    i32 %199 = add i32 %198, i32 4;
    i1 %200 = scmp lt i32 %199, i32 %27;
    cbr i1 %200(prob = 0.89), ^while.body15, ^while.body16;
  ^b10:
    i32* %201 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %132];
    i32 %202 = load i32* %201;
    i1 %203 = scmp neq i32 %202, i32 0;
    cbr i1 %203(prob = 0.5), ^b9, ^b11;
  ^while.body15:
    i32* %204 = getelementptr &(i32* %94)[i32 %198];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %94)[i32 %197];
    i32 %207 = load i32* %206;
    i1 %208 = scmp lt i32 %205, i32 %207;
    i32 %209 = select i1 %208 ? i32 %198 : i32 %197;
    i32* %210 = getelementptr &(i32* %94)[i32 %209];
    i32 %211 = add i32 %198, i32 1;
    i32* %212 = getelementptr &(i32* %94)[i32 %211];
    i32 %213 = load i32* %212;
    i32 %214 = load i32* %210;
    i1 %215 = scmp lt i32 %213, i32 %214;
    i32 %216 = select i1 %215 ? i32 %211 : i32 %209;
    i32* %217 = getelementptr &(i32* %94)[i32 %216];
    i32 %218 = add i32 %198, i32 2;
    i32* %219 = getelementptr &(i32* %94)[i32 %218];
    i32 %220 = load i32* %219;
    i32 %221 = load i32* %217;
    i1 %222 = scmp lt i32 %220, i32 %221;
    i32 %223 = select i1 %222 ? i32 %218 : i32 %216;
    i32* %224 = getelementptr &(i32* %94)[i32 %223];
    i32 %225 = add i32 %198, i32 3;
    i32* %226 = getelementptr &(i32* %94)[i32 %225];
    i32 %227 = load i32* %226;
    i32 %228 = load i32* %224;
    i1 %229 = scmp lt i32 %227, i32 %228;
    i32 %230 = select i1 %229 ? i32 %225 : i32 %223;
    ubr ^super.header2;
  ^b11:
    i32 %231 = add i32 %132, i32 1;
    ubr ^while.header5;
  ^while.body16:
    i32 %232 = phi [^super.header2, i32 %197] [^while.body16, i32 %239];
    i32 %233 = phi [^super.header2, i32 %198] [^while.body16, i32 %240];
    i32* %234 = getelementptr &(i32* %94)[i32 %233];
    i32 %235 = load i32* %234;
    i32* %236 = getelementptr &(i32* %94)[i32 %232];
    i32 %237 = load i32* %236;
    i1 %238 = scmp lt i32 %235, i32 %237;
    i32 %239 = select i1 %238 ? i32 %233 : i32 %232;
    i32 %240 = add i32 %233, i32 1;
    i1 %241 = scmp lt i32 %240, i32 %27;
    cbr i1 %241(prob = 0.97), ^while.body16, ^b8;
}
