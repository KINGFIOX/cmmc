internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i1 %24 = icmp neq i32 %12, i32 0;
    i32 %25 = neg i32 %23;
    i32 %26 = select i1 %24 ? i32 %25 : i32 %23;
    i1 %27 = icmp neq i32 %26, i32 0;
    [100005 * i32]* %28 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %27(prob = 0.984615), ^while.body2, ^b1;
  ^b1:
    i32* %31 = getelementptr &([100005 * i32]* %28)[i64 0][i64 0];
    ubr ^while.header;
  ^while.body2:
    i32 %32 = phi [^b, i32 0] [^b2, i32 %67];
    i32 %33 = call () -> i32 @getch();
    i32 %34 = add i32 %33, i32 -48;
    i1 %35 = icmp ugt i32 %34, i32 9;
    i32* %36 = getelementptr &([100005 * i32]* %28)[i64 0][i32 %32];
    cbr i1 %35(prob = 0.984615), ^while.body3, ^44;
  ^while.body3:
    i32 %37 = phi [^while.body2, i32 %33] [^while.body3, i32 %39];
    i32 %38 = phi [^while.body2, i32 0] [^while.body3, i32 %43];
    i32 %39 = call () -> i32 @getch();
    i32 %40 = add i32 %39, i32 -48;
    i1 %41 = icmp ugt i32 %40, i32 9;
    i1 %42 = icmp eq i32 %37, i32 45;
    i32 %43 = select i1 %42 ? i32 1 : i32 %38;
    cbr i1 %41(prob = 0.984615), ^while.body3, ^44;
  ^44:
    i32 %45 = phi [^while.body2, i32 %33] [^while.body3, i32 %39];
    i32 %46 = phi [^while.body2, i32 0] [^while.body3, i32 %43];
    i32 %47 = add i32 %45, i32 -48;
    i1 %48 = icmp ult i32 %47, i32 10;
    cbr i1 %48(prob = 0.984615), ^while.body5, ^b2;
  ^while.header:
    i32 %49 = phi [^b1, i32 0] [^while.header1, i32 %52];
    i1 %50 = icmp sgt i32 %26, i32 %49;
    cbr i1 %50(prob = 0.984615), ^while.body4, ^b3;
  ^while.body4:
    i32* %51 = getelementptr &(i32* %31)[i32 %49];
    i32 %52 = add i32 %49, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %53 = phi [^44, i32 %45] [^while.body5, i32 %55];
    i32 %54 = phi [^44, i32 0] [^while.body5, i32 %60];
    i32 %55 = call () -> i32 @getch();
    i32 %56 = add i32 %55, i32 -48;
    i1 %57 = icmp ult i32 %56, i32 10;
    i32 %58 = mul i32 %54, i32 10;
    i32 %59 = add i32 %58, i32 -48;
    i32 %60 = add i32 %53, i32 %59;
    cbr i1 %57(prob = 0.984615), ^while.body5, ^b2;
  ^b2:
    i32 %61 = phi [^44, i32 0] [^while.body5, i32 %60];
    i1 %62 = icmp neq i32 %46, i32 0;
    i32 %63 = neg i32 %61;
    i32 %64 = select i1 %62 ? i32 %63 : i32 %61;
    store i32* %36 with i32 %64;
    i32* %65 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %32];
    store i32* %65 with i32 %64;
    i32* %66 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %32];
    store i32* %66 with i32 %64;
    i32 %67 = add i32 %32, i32 1;
    i1 %68 = icmp neq i32 %26, i32 %67;
    cbr i1 %68(prob = 0.984615), ^while.body2, ^b1;
  ^b3:
    i32* %69 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    i1 %70 = icmp sgt i32 %26, i32 0;
    i32 %71 = add i32 %26, i32 -8;
    [400020 * i32]* %72 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %70(prob = 0.984615), ^super.header, ^75;
  ^while.header1:
    i32 %73 = phi [^while.body4, i32 %52] [^b4, i32 %147];
    i1 %74 = icmp sgt i32 %26, i32 %73;
    cbr i1 %74(prob = 0.984615), ^while.body6, ^while.header;
  ^75:
    i32 %76 = phi [^b3, i32 -100] [^while.body8, i32 %141];
    ubr ^while.header2;
  ^super.header:
    i1 %77 = icmp sgt i32 %26, i32 8;
    cbr i1 %77(prob = 0.888889), ^while.body7, ^while.body8;
  ^while.body6:
    i32* %78 = getelementptr &(i32* %31)[i32 %73];
    i32 %79 = load i32* %51;
    i32 %80 = load i32* %78;
    i1 %81 = icmp sgt i32 %79, i32 %80;
    cbr i1 %81(prob = 0.5), ^if.then, ^b4;
  ^while.body7:
    i32 %82 = phi [^super.header, i32 -100] [^while.body7, i32 %128];
    i32 %83 = phi [^super.header, i32 0] [^while.body7, i32 %132];
    i32* %84 = getelementptr &(i32* %69)[i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %87, i32 1;
    store i32* %86 with i32 %88;
    i32* %89 = getelementptr &(i32* %84)[i64 1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %92, i32 1;
    store i32* %91 with i32 %93;
    i32 %94 = smax i32 %82, i32 %85;
    i32 %95 = smax i32 %90, i32 %94;
    i32* %96 = getelementptr &(i32* %84)[i64 2];
    i32 %97 = load i32* %96;
    i32 %98 = smax i32 %95, i32 %97;
    i32* %99 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %97];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %100, i32 1;
    store i32* %99 with i32 %101;
    i32* %102 = getelementptr &(i32* %84)[i64 3];
    i32 %103 = load i32* %102;
    i32 %104 = smax i32 %98, i32 %103;
    i32* %105 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %103];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %106, i32 1;
    store i32* %105 with i32 %107;
    i32* %108 = getelementptr &(i32* %84)[i64 4];
    i32 %109 = load i32* %108;
    i32 %110 = smax i32 %104, i32 %109;
    i32* %111 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %109];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %112, i32 1;
    store i32* %111 with i32 %113;
    i32* %114 = getelementptr &(i32* %84)[i64 5];
    i32 %115 = load i32* %114;
    i32 %116 = smax i32 %110, i32 %115;
    i32* %117 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %115];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %118, i32 1;
    store i32* %117 with i32 %119;
    i32* %120 = getelementptr &(i32* %84)[i64 6];
    i32 %121 = load i32* %120;
    i32 %122 = smax i32 %116, i32 %121;
    i32* %123 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %121];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %124, i32 1;
    store i32* %123 with i32 %125;
    i32* %126 = getelementptr &(i32* %84)[i64 7];
    i32 %127 = load i32* %126;
    i32 %128 = smax i32 %122, i32 %127;
    i32* %129 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %127];
    i32 %130 = load i32* %129;
    i32 %131 = add i32 %130, i32 1;
    store i32* %129 with i32 %131;
    i32 %132 = add i32 %83, i32 8;
    i1 %133 = icmp sgt i32 %71, i32 %132;
    cbr i1 %133(prob = 0.888889), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %134 = phi [^super.header, i32 0] [^while.body7, i32 %132] [^while.body8, i32 %142];
    i32 %135 = phi [^super.header, i32 -100] [^while.body7, i32 %128] [^while.body8, i32 %141];
    i32* %136 = getelementptr &(i32* %69)[i32 %134];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %139, i32 1;
    store i32* %138 with i32 %140;
    i32 %141 = smax i32 %135, i32 %137;
    i32 %142 = add i32 %134, i32 1;
    i1 %143 = icmp sgt i32 %26, i32 %142;
    cbr i1 %143(prob = 0.875), ^while.body8, ^75;
  ^while.header2:
    i32 %144 = phi [^75, i32 0] [^b6, i32 %152];
    i32 %145 = phi [^75, i32 0] [^b6, i32 %153];
    i1 %146 = icmp sge i32 %76, i32 %145;
    cbr i1 %146(prob = 0.984615), ^while.body9, ^b5;
  ^if.then:
    store i32* %51 with i32 %80;
    store i32* %78 with i32 %79;
    ubr ^b4;
  ^b4:
    i32 %147 = add i32 %73, i32 1;
    ubr ^while.header1;
  ^b5:
    i32* %148 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    ubr ^while.header3;
  ^while.body9:
    i32* %149 = getelementptr &([400020 * i32]* %72)[i64 0][i32 %145];
    i32 %150 = load i32* %149;
    i1 %151 = icmp neq i32 %150, i32 0;
    cbr i1 %151(prob = 0.984615), ^while.body10, ^b6;
  ^b6:
    i32 %152 = phi [^while.body9, i32 %144] [^while.body10, i32 %159];
    i32 %153 = add i32 %145, i32 1;
    ubr ^while.header2;
  ^while.body10:
    i32 %154 = phi [^while.body9, i32 %150] [^while.body10, i32 %157];
    i32 %155 = phi [^while.body9, i32 %144] [^while.body10, i32 %159];
    i32* %156 = getelementptr &(i32* %69)[i32 %155];
    store i32* %156 with i32 %145;
    i32 %157 = add i32 %154, i32 -1;
    i1 %158 = icmp neq i32 %157, i32 0;
    i32 %159 = add i32 %155, i32 1;
    cbr i1 %158(prob = 0.984615), ^while.body10, ^b6;
  ^while.header3:
    i32 %160 = phi [^b5, i32 0] [^b8, i32 %162];
    i1 %161 = icmp sgt i32 %26, i32 %160;
    cbr i1 %161(prob = 0.984615), ^while.body11, ^b7;
  ^while.body11:
    i32 %162 = add i32 %160, i32 1;
    i1 %163 = icmp sgt i32 %26, i32 %162;
    i32* %164 = getelementptr &(i32* %148)[i32 %160];
    cbr i1 %163(prob = 0.984615), ^super.header1, ^b8;
  ^b7:
    cbr i1 %27(prob = 0.984615), ^while.body12, ^while.header4;
  ^b8:
    i32* %165 = phi [^while.body11, i32* %164] [^while.body14, i32* %254];
    i32 %166 = load i32* %164;
    i32 %167 = load i32* %165;
    store i32* %164 with i32 %167;
    store i32* %165 with i32 %166;
    ubr ^while.header3;
  ^super.header1:
    i32 %168 = add i32 %160, i32 9;
    i1 %169 = icmp sgt i32 %26, i32 %168;
    cbr i1 %169(prob = 0.888889), ^while.body13, ^while.body14;
  ^while.body12:
    i32 %170 = phi [^b7, i32 0] [^while.body12, i32 %180];
    i32* %171 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &([100005 * i32]* %28)[i64 0][i32 %170];
    i32 %174 = load i32* %173;
    i32 %175 = sub i32 %172, i32 %174;
    store i32* %171 with i32 %175;
    i32* %176 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %170];
    i32 %177 = load i32* %176;
    i32 %178 = sub i32 %177, i32 %175;
    i32 %179 = sub i32 %178, i32 %174;
    store i32* %176 with i32 %179;
    i32 %180 = add i32 %170, i32 1;
    i32 %181 = sub i32 %26, i32 %180;
    i1 %182 = icmp neq i32 %181, i32 0;
    cbr i1 %182(prob = 0.984615), ^while.body12, ^while.header4;
  ^while.header4:
    i32 %183 = phi [^b7, i32 0] [^while.body12, i32 0] [^b11, i32 %264];
    i32 %184 = sub i32 %183, i32 %26;
    i1 %185 = icmp neq i32 %184, i32 0;
    cbr i1 %185(prob = 0.984615), ^while.body15, ^b9;
  ^while.body13:
    i32 %186 = phi [^super.header1, i32 %160] [^while.body13, i32 %242];
    i32 %187 = phi [^super.header1, i32 %162] [^while.body13, i32 %244];
    i32* %188 = phi [^super.header1, i32* %164] [^while.body13, i32* %243];
    i32* %189 = getelementptr &(i32* %148)[i32 %187];
    i32 %190 = load i32* %189;
    i32 %191 = load i32* %188;
    i1 %192 = icmp slt i32 %190, i32 %191;
    i32 %193 = select i1 %192 ? i32 %187 : i32 %186;
    i32* %194 = getelementptr &(i32* %148)[i32 %193];
    i32 %195 = add i32 %187, i32 1;
    i32* %196 = getelementptr &(i32* %148)[i32 %195];
    i32 %197 = load i32* %196;
    i32 %198 = load i32* %194;
    i1 %199 = icmp slt i32 %197, i32 %198;
    i32 %200 = select i1 %199 ? i32 %195 : i32 %193;
    i32* %201 = getelementptr &(i32* %148)[i32 %200];
    i32 %202 = add i32 %187, i32 2;
    i32* %203 = getelementptr &(i32* %148)[i32 %202];
    i32 %204 = load i32* %203;
    i32 %205 = load i32* %201;
    i1 %206 = icmp slt i32 %204, i32 %205;
    i32 %207 = select i1 %206 ? i32 %202 : i32 %200;
    i32* %208 = getelementptr &(i32* %148)[i32 %207];
    i32 %209 = add i32 %187, i32 3;
    i32* %210 = getelementptr &(i32* %148)[i32 %209];
    i32 %211 = load i32* %210;
    i32 %212 = load i32* %208;
    i1 %213 = icmp slt i32 %211, i32 %212;
    i32 %214 = select i1 %213 ? i32 %209 : i32 %207;
    i32* %215 = getelementptr &(i32* %148)[i32 %214];
    i32 %216 = add i32 %187, i32 4;
    i32* %217 = getelementptr &(i32* %148)[i32 %216];
    i32 %218 = load i32* %217;
    i32 %219 = load i32* %215;
    i1 %220 = icmp slt i32 %218, i32 %219;
    i32 %221 = select i1 %220 ? i32 %216 : i32 %214;
    i32* %222 = getelementptr &(i32* %148)[i32 %221];
    i32 %223 = add i32 %187, i32 5;
    i32* %224 = getelementptr &(i32* %148)[i32 %223];
    i32 %225 = load i32* %224;
    i32 %226 = load i32* %222;
    i1 %227 = icmp slt i32 %225, i32 %226;
    i32 %228 = select i1 %227 ? i32 %223 : i32 %221;
    i32* %229 = getelementptr &(i32* %148)[i32 %228];
    i32 %230 = add i32 %187, i32 6;
    i32* %231 = getelementptr &(i32* %148)[i32 %230];
    i32 %232 = load i32* %231;
    i32 %233 = load i32* %229;
    i1 %234 = icmp slt i32 %232, i32 %233;
    i32 %235 = select i1 %234 ? i32 %230 : i32 %228;
    i32* %236 = getelementptr &(i32* %148)[i32 %235];
    i32 %237 = add i32 %187, i32 7;
    i32* %238 = getelementptr &(i32* %148)[i32 %237];
    i32 %239 = load i32* %238;
    i32 %240 = load i32* %236;
    i1 %241 = icmp slt i32 %239, i32 %240;
    i32 %242 = select i1 %241 ? i32 %237 : i32 %235;
    i32* %243 = getelementptr &(i32* %148)[i32 %242];
    i32 %244 = add i32 %187, i32 8;
    i1 %245 = icmp sgt i32 %71, i32 %244;
    cbr i1 %245(prob = 0.888889), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32* %246 = phi [^super.header1, i32* %164] [^while.body13, i32* %243] [^while.body14, i32* %254];
    i32 %247 = phi [^super.header1, i32 %162] [^while.body13, i32 %244] [^while.body14, i32 %255];
    i32 %248 = phi [^super.header1, i32 %160] [^while.body13, i32 %242] [^while.body14, i32 %253];
    i32* %249 = getelementptr &(i32* %148)[i32 %247];
    i32 %250 = load i32* %249;
    i32 %251 = load i32* %246;
    i1 %252 = icmp slt i32 %250, i32 %251;
    i32 %253 = select i1 %252 ? i32 %247 : i32 %248;
    i32* %254 = getelementptr &(i32* %148)[i32 %253];
    i32 %255 = add i32 %247, i32 1;
    i1 %256 = icmp sgt i32 %26, i32 %255;
    cbr i1 %256(prob = 0.875), ^while.body14, ^b8;
  ^while.body15:
    i32* %257 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %183];
    i32 %258 = load i32* %257;
    i1 %259 = icmp neq i32 %258, i32 0;
    cbr i1 %259(prob = 0.5), ^b9, ^b10;
  ^b9:
    i32 %260 = phi [^while.header4, i32 -123] [^while.body15, i32 1] [^b10, i32 2];
    ret i32 %260;
  ^b10:
    i32* %261 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %183];
    i32 %262 = load i32* %261;
    i1 %263 = icmp neq i32 %262, i32 0;
    cbr i1 %263(prob = 0.5), ^b9, ^b11;
  ^b11:
    i32 %264 = add i32 %183, i32 1;
    ubr ^while.header4;
}
