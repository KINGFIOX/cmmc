internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    i1 %2 = scmp gt i32 %0, i32 57;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.98), ^while.body, ^while.guard;
^while.body:
    i32 %4 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %5 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %6 = scmp eq i32 %4, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b;
^while.guard:
    i32 %7 = phi [^entry, i32 %0] [^b4, i32 %13];
    i32 %8 = phi [^entry, i32 0] [^b4, i32 %12];
    i1 %9 = scmp gt i32 %7, i32 47;
    i1 %10 = scmp lt i32 %7, i32 58;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.48), ^while.body1, ^b1;
^if.then:
    ubr ^b;
^b:
    i32 %12 = phi [^while.body, i32 %5] [^if.then, i32 1];
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp lt i32 %13, i32 48;
    cbr i1 %14(prob = 0.5), ^b4, ^b3;
^while.body1:
    i32 %15 = phi [^while.guard, i32 %7] [^b5, i32 %20];
    i32 %16 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i32 %17 = mul i32 %16, i32 10;
    i32 %18 = add i32 %15, i32 -48;
    i32 %19 = add i32 %18, i32 %17;
    i32 %20 = call () -> i32 @getch();
    i1 %21 = scmp gt i32 %20, i32 47;
    cbr i1 %21(prob = 0.5), ^b2, ^b5;
^b1:
    i32 %22 = phi [^while.guard, i32 0] [^b5, i32 %19];
    i1 %23 = scmp neq i32 %8, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then1, ^b6;
^b2:
    i1 %24 = scmp le i32 %20, i32 57;
    ubr ^b5;
^b3:
    i1 %25 = scmp gt i32 %13, i32 57;
    ubr ^b4;
^if.then1:
    i32 %26 = neg i32 %22;
    ubr ^b6;
^b4:
    i1 %27 = phi [^b, i1 true] [^b3, i1 %25];
    cbr i1 %27(prob = 0.97), ^while.body, ^while.guard;
^b5:
    i1 %28 = phi [^b2, i1 %24] [^while.body1, i1 false];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
^b6:
    i32 %29 = phi [^b1, i32 %22] [^if.then1, i32 %26];
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body2, ^b7;
^while.body2:
    i32 %31 = phi [^b18, i32 %97] [^b6, i32 0];
    i32* %32 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %31];
    i32 %33 = call () -> i32 @getch();
    i1 %34 = scmp lt i32 %33, i32 48;
    i1 %35 = scmp gt i32 %33, i32 57;
    i1 %36 = or i1 %34, i1 %35;
    cbr i1 %36(prob = 0.98), ^while.body3, ^while.guard1;
^b7:
    i32* %37 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    i1 %38 = scmp gt i32 %29, i32 0;
    cbr i1 %38(prob = 0.97), ^while.body4, ^b8;
^while.body3:
    i32 %39 = phi [^while.body2, i32 %33] [^b15, i32 %52];
    i32 %40 = phi [^while.body2, i32 0] [^b15, i32 %51];
    i1 %41 = scmp eq i32 %39, i32 45;
    cbr i1 %41(prob = 0.5), ^if.then2, ^b9;
^while.guard1:
    i32 %42 = phi [^while.body2, i32 %33] [^b15, i32 %52];
    i32 %43 = phi [^while.body2, i32 0] [^b15, i32 %51];
    i1 %44 = scmp gt i32 %42, i32 47;
    i1 %45 = scmp lt i32 %42, i32 58;
    i1 %46 = and i1 %44, i1 %45;
    cbr i1 %46(prob = 0.48), ^while.body5, ^b10;
^while.body4:
    i32 %47 = phi [^b11, i32 %80] [^b7, i32 0];
    i32 %48 = add i32 %47, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %29;
    cbr i1 %49(prob = 0.97), ^while.body6, ^b11;
^b8:
    i32* %50 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    cbr i1 %38(prob = 0.97), ^while.body7, ^b12;
^if.then2:
    ubr ^b9;
^b9:
    i32 %51 = phi [^while.body3, i32 %40] [^if.then2, i32 1];
    i32 %52 = call () -> i32 @getch();
    i1 %53 = scmp lt i32 %52, i32 48;
    cbr i1 %53(prob = 0.5), ^b15, ^b14;
^while.body5:
    i32 %54 = phi [^while.guard1, i32 %42] [^b16, i32 %59];
    i32 %55 = phi [^while.guard1, i32 0] [^b16, i32 %58];
    i32 %56 = mul i32 %55, i32 10;
    i32 %57 = add i32 %54, i32 -48;
    i32 %58 = add i32 %57, i32 %56;
    i32 %59 = call () -> i32 @getch();
    i1 %60 = scmp gt i32 %59, i32 47;
    cbr i1 %60(prob = 0.5), ^b13, ^b16;
^while.body6:
    i32 %61 = phi [^b17, i32 %92] [^while.body4, i32 %48];
    i32 %62 = phi [^while.body4, i32 %47] [^b17, i32 %91];
    i32* %63 = getelementptr &(i32* %37)[i32 %62];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %37)[i32 %61];
    i32 %66 = load i32* %65;
    i1 %67 = scmp gt i32 %64, i32 %66;
    cbr i1 %67(prob = 0.5), ^if.then3, ^b17;
^b10:
    i32 %68 = phi [^while.guard1, i32 0] [^b16, i32 %58];
    i1 %69 = scmp neq i32 %43, i32 0;
    cbr i1 %69(prob = 0.5), ^if.then4, ^b18;
^while.body7:
    i32 %70 = phi [^b19, i32 %99] [^b8, i32 -100];
    i32 %71 = phi [^b8, i32 0] [^b19, i32 %101];
    i32 %72 = phi [^b8, i32 -100] [^b19, i32 %100];
    i32* %73 = getelementptr &(i32* %50)[i32 %71];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %76, i32 1;
    store i32* %75 with i32 %77;
    i1 %78 = scmp gt i32 %74, i32 %72;
    cbr i1 %78(prob = 0.5), ^if.then5, ^b19;
^b11:
    i32 %79 = phi [^while.body4, i32 %47] [^b17, i32 %91];
    i32 %80 = add i32 %79, i32 1;
    i1 %81 = scmp lt i32 %80, i32 %29;
    cbr i1 %81(prob = 0.97), ^while.body4, ^b8;
^b12:
    i32 %82 = phi [^b19, i32 %99] [^b8, i32 -100];
    i32 %83 = phi [^b8, i32 -100] [^b19, i32 %100];
    i1 %84 = scmp gt i32 %83, i32 -1;
    cbr i1 %84(prob = 0.97), ^while.body8, ^b20;
^b13:
    i1 %85 = scmp le i32 %59, i32 57;
    ubr ^b16;
^if.then3:
    i32 %86 = load i32* %63;
    store i32* %63 with i32 %66;
    store i32* %65 with i32 %86;
    ubr ^b17;
^b14:
    i1 %87 = scmp gt i32 %52, i32 57;
    ubr ^b15;
^if.then4:
    i32 %88 = neg i32 %68;
    ubr ^b18;
^if.then5:
    ubr ^b19;
^b15:
    i1 %89 = phi [^b9, i1 true] [^b14, i1 %87];
    cbr i1 %89(prob = 0.97), ^while.body3, ^while.guard1;
^b16:
    i1 %90 = phi [^b13, i1 %85] [^while.body5, i1 false];
    cbr i1 %90(prob = 0.97), ^while.body5, ^b10;
^b17:
    i32 %91 = phi [^while.body6, i32 %62] [^if.then3, i32 %47];
    i32 %92 = add i32 %61, i32 1;
    i1 %93 = scmp lt i32 %92, i32 %29;
    cbr i1 %93(prob = 0.97), ^while.body6, ^b11;
^b18:
    i32 %94 = phi [^if.then4, i32 %88] [^b10, i32 %68];
    store i32* %32 with i32 %94;
    i32* %95 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %31];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %31];
    store i32* %96 with i32 %94;
    i32 %97 = add i32 %31, i32 1;
    i1 %98 = scmp neq i32 %97, i32 %29;
    cbr i1 %98(prob = 0.97), ^while.body2, ^b7;
^b19:
    i32 %99 = phi [^if.then5, i32 %74] [^while.body7, i32 %70];
    i32 %100 = phi [^while.body7, i32 %72] [^if.then5, i32 %74];
    i32 %101 = add i32 %71, i32 1;
    i1 %102 = scmp lt i32 %101, i32 %29;
    cbr i1 %102(prob = 0.97), ^while.body7, ^b12;
^while.body8:
    i32 %103 = phi [^b21, i32 %118] [^b12, i32 0];
    i32 %104 = phi [^b21, i32 %121] [^b12, i32 0];
    i32 %105 = phi [^b12, i32 %83] [^b21, i32 %119];
    i32 %106 = phi [^b12, i32 0] [^b21, i32 %120];
    i32* %107 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %104];
    i32 %108 = load i32* %107;
    i1 %109 = scmp neq i32 %108, i32 0;
    cbr i1 %109(prob = 0.97), ^while.body9, ^b21;
^b20:
    i32* %110 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    cbr i1 %38(prob = 0.97), ^while.body10, ^b22;
^while.body9:
    i32 %111 = phi [^while.body8, i32 %103] [^while.body9, i32 %115];
    i32 %112 = phi [^while.body8, i32 %108] [^while.body9, i32 %116];
    i32 %113 = phi [^while.body8, i32 %106] [^while.body9, i32 %115];
    i32* %114 = getelementptr &(i32* %50)[i32 %113];
    store i32* %114 with i32 %104;
    i32 %115 = add i32 %111, i32 1;
    i32 %116 = add i32 %112, i32 -1;
    i1 %117 = scmp neq i32 %116, i32 0;
    cbr i1 %117(prob = 0.97), ^while.body9, ^b21;
^b21:
    i32 %118 = phi [^while.body9, i32 %115] [^while.body8, i32 %103];
    i32 %119 = phi [^while.body8, i32 %105] [^while.body9, i32 %82];
    i32 %120 = phi [^while.body8, i32 %106] [^while.body9, i32 %115];
    i32 %121 = add i32 %104, i32 1;
    i1 %122 = scmp le i32 %121, i32 %119;
    cbr i1 %122(prob = 0.97), ^while.body8, ^b20;
^while.body10:
    i32 %123 = phi [^b23, i32 %124] [^b20, i32 0];
    i32 %124 = add i32 %123, i32 1;
    i1 %125 = scmp lt i32 %124, i32 %29;
    cbr i1 %125(prob = 0.97), ^while.body11, ^b23;
^b22:
    cbr i1 %30(prob = 0.97), ^while.body12, ^b24;
^while.body11:
    i32 %126 = phi [^b25, i32 %154] [^while.body10, i32 %123];
    i32 %127 = phi [^while.body10, i32 %123] [^b25, i32 %155];
    i32 %128 = phi [^while.body10, i32 %124] [^b25, i32 %156];
    i32* %129 = getelementptr &(i32* %110)[i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %110)[i32 %127];
    i32 %132 = load i32* %131;
    i1 %133 = scmp lt i32 %130, i32 %132;
    cbr i1 %133(prob = 0.5), ^if.then6, ^b25;
^while.body12:
    i32 %134 = phi [^b22, i32 0] [^while.body12, i32 %144];
    i32* %135 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %134];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %134];
    i32 %138 = load i32* %137;
    i32 %139 = sub i32 %136, i32 %138;
    store i32* %135 with i32 %139;
    i32* %140 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %134];
    i32 %141 = load i32* %140;
    i32 %142 = sub i32 %141, i32 %139;
    i32 %143 = sub i32 %142, i32 %138;
    store i32* %140 with i32 %143;
    i32 %144 = add i32 %134, i32 1;
    i32 %145 = sub i32 %29, i32 %144;
    i1 %146 = scmp neq i32 %145, i32 0;
    cbr i1 %146(prob = 0.97), ^while.body12, ^b24;
^b23:
    i32 %147 = phi [^while.body10, i32 %123] [^b25, i32 %154];
    i32 %148 = phi [^while.body10, i32 %123] [^b25, i32 %155];
    i32* %149 = getelementptr &(i32* %110)[i32 %123];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %110)[i32 %148];
    i32 %152 = load i32* %151;
    store i32* %149 with i32 %152;
    i32* %153 = getelementptr &(i32* %110)[i32 %147];
    store i32* %153 with i32 %150;
    cbr i1 %125(prob = 0.97), ^while.body10, ^b22;
^b24:
    cbr i1 %30(prob = 0.97), ^while.body13, ^b26;
^if.then6:
    ubr ^b25;
^b25:
    i32 %154 = phi [^if.then6, i32 %128] [^while.body11, i32 %126];
    i32 %155 = phi [^while.body11, i32 %127] [^if.then6, i32 %128];
    i32 %156 = add i32 %128, i32 1;
    i1 %157 = scmp lt i32 %156, i32 %29;
    cbr i1 %157(prob = 0.97), ^while.body11, ^b23;
^while.body13:
    i32 %158 = phi [^b28, i32 %166] [^b24, i32 0];
    i32* %159 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %158];
    i32 %160 = load i32* %159;
    i1 %161 = scmp neq i32 %160, i32 0;
    cbr i1 %161(prob = 0.5), ^b26, ^b27;
^b26:
    i32 %162 = phi [^b28, i32 -123] [^b27, i32 2] [^while.body13, i32 1] [^b24, i32 -123];
    ret i32 %162;
^b27:
    i32* %163 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %158];
    i32 %164 = load i32* %163;
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.5), ^b26, ^b28;
^b28:
    i32 %166 = add i32 %158, i32 1;
    i32 %167 = sub i32 %166, i32 %29;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.97), ^while.body13, ^b26;
}
