internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %id = alloc i32;
    i32* %t = alloc i32;
    i32* %i1 = alloc i32;
    i32* %mx = alloc i32;
    i32* %now = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %t1 = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %12] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %13] [^entry, i32 %0];
    i1 %4 = scmp lt i32 %3, i32 48;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i1 %5 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %6 = phi [^b, i1 %5] [^while.header, i1 true];
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %7 = scmp eq i32 %3, i32 45;
    cbr i1 %7(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %8 = phi [^b1, i32 %1] [^while.body1, i32 %8];
    i32 %9 = phi [^b1, i32 %2] [^while.body1, i32 %18];
    i32 %10 = phi [^b1, i32 %3] [^while.body1, i32 %19];
    i1 %11 = scmp gt i32 %10, i32 47;
    cbr i1 %11(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %12 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %13 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %14 = scmp le i32 %10, i32 57;
    ubr ^b4;
^b4:
    i1 %15 = phi [^while.header1, i1 false] [^b3, i1 %14];
    cbr i1 %15(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %16 = mul i32 %9, i32 10;
    i32 %17 = add i32 %16, i32 -48;
    i32 %18 = add i32 %17, i32 %10;
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %20 = scmp neq i32 %8, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %21 = neg i32 %9;
    ubr ^entry1;
^entry1:
    i32 %22 = phi [^b5, i32 %9] [^if.then1, i32 %21];
    store i32* %n with i32 %22;
    ubr ^while.header2;
^while.header2:
    i32 %23 = phi [^while.body9, i32 %107] [^entry1, i32 0];
    i32 %24 = phi [^while.body9, i32 %48] [^entry1, i32 %22];
    i1 %25 = scmp neq i32 %23, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    i32* %26 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %23];
    i32 %27 = call () -> i32 @getch();
    ubr ^while.header3;
^b6:
    i32* %28 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %29 = phi [^b10, i32 %29] [^while.body2, i32 %24];
    i32 %30 = phi [^b10, i32 %58] [^while.body2, i32 0];
    i32 %31 = phi [^b10, i32 %31] [^while.body2, i32 0];
    i32 %32 = phi [^b10, i32 %59] [^while.body2, i32 %27];
    i1 %33 = scmp lt i32 %32, i32 48;
    cbr i1 %33(prob = 0.5), ^b8, ^b7;
^while.header4:
    i32 %34 = phi [^b12, i32 %43] [^b6, i32 %24];
    i32 %35 = phi [^b12, i32 %61] [^b6, i32 0];
    i32* %36 = phi [^b12, i32* %46] [^b6, i32* %28];
    i1 %37 = scmp lt i32 %35, i32 %34;
    cbr i1 %37(prob = 0.97), ^while.body3, ^b9;
^b7:
    i1 %38 = scmp gt i32 %32, i32 57;
    ubr ^b8;
^while.body3:
    i32 %39 = add i32 %35, i32 1;
    store i32* %j1 with i32 %39;
    ubr ^while.header5;
^b8:
    i1 %40 = phi [^b7, i1 %38] [^while.header3, i1 true];
    cbr i1 %40(prob = 0.97), ^while.body4, ^while.header6;
^b9:
    i32* %41 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    store i32* %i1 with i32 0;
    store i32* %mx with i32 -100;
    ubr ^while.header7;
^while.body4:
    i1 %42 = scmp eq i32 %32, i32 45;
    cbr i1 %42(prob = 0.5), ^if.then2, ^b10;
^while.header5:
    i32 %43 = phi [^b15, i32 %83] [^while.body3, i32 %34];
    i32 %44 = phi [^b15, i32 %86] [^while.body3, i32 %39];
    i32 %45 = phi [^b15, i32 %85] [^while.body3, i32 %35];
    i32* %46 = phi [^b15, i32* %46] [^while.body3, i32* %36];
    i1 %47 = scmp lt i32 %44, i32 %43;
    cbr i1 %47(prob = 0.97), ^while.body5, ^b12;
^while.header6:
    i32 %48 = phi [^b8, i32 %29] [^while.body7, i32 %48];
    i32 %49 = phi [^b8, i32 %30] [^while.body7, i32 %49];
    i32 %50 = phi [^b8, i32 %31] [^while.body7, i32 %89];
    i32 %51 = phi [^b8, i32 %32] [^while.body7, i32 %90];
    i1 %52 = scmp gt i32 %51, i32 47;
    cbr i1 %52(prob = 0.5), ^b11, ^b14;
^while.header7:
    i32 %53 = phi [^b16, i32 %53] [^b9, i32 %34];
    i32 %54 = phi [^b16, i32 %91] [^b9, i32 -100];
    i32 %55 = phi [^b16, i32 %92] [^b9, i32 0];
    i32* %56 = phi [^b16, i32* %56] [^b9, i32* %41];
    i1 %57 = scmp lt i32 %55, i32 %53;
    cbr i1 %57(prob = 0.97), ^while.body6, ^b13;
^if.then2:
    ubr ^b10;
^b10:
    i32 %58 = phi [^if.then2, i32 1] [^while.body4, i32 %30];
    i32 %59 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %60 = scmp le i32 %51, i32 57;
    ubr ^b14;
^b12:
    i32 %61 = add i32 %45, i32 1;
    store i32* %i2 with i32 %61;
    ubr ^while.header4;
^while.body5:
    i32* %62 = getelementptr &(i32* %46)[i32 %45];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %46)[i32 %44];
    i32 %65 = load i32* %64;
    i1 %66 = scmp gt i32 %63, i32 %65;
    cbr i1 %66(prob = 0.5), ^if.then3, ^b15;
^b13:
    store i32* %i1 with i32 0;
    store i32* %now with i32 0;
    ubr ^while.header8;
^while.body6:
    i32* %67 = getelementptr &(i32* %56)[i32 %55];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %70, i32 1;
    store i32* %69 with i32 %71;
    i32 %72 = load i32* %67;
    i1 %73 = scmp gt i32 %72, i32 %54;
    cbr i1 %73(prob = 0.5), ^if.then4, ^b16;
^b14:
    i1 %74 = phi [^while.header6, i1 false] [^b11, i1 %60];
    cbr i1 %74(prob = 0.97), ^while.body7, ^b17;
^if.then3:
    i32 %75 = load i32* %62;
    store i32* %t1 with i32 %75;
    i32 %76 = load i32* %64;
    store i32* %62 with i32 %76;
    i32 %77 = load i32* %t1;
    i32 %78 = load i32* %j1;
    i32* %79 = getelementptr &(i32* %46)[i32 %78];
    store i32* %79 with i32 %77;
    i32 %80 = load i32* %n;
    i32 %81 = load i32* %j1;
    i32 %82 = load i32* %i2;
    ubr ^b15;
^b15:
    i32 %83 = phi [^if.then3, i32 %80] [^while.body5, i32 %43];
    i32 %84 = phi [^if.then3, i32 %81] [^while.body5, i32 %44];
    i32 %85 = phi [^if.then3, i32 %82] [^while.body5, i32 %45];
    i32 %86 = add i32 %84, i32 1;
    store i32* %j1 with i32 %86;
    ubr ^while.header5;
^if.then4:
    store i32* %mx with i32 %72;
    ubr ^b16;
^while.body7:
    i32 %87 = mul i32 %50, i32 10;
    i32 %88 = add i32 %87, i32 -48;
    i32 %89 = add i32 %88, i32 %51;
    i32 %90 = call () -> i32 @getch();
    ubr ^while.header6;
^b16:
    i32 %91 = phi [^if.then4, i32 %72] [^while.body6, i32 %54];
    i32 %92 = add i32 %55, i32 1;
    store i32* %i1 with i32 %92;
    ubr ^while.header7;
^while.header8:
    i32 %93 = phi [^b19, i32 %108] [^b13, i32 %53];
    i32 %94 = phi [^b19, i32 %109] [^b13, i32 0];
    i32 %95 = phi [^b19, i32 %110] [^b13, i32 %54];
    i32 %96 = phi [^b19, i32 %127] [^b13, i32 0];
    i32* %97 = phi [^b19, i32* %112] [^b13, i32* %56];
    i1 %98 = scmp le i32 %96, i32 %95;
    cbr i1 %98(prob = 0.97), ^while.body8, ^b18;
^b17:
    i1 %99 = scmp neq i32 %49, i32 0;
    cbr i1 %99(prob = 0.5), ^if.then5, ^while.body9;
^while.body8:
    i32* %100 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %96];
    i32 %101 = load i32* %100;
    store i32* %j with i32 %101;
    ubr ^while.header9;
^if.then5:
    i32 %102 = neg i32 %50;
    ubr ^while.body9;
^b18:
    i32* %103 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    store i32* %i with i32 0;
    ubr ^while.header10;
^while.body9:
    i32 %104 = phi [^b17, i32 %50] [^if.then5, i32 %102];
    store i32* %26 with i32 %104;
    i32* %105 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %23];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %23];
    store i32* %106 with i32 %104;
    i32 %107 = add i32 %23, i32 1;
    ubr ^while.header2;
^while.header9:
    i32 %108 = phi [^while.body10, i32 %120] [^while.body8, i32 %93];
    i32 %109 = phi [^while.body10, i32 %125] [^while.body8, i32 %94];
    i32 %110 = phi [^while.body10, i32 %123] [^while.body8, i32 %95];
    i32 %111 = phi [^while.body10, i32 %124] [^while.body8, i32 %96];
    i32* %112 = phi [^while.body10, i32* %112] [^while.body8, i32* %97];
    i32 %113 = phi [^while.body8, i32 %101] [^while.body10, i32 %126];
    i1 %114 = scmp neq i32 %113, i32 0;
    cbr i1 %114(prob = 0.97), ^while.body10, ^b19;
^while.header10:
    i32 %115 = phi [^b20, i32 %160] [^b18, i32 %93];
    i32 %116 = phi [^b20, i32 %162] [^b18, i32 0];
    i32* %117 = phi [^b20, i32* %147] [^b18, i32* %103];
    i1 %118 = scmp lt i32 %116, i32 %115;
    cbr i1 %118(prob = 0.97), ^while.body11, ^while.header11;
^while.body10:
    i32* %119 = getelementptr &(i32* %112)[i32 %109];
    store i32* %119 with i32 %111;
    i32 %120 = load i32* %n;
    i32 %121 = load i32* %j;
    i32 %122 = load i32* %now;
    i32 %123 = load i32* %mx;
    i32 %124 = load i32* %i1;
    i32 %125 = add i32 %122, i32 1;
    store i32* %now with i32 %125;
    i32 %126 = add i32 %121, i32 -1;
    store i32* %j with i32 %126;
    ubr ^while.header9;
^b19:
    i32 %127 = add i32 %111, i32 1;
    store i32* %i1 with i32 %127;
    ubr ^while.header8;
^while.body11:
    store i32* %id with i32 %116;
    i32 %128 = add i32 %116, i32 1;
    ubr ^while.header12;
^while.header11:
    i32 %129 = phi [^while.header10, i32 0] [^while.body12, i32 %142];
    i32 %130 = phi [^while.header10, i32 %115] [^while.body12, i32 %130];
    i32 %131 = sub i32 %130, i32 %129;
    i1 %132 = scmp neq i32 %131, i32 0;
    cbr i1 %132(prob = 0.97), ^while.body12, ^while.header13;
^while.body12:
    i32* %133 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %129];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %129];
    i32 %136 = load i32* %135;
    i32 %137 = sub i32 %134, i32 %136;
    store i32* %133 with i32 %137;
    i32* %138 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %129];
    i32 %139 = load i32* %138;
    i32 %140 = sub i32 %139, i32 %137;
    i32 %141 = sub i32 %140, i32 %136;
    store i32* %138 with i32 %141;
    i32 %142 = add i32 %129, i32 1;
    ubr ^while.header11;
^while.header12:
    i32 %143 = phi [^b22, i32 %143] [^while.body11, i32 %115];
    i32 %144 = phi [^b22, i32 %172] [^while.body11, i32 %128];
    i32 %145 = phi [^b22, i32 %171] [^while.body11, i32 %116];
    i32 %146 = phi [^b22, i32 %146] [^while.body11, i32 %116];
    i32* %147 = phi [^b22, i32* %147] [^while.body11, i32* %117];
    i1 %148 = scmp lt i32 %144, i32 %143;
    cbr i1 %148(prob = 0.97), ^while.body13, ^b20;
^while.header13:
    i32 %149 = phi [^b24, i32 %176] [^while.header11, i32 0];
    i32 %150 = phi [^b24, i32 %150] [^while.header11, i32 %130];
    i32 %151 = sub i32 %149, i32 %150;
    i1 %152 = scmp neq i32 %151, i32 0;
    cbr i1 %152(prob = 0.97), ^while.body14, ^b21;
^b20:
    i32* %153 = getelementptr &(i32* %147)[i32 %146];
    i32 %154 = load i32* %153;
    store i32* %t with i32 %154;
    i32* %155 = getelementptr &(i32* %147)[i32 %145];
    i32 %156 = load i32* %155;
    store i32* %153 with i32 %156;
    i32 %157 = load i32* %t;
    i32 %158 = load i32* %id;
    i32* %159 = getelementptr &(i32* %147)[i32 %158];
    store i32* %159 with i32 %157;
    i32 %160 = load i32* %n;
    i32 %161 = load i32* %i;
    i32 %162 = add i32 %161, i32 1;
    store i32* %i with i32 %162;
    ubr ^while.header10;
^while.body13:
    i32* %163 = getelementptr &(i32* %147)[i32 %144];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %147)[i32 %145];
    i32 %166 = load i32* %165;
    i1 %167 = scmp lt i32 %164, i32 %166;
    cbr i1 %167(prob = 0.5), ^if.then6, ^b22;
^while.body14:
    i32* %168 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %149];
    i32 %169 = load i32* %168;
    i1 %170 = scmp neq i32 %169, i32 0;
    cbr i1 %170(prob = 0.5), ^if.then7, ^b23;
^b21:
    ret i32 -123;
^if.then6:
    store i32* %id with i32 %144;
    ubr ^b22;
^b22:
    i32 %171 = phi [^while.body13, i32 %145] [^if.then6, i32 %144];
    i32 %172 = add i32 %144, i32 1;
    ubr ^while.header12;
^b23:
    i32* %173 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %149];
    i32 %174 = load i32* %173;
    i1 %175 = scmp neq i32 %174, i32 0;
    cbr i1 %175(prob = 0.5), ^if.then8, ^b24;
^if.then7:
    ret i32 1;
^b24:
    i32 %176 = add i32 %149, i32 1;
    ubr ^while.header13;
^if.then8:
    ret i32 2;
}
