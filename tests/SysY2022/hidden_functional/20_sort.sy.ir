internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp lt i32 %0, i32 48;
    cbr i1 %1(prob = 0.5), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^b, i32 0] [^b2, i32 %5];
    i32 %3 = phi [^entry, i32 %0] [^b, i32 %0] [^b2, i32 %6];
    i1 %4 = scmp eq i32 %3, i32 45;
    i32 %5 = select i1 %4 ? i32 1 : i32 %2;
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp lt i32 %6, i32 48;
    cbr i1 %7(prob = 0.5), ^b2, ^b1;
^b:
    i1 %8 = scmp gt i32 %0, i32 57;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.guard;
^b1:
    i1 %9 = scmp gt i32 %6, i32 57;
    ubr ^b2;
^b2:
    i1 %10 = phi [^while.body, i1 true] [^b1, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.guard;
^while.guard:
    i32 %11 = phi [^b, i32 0] [^b2, i32 %5];
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %6];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %14 = scmp lt i32 %12, i32 58;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b4;
^b4:
    i32 %15 = phi [^while.guard, i32 0] [^b3, i32 0] [^b7, i32 %22];
    i1 %16 = scmp neq i32 %11, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %17 = neg i32 %15;
    ubr ^b5;
^while.body1:
    i32 %18 = phi [^b3, i32 %12] [^b7, i32 %23];
    i32 %19 = phi [^b3, i32 0] [^b7, i32 %22];
    i32 %20 = mul i32 %19, i32 10;
    i32 %21 = add i32 %18, i32 -48;
    i32 %22 = add i32 %21, i32 %20;
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %23, i32 47;
    cbr i1 %24(prob = 0.5), ^b6, ^b7;
^b5:
    i32 %25 = phi [^b4, i32 %15] [^if.then, i32 %17];
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body2, ^b8;
^b6:
    i1 %27 = scmp le i32 %23, i32 57;
    ubr ^b7;
^b7:
    i1 %28 = phi [^while.body1, i1 false] [^b6, i1 %27];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b4;
^while.body2:
    i32 %29 = phi [^b5, i32 0] [^b19, i32 %99];
    i32* %30 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %29];
    i32 %31 = call () -> i32 @getch();
    i1 %32 = scmp lt i32 %31, i32 48;
    cbr i1 %32(prob = 0.5), ^while.body3, ^b9;
^b8:
    i32* %33 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    i1 %34 = scmp gt i32 %25, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body4, ^b10;
^while.body3:
    i32 %35 = phi [^while.body2, i32 0] [^b9, i32 0] [^b12, i32 %38];
    i32 %36 = phi [^while.body2, i32 %31] [^b9, i32 %31] [^b12, i32 %39];
    i1 %37 = scmp eq i32 %36, i32 45;
    i32 %38 = select i1 %37 ? i32 1 : i32 %35;
    i32 %39 = call () -> i32 @getch();
    i1 %40 = scmp lt i32 %39, i32 48;
    cbr i1 %40(prob = 0.5), ^b12, ^b11;
^b9:
    i1 %41 = scmp gt i32 %31, i32 57;
    cbr i1 %41(prob = 0.97), ^while.body3, ^while.guard1;
^while.body4:
    i32 %42 = phi [^b8, i32 0] [^b13, i32 %43];
    i32 %43 = add i32 %42, i32 1;
    i1 %44 = scmp lt i32 %43, i32 %25;
    i32* %45 = getelementptr &(i32* %33)[i32 %42];
    cbr i1 %44(prob = 0.97), ^while.body5, ^b13;
^b10:
    i32* %46 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    cbr i1 %34(prob = 0.97), ^while.body6, ^b14;
^b11:
    i1 %47 = scmp gt i32 %39, i32 57;
    ubr ^b12;
^b12:
    i1 %48 = phi [^while.body3, i1 true] [^b11, i1 %47];
    cbr i1 %48(prob = 0.97), ^while.body3, ^while.guard1;
^while.body5:
    i32 %49 = phi [^while.body4, i32 %43] [^b16, i32 %72];
    i32 %50 = load i32* %45;
    i32* %51 = getelementptr &(i32* %33)[i32 %49];
    i32 %52 = load i32* %51;
    i1 %53 = scmp gt i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^if.then1, ^b16;
^while.guard1:
    i32 %54 = phi [^b9, i32 0] [^b12, i32 %38];
    i32 %55 = phi [^b9, i32 %31] [^b12, i32 %39];
    i1 %56 = scmp gt i32 %55, i32 47;
    cbr i1 %56(prob = 0.5), ^b15, ^b17;
^while.body6:
    i32 %57 = phi [^b10, i32 -100] [^while.body6, i32 %65];
    i32 %58 = phi [^b10, i32 0] [^while.body6, i32 %66];
    i32* %59 = getelementptr &(i32* %46)[i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %62, i32 1;
    store i32* %61 with i32 %63;
    i1 %64 = scmp gt i32 %60, i32 %57;
    i32 %65 = select i1 %64 ? i32 %60 : i32 %57;
    i32 %66 = add i32 %58, i32 1;
    i1 %67 = scmp lt i32 %66, i32 %25;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b14;
^b13:
    cbr i1 %44(prob = 0.97), ^while.body4, ^b10;
^b14:
    i32 %68 = phi [^b10, i32 -100] [^while.body6, i32 %65];
    i1 %69 = scmp gt i32 %68, i32 -1;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b18;
^if.then1:
    i32 %70 = load i32* %45;
    store i32* %45 with i32 %52;
    store i32* %51 with i32 %70;
    ubr ^b16;
^b15:
    i1 %71 = scmp lt i32 %55, i32 58;
    cbr i1 %71(prob = 0.97), ^while.body8, ^b17;
^b16:
    i32 %72 = add i32 %49, i32 1;
    i1 %73 = scmp lt i32 %72, i32 %25;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b13;
^b17:
    i32 %74 = phi [^while.guard1, i32 0] [^b15, i32 0] [^b23, i32 %87];
    i1 %75 = scmp neq i32 %54, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then2, ^b19;
^while.body7:
    i32 %76 = phi [^b14, i32 0] [^b20, i32 %102];
    i32 %77 = phi [^b14, i32 0] [^b20, i32 %101];
    i32* %78 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %76];
    i32 %79 = load i32* %78;
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.97), ^while.body9, ^b20;
^b18:
    i32* %81 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    cbr i1 %34(prob = 0.97), ^while.body10, ^b21;
^if.then2:
    i32 %82 = neg i32 %74;
    ubr ^b19;
^while.body8:
    i32 %83 = phi [^b15, i32 %55] [^b23, i32 %88];
    i32 %84 = phi [^b15, i32 0] [^b23, i32 %87];
    i32 %85 = mul i32 %84, i32 10;
    i32 %86 = add i32 %83, i32 -48;
    i32 %87 = add i32 %86, i32 %85;
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp gt i32 %88, i32 47;
    cbr i1 %89(prob = 0.5), ^b22, ^b23;
^while.body9:
    i32 %90 = phi [^while.body7, i32 %79] [^while.body9, i32 %94];
    i32 %91 = phi [^while.body7, i32 %77] [^while.body9, i32 %93];
    i32* %92 = getelementptr &(i32* %46)[i32 %91];
    store i32* %92 with i32 %76;
    i32 %93 = add i32 %91, i32 1;
    i32 %94 = add i32 %90, i32 -1;
    i1 %95 = scmp neq i32 %94, i32 0;
    cbr i1 %95(prob = 0.97), ^while.body9, ^b20;
^b19:
    i32 %96 = phi [^b17, i32 %74] [^if.then2, i32 %82];
    store i32* %30 with i32 %96;
    i32* %97 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %29];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %29];
    store i32* %98 with i32 %96;
    i32 %99 = add i32 %29, i32 1;
    i1 %100 = scmp neq i32 %99, i32 %25;
    cbr i1 %100(prob = 0.97), ^while.body2, ^b8;
^b20:
    i32 %101 = phi [^while.body7, i32 %77] [^while.body9, i32 %93];
    i32 %102 = add i32 %76, i32 1;
    i1 %103 = scmp le i32 %102, i32 %68;
    cbr i1 %103(prob = 0.97), ^while.body7, ^b18;
^while.body10:
    i32 %104 = phi [^b18, i32 0] [^b24, i32 %105];
    i32 %105 = add i32 %104, i32 1;
    i1 %106 = scmp lt i32 %105, i32 %25;
    cbr i1 %106(prob = 0.97), ^while.body11, ^b24;
^b21:
    cbr i1 %26(prob = 0.97), ^while.body12, ^b25;
^b22:
    i1 %107 = scmp le i32 %88, i32 57;
    ubr ^b23;
^b23:
    i1 %108 = phi [^while.body8, i1 false] [^b22, i1 %107];
    cbr i1 %108(prob = 0.97), ^while.body8, ^b17;
^while.body11:
    i32 %109 = phi [^while.body10, i32 %104] [^while.body11, i32 %116];
    i32 %110 = phi [^while.body10, i32 %105] [^while.body11, i32 %117];
    i32* %111 = getelementptr &(i32* %81)[i32 %110];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %81)[i32 %109];
    i32 %114 = load i32* %113;
    i1 %115 = scmp lt i32 %112, i32 %114;
    i32 %116 = select i1 %115 ? i32 %110 : i32 %109;
    i32 %117 = add i32 %110, i32 1;
    i1 %118 = scmp lt i32 %117, i32 %25;
    cbr i1 %118(prob = 0.97), ^while.body11, ^b24;
^b24:
    i32 %119 = phi [^while.body10, i32 %104] [^while.body11, i32 %116];
    i32* %120 = getelementptr &(i32* %81)[i32 %104];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %81)[i32 %119];
    i32 %123 = load i32* %122;
    store i32* %120 with i32 %123;
    store i32* %122 with i32 %121;
    cbr i1 %106(prob = 0.97), ^while.body10, ^b21;
^while.body12:
    i32 %124 = phi [^b21, i32 0] [^while.body12, i32 %134];
    i32* %125 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %124];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %124];
    i32 %128 = load i32* %127;
    i32 %129 = sub i32 %126, i32 %128;
    store i32* %125 with i32 %129;
    i32* %130 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %124];
    i32 %131 = load i32* %130;
    i32 %132 = sub i32 %131, i32 %129;
    i32 %133 = sub i32 %132, i32 %128;
    store i32* %130 with i32 %133;
    i32 %134 = add i32 %124, i32 1;
    i32 %135 = sub i32 %25, i32 %134;
    i1 %136 = scmp neq i32 %135, i32 0;
    cbr i1 %136(prob = 0.97), ^while.body12, ^b25;
^b25:
    cbr i1 %26(prob = 0.97), ^while.body13, ^b26;
^while.body13:
    i32 %137 = phi [^b25, i32 0] [^b28, i32 %145];
    i32* %138 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = scmp neq i32 %139, i32 0;
    cbr i1 %140(prob = 0.5), ^b26, ^b27;
^b26:
    i32 %141 = phi [^b25, i32 -123] [^while.body13, i32 1] [^b27, i32 2] [^b28, i32 -123];
    ret i32 %141;
^b27:
    i32* %142 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %137];
    i32 %143 = load i32* %142;
    i1 %144 = scmp neq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^b26, ^b28;
^b28:
    i32 %145 = add i32 %137, i32 1;
    i32 %146 = sub i32 %145, i32 %25;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.97), ^while.body13, ^b26;
}
