internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i1 %24 = icmp neq i32 %12, i32 0;
    i32 %25 = neg i32 %23;
    i32 %26 = select i1 %24 ? i32 %25 : i32 %23;
    i1 %27 = icmp neq i32 %26, i32 0;
    i32 %28 = add i32 %26, i32 -3;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %27(prob = 0.984615), ^while.body2, ^b1;
  ^while.body2:
    i32 %32 = phi [^b, i32 0] [^b3, i32 %76];
    i32 %33 = call () -> i32 @getch();
    i32 %34 = add i32 %33, i32 -48;
    i1 %35 = icmp ugt i32 %34, i32 9;
    i32* %36 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %32];
    cbr i1 %35(prob = 0.984615), ^while.body3, ^46;
  ^b1:
    i32* %37 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    i1 %38 = icmp sgt i32 %26, i32 0;
    cbr i1 %38(prob = 0.984615), ^while.body4, ^b2;
  ^while.body3:
    i32 %39 = phi [^while.body2, i32 %33] [^while.body3, i32 %41];
    i32 %40 = phi [^while.body2, i32 0] [^while.body3, i32 %45];
    i32 %41 = call () -> i32 @getch();
    i32 %42 = add i32 %41, i32 -48;
    i1 %43 = icmp ugt i32 %42, i32 9;
    i1 %44 = icmp eq i32 %39, i32 45;
    i32 %45 = select i1 %44 ? i32 1 : i32 %40;
    cbr i1 %43(prob = 0.984615), ^while.body3, ^46;
  ^46:
    i32 %47 = phi [^while.body2, i32 %33] [^while.body3, i32 %41];
    i32 %48 = phi [^while.body2, i32 0] [^while.body3, i32 %45];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.984615), ^while.body5, ^b3;
  ^while.body4:
    i32 %51 = phi [^b1, i32 0] [^b5, i32 %52];
    i32 %52 = add i32 %51, i32 1;
    i1 %53 = icmp sgt i32 %26, i32 %52;
    i32* %54 = getelementptr &(i32* %37)[i32 %51];
    cbr i1 %53(prob = 0.984615), ^while.body6, ^b2;
  ^b2:
    i32* %55 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    [400020 * i32]* %56 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %38(prob = 0.984615), ^super.header, ^b4;
  ^while.body5:
    i32 %57 = phi [^46, i32 %47] [^while.body5, i32 %59];
    i32 %58 = phi [^46, i32 0] [^while.body5, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i32 %60 = add i32 %59, i32 -48;
    i1 %61 = icmp ult i32 %60, i32 10;
    i32 %62 = mul i32 %58, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %57, i32 %63;
    cbr i1 %61(prob = 0.984615), ^while.body5, ^b3;
  ^while.body6:
    i32 %65 = phi [^while.body4, i32 %52] [^b5, i32 %109];
    i32* %66 = getelementptr &(i32* %37)[i32 %65];
    i32 %67 = load i32* %54;
    i32 %68 = load i32* %66;
    i1 %69 = icmp sgt i32 %67, i32 %68;
    cbr i1 %69(prob = 0.5), ^if.then, ^b5;
  ^b3:
    i32 %70 = phi [^46, i32 0] [^while.body5, i32 %64];
    i1 %71 = icmp neq i32 %48, i32 0;
    i32 %72 = neg i32 %70;
    i32 %73 = select i1 %71 ? i32 %72 : i32 %70;
    store i32* %36 with i32 %73;
    i32* %74 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %32];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %32];
    store i32* %75 with i32 %73;
    i32 %76 = add i32 %32, i32 1;
    i1 %77 = icmp neq i32 %26, i32 %76;
    cbr i1 %77(prob = 0.984615), ^while.body2, ^b1;
  ^super.header:
    i1 %78 = icmp sgt i32 %26, i32 3;
    cbr i1 %78(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b4:
    i32 %79 = phi [^b2, i32 -100] [^scalar.header, i32 %113] [^while.body9, i32 %128];
    i1 %80 = icmp sgt i32 %79, i32 -1;
    cbr i1 %80(prob = 0.984615), ^while.body8, ^b6;
  ^if.then:
    store i32* %54 with i32 %68;
    store i32* %66 with i32 %67;
    ubr ^b5;
  ^while.body7:
    i32 %81 = phi [^super.header, i32 -100] [^while.body7, i32 %103];
    i32 %82 = phi [^super.header, i32 0] [^while.body7, i32 %107];
    i32* %83 = getelementptr &(i32* %55)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %86, i32 1;
    store i32* %85 with i32 %87;
    i32* %88 = getelementptr &(i32* %83)[i64 1];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %91, i32 1;
    store i32* %90 with i32 %92;
    i32 %93 = smax i32 %81, i32 %84;
    i32 %94 = smax i32 %89, i32 %93;
    i32* %95 = getelementptr &(i32* %83)[i64 2];
    i32 %96 = load i32* %95;
    i32 %97 = smax i32 %94, i32 %96;
    i32* %98 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %96];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %99, i32 1;
    store i32* %98 with i32 %100;
    i32* %101 = getelementptr &(i32* %83)[i64 3];
    i32 %102 = load i32* %101;
    i32 %103 = smax i32 %97, i32 %102;
    i32* %104 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %102];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %105, i32 1;
    store i32* %104 with i32 %106;
    i32 %107 = add i32 %82, i32 4;
    i1 %108 = icmp sgt i32 %28, i32 %107;
    cbr i1 %108(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b5:
    i32 %109 = add i32 %65, i32 1;
    i1 %110 = icmp sgt i32 %26, i32 %109;
    cbr i1 %110(prob = 0.984615), ^while.body6, ^while.body4;
  ^scalar.header:
    i32 %111 = phi [^super.header, i32 -100] [^while.body7, i32 %103];
    i32 %112 = phi [^super.header, i32 0] [^while.body7, i32 %107];
    i32 %113 = phi [^super.header, i32 undef] [^while.body7, i32 %103];
    i1 %114 = icmp sgt i32 %26, i32 %112;
    cbr i1 %114(prob = 0.75), ^while.body9, ^b4;
  ^while.body8:
    i32 %115 = phi [^b4, i32 0] [^b7, i32 %138];
    i32 %116 = phi [^b4, i32 0] [^b7, i32 %137];
    i32* %117 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %115];
    i32 %118 = load i32* %117;
    i1 %119 = icmp neq i32 %118, i32 0;
    cbr i1 %119(prob = 0.984615), ^while.body10, ^b7;
  ^b6:
    i32* %120 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    cbr i1 %38(prob = 0.984615), ^while.body11, ^b8;
  ^while.body9 {scalar}:
    i32 %121 = phi [^scalar.header, i32 %112] [^while.body9, i32 %129];
    i32 %122 = phi [^scalar.header, i32 %111] [^while.body9, i32 %128];
    i32* %123 = getelementptr &(i32* %55)[i32 %121];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %124];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %126, i32 1;
    store i32* %125 with i32 %127;
    i32 %128 = smax i32 %122, i32 %124;
    i32 %129 = add i32 %121, i32 1;
    i1 %130 = icmp sgt i32 %26, i32 %129;
    cbr i1 %130(prob = 0.75), ^while.body9, ^b4;
  ^while.body10:
    i32 %131 = phi [^while.body8, i32 %118] [^while.body10, i32 %134];
    i32 %132 = phi [^while.body8, i32 %116] [^while.body10, i32 %136];
    i32* %133 = getelementptr &(i32* %55)[i32 %132];
    store i32* %133 with i32 %115;
    i32 %134 = add i32 %131, i32 -1;
    i1 %135 = icmp neq i32 %134, i32 0;
    i32 %136 = add i32 %132, i32 1;
    cbr i1 %135(prob = 0.984615), ^while.body10, ^b7;
  ^b7:
    i32 %137 = phi [^while.body8, i32 %116] [^while.body10, i32 %136];
    i32 %138 = add i32 %115, i32 1;
    i1 %139 = icmp sge i32 %79, i32 %138;
    cbr i1 %139(prob = 0.984615), ^while.body8, ^b6;
  ^while.body11:
    i32 %140 = phi [^b6, i32 0] [^b9, i32 %141];
    i32 %141 = add i32 %140, i32 1;
    i1 %142 = icmp sgt i32 %26, i32 %141;
    cbr i1 %142(prob = 0.984615), ^super.header1, ^b9;
  ^b8:
    cbr i1 %27(prob = 0.984615), ^while.body12, ^while.header;
  ^super.header1:
    i32 %143 = add i32 %140, i32 4;
    i1 %144 = icmp sgt i32 %26, i32 %143;
    cbr i1 %144(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^b9:
    i32 %145 = phi [^while.body11, i32 %140] [^scalar.header1, i32 %199] [^while.body15, i32 %212];
    i32* %146 = getelementptr &(i32* %120)[i32 %140];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %120)[i32 %145];
    i32 %149 = load i32* %148;
    store i32* %146 with i32 %149;
    store i32* %148 with i32 %147;
    cbr i1 %142(prob = 0.984615), ^while.body11, ^b8;
  ^while.body12:
    i32 %150 = phi [^b8, i32 0] [^while.body12, i32 %160];
    i32* %151 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %150];
    i32 %154 = load i32* %153;
    i32 %155 = sub i32 %152, i32 %154;
    store i32* %151 with i32 %155;
    i32* %156 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %150];
    i32 %157 = load i32* %156;
    i32 %158 = sub i32 %157, i32 %155;
    i32 %159 = sub i32 %158, i32 %154;
    store i32* %156 with i32 %159;
    i32 %160 = add i32 %150, i32 1;
    i32 %161 = sub i32 %26, i32 %160;
    i1 %162 = icmp neq i32 %161, i32 0;
    cbr i1 %162(prob = 0.984615), ^while.body12, ^while.header;
  ^while.header:
    i32 %163 = phi [^b8, i32 0] [^while.body12, i32 0] [^b12, i32 %218];
    i32 %164 = sub i32 %163, i32 %26;
    i1 %165 = icmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.984615), ^while.body14, ^b10;
  ^while.body13:
    i32 %166 = phi [^super.header1, i32 %140] [^while.body13, i32 %194];
    i32 %167 = phi [^super.header1, i32 %141] [^while.body13, i32 %195];
    i32* %168 = getelementptr &(i32* %120)[i32 %167];
    i32 %169 = load i32* %168;
    i32* %170 = getelementptr &(i32* %120)[i32 %166];
    i32 %171 = load i32* %170;
    i1 %172 = icmp slt i32 %169, i32 %171;
    i32 %173 = select i1 %172 ? i32 %167 : i32 %166;
    i32* %174 = getelementptr &(i32* %120)[i32 %173];
    i32* %175 = getelementptr &(i32* %168)[i64 1];
    i32 %176 = load i32* %175;
    i32 %177 = load i32* %174;
    i1 %178 = icmp slt i32 %176, i32 %177;
    i32 %179 = add i32 %167, i32 1;
    i32 %180 = select i1 %178 ? i32 %179 : i32 %173;
    i32* %181 = getelementptr &(i32* %120)[i32 %180];
    i32* %182 = getelementptr &(i32* %168)[i64 2];
    i32 %183 = load i32* %182;
    i32 %184 = load i32* %181;
    i1 %185 = icmp slt i32 %183, i32 %184;
    i32 %186 = add i32 %167, i32 2;
    i32 %187 = select i1 %185 ? i32 %186 : i32 %180;
    i32* %188 = getelementptr &(i32* %120)[i32 %187];
    i32* %189 = getelementptr &(i32* %168)[i64 3];
    i32 %190 = load i32* %189;
    i32 %191 = load i32* %188;
    i1 %192 = icmp slt i32 %190, i32 %191;
    i32 %193 = add i32 %167, i32 3;
    i32 %194 = select i1 %192 ? i32 %193 : i32 %187;
    i32 %195 = add i32 %167, i32 4;
    i1 %196 = icmp sgt i32 %28, i32 %195;
    cbr i1 %196(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^scalar.header1:
    i32 %197 = phi [^super.header1, i32 %140] [^while.body13, i32 %194];
    i32 %198 = phi [^super.header1, i32 %141] [^while.body13, i32 %195];
    i32 %199 = phi [^super.header1, i32 undef] [^while.body13, i32 %194];
    i1 %200 = icmp sgt i32 %26, i32 %198;
    cbr i1 %200(prob = 0.75), ^while.body15, ^b9;
  ^while.body14:
    i32* %201 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %163];
    i32 %202 = load i32* %201;
    i1 %203 = icmp neq i32 %202, i32 0;
    cbr i1 %203(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %204 = phi [^while.header, i32 -123] [^while.body14, i32 1] [^b11, i32 2];
    ret i32 %204;
  ^while.body15 {scalar}:
    i32 %205 = phi [^scalar.header1, i32 %198] [^while.body15, i32 %213];
    i32 %206 = phi [^scalar.header1, i32 %197] [^while.body15, i32 %212];
    i32* %207 = getelementptr &(i32* %120)[i32 %205];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &(i32* %120)[i32 %206];
    i32 %210 = load i32* %209;
    i1 %211 = icmp slt i32 %208, i32 %210;
    i32 %212 = select i1 %211 ? i32 %205 : i32 %206;
    i32 %213 = add i32 %205, i32 1;
    i1 %214 = icmp sgt i32 %26, i32 %213;
    cbr i1 %214(prob = 0.75), ^while.body15, ^b9;
  ^b11:
    i32* %215 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %163];
    i32 %216 = load i32* %215;
    i1 %217 = icmp neq i32 %216, i32 0;
    cbr i1 %217(prob = 0.5), ^b10, ^b12;
  ^b12:
    i32 %218 = add i32 %163, i32 1;
    ubr ^while.header;
}
