internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %id = alloc i32;
    i32* %t = alloc i32;
    i32* %i1 = alloc i32;
    i32* %mx = alloc i32;
    i32* %now = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %t1 = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %14] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %2] [^entry, i32 0];
    i32 %3 = phi [^b2, i32 %15] [^entry, i32 %0];
    i32 %4 = phi [^entry, i32 %0] [^b2, i32 %15];
    i1 %5 = scmp lt i32 %4, i32 48;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp gt i32 %3, i32 57;
    ubr ^b1;
^b1:
    i1 %7 = phi [^b, i1 %6] [^while.header, i1 true];
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %8 = scmp eq i32 %3, i32 45;
    cbr i1 %8(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %9 = phi [^b1, i32 %1] [^while.body1, i32 %9];
    i32 %10 = phi [^b1, i32 %2] [^while.body1, i32 %20];
    i32 %11 = phi [^b1, i32 %3] [^while.body1, i32 %21];
    i32 %12 = phi [^b1, i32 %3] [^while.body1, i32 %21];
    i1 %13 = scmp gt i32 %12, i32 47;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %14 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %15 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %16 = scmp le i32 %11, i32 57;
    ubr ^b4;
^b4:
    i1 %17 = phi [^while.header1, i1 false] [^b3, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %18 = mul i32 %10, i32 10;
    i32 %19 = add i32 %18, i32 -48;
    i32 %20 = add i32 %19, i32 %11;
    i32 %21 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %22 = scmp neq i32 %9, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %23 = neg i32 %10;
    ubr ^entry1;
^entry1:
    i32 %24 = phi [^b5, i32 %10] [^if.then1, i32 %23];
    store i32* %n with i32 %24;
    ubr ^while.header2;
^while.header2:
    i32 %25 = phi [^while.body9, i32 %117] [^entry1, i32 0];
    i32 %26 = phi [^while.body9, i32 %55] [^entry1, i32 %24];
    i32 %27 = phi [^while.body9, i32 %55] [^entry1, i32 %24];
    i32 %28 = phi [^while.body9, i32 %117] [^entry1, i32 0];
    i1 %29 = scmp neq i32 %28, i32 %27;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    i32* %30 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %25];
    i32 %31 = call () -> i32 @getch();
    ubr ^while.header3;
^b6:
    i32* %32 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %33 = phi [^b10, i32 %33] [^while.body2, i32 %26];
    i32 %34 = phi [^b10, i32 %67] [^while.body2, i32 0];
    i32 %35 = phi [^b10, i32 %35] [^while.body2, i32 0];
    i32 %36 = phi [^b10, i32 %68] [^while.body2, i32 %31];
    i32 %37 = phi [^while.body2, i32 %31] [^b10, i32 %68];
    i1 %38 = scmp lt i32 %37, i32 48;
    cbr i1 %38(prob = 0.5), ^b8, ^b7;
^while.header4:
    i32 %39 = phi [^b12, i32 %49] [^b6, i32 %26];
    i32 %40 = phi [^b12, i32 %70] [^b6, i32 0];
    i32* %41 = phi [^b12, i32* %52] [^b6, i32* %32];
    i32 %42 = phi [^b6, i32 0] [^b12, i32 %70];
    i1 %43 = scmp lt i32 %42, i32 %39;
    cbr i1 %43(prob = 0.97), ^while.body3, ^b9;
^b7:
    i1 %44 = scmp gt i32 %36, i32 57;
    ubr ^b8;
^while.body3:
    i32 %45 = add i32 %40, i32 1;
    store i32* %j1 with i32 %45;
    ubr ^while.header5;
^b8:
    i1 %46 = phi [^b7, i1 %44] [^while.header3, i1 true];
    cbr i1 %46(prob = 0.97), ^while.body4, ^while.header6;
^b9:
    i32* %47 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    store i32* %i1 with i32 0;
    store i32* %mx with i32 -100;
    ubr ^while.header7;
^while.body4:
    i1 %48 = scmp eq i32 %36, i32 45;
    cbr i1 %48(prob = 0.5), ^if.then2, ^b10;
^while.header5:
    i32 %49 = phi [^b15, i32 %92] [^while.body3, i32 %39];
    i32 %50 = phi [^b15, i32 %95] [^while.body3, i32 %45];
    i32 %51 = phi [^b15, i32 %94] [^while.body3, i32 %40];
    i32* %52 = phi [^b15, i32* %52] [^while.body3, i32* %41];
    i32 %53 = phi [^while.body3, i32 %45] [^b15, i32 %95];
    i1 %54 = scmp lt i32 %53, i32 %49;
    cbr i1 %54(prob = 0.97), ^while.body5, ^b12;
^while.header6:
    i32 %55 = phi [^b8, i32 %33] [^while.body7, i32 %55];
    i32 %56 = phi [^b8, i32 %34] [^while.body7, i32 %56];
    i32 %57 = phi [^b8, i32 %35] [^while.body7, i32 %98];
    i32 %58 = phi [^b8, i32 %36] [^while.body7, i32 %99];
    i32 %59 = phi [^b8, i32 %36] [^while.body7, i32 %99];
    i1 %60 = scmp gt i32 %59, i32 47;
    cbr i1 %60(prob = 0.5), ^b11, ^b14;
^while.header7:
    i32 %61 = phi [^b16, i32 %61] [^b9, i32 %39];
    i32 %62 = phi [^b16, i32 %100] [^b9, i32 -100];
    i32 %63 = phi [^b16, i32 %101] [^b9, i32 0];
    i32* %64 = phi [^b16, i32* %64] [^b9, i32* %47];
    i32 %65 = phi [^b9, i32 0] [^b16, i32 %101];
    i1 %66 = scmp lt i32 %65, i32 %61;
    cbr i1 %66(prob = 0.97), ^while.body6, ^b13;
^if.then2:
    ubr ^b10;
^b10:
    i32 %67 = phi [^if.then2, i32 1] [^while.body4, i32 %34];
    i32 %68 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %69 = scmp le i32 %58, i32 57;
    ubr ^b14;
^b12:
    i32 %70 = add i32 %51, i32 1;
    store i32* %i2 with i32 %70;
    ubr ^while.header4;
^while.body5:
    i32* %71 = getelementptr &(i32* %52)[i32 %51];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %52)[i32 %50];
    i32 %74 = load i32* %73;
    i1 %75 = scmp gt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.5), ^if.then3, ^b15;
^b13:
    store i32* %i1 with i32 0;
    store i32* %now with i32 0;
    ubr ^while.header8;
^while.body6:
    i32* %76 = getelementptr &(i32* %64)[i32 %63];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %77];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %79, i32 1;
    store i32* %78 with i32 %80;
    i32 %81 = load i32* %76;
    i1 %82 = scmp gt i32 %81, i32 %62;
    cbr i1 %82(prob = 0.5), ^if.then4, ^b16;
^b14:
    i1 %83 = phi [^while.header6, i1 false] [^b11, i1 %69];
    cbr i1 %83(prob = 0.97), ^while.body7, ^b17;
^if.then3:
    i32 %84 = load i32* %71;
    store i32* %t1 with i32 %84;
    i32 %85 = load i32* %73;
    store i32* %71 with i32 %85;
    i32 %86 = load i32* %t1;
    i32 %87 = load i32* %j1;
    i32* %88 = getelementptr &(i32* %52)[i32 %87];
    store i32* %88 with i32 %86;
    i32 %89 = load i32* %n;
    i32 %90 = load i32* %j1;
    i32 %91 = load i32* %i2;
    ubr ^b15;
^b15:
    i32 %92 = phi [^if.then3, i32 %89] [^while.body5, i32 %49];
    i32 %93 = phi [^if.then3, i32 %90] [^while.body5, i32 %50];
    i32 %94 = phi [^if.then3, i32 %91] [^while.body5, i32 %51];
    i32 %95 = add i32 %93, i32 1;
    store i32* %j1 with i32 %95;
    ubr ^while.header5;
^if.then4:
    store i32* %mx with i32 %81;
    ubr ^b16;
^while.body7:
    i32 %96 = mul i32 %57, i32 10;
    i32 %97 = add i32 %96, i32 -48;
    i32 %98 = add i32 %97, i32 %58;
    i32 %99 = call () -> i32 @getch();
    ubr ^while.header6;
^b16:
    i32 %100 = phi [^if.then4, i32 %81] [^while.body6, i32 %62];
    i32 %101 = add i32 %63, i32 1;
    store i32* %i1 with i32 %101;
    ubr ^while.header7;
^while.header8:
    i32 %102 = phi [^b19, i32 %118] [^b13, i32 %61];
    i32 %103 = phi [^b19, i32 %119] [^b13, i32 0];
    i32 %104 = phi [^b19, i32 %120] [^b13, i32 %62];
    i32 %105 = phi [^b19, i32 %138] [^b13, i32 0];
    i32* %106 = phi [^b19, i32* %122] [^b13, i32* %64];
    i32 %107 = phi [^b13, i32 0] [^b19, i32 %138];
    i1 %108 = scmp le i32 %107, i32 %104;
    cbr i1 %108(prob = 0.97), ^while.body8, ^b18;
^b17:
    i1 %109 = scmp neq i32 %56, i32 0;
    cbr i1 %109(prob = 0.5), ^if.then5, ^while.body9;
^while.body8:
    i32* %110 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %105];
    i32 %111 = load i32* %110;
    store i32* %j with i32 %111;
    ubr ^while.header9;
^if.then5:
    i32 %112 = neg i32 %57;
    ubr ^while.body9;
^b18:
    i32* %113 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    store i32* %i with i32 0;
    ubr ^while.header10;
^while.body9:
    i32 %114 = phi [^b17, i32 %57] [^if.then5, i32 %112];
    store i32* %30 with i32 %114;
    i32* %115 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %25];
    store i32* %115 with i32 %114;
    i32* %116 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %25];
    store i32* %116 with i32 %114;
    i32 %117 = add i32 %25, i32 1;
    ubr ^while.header2;
^while.header9:
    i32 %118 = phi [^while.body10, i32 %131] [^while.body8, i32 %102];
    i32 %119 = phi [^while.body10, i32 %136] [^while.body8, i32 %103];
    i32 %120 = phi [^while.body10, i32 %134] [^while.body8, i32 %104];
    i32 %121 = phi [^while.body10, i32 %135] [^while.body8, i32 %105];
    i32* %122 = phi [^while.body10, i32* %122] [^while.body8, i32* %106];
    i32 %123 = phi [^while.body8, i32 %111] [^while.body10, i32 %137];
    i1 %124 = scmp neq i32 %123, i32 0;
    cbr i1 %124(prob = 0.97), ^while.body10, ^b19;
^while.header10:
    i32 %125 = phi [^b20, i32 %174] [^b18, i32 %102];
    i32 %126 = phi [^b20, i32 %176] [^b18, i32 0];
    i32* %127 = phi [^b20, i32* %159] [^b18, i32* %113];
    i32 %128 = phi [^b18, i32 0] [^b20, i32 %176];
    i1 %129 = scmp lt i32 %128, i32 %125;
    cbr i1 %129(prob = 0.97), ^while.body11, ^while.header11;
^while.body10:
    i32* %130 = getelementptr &(i32* %122)[i32 %119];
    store i32* %130 with i32 %121;
    i32 %131 = load i32* %n;
    i32 %132 = load i32* %j;
    i32 %133 = load i32* %now;
    i32 %134 = load i32* %mx;
    i32 %135 = load i32* %i1;
    i32 %136 = add i32 %133, i32 1;
    store i32* %now with i32 %136;
    i32 %137 = add i32 %132, i32 -1;
    store i32* %j with i32 %137;
    ubr ^while.header9;
^b19:
    i32 %138 = add i32 %121, i32 1;
    store i32* %i1 with i32 %138;
    ubr ^while.header8;
^while.body11:
    store i32* %id with i32 %126;
    i32 %139 = add i32 %126, i32 1;
    ubr ^while.header12;
^while.header11:
    i32 %140 = phi [^while.header10, i32 0] [^while.body12, i32 %154];
    i32 %141 = phi [^while.header10, i32 %125] [^while.body12, i32 %141];
    i32 %142 = phi [^while.header10, i32 0] [^while.body12, i32 %154];
    i32 %143 = sub i32 %141, i32 %142;
    i1 %144 = scmp neq i32 %143, i32 0;
    cbr i1 %144(prob = 0.97), ^while.body12, ^while.header13;
^while.body12:
    i32* %145 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %140];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %140];
    i32 %148 = load i32* %147;
    i32 %149 = sub i32 %146, i32 %148;
    store i32* %145 with i32 %149;
    i32* %150 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %140];
    i32 %151 = load i32* %150;
    i32 %152 = sub i32 %151, i32 %149;
    i32 %153 = sub i32 %152, i32 %148;
    store i32* %150 with i32 %153;
    i32 %154 = add i32 %140, i32 1;
    ubr ^while.header11;
^while.header12:
    i32 %155 = phi [^b22, i32 %155] [^while.body11, i32 %125];
    i32 %156 = phi [^b22, i32 %186] [^while.body11, i32 %139];
    i32 %157 = phi [^b22, i32 %185] [^while.body11, i32 %126];
    i32 %158 = phi [^b22, i32 %158] [^while.body11, i32 %126];
    i32* %159 = phi [^b22, i32* %159] [^while.body11, i32* %127];
    i32 %160 = phi [^while.body11, i32 %139] [^b22, i32 %186];
    i1 %161 = scmp lt i32 %160, i32 %155;
    cbr i1 %161(prob = 0.97), ^while.body13, ^b20;
^while.header13:
    i32 %162 = phi [^b24, i32 %190] [^while.header11, i32 0];
    i32 %163 = phi [^b24, i32 %163] [^while.header11, i32 %141];
    i32 %164 = phi [^b24, i32 %190] [^while.header11, i32 0];
    i32 %165 = sub i32 %164, i32 %163;
    i1 %166 = scmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.97), ^while.body14, ^b21;
^b20:
    i32* %167 = getelementptr &(i32* %159)[i32 %158];
    i32 %168 = load i32* %167;
    store i32* %t with i32 %168;
    i32* %169 = getelementptr &(i32* %159)[i32 %157];
    i32 %170 = load i32* %169;
    store i32* %167 with i32 %170;
    i32 %171 = load i32* %t;
    i32 %172 = load i32* %id;
    i32* %173 = getelementptr &(i32* %159)[i32 %172];
    store i32* %173 with i32 %171;
    i32 %174 = load i32* %n;
    i32 %175 = load i32* %i;
    i32 %176 = add i32 %175, i32 1;
    store i32* %i with i32 %176;
    ubr ^while.header10;
^while.body13:
    i32* %177 = getelementptr &(i32* %159)[i32 %156];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %159)[i32 %157];
    i32 %180 = load i32* %179;
    i1 %181 = scmp lt i32 %178, i32 %180;
    cbr i1 %181(prob = 0.5), ^if.then6, ^b22;
^while.body14:
    i32* %182 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %162];
    i32 %183 = load i32* %182;
    i1 %184 = scmp neq i32 %183, i32 0;
    cbr i1 %184(prob = 0.5), ^if.then7, ^b23;
^b21:
    ret i32 -123;
^if.then6:
    store i32* %id with i32 %156;
    ubr ^b22;
^b22:
    i32 %185 = phi [^while.body13, i32 %157] [^if.then6, i32 %156];
    i32 %186 = add i32 %156, i32 1;
    ubr ^while.header12;
^b23:
    i32* %187 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %162];
    i32 %188 = load i32* %187;
    i1 %189 = scmp neq i32 %188, i32 0;
    cbr i1 %189(prob = 0.5), ^if.then8, ^b24;
^if.then7:
    ret i32 1;
^b24:
    i32 %190 = add i32 %162, i32 1;
    ubr ^while.header13;
^if.then8:
    ret i32 2;
}
