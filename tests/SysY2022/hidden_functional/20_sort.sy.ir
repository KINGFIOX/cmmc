internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %id = alloc i32;
    i32* %i1 = alloc i32;
    i32* %mx = alloc i32;
    i32* %now = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %t = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b2, i32 %10] [^entry, i32 0];
    i32 %2 = phi [^b2, i32 %11] [^entry, i32 %0];
    i1 %3 = scmp lt i32 %2, i32 48;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i1 %4 = scmp gt i32 %2, i32 57;
    ubr ^b1;
^b1:
    i1 %5 = phi [^b, i1 %4] [^while.header, i1 true];
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %6 = scmp eq i32 %2, i32 45;
    cbr i1 %6(prob = 0.5), ^if.then, ^b2;
^while.header1:
    i32 %7 = phi [^b1, i32 0] [^while.body1, i32 %16];
    i32 %8 = phi [^b1, i32 %2] [^while.body1, i32 %17];
    i1 %9 = scmp gt i32 %8, i32 47;
    cbr i1 %9(prob = 0.5), ^b3, ^b4;
^if.then:
    ubr ^b2;
^b2:
    i32 %10 = phi [^if.then, i32 1] [^while.body, i32 %1];
    i32 %11 = call () -> i32 @getch();
    ubr ^while.header;
^b3:
    i1 %12 = scmp le i32 %8, i32 57;
    ubr ^b4;
^b4:
    i1 %13 = phi [^b3, i1 %12] [^while.header1, i1 false];
    cbr i1 %13(prob = 0.97), ^while.body1, ^b5;
^while.body1:
    i32 %14 = mul i32 %7, i32 10;
    i32 %15 = add i32 %14, i32 -48;
    i32 %16 = add i32 %15, i32 %8;
    i32 %17 = call () -> i32 @getch();
    ubr ^while.header1;
^b5:
    i1 %18 = scmp neq i32 %1, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then1, ^entry1;
^if.then1:
    i32 %19 = neg i32 %7;
    ubr ^entry1;
^entry1:
    i32 %20 = phi [^b5, i32 %7] [^if.then1, i32 %19];
    store i32* %n with i32 %20;
    ubr ^while.header2;
^while.header2:
    i32 %21 = phi [^while.body9, i32 %92] [^entry1, i32 0];
    i1 %22 = scmp neq i32 %21, i32 %20;
    cbr i1 %22(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    i32* %23 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %21];
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header3;
^b6:
    i32* %25 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %26 = phi [^b10, i32 %47] [^while.body2, i32 0];
    i32 %27 = phi [^b10, i32 %48] [^while.body2, i32 %24];
    i1 %28 = scmp lt i32 %27, i32 48;
    cbr i1 %28(prob = 0.5), ^b8, ^b7;
^while.header4:
    i32 %29 = phi [^b12, i32 %37] [^b6, i32 %20];
    i32 %30 = phi [^b12, i32 %50] [^b6, i32 0];
    i1 %31 = scmp lt i32 %30, i32 %29;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b9;
^b7:
    i1 %32 = scmp gt i32 %27, i32 57;
    ubr ^b8;
^while.body3:
    i32 %33 = add i32 %30, i32 1;
    store i32* %j1 with i32 %33;
    ubr ^while.header5;
^b8:
    i1 %34 = phi [^b7, i1 %32] [^while.header3, i1 true];
    cbr i1 %34(prob = 0.97), ^while.body4, ^while.header6;
^b9:
    i32* %35 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    store i32* %mx with i32 -100;
    ubr ^while.header7;
^while.body4:
    i1 %36 = scmp eq i32 %27, i32 45;
    cbr i1 %36(prob = 0.5), ^if.then2, ^b10;
^while.header5:
    i32 %37 = phi [^b15, i32 %69] [^while.body3, i32 %29];
    i32 %38 = phi [^b15, i32 %72] [^while.body3, i32 %33];
    i32 %39 = phi [^b15, i32 %71] [^while.body3, i32 %30];
    i1 %40 = scmp lt i32 %38, i32 %37;
    cbr i1 %40(prob = 0.97), ^while.body5, ^b12;
^while.header6:
    i32 %41 = phi [^b8, i32 0] [^while.body7, i32 %75];
    i32 %42 = phi [^b8, i32 %27] [^while.body7, i32 %76];
    i1 %43 = scmp gt i32 %42, i32 47;
    cbr i1 %43(prob = 0.5), ^b11, ^b14;
^while.header7:
    i32 %44 = phi [^b16, i32 %77] [^b9, i32 -100];
    i32 %45 = phi [^b16, i32 %78] [^b9, i32 0];
    i1 %46 = scmp lt i32 %45, i32 %29;
    cbr i1 %46(prob = 0.97), ^while.body6, ^b13;
^if.then2:
    ubr ^b10;
^b10:
    i32 %47 = phi [^if.then2, i32 1] [^while.body4, i32 %26];
    i32 %48 = call () -> i32 @getch();
    ubr ^while.header3;
^b11:
    i1 %49 = scmp le i32 %42, i32 57;
    ubr ^b14;
^b12:
    i32 %50 = add i32 %39, i32 1;
    store i32* %i2 with i32 %50;
    ubr ^while.header4;
^while.body5:
    i32* %51 = getelementptr &(i32* %25)[i32 %39];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %25)[i32 %38];
    i32 %54 = load i32* %53;
    i1 %55 = scmp gt i32 %52, i32 %54;
    cbr i1 %55(prob = 0.5), ^if.then3, ^b15;
^b13:
    store i32* %i1 with i32 0;
    store i32* %now with i32 0;
    ubr ^while.header8;
^while.body6:
    i32* %56 = getelementptr &(i32* %35)[i32 %45];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %57];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %59, i32 1;
    store i32* %58 with i32 %60;
    i1 %61 = scmp gt i32 %57, i32 %44;
    cbr i1 %61(prob = 0.5), ^if.then4, ^b16;
^b14:
    i1 %62 = phi [^while.header6, i1 false] [^b11, i1 %49];
    cbr i1 %62(prob = 0.97), ^while.body7, ^b17;
^if.then3:
    i32 %63 = load i32* %51;
    store i32* %t with i32 %63;
    store i32* %51 with i32 %54;
    i32 %64 = load i32* %t;
    i32 %65 = load i32* %j1;
    i32* %66 = getelementptr &(i32* %25)[i32 %65];
    store i32* %66 with i32 %64;
    i32 %67 = load i32* %n;
    i32 %68 = load i32* %i2;
    ubr ^b15;
^b15:
    i32 %69 = phi [^if.then3, i32 %67] [^while.body5, i32 %37];
    i32 %70 = phi [^if.then3, i32 %65] [^while.body5, i32 %38];
    i32 %71 = phi [^if.then3, i32 %68] [^while.body5, i32 %39];
    i32 %72 = add i32 %70, i32 1;
    store i32* %j1 with i32 %72;
    ubr ^while.header5;
^if.then4:
    store i32* %mx with i32 %57;
    ubr ^b16;
^while.body7:
    i32 %73 = mul i32 %41, i32 10;
    i32 %74 = add i32 %73, i32 -48;
    i32 %75 = add i32 %74, i32 %42;
    i32 %76 = call () -> i32 @getch();
    ubr ^while.header6;
^b16:
    i32 %77 = phi [^if.then4, i32 %57] [^while.body6, i32 %44];
    i32 %78 = add i32 %45, i32 1;
    ubr ^while.header7;
^while.header8:
    i32 %79 = phi [^b19, i32 %93] [^b13, i32 %29];
    i32 %80 = phi [^b19, i32 %94] [^b13, i32 0];
    i32 %81 = phi [^b19, i32 %95] [^b13, i32 %44];
    i32 %82 = phi [^b19, i32 %110] [^b13, i32 0];
    i1 %83 = scmp le i32 %82, i32 %81;
    cbr i1 %83(prob = 0.97), ^while.body8, ^b18;
^b17:
    i1 %84 = scmp neq i32 %26, i32 0;
    cbr i1 %84(prob = 0.5), ^if.then5, ^while.body9;
^while.body8:
    i32* %85 = getelementptr &([400020 * i32]* @cnt)[i64 0][i32 %82];
    i32 %86 = load i32* %85;
    store i32* %j with i32 %86;
    ubr ^while.header9;
^if.then5:
    i32 %87 = neg i32 %41;
    ubr ^while.body9;
^b18:
    i32* %88 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    store i32* %i with i32 0;
    ubr ^while.header10;
^while.body9:
    i32 %89 = phi [^b17, i32 %41] [^if.then5, i32 %87];
    store i32* %23 with i32 %89;
    i32* %90 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %21];
    store i32* %90 with i32 %89;
    i32* %91 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %21];
    store i32* %91 with i32 %89;
    i32 %92 = add i32 %21, i32 1;
    ubr ^while.header2;
^while.header9:
    i32 %93 = phi [^while.body10, i32 %103] [^while.body8, i32 %79];
    i32 %94 = phi [^while.body10, i32 %108] [^while.body8, i32 %80];
    i32 %95 = phi [^while.body10, i32 %106] [^while.body8, i32 %81];
    i32 %96 = phi [^while.body10, i32 %107] [^while.body8, i32 %82];
    i32 %97 = phi [^while.body8, i32 %86] [^while.body10, i32 %109];
    i1 %98 = scmp neq i32 %97, i32 0;
    cbr i1 %98(prob = 0.97), ^while.body10, ^b19;
^while.header10:
    i32 %99 = phi [^b20, i32 %137] [^b18, i32 %79];
    i32 %100 = phi [^b20, i32 %139] [^b18, i32 0];
    i1 %101 = scmp lt i32 %100, i32 %99;
    cbr i1 %101(prob = 0.97), ^while.body11, ^while.header11;
^while.body10:
    i32* %102 = getelementptr &(i32* %35)[i32 %94];
    store i32* %102 with i32 %96;
    i32 %103 = load i32* %n;
    i32 %104 = load i32* %j;
    i32 %105 = load i32* %now;
    i32 %106 = load i32* %mx;
    i32 %107 = load i32* %i1;
    i32 %108 = add i32 %105, i32 1;
    store i32* %now with i32 %108;
    i32 %109 = add i32 %104, i32 -1;
    store i32* %j with i32 %109;
    ubr ^while.header9;
^b19:
    i32 %110 = add i32 %96, i32 1;
    store i32* %i1 with i32 %110;
    ubr ^while.header8;
^while.body11:
    store i32* %id with i32 %100;
    i32 %111 = add i32 %100, i32 1;
    ubr ^while.header12;
^while.header11:
    i32 %112 = phi [^while.header10, i32 0] [^while.body12, i32 %124];
    i32 %113 = sub i32 %99, i32 %112;
    i1 %114 = scmp neq i32 %113, i32 0;
    cbr i1 %114(prob = 0.97), ^while.body12, ^while.header13;
^while.body12:
    i32* %115 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %112];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([100005 * i32]* @a)[i64 0][i32 %112];
    i32 %118 = load i32* %117;
    i32 %119 = sub i32 %116, i32 %118;
    store i32* %115 with i32 %119;
    i32* %120 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %112];
    i32 %121 = load i32* %120;
    i32 %122 = sub i32 %121, i32 %119;
    i32 %123 = sub i32 %122, i32 %118;
    store i32* %120 with i32 %123;
    i32 %124 = add i32 %112, i32 1;
    ubr ^while.header11;
^while.header12:
    i32 %125 = phi [^b22, i32 %149] [^while.body11, i32 %111];
    i32 %126 = phi [^b22, i32 %148] [^while.body11, i32 %100];
    i1 %127 = scmp lt i32 %125, i32 %99;
    cbr i1 %127(prob = 0.97), ^while.body13, ^b20;
^while.header13:
    i32 %128 = phi [^b24, i32 %153] [^while.header11, i32 0];
    i32 %129 = sub i32 %128, i32 %99;
    i1 %130 = scmp neq i32 %129, i32 0;
    cbr i1 %130(prob = 0.97), ^while.body14, ^b21;
^b20:
    i32* %131 = getelementptr &(i32* %88)[i32 %100];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %88)[i32 %126];
    i32 %134 = load i32* %133;
    store i32* %131 with i32 %134;
    i32 %135 = load i32* %id;
    i32* %136 = getelementptr &(i32* %88)[i32 %135];
    store i32* %136 with i32 %132;
    i32 %137 = load i32* %n;
    i32 %138 = load i32* %i;
    i32 %139 = add i32 %138, i32 1;
    store i32* %i with i32 %139;
    ubr ^while.header10;
^while.body13:
    i32* %140 = getelementptr &(i32* %88)[i32 %125];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %88)[i32 %126];
    i32 %143 = load i32* %142;
    i1 %144 = scmp lt i32 %141, i32 %143;
    cbr i1 %144(prob = 0.5), ^if.then6, ^b22;
^while.body14:
    i32* %145 = getelementptr &([100005 * i32]* @b)[i64 0][i32 %128];
    i32 %146 = load i32* %145;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.5), ^if.then7, ^b23;
^b21:
    ret i32 -123;
^if.then6:
    store i32* %id with i32 %125;
    ubr ^b22;
^b22:
    i32 %148 = phi [^while.body13, i32 %126] [^if.then6, i32 %125];
    i32 %149 = add i32 %125, i32 1;
    ubr ^while.header12;
^b23:
    i32* %150 = getelementptr &([100005 * i32]* @c)[i64 0][i32 %128];
    i32 %151 = load i32* %150;
    i1 %152 = scmp neq i32 %151, i32 0;
    cbr i1 %152(prob = 0.5), ^if.then8, ^b24;
^if.then7:
    ret i32 1;
^b24:
    i32 %153 = add i32 %128, i32 1;
    ubr ^while.header13;
^if.then8:
    ret i32 2;
}
