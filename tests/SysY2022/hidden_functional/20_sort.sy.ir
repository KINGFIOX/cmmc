internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal [400020 * i32]* @cnt, align 8 { Flexible };
internal [100005 * i32]* @a, align 8 { Flexible };
internal [100005 * i32]* @b, align 8 { Flexible };
internal [100005 * i32]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.984615), ^while.body, ^10;
  ^while.body:
    i32 %3 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ugt i32 %6, i32 9;
    i1 %8 = icmp eq i32 %3, i32 45;
    i32 %9 = select i1 %8 ? i32 1 : i32 %4;
    cbr i1 %7(prob = 0.984615), ^while.body, ^10;
  ^10:
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %5];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %9];
    i32 %13 = add i32 %11, i32 -48;
    i1 %14 = icmp ult i32 %13, i32 10;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %15 = phi [^10, i32 %11] [^while.body1, i32 %17];
    i32 %16 = phi [^10, i32 0] [^while.body1, i32 %22];
    i32 %17 = call () -> i32 @getch();
    i32 %18 = add i32 %17, i32 -48;
    i1 %19 = icmp ult i32 %18, i32 10;
    i32 %20 = mul i32 %16, i32 10;
    i32 %21 = add i32 %20, i32 -48;
    i32 %22 = add i32 %15, i32 %21;
    cbr i1 %19(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %23 = phi [^10, i32 0] [^while.body1, i32 %22];
    i1 %24 = icmp neq i32 %12, i32 0;
    i32 %25 = neg i32 %23;
    i32 %26 = select i1 %24 ? i32 %25 : i32 %23;
    i1 %27 = icmp neq i32 %26, i32 0;
    i32 %28 = add i32 %26, i32 -3;
    [100005 * i32]* %29 = ptrcast [100005 * i32]* @a to [100005 * i32]*;
    [100005 * i32]* %30 = ptrcast [100005 * i32]* @b to [100005 * i32]*;
    [100005 * i32]* %31 = ptrcast [100005 * i32]* @c to [100005 * i32]*;
    cbr i1 %27(prob = 0.984615), ^while.body2, ^b1;
  ^while.body2:
    i32 %32 = phi [^b, i32 0] [^b3, i32 %76];
    i32 %33 = call () -> i32 @getch();
    i32 %34 = add i32 %33, i32 -48;
    i1 %35 = icmp ugt i32 %34, i32 9;
    i32* %36 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %32];
    cbr i1 %35(prob = 0.984615), ^while.body3, ^46;
  ^b1:
    i32* %37 = getelementptr &([100005 * i32]* %29)[i64 0][i64 0];
    i1 %38 = icmp sgt i32 %26, i32 0;
    cbr i1 %38(prob = 0.984615), ^while.body4, ^b2;
  ^while.body3:
    i32 %39 = phi [^while.body2, i32 %33] [^while.body3, i32 %41];
    i32 %40 = phi [^while.body2, i32 0] [^while.body3, i32 %45];
    i32 %41 = call () -> i32 @getch();
    i32 %42 = add i32 %41, i32 -48;
    i1 %43 = icmp ugt i32 %42, i32 9;
    i1 %44 = icmp eq i32 %39, i32 45;
    i32 %45 = select i1 %44 ? i32 1 : i32 %40;
    cbr i1 %43(prob = 0.984615), ^while.body3, ^46;
  ^46:
    i32 %47 = phi [^while.body2, i32 %33] [^while.body3, i32 %41];
    i32 %48 = phi [^while.body2, i32 0] [^while.body3, i32 %45];
    i32 %49 = add i32 %47, i32 -48;
    i1 %50 = icmp ult i32 %49, i32 10;
    cbr i1 %50(prob = 0.984615), ^while.body5, ^b3;
  ^while.body4:
    i32 %51 = phi [^b1, i32 0] [^b5, i32 %52];
    i32 %52 = add i32 %51, i32 1;
    i1 %53 = icmp sgt i32 %26, i32 %52;
    i32* %54 = getelementptr &(i32* %37)[i32 %51];
    cbr i1 %53(prob = 0.984615), ^while.body6, ^b2;
  ^b2:
    i32* %55 = getelementptr &([100005 * i32]* %30)[i64 0][i64 0];
    [400020 * i32]* %56 = ptrcast [400020 * i32]* @cnt to [400020 * i32]*;
    cbr i1 %38(prob = 0.984615), ^super.header, ^b4;
  ^while.body5:
    i32 %57 = phi [^46, i32 %47] [^while.body5, i32 %59];
    i32 %58 = phi [^46, i32 0] [^while.body5, i32 %64];
    i32 %59 = call () -> i32 @getch();
    i32 %60 = add i32 %59, i32 -48;
    i1 %61 = icmp ult i32 %60, i32 10;
    i32 %62 = mul i32 %58, i32 10;
    i32 %63 = add i32 %62, i32 -48;
    i32 %64 = add i32 %57, i32 %63;
    cbr i1 %61(prob = 0.984615), ^while.body5, ^b3;
  ^while.body6:
    i32 %65 = phi [^while.body4, i32 %52] [^b5, i32 %110];
    i32* %66 = getelementptr &(i32* %37)[i32 %65];
    i32 %67 = load i32* %54;
    i32 %68 = load i32* %66;
    i1 %69 = icmp sgt i32 %67, i32 %68;
    cbr i1 %69(prob = 0.5), ^if.then, ^b5;
  ^b3:
    i32 %70 = phi [^46, i32 0] [^while.body5, i32 %64];
    i1 %71 = icmp neq i32 %48, i32 0;
    i32 %72 = neg i32 %70;
    i32 %73 = select i1 %71 ? i32 %72 : i32 %70;
    store i32* %36 with i32 %73;
    i32* %74 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %32];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %32];
    store i32* %75 with i32 %73;
    i32 %76 = add i32 %32, i32 1;
    i1 %77 = icmp neq i32 %26, i32 %76;
    cbr i1 %77(prob = 0.984615), ^while.body2, ^b1;
  ^super.header:
    i1 %78 = icmp sgt i32 %26, i32 3;
    cbr i1 %78(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b4:
    i32 %79 = phi [^b2, i32 -100] [^scalar.header, i32 %114] [^while.body9, i32 %129];
    i32 %80 = add i32 %79, i32 1;
    i1 %81 = icmp sgt i32 %79, i32 -1;
    cbr i1 %81(prob = 0.984615), ^while.body8, ^b6;
  ^if.then:
    store i32* %54 with i32 %68;
    store i32* %66 with i32 %67;
    ubr ^b5;
  ^while.body7:
    i32 %82 = phi [^super.header, i32 -100] [^while.body7, i32 %104];
    i32 %83 = phi [^super.header, i32 0] [^while.body7, i32 %108];
    i32* %84 = getelementptr &(i32* %55)[i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %87, i32 1;
    store i32* %86 with i32 %88;
    i32* %89 = getelementptr &(i32* %84)[i64 1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %92, i32 1;
    store i32* %91 with i32 %93;
    i32 %94 = smax i32 %82, i32 %85;
    i32 %95 = smax i32 %90, i32 %94;
    i32* %96 = getelementptr &(i32* %84)[i64 2];
    i32 %97 = load i32* %96;
    i32 %98 = smax i32 %95, i32 %97;
    i32* %99 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %97];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %100, i32 1;
    store i32* %99 with i32 %101;
    i32* %102 = getelementptr &(i32* %84)[i64 3];
    i32 %103 = load i32* %102;
    i32 %104 = smax i32 %98, i32 %103;
    i32* %105 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %103];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %106, i32 1;
    store i32* %105 with i32 %107;
    i32 %108 = add i32 %83, i32 4;
    i1 %109 = icmp sgt i32 %28, i32 %108;
    cbr i1 %109(prob = 0.941176), ^while.body7, ^scalar.header;
  ^b5:
    i32 %110 = add i32 %65, i32 1;
    i1 %111 = icmp sgt i32 %26, i32 %110;
    cbr i1 %111(prob = 0.984615), ^while.body6, ^while.body4;
  ^scalar.header:
    i32 %112 = phi [^super.header, i32 -100] [^while.body7, i32 %104];
    i32 %113 = phi [^super.header, i32 0] [^while.body7, i32 %108];
    i32 %114 = phi [^super.header, i32 undef] [^while.body7, i32 %104];
    i1 %115 = icmp sgt i32 %26, i32 %113;
    cbr i1 %115(prob = 0.75), ^while.body9, ^b4;
  ^while.body8:
    i32 %116 = phi [^b4, i32 0] [^b7, i32 %139];
    i32 %117 = phi [^b4, i32 0] [^b7, i32 %138];
    i32* %118 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %116];
    i32 %119 = load i32* %118;
    i1 %120 = icmp neq i32 %119, i32 0;
    cbr i1 %120(prob = 0.984615), ^while.body10, ^b7;
  ^b6:
    i32* %121 = getelementptr &([100005 * i32]* %31)[i64 0][i64 0];
    cbr i1 %38(prob = 0.984615), ^while.body11, ^b8;
  ^while.body9 {scalar}:
    i32 %122 = phi [^scalar.header, i32 %113] [^while.body9, i32 %130];
    i32 %123 = phi [^scalar.header, i32 %112] [^while.body9, i32 %129];
    i32* %124 = getelementptr &(i32* %55)[i32 %122];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &([400020 * i32]* %56)[i64 0][i32 %125];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %127, i32 1;
    store i32* %126 with i32 %128;
    i32 %129 = smax i32 %123, i32 %125;
    i32 %130 = add i32 %122, i32 1;
    i1 %131 = icmp sgt i32 %26, i32 %130;
    cbr i1 %131(prob = 0.75), ^while.body9, ^b4;
  ^while.body10:
    i32 %132 = phi [^while.body8, i32 %119] [^while.body10, i32 %135];
    i32 %133 = phi [^while.body8, i32 %117] [^while.body10, i32 %137];
    i32* %134 = getelementptr &(i32* %55)[i32 %133];
    store i32* %134 with i32 %116;
    i32 %135 = add i32 %132, i32 -1;
    i1 %136 = icmp neq i32 %135, i32 0;
    i32 %137 = add i32 %133, i32 1;
    cbr i1 %136(prob = 0.984615), ^while.body10, ^b7;
  ^b7:
    i32 %138 = phi [^while.body8, i32 %117] [^while.body10, i32 %137];
    i32 %139 = add i32 %116, i32 1;
    i1 %140 = icmp sgt i32 %80, i32 %139;
    cbr i1 %140(prob = 0.984615), ^while.body8, ^b6;
  ^while.body11:
    i32 %141 = phi [^b6, i32 0] [^b9, i32 %142];
    i32 %142 = add i32 %141, i32 1;
    i1 %143 = icmp sgt i32 %26, i32 %142;
    cbr i1 %143(prob = 0.984615), ^super.header1, ^b9;
  ^b8:
    cbr i1 %27(prob = 0.984615), ^while.body12, ^while.header;
  ^super.header1:
    i32 %144 = add i32 %141, i32 4;
    i1 %145 = icmp sgt i32 %26, i32 %144;
    cbr i1 %145(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^b9:
    i32 %146 = phi [^while.body11, i32 %141] [^scalar.header1, i32 %200] [^while.body15, i32 %213];
    i32* %147 = getelementptr &(i32* %121)[i32 %141];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %121)[i32 %146];
    i32 %150 = load i32* %149;
    store i32* %147 with i32 %150;
    store i32* %149 with i32 %148;
    cbr i1 %143(prob = 0.984615), ^while.body11, ^b8;
  ^while.body12:
    i32 %151 = phi [^b8, i32 0] [^while.body12, i32 %161];
    i32* %152 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &([100005 * i32]* %29)[i64 0][i32 %151];
    i32 %155 = load i32* %154;
    i32 %156 = sub i32 %153, i32 %155;
    store i32* %152 with i32 %156;
    i32* %157 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %151];
    i32 %158 = load i32* %157;
    i32 %159 = sub i32 %158, i32 %156;
    i32 %160 = sub i32 %159, i32 %155;
    store i32* %157 with i32 %160;
    i32 %161 = add i32 %151, i32 1;
    i32 %162 = sub i32 %26, i32 %161;
    i1 %163 = icmp neq i32 %162, i32 0;
    cbr i1 %163(prob = 0.984615), ^while.body12, ^while.header;
  ^while.header:
    i32 %164 = phi [^b8, i32 0] [^while.body12, i32 0] [^b12, i32 %219];
    i32 %165 = sub i32 %164, i32 %26;
    i1 %166 = icmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.984615), ^while.body14, ^b10;
  ^while.body13:
    i32 %167 = phi [^super.header1, i32 %141] [^while.body13, i32 %195];
    i32 %168 = phi [^super.header1, i32 %142] [^while.body13, i32 %196];
    i32* %169 = getelementptr &(i32* %121)[i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %121)[i32 %167];
    i32 %172 = load i32* %171;
    i1 %173 = icmp slt i32 %170, i32 %172;
    i32 %174 = select i1 %173 ? i32 %168 : i32 %167;
    i32* %175 = getelementptr &(i32* %121)[i32 %174];
    i32* %176 = getelementptr &(i32* %169)[i64 1];
    i32 %177 = load i32* %176;
    i32 %178 = load i32* %175;
    i1 %179 = icmp slt i32 %177, i32 %178;
    i32 %180 = add i32 %168, i32 1;
    i32 %181 = select i1 %179 ? i32 %180 : i32 %174;
    i32* %182 = getelementptr &(i32* %121)[i32 %181];
    i32* %183 = getelementptr &(i32* %169)[i64 2];
    i32 %184 = load i32* %183;
    i32 %185 = load i32* %182;
    i1 %186 = icmp slt i32 %184, i32 %185;
    i32 %187 = add i32 %168, i32 2;
    i32 %188 = select i1 %186 ? i32 %187 : i32 %181;
    i32* %189 = getelementptr &(i32* %121)[i32 %188];
    i32* %190 = getelementptr &(i32* %169)[i64 3];
    i32 %191 = load i32* %190;
    i32 %192 = load i32* %189;
    i1 %193 = icmp slt i32 %191, i32 %192;
    i32 %194 = add i32 %168, i32 3;
    i32 %195 = select i1 %193 ? i32 %194 : i32 %188;
    i32 %196 = add i32 %168, i32 4;
    i1 %197 = icmp sgt i32 %28, i32 %196;
    cbr i1 %197(prob = 0.941176), ^while.body13, ^scalar.header1;
  ^scalar.header1:
    i32 %198 = phi [^super.header1, i32 %141] [^while.body13, i32 %195];
    i32 %199 = phi [^super.header1, i32 %142] [^while.body13, i32 %196];
    i32 %200 = phi [^super.header1, i32 undef] [^while.body13, i32 %195];
    i1 %201 = icmp sgt i32 %26, i32 %199;
    cbr i1 %201(prob = 0.75), ^while.body15, ^b9;
  ^while.body14:
    i32* %202 = getelementptr &([100005 * i32]* %30)[i64 0][i32 %164];
    i32 %203 = load i32* %202;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %205 = phi [^while.header, i32 -123] [^while.body14, i32 1] [^b11, i32 2];
    ret i32 %205;
  ^while.body15 {scalar}:
    i32 %206 = phi [^scalar.header1, i32 %199] [^while.body15, i32 %214];
    i32 %207 = phi [^scalar.header1, i32 %198] [^while.body15, i32 %213];
    i32* %208 = getelementptr &(i32* %121)[i32 %206];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %121)[i32 %207];
    i32 %211 = load i32* %210;
    i1 %212 = icmp slt i32 %209, i32 %211;
    i32 %213 = select i1 %212 ? i32 %206 : i32 %207;
    i32 %214 = add i32 %206, i32 1;
    i1 %215 = icmp sgt i32 %26, i32 %214;
    cbr i1 %215(prob = 0.75), ^while.body15, ^b9;
  ^b11:
    i32* %216 = getelementptr &([100005 * i32]* %31)[i64 0][i32 %164];
    i32 %217 = load i32* %216;
    i1 %218 = icmp neq i32 %217, i32 0;
    cbr i1 %218(prob = 0.5), ^b10, ^b12;
  ^b12:
    i32 %219 = add i32 %164, i32 1;
    ubr ^while.header;
}
