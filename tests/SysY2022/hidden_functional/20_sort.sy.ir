internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @quick_read() -> i32 {
^entry:
    i32* %f = alloc i32;
    i32* %x = alloc i32;
    i32* %ch = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %ch with i32 %0;
    store i32* %x with i32 0;
    store i32* %f with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %ch;
    i1 %2 = scmp lt i32 %1, i32 48;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i32 %5 = load i32* %ch;
    i1 %6 = scmp gt i32 %5, i32 57;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    ubr ^b1;
^b1:
    i1 %9 = phi [^b, i1 %8] [^while.header, i1 true];
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b2;
^b2:
    ubr ^while.header1;
^while.body:
    i32 %12 = load i32* %ch;
    i1 %13 = scmp eq i32 %12, i32 45;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^if.then:
    store i32* %f with i32 1;
    ubr ^b3;
^b3:
    i32 %16 = call () -> i32 @getch();
    store i32* %ch with i32 %16;
    ubr ^while.header;
^while.header1:
    i32 %17 = load i32* %ch;
    i1 %18 = scmp ge i32 %17, i32 48;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^b4, ^b5;
^b4:
    i32 %21 = load i32* %ch;
    i1 %22 = scmp le i32 %21, i32 57;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b5;
^b5:
    i1 %25 = phi [^b4, i1 %24] [^while.header1, i1 false];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b6;
^while.body1:
    i32 %28 = load i32* %x;
    i32 %29 = mul i32 %28, i32 10;
    i32 %30 = load i32* %ch;
    i32 %31 = add i32 %29, i32 %30;
    i32 %32 = sub i32 %31, i32 48;
    store i32* %x with i32 %32;
    i32 %33 = call () -> i32 @getch();
    store i32* %ch with i32 %33;
    ubr ^while.header1;
^b6:
    i32 %34 = load i32* %f;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %36 = load i32* %x;
    i32 %37 = neg i32 %36;
    ret i32 %37;
^if.else:
    i32 %38 = load i32* %x;
    ret i32 %38;
^b7:
    unreachable;
}
internal i32* @n;
internal i32* @maxn { ReadOnly } = 100005;
internal func @sortA(i32* %a) -> void {
^entry:
    i32* %t = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i32 %6 = add i32 %5, i32 1;
    store i32* %j with i32 %6;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %7 = load i32* %j;
    i32 %8 = load i32* @n;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^while.body1:
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %a1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    i32 %19 = load i32* %j;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = load i32** %a1;
    i32* %22 = getelementptr &(i32* %21)[i64 %20];
    i32 %23 = load i32* %22;
    i1 %24 = scmp gt i32 %18, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32 %27 = load i32* %i;
    i64 %28 = sext i32 %27 to i64;
    i32* %29 = load i32** %a1;
    i32* %30 = getelementptr &(i32* %29)[i64 %28];
    i32 %31 = load i32* %30;
    store i32* %t with i32 %31;
    i32 %32 = load i32* %i;
    i64 %33 = sext i32 %32 to i64;
    i32* %34 = load i32** %a1;
    i32* %35 = getelementptr &(i32* %34)[i64 %33];
    i32 %36 = load i32* %j;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = load i32** %a1;
    i32* %39 = getelementptr &(i32* %38)[i64 %37];
    i32 %40 = load i32* %39;
    store i32* %35 with i32 %40;
    i32 %41 = load i32* %j;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = load i32** %a1;
    i32* %44 = getelementptr &(i32* %43)[i64 %42];
    i32 %45 = load i32* %t;
    store i32* %44 with i32 %45;
    ubr ^b2;
^b2:
    i32 %46 = load i32* %j;
    i32 %47 = add i32 %46, i32 1;
    store i32* %j with i32 %47;
    ubr ^while.header1;
}
internal [400020 * i32]* @cnt;
internal func @sortB(i32* %a) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %now = alloc i32;
    i32* %mx = alloc i32;
    i32* %i = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %i with i32 0;
    store i32* %mx with i32 -100;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^b:
    store i32* %i with i32 0;
    store i32* %now with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %a1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %8;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([400020 * i32]* @cnt)[i64 0][i64 %10];
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = load i32** %a1;
    i32* %15 = getelementptr &(i32* %14)[i64 %13];
    i32 %16 = load i32* %15;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = getelementptr &([400020 * i32]* @cnt)[i64 0][i64 %17];
    i32 %19 = load i32* %18;
    i32 %20 = add i32 %19, i32 1;
    store i32* %11 with i32 %20;
    i32 %21 = load i32* %i;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = load i32** %a1;
    i32* %24 = getelementptr &(i32* %23)[i64 %22];
    i32 %25 = load i32* %24;
    i32 %26 = load i32* %mx;
    i1 %27 = scmp gt i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %30 = load i32* %i;
    i64 %31 = sext i32 %30 to i64;
    i32* %32 = load i32** %a1;
    i32* %33 = getelementptr &(i32* %32)[i64 %31];
    i32 %34 = load i32* %33;
    store i32* %mx with i32 %34;
    ubr ^b1;
^b1:
    i32 %35 = load i32* %i;
    i32 %36 = add i32 %35, i32 1;
    store i32* %i with i32 %36;
    ubr ^while.header;
^while.header1:
    i32 %37 = load i32* %i;
    i32 %38 = load i32* %mx;
    i1 %39 = scmp le i32 %37, i32 %38;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %42 = load i32* %i;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = getelementptr &([400020 * i32]* @cnt)[i64 0][i64 %43];
    i32 %45 = load i32* %44;
    store i32* %j with i32 %45;
    ubr ^while.header2;
^b2:
    ret;
^while.header2:
    i32 %46 = load i32* %j;
    i1 %47 = scmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %48 = load i32* %now;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = load i32** %a1;
    i32* %51 = getelementptr &(i32* %50)[i64 %49];
    i32 %52 = load i32* %i;
    store i32* %51 with i32 %52;
    i32 %53 = load i32* %now;
    i32 %54 = add i32 %53, i32 1;
    store i32* %now with i32 %54;
    i32 %55 = load i32* %j;
    i32 %56 = sub i32 %55, i32 1;
    store i32* %j with i32 %56;
    ubr ^while.header2;
^b3:
    i32 %57 = load i32* %i;
    i32 %58 = add i32 %57, i32 1;
    store i32* %i with i32 %58;
    ubr ^while.header1;
}
internal func @sortC(i32* %a) -> void {
^entry:
    i32* %t = alloc i32;
    i32* %j = alloc i32;
    i32* %id = alloc i32;
    i32* %i = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    store i32* %id with i32 %5;
    i32 %6 = load i32* %i;
    i32 %7 = add i32 %6, i32 1;
    store i32* %j with i32 %7;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %8 = load i32* %j;
    i32 %9 = load i32* @n;
    i1 %10 = scmp lt i32 %8, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %13 = load i32* %i;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = load i32** %a1;
    i32* %16 = getelementptr &(i32* %15)[i64 %14];
    i32 %17 = load i32* %16;
    store i32* %t with i32 %17;
    i32 %18 = load i32* %i;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = load i32** %a1;
    i32* %21 = getelementptr &(i32* %20)[i64 %19];
    i32 %22 = load i32* %id;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = load i32** %a1;
    i32* %25 = getelementptr &(i32* %24)[i64 %23];
    i32 %26 = load i32* %25;
    store i32* %21 with i32 %26;
    i32 %27 = load i32* %id;
    i64 %28 = sext i32 %27 to i64;
    i32* %29 = load i32** %a1;
    i32* %30 = getelementptr &(i32* %29)[i64 %28];
    i32 %31 = load i32* %t;
    store i32* %30 with i32 %31;
    i32 %32 = load i32* %i;
    i32 %33 = add i32 %32, i32 1;
    store i32* %i with i32 %33;
    ubr ^while.header;
^while.body1:
    i32 %34 = load i32* %j;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = load i32** %a1;
    i32* %37 = getelementptr &(i32* %36)[i64 %35];
    i32 %38 = load i32* %37;
    i32 %39 = load i32* %id;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = load i32** %a1;
    i32* %42 = getelementptr &(i32* %41)[i64 %40];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %38, i32 %43;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32 %47 = load i32* %j;
    store i32* %id with i32 %47;
    ubr ^b2;
^b2:
    i32 %48 = load i32* %j;
    i32 %49 = add i32 %48, i32 1;
    store i32* %j with i32 %49;
    ubr ^while.header1;
}
internal [100005 * i32]* @x;
internal [100005 * i32]* @a;
internal [100005 * i32]* @b;
internal [100005 * i32]* @c;
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32 %0 = call () -> i32 @quick_read();
    store i32* @n with i32 %0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* @n;
    i1 %3 = scmp neq i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = getelementptr &([100005 * i32]* @a)[i64 0][i64 %7];
    i32 %9 = call () -> i32 @quick_read();
    store i32* %8 with i32 %9;
    i32 %10 = load i32* %i;
    i64 %11 = sext i32 %10 to i64;
    i32* %12 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %11];
    i32 %13 = load i32* %i;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = getelementptr &([100005 * i32]* @a)[i64 0][i64 %14];
    i32 %16 = load i32* %15;
    store i32* %12 with i32 %16;
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([100005 * i32]* @c)[i64 0][i64 %18];
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %21];
    i32 %23 = load i32* %22;
    store i32* %19 with i32 %23;
    i32 %24 = load i32* %i;
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    ubr ^while.header;
^b:
    i32* %26 = getelementptr &([100005 * i32]* @a)[i64 0][i64 0];
    call (i32*) -> void @sortA(i32* %26);
    i32* %27 = getelementptr &([100005 * i32]* @b)[i64 0][i64 0];
    call (i32*) -> void @sortB(i32* %27);
    i32* %28 = getelementptr &([100005 * i32]* @c)[i64 0][i64 0];
    call (i32*) -> void @sortC(i32* %28);
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %29 = load i32* @n;
    i32 %30 = load i32* %i;
    i32 %31 = sub i32 %29, i32 %30;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %33 = load i32* %i;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %34];
    i32 %36 = load i32* %i;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %37];
    i32 %39 = load i32* %38;
    i32 %40 = load i32* %i;
    i64 %41 = sext i32 %40 to i64;
    i32* %42 = getelementptr &([100005 * i32]* @a)[i64 0][i64 %41];
    i32 %43 = load i32* %42;
    i32 %44 = sub i32 %39, i32 %43;
    store i32* %35 with i32 %44;
    i32 %45 = load i32* %i;
    i64 %46 = sext i32 %45 to i64;
    i32* %47 = getelementptr &([100005 * i32]* @c)[i64 0][i64 %46];
    i32 %48 = load i32* %i;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = getelementptr &([100005 * i32]* @c)[i64 0][i64 %49];
    i32 %51 = load i32* %50;
    i32 %52 = load i32* %i;
    i64 %53 = sext i32 %52 to i64;
    i32* %54 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %53];
    i32 %55 = load i32* %54;
    i32 %56 = sub i32 %51, i32 %55;
    i32 %57 = load i32* %i;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = getelementptr &([100005 * i32]* @a)[i64 0][i64 %58];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %56, i32 %60;
    store i32* %47 with i32 %61;
    i32 %62 = load i32* %i;
    i32 %63 = add i32 %62, i32 1;
    store i32* %i with i32 %63;
    ubr ^while.header1;
^b1:
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %64 = load i32* %i;
    i32 %65 = load i32* @n;
    i32 %66 = sub i32 %64, i32 %65;
    i1 %67 = scmp neq i32 %66, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %68 = load i32* %i;
    i64 %69 = sext i32 %68 to i64;
    i32* %70 = getelementptr &([100005 * i32]* @b)[i64 0][i64 %69];
    i32 %71 = load i32* %70;
    i1 %72 = scmp neq i32 %71, i32 0;
    cbr i1 %72(prob = 0.5), ^if.then, ^b3;
^b2:
    ret i32 -123;
^b3:
    i32 %73 = load i32* %i;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = getelementptr &([100005 * i32]* @c)[i64 0][i64 %74];
    i32 %76 = load i32* %75;
    i1 %77 = scmp neq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then1, ^b4;
^if.then:
    ret i32 1;
^b4:
    i32 %78 = load i32* %i;
    i32 %79 = add i32 %78, i32 1;
    store i32* %i with i32 %79;
    ubr ^while.header2;
^if.then1:
    ret i32 2;
}
