internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32* %3 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    call (i32) -> void @starttime(i32 109);
    i32* %7 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    i1 %8 = scmp gt i32 %6, i32 0;
    i32 %9 = mul i32 %1, i32 %2;
    i32 %10 = sdiv i32 %0, i32 2;
    i1 %11 = scmp gt i32 %9, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = phi [^entry, i32 0] [^while.body12, i32 %112];
    i32* %13 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp eq i32 %14, i32 0;
    i1 %16 = scmp eq i32 %14, i32 1;
    i1 %17 = scmp eq i32 %14, i32 2;
    i1 %18 = scmp eq i32 %14, i32 3;
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %3);
    ret i32 0;
^while.body1:
    i32 %19 = phi [^while.body, i32 0] [^b15, i32 %90];
    i32 %20 = sub i32 %19, i32 %10;
    i32 %21 = add i32 %10, i32 %19;
    i32 %22 = mul i32 %19, i32 %2;
    ubr ^while.body2;
^while.body2:
    i32 %23 = phi [^while.body1, i32 0] [^b14, i32 %75];
    i32 %24 = sub i32 %23, i32 %10;
    i32 %25 = add i32 %10, i32 %23;
    ubr ^while.body3;
^while.body3:
    i32 %26 = phi [^while.body2, i32 %20] [^b11, i32 %65];
    i32 %27 = phi [^while.body2, i32 0] [^b11, i32 %58];
    i1 %28 = scmp lt i32 %26, i32 0;
    ubr ^while.body4;
^while.body4:
    i32 %29 = phi [^while.body3, i32 %24] [^b9, i32 %59];
    i32 %30 = phi [^while.body3, i32 %27] [^b9, i32 %58];
    cbr i1 %28(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %31 = phi [^while.body4, i32 0] [^b2, i32 0] [^b4, i32 0] [^b6, i32 0] [^b8, i32 %57];
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^b2:
    i1 %32 = scmp lt i32 %29, i32 0;
    cbr i1 %32(prob = 0.5), ^b1, ^b4;
^if.then:
    i32 %33 = add i32 %30, i32 %31;
    i1 %34 = scmp gt i32 %33, i32 1073741824;
    cbr i1 %34(prob = 0.97), ^while.body5, ^indirect;
^b3:
    cbr i1 %16(prob = 0.5), ^while.header, ^b5;
^b4:
    i1 %35 = scmp ge i32 %26, i32 %1;
    cbr i1 %35(prob = 0.5), ^b1, ^b6;
^while.body5:
    i32 %36 = phi [^if.then, i32 %33] [^while.body5, i32 %37];
    i32 %37 = add i32 %36, i32 -1073741824;
    i1 %38 = scmp gt i32 %37, i32 1073741824;
    cbr i1 %38(prob = 0.97), ^while.body5, ^indirect;
^while.header:
    i32 %39 = phi [^b3, i32 1] [^b13, i32 %72];
    i32 %40 = phi [^b3, i32 0] [^b13, i32 %71];
    i1 %41 = scmp lt i32 %39, i32 1073741824;
    cbr i1 %41(prob = 0.97), ^while.body6, ^b9;
^indirect:
    i32 %42 = phi [^if.then, i32 %33] [^while.body5, i32 %37];
    i1 %43 = scmp lt i32 %42, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body7, ^b7;
^b5:
    cbr i1 %17(prob = 0.5), ^if.then1, ^b10;
^b6:
    i1 %44 = scmp ge i32 %29, i32 %2;
    cbr i1 %44(prob = 0.5), ^b1, ^b8;
^b7:
    i32 %45 = phi [^indirect, i32 %42] [^while.body7, i32 %52];
    ubr ^b9;
^while.body6:
    i32 %46 = sdiv i32 %30, i32 %39;
    i32 %47 = srem i32 %46, i32 2;
    i32 %48 = sdiv i32 %31, i32 %39;
    i32 %49 = srem i32 %48, i32 2;
    i1 %50 = scmp eq i32 %47, i32 %49;
    cbr i1 %50(prob = 0.5), ^if.then2, ^if.else;
^while.body7:
    i32 %51 = phi [^indirect, i32 %42] [^while.body7, i32 %52];
    i32 %52 = add i32 %51, i32 1073741824;
    i1 %53 = scmp lt i32 %52, i32 0;
    cbr i1 %53(prob = 0.97), ^while.body7, ^b7;
^b8:
    i32 %54 = mul i32 %26, i32 %2;
    i32 %55 = add i32 %29, i32 %54;
    i32* %56 = getelementptr &(i32* %3)[i32 %55];
    i32 %57 = load i32* %56;
    ubr ^b1;
^b9:
    i32 %58 = phi [^while.header, i32 %40] [^b7, i32 %45] [^if.then1, i32 %30] [^if.else1, i32 %31] [^while.header1, i32 %68] [^b12, i32 0] [^while.header2, i32 %84];
    i32 %59 = add i32 %29, i32 1;
    i1 %60 = scmp ge i32 %59, i32 %25;
    cbr i1 %60(prob = 0.5), ^b11, ^while.body4;
^if.then1:
    i1 %61 = scmp gt i32 %30, i32 %31;
    cbr i1 %61(prob = 0.5), ^b9, ^if.else1;
^b10:
    cbr i1 %18(prob = 0.5), ^while.header1, ^b12;
^if.then2:
    i32 %62 = shl i32 %40, i32 1;
    ubr ^b13;
^if.else:
    i32 %63 = shl i32 %40, i32 1;
    i32 %64 = add i32 %63, i32 1;
    ubr ^b13;
^if.else1:
    ubr ^b9;
^b11:
    i32 %65 = add i32 %26, i32 1;
    i1 %66 = scmp ge i32 %65, i32 %21;
    cbr i1 %66(prob = 0.5), ^b14, ^while.body3;
^while.header1:
    i32 %67 = phi [^b10, i32 1] [^b16, i32 %100];
    i32 %68 = phi [^b10, i32 0] [^b16, i32 %99];
    i1 %69 = scmp lt i32 %67, i32 1073741824;
    cbr i1 %69(prob = 0.97), ^while.body8, ^b9;
^b12:
    i1 %70 = scmp eq i32 %14, i32 4;
    cbr i1 %70(prob = 0.5), ^while.header2, ^b9;
^b13:
    i32 %71 = phi [^if.then2, i32 %62] [^if.else, i32 %64];
    i32 %72 = shl i32 %39, i32 1;
    ubr ^while.header;
^b14:
    i32 %73 = add i32 %23, i32 %22;
    i32* %74 = getelementptr &(i32* %7)[i32 %73];
    store i32* %74 with i32 %58;
    i32 %75 = add i32 %23, i32 1;
    i1 %76 = scmp ge i32 %75, i32 %2;
    cbr i1 %76(prob = 0.5), ^b15, ^while.body2;
^while.body8:
    i32 %77 = sdiv i32 %30, i32 %67;
    i32 %78 = srem i32 %77, i32 2;
    i1 %79 = scmp eq i32 %78, i32 1;
    i32 %80 = sdiv i32 %31, i32 %67;
    i32 %81 = srem i32 %80, i32 2;
    i1 %82 = scmp eq i32 %81, i32 1;
    i1 %83 = or i1 %79, i1 %82;
    cbr i1 %83(prob = 0.75), ^if.then3, ^if.else2;
^while.header2:
    i32 %84 = phi [^b12, i32 0] [^b17, i32 %104];
    i32 %85 = phi [^b12, i32 1] [^b17, i32 %105];
    i1 %86 = scmp lt i32 %85, i32 1073741824;
    cbr i1 %86(prob = 0.97), ^while.body9, ^b9;
^if.then3:
    i32 %87 = shl i32 %68, i32 1;
    i32 %88 = add i32 %87, i32 1;
    ubr ^b16;
^if.else2:
    i32 %89 = shl i32 %68, i32 1;
    ubr ^b16;
^b15:
    i32 %90 = add i32 %19, i32 1;
    i1 %91 = scmp ge i32 %90, i32 %1;
    cbr i1 %91(prob = 0.5), ^while.body10, ^while.body1;
^while.body9:
    i32 %92 = sdiv i32 %30, i32 %85;
    i32 %93 = srem i32 %92, i32 2;
    i1 %94 = scmp eq i32 %93, i32 1;
    i32 %95 = sdiv i32 %31, i32 %85;
    i32 %96 = srem i32 %95, i32 2;
    i1 %97 = scmp eq i32 %96, i32 1;
    i1 %98 = and i1 %94, i1 %97;
    cbr i1 %98(prob = 0.25), ^if.then4, ^if.else3;
^b16:
    i32 %99 = phi [^if.then3, i32 %88] [^if.else2, i32 %89];
    i32 %100 = shl i32 %67, i32 1;
    ubr ^while.header1;
^if.then4:
    i32 %101 = shl i32 %84, i32 1;
    i32 %102 = add i32 %101, i32 1;
    ubr ^b17;
^while.body10:
    cbr i1 %11(prob = 0.97), ^while.body11, ^while.body12;
^if.else3:
    i32 %103 = shl i32 %84, i32 1;
    ubr ^b17;
^b17:
    i32 %104 = phi [^if.then4, i32 %102] [^if.else3, i32 %103];
    i32 %105 = shl i32 %85, i32 1;
    ubr ^while.header2;
^while.body11:
    i32 %106 = phi [^while.body10, i32 0] [^while.body11, i32 %110];
    i32* %107 = getelementptr &(i32* %3)[i32 %106];
    i32* %108 = getelementptr &(i32* %7)[i32 %106];
    i32 %109 = load i32* %108;
    store i32* %107 with i32 %109;
    i32 %110 = add i32 %106, i32 1;
    i1 %111 = scmp lt i32 %110, i32 %9;
    cbr i1 %111(prob = 0.97), ^while.body11, ^while.body12;
^while.body12:
    i32 %112 = add i32 %12, i32 1;
    i1 %113 = scmp lt i32 %112, i32 %6;
    cbr i1 %113(prob = 0.97), ^while.body, ^b;
}
