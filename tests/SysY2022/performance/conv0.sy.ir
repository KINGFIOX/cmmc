internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = mul i32 %1, i32 %2;
    i1 %4 = icmp sgt i32 %3, i32 0;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %9 = getelementptr &([10000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    i1 %11 = icmp sgt i32 %10, i32 0;
    i32 %12 = sdiv i32 %0, i32 2;
    call (i32) -> void @starttime(i32 109);
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %15 = phi [^entry, i32 0] [^while.body11, i32 %112];
    i32* %16 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = icmp eq i32 %17, i32 0;
    i1 %19 = icmp eq i32 %17, i32 1;
    i1 %20 = icmp eq i32 %17, i32 2;
    i1 %21 = icmp eq i32 %17, i32 3;
    ubr ^while.body1;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %6);
    ret i32 0;
  ^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^b11, i32 %90];
    i32 %23 = sub i32 %22, i32 %12;
    i32 %24 = add i32 %12, i32 %22;
    i32 %25 = mul i32 %2, i32 %22;
    ubr ^while.body2;
  ^while.body2:
    i32 %26 = phi [^while.body1, i32 0] [^b10, i32 %80];
    i32 %27 = sub i32 %26, i32 %12;
    i32 %28 = add i32 %12, i32 %26;
    ubr ^while.body3;
  ^while.body3:
    i32 %29 = phi [^while.body2, i32 %23] [^b7, i32 %70];
    i32 %30 = phi [^while.body2, i32 0] [^b7, i32 %64];
    i1 %31 = icmp sle i32 %1, i32 %29;
    i1 %32 = icmp slt i32 %29, i32 0;
    i1 %33 = or i1 %31, i1 %32;
    ubr ^while.body4;
  ^while.body4:
    i32 %34 = phi [^while.body3, i32 %27] [^b5, i32 %65];
    i32 %35 = phi [^while.body3, i32 %30] [^b5, i32 %64];
    i1 %36 = icmp slt i32 %34, i32 0;
    i1 %37 = or i1 %33, i1 %36;
    i1 %38 = icmp sle i32 %2, i32 %34;
    i1 %39 = or i1 %37, i1 %38;
    cbr i1 %39(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %40 = mul i32 %2, i32 %29;
    i32 %41 = add i32 %34, i32 %40;
    i32* %42 = getelementptr &(i32* %6)[i32 %41];
    i32 %43 = load i32* %42;
    ubr ^b2;
  ^b2:
    i32 %44 = phi [^while.body4, i32 0] [^b1, i32 %43];
    cbr i1 %18(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %45 = add i32 %35, i32 %44;
    i1 %46 = icmp sgt i32 %45, i32 1073741824;
    cbr i1 %46(prob = 0.97), ^while.body5, ^indirect;
  ^b3:
    cbr i1 %19(prob = 0.5), ^while.header, ^b4;
  ^while.body5:
    i32 %47 = phi [^if.then, i32 %45] [^while.body5, i32 %48];
    i32 %48 = add i32 %47, i32 -1073741824;
    i1 %49 = icmp sgt i32 %48, i32 1073741824;
    cbr i1 %49(prob = 0.97), ^while.body5, ^indirect;
  ^while.header:
    i32 %50 = phi [^b3, i32 1] [^b9, i32 %77];
    i32 %51 = phi [^b3, i32 0] [^b9, i32 %76];
    i1 %52 = icmp slt i32 %50, i32 1073741824;
    cbr i1 %52(prob = 0.97), ^while.body6, ^b5;
  ^indirect:
    i32 %53 = phi [^if.then, i32 %45] [^while.body5, i32 %48];
    i1 %54 = icmp slt i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %20(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %55 = smax i32 %35, i32 %44;
    ubr ^b5;
  ^while.body6:
    i32 %56 = sdiv i32 %35, i32 %50;
    i32 %57 = srem i32 %56, i32 2;
    i32 %58 = sdiv i32 %44, i32 %50;
    i32 %59 = srem i32 %58, i32 2;
    i1 %60 = icmp eq i32 %57, i32 %59;
    cbr i1 %60(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %61 = phi [^indirect, i32 %53] [^while.body7, i32 %62];
    i32 %62 = add i32 %61, i32 1073741824;
    i1 %63 = icmp slt i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %64 = phi [^while.header, i32 %51] [^indirect, i32 %53] [^if.then1, i32 %55] [^while.body7, i32 %62] [^while.header1, i32 %73] [^b8, i32 0] [^while.header2, i32 %86];
    i32 %65 = add i32 %34, i32 1;
    i1 %66 = icmp sle i32 %28, i32 %65;
    cbr i1 %66(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %21(prob = 0.5), ^while.header1, ^b8;
  ^if.then2:
    i32 %67 = mul i32 %51, i32 2;
    ubr ^b9;
  ^if.else:
    i32 %68 = mul i32 %51, i32 2;
    i32 %69 = add i32 %68, i32 1;
    ubr ^b9;
  ^b7:
    i32 %70 = add i32 %29, i32 1;
    i1 %71 = icmp sle i32 %24, i32 %70;
    cbr i1 %71(prob = 0.5), ^b10, ^while.body3;
  ^while.header1:
    i32 %72 = phi [^b6, i32 1] [^b13, i32 %99];
    i32 %73 = phi [^b6, i32 0] [^b13, i32 %98];
    i1 %74 = icmp slt i32 %72, i32 1073741824;
    cbr i1 %74(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %75 = icmp eq i32 %17, i32 4;
    cbr i1 %75(prob = 0.5), ^while.header2, ^b5;
  ^b9:
    i32 %76 = phi [^if.then2, i32 %67] [^if.else, i32 %69];
    i32 %77 = mul i32 %50, i32 2;
    ubr ^while.header;
  ^b10:
    i32 %78 = add i32 %25, i32 %26;
    i32* %79 = getelementptr &(i32* %14)[i32 %78];
    store i32* %79 with i32 %64;
    i32 %80 = add i32 %26, i32 1;
    i1 %81 = icmp sle i32 %2, i32 %80;
    cbr i1 %81(prob = 0.5), ^b11, ^while.body2;
  ^while.body8:
    i32 %82 = sdiv i32 %35, i32 %72;
    i32 %83 = and i32 %82, i32 -2147483647;
    i1 %84 = icmp eq i32 %83, i32 1;
    cbr i1 %84(prob = 0.5), ^if.then3, ^b12;
  ^while.header2:
    i32 %85 = phi [^b8, i32 1] [^b15, i32 %111];
    i32 %86 = phi [^b8, i32 0] [^b15, i32 %110];
    i1 %87 = icmp slt i32 %85, i32 1073741824;
    cbr i1 %87(prob = 0.97), ^while.body9, ^b5;
  ^if.then3:
    i32 %88 = mul i32 %73, i32 2;
    i32 %89 = add i32 %88, i32 1;
    ubr ^b13;
  ^b11:
    i32 %90 = add i32 %22, i32 1;
    i1 %91 = icmp sle i32 %1, i32 %90;
    cbr i1 %91(prob = 0.5), ^while.body10, ^while.body1;
  ^b12:
    i32 %92 = sdiv i32 %44, i32 %72;
    i32 %93 = and i32 %92, i32 -2147483647;
    i1 %94 = icmp eq i32 %93, i32 1;
    cbr i1 %94(prob = 0.5), ^if.then3, ^if.else1;
  ^while.body9:
    i32 %95 = sdiv i32 %35, i32 %85;
    i32 %96 = and i32 %95, i32 -2147483647;
    i1 %97 = icmp eq i32 %96, i32 1;
    cbr i1 %97(prob = 0.5), ^b14, ^if.else2;
  ^b13:
    i32 %98 = phi [^if.then3, i32 %89] [^if.else1, i32 %100];
    i32 %99 = mul i32 %72, i32 2;
    ubr ^while.header1;
  ^while.body10:
    cbr i1 %4(prob = 0.97), ^super.header, ^while.body11;
  ^if.else1:
    i32 %100 = mul i32 %73, i32 2;
    ubr ^b13;
  ^if.else2:
    i32 %101 = mul i32 %86, i32 2;
    ubr ^b15;
  ^b14:
    i32 %102 = sdiv i32 %44, i32 %85;
    i32 %103 = and i32 %102, i32 -2147483647;
    i1 %104 = icmp eq i32 %103, i32 1;
    cbr i1 %104(prob = 0.5), ^if.then4, ^if.else2;
  ^if.then4:
    i32 %105 = mul i32 %86, i32 2;
    i32 %106 = add i32 %105, i32 1;
    ubr ^b15;
  ^super.header:
    i32 %107 = phi [^while.body10, i32 0] [^while.body12, i32 %108];
    i32 %108 = add i32 %107, i32 4;
    i1 %109 = icmp sgt i32 %3, i32 %108;
    cbr i1 %109(prob = 0.89), ^while.body12, ^super.header1;
  ^b15:
    i32 %110 = phi [^if.else2, i32 %101] [^if.then4, i32 %106];
    i32 %111 = mul i32 %85, i32 2;
    ubr ^while.header2;
  ^while.body11:
    i32 %112 = add i32 %15, i32 1;
    i1 %113 = icmp sgt i32 %10, i32 %112;
    cbr i1 %113(prob = 0.97), ^while.body, ^b;
  ^while.body12:
    i32* %114 = getelementptr &(i32* %14)[i32 %107];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %6)[i32 %107];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %114)[i64 1];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %116)[i64 1];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %114)[i64 2];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %116)[i64 2];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %114)[i64 3];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %116)[i64 3];
    store i32* %125 with i32 %124;
    ubr ^super.header;
  ^super.header1:
    i32 %126 = phi [^super.header, i32 %107] [^while.body13, i32 %127];
    i32 %127 = add i32 %126, i32 4;
    i1 %128 = icmp sgt i32 %3, i32 %127;
    cbr i1 %128(prob = 0.89), ^while.body13, ^super.header2;
  ^while.body13:
    i32* %129 = getelementptr &(i32* %14)[i32 %126];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %6)[i32 %126];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %129)[i64 1];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %131)[i64 1];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %129)[i64 2];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %131)[i64 2];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %129)[i64 3];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %131)[i64 3];
    store i32* %140 with i32 %139;
    ubr ^super.header1;
  ^super.header2:
    i32 %141 = phi [^super.header1, i32 %126] [^while.body14, i32 %142];
    i32 %142 = add i32 %141, i32 4;
    i1 %143 = icmp sgt i32 %3, i32 %142;
    cbr i1 %143(prob = 0.89), ^while.body14, ^while.body15;
  ^while.body14:
    i32* %144 = getelementptr &(i32* %14)[i32 %141];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &(i32* %6)[i32 %141];
    store i32* %146 with i32 %145;
    i32* %147 = getelementptr &(i32* %144)[i64 1];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %146)[i64 1];
    store i32* %149 with i32 %148;
    i32* %150 = getelementptr &(i32* %144)[i64 2];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &(i32* %146)[i64 2];
    store i32* %152 with i32 %151;
    i32* %153 = getelementptr &(i32* %144)[i64 3];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %146)[i64 3];
    store i32* %155 with i32 %154;
    ubr ^super.header2;
  ^while.body15:
    i32 %156 = phi [^super.header2, i32 %141] [^while.body15, i32 %160];
    i32* %157 = getelementptr &(i32* %14)[i32 %156];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %6)[i32 %156];
    store i32* %159 with i32 %158;
    i32 %160 = add i32 %156, i32 1;
    i1 %161 = icmp sgt i32 %3, i32 %160;
    cbr i1 %161(prob = 0.97), ^while.body15, ^while.body11;
}
