internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = mul i32 %1, i32 %2;
    [10000000 * i32]* %4 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %5 = getelementptr &([10000000 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %8 = getelementptr &([10000 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    i1 %10 = icmp sgt i32 %9, i32 0;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %10(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %11 = add i32 %3, i32 -4;
    i1 %12 = icmp sgt i32 %11, i32 16;
    i32 %13 = add i32 %3, i32 -20;
    i1 %14 = icmp sgt i32 %3, i32 4;
    i1 %15 = icmp sgt i32 %3, i32 0;
    i32 %16 = sdiv i32 %0, i32 2;
    [10000000 * i32]* %17 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %18 = getelementptr &([10000000 * i32]* %17)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %5);
    ret i32 0;
  ^while.body:
    i32 %19 = phi [^prebody, i32 0] [^while.body11, i32 %113];
    i32* %20 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %21, i32 0;
    i1 %23 = icmp eq i32 %21, i32 1;
    i1 %24 = icmp eq i32 %21, i32 2;
    i1 %25 = icmp eq i32 %21, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %26 = phi [^while.body, i32 0] [^b10, i32 %95];
    i32 %27 = sub i32 %26, i32 %16;
    i32 %28 = add i32 %16, i32 %26;
    i32 %29 = mul i32 %2, i32 %26;
    ubr ^while.body2;
  ^while.body2:
    i32 %30 = phi [^while.body1, i32 0] [^b9, i32 %85];
    i32 %31 = sub i32 %30, i32 %16;
    i32 %32 = add i32 %16, i32 %30;
    ubr ^while.body3;
  ^while.body3:
    i32 %33 = phi [^while.body2, i32 %27] [^b7, i32 %77];
    i32 %34 = phi [^while.body2, i32 0] [^b7, i32 %74];
    i1 %35 = icmp sle i32 %1, i32 %33;
    ubr ^while.body4;
  ^while.body4:
    i32 %36 = phi [^while.body3, i32 %31] [^b5, i32 %75];
    i32 %37 = phi [^while.body3, i32 %34] [^b5, i32 %74];
    i32 %38 = or i32 %33, i32 %36;
    i32 %39 = lshr i32 %38, i32 31;
    i1 %40 = ztrunc i32 %39 to i1;
    i1 %41 = or i1 %35, i1 %40;
    i1 %42 = icmp sle i32 %2, i32 %36;
    i1 %43 = or i1 %41, i1 %42;
    cbr i1 %43(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %44 = mul i32 %2, i32 %33;
    i32 %45 = add i32 %36, i32 %44;
    i32* %46 = getelementptr &(i32* %5)[i32 %45];
    i32 %47 = load i32* %46;
    ubr ^b2;
  ^b2:
    i32 %48 = phi [^while.body4, i32 0] [^b1, i32 %47];
    cbr i1 %22(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %49 = add i32 %37, i32 %48;
    i1 %50 = icmp sgt i32 %49, i32 1073741824;
    cbr i1 %50(prob = 0.97), ^while.body5, ^67;
  ^b3:
    cbr i1 %23(prob = 0.5), ^while.body6, ^b4;
  ^while.body5:
    i32 %51 = phi [^if.then, i32 %49] [^while.body5, i32 %52];
    i32 %52 = add i32 %51, i32 -1073741824;
    i1 %53 = icmp sgt i32 %52, i32 1073741824;
    cbr i1 %53(prob = 0.97), ^while.body5, ^67;
  ^while.body6:
    i32 %54 = phi [^b3, i32 1] [^while.body6, i32 %65];
    i32 %55 = phi [^b3, i32 0] [^while.body6, i32 %64];
    i32 %56 = sdiv i32 %37, i32 %54;
    i32 %57 = srem i32 %56, i32 2;
    i32 %58 = sdiv i32 %48, i32 %54;
    i32 %59 = srem i32 %58, i32 2;
    i1 %60 = icmp eq i32 %57, i32 %59;
    i32 %61 = zext i1 %60 to i32;
    i32 %62 = mul i32 %55, i32 2;
    i32 %63 = add i32 %62, i32 1;
    i32 %64 = sub i32 %63, i32 %61;
    i32 %65 = mul i32 %54, i32 2;
    i1 %66 = icmp slt i32 %65, i32 1073741824;
    cbr i1 %66(prob = 0.97), ^while.body6, ^b5;
  ^67:
    i32 %68 = phi [^if.then, i32 %49] [^while.body5, i32 %52];
    i1 %69 = icmp slt i32 %68, i32 0;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %24(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %70 = smax i32 %37, i32 %48;
    ubr ^b5;
  ^while.body7:
    i32 %71 = phi [^67, i32 %68] [^while.body7, i32 %72];
    i32 %72 = add i32 %71, i32 1073741824;
    i1 %73 = icmp slt i32 %72, i32 0;
    cbr i1 %73(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %74 = phi [^while.body6, i32 %64] [^67, i32 %68] [^if.then1, i32 %70] [^while.body7, i32 %72] [^while.header, i32 %79] [^b8, i32 0] [^while.header1, i32 %91];
    i32 %75 = add i32 %36, i32 1;
    i1 %76 = icmp sle i32 %32, i32 %75;
    cbr i1 %76(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %25(prob = 0.5), ^while.header, ^b8;
  ^b7:
    i32 %77 = add i32 %33, i32 1;
    i1 %78 = icmp sle i32 %28, i32 %77;
    cbr i1 %78(prob = 0.5), ^b9, ^while.body3;
  ^while.header:
    i32 %79 = phi [^b6, i32 0] [^b12, i32 %104];
    i32 %80 = phi [^b6, i32 1] [^b12, i32 %105];
    i1 %81 = icmp slt i32 %80, i32 1073741824;
    cbr i1 %81(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %82 = icmp eq i32 %21, i32 4;
    cbr i1 %82(prob = 0.5), ^while.header1, ^b5;
  ^b9:
    i32 %83 = add i32 %29, i32 %30;
    i32* %84 = getelementptr &(i32* %18)[i32 %83];
    store i32* %84 with i32 %74;
    i32 %85 = add i32 %30, i32 1;
    i1 %86 = icmp sle i32 %2, i32 %85;
    cbr i1 %86(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %87 = sdiv i32 %37, i32 %80;
    i32 %88 = and i32 %87, i32 -2147483647;
    i1 %89 = icmp eq i32 %88, i32 1;
    i32 %90 = mul i32 %79, i32 2;
    cbr i1 %89(prob = 0.5), ^if.then2, ^b11;
  ^while.header1:
    i32 %91 = phi [^b8, i32 0] [^b14, i32 %111];
    i32 %92 = phi [^b8, i32 1] [^b14, i32 %112];
    i1 %93 = icmp slt i32 %92, i32 1073741824;
    cbr i1 %93(prob = 0.97), ^while.body9, ^b5;
  ^if.then2:
    i32 %94 = add i32 %90, i32 1;
    ubr ^b12;
  ^b10:
    i32 %95 = add i32 %26, i32 1;
    i1 %96 = icmp sle i32 %1, i32 %95;
    cbr i1 %96(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %97 = sdiv i32 %48, i32 %80;
    i32 %98 = and i32 %97, i32 -2147483647;
    i1 %99 = icmp eq i32 %98, i32 1;
    cbr i1 %99(prob = 0.5), ^if.then2, ^b12;
  ^while.body9:
    i32 %100 = sdiv i32 %37, i32 %92;
    i32 %101 = and i32 %100, i32 -2147483647;
    i1 %102 = icmp eq i32 %101, i32 1;
    i32 %103 = mul i32 %91, i32 2;
    cbr i1 %102(prob = 0.5), ^b13, ^b14;
  ^b12:
    i32 %104 = phi [^if.then2, i32 %94] [^b11, i32 %90];
    i32 %105 = mul i32 %80, i32 2;
    ubr ^while.header;
  ^b13:
    i32 %106 = sdiv i32 %48, i32 %92;
    i32 %107 = and i32 %106, i32 -2147483647;
    i1 %108 = icmp eq i32 %107, i32 1;
    i32 %109 = zext i1 %108 to i32;
    i32 %110 = add i32 %103, i32 %109;
    ubr ^b14;
  ^while.body10:
    cbr i1 %15(prob = 0.97), ^super.header, ^while.body11;
  ^b14:
    i32 %111 = phi [^while.body9, i32 %103] [^b13, i32 %110];
    i32 %112 = mul i32 %92, i32 2;
    ubr ^while.header1;
  ^super.header:
    cbr i1 %14(prob = 0.89), ^super.header1, ^while.body12;
  ^while.body11:
    i32 %113 = add i32 %19, i32 1;
    i1 %114 = icmp sgt i32 %9, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body, ^b;
  ^super.header1:
    cbr i1 %12(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body12 {scalar}:
    i32 %115 = phi [^super.header, i32 0] [^while.body12, i32 %119] [^while.body14, i32 %185];
    i32* %116 = getelementptr &(i32* %18)[i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %5)[i32 %115];
    store i32* %118 with i32 %117;
    i32 %119 = add i32 %115, i32 1;
    i1 %120 = icmp sgt i32 %3, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body12, ^while.body11;
  ^while.body13:
    i32 %121 = phi [^super.header1, i32 0] [^while.body13, i32 %170];
    i32* %122 = getelementptr &(i32* %18)[i32 %121];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %5)[i32 %121];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %122)[i64 1];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %124)[i64 1];
    store i32* %127 with i32 %126;
    i32* %128 = getelementptr &(i32* %122)[i64 2];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %124)[i64 2];
    store i32* %130 with i32 %129;
    i32* %131 = getelementptr &(i32* %122)[i64 3];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %124)[i64 3];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %122)[i64 4];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %124)[i64 4];
    store i32* %136 with i32 %135;
    i32* %137 = getelementptr &(i32* %122)[i64 5];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %124)[i64 5];
    store i32* %139 with i32 %138;
    i32* %140 = getelementptr &(i32* %122)[i64 6];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %124)[i64 6];
    store i32* %142 with i32 %141;
    i32* %143 = getelementptr &(i32* %122)[i64 7];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %124)[i64 7];
    store i32* %145 with i32 %144;
    i32* %146 = getelementptr &(i32* %122)[i64 8];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %124)[i64 8];
    store i32* %148 with i32 %147;
    i32* %149 = getelementptr &(i32* %122)[i64 9];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %124)[i64 9];
    store i32* %151 with i32 %150;
    i32* %152 = getelementptr &(i32* %122)[i64 10];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %124)[i64 10];
    store i32* %154 with i32 %153;
    i32* %155 = getelementptr &(i32* %122)[i64 11];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %124)[i64 11];
    store i32* %157 with i32 %156;
    i32* %158 = getelementptr &(i32* %122)[i64 12];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %124)[i64 12];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %122)[i64 13];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %124)[i64 13];
    store i32* %163 with i32 %162;
    i32* %164 = getelementptr &(i32* %122)[i64 14];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %124)[i64 14];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &(i32* %122)[i64 15];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %124)[i64 15];
    store i32* %169 with i32 %168;
    i32 %170 = add i32 %121, i32 16;
    i1 %171 = icmp sgt i32 %13, i32 %170;
    cbr i1 %171(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %172 = phi [^super.header1, i32 0] [^while.body13, i32 %170] [^while.body14, i32 %185];
    i32* %173 = getelementptr &(i32* %18)[i32 %172];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %5)[i32 %172];
    store i32* %175 with i32 %174;
    i32* %176 = getelementptr &(i32* %173)[i64 1];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %175)[i64 1];
    store i32* %178 with i32 %177;
    i32* %179 = getelementptr &(i32* %173)[i64 2];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &(i32* %175)[i64 2];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %173)[i64 3];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %175)[i64 3];
    store i32* %184 with i32 %183;
    i32 %185 = add i32 %172, i32 4;
    i1 %186 = icmp sgt i32 %11, i32 %185;
    cbr i1 %186(prob = 0.75), ^while.body14, ^while.body12;
}
