internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %kernelid = alloc i32;
    i32* %n1 = alloc i32;
    i32* %m = alloc i32;
    i32* %c = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %task = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %c1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %c1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %n2 with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %m1 with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %c1;
    i32 %8 = load i32* %n2;
    i32 %9 = load i32* %m1;
    store i32* %task with i32 %6;
    call (i32) -> void @starttime(i32 109);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body14, i32 %218] [^entry, i32 %7];
    i32 %12 = phi [^while.body14, i32 %219] [^entry, i32 %8];
    i32 %13 = phi [^while.body14, i32 %220] [^entry, i32 %9];
    i32 %14 = phi [^while.body14, i32 %242] [^entry, i32 0];
    i32 %15 = phi [^while.body14, i32 %221] [^entry, i32 %6];
    i1 %16 = scmp lt i32 %14, i32 %15;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %17 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    store i32* %kernelid with i32 %18;
    store i32* %n1 with i32 %12;
    store i32* %m with i32 %13;
    store i32* %c with i32 %11;
    store i32* %i1 with i32 0;
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %19 = mul i32 %13, i32 %12;
    call (i32, i32*) -> void @putarray(i32 %19, i32* %3);
    ret i32 0;
^while.body1:
    i32 %20 = phi [^b16, i32 %202] [^while.body, i32 0];
    i32 %21 = phi [^b16, i32 %176] [^while.body, i32 %11];
    i32 %22 = phi [^b16, i32 %177] [^while.body, i32 %13];
    i32 %23 = phi [^b16, i32 %178] [^while.body, i32 %12];
    i32* %24 = phi [^b16, i32* %132] [^while.body, i32* %10];
    i32* %25 = phi [^b16, i32* %133] [^while.body, i32* %3];
    i32 %26 = phi [^b16, i32 %179] [^while.body, i32 %18];
    store i32* %j with i32 0;
    ubr ^while.body2;
^while.body2:
    i32 %27 = phi [^b14, i32 %180] [^while.body1, i32 0];
    i32 %28 = phi [^b14, i32 %175] [^while.body1, i32 %20];
    i32 %29 = phi [^b14, i32 %176] [^while.body1, i32 %21];
    i32 %30 = phi [^b14, i32 %177] [^while.body1, i32 %22];
    i32 %31 = phi [^b14, i32 %178] [^while.body1, i32 %23];
    i32* %32 = phi [^b14, i32* %132] [^while.body1, i32* %24];
    i32* %33 = phi [^b14, i32* %133] [^while.body1, i32* %25];
    i32 %34 = phi [^b14, i32 %179] [^while.body1, i32 %26];
    i32 %35 = sdiv i32 %29, i32 2;
    i32 %36 = sub i32 %28, i32 %35;
    ubr ^while.body3;
^while.body3:
    i32 %37 = phi [^b11, i32 %145] [^while.body2, i32 %36];
    i32 %38 = phi [^b11, i32 %127] [^while.body2, i32 %27];
    i32 %39 = phi [^b11, i32 %128] [^while.body2, i32 %28];
    i32 %40 = phi [^b11, i32 %129] [^while.body2, i32 %29];
    i32 %41 = phi [^b11, i32 %130] [^while.body2, i32 %30];
    i32 %42 = phi [^b11, i32 %131] [^while.body2, i32 %31];
    i32* %43 = phi [^b11, i32* %132] [^while.body2, i32* %32];
    i32* %44 = phi [^b11, i32* %133] [^while.body2, i32* %33];
    i32 %45 = phi [^b11, i32 %134] [^while.body2, i32 %34];
    i32 %46 = phi [^b11, i32 %135] [^while.body2, i32 0];
    i32 %47 = sdiv i32 %40, i32 2;
    i32 %48 = sub i32 %38, i32 %47;
    ubr ^while.body4;
^while.body4:
    i32 %49 = phi [^while.body8, i32 %126] [^while.body3, i32 %37];
    i32 %50 = phi [^while.body8, i32 %127] [^while.body3, i32 %38];
    i32 %51 = phi [^while.body8, i32 %128] [^while.body3, i32 %39];
    i32 %52 = phi [^while.body8, i32 %129] [^while.body3, i32 %40];
    i32 %53 = phi [^while.body8, i32 %130] [^while.body3, i32 %41];
    i32 %54 = phi [^while.body8, i32 %131] [^while.body3, i32 %42];
    i32* %55 = phi [^while.body8, i32* %132] [^while.body3, i32* %43];
    i32* %56 = phi [^while.body8, i32* %133] [^while.body3, i32* %44];
    i32 %57 = phi [^while.body8, i32 %134] [^while.body3, i32 %45];
    i32 %58 = phi [^while.body3, i32 %41] [^while.body8, i32 %58];
    i32 %59 = phi [^while.body3, i32 %42] [^while.body8, i32 %59];
    i32* %60 = phi [^while.body3, i32* %44] [^while.body8, i32* %60];
    i32 %61 = phi [^while.body3, i32 %46] [^while.body8, i32 %135];
    i32 %62 = phi [^while.body3, i32 %37] [^while.body8, i32 %62];
    i32 %63 = phi [^while.body3, i32 %38] [^while.body8, i32 %63];
    i32 %64 = phi [^while.body3, i32 %40] [^while.body8, i32 %64];
    i32 %65 = phi [^while.body3, i32 %45] [^while.body8, i32 %65];
    i32 %66 = phi [^while.body3, i32 %48] [^while.body8, i32 %136];
    i1 %67 = scmp lt i32 %62, i32 0;
    cbr i1 %67(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %68 = scmp lt i32 %66, i32 0;
    ubr ^b2;
^b2:
    i1 %69 = phi [^while.body4, i1 true] [^b1, i1 %68];
    cbr i1 %69(prob = 0.5), ^b4, ^b3;
^b3:
    i1 %70 = scmp ge i32 %62, i32 %59;
    ubr ^b4;
^b4:
    i1 %71 = phi [^b2, i1 true] [^b3, i1 %70];
    cbr i1 %71(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %72 = scmp ge i32 %66, i32 %58;
    ubr ^b6;
^b6:
    i1 %73 = phi [^b5, i1 %72] [^b4, i1 true];
    cbr i1 %73(prob = 0.5), ^while.body5, ^b7;
^b7:
    i32 %74 = mul i32 %58, i32 %62;
    i32 %75 = add i32 %66, i32 %74;
    i32* %76 = getelementptr &(i32* %60)[i32 %75];
    i32 %77 = load i32* %76;
    ubr ^while.body5;
^while.body5:
    i32 %78 = phi [^b6, i32 0] [^b7, i32 %77];
    i1 %79 = scmp eq i32 %65, i32 0;
    cbr i1 %79(prob = 0.5), ^if.then, ^b8;
^if.then:
    i32 %80 = add i32 %61, i32 %78;
    ubr ^while.header1;
^b8:
    i1 %81 = scmp eq i32 %65, i32 1;
    cbr i1 %81(prob = 0.5), ^while.header2, ^b9;
^while.header1:
    i32 %82 = phi [^while.body6, i32 %108] [^if.then, i32 %80];
    i32 %83 = phi [^while.body6, i32 %83] [^if.then, i32 %49];
    i32 %84 = phi [^while.body6, i32 %84] [^if.then, i32 %50];
    i32 %85 = phi [^while.body6, i32 %85] [^if.then, i32 %51];
    i32 %86 = phi [^while.body6, i32 %86] [^if.then, i32 %52];
    i32 %87 = phi [^while.body6, i32 %87] [^if.then, i32 %53];
    i32 %88 = phi [^while.body6, i32 %88] [^if.then, i32 %54];
    i32* %89 = phi [^while.body6, i32* %89] [^if.then, i32* %55];
    i32* %90 = phi [^while.body6, i32* %90] [^if.then, i32* %56];
    i32 %91 = phi [^while.body6, i32 %91] [^if.then, i32 %57];
    i1 %92 = scmp gt i32 %82, i32 1073741824;
    cbr i1 %92(prob = 0.97), ^while.body6, ^while.header3;
^while.header2:
    i32 %93 = phi [^b8, i32 %61] [^b13, i32 %93];
    i32 %94 = phi [^b8, i32 %78] [^b13, i32 %94];
    i32 %95 = phi [^b8, i32 0] [^b13, i32 %164];
    i32 %96 = phi [^b8, i32 1] [^b13, i32 %165];
    i32 %97 = phi [^b8, i32 %49] [^b13, i32 %97];
    i32 %98 = phi [^b8, i32 %50] [^b13, i32 %98];
    i32 %99 = phi [^b8, i32 %51] [^b13, i32 %99];
    i32 %100 = phi [^b8, i32 %52] [^b13, i32 %100];
    i32 %101 = phi [^b8, i32 %53] [^b13, i32 %101];
    i32 %102 = phi [^b8, i32 %54] [^b13, i32 %102];
    i32* %103 = phi [^b8, i32* %55] [^b13, i32* %103];
    i32* %104 = phi [^b8, i32* %56] [^b13, i32* %104];
    i32 %105 = phi [^b8, i32 %57] [^b13, i32 %105];
    i1 %106 = scmp lt i32 %96, i32 1073741824;
    cbr i1 %106(prob = 0.97), ^while.body7, ^while.body8;
^b9:
    i1 %107 = scmp eq i32 %65, i32 2;
    cbr i1 %107(prob = 0.5), ^if.then1, ^b10;
^while.body6:
    i32 %108 = add i32 %82, i32 -1073741824;
    ubr ^while.header1;
^while.header3:
    i32 %109 = phi [^while.header1, i32 %82] [^while.body9, i32 %141];
    i32 %110 = phi [^while.header1, i32 %83] [^while.body9, i32 %110];
    i32 %111 = phi [^while.header1, i32 %84] [^while.body9, i32 %111];
    i32 %112 = phi [^while.header1, i32 %85] [^while.body9, i32 %112];
    i32 %113 = phi [^while.header1, i32 %86] [^while.body9, i32 %113];
    i32 %114 = phi [^while.header1, i32 %87] [^while.body9, i32 %114];
    i32 %115 = phi [^while.header1, i32 %88] [^while.body9, i32 %115];
    i32* %116 = phi [^while.header1, i32* %89] [^while.body9, i32* %116];
    i32* %117 = phi [^while.header1, i32* %90] [^while.body9, i32* %117];
    i32 %118 = phi [^while.header1, i32 %91] [^while.body9, i32 %118];
    i1 %119 = scmp lt i32 %109, i32 0;
    cbr i1 %119(prob = 0.97), ^while.body9, ^while.body8;
^while.body7:
    i32 %120 = sdiv i32 %93, i32 %96;
    i32 %121 = srem i32 %120, i32 2;
    i32 %122 = sdiv i32 %94, i32 %96;
    i32 %123 = srem i32 %122, i32 2;
    i1 %124 = scmp eq i32 %121, i32 %123;
    cbr i1 %124(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i1 %125 = scmp gt i32 %61, i32 %78;
    cbr i1 %125(prob = 0.5), ^while.body8, ^if.else1;
^while.body8:
    i32 %126 = phi [^while.header5, i32 %189] [^while.header4, i32 %153] [^while.header3, i32 %110] [^while.header2, i32 %97] [^b12, i32 %49] [^if.else1, i32 %49] [^if.then1, i32 %49];
    i32 %127 = phi [^while.header5, i32 %190] [^while.header4, i32 %154] [^while.header3, i32 %111] [^while.header2, i32 %98] [^b12, i32 %50] [^if.else1, i32 %50] [^if.then1, i32 %50];
    i32 %128 = phi [^while.header5, i32 %191] [^while.header4, i32 %155] [^while.header3, i32 %112] [^while.header2, i32 %99] [^b12, i32 %51] [^if.else1, i32 %51] [^if.then1, i32 %51];
    i32 %129 = phi [^while.header5, i32 %192] [^while.header4, i32 %156] [^while.header3, i32 %113] [^while.header2, i32 %100] [^b12, i32 %52] [^if.else1, i32 %52] [^if.then1, i32 %52];
    i32 %130 = phi [^while.header5, i32 %193] [^while.header4, i32 %157] [^while.header3, i32 %114] [^while.header2, i32 %101] [^b12, i32 %53] [^if.else1, i32 %53] [^if.then1, i32 %53];
    i32 %131 = phi [^while.header5, i32 %194] [^while.header4, i32 %158] [^while.header3, i32 %115] [^while.header2, i32 %102] [^b12, i32 %54] [^if.else1, i32 %54] [^if.then1, i32 %54];
    i32* %132 = phi [^while.header5, i32* %195] [^while.header4, i32* %159] [^while.header3, i32* %116] [^while.header2, i32* %103] [^b12, i32* %55] [^if.else1, i32* %55] [^if.then1, i32* %55];
    i32* %133 = phi [^while.header5, i32* %196] [^while.header4, i32* %160] [^while.header3, i32* %117] [^while.header2, i32* %104] [^b12, i32* %56] [^if.else1, i32* %56] [^if.then1, i32* %56];
    i32 %134 = phi [^while.header5, i32 %197] [^while.header4, i32 %161] [^while.header3, i32 %118] [^while.header2, i32 %105] [^b12, i32 %57] [^if.else1, i32 %57] [^if.then1, i32 %57];
    i32 %135 = phi [^while.header5, i32 %187] [^while.header4, i32 %151] [^while.header3, i32 %109] [^while.header2, i32 %95] [^b12, i32 0] [^if.else1, i32 %78] [^if.then1, i32 %61];
    i32 %136 = add i32 %66, i32 1;
    i32 %137 = sdiv i32 %64, i32 2;
    i32 %138 = add i32 %63, i32 %137;
    i1 %139 = scmp ge i32 %136, i32 %138;
    cbr i1 %139(prob = 0.5), ^b11, ^while.body4;
^b10:
    i1 %140 = scmp eq i32 %65, i32 3;
    cbr i1 %140(prob = 0.5), ^while.header4, ^b12;
^while.body9:
    i32 %141 = add i32 %109, i32 1073741824;
    ubr ^while.header3;
^if.then2:
    i32 %142 = mul i32 %95, i32 2;
    ubr ^b13;
^if.else:
    i32 %143 = mul i32 %95, i32 2;
    i32 %144 = add i32 %143, i32 1;
    ubr ^b13;
^if.else1:
    ubr ^while.body8;
^b11:
    i32 %145 = add i32 %126, i32 1;
    i32 %146 = sdiv i32 %129, i32 2;
    i32 %147 = add i32 %146, i32 %128;
    i1 %148 = scmp ge i32 %145, i32 %147;
    cbr i1 %148(prob = 0.5), ^b14, ^while.body3;
^while.header4:
    i32 %149 = phi [^b10, i32 %61] [^b20, i32 %149];
    i32 %150 = phi [^b10, i32 %78] [^b20, i32 %150];
    i32 %151 = phi [^b10, i32 0] [^b20, i32 %216];
    i32 %152 = phi [^b10, i32 1] [^b20, i32 %217];
    i32 %153 = phi [^b10, i32 %49] [^b20, i32 %153];
    i32 %154 = phi [^b10, i32 %50] [^b20, i32 %154];
    i32 %155 = phi [^b10, i32 %51] [^b20, i32 %155];
    i32 %156 = phi [^b10, i32 %52] [^b20, i32 %156];
    i32 %157 = phi [^b10, i32 %53] [^b20, i32 %157];
    i32 %158 = phi [^b10, i32 %54] [^b20, i32 %158];
    i32* %159 = phi [^b10, i32* %55] [^b20, i32* %159];
    i32* %160 = phi [^b10, i32* %56] [^b20, i32* %160];
    i32 %161 = phi [^b10, i32 %57] [^b20, i32 %161];
    i1 %162 = scmp lt i32 %152, i32 1073741824;
    cbr i1 %162(prob = 0.97), ^while.body10, ^while.body8;
^b12:
    i1 %163 = scmp eq i32 %65, i32 4;
    cbr i1 %163(prob = 0.5), ^while.header5, ^while.body8;
^b13:
    i32 %164 = phi [^if.else, i32 %144] [^if.then2, i32 %142];
    i32 %165 = mul i32 %96, i32 2;
    ubr ^while.header2;
^b14:
    i32 %166 = mul i32 %130, i32 %128;
    i32 %167 = add i32 %166, i32 %127;
    i32* %168 = getelementptr &(i32* %132)[i32 %167];
    store i32* %168 with i32 %135;
    i32 %169 = load i32* %c1;
    i32 %170 = load i32* %n2;
    i32 %171 = load i32* %m1;
    i32 %172 = load i32* %task;
    i32 %173 = load i32* %i2;
    i32 %174 = load i32* %j;
    i32 %175 = load i32* %i1;
    i32 %176 = load i32* %c;
    i32 %177 = load i32* %m;
    i32 %178 = load i32* %n1;
    i32 %179 = load i32* %kernelid;
    i32 %180 = add i32 %174, i32 1;
    store i32* %j with i32 %180;
    i1 %181 = scmp ge i32 %180, i32 %177;
    cbr i1 %181(prob = 0.5), ^b16, ^while.body2;
^while.body10:
    i32 %182 = sdiv i32 %149, i32 %152;
    i32 %183 = srem i32 %182, i32 2;
    i1 %184 = scmp eq i32 %183, i32 1;
    cbr i1 %184(prob = 0.5), ^b17, ^b15;
^while.header5:
    i32 %185 = phi [^b12, i32 %61] [^b21, i32 %185];
    i32 %186 = phi [^b12, i32 %78] [^b21, i32 %186];
    i32 %187 = phi [^b12, i32 0] [^b21, i32 %243];
    i32 %188 = phi [^b12, i32 1] [^b21, i32 %244];
    i32 %189 = phi [^b12, i32 %49] [^b21, i32 %189];
    i32 %190 = phi [^b12, i32 %50] [^b21, i32 %190];
    i32 %191 = phi [^b12, i32 %51] [^b21, i32 %191];
    i32 %192 = phi [^b12, i32 %52] [^b21, i32 %192];
    i32 %193 = phi [^b12, i32 %53] [^b21, i32 %193];
    i32 %194 = phi [^b12, i32 %54] [^b21, i32 %194];
    i32* %195 = phi [^b12, i32* %55] [^b21, i32* %195];
    i32* %196 = phi [^b12, i32* %56] [^b21, i32* %196];
    i32 %197 = phi [^b12, i32 %57] [^b21, i32 %197];
    i1 %198 = scmp lt i32 %188, i32 1073741824;
    cbr i1 %198(prob = 0.97), ^while.body11, ^while.body8;
^b15:
    i32 %199 = sdiv i32 %150, i32 %152;
    i32 %200 = srem i32 %199, i32 2;
    i1 %201 = scmp eq i32 %200, i32 1;
    ubr ^b17;
^b16:
    i32 %202 = add i32 %175, i32 1;
    store i32* %i1 with i32 %202;
    i1 %203 = scmp ge i32 %202, i32 %178;
    cbr i1 %203(prob = 0.5), ^while.body12, ^while.body1;
^b17:
    i1 %204 = phi [^b15, i1 %201] [^while.body10, i1 true];
    cbr i1 %204(prob = 0.5), ^if.then3, ^if.else2;
^while.body11:
    i32 %205 = sdiv i32 %185, i32 %188;
    i32 %206 = srem i32 %205, i32 2;
    i1 %207 = scmp eq i32 %206, i32 1;
    cbr i1 %207(prob = 0.5), ^b18, ^b19;
^while.body12:
    i32 %208 = mul i32 %171, i32 %170;
    store i32* %n with i32 %208;
    store i32* %i with i32 0;
    ubr ^while.header6;
^if.then3:
    i32 %209 = mul i32 %151, i32 2;
    i32 %210 = add i32 %209, i32 1;
    ubr ^b20;
^if.else2:
    i32 %211 = mul i32 %151, i32 2;
    ubr ^b20;
^b18:
    i32 %212 = sdiv i32 %186, i32 %188;
    i32 %213 = srem i32 %212, i32 2;
    i1 %214 = scmp eq i32 %213, i32 1;
    ubr ^b19;
^b19:
    i1 %215 = phi [^b18, i1 %214] [^while.body11, i1 false];
    cbr i1 %215(prob = 0.5), ^if.then4, ^if.else3;
^b20:
    i32 %216 = phi [^if.else2, i32 %211] [^if.then3, i32 %210];
    i32 %217 = mul i32 %152, i32 2;
    ubr ^while.header4;
^while.header6:
    i32 %218 = phi [^while.body13, i32 %234] [^while.body12, i32 %169];
    i32 %219 = phi [^while.body13, i32 %235] [^while.body12, i32 %170];
    i32 %220 = phi [^while.body13, i32 %236] [^while.body12, i32 %171];
    i32 %221 = phi [^while.body13, i32 %237] [^while.body12, i32 %172];
    i32 %222 = phi [^while.body13, i32 %238] [^while.body12, i32 %173];
    i32 %223 = phi [^while.body13, i32 %241] [^while.body12, i32 0];
    i32* %224 = phi [^while.body13, i32* %224] [^while.body12, i32* %10];
    i32* %225 = phi [^while.body13, i32* %225] [^while.body12, i32* %3];
    i32 %226 = phi [^while.body12, i32 %208] [^while.body13, i32 %240];
    i1 %227 = scmp lt i32 %223, i32 %226;
    cbr i1 %227(prob = 0.97), ^while.body13, ^while.body14;
^if.then4:
    i32 %228 = mul i32 %187, i32 2;
    i32 %229 = add i32 %228, i32 1;
    ubr ^b21;
^if.else3:
    i32 %230 = mul i32 %187, i32 2;
    ubr ^b21;
^while.body13:
    i32* %231 = getelementptr &(i32* %225)[i32 %223];
    i32* %232 = getelementptr &(i32* %224)[i32 %223];
    i32 %233 = load i32* %232;
    store i32* %231 with i32 %233;
    i32 %234 = load i32* %c1;
    i32 %235 = load i32* %n2;
    i32 %236 = load i32* %m1;
    i32 %237 = load i32* %task;
    i32 %238 = load i32* %i2;
    i32 %239 = load i32* %i;
    i32 %240 = load i32* %n;
    i32 %241 = add i32 %239, i32 1;
    store i32* %i with i32 %241;
    ubr ^while.header6;
^while.body14:
    i32 %242 = add i32 %222, i32 1;
    store i32* %i2 with i32 %242;
    ubr ^while.header;
^b21:
    i32 %243 = phi [^if.else3, i32 %230] [^if.then4, i32 %229];
    i32 %244 = mul i32 %188, i32 2;
    ubr ^while.header5;
}
