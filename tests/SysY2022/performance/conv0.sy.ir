internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 109);
    i32 %9 = mul i32 %1, i32 %2;
    i32 %10 = add i32 %9, i32 -4;
    i1 %11 = icmp sgt i32 %10, i32 16;
    i1 %12 = icmp sgt i32 %9, i32 0;
    i1 %13 = icmp sgt i32 %9, i32 4;
    i32 %14 = add i32 %9, i32 -20;
    i32 %15 = sdiv i32 %0, i32 2;
    [10000000 * i32]* %16 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %17 = getelementptr &([10000000 * i32]* %16)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %18 = phi [^entry, i32 0] [^while.body11, i32 %111];
    i32* %19 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = icmp eq i32 %20, i32 0;
    i1 %22 = icmp eq i32 %20, i32 1;
    i1 %23 = icmp eq i32 %20, i32 2;
    i1 %24 = icmp eq i32 %20, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 0] [^b11, i32 %103];
    i32 %26 = sub i32 %25, i32 %15;
    i32 %27 = add i32 %15, i32 %25;
    i32 %28 = mul i32 %2, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %29 = phi [^while.body1, i32 0] [^b8, i32 %87];
    i32 %30 = sub i32 %29, i32 %15;
    i32 %31 = add i32 %15, i32 %29;
    ubr ^while.body3;
  ^while.body3:
    i32 %32 = phi [^while.body2, i32 %26] [^b6, i32 %75];
    i32 %33 = phi [^while.body2, i32 0] [^b6, i32 %72];
    i1 %34 = icmp sle i32 %1, i32 %32;
    ubr ^while.body4;
  ^while.body4:
    i32 %35 = phi [^while.body3, i32 %30] [^b4, i32 %73];
    i32 %36 = phi [^while.body3, i32 %33] [^b4, i32 %72];
    i32 %37 = or i32 %32, i32 %35;
    i32 %38 = lshr i32 %37, i32 31;
    i1 %39 = ztrunc i32 %38 to i1;
    i1 %40 = or i1 %34, i1 %39;
    i1 %41 = icmp sle i32 %2, i32 %35;
    i1 %42 = or i1 %40, i1 %41;
    cbr i1 %42(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %43 = mul i32 %2, i32 %32;
    i32 %44 = add i32 %35, i32 %43;
    i32* %45 = getelementptr &(i32* %4)[i32 %44];
    i32 %46 = load i32* %45;
    ubr ^b1;
  ^b1:
    i32 %47 = phi [^while.body4, i32 0] [^b, i32 %46];
    cbr i1 %21(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %48 = add i32 %36, i32 %47;
    i1 %49 = icmp sgt i32 %48, i32 1073741824;
    cbr i1 %49(prob = 0.984615), ^while.body5, ^while.header;
  ^b2:
    cbr i1 %22(prob = 0.5), ^while.body6, ^b3;
  ^while.body5:
    i32 %50 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i32 %51 = add i32 %50, i32 -1073741824;
    i1 %52 = icmp sgt i32 %51, i32 1073741824;
    cbr i1 %52(prob = 0.984615), ^while.body5, ^while.header;
  ^while.body6:
    i32 %53 = phi [^b2, i32 1] [^while.body6, i32 %64];
    i32 %54 = phi [^b2, i32 0] [^while.body6, i32 %63];
    i32 %55 = sdiv i32 %36, i32 %53;
    i32 %56 = srem i32 %55, i32 2;
    i32 %57 = sdiv i32 %47, i32 %53;
    i32 %58 = srem i32 %57, i32 2;
    i1 %59 = icmp eq i32 %56, i32 %58;
    i32 %60 = zext i1 %59 to i32;
    i32 %61 = mul i32 %54, i32 2;
    i32 %62 = add i32 %61, i32 1;
    i32 %63 = sub i32 %62, i32 %60;
    i32 %64 = mul i32 %53, i32 2;
    i1 %65 = icmp slt i32 %64, i32 1073741824;
    cbr i1 %65(prob = 0.984615), ^while.body6, ^b4;
  ^while.header:
    i32 %66 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i1 %67 = icmp slt i32 %66, i32 0;
    cbr i1 %67(prob = 0.984615), ^while.body7, ^b4;
  ^b3:
    cbr i1 %23(prob = 0.5), ^if.then1, ^b5;
  ^if.then1:
    i32 %68 = smax i32 %36, i32 %47;
    ubr ^b4;
  ^while.body7:
    i32 %69 = phi [^while.header, i32 %66] [^while.body7, i32 %70];
    i32 %70 = add i32 %69, i32 1073741824;
    i1 %71 = icmp slt i32 %70, i32 0;
    cbr i1 %71(prob = 0.984615), ^while.body7, ^b4;
  ^b4:
    i32 %72 = phi [^while.body6, i32 %63] [^while.header, i32 %66] [^if.then1, i32 %68] [^while.body7, i32 %70] [^b7, i32 0] [^b12, i32 %105] [^b13, i32 %108];
    i32 %73 = add i32 %35, i32 1;
    i1 %74 = icmp sle i32 %31, i32 %73;
    cbr i1 %74(prob = 0.5), ^b6, ^while.body4;
  ^b5:
    cbr i1 %24(prob = 0.5), ^while.body8, ^b7;
  ^b6:
    i32 %75 = add i32 %32, i32 1;
    i1 %76 = icmp sle i32 %27, i32 %75;
    cbr i1 %76(prob = 0.5), ^b8, ^while.body3;
  ^while.body8:
    i32 %77 = phi [^b5, i32 1] [^b12, i32 %106];
    i32 %78 = phi [^b5, i32 0] [^b12, i32 %105];
    i32 %79 = sdiv i32 %36, i32 %77;
    i32 %80 = and i32 %79, i32 -2147483647;
    i1 %81 = icmp eq i32 %80, i32 1;
    i32 %82 = mul i32 %78, i32 2;
    cbr i1 %81(prob = 0.5), ^if.then2, ^b9;
  ^b7:
    i1 %83 = icmp eq i32 %20, i32 4;
    cbr i1 %83(prob = 0.5), ^while.body9, ^b4;
  ^if.then2:
    i32 %84 = add i32 %82, i32 1;
    ubr ^b12;
  ^b8:
    i32 %85 = add i32 %28, i32 %29;
    i32* %86 = getelementptr &(i32* %17)[i32 %85];
    store i32* %86 with i32 %72;
    i32 %87 = add i32 %29, i32 1;
    i1 %88 = icmp sle i32 %2, i32 %87;
    cbr i1 %88(prob = 0.5), ^b11, ^while.body2;
  ^b9:
    i32 %89 = sdiv i32 %47, i32 %77;
    i32 %90 = and i32 %89, i32 -2147483647;
    i1 %91 = icmp eq i32 %90, i32 1;
    cbr i1 %91(prob = 0.5), ^if.then2, ^b12;
  ^while.body9:
    i32 %92 = phi [^b7, i32 1] [^b13, i32 %109];
    i32 %93 = phi [^b7, i32 0] [^b13, i32 %108];
    i32 %94 = sdiv i32 %36, i32 %92;
    i32 %95 = and i32 %94, i32 -2147483647;
    i1 %96 = icmp eq i32 %95, i32 1;
    i32 %97 = mul i32 %93, i32 2;
    cbr i1 %96(prob = 0.5), ^b10, ^b13;
  ^b10:
    i32 %98 = sdiv i32 %47, i32 %92;
    i32 %99 = and i32 %98, i32 -2147483647;
    i1 %100 = icmp eq i32 %99, i32 1;
    i32 %101 = zext i1 %100 to i32;
    i32 %102 = add i32 %97, i32 %101;
    ubr ^b13;
  ^b11:
    i32 %103 = add i32 %25, i32 1;
    i1 %104 = icmp sle i32 %1, i32 %103;
    cbr i1 %104(prob = 0.5), ^while.body10, ^while.body1;
  ^b12:
    i32 %105 = phi [^if.then2, i32 %84] [^b9, i32 %82];
    i32 %106 = mul i32 %77, i32 2;
    i1 %107 = icmp slt i32 %106, i32 1073741824;
    cbr i1 %107(prob = 0.984615), ^while.body8, ^b4;
  ^b13:
    i32 %108 = phi [^while.body9, i32 %97] [^b10, i32 %102];
    i32 %109 = mul i32 %92, i32 2;
    i1 %110 = icmp slt i32 %109, i32 1073741824;
    cbr i1 %110(prob = 0.984615), ^while.body9, ^b4;
  ^while.body10:
    cbr i1 %12(prob = 0.984615), ^super.header, ^while.body11;
  ^super.header:
    cbr i1 %13(prob = 0.941176), ^super.header1, ^while.body12;
  ^while.body11:
    i32 %111 = add i32 %18, i32 1;
    i1 %112 = icmp sgt i32 %8, i32 %111;
    cbr i1 %112(prob = 0.984615), ^while.body, ^b14;
  ^super.header1:
    cbr i1 %11(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body12 {scalar}:
    i32 %113 = phi [^super.header, i32 0] [^while.body12, i32 %117] [^while.body14, i32 %183];
    i32* %114 = getelementptr &(i32* %17)[i32 %113];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %4)[i32 %113];
    store i32* %116 with i32 %115;
    i32 %117 = add i32 %113, i32 1;
    i1 %118 = icmp sgt i32 %9, i32 %117;
    cbr i1 %118(prob = 0.75), ^while.body12, ^while.body11;
  ^b14:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %4);
    ret i32 0;
  ^while.body13:
    i32 %119 = phi [^super.header1, i32 0] [^while.body13, i32 %168];
    i32* %120 = getelementptr &(i32* %17)[i32 %119];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %4)[i32 %119];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %120)[i64 1];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %122)[i64 1];
    store i32* %125 with i32 %124;
    i32* %126 = getelementptr &(i32* %120)[i64 2];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %122)[i64 2];
    store i32* %128 with i32 %127;
    i32* %129 = getelementptr &(i32* %120)[i64 3];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %122)[i64 3];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %120)[i64 4];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %122)[i64 4];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %120)[i64 5];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %122)[i64 5];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %120)[i64 6];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %122)[i64 6];
    store i32* %140 with i32 %139;
    i32* %141 = getelementptr &(i32* %120)[i64 7];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %122)[i64 7];
    store i32* %143 with i32 %142;
    i32* %144 = getelementptr &(i32* %120)[i64 8];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &(i32* %122)[i64 8];
    store i32* %146 with i32 %145;
    i32* %147 = getelementptr &(i32* %120)[i64 9];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %122)[i64 9];
    store i32* %149 with i32 %148;
    i32* %150 = getelementptr &(i32* %120)[i64 10];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &(i32* %122)[i64 10];
    store i32* %152 with i32 %151;
    i32* %153 = getelementptr &(i32* %120)[i64 11];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %122)[i64 11];
    store i32* %155 with i32 %154;
    i32* %156 = getelementptr &(i32* %120)[i64 12];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %122)[i64 12];
    store i32* %158 with i32 %157;
    i32* %159 = getelementptr &(i32* %120)[i64 13];
    i32 %160 = load i32* %159;
    i32* %161 = getelementptr &(i32* %122)[i64 13];
    store i32* %161 with i32 %160;
    i32* %162 = getelementptr &(i32* %120)[i64 14];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %122)[i64 14];
    store i32* %164 with i32 %163;
    i32* %165 = getelementptr &(i32* %120)[i64 15];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %122)[i64 15];
    store i32* %167 with i32 %166;
    i32 %168 = add i32 %119, i32 16;
    i1 %169 = icmp sgt i32 %14, i32 %168;
    cbr i1 %169(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %170 = phi [^super.header1, i32 0] [^while.body13, i32 %168] [^while.body14, i32 %183];
    i32* %171 = getelementptr &(i32* %17)[i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %4)[i32 %170];
    store i32* %173 with i32 %172;
    i32* %174 = getelementptr &(i32* %171)[i64 1];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %173)[i64 1];
    store i32* %176 with i32 %175;
    i32* %177 = getelementptr &(i32* %171)[i64 2];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %173)[i64 2];
    store i32* %179 with i32 %178;
    i32* %180 = getelementptr &(i32* %171)[i64 3];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &(i32* %173)[i64 3];
    store i32* %182 with i32 %181;
    i32 %183 = add i32 %170, i32 4;
    i1 %184 = icmp sgt i32 %10, i32 %183;
    cbr i1 %184(prob = 0.75), ^while.body14, ^while.body12;
}
