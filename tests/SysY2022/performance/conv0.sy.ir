internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 109);
    i32 %9 = mul i32 %1, i32 %2;
    i32 %10 = add i32 %9, i32 -4;
    i1 %11 = icmp sgt i32 %10, i32 16;
    i1 %12 = icmp sgt i32 %9, i32 0;
    i1 %13 = icmp sgt i32 %9, i32 4;
    i32 %14 = add i32 %9, i32 -20;
    i32 %15 = sdiv i32 %0, i32 2;
    [10000000 * i32]* %16 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %17 = getelementptr &([10000000 * i32]* %16)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %18 = phi [^entry, i32 0] [^while.body11, i32 %112];
    i32* %19 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = icmp eq i32 %20, i32 0;
    i1 %22 = icmp eq i32 %20, i32 1;
    i1 %23 = icmp eq i32 %20, i32 2;
    i1 %24 = icmp eq i32 %20, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 0] [^b9, i32 %94];
    i32 %26 = sub i32 %25, i32 %15;
    i32 %27 = add i32 %15, i32 %25;
    i32 %28 = mul i32 %2, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %29 = phi [^while.body1, i32 0] [^b8, i32 %84];
    i32 %30 = sub i32 %29, i32 %15;
    i32 %31 = add i32 %15, i32 %29;
    ubr ^while.body3;
  ^while.body3:
    i32 %32 = phi [^while.body2, i32 %26] [^b6, i32 %76];
    i32 %33 = phi [^while.body2, i32 0] [^b6, i32 %73];
    i1 %34 = icmp sle i32 %1, i32 %32;
    ubr ^while.body4;
  ^while.body4:
    i32 %35 = phi [^while.body3, i32 %30] [^b4, i32 %74];
    i32 %36 = phi [^while.body3, i32 %33] [^b4, i32 %73];
    i32 %37 = or i32 %32, i32 %35;
    i32 %38 = lshr i32 %37, i32 31;
    i1 %39 = ztrunc i32 %38 to i1;
    i1 %40 = or i1 %34, i1 %39;
    i1 %41 = icmp sle i32 %2, i32 %35;
    i1 %42 = or i1 %40, i1 %41;
    cbr i1 %42(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %43 = mul i32 %2, i32 %32;
    i32 %44 = add i32 %35, i32 %43;
    i32* %45 = getelementptr &(i32* %4)[i32 %44];
    i32 %46 = load i32* %45;
    ubr ^b1;
  ^b1:
    i32 %47 = phi [^while.body4, i32 0] [^b, i32 %46];
    cbr i1 %21(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %48 = add i32 %36, i32 %47;
    i1 %49 = icmp sgt i32 %48, i32 1073741824;
    cbr i1 %49(prob = 0.984615), ^while.body5, ^66;
  ^b2:
    cbr i1 %22(prob = 0.5), ^while.body6, ^b3;
  ^while.body5:
    i32 %50 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i32 %51 = add i32 %50, i32 -1073741824;
    i1 %52 = icmp sgt i32 %51, i32 1073741824;
    cbr i1 %52(prob = 0.984615), ^while.body5, ^66;
  ^while.body6:
    i32 %53 = phi [^b2, i32 1] [^while.body6, i32 %64];
    i32 %54 = phi [^b2, i32 0] [^while.body6, i32 %63];
    i32 %55 = sdiv i32 %36, i32 %53;
    i32 %56 = srem i32 %55, i32 2;
    i32 %57 = sdiv i32 %47, i32 %53;
    i32 %58 = srem i32 %57, i32 2;
    i1 %59 = icmp eq i32 %56, i32 %58;
    i32 %60 = zext i1 %59 to i32;
    i32 %61 = mul i32 %54, i32 2;
    i32 %62 = add i32 %61, i32 1;
    i32 %63 = sub i32 %62, i32 %60;
    i32 %64 = mul i32 %53, i32 2;
    i1 %65 = icmp slt i32 %64, i32 1073741824;
    cbr i1 %65(prob = 0.984615), ^while.body6, ^b4;
  ^66:
    i32 %67 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i1 %68 = icmp slt i32 %67, i32 0;
    cbr i1 %68(prob = 0.984615), ^while.body7, ^b4;
  ^b3:
    cbr i1 %23(prob = 0.5), ^if.then1, ^b5;
  ^if.then1:
    i32 %69 = smax i32 %36, i32 %47;
    ubr ^b4;
  ^while.body7:
    i32 %70 = phi [^66, i32 %67] [^while.body7, i32 %71];
    i32 %71 = add i32 %70, i32 1073741824;
    i1 %72 = icmp slt i32 %71, i32 0;
    cbr i1 %72(prob = 0.984615), ^while.body7, ^b4;
  ^b4:
    i32 %73 = phi [^while.body6, i32 %63] [^66, i32 %67] [^if.then1, i32 %69] [^while.body7, i32 %71] [^while.header, i32 %78] [^b7, i32 0] [^while.header1, i32 %90];
    i32 %74 = add i32 %35, i32 1;
    i1 %75 = icmp sle i32 %31, i32 %74;
    cbr i1 %75(prob = 0.5), ^b6, ^while.body4;
  ^b5:
    cbr i1 %24(prob = 0.5), ^while.header, ^b7;
  ^b6:
    i32 %76 = add i32 %32, i32 1;
    i1 %77 = icmp sle i32 %27, i32 %76;
    cbr i1 %77(prob = 0.5), ^b8, ^while.body3;
  ^while.header:
    i32 %78 = phi [^b5, i32 0] [^b11, i32 %103];
    i32 %79 = phi [^b5, i32 1] [^b11, i32 %104];
    i1 %80 = icmp slt i32 %79, i32 1073741824;
    cbr i1 %80(prob = 0.984615), ^while.body8, ^b4;
  ^b7:
    i1 %81 = icmp eq i32 %20, i32 4;
    cbr i1 %81(prob = 0.5), ^while.header1, ^b4;
  ^b8:
    i32 %82 = add i32 %28, i32 %29;
    i32* %83 = getelementptr &(i32* %17)[i32 %82];
    store i32* %83 with i32 %73;
    i32 %84 = add i32 %29, i32 1;
    i1 %85 = icmp sle i32 %2, i32 %84;
    cbr i1 %85(prob = 0.5), ^b9, ^while.body2;
  ^while.body8:
    i32 %86 = sdiv i32 %36, i32 %79;
    i32 %87 = and i32 %86, i32 -2147483647;
    i1 %88 = icmp eq i32 %87, i32 1;
    i32 %89 = mul i32 %78, i32 2;
    cbr i1 %88(prob = 0.5), ^if.then2, ^b10;
  ^while.header1:
    i32 %90 = phi [^b7, i32 0] [^b13, i32 %110];
    i32 %91 = phi [^b7, i32 1] [^b13, i32 %111];
    i1 %92 = icmp slt i32 %91, i32 1073741824;
    cbr i1 %92(prob = 0.984615), ^while.body9, ^b4;
  ^if.then2:
    i32 %93 = add i32 %89, i32 1;
    ubr ^b11;
  ^b9:
    i32 %94 = add i32 %25, i32 1;
    i1 %95 = icmp sle i32 %1, i32 %94;
    cbr i1 %95(prob = 0.5), ^while.body10, ^while.body1;
  ^b10:
    i32 %96 = sdiv i32 %47, i32 %79;
    i32 %97 = and i32 %96, i32 -2147483647;
    i1 %98 = icmp eq i32 %97, i32 1;
    cbr i1 %98(prob = 0.5), ^if.then2, ^b11;
  ^while.body9:
    i32 %99 = sdiv i32 %36, i32 %91;
    i32 %100 = and i32 %99, i32 -2147483647;
    i1 %101 = icmp eq i32 %100, i32 1;
    i32 %102 = mul i32 %90, i32 2;
    cbr i1 %101(prob = 0.5), ^b12, ^b13;
  ^b11:
    i32 %103 = phi [^if.then2, i32 %93] [^b10, i32 %89];
    i32 %104 = mul i32 %79, i32 2;
    ubr ^while.header;
  ^b12:
    i32 %105 = sdiv i32 %47, i32 %91;
    i32 %106 = and i32 %105, i32 -2147483647;
    i1 %107 = icmp eq i32 %106, i32 1;
    i32 %108 = zext i1 %107 to i32;
    i32 %109 = add i32 %102, i32 %108;
    ubr ^b13;
  ^while.body10:
    cbr i1 %12(prob = 0.984615), ^super.header, ^while.body11;
  ^b13:
    i32 %110 = phi [^while.body9, i32 %102] [^b12, i32 %109];
    i32 %111 = mul i32 %91, i32 2;
    ubr ^while.header1;
  ^super.header:
    cbr i1 %13(prob = 0.941176), ^super.header1, ^while.body12;
  ^while.body11:
    i32 %112 = add i32 %18, i32 1;
    i1 %113 = icmp sgt i32 %8, i32 %112;
    cbr i1 %113(prob = 0.984615), ^while.body, ^b14;
  ^super.header1:
    cbr i1 %11(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body12 {scalar}:
    i32 %114 = phi [^super.header, i32 0] [^while.body12, i32 %118] [^while.body14, i32 %184];
    i32* %115 = getelementptr &(i32* %17)[i32 %114];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %4)[i32 %114];
    store i32* %117 with i32 %116;
    i32 %118 = add i32 %114, i32 1;
    i1 %119 = icmp sgt i32 %9, i32 %118;
    cbr i1 %119(prob = 0.75), ^while.body12, ^while.body11;
  ^b14:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %4);
    ret i32 0;
  ^while.body13:
    i32 %120 = phi [^super.header1, i32 0] [^while.body13, i32 %169];
    i32* %121 = getelementptr &(i32* %17)[i32 %120];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %4)[i32 %120];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %121)[i64 1];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %123)[i64 1];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %121)[i64 2];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %123)[i64 2];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %121)[i64 3];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %123)[i64 3];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %121)[i64 4];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %123)[i64 4];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %121)[i64 5];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %123)[i64 5];
    store i32* %138 with i32 %137;
    i32* %139 = getelementptr &(i32* %121)[i64 6];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %123)[i64 6];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %121)[i64 7];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %123)[i64 7];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %121)[i64 8];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %123)[i64 8];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %121)[i64 9];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %123)[i64 9];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %121)[i64 10];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %123)[i64 10];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %121)[i64 11];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %123)[i64 11];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %121)[i64 12];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %123)[i64 12];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %121)[i64 13];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %123)[i64 13];
    store i32* %162 with i32 %161;
    i32* %163 = getelementptr &(i32* %121)[i64 14];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %123)[i64 14];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &(i32* %121)[i64 15];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %123)[i64 15];
    store i32* %168 with i32 %167;
    i32 %169 = add i32 %120, i32 16;
    i1 %170 = icmp sgt i32 %14, i32 %169;
    cbr i1 %170(prob = 0.941176), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %171 = phi [^super.header1, i32 0] [^while.body13, i32 %169] [^while.body14, i32 %184];
    i32* %172 = getelementptr &(i32* %17)[i32 %171];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %4)[i32 %171];
    store i32* %174 with i32 %173;
    i32* %175 = getelementptr &(i32* %172)[i64 1];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %174)[i64 1];
    store i32* %177 with i32 %176;
    i32* %178 = getelementptr &(i32* %172)[i64 2];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %174)[i64 2];
    store i32* %180 with i32 %179;
    i32* %181 = getelementptr &(i32* %172)[i64 3];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %174)[i64 3];
    store i32* %183 with i32 %182;
    i32 %184 = add i32 %171, i32 4;
    i1 %185 = icmp sgt i32 %10, i32 %184;
    cbr i1 %185(prob = 0.75), ^while.body14, ^while.body12;
}
