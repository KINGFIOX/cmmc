internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = mul i32 %1, i32 %2;
    [10000000 * i32]* %4 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %5 = getelementptr &([10000000 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %8 = getelementptr &([10000 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    i1 %10 = icmp sgt i32 %9, i32 0;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %10(prob = 0.992248), ^prebody, ^b;
  ^prebody:
    i1 %11 = icmp sgt i32 %3, i32 8;
    i32 %12 = add i32 %3, i32 -8;
    i1 %13 = icmp sgt i32 %3, i32 0;
    i32 %14 = sdiv i32 %0, i32 2;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %5);
    ret i32 0;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body11, i32 %111];
    i32* %18 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 0;
    i1 %21 = icmp eq i32 %19, i32 1;
    i1 %22 = icmp eq i32 %19, i32 2;
    i1 %23 = icmp eq i32 %19, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %24 = phi [^while.body, i32 0] [^b10, i32 %93];
    i32 %25 = sub i32 %24, i32 %14;
    i32 %26 = add i32 %14, i32 %24;
    i32 %27 = mul i32 %2, i32 %24;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 0] [^b9, i32 %83];
    i32 %29 = sub i32 %28, i32 %14;
    i32 %30 = add i32 %14, i32 %28;
    ubr ^while.body3;
  ^while.body3:
    i32 %31 = phi [^while.body2, i32 %25] [^b7, i32 %75];
    i32 %32 = phi [^while.body2, i32 0] [^b7, i32 %72];
    i1 %33 = icmp sle i32 %1, i32 %31;
    ubr ^while.body4;
  ^while.body4:
    i32 %34 = phi [^while.body3, i32 %29] [^b5, i32 %73];
    i32 %35 = phi [^while.body3, i32 %32] [^b5, i32 %72];
    i32 %36 = or i32 %31, i32 %34;
    i32 %37 = lshr i32 %36, i32 31;
    i1 %38 = ztrunc i32 %37 to i1;
    i1 %39 = or i1 %33, i1 %38;
    i1 %40 = icmp sle i32 %2, i32 %34;
    i1 %41 = or i1 %39, i1 %40;
    cbr i1 %41(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %42 = mul i32 %2, i32 %31;
    i32 %43 = add i32 %34, i32 %42;
    i32* %44 = getelementptr &(i32* %5)[i32 %43];
    i32 %45 = load i32* %44;
    ubr ^b2;
  ^b2:
    i32 %46 = phi [^while.body4, i32 0] [^b1, i32 %45];
    cbr i1 %20(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %47 = add i32 %35, i32 %46;
    i1 %48 = icmp sgt i32 %47, i32 1073741824;
    cbr i1 %48(prob = 0.992248), ^while.body5, ^65;
  ^b3:
    cbr i1 %21(prob = 0.5), ^while.body6, ^b4;
  ^while.body5:
    i32 %49 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i32 %50 = add i32 %49, i32 -1073741824;
    i1 %51 = icmp sgt i32 %50, i32 1073741824;
    cbr i1 %51(prob = 0.992248), ^while.body5, ^65;
  ^while.body6:
    i32 %52 = phi [^b3, i32 1] [^while.body6, i32 %63];
    i32 %53 = phi [^b3, i32 0] [^while.body6, i32 %62];
    i32 %54 = sdiv i32 %35, i32 %52;
    i32 %55 = srem i32 %54, i32 2;
    i32 %56 = sdiv i32 %46, i32 %52;
    i32 %57 = srem i32 %56, i32 2;
    i1 %58 = icmp eq i32 %55, i32 %57;
    i32 %59 = zext i1 %58 to i32;
    i32 %60 = mul i32 %53, i32 2;
    i32 %61 = add i32 %60, i32 1;
    i32 %62 = sub i32 %61, i32 %59;
    i32 %63 = mul i32 %52, i32 2;
    i1 %64 = icmp slt i32 %63, i32 1073741824;
    cbr i1 %64(prob = 0.992248), ^while.body6, ^b5;
  ^65:
    i32 %66 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i1 %67 = icmp slt i32 %66, i32 0;
    cbr i1 %67(prob = 0.992248), ^while.body7, ^b5;
  ^b4:
    cbr i1 %22(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %68 = smax i32 %35, i32 %46;
    ubr ^b5;
  ^while.body7:
    i32 %69 = phi [^65, i32 %66] [^while.body7, i32 %70];
    i32 %70 = add i32 %69, i32 1073741824;
    i1 %71 = icmp slt i32 %70, i32 0;
    cbr i1 %71(prob = 0.992248), ^while.body7, ^b5;
  ^b5:
    i32 %72 = phi [^while.body6, i32 %62] [^65, i32 %66] [^if.then1, i32 %68] [^while.body7, i32 %70] [^while.header, i32 %77] [^b8, i32 0] [^while.header1, i32 %89];
    i32 %73 = add i32 %34, i32 1;
    i1 %74 = icmp sle i32 %30, i32 %73;
    cbr i1 %74(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %23(prob = 0.5), ^while.header, ^b8;
  ^b7:
    i32 %75 = add i32 %31, i32 1;
    i1 %76 = icmp sle i32 %26, i32 %75;
    cbr i1 %76(prob = 0.5), ^b9, ^while.body3;
  ^while.header:
    i32 %77 = phi [^b6, i32 0] [^b12, i32 %102];
    i32 %78 = phi [^b6, i32 1] [^b12, i32 %103];
    i1 %79 = icmp slt i32 %78, i32 1073741824;
    cbr i1 %79(prob = 0.992248), ^while.body8, ^b5;
  ^b8:
    i1 %80 = icmp eq i32 %19, i32 4;
    cbr i1 %80(prob = 0.5), ^while.header1, ^b5;
  ^b9:
    i32 %81 = add i32 %27, i32 %28;
    i32* %82 = getelementptr &(i32* %16)[i32 %81];
    store i32* %82 with i32 %72;
    i32 %83 = add i32 %28, i32 1;
    i1 %84 = icmp sle i32 %2, i32 %83;
    cbr i1 %84(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %85 = sdiv i32 %35, i32 %78;
    i32 %86 = and i32 %85, i32 -2147483647;
    i1 %87 = icmp eq i32 %86, i32 1;
    i32 %88 = mul i32 %77, i32 2;
    cbr i1 %87(prob = 0.5), ^if.then2, ^b11;
  ^while.header1:
    i32 %89 = phi [^b8, i32 0] [^b14, i32 %109];
    i32 %90 = phi [^b8, i32 1] [^b14, i32 %110];
    i1 %91 = icmp slt i32 %90, i32 1073741824;
    cbr i1 %91(prob = 0.992248), ^while.body9, ^b5;
  ^if.then2:
    i32 %92 = add i32 %88, i32 1;
    ubr ^b12;
  ^b10:
    i32 %93 = add i32 %24, i32 1;
    i1 %94 = icmp sle i32 %1, i32 %93;
    cbr i1 %94(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %95 = sdiv i32 %46, i32 %78;
    i32 %96 = and i32 %95, i32 -2147483647;
    i1 %97 = icmp eq i32 %96, i32 1;
    cbr i1 %97(prob = 0.5), ^if.then2, ^b12;
  ^while.body9:
    i32 %98 = sdiv i32 %35, i32 %90;
    i32 %99 = and i32 %98, i32 -2147483647;
    i1 %100 = icmp eq i32 %99, i32 1;
    i32 %101 = mul i32 %89, i32 2;
    cbr i1 %100(prob = 0.5), ^b13, ^b14;
  ^b12:
    i32 %102 = phi [^if.then2, i32 %92] [^b11, i32 %88];
    i32 %103 = mul i32 %78, i32 2;
    ubr ^while.header;
  ^b13:
    i32 %104 = sdiv i32 %46, i32 %90;
    i32 %105 = and i32 %104, i32 -2147483647;
    i1 %106 = icmp eq i32 %105, i32 1;
    i32 %107 = zext i1 %106 to i32;
    i32 %108 = add i32 %101, i32 %107;
    ubr ^b14;
  ^while.body10:
    cbr i1 %13(prob = 0.992248), ^super.header, ^while.body11;
  ^b14:
    i32 %109 = phi [^while.body9, i32 %101] [^b13, i32 %108];
    i32 %110 = mul i32 %90, i32 2;
    ubr ^while.header1;
  ^super.header:
    cbr i1 %11(prob = 0.941176), ^while.body12, ^while.body13;
  ^while.body11:
    i32 %111 = add i32 %17, i32 1;
    i1 %112 = icmp sgt i32 %9, i32 %111;
    cbr i1 %112(prob = 0.992248), ^while.body, ^b;
  ^while.body12:
    i32 %113 = phi [^super.header, i32 0] [^while.body12, i32 %138];
    i32* %114 = getelementptr &(i32* %16)[i32 %113];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %5)[i32 %113];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %114)[i64 1];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %116)[i64 1];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %114)[i64 2];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %116)[i64 2];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %114)[i64 3];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %116)[i64 3];
    store i32* %125 with i32 %124;
    i32* %126 = getelementptr &(i32* %114)[i64 4];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %116)[i64 4];
    store i32* %128 with i32 %127;
    i32* %129 = getelementptr &(i32* %114)[i64 5];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %116)[i64 5];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %114)[i64 6];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %116)[i64 6];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %114)[i64 7];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %116)[i64 7];
    store i32* %137 with i32 %136;
    i32 %138 = add i32 %113, i32 8;
    i1 %139 = icmp sgt i32 %12, i32 %138;
    cbr i1 %139(prob = 0.941176), ^while.body12, ^while.body13;
  ^while.body13 {scalar}:
    i32 %140 = phi [^super.header, i32 0] [^while.body12, i32 %138] [^while.body13, i32 %144];
    i32* %141 = getelementptr &(i32* %16)[i32 %140];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %5)[i32 %140];
    store i32* %143 with i32 %142;
    i32 %144 = add i32 %140, i32 1;
    i1 %145 = icmp sgt i32 %3, i32 %144;
    cbr i1 %145(prob = 0.875), ^while.body13, ^while.body11;
}
