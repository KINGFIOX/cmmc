internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -4;
    i32 %6 = mul i32 %0, i32 2;
    i32 %7 = mul i32 %0, i32 3;
    i32 %8 = mul i32 %0, i32 4;
    [2097152 * i32]* %9 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %10 = getelementptr &([2097152 * i32]* %9)[i64 0][i64 0];
    [2097152 * i32]* %11 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %12 = getelementptr &([2097152 * i32]* %11)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %13 = phi [^entry, i32 0] [^b2, i32 %64];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    cbr i1 %14(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    i32* %15 = getelementptr &([2097152 * i32]* %11)[i64 0][i32 %13];
    i32* %16 = getelementptr &(i32* %2)[i32 %13];
    cbr i1 %4(prob = 0.941176), ^prebody1, ^while.body;
  ^while.header1:
    i32 %17 = phi [^while.header, i32 0] [^b1, i32 %63];
    i1 %18 = icmp sgt i32 %0, i32 %17;
    i32* %19 = getelementptr &(i32* %12)[i32 %17];
    i32 %20 = mul i32 %0, i32 %17;
    cbr i1 %18(prob = 0.984615), ^while.header2, ^b;
  ^prebody1:
    i32* %21 = getelementptr &(i32* %15)[i32 %0];
    i32* %22 = getelementptr &(i32* %16)[i32 %0];
    i32* %23 = getelementptr &(i32* %15)[i32 %6];
    i32* %24 = getelementptr &(i32* %16)[i32 %6];
    i32* %25 = getelementptr &(i32* %15)[i32 %7];
    i32* %26 = getelementptr &(i32* %16)[i32 %7];
    ubr ^while.body1;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b7, i32 %89];
    i32 %28 = mul i32 %0, i32 %27;
    i32* %29 = getelementptr &([2097152 * i32]* %11)[i64 0][i32 %28];
    i32* %30 = getelementptr &(i32* %19)[i32 %28];
    i1 %31 = icmp sgt i32 %0, i32 %27;
    cbr i1 %31(prob = 0.984615), ^b3, ^b1;
  ^while.body {scalar}:
    i32 %32 = phi [^prebody, i32 0] [^while.body, i32 %41] [^while.body1, i32 %62];
    i32 %33 = phi [^prebody, i32 0] [^while.body, i32 %40] [^while.body1, i32 %61];
    i32 %34 = phi [^prebody, i32 0] [^while.body, i32 %38] [^while.body1, i32 %59];
    i32* %35 = getelementptr &(i32* %16)[i32 %32];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %15)[i32 %33];
    store i32* %37 with i32 %36;
    i32 %38 = add i32 %34, i32 1;
    i1 %39 = icmp sgt i32 %0, i32 %38;
    i32 %40 = add i32 %0, i32 %33;
    i32 %41 = add i32 %0, i32 %32;
    cbr i1 %39(prob = 0.75), ^while.body, ^b2;
  ^b:
    i32 %42 = mul i32 %0, i32 %0;
    i1 %43 = icmp neq i32 %0, i32 0;
    cbr i1 %43(prob = 0.984615), ^super.header, ^b4;
  ^while.body1:
    i32 %44 = phi [^prebody1, i32 0] [^while.body1, i32 %59];
    i32 %45 = phi [^prebody1, i32 0] [^while.body1, i32 %61];
    i32 %46 = phi [^prebody1, i32 0] [^while.body1, i32 %62];
    i32* %47 = getelementptr &(i32* %16)[i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %15)[i32 %45];
    store i32* %49 with i32 %48;
    i32* %50 = getelementptr &(i32* %22)[i32 %46];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %21)[i32 %45];
    store i32* %52 with i32 %51;
    i32* %53 = getelementptr &(i32* %24)[i32 %46];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %23)[i32 %45];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %26)[i32 %46];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %25)[i32 %45];
    store i32* %58 with i32 %57;
    i32 %59 = add i32 %44, i32 4;
    i1 %60 = icmp sgt i32 %5, i32 %59;
    i32 %61 = add i32 %8, i32 %45;
    i32 %62 = add i32 %8, i32 %46;
    cbr i1 %60(prob = 0.941176), ^while.body1, ^while.body;
  ^b1:
    i32 %63 = add i32 %17, i32 1;
    ubr ^while.header1;
  ^b2:
    i32 %64 = add i32 %13, i32 1;
    ubr ^while.header;
  ^b3:
    i32 %65 = phi [^while.header2, i32 0] [^b6, i32 %76];
    i32 %66 = load i32* %30;
    i1 %67 = icmp sgt i32 %66, i32 -1;
    cbr i1 %67(prob = 0.5), ^b5, ^b6;
  ^super.header:
    i1 %68 = icmp sgt i32 %42, i32 4;
    cbr i1 %68(prob = 0.941176), ^super.header1, ^while.body2;
  ^b4:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %42, i32* %10);
    ret i32 0;
  ^b5:
    i32* %69 = getelementptr &(i32* %12)[i32 %65];
    i32* %70 = getelementptr &(i32* %69)[i32 %20];
    i32 %71 = load i32* %70;
    i1 %72 = icmp sgt i32 %71, i32 -1;
    cbr i1 %72(prob = 0.5), ^if.then, ^b6;
  ^super.header1:
    i32 %73 = add i32 %42, i32 -4;
    i1 %74 = icmp sgt i32 %73, i32 16;
    i32 %75 = add i32 %42, i32 -20;
    cbr i1 %74(prob = 0.941176), ^while.body3, ^while.body4;
  ^b6:
    i32 %76 = add i32 %65, i32 1;
    i1 %77 = icmp sgt i32 %0, i32 %76;
    cbr i1 %77(prob = 0.984615), ^b3, ^b7;
  ^while.body2 {scalar}:
    i32 %78 = phi [^super.header, i32 0] [^while.body2, i32 %82] [^while.body4, i32 %154];
    i32* %79 = getelementptr &(i32* %12)[i32 %78];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %10)[i32 %78];
    store i32* %81 with i32 %80;
    i32 %82 = add i32 %78, i32 1;
    i1 %83 = icmp sgt i32 %42, i32 %82;
    cbr i1 %83(prob = 0.75), ^while.body2, ^b4;
  ^if.then:
    i32* %84 = getelementptr &(i32* %69)[i32 %28];
    i32 %85 = load i32* %84;
    i1 %86 = icmp slt i32 %85, i32 0;
    i32* %87 = getelementptr &(i32* %29)[i32 %65];
    i32 %88 = add i32 %66, i32 %71;
    cbr i1 %86(prob = 0.5), ^if.then1, ^if.else;
  ^b7:
    i32 %89 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %90 = phi [^super.header1, i32 0] [^while.body3, i32 %139];
    i32* %91 = getelementptr &(i32* %12)[i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %10)[i32 %90];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %91)[i64 4];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %93)[i64 4];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %91)[i64 5];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %93)[i64 5];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %91)[i64 6];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %93)[i64 6];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %91)[i64 7];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %93)[i64 7];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %91)[i64 8];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %93)[i64 8];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %91)[i64 9];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %93)[i64 9];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %91)[i64 10];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %93)[i64 10];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %91)[i64 11];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %93)[i64 11];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %91)[i64 12];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %93)[i64 12];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %91)[i64 13];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %93)[i64 13];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %91)[i64 14];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %93)[i64 14];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %91)[i64 15];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %93)[i64 15];
    store i32* %138 with i32 %137;
    i32 %139 = add i32 %90, i32 16;
    i1 %140 = icmp sgt i32 %75, i32 %139;
    cbr i1 %140(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %141 = phi [^super.header1, i32 0] [^while.body3, i32 %139] [^while.body4, i32 %154];
    i32* %142 = getelementptr &(i32* %12)[i32 %141];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %10)[i32 %141];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %142)[i64 1];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %144)[i64 1];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %142)[i64 2];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %144)[i64 2];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %142)[i64 3];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %144)[i64 3];
    store i32* %153 with i32 %152;
    i32 %154 = add i32 %141, i32 4;
    i1 %155 = icmp sgt i32 %73, i32 %154;
    cbr i1 %155(prob = 0.75), ^while.body4, ^while.body2;
  ^if.then1:
    store i32* %87 with i32 %88;
    ubr ^b6;
  ^if.else:
    i32 %156 = load i32* %87;
    i1 %157 = icmp slt i32 %88, i32 %156;
    cbr i1 %157(prob = 0.5), ^if.then1, ^b6;
}
