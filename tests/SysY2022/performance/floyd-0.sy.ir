internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b7, i32 %39];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    i32* %10 = getelementptr &(i32* %2)[i32 %8];
    i32* %11 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %8];
    ubr ^b;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 0] [^b3, i32 %30];
    i1 %13 = icmp sgt i32 %0, i32 %12;
    i32* %14 = getelementptr &(i32* %7)[i32 %12];
    i32 %15 = mul i32 %0, i32 %12;
    cbr i1 %13(prob = 0.984615), ^while.header2, ^b1;
  ^b:
    i32 %16 = phi [^prebody, i32 0] [^b4, i32 %34];
    i32 %17 = phi [^prebody, i32 0] [^b4, i32 %32];
    i32* %18 = getelementptr &(i32* %11)[i32 %16];
    i1 %19 = icmp sle i32 %0, i32 %17;
    cbr i1 %19(prob = 0.5), ^b4, ^b2;
  ^while.header2:
    i32 %20 = phi [^while.header1, i32 0] [^b12, i32 %57];
    i32 %21 = mul i32 %0, i32 %20;
    i32* %22 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %21];
    i32* %23 = getelementptr &(i32* %14)[i32 %21];
    i1 %24 = icmp sgt i32 %0, i32 %20;
    cbr i1 %24(prob = 0.984615), ^b5, ^b3;
  ^b1:
    i32 %25 = mul i32 %0, i32 %0;
    i1 %26 = icmp neq i32 %0, i32 0;
    cbr i1 %26(prob = 0.984615), ^super.header, ^b6;
  ^b2:
    i32 %27 = mul i32 %0, i32 %17;
    i32* %28 = getelementptr &(i32* %10)[i32 %27];
    i32 %29 = load i32* %28;
    ubr ^b4;
  ^b3:
    i32 %30 = add i32 %12, i32 1;
    ubr ^while.header1;
  ^b4:
    i32 %31 = phi [^b, i32 -1] [^b2, i32 %29];
    i32 %32 = add i32 %17, i32 1;
    i1 %33 = icmp sgt i32 %0, i32 %32;
    store i32* %18 with i32 %31;
    i32 %34 = add i32 %0, i32 %16;
    cbr i1 %33(prob = 0.984615), ^b, ^b7;
  ^b5:
    i32 %35 = phi [^while.header2, i32 0] [^b9, i32 %44];
    i32 %36 = load i32* %23;
    i1 %37 = icmp sgt i32 %36, i32 -1;
    cbr i1 %37(prob = 0.5), ^b8, ^b9;
  ^super.header:
    i1 %38 = icmp sgt i32 %25, i32 4;
    cbr i1 %38(prob = 0.941176), ^super.header1, ^while.body;
  ^b6:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %25, i32* %5);
    ret i32 0;
  ^b7:
    i32 %39 = add i32 %8, i32 1;
    ubr ^while.header;
  ^b8:
    i1 %40 = icmp sle i32 %0, i32 %35;
    cbr i1 %40(prob = 0.5), ^b11, ^b10;
  ^super.header1:
    i32 %41 = add i32 %25, i32 -4;
    i1 %42 = icmp sgt i32 %41, i32 16;
    i32 %43 = add i32 %25, i32 -20;
    cbr i1 %42(prob = 0.941176), ^while.body1, ^while.body2;
  ^b9:
    i32 %44 = add i32 %35, i32 1;
    i1 %45 = icmp sgt i32 %0, i32 %44;
    cbr i1 %45(prob = 0.984615), ^b5, ^b12;
  ^while.body {scalar}:
    i32 %46 = phi [^super.header, i32 0] [^while.body, i32 %50] [^while.body2, i32 %122];
    i32* %47 = getelementptr &(i32* %7)[i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %5)[i32 %46];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %46, i32 1;
    i1 %51 = icmp sgt i32 %25, i32 %50;
    cbr i1 %51(prob = 0.75), ^while.body, ^b6;
  ^b10:
    i32* %52 = getelementptr &(i32* %7)[i32 %35];
    i32* %53 = getelementptr &(i32* %52)[i32 %15];
    i32 %54 = load i32* %53;
    ubr ^b11;
  ^b11:
    i32 %55 = phi [^b8, i32 -1] [^b10, i32 %54];
    i1 %56 = icmp sgt i32 %55, i32 -1;
    cbr i1 %56(prob = 0.5), ^if.then, ^b9;
  ^b12:
    i32 %57 = add i32 %20, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %58 = phi [^super.header1, i32 0] [^while.body1, i32 %107];
    i32* %59 = getelementptr &(i32* %7)[i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %5)[i32 %58];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %59)[i64 1];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %61)[i64 1];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %59)[i64 2];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %61)[i64 2];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %59)[i64 3];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %61)[i64 3];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &(i32* %59)[i64 4];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %61)[i64 4];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %59)[i64 5];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %61)[i64 5];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %59)[i64 6];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %61)[i64 6];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %59)[i64 7];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %61)[i64 7];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %59)[i64 8];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %61)[i64 8];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &(i32* %59)[i64 9];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %61)[i64 9];
    store i32* %88 with i32 %87;
    i32* %89 = getelementptr &(i32* %59)[i64 10];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %61)[i64 10];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %59)[i64 11];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %61)[i64 11];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %59)[i64 12];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %61)[i64 12];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %59)[i64 13];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %61)[i64 13];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %59)[i64 14];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %61)[i64 14];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %59)[i64 15];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %61)[i64 15];
    store i32* %106 with i32 %105;
    i32 %107 = add i32 %58, i32 16;
    i1 %108 = icmp sgt i32 %43, i32 %107;
    cbr i1 %108(prob = 0.941176), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %109 = phi [^super.header1, i32 0] [^while.body1, i32 %107] [^while.body2, i32 %122];
    i32* %110 = getelementptr &(i32* %7)[i32 %109];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %5)[i32 %109];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %110)[i64 1];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %112)[i64 1];
    store i32* %115 with i32 %114;
    i32* %116 = getelementptr &(i32* %110)[i64 2];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %112)[i64 2];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %110)[i64 3];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %112)[i64 3];
    store i32* %121 with i32 %120;
    i32 %122 = add i32 %109, i32 4;
    i1 %123 = icmp sgt i32 %41, i32 %122;
    cbr i1 %123(prob = 0.75), ^while.body2, ^while.body;
  ^if.then:
    cbr i1 %40(prob = 0.5), ^b14, ^b13;
  ^b13:
    i32* %124 = getelementptr &(i32* %7)[i32 %35];
    i32* %125 = getelementptr &(i32* %124)[i32 %21];
    i32 %126 = load i32* %125;
    ubr ^b14;
  ^b14:
    i32 %127 = phi [^if.then, i32 -1] [^b13, i32 %126];
    i32* %128 = getelementptr &(i32* %22)[i32 %35];
    i32 %129 = add i32 %36, i32 %55;
    i1 %130 = icmp slt i32 %127, i32 0;
    cbr i1 %130(prob = 0.5), ^b15, ^if.else;
  ^b15:
    store i32* %128 with i32 %129;
    ubr ^b9;
  ^if.else:
    i32 %131 = load i32* %128;
    i1 %132 = icmp slt i32 %129, i32 %131;
    cbr i1 %132(prob = 0.5), ^b15, ^b9;
}
