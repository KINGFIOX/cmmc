internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %18];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i1 %11 = icmp slt i32 %9, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %12 = phi [^while.header, i32 0] [^b3, i32 %41];
    i1 %13 = icmp sle i32 %0, i32 %12;
    i1 %14 = icmp slt i32 %12, i32 0;
    i1 %15 = or i1 %13, i1 %14;
    i1 %16 = icmp sgt i32 %0, i32 %12;
    i32 %17 = mul i32 %0, i32 %12;
    cbr i1 %16(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %18 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %19 = phi [^while.header1, i32 0] [^b4, i32 %43];
    i1 %20 = icmp slt i32 %19, i32 0;
    i1 %21 = or i1 %11, i1 %20;
    i1 %22 = icmp sle i32 %0, i32 %19;
    i1 %23 = or i1 %21, i1 %22;
    i32 %24 = mul i32 %0, i32 %19;
    i32 %25 = add i32 %9, i32 %24;
    i32* %26 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %25];
    cbr i1 %23(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %27 = phi [^while.header2, i32 0] [^b5, i32 %50];
    i1 %28 = icmp slt i32 %27, i32 0;
    i1 %29 = or i1 %15, i1 %28;
    i1 %30 = icmp sle i32 %0, i32 %27;
    i1 %31 = or i1 %29, i1 %30;
    i32 %32 = mul i32 %0, i32 %27;
    i32 %33 = add i32 %12, i32 %32;
    i32* %34 = getelementptr &(i32* %8)[i32 %33];
    i1 %35 = or i1 %28, i1 %30;
    i1 %36 = icmp sgt i32 %0, i32 %27;
    cbr i1 %36(prob = 0.97), ^while.header4, ^b3;
  ^b1:
    i32 %37 = mul i32 %0, i32 %0;
    i1 %38 = icmp sgt i32 %37, i32 0;
    cbr i1 %38(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %39 = getelementptr &(i32* %2)[i32 %25];
    i32 %40 = load i32* %39;
    ubr ^b4;
  ^b3:
    i32 %41 = add i32 %12, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %42 = phi [^while.body, i32 -1] [^b2, i32 %40];
    i32 %43 = add i32 %19, i32 1;
    i1 %44 = icmp sgt i32 %0, i32 %43;
    store i32* %26 with i32 %42;
    cbr i1 %44(prob = 0.97), ^while.body, ^b;
  ^while.header4:
    i32 %45 = phi [^while.header3, i32 0] [^b8, i32 %72];
    i1 %46 = icmp sgt i32 %0, i32 %45;
    cbr i1 %46(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %47 = phi [^b1, i32 0] [^while.body1, i32 %48];
    i32 %48 = add i32 %47, i32 4;
    i1 %49 = icmp sgt i32 %37, i32 %48;
    cbr i1 %49(prob = 0.89), ^while.body1, ^while.body2;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %37, i32* %6);
    ret i32 0;
  ^b5:
    i32 %50 = add i32 %27, i32 1;
    ubr ^while.header3;
  ^while.body1:
    i32* %51 = getelementptr &(i32* %8)[i32 %47];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %6)[i32 %47];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %51)[i64 1];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %51)[i64 2];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %51)[i64 3];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %53)[i64 3];
    store i32* %62 with i32 %61;
    ubr ^super.header;
  ^entry2:
    cbr i1 %31(prob = 0.5), ^b7, ^b6;
  ^while.body2:
    i32 %63 = phi [^super.header, i32 %47] [^while.body2, i32 %67];
    i32* %64 = getelementptr &(i32* %8)[i32 %63];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %6)[i32 %63];
    store i32* %66 with i32 %65;
    i32 %67 = add i32 %63, i32 1;
    i1 %68 = icmp sgt i32 %37, i32 %67;
    cbr i1 %68(prob = 0.75), ^while.body2, ^entry1;
  ^b6:
    i32 %69 = load i32* %34;
    ubr ^b7;
  ^b7:
    i32 %70 = phi [^entry2, i32 -1] [^b6, i32 %69];
    i1 %71 = icmp sgt i32 %70, i32 -1;
    cbr i1 %71(prob = 0.5), ^entry3, ^b8;
  ^b8:
    i32 %72 = add i32 %45, i32 1;
    ubr ^while.header4;
  ^entry3:
    i1 %73 = icmp slt i32 %45, i32 0;
    i1 %74 = or i1 %15, i1 %73;
    cbr i1 %74(prob = 0.5), ^b10, ^b9;
  ^b9:
    i32 %75 = add i32 %17, i32 %45;
    i32* %76 = getelementptr &(i32* %8)[i32 %75];
    i32 %77 = load i32* %76;
    ubr ^b10;
  ^b10:
    i32 %78 = phi [^entry3, i32 -1] [^b9, i32 %77];
    i1 %79 = icmp sgt i32 %78, i32 -1;
    cbr i1 %79(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i1 %80 = or i1 %35, i1 %73;
    cbr i1 %80(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32 %81 = add i32 %32, i32 %45;
    i32* %82 = getelementptr &(i32* %8)[i32 %81];
    i32 %83 = load i32* %82;
    ubr ^b12;
  ^b12:
    i32 %84 = phi [^entry4, i32 -1] [^b11, i32 %83];
    i1 %85 = icmp slt i32 %84, i32 0;
    cbr i1 %85(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %86 = add i32 %32, i32 %45;
    i32* %87 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %86];
    i32 %88 = add i32 %70, i32 %78;
    store i32* %87 with i32 %88;
    ubr ^b8;
  ^if.else:
    i32 %89 = add i32 %32, i32 %45;
    i32* %90 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %70, i32 %78;
    i1 %93 = icmp sgt i32 %91, i32 %92;
    cbr i1 %93(prob = 0.5), ^if.then, ^b8;
}
