internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %20];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i1 %11 = icmp sle i32 %0, i32 %9;
    i1 %12 = icmp slt i32 %9, i32 0;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %14 = phi [^while.header, i32 0] [^b3, i32 %43];
    i1 %15 = icmp sle i32 %0, i32 %14;
    i1 %16 = icmp slt i32 %14, i32 0;
    i1 %17 = or i1 %15, i1 %16;
    i1 %18 = icmp sgt i32 %0, i32 %14;
    i32 %19 = mul i32 %0, i32 %14;
    cbr i1 %18(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %20 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %21 = phi [^while.header1, i32 0] [^b4, i32 %45];
    i1 %22 = icmp slt i32 %21, i32 0;
    i1 %23 = or i1 %13, i1 %22;
    i1 %24 = icmp sle i32 %0, i32 %21;
    i1 %25 = or i1 %23, i1 %24;
    i32 %26 = mul i32 %0, i32 %21;
    i32 %27 = add i32 %9, i32 %26;
    i32* %28 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %27];
    cbr i1 %25(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %29 = phi [^while.header2, i32 0] [^b5, i32 %52];
    i1 %30 = icmp slt i32 %29, i32 0;
    i1 %31 = or i1 %17, i1 %30;
    i1 %32 = icmp sle i32 %0, i32 %29;
    i1 %33 = or i1 %31, i1 %32;
    i32 %34 = mul i32 %0, i32 %29;
    i32 %35 = add i32 %14, i32 %34;
    i32* %36 = getelementptr &(i32* %8)[i32 %35];
    i1 %37 = or i1 %30, i1 %32;
    i1 %38 = icmp sgt i32 %0, i32 %29;
    cbr i1 %38(prob = 0.97), ^while.header4, ^b3;
  ^b1:
    i32 %39 = mul i32 %0, i32 %0;
    i1 %40 = icmp sgt i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %41 = getelementptr &(i32* %2)[i32 %27];
    i32 %42 = load i32* %41;
    ubr ^b4;
  ^b3:
    i32 %43 = add i32 %14, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %44 = phi [^while.body, i32 -1] [^b2, i32 %42];
    i32 %45 = add i32 %21, i32 1;
    i1 %46 = icmp sgt i32 %0, i32 %45;
    store i32* %28 with i32 %44;
    cbr i1 %46(prob = 0.97), ^while.body, ^b;
  ^while.header4:
    i32 %47 = phi [^while.header3, i32 0] [^b8, i32 %74];
    i1 %48 = icmp sgt i32 %0, i32 %47;
    cbr i1 %48(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %49 = phi [^b1, i32 0] [^while.body1, i32 %50];
    i32 %50 = add i32 %49, i32 4;
    i1 %51 = icmp sgt i32 %39, i32 %50;
    cbr i1 %51(prob = 0.89), ^while.body1, ^while.body2;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %39, i32* %6);
    ret i32 0;
  ^b5:
    i32 %52 = add i32 %29, i32 1;
    ubr ^while.header3;
  ^while.body1:
    i32* %53 = getelementptr &(i32* %8)[i32 %49];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %6)[i32 %49];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %55)[i64 1];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %55)[i64 2];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %53)[i64 3];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %55)[i64 3];
    store i32* %64 with i32 %63;
    ubr ^super.header;
  ^entry2:
    cbr i1 %33(prob = 0.5), ^b7, ^b6;
  ^while.body2:
    i32 %65 = phi [^super.header, i32 %49] [^while.body2, i32 %69];
    i32* %66 = getelementptr &(i32* %8)[i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %6)[i32 %65];
    store i32* %68 with i32 %67;
    i32 %69 = add i32 %65, i32 1;
    i1 %70 = icmp sgt i32 %39, i32 %69;
    cbr i1 %70(prob = 0.75), ^while.body2, ^entry1;
  ^b6:
    i32 %71 = load i32* %36;
    ubr ^b7;
  ^b7:
    i32 %72 = phi [^entry2, i32 -1] [^b6, i32 %71];
    i1 %73 = icmp sgt i32 %72, i32 -1;
    cbr i1 %73(prob = 0.5), ^entry3, ^b8;
  ^b8:
    i32 %74 = add i32 %47, i32 1;
    ubr ^while.header4;
  ^entry3:
    i1 %75 = icmp slt i32 %47, i32 0;
    i1 %76 = or i1 %17, i1 %75;
    i1 %77 = icmp sle i32 %0, i32 %47;
    i1 %78 = or i1 %76, i1 %77;
    cbr i1 %78(prob = 0.5), ^b10, ^b9;
  ^b9:
    i32 %79 = add i32 %19, i32 %47;
    i32* %80 = getelementptr &(i32* %8)[i32 %79];
    i32 %81 = load i32* %80;
    ubr ^b10;
  ^b10:
    i32 %82 = phi [^entry3, i32 -1] [^b9, i32 %81];
    i1 %83 = icmp sgt i32 %82, i32 -1;
    cbr i1 %83(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i1 %84 = or i1 %75, i1 %77;
    i1 %85 = or i1 %37, i1 %84;
    cbr i1 %85(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32 %86 = add i32 %34, i32 %47;
    i32* %87 = getelementptr &(i32* %8)[i32 %86];
    i32 %88 = load i32* %87;
    ubr ^b12;
  ^b12:
    i32 %89 = phi [^entry4, i32 -1] [^b11, i32 %88];
    i1 %90 = icmp slt i32 %89, i32 0;
    cbr i1 %90(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %91 = add i32 %34, i32 %47;
    i32* %92 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %91];
    i32 %93 = add i32 %72, i32 %82;
    store i32* %92 with i32 %93;
    ubr ^b8;
  ^if.else:
    i32 %94 = add i32 %34, i32 %47;
    i32* %95 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %72, i32 %82;
    i1 %98 = icmp sgt i32 %96, i32 %97;
    cbr i1 %98(prob = 0.5), ^if.then, ^b8;
}
