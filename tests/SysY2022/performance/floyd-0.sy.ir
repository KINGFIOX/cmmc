internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 62);
    i32* %3 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i32* %4 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i1 %5 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %15];
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %8 = scmp ge i32 %6, i32 %0;
    i1 %9 = scmp lt i32 %6, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^b;
^while.header1:
    i32 %10 = phi [^while.header, i32 0] [^b2, i32 %30];
    i1 %11 = scmp lt i32 %10, i32 %0;
    i1 %12 = scmp lt i32 %10, i32 0;
    i1 %13 = scmp ge i32 %10, i32 %0;
    i32 %14 = mul i32 %10, i32 %0;
    cbr i1 %11(prob = 0.97), ^while.header2, ^b1;
^b:
    i32 %15 = add i32 %6, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %16 = phi [^while.body, i32 0] [^b3, i32 %32];
    i32 %17 = mul i32 %16, i32 %0;
    i32 %18 = add i32 %6, i32 %17;
    i32* %19 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %18];
    i1 %20 = scmp lt i32 %16, i32 0;
    cbr i1 %20(prob = 0.5), ^b3, ^b4;
^while.header2:
    i32 %21 = phi [^while.header1, i32 0] [^b5, i32 %43];
    i1 %22 = scmp lt i32 %21, i32 %0;
    i32 %23 = mul i32 %21, i32 %0;
    i1 %24 = scmp lt i32 %21, i32 0;
    i1 %25 = scmp ge i32 %21, i32 %0;
    i32 %26 = add i32 %10, i32 %23;
    i32* %27 = getelementptr &(i32* %4)[i32 %26];
    cbr i1 %22(prob = 0.97), ^while.header3, ^b2;
^b1:
    i32 %28 = mul i32 %0, i32 %0;
    i1 %29 = scmp gt i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body2, ^entry1;
^b2:
    i32 %30 = add i32 %10, i32 1;
    ubr ^while.header1;
^b3:
    i32 %31 = phi [^while.body1, i32 -1] [^b4, i32 -1] [^b6, i32 -1] [^b9, i32 -1] [^b10, i32 %47];
    store i32* %19 with i32 %31;
    i32 %32 = add i32 %16, i32 1;
    i1 %33 = scmp lt i32 %32, i32 %0;
    cbr i1 %33(prob = 0.97), ^while.body1, ^b;
^while.header3:
    i32 %34 = phi [^while.header2, i32 0] [^b14, i32 %51];
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.97), ^entry2, ^b5;
^b4:
    i1 %36 = scmp ge i32 %16, i32 %0;
    cbr i1 %36(prob = 0.5), ^b3, ^b6;
^while.body2:
    i32 %37 = phi [^b1, i32 0] [^while.body2, i32 %41];
    i32* %38 = getelementptr &(i32* %3)[i32 %37];
    i32* %39 = getelementptr &(i32* %4)[i32 %37];
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32 %41 = add i32 %37, i32 1;
    i1 %42 = scmp lt i32 %41, i32 %28;
    cbr i1 %42(prob = 0.97), ^while.body2, ^entry1;
^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %28, i32* %3);
    ret i32 0;
^b5:
    i32 %43 = add i32 %21, i32 1;
    ubr ^while.header2;
^entry2:
    cbr i1 %24(prob = 0.5), ^b7, ^b8;
^b6:
    cbr i1 %9(prob = 0.5), ^b3, ^b9;
^b7:
    i32 %44 = phi [^entry2, i32 -1] [^b8, i32 -1] [^b12, i32 -1] [^b16, i32 -1] [^b18, i32 %54];
    i1 %45 = scmp gt i32 %44, i32 -1;
    cbr i1 %45(prob = 0.5), ^entry3, ^b11;
^b8:
    cbr i1 %25(prob = 0.5), ^b7, ^b12;
^b9:
    cbr i1 %8(prob = 0.5), ^b3, ^b10;
^entry3:
    cbr i1 %12(prob = 0.5), ^b13, ^b15;
^b10:
    i32* %46 = getelementptr &(i32* %1)[i32 %18];
    i32 %47 = load i32* %46;
    ubr ^b3;
^b11:
    i1 %48 = phi [^b7, i1 false] [^b13, i1 %50];
    cbr i1 %48(prob = 0.5), ^entry4, ^b14;
^b12:
    cbr i1 %12(prob = 0.5), ^b7, ^b16;
^b13:
    i32 %49 = phi [^entry3, i32 -1] [^b15, i32 -1] [^b19, i32 -1] [^b21, i32 -1] [^b24, i32 %66];
    i1 %50 = scmp ge i32 %49, i32 0;
    ubr ^b11;
^b14:
    i32 %51 = add i32 %34, i32 1;
    ubr ^while.header3;
^b15:
    cbr i1 %13(prob = 0.5), ^b13, ^b19;
^entry4:
    cbr i1 %24(prob = 0.5), ^b17, ^b20;
^b16:
    cbr i1 %13(prob = 0.5), ^b7, ^b18;
^b17:
    i32 %52 = phi [^entry4, i32 -1] [^b20, i32 -1] [^b22, i32 -1] [^b28, i32 -1] [^b32, i32 %76];
    i1 %53 = scmp lt i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then, ^if.else;
^b18:
    i32 %54 = load i32* %27;
    ubr ^b7;
^b19:
    i1 %55 = scmp lt i32 %34, i32 0;
    cbr i1 %55(prob = 0.5), ^b13, ^b21;
^b20:
    cbr i1 %25(prob = 0.5), ^b17, ^b22;
^if.then:
    i32 %56 = add i32 %34, i32 %23;
    i32* %57 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %56];
    cbr i1 %24(prob = 0.5), ^b23, ^b26;
^if.else:
    i32 %58 = add i32 %34, i32 %23;
    i32* %59 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    cbr i1 %24(prob = 0.5), ^b25, ^b27;
^b21:
    i1 %61 = scmp ge i32 %34, i32 %0;
    cbr i1 %61(prob = 0.5), ^b13, ^b24;
^b22:
    i1 %62 = scmp lt i32 %34, i32 0;
    cbr i1 %62(prob = 0.5), ^b17, ^b28;
^b23:
    i32 %63 = phi [^if.then, i32 -1] [^b26, i32 -1] [^b33, i32 -1] [^b37, i32 -1] [^b40, i32 %79];
    cbr i1 %12(prob = 0.5), ^b29, ^b31;
^b24:
    i32 %64 = add i32 %34, i32 %14;
    i32* %65 = getelementptr &(i32* %4)[i32 %64];
    i32 %66 = load i32* %65;
    ubr ^b13;
^b25:
    i32 %67 = phi [^if.else, i32 -1] [^b27, i32 -1] [^b35, i32 -1] [^b39, i32 -1] [^b41, i32 %80];
    cbr i1 %12(prob = 0.5), ^b30, ^b34;
^b26:
    cbr i1 %25(prob = 0.5), ^b23, ^b33;
^b27:
    cbr i1 %25(prob = 0.5), ^b25, ^b35;
^b28:
    i1 %68 = scmp ge i32 %34, i32 %0;
    cbr i1 %68(prob = 0.5), ^b17, ^b32;
^b29:
    i32 %69 = phi [^b23, i32 -1] [^b31, i32 -1] [^b36, i32 -1] [^b42, i32 -1] [^b44, i32 %85];
    i32 %70 = add i32 %63, i32 %69;
    store i32* %57 with i32 %70;
    ubr ^b14;
^b30:
    i32 %71 = phi [^b25, i32 -1] [^b34, i32 -1] [^b38, i32 -1] [^b43, i32 -1] [^b45, i32 %88];
    i32 %72 = add i32 %67, i32 %71;
    i1 %73 = scmp gt i32 %60, i32 %72;
    cbr i1 %73(prob = 0.5), ^if.then, ^b14;
^b31:
    cbr i1 %13(prob = 0.5), ^b29, ^b36;
^b32:
    i32 %74 = add i32 %34, i32 %23;
    i32* %75 = getelementptr &(i32* %4)[i32 %74];
    i32 %76 = load i32* %75;
    ubr ^b17;
^b33:
    cbr i1 %12(prob = 0.5), ^b23, ^b37;
^b34:
    cbr i1 %13(prob = 0.5), ^b30, ^b38;
^b35:
    cbr i1 %12(prob = 0.5), ^b25, ^b39;
^b36:
    i1 %77 = scmp lt i32 %34, i32 0;
    cbr i1 %77(prob = 0.5), ^b29, ^b42;
^b37:
    cbr i1 %13(prob = 0.5), ^b23, ^b40;
^b38:
    i1 %78 = scmp lt i32 %34, i32 0;
    cbr i1 %78(prob = 0.5), ^b30, ^b43;
^b39:
    cbr i1 %13(prob = 0.5), ^b25, ^b41;
^b40:
    i32 %79 = load i32* %27;
    ubr ^b23;
^b41:
    i32 %80 = load i32* %27;
    ubr ^b25;
^b42:
    i1 %81 = scmp ge i32 %34, i32 %0;
    cbr i1 %81(prob = 0.5), ^b29, ^b44;
^b43:
    i1 %82 = scmp ge i32 %34, i32 %0;
    cbr i1 %82(prob = 0.5), ^b30, ^b45;
^b44:
    i32 %83 = add i32 %34, i32 %14;
    i32* %84 = getelementptr &(i32* %4)[i32 %83];
    i32 %85 = load i32* %84;
    ubr ^b29;
^b45:
    i32 %86 = add i32 %34, i32 %14;
    i32* %87 = getelementptr &(i32* %4)[i32 %86];
    i32 %88 = load i32* %87;
    ubr ^b30;
}
