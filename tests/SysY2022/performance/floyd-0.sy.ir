internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32* %2 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i32 %3 = call () -> i32 @getint();
    store i32* %n with i32 %3;
    i32 %4 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %5 = load i32* %n;
    i1 %6 = scmp gt i32 %5, i32 0;
    call (i32) -> void @starttime(i32 62);
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = phi [^entry, i32 0] [^b4, i32 %46];
    i1 %8 = scmp lt i32 %7, i32 0;
    i1 %9 = scmp ge i32 %7, i32 %5;
    i1 %10 = or i1 %8, i1 %9;
    ubr ^while.body2;
^b:
    cbr i1 %6(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %11 = phi [^b, i32 0] [^b14, i32 %79];
    i32 %12 = mul i32 %11, i32 %5;
    i1 %13 = scmp lt i32 %11, i32 0;
    i1 %14 = scmp ge i32 %11, i32 %5;
    i1 %15 = or i1 %13, i1 %14;
    ubr ^while.body3;
^while.body2:
    i32 %16 = phi [^while.body, i32 0] [^b3, i32 %17];
    i32 %17 = add i32 %16, i32 1;
    i32 %18 = mul i32 %16, i32 %5;
    i32 %19 = add i32 %7, i32 %18;
    i1 %20 = scmp lt i32 %16, i32 0;
    i1 %21 = scmp lt i32 %17, i32 %5;
    i1 %22 = scmp ge i32 %16, i32 %5;
    i1 %23 = or i1 %20, i1 %22;
    i1 %24 = or i1 %23, i1 %10;
    i32* %25 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %19];
    cbr i1 %24(prob = 0.94), ^b3, ^b2;
^b1:
    i32 %26 = mul i32 %5, i32 %5;
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body4, ^entry1;
^while.body3:
    i32 %28 = phi [^while.body1, i32 0] [^b13, i32 %72];
    i32 %29 = mul i32 %28, i32 %5;
    i32 %30 = add i32 %11, i32 %29;
    i1 %31 = scmp lt i32 %28, i32 0;
    i1 %32 = scmp ge i32 %28, i32 %5;
    i1 %33 = or i1 %31, i1 %32;
    i1 %34 = or i1 %33, i1 %15;
    i32* %35 = getelementptr &(i32* %0)[i32 %30];
    ubr ^while.body5;
^b2:
    i32* %36 = getelementptr &(i32* %1)[i32 %19];
    i32 %37 = load i32* %36;
    ubr ^b3;
^b3:
    i32 %38 = phi [^while.body2, i32 -1] [^b2, i32 %37];
    store i32* %25 with i32 %38;
    cbr i1 %21(prob = 0.97), ^while.body2, ^b4;
^while.body4:
    i32 %39 = phi [^b1, i32 0] [^while.body4, i32 %40];
    i32 %40 = add i32 %39, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %26;
    i32* %42 = getelementptr &(i32* %0)[i32 %39];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %2)[i32 %39];
    store i32* %44 with i32 %43;
    cbr i1 %41(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %26, i32* %2);
    ret i32 0;
^while.body5:
    i32 %45 = phi [^while.body3, i32 0] [^b10, i32 %65];
    cbr i1 %34(prob = 0.94), ^b6, ^b5;
^b4:
    i32 %46 = add i32 %7, i32 1;
    i1 %47 = scmp lt i32 %46, i32 %5;
    cbr i1 %47(prob = 0.97), ^while.body, ^b;
^b5:
    i32 %48 = load i32* %35;
    ubr ^b6;
^b6:
    i32 %49 = phi [^while.body5, i32 -1] [^b5, i32 %48];
    i1 %50 = scmp gt i32 %49, i32 -1;
    cbr i1 %50(prob = 0.5), ^entry2, ^b7;
^entry2:
    i1 %51 = scmp lt i32 %45, i32 0;
    i1 %52 = scmp ge i32 %45, i32 %5;
    i1 %53 = or i1 %51, i1 %52;
    i1 %54 = or i1 %53, i1 %15;
    cbr i1 %54(prob = 0.94), ^b8, ^b9;
^b7:
    i1 %55 = phi [^b6, i1 false] [^b8, i1 %57];
    cbr i1 %55(prob = 0.5), ^entry3, ^b10;
^b8:
    i32 %56 = phi [^entry2, i32 -1] [^b9, i32 %60];
    i1 %57 = scmp ge i32 %56, i32 0;
    ubr ^b7;
^b9:
    i32 %58 = add i32 %45, i32 %12;
    i32* %59 = getelementptr &(i32* %0)[i32 %58];
    i32 %60 = load i32* %59;
    ubr ^b8;
^entry3:
    i1 %61 = scmp lt i32 %45, i32 0;
    i1 %62 = scmp ge i32 %45, i32 %5;
    i1 %63 = or i1 %61, i1 %62;
    i1 %64 = or i1 %63, i1 %33;
    cbr i1 %64(prob = 0.94), ^b12, ^b11;
^b10:
    i32 %65 = add i32 %45, i32 1;
    i1 %66 = scmp lt i32 %65, i32 %5;
    cbr i1 %66(prob = 0.97), ^while.body5, ^b13;
^b11:
    i32 %67 = add i32 %45, i32 %29;
    i32* %68 = getelementptr &(i32* %0)[i32 %67];
    i32 %69 = load i32* %68;
    ubr ^b12;
^b12:
    i32 %70 = phi [^entry3, i32 -1] [^b11, i32 %69];
    i1 %71 = scmp lt i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^if.then, ^if.else;
^b13:
    i32 %72 = add i32 %28, i32 1;
    i1 %73 = scmp lt i32 %72, i32 %5;
    cbr i1 %73(prob = 0.97), ^while.body3, ^b14;
^if.then:
    i32 %74 = add i32 %45, i32 %29;
    i32* %75 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %74];
    cbr i1 %34(prob = 0.94), ^b16, ^b15;
^if.else:
    i32 %76 = add i32 %45, i32 %29;
    i32* %77 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    cbr i1 %34(prob = 0.94), ^b18, ^b17;
^b14:
    i32 %79 = add i32 %11, i32 1;
    i1 %80 = scmp lt i32 %79, i32 %5;
    cbr i1 %80(prob = 0.97), ^while.body1, ^b1;
^b15:
    i32 %81 = load i32* %35;
    ubr ^b16;
^b16:
    i32 %82 = phi [^if.then, i32 -1] [^b15, i32 %81];
    i1 %83 = or i1 %61, i1 %62;
    i1 %84 = or i1 %83, i1 %15;
    cbr i1 %84(prob = 0.94), ^b19, ^b20;
^b17:
    i32 %85 = load i32* %35;
    ubr ^b18;
^b18:
    i32 %86 = phi [^if.else, i32 -1] [^b17, i32 %85];
    i1 %87 = or i1 %61, i1 %62;
    i1 %88 = or i1 %87, i1 %15;
    cbr i1 %88(prob = 0.94), ^b22, ^b21;
^b19:
    i32 %89 = phi [^b16, i32 -1] [^b20, i32 %93];
    i32 %90 = add i32 %82, i32 %89;
    store i32* %75 with i32 %90;
    ubr ^b10;
^b20:
    i32 %91 = add i32 %45, i32 %12;
    i32* %92 = getelementptr &(i32* %0)[i32 %91];
    i32 %93 = load i32* %92;
    ubr ^b19;
^b21:
    i32 %94 = add i32 %45, i32 %12;
    i32* %95 = getelementptr &(i32* %0)[i32 %94];
    i32 %96 = load i32* %95;
    ubr ^b22;
^b22:
    i32 %97 = phi [^b18, i32 -1] [^b21, i32 %96];
    i32 %98 = add i32 %86, i32 %97;
    i1 %99 = scmp gt i32 %78, i32 %98;
    cbr i1 %99(prob = 0.5), ^if.then, ^b10;
}
