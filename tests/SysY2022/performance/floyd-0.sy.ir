internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b4, i32 %35];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.984615), ^b, ^while.header1;
  ^b:
    i32 %10 = phi [^while.header, i32 0] [^b2, i32 %26];
    i32 %11 = phi [^while.header, i32 0] [^b2, i32 %24];
    i32 %12 = add i32 %8, i32 %10;
    i32* %13 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %12];
    i1 %14 = icmp sle i32 %0, i32 %11;
    cbr i1 %14(prob = 0.5), ^b2, ^b1;
  ^while.header1:
    i32 %15 = phi [^while.header, i32 0] [^b5, i32 %36];
    i32 %16 = mul i32 %0, i32 %15;
    i32* %17 = getelementptr &(i32* %7)[i32 %16];
    i1 %18 = icmp sgt i32 %0, i32 %15;
    cbr i1 %18(prob = 0.984615), ^while.header2, ^b3;
  ^b1:
    i32 %19 = mul i32 %0, i32 %11;
    i32* %20 = getelementptr &(i32* %2)[i32 %19];
    i32* %21 = getelementptr &(i32* %20)[i32 %8];
    i32 %22 = load i32* %21;
    ubr ^b2;
  ^b2:
    i32 %23 = phi [^b, i32 -1] [^b1, i32 %22];
    i32 %24 = add i32 %11, i32 1;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    store i32* %13 with i32 %23;
    i32 %26 = add i32 %0, i32 %10;
    cbr i1 %25(prob = 0.984615), ^b, ^b4;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b10, i32 %123];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body, ^b5;
  ^b3:
    i32 %29 = mul i32 %0, i32 %0;
    i1 %30 = icmp neq i32 %0, i32 0;
    cbr i1 %30(prob = 0.984615), ^super.header, ^entry1;
  ^while.body:
    i32 %31 = mul i32 %0, i32 %27;
    i32* %32 = getelementptr &(i32* %7)[i32 %31];
    i32* %33 = getelementptr &(i32* %32)[i32 %15];
    i32* %34 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %31];
    ubr ^b6;
  ^b4:
    i32 %35 = add i32 %8, i32 1;
    ubr ^while.header;
  ^b5:
    i32 %36 = add i32 %15, i32 1;
    ubr ^while.header1;
  ^super.header:
    i1 %37 = icmp sgt i32 %29, i32 4;
    cbr i1 %37(prob = 0.941176), ^super.header1, ^while.body1;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %29, i32* %5);
    ret i32 0;
  ^b6:
    i32 %38 = phi [^while.body, i32 0] [^b7, i32 %102];
    i32 %39 = load i32* %33;
    i1 %40 = icmp sgt i32 %39, i32 -1;
    cbr i1 %40(prob = 0.5), ^entry2, ^b7;
  ^super.header1:
    i32 %41 = add i32 %29, i32 -4;
    i1 %42 = icmp sgt i32 %41, i32 16;
    i32 %43 = add i32 %29, i32 -20;
    cbr i1 %42(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %44 = phi [^super.header, i32 0] [^while.body1, i32 %48] [^while.body3, i32 %117];
    i32* %45 = getelementptr &(i32* %7)[i32 %44];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %5)[i32 %44];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %44, i32 1;
    i1 %49 = icmp sgt i32 %29, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body1, ^entry1;
  ^entry2:
    i1 %50 = icmp sle i32 %0, i32 %38;
    cbr i1 %50(prob = 0.5), ^b9, ^b8;
  ^while.body2:
    i32 %51 = phi [^super.header1, i32 0] [^while.body2, i32 %100];
    i32* %52 = getelementptr &(i32* %7)[i32 %51];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %5)[i32 %51];
    store i32* %54 with i32 %53;
    i32* %55 = getelementptr &(i32* %52)[i64 1];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %52)[i64 2];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %54)[i64 2];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %52)[i64 3];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %54)[i64 3];
    store i32* %63 with i32 %62;
    i32* %64 = getelementptr &(i32* %52)[i64 4];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %54)[i64 4];
    store i32* %66 with i32 %65;
    i32* %67 = getelementptr &(i32* %52)[i64 5];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %54)[i64 5];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %52)[i64 6];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %54)[i64 6];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %52)[i64 7];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %54)[i64 7];
    store i32* %75 with i32 %74;
    i32* %76 = getelementptr &(i32* %52)[i64 8];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %54)[i64 8];
    store i32* %78 with i32 %77;
    i32* %79 = getelementptr &(i32* %52)[i64 9];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %54)[i64 9];
    store i32* %81 with i32 %80;
    i32* %82 = getelementptr &(i32* %52)[i64 10];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %54)[i64 10];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %52)[i64 11];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %54)[i64 11];
    store i32* %87 with i32 %86;
    i32* %88 = getelementptr &(i32* %52)[i64 12];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %54)[i64 12];
    store i32* %90 with i32 %89;
    i32* %91 = getelementptr &(i32* %52)[i64 13];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %54)[i64 13];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %52)[i64 14];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %54)[i64 14];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %52)[i64 15];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %54)[i64 15];
    store i32* %99 with i32 %98;
    i32 %100 = add i32 %51, i32 16;
    i1 %101 = icmp sgt i32 %43, i32 %100;
    cbr i1 %101(prob = 0.941176), ^while.body2, ^while.body3;
  ^b7:
    i32 %102 = add i32 %38, i32 1;
    i1 %103 = icmp sgt i32 %0, i32 %102;
    cbr i1 %103(prob = 0.984615), ^b6, ^b10;
  ^while.body3 {scalar}:
    i32 %104 = phi [^super.header1, i32 0] [^while.body2, i32 %100] [^while.body3, i32 %117];
    i32* %105 = getelementptr &(i32* %7)[i32 %104];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %5)[i32 %104];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %105)[i64 1];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %107)[i64 1];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %105)[i64 2];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %107)[i64 2];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %105)[i64 3];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %107)[i64 3];
    store i32* %116 with i32 %115;
    i32 %117 = add i32 %104, i32 4;
    i1 %118 = icmp sgt i32 %41, i32 %117;
    cbr i1 %118(prob = 0.75), ^while.body3, ^while.body1;
  ^b8:
    i32* %119 = getelementptr &(i32* %17)[i32 %38];
    i32 %120 = load i32* %119;
    ubr ^b9;
  ^b9:
    i32 %121 = phi [^entry2, i32 -1] [^b8, i32 %120];
    i1 %122 = icmp sgt i32 %121, i32 -1;
    cbr i1 %122(prob = 0.5), ^entry3, ^b7;
  ^b10:
    i32 %123 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^entry3:
    cbr i1 %50(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32* %124 = getelementptr &(i32* %32)[i32 %38];
    i32 %125 = load i32* %124;
    ubr ^b12;
  ^b12:
    i32 %126 = phi [^entry3, i32 -1] [^b11, i32 %125];
    i32* %127 = getelementptr &(i32* %34)[i32 %38];
    i32 %128 = add i32 %39, i32 %121;
    i1 %129 = icmp slt i32 %126, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %127 with i32 %128;
    ubr ^b7;
  ^if.else:
    i32 %130 = load i32* %127;
    i1 %131 = icmp slt i32 %128, i32 %130;
    cbr i1 %131(prob = 0.5), ^if.then, ^b7;
}
