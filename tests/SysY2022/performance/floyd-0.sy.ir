internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    i1 %4 = icmp sgt i32 %0, i32 3;
    i32 %5 = add i32 %0, i32 -3;
    i32 %6 = mul i32 %0, i32 4;
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    [2097152 * i32]* %9 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %10 = getelementptr &([2097152 * i32]* %9)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 0] [^scalar.final, i32 %56];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    i32* %13 = getelementptr &([2097152 * i32]* %9)[i64 0][i32 %11];
    i32* %14 = getelementptr &(i32* %2)[i32 %11];
    cbr i1 %4(prob = 0.941176), ^prebody1, ^scalar.header;
  ^while.header1:
    i32 %15 = phi [^while.header, i32 0] [^b1, i32 %55];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    i32* %17 = getelementptr &(i32* %10)[i32 %15];
    i32 %18 = mul i32 %0, i32 %15;
    cbr i1 %16(prob = 0.984615), ^while.header2, ^b;
  ^prebody1:
    i32* %19 = getelementptr &(i32* %13)[i32 %0];
    i32* %20 = getelementptr &(i32* %19)[i32 %0];
    i32* %21 = getelementptr &(i32* %20)[i32 %0];
    i32* %22 = getelementptr &(i32* %14)[i32 %0];
    i32* %23 = getelementptr &(i32* %22)[i32 %0];
    i32* %24 = getelementptr &(i32* %23)[i32 %0];
    ubr ^while.body;
  ^while.header2:
    i32 %25 = phi [^while.header1, i32 0] [^b6, i32 %87];
    i32 %26 = mul i32 %0, i32 %25;
    i32* %27 = getelementptr &([2097152 * i32]* %9)[i64 0][i32 %26];
    i32* %28 = getelementptr &(i32* %17)[i32 %26];
    i1 %29 = icmp sgt i32 %0, i32 %25;
    cbr i1 %29(prob = 0.984615), ^b2, ^b1;
  ^scalar.header:
    i32 %30 = phi [^prebody, i32 0] [^while.body, i32 %51];
    i32 %31 = phi [^prebody, i32 0] [^while.body, i32 %53];
    i32 %32 = phi [^prebody, i32 0] [^while.body, i32 %54];
    i1 %33 = icmp sgt i32 %0, i32 %30;
    cbr i1 %33(prob = 0.75), ^while.body1, ^scalar.final;
  ^b:
    i32 %34 = mul i32 %0, i32 %0;
    i1 %35 = icmp neq i32 %0, i32 0;
    cbr i1 %35(prob = 0.984615), ^super.header, ^b3;
  ^while.body:
    i32 %36 = phi [^prebody1, i32 0] [^while.body, i32 %51];
    i32 %37 = phi [^prebody1, i32 0] [^while.body, i32 %53];
    i32 %38 = phi [^prebody1, i32 0] [^while.body, i32 %54];
    i32* %39 = getelementptr &(i32* %14)[i32 %38];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %13)[i32 %37];
    store i32* %41 with i32 %40;
    i32* %42 = getelementptr &(i32* %22)[i32 %38];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %19)[i32 %37];
    store i32* %44 with i32 %43;
    i32* %45 = getelementptr &(i32* %23)[i32 %38];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %20)[i32 %37];
    store i32* %47 with i32 %46;
    i32* %48 = getelementptr &(i32* %24)[i32 %38];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %21)[i32 %37];
    store i32* %50 with i32 %49;
    i32 %51 = add i32 %36, i32 4;
    i1 %52 = icmp sgt i32 %5, i32 %51;
    i32 %53 = add i32 %6, i32 %37;
    i32 %54 = add i32 %6, i32 %38;
    cbr i1 %52(prob = 0.941176), ^while.body, ^scalar.header;
  ^b1:
    i32 %55 = add i32 %15, i32 1;
    ubr ^while.header1;
  ^scalar.final:
    i32 %56 = add i32 %11, i32 1;
    ubr ^while.header;
  ^b2:
    i32 %57 = phi [^while.header2, i32 0] [^b5, i32 %78];
    i32 %58 = load i32* %28;
    i1 %59 = icmp sgt i32 %58, i32 -1;
    cbr i1 %59(prob = 0.5), ^b4, ^b5;
  ^while.body1 {scalar}:
    i32 %60 = phi [^scalar.header, i32 %32] [^while.body1, i32 %69];
    i32 %61 = phi [^scalar.header, i32 %31] [^while.body1, i32 %68];
    i32 %62 = phi [^scalar.header, i32 %30] [^while.body1, i32 %66];
    i32* %63 = getelementptr &(i32* %14)[i32 %60];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %13)[i32 %61];
    store i32* %65 with i32 %64;
    i32 %66 = add i32 %62, i32 1;
    i1 %67 = icmp sgt i32 %0, i32 %66;
    i32 %68 = add i32 %0, i32 %61;
    i32 %69 = add i32 %0, i32 %60;
    cbr i1 %67(prob = 0.75), ^while.body1, ^scalar.final;
  ^super.header:
    i1 %70 = icmp sgt i32 %34, i32 3;
    cbr i1 %70(prob = 0.941176), ^super.header1, ^scalar.header1;
  ^b3:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %34, i32* %8);
    ret i32 0;
  ^b4:
    i32* %71 = getelementptr &(i32* %10)[i32 %57];
    i32* %72 = getelementptr &(i32* %71)[i32 %18];
    i32 %73 = load i32* %72;
    i1 %74 = icmp sgt i32 %73, i32 -1;
    cbr i1 %74(prob = 0.5), ^if.then, ^b5;
  ^super.header1:
    i32 %75 = add i32 %34, i32 -3;
    i1 %76 = icmp sgt i32 %75, i32 15;
    i32 %77 = add i32 %34, i32 -18;
    cbr i1 %76(prob = 0.941176), ^while.body2, ^scalar.header2;
  ^b5:
    i32 %78 = add i32 %57, i32 1;
    i1 %79 = icmp sgt i32 %0, i32 %78;
    cbr i1 %79(prob = 0.984615), ^b2, ^b6;
  ^scalar.header1:
    i32 %80 = phi [^super.header, i32 0] [^scalar.header2, i32 %140] [^while.body4, i32 %163];
    i1 %81 = icmp sgt i32 %34, i32 %80;
    cbr i1 %81(prob = 0.75), ^while.body3, ^b3;
  ^if.then:
    i32* %82 = getelementptr &(i32* %71)[i32 %26];
    i32 %83 = load i32* %82;
    i1 %84 = icmp slt i32 %83, i32 0;
    i32* %85 = getelementptr &(i32* %27)[i32 %57];
    i32 %86 = add i32 %58, i32 %73;
    cbr i1 %84(prob = 0.5), ^if.then1, ^if.else;
  ^b6:
    i32 %87 = add i32 %25, i32 1;
    ubr ^while.header2;
  ^while.body2:
    i32 %88 = phi [^super.header1, i32 0] [^while.body2, i32 %137];
    i32* %89 = getelementptr &(i32* %10)[i32 %88];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %8)[i32 %88];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %89)[i64 1];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %89)[i64 2];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %89)[i64 3];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %89)[i64 4];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %91)[i64 4];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %89)[i64 5];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %91)[i64 5];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %89)[i64 6];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %91)[i64 6];
    store i32* %109 with i32 %108;
    i32* %110 = getelementptr &(i32* %89)[i64 7];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %91)[i64 7];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %89)[i64 8];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %91)[i64 8];
    store i32* %115 with i32 %114;
    i32* %116 = getelementptr &(i32* %89)[i64 9];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %91)[i64 9];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %89)[i64 10];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %91)[i64 10];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %89)[i64 11];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %91)[i64 11];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %89)[i64 12];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %91)[i64 12];
    store i32* %127 with i32 %126;
    i32* %128 = getelementptr &(i32* %89)[i64 13];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %91)[i64 13];
    store i32* %130 with i32 %129;
    i32* %131 = getelementptr &(i32* %89)[i64 14];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %91)[i64 14];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %89)[i64 15];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %91)[i64 15];
    store i32* %136 with i32 %135;
    i32 %137 = add i32 %88, i32 16;
    i1 %138 = icmp sgt i32 %77, i32 %137;
    cbr i1 %138(prob = 0.941176), ^while.body2, ^scalar.header2;
  ^scalar.header2:
    i32 %139 = phi [^super.header1, i32 0] [^while.body2, i32 %137];
    i32 %140 = phi [^super.header1, i32 undef] [^while.body2, i32 %137];
    i1 %141 = icmp sgt i32 %75, i32 %139;
    cbr i1 %141(prob = 0.75), ^while.body4, ^scalar.header1;
  ^while.body3 {scalar}:
    i32 %142 = phi [^scalar.header1, i32 %80] [^while.body3, i32 %146];
    i32* %143 = getelementptr &(i32* %10)[i32 %142];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %8)[i32 %142];
    store i32* %145 with i32 %144;
    i32 %146 = add i32 %142, i32 1;
    i1 %147 = icmp sgt i32 %34, i32 %146;
    cbr i1 %147(prob = 0.75), ^while.body3, ^b3;
  ^if.then1:
    store i32* %85 with i32 %86;
    ubr ^b5;
  ^if.else:
    i32 %148 = load i32* %85;
    i1 %149 = icmp slt i32 %86, i32 %148;
    cbr i1 %149(prob = 0.5), ^if.then1, ^b5;
  ^while.body4 {scalar}:
    i32 %150 = phi [^scalar.header2, i32 %139] [^while.body4, i32 %163];
    i32* %151 = getelementptr &(i32* %10)[i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %8)[i32 %150];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %151)[i64 1];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %153)[i64 1];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %151)[i64 2];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %153)[i64 2];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %151)[i64 3];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %153)[i64 3];
    store i32* %162 with i32 %161;
    i32 %163 = add i32 %150, i32 4;
    i1 %164 = icmp sgt i32 %75, i32 %163;
    cbr i1 %164(prob = 0.75), ^while.body4, ^scalar.header1;
}
