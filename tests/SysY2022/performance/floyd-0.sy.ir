internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -4;
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    [2097152 * i32]* %8 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %9 = getelementptr &([2097152 * i32]* %8)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b9, i32 %57];
    i1 %11 = icmp sgt i32 %0, i32 %10;
    cbr i1 %11(prob = 0.984615), ^super.header, ^while.header1;
  ^super.header:
    i32 %12 = add i32 %0, i32 %10;
    cbr i1 %4(prob = 0.941176), ^b, ^b1;
  ^while.header1:
    i32 %13 = phi [^while.header, i32 0] [^b4, i32 %34];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    i32 %15 = mul i32 %0, i32 %13;
    cbr i1 %14(prob = 0.984615), ^while.header2, ^b2;
  ^b:
    i32 %16 = phi [^super.header, i32 0] [^b19, i32 %171];
    i32 %17 = phi [^super.header, i32 0] [^b19, i32 %169];
    i32 %18 = add i32 %10, i32 %16;
    i32* %19 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %18];
    i1 %20 = icmp sle i32 %0, i32 %17;
    cbr i1 %20(prob = 0.5), ^b5, ^b3;
  ^b1 {scalar}:
    i32 %21 = phi [^super.header, i32 0] [^b7, i32 %49] [^b19, i32 %169];
    i32 %22 = phi [^super.header, i32 0] [^b7, i32 %51] [^b19, i32 %171];
    i32 %23 = add i32 %10, i32 %22;
    i32* %24 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %23];
    i1 %25 = icmp sle i32 %0, i32 %21;
    cbr i1 %25(prob = 0.5), ^b7, ^b6;
  ^while.header2:
    i32 %26 = phi [^while.header1, i32 0] [^b23, i32 %179];
    i1 %27 = icmp sgt i32 %0, i32 %26;
    cbr i1 %27(prob = 0.984615), ^while.header3, ^b4;
  ^b2:
    i1 %28 = icmp neq i32 %0, i32 0;
    i32 %29 = mul i32 %0, i32 %0;
    cbr i1 %28(prob = 0.984615), ^super.header1, ^entry1;
  ^b3:
    i32 %30 = mul i32 %0, i32 %17;
    i32 %31 = add i32 %10, i32 %30;
    i32* %32 = getelementptr &(i32* %2)[i32 %31];
    i32 %33 = load i32* %32;
    ubr ^b5;
  ^b4:
    i32 %34 = add i32 %13, i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %35 = phi [^b, i32 -1] [^b3, i32 %33];
    i32 %36 = add i32 %12, i32 %16;
    i32* %37 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %36];
    i32 %38 = add i32 %17, i32 1;
    i1 %39 = icmp sle i32 %0, i32 %38;
    store i32* %19 with i32 %35;
    i32 %40 = add i32 %0, i32 %16;
    cbr i1 %39(prob = 0.5), ^b10, ^b8;
  ^b6:
    i32 %41 = mul i32 %0, i32 %21;
    i32 %42 = add i32 %10, i32 %41;
    i32* %43 = getelementptr &(i32* %2)[i32 %42];
    i32 %44 = load i32* %43;
    ubr ^b7;
  ^while.header3:
    i32 %45 = mul i32 %0, i32 %26;
    i32 %46 = add i32 %13, i32 %45;
    i32* %47 = getelementptr &(i32* %9)[i32 %46];
    cbr i1 %4(prob = 0.941176), ^b11, ^b12;
  ^b7:
    i32 %48 = phi [^b1, i32 -1] [^b6, i32 %44];
    i32 %49 = add i32 %21, i32 1;
    i1 %50 = icmp sgt i32 %0, i32 %49;
    store i32* %24 with i32 %48;
    i32 %51 = add i32 %0, i32 %22;
    cbr i1 %50(prob = 0.75), ^b1, ^b9;
  ^super.header1:
    i1 %52 = icmp sgt i32 %29, i32 4;
    cbr i1 %52(prob = 0.941176), ^super.header2, ^while.body;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %29, i32* %7);
    ret i32 0;
  ^b8:
    i32 %53 = mul i32 %0, i32 %38;
    i32 %54 = add i32 %10, i32 %53;
    i32* %55 = getelementptr &(i32* %2)[i32 %54];
    i32 %56 = load i32* %55;
    ubr ^b10;
  ^b9:
    i32 %57 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b10:
    i32 %58 = phi [^b5, i32 -1] [^b8, i32 %56];
    i32 %59 = add i32 %12, i32 %40;
    i32* %60 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %59];
    i32 %61 = add i32 %17, i32 2;
    i1 %62 = icmp sle i32 %0, i32 %61;
    store i32* %37 with i32 %58;
    i32 %63 = add i32 %0, i32 %40;
    cbr i1 %62(prob = 0.5), ^b14, ^b13;
  ^b11:
    i32 %64 = phi [^while.header3, i32 0] [^b34, i32 %216];
    i32 %65 = load i32* %47;
    i1 %66 = icmp sgt i32 %65, i32 -1;
    cbr i1 %66(prob = 0.5), ^entry2, ^b15;
  ^b12 {scalar}:
    i32 %67 = phi [^while.header3, i32 0] [^b16, i32 %159] [^b34, i32 %216];
    i32 %68 = load i32* %47;
    i1 %69 = icmp sgt i32 %68, i32 -1;
    cbr i1 %69(prob = 0.5), ^entry3, ^b16;
  ^super.header2:
    i32 %70 = add i32 %29, i32 -4;
    i1 %71 = icmp sgt i32 %70, i32 16;
    i32 %72 = add i32 %29, i32 -20;
    cbr i1 %71(prob = 0.941176), ^while.body1, ^while.body2;
  ^while.body {scalar}:
    i32 %73 = phi [^super.header1, i32 0] [^while.body, i32 %77] [^while.body2, i32 %157];
    i32* %74 = getelementptr &(i32* %9)[i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %7)[i32 %73];
    store i32* %76 with i32 %75;
    i32 %77 = add i32 %73, i32 1;
    i1 %78 = icmp sgt i32 %29, i32 %77;
    cbr i1 %78(prob = 0.75), ^while.body, ^entry1;
  ^b13:
    i32 %79 = mul i32 %0, i32 %61;
    i32 %80 = add i32 %10, i32 %79;
    i32* %81 = getelementptr &(i32* %2)[i32 %80];
    i32 %82 = load i32* %81;
    ubr ^b14;
  ^b14:
    i32 %83 = phi [^b10, i32 -1] [^b13, i32 %82];
    i32 %84 = add i32 %12, i32 %63;
    i32* %85 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %84];
    i32 %86 = add i32 %17, i32 3;
    i1 %87 = icmp sle i32 %0, i32 %86;
    store i32* %60 with i32 %83;
    i32 %88 = add i32 %0, i32 %63;
    cbr i1 %87(prob = 0.5), ^b19, ^b17;
  ^entry2:
    i1 %89 = icmp sle i32 %0, i32 %64;
    cbr i1 %89(prob = 0.5), ^b20, ^b18;
  ^while.body1:
    i32 %90 = phi [^super.header2, i32 0] [^while.body1, i32 %139];
    i32* %91 = getelementptr &(i32* %9)[i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %7)[i32 %90];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %91)[i64 4];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %93)[i64 4];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %91)[i64 5];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %93)[i64 5];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %91)[i64 6];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %93)[i64 6];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %91)[i64 7];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %93)[i64 7];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %91)[i64 8];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %93)[i64 8];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %91)[i64 9];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %93)[i64 9];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %91)[i64 10];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %93)[i64 10];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %91)[i64 11];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %93)[i64 11];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %91)[i64 12];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %93)[i64 12];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %91)[i64 13];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %93)[i64 13];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %91)[i64 14];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %93)[i64 14];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %91)[i64 15];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %93)[i64 15];
    store i32* %138 with i32 %137;
    i32 %139 = add i32 %90, i32 16;
    i1 %140 = icmp sgt i32 %72, i32 %139;
    cbr i1 %140(prob = 0.941176), ^while.body1, ^while.body2;
  ^entry3:
    i1 %141 = icmp sle i32 %0, i32 %67;
    cbr i1 %141(prob = 0.5), ^b22, ^b21;
  ^b15:
    i32 %142 = phi [^b11, i32 %65] [^indirect, i32 %184];
    i1 %143 = icmp sgt i32 %142, i32 -1;
    cbr i1 %143(prob = 0.5), ^entry4, ^b24;
  ^while.body2 {scalar}:
    i32 %144 = phi [^super.header2, i32 0] [^while.body1, i32 %139] [^while.body2, i32 %157];
    i32* %145 = getelementptr &(i32* %9)[i32 %144];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %7)[i32 %144];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %145)[i64 1];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %147)[i64 1];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %145)[i64 2];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %147)[i64 2];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %145)[i64 3];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %147)[i64 3];
    store i32* %156 with i32 %155;
    i32 %157 = add i32 %144, i32 4;
    i1 %158 = icmp sgt i32 %70, i32 %157;
    cbr i1 %158(prob = 0.75), ^while.body2, ^while.body;
  ^b16:
    i32 %159 = add i32 %67, i32 1;
    i1 %160 = icmp sgt i32 %0, i32 %159;
    cbr i1 %160(prob = 0.75), ^b12, ^b23;
  ^b17:
    i32 %161 = mul i32 %0, i32 %86;
    i32 %162 = add i32 %10, i32 %161;
    i32* %163 = getelementptr &(i32* %2)[i32 %162];
    i32 %164 = load i32* %163;
    ubr ^b19;
  ^b18:
    i32 %165 = add i32 %15, i32 %64;
    i32* %166 = getelementptr &(i32* %9)[i32 %165];
    i32 %167 = load i32* %166;
    ubr ^b20;
  ^b19:
    i32 %168 = phi [^b14, i32 -1] [^b17, i32 %164];
    i32 %169 = add i32 %17, i32 4;
    i1 %170 = icmp sgt i32 %5, i32 %169;
    store i32* %85 with i32 %168;
    i32 %171 = add i32 %0, i32 %88;
    cbr i1 %170(prob = 0.941176), ^b, ^b1;
  ^b20:
    i32 %172 = phi [^entry2, i32 -1] [^b18, i32 %167];
    i1 %173 = icmp sgt i32 %172, i32 -1;
    cbr i1 %173(prob = 0.5), ^entry5, ^indirect;
  ^b21:
    i32 %174 = add i32 %15, i32 %67;
    i32* %175 = getelementptr &(i32* %9)[i32 %174];
    i32 %176 = load i32* %175;
    ubr ^b22;
  ^b22:
    i32 %177 = phi [^entry3, i32 -1] [^b21, i32 %176];
    i1 %178 = icmp sgt i32 %177, i32 -1;
    cbr i1 %178(prob = 0.5), ^entry6, ^b16;
  ^b23:
    i32 %179 = add i32 %26, i32 1;
    ubr ^while.header2;
  ^entry4:
    i32 %180 = add i32 %64, i32 1;
    i1 %181 = icmp sle i32 %0, i32 %180;
    cbr i1 %181(prob = 0.5), ^b26, ^b25;
  ^b24:
    i32 %182 = load i32* %47;
    i1 %183 = icmp sgt i32 %182, i32 -1;
    cbr i1 %183(prob = 0.5), ^entry7, ^b27;
  ^indirect:
    i32 %184 = load i32* %47;
    ubr ^b15;
  ^entry5:
    i32 %185 = add i32 %45, i32 %64;
    cbr i1 %89(prob = 0.5), ^b29, ^b28;
  ^b25:
    i32 %186 = add i32 %15, i32 %180;
    i32* %187 = getelementptr &(i32* %9)[i32 %186];
    i32 %188 = load i32* %187;
    ubr ^b26;
  ^entry6:
    i32 %189 = add i32 %45, i32 %67;
    cbr i1 %141(prob = 0.5), ^b31, ^b30;
  ^b26:
    i32 %190 = phi [^entry4, i32 -1] [^b25, i32 %188];
    i1 %191 = icmp sgt i32 %190, i32 -1;
    cbr i1 %191(prob = 0.5), ^entry8, ^b24;
  ^entry7:
    i32 %192 = add i32 %64, i32 2;
    i1 %193 = icmp sle i32 %0, i32 %192;
    cbr i1 %193(prob = 0.5), ^b33, ^b32;
  ^b27:
    i32 %194 = phi [^b24, i32 %182] [^indirect1, i32 %226];
    i1 %195 = icmp sgt i32 %194, i32 -1;
    cbr i1 %195(prob = 0.5), ^entry9, ^b34;
  ^b28:
    i32* %196 = getelementptr &(i32* %9)[i32 %185];
    i32 %197 = load i32* %196;
    ubr ^b29;
  ^b29:
    i32 %198 = phi [^entry5, i32 -1] [^b28, i32 %197];
    i32* %199 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %185];
    i32 %200 = add i32 %65, i32 %172;
    i1 %201 = icmp slt i32 %198, i32 0;
    cbr i1 %201(prob = 0.5), ^if.then, ^if.else;
  ^b30:
    i32* %202 = getelementptr &(i32* %9)[i32 %189];
    i32 %203 = load i32* %202;
    ubr ^b31;
  ^b31:
    i32 %204 = phi [^entry6, i32 -1] [^b30, i32 %203];
    i32* %205 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %189];
    i32 %206 = add i32 %68, i32 %177;
    i1 %207 = icmp slt i32 %204, i32 0;
    cbr i1 %207(prob = 0.5), ^if.then1, ^if.else1;
  ^entry8:
    i32 %208 = add i32 %45, i32 %180;
    cbr i1 %181(prob = 0.5), ^b36, ^b35;
  ^b32:
    i32 %209 = add i32 %15, i32 %192;
    i32* %210 = getelementptr &(i32* %9)[i32 %209];
    i32 %211 = load i32* %210;
    ubr ^b33;
  ^b33:
    i32 %212 = phi [^entry7, i32 -1] [^b32, i32 %211];
    i1 %213 = icmp sgt i32 %212, i32 -1;
    cbr i1 %213(prob = 0.5), ^entry10, ^indirect1;
  ^entry9:
    i32 %214 = add i32 %64, i32 3;
    i1 %215 = icmp sle i32 %0, i32 %214;
    cbr i1 %215(prob = 0.5), ^b38, ^b37;
  ^b34:
    i32 %216 = add i32 %64, i32 4;
    i1 %217 = icmp sgt i32 %5, i32 %216;
    cbr i1 %217(prob = 0.941176), ^b11, ^b12;
  ^if.then:
    store i32* %199 with i32 %200;
    ubr ^indirect;
  ^if.then1:
    store i32* %205 with i32 %206;
    ubr ^b16;
  ^b35:
    i32* %218 = getelementptr &(i32* %9)[i32 %208];
    i32 %219 = load i32* %218;
    ubr ^b36;
  ^if.else:
    i32 %220 = load i32* %199;
    i1 %221 = icmp slt i32 %200, i32 %220;
    cbr i1 %221(prob = 0.5), ^if.then, ^indirect;
  ^b36:
    i32 %222 = phi [^entry8, i32 -1] [^b35, i32 %219];
    i32* %223 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %208];
    i32 %224 = add i32 %142, i32 %190;
    i1 %225 = icmp slt i32 %222, i32 0;
    cbr i1 %225(prob = 0.5), ^if.then2, ^if.else2;
  ^indirect1:
    i32 %226 = load i32* %47;
    ubr ^b27;
  ^if.else1:
    i32 %227 = load i32* %205;
    i1 %228 = icmp slt i32 %206, i32 %227;
    cbr i1 %228(prob = 0.5), ^if.then1, ^b16;
  ^entry10:
    i32 %229 = add i32 %45, i32 %192;
    cbr i1 %193(prob = 0.5), ^b40, ^b39;
  ^b37:
    i32 %230 = add i32 %15, i32 %214;
    i32* %231 = getelementptr &(i32* %9)[i32 %230];
    i32 %232 = load i32* %231;
    ubr ^b38;
  ^b38:
    i32 %233 = phi [^entry9, i32 -1] [^b37, i32 %232];
    i1 %234 = icmp sgt i32 %233, i32 -1;
    cbr i1 %234(prob = 0.5), ^entry11, ^b34;
  ^if.then2:
    store i32* %223 with i32 %224;
    ubr ^b24;
  ^b39:
    i32* %235 = getelementptr &(i32* %9)[i32 %229];
    i32 %236 = load i32* %235;
    ubr ^b40;
  ^if.else2:
    i32 %237 = load i32* %223;
    i1 %238 = icmp slt i32 %224, i32 %237;
    cbr i1 %238(prob = 0.5), ^if.then2, ^b24;
  ^b40:
    i32 %239 = phi [^entry10, i32 -1] [^b39, i32 %236];
    i32* %240 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %229];
    i32 %241 = add i32 %182, i32 %212;
    i1 %242 = icmp slt i32 %239, i32 0;
    cbr i1 %242(prob = 0.5), ^if.then3, ^if.else3;
  ^entry11:
    i32 %243 = add i32 %45, i32 %214;
    cbr i1 %215(prob = 0.5), ^b42, ^b41;
  ^if.then3:
    store i32* %240 with i32 %241;
    ubr ^indirect1;
  ^b41:
    i32* %244 = getelementptr &(i32* %9)[i32 %243];
    i32 %245 = load i32* %244;
    ubr ^b42;
  ^if.else3:
    i32 %246 = load i32* %240;
    i1 %247 = icmp slt i32 %241, i32 %246;
    cbr i1 %247(prob = 0.5), ^if.then3, ^indirect1;
  ^b42:
    i32 %248 = phi [^entry11, i32 -1] [^b41, i32 %245];
    i32* %249 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %243];
    i32 %250 = add i32 %194, i32 %233;
    i1 %251 = icmp slt i32 %248, i32 0;
    cbr i1 %251(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    store i32* %249 with i32 %250;
    ubr ^b34;
  ^if.else4:
    i32 %252 = load i32* %249;
    i1 %253 = icmp slt i32 %250, i32 %252;
    cbr i1 %253(prob = 0.5), ^if.then4, ^b34;
}
