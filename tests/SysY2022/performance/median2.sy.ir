internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @meanless_calculation(i32 %x, i32 %y, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %6] [^entry, i32 0];
    i32 %2 = phi [^while.body, i32 %8] [^entry, i32 0];
    i1 %3 = scmp lt i32 %1, i32 %x;
    cbr i1 %3(prob = 0.5), ^b, ^b1;
^b:
    i1 %4 = scmp lt i32 %1, i32 %y;
    ubr ^b1;
^b1:
    i1 %5 = phi [^b, i1 %4] [^while.header, i1 false];
    cbr i1 %5(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %6 = add i32 %1, i32 1;
    i32 %7 = add i32 %2, i32 %x;
    i32 %8 = add i32 %7, i32 %6;
    ubr ^while.header;
^b2:
    ret i32 %2;
}
internal func @swap(i32* %arr, i32 %l, i32 %r, i32* %0) -> i32 { NoRecurse } {
^entry:
    i32* %1 = getelementptr &(i32* %arr)[i32 %l];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &(i32* %arr)[i32 %r];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    store i32* %3 with i32 %2;
    i32 %5 = call (i32, i32, i32*) -> i32 @meanless_calculation(i32 %l, i32 %r, i32* %0);
    ret i32 %5;
}
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %2 = load i32* %1;
    store i32* %pivot with i32 %2;
    store i32* %l with i32 %begin;
    i32 %3 = add i32 %end, i32 1;
    store i32* %r with i32 %3;
    store i32* %xx with i32 0;
    ubr ^while.header;
^while.header:
    i32* %4 = phi [^if.else, i32* %28] [^b, i32* %4] [^entry, i32* %arr];
    i32 %5 = phi [^if.else, i32 %29] [^b, i32 %5] [^entry, i32 %begin];
    i32 %6 = phi [^if.else, i32 %30] [^b, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^if.else, i32 %31] [^b, i32 %7] [^entry, i32 %begin];
    i32 %8 = phi [^if.else, i32 %32] [^b, i32 %11] [^entry, i32 %3];
    i32 %9 = phi [^if.else, i32 %33] [^b, i32 %19] [^entry, i32 0];
    i1 %10 = scmp lt i32 %7, i32 %8;
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %11 = add i32 %8, i32 -1;
    store i32* %r with i32 %11;
    i32* %12 = getelementptr &(i32* %4)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %13, i32 %6;
    cbr i1 %14(prob = 0.5), ^while.header1, ^b;
^while.header1:
    i32 %15 = phi [^b2, i32 %20] [^while.body, i32 %7] [^while.header, i32 %7];
    i32 %16 = phi [^b2, i32 %16] [^while.body, i32 %11] [^while.header, i32 %8];
    i32 %17 = phi [^b2, i32 %26] [^while.body, i32 %9] [^while.header, i32 %9];
    i1 %18 = scmp lt i32 %15, i32 %16;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %19 = add i32 %9, i32 1;
    store i32* %xx with i32 %19;
    ubr ^while.header;
^while.body1:
    i32 %20 = add i32 %15, i32 1;
    store i32* %l with i32 %20;
    i32* %21 = getelementptr &(i32* %4)[i32 %20];
    i32 %22 = load i32* %21;
    i1 %23 = scmp ge i32 %22, i32 %6;
    cbr i1 %23(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %24 = phi [^while.body1, i32 %20] [^while.header1, i32 %15];
    i1 %25 = scmp eq i32 %24, i32 %16;
    cbr i1 %25(prob = 0.5), ^b3, ^if.else;
^b2:
    i32 %26 = add i32 %17, i32 -1;
    store i32* %xx with i32 %26;
    ubr ^while.header1;
^if.else:
    i32 %27 = call (i32*, i32, i32, i32*) -> i32 @swap(i32* %4, i32 %24, i32 %16, i32* %0);
    i32* %28 = load i32** %arr1;
    i32 %29 = load i32* %begin1;
    i32 %30 = load i32* %pivot;
    i32 %31 = load i32* %l;
    i32 %32 = load i32* %r;
    i32 %33 = load i32* %xx;
    ubr ^while.header;
^b3:
    i32* %34 = getelementptr &(i32* %4)[i32 %5];
    store i32* %34 with i32 %6;
    i32 %35 = load i32* %begin1;
    i32 %36 = load i32* %l;
    i32 %37 = call (i32*, i32, i32, i32*) -> i32 @swap(i32* %4, i32 %35, i32 %36, i32* %0);
    i32* %38 = load i32** %arr1;
    i32 %39 = load i32* %begin1;
    i32 %40 = load i32* %end1;
    i32 %41 = load i32* %pos1;
    i32 %42 = load i32* %l;
    i32 %43 = load i32* %xx;
    i1 %44 = scmp gt i32 %42, i32 %41;
    cbr i1 %44(prob = 0.5), ^if.then, ^b4;
^b4:
    i1 %45 = scmp lt i32 %42, i32 %41;
    cbr i1 %45(prob = 0.5), ^if.then1, ^b5;
^if.then:
    i32 %46 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %38, i32 %39, i32 %42, i32 %41, i32* %0);
    ret i32 %46;
^if.then1:
    i32 %47 = add i32 %42, i32 1;
    i32 %48 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %38, i32 %47, i32 %40, i32 %41, i32* %0);
    ret i32 %48;
^b5:
    ret i32 %43;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
