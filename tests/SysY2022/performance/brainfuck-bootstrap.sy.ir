internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [512 * i32]* %return_a = alloc [512 * i32];
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1(prob = 0.5), ^b, ^b1;
^b:
    i1 %2 = scmp neq i32 %0, i32 60;
    cbr i1 %2(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %3 = phi [^entry, i32 %0] [^b, i32 %0] [^b2, i32 %0] [^b4, i32 %0] [^b8, i32 %0] [^b11, i32 %0] [^b13, i32 %0] [^b15, i32 %0] [^b17, i32 %0] [^b36, i32 %86] [^b37, i32 %86];
    i1 %4 = scmp neq i32 %3, i32 35;
    cbr i1 %4(prob = 0.97), ^while.body, ^b3;
^b2:
    i1 %5 = scmp neq i32 %0, i32 43;
    cbr i1 %5(prob = 0.5), ^b4, ^b1;
^while.body:
    i32 %6 = phi [^b1, i32 %3] [^b6, i32 %19];
    i32 %7 = phi [^b1, i32 0] [^b6, i32 %20];
    i32* %8 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 62;
    cbr i1 %10(prob = 0.5), ^b5, ^b6;
^b3:
    i32 %11 = phi [^b1, i32 0] [^b6, i32 %20];
    i32 %12 = call () -> i32 @getch();
    i1 %13 = scmp neq i32 %12, i32 105;
    cbr i1 %13(prob = 0.5), ^entry1, ^b7;
^b4:
    i1 %14 = scmp neq i32 %0, i32 45;
    cbr i1 %14(prob = 0.5), ^b8, ^b1;
^entry1:
    i32 %15 = phi [^b3, i32 0] [^b7, i32 %22] [^while.body1, i32 %22];
    call (i32) -> void @starttime(i32 116);
    i32* %16 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %17 = ptrcast i32* %16 to i8*;
    ubr ^b10;
^b5:
    i1 %18 = scmp neq i32 %9, i32 60;
    cbr i1 %18(prob = 0.5), ^b9, ^b6;
^b6:
    i32 %19 = phi [^while.body, i32 %9] [^b5, i32 %9] [^b9, i32 %9] [^b12, i32 %9] [^b14, i32 %9] [^b16, i32 %9] [^b18, i32 %9] [^b20, i32 %9] [^b23, i32 %9] [^while.body5, i32 %103] [^b30, i32 %103] [^b35, i32 %103] [^b42, i32 %103] [^b43, i32 %103] [^b44, i32 %103] [^b45, i32 %103] [^b46, i32 %103];
    i32 %20 = add i32 %7, i32 1;
    i1 %21 = scmp neq i32 %19, i32 35;
    cbr i1 %21(prob = 0.97), ^while.body, ^b3;
^b7:
    i32 %22 = call () -> i32 @getint();
    i32 %23 = call () -> i32 @getch();
    i1 %24 = scmp gt i32 %22, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body1, ^entry1;
^b8:
    i1 %25 = scmp neq i32 %0, i32 91;
    cbr i1 %25(prob = 0.5), ^b11, ^b1;
^b9:
    i1 %26 = scmp neq i32 %9, i32 43;
    cbr i1 %26(prob = 0.5), ^b12, ^b6;
^b10:
    i64 %27 = phi [^entry1, i64 0] [^b10, i64 %44];
    i8* %28 = getelementptr &(i8* %17)[i64 %27];
    store i8* %28 with i8 0;
    i8* %29 = getelementptr &(i8* %28)[i64 1];
    store i8* %29 with i8 0;
    i8* %30 = getelementptr &(i8* %28)[i64 2];
    store i8* %30 with i8 0;
    i8* %31 = getelementptr &(i8* %28)[i64 3];
    store i8* %31 with i8 0;
    i8* %32 = getelementptr &(i8* %28)[i64 4];
    store i8* %32 with i8 0;
    i8* %33 = getelementptr &(i8* %28)[i64 5];
    store i8* %33 with i8 0;
    i8* %34 = getelementptr &(i8* %28)[i64 6];
    store i8* %34 with i8 0;
    i8* %35 = getelementptr &(i8* %28)[i64 7];
    store i8* %35 with i8 0;
    i8* %36 = getelementptr &(i8* %28)[i64 8];
    store i8* %36 with i8 0;
    i8* %37 = getelementptr &(i8* %28)[i64 9];
    store i8* %37 with i8 0;
    i8* %38 = getelementptr &(i8* %28)[i64 10];
    store i8* %38 with i8 0;
    i8* %39 = getelementptr &(i8* %28)[i64 11];
    store i8* %39 with i8 0;
    i8* %40 = getelementptr &(i8* %28)[i64 12];
    store i8* %40 with i8 0;
    i8* %41 = getelementptr &(i8* %28)[i64 13];
    store i8* %41 with i8 0;
    i8* %42 = getelementptr &(i8* %28)[i64 14];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %28)[i64 15];
    store i8* %43 with i8 0;
    i64 %44 = add i64 %27, i64 16;
    i1 %45 = scmp lt i64 %44, i64 2048;
    cbr i1 %45(prob = 0.99), ^b10, ^entry2;
^while.body1:
    i32 %46 = phi [^b7, i32 0] [^while.body1, i32 %49];
    i32* %47 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %46];
    i32 %48 = call () -> i32 @getch();
    store i32* %47 with i32 %48;
    i32 %49 = add i32 %46, i32 1;
    i1 %50 = scmp lt i32 %49, i32 %22;
    cbr i1 %50(prob = 0.97), ^while.body1, ^entry1;
^b11:
    i1 %51 = scmp neq i32 %0, i32 93;
    cbr i1 %51(prob = 0.5), ^b13, ^b1;
^b12:
    i1 %52 = scmp neq i32 %9, i32 45;
    cbr i1 %52(prob = 0.5), ^b14, ^b6;
^entry2:
    i1 %53 = scmp gt i32 %11, i32 0;
    cbr i1 %53(prob = 0.97), ^while.body2, ^entry3;
^b13:
    i1 %54 = scmp neq i32 %0, i32 46;
    cbr i1 %54(prob = 0.5), ^b15, ^b1;
^b14:
    i1 %55 = scmp neq i32 %9, i32 91;
    cbr i1 %55(prob = 0.5), ^b16, ^b6;
^while.body2:
    i32 %56 = phi [^entry2, i32 0] [^b19, i32 %78];
    i32 %57 = phi [^entry2, i32 0] [^b19, i32 %79];
    i32 %58 = phi [^entry2, i32 0] [^b19, i32 %80];
    i32 %59 = phi [^entry2, i32 0] [^b19, i32 %83];
    i32 %60 = phi [^entry2, i32 0] [^b19, i32 %81];
    i32* %61 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %59];
    i32 %62 = load i32* %61;
    i1 %63 = scmp eq i32 %62, i32 62;
    cbr i1 %63(prob = 0.5), ^if.then, ^if.else;
^entry3:
    i32 %64 = phi [^entry2, i32 0] [^b19, i32 %78];
    call (i32) -> void @stoptime(i32 118);
    i1 %65 = scmp gt i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body3, ^entry4;
^b15:
    i1 %66 = scmp neq i32 %0, i32 44;
    cbr i1 %66(prob = 0.5), ^b17, ^b1;
^if.then:
    i32 %67 = add i32 %60, i32 1;
    ubr ^b19;
^b16:
    i1 %68 = scmp neq i32 %9, i32 93;
    cbr i1 %68(prob = 0.5), ^b18, ^b6;
^if.else:
    i1 %69 = scmp eq i32 %62, i32 60;
    cbr i1 %69(prob = 0.5), ^if.then1, ^if.else1;
^while.body3:
    i32 %70 = phi [^entry3, i32 0] [^while.body3, i32 %73];
    i32* %71 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    call (i32) -> void @putch(i32 %72);
    i32 %73 = add i32 %70, i32 1;
    i1 %74 = scmp lt i32 %73, i32 %64;
    cbr i1 %74(prob = 0.97), ^while.body3, ^entry4;
^entry4:
    ret i32 0;
^b17:
    i1 %75 = scmp neq i32 %0, i32 35;
    cbr i1 %75(prob = 0.97), ^while.body4, ^b1;
^b18:
    i1 %76 = scmp neq i32 %9, i32 46;
    cbr i1 %76(prob = 0.5), ^b20, ^b6;
^if.then1:
    i32 %77 = add i32 %60, i32 -1;
    ubr ^b19;
^b19:
    i32 %78 = phi [^if.then, i32 %56] [^if.then1, i32 %56] [^if.then2, i32 %56] [^if.then3, i32 %56] [^if.then5, i32 %56] [^if.then7, i32 %56] [^if.else6, i32 %56] [^if.then9, i32 %140] [^if.else7, i32 %56] [^b41, i32 %56] [^if.then12, i32 %56] [^if.else8, i32 %56];
    i32 %79 = phi [^if.then, i32 %57] [^if.then1, i32 %57] [^if.then2, i32 %57] [^if.then3, i32 %57] [^if.then5, i32 %57] [^if.then7, i32 %57] [^if.else6, i32 %57] [^if.then9, i32 %57] [^if.else7, i32 %57] [^b41, i32 %57] [^if.then12, i32 %57] [^if.else8, i32 %156];
    i32 %80 = phi [^if.then, i32 %58] [^if.then1, i32 %58] [^if.then2, i32 %58] [^if.then3, i32 %58] [^if.then5, i32 %116] [^if.then7, i32 %132] [^if.else6, i32 %58] [^if.then9, i32 %58] [^if.else7, i32 %58] [^b41, i32 %58] [^if.then12, i32 %58] [^if.else8, i32 %58];
    i32 %81 = phi [^if.then, i32 %67] [^if.then1, i32 %77] [^if.then2, i32 %60] [^if.then3, i32 %60] [^if.then5, i32 %60] [^if.then7, i32 %60] [^if.else6, i32 %60] [^if.then9, i32 %60] [^if.else7, i32 %60] [^b41, i32 %60] [^if.then12, i32 %60] [^if.else8, i32 %60];
    i32 %82 = phi [^if.then, i32 %59] [^if.then1, i32 %59] [^if.then2, i32 %59] [^if.then3, i32 %59] [^if.then5, i32 %59] [^if.then7, i32 %59] [^if.else6, i32 %136] [^if.then9, i32 %59] [^if.else7, i32 %59] [^b41, i32 %122] [^if.then12, i32 %59] [^if.else8, i32 %59];
    i32 %83 = add i32 %82, i32 1;
    i1 %84 = scmp lt i32 %83, i32 %11;
    cbr i1 %84(prob = 0.97), ^while.body2, ^entry3;
^if.else1:
    i1 %85 = scmp eq i32 %62, i32 43;
    cbr i1 %85(prob = 0.5), ^if.then2, ^if.else2;
^while.body4:
    i32 %86 = call () -> i32 @getch();
    i1 %87 = scmp neq i32 %86, i32 62;
    cbr i1 %87(prob = 0.5), ^b21, ^b22;
^b20:
    i1 %88 = scmp neq i32 %9, i32 44;
    cbr i1 %88(prob = 0.5), ^b23, ^b6;
^if.then2:
    i32* %89 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %90, i32 1;
    store i32* %89 with i32 %91;
    ubr ^b19;
^if.else2:
    i1 %92 = scmp eq i32 %62, i32 45;
    cbr i1 %92(prob = 0.5), ^if.then3, ^if.else3;
^b21:
    i1 %93 = scmp neq i32 %86, i32 60;
    cbr i1 %93(prob = 0.5), ^b24, ^b26;
^b22:
    i1 %94 = phi [^while.body4, i1 false] [^b24, i1 %100];
    cbr i1 %94(prob = 0.5), ^b25, ^b27;
^b23:
    i1 %95 = scmp neq i32 %9, i32 35;
    cbr i1 %95(prob = 0.97), ^while.body5, ^b6;
^if.then3:
    i32* %96 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %97, i32 -1;
    store i32* %96 with i32 %98;
    ubr ^b19;
^if.else3:
    i1 %99 = scmp eq i32 %62, i32 91;
    cbr i1 %99(prob = 0.5), ^if.then4, ^if.else4;
^b24:
    i1 %100 = scmp neq i32 %86, i32 43;
    ubr ^b22;
^b25:
    i1 %101 = scmp neq i32 %86, i32 45;
    ubr ^b26;
^b26:
    i1 %102 = phi [^b21, i1 false] [^b25, i1 %101];
    cbr i1 %102(prob = 0.5), ^b28, ^b31;
^while.body5:
    i32 %103 = call () -> i32 @getch();
    i1 %104 = scmp neq i32 %103, i32 62;
    cbr i1 %104(prob = 0.5), ^b30, ^b6;
^b27:
    i1 %105 = phi [^b22, i1 false] [^b28, i1 %110];
    cbr i1 %105(prob = 0.5), ^b29, ^b32;
^if.then4:
    i32* %106 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32 %107 = load i32* %106;
    i1 %108 = scmp neq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^if.then5, ^while.body6;
^if.else4:
    i1 %109 = scmp eq i32 %62, i32 93;
    cbr i1 %109(prob = 0.5), ^if.then6, ^if.else5;
^b28:
    i1 %110 = scmp neq i32 %86, i32 91;
    ubr ^b27;
^b29:
    i1 %111 = scmp neq i32 %86, i32 93;
    ubr ^b31;
^b30:
    i1 %112 = scmp neq i32 %103, i32 60;
    cbr i1 %112(prob = 0.5), ^b35, ^b6;
^b31:
    i1 %113 = phi [^b26, i1 false] [^b29, i1 %111];
    cbr i1 %113(prob = 0.5), ^b33, ^b36;
^b32:
    i1 %114 = phi [^b27, i1 false] [^b33, i1 %127];
    cbr i1 %114(prob = 0.5), ^b34, ^b37;
^if.then5:
    i32* %115 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %58];
    store i32* %115 with i32 %59;
    i32 %116 = add i32 %58, i32 1;
    ubr ^b19;
^if.then6:
    i32* %117 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32 %118 = load i32* %117;
    i1 %119 = scmp eq i32 %118, i32 0;
    cbr i1 %119(prob = 0.5), ^if.then7, ^if.else6;
^while.body6:
    i32 %120 = phi [^if.then4, i32 1] [^b41, i32 %148];
    i32 %121 = phi [^if.then4, i32 %59] [^b41, i32 %122];
    i32 %122 = add i32 %121, i32 1;
    i32* %123 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %122];
    i32 %124 = load i32* %123;
    i1 %125 = scmp eq i32 %124, i32 93;
    cbr i1 %125(prob = 0.5), ^if.then8, ^b38;
^if.else5:
    i1 %126 = scmp eq i32 %62, i32 46;
    cbr i1 %126(prob = 0.5), ^if.then9, ^if.else7;
^b33:
    i1 %127 = scmp neq i32 %86, i32 46;
    ubr ^b32;
^b34:
    i1 %128 = scmp neq i32 %86, i32 44;
    ubr ^b36;
^b35:
    i1 %129 = scmp neq i32 %103, i32 43;
    cbr i1 %129(prob = 0.5), ^b40, ^b6;
^b36:
    i1 %130 = phi [^b31, i1 false] [^b34, i1 %128];
    cbr i1 %130(prob = 0.5), ^b39, ^b1;
^b37:
    i1 %131 = phi [^b32, i1 false] [^b39, i1 %144];
    cbr i1 %131(prob = 0.97), ^while.body4, ^b1;
^if.then7:
    i32 %132 = add i32 %58, i32 -1;
    ubr ^b19;
^if.then8:
    i32 %133 = add i32 %120, i32 -1;
    ubr ^b38;
^if.else6:
    i32 %134 = add i32 %58, i32 -1;
    i32* %135 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %134];
    i32 %136 = load i32* %135;
    ubr ^b19;
^if.then9:
    i32* %137 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %56];
    i32* %138 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32 %139 = load i32* %138;
    store i32* %137 with i32 %139;
    i32 %140 = add i32 %56, i32 1;
    ubr ^b19;
^b38:
    i32 %141 = phi [^while.body6, i32 %120] [^if.then8, i32 %133];
    i1 %142 = scmp eq i32 %124, i32 91;
    cbr i1 %142(prob = 0.5), ^if.then10, ^b41;
^if.else7:
    i1 %143 = scmp eq i32 %62, i32 44;
    cbr i1 %143(prob = 0.5), ^if.then11, ^b19;
^b39:
    i1 %144 = scmp neq i32 %86, i32 35;
    ubr ^b37;
^b40:
    i1 %145 = scmp neq i32 %103, i32 45;
    cbr i1 %145(prob = 0.5), ^b42, ^b43;
^if.then10:
    i32 %146 = add i32 %141, i32 1;
    ubr ^b41;
^if.then11:
    i1 %147 = scmp ge i32 %57, i32 %15;
    cbr i1 %147(prob = 0.5), ^if.then12, ^if.else8;
^b41:
    i32 %148 = phi [^b38, i32 %141] [^if.then10, i32 %146];
    i1 %149 = scmp gt i32 %148, i32 0;
    cbr i1 %149(prob = 0.97), ^while.body6, ^b19;
^b42:
    i1 %150 = scmp neq i32 %103, i32 91;
    cbr i1 %150(prob = 0.5), ^b44, ^b6;
^b43:
    i1 %151 = phi [^b40, i1 false] [^b47, i1 %160];
    cbr i1 %151(prob = 0.5), ^b45, ^b6;
^if.then12:
    i32* %152 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    store i32* %152 with i32 0;
    ubr ^b19;
^if.else8:
    i32* %153 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %60];
    i32* %154 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %57];
    i32 %155 = load i32* %154;
    store i32* %153 with i32 %155;
    i32 %156 = add i32 %57, i32 1;
    ubr ^b19;
^b44:
    i1 %157 = scmp neq i32 %103, i32 93;
    cbr i1 %157(prob = 0.5), ^b46, ^b6;
^b45:
    i1 %158 = scmp neq i32 %103, i32 35;
    cbr i1 %158(prob = 0.97), ^while.body5, ^b6;
^b46:
    i1 %159 = scmp neq i32 %103, i32 46;
    cbr i1 %159(prob = 0.5), ^b47, ^b6;
^b47:
    i1 %160 = scmp neq i32 %103, i32 44;
    ubr ^b43;
}
