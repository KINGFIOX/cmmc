internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset(i8*, i32, i32) -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %program_length = alloc i32;
    store i32* %program_length with i32 0;
    i32* %input_length = alloc i32;
    store i32* %input_length with i32 0;
    i32* %get = alloc i32;
    i32* %get1 = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %get1 with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b i32* %get1, i32* %get, i32* %input_length, i32* %program_length, i32* %program_length, i32* %input_length, i32 %0 ], [ ^b1 i32* %get, i32* %input_length, i32* %program_length, i32* %program_length, i32* %input_length, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 60;
    cbr i1 %0, [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    store i32* %arg with i32 %arg5;
    i1 %0 = scmp neq i32 %arg5, i32 35;
    cbr i1 %0, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32 0, i32 %arg5 ], [ ^b3 i32* %arg1, i32* %arg4, i32* %arg3 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 43;
    cbr i1 %0, [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg6;
    i32* %get = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %get with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2, [ ^b5 i32* %get, i32* %arg, i32 %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 %1 ], [ ^b6 i32* %arg, i32 %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 %1 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 105;
    cbr i1 %1, [ ^entry1 i32* %arg1, i32* %arg2 ], [ ^b7 i32* %arg, i32* %arg2, i32* %arg1 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 45;
    cbr i1 %0, [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b5(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 60;
    cbr i1 %0, [ ^b9 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^entry1(i32* %arg, i32* %arg1):
    call (i32) -> void @starttime(i32 116);
    i32* %ip = alloc i32;
    store i32* %ip with i32 0;
    i32* %read_head = alloc i32;
    store i32* %read_head with i32 0;
    i32* %input_head = alloc i32;
    store i32* %input_head with i32 0;
    [512 * i32]* %return_address = alloc [512 * i32];
    i32* %0 = getelementptr &([512 * i32]* %return_address)[i32 0][i32 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i32) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i32 2048);
    i32 %3 = load i32* %input_head;
    i32 %4 = load i32* %read_head;
    i32 %5 = load i32* %ip;
    i32 %6 = load i32* %arg;
    i32 %7 = load i32* %arg1;
    i1 %8 = scmp lt i32 %5, i32 %7;
    cbr i1 %8, [ ^while.body1 [512 * i32]* %return_address, i32 %7, i32 %6, i32 0, i32 %5, i32 %4, i32 %3, i32 0 ], [ ^entry2 i32 0 ];
^b6(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg with i32 %arg6;
    i32 %0 = add i32 %arg1, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp neq i32 %arg6, i32 35;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32 %0, i32 %arg6 ], [ ^b3 i32* %arg3, i32* %arg5, i32* %arg4 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = call () -> i32 @getint();
    store i32* %arg with i32 %0;
    i32 %1 = call () -> i32 @getch();
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body2 i32* %i, i32* %arg1, i32* %arg2, i32 %0, i32 0 ], [ ^entry1 i32* %arg2, i32* %arg1 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 91;
    cbr i1 %0, [ ^b10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b9(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 43;
    cbr i1 %0, [ ^b11 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^while.body1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 62;
    cbr i1 %2, [ ^if.then [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %1 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([65536 * i32]* @input)[i32 0][i32 %arg4];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %2;
    i1 %3 = scmp lt i32 %2, i32 %arg3;
    cbr i1 %3, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %2 ], [ ^entry1 i32* %arg2, i32* %arg1 ];
^entry2(i32 %arg):
    call (i32) -> void @stoptime(i32 118);
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 0 ], [ ^b12 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 93;
    cbr i1 %0, [ ^b13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b11(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 45;
    cbr i1 %0, [ ^b14 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg5, i32 1;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg1;
    cbr i1 %2, [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %0, i32 %arg6, i32 %arg7 ], [ ^entry2 i32 %arg3 ];
^indirect([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 60;
    cbr i1 %0, [ ^if.then1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^while.body3(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3, [ ^while.body3 i32 %arg, i32 %2 ], [ ^b12 ];
^b12():
    ret i32 0;
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 46;
    cbr i1 %0, [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^if.then1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg5, i32 1;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %0, i32 %arg6, i32 %arg7 ];
^b14(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 91;
    cbr i1 %0, [ ^b16 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.else([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 43;
    cbr i1 %0, [ ^if.then2 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect1 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 44;
    cbr i1 %0, [ ^b17 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b16(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 93;
    cbr i1 %0, [ ^b18 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.header([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^while.body1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^entry2 i32 %arg4 ];
^indirect1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 45;
    cbr i1 %0, [ ^if.then3 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 35;
    cbr i1 %0, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b18(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 46;
    cbr i1 %0, [ ^b19 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^if.else1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 91;
    cbr i1 %0, [ ^if.then4 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect2 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b19(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 44;
    cbr i1 %0, [ ^b20 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then4([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^while.body5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 1 ];
^indirect2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 93;
    cbr i1 %0, [ ^if.then6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else2 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b20(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 35;
    cbr i1 %0, [ ^while.body6 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then5([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([512 * i32]* %arg)[i32 0][i32 %arg7];
    store i32* %0 with i32 %arg4;
    i32 %1 = add i32 %arg7, i32 1;
    i32 %2 = add i32 %arg4, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %2, i32 %arg5, i32 %arg6, i32 %1 ], [ ^entry2 i32 %arg3 ];
^if.then6([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then7 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^if.else3 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.body5([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg4, i32 1;
    i32* %1 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 93;
    cbr i1 %3, [ ^indirect3 [512 * i32]* %arg, i32 %2, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b21 [512 * i32]* %arg, i32 %2, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.else2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 46;
    cbr i1 %0, [ ^if.then8 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect4 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.body6(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b5 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then7([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %arg5, i32 %arg6, i32 %0 ];
^if.then8([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i32 %4 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %4, i32 %arg1, i32 %arg2, i32 %3, i32 %4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    i1 %1 = scmp eq i32 %arg1, i32 91;
    cbr i1 %1, [ ^if.then9 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ], [ ^indirect6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ];
^if.else3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = sub i32 %arg6, i32 1;
    i32* %1 = getelementptr &([512 * i32]* %arg)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %2, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg1;
    cbr i1 %4, [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^entry2 i32 %arg3 ];
^b21([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 91;
    cbr i1 %0, [ ^if.then9 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^indirect6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^indirect4([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg1, i32 44;
    cbr i1 %0, [ ^if.then10 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then9([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %0 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect5([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect6([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg8, i32 0;
    cbr i1 %0, [ ^while.body5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^if.then10([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 %arg2;
    cbr i1 %0, [ ^if.then11 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect7 [512 * i32]* %arg, i32 %arg6, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg7 ];
^if.then11([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg5];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect7([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([65536 * i32]* @input)[i32 0][i32 %arg1];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg1, i32 1;
    i32 %4 = add i32 %arg5, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %4, i32 %arg2, i32 %arg3, i32 %arg4, i32 %4, i32 %arg6, i32 %3, i32 %arg7 ];
}
