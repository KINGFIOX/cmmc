internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program, align 8 { Flexible };
internal [65536 * i32]* @tape, align 8 { Flexible };
internal [65536 * i32]* @input, align 8 { Flexible };
internal [65536 * i32]* @output, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i64 %2 = sext i32 %1 to i64;
    i64 %3 = shl i64 1, i64 %2;
    i64 %4 = and i64 %3, i64 360287970357415681;
    i1 %5 = icmp eq i64 %4, i64 0;
    i1 %6 = icmp slt i32 %1, i32 0;
    i1 %7 = or i1 %5, i1 %6;
    i1 %8 = icmp sgt i32 %0, i32 93;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b;
  ^b:
    i1 %10 = icmp neq i32 %0, i32 35;
    [65536 * i32]* %11 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    [65536 * i32]* %12 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    cbr i1 %10(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %13 = phi [^b, i32 0] [^b4, i32 %39];
    i32 %14 = phi [^b, i32 %0] [^b4, i32 %22];
    i32* %15 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %13];
    store i32* %15 with i32 %14;
    ubr ^while.body2;
  ^b1:
    i32 %16 = phi [^b, i32 0] [^b4, i32 %39];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = icmp neq i32 %17, i32 105;
    cbr i1 %18(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %19 = phi [^b1, i32 0] [^b2, i32 %32] [^while.body3, i32 %32];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %20 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %21 = getelementptr &([512 * i32]* %20)[i64 0][i64 0];
    ubr ^b3;
  ^while.body2:
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %22, i32 -35;
    i64 %24 = sext i32 %23 to i64;
    i64 %25 = shl i64 1, i64 %24;
    i64 %26 = and i64 %25, i64 360287970357415681;
    i1 %27 = icmp eq i64 %26, i64 0;
    i1 %28 = icmp slt i32 %23, i32 0;
    i1 %29 = or i1 %27, i1 %28;
    i1 %30 = icmp sgt i32 %22, i32 93;
    i1 %31 = or i1 %29, i1 %30;
    cbr i1 %31(prob = 0.984615), ^while.body2, ^b4;
  ^b2:
    i32 %32 = call () -> i32 @getint();
    i1 %33 = icmp sgt i32 %32, i32 0;
    i32 %34 = call () -> i32 @getch();
    cbr i1 %33(prob = 0.984615), ^while.body3, ^if.then;
  ^b3:
    i64 %35 = phi [^if.then, i64 0] [^b3, i64 %37];
    i32* %36 = getelementptr &(i32* %21)[i64 %35];
    store i32* %36 with i32 0;
    i64 %37 = add i64 %35, i64 1;
    i1 %38 = icmp slt i64 %37, i64 512;
    cbr i1 %38(prob = 0.998047), ^b3, ^b5;
  ^b4:
    i32 %39 = add i32 %13, i32 1;
    i1 %40 = icmp neq i32 %22, i32 35;
    cbr i1 %40(prob = 0.984615), ^while.body1, ^b1;
  ^while.body3:
    i32 %41 = phi [^b2, i32 0] [^while.body3, i32 %44];
    i32 %42 = call () -> i32 @getch();
    i32* %43 = getelementptr &([65536 * i32]* %11)[i64 0][i32 %41];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %41, i32 1;
    i1 %45 = icmp sgt i32 %32, i32 %44;
    cbr i1 %45(prob = 0.984615), ^while.body3, ^if.then;
  ^b5:
    i1 %46 = icmp sgt i32 %16, i32 0;
    [65536 * i32]* %47 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    [65536 * i32]* %48 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %46(prob = 0.984615), ^while.body4, ^b6;
  ^while.body4:
    i32 %49 = phi [^b5, i32 0] [^b8, i32 %67];
    i32 %50 = phi [^b5, i32 0] [^b8, i32 %72];
    i32 %51 = phi [^b5, i32 0] [^b8, i32 %70];
    i32 %52 = phi [^b5, i32 0] [^b8, i32 %69];
    i32 %53 = phi [^b5, i32 0] [^b8, i32 %68];
    i32* %54 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %50];
    i32 %55 = load i32* %54;
    i1 %56 = icmp eq i32 %55, i32 62;
    cbr i1 %56(prob = 0.5), ^if.then1, ^if.else;
  ^b6:
    i32 %57 = phi [^b5, i32 0] [^b8, i32 %67];
    i1 %58 = icmp sgt i32 %57, i32 0;
    call (i32) -> void @stoptime(i32 118);
    cbr i1 %58(prob = 0.984615), ^while.body5, ^b7;
  ^if.then1:
    i32 %59 = add i32 %51, i32 1;
    ubr ^b8;
  ^if.else:
    i1 %60 = icmp eq i32 %55, i32 60;
    cbr i1 %60(prob = 0.5), ^if.then2, ^if.else1;
  ^while.body5:
    i32 %61 = phi [^b6, i32 0] [^while.body5, i32 %64];
    i32* %62 = getelementptr &([65536 * i32]* %48)[i64 0][i32 %61];
    i32 %63 = load i32* %62;
    call (i32) -> void @putch(i32 %63);
    i32 %64 = add i32 %61, i32 1;
    i1 %65 = icmp sgt i32 %57, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.body5, ^b7;
  ^b7:
    ret i32 0;
  ^if.then2:
    i32 %66 = add i32 %51, i32 -1;
    ubr ^b8;
  ^b8:
    i32 %67 = phi [^if.then1, i32 %49] [^if.then2, i32 %49] [^if.then3, i32 %49] [^if.then4, i32 %49] [^if.then6, i32 %49] [^if.then7, i32 %49] [^while.body6, i32 %49] [^if.else6, i32 %49] [^if.then8, i32 %109] [^if.else7, i32 %49] [^if.then10, i32 %49] [^if.else8, i32 %49];
    i32 %68 = phi [^if.then1, i32 %53] [^if.then2, i32 %53] [^if.then3, i32 %53] [^if.then4, i32 %53] [^if.then6, i32 %53] [^if.then7, i32 %53] [^while.body6, i32 %53] [^if.else6, i32 %53] [^if.then8, i32 %53] [^if.else7, i32 %53] [^if.then10, i32 %53] [^if.else8, i32 %114];
    i32 %69 = phi [^if.then1, i32 %52] [^if.then2, i32 %52] [^if.then3, i32 %52] [^if.then4, i32 %52] [^if.then6, i32 %86] [^if.then7, i32 %89] [^while.body6, i32 %52] [^if.else6, i32 %52] [^if.then8, i32 %52] [^if.else7, i32 %52] [^if.then10, i32 %52] [^if.else8, i32 %52];
    i32 %70 = phi [^if.then1, i32 %59] [^if.then2, i32 %66] [^if.then3, i32 %51] [^if.then4, i32 %51] [^if.then6, i32 %51] [^if.then7, i32 %51] [^while.body6, i32 %51] [^if.else6, i32 %51] [^if.then8, i32 %51] [^if.else7, i32 %51] [^if.then10, i32 %51] [^if.else8, i32 %51];
    i32 %71 = phi [^if.then1, i32 %50] [^if.then2, i32 %50] [^if.then3, i32 %50] [^if.then4, i32 %50] [^if.then6, i32 %50] [^if.then7, i32 %50] [^while.body6, i32 %92] [^if.else6, i32 %106] [^if.then8, i32 %50] [^if.else7, i32 %50] [^if.then10, i32 %50] [^if.else8, i32 %50];
    i32 %72 = add i32 %71, i32 1;
    i1 %73 = icmp sgt i32 %16, i32 %72;
    cbr i1 %73(prob = 0.984615), ^while.body4, ^b6;
  ^if.else1:
    i32* %74 = getelementptr &([65536 * i32]* %47)[i64 0][i32 %51];
    i1 %75 = icmp eq i32 %55, i32 43;
    cbr i1 %75(prob = 0.5), ^if.then3, ^if.else2;
  ^if.then3:
    i32 %76 = load i32* %74;
    i32 %77 = add i32 %76, i32 1;
    store i32* %74 with i32 %77;
    ubr ^b8;
  ^if.else2:
    i1 %78 = icmp eq i32 %55, i32 45;
    cbr i1 %78(prob = 0.5), ^if.then4, ^if.else3;
  ^if.then4:
    i32 %79 = load i32* %74;
    i32 %80 = add i32 %79, i32 -1;
    store i32* %74 with i32 %80;
    ubr ^b8;
  ^if.else3:
    i1 %81 = icmp eq i32 %55, i32 91;
    cbr i1 %81(prob = 0.5), ^if.then5, ^if.else4;
  ^if.then5:
    i32 %82 = load i32* %74;
    i1 %83 = icmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.5), ^if.then6, ^while.body6;
  ^if.else4:
    i1 %84 = icmp eq i32 %55, i32 93;
    cbr i1 %84(prob = 0.5), ^if.then7, ^if.else5;
  ^if.then6:
    i32* %85 = getelementptr &([512 * i32]* %20)[i64 0][i32 %52];
    store i32* %85 with i32 %50;
    i32 %86 = add i32 %52, i32 1;
    ubr ^b8;
  ^if.then7:
    i32 %87 = load i32* %74;
    i1 %88 = icmp eq i32 %87, i32 0;
    i32 %89 = add i32 %52, i32 -1;
    cbr i1 %88(prob = 0.5), ^b8, ^if.else6;
  ^while.body6:
    i32 %90 = phi [^if.then5, i32 1] [^while.body6, i32 %101];
    i32 %91 = phi [^if.then5, i32 %50] [^while.body6, i32 %92];
    i32 %92 = add i32 %91, i32 1;
    i32* %93 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i1 %95 = icmp eq i32 %94, i32 93;
    i32 %96 = zext i1 %95 to i32;
    i32 %97 = sub i32 %90, i32 %96;
    i32 %98 = add i32 %97, i32 1;
    i1 %99 = icmp neq i32 %94, i32 91;
    i32 %100 = zext i1 %99 to i32;
    i32 %101 = sub i32 %98, i32 %100;
    i1 %102 = icmp sgt i32 %101, i32 0;
    cbr i1 %102(prob = 0.984615), ^while.body6, ^b8;
  ^if.else5:
    i1 %103 = icmp eq i32 %55, i32 46;
    cbr i1 %103(prob = 0.5), ^if.then8, ^if.else7;
  ^if.else6:
    i32* %104 = getelementptr &([512 * i32]* %20)[i64 0][i32 %52];
    i32* %105 = getelementptr &(i32* %104)[i64 -1];
    i32 %106 = load i32* %105;
    ubr ^b8;
  ^if.then8:
    i32* %107 = getelementptr &([65536 * i32]* %48)[i64 0][i32 %49];
    i32 %108 = load i32* %74;
    store i32* %107 with i32 %108;
    i32 %109 = add i32 %49, i32 1;
    ubr ^b8;
  ^if.else7:
    i1 %110 = icmp eq i32 %55, i32 44;
    cbr i1 %110(prob = 0.5), ^if.then9, ^b8;
  ^if.then9:
    i1 %111 = icmp sle i32 %19, i32 %53;
    cbr i1 %111(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    store i32* %74 with i32 0;
    ubr ^b8;
  ^if.else8:
    i32* %112 = getelementptr &([65536 * i32]* %11)[i64 0][i32 %53];
    i32 %113 = load i32* %112;
    store i32* %74 with i32 %113;
    i32 %114 = add i32 %53, i32 1;
    ubr ^b8;
}
internal [512 * i32]* @return_a, align 8 { Flexible };
