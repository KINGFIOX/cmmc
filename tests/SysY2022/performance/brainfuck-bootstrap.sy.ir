internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [512 * i32]* %return_a = alloc [512 * i32];
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %19];
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
^b:
    i1 %3 = scmp neq i32 %1, i32 60;
    ubr ^b1;
^b1:
    i1 %4 = phi [^while.header, i1 false] [^b, i1 %3];
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %5 = scmp neq i32 %1, i32 43;
    ubr ^b3;
^b3:
    i1 %6 = phi [^b1, i1 false] [^b2, i1 %5];
    cbr i1 %6(prob = 0.5), ^b4, ^b5;
^b4:
    i1 %7 = scmp neq i32 %1, i32 45;
    ubr ^b5;
^b5:
    i1 %8 = phi [^b3, i1 false] [^b4, i1 %7];
    cbr i1 %8(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %9 = scmp neq i32 %1, i32 91;
    ubr ^b7;
^b7:
    i1 %10 = phi [^b5, i1 false] [^b6, i1 %9];
    cbr i1 %10(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %11 = scmp neq i32 %1, i32 93;
    ubr ^b9;
^b9:
    i1 %12 = phi [^b7, i1 false] [^b8, i1 %11];
    cbr i1 %12(prob = 0.5), ^b10, ^b11;
^b10:
    i1 %13 = scmp neq i32 %1, i32 46;
    ubr ^b11;
^b11:
    i1 %14 = phi [^b9, i1 false] [^b10, i1 %13];
    cbr i1 %14(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %15 = scmp neq i32 %1, i32 44;
    ubr ^b13;
^b13:
    i1 %16 = phi [^b11, i1 false] [^b12, i1 %15];
    cbr i1 %16(prob = 0.5), ^b14, ^b15;
^b14:
    i1 %17 = scmp neq i32 %1, i32 35;
    ubr ^b15;
^b15:
    i1 %18 = phi [^b13, i1 false] [^b14, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header;
^entry1:
    i1 %20 = scmp neq i32 %1, i32 35;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b16;
^while.body1:
    i32 %21 = phi [^entry1, i32 0] [^while.body6, i32 %147];
    i32 %22 = phi [^entry1, i32 %1] [^while.body6, i32 %33];
    i32* %23 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header1;
^b16:
    i32 %25 = phi [^entry1, i32 0] [^while.body6, i32 %147];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp neq i32 %26, i32 105;
    cbr i1 %27(prob = 0.5), ^entry2, ^b17;
^entry2:
    i32 %28 = phi [^b16, i32 0] [^while.header2, i32 %31];
    call (i32) -> void @starttime(i32 116);
    i32* %29 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %30 = ptrcast i32* %29 to i8*;
    ubr ^super.header;
^b17:
    i32 %31 = call () -> i32 @getint();
    i32 %32 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header1:
    i32 %33 = phi [^while.body1, i32 %24] [^while.body5, i32 %145];
    i1 %34 = scmp neq i32 %33, i32 62;
    cbr i1 %34(prob = 0.5), ^b18, ^b19;
^b18:
    i1 %35 = scmp neq i32 %33, i32 60;
    ubr ^b19;
^super.header:
    i64 %36 = phi [^entry2, i64 0] [^b20, i64 %37];
    i64 %37 = add i64 %36, i64 16;
    i1 %38 = scmp lt i64 %37, i64 2048;
    cbr i1 %38(prob = 0.67), ^b20, ^super.header1;
^b19:
    i1 %39 = phi [^while.header1, i1 false] [^b18, i1 %35];
    cbr i1 %39(prob = 0.5), ^b21, ^b22;
^while.header2:
    i32 %40 = phi [^b17, i32 0] [^while.body2, i32 %61];
    i1 %41 = scmp lt i32 %40, i32 %31;
    cbr i1 %41(prob = 0.97), ^while.body2, ^entry2;
^b20:
    i8* %42 = getelementptr &(i8* %30)[i64 %36];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %42)[i64 1];
    store i8* %43 with i8 0;
    i8* %44 = getelementptr &(i8* %42)[i64 2];
    store i8* %44 with i8 0;
    i8* %45 = getelementptr &(i8* %42)[i64 3];
    store i8* %45 with i8 0;
    i8* %46 = getelementptr &(i8* %42)[i64 4];
    store i8* %46 with i8 0;
    i8* %47 = getelementptr &(i8* %42)[i64 5];
    store i8* %47 with i8 0;
    i8* %48 = getelementptr &(i8* %42)[i64 6];
    store i8* %48 with i8 0;
    i8* %49 = getelementptr &(i8* %42)[i64 7];
    store i8* %49 with i8 0;
    i8* %50 = getelementptr &(i8* %42)[i64 8];
    store i8* %50 with i8 0;
    i8* %51 = getelementptr &(i8* %42)[i64 9];
    store i8* %51 with i8 0;
    i8* %52 = getelementptr &(i8* %42)[i64 10];
    store i8* %52 with i8 0;
    i8* %53 = getelementptr &(i8* %42)[i64 11];
    store i8* %53 with i8 0;
    i8* %54 = getelementptr &(i8* %42)[i64 12];
    store i8* %54 with i8 0;
    i8* %55 = getelementptr &(i8* %42)[i64 13];
    store i8* %55 with i8 0;
    i8* %56 = getelementptr &(i8* %42)[i64 14];
    store i8* %56 with i8 0;
    i8* %57 = getelementptr &(i8* %42)[i64 15];
    store i8* %57 with i8 0;
    ubr ^super.header;
^b21:
    i1 %58 = scmp neq i32 %33, i32 43;
    ubr ^b22;
^while.body2:
    i32* %59 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %40];
    i32 %60 = call () -> i32 @getch();
    store i32* %59 with i32 %60;
    i32 %61 = add i32 %40, i32 1;
    ubr ^while.header2;
^super.header1:
    i64 %62 = phi [^super.header, i64 %36] [^b23, i64 %63];
    i64 %63 = add i64 %62, i64 16;
    i1 %64 = scmp lt i64 %63, i64 2048;
    cbr i1 %64(prob = 0.67), ^b23, ^super.header2;
^b22:
    i1 %65 = phi [^b19, i1 false] [^b21, i1 %58];
    cbr i1 %65(prob = 0.5), ^b24, ^b25;
^b23:
    i8* %66 = getelementptr &(i8* %30)[i64 %62];
    store i8* %66 with i8 0;
    i8* %67 = getelementptr &(i8* %66)[i64 1];
    store i8* %67 with i8 0;
    i8* %68 = getelementptr &(i8* %66)[i64 2];
    store i8* %68 with i8 0;
    i8* %69 = getelementptr &(i8* %66)[i64 3];
    store i8* %69 with i8 0;
    i8* %70 = getelementptr &(i8* %66)[i64 4];
    store i8* %70 with i8 0;
    i8* %71 = getelementptr &(i8* %66)[i64 5];
    store i8* %71 with i8 0;
    i8* %72 = getelementptr &(i8* %66)[i64 6];
    store i8* %72 with i8 0;
    i8* %73 = getelementptr &(i8* %66)[i64 7];
    store i8* %73 with i8 0;
    i8* %74 = getelementptr &(i8* %66)[i64 8];
    store i8* %74 with i8 0;
    i8* %75 = getelementptr &(i8* %66)[i64 9];
    store i8* %75 with i8 0;
    i8* %76 = getelementptr &(i8* %66)[i64 10];
    store i8* %76 with i8 0;
    i8* %77 = getelementptr &(i8* %66)[i64 11];
    store i8* %77 with i8 0;
    i8* %78 = getelementptr &(i8* %66)[i64 12];
    store i8* %78 with i8 0;
    i8* %79 = getelementptr &(i8* %66)[i64 13];
    store i8* %79 with i8 0;
    i8* %80 = getelementptr &(i8* %66)[i64 14];
    store i8* %80 with i8 0;
    i8* %81 = getelementptr &(i8* %66)[i64 15];
    store i8* %81 with i8 0;
    ubr ^super.header1;
^b24:
    i1 %82 = scmp neq i32 %33, i32 45;
    ubr ^b25;
^super.header2:
    i64 %83 = phi [^super.header1, i64 %62] [^b26, i64 %84];
    i64 %84 = add i64 %83, i64 16;
    i1 %85 = scmp lt i64 %84, i64 2048;
    cbr i1 %85(prob = 0.67), ^b26, ^b28;
^b25:
    i1 %86 = phi [^b22, i1 false] [^b24, i1 %82];
    cbr i1 %86(prob = 0.5), ^b27, ^b29;
^b26:
    i8* %87 = getelementptr &(i8* %30)[i64 %83];
    store i8* %87 with i8 0;
    i8* %88 = getelementptr &(i8* %87)[i64 1];
    store i8* %88 with i8 0;
    i8* %89 = getelementptr &(i8* %87)[i64 2];
    store i8* %89 with i8 0;
    i8* %90 = getelementptr &(i8* %87)[i64 3];
    store i8* %90 with i8 0;
    i8* %91 = getelementptr &(i8* %87)[i64 4];
    store i8* %91 with i8 0;
    i8* %92 = getelementptr &(i8* %87)[i64 5];
    store i8* %92 with i8 0;
    i8* %93 = getelementptr &(i8* %87)[i64 6];
    store i8* %93 with i8 0;
    i8* %94 = getelementptr &(i8* %87)[i64 7];
    store i8* %94 with i8 0;
    i8* %95 = getelementptr &(i8* %87)[i64 8];
    store i8* %95 with i8 0;
    i8* %96 = getelementptr &(i8* %87)[i64 9];
    store i8* %96 with i8 0;
    i8* %97 = getelementptr &(i8* %87)[i64 10];
    store i8* %97 with i8 0;
    i8* %98 = getelementptr &(i8* %87)[i64 11];
    store i8* %98 with i8 0;
    i8* %99 = getelementptr &(i8* %87)[i64 12];
    store i8* %99 with i8 0;
    i8* %100 = getelementptr &(i8* %87)[i64 13];
    store i8* %100 with i8 0;
    i8* %101 = getelementptr &(i8* %87)[i64 14];
    store i8* %101 with i8 0;
    i8* %102 = getelementptr &(i8* %87)[i64 15];
    store i8* %102 with i8 0;
    ubr ^super.header2;
^b27:
    i1 %103 = scmp neq i32 %33, i32 91;
    ubr ^b29;
^b28:
    i64 %104 = phi [^super.header2, i64 %83] [^b28, i64 %106];
    i8* %105 = getelementptr &(i8* %30)[i64 %104];
    store i8* %105 with i8 0;
    i64 %106 = add i64 %104, i64 1;
    i1 %107 = scmp lt i64 %106, i64 2048;
    cbr i1 %107(prob = 0.97), ^b28, ^while.header3;
^b29:
    i1 %108 = phi [^b25, i1 false] [^b27, i1 %103];
    cbr i1 %108(prob = 0.5), ^b30, ^b31;
^b30:
    i1 %109 = scmp neq i32 %33, i32 93;
    ubr ^b31;
^while.header3:
    i32 %110 = phi [^b28, i32 0] [^b36, i32 %132];
    i32 %111 = phi [^b28, i32 0] [^b36, i32 %133];
    i32 %112 = phi [^b28, i32 0] [^b36, i32 %134];
    i32 %113 = phi [^b28, i32 0] [^b36, i32 %135];
    i32 %114 = phi [^b28, i32 0] [^b36, i32 %137];
    i1 %115 = scmp lt i32 %114, i32 %25;
    cbr i1 %115(prob = 0.97), ^while.body3, ^entry3;
^b31:
    i1 %116 = phi [^b29, i1 false] [^b30, i1 %109];
    cbr i1 %116(prob = 0.5), ^b32, ^b33;
^b32:
    i1 %117 = scmp neq i32 %33, i32 46;
    ubr ^b33;
^while.body3:
    i32* %118 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %114];
    i32 %119 = load i32* %118;
    i1 %120 = scmp eq i32 %119, i32 62;
    cbr i1 %120(prob = 0.5), ^if.then, ^if.else;
^entry3:
    call (i32) -> void @stoptime(i32 118);
    i1 %121 = scmp gt i32 %110, i32 0;
    cbr i1 %121(prob = 0.97), ^while.body4, ^entry4;
^b33:
    i1 %122 = phi [^b31, i1 false] [^b32, i1 %117];
    cbr i1 %122(prob = 0.5), ^b34, ^b35;
^if.then:
    i32 %123 = add i32 %113, i32 1;
    ubr ^b36;
^b34:
    i1 %124 = scmp neq i32 %33, i32 44;
    ubr ^b35;
^if.else:
    i1 %125 = scmp eq i32 %119, i32 60;
    cbr i1 %125(prob = 0.5), ^if.then1, ^if.else1;
^while.body4:
    i32 %126 = phi [^entry3, i32 0] [^while.body4, i32 %129];
    i32* %127 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %126];
    i32 %128 = load i32* %127;
    call (i32) -> void @putch(i32 %128);
    i32 %129 = add i32 %126, i32 1;
    i1 %130 = scmp lt i32 %129, i32 %110;
    cbr i1 %130(prob = 0.97), ^while.body4, ^entry4;
^b35:
    i1 %131 = phi [^b33, i1 false] [^b34, i1 %124];
    cbr i1 %131(prob = 0.5), ^b37, ^b38;
^entry4:
    ret i32 0;
^b36:
    i32 %132 = phi [^if.then, i32 %110] [^if.then1, i32 %110] [^if.then2, i32 %110] [^if.then3, i32 %110] [^if.then5, i32 %110] [^while.header4, i32 %110] [^if.then7, i32 %110] [^if.else6, i32 %110] [^if.then8, i32 %173] [^if.else7, i32 %110] [^if.then12, i32 %110] [^if.else8, i32 %110];
    i32 %133 = phi [^if.then, i32 %111] [^if.then1, i32 %111] [^if.then2, i32 %111] [^if.then3, i32 %111] [^if.then5, i32 %111] [^while.header4, i32 %111] [^if.then7, i32 %111] [^if.else6, i32 %111] [^if.then8, i32 %111] [^if.else7, i32 %111] [^if.then12, i32 %111] [^if.else8, i32 %188];
    i32 %134 = phi [^if.then, i32 %112] [^if.then1, i32 %112] [^if.then2, i32 %112] [^if.then3, i32 %112] [^if.then5, i32 %158] [^while.header4, i32 %112] [^if.then7, i32 %166] [^if.else6, i32 %112] [^if.then8, i32 %112] [^if.else7, i32 %112] [^if.then12, i32 %112] [^if.else8, i32 %112];
    i32 %135 = phi [^if.then, i32 %123] [^if.then1, i32 %138] [^if.then2, i32 %113] [^if.then3, i32 %113] [^if.then5, i32 %113] [^while.header4, i32 %113] [^if.then7, i32 %113] [^if.else6, i32 %113] [^if.then8, i32 %113] [^if.else7, i32 %113] [^if.then12, i32 %113] [^if.else8, i32 %113];
    i32 %136 = phi [^if.then, i32 %114] [^if.then1, i32 %114] [^if.then2, i32 %114] [^if.then3, i32 %114] [^if.then5, i32 %114] [^while.header4, i32 %163] [^if.then7, i32 %114] [^if.else6, i32 %169] [^if.then8, i32 %114] [^if.else7, i32 %114] [^if.then12, i32 %114] [^if.else8, i32 %114];
    i32 %137 = add i32 %136, i32 1;
    ubr ^while.header3;
^if.then1:
    i32 %138 = add i32 %113, i32 -1;
    ubr ^b36;
^b37:
    i1 %139 = scmp neq i32 %33, i32 35;
    ubr ^b38;
^if.else1:
    i1 %140 = scmp eq i32 %119, i32 43;
    cbr i1 %140(prob = 0.5), ^if.then2, ^if.else2;
^b38:
    i1 %141 = phi [^b35, i1 false] [^b37, i1 %139];
    cbr i1 %141(prob = 0.97), ^while.body5, ^while.body6;
^if.then2:
    i32* %142 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %143, i32 1;
    store i32* %142 with i32 %144;
    ubr ^b36;
^while.body5:
    i32 %145 = call () -> i32 @getch();
    ubr ^while.header1;
^if.else2:
    i1 %146 = scmp eq i32 %119, i32 45;
    cbr i1 %146(prob = 0.5), ^if.then3, ^if.else3;
^while.body6:
    i32 %147 = add i32 %21, i32 1;
    i1 %148 = scmp neq i32 %33, i32 35;
    cbr i1 %148(prob = 0.97), ^while.body1, ^b16;
^if.then3:
    i32* %149 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %150, i32 -1;
    store i32* %149 with i32 %151;
    ubr ^b36;
^if.else3:
    i1 %152 = scmp eq i32 %119, i32 91;
    cbr i1 %152(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %153 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32 %154 = load i32* %153;
    i1 %155 = scmp neq i32 %154, i32 0;
    cbr i1 %155(prob = 0.5), ^if.then5, ^while.header4;
^if.else4:
    i1 %156 = scmp eq i32 %119, i32 93;
    cbr i1 %156(prob = 0.5), ^if.then6, ^if.else5;
^if.then5:
    i32* %157 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %112];
    store i32* %157 with i32 %114;
    i32 %158 = add i32 %112, i32 1;
    ubr ^b36;
^if.then6:
    i32* %159 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32 %160 = load i32* %159;
    i1 %161 = scmp eq i32 %160, i32 0;
    cbr i1 %161(prob = 0.5), ^if.then7, ^if.else6;
^while.header4:
    i32 %162 = phi [^if.then4, i32 1] [^b39, i32 %180] [^if.then11, i32 %183];
    i32 %163 = phi [^if.then4, i32 %114] [^b39, i32 %174] [^if.then11, i32 %174];
    i1 %164 = scmp gt i32 %162, i32 0;
    cbr i1 %164(prob = 0.97), ^while.body7, ^b36;
^if.else5:
    i1 %165 = scmp eq i32 %119, i32 46;
    cbr i1 %165(prob = 0.5), ^if.then8, ^if.else7;
^if.then7:
    i32 %166 = add i32 %112, i32 -1;
    ubr ^b36;
^if.else6:
    i32 %167 = add i32 %112, i32 -1;
    i32* %168 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %167];
    i32 %169 = load i32* %168;
    ubr ^b36;
^if.then8:
    i32* %170 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %110];
    i32* %171 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32 %172 = load i32* %171;
    store i32* %170 with i32 %172;
    i32 %173 = add i32 %110, i32 1;
    ubr ^b36;
^while.body7:
    i32 %174 = add i32 %163, i32 1;
    i32* %175 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %174];
    i32 %176 = load i32* %175;
    i1 %177 = scmp eq i32 %176, i32 93;
    cbr i1 %177(prob = 0.5), ^if.then9, ^b39;
^if.else7:
    i1 %178 = scmp eq i32 %119, i32 44;
    cbr i1 %178(prob = 0.5), ^if.then10, ^b36;
^if.then9:
    i32 %179 = add i32 %162, i32 -1;
    ubr ^b39;
^b39:
    i32 %180 = phi [^while.body7, i32 %162] [^if.then9, i32 %179];
    i1 %181 = scmp eq i32 %176, i32 91;
    cbr i1 %181(prob = 0.5), ^if.then11, ^while.header4;
^if.then10:
    i1 %182 = scmp ge i32 %111, i32 %28;
    cbr i1 %182(prob = 0.5), ^if.then12, ^if.else8;
^if.then11:
    i32 %183 = add i32 %180, i32 1;
    ubr ^while.header4;
^if.then12:
    i32* %184 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    store i32* %184 with i32 0;
    ubr ^b36;
^if.else8:
    i32* %185 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %113];
    i32* %186 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %111];
    i32 %187 = load i32* %186;
    store i32* %185 with i32 %187;
    i32 %188 = add i32 %111, i32 1;
    ubr ^b36;
}
