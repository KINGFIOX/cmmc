internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program;
internal [65536 * i32]* @tape;
internal [65536 * i32]* @input;
internal [65536 * i32]* @output;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i32 %2 = shl i32 1, i32 %1;
    i32 %3 = and i32 %2, i32 167776001;
    i1 %4 = icmp eq i32 %3, i32 0;
    i1 %5 = icmp slt i32 %1, i32 0;
    i1 %6 = or i1 %4, i1 %5;
    i32 %7 = add i32 %0, i32 -67;
    i32 %8 = shl i32 1, i32 %7;
    i32 %9 = and i32 %8, i32 83886080;
    i1 %10 = icmp eq i32 %9, i32 0;
    i1 %11 = icmp sge i32 %7, i32 0;
    i1 %12 = select i1 %11 ? i1 %10 : i1 %6;
    i1 %13 = icmp sgt i32 %0, i32 93;
    i1 %14 = or i1 %12, i1 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^entry1;
  ^entry1:
    i1 %15 = icmp neq i32 %0, i32 35;
    [65536 * i32]* %16 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %17 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %18 = phi [^entry1, i32 0] [^while.body3, i32 %64];
    i32 %19 = phi [^entry1, i32 %0] [^while.body3, i32 %27];
    i32* %20 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %18];
    store i32* %20 with i32 %19;
    ubr ^while.body2;
  ^b:
    i32 %21 = phi [^entry1, i32 0] [^while.body3, i32 %64];
    i32 %22 = call () -> i32 @getch();
    i1 %23 = icmp neq i32 %22, i32 105;
    cbr i1 %23(prob = 0.5), ^entry2, ^b1;
  ^entry2:
    i32 %24 = phi [^b, i32 0] [^b1, i32 %42] [^while.body4, i32 %42];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %25 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %26 = getelementptr &([512 * i32]* %25)[i64 0][i64 0];
    ubr ^b2;
  ^while.body2:
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -35;
    i32 %29 = shl i32 1, i32 %28;
    i32 %30 = and i32 %29, i32 167776001;
    i1 %31 = icmp eq i32 %30, i32 0;
    i1 %32 = icmp slt i32 %28, i32 0;
    i1 %33 = or i1 %31, i1 %32;
    i32 %34 = add i32 %27, i32 -67;
    i32 %35 = shl i32 1, i32 %34;
    i32 %36 = and i32 %35, i32 83886080;
    i1 %37 = icmp eq i32 %36, i32 0;
    i1 %38 = icmp sge i32 %34, i32 0;
    i1 %39 = select i1 %38 ? i1 %37 : i1 %33;
    i1 %40 = icmp sgt i32 %27, i32 93;
    i1 %41 = or i1 %39, i1 %40;
    cbr i1 %41(prob = 0.97), ^while.body2, ^while.body3;
  ^b1:
    i32 %42 = call () -> i32 @getint();
    i1 %43 = icmp sgt i32 %42, i32 0;
    i32 %44 = call () -> i32 @getch();
    cbr i1 %43(prob = 0.97), ^while.body4, ^entry2;
  ^b2:
    i64 %45 = phi [^entry2, i64 0] [^b2, i64 %62];
    i32* %46 = getelementptr &(i32* %26)[i64 %45];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %46)[i64 2];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %46)[i64 3];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %46)[i64 4];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %46)[i64 5];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %46)[i64 6];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %46)[i64 7];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %46)[i64 8];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %46)[i64 9];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %46)[i64 10];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %46)[i64 11];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %46)[i64 12];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %46)[i64 13];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %46)[i64 14];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %46)[i64 15];
    store i32* %61 with i32 0;
    i64 %62 = add i64 %45, i64 16;
    i1 %63 = icmp slt i64 %62, i64 512;
    cbr i1 %63(prob = 0.97), ^b2, ^entry3;
  ^while.body3:
    i32 %64 = add i32 %18, i32 1;
    i1 %65 = icmp neq i32 %27, i32 35;
    cbr i1 %65(prob = 0.97), ^while.body1, ^b;
  ^while.body4:
    i32 %66 = phi [^b1, i32 0] [^while.body4, i32 %69];
    i32 %67 = call () -> i32 @getch();
    i32* %68 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %66];
    store i32* %68 with i32 %67;
    i32 %69 = add i32 %66, i32 1;
    i1 %70 = icmp sgt i32 %42, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.body4, ^entry2;
  ^entry3:
    [65536 * i32]* %71 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %72 = phi [^entry3, i32 0] [^b3, i32 %90];
    i32 %73 = phi [^entry3, i32 0] [^b3, i32 %91];
    i32 %74 = phi [^entry3, i32 0] [^b3, i32 %92];
    i32 %75 = phi [^entry3, i32 0] [^b3, i32 %93];
    i32 %76 = phi [^entry3, i32 0] [^b3, i32 %95];
    i1 %77 = icmp sgt i32 %21, i32 %76;
    cbr i1 %77(prob = 0.97), ^while.body5, ^entry4;
  ^while.body5:
    i32* %78 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %76];
    i32 %79 = load i32* %78;
    i1 %80 = icmp eq i32 %79, i32 62;
    cbr i1 %80(prob = 0.5), ^if.then, ^if.else;
  ^entry4:
    call (i32) -> void @stoptime(i32 118);
    i1 %81 = icmp sgt i32 %72, i32 0;
    [65536 * i32]* %82 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %81(prob = 0.97), ^while.body6, ^entry5;
  ^if.then:
    i32 %83 = add i32 %75, i32 1;
    ubr ^b3;
  ^if.else:
    i1 %84 = icmp eq i32 %79, i32 60;
    cbr i1 %84(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body6:
    i32 %85 = phi [^entry4, i32 0] [^while.body6, i32 %88];
    i32* %86 = getelementptr &([65536 * i32]* %82)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    call (i32) -> void @putch(i32 %87);
    i32 %88 = add i32 %85, i32 1;
    i1 %89 = icmp sgt i32 %72, i32 %88;
    cbr i1 %89(prob = 0.97), ^while.body6, ^entry5;
  ^entry5:
    ret i32 0;
  ^b3:
    i32 %90 = phi [^if.then, i32 %72] [^if.then1, i32 %72] [^if.then2, i32 %72] [^if.then3, i32 %72] [^if.then5, i32 %72] [^while.header1, i32 %72] [^if.then7, i32 %72] [^if.else6, i32 %72] [^if.then8, i32 %136] [^if.else7, i32 %72] [^if.then10, i32 %72] [^if.else8, i32 %72];
    i32 %91 = phi [^if.then, i32 %73] [^if.then1, i32 %73] [^if.then2, i32 %73] [^if.then3, i32 %73] [^if.then5, i32 %111] [^while.header1, i32 %73] [^if.then7, i32 %119] [^if.else6, i32 %73] [^if.then8, i32 %73] [^if.else7, i32 %73] [^if.then10, i32 %73] [^if.else8, i32 %73];
    i32 %92 = phi [^if.then, i32 %74] [^if.then1, i32 %74] [^if.then2, i32 %74] [^if.then3, i32 %74] [^if.then5, i32 %74] [^while.header1, i32 %74] [^if.then7, i32 %74] [^if.else6, i32 %74] [^if.then8, i32 %74] [^if.else7, i32 %74] [^if.then10, i32 %74] [^if.else8, i32 %143];
    i32 %93 = phi [^if.then, i32 %83] [^if.then1, i32 %96] [^if.then2, i32 %75] [^if.then3, i32 %75] [^if.then5, i32 %75] [^while.header1, i32 %75] [^if.then7, i32 %75] [^if.else6, i32 %75] [^if.then8, i32 %75] [^if.else7, i32 %75] [^if.then10, i32 %75] [^if.else8, i32 %75];
    i32 %94 = phi [^if.then, i32 %76] [^if.then1, i32 %76] [^if.then2, i32 %76] [^if.then3, i32 %76] [^if.then5, i32 %76] [^while.header1, i32 %115] [^if.then7, i32 %76] [^if.else6, i32 %131] [^if.then8, i32 %76] [^if.else7, i32 %76] [^if.then10, i32 %76] [^if.else8, i32 %76];
    i32 %95 = add i32 %94, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %96 = add i32 %75, i32 -1;
    ubr ^b3;
  ^if.else1:
    i1 %97 = icmp eq i32 %79, i32 43;
    cbr i1 %97(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %98 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %99, i32 1;
    store i32* %98 with i32 %100;
    ubr ^b3;
  ^if.else2:
    i1 %101 = icmp eq i32 %79, i32 45;
    cbr i1 %101(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %102 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    i32 %103 = load i32* %102;
    i32 %104 = add i32 %103, i32 -1;
    store i32* %102 with i32 %104;
    ubr ^b3;
  ^if.else3:
    i1 %105 = icmp eq i32 %79, i32 91;
    cbr i1 %105(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %106 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    i32 %107 = load i32* %106;
    i1 %108 = icmp neq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^if.then5, ^while.header1;
  ^if.else4:
    i1 %109 = icmp eq i32 %79, i32 93;
    cbr i1 %109(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %110 = getelementptr &([512 * i32]* %25)[i64 0][i32 %73];
    store i32* %110 with i32 %76;
    i32 %111 = add i32 %73, i32 1;
    ubr ^b3;
  ^if.then6:
    i32* %112 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    i32 %113 = load i32* %112;
    i1 %114 = icmp eq i32 %113, i32 0;
    cbr i1 %114(prob = 0.5), ^if.then7, ^if.else6;
  ^while.header1:
    i32 %115 = phi [^if.then4, i32 %76] [^while.body7, i32 %120];
    i32 %116 = phi [^if.then4, i32 1] [^while.body7, i32 %128];
    i1 %117 = icmp sgt i32 %116, i32 0;
    cbr i1 %117(prob = 0.97), ^while.body7, ^b3;
  ^if.else5:
    i1 %118 = icmp eq i32 %79, i32 46;
    cbr i1 %118(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %119 = add i32 %73, i32 -1;
    ubr ^b3;
  ^while.body7:
    i32 %120 = add i32 %115, i32 1;
    i32* %121 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %120];
    i32 %122 = load i32* %121;
    i1 %123 = icmp eq i32 %122, i32 93;
    i32 %124 = add i32 %116, i32 -1;
    i32 %125 = select i1 %123 ? i32 %124 : i32 %116;
    i1 %126 = icmp eq i32 %122, i32 91;
    i32 %127 = zext i1 %126 to i32;
    i32 %128 = add i32 %125, i32 %127;
    ubr ^while.header1;
  ^if.else6:
    i32 %129 = add i32 %73, i32 -1;
    i32* %130 = getelementptr &([512 * i32]* %25)[i64 0][i32 %129];
    i32 %131 = load i32* %130;
    ubr ^b3;
  ^if.then8:
    i32* %132 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    i32 %133 = load i32* %132;
    [65536 * i32]* %134 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %135 = getelementptr &([65536 * i32]* %134)[i64 0][i32 %72];
    store i32* %135 with i32 %133;
    i32 %136 = add i32 %72, i32 1;
    ubr ^b3;
  ^if.else7:
    i1 %137 = icmp eq i32 %79, i32 44;
    cbr i1 %137(prob = 0.5), ^if.then9, ^b3;
  ^if.then9:
    i1 %138 = icmp sle i32 %24, i32 %74;
    cbr i1 %138(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    i32* %139 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    store i32* %139 with i32 0;
    ubr ^b3;
  ^if.else8:
    i32* %140 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %74];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([65536 * i32]* %71)[i64 0][i32 %75];
    store i32* %142 with i32 %141;
    i32 %143 = add i32 %74, i32 1;
    ubr ^b3;
}
internal [512 * i32]* @return_a;
