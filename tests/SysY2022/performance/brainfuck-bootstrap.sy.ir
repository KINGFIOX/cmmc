internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset(i8*, i32, i64) -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %program_length = alloc i32;
    store i32* %program_length with i32 0;
    i32* %input_length = alloc i32;
    store i32* %input_length with i32 0;
    i32* %get = alloc i32;
    i32* %get1 = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %get1 with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1(prob = 0.5), [ ^b i32* %get1, i32* %get, i32* %program_length, i32* %input_length, i32* %program_length, i32* %input_length, i32 %0 ], [ ^b1 i32* %get, i32* %program_length, i32* %input_length, i32* %program_length, i32* %input_length, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 60;
    cbr i1 %0(prob = 0.5), [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    store i32* %arg with i32 %arg5;
    i1 %0 = scmp neq i32 %arg5, i32 35;
    cbr i1 %0(prob = 0.97), [ ^while.body i32* %arg, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 0, i32 %arg5 ], [ ^b3 i32* %arg2, i32* %arg4, i32* %arg3 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 43;
    cbr i1 %0(prob = 0.5), [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %arg5];
    store i32* %0 with i32 %arg6;
    i32* %get = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %get with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), [ ^b5 i32* %get, i32* %arg, i32 %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 %1 ], [ ^b6 i32* %arg, i32 %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 %1 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 105;
    cbr i1 %1(prob = 0.5), [ ^entry1 i32* %arg1, i32* %arg2 ], [ ^b7 i32* %arg, i32* %arg2, i32* %arg1 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 45;
    cbr i1 %0(prob = 0.5), [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b5(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 60;
    cbr i1 %0(prob = 0.5), [ ^b9 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^entry1(i32* %arg, i32* %arg1):
    call (i32) -> void @starttime(i32 116);
    i32* %ip = alloc i32;
    store i32* %ip with i32 0;
    i32* %read_head = alloc i32;
    store i32* %read_head with i32 0;
    i32* %input_head = alloc i32;
    store i32* %input_head with i32 0;
    [512 * i32]* %return_address = alloc [512 * i32];
    i32* %0 = getelementptr &([512 * i32]* %return_address)[i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i64 2048);
    i32 %3 = load i32* %input_head;
    i32 %4 = load i32* %read_head;
    i32 %5 = load i32* %ip;
    i32 %6 = load i32* %arg;
    i32 %7 = load i32* %arg1;
    i1 %8 = scmp lt i32 %5, i32 %7;
    cbr i1 %8(prob = 0.97), [ ^while.body1 [512 * i32]* %return_address, i32 %7, i32 %6, i32 0, i32 %5, i32 %4, i32 %3, i32 0 ], [ ^entry2 i32 0 ];
^b6(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg with i32 %arg6;
    i32 %0 = add i32 %arg1, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp neq i32 %arg6, i32 35;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32 %0, i32 %arg6 ], [ ^b3 i32* %arg3, i32* %arg5, i32* %arg4 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = call () -> i32 @getint();
    store i32* %arg with i32 %0;
    i32 %1 = call () -> i32 @getch();
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2(prob = 0.97), [ ^super.header i32* %i, i32* %arg1, i32* %arg2, i32 %0, i32 0 ], [ ^entry1 i32* %arg2, i32* %arg1 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 91;
    cbr i1 %0(prob = 0.5), [ ^b10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b9(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 43;
    cbr i1 %0(prob = 0.5), [ ^b11 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^while.body1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), [ ^if.then [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %1 ];
^super.header(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1(prob = 0.67), [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ];
^entry2(i32 %arg):
    call (i32) -> void @stoptime(i32 118);
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.97), [ ^super.header1 i32 %arg, i32 0 ], [ ^b12 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 93;
    cbr i1 %0(prob = 0.5), [ ^b13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b11(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 45;
    cbr i1 %0(prob = 0.5), [ ^b14 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg5, i32 1;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg1;
    cbr i1 %2(prob = 0.97), [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %0, i32 %arg6, i32 %arg7 ], [ ^entry2 i32 %arg3 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %arg4];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = call () -> i32 @getch();
    store i32* %2 with i32 %3;
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = call () -> i32 @getch();
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = call () -> i32 @getch();
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = call () -> i32 @getch();
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = call () -> i32 @getch();
    store i32* %10 with i32 %11;
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = call () -> i32 @getch();
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = call () -> i32 @getch();
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = call () -> i32 @getch();
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = call () -> i32 @getch();
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = call () -> i32 @getch();
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = call () -> i32 @getch();
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = call () -> i32 @getch();
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = call () -> i32 @getch();
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = call () -> i32 @getch();
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = call () -> i32 @getch();
    store i32* %30 with i32 %31;
    i32 %32 = add i32 %arg4, i32 16;
    store i32* %arg with i32 %32;
    i1 %33 = scmp lt i32 %32, i32 %arg3;
    cbr i1 %33(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %32 ], [ ^entry1 i32* %arg2, i32* %arg1 ];
^indirect([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 60;
    cbr i1 %0(prob = 0.5), [ ^if.then1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^super.header1(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body4 i32 %arg, i32 %arg1 ], [ ^while.body5 i32 %arg, i32 %arg1 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %arg4];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %2;
    i1 %3 = scmp lt i32 %2, i32 %arg3;
    cbr i1 %3(prob = 0.97), [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %2 ], [ ^entry1 i32* %arg2, i32* %arg1 ];
^b12():
    ret i32 0;
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 46;
    cbr i1 %0(prob = 0.5), [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^if.then1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg5, i32 -1;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %0, i32 %arg6, i32 %arg7 ];
^b14(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 91;
    cbr i1 %0(prob = 0.5), [ ^b16 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^while.body4(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putch(i32 %3);
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = load i32* %4;
    call (i32) -> void @putch(i32 %5);
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = load i32* %6;
    call (i32) -> void @putch(i32 %7);
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = load i32* %8;
    call (i32) -> void @putch(i32 %9);
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = load i32* %10;
    call (i32) -> void @putch(i32 %11);
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = load i32* %12;
    call (i32) -> void @putch(i32 %13);
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = load i32* %14;
    call (i32) -> void @putch(i32 %15);
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = load i32* %16;
    call (i32) -> void @putch(i32 %17);
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = load i32* %18;
    call (i32) -> void @putch(i32 %19);
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = load i32* %20;
    call (i32) -> void @putch(i32 %21);
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = load i32* %22;
    call (i32) -> void @putch(i32 %23);
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = load i32* %24;
    call (i32) -> void @putch(i32 %25);
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = load i32* %26;
    call (i32) -> void @putch(i32 %27);
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = load i32* %28;
    call (i32) -> void @putch(i32 %29);
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = load i32* %30;
    call (i32) -> void @putch(i32 %31);
    i32 %32 = add i32 %arg1, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg;
    cbr i1 %33(prob = 0.97), [ ^super.header1 i32 %arg, i32 %32 ], [ ^b12 ];
^while.body5(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3(prob = 0.97), [ ^while.body5 i32 %arg, i32 %2 ], [ ^b12 ];
^if.else([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 43;
    cbr i1 %0(prob = 0.5), [ ^if.then2 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect1 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 44;
    cbr i1 %0(prob = 0.5), [ ^b17 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b16(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 93;
    cbr i1 %0(prob = 0.5), [ ^b18 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.header([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0(prob = 0.97), [ ^while.body1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^entry2 i32 %arg4 ];
^indirect1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 45;
    cbr i1 %0(prob = 0.5), [ ^if.then3 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else1 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 35;
    cbr i1 %0(prob = 0.97), [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ];
^b18(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 46;
    cbr i1 %0(prob = 0.5), [ ^b19 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 -1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^if.else1([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 91;
    cbr i1 %0(prob = 0.5), [ ^if.then4 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect2 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1(prob = 0.5), [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b19(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 44;
    cbr i1 %0(prob = 0.5), [ ^b20 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then4([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^if.then5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^while.body7 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 1 ];
^indirect2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 93;
    cbr i1 %0(prob = 0.5), [ ^if.then6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else2 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b20(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 35;
    cbr i1 %0(prob = 0.97), [ ^while.body8 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7 ];
^if.then5([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([512 * i32]* %arg)[i64 0][i32 %arg7];
    store i32* %0 with i32 %arg4;
    i32 %1 = add i32 %arg7, i32 1;
    i32 %2 = add i32 %arg4, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3(prob = 0.97), [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %2, i32 %arg5, i32 %arg6, i32 %1 ], [ ^entry2 i32 %arg3 ];
^if.then6([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^if.then7 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^if.else3 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.body7([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg4, i32 1;
    i32* %1 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 93;
    cbr i1 %3(prob = 0.5), [ ^indirect3 [512 * i32]* %arg, i32 %2, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b21 [512 * i32]* %arg, i32 %2, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.else2([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 46;
    cbr i1 %0(prob = 0.5), [ ^if.then8 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect4 [512 * i32]* %arg, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.body8(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1(prob = 0.5), [ ^b5 i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b6 i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then7([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 -1;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %arg5, i32 %arg6, i32 %0 ];
^if.then8([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %arg3];
    i32* %1 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i32 %4 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %4, i32 %arg1, i32 %arg2, i32 %3, i32 %4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg9, i32 -1;
    i1 %1 = scmp eq i32 %arg1, i32 91;
    cbr i1 %1(prob = 0.5), [ ^if.then9 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ], [ ^indirect6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ];
^if.else3([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 -1;
    i32* %1 = getelementptr &([512 * i32]* %arg)[i64 0][i32 %0];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %2, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg1;
    cbr i1 %4(prob = 0.97), [ ^while.body1 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^entry2 i32 %arg3 ];
^b21([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 91;
    cbr i1 %0(prob = 0.5), [ ^if.then9 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^indirect6 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^indirect4([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg1, i32 44;
    cbr i1 %0(prob = 0.5), [ ^if.then10 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then9([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^while.body7 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %0 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect5([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect6([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp gt i32 %arg8, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body7 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect5 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^if.then10([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp ge i32 %arg6, i32 %arg2;
    cbr i1 %0(prob = 0.5), [ ^if.then11 [512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^indirect7 [512 * i32]* %arg, i32 %arg6, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg7 ];
^if.then11([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg5];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg4, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1, i32 %arg5, i32 %arg6, i32 %arg7 ];
^indirect7([512 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %arg6];
    i32* %1 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %arg1];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg1, i32 1;
    i32 %4 = add i32 %arg5, i32 1;
    ubr [ ^while.header [512 * i32]* %arg, i32 %4, i32 %arg2, i32 %arg3, i32 %arg4, i32 %4, i32 %arg6, i32 %3, i32 %arg7 ];
}
