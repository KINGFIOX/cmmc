internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program;
internal [65536 * i32]* @tape;
internal [65536 * i32]* @input;
internal [65536 * i32]* @output;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * i32]* %return_a = alloc [512 * i32];
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 62;
    i1 %2 = scmp neq i32 %0, i32 60;
    i1 %3 = and i1 %1, i1 %2;
    i1 %4 = scmp neq i32 %0, i32 43;
    i1 %5 = and i1 %3, i1 %4;
    i1 %6 = scmp neq i32 %0, i32 45;
    i1 %7 = and i1 %5, i1 %6;
    i1 %8 = scmp neq i32 %0, i32 91;
    i1 %9 = and i1 %7, i1 %8;
    i1 %10 = scmp neq i32 %0, i32 93;
    i1 %11 = and i1 %9, i1 %10;
    i1 %12 = scmp neq i32 %0, i32 46;
    i1 %13 = and i1 %11, i1 %12;
    i1 %14 = scmp neq i32 %0, i32 44;
    i1 %15 = and i1 %13, i1 %14;
    i1 %16 = scmp neq i32 %0, i32 35;
    i1 %17 = and i1 %15, i1 %16;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %18 = call () -> i32 @getch();
    i1 %19 = scmp neq i32 %18, i32 62;
    i1 %20 = scmp neq i32 %18, i32 60;
    i1 %21 = and i1 %19, i1 %20;
    i1 %22 = scmp neq i32 %18, i32 43;
    i1 %23 = and i1 %21, i1 %22;
    i1 %24 = scmp neq i32 %18, i32 45;
    i1 %25 = and i1 %23, i1 %24;
    i1 %26 = scmp neq i32 %18, i32 91;
    i1 %27 = and i1 %25, i1 %26;
    i1 %28 = scmp neq i32 %18, i32 93;
    i1 %29 = and i1 %27, i1 %28;
    i1 %30 = scmp neq i32 %18, i32 46;
    i1 %31 = and i1 %29, i1 %30;
    i1 %32 = scmp neq i32 %18, i32 44;
    i1 %33 = and i1 %31, i1 %32;
    i1 %34 = scmp neq i32 %18, i32 35;
    i1 %35 = and i1 %33, i1 %34;
    cbr i1 %35(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %36 = phi [^entry, i32 %0] [^while.body, i32 %18];
    i1 %37 = scmp neq i32 %36, i32 35;
    [65536 * i32]* %38 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %39 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    cbr i1 %37(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %40 = phi [^b, i32 0] [^b3, i32 %87];
    i32 %41 = phi [^b, i32 %36] [^b3, i32 %86];
    i32* %42 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %40];
    store i32* %42 with i32 %41;
    i32 %43 = call () -> i32 @getch();
    i1 %44 = scmp neq i32 %43, i32 62;
    i1 %45 = scmp neq i32 %43, i32 60;
    i1 %46 = and i1 %44, i1 %45;
    i1 %47 = scmp neq i32 %43, i32 43;
    i1 %48 = and i1 %46, i1 %47;
    i1 %49 = scmp neq i32 %43, i32 45;
    i1 %50 = and i1 %48, i1 %49;
    i1 %51 = scmp neq i32 %43, i32 91;
    i1 %52 = and i1 %50, i1 %51;
    i1 %53 = scmp neq i32 %43, i32 93;
    i1 %54 = and i1 %52, i1 %53;
    i1 %55 = scmp neq i32 %43, i32 46;
    i1 %56 = and i1 %54, i1 %55;
    i1 %57 = scmp neq i32 %43, i32 44;
    i1 %58 = and i1 %56, i1 %57;
    i1 %59 = scmp neq i32 %43, i32 35;
    i1 %60 = and i1 %58, i1 %59;
    cbr i1 %60(prob = 0.97), ^while.body2, ^b3;
  ^b1:
    i32 %61 = phi [^b, i32 0] [^b3, i32 %87];
    i32 %62 = call () -> i32 @getch();
    i1 %63 = scmp neq i32 %62, i32 105;
    cbr i1 %63(prob = 0.5), ^entry1, ^b2;
  ^entry1:
    i32 %64 = phi [^b1, i32 0] [^while.header, i32 %66];
    call (i32) -> void @starttime(i32 116);
    i32* %65 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    ubr ^b4;
  ^b2:
    i32 %66 = call () -> i32 @getint();
    i32 %67 = call () -> i32 @getch();
    ubr ^while.header;
  ^while.body2:
    i32 %68 = call () -> i32 @getch();
    i1 %69 = scmp neq i32 %68, i32 62;
    i1 %70 = scmp neq i32 %68, i32 60;
    i1 %71 = and i1 %69, i1 %70;
    i1 %72 = scmp neq i32 %68, i32 43;
    i1 %73 = and i1 %71, i1 %72;
    i1 %74 = scmp neq i32 %68, i32 45;
    i1 %75 = and i1 %73, i1 %74;
    i1 %76 = scmp neq i32 %68, i32 91;
    i1 %77 = and i1 %75, i1 %76;
    i1 %78 = scmp neq i32 %68, i32 93;
    i1 %79 = and i1 %77, i1 %78;
    i1 %80 = scmp neq i32 %68, i32 46;
    i1 %81 = and i1 %79, i1 %80;
    i1 %82 = scmp neq i32 %68, i32 44;
    i1 %83 = and i1 %81, i1 %82;
    i1 %84 = scmp neq i32 %68, i32 35;
    i1 %85 = and i1 %83, i1 %84;
    cbr i1 %85(prob = 0.97), ^while.body2, ^b3;
  ^b3:
    i32 %86 = phi [^while.body1, i32 %43] [^while.body2, i32 %68];
    i32 %87 = add i32 %40, i32 1;
    i1 %88 = scmp neq i32 %86, i32 35;
    cbr i1 %88(prob = 0.97), ^while.body1, ^b1;
  ^b4:
    i64 %89 = phi [^entry1, i64 0] [^b4, i64 %106];
    i32* %90 = getelementptr &(i32* %65)[i64 %89];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %90)[i64 1];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %90)[i64 2];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %90)[i64 3];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %90)[i64 4];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %90)[i64 5];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %90)[i64 6];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %90)[i64 7];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %90)[i64 8];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %90)[i64 9];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %90)[i64 10];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %90)[i64 11];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %90)[i64 12];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %90)[i64 13];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %90)[i64 14];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %90)[i64 15];
    store i32* %105 with i32 0;
    i64 %106 = add i64 %89, i64 16;
    i1 %107 = scmp lt i64 %106, i64 512;
    cbr i1 %107(prob = 0.97), ^b4, ^entry2;
  ^while.header:
    i32 %108 = phi [^b2, i32 0] [^while.body3, i32 %112];
    i1 %109 = scmp gt i32 %66, i32 %108;
    cbr i1 %109(prob = 0.97), ^while.body3, ^entry1;
  ^while.body3:
    i32 %110 = call () -> i32 @getch();
    i32* %111 = getelementptr &([65536 * i32]* %39)[i64 0][i32 %108];
    store i32* %111 with i32 %110;
    i32 %112 = add i32 %108, i32 1;
    ubr ^while.header;
  ^entry2:
    [65536 * i32]* %113 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header1;
  ^while.header1:
    i32 %114 = phi [^entry2, i32 0] [^b5, i32 %132];
    i32 %115 = phi [^entry2, i32 0] [^b5, i32 %133];
    i32 %116 = phi [^entry2, i32 0] [^b5, i32 %134];
    i32 %117 = phi [^entry2, i32 0] [^b5, i32 %135];
    i32 %118 = phi [^entry2, i32 0] [^b5, i32 %137];
    i1 %119 = scmp gt i32 %61, i32 %118;
    cbr i1 %119(prob = 0.97), ^while.body4, ^entry3;
  ^while.body4:
    i32* %120 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %118];
    i32 %121 = load i32* %120;
    i1 %122 = scmp eq i32 %121, i32 62;
    cbr i1 %122(prob = 0.5), ^if.then, ^if.else;
  ^entry3:
    call (i32) -> void @stoptime(i32 118);
    i1 %123 = scmp gt i32 %114, i32 0;
    [65536 * i32]* %124 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %123(prob = 0.97), ^while.body5, ^entry4;
  ^if.then:
    i32 %125 = add i32 %117, i32 1;
    ubr ^b5;
  ^if.else:
    i1 %126 = scmp eq i32 %121, i32 60;
    cbr i1 %126(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body5:
    i32 %127 = phi [^entry3, i32 0] [^while.body5, i32 %130];
    i32* %128 = getelementptr &([65536 * i32]* %124)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    call (i32) -> void @putch(i32 %129);
    i32 %130 = add i32 %127, i32 1;
    i1 %131 = scmp gt i32 %114, i32 %130;
    cbr i1 %131(prob = 0.97), ^while.body5, ^entry4;
  ^entry4:
    ret i32 0;
  ^b5:
    i32 %132 = phi [^if.then, i32 %114] [^if.then1, i32 %114] [^if.then2, i32 %114] [^if.then3, i32 %114] [^if.then5, i32 %114] [^while.header2, i32 %114] [^if.then7, i32 %114] [^if.else6, i32 %114] [^if.then8, i32 %178] [^if.else7, i32 %114] [^if.then10, i32 %114] [^if.else8, i32 %114];
    i32 %133 = phi [^if.then, i32 %115] [^if.then1, i32 %115] [^if.then2, i32 %115] [^if.then3, i32 %115] [^if.then5, i32 %115] [^while.header2, i32 %115] [^if.then7, i32 %115] [^if.else6, i32 %115] [^if.then8, i32 %115] [^if.else7, i32 %115] [^if.then10, i32 %115] [^if.else8, i32 %185];
    i32 %134 = phi [^if.then, i32 %116] [^if.then1, i32 %116] [^if.then2, i32 %116] [^if.then3, i32 %116] [^if.then5, i32 %153] [^while.header2, i32 %116] [^if.then7, i32 %161] [^if.else6, i32 %116] [^if.then8, i32 %116] [^if.else7, i32 %116] [^if.then10, i32 %116] [^if.else8, i32 %116];
    i32 %135 = phi [^if.then, i32 %125] [^if.then1, i32 %138] [^if.then2, i32 %117] [^if.then3, i32 %117] [^if.then5, i32 %117] [^while.header2, i32 %117] [^if.then7, i32 %117] [^if.else6, i32 %117] [^if.then8, i32 %117] [^if.else7, i32 %117] [^if.then10, i32 %117] [^if.else8, i32 %117];
    i32 %136 = phi [^if.then, i32 %118] [^if.then1, i32 %118] [^if.then2, i32 %118] [^if.then3, i32 %118] [^if.then5, i32 %118] [^while.header2, i32 %158] [^if.then7, i32 %118] [^if.else6, i32 %173] [^if.then8, i32 %118] [^if.else7, i32 %118] [^if.then10, i32 %118] [^if.else8, i32 %118];
    i32 %137 = add i32 %136, i32 1;
    ubr ^while.header1;
  ^if.then1:
    i32 %138 = add i32 %117, i32 -1;
    ubr ^b5;
  ^if.else1:
    i1 %139 = scmp eq i32 %121, i32 43;
    cbr i1 %139(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %140 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %141, i32 1;
    store i32* %140 with i32 %142;
    ubr ^b5;
  ^if.else2:
    i1 %143 = scmp eq i32 %121, i32 45;
    cbr i1 %143(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %144 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %145, i32 -1;
    store i32* %144 with i32 %146;
    ubr ^b5;
  ^if.else3:
    i1 %147 = scmp eq i32 %121, i32 91;
    cbr i1 %147(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %148 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    i32 %149 = load i32* %148;
    i1 %150 = scmp neq i32 %149, i32 0;
    cbr i1 %150(prob = 0.5), ^if.then5, ^while.header2;
  ^if.else4:
    i1 %151 = scmp eq i32 %121, i32 93;
    cbr i1 %151(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %152 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %116];
    store i32* %152 with i32 %118;
    i32 %153 = add i32 %116, i32 1;
    ubr ^b5;
  ^if.then6:
    i32* %154 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    i32 %155 = load i32* %154;
    i1 %156 = scmp eq i32 %155, i32 0;
    cbr i1 %156(prob = 0.5), ^if.then7, ^if.else6;
  ^while.header2:
    i32 %157 = phi [^if.then4, i32 1] [^while.body6, i32 %170];
    i32 %158 = phi [^if.then4, i32 %118] [^while.body6, i32 %162];
    i1 %159 = scmp gt i32 %157, i32 0;
    cbr i1 %159(prob = 0.97), ^while.body6, ^b5;
  ^if.else5:
    i1 %160 = scmp eq i32 %121, i32 46;
    cbr i1 %160(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %161 = add i32 %116, i32 -1;
    ubr ^b5;
  ^while.body6:
    i32 %162 = add i32 %158, i32 1;
    i32* %163 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %164, i32 93;
    i32 %166 = add i32 %157, i32 -1;
    i32 %167 = select i1 %165 ? i32 %166 : i32 %157;
    i32 %168 = add i32 %167, i32 1;
    i1 %169 = scmp eq i32 %164, i32 91;
    i32 %170 = select i1 %169 ? i32 %168 : i32 %167;
    ubr ^while.header2;
  ^if.else6:
    i32 %171 = add i32 %116, i32 -1;
    i32* %172 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %171];
    i32 %173 = load i32* %172;
    ubr ^b5;
  ^if.then8:
    i32* %174 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    i32 %175 = load i32* %174;
    [65536 * i32]* %176 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %177 = getelementptr &([65536 * i32]* %176)[i64 0][i32 %114];
    store i32* %177 with i32 %175;
    i32 %178 = add i32 %114, i32 1;
    ubr ^b5;
  ^if.else7:
    i1 %179 = scmp eq i32 %121, i32 44;
    cbr i1 %179(prob = 0.5), ^if.then9, ^b5;
  ^if.then9:
    i1 %180 = scmp le i32 %64, i32 %115;
    cbr i1 %180(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    i32* %181 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    store i32* %181 with i32 0;
    ubr ^b5;
  ^if.else8:
    i32* %182 = getelementptr &([65536 * i32]* %39)[i64 0][i32 %115];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &([65536 * i32]* %113)[i64 0][i32 %117];
    store i32* %184 with i32 %183;
    i32 %185 = add i32 %115, i32 1;
    ubr ^b5;
}
