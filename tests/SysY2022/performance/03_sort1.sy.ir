internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32], align 8;
    [16 * i32]* %tail = alloc [16 * i32], align 8;
    [16 * i32]* %head = alloc [16 * i32], align 8;
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %52 = mul i32 %bitround, i32 4;
    i32 %53 = shl i32 1, i32 %52;
    i1 %54 = icmp slt i32 %l, i32 %r;
    i32 %55 = add i32 %bitround, i32 -1;
    i1 %56 = icmp sgt i32 %bitround, i32 0;
    i1 %57 = icmp slt i32 %bitround, i32 8;
    cbr i1 %54(prob = 0.984615), ^while.body, ^b1;
  ^if.then:
    ret;
  ^b1:
    store i32* %4 with i32 %l;
    i32 %58 = load i32* %36;
    i32 %59 = add i32 %l, i32 %58;
    store i32* %20 with i32 %59;
    ubr ^while.body1;
  ^while.body:
    i32 %60 = phi [^b, i32 %l] [^b2, i32 %95];
    i32* %61 = getelementptr &(i32* %a)[i32 %60];
    i32 %62 = load i32* %61;
    cbr i1 %56(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    i32 %63 = sdiv i32 %62, i32 %53;
    i32 %64 = select i1 %57 ? i32 %63 : i32 0;
    ubr ^b2;
  ^while.body1:
    i32 %65 = phi [^b1, i32 1] [^while.body1, i32 %88];
    i32* %66 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %65];
    i32* %67 = getelementptr &(i32* %66)[i64 -1];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([16 * i32]* %head)[i64 0][i32 %65];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %65];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %68, i32 %71;
    store i32* %66 with i32 %72;
    i32* %73 = getelementptr &(i32* %69)[i64 1];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %70)[i64 1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %72, i32 %75;
    i32* %77 = getelementptr &(i32* %66)[i64 1];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %69)[i64 2];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %70)[i64 2];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %76, i32 %80;
    i32* %82 = getelementptr &(i32* %66)[i64 2];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %69)[i64 3];
    store i32* %83 with i32 %81;
    i32* %84 = getelementptr &(i32* %70)[i64 3];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %81, i32 %85;
    i32* %87 = getelementptr &(i32* %66)[i64 3];
    store i32* %87 with i32 %86;
    i32 %88 = add i32 %65, i32 4;
    i1 %89 = icmp slt i32 %88, i32 13;
    cbr i1 %89(prob = 0.666667), ^while.body1, ^while.body2;
  ^b2:
    i32 %90 = phi [^while.body, i32 %62] [^prebody, i32 %64];
    i32 %91 = and i32 %90, i32 15;
    i32* %92 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %93, i32 1;
    store i32* %92 with i32 %94;
    i32 %95 = add i32 %60, i32 1;
    i1 %96 = icmp sgt i32 %r, i32 %95;
    cbr i1 %96(prob = 0.984615), ^while.body, ^b1;
  ^while.body2:
    i32* %97 = getelementptr &(i32* %69)[i64 4];
    store i32* %97 with i32 %86;
    i32* %98 = getelementptr &(i32* %70)[i64 4];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %86, i32 %99;
    i32* %101 = getelementptr &(i32* %66)[i64 4];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %69)[i64 5];
    store i32* %102 with i32 %100;
    i32* %103 = getelementptr &(i32* %70)[i64 5];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %100, i32 %104;
    i32* %106 = getelementptr &(i32* %66)[i64 5];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %69)[i64 6];
    store i32* %107 with i32 %105;
    i32* %108 = getelementptr &(i32* %70)[i64 6];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %105, i32 %109;
    i32* %111 = getelementptr &(i32* %66)[i64 6];
    store i32* %111 with i32 %110;
    ubr ^112;
  ^112:
    i32 %113 = phi [^while.body2, i32 0] [^b3, i32 %122];
    i32* %114 = getelementptr &([16 * i32]* %head)[i64 0][i32 %113];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %113];
    i32 %117 = load i32* %116;
    i1 %118 = icmp slt i32 %115, i32 %117;
    cbr i1 %118(prob = 0.984615), ^while.body3, ^b3;
  ^while.body3:
    i32 %119 = phi [^112, i32 %115] [^b6, i32 %150];
    i32* %120 = getelementptr &(i32* %a)[i32 %119];
    i32 %121 = load i32* %120;
    ubr ^while.header;
  ^b3:
    i32 %122 = add i32 %113, i32 1;
    i1 %123 = icmp slt i32 %122, i32 16;
    cbr i1 %123(prob = 0.9375), ^112, ^b4;
  ^while.header:
    i32 %124 = phi [^while.body3, i32 %121] [^while.body5, i32 %139];
    cbr i1 %56(prob = 0.984615), ^prebody1, ^b5;
  ^b4:
    store i32* %4 with i32 %l;
    i32 %125 = load i32* %36;
    i32 %126 = add i32 %l, i32 %125;
    store i32* %20 with i32 %126;
    ubr ^while.body4;
  ^prebody1:
    i32 %127 = sdiv i32 %124, i32 %53;
    i32 %128 = select i1 %57 ? i32 %127 : i32 0;
    ubr ^b5;
  ^b5:
    i32 %129 = phi [^while.header, i32 %124] [^prebody1, i32 %128];
    i32 %130 = srem i32 %129, i32 16;
    i1 %131 = icmp neq i32 %113, i32 %130;
    cbr i1 %131(prob = 0.984615), ^while.body5, ^b6;
  ^while.body4:
    i32 %132 = phi [^b4, i32 0] [^b7, i32 %155];
    i32* %133 = getelementptr &([16 * i32]* %head)[i64 0][i32 %132];
    i32* %134 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %132];
    i1 %135 = icmp sgt i32 %132, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then1, ^indirect;
  ^while.body5:
    i32* %136 = getelementptr &([16 * i32]* %head)[i64 0][i32 %130];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %a)[i32 %137];
    i32 %139 = load i32* %138;
    store i32* %138 with i32 %124;
    i32 %140 = add i32 %137, i32 1;
    store i32* %136 with i32 %140;
    ubr ^while.header;
  ^if.then1:
    i32* %141 = getelementptr &(i32* %134)[i64 -1];
    i32 %142 = load i32* %141;
    store i32* %133 with i32 %142;
    i32* %143 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %132];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %142, i32 %144;
    store i32* %134 with i32 %145;
    ubr ^b7;
  ^indirect:
    i32 %146 = load i32* %133;
    i32 %147 = load i32* %134;
    ubr ^b7;
  ^b6:
    i32 %148 = load i32* %114;
    i32* %149 = getelementptr &(i32* %a)[i32 %148];
    store i32* %149 with i32 %124;
    i32 %150 = add i32 %148, i32 1;
    store i32* %114 with i32 %150;
    i32 %151 = load i32* %116;
    i1 %152 = icmp slt i32 %150, i32 %151;
    cbr i1 %152(prob = 0.984615), ^while.body3, ^b3;
  ^b7:
    i32 %153 = phi [^if.then1, i32 %142] [^indirect, i32 %146];
    i32 %154 = phi [^if.then1, i32 %145] [^indirect, i32 %147];
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %55, i32* %a, i32 %153, i32 %154);
    i32 %155 = add i32 %132, i32 1;
    i1 %156 = icmp slt i32 %155, i32 16;
    cbr i1 %156(prob = 0.9375), ^while.body4, ^if.then;
}
internal [30000010 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    [12 * i8]* %3 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %4 = ptradd [12 * i8]* %3, i32 0;
    store i32* %4 with i32 0;
    i32* %5 = ptradd [12 * i8]* %3, i32 4;
    store i32* %5 with i32 0;
    i32* %6 = ptradd [12 * i8]* %3, i32 8;
    store i32* %6 with i32 %2;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %2, i8* %7);
    i32 %8 = load i32* %4;
    i32 %9 = abs i32 %8;
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [30000010 * i32]* %2 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    ubr ^b1;
  ^b1:
    i32 %3 = phi [^b, i32 %0] [^b1, i32 %11];
    i32 %4 = phi [^b, i32 0] [^b1, i32 %10];
    i32* %5 = getelementptr &([30000010 * i32]* %2)[i64 0][i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %3, i32 2;
    i32 %8 = srem i32 %6, i32 %7;
    i32 %9 = mul i32 %3, i32 %8;
    i32 %10 = add i32 %4, i32 %9;
    i32 %11 = add i32 %3, i32 1;
    i1 %12 = icmp sgt i32 %1, i32 %11;
    cbr i1 %12(prob = 0.984615), ^b1, ^b2;
  ^b2:
    [12 * i8]* %13 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %14 = ptradd [12 * i8]* %13, i32 0;
    atomicadd i32* %14, i32 %10;
    ret;
}
internal [12 * i8]* @cmmc_parallel_body_payload_0, align 8;
