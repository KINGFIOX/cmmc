internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^while.header;
  ^while.header:
    i1 %52 = icmp slt i32 %l, i32 %r;
    i1 %53 = icmp sgt i32 %bitround, i32 4;
    i1 %54 = icmp sgt i32 %bitround, i32 0;
    i32 %55 = add i32 %bitround, i32 -1;
    cbr i1 %52(prob = 0.97), ^while.body, ^b;
  ^if.then:
    ret;
  ^b:
    store i32* %4 with i32 %l;
    i32 %56 = load i32* %36;
    i32 %57 = add i32 %l, i32 %56;
    store i32* %20 with i32 %57;
    store i32* %5 with i32 %57;
    i32 %58 = load i32* %37;
    i32 %59 = add i32 %57, i32 %58;
    store i32* %21 with i32 %59;
    store i32* %6 with i32 %59;
    i32 %60 = load i32* %38;
    i32 %61 = add i32 %59, i32 %60;
    store i32* %22 with i32 %61;
    store i32* %7 with i32 %61;
    i32 %62 = load i32* %39;
    i32 %63 = add i32 %61, i32 %62;
    store i32* %23 with i32 %63;
    store i32* %8 with i32 %63;
    i32 %64 = load i32* %40;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %24 with i32 %65;
    store i32* %9 with i32 %65;
    i32 %66 = load i32* %41;
    i32 %67 = add i32 %65, i32 %66;
    store i32* %25 with i32 %67;
    store i32* %10 with i32 %67;
    i32 %68 = load i32* %42;
    i32 %69 = add i32 %67, i32 %68;
    store i32* %26 with i32 %69;
    store i32* %11 with i32 %69;
    i32 %70 = load i32* %43;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %27 with i32 %71;
    store i32* %12 with i32 %71;
    i32 %72 = load i32* %44;
    i32 %73 = add i32 %71, i32 %72;
    store i32* %28 with i32 %73;
    store i32* %13 with i32 %73;
    i32 %74 = load i32* %45;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %29 with i32 %75;
    store i32* %14 with i32 %75;
    i32 %76 = load i32* %46;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %30 with i32 %77;
    store i32* %15 with i32 %77;
    i32 %78 = load i32* %47;
    i32 %79 = add i32 %77, i32 %78;
    store i32* %31 with i32 %79;
    store i32* %16 with i32 %79;
    i32 %80 = load i32* %48;
    i32 %81 = add i32 %79, i32 %80;
    store i32* %32 with i32 %81;
    store i32* %17 with i32 %81;
    i32 %82 = load i32* %49;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %33 with i32 %83;
    store i32* %18 with i32 %83;
    i32 %84 = load i32* %50;
    i32 %85 = add i32 %83, i32 %84;
    store i32* %34 with i32 %85;
    store i32* %19 with i32 %85;
    i32 %86 = load i32* %51;
    i32 %87 = add i32 %85, i32 %86;
    store i32* %35 with i32 %87;
    ubr ^while.header1;
  ^while.body:
    i32 %88 = phi [^while.header, i32 %l] [^b1, i32 %98];
    i32* %89 = getelementptr &(i32* %a)[i32 %88];
    i32 %90 = load i32* %89;
    cbr i1 %54(prob = 0.97), ^super.header, ^b1;
  ^super.header:
    cbr i1 %53(prob = 0.89), ^while.body1, ^while.body2;
  ^while.header1:
    i32 %91 = phi [^b, i32 0] [^b3, i32 %124];
    i1 %92 = icmp slt i32 %91, i32 16;
    cbr i1 %92(prob = 0.97), ^indirect, ^b2;
  ^b1:
    i32 %93 = phi [^while.body, i32 %90] [^while.body2, i32 %115];
    i32 %94 = and i32 %93, i32 15;
    i32* %95 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %96, i32 1;
    store i32* %95 with i32 %97;
    i32 %98 = add i32 %88, i32 1;
    i1 %99 = icmp sgt i32 %r, i32 %98;
    cbr i1 %99(prob = 0.97), ^while.body, ^b;
  ^indirect:
    i32* %100 = getelementptr &([16 * i32]* %head)[i64 0][i32 %91];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %91];
    ubr ^while.header2;
  ^b2:
    store i32* %4 with i32 %l;
    i32 %103 = load i32* %36;
    i32 %104 = add i32 %l, i32 %103;
    store i32* %20 with i32 %104;
    ubr ^while.header3;
  ^while.body1:
    i32 %105 = phi [^super.header, i32 %90] [^while.body1, i32 %109];
    i32 %106 = phi [^super.header, i32 0] [^while.body1, i32 %110];
    i32 %107 = add i32 %106, i32 8;
    i1 %108 = icmp sgt i32 %bitround, i32 %107;
    i32 %109 = sdiv i32 %105, i32 65536;
    i32 %110 = add i32 %106, i32 4;
    cbr i1 %108(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %111 = phi [^super.header, i32 0] [^while.body1, i32 %110] [^while.body2, i32 %113];
    i32 %112 = phi [^super.header, i32 %90] [^while.body1, i32 %109] [^while.body2, i32 %115];
    i32 %113 = add i32 %111, i32 1;
    i1 %114 = icmp sgt i32 %bitround, i32 %113;
    i32 %115 = sdiv i32 %112, i32 16;
    cbr i1 %114(prob = 0.75), ^while.body2, ^b1;
  ^while.header2:
    i32 %116 = phi [^indirect, i32 %101] [^b6, i32 %156];
    i32 %117 = load i32* %102;
    i1 %118 = icmp slt i32 %116, i32 %117;
    cbr i1 %118(prob = 0.97), ^while.body3, ^b3;
  ^while.header3:
    i32 %119 = phi [^b2, i32 0] [^b4, i32 %139];
    i1 %120 = icmp slt i32 %119, i32 16;
    cbr i1 %120(prob = 0.97), ^while.body4, ^if.then;
  ^while.body3:
    i32 %121 = load i32* %100;
    i32* %122 = getelementptr &(i32* %a)[i32 %121];
    i32 %123 = load i32* %122;
    ubr ^while.header4;
  ^b3:
    i32 %124 = add i32 %91, i32 1;
    ubr ^while.header1;
  ^while.body4:
    i1 %125 = icmp sgt i32 %119, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then1, ^b4;
  ^if.then1:
    i32 %126 = add i32 %119, i32 -1;
    i32* %127 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %126];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &([16 * i32]* %head)[i64 0][i32 %119];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %119];
    i32 %131 = load i32* %130;
    i32 %132 = add i32 %128, i32 %131;
    i32* %133 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %119];
    store i32* %133 with i32 %132;
    ubr ^b4;
  ^while.header4:
    i32 %134 = phi [^while.body3, i32 %123] [^while.body5, i32 %146];
    cbr i1 %54(prob = 0.97), ^super.header1, ^b5;
  ^b4:
    i32* %135 = getelementptr &([16 * i32]* %head)[i64 0][i32 %119];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %119];
    i32 %138 = load i32* %137;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %55, i32* %a, i32 %136, i32 %138);
    i32 %139 = add i32 %119, i32 1;
    ubr ^while.header3;
  ^super.header1:
    cbr i1 %53(prob = 0.89), ^while.body6, ^while.body7;
  ^b5:
    i32 %140 = phi [^while.header4, i32 %134] [^while.body7, i32 %161];
    i32 %141 = srem i32 %140, i32 16;
    i1 %142 = icmp neq i32 %91, i32 %141;
    cbr i1 %142(prob = 0.97), ^while.body5, ^b6;
  ^while.body5:
    i32* %143 = getelementptr &([16 * i32]* %head)[i64 0][i32 %141];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %a)[i32 %144];
    i32 %146 = load i32* %145;
    store i32* %145 with i32 %134;
    i32 %147 = add i32 %144, i32 1;
    store i32* %143 with i32 %147;
    ubr ^while.header4;
  ^while.body6:
    i32 %148 = phi [^super.header1, i32 %134] [^while.body6, i32 %152];
    i32 %149 = phi [^super.header1, i32 0] [^while.body6, i32 %153];
    i32 %150 = add i32 %149, i32 8;
    i1 %151 = icmp sgt i32 %bitround, i32 %150;
    i32 %152 = sdiv i32 %148, i32 65536;
    i32 %153 = add i32 %149, i32 4;
    cbr i1 %151(prob = 0.89), ^while.body6, ^while.body7;
  ^b6:
    i32 %154 = load i32* %100;
    i32* %155 = getelementptr &(i32* %a)[i32 %154];
    store i32* %155 with i32 %134;
    i32 %156 = add i32 %154, i32 1;
    store i32* %100 with i32 %156;
    ubr ^while.header2;
  ^while.body7:
    i32 %157 = phi [^super.header1, i32 0] [^while.body6, i32 %153] [^while.body7, i32 %159];
    i32 %158 = phi [^super.header1, i32 %134] [^while.body6, i32 %152] [^while.body7, i32 %161];
    i32 %159 = add i32 %157, i32 1;
    i1 %160 = icmp sgt i32 %bitround, i32 %159;
    i32 %161 = sdiv i32 %158, i32 16;
    cbr i1 %160(prob = 0.75), ^while.body7, ^b5;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i1 %4 = icmp sgt i32 %2, i32 4;
    cbr i1 %4(prob = 0.89), ^while.body, ^while.body1;
  ^b:
    i32 %5 = phi [^entry, i32 0] [^while.body1, i32 %43];
    call (i32) -> void @stoptime(i32 102);
    i32 %6 = abs i32 %5;
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32 %7 = phi [^prebody, i32 0] [^while.body, i32 %23];
    i32 %8 = phi [^prebody, i32 0] [^while.body, i32 %33];
    i32* %9 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %7];
    i32 %10 = load i32* %9;
    i32* %11 = getelementptr &(i32* %9)[i64 1];
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %7, i32 3;
    i32 %14 = srem i32 %12, i32 %13;
    i32 %15 = add i32 %7, i32 1;
    i32 %16 = mul i32 %14, i32 %15;
    i32 %17 = add i32 %7, i32 2;
    i32 %18 = srem i32 %10, i32 %17;
    i32 %19 = mul i32 %7, i32 %18;
    i32 %20 = add i32 %16, i32 %19;
    i32* %21 = getelementptr &(i32* %9)[i64 2];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %7, i32 4;
    i32 %24 = srem i32 %22, i32 %23;
    i32 %25 = mul i32 %17, i32 %24;
    i32 %26 = add i32 %20, i32 %25;
    i32* %27 = getelementptr &(i32* %9)[i64 3];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %7, i32 5;
    i32 %30 = srem i32 %28, i32 %29;
    i32 %31 = mul i32 %13, i32 %30;
    i32 %32 = add i32 %26, i32 %31;
    i32 %33 = add i32 %8, i32 %32;
    i32 %34 = add i32 %7, i32 8;
    i1 %35 = icmp sgt i32 %2, i32 %34;
    cbr i1 %35(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %36 = phi [^prebody, i32 0] [^while.body, i32 %33] [^while.body1, i32 %43];
    i32 %37 = phi [^prebody, i32 0] [^while.body, i32 %23] [^while.body1, i32 %44];
    i32* %38 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 2;
    i32 %41 = srem i32 %39, i32 %40;
    i32 %42 = mul i32 %37, i32 %41;
    i32 %43 = add i32 %36, i32 %42;
    i32 %44 = add i32 %37, i32 1;
    i1 %45 = icmp sgt i32 %2, i32 %44;
    cbr i1 %45(prob = 0.75), ^while.body1, ^b;
}
