internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^while.header;
  ^while.header:
    i1 %52 = icmp slt i32 %l, i32 %r;
    i1 %53 = icmp sgt i32 %bitround, i32 0;
    i32 %54 = add i32 %bitround, i32 -1;
    cbr i1 %52(prob = 0.97), ^while.body, ^b;
  ^if.then:
    ret;
  ^b:
    store i32* %4 with i32 %l;
    i32 %55 = load i32* %36;
    i32 %56 = add i32 %l, i32 %55;
    store i32* %20 with i32 %56;
    ubr ^while.body1;
  ^while.body:
    i32 %57 = phi [^while.header, i32 %l] [^b1, i32 %98];
    i32* %58 = getelementptr &(i32* %a)[i32 %57];
    i32 %59 = load i32* %58;
    cbr i1 %53(prob = 0.97), ^super.header, ^b1;
  ^super.header:
    i32 %60 = phi [^while.body, i32 0] [^while.body2, i32 %62];
    i32 %61 = phi [^while.body, i32 %59] [^while.body2, i32 %100];
    i32 %62 = add i32 %60, i32 4;
    i1 %63 = icmp sgt i32 %bitround, i32 %62;
    cbr i1 %63(prob = 0.89), ^while.body2, ^while.body4;
  ^while.body1:
    i32 %64 = phi [^b, i32 1] [^while.body1, i32 %91];
    i32 %65 = add i32 %64, i32 -1;
    i32* %66 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([16 * i32]* %head)[i64 0][i32 %64];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %64];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %67, i32 %70;
    i32* %72 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %64];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %68)[i64 1];
    store i32* %73 with i32 %71;
    i32* %74 = getelementptr &(i32* %69)[i64 1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %71, i32 %75;
    i32* %77 = getelementptr &(i32* %72)[i64 1];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %68)[i64 2];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %69)[i64 2];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %76, i32 %80;
    i32* %82 = getelementptr &(i32* %72)[i64 2];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %68)[i64 3];
    store i32* %83 with i32 %81;
    i32 %84 = add i32 %67, i32 %75;
    i32* %85 = getelementptr &(i32* %69)[i64 3];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    i32 %88 = add i32 %70, i32 %80;
    i32 %89 = add i32 %87, i32 %88;
    i32* %90 = getelementptr &(i32* %72)[i64 3];
    store i32* %90 with i32 %89;
    i32 %91 = add i32 %64, i32 4;
    i1 %92 = icmp slt i32 %91, i32 13;
    cbr i1 %92(prob = 0.67), ^while.body1, ^while.body3;
  ^b1:
    i32 %93 = phi [^while.body, i32 %59] [^while.body4, i32 %125];
    i32 %94 = and i32 %93, i32 15;
    i32* %95 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %96, i32 1;
    store i32* %95 with i32 %97;
    i32 %98 = add i32 %57, i32 1;
    i1 %99 = icmp sgt i32 %r, i32 %98;
    cbr i1 %99(prob = 0.97), ^while.body, ^b;
  ^while.body2:
    i32 %100 = sdiv i32 %61, i32 65536;
    ubr ^super.header;
  ^while.body3:
    i32 %101 = add i32 %64, i32 3;
    i32* %102 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %101];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &([16 * i32]* %head)[i64 0][i32 %91];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %91];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %103, i32 %106;
    i32* %108 = getelementptr &(i32* %102)[i64 1];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %104)[i64 1];
    store i32* %109 with i32 %107;
    i32* %110 = getelementptr &(i32* %105)[i64 1];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %107, i32 %111;
    i32* %113 = getelementptr &(i32* %102)[i64 2];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %104)[i64 2];
    store i32* %114 with i32 %112;
    i32 %115 = add i32 %103, i32 %111;
    i32* %116 = getelementptr &(i32* %105)[i64 2];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %106, i32 %117;
    i32 %119 = add i32 %115, i32 %118;
    i32* %120 = getelementptr &(i32* %102)[i64 3];
    store i32* %120 with i32 %119;
    ubr ^while.header1;
  ^while.body4:
    i32 %121 = phi [^super.header, i32 %60] [^while.body4, i32 %123];
    i32 %122 = phi [^super.header, i32 %61] [^while.body4, i32 %125];
    i32 %123 = add i32 %121, i32 1;
    i1 %124 = icmp sgt i32 %bitround, i32 %123;
    i32 %125 = sdiv i32 %122, i32 16;
    cbr i1 %124(prob = 0.75), ^while.body4, ^b1;
  ^while.header1:
    i32 %126 = phi [^while.body3, i32 0] [^b3, i32 %140];
    i1 %127 = icmp slt i32 %126, i32 16;
    cbr i1 %127(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32* %128 = getelementptr &([16 * i32]* %head)[i64 0][i32 %126];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %126];
    ubr ^while.header2;
  ^b2:
    store i32* %4 with i32 %l;
    i32 %131 = load i32* %36;
    i32 %132 = add i32 %l, i32 %131;
    store i32* %20 with i32 %132;
    ubr ^while.header3;
  ^while.header2:
    i32 %133 = phi [^indirect, i32 %129] [^b6, i32 %171];
    i32 %134 = load i32* %130;
    i1 %135 = icmp slt i32 %133, i32 %134;
    cbr i1 %135(prob = 0.97), ^while.body5, ^b3;
  ^while.header3:
    i32 %136 = phi [^b2, i32 0] [^b4, i32 %155];
    i1 %137 = icmp slt i32 %136, i32 16;
    cbr i1 %137(prob = 0.97), ^while.body6, ^if.then;
  ^while.body5:
    i32* %138 = getelementptr &(i32* %a)[i32 %133];
    i32 %139 = load i32* %138;
    ubr ^while.header4;
  ^b3:
    i32 %140 = add i32 %126, i32 1;
    ubr ^while.header1;
  ^while.body6:
    i1 %141 = icmp sgt i32 %136, i32 0;
    cbr i1 %141(prob = 0.5), ^if.then1, ^b4;
  ^if.then1:
    i32 %142 = add i32 %136, i32 -1;
    i32* %143 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %142];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &([16 * i32]* %head)[i64 0][i32 %136];
    store i32* %145 with i32 %144;
    i32* %146 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %136];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %144, i32 %147;
    i32* %149 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %136];
    store i32* %149 with i32 %148;
    ubr ^b4;
  ^while.header4:
    i32 %150 = phi [^while.body5, i32 %139] [^while.body8, i32 %167];
    cbr i1 %53(prob = 0.97), ^super.header1, ^b5;
  ^b4:
    i32* %151 = getelementptr &([16 * i32]* %head)[i64 0][i32 %136];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %136];
    i32 %154 = load i32* %153;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %54, i32* %a, i32 %152, i32 %154);
    i32 %155 = add i32 %136, i32 1;
    ubr ^while.header3;
  ^super.header1:
    i32 %156 = phi [^while.header4, i32 0] [^while.body7, i32 %158];
    i32 %157 = phi [^while.header4, i32 %150] [^while.body7, i32 %163];
    i32 %158 = add i32 %156, i32 4;
    i1 %159 = icmp sgt i32 %bitround, i32 %158;
    cbr i1 %159(prob = 0.89), ^while.body7, ^while.body9;
  ^b5:
    i32 %160 = phi [^while.header4, i32 %150] [^while.body9, i32 %176];
    i32 %161 = srem i32 %160, i32 16;
    i1 %162 = icmp neq i32 %126, i32 %161;
    cbr i1 %162(prob = 0.97), ^while.body8, ^b6;
  ^while.body7:
    i32 %163 = sdiv i32 %157, i32 65536;
    ubr ^super.header1;
  ^while.body8:
    i32* %164 = getelementptr &([16 * i32]* %head)[i64 0][i32 %161];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %a)[i32 %165];
    i32 %167 = load i32* %166;
    store i32* %166 with i32 %150;
    i32 %168 = add i32 %165, i32 1;
    store i32* %164 with i32 %168;
    ubr ^while.header4;
  ^b6:
    i32 %169 = load i32* %128;
    i32* %170 = getelementptr &(i32* %a)[i32 %169];
    store i32* %170 with i32 %150;
    i32 %171 = add i32 %169, i32 1;
    store i32* %128 with i32 %171;
    ubr ^while.header2;
  ^while.body9:
    i32 %172 = phi [^super.header1, i32 %156] [^while.body9, i32 %174];
    i32 %173 = phi [^super.header1, i32 %157] [^while.body9, i32 %176];
    i32 %174 = add i32 %172, i32 1;
    i1 %175 = icmp sgt i32 %bitround, i32 %174;
    i32 %176 = sdiv i32 %173, i32 16;
    cbr i1 %175(prob = 0.75), ^while.body9, ^b5;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %33];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32 %6 = add i32 %5, i32 4;
    i1 %7 = icmp sgt i32 %2, i32 %6;
    cbr i1 %7(prob = 0.89), ^while.body, ^while.body1;
  ^b:
    i32 %8 = phi [^entry, i32 0] [^while.body1, i32 %41];
    call (i32) -> void @stoptime(i32 102);
    i32 %9 = abs i32 %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32* %10 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %5];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(i32* %10)[i64 1];
    i32 %13 = load i32* %12;
    i32 %14 = add i32 %5, i32 3;
    i32 %15 = srem i32 %13, i32 %14;
    i32 %16 = add i32 %5, i32 1;
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = add i32 %4, i32 %17;
    i32* %19 = getelementptr &(i32* %10)[i64 2];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %10)[i64 3];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %5, i32 5;
    i32 %24 = srem i32 %22, i32 %23;
    i32 %25 = mul i32 %14, i32 %24;
    i32 %26 = add i32 %18, i32 %25;
    i32 %27 = srem i32 %20, i32 %6;
    i32 %28 = add i32 %5, i32 2;
    i32 %29 = mul i32 %27, i32 %28;
    i32 %30 = srem i32 %11, i32 %28;
    i32 %31 = mul i32 %5, i32 %30;
    i32 %32 = add i32 %29, i32 %31;
    i32 %33 = add i32 %26, i32 %32;
    ubr ^super.header;
  ^while.body1:
    i32 %34 = phi [^super.header, i32 %4] [^while.body1, i32 %41];
    i32 %35 = phi [^super.header, i32 %5] [^while.body1, i32 %42];
    i32* %36 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 2;
    i32 %39 = srem i32 %37, i32 %38;
    i32 %40 = mul i32 %35, i32 %39;
    i32 %41 = add i32 %34, i32 %40;
    i32 %42 = add i32 %35, i32 1;
    i1 %43 = icmp sgt i32 %2, i32 %42;
    cbr i1 %43(prob = 0.75), ^while.body1, ^b;
}
