internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32], align 8;
    [16 * i32]* %tail = alloc [16 * i32], align 8;
    [16 * i32]* %head = alloc [16 * i32], align 8;
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %52 = mul i32 %bitround, i32 4;
    i32 %53 = shl i32 1, i32 %52;
    i1 %54 = icmp slt i32 %l, i32 %r;
    i32 %55 = add i32 %bitround, i32 -1;
    i1 %56 = icmp sgt i32 %bitround, i32 0;
    i1 %57 = icmp slt i32 %bitround, i32 8;
    cbr i1 %54(prob = 0.984615), ^b1, ^b2;
  ^if.then:
    ret;
  ^b1:
    i32 %58 = phi [^b, i32 %l] [^b4, i32 %106];
    i32* %59 = getelementptr &(i32* %a)[i32 %58];
    i32 %60 = load i32* %59;
    cbr i1 %56(prob = 0.984615), ^prebody, ^b4;
  ^b2:
    store i32* %4 with i32 %l;
    i32 %61 = load i32* %36;
    i32 %62 = add i32 %l, i32 %61;
    store i32* %20 with i32 %62;
    store i32* %5 with i32 %62;
    i32 %63 = load i32* %37;
    i32 %64 = add i32 %62, i32 %63;
    store i32* %21 with i32 %64;
    store i32* %6 with i32 %64;
    i32 %65 = load i32* %38;
    i32 %66 = add i32 %64, i32 %65;
    store i32* %22 with i32 %66;
    store i32* %7 with i32 %66;
    i32 %67 = load i32* %39;
    i32 %68 = add i32 %66, i32 %67;
    store i32* %23 with i32 %68;
    store i32* %8 with i32 %68;
    i32 %69 = load i32* %40;
    i32 %70 = add i32 %68, i32 %69;
    store i32* %24 with i32 %70;
    store i32* %9 with i32 %70;
    i32 %71 = load i32* %41;
    i32 %72 = add i32 %70, i32 %71;
    store i32* %25 with i32 %72;
    store i32* %10 with i32 %72;
    i32 %73 = load i32* %42;
    i32 %74 = add i32 %72, i32 %73;
    store i32* %26 with i32 %74;
    store i32* %11 with i32 %74;
    i32 %75 = load i32* %43;
    i32 %76 = add i32 %74, i32 %75;
    store i32* %27 with i32 %76;
    store i32* %12 with i32 %76;
    i32 %77 = load i32* %44;
    i32 %78 = add i32 %76, i32 %77;
    store i32* %28 with i32 %78;
    store i32* %13 with i32 %78;
    i32 %79 = load i32* %45;
    i32 %80 = add i32 %78, i32 %79;
    store i32* %29 with i32 %80;
    store i32* %14 with i32 %80;
    i32 %81 = load i32* %46;
    i32 %82 = add i32 %80, i32 %81;
    store i32* %30 with i32 %82;
    store i32* %15 with i32 %82;
    i32 %83 = load i32* %47;
    i32 %84 = add i32 %82, i32 %83;
    store i32* %31 with i32 %84;
    store i32* %16 with i32 %84;
    i32 %85 = load i32* %48;
    i32 %86 = add i32 %84, i32 %85;
    store i32* %32 with i32 %86;
    store i32* %17 with i32 %86;
    i32 %87 = load i32* %49;
    i32 %88 = add i32 %86, i32 %87;
    store i32* %33 with i32 %88;
    store i32* %18 with i32 %88;
    i32 %89 = load i32* %50;
    i32 %90 = add i32 %88, i32 %89;
    store i32* %34 with i32 %90;
    store i32* %19 with i32 %90;
    i32 %91 = load i32* %51;
    i32 %92 = add i32 %90, i32 %91;
    store i32* %35 with i32 %92;
    cbr i1 %56(prob = 0.5), ^b3, ^b5;
  ^prebody:
    i32 %93 = sdiv i32 %60, i32 %53;
    i32 %94 = select i1 %57 ? i32 %93 : i32 0;
    ubr ^b4;
  ^b3:
    i32 %95 = phi [^b2, i32 0] [^b6, i32 %126];
    i32* %96 = getelementptr &([16 * i32]* %head)[i64 0][i32 %95];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %95];
    i32 %99 = load i32* %98;
    i1 %100 = icmp slt i32 %97, i32 %99;
    cbr i1 %100(prob = 0.984615), ^while.body, ^b6;
  ^b4:
    i32 %101 = phi [^b1, i32 %60] [^prebody, i32 %94];
    i32 %102 = and i32 %101, i32 15;
    i32* %103 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %104, i32 1;
    store i32* %103 with i32 %105;
    i32 %106 = add i32 %58, i32 1;
    i1 %107 = icmp sgt i32 %r, i32 %106;
    cbr i1 %107(prob = 0.984615), ^b1, ^b2;
  ^b5:
    i32 %108 = phi [^b2, i32 0] [^b7, i32 %128];
    i32* %109 = getelementptr &([16 * i32]* %head)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %108];
    i32 %112 = load i32* %111;
    i1 %113 = icmp slt i32 %110, i32 %112;
    cbr i1 %113(prob = 0.984615), ^while.body1, ^b7;
  ^while.body:
    i32 %114 = phi [^b3, i32 %97] [^b9, i32 %155];
    i32* %115 = getelementptr &(i32* %a)[i32 %114];
    i32 %116 = load i32* %115;
    i32 %117 = sdiv i32 %116, i32 %53;
    i32 %118 = select i1 %57 ? i32 %117 : i32 0;
    i32 %119 = srem i32 %118, i32 16;
    i1 %120 = icmp neq i32 %95, i32 %119;
    cbr i1 %120(prob = 0.984615), ^while.body2, ^b9;
  ^while.body1:
    i32 %121 = phi [^b5, i32 %110] [^b10, i32 %161];
    i32* %122 = getelementptr &(i32* %a)[i32 %121];
    i32 %123 = load i32* %122;
    i32 %124 = srem i32 %123, i32 16;
    i1 %125 = icmp neq i32 %108, i32 %124;
    cbr i1 %125(prob = 0.984615), ^while.body3, ^b10;
  ^b6:
    i32 %126 = add i32 %95, i32 1;
    i1 %127 = icmp slt i32 %126, i32 16;
    cbr i1 %127(prob = 0.9375), ^b3, ^b8;
  ^b7:
    i32 %128 = add i32 %108, i32 1;
    i1 %129 = icmp slt i32 %128, i32 16;
    cbr i1 %129(prob = 0.9375), ^b5, ^b8;
  ^b8:
    store i32* %4 with i32 %l;
    i32 %130 = load i32* %36;
    i32 %131 = add i32 %l, i32 %130;
    store i32* %20 with i32 %131;
    ubr ^while.body4;
  ^while.body2:
    i32 %132 = phi [^while.body, i32 %119] [^while.body2, i32 %140];
    i32 %133 = phi [^while.body, i32 %116] [^while.body2, i32 %137];
    i32* %134 = getelementptr &([16 * i32]* %head)[i64 0][i32 %132];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %a)[i32 %135];
    i32 %137 = load i32* %136;
    i32 %138 = sdiv i32 %137, i32 %53;
    i32 %139 = select i1 %57 ? i32 %138 : i32 0;
    i32 %140 = srem i32 %139, i32 16;
    i1 %141 = icmp neq i32 %95, i32 %140;
    store i32* %136 with i32 %133;
    i32 %142 = add i32 %135, i32 1;
    store i32* %134 with i32 %142;
    cbr i1 %141(prob = 0.984615), ^while.body2, ^b9;
  ^while.body3:
    i32 %143 = phi [^while.body1, i32 %124] [^while.body3, i32 %149];
    i32 %144 = phi [^while.body1, i32 %123] [^while.body3, i32 %148];
    i32* %145 = getelementptr &([16 * i32]* %head)[i64 0][i32 %143];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %a)[i32 %146];
    i32 %148 = load i32* %147;
    i32 %149 = srem i32 %148, i32 16;
    i1 %150 = icmp neq i32 %108, i32 %149;
    store i32* %147 with i32 %144;
    i32 %151 = add i32 %146, i32 1;
    store i32* %145 with i32 %151;
    cbr i1 %150(prob = 0.984615), ^while.body3, ^b10;
  ^b9:
    i32 %152 = phi [^while.body, i32 %116] [^while.body2, i32 %137];
    i32 %153 = load i32* %96;
    i32* %154 = getelementptr &(i32* %a)[i32 %153];
    store i32* %154 with i32 %152;
    i32 %155 = add i32 %153, i32 1;
    store i32* %96 with i32 %155;
    i32 %156 = load i32* %98;
    i1 %157 = icmp slt i32 %155, i32 %156;
    cbr i1 %157(prob = 0.984615), ^while.body, ^b6;
  ^b10:
    i32 %158 = phi [^while.body1, i32 %123] [^while.body3, i32 %148];
    i32 %159 = load i32* %109;
    i32* %160 = getelementptr &(i32* %a)[i32 %159];
    store i32* %160 with i32 %158;
    i32 %161 = add i32 %159, i32 1;
    store i32* %109 with i32 %161;
    i32 %162 = load i32* %111;
    i1 %163 = icmp slt i32 %161, i32 %162;
    cbr i1 %163(prob = 0.984615), ^while.body1, ^b7;
  ^while.body4:
    i32 %164 = phi [^b8, i32 0] [^b11, i32 %177];
    i32* %165 = getelementptr &([16 * i32]* %head)[i64 0][i32 %164];
    i32* %166 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %164];
    i1 %167 = icmp sgt i32 %164, i32 0;
    cbr i1 %167(prob = 0.5), ^if.then1, ^indirect;
  ^if.then1:
    i32* %168 = getelementptr &(i32* %166)[i64 -1];
    i32 %169 = load i32* %168;
    store i32* %165 with i32 %169;
    i32* %170 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %164];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 %171;
    store i32* %166 with i32 %172;
    ubr ^b11;
  ^indirect:
    i32 %173 = load i32* %165;
    i32 %174 = load i32* %166;
    ubr ^b11;
  ^b11:
    i32 %175 = phi [^if.then1, i32 %169] [^indirect, i32 %173];
    i32 %176 = phi [^if.then1, i32 %172] [^indirect, i32 %174];
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %55, i32* %a, i32 %175, i32 %176);
    i32 %177 = add i32 %164, i32 1;
    i1 %178 = icmp slt i32 %177, i32 16;
    cbr i1 %178(prob = 0.9375), ^while.body4, ^if.then;
}
internal [30000010 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    [12 * i8]* %3 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %4 = ptradd [12 * i8]* %3, i32 0;
    store i32* %4 with i32 0;
    i32* %5 = ptradd [12 * i8]* %3, i32 4;
    store i32* %5 with i32 0;
    i32* %6 = ptradd [12 * i8]* %3, i32 8;
    store i32* %6 with i32 %2;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %2, i8* %7);
    i32 %8 = load i32* %4;
    i32 %9 = abs i32 %8;
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = add i32 %1, i32 -3;
    [30000010 * i32]* %5 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %6 = phi [^b, i32 0] [^b1, i32 %32];
    i32 %7 = phi [^b, i32 %0] [^b1, i32 %22];
    i32* %8 = getelementptr &([30000010 * i32]* %5)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &(i32* %8)[i64 1];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %7, i32 3;
    i32 %13 = srem i32 %11, i32 %12;
    i32 %14 = add i32 %7, i32 1;
    i32 %15 = mul i32 %13, i32 %14;
    i32 %16 = add i32 %7, i32 2;
    i32 %17 = srem i32 %9, i32 %16;
    i32 %18 = mul i32 %7, i32 %17;
    i32 %19 = add i32 %15, i32 %18;
    i32* %20 = getelementptr &(i32* %8)[i64 2];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %7, i32 4;
    i32 %23 = srem i32 %21, i32 %22;
    i32 %24 = mul i32 %16, i32 %23;
    i32 %25 = add i32 %19, i32 %24;
    i32* %26 = getelementptr &(i32* %8)[i64 3];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %7, i32 5;
    i32 %29 = srem i32 %27, i32 %28;
    i32 %30 = mul i32 %12, i32 %29;
    i32 %31 = add i32 %25, i32 %30;
    i32 %32 = add i32 %6, i32 %31;
    i1 %33 = icmp sgt i32 %4, i32 %22;
    cbr i1 %33(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %34 = phi [^b, i32 0] [^b1, i32 %32];
    i32 %35 = phi [^b, i32 %0] [^b1, i32 %22];
    i32 %36 = phi [^b, i32 undef] [^b1, i32 %32];
    i1 %37 = icmp sgt i32 %1, i32 %35;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %38 = phi [^scalar.header, i32 %35] [^b2, i32 %46];
    i32 %39 = phi [^scalar.header, i32 %34] [^b2, i32 %45];
    i32* %40 = getelementptr &([30000010 * i32]* %5)[i64 0][i32 %38];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %38, i32 2;
    i32 %43 = srem i32 %41, i32 %42;
    i32 %44 = mul i32 %38, i32 %43;
    i32 %45 = add i32 %39, i32 %44;
    i32 %46 = add i32 %38, i32 1;
    i1 %47 = icmp sgt i32 %1, i32 %46;
    cbr i1 %47(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    i32 %48 = phi [^scalar.header, i32 %36] [^b2, i32 %45];
    [12 * i8]* %49 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %50 = ptradd [12 * i8]* %49, i32 0;
    atomicadd i32* %50, i32 %48;
    ret;
}
internal [12 * i8]* @cmmc_parallel_body_payload_0, align 8;
