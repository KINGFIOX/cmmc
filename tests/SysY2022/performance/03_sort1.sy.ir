internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %47 with i32 0;
    i1 %48 = scmp eq i32 %bitround, i32 -1;
    i32 %49 = add i32 %l, i32 1;
    i1 %50 = scmp ge i32 %49, i32 %r;
    i1 %51 = or i1 %50, i1 %48;
    cbr i1 %51(prob = 0.75), ^if.then, ^b;
^b:
    i1 %52 = scmp gt i32 %bitround, i32 0;
    i32 %53 = add i32 %bitround, i32 -1;
    i1 %54 = scmp lt i32 %l, i32 %r;
    cbr i1 %54(prob = 0.97), ^while.body, ^b1;
^if.then:
    ret;
^b1:
    store i32* %0 with i32 %l;
    i32 %55 = load i32* %32;
    i32 %56 = add i32 %55, i32 %l;
    store i32* %16 with i32 %56;
    i32 %57 = load i32* %16;
    store i32* %1 with i32 %57;
    i32 %58 = load i32* %33;
    i32 %59 = add i32 %57, i32 %58;
    store i32* %17 with i32 %59;
    store i32* %2 with i32 %59;
    i32 %60 = load i32* %34;
    i32 %61 = add i32 %59, i32 %60;
    store i32* %18 with i32 %61;
    store i32* %3 with i32 %61;
    i32 %62 = load i32* %35;
    i32 %63 = add i32 %61, i32 %62;
    store i32* %19 with i32 %63;
    store i32* %4 with i32 %63;
    i32 %64 = load i32* %36;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %20 with i32 %65;
    store i32* %5 with i32 %65;
    i32 %66 = load i32* %37;
    i32 %67 = add i32 %65, i32 %66;
    store i32* %21 with i32 %67;
    store i32* %6 with i32 %67;
    i32 %68 = load i32* %38;
    i32 %69 = add i32 %67, i32 %68;
    store i32* %22 with i32 %69;
    store i32* %7 with i32 %69;
    i32 %70 = load i32* %39;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %23 with i32 %71;
    store i32* %8 with i32 %71;
    i32 %72 = load i32* %40;
    i32 %73 = add i32 %71, i32 %72;
    store i32* %24 with i32 %73;
    store i32* %9 with i32 %73;
    i32 %74 = load i32* %41;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %25 with i32 %75;
    store i32* %10 with i32 %75;
    i32 %76 = load i32* %42;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %26 with i32 %77;
    store i32* %11 with i32 %77;
    i32 %78 = load i32* %43;
    i32 %79 = add i32 %77, i32 %78;
    store i32* %27 with i32 %79;
    store i32* %12 with i32 %79;
    i32 %80 = load i32* %44;
    i32 %81 = add i32 %79, i32 %80;
    store i32* %28 with i32 %81;
    store i32* %13 with i32 %81;
    i32 %82 = load i32* %45;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %29 with i32 %83;
    store i32* %14 with i32 %83;
    i32 %84 = load i32* %46;
    i32 %85 = add i32 %83, i32 %84;
    store i32* %30 with i32 %85;
    store i32* %15 with i32 %85;
    i32 %86 = load i32* %47;
    i32 %87 = add i32 %85, i32 %86;
    store i32* %31 with i32 %87;
    ubr ^while.header;
^while.body:
    i32 %88 = phi [^b, i32 %l] [^b2, i32 %104];
    i32* %89 = getelementptr &(i32* %a)[i32 %88];
    i32 %90 = load i32* %89;
    cbr i1 %52(prob = 0.97), ^super.header, ^b2;
^super.header:
    i32 %91 = phi [^while.body, i32 %90] [^super.header, i32 0];
    i32 %92 = phi [^while.body, i32 0] [^super.header, i32 %93];
    i32 %93 = add i32 %92, i32 4096;
    i1 %94 = scmp lt i32 %93, i32 %bitround;
    cbr i1 %94(prob = 0.67), ^super.header, ^super.header1;
^while.header:
    i32 %95 = phi [^b1, i32 0] [^b4, i32 %115];
    i1 %96 = scmp lt i32 %95, i32 16;
    i32* %97 = getelementptr &([16 * i32]* %head)[i64 0][i32 %95];
    i32* %98 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %95];
    cbr i1 %96(prob = 0.97), ^while.header1, ^b3;
^b2:
    i32 %99 = phi [^while.body, i32 %90] [^while.body4, i32 %216];
    i32 %100 = srem i32 %99, i32 16;
    i32* %101 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %100];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %102, i32 1;
    store i32* %101 with i32 %103;
    i32 %104 = add i32 %88, i32 1;
    i1 %105 = scmp lt i32 %104, i32 %r;
    cbr i1 %105(prob = 0.97), ^while.body, ^b1;
^b3:
    store i32* %0 with i32 %l;
    i32 %106 = load i32* %32;
    i32 %107 = add i32 %106, i32 %l;
    store i32* %16 with i32 %107;
    ubr ^while.header2;
^super.header1:
    i32 %108 = phi [^super.header, i32 %91] [^super.header1, i32 0];
    i32 %109 = phi [^super.header, i32 %92] [^super.header1, i32 %110];
    i32 %110 = add i32 %109, i32 256;
    i1 %111 = scmp lt i32 %110, i32 %bitround;
    cbr i1 %111(prob = 0.67), ^super.header1, ^super.header2;
^while.header1:
    i32 %112 = load i32* %97;
    i32 %113 = load i32* %98;
    i1 %114 = scmp lt i32 %112, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body1, ^b4;
^b4:
    i32 %115 = add i32 %95, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %116 = load i32* %97;
    i32* %117 = getelementptr &(i32* %a)[i32 %116];
    i32 %118 = load i32* %117;
    cbr i1 %52(prob = 0.97), ^super.header3, ^b5;
^super.header2:
    i32 %119 = phi [^super.header1, i32 %108] [^super.header2, i32 0];
    i32 %120 = phi [^super.header1, i32 %109] [^super.header2, i32 %121];
    i32 %121 = add i32 %120, i32 256;
    i1 %122 = scmp lt i32 %121, i32 %bitround;
    cbr i1 %122(prob = 0.67), ^super.header2, ^super.header4;
^while.header2:
    i32 %123 = phi [^b3, i32 0] [^b6, i32 %149];
    i1 %124 = scmp lt i32 %123, i32 16;
    cbr i1 %124(prob = 0.97), ^while.body2, ^if.then;
^super.header3:
    i32 %125 = phi [^while.body1, i32 %118] [^super.header3, i32 0];
    i32 %126 = phi [^while.body1, i32 0] [^super.header3, i32 %127];
    i32 %127 = add i32 %126, i32 4096;
    i1 %128 = scmp lt i32 %127, i32 %bitround;
    cbr i1 %128(prob = 0.67), ^super.header3, ^super.header5;
^while.body2:
    i1 %129 = scmp gt i32 %123, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then1, ^b6;
^b5:
    i32 %130 = phi [^while.body1, i32 %118] [^while.body5, i32 %253];
    i32 %131 = srem i32 %130, i32 16;
    i1 %132 = scmp neq i32 %131, i32 %95;
    cbr i1 %132(prob = 0.97), ^while.body3, ^b7;
^super.header4:
    i32 %133 = phi [^super.header2, i32 %119] [^super.header4, i32 0];
    i32 %134 = phi [^super.header2, i32 %120] [^super.header4, i32 %135];
    i32 %135 = add i32 %134, i32 16;
    i1 %136 = scmp lt i32 %135, i32 %bitround;
    cbr i1 %136(prob = 0.67), ^super.header4, ^super.header6;
^if.then1:
    i32* %137 = getelementptr &([16 * i32]* %head)[i64 0][i32 %123];
    i32 %138 = add i32 %123, i32 -1;
    i32* %139 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %138];
    i32 %140 = load i32* %139;
    store i32* %137 with i32 %140;
    i32* %141 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %123];
    i32* %142 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %123];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %140, i32 %143;
    store i32* %141 with i32 %144;
    ubr ^b6;
^b6:
    i32* %145 = getelementptr &([16 * i32]* %head)[i64 0][i32 %123];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %123];
    i32 %148 = load i32* %147;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %53, i32* %a, i32 %146, i32 %148);
    i32 %149 = add i32 %123, i32 1;
    ubr ^while.header2;
^b7:
    i32 %150 = phi [^b5, i32 %118] [^b9, i32 %177];
    i32 %151 = load i32* %97;
    i32* %152 = getelementptr &(i32* %a)[i32 %151];
    store i32* %152 with i32 %150;
    i32 %153 = load i32* %97;
    i32 %154 = add i32 %153, i32 1;
    store i32* %97 with i32 %154;
    ubr ^while.header1;
^super.header5:
    i32 %155 = phi [^super.header3, i32 %125] [^super.header5, i32 0];
    i32 %156 = phi [^super.header3, i32 %126] [^super.header5, i32 %157];
    i32 %157 = add i32 %156, i32 256;
    i1 %158 = scmp lt i32 %157, i32 %bitround;
    cbr i1 %158(prob = 0.67), ^super.header5, ^super.header8;
^while.body3:
    i32 %159 = phi [^b5, i32 %118] [^b9, i32 %177];
    cbr i1 %52(prob = 0.97), ^super.header7, ^b8;
^super.header6:
    i32 %160 = phi [^super.header4, i32 %133] [^super.header6, i32 0];
    i32 %161 = phi [^super.header4, i32 %134] [^super.header6, i32 %162];
    i32 %162 = add i32 %161, i32 256;
    i1 %163 = scmp lt i32 %162, i32 %bitround;
    cbr i1 %163(prob = 0.67), ^super.header6, ^super.header9;
^super.header7:
    i32 %164 = phi [^while.body3, i32 %159] [^super.header7, i32 0];
    i32 %165 = phi [^while.body3, i32 0] [^super.header7, i32 %166];
    i32 %166 = add i32 %165, i32 4096;
    i1 %167 = scmp lt i32 %166, i32 %bitround;
    cbr i1 %167(prob = 0.67), ^super.header7, ^super.header10;
^super.header8:
    i32 %168 = phi [^super.header5, i32 %155] [^super.header8, i32 0];
    i32 %169 = phi [^super.header5, i32 %156] [^super.header8, i32 %170];
    i32 %170 = add i32 %169, i32 256;
    i1 %171 = scmp lt i32 %170, i32 %bitround;
    cbr i1 %171(prob = 0.67), ^super.header8, ^super.header12;
^b8:
    i32 %172 = phi [^while.body3, i32 %159] [^while.body6, i32 %266];
    i32 %173 = srem i32 %172, i32 16;
    i32* %174 = getelementptr &([16 * i32]* %head)[i64 0][i32 %173];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %a)[i32 %175];
    i32 %177 = load i32* %176;
    store i32* %176 with i32 %159;
    i32 %178 = add i32 %175, i32 1;
    store i32* %174 with i32 %178;
    cbr i1 %52(prob = 0.97), ^super.header11, ^b9;
^super.header9:
    i32 %179 = phi [^super.header6, i32 %160] [^super.header9, i32 0];
    i32 %180 = phi [^super.header6, i32 %161] [^super.header9, i32 %181];
    i32 %181 = add i32 %180, i32 16;
    i1 %182 = scmp lt i32 %181, i32 %bitround;
    cbr i1 %182(prob = 0.67), ^super.header9, ^super.header13;
^super.header10:
    i32 %183 = phi [^super.header7, i32 %164] [^super.header10, i32 0];
    i32 %184 = phi [^super.header7, i32 %165] [^super.header10, i32 %185];
    i32 %185 = add i32 %184, i32 256;
    i1 %186 = scmp lt i32 %185, i32 %bitround;
    cbr i1 %186(prob = 0.67), ^super.header10, ^super.header14;
^super.header11:
    i32 %187 = phi [^b8, i32 %177] [^super.header11, i32 0];
    i32 %188 = phi [^b8, i32 0] [^super.header11, i32 %189];
    i32 %189 = add i32 %188, i32 4096;
    i1 %190 = scmp lt i32 %189, i32 %bitround;
    cbr i1 %190(prob = 0.67), ^super.header11, ^super.header15;
^super.header12:
    i32 %191 = phi [^super.header8, i32 %168] [^super.header12, i32 0];
    i32 %192 = phi [^super.header8, i32 %169] [^super.header12, i32 %193];
    i32 %193 = add i32 %192, i32 16;
    i1 %194 = scmp lt i32 %193, i32 %bitround;
    cbr i1 %194(prob = 0.67), ^super.header12, ^super.header16;
^b9:
    i32 %195 = phi [^b8, i32 %177] [^while.body7, i32 %275];
    i32 %196 = srem i32 %195, i32 16;
    i1 %197 = scmp neq i32 %196, i32 %95;
    cbr i1 %197(prob = 0.97), ^while.body3, ^b7;
^super.header13:
    i32 %198 = phi [^super.header9, i32 %179] [^super.header13, i32 0];
    i32 %199 = phi [^super.header9, i32 %180] [^super.header13, i32 %200];
    i32 %200 = add i32 %199, i32 16;
    i1 %201 = scmp lt i32 %200, i32 %bitround;
    cbr i1 %201(prob = 0.67), ^super.header13, ^while.body4;
^super.header14:
    i32 %202 = phi [^super.header10, i32 %183] [^super.header14, i32 0];
    i32 %203 = phi [^super.header10, i32 %184] [^super.header14, i32 %204];
    i32 %204 = add i32 %203, i32 256;
    i1 %205 = scmp lt i32 %204, i32 %bitround;
    cbr i1 %205(prob = 0.67), ^super.header14, ^super.header17;
^super.header15:
    i32 %206 = phi [^super.header11, i32 %187] [^super.header15, i32 0];
    i32 %207 = phi [^super.header11, i32 %188] [^super.header15, i32 %208];
    i32 %208 = add i32 %207, i32 256;
    i1 %209 = scmp lt i32 %208, i32 %bitround;
    cbr i1 %209(prob = 0.67), ^super.header15, ^super.header18;
^super.header16:
    i32 %210 = phi [^super.header12, i32 %191] [^super.header16, i32 0];
    i32 %211 = phi [^super.header12, i32 %192] [^super.header16, i32 %212];
    i32 %212 = add i32 %211, i32 256;
    i1 %213 = scmp lt i32 %212, i32 %bitround;
    cbr i1 %213(prob = 0.67), ^super.header16, ^super.header19;
^while.body4:
    i32 %214 = phi [^super.header13, i32 %198] [^while.body4, i32 %216];
    i32 %215 = phi [^super.header13, i32 %199] [^while.body4, i32 %217];
    i32 %216 = sdiv i32 %214, i32 16;
    i32 %217 = add i32 %215, i32 1;
    i1 %218 = scmp lt i32 %217, i32 %bitround;
    cbr i1 %218(prob = 0.97), ^while.body4, ^b2;
^super.header17:
    i32 %219 = phi [^super.header14, i32 %202] [^super.header17, i32 0];
    i32 %220 = phi [^super.header14, i32 %203] [^super.header17, i32 %221];
    i32 %221 = add i32 %220, i32 16;
    i1 %222 = scmp lt i32 %221, i32 %bitround;
    cbr i1 %222(prob = 0.67), ^super.header17, ^super.header20;
^super.header18:
    i32 %223 = phi [^super.header15, i32 %206] [^super.header18, i32 0];
    i32 %224 = phi [^super.header15, i32 %207] [^super.header18, i32 %225];
    i32 %225 = add i32 %224, i32 256;
    i1 %226 = scmp lt i32 %225, i32 %bitround;
    cbr i1 %226(prob = 0.67), ^super.header18, ^super.header21;
^super.header19:
    i32 %227 = phi [^super.header16, i32 %210] [^super.header19, i32 0];
    i32 %228 = phi [^super.header16, i32 %211] [^super.header19, i32 %229];
    i32 %229 = add i32 %228, i32 16;
    i1 %230 = scmp lt i32 %229, i32 %bitround;
    cbr i1 %230(prob = 0.67), ^super.header19, ^super.header22;
^super.header20:
    i32 %231 = phi [^super.header17, i32 %219] [^super.header20, i32 0];
    i32 %232 = phi [^super.header17, i32 %220] [^super.header20, i32 %233];
    i32 %233 = add i32 %232, i32 256;
    i1 %234 = scmp lt i32 %233, i32 %bitround;
    cbr i1 %234(prob = 0.67), ^super.header20, ^super.header23;
^super.header21:
    i32 %235 = phi [^super.header18, i32 %223] [^super.header21, i32 0];
    i32 %236 = phi [^super.header18, i32 %224] [^super.header21, i32 %237];
    i32 %237 = add i32 %236, i32 16;
    i1 %238 = scmp lt i32 %237, i32 %bitround;
    cbr i1 %238(prob = 0.67), ^super.header21, ^super.header24;
^super.header22:
    i32 %239 = phi [^super.header19, i32 %227] [^super.header22, i32 0];
    i32 %240 = phi [^super.header19, i32 %228] [^super.header22, i32 %241];
    i32 %241 = add i32 %240, i32 16;
    i1 %242 = scmp lt i32 %241, i32 %bitround;
    cbr i1 %242(prob = 0.67), ^super.header22, ^while.body5;
^super.header23:
    i32 %243 = phi [^super.header20, i32 %231] [^super.header23, i32 0];
    i32 %244 = phi [^super.header20, i32 %232] [^super.header23, i32 %245];
    i32 %245 = add i32 %244, i32 16;
    i1 %246 = scmp lt i32 %245, i32 %bitround;
    cbr i1 %246(prob = 0.67), ^super.header23, ^super.header25;
^super.header24:
    i32 %247 = phi [^super.header21, i32 %235] [^super.header24, i32 0];
    i32 %248 = phi [^super.header21, i32 %236] [^super.header24, i32 %249];
    i32 %249 = add i32 %248, i32 256;
    i1 %250 = scmp lt i32 %249, i32 %bitround;
    cbr i1 %250(prob = 0.67), ^super.header24, ^super.header26;
^while.body5:
    i32 %251 = phi [^super.header22, i32 %239] [^while.body5, i32 %253];
    i32 %252 = phi [^super.header22, i32 %240] [^while.body5, i32 %254];
    i32 %253 = sdiv i32 %251, i32 16;
    i32 %254 = add i32 %252, i32 1;
    i1 %255 = scmp lt i32 %254, i32 %bitround;
    cbr i1 %255(prob = 0.97), ^while.body5, ^b5;
^super.header25:
    i32 %256 = phi [^super.header23, i32 %243] [^super.header25, i32 0];
    i32 %257 = phi [^super.header23, i32 %244] [^super.header25, i32 %258];
    i32 %258 = add i32 %257, i32 16;
    i1 %259 = scmp lt i32 %258, i32 %bitround;
    cbr i1 %259(prob = 0.67), ^super.header25, ^while.body6;
^super.header26:
    i32 %260 = phi [^super.header24, i32 %247] [^super.header26, i32 0];
    i32 %261 = phi [^super.header24, i32 %248] [^super.header26, i32 %262];
    i32 %262 = add i32 %261, i32 16;
    i1 %263 = scmp lt i32 %262, i32 %bitround;
    cbr i1 %263(prob = 0.67), ^super.header26, ^super.header27;
^while.body6:
    i32 %264 = phi [^super.header25, i32 %256] [^while.body6, i32 %266];
    i32 %265 = phi [^super.header25, i32 %257] [^while.body6, i32 %267];
    i32 %266 = sdiv i32 %264, i32 16;
    i32 %267 = add i32 %265, i32 1;
    i1 %268 = scmp lt i32 %267, i32 %bitround;
    cbr i1 %268(prob = 0.97), ^while.body6, ^b8;
^super.header27:
    i32 %269 = phi [^super.header26, i32 %260] [^super.header27, i32 0];
    i32 %270 = phi [^super.header26, i32 %261] [^super.header27, i32 %271];
    i32 %271 = add i32 %270, i32 16;
    i1 %272 = scmp lt i32 %271, i32 %bitround;
    cbr i1 %272(prob = 0.67), ^super.header27, ^while.body7;
^while.body7:
    i32 %273 = phi [^super.header27, i32 %269] [^while.body7, i32 %275];
    i32 %274 = phi [^super.header27, i32 %270] [^while.body7, i32 %276];
    i32 %275 = sdiv i32 %273, i32 16;
    i32 %276 = add i32 %274, i32 1;
    i1 %277 = scmp lt i32 %276, i32 %bitround;
    cbr i1 %277(prob = 0.97), ^while.body7, ^b9;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1);
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^super.header, ^b;
^super.header:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %104];
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32 %5 = add i32 %4, i32 16;
    i1 %6 = scmp lt i32 %5, i32 %1;
    cbr i1 %6(prob = 0.67), ^while.body, ^super.header1;
^b:
    i32 %7 = phi [^entry, i32 0] [^while.body2, i32 %214];
    i1 %8 = scmp lt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b1;
^while.body:
    i32* %9 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %4];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %4, i32 2;
    i32 %12 = srem i32 %10, i32 %11;
    i32 %13 = mul i32 %4, i32 %12;
    i32 %14 = add i32 %4, i32 1;
    i32* %15 = getelementptr &(i32* %9)[i64 1];
    i32 %16 = load i32* %15;
    i32 %17 = add i32 %4, i32 3;
    i32 %18 = srem i32 %16, i32 %17;
    i32 %19 = mul i32 %18, i32 %14;
    i32* %20 = getelementptr &(i32* %9)[i64 2];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %4, i32 4;
    i32 %23 = srem i32 %21, i32 %22;
    i32 %24 = mul i32 %23, i32 %11;
    i32* %25 = getelementptr &(i32* %9)[i64 3];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %4, i32 5;
    i32 %28 = srem i32 %26, i32 %27;
    i32 %29 = mul i32 %28, i32 %17;
    i32* %30 = getelementptr &(i32* %9)[i64 4];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %4, i32 6;
    i32 %33 = srem i32 %31, i32 %32;
    i32 %34 = mul i32 %33, i32 %22;
    i32* %35 = getelementptr &(i32* %9)[i64 5];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %4, i32 7;
    i32 %38 = srem i32 %36, i32 %37;
    i32 %39 = mul i32 %38, i32 %27;
    i32* %40 = getelementptr &(i32* %9)[i64 6];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %4, i32 8;
    i32 %43 = srem i32 %41, i32 %42;
    i32 %44 = mul i32 %43, i32 %32;
    i32* %45 = getelementptr &(i32* %9)[i64 7];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %4, i32 9;
    i32 %48 = srem i32 %46, i32 %47;
    i32 %49 = mul i32 %48, i32 %37;
    i32* %50 = getelementptr &(i32* %9)[i64 8];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %4, i32 10;
    i32 %53 = srem i32 %51, i32 %52;
    i32 %54 = mul i32 %53, i32 %42;
    i32* %55 = getelementptr &(i32* %9)[i64 9];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %4, i32 11;
    i32 %58 = srem i32 %56, i32 %57;
    i32 %59 = mul i32 %58, i32 %47;
    i32* %60 = getelementptr &(i32* %9)[i64 10];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %4, i32 12;
    i32 %63 = srem i32 %61, i32 %62;
    i32 %64 = mul i32 %63, i32 %52;
    i32* %65 = getelementptr &(i32* %9)[i64 11];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %4, i32 13;
    i32 %68 = srem i32 %66, i32 %67;
    i32 %69 = mul i32 %68, i32 %57;
    i32* %70 = getelementptr &(i32* %9)[i64 12];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %4, i32 14;
    i32 %73 = srem i32 %71, i32 %72;
    i32 %74 = mul i32 %73, i32 %62;
    i32* %75 = getelementptr &(i32* %9)[i64 13];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %4, i32 15;
    i32 %78 = srem i32 %76, i32 %77;
    i32 %79 = mul i32 %78, i32 %67;
    i32* %80 = getelementptr &(i32* %9)[i64 14];
    i32 %81 = load i32* %80;
    i32 %82 = srem i32 %81, i32 %5;
    i32 %83 = mul i32 %82, i32 %72;
    i32* %84 = getelementptr &(i32* %9)[i64 15];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %4, i32 17;
    i32 %87 = srem i32 %85, i32 %86;
    i32 %88 = mul i32 %87, i32 %77;
    i32 %89 = add i32 %3, i32 %13;
    i32 %90 = add i32 %89, i32 %19;
    i32 %91 = add i32 %90, i32 %24;
    i32 %92 = add i32 %91, i32 %29;
    i32 %93 = add i32 %92, i32 %34;
    i32 %94 = add i32 %93, i32 %39;
    i32 %95 = add i32 %94, i32 %44;
    i32 %96 = add i32 %95, i32 %49;
    i32 %97 = add i32 %96, i32 %54;
    i32 %98 = add i32 %97, i32 %59;
    i32 %99 = add i32 %98, i32 %64;
    i32 %100 = add i32 %99, i32 %69;
    i32 %101 = add i32 %100, i32 %74;
    i32 %102 = add i32 %101, i32 %79;
    i32 %103 = add i32 %102, i32 %83;
    i32 %104 = add i32 %103, i32 %88;
    ubr ^super.header;
^if.then:
    i32 %105 = neg i32 %7;
    ubr ^b1;
^super.header1:
    i32 %106 = phi [^super.header, i32 %3] [^while.body1, i32 %206];
    i32 %107 = phi [^super.header, i32 %4] [^while.body1, i32 %108];
    i32 %108 = add i32 %107, i32 16;
    i1 %109 = scmp lt i32 %108, i32 %1;
    cbr i1 %109(prob = 0.67), ^while.body1, ^while.body2;
^b1:
    i32 %110 = phi [^b, i32 %7] [^if.then, i32 %105];
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %110);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body1:
    i32* %111 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %107];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %107, i32 2;
    i32 %114 = srem i32 %112, i32 %113;
    i32 %115 = mul i32 %107, i32 %114;
    i32 %116 = add i32 %107, i32 1;
    i32* %117 = getelementptr &(i32* %111)[i64 1];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %107, i32 3;
    i32 %120 = srem i32 %118, i32 %119;
    i32 %121 = mul i32 %120, i32 %116;
    i32* %122 = getelementptr &(i32* %111)[i64 2];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %107, i32 4;
    i32 %125 = srem i32 %123, i32 %124;
    i32 %126 = mul i32 %125, i32 %113;
    i32* %127 = getelementptr &(i32* %111)[i64 3];
    i32 %128 = load i32* %127;
    i32 %129 = add i32 %107, i32 5;
    i32 %130 = srem i32 %128, i32 %129;
    i32 %131 = mul i32 %130, i32 %119;
    i32* %132 = getelementptr &(i32* %111)[i64 4];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %107, i32 6;
    i32 %135 = srem i32 %133, i32 %134;
    i32 %136 = mul i32 %135, i32 %124;
    i32* %137 = getelementptr &(i32* %111)[i64 5];
    i32 %138 = load i32* %137;
    i32 %139 = add i32 %107, i32 7;
    i32 %140 = srem i32 %138, i32 %139;
    i32 %141 = mul i32 %140, i32 %129;
    i32* %142 = getelementptr &(i32* %111)[i64 6];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %107, i32 8;
    i32 %145 = srem i32 %143, i32 %144;
    i32 %146 = mul i32 %145, i32 %134;
    i32* %147 = getelementptr &(i32* %111)[i64 7];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %107, i32 9;
    i32 %150 = srem i32 %148, i32 %149;
    i32 %151 = mul i32 %150, i32 %139;
    i32* %152 = getelementptr &(i32* %111)[i64 8];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %107, i32 10;
    i32 %155 = srem i32 %153, i32 %154;
    i32 %156 = mul i32 %155, i32 %144;
    i32* %157 = getelementptr &(i32* %111)[i64 9];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %107, i32 11;
    i32 %160 = srem i32 %158, i32 %159;
    i32 %161 = mul i32 %160, i32 %149;
    i32* %162 = getelementptr &(i32* %111)[i64 10];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %107, i32 12;
    i32 %165 = srem i32 %163, i32 %164;
    i32 %166 = mul i32 %165, i32 %154;
    i32* %167 = getelementptr &(i32* %111)[i64 11];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %107, i32 13;
    i32 %170 = srem i32 %168, i32 %169;
    i32 %171 = mul i32 %170, i32 %159;
    i32* %172 = getelementptr &(i32* %111)[i64 12];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %107, i32 14;
    i32 %175 = srem i32 %173, i32 %174;
    i32 %176 = mul i32 %175, i32 %164;
    i32* %177 = getelementptr &(i32* %111)[i64 13];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %107, i32 15;
    i32 %180 = srem i32 %178, i32 %179;
    i32 %181 = mul i32 %180, i32 %169;
    i32* %182 = getelementptr &(i32* %111)[i64 14];
    i32 %183 = load i32* %182;
    i32 %184 = srem i32 %183, i32 %108;
    i32 %185 = mul i32 %184, i32 %174;
    i32* %186 = getelementptr &(i32* %111)[i64 15];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %107, i32 17;
    i32 %189 = srem i32 %187, i32 %188;
    i32 %190 = mul i32 %189, i32 %179;
    i32 %191 = add i32 %106, i32 %115;
    i32 %192 = add i32 %191, i32 %121;
    i32 %193 = add i32 %192, i32 %126;
    i32 %194 = add i32 %193, i32 %131;
    i32 %195 = add i32 %194, i32 %136;
    i32 %196 = add i32 %195, i32 %141;
    i32 %197 = add i32 %196, i32 %146;
    i32 %198 = add i32 %197, i32 %151;
    i32 %199 = add i32 %198, i32 %156;
    i32 %200 = add i32 %199, i32 %161;
    i32 %201 = add i32 %200, i32 %166;
    i32 %202 = add i32 %201, i32 %171;
    i32 %203 = add i32 %202, i32 %176;
    i32 %204 = add i32 %203, i32 %181;
    i32 %205 = add i32 %204, i32 %185;
    i32 %206 = add i32 %205, i32 %190;
    ubr ^super.header1;
^while.body2:
    i32 %207 = phi [^super.header1, i32 %106] [^while.body2, i32 %214];
    i32 %208 = phi [^super.header1, i32 %107] [^while.body2, i32 %215];
    i32* %209 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %208];
    i32 %210 = load i32* %209;
    i32 %211 = add i32 %208, i32 2;
    i32 %212 = srem i32 %210, i32 %211;
    i32 %213 = mul i32 %208, i32 %212;
    i32 %214 = add i32 %207, i32 %213;
    i32 %215 = add i32 %208, i32 1;
    i1 %216 = scmp lt i32 %215, i32 %1;
    cbr i1 %216(prob = 0.97), ^while.body2, ^b;
}
