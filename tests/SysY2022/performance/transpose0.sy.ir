internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    call (i32) -> void @starttime(i32 28);
    i1 %4 = scmp gt i32 %3, i32 0;
    i32* %5 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32* %7 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %6];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %6, i32 1;
    i1 %9 = scmp lt i32 %8, i32 %3;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^b:
    i1 %10 = scmp gt i32 %2, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %11 = phi [^b, i32 0] [^while.body4, i32 %29];
    i32* %12 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %11];
    i32 %13 = load i32* %12;
    i32 %14 = sdiv i32 %3, i32 %13;
    i1 %15 = scmp gt i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body2, ^while.body4;
^b1:
    cbr i1 %10(prob = 0.97), ^while.body3, ^b2;
^while.body2:
    i32 %16 = phi [^while.body1, i32 0] [^b4, i32 %48];
    i32 %17 = phi [^while.body1, i32 %13] [^b4, i32 %45];
    i32 %18 = phi [^while.body1, i32 %14] [^b4, i32 %46];
    i32 %19 = mul i32 %16, i32 %13;
    ubr ^while.guard;
^while.body3:
    i32 %20 = phi [^b1, i32 0] [^while.body3, i32 %27];
    i32 %21 = phi [^b1, i32 0] [^while.body3, i32 %26];
    i32* %22 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = mul i32 %20, i32 %20;
    i32 %25 = mul i32 %24, i32 %23;
    i32 %26 = add i32 %21, i32 %25;
    i32 %27 = add i32 %20, i32 1;
    i1 %28 = scmp lt i32 %27, i32 %2;
    cbr i1 %28(prob = 0.97), ^while.body3, ^b2;
^while.body4:
    i32 %29 = add i32 %11, i32 1;
    i1 %30 = scmp lt i32 %29, i32 %2;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b1;
^b2:
    i32 %31 = phi [^b1, i32 0] [^while.body3, i32 %26];
    i1 %32 = scmp lt i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %33 = neg i32 %31;
    ubr ^b3;
^while.guard:
    i32 %34 = phi [^while.body2, i32 0] [^if.then1, i32 %50];
    i32 %35 = phi [^while.body2, i32 %17] [^if.then1, i32 %41];
    i32 %36 = phi [^while.body2, i32 %18] [^if.then1, i32 %42];
    i32 %37 = phi [^while.body2, i32 %16] [^if.then1, i32 %43];
    i1 %38 = scmp lt i32 %34, i32 %35;
    cbr i1 %38(prob = 0.97), ^while.body5, ^b4;
^b3:
    i32 %39 = phi [^b2, i32 %31] [^if.then, i32 %33];
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %39);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body5:
    i32 %40 = phi [^while.guard, i32 %34] [^b5, i32 %60];
    i32 %41 = phi [^while.guard, i32 %35] [^b5, i32 %13];
    i32 %42 = phi [^while.guard, i32 %36] [^b5, i32 %14];
    i32 %43 = phi [^while.guard, i32 %37] [^b5, i32 %16];
    i1 %44 = scmp lt i32 %43, i32 %40;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b5;
^b4:
    i32 %45 = phi [^while.guard, i32 %35] [^b5, i32 %13];
    i32 %46 = phi [^while.guard, i32 %36] [^b5, i32 %14];
    i32 %47 = phi [^while.guard, i32 %37] [^b5, i32 %16];
    i32 %48 = add i32 %47, i32 1;
    i1 %49 = scmp lt i32 %48, i32 %46;
    cbr i1 %49(prob = 0.97), ^while.body2, ^while.body4;
^if.then1:
    i32 %50 = add i32 %40, i32 1;
    ubr ^while.guard;
^b5:
    i32 %51 = mul i32 %41, i32 %43;
    i32 %52 = add i32 %40, i32 %51;
    i32* %53 = getelementptr &(i32* %5)[i32 %52];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %42, i32 %40;
    i32 %56 = add i32 %43, i32 %55;
    i32* %57 = getelementptr &(i32* %5)[i32 %56];
    store i32* %57 with i32 %54;
    i32 %58 = add i32 %40, i32 %19;
    i32* %59 = getelementptr &(i32* %5)[i32 %58];
    store i32* %59 with i32 %54;
    i32 %60 = add i32 %40, i32 1;
    i1 %61 = scmp lt i32 %60, i32 %13;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b4;
}
