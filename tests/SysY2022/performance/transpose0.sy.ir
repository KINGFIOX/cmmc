internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 28);
    i32 %4 = add i32 %3, i32 -3;
    i32 %5 = add i32 %3, i32 -18;
    i1 %6 = icmp sgt i32 %0, i32 0;
    [20000000 * i32]* %7 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    i32* %8 = getelementptr &([20000000 * i32]* %7)[i64 0][i64 0];
    cbr i1 %6(prob = 0.984615), ^super.header, ^while.body;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^scalar.header, i32 0] [^while.body2, i32 0] [^b, i32 %67];
    i32* %10 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %0, i32 %11;
    ubr ^while.header;
  ^super.header:
    i1 %13 = icmp sgt i32 %0, i32 3;
    cbr i1 %13(prob = 0.941176), ^super.header1, ^scalar.header;
  ^super.header1:
    i32 %14 = add i32 %0, i32 -3;
    i1 %15 = icmp sgt i32 %14, i32 15;
    i32 %16 = add i32 %0, i32 -18;
    cbr i1 %15(prob = 0.941176), ^while.body1, ^scalar.header1;
  ^scalar.header:
    i32 %17 = phi [^super.header, i32 0] [^scalar.header1, i32 %59] [^while.body3, i32 %78];
    i1 %18 = icmp sgt i32 %0, i32 %17;
    cbr i1 %18(prob = 0.75), ^while.body2, ^while.body;
  ^while.header:
    i32 %19 = phi [^while.body, i32 0] [^b1, i32 %69];
    i32 %20 = mul i32 %11, i32 %19;
    i32* %21 = getelementptr &(i32* %8)[i32 %20];
    i1 %22 = icmp sgt i32 %12, i32 %19;
    i32* %23 = getelementptr &(i32* %8)[i32 %19];
    cbr i1 %22(prob = 0.984615), ^while.header1, ^b;
  ^while.body1:
    i32 %24 = phi [^super.header1, i32 0] [^while.body1, i32 %56];
    i32* %25 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %24];
    store i32* %25 with i32 %24;
    i32* %26 = getelementptr &(i32* %25)[i64 1];
    i32 %27 = add i32 %24, i32 1;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %25)[i64 2];
    i32 %29 = add i32 %24, i32 2;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %25)[i64 3];
    i32 %31 = add i32 %24, i32 3;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %25)[i64 4];
    i32 %33 = add i32 %24, i32 4;
    store i32* %32 with i32 %33;
    i32* %34 = getelementptr &(i32* %25)[i64 5];
    i32 %35 = add i32 %24, i32 5;
    store i32* %34 with i32 %35;
    i32* %36 = getelementptr &(i32* %25)[i64 6];
    i32 %37 = add i32 %24, i32 6;
    store i32* %36 with i32 %37;
    i32* %38 = getelementptr &(i32* %25)[i64 7];
    i32 %39 = add i32 %24, i32 7;
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &(i32* %25)[i64 8];
    i32 %41 = add i32 %24, i32 8;
    store i32* %40 with i32 %41;
    i32* %42 = getelementptr &(i32* %25)[i64 9];
    i32 %43 = add i32 %24, i32 9;
    store i32* %42 with i32 %43;
    i32* %44 = getelementptr &(i32* %25)[i64 10];
    i32 %45 = add i32 %24, i32 10;
    store i32* %44 with i32 %45;
    i32* %46 = getelementptr &(i32* %25)[i64 11];
    i32 %47 = add i32 %24, i32 11;
    store i32* %46 with i32 %47;
    i32* %48 = getelementptr &(i32* %25)[i64 12];
    i32 %49 = add i32 %24, i32 12;
    store i32* %48 with i32 %49;
    i32* %50 = getelementptr &(i32* %25)[i64 13];
    i32 %51 = add i32 %24, i32 13;
    store i32* %50 with i32 %51;
    i32* %52 = getelementptr &(i32* %25)[i64 14];
    i32 %53 = add i32 %24, i32 14;
    store i32* %52 with i32 %53;
    i32* %54 = getelementptr &(i32* %25)[i64 15];
    i32 %55 = add i32 %24, i32 15;
    store i32* %54 with i32 %55;
    i32 %56 = add i32 %24, i32 16;
    i1 %57 = icmp sgt i32 %16, i32 %56;
    cbr i1 %57(prob = 0.941176), ^while.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %58 = phi [^super.header1, i32 0] [^while.body1, i32 %56];
    i32 %59 = phi [^super.header1, i32 undef] [^while.body1, i32 %56];
    i1 %60 = icmp sgt i32 %14, i32 %58;
    cbr i1 %60(prob = 0.75), ^while.body3, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %61 = phi [^scalar.header, i32 %17] [^while.body2, i32 %63];
    i32* %62 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %61];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %61, i32 1;
    i1 %64 = icmp sgt i32 %0, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body2, ^while.body;
  ^while.header1:
    i32 %65 = phi [^while.header, i32 0] [^while.body4, i32 %81] [^b2, i32 %81];
    i1 %66 = icmp sgt i32 %11, i32 %65;
    cbr i1 %66(prob = 0.984615), ^while.body4, ^b1;
  ^b:
    i32 %67 = add i32 %9, i32 1;
    i1 %68 = icmp sgt i32 %3, i32 %67;
    cbr i1 %68(prob = 0.984615), ^while.body, ^super.header2;
  ^b1:
    i32 %69 = add i32 %19, i32 1;
    ubr ^while.header;
  ^while.body3 {scalar}:
    i32 %70 = phi [^scalar.header1, i32 %58] [^while.body3, i32 %78];
    i32* %71 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %70];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %71)[i64 1];
    i32 %73 = add i32 %70, i32 1;
    store i32* %72 with i32 %73;
    i32* %74 = getelementptr &(i32* %71)[i64 2];
    i32 %75 = add i32 %70, i32 2;
    store i32* %74 with i32 %75;
    i32* %76 = getelementptr &(i32* %71)[i64 3];
    i32 %77 = add i32 %70, i32 3;
    store i32* %76 with i32 %77;
    i32 %78 = add i32 %70, i32 4;
    i1 %79 = icmp sgt i32 %14, i32 %78;
    cbr i1 %79(prob = 0.75), ^while.body3, ^scalar.header;
  ^while.body4:
    i1 %80 = icmp slt i32 %19, i32 %65;
    i32 %81 = add i32 %65, i32 1;
    cbr i1 %80(prob = 0.5), ^while.header1, ^b2;
  ^super.header2:
    i1 %82 = icmp sgt i32 %3, i32 3;
    cbr i1 %82(prob = 0.941176), ^super.header3, ^scalar.header2;
  ^b2:
    i32 %83 = mul i32 %12, i32 %65;
    i32* %84 = getelementptr &(i32* %23)[i32 %83];
    i32* %85 = getelementptr &(i32* %21)[i32 %65];
    i32 %86 = load i32* %85;
    store i32* %84 with i32 %86;
    ubr ^while.header1;
  ^super.header3:
    i1 %87 = icmp sgt i32 %4, i32 15;
    cbr i1 %87(prob = 0.941176), ^while.body5, ^scalar.header3;
  ^scalar.header2:
    i32 %88 = phi [^super.header2, i32 0] [^scalar.final1, i32 %251];
    i32 %89 = phi [^super.header2, i32 0] [^scalar.final1, i32 %252];
    i32 %90 = phi [^super.header2, i32 1] [^scalar.final1, i32 %249];
    i32 %91 = phi [^super.header2, i32 0] [^scalar.final1, i32 %250];
    i32 %92 = phi [^super.header2, i32 undef] [^scalar.final1, i32 %251];
    i1 %93 = icmp sgt i32 %3, i32 %89;
    cbr i1 %93(prob = 0.75), ^while.body6, ^scalar.final;
  ^while.body5:
    i32 %94 = phi [^super.header3, i32 16] [^while.body5, i32 %225];
    i32 %95 = phi [^super.header3, i32 15] [^while.body5, i32 %223];
    i32 %96 = phi [^super.header3, i32 14] [^while.body5, i32 %222];
    i32 %97 = phi [^super.header3, i32 13] [^while.body5, i32 %221];
    i32 %98 = phi [^super.header3, i32 12] [^while.body5, i32 %220];
    i32 %99 = phi [^super.header3, i32 11] [^while.body5, i32 %219];
    i32 %100 = phi [^super.header3, i32 10] [^while.body5, i32 %218];
    i32 %101 = phi [^super.header3, i32 9] [^while.body5, i32 %217];
    i32 %102 = phi [^super.header3, i32 8] [^while.body5, i32 %216];
    i32 %103 = phi [^super.header3, i32 7] [^while.body5, i32 %215];
    i32 %104 = phi [^super.header3, i32 6] [^while.body5, i32 %214];
    i32 %105 = phi [^super.header3, i32 5] [^while.body5, i32 %213];
    i32 %106 = phi [^super.header3, i32 4] [^while.body5, i32 %212];
    i32 %107 = phi [^super.header3, i32 3] [^while.body5, i32 %211];
    i32 %108 = phi [^super.header3, i32 2] [^while.body5, i32 %210];
    i32 %109 = phi [^super.header3, i32 0] [^while.body5, i32 %207];
    i32 %110 = phi [^super.header3, i32 1] [^while.body5, i32 %224];
    i32 %111 = phi [^super.header3, i32 0] [^while.body5, i32 %208];
    i32 %112 = phi [^super.header3, i32 0] [^while.body5, i32 %205];
    i32* %113 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %111];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %113)[i64 1];
    i32 %116 = load i32* %115;
    i32 %117 = add i32 %109, i32 %110;
    i32 %118 = mul i32 %116, i32 %117;
    i32 %119 = mul i32 %109, i32 %114;
    i32 %120 = add i32 %118, i32 %119;
    i32* %121 = getelementptr &(i32* %113)[i64 2];
    i32 %122 = load i32* %121;
    i32 %123 = add i32 %108, i32 2;
    i32 %124 = add i32 %109, i32 %123;
    i32 %125 = mul i32 %122, i32 %124;
    i32 %126 = add i32 %120, i32 %125;
    i32* %127 = getelementptr &(i32* %113)[i64 3];
    i32 %128 = load i32* %127;
    i32 %129 = add i32 %107, i32 6;
    i32 %130 = add i32 %109, i32 %129;
    i32 %131 = mul i32 %128, i32 %130;
    i32 %132 = add i32 %126, i32 %131;
    i32* %133 = getelementptr &(i32* %113)[i64 4];
    i32 %134 = load i32* %133;
    i32 %135 = add i32 %106, i32 12;
    i32 %136 = add i32 %109, i32 %135;
    i32 %137 = mul i32 %134, i32 %136;
    i32 %138 = add i32 %132, i32 %137;
    i32* %139 = getelementptr &(i32* %113)[i64 5];
    i32 %140 = load i32* %139;
    i32 %141 = add i32 %105, i32 20;
    i32 %142 = add i32 %109, i32 %141;
    i32 %143 = mul i32 %140, i32 %142;
    i32 %144 = add i32 %138, i32 %143;
    i32* %145 = getelementptr &(i32* %113)[i64 6];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %104, i32 30;
    i32 %148 = add i32 %109, i32 %147;
    i32 %149 = mul i32 %146, i32 %148;
    i32 %150 = add i32 %144, i32 %149;
    i32* %151 = getelementptr &(i32* %113)[i64 7];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %103, i32 42;
    i32 %154 = add i32 %109, i32 %153;
    i32 %155 = mul i32 %152, i32 %154;
    i32 %156 = add i32 %150, i32 %155;
    i32* %157 = getelementptr &(i32* %113)[i64 8];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %102, i32 56;
    i32 %160 = add i32 %109, i32 %159;
    i32 %161 = mul i32 %158, i32 %160;
    i32 %162 = add i32 %156, i32 %161;
    i32* %163 = getelementptr &(i32* %113)[i64 9];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %101, i32 72;
    i32 %166 = add i32 %109, i32 %165;
    i32 %167 = mul i32 %164, i32 %166;
    i32 %168 = add i32 %162, i32 %167;
    i32* %169 = getelementptr &(i32* %113)[i64 10];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %100, i32 90;
    i32 %172 = add i32 %109, i32 %171;
    i32 %173 = mul i32 %170, i32 %172;
    i32 %174 = add i32 %168, i32 %173;
    i32* %175 = getelementptr &(i32* %113)[i64 11];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %99, i32 110;
    i32 %178 = add i32 %109, i32 %177;
    i32 %179 = mul i32 %176, i32 %178;
    i32 %180 = add i32 %174, i32 %179;
    i32* %181 = getelementptr &(i32* %113)[i64 12];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %98, i32 132;
    i32 %184 = add i32 %109, i32 %183;
    i32 %185 = mul i32 %182, i32 %184;
    i32 %186 = add i32 %180, i32 %185;
    i32* %187 = getelementptr &(i32* %113)[i64 13];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %97, i32 156;
    i32 %190 = add i32 %109, i32 %189;
    i32 %191 = mul i32 %188, i32 %190;
    i32 %192 = add i32 %186, i32 %191;
    i32* %193 = getelementptr &(i32* %113)[i64 14];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %96, i32 182;
    i32 %196 = add i32 %109, i32 %195;
    i32 %197 = mul i32 %194, i32 %196;
    i32 %198 = add i32 %192, i32 %197;
    i32* %199 = getelementptr &(i32* %113)[i64 15];
    i32 %200 = load i32* %199;
    i32 %201 = add i32 %95, i32 210;
    i32 %202 = add i32 %109, i32 %201;
    i32 %203 = mul i32 %200, i32 %202;
    i32 %204 = add i32 %198, i32 %203;
    i32 %205 = add i32 %112, i32 %204;
    i32 %206 = add i32 %94, i32 240;
    i32 %207 = add i32 %109, i32 %206;
    i32 %208 = add i32 %111, i32 16;
    i1 %209 = icmp sgt i32 %5, i32 %208;
    i32 %210 = add i32 %108, i32 64;
    i32 %211 = add i32 %107, i32 96;
    i32 %212 = add i32 %106, i32 128;
    i32 %213 = add i32 %105, i32 160;
    i32 %214 = add i32 %104, i32 192;
    i32 %215 = add i32 %103, i32 224;
    i32 %216 = add i32 %102, i32 256;
    i32 %217 = add i32 %101, i32 288;
    i32 %218 = add i32 %100, i32 320;
    i32 %219 = add i32 %99, i32 352;
    i32 %220 = add i32 %98, i32 384;
    i32 %221 = add i32 %97, i32 416;
    i32 %222 = add i32 %96, i32 448;
    i32 %223 = add i32 %95, i32 480;
    i32 %224 = add i32 %110, i32 32;
    i32 %225 = add i32 %94, i32 512;
    cbr i1 %209(prob = 0.941176), ^while.body5, ^scalar.header3;
  ^scalar.header3:
    i32 %226 = phi [^super.header3, i32 0] [^while.body5, i32 %207];
    i32 %227 = phi [^super.header3, i32 1] [^while.body5, i32 %224];
    i32 %228 = phi [^super.header3, i32 0] [^while.body5, i32 %208];
    i32 %229 = phi [^super.header3, i32 0] [^while.body5, i32 %205];
    i32 %230 = phi [^super.header3, i32 undef] [^while.body5, i32 %224];
    i32 %231 = phi [^super.header3, i32 undef] [^while.body5, i32 %207];
    i32 %232 = phi [^super.header3, i32 undef] [^while.body5, i32 %205];
    i32 %233 = phi [^super.header3, i32 undef] [^while.body5, i32 %208];
    i1 %234 = icmp sgt i32 %4, i32 %228;
    cbr i1 %234(prob = 0.75), ^while.body7, ^scalar.final1;
  ^while.body6 {scalar}:
    i32 %235 = phi [^scalar.header2, i32 %91] [^while.body6, i32 %245];
    i32 %236 = phi [^scalar.header2, i32 %90] [^while.body6, i32 %246];
    i32 %237 = phi [^scalar.header2, i32 %89] [^while.body6, i32 %243];
    i32 %238 = phi [^scalar.header2, i32 %88] [^while.body6, i32 %242];
    i32* %239 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %237];
    i32 %240 = load i32* %239;
    i32 %241 = mul i32 %235, i32 %240;
    i32 %242 = add i32 %238, i32 %241;
    i32 %243 = add i32 %237, i32 1;
    i1 %244 = icmp sgt i32 %3, i32 %243;
    i32 %245 = add i32 %235, i32 %236;
    i32 %246 = add i32 %236, i32 2;
    cbr i1 %244(prob = 0.75), ^while.body6, ^scalar.final;
  ^scalar.final:
    i32 %247 = phi [^scalar.header2, i32 %92] [^while.body6, i32 %242];
    i32 %248 = abs i32 %247;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %248);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^scalar.final1:
    i32 %249 = phi [^scalar.header3, i32 %230] [^while.body7, i32 %285];
    i32 %250 = phi [^scalar.header3, i32 %231] [^while.body7, i32 %282];
    i32 %251 = phi [^scalar.header3, i32 %232] [^while.body7, i32 %279];
    i32 %252 = phi [^scalar.header3, i32 %233] [^while.body7, i32 %283];
    ubr ^scalar.header2;
  ^while.body7 {scalar}:
    i32 %253 = phi [^scalar.header3, i32 %229] [^while.body7, i32 %279];
    i32 %254 = phi [^scalar.header3, i32 %228] [^while.body7, i32 %283];
    i32 %255 = phi [^scalar.header3, i32 %227] [^while.body7, i32 %285];
    i32 %256 = phi [^scalar.header3, i32 %226] [^while.body7, i32 %282];
    i32* %257 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %254];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &(i32* %257)[i64 1];
    i32 %260 = load i32* %259;
    i32 %261 = add i32 %255, i32 %256;
    i32 %262 = mul i32 %260, i32 %261;
    i32 %263 = mul i32 %256, i32 %258;
    i32 %264 = add i32 %262, i32 %263;
    i32 %265 = add i32 %255, i32 1;
    i32 %266 = mul i32 %265, i32 2;
    i32 %267 = add i32 %256, i32 %266;
    i32* %268 = getelementptr &(i32* %257)[i64 2];
    i32 %269 = load i32* %268;
    i32 %270 = mul i32 %267, i32 %269;
    i32 %271 = add i32 %264, i32 %270;
    i32 %272 = mul i32 %255, i32 3;
    i32 %273 = add i32 %272, i32 6;
    i32 %274 = add i32 %256, i32 %273;
    i32* %275 = getelementptr &(i32* %257)[i64 3];
    i32 %276 = load i32* %275;
    i32 %277 = mul i32 %274, i32 %276;
    i32 %278 = add i32 %271, i32 %277;
    i32 %279 = add i32 %253, i32 %278;
    i32 %280 = mul i32 %255, i32 4;
    i32 %281 = add i32 %280, i32 12;
    i32 %282 = add i32 %256, i32 %281;
    i32 %283 = add i32 %254, i32 4;
    i1 %284 = icmp sgt i32 %4, i32 %283;
    i32 %285 = add i32 %255, i32 8;
    cbr i1 %284(prob = 0.75), ^while.body7, ^scalar.final1;
}
