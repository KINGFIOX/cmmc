internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = add i32 %3, i32 -4;
    i32 %5 = add i32 %3, i32 -20;
    i1 %6 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 28);
    [20000000 * i32]* %7 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %6(prob = 0.97), ^super.header, ^while.header;
  ^super.header:
    i1 %8 = icmp sgt i32 %0, i32 4;
    cbr i1 %8(prob = 0.89), ^super.header1, ^while.body;
  ^while.header:
    i1 %9 = icmp sgt i32 %3, i32 0;
    cbr i1 %9(prob = 0.97), ^prebody, ^while.header1;
  ^prebody:
    i32* %10 = getelementptr &([20000000 * i32]* %7)[i64 0][i64 0];
    ubr ^while.body1;
  ^super.header1:
    i32 %11 = add i32 %0, i32 -4;
    i1 %12 = icmp sgt i32 %11, i32 16;
    i32 %13 = add i32 %0, i32 -20;
    cbr i1 %12(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body {scalar}:
    i32 %14 = phi [^super.header, i32 0] [^while.body, i32 %16] [^while.body3, i32 %64];
    i32* %15 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %14];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %14, i32 1;
    i1 %17 = icmp sgt i32 %0, i32 %16;
    cbr i1 %17(prob = 0.75), ^while.body, ^while.header;
  ^while.header1:
    cbr i1 %9(prob = 0.97), ^super.header2, ^b;
  ^while.body1:
    i32 %18 = phi [^prebody, i32 0] [^while.body6, i32 %219];
    i32* %19 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = sdiv i32 %0, i32 %20;
    ubr ^while.header2;
  ^while.body2:
    i32 %22 = phi [^super.header1, i32 0] [^while.body2, i32 %54];
    i32* %23 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %22];
    store i32* %23 with i32 %22;
    i32* %24 = getelementptr &(i32* %23)[i64 1];
    i32 %25 = add i32 %22, i32 1;
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %23)[i64 2];
    i32 %27 = add i32 %22, i32 2;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %23)[i64 3];
    i32 %29 = add i32 %22, i32 3;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %23)[i64 4];
    i32 %31 = add i32 %22, i32 4;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %23)[i64 5];
    i32 %33 = add i32 %22, i32 5;
    store i32* %32 with i32 %33;
    i32* %34 = getelementptr &(i32* %23)[i64 6];
    i32 %35 = add i32 %22, i32 6;
    store i32* %34 with i32 %35;
    i32* %36 = getelementptr &(i32* %23)[i64 7];
    i32 %37 = add i32 %22, i32 7;
    store i32* %36 with i32 %37;
    i32* %38 = getelementptr &(i32* %23)[i64 8];
    i32 %39 = add i32 %22, i32 8;
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &(i32* %23)[i64 9];
    i32 %41 = add i32 %22, i32 9;
    store i32* %40 with i32 %41;
    i32* %42 = getelementptr &(i32* %23)[i64 10];
    i32 %43 = add i32 %22, i32 10;
    store i32* %42 with i32 %43;
    i32* %44 = getelementptr &(i32* %23)[i64 11];
    i32 %45 = add i32 %22, i32 11;
    store i32* %44 with i32 %45;
    i32* %46 = getelementptr &(i32* %23)[i64 12];
    i32 %47 = add i32 %22, i32 12;
    store i32* %46 with i32 %47;
    i32* %48 = getelementptr &(i32* %23)[i64 13];
    i32 %49 = add i32 %22, i32 13;
    store i32* %48 with i32 %49;
    i32* %50 = getelementptr &(i32* %23)[i64 14];
    i32 %51 = add i32 %22, i32 14;
    store i32* %50 with i32 %51;
    i32* %52 = getelementptr &(i32* %23)[i64 15];
    i32 %53 = add i32 %22, i32 15;
    store i32* %52 with i32 %53;
    i32 %54 = add i32 %22, i32 16;
    i1 %55 = icmp sgt i32 %13, i32 %54;
    cbr i1 %55(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %56 = phi [^super.header1, i32 0] [^while.body2, i32 %54] [^while.body3, i32 %64];
    i32* %57 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %56];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %57)[i64 1];
    i32 %59 = add i32 %56, i32 1;
    store i32* %58 with i32 %59;
    i32* %60 = getelementptr &(i32* %57)[i64 2];
    i32 %61 = add i32 %56, i32 2;
    store i32* %60 with i32 %61;
    i32* %62 = getelementptr &(i32* %57)[i64 3];
    i32 %63 = add i32 %56, i32 3;
    store i32* %62 with i32 %63;
    i32 %64 = add i32 %56, i32 4;
    i1 %65 = icmp sgt i32 %11, i32 %64;
    cbr i1 %65(prob = 0.75), ^while.body3, ^while.body;
  ^super.header2:
    i1 %66 = icmp sgt i32 %3, i32 4;
    cbr i1 %66(prob = 0.89), ^super.header3, ^while.body4;
  ^b:
    i32 %67 = phi [^while.header1, i32 0] [^while.body4, i32 %80];
    call (i32) -> void @stoptime(i32 47);
    i32 %68 = abs i32 %67;
    call (i32) -> void @putint(i32 %68);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.header2:
    i32 %69 = phi [^while.body1, i32 0] [^b1, i32 %254];
    i1 %70 = icmp sgt i32 %21, i32 %69;
    i32 %71 = mul i32 %20, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.header3, ^while.body6;
  ^super.header3:
    i1 %72 = icmp sgt i32 %4, i32 16;
    cbr i1 %72(prob = 0.89), ^while.body5, ^while.body7;
  ^while.body4 {scalar}:
    i32 %73 = phi [^super.header2, i32 0] [^while.body4, i32 %83] [^while.body7, i32 %250];
    i32 %74 = phi [^super.header2, i32 1] [^while.body4, i32 %84] [^while.body7, i32 %253];
    i32 %75 = phi [^super.header2, i32 0] [^while.body4, i32 %81] [^while.body7, i32 %251];
    i32 %76 = phi [^super.header2, i32 0] [^while.body4, i32 %80] [^while.body7, i32 %247];
    i32* %77 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %75];
    i32 %78 = load i32* %77;
    i32 %79 = mul i32 %73, i32 %78;
    i32 %80 = add i32 %76, i32 %79;
    i32 %81 = add i32 %75, i32 1;
    i1 %82 = icmp sgt i32 %3, i32 %81;
    i32 %83 = add i32 %73, i32 %74;
    i32 %84 = add i32 %74, i32 2;
    cbr i1 %82(prob = 0.75), ^while.body4, ^b;
  ^while.header3:
    i32 %85 = phi [^while.header2, i32 0] [^while.body8, i32 %256] [^b2, i32 %256];
    i1 %86 = icmp sgt i32 %20, i32 %85;
    cbr i1 %86(prob = 0.97), ^while.body8, ^b1;
  ^while.body5:
    i32 %87 = phi [^super.header3, i32 16] [^while.body5, i32 %218];
    i32 %88 = phi [^super.header3, i32 15] [^while.body5, i32 %216];
    i32 %89 = phi [^super.header3, i32 14] [^while.body5, i32 %215];
    i32 %90 = phi [^super.header3, i32 13] [^while.body5, i32 %214];
    i32 %91 = phi [^super.header3, i32 12] [^while.body5, i32 %213];
    i32 %92 = phi [^super.header3, i32 11] [^while.body5, i32 %212];
    i32 %93 = phi [^super.header3, i32 10] [^while.body5, i32 %211];
    i32 %94 = phi [^super.header3, i32 9] [^while.body5, i32 %210];
    i32 %95 = phi [^super.header3, i32 8] [^while.body5, i32 %209];
    i32 %96 = phi [^super.header3, i32 7] [^while.body5, i32 %208];
    i32 %97 = phi [^super.header3, i32 6] [^while.body5, i32 %207];
    i32 %98 = phi [^super.header3, i32 5] [^while.body5, i32 %206];
    i32 %99 = phi [^super.header3, i32 4] [^while.body5, i32 %205];
    i32 %100 = phi [^super.header3, i32 3] [^while.body5, i32 %204];
    i32 %101 = phi [^super.header3, i32 2] [^while.body5, i32 %203];
    i32 %102 = phi [^super.header3, i32 0] [^while.body5, i32 %200];
    i32 %103 = phi [^super.header3, i32 1] [^while.body5, i32 %217];
    i32 %104 = phi [^super.header3, i32 0] [^while.body5, i32 %201];
    i32 %105 = phi [^super.header3, i32 0] [^while.body5, i32 %198];
    i32* %106 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %104];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %106)[i64 1];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %102, i32 %103;
    i32 %111 = mul i32 %109, i32 %110;
    i32 %112 = mul i32 %102, i32 %107;
    i32 %113 = add i32 %111, i32 %112;
    i32* %114 = getelementptr &(i32* %106)[i64 2];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %101, i32 2;
    i32 %117 = add i32 %102, i32 %116;
    i32 %118 = mul i32 %115, i32 %117;
    i32 %119 = add i32 %113, i32 %118;
    i32* %120 = getelementptr &(i32* %106)[i64 3];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %100, i32 6;
    i32 %123 = add i32 %102, i32 %122;
    i32 %124 = mul i32 %121, i32 %123;
    i32 %125 = add i32 %119, i32 %124;
    i32* %126 = getelementptr &(i32* %106)[i64 4];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %99, i32 12;
    i32 %129 = add i32 %102, i32 %128;
    i32 %130 = mul i32 %127, i32 %129;
    i32 %131 = add i32 %125, i32 %130;
    i32* %132 = getelementptr &(i32* %106)[i64 5];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %98, i32 20;
    i32 %135 = add i32 %102, i32 %134;
    i32 %136 = mul i32 %133, i32 %135;
    i32 %137 = add i32 %131, i32 %136;
    i32* %138 = getelementptr &(i32* %106)[i64 6];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %97, i32 30;
    i32 %141 = add i32 %102, i32 %140;
    i32 %142 = mul i32 %139, i32 %141;
    i32 %143 = add i32 %137, i32 %142;
    i32* %144 = getelementptr &(i32* %106)[i64 7];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %96, i32 42;
    i32 %147 = add i32 %102, i32 %146;
    i32 %148 = mul i32 %145, i32 %147;
    i32 %149 = add i32 %143, i32 %148;
    i32* %150 = getelementptr &(i32* %106)[i64 8];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %95, i32 56;
    i32 %153 = add i32 %102, i32 %152;
    i32 %154 = mul i32 %151, i32 %153;
    i32 %155 = add i32 %149, i32 %154;
    i32* %156 = getelementptr &(i32* %106)[i64 9];
    i32 %157 = load i32* %156;
    i32 %158 = add i32 %94, i32 72;
    i32 %159 = add i32 %102, i32 %158;
    i32 %160 = mul i32 %157, i32 %159;
    i32 %161 = add i32 %155, i32 %160;
    i32* %162 = getelementptr &(i32* %106)[i64 10];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %93, i32 90;
    i32 %165 = add i32 %102, i32 %164;
    i32 %166 = mul i32 %163, i32 %165;
    i32 %167 = add i32 %161, i32 %166;
    i32* %168 = getelementptr &(i32* %106)[i64 11];
    i32 %169 = load i32* %168;
    i32 %170 = add i32 %92, i32 110;
    i32 %171 = add i32 %102, i32 %170;
    i32 %172 = mul i32 %169, i32 %171;
    i32 %173 = add i32 %167, i32 %172;
    i32* %174 = getelementptr &(i32* %106)[i64 12];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %91, i32 132;
    i32 %177 = add i32 %102, i32 %176;
    i32 %178 = mul i32 %175, i32 %177;
    i32 %179 = add i32 %173, i32 %178;
    i32* %180 = getelementptr &(i32* %106)[i64 13];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %90, i32 156;
    i32 %183 = add i32 %102, i32 %182;
    i32 %184 = mul i32 %181, i32 %183;
    i32 %185 = add i32 %179, i32 %184;
    i32* %186 = getelementptr &(i32* %106)[i64 14];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %89, i32 182;
    i32 %189 = add i32 %102, i32 %188;
    i32 %190 = mul i32 %187, i32 %189;
    i32 %191 = add i32 %185, i32 %190;
    i32* %192 = getelementptr &(i32* %106)[i64 15];
    i32 %193 = load i32* %192;
    i32 %194 = add i32 %88, i32 210;
    i32 %195 = add i32 %102, i32 %194;
    i32 %196 = mul i32 %193, i32 %195;
    i32 %197 = add i32 %191, i32 %196;
    i32 %198 = add i32 %105, i32 %197;
    i32 %199 = add i32 %87, i32 240;
    i32 %200 = add i32 %102, i32 %199;
    i32 %201 = add i32 %104, i32 16;
    i1 %202 = icmp sgt i32 %5, i32 %201;
    i32 %203 = add i32 %101, i32 64;
    i32 %204 = add i32 %100, i32 96;
    i32 %205 = add i32 %99, i32 128;
    i32 %206 = add i32 %98, i32 160;
    i32 %207 = add i32 %97, i32 192;
    i32 %208 = add i32 %96, i32 224;
    i32 %209 = add i32 %95, i32 256;
    i32 %210 = add i32 %94, i32 288;
    i32 %211 = add i32 %93, i32 320;
    i32 %212 = add i32 %92, i32 352;
    i32 %213 = add i32 %91, i32 384;
    i32 %214 = add i32 %90, i32 416;
    i32 %215 = add i32 %89, i32 448;
    i32 %216 = add i32 %88, i32 480;
    i32 %217 = add i32 %103, i32 32;
    i32 %218 = add i32 %87, i32 512;
    cbr i1 %202(prob = 0.89), ^while.body5, ^while.body7;
  ^while.body6:
    i32 %219 = add i32 %18, i32 1;
    i1 %220 = icmp sgt i32 %3, i32 %219;
    cbr i1 %220(prob = 0.97), ^while.body1, ^while.header1;
  ^while.body7 {scalar}:
    i32 %221 = phi [^super.header3, i32 0] [^while.body5, i32 %198] [^while.body7, i32 %247];
    i32 %222 = phi [^super.header3, i32 0] [^while.body5, i32 %201] [^while.body7, i32 %251];
    i32 %223 = phi [^super.header3, i32 1] [^while.body5, i32 %217] [^while.body7, i32 %253];
    i32 %224 = phi [^super.header3, i32 0] [^while.body5, i32 %200] [^while.body7, i32 %250];
    i32* %225 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %222];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %225)[i64 1];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %223, i32 %224;
    i32 %230 = mul i32 %228, i32 %229;
    i32 %231 = mul i32 %224, i32 %226;
    i32 %232 = add i32 %230, i32 %231;
    i32 %233 = add i32 %223, i32 1;
    i32 %234 = mul i32 %233, i32 2;
    i32 %235 = add i32 %224, i32 %234;
    i32* %236 = getelementptr &(i32* %225)[i64 2];
    i32 %237 = load i32* %236;
    i32 %238 = mul i32 %235, i32 %237;
    i32 %239 = add i32 %232, i32 %238;
    i32 %240 = mul i32 %223, i32 3;
    i32 %241 = add i32 %240, i32 6;
    i32 %242 = add i32 %224, i32 %241;
    i32* %243 = getelementptr &(i32* %225)[i64 3];
    i32 %244 = load i32* %243;
    i32 %245 = mul i32 %242, i32 %244;
    i32 %246 = add i32 %239, i32 %245;
    i32 %247 = add i32 %221, i32 %246;
    i32 %248 = mul i32 %223, i32 4;
    i32 %249 = add i32 %248, i32 12;
    i32 %250 = add i32 %224, i32 %249;
    i32 %251 = add i32 %222, i32 4;
    i1 %252 = icmp sgt i32 %4, i32 %251;
    i32 %253 = add i32 %223, i32 8;
    cbr i1 %252(prob = 0.75), ^while.body7, ^while.body4;
  ^b1:
    i32 %254 = add i32 %69, i32 1;
    ubr ^while.header2;
  ^while.body8:
    i1 %255 = icmp slt i32 %69, i32 %85;
    i32 %256 = add i32 %85, i32 1;
    cbr i1 %255(prob = 0.5), ^while.header3, ^b2;
  ^b2:
    i32 %257 = mul i32 %21, i32 %85;
    i32 %258 = add i32 %69, i32 %257;
    i32* %259 = getelementptr &(i32* %10)[i32 %258];
    i32 %260 = add i32 %71, i32 %85;
    i32* %261 = getelementptr &(i32* %10)[i32 %260];
    i32 %262 = load i32* %261;
    store i32* %259 with i32 %262;
    ubr ^while.header3;
}
