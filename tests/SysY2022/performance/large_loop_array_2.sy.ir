internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 4;
    call (i32) -> void @starttime(i32 22);
    [4096 * f32]* %3 = ptrcast [4096 * f32]* @x to [4096 * f32]*;
    f32* %4 = getelementptr &([4096 * f32]* %3)[i64 0][i64 0];
    [4096 * f32]* %5 = ptrcast [4096 * f32]* @y to [4096 * f32]*;
    f32* %6 = getelementptr &([4096 * f32]* %5)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %7 = phi [^entry, f32 0] [^b2, f32 %55];
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %26];
    f32 %9 = phi [^entry, f32 1] [^b2, f32 %16];
    f32 %10 = phi [^entry, f32 0] [^b2, f32 %18];
    i32 %11 = phi [^entry, i32 0] [^b2, i32 %56];
    i1 %12 = icmp slt i32 %11, i32 500000;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %13 = srem i32 %11, i32 10;
    i1 %14 = icmp neq i32 %13, i32 0;
    f32 %15 = fadd f32 %9, f32 0.2;
    f32 %16 = select i1 %14 ? f32 1 : f32 %15;
    f32 %17 = fadd f32 %10, f32 0.1;
    f32 %18 = select i1 %14 ? f32 0 : f32 %17;
    i1 %19 = icmp sgt i32 %0, i32 %8;
    cbr i1 %19(prob = 0.97), ^super.header, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %20 = fsub f32 %7, f32 1.14424e+16;
    i1 %21 = fcmp ole f32 %20, f32 1e-06;
    i1 %22 = fcmp oge f32 %20, f32 -1e-06;
    i1 %23 = or i1 %21, i1 %22;
    cbr i1 %23(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %24 = add i32 %8, i32 4;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    cbr i1 %25(prob = 0.89), ^while.body1, ^while.body2;
  ^b1:
    i32 %26 = phi [^while.body, i32 %8] [^while.body2, i32 %0];
    cbr i1 %1(prob = 0.97), ^super.header1, ^b2;
  ^while.body1:
    i32 %27 = phi [^super.header, i32 %8] [^while.body1, i32 %53];
    f32 %28 = s2f i32 %27 to f32;
    f32 %29 = fadd f32 %18, f32 %28;
    f32* %30 = getelementptr &([4096 * f32]* %3)[i64 0][i32 %27];
    store f32* %30 with f32 %29;
    f32 %31 = fadd f32 %16, f32 %28;
    f32* %32 = getelementptr &([4096 * f32]* %5)[i64 0][i32 %27];
    store f32* %32 with f32 %31;
    i32 %33 = add i32 %27, i32 1;
    f32 %34 = s2f i32 %33 to f32;
    f32 %35 = fadd f32 %18, f32 %34;
    f32* %36 = getelementptr &(f32* %30)[i64 1];
    store f32* %36 with f32 %35;
    f32 %37 = fadd f32 %16, f32 %34;
    f32* %38 = getelementptr &(f32* %32)[i64 1];
    store f32* %38 with f32 %37;
    i32 %39 = add i32 %27, i32 2;
    f32 %40 = s2f i32 %39 to f32;
    f32 %41 = fadd f32 %18, f32 %40;
    f32* %42 = getelementptr &(f32* %30)[i64 2];
    store f32* %42 with f32 %41;
    f32 %43 = fadd f32 %16, f32 %40;
    f32* %44 = getelementptr &(f32* %32)[i64 2];
    store f32* %44 with f32 %43;
    i32 %45 = add i32 %27, i32 3;
    f32 %46 = s2f i32 %45 to f32;
    f32 %47 = fadd f32 %18, f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 3];
    store f32* %48 with f32 %47;
    f32 %49 = fadd f32 %16, f32 %46;
    f32* %50 = getelementptr &(f32* %32)[i64 3];
    store f32* %50 with f32 %49;
    i32 %51 = add i32 %27, i32 8;
    i1 %52 = icmp sgt i32 %0, i32 %51;
    i32 %53 = add i32 %27, i32 4;
    cbr i1 %52(prob = 0.89), ^while.body1, ^while.body2;
  ^b2:
    f32 %54 = phi [^b1, f32 0] [^while.body4, f32 %102];
    f32 %55 = fadd f32 %7, f32 %54;
    i32 %56 = add i32 %11, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %57 = phi [^super.header, i32 %8] [^while.body1, i32 %53] [^while.body2, i32 %63];
    f32 %58 = s2f i32 %57 to f32;
    f32 %59 = fadd f32 %18, f32 %58;
    f32* %60 = getelementptr &([4096 * f32]* %3)[i64 0][i32 %57];
    store f32* %60 with f32 %59;
    f32 %61 = fadd f32 %16, f32 %58;
    f32* %62 = getelementptr &([4096 * f32]* %5)[i64 0][i32 %57];
    store f32* %62 with f32 %61;
    i32 %63 = add i32 %57, i32 1;
    i1 %64 = icmp sgt i32 %0, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body2, ^b1;
  ^super.header1:
    cbr i1 %2(prob = 0.89), ^while.body3, ^while.body4;
  ^b3:
    i32 %65 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %65;
  ^while.body3:
    f32 %66 = phi [^super.header1, f32 0] [^while.body3, f32 %91];
    i32 %67 = phi [^super.header1, i32 0] [^while.body3, i32 %94];
    f32* %68 = getelementptr &(f32* %4)[i32 %67];
    f32 %69 = load f32* %68;
    f32* %70 = getelementptr &(f32* %6)[i32 %67];
    f32 %71 = load f32* %70;
    f32 %72 = fmul f32 %69, f32 %71;
    f32 %73 = fadd f32 %66, f32 %72;
    f32* %74 = getelementptr &(f32* %68)[i64 1];
    f32 %75 = load f32* %74;
    f32* %76 = getelementptr &(f32* %70)[i64 1];
    f32 %77 = load f32* %76;
    f32 %78 = fmul f32 %75, f32 %77;
    f32 %79 = fadd f32 %73, f32 %78;
    f32* %80 = getelementptr &(f32* %68)[i64 2];
    f32 %81 = load f32* %80;
    f32* %82 = getelementptr &(f32* %70)[i64 2];
    f32 %83 = load f32* %82;
    f32 %84 = fmul f32 %81, f32 %83;
    f32 %85 = fadd f32 %79, f32 %84;
    f32* %86 = getelementptr &(f32* %68)[i64 3];
    f32 %87 = load f32* %86;
    f32* %88 = getelementptr &(f32* %70)[i64 3];
    f32 %89 = load f32* %88;
    f32 %90 = fmul f32 %87, f32 %89;
    f32 %91 = fadd f32 %85, f32 %90;
    i32 %92 = add i32 %67, i32 8;
    i1 %93 = icmp sgt i32 %0, i32 %92;
    i32 %94 = add i32 %67, i32 4;
    cbr i1 %93(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %95 = phi [^super.header1, i32 0] [^while.body3, i32 %94] [^while.body4, i32 %103];
    f32 %96 = phi [^super.header1, f32 0] [^while.body3, f32 %91] [^while.body4, f32 %102];
    f32* %97 = getelementptr &(f32* %4)[i32 %95];
    f32 %98 = load f32* %97;
    f32* %99 = getelementptr &(f32* %6)[i32 %95];
    f32 %100 = load f32* %99;
    f32 %101 = fmul f32 %98, f32 %100;
    f32 %102 = fadd f32 %96, f32 %101;
    i32 %103 = add i32 %95, i32 1;
    i1 %104 = icmp sgt i32 %0, i32 %103;
    cbr i1 %104(prob = 0.75), ^while.body4, ^b2;
}
internal [4096 * f32]* @y { Flexible };
internal [4096 * f32]* @x { Flexible };
