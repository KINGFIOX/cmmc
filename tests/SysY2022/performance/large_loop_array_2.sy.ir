internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 22);
    [4096 * f32]* %2 = ptrcast [4096 * f32]* @x to [4096 * f32]*;
    f32* %3 = getelementptr &([4096 * f32]* %2)[i64 0][i64 0];
    [4096 * f32]* %4 = ptrcast [4096 * f32]* @y to [4096 * f32]*;
    f32* %5 = getelementptr &([4096 * f32]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %6 = phi [^entry, f32 0] [^b2, f32 %54];
    i32 %7 = phi [^entry, i32 0] [^b2, i32 %25];
    f32 %8 = phi [^entry, f32 1] [^b2, f32 %15];
    f32 %9 = phi [^entry, f32 0] [^b2, f32 %17];
    i32 %10 = phi [^entry, i32 0] [^b2, i32 %55];
    i1 %11 = icmp slt i32 %10, i32 500000;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %12 = srem i32 %10, i32 10;
    i1 %13 = icmp neq i32 %12, i32 0;
    f32 %14 = fadd f32 %8, f32 0.2;
    f32 %15 = select i1 %13 ? f32 1 : f32 %14;
    f32 %16 = fadd f32 %9, f32 0.1;
    f32 %17 = select i1 %13 ? f32 0 : f32 %16;
    i1 %18 = icmp sgt i32 %0, i32 %7;
    cbr i1 %18(prob = 0.97), ^super.header, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %19 = fsub f32 %6, f32 1.14424e+16;
    i1 %20 = fcmp ole f32 %19, f32 1e-06;
    i1 %21 = fcmp oge f32 %19, f32 -1e-06;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %23 = add i32 %7, i32 4;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.89), ^while.body1, ^while.body2;
  ^b1:
    i32 %25 = phi [^while.body, i32 %7] [^while.body2, i32 %66];
    cbr i1 %1(prob = 0.97), ^super.header1, ^b2;
  ^while.body1:
    i32 %26 = phi [^super.header, i32 %23] [^while.body1, i32 %51];
    i32 %27 = phi [^super.header, i32 %7] [^while.body1, i32 %26];
    f32 %28 = s2f i32 %27 to f32;
    f32 %29 = fadd f32 %17, f32 %28;
    f32* %30 = getelementptr &([4096 * f32]* %2)[i64 0][i32 %27];
    store f32* %30 with f32 %29;
    f32 %31 = fadd f32 %15, f32 %28;
    f32* %32 = getelementptr &([4096 * f32]* %4)[i64 0][i32 %27];
    store f32* %32 with f32 %31;
    i32 %33 = add i32 %27, i32 1;
    f32 %34 = s2f i32 %33 to f32;
    f32 %35 = fadd f32 %17, f32 %34;
    f32* %36 = getelementptr &(f32* %30)[i64 1];
    store f32* %36 with f32 %35;
    f32 %37 = fadd f32 %15, f32 %34;
    f32* %38 = getelementptr &(f32* %32)[i64 1];
    store f32* %38 with f32 %37;
    i32 %39 = add i32 %27, i32 2;
    f32 %40 = s2f i32 %39 to f32;
    f32 %41 = fadd f32 %17, f32 %40;
    f32* %42 = getelementptr &(f32* %30)[i64 2];
    store f32* %42 with f32 %41;
    f32 %43 = fadd f32 %15, f32 %40;
    f32* %44 = getelementptr &(f32* %32)[i64 2];
    store f32* %44 with f32 %43;
    i32 %45 = add i32 %27, i32 3;
    f32 %46 = s2f i32 %45 to f32;
    f32 %47 = fadd f32 %17, f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 3];
    store f32* %48 with f32 %47;
    f32 %49 = fadd f32 %15, f32 %46;
    f32* %50 = getelementptr &(f32* %32)[i64 3];
    store f32* %50 with f32 %49;
    i32 %51 = add i32 %26, i32 4;
    i1 %52 = icmp sgt i32 %0, i32 %51;
    cbr i1 %52(prob = 0.89), ^while.body1, ^while.body2;
  ^b2:
    f32 %53 = phi [^b1, f32 0] [^while.body4, f32 %100];
    f32 %54 = fadd f32 %6, f32 %53;
    i32 %55 = add i32 %10, i32 1;
    ubr ^while.header;
  ^super.header1:
    i32 %56 = phi [^b1, i32 0] [^while.body3, i32 %58];
    f32 %57 = phi [^b1, f32 0] [^while.body3, f32 %92];
    i32 %58 = add i32 %56, i32 4;
    i1 %59 = icmp sgt i32 %0, i32 %58;
    cbr i1 %59(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body2:
    i32 %60 = phi [^super.header, i32 %7] [^while.body1, i32 %26] [^while.body2, i32 %66];
    f32 %61 = s2f i32 %60 to f32;
    f32 %62 = fadd f32 %17, f32 %61;
    f32* %63 = getelementptr &([4096 * f32]* %2)[i64 0][i32 %60];
    store f32* %63 with f32 %62;
    f32 %64 = fadd f32 %15, f32 %61;
    f32* %65 = getelementptr &([4096 * f32]* %4)[i64 0][i32 %60];
    store f32* %65 with f32 %64;
    i32 %66 = add i32 %60, i32 1;
    i1 %67 = icmp sgt i32 %0, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body2, ^b1;
  ^b3:
    i32 %68 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %68;
  ^while.body3:
    f32* %69 = getelementptr &(f32* %3)[i32 %56];
    f32 %70 = load f32* %69;
    f32* %71 = getelementptr &(f32* %5)[i32 %56];
    f32 %72 = load f32* %71;
    f32 %73 = fmul f32 %70, f32 %72;
    f32 %74 = fadd f32 %57, f32 %73;
    f32* %75 = getelementptr &(f32* %69)[i64 1];
    f32 %76 = load f32* %75;
    f32* %77 = getelementptr &(f32* %71)[i64 1];
    f32 %78 = load f32* %77;
    f32 %79 = fmul f32 %76, f32 %78;
    f32 %80 = fadd f32 %74, f32 %79;
    f32* %81 = getelementptr &(f32* %69)[i64 2];
    f32 %82 = load f32* %81;
    f32* %83 = getelementptr &(f32* %71)[i64 2];
    f32 %84 = load f32* %83;
    f32 %85 = fmul f32 %82, f32 %84;
    f32 %86 = fadd f32 %80, f32 %85;
    f32* %87 = getelementptr &(f32* %69)[i64 3];
    f32 %88 = load f32* %87;
    f32* %89 = getelementptr &(f32* %71)[i64 3];
    f32 %90 = load f32* %89;
    f32 %91 = fmul f32 %88, f32 %90;
    f32 %92 = fadd f32 %86, f32 %91;
    ubr ^super.header1;
  ^while.body4:
    i32 %93 = phi [^super.header1, i32 %56] [^while.body4, i32 %101];
    f32 %94 = phi [^super.header1, f32 %57] [^while.body4, f32 %100];
    f32* %95 = getelementptr &(f32* %3)[i32 %93];
    f32 %96 = load f32* %95;
    f32* %97 = getelementptr &(f32* %5)[i32 %93];
    f32 %98 = load f32* %97;
    f32 %99 = fmul f32 %96, f32 %98;
    f32 %100 = fadd f32 %94, f32 %99;
    i32 %101 = add i32 %93, i32 1;
    i1 %102 = icmp sgt i32 %0, i32 %101;
    cbr i1 %102(prob = 0.97), ^while.body4, ^b2;
}
internal [4096 * f32]* @y;
internal [4096 * f32]* @x;
