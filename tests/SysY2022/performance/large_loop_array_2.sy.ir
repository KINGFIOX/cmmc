internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 22);
    [4096 * f32]* %2 = ptrcast [4096 * f32]* @x to [4096 * f32]*;
    f32* %3 = getelementptr &([4096 * f32]* %2)[i64 0][i64 0];
    [4096 * f32]* %4 = ptrcast [4096 * f32]* @y to [4096 * f32]*;
    f32* %5 = getelementptr &([4096 * f32]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %6 = phi [^entry, f32 0] [^b2, f32 %51];
    i32 %7 = phi [^entry, i32 0] [^b2, i32 %26];
    f32 %8 = phi [^entry, f32 1] [^b2, f32 %15];
    f32 %9 = phi [^entry, f32 0] [^b2, f32 %17];
    i32 %10 = phi [^entry, i32 0] [^b2, i32 %52];
    i1 %11 = icmp slt i32 %10, i32 500000;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %12 = srem i32 %10, i32 10;
    i1 %13 = icmp neq i32 %12, i32 0;
    f32 %14 = fadd f32 %8, f32 0.2;
    f32 %15 = select i1 %13 ? f32 1 : f32 %14;
    f32 %16 = fadd f32 %9, f32 0.1;
    f32 %17 = select i1 %13 ? f32 0 : f32 %16;
    i1 %18 = icmp sgt i32 %0, i32 %7;
    cbr i1 %18(prob = 0.97), ^super.header, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %19 = fsub f32 %6, f32 1.14424e+16;
    i1 %20 = fcmp ole f32 %19, f32 1e-06;
    i1 %21 = fcmp oge f32 %19, f32 -1e-06;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %23 = phi [^while.body, i32 %7] [^while.body1, i32 %24];
    i32 %24 = add i32 %23, i32 4;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    cbr i1 %25(prob = 0.89), ^while.body1, ^super.header1;
  ^b1:
    i32 %26 = phi [^while.body, i32 %7] [^while.body4, i32 %114];
    cbr i1 %1(prob = 0.97), ^super.header2, ^b2;
  ^while.body1:
    f32 %27 = s2f i32 %23 to f32;
    f32 %28 = fadd f32 %17, f32 %27;
    f32* %29 = getelementptr &([4096 * f32]* %2)[i64 0][i32 %23];
    store f32* %29 with f32 %28;
    f32 %30 = fadd f32 %15, f32 %27;
    f32* %31 = getelementptr &([4096 * f32]* %4)[i64 0][i32 %23];
    store f32* %31 with f32 %30;
    i32 %32 = add i32 %23, i32 1;
    f32 %33 = s2f i32 %32 to f32;
    f32 %34 = fadd f32 %17, f32 %33;
    f32* %35 = getelementptr &(f32* %29)[i64 1];
    store f32* %35 with f32 %34;
    f32 %36 = fadd f32 %15, f32 %33;
    f32* %37 = getelementptr &(f32* %31)[i64 1];
    store f32* %37 with f32 %36;
    i32 %38 = add i32 %23, i32 2;
    f32 %39 = s2f i32 %38 to f32;
    f32 %40 = fadd f32 %17, f32 %39;
    f32* %41 = getelementptr &(f32* %29)[i64 2];
    store f32* %41 with f32 %40;
    f32 %42 = fadd f32 %15, f32 %39;
    f32* %43 = getelementptr &(f32* %31)[i64 2];
    store f32* %43 with f32 %42;
    i32 %44 = add i32 %23, i32 3;
    f32 %45 = s2f i32 %44 to f32;
    f32 %46 = fadd f32 %17, f32 %45;
    f32* %47 = getelementptr &(f32* %29)[i64 3];
    store f32* %47 with f32 %46;
    f32 %48 = fadd f32 %15, f32 %45;
    f32* %49 = getelementptr &(f32* %31)[i64 3];
    store f32* %49 with f32 %48;
    ubr ^super.header;
  ^b2:
    f32 %50 = phi [^b1, f32 0] [^while.body7, f32 %179];
    f32 %51 = fadd f32 %6, f32 %50;
    i32 %52 = add i32 %10, i32 1;
    ubr ^while.header;
  ^super.header1:
    i32 %53 = phi [^super.header, i32 %23] [^while.body2, i32 %54];
    i32 %54 = add i32 %53, i32 4;
    i1 %55 = icmp sgt i32 %0, i32 %54;
    cbr i1 %55(prob = 0.89), ^while.body2, ^while.body4;
  ^super.header2:
    f32 %56 = phi [^b1, f32 0] [^while.body3, f32 %107];
    i32 %57 = phi [^b1, i32 0] [^while.body3, i32 %58];
    i32 %58 = add i32 %57, i32 4;
    i1 %59 = icmp sgt i32 %0, i32 %58;
    cbr i1 %59(prob = 0.89), ^while.body3, ^super.header3;
  ^b3:
    i32 %60 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %60;
  ^while.body2:
    f32 %61 = s2f i32 %53 to f32;
    f32 %62 = fadd f32 %17, f32 %61;
    f32* %63 = getelementptr &([4096 * f32]* %2)[i64 0][i32 %53];
    store f32* %63 with f32 %62;
    f32 %64 = fadd f32 %15, f32 %61;
    f32* %65 = getelementptr &([4096 * f32]* %4)[i64 0][i32 %53];
    store f32* %65 with f32 %64;
    i32 %66 = add i32 %53, i32 1;
    f32 %67 = s2f i32 %66 to f32;
    f32 %68 = fadd f32 %17, f32 %67;
    f32* %69 = getelementptr &(f32* %63)[i64 1];
    store f32* %69 with f32 %68;
    f32 %70 = fadd f32 %15, f32 %67;
    f32* %71 = getelementptr &(f32* %65)[i64 1];
    store f32* %71 with f32 %70;
    i32 %72 = add i32 %53, i32 2;
    f32 %73 = s2f i32 %72 to f32;
    f32 %74 = fadd f32 %17, f32 %73;
    f32* %75 = getelementptr &(f32* %63)[i64 2];
    store f32* %75 with f32 %74;
    f32 %76 = fadd f32 %15, f32 %73;
    f32* %77 = getelementptr &(f32* %65)[i64 2];
    store f32* %77 with f32 %76;
    i32 %78 = add i32 %53, i32 3;
    f32 %79 = s2f i32 %78 to f32;
    f32 %80 = fadd f32 %17, f32 %79;
    f32* %81 = getelementptr &(f32* %63)[i64 3];
    store f32* %81 with f32 %80;
    f32 %82 = fadd f32 %15, f32 %79;
    f32* %83 = getelementptr &(f32* %65)[i64 3];
    store f32* %83 with f32 %82;
    ubr ^super.header1;
  ^while.body3:
    f32* %84 = getelementptr &(f32* %3)[i32 %57];
    f32 %85 = load f32* %84;
    f32* %86 = getelementptr &(f32* %5)[i32 %57];
    f32 %87 = load f32* %86;
    f32 %88 = fmul f32 %85, f32 %87;
    f32 %89 = fadd f32 %56, f32 %88;
    f32* %90 = getelementptr &(f32* %84)[i64 1];
    f32 %91 = load f32* %90;
    f32* %92 = getelementptr &(f32* %86)[i64 1];
    f32 %93 = load f32* %92;
    f32 %94 = fmul f32 %91, f32 %93;
    f32 %95 = fadd f32 %89, f32 %94;
    f32* %96 = getelementptr &(f32* %84)[i64 2];
    f32 %97 = load f32* %96;
    f32* %98 = getelementptr &(f32* %86)[i64 2];
    f32 %99 = load f32* %98;
    f32 %100 = fmul f32 %97, f32 %99;
    f32 %101 = fadd f32 %95, f32 %100;
    f32* %102 = getelementptr &(f32* %84)[i64 3];
    f32 %103 = load f32* %102;
    f32* %104 = getelementptr &(f32* %86)[i64 3];
    f32 %105 = load f32* %104;
    f32 %106 = fmul f32 %103, f32 %105;
    f32 %107 = fadd f32 %101, f32 %106;
    ubr ^super.header2;
  ^while.body4:
    i32 %108 = phi [^super.header1, i32 %53] [^while.body4, i32 %114];
    f32 %109 = s2f i32 %108 to f32;
    f32 %110 = fadd f32 %17, f32 %109;
    f32* %111 = getelementptr &([4096 * f32]* %2)[i64 0][i32 %108];
    store f32* %111 with f32 %110;
    f32 %112 = fadd f32 %15, f32 %109;
    f32* %113 = getelementptr &([4096 * f32]* %4)[i64 0][i32 %108];
    store f32* %113 with f32 %112;
    i32 %114 = add i32 %108, i32 1;
    i1 %115 = icmp sgt i32 %0, i32 %114;
    cbr i1 %115(prob = 0.97), ^while.body4, ^b1;
  ^super.header3:
    f32 %116 = phi [^super.header2, f32 %56] [^while.body5, f32 %143];
    i32 %117 = phi [^super.header2, i32 %57] [^while.body5, i32 %118];
    i32 %118 = add i32 %117, i32 4;
    i1 %119 = icmp sgt i32 %0, i32 %118;
    cbr i1 %119(prob = 0.89), ^while.body5, ^super.header4;
  ^while.body5:
    f32* %120 = getelementptr &(f32* %3)[i32 %117];
    f32 %121 = load f32* %120;
    f32* %122 = getelementptr &(f32* %5)[i32 %117];
    f32 %123 = load f32* %122;
    f32 %124 = fmul f32 %121, f32 %123;
    f32 %125 = fadd f32 %116, f32 %124;
    f32* %126 = getelementptr &(f32* %120)[i64 1];
    f32 %127 = load f32* %126;
    f32* %128 = getelementptr &(f32* %122)[i64 1];
    f32 %129 = load f32* %128;
    f32 %130 = fmul f32 %127, f32 %129;
    f32 %131 = fadd f32 %125, f32 %130;
    f32* %132 = getelementptr &(f32* %120)[i64 2];
    f32 %133 = load f32* %132;
    f32* %134 = getelementptr &(f32* %122)[i64 2];
    f32 %135 = load f32* %134;
    f32 %136 = fmul f32 %133, f32 %135;
    f32 %137 = fadd f32 %131, f32 %136;
    f32* %138 = getelementptr &(f32* %120)[i64 3];
    f32 %139 = load f32* %138;
    f32* %140 = getelementptr &(f32* %122)[i64 3];
    f32 %141 = load f32* %140;
    f32 %142 = fmul f32 %139, f32 %141;
    f32 %143 = fadd f32 %137, f32 %142;
    ubr ^super.header3;
  ^super.header4:
    f32 %144 = phi [^super.header3, f32 %116] [^while.body6, f32 %171];
    i32 %145 = phi [^super.header3, i32 %117] [^while.body6, i32 %146];
    i32 %146 = add i32 %145, i32 4;
    i1 %147 = icmp sgt i32 %0, i32 %146;
    cbr i1 %147(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    f32* %148 = getelementptr &(f32* %3)[i32 %145];
    f32 %149 = load f32* %148;
    f32* %150 = getelementptr &(f32* %5)[i32 %145];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 %149, f32 %151;
    f32 %153 = fadd f32 %144, f32 %152;
    f32* %154 = getelementptr &(f32* %148)[i64 1];
    f32 %155 = load f32* %154;
    f32* %156 = getelementptr &(f32* %150)[i64 1];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %155, f32 %157;
    f32 %159 = fadd f32 %153, f32 %158;
    f32* %160 = getelementptr &(f32* %148)[i64 2];
    f32 %161 = load f32* %160;
    f32* %162 = getelementptr &(f32* %150)[i64 2];
    f32 %163 = load f32* %162;
    f32 %164 = fmul f32 %161, f32 %163;
    f32 %165 = fadd f32 %159, f32 %164;
    f32* %166 = getelementptr &(f32* %148)[i64 3];
    f32 %167 = load f32* %166;
    f32* %168 = getelementptr &(f32* %150)[i64 3];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %167, f32 %169;
    f32 %171 = fadd f32 %165, f32 %170;
    ubr ^super.header4;
  ^while.body7:
    f32 %172 = phi [^super.header4, f32 %144] [^while.body7, f32 %179];
    i32 %173 = phi [^super.header4, i32 %145] [^while.body7, i32 %180];
    f32* %174 = getelementptr &(f32* %3)[i32 %173];
    f32 %175 = load f32* %174;
    f32* %176 = getelementptr &(f32* %5)[i32 %173];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %175, f32 %177;
    f32 %179 = fadd f32 %172, f32 %178;
    i32 %180 = add i32 %173, i32 1;
    i1 %181 = icmp sgt i32 %0, i32 %180;
    cbr i1 %181(prob = 0.97), ^while.body7, ^b2;
}
internal [4096 * f32]* @y;
internal [4096 * f32]* @x;
