internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * i32]* %return_a = alloc [512 * i32];
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
  ^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %19];
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
  ^b:
    i1 %3 = scmp neq i32 %1, i32 60;
    ubr ^b1;
  ^b1:
    i1 %4 = phi [^while.header, i1 false] [^b, i1 %3];
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
  ^b2:
    i1 %5 = scmp neq i32 %1, i32 43;
    ubr ^b3;
  ^b3:
    i1 %6 = phi [^b1, i1 false] [^b2, i1 %5];
    cbr i1 %6(prob = 0.5), ^b4, ^b5;
  ^b4:
    i1 %7 = scmp neq i32 %1, i32 45;
    ubr ^b5;
  ^b5:
    i1 %8 = phi [^b3, i1 false] [^b4, i1 %7];
    cbr i1 %8(prob = 0.5), ^b6, ^b7;
  ^b6:
    i1 %9 = scmp neq i32 %1, i32 91;
    ubr ^b7;
  ^b7:
    i1 %10 = phi [^b5, i1 false] [^b6, i1 %9];
    cbr i1 %10(prob = 0.5), ^b8, ^b9;
  ^b8:
    i1 %11 = scmp neq i32 %1, i32 93;
    ubr ^b9;
  ^b9:
    i1 %12 = phi [^b7, i1 false] [^b8, i1 %11];
    cbr i1 %12(prob = 0.5), ^b10, ^b11;
  ^b10:
    i1 %13 = scmp neq i32 %1, i32 46;
    ubr ^b11;
  ^b11:
    i1 %14 = phi [^b9, i1 false] [^b10, i1 %13];
    cbr i1 %14(prob = 0.5), ^b12, ^b13;
  ^b12:
    i1 %15 = scmp neq i32 %1, i32 44;
    ubr ^b13;
  ^b13:
    i1 %16 = phi [^b11, i1 false] [^b12, i1 %15];
    cbr i1 %16(prob = 0.5), ^b14, ^b15;
  ^b14:
    i1 %17 = scmp neq i32 %1, i32 35;
    ubr ^b15;
  ^b15:
    i1 %18 = phi [^b13, i1 false] [^b14, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body, ^entry1;
  ^while.body:
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header;
  ^entry1:
    [65536 * i32]* %20 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %21 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    i1 %22 = scmp neq i32 %1, i32 35;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b16;
  ^while.body1:
    i32 %23 = phi [^entry1, i32 0] [^while.body6, i32 %116];
    i32 %24 = phi [^entry1, i32 %1] [^while.body6, i32 %34];
    i32* %25 = getelementptr &([65536 * i32]* %20)[i64 0][i32 %23];
    store i32* %25 with i32 %24;
    i32 %26 = call () -> i32 @getch();
    ubr ^while.header1;
  ^b16:
    i32 %27 = phi [^entry1, i32 0] [^while.body6, i32 %116];
    i32 %28 = call () -> i32 @getch();
    i1 %29 = scmp neq i32 %28, i32 105;
    cbr i1 %29(prob = 0.5), ^entry2, ^b17;
  ^entry2:
    i32 %30 = phi [^b16, i32 0] [^while.header2, i32 %32];
    call (i32) -> void @starttime(i32 116);
    i32* %31 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    ubr ^b19;
  ^b17:
    i32 %32 = call () -> i32 @getint();
    i32 %33 = call () -> i32 @getch();
    ubr ^while.header2;
  ^while.header1:
    i32 %34 = phi [^while.body1, i32 %26] [^while.body5, i32 %114];
    i1 %35 = scmp neq i32 %34, i32 62;
    cbr i1 %35(prob = 0.5), ^b18, ^b20;
  ^b18:
    i1 %36 = scmp neq i32 %34, i32 60;
    ubr ^b20;
  ^b19:
    i64 %37 = phi [^entry2, i64 0] [^b19, i64 %54];
    i32* %38 = getelementptr &(i32* %31)[i64 %37];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %38)[i64 1];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %38)[i64 2];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %38)[i64 3];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %38)[i64 4];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %38)[i64 5];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %38)[i64 6];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %38)[i64 7];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %38)[i64 8];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %38)[i64 9];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %38)[i64 10];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %38)[i64 11];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %38)[i64 12];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %38)[i64 13];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %38)[i64 14];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %38)[i64 15];
    store i32* %53 with i32 0;
    i64 %54 = add i64 %37, i64 16;
    i1 %55 = scmp lt i64 %54, i64 512;
    cbr i1 %55(prob = 0.97), ^b19, ^entry3;
  ^b20:
    i1 %56 = phi [^while.header1, i1 false] [^b18, i1 %36];
    cbr i1 %56(prob = 0.5), ^b21, ^b22;
  ^while.header2:
    i32 %57 = phi [^b17, i32 0] [^while.body2, i32 %62];
    i1 %58 = scmp lt i32 %57, i32 %32;
    cbr i1 %58(prob = 0.97), ^while.body2, ^entry2;
  ^b21:
    i1 %59 = scmp neq i32 %34, i32 43;
    ubr ^b22;
  ^while.body2:
    i32 %60 = call () -> i32 @getch();
    i32* %61 = getelementptr &([65536 * i32]* %21)[i64 0][i32 %57];
    store i32* %61 with i32 %60;
    i32 %62 = add i32 %57, i32 1;
    ubr ^while.header2;
  ^entry3:
    [65536 * i32]* %63 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header3;
  ^b22:
    i1 %64 = phi [^b20, i1 false] [^b21, i1 %59];
    cbr i1 %64(prob = 0.5), ^b23, ^b24;
  ^b23:
    i1 %65 = scmp neq i32 %34, i32 45;
    ubr ^b24;
  ^while.header3:
    i32 %66 = phi [^entry3, i32 0] [^b29, i32 %89];
    i32 %67 = phi [^entry3, i32 0] [^b29, i32 %90];
    i32 %68 = phi [^entry3, i32 0] [^b29, i32 %91];
    i32 %69 = phi [^entry3, i32 0] [^b29, i32 %92];
    i32 %70 = phi [^entry3, i32 0] [^b29, i32 %94];
    i1 %71 = scmp lt i32 %70, i32 %27;
    cbr i1 %71(prob = 0.97), ^while.body3, ^entry4;
  ^b24:
    i1 %72 = phi [^b22, i1 false] [^b23, i1 %65];
    cbr i1 %72(prob = 0.5), ^b25, ^b26;
  ^b25:
    i1 %73 = scmp neq i32 %34, i32 91;
    ubr ^b26;
  ^while.body3:
    i32* %74 = getelementptr &([65536 * i32]* %20)[i64 0][i32 %70];
    i32 %75 = load i32* %74;
    i1 %76 = scmp eq i32 %75, i32 62;
    cbr i1 %76(prob = 0.5), ^if.then, ^if.else;
  ^entry4:
    call (i32) -> void @stoptime(i32 118);
    [65536 * i32]* %77 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i1 %78 = scmp gt i32 %66, i32 0;
    cbr i1 %78(prob = 0.97), ^while.body4, ^entry5;
  ^b26:
    i1 %79 = phi [^b24, i1 false] [^b25, i1 %73];
    cbr i1 %79(prob = 0.5), ^b27, ^b28;
  ^if.then:
    i32 %80 = add i32 %69, i32 1;
    ubr ^b29;
  ^b27:
    i1 %81 = scmp neq i32 %34, i32 93;
    ubr ^b28;
  ^if.else:
    i1 %82 = scmp eq i32 %75, i32 60;
    cbr i1 %82(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body4:
    i32 %83 = phi [^entry4, i32 0] [^while.body4, i32 %86];
    i32* %84 = getelementptr &([65536 * i32]* %77)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    call (i32) -> void @putch(i32 %85);
    i32 %86 = add i32 %83, i32 1;
    i1 %87 = scmp lt i32 %86, i32 %66;
    cbr i1 %87(prob = 0.97), ^while.body4, ^entry5;
  ^b28:
    i1 %88 = phi [^b26, i1 false] [^b27, i1 %81];
    cbr i1 %88(prob = 0.5), ^b30, ^b31;
  ^entry5:
    ret i32 0;
  ^b29:
    i32 %89 = phi [^if.then, i32 %66] [^if.then1, i32 %66] [^if.then2, i32 %66] [^if.then3, i32 %66] [^if.then5, i32 %66] [^while.header4, i32 %66] [^if.then7, i32 %66] [^if.else6, i32 %66] [^if.then8, i32 %135] [^if.else7, i32 %66] [^if.then12, i32 %66] [^if.else8, i32 %66];
    i32 %90 = phi [^if.then, i32 %67] [^if.then1, i32 %67] [^if.then2, i32 %67] [^if.then3, i32 %67] [^if.then5, i32 %67] [^while.header4, i32 %67] [^if.then7, i32 %67] [^if.else6, i32 %67] [^if.then8, i32 %67] [^if.else7, i32 %67] [^if.then12, i32 %67] [^if.else8, i32 %150];
    i32 %91 = phi [^if.then, i32 %68] [^if.then1, i32 %68] [^if.then2, i32 %68] [^if.then3, i32 %68] [^if.then5, i32 %119] [^while.header4, i32 %68] [^if.then7, i32 %127] [^if.else6, i32 %68] [^if.then8, i32 %68] [^if.else7, i32 %68] [^if.then12, i32 %68] [^if.else8, i32 %68];
    i32 %92 = phi [^if.then, i32 %80] [^if.then1, i32 %95] [^if.then2, i32 %69] [^if.then3, i32 %69] [^if.then5, i32 %69] [^while.header4, i32 %69] [^if.then7, i32 %69] [^if.else6, i32 %69] [^if.then8, i32 %69] [^if.else7, i32 %69] [^if.then12, i32 %69] [^if.else8, i32 %69];
    i32 %93 = phi [^if.then, i32 %70] [^if.then1, i32 %70] [^if.then2, i32 %70] [^if.then3, i32 %70] [^if.then5, i32 %70] [^while.header4, i32 %124] [^if.then7, i32 %70] [^if.else6, i32 %130] [^if.then8, i32 %70] [^if.else7, i32 %70] [^if.then12, i32 %70] [^if.else8, i32 %70];
    i32 %94 = add i32 %93, i32 1;
    ubr ^while.header3;
  ^if.then1:
    i32 %95 = add i32 %69, i32 -1;
    ubr ^b29;
  ^b30:
    i1 %96 = scmp neq i32 %34, i32 46;
    ubr ^b31;
  ^if.else1:
    i1 %97 = scmp eq i32 %75, i32 43;
    cbr i1 %97(prob = 0.5), ^if.then2, ^if.else2;
  ^b31:
    i1 %98 = phi [^b28, i1 false] [^b30, i1 %96];
    cbr i1 %98(prob = 0.5), ^b32, ^b33;
  ^if.then2:
    i32* %99 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %100, i32 1;
    store i32* %99 with i32 %101;
    ubr ^b29;
  ^b32:
    i1 %102 = scmp neq i32 %34, i32 44;
    ubr ^b33;
  ^if.else2:
    i1 %103 = scmp eq i32 %75, i32 45;
    cbr i1 %103(prob = 0.5), ^if.then3, ^if.else3;
  ^b33:
    i1 %104 = phi [^b31, i1 false] [^b32, i1 %102];
    cbr i1 %104(prob = 0.5), ^b34, ^b35;
  ^if.then3:
    i32* %105 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %106, i32 -1;
    store i32* %105 with i32 %107;
    ubr ^b29;
  ^b34:
    i1 %108 = scmp neq i32 %34, i32 35;
    ubr ^b35;
  ^if.else3:
    i1 %109 = scmp eq i32 %75, i32 91;
    cbr i1 %109(prob = 0.5), ^if.then4, ^if.else4;
  ^b35:
    i1 %110 = phi [^b33, i1 false] [^b34, i1 %108];
    cbr i1 %110(prob = 0.97), ^while.body5, ^while.body6;
  ^if.then4:
    i32* %111 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    i32 %112 = load i32* %111;
    i1 %113 = scmp neq i32 %112, i32 0;
    cbr i1 %113(prob = 0.5), ^if.then5, ^while.header4;
  ^while.body5:
    i32 %114 = call () -> i32 @getch();
    ubr ^while.header1;
  ^if.else4:
    i1 %115 = scmp eq i32 %75, i32 93;
    cbr i1 %115(prob = 0.5), ^if.then6, ^if.else5;
  ^while.body6:
    i32 %116 = add i32 %23, i32 1;
    i1 %117 = scmp neq i32 %34, i32 35;
    cbr i1 %117(prob = 0.97), ^while.body1, ^b16;
  ^if.then5:
    i32* %118 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %68];
    store i32* %118 with i32 %70;
    i32 %119 = add i32 %68, i32 1;
    ubr ^b29;
  ^if.then6:
    i32* %120 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    i32 %121 = load i32* %120;
    i1 %122 = scmp eq i32 %121, i32 0;
    cbr i1 %122(prob = 0.5), ^if.then7, ^if.else6;
  ^while.header4:
    i32 %123 = phi [^if.then4, i32 1] [^b36, i32 %142] [^if.then11, i32 %145];
    i32 %124 = phi [^if.then4, i32 %70] [^b36, i32 %136] [^if.then11, i32 %136];
    i1 %125 = scmp gt i32 %123, i32 0;
    cbr i1 %125(prob = 0.97), ^while.body7, ^b29;
  ^if.else5:
    i1 %126 = scmp eq i32 %75, i32 46;
    cbr i1 %126(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %127 = add i32 %68, i32 -1;
    ubr ^b29;
  ^if.else6:
    i32 %128 = add i32 %68, i32 -1;
    i32* %129 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    ubr ^b29;
  ^if.then8:
    [65536 * i32]* %131 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %132 = getelementptr &([65536 * i32]* %131)[i64 0][i32 %66];
    i32* %133 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    i32 %134 = load i32* %133;
    store i32* %132 with i32 %134;
    i32 %135 = add i32 %66, i32 1;
    ubr ^b29;
  ^while.body7:
    i32 %136 = add i32 %124, i32 1;
    i32* %137 = getelementptr &([65536 * i32]* %20)[i64 0][i32 %136];
    i32 %138 = load i32* %137;
    i1 %139 = scmp eq i32 %138, i32 93;
    cbr i1 %139(prob = 0.5), ^if.then9, ^b36;
  ^if.else7:
    i1 %140 = scmp eq i32 %75, i32 44;
    cbr i1 %140(prob = 0.5), ^if.then10, ^b29;
  ^if.then9:
    i32 %141 = add i32 %123, i32 -1;
    ubr ^b36;
  ^b36:
    i32 %142 = phi [^while.body7, i32 %123] [^if.then9, i32 %141];
    i1 %143 = scmp eq i32 %138, i32 91;
    cbr i1 %143(prob = 0.5), ^if.then11, ^while.header4;
  ^if.then10:
    i1 %144 = scmp ge i32 %67, i32 %30;
    cbr i1 %144(prob = 0.5), ^if.then12, ^if.else8;
  ^if.then11:
    i32 %145 = add i32 %142, i32 1;
    ubr ^while.header4;
  ^if.then12:
    i32* %146 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    store i32* %146 with i32 0;
    ubr ^b29;
  ^if.else8:
    i32* %147 = getelementptr &([65536 * i32]* %21)[i64 0][i32 %67];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &([65536 * i32]* %63)[i64 0][i32 %69];
    store i32* %149 with i32 %148;
    i32 %150 = add i32 %67, i32 1;
    ubr ^b29;
}
