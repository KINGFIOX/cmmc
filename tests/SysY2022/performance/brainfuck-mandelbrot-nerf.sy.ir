internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program, align 8 { Flexible };
internal [65536 * i32]* @tape, align 8 { Flexible };
internal [65536 * i32]* @input, align 8 { Flexible };
internal [65536 * i32]* @output, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i32 %2 = shl i32 1, i32 %1;
    i32 %3 = and i32 %2, i32 167776001;
    i1 %4 = icmp eq i32 %3, i32 0;
    i1 %5 = icmp slt i32 %1, i32 0;
    i1 %6 = or i1 %4, i1 %5;
    i32 %7 = add i32 %0, i32 -67;
    i32 %8 = shl i32 1, i32 %7;
    i32 %9 = and i32 %8, i32 83886080;
    i1 %10 = icmp eq i32 %9, i32 0;
    i1 %11 = icmp sgt i32 %7, i32 -1;
    i1 %12 = select i1 %11 ? i1 %10 : i1 %6;
    i1 %13 = icmp sgt i32 %0, i32 93;
    i1 %14 = or i1 %12, i1 %13;
    cbr i1 %14(prob = 0.984615), ^while.body, ^entry1;
  ^entry1:
    i1 %15 = icmp neq i32 %0, i32 35;
    [65536 * i32]* %16 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    [65536 * i32]* %17 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    cbr i1 %15(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %18 = phi [^entry1, i32 0] [^while.body3, i32 %112];
    i32 %19 = phi [^entry1, i32 %0] [^while.body3, i32 %27];
    i32* %20 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %18];
    store i32* %20 with i32 %19;
    ubr ^while.body2;
  ^b:
    i32 %21 = phi [^entry1, i32 0] [^while.body3, i32 %112];
    i32 %22 = call () -> i32 @getch();
    i1 %23 = icmp neq i32 %22, i32 105;
    cbr i1 %23(prob = 0.5), ^entry2, ^b1;
  ^entry2:
    i32 %24 = phi [^b, i32 0] [^b1, i32 %42] [^while.body4, i32 %42];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %25 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %26 = getelementptr &([512 * i32]* %25)[i64 0][i64 0];
    ubr ^b2;
  ^while.body2:
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -35;
    i32 %29 = shl i32 1, i32 %28;
    i32 %30 = and i32 %29, i32 167776001;
    i1 %31 = icmp eq i32 %30, i32 0;
    i1 %32 = icmp slt i32 %28, i32 0;
    i1 %33 = or i1 %31, i1 %32;
    i32 %34 = add i32 %27, i32 -67;
    i32 %35 = shl i32 1, i32 %34;
    i32 %36 = and i32 %35, i32 83886080;
    i1 %37 = icmp eq i32 %36, i32 0;
    i1 %38 = icmp sgt i32 %34, i32 -1;
    i1 %39 = select i1 %38 ? i1 %37 : i1 %33;
    i1 %40 = icmp sgt i32 %27, i32 93;
    i1 %41 = or i1 %39, i1 %40;
    cbr i1 %41(prob = 0.984615), ^while.body2, ^while.body3;
  ^b1:
    i32 %42 = call () -> i32 @getint();
    i1 %43 = icmp sgt i32 %42, i32 0;
    i32 %44 = call () -> i32 @getch();
    cbr i1 %43(prob = 0.984615), ^while.body4, ^entry2;
  ^b2:
    i64 %45 = phi [^entry2, i64 0] [^b2, i64 %110];
    i32* %46 = getelementptr &(i32* %26)[i64 %45];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %46)[i64 2];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %46)[i64 3];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %46)[i64 4];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %46)[i64 5];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %46)[i64 6];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %46)[i64 7];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %46)[i64 8];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %46)[i64 9];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %46)[i64 10];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %46)[i64 11];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %46)[i64 12];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %46)[i64 13];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %46)[i64 14];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %46)[i64 15];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %46)[i64 16];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %46)[i64 17];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %46)[i64 18];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %46)[i64 19];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %46)[i64 20];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %46)[i64 21];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %46)[i64 22];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %46)[i64 23];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %46)[i64 24];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %46)[i64 25];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %46)[i64 26];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %46)[i64 27];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %46)[i64 28];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %46)[i64 29];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %46)[i64 30];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %46)[i64 31];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %46)[i64 32];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %46)[i64 33];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %46)[i64 34];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %46)[i64 35];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %46)[i64 36];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %46)[i64 37];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %46)[i64 38];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %46)[i64 39];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %46)[i64 40];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %46)[i64 41];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %46)[i64 42];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %46)[i64 43];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %46)[i64 44];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %46)[i64 45];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %46)[i64 46];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %46)[i64 47];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %46)[i64 48];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %46)[i64 49];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %46)[i64 50];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %46)[i64 51];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %46)[i64 52];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %46)[i64 53];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %46)[i64 54];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %46)[i64 55];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %46)[i64 56];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %46)[i64 57];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %46)[i64 58];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %46)[i64 59];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %46)[i64 60];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %46)[i64 61];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %46)[i64 62];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %46)[i64 63];
    store i32* %109 with i32 0;
    i64 %110 = add i64 %45, i64 64;
    i1 %111 = icmp slt i64 %110, i64 512;
    cbr i1 %111(prob = 0.875), ^b2, ^entry3;
  ^while.body3:
    i32 %112 = add i32 %18, i32 1;
    i1 %113 = icmp neq i32 %27, i32 35;
    cbr i1 %113(prob = 0.984615), ^while.body1, ^b;
  ^while.body4:
    i32 %114 = phi [^b1, i32 0] [^while.body4, i32 %117];
    i32 %115 = call () -> i32 @getch();
    i32* %116 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %114];
    store i32* %116 with i32 %115;
    i32 %117 = add i32 %114, i32 1;
    i1 %118 = icmp sgt i32 %42, i32 %117;
    cbr i1 %118(prob = 0.984615), ^while.body4, ^entry2;
  ^entry3:
    [65536 * i32]* %119 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %120 = phi [^entry3, i32 0] [^b3, i32 %138];
    i32 %121 = phi [^entry3, i32 0] [^b3, i32 %139];
    i32 %122 = phi [^entry3, i32 0] [^b3, i32 %140];
    i32 %123 = phi [^entry3, i32 0] [^b3, i32 %141];
    i32 %124 = phi [^entry3, i32 0] [^b3, i32 %143];
    i1 %125 = icmp sgt i32 %21, i32 %124;
    cbr i1 %125(prob = 0.984615), ^while.body5, ^entry4;
  ^while.body5:
    i32* %126 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %124];
    i32 %127 = load i32* %126;
    i1 %128 = icmp eq i32 %127, i32 62;
    cbr i1 %128(prob = 0.5), ^if.then, ^if.else;
  ^entry4:
    i1 %129 = icmp sgt i32 %120, i32 0;
    [65536 * i32]* %130 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    call (i32) -> void @stoptime(i32 118);
    cbr i1 %129(prob = 0.984615), ^while.body6, ^entry5;
  ^if.then:
    i32 %131 = add i32 %123, i32 1;
    ubr ^b3;
  ^if.else:
    i1 %132 = icmp eq i32 %127, i32 60;
    cbr i1 %132(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body6:
    i32 %133 = phi [^entry4, i32 0] [^while.body6, i32 %136];
    i32* %134 = getelementptr &([65536 * i32]* %130)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    call (i32) -> void @putch(i32 %135);
    i32 %136 = add i32 %133, i32 1;
    i1 %137 = icmp sgt i32 %120, i32 %136;
    cbr i1 %137(prob = 0.984615), ^while.body6, ^entry5;
  ^entry5:
    ret i32 0;
  ^b3:
    i32 %138 = phi [^if.then, i32 %120] [^if.then1, i32 %120] [^if.then2, i32 %120] [^if.then3, i32 %120] [^if.then5, i32 %120] [^while.body7, i32 %120] [^if.then6, i32 %120] [^if.else6, i32 %120] [^if.then7, i32 %183] [^if.else7, i32 %120] [^if.then9, i32 %120] [^if.else8, i32 %120];
    i32 %139 = phi [^if.then, i32 %121] [^if.then1, i32 %121] [^if.then2, i32 %121] [^if.then3, i32 %121] [^if.then5, i32 %121] [^while.body7, i32 %121] [^if.then6, i32 %121] [^if.else6, i32 %121] [^if.then7, i32 %121] [^if.else7, i32 %121] [^if.then9, i32 %121] [^if.else8, i32 %190];
    i32 %140 = phi [^if.then, i32 %122] [^if.then1, i32 %122] [^if.then2, i32 %122] [^if.then3, i32 %122] [^if.then5, i32 %159] [^while.body7, i32 %122] [^if.then6, i32 %175] [^if.else6, i32 %122] [^if.then7, i32 %122] [^if.else7, i32 %122] [^if.then9, i32 %122] [^if.else8, i32 %122];
    i32 %141 = phi [^if.then, i32 %131] [^if.then1, i32 %144] [^if.then2, i32 %123] [^if.then3, i32 %123] [^if.then5, i32 %123] [^while.body7, i32 %123] [^if.then6, i32 %123] [^if.else6, i32 %123] [^if.then7, i32 %123] [^if.else7, i32 %123] [^if.then9, i32 %123] [^if.else8, i32 %123];
    i32 %142 = phi [^if.then, i32 %124] [^if.then1, i32 %124] [^if.then2, i32 %124] [^if.then3, i32 %124] [^if.then5, i32 %124] [^while.body7, i32 %162] [^if.then6, i32 %124] [^if.else6, i32 %178] [^if.then7, i32 %124] [^if.else7, i32 %124] [^if.then9, i32 %124] [^if.else8, i32 %124];
    i32 %143 = add i32 %142, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %144 = add i32 %123, i32 -1;
    ubr ^b3;
  ^if.else1:
    i1 %145 = icmp eq i32 %127, i32 43;
    cbr i1 %145(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %146 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %147, i32 1;
    store i32* %146 with i32 %148;
    ubr ^b3;
  ^if.else2:
    i1 %149 = icmp eq i32 %127, i32 45;
    cbr i1 %149(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %150 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %151, i32 -1;
    store i32* %150 with i32 %152;
    ubr ^b3;
  ^if.else3:
    i1 %153 = icmp eq i32 %127, i32 91;
    cbr i1 %153(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %154 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    i32 %155 = load i32* %154;
    i1 %156 = icmp neq i32 %155, i32 0;
    cbr i1 %156(prob = 0.5), ^if.then5, ^while.body7;
  ^if.else4:
    i1 %157 = icmp eq i32 %127, i32 93;
    cbr i1 %157(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %158 = getelementptr &([512 * i32]* %25)[i64 0][i32 %122];
    store i32* %158 with i32 %124;
    i32 %159 = add i32 %122, i32 1;
    ubr ^b3;
  ^while.body7:
    i32 %160 = phi [^if.then4, i32 1] [^while.body7, i32 %170];
    i32 %161 = phi [^if.then4, i32 %124] [^while.body7, i32 %162];
    i32 %162 = add i32 %161, i32 1;
    i32* %163 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = icmp eq i32 %164, i32 93;
    i32 %166 = zext i1 %165 to i32;
    i32 %167 = sub i32 %160, i32 %166;
    i1 %168 = icmp eq i32 %164, i32 91;
    i32 %169 = zext i1 %168 to i32;
    i32 %170 = add i32 %167, i32 %169;
    i1 %171 = icmp sgt i32 %170, i32 0;
    cbr i1 %171(prob = 0.984615), ^while.body7, ^b3;
  ^if.then6:
    i32* %172 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    i32 %173 = load i32* %172;
    i1 %174 = icmp eq i32 %173, i32 0;
    i32 %175 = add i32 %122, i32 -1;
    cbr i1 %174(prob = 0.5), ^b3, ^if.else6;
  ^if.else5:
    i1 %176 = icmp eq i32 %127, i32 46;
    cbr i1 %176(prob = 0.5), ^if.then7, ^if.else7;
  ^if.else6:
    i32* %177 = getelementptr &([512 * i32]* %25)[i64 0][i32 %175];
    i32 %178 = load i32* %177;
    ubr ^b3;
  ^if.then7:
    i32* %179 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    i32 %180 = load i32* %179;
    [65536 * i32]* %181 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %182 = getelementptr &([65536 * i32]* %181)[i64 0][i32 %120];
    store i32* %182 with i32 %180;
    i32 %183 = add i32 %120, i32 1;
    ubr ^b3;
  ^if.else7:
    i1 %184 = icmp eq i32 %127, i32 44;
    cbr i1 %184(prob = 0.5), ^if.then8, ^b3;
  ^if.then8:
    i1 %185 = icmp sle i32 %24, i32 %121;
    cbr i1 %185(prob = 0.5), ^if.then9, ^if.else8;
  ^if.then9:
    i32* %186 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    store i32* %186 with i32 0;
    ubr ^b3;
  ^if.else8:
    i32* %187 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %121];
    i32 %188 = load i32* %187;
    i32* %189 = getelementptr &([65536 * i32]* %119)[i64 0][i32 %123];
    store i32* %189 with i32 %188;
    i32 %190 = add i32 %121, i32 1;
    ubr ^b3;
}
internal [512 * i32]* @return_a, align 8 { Flexible };
