internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program;
internal [65536 * i32]* @tape;
internal [65536 * i32]* @input;
internal [65536 * i32]* @output;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i32 %2 = shl i32 1, i32 %1;
    i32 %3 = and i32 %2, i32 167776001;
    i1 %4 = icmp eq i32 %3, i32 0;
    i1 %5 = icmp slt i32 %1, i32 0;
    i1 %6 = or i1 %4, i1 %5;
    i32 %7 = add i32 %0, i32 -67;
    i32 %8 = shl i32 1, i32 %7;
    i32 %9 = and i32 %8, i32 83886080;
    i1 %10 = icmp eq i32 %9, i32 0;
    i1 %11 = icmp sge i32 %7, i32 0;
    i1 %12 = select i1 %11 ? i1 %10 : i1 %6;
    i1 %13 = icmp sgt i32 %0, i32 93;
    i1 %14 = or i1 %12, i1 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %15 = call () -> i32 @getch();
    i32 %16 = add i32 %15, i32 -35;
    i32 %17 = shl i32 1, i32 %16;
    i32 %18 = and i32 %17, i32 167776001;
    i1 %19 = icmp eq i32 %18, i32 0;
    i1 %20 = icmp slt i32 %16, i32 0;
    i1 %21 = or i1 %19, i1 %20;
    i32 %22 = add i32 %15, i32 -67;
    i32 %23 = shl i32 1, i32 %22;
    i32 %24 = and i32 %23, i32 83886080;
    i1 %25 = icmp eq i32 %24, i32 0;
    i1 %26 = icmp sge i32 %22, i32 0;
    i1 %27 = select i1 %26 ? i1 %25 : i1 %21;
    i1 %28 = icmp sgt i32 %15, i32 93;
    i1 %29 = or i1 %27, i1 %28;
    cbr i1 %29(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %30 = phi [^entry, i32 %0] [^while.body, i32 %15];
    i1 %31 = icmp neq i32 %30, i32 35;
    [65536 * i32]* %32 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %33 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %34 = phi [^b, i32 0] [^b2, i32 %74];
    i32 %35 = phi [^b, i32 %30] [^b2, i32 %73];
    i32* %36 = getelementptr &([65536 * i32]* %32)[i64 0][i32 %34];
    store i32* %36 with i32 %35;
    i32 %37 = call () -> i32 @getch();
    i32 %38 = add i32 %37, i32 -35;
    i32 %39 = shl i32 1, i32 %38;
    i32 %40 = and i32 %39, i32 167776001;
    i1 %41 = icmp eq i32 %40, i32 0;
    i1 %42 = icmp slt i32 %38, i32 0;
    i1 %43 = or i1 %41, i1 %42;
    i32 %44 = add i32 %37, i32 -67;
    i32 %45 = shl i32 1, i32 %44;
    i32 %46 = and i32 %45, i32 83886080;
    i1 %47 = icmp eq i32 %46, i32 0;
    i1 %48 = icmp sge i32 %44, i32 0;
    i1 %49 = select i1 %48 ? i1 %47 : i1 %43;
    i1 %50 = icmp sgt i32 %37, i32 93;
    i1 %51 = or i1 %49, i1 %50;
    cbr i1 %51(prob = 0.97), ^while.body2, ^b2;
  ^b1:
    i32 %52 = phi [^b, i32 0] [^b2, i32 %74];
    i32 %53 = call () -> i32 @getch();
    i1 %54 = icmp neq i32 %53, i32 105;
    cbr i1 %54(prob = 0.5), ^entry1, ^b3;
  ^entry1:
    i32 %55 = phi [^b1, i32 0] [^b3, i32 %76] [^while.body3, i32 %76];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %56 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %57 = getelementptr &([512 * i32]* %56)[i64 0][i64 0];
    ubr ^b4;
  ^while.body2:
    i32 %58 = call () -> i32 @getch();
    i32 %59 = add i32 %58, i32 -35;
    i32 %60 = shl i32 1, i32 %59;
    i32 %61 = and i32 %60, i32 167776001;
    i1 %62 = icmp eq i32 %61, i32 0;
    i1 %63 = icmp slt i32 %59, i32 0;
    i1 %64 = or i1 %62, i1 %63;
    i32 %65 = add i32 %58, i32 -67;
    i32 %66 = shl i32 1, i32 %65;
    i32 %67 = and i32 %66, i32 83886080;
    i1 %68 = icmp eq i32 %67, i32 0;
    i1 %69 = icmp sge i32 %65, i32 0;
    i1 %70 = select i1 %69 ? i1 %68 : i1 %64;
    i1 %71 = icmp sgt i32 %58, i32 93;
    i1 %72 = or i1 %70, i1 %71;
    cbr i1 %72(prob = 0.97), ^while.body2, ^b2;
  ^b2:
    i32 %73 = phi [^while.body1, i32 %37] [^while.body2, i32 %58];
    i32 %74 = add i32 %34, i32 1;
    i1 %75 = icmp neq i32 %73, i32 35;
    cbr i1 %75(prob = 0.97), ^while.body1, ^b1;
  ^b3:
    i32 %76 = call () -> i32 @getint();
    i1 %77 = icmp sgt i32 %76, i32 0;
    i32 %78 = call () -> i32 @getch();
    cbr i1 %77(prob = 0.97), ^while.body3, ^entry1;
  ^b4:
    i64 %79 = phi [^entry1, i64 0] [^b4, i64 %96];
    i32* %80 = getelementptr &(i32* %57)[i64 %79];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %80)[i64 1];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %80)[i64 2];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %80)[i64 3];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %80)[i64 4];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %80)[i64 5];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %80)[i64 6];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %80)[i64 7];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %80)[i64 8];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %80)[i64 9];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %80)[i64 10];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %80)[i64 11];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %80)[i64 12];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %80)[i64 13];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %80)[i64 14];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %80)[i64 15];
    store i32* %95 with i32 0;
    i64 %96 = add i64 %79, i64 16;
    i1 %97 = icmp slt i64 %96, i64 512;
    cbr i1 %97(prob = 0.97), ^b4, ^entry2;
  ^while.body3:
    i32 %98 = phi [^b3, i32 0] [^while.body3, i32 %101];
    i32 %99 = call () -> i32 @getch();
    i32* %100 = getelementptr &([65536 * i32]* %33)[i64 0][i32 %98];
    store i32* %100 with i32 %99;
    i32 %101 = add i32 %98, i32 1;
    i1 %102 = icmp sgt i32 %76, i32 %101;
    cbr i1 %102(prob = 0.97), ^while.body3, ^entry1;
  ^entry2:
    [65536 * i32]* %103 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %104 = phi [^entry2, i32 0] [^b5, i32 %122];
    i32 %105 = phi [^entry2, i32 0] [^b5, i32 %123];
    i32 %106 = phi [^entry2, i32 0] [^b5, i32 %124];
    i32 %107 = phi [^entry2, i32 0] [^b5, i32 %125];
    i32 %108 = phi [^entry2, i32 0] [^b5, i32 %127];
    i1 %109 = icmp sgt i32 %52, i32 %108;
    cbr i1 %109(prob = 0.97), ^while.body4, ^entry3;
  ^while.body4:
    i32* %110 = getelementptr &([65536 * i32]* %32)[i64 0][i32 %108];
    i32 %111 = load i32* %110;
    i1 %112 = icmp eq i32 %111, i32 62;
    cbr i1 %112(prob = 0.5), ^if.then, ^if.else;
  ^entry3:
    call (i32) -> void @stoptime(i32 118);
    i1 %113 = icmp sgt i32 %104, i32 0;
    [65536 * i32]* %114 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %113(prob = 0.97), ^while.body5, ^entry4;
  ^if.then:
    i32 %115 = add i32 %107, i32 1;
    ubr ^b5;
  ^if.else:
    i1 %116 = icmp eq i32 %111, i32 60;
    cbr i1 %116(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body5:
    i32 %117 = phi [^entry3, i32 0] [^while.body5, i32 %120];
    i32* %118 = getelementptr &([65536 * i32]* %114)[i64 0][i32 %117];
    i32 %119 = load i32* %118;
    call (i32) -> void @putch(i32 %119);
    i32 %120 = add i32 %117, i32 1;
    i1 %121 = icmp sgt i32 %104, i32 %120;
    cbr i1 %121(prob = 0.97), ^while.body5, ^entry4;
  ^entry4:
    ret i32 0;
  ^b5:
    i32 %122 = phi [^if.then, i32 %104] [^if.then1, i32 %104] [^if.then2, i32 %104] [^if.then3, i32 %104] [^if.then5, i32 %104] [^while.header1, i32 %104] [^if.then7, i32 %104] [^if.else6, i32 %104] [^if.then8, i32 %168] [^if.else7, i32 %104] [^if.then10, i32 %104] [^if.else8, i32 %104];
    i32 %123 = phi [^if.then, i32 %105] [^if.then1, i32 %105] [^if.then2, i32 %105] [^if.then3, i32 %105] [^if.then5, i32 %143] [^while.header1, i32 %105] [^if.then7, i32 %151] [^if.else6, i32 %105] [^if.then8, i32 %105] [^if.else7, i32 %105] [^if.then10, i32 %105] [^if.else8, i32 %105];
    i32 %124 = phi [^if.then, i32 %106] [^if.then1, i32 %106] [^if.then2, i32 %106] [^if.then3, i32 %106] [^if.then5, i32 %106] [^while.header1, i32 %106] [^if.then7, i32 %106] [^if.else6, i32 %106] [^if.then8, i32 %106] [^if.else7, i32 %106] [^if.then10, i32 %106] [^if.else8, i32 %175];
    i32 %125 = phi [^if.then, i32 %115] [^if.then1, i32 %128] [^if.then2, i32 %107] [^if.then3, i32 %107] [^if.then5, i32 %107] [^while.header1, i32 %107] [^if.then7, i32 %107] [^if.else6, i32 %107] [^if.then8, i32 %107] [^if.else7, i32 %107] [^if.then10, i32 %107] [^if.else8, i32 %107];
    i32 %126 = phi [^if.then, i32 %108] [^if.then1, i32 %108] [^if.then2, i32 %108] [^if.then3, i32 %108] [^if.then5, i32 %108] [^while.header1, i32 %147] [^if.then7, i32 %108] [^if.else6, i32 %163] [^if.then8, i32 %108] [^if.else7, i32 %108] [^if.then10, i32 %108] [^if.else8, i32 %108];
    i32 %127 = add i32 %126, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %128 = add i32 %107, i32 -1;
    ubr ^b5;
  ^if.else1:
    i1 %129 = icmp eq i32 %111, i32 43;
    cbr i1 %129(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %130 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    i32 %131 = load i32* %130;
    i32 %132 = add i32 %131, i32 1;
    store i32* %130 with i32 %132;
    ubr ^b5;
  ^if.else2:
    i1 %133 = icmp eq i32 %111, i32 45;
    cbr i1 %133(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %134 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %135, i32 -1;
    store i32* %134 with i32 %136;
    ubr ^b5;
  ^if.else3:
    i1 %137 = icmp eq i32 %111, i32 91;
    cbr i1 %137(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %138 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    i32 %139 = load i32* %138;
    i1 %140 = icmp neq i32 %139, i32 0;
    cbr i1 %140(prob = 0.5), ^if.then5, ^while.header1;
  ^if.else4:
    i1 %141 = icmp eq i32 %111, i32 93;
    cbr i1 %141(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %142 = getelementptr &([512 * i32]* %56)[i64 0][i32 %105];
    store i32* %142 with i32 %108;
    i32 %143 = add i32 %105, i32 1;
    ubr ^b5;
  ^if.then6:
    i32* %144 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    i32 %145 = load i32* %144;
    i1 %146 = icmp eq i32 %145, i32 0;
    cbr i1 %146(prob = 0.5), ^if.then7, ^if.else6;
  ^while.header1:
    i32 %147 = phi [^if.then4, i32 %108] [^while.body6, i32 %152];
    i32 %148 = phi [^if.then4, i32 1] [^while.body6, i32 %160];
    i1 %149 = icmp sgt i32 %148, i32 0;
    cbr i1 %149(prob = 0.97), ^while.body6, ^b5;
  ^if.else5:
    i1 %150 = icmp eq i32 %111, i32 46;
    cbr i1 %150(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %151 = add i32 %105, i32 -1;
    ubr ^b5;
  ^while.body6:
    i32 %152 = add i32 %147, i32 1;
    i32* %153 = getelementptr &([65536 * i32]* %32)[i64 0][i32 %152];
    i32 %154 = load i32* %153;
    i1 %155 = icmp eq i32 %154, i32 93;
    i32 %156 = add i32 %148, i32 -1;
    i32 %157 = select i1 %155 ? i32 %156 : i32 %148;
    i1 %158 = icmp eq i32 %154, i32 91;
    i32 %159 = zext i1 %158 to i32;
    i32 %160 = add i32 %157, i32 %159;
    ubr ^while.header1;
  ^if.else6:
    i32 %161 = add i32 %105, i32 -1;
    i32* %162 = getelementptr &([512 * i32]* %56)[i64 0][i32 %161];
    i32 %163 = load i32* %162;
    ubr ^b5;
  ^if.then8:
    i32* %164 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    i32 %165 = load i32* %164;
    [65536 * i32]* %166 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %167 = getelementptr &([65536 * i32]* %166)[i64 0][i32 %104];
    store i32* %167 with i32 %165;
    i32 %168 = add i32 %104, i32 1;
    ubr ^b5;
  ^if.else7:
    i1 %169 = icmp eq i32 %111, i32 44;
    cbr i1 %169(prob = 0.5), ^if.then9, ^b5;
  ^if.then9:
    i1 %170 = icmp sle i32 %55, i32 %106;
    cbr i1 %170(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    i32* %171 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    store i32* %171 with i32 0;
    ubr ^b5;
  ^if.else8:
    i32* %172 = getelementptr &([65536 * i32]* %33)[i64 0][i32 %106];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &([65536 * i32]* %103)[i64 0][i32 %107];
    store i32* %174 with i32 %173;
    i32 %175 = add i32 %106, i32 1;
    ubr ^b5;
}
internal [512 * i32]* @return_a;
