internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %input_length = alloc i32;
    i32* %program_length = alloc i32;
    i32* %ip = alloc i32;
    i32* %read_hea = alloc i32;
    i32* %input_he = alloc i32;
    [512 * i32]* %return_a = alloc [512 * i32];
    store i32* %program_length with i32 0;
    store i32* %input_length with i32 0;
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 62;
    i1 %2 = scmp neq i32 %0, i32 60;
    i1 %3 = scmp neq i32 %0, i32 43;
    i1 %4 = scmp neq i32 %0, i32 45;
    i1 %5 = and i1 %1, i1 %2;
    i1 %6 = and i1 %5, i1 %3;
    i1 %7 = and i1 %6, i1 %4;
    cbr i1 %7(prob = 0.062), ^b, ^b1;
^b:
    i1 %8 = scmp neq i32 %0, i32 91;
    i1 %9 = scmp neq i32 %0, i32 93;
    i1 %10 = scmp neq i32 %0, i32 46;
    i1 %11 = scmp neq i32 %0, i32 44;
    i1 %12 = scmp neq i32 %0, i32 35;
    i1 %13 = and i1 %8, i1 %9;
    i1 %14 = and i1 %13, i1 %10;
    i1 %15 = and i1 %14, i1 %11;
    i1 %16 = and i1 %15, i1 %12;
    cbr i1 %16(prob = 0.061), ^while.body, ^b1;
^b1:
    i32 %17 = phi [^entry, i32 %0] [^b23, i32 %19] [^b22, i32 %19] [^b, i32 %0];
    i1 %18 = scmp neq i32 %17, i32 35;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b2;
^while.body:
    i32 %19 = call () -> i32 @getch();
    i1 %20 = scmp neq i32 %19, i32 62;
    cbr i1 %20(prob = 0.5), ^b3, ^b4;
^while.body1:
    i32 %21 = phi [^b1, i32 0] [^b6, i32 %55];
    i32 %22 = phi [^b1, i32 %17] [^b6, i32 %54];
    i32* %23 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    i32 %24 = call () -> i32 @getch();
    i1 %25 = scmp neq i32 %24, i32 62;
    i1 %26 = scmp neq i32 %24, i32 60;
    i1 %27 = scmp neq i32 %24, i32 43;
    i1 %28 = scmp neq i32 %24, i32 45;
    i1 %29 = and i1 %25, i1 %26;
    i1 %30 = and i1 %29, i1 %27;
    i1 %31 = and i1 %30, i1 %28;
    cbr i1 %31(prob = 0.062), ^b5, ^b6;
^b2:
    i32 %32 = call () -> i32 @getch();
    i1 %33 = scmp neq i32 %32, i32 105;
    cbr i1 %33(prob = 0.5), ^entry1, ^b7;
^b3:
    i1 %34 = scmp neq i32 %19, i32 60;
    cbr i1 %34(prob = 0.5), ^b8, ^b10;
^b4:
    i1 %35 = phi [^b8, i1 %60] [^while.body, i1 false];
    cbr i1 %35(prob = 0.5), ^b9, ^b11;
^b5:
    i1 %36 = scmp neq i32 %24, i32 91;
    i1 %37 = scmp neq i32 %24, i32 93;
    i1 %38 = scmp neq i32 %24, i32 46;
    i1 %39 = scmp neq i32 %24, i32 44;
    i1 %40 = scmp neq i32 %24, i32 35;
    i1 %41 = and i1 %36, i1 %37;
    i1 %42 = and i1 %41, i1 %38;
    i1 %43 = and i1 %42, i1 %39;
    i1 %44 = and i1 %43, i1 %40;
    cbr i1 %44(prob = 0.061), ^while.body2, ^b6;
^entry1:
    call (i32) -> void @starttime(i32 116);
    store i32* %ip with i32 0;
    store i32* %read_hea with i32 0;
    store i32* %input_he with i32 0;
    i32* %45 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %46 = ptrcast i32* %45 to i8*;
    i8* %47 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %46, i32 0, i64 2048);
    i32 %48 = load i32* %input_he;
    i32 %49 = load i32* %read_hea;
    i32 %50 = load i32* %ip;
    i32 %51 = load i32* %program_length;
    i32 %52 = load i32* %input_length;
    i1 %53 = scmp lt i32 %50, i32 %51;
    cbr i1 %53(prob = 0.97), ^while.body3, ^entry2;
^b6:
    i32 %54 = phi [^while.body2, i32 %63] [^while.body1, i32 %24] [^b26, i32 %63] [^b5, i32 %24] [^b21, i32 %63] [^b27, i32 %63];
    i32 %55 = add i32 %21, i32 1;
    store i32* %program_length with i32 %55;
    i1 %56 = scmp neq i32 %54, i32 35;
    cbr i1 %56(prob = 0.97), ^while.body1, ^b2;
^b7:
    i32 %57 = call () -> i32 @getint();
    store i32* %input_length with i32 %57;
    i32 %58 = call () -> i32 @getch();
    i1 %59 = scmp gt i32 %57, i32 0;
    cbr i1 %59(prob = 0.97), ^while.body4, ^entry1;
^b8:
    i1 %60 = scmp neq i32 %19, i32 43;
    ubr ^b4;
^b9:
    i1 %61 = scmp neq i32 %19, i32 45;
    ubr ^b10;
^b10:
    i1 %62 = phi [^b3, i1 false] [^b9, i1 %61];
    cbr i1 %62(prob = 0.5), ^b12, ^b15;
^while.body2:
    i32 %63 = call () -> i32 @getch();
    i1 %64 = scmp neq i32 %63, i32 62;
    i1 %65 = scmp neq i32 %63, i32 60;
    i1 %66 = and i1 %64, i1 %65;
    cbr i1 %66(prob = 0.25), ^b14, ^b6;
^b11:
    i1 %67 = phi [^b4, i1 false] [^b12, i1 %83];
    cbr i1 %67(prob = 0.5), ^b13, ^b16;
^while.body3:
    i32 %68 = phi [^b20, i32 %99] [^entry1, i32 0];
    i32 %69 = phi [^entry1, i32 %50] [^b20, i32 %104];
    i32 %70 = phi [^entry1, i32 %49] [^b20, i32 %100];
    i32 %71 = phi [^entry1, i32 %48] [^b20, i32 %101];
    i32 %72 = phi [^entry1, i32 0] [^b20, i32 %102];
    i32* %73 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %69];
    i32 %74 = load i32* %73;
    i1 %75 = scmp eq i32 %74, i32 62;
    cbr i1 %75(prob = 0.5), ^if.then, ^if.else;
^while.body4:
    i32 %76 = phi [^while.body4, i32 %79] [^b7, i32 0];
    i32* %77 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %76];
    i32 %78 = call () -> i32 @getch();
    store i32* %77 with i32 %78;
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = scmp lt i32 %79, i32 %57;
    cbr i1 %80(prob = 0.97), ^while.body4, ^entry1;
^entry2:
    i32 %81 = phi [^b20, i32 %99] [^entry1, i32 0];
    call (i32) -> void @stoptime(i32 118);
    i1 %82 = scmp gt i32 %81, i32 0;
    cbr i1 %82(prob = 0.97), ^while.body5, ^entry3;
^b12:
    i1 %83 = scmp neq i32 %19, i32 91;
    ubr ^b11;
^b13:
    i1 %84 = scmp neq i32 %19, i32 93;
    ubr ^b15;
^if.then:
    i32 %85 = add i32 %70, i32 1;
    ubr ^b20;
^b14:
    i1 %86 = scmp neq i32 %63, i32 43;
    cbr i1 %86(prob = 0.5), ^b19, ^b21;
^b15:
    i1 %87 = phi [^b13, i1 %84] [^b10, i1 false];
    cbr i1 %87(prob = 0.5), ^b17, ^b22;
^b16:
    i1 %88 = phi [^b11, i1 false] [^b17, i1 %95];
    cbr i1 %88(prob = 0.5), ^b18, ^b23;
^if.else:
    i1 %89 = scmp eq i32 %74, i32 60;
    cbr i1 %89(prob = 0.5), ^if.then1, ^if.else1;
^while.body5:
    i32 %90 = phi [^entry2, i32 0] [^while.body5, i32 %93];
    i32* %91 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    call (i32) -> void @putch(i32 %92);
    i32 %93 = add i32 %90, i32 1;
    i1 %94 = scmp lt i32 %93, i32 %81;
    cbr i1 %94(prob = 0.97), ^while.body5, ^entry3;
^entry3:
    ret i32 0;
^b17:
    i1 %95 = scmp neq i32 %19, i32 46;
    ubr ^b16;
^b18:
    i1 %96 = scmp neq i32 %19, i32 44;
    ubr ^b22;
^if.then1:
    i32 %97 = add i32 %70, i32 -1;
    ubr ^b20;
^b19:
    i1 %98 = scmp neq i32 %63, i32 45;
    cbr i1 %98(prob = 0.5), ^b26, ^b27;
^b20:
    i32 %99 = phi [^if.else8, i32 %68] [^if.then12, i32 %68] [^b30, i32 %68] [^if.else7, i32 %68] [^if.else6, i32 %68] [^if.then7, i32 %68] [^if.then9, i32 %151] [^if.then5, i32 %68] [^if.then3, i32 %68] [^if.then2, i32 %68] [^if.then1, i32 %68] [^if.then, i32 %68];
    i32 %100 = phi [^if.then3, i32 %70] [^if.then9, i32 %70] [^if.then1, i32 %97] [^if.then5, i32 %70] [^if.else7, i32 %70] [^if.then, i32 %85] [^b30, i32 %70] [^if.then12, i32 %70] [^if.else8, i32 %70] [^if.then2, i32 %70] [^if.else6, i32 %70] [^if.then7, i32 %70];
    i32 %101 = phi [^if.then3, i32 %71] [^if.then9, i32 %71] [^if.then1, i32 %71] [^if.then5, i32 %71] [^if.else7, i32 %71] [^if.then, i32 %71] [^b30, i32 %71] [^if.then12, i32 %71] [^if.else8, i32 %163] [^if.then2, i32 %71] [^if.else6, i32 %71] [^if.then7, i32 %71];
    i32 %102 = phi [^if.then3, i32 %72] [^if.then9, i32 %72] [^if.then1, i32 %72] [^if.then5, i32 %132] [^if.else7, i32 %72] [^if.then, i32 %72] [^b30, i32 %72] [^if.then12, i32 %72] [^if.else8, i32 %72] [^if.then2, i32 %72] [^if.else6, i32 %72] [^if.then7, i32 %143];
    i32 %103 = phi [^if.then3, i32 %69] [^if.then9, i32 %69] [^if.then1, i32 %69] [^if.then5, i32 %69] [^if.else7, i32 %69] [^if.then, i32 %69] [^b30, i32 %138] [^if.then12, i32 %69] [^if.else8, i32 %69] [^if.then2, i32 %69] [^if.else6, i32 %147] [^if.then7, i32 %69];
    i32 %104 = add i32 %103, i32 1;
    i1 %105 = scmp lt i32 %104, i32 %51;
    cbr i1 %105(prob = 0.97), ^while.body3, ^entry2;
^b21:
    i1 %106 = phi [^b14, i1 false] [^b28, i1 %122];
    cbr i1 %106(prob = 0.5), ^b24, ^b6;
^b22:
    i1 %107 = phi [^b15, i1 false] [^b18, i1 %96];
    cbr i1 %107(prob = 0.5), ^b25, ^b1;
^b23:
    i1 %108 = phi [^b25, i1 %111] [^b16, i1 false];
    cbr i1 %108(prob = 0.97), ^while.body, ^b1;
^if.else1:
    i1 %109 = scmp eq i32 %74, i32 43;
    cbr i1 %109(prob = 0.5), ^if.then2, ^if.else2;
^b24:
    i1 %110 = scmp neq i32 %63, i32 44;
    ubr ^b27;
^b25:
    i1 %111 = scmp neq i32 %19, i32 35;
    ubr ^b23;
^b26:
    i1 %112 = scmp neq i32 %63, i32 91;
    i1 %113 = scmp neq i32 %63, i32 93;
    i1 %114 = and i1 %112, i1 %113;
    cbr i1 %114(prob = 0.25), ^b28, ^b6;
^if.then2:
    i32* %115 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32 %116 = load i32* %115;
    i32 %117 = add i32 %116, i32 1;
    store i32* %115 with i32 %117;
    ubr ^b20;
^b27:
    i1 %118 = phi [^b19, i1 false] [^b24, i1 %110];
    i1 %119 = scmp neq i32 %63, i32 35;
    i1 %120 = and i1 %118, i1 %119;
    cbr i1 %120(prob = 0.48), ^while.body2, ^b6;
^if.else2:
    i1 %121 = scmp eq i32 %74, i32 45;
    cbr i1 %121(prob = 0.5), ^if.then3, ^if.else3;
^b28:
    i1 %122 = scmp neq i32 %63, i32 46;
    ubr ^b21;
^if.then3:
    i32* %123 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %124, i32 -1;
    store i32* %123 with i32 %125;
    ubr ^b20;
^if.else3:
    i1 %126 = scmp eq i32 %74, i32 91;
    cbr i1 %126(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %127 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32 %128 = load i32* %127;
    i1 %129 = scmp neq i32 %128, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then5, ^while.body6;
^if.else4:
    i1 %130 = scmp eq i32 %74, i32 93;
    cbr i1 %130(prob = 0.5), ^if.then6, ^if.else5;
^if.then5:
    i32* %131 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %72];
    store i32* %131 with i32 %69;
    i32 %132 = add i32 %72, i32 1;
    ubr ^b20;
^if.then6:
    i32* %133 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32 %134 = load i32* %133;
    i1 %135 = scmp eq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then7, ^if.else6;
^while.body6:
    i32 %136 = phi [^b30, i32 %138] [^if.then4, i32 %69];
    i32 %137 = phi [^b30, i32 %157] [^if.then4, i32 1];
    i32 %138 = add i32 %136, i32 1;
    i32* %139 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %138];
    i32 %140 = load i32* %139;
    i1 %141 = scmp eq i32 %140, i32 93;
    cbr i1 %141(prob = 0.5), ^if.then8, ^b29;
^if.else5:
    i1 %142 = scmp eq i32 %74, i32 46;
    cbr i1 %142(prob = 0.5), ^if.then9, ^if.else7;
^if.then7:
    i32 %143 = add i32 %72, i32 -1;
    ubr ^b20;
^if.then8:
    i32 %144 = add i32 %137, i32 -1;
    ubr ^b29;
^if.else6:
    i32 %145 = add i32 %72, i32 -1;
    i32* %146 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %145];
    i32 %147 = load i32* %146;
    ubr ^b20;
^if.then9:
    i32* %148 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %68];
    i32* %149 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32 %150 = load i32* %149;
    store i32* %148 with i32 %150;
    i32 %151 = add i32 %68, i32 1;
    ubr ^b20;
^b29:
    i32 %152 = phi [^if.then8, i32 %144] [^while.body6, i32 %137];
    i1 %153 = scmp eq i32 %140, i32 91;
    cbr i1 %153(prob = 0.5), ^if.then10, ^b30;
^if.else7:
    i1 %154 = scmp eq i32 %74, i32 44;
    cbr i1 %154(prob = 0.5), ^if.then11, ^b20;
^if.then10:
    i32 %155 = add i32 %152, i32 1;
    ubr ^b30;
^if.then11:
    i1 %156 = scmp ge i32 %71, i32 %52;
    cbr i1 %156(prob = 0.5), ^if.then12, ^if.else8;
^b30:
    i32 %157 = phi [^if.then10, i32 %155] [^b29, i32 %152];
    i1 %158 = scmp gt i32 %157, i32 0;
    cbr i1 %158(prob = 0.97), ^while.body6, ^b20;
^if.then12:
    i32* %159 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    store i32* %159 with i32 0;
    ubr ^b20;
^if.else8:
    i32* %160 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %70];
    i32* %161 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %71];
    i32 %162 = load i32* %161;
    store i32* %160 with i32 %162;
    i32 %163 = add i32 %71, i32 1;
    ubr ^b20;
}
