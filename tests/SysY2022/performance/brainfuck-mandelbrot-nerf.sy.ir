internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program;
internal [65536 * i32]* @tape;
internal [65536 * i32]* @input;
internal [65536 * i32]* @output;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 62;
    i1 %2 = icmp neq i32 %0, i32 60;
    i1 %3 = and i1 %1, i1 %2;
    i1 %4 = icmp neq i32 %0, i32 43;
    i1 %5 = and i1 %3, i1 %4;
    i1 %6 = icmp neq i32 %0, i32 45;
    i1 %7 = and i1 %5, i1 %6;
    i1 %8 = icmp neq i32 %0, i32 91;
    i1 %9 = and i1 %7, i1 %8;
    i1 %10 = icmp neq i32 %0, i32 93;
    i1 %11 = and i1 %9, i1 %10;
    i1 %12 = icmp neq i32 %0, i32 46;
    i1 %13 = and i1 %11, i1 %12;
    i1 %14 = icmp neq i32 %0, i32 44;
    i1 %15 = and i1 %13, i1 %14;
    i1 %16 = icmp neq i32 %0, i32 35;
    i1 %17 = and i1 %15, i1 %16;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %18 = call () -> i32 @getch();
    i1 %19 = icmp neq i32 %18, i32 62;
    i1 %20 = icmp neq i32 %18, i32 60;
    i1 %21 = and i1 %19, i1 %20;
    i1 %22 = icmp neq i32 %18, i32 43;
    i1 %23 = and i1 %21, i1 %22;
    i1 %24 = icmp neq i32 %18, i32 45;
    i1 %25 = and i1 %23, i1 %24;
    i1 %26 = icmp neq i32 %18, i32 91;
    i1 %27 = and i1 %25, i1 %26;
    i1 %28 = icmp neq i32 %18, i32 93;
    i1 %29 = and i1 %27, i1 %28;
    i1 %30 = icmp neq i32 %18, i32 46;
    i1 %31 = and i1 %29, i1 %30;
    i1 %32 = icmp neq i32 %18, i32 44;
    i1 %33 = and i1 %31, i1 %32;
    i1 %34 = icmp neq i32 %18, i32 35;
    i1 %35 = and i1 %33, i1 %34;
    cbr i1 %35(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %36 = phi [^entry, i32 %0] [^while.body, i32 %18];
    i1 %37 = icmp neq i32 %36, i32 35;
    [65536 * i32]* %38 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %39 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    cbr i1 %37(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %40 = phi [^b, i32 0] [^b2, i32 %86];
    i32 %41 = phi [^b, i32 %36] [^b2, i32 %85];
    i32* %42 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %40];
    store i32* %42 with i32 %41;
    i32 %43 = call () -> i32 @getch();
    i1 %44 = icmp neq i32 %43, i32 62;
    i1 %45 = icmp neq i32 %43, i32 60;
    i1 %46 = and i1 %44, i1 %45;
    i1 %47 = icmp neq i32 %43, i32 43;
    i1 %48 = and i1 %46, i1 %47;
    i1 %49 = icmp neq i32 %43, i32 45;
    i1 %50 = and i1 %48, i1 %49;
    i1 %51 = icmp neq i32 %43, i32 91;
    i1 %52 = and i1 %50, i1 %51;
    i1 %53 = icmp neq i32 %43, i32 93;
    i1 %54 = and i1 %52, i1 %53;
    i1 %55 = icmp neq i32 %43, i32 46;
    i1 %56 = and i1 %54, i1 %55;
    i1 %57 = icmp neq i32 %43, i32 44;
    i1 %58 = and i1 %56, i1 %57;
    i1 %59 = icmp neq i32 %43, i32 35;
    i1 %60 = and i1 %58, i1 %59;
    cbr i1 %60(prob = 0.97), ^while.body2, ^b2;
  ^b1:
    i32 %61 = phi [^b, i32 0] [^b2, i32 %86];
    i32 %62 = call () -> i32 @getch();
    i1 %63 = icmp neq i32 %62, i32 105;
    cbr i1 %63(prob = 0.5), ^entry1, ^b3;
  ^entry1:
    i32 %64 = phi [^b1, i32 0] [^b3, i32 %88] [^while.body3, i32 %88];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %65 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %66 = getelementptr &([512 * i32]* %65)[i64 0][i64 0];
    ubr ^b4;
  ^while.body2:
    i32 %67 = call () -> i32 @getch();
    i1 %68 = icmp neq i32 %67, i32 62;
    i1 %69 = icmp neq i32 %67, i32 60;
    i1 %70 = and i1 %68, i1 %69;
    i1 %71 = icmp neq i32 %67, i32 43;
    i1 %72 = and i1 %70, i1 %71;
    i1 %73 = icmp neq i32 %67, i32 45;
    i1 %74 = and i1 %72, i1 %73;
    i1 %75 = icmp neq i32 %67, i32 91;
    i1 %76 = and i1 %74, i1 %75;
    i1 %77 = icmp neq i32 %67, i32 93;
    i1 %78 = and i1 %76, i1 %77;
    i1 %79 = icmp neq i32 %67, i32 46;
    i1 %80 = and i1 %78, i1 %79;
    i1 %81 = icmp neq i32 %67, i32 44;
    i1 %82 = and i1 %80, i1 %81;
    i1 %83 = icmp neq i32 %67, i32 35;
    i1 %84 = and i1 %82, i1 %83;
    cbr i1 %84(prob = 0.97), ^while.body2, ^b2;
  ^b2:
    i32 %85 = phi [^while.body1, i32 %43] [^while.body2, i32 %67];
    i32 %86 = add i32 %40, i32 1;
    i1 %87 = icmp neq i32 %85, i32 35;
    cbr i1 %87(prob = 0.97), ^while.body1, ^b1;
  ^b3:
    i32 %88 = call () -> i32 @getint();
    i1 %89 = icmp sgt i32 %88, i32 0;
    i32 %90 = call () -> i32 @getch();
    cbr i1 %89(prob = 0.97), ^while.body3, ^entry1;
  ^b4:
    i64 %91 = phi [^entry1, i64 0] [^b4, i64 %108];
    i32* %92 = getelementptr &(i32* %66)[i64 %91];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %92)[i64 1];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %92)[i64 2];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %92)[i64 3];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %92)[i64 4];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %92)[i64 5];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %92)[i64 6];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %92)[i64 7];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %92)[i64 8];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %92)[i64 9];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %92)[i64 10];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %92)[i64 11];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %92)[i64 12];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %92)[i64 13];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %92)[i64 14];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %92)[i64 15];
    store i32* %107 with i32 0;
    i64 %108 = add i64 %91, i64 16;
    i1 %109 = icmp slt i64 %108, i64 512;
    cbr i1 %109(prob = 0.97), ^b4, ^entry2;
  ^while.body3:
    i32 %110 = phi [^b3, i32 0] [^while.body3, i32 %113];
    i32 %111 = call () -> i32 @getch();
    i32* %112 = getelementptr &([65536 * i32]* %39)[i64 0][i32 %110];
    store i32* %112 with i32 %111;
    i32 %113 = add i32 %110, i32 1;
    i1 %114 = icmp sgt i32 %88, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body3, ^entry1;
  ^entry2:
    [65536 * i32]* %115 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %116 = phi [^entry2, i32 0] [^b5, i32 %134];
    i32 %117 = phi [^entry2, i32 0] [^b5, i32 %135];
    i32 %118 = phi [^entry2, i32 0] [^b5, i32 %136];
    i32 %119 = phi [^entry2, i32 0] [^b5, i32 %137];
    i32 %120 = phi [^entry2, i32 0] [^b5, i32 %139];
    i1 %121 = icmp sgt i32 %61, i32 %120;
    cbr i1 %121(prob = 0.97), ^while.body4, ^entry3;
  ^while.body4:
    i32* %122 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %120];
    i32 %123 = load i32* %122;
    i1 %124 = icmp eq i32 %123, i32 62;
    cbr i1 %124(prob = 0.5), ^if.then, ^if.else;
  ^entry3:
    call (i32) -> void @stoptime(i32 118);
    i1 %125 = icmp sgt i32 %116, i32 0;
    [65536 * i32]* %126 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %125(prob = 0.97), ^while.body5, ^entry4;
  ^if.then:
    i32 %127 = add i32 %119, i32 1;
    ubr ^b5;
  ^if.else:
    i1 %128 = icmp eq i32 %123, i32 60;
    cbr i1 %128(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body5:
    i32 %129 = phi [^entry3, i32 0] [^while.body5, i32 %132];
    i32* %130 = getelementptr &([65536 * i32]* %126)[i64 0][i32 %129];
    i32 %131 = load i32* %130;
    call (i32) -> void @putch(i32 %131);
    i32 %132 = add i32 %129, i32 1;
    i1 %133 = icmp sgt i32 %116, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.body5, ^entry4;
  ^entry4:
    ret i32 0;
  ^b5:
    i32 %134 = phi [^if.then, i32 %116] [^if.then1, i32 %116] [^if.then2, i32 %116] [^if.then3, i32 %116] [^if.then5, i32 %116] [^while.header1, i32 %116] [^if.then7, i32 %116] [^if.else6, i32 %116] [^if.then8, i32 %180] [^if.else7, i32 %116] [^if.then10, i32 %116] [^if.else8, i32 %116];
    i32 %135 = phi [^if.then, i32 %117] [^if.then1, i32 %117] [^if.then2, i32 %117] [^if.then3, i32 %117] [^if.then5, i32 %117] [^while.header1, i32 %117] [^if.then7, i32 %117] [^if.else6, i32 %117] [^if.then8, i32 %117] [^if.else7, i32 %117] [^if.then10, i32 %117] [^if.else8, i32 %187];
    i32 %136 = phi [^if.then, i32 %118] [^if.then1, i32 %118] [^if.then2, i32 %118] [^if.then3, i32 %118] [^if.then5, i32 %155] [^while.header1, i32 %118] [^if.then7, i32 %163] [^if.else6, i32 %118] [^if.then8, i32 %118] [^if.else7, i32 %118] [^if.then10, i32 %118] [^if.else8, i32 %118];
    i32 %137 = phi [^if.then, i32 %127] [^if.then1, i32 %140] [^if.then2, i32 %119] [^if.then3, i32 %119] [^if.then5, i32 %119] [^while.header1, i32 %119] [^if.then7, i32 %119] [^if.else6, i32 %119] [^if.then8, i32 %119] [^if.else7, i32 %119] [^if.then10, i32 %119] [^if.else8, i32 %119];
    i32 %138 = phi [^if.then, i32 %120] [^if.then1, i32 %120] [^if.then2, i32 %120] [^if.then3, i32 %120] [^if.then5, i32 %120] [^while.header1, i32 %159] [^if.then7, i32 %120] [^if.else6, i32 %175] [^if.then8, i32 %120] [^if.else7, i32 %120] [^if.then10, i32 %120] [^if.else8, i32 %120];
    i32 %139 = add i32 %138, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %140 = add i32 %119, i32 -1;
    ubr ^b5;
  ^if.else1:
    i1 %141 = icmp eq i32 %123, i32 43;
    cbr i1 %141(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %142 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %143, i32 1;
    store i32* %142 with i32 %144;
    ubr ^b5;
  ^if.else2:
    i1 %145 = icmp eq i32 %123, i32 45;
    cbr i1 %145(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %146 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %147, i32 -1;
    store i32* %146 with i32 %148;
    ubr ^b5;
  ^if.else3:
    i1 %149 = icmp eq i32 %123, i32 91;
    cbr i1 %149(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %150 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    i32 %151 = load i32* %150;
    i1 %152 = icmp neq i32 %151, i32 0;
    cbr i1 %152(prob = 0.5), ^if.then5, ^while.header1;
  ^if.else4:
    i1 %153 = icmp eq i32 %123, i32 93;
    cbr i1 %153(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %154 = getelementptr &([512 * i32]* %65)[i64 0][i32 %118];
    store i32* %154 with i32 %120;
    i32 %155 = add i32 %118, i32 1;
    ubr ^b5;
  ^if.then6:
    i32* %156 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    i32 %157 = load i32* %156;
    i1 %158 = icmp eq i32 %157, i32 0;
    cbr i1 %158(prob = 0.5), ^if.then7, ^if.else6;
  ^while.header1:
    i32 %159 = phi [^if.then4, i32 %120] [^while.body6, i32 %164];
    i32 %160 = phi [^if.then4, i32 1] [^while.body6, i32 %172];
    i1 %161 = icmp sgt i32 %160, i32 0;
    cbr i1 %161(prob = 0.97), ^while.body6, ^b5;
  ^if.else5:
    i1 %162 = icmp eq i32 %123, i32 46;
    cbr i1 %162(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %163 = add i32 %118, i32 -1;
    ubr ^b5;
  ^while.body6:
    i32 %164 = add i32 %159, i32 1;
    i32* %165 = getelementptr &([65536 * i32]* %38)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i1 %167 = icmp eq i32 %166, i32 93;
    i32 %168 = add i32 %160, i32 -1;
    i32 %169 = select i1 %167 ? i32 %168 : i32 %160;
    i32 %170 = add i32 %169, i32 1;
    i1 %171 = icmp eq i32 %166, i32 91;
    i32 %172 = select i1 %171 ? i32 %170 : i32 %169;
    ubr ^while.header1;
  ^if.else6:
    i32 %173 = add i32 %118, i32 -1;
    i32* %174 = getelementptr &([512 * i32]* %65)[i64 0][i32 %173];
    i32 %175 = load i32* %174;
    ubr ^b5;
  ^if.then8:
    i32* %176 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    i32 %177 = load i32* %176;
    [65536 * i32]* %178 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %179 = getelementptr &([65536 * i32]* %178)[i64 0][i32 %116];
    store i32* %179 with i32 %177;
    i32 %180 = add i32 %116, i32 1;
    ubr ^b5;
  ^if.else7:
    i1 %181 = icmp eq i32 %123, i32 44;
    cbr i1 %181(prob = 0.5), ^if.then9, ^b5;
  ^if.then9:
    i1 %182 = icmp sle i32 %64, i32 %117;
    cbr i1 %182(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    i32* %183 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    store i32* %183 with i32 0;
    ubr ^b5;
  ^if.else8:
    i32* %184 = getelementptr &([65536 * i32]* %39)[i64 0][i32 %117];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &([65536 * i32]* %115)[i64 0][i32 %119];
    store i32* %186 with i32 %185;
    i32 %187 = add i32 %117, i32 1;
    ubr ^b5;
}
internal [512 * i32]* @return_a;
