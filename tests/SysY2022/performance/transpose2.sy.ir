internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = add i32 %3, i32 -8;
    i1 %5 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 28);
    [20000000 * i32]* %6 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %5(prob = 0.992248), ^super.header, ^while.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 -8;
    i1 %8 = icmp sgt i32 %0, i32 8;
    cbr i1 %8(prob = 0.941176), ^while.body, ^while.body1;
  ^while.header:
    i1 %9 = icmp sgt i32 %3, i32 0;
    cbr i1 %9(prob = 0.992248), ^prebody, ^while.header1;
  ^prebody:
    i32* %10 = getelementptr &([20000000 * i32]* %6)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %11 = phi [^super.header, i32 0] [^while.body, i32 %27];
    i32* %12 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %11];
    store i32* %12 with i32 %11;
    i32* %13 = getelementptr &(i32* %12)[i64 1];
    i32 %14 = add i32 %11, i32 1;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %12)[i64 2];
    i32 %16 = add i32 %11, i32 2;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %12)[i64 3];
    i32 %18 = add i32 %11, i32 3;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %12)[i64 4];
    i32 %20 = add i32 %11, i32 4;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %12)[i64 5];
    i32 %22 = add i32 %11, i32 5;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %12)[i64 6];
    i32 %24 = add i32 %11, i32 6;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %12)[i64 7];
    i32 %26 = add i32 %11, i32 7;
    store i32* %25 with i32 %26;
    i32 %27 = add i32 %11, i32 8;
    i1 %28 = icmp sgt i32 %7, i32 %27;
    cbr i1 %28(prob = 0.941176), ^while.body, ^while.body1;
  ^while.body1 {scalar}:
    i32 %29 = phi [^super.header, i32 0] [^while.body, i32 %27] [^while.body1, i32 %31];
    i32* %30 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %29];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %29, i32 1;
    i1 %32 = icmp sgt i32 %0, i32 %31;
    cbr i1 %32(prob = 0.875), ^while.body1, ^while.header;
  ^while.header1:
    cbr i1 %9(prob = 0.992248), ^super.header1, ^b;
  ^while.body2:
    i32 %33 = phi [^prebody, i32 0] [^while.body5, i32 %124];
    i32* %34 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32 %36 = sdiv i32 %0, i32 %35;
    ubr ^while.header2;
  ^super.header1:
    i1 %37 = icmp sgt i32 %3, i32 8;
    cbr i1 %37(prob = 0.941176), ^while.body3, ^while.body4;
  ^b:
    i32 %38 = phi [^while.header1, i32 0] [^while.body4, i32 %117];
    call (i32) -> void @stoptime(i32 47);
    i32 %39 = abs i32 %38;
    call (i32) -> void @putint(i32 %39);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.header2:
    i32 %40 = phi [^while.body2, i32 0] [^b1, i32 %126];
    i1 %41 = icmp sgt i32 %36, i32 %40;
    i32 %42 = mul i32 %35, i32 %40;
    cbr i1 %41(prob = 0.992248), ^while.header3, ^while.body5;
  ^while.body3:
    i32 %43 = phi [^super.header1, i32 8] [^while.body3, i32 %109];
    i32 %44 = phi [^super.header1, i32 7] [^while.body3, i32 %107];
    i32 %45 = phi [^super.header1, i32 6] [^while.body3, i32 %106];
    i32 %46 = phi [^super.header1, i32 5] [^while.body3, i32 %105];
    i32 %47 = phi [^super.header1, i32 4] [^while.body3, i32 %104];
    i32 %48 = phi [^super.header1, i32 3] [^while.body3, i32 %103];
    i32 %49 = phi [^super.header1, i32 4] [^while.body3, i32 %102];
    i32 %50 = phi [^super.header1, i32 0] [^while.body3, i32 %97];
    i32 %51 = phi [^super.header1, i32 0] [^while.body3, i32 %100];
    i32 %52 = phi [^super.header1, i32 1] [^while.body3, i32 %108];
    i32 %53 = phi [^super.header1, i32 0] [^while.body3, i32 %99];
    i32* %54 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %51];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %54)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %52, i32 %53;
    i32 %59 = mul i32 %57, i32 %58;
    i32 %60 = mul i32 %53, i32 %55;
    i32 %61 = add i32 %59, i32 %60;
    i32* %62 = getelementptr &(i32* %54)[i64 2];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %49, i32 %53;
    i32 %65 = mul i32 %63, i32 %64;
    i32 %66 = add i32 %61, i32 %65;
    i32* %67 = getelementptr &(i32* %54)[i64 3];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %48, i32 6;
    i32 %70 = add i32 %53, i32 %69;
    i32 %71 = mul i32 %68, i32 %70;
    i32 %72 = add i32 %66, i32 %71;
    i32* %73 = getelementptr &(i32* %54)[i64 4];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %47, i32 12;
    i32 %76 = add i32 %53, i32 %75;
    i32 %77 = mul i32 %74, i32 %76;
    i32 %78 = add i32 %72, i32 %77;
    i32* %79 = getelementptr &(i32* %54)[i64 5];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %46, i32 20;
    i32 %82 = add i32 %53, i32 %81;
    i32 %83 = mul i32 %80, i32 %82;
    i32 %84 = add i32 %78, i32 %83;
    i32* %85 = getelementptr &(i32* %54)[i64 6];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %45, i32 30;
    i32 %88 = add i32 %53, i32 %87;
    i32 %89 = mul i32 %86, i32 %88;
    i32 %90 = add i32 %84, i32 %89;
    i32* %91 = getelementptr &(i32* %54)[i64 7];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %44, i32 42;
    i32 %94 = add i32 %53, i32 %93;
    i32 %95 = mul i32 %92, i32 %94;
    i32 %96 = add i32 %90, i32 %95;
    i32 %97 = add i32 %50, i32 %96;
    i32 %98 = add i32 %43, i32 56;
    i32 %99 = add i32 %53, i32 %98;
    i32 %100 = add i32 %51, i32 8;
    i1 %101 = icmp sgt i32 %4, i32 %100;
    i32 %102 = add i32 %49, i32 32;
    i32 %103 = add i32 %48, i32 48;
    i32 %104 = add i32 %47, i32 64;
    i32 %105 = add i32 %46, i32 80;
    i32 %106 = add i32 %45, i32 96;
    i32 %107 = add i32 %44, i32 112;
    i32 %108 = add i32 %52, i32 16;
    i32 %109 = add i32 %43, i32 128;
    cbr i1 %101(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %110 = phi [^super.header1, i32 0] [^while.body3, i32 %99] [^while.body4, i32 %120];
    i32 %111 = phi [^super.header1, i32 1] [^while.body3, i32 %108] [^while.body4, i32 %121];
    i32 %112 = phi [^super.header1, i32 0] [^while.body3, i32 %100] [^while.body4, i32 %118];
    i32 %113 = phi [^super.header1, i32 0] [^while.body3, i32 %97] [^while.body4, i32 %117];
    i32* %114 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %112];
    i32 %115 = load i32* %114;
    i32 %116 = mul i32 %110, i32 %115;
    i32 %117 = add i32 %113, i32 %116;
    i32 %118 = add i32 %112, i32 1;
    i1 %119 = icmp sgt i32 %3, i32 %118;
    i32 %120 = add i32 %110, i32 %111;
    i32 %121 = add i32 %111, i32 2;
    cbr i1 %119(prob = 0.875), ^while.body4, ^b;
  ^while.header3:
    i32 %122 = phi [^while.header2, i32 0] [^while.body6, i32 %128] [^b2, i32 %128];
    i1 %123 = icmp sgt i32 %35, i32 %122;
    cbr i1 %123(prob = 0.992248), ^while.body6, ^b1;
  ^while.body5:
    i32 %124 = add i32 %33, i32 1;
    i1 %125 = icmp sgt i32 %3, i32 %124;
    cbr i1 %125(prob = 0.992248), ^while.body2, ^while.header1;
  ^b1:
    i32 %126 = add i32 %40, i32 1;
    ubr ^while.header2;
  ^while.body6:
    i1 %127 = icmp slt i32 %40, i32 %122;
    i32 %128 = add i32 %122, i32 1;
    cbr i1 %127(prob = 0.5), ^while.header3, ^b2;
  ^b2:
    i32 %129 = mul i32 %36, i32 %122;
    i32 %130 = add i32 %40, i32 %129;
    i32* %131 = getelementptr &(i32* %10)[i32 %130];
    i32 %132 = add i32 %42, i32 %122;
    i32* %133 = getelementptr &(i32* %10)[i32 %132];
    i32 %134 = load i32* %133;
    store i32* %131 with i32 %134;
    ubr ^while.header3;
}
