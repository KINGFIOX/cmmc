internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 28);
    i32 %4 = add i32 %3, i32 -4;
    i32 %5 = add i32 %3, i32 -20;
    i1 %6 = icmp sgt i32 %0, i32 0;
    [20000000 * i32]* %7 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %6(prob = 0.984615), ^super.header, ^prebody;
  ^prebody:
    i32* %8 = getelementptr &([20000000 * i32]* %7)[i64 0][i64 0];
    ubr ^while.body;
  ^super.header:
    i1 %9 = icmp sgt i32 %0, i32 4;
    cbr i1 %9(prob = 0.941176), ^super.header1, ^while.body1;
  ^while.body:
    i32 %10 = phi [^prebody, i32 0] [^while.body4, i32 %70];
    i32* %11 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i32 %13 = sdiv i32 %0, i32 %12;
    ubr ^while.header;
  ^super.header1:
    i32 %14 = add i32 %0, i32 -4;
    i1 %15 = icmp sgt i32 %14, i32 16;
    i32 %16 = add i32 %0, i32 -20;
    cbr i1 %15(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %17 = phi [^super.header, i32 0] [^while.body1, i32 %19] [^while.body3, i32 %63];
    i32* %18 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %17];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %17, i32 1;
    i1 %20 = icmp sgt i32 %0, i32 %19;
    cbr i1 %20(prob = 0.75), ^while.body1, ^prebody;
  ^while.body2:
    i32 %21 = phi [^super.header1, i32 0] [^while.body2, i32 %53];
    i32* %22 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %21];
    store i32* %22 with i32 %21;
    i32* %23 = getelementptr &(i32* %22)[i64 1];
    i32 %24 = add i32 %21, i32 1;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %22)[i64 2];
    i32 %26 = add i32 %21, i32 2;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %22)[i64 3];
    i32 %28 = add i32 %21, i32 3;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %22)[i64 4];
    i32 %30 = add i32 %21, i32 4;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %22)[i64 5];
    i32 %32 = add i32 %21, i32 5;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %22)[i64 6];
    i32 %34 = add i32 %21, i32 6;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %22)[i64 7];
    i32 %36 = add i32 %21, i32 7;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %22)[i64 8];
    i32 %38 = add i32 %21, i32 8;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %22)[i64 9];
    i32 %40 = add i32 %21, i32 9;
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &(i32* %22)[i64 10];
    i32 %42 = add i32 %21, i32 10;
    store i32* %41 with i32 %42;
    i32* %43 = getelementptr &(i32* %22)[i64 11];
    i32 %44 = add i32 %21, i32 11;
    store i32* %43 with i32 %44;
    i32* %45 = getelementptr &(i32* %22)[i64 12];
    i32 %46 = add i32 %21, i32 12;
    store i32* %45 with i32 %46;
    i32* %47 = getelementptr &(i32* %22)[i64 13];
    i32 %48 = add i32 %21, i32 13;
    store i32* %47 with i32 %48;
    i32* %49 = getelementptr &(i32* %22)[i64 14];
    i32 %50 = add i32 %21, i32 14;
    store i32* %49 with i32 %50;
    i32* %51 = getelementptr &(i32* %22)[i64 15];
    i32 %52 = add i32 %21, i32 15;
    store i32* %51 with i32 %52;
    i32 %53 = add i32 %21, i32 16;
    i1 %54 = icmp sgt i32 %16, i32 %53;
    cbr i1 %54(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %55 = phi [^super.header1, i32 0] [^while.body2, i32 %53] [^while.body3, i32 %63];
    i32* %56 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %55];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %56)[i64 1];
    i32 %58 = add i32 %55, i32 1;
    store i32* %57 with i32 %58;
    i32* %59 = getelementptr &(i32* %56)[i64 2];
    i32 %60 = add i32 %55, i32 2;
    store i32* %59 with i32 %60;
    i32* %61 = getelementptr &(i32* %56)[i64 3];
    i32 %62 = add i32 %55, i32 3;
    store i32* %61 with i32 %62;
    i32 %63 = add i32 %55, i32 4;
    i1 %64 = icmp sgt i32 %14, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body3, ^while.body1;
  ^while.header:
    i32 %65 = phi [^while.body, i32 0] [^b, i32 %72];
    i1 %66 = icmp sgt i32 %13, i32 %65;
    i32 %67 = mul i32 %12, i32 %65;
    cbr i1 %66(prob = 0.984615), ^while.header1, ^while.body4;
  ^while.header1:
    i32 %68 = phi [^while.header, i32 0] [^while.body5, i32 %74] [^b1, i32 %74];
    i1 %69 = icmp sgt i32 %12, i32 %68;
    cbr i1 %69(prob = 0.984615), ^while.body5, ^b;
  ^while.body4:
    i32 %70 = add i32 %10, i32 1;
    i1 %71 = icmp sgt i32 %3, i32 %70;
    cbr i1 %71(prob = 0.984615), ^while.body, ^super.header2;
  ^b:
    i32 %72 = add i32 %65, i32 1;
    ubr ^while.header;
  ^while.body5:
    i1 %73 = icmp slt i32 %65, i32 %68;
    i32 %74 = add i32 %68, i32 1;
    cbr i1 %73(prob = 0.5), ^while.header1, ^b1;
  ^super.header2:
    i1 %75 = icmp sgt i32 %3, i32 4;
    cbr i1 %75(prob = 0.941176), ^super.header3, ^while.body6;
  ^b1:
    i32 %76 = mul i32 %13, i32 %68;
    i32 %77 = add i32 %65, i32 %76;
    i32* %78 = getelementptr &(i32* %8)[i32 %77];
    i32 %79 = add i32 %67, i32 %68;
    i32* %80 = getelementptr &(i32* %8)[i32 %79];
    i32 %81 = load i32* %80;
    store i32* %78 with i32 %81;
    ubr ^while.header1;
  ^super.header3:
    i1 %82 = icmp sgt i32 %4, i32 16;
    cbr i1 %82(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.body6 {scalar}:
    i32 %83 = phi [^super.header2, i32 0] [^while.body6, i32 %93] [^while.body8, i32 %256];
    i32 %84 = phi [^super.header2, i32 1] [^while.body6, i32 %94] [^while.body8, i32 %259];
    i32 %85 = phi [^super.header2, i32 0] [^while.body6, i32 %91] [^while.body8, i32 %257];
    i32 %86 = phi [^super.header2, i32 0] [^while.body6, i32 %90] [^while.body8, i32 %253];
    i32* %87 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %85];
    i32 %88 = load i32* %87;
    i32 %89 = mul i32 %83, i32 %88;
    i32 %90 = add i32 %86, i32 %89;
    i32 %91 = add i32 %85, i32 1;
    i1 %92 = icmp sgt i32 %3, i32 %91;
    i32 %93 = add i32 %83, i32 %84;
    i32 %94 = add i32 %84, i32 2;
    cbr i1 %92(prob = 0.75), ^while.body6, ^b2;
  ^while.body7:
    i32 %95 = phi [^super.header3, i32 16] [^while.body7, i32 %226];
    i32 %96 = phi [^super.header3, i32 15] [^while.body7, i32 %224];
    i32 %97 = phi [^super.header3, i32 14] [^while.body7, i32 %223];
    i32 %98 = phi [^super.header3, i32 13] [^while.body7, i32 %222];
    i32 %99 = phi [^super.header3, i32 12] [^while.body7, i32 %221];
    i32 %100 = phi [^super.header3, i32 11] [^while.body7, i32 %220];
    i32 %101 = phi [^super.header3, i32 10] [^while.body7, i32 %219];
    i32 %102 = phi [^super.header3, i32 9] [^while.body7, i32 %218];
    i32 %103 = phi [^super.header3, i32 8] [^while.body7, i32 %217];
    i32 %104 = phi [^super.header3, i32 7] [^while.body7, i32 %216];
    i32 %105 = phi [^super.header3, i32 6] [^while.body7, i32 %215];
    i32 %106 = phi [^super.header3, i32 5] [^while.body7, i32 %214];
    i32 %107 = phi [^super.header3, i32 4] [^while.body7, i32 %213];
    i32 %108 = phi [^super.header3, i32 3] [^while.body7, i32 %212];
    i32 %109 = phi [^super.header3, i32 2] [^while.body7, i32 %211];
    i32 %110 = phi [^super.header3, i32 0] [^while.body7, i32 %208];
    i32 %111 = phi [^super.header3, i32 1] [^while.body7, i32 %225];
    i32 %112 = phi [^super.header3, i32 0] [^while.body7, i32 %209];
    i32 %113 = phi [^super.header3, i32 0] [^while.body7, i32 %206];
    i32* %114 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %112];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %114)[i64 1];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %110, i32 %111;
    i32 %119 = mul i32 %117, i32 %118;
    i32 %120 = mul i32 %110, i32 %115;
    i32 %121 = add i32 %119, i32 %120;
    i32* %122 = getelementptr &(i32* %114)[i64 2];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %109, i32 2;
    i32 %125 = add i32 %110, i32 %124;
    i32 %126 = mul i32 %123, i32 %125;
    i32 %127 = add i32 %121, i32 %126;
    i32* %128 = getelementptr &(i32* %114)[i64 3];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %108, i32 6;
    i32 %131 = add i32 %110, i32 %130;
    i32 %132 = mul i32 %129, i32 %131;
    i32 %133 = add i32 %127, i32 %132;
    i32* %134 = getelementptr &(i32* %114)[i64 4];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %107, i32 12;
    i32 %137 = add i32 %110, i32 %136;
    i32 %138 = mul i32 %135, i32 %137;
    i32 %139 = add i32 %133, i32 %138;
    i32* %140 = getelementptr &(i32* %114)[i64 5];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %106, i32 20;
    i32 %143 = add i32 %110, i32 %142;
    i32 %144 = mul i32 %141, i32 %143;
    i32 %145 = add i32 %139, i32 %144;
    i32* %146 = getelementptr &(i32* %114)[i64 6];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %105, i32 30;
    i32 %149 = add i32 %110, i32 %148;
    i32 %150 = mul i32 %147, i32 %149;
    i32 %151 = add i32 %145, i32 %150;
    i32* %152 = getelementptr &(i32* %114)[i64 7];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %104, i32 42;
    i32 %155 = add i32 %110, i32 %154;
    i32 %156 = mul i32 %153, i32 %155;
    i32 %157 = add i32 %151, i32 %156;
    i32* %158 = getelementptr &(i32* %114)[i64 8];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %103, i32 56;
    i32 %161 = add i32 %110, i32 %160;
    i32 %162 = mul i32 %159, i32 %161;
    i32 %163 = add i32 %157, i32 %162;
    i32* %164 = getelementptr &(i32* %114)[i64 9];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %102, i32 72;
    i32 %167 = add i32 %110, i32 %166;
    i32 %168 = mul i32 %165, i32 %167;
    i32 %169 = add i32 %163, i32 %168;
    i32* %170 = getelementptr &(i32* %114)[i64 10];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %101, i32 90;
    i32 %173 = add i32 %110, i32 %172;
    i32 %174 = mul i32 %171, i32 %173;
    i32 %175 = add i32 %169, i32 %174;
    i32* %176 = getelementptr &(i32* %114)[i64 11];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %100, i32 110;
    i32 %179 = add i32 %110, i32 %178;
    i32 %180 = mul i32 %177, i32 %179;
    i32 %181 = add i32 %175, i32 %180;
    i32* %182 = getelementptr &(i32* %114)[i64 12];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %99, i32 132;
    i32 %185 = add i32 %110, i32 %184;
    i32 %186 = mul i32 %183, i32 %185;
    i32 %187 = add i32 %181, i32 %186;
    i32* %188 = getelementptr &(i32* %114)[i64 13];
    i32 %189 = load i32* %188;
    i32 %190 = add i32 %98, i32 156;
    i32 %191 = add i32 %110, i32 %190;
    i32 %192 = mul i32 %189, i32 %191;
    i32 %193 = add i32 %187, i32 %192;
    i32* %194 = getelementptr &(i32* %114)[i64 14];
    i32 %195 = load i32* %194;
    i32 %196 = add i32 %97, i32 182;
    i32 %197 = add i32 %110, i32 %196;
    i32 %198 = mul i32 %195, i32 %197;
    i32 %199 = add i32 %193, i32 %198;
    i32* %200 = getelementptr &(i32* %114)[i64 15];
    i32 %201 = load i32* %200;
    i32 %202 = add i32 %96, i32 210;
    i32 %203 = add i32 %110, i32 %202;
    i32 %204 = mul i32 %201, i32 %203;
    i32 %205 = add i32 %199, i32 %204;
    i32 %206 = add i32 %113, i32 %205;
    i32 %207 = add i32 %95, i32 240;
    i32 %208 = add i32 %110, i32 %207;
    i32 %209 = add i32 %112, i32 16;
    i1 %210 = icmp sgt i32 %5, i32 %209;
    i32 %211 = add i32 %109, i32 64;
    i32 %212 = add i32 %108, i32 96;
    i32 %213 = add i32 %107, i32 128;
    i32 %214 = add i32 %106, i32 160;
    i32 %215 = add i32 %105, i32 192;
    i32 %216 = add i32 %104, i32 224;
    i32 %217 = add i32 %103, i32 256;
    i32 %218 = add i32 %102, i32 288;
    i32 %219 = add i32 %101, i32 320;
    i32 %220 = add i32 %100, i32 352;
    i32 %221 = add i32 %99, i32 384;
    i32 %222 = add i32 %98, i32 416;
    i32 %223 = add i32 %97, i32 448;
    i32 %224 = add i32 %96, i32 480;
    i32 %225 = add i32 %111, i32 32;
    i32 %226 = add i32 %95, i32 512;
    cbr i1 %210(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %227 = phi [^super.header3, i32 0] [^while.body7, i32 %206] [^while.body8, i32 %253];
    i32 %228 = phi [^super.header3, i32 0] [^while.body7, i32 %209] [^while.body8, i32 %257];
    i32 %229 = phi [^super.header3, i32 1] [^while.body7, i32 %225] [^while.body8, i32 %259];
    i32 %230 = phi [^super.header3, i32 0] [^while.body7, i32 %208] [^while.body8, i32 %256];
    i32* %231 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %228];
    i32 %232 = load i32* %231;
    i32* %233 = getelementptr &(i32* %231)[i64 1];
    i32 %234 = load i32* %233;
    i32 %235 = add i32 %229, i32 %230;
    i32 %236 = mul i32 %234, i32 %235;
    i32 %237 = mul i32 %230, i32 %232;
    i32 %238 = add i32 %236, i32 %237;
    i32 %239 = add i32 %229, i32 1;
    i32 %240 = mul i32 %239, i32 2;
    i32 %241 = add i32 %230, i32 %240;
    i32* %242 = getelementptr &(i32* %231)[i64 2];
    i32 %243 = load i32* %242;
    i32 %244 = mul i32 %241, i32 %243;
    i32 %245 = add i32 %238, i32 %244;
    i32 %246 = mul i32 %229, i32 3;
    i32 %247 = add i32 %246, i32 6;
    i32 %248 = add i32 %230, i32 %247;
    i32* %249 = getelementptr &(i32* %231)[i64 3];
    i32 %250 = load i32* %249;
    i32 %251 = mul i32 %248, i32 %250;
    i32 %252 = add i32 %245, i32 %251;
    i32 %253 = add i32 %227, i32 %252;
    i32 %254 = mul i32 %229, i32 4;
    i32 %255 = add i32 %254, i32 12;
    i32 %256 = add i32 %230, i32 %255;
    i32 %257 = add i32 %228, i32 4;
    i1 %258 = icmp sgt i32 %4, i32 %257;
    i32 %259 = add i32 %229, i32 8;
    cbr i1 %258(prob = 0.75), ^while.body8, ^while.body6;
  ^b2:
    i32 %260 = abs i32 %90;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %260);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
