internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %rowsize = alloc i32;
    i32* %colsize = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %curr = alloc i32;
    i32* %i1 = alloc i32;
    i32* %len = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    i32* %4 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %3];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^while.body, i32 %11] [^entry, i32 0];
    i32 %8 = phi [^while.body, i32 %11] [^entry, i32 0];
    i1 %9 = scmp lt i32 %8, i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %10 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %7];
    store i32* %10 with i32 %7;
    i32 %11 = add i32 %7, i32 1;
    ubr ^while.header;
^b:
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %12 = phi [^while.body4, i32 %31] [^b, i32 %5];
    i32 %13 = phi [^while.body4, i32 %32] [^b, i32 %6];
    i32 %14 = phi [^while.body4, i32 %42] [^b, i32 0];
    i32 %15 = phi [^while.body4, i32 %42] [^b, i32 0];
    i1 %16 = scmp lt i32 %15, i32 %13;
    cbr i1 %16(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %17 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    store i32* %rowsize with i32 %18;
    i32 %19 = sdiv i32 %12, i32 %18;
    store i32* %colsize with i32 %19;
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %20 = phi [^while.header1, i32 %13] [^while.body2, i32 %20];
    i32 %21 = phi [^while.header1, i32 0] [^while.body2, i32 %30];
    i32 %22 = phi [^while.header1, i32 0] [^while.body2, i32 %29];
    i32 %23 = phi [^while.header1, i32 0] [^while.body2, i32 %30];
    i1 %24 = scmp lt i32 %23, i32 %20;
    cbr i1 %24(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %25 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %21];
    i32 %26 = load i32* %25;
    i32 %27 = mul i32 %21, i32 %21;
    i32 %28 = mul i32 %27, i32 %26;
    i32 %29 = add i32 %22, i32 %28;
    i32 %30 = add i32 %21, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %31 = phi [^b3, i32 %44] [^while.body1, i32 %12];
    i32 %32 = phi [^b3, i32 %45] [^while.body1, i32 %13];
    i32 %33 = phi [^b3, i32 %46] [^while.body1, i32 %14];
    i32 %34 = phi [^b3, i32 %54] [^while.body1, i32 0];
    i32 %35 = phi [^b3, i32 %49] [^while.body1, i32 %19];
    i32 %36 = phi [^b3, i32 %50] [^while.body1, i32 %18];
    i32* %37 = phi [^b3, i32* %51] [^while.body1, i32* %4];
    i32 %38 = phi [^while.body1, i32 %19] [^b3, i32 %49];
    i32 %39 = phi [^while.body1, i32 0] [^b3, i32 %54];
    i1 %40 = scmp lt i32 %39, i32 %38;
    cbr i1 %40(prob = 0.97), ^while.body3, ^while.body4;
^b1:
    i1 %41 = scmp lt i32 %22, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then, ^b2;
^while.body3:
    store i32* %j with i32 0;
    ubr ^while.header4;
^while.body4:
    i32 %42 = add i32 %33, i32 1;
    store i32* %i1 with i32 %42;
    ubr ^while.header1;
^if.then:
    i32 %43 = neg i32 %22;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %43);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %22);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header4:
    i32 %44 = phi [^b4, i32 %72] [^if.then1, i32 %44] [^while.body3, i32 %31];
    i32 %45 = phi [^b4, i32 %73] [^if.then1, i32 %45] [^while.body3, i32 %32];
    i32 %46 = phi [^b4, i32 %74] [^if.then1, i32 %46] [^while.body3, i32 %33];
    i32 %47 = phi [^b4, i32 %79] [^if.then1, i32 %56] [^while.body3, i32 0];
    i32 %48 = phi [^b4, i32 %76] [^if.then1, i32 %48] [^while.body3, i32 %34];
    i32 %49 = phi [^b4, i32 %77] [^if.then1, i32 %49] [^while.body3, i32 %35];
    i32 %50 = phi [^b4, i32 %78] [^if.then1, i32 %50] [^while.body3, i32 %36];
    i32* %51 = phi [^b4, i32* %51] [^if.then1, i32* %51] [^while.body3, i32* %37];
    i32 %52 = phi [^while.body3, i32 0] [^if.then1, i32 %56] [^b4, i32 %79];
    i1 %53 = scmp lt i32 %52, i32 %50;
    cbr i1 %53(prob = 0.97), ^while.body5, ^b3;
^b3:
    i32 %54 = add i32 %48, i32 1;
    store i32* %i with i32 %54;
    ubr ^while.header3;
^while.body5:
    i1 %55 = scmp lt i32 %48, i32 %47;
    cbr i1 %55(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    i32 %56 = add i32 %47, i32 1;
    store i32* %j with i32 %56;
    ubr ^while.header4;
^b4:
    i32 %57 = mul i32 %50, i32 %48;
    i32 %58 = add i32 %57, i32 %47;
    i32* %59 = getelementptr &(i32* %51)[i32 %58];
    i32 %60 = load i32* %59;
    store i32* %curr with i32 %60;
    i32 %61 = mul i32 %49, i32 %47;
    i32 %62 = add i32 %61, i32 %48;
    i32* %63 = getelementptr &(i32* %51)[i32 %62];
    i32 %64 = load i32* %59;
    store i32* %63 with i32 %64;
    i32 %65 = load i32* %curr;
    i32 %66 = load i32* %j;
    i32 %67 = load i32* %i;
    i32 %68 = load i32* %rowsize;
    i32 %69 = mul i32 %68, i32 %67;
    i32 %70 = add i32 %69, i32 %66;
    i32* %71 = getelementptr &(i32* %51)[i32 %70];
    store i32* %71 with i32 %65;
    i32 %72 = load i32* %n;
    i32 %73 = load i32* %len;
    i32 %74 = load i32* %i1;
    i32 %75 = load i32* %j;
    i32 %76 = load i32* %i;
    i32 %77 = load i32* %colsize;
    i32 %78 = load i32* %rowsize;
    i32 %79 = add i32 %75, i32 1;
    store i32* %j with i32 %79;
    ubr ^while.header4;
}
