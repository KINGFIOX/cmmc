internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 28);
    [20000000 * i32]* %5 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    i32* %6 = getelementptr &([20000000 * i32]* %5)[i64 0][i64 0];
    cbr i1 %4(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %8 = add i32 %7, i32 4;
    i1 %9 = scmp gt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.89), ^while.body, ^super.header1;
  ^b:
    i1 %10 = scmp gt i32 %3, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %7];
    store i32* %11 with i32 %7;
    i32* %12 = getelementptr &(i32* %11)[i64 1];
    i32 %13 = add i32 %7, i32 1;
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %11)[i64 2];
    i32 %15 = add i32 %7, i32 2;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %11)[i64 3];
    i32 %17 = add i32 %7, i32 3;
    store i32* %16 with i32 %17;
    ubr ^super.header;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^while.body5, i32 %72];
    i32* %19 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = sdiv i32 %0, i32 %20;
    ubr ^while.header;
  ^super.header1:
    i32 %22 = phi [^super.header, i32 %7] [^while.body2, i32 %23];
    i32 %23 = add i32 %22, i32 4;
    i1 %24 = scmp gt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.89), ^while.body2, ^while.body3;
  ^b1:
    cbr i1 %10(prob = 0.97), ^super.header2, ^b2;
  ^while.body2:
    i32* %25 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %22];
    store i32* %25 with i32 %22;
    i32* %26 = getelementptr &(i32* %25)[i64 1];
    i32 %27 = add i32 %22, i32 1;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %25)[i64 2];
    i32 %29 = add i32 %22, i32 2;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %25)[i64 3];
    i32 %31 = add i32 %22, i32 3;
    store i32* %30 with i32 %31;
    ubr ^super.header1;
  ^while.header:
    i32 %32 = phi [^while.body1, i32 0] [^b3, i32 %78];
    i1 %33 = scmp gt i32 %21, i32 %32;
    i32 %34 = mul i32 %20, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.header1, ^while.body5;
  ^while.body3:
    i32 %35 = phi [^super.header1, i32 %22] [^while.body3, i32 %37];
    i32* %36 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %35];
    store i32* %36 with i32 %35;
    i32 %37 = add i32 %35, i32 1;
    i1 %38 = scmp gt i32 %0, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.body3, ^b;
  ^super.header2:
    i32 %39 = phi [^b1, i32 0] [^while.body4, i32 %69];
    i32 %40 = phi [^b1, i32 0] [^while.body4, i32 %41];
    i32 %41 = add i32 %40, i32 4;
    i1 %42 = scmp gt i32 %3, i32 %41;
    cbr i1 %42(prob = 0.89), ^while.body4, ^super.header3;
  ^b2:
    i32 %43 = phi [^b1, i32 0] [^while.body8, i32 %109];
    call (i32) -> void @stoptime(i32 47);
    i1 %44 = scmp lt i32 %43, i32 0;
    i32 %45 = neg i32 %43;
    i32 %46 = select i1 %44 ? i32 %45 : i32 %43;
    call (i32) -> void @putint(i32 %46);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body4:
    i32* %47 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %40];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %47)[i64 1];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %40, i32 1;
    i32 %52 = mul i32 %51, i32 %51;
    i32 %53 = mul i32 %50, i32 %52;
    i32 %54 = mul i32 %40, i32 %40;
    i32 %55 = mul i32 %48, i32 %54;
    i32 %56 = add i32 %39, i32 %55;
    i32 %57 = add i32 %53, i32 %56;
    i32* %58 = getelementptr &(i32* %47)[i64 2];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %40, i32 2;
    i32 %61 = mul i32 %60, i32 %60;
    i32 %62 = mul i32 %59, i32 %61;
    i32 %63 = add i32 %57, i32 %62;
    i32* %64 = getelementptr &(i32* %47)[i64 3];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %40, i32 3;
    i32 %67 = mul i32 %66, i32 %66;
    i32 %68 = mul i32 %65, i32 %67;
    i32 %69 = add i32 %63, i32 %68;
    ubr ^super.header2;
  ^while.header1:
    i32 %70 = phi [^while.header, i32 0] [^if.then, i32 %112] [^b4, i32 %119];
    i1 %71 = scmp gt i32 %20, i32 %70;
    cbr i1 %71(prob = 0.97), ^while.body7, ^b3;
  ^while.body5:
    i32 %72 = add i32 %18, i32 1;
    i1 %73 = scmp gt i32 %3, i32 %72;
    cbr i1 %73(prob = 0.97), ^while.body1, ^b1;
  ^super.header3:
    i32 %74 = phi [^super.header2, i32 %39] [^while.body6, i32 %101];
    i32 %75 = phi [^super.header2, i32 %40] [^while.body6, i32 %76];
    i32 %76 = add i32 %75, i32 4;
    i1 %77 = scmp gt i32 %3, i32 %76;
    cbr i1 %77(prob = 0.89), ^while.body6, ^while.body8;
  ^b3:
    i32 %78 = add i32 %32, i32 1;
    ubr ^while.header;
  ^while.body6:
    i32* %79 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %75];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %79)[i64 1];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %75, i32 1;
    i32 %84 = mul i32 %83, i32 %83;
    i32 %85 = mul i32 %82, i32 %84;
    i32 %86 = mul i32 %75, i32 %75;
    i32 %87 = mul i32 %80, i32 %86;
    i32 %88 = add i32 %74, i32 %87;
    i32 %89 = add i32 %85, i32 %88;
    i32* %90 = getelementptr &(i32* %79)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %75, i32 2;
    i32 %93 = mul i32 %92, i32 %92;
    i32 %94 = mul i32 %91, i32 %93;
    i32 %95 = add i32 %89, i32 %94;
    i32* %96 = getelementptr &(i32* %79)[i64 3];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %75, i32 3;
    i32 %99 = mul i32 %98, i32 %98;
    i32 %100 = mul i32 %97, i32 %99;
    i32 %101 = add i32 %95, i32 %100;
    ubr ^super.header3;
  ^while.body7:
    i1 %102 = scmp lt i32 %32, i32 %70;
    cbr i1 %102(prob = 0.5), ^if.then, ^b4;
  ^while.body8:
    i32 %103 = phi [^super.header3, i32 %74] [^while.body8, i32 %109];
    i32 %104 = phi [^super.header3, i32 %75] [^while.body8, i32 %110];
    i32* %105 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %104];
    i32 %106 = load i32* %105;
    i32 %107 = mul i32 %104, i32 %104;
    i32 %108 = mul i32 %106, i32 %107;
    i32 %109 = add i32 %103, i32 %108;
    i32 %110 = add i32 %104, i32 1;
    i1 %111 = scmp gt i32 %3, i32 %110;
    cbr i1 %111(prob = 0.97), ^while.body8, ^b2;
  ^if.then:
    i32 %112 = add i32 %70, i32 1;
    ubr ^while.header1;
  ^b4:
    i32 %113 = mul i32 %21, i32 %70;
    i32 %114 = add i32 %32, i32 %113;
    i32* %115 = getelementptr &(i32* %6)[i32 %114];
    i32 %116 = add i32 %34, i32 %70;
    i32* %117 = getelementptr &(i32* %6)[i32 %116];
    i32 %118 = load i32* %117;
    store i32* %115 with i32 %118;
    store i32* %117 with i32 %118;
    i32 %119 = add i32 %70, i32 1;
    ubr ^while.header1;
}
