internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix { Flexible };
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = add i32 %3, i32 -4;
    i1 %5 = icmp sgt i32 %0, i32 0;
    i32 %6 = add i32 %0, i32 -4;
    call (i32) -> void @starttime(i32 28);
    cbr i1 %5(prob = 0.97), ^prebody, ^while.header;
  ^prebody:
    i1 %7 = icmp sgt i32 %0, i32 4;
    [20000000 * i32]* %8 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %7(prob = 0.89), ^while.body, ^while.body1;
  ^while.header:
    i1 %9 = icmp sgt i32 %3, i32 0;
    cbr i1 %9(prob = 0.97), ^prebody1, ^while.header1;
  ^prebody1:
    [20000000 * i32]* %10 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    i32* %11 = getelementptr &([20000000 * i32]* %10)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %12 = phi [^prebody, i32 0] [^while.body, i32 %20];
    i32* %13 = getelementptr &([20000000 * i32]* %8)[i64 0][i32 %12];
    store i32* %13 with i32 %12;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    i32 %15 = add i32 %12, i32 1;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %13)[i64 2];
    i32 %17 = add i32 %12, i32 2;
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %13)[i64 3];
    i32 %19 = add i32 %12, i32 3;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %12, i32 4;
    i1 %21 = icmp sgt i32 %6, i32 %20;
    cbr i1 %21(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %22 = phi [^prebody, i32 0] [^while.body, i32 %20] [^while.body1, i32 %24];
    i32* %23 = getelementptr &([20000000 * i32]* %8)[i64 0][i32 %22];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %22, i32 1;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    cbr i1 %25(prob = 0.75), ^while.body1, ^while.header;
  ^while.header1:
    cbr i1 %9(prob = 0.97), ^prebody2, ^b;
  ^while.body2:
    i32 %26 = phi [^prebody1, i32 0] [^while.body5, i32 %86];
    i32* %27 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %26];
    i32 %28 = load i32* %27;
    i32 %29 = sdiv i32 %0, i32 %28;
    ubr ^while.header2;
  ^prebody2:
    i1 %30 = icmp sgt i32 %3, i32 4;
    [20000000 * i32]* %31 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %30(prob = 0.89), ^while.body3, ^while.body4;
  ^b:
    i32 %32 = phi [^while.header1, i32 0] [^while.body4, i32 %79];
    call (i32) -> void @stoptime(i32 47);
    i32 %33 = abs i32 %32;
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.header2:
    i32 %34 = phi [^while.body2, i32 0] [^b1, i32 %88];
    i1 %35 = icmp sgt i32 %29, i32 %34;
    i32 %36 = mul i32 %28, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.header3, ^while.body5;
  ^while.body3:
    i32 %37 = phi [^prebody2, i32 4] [^while.body3, i32 %71];
    i32 %38 = phi [^prebody2, i32 3] [^while.body3, i32 %69];
    i32 %39 = phi [^prebody2, i32 4] [^while.body3, i32 %68];
    i32 %40 = phi [^prebody2, i32 0] [^while.body3, i32 %63];
    i32 %41 = phi [^prebody2, i32 0] [^while.body3, i32 %66];
    i32 %42 = phi [^prebody2, i32 1] [^while.body3, i32 %70];
    i32 %43 = phi [^prebody2, i32 0] [^while.body3, i32 %65];
    i32* %44 = getelementptr &([20000000 * i32]* %31)[i64 0][i32 %41];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %44)[i64 1];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %42, i32 %43;
    i32 %49 = mul i32 %47, i32 %48;
    i32 %50 = mul i32 %43, i32 %45;
    i32 %51 = add i32 %49, i32 %50;
    i32* %52 = getelementptr &(i32* %44)[i64 2];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %39, i32 %43;
    i32 %55 = mul i32 %53, i32 %54;
    i32 %56 = add i32 %51, i32 %55;
    i32* %57 = getelementptr &(i32* %44)[i64 3];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %38, i32 6;
    i32 %60 = add i32 %43, i32 %59;
    i32 %61 = mul i32 %58, i32 %60;
    i32 %62 = add i32 %56, i32 %61;
    i32 %63 = add i32 %40, i32 %62;
    i32 %64 = add i32 %37, i32 12;
    i32 %65 = add i32 %43, i32 %64;
    i32 %66 = add i32 %41, i32 4;
    i1 %67 = icmp sgt i32 %4, i32 %66;
    i32 %68 = add i32 %39, i32 16;
    i32 %69 = add i32 %38, i32 24;
    i32 %70 = add i32 %42, i32 8;
    i32 %71 = add i32 %37, i32 32;
    cbr i1 %67(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %72 = phi [^prebody2, i32 0] [^while.body3, i32 %65] [^while.body4, i32 %82];
    i32 %73 = phi [^prebody2, i32 1] [^while.body3, i32 %70] [^while.body4, i32 %83];
    i32 %74 = phi [^prebody2, i32 0] [^while.body3, i32 %66] [^while.body4, i32 %80];
    i32 %75 = phi [^prebody2, i32 0] [^while.body3, i32 %63] [^while.body4, i32 %79];
    i32* %76 = getelementptr &([20000000 * i32]* %31)[i64 0][i32 %74];
    i32 %77 = load i32* %76;
    i32 %78 = mul i32 %72, i32 %77;
    i32 %79 = add i32 %75, i32 %78;
    i32 %80 = add i32 %74, i32 1;
    i1 %81 = icmp sgt i32 %3, i32 %80;
    i32 %82 = add i32 %72, i32 %73;
    i32 %83 = add i32 %73, i32 2;
    cbr i1 %81(prob = 0.75), ^while.body4, ^b;
  ^while.header3:
    i32 %84 = phi [^while.header2, i32 0] [^if.then, i32 %90] [^b2, i32 %97];
    i1 %85 = icmp sgt i32 %28, i32 %84;
    cbr i1 %85(prob = 0.97), ^while.body6, ^b1;
  ^while.body5:
    i32 %86 = add i32 %26, i32 1;
    i1 %87 = icmp sgt i32 %3, i32 %86;
    cbr i1 %87(prob = 0.97), ^while.body2, ^while.header1;
  ^b1:
    i32 %88 = add i32 %34, i32 1;
    ubr ^while.header2;
  ^while.body6:
    i1 %89 = icmp slt i32 %34, i32 %84;
    cbr i1 %89(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %90 = add i32 %84, i32 1;
    ubr ^while.header3;
  ^b2:
    i32 %91 = mul i32 %29, i32 %84;
    i32 %92 = add i32 %34, i32 %91;
    i32* %93 = getelementptr &(i32* %11)[i32 %92];
    i32 %94 = add i32 %36, i32 %84;
    i32* %95 = getelementptr &(i32* %11)[i32 %94];
    i32 %96 = load i32* %95;
    store i32* %93 with i32 %96;
    i32 %97 = add i32 %84, i32 1;
    ubr ^while.header3;
}
