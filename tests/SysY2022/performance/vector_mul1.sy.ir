internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %66];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %2)[i64 16];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %2)[i64 17];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %2)[i64 18];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %2)[i64 19];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %2)[i64 20];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %2)[i64 21];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %2)[i64 22];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %2)[i64 23];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %2)[i64 24];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %2)[i64 25];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %2)[i64 26];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %2)[i64 27];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %2)[i64 28];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %2)[i64 29];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %2)[i64 30];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %2)[i64 31];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %2)[i64 32];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %2)[i64 33];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %2)[i64 34];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %2)[i64 35];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %2)[i64 36];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %2)[i64 37];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %2)[i64 38];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %2)[i64 39];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %2)[i64 40];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %2)[i64 41];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %2)[i64 42];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %2)[i64 43];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %2)[i64 44];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %2)[i64 45];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %2)[i64 46];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %2)[i64 47];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %2)[i64 48];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %2)[i64 49];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %2)[i64 50];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %2)[i64 51];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %2)[i64 52];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %2)[i64 53];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %2)[i64 54];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %2)[i64 55];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %2)[i64 56];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %2)[i64 57];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %2)[i64 58];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %2)[i64 59];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %2)[i64 60];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %2)[i64 61];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %2)[i64 62];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %2)[i64 63];
    store f32* %65 with f32 1;
    i32 %66 = add i32 %1, i32 64;
    i1 %67 = icmp slt i32 %66, i32 99968;
    cbr i1 %67(prob = 0.99936), ^while.body, ^while.body1;
  ^while.body1:
    f32* %68 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %66];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %68)[i64 1];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %68)[i64 2];
    store f32* %70 with f32 1;
    f32* %71 = getelementptr &(f32* %68)[i64 3];
    store f32* %71 with f32 1;
    f32* %72 = getelementptr &(f32* %68)[i64 4];
    store f32* %72 with f32 1;
    f32* %73 = getelementptr &(f32* %68)[i64 5];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %68)[i64 6];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %68)[i64 7];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %68)[i64 8];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %68)[i64 9];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %68)[i64 10];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %68)[i64 11];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %68)[i64 12];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %68)[i64 13];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %68)[i64 14];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %68)[i64 15];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %68)[i64 16];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %68)[i64 17];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %68)[i64 18];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %68)[i64 19];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %68)[i64 20];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %68)[i64 21];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %68)[i64 22];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %68)[i64 23];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %68)[i64 24];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %68)[i64 25];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %68)[i64 26];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %68)[i64 27];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %68)[i64 28];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %68)[i64 29];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %68)[i64 30];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %68)[i64 31];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %101 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %102 = getelementptr &([100000 * f32]* %101)[i64 0][i64 0];
    [100000 * f32]* %103 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %104 = getelementptr &([100000 * f32]* %103)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^while.body6, i32 %181];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %110];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.992248), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp slt i32 %107, i32 100000;
    cbr i1 %111(prob = 0.992248), ^while.body3, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %140];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %139];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %134];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.992248), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body3, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body3, f32 %130];
    f32* %118 = getelementptr &(f32* %104)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^while.body3:
    i32 %119 = phi [^while.header1, i32 %107] [^while.body3, i32 %131];
    f32 %120 = phi [^while.header1, f32 %106] [^while.body3, f32 %130];
    i32 %121 = add i32 %108, i32 %119;
    i32 %122 = add i32 %110, i32 %119;
    i32 %123 = mul i32 %121, i32 %122;
    i32 %124 = sdiv i32 %123, i32 2;
    i32 %125 = add i32 %110, i32 %124;
    f32 %126 = s2f i32 %125 to f32;
    f32* %127 = getelementptr &(f32* %100)[i32 %119];
    f32 %128 = load f32* %127;
    f32 %129 = fdiv f32 %128, f32 %126;
    f32 %130 = fadd f32 %120, f32 %129;
    i32 %131 = add i32 %119, i32 1;
    i1 %132 = icmp slt i32 %131, i32 100000;
    cbr i1 %132(prob = 0.992248), ^while.body3, ^b;
  ^while.header3:
    i1 %133 = icmp slt i32 %113, i32 100000;
    i32 %134 = add i32 %114, i32 1;
    cbr i1 %133(prob = 0.992248), ^while.body4, ^b1;
  ^while.header4:
    f32 %135 = phi [^while.header2, f32 0] [^b2, f32 %163];
    i32 %136 = phi [^while.header2, i32 0] [^b2, i32 %162];
    i32 %137 = phi [^while.header2, i32 0] [^b2, i32 %156];
    i1 %138 = icmp slt i32 %137, i32 100000;
    cbr i1 %138(prob = 0.992248), ^while.header5, ^while.header6;
  ^b1:
    i32 %139 = phi [^while.header3, i32 %113] [^while.body4, i32 100000];
    f32 %140 = phi [^while.header3, f32 %112] [^while.body4, f32 %154];
    f32* %141 = getelementptr &(f32* %102)[i32 %114];
    store f32* %141 with f32 %140;
    ubr ^while.header2;
  ^while.body4:
    i32 %142 = phi [^while.header3, i32 %113] [^while.body4, i32 %148];
    f32 %143 = phi [^while.header3, f32 %112] [^while.body4, f32 %154];
    i32 %144 = add i32 %114, i32 %142;
    i32 %145 = add i32 %134, i32 %142;
    i32 %146 = mul i32 %144, i32 %145;
    i32 %147 = sdiv i32 %146, i32 2;
    i32 %148 = add i32 %142, i32 1;
    i32 %149 = add i32 %147, i32 %148;
    f32 %150 = s2f i32 %149 to f32;
    f32* %151 = getelementptr &(f32* %104)[i32 %142];
    f32 %152 = load f32* %151;
    f32 %153 = fdiv f32 %152, f32 %150;
    f32 %154 = fadd f32 %143, f32 %153;
    i1 %155 = icmp slt i32 %148, i32 100000;
    cbr i1 %155(prob = 0.992248), ^while.body4, ^b1;
  ^while.header5:
    i32 %156 = add i32 %137, i32 1;
    i1 %157 = icmp slt i32 %136, i32 100000;
    cbr i1 %157(prob = 0.992248), ^while.body5, ^b2;
  ^while.header6:
    f32 %158 = phi [^while.header4, f32 0] [^b3, f32 %184];
    i32 %159 = phi [^while.header4, i32 0] [^b3, i32 %183];
    i32 %160 = phi [^while.header4, i32 0] [^b3, i32 %180];
    i1 %161 = icmp slt i32 %160, i32 100000;
    cbr i1 %161(prob = 0.992248), ^while.header7, ^while.body6;
  ^b2:
    i32 %162 = phi [^while.header5, i32 %136] [^while.body5, i32 100000];
    f32 %163 = phi [^while.header5, f32 %135] [^while.body5, f32 %176];
    f32* %164 = getelementptr &(f32* %104)[i32 %137];
    store f32* %164 with f32 %163;
    ubr ^while.header4;
  ^while.body5:
    i32 %165 = phi [^while.header5, i32 %136] [^while.body5, i32 %177];
    f32 %166 = phi [^while.header5, f32 %135] [^while.body5, f32 %176];
    i32 %167 = add i32 %137, i32 %165;
    i32 %168 = add i32 %156, i32 %165;
    i32 %169 = mul i32 %167, i32 %168;
    i32 %170 = sdiv i32 %169, i32 2;
    i32 %171 = add i32 %156, i32 %170;
    f32 %172 = s2f i32 %171 to f32;
    f32* %173 = getelementptr &(f32* %102)[i32 %165];
    f32 %174 = load f32* %173;
    f32 %175 = fdiv f32 %174, f32 %172;
    f32 %176 = fadd f32 %166, f32 %175;
    i32 %177 = add i32 %165, i32 1;
    i1 %178 = icmp slt i32 %177, i32 100000;
    cbr i1 %178(prob = 0.992248), ^while.body5, ^b2;
  ^while.header7:
    i1 %179 = icmp slt i32 %159, i32 100000;
    i32 %180 = add i32 %160, i32 1;
    cbr i1 %179(prob = 0.992248), ^while.body7, ^b3;
  ^while.body6:
    i32 %181 = add i32 %105, i32 1;
    i1 %182 = icmp slt i32 %181, i32 1000;
    cbr i1 %182(prob = 0.999), ^while.body2, ^b4;
  ^b3:
    i32 %183 = phi [^while.header7, i32 %159] [^while.body7, i32 100000];
    f32 %184 = phi [^while.header7, f32 %158] [^while.body7, f32 %198];
    f32* %185 = getelementptr &(f32* %100)[i32 %160];
    store f32* %185 with f32 %184;
    ubr ^while.header6;
  ^while.body7:
    i32 %186 = phi [^while.header7, i32 %159] [^while.body7, i32 %192];
    f32 %187 = phi [^while.header7, f32 %158] [^while.body7, f32 %198];
    i32 %188 = add i32 %160, i32 %186;
    i32 %189 = add i32 %180, i32 %186;
    i32 %190 = mul i32 %188, i32 %189;
    i32 %191 = sdiv i32 %190, i32 2;
    i32 %192 = add i32 %186, i32 1;
    i32 %193 = add i32 %191, i32 %192;
    f32 %194 = s2f i32 %193 to f32;
    f32* %195 = getelementptr &(f32* %104)[i32 %186];
    f32 %196 = load f32* %195;
    f32 %197 = fdiv f32 %196, f32 %194;
    f32 %198 = fadd f32 %187, f32 %197;
    i1 %199 = icmp slt i32 %192, i32 100000;
    cbr i1 %199(prob = 0.992248), ^while.body7, ^b3;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body8;
  ^while.body8:
    f32 %200 = phi [^b4, f32 0] [^while.body8, f32 %249];
    i32 %201 = phi [^b4, i32 0] [^while.body8, i32 %250];
    f32* %202 = getelementptr &(f32* %100)[i32 %201];
    f32 %203 = load f32* %202;
    f32* %204 = getelementptr &(f32* %102)[i32 %201];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %203, f32 %205;
    f32 %207 = fadd f32 %200, f32 %206;
    f32* %208 = getelementptr &(f32* %202)[i64 1];
    f32 %209 = load f32* %208;
    f32* %210 = getelementptr &(f32* %204)[i64 1];
    f32 %211 = load f32* %210;
    f32 %212 = fmul f32 %209, f32 %211;
    f32 %213 = fadd f32 %207, f32 %212;
    f32* %214 = getelementptr &(f32* %202)[i64 2];
    f32 %215 = load f32* %214;
    f32* %216 = getelementptr &(f32* %204)[i64 2];
    f32 %217 = load f32* %216;
    f32 %218 = fmul f32 %215, f32 %217;
    f32 %219 = fadd f32 %213, f32 %218;
    f32* %220 = getelementptr &(f32* %202)[i64 3];
    f32 %221 = load f32* %220;
    f32* %222 = getelementptr &(f32* %204)[i64 3];
    f32 %223 = load f32* %222;
    f32 %224 = fmul f32 %221, f32 %223;
    f32 %225 = fadd f32 %219, f32 %224;
    f32* %226 = getelementptr &(f32* %202)[i64 4];
    f32 %227 = load f32* %226;
    f32* %228 = getelementptr &(f32* %204)[i64 4];
    f32 %229 = load f32* %228;
    f32 %230 = fmul f32 %227, f32 %229;
    f32 %231 = fadd f32 %225, f32 %230;
    f32* %232 = getelementptr &(f32* %202)[i64 5];
    f32 %233 = load f32* %232;
    f32* %234 = getelementptr &(f32* %204)[i64 5];
    f32 %235 = load f32* %234;
    f32 %236 = fmul f32 %233, f32 %235;
    f32 %237 = fadd f32 %231, f32 %236;
    f32* %238 = getelementptr &(f32* %202)[i64 6];
    f32 %239 = load f32* %238;
    f32* %240 = getelementptr &(f32* %204)[i64 6];
    f32 %241 = load f32* %240;
    f32 %242 = fmul f32 %239, f32 %241;
    f32 %243 = fadd f32 %237, f32 %242;
    f32* %244 = getelementptr &(f32* %202)[i64 7];
    f32 %245 = load f32* %244;
    f32* %246 = getelementptr &(f32* %204)[i64 7];
    f32 %247 = load f32* %246;
    f32 %248 = fmul f32 %245, f32 %247;
    f32 %249 = fadd f32 %243, f32 %248;
    i32 %250 = add i32 %201, i32 8;
    i1 %251 = icmp slt i32 %250, i32 99992;
    cbr i1 %251(prob = 0.99992), ^while.body8, ^while.body9;
  ^while.body9 {scalar}:
    i32 %252 = phi [^while.body8, i32 %250] [^while.body9, i32 %260];
    f32 %253 = phi [^while.body8, f32 %249] [^while.body9, f32 %259];
    f32* %254 = getelementptr &(f32* %100)[i32 %252];
    f32 %255 = load f32* %254;
    f32* %256 = getelementptr &(f32* %102)[i32 %252];
    f32 %257 = load f32* %256;
    f32 %258 = fmul f32 %255, f32 %257;
    f32 %259 = fadd f32 %253, f32 %258;
    i32 %260 = add i32 %252, i32 1;
    i1 %261 = icmp slt i32 %260, i32 100000;
    cbr i1 %261(prob = 0.875), ^while.body9, ^while.body10;
  ^while.body10:
    f32 %262 = phi [^while.body9, f32 0] [^while.body10, f32 %295];
    i32 %263 = phi [^while.body9, i32 0] [^while.body10, i32 %296];
    f32* %264 = getelementptr &(f32* %102)[i32 %263];
    f32 %265 = load f32* %264;
    f32 %266 = fmul f32 %265, f32 %265;
    f32 %267 = fadd f32 %262, f32 %266;
    f32* %268 = getelementptr &(f32* %264)[i64 1];
    f32 %269 = load f32* %268;
    f32 %270 = fmul f32 %269, f32 %269;
    f32 %271 = fadd f32 %267, f32 %270;
    f32* %272 = getelementptr &(f32* %264)[i64 2];
    f32 %273 = load f32* %272;
    f32 %274 = fmul f32 %273, f32 %273;
    f32 %275 = fadd f32 %271, f32 %274;
    f32* %276 = getelementptr &(f32* %264)[i64 3];
    f32 %277 = load f32* %276;
    f32 %278 = fmul f32 %277, f32 %277;
    f32 %279 = fadd f32 %275, f32 %278;
    f32* %280 = getelementptr &(f32* %264)[i64 4];
    f32 %281 = load f32* %280;
    f32 %282 = fmul f32 %281, f32 %281;
    f32 %283 = fadd f32 %279, f32 %282;
    f32* %284 = getelementptr &(f32* %264)[i64 5];
    f32 %285 = load f32* %284;
    f32 %286 = fmul f32 %285, f32 %285;
    f32 %287 = fadd f32 %283, f32 %286;
    f32* %288 = getelementptr &(f32* %264)[i64 6];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 %289, f32 %289;
    f32 %291 = fadd f32 %287, f32 %290;
    f32* %292 = getelementptr &(f32* %264)[i64 7];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %293, f32 %293;
    f32 %295 = fadd f32 %291, f32 %294;
    i32 %296 = add i32 %263, i32 8;
    i1 %297 = icmp slt i32 %296, i32 99992;
    cbr i1 %297(prob = 0.99992), ^while.body10, ^while.body11;
  ^while.body11 {scalar}:
    i32 %298 = phi [^while.body10, i32 %296] [^while.body11, i32 %304];
    f32 %299 = phi [^while.body10, f32 %295] [^while.body11, f32 %303];
    f32* %300 = getelementptr &(f32* %102)[i32 %298];
    f32 %301 = load f32* %300;
    f32 %302 = fmul f32 %301, f32 %301;
    f32 %303 = fadd f32 %299, f32 %302;
    i32 %304 = add i32 %298, i32 1;
    i1 %305 = icmp slt i32 %304, i32 100000;
    cbr i1 %305(prob = 0.875), ^while.body11, ^b5;
  ^b5:
    f32 %306 = fdiv f32 %259, f32 %303;
    f32 %307 = fsub f32 1, f32 %306;
    i1 %308 = fcmp ogt f32 %307, f32 1e-06;
    i1 %309 = fcmp olt f32 %307, f32 -1e-06;
    i1 %310 = or i1 %308, i1 %309;
    cbr i1 %310(prob = 0.996124), ^while.body12, ^b6;
  ^while.body12:
    f32 %311 = phi [^b5, f32 %306] [^while.body12, f32 %315];
    f32 %312 = phi [^b5, f32 1] [^while.body12, f32 %314];
    f32 %313 = fadd f32 %312, f32 %311;
    f32 %314 = fmul f32 %313, f32 0.5;
    f32 %315 = fdiv f32 %306, f32 %314;
    f32 %316 = fsub f32 %314, f32 %315;
    i1 %317 = fcmp ogt f32 %316, f32 1e-06;
    i1 %318 = fcmp olt f32 %316, f32 -1e-06;
    i1 %319 = or i1 %317, i1 %318;
    cbr i1 %319(prob = 0.996124), ^while.body12, ^b6;
  ^b6:
    f32 %320 = phi [^b5, f32 1] [^while.body12, f32 %314];
    f32 %321 = fsub f32 %320, f32 1;
    i1 %322 = fcmp ole f32 %321, f32 1e-06;
    i1 %323 = fcmp oge f32 %321, f32 -1e-06;
    i1 %324 = and i1 %322, i1 %323;
    i32 %325 = zext i1 %324 to i32;
    call (i32) -> void @putint(i32 %325);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
