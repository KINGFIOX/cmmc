internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    f32* %0 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %1 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %2 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (i32) -> void @starttime(i32 62);
    ubr ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %20];
    f32* %4 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %3];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %4)[i64 1];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %4)[i64 2];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %4)[i64 3];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %4)[i64 4];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %4)[i64 5];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %4)[i64 6];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %4)[i64 7];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %4)[i64 8];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %4)[i64 9];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %4)[i64 10];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %4)[i64 11];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %4)[i64 12];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %4)[i64 13];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %4)[i64 14];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %4)[i64 15];
    store f32* %19 with f32 1;
    i32 %20 = add i32 %3, i32 16;
    i1 %21 = scmp lt i32 %20, i32 100000;
    cbr i1 %21(prob = 1), ^while.body, ^while.body1;
^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^while.body6, i32 %500];
    ubr ^while.header;
^while.header:
    i32 %23 = phi [^while.body1, i32 0] [^b, i32 %41];
    f32 %24 = phi [^while.body1, f32 0] [^b, f32 %47];
    i32 %25 = phi [^while.body1, i32 0] [^b, i32 %48];
    i1 %26 = scmp lt i32 %23, i32 100000;
    cbr i1 %26(prob = 0.97), ^indirect, ^while.header1;
^indirect:
    i32 %27 = add i32 %23, i32 15;
    i32 %28 = add i32 %23, i32 14;
    i32 %29 = add i32 %23, i32 13;
    i32 %30 = add i32 %23, i32 12;
    i32 %31 = add i32 %23, i32 11;
    i32 %32 = add i32 %23, i32 10;
    i32 %33 = add i32 %23, i32 9;
    i32 %34 = add i32 %23, i32 8;
    i32 %35 = add i32 %23, i32 7;
    i32 %36 = add i32 %23, i32 6;
    i32 %37 = add i32 %23, i32 5;
    i32 %38 = add i32 %23, i32 4;
    i32 %39 = add i32 %23, i32 3;
    i32 %40 = add i32 %23, i32 2;
    i32 %41 = add i32 %23, i32 1;
    i1 %42 = scmp lt i32 %25, i32 100000;
    cbr i1 %42(prob = 0.97), ^super.header, ^b;
^while.header1:
    i32 %43 = phi [^while.header, i32 0] [^b1, i32 %68];
    f32 %44 = phi [^while.header, f32 0] [^b1, f32 %248];
    i32 %45 = phi [^while.header, i32 0] [^b1, i32 %249];
    i1 %46 = scmp lt i32 %43, i32 100000;
    cbr i1 %46(prob = 0.97), ^indirect1, ^while.header2;
^b:
    f32 %47 = phi [^indirect, f32 %24] [^while.body3, f32 %262];
    i32 %48 = phi [^indirect, i32 %25] [^while.body3, i32 %263];
    f32* %49 = getelementptr &(f32* %2)[i32 %23];
    store f32* %49 with f32 %47;
    ubr ^while.header;
^super.header:
    f32 %50 = phi [^indirect, f32 %24] [^while.body2, f32 %247];
    i32 %51 = phi [^indirect, i32 %25] [^while.body2, i32 %52];
    i32 %52 = add i32 %51, i32 16;
    i1 %53 = scmp lt i32 %52, i32 100000;
    cbr i1 %53(prob = 0.67), ^while.body2, ^while.body3;
^indirect1:
    i32 %54 = add i32 %43, i32 15;
    i32 %55 = add i32 %43, i32 14;
    i32 %56 = add i32 %43, i32 13;
    i32 %57 = add i32 %43, i32 12;
    i32 %58 = add i32 %43, i32 11;
    i32 %59 = add i32 %43, i32 10;
    i32 %60 = add i32 %43, i32 9;
    i32 %61 = add i32 %43, i32 8;
    i32 %62 = add i32 %43, i32 7;
    i32 %63 = add i32 %43, i32 6;
    i32 %64 = add i32 %43, i32 5;
    i32 %65 = add i32 %43, i32 4;
    i32 %66 = add i32 %43, i32 3;
    i32 %67 = add i32 %43, i32 2;
    i32 %68 = add i32 %43, i32 1;
    i1 %69 = scmp lt i32 %45, i32 100000;
    cbr i1 %69(prob = 0.97), ^super.header1, ^b1;
^while.header2:
    i32 %70 = phi [^while.header1, i32 0] [^b2, i32 %283];
    f32 %71 = phi [^while.header1, f32 0] [^b2, f32 %463];
    i32 %72 = phi [^while.header1, i32 0] [^b2, i32 %464];
    i1 %73 = scmp lt i32 %70, i32 100000;
    cbr i1 %73(prob = 0.97), ^indirect2, ^while.header3;
^while.body2:
    f32* %74 = getelementptr &(f32* %0)[i32 %51];
    f32 %75 = load f32* %74;
    i32 %76 = add i32 %23, i32 %51;
    i32 %77 = add i32 %51, i32 %41;
    i32 %78 = mul i32 %76, i32 %77;
    i32 %79 = sdiv i32 %78, i32 2;
    i32 %80 = add i32 %79, i32 %41;
    f32 %81 = s2f i32 %80 to f32;
    f32 %82 = fdiv f32 %75, f32 %81;
    f32 %83 = fadd f32 %50, f32 %82;
    f32* %84 = getelementptr &(f32* %74)[i64 1];
    f32 %85 = load f32* %84;
    i32 %86 = add i32 %51, i32 1;
    i32 %87 = add i32 %86, i32 %41;
    i32 %88 = mul i32 %77, i32 %87;
    i32 %89 = sdiv i32 %88, i32 2;
    i32 %90 = add i32 %89, i32 %41;
    f32 %91 = s2f i32 %90 to f32;
    f32 %92 = fdiv f32 %85, f32 %91;
    f32 %93 = fadd f32 %83, f32 %92;
    f32* %94 = getelementptr &(f32* %74)[i64 2];
    f32 %95 = load f32* %94;
    i32 %96 = add i32 %51, i32 %40;
    i32 %97 = add i32 %51, i32 2;
    i32 %98 = add i32 %97, i32 %41;
    i32 %99 = mul i32 %96, i32 %98;
    i32 %100 = sdiv i32 %99, i32 2;
    i32 %101 = add i32 %100, i32 %41;
    f32 %102 = s2f i32 %101 to f32;
    f32 %103 = fdiv f32 %95, f32 %102;
    f32 %104 = fadd f32 %93, f32 %103;
    f32* %105 = getelementptr &(f32* %74)[i64 3];
    f32 %106 = load f32* %105;
    i32 %107 = add i32 %51, i32 %39;
    i32 %108 = add i32 %51, i32 3;
    i32 %109 = add i32 %108, i32 %41;
    i32 %110 = mul i32 %107, i32 %109;
    i32 %111 = sdiv i32 %110, i32 2;
    i32 %112 = add i32 %111, i32 %41;
    f32 %113 = s2f i32 %112 to f32;
    f32 %114 = fdiv f32 %106, f32 %113;
    f32 %115 = fadd f32 %104, f32 %114;
    f32* %116 = getelementptr &(f32* %74)[i64 4];
    f32 %117 = load f32* %116;
    i32 %118 = add i32 %51, i32 %38;
    i32 %119 = add i32 %51, i32 4;
    i32 %120 = add i32 %119, i32 %41;
    i32 %121 = mul i32 %118, i32 %120;
    i32 %122 = sdiv i32 %121, i32 2;
    i32 %123 = add i32 %122, i32 %41;
    f32 %124 = s2f i32 %123 to f32;
    f32 %125 = fdiv f32 %117, f32 %124;
    f32 %126 = fadd f32 %115, f32 %125;
    f32* %127 = getelementptr &(f32* %74)[i64 5];
    f32 %128 = load f32* %127;
    i32 %129 = add i32 %51, i32 %37;
    i32 %130 = add i32 %51, i32 5;
    i32 %131 = add i32 %130, i32 %41;
    i32 %132 = mul i32 %129, i32 %131;
    i32 %133 = sdiv i32 %132, i32 2;
    i32 %134 = add i32 %133, i32 %41;
    f32 %135 = s2f i32 %134 to f32;
    f32 %136 = fdiv f32 %128, f32 %135;
    f32 %137 = fadd f32 %126, f32 %136;
    f32* %138 = getelementptr &(f32* %74)[i64 6];
    f32 %139 = load f32* %138;
    i32 %140 = add i32 %51, i32 %36;
    i32 %141 = add i32 %51, i32 6;
    i32 %142 = add i32 %141, i32 %41;
    i32 %143 = mul i32 %140, i32 %142;
    i32 %144 = sdiv i32 %143, i32 2;
    i32 %145 = add i32 %144, i32 %41;
    f32 %146 = s2f i32 %145 to f32;
    f32 %147 = fdiv f32 %139, f32 %146;
    f32 %148 = fadd f32 %137, f32 %147;
    f32* %149 = getelementptr &(f32* %74)[i64 7];
    f32 %150 = load f32* %149;
    i32 %151 = add i32 %51, i32 %35;
    i32 %152 = add i32 %51, i32 7;
    i32 %153 = add i32 %152, i32 %41;
    i32 %154 = mul i32 %151, i32 %153;
    i32 %155 = sdiv i32 %154, i32 2;
    i32 %156 = add i32 %155, i32 %41;
    f32 %157 = s2f i32 %156 to f32;
    f32 %158 = fdiv f32 %150, f32 %157;
    f32 %159 = fadd f32 %148, f32 %158;
    f32* %160 = getelementptr &(f32* %74)[i64 8];
    f32 %161 = load f32* %160;
    i32 %162 = add i32 %51, i32 %34;
    i32 %163 = add i32 %51, i32 8;
    i32 %164 = add i32 %163, i32 %41;
    i32 %165 = mul i32 %162, i32 %164;
    i32 %166 = sdiv i32 %165, i32 2;
    i32 %167 = add i32 %166, i32 %41;
    f32 %168 = s2f i32 %167 to f32;
    f32 %169 = fdiv f32 %161, f32 %168;
    f32 %170 = fadd f32 %159, f32 %169;
    f32* %171 = getelementptr &(f32* %74)[i64 9];
    f32 %172 = load f32* %171;
    i32 %173 = add i32 %51, i32 %33;
    i32 %174 = add i32 %51, i32 9;
    i32 %175 = add i32 %174, i32 %41;
    i32 %176 = mul i32 %173, i32 %175;
    i32 %177 = sdiv i32 %176, i32 2;
    i32 %178 = add i32 %177, i32 %41;
    f32 %179 = s2f i32 %178 to f32;
    f32 %180 = fdiv f32 %172, f32 %179;
    f32 %181 = fadd f32 %170, f32 %180;
    f32* %182 = getelementptr &(f32* %74)[i64 10];
    f32 %183 = load f32* %182;
    i32 %184 = add i32 %51, i32 %32;
    i32 %185 = add i32 %51, i32 10;
    i32 %186 = add i32 %185, i32 %41;
    i32 %187 = mul i32 %184, i32 %186;
    i32 %188 = sdiv i32 %187, i32 2;
    i32 %189 = add i32 %188, i32 %41;
    f32 %190 = s2f i32 %189 to f32;
    f32 %191 = fdiv f32 %183, f32 %190;
    f32 %192 = fadd f32 %181, f32 %191;
    f32* %193 = getelementptr &(f32* %74)[i64 11];
    f32 %194 = load f32* %193;
    i32 %195 = add i32 %51, i32 %31;
    i32 %196 = add i32 %51, i32 11;
    i32 %197 = add i32 %196, i32 %41;
    i32 %198 = mul i32 %195, i32 %197;
    i32 %199 = sdiv i32 %198, i32 2;
    i32 %200 = add i32 %199, i32 %41;
    f32 %201 = s2f i32 %200 to f32;
    f32 %202 = fdiv f32 %194, f32 %201;
    f32 %203 = fadd f32 %192, f32 %202;
    f32* %204 = getelementptr &(f32* %74)[i64 12];
    f32 %205 = load f32* %204;
    i32 %206 = add i32 %51, i32 %30;
    i32 %207 = add i32 %51, i32 12;
    i32 %208 = add i32 %207, i32 %41;
    i32 %209 = mul i32 %206, i32 %208;
    i32 %210 = sdiv i32 %209, i32 2;
    i32 %211 = add i32 %210, i32 %41;
    f32 %212 = s2f i32 %211 to f32;
    f32 %213 = fdiv f32 %205, f32 %212;
    f32 %214 = fadd f32 %203, f32 %213;
    f32* %215 = getelementptr &(f32* %74)[i64 13];
    f32 %216 = load f32* %215;
    i32 %217 = add i32 %51, i32 %29;
    i32 %218 = add i32 %51, i32 13;
    i32 %219 = add i32 %218, i32 %41;
    i32 %220 = mul i32 %217, i32 %219;
    i32 %221 = sdiv i32 %220, i32 2;
    i32 %222 = add i32 %221, i32 %41;
    f32 %223 = s2f i32 %222 to f32;
    f32 %224 = fdiv f32 %216, f32 %223;
    f32 %225 = fadd f32 %214, f32 %224;
    f32* %226 = getelementptr &(f32* %74)[i64 14];
    f32 %227 = load f32* %226;
    i32 %228 = add i32 %51, i32 %28;
    i32 %229 = add i32 %51, i32 14;
    i32 %230 = add i32 %229, i32 %41;
    i32 %231 = mul i32 %228, i32 %230;
    i32 %232 = sdiv i32 %231, i32 2;
    i32 %233 = add i32 %232, i32 %41;
    f32 %234 = s2f i32 %233 to f32;
    f32 %235 = fdiv f32 %227, f32 %234;
    f32 %236 = fadd f32 %225, f32 %235;
    f32* %237 = getelementptr &(f32* %74)[i64 15];
    f32 %238 = load f32* %237;
    i32 %239 = add i32 %51, i32 %27;
    i32 %240 = add i32 %51, i32 15;
    i32 %241 = add i32 %240, i32 %41;
    i32 %242 = mul i32 %239, i32 %241;
    i32 %243 = sdiv i32 %242, i32 2;
    i32 %244 = add i32 %243, i32 %41;
    f32 %245 = s2f i32 %244 to f32;
    f32 %246 = fdiv f32 %238, f32 %245;
    f32 %247 = fadd f32 %236, f32 %246;
    ubr ^super.header;
^b1:
    f32 %248 = phi [^indirect1, f32 %44] [^while.body5, f32 %478];
    i32 %249 = phi [^indirect1, i32 %45] [^while.body5, i32 %471];
    f32* %250 = getelementptr &(f32* %1)[i32 %43];
    store f32* %250 with f32 %248;
    ubr ^while.header1;
^while.body3:
    f32 %251 = phi [^super.header, f32 %50] [^while.body3, f32 %262];
    i32 %252 = phi [^super.header, i32 %51] [^while.body3, i32 %263];
    f32* %253 = getelementptr &(f32* %0)[i32 %252];
    f32 %254 = load f32* %253;
    i32 %255 = add i32 %23, i32 %252;
    i32 %256 = add i32 %252, i32 %41;
    i32 %257 = mul i32 %255, i32 %256;
    i32 %258 = sdiv i32 %257, i32 2;
    i32 %259 = add i32 %258, i32 %41;
    f32 %260 = s2f i32 %259 to f32;
    f32 %261 = fdiv f32 %254, f32 %260;
    f32 %262 = fadd f32 %251, f32 %261;
    i32 %263 = add i32 %252, i32 1;
    i1 %264 = scmp lt i32 %263, i32 100000;
    cbr i1 %264(prob = 0.97), ^while.body3, ^b;
^super.header1:
    f32 %265 = phi [^indirect1, f32 %44] [^while.body4, f32 %462];
    i32 %266 = phi [^indirect1, i32 %45] [^while.body4, i32 %267];
    i32 %267 = add i32 %266, i32 16;
    i1 %268 = scmp lt i32 %267, i32 100000;
    cbr i1 %268(prob = 0.67), ^while.body4, ^while.body5;
^indirect2:
    i32 %269 = add i32 %70, i32 15;
    i32 %270 = add i32 %70, i32 14;
    i32 %271 = add i32 %70, i32 13;
    i32 %272 = add i32 %70, i32 12;
    i32 %273 = add i32 %70, i32 11;
    i32 %274 = add i32 %70, i32 10;
    i32 %275 = add i32 %70, i32 9;
    i32 %276 = add i32 %70, i32 8;
    i32 %277 = add i32 %70, i32 7;
    i32 %278 = add i32 %70, i32 6;
    i32 %279 = add i32 %70, i32 5;
    i32 %280 = add i32 %70, i32 4;
    i32 %281 = add i32 %70, i32 3;
    i32 %282 = add i32 %70, i32 2;
    i32 %283 = add i32 %70, i32 1;
    i1 %284 = scmp lt i32 %72, i32 100000;
    cbr i1 %284(prob = 0.97), ^super.header2, ^b2;
^while.header3:
    i32 %285 = phi [^while.header2, i32 0] [^b3, i32 %498];
    f32 %286 = phi [^while.header2, f32 0] [^b3, f32 %676];
    i32 %287 = phi [^while.header2, i32 0] [^b3, i32 %677];
    i1 %288 = scmp lt i32 %285, i32 100000;
    cbr i1 %288(prob = 0.97), ^indirect3, ^while.body6;
^while.body4:
    f32* %289 = getelementptr &(f32* %2)[i32 %266];
    f32 %290 = load f32* %289;
    i32 %291 = add i32 %43, i32 %266;
    i32 %292 = add i32 %266, i32 %68;
    i32 %293 = mul i32 %291, i32 %292;
    i32 %294 = sdiv i32 %293, i32 2;
    i32 %295 = add i32 %266, i32 1;
    i32 %296 = add i32 %295, i32 %294;
    f32 %297 = s2f i32 %296 to f32;
    f32 %298 = fdiv f32 %290, f32 %297;
    f32 %299 = fadd f32 %265, f32 %298;
    f32* %300 = getelementptr &(f32* %289)[i64 1];
    f32 %301 = load f32* %300;
    i32 %302 = add i32 %295, i32 %68;
    i32 %303 = mul i32 %292, i32 %302;
    i32 %304 = sdiv i32 %303, i32 2;
    i32 %305 = add i32 %266, i32 2;
    i32 %306 = add i32 %305, i32 %304;
    f32 %307 = s2f i32 %306 to f32;
    f32 %308 = fdiv f32 %301, f32 %307;
    f32 %309 = fadd f32 %299, f32 %308;
    f32* %310 = getelementptr &(f32* %289)[i64 2];
    f32 %311 = load f32* %310;
    i32 %312 = add i32 %266, i32 %67;
    i32 %313 = add i32 %305, i32 %68;
    i32 %314 = mul i32 %312, i32 %313;
    i32 %315 = sdiv i32 %314, i32 2;
    i32 %316 = add i32 %266, i32 3;
    i32 %317 = add i32 %316, i32 %315;
    f32 %318 = s2f i32 %317 to f32;
    f32 %319 = fdiv f32 %311, f32 %318;
    f32 %320 = fadd f32 %309, f32 %319;
    f32* %321 = getelementptr &(f32* %289)[i64 3];
    f32 %322 = load f32* %321;
    i32 %323 = add i32 %266, i32 %66;
    i32 %324 = add i32 %316, i32 %68;
    i32 %325 = mul i32 %323, i32 %324;
    i32 %326 = sdiv i32 %325, i32 2;
    i32 %327 = add i32 %266, i32 4;
    i32 %328 = add i32 %327, i32 %326;
    f32 %329 = s2f i32 %328 to f32;
    f32 %330 = fdiv f32 %322, f32 %329;
    f32 %331 = fadd f32 %320, f32 %330;
    f32* %332 = getelementptr &(f32* %289)[i64 4];
    f32 %333 = load f32* %332;
    i32 %334 = add i32 %266, i32 %65;
    i32 %335 = add i32 %327, i32 %68;
    i32 %336 = mul i32 %334, i32 %335;
    i32 %337 = sdiv i32 %336, i32 2;
    i32 %338 = add i32 %266, i32 5;
    i32 %339 = add i32 %338, i32 %337;
    f32 %340 = s2f i32 %339 to f32;
    f32 %341 = fdiv f32 %333, f32 %340;
    f32 %342 = fadd f32 %331, f32 %341;
    f32* %343 = getelementptr &(f32* %289)[i64 5];
    f32 %344 = load f32* %343;
    i32 %345 = add i32 %266, i32 %64;
    i32 %346 = add i32 %338, i32 %68;
    i32 %347 = mul i32 %345, i32 %346;
    i32 %348 = sdiv i32 %347, i32 2;
    i32 %349 = add i32 %266, i32 6;
    i32 %350 = add i32 %349, i32 %348;
    f32 %351 = s2f i32 %350 to f32;
    f32 %352 = fdiv f32 %344, f32 %351;
    f32 %353 = fadd f32 %342, f32 %352;
    f32* %354 = getelementptr &(f32* %289)[i64 6];
    f32 %355 = load f32* %354;
    i32 %356 = add i32 %266, i32 %63;
    i32 %357 = add i32 %349, i32 %68;
    i32 %358 = mul i32 %356, i32 %357;
    i32 %359 = sdiv i32 %358, i32 2;
    i32 %360 = add i32 %266, i32 7;
    i32 %361 = add i32 %360, i32 %359;
    f32 %362 = s2f i32 %361 to f32;
    f32 %363 = fdiv f32 %355, f32 %362;
    f32 %364 = fadd f32 %353, f32 %363;
    f32* %365 = getelementptr &(f32* %289)[i64 7];
    f32 %366 = load f32* %365;
    i32 %367 = add i32 %266, i32 %62;
    i32 %368 = add i32 %360, i32 %68;
    i32 %369 = mul i32 %367, i32 %368;
    i32 %370 = sdiv i32 %369, i32 2;
    i32 %371 = add i32 %266, i32 8;
    i32 %372 = add i32 %371, i32 %370;
    f32 %373 = s2f i32 %372 to f32;
    f32 %374 = fdiv f32 %366, f32 %373;
    f32 %375 = fadd f32 %364, f32 %374;
    f32* %376 = getelementptr &(f32* %289)[i64 8];
    f32 %377 = load f32* %376;
    i32 %378 = add i32 %266, i32 %61;
    i32 %379 = add i32 %371, i32 %68;
    i32 %380 = mul i32 %378, i32 %379;
    i32 %381 = sdiv i32 %380, i32 2;
    i32 %382 = add i32 %266, i32 9;
    i32 %383 = add i32 %382, i32 %381;
    f32 %384 = s2f i32 %383 to f32;
    f32 %385 = fdiv f32 %377, f32 %384;
    f32 %386 = fadd f32 %375, f32 %385;
    f32* %387 = getelementptr &(f32* %289)[i64 9];
    f32 %388 = load f32* %387;
    i32 %389 = add i32 %266, i32 %60;
    i32 %390 = add i32 %382, i32 %68;
    i32 %391 = mul i32 %389, i32 %390;
    i32 %392 = sdiv i32 %391, i32 2;
    i32 %393 = add i32 %266, i32 10;
    i32 %394 = add i32 %393, i32 %392;
    f32 %395 = s2f i32 %394 to f32;
    f32 %396 = fdiv f32 %388, f32 %395;
    f32 %397 = fadd f32 %386, f32 %396;
    f32* %398 = getelementptr &(f32* %289)[i64 10];
    f32 %399 = load f32* %398;
    i32 %400 = add i32 %266, i32 %59;
    i32 %401 = add i32 %393, i32 %68;
    i32 %402 = mul i32 %400, i32 %401;
    i32 %403 = sdiv i32 %402, i32 2;
    i32 %404 = add i32 %266, i32 11;
    i32 %405 = add i32 %404, i32 %403;
    f32 %406 = s2f i32 %405 to f32;
    f32 %407 = fdiv f32 %399, f32 %406;
    f32 %408 = fadd f32 %397, f32 %407;
    f32* %409 = getelementptr &(f32* %289)[i64 11];
    f32 %410 = load f32* %409;
    i32 %411 = add i32 %266, i32 %58;
    i32 %412 = add i32 %404, i32 %68;
    i32 %413 = mul i32 %411, i32 %412;
    i32 %414 = sdiv i32 %413, i32 2;
    i32 %415 = add i32 %266, i32 12;
    i32 %416 = add i32 %415, i32 %414;
    f32 %417 = s2f i32 %416 to f32;
    f32 %418 = fdiv f32 %410, f32 %417;
    f32 %419 = fadd f32 %408, f32 %418;
    f32* %420 = getelementptr &(f32* %289)[i64 12];
    f32 %421 = load f32* %420;
    i32 %422 = add i32 %266, i32 %57;
    i32 %423 = add i32 %415, i32 %68;
    i32 %424 = mul i32 %422, i32 %423;
    i32 %425 = sdiv i32 %424, i32 2;
    i32 %426 = add i32 %266, i32 13;
    i32 %427 = add i32 %426, i32 %425;
    f32 %428 = s2f i32 %427 to f32;
    f32 %429 = fdiv f32 %421, f32 %428;
    f32 %430 = fadd f32 %419, f32 %429;
    f32* %431 = getelementptr &(f32* %289)[i64 13];
    f32 %432 = load f32* %431;
    i32 %433 = add i32 %266, i32 %56;
    i32 %434 = add i32 %426, i32 %68;
    i32 %435 = mul i32 %433, i32 %434;
    i32 %436 = sdiv i32 %435, i32 2;
    i32 %437 = add i32 %266, i32 14;
    i32 %438 = add i32 %437, i32 %436;
    f32 %439 = s2f i32 %438 to f32;
    f32 %440 = fdiv f32 %432, f32 %439;
    f32 %441 = fadd f32 %430, f32 %440;
    f32* %442 = getelementptr &(f32* %289)[i64 14];
    f32 %443 = load f32* %442;
    i32 %444 = add i32 %266, i32 %55;
    i32 %445 = add i32 %437, i32 %68;
    i32 %446 = mul i32 %444, i32 %445;
    i32 %447 = sdiv i32 %446, i32 2;
    i32 %448 = add i32 %266, i32 15;
    i32 %449 = add i32 %448, i32 %447;
    f32 %450 = s2f i32 %449 to f32;
    f32 %451 = fdiv f32 %443, f32 %450;
    f32 %452 = fadd f32 %441, f32 %451;
    f32* %453 = getelementptr &(f32* %289)[i64 15];
    f32 %454 = load f32* %453;
    i32 %455 = add i32 %266, i32 %54;
    i32 %456 = add i32 %448, i32 %68;
    i32 %457 = mul i32 %455, i32 %456;
    i32 %458 = sdiv i32 %457, i32 2;
    i32 %459 = add i32 %458, i32 %267;
    f32 %460 = s2f i32 %459 to f32;
    f32 %461 = fdiv f32 %454, f32 %460;
    f32 %462 = fadd f32 %452, f32 %461;
    ubr ^super.header1;
^b2:
    f32 %463 = phi [^indirect2, f32 %71] [^while.body8, f32 %690];
    i32 %464 = phi [^indirect2, i32 %72] [^while.body8, i32 %691];
    f32* %465 = getelementptr &(f32* %2)[i32 %70];
    store f32* %465 with f32 %463;
    ubr ^while.header2;
^while.body5:
    f32 %466 = phi [^super.header1, f32 %265] [^while.body5, f32 %478];
    i32 %467 = phi [^super.header1, i32 %266] [^while.body5, i32 %471];
    f32* %468 = getelementptr &(f32* %2)[i32 %467];
    f32 %469 = load f32* %468;
    i32 %470 = add i32 %43, i32 %467;
    i32 %471 = add i32 %467, i32 1;
    i32 %472 = add i32 %467, i32 %68;
    i32 %473 = mul i32 %470, i32 %472;
    i32 %474 = sdiv i32 %473, i32 2;
    i32 %475 = add i32 %471, i32 %474;
    f32 %476 = s2f i32 %475 to f32;
    f32 %477 = fdiv f32 %469, f32 %476;
    f32 %478 = fadd f32 %466, f32 %477;
    i1 %479 = scmp lt i32 %471, i32 100000;
    cbr i1 %479(prob = 0.97), ^while.body5, ^b1;
^super.header2:
    f32 %480 = phi [^indirect2, f32 %71] [^while.body7, f32 %675];
    i32 %481 = phi [^indirect2, i32 %72] [^while.body7, i32 %482];
    i32 %482 = add i32 %481, i32 16;
    i1 %483 = scmp lt i32 %482, i32 100000;
    cbr i1 %483(prob = 0.67), ^while.body7, ^while.body8;
^indirect3:
    i32 %484 = add i32 %285, i32 15;
    i32 %485 = add i32 %285, i32 14;
    i32 %486 = add i32 %285, i32 13;
    i32 %487 = add i32 %285, i32 12;
    i32 %488 = add i32 %285, i32 11;
    i32 %489 = add i32 %285, i32 10;
    i32 %490 = add i32 %285, i32 9;
    i32 %491 = add i32 %285, i32 8;
    i32 %492 = add i32 %285, i32 7;
    i32 %493 = add i32 %285, i32 6;
    i32 %494 = add i32 %285, i32 5;
    i32 %495 = add i32 %285, i32 4;
    i32 %496 = add i32 %285, i32 3;
    i32 %497 = add i32 %285, i32 2;
    i32 %498 = add i32 %285, i32 1;
    i1 %499 = scmp lt i32 %287, i32 100000;
    cbr i1 %499(prob = 0.97), ^super.header3, ^b3;
^while.body6:
    i32 %500 = add i32 %22, i32 1;
    i1 %501 = scmp lt i32 %500, i32 1000;
    cbr i1 %501(prob = 1), ^while.body1, ^b4;
^while.body7:
    f32* %502 = getelementptr &(f32* %1)[i32 %481];
    f32 %503 = load f32* %502;
    i32 %504 = add i32 %70, i32 %481;
    i32 %505 = add i32 %481, i32 %283;
    i32 %506 = mul i32 %504, i32 %505;
    i32 %507 = sdiv i32 %506, i32 2;
    i32 %508 = add i32 %507, i32 %283;
    f32 %509 = s2f i32 %508 to f32;
    f32 %510 = fdiv f32 %503, f32 %509;
    f32 %511 = fadd f32 %480, f32 %510;
    f32* %512 = getelementptr &(f32* %502)[i64 1];
    f32 %513 = load f32* %512;
    i32 %514 = add i32 %481, i32 1;
    i32 %515 = add i32 %514, i32 %283;
    i32 %516 = mul i32 %505, i32 %515;
    i32 %517 = sdiv i32 %516, i32 2;
    i32 %518 = add i32 %517, i32 %283;
    f32 %519 = s2f i32 %518 to f32;
    f32 %520 = fdiv f32 %513, f32 %519;
    f32 %521 = fadd f32 %511, f32 %520;
    f32* %522 = getelementptr &(f32* %502)[i64 2];
    f32 %523 = load f32* %522;
    i32 %524 = add i32 %481, i32 %282;
    i32 %525 = add i32 %481, i32 2;
    i32 %526 = add i32 %525, i32 %283;
    i32 %527 = mul i32 %524, i32 %526;
    i32 %528 = sdiv i32 %527, i32 2;
    i32 %529 = add i32 %528, i32 %283;
    f32 %530 = s2f i32 %529 to f32;
    f32 %531 = fdiv f32 %523, f32 %530;
    f32 %532 = fadd f32 %521, f32 %531;
    f32* %533 = getelementptr &(f32* %502)[i64 3];
    f32 %534 = load f32* %533;
    i32 %535 = add i32 %481, i32 %281;
    i32 %536 = add i32 %481, i32 3;
    i32 %537 = add i32 %536, i32 %283;
    i32 %538 = mul i32 %535, i32 %537;
    i32 %539 = sdiv i32 %538, i32 2;
    i32 %540 = add i32 %539, i32 %283;
    f32 %541 = s2f i32 %540 to f32;
    f32 %542 = fdiv f32 %534, f32 %541;
    f32 %543 = fadd f32 %532, f32 %542;
    f32* %544 = getelementptr &(f32* %502)[i64 4];
    f32 %545 = load f32* %544;
    i32 %546 = add i32 %481, i32 %280;
    i32 %547 = add i32 %481, i32 4;
    i32 %548 = add i32 %547, i32 %283;
    i32 %549 = mul i32 %546, i32 %548;
    i32 %550 = sdiv i32 %549, i32 2;
    i32 %551 = add i32 %550, i32 %283;
    f32 %552 = s2f i32 %551 to f32;
    f32 %553 = fdiv f32 %545, f32 %552;
    f32 %554 = fadd f32 %543, f32 %553;
    f32* %555 = getelementptr &(f32* %502)[i64 5];
    f32 %556 = load f32* %555;
    i32 %557 = add i32 %481, i32 %279;
    i32 %558 = add i32 %481, i32 5;
    i32 %559 = add i32 %558, i32 %283;
    i32 %560 = mul i32 %557, i32 %559;
    i32 %561 = sdiv i32 %560, i32 2;
    i32 %562 = add i32 %561, i32 %283;
    f32 %563 = s2f i32 %562 to f32;
    f32 %564 = fdiv f32 %556, f32 %563;
    f32 %565 = fadd f32 %554, f32 %564;
    f32* %566 = getelementptr &(f32* %502)[i64 6];
    f32 %567 = load f32* %566;
    i32 %568 = add i32 %481, i32 %278;
    i32 %569 = add i32 %481, i32 6;
    i32 %570 = add i32 %569, i32 %283;
    i32 %571 = mul i32 %568, i32 %570;
    i32 %572 = sdiv i32 %571, i32 2;
    i32 %573 = add i32 %572, i32 %283;
    f32 %574 = s2f i32 %573 to f32;
    f32 %575 = fdiv f32 %567, f32 %574;
    f32 %576 = fadd f32 %565, f32 %575;
    f32* %577 = getelementptr &(f32* %502)[i64 7];
    f32 %578 = load f32* %577;
    i32 %579 = add i32 %481, i32 %277;
    i32 %580 = add i32 %481, i32 7;
    i32 %581 = add i32 %580, i32 %283;
    i32 %582 = mul i32 %579, i32 %581;
    i32 %583 = sdiv i32 %582, i32 2;
    i32 %584 = add i32 %583, i32 %283;
    f32 %585 = s2f i32 %584 to f32;
    f32 %586 = fdiv f32 %578, f32 %585;
    f32 %587 = fadd f32 %576, f32 %586;
    f32* %588 = getelementptr &(f32* %502)[i64 8];
    f32 %589 = load f32* %588;
    i32 %590 = add i32 %481, i32 %276;
    i32 %591 = add i32 %481, i32 8;
    i32 %592 = add i32 %591, i32 %283;
    i32 %593 = mul i32 %590, i32 %592;
    i32 %594 = sdiv i32 %593, i32 2;
    i32 %595 = add i32 %594, i32 %283;
    f32 %596 = s2f i32 %595 to f32;
    f32 %597 = fdiv f32 %589, f32 %596;
    f32 %598 = fadd f32 %587, f32 %597;
    f32* %599 = getelementptr &(f32* %502)[i64 9];
    f32 %600 = load f32* %599;
    i32 %601 = add i32 %481, i32 %275;
    i32 %602 = add i32 %481, i32 9;
    i32 %603 = add i32 %602, i32 %283;
    i32 %604 = mul i32 %601, i32 %603;
    i32 %605 = sdiv i32 %604, i32 2;
    i32 %606 = add i32 %605, i32 %283;
    f32 %607 = s2f i32 %606 to f32;
    f32 %608 = fdiv f32 %600, f32 %607;
    f32 %609 = fadd f32 %598, f32 %608;
    f32* %610 = getelementptr &(f32* %502)[i64 10];
    f32 %611 = load f32* %610;
    i32 %612 = add i32 %481, i32 %274;
    i32 %613 = add i32 %481, i32 10;
    i32 %614 = add i32 %613, i32 %283;
    i32 %615 = mul i32 %612, i32 %614;
    i32 %616 = sdiv i32 %615, i32 2;
    i32 %617 = add i32 %616, i32 %283;
    f32 %618 = s2f i32 %617 to f32;
    f32 %619 = fdiv f32 %611, f32 %618;
    f32 %620 = fadd f32 %609, f32 %619;
    f32* %621 = getelementptr &(f32* %502)[i64 11];
    f32 %622 = load f32* %621;
    i32 %623 = add i32 %481, i32 %273;
    i32 %624 = add i32 %481, i32 11;
    i32 %625 = add i32 %624, i32 %283;
    i32 %626 = mul i32 %623, i32 %625;
    i32 %627 = sdiv i32 %626, i32 2;
    i32 %628 = add i32 %627, i32 %283;
    f32 %629 = s2f i32 %628 to f32;
    f32 %630 = fdiv f32 %622, f32 %629;
    f32 %631 = fadd f32 %620, f32 %630;
    f32* %632 = getelementptr &(f32* %502)[i64 12];
    f32 %633 = load f32* %632;
    i32 %634 = add i32 %481, i32 %272;
    i32 %635 = add i32 %481, i32 12;
    i32 %636 = add i32 %635, i32 %283;
    i32 %637 = mul i32 %634, i32 %636;
    i32 %638 = sdiv i32 %637, i32 2;
    i32 %639 = add i32 %638, i32 %283;
    f32 %640 = s2f i32 %639 to f32;
    f32 %641 = fdiv f32 %633, f32 %640;
    f32 %642 = fadd f32 %631, f32 %641;
    f32* %643 = getelementptr &(f32* %502)[i64 13];
    f32 %644 = load f32* %643;
    i32 %645 = add i32 %481, i32 %271;
    i32 %646 = add i32 %481, i32 13;
    i32 %647 = add i32 %646, i32 %283;
    i32 %648 = mul i32 %645, i32 %647;
    i32 %649 = sdiv i32 %648, i32 2;
    i32 %650 = add i32 %649, i32 %283;
    f32 %651 = s2f i32 %650 to f32;
    f32 %652 = fdiv f32 %644, f32 %651;
    f32 %653 = fadd f32 %642, f32 %652;
    f32* %654 = getelementptr &(f32* %502)[i64 14];
    f32 %655 = load f32* %654;
    i32 %656 = add i32 %481, i32 %270;
    i32 %657 = add i32 %481, i32 14;
    i32 %658 = add i32 %657, i32 %283;
    i32 %659 = mul i32 %656, i32 %658;
    i32 %660 = sdiv i32 %659, i32 2;
    i32 %661 = add i32 %660, i32 %283;
    f32 %662 = s2f i32 %661 to f32;
    f32 %663 = fdiv f32 %655, f32 %662;
    f32 %664 = fadd f32 %653, f32 %663;
    f32* %665 = getelementptr &(f32* %502)[i64 15];
    f32 %666 = load f32* %665;
    i32 %667 = add i32 %481, i32 %269;
    i32 %668 = add i32 %481, i32 15;
    i32 %669 = add i32 %668, i32 %283;
    i32 %670 = mul i32 %667, i32 %669;
    i32 %671 = sdiv i32 %670, i32 2;
    i32 %672 = add i32 %671, i32 %283;
    f32 %673 = s2f i32 %672 to f32;
    f32 %674 = fdiv f32 %666, f32 %673;
    f32 %675 = fadd f32 %664, f32 %674;
    ubr ^super.header2;
^b3:
    f32 %676 = phi [^indirect3, f32 %286] [^while.body10, f32 %883];
    i32 %677 = phi [^indirect3, i32 %287] [^while.body10, i32 %876];
    f32* %678 = getelementptr &(f32* %0)[i32 %285];
    store f32* %678 with f32 %676;
    ubr ^while.header3;
^while.body8:
    f32 %679 = phi [^super.header2, f32 %480] [^while.body8, f32 %690];
    i32 %680 = phi [^super.header2, i32 %481] [^while.body8, i32 %691];
    f32* %681 = getelementptr &(f32* %1)[i32 %680];
    f32 %682 = load f32* %681;
    i32 %683 = add i32 %70, i32 %680;
    i32 %684 = add i32 %680, i32 %283;
    i32 %685 = mul i32 %683, i32 %684;
    i32 %686 = sdiv i32 %685, i32 2;
    i32 %687 = add i32 %686, i32 %283;
    f32 %688 = s2f i32 %687 to f32;
    f32 %689 = fdiv f32 %682, f32 %688;
    f32 %690 = fadd f32 %679, f32 %689;
    i32 %691 = add i32 %680, i32 1;
    i1 %692 = scmp lt i32 %691, i32 100000;
    cbr i1 %692(prob = 0.97), ^while.body8, ^b2;
^super.header3:
    f32 %693 = phi [^indirect3, f32 %286] [^while.body9, f32 %870];
    i32 %694 = phi [^indirect3, i32 %287] [^while.body9, i32 %695];
    i32 %695 = add i32 %694, i32 16;
    i1 %696 = scmp lt i32 %695, i32 100000;
    cbr i1 %696(prob = 0.67), ^while.body9, ^while.body10;
^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body11;
^while.body9:
    f32* %697 = getelementptr &(f32* %2)[i32 %694];
    f32 %698 = load f32* %697;
    i32 %699 = add i32 %285, i32 %694;
    i32 %700 = add i32 %694, i32 %498;
    i32 %701 = mul i32 %699, i32 %700;
    i32 %702 = sdiv i32 %701, i32 2;
    i32 %703 = add i32 %694, i32 1;
    i32 %704 = add i32 %703, i32 %702;
    f32 %705 = s2f i32 %704 to f32;
    f32 %706 = fdiv f32 %698, f32 %705;
    f32 %707 = fadd f32 %693, f32 %706;
    f32* %708 = getelementptr &(f32* %697)[i64 1];
    f32 %709 = load f32* %708;
    i32 %710 = add i32 %703, i32 %498;
    i32 %711 = mul i32 %700, i32 %710;
    i32 %712 = sdiv i32 %711, i32 2;
    i32 %713 = add i32 %694, i32 2;
    i32 %714 = add i32 %713, i32 %712;
    f32 %715 = s2f i32 %714 to f32;
    f32 %716 = fdiv f32 %709, f32 %715;
    f32 %717 = fadd f32 %707, f32 %716;
    f32* %718 = getelementptr &(f32* %697)[i64 2];
    f32 %719 = load f32* %718;
    i32 %720 = add i32 %694, i32 %497;
    i32 %721 = add i32 %713, i32 %498;
    i32 %722 = mul i32 %720, i32 %721;
    i32 %723 = sdiv i32 %722, i32 2;
    i32 %724 = add i32 %694, i32 3;
    i32 %725 = add i32 %724, i32 %723;
    f32 %726 = s2f i32 %725 to f32;
    f32 %727 = fdiv f32 %719, f32 %726;
    f32 %728 = fadd f32 %717, f32 %727;
    f32* %729 = getelementptr &(f32* %697)[i64 3];
    f32 %730 = load f32* %729;
    i32 %731 = add i32 %694, i32 %496;
    i32 %732 = add i32 %724, i32 %498;
    i32 %733 = mul i32 %731, i32 %732;
    i32 %734 = sdiv i32 %733, i32 2;
    i32 %735 = add i32 %694, i32 4;
    i32 %736 = add i32 %735, i32 %734;
    f32 %737 = s2f i32 %736 to f32;
    f32 %738 = fdiv f32 %730, f32 %737;
    f32 %739 = fadd f32 %728, f32 %738;
    f32* %740 = getelementptr &(f32* %697)[i64 4];
    f32 %741 = load f32* %740;
    i32 %742 = add i32 %694, i32 %495;
    i32 %743 = add i32 %735, i32 %498;
    i32 %744 = mul i32 %742, i32 %743;
    i32 %745 = sdiv i32 %744, i32 2;
    i32 %746 = add i32 %694, i32 5;
    i32 %747 = add i32 %746, i32 %745;
    f32 %748 = s2f i32 %747 to f32;
    f32 %749 = fdiv f32 %741, f32 %748;
    f32 %750 = fadd f32 %739, f32 %749;
    f32* %751 = getelementptr &(f32* %697)[i64 5];
    f32 %752 = load f32* %751;
    i32 %753 = add i32 %694, i32 %494;
    i32 %754 = add i32 %746, i32 %498;
    i32 %755 = mul i32 %753, i32 %754;
    i32 %756 = sdiv i32 %755, i32 2;
    i32 %757 = add i32 %694, i32 6;
    i32 %758 = add i32 %757, i32 %756;
    f32 %759 = s2f i32 %758 to f32;
    f32 %760 = fdiv f32 %752, f32 %759;
    f32 %761 = fadd f32 %750, f32 %760;
    f32* %762 = getelementptr &(f32* %697)[i64 6];
    f32 %763 = load f32* %762;
    i32 %764 = add i32 %694, i32 %493;
    i32 %765 = add i32 %757, i32 %498;
    i32 %766 = mul i32 %764, i32 %765;
    i32 %767 = sdiv i32 %766, i32 2;
    i32 %768 = add i32 %694, i32 7;
    i32 %769 = add i32 %768, i32 %767;
    f32 %770 = s2f i32 %769 to f32;
    f32 %771 = fdiv f32 %763, f32 %770;
    f32 %772 = fadd f32 %761, f32 %771;
    f32* %773 = getelementptr &(f32* %697)[i64 7];
    f32 %774 = load f32* %773;
    i32 %775 = add i32 %694, i32 %492;
    i32 %776 = add i32 %768, i32 %498;
    i32 %777 = mul i32 %775, i32 %776;
    i32 %778 = sdiv i32 %777, i32 2;
    i32 %779 = add i32 %694, i32 8;
    i32 %780 = add i32 %779, i32 %778;
    f32 %781 = s2f i32 %780 to f32;
    f32 %782 = fdiv f32 %774, f32 %781;
    f32 %783 = fadd f32 %772, f32 %782;
    f32* %784 = getelementptr &(f32* %697)[i64 8];
    f32 %785 = load f32* %784;
    i32 %786 = add i32 %694, i32 %491;
    i32 %787 = add i32 %779, i32 %498;
    i32 %788 = mul i32 %786, i32 %787;
    i32 %789 = sdiv i32 %788, i32 2;
    i32 %790 = add i32 %694, i32 9;
    i32 %791 = add i32 %790, i32 %789;
    f32 %792 = s2f i32 %791 to f32;
    f32 %793 = fdiv f32 %785, f32 %792;
    f32 %794 = fadd f32 %783, f32 %793;
    f32* %795 = getelementptr &(f32* %697)[i64 9];
    f32 %796 = load f32* %795;
    i32 %797 = add i32 %694, i32 %490;
    i32 %798 = add i32 %790, i32 %498;
    i32 %799 = mul i32 %797, i32 %798;
    i32 %800 = sdiv i32 %799, i32 2;
    i32 %801 = add i32 %694, i32 10;
    i32 %802 = add i32 %801, i32 %800;
    f32 %803 = s2f i32 %802 to f32;
    f32 %804 = fdiv f32 %796, f32 %803;
    f32 %805 = fadd f32 %794, f32 %804;
    f32* %806 = getelementptr &(f32* %697)[i64 10];
    f32 %807 = load f32* %806;
    i32 %808 = add i32 %694, i32 %489;
    i32 %809 = add i32 %801, i32 %498;
    i32 %810 = mul i32 %808, i32 %809;
    i32 %811 = sdiv i32 %810, i32 2;
    i32 %812 = add i32 %694, i32 11;
    i32 %813 = add i32 %812, i32 %811;
    f32 %814 = s2f i32 %813 to f32;
    f32 %815 = fdiv f32 %807, f32 %814;
    f32 %816 = fadd f32 %805, f32 %815;
    f32* %817 = getelementptr &(f32* %697)[i64 11];
    f32 %818 = load f32* %817;
    i32 %819 = add i32 %694, i32 %488;
    i32 %820 = add i32 %812, i32 %498;
    i32 %821 = mul i32 %819, i32 %820;
    i32 %822 = sdiv i32 %821, i32 2;
    i32 %823 = add i32 %694, i32 12;
    i32 %824 = add i32 %823, i32 %822;
    f32 %825 = s2f i32 %824 to f32;
    f32 %826 = fdiv f32 %818, f32 %825;
    f32 %827 = fadd f32 %816, f32 %826;
    f32* %828 = getelementptr &(f32* %697)[i64 12];
    f32 %829 = load f32* %828;
    i32 %830 = add i32 %694, i32 %487;
    i32 %831 = add i32 %823, i32 %498;
    i32 %832 = mul i32 %830, i32 %831;
    i32 %833 = sdiv i32 %832, i32 2;
    i32 %834 = add i32 %694, i32 13;
    i32 %835 = add i32 %834, i32 %833;
    f32 %836 = s2f i32 %835 to f32;
    f32 %837 = fdiv f32 %829, f32 %836;
    f32 %838 = fadd f32 %827, f32 %837;
    f32* %839 = getelementptr &(f32* %697)[i64 13];
    f32 %840 = load f32* %839;
    i32 %841 = add i32 %694, i32 %486;
    i32 %842 = add i32 %834, i32 %498;
    i32 %843 = mul i32 %841, i32 %842;
    i32 %844 = sdiv i32 %843, i32 2;
    i32 %845 = add i32 %694, i32 14;
    i32 %846 = add i32 %845, i32 %844;
    f32 %847 = s2f i32 %846 to f32;
    f32 %848 = fdiv f32 %840, f32 %847;
    f32 %849 = fadd f32 %838, f32 %848;
    f32* %850 = getelementptr &(f32* %697)[i64 14];
    f32 %851 = load f32* %850;
    i32 %852 = add i32 %694, i32 %485;
    i32 %853 = add i32 %845, i32 %498;
    i32 %854 = mul i32 %852, i32 %853;
    i32 %855 = sdiv i32 %854, i32 2;
    i32 %856 = add i32 %694, i32 15;
    i32 %857 = add i32 %856, i32 %855;
    f32 %858 = s2f i32 %857 to f32;
    f32 %859 = fdiv f32 %851, f32 %858;
    f32 %860 = fadd f32 %849, f32 %859;
    f32* %861 = getelementptr &(f32* %697)[i64 15];
    f32 %862 = load f32* %861;
    i32 %863 = add i32 %694, i32 %484;
    i32 %864 = add i32 %856, i32 %498;
    i32 %865 = mul i32 %863, i32 %864;
    i32 %866 = sdiv i32 %865, i32 2;
    i32 %867 = add i32 %866, i32 %695;
    f32 %868 = s2f i32 %867 to f32;
    f32 %869 = fdiv f32 %862, f32 %868;
    f32 %870 = fadd f32 %860, f32 %869;
    ubr ^super.header3;
^while.body10:
    f32 %871 = phi [^super.header3, f32 %693] [^while.body10, f32 %883];
    i32 %872 = phi [^super.header3, i32 %694] [^while.body10, i32 %876];
    f32* %873 = getelementptr &(f32* %2)[i32 %872];
    f32 %874 = load f32* %873;
    i32 %875 = add i32 %285, i32 %872;
    i32 %876 = add i32 %872, i32 1;
    i32 %877 = add i32 %872, i32 %498;
    i32 %878 = mul i32 %875, i32 %877;
    i32 %879 = sdiv i32 %878, i32 2;
    i32 %880 = add i32 %876, i32 %879;
    f32 %881 = s2f i32 %880 to f32;
    f32 %882 = fdiv f32 %874, f32 %881;
    f32 %883 = fadd f32 %871, f32 %882;
    i1 %884 = scmp lt i32 %876, i32 100000;
    cbr i1 %884(prob = 0.97), ^while.body10, ^b3;
^while.body11:
    f32 %885 = phi [^b4, f32 0] [^while.body11, f32 %982];
    i32 %886 = phi [^b4, i32 0] [^while.body11, i32 %983];
    f32* %887 = getelementptr &(f32* %0)[i32 %886];
    f32 %888 = load f32* %887;
    f32* %889 = getelementptr &(f32* %1)[i32 %886];
    f32 %890 = load f32* %889;
    f32 %891 = fmul f32 %888, f32 %890;
    f32 %892 = fadd f32 %885, f32 %891;
    f32* %893 = getelementptr &(f32* %887)[i64 1];
    f32 %894 = load f32* %893;
    f32* %895 = getelementptr &(f32* %889)[i64 1];
    f32 %896 = load f32* %895;
    f32 %897 = fmul f32 %894, f32 %896;
    f32 %898 = fadd f32 %892, f32 %897;
    f32* %899 = getelementptr &(f32* %887)[i64 2];
    f32 %900 = load f32* %899;
    f32* %901 = getelementptr &(f32* %889)[i64 2];
    f32 %902 = load f32* %901;
    f32 %903 = fmul f32 %900, f32 %902;
    f32 %904 = fadd f32 %898, f32 %903;
    f32* %905 = getelementptr &(f32* %887)[i64 3];
    f32 %906 = load f32* %905;
    f32* %907 = getelementptr &(f32* %889)[i64 3];
    f32 %908 = load f32* %907;
    f32 %909 = fmul f32 %906, f32 %908;
    f32 %910 = fadd f32 %904, f32 %909;
    f32* %911 = getelementptr &(f32* %887)[i64 4];
    f32 %912 = load f32* %911;
    f32* %913 = getelementptr &(f32* %889)[i64 4];
    f32 %914 = load f32* %913;
    f32 %915 = fmul f32 %912, f32 %914;
    f32 %916 = fadd f32 %910, f32 %915;
    f32* %917 = getelementptr &(f32* %887)[i64 5];
    f32 %918 = load f32* %917;
    f32* %919 = getelementptr &(f32* %889)[i64 5];
    f32 %920 = load f32* %919;
    f32 %921 = fmul f32 %918, f32 %920;
    f32 %922 = fadd f32 %916, f32 %921;
    f32* %923 = getelementptr &(f32* %887)[i64 6];
    f32 %924 = load f32* %923;
    f32* %925 = getelementptr &(f32* %889)[i64 6];
    f32 %926 = load f32* %925;
    f32 %927 = fmul f32 %924, f32 %926;
    f32 %928 = fadd f32 %922, f32 %927;
    f32* %929 = getelementptr &(f32* %887)[i64 7];
    f32 %930 = load f32* %929;
    f32* %931 = getelementptr &(f32* %889)[i64 7];
    f32 %932 = load f32* %931;
    f32 %933 = fmul f32 %930, f32 %932;
    f32 %934 = fadd f32 %928, f32 %933;
    f32* %935 = getelementptr &(f32* %887)[i64 8];
    f32 %936 = load f32* %935;
    f32* %937 = getelementptr &(f32* %889)[i64 8];
    f32 %938 = load f32* %937;
    f32 %939 = fmul f32 %936, f32 %938;
    f32 %940 = fadd f32 %934, f32 %939;
    f32* %941 = getelementptr &(f32* %887)[i64 9];
    f32 %942 = load f32* %941;
    f32* %943 = getelementptr &(f32* %889)[i64 9];
    f32 %944 = load f32* %943;
    f32 %945 = fmul f32 %942, f32 %944;
    f32 %946 = fadd f32 %940, f32 %945;
    f32* %947 = getelementptr &(f32* %887)[i64 10];
    f32 %948 = load f32* %947;
    f32* %949 = getelementptr &(f32* %889)[i64 10];
    f32 %950 = load f32* %949;
    f32 %951 = fmul f32 %948, f32 %950;
    f32 %952 = fadd f32 %946, f32 %951;
    f32* %953 = getelementptr &(f32* %887)[i64 11];
    f32 %954 = load f32* %953;
    f32* %955 = getelementptr &(f32* %889)[i64 11];
    f32 %956 = load f32* %955;
    f32 %957 = fmul f32 %954, f32 %956;
    f32 %958 = fadd f32 %952, f32 %957;
    f32* %959 = getelementptr &(f32* %887)[i64 12];
    f32 %960 = load f32* %959;
    f32* %961 = getelementptr &(f32* %889)[i64 12];
    f32 %962 = load f32* %961;
    f32 %963 = fmul f32 %960, f32 %962;
    f32 %964 = fadd f32 %958, f32 %963;
    f32* %965 = getelementptr &(f32* %887)[i64 13];
    f32 %966 = load f32* %965;
    f32* %967 = getelementptr &(f32* %889)[i64 13];
    f32 %968 = load f32* %967;
    f32 %969 = fmul f32 %966, f32 %968;
    f32 %970 = fadd f32 %964, f32 %969;
    f32* %971 = getelementptr &(f32* %887)[i64 14];
    f32 %972 = load f32* %971;
    f32* %973 = getelementptr &(f32* %889)[i64 14];
    f32 %974 = load f32* %973;
    f32 %975 = fmul f32 %972, f32 %974;
    f32 %976 = fadd f32 %970, f32 %975;
    f32* %977 = getelementptr &(f32* %887)[i64 15];
    f32 %978 = load f32* %977;
    f32* %979 = getelementptr &(f32* %889)[i64 15];
    f32 %980 = load f32* %979;
    f32 %981 = fmul f32 %978, f32 %980;
    f32 %982 = fadd f32 %976, f32 %981;
    i32 %983 = add i32 %886, i32 16;
    i1 %984 = scmp lt i32 %983, i32 100000;
    cbr i1 %984(prob = 1), ^while.body11, ^while.body12;
^while.body12:
    f32 %985 = phi [^while.body11, f32 0] [^while.body12, f32 %1050];
    i32 %986 = phi [^while.body11, i32 0] [^while.body12, i32 %1051];
    f32* %987 = getelementptr &(f32* %1)[i32 %986];
    f32 %988 = load f32* %987;
    f32 %989 = fmul f32 %988, f32 %988;
    f32 %990 = fadd f32 %985, f32 %989;
    f32* %991 = getelementptr &(f32* %987)[i64 1];
    f32 %992 = load f32* %991;
    f32 %993 = fmul f32 %992, f32 %992;
    f32 %994 = fadd f32 %990, f32 %993;
    f32* %995 = getelementptr &(f32* %987)[i64 2];
    f32 %996 = load f32* %995;
    f32 %997 = fmul f32 %996, f32 %996;
    f32 %998 = fadd f32 %994, f32 %997;
    f32* %999 = getelementptr &(f32* %987)[i64 3];
    f32 %1000 = load f32* %999;
    f32 %1001 = fmul f32 %1000, f32 %1000;
    f32 %1002 = fadd f32 %998, f32 %1001;
    f32* %1003 = getelementptr &(f32* %987)[i64 4];
    f32 %1004 = load f32* %1003;
    f32 %1005 = fmul f32 %1004, f32 %1004;
    f32 %1006 = fadd f32 %1002, f32 %1005;
    f32* %1007 = getelementptr &(f32* %987)[i64 5];
    f32 %1008 = load f32* %1007;
    f32 %1009 = fmul f32 %1008, f32 %1008;
    f32 %1010 = fadd f32 %1006, f32 %1009;
    f32* %1011 = getelementptr &(f32* %987)[i64 6];
    f32 %1012 = load f32* %1011;
    f32 %1013 = fmul f32 %1012, f32 %1012;
    f32 %1014 = fadd f32 %1010, f32 %1013;
    f32* %1015 = getelementptr &(f32* %987)[i64 7];
    f32 %1016 = load f32* %1015;
    f32 %1017 = fmul f32 %1016, f32 %1016;
    f32 %1018 = fadd f32 %1014, f32 %1017;
    f32* %1019 = getelementptr &(f32* %987)[i64 8];
    f32 %1020 = load f32* %1019;
    f32 %1021 = fmul f32 %1020, f32 %1020;
    f32 %1022 = fadd f32 %1018, f32 %1021;
    f32* %1023 = getelementptr &(f32* %987)[i64 9];
    f32 %1024 = load f32* %1023;
    f32 %1025 = fmul f32 %1024, f32 %1024;
    f32 %1026 = fadd f32 %1022, f32 %1025;
    f32* %1027 = getelementptr &(f32* %987)[i64 10];
    f32 %1028 = load f32* %1027;
    f32 %1029 = fmul f32 %1028, f32 %1028;
    f32 %1030 = fadd f32 %1026, f32 %1029;
    f32* %1031 = getelementptr &(f32* %987)[i64 11];
    f32 %1032 = load f32* %1031;
    f32 %1033 = fmul f32 %1032, f32 %1032;
    f32 %1034 = fadd f32 %1030, f32 %1033;
    f32* %1035 = getelementptr &(f32* %987)[i64 12];
    f32 %1036 = load f32* %1035;
    f32 %1037 = fmul f32 %1036, f32 %1036;
    f32 %1038 = fadd f32 %1034, f32 %1037;
    f32* %1039 = getelementptr &(f32* %987)[i64 13];
    f32 %1040 = load f32* %1039;
    f32 %1041 = fmul f32 %1040, f32 %1040;
    f32 %1042 = fadd f32 %1038, f32 %1041;
    f32* %1043 = getelementptr &(f32* %987)[i64 14];
    f32 %1044 = load f32* %1043;
    f32 %1045 = fmul f32 %1044, f32 %1044;
    f32 %1046 = fadd f32 %1042, f32 %1045;
    f32* %1047 = getelementptr &(f32* %987)[i64 15];
    f32 %1048 = load f32* %1047;
    f32 %1049 = fmul f32 %1048, f32 %1048;
    f32 %1050 = fadd f32 %1046, f32 %1049;
    i32 %1051 = add i32 %986, i32 16;
    i1 %1052 = scmp lt i32 %1051, i32 100000;
    cbr i1 %1052(prob = 1), ^while.body12, ^b5;
^b5:
    f32 %1053 = fdiv f32 %982, f32 %1050;
    ubr ^while.header4;
^while.header4:
    f32 %1054 = phi [^b5, f32 1] [^while.body13, f32 %1061];
    f32 %1055 = fdiv f32 %1053, f32 %1054;
    f32 %1056 = fsub f32 %1054, f32 %1055;
    i1 %1057 = fcmp gt f32 %1056, f32 1e-06;
    cbr i1 %1057(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %1058 = fcmp lt f32 %1056, f32 -1e-06;
    ubr ^b7;
^b7:
    i1 %1059 = phi [^while.header4, i1 true] [^b6, i1 %1058];
    cbr i1 %1059(prob = 0.97), ^while.body13, ^b8;
^while.body13:
    f32 %1060 = fadd f32 %1054, f32 %1055;
    f32 %1061 = fmul f32 %1060, f32 0.5;
    ubr ^while.header4;
^b8:
    f32 %1062 = fsub f32 %1054, f32 1;
    i1 %1063 = fcmp le f32 %1062, f32 1e-06;
    cbr i1 %1063(prob = 0.5), ^b9, ^b10;
^b9:
    i1 %1064 = fcmp ge f32 %1062, f32 -1e-06;
    ubr ^b10;
^b10:
    i1 %1065 = phi [^b8, i1 false] [^b9, i1 %1064];
    i32 %1066 = zext i1 %1065 to i32;
    call (i32) -> void @putint(i32 %1066);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
