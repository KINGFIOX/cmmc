internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %66];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %2)[i64 16];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %2)[i64 17];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %2)[i64 18];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %2)[i64 19];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %2)[i64 20];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %2)[i64 21];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %2)[i64 22];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %2)[i64 23];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %2)[i64 24];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %2)[i64 25];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %2)[i64 26];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %2)[i64 27];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %2)[i64 28];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %2)[i64 29];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %2)[i64 30];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %2)[i64 31];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %2)[i64 32];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %2)[i64 33];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %2)[i64 34];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %2)[i64 35];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %2)[i64 36];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %2)[i64 37];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %2)[i64 38];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %2)[i64 39];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %2)[i64 40];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %2)[i64 41];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %2)[i64 42];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %2)[i64 43];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %2)[i64 44];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %2)[i64 45];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %2)[i64 46];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %2)[i64 47];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %2)[i64 48];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %2)[i64 49];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %2)[i64 50];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %2)[i64 51];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %2)[i64 52];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %2)[i64 53];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %2)[i64 54];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %2)[i64 55];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %2)[i64 56];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %2)[i64 57];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %2)[i64 58];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %2)[i64 59];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %2)[i64 60];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %2)[i64 61];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %2)[i64 62];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %2)[i64 63];
    store f32* %65 with f32 1;
    i32 %66 = add i32 %1, i32 64;
    i1 %67 = icmp slt i32 %66, i32 99968;
    cbr i1 %67(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    f32* %68 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %66];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %68)[i64 1];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %68)[i64 2];
    store f32* %70 with f32 1;
    f32* %71 = getelementptr &(f32* %68)[i64 3];
    store f32* %71 with f32 1;
    f32* %72 = getelementptr &(f32* %68)[i64 4];
    store f32* %72 with f32 1;
    f32* %73 = getelementptr &(f32* %68)[i64 5];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %68)[i64 6];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %68)[i64 7];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %68)[i64 8];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %68)[i64 9];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %68)[i64 10];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %68)[i64 11];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %68)[i64 12];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %68)[i64 13];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %68)[i64 14];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %68)[i64 15];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %68)[i64 16];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %68)[i64 17];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %68)[i64 18];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %68)[i64 19];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %68)[i64 20];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %68)[i64 21];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %68)[i64 22];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %68)[i64 23];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %68)[i64 24];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %68)[i64 25];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %68)[i64 26];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %68)[i64 27];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %68)[i64 28];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %68)[i64 29];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %68)[i64 30];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %68)[i64 31];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %101 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %102 = getelementptr &([100000 * f32]* %101)[i64 0][i64 0];
    [100000 * f32]* %103 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %104 = getelementptr &([100000 * f32]* %103)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^while.body6, i32 %221];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %110];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp slt i32 %107, i32 100000;
    cbr i1 %111(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %130];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %129];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %132];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body3, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body3, f32 %144];
    f32* %118 = getelementptr &(f32* %104)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 4;
    i1 %120 = icmp slt i32 %119, i32 100000;
    cbr i1 %120(prob = 0.89), ^prebody, ^while.body3;
  ^while.header3:
    i1 %121 = icmp slt i32 %113, i32 100000;
    cbr i1 %121(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %122 = phi [^while.header2, f32 0] [^b2, f32 %202];
    i32 %123 = phi [^while.header2, i32 0] [^b2, i32 %201];
    i32 %124 = phi [^while.header2, i32 0] [^b2, i32 %150];
    i1 %125 = icmp slt i32 %124, i32 100000;
    cbr i1 %125(prob = 0.97), ^while.header5, ^while.header6;
  ^prebody:
    i32 %126 = add i32 %108, i32 2;
    i32 %127 = add i32 %108, i32 3;
    i32 %128 = add i32 %108, i32 4;
    ubr ^while.body4;
  ^b1:
    i32 %129 = phi [^while.header3, i32 %113] [^while.body5, i32 100000];
    f32 %130 = phi [^while.header3, f32 %112] [^while.body5, f32 %216];
    f32* %131 = getelementptr &(f32* %102)[i32 %114];
    store f32* %131 with f32 %130;
    i32 %132 = add i32 %114, i32 1;
    ubr ^while.header2;
  ^while.body3 {scalar}:
    i32 %133 = phi [^super.header, i32 %107] [^while.body3, i32 %145] [^while.body4, i32 %199];
    f32 %134 = phi [^super.header, f32 %106] [^while.body3, f32 %144] [^while.body4, f32 %198];
    i32 %135 = add i32 %108, i32 %133;
    i32 %136 = add i32 %110, i32 %133;
    i32 %137 = mul i32 %135, i32 %136;
    i32 %138 = sdiv i32 %137, i32 2;
    i32 %139 = add i32 %110, i32 %138;
    f32 %140 = s2f i32 %139 to f32;
    f32* %141 = getelementptr &(f32* %100)[i32 %133];
    f32 %142 = load f32* %141;
    f32 %143 = fdiv f32 %142, f32 %140;
    f32 %144 = fadd f32 %134, f32 %143;
    i32 %145 = add i32 %133, i32 1;
    i1 %146 = icmp slt i32 %145, i32 100000;
    cbr i1 %146(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %147 = add i32 %113, i32 4;
    i1 %148 = icmp slt i32 %147, i32 100000;
    i32 %149 = add i32 %114, i32 1;
    cbr i1 %148(prob = 0.89), ^prebody1, ^while.body5;
  ^while.header5:
    i32 %150 = add i32 %124, i32 1;
    i1 %151 = icmp slt i32 %123, i32 100000;
    cbr i1 %151(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %152 = phi [^while.header4, f32 0] [^b3, f32 %271];
    i32 %153 = phi [^while.header4, i32 0] [^b3, i32 %270];
    i32 %154 = phi [^while.header4, i32 0] [^b3, i32 %273];
    i1 %155 = icmp slt i32 %154, i32 100000;
    cbr i1 %155(prob = 0.97), ^while.header7, ^while.body6;
  ^prebody1:
    i32 %156 = add i32 %114, i32 1;
    i32 %157 = add i32 %114, i32 2;
    i32 %158 = add i32 %114, i32 3;
    i32 %159 = add i32 %114, i32 4;
    ubr ^while.body7;
  ^while.body4:
    f32 %160 = phi [^prebody, f32 %106] [^while.body4, f32 %198];
    i32 %161 = phi [^prebody, i32 %107] [^while.body4, i32 %199];
    i32 %162 = add i32 %108, i32 %161;
    i32 %163 = add i32 %110, i32 %161;
    i32 %164 = mul i32 %162, i32 %163;
    i32 %165 = sdiv i32 %164, i32 2;
    i32 %166 = add i32 %110, i32 %165;
    f32 %167 = s2f i32 %166 to f32;
    f32* %168 = getelementptr &(f32* %100)[i32 %161];
    f32 %169 = load f32* %168;
    f32 %170 = fdiv f32 %169, f32 %167;
    f32 %171 = fadd f32 %160, f32 %170;
    i32 %172 = add i32 %126, i32 %161;
    i32 %173 = mul i32 %163, i32 %172;
    i32 %174 = sdiv i32 %173, i32 2;
    i32 %175 = add i32 %110, i32 %174;
    f32 %176 = s2f i32 %175 to f32;
    f32* %177 = getelementptr &(f32* %168)[i64 1];
    f32 %178 = load f32* %177;
    f32 %179 = fdiv f32 %178, f32 %176;
    f32 %180 = fadd f32 %171, f32 %179;
    i32 %181 = add i32 %127, i32 %161;
    i32 %182 = mul i32 %172, i32 %181;
    i32 %183 = sdiv i32 %182, i32 2;
    i32 %184 = add i32 %110, i32 %183;
    f32 %185 = s2f i32 %184 to f32;
    f32* %186 = getelementptr &(f32* %168)[i64 2];
    f32 %187 = load f32* %186;
    f32 %188 = fdiv f32 %187, f32 %185;
    f32 %189 = fadd f32 %180, f32 %188;
    i32 %190 = add i32 %128, i32 %161;
    i32 %191 = mul i32 %181, i32 %190;
    i32 %192 = sdiv i32 %191, i32 2;
    i32 %193 = add i32 %110, i32 %192;
    f32 %194 = s2f i32 %193 to f32;
    f32* %195 = getelementptr &(f32* %168)[i64 3];
    f32 %196 = load f32* %195;
    f32 %197 = fdiv f32 %196, f32 %194;
    f32 %198 = fadd f32 %189, f32 %197;
    i32 %199 = add i32 %161, i32 4;
    i1 %200 = icmp slt i32 %199, i32 99996;
    cbr i1 %200(prob = 0.89), ^while.body4, ^while.body3;
  ^b2:
    i32 %201 = phi [^while.header5, i32 %123] [^while.body8, i32 100000];
    f32 %202 = phi [^while.header5, f32 %122] [^while.body8, f32 %285];
    f32* %203 = getelementptr &(f32* %104)[i32 %124];
    store f32* %203 with f32 %202;
    ubr ^while.header4;
  ^while.body5 {scalar}:
    i32 %204 = phi [^super.header1, i32 %113] [^while.body5, i32 %210] [^while.body7, i32 %262];
    f32 %205 = phi [^super.header1, f32 %112] [^while.body5, f32 %216] [^while.body7, f32 %268];
    i32 %206 = add i32 %114, i32 %204;
    i32 %207 = add i32 %149, i32 %204;
    i32 %208 = mul i32 %206, i32 %207;
    i32 %209 = sdiv i32 %208, i32 2;
    i32 %210 = add i32 %204, i32 1;
    i32 %211 = add i32 %209, i32 %210;
    f32 %212 = s2f i32 %211 to f32;
    f32* %213 = getelementptr &(f32* %104)[i32 %204];
    f32 %214 = load f32* %213;
    f32 %215 = fdiv f32 %214, f32 %212;
    f32 %216 = fadd f32 %205, f32 %215;
    i1 %217 = icmp slt i32 %210, i32 100000;
    cbr i1 %217(prob = 0.75), ^while.body5, ^b1;
  ^super.header2:
    i32 %218 = add i32 %123, i32 4;
    i1 %219 = icmp slt i32 %218, i32 100000;
    cbr i1 %219(prob = 0.89), ^prebody2, ^while.body8;
  ^while.header7:
    i1 %220 = icmp slt i32 %153, i32 100000;
    cbr i1 %220(prob = 0.97), ^super.header3, ^b3;
  ^while.body6:
    i32 %221 = add i32 %105, i32 1;
    i1 %222 = icmp slt i32 %221, i32 1000;
    cbr i1 %222(prob = 1), ^while.body2, ^b4;
  ^prebody2:
    i32 %223 = add i32 %124, i32 2;
    i32 %224 = add i32 %124, i32 3;
    i32 %225 = add i32 %124, i32 4;
    ubr ^while.body9;
  ^while.body7:
    f32 %226 = phi [^prebody1, f32 %112] [^while.body7, f32 %268];
    i32 %227 = phi [^prebody1, i32 %113] [^while.body7, i32 %262];
    i32 %228 = add i32 %114, i32 %227;
    i32 %229 = add i32 %156, i32 %227;
    i32 %230 = mul i32 %228, i32 %229;
    i32 %231 = sdiv i32 %230, i32 2;
    i32 %232 = add i32 %227, i32 1;
    i32 %233 = add i32 %231, i32 %232;
    f32 %234 = s2f i32 %233 to f32;
    f32* %235 = getelementptr &(f32* %104)[i32 %227];
    f32 %236 = load f32* %235;
    f32 %237 = fdiv f32 %236, f32 %234;
    f32 %238 = fadd f32 %226, f32 %237;
    i32 %239 = add i32 %157, i32 %227;
    i32 %240 = mul i32 %229, i32 %239;
    i32 %241 = sdiv i32 %240, i32 2;
    i32 %242 = add i32 %227, i32 2;
    i32 %243 = add i32 %241, i32 %242;
    f32 %244 = s2f i32 %243 to f32;
    f32* %245 = getelementptr &(f32* %235)[i64 1];
    f32 %246 = load f32* %245;
    f32 %247 = fdiv f32 %246, f32 %244;
    f32 %248 = fadd f32 %238, f32 %247;
    i32 %249 = add i32 %158, i32 %227;
    i32 %250 = mul i32 %239, i32 %249;
    i32 %251 = sdiv i32 %250, i32 2;
    i32 %252 = add i32 %227, i32 3;
    i32 %253 = add i32 %251, i32 %252;
    f32 %254 = s2f i32 %253 to f32;
    f32* %255 = getelementptr &(f32* %235)[i64 2];
    f32 %256 = load f32* %255;
    f32 %257 = fdiv f32 %256, f32 %254;
    f32 %258 = fadd f32 %248, f32 %257;
    i32 %259 = add i32 %159, i32 %227;
    i32 %260 = mul i32 %249, i32 %259;
    i32 %261 = sdiv i32 %260, i32 2;
    i32 %262 = add i32 %227, i32 4;
    i32 %263 = add i32 %261, i32 %262;
    f32 %264 = s2f i32 %263 to f32;
    f32* %265 = getelementptr &(f32* %235)[i64 3];
    f32 %266 = load f32* %265;
    f32 %267 = fdiv f32 %266, f32 %264;
    f32 %268 = fadd f32 %258, f32 %267;
    i1 %269 = icmp slt i32 %262, i32 99996;
    cbr i1 %269(prob = 0.89), ^while.body7, ^while.body5;
  ^b3:
    i32 %270 = phi [^while.header7, i32 %153] [^while.body10, i32 100000];
    f32 %271 = phi [^while.header7, f32 %152] [^while.body10, f32 %348];
    f32* %272 = getelementptr &(f32* %100)[i32 %154];
    store f32* %272 with f32 %271;
    i32 %273 = add i32 %154, i32 1;
    ubr ^while.header6;
  ^while.body8 {scalar}:
    i32 %274 = phi [^super.header2, i32 %123] [^while.body8, i32 %286] [^while.body9, i32 %334];
    f32 %275 = phi [^super.header2, f32 %122] [^while.body8, f32 %285] [^while.body9, f32 %333];
    i32 %276 = add i32 %124, i32 %274;
    i32 %277 = add i32 %150, i32 %274;
    i32 %278 = mul i32 %276, i32 %277;
    i32 %279 = sdiv i32 %278, i32 2;
    i32 %280 = add i32 %150, i32 %279;
    f32 %281 = s2f i32 %280 to f32;
    f32* %282 = getelementptr &(f32* %102)[i32 %274];
    f32 %283 = load f32* %282;
    f32 %284 = fdiv f32 %283, f32 %281;
    f32 %285 = fadd f32 %275, f32 %284;
    i32 %286 = add i32 %274, i32 1;
    i1 %287 = icmp slt i32 %286, i32 100000;
    cbr i1 %287(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %288 = add i32 %153, i32 4;
    i1 %289 = icmp slt i32 %288, i32 100000;
    i32 %290 = add i32 %154, i32 1;
    cbr i1 %289(prob = 0.89), ^prebody3, ^while.body10;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body11;
  ^prebody3:
    i32 %291 = add i32 %154, i32 1;
    i32 %292 = add i32 %154, i32 2;
    i32 %293 = add i32 %154, i32 3;
    i32 %294 = add i32 %154, i32 4;
    ubr ^while.body12;
  ^while.body9:
    f32 %295 = phi [^prebody2, f32 %122] [^while.body9, f32 %333];
    i32 %296 = phi [^prebody2, i32 %123] [^while.body9, i32 %334];
    i32 %297 = add i32 %124, i32 %296;
    i32 %298 = add i32 %150, i32 %296;
    i32 %299 = mul i32 %297, i32 %298;
    i32 %300 = sdiv i32 %299, i32 2;
    i32 %301 = add i32 %150, i32 %300;
    f32 %302 = s2f i32 %301 to f32;
    f32* %303 = getelementptr &(f32* %102)[i32 %296];
    f32 %304 = load f32* %303;
    f32 %305 = fdiv f32 %304, f32 %302;
    f32 %306 = fadd f32 %295, f32 %305;
    i32 %307 = add i32 %223, i32 %296;
    i32 %308 = mul i32 %298, i32 %307;
    i32 %309 = sdiv i32 %308, i32 2;
    i32 %310 = add i32 %150, i32 %309;
    f32 %311 = s2f i32 %310 to f32;
    f32* %312 = getelementptr &(f32* %303)[i64 1];
    f32 %313 = load f32* %312;
    f32 %314 = fdiv f32 %313, f32 %311;
    f32 %315 = fadd f32 %306, f32 %314;
    i32 %316 = add i32 %224, i32 %296;
    i32 %317 = mul i32 %307, i32 %316;
    i32 %318 = sdiv i32 %317, i32 2;
    i32 %319 = add i32 %150, i32 %318;
    f32 %320 = s2f i32 %319 to f32;
    f32* %321 = getelementptr &(f32* %303)[i64 2];
    f32 %322 = load f32* %321;
    f32 %323 = fdiv f32 %322, f32 %320;
    f32 %324 = fadd f32 %315, f32 %323;
    i32 %325 = add i32 %225, i32 %296;
    i32 %326 = mul i32 %316, i32 %325;
    i32 %327 = sdiv i32 %326, i32 2;
    i32 %328 = add i32 %150, i32 %327;
    f32 %329 = s2f i32 %328 to f32;
    f32* %330 = getelementptr &(f32* %303)[i64 3];
    f32 %331 = load f32* %330;
    f32 %332 = fdiv f32 %331, f32 %329;
    f32 %333 = fadd f32 %324, f32 %332;
    i32 %334 = add i32 %296, i32 4;
    i1 %335 = icmp slt i32 %334, i32 99996;
    cbr i1 %335(prob = 0.89), ^while.body9, ^while.body8;
  ^while.body10 {scalar}:
    i32 %336 = phi [^super.header3, i32 %153] [^while.body10, i32 %342] [^while.body12, i32 %486];
    f32 %337 = phi [^super.header3, f32 %152] [^while.body10, f32 %348] [^while.body12, f32 %492];
    i32 %338 = add i32 %154, i32 %336;
    i32 %339 = add i32 %290, i32 %336;
    i32 %340 = mul i32 %338, i32 %339;
    i32 %341 = sdiv i32 %340, i32 2;
    i32 %342 = add i32 %336, i32 1;
    i32 %343 = add i32 %341, i32 %342;
    f32 %344 = s2f i32 %343 to f32;
    f32* %345 = getelementptr &(f32* %104)[i32 %336];
    f32 %346 = load f32* %345;
    f32 %347 = fdiv f32 %346, f32 %344;
    f32 %348 = fadd f32 %337, f32 %347;
    i1 %349 = icmp slt i32 %342, i32 100000;
    cbr i1 %349(prob = 0.75), ^while.body10, ^b3;
  ^while.body11:
    f32 %350 = phi [^b4, f32 0] [^while.body11, f32 %447];
    i32 %351 = phi [^b4, i32 0] [^while.body11, i32 %448];
    f32* %352 = getelementptr &(f32* %100)[i32 %351];
    f32 %353 = load f32* %352;
    f32* %354 = getelementptr &(f32* %102)[i32 %351];
    f32 %355 = load f32* %354;
    f32 %356 = fmul f32 %353, f32 %355;
    f32 %357 = fadd f32 %350, f32 %356;
    f32* %358 = getelementptr &(f32* %352)[i64 1];
    f32 %359 = load f32* %358;
    f32* %360 = getelementptr &(f32* %354)[i64 1];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 %359, f32 %361;
    f32 %363 = fadd f32 %357, f32 %362;
    f32* %364 = getelementptr &(f32* %352)[i64 2];
    f32 %365 = load f32* %364;
    f32* %366 = getelementptr &(f32* %354)[i64 2];
    f32 %367 = load f32* %366;
    f32 %368 = fmul f32 %365, f32 %367;
    f32 %369 = fadd f32 %363, f32 %368;
    f32* %370 = getelementptr &(f32* %352)[i64 3];
    f32 %371 = load f32* %370;
    f32* %372 = getelementptr &(f32* %354)[i64 3];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 %371, f32 %373;
    f32 %375 = fadd f32 %369, f32 %374;
    f32* %376 = getelementptr &(f32* %352)[i64 4];
    f32 %377 = load f32* %376;
    f32* %378 = getelementptr &(f32* %354)[i64 4];
    f32 %379 = load f32* %378;
    f32 %380 = fmul f32 %377, f32 %379;
    f32 %381 = fadd f32 %375, f32 %380;
    f32* %382 = getelementptr &(f32* %352)[i64 5];
    f32 %383 = load f32* %382;
    f32* %384 = getelementptr &(f32* %354)[i64 5];
    f32 %385 = load f32* %384;
    f32 %386 = fmul f32 %383, f32 %385;
    f32 %387 = fadd f32 %381, f32 %386;
    f32* %388 = getelementptr &(f32* %352)[i64 6];
    f32 %389 = load f32* %388;
    f32* %390 = getelementptr &(f32* %354)[i64 6];
    f32 %391 = load f32* %390;
    f32 %392 = fmul f32 %389, f32 %391;
    f32 %393 = fadd f32 %387, f32 %392;
    f32* %394 = getelementptr &(f32* %352)[i64 7];
    f32 %395 = load f32* %394;
    f32* %396 = getelementptr &(f32* %354)[i64 7];
    f32 %397 = load f32* %396;
    f32 %398 = fmul f32 %395, f32 %397;
    f32 %399 = fadd f32 %393, f32 %398;
    f32* %400 = getelementptr &(f32* %352)[i64 8];
    f32 %401 = load f32* %400;
    f32* %402 = getelementptr &(f32* %354)[i64 8];
    f32 %403 = load f32* %402;
    f32 %404 = fmul f32 %401, f32 %403;
    f32 %405 = fadd f32 %399, f32 %404;
    f32* %406 = getelementptr &(f32* %352)[i64 9];
    f32 %407 = load f32* %406;
    f32* %408 = getelementptr &(f32* %354)[i64 9];
    f32 %409 = load f32* %408;
    f32 %410 = fmul f32 %407, f32 %409;
    f32 %411 = fadd f32 %405, f32 %410;
    f32* %412 = getelementptr &(f32* %352)[i64 10];
    f32 %413 = load f32* %412;
    f32* %414 = getelementptr &(f32* %354)[i64 10];
    f32 %415 = load f32* %414;
    f32 %416 = fmul f32 %413, f32 %415;
    f32 %417 = fadd f32 %411, f32 %416;
    f32* %418 = getelementptr &(f32* %352)[i64 11];
    f32 %419 = load f32* %418;
    f32* %420 = getelementptr &(f32* %354)[i64 11];
    f32 %421 = load f32* %420;
    f32 %422 = fmul f32 %419, f32 %421;
    f32 %423 = fadd f32 %417, f32 %422;
    f32* %424 = getelementptr &(f32* %352)[i64 12];
    f32 %425 = load f32* %424;
    f32* %426 = getelementptr &(f32* %354)[i64 12];
    f32 %427 = load f32* %426;
    f32 %428 = fmul f32 %425, f32 %427;
    f32 %429 = fadd f32 %423, f32 %428;
    f32* %430 = getelementptr &(f32* %352)[i64 13];
    f32 %431 = load f32* %430;
    f32* %432 = getelementptr &(f32* %354)[i64 13];
    f32 %433 = load f32* %432;
    f32 %434 = fmul f32 %431, f32 %433;
    f32 %435 = fadd f32 %429, f32 %434;
    f32* %436 = getelementptr &(f32* %352)[i64 14];
    f32 %437 = load f32* %436;
    f32* %438 = getelementptr &(f32* %354)[i64 14];
    f32 %439 = load f32* %438;
    f32 %440 = fmul f32 %437, f32 %439;
    f32 %441 = fadd f32 %435, f32 %440;
    f32* %442 = getelementptr &(f32* %352)[i64 15];
    f32 %443 = load f32* %442;
    f32* %444 = getelementptr &(f32* %354)[i64 15];
    f32 %445 = load f32* %444;
    f32 %446 = fmul f32 %443, f32 %445;
    f32 %447 = fadd f32 %441, f32 %446;
    i32 %448 = add i32 %351, i32 16;
    i1 %449 = icmp slt i32 %448, i32 99984;
    cbr i1 %449(prob = 1), ^while.body11, ^while.body13;
  ^while.body12:
    f32 %450 = phi [^prebody3, f32 %152] [^while.body12, f32 %492];
    i32 %451 = phi [^prebody3, i32 %153] [^while.body12, i32 %486];
    i32 %452 = add i32 %154, i32 %451;
    i32 %453 = add i32 %291, i32 %451;
    i32 %454 = mul i32 %452, i32 %453;
    i32 %455 = sdiv i32 %454, i32 2;
    i32 %456 = add i32 %451, i32 1;
    i32 %457 = add i32 %455, i32 %456;
    f32 %458 = s2f i32 %457 to f32;
    f32* %459 = getelementptr &(f32* %104)[i32 %451];
    f32 %460 = load f32* %459;
    f32 %461 = fdiv f32 %460, f32 %458;
    f32 %462 = fadd f32 %450, f32 %461;
    i32 %463 = add i32 %292, i32 %451;
    i32 %464 = mul i32 %453, i32 %463;
    i32 %465 = sdiv i32 %464, i32 2;
    i32 %466 = add i32 %451, i32 2;
    i32 %467 = add i32 %465, i32 %466;
    f32 %468 = s2f i32 %467 to f32;
    f32* %469 = getelementptr &(f32* %459)[i64 1];
    f32 %470 = load f32* %469;
    f32 %471 = fdiv f32 %470, f32 %468;
    f32 %472 = fadd f32 %462, f32 %471;
    i32 %473 = add i32 %293, i32 %451;
    i32 %474 = mul i32 %463, i32 %473;
    i32 %475 = sdiv i32 %474, i32 2;
    i32 %476 = add i32 %451, i32 3;
    i32 %477 = add i32 %475, i32 %476;
    f32 %478 = s2f i32 %477 to f32;
    f32* %479 = getelementptr &(f32* %459)[i64 2];
    f32 %480 = load f32* %479;
    f32 %481 = fdiv f32 %480, f32 %478;
    f32 %482 = fadd f32 %472, f32 %481;
    i32 %483 = add i32 %294, i32 %451;
    i32 %484 = mul i32 %473, i32 %483;
    i32 %485 = sdiv i32 %484, i32 2;
    i32 %486 = add i32 %451, i32 4;
    i32 %487 = add i32 %485, i32 %486;
    f32 %488 = s2f i32 %487 to f32;
    f32* %489 = getelementptr &(f32* %459)[i64 3];
    f32 %490 = load f32* %489;
    f32 %491 = fdiv f32 %490, f32 %488;
    f32 %492 = fadd f32 %482, f32 %491;
    i1 %493 = icmp slt i32 %486, i32 99996;
    cbr i1 %493(prob = 0.89), ^while.body12, ^while.body10;
  ^while.body13:
    f32* %494 = getelementptr &(f32* %100)[i32 %448];
    f32 %495 = load f32* %494;
    f32* %496 = getelementptr &(f32* %102)[i32 %448];
    f32 %497 = load f32* %496;
    f32 %498 = fmul f32 %495, f32 %497;
    f32 %499 = fadd f32 %447, f32 %498;
    f32* %500 = getelementptr &(f32* %494)[i64 1];
    f32 %501 = load f32* %500;
    f32* %502 = getelementptr &(f32* %496)[i64 1];
    f32 %503 = load f32* %502;
    f32 %504 = fmul f32 %501, f32 %503;
    f32 %505 = fadd f32 %499, f32 %504;
    f32* %506 = getelementptr &(f32* %494)[i64 2];
    f32 %507 = load f32* %506;
    f32* %508 = getelementptr &(f32* %496)[i64 2];
    f32 %509 = load f32* %508;
    f32 %510 = fmul f32 %507, f32 %509;
    f32 %511 = fadd f32 %505, f32 %510;
    f32* %512 = getelementptr &(f32* %494)[i64 3];
    f32 %513 = load f32* %512;
    f32* %514 = getelementptr &(f32* %496)[i64 3];
    f32 %515 = load f32* %514;
    f32 %516 = fmul f32 %513, f32 %515;
    f32 %517 = fadd f32 %511, f32 %516;
    f32* %518 = getelementptr &(f32* %494)[i64 4];
    f32 %519 = load f32* %518;
    f32* %520 = getelementptr &(f32* %496)[i64 4];
    f32 %521 = load f32* %520;
    f32 %522 = fmul f32 %519, f32 %521;
    f32 %523 = fadd f32 %517, f32 %522;
    f32* %524 = getelementptr &(f32* %494)[i64 5];
    f32 %525 = load f32* %524;
    f32* %526 = getelementptr &(f32* %496)[i64 5];
    f32 %527 = load f32* %526;
    f32 %528 = fmul f32 %525, f32 %527;
    f32 %529 = fadd f32 %523, f32 %528;
    f32* %530 = getelementptr &(f32* %494)[i64 6];
    f32 %531 = load f32* %530;
    f32* %532 = getelementptr &(f32* %496)[i64 6];
    f32 %533 = load f32* %532;
    f32 %534 = fmul f32 %531, f32 %533;
    f32 %535 = fadd f32 %529, f32 %534;
    f32* %536 = getelementptr &(f32* %494)[i64 7];
    f32 %537 = load f32* %536;
    f32* %538 = getelementptr &(f32* %496)[i64 7];
    f32 %539 = load f32* %538;
    f32 %540 = fmul f32 %537, f32 %539;
    f32 %541 = fadd f32 %535, f32 %540;
    f32* %542 = getelementptr &(f32* %494)[i64 8];
    f32 %543 = load f32* %542;
    f32* %544 = getelementptr &(f32* %496)[i64 8];
    f32 %545 = load f32* %544;
    f32 %546 = fmul f32 %543, f32 %545;
    f32 %547 = fadd f32 %541, f32 %546;
    f32* %548 = getelementptr &(f32* %494)[i64 9];
    f32 %549 = load f32* %548;
    f32* %550 = getelementptr &(f32* %496)[i64 9];
    f32 %551 = load f32* %550;
    f32 %552 = fmul f32 %549, f32 %551;
    f32 %553 = fadd f32 %547, f32 %552;
    f32* %554 = getelementptr &(f32* %494)[i64 10];
    f32 %555 = load f32* %554;
    f32* %556 = getelementptr &(f32* %496)[i64 10];
    f32 %557 = load f32* %556;
    f32 %558 = fmul f32 %555, f32 %557;
    f32 %559 = fadd f32 %553, f32 %558;
    f32* %560 = getelementptr &(f32* %494)[i64 11];
    f32 %561 = load f32* %560;
    f32* %562 = getelementptr &(f32* %496)[i64 11];
    f32 %563 = load f32* %562;
    f32 %564 = fmul f32 %561, f32 %563;
    f32 %565 = fadd f32 %559, f32 %564;
    i32 %566 = add i32 %351, i32 28;
    ubr ^while.body14;
  ^while.body14 {scalar}:
    i32 %567 = phi [^while.body13, i32 %566] [^while.body14, i32 %575];
    f32 %568 = phi [^while.body13, f32 %565] [^while.body14, f32 %574];
    f32* %569 = getelementptr &(f32* %100)[i32 %567];
    f32 %570 = load f32* %569;
    f32* %571 = getelementptr &(f32* %102)[i32 %567];
    f32 %572 = load f32* %571;
    f32 %573 = fmul f32 %570, f32 %572;
    f32 %574 = fadd f32 %568, f32 %573;
    i32 %575 = add i32 %567, i32 1;
    i1 %576 = icmp slt i32 %575, i32 100000;
    cbr i1 %576(prob = 0.75), ^while.body14, ^while.body15;
  ^while.body15:
    f32 %577 = phi [^while.body14, f32 0] [^while.body15, f32 %642];
    i32 %578 = phi [^while.body14, i32 0] [^while.body15, i32 %643];
    f32* %579 = getelementptr &(f32* %102)[i32 %578];
    f32 %580 = load f32* %579;
    f32 %581 = fmul f32 %580, f32 %580;
    f32 %582 = fadd f32 %577, f32 %581;
    f32* %583 = getelementptr &(f32* %579)[i64 1];
    f32 %584 = load f32* %583;
    f32 %585 = fmul f32 %584, f32 %584;
    f32 %586 = fadd f32 %582, f32 %585;
    f32* %587 = getelementptr &(f32* %579)[i64 2];
    f32 %588 = load f32* %587;
    f32 %589 = fmul f32 %588, f32 %588;
    f32 %590 = fadd f32 %586, f32 %589;
    f32* %591 = getelementptr &(f32* %579)[i64 3];
    f32 %592 = load f32* %591;
    f32 %593 = fmul f32 %592, f32 %592;
    f32 %594 = fadd f32 %590, f32 %593;
    f32* %595 = getelementptr &(f32* %579)[i64 4];
    f32 %596 = load f32* %595;
    f32 %597 = fmul f32 %596, f32 %596;
    f32 %598 = fadd f32 %594, f32 %597;
    f32* %599 = getelementptr &(f32* %579)[i64 5];
    f32 %600 = load f32* %599;
    f32 %601 = fmul f32 %600, f32 %600;
    f32 %602 = fadd f32 %598, f32 %601;
    f32* %603 = getelementptr &(f32* %579)[i64 6];
    f32 %604 = load f32* %603;
    f32 %605 = fmul f32 %604, f32 %604;
    f32 %606 = fadd f32 %602, f32 %605;
    f32* %607 = getelementptr &(f32* %579)[i64 7];
    f32 %608 = load f32* %607;
    f32 %609 = fmul f32 %608, f32 %608;
    f32 %610 = fadd f32 %606, f32 %609;
    f32* %611 = getelementptr &(f32* %579)[i64 8];
    f32 %612 = load f32* %611;
    f32 %613 = fmul f32 %612, f32 %612;
    f32 %614 = fadd f32 %610, f32 %613;
    f32* %615 = getelementptr &(f32* %579)[i64 9];
    f32 %616 = load f32* %615;
    f32 %617 = fmul f32 %616, f32 %616;
    f32 %618 = fadd f32 %614, f32 %617;
    f32* %619 = getelementptr &(f32* %579)[i64 10];
    f32 %620 = load f32* %619;
    f32 %621 = fmul f32 %620, f32 %620;
    f32 %622 = fadd f32 %618, f32 %621;
    f32* %623 = getelementptr &(f32* %579)[i64 11];
    f32 %624 = load f32* %623;
    f32 %625 = fmul f32 %624, f32 %624;
    f32 %626 = fadd f32 %622, f32 %625;
    f32* %627 = getelementptr &(f32* %579)[i64 12];
    f32 %628 = load f32* %627;
    f32 %629 = fmul f32 %628, f32 %628;
    f32 %630 = fadd f32 %626, f32 %629;
    f32* %631 = getelementptr &(f32* %579)[i64 13];
    f32 %632 = load f32* %631;
    f32 %633 = fmul f32 %632, f32 %632;
    f32 %634 = fadd f32 %630, f32 %633;
    f32* %635 = getelementptr &(f32* %579)[i64 14];
    f32 %636 = load f32* %635;
    f32 %637 = fmul f32 %636, f32 %636;
    f32 %638 = fadd f32 %634, f32 %637;
    f32* %639 = getelementptr &(f32* %579)[i64 15];
    f32 %640 = load f32* %639;
    f32 %641 = fmul f32 %640, f32 %640;
    f32 %642 = fadd f32 %638, f32 %641;
    i32 %643 = add i32 %578, i32 16;
    i1 %644 = icmp slt i32 %643, i32 99984;
    cbr i1 %644(prob = 1), ^while.body15, ^while.body16;
  ^while.body16:
    f32* %645 = getelementptr &(f32* %102)[i32 %643];
    f32 %646 = load f32* %645;
    f32 %647 = fmul f32 %646, f32 %646;
    f32 %648 = fadd f32 %642, f32 %647;
    f32* %649 = getelementptr &(f32* %645)[i64 1];
    f32 %650 = load f32* %649;
    f32 %651 = fmul f32 %650, f32 %650;
    f32 %652 = fadd f32 %648, f32 %651;
    f32* %653 = getelementptr &(f32* %645)[i64 2];
    f32 %654 = load f32* %653;
    f32 %655 = fmul f32 %654, f32 %654;
    f32 %656 = fadd f32 %652, f32 %655;
    f32* %657 = getelementptr &(f32* %645)[i64 3];
    f32 %658 = load f32* %657;
    f32 %659 = fmul f32 %658, f32 %658;
    f32 %660 = fadd f32 %656, f32 %659;
    f32* %661 = getelementptr &(f32* %645)[i64 4];
    f32 %662 = load f32* %661;
    f32 %663 = fmul f32 %662, f32 %662;
    f32 %664 = fadd f32 %660, f32 %663;
    f32* %665 = getelementptr &(f32* %645)[i64 5];
    f32 %666 = load f32* %665;
    f32 %667 = fmul f32 %666, f32 %666;
    f32 %668 = fadd f32 %664, f32 %667;
    f32* %669 = getelementptr &(f32* %645)[i64 6];
    f32 %670 = load f32* %669;
    f32 %671 = fmul f32 %670, f32 %670;
    f32 %672 = fadd f32 %668, f32 %671;
    f32* %673 = getelementptr &(f32* %645)[i64 7];
    f32 %674 = load f32* %673;
    f32 %675 = fmul f32 %674, f32 %674;
    f32 %676 = fadd f32 %672, f32 %675;
    f32* %677 = getelementptr &(f32* %645)[i64 8];
    f32 %678 = load f32* %677;
    f32 %679 = fmul f32 %678, f32 %678;
    f32 %680 = fadd f32 %676, f32 %679;
    f32* %681 = getelementptr &(f32* %645)[i64 9];
    f32 %682 = load f32* %681;
    f32 %683 = fmul f32 %682, f32 %682;
    f32 %684 = fadd f32 %680, f32 %683;
    f32* %685 = getelementptr &(f32* %645)[i64 10];
    f32 %686 = load f32* %685;
    f32 %687 = fmul f32 %686, f32 %686;
    f32 %688 = fadd f32 %684, f32 %687;
    f32* %689 = getelementptr &(f32* %645)[i64 11];
    f32 %690 = load f32* %689;
    f32 %691 = fmul f32 %690, f32 %690;
    f32 %692 = fadd f32 %688, f32 %691;
    i32 %693 = add i32 %578, i32 28;
    ubr ^while.body17;
  ^while.body17 {scalar}:
    i32 %694 = phi [^while.body16, i32 %693] [^while.body17, i32 %700];
    f32 %695 = phi [^while.body16, f32 %692] [^while.body17, f32 %699];
    f32* %696 = getelementptr &(f32* %102)[i32 %694];
    f32 %697 = load f32* %696;
    f32 %698 = fmul f32 %697, f32 %697;
    f32 %699 = fadd f32 %695, f32 %698;
    i32 %700 = add i32 %694, i32 1;
    i1 %701 = icmp slt i32 %700, i32 100000;
    cbr i1 %701(prob = 0.75), ^while.body17, ^b5;
  ^b5:
    f32 %702 = fdiv f32 %574, f32 %699;
    f32 %703 = fsub f32 1, f32 %702;
    i1 %704 = fcmp ogt f32 %703, f32 1e-06;
    i1 %705 = fcmp olt f32 %703, f32 -1e-06;
    i1 %706 = or i1 %704, i1 %705;
    cbr i1 %706(prob = 0.98), ^while.body18, ^b6;
  ^while.body18:
    f32 %707 = phi [^b5, f32 %702] [^while.body18, f32 %711];
    f32 %708 = phi [^b5, f32 1] [^while.body18, f32 %710];
    f32 %709 = fadd f32 %708, f32 %707;
    f32 %710 = fmul f32 %709, f32 0.5;
    f32 %711 = fdiv f32 %702, f32 %710;
    f32 %712 = fsub f32 %710, f32 %711;
    i1 %713 = fcmp ogt f32 %712, f32 1e-06;
    i1 %714 = fcmp olt f32 %712, f32 -1e-06;
    i1 %715 = or i1 %713, i1 %714;
    cbr i1 %715(prob = 0.98), ^while.body18, ^b6;
  ^b6:
    f32 %716 = phi [^b5, f32 1] [^while.body18, f32 %710];
    f32 %717 = fsub f32 %716, f32 1;
    i1 %718 = fcmp ole f32 %717, f32 1e-06;
    i1 %719 = fcmp oge f32 %717, f32 -1e-06;
    i1 %720 = and i1 %718, i1 %719;
    i32 %721 = zext i1 %720 to i32;
    call (i32) -> void @putint(i32 %721);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
