internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %18];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    i32 %18 = add i32 %1, i32 16;
    i1 %19 = icmp slt i32 %18, i32 100000;
    cbr i1 %19(prob = 1), ^while.body, ^prebody;
  ^prebody:
    f32* %20 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %21 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %22 = getelementptr &([100000 * f32]* %21)[i64 0][i64 0];
    [100000 * f32]* %23 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %24 = getelementptr &([100000 * f32]* %23)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^prebody, i32 0] [^while.body4, i32 %134];
    ubr ^while.header;
  ^while.header:
    f32 %26 = phi [^while.body1, f32 0] [^b, f32 %39];
    i32 %27 = phi [^while.body1, i32 0] [^b, i32 %38];
    i32 %28 = phi [^while.body1, i32 0] [^b, i32 %32];
    i1 %29 = icmp slt i32 %28, i32 100000;
    cbr i1 %29(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %30 = add i32 %28, i32 3;
    i32 %31 = add i32 %28, i32 2;
    i32 %32 = add i32 %28, i32 1;
    i1 %33 = icmp slt i32 %27, i32 100000;
    cbr i1 %33(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %34 = phi [^while.header, f32 0] [^b1, f32 %93];
    i32 %35 = phi [^while.header, i32 0] [^b1, i32 %92];
    i32 %36 = phi [^while.header, i32 0] [^b1, i32 %95];
    i1 %37 = icmp slt i32 %36, i32 100000;
    cbr i1 %37(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %38 = phi [^while.header1, i32 %27] [^while.body3, i32 %108];
    f32 %39 = phi [^while.header1, f32 %26] [^while.body3, f32 %107];
    f32* %40 = getelementptr &(f32* %24)[i32 %28];
    store f32* %40 with f32 %39;
    ubr ^while.header;
  ^super.header:
    i32 %41 = phi [^while.header1, i32 %27] [^while.body2, i32 %43];
    f32 %42 = phi [^while.header1, f32 %26] [^while.body2, f32 %91];
    i32 %43 = add i32 %41, i32 4;
    i1 %44 = icmp slt i32 %43, i32 100000;
    cbr i1 %44(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i1 %45 = icmp slt i32 %35, i32 100000;
    cbr i1 %45(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %46 = phi [^while.header2, f32 0] [^b2, f32 %127];
    i32 %47 = phi [^while.header2, i32 0] [^b2, i32 %126];
    i32 %48 = phi [^while.header2, i32 0] [^b2, i32 %114];
    i1 %49 = icmp slt i32 %48, i32 100000;
    cbr i1 %49(prob = 0.97), ^while.header5, ^while.header6;
  ^while.body2:
    i32 %50 = add i32 %28, i32 %41;
    i32 %51 = add i32 %32, i32 %41;
    i32 %52 = mul i32 %50, i32 %51;
    i32 %53 = sdiv i32 %52, i32 2;
    i32 %54 = add i32 %32, i32 %53;
    f32 %55 = s2f i32 %54 to f32;
    f32* %56 = getelementptr &(f32* %20)[i32 %41];
    f32 %57 = load f32* %56;
    f32 %58 = fdiv f32 %57, f32 %55;
    f32 %59 = fadd f32 %42, f32 %58;
    i32 %60 = add i32 %41, i32 1;
    i32 %61 = add i32 %32, i32 %60;
    i32 %62 = mul i32 %51, i32 %61;
    i32 %63 = sdiv i32 %62, i32 2;
    i32 %64 = add i32 %32, i32 %63;
    f32 %65 = s2f i32 %64 to f32;
    f32* %66 = getelementptr &(f32* %56)[i64 1];
    f32 %67 = load f32* %66;
    f32 %68 = fdiv f32 %67, f32 %65;
    f32 %69 = fadd f32 %59, f32 %68;
    i32 %70 = add i32 %41, i32 2;
    i32 %71 = add i32 %32, i32 %70;
    i32 %72 = add i32 %31, i32 %41;
    i32 %73 = mul i32 %71, i32 %72;
    i32 %74 = sdiv i32 %73, i32 2;
    i32 %75 = add i32 %32, i32 %74;
    f32 %76 = s2f i32 %75 to f32;
    f32* %77 = getelementptr &(f32* %56)[i64 2];
    f32 %78 = load f32* %77;
    f32 %79 = fdiv f32 %78, f32 %76;
    f32 %80 = fadd f32 %69, f32 %79;
    i32 %81 = add i32 %41, i32 3;
    i32 %82 = add i32 %32, i32 %81;
    i32 %83 = add i32 %30, i32 %41;
    i32 %84 = mul i32 %82, i32 %83;
    i32 %85 = sdiv i32 %84, i32 2;
    i32 %86 = add i32 %32, i32 %85;
    f32 %87 = s2f i32 %86 to f32;
    f32* %88 = getelementptr &(f32* %56)[i64 3];
    f32 %89 = load f32* %88;
    f32 %90 = fdiv f32 %89, f32 %87;
    f32 %91 = fadd f32 %80, f32 %90;
    ubr ^super.header;
  ^b1:
    i32 %92 = phi [^while.header3, i32 %35] [^while.body7, i32 %229];
    f32 %93 = phi [^while.header3, f32 %34] [^while.body7, f32 %235];
    f32* %94 = getelementptr &(f32* %22)[i32 %36];
    store f32* %94 with f32 %93;
    i32 %95 = add i32 %36, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %96 = phi [^super.header, i32 %41] [^while.body3, i32 %108];
    f32 %97 = phi [^super.header, f32 %42] [^while.body3, f32 %107];
    i32 %98 = add i32 %28, i32 %96;
    i32 %99 = add i32 %32, i32 %96;
    i32 %100 = mul i32 %98, i32 %99;
    i32 %101 = sdiv i32 %100, i32 2;
    i32 %102 = add i32 %32, i32 %101;
    f32 %103 = s2f i32 %102 to f32;
    f32* %104 = getelementptr &(f32* %20)[i32 %96];
    f32 %105 = load f32* %104;
    f32 %106 = fdiv f32 %105, f32 %103;
    f32 %107 = fadd f32 %97, f32 %106;
    i32 %108 = add i32 %96, i32 1;
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %110 = add i32 %35, i32 4;
    i1 %111 = icmp slt i32 %110, i32 100000;
    cbr i1 %111(prob = 0.89), ^prebody1, ^prebody2;
  ^while.header5:
    i32 %112 = add i32 %48, i32 3;
    i32 %113 = add i32 %48, i32 2;
    i32 %114 = add i32 %48, i32 1;
    i1 %115 = icmp slt i32 %47, i32 100000;
    cbr i1 %115(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %116 = phi [^while.header4, f32 0] [^b3, f32 %238];
    i32 %117 = phi [^while.header4, i32 0] [^b3, i32 %237];
    i32 %118 = phi [^while.header4, i32 0] [^b3, i32 %240];
    i1 %119 = icmp slt i32 %118, i32 100000;
    cbr i1 %119(prob = 0.97), ^while.header7, ^while.body4;
  ^prebody1:
    i32 %120 = add i32 %36, i32 1;
    i32 %121 = add i32 %36, i32 2;
    i32 %122 = add i32 %36, i32 3;
    ubr ^while.body6;
  ^prebody2:
    f32 %123 = phi [^super.header1, f32 %34] [^while.body6, f32 %220];
    i32 %124 = phi [^super.header1, i32 %35] [^while.body6, i32 %178];
    i32 %125 = add i32 %36, i32 1;
    ubr ^while.body7;
  ^b2:
    i32 %126 = phi [^while.header5, i32 %47] [^while.body8, i32 %253];
    f32 %127 = phi [^while.header5, f32 %46] [^while.body8, f32 %252];
    f32* %128 = getelementptr &(f32* %24)[i32 %48];
    store f32* %128 with f32 %127;
    ubr ^while.header4;
  ^super.header2:
    i32 %129 = phi [^while.header5, i32 %47] [^while.body5, i32 %131];
    f32 %130 = phi [^while.header5, f32 %46] [^while.body5, f32 %177];
    i32 %131 = add i32 %129, i32 4;
    i1 %132 = icmp slt i32 %131, i32 100000;
    cbr i1 %132(prob = 0.89), ^while.body5, ^while.body8;
  ^while.header7:
    i1 %133 = icmp slt i32 %117, i32 100000;
    cbr i1 %133(prob = 0.97), ^super.header3, ^b3;
  ^while.body4:
    i32 %134 = add i32 %25, i32 1;
    i1 %135 = icmp slt i32 %134, i32 1000;
    cbr i1 %135(prob = 1), ^while.body1, ^b4;
  ^while.body5:
    i32 %136 = add i32 %48, i32 %129;
    i32 %137 = add i32 %114, i32 %129;
    i32 %138 = mul i32 %136, i32 %137;
    i32 %139 = sdiv i32 %138, i32 2;
    i32 %140 = add i32 %114, i32 %139;
    f32 %141 = s2f i32 %140 to f32;
    f32* %142 = getelementptr &(f32* %22)[i32 %129];
    f32 %143 = load f32* %142;
    f32 %144 = fdiv f32 %143, f32 %141;
    f32 %145 = fadd f32 %130, f32 %144;
    i32 %146 = add i32 %129, i32 1;
    i32 %147 = add i32 %114, i32 %146;
    i32 %148 = mul i32 %137, i32 %147;
    i32 %149 = sdiv i32 %148, i32 2;
    i32 %150 = add i32 %114, i32 %149;
    f32 %151 = s2f i32 %150 to f32;
    f32* %152 = getelementptr &(f32* %142)[i64 1];
    f32 %153 = load f32* %152;
    f32 %154 = fdiv f32 %153, f32 %151;
    f32 %155 = fadd f32 %145, f32 %154;
    i32 %156 = add i32 %129, i32 2;
    i32 %157 = add i32 %114, i32 %156;
    i32 %158 = add i32 %113, i32 %129;
    i32 %159 = mul i32 %157, i32 %158;
    i32 %160 = sdiv i32 %159, i32 2;
    i32 %161 = add i32 %114, i32 %160;
    f32 %162 = s2f i32 %161 to f32;
    f32* %163 = getelementptr &(f32* %142)[i64 2];
    f32 %164 = load f32* %163;
    f32 %165 = fdiv f32 %164, f32 %162;
    f32 %166 = fadd f32 %155, f32 %165;
    i32 %167 = add i32 %129, i32 3;
    i32 %168 = add i32 %114, i32 %167;
    i32 %169 = add i32 %112, i32 %129;
    i32 %170 = mul i32 %168, i32 %169;
    i32 %171 = sdiv i32 %170, i32 2;
    i32 %172 = add i32 %114, i32 %171;
    f32 %173 = s2f i32 %172 to f32;
    f32* %174 = getelementptr &(f32* %142)[i64 3];
    f32 %175 = load f32* %174;
    f32 %176 = fdiv f32 %175, f32 %173;
    f32 %177 = fadd f32 %166, f32 %176;
    ubr ^super.header2;
  ^while.body6:
    i32 %178 = phi [^prebody1, i32 %110] [^while.body6, i32 %221];
    f32 %179 = phi [^prebody1, f32 %34] [^while.body6, f32 %220];
    i32 %180 = phi [^prebody1, i32 %35] [^while.body6, i32 %178];
    i32 %181 = add i32 %36, i32 %180;
    i32 %182 = add i32 %120, i32 %180;
    i32 %183 = mul i32 %181, i32 %182;
    i32 %184 = sdiv i32 %183, i32 2;
    i32 %185 = add i32 %180, i32 1;
    i32 %186 = add i32 %184, i32 %185;
    f32 %187 = s2f i32 %186 to f32;
    f32* %188 = getelementptr &(f32* %24)[i32 %180];
    f32 %189 = load f32* %188;
    f32 %190 = fdiv f32 %189, f32 %187;
    f32 %191 = fadd f32 %179, f32 %190;
    i32 %192 = add i32 %121, i32 %180;
    i32 %193 = mul i32 %182, i32 %192;
    i32 %194 = sdiv i32 %193, i32 2;
    i32 %195 = add i32 %180, i32 2;
    i32 %196 = add i32 %194, i32 %195;
    f32 %197 = s2f i32 %196 to f32;
    f32* %198 = getelementptr &(f32* %188)[i64 1];
    f32 %199 = load f32* %198;
    f32 %200 = fdiv f32 %199, f32 %197;
    f32 %201 = fadd f32 %191, f32 %200;
    i32 %202 = add i32 %122, i32 %180;
    i32 %203 = mul i32 %192, i32 %202;
    i32 %204 = sdiv i32 %203, i32 2;
    i32 %205 = add i32 %180, i32 3;
    i32 %206 = add i32 %204, i32 %205;
    f32 %207 = s2f i32 %206 to f32;
    f32* %208 = getelementptr &(f32* %188)[i64 2];
    f32 %209 = load f32* %208;
    f32 %210 = fdiv f32 %209, f32 %207;
    f32 %211 = fadd f32 %201, f32 %210;
    i32 %212 = add i32 %36, i32 %178;
    i32 %213 = mul i32 %202, i32 %212;
    i32 %214 = sdiv i32 %213, i32 2;
    i32 %215 = add i32 %178, i32 %214;
    f32 %216 = s2f i32 %215 to f32;
    f32* %217 = getelementptr &(f32* %188)[i64 3];
    f32 %218 = load f32* %217;
    f32 %219 = fdiv f32 %218, f32 %216;
    f32 %220 = fadd f32 %211, f32 %219;
    i32 %221 = add i32 %178, i32 4;
    i1 %222 = icmp slt i32 %221, i32 100000;
    cbr i1 %222(prob = 0.89), ^while.body6, ^prebody2;
  ^while.body7:
    i32 %223 = phi [^prebody2, i32 %124] [^while.body7, i32 %229];
    f32 %224 = phi [^prebody2, f32 %123] [^while.body7, f32 %235];
    i32 %225 = add i32 %36, i32 %223;
    i32 %226 = add i32 %125, i32 %223;
    i32 %227 = mul i32 %225, i32 %226;
    i32 %228 = sdiv i32 %227, i32 2;
    i32 %229 = add i32 %223, i32 1;
    i32 %230 = add i32 %228, i32 %229;
    f32 %231 = s2f i32 %230 to f32;
    f32* %232 = getelementptr &(f32* %24)[i32 %223];
    f32 %233 = load f32* %232;
    f32 %234 = fdiv f32 %233, f32 %231;
    f32 %235 = fadd f32 %224, f32 %234;
    i1 %236 = icmp slt i32 %229, i32 100000;
    cbr i1 %236(prob = 0.75), ^while.body7, ^b1;
  ^b3:
    i32 %237 = phi [^while.header7, i32 %117] [^while.body11, i32 %342];
    f32 %238 = phi [^while.header7, f32 %116] [^while.body11, f32 %348];
    f32* %239 = getelementptr &(f32* %20)[i32 %118];
    store f32* %239 with f32 %238;
    i32 %240 = add i32 %118, i32 1;
    ubr ^while.header6;
  ^while.body8:
    i32 %241 = phi [^super.header2, i32 %129] [^while.body8, i32 %253];
    f32 %242 = phi [^super.header2, f32 %130] [^while.body8, f32 %252];
    i32 %243 = add i32 %48, i32 %241;
    i32 %244 = add i32 %114, i32 %241;
    i32 %245 = mul i32 %243, i32 %244;
    i32 %246 = sdiv i32 %245, i32 2;
    i32 %247 = add i32 %114, i32 %246;
    f32 %248 = s2f i32 %247 to f32;
    f32* %249 = getelementptr &(f32* %22)[i32 %241];
    f32 %250 = load f32* %249;
    f32 %251 = fdiv f32 %250, f32 %248;
    f32 %252 = fadd f32 %242, f32 %251;
    i32 %253 = add i32 %241, i32 1;
    i1 %254 = icmp slt i32 %253, i32 100000;
    cbr i1 %254(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %255 = add i32 %117, i32 4;
    i1 %256 = icmp slt i32 %255, i32 100000;
    cbr i1 %256(prob = 0.89), ^prebody3, ^prebody4;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^super.header4;
  ^prebody3:
    i32 %257 = add i32 %118, i32 1;
    i32 %258 = add i32 %118, i32 2;
    i32 %259 = add i32 %118, i32 3;
    ubr ^while.body9;
  ^prebody4:
    f32 %260 = phi [^super.header3, f32 %116] [^while.body9, f32 %309];
    i32 %261 = phi [^super.header3, i32 %117] [^while.body9, i32 %267];
    i32 %262 = add i32 %118, i32 1;
    ubr ^while.body11;
  ^super.header4:
    i32 %263 = phi [^b4, i32 0] [^while.body10, i32 %265];
    f32 %264 = phi [^b4, f32 0] [^while.body10, f32 %335];
    i32 %265 = add i32 %263, i32 4;
    i1 %266 = icmp slt i32 %265, i32 100000;
    cbr i1 %266(prob = 0.89), ^while.body10, ^while.body12;
  ^while.body9:
    i32 %267 = phi [^prebody3, i32 %255] [^while.body9, i32 %310];
    f32 %268 = phi [^prebody3, f32 %116] [^while.body9, f32 %309];
    i32 %269 = phi [^prebody3, i32 %117] [^while.body9, i32 %267];
    i32 %270 = add i32 %118, i32 %269;
    i32 %271 = add i32 %257, i32 %269;
    i32 %272 = mul i32 %270, i32 %271;
    i32 %273 = sdiv i32 %272, i32 2;
    i32 %274 = add i32 %269, i32 1;
    i32 %275 = add i32 %273, i32 %274;
    f32 %276 = s2f i32 %275 to f32;
    f32* %277 = getelementptr &(f32* %24)[i32 %269];
    f32 %278 = load f32* %277;
    f32 %279 = fdiv f32 %278, f32 %276;
    f32 %280 = fadd f32 %268, f32 %279;
    i32 %281 = add i32 %258, i32 %269;
    i32 %282 = mul i32 %271, i32 %281;
    i32 %283 = sdiv i32 %282, i32 2;
    i32 %284 = add i32 %269, i32 2;
    i32 %285 = add i32 %283, i32 %284;
    f32 %286 = s2f i32 %285 to f32;
    f32* %287 = getelementptr &(f32* %277)[i64 1];
    f32 %288 = load f32* %287;
    f32 %289 = fdiv f32 %288, f32 %286;
    f32 %290 = fadd f32 %280, f32 %289;
    i32 %291 = add i32 %259, i32 %269;
    i32 %292 = mul i32 %281, i32 %291;
    i32 %293 = sdiv i32 %292, i32 2;
    i32 %294 = add i32 %269, i32 3;
    i32 %295 = add i32 %293, i32 %294;
    f32 %296 = s2f i32 %295 to f32;
    f32* %297 = getelementptr &(f32* %277)[i64 2];
    f32 %298 = load f32* %297;
    f32 %299 = fdiv f32 %298, f32 %296;
    f32 %300 = fadd f32 %290, f32 %299;
    i32 %301 = add i32 %118, i32 %267;
    i32 %302 = mul i32 %291, i32 %301;
    i32 %303 = sdiv i32 %302, i32 2;
    i32 %304 = add i32 %267, i32 %303;
    f32 %305 = s2f i32 %304 to f32;
    f32* %306 = getelementptr &(f32* %277)[i64 3];
    f32 %307 = load f32* %306;
    f32 %308 = fdiv f32 %307, f32 %305;
    f32 %309 = fadd f32 %300, f32 %308;
    i32 %310 = add i32 %267, i32 4;
    i1 %311 = icmp slt i32 %310, i32 100000;
    cbr i1 %311(prob = 0.89), ^while.body9, ^prebody4;
  ^while.body10:
    f32* %312 = getelementptr &(f32* %20)[i32 %263];
    f32 %313 = load f32* %312;
    f32* %314 = getelementptr &(f32* %22)[i32 %263];
    f32 %315 = load f32* %314;
    f32 %316 = fmul f32 %313, f32 %315;
    f32 %317 = fadd f32 %264, f32 %316;
    f32* %318 = getelementptr &(f32* %312)[i64 1];
    f32 %319 = load f32* %318;
    f32* %320 = getelementptr &(f32* %314)[i64 1];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %319, f32 %321;
    f32 %323 = fadd f32 %317, f32 %322;
    f32* %324 = getelementptr &(f32* %312)[i64 2];
    f32 %325 = load f32* %324;
    f32* %326 = getelementptr &(f32* %314)[i64 2];
    f32 %327 = load f32* %326;
    f32 %328 = fmul f32 %325, f32 %327;
    f32 %329 = fadd f32 %323, f32 %328;
    f32* %330 = getelementptr &(f32* %312)[i64 3];
    f32 %331 = load f32* %330;
    f32* %332 = getelementptr &(f32* %314)[i64 3];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 %331, f32 %333;
    f32 %335 = fadd f32 %329, f32 %334;
    ubr ^super.header4;
  ^while.body11:
    i32 %336 = phi [^prebody4, i32 %261] [^while.body11, i32 %342];
    f32 %337 = phi [^prebody4, f32 %260] [^while.body11, f32 %348];
    i32 %338 = add i32 %118, i32 %336;
    i32 %339 = add i32 %262, i32 %336;
    i32 %340 = mul i32 %338, i32 %339;
    i32 %341 = sdiv i32 %340, i32 2;
    i32 %342 = add i32 %336, i32 1;
    i32 %343 = add i32 %341, i32 %342;
    f32 %344 = s2f i32 %343 to f32;
    f32* %345 = getelementptr &(f32* %24)[i32 %336];
    f32 %346 = load f32* %345;
    f32 %347 = fdiv f32 %346, f32 %344;
    f32 %348 = fadd f32 %337, f32 %347;
    i1 %349 = icmp slt i32 %342, i32 100000;
    cbr i1 %349(prob = 0.75), ^while.body11, ^b3;
  ^while.body12:
    i32 %350 = phi [^super.header4, i32 %263] [^while.body12, i32 %358];
    f32 %351 = phi [^super.header4, f32 %264] [^while.body12, f32 %357];
    f32* %352 = getelementptr &(f32* %20)[i32 %350];
    f32 %353 = load f32* %352;
    f32* %354 = getelementptr &(f32* %22)[i32 %350];
    f32 %355 = load f32* %354;
    f32 %356 = fmul f32 %353, f32 %355;
    f32 %357 = fadd f32 %351, f32 %356;
    i32 %358 = add i32 %350, i32 1;
    i1 %359 = icmp slt i32 %358, i32 100000;
    cbr i1 %359(prob = 0.75), ^while.body12, ^super.header5;
  ^super.header5:
    i32 %360 = phi [^while.body12, i32 0] [^while.body13, i32 %362];
    f32 %361 = phi [^while.body12, f32 0] [^while.body13, f32 %379];
    i32 %362 = add i32 %360, i32 4;
    i1 %363 = icmp slt i32 %362, i32 100000;
    cbr i1 %363(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body13:
    f32* %364 = getelementptr &(f32* %22)[i32 %360];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %365, f32 %365;
    f32 %367 = fadd f32 %361, f32 %366;
    f32* %368 = getelementptr &(f32* %364)[i64 1];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %369, f32 %369;
    f32 %371 = fadd f32 %367, f32 %370;
    f32* %372 = getelementptr &(f32* %364)[i64 2];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 %373, f32 %373;
    f32 %375 = fadd f32 %371, f32 %374;
    f32* %376 = getelementptr &(f32* %364)[i64 3];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 %377, f32 %377;
    f32 %379 = fadd f32 %375, f32 %378;
    ubr ^super.header5;
  ^while.body14:
    i32 %380 = phi [^super.header5, i32 %360] [^while.body14, i32 %386];
    f32 %381 = phi [^super.header5, f32 %361] [^while.body14, f32 %385];
    f32* %382 = getelementptr &(f32* %22)[i32 %380];
    f32 %383 = load f32* %382;
    f32 %384 = fmul f32 %383, f32 %383;
    f32 %385 = fadd f32 %381, f32 %384;
    i32 %386 = add i32 %380, i32 1;
    i1 %387 = icmp slt i32 %386, i32 100000;
    cbr i1 %387(prob = 0.75), ^while.body14, ^b5;
  ^b5:
    f32 %388 = fdiv f32 %357, f32 %385;
    f32 %389 = fsub f32 1, f32 %388;
    i1 %390 = fcmp ogt f32 %389, f32 1e-06;
    i1 %391 = fcmp olt f32 %389, f32 -1e-06;
    i1 %392 = or i1 %390, i1 %391;
    cbr i1 %392(prob = 0.98), ^while.body15, ^b6;
  ^while.body15:
    f32 %393 = phi [^b5, f32 %388] [^while.body15, f32 %397];
    f32 %394 = phi [^b5, f32 1] [^while.body15, f32 %396];
    f32 %395 = fadd f32 %394, f32 %393;
    f32 %396 = fmul f32 %395, f32 0.5;
    f32 %397 = fdiv f32 %388, f32 %396;
    f32 %398 = fsub f32 %396, f32 %397;
    i1 %399 = fcmp ogt f32 %398, f32 1e-06;
    i1 %400 = fcmp olt f32 %398, f32 -1e-06;
    i1 %401 = or i1 %399, i1 %400;
    cbr i1 %401(prob = 0.98), ^while.body15, ^b6;
  ^b6:
    f32 %402 = phi [^b5, f32 1] [^while.body15, f32 %396];
    f32 %403 = fsub f32 %402, f32 1;
    i1 %404 = fcmp ole f32 %403, f32 1e-06;
    i1 %405 = fcmp oge f32 %403, f32 -1e-06;
    i1 %406 = and i1 %404, i1 %405;
    i32 %407 = zext i1 %406 to i32;
    call (i32) -> void @putint(i32 %407);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm;
internal [100000 * f32]* @vectorB;
internal [100000 * f32]* @vectorA;
