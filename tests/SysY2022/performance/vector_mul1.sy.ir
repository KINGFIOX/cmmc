internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [8 * i8]* %0 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [100000 * f32]** %1 = ptradd [8 * i8]* %0, i32 0;
    [100000 * f32]* %2 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    store [100000 * f32]** %1 with [100000 * f32]* %2;
    i8* %3 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 100000, i8* %3);
    f32* %4 = getelementptr &([100000 * f32]* %2)[i64 0][i64 0];
    [100000 * f32]* %5 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %6 = getelementptr &([100000 * f32]* %5)[i64 0][i64 0];
    [100000 * f32]* %7 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %8 = getelementptr &([100000 * f32]* %7)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^b4, i32 %254];
    ubr ^10;
  ^10:
    i32 %11 = phi [^while.body, i32 0] [^b, i32 %15];
    i32 %12 = phi [^while.body, i32 0] [^b, i32 %18];
    f32 %13 = phi [^while.body, f32 0] [^b, f32 %19];
    i1 %14 = icmp slt i32 %12, i32 100000;
    i32 %15 = add i32 %11, i32 1;
    cbr i1 %14(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %16 = add i32 %12, i32 3;
    i1 %17 = icmp slt i32 %16, i32 100000;
    cbr i1 %17(prob = 0.941176), ^prebody, ^scalar.header;
  ^b:
    i32 %18 = phi [^10, i32 %12] [^scalar.header, i32 100000] [^while.body2, i32 100000];
    f32 %19 = phi [^10, f32 %13] [^scalar.header, f32 %27] [^while.body2, f32 %87];
    f32* %20 = getelementptr &(f32* %8)[i32 %11];
    store f32* %20 with f32 %19;
    i1 %21 = icmp slt i32 %15, i32 100000;
    cbr i1 %21(prob = 0.99999), ^10, ^29;
  ^prebody:
    i32 %22 = add i32 %11, i32 2;
    i32 %23 = add i32 %11, i32 3;
    i32 %24 = add i32 %11, i32 4;
    ubr ^while.body1;
  ^scalar.header:
    f32 %25 = phi [^super.header, f32 %13] [^while.body1, f32 %73];
    i32 %26 = phi [^super.header, i32 %12] [^while.body1, i32 %74];
    f32 %27 = phi [^super.header, f32 undef] [^while.body1, f32 %73];
    i1 %28 = icmp slt i32 %26, i32 100000;
    cbr i1 %28(prob = 0.75), ^while.body2, ^b;
  ^29:
    i32 %30 = phi [^b, i32 0] [^b1, i32 %34];
    i32 %31 = phi [^b, i32 0] [^b1, i32 %92];
    f32 %32 = phi [^b, f32 0] [^b1, f32 %93];
    i1 %33 = icmp slt i32 %31, i32 100000;
    i32 %34 = add i32 %30, i32 1;
    cbr i1 %33(prob = 0.984615), ^super.header1, ^b1;
  ^while.body1:
    f32 %35 = phi [^prebody, f32 %13] [^while.body1, f32 %73];
    i32 %36 = phi [^prebody, i32 %12] [^while.body1, i32 %74];
    i32 %37 = add i32 %11, i32 %36;
    i32 %38 = add i32 %15, i32 %36;
    i32 %39 = mul i32 %37, i32 %38;
    i32 %40 = sdiv i32 %39, i32 2;
    i32 %41 = add i32 %15, i32 %40;
    f32 %42 = s2f i32 %41 to f32;
    f32* %43 = getelementptr &(f32* %4)[i32 %36];
    f32 %44 = load f32* %43;
    f32 %45 = fdiv f32 %44, f32 %42;
    f32 %46 = fadd f32 %35, f32 %45;
    i32 %47 = add i32 %22, i32 %36;
    i32 %48 = mul i32 %38, i32 %47;
    i32 %49 = sdiv i32 %48, i32 2;
    i32 %50 = add i32 %15, i32 %49;
    f32 %51 = s2f i32 %50 to f32;
    f32* %52 = getelementptr &(f32* %43)[i64 1];
    f32 %53 = load f32* %52;
    f32 %54 = fdiv f32 %53, f32 %51;
    f32 %55 = fadd f32 %46, f32 %54;
    i32 %56 = add i32 %23, i32 %36;
    i32 %57 = mul i32 %47, i32 %56;
    i32 %58 = sdiv i32 %57, i32 2;
    i32 %59 = add i32 %15, i32 %58;
    f32 %60 = s2f i32 %59 to f32;
    f32* %61 = getelementptr &(f32* %43)[i64 2];
    f32 %62 = load f32* %61;
    f32 %63 = fdiv f32 %62, f32 %60;
    f32 %64 = fadd f32 %55, f32 %63;
    i32 %65 = add i32 %24, i32 %36;
    i32 %66 = mul i32 %56, i32 %65;
    i32 %67 = sdiv i32 %66, i32 2;
    i32 %68 = add i32 %15, i32 %67;
    f32 %69 = s2f i32 %68 to f32;
    f32* %70 = getelementptr &(f32* %43)[i64 3];
    f32 %71 = load f32* %70;
    f32 %72 = fdiv f32 %71, f32 %69;
    f32 %73 = fadd f32 %64, f32 %72;
    i32 %74 = add i32 %36, i32 4;
    i1 %75 = icmp slt i32 %74, i32 99997;
    cbr i1 %75(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %76 = phi [^scalar.header, i32 %26] [^while.body2, i32 %88];
    f32 %77 = phi [^scalar.header, f32 %25] [^while.body2, f32 %87];
    i32 %78 = add i32 %11, i32 %76;
    i32 %79 = add i32 %15, i32 %76;
    i32 %80 = mul i32 %78, i32 %79;
    i32 %81 = sdiv i32 %80, i32 2;
    i32 %82 = add i32 %15, i32 %81;
    f32 %83 = s2f i32 %82 to f32;
    f32* %84 = getelementptr &(f32* %4)[i32 %76];
    f32 %85 = load f32* %84;
    f32 %86 = fdiv f32 %85, f32 %83;
    f32 %87 = fadd f32 %77, f32 %86;
    i32 %88 = add i32 %76, i32 1;
    i1 %89 = icmp slt i32 %88, i32 100000;
    cbr i1 %89(prob = 0.75), ^while.body2, ^b;
  ^super.header1:
    i32 %90 = add i32 %31, i32 3;
    i1 %91 = icmp slt i32 %90, i32 100000;
    cbr i1 %91(prob = 0.941176), ^prebody1, ^scalar.header1;
  ^b1:
    i32 %92 = phi [^29, i32 %31] [^scalar.header1, i32 100000] [^while.body4, i32 100000];
    f32 %93 = phi [^29, f32 %32] [^scalar.header1, f32 %101] [^while.body4, f32 %165];
    f32* %94 = getelementptr &(f32* %6)[i32 %30];
    store f32* %94 with f32 %93;
    i1 %95 = icmp slt i32 %34, i32 100000;
    cbr i1 %95(prob = 0.99999), ^29, ^103;
  ^prebody1:
    i32 %96 = add i32 %30, i32 2;
    i32 %97 = add i32 %30, i32 3;
    i32 %98 = add i32 %30, i32 4;
    ubr ^while.body3;
  ^scalar.header1:
    f32 %99 = phi [^super.header1, f32 %32] [^while.body3, f32 %151];
    i32 %100 = phi [^super.header1, i32 %31] [^while.body3, i32 %145];
    f32 %101 = phi [^super.header1, f32 undef] [^while.body3, f32 %151];
    i1 %102 = icmp slt i32 %100, i32 100000;
    cbr i1 %102(prob = 0.75), ^while.body4, ^b1;
  ^103:
    i32 %104 = phi [^b1, i32 0] [^b2, i32 %108];
    i32 %105 = phi [^b1, i32 0] [^b2, i32 %169];
    f32 %106 = phi [^b1, f32 0] [^b2, f32 %170];
    i1 %107 = icmp slt i32 %105, i32 100000;
    i32 %108 = add i32 %104, i32 1;
    cbr i1 %107(prob = 0.984615), ^super.header2, ^b2;
  ^while.body3:
    f32 %109 = phi [^prebody1, f32 %32] [^while.body3, f32 %151];
    i32 %110 = phi [^prebody1, i32 %31] [^while.body3, i32 %145];
    i32 %111 = add i32 %30, i32 %110;
    i32 %112 = add i32 %34, i32 %110;
    i32 %113 = mul i32 %111, i32 %112;
    i32 %114 = sdiv i32 %113, i32 2;
    i32 %115 = add i32 %110, i32 1;
    i32 %116 = add i32 %114, i32 %115;
    f32 %117 = s2f i32 %116 to f32;
    f32* %118 = getelementptr &(f32* %8)[i32 %110];
    f32 %119 = load f32* %118;
    f32 %120 = fdiv f32 %119, f32 %117;
    f32 %121 = fadd f32 %109, f32 %120;
    i32 %122 = add i32 %96, i32 %110;
    i32 %123 = mul i32 %112, i32 %122;
    i32 %124 = sdiv i32 %123, i32 2;
    i32 %125 = add i32 %110, i32 2;
    i32 %126 = add i32 %124, i32 %125;
    f32 %127 = s2f i32 %126 to f32;
    f32* %128 = getelementptr &(f32* %118)[i64 1];
    f32 %129 = load f32* %128;
    f32 %130 = fdiv f32 %129, f32 %127;
    f32 %131 = fadd f32 %121, f32 %130;
    i32 %132 = add i32 %97, i32 %110;
    i32 %133 = mul i32 %122, i32 %132;
    i32 %134 = sdiv i32 %133, i32 2;
    i32 %135 = add i32 %110, i32 3;
    i32 %136 = add i32 %134, i32 %135;
    f32 %137 = s2f i32 %136 to f32;
    f32* %138 = getelementptr &(f32* %118)[i64 2];
    f32 %139 = load f32* %138;
    f32 %140 = fdiv f32 %139, f32 %137;
    f32 %141 = fadd f32 %131, f32 %140;
    i32 %142 = add i32 %98, i32 %110;
    i32 %143 = mul i32 %132, i32 %142;
    i32 %144 = sdiv i32 %143, i32 2;
    i32 %145 = add i32 %110, i32 4;
    i32 %146 = add i32 %144, i32 %145;
    f32 %147 = s2f i32 %146 to f32;
    f32* %148 = getelementptr &(f32* %118)[i64 3];
    f32 %149 = load f32* %148;
    f32 %150 = fdiv f32 %149, f32 %147;
    f32 %151 = fadd f32 %141, f32 %150;
    i1 %152 = icmp slt i32 %145, i32 99997;
    cbr i1 %152(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^while.body4 {scalar}:
    i32 %153 = phi [^scalar.header1, i32 %100] [^while.body4, i32 %159];
    f32 %154 = phi [^scalar.header1, f32 %99] [^while.body4, f32 %165];
    i32 %155 = add i32 %30, i32 %153;
    i32 %156 = add i32 %34, i32 %153;
    i32 %157 = mul i32 %155, i32 %156;
    i32 %158 = sdiv i32 %157, i32 2;
    i32 %159 = add i32 %153, i32 1;
    i32 %160 = add i32 %158, i32 %159;
    f32 %161 = s2f i32 %160 to f32;
    f32* %162 = getelementptr &(f32* %8)[i32 %153];
    f32 %163 = load f32* %162;
    f32 %164 = fdiv f32 %163, f32 %161;
    f32 %165 = fadd f32 %154, f32 %164;
    i1 %166 = icmp slt i32 %159, i32 100000;
    cbr i1 %166(prob = 0.75), ^while.body4, ^b1;
  ^super.header2:
    i32 %167 = add i32 %105, i32 3;
    i1 %168 = icmp slt i32 %167, i32 100000;
    cbr i1 %168(prob = 0.941176), ^prebody2, ^scalar.header2;
  ^b2:
    i32 %169 = phi [^103, i32 %105] [^scalar.header2, i32 100000] [^while.body6, i32 100000];
    f32 %170 = phi [^103, f32 %106] [^scalar.header2, f32 %178] [^while.body6, f32 %238];
    f32* %171 = getelementptr &(f32* %8)[i32 %104];
    store f32* %171 with f32 %170;
    i1 %172 = icmp slt i32 %108, i32 100000;
    cbr i1 %172(prob = 0.99999), ^103, ^180;
  ^prebody2:
    i32 %173 = add i32 %104, i32 2;
    i32 %174 = add i32 %104, i32 3;
    i32 %175 = add i32 %104, i32 4;
    ubr ^while.body5;
  ^scalar.header2:
    f32 %176 = phi [^super.header2, f32 %106] [^while.body5, f32 %224];
    i32 %177 = phi [^super.header2, i32 %105] [^while.body5, i32 %225];
    f32 %178 = phi [^super.header2, f32 undef] [^while.body5, f32 %224];
    i1 %179 = icmp slt i32 %177, i32 100000;
    cbr i1 %179(prob = 0.75), ^while.body6, ^b2;
  ^180:
    i32 %181 = phi [^b2, i32 0] [^b3, i32 %185];
    i32 %182 = phi [^b2, i32 0] [^b3, i32 %243];
    f32 %183 = phi [^b2, f32 0] [^b3, f32 %244];
    i1 %184 = icmp slt i32 %182, i32 100000;
    i32 %185 = add i32 %181, i32 1;
    cbr i1 %184(prob = 0.984615), ^super.header3, ^b3;
  ^while.body5:
    f32 %186 = phi [^prebody2, f32 %106] [^while.body5, f32 %224];
    i32 %187 = phi [^prebody2, i32 %105] [^while.body5, i32 %225];
    i32 %188 = add i32 %104, i32 %187;
    i32 %189 = add i32 %108, i32 %187;
    i32 %190 = mul i32 %188, i32 %189;
    i32 %191 = sdiv i32 %190, i32 2;
    i32 %192 = add i32 %108, i32 %191;
    f32 %193 = s2f i32 %192 to f32;
    f32* %194 = getelementptr &(f32* %6)[i32 %187];
    f32 %195 = load f32* %194;
    f32 %196 = fdiv f32 %195, f32 %193;
    f32 %197 = fadd f32 %186, f32 %196;
    i32 %198 = add i32 %173, i32 %187;
    i32 %199 = mul i32 %189, i32 %198;
    i32 %200 = sdiv i32 %199, i32 2;
    i32 %201 = add i32 %108, i32 %200;
    f32 %202 = s2f i32 %201 to f32;
    f32* %203 = getelementptr &(f32* %194)[i64 1];
    f32 %204 = load f32* %203;
    f32 %205 = fdiv f32 %204, f32 %202;
    f32 %206 = fadd f32 %197, f32 %205;
    i32 %207 = add i32 %174, i32 %187;
    i32 %208 = mul i32 %198, i32 %207;
    i32 %209 = sdiv i32 %208, i32 2;
    i32 %210 = add i32 %108, i32 %209;
    f32 %211 = s2f i32 %210 to f32;
    f32* %212 = getelementptr &(f32* %194)[i64 2];
    f32 %213 = load f32* %212;
    f32 %214 = fdiv f32 %213, f32 %211;
    f32 %215 = fadd f32 %206, f32 %214;
    i32 %216 = add i32 %175, i32 %187;
    i32 %217 = mul i32 %207, i32 %216;
    i32 %218 = sdiv i32 %217, i32 2;
    i32 %219 = add i32 %108, i32 %218;
    f32 %220 = s2f i32 %219 to f32;
    f32* %221 = getelementptr &(f32* %194)[i64 3];
    f32 %222 = load f32* %221;
    f32 %223 = fdiv f32 %222, f32 %220;
    f32 %224 = fadd f32 %215, f32 %223;
    i32 %225 = add i32 %187, i32 4;
    i1 %226 = icmp slt i32 %225, i32 99997;
    cbr i1 %226(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^while.body6 {scalar}:
    i32 %227 = phi [^scalar.header2, i32 %177] [^while.body6, i32 %239];
    f32 %228 = phi [^scalar.header2, f32 %176] [^while.body6, f32 %238];
    i32 %229 = add i32 %104, i32 %227;
    i32 %230 = add i32 %108, i32 %227;
    i32 %231 = mul i32 %229, i32 %230;
    i32 %232 = sdiv i32 %231, i32 2;
    i32 %233 = add i32 %108, i32 %232;
    f32 %234 = s2f i32 %233 to f32;
    f32* %235 = getelementptr &(f32* %6)[i32 %227];
    f32 %236 = load f32* %235;
    f32 %237 = fdiv f32 %236, f32 %234;
    f32 %238 = fadd f32 %228, f32 %237;
    i32 %239 = add i32 %227, i32 1;
    i1 %240 = icmp slt i32 %239, i32 100000;
    cbr i1 %240(prob = 0.75), ^while.body6, ^b2;
  ^super.header3:
    i32 %241 = add i32 %182, i32 3;
    i1 %242 = icmp slt i32 %241, i32 100000;
    cbr i1 %242(prob = 0.941176), ^prebody3, ^scalar.header3;
  ^b3:
    i32 %243 = phi [^180, i32 %182] [^scalar.header3, i32 100000] [^while.body8, i32 100000];
    f32 %244 = phi [^180, f32 %183] [^scalar.header3, f32 %252] [^while.body8, f32 %312];
    f32* %245 = getelementptr &(f32* %4)[i32 %181];
    store f32* %245 with f32 %244;
    i1 %246 = icmp slt i32 %185, i32 100000;
    cbr i1 %246(prob = 0.99999), ^180, ^b4;
  ^prebody3:
    i32 %247 = add i32 %181, i32 2;
    i32 %248 = add i32 %181, i32 3;
    i32 %249 = add i32 %181, i32 4;
    ubr ^while.body7;
  ^scalar.header3:
    f32 %250 = phi [^super.header3, f32 %183] [^while.body7, f32 %298];
    i32 %251 = phi [^super.header3, i32 %182] [^while.body7, i32 %292];
    f32 %252 = phi [^super.header3, f32 undef] [^while.body7, f32 %298];
    i1 %253 = icmp slt i32 %251, i32 100000;
    cbr i1 %253(prob = 0.75), ^while.body8, ^b3;
  ^b4:
    i32 %254 = add i32 %9, i32 1;
    i1 %255 = icmp slt i32 %254, i32 1000;
    cbr i1 %255(prob = 0.999), ^while.body, ^b5;
  ^while.body7:
    f32 %256 = phi [^prebody3, f32 %183] [^while.body7, f32 %298];
    i32 %257 = phi [^prebody3, i32 %182] [^while.body7, i32 %292];
    i32 %258 = add i32 %181, i32 %257;
    i32 %259 = add i32 %185, i32 %257;
    i32 %260 = mul i32 %258, i32 %259;
    i32 %261 = sdiv i32 %260, i32 2;
    i32 %262 = add i32 %257, i32 1;
    i32 %263 = add i32 %261, i32 %262;
    f32 %264 = s2f i32 %263 to f32;
    f32* %265 = getelementptr &(f32* %8)[i32 %257];
    f32 %266 = load f32* %265;
    f32 %267 = fdiv f32 %266, f32 %264;
    f32 %268 = fadd f32 %256, f32 %267;
    i32 %269 = add i32 %247, i32 %257;
    i32 %270 = mul i32 %259, i32 %269;
    i32 %271 = sdiv i32 %270, i32 2;
    i32 %272 = add i32 %257, i32 2;
    i32 %273 = add i32 %271, i32 %272;
    f32 %274 = s2f i32 %273 to f32;
    f32* %275 = getelementptr &(f32* %265)[i64 1];
    f32 %276 = load f32* %275;
    f32 %277 = fdiv f32 %276, f32 %274;
    f32 %278 = fadd f32 %268, f32 %277;
    i32 %279 = add i32 %248, i32 %257;
    i32 %280 = mul i32 %269, i32 %279;
    i32 %281 = sdiv i32 %280, i32 2;
    i32 %282 = add i32 %257, i32 3;
    i32 %283 = add i32 %281, i32 %282;
    f32 %284 = s2f i32 %283 to f32;
    f32* %285 = getelementptr &(f32* %265)[i64 2];
    f32 %286 = load f32* %285;
    f32 %287 = fdiv f32 %286, f32 %284;
    f32 %288 = fadd f32 %278, f32 %287;
    i32 %289 = add i32 %249, i32 %257;
    i32 %290 = mul i32 %279, i32 %289;
    i32 %291 = sdiv i32 %290, i32 2;
    i32 %292 = add i32 %257, i32 4;
    i32 %293 = add i32 %291, i32 %292;
    f32 %294 = s2f i32 %293 to f32;
    f32* %295 = getelementptr &(f32* %265)[i64 3];
    f32 %296 = load f32* %295;
    f32 %297 = fdiv f32 %296, f32 %294;
    f32 %298 = fadd f32 %288, f32 %297;
    i1 %299 = icmp slt i32 %292, i32 99997;
    cbr i1 %299(prob = 0.941176), ^while.body7, ^scalar.header3;
  ^while.body8 {scalar}:
    i32 %300 = phi [^scalar.header3, i32 %251] [^while.body8, i32 %306];
    f32 %301 = phi [^scalar.header3, f32 %250] [^while.body8, f32 %312];
    i32 %302 = add i32 %181, i32 %300;
    i32 %303 = add i32 %185, i32 %300;
    i32 %304 = mul i32 %302, i32 %303;
    i32 %305 = sdiv i32 %304, i32 2;
    i32 %306 = add i32 %300, i32 1;
    i32 %307 = add i32 %305, i32 %306;
    f32 %308 = s2f i32 %307 to f32;
    f32* %309 = getelementptr &(f32* %8)[i32 %300];
    f32 %310 = load f32* %309;
    f32 %311 = fdiv f32 %310, f32 %308;
    f32 %312 = fadd f32 %301, f32 %311;
    i1 %313 = icmp slt i32 %306, i32 100000;
    cbr i1 %313(prob = 0.75), ^while.body8, ^b3;
  ^b5:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body9;
  ^while.body9:
    i32 %314 = phi [^b5, i32 0] [^while.body9, i32 %412];
    f32 %315 = phi [^b5, f32 0] [^while.body9, f32 %411];
    f32* %316 = getelementptr &(f32* %4)[i32 %314];
    f32 %317 = load f32* %316;
    f32* %318 = getelementptr &(f32* %6)[i32 %314];
    f32 %319 = load f32* %318;
    f32 %320 = fmul f32 %317, f32 %319;
    f32 %321 = fadd f32 %315, f32 %320;
    f32* %322 = getelementptr &(f32* %316)[i64 1];
    f32 %323 = load f32* %322;
    f32* %324 = getelementptr &(f32* %318)[i64 1];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 %323, f32 %325;
    f32 %327 = fadd f32 %321, f32 %326;
    f32* %328 = getelementptr &(f32* %316)[i64 2];
    f32 %329 = load f32* %328;
    f32* %330 = getelementptr &(f32* %318)[i64 2];
    f32 %331 = load f32* %330;
    f32 %332 = fmul f32 %329, f32 %331;
    f32 %333 = fadd f32 %327, f32 %332;
    f32* %334 = getelementptr &(f32* %316)[i64 3];
    f32 %335 = load f32* %334;
    f32* %336 = getelementptr &(f32* %318)[i64 3];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 %335, f32 %337;
    f32 %339 = fadd f32 %333, f32 %338;
    f32* %340 = getelementptr &(f32* %316)[i64 4];
    f32 %341 = load f32* %340;
    f32* %342 = getelementptr &(f32* %318)[i64 4];
    f32 %343 = load f32* %342;
    f32 %344 = fmul f32 %341, f32 %343;
    f32 %345 = fadd f32 %339, f32 %344;
    f32* %346 = getelementptr &(f32* %316)[i64 5];
    f32 %347 = load f32* %346;
    f32* %348 = getelementptr &(f32* %318)[i64 5];
    f32 %349 = load f32* %348;
    f32 %350 = fmul f32 %347, f32 %349;
    f32 %351 = fadd f32 %345, f32 %350;
    f32* %352 = getelementptr &(f32* %316)[i64 6];
    f32 %353 = load f32* %352;
    f32* %354 = getelementptr &(f32* %318)[i64 6];
    f32 %355 = load f32* %354;
    f32 %356 = fmul f32 %353, f32 %355;
    f32 %357 = fadd f32 %351, f32 %356;
    f32* %358 = getelementptr &(f32* %316)[i64 7];
    f32 %359 = load f32* %358;
    f32* %360 = getelementptr &(f32* %318)[i64 7];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 %359, f32 %361;
    f32 %363 = fadd f32 %357, f32 %362;
    f32* %364 = getelementptr &(f32* %316)[i64 8];
    f32 %365 = load f32* %364;
    f32* %366 = getelementptr &(f32* %318)[i64 8];
    f32 %367 = load f32* %366;
    f32 %368 = fmul f32 %365, f32 %367;
    f32 %369 = fadd f32 %363, f32 %368;
    f32* %370 = getelementptr &(f32* %316)[i64 9];
    f32 %371 = load f32* %370;
    f32* %372 = getelementptr &(f32* %318)[i64 9];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 %371, f32 %373;
    f32 %375 = fadd f32 %369, f32 %374;
    f32* %376 = getelementptr &(f32* %316)[i64 10];
    f32 %377 = load f32* %376;
    f32* %378 = getelementptr &(f32* %318)[i64 10];
    f32 %379 = load f32* %378;
    f32 %380 = fmul f32 %377, f32 %379;
    f32 %381 = fadd f32 %375, f32 %380;
    f32* %382 = getelementptr &(f32* %316)[i64 11];
    f32 %383 = load f32* %382;
    f32* %384 = getelementptr &(f32* %318)[i64 11];
    f32 %385 = load f32* %384;
    f32 %386 = fmul f32 %383, f32 %385;
    f32 %387 = fadd f32 %381, f32 %386;
    f32* %388 = getelementptr &(f32* %316)[i64 12];
    f32 %389 = load f32* %388;
    f32* %390 = getelementptr &(f32* %318)[i64 12];
    f32 %391 = load f32* %390;
    f32 %392 = fmul f32 %389, f32 %391;
    f32 %393 = fadd f32 %387, f32 %392;
    f32* %394 = getelementptr &(f32* %316)[i64 13];
    f32 %395 = load f32* %394;
    f32* %396 = getelementptr &(f32* %318)[i64 13];
    f32 %397 = load f32* %396;
    f32 %398 = fmul f32 %395, f32 %397;
    f32 %399 = fadd f32 %393, f32 %398;
    f32* %400 = getelementptr &(f32* %316)[i64 14];
    f32 %401 = load f32* %400;
    f32* %402 = getelementptr &(f32* %318)[i64 14];
    f32 %403 = load f32* %402;
    f32 %404 = fmul f32 %401, f32 %403;
    f32 %405 = fadd f32 %399, f32 %404;
    f32* %406 = getelementptr &(f32* %316)[i64 15];
    f32 %407 = load f32* %406;
    f32* %408 = getelementptr &(f32* %318)[i64 15];
    f32 %409 = load f32* %408;
    f32 %410 = fmul f32 %407, f32 %409;
    f32 %411 = fadd f32 %405, f32 %410;
    i32 %412 = add i32 %314, i32 16;
    i1 %413 = icmp slt i32 %412, i32 100000;
    cbr i1 %413(prob = 0.99984), ^while.body9, ^while.body10;
  ^while.body10:
    i32 %414 = phi [^while.body9, i32 0] [^while.body10, i32 %480];
    f32 %415 = phi [^while.body9, f32 0] [^while.body10, f32 %479];
    f32* %416 = getelementptr &(f32* %6)[i32 %414];
    f32 %417 = load f32* %416;
    f32 %418 = fmul f32 %417, f32 %417;
    f32 %419 = fadd f32 %415, f32 %418;
    f32* %420 = getelementptr &(f32* %416)[i64 1];
    f32 %421 = load f32* %420;
    f32 %422 = fmul f32 %421, f32 %421;
    f32 %423 = fadd f32 %419, f32 %422;
    f32* %424 = getelementptr &(f32* %416)[i64 2];
    f32 %425 = load f32* %424;
    f32 %426 = fmul f32 %425, f32 %425;
    f32 %427 = fadd f32 %423, f32 %426;
    f32* %428 = getelementptr &(f32* %416)[i64 3];
    f32 %429 = load f32* %428;
    f32 %430 = fmul f32 %429, f32 %429;
    f32 %431 = fadd f32 %427, f32 %430;
    f32* %432 = getelementptr &(f32* %416)[i64 4];
    f32 %433 = load f32* %432;
    f32 %434 = fmul f32 %433, f32 %433;
    f32 %435 = fadd f32 %431, f32 %434;
    f32* %436 = getelementptr &(f32* %416)[i64 5];
    f32 %437 = load f32* %436;
    f32 %438 = fmul f32 %437, f32 %437;
    f32 %439 = fadd f32 %435, f32 %438;
    f32* %440 = getelementptr &(f32* %416)[i64 6];
    f32 %441 = load f32* %440;
    f32 %442 = fmul f32 %441, f32 %441;
    f32 %443 = fadd f32 %439, f32 %442;
    f32* %444 = getelementptr &(f32* %416)[i64 7];
    f32 %445 = load f32* %444;
    f32 %446 = fmul f32 %445, f32 %445;
    f32 %447 = fadd f32 %443, f32 %446;
    f32* %448 = getelementptr &(f32* %416)[i64 8];
    f32 %449 = load f32* %448;
    f32 %450 = fmul f32 %449, f32 %449;
    f32 %451 = fadd f32 %447, f32 %450;
    f32* %452 = getelementptr &(f32* %416)[i64 9];
    f32 %453 = load f32* %452;
    f32 %454 = fmul f32 %453, f32 %453;
    f32 %455 = fadd f32 %451, f32 %454;
    f32* %456 = getelementptr &(f32* %416)[i64 10];
    f32 %457 = load f32* %456;
    f32 %458 = fmul f32 %457, f32 %457;
    f32 %459 = fadd f32 %455, f32 %458;
    f32* %460 = getelementptr &(f32* %416)[i64 11];
    f32 %461 = load f32* %460;
    f32 %462 = fmul f32 %461, f32 %461;
    f32 %463 = fadd f32 %459, f32 %462;
    f32* %464 = getelementptr &(f32* %416)[i64 12];
    f32 %465 = load f32* %464;
    f32 %466 = fmul f32 %465, f32 %465;
    f32 %467 = fadd f32 %463, f32 %466;
    f32* %468 = getelementptr &(f32* %416)[i64 13];
    f32 %469 = load f32* %468;
    f32 %470 = fmul f32 %469, f32 %469;
    f32 %471 = fadd f32 %467, f32 %470;
    f32* %472 = getelementptr &(f32* %416)[i64 14];
    f32 %473 = load f32* %472;
    f32 %474 = fmul f32 %473, f32 %473;
    f32 %475 = fadd f32 %471, f32 %474;
    f32* %476 = getelementptr &(f32* %416)[i64 15];
    f32 %477 = load f32* %476;
    f32 %478 = fmul f32 %477, f32 %477;
    f32 %479 = fadd f32 %475, f32 %478;
    i32 %480 = add i32 %414, i32 16;
    i1 %481 = icmp slt i32 %480, i32 100000;
    cbr i1 %481(prob = 0.99984), ^while.body10, ^b6;
  ^b6:
    f32 %482 = fdiv f32 %411, f32 %479;
    f32 %483 = fsub f32 1, f32 %482;
    i1 %484 = fcmp ogt f32 %483, f32 1e-06;
    i1 %485 = fcmp olt f32 %483, f32 -1e-06;
    i1 %486 = or i1 %484, i1 %485;
    cbr i1 %486(prob = 0.992308), ^while.body11, ^b7;
  ^while.body11:
    f32 %487 = phi [^b6, f32 1] [^while.body11, f32 %490];
    f32 %488 = fdiv f32 %482, f32 %487;
    f32 %489 = fadd f32 %487, f32 %488;
    f32 %490 = fmul f32 %489, f32 0.5;
    f32 %491 = fdiv f32 %482, f32 %490;
    f32 %492 = fsub f32 %490, f32 %491;
    i1 %493 = fcmp ogt f32 %492, f32 1e-06;
    i1 %494 = fcmp olt f32 %492, f32 -1e-06;
    i1 %495 = or i1 %493, i1 %494;
    cbr i1 %495(prob = 0.992308), ^while.body11, ^b7;
  ^b7:
    f32 %496 = phi [^b6, f32 1] [^while.body11, f32 %490];
    f32 %497 = fsub f32 %496, f32 1;
    i1 %498 = fcmp ole f32 %497, f32 1e-06;
    i1 %499 = fcmp oge f32 %497, f32 -1e-06;
    i1 %500 = and i1 %498, i1 %499;
    i32 %501 = zext i1 %500 to i32;
    call (i32) -> void @putint(i32 %501);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [8 * i8]* %4 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [100000 * f32]** %5 = ptradd [8 * i8]* %4, i32 0;
    [100000 * f32]* %6 = load [100000 * f32]** %5;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 15;
    i32 %8 = add i32 %1, i32 -3;
    i1 %9 = icmp slt i32 %7, i32 %8;
    i32 %10 = add i32 %1, i32 -18;
    cbr i1 %9(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %11 = phi [^b, i32 %0] [^scalar.header1, i32 %33] [^b3, i32 %44];
    i1 %12 = icmp sgt i32 %1, i32 %11;
    cbr i1 %12(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %13 = phi [^super.header, i32 %0] [^b1, i32 %30];
    f32* %14 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %13];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %14)[i64 1];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %14)[i64 2];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %14)[i64 3];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %14)[i64 4];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %14)[i64 5];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %14)[i64 6];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %14)[i64 7];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %14)[i64 8];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %14)[i64 9];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %14)[i64 10];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %14)[i64 11];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %14)[i64 12];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %14)[i64 13];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %14)[i64 14];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %14)[i64 15];
    store f32* %29 with f32 1;
    i32 %30 = add i32 %13, i32 16;
    i1 %31 = icmp sgt i32 %10, i32 %30;
    cbr i1 %31(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %32 = phi [^super.header, i32 %0] [^b1, i32 %30];
    i32 %33 = phi [^super.header, i32 undef] [^b1, i32 %30];
    i1 %34 = icmp sgt i32 %8, i32 %32;
    cbr i1 %34(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %35 = phi [^scalar.header, i32 %11] [^b2, i32 %37];
    f32* %36 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %35];
    store f32* %36 with f32 1;
    i32 %37 = add i32 %35, i32 1;
    i1 %38 = icmp sgt i32 %1, i32 %37;
    cbr i1 %38(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %39 = phi [^scalar.header1, i32 %32] [^b3, i32 %44];
    f32* %40 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %39];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %40)[i64 1];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %40)[i64 2];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %40)[i64 3];
    store f32* %43 with f32 1;
    i32 %44 = add i32 %39, i32 4;
    i1 %45 = icmp sgt i32 %8, i32 %44;
    cbr i1 %45(prob = 0.75), ^b3, ^scalar.header;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal [100000 * f32]* @Vectortm, align 8;
internal [100000 * f32]* @vectorB, align 8;
internal [100000 * f32]* @vectorA, align 8;
