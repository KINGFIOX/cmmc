internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    f32* %0 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %1 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %2 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (i32) -> void @starttime(i32 62);
    ubr ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %20];
    f32* %4 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %3];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %4)[i64 1];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %4)[i64 2];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %4)[i64 3];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %4)[i64 4];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %4)[i64 5];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %4)[i64 6];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %4)[i64 7];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %4)[i64 8];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %4)[i64 9];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %4)[i64 10];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %4)[i64 11];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %4)[i64 12];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %4)[i64 13];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %4)[i64 14];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %4)[i64 15];
    store f32* %19 with f32 1;
    i32 %20 = add i32 %3, i32 16;
    i1 %21 = scmp lt i32 %20, i32 100000;
    cbr i1 %21(prob = 1), ^while.body, ^while.body1;
^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^while.body10, i32 %883];
    ubr ^while.guard;
^while.guard:
    i32 %23 = phi [^while.body1, i32 0] [^b, i32 %27];
    i32 %24 = phi [^while.body1, i32 0] [^b, i32 %47];
    f32 %25 = phi [^while.body1, f32 0] [^b, f32 %46];
    i1 %26 = scmp lt i32 %24, i32 100000;
    i32 %27 = add i32 %23, i32 1;
    i32 %28 = add i32 %23, i32 2;
    i32 %29 = add i32 %23, i32 3;
    i32 %30 = add i32 %23, i32 4;
    i32 %31 = add i32 %23, i32 5;
    i32 %32 = add i32 %23, i32 6;
    i32 %33 = add i32 %23, i32 7;
    i32 %34 = add i32 %23, i32 8;
    i32 %35 = add i32 %23, i32 9;
    i32 %36 = add i32 %23, i32 10;
    i32 %37 = add i32 %23, i32 11;
    i32 %38 = add i32 %23, i32 12;
    i32 %39 = add i32 %23, i32 13;
    i32 %40 = add i32 %23, i32 14;
    i32 %41 = add i32 %23, i32 15;
    cbr i1 %26(prob = 0.97), ^super.header, ^b;
^super.header:
    f32 %42 = phi [^while.guard, f32 %25] [^while.body2, f32 %223];
    i32 %43 = phi [^while.guard, i32 %24] [^while.body2, i32 %44];
    i32 %44 = add i32 %43, i32 16;
    i1 %45 = scmp lt i32 %44, i32 100000;
    cbr i1 %45(prob = 0.67), ^while.body2, ^while.body3;
^b:
    f32 %46 = phi [^while.guard, f32 %25] [^while.body3, f32 %235];
    i32 %47 = phi [^while.guard, i32 %24] [^while.body3, i32 %236];
    f32* %48 = getelementptr &(f32* %2)[i32 %23];
    store f32* %48 with f32 %46;
    i1 %49 = scmp lt i32 %27, i32 100000;
    cbr i1 %49(prob = 1), ^while.guard, ^while.guard1;
^while.body2:
    f32* %50 = getelementptr &(f32* %0)[i32 %43];
    f32 %51 = load f32* %50;
    i32 %52 = add i32 %23, i32 %43;
    i32 %53 = add i32 %43, i32 %27;
    i32 %54 = mul i32 %52, i32 %53;
    i32 %55 = sdiv i32 %54, i32 2;
    i32 %56 = add i32 %55, i32 %27;
    f32 %57 = s2f i32 %56 to f32;
    f32 %58 = fdiv f32 %51, f32 %57;
    f32 %59 = fadd f32 %42, f32 %58;
    f32* %60 = getelementptr &(f32* %50)[i64 1];
    f32 %61 = load f32* %60;
    i32 %62 = add i32 %43, i32 1;
    i32 %63 = add i32 %62, i32 %27;
    i32 %64 = mul i32 %53, i32 %63;
    i32 %65 = sdiv i32 %64, i32 2;
    i32 %66 = add i32 %65, i32 %27;
    f32 %67 = s2f i32 %66 to f32;
    f32 %68 = fdiv f32 %61, f32 %67;
    f32 %69 = fadd f32 %59, f32 %68;
    f32* %70 = getelementptr &(f32* %50)[i64 2];
    f32 %71 = load f32* %70;
    i32 %72 = add i32 %43, i32 %28;
    i32 %73 = add i32 %43, i32 2;
    i32 %74 = add i32 %73, i32 %27;
    i32 %75 = mul i32 %72, i32 %74;
    i32 %76 = sdiv i32 %75, i32 2;
    i32 %77 = add i32 %76, i32 %27;
    f32 %78 = s2f i32 %77 to f32;
    f32 %79 = fdiv f32 %71, f32 %78;
    f32 %80 = fadd f32 %69, f32 %79;
    f32* %81 = getelementptr &(f32* %50)[i64 3];
    f32 %82 = load f32* %81;
    i32 %83 = add i32 %43, i32 %29;
    i32 %84 = add i32 %43, i32 3;
    i32 %85 = add i32 %84, i32 %27;
    i32 %86 = mul i32 %83, i32 %85;
    i32 %87 = sdiv i32 %86, i32 2;
    i32 %88 = add i32 %87, i32 %27;
    f32 %89 = s2f i32 %88 to f32;
    f32 %90 = fdiv f32 %82, f32 %89;
    f32 %91 = fadd f32 %80, f32 %90;
    f32* %92 = getelementptr &(f32* %50)[i64 4];
    f32 %93 = load f32* %92;
    i32 %94 = add i32 %43, i32 %30;
    i32 %95 = add i32 %43, i32 4;
    i32 %96 = add i32 %95, i32 %27;
    i32 %97 = mul i32 %94, i32 %96;
    i32 %98 = sdiv i32 %97, i32 2;
    i32 %99 = add i32 %98, i32 %27;
    f32 %100 = s2f i32 %99 to f32;
    f32 %101 = fdiv f32 %93, f32 %100;
    f32 %102 = fadd f32 %91, f32 %101;
    f32* %103 = getelementptr &(f32* %50)[i64 5];
    f32 %104 = load f32* %103;
    i32 %105 = add i32 %43, i32 %31;
    i32 %106 = add i32 %43, i32 5;
    i32 %107 = add i32 %106, i32 %27;
    i32 %108 = mul i32 %105, i32 %107;
    i32 %109 = sdiv i32 %108, i32 2;
    i32 %110 = add i32 %109, i32 %27;
    f32 %111 = s2f i32 %110 to f32;
    f32 %112 = fdiv f32 %104, f32 %111;
    f32 %113 = fadd f32 %102, f32 %112;
    f32* %114 = getelementptr &(f32* %50)[i64 6];
    f32 %115 = load f32* %114;
    i32 %116 = add i32 %43, i32 %32;
    i32 %117 = add i32 %43, i32 6;
    i32 %118 = add i32 %117, i32 %27;
    i32 %119 = mul i32 %116, i32 %118;
    i32 %120 = sdiv i32 %119, i32 2;
    i32 %121 = add i32 %120, i32 %27;
    f32 %122 = s2f i32 %121 to f32;
    f32 %123 = fdiv f32 %115, f32 %122;
    f32 %124 = fadd f32 %113, f32 %123;
    f32* %125 = getelementptr &(f32* %50)[i64 7];
    f32 %126 = load f32* %125;
    i32 %127 = add i32 %43, i32 %33;
    i32 %128 = add i32 %43, i32 7;
    i32 %129 = add i32 %128, i32 %27;
    i32 %130 = mul i32 %127, i32 %129;
    i32 %131 = sdiv i32 %130, i32 2;
    i32 %132 = add i32 %131, i32 %27;
    f32 %133 = s2f i32 %132 to f32;
    f32 %134 = fdiv f32 %126, f32 %133;
    f32 %135 = fadd f32 %124, f32 %134;
    f32* %136 = getelementptr &(f32* %50)[i64 8];
    f32 %137 = load f32* %136;
    i32 %138 = add i32 %43, i32 %34;
    i32 %139 = add i32 %43, i32 8;
    i32 %140 = add i32 %139, i32 %27;
    i32 %141 = mul i32 %138, i32 %140;
    i32 %142 = sdiv i32 %141, i32 2;
    i32 %143 = add i32 %142, i32 %27;
    f32 %144 = s2f i32 %143 to f32;
    f32 %145 = fdiv f32 %137, f32 %144;
    f32 %146 = fadd f32 %135, f32 %145;
    f32* %147 = getelementptr &(f32* %50)[i64 9];
    f32 %148 = load f32* %147;
    i32 %149 = add i32 %43, i32 %35;
    i32 %150 = add i32 %43, i32 9;
    i32 %151 = add i32 %150, i32 %27;
    i32 %152 = mul i32 %149, i32 %151;
    i32 %153 = sdiv i32 %152, i32 2;
    i32 %154 = add i32 %153, i32 %27;
    f32 %155 = s2f i32 %154 to f32;
    f32 %156 = fdiv f32 %148, f32 %155;
    f32 %157 = fadd f32 %146, f32 %156;
    f32* %158 = getelementptr &(f32* %50)[i64 10];
    f32 %159 = load f32* %158;
    i32 %160 = add i32 %43, i32 %36;
    i32 %161 = add i32 %43, i32 10;
    i32 %162 = add i32 %161, i32 %27;
    i32 %163 = mul i32 %160, i32 %162;
    i32 %164 = sdiv i32 %163, i32 2;
    i32 %165 = add i32 %164, i32 %27;
    f32 %166 = s2f i32 %165 to f32;
    f32 %167 = fdiv f32 %159, f32 %166;
    f32 %168 = fadd f32 %157, f32 %167;
    f32* %169 = getelementptr &(f32* %50)[i64 11];
    f32 %170 = load f32* %169;
    i32 %171 = add i32 %43, i32 %37;
    i32 %172 = add i32 %43, i32 11;
    i32 %173 = add i32 %172, i32 %27;
    i32 %174 = mul i32 %171, i32 %173;
    i32 %175 = sdiv i32 %174, i32 2;
    i32 %176 = add i32 %175, i32 %27;
    f32 %177 = s2f i32 %176 to f32;
    f32 %178 = fdiv f32 %170, f32 %177;
    f32 %179 = fadd f32 %168, f32 %178;
    f32* %180 = getelementptr &(f32* %50)[i64 12];
    f32 %181 = load f32* %180;
    i32 %182 = add i32 %43, i32 %38;
    i32 %183 = add i32 %43, i32 12;
    i32 %184 = add i32 %183, i32 %27;
    i32 %185 = mul i32 %182, i32 %184;
    i32 %186 = sdiv i32 %185, i32 2;
    i32 %187 = add i32 %186, i32 %27;
    f32 %188 = s2f i32 %187 to f32;
    f32 %189 = fdiv f32 %181, f32 %188;
    f32 %190 = fadd f32 %179, f32 %189;
    f32* %191 = getelementptr &(f32* %50)[i64 13];
    f32 %192 = load f32* %191;
    i32 %193 = add i32 %43, i32 %39;
    i32 %194 = add i32 %43, i32 13;
    i32 %195 = add i32 %194, i32 %27;
    i32 %196 = mul i32 %193, i32 %195;
    i32 %197 = sdiv i32 %196, i32 2;
    i32 %198 = add i32 %197, i32 %27;
    f32 %199 = s2f i32 %198 to f32;
    f32 %200 = fdiv f32 %192, f32 %199;
    f32 %201 = fadd f32 %190, f32 %200;
    f32* %202 = getelementptr &(f32* %50)[i64 14];
    f32 %203 = load f32* %202;
    i32 %204 = add i32 %43, i32 %40;
    i32 %205 = add i32 %43, i32 14;
    i32 %206 = add i32 %205, i32 %27;
    i32 %207 = mul i32 %204, i32 %206;
    i32 %208 = sdiv i32 %207, i32 2;
    i32 %209 = add i32 %208, i32 %27;
    f32 %210 = s2f i32 %209 to f32;
    f32 %211 = fdiv f32 %203, f32 %210;
    f32 %212 = fadd f32 %201, f32 %211;
    f32* %213 = getelementptr &(f32* %50)[i64 15];
    f32 %214 = load f32* %213;
    i32 %215 = add i32 %43, i32 %41;
    i32 %216 = add i32 %43, i32 15;
    i32 %217 = add i32 %216, i32 %27;
    i32 %218 = mul i32 %215, i32 %217;
    i32 %219 = sdiv i32 %218, i32 2;
    i32 %220 = add i32 %219, i32 %27;
    f32 %221 = s2f i32 %220 to f32;
    f32 %222 = fdiv f32 %214, f32 %221;
    f32 %223 = fadd f32 %212, f32 %222;
    ubr ^super.header;
^while.body3:
    f32 %224 = phi [^super.header, f32 %42] [^while.body3, f32 %235];
    i32 %225 = phi [^super.header, i32 %43] [^while.body3, i32 %236];
    f32* %226 = getelementptr &(f32* %0)[i32 %225];
    f32 %227 = load f32* %226;
    i32 %228 = add i32 %23, i32 %225;
    i32 %229 = add i32 %225, i32 %27;
    i32 %230 = mul i32 %228, i32 %229;
    i32 %231 = sdiv i32 %230, i32 2;
    i32 %232 = add i32 %231, i32 %27;
    f32 %233 = s2f i32 %232 to f32;
    f32 %234 = fdiv f32 %227, f32 %233;
    f32 %235 = fadd f32 %224, f32 %234;
    i32 %236 = add i32 %225, i32 1;
    i1 %237 = scmp lt i32 %236, i32 100000;
    cbr i1 %237(prob = 0.97), ^while.body3, ^b;
^while.guard1:
    i32 %238 = phi [^b, i32 0] [^b1, i32 %242];
    i32 %239 = phi [^b, i32 0] [^b1, i32 %262];
    f32 %240 = phi [^b, f32 0] [^b1, f32 %261];
    i1 %241 = scmp lt i32 %239, i32 100000;
    i32 %242 = add i32 %238, i32 1;
    i32 %243 = add i32 %238, i32 2;
    i32 %244 = add i32 %238, i32 3;
    i32 %245 = add i32 %238, i32 4;
    i32 %246 = add i32 %238, i32 5;
    i32 %247 = add i32 %238, i32 6;
    i32 %248 = add i32 %238, i32 7;
    i32 %249 = add i32 %238, i32 8;
    i32 %250 = add i32 %238, i32 9;
    i32 %251 = add i32 %238, i32 10;
    i32 %252 = add i32 %238, i32 11;
    i32 %253 = add i32 %238, i32 12;
    i32 %254 = add i32 %238, i32 13;
    i32 %255 = add i32 %238, i32 14;
    i32 %256 = add i32 %238, i32 15;
    cbr i1 %241(prob = 0.97), ^super.header1, ^b1;
^super.header1:
    f32 %257 = phi [^while.guard1, f32 %240] [^while.body4, f32 %438];
    i32 %258 = phi [^while.guard1, i32 %239] [^while.body4, i32 %259];
    i32 %259 = add i32 %258, i32 16;
    i1 %260 = scmp lt i32 %259, i32 100000;
    cbr i1 %260(prob = 0.67), ^while.body4, ^while.body5;
^b1:
    f32 %261 = phi [^while.guard1, f32 %240] [^while.body5, f32 %451];
    i32 %262 = phi [^while.guard1, i32 %239] [^while.body5, i32 %444];
    f32* %263 = getelementptr &(f32* %1)[i32 %238];
    store f32* %263 with f32 %261;
    i1 %264 = scmp lt i32 %242, i32 100000;
    cbr i1 %264(prob = 1), ^while.guard1, ^while.guard2;
^while.body4:
    f32* %265 = getelementptr &(f32* %2)[i32 %258];
    f32 %266 = load f32* %265;
    i32 %267 = add i32 %238, i32 %258;
    i32 %268 = add i32 %258, i32 %242;
    i32 %269 = mul i32 %267, i32 %268;
    i32 %270 = sdiv i32 %269, i32 2;
    i32 %271 = add i32 %258, i32 1;
    i32 %272 = add i32 %271, i32 %270;
    f32 %273 = s2f i32 %272 to f32;
    f32 %274 = fdiv f32 %266, f32 %273;
    f32 %275 = fadd f32 %257, f32 %274;
    f32* %276 = getelementptr &(f32* %265)[i64 1];
    f32 %277 = load f32* %276;
    i32 %278 = add i32 %271, i32 %242;
    i32 %279 = mul i32 %268, i32 %278;
    i32 %280 = sdiv i32 %279, i32 2;
    i32 %281 = add i32 %258, i32 2;
    i32 %282 = add i32 %281, i32 %280;
    f32 %283 = s2f i32 %282 to f32;
    f32 %284 = fdiv f32 %277, f32 %283;
    f32 %285 = fadd f32 %275, f32 %284;
    f32* %286 = getelementptr &(f32* %265)[i64 2];
    f32 %287 = load f32* %286;
    i32 %288 = add i32 %258, i32 %243;
    i32 %289 = add i32 %281, i32 %242;
    i32 %290 = mul i32 %288, i32 %289;
    i32 %291 = sdiv i32 %290, i32 2;
    i32 %292 = add i32 %258, i32 3;
    i32 %293 = add i32 %292, i32 %291;
    f32 %294 = s2f i32 %293 to f32;
    f32 %295 = fdiv f32 %287, f32 %294;
    f32 %296 = fadd f32 %285, f32 %295;
    f32* %297 = getelementptr &(f32* %265)[i64 3];
    f32 %298 = load f32* %297;
    i32 %299 = add i32 %258, i32 %244;
    i32 %300 = add i32 %292, i32 %242;
    i32 %301 = mul i32 %299, i32 %300;
    i32 %302 = sdiv i32 %301, i32 2;
    i32 %303 = add i32 %258, i32 4;
    i32 %304 = add i32 %303, i32 %302;
    f32 %305 = s2f i32 %304 to f32;
    f32 %306 = fdiv f32 %298, f32 %305;
    f32 %307 = fadd f32 %296, f32 %306;
    f32* %308 = getelementptr &(f32* %265)[i64 4];
    f32 %309 = load f32* %308;
    i32 %310 = add i32 %258, i32 %245;
    i32 %311 = add i32 %303, i32 %242;
    i32 %312 = mul i32 %310, i32 %311;
    i32 %313 = sdiv i32 %312, i32 2;
    i32 %314 = add i32 %258, i32 5;
    i32 %315 = add i32 %314, i32 %313;
    f32 %316 = s2f i32 %315 to f32;
    f32 %317 = fdiv f32 %309, f32 %316;
    f32 %318 = fadd f32 %307, f32 %317;
    f32* %319 = getelementptr &(f32* %265)[i64 5];
    f32 %320 = load f32* %319;
    i32 %321 = add i32 %258, i32 %246;
    i32 %322 = add i32 %314, i32 %242;
    i32 %323 = mul i32 %321, i32 %322;
    i32 %324 = sdiv i32 %323, i32 2;
    i32 %325 = add i32 %258, i32 6;
    i32 %326 = add i32 %325, i32 %324;
    f32 %327 = s2f i32 %326 to f32;
    f32 %328 = fdiv f32 %320, f32 %327;
    f32 %329 = fadd f32 %318, f32 %328;
    f32* %330 = getelementptr &(f32* %265)[i64 6];
    f32 %331 = load f32* %330;
    i32 %332 = add i32 %258, i32 %247;
    i32 %333 = add i32 %325, i32 %242;
    i32 %334 = mul i32 %332, i32 %333;
    i32 %335 = sdiv i32 %334, i32 2;
    i32 %336 = add i32 %258, i32 7;
    i32 %337 = add i32 %336, i32 %335;
    f32 %338 = s2f i32 %337 to f32;
    f32 %339 = fdiv f32 %331, f32 %338;
    f32 %340 = fadd f32 %329, f32 %339;
    f32* %341 = getelementptr &(f32* %265)[i64 7];
    f32 %342 = load f32* %341;
    i32 %343 = add i32 %258, i32 %248;
    i32 %344 = add i32 %336, i32 %242;
    i32 %345 = mul i32 %343, i32 %344;
    i32 %346 = sdiv i32 %345, i32 2;
    i32 %347 = add i32 %258, i32 8;
    i32 %348 = add i32 %347, i32 %346;
    f32 %349 = s2f i32 %348 to f32;
    f32 %350 = fdiv f32 %342, f32 %349;
    f32 %351 = fadd f32 %340, f32 %350;
    f32* %352 = getelementptr &(f32* %265)[i64 8];
    f32 %353 = load f32* %352;
    i32 %354 = add i32 %258, i32 %249;
    i32 %355 = add i32 %347, i32 %242;
    i32 %356 = mul i32 %354, i32 %355;
    i32 %357 = sdiv i32 %356, i32 2;
    i32 %358 = add i32 %258, i32 9;
    i32 %359 = add i32 %358, i32 %357;
    f32 %360 = s2f i32 %359 to f32;
    f32 %361 = fdiv f32 %353, f32 %360;
    f32 %362 = fadd f32 %351, f32 %361;
    f32* %363 = getelementptr &(f32* %265)[i64 9];
    f32 %364 = load f32* %363;
    i32 %365 = add i32 %258, i32 %250;
    i32 %366 = add i32 %358, i32 %242;
    i32 %367 = mul i32 %365, i32 %366;
    i32 %368 = sdiv i32 %367, i32 2;
    i32 %369 = add i32 %258, i32 10;
    i32 %370 = add i32 %369, i32 %368;
    f32 %371 = s2f i32 %370 to f32;
    f32 %372 = fdiv f32 %364, f32 %371;
    f32 %373 = fadd f32 %362, f32 %372;
    f32* %374 = getelementptr &(f32* %265)[i64 10];
    f32 %375 = load f32* %374;
    i32 %376 = add i32 %258, i32 %251;
    i32 %377 = add i32 %369, i32 %242;
    i32 %378 = mul i32 %376, i32 %377;
    i32 %379 = sdiv i32 %378, i32 2;
    i32 %380 = add i32 %258, i32 11;
    i32 %381 = add i32 %380, i32 %379;
    f32 %382 = s2f i32 %381 to f32;
    f32 %383 = fdiv f32 %375, f32 %382;
    f32 %384 = fadd f32 %373, f32 %383;
    f32* %385 = getelementptr &(f32* %265)[i64 11];
    f32 %386 = load f32* %385;
    i32 %387 = add i32 %258, i32 %252;
    i32 %388 = add i32 %380, i32 %242;
    i32 %389 = mul i32 %387, i32 %388;
    i32 %390 = sdiv i32 %389, i32 2;
    i32 %391 = add i32 %258, i32 12;
    i32 %392 = add i32 %391, i32 %390;
    f32 %393 = s2f i32 %392 to f32;
    f32 %394 = fdiv f32 %386, f32 %393;
    f32 %395 = fadd f32 %384, f32 %394;
    f32* %396 = getelementptr &(f32* %265)[i64 12];
    f32 %397 = load f32* %396;
    i32 %398 = add i32 %258, i32 %253;
    i32 %399 = add i32 %391, i32 %242;
    i32 %400 = mul i32 %398, i32 %399;
    i32 %401 = sdiv i32 %400, i32 2;
    i32 %402 = add i32 %258, i32 13;
    i32 %403 = add i32 %402, i32 %401;
    f32 %404 = s2f i32 %403 to f32;
    f32 %405 = fdiv f32 %397, f32 %404;
    f32 %406 = fadd f32 %395, f32 %405;
    f32* %407 = getelementptr &(f32* %265)[i64 13];
    f32 %408 = load f32* %407;
    i32 %409 = add i32 %258, i32 %254;
    i32 %410 = add i32 %402, i32 %242;
    i32 %411 = mul i32 %409, i32 %410;
    i32 %412 = sdiv i32 %411, i32 2;
    i32 %413 = add i32 %258, i32 14;
    i32 %414 = add i32 %413, i32 %412;
    f32 %415 = s2f i32 %414 to f32;
    f32 %416 = fdiv f32 %408, f32 %415;
    f32 %417 = fadd f32 %406, f32 %416;
    f32* %418 = getelementptr &(f32* %265)[i64 14];
    f32 %419 = load f32* %418;
    i32 %420 = add i32 %258, i32 %255;
    i32 %421 = add i32 %413, i32 %242;
    i32 %422 = mul i32 %420, i32 %421;
    i32 %423 = sdiv i32 %422, i32 2;
    i32 %424 = add i32 %258, i32 15;
    i32 %425 = add i32 %424, i32 %423;
    f32 %426 = s2f i32 %425 to f32;
    f32 %427 = fdiv f32 %419, f32 %426;
    f32 %428 = fadd f32 %417, f32 %427;
    f32* %429 = getelementptr &(f32* %265)[i64 15];
    f32 %430 = load f32* %429;
    i32 %431 = add i32 %258, i32 %256;
    i32 %432 = add i32 %424, i32 %242;
    i32 %433 = mul i32 %431, i32 %432;
    i32 %434 = sdiv i32 %433, i32 2;
    i32 %435 = add i32 %434, i32 %259;
    f32 %436 = s2f i32 %435 to f32;
    f32 %437 = fdiv f32 %430, f32 %436;
    f32 %438 = fadd f32 %428, f32 %437;
    ubr ^super.header1;
^while.body5:
    f32 %439 = phi [^super.header1, f32 %257] [^while.body5, f32 %451];
    i32 %440 = phi [^super.header1, i32 %258] [^while.body5, i32 %444];
    f32* %441 = getelementptr &(f32* %2)[i32 %440];
    f32 %442 = load f32* %441;
    i32 %443 = add i32 %238, i32 %440;
    i32 %444 = add i32 %440, i32 1;
    i32 %445 = add i32 %440, i32 %242;
    i32 %446 = mul i32 %443, i32 %445;
    i32 %447 = sdiv i32 %446, i32 2;
    i32 %448 = add i32 %444, i32 %447;
    f32 %449 = s2f i32 %448 to f32;
    f32 %450 = fdiv f32 %442, f32 %449;
    f32 %451 = fadd f32 %439, f32 %450;
    i1 %452 = scmp lt i32 %444, i32 100000;
    cbr i1 %452(prob = 0.97), ^while.body5, ^b1;
^while.guard2:
    i32 %453 = phi [^b1, i32 0] [^b2, i32 %457];
    i32 %454 = phi [^b1, i32 0] [^b2, i32 %477];
    f32 %455 = phi [^b1, f32 0] [^b2, f32 %476];
    i1 %456 = scmp lt i32 %454, i32 100000;
    i32 %457 = add i32 %453, i32 1;
    i32 %458 = add i32 %453, i32 2;
    i32 %459 = add i32 %453, i32 3;
    i32 %460 = add i32 %453, i32 4;
    i32 %461 = add i32 %453, i32 5;
    i32 %462 = add i32 %453, i32 6;
    i32 %463 = add i32 %453, i32 7;
    i32 %464 = add i32 %453, i32 8;
    i32 %465 = add i32 %453, i32 9;
    i32 %466 = add i32 %453, i32 10;
    i32 %467 = add i32 %453, i32 11;
    i32 %468 = add i32 %453, i32 12;
    i32 %469 = add i32 %453, i32 13;
    i32 %470 = add i32 %453, i32 14;
    i32 %471 = add i32 %453, i32 15;
    cbr i1 %456(prob = 0.97), ^super.header2, ^b2;
^super.header2:
    f32 %472 = phi [^while.guard2, f32 %455] [^while.body6, f32 %653];
    i32 %473 = phi [^while.guard2, i32 %454] [^while.body6, i32 %474];
    i32 %474 = add i32 %473, i32 16;
    i1 %475 = scmp lt i32 %474, i32 100000;
    cbr i1 %475(prob = 0.67), ^while.body6, ^while.body7;
^b2:
    f32 %476 = phi [^while.guard2, f32 %455] [^while.body7, f32 %665];
    i32 %477 = phi [^while.guard2, i32 %454] [^while.body7, i32 %666];
    f32* %478 = getelementptr &(f32* %2)[i32 %453];
    store f32* %478 with f32 %476;
    i1 %479 = scmp lt i32 %457, i32 100000;
    cbr i1 %479(prob = 1), ^while.guard2, ^while.guard3;
^while.body6:
    f32* %480 = getelementptr &(f32* %1)[i32 %473];
    f32 %481 = load f32* %480;
    i32 %482 = add i32 %453, i32 %473;
    i32 %483 = add i32 %473, i32 %457;
    i32 %484 = mul i32 %482, i32 %483;
    i32 %485 = sdiv i32 %484, i32 2;
    i32 %486 = add i32 %485, i32 %457;
    f32 %487 = s2f i32 %486 to f32;
    f32 %488 = fdiv f32 %481, f32 %487;
    f32 %489 = fadd f32 %472, f32 %488;
    f32* %490 = getelementptr &(f32* %480)[i64 1];
    f32 %491 = load f32* %490;
    i32 %492 = add i32 %473, i32 1;
    i32 %493 = add i32 %492, i32 %457;
    i32 %494 = mul i32 %483, i32 %493;
    i32 %495 = sdiv i32 %494, i32 2;
    i32 %496 = add i32 %495, i32 %457;
    f32 %497 = s2f i32 %496 to f32;
    f32 %498 = fdiv f32 %491, f32 %497;
    f32 %499 = fadd f32 %489, f32 %498;
    f32* %500 = getelementptr &(f32* %480)[i64 2];
    f32 %501 = load f32* %500;
    i32 %502 = add i32 %473, i32 %458;
    i32 %503 = add i32 %473, i32 2;
    i32 %504 = add i32 %503, i32 %457;
    i32 %505 = mul i32 %502, i32 %504;
    i32 %506 = sdiv i32 %505, i32 2;
    i32 %507 = add i32 %506, i32 %457;
    f32 %508 = s2f i32 %507 to f32;
    f32 %509 = fdiv f32 %501, f32 %508;
    f32 %510 = fadd f32 %499, f32 %509;
    f32* %511 = getelementptr &(f32* %480)[i64 3];
    f32 %512 = load f32* %511;
    i32 %513 = add i32 %473, i32 %459;
    i32 %514 = add i32 %473, i32 3;
    i32 %515 = add i32 %514, i32 %457;
    i32 %516 = mul i32 %513, i32 %515;
    i32 %517 = sdiv i32 %516, i32 2;
    i32 %518 = add i32 %517, i32 %457;
    f32 %519 = s2f i32 %518 to f32;
    f32 %520 = fdiv f32 %512, f32 %519;
    f32 %521 = fadd f32 %510, f32 %520;
    f32* %522 = getelementptr &(f32* %480)[i64 4];
    f32 %523 = load f32* %522;
    i32 %524 = add i32 %473, i32 %460;
    i32 %525 = add i32 %473, i32 4;
    i32 %526 = add i32 %525, i32 %457;
    i32 %527 = mul i32 %524, i32 %526;
    i32 %528 = sdiv i32 %527, i32 2;
    i32 %529 = add i32 %528, i32 %457;
    f32 %530 = s2f i32 %529 to f32;
    f32 %531 = fdiv f32 %523, f32 %530;
    f32 %532 = fadd f32 %521, f32 %531;
    f32* %533 = getelementptr &(f32* %480)[i64 5];
    f32 %534 = load f32* %533;
    i32 %535 = add i32 %473, i32 %461;
    i32 %536 = add i32 %473, i32 5;
    i32 %537 = add i32 %536, i32 %457;
    i32 %538 = mul i32 %535, i32 %537;
    i32 %539 = sdiv i32 %538, i32 2;
    i32 %540 = add i32 %539, i32 %457;
    f32 %541 = s2f i32 %540 to f32;
    f32 %542 = fdiv f32 %534, f32 %541;
    f32 %543 = fadd f32 %532, f32 %542;
    f32* %544 = getelementptr &(f32* %480)[i64 6];
    f32 %545 = load f32* %544;
    i32 %546 = add i32 %473, i32 %462;
    i32 %547 = add i32 %473, i32 6;
    i32 %548 = add i32 %547, i32 %457;
    i32 %549 = mul i32 %546, i32 %548;
    i32 %550 = sdiv i32 %549, i32 2;
    i32 %551 = add i32 %550, i32 %457;
    f32 %552 = s2f i32 %551 to f32;
    f32 %553 = fdiv f32 %545, f32 %552;
    f32 %554 = fadd f32 %543, f32 %553;
    f32* %555 = getelementptr &(f32* %480)[i64 7];
    f32 %556 = load f32* %555;
    i32 %557 = add i32 %473, i32 %463;
    i32 %558 = add i32 %473, i32 7;
    i32 %559 = add i32 %558, i32 %457;
    i32 %560 = mul i32 %557, i32 %559;
    i32 %561 = sdiv i32 %560, i32 2;
    i32 %562 = add i32 %561, i32 %457;
    f32 %563 = s2f i32 %562 to f32;
    f32 %564 = fdiv f32 %556, f32 %563;
    f32 %565 = fadd f32 %554, f32 %564;
    f32* %566 = getelementptr &(f32* %480)[i64 8];
    f32 %567 = load f32* %566;
    i32 %568 = add i32 %473, i32 %464;
    i32 %569 = add i32 %473, i32 8;
    i32 %570 = add i32 %569, i32 %457;
    i32 %571 = mul i32 %568, i32 %570;
    i32 %572 = sdiv i32 %571, i32 2;
    i32 %573 = add i32 %572, i32 %457;
    f32 %574 = s2f i32 %573 to f32;
    f32 %575 = fdiv f32 %567, f32 %574;
    f32 %576 = fadd f32 %565, f32 %575;
    f32* %577 = getelementptr &(f32* %480)[i64 9];
    f32 %578 = load f32* %577;
    i32 %579 = add i32 %473, i32 %465;
    i32 %580 = add i32 %473, i32 9;
    i32 %581 = add i32 %580, i32 %457;
    i32 %582 = mul i32 %579, i32 %581;
    i32 %583 = sdiv i32 %582, i32 2;
    i32 %584 = add i32 %583, i32 %457;
    f32 %585 = s2f i32 %584 to f32;
    f32 %586 = fdiv f32 %578, f32 %585;
    f32 %587 = fadd f32 %576, f32 %586;
    f32* %588 = getelementptr &(f32* %480)[i64 10];
    f32 %589 = load f32* %588;
    i32 %590 = add i32 %473, i32 %466;
    i32 %591 = add i32 %473, i32 10;
    i32 %592 = add i32 %591, i32 %457;
    i32 %593 = mul i32 %590, i32 %592;
    i32 %594 = sdiv i32 %593, i32 2;
    i32 %595 = add i32 %594, i32 %457;
    f32 %596 = s2f i32 %595 to f32;
    f32 %597 = fdiv f32 %589, f32 %596;
    f32 %598 = fadd f32 %587, f32 %597;
    f32* %599 = getelementptr &(f32* %480)[i64 11];
    f32 %600 = load f32* %599;
    i32 %601 = add i32 %473, i32 %467;
    i32 %602 = add i32 %473, i32 11;
    i32 %603 = add i32 %602, i32 %457;
    i32 %604 = mul i32 %601, i32 %603;
    i32 %605 = sdiv i32 %604, i32 2;
    i32 %606 = add i32 %605, i32 %457;
    f32 %607 = s2f i32 %606 to f32;
    f32 %608 = fdiv f32 %600, f32 %607;
    f32 %609 = fadd f32 %598, f32 %608;
    f32* %610 = getelementptr &(f32* %480)[i64 12];
    f32 %611 = load f32* %610;
    i32 %612 = add i32 %473, i32 %468;
    i32 %613 = add i32 %473, i32 12;
    i32 %614 = add i32 %613, i32 %457;
    i32 %615 = mul i32 %612, i32 %614;
    i32 %616 = sdiv i32 %615, i32 2;
    i32 %617 = add i32 %616, i32 %457;
    f32 %618 = s2f i32 %617 to f32;
    f32 %619 = fdiv f32 %611, f32 %618;
    f32 %620 = fadd f32 %609, f32 %619;
    f32* %621 = getelementptr &(f32* %480)[i64 13];
    f32 %622 = load f32* %621;
    i32 %623 = add i32 %473, i32 %469;
    i32 %624 = add i32 %473, i32 13;
    i32 %625 = add i32 %624, i32 %457;
    i32 %626 = mul i32 %623, i32 %625;
    i32 %627 = sdiv i32 %626, i32 2;
    i32 %628 = add i32 %627, i32 %457;
    f32 %629 = s2f i32 %628 to f32;
    f32 %630 = fdiv f32 %622, f32 %629;
    f32 %631 = fadd f32 %620, f32 %630;
    f32* %632 = getelementptr &(f32* %480)[i64 14];
    f32 %633 = load f32* %632;
    i32 %634 = add i32 %473, i32 %470;
    i32 %635 = add i32 %473, i32 14;
    i32 %636 = add i32 %635, i32 %457;
    i32 %637 = mul i32 %634, i32 %636;
    i32 %638 = sdiv i32 %637, i32 2;
    i32 %639 = add i32 %638, i32 %457;
    f32 %640 = s2f i32 %639 to f32;
    f32 %641 = fdiv f32 %633, f32 %640;
    f32 %642 = fadd f32 %631, f32 %641;
    f32* %643 = getelementptr &(f32* %480)[i64 15];
    f32 %644 = load f32* %643;
    i32 %645 = add i32 %473, i32 %471;
    i32 %646 = add i32 %473, i32 15;
    i32 %647 = add i32 %646, i32 %457;
    i32 %648 = mul i32 %645, i32 %647;
    i32 %649 = sdiv i32 %648, i32 2;
    i32 %650 = add i32 %649, i32 %457;
    f32 %651 = s2f i32 %650 to f32;
    f32 %652 = fdiv f32 %644, f32 %651;
    f32 %653 = fadd f32 %642, f32 %652;
    ubr ^super.header2;
^while.body7:
    f32 %654 = phi [^super.header2, f32 %472] [^while.body7, f32 %665];
    i32 %655 = phi [^super.header2, i32 %473] [^while.body7, i32 %666];
    f32* %656 = getelementptr &(f32* %1)[i32 %655];
    f32 %657 = load f32* %656;
    i32 %658 = add i32 %453, i32 %655;
    i32 %659 = add i32 %655, i32 %457;
    i32 %660 = mul i32 %658, i32 %659;
    i32 %661 = sdiv i32 %660, i32 2;
    i32 %662 = add i32 %661, i32 %457;
    f32 %663 = s2f i32 %662 to f32;
    f32 %664 = fdiv f32 %657, f32 %663;
    f32 %665 = fadd f32 %654, f32 %664;
    i32 %666 = add i32 %655, i32 1;
    i1 %667 = scmp lt i32 %666, i32 100000;
    cbr i1 %667(prob = 0.97), ^while.body7, ^b2;
^while.guard3:
    i32 %668 = phi [^b2, i32 0] [^b3, i32 %672];
    i32 %669 = phi [^b2, i32 0] [^b3, i32 %692];
    f32 %670 = phi [^b2, f32 0] [^b3, f32 %691];
    i1 %671 = scmp lt i32 %669, i32 100000;
    i32 %672 = add i32 %668, i32 1;
    i32 %673 = add i32 %668, i32 2;
    i32 %674 = add i32 %668, i32 3;
    i32 %675 = add i32 %668, i32 4;
    i32 %676 = add i32 %668, i32 5;
    i32 %677 = add i32 %668, i32 6;
    i32 %678 = add i32 %668, i32 7;
    i32 %679 = add i32 %668, i32 8;
    i32 %680 = add i32 %668, i32 9;
    i32 %681 = add i32 %668, i32 10;
    i32 %682 = add i32 %668, i32 11;
    i32 %683 = add i32 %668, i32 12;
    i32 %684 = add i32 %668, i32 13;
    i32 %685 = add i32 %668, i32 14;
    i32 %686 = add i32 %668, i32 15;
    cbr i1 %671(prob = 0.97), ^super.header3, ^b3;
^super.header3:
    f32 %687 = phi [^while.guard3, f32 %670] [^while.body8, f32 %868];
    i32 %688 = phi [^while.guard3, i32 %669] [^while.body8, i32 %689];
    i32 %689 = add i32 %688, i32 16;
    i1 %690 = scmp lt i32 %689, i32 100000;
    cbr i1 %690(prob = 0.67), ^while.body8, ^while.body9;
^b3:
    f32 %691 = phi [^while.guard3, f32 %670] [^while.body9, f32 %881];
    i32 %692 = phi [^while.guard3, i32 %669] [^while.body9, i32 %874];
    f32* %693 = getelementptr &(f32* %0)[i32 %668];
    store f32* %693 with f32 %691;
    i1 %694 = scmp lt i32 %672, i32 100000;
    cbr i1 %694(prob = 1), ^while.guard3, ^while.body10;
^while.body8:
    f32* %695 = getelementptr &(f32* %2)[i32 %688];
    f32 %696 = load f32* %695;
    i32 %697 = add i32 %668, i32 %688;
    i32 %698 = add i32 %688, i32 %672;
    i32 %699 = mul i32 %697, i32 %698;
    i32 %700 = sdiv i32 %699, i32 2;
    i32 %701 = add i32 %688, i32 1;
    i32 %702 = add i32 %701, i32 %700;
    f32 %703 = s2f i32 %702 to f32;
    f32 %704 = fdiv f32 %696, f32 %703;
    f32 %705 = fadd f32 %687, f32 %704;
    f32* %706 = getelementptr &(f32* %695)[i64 1];
    f32 %707 = load f32* %706;
    i32 %708 = add i32 %701, i32 %672;
    i32 %709 = mul i32 %698, i32 %708;
    i32 %710 = sdiv i32 %709, i32 2;
    i32 %711 = add i32 %688, i32 2;
    i32 %712 = add i32 %711, i32 %710;
    f32 %713 = s2f i32 %712 to f32;
    f32 %714 = fdiv f32 %707, f32 %713;
    f32 %715 = fadd f32 %705, f32 %714;
    f32* %716 = getelementptr &(f32* %695)[i64 2];
    f32 %717 = load f32* %716;
    i32 %718 = add i32 %688, i32 %673;
    i32 %719 = add i32 %711, i32 %672;
    i32 %720 = mul i32 %718, i32 %719;
    i32 %721 = sdiv i32 %720, i32 2;
    i32 %722 = add i32 %688, i32 3;
    i32 %723 = add i32 %722, i32 %721;
    f32 %724 = s2f i32 %723 to f32;
    f32 %725 = fdiv f32 %717, f32 %724;
    f32 %726 = fadd f32 %715, f32 %725;
    f32* %727 = getelementptr &(f32* %695)[i64 3];
    f32 %728 = load f32* %727;
    i32 %729 = add i32 %688, i32 %674;
    i32 %730 = add i32 %722, i32 %672;
    i32 %731 = mul i32 %729, i32 %730;
    i32 %732 = sdiv i32 %731, i32 2;
    i32 %733 = add i32 %688, i32 4;
    i32 %734 = add i32 %733, i32 %732;
    f32 %735 = s2f i32 %734 to f32;
    f32 %736 = fdiv f32 %728, f32 %735;
    f32 %737 = fadd f32 %726, f32 %736;
    f32* %738 = getelementptr &(f32* %695)[i64 4];
    f32 %739 = load f32* %738;
    i32 %740 = add i32 %688, i32 %675;
    i32 %741 = add i32 %733, i32 %672;
    i32 %742 = mul i32 %740, i32 %741;
    i32 %743 = sdiv i32 %742, i32 2;
    i32 %744 = add i32 %688, i32 5;
    i32 %745 = add i32 %744, i32 %743;
    f32 %746 = s2f i32 %745 to f32;
    f32 %747 = fdiv f32 %739, f32 %746;
    f32 %748 = fadd f32 %737, f32 %747;
    f32* %749 = getelementptr &(f32* %695)[i64 5];
    f32 %750 = load f32* %749;
    i32 %751 = add i32 %688, i32 %676;
    i32 %752 = add i32 %744, i32 %672;
    i32 %753 = mul i32 %751, i32 %752;
    i32 %754 = sdiv i32 %753, i32 2;
    i32 %755 = add i32 %688, i32 6;
    i32 %756 = add i32 %755, i32 %754;
    f32 %757 = s2f i32 %756 to f32;
    f32 %758 = fdiv f32 %750, f32 %757;
    f32 %759 = fadd f32 %748, f32 %758;
    f32* %760 = getelementptr &(f32* %695)[i64 6];
    f32 %761 = load f32* %760;
    i32 %762 = add i32 %688, i32 %677;
    i32 %763 = add i32 %755, i32 %672;
    i32 %764 = mul i32 %762, i32 %763;
    i32 %765 = sdiv i32 %764, i32 2;
    i32 %766 = add i32 %688, i32 7;
    i32 %767 = add i32 %766, i32 %765;
    f32 %768 = s2f i32 %767 to f32;
    f32 %769 = fdiv f32 %761, f32 %768;
    f32 %770 = fadd f32 %759, f32 %769;
    f32* %771 = getelementptr &(f32* %695)[i64 7];
    f32 %772 = load f32* %771;
    i32 %773 = add i32 %688, i32 %678;
    i32 %774 = add i32 %766, i32 %672;
    i32 %775 = mul i32 %773, i32 %774;
    i32 %776 = sdiv i32 %775, i32 2;
    i32 %777 = add i32 %688, i32 8;
    i32 %778 = add i32 %777, i32 %776;
    f32 %779 = s2f i32 %778 to f32;
    f32 %780 = fdiv f32 %772, f32 %779;
    f32 %781 = fadd f32 %770, f32 %780;
    f32* %782 = getelementptr &(f32* %695)[i64 8];
    f32 %783 = load f32* %782;
    i32 %784 = add i32 %688, i32 %679;
    i32 %785 = add i32 %777, i32 %672;
    i32 %786 = mul i32 %784, i32 %785;
    i32 %787 = sdiv i32 %786, i32 2;
    i32 %788 = add i32 %688, i32 9;
    i32 %789 = add i32 %788, i32 %787;
    f32 %790 = s2f i32 %789 to f32;
    f32 %791 = fdiv f32 %783, f32 %790;
    f32 %792 = fadd f32 %781, f32 %791;
    f32* %793 = getelementptr &(f32* %695)[i64 9];
    f32 %794 = load f32* %793;
    i32 %795 = add i32 %688, i32 %680;
    i32 %796 = add i32 %788, i32 %672;
    i32 %797 = mul i32 %795, i32 %796;
    i32 %798 = sdiv i32 %797, i32 2;
    i32 %799 = add i32 %688, i32 10;
    i32 %800 = add i32 %799, i32 %798;
    f32 %801 = s2f i32 %800 to f32;
    f32 %802 = fdiv f32 %794, f32 %801;
    f32 %803 = fadd f32 %792, f32 %802;
    f32* %804 = getelementptr &(f32* %695)[i64 10];
    f32 %805 = load f32* %804;
    i32 %806 = add i32 %688, i32 %681;
    i32 %807 = add i32 %799, i32 %672;
    i32 %808 = mul i32 %806, i32 %807;
    i32 %809 = sdiv i32 %808, i32 2;
    i32 %810 = add i32 %688, i32 11;
    i32 %811 = add i32 %810, i32 %809;
    f32 %812 = s2f i32 %811 to f32;
    f32 %813 = fdiv f32 %805, f32 %812;
    f32 %814 = fadd f32 %803, f32 %813;
    f32* %815 = getelementptr &(f32* %695)[i64 11];
    f32 %816 = load f32* %815;
    i32 %817 = add i32 %688, i32 %682;
    i32 %818 = add i32 %810, i32 %672;
    i32 %819 = mul i32 %817, i32 %818;
    i32 %820 = sdiv i32 %819, i32 2;
    i32 %821 = add i32 %688, i32 12;
    i32 %822 = add i32 %821, i32 %820;
    f32 %823 = s2f i32 %822 to f32;
    f32 %824 = fdiv f32 %816, f32 %823;
    f32 %825 = fadd f32 %814, f32 %824;
    f32* %826 = getelementptr &(f32* %695)[i64 12];
    f32 %827 = load f32* %826;
    i32 %828 = add i32 %688, i32 %683;
    i32 %829 = add i32 %821, i32 %672;
    i32 %830 = mul i32 %828, i32 %829;
    i32 %831 = sdiv i32 %830, i32 2;
    i32 %832 = add i32 %688, i32 13;
    i32 %833 = add i32 %832, i32 %831;
    f32 %834 = s2f i32 %833 to f32;
    f32 %835 = fdiv f32 %827, f32 %834;
    f32 %836 = fadd f32 %825, f32 %835;
    f32* %837 = getelementptr &(f32* %695)[i64 13];
    f32 %838 = load f32* %837;
    i32 %839 = add i32 %688, i32 %684;
    i32 %840 = add i32 %832, i32 %672;
    i32 %841 = mul i32 %839, i32 %840;
    i32 %842 = sdiv i32 %841, i32 2;
    i32 %843 = add i32 %688, i32 14;
    i32 %844 = add i32 %843, i32 %842;
    f32 %845 = s2f i32 %844 to f32;
    f32 %846 = fdiv f32 %838, f32 %845;
    f32 %847 = fadd f32 %836, f32 %846;
    f32* %848 = getelementptr &(f32* %695)[i64 14];
    f32 %849 = load f32* %848;
    i32 %850 = add i32 %688, i32 %685;
    i32 %851 = add i32 %843, i32 %672;
    i32 %852 = mul i32 %850, i32 %851;
    i32 %853 = sdiv i32 %852, i32 2;
    i32 %854 = add i32 %688, i32 15;
    i32 %855 = add i32 %854, i32 %853;
    f32 %856 = s2f i32 %855 to f32;
    f32 %857 = fdiv f32 %849, f32 %856;
    f32 %858 = fadd f32 %847, f32 %857;
    f32* %859 = getelementptr &(f32* %695)[i64 15];
    f32 %860 = load f32* %859;
    i32 %861 = add i32 %688, i32 %686;
    i32 %862 = add i32 %854, i32 %672;
    i32 %863 = mul i32 %861, i32 %862;
    i32 %864 = sdiv i32 %863, i32 2;
    i32 %865 = add i32 %864, i32 %689;
    f32 %866 = s2f i32 %865 to f32;
    f32 %867 = fdiv f32 %860, f32 %866;
    f32 %868 = fadd f32 %858, f32 %867;
    ubr ^super.header3;
^while.body9:
    f32 %869 = phi [^super.header3, f32 %687] [^while.body9, f32 %881];
    i32 %870 = phi [^super.header3, i32 %688] [^while.body9, i32 %874];
    f32* %871 = getelementptr &(f32* %2)[i32 %870];
    f32 %872 = load f32* %871;
    i32 %873 = add i32 %668, i32 %870;
    i32 %874 = add i32 %870, i32 1;
    i32 %875 = add i32 %870, i32 %672;
    i32 %876 = mul i32 %873, i32 %875;
    i32 %877 = sdiv i32 %876, i32 2;
    i32 %878 = add i32 %874, i32 %877;
    f32 %879 = s2f i32 %878 to f32;
    f32 %880 = fdiv f32 %872, f32 %879;
    f32 %881 = fadd f32 %869, f32 %880;
    i1 %882 = scmp lt i32 %874, i32 100000;
    cbr i1 %882(prob = 0.97), ^while.body9, ^b3;
^while.body10:
    i32 %883 = add i32 %22, i32 1;
    i1 %884 = scmp lt i32 %883, i32 1000;
    cbr i1 %884(prob = 1), ^while.body1, ^b4;
^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body11;
^while.body11:
    f32 %885 = phi [^b4, f32 0] [^while.body11, f32 %982];
    i32 %886 = phi [^b4, i32 0] [^while.body11, i32 %983];
    f32* %887 = getelementptr &(f32* %0)[i32 %886];
    f32 %888 = load f32* %887;
    f32* %889 = getelementptr &(f32* %1)[i32 %886];
    f32 %890 = load f32* %889;
    f32 %891 = fmul f32 %888, f32 %890;
    f32 %892 = fadd f32 %885, f32 %891;
    f32* %893 = getelementptr &(f32* %887)[i64 1];
    f32 %894 = load f32* %893;
    f32* %895 = getelementptr &(f32* %889)[i64 1];
    f32 %896 = load f32* %895;
    f32 %897 = fmul f32 %894, f32 %896;
    f32 %898 = fadd f32 %892, f32 %897;
    f32* %899 = getelementptr &(f32* %887)[i64 2];
    f32 %900 = load f32* %899;
    f32* %901 = getelementptr &(f32* %889)[i64 2];
    f32 %902 = load f32* %901;
    f32 %903 = fmul f32 %900, f32 %902;
    f32 %904 = fadd f32 %898, f32 %903;
    f32* %905 = getelementptr &(f32* %887)[i64 3];
    f32 %906 = load f32* %905;
    f32* %907 = getelementptr &(f32* %889)[i64 3];
    f32 %908 = load f32* %907;
    f32 %909 = fmul f32 %906, f32 %908;
    f32 %910 = fadd f32 %904, f32 %909;
    f32* %911 = getelementptr &(f32* %887)[i64 4];
    f32 %912 = load f32* %911;
    f32* %913 = getelementptr &(f32* %889)[i64 4];
    f32 %914 = load f32* %913;
    f32 %915 = fmul f32 %912, f32 %914;
    f32 %916 = fadd f32 %910, f32 %915;
    f32* %917 = getelementptr &(f32* %887)[i64 5];
    f32 %918 = load f32* %917;
    f32* %919 = getelementptr &(f32* %889)[i64 5];
    f32 %920 = load f32* %919;
    f32 %921 = fmul f32 %918, f32 %920;
    f32 %922 = fadd f32 %916, f32 %921;
    f32* %923 = getelementptr &(f32* %887)[i64 6];
    f32 %924 = load f32* %923;
    f32* %925 = getelementptr &(f32* %889)[i64 6];
    f32 %926 = load f32* %925;
    f32 %927 = fmul f32 %924, f32 %926;
    f32 %928 = fadd f32 %922, f32 %927;
    f32* %929 = getelementptr &(f32* %887)[i64 7];
    f32 %930 = load f32* %929;
    f32* %931 = getelementptr &(f32* %889)[i64 7];
    f32 %932 = load f32* %931;
    f32 %933 = fmul f32 %930, f32 %932;
    f32 %934 = fadd f32 %928, f32 %933;
    f32* %935 = getelementptr &(f32* %887)[i64 8];
    f32 %936 = load f32* %935;
    f32* %937 = getelementptr &(f32* %889)[i64 8];
    f32 %938 = load f32* %937;
    f32 %939 = fmul f32 %936, f32 %938;
    f32 %940 = fadd f32 %934, f32 %939;
    f32* %941 = getelementptr &(f32* %887)[i64 9];
    f32 %942 = load f32* %941;
    f32* %943 = getelementptr &(f32* %889)[i64 9];
    f32 %944 = load f32* %943;
    f32 %945 = fmul f32 %942, f32 %944;
    f32 %946 = fadd f32 %940, f32 %945;
    f32* %947 = getelementptr &(f32* %887)[i64 10];
    f32 %948 = load f32* %947;
    f32* %949 = getelementptr &(f32* %889)[i64 10];
    f32 %950 = load f32* %949;
    f32 %951 = fmul f32 %948, f32 %950;
    f32 %952 = fadd f32 %946, f32 %951;
    f32* %953 = getelementptr &(f32* %887)[i64 11];
    f32 %954 = load f32* %953;
    f32* %955 = getelementptr &(f32* %889)[i64 11];
    f32 %956 = load f32* %955;
    f32 %957 = fmul f32 %954, f32 %956;
    f32 %958 = fadd f32 %952, f32 %957;
    f32* %959 = getelementptr &(f32* %887)[i64 12];
    f32 %960 = load f32* %959;
    f32* %961 = getelementptr &(f32* %889)[i64 12];
    f32 %962 = load f32* %961;
    f32 %963 = fmul f32 %960, f32 %962;
    f32 %964 = fadd f32 %958, f32 %963;
    f32* %965 = getelementptr &(f32* %887)[i64 13];
    f32 %966 = load f32* %965;
    f32* %967 = getelementptr &(f32* %889)[i64 13];
    f32 %968 = load f32* %967;
    f32 %969 = fmul f32 %966, f32 %968;
    f32 %970 = fadd f32 %964, f32 %969;
    f32* %971 = getelementptr &(f32* %887)[i64 14];
    f32 %972 = load f32* %971;
    f32* %973 = getelementptr &(f32* %889)[i64 14];
    f32 %974 = load f32* %973;
    f32 %975 = fmul f32 %972, f32 %974;
    f32 %976 = fadd f32 %970, f32 %975;
    f32* %977 = getelementptr &(f32* %887)[i64 15];
    f32 %978 = load f32* %977;
    f32* %979 = getelementptr &(f32* %889)[i64 15];
    f32 %980 = load f32* %979;
    f32 %981 = fmul f32 %978, f32 %980;
    f32 %982 = fadd f32 %976, f32 %981;
    i32 %983 = add i32 %886, i32 16;
    i1 %984 = scmp lt i32 %983, i32 100000;
    cbr i1 %984(prob = 1), ^while.body11, ^while.body12;
^while.body12:
    f32 %985 = phi [^while.body11, f32 0] [^while.body12, f32 %1050];
    i32 %986 = phi [^while.body11, i32 0] [^while.body12, i32 %1051];
    f32* %987 = getelementptr &(f32* %1)[i32 %986];
    f32 %988 = load f32* %987;
    f32 %989 = fmul f32 %988, f32 %988;
    f32 %990 = fadd f32 %985, f32 %989;
    f32* %991 = getelementptr &(f32* %987)[i64 1];
    f32 %992 = load f32* %991;
    f32 %993 = fmul f32 %992, f32 %992;
    f32 %994 = fadd f32 %990, f32 %993;
    f32* %995 = getelementptr &(f32* %987)[i64 2];
    f32 %996 = load f32* %995;
    f32 %997 = fmul f32 %996, f32 %996;
    f32 %998 = fadd f32 %994, f32 %997;
    f32* %999 = getelementptr &(f32* %987)[i64 3];
    f32 %1000 = load f32* %999;
    f32 %1001 = fmul f32 %1000, f32 %1000;
    f32 %1002 = fadd f32 %998, f32 %1001;
    f32* %1003 = getelementptr &(f32* %987)[i64 4];
    f32 %1004 = load f32* %1003;
    f32 %1005 = fmul f32 %1004, f32 %1004;
    f32 %1006 = fadd f32 %1002, f32 %1005;
    f32* %1007 = getelementptr &(f32* %987)[i64 5];
    f32 %1008 = load f32* %1007;
    f32 %1009 = fmul f32 %1008, f32 %1008;
    f32 %1010 = fadd f32 %1006, f32 %1009;
    f32* %1011 = getelementptr &(f32* %987)[i64 6];
    f32 %1012 = load f32* %1011;
    f32 %1013 = fmul f32 %1012, f32 %1012;
    f32 %1014 = fadd f32 %1010, f32 %1013;
    f32* %1015 = getelementptr &(f32* %987)[i64 7];
    f32 %1016 = load f32* %1015;
    f32 %1017 = fmul f32 %1016, f32 %1016;
    f32 %1018 = fadd f32 %1014, f32 %1017;
    f32* %1019 = getelementptr &(f32* %987)[i64 8];
    f32 %1020 = load f32* %1019;
    f32 %1021 = fmul f32 %1020, f32 %1020;
    f32 %1022 = fadd f32 %1018, f32 %1021;
    f32* %1023 = getelementptr &(f32* %987)[i64 9];
    f32 %1024 = load f32* %1023;
    f32 %1025 = fmul f32 %1024, f32 %1024;
    f32 %1026 = fadd f32 %1022, f32 %1025;
    f32* %1027 = getelementptr &(f32* %987)[i64 10];
    f32 %1028 = load f32* %1027;
    f32 %1029 = fmul f32 %1028, f32 %1028;
    f32 %1030 = fadd f32 %1026, f32 %1029;
    f32* %1031 = getelementptr &(f32* %987)[i64 11];
    f32 %1032 = load f32* %1031;
    f32 %1033 = fmul f32 %1032, f32 %1032;
    f32 %1034 = fadd f32 %1030, f32 %1033;
    f32* %1035 = getelementptr &(f32* %987)[i64 12];
    f32 %1036 = load f32* %1035;
    f32 %1037 = fmul f32 %1036, f32 %1036;
    f32 %1038 = fadd f32 %1034, f32 %1037;
    f32* %1039 = getelementptr &(f32* %987)[i64 13];
    f32 %1040 = load f32* %1039;
    f32 %1041 = fmul f32 %1040, f32 %1040;
    f32 %1042 = fadd f32 %1038, f32 %1041;
    f32* %1043 = getelementptr &(f32* %987)[i64 14];
    f32 %1044 = load f32* %1043;
    f32 %1045 = fmul f32 %1044, f32 %1044;
    f32 %1046 = fadd f32 %1042, f32 %1045;
    f32* %1047 = getelementptr &(f32* %987)[i64 15];
    f32 %1048 = load f32* %1047;
    f32 %1049 = fmul f32 %1048, f32 %1048;
    f32 %1050 = fadd f32 %1046, f32 %1049;
    i32 %1051 = add i32 %986, i32 16;
    i1 %1052 = scmp lt i32 %1051, i32 100000;
    cbr i1 %1052(prob = 1), ^while.body12, ^b5;
^b5:
    f32 %1053 = fdiv f32 %982, f32 %1050;
    f32 %1054 = fsub f32 1, f32 %1053;
    i1 %1055 = fcmp gt f32 %1054, f32 1e-06;
    i1 %1056 = fcmp lt f32 %1054, f32 -1e-06;
    i1 %1057 = or i1 %1055, i1 %1056;
    cbr i1 %1057(prob = 0.98), ^while.body13, ^b6;
^while.body13:
    f32 %1058 = phi [^b5, f32 1] [^b9, f32 %1061];
    f32 %1059 = fdiv f32 %1053, f32 %1058;
    f32 %1060 = fadd f32 %1058, f32 %1059;
    f32 %1061 = fdiv f32 %1060, f32 2;
    f32 %1062 = fdiv f32 %1053, f32 %1061;
    f32 %1063 = fsub f32 %1061, f32 %1062;
    i1 %1064 = fcmp gt f32 %1063, f32 1e-06;
    cbr i1 %1064(prob = 0.5), ^b9, ^b7;
^b6:
    f32 %1065 = phi [^b5, f32 1] [^b9, f32 %1061];
    f32 %1066 = fsub f32 %1065, f32 1;
    i1 %1067 = fcmp le f32 %1066, f32 1e-06;
    cbr i1 %1067(prob = 0.5), ^b8, ^b10;
^b7:
    i1 %1068 = fcmp lt f32 %1063, f32 -1e-06;
    ubr ^b9;
^b8:
    i1 %1069 = fcmp ge f32 %1066, f32 -1e-06;
    ubr ^b10;
^b9:
    i1 %1070 = phi [^while.body13, i1 true] [^b7, i1 %1068];
    cbr i1 %1070(prob = 0.97), ^while.body13, ^b6;
^b10:
    i1 %1071 = phi [^b6, i1 false] [^b8, i1 %1069];
    i32 %1072 = zext i1 %1071 to i32;
    call (i32) -> void @putint(i32 %1072);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
