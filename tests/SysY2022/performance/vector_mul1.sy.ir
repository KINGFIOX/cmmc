internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %66];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %2)[i64 16];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %2)[i64 17];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %2)[i64 18];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %2)[i64 19];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %2)[i64 20];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %2)[i64 21];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %2)[i64 22];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %2)[i64 23];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %2)[i64 24];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %2)[i64 25];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %2)[i64 26];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %2)[i64 27];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %2)[i64 28];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %2)[i64 29];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %2)[i64 30];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %2)[i64 31];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %2)[i64 32];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %2)[i64 33];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %2)[i64 34];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %2)[i64 35];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %2)[i64 36];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %2)[i64 37];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %2)[i64 38];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %2)[i64 39];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %2)[i64 40];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %2)[i64 41];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %2)[i64 42];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %2)[i64 43];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %2)[i64 44];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %2)[i64 45];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %2)[i64 46];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %2)[i64 47];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %2)[i64 48];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %2)[i64 49];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %2)[i64 50];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %2)[i64 51];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %2)[i64 52];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %2)[i64 53];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %2)[i64 54];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %2)[i64 55];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %2)[i64 56];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %2)[i64 57];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %2)[i64 58];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %2)[i64 59];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %2)[i64 60];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %2)[i64 61];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %2)[i64 62];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %2)[i64 63];
    store f32* %65 with f32 1;
    i32 %66 = add i32 %1, i32 64;
    i1 %67 = icmp slt i32 %66, i32 99968;
    cbr i1 %67(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    f32* %68 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %66];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %68)[i64 1];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %68)[i64 2];
    store f32* %70 with f32 1;
    f32* %71 = getelementptr &(f32* %68)[i64 3];
    store f32* %71 with f32 1;
    f32* %72 = getelementptr &(f32* %68)[i64 4];
    store f32* %72 with f32 1;
    f32* %73 = getelementptr &(f32* %68)[i64 5];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %68)[i64 6];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %68)[i64 7];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %68)[i64 8];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %68)[i64 9];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %68)[i64 10];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %68)[i64 11];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %68)[i64 12];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %68)[i64 13];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %68)[i64 14];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %68)[i64 15];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %68)[i64 16];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %68)[i64 17];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %68)[i64 18];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %68)[i64 19];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %68)[i64 20];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %68)[i64 21];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %68)[i64 22];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %68)[i64 23];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %68)[i64 24];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %68)[i64 25];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %68)[i64 26];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %68)[i64 27];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %68)[i64 28];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %68)[i64 29];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %68)[i64 30];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %68)[i64 31];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %101 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %102 = getelementptr &([100000 * f32]* %101)[i64 0][i64 0];
    [100000 * f32]* %103 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %104 = getelementptr &([100000 * f32]* %103)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^while.body6, i32 %220];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %110];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp slt i32 %107, i32 100000;
    cbr i1 %111(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %130];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %129];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %132];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body3, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body3, f32 %144];
    f32* %118 = getelementptr &(f32* %104)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 4;
    i1 %120 = icmp slt i32 %119, i32 100000;
    cbr i1 %120(prob = 0.89), ^prebody, ^while.body3;
  ^while.header3:
    i1 %121 = icmp slt i32 %113, i32 100000;
    cbr i1 %121(prob = 0.97), ^prebody1, ^b1;
  ^while.header4:
    f32 %122 = phi [^while.header2, f32 0] [^b2, f32 %201];
    i32 %123 = phi [^while.header2, i32 0] [^b2, i32 %200];
    i32 %124 = phi [^while.header2, i32 0] [^b2, i32 %150];
    i1 %125 = icmp slt i32 %124, i32 100000;
    cbr i1 %125(prob = 0.97), ^while.header5, ^while.header6;
  ^prebody:
    i32 %126 = add i32 %108, i32 2;
    i32 %127 = add i32 %108, i32 3;
    i32 %128 = add i32 %108, i32 4;
    ubr ^while.body4;
  ^b1:
    i32 %129 = phi [^while.header3, i32 %113] [^while.body5, i32 100000];
    f32 %130 = phi [^while.header3, f32 %112] [^while.body5, f32 %215];
    f32* %131 = getelementptr &(f32* %102)[i32 %114];
    store f32* %131 with f32 %130;
    i32 %132 = add i32 %114, i32 1;
    ubr ^while.header2;
  ^while.body3 {scalar}:
    i32 %133 = phi [^super.header, i32 %107] [^while.body3, i32 %145] [^while.body4, i32 %198];
    f32 %134 = phi [^super.header, f32 %106] [^while.body3, f32 %144] [^while.body4, f32 %197];
    i32 %135 = add i32 %108, i32 %133;
    i32 %136 = add i32 %110, i32 %133;
    i32 %137 = mul i32 %135, i32 %136;
    i32 %138 = sdiv i32 %137, i32 2;
    i32 %139 = add i32 %110, i32 %138;
    f32 %140 = s2f i32 %139 to f32;
    f32* %141 = getelementptr &(f32* %100)[i32 %133];
    f32 %142 = load f32* %141;
    f32 %143 = fdiv f32 %142, f32 %140;
    f32 %144 = fadd f32 %134, f32 %143;
    i32 %145 = add i32 %133, i32 1;
    i1 %146 = icmp slt i32 %145, i32 100000;
    cbr i1 %146(prob = 0.75), ^while.body3, ^b;
  ^prebody1:
    i32 %147 = add i32 %113, i32 4;
    i1 %148 = icmp slt i32 %147, i32 100000;
    i32 %149 = add i32 %114, i32 1;
    cbr i1 %148(prob = 0.89), ^prebody2, ^while.body5;
  ^while.header5:
    i32 %150 = add i32 %124, i32 1;
    i1 %151 = icmp slt i32 %123, i32 100000;
    cbr i1 %151(prob = 0.97), ^super.header1, ^b2;
  ^while.header6:
    f32 %152 = phi [^while.header4, f32 0] [^b3, f32 %270];
    i32 %153 = phi [^while.header4, i32 0] [^b3, i32 %269];
    i32 %154 = phi [^while.header4, i32 0] [^b3, i32 %272];
    i1 %155 = icmp slt i32 %154, i32 100000;
    cbr i1 %155(prob = 0.97), ^while.header7, ^while.body6;
  ^prebody2:
    i32 %156 = add i32 %114, i32 2;
    i32 %157 = add i32 %114, i32 3;
    i32 %158 = add i32 %114, i32 4;
    ubr ^while.body7;
  ^while.body4:
    f32 %159 = phi [^prebody, f32 %106] [^while.body4, f32 %197];
    i32 %160 = phi [^prebody, i32 %107] [^while.body4, i32 %198];
    i32 %161 = add i32 %108, i32 %160;
    i32 %162 = add i32 %110, i32 %160;
    i32 %163 = mul i32 %161, i32 %162;
    i32 %164 = sdiv i32 %163, i32 2;
    i32 %165 = add i32 %110, i32 %164;
    f32 %166 = s2f i32 %165 to f32;
    f32* %167 = getelementptr &(f32* %100)[i32 %160];
    f32 %168 = load f32* %167;
    f32 %169 = fdiv f32 %168, f32 %166;
    f32 %170 = fadd f32 %159, f32 %169;
    i32 %171 = add i32 %126, i32 %160;
    i32 %172 = mul i32 %162, i32 %171;
    i32 %173 = sdiv i32 %172, i32 2;
    i32 %174 = add i32 %110, i32 %173;
    f32 %175 = s2f i32 %174 to f32;
    f32* %176 = getelementptr &(f32* %167)[i64 1];
    f32 %177 = load f32* %176;
    f32 %178 = fdiv f32 %177, f32 %175;
    f32 %179 = fadd f32 %170, f32 %178;
    i32 %180 = add i32 %127, i32 %160;
    i32 %181 = mul i32 %171, i32 %180;
    i32 %182 = sdiv i32 %181, i32 2;
    i32 %183 = add i32 %110, i32 %182;
    f32 %184 = s2f i32 %183 to f32;
    f32* %185 = getelementptr &(f32* %167)[i64 2];
    f32 %186 = load f32* %185;
    f32 %187 = fdiv f32 %186, f32 %184;
    f32 %188 = fadd f32 %179, f32 %187;
    i32 %189 = add i32 %128, i32 %160;
    i32 %190 = mul i32 %180, i32 %189;
    i32 %191 = sdiv i32 %190, i32 2;
    i32 %192 = add i32 %110, i32 %191;
    f32 %193 = s2f i32 %192 to f32;
    f32* %194 = getelementptr &(f32* %167)[i64 3];
    f32 %195 = load f32* %194;
    f32 %196 = fdiv f32 %195, f32 %193;
    f32 %197 = fadd f32 %188, f32 %196;
    i32 %198 = add i32 %160, i32 4;
    i1 %199 = icmp slt i32 %198, i32 99996;
    cbr i1 %199(prob = 0.89), ^while.body4, ^while.body3;
  ^b2:
    i32 %200 = phi [^while.header5, i32 %123] [^while.body8, i32 100000];
    f32 %201 = phi [^while.header5, f32 %122] [^while.body8, f32 %284];
    f32* %202 = getelementptr &(f32* %104)[i32 %124];
    store f32* %202 with f32 %201;
    ubr ^while.header4;
  ^while.body5 {scalar}:
    i32 %203 = phi [^prebody1, i32 %113] [^while.body5, i32 %209] [^while.body7, i32 %261];
    f32 %204 = phi [^prebody1, f32 %112] [^while.body5, f32 %215] [^while.body7, f32 %267];
    i32 %205 = add i32 %114, i32 %203;
    i32 %206 = add i32 %149, i32 %203;
    i32 %207 = mul i32 %205, i32 %206;
    i32 %208 = sdiv i32 %207, i32 2;
    i32 %209 = add i32 %203, i32 1;
    i32 %210 = add i32 %208, i32 %209;
    f32 %211 = s2f i32 %210 to f32;
    f32* %212 = getelementptr &(f32* %104)[i32 %203];
    f32 %213 = load f32* %212;
    f32 %214 = fdiv f32 %213, f32 %211;
    f32 %215 = fadd f32 %204, f32 %214;
    i1 %216 = icmp slt i32 %209, i32 100000;
    cbr i1 %216(prob = 0.75), ^while.body5, ^b1;
  ^super.header1:
    i32 %217 = add i32 %123, i32 4;
    i1 %218 = icmp slt i32 %217, i32 100000;
    cbr i1 %218(prob = 0.89), ^prebody3, ^while.body8;
  ^while.header7:
    i1 %219 = icmp slt i32 %153, i32 100000;
    cbr i1 %219(prob = 0.97), ^prebody4, ^b3;
  ^while.body6:
    i32 %220 = add i32 %105, i32 1;
    i1 %221 = icmp slt i32 %220, i32 1000;
    cbr i1 %221(prob = 1), ^while.body2, ^b4;
  ^prebody3:
    i32 %222 = add i32 %124, i32 2;
    i32 %223 = add i32 %124, i32 3;
    i32 %224 = add i32 %124, i32 4;
    ubr ^while.body9;
  ^while.body7:
    f32 %225 = phi [^prebody2, f32 %112] [^while.body7, f32 %267];
    i32 %226 = phi [^prebody2, i32 %113] [^while.body7, i32 %261];
    i32 %227 = add i32 %114, i32 %226;
    i32 %228 = add i32 %149, i32 %226;
    i32 %229 = mul i32 %227, i32 %228;
    i32 %230 = sdiv i32 %229, i32 2;
    i32 %231 = add i32 %226, i32 1;
    i32 %232 = add i32 %230, i32 %231;
    f32 %233 = s2f i32 %232 to f32;
    f32* %234 = getelementptr &(f32* %104)[i32 %226];
    f32 %235 = load f32* %234;
    f32 %236 = fdiv f32 %235, f32 %233;
    f32 %237 = fadd f32 %225, f32 %236;
    i32 %238 = add i32 %156, i32 %226;
    i32 %239 = mul i32 %228, i32 %238;
    i32 %240 = sdiv i32 %239, i32 2;
    i32 %241 = add i32 %226, i32 2;
    i32 %242 = add i32 %240, i32 %241;
    f32 %243 = s2f i32 %242 to f32;
    f32* %244 = getelementptr &(f32* %234)[i64 1];
    f32 %245 = load f32* %244;
    f32 %246 = fdiv f32 %245, f32 %243;
    f32 %247 = fadd f32 %237, f32 %246;
    i32 %248 = add i32 %157, i32 %226;
    i32 %249 = mul i32 %238, i32 %248;
    i32 %250 = sdiv i32 %249, i32 2;
    i32 %251 = add i32 %226, i32 3;
    i32 %252 = add i32 %250, i32 %251;
    f32 %253 = s2f i32 %252 to f32;
    f32* %254 = getelementptr &(f32* %234)[i64 2];
    f32 %255 = load f32* %254;
    f32 %256 = fdiv f32 %255, f32 %253;
    f32 %257 = fadd f32 %247, f32 %256;
    i32 %258 = add i32 %158, i32 %226;
    i32 %259 = mul i32 %248, i32 %258;
    i32 %260 = sdiv i32 %259, i32 2;
    i32 %261 = add i32 %226, i32 4;
    i32 %262 = add i32 %260, i32 %261;
    f32 %263 = s2f i32 %262 to f32;
    f32* %264 = getelementptr &(f32* %234)[i64 3];
    f32 %265 = load f32* %264;
    f32 %266 = fdiv f32 %265, f32 %263;
    f32 %267 = fadd f32 %257, f32 %266;
    i1 %268 = icmp slt i32 %261, i32 99996;
    cbr i1 %268(prob = 0.89), ^while.body7, ^while.body5;
  ^b3:
    i32 %269 = phi [^while.header7, i32 %153] [^while.body10, i32 100000];
    f32 %270 = phi [^while.header7, f32 %152] [^while.body10, f32 %346];
    f32* %271 = getelementptr &(f32* %100)[i32 %154];
    store f32* %271 with f32 %270;
    i32 %272 = add i32 %154, i32 1;
    ubr ^while.header6;
  ^while.body8 {scalar}:
    i32 %273 = phi [^super.header1, i32 %123] [^while.body8, i32 %285] [^while.body9, i32 %332];
    f32 %274 = phi [^super.header1, f32 %122] [^while.body8, f32 %284] [^while.body9, f32 %331];
    i32 %275 = add i32 %124, i32 %273;
    i32 %276 = add i32 %150, i32 %273;
    i32 %277 = mul i32 %275, i32 %276;
    i32 %278 = sdiv i32 %277, i32 2;
    i32 %279 = add i32 %150, i32 %278;
    f32 %280 = s2f i32 %279 to f32;
    f32* %281 = getelementptr &(f32* %102)[i32 %273];
    f32 %282 = load f32* %281;
    f32 %283 = fdiv f32 %282, f32 %280;
    f32 %284 = fadd f32 %274, f32 %283;
    i32 %285 = add i32 %273, i32 1;
    i1 %286 = icmp slt i32 %285, i32 100000;
    cbr i1 %286(prob = 0.75), ^while.body8, ^b2;
  ^prebody4:
    i32 %287 = add i32 %153, i32 4;
    i1 %288 = icmp slt i32 %287, i32 100000;
    i32 %289 = add i32 %154, i32 1;
    cbr i1 %288(prob = 0.89), ^prebody5, ^while.body10;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body11;
  ^prebody5:
    i32 %290 = add i32 %154, i32 2;
    i32 %291 = add i32 %154, i32 3;
    i32 %292 = add i32 %154, i32 4;
    ubr ^while.body12;
  ^while.body9:
    f32 %293 = phi [^prebody3, f32 %122] [^while.body9, f32 %331];
    i32 %294 = phi [^prebody3, i32 %123] [^while.body9, i32 %332];
    i32 %295 = add i32 %124, i32 %294;
    i32 %296 = add i32 %150, i32 %294;
    i32 %297 = mul i32 %295, i32 %296;
    i32 %298 = sdiv i32 %297, i32 2;
    i32 %299 = add i32 %150, i32 %298;
    f32 %300 = s2f i32 %299 to f32;
    f32* %301 = getelementptr &(f32* %102)[i32 %294];
    f32 %302 = load f32* %301;
    f32 %303 = fdiv f32 %302, f32 %300;
    f32 %304 = fadd f32 %293, f32 %303;
    i32 %305 = add i32 %222, i32 %294;
    i32 %306 = mul i32 %296, i32 %305;
    i32 %307 = sdiv i32 %306, i32 2;
    i32 %308 = add i32 %150, i32 %307;
    f32 %309 = s2f i32 %308 to f32;
    f32* %310 = getelementptr &(f32* %301)[i64 1];
    f32 %311 = load f32* %310;
    f32 %312 = fdiv f32 %311, f32 %309;
    f32 %313 = fadd f32 %304, f32 %312;
    i32 %314 = add i32 %223, i32 %294;
    i32 %315 = mul i32 %305, i32 %314;
    i32 %316 = sdiv i32 %315, i32 2;
    i32 %317 = add i32 %150, i32 %316;
    f32 %318 = s2f i32 %317 to f32;
    f32* %319 = getelementptr &(f32* %301)[i64 2];
    f32 %320 = load f32* %319;
    f32 %321 = fdiv f32 %320, f32 %318;
    f32 %322 = fadd f32 %313, f32 %321;
    i32 %323 = add i32 %224, i32 %294;
    i32 %324 = mul i32 %314, i32 %323;
    i32 %325 = sdiv i32 %324, i32 2;
    i32 %326 = add i32 %150, i32 %325;
    f32 %327 = s2f i32 %326 to f32;
    f32* %328 = getelementptr &(f32* %301)[i64 3];
    f32 %329 = load f32* %328;
    f32 %330 = fdiv f32 %329, f32 %327;
    f32 %331 = fadd f32 %322, f32 %330;
    i32 %332 = add i32 %294, i32 4;
    i1 %333 = icmp slt i32 %332, i32 99996;
    cbr i1 %333(prob = 0.89), ^while.body9, ^while.body8;
  ^while.body10 {scalar}:
    i32 %334 = phi [^prebody4, i32 %153] [^while.body10, i32 %340] [^while.body12, i32 %484];
    f32 %335 = phi [^prebody4, f32 %152] [^while.body10, f32 %346] [^while.body12, f32 %490];
    i32 %336 = add i32 %154, i32 %334;
    i32 %337 = add i32 %289, i32 %334;
    i32 %338 = mul i32 %336, i32 %337;
    i32 %339 = sdiv i32 %338, i32 2;
    i32 %340 = add i32 %334, i32 1;
    i32 %341 = add i32 %339, i32 %340;
    f32 %342 = s2f i32 %341 to f32;
    f32* %343 = getelementptr &(f32* %104)[i32 %334];
    f32 %344 = load f32* %343;
    f32 %345 = fdiv f32 %344, f32 %342;
    f32 %346 = fadd f32 %335, f32 %345;
    i1 %347 = icmp slt i32 %340, i32 100000;
    cbr i1 %347(prob = 0.75), ^while.body10, ^b3;
  ^while.body11:
    f32 %348 = phi [^b4, f32 0] [^while.body11, f32 %445];
    i32 %349 = phi [^b4, i32 0] [^while.body11, i32 %446];
    f32* %350 = getelementptr &(f32* %100)[i32 %349];
    f32 %351 = load f32* %350;
    f32* %352 = getelementptr &(f32* %102)[i32 %349];
    f32 %353 = load f32* %352;
    f32 %354 = fmul f32 %351, f32 %353;
    f32 %355 = fadd f32 %348, f32 %354;
    f32* %356 = getelementptr &(f32* %350)[i64 1];
    f32 %357 = load f32* %356;
    f32* %358 = getelementptr &(f32* %352)[i64 1];
    f32 %359 = load f32* %358;
    f32 %360 = fmul f32 %357, f32 %359;
    f32 %361 = fadd f32 %355, f32 %360;
    f32* %362 = getelementptr &(f32* %350)[i64 2];
    f32 %363 = load f32* %362;
    f32* %364 = getelementptr &(f32* %352)[i64 2];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %363, f32 %365;
    f32 %367 = fadd f32 %361, f32 %366;
    f32* %368 = getelementptr &(f32* %350)[i64 3];
    f32 %369 = load f32* %368;
    f32* %370 = getelementptr &(f32* %352)[i64 3];
    f32 %371 = load f32* %370;
    f32 %372 = fmul f32 %369, f32 %371;
    f32 %373 = fadd f32 %367, f32 %372;
    f32* %374 = getelementptr &(f32* %350)[i64 4];
    f32 %375 = load f32* %374;
    f32* %376 = getelementptr &(f32* %352)[i64 4];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 %375, f32 %377;
    f32 %379 = fadd f32 %373, f32 %378;
    f32* %380 = getelementptr &(f32* %350)[i64 5];
    f32 %381 = load f32* %380;
    f32* %382 = getelementptr &(f32* %352)[i64 5];
    f32 %383 = load f32* %382;
    f32 %384 = fmul f32 %381, f32 %383;
    f32 %385 = fadd f32 %379, f32 %384;
    f32* %386 = getelementptr &(f32* %350)[i64 6];
    f32 %387 = load f32* %386;
    f32* %388 = getelementptr &(f32* %352)[i64 6];
    f32 %389 = load f32* %388;
    f32 %390 = fmul f32 %387, f32 %389;
    f32 %391 = fadd f32 %385, f32 %390;
    f32* %392 = getelementptr &(f32* %350)[i64 7];
    f32 %393 = load f32* %392;
    f32* %394 = getelementptr &(f32* %352)[i64 7];
    f32 %395 = load f32* %394;
    f32 %396 = fmul f32 %393, f32 %395;
    f32 %397 = fadd f32 %391, f32 %396;
    f32* %398 = getelementptr &(f32* %350)[i64 8];
    f32 %399 = load f32* %398;
    f32* %400 = getelementptr &(f32* %352)[i64 8];
    f32 %401 = load f32* %400;
    f32 %402 = fmul f32 %399, f32 %401;
    f32 %403 = fadd f32 %397, f32 %402;
    f32* %404 = getelementptr &(f32* %350)[i64 9];
    f32 %405 = load f32* %404;
    f32* %406 = getelementptr &(f32* %352)[i64 9];
    f32 %407 = load f32* %406;
    f32 %408 = fmul f32 %405, f32 %407;
    f32 %409 = fadd f32 %403, f32 %408;
    f32* %410 = getelementptr &(f32* %350)[i64 10];
    f32 %411 = load f32* %410;
    f32* %412 = getelementptr &(f32* %352)[i64 10];
    f32 %413 = load f32* %412;
    f32 %414 = fmul f32 %411, f32 %413;
    f32 %415 = fadd f32 %409, f32 %414;
    f32* %416 = getelementptr &(f32* %350)[i64 11];
    f32 %417 = load f32* %416;
    f32* %418 = getelementptr &(f32* %352)[i64 11];
    f32 %419 = load f32* %418;
    f32 %420 = fmul f32 %417, f32 %419;
    f32 %421 = fadd f32 %415, f32 %420;
    f32* %422 = getelementptr &(f32* %350)[i64 12];
    f32 %423 = load f32* %422;
    f32* %424 = getelementptr &(f32* %352)[i64 12];
    f32 %425 = load f32* %424;
    f32 %426 = fmul f32 %423, f32 %425;
    f32 %427 = fadd f32 %421, f32 %426;
    f32* %428 = getelementptr &(f32* %350)[i64 13];
    f32 %429 = load f32* %428;
    f32* %430 = getelementptr &(f32* %352)[i64 13];
    f32 %431 = load f32* %430;
    f32 %432 = fmul f32 %429, f32 %431;
    f32 %433 = fadd f32 %427, f32 %432;
    f32* %434 = getelementptr &(f32* %350)[i64 14];
    f32 %435 = load f32* %434;
    f32* %436 = getelementptr &(f32* %352)[i64 14];
    f32 %437 = load f32* %436;
    f32 %438 = fmul f32 %435, f32 %437;
    f32 %439 = fadd f32 %433, f32 %438;
    f32* %440 = getelementptr &(f32* %350)[i64 15];
    f32 %441 = load f32* %440;
    f32* %442 = getelementptr &(f32* %352)[i64 15];
    f32 %443 = load f32* %442;
    f32 %444 = fmul f32 %441, f32 %443;
    f32 %445 = fadd f32 %439, f32 %444;
    i32 %446 = add i32 %349, i32 16;
    i1 %447 = icmp slt i32 %446, i32 99984;
    cbr i1 %447(prob = 1), ^while.body11, ^while.body13;
  ^while.body12:
    f32 %448 = phi [^prebody5, f32 %152] [^while.body12, f32 %490];
    i32 %449 = phi [^prebody5, i32 %153] [^while.body12, i32 %484];
    i32 %450 = add i32 %154, i32 %449;
    i32 %451 = add i32 %289, i32 %449;
    i32 %452 = mul i32 %450, i32 %451;
    i32 %453 = sdiv i32 %452, i32 2;
    i32 %454 = add i32 %449, i32 1;
    i32 %455 = add i32 %453, i32 %454;
    f32 %456 = s2f i32 %455 to f32;
    f32* %457 = getelementptr &(f32* %104)[i32 %449];
    f32 %458 = load f32* %457;
    f32 %459 = fdiv f32 %458, f32 %456;
    f32 %460 = fadd f32 %448, f32 %459;
    i32 %461 = add i32 %290, i32 %449;
    i32 %462 = mul i32 %451, i32 %461;
    i32 %463 = sdiv i32 %462, i32 2;
    i32 %464 = add i32 %449, i32 2;
    i32 %465 = add i32 %463, i32 %464;
    f32 %466 = s2f i32 %465 to f32;
    f32* %467 = getelementptr &(f32* %457)[i64 1];
    f32 %468 = load f32* %467;
    f32 %469 = fdiv f32 %468, f32 %466;
    f32 %470 = fadd f32 %460, f32 %469;
    i32 %471 = add i32 %291, i32 %449;
    i32 %472 = mul i32 %461, i32 %471;
    i32 %473 = sdiv i32 %472, i32 2;
    i32 %474 = add i32 %449, i32 3;
    i32 %475 = add i32 %473, i32 %474;
    f32 %476 = s2f i32 %475 to f32;
    f32* %477 = getelementptr &(f32* %457)[i64 2];
    f32 %478 = load f32* %477;
    f32 %479 = fdiv f32 %478, f32 %476;
    f32 %480 = fadd f32 %470, f32 %479;
    i32 %481 = add i32 %292, i32 %449;
    i32 %482 = mul i32 %471, i32 %481;
    i32 %483 = sdiv i32 %482, i32 2;
    i32 %484 = add i32 %449, i32 4;
    i32 %485 = add i32 %483, i32 %484;
    f32 %486 = s2f i32 %485 to f32;
    f32* %487 = getelementptr &(f32* %457)[i64 3];
    f32 %488 = load f32* %487;
    f32 %489 = fdiv f32 %488, f32 %486;
    f32 %490 = fadd f32 %480, f32 %489;
    i1 %491 = icmp slt i32 %484, i32 99996;
    cbr i1 %491(prob = 0.89), ^while.body12, ^while.body10;
  ^while.body13:
    f32* %492 = getelementptr &(f32* %100)[i32 %446];
    f32 %493 = load f32* %492;
    f32* %494 = getelementptr &(f32* %102)[i32 %446];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 %493, f32 %495;
    f32 %497 = fadd f32 %445, f32 %496;
    f32* %498 = getelementptr &(f32* %492)[i64 1];
    f32 %499 = load f32* %498;
    f32* %500 = getelementptr &(f32* %494)[i64 1];
    f32 %501 = load f32* %500;
    f32 %502 = fmul f32 %499, f32 %501;
    f32 %503 = fadd f32 %497, f32 %502;
    f32* %504 = getelementptr &(f32* %492)[i64 2];
    f32 %505 = load f32* %504;
    f32* %506 = getelementptr &(f32* %494)[i64 2];
    f32 %507 = load f32* %506;
    f32 %508 = fmul f32 %505, f32 %507;
    f32 %509 = fadd f32 %503, f32 %508;
    f32* %510 = getelementptr &(f32* %492)[i64 3];
    f32 %511 = load f32* %510;
    f32* %512 = getelementptr &(f32* %494)[i64 3];
    f32 %513 = load f32* %512;
    f32 %514 = fmul f32 %511, f32 %513;
    f32 %515 = fadd f32 %509, f32 %514;
    f32* %516 = getelementptr &(f32* %492)[i64 4];
    f32 %517 = load f32* %516;
    f32* %518 = getelementptr &(f32* %494)[i64 4];
    f32 %519 = load f32* %518;
    f32 %520 = fmul f32 %517, f32 %519;
    f32 %521 = fadd f32 %515, f32 %520;
    f32* %522 = getelementptr &(f32* %492)[i64 5];
    f32 %523 = load f32* %522;
    f32* %524 = getelementptr &(f32* %494)[i64 5];
    f32 %525 = load f32* %524;
    f32 %526 = fmul f32 %523, f32 %525;
    f32 %527 = fadd f32 %521, f32 %526;
    f32* %528 = getelementptr &(f32* %492)[i64 6];
    f32 %529 = load f32* %528;
    f32* %530 = getelementptr &(f32* %494)[i64 6];
    f32 %531 = load f32* %530;
    f32 %532 = fmul f32 %529, f32 %531;
    f32 %533 = fadd f32 %527, f32 %532;
    f32* %534 = getelementptr &(f32* %492)[i64 7];
    f32 %535 = load f32* %534;
    f32* %536 = getelementptr &(f32* %494)[i64 7];
    f32 %537 = load f32* %536;
    f32 %538 = fmul f32 %535, f32 %537;
    f32 %539 = fadd f32 %533, f32 %538;
    f32* %540 = getelementptr &(f32* %492)[i64 8];
    f32 %541 = load f32* %540;
    f32* %542 = getelementptr &(f32* %494)[i64 8];
    f32 %543 = load f32* %542;
    f32 %544 = fmul f32 %541, f32 %543;
    f32 %545 = fadd f32 %539, f32 %544;
    f32* %546 = getelementptr &(f32* %492)[i64 9];
    f32 %547 = load f32* %546;
    f32* %548 = getelementptr &(f32* %494)[i64 9];
    f32 %549 = load f32* %548;
    f32 %550 = fmul f32 %547, f32 %549;
    f32 %551 = fadd f32 %545, f32 %550;
    f32* %552 = getelementptr &(f32* %492)[i64 10];
    f32 %553 = load f32* %552;
    f32* %554 = getelementptr &(f32* %494)[i64 10];
    f32 %555 = load f32* %554;
    f32 %556 = fmul f32 %553, f32 %555;
    f32 %557 = fadd f32 %551, f32 %556;
    f32* %558 = getelementptr &(f32* %492)[i64 11];
    f32 %559 = load f32* %558;
    f32* %560 = getelementptr &(f32* %494)[i64 11];
    f32 %561 = load f32* %560;
    f32 %562 = fmul f32 %559, f32 %561;
    f32 %563 = fadd f32 %557, f32 %562;
    i32 %564 = add i32 %349, i32 28;
    ubr ^while.body14;
  ^while.body14 {scalar}:
    i32 %565 = phi [^while.body13, i32 %564] [^while.body14, i32 %573];
    f32 %566 = phi [^while.body13, f32 %563] [^while.body14, f32 %572];
    f32* %567 = getelementptr &(f32* %100)[i32 %565];
    f32 %568 = load f32* %567;
    f32* %569 = getelementptr &(f32* %102)[i32 %565];
    f32 %570 = load f32* %569;
    f32 %571 = fmul f32 %568, f32 %570;
    f32 %572 = fadd f32 %566, f32 %571;
    i32 %573 = add i32 %565, i32 1;
    i1 %574 = icmp slt i32 %573, i32 100000;
    cbr i1 %574(prob = 0.75), ^while.body14, ^while.body15;
  ^while.body15:
    f32 %575 = phi [^while.body14, f32 0] [^while.body15, f32 %640];
    i32 %576 = phi [^while.body14, i32 0] [^while.body15, i32 %641];
    f32* %577 = getelementptr &(f32* %102)[i32 %576];
    f32 %578 = load f32* %577;
    f32 %579 = fmul f32 %578, f32 %578;
    f32 %580 = fadd f32 %575, f32 %579;
    f32* %581 = getelementptr &(f32* %577)[i64 1];
    f32 %582 = load f32* %581;
    f32 %583 = fmul f32 %582, f32 %582;
    f32 %584 = fadd f32 %580, f32 %583;
    f32* %585 = getelementptr &(f32* %577)[i64 2];
    f32 %586 = load f32* %585;
    f32 %587 = fmul f32 %586, f32 %586;
    f32 %588 = fadd f32 %584, f32 %587;
    f32* %589 = getelementptr &(f32* %577)[i64 3];
    f32 %590 = load f32* %589;
    f32 %591 = fmul f32 %590, f32 %590;
    f32 %592 = fadd f32 %588, f32 %591;
    f32* %593 = getelementptr &(f32* %577)[i64 4];
    f32 %594 = load f32* %593;
    f32 %595 = fmul f32 %594, f32 %594;
    f32 %596 = fadd f32 %592, f32 %595;
    f32* %597 = getelementptr &(f32* %577)[i64 5];
    f32 %598 = load f32* %597;
    f32 %599 = fmul f32 %598, f32 %598;
    f32 %600 = fadd f32 %596, f32 %599;
    f32* %601 = getelementptr &(f32* %577)[i64 6];
    f32 %602 = load f32* %601;
    f32 %603 = fmul f32 %602, f32 %602;
    f32 %604 = fadd f32 %600, f32 %603;
    f32* %605 = getelementptr &(f32* %577)[i64 7];
    f32 %606 = load f32* %605;
    f32 %607 = fmul f32 %606, f32 %606;
    f32 %608 = fadd f32 %604, f32 %607;
    f32* %609 = getelementptr &(f32* %577)[i64 8];
    f32 %610 = load f32* %609;
    f32 %611 = fmul f32 %610, f32 %610;
    f32 %612 = fadd f32 %608, f32 %611;
    f32* %613 = getelementptr &(f32* %577)[i64 9];
    f32 %614 = load f32* %613;
    f32 %615 = fmul f32 %614, f32 %614;
    f32 %616 = fadd f32 %612, f32 %615;
    f32* %617 = getelementptr &(f32* %577)[i64 10];
    f32 %618 = load f32* %617;
    f32 %619 = fmul f32 %618, f32 %618;
    f32 %620 = fadd f32 %616, f32 %619;
    f32* %621 = getelementptr &(f32* %577)[i64 11];
    f32 %622 = load f32* %621;
    f32 %623 = fmul f32 %622, f32 %622;
    f32 %624 = fadd f32 %620, f32 %623;
    f32* %625 = getelementptr &(f32* %577)[i64 12];
    f32 %626 = load f32* %625;
    f32 %627 = fmul f32 %626, f32 %626;
    f32 %628 = fadd f32 %624, f32 %627;
    f32* %629 = getelementptr &(f32* %577)[i64 13];
    f32 %630 = load f32* %629;
    f32 %631 = fmul f32 %630, f32 %630;
    f32 %632 = fadd f32 %628, f32 %631;
    f32* %633 = getelementptr &(f32* %577)[i64 14];
    f32 %634 = load f32* %633;
    f32 %635 = fmul f32 %634, f32 %634;
    f32 %636 = fadd f32 %632, f32 %635;
    f32* %637 = getelementptr &(f32* %577)[i64 15];
    f32 %638 = load f32* %637;
    f32 %639 = fmul f32 %638, f32 %638;
    f32 %640 = fadd f32 %636, f32 %639;
    i32 %641 = add i32 %576, i32 16;
    i1 %642 = icmp slt i32 %641, i32 99984;
    cbr i1 %642(prob = 1), ^while.body15, ^while.body16;
  ^while.body16:
    f32* %643 = getelementptr &(f32* %102)[i32 %641];
    f32 %644 = load f32* %643;
    f32 %645 = fmul f32 %644, f32 %644;
    f32 %646 = fadd f32 %640, f32 %645;
    f32* %647 = getelementptr &(f32* %643)[i64 1];
    f32 %648 = load f32* %647;
    f32 %649 = fmul f32 %648, f32 %648;
    f32 %650 = fadd f32 %646, f32 %649;
    f32* %651 = getelementptr &(f32* %643)[i64 2];
    f32 %652 = load f32* %651;
    f32 %653 = fmul f32 %652, f32 %652;
    f32 %654 = fadd f32 %650, f32 %653;
    f32* %655 = getelementptr &(f32* %643)[i64 3];
    f32 %656 = load f32* %655;
    f32 %657 = fmul f32 %656, f32 %656;
    f32 %658 = fadd f32 %654, f32 %657;
    f32* %659 = getelementptr &(f32* %643)[i64 4];
    f32 %660 = load f32* %659;
    f32 %661 = fmul f32 %660, f32 %660;
    f32 %662 = fadd f32 %658, f32 %661;
    f32* %663 = getelementptr &(f32* %643)[i64 5];
    f32 %664 = load f32* %663;
    f32 %665 = fmul f32 %664, f32 %664;
    f32 %666 = fadd f32 %662, f32 %665;
    f32* %667 = getelementptr &(f32* %643)[i64 6];
    f32 %668 = load f32* %667;
    f32 %669 = fmul f32 %668, f32 %668;
    f32 %670 = fadd f32 %666, f32 %669;
    f32* %671 = getelementptr &(f32* %643)[i64 7];
    f32 %672 = load f32* %671;
    f32 %673 = fmul f32 %672, f32 %672;
    f32 %674 = fadd f32 %670, f32 %673;
    f32* %675 = getelementptr &(f32* %643)[i64 8];
    f32 %676 = load f32* %675;
    f32 %677 = fmul f32 %676, f32 %676;
    f32 %678 = fadd f32 %674, f32 %677;
    f32* %679 = getelementptr &(f32* %643)[i64 9];
    f32 %680 = load f32* %679;
    f32 %681 = fmul f32 %680, f32 %680;
    f32 %682 = fadd f32 %678, f32 %681;
    f32* %683 = getelementptr &(f32* %643)[i64 10];
    f32 %684 = load f32* %683;
    f32 %685 = fmul f32 %684, f32 %684;
    f32 %686 = fadd f32 %682, f32 %685;
    f32* %687 = getelementptr &(f32* %643)[i64 11];
    f32 %688 = load f32* %687;
    f32 %689 = fmul f32 %688, f32 %688;
    f32 %690 = fadd f32 %686, f32 %689;
    i32 %691 = add i32 %576, i32 28;
    ubr ^while.body17;
  ^while.body17 {scalar}:
    i32 %692 = phi [^while.body16, i32 %691] [^while.body17, i32 %698];
    f32 %693 = phi [^while.body16, f32 %690] [^while.body17, f32 %697];
    f32* %694 = getelementptr &(f32* %102)[i32 %692];
    f32 %695 = load f32* %694;
    f32 %696 = fmul f32 %695, f32 %695;
    f32 %697 = fadd f32 %693, f32 %696;
    i32 %698 = add i32 %692, i32 1;
    i1 %699 = icmp slt i32 %698, i32 100000;
    cbr i1 %699(prob = 0.75), ^while.body17, ^b5;
  ^b5:
    f32 %700 = fdiv f32 %572, f32 %697;
    f32 %701 = fsub f32 1, f32 %700;
    i1 %702 = fcmp ogt f32 %701, f32 1e-06;
    i1 %703 = fcmp olt f32 %701, f32 -1e-06;
    i1 %704 = or i1 %702, i1 %703;
    cbr i1 %704(prob = 0.98), ^while.body18, ^b6;
  ^while.body18:
    f32 %705 = phi [^b5, f32 %700] [^while.body18, f32 %709];
    f32 %706 = phi [^b5, f32 1] [^while.body18, f32 %708];
    f32 %707 = fadd f32 %706, f32 %705;
    f32 %708 = fmul f32 %707, f32 0.5;
    f32 %709 = fdiv f32 %700, f32 %708;
    f32 %710 = fsub f32 %708, f32 %709;
    i1 %711 = fcmp ogt f32 %710, f32 1e-06;
    i1 %712 = fcmp olt f32 %710, f32 -1e-06;
    i1 %713 = or i1 %711, i1 %712;
    cbr i1 %713(prob = 0.98), ^while.body18, ^b6;
  ^b6:
    f32 %714 = phi [^b5, f32 1] [^while.body18, f32 %708];
    f32 %715 = fsub f32 %714, f32 1;
    i1 %716 = fcmp ole f32 %715, f32 1e-06;
    i1 %717 = fcmp oge f32 %715, f32 -1e-06;
    i1 %718 = and i1 %716, i1 %717;
    i32 %719 = zext i1 %718 to i32;
    call (i32) -> void @putint(i32 %719);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
