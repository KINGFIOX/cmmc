internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    f32* %1 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %2 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %3 = getelementptr &([100000 * f32]* %2)[i64 0][i64 0];
    [100000 * f32]* %4 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %5 = getelementptr &([100000 * f32]* %4)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %71];
    f32* %7 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %6];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %7)[i64 1];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %7)[i64 2];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %7)[i64 3];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %7)[i64 4];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %7)[i64 5];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %7)[i64 6];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %7)[i64 7];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %7)[i64 8];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %7)[i64 9];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %7)[i64 10];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %7)[i64 11];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %7)[i64 12];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %7)[i64 13];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %7)[i64 14];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %7)[i64 15];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %7)[i64 16];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %7)[i64 17];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %7)[i64 18];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %7)[i64 19];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %7)[i64 20];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %7)[i64 21];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %7)[i64 22];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %7)[i64 23];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %7)[i64 24];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %7)[i64 25];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %7)[i64 26];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %7)[i64 27];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %7)[i64 28];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %7)[i64 29];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %7)[i64 30];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %7)[i64 31];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %7)[i64 32];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %7)[i64 33];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %7)[i64 34];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %7)[i64 35];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %7)[i64 36];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %7)[i64 37];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %7)[i64 38];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %7)[i64 39];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %7)[i64 40];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %7)[i64 41];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %7)[i64 42];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %7)[i64 43];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %7)[i64 44];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %7)[i64 45];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %7)[i64 46];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %7)[i64 47];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %7)[i64 48];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %7)[i64 49];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %7)[i64 50];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %7)[i64 51];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %7)[i64 52];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %7)[i64 53];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %7)[i64 54];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %7)[i64 55];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %7)[i64 56];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %7)[i64 57];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %7)[i64 58];
    store f32* %65 with f32 1;
    f32* %66 = getelementptr &(f32* %7)[i64 59];
    store f32* %66 with f32 1;
    f32* %67 = getelementptr &(f32* %7)[i64 60];
    store f32* %67 with f32 1;
    f32* %68 = getelementptr &(f32* %7)[i64 61];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %7)[i64 62];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %7)[i64 63];
    store f32* %70 with f32 1;
    i32 %71 = add i32 %6, i32 64;
    i1 %72 = icmp slt i32 %71, i32 99968;
    cbr i1 %72(prob = 0.99936), ^while.body, ^while.body1;
  ^while.body1:
    f32* %73 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %71];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %73)[i64 1];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %73)[i64 2];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %73)[i64 3];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %73)[i64 4];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %73)[i64 5];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %73)[i64 6];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %73)[i64 7];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %73)[i64 8];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %73)[i64 9];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %73)[i64 10];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %73)[i64 11];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %73)[i64 12];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %73)[i64 13];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %73)[i64 14];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %73)[i64 15];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %73)[i64 16];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %73)[i64 17];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %73)[i64 18];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %73)[i64 19];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %73)[i64 20];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %73)[i64 21];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %73)[i64 22];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %73)[i64 23];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %73)[i64 24];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %73)[i64 25];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %73)[i64 26];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &(f32* %73)[i64 27];
    store f32* %100 with f32 1;
    f32* %101 = getelementptr &(f32* %73)[i64 28];
    store f32* %101 with f32 1;
    f32* %102 = getelementptr &(f32* %73)[i64 29];
    store f32* %102 with f32 1;
    f32* %103 = getelementptr &(f32* %73)[i64 30];
    store f32* %103 with f32 1;
    f32* %104 = getelementptr &(f32* %73)[i64 31];
    store f32* %104 with f32 1;
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^b3, i32 %220];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %111];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    i1 %110 = icmp slt i32 %107, i32 100000;
    i32 %111 = add i32 %108, i32 1;
    cbr i1 %110(prob = 0.984615), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %131];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %130];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %122];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.984615), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body3, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body3, f32 %144];
    f32* %118 = getelementptr &(f32* %5)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 4;
    i1 %120 = icmp slt i32 %119, i32 100000;
    cbr i1 %120(prob = 0.941176), ^prebody, ^while.body3;
  ^while.header3:
    i1 %121 = icmp slt i32 %113, i32 100000;
    i32 %122 = add i32 %114, i32 1;
    cbr i1 %121(prob = 0.984615), ^super.header1, ^b1;
  ^while.header4:
    f32 %123 = phi [^while.header2, f32 0] [^b2, f32 %200];
    i32 %124 = phi [^while.header2, i32 0] [^b2, i32 %199];
    i32 %125 = phi [^while.header2, i32 0] [^b2, i32 %150];
    i1 %126 = icmp slt i32 %125, i32 100000;
    cbr i1 %126(prob = 0.984615), ^while.header5, ^while.header6;
  ^prebody:
    i32 %127 = add i32 %108, i32 2;
    i32 %128 = add i32 %108, i32 3;
    i32 %129 = add i32 %108, i32 4;
    ubr ^while.body4;
  ^b1:
    i32 %130 = phi [^while.header3, i32 %113] [^while.body5, i32 100000];
    f32 %131 = phi [^while.header3, f32 %112] [^while.body5, f32 %214];
    f32* %132 = getelementptr &(f32* %3)[i32 %114];
    store f32* %132 with f32 %131;
    ubr ^while.header2;
  ^while.body3 {scalar}:
    i32 %133 = phi [^super.header, i32 %107] [^while.body3, i32 %145] [^while.body4, i32 %197];
    f32 %134 = phi [^super.header, f32 %106] [^while.body3, f32 %144] [^while.body4, f32 %196];
    i32 %135 = add i32 %108, i32 %133;
    i32 %136 = add i32 %111, i32 %133;
    i32 %137 = mul i32 %135, i32 %136;
    i32 %138 = sdiv i32 %137, i32 2;
    i32 %139 = add i32 %111, i32 %138;
    f32 %140 = s2f i32 %139 to f32;
    f32* %141 = getelementptr &(f32* %1)[i32 %133];
    f32 %142 = load f32* %141;
    f32 %143 = fdiv f32 %142, f32 %140;
    f32 %144 = fadd f32 %134, f32 %143;
    i32 %145 = add i32 %133, i32 1;
    i1 %146 = icmp slt i32 %145, i32 100000;
    cbr i1 %146(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %147 = add i32 %113, i32 4;
    i1 %148 = icmp slt i32 %147, i32 100000;
    cbr i1 %148(prob = 0.941176), ^prebody1, ^while.body5;
  ^while.header5:
    i1 %149 = icmp slt i32 %124, i32 100000;
    i32 %150 = add i32 %125, i32 1;
    cbr i1 %149(prob = 0.984615), ^super.header2, ^b2;
  ^while.header6:
    f32 %151 = phi [^while.header4, f32 0] [^b4, f32 %270];
    i32 %152 = phi [^while.header4, i32 0] [^b4, i32 %269];
    i32 %153 = phi [^while.header4, i32 0] [^b4, i32 %219];
    i1 %154 = icmp slt i32 %153, i32 100000;
    cbr i1 %154(prob = 0.984615), ^while.header7, ^b3;
  ^prebody1:
    i32 %155 = add i32 %114, i32 2;
    i32 %156 = add i32 %114, i32 3;
    i32 %157 = add i32 %114, i32 4;
    ubr ^while.body6;
  ^while.body4:
    f32 %158 = phi [^prebody, f32 %106] [^while.body4, f32 %196];
    i32 %159 = phi [^prebody, i32 %107] [^while.body4, i32 %197];
    i32 %160 = add i32 %108, i32 %159;
    i32 %161 = add i32 %111, i32 %159;
    i32 %162 = mul i32 %160, i32 %161;
    i32 %163 = sdiv i32 %162, i32 2;
    i32 %164 = add i32 %111, i32 %163;
    f32 %165 = s2f i32 %164 to f32;
    f32* %166 = getelementptr &(f32* %1)[i32 %159];
    f32 %167 = load f32* %166;
    f32 %168 = fdiv f32 %167, f32 %165;
    f32 %169 = fadd f32 %158, f32 %168;
    i32 %170 = add i32 %127, i32 %159;
    i32 %171 = mul i32 %161, i32 %170;
    i32 %172 = sdiv i32 %171, i32 2;
    i32 %173 = add i32 %111, i32 %172;
    f32 %174 = s2f i32 %173 to f32;
    f32* %175 = getelementptr &(f32* %166)[i64 1];
    f32 %176 = load f32* %175;
    f32 %177 = fdiv f32 %176, f32 %174;
    f32 %178 = fadd f32 %169, f32 %177;
    i32 %179 = add i32 %128, i32 %159;
    i32 %180 = mul i32 %170, i32 %179;
    i32 %181 = sdiv i32 %180, i32 2;
    i32 %182 = add i32 %111, i32 %181;
    f32 %183 = s2f i32 %182 to f32;
    f32* %184 = getelementptr &(f32* %166)[i64 2];
    f32 %185 = load f32* %184;
    f32 %186 = fdiv f32 %185, f32 %183;
    f32 %187 = fadd f32 %178, f32 %186;
    i32 %188 = add i32 %129, i32 %159;
    i32 %189 = mul i32 %179, i32 %188;
    i32 %190 = sdiv i32 %189, i32 2;
    i32 %191 = add i32 %111, i32 %190;
    f32 %192 = s2f i32 %191 to f32;
    f32* %193 = getelementptr &(f32* %166)[i64 3];
    f32 %194 = load f32* %193;
    f32 %195 = fdiv f32 %194, f32 %192;
    f32 %196 = fadd f32 %187, f32 %195;
    i32 %197 = add i32 %159, i32 4;
    i1 %198 = icmp slt i32 %197, i32 99996;
    cbr i1 %198(prob = 0.941176), ^while.body4, ^while.body3;
  ^b2:
    i32 %199 = phi [^while.header5, i32 %124] [^while.body7, i32 100000];
    f32 %200 = phi [^while.header5, f32 %123] [^while.body7, f32 %283];
    f32* %201 = getelementptr &(f32* %5)[i32 %125];
    store f32* %201 with f32 %200;
    ubr ^while.header4;
  ^while.body5 {scalar}:
    i32 %202 = phi [^super.header1, i32 %113] [^while.body5, i32 %208] [^while.body6, i32 %261];
    f32 %203 = phi [^super.header1, f32 %112] [^while.body5, f32 %214] [^while.body6, f32 %267];
    i32 %204 = add i32 %114, i32 %202;
    i32 %205 = add i32 %122, i32 %202;
    i32 %206 = mul i32 %204, i32 %205;
    i32 %207 = sdiv i32 %206, i32 2;
    i32 %208 = add i32 %202, i32 1;
    i32 %209 = add i32 %207, i32 %208;
    f32 %210 = s2f i32 %209 to f32;
    f32* %211 = getelementptr &(f32* %5)[i32 %202];
    f32 %212 = load f32* %211;
    f32 %213 = fdiv f32 %212, f32 %210;
    f32 %214 = fadd f32 %203, f32 %213;
    i1 %215 = icmp slt i32 %208, i32 100000;
    cbr i1 %215(prob = 0.75), ^while.body5, ^b1;
  ^super.header2:
    i32 %216 = add i32 %124, i32 4;
    i1 %217 = icmp slt i32 %216, i32 100000;
    cbr i1 %217(prob = 0.941176), ^prebody2, ^while.body7;
  ^while.header7:
    i1 %218 = icmp slt i32 %152, i32 100000;
    i32 %219 = add i32 %153, i32 1;
    cbr i1 %218(prob = 0.984615), ^super.header3, ^b4;
  ^b3:
    i32 %220 = add i32 %105, i32 1;
    i1 %221 = icmp slt i32 %220, i32 1000;
    cbr i1 %221(prob = 0.999), ^while.body2, ^b5;
  ^prebody2:
    i32 %222 = add i32 %125, i32 2;
    i32 %223 = add i32 %125, i32 3;
    i32 %224 = add i32 %125, i32 4;
    ubr ^while.body8;
  ^while.body6:
    f32 %225 = phi [^prebody1, f32 %112] [^while.body6, f32 %267];
    i32 %226 = phi [^prebody1, i32 %113] [^while.body6, i32 %261];
    i32 %227 = add i32 %114, i32 %226;
    i32 %228 = add i32 %122, i32 %226;
    i32 %229 = mul i32 %227, i32 %228;
    i32 %230 = sdiv i32 %229, i32 2;
    i32 %231 = add i32 %226, i32 1;
    i32 %232 = add i32 %230, i32 %231;
    f32 %233 = s2f i32 %232 to f32;
    f32* %234 = getelementptr &(f32* %5)[i32 %226];
    f32 %235 = load f32* %234;
    f32 %236 = fdiv f32 %235, f32 %233;
    f32 %237 = fadd f32 %225, f32 %236;
    i32 %238 = add i32 %155, i32 %226;
    i32 %239 = mul i32 %228, i32 %238;
    i32 %240 = sdiv i32 %239, i32 2;
    i32 %241 = add i32 %226, i32 2;
    i32 %242 = add i32 %240, i32 %241;
    f32 %243 = s2f i32 %242 to f32;
    f32* %244 = getelementptr &(f32* %234)[i64 1];
    f32 %245 = load f32* %244;
    f32 %246 = fdiv f32 %245, f32 %243;
    f32 %247 = fadd f32 %237, f32 %246;
    i32 %248 = add i32 %156, i32 %226;
    i32 %249 = mul i32 %238, i32 %248;
    i32 %250 = sdiv i32 %249, i32 2;
    i32 %251 = add i32 %226, i32 3;
    i32 %252 = add i32 %250, i32 %251;
    f32 %253 = s2f i32 %252 to f32;
    f32* %254 = getelementptr &(f32* %234)[i64 2];
    f32 %255 = load f32* %254;
    f32 %256 = fdiv f32 %255, f32 %253;
    f32 %257 = fadd f32 %247, f32 %256;
    i32 %258 = add i32 %157, i32 %226;
    i32 %259 = mul i32 %248, i32 %258;
    i32 %260 = sdiv i32 %259, i32 2;
    i32 %261 = add i32 %226, i32 4;
    i32 %262 = add i32 %260, i32 %261;
    f32 %263 = s2f i32 %262 to f32;
    f32* %264 = getelementptr &(f32* %234)[i64 3];
    f32 %265 = load f32* %264;
    f32 %266 = fdiv f32 %265, f32 %263;
    f32 %267 = fadd f32 %257, f32 %266;
    i1 %268 = icmp slt i32 %261, i32 99996;
    cbr i1 %268(prob = 0.941176), ^while.body6, ^while.body5;
  ^b4:
    i32 %269 = phi [^while.header7, i32 %152] [^while.body9, i32 100000];
    f32 %270 = phi [^while.header7, f32 %151] [^while.body9, f32 %345];
    f32* %271 = getelementptr &(f32* %1)[i32 %153];
    store f32* %271 with f32 %270;
    ubr ^while.header6;
  ^while.body7 {scalar}:
    i32 %272 = phi [^super.header2, i32 %124] [^while.body7, i32 %284] [^while.body8, i32 %291];
    f32 %273 = phi [^super.header2, f32 %123] [^while.body7, f32 %283] [^while.body8, f32 %330];
    i32 %274 = add i32 %125, i32 %272;
    i32 %275 = add i32 %150, i32 %272;
    i32 %276 = mul i32 %274, i32 %275;
    i32 %277 = sdiv i32 %276, i32 2;
    i32 %278 = add i32 %150, i32 %277;
    f32 %279 = s2f i32 %278 to f32;
    f32* %280 = getelementptr &(f32* %3)[i32 %272];
    f32 %281 = load f32* %280;
    f32 %282 = fdiv f32 %281, f32 %279;
    f32 %283 = fadd f32 %273, f32 %282;
    i32 %284 = add i32 %272, i32 1;
    i1 %285 = icmp slt i32 %284, i32 100000;
    cbr i1 %285(prob = 0.75), ^while.body7, ^b2;
  ^super.header3:
    i32 %286 = add i32 %152, i32 4;
    i1 %287 = icmp slt i32 %286, i32 100000;
    cbr i1 %287(prob = 0.941176), ^prebody3, ^while.body9;
  ^b5:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body10;
  ^prebody3:
    i32 %288 = add i32 %153, i32 2;
    i32 %289 = add i32 %153, i32 3;
    i32 %290 = add i32 %153, i32 4;
    ubr ^while.body11;
  ^while.body8:
    i32 %291 = phi [^prebody2, i32 %216] [^while.body8, i32 %331];
    f32 %292 = phi [^prebody2, f32 %123] [^while.body8, f32 %330];
    i32 %293 = phi [^prebody2, i32 %124] [^while.body8, i32 %291];
    i32 %294 = add i32 %125, i32 %293;
    i32 %295 = add i32 %150, i32 %293;
    i32 %296 = mul i32 %294, i32 %295;
    i32 %297 = sdiv i32 %296, i32 2;
    i32 %298 = add i32 %150, i32 %297;
    f32 %299 = s2f i32 %298 to f32;
    f32* %300 = getelementptr &(f32* %3)[i32 %293];
    f32 %301 = load f32* %300;
    f32 %302 = fdiv f32 %301, f32 %299;
    f32 %303 = fadd f32 %292, f32 %302;
    i32 %304 = add i32 %222, i32 %293;
    i32 %305 = mul i32 %295, i32 %304;
    i32 %306 = sdiv i32 %305, i32 2;
    i32 %307 = add i32 %150, i32 %306;
    f32 %308 = s2f i32 %307 to f32;
    f32* %309 = getelementptr &(f32* %300)[i64 1];
    f32 %310 = load f32* %309;
    f32 %311 = fdiv f32 %310, f32 %308;
    f32 %312 = fadd f32 %303, f32 %311;
    i32 %313 = add i32 %223, i32 %293;
    i32 %314 = mul i32 %304, i32 %313;
    i32 %315 = sdiv i32 %314, i32 2;
    i32 %316 = add i32 %150, i32 %315;
    f32 %317 = s2f i32 %316 to f32;
    f32* %318 = getelementptr &(f32* %300)[i64 2];
    f32 %319 = load f32* %318;
    f32 %320 = fdiv f32 %319, f32 %317;
    f32 %321 = fadd f32 %312, f32 %320;
    i32 %322 = add i32 %224, i32 %293;
    i32 %323 = mul i32 %313, i32 %322;
    i32 %324 = sdiv i32 %323, i32 2;
    i32 %325 = add i32 %150, i32 %324;
    f32 %326 = s2f i32 %325 to f32;
    f32* %327 = getelementptr &(f32* %300)[i64 3];
    f32 %328 = load f32* %327;
    f32 %329 = fdiv f32 %328, f32 %326;
    f32 %330 = fadd f32 %321, f32 %329;
    i32 %331 = add i32 %291, i32 4;
    i1 %332 = icmp slt i32 %331, i32 100000;
    cbr i1 %332(prob = 0.941176), ^while.body8, ^while.body7;
  ^while.body9 {scalar}:
    i32 %333 = phi [^super.header3, i32 %152] [^while.body9, i32 %339] [^while.body11, i32 %447];
    f32 %334 = phi [^super.header3, f32 %151] [^while.body9, f32 %345] [^while.body11, f32 %489];
    i32 %335 = add i32 %153, i32 %333;
    i32 %336 = add i32 %219, i32 %333;
    i32 %337 = mul i32 %335, i32 %336;
    i32 %338 = sdiv i32 %337, i32 2;
    i32 %339 = add i32 %333, i32 1;
    i32 %340 = add i32 %338, i32 %339;
    f32 %341 = s2f i32 %340 to f32;
    f32* %342 = getelementptr &(f32* %5)[i32 %333];
    f32 %343 = load f32* %342;
    f32 %344 = fdiv f32 %343, f32 %341;
    f32 %345 = fadd f32 %334, f32 %344;
    i1 %346 = icmp slt i32 %339, i32 100000;
    cbr i1 %346(prob = 0.75), ^while.body9, ^b4;
  ^while.body10:
    i32 %347 = phi [^b5, i32 0] [^while.body10, i32 %445];
    f32 %348 = phi [^b5, f32 0] [^while.body10, f32 %444];
    f32* %349 = getelementptr &(f32* %1)[i32 %347];
    f32 %350 = load f32* %349;
    f32* %351 = getelementptr &(f32* %3)[i32 %347];
    f32 %352 = load f32* %351;
    f32 %353 = fmul f32 %350, f32 %352;
    f32 %354 = fadd f32 %348, f32 %353;
    f32* %355 = getelementptr &(f32* %349)[i64 1];
    f32 %356 = load f32* %355;
    f32* %357 = getelementptr &(f32* %351)[i64 1];
    f32 %358 = load f32* %357;
    f32 %359 = fmul f32 %356, f32 %358;
    f32 %360 = fadd f32 %354, f32 %359;
    f32* %361 = getelementptr &(f32* %349)[i64 2];
    f32 %362 = load f32* %361;
    f32* %363 = getelementptr &(f32* %351)[i64 2];
    f32 %364 = load f32* %363;
    f32 %365 = fmul f32 %362, f32 %364;
    f32 %366 = fadd f32 %360, f32 %365;
    f32* %367 = getelementptr &(f32* %349)[i64 3];
    f32 %368 = load f32* %367;
    f32* %369 = getelementptr &(f32* %351)[i64 3];
    f32 %370 = load f32* %369;
    f32 %371 = fmul f32 %368, f32 %370;
    f32 %372 = fadd f32 %366, f32 %371;
    f32* %373 = getelementptr &(f32* %349)[i64 4];
    f32 %374 = load f32* %373;
    f32* %375 = getelementptr &(f32* %351)[i64 4];
    f32 %376 = load f32* %375;
    f32 %377 = fmul f32 %374, f32 %376;
    f32 %378 = fadd f32 %372, f32 %377;
    f32* %379 = getelementptr &(f32* %349)[i64 5];
    f32 %380 = load f32* %379;
    f32* %381 = getelementptr &(f32* %351)[i64 5];
    f32 %382 = load f32* %381;
    f32 %383 = fmul f32 %380, f32 %382;
    f32 %384 = fadd f32 %378, f32 %383;
    f32* %385 = getelementptr &(f32* %349)[i64 6];
    f32 %386 = load f32* %385;
    f32* %387 = getelementptr &(f32* %351)[i64 6];
    f32 %388 = load f32* %387;
    f32 %389 = fmul f32 %386, f32 %388;
    f32 %390 = fadd f32 %384, f32 %389;
    f32* %391 = getelementptr &(f32* %349)[i64 7];
    f32 %392 = load f32* %391;
    f32* %393 = getelementptr &(f32* %351)[i64 7];
    f32 %394 = load f32* %393;
    f32 %395 = fmul f32 %392, f32 %394;
    f32 %396 = fadd f32 %390, f32 %395;
    f32* %397 = getelementptr &(f32* %349)[i64 8];
    f32 %398 = load f32* %397;
    f32* %399 = getelementptr &(f32* %351)[i64 8];
    f32 %400 = load f32* %399;
    f32 %401 = fmul f32 %398, f32 %400;
    f32 %402 = fadd f32 %396, f32 %401;
    f32* %403 = getelementptr &(f32* %349)[i64 9];
    f32 %404 = load f32* %403;
    f32* %405 = getelementptr &(f32* %351)[i64 9];
    f32 %406 = load f32* %405;
    f32 %407 = fmul f32 %404, f32 %406;
    f32 %408 = fadd f32 %402, f32 %407;
    f32* %409 = getelementptr &(f32* %349)[i64 10];
    f32 %410 = load f32* %409;
    f32* %411 = getelementptr &(f32* %351)[i64 10];
    f32 %412 = load f32* %411;
    f32 %413 = fmul f32 %410, f32 %412;
    f32 %414 = fadd f32 %408, f32 %413;
    f32* %415 = getelementptr &(f32* %349)[i64 11];
    f32 %416 = load f32* %415;
    f32* %417 = getelementptr &(f32* %351)[i64 11];
    f32 %418 = load f32* %417;
    f32 %419 = fmul f32 %416, f32 %418;
    f32 %420 = fadd f32 %414, f32 %419;
    f32* %421 = getelementptr &(f32* %349)[i64 12];
    f32 %422 = load f32* %421;
    f32* %423 = getelementptr &(f32* %351)[i64 12];
    f32 %424 = load f32* %423;
    f32 %425 = fmul f32 %422, f32 %424;
    f32 %426 = fadd f32 %420, f32 %425;
    f32* %427 = getelementptr &(f32* %349)[i64 13];
    f32 %428 = load f32* %427;
    f32* %429 = getelementptr &(f32* %351)[i64 13];
    f32 %430 = load f32* %429;
    f32 %431 = fmul f32 %428, f32 %430;
    f32 %432 = fadd f32 %426, f32 %431;
    f32* %433 = getelementptr &(f32* %349)[i64 14];
    f32 %434 = load f32* %433;
    f32* %435 = getelementptr &(f32* %351)[i64 14];
    f32 %436 = load f32* %435;
    f32 %437 = fmul f32 %434, f32 %436;
    f32 %438 = fadd f32 %432, f32 %437;
    f32* %439 = getelementptr &(f32* %349)[i64 15];
    f32 %440 = load f32* %439;
    f32* %441 = getelementptr &(f32* %351)[i64 15];
    f32 %442 = load f32* %441;
    f32 %443 = fmul f32 %440, f32 %442;
    f32 %444 = fadd f32 %438, f32 %443;
    i32 %445 = add i32 %347, i32 16;
    i1 %446 = icmp slt i32 %445, i32 100000;
    cbr i1 %446(prob = 0.99984), ^while.body10, ^while.body12;
  ^while.body11:
    i32 %447 = phi [^prebody3, i32 %286] [^while.body11, i32 %490];
    f32 %448 = phi [^prebody3, f32 %151] [^while.body11, f32 %489];
    i32 %449 = phi [^prebody3, i32 %152] [^while.body11, i32 %447];
    i32 %450 = add i32 %153, i32 %449;
    i32 %451 = add i32 %219, i32 %449;
    i32 %452 = mul i32 %450, i32 %451;
    i32 %453 = sdiv i32 %452, i32 2;
    i32 %454 = add i32 %449, i32 1;
    i32 %455 = add i32 %453, i32 %454;
    f32 %456 = s2f i32 %455 to f32;
    f32* %457 = getelementptr &(f32* %5)[i32 %449];
    f32 %458 = load f32* %457;
    f32 %459 = fdiv f32 %458, f32 %456;
    f32 %460 = fadd f32 %448, f32 %459;
    i32 %461 = add i32 %288, i32 %449;
    i32 %462 = mul i32 %451, i32 %461;
    i32 %463 = sdiv i32 %462, i32 2;
    i32 %464 = add i32 %449, i32 2;
    i32 %465 = add i32 %463, i32 %464;
    f32 %466 = s2f i32 %465 to f32;
    f32* %467 = getelementptr &(f32* %457)[i64 1];
    f32 %468 = load f32* %467;
    f32 %469 = fdiv f32 %468, f32 %466;
    f32 %470 = fadd f32 %460, f32 %469;
    i32 %471 = add i32 %289, i32 %449;
    i32 %472 = mul i32 %461, i32 %471;
    i32 %473 = sdiv i32 %472, i32 2;
    i32 %474 = add i32 %449, i32 3;
    i32 %475 = add i32 %473, i32 %474;
    f32 %476 = s2f i32 %475 to f32;
    f32* %477 = getelementptr &(f32* %457)[i64 2];
    f32 %478 = load f32* %477;
    f32 %479 = fdiv f32 %478, f32 %476;
    f32 %480 = fadd f32 %470, f32 %479;
    i32 %481 = add i32 %290, i32 %449;
    i32 %482 = mul i32 %471, i32 %481;
    i32 %483 = sdiv i32 %482, i32 2;
    i32 %484 = add i32 %447, i32 %483;
    f32 %485 = s2f i32 %484 to f32;
    f32* %486 = getelementptr &(f32* %457)[i64 3];
    f32 %487 = load f32* %486;
    f32 %488 = fdiv f32 %487, f32 %485;
    f32 %489 = fadd f32 %480, f32 %488;
    i32 %490 = add i32 %447, i32 4;
    i1 %491 = icmp slt i32 %490, i32 100000;
    cbr i1 %491(prob = 0.941176), ^while.body11, ^while.body9;
  ^while.body12:
    i32 %492 = phi [^while.body10, i32 0] [^while.body12, i32 %558];
    f32 %493 = phi [^while.body10, f32 0] [^while.body12, f32 %557];
    f32* %494 = getelementptr &(f32* %3)[i32 %492];
    f32 %495 = load f32* %494;
    f32 %496 = fmul f32 %495, f32 %495;
    f32 %497 = fadd f32 %493, f32 %496;
    f32* %498 = getelementptr &(f32* %494)[i64 1];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 %499, f32 %499;
    f32 %501 = fadd f32 %497, f32 %500;
    f32* %502 = getelementptr &(f32* %494)[i64 2];
    f32 %503 = load f32* %502;
    f32 %504 = fmul f32 %503, f32 %503;
    f32 %505 = fadd f32 %501, f32 %504;
    f32* %506 = getelementptr &(f32* %494)[i64 3];
    f32 %507 = load f32* %506;
    f32 %508 = fmul f32 %507, f32 %507;
    f32 %509 = fadd f32 %505, f32 %508;
    f32* %510 = getelementptr &(f32* %494)[i64 4];
    f32 %511 = load f32* %510;
    f32 %512 = fmul f32 %511, f32 %511;
    f32 %513 = fadd f32 %509, f32 %512;
    f32* %514 = getelementptr &(f32* %494)[i64 5];
    f32 %515 = load f32* %514;
    f32 %516 = fmul f32 %515, f32 %515;
    f32 %517 = fadd f32 %513, f32 %516;
    f32* %518 = getelementptr &(f32* %494)[i64 6];
    f32 %519 = load f32* %518;
    f32 %520 = fmul f32 %519, f32 %519;
    f32 %521 = fadd f32 %517, f32 %520;
    f32* %522 = getelementptr &(f32* %494)[i64 7];
    f32 %523 = load f32* %522;
    f32 %524 = fmul f32 %523, f32 %523;
    f32 %525 = fadd f32 %521, f32 %524;
    f32* %526 = getelementptr &(f32* %494)[i64 8];
    f32 %527 = load f32* %526;
    f32 %528 = fmul f32 %527, f32 %527;
    f32 %529 = fadd f32 %525, f32 %528;
    f32* %530 = getelementptr &(f32* %494)[i64 9];
    f32 %531 = load f32* %530;
    f32 %532 = fmul f32 %531, f32 %531;
    f32 %533 = fadd f32 %529, f32 %532;
    f32* %534 = getelementptr &(f32* %494)[i64 10];
    f32 %535 = load f32* %534;
    f32 %536 = fmul f32 %535, f32 %535;
    f32 %537 = fadd f32 %533, f32 %536;
    f32* %538 = getelementptr &(f32* %494)[i64 11];
    f32 %539 = load f32* %538;
    f32 %540 = fmul f32 %539, f32 %539;
    f32 %541 = fadd f32 %537, f32 %540;
    f32* %542 = getelementptr &(f32* %494)[i64 12];
    f32 %543 = load f32* %542;
    f32 %544 = fmul f32 %543, f32 %543;
    f32 %545 = fadd f32 %541, f32 %544;
    f32* %546 = getelementptr &(f32* %494)[i64 13];
    f32 %547 = load f32* %546;
    f32 %548 = fmul f32 %547, f32 %547;
    f32 %549 = fadd f32 %545, f32 %548;
    f32* %550 = getelementptr &(f32* %494)[i64 14];
    f32 %551 = load f32* %550;
    f32 %552 = fmul f32 %551, f32 %551;
    f32 %553 = fadd f32 %549, f32 %552;
    f32* %554 = getelementptr &(f32* %494)[i64 15];
    f32 %555 = load f32* %554;
    f32 %556 = fmul f32 %555, f32 %555;
    f32 %557 = fadd f32 %553, f32 %556;
    i32 %558 = add i32 %492, i32 16;
    i1 %559 = icmp slt i32 %558, i32 100000;
    cbr i1 %559(prob = 0.99984), ^while.body12, ^b6;
  ^b6:
    f32 %560 = fdiv f32 %444, f32 %557;
    f32 %561 = fsub f32 1, f32 %560;
    i1 %562 = fcmp ogt f32 %561, f32 1e-06;
    i1 %563 = fcmp olt f32 %561, f32 -1e-06;
    i1 %564 = or i1 %562, i1 %563;
    cbr i1 %564(prob = 0.992308), ^while.body13, ^b7;
  ^while.body13:
    f32 %565 = phi [^b6, f32 1] [^while.body13, f32 %568];
    f32 %566 = fdiv f32 %560, f32 %565;
    f32 %567 = fadd f32 %565, f32 %566;
    f32 %568 = fmul f32 %567, f32 0.5;
    f32 %569 = fdiv f32 %560, f32 %568;
    f32 %570 = fsub f32 %568, f32 %569;
    i1 %571 = fcmp ogt f32 %570, f32 1e-06;
    i1 %572 = fcmp olt f32 %570, f32 -1e-06;
    i1 %573 = or i1 %571, i1 %572;
    cbr i1 %573(prob = 0.992308), ^while.body13, ^b7;
  ^b7:
    f32 %574 = phi [^b6, f32 1] [^while.body13, f32 %568];
    f32 %575 = fsub f32 %574, f32 1;
    i1 %576 = fcmp ole f32 %575, f32 1e-06;
    i1 %577 = fcmp oge f32 %575, f32 -1e-06;
    i1 %578 = and i1 %576, i1 %577;
    i32 %579 = zext i1 %578 to i32;
    call (i32) -> void @putint(i32 %579);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
