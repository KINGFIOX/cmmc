internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r, i32* %0) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %l1 = alloc i32;
    i32** %a1 = alloc i32*;
    i32* %bitround1 = alloc i32;
    store i32* %bitround1 with i32 %bitround;
    store i32** %a1 with i32* %a;
    store i32* %l1 with i32 %l;
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %48 with i32 0;
    i1 %49 = scmp eq i32 %bitround, i32 -1;
    i32 %50 = add i32 %l, i32 1;
    i1 %51 = scmp ge i32 %50, i32 %r;
    i1 %52 = or i1 %51, i1 %49;
    cbr i1 %52(prob = 0.75), ^if.then, ^b;
^b:
    i1 %53 = scmp gt i32 %bitround, i32 0;
    store i32* %i1 with i32 %l;
    i1 %54 = scmp lt i32 %l, i32 %r;
    cbr i1 %54(prob = 0.97), ^while.body, ^b1;
^if.then:
    ret;
^b1:
    store i32* %1 with i32 %l;
    i32 %55 = load i32* %33;
    i32 %56 = add i32 %55, i32 %l;
    store i32* %17 with i32 %56;
    i32 %57 = load i32* %17;
    store i32* %2 with i32 %57;
    i32 %58 = load i32* %34;
    i32 %59 = add i32 %57, i32 %58;
    store i32* %18 with i32 %59;
    store i32* %3 with i32 %59;
    i32 %60 = load i32* %35;
    i32 %61 = add i32 %59, i32 %60;
    store i32* %19 with i32 %61;
    store i32* %4 with i32 %61;
    i32 %62 = load i32* %36;
    i32 %63 = add i32 %61, i32 %62;
    store i32* %20 with i32 %63;
    store i32* %5 with i32 %63;
    i32 %64 = load i32* %37;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %21 with i32 %65;
    store i32* %6 with i32 %65;
    i32 %66 = load i32* %38;
    i32 %67 = add i32 %65, i32 %66;
    store i32* %22 with i32 %67;
    store i32* %7 with i32 %67;
    i32 %68 = load i32* %39;
    i32 %69 = add i32 %67, i32 %68;
    store i32* %23 with i32 %69;
    store i32* %8 with i32 %69;
    i32 %70 = load i32* %40;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %24 with i32 %71;
    store i32* %9 with i32 %71;
    i32 %72 = load i32* %41;
    i32 %73 = add i32 %71, i32 %72;
    store i32* %25 with i32 %73;
    store i32* %10 with i32 %73;
    i32 %74 = load i32* %42;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %26 with i32 %75;
    store i32* %11 with i32 %75;
    i32 %76 = load i32* %43;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %27 with i32 %77;
    store i32* %12 with i32 %77;
    i32 %78 = load i32* %44;
    i32 %79 = add i32 %77, i32 %78;
    store i32* %28 with i32 %79;
    store i32* %13 with i32 %79;
    i32 %80 = load i32* %45;
    i32 %81 = add i32 %79, i32 %80;
    store i32* %29 with i32 %81;
    store i32* %14 with i32 %81;
    i32 %82 = load i32* %46;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %30 with i32 %83;
    store i32* %15 with i32 %83;
    i32 %84 = load i32* %47;
    i32 %85 = add i32 %83, i32 %84;
    store i32* %31 with i32 %85;
    store i32* %16 with i32 %85;
    i32 %86 = load i32* %48;
    i32 %87 = add i32 %85, i32 %86;
    store i32* %32 with i32 %87;
    store i32* %i1 with i32 0;
    ubr ^while.guard;
^while.body:
    i32 %88 = phi [^b, i32 %l] [^b2, i32 %109];
    i32* %89 = getelementptr &(i32* %a)[i32 %88];
    i32 %90 = load i32* %89;
    cbr i1 %53(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %91 = phi [^while.body, i32 0] [^while.body1, i32 %94];
    i32 %92 = phi [^while.body, i32 %90] [^while.body1, i32 %93];
    i32 %93 = sdiv i32 %92, i32 16;
    i32 %94 = add i32 %91, i32 1;
    i1 %95 = scmp lt i32 %94, i32 %bitround;
    cbr i1 %95(prob = 0.97), ^while.body1, ^b2;
^while.guard:
    i32 %96 = phi [^b1, i32 %bitround] [^b3, i32 %118];
    i32 %97 = phi [^b1, i32 %l] [^b3, i32 %119];
    i32 %98 = phi [^b1, i32 0] [^b3, i32 %121];
    i32* %99 = getelementptr &([16 * i32]* %head)[i64 0][i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %98];
    i32 %102 = load i32* %101;
    i1 %103 = scmp lt i32 %100, i32 %102;
    cbr i1 %103(prob = 0.97), ^while.body2, ^b3;
^b2:
    i32 %104 = phi [^while.body, i32 %90] [^while.body1, i32 %93];
    i32 %105 = srem i32 %104, i32 16;
    i32* %106 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %105];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %107, i32 1;
    store i32* %106 with i32 %108;
    i32 %109 = add i32 %88, i32 1;
    store i32* %i1 with i32 %109;
    i1 %110 = scmp lt i32 %109, i32 %r;
    cbr i1 %110(prob = 0.97), ^while.body, ^b1;
^while.body2:
    i32 %111 = phi [^while.guard, i32 %96] [^b6, i32 %145];
    i32 %112 = phi [^while.guard, i32 %98] [^b6, i32 %147];
    i32* %113 = getelementptr &([16 * i32]* %head)[i64 0][i32 %112];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %a)[i32 %114];
    i32 %116 = load i32* %115;
    i1 %117 = scmp gt i32 %111, i32 0;
    cbr i1 %117(prob = 0.97), ^while.body3, ^b5;
^b3:
    i32 %118 = phi [^while.guard, i32 %96] [^b6, i32 %145];
    i32 %119 = phi [^while.guard, i32 %97] [^b6, i32 %146];
    i32 %120 = phi [^while.guard, i32 %98] [^b6, i32 %147];
    i32 %121 = add i32 %120, i32 1;
    store i32* %i1 with i32 %121;
    i1 %122 = scmp lt i32 %121, i32 16;
    cbr i1 %122(prob = 0.97), ^while.guard, ^b4;
^b4:
    store i32* %1 with i32 %119;
    i32 %123 = load i32* %33;
    i32 %124 = add i32 %119, i32 %123;
    store i32* %17 with i32 %124;
    store i32* %i with i32 0;
    ubr ^while.body5;
^while.body3:
    i32 %125 = phi [^while.body2, i32 0] [^while.body3, i32 %128];
    i32 %126 = phi [^while.body2, i32 %116] [^while.body3, i32 %127];
    i32 %127 = sdiv i32 %126, i32 16;
    i32 %128 = add i32 %125, i32 1;
    i1 %129 = scmp lt i32 %128, i32 %111;
    cbr i1 %129(prob = 0.97), ^while.body3, ^b5;
^b5:
    i32 %130 = phi [^while.body2, i32 %116] [^while.body3, i32 %127];
    i32 %131 = srem i32 %130, i32 16;
    i1 %132 = scmp neq i32 %131, i32 %112;
    cbr i1 %132(prob = 0.97), ^while.body4, ^b6;
^while.body4:
    i32 %133 = phi [^b5, i32 %111] [^b10, i32 %173];
    i32 %134 = phi [^b5, i32 %116] [^b10, i32 %172];
    i1 %135 = scmp gt i32 %133, i32 0;
    cbr i1 %135(prob = 0.97), ^while.body6, ^b7;
^while.body5:
    i32 %136 = phi [^b4, i32 %118] [^b8, i32 %181];
    i32* %137 = phi [^b4, i32* %a] [^b8, i32* %182];
    i32 %138 = phi [^b4, i32 0] [^b8, i32 %184];
    i1 %139 = scmp gt i32 %138, i32 0;
    cbr i1 %139(prob = 0.5), ^if.then1, ^b8;
^b6:
    i32 %140 = phi [^b5, i32 %112] [^b10, i32 %174];
    i32 %141 = phi [^b5, i32 %116] [^b10, i32 %172];
    i32* %142 = getelementptr &([16 * i32]* %head)[i64 0][i32 %140];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %a)[i32 %143];
    store i32* %144 with i32 %141;
    i32 %145 = load i32* %bitround1;
    i32 %146 = load i32* %l1;
    i32 %147 = load i32* %i1;
    i32* %148 = getelementptr &([16 * i32]* %head)[i64 0][i32 %147];
    i32 %149 = load i32* %148;
    i32 %150 = add i32 %149, i32 1;
    store i32* %148 with i32 %150;
    i32* %151 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %147];
    i32 %152 = load i32* %151;
    i1 %153 = scmp lt i32 %150, i32 %152;
    cbr i1 %153(prob = 0.97), ^while.body2, ^b3;
^if.then1:
    i32 %154 = add i32 %138, i32 -1;
    i32* %155 = getelementptr &([16 * i32]* %head)[i64 0][i32 %138];
    i32* %156 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %154];
    i32 %157 = load i32* %156;
    store i32* %155 with i32 %157;
    i32* %158 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %138];
    i32* %159 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %138];
    i32 %160 = load i32* %159;
    i32 %161 = add i32 %157, i32 %160;
    store i32* %158 with i32 %161;
    ubr ^b8;
^while.body6:
    i32 %162 = phi [^while.body4, i32 0] [^while.body6, i32 %165];
    i32 %163 = phi [^while.body4, i32 %134] [^while.body6, i32 %164];
    i32 %164 = sdiv i32 %163, i32 16;
    i32 %165 = add i32 %162, i32 1;
    i1 %166 = scmp lt i32 %165, i32 %133;
    cbr i1 %166(prob = 0.97), ^while.body6, ^b7;
^b7:
    i32 %167 = phi [^while.body4, i32 %134] [^while.body6, i32 %164];
    i32 %168 = srem i32 %167, i32 16;
    i32* %169 = getelementptr &([16 * i32]* %head)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %a)[i32 %170];
    i32 %172 = load i32* %171;
    store i32* %171 with i32 %134;
    i32 %173 = load i32* %bitround1;
    i32 %174 = load i32* %i1;
    i1 %175 = scmp gt i32 %173, i32 0;
    cbr i1 %175(prob = 0.97), ^while.body7, ^b9;
^b8:
    i32 %176 = add i32 %136, i32 -1;
    i32* %177 = getelementptr &([16 * i32]* %head)[i64 0][i32 %138];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %138];
    i32 %180 = load i32* %179;
    call (i32, i32*, i32, i32, i32*) -> void @radixSort(i32 %176, i32* %137, i32 %178, i32 %180, i32* %0);
    i32 %181 = load i32* %bitround1;
    i32* %182 = load i32** %a1;
    i32 %183 = load i32* %i;
    i32 %184 = add i32 %183, i32 1;
    store i32* %i with i32 %184;
    i1 %185 = scmp lt i32 %184, i32 16;
    cbr i1 %185(prob = 0.97), ^while.body5, ^if.then;
^while.body7:
    i32 %186 = phi [^b7, i32 0] [^while.body7, i32 %189];
    i32 %187 = phi [^b7, i32 %134] [^while.body7, i32 %188];
    i32 %188 = sdiv i32 %187, i32 16;
    i32 %189 = add i32 %186, i32 1;
    i1 %190 = scmp lt i32 %189, i32 %173;
    cbr i1 %190(prob = 0.97), ^while.body7, ^b9;
^b9:
    i32 %191 = phi [^b7, i32 %134] [^while.body7, i32 %188];
    i32 %192 = srem i32 %191, i32 16;
    i32* %193 = getelementptr &([16 * i32]* %head)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %194, i32 1;
    store i32* %193 with i32 %195;
    cbr i1 %175(prob = 0.97), ^while.body8, ^b10;
^while.body8:
    i32 %196 = phi [^b9, i32 0] [^while.body8, i32 %199];
    i32 %197 = phi [^b9, i32 %172] [^while.body8, i32 %198];
    i32 %198 = sdiv i32 %197, i32 16;
    i32 %199 = add i32 %196, i32 1;
    i1 %200 = scmp lt i32 %199, i32 %173;
    cbr i1 %200(prob = 0.97), ^while.body8, ^b10;
^b10:
    i32 %201 = phi [^b9, i32 %172] [^while.body8, i32 %198];
    i32 %202 = srem i32 %201, i32 16;
    i1 %203 = scmp neq i32 %202, i32 %174;
    cbr i1 %203(prob = 0.97), ^while.body4, ^b6;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %ans = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32, i32*) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1, i32* %ans);
    i32 %2 = load i32* %n;
    i32 %3 = load i32* %ans;
    i1 %4 = scmp gt i32 %2, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 %3] [^while.body, i32 %12];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32* %7 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %6, i32 2;
    i32 %10 = srem i32 %8, i32 %9;
    i32 %11 = mul i32 %6, i32 %10;
    i32 %12 = add i32 %5, i32 %11;
    i32 %13 = add i32 %6, i32 1;
    i1 %14 = scmp lt i32 %13, i32 %2;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^b:
    i32 %15 = phi [^entry, i32 %3] [^while.body, i32 %12];
    i1 %16 = scmp lt i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %17 = neg i32 %15;
    ubr ^b1;
^b1:
    i32 %18 = phi [^b, i32 %15] [^if.then, i32 %17];
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %18);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
