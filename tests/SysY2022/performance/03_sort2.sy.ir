internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
  ^b:
    i1 %52 = icmp slt i32 %l, i32 %r;
    i1 %53 = icmp sgt i32 %bitround, i32 0;
    i32 %54 = add i32 %bitround, i32 -1;
    cbr i1 %52(prob = 0.97), ^while.body, ^b1;
  ^if.then:
    ret;
  ^b1:
    store i32* %4 with i32 %l;
    i32 %55 = load i32* %36;
    i32 %56 = add i32 %l, i32 %55;
    store i32* %20 with i32 %56;
    ubr ^while.body1;
  ^while.body:
    i32 %57 = phi [^b, i32 %l] [^b2, i32 %95];
    i32* %58 = getelementptr &(i32* %a)[i32 %57];
    i32 %59 = load i32* %58;
    cbr i1 %53(prob = 0.97), ^super.header, ^b2;
  ^super.header:
    i32 %60 = phi [^while.body, i32 %59] [^while.body2, i32 %97];
    i32 %61 = phi [^while.body, i32 0] [^while.body2, i32 %62];
    i32 %62 = add i32 %61, i32 4;
    i1 %63 = icmp sgt i32 %bitround, i32 %62;
    cbr i1 %63(prob = 0.89), ^while.body2, ^super.header1;
  ^while.body1:
    i32 %64 = phi [^b1, i32 1] [^while.body1, i32 %88];
    i32 %65 = add i32 %64, i32 -1;
    i32* %66 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([16 * i32]* %head)[i64 0][i32 %64];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %64];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %67, i32 %70;
    i32* %72 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %64];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %68)[i64 1];
    store i32* %73 with i32 %71;
    i32* %74 = getelementptr &(i32* %69)[i64 1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %71, i32 %75;
    i32* %77 = getelementptr &(i32* %72)[i64 1];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %68)[i64 2];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %69)[i64 2];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %76, i32 %80;
    i32* %82 = getelementptr &(i32* %72)[i64 2];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %68)[i64 3];
    store i32* %83 with i32 %81;
    i32* %84 = getelementptr &(i32* %69)[i64 3];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %81, i32 %85;
    i32* %87 = getelementptr &(i32* %72)[i64 3];
    store i32* %87 with i32 %86;
    i32 %88 = add i32 %64, i32 4;
    i1 %89 = icmp slt i32 %88, i32 13;
    cbr i1 %89(prob = 0.67), ^while.body1, ^while.body3;
  ^b2:
    i32 %90 = phi [^while.body, i32 %59] [^while.body6, i32 %137];
    i32 %91 = srem i32 %90, i32 16;
    i32* %92 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %93, i32 1;
    store i32* %92 with i32 %94;
    i32 %95 = add i32 %57, i32 1;
    i1 %96 = icmp sgt i32 %r, i32 %95;
    cbr i1 %96(prob = 0.97), ^while.body, ^b1;
  ^while.body2:
    i32 %97 = sdiv i32 %60, i32 65536;
    ubr ^super.header;
  ^while.body3:
    i32 %98 = add i32 %64, i32 3;
    i32* %99 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &([16 * i32]* %head)[i64 0][i32 %88];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %88];
    i32 %103 = load i32* %102;
    i32 %104 = add i32 %100, i32 %103;
    i32* %105 = getelementptr &(i32* %99)[i64 1];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %101)[i64 1];
    store i32* %106 with i32 %104;
    i32* %107 = getelementptr &(i32* %102)[i64 1];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %104, i32 %108;
    i32* %110 = getelementptr &(i32* %99)[i64 2];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %101)[i64 2];
    store i32* %111 with i32 %109;
    i32* %112 = getelementptr &(i32* %102)[i64 2];
    i32 %113 = load i32* %112;
    i32 %114 = add i32 %109, i32 %113;
    i32* %115 = getelementptr &(i32* %99)[i64 3];
    store i32* %115 with i32 %114;
    ubr ^while.header;
  ^super.header1:
    i32 %116 = phi [^super.header, i32 %60] [^while.body4, i32 %120];
    i32 %117 = phi [^super.header, i32 %61] [^while.body4, i32 %118];
    i32 %118 = add i32 %117, i32 4;
    i1 %119 = icmp sgt i32 %bitround, i32 %118;
    cbr i1 %119(prob = 0.89), ^while.body4, ^super.header2;
  ^while.body4:
    i32 %120 = sdiv i32 %116, i32 65536;
    ubr ^super.header1;
  ^super.header2:
    i32 %121 = phi [^super.header1, i32 %116] [^while.body5, i32 %130];
    i32 %122 = phi [^super.header1, i32 %117] [^while.body5, i32 %123];
    i32 %123 = add i32 %122, i32 4;
    i1 %124 = icmp sgt i32 %bitround, i32 %123;
    cbr i1 %124(prob = 0.89), ^while.body5, ^while.body6;
  ^while.header:
    i32 %125 = phi [^while.body3, i32 0] [^b4, i32 %143];
    i1 %126 = icmp slt i32 %125, i32 16;
    cbr i1 %126(prob = 0.97), ^indirect, ^b3;
  ^indirect:
    i32* %127 = getelementptr &([16 * i32]* %head)[i64 0][i32 %125];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %125];
    ubr ^while.header1;
  ^while.body5:
    i32 %130 = sdiv i32 %121, i32 65536;
    ubr ^super.header2;
  ^b3:
    store i32* %4 with i32 %l;
    i32 %131 = load i32* %36;
    i32 %132 = add i32 %l, i32 %131;
    store i32* %20 with i32 %132;
    ubr ^while.header2;
  ^while.body6:
    i32 %133 = phi [^super.header2, i32 %121] [^while.body6, i32 %137];
    i32 %134 = phi [^super.header2, i32 %122] [^while.body6, i32 %135];
    i32 %135 = add i32 %134, i32 1;
    i1 %136 = icmp sgt i32 %bitround, i32 %135;
    i32 %137 = sdiv i32 %133, i32 16;
    cbr i1 %136(prob = 0.97), ^while.body6, ^b2;
  ^while.header1:
    i32 %138 = phi [^indirect, i32 %128] [^b7, i32 %172];
    i32 %139 = load i32* %129;
    i1 %140 = icmp slt i32 %138, i32 %139;
    cbr i1 %140(prob = 0.97), ^while.body7, ^b4;
  ^while.header2:
    i32 %141 = phi [^b3, i32 0] [^b5, i32 %160];
    i1 %142 = icmp slt i32 %141, i32 16;
    cbr i1 %142(prob = 0.97), ^while.body8, ^if.then;
  ^b4:
    i32 %143 = add i32 %125, i32 1;
    ubr ^while.header;
  ^while.body7:
    i32 %144 = load i32* %127;
    i32* %145 = getelementptr &(i32* %a)[i32 %144];
    i32 %146 = load i32* %145;
    cbr i1 %53(prob = 0.97), ^super.header3, ^b6;
  ^while.body8:
    i1 %147 = icmp sgt i32 %141, i32 0;
    cbr i1 %147(prob = 0.5), ^if.then1, ^b5;
  ^if.then1:
    i32 %148 = add i32 %141, i32 -1;
    i32* %149 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %148];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &([16 * i32]* %head)[i64 0][i32 %141];
    store i32* %151 with i32 %150;
    i32* %152 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %141];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %150, i32 %153;
    i32* %155 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %141];
    store i32* %155 with i32 %154;
    ubr ^b5;
  ^b5:
    i32* %156 = getelementptr &([16 * i32]* %head)[i64 0][i32 %141];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %141];
    i32 %159 = load i32* %158;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %54, i32* %a, i32 %157, i32 %159);
    i32 %160 = add i32 %141, i32 1;
    ubr ^while.header2;
  ^super.header3:
    i32 %161 = phi [^while.body7, i32 %146] [^while.body9, i32 %168];
    i32 %162 = phi [^while.body7, i32 0] [^while.body9, i32 %163];
    i32 %163 = add i32 %162, i32 4;
    i1 %164 = icmp sgt i32 %bitround, i32 %163;
    cbr i1 %164(prob = 0.89), ^while.body9, ^super.header4;
  ^b6:
    i32 %165 = phi [^while.body7, i32 %146] [^while.body14, i32 %206];
    i32 %166 = srem i32 %165, i32 16;
    i1 %167 = icmp neq i32 %125, i32 %166;
    cbr i1 %167(prob = 0.97), ^while.body10, ^b7;
  ^while.body9:
    i32 %168 = sdiv i32 %161, i32 65536;
    ubr ^super.header3;
  ^b7:
    i32 %169 = phi [^b6, i32 %144] [^indirect1, i32 %196] [^indirect3, i32 %243];
    i32 %170 = phi [^b6, i32 %146] [^indirect1, i32 %180] [^indirect3, i32 %221];
    i32* %171 = getelementptr &(i32* %a)[i32 %169];
    store i32* %171 with i32 %170;
    i32 %172 = add i32 %169, i32 1;
    store i32* %127 with i32 %172;
    ubr ^while.header1;
  ^super.header4:
    i32 %173 = phi [^super.header3, i32 %161] [^while.body11, i32 %182];
    i32 %174 = phi [^super.header3, i32 %162] [^while.body11, i32 %175];
    i32 %175 = add i32 %174, i32 4;
    i1 %176 = icmp sgt i32 %bitround, i32 %175;
    cbr i1 %176(prob = 0.89), ^while.body11, ^super.header6;
  ^while.body10:
    i32* %177 = getelementptr &([16 * i32]* %head)[i64 0][i32 %166];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %a)[i32 %178];
    i32 %180 = load i32* %179;
    store i32* %179 with i32 %146;
    i32 %181 = add i32 %178, i32 1;
    store i32* %177 with i32 %181;
    cbr i1 %53(prob = 0.97), ^super.header5, ^b8;
  ^while.body11:
    i32 %182 = sdiv i32 %173, i32 65536;
    ubr ^super.header4;
  ^super.header5:
    i32 %183 = phi [^while.body10, i32 %180] [^while.body12, i32 %194];
    i32 %184 = phi [^while.body10, i32 0] [^while.body12, i32 %185];
    i32 %185 = add i32 %184, i32 4;
    i1 %186 = icmp sgt i32 %bitround, i32 %185;
    cbr i1 %186(prob = 0.89), ^while.body12, ^super.header7;
  ^super.header6:
    i32 %187 = phi [^super.header4, i32 %173] [^while.body13, i32 %195];
    i32 %188 = phi [^super.header4, i32 %174] [^while.body13, i32 %189];
    i32 %189 = add i32 %188, i32 4;
    i1 %190 = icmp sgt i32 %bitround, i32 %189;
    cbr i1 %190(prob = 0.89), ^while.body13, ^while.body14;
  ^b8:
    i32 %191 = phi [^while.body10, i32 %180] [^while.body18, i32 %237];
    i32 %192 = srem i32 %191, i32 16;
    i1 %193 = icmp neq i32 %125, i32 %192;
    cbr i1 %193(prob = 0.97), ^indirect2, ^indirect1;
  ^while.body12:
    i32 %194 = sdiv i32 %183, i32 65536;
    ubr ^super.header5;
  ^while.body13:
    i32 %195 = sdiv i32 %187, i32 65536;
    ubr ^super.header6;
  ^indirect1:
    i32 %196 = load i32* %127;
    ubr ^b7;
  ^super.header7:
    i32 %197 = phi [^super.header5, i32 %183] [^while.body15, i32 %207];
    i32 %198 = phi [^super.header5, i32 %184] [^while.body15, i32 %199];
    i32 %199 = add i32 %198, i32 4;
    i1 %200 = icmp sgt i32 %bitround, i32 %199;
    cbr i1 %200(prob = 0.89), ^while.body15, ^super.header9;
  ^indirect2:
    i32 %201 = phi [^b8, i32 %180] [^b10, i32 %221];
    cbr i1 %53(prob = 0.97), ^super.header8, ^b9;
  ^while.body14:
    i32 %202 = phi [^super.header6, i32 %187] [^while.body14, i32 %206];
    i32 %203 = phi [^super.header6, i32 %188] [^while.body14, i32 %204];
    i32 %204 = add i32 %203, i32 1;
    i1 %205 = icmp sgt i32 %bitround, i32 %204;
    i32 %206 = sdiv i32 %202, i32 16;
    cbr i1 %205(prob = 0.97), ^while.body14, ^b6;
  ^while.body15:
    i32 %207 = sdiv i32 %197, i32 65536;
    ubr ^super.header7;
  ^super.header8:
    i32 %208 = phi [^indirect2, i32 %201] [^while.body16, i32 %223];
    i32 %209 = phi [^indirect2, i32 0] [^while.body16, i32 %210];
    i32 %210 = add i32 %209, i32 4;
    i1 %211 = icmp sgt i32 %bitround, i32 %210;
    cbr i1 %211(prob = 0.89), ^while.body16, ^super.header10;
  ^super.header9:
    i32 %212 = phi [^super.header7, i32 %197] [^while.body17, i32 %224];
    i32 %213 = phi [^super.header7, i32 %198] [^while.body17, i32 %214];
    i32 %214 = add i32 %213, i32 4;
    i1 %215 = icmp sgt i32 %bitround, i32 %214;
    cbr i1 %215(prob = 0.89), ^while.body17, ^while.body18;
  ^b9:
    i32 %216 = phi [^indirect2, i32 %201] [^while.body23, i32 %258];
    i32 %217 = srem i32 %216, i32 16;
    i32* %218 = getelementptr &([16 * i32]* %head)[i64 0][i32 %217];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &(i32* %a)[i32 %219];
    i32 %221 = load i32* %220;
    store i32* %220 with i32 %201;
    i32 %222 = add i32 %219, i32 1;
    store i32* %218 with i32 %222;
    cbr i1 %53(prob = 0.97), ^super.header11, ^b10;
  ^while.body16:
    i32 %223 = sdiv i32 %208, i32 65536;
    ubr ^super.header8;
  ^while.body17:
    i32 %224 = sdiv i32 %212, i32 65536;
    ubr ^super.header9;
  ^super.header10:
    i32 %225 = phi [^super.header8, i32 %208] [^while.body20, i32 %242];
    i32 %226 = phi [^super.header8, i32 %209] [^while.body20, i32 %227];
    i32 %227 = add i32 %226, i32 4;
    i1 %228 = icmp sgt i32 %bitround, i32 %227;
    cbr i1 %228(prob = 0.89), ^while.body20, ^super.header12;
  ^super.header11:
    i32 %229 = phi [^b9, i32 %221] [^while.body19, i32 %241];
    i32 %230 = phi [^b9, i32 0] [^while.body19, i32 %231];
    i32 %231 = add i32 %230, i32 4;
    i1 %232 = icmp sgt i32 %bitround, i32 %231;
    cbr i1 %232(prob = 0.89), ^while.body19, ^super.header13;
  ^while.body18:
    i32 %233 = phi [^super.header9, i32 %212] [^while.body18, i32 %237];
    i32 %234 = phi [^super.header9, i32 %213] [^while.body18, i32 %235];
    i32 %235 = add i32 %234, i32 1;
    i1 %236 = icmp sgt i32 %bitround, i32 %235;
    i32 %237 = sdiv i32 %233, i32 16;
    cbr i1 %236(prob = 0.97), ^while.body18, ^b8;
  ^b10:
    i32 %238 = phi [^b9, i32 %221] [^while.body25, i32 %268];
    i32 %239 = srem i32 %238, i32 16;
    i1 %240 = icmp neq i32 %125, i32 %239;
    cbr i1 %240(prob = 0.97), ^indirect2, ^indirect3;
  ^while.body19:
    i32 %241 = sdiv i32 %229, i32 65536;
    ubr ^super.header11;
  ^while.body20:
    i32 %242 = sdiv i32 %225, i32 65536;
    ubr ^super.header10;
  ^indirect3:
    i32 %243 = load i32* %127;
    ubr ^b7;
  ^super.header12:
    i32 %244 = phi [^super.header10, i32 %225] [^while.body22, i32 %253];
    i32 %245 = phi [^super.header10, i32 %226] [^while.body22, i32 %246];
    i32 %246 = add i32 %245, i32 4;
    i1 %247 = icmp sgt i32 %bitround, i32 %246;
    cbr i1 %247(prob = 0.89), ^while.body22, ^while.body23;
  ^super.header13:
    i32 %248 = phi [^super.header11, i32 %229] [^while.body21, i32 %252];
    i32 %249 = phi [^super.header11, i32 %230] [^while.body21, i32 %250];
    i32 %250 = add i32 %249, i32 4;
    i1 %251 = icmp sgt i32 %bitround, i32 %250;
    cbr i1 %251(prob = 0.89), ^while.body21, ^super.header14;
  ^while.body21:
    i32 %252 = sdiv i32 %248, i32 65536;
    ubr ^super.header13;
  ^while.body22:
    i32 %253 = sdiv i32 %244, i32 65536;
    ubr ^super.header12;
  ^while.body23:
    i32 %254 = phi [^super.header12, i32 %244] [^while.body23, i32 %258];
    i32 %255 = phi [^super.header12, i32 %245] [^while.body23, i32 %256];
    i32 %256 = add i32 %255, i32 1;
    i1 %257 = icmp sgt i32 %bitround, i32 %256;
    i32 %258 = sdiv i32 %254, i32 16;
    cbr i1 %257(prob = 0.97), ^while.body23, ^b9;
  ^super.header14:
    i32 %259 = phi [^super.header13, i32 %248] [^while.body24, i32 %263];
    i32 %260 = phi [^super.header13, i32 %249] [^while.body24, i32 %261];
    i32 %261 = add i32 %260, i32 4;
    i1 %262 = icmp sgt i32 %bitround, i32 %261;
    cbr i1 %262(prob = 0.89), ^while.body24, ^while.body25;
  ^while.body24:
    i32 %263 = sdiv i32 %259, i32 65536;
    ubr ^super.header14;
  ^while.body25:
    i32 %264 = phi [^super.header14, i32 %259] [^while.body25, i32 %268];
    i32 %265 = phi [^super.header14, i32 %260] [^while.body25, i32 %266];
    i32 %266 = add i32 %265, i32 1;
    i1 %267 = icmp sgt i32 %bitround, i32 %266;
    i32 %268 = sdiv i32 %264, i32 16;
    cbr i1 %267(prob = 0.97), ^while.body25, ^b10;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %33];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32 %6 = add i32 %5, i32 4;
    i1 %7 = icmp sgt i32 %2, i32 %6;
    cbr i1 %7(prob = 0.89), ^while.body, ^super.header1;
  ^b:
    i32 %8 = phi [^entry, i32 0] [^while.body2, i32 %69];
    call (i32) -> void @stoptime(i32 102);
    i32 %9 = abs i32 %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32* %10 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %5];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(i32* %10)[i64 1];
    i32 %13 = load i32* %12;
    i32 %14 = add i32 %5, i32 3;
    i32 %15 = srem i32 %13, i32 %14;
    i32 %16 = add i32 %5, i32 1;
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = add i32 %5, i32 2;
    i32 %19 = srem i32 %11, i32 %18;
    i32 %20 = mul i32 %5, i32 %19;
    i32 %21 = add i32 %4, i32 %20;
    i32 %22 = add i32 %17, i32 %21;
    i32* %23 = getelementptr &(i32* %10)[i64 2];
    i32 %24 = load i32* %23;
    i32 %25 = srem i32 %24, i32 %6;
    i32 %26 = mul i32 %18, i32 %25;
    i32 %27 = add i32 %22, i32 %26;
    i32* %28 = getelementptr &(i32* %10)[i64 3];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %5, i32 5;
    i32 %31 = srem i32 %29, i32 %30;
    i32 %32 = mul i32 %14, i32 %31;
    i32 %33 = add i32 %27, i32 %32;
    ubr ^super.header;
  ^super.header1:
    i32 %34 = phi [^super.header, i32 %4] [^while.body1, i32 %61];
    i32 %35 = phi [^super.header, i32 %5] [^while.body1, i32 %36];
    i32 %36 = add i32 %35, i32 4;
    i1 %37 = icmp sgt i32 %2, i32 %36;
    cbr i1 %37(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body1:
    i32* %38 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %35];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %38)[i64 1];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %35, i32 3;
    i32 %43 = srem i32 %41, i32 %42;
    i32 %44 = add i32 %35, i32 1;
    i32 %45 = mul i32 %43, i32 %44;
    i32 %46 = add i32 %35, i32 2;
    i32 %47 = srem i32 %39, i32 %46;
    i32 %48 = mul i32 %35, i32 %47;
    i32 %49 = add i32 %34, i32 %48;
    i32 %50 = add i32 %45, i32 %49;
    i32* %51 = getelementptr &(i32* %38)[i64 2];
    i32 %52 = load i32* %51;
    i32 %53 = srem i32 %52, i32 %36;
    i32 %54 = mul i32 %46, i32 %53;
    i32 %55 = add i32 %50, i32 %54;
    i32* %56 = getelementptr &(i32* %38)[i64 3];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %35, i32 5;
    i32 %59 = srem i32 %57, i32 %58;
    i32 %60 = mul i32 %42, i32 %59;
    i32 %61 = add i32 %55, i32 %60;
    ubr ^super.header1;
  ^while.body2:
    i32 %62 = phi [^super.header1, i32 %34] [^while.body2, i32 %69];
    i32 %63 = phi [^super.header1, i32 %35] [^while.body2, i32 %70];
    i32* %64 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %63];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 2;
    i32 %67 = srem i32 %65, i32 %66;
    i32 %68 = mul i32 %63, i32 %67;
    i32 %69 = add i32 %62, i32 %68;
    i32 %70 = add i32 %63, i32 1;
    i1 %71 = icmp sgt i32 %2, i32 %70;
    cbr i1 %71(prob = 0.97), ^while.body2, ^b;
}
