internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = scmp ge i32 %0, i32 %r;
    i1 %2 = scmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %2, i1 %1;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
  ^b:
    i1 %52 = scmp gt i32 %bitround, i32 0;
    i32 %53 = add i32 %bitround, i32 -1;
    i1 %54 = scmp lt i32 %l, i32 %r;
    cbr i1 %54(prob = 0.97), ^while.body, ^b1;
  ^if.then:
    ret;
  ^b1:
    store i32* %4 with i32 %l;
    i32 %55 = load i32* %36;
    i32 %56 = add i32 %l, i32 %55;
    store i32* %20 with i32 %56;
    ubr ^while.body1;
  ^while.body:
    i32 %57 = phi [^b, i32 %l] [^b3, i32 %126];
    i32* %58 = getelementptr &(i32* %a)[i32 %57];
    i32 %59 = load i32* %58;
    cbr i1 %52(prob = 0.97), ^super.header, ^b2;
  ^super.header:
    i32 %60 = phi [^while.body, i32 %59] [^while.body2, i32 %94];
    i32 %61 = phi [^while.body, i32 0] [^while.body2, i32 %62];
    i32 %62 = add i32 %61, i32 4;
    i1 %63 = scmp lt i32 %62, i32 %bitround;
    cbr i1 %63(prob = 0.89), ^while.body2, ^super.header1;
  ^while.body1:
    i32 %64 = phi [^b1, i32 1] [^while.body1, i32 %88];
    i32 %65 = add i32 %64, i32 -1;
    i32* %66 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([16 * i32]* %head)[i64 0][i32 %64];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %64];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %67, i32 %70;
    i32* %72 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %64];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %68)[i64 1];
    store i32* %73 with i32 %71;
    i32* %74 = getelementptr &(i32* %69)[i64 1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %71, i32 %75;
    i32* %77 = getelementptr &(i32* %72)[i64 1];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %68)[i64 2];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %69)[i64 2];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %76, i32 %80;
    i32* %82 = getelementptr &(i32* %72)[i64 2];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %68)[i64 3];
    store i32* %83 with i32 %81;
    i32* %84 = getelementptr &(i32* %69)[i64 3];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %81, i32 %85;
    i32* %87 = getelementptr &(i32* %72)[i64 3];
    store i32* %87 with i32 %86;
    i32 %88 = add i32 %64, i32 4;
    i1 %89 = scmp lt i32 %88, i32 13;
    cbr i1 %89(prob = 0.67), ^while.body1, ^while.body3;
  ^b2:
    i32 %90 = phi [^while.body, i32 %59] [^while.body8, i32 %151];
    i32 %91 = srem i32 %90, i32 16;
    i32* %92 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %91];
    i32 %93 = load i32* %58;
    cbr i1 %52(prob = 0.97), ^super.header2, ^b3;
  ^while.body2:
    i32 %94 = sdiv i32 %60, i32 65536;
    ubr ^super.header;
  ^while.body3:
    i32 %95 = add i32 %64, i32 3;
    i32* %96 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %95];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &([16 * i32]* %head)[i64 0][i32 %88];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %88];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %97, i32 %100;
    i32* %102 = getelementptr &(i32* %96)[i64 1];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %98)[i64 1];
    store i32* %103 with i32 %101;
    i32* %104 = getelementptr &(i32* %99)[i64 1];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %101, i32 %105;
    i32* %107 = getelementptr &(i32* %96)[i64 2];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %98)[i64 2];
    store i32* %108 with i32 %106;
    i32* %109 = getelementptr &(i32* %99)[i64 2];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %106, i32 %110;
    i32* %112 = getelementptr &(i32* %96)[i64 3];
    store i32* %112 with i32 %111;
    ubr ^while.header;
  ^super.header1:
    i32 %113 = phi [^super.header, i32 %60] [^while.body5, i32 %129];
    i32 %114 = phi [^super.header, i32 %61] [^while.body5, i32 %115];
    i32 %115 = add i32 %114, i32 4;
    i1 %116 = scmp lt i32 %115, i32 %bitround;
    cbr i1 %116(prob = 0.89), ^while.body5, ^super.header3;
  ^super.header2:
    i32 %117 = phi [^b2, i32 %93] [^while.body4, i32 %128];
    i32 %118 = phi [^b2, i32 0] [^while.body4, i32 %119];
    i32 %119 = add i32 %118, i32 4;
    i1 %120 = scmp lt i32 %119, i32 %bitround;
    cbr i1 %120(prob = 0.89), ^while.body4, ^super.header4;
  ^b3:
    i32 %121 = phi [^b2, i32 %93] [^while.body10, i32 %166];
    i32 %122 = srem i32 %121, i32 16;
    i32* %123 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %122];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %124, i32 1;
    store i32* %92 with i32 %125;
    i32 %126 = add i32 %57, i32 1;
    i1 %127 = scmp lt i32 %126, i32 %r;
    cbr i1 %127(prob = 0.97), ^while.body, ^b1;
  ^while.body4:
    i32 %128 = sdiv i32 %117, i32 65536;
    ubr ^super.header2;
  ^while.body5:
    i32 %129 = sdiv i32 %113, i32 65536;
    ubr ^super.header1;
  ^super.header3:
    i32 %130 = phi [^super.header1, i32 %113] [^while.body7, i32 %144];
    i32 %131 = phi [^super.header1, i32 %114] [^while.body7, i32 %132];
    i32 %132 = add i32 %131, i32 4;
    i1 %133 = scmp lt i32 %132, i32 %bitround;
    cbr i1 %133(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header:
    i32 %134 = phi [^while.body3, i32 0] [^b5, i32 %167];
    i1 %135 = scmp lt i32 %134, i32 16;
    cbr i1 %135(prob = 0.97), ^indirect, ^b4;
  ^super.header4:
    i32 %136 = phi [^super.header2, i32 %117] [^while.body6, i32 %143];
    i32 %137 = phi [^super.header2, i32 %118] [^while.body6, i32 %138];
    i32 %138 = add i32 %137, i32 4;
    i1 %139 = scmp lt i32 %138, i32 %bitround;
    cbr i1 %139(prob = 0.89), ^while.body6, ^super.header5;
  ^indirect:
    i32* %140 = getelementptr &([16 * i32]* %head)[i64 0][i32 %134];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %134];
    ubr ^while.header1;
  ^while.body6:
    i32 %143 = sdiv i32 %136, i32 65536;
    ubr ^super.header4;
  ^while.body7:
    i32 %144 = sdiv i32 %130, i32 65536;
    ubr ^super.header3;
  ^b4:
    store i32* %4 with i32 %l;
    i32 %145 = load i32* %36;
    i32 %146 = add i32 %l, i32 %145;
    store i32* %20 with i32 %146;
    ubr ^while.header2;
  ^while.body8:
    i32 %147 = phi [^super.header3, i32 %130] [^while.body8, i32 %151];
    i32 %148 = phi [^super.header3, i32 %131] [^while.body8, i32 %149];
    i32 %149 = add i32 %148, i32 1;
    i1 %150 = scmp lt i32 %149, i32 %bitround;
    i32 %151 = sdiv i32 %147, i32 16;
    cbr i1 %150(prob = 0.97), ^while.body8, ^b2;
  ^super.header5:
    i32 %152 = phi [^super.header4, i32 %136] [^while.body9, i32 %156];
    i32 %153 = phi [^super.header4, i32 %137] [^while.body9, i32 %154];
    i32 %154 = add i32 %153, i32 4;
    i1 %155 = scmp lt i32 %154, i32 %bitround;
    cbr i1 %155(prob = 0.89), ^while.body9, ^while.body10;
  ^while.body9:
    i32 %156 = sdiv i32 %152, i32 65536;
    ubr ^super.header5;
  ^while.header1:
    i32 %157 = phi [^indirect, i32 %141] [^b8, i32 %197];
    i32 %158 = load i32* %142;
    i1 %159 = scmp lt i32 %157, i32 %158;
    cbr i1 %159(prob = 0.97), ^while.body11, ^b5;
  ^while.header2:
    i32 %160 = phi [^b4, i32 0] [^b6, i32 %184];
    i1 %161 = scmp lt i32 %160, i32 16;
    cbr i1 %161(prob = 0.97), ^while.body12, ^if.then;
  ^while.body10:
    i32 %162 = phi [^super.header5, i32 %152] [^while.body10, i32 %166];
    i32 %163 = phi [^super.header5, i32 %153] [^while.body10, i32 %164];
    i32 %164 = add i32 %163, i32 1;
    i1 %165 = scmp lt i32 %164, i32 %bitround;
    i32 %166 = sdiv i32 %162, i32 16;
    cbr i1 %165(prob = 0.97), ^while.body10, ^b3;
  ^b5:
    i32 %167 = add i32 %134, i32 1;
    ubr ^while.header;
  ^while.body11:
    i32 %168 = load i32* %140;
    i32* %169 = getelementptr &(i32* %a)[i32 %168];
    i32 %170 = load i32* %169;
    cbr i1 %52(prob = 0.97), ^super.header6, ^b7;
  ^while.body12:
    i1 %171 = scmp gt i32 %160, i32 0;
    cbr i1 %171(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %172 = add i32 %160, i32 -1;
    i32* %173 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %172];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &([16 * i32]* %head)[i64 0][i32 %160];
    store i32* %175 with i32 %174;
    i32* %176 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %160];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %174, i32 %177;
    i32* %179 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %160];
    store i32* %179 with i32 %178;
    ubr ^b6;
  ^b6:
    i32* %180 = getelementptr &([16 * i32]* %head)[i64 0][i32 %160];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %160];
    i32 %183 = load i32* %182;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %53, i32* %a, i32 %181, i32 %183);
    i32 %184 = add i32 %160, i32 1;
    ubr ^while.header2;
  ^super.header6:
    i32 %185 = phi [^while.body11, i32 %170] [^while.body13, i32 %192];
    i32 %186 = phi [^while.body11, i32 0] [^while.body13, i32 %187];
    i32 %187 = add i32 %186, i32 4;
    i1 %188 = scmp lt i32 %187, i32 %bitround;
    cbr i1 %188(prob = 0.89), ^while.body13, ^super.header7;
  ^b7:
    i32 %189 = phi [^while.body11, i32 %170] [^while.body18, i32 %233];
    i32 %190 = srem i32 %189, i32 16;
    i1 %191 = scmp neq i32 %190, i32 %134;
    cbr i1 %191(prob = 0.97), ^while.body14, ^b8;
  ^while.body13:
    i32 %192 = sdiv i32 %185, i32 65536;
    ubr ^super.header6;
  ^b8:
    i32 %193 = phi [^b7, i32 %168] [^indirect1, i32 %223];
    i32 %194 = phi [^b7, i32 %170] [^indirect1, i32 %222];
    i32* %195 = getelementptr &(i32* %a)[i32 %193];
    store i32* %195 with i32 %194;
    i32 %196 = load i32* %140;
    i32 %197 = add i32 %196, i32 1;
    store i32* %140 with i32 %197;
    ubr ^while.header1;
  ^super.header7:
    i32 %198 = phi [^super.header6, i32 %185] [^while.body15, i32 %208];
    i32 %199 = phi [^super.header6, i32 %186] [^while.body15, i32 %200];
    i32 %200 = add i32 %199, i32 4;
    i1 %201 = scmp lt i32 %200, i32 %bitround;
    cbr i1 %201(prob = 0.89), ^while.body15, ^super.header9;
  ^while.body14:
    i32* %202 = getelementptr &([16 * i32]* %head)[i64 0][i32 %190];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %a)[i32 %203];
    i32 %205 = load i32* %204;
    store i32* %204 with i32 %170;
    i32 %206 = load i32* %202;
    i32 %207 = add i32 %206, i32 1;
    store i32* %202 with i32 %207;
    cbr i1 %52(prob = 0.97), ^super.header8, ^b9;
  ^while.body15:
    i32 %208 = sdiv i32 %198, i32 65536;
    ubr ^super.header7;
  ^super.header8:
    i32 %209 = phi [^while.body14, i32 %205] [^while.body16, i32 %220];
    i32 %210 = phi [^while.body14, i32 0] [^while.body16, i32 %211];
    i32 %211 = add i32 %210, i32 4;
    i1 %212 = scmp lt i32 %211, i32 %bitround;
    cbr i1 %212(prob = 0.89), ^while.body16, ^super.header10;
  ^super.header9:
    i32 %213 = phi [^super.header7, i32 %198] [^while.body17, i32 %221];
    i32 %214 = phi [^super.header7, i32 %199] [^while.body17, i32 %215];
    i32 %215 = add i32 %214, i32 4;
    i1 %216 = scmp lt i32 %215, i32 %bitround;
    cbr i1 %216(prob = 0.89), ^while.body17, ^while.body18;
  ^b9:
    i32 %217 = phi [^while.body14, i32 %205] [^while.body22, i32 %265];
    i32 %218 = srem i32 %217, i32 16;
    i1 %219 = scmp neq i32 %218, i32 %134;
    cbr i1 %219(prob = 0.97), ^indirect2, ^indirect1;
  ^while.body16:
    i32 %220 = sdiv i32 %209, i32 65536;
    ubr ^super.header8;
  ^while.body17:
    i32 %221 = sdiv i32 %213, i32 65536;
    ubr ^super.header9;
  ^indirect1:
    i32 %222 = phi [^b9, i32 %205] [^b11, i32 %248];
    i32 %223 = load i32* %140;
    ubr ^b8;
  ^super.header10:
    i32 %224 = phi [^super.header8, i32 %209] [^while.body19, i32 %234];
    i32 %225 = phi [^super.header8, i32 %210] [^while.body19, i32 %226];
    i32 %226 = add i32 %225, i32 4;
    i1 %227 = scmp lt i32 %226, i32 %bitround;
    cbr i1 %227(prob = 0.89), ^while.body19, ^super.header12;
  ^indirect2:
    i32 %228 = phi [^b9, i32 %205] [^b11, i32 %248];
    cbr i1 %52(prob = 0.97), ^super.header11, ^b10;
  ^while.body18:
    i32 %229 = phi [^super.header9, i32 %213] [^while.body18, i32 %233];
    i32 %230 = phi [^super.header9, i32 %214] [^while.body18, i32 %231];
    i32 %231 = add i32 %230, i32 1;
    i1 %232 = scmp lt i32 %231, i32 %bitround;
    i32 %233 = sdiv i32 %229, i32 16;
    cbr i1 %232(prob = 0.97), ^while.body18, ^b7;
  ^while.body19:
    i32 %234 = sdiv i32 %224, i32 65536;
    ubr ^super.header10;
  ^super.header11:
    i32 %235 = phi [^indirect2, i32 %228] [^while.body20, i32 %251];
    i32 %236 = phi [^indirect2, i32 0] [^while.body20, i32 %237];
    i32 %237 = add i32 %236, i32 4;
    i1 %238 = scmp lt i32 %237, i32 %bitround;
    cbr i1 %238(prob = 0.89), ^while.body20, ^super.header13;
  ^super.header12:
    i32 %239 = phi [^super.header10, i32 %224] [^while.body21, i32 %252];
    i32 %240 = phi [^super.header10, i32 %225] [^while.body21, i32 %241];
    i32 %241 = add i32 %240, i32 4;
    i1 %242 = scmp lt i32 %241, i32 %bitround;
    cbr i1 %242(prob = 0.89), ^while.body21, ^while.body22;
  ^b10:
    i32 %243 = phi [^indirect2, i32 %228] [^while.body27, i32 %285];
    i32 %244 = srem i32 %243, i32 16;
    i32* %245 = getelementptr &([16 * i32]* %head)[i64 0][i32 %244];
    i32 %246 = load i32* %245;
    i32* %247 = getelementptr &(i32* %a)[i32 %246];
    i32 %248 = load i32* %247;
    store i32* %247 with i32 %228;
    i32 %249 = load i32* %245;
    i32 %250 = add i32 %249, i32 1;
    store i32* %245 with i32 %250;
    cbr i1 %52(prob = 0.97), ^super.header14, ^b11;
  ^while.body20:
    i32 %251 = sdiv i32 %235, i32 65536;
    ubr ^super.header11;
  ^while.body21:
    i32 %252 = sdiv i32 %239, i32 65536;
    ubr ^super.header12;
  ^super.header13:
    i32 %253 = phi [^super.header11, i32 %235] [^while.body24, i32 %270];
    i32 %254 = phi [^super.header11, i32 %236] [^while.body24, i32 %255];
    i32 %255 = add i32 %254, i32 4;
    i1 %256 = scmp lt i32 %255, i32 %bitround;
    cbr i1 %256(prob = 0.89), ^while.body24, ^super.header15;
  ^super.header14:
    i32 %257 = phi [^b10, i32 %248] [^while.body23, i32 %269];
    i32 %258 = phi [^b10, i32 0] [^while.body23, i32 %259];
    i32 %259 = add i32 %258, i32 4;
    i1 %260 = scmp lt i32 %259, i32 %bitround;
    cbr i1 %260(prob = 0.89), ^while.body23, ^super.header16;
  ^while.body22:
    i32 %261 = phi [^super.header12, i32 %239] [^while.body22, i32 %265];
    i32 %262 = phi [^super.header12, i32 %240] [^while.body22, i32 %263];
    i32 %263 = add i32 %262, i32 1;
    i1 %264 = scmp lt i32 %263, i32 %bitround;
    i32 %265 = sdiv i32 %261, i32 16;
    cbr i1 %264(prob = 0.97), ^while.body22, ^b9;
  ^b11:
    i32 %266 = phi [^b10, i32 %248] [^while.body29, i32 %295];
    i32 %267 = srem i32 %266, i32 16;
    i1 %268 = scmp neq i32 %267, i32 %134;
    cbr i1 %268(prob = 0.97), ^indirect2, ^indirect1;
  ^while.body23:
    i32 %269 = sdiv i32 %257, i32 65536;
    ubr ^super.header14;
  ^while.body24:
    i32 %270 = sdiv i32 %253, i32 65536;
    ubr ^super.header13;
  ^super.header15:
    i32 %271 = phi [^super.header13, i32 %253] [^while.body26, i32 %280];
    i32 %272 = phi [^super.header13, i32 %254] [^while.body26, i32 %273];
    i32 %273 = add i32 %272, i32 4;
    i1 %274 = scmp lt i32 %273, i32 %bitround;
    cbr i1 %274(prob = 0.89), ^while.body26, ^while.body27;
  ^super.header16:
    i32 %275 = phi [^super.header14, i32 %257] [^while.body25, i32 %279];
    i32 %276 = phi [^super.header14, i32 %258] [^while.body25, i32 %277];
    i32 %277 = add i32 %276, i32 4;
    i1 %278 = scmp lt i32 %277, i32 %bitround;
    cbr i1 %278(prob = 0.89), ^while.body25, ^super.header17;
  ^while.body25:
    i32 %279 = sdiv i32 %275, i32 65536;
    ubr ^super.header16;
  ^while.body26:
    i32 %280 = sdiv i32 %271, i32 65536;
    ubr ^super.header15;
  ^while.body27:
    i32 %281 = phi [^super.header15, i32 %271] [^while.body27, i32 %285];
    i32 %282 = phi [^super.header15, i32 %272] [^while.body27, i32 %283];
    i32 %283 = add i32 %282, i32 1;
    i1 %284 = scmp lt i32 %283, i32 %bitround;
    i32 %285 = sdiv i32 %281, i32 16;
    cbr i1 %284(prob = 0.97), ^while.body27, ^b10;
  ^super.header17:
    i32 %286 = phi [^super.header16, i32 %275] [^while.body28, i32 %290];
    i32 %287 = phi [^super.header16, i32 %276] [^while.body28, i32 %288];
    i32 %288 = add i32 %287, i32 4;
    i1 %289 = scmp lt i32 %288, i32 %bitround;
    cbr i1 %289(prob = 0.89), ^while.body28, ^while.body29;
  ^while.body28:
    i32 %290 = sdiv i32 %286, i32 65536;
    ubr ^super.header17;
  ^while.body29:
    i32 %291 = phi [^super.header17, i32 %286] [^while.body29, i32 %295];
    i32 %292 = phi [^super.header17, i32 %287] [^while.body29, i32 %293];
    i32 %293 = add i32 %292, i32 1;
    i1 %294 = scmp lt i32 %293, i32 %bitround;
    i32 %295 = sdiv i32 %291, i32 16;
    cbr i1 %294(prob = 0.97), ^while.body29, ^b11;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = scmp gt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %35];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32 %6 = add i32 %5, i32 4;
    i1 %7 = scmp lt i32 %6, i32 %2;
    cbr i1 %7(prob = 0.89), ^while.body, ^super.header1;
  ^b:
    i32 %8 = phi [^entry, i32 0] [^while.body2, i32 %71];
    call (i32) -> void @stoptime(i32 102);
    i1 %9 = scmp lt i32 %8, i32 0;
    i32 %10 = neg i32 %8;
    i32 %11 = select i1 %9 ? i32 %10 : i32 %8;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32* %12 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %5];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(i32* %12)[i64 1];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %5, i32 3;
    i32 %17 = srem i32 %15, i32 %16;
    i32 %18 = add i32 %5, i32 1;
    i32 %19 = mul i32 %18, i32 %17;
    i32 %20 = add i32 %5, i32 2;
    i32 %21 = srem i32 %13, i32 %20;
    i32 %22 = mul i32 %5, i32 %21;
    i32 %23 = add i32 %4, i32 %22;
    i32 %24 = add i32 %23, i32 %19;
    i32* %25 = getelementptr &(i32* %12)[i64 2];
    i32 %26 = load i32* %25;
    i32 %27 = srem i32 %26, i32 %6;
    i32 %28 = mul i32 %20, i32 %27;
    i32 %29 = add i32 %24, i32 %28;
    i32* %30 = getelementptr &(i32* %12)[i64 3];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %5, i32 5;
    i32 %33 = srem i32 %31, i32 %32;
    i32 %34 = mul i32 %16, i32 %33;
    i32 %35 = add i32 %29, i32 %34;
    ubr ^super.header;
  ^super.header1:
    i32 %36 = phi [^super.header, i32 %4] [^while.body1, i32 %63];
    i32 %37 = phi [^super.header, i32 %5] [^while.body1, i32 %38];
    i32 %38 = add i32 %37, i32 4;
    i1 %39 = scmp lt i32 %38, i32 %2;
    cbr i1 %39(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body1:
    i32* %40 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %37];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %40)[i64 1];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %37, i32 3;
    i32 %45 = srem i32 %43, i32 %44;
    i32 %46 = add i32 %37, i32 1;
    i32 %47 = mul i32 %46, i32 %45;
    i32 %48 = add i32 %37, i32 2;
    i32 %49 = srem i32 %41, i32 %48;
    i32 %50 = mul i32 %37, i32 %49;
    i32 %51 = add i32 %36, i32 %50;
    i32 %52 = add i32 %51, i32 %47;
    i32* %53 = getelementptr &(i32* %40)[i64 2];
    i32 %54 = load i32* %53;
    i32 %55 = srem i32 %54, i32 %38;
    i32 %56 = mul i32 %48, i32 %55;
    i32 %57 = add i32 %52, i32 %56;
    i32* %58 = getelementptr &(i32* %40)[i64 3];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %37, i32 5;
    i32 %61 = srem i32 %59, i32 %60;
    i32 %62 = mul i32 %44, i32 %61;
    i32 %63 = add i32 %57, i32 %62;
    ubr ^super.header1;
  ^while.body2:
    i32 %64 = phi [^super.header1, i32 %36] [^while.body2, i32 %71];
    i32 %65 = phi [^super.header1, i32 %37] [^while.body2, i32 %72];
    i32* %66 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 2;
    i32 %69 = srem i32 %67, i32 %68;
    i32 %70 = mul i32 %65, i32 %69;
    i32 %71 = add i32 %70, i32 %64;
    i32 %72 = add i32 %65, i32 1;
    i1 %73 = scmp lt i32 %72, i32 %2;
    cbr i1 %73(prob = 0.97), ^while.body2, ^b;
}
