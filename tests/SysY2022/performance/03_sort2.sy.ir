internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
^entry:
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %47 with i32 0;
    i1 %48 = scmp eq i32 %bitround, i32 -1;
    i32 %49 = add i32 %l, i32 1;
    i1 %50 = scmp ge i32 %49, i32 %r;
    i1 %51 = or i1 %50, i1 %48;
    cbr i1 %51(prob = 0.75), ^if.then, ^b;
^b:
    i1 %52 = scmp gt i32 %bitround, i32 0;
    i32 %53 = add i32 %bitround, i32 -1;
    i1 %54 = scmp lt i32 %l, i32 %r;
    cbr i1 %54(prob = 0.97), ^while.body, ^b1;
^if.then:
    ret;
^b1:
    store i32* %0 with i32 %l;
    i32 %55 = load i32* %32;
    i32 %56 = add i32 %55, i32 %l;
    store i32* %16 with i32 %56;
    i32 %57 = load i32* %16;
    store i32* %1 with i32 %57;
    i32 %58 = load i32* %33;
    i32 %59 = add i32 %57, i32 %58;
    store i32* %17 with i32 %59;
    store i32* %2 with i32 %59;
    i32 %60 = load i32* %34;
    i32 %61 = add i32 %60, i32 %57;
    i32 %62 = add i32 %61, i32 %58;
    store i32* %18 with i32 %62;
    store i32* %3 with i32 %62;
    i32 %63 = load i32* %35;
    i32 %64 = add i32 %60, i32 %63;
    i32 %65 = add i32 %64, i32 %57;
    i32 %66 = add i32 %65, i32 %58;
    store i32* %19 with i32 %66;
    store i32* %4 with i32 %66;
    i32 %67 = load i32* %36;
    i32 %68 = add i32 %64, i32 %67;
    i32 %69 = add i32 %68, i32 %57;
    i32 %70 = add i32 %69, i32 %58;
    store i32* %20 with i32 %70;
    store i32* %5 with i32 %70;
    i32 %71 = load i32* %37;
    i32 %72 = add i32 %68, i32 %71;
    i32 %73 = add i32 %72, i32 %57;
    i32 %74 = add i32 %73, i32 %58;
    store i32* %21 with i32 %74;
    store i32* %6 with i32 %74;
    i32 %75 = load i32* %38;
    i32 %76 = add i32 %72, i32 %75;
    i32 %77 = add i32 %76, i32 %57;
    i32 %78 = add i32 %77, i32 %58;
    store i32* %22 with i32 %78;
    store i32* %7 with i32 %78;
    i32 %79 = load i32* %39;
    i32 %80 = add i32 %76, i32 %79;
    i32 %81 = add i32 %80, i32 %57;
    i32 %82 = add i32 %81, i32 %58;
    store i32* %23 with i32 %82;
    store i32* %8 with i32 %82;
    i32 %83 = load i32* %40;
    i32 %84 = add i32 %80, i32 %83;
    i32 %85 = add i32 %84, i32 %57;
    i32 %86 = add i32 %85, i32 %58;
    store i32* %24 with i32 %86;
    store i32* %9 with i32 %86;
    i32 %87 = load i32* %41;
    i32 %88 = add i32 %84, i32 %87;
    i32 %89 = add i32 %88, i32 %57;
    i32 %90 = add i32 %89, i32 %58;
    store i32* %25 with i32 %90;
    store i32* %10 with i32 %90;
    i32 %91 = load i32* %42;
    i32 %92 = add i32 %88, i32 %91;
    i32 %93 = add i32 %92, i32 %57;
    i32 %94 = add i32 %93, i32 %58;
    store i32* %26 with i32 %94;
    store i32* %11 with i32 %94;
    i32 %95 = load i32* %43;
    i32 %96 = add i32 %92, i32 %95;
    i32 %97 = add i32 %96, i32 %57;
    i32 %98 = add i32 %97, i32 %58;
    store i32* %27 with i32 %98;
    store i32* %12 with i32 %98;
    i32 %99 = load i32* %44;
    i32 %100 = add i32 %96, i32 %99;
    i32 %101 = add i32 %100, i32 %57;
    i32 %102 = add i32 %101, i32 %58;
    store i32* %28 with i32 %102;
    store i32* %13 with i32 %102;
    i32 %103 = load i32* %45;
    i32 %104 = add i32 %100, i32 %103;
    i32 %105 = add i32 %104, i32 %57;
    i32 %106 = add i32 %105, i32 %58;
    store i32* %29 with i32 %106;
    store i32* %14 with i32 %106;
    i32 %107 = load i32* %46;
    i32 %108 = add i32 %104, i32 %107;
    i32 %109 = add i32 %108, i32 %57;
    i32 %110 = add i32 %109, i32 %58;
    store i32* %30 with i32 %110;
    store i32* %15 with i32 %110;
    i32 %111 = load i32* %47;
    i32 %112 = add i32 %110, i32 %111;
    store i32* %31 with i32 %112;
    ubr ^while.guard;
^while.body:
    i32 %113 = phi [^b, i32 %l] [^b2, i32 %132];
    i32* %114 = getelementptr &(i32* %a)[i32 %113];
    i32 %115 = load i32* %114;
    cbr i1 %52(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %116 = phi [^while.body, i32 %115] [^while.body1, i32 %118];
    i32 %117 = phi [^while.body, i32 0] [^while.body1, i32 %119];
    i32 %118 = sdiv i32 %116, i32 16;
    i32 %119 = add i32 %117, i32 1;
    i1 %120 = scmp lt i32 %119, i32 %bitround;
    cbr i1 %120(prob = 0.97), ^while.body1, ^b2;
^while.guard:
    i32 %121 = phi [^b1, i32 0] [^b3, i32 %137];
    i32* %122 = getelementptr &([16 * i32]* %head)[i64 0][i32 %121];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %121];
    i32 %125 = load i32* %124;
    i1 %126 = scmp lt i32 %123, i32 %125;
    cbr i1 %126(prob = 0.97), ^while.body2, ^b3;
^b2:
    i32 %127 = phi [^while.body, i32 %115] [^while.body1, i32 %118];
    i32 %128 = srem i32 %127, i32 16;
    i32* %129 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32 %131 = add i32 %130, i32 1;
    store i32* %129 with i32 %131;
    i32 %132 = add i32 %113, i32 1;
    i1 %133 = scmp lt i32 %132, i32 %r;
    cbr i1 %133(prob = 0.97), ^while.body, ^b1;
^while.body2:
    i32 %134 = phi [^while.guard, i32 %123] [^indirect, i32 %167];
    i32* %135 = getelementptr &(i32* %a)[i32 %134];
    i32 %136 = load i32* %135;
    cbr i1 %52(prob = 0.97), ^while.body3, ^b5;
^b3:
    i32 %137 = add i32 %121, i32 1;
    i1 %138 = scmp lt i32 %137, i32 16;
    cbr i1 %138(prob = 0.94), ^while.guard, ^b4;
^b4:
    store i32* %0 with i32 %l;
    i32 %139 = load i32* %32;
    i32 %140 = add i32 %139, i32 %l;
    store i32* %16 with i32 %140;
    ubr ^while.body5;
^while.body3:
    i32 %141 = phi [^while.body2, i32 %136] [^while.body3, i32 %143];
    i32 %142 = phi [^while.body2, i32 0] [^while.body3, i32 %144];
    i32 %143 = sdiv i32 %141, i32 16;
    i32 %144 = add i32 %142, i32 1;
    i1 %145 = scmp lt i32 %144, i32 %bitround;
    cbr i1 %145(prob = 0.97), ^while.body3, ^b5;
^b5:
    i32 %146 = phi [^while.body2, i32 %136] [^while.body3, i32 %143];
    i32 %147 = srem i32 %146, i32 16;
    i1 %148 = scmp neq i32 %147, i32 %121;
    cbr i1 %148(prob = 0.97), ^while.body4, ^b6;
^while.body4:
    i32 %149 = phi [^b5, i32 %136] [^b9, i32 %178];
    cbr i1 %52(prob = 0.97), ^while.body6, ^b7;
^while.body5:
    i32 %150 = phi [^b4, i32 0] [^b8, i32 %184];
    i1 %151 = scmp gt i32 %150, i32 0;
    cbr i1 %151(prob = 0.5), ^if.then1, ^b8;
^b6:
    i32 %152 = phi [^b5, i32 %136] [^b9, i32 %178];
    i32 %153 = load i32* %122;
    i32* %154 = getelementptr &(i32* %a)[i32 %153];
    store i32* %154 with i32 %152;
    i32 %155 = load i32* %122;
    i32 %156 = add i32 %155, i32 1;
    store i32* %122 with i32 %156;
    i32 %157 = load i32* %124;
    i1 %158 = scmp lt i32 %156, i32 %157;
    cbr i1 %158(prob = 0.97), ^indirect, ^b3;
^if.then1:
    i32* %159 = getelementptr &([16 * i32]* %head)[i64 0][i32 %150];
    i32 %160 = add i32 %150, i32 -1;
    i32* %161 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %160];
    i32 %162 = load i32* %161;
    store i32* %159 with i32 %162;
    i32* %163 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %150];
    i32* %164 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %150];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %162, i32 %165;
    store i32* %163 with i32 %166;
    ubr ^b8;
^indirect:
    i32 %167 = load i32* %122;
    ubr ^while.body2;
^while.body6:
    i32 %168 = phi [^while.body4, i32 %149] [^while.body6, i32 %170];
    i32 %169 = phi [^while.body4, i32 0] [^while.body6, i32 %171];
    i32 %170 = sdiv i32 %168, i32 16;
    i32 %171 = add i32 %169, i32 1;
    i1 %172 = scmp lt i32 %171, i32 %bitround;
    cbr i1 %172(prob = 0.97), ^while.body6, ^b7;
^b7:
    i32 %173 = phi [^while.body4, i32 %149] [^while.body6, i32 %170];
    i32 %174 = srem i32 %173, i32 16;
    i32* %175 = getelementptr &([16 * i32]* %head)[i64 0][i32 %174];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %a)[i32 %176];
    i32 %178 = load i32* %177;
    store i32* %177 with i32 %149;
    i32 %179 = add i32 %176, i32 1;
    store i32* %175 with i32 %179;
    cbr i1 %52(prob = 0.97), ^while.body7, ^b9;
^b8:
    i32* %180 = getelementptr &([16 * i32]* %head)[i64 0][i32 %150];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %150];
    i32 %183 = load i32* %182;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %53, i32* %a, i32 %181, i32 %183);
    i32 %184 = add i32 %150, i32 1;
    i1 %185 = scmp lt i32 %184, i32 16;
    cbr i1 %185(prob = 0.94), ^while.body5, ^if.then;
^while.body7:
    i32 %186 = phi [^b7, i32 %178] [^while.body7, i32 %188];
    i32 %187 = phi [^b7, i32 0] [^while.body7, i32 %189];
    i32 %188 = sdiv i32 %186, i32 16;
    i32 %189 = add i32 %187, i32 1;
    i1 %190 = scmp lt i32 %189, i32 %bitround;
    cbr i1 %190(prob = 0.97), ^while.body7, ^b9;
^b9:
    i32 %191 = phi [^b7, i32 %178] [^while.body7, i32 %188];
    i32 %192 = srem i32 %191, i32 16;
    i1 %193 = scmp neq i32 %192, i32 %121;
    cbr i1 %193(prob = 0.97), ^while.body4, ^b6;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1);
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %11];
    i32 %4 = phi [^entry, i32 undef] [^while.body, i32 %10];
    i32* %5 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %3, i32 2;
    i32 %8 = srem i32 %6, i32 %7;
    i32 %9 = mul i32 %3, i32 %8;
    i32 %10 = add i32 %4, i32 %9;
    i32 %11 = add i32 %3, i32 1;
    i1 %12 = scmp lt i32 %11, i32 %1;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^b:
    i32 %13 = phi [^entry, i32 undef] [^while.body, i32 %10];
    i1 %14 = scmp lt i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %15 = neg i32 %13;
    ubr ^b1;
^b1:
    i32 %16 = phi [^b, i32 %13] [^if.then, i32 %15];
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
