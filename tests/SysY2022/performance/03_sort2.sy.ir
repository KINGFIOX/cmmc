internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32], align 8;
    [16 * i32]* %tail = alloc [16 * i32], align 8;
    [16 * i32]* %head = alloc [16 * i32], align 8;
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^while.header;
  ^while.header:
    i32 %52 = add i32 %bitround, i32 -21844;
    i1 %53 = icmp sgt i32 %52, i32 262144;
    i32 %54 = add i32 %bitround, i32 -5460;
    i1 %55 = icmp sgt i32 %54, i32 16384;
    i32 %56 = add i32 %bitround, i32 -1364;
    i1 %57 = icmp sgt i32 %56, i32 4096;
    i32 %58 = add i32 %bitround, i32 -340;
    i1 %59 = icmp sgt i32 %58, i32 1024;
    i32 %60 = add i32 %bitround, i32 -84;
    i1 %61 = icmp sgt i32 %60, i32 256;
    i32 %62 = add i32 %bitround, i32 -20;
    i1 %63 = icmp sgt i32 %62, i32 64;
    i32 %64 = add i32 %bitround, i32 -4;
    i1 %65 = icmp sgt i32 %64, i32 16;
    i1 %66 = icmp slt i32 %l, i32 %r;
    i1 %67 = icmp sgt i32 %bitround, i32 4;
    i1 %68 = icmp sgt i32 %bitround, i32 0;
    i32 %69 = add i32 %bitround, i32 -1;
    cbr i1 %66(prob = 0.97), ^while.body, ^b;
  ^if.then:
    ret;
  ^b:
    store i32* %4 with i32 %l;
    i32 %70 = load i32* %36;
    i32 %71 = add i32 %l, i32 %70;
    store i32* %20 with i32 %71;
    store i32* %5 with i32 %71;
    i32 %72 = load i32* %37;
    i32 %73 = add i32 %71, i32 %72;
    store i32* %21 with i32 %73;
    store i32* %6 with i32 %73;
    i32 %74 = load i32* %38;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %22 with i32 %75;
    store i32* %7 with i32 %75;
    i32 %76 = load i32* %39;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %23 with i32 %77;
    store i32* %8 with i32 %77;
    i32 %78 = load i32* %40;
    i32 %79 = add i32 %77, i32 %78;
    store i32* %24 with i32 %79;
    store i32* %9 with i32 %79;
    i32 %80 = load i32* %41;
    i32 %81 = add i32 %79, i32 %80;
    store i32* %25 with i32 %81;
    store i32* %10 with i32 %81;
    i32 %82 = load i32* %42;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %26 with i32 %83;
    store i32* %11 with i32 %83;
    i32 %84 = load i32* %43;
    i32 %85 = add i32 %83, i32 %84;
    store i32* %27 with i32 %85;
    store i32* %12 with i32 %85;
    i32 %86 = load i32* %44;
    i32 %87 = add i32 %85, i32 %86;
    store i32* %28 with i32 %87;
    store i32* %13 with i32 %87;
    i32 %88 = load i32* %45;
    i32 %89 = add i32 %87, i32 %88;
    store i32* %29 with i32 %89;
    store i32* %14 with i32 %89;
    i32 %90 = load i32* %46;
    i32 %91 = add i32 %89, i32 %90;
    store i32* %30 with i32 %91;
    store i32* %15 with i32 %91;
    i32 %92 = load i32* %47;
    i32 %93 = add i32 %91, i32 %92;
    store i32* %31 with i32 %93;
    store i32* %16 with i32 %93;
    i32 %94 = load i32* %48;
    i32 %95 = add i32 %93, i32 %94;
    store i32* %32 with i32 %95;
    store i32* %17 with i32 %95;
    i32 %96 = load i32* %49;
    i32 %97 = add i32 %95, i32 %96;
    store i32* %33 with i32 %97;
    store i32* %18 with i32 %97;
    i32 %98 = load i32* %50;
    i32 %99 = add i32 %97, i32 %98;
    store i32* %34 with i32 %99;
    store i32* %19 with i32 %99;
    i32 %100 = load i32* %51;
    i32 %101 = add i32 %99, i32 %100;
    store i32* %35 with i32 %101;
    ubr ^while.header1;
  ^while.body:
    i32 %102 = phi [^while.header, i32 %l] [^b1, i32 %112];
    i32* %103 = getelementptr &(i32* %a)[i32 %102];
    i32 %104 = load i32* %103;
    cbr i1 %68(prob = 0.97), ^super.header, ^b1;
  ^super.header:
    cbr i1 %67(prob = 0.89), ^super.header1, ^while.body1;
  ^while.header1:
    i32 %105 = phi [^b, i32 0] [^b3, i32 %137];
    i1 %106 = icmp slt i32 %105, i32 16;
    cbr i1 %106(prob = 0.97), ^indirect, ^b2;
  ^b1:
    i32 %107 = phi [^while.body, i32 %104] [^while.body1, i32 %123];
    i32 %108 = and i32 %107, i32 15;
    i32* %109 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %110, i32 1;
    store i32* %109 with i32 %111;
    i32 %112 = add i32 %102, i32 1;
    i1 %113 = icmp sgt i32 %r, i32 %112;
    cbr i1 %113(prob = 0.97), ^while.body, ^b;
  ^indirect:
    i32* %114 = getelementptr &([16 * i32]* %head)[i64 0][i32 %105];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %105];
    ubr ^while.header2;
  ^b2:
    store i32* %4 with i32 %l;
    i32 %117 = load i32* %36;
    i32 %118 = add i32 %l, i32 %117;
    store i32* %20 with i32 %118;
    ubr ^while.header3;
  ^super.header1:
    cbr i1 %65(prob = 0.89), ^super.header2, ^while.body2;
  ^while.body1 {scalar}:
    i32 %119 = phi [^super.header, i32 0] [^while.body1, i32 %121] [^while.body2, i32 %129];
    i32 %120 = phi [^super.header, i32 %104] [^while.body1, i32 %123] [^while.body2, i32 %131];
    i32 %121 = add i32 %119, i32 1;
    i1 %122 = icmp sgt i32 %bitround, i32 %121;
    i32 %123 = sdiv i32 %120, i32 16;
    cbr i1 %122(prob = 0.75), ^while.body1, ^b1;
  ^super.header2:
    cbr i1 %63(prob = 0.89), ^super.header3, ^while.body4;
  ^while.header2:
    i32 %124 = phi [^indirect, i32 %115] [^b6, i32 %175];
    i32 %125 = load i32* %116;
    i1 %126 = icmp slt i32 %124, i32 %125;
    cbr i1 %126(prob = 0.97), ^while.body3, ^b3;
  ^while.body2 {scalar}:
    i32 %127 = phi [^super.header1, i32 %104] [^while.body2, i32 %131] [^while.body4, i32 0];
    i32 %128 = phi [^super.header1, i32 0] [^while.body2, i32 %129] [^while.body4, i32 %139];
    i32 %129 = add i32 %128, i32 4;
    i1 %130 = icmp sgt i32 %64, i32 %129;
    i32 %131 = sdiv i32 %127, i32 65536;
    cbr i1 %130(prob = 0.75), ^while.body2, ^while.body1;
  ^while.header3:
    i32 %132 = phi [^b2, i32 0] [^b4, i32 %158];
    i1 %133 = icmp slt i32 %132, i32 16;
    cbr i1 %133(prob = 0.97), ^while.body5, ^if.then;
  ^while.body3:
    i32 %134 = load i32* %114;
    i32* %135 = getelementptr &(i32* %a)[i32 %134];
    i32 %136 = load i32* %135;
    ubr ^while.header4;
  ^b3:
    i32 %137 = add i32 %105, i32 1;
    ubr ^while.header1;
  ^super.header3:
    cbr i1 %61(prob = 0.89), ^super.header4, ^while.body6;
  ^while.body4 {scalar}:
    i32 %138 = phi [^super.header2, i32 0] [^while.body4, i32 %139] [^while.body6, i32 %154];
    i32 %139 = add i32 %138, i32 16;
    i1 %140 = icmp sgt i32 %62, i32 %139;
    cbr i1 %140(prob = 0.75), ^while.body4, ^while.body2;
  ^while.body5:
    i32* %141 = getelementptr &([16 * i32]* %head)[i64 0][i32 %132];
    i32* %142 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %132];
    i1 %143 = icmp sgt i32 %132, i32 0;
    cbr i1 %143(prob = 0.5), ^if.then1, ^indirect1;
  ^if.then1:
    i32 %144 = add i32 %132, i32 -1;
    i32* %145 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %144];
    i32 %146 = load i32* %145;
    store i32* %141 with i32 %146;
    i32* %147 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %132];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %146, i32 %148;
    store i32* %142 with i32 %149;
    ubr ^b4;
  ^super.header4:
    cbr i1 %59(prob = 0.89), ^super.header5, ^while.body7;
  ^while.header4:
    i32 %150 = phi [^while.body3, i32 %136] [^while.body8, i32 %168];
    cbr i1 %68(prob = 0.97), ^super.header6, ^b5;
  ^indirect1:
    i32 %151 = load i32* %141;
    i32 %152 = load i32* %142;
    ubr ^b4;
  ^while.body6 {scalar}:
    i32 %153 = phi [^super.header3, i32 0] [^while.body6, i32 %154] [^while.body7, i32 %160];
    i32 %154 = add i32 %153, i32 64;
    i1 %155 = icmp sgt i32 %60, i32 %154;
    cbr i1 %155(prob = 0.75), ^while.body6, ^while.body4;
  ^b4:
    i32 %156 = phi [^if.then1, i32 %146] [^indirect1, i32 %151];
    i32 %157 = phi [^if.then1, i32 %149] [^indirect1, i32 %152];
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %69, i32* %a, i32 %156, i32 %157);
    i32 %158 = add i32 %132, i32 1;
    ubr ^while.header3;
  ^super.header5:
    cbr i1 %57(prob = 0.89), ^super.header7, ^while.body9;
  ^while.body7 {scalar}:
    i32 %159 = phi [^super.header4, i32 0] [^while.body7, i32 %160] [^while.body9, i32 %171];
    i32 %160 = add i32 %159, i32 256;
    i1 %161 = icmp sgt i32 %58, i32 %160;
    cbr i1 %161(prob = 0.75), ^while.body7, ^while.body6;
  ^super.header6:
    cbr i1 %67(prob = 0.89), ^super.header8, ^while.body10;
  ^b5:
    i32 %162 = phi [^while.header4, i32 %150] [^while.body10, i32 %180];
    i32 %163 = srem i32 %162, i32 16;
    i1 %164 = icmp neq i32 %105, i32 %163;
    cbr i1 %164(prob = 0.97), ^while.body8, ^b6;
  ^super.header7:
    cbr i1 %55(prob = 0.89), ^super.header9, ^while.body11;
  ^while.body8:
    i32* %165 = getelementptr &([16 * i32]* %head)[i64 0][i32 %163];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %a)[i32 %166];
    i32 %168 = load i32* %167;
    store i32* %167 with i32 %150;
    i32 %169 = add i32 %166, i32 1;
    store i32* %165 with i32 %169;
    ubr ^while.header4;
  ^while.body9 {scalar}:
    i32 %170 = phi [^super.header5, i32 0] [^while.body9, i32 %171] [^while.body11, i32 %182];
    i32 %171 = add i32 %170, i32 1024;
    i1 %172 = icmp sgt i32 %56, i32 %171;
    cbr i1 %172(prob = 0.75), ^while.body9, ^while.body7;
  ^super.header8:
    cbr i1 %65(prob = 0.89), ^super.header10, ^while.body12;
  ^b6:
    i32 %173 = load i32* %114;
    i32* %174 = getelementptr &(i32* %a)[i32 %173];
    store i32* %174 with i32 %150;
    i32 %175 = add i32 %173, i32 1;
    store i32* %114 with i32 %175;
    ubr ^while.header2;
  ^while.body10 {scalar}:
    i32 %176 = phi [^super.header6, i32 0] [^while.body10, i32 %178] [^while.body12, i32 %186];
    i32 %177 = phi [^super.header6, i32 %150] [^while.body10, i32 %180] [^while.body12, i32 %188];
    i32 %178 = add i32 %176, i32 1;
    i1 %179 = icmp sgt i32 %bitround, i32 %178;
    i32 %180 = sdiv i32 %177, i32 16;
    cbr i1 %179(prob = 0.75), ^while.body10, ^b5;
  ^super.header9:
    cbr i1 %53(prob = 0.89), ^super.header11, ^super.header12;
  ^while.body11 {scalar}:
    i32 %181 = phi [^super.header7, i32 0] [^while.body11, i32 %182] [^while.body14, i32 %200];
    i32 %182 = add i32 %181, i32 4096;
    i1 %183 = icmp sgt i32 %54, i32 %182;
    cbr i1 %183(prob = 0.75), ^while.body11, ^while.body9;
  ^super.header10:
    cbr i1 %63(prob = 0.89), ^super.header13, ^while.body13;
  ^while.body12 {scalar}:
    i32 %184 = phi [^super.header8, i32 %150] [^while.body12, i32 %188] [^while.body13, i32 0];
    i32 %185 = phi [^super.header8, i32 0] [^while.body12, i32 %186] [^while.body13, i32 %197];
    i32 %186 = add i32 %185, i32 4;
    i1 %187 = icmp sgt i32 %64, i32 %186;
    i32 %188 = sdiv i32 %184, i32 65536;
    cbr i1 %187(prob = 0.75), ^while.body12, ^while.body10;
  ^super.header11:
    i32 %189 = phi [^super.header9, i32 0] [^super.header11, i32 %192];
    i32 %190 = add i32 %189, i32 524288;
    i1 %191 = icmp sgt i32 %52, i32 %190;
    i32 %192 = add i32 %189, i32 262144;
    cbr i1 %191(prob = 0.89), ^super.header11, ^super.header12;
  ^super.header12 {scalar}:
    i32 %193 = phi [^super.header9, i32 0] [^super.header11, i32 %192] [^super.header12, i32 %194];
    i32 %194 = add i32 %193, i32 65536;
    i1 %195 = icmp sgt i32 %52, i32 %194;
    cbr i1 %195(prob = 0.75), ^super.header12, ^while.body14;
  ^super.header13:
    cbr i1 %61(prob = 0.89), ^super.header14, ^while.body15;
  ^while.body13 {scalar}:
    i32 %196 = phi [^super.header10, i32 0] [^while.body13, i32 %197] [^while.body15, i32 %203];
    i32 %197 = add i32 %196, i32 16;
    i1 %198 = icmp sgt i32 %62, i32 %197;
    cbr i1 %198(prob = 0.75), ^while.body13, ^while.body12;
  ^super.header14:
    cbr i1 %59(prob = 0.89), ^super.header15, ^while.body16;
  ^while.body14 {scalar}:
    i32 %199 = phi [^super.header12, i32 %193] [^while.body14, i32 %200];
    i32 %200 = add i32 %199, i32 16384;
    i1 %201 = icmp sgt i32 %52, i32 %200;
    cbr i1 %201(prob = 0.75), ^while.body14, ^while.body11;
  ^while.body15 {scalar}:
    i32 %202 = phi [^super.header13, i32 0] [^while.body15, i32 %203] [^while.body16, i32 %206];
    i32 %203 = add i32 %202, i32 64;
    i1 %204 = icmp sgt i32 %60, i32 %203;
    cbr i1 %204(prob = 0.75), ^while.body15, ^while.body13;
  ^super.header15:
    cbr i1 %57(prob = 0.89), ^super.header16, ^while.body17;
  ^while.body16 {scalar}:
    i32 %205 = phi [^super.header14, i32 0] [^while.body16, i32 %206] [^while.body17, i32 %209];
    i32 %206 = add i32 %205, i32 256;
    i1 %207 = icmp sgt i32 %58, i32 %206;
    cbr i1 %207(prob = 0.75), ^while.body16, ^while.body15;
  ^super.header16:
    cbr i1 %55(prob = 0.89), ^super.header17, ^while.body18;
  ^while.body17 {scalar}:
    i32 %208 = phi [^super.header15, i32 0] [^while.body17, i32 %209] [^while.body18, i32 %212];
    i32 %209 = add i32 %208, i32 1024;
    i1 %210 = icmp sgt i32 %56, i32 %209;
    cbr i1 %210(prob = 0.75), ^while.body17, ^while.body16;
  ^super.header17:
    cbr i1 %53(prob = 0.89), ^super.header18, ^super.header19;
  ^while.body18 {scalar}:
    i32 %211 = phi [^super.header16, i32 0] [^while.body18, i32 %212] [^while.body19, i32 %222];
    i32 %212 = add i32 %211, i32 4096;
    i1 %213 = icmp sgt i32 %54, i32 %212;
    cbr i1 %213(prob = 0.75), ^while.body18, ^while.body17;
  ^super.header18:
    i32 %214 = phi [^super.header17, i32 0] [^super.header18, i32 %217];
    i32 %215 = add i32 %214, i32 524288;
    i1 %216 = icmp sgt i32 %52, i32 %215;
    i32 %217 = add i32 %214, i32 262144;
    cbr i1 %216(prob = 0.89), ^super.header18, ^super.header19;
  ^super.header19 {scalar}:
    i32 %218 = phi [^super.header17, i32 0] [^super.header18, i32 %217] [^super.header19, i32 %219];
    i32 %219 = add i32 %218, i32 65536;
    i1 %220 = icmp sgt i32 %52, i32 %219;
    cbr i1 %220(prob = 0.75), ^super.header19, ^while.body19;
  ^while.body19 {scalar}:
    i32 %221 = phi [^super.header19, i32 %218] [^while.body19, i32 %222];
    i32 %222 = add i32 %221, i32 16384;
    i1 %223 = icmp sgt i32 %52, i32 %222;
    cbr i1 %223(prob = 0.75), ^while.body19, ^while.body18;
}
internal [30000010 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %4 = add i32 %2, i32 -4;
    i1 %5 = icmp sgt i32 %2, i32 4;
    cbr i1 %5(prob = 0.89), ^while.body, ^while.body1;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^while.body1, i32 %43];
    call (i32) -> void @stoptime(i32 102);
    i32 %7 = abs i32 %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32 %8 = phi [^prebody, i32 0] [^while.body, i32 %24];
    i32 %9 = phi [^prebody, i32 0] [^while.body, i32 %34];
    i32* %10 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %8];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(i32* %10)[i64 1];
    i32 %13 = load i32* %12;
    i32 %14 = add i32 %8, i32 3;
    i32 %15 = srem i32 %13, i32 %14;
    i32 %16 = add i32 %8, i32 1;
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = add i32 %8, i32 2;
    i32 %19 = srem i32 %11, i32 %18;
    i32 %20 = mul i32 %8, i32 %19;
    i32 %21 = add i32 %17, i32 %20;
    i32* %22 = getelementptr &(i32* %10)[i64 2];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %8, i32 4;
    i32 %25 = srem i32 %23, i32 %24;
    i32 %26 = mul i32 %18, i32 %25;
    i32 %27 = add i32 %21, i32 %26;
    i32* %28 = getelementptr &(i32* %10)[i64 3];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %8, i32 5;
    i32 %31 = srem i32 %29, i32 %30;
    i32 %32 = mul i32 %14, i32 %31;
    i32 %33 = add i32 %27, i32 %32;
    i32 %34 = add i32 %9, i32 %33;
    i1 %35 = icmp sgt i32 %4, i32 %24;
    cbr i1 %35(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1 {scalar}:
    i32 %36 = phi [^prebody, i32 0] [^while.body, i32 %34] [^while.body1, i32 %43];
    i32 %37 = phi [^prebody, i32 0] [^while.body, i32 %24] [^while.body1, i32 %44];
    i32* %38 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 2;
    i32 %41 = srem i32 %39, i32 %40;
    i32 %42 = mul i32 %37, i32 %41;
    i32 %43 = add i32 %36, i32 %42;
    i32 %44 = add i32 %37, i32 1;
    i1 %45 = icmp sgt i32 %2, i32 %44;
    cbr i1 %45(prob = 0.75), ^while.body1, ^b;
}
