internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %k1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %3 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %9] [^entry, i32 %0];
    i32 %5 = phi [^b, i32 %22] [^entry, i32 0];
    i32 %6 = phi [^b, i32 %9] [^entry, i32 %0];
    i32 %7 = phi [^b, i32 %22] [^entry, i32 0];
    i1 %8 = scmp lt i32 %7, i32 %6;
    cbr i1 %8(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %9 = phi [^while.header, i32 %4] [^while.body, i32 %9];
    i32 %10 = phi [^while.header, i32 %5] [^while.body, i32 %10];
    i32 %11 = phi [^while.header, i32 0] [^while.body, i32 %21];
    i32 %12 = phi [^while.header, i32 0] [^while.body, i32 %21];
    i1 %13 = scmp lt i32 %12, i32 %9;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %14 = phi [^while.header, i32 %4] [^b2, i32 %23];
    i32 %15 = phi [^while.header, i32 0] [^b2, i32 %32];
    i32 %16 = phi [^while.header, i32 0] [^b2, i32 %32];
    i1 %17 = scmp lt i32 %16, i32 %14;
    cbr i1 %17(prob = 0.97), ^while.header3, ^b1;
^while.body:
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %10];
    i32* %19 = getelementptr &([1024 * i32]* %18)[i64 0][i32 %11];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    i32 %21 = add i32 %11, i32 1;
    ubr ^while.header1;
^b:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @starttime(i32 65);
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %23 = phi [^while.header2, i32 %14] [^while.body1, i32 %23];
    i32 %24 = phi [^while.header2, i32 %15] [^while.body1, i32 %24];
    i32 %25 = phi [^while.header2, i32 0] [^while.body1, i32 %31];
    i32 %26 = phi [^while.header2, i32 0] [^while.body1, i32 %31];
    i1 %27 = scmp lt i32 %26, i32 %23;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    [1024 * i32]* %28 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %24];
    i32* %29 = getelementptr &([1024 * i32]* %28)[i64 0][i32 %25];
    i32 %30 = call () -> i32 @getint();
    store i32* %29 with i32 %30;
    i32 %31 = add i32 %25, i32 1;
    ubr ^while.header3;
^b2:
    i32 %32 = add i32 %24, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %33 = phi [^while.body12, i32 %136] [^b1, i32 %14];
    i32 %34 = phi [^while.body12, i32 %165] [^b1, i32 0];
    i32 %35 = phi [^while.body12, i32 %165] [^b1, i32 0];
    i1 %36 = scmp lt i32 %35, i32 5;
    cbr i1 %36(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    store i32* %n1 with i32 %33;
    store i32* %k1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %37 = phi [^while.header4, i32 %33] [^b5, i32 %52];
    i32 %38 = phi [^while.header4, i32 0] [^b5, i32 %63];
    i32 %39 = phi [^while.header4, i32 0] [^b5, i32 %55];
    i32 %40 = phi [^while.header4, i32 0] [^b5, i32 %63];
    i1 %41 = scmp lt i32 %40, i32 %37;
    cbr i1 %41(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %42 = phi [^b6, i32 %64] [^while.body2, i32 %33];
    i32 %43 = phi [^b6, i32 %65] [^while.body2, i32 %34];
    i32 %44 = phi [^b6, i32 %91] [^while.body2, i32 0];
    [1024 * i32]* %45 = phi [^b6, [1024 * i32]* %68] [^while.body2, [1024 * i32]* %3];
    [1024 * i32]* %46 = phi [^b6, [1024 * i32]* %69] [^while.body2, [1024 * i32]* %2];
    [1024 * i32]* %47 = phi [^b6, [1024 * i32]* %70] [^while.body2, [1024 * i32]* %1];
    i32 %48 = phi [^b6, i32 %71] [^while.body2, i32 %33];
    i32 %49 = phi [^while.body2, i32 %33] [^b6, i32 %71];
    i32 %50 = phi [^while.body2, i32 0] [^b6, i32 %91];
    i1 %51 = scmp lt i32 %50, i32 %49;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b4;
^while.header7:
    i32 %52 = phi [^while.header5, i32 %37] [^while.body4, i32 %52];
    i32 %53 = phi [^while.header5, i32 %38] [^while.body4, i32 %53];
    i32 %54 = phi [^while.header5, i32 0] [^while.body4, i32 %62];
    i32 %55 = phi [^while.header5, i32 %39] [^while.body4, i32 %61];
    i32 %56 = phi [^while.header5, i32 0] [^while.body4, i32 %62];
    i1 %57 = scmp lt i32 %56, i32 %52;
    cbr i1 %57(prob = 0.97), ^while.body4, ^b5;
^b3:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %39);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body3:
    store i32* %j1 with i32 0;
    ubr ^while.header8;
^b4:
    store i32* %j1 with i32 0;
    store i32* %k1 with i32 0;
    ubr ^while.header9;
^while.body4:
    [1024 * i32]* %58 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %53];
    i32* %59 = getelementptr &([1024 * i32]* %58)[i64 0][i32 %54];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %55, i32 %60;
    i32 %62 = add i32 %54, i32 1;
    ubr ^while.header7;
^b5:
    i32 %63 = add i32 %53, i32 1;
    ubr ^while.header5;
^while.header8:
    i32 %64 = phi [^while.body5, i32 %85] [^while.body3, i32 %42];
    i32 %65 = phi [^while.body5, i32 %86] [^while.body3, i32 %43];
    i32 %66 = phi [^while.body5, i32 %90] [^while.body3, i32 0];
    i32 %67 = phi [^while.body5, i32 %88] [^while.body3, i32 %44];
    [1024 * i32]* %68 = phi [^while.body5, [1024 * i32]* %68] [^while.body3, [1024 * i32]* %45];
    [1024 * i32]* %69 = phi [^while.body5, [1024 * i32]* %69] [^while.body3, [1024 * i32]* %46];
    [1024 * i32]* %70 = phi [^while.body5, [1024 * i32]* %70] [^while.body3, [1024 * i32]* %47];
    i32 %71 = phi [^while.body5, i32 %89] [^while.body3, i32 %48];
    i32 %72 = phi [^while.body5, i32 %90] [^while.body3, i32 0];
    i1 %73 = scmp lt i32 %72, i32 %71;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b6;
^while.header9:
    i32 %74 = phi [^b7, i32 %92] [^b4, i32 %42];
    i32 %75 = phi [^b7, i32 %93] [^b4, i32 %43];
    i32 %76 = phi [^b7, i32 %112] [^b4, i32 0];
    [1024 * i32]* %77 = phi [^b7, [1024 * i32]* %96] [^b4, [1024 * i32]* %45];
    [1024 * i32]* %78 = phi [^b7, [1024 * i32]* %97] [^b4, [1024 * i32]* %46];
    [1024 * i32]* %79 = phi [^b7, [1024 * i32]* %98] [^b4, [1024 * i32]* %47];
    i32 %80 = phi [^b7, i32 %99] [^b4, i32 %48];
    i32 %81 = phi [^b7, i32 %112] [^b4, i32 0];
    i1 %82 = scmp lt i32 %81, i32 %80;
    cbr i1 %82(prob = 0.97), ^while.body6, ^while.body7;
^while.body5:
    [1024 * i32]* %83 = getelementptr &([1024 * i32]* %68)[i32 %67];
    i32* %84 = getelementptr &([1024 * i32]* %83)[i64 0][i32 %66];
    store i32* %84 with i32 0;
    i32 %85 = load i32* %n2;
    i32 %86 = load i32* %i2;
    i32 %87 = load i32* %j1;
    i32 %88 = load i32* %i1;
    i32 %89 = load i32* %n1;
    i32 %90 = add i32 %87, i32 1;
    store i32* %j1 with i32 %90;
    ubr ^while.header8;
^b6:
    i32 %91 = add i32 %67, i32 1;
    store i32* %i1 with i32 %91;
    ubr ^while.header6;
^while.body6:
    store i32* %i1 with i32 0;
    ubr ^while.header10;
^while.body7:
    store i32* %n with i32 %74;
    store i32* %k with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %92 = phi [^if.then, i32 %117] [^while.body6, i32 %74];
    i32 %93 = phi [^if.then, i32 %118] [^while.body6, i32 %75];
    i32 %94 = phi [^if.then, i32 %119] [^while.body6, i32 %76];
    i32 %95 = phi [^if.then, i32 %125] [^while.body6, i32 0];
    [1024 * i32]* %96 = phi [^if.then, [1024 * i32]* %121] [^while.body6, [1024 * i32]* %77];
    [1024 * i32]* %97 = phi [^if.then, [1024 * i32]* %122] [^while.body6, [1024 * i32]* %78];
    [1024 * i32]* %98 = phi [^if.then, [1024 * i32]* %123] [^while.body6, [1024 * i32]* %79];
    i32 %99 = phi [^if.then, i32 %124] [^while.body6, i32 %80];
    i32 %100 = phi [^while.body6, i32 0] [^if.then, i32 %125];
    i1 %101 = scmp lt i32 %100, i32 %99;
    cbr i1 %101(prob = 0.97), ^while.body9, ^b7;
^while.header11:
    i32 %102 = phi [^b10, i32 %126] [^while.body7, i32 %74];
    i32 %103 = phi [^b10, i32 %127] [^while.body7, i32 %75];
    i32 %104 = phi [^b10, i32 %153] [^while.body7, i32 0];
    [1024 * i32]* %105 = phi [^b10, [1024 * i32]* %130] [^while.body7, [1024 * i32]* %2];
    [1024 * i32]* %106 = phi [^b10, [1024 * i32]* %131] [^while.body7, [1024 * i32]* %3];
    [1024 * i32]* %107 = phi [^b10, [1024 * i32]* %132] [^while.body7, [1024 * i32]* %1];
    i32 %108 = phi [^b10, i32 %133] [^while.body7, i32 %74];
    i32 %109 = phi [^while.body7, i32 %74] [^b10, i32 %133];
    i32 %110 = phi [^while.body7, i32 0] [^b10, i32 %153];
    i1 %111 = scmp lt i32 %110, i32 %109;
    cbr i1 %111(prob = 0.97), ^while.body8, ^b8;
^b7:
    i32 %112 = add i32 %94, i32 1;
    store i32* %k1 with i32 %112;
    ubr ^while.header9;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header12;
^while.body9:
    [1024 * i32]* %113 = getelementptr &([1024 * i32]* %98)[i32 %95];
    i32* %114 = getelementptr &([1024 * i32]* %113)[i64 0][i32 %94];
    i32 %115 = load i32* %114;
    i1 %116 = scmp eq i32 %115, i32 0;
    cbr i1 %116(prob = 0.5), ^if.then, ^b9;
^b8:
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header13;
^if.then:
    i32 %117 = phi [^while.header14, i32 %154] [^while.body9, i32 %92];
    i32 %118 = phi [^while.header14, i32 %155] [^while.body9, i32 %93];
    i32 %119 = phi [^while.header14, i32 %156] [^while.body9, i32 %94];
    i32 %120 = phi [^while.header14, i32 %158] [^while.body9, i32 %95];
    [1024 * i32]* %121 = phi [^while.header14, [1024 * i32]* %159] [^while.body9, [1024 * i32]* %96];
    [1024 * i32]* %122 = phi [^while.header14, [1024 * i32]* %160] [^while.body9, [1024 * i32]* %97];
    [1024 * i32]* %123 = phi [^while.header14, [1024 * i32]* %161] [^while.body9, [1024 * i32]* %98];
    i32 %124 = phi [^while.header14, i32 %162] [^while.body9, i32 %99];
    i32 %125 = add i32 %120, i32 1;
    store i32* %i1 with i32 %125;
    ubr ^while.header10;
^b9:
    store i32* %j1 with i32 0;
    ubr ^while.header14;
^while.header12:
    i32 %126 = phi [^while.body10, i32 %147] [^while.body8, i32 %102];
    i32 %127 = phi [^while.body10, i32 %148] [^while.body8, i32 %103];
    i32 %128 = phi [^while.body10, i32 %152] [^while.body8, i32 0];
    i32 %129 = phi [^while.body10, i32 %150] [^while.body8, i32 %104];
    [1024 * i32]* %130 = phi [^while.body10, [1024 * i32]* %130] [^while.body8, [1024 * i32]* %105];
    [1024 * i32]* %131 = phi [^while.body10, [1024 * i32]* %131] [^while.body8, [1024 * i32]* %106];
    [1024 * i32]* %132 = phi [^while.body10, [1024 * i32]* %132] [^while.body8, [1024 * i32]* %107];
    i32 %133 = phi [^while.body10, i32 %151] [^while.body8, i32 %108];
    i32 %134 = phi [^while.body8, i32 0] [^while.body10, i32 %152];
    i1 %135 = scmp lt i32 %134, i32 %133;
    cbr i1 %135(prob = 0.97), ^while.body10, ^b10;
^while.header13:
    i32 %136 = phi [^b11, i32 %184] [^b8, i32 %102];
    i32 %137 = phi [^b11, i32 %185] [^b8, i32 %103];
    i32 %138 = phi [^b11, i32 %194] [^b8, i32 0];
    [1024 * i32]* %139 = phi [^b11, [1024 * i32]* %188] [^b8, [1024 * i32]* %105];
    [1024 * i32]* %140 = phi [^b11, [1024 * i32]* %189] [^b8, [1024 * i32]* %106];
    [1024 * i32]* %141 = phi [^b11, [1024 * i32]* %190] [^b8, [1024 * i32]* %107];
    i32 %142 = phi [^b11, i32 %191] [^b8, i32 %108];
    i32 %143 = phi [^b11, i32 %194] [^b8, i32 0];
    i1 %144 = scmp lt i32 %143, i32 %142;
    cbr i1 %144(prob = 0.97), ^while.body11, ^while.body12;
^while.body10:
    [1024 * i32]* %145 = getelementptr &([1024 * i32]* %130)[i32 %129];
    i32* %146 = getelementptr &([1024 * i32]* %145)[i64 0][i32 %128];
    store i32* %146 with i32 0;
    i32 %147 = load i32* %n2;
    i32 %148 = load i32* %i2;
    i32 %149 = load i32* %j;
    i32 %150 = load i32* %i;
    i32 %151 = load i32* %n;
    i32 %152 = add i32 %149, i32 1;
    store i32* %j with i32 %152;
    ubr ^while.header12;
^b10:
    i32 %153 = add i32 %129, i32 1;
    store i32* %i with i32 %153;
    ubr ^while.header11;
^while.body11:
    store i32* %i with i32 0;
    ubr ^while.header15;
^while.header14:
    i32 %154 = phi [^while.body13, i32 %177] [^b9, i32 %92];
    i32 %155 = phi [^while.body13, i32 %178] [^b9, i32 %93];
    i32 %156 = phi [^while.body13, i32 %179] [^b9, i32 %94];
    i32 %157 = phi [^while.body13, i32 %183] [^b9, i32 0];
    i32 %158 = phi [^while.body13, i32 %181] [^b9, i32 %95];
    [1024 * i32]* %159 = phi [^while.body13, [1024 * i32]* %159] [^b9, [1024 * i32]* %96];
    [1024 * i32]* %160 = phi [^while.body13, [1024 * i32]* %160] [^b9, [1024 * i32]* %97];
    [1024 * i32]* %161 = phi [^while.body13, [1024 * i32]* %161] [^b9, [1024 * i32]* %98];
    i32 %162 = phi [^while.body13, i32 %182] [^b9, i32 %99];
    i32 %163 = phi [^b9, i32 0] [^while.body13, i32 %183];
    i1 %164 = scmp lt i32 %163, i32 %162;
    cbr i1 %164(prob = 0.97), ^while.body13, ^if.then;
^while.body12:
    i32 %165 = add i32 %137, i32 1;
    store i32* %i2 with i32 %165;
    ubr ^while.header4;
^while.body13:
    [1024 * i32]* %166 = getelementptr &([1024 * i32]* %159)[i32 %158];
    i32* %167 = getelementptr &([1024 * i32]* %166)[i64 0][i32 %157];
    i32 %168 = load i32* %167;
    [1024 * i32]* %169 = getelementptr &([1024 * i32]* %161)[i32 %158];
    i32* %170 = getelementptr &([1024 * i32]* %169)[i64 0][i32 %156];
    i32 %171 = load i32* %170;
    [1024 * i32]* %172 = getelementptr &([1024 * i32]* %160)[i32 %156];
    i32* %173 = getelementptr &([1024 * i32]* %172)[i64 0][i32 %157];
    i32 %174 = load i32* %173;
    i32 %175 = mul i32 %171, i32 %174;
    i32 %176 = add i32 %168, i32 %175;
    store i32* %167 with i32 %176;
    i32 %177 = load i32* %n2;
    i32 %178 = load i32* %i2;
    i32 %179 = load i32* %k1;
    i32 %180 = load i32* %j1;
    i32 %181 = load i32* %i1;
    i32 %182 = load i32* %n1;
    i32 %183 = add i32 %180, i32 1;
    store i32* %j1 with i32 %183;
    ubr ^while.header14;
^while.header15:
    i32 %184 = phi [^if.then1, i32 %199] [^while.body11, i32 %136];
    i32 %185 = phi [^if.then1, i32 %200] [^while.body11, i32 %137];
    i32 %186 = phi [^if.then1, i32 %201] [^while.body11, i32 %138];
    i32 %187 = phi [^if.then1, i32 %207] [^while.body11, i32 0];
    [1024 * i32]* %188 = phi [^if.then1, [1024 * i32]* %203] [^while.body11, [1024 * i32]* %139];
    [1024 * i32]* %189 = phi [^if.then1, [1024 * i32]* %204] [^while.body11, [1024 * i32]* %140];
    [1024 * i32]* %190 = phi [^if.then1, [1024 * i32]* %205] [^while.body11, [1024 * i32]* %141];
    i32 %191 = phi [^if.then1, i32 %206] [^while.body11, i32 %142];
    i32 %192 = phi [^while.body11, i32 0] [^if.then1, i32 %207];
    i1 %193 = scmp lt i32 %192, i32 %191;
    cbr i1 %193(prob = 0.97), ^while.body14, ^b11;
^b11:
    i32 %194 = add i32 %186, i32 1;
    store i32* %k with i32 %194;
    ubr ^while.header13;
^while.body14:
    [1024 * i32]* %195 = getelementptr &([1024 * i32]* %190)[i32 %187];
    i32* %196 = getelementptr &([1024 * i32]* %195)[i64 0][i32 %186];
    i32 %197 = load i32* %196;
    i1 %198 = scmp eq i32 %197, i32 0;
    cbr i1 %198(prob = 0.5), ^if.then1, ^b12;
^if.then1:
    i32 %199 = phi [^while.header16, i32 %208] [^while.body14, i32 %184];
    i32 %200 = phi [^while.header16, i32 %209] [^while.body14, i32 %185];
    i32 %201 = phi [^while.header16, i32 %210] [^while.body14, i32 %186];
    i32 %202 = phi [^while.header16, i32 %212] [^while.body14, i32 %187];
    [1024 * i32]* %203 = phi [^while.header16, [1024 * i32]* %213] [^while.body14, [1024 * i32]* %188];
    [1024 * i32]* %204 = phi [^while.header16, [1024 * i32]* %214] [^while.body14, [1024 * i32]* %189];
    [1024 * i32]* %205 = phi [^while.header16, [1024 * i32]* %215] [^while.body14, [1024 * i32]* %190];
    i32 %206 = phi [^while.header16, i32 %216] [^while.body14, i32 %191];
    i32 %207 = add i32 %202, i32 1;
    store i32* %i with i32 %207;
    ubr ^while.header15;
^b12:
    store i32* %j with i32 0;
    ubr ^while.header16;
^while.header16:
    i32 %208 = phi [^while.body15, i32 %230] [^b12, i32 %184];
    i32 %209 = phi [^while.body15, i32 %231] [^b12, i32 %185];
    i32 %210 = phi [^while.body15, i32 %232] [^b12, i32 %186];
    i32 %211 = phi [^while.body15, i32 %236] [^b12, i32 0];
    i32 %212 = phi [^while.body15, i32 %234] [^b12, i32 %187];
    [1024 * i32]* %213 = phi [^while.body15, [1024 * i32]* %213] [^b12, [1024 * i32]* %188];
    [1024 * i32]* %214 = phi [^while.body15, [1024 * i32]* %214] [^b12, [1024 * i32]* %189];
    [1024 * i32]* %215 = phi [^while.body15, [1024 * i32]* %215] [^b12, [1024 * i32]* %190];
    i32 %216 = phi [^while.body15, i32 %235] [^b12, i32 %191];
    i32 %217 = phi [^b12, i32 0] [^while.body15, i32 %236];
    i1 %218 = scmp lt i32 %217, i32 %216;
    cbr i1 %218(prob = 0.97), ^while.body15, ^if.then1;
^while.body15:
    [1024 * i32]* %219 = getelementptr &([1024 * i32]* %213)[i32 %212];
    i32* %220 = getelementptr &([1024 * i32]* %219)[i64 0][i32 %211];
    i32 %221 = load i32* %220;
    [1024 * i32]* %222 = getelementptr &([1024 * i32]* %215)[i32 %212];
    i32* %223 = getelementptr &([1024 * i32]* %222)[i64 0][i32 %210];
    i32 %224 = load i32* %223;
    [1024 * i32]* %225 = getelementptr &([1024 * i32]* %214)[i32 %210];
    i32* %226 = getelementptr &([1024 * i32]* %225)[i64 0][i32 %211];
    i32 %227 = load i32* %226;
    i32 %228 = mul i32 %224, i32 %227;
    i32 %229 = add i32 %221, i32 %228;
    store i32* %220 with i32 %229;
    i32 %230 = load i32* %n2;
    i32 %231 = load i32* %i2;
    i32 %232 = load i32* %k;
    i32 %233 = load i32* %j;
    i32 %234 = load i32* %i;
    i32 %235 = load i32* %n;
    i32 %236 = add i32 %233, i32 1;
    store i32* %j with i32 %236;
    ubr ^while.header16;
}
