internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @N { ReadOnly } = 1024;
internal func @mm(i32 %n, [1024 * i32]* %A, [1024 * i32]* %B, [1024 * i32]* %C) -> void {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [1024 * i32]** %C1 = alloc [1024 * i32]*;
    [1024 * i32]** %B1 = alloc [1024 * i32]*;
    [1024 * i32]** %A1 = alloc [1024 * i32]*;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store [1024 * i32]** %A1 with [1024 * i32]* %A;
    store [1024 * i32]** %B1 with [1024 * i32]* %B;
    store [1024 * i32]** %C1 with [1024 * i32]* %C;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %5 = load i32* %j;
    i32 %6 = load i32* %n1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %10 = load i32* %k;
    i32 %11 = load i32* %n1;
    i1 %12 = scmp lt i32 %10, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    [1024 * i32]* %17 = load [1024 * i32]** %C1;
    [1024 * i32]* %18 = getelementptr &([1024 * i32]* %17)[i64 %16];
    i32 %19 = load i32* %j;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([1024 * i32]* %18)[i64 0][i64 %20];
    store i32* %21 with i32 0;
    i32 %22 = load i32* %j;
    i32 %23 = add i32 %22, i32 1;
    store i32* %j with i32 %23;
    ubr ^while.header1;
^b1:
    i32 %24 = load i32* %i;
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    ubr ^while.header;
^while.body2:
    store i32* %i with i32 0;
    ubr ^while.header3;
^b2:
    ret;
^while.header3:
    i32 %26 = load i32* %i;
    i32 %27 = load i32* %n1;
    i1 %28 = scmp lt i32 %26, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body3, ^b3;
^b3:
    i32 %31 = load i32* %k;
    i32 %32 = add i32 %31, i32 1;
    store i32* %k with i32 %32;
    ubr ^while.header2;
^while.body3:
    i32 %33 = load i32* %i;
    i64 %34 = sext i32 %33 to i64;
    [1024 * i32]* %35 = load [1024 * i32]** %A1;
    [1024 * i32]* %36 = getelementptr &([1024 * i32]* %35)[i64 %34];
    i32 %37 = load i32* %k;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([1024 * i32]* %36)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %40, i32 0;
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then, ^b4;
^if.then:
    i32 %44 = load i32* %i;
    i32 %45 = add i32 %44, i32 1;
    store i32* %i with i32 %45;
    ubr ^while.header3;
^b4:
    store i32* %j with i32 0;
    ubr ^while.header4;
^while.header4:
    i32 %46 = load i32* %j;
    i32 %47 = load i32* %n1;
    i1 %48 = scmp lt i32 %46, i32 %47;
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.97), ^while.body4, ^b5;
^while.body4:
    i32 %51 = load i32* %i;
    i64 %52 = sext i32 %51 to i64;
    [1024 * i32]* %53 = load [1024 * i32]** %C1;
    [1024 * i32]* %54 = getelementptr &([1024 * i32]* %53)[i64 %52];
    i32 %55 = load i32* %j;
    i64 %56 = sext i32 %55 to i64;
    i32* %57 = getelementptr &([1024 * i32]* %54)[i64 0][i64 %56];
    i32 %58 = load i32* %i;
    i64 %59 = sext i32 %58 to i64;
    [1024 * i32]* %60 = load [1024 * i32]** %C1;
    [1024 * i32]* %61 = getelementptr &([1024 * i32]* %60)[i64 %59];
    i32 %62 = load i32* %j;
    i64 %63 = sext i32 %62 to i64;
    i32* %64 = getelementptr &([1024 * i32]* %61)[i64 0][i64 %63];
    i32 %65 = load i32* %64;
    i32 %66 = load i32* %i;
    i64 %67 = sext i32 %66 to i64;
    [1024 * i32]* %68 = load [1024 * i32]** %A1;
    [1024 * i32]* %69 = getelementptr &([1024 * i32]* %68)[i64 %67];
    i32 %70 = load i32* %k;
    i64 %71 = sext i32 %70 to i64;
    i32* %72 = getelementptr &([1024 * i32]* %69)[i64 0][i64 %71];
    i32 %73 = load i32* %72;
    i32 %74 = load i32* %k;
    i64 %75 = sext i32 %74 to i64;
    [1024 * i32]* %76 = load [1024 * i32]** %B1;
    [1024 * i32]* %77 = getelementptr &([1024 * i32]* %76)[i64 %75];
    i32 %78 = load i32* %j;
    i64 %79 = sext i32 %78 to i64;
    i32* %80 = getelementptr &([1024 * i32]* %77)[i64 0][i64 %79];
    i32 %81 = load i32* %80;
    i32 %82 = mul i32 %73, i32 %81;
    i32 %83 = add i32 %65, i32 %82;
    store i32* %57 with i32 %83;
    i32 %84 = load i32* %j;
    i32 %85 = add i32 %84, i32 1;
    store i32* %j with i32 %85;
    ubr ^while.header4;
^b5:
    i32 %86 = load i32* %i;
    i32 %87 = add i32 %86, i32 1;
    store i32* %i with i32 %87;
    ubr ^while.header3;
}
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { Entry } {
^entry:
    i32* %ans = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* %n;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %6 = load i32* %j;
    i32 %7 = load i32* %n;
    i1 %8 = scmp lt i32 %6, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %11 = load i32* %i;
    i32 %12 = load i32* %n;
    i1 %13 = scmp lt i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 %17];
    i32 %19 = load i32* %j;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([1024 * i32]* %18)[i64 0][i64 %20];
    i32 %22 = call () -> i32 @getint();
    store i32* %21 with i32 %22;
    i32 %23 = load i32* %j;
    i32 %24 = add i32 %23, i32 1;
    store i32* %j with i32 %24;
    ubr ^while.header1;
^b1:
    i32 %25 = load i32* %i;
    i32 %26 = add i32 %25, i32 1;
    store i32* %i with i32 %26;
    ubr ^while.header;
^while.body2:
    store i32* %j with i32 0;
    ubr ^while.header3;
^b2:
    call (i32) -> void @starttime(i32 65);
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %27 = load i32* %j;
    i32 %28 = load i32* %n;
    i1 %29 = scmp lt i32 %27, i32 %28;
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b3;
^while.header4:
    i32 %32 = load i32* %i;
    i1 %33 = scmp lt i32 %32, i32 5;
    i32 %34 = zext i1 %33 to i32;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b4;
^while.body3:
    i32 %36 = load i32* %i;
    i64 %37 = sext i32 %36 to i64;
    [1024 * i32]* %38 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 %37];
    i32 %39 = load i32* %j;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = getelementptr &([1024 * i32]* %38)[i64 0][i64 %40];
    i32 %42 = call () -> i32 @getint();
    store i32* %41 with i32 %42;
    i32 %43 = load i32* %j;
    i32 %44 = add i32 %43, i32 1;
    store i32* %j with i32 %44;
    ubr ^while.header3;
^b3:
    i32 %45 = load i32* %i;
    i32 %46 = add i32 %45, i32 1;
    store i32* %i with i32 %46;
    ubr ^while.header2;
^while.body4:
    i32 %47 = load i32* %n;
    [1024 * i32]* %48 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %49 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %50 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    call (i32, [1024 * i32]*, [1024 * i32]*, [1024 * i32]*) -> void @mm(i32 %47, [1024 * i32]* %48, [1024 * i32]* %49, [1024 * i32]* %50);
    i32 %51 = load i32* %n;
    [1024 * i32]* %52 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %53 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    [1024 * i32]* %54 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    call (i32, [1024 * i32]*, [1024 * i32]*, [1024 * i32]*) -> void @mm(i32 %51, [1024 * i32]* %52, [1024 * i32]* %53, [1024 * i32]* %54);
    i32 %55 = load i32* %i;
    i32 %56 = add i32 %55, i32 1;
    store i32* %i with i32 %56;
    ubr ^while.header4;
^b4:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header5;
^while.header5:
    i32 %57 = load i32* %i;
    i32 %58 = load i32* %n;
    i1 %59 = scmp lt i32 %57, i32 %58;
    i32 %60 = zext i1 %59 to i32;
    i1 %61 = scmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    store i32* %j with i32 0;
    ubr ^while.header6;
^b5:
    call (i32) -> void @stoptime(i32 84);
    i32 %62 = load i32* %ans;
    call (i32) -> void @putint(i32 %62);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header6:
    i32 %63 = load i32* %j;
    i32 %64 = load i32* %n;
    i1 %65 = scmp lt i32 %63, i32 %64;
    i32 %66 = zext i1 %65 to i32;
    i1 %67 = scmp neq i32 %66, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body6, ^b6;
^while.body6:
    i32 %68 = load i32* %ans;
    i32 %69 = load i32* %i;
    i64 %70 = sext i32 %69 to i64;
    [1024 * i32]* %71 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 %70];
    i32 %72 = load i32* %j;
    i64 %73 = sext i32 %72 to i64;
    i32* %74 = getelementptr &([1024 * i32]* %71)[i64 0][i64 %73];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %68, i32 %75;
    store i32* %ans with i32 %76;
    i32 %77 = load i32* %j;
    i32 %78 = add i32 %77, i32 1;
    store i32* %j with i32 %78;
    ubr ^while.header6;
^b6:
    i32 %79 = load i32* %i;
    i32 %80 = add i32 %79, i32 1;
    store i32* %i with i32 %80;
    ubr ^while.header5;
}
