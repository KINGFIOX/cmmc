internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp slt i32 %0, i32 1;
    i1 %3 = icmp sgt i32 %0, i32 3;
    i32 %4 = add i32 %0, i32 -3;
    [4 * i8]* %5 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %6 = ptradd [4 * i8]* %5, i32 0;
    [4 * i8]* %7 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %8 = ptradd [4 * i8]* %7, i32 0;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %10 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    i8* %11 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %12 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %13 = phi [^entry, i32 0] [^b2, i32 %25];
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %10)[i64 0][i32 %13];
    ubr ^while.body1;
  ^b:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %10)[i64 0][i64 0];
    [1024 * i32]* %16 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %17 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* %17)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body1:
    i32 %19 = phi [^while.body, i32 0] [^while.body1, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b2;
  ^while.body2:
    i32 %24 = phi [^b, i32 0] [^b3, i32 %27];
    cbr i1 %1(prob = 0.984615), ^b1, ^b3;
  ^b1:
    store i32* %6 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %11);
    ubr ^while.body3;
  ^b2:
    i32 %25 = add i32 %13, i32 1;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body, ^while.body4;
  ^b3:
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp slt i32 %27, i32 5;
    cbr i1 %28(prob = 0.8), ^while.body2, ^b4;
  ^while.body3:
    i32 %29 = phi [^b1, i32 0] [^b7, i32 %52];
    [1024 * i32]* %30 = getelementptr &([1024 * i32]* %16)[i32 %29];
    ubr ^while.header;
  ^while.body4:
    i32 %31 = phi [^b2, i32 0] [^b8, i32 %54];
    [1024 * i32]* %32 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i32 %31];
    ubr ^while.body5;
  ^b4:
    cbr i1 %1(prob = 0.984615), ^b5, ^b6;
  ^while.header:
    i32 %33 = phi [^while.body3, i32 0] [^while.body6, i32 %51] [^b10, i32 %51] [^scalar.header, i32 %51] [^while.body10, i32 %51];
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body6, ^b7;
  ^b5:
    [9 * i8]* %35 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %36 = ptradd [9 * i8]* %35, i32 0;
    store i32* %36 with i32 0;
    i32* %37 = ptradd [9 * i8]* %35, i32 4;
    store i32* %37 with i32 %0;
    i1* %38 = ptradd [9 * i8]* %35, i32 8;
    store i1* %38 with i1 true;
    i8* %39 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %39);
    i32 %40 = load i32* %36;
    ubr ^b6;
  ^while.body5:
    i32 %41 = phi [^while.body4, i32 0] [^while.body5, i32 %44];
    i32 %42 = call () -> i32 @getint();
    i32* %43 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %41];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %41, i32 1;
    i1 %45 = icmp sgt i32 %0, i32 %44;
    cbr i1 %45(prob = 0.984615), ^while.body5, ^b8;
  ^b6:
    i32 %46 = phi [^b4, i32 0] [^b5, i32 %40];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %46);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    [1024 * i32]* %47 = getelementptr &([1024 * i32]* %15)[i32 %33];
    i32* %48 = getelementptr &([1024 * i32]* %47)[i64 0][i32 %29];
    i32 %49 = load i32* %48;
    i1 %50 = icmp eq i32 %49, i32 0;
    i32 %51 = add i32 %33, i32 1;
    cbr i1 %50(prob = 0.5), ^while.header, ^b10;
  ^b7:
    i32 %52 = add i32 %29, i32 1;
    i1 %53 = icmp sgt i32 %0, i32 %52;
    cbr i1 %53(prob = 0.984615), ^while.body3, ^b9;
  ^b8:
    i32 %54 = add i32 %31, i32 1;
    i1 %55 = icmp sgt i32 %0, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body4, ^b;
  ^b9:
    store i32* %8 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %12);
    ubr ^while.body7;
  ^b10:
    cbr i1 %2(prob = 0.0153846), ^while.header, ^prebody;
  ^while.body7:
    i32 %56 = phi [^b9, i32 0] [^b11, i32 %95];
    [1024 * i32]* %57 = getelementptr &([1024 * i32]* %18)[i32 %56];
    ubr ^while.header1;
  ^prebody:
    [1024 * i32]* %58 = getelementptr &([1024 * i32]* %18)[i32 %33];
    cbr i1 %3(prob = 0.941176), ^while.body8, ^scalar.header;
  ^while.header1:
    i32 %59 = phi [^while.body7, i32 0] [^while.body9, i32 %94] [^b12, i32 %94] [^scalar.header1, i32 %94] [^while.body12, i32 %94];
    i1 %60 = icmp sgt i32 %0, i32 %59;
    cbr i1 %60(prob = 0.984615), ^while.body9, ^b11;
  ^while.body8:
    i32 %61 = phi [^prebody, i32 0] [^while.body8, i32 %86];
    i32* %62 = getelementptr &([1024 * i32]* %58)[i64 0][i32 %61];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %61];
    i32 %65 = load i32* %64;
    i32 %66 = mul i32 %49, i32 %65;
    i32 %67 = add i32 %63, i32 %66;
    store i32* %62 with i32 %67;
    i32* %68 = getelementptr &(i32* %62)[i64 1];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %64)[i64 1];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %49, i32 %71;
    i32 %73 = add i32 %69, i32 %72;
    store i32* %68 with i32 %73;
    i32* %74 = getelementptr &(i32* %62)[i64 2];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %64)[i64 2];
    i32 %77 = load i32* %76;
    i32 %78 = mul i32 %49, i32 %77;
    i32 %79 = add i32 %75, i32 %78;
    store i32* %74 with i32 %79;
    i32* %80 = getelementptr &(i32* %62)[i64 3];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %64)[i64 3];
    i32 %83 = load i32* %82;
    i32 %84 = mul i32 %49, i32 %83;
    i32 %85 = add i32 %81, i32 %84;
    store i32* %80 with i32 %85;
    i32 %86 = add i32 %61, i32 4;
    i1 %87 = icmp sgt i32 %4, i32 %86;
    cbr i1 %87(prob = 0.941176), ^while.body8, ^scalar.header;
  ^scalar.header:
    i32 %88 = phi [^prebody, i32 0] [^while.body8, i32 %86];
    i1 %89 = icmp sle i32 %0, i32 %88;
    cbr i1 %89(prob = 0.25), ^while.header, ^while.body10;
  ^while.body9:
    [1024 * i32]* %90 = getelementptr &([1024 * i32]* %15)[i32 %59];
    i32* %91 = getelementptr &([1024 * i32]* %90)[i64 0][i32 %56];
    i32 %92 = load i32* %91;
    i1 %93 = icmp eq i32 %92, i32 0;
    i32 %94 = add i32 %59, i32 1;
    cbr i1 %93(prob = 0.5), ^while.header1, ^b12;
  ^b11:
    i32 %95 = add i32 %56, i32 1;
    i1 %96 = icmp sgt i32 %0, i32 %95;
    cbr i1 %96(prob = 0.984615), ^while.body7, ^b3;
  ^while.body10 {scalar}:
    i32 %97 = phi [^scalar.header, i32 %88] [^while.body10, i32 %104];
    i32* %98 = getelementptr &([1024 * i32]* %58)[i64 0][i32 %97];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %97];
    i32 %101 = load i32* %100;
    i32 %102 = mul i32 %49, i32 %101;
    i32 %103 = add i32 %99, i32 %102;
    store i32* %98 with i32 %103;
    i32 %104 = add i32 %97, i32 1;
    i1 %105 = icmp sgt i32 %0, i32 %104;
    cbr i1 %105(prob = 0.75), ^while.body10, ^while.header;
  ^b12:
    cbr i1 %2(prob = 0.0153846), ^while.header1, ^prebody1;
  ^prebody1:
    [1024 * i32]* %106 = getelementptr &([1024 * i32]* %16)[i32 %59];
    cbr i1 %3(prob = 0.941176), ^while.body11, ^scalar.header1;
  ^while.body11:
    i32 %107 = phi [^prebody1, i32 0] [^while.body11, i32 %132];
    i32* %108 = getelementptr &([1024 * i32]* %106)[i64 0][i32 %107];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &([1024 * i32]* %57)[i64 0][i32 %107];
    i32 %111 = load i32* %110;
    i32 %112 = mul i32 %92, i32 %111;
    i32 %113 = add i32 %109, i32 %112;
    store i32* %108 with i32 %113;
    i32* %114 = getelementptr &(i32* %108)[i64 1];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %110)[i64 1];
    i32 %117 = load i32* %116;
    i32 %118 = mul i32 %92, i32 %117;
    i32 %119 = add i32 %115, i32 %118;
    store i32* %114 with i32 %119;
    i32* %120 = getelementptr &(i32* %108)[i64 2];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %110)[i64 2];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %92, i32 %123;
    i32 %125 = add i32 %121, i32 %124;
    store i32* %120 with i32 %125;
    i32* %126 = getelementptr &(i32* %108)[i64 3];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %110)[i64 3];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %92, i32 %129;
    i32 %131 = add i32 %127, i32 %130;
    store i32* %126 with i32 %131;
    i32 %132 = add i32 %107, i32 4;
    i1 %133 = icmp sgt i32 %4, i32 %132;
    cbr i1 %133(prob = 0.941176), ^while.body11, ^scalar.header1;
  ^scalar.header1:
    i32 %134 = phi [^prebody1, i32 0] [^while.body11, i32 %132];
    i1 %135 = icmp sle i32 %0, i32 %134;
    cbr i1 %135(prob = 0.25), ^while.header1, ^while.body12;
  ^while.body12 {scalar}:
    i32 %136 = phi [^scalar.header1, i32 %134] [^while.body12, i32 %143];
    i32* %137 = getelementptr &([1024 * i32]* %106)[i64 0][i32 %136];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &([1024 * i32]* %57)[i64 0][i32 %136];
    i32 %140 = load i32* %139;
    i32 %141 = mul i32 %92, i32 %140;
    i32 %142 = add i32 %138, i32 %141;
    store i32* %137 with i32 %142;
    i32 %143 = add i32 %136, i32 1;
    i1 %144 = icmp sgt i32 %0, i32 %143;
    cbr i1 %144(prob = 0.75), ^while.body12, ^while.header1;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmcReduceAddI32(i32*, i32) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [9 * i8]* %2 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %3 = ptradd [9 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    i1* %9 = ptradd [9 * i8]* %2, i32 8;
    i1 %10 = load i1* %9;
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %16];
    i32 %13 = phi [^b, i32 0] [^b2, i32 %15];
    cbr i1 %10(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i32 %12];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^b2:
    i32 %15 = phi [^b1, i32 %13] [^scalar.header, i32 %20] [^while.body1, i32 %84];
    i32 %16 = add i32 %12, i32 1;
    i1 %17 = icmp sgt i32 %1, i32 %16;
    cbr i1 %17(prob = 0.984615), ^b1, ^b3;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %18 = phi [^prebody, i32 %13] [^scalar.final, i32 %87];
    i32 %19 = phi [^prebody, i32 0] [^scalar.final, i32 %88];
    i32 %20 = phi [^prebody, i32 undef] [^scalar.final, i32 %87];
    i1 %21 = icmp sgt i32 %4, i32 %19;
    cbr i1 %21(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    i32* %22 = ptradd [9 * i8]* %2, i32 0;
    call (i32*, i32) -> void @cmmcReduceAddI32(i32* %22, i32 %15);
    ret;
  ^while.body:
    i32 %23 = phi [^super.header, i32 0] [^while.body, i32 %73];
    i32 %24 = phi [^super.header, i32 %13] [^while.body, i32 %72];
    i32* %25 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %23];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %24, i32 %26;
    i32* %28 = getelementptr &(i32* %25)[i64 1];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %27, i32 %29;
    i32* %31 = getelementptr &(i32* %25)[i64 2];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %30, i32 %32;
    i32* %34 = getelementptr &(i32* %25)[i64 3];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %33, i32 %35;
    i32* %37 = getelementptr &(i32* %25)[i64 4];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    i32* %40 = getelementptr &(i32* %25)[i64 5];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %39, i32 %41;
    i32* %43 = getelementptr &(i32* %25)[i64 6];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %42, i32 %44;
    i32* %46 = getelementptr &(i32* %25)[i64 7];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %45, i32 %47;
    i32* %49 = getelementptr &(i32* %25)[i64 8];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    i32* %52 = getelementptr &(i32* %25)[i64 9];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %51, i32 %53;
    i32* %55 = getelementptr &(i32* %25)[i64 10];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %54, i32 %56;
    i32* %58 = getelementptr &(i32* %25)[i64 11];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &(i32* %25)[i64 12];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &(i32* %25)[i64 13];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 %65;
    i32* %67 = getelementptr &(i32* %25)[i64 14];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %66, i32 %68;
    i32* %70 = getelementptr &(i32* %25)[i64 15];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    i32 %73 = add i32 %23, i32 16;
    i1 %74 = icmp sgt i32 %8, i32 %73;
    cbr i1 %74(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %75 = phi [^super.header, i32 0] [^while.body, i32 %73];
    i32 %76 = phi [^super.header, i32 %13] [^while.body, i32 %72];
    i32 %77 = phi [^super.header, i32 undef] [^while.body, i32 %72];
    i32 %78 = phi [^super.header, i32 undef] [^while.body, i32 %73];
    i1 %79 = icmp sgt i32 %5, i32 %75;
    cbr i1 %79(prob = 0.75), ^while.body2, ^scalar.final;
  ^while.body1 {scalar}:
    i32 %80 = phi [^scalar.header, i32 %19] [^while.body1, i32 %85];
    i32 %81 = phi [^scalar.header, i32 %18] [^while.body1, i32 %84];
    i32* %82 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %80];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32 %85 = add i32 %80, i32 1;
    i1 %86 = icmp sgt i32 %4, i32 %85;
    cbr i1 %86(prob = 0.75), ^while.body1, ^b2;
  ^scalar.final:
    i32 %87 = phi [^scalar.header1, i32 %77] [^while.body2, i32 %102];
    i32 %88 = phi [^scalar.header1, i32 %78] [^while.body2, i32 %103];
    ubr ^scalar.header;
  ^while.body2 {scalar}:
    i32 %89 = phi [^scalar.header1, i32 %76] [^while.body2, i32 %102];
    i32 %90 = phi [^scalar.header1, i32 %75] [^while.body2, i32 %103];
    i32* %91 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %89, i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    i32 %101 = load i32* %100;
    i32 %102 = add i32 %99, i32 %101;
    i32 %103 = add i32 %90, i32 4;
    i1 %104 = icmp sgt i32 %5, i32 %103;
    cbr i1 %104(prob = 0.75), ^while.body2, ^scalar.final;
}
internal [9 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
