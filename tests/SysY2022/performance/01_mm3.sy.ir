internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i1 %3 = icmp slt i32 %0, i32 1;
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -20;
    i1 %6 = icmp sgt i32 %0, i32 20;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %13 = phi [^entry, i32 0] [^b1, i32 %29];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    cbr i1 %14(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i32 %13];
    ubr ^while.body;
  ^while.header1:
    i32 %16 = phi [^while.header, i32 0] [^b2, i32 %30];
    i1 %17 = icmp sgt i32 %0, i32 %16;
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i32 %16];
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b;
  ^while.body:
    i32 %19 = phi [^prebody, i32 0] [^while.body, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body2;
  ^while.body1:
    i32 %24 = phi [^while.header1, i32 0] [^while.body1, i32 %27];
    i32 %25 = call () -> i32 @getint();
    i32* %26 = getelementptr &([1024 * i32]* %18)[i64 0][i32 %24];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b2;
  ^b1:
    i32 %29 = add i32 %13, i32 1;
    ubr ^while.header;
  ^b2:
    i32 %30 = add i32 %16, i32 1;
    ubr ^while.header1;
  ^while.body2:
    i32 %31 = phi [^b, i32 0] [^b5, i32 %89];
    ubr ^while.header2;
  ^while.header2:
    i32 %32 = phi [^while.body2, i32 0] [^b4, i32 %66];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.984615), ^prebody1, ^while.header3;
  ^prebody1:
    [1024 * i32]* %34 = getelementptr &([1024 * i32]* %12)[i32 %32];
    cbr i1 %4(prob = 0.941176), ^super.header, ^while.body3;
  ^while.header3:
    i32 %35 = phi [^while.header2, i32 0] [^b3, i32 %65];
    i1 %36 = icmp sgt i32 %0, i32 %35;
    [1024 * i32]* %37 = getelementptr &([1024 * i32]* %10)[i32 %35];
    cbr i1 %36(prob = 0.984615), ^while.header4, ^while.header5;
  ^super.header:
    cbr i1 %2(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.header4:
    i32 %38 = phi [^while.header3, i32 0] [^while.body6, i32 %78] [^while.header7, i32 %78] [^while.body12, i32 %78];
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body6, ^b3;
  ^while.body3 {scalar}:
    i32 %40 = phi [^prebody1, i32 0] [^while.body3, i32 %42] [^while.body5, i32 %72];
    i32* %41 = getelementptr &([1024 * i32]* %34)[i64 0][i32 %40];
    store i32* %41 with i32 0;
    i32 %42 = add i32 %40, i32 1;
    i1 %43 = icmp sgt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.75), ^while.body3, ^b4;
  ^while.header5:
    i32 %44 = phi [^while.header3, i32 0] [^b7, i32 %111];
    i1 %45 = icmp sgt i32 %0, i32 %44;
    cbr i1 %45(prob = 0.984615), ^prebody2, ^while.header6;
  ^while.body4:
    i32 %46 = phi [^super.header, i32 0] [^while.body4, i32 %63];
    i32* %47 = getelementptr &([1024 * i32]* %34)[i64 0][i32 %46];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %47)[i64 4];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %47)[i64 5];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %47)[i64 6];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %47)[i64 7];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %47)[i64 8];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %47)[i64 9];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %47)[i64 10];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %47)[i64 11];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %47)[i64 12];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %47)[i64 13];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %47)[i64 14];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %47)[i64 15];
    store i32* %62 with i32 0;
    i32 %63 = add i32 %46, i32 16;
    i1 %64 = icmp sgt i32 %5, i32 %63;
    cbr i1 %64(prob = 0.941176), ^while.body4, ^while.body5;
  ^b3:
    i32 %65 = add i32 %35, i32 1;
    ubr ^while.header3;
  ^b4:
    i32 %66 = add i32 %32, i32 1;
    ubr ^while.header2;
  ^while.body5 {scalar}:
    i32 %67 = phi [^super.header, i32 0] [^while.body4, i32 %63] [^while.body5, i32 %72];
    i32* %68 = getelementptr &([1024 * i32]* %34)[i64 0][i32 %67];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %68)[i64 1];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %68)[i64 2];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %68)[i64 3];
    store i32* %71 with i32 0;
    i32 %72 = add i32 %67, i32 4;
    i1 %73 = icmp sgt i32 %1, i32 %72;
    cbr i1 %73(prob = 0.75), ^while.body5, ^while.body3;
  ^while.body6:
    [1024 * i32]* %74 = getelementptr &([1024 * i32]* %8)[i32 %38];
    i32* %75 = getelementptr &([1024 * i32]* %74)[i64 0][i32 %35];
    i32 %76 = load i32* %75;
    i1 %77 = icmp eq i32 %76, i32 0;
    i32 %78 = add i32 %38, i32 1;
    cbr i1 %77(prob = 0.5), ^while.header4, ^while.header7;
  ^prebody2:
    [1024 * i32]* %79 = getelementptr &([1024 * i32]* %10)[i32 %44];
    cbr i1 %4(prob = 0.941176), ^super.header1, ^while.body7;
  ^while.header6:
    i32 %80 = phi [^while.header5, i32 0] [^b6, i32 %110];
    i1 %81 = icmp sgt i32 %0, i32 %80;
    [1024 * i32]* %82 = getelementptr &([1024 * i32]* %12)[i32 %80];
    cbr i1 %81(prob = 0.984615), ^while.header8, ^b5;
  ^while.header7:
    cbr i1 %3(prob = 0.0153846), ^while.header4, ^prebody3;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body8, ^while.body9;
  ^while.header8:
    i32 %83 = phi [^while.header6, i32 0] [^while.body10, i32 %124] [^while.header10, i32 %124] [^while.body17, i32 %124];
    i1 %84 = icmp sgt i32 %0, i32 %83;
    cbr i1 %84(prob = 0.984615), ^while.body10, ^b6;
  ^while.body7 {scalar}:
    i32 %85 = phi [^prebody2, i32 0] [^while.body7, i32 %87] [^while.body9, i32 %117];
    i32* %86 = getelementptr &([1024 * i32]* %79)[i64 0][i32 %85];
    store i32* %86 with i32 0;
    i32 %87 = add i32 %85, i32 1;
    i1 %88 = icmp sgt i32 %0, i32 %87;
    cbr i1 %88(prob = 0.75), ^while.body7, ^b7;
  ^b5:
    i32 %89 = add i32 %31, i32 1;
    i1 %90 = icmp slt i32 %89, i32 5;
    cbr i1 %90(prob = 0.8), ^while.body2, ^while.header9;
  ^while.body8:
    i32 %91 = phi [^super.header1, i32 0] [^while.body8, i32 %108];
    i32* %92 = getelementptr &([1024 * i32]* %79)[i64 0][i32 %91];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %92)[i64 1];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %92)[i64 2];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %92)[i64 3];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %92)[i64 4];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %92)[i64 5];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %92)[i64 6];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %92)[i64 7];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %92)[i64 8];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %92)[i64 9];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %92)[i64 10];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %92)[i64 11];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %92)[i64 12];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %92)[i64 13];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %92)[i64 14];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %92)[i64 15];
    store i32* %107 with i32 0;
    i32 %108 = add i32 %91, i32 16;
    i1 %109 = icmp sgt i32 %5, i32 %108;
    cbr i1 %109(prob = 0.941176), ^while.body8, ^while.body9;
  ^b6:
    i32 %110 = add i32 %80, i32 1;
    ubr ^while.header6;
  ^b7:
    i32 %111 = add i32 %44, i32 1;
    ubr ^while.header5;
  ^while.body9 {scalar}:
    i32 %112 = phi [^super.header1, i32 0] [^while.body8, i32 %108] [^while.body9, i32 %117];
    i32* %113 = getelementptr &([1024 * i32]* %79)[i64 0][i32 %112];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %113)[i64 1];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %113)[i64 2];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %113)[i64 3];
    store i32* %116 with i32 0;
    i32 %117 = add i32 %112, i32 4;
    i1 %118 = icmp sgt i32 %1, i32 %117;
    cbr i1 %118(prob = 0.75), ^while.body9, ^while.body7;
  ^prebody3:
    [1024 * i32]* %119 = getelementptr &([1024 * i32]* %12)[i32 %38];
    cbr i1 %4(prob = 0.941176), ^while.body11, ^while.body12;
  ^while.body10:
    [1024 * i32]* %120 = getelementptr &([1024 * i32]* %8)[i32 %83];
    i32* %121 = getelementptr &([1024 * i32]* %120)[i64 0][i32 %80];
    i32 %122 = load i32* %121;
    i1 %123 = icmp eq i32 %122, i32 0;
    i32 %124 = add i32 %83, i32 1;
    cbr i1 %123(prob = 0.5), ^while.header8, ^while.header10;
  ^while.header9:
    i32 %125 = phi [^b5, i32 0] [^b9, i32 %171];
    i32 %126 = phi [^b5, i32 0] [^b9, i32 %229];
    i1 %127 = icmp sgt i32 %0, i32 %126;
    cbr i1 %127(prob = 0.984615), ^super.header2, ^b8;
  ^while.body11:
    i32 %128 = phi [^prebody3, i32 4] [^while.body11, i32 %154];
    i32 %129 = phi [^prebody3, i32 0] [^while.body11, i32 %128];
    i32* %130 = getelementptr &([1024 * i32]* %119)[i64 0][i32 %129];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([1024 * i32]* %37)[i64 0][i32 %129];
    i32 %133 = load i32* %132;
    i32 %134 = mul i32 %76, i32 %133;
    i32 %135 = add i32 %131, i32 %134;
    store i32* %130 with i32 %135;
    i32* %136 = getelementptr &(i32* %130)[i64 1];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %132)[i64 1];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %76, i32 %139;
    i32 %141 = add i32 %137, i32 %140;
    store i32* %136 with i32 %141;
    i32* %142 = getelementptr &(i32* %130)[i64 2];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %132)[i64 2];
    i32 %145 = load i32* %144;
    i32 %146 = mul i32 %76, i32 %145;
    i32 %147 = add i32 %143, i32 %146;
    store i32* %142 with i32 %147;
    i32* %148 = getelementptr &(i32* %130)[i64 3];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %132)[i64 3];
    i32 %151 = load i32* %150;
    i32 %152 = mul i32 %76, i32 %151;
    i32 %153 = add i32 %149, i32 %152;
    store i32* %148 with i32 %153;
    i32 %154 = add i32 %128, i32 4;
    i1 %155 = icmp sgt i32 %0, i32 %154;
    cbr i1 %155(prob = 0.941176), ^while.body11, ^while.body12;
  ^while.header10:
    cbr i1 %3(prob = 0.0153846), ^while.header8, ^prebody4;
  ^while.body12 {scalar}:
    i32 %156 = phi [^prebody3, i32 0] [^while.body11, i32 %128] [^while.body12, i32 %163];
    i32* %157 = getelementptr &([1024 * i32]* %119)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &([1024 * i32]* %37)[i64 0][i32 %156];
    i32 %160 = load i32* %159;
    i32 %161 = mul i32 %76, i32 %160;
    i32 %162 = add i32 %158, i32 %161;
    store i32* %157 with i32 %162;
    i32 %163 = add i32 %156, i32 1;
    i1 %164 = icmp sgt i32 %0, i32 %163;
    cbr i1 %164(prob = 0.75), ^while.body12, ^while.header4;
  ^super.header2:
    [1024 * i32]* %165 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i32 %126];
    cbr i1 %4(prob = 0.941176), ^super.header3, ^while.body13;
  ^b8:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %125);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody4:
    [1024 * i32]* %166 = getelementptr &([1024 * i32]* %10)[i32 %83];
    cbr i1 %4(prob = 0.941176), ^while.body15, ^while.body17;
  ^super.header3:
    cbr i1 %6(prob = 0.941176), ^while.body14, ^while.body16;
  ^while.body13 {scalar}:
    i32 %167 = phi [^super.header2, i32 0] [^while.body13, i32 %172] [^while.body16, i32 %258];
    i32 %168 = phi [^super.header2, i32 %125] [^while.body13, i32 %171] [^while.body16, i32 %272];
    i32* %169 = getelementptr &([1024 * i32]* %165)[i64 0][i32 %167];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %168, i32 %170;
    i32 %172 = add i32 %167, i32 1;
    i1 %173 = icmp sgt i32 %0, i32 %172;
    cbr i1 %173(prob = 0.75), ^while.body13, ^b9;
  ^while.body14:
    i32 %174 = phi [^super.header3, i32 20] [^while.body14, i32 %226];
    i32 %175 = phi [^super.header3, i32 0] [^while.body14, i32 %228];
    i32 %176 = phi [^super.header3, i32 %125] [^while.body14, i32 %225];
    i32 %177 = phi [^super.header3, i32 4] [^while.body14, i32 %174];
    i32* %178 = getelementptr &([1024 * i32]* %165)[i64 0][i32 %175];
    i32 %179 = load i32* %178;
    i32 %180 = add i32 %176, i32 %179;
    i32* %181 = getelementptr &(i32* %178)[i64 1];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    i32* %184 = getelementptr &(i32* %178)[i64 2];
    i32 %185 = load i32* %184;
    i32 %186 = add i32 %183, i32 %185;
    i32* %187 = getelementptr &(i32* %178)[i64 3];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %186, i32 %188;
    i32* %190 = getelementptr &([1024 * i32]* %165)[i64 0][i32 %177];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %189, i32 %191;
    i32* %193 = getelementptr &(i32* %190)[i64 1];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %192, i32 %194;
    i32* %196 = getelementptr &(i32* %190)[i64 2];
    i32 %197 = load i32* %196;
    i32 %198 = add i32 %195, i32 %197;
    i32* %199 = getelementptr &(i32* %190)[i64 3];
    i32 %200 = load i32* %199;
    i32 %201 = add i32 %198, i32 %200;
    i32* %202 = getelementptr &(i32* %190)[i64 4];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %201, i32 %203;
    i32* %205 = getelementptr &(i32* %190)[i64 5];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %204, i32 %206;
    i32* %208 = getelementptr &(i32* %190)[i64 6];
    i32 %209 = load i32* %208;
    i32 %210 = add i32 %207, i32 %209;
    i32* %211 = getelementptr &(i32* %190)[i64 7];
    i32 %212 = load i32* %211;
    i32 %213 = add i32 %210, i32 %212;
    i32* %214 = getelementptr &(i32* %190)[i64 8];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %213, i32 %215;
    i32* %217 = getelementptr &(i32* %190)[i64 9];
    i32 %218 = load i32* %217;
    i32 %219 = add i32 %216, i32 %218;
    i32* %220 = getelementptr &(i32* %190)[i64 10];
    i32 %221 = load i32* %220;
    i32 %222 = add i32 %219, i32 %221;
    i32* %223 = getelementptr &(i32* %190)[i64 11];
    i32 %224 = load i32* %223;
    i32 %225 = add i32 %222, i32 %224;
    i32 %226 = add i32 %174, i32 16;
    i1 %227 = icmp sgt i32 %0, i32 %226;
    i32 %228 = add i32 %177, i32 12;
    cbr i1 %227(prob = 0.941176), ^while.body14, ^while.body16;
  ^b9:
    i32 %229 = add i32 %126, i32 1;
    ubr ^while.header9;
  ^while.body15:
    i32 %230 = phi [^prebody4, i32 4] [^while.body15, i32 %256];
    i32 %231 = phi [^prebody4, i32 0] [^while.body15, i32 %230];
    i32* %232 = getelementptr &([1024 * i32]* %166)[i64 0][i32 %231];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &([1024 * i32]* %82)[i64 0][i32 %231];
    i32 %235 = load i32* %234;
    i32 %236 = mul i32 %122, i32 %235;
    i32 %237 = add i32 %233, i32 %236;
    store i32* %232 with i32 %237;
    i32* %238 = getelementptr &(i32* %232)[i64 1];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &(i32* %234)[i64 1];
    i32 %241 = load i32* %240;
    i32 %242 = mul i32 %122, i32 %241;
    i32 %243 = add i32 %239, i32 %242;
    store i32* %238 with i32 %243;
    i32* %244 = getelementptr &(i32* %232)[i64 2];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %234)[i64 2];
    i32 %247 = load i32* %246;
    i32 %248 = mul i32 %122, i32 %247;
    i32 %249 = add i32 %245, i32 %248;
    store i32* %244 with i32 %249;
    i32* %250 = getelementptr &(i32* %232)[i64 3];
    i32 %251 = load i32* %250;
    i32* %252 = getelementptr &(i32* %234)[i64 3];
    i32 %253 = load i32* %252;
    i32 %254 = mul i32 %122, i32 %253;
    i32 %255 = add i32 %251, i32 %254;
    store i32* %250 with i32 %255;
    i32 %256 = add i32 %230, i32 4;
    i1 %257 = icmp sgt i32 %0, i32 %256;
    cbr i1 %257(prob = 0.941176), ^while.body15, ^while.body17;
  ^while.body16 {scalar}:
    i32 %258 = phi [^super.header3, i32 4] [^while.body14, i32 %174] [^while.body16, i32 %273];
    i32 %259 = phi [^super.header3, i32 %125] [^while.body14, i32 %225] [^while.body16, i32 %272];
    i32 %260 = phi [^super.header3, i32 0] [^while.body14, i32 %228] [^while.body16, i32 %258];
    i32* %261 = getelementptr &([1024 * i32]* %165)[i64 0][i32 %260];
    i32 %262 = load i32* %261;
    i32 %263 = add i32 %259, i32 %262;
    i32* %264 = getelementptr &(i32* %261)[i64 1];
    i32 %265 = load i32* %264;
    i32 %266 = add i32 %263, i32 %265;
    i32* %267 = getelementptr &(i32* %261)[i64 2];
    i32 %268 = load i32* %267;
    i32 %269 = add i32 %266, i32 %268;
    i32* %270 = getelementptr &(i32* %261)[i64 3];
    i32 %271 = load i32* %270;
    i32 %272 = add i32 %269, i32 %271;
    i32 %273 = add i32 %258, i32 4;
    i1 %274 = icmp sgt i32 %0, i32 %273;
    cbr i1 %274(prob = 0.75), ^while.body16, ^while.body13;
  ^while.body17 {scalar}:
    i32 %275 = phi [^prebody4, i32 0] [^while.body15, i32 %230] [^while.body17, i32 %282];
    i32* %276 = getelementptr &([1024 * i32]* %166)[i64 0][i32 %275];
    i32 %277 = load i32* %276;
    i32* %278 = getelementptr &([1024 * i32]* %82)[i64 0][i32 %275];
    i32 %279 = load i32* %278;
    i32 %280 = mul i32 %122, i32 %279;
    i32 %281 = add i32 %277, i32 %280;
    store i32* %276 with i32 %281;
    i32 %282 = add i32 %275, i32 1;
    i1 %283 = icmp sgt i32 %0, i32 %282;
    cbr i1 %283(prob = 0.75), ^while.body17, ^while.header8;
}
