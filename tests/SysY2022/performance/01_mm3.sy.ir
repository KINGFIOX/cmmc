internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 8;
    i32 %3 = add i32 %0, i32 -8;
    [1024 * [1024 * i32]]* %4 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %5 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %11];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.992248), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.992248), ^prebody, ^b;
  ^while.header2:
    i32 %8 = phi [^while.header, i32 0] [^b2, i32 %22];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.992248), ^while.header3, ^b1;
  ^prebody:
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %5)[i64 0][i32 %6];
    ubr ^while.body;
  ^b:
    i32 %11 = add i32 %6, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %5)[i64 0][i64 0];
    [1024 * i32]* %13 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %14 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %14)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.header3:
    cbr i1 %1(prob = 0.992248), ^prebody1, ^b2;
  ^prebody1:
    [1024 * i32]* %16 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %8];
    ubr ^while.body2;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body, i32 %20];
    i32 %18 = call () -> i32 @getint();
    i32* %19 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %17];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %0, i32 %20;
    cbr i1 %21(prob = 0.992248), ^while.body, ^b;
  ^b2:
    i32 %22 = add i32 %8, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %23 = phi [^b1, i32 0] [^while.body6, i32 %68];
    ubr ^while.header4;
  ^while.body2:
    i32 %24 = phi [^prebody1, i32 0] [^while.body2, i32 %27];
    i32 %25 = call () -> i32 @getint();
    i32* %26 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %24];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.992248), ^while.body2, ^b2;
  ^while.header4:
    i32 %29 = phi [^while.body1, i32 0] [^b3, i32 %34];
    i1 %30 = icmp sgt i32 %0, i32 %29;
    cbr i1 %30(prob = 0.992248), ^while.header5, ^while.header6;
  ^while.header5:
    cbr i1 %1(prob = 0.992248), ^prebody2, ^b3;
  ^while.header6:
    i32 %31 = phi [^while.header4, i32 0] [^b4, i32 %40];
    i1 %32 = icmp sgt i32 %0, i32 %31;
    [1024 * i32]* %33 = getelementptr &([1024 * i32]* %13)[i32 %31];
    cbr i1 %32(prob = 0.992248), ^while.header7, ^while.header8;
  ^b3:
    i32 %34 = add i32 %29, i32 1;
    ubr ^while.header4;
  ^prebody2:
    [1024 * i32]* %35 = getelementptr &([1024 * i32]* %15)[i32 %29];
    cbr i1 %2(prob = 0.941176), ^while.body3, ^while.body5;
  ^while.header7:
    i32 %36 = phi [^while.header6, i32 0] [^if.then, i32 %63];
    i1 %37 = icmp sgt i32 %0, i32 %36;
    cbr i1 %37(prob = 0.992248), ^while.body4, ^b4;
  ^while.header8:
    i32 %38 = phi [^while.header6, i32 0] [^b5, i32 %64];
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.992248), ^while.header9, ^while.header10;
  ^b4:
    i32 %40 = add i32 %31, i32 1;
    ubr ^while.header6;
  ^while.body3:
    i32 %41 = phi [^prebody2, i32 0] [^while.body3, i32 %50];
    i32* %42 = getelementptr &([1024 * i32]* %35)[i64 0][i32 %41];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %42)[i64 4];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %42)[i64 5];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %42)[i64 6];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %42)[i64 7];
    store i32* %49 with i32 0;
    i32 %50 = add i32 %41, i32 8;
    i1 %51 = icmp sgt i32 %3, i32 %50;
    cbr i1 %51(prob = 0.941176), ^while.body3, ^while.body5;
  ^while.body4:
    [1024 * i32]* %52 = getelementptr &([1024 * i32]* %12)[i32 %36];
    i32* %53 = getelementptr &([1024 * i32]* %52)[i64 0][i32 %31];
    i32 %54 = load i32* %53;
    i1 %55 = icmp eq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^if.then, ^while.header11;
  ^while.body5 {scalar}:
    i32 %56 = phi [^prebody2, i32 0] [^while.body3, i32 %50] [^while.body5, i32 %58];
    i32* %57 = getelementptr &([1024 * i32]* %35)[i64 0][i32 %56];
    store i32* %57 with i32 0;
    i32 %58 = add i32 %56, i32 1;
    i1 %59 = icmp sgt i32 %0, i32 %58;
    cbr i1 %59(prob = 0.875), ^while.body5, ^b3;
  ^while.header9:
    cbr i1 %1(prob = 0.992248), ^prebody3, ^b5;
  ^while.header10:
    i32 %60 = phi [^while.header8, i32 0] [^b6, i32 %71];
    i1 %61 = icmp sgt i32 %0, i32 %60;
    [1024 * i32]* %62 = getelementptr &([1024 * i32]* %15)[i32 %60];
    cbr i1 %61(prob = 0.992248), ^while.header12, ^while.body6;
  ^if.then:
    i32 %63 = add i32 %36, i32 1;
    ubr ^while.header7;
  ^b5:
    i32 %64 = add i32 %38, i32 1;
    ubr ^while.header8;
  ^while.header11:
    cbr i1 %1(prob = 0.992248), ^prebody4, ^if.then;
  ^prebody3:
    [1024 * i32]* %65 = getelementptr &([1024 * i32]* %13)[i32 %38];
    cbr i1 %2(prob = 0.941176), ^while.body7, ^while.body9;
  ^while.header12:
    i32 %66 = phi [^while.header10, i32 0] [^if.then1, i32 %94];
    i1 %67 = icmp sgt i32 %0, i32 %66;
    cbr i1 %67(prob = 0.992248), ^while.body8, ^b6;
  ^while.body6:
    i32 %68 = add i32 %23, i32 1;
    i1 %69 = icmp slt i32 %68, i32 5;
    cbr i1 %69(prob = 0.8), ^while.body1, ^while.header13;
  ^prebody4:
    [1024 * i32]* %70 = getelementptr &([1024 * i32]* %15)[i32 %36];
    cbr i1 %2(prob = 0.941176), ^while.body10, ^while.body11;
  ^b6:
    i32 %71 = add i32 %60, i32 1;
    ubr ^while.header10;
  ^while.body7:
    i32 %72 = phi [^prebody3, i32 0] [^while.body7, i32 %81];
    i32* %73 = getelementptr &([1024 * i32]* %65)[i64 0][i32 %72];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %73)[i64 1];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %73)[i64 2];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %73)[i64 3];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %73)[i64 4];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %73)[i64 5];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %73)[i64 6];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %73)[i64 7];
    store i32* %80 with i32 0;
    i32 %81 = add i32 %72, i32 8;
    i1 %82 = icmp sgt i32 %3, i32 %81;
    cbr i1 %82(prob = 0.941176), ^while.body7, ^while.body9;
  ^while.body8:
    [1024 * i32]* %83 = getelementptr &([1024 * i32]* %12)[i32 %66];
    i32* %84 = getelementptr &([1024 * i32]* %83)[i64 0][i32 %60];
    i32 %85 = load i32* %84;
    i1 %86 = icmp eq i32 %85, i32 0;
    cbr i1 %86(prob = 0.5), ^if.then1, ^while.header14;
  ^while.body9 {scalar}:
    i32 %87 = phi [^prebody3, i32 0] [^while.body7, i32 %81] [^while.body9, i32 %89];
    i32* %88 = getelementptr &([1024 * i32]* %65)[i64 0][i32 %87];
    store i32* %88 with i32 0;
    i32 %89 = add i32 %87, i32 1;
    i1 %90 = icmp sgt i32 %0, i32 %89;
    cbr i1 %90(prob = 0.875), ^while.body9, ^b5;
  ^while.header13:
    i32 %91 = phi [^while.body6, i32 0] [^b8, i32 %156];
    i32 %92 = phi [^while.body6, i32 0] [^b8, i32 %157];
    i1 %93 = icmp sgt i32 %0, i32 %92;
    cbr i1 %93(prob = 0.992248), ^while.header15, ^b7;
  ^if.then1:
    i32 %94 = add i32 %66, i32 1;
    ubr ^while.header12;
  ^while.body10:
    i32 %95 = phi [^prebody4, i32 0] [^while.body10, i32 %144];
    i32* %96 = getelementptr &([1024 * i32]* %70)[i64 0][i32 %95];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %95];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %54, i32 %99;
    i32 %101 = add i32 %97, i32 %100;
    store i32* %96 with i32 %101;
    i32* %102 = getelementptr &(i32* %96)[i64 1];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %98)[i64 1];
    i32 %105 = load i32* %104;
    i32 %106 = mul i32 %54, i32 %105;
    i32 %107 = add i32 %103, i32 %106;
    store i32* %102 with i32 %107;
    i32* %108 = getelementptr &(i32* %96)[i64 2];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %98)[i64 2];
    i32 %111 = load i32* %110;
    i32 %112 = mul i32 %54, i32 %111;
    i32 %113 = add i32 %109, i32 %112;
    store i32* %108 with i32 %113;
    i32* %114 = getelementptr &(i32* %96)[i64 3];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %98)[i64 3];
    i32 %117 = load i32* %116;
    i32 %118 = mul i32 %54, i32 %117;
    i32 %119 = add i32 %115, i32 %118;
    store i32* %114 with i32 %119;
    i32* %120 = getelementptr &(i32* %96)[i64 4];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %98)[i64 4];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %54, i32 %123;
    i32 %125 = add i32 %121, i32 %124;
    store i32* %120 with i32 %125;
    i32* %126 = getelementptr &(i32* %96)[i64 5];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %98)[i64 5];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %54, i32 %129;
    i32 %131 = add i32 %127, i32 %130;
    store i32* %126 with i32 %131;
    i32* %132 = getelementptr &(i32* %96)[i64 6];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %98)[i64 6];
    i32 %135 = load i32* %134;
    i32 %136 = mul i32 %54, i32 %135;
    i32 %137 = add i32 %133, i32 %136;
    store i32* %132 with i32 %137;
    i32* %138 = getelementptr &(i32* %96)[i64 7];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %98)[i64 7];
    i32 %141 = load i32* %140;
    i32 %142 = mul i32 %54, i32 %141;
    i32 %143 = add i32 %139, i32 %142;
    store i32* %138 with i32 %143;
    i32 %144 = add i32 %95, i32 8;
    i1 %145 = icmp sgt i32 %3, i32 %144;
    cbr i1 %145(prob = 0.941176), ^while.body10, ^while.body11;
  ^while.body11 {scalar}:
    i32 %146 = phi [^prebody4, i32 0] [^while.body10, i32 %144] [^while.body11, i32 %153];
    i32* %147 = getelementptr &([1024 * i32]* %70)[i64 0][i32 %146];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %146];
    i32 %150 = load i32* %149;
    i32 %151 = mul i32 %54, i32 %150;
    i32 %152 = add i32 %148, i32 %151;
    store i32* %147 with i32 %152;
    i32 %153 = add i32 %146, i32 1;
    i1 %154 = icmp sgt i32 %0, i32 %153;
    cbr i1 %154(prob = 0.875), ^while.body11, ^if.then;
  ^while.header14:
    cbr i1 %1(prob = 0.992248), ^prebody5, ^if.then1;
  ^while.header15:
    cbr i1 %1(prob = 0.992248), ^prebody6, ^b8;
  ^b7:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %91);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody5:
    [1024 * i32]* %155 = getelementptr &([1024 * i32]* %13)[i32 %66];
    cbr i1 %2(prob = 0.941176), ^while.body12, ^while.body14;
  ^b8:
    i32 %156 = phi [^while.header15, i32 %91] [^while.body15, i32 %251];
    i32 %157 = add i32 %92, i32 1;
    ubr ^while.header13;
  ^prebody6:
    [1024 * i32]* %158 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %92];
    cbr i1 %2(prob = 0.941176), ^while.body13, ^while.body15;
  ^while.body12:
    i32 %159 = phi [^prebody5, i32 0] [^while.body12, i32 %208];
    i32* %160 = getelementptr &([1024 * i32]* %155)[i64 0][i32 %159];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &([1024 * i32]* %62)[i64 0][i32 %159];
    i32 %163 = load i32* %162;
    i32 %164 = mul i32 %85, i32 %163;
    i32 %165 = add i32 %161, i32 %164;
    store i32* %160 with i32 %165;
    i32* %166 = getelementptr &(i32* %160)[i64 1];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %162)[i64 1];
    i32 %169 = load i32* %168;
    i32 %170 = mul i32 %85, i32 %169;
    i32 %171 = add i32 %167, i32 %170;
    store i32* %166 with i32 %171;
    i32* %172 = getelementptr &(i32* %160)[i64 2];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %162)[i64 2];
    i32 %175 = load i32* %174;
    i32 %176 = mul i32 %85, i32 %175;
    i32 %177 = add i32 %173, i32 %176;
    store i32* %172 with i32 %177;
    i32* %178 = getelementptr &(i32* %160)[i64 3];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %162)[i64 3];
    i32 %181 = load i32* %180;
    i32 %182 = mul i32 %85, i32 %181;
    i32 %183 = add i32 %179, i32 %182;
    store i32* %178 with i32 %183;
    i32* %184 = getelementptr &(i32* %160)[i64 4];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %162)[i64 4];
    i32 %187 = load i32* %186;
    i32 %188 = mul i32 %85, i32 %187;
    i32 %189 = add i32 %185, i32 %188;
    store i32* %184 with i32 %189;
    i32* %190 = getelementptr &(i32* %160)[i64 5];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %162)[i64 5];
    i32 %193 = load i32* %192;
    i32 %194 = mul i32 %85, i32 %193;
    i32 %195 = add i32 %191, i32 %194;
    store i32* %190 with i32 %195;
    i32* %196 = getelementptr &(i32* %160)[i64 6];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %162)[i64 6];
    i32 %199 = load i32* %198;
    i32 %200 = mul i32 %85, i32 %199;
    i32 %201 = add i32 %197, i32 %200;
    store i32* %196 with i32 %201;
    i32* %202 = getelementptr &(i32* %160)[i64 7];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %162)[i64 7];
    i32 %205 = load i32* %204;
    i32 %206 = mul i32 %85, i32 %205;
    i32 %207 = add i32 %203, i32 %206;
    store i32* %202 with i32 %207;
    i32 %208 = add i32 %159, i32 8;
    i1 %209 = icmp sgt i32 %3, i32 %208;
    cbr i1 %209(prob = 0.941176), ^while.body12, ^while.body14;
  ^while.body13:
    i32 %210 = phi [^prebody6, i32 %91] [^while.body13, i32 %235];
    i32 %211 = phi [^prebody6, i32 0] [^while.body13, i32 %236];
    i32* %212 = getelementptr &([1024 * i32]* %158)[i64 0][i32 %211];
    i32 %213 = load i32* %212;
    i32 %214 = add i32 %210, i32 %213;
    i32* %215 = getelementptr &(i32* %212)[i64 1];
    i32 %216 = load i32* %215;
    i32 %217 = add i32 %214, i32 %216;
    i32* %218 = getelementptr &(i32* %212)[i64 2];
    i32 %219 = load i32* %218;
    i32 %220 = add i32 %217, i32 %219;
    i32* %221 = getelementptr &(i32* %212)[i64 3];
    i32 %222 = load i32* %221;
    i32 %223 = add i32 %220, i32 %222;
    i32* %224 = getelementptr &(i32* %212)[i64 4];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %223, i32 %225;
    i32* %227 = getelementptr &(i32* %212)[i64 5];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %226, i32 %228;
    i32* %230 = getelementptr &(i32* %212)[i64 6];
    i32 %231 = load i32* %230;
    i32 %232 = add i32 %229, i32 %231;
    i32* %233 = getelementptr &(i32* %212)[i64 7];
    i32 %234 = load i32* %233;
    i32 %235 = add i32 %232, i32 %234;
    i32 %236 = add i32 %211, i32 8;
    i1 %237 = icmp sgt i32 %3, i32 %236;
    cbr i1 %237(prob = 0.941176), ^while.body13, ^while.body15;
  ^while.body14 {scalar}:
    i32 %238 = phi [^prebody5, i32 0] [^while.body12, i32 %208] [^while.body14, i32 %245];
    i32* %239 = getelementptr &([1024 * i32]* %155)[i64 0][i32 %238];
    i32 %240 = load i32* %239;
    i32* %241 = getelementptr &([1024 * i32]* %62)[i64 0][i32 %238];
    i32 %242 = load i32* %241;
    i32 %243 = mul i32 %85, i32 %242;
    i32 %244 = add i32 %240, i32 %243;
    store i32* %239 with i32 %244;
    i32 %245 = add i32 %238, i32 1;
    i1 %246 = icmp sgt i32 %0, i32 %245;
    cbr i1 %246(prob = 0.875), ^while.body14, ^if.then1;
  ^while.body15 {scalar}:
    i32 %247 = phi [^prebody6, i32 0] [^while.body13, i32 %236] [^while.body15, i32 %252];
    i32 %248 = phi [^prebody6, i32 %91] [^while.body13, i32 %235] [^while.body15, i32 %251];
    i32* %249 = getelementptr &([1024 * i32]* %158)[i64 0][i32 %247];
    i32 %250 = load i32* %249;
    i32 %251 = add i32 %248, i32 %250;
    i32 %252 = add i32 %247, i32 1;
    i1 %253 = icmp sgt i32 %0, i32 %252;
    cbr i1 %253(prob = 0.875), ^while.body15, ^b8;
}
