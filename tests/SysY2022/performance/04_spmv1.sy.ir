internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    [100010 * i32]* %14 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %15 = getelementptr &([100010 * i32]* %14)[i64 0][i64 0];
    [4 * i8]* %16 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %17 = ptradd [4 * i8]* %16, i32 0;
    [4 * i8]* %18 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %19 = ptradd [4 * i8]* %18, i32 0;
    [4 * i8]* %20 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %21 = ptradd [4 * i8]* %20, i32 0;
    [4 * i8]* %22 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %23 = ptradd [4 * i8]* %22, i32 0;
    i8* %24 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %25 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %26 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %27 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    ubr ^while.body;
  ^while.body:
    i32 %28 = phi [^entry, i32 0] [^b1, i32 %29];
    cbr i1 %13(prob = 0.984615), ^b, ^b1;
  ^b:
    store i32* %17 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %24);
    store i32* %19 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %25);
    store i32* %21 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %26);
    store i32* %23 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %27);
    ubr ^b1;
  ^b1:
    i32 %29 = add i32 %28, i32 1;
    i1 %30 = icmp slt i32 %29, i32 100;
    cbr i1 %30(prob = 0.99), ^while.body, ^b2;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %15);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [3000000 * i32]* %2 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %3 = getelementptr &([3000000 * i32]* %2)[i64 0][i64 0];
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    [100010 * i32]* %8 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %9 = getelementptr &([100010 * i32]* %8)[i64 0][i64 0];
    [100010 * i32]* %10 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %11 = getelementptr &([100010 * i32]* %10)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %22];
    i32* %13 = getelementptr &(i32* %9)[i32 %12];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &(i32* %13)[i64 1];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    i32 %18 = add i32 %14, i32 3;
    i1 %19 = icmp sgt i32 %16, i32 %18;
    i32* %20 = getelementptr &(i32* %11)[i32 %12];
    i32 %21 = add i32 %16, i32 -3;
    cbr i1 %19(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %22 = add i32 %12, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    i32 %24 = phi [^super.header, i32 %14] [^while.body, i32 %49];
    i32* %25 = getelementptr &(i32* %3)[i32 %24];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %5)[i32 %26];
    i32* %28 = getelementptr &(i32* %7)[i32 %24];
    i32 %29 = load i32* %28;
    atomicadd i32* %27, i32 %29;
    i32* %31 = getelementptr &(i32* %25)[i64 1];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %5)[i32 %32];
    i32* %34 = getelementptr &(i32* %28)[i64 1];
    i32 %35 = load i32* %34;
    atomicadd i32* %33, i32 %35;
    i32* %37 = getelementptr &(i32* %25)[i64 2];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    i32* %40 = getelementptr &(i32* %28)[i64 2];
    i32 %41 = load i32* %40;
    atomicadd i32* %39, i32 %41;
    i32* %43 = getelementptr &(i32* %25)[i64 3];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %5)[i32 %44];
    i32* %46 = getelementptr &(i32* %28)[i64 3];
    i32 %47 = load i32* %46;
    atomicadd i32* %45, i32 %47;
    i32 %49 = add i32 %24, i32 4;
    i1 %50 = icmp sgt i32 %21, i32 %49;
    cbr i1 %50(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    i32 %51 = phi [^super.header, i32 %14] [^while.body, i32 %49];
    i1 %52 = icmp sgt i32 %16, i32 %51;
    cbr i1 %52(prob = 0.75), ^while.body1, ^scalar.final;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %53 = phi [^scalar.header, i32 %51] [^while.body1, i32 %60];
    i32* %54 = getelementptr &(i32* %3)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %5)[i32 %55];
    i32* %57 = getelementptr &(i32* %7)[i32 %53];
    i32 %58 = load i32* %57;
    atomicadd i32* %56, i32 %58;
    i32 %60 = add i32 %53, i32 1;
    i1 %61 = icmp sgt i32 %16, i32 %60;
    cbr i1 %61(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %62 = load i32* %20;
    i32 %63 = add i32 %62, i32 -1;
    cbr i1 %19(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^while.body2:
    i32 %64 = phi [^scalar.final, i32 %14] [^while.body2, i32 %93];
    i32* %65 = getelementptr &(i32* %3)[i32 %64];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %5)[i32 %66];
    i32* %68 = getelementptr &(i32* %7)[i32 %64];
    i32 %69 = load i32* %68;
    i32 %70 = mul i32 %63, i32 %69;
    atomicadd i32* %67, i32 %70;
    i32* %72 = getelementptr &(i32* %65)[i64 1];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %5)[i32 %73];
    i32* %75 = getelementptr &(i32* %68)[i64 1];
    i32 %76 = load i32* %75;
    i32 %77 = mul i32 %63, i32 %76;
    atomicadd i32* %74, i32 %77;
    i32* %79 = getelementptr &(i32* %65)[i64 2];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %5)[i32 %80];
    i32* %82 = getelementptr &(i32* %68)[i64 2];
    i32 %83 = load i32* %82;
    i32 %84 = mul i32 %63, i32 %83;
    atomicadd i32* %81, i32 %84;
    i32* %86 = getelementptr &(i32* %65)[i64 3];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %5)[i32 %87];
    i32* %89 = getelementptr &(i32* %68)[i64 3];
    i32 %90 = load i32* %89;
    i32 %91 = mul i32 %63, i32 %90;
    atomicadd i32* %88, i32 %91;
    i32 %93 = add i32 %64, i32 4;
    i1 %94 = icmp sgt i32 %21, i32 %93;
    cbr i1 %94(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^scalar.header1:
    i32 %95 = phi [^scalar.final, i32 %14] [^while.body2, i32 %93];
    i1 %96 = icmp sgt i32 %16, i32 %95;
    cbr i1 %96(prob = 0.75), ^while.body3, ^b2;
  ^while.body3 {scalar}:
    i32 %97 = phi [^scalar.header1, i32 %95] [^while.body3, i32 %105];
    i32* %98 = getelementptr &(i32* %3)[i32 %97];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %5)[i32 %99];
    i32* %101 = getelementptr &(i32* %7)[i32 %97];
    i32 %102 = load i32* %101;
    i32 %103 = mul i32 %63, i32 %102;
    atomicadd i32* %100, i32 %103;
    i32 %105 = add i32 %97, i32 1;
    i1 %106 = icmp sgt i32 %16, i32 %105;
    cbr i1 %106(prob = 0.75), ^while.body3, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [3000000 * i32]* %2 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %3 = getelementptr &([3000000 * i32]* %2)[i64 0][i64 0];
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    [100010 * i32]* %8 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %9 = getelementptr &([100010 * i32]* %8)[i64 0][i64 0];
    [100010 * i32]* %10 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %11 = getelementptr &([100010 * i32]* %10)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %22];
    i32* %13 = getelementptr &(i32* %9)[i32 %12];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &(i32* %13)[i64 1];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    i32 %18 = add i32 %14, i32 3;
    i1 %19 = icmp sgt i32 %16, i32 %18;
    i32* %20 = getelementptr &(i32* %11)[i32 %12];
    i32 %21 = add i32 %16, i32 -3;
    cbr i1 %19(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %22 = add i32 %12, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    i32 %24 = phi [^super.header, i32 %14] [^while.body, i32 %49];
    i32* %25 = getelementptr &(i32* %3)[i32 %24];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %5)[i32 %26];
    i32* %28 = getelementptr &(i32* %7)[i32 %24];
    i32 %29 = load i32* %28;
    atomicadd i32* %27, i32 %29;
    i32* %31 = getelementptr &(i32* %25)[i64 1];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %5)[i32 %32];
    i32* %34 = getelementptr &(i32* %28)[i64 1];
    i32 %35 = load i32* %34;
    atomicadd i32* %33, i32 %35;
    i32* %37 = getelementptr &(i32* %25)[i64 2];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    i32* %40 = getelementptr &(i32* %28)[i64 2];
    i32 %41 = load i32* %40;
    atomicadd i32* %39, i32 %41;
    i32* %43 = getelementptr &(i32* %25)[i64 3];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %5)[i32 %44];
    i32* %46 = getelementptr &(i32* %28)[i64 3];
    i32 %47 = load i32* %46;
    atomicadd i32* %45, i32 %47;
    i32 %49 = add i32 %24, i32 4;
    i1 %50 = icmp sgt i32 %21, i32 %49;
    cbr i1 %50(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    i32 %51 = phi [^super.header, i32 %14] [^while.body, i32 %49];
    i1 %52 = icmp sgt i32 %16, i32 %51;
    cbr i1 %52(prob = 0.75), ^while.body1, ^scalar.final;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %53 = phi [^scalar.header, i32 %51] [^while.body1, i32 %60];
    i32* %54 = getelementptr &(i32* %3)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %5)[i32 %55];
    i32* %57 = getelementptr &(i32* %7)[i32 %53];
    i32 %58 = load i32* %57;
    atomicadd i32* %56, i32 %58;
    i32 %60 = add i32 %53, i32 1;
    i1 %61 = icmp sgt i32 %16, i32 %60;
    cbr i1 %61(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %62 = load i32* %20;
    i32 %63 = add i32 %62, i32 -1;
    cbr i1 %19(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^while.body2:
    i32 %64 = phi [^scalar.final, i32 %14] [^while.body2, i32 %93];
    i32* %65 = getelementptr &(i32* %3)[i32 %64];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %5)[i32 %66];
    i32* %68 = getelementptr &(i32* %7)[i32 %64];
    i32 %69 = load i32* %68;
    i32 %70 = mul i32 %63, i32 %69;
    atomicadd i32* %67, i32 %70;
    i32* %72 = getelementptr &(i32* %65)[i64 1];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %5)[i32 %73];
    i32* %75 = getelementptr &(i32* %68)[i64 1];
    i32 %76 = load i32* %75;
    i32 %77 = mul i32 %63, i32 %76;
    atomicadd i32* %74, i32 %77;
    i32* %79 = getelementptr &(i32* %65)[i64 2];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %5)[i32 %80];
    i32* %82 = getelementptr &(i32* %68)[i64 2];
    i32 %83 = load i32* %82;
    i32 %84 = mul i32 %63, i32 %83;
    atomicadd i32* %81, i32 %84;
    i32* %86 = getelementptr &(i32* %65)[i64 3];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %5)[i32 %87];
    i32* %89 = getelementptr &(i32* %68)[i64 3];
    i32 %90 = load i32* %89;
    i32 %91 = mul i32 %63, i32 %90;
    atomicadd i32* %88, i32 %91;
    i32 %93 = add i32 %64, i32 4;
    i1 %94 = icmp sgt i32 %21, i32 %93;
    cbr i1 %94(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^scalar.header1:
    i32 %95 = phi [^scalar.final, i32 %14] [^while.body2, i32 %93];
    i1 %96 = icmp sgt i32 %16, i32 %95;
    cbr i1 %96(prob = 0.75), ^while.body3, ^b2;
  ^while.body3 {scalar}:
    i32 %97 = phi [^scalar.header1, i32 %95] [^while.body3, i32 %105];
    i32* %98 = getelementptr &(i32* %3)[i32 %97];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %5)[i32 %99];
    i32* %101 = getelementptr &(i32* %7)[i32 %97];
    i32 %102 = load i32* %101;
    i32 %103 = mul i32 %63, i32 %102;
    atomicadd i32* %100, i32 %103;
    i32 %105 = add i32 %97, i32 1;
    i1 %106 = icmp sgt i32 %16, i32 %105;
    cbr i1 %106(prob = 0.75), ^while.body3, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_3, align 8;
