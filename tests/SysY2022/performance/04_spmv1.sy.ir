internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i1 %14 = icmp sgt i32 %12, i32 4;
    i32 %15 = add i32 %2, i32 -5;
    i1 %16 = icmp sgt i32 %15, i32 16;
    i1 %17 = icmp sgt i32 %12, i32 20;
    i32 %18 = add i32 %2, i32 -21;
    i32 %19 = add i32 %2, i32 -17;
    [100010 * i32]* %20 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %21 = getelementptr &([100010 * i32]* %20)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^entry, i32 0] [^while.body10, i32 %118];
    cbr i1 %13(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %14(prob = 0.941176), ^super.header1, ^while.body1;
  ^while.header:
    i32 %23 = phi [^while.body, i32 0] [^while.body1, i32 0] [^while.body2, i32 %29] [^while.body16, i32 %29];
    i1 %24 = icmp sgt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body2, ^while.body3;
  ^super.header1:
    cbr i1 %16(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body1 {scalar}:
    i32 %25 = phi [^super.header, i32 0] [^while.body1, i32 %27] [^while.body5, i32 %59];
    i32* %26 = getelementptr &(i32* %21)[i32 %25];
    store i32* %26 with i32 0;
    i32 %27 = add i32 %25, i32 1;
    i1 %28 = icmp sgt i32 %12, i32 %27;
    cbr i1 %28(prob = 0.75), ^while.body1, ^while.header;
  ^while.body2:
    i32 %29 = add i32 %23, i32 1;
    i32* %30 = getelementptr &(i32* %1)[i32 %29];
    i32* %31 = getelementptr &(i32* %1)[i32 %23];
    i32 %32 = load i32* %31;
    i32 %33 = load i32* %30;
    i1 %34 = icmp slt i32 %32, i32 %33;
    cbr i1 %34(prob = 0.984615), ^super.header2, ^while.header;
  ^while.body3:
    cbr i1 %13(prob = 0.984615), ^super.header3, ^while.header1;
  ^while.body4:
    i32 %35 = phi [^super.header1, i32 0] [^while.body4, i32 %52];
    i32* %36 = getelementptr &(i32* %21)[i32 %35];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %36)[i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %36)[i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %36)[i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %36)[i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %36)[i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %36)[i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %36)[i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %36)[i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %36)[i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %36)[i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %36)[i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %36)[i64 15];
    store i32* %51 with i32 0;
    i32 %52 = add i32 %35, i32 16;
    i1 %53 = icmp sgt i32 %18, i32 %52;
    cbr i1 %53(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body5 {scalar}:
    i32 %54 = phi [^super.header1, i32 0] [^while.body4, i32 %52] [^while.body5, i32 %59];
    i32* %55 = getelementptr &(i32* %21)[i32 %54];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %55)[i64 1];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %55)[i64 2];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %55)[i64 3];
    store i32* %58 with i32 0;
    i32 %59 = add i32 %54, i32 4;
    i1 %60 = icmp sgt i32 %15, i32 %59;
    cbr i1 %60(prob = 0.75), ^while.body5, ^while.body1;
  ^super.header2:
    i32 %61 = add i32 %32, i32 4;
    i1 %62 = icmp sgt i32 %33, i32 %61;
    i32* %63 = getelementptr &(i32* %10)[i32 %23];
    i32 %64 = add i32 %33, i32 -4;
    cbr i1 %62(prob = 0.941176), ^while.body6, ^while.body7;
  ^super.header3:
    cbr i1 %14(prob = 0.941176), ^super.header4, ^while.body8;
  ^while.header1:
    i32 %65 = phi [^while.body3, i32 0] [^while.body8, i32 0] [^while.body9, i32 %112] [^while.body18, i32 %112];
    i1 %66 = icmp sgt i32 %12, i32 %65;
    cbr i1 %66(prob = 0.984615), ^while.body9, ^while.body10;
  ^while.body6:
    i32 %67 = phi [^super.header2, i32 %32] [^while.body6, i32 %96];
    i32* %68 = getelementptr &(i32* %4)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %21)[i32 %69];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %7)[i32 %67];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %71, i32 %73;
    store i32* %70 with i32 %74;
    i32* %75 = getelementptr &(i32* %68)[i64 1];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %21)[i32 %76];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %72)[i64 1];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %78, i32 %80;
    store i32* %77 with i32 %81;
    i32* %82 = getelementptr &(i32* %68)[i64 2];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %21)[i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %72)[i64 2];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %85, i32 %87;
    store i32* %84 with i32 %88;
    i32* %89 = getelementptr &(i32* %68)[i64 3];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %21)[i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %72)[i64 3];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    store i32* %91 with i32 %95;
    i32 %96 = add i32 %67, i32 4;
    i1 %97 = icmp sgt i32 %64, i32 %96;
    cbr i1 %97(prob = 0.941176), ^while.body6, ^while.body7;
  ^super.header4:
    cbr i1 %17(prob = 0.941176), ^while.body11, ^while.body12;
  ^while.body7 {scalar}:
    i32 %98 = phi [^super.header2, i32 %32] [^while.body6, i32 %96] [^while.body7, i32 %106];
    i32* %99 = getelementptr &(i32* %4)[i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %21)[i32 %100];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %7)[i32 %98];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    store i32* %101 with i32 %105;
    i32 %106 = add i32 %98, i32 1;
    i1 %107 = icmp sgt i32 %33, i32 %106;
    cbr i1 %107(prob = 0.75), ^while.body7, ^indirect;
  ^while.body8 {scalar}:
    i32 %108 = phi [^super.header3, i32 0] [^while.body8, i32 %110] [^while.body12, i32 %141];
    i32* %109 = getelementptr &(i32* %10)[i32 %108];
    store i32* %109 with i32 0;
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp sgt i32 %12, i32 %110;
    cbr i1 %111(prob = 0.75), ^while.body8, ^while.header1;
  ^while.body9:
    i32 %112 = add i32 %65, i32 1;
    i32* %113 = getelementptr &(i32* %1)[i32 %112];
    i32* %114 = getelementptr &(i32* %1)[i32 %65];
    i32 %115 = load i32* %114;
    i32 %116 = load i32* %113;
    i1 %117 = icmp slt i32 %115, i32 %116;
    cbr i1 %117(prob = 0.984615), ^super.header5, ^while.header1;
  ^while.body10:
    i32 %118 = add i32 %22, i32 1;
    i1 %119 = icmp slt i32 %118, i32 100;
    cbr i1 %119(prob = 0.99), ^while.body, ^b;
  ^while.body11:
    i32 %120 = phi [^super.header4, i32 0] [^while.body11, i32 %140];
    i32 %121 = phi [^super.header4, i32 4] [^while.body11, i32 %138];
    i32* %122 = getelementptr &(i32* %10)[i32 %120];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %122)[i64 1];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %122)[i64 2];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %122)[i64 3];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %10)[i32 %121];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %126)[i64 1];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %126)[i64 2];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %126)[i64 3];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %126)[i64 4];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %126)[i64 5];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %126)[i64 6];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %126)[i64 7];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %126)[i64 8];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %126)[i64 9];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %126)[i64 10];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %126)[i64 11];
    store i32* %137 with i32 0;
    i32 %138 = add i32 %121, i32 16;
    i1 %139 = icmp sgt i32 %19, i32 %138;
    i32 %140 = add i32 %121, i32 12;
    cbr i1 %139(prob = 0.941176), ^while.body11, ^while.body12;
  ^while.body12 {scalar}:
    i32 %141 = phi [^super.header4, i32 4] [^while.body11, i32 %138] [^while.body12, i32 %147];
    i32 %142 = phi [^super.header4, i32 0] [^while.body11, i32 %140] [^while.body12, i32 %141];
    i32* %143 = getelementptr &(i32* %10)[i32 %142];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %143)[i64 1];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %143)[i64 2];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %143)[i64 3];
    store i32* %146 with i32 0;
    i32 %147 = add i32 %141, i32 4;
    i1 %148 = icmp sgt i32 %12, i32 %147;
    cbr i1 %148(prob = 0.75), ^while.body12, ^while.body8;
  ^indirect:
    i32 %149 = load i32* %63;
    i32 %150 = add i32 %149, i32 -1;
    cbr i1 %62(prob = 0.941176), ^while.body14, ^while.body16;
  ^super.header5:
    i32 %151 = add i32 %115, i32 4;
    i1 %152 = icmp sgt i32 %116, i32 %151;
    i32* %153 = getelementptr &(i32* %21)[i32 %65];
    cbr i1 %152(prob = 0.941176), ^while.body13, ^while.body15;
  ^b:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %21);
    ret i32 0;
  ^while.body13:
    i32 %154 = phi [^super.header5, i32 %151] [^while.body13, i32 %184];
    i32 %155 = phi [^super.header5, i32 %115] [^while.body13, i32 %154];
    i32* %156 = getelementptr &(i32* %4)[i32 %155];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %10)[i32 %157];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %7)[i32 %155];
    i32 %161 = load i32* %160;
    i32 %162 = add i32 %159, i32 %161;
    store i32* %158 with i32 %162;
    i32* %163 = getelementptr &(i32* %156)[i64 1];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %10)[i32 %164];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %160)[i64 1];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %166, i32 %168;
    store i32* %165 with i32 %169;
    i32* %170 = getelementptr &(i32* %156)[i64 2];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %10)[i32 %171];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %160)[i64 2];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %173, i32 %175;
    store i32* %172 with i32 %176;
    i32* %177 = getelementptr &(i32* %156)[i64 3];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %10)[i32 %178];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &(i32* %160)[i64 3];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    store i32* %179 with i32 %183;
    i32 %184 = add i32 %154, i32 4;
    i1 %185 = icmp sgt i32 %116, i32 %184;
    cbr i1 %185(prob = 0.941176), ^while.body13, ^while.body15;
  ^while.body14:
    i32 %186 = phi [^indirect, i32 %61] [^while.body14, i32 %220];
    i32 %187 = phi [^indirect, i32 %32] [^while.body14, i32 %186];
    i32* %188 = getelementptr &(i32* %4)[i32 %187];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %21)[i32 %189];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %7)[i32 %187];
    i32 %193 = load i32* %192;
    i32 %194 = mul i32 %150, i32 %193;
    i32 %195 = add i32 %191, i32 %194;
    store i32* %190 with i32 %195;
    i32* %196 = getelementptr &(i32* %188)[i64 1];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %21)[i32 %197];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &(i32* %192)[i64 1];
    i32 %201 = load i32* %200;
    i32 %202 = mul i32 %150, i32 %201;
    i32 %203 = add i32 %199, i32 %202;
    store i32* %198 with i32 %203;
    i32* %204 = getelementptr &(i32* %188)[i64 2];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %21)[i32 %205];
    i32 %207 = load i32* %206;
    i32* %208 = getelementptr &(i32* %192)[i64 2];
    i32 %209 = load i32* %208;
    i32 %210 = mul i32 %150, i32 %209;
    i32 %211 = add i32 %207, i32 %210;
    store i32* %206 with i32 %211;
    i32* %212 = getelementptr &(i32* %188)[i64 3];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %21)[i32 %213];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %192)[i64 3];
    i32 %217 = load i32* %216;
    i32 %218 = mul i32 %150, i32 %217;
    i32 %219 = add i32 %215, i32 %218;
    store i32* %214 with i32 %219;
    i32 %220 = add i32 %186, i32 4;
    i1 %221 = icmp sgt i32 %33, i32 %220;
    cbr i1 %221(prob = 0.941176), ^while.body14, ^while.body16;
  ^while.body15 {scalar}:
    i32 %222 = phi [^super.header5, i32 %115] [^while.body13, i32 %154] [^while.body15, i32 %230];
    i32* %223 = getelementptr &(i32* %4)[i32 %222];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %10)[i32 %224];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %7)[i32 %222];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %226, i32 %228;
    store i32* %225 with i32 %229;
    i32 %230 = add i32 %222, i32 1;
    i1 %231 = icmp sgt i32 %116, i32 %230;
    cbr i1 %231(prob = 0.75), ^while.body15, ^indirect1;
  ^while.body16 {scalar}:
    i32 %232 = phi [^indirect, i32 %32] [^while.body14, i32 %186] [^while.body16, i32 %241];
    i32* %233 = getelementptr &(i32* %4)[i32 %232];
    i32 %234 = load i32* %233;
    i32* %235 = getelementptr &(i32* %21)[i32 %234];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &(i32* %7)[i32 %232];
    i32 %238 = load i32* %237;
    i32 %239 = mul i32 %150, i32 %238;
    i32 %240 = add i32 %236, i32 %239;
    store i32* %235 with i32 %240;
    i32 %241 = add i32 %232, i32 1;
    i1 %242 = icmp sgt i32 %33, i32 %241;
    cbr i1 %242(prob = 0.75), ^while.body16, ^while.header;
  ^indirect1:
    i32 %243 = load i32* %153;
    i32 %244 = add i32 %243, i32 -1;
    cbr i1 %152(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body17:
    i32 %245 = phi [^indirect1, i32 %151] [^while.body17, i32 %279];
    i32 %246 = phi [^indirect1, i32 %115] [^while.body17, i32 %245];
    i32* %247 = getelementptr &(i32* %4)[i32 %246];
    i32 %248 = load i32* %247;
    i32* %249 = getelementptr &(i32* %10)[i32 %248];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &(i32* %7)[i32 %246];
    i32 %252 = load i32* %251;
    i32 %253 = mul i32 %244, i32 %252;
    i32 %254 = add i32 %250, i32 %253;
    store i32* %249 with i32 %254;
    i32* %255 = getelementptr &(i32* %247)[i64 1];
    i32 %256 = load i32* %255;
    i32* %257 = getelementptr &(i32* %10)[i32 %256];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &(i32* %251)[i64 1];
    i32 %260 = load i32* %259;
    i32 %261 = mul i32 %244, i32 %260;
    i32 %262 = add i32 %258, i32 %261;
    store i32* %257 with i32 %262;
    i32* %263 = getelementptr &(i32* %247)[i64 2];
    i32 %264 = load i32* %263;
    i32* %265 = getelementptr &(i32* %10)[i32 %264];
    i32 %266 = load i32* %265;
    i32* %267 = getelementptr &(i32* %251)[i64 2];
    i32 %268 = load i32* %267;
    i32 %269 = mul i32 %244, i32 %268;
    i32 %270 = add i32 %266, i32 %269;
    store i32* %265 with i32 %270;
    i32* %271 = getelementptr &(i32* %247)[i64 3];
    i32 %272 = load i32* %271;
    i32* %273 = getelementptr &(i32* %10)[i32 %272];
    i32 %274 = load i32* %273;
    i32* %275 = getelementptr &(i32* %251)[i64 3];
    i32 %276 = load i32* %275;
    i32 %277 = mul i32 %244, i32 %276;
    i32 %278 = add i32 %274, i32 %277;
    store i32* %273 with i32 %278;
    i32 %279 = add i32 %245, i32 4;
    i1 %280 = icmp sgt i32 %116, i32 %279;
    cbr i1 %280(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body18 {scalar}:
    i32 %281 = phi [^indirect1, i32 %115] [^while.body17, i32 %245] [^while.body18, i32 %290];
    i32* %282 = getelementptr &(i32* %4)[i32 %281];
    i32 %283 = load i32* %282;
    i32* %284 = getelementptr &(i32* %10)[i32 %283];
    i32 %285 = load i32* %284;
    i32* %286 = getelementptr &(i32* %7)[i32 %281];
    i32 %287 = load i32* %286;
    i32 %288 = mul i32 %244, i32 %287;
    i32 %289 = add i32 %285, i32 %288;
    store i32* %284 with i32 %289;
    i32 %290 = add i32 %281, i32 1;
    i1 %291 = icmp sgt i32 %116, i32 %290;
    cbr i1 %291(prob = 0.75), ^while.body18, ^while.header1;
}
