internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = sub i32 %1, i32 1;
    store i32* %n with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i32 0][i32 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n;
    call (i32) -> void @starttime(i32 39);
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %i, i32* %n, i32 %9, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([100010 * i32]* @b)[i32 0][i32 0];
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i32* %i = alloc i32;
    i1 %1 = scmp lt i32 0, i32 %arg2;
    cbr i1 %1, [ ^while.body1 i32* %n, i32* %i, i32* %arg1, i32* %arg, i32 0, i32 %arg2, i32 0, i32* %0 ], [ ^b i32* %n, i32* %i, i32* %arg1, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg2, i32* %0 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([100010 * i32]* @b)[i32 0][i32 %arg4];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg3;
    i32 %2 = load i32* %arg2;
    i32 %3 = add i32 %arg6, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg5;
    cbr i1 %4, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %3, i32 %arg5, i32 %3, i32* %arg7 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %2, i32 %1, i32 %arg5, i32* %arg7 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    store i32* %arg1 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg6;
    cbr i1 %0, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 0, i32* %arg7 ], [ ^while.body3 i32* %arg3, i32* %arg2, i32 %arg4, i32 %arg5, i32* %arg7 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 1;
    i32* %3 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %1, i32 %1, i32* %arg8 ], [ ^b1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8 ];
^while.body3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i32* %i = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body4 i32* %n, i32* %i, i32* %arg, i32* %arg1, i32 0, i32 %arg2, i32 0, i32* %arg4 ], [ ^b2 i32* %n, i32* %i, i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg2, i32* %arg4 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %0, i32 %arg5, i32* %arg6 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 1;
    i32* %3 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg7, i32 %1, i32 %1, i32* %arg8 ], [ ^b3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([100010 * i32]* @a)[i32 0][i32 %arg4];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg2;
    i32 %2 = load i32* %arg3;
    i32 %3 = add i32 %arg6, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg5;
    cbr i1 %4, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %3, i32 %arg5, i32 %3, i32* %arg7 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %2, i32 %1, i32 %arg5, i32* %arg7 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    store i32* %arg1 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg6;
    cbr i1 %0, [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 0, i32* %arg7 ], [ ^while.body7 i32* %arg3, i32* %arg2, i32 %arg4, i32 %arg5, i32* %arg7 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 %arg6, i32* %arg7 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([100010 * i32]* @b)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 %arg4];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %3, i32 %5;
    store i32* %2 with i32 %6;
    i32 %7 = load i32* %arg1;
    i32 %8 = load i32* %arg3;
    i32 %9 = load i32* %arg2;
    i32 %10 = add i32 %arg6, i32 1;
    i32 %11 = add i32 %arg5, i32 1;
    i32* %12 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %10, i32 %13;
    cbr i1 %14, [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %10, i32 %arg5, i32 %10, i32* %arg7 ], [ ^b1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %9, i32 %8, i32 %7, i32 %arg5, i32* %arg7 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0, i32* %arg8 ], [ ^while.body3 i32* %arg3, i32* %arg2, i32 %arg4, i32 %arg5, i32* %arg8 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 1;
    i32* %3 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %1, i32 %1, i32* %arg8 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8 ];
^while.body7(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 100;
    cbr i1 %1, [ ^while.body i32* %arg1, i32* %arg, i32 %arg2, i32 %0 ], [ ^b5 i32 %arg2, i32* %arg4 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %0, i32 %arg5, i32* %arg6 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([100010 * i32]* @b)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 %arg5];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &([100010 * i32]* @a)[i32 0][i32 %arg4];
    i32 %7 = load i32* %6;
    i32 %8 = sub i32 %7, i32 1;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %3, i32 %9;
    store i32* %2 with i32 %10;
    i32 %11 = load i32* %arg1;
    i32 %12 = load i32* %arg3;
    i32 %13 = load i32* %arg2;
    i32 %14 = add i32 %arg7, i32 1;
    i32 %15 = add i32 %arg6, i32 1;
    i32* %16 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp lt i32 %14, i32 %17;
    cbr i1 %18, [ ^while.body8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg6, i32 %14, i32 %arg6, i32 %14, i32* %arg8 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %13, i32 %12, i32 %11, i32 %arg6, i32* %arg8 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 1;
    i32* %3 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %arg7, i32 %1, i32 %1, i32* %arg8 ], [ ^b6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8 ];
^b5(i32 %arg, i32* %arg1):
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %arg1);
    ret i32 0;
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 %arg6, i32* %arg7 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([100010 * i32]* @a)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 %arg4];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %3, i32 %5;
    store i32* %2 with i32 %6;
    i32 %7 = load i32* %arg1;
    i32 %8 = load i32* %arg2;
    i32 %9 = load i32* %arg3;
    i32 %10 = add i32 %arg6, i32 1;
    i32 %11 = add i32 %arg5, i32 1;
    i32* %12 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %10, i32 %13;
    cbr i1 %14, [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %10, i32 %arg5, i32 %10, i32* %arg7 ], [ ^b4 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %9, i32 %8, i32 %7, i32 %arg5, i32* %arg7 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg1 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1, [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0, i32* %arg8 ], [ ^while.body7 i32* %arg3, i32* %arg2, i32 %arg4, i32 %arg5, i32* %arg8 ];
^while.body10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8):
    i32* %0 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([100010 * i32]* @a)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 %arg5];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &([100010 * i32]* @b)[i32 0][i32 %arg4];
    i32 %7 = load i32* %6;
    i32 %8 = sub i32 %7, i32 1;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %3, i32 %9;
    store i32* %2 with i32 %10;
    i32 %11 = load i32* %arg1;
    i32 %12 = load i32* %arg2;
    i32 %13 = load i32* %arg3;
    i32 %14 = add i32 %arg7, i32 1;
    i32 %15 = add i32 %arg6, i32 1;
    i32* %16 = getelementptr &([100010 * i32]* @x)[i32 0][i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp lt i32 %14, i32 %17;
    cbr i1 %18, [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg6, i32 %14, i32 %arg6, i32 %14, i32* %arg8 ], [ ^b6 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32 %13, i32 %12, i32 %11, i32 %arg6, i32* %arg8 ];
}
