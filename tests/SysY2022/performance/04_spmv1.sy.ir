internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = sub i32 %1, i32 1;
    store i32* %n with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i32 0][i32 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n;
    call (i32) -> void @starttime(i32 39);
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %i, i32* %n, i32 %9, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([100010 * i32]* @x)[i32 0][i32 0];
    i32* %1 = getelementptr &([3000000 * i32]* @y)[i32 0][i32 0];
    i32* %2 = getelementptr &([3000000 * i32]* @v)[i32 0][i32 0];
    i32* %3 = getelementptr &([100010 * i32]* @a)[i32 0][i32 0];
    i32* %4 = getelementptr &([100010 * i32]* @b)[i32 0][i32 0];
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i32** %xptr = alloc i32*;
    i32** %yidx = alloc i32*;
    i32** %vals = alloc i32*;
    i32** %b = alloc i32*;
    i32** %x = alloc i32*;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i1 %5 = scmp lt i32 0, i32 %arg2;
    cbr i1 %5, [ ^while.body1 i32** %vals, i32** %yidx, i32** %b, i32** %xptr, i32* %k, i32* %j, i32* %n, i32** %x, i32* %i, i32* %arg1, i32* %0, i32* %4, i32* %1, i32* %2, i32* %3, i32* %arg, i32* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32 0, i32 %arg2 ], [ ^b i32* %n, i32* %j, i32** %vals, i32** %x, i32** %yidx, i32** %b, i32** %xptr, i32* %k, i32* %i, i32* %arg1, i32* %0, i32* %4, i32* %1, i32* %2, i32* %3, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg2, i32* %0, i32* %1, i32* %2, i32* %3, i32* %4 ];
^while.body1(i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %arg22):
    i32* %0 = getelementptr &(i32* %arg20)[i32 %arg21];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg15;
    i32 %2 = load i32* %arg9;
    i32 %3 = add i32 %arg21, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg22;
    cbr i1 %4, [ ^while.body1 i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %3, i32 %arg22 ], [ ^b i32* %arg6, i32* %arg5, i32** %arg, i32** %arg7, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %2, i32 %1, i32 %arg22, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20 ];
^b(i32* %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23):
    store i32* %arg8 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg18;
    cbr i1 %0, [ ^while.body2 i32* %arg7, i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32* %arg, i32* %arg1, i32** %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 0 ], [ ^b1 i32* %arg8, i32** %arg6, i32* %arg, i32* %arg1, i32** %arg4, i32** %arg2, i32** %arg5, i32* %arg7, i32** %arg3, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17 ];
^while.body2(i32* %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24):
    i32* %0 = getelementptr &(i32* %arg19)[i32 %arg24];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg24, i32 1;
    i32* %3 = getelementptr &(i32* %arg19)[i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect i32* %arg, i32** %arg4, i32* %arg8, i32** %arg7, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %1 ], [ ^b2 i32* %arg, i32** %arg4, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24 ];
^b1(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32** %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    free i32** %arg8;
    free i32* %arg7;
    free i32** %arg6;
    free i32** %arg5;
    free i32** %arg4;
    free i32* %arg3;
    free i32** %arg1;
    free i32* %arg;
    free i32* %arg2;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg16;
    i32** %xptr = alloc i32*;
    i32** %yidx = alloc i32*;
    i32** %vals = alloc i32*;
    i32** %b = alloc i32*;
    i32** %x = alloc i32*;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg16;
    cbr i1 %0, [ ^while.body3 i32** %vals, i32** %yidx, i32** %b, i32** %xptr, i32* %k, i32* %j, i32* %n, i32** %x, i32* %i, i32* %arg15, i32* %arg9, i32* %arg10, i32* %arg12, i32* %arg13, i32* %arg11, i32* %arg14, i32 0, i32 %arg16 ], [ ^b3 i32* %n, i32* %j, i32** %vals, i32** %x, i32** %yidx, i32** %b, i32** %xptr, i32* %k, i32* %i, i32* %arg15, i32* %arg9, i32 %arg16, i32 %arg17, i32 %arg16, i32* %arg10, i32* %arg12, i32* %arg13, i32* %arg11, i32* %arg14 ];
^indirect(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body4 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %0 ];
^b2(i32* %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24):
    i32* %0 = getelementptr &(i32* %arg19)[i32 %arg24];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg24, i32 1;
    i32* %3 = getelementptr &(i32* %arg19)[i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^while.body5 i32* %arg, i32** %arg7, i32** %arg1, i32* %arg8, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24, i32 %1 ], [ ^b4 i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg1, i32** %arg7, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24 ];
^while.body3(i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    i32* %0 = getelementptr &(i32* %arg15)[i32 %arg16];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg9;
    i32 %2 = load i32* %arg10;
    i32 %3 = add i32 %arg16, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg17;
    cbr i1 %4, [ ^while.body3 i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %3, i32 %arg17 ], [ ^b3 i32* %arg6, i32* %arg5, i32** %arg, i32** %arg7, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg4, i32* %arg8, i32* %arg9, i32* %arg10, i32 %2, i32 %1, i32 %arg17, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15 ];
^b3(i32* %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18):
    store i32* %arg8 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg13;
    cbr i1 %0, [ ^while.body6 i32* %arg7, i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32* %arg, i32* %arg1, i32** %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 0 ], [ ^b5 i32* %arg8, i32** %arg6, i32* %arg, i32* %arg1, i32** %arg4, i32** %arg2, i32** %arg5, i32* %arg7, i32** %arg3, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ];
^while.body4(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %arg22):
    i32* %0 = getelementptr &(i32* %arg17)[i32 %arg21];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg20)[i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %arg18)[i32 %arg21];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %3, i32 %5;
    store i32* %2 with i32 %6;
    i32 %7 = load i32* %arg7;
    i32 %8 = load i32* %arg15;
    i32 %9 = load i32* %arg9;
    i32 %10 = add i32 %arg21, i32 1;
    i32 %11 = add i32 %arg22, i32 1;
    i32* %12 = getelementptr &(i32* %arg16)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %10, i32 %13;
    cbr i1 %14, [ ^while.body4 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %10, i32 %arg22 ], [ ^b2 i32* %arg, i32** %arg1, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32** %arg3, i32* %arg2, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %9, i32 %8, i32 %7, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg22 ];
^while.body5(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %arg22):
    i32* %0 = getelementptr &(i32* %arg17)[i32 %arg22];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg20)[i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %arg18)[i32 %arg22];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &(i32* %arg19)[i32 %arg21];
    i32 %7 = load i32* %6;
    i32 %8 = sub i32 %7, i32 1;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %3, i32 %9;
    store i32* %2 with i32 %10;
    i32 %11 = load i32* %arg3;
    i32 %12 = load i32* %arg7;
    i32 %13 = load i32* %arg15;
    i32 %14 = load i32* %arg9;
    i32 %15 = add i32 %arg22, i32 1;
    i32 %16 = add i32 %arg21, i32 1;
    i32* %17 = getelementptr &(i32* %arg16)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp lt i32 %15, i32 %18;
    cbr i1 %19, [ ^while.body5 i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %11, i32 %15 ], [ ^b4 i32** %arg4, i32** %arg5, i32** %arg6, i32** %arg2, i32** %arg1, i32* %arg, i32* %arg8, i32* %arg7, i32* %arg3, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %14, i32 %13, i32 %12, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %11 ];
^b4(i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %arg24):
    i32 %0 = add i32 %arg24, i32 1;
    store i32* %arg8 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg18;
    cbr i1 %1, [ ^while.body2 i32* %arg5, i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg7, i32* %arg6, i32** %arg4, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32 %0 ], [ ^b1 i32* %arg8, i32** %arg4, i32* %arg7, i32* %arg6, i32** %arg2, i32** %arg, i32** %arg3, i32* %arg5, i32** %arg1, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17 ];
^while.body6(i32* %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19):
    i32* %0 = getelementptr &(i32* %arg14)[i32 %arg19];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg19, i32 1;
    i32* %3 = getelementptr &(i32* %arg14)[i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect1 i32* %arg, i32** %arg4, i32* %arg8, i32** %arg7, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg9, i32* %arg10, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %1 ], [ ^b6 i32* %arg, i32** %arg4, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19 ];
^b5(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32** %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    free i32** %arg8;
    free i32* %arg7;
    free i32** %arg6;
    free i32** %arg5;
    free i32** %arg4;
    free i32* %arg3;
    free i32** %arg1;
    free i32* %arg;
    free i32* %arg2;
    i32 %0 = add i32 %arg12, i32 1;
    store i32* %arg9 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 100;
    cbr i1 %1, [ ^while.body i32* %arg9, i32* %arg10, i32 %arg11, i32 %0 ], [ ^b7 i32 %arg11 ];
^indirect1(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body7 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %0 ];
^b6(i32* %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19):
    i32* %0 = getelementptr &(i32* %arg14)[i32 %arg19];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg19, i32 1;
    i32* %3 = getelementptr &(i32* %arg14)[i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp lt i32 %1, i32 %4;
    cbr i1 %5, [ ^while.body8 i32* %arg, i32** %arg7, i32** %arg1, i32* %arg8, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg9, i32* %arg10, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %1 ], [ ^b8 i32** %arg2, i32** %arg3, i32** %arg4, i32** %arg1, i32** %arg7, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19 ];
^b7(i32 %arg):
    call (i32) -> void @stoptime(i32 47);
    i32* %0 = getelementptr &([100010 * i32]* @b)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %0);
    ret i32 0;
^while.body7(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    i32* %0 = getelementptr &(i32* %arg12)[i32 %arg16];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg15)[i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %arg13)[i32 %arg16];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %3, i32 %5;
    store i32* %2 with i32 %6;
    i32 %7 = load i32* %arg7;
    i32 %8 = load i32* %arg9;
    i32 %9 = load i32* %arg10;
    i32 %10 = add i32 %arg16, i32 1;
    i32 %11 = add i32 %arg17, i32 1;
    i32* %12 = getelementptr &(i32* %arg11)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %10, i32 %13;
    cbr i1 %14, [ ^while.body7 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %10, i32 %arg17 ], [ ^b6 i32* %arg, i32** %arg1, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32** %arg3, i32* %arg2, i32* %arg9, i32* %arg10, i32 %9, i32 %8, i32 %7, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg17 ];
^while.body8(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    i32* %0 = getelementptr &(i32* %arg12)[i32 %arg17];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg15)[i32 %1];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %arg13)[i32 %arg17];
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &(i32* %arg14)[i32 %arg16];
    i32 %7 = load i32* %6;
    i32 %8 = sub i32 %7, i32 1;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %3, i32 %9;
    store i32* %2 with i32 %10;
    i32 %11 = load i32* %arg3;
    i32 %12 = load i32* %arg7;
    i32 %13 = load i32* %arg9;
    i32 %14 = load i32* %arg10;
    i32 %15 = add i32 %arg17, i32 1;
    i32 %16 = add i32 %arg16, i32 1;
    i32* %17 = getelementptr &(i32* %arg11)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp lt i32 %15, i32 %18;
    cbr i1 %19, [ ^while.body8 i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3, i32** %arg4, i32** %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %11, i32 %15 ], [ ^b8 i32** %arg4, i32** %arg5, i32** %arg6, i32** %arg2, i32** %arg1, i32* %arg, i32* %arg8, i32* %arg7, i32* %arg3, i32* %arg9, i32* %arg10, i32 %14, i32 %13, i32 %12, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %11 ];
^b8(i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg19):
    i32 %0 = add i32 %arg19, i32 1;
    store i32* %arg8 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg13;
    cbr i1 %1, [ ^while.body6 i32* %arg5, i32** %arg, i32** %arg1, i32** %arg2, i32** %arg3, i32* %arg7, i32* %arg6, i32** %arg4, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32 %0 ], [ ^b5 i32* %arg8, i32** %arg4, i32* %arg7, i32* %arg6, i32** %arg2, i32** %arg, i32** %arg3, i32* %arg5, i32** %arg1, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ];
}
