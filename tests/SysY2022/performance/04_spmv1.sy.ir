internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    i32* %9 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %10 = scmp gt i32 %2, i32 0;
    ubr ^while.body;
^while.body:
    i32 %11 = phi [^entry, i32 0] [^while.body11, i32 %151];
    cbr i1 %10(prob = 0.97), ^super.header, ^while.header;
^super.header:
    i32 %12 = phi [^while.body, i32 0] [^while.body1, i32 %13];
    i32 %13 = add i32 %12, i32 16;
    i1 %14 = scmp lt i32 %13, i32 %2;
    cbr i1 %14(prob = 0.67), ^while.body1, ^super.header1;
^while.header:
    i32 %15 = phi [^while.body, i32 0] [^b, i32 %36] [^while.body8, i32 %36] [^while.body9, i32 0];
    i1 %16 = scmp lt i32 %15, i32 %2;
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.body3;
^while.body1:
    i32* %17 = getelementptr &(i32* %9)[i32 %12];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %17)[i64 1];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %17)[i64 2];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %17)[i64 3];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %17)[i64 4];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %17)[i64 5];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %17)[i64 6];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %17)[i64 7];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %17)[i64 8];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %17)[i64 9];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %17)[i64 10];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %17)[i64 11];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %17)[i64 12];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %17)[i64 13];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %17)[i64 14];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %17)[i64 15];
    store i32* %32 with i32 0;
    ubr ^super.header;
^super.header1:
    i32 %33 = phi [^super.header, i32 %12] [^while.body4, i32 %34];
    i32 %34 = add i32 %33, i32 16;
    i1 %35 = scmp lt i32 %34, i32 %2;
    cbr i1 %35(prob = 0.67), ^while.body4, ^super.header2;
^while.body2:
    i32 %36 = add i32 %15, i32 1;
    i32* %37 = getelementptr &(i32* %0)[i32 %36];
    i32* %38 = getelementptr &(i32* %7)[i32 %15];
    i32* %39 = getelementptr &(i32* %0)[i32 %15];
    i32 %40 = load i32* %39;
    i32 %41 = load i32* %37;
    i1 %42 = scmp lt i32 %40, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body5, ^b;
^while.body3:
    cbr i1 %10(prob = 0.97), ^super.header3, ^while.header1;
^while.body4:
    i32* %43 = getelementptr &(i32* %9)[i32 %33];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %43)[i64 1];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %43)[i64 2];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %43)[i64 3];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %43)[i64 4];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %43)[i64 5];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %43)[i64 6];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %43)[i64 7];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %43)[i64 8];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %43)[i64 9];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %43)[i64 10];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %43)[i64 11];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %43)[i64 12];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %43)[i64 13];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %43)[i64 14];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %43)[i64 15];
    store i32* %58 with i32 0;
    ubr ^super.header1;
^while.body5:
    i32* %59 = getelementptr &(i32* %3)[i32 %40];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %9)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %5)[i32 %40];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    store i32* %61 with i32 %65;
    i32 %66 = add i32 %40, i32 1;
    i1 %67 = scmp lt i32 %66, i32 %41;
    cbr i1 %67(prob = 0.97), ^indirect1, ^indirect;
^super.header2:
    i32 %68 = phi [^super.header1, i32 %33] [^while.body6, i32 %69];
    i32 %69 = add i32 %68, i32 16;
    i1 %70 = scmp lt i32 %69, i32 %2;
    cbr i1 %70(prob = 0.67), ^while.body6, ^while.body9;
^b:
    i32 %71 = phi [^while.body2, i32 %41] [^indirect, i32 %95];
    i32 %72 = load i32* %39;
    i1 %73 = scmp lt i32 %72, i32 %71;
    cbr i1 %73(prob = 0.97), ^while.body8, ^while.header;
^super.header3:
    i32 %74 = phi [^while.body3, i32 0] [^while.body7, i32 %75];
    i32 %75 = add i32 %74, i32 16;
    i1 %76 = scmp lt i32 %75, i32 %2;
    cbr i1 %76(prob = 0.67), ^while.body7, ^super.header4;
^while.header1:
    i32 %77 = phi [^while.body3, i32 0] [^b1, i32 %144] [^while.body15, i32 %144] [^while.body16, i32 0];
    i1 %78 = scmp lt i32 %77, i32 %2;
    cbr i1 %78(prob = 0.97), ^while.body10, ^while.body11;
^while.body6:
    i32* %79 = getelementptr &(i32* %9)[i32 %68];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %79)[i64 1];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %79)[i64 2];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %79)[i64 3];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %79)[i64 4];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %79)[i64 5];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %79)[i64 6];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %79)[i64 7];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %79)[i64 8];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %79)[i64 9];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %79)[i64 10];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %79)[i64 11];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %79)[i64 12];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %79)[i64 13];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %79)[i64 14];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %79)[i64 15];
    store i32* %94 with i32 0;
    ubr ^super.header2;
^indirect:
    i32 %95 = load i32* %37;
    ubr ^b;
^while.body7:
    i32* %96 = getelementptr &(i32* %7)[i32 %74];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %96)[i64 1];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %96)[i64 2];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %96)[i64 3];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %96)[i64 4];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %96)[i64 5];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %96)[i64 6];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %96)[i64 7];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %96)[i64 8];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %96)[i64 9];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %96)[i64 10];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %96)[i64 11];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %96)[i64 12];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %96)[i64 13];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %96)[i64 14];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %96)[i64 15];
    store i32* %111 with i32 0;
    ubr ^super.header3;
^indirect1:
    i32 %112 = phi [^while.body5, i32 %66] [^indirect1, i32 %121];
    i32 %113 = load i32* %37;
    i32* %114 = getelementptr &(i32* %3)[i32 %112];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %9)[i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %5)[i32 %112];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %117, i32 %119;
    store i32* %116 with i32 %120;
    i32 %121 = add i32 %112, i32 1;
    i1 %122 = scmp lt i32 %121, i32 %113;
    cbr i1 %122(prob = 0.97), ^indirect1, ^indirect;
^while.body8:
    i32 %123 = phi [^b, i32 %72] [^while.body8, i32 %134];
    i32* %124 = getelementptr &(i32* %3)[i32 %123];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %9)[i32 %125];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %5)[i32 %123];
    i32 %129 = load i32* %128;
    i32 %130 = load i32* %38;
    i32 %131 = add i32 %130, i32 -1;
    i32 %132 = mul i32 %129, i32 %131;
    i32 %133 = add i32 %127, i32 %132;
    store i32* %126 with i32 %133;
    i32 %134 = add i32 %123, i32 1;
    i32 %135 = load i32* %37;
    i1 %136 = scmp lt i32 %134, i32 %135;
    cbr i1 %136(prob = 0.97), ^while.body8, ^while.header;
^while.body9:
    i32 %137 = phi [^super.header2, i32 %68] [^while.body9, i32 %139];
    i32* %138 = getelementptr &(i32* %9)[i32 %137];
    store i32* %138 with i32 0;
    i32 %139 = add i32 %137, i32 1;
    i1 %140 = scmp lt i32 %139, i32 %2;
    cbr i1 %140(prob = 0.97), ^while.body9, ^while.header;
^super.header4:
    i32 %141 = phi [^super.header3, i32 %74] [^while.body12, i32 %142];
    i32 %142 = add i32 %141, i32 16;
    i1 %143 = scmp lt i32 %142, i32 %2;
    cbr i1 %143(prob = 0.67), ^while.body12, ^super.header5;
^while.body10:
    i32 %144 = add i32 %77, i32 1;
    i32* %145 = getelementptr &(i32* %0)[i32 %144];
    i32* %146 = getelementptr &(i32* %9)[i32 %77];
    i32* %147 = getelementptr &(i32* %0)[i32 %77];
    i32 %148 = load i32* %147;
    i32 %149 = load i32* %145;
    i1 %150 = scmp lt i32 %148, i32 %149;
    cbr i1 %150(prob = 0.97), ^while.body13, ^b1;
^while.body11:
    i32 %151 = add i32 %11, i32 1;
    i1 %152 = scmp lt i32 %151, i32 100;
    cbr i1 %152(prob = 0.99), ^while.body, ^b2;
^while.body12:
    i32* %153 = getelementptr &(i32* %7)[i32 %141];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %153)[i64 1];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %153)[i64 2];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %153)[i64 3];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %153)[i64 4];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %153)[i64 5];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &(i32* %153)[i64 6];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %153)[i64 7];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %153)[i64 8];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %153)[i64 9];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %153)[i64 10];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %153)[i64 11];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %153)[i64 12];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %153)[i64 13];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &(i32* %153)[i64 14];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &(i32* %153)[i64 15];
    store i32* %168 with i32 0;
    ubr ^super.header4;
^while.body13:
    i32* %169 = getelementptr &(i32* %3)[i32 %148];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %7)[i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %5)[i32 %148];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %172, i32 %174;
    store i32* %171 with i32 %175;
    i32 %176 = add i32 %148, i32 1;
    i1 %177 = scmp lt i32 %176, i32 %149;
    cbr i1 %177(prob = 0.97), ^indirect3, ^indirect2;
^super.header5:
    i32 %178 = phi [^super.header4, i32 %141] [^while.body14, i32 %179];
    i32 %179 = add i32 %178, i32 16;
    i1 %180 = scmp lt i32 %179, i32 %2;
    cbr i1 %180(prob = 0.67), ^while.body14, ^while.body16;
^b1:
    i32 %181 = phi [^while.body10, i32 %149] [^indirect2, i32 %200];
    i32 %182 = load i32* %147;
    i1 %183 = scmp lt i32 %182, i32 %181;
    cbr i1 %183(prob = 0.97), ^while.body15, ^while.header1;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %9);
    ret i32 0;
^while.body14:
    i32* %184 = getelementptr &(i32* %7)[i32 %178];
    store i32* %184 with i32 0;
    i32* %185 = getelementptr &(i32* %184)[i64 1];
    store i32* %185 with i32 0;
    i32* %186 = getelementptr &(i32* %184)[i64 2];
    store i32* %186 with i32 0;
    i32* %187 = getelementptr &(i32* %184)[i64 3];
    store i32* %187 with i32 0;
    i32* %188 = getelementptr &(i32* %184)[i64 4];
    store i32* %188 with i32 0;
    i32* %189 = getelementptr &(i32* %184)[i64 5];
    store i32* %189 with i32 0;
    i32* %190 = getelementptr &(i32* %184)[i64 6];
    store i32* %190 with i32 0;
    i32* %191 = getelementptr &(i32* %184)[i64 7];
    store i32* %191 with i32 0;
    i32* %192 = getelementptr &(i32* %184)[i64 8];
    store i32* %192 with i32 0;
    i32* %193 = getelementptr &(i32* %184)[i64 9];
    store i32* %193 with i32 0;
    i32* %194 = getelementptr &(i32* %184)[i64 10];
    store i32* %194 with i32 0;
    i32* %195 = getelementptr &(i32* %184)[i64 11];
    store i32* %195 with i32 0;
    i32* %196 = getelementptr &(i32* %184)[i64 12];
    store i32* %196 with i32 0;
    i32* %197 = getelementptr &(i32* %184)[i64 13];
    store i32* %197 with i32 0;
    i32* %198 = getelementptr &(i32* %184)[i64 14];
    store i32* %198 with i32 0;
    i32* %199 = getelementptr &(i32* %184)[i64 15];
    store i32* %199 with i32 0;
    ubr ^super.header5;
^indirect2:
    i32 %200 = load i32* %145;
    ubr ^b1;
^indirect3:
    i32 %201 = phi [^while.body13, i32 %176] [^indirect3, i32 %210];
    i32 %202 = load i32* %145;
    i32* %203 = getelementptr &(i32* %3)[i32 %201];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &(i32* %7)[i32 %204];
    i32 %206 = load i32* %205;
    i32* %207 = getelementptr &(i32* %5)[i32 %201];
    i32 %208 = load i32* %207;
    i32 %209 = add i32 %206, i32 %208;
    store i32* %205 with i32 %209;
    i32 %210 = add i32 %201, i32 1;
    i1 %211 = scmp lt i32 %210, i32 %202;
    cbr i1 %211(prob = 0.97), ^indirect3, ^indirect2;
^while.body15:
    i32 %212 = phi [^b1, i32 %182] [^while.body15, i32 %223];
    i32* %213 = getelementptr &(i32* %3)[i32 %212];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &(i32* %7)[i32 %214];
    i32 %216 = load i32* %215;
    i32* %217 = getelementptr &(i32* %5)[i32 %212];
    i32 %218 = load i32* %217;
    i32 %219 = load i32* %146;
    i32 %220 = add i32 %219, i32 -1;
    i32 %221 = mul i32 %218, i32 %220;
    i32 %222 = add i32 %216, i32 %221;
    store i32* %215 with i32 %222;
    i32 %223 = add i32 %212, i32 1;
    i32 %224 = load i32* %145;
    i1 %225 = scmp lt i32 %223, i32 %224;
    cbr i1 %225(prob = 0.97), ^while.body15, ^while.header1;
^while.body16:
    i32 %226 = phi [^super.header5, i32 %178] [^while.body16, i32 %228];
    i32* %227 = getelementptr &(i32* %7)[i32 %226];
    store i32* %227 with i32 0;
    i32 %228 = add i32 %226, i32 1;
    i1 %229 = scmp lt i32 %228, i32 %2;
    cbr i1 %229(prob = 0.97), ^while.body16, ^while.header1;
}
