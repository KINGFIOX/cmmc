internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    i32* %9 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %10 = scmp gt i32 %2, i32 0;
    ubr ^while.body;
^while.body:
    i32 %11 = phi [^entry, i32 0] [^while.body7, i32 %68];
    cbr i1 %10(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %12 = phi [^while.body, i32 0] [^while.body1, i32 %14];
    i32* %13 = getelementptr &(i32* %9)[i32 %12];
    store i32* %13 with i32 0;
    i32 %14 = add i32 %12, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %2;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
^b:
    cbr i1 %10(prob = 0.97), ^while.body2, ^entry1;
^while.body2:
    i32 %16 = phi [^b, i32 0] [^b3, i32 %22];
    i32* %17 = getelementptr &(i32* %0)[i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %17)[i64 1];
    i32 %20 = load i32* %19;
    i1 %21 = scmp lt i32 %18, i32 %20;
    i32 %22 = add i32 %16, i32 1;
    i32* %23 = getelementptr &(i32* %7)[i32 %16];
    cbr i1 %21(prob = 0.97), ^while.body3, ^b1;
^entry1:
    cbr i1 %10(prob = 0.97), ^while.body4, ^b2;
^while.body3:
    i32 %24 = phi [^while.body2, i32 %20] [^indirect, i32 %42];
    i32 %25 = phi [^while.body2, i32 %18] [^indirect, i32 %33];
    i32* %26 = getelementptr &(i32* %3)[i32 %25];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %9)[i32 %27];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %5)[i32 %25];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %29, i32 %31;
    store i32* %28 with i32 %32;
    i32 %33 = add i32 %25, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %24;
    cbr i1 %34(prob = 0.97), ^indirect, ^indirect1;
^b1:
    i32 %35 = phi [^while.body2, i32 %18] [^indirect1, i32 %43];
    i32 %36 = phi [^while.body2, i32 %20] [^indirect1, i32 %44];
    i1 %37 = scmp lt i32 %35, i32 %36;
    cbr i1 %37(prob = 0.97), ^while.body5, ^b3;
^while.body4:
    i32 %38 = phi [^entry1, i32 0] [^while.body4, i32 %40];
    i32* %39 = getelementptr &(i32* %7)[i32 %38];
    store i32* %39 with i32 0;
    i32 %40 = add i32 %38, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %2;
    cbr i1 %41(prob = 0.97), ^while.body4, ^b2;
^b2:
    cbr i1 %10(prob = 0.97), ^while.body6, ^while.body7;
^indirect:
    i32 %42 = load i32* %19;
    ubr ^while.body3;
^indirect1:
    i32 %43 = load i32* %17;
    i32 %44 = load i32* %19;
    ubr ^b1;
^while.body5:
    i32 %45 = phi [^b1, i32 %35] [^while.body5, i32 %56];
    i32* %46 = getelementptr &(i32* %3)[i32 %45];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %9)[i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %5)[i32 %45];
    i32 %51 = load i32* %50;
    i32 %52 = load i32* %23;
    i32 %53 = add i32 %52, i32 -1;
    i32 %54 = mul i32 %51, i32 %53;
    i32 %55 = add i32 %49, i32 %54;
    store i32* %48 with i32 %55;
    i32 %56 = add i32 %45, i32 1;
    i32 %57 = load i32* %19;
    i1 %58 = scmp lt i32 %56, i32 %57;
    cbr i1 %58(prob = 0.97), ^while.body5, ^b3;
^b3:
    i1 %59 = scmp lt i32 %22, i32 %2;
    cbr i1 %59(prob = 0.97), ^while.body2, ^entry1;
^while.body6:
    i32 %60 = phi [^b2, i32 0] [^b6, i32 %66];
    i32* %61 = getelementptr &(i32* %0)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %61)[i64 1];
    i32 %64 = load i32* %63;
    i1 %65 = scmp lt i32 %62, i32 %64;
    i32 %66 = add i32 %60, i32 1;
    i32* %67 = getelementptr &(i32* %9)[i32 %60];
    cbr i1 %65(prob = 0.97), ^while.body8, ^b4;
^while.body7:
    i32 %68 = add i32 %11, i32 1;
    i1 %69 = scmp lt i32 %68, i32 100;
    cbr i1 %69(prob = 0.99), ^while.body, ^b5;
^while.body8:
    i32 %70 = phi [^while.body6, i32 %64] [^indirect2, i32 %84];
    i32 %71 = phi [^while.body6, i32 %62] [^indirect2, i32 %79];
    i32* %72 = getelementptr &(i32* %3)[i32 %71];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %7)[i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %5)[i32 %71];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    store i32* %74 with i32 %78;
    i32 %79 = add i32 %71, i32 1;
    i1 %80 = scmp lt i32 %79, i32 %70;
    cbr i1 %80(prob = 0.97), ^indirect2, ^indirect3;
^b4:
    i32 %81 = phi [^while.body6, i32 %62] [^indirect3, i32 %85];
    i32 %82 = phi [^while.body6, i32 %64] [^indirect3, i32 %86];
    i1 %83 = scmp lt i32 %81, i32 %82;
    cbr i1 %83(prob = 0.97), ^while.body9, ^b6;
^b5:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %9);
    ret i32 0;
^indirect2:
    i32 %84 = load i32* %63;
    ubr ^while.body8;
^indirect3:
    i32 %85 = load i32* %61;
    i32 %86 = load i32* %63;
    ubr ^b4;
^while.body9:
    i32 %87 = phi [^b4, i32 %81] [^while.body9, i32 %98];
    i32* %88 = getelementptr &(i32* %3)[i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %7)[i32 %89];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %5)[i32 %87];
    i32 %93 = load i32* %92;
    i32 %94 = load i32* %67;
    i32 %95 = add i32 %94, i32 -1;
    i32 %96 = mul i32 %93, i32 %95;
    i32 %97 = add i32 %91, i32 %96;
    store i32* %90 with i32 %97;
    i32 %98 = add i32 %87, i32 1;
    i32 %99 = load i32* %63;
    i1 %100 = scmp lt i32 %98, i32 %99;
    cbr i1 %100(prob = 0.97), ^while.body9, ^b6;
^b6:
    i1 %101 = scmp lt i32 %66, i32 %2;
    cbr i1 %101(prob = 0.97), ^while.body6, ^while.body7;
}
