internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    [100010 * i32]* %14 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %15 = getelementptr &([100010 * i32]* %14)[i64 0][i64 0];
    [4 * i8]* %16 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %17 = ptradd [4 * i8]* %16, i32 0;
    [8 * i8]* %18 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_1 to [8 * i8]*;
    i32* %19 = ptradd [8 * i8]* %18, i32 0;
    i32* %20 = ptradd [8 * i8]* %18, i32 4;
    [4 * i8]* %21 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %22 = ptradd [4 * i8]* %21, i32 0;
    [12 * i8]* %23 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_3 to [12 * i8]*;
    i32* %24 = ptradd [12 * i8]* %23, i32 0;
    i32* %25 = ptradd [12 * i8]* %23, i32 4;
    i32* %26 = ptradd [12 * i8]* %23, i32 8;
    [8 * i8]* %27 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_4 to [8 * i8]*;
    i32* %28 = ptradd [8 * i8]* %27, i32 0;
    i32* %29 = ptradd [8 * i8]* %27, i32 4;
    [12 * i8]* %30 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_5 to [12 * i8]*;
    i32* %31 = ptradd [12 * i8]* %30, i32 0;
    i32* %32 = ptradd [12 * i8]* %30, i32 4;
    i32* %33 = ptradd [12 * i8]* %30, i32 8;
    i8* %34 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %35 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %36 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %37 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    i8* %38 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    i8* %39 = functionptr () -> void @cmmc_parallel_body_5 as i8*;
    ubr ^while.body;
  ^while.body:
    i32 %40 = phi [^entry, i32 0] [^b1, i32 %41];
    cbr i1 %13(prob = 0.984615), ^b, ^b1;
  ^b:
    store i32* %17 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %34);
    ubr ^while.body1;
  ^b1:
    i32 %41 = add i32 %40, i32 1;
    i1 %42 = icmp slt i32 %41, i32 100;
    cbr i1 %42(prob = 0.99), ^while.body, ^b2;
  ^while.body1:
    i32 %43 = phi [^b, i32 0] [^b5, i32 %50];
    i32* %44 = getelementptr &(i32* %1)[i32 %43];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %44)[i64 1];
    i32 %47 = load i32* %46;
    i1 %48 = icmp slt i32 %45, i32 %47;
    i32* %49 = getelementptr &(i32* %10)[i32 %43];
    i32 %50 = add i32 %43, i32 1;
    cbr i1 %48(prob = 0.984615), ^b3, ^b4;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %15);
    ret i32 0;
  ^b3:
    store i32* %19 with i32 %45;
    store i32* %20 with i32 %47;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %45, i32 %47, i8* %35);
    i32 %51 = load i32* %44;
    i32 %52 = load i32* %46;
    ubr ^b4;
  ^b4:
    i32 %53 = phi [^while.body1, i32 %45] [^b3, i32 %51];
    i32 %54 = phi [^while.body1, i32 %47] [^b3, i32 %52];
    i1 %55 = icmp slt i32 %53, i32 %54;
    cbr i1 %55(prob = 0.984615), ^indirect, ^b5;
  ^indirect:
    i32 %56 = load i32* %49;
    i32 %57 = add i32 %56, i32 -1;
    i32 %58 = load i32* %46;
    store i32* %24 with i32 %53;
    store i32* %25 with i32 %57;
    store i32* %26 with i32 %58;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %53, i32 %58, i8* %37);
    ubr ^b5;
  ^b5:
    i1 %59 = icmp sgt i32 %12, i32 %50;
    cbr i1 %59(prob = 0.984615), ^while.body1, ^b6;
  ^b6:
    store i32* %22 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %36);
    ubr ^while.body2;
  ^while.body2:
    i32 %60 = phi [^b6, i32 0] [^b9, i32 %67];
    i32* %61 = getelementptr &(i32* %1)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %61)[i64 1];
    i32 %64 = load i32* %63;
    i1 %65 = icmp slt i32 %62, i32 %64;
    i32* %66 = getelementptr &(i32* %15)[i32 %60];
    i32 %67 = add i32 %60, i32 1;
    cbr i1 %65(prob = 0.984615), ^b7, ^b8;
  ^b7:
    store i32* %28 with i32 %62;
    store i32* %29 with i32 %64;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %62, i32 %64, i8* %38);
    i32 %68 = load i32* %61;
    i32 %69 = load i32* %63;
    ubr ^b8;
  ^b8:
    i32 %70 = phi [^while.body2, i32 %62] [^b7, i32 %68];
    i32 %71 = phi [^while.body2, i32 %64] [^b7, i32 %69];
    i1 %72 = icmp slt i32 %70, i32 %71;
    cbr i1 %72(prob = 0.984615), ^indirect1, ^b9;
  ^indirect1:
    i32 %73 = load i32* %66;
    i32 %74 = add i32 %73, i32 -1;
    i32 %75 = load i32* %63;
    store i32* %31 with i32 %70;
    store i32* %32 with i32 %74;
    store i32* %33 with i32 %75;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %70, i32 %75, i8* %39);
    ubr ^b9;
  ^b9:
    i1 %76 = icmp sgt i32 %12, i32 %67;
    cbr i1 %76(prob = 0.984615), ^while.body2, ^b1;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [3000000 * i32]* %4 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %5 = getelementptr &([3000000 * i32]* %4)[i64 0][i64 0];
    [100010 * i32]* %6 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %7 = getelementptr &([100010 * i32]* %6)[i64 0][i64 0];
    [3000000 * i32]* %8 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %9 = getelementptr &([3000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^b1, i32 %36];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(i32* %7)[i32 %13];
    i32* %15 = getelementptr &(i32* %9)[i32 %11];
    i32 %16 = load i32* %15;
    atomicadd i32* %14, i32 %16;
    i32* %18 = getelementptr &(i32* %12)[i64 1];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %7)[i32 %19];
    i32* %21 = getelementptr &(i32* %15)[i64 1];
    i32 %22 = load i32* %21;
    atomicadd i32* %20, i32 %22;
    i32* %24 = getelementptr &(i32* %12)[i64 2];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %7)[i32 %25];
    i32* %27 = getelementptr &(i32* %15)[i64 2];
    i32 %28 = load i32* %27;
    atomicadd i32* %26, i32 %28;
    i32* %30 = getelementptr &(i32* %12)[i64 3];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %7)[i32 %31];
    i32* %33 = getelementptr &(i32* %15)[i64 3];
    i32 %34 = load i32* %33;
    atomicadd i32* %32, i32 %34;
    i32 %36 = add i32 %11, i32 4;
    i1 %37 = icmp sgt i32 %10, i32 %36;
    cbr i1 %37(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %38 = phi [^b, i32 %0] [^b1, i32 %36];
    i1 %39 = icmp sgt i32 %1, i32 %38;
    cbr i1 %39(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %40 = phi [^scalar.header, i32 %38] [^b2, i32 %47];
    i32* %41 = getelementptr &(i32* %5)[i32 %40];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %7)[i32 %42];
    i32* %44 = getelementptr &(i32* %9)[i32 %40];
    i32 %45 = load i32* %44;
    atomicadd i32* %43, i32 %45;
    i32 %47 = add i32 %40, i32 1;
    i1 %48 = icmp sgt i32 %1, i32 %47;
    cbr i1 %48(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [8 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [12 * i8]* %4 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_3 to [12 * i8]*;
    i32* %5 = ptradd [12 * i8]* %4, i32 4;
    i32 %6 = load i32* %5;
    [3000000 * i32]* %7 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %8 = getelementptr &([3000000 * i32]* %7)[i64 0][i64 0];
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    [3000000 * i32]* %11 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %12 = getelementptr &([3000000 * i32]* %11)[i64 0][i64 0];
    i32 %13 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %14 = phi [^b, i32 %0] [^b1, i32 %43];
    i32* %15 = getelementptr &(i32* %8)[i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %10)[i32 %16];
    i32* %18 = getelementptr &(i32* %12)[i32 %14];
    i32 %19 = load i32* %18;
    i32 %20 = mul i32 %6, i32 %19;
    atomicadd i32* %17, i32 %20;
    i32* %22 = getelementptr &(i32* %15)[i64 1];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %10)[i32 %23];
    i32* %25 = getelementptr &(i32* %18)[i64 1];
    i32 %26 = load i32* %25;
    i32 %27 = mul i32 %6, i32 %26;
    atomicadd i32* %24, i32 %27;
    i32* %29 = getelementptr &(i32* %15)[i64 2];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %10)[i32 %30];
    i32* %32 = getelementptr &(i32* %18)[i64 2];
    i32 %33 = load i32* %32;
    i32 %34 = mul i32 %6, i32 %33;
    atomicadd i32* %31, i32 %34;
    i32* %36 = getelementptr &(i32* %15)[i64 3];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %10)[i32 %37];
    i32* %39 = getelementptr &(i32* %18)[i64 3];
    i32 %40 = load i32* %39;
    i32 %41 = mul i32 %6, i32 %40;
    atomicadd i32* %38, i32 %41;
    i32 %43 = add i32 %14, i32 4;
    i1 %44 = icmp sgt i32 %13, i32 %43;
    cbr i1 %44(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %45 = phi [^b, i32 %0] [^b1, i32 %43];
    i1 %46 = icmp sgt i32 %1, i32 %45;
    cbr i1 %46(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %47 = phi [^scalar.header, i32 %45] [^b2, i32 %55];
    i32* %48 = getelementptr &(i32* %8)[i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %10)[i32 %49];
    i32* %51 = getelementptr &(i32* %12)[i32 %47];
    i32 %52 = load i32* %51;
    i32 %53 = mul i32 %6, i32 %52;
    atomicadd i32* %50, i32 %53;
    i32 %55 = add i32 %47, i32 1;
    i1 %56 = icmp sgt i32 %1, i32 %55;
    cbr i1 %56(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [12 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [3000000 * i32]* %4 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %5 = getelementptr &([3000000 * i32]* %4)[i64 0][i64 0];
    [100010 * i32]* %6 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %7 = getelementptr &([100010 * i32]* %6)[i64 0][i64 0];
    [3000000 * i32]* %8 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %9 = getelementptr &([3000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^b1, i32 %36];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(i32* %7)[i32 %13];
    i32* %15 = getelementptr &(i32* %9)[i32 %11];
    i32 %16 = load i32* %15;
    atomicadd i32* %14, i32 %16;
    i32* %18 = getelementptr &(i32* %12)[i64 1];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %7)[i32 %19];
    i32* %21 = getelementptr &(i32* %15)[i64 1];
    i32 %22 = load i32* %21;
    atomicadd i32* %20, i32 %22;
    i32* %24 = getelementptr &(i32* %12)[i64 2];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %7)[i32 %25];
    i32* %27 = getelementptr &(i32* %15)[i64 2];
    i32 %28 = load i32* %27;
    atomicadd i32* %26, i32 %28;
    i32* %30 = getelementptr &(i32* %12)[i64 3];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %7)[i32 %31];
    i32* %33 = getelementptr &(i32* %15)[i64 3];
    i32 %34 = load i32* %33;
    atomicadd i32* %32, i32 %34;
    i32 %36 = add i32 %11, i32 4;
    i1 %37 = icmp sgt i32 %10, i32 %36;
    cbr i1 %37(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %38 = phi [^b, i32 %0] [^b1, i32 %36];
    i1 %39 = icmp sgt i32 %1, i32 %38;
    cbr i1 %39(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %40 = phi [^scalar.header, i32 %38] [^b2, i32 %47];
    i32* %41 = getelementptr &(i32* %5)[i32 %40];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %7)[i32 %42];
    i32* %44 = getelementptr &(i32* %9)[i32 %40];
    i32 %45 = load i32* %44;
    atomicadd i32* %43, i32 %45;
    i32 %47 = add i32 %40, i32 1;
    i1 %48 = icmp sgt i32 %1, i32 %47;
    cbr i1 %48(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [8 * i8]* @cmmc_parallel_body_payload_4, align 8;
internal func @cmmc_parallel_body_5(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [12 * i8]* %4 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_5 to [12 * i8]*;
    i32* %5 = ptradd [12 * i8]* %4, i32 4;
    i32 %6 = load i32* %5;
    [3000000 * i32]* %7 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %8 = getelementptr &([3000000 * i32]* %7)[i64 0][i64 0];
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    [3000000 * i32]* %11 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %12 = getelementptr &([3000000 * i32]* %11)[i64 0][i64 0];
    i32 %13 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %14 = phi [^b, i32 %0] [^b1, i32 %43];
    i32* %15 = getelementptr &(i32* %8)[i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %10)[i32 %16];
    i32* %18 = getelementptr &(i32* %12)[i32 %14];
    i32 %19 = load i32* %18;
    i32 %20 = mul i32 %6, i32 %19;
    atomicadd i32* %17, i32 %20;
    i32* %22 = getelementptr &(i32* %15)[i64 1];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %10)[i32 %23];
    i32* %25 = getelementptr &(i32* %18)[i64 1];
    i32 %26 = load i32* %25;
    i32 %27 = mul i32 %6, i32 %26;
    atomicadd i32* %24, i32 %27;
    i32* %29 = getelementptr &(i32* %15)[i64 2];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %10)[i32 %30];
    i32* %32 = getelementptr &(i32* %18)[i64 2];
    i32 %33 = load i32* %32;
    i32 %34 = mul i32 %6, i32 %33;
    atomicadd i32* %31, i32 %34;
    i32* %36 = getelementptr &(i32* %15)[i64 3];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %10)[i32 %37];
    i32* %39 = getelementptr &(i32* %18)[i64 3];
    i32 %40 = load i32* %39;
    i32 %41 = mul i32 %6, i32 %40;
    atomicadd i32* %38, i32 %41;
    i32 %43 = add i32 %14, i32 4;
    i1 %44 = icmp sgt i32 %13, i32 %43;
    cbr i1 %44(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %45 = phi [^b, i32 %0] [^b1, i32 %43];
    i1 %46 = icmp sgt i32 %1, i32 %45;
    cbr i1 %46(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %47 = phi [^scalar.header, i32 %45] [^b2, i32 %55];
    i32* %48 = getelementptr &(i32* %8)[i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %10)[i32 %49];
    i32* %51 = getelementptr &(i32* %12)[i32 %47];
    i32 %52 = load i32* %51;
    i32 %53 = mul i32 %6, i32 %52;
    atomicadd i32* %50, i32 %53;
    i32 %55 = add i32 %47, i32 1;
    i1 %56 = icmp sgt i32 %1, i32 %55;
    cbr i1 %56(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [12 * i8]* @cmmc_parallel_body_payload_5, align 8;
