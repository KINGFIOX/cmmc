internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    i1 %4 = icmp sgt i32 %3, i32 0;
    i1 %5 = icmp sgt i32 %3, i32 4;
    i32 %6 = add i32 %2, i32 -5;
    i1 %7 = icmp sgt i32 %6, i32 16;
    i32 %8 = add i32 %2, i32 -21;
    [3000000 * i32]* %9 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %10 = getelementptr &([3000000 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    [3000000 * i32]* %12 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %13 = getelementptr &([3000000 * i32]* %12)[i64 0][i64 0];
    i32 %14 = call (i32*) -> i32 @getarray(i32* %13);
    [100010 * i32]* %15 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %16 = getelementptr &([100010 * i32]* %15)[i64 0][i64 0];
    i32 %17 = call (i32*) -> i32 @getarray(i32* %16);
    call (i32) -> void @starttime(i32 39);
    [100010 * i32]* %18 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %19 = getelementptr &([100010 * i32]* %18)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %20 = phi [^entry, i32 0] [^while.body10, i32 %122];
    cbr i1 %4(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %5(prob = 0.941176), ^super.header1, ^while.body1;
  ^while.header:
    i32 %21 = phi [^while.body, i32 0] [^while.body1, i32 0] [^b, i32 %27] [^while.body14, i32 %27];
    i1 %22 = icmp sgt i32 %3, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body2, ^while.body3;
  ^super.header1:
    cbr i1 %7(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body1 {scalar}:
    i32 %23 = phi [^super.header, i32 0] [^while.body1, i32 %25] [^while.body5, i32 %61];
    i32* %24 = getelementptr &(i32* %19)[i32 %23];
    store i32* %24 with i32 0;
    i32 %25 = add i32 %23, i32 1;
    i1 %26 = icmp sgt i32 %3, i32 %25;
    cbr i1 %26(prob = 0.75), ^while.body1, ^while.header;
  ^while.body2:
    i32 %27 = add i32 %21, i32 1;
    i32* %28 = getelementptr &(i32* %1)[i32 %27];
    i32* %29 = getelementptr &(i32* %1)[i32 %21];
    i32 %30 = load i32* %29;
    i32 %31 = load i32* %28;
    i32 %32 = add i32 %30, i32 4;
    i1 %33 = icmp sgt i32 %31, i32 %32;
    i1 %34 = icmp slt i32 %30, i32 %31;
    i32 %35 = add i32 %31, i32 -4;
    i32* %36 = getelementptr &(i32* %16)[i32 %21];
    cbr i1 %34(prob = 0.984615), ^super.header2, ^b;
  ^while.body3:
    cbr i1 %4(prob = 0.984615), ^super.header3, ^while.header1;
  ^while.body4:
    i32 %37 = phi [^super.header1, i32 0] [^while.body4, i32 %54];
    i32* %38 = getelementptr &(i32* %19)[i32 %37];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %38)[i64 1];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %38)[i64 2];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %38)[i64 3];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %38)[i64 4];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %38)[i64 5];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %38)[i64 6];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %38)[i64 7];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %38)[i64 8];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %38)[i64 9];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %38)[i64 10];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %38)[i64 11];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %38)[i64 12];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %38)[i64 13];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %38)[i64 14];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %38)[i64 15];
    store i32* %53 with i32 0;
    i32 %54 = add i32 %37, i32 16;
    i1 %55 = icmp sgt i32 %8, i32 %54;
    cbr i1 %55(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body5 {scalar}:
    i32 %56 = phi [^super.header1, i32 0] [^while.body4, i32 %54] [^while.body5, i32 %61];
    i32* %57 = getelementptr &(i32* %19)[i32 %56];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %57)[i64 1];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %57)[i64 2];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %57)[i64 3];
    store i32* %60 with i32 0;
    i32 %61 = add i32 %56, i32 4;
    i1 %62 = icmp sgt i32 %6, i32 %61;
    cbr i1 %62(prob = 0.75), ^while.body5, ^while.body1;
  ^super.header2:
    cbr i1 %33(prob = 0.941176), ^while.body6, ^while.body7;
  ^b:
    cbr i1 %34(prob = 0.984615), ^indirect, ^while.header;
  ^super.header3:
    cbr i1 %5(prob = 0.941176), ^super.header4, ^while.body8;
  ^while.header1:
    i32 %63 = phi [^while.body3, i32 0] [^while.body8, i32 0] [^b1, i32 %112] [^while.body18, i32 %112];
    i1 %64 = icmp sgt i32 %3, i32 %63;
    cbr i1 %64(prob = 0.984615), ^while.body9, ^while.body10;
  ^while.body6:
    i32 %65 = phi [^super.header2, i32 %30] [^while.body6, i32 %94];
    i32* %66 = getelementptr &(i32* %10)[i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %19)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %13)[i32 %65];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %68 with i32 %72;
    i32* %73 = getelementptr &(i32* %66)[i64 1];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %19)[i32 %74];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %70)[i64 1];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    store i32* %75 with i32 %79;
    i32* %80 = getelementptr &(i32* %66)[i64 2];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %19)[i32 %81];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %70)[i64 2];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    store i32* %82 with i32 %86;
    i32* %87 = getelementptr &(i32* %66)[i64 3];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %19)[i32 %88];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %70)[i64 3];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    store i32* %89 with i32 %93;
    i32 %94 = add i32 %65, i32 4;
    i1 %95 = icmp sgt i32 %35, i32 %94;
    cbr i1 %95(prob = 0.941176), ^while.body6, ^while.body7;
  ^indirect:
    i32 %96 = load i32* %36;
    i32 %97 = add i32 %96, i32 -1;
    cbr i1 %33(prob = 0.941176), ^while.body12, ^while.body14;
  ^while.body7 {scalar}:
    i32 %98 = phi [^super.header2, i32 %30] [^while.body6, i32 %94] [^while.body7, i32 %106];
    i32* %99 = getelementptr &(i32* %10)[i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %19)[i32 %100];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %13)[i32 %98];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    store i32* %101 with i32 %105;
    i32 %106 = add i32 %98, i32 1;
    i1 %107 = icmp sgt i32 %31, i32 %106;
    cbr i1 %107(prob = 0.75), ^while.body7, ^b;
  ^super.header4:
    cbr i1 %7(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body8 {scalar}:
    i32 %108 = phi [^super.header3, i32 0] [^while.body8, i32 %110] [^while.body13, i32 %183];
    i32* %109 = getelementptr &(i32* %16)[i32 %108];
    store i32* %109 with i32 0;
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp sgt i32 %3, i32 %110;
    cbr i1 %111(prob = 0.75), ^while.body8, ^while.header1;
  ^while.body9:
    i32 %112 = add i32 %63, i32 1;
    i32* %113 = getelementptr &(i32* %1)[i32 %112];
    i32* %114 = getelementptr &(i32* %1)[i32 %63];
    i32 %115 = load i32* %114;
    i32 %116 = load i32* %113;
    i32 %117 = add i32 %115, i32 4;
    i1 %118 = icmp sgt i32 %116, i32 %117;
    i1 %119 = icmp slt i32 %115, i32 %116;
    i32 %120 = add i32 %116, i32 -4;
    i32* %121 = getelementptr &(i32* %19)[i32 %63];
    cbr i1 %119(prob = 0.984615), ^super.header5, ^b1;
  ^while.body10:
    i32 %122 = add i32 %20, i32 1;
    i1 %123 = icmp slt i32 %122, i32 100;
    cbr i1 %123(prob = 0.99), ^while.body, ^b2;
  ^while.body11:
    i32 %124 = phi [^super.header4, i32 0] [^while.body11, i32 %141];
    i32* %125 = getelementptr &(i32* %16)[i32 %124];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %125)[i64 1];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %125)[i64 2];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %125)[i64 3];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %125)[i64 4];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %125)[i64 5];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %125)[i64 6];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %125)[i64 7];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %125)[i64 8];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %125)[i64 9];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %125)[i64 10];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %125)[i64 11];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %125)[i64 12];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %125)[i64 13];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %125)[i64 14];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %125)[i64 15];
    store i32* %140 with i32 0;
    i32 %141 = add i32 %124, i32 16;
    i1 %142 = icmp sgt i32 %8, i32 %141;
    cbr i1 %142(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body12:
    i32 %143 = phi [^indirect, i32 %30] [^while.body12, i32 %176];
    i32* %144 = getelementptr &(i32* %10)[i32 %143];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &(i32* %19)[i32 %145];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %13)[i32 %143];
    i32 %149 = load i32* %148;
    i32 %150 = mul i32 %97, i32 %149;
    i32 %151 = add i32 %147, i32 %150;
    store i32* %146 with i32 %151;
    i32* %152 = getelementptr &(i32* %144)[i64 1];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %19)[i32 %153];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %148)[i64 1];
    i32 %157 = load i32* %156;
    i32 %158 = mul i32 %97, i32 %157;
    i32 %159 = add i32 %155, i32 %158;
    store i32* %154 with i32 %159;
    i32* %160 = getelementptr &(i32* %144)[i64 2];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %19)[i32 %161];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %148)[i64 2];
    i32 %165 = load i32* %164;
    i32 %166 = mul i32 %97, i32 %165;
    i32 %167 = add i32 %163, i32 %166;
    store i32* %162 with i32 %167;
    i32* %168 = getelementptr &(i32* %144)[i64 3];
    i32 %169 = load i32* %168;
    i32* %170 = getelementptr &(i32* %19)[i32 %169];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %148)[i64 3];
    i32 %173 = load i32* %172;
    i32 %174 = mul i32 %97, i32 %173;
    i32 %175 = add i32 %171, i32 %174;
    store i32* %170 with i32 %175;
    i32 %176 = add i32 %143, i32 4;
    i1 %177 = icmp sgt i32 %35, i32 %176;
    cbr i1 %177(prob = 0.941176), ^while.body12, ^while.body14;
  ^while.body13 {scalar}:
    i32 %178 = phi [^super.header4, i32 0] [^while.body11, i32 %141] [^while.body13, i32 %183];
    i32* %179 = getelementptr &(i32* %16)[i32 %178];
    store i32* %179 with i32 0;
    i32* %180 = getelementptr &(i32* %179)[i64 1];
    store i32* %180 with i32 0;
    i32* %181 = getelementptr &(i32* %179)[i64 2];
    store i32* %181 with i32 0;
    i32* %182 = getelementptr &(i32* %179)[i64 3];
    store i32* %182 with i32 0;
    i32 %183 = add i32 %178, i32 4;
    i1 %184 = icmp sgt i32 %6, i32 %183;
    cbr i1 %184(prob = 0.75), ^while.body13, ^while.body8;
  ^super.header5:
    cbr i1 %118(prob = 0.941176), ^while.body15, ^while.body16;
  ^while.body14 {scalar}:
    i32 %185 = phi [^indirect, i32 %30] [^while.body12, i32 %176] [^while.body14, i32 %194];
    i32* %186 = getelementptr &(i32* %10)[i32 %185];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &(i32* %19)[i32 %187];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %13)[i32 %185];
    i32 %191 = load i32* %190;
    i32 %192 = mul i32 %97, i32 %191;
    i32 %193 = add i32 %189, i32 %192;
    store i32* %188 with i32 %193;
    i32 %194 = add i32 %185, i32 1;
    i1 %195 = icmp sgt i32 %31, i32 %194;
    cbr i1 %195(prob = 0.75), ^while.body14, ^while.header;
  ^b1:
    cbr i1 %119(prob = 0.984615), ^indirect1, ^while.header1;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %19);
    ret i32 0;
  ^while.body15:
    i32 %196 = phi [^super.header5, i32 %115] [^while.body15, i32 %225];
    i32* %197 = getelementptr &(i32* %10)[i32 %196];
    i32 %198 = load i32* %197;
    i32* %199 = getelementptr &(i32* %16)[i32 %198];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %13)[i32 %196];
    i32 %202 = load i32* %201;
    i32 %203 = add i32 %200, i32 %202;
    store i32* %199 with i32 %203;
    i32* %204 = getelementptr &(i32* %197)[i64 1];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %16)[i32 %205];
    i32 %207 = load i32* %206;
    i32* %208 = getelementptr &(i32* %201)[i64 1];
    i32 %209 = load i32* %208;
    i32 %210 = add i32 %207, i32 %209;
    store i32* %206 with i32 %210;
    i32* %211 = getelementptr &(i32* %197)[i64 2];
    i32 %212 = load i32* %211;
    i32* %213 = getelementptr &(i32* %16)[i32 %212];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &(i32* %201)[i64 2];
    i32 %216 = load i32* %215;
    i32 %217 = add i32 %214, i32 %216;
    store i32* %213 with i32 %217;
    i32* %218 = getelementptr &(i32* %197)[i64 3];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &(i32* %16)[i32 %219];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %201)[i64 3];
    i32 %223 = load i32* %222;
    i32 %224 = add i32 %221, i32 %223;
    store i32* %220 with i32 %224;
    i32 %225 = add i32 %196, i32 4;
    i1 %226 = icmp sgt i32 %120, i32 %225;
    cbr i1 %226(prob = 0.941176), ^while.body15, ^while.body16;
  ^indirect1:
    i32 %227 = load i32* %121;
    i32 %228 = add i32 %227, i32 -1;
    cbr i1 %118(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body16 {scalar}:
    i32 %229 = phi [^super.header5, i32 %115] [^while.body15, i32 %225] [^while.body16, i32 %237];
    i32* %230 = getelementptr &(i32* %10)[i32 %229];
    i32 %231 = load i32* %230;
    i32* %232 = getelementptr &(i32* %16)[i32 %231];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &(i32* %13)[i32 %229];
    i32 %235 = load i32* %234;
    i32 %236 = add i32 %233, i32 %235;
    store i32* %232 with i32 %236;
    i32 %237 = add i32 %229, i32 1;
    i1 %238 = icmp sgt i32 %116, i32 %237;
    cbr i1 %238(prob = 0.75), ^while.body16, ^b1;
  ^while.body17:
    i32 %239 = phi [^indirect1, i32 %115] [^while.body17, i32 %272];
    i32* %240 = getelementptr &(i32* %10)[i32 %239];
    i32 %241 = load i32* %240;
    i32* %242 = getelementptr &(i32* %16)[i32 %241];
    i32 %243 = load i32* %242;
    i32* %244 = getelementptr &(i32* %13)[i32 %239];
    i32 %245 = load i32* %244;
    i32 %246 = mul i32 %228, i32 %245;
    i32 %247 = add i32 %243, i32 %246;
    store i32* %242 with i32 %247;
    i32* %248 = getelementptr &(i32* %240)[i64 1];
    i32 %249 = load i32* %248;
    i32* %250 = getelementptr &(i32* %16)[i32 %249];
    i32 %251 = load i32* %250;
    i32* %252 = getelementptr &(i32* %244)[i64 1];
    i32 %253 = load i32* %252;
    i32 %254 = mul i32 %228, i32 %253;
    i32 %255 = add i32 %251, i32 %254;
    store i32* %250 with i32 %255;
    i32* %256 = getelementptr &(i32* %240)[i64 2];
    i32 %257 = load i32* %256;
    i32* %258 = getelementptr &(i32* %16)[i32 %257];
    i32 %259 = load i32* %258;
    i32* %260 = getelementptr &(i32* %244)[i64 2];
    i32 %261 = load i32* %260;
    i32 %262 = mul i32 %228, i32 %261;
    i32 %263 = add i32 %259, i32 %262;
    store i32* %258 with i32 %263;
    i32* %264 = getelementptr &(i32* %240)[i64 3];
    i32 %265 = load i32* %264;
    i32* %266 = getelementptr &(i32* %16)[i32 %265];
    i32 %267 = load i32* %266;
    i32* %268 = getelementptr &(i32* %244)[i64 3];
    i32 %269 = load i32* %268;
    i32 %270 = mul i32 %228, i32 %269;
    i32 %271 = add i32 %267, i32 %270;
    store i32* %266 with i32 %271;
    i32 %272 = add i32 %239, i32 4;
    i1 %273 = icmp sgt i32 %120, i32 %272;
    cbr i1 %273(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body18 {scalar}:
    i32 %274 = phi [^indirect1, i32 %115] [^while.body17, i32 %272] [^while.body18, i32 %283];
    i32* %275 = getelementptr &(i32* %10)[i32 %274];
    i32 %276 = load i32* %275;
    i32* %277 = getelementptr &(i32* %16)[i32 %276];
    i32 %278 = load i32* %277;
    i32* %279 = getelementptr &(i32* %13)[i32 %274];
    i32 %280 = load i32* %279;
    i32 %281 = mul i32 %228, i32 %280;
    i32 %282 = add i32 %278, i32 %281;
    store i32* %277 with i32 %282;
    i32 %283 = add i32 %274, i32 1;
    i1 %284 = icmp sgt i32 %116, i32 %283;
    cbr i1 %284(prob = 0.75), ^while.body18, ^while.header1;
}
