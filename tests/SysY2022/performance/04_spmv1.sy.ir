internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    i1 %4 = icmp sgt i32 %3, i32 0;
    [3000000 * i32]* %5 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %6 = getelementptr &([3000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [3000000 * i32]* %8 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %9 = getelementptr &([3000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    [100010 * i32]* %11 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %12 = getelementptr &([100010 * i32]* %11)[i64 0][i64 0];
    i32 %13 = call (i32*) -> i32 @getarray(i32* %12);
    call (i32) -> void @starttime(i32 39);
    [100010 * i32]* %14 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %15 = getelementptr &([100010 * i32]* %14)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^while.body10, i32 %100];
    cbr i1 %4(prob = 0.97), ^super.header, ^while.header;
  ^super.header:
    i32 %17 = phi [^while.body, i32 0] [^while.body1, i32 %18];
    i32 %18 = add i32 %17, i32 4;
    i1 %19 = icmp sgt i32 %3, i32 %18;
    cbr i1 %19(prob = 0.89), ^while.body1, ^while.body2;
  ^while.header:
    i32 %20 = phi [^while.body, i32 0] [^while.body2, i32 0] [^b, i32 %30] [^while.body13, i32 %30];
    i1 %21 = icmp sgt i32 %3, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body3, ^while.body4;
  ^while.body1:
    i32* %22 = getelementptr &(i32* %15)[i32 %17];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %22)[i64 1];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %22)[i64 2];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %22)[i64 3];
    store i32* %25 with i32 0;
    ubr ^super.header;
  ^while.body2:
    i32 %26 = phi [^super.header, i32 %17] [^while.body2, i32 %28];
    i32* %27 = getelementptr &(i32* %15)[i32 %26];
    store i32* %27 with i32 0;
    i32 %28 = add i32 %26, i32 1;
    i1 %29 = icmp sgt i32 %3, i32 %28;
    cbr i1 %29(prob = 0.75), ^while.body2, ^while.header;
  ^while.body3:
    i32 %30 = add i32 %20, i32 1;
    i32* %31 = getelementptr &(i32* %1)[i32 %30];
    i32* %32 = getelementptr &(i32* %1)[i32 %20];
    i32 %33 = load i32* %32;
    i32 %34 = load i32* %31;
    i1 %35 = icmp slt i32 %33, i32 %34;
    i32* %36 = getelementptr &(i32* %12)[i32 %20];
    cbr i1 %35(prob = 0.97), ^super.header1, ^b;
  ^while.body4:
    cbr i1 %4(prob = 0.97), ^super.header2, ^while.header1;
  ^super.header1:
    i32 %37 = phi [^while.body3, i32 %33] [^while.body5, i32 %38];
    i32 %38 = add i32 %37, i32 4;
    i1 %39 = icmp sgt i32 %34, i32 %38;
    cbr i1 %39(prob = 0.89), ^while.body5, ^while.body7;
  ^b:
    cbr i1 %35(prob = 0.97), ^indirect, ^while.header;
  ^super.header2:
    i32 %40 = phi [^while.body4, i32 0] [^while.body6, i32 %41];
    i32 %41 = add i32 %40, i32 4;
    i1 %42 = icmp sgt i32 %3, i32 %41;
    cbr i1 %42(prob = 0.89), ^while.body6, ^while.body8;
  ^while.header1:
    i32 %43 = phi [^while.body4, i32 0] [^while.body8, i32 0] [^b1, i32 %93] [^while.body16, i32 %93];
    i1 %44 = icmp sgt i32 %3, i32 %43;
    cbr i1 %44(prob = 0.97), ^while.body9, ^while.body10;
  ^while.body5:
    i32* %45 = getelementptr &(i32* %6)[i32 %37];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %15)[i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %9)[i32 %37];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    store i32* %47 with i32 %51;
    i32* %52 = getelementptr &(i32* %45)[i64 1];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %15)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %49)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    store i32* %54 with i32 %58;
    i32* %59 = getelementptr &(i32* %45)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %15)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %49)[i64 2];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    store i32* %61 with i32 %65;
    i32* %66 = getelementptr &(i32* %45)[i64 3];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %15)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %49)[i64 3];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %68 with i32 %72;
    ubr ^super.header1;
  ^while.body6:
    i32* %73 = getelementptr &(i32* %12)[i32 %40];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %73)[i64 1];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %73)[i64 2];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %73)[i64 3];
    store i32* %76 with i32 0;
    ubr ^super.header2;
  ^indirect:
    i32 %77 = load i32* %36;
    i32 %78 = add i32 %77, i32 -1;
    ubr ^super.header3;
  ^while.body7:
    i32 %79 = phi [^super.header1, i32 %37] [^while.body7, i32 %87];
    i32* %80 = getelementptr &(i32* %6)[i32 %79];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %15)[i32 %81];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %9)[i32 %79];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    store i32* %82 with i32 %86;
    i32 %87 = add i32 %79, i32 1;
    i1 %88 = icmp sgt i32 %34, i32 %87;
    cbr i1 %88(prob = 0.75), ^while.body7, ^b;
  ^while.body8:
    i32 %89 = phi [^super.header2, i32 %40] [^while.body8, i32 %91];
    i32* %90 = getelementptr &(i32* %12)[i32 %89];
    store i32* %90 with i32 0;
    i32 %91 = add i32 %89, i32 1;
    i1 %92 = icmp sgt i32 %3, i32 %91;
    cbr i1 %92(prob = 0.75), ^while.body8, ^while.header1;
  ^while.body9:
    i32 %93 = add i32 %43, i32 1;
    i32* %94 = getelementptr &(i32* %1)[i32 %93];
    i32* %95 = getelementptr &(i32* %1)[i32 %43];
    i32 %96 = load i32* %95;
    i32 %97 = load i32* %94;
    i1 %98 = icmp slt i32 %96, i32 %97;
    i32* %99 = getelementptr &(i32* %15)[i32 %43];
    cbr i1 %98(prob = 0.97), ^super.header4, ^b1;
  ^while.body10:
    i32 %100 = add i32 %16, i32 1;
    i1 %101 = icmp slt i32 %100, i32 100;
    cbr i1 %101(prob = 0.99), ^while.body, ^b2;
  ^super.header3:
    i32 %102 = phi [^indirect, i32 %33] [^while.body11, i32 %103];
    i32 %103 = add i32 %102, i32 4;
    i1 %104 = icmp sgt i32 %34, i32 %103;
    cbr i1 %104(prob = 0.89), ^while.body11, ^while.body13;
  ^super.header4:
    i32 %105 = phi [^while.body9, i32 %96] [^while.body12, i32 %106];
    i32 %106 = add i32 %105, i32 4;
    i1 %107 = icmp sgt i32 %97, i32 %106;
    cbr i1 %107(prob = 0.89), ^while.body12, ^while.body14;
  ^b1:
    cbr i1 %98(prob = 0.97), ^indirect1, ^while.header1;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %15);
    ret i32 0;
  ^while.body11:
    i32* %108 = getelementptr &(i32* %6)[i32 %102];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %15)[i32 %109];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %9)[i32 %102];
    i32 %113 = load i32* %112;
    i32 %114 = mul i32 %78, i32 %113;
    i32 %115 = add i32 %111, i32 %114;
    store i32* %110 with i32 %115;
    i32* %116 = getelementptr &(i32* %108)[i64 1];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %15)[i32 %117];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %112)[i64 1];
    i32 %121 = load i32* %120;
    i32 %122 = mul i32 %78, i32 %121;
    i32 %123 = add i32 %119, i32 %122;
    store i32* %118 with i32 %123;
    i32* %124 = getelementptr &(i32* %108)[i64 2];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %15)[i32 %125];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %112)[i64 2];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %78, i32 %129;
    i32 %131 = add i32 %127, i32 %130;
    store i32* %126 with i32 %131;
    i32* %132 = getelementptr &(i32* %108)[i64 3];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %15)[i32 %133];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %112)[i64 3];
    i32 %137 = load i32* %136;
    i32 %138 = mul i32 %78, i32 %137;
    i32 %139 = add i32 %135, i32 %138;
    store i32* %134 with i32 %139;
    ubr ^super.header3;
  ^while.body12:
    i32* %140 = getelementptr &(i32* %6)[i32 %105];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %12)[i32 %141];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %9)[i32 %105];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %143, i32 %145;
    store i32* %142 with i32 %146;
    i32* %147 = getelementptr &(i32* %140)[i64 1];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %12)[i32 %148];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %144)[i64 1];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %150, i32 %152;
    store i32* %149 with i32 %153;
    i32* %154 = getelementptr &(i32* %140)[i64 2];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %12)[i32 %155];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %144)[i64 2];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    store i32* %156 with i32 %160;
    i32* %161 = getelementptr &(i32* %140)[i64 3];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %12)[i32 %162];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %144)[i64 3];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %164, i32 %166;
    store i32* %163 with i32 %167;
    ubr ^super.header4;
  ^indirect1:
    i32 %168 = load i32* %99;
    i32 %169 = add i32 %168, i32 -1;
    ubr ^super.header5;
  ^while.body13:
    i32 %170 = phi [^super.header3, i32 %102] [^while.body13, i32 %179];
    i32* %171 = getelementptr &(i32* %6)[i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %15)[i32 %172];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %9)[i32 %170];
    i32 %176 = load i32* %175;
    i32 %177 = mul i32 %78, i32 %176;
    i32 %178 = add i32 %174, i32 %177;
    store i32* %173 with i32 %178;
    i32 %179 = add i32 %170, i32 1;
    i1 %180 = icmp sgt i32 %34, i32 %179;
    cbr i1 %180(prob = 0.75), ^while.body13, ^while.header;
  ^while.body14:
    i32 %181 = phi [^super.header4, i32 %105] [^while.body14, i32 %189];
    i32* %182 = getelementptr &(i32* %6)[i32 %181];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %12)[i32 %183];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %9)[i32 %181];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %185, i32 %187;
    store i32* %184 with i32 %188;
    i32 %189 = add i32 %181, i32 1;
    i1 %190 = icmp sgt i32 %97, i32 %189;
    cbr i1 %190(prob = 0.75), ^while.body14, ^b1;
  ^super.header5:
    i32 %191 = phi [^indirect1, i32 %96] [^while.body15, i32 %192];
    i32 %192 = add i32 %191, i32 4;
    i1 %193 = icmp sgt i32 %97, i32 %192;
    cbr i1 %193(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body15:
    i32* %194 = getelementptr &(i32* %6)[i32 %191];
    i32 %195 = load i32* %194;
    i32* %196 = getelementptr &(i32* %12)[i32 %195];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %9)[i32 %191];
    i32 %199 = load i32* %198;
    i32 %200 = mul i32 %169, i32 %199;
    i32 %201 = add i32 %197, i32 %200;
    store i32* %196 with i32 %201;
    i32* %202 = getelementptr &(i32* %194)[i64 1];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %12)[i32 %203];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %198)[i64 1];
    i32 %207 = load i32* %206;
    i32 %208 = mul i32 %169, i32 %207;
    i32 %209 = add i32 %205, i32 %208;
    store i32* %204 with i32 %209;
    i32* %210 = getelementptr &(i32* %194)[i64 2];
    i32 %211 = load i32* %210;
    i32* %212 = getelementptr &(i32* %12)[i32 %211];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %198)[i64 2];
    i32 %215 = load i32* %214;
    i32 %216 = mul i32 %169, i32 %215;
    i32 %217 = add i32 %213, i32 %216;
    store i32* %212 with i32 %217;
    i32* %218 = getelementptr &(i32* %194)[i64 3];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &(i32* %12)[i32 %219];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %198)[i64 3];
    i32 %223 = load i32* %222;
    i32 %224 = mul i32 %169, i32 %223;
    i32 %225 = add i32 %221, i32 %224;
    store i32* %220 with i32 %225;
    ubr ^super.header5;
  ^while.body16:
    i32 %226 = phi [^super.header5, i32 %191] [^while.body16, i32 %235];
    i32* %227 = getelementptr &(i32* %6)[i32 %226];
    i32 %228 = load i32* %227;
    i32* %229 = getelementptr &(i32* %12)[i32 %228];
    i32 %230 = load i32* %229;
    i32* %231 = getelementptr &(i32* %9)[i32 %226];
    i32 %232 = load i32* %231;
    i32 %233 = mul i32 %169, i32 %232;
    i32 %234 = add i32 %230, i32 %233;
    store i32* %229 with i32 %234;
    i32 %235 = add i32 %226, i32 1;
    i1 %236 = icmp sgt i32 %97, i32 %235;
    cbr i1 %236(prob = 0.75), ^while.body16, ^while.header1;
}
