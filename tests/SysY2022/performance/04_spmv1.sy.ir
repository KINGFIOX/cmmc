internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i1 %14 = icmp sgt i32 %12, i32 4;
    i32 %15 = add i32 %2, i32 -5;
    i1 %16 = icmp sgt i32 %15, i32 16;
    i1 %17 = icmp sgt i32 %12, i32 20;
    i32 %18 = add i32 %2, i32 -21;
    i32 %19 = add i32 %2, i32 -17;
    [100010 * i32]* %20 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %21 = getelementptr &([100010 * i32]* %20)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^entry, i32 0] [^b2, i32 %122];
    cbr i1 %13(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %14(prob = 0.941176), ^super.header1, ^while.body1;
  ^while.header:
    i32 %23 = phi [^while.body, i32 0] [^while.body1, i32 0] [^b1, i32 %29] [^while.body11, i32 %29];
    i1 %24 = icmp sgt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body2, ^b;
  ^super.header1:
    cbr i1 %16(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body1 {scalar}:
    i32 %25 = phi [^super.header, i32 0] [^while.body1, i32 %27] [^while.body4, i32 %60];
    i32* %26 = getelementptr &(i32* %21)[i32 %25];
    store i32* %26 with i32 0;
    i32 %27 = add i32 %25, i32 1;
    i1 %28 = icmp sgt i32 %12, i32 %27;
    cbr i1 %28(prob = 0.75), ^while.body1, ^while.header;
  ^while.body2:
    i32 %29 = add i32 %23, i32 1;
    i32* %30 = getelementptr &(i32* %1)[i32 %29];
    i32* %31 = getelementptr &(i32* %1)[i32 %23];
    i32 %32 = load i32* %31;
    i32 %33 = load i32* %30;
    i1 %34 = icmp slt i32 %32, i32 %33;
    i32* %35 = getelementptr &(i32* %10)[i32 %23];
    cbr i1 %34(prob = 0.984615), ^super.header2, ^b1;
  ^b:
    cbr i1 %13(prob = 0.984615), ^super.header3, ^while.header1;
  ^while.body3:
    i32 %36 = phi [^super.header1, i32 0] [^while.body3, i32 %53];
    i32* %37 = getelementptr &(i32* %21)[i32 %36];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %37)[i64 1];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %37)[i64 2];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %37)[i64 3];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %37)[i64 4];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %37)[i64 5];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %37)[i64 6];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %37)[i64 7];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %37)[i64 8];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %37)[i64 9];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %37)[i64 10];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %37)[i64 11];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %37)[i64 12];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %37)[i64 13];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %37)[i64 14];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %37)[i64 15];
    store i32* %52 with i32 0;
    i32 %53 = add i32 %36, i32 16;
    i1 %54 = icmp sgt i32 %18, i32 %53;
    cbr i1 %54(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %55 = phi [^super.header1, i32 0] [^while.body3, i32 %53] [^while.body4, i32 %60];
    i32* %56 = getelementptr &(i32* %21)[i32 %55];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %56)[i64 1];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %56)[i64 2];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %56)[i64 3];
    store i32* %59 with i32 0;
    i32 %60 = add i32 %55, i32 4;
    i1 %61 = icmp sgt i32 %15, i32 %60;
    cbr i1 %61(prob = 0.75), ^while.body4, ^while.body1;
  ^super.header2:
    i32 %62 = add i32 %32, i32 4;
    i1 %63 = icmp sgt i32 %33, i32 %62;
    i32 %64 = add i32 %33, i32 -4;
    cbr i1 %63(prob = 0.941176), ^while.body5, ^while.body6;
  ^b1:
    i1 %65 = icmp sge i32 %32, i32 %33;
    cbr i1 %65(prob = 0.0153846), ^while.header, ^indirect;
  ^super.header3:
    cbr i1 %14(prob = 0.941176), ^super.header4, ^while.body7;
  ^while.header1:
    i32 %66 = phi [^b, i32 0] [^while.body7, i32 0] [^b3, i32 %115] [^while.body14, i32 %115];
    i1 %67 = icmp sgt i32 %12, i32 %66;
    cbr i1 %67(prob = 0.984615), ^while.body8, ^b2;
  ^while.body5:
    i32 %68 = phi [^super.header2, i32 %32] [^while.body5, i32 %97];
    i32* %69 = getelementptr &(i32* %4)[i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %21)[i32 %70];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %7)[i32 %68];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %72, i32 %74;
    store i32* %71 with i32 %75;
    i32* %76 = getelementptr &(i32* %69)[i64 1];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %21)[i32 %77];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %73)[i64 1];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %79, i32 %81;
    store i32* %78 with i32 %82;
    i32* %83 = getelementptr &(i32* %69)[i64 2];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %21)[i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %73)[i64 2];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    store i32* %85 with i32 %89;
    i32* %90 = getelementptr &(i32* %69)[i64 3];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %21)[i32 %91];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %73)[i64 3];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    store i32* %92 with i32 %96;
    i32 %97 = add i32 %68, i32 4;
    i1 %98 = icmp sgt i32 %64, i32 %97;
    cbr i1 %98(prob = 0.941176), ^while.body5, ^while.body6;
  ^indirect:
    i32 %99 = load i32* %35;
    i32 %100 = add i32 %99, i32 -1;
    ubr ^while.body11;
  ^super.header4:
    cbr i1 %17(prob = 0.941176), ^while.body9, ^while.body10;
  ^while.body6 {scalar}:
    i32 %101 = phi [^super.header2, i32 %32] [^while.body5, i32 %97] [^while.body6, i32 %109];
    i32* %102 = getelementptr &(i32* %4)[i32 %101];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %21)[i32 %103];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %7)[i32 %101];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %105, i32 %107;
    store i32* %104 with i32 %108;
    i32 %109 = add i32 %101, i32 1;
    i1 %110 = icmp sgt i32 %33, i32 %109;
    cbr i1 %110(prob = 0.75), ^while.body6, ^b1;
  ^while.body7 {scalar}:
    i32 %111 = phi [^super.header3, i32 0] [^while.body7, i32 %113] [^while.body10, i32 %145];
    i32* %112 = getelementptr &(i32* %10)[i32 %111];
    store i32* %112 with i32 0;
    i32 %113 = add i32 %111, i32 1;
    i1 %114 = icmp sgt i32 %12, i32 %113;
    cbr i1 %114(prob = 0.75), ^while.body7, ^while.header1;
  ^while.body8:
    i32 %115 = add i32 %66, i32 1;
    i32* %116 = getelementptr &(i32* %1)[i32 %115];
    i32* %117 = getelementptr &(i32* %1)[i32 %66];
    i32 %118 = load i32* %117;
    i32 %119 = load i32* %116;
    i1 %120 = icmp slt i32 %118, i32 %119;
    i32* %121 = getelementptr &(i32* %21)[i32 %66];
    cbr i1 %120(prob = 0.984615), ^super.header5, ^b3;
  ^b2:
    i32 %122 = add i32 %22, i32 1;
    i1 %123 = icmp slt i32 %122, i32 100;
    cbr i1 %123(prob = 0.99), ^while.body, ^b4;
  ^while.body9:
    i32 %124 = phi [^super.header4, i32 0] [^while.body9, i32 %144];
    i32 %125 = phi [^super.header4, i32 4] [^while.body9, i32 %142];
    i32* %126 = getelementptr &(i32* %10)[i32 %124];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %126)[i64 1];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %126)[i64 2];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %126)[i64 3];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %10)[i32 %125];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %130)[i64 1];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %130)[i64 2];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %130)[i64 3];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %130)[i64 4];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %130)[i64 5];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %130)[i64 6];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %130)[i64 7];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %130)[i64 8];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %130)[i64 9];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %130)[i64 10];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %130)[i64 11];
    store i32* %141 with i32 0;
    i32 %142 = add i32 %125, i32 16;
    i1 %143 = icmp sgt i32 %19, i32 %142;
    i32 %144 = add i32 %125, i32 12;
    cbr i1 %143(prob = 0.941176), ^while.body9, ^while.body10;
  ^while.body10 {scalar}:
    i32 %145 = phi [^super.header4, i32 4] [^while.body9, i32 %142] [^while.body10, i32 %151];
    i32 %146 = phi [^super.header4, i32 0] [^while.body9, i32 %144] [^while.body10, i32 %145];
    i32* %147 = getelementptr &(i32* %10)[i32 %146];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %147)[i64 1];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %147)[i64 2];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %147)[i64 3];
    store i32* %150 with i32 0;
    i32 %151 = add i32 %145, i32 4;
    i1 %152 = icmp sgt i32 %12, i32 %151;
    cbr i1 %152(prob = 0.75), ^while.body10, ^while.body7;
  ^while.body11:
    i32 %153 = phi [^indirect, i32 %32] [^while.body11, i32 %162];
    i32* %154 = getelementptr &(i32* %4)[i32 %153];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %21)[i32 %155];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %7)[i32 %153];
    i32 %159 = load i32* %158;
    i32 %160 = mul i32 %100, i32 %159;
    i32 %161 = add i32 %157, i32 %160;
    store i32* %156 with i32 %161;
    i32 %162 = add i32 %153, i32 1;
    i1 %163 = icmp sle i32 %33, i32 %162;
    cbr i1 %163(prob = 0.0153846), ^while.header, ^while.body11;
  ^super.header5:
    i32 %164 = add i32 %118, i32 4;
    i1 %165 = icmp sgt i32 %119, i32 %164;
    cbr i1 %165(prob = 0.941176), ^while.body12, ^while.body13;
  ^b3:
    i1 %166 = icmp sge i32 %118, i32 %119;
    cbr i1 %166(prob = 0.0153846), ^while.header1, ^indirect1;
  ^b4:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %21);
    ret i32 0;
  ^while.body12:
    i32 %167 = phi [^super.header5, i32 %164] [^while.body12, i32 %197];
    i32 %168 = phi [^super.header5, i32 %118] [^while.body12, i32 %167];
    i32* %169 = getelementptr &(i32* %4)[i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %10)[i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %7)[i32 %168];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %172, i32 %174;
    store i32* %171 with i32 %175;
    i32* %176 = getelementptr &(i32* %169)[i64 1];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %10)[i32 %177];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %173)[i64 1];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    store i32* %178 with i32 %182;
    i32* %183 = getelementptr &(i32* %169)[i64 2];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %10)[i32 %184];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %173)[i64 2];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %186, i32 %188;
    store i32* %185 with i32 %189;
    i32* %190 = getelementptr &(i32* %169)[i64 3];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %10)[i32 %191];
    i32 %193 = load i32* %192;
    i32* %194 = getelementptr &(i32* %173)[i64 3];
    i32 %195 = load i32* %194;
    i32 %196 = add i32 %193, i32 %195;
    store i32* %192 with i32 %196;
    i32 %197 = add i32 %167, i32 4;
    i1 %198 = icmp sgt i32 %119, i32 %197;
    cbr i1 %198(prob = 0.941176), ^while.body12, ^while.body13;
  ^indirect1:
    i32 %199 = load i32* %121;
    i32 %200 = add i32 %199, i32 -1;
    ubr ^while.body14;
  ^while.body13 {scalar}:
    i32 %201 = phi [^super.header5, i32 %118] [^while.body12, i32 %167] [^while.body13, i32 %209];
    i32* %202 = getelementptr &(i32* %4)[i32 %201];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %10)[i32 %203];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %7)[i32 %201];
    i32 %207 = load i32* %206;
    i32 %208 = add i32 %205, i32 %207;
    store i32* %204 with i32 %208;
    i32 %209 = add i32 %201, i32 1;
    i1 %210 = icmp sgt i32 %119, i32 %209;
    cbr i1 %210(prob = 0.75), ^while.body13, ^b3;
  ^while.body14:
    i32 %211 = phi [^indirect1, i32 %118] [^while.body14, i32 %220];
    i32* %212 = getelementptr &(i32* %4)[i32 %211];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %10)[i32 %213];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %7)[i32 %211];
    i32 %217 = load i32* %216;
    i32 %218 = mul i32 %200, i32 %217;
    i32 %219 = add i32 %215, i32 %218;
    store i32* %214 with i32 %219;
    i32 %220 = add i32 %211, i32 1;
    i1 %221 = icmp sle i32 %119, i32 %220;
    cbr i1 %221(prob = 0.0153846), ^while.header1, ^while.body14;
}
