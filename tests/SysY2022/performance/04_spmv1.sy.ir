internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i1 %14 = icmp sgt i32 %12, i32 3;
    i32 %15 = add i32 %2, i32 -4;
    i1 %16 = icmp sgt i32 %15, i32 15;
    i32 %17 = add i32 %2, i32 -19;
    [100010 * i32]* %18 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %19 = getelementptr &([100010 * i32]* %18)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %20 = phi [^entry, i32 0] [^b2, i32 %115];
    cbr i1 %13(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %14(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.header:
    i32 %21 = phi [^while.body, i32 0] [^scalar.header, i32 0] [^while.body3, i32 0] [^b1, i32 %25] [^while.body10, i32 %25];
    i1 %22 = icmp sgt i32 %12, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b;
  ^super.header1:
    cbr i1 %16(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^scalar.header:
    i32 %23 = phi [^super.header, i32 0] [^scalar.header1, i32 %52] [^while.body4, i32 %69];
    i1 %24 = icmp sgt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.75), ^while.body3, ^while.header;
  ^while.body1:
    i32 %25 = add i32 %21, i32 1;
    i32* %26 = getelementptr &(i32* %1)[i32 %25];
    i32* %27 = getelementptr &(i32* %1)[i32 %21];
    i32 %28 = load i32* %27;
    i32 %29 = load i32* %26;
    i1 %30 = icmp slt i32 %28, i32 %29;
    i32* %31 = getelementptr &(i32* %10)[i32 %21];
    cbr i1 %30(prob = 0.984615), ^super.header2, ^b1;
  ^b:
    cbr i1 %13(prob = 0.984615), ^super.header3, ^while.header1;
  ^while.body2:
    i32 %32 = phi [^super.header1, i32 0] [^while.body2, i32 %49];
    i32* %33 = getelementptr &(i32* %19)[i32 %32];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %33)[i64 1];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %33)[i64 2];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %33)[i64 3];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %33)[i64 4];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %33)[i64 5];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %33)[i64 6];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %33)[i64 7];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %33)[i64 8];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %33)[i64 9];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %33)[i64 10];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %33)[i64 11];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %33)[i64 12];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %33)[i64 13];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %33)[i64 14];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %33)[i64 15];
    store i32* %48 with i32 0;
    i32 %49 = add i32 %32, i32 16;
    i1 %50 = icmp sgt i32 %17, i32 %49;
    cbr i1 %50(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^scalar.header1:
    i32 %51 = phi [^super.header1, i32 0] [^while.body2, i32 %49];
    i32 %52 = phi [^super.header1, i32 undef] [^while.body2, i32 %49];
    i1 %53 = icmp sgt i32 %15, i32 %51;
    cbr i1 %53(prob = 0.75), ^while.body4, ^scalar.header;
  ^while.body3 {scalar}:
    i32 %54 = phi [^scalar.header, i32 %23] [^while.body3, i32 %56];
    i32* %55 = getelementptr &(i32* %19)[i32 %54];
    store i32* %55 with i32 0;
    i32 %56 = add i32 %54, i32 1;
    i1 %57 = icmp sgt i32 %12, i32 %56;
    cbr i1 %57(prob = 0.75), ^while.body3, ^while.header;
  ^super.header2:
    i32 %58 = add i32 %28, i32 3;
    i1 %59 = icmp sgt i32 %29, i32 %58;
    i32 %60 = add i32 %29, i32 -3;
    cbr i1 %59(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^b1:
    i1 %61 = icmp sge i32 %28, i32 %29;
    cbr i1 %61(prob = 0.0153846), ^while.header, ^indirect;
  ^super.header3:
    cbr i1 %14(prob = 0.941176), ^super.header4, ^scalar.header3;
  ^while.header1:
    i32 %62 = phi [^b, i32 0] [^scalar.header3, i32 0] [^while.body9, i32 0] [^b3, i32 %108] [^while.body14, i32 %108];
    i1 %63 = icmp sgt i32 %12, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.body6, ^b2;
  ^while.body4 {scalar}:
    i32 %64 = phi [^scalar.header1, i32 %51] [^while.body4, i32 %69];
    i32* %65 = getelementptr &(i32* %19)[i32 %64];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %65)[i64 1];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %65)[i64 2];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %65)[i64 3];
    store i32* %68 with i32 0;
    i32 %69 = add i32 %64, i32 4;
    i1 %70 = icmp sgt i32 %15, i32 %69;
    cbr i1 %70(prob = 0.75), ^while.body4, ^scalar.header;
  ^while.body5:
    i32 %71 = phi [^super.header2, i32 %28] [^while.body5, i32 %100];
    i32* %72 = getelementptr &(i32* %4)[i32 %71];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %19)[i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %7)[i32 %71];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    store i32* %74 with i32 %78;
    i32* %79 = getelementptr &(i32* %72)[i64 1];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %19)[i32 %80];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %76)[i64 1];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %82, i32 %84;
    store i32* %81 with i32 %85;
    i32* %86 = getelementptr &(i32* %72)[i64 2];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %19)[i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %76)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    store i32* %88 with i32 %92;
    i32* %93 = getelementptr &(i32* %72)[i64 3];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %19)[i32 %94];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %76)[i64 3];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    store i32* %95 with i32 %99;
    i32 %100 = add i32 %71, i32 4;
    i1 %101 = icmp sgt i32 %60, i32 %100;
    cbr i1 %101(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^indirect:
    i32 %102 = load i32* %31;
    i32 %103 = add i32 %102, i32 -1;
    ubr ^while.body10;
  ^super.header4:
    cbr i1 %16(prob = 0.941176), ^while.body7, ^scalar.header4;
  ^scalar.header2:
    i32 %104 = phi [^super.header2, i32 %28] [^while.body5, i32 %100];
    i1 %105 = icmp sgt i32 %29, i32 %104;
    cbr i1 %105(prob = 0.75), ^while.body8, ^b1;
  ^scalar.header3:
    i32 %106 = phi [^super.header3, i32 0] [^scalar.header4, i32 %147] [^while.body11, i32 %173];
    i1 %107 = icmp sgt i32 %12, i32 %106;
    cbr i1 %107(prob = 0.75), ^while.body9, ^while.header1;
  ^while.body6:
    i32 %108 = add i32 %62, i32 1;
    i32* %109 = getelementptr &(i32* %1)[i32 %108];
    i32* %110 = getelementptr &(i32* %1)[i32 %62];
    i32 %111 = load i32* %110;
    i32 %112 = load i32* %109;
    i1 %113 = icmp slt i32 %111, i32 %112;
    i32* %114 = getelementptr &(i32* %19)[i32 %62];
    cbr i1 %113(prob = 0.984615), ^super.header5, ^b3;
  ^b2:
    i32 %115 = add i32 %20, i32 1;
    i1 %116 = icmp slt i32 %115, i32 100;
    cbr i1 %116(prob = 0.99), ^while.body, ^b4;
  ^while.body7:
    i32 %117 = phi [^super.header4, i32 0] [^while.body7, i32 %134];
    i32* %118 = getelementptr &(i32* %10)[i32 %117];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %118)[i64 1];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %118)[i64 2];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %118)[i64 3];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %118)[i64 4];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %118)[i64 5];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %118)[i64 6];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %118)[i64 7];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %118)[i64 8];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %118)[i64 9];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %118)[i64 10];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %118)[i64 11];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %118)[i64 12];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %118)[i64 13];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %118)[i64 14];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %118)[i64 15];
    store i32* %133 with i32 0;
    i32 %134 = add i32 %117, i32 16;
    i1 %135 = icmp sgt i32 %17, i32 %134;
    cbr i1 %135(prob = 0.941176), ^while.body7, ^scalar.header4;
  ^while.body8 {scalar}:
    i32 %136 = phi [^scalar.header2, i32 %104] [^while.body8, i32 %144];
    i32* %137 = getelementptr &(i32* %4)[i32 %136];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %19)[i32 %138];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %7)[i32 %136];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %140, i32 %142;
    store i32* %139 with i32 %143;
    i32 %144 = add i32 %136, i32 1;
    i1 %145 = icmp sgt i32 %29, i32 %144;
    cbr i1 %145(prob = 0.75), ^while.body8, ^b1;
  ^scalar.header4:
    i32 %146 = phi [^super.header4, i32 0] [^while.body7, i32 %134];
    i32 %147 = phi [^super.header4, i32 undef] [^while.body7, i32 %134];
    i1 %148 = icmp sgt i32 %15, i32 %146;
    cbr i1 %148(prob = 0.75), ^while.body11, ^scalar.header3;
  ^while.body9 {scalar}:
    i32 %149 = phi [^scalar.header3, i32 %106] [^while.body9, i32 %151];
    i32* %150 = getelementptr &(i32* %10)[i32 %149];
    store i32* %150 with i32 0;
    i32 %151 = add i32 %149, i32 1;
    i1 %152 = icmp sgt i32 %12, i32 %151;
    cbr i1 %152(prob = 0.75), ^while.body9, ^while.header1;
  ^while.body10:
    i32 %153 = phi [^indirect, i32 %28] [^while.body10, i32 %162];
    i32* %154 = getelementptr &(i32* %4)[i32 %153];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %19)[i32 %155];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %7)[i32 %153];
    i32 %159 = load i32* %158;
    i32 %160 = mul i32 %103, i32 %159;
    i32 %161 = add i32 %157, i32 %160;
    store i32* %156 with i32 %161;
    i32 %162 = add i32 %153, i32 1;
    i1 %163 = icmp sle i32 %29, i32 %162;
    cbr i1 %163(prob = 0.0153846), ^while.header, ^while.body10;
  ^super.header5:
    i32 %164 = add i32 %111, i32 3;
    i1 %165 = icmp sgt i32 %112, i32 %164;
    i32 %166 = add i32 %112, i32 -3;
    cbr i1 %165(prob = 0.941176), ^while.body12, ^scalar.header5;
  ^b3:
    i1 %167 = icmp sge i32 %111, i32 %112;
    cbr i1 %167(prob = 0.0153846), ^while.header1, ^indirect1;
  ^b4:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %19);
    ret i32 0;
  ^while.body11 {scalar}:
    i32 %168 = phi [^scalar.header4, i32 %146] [^while.body11, i32 %173];
    i32* %169 = getelementptr &(i32* %10)[i32 %168];
    store i32* %169 with i32 0;
    i32* %170 = getelementptr &(i32* %169)[i64 1];
    store i32* %170 with i32 0;
    i32* %171 = getelementptr &(i32* %169)[i64 2];
    store i32* %171 with i32 0;
    i32* %172 = getelementptr &(i32* %169)[i64 3];
    store i32* %172 with i32 0;
    i32 %173 = add i32 %168, i32 4;
    i1 %174 = icmp sgt i32 %15, i32 %173;
    cbr i1 %174(prob = 0.75), ^while.body11, ^scalar.header3;
  ^while.body12:
    i32 %175 = phi [^super.header5, i32 %111] [^while.body12, i32 %204];
    i32* %176 = getelementptr &(i32* %4)[i32 %175];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %10)[i32 %177];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %7)[i32 %175];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    store i32* %178 with i32 %182;
    i32* %183 = getelementptr &(i32* %176)[i64 1];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %10)[i32 %184];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %180)[i64 1];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %186, i32 %188;
    store i32* %185 with i32 %189;
    i32* %190 = getelementptr &(i32* %176)[i64 2];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %10)[i32 %191];
    i32 %193 = load i32* %192;
    i32* %194 = getelementptr &(i32* %180)[i64 2];
    i32 %195 = load i32* %194;
    i32 %196 = add i32 %193, i32 %195;
    store i32* %192 with i32 %196;
    i32* %197 = getelementptr &(i32* %176)[i64 3];
    i32 %198 = load i32* %197;
    i32* %199 = getelementptr &(i32* %10)[i32 %198];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %180)[i64 3];
    i32 %202 = load i32* %201;
    i32 %203 = add i32 %200, i32 %202;
    store i32* %199 with i32 %203;
    i32 %204 = add i32 %175, i32 4;
    i1 %205 = icmp sgt i32 %166, i32 %204;
    cbr i1 %205(prob = 0.941176), ^while.body12, ^scalar.header5;
  ^indirect1:
    i32 %206 = load i32* %114;
    i32 %207 = add i32 %206, i32 -1;
    ubr ^while.body14;
  ^scalar.header5:
    i32 %208 = phi [^super.header5, i32 %111] [^while.body12, i32 %204];
    i1 %209 = icmp sgt i32 %112, i32 %208;
    cbr i1 %209(prob = 0.75), ^while.body13, ^b3;
  ^while.body13 {scalar}:
    i32 %210 = phi [^scalar.header5, i32 %208] [^while.body13, i32 %218];
    i32* %211 = getelementptr &(i32* %4)[i32 %210];
    i32 %212 = load i32* %211;
    i32* %213 = getelementptr &(i32* %10)[i32 %212];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &(i32* %7)[i32 %210];
    i32 %216 = load i32* %215;
    i32 %217 = add i32 %214, i32 %216;
    store i32* %213 with i32 %217;
    i32 %218 = add i32 %210, i32 1;
    i1 %219 = icmp sgt i32 %112, i32 %218;
    cbr i1 %219(prob = 0.75), ^while.body13, ^b3;
  ^while.body14:
    i32 %220 = phi [^indirect1, i32 %111] [^while.body14, i32 %229];
    i32* %221 = getelementptr &(i32* %4)[i32 %220];
    i32 %222 = load i32* %221;
    i32* %223 = getelementptr &(i32* %10)[i32 %222];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %7)[i32 %220];
    i32 %226 = load i32* %225;
    i32 %227 = mul i32 %207, i32 %226;
    i32 %228 = add i32 %224, i32 %227;
    store i32* %223 with i32 %228;
    i32 %229 = add i32 %220, i32 1;
    i1 %230 = icmp sle i32 %112, i32 %229;
    cbr i1 %230(prob = 0.0153846), ^while.header1, ^while.body14;
}
