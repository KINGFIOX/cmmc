internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %7] [^entry, i32 %0];
    i32 %5 = phi [^b, i32 %18] [^entry, i32 0];
    i1 %6 = scmp lt i32 %5, i32 %4;
    cbr i1 %6(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 %4] [^while.body, i32 %7];
    i32 %8 = phi [^while.header, i32 %5] [^while.body, i32 %8];
    i32 %9 = phi [^while.header, i32 0] [^while.body, i32 %17];
    i1 %10 = scmp lt i32 %9, i32 %7;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 %4] [^while.body1, i32 %11];
    i32 %12 = phi [^while.header, i32 0] [^while.body1, i32 %21];
    i1 %13 = scmp lt i32 %12, i32 %11;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body:
    [2010 * i32]* %14 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %8];
    i32* %15 = getelementptr &([2010 * i32]* %14)[i64 0][i32 %9];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %9, i32 1;
    ubr ^while.header1;
^b:
    i32 %18 = add i32 %8, i32 1;
    ubr ^while.header;
^while.body1:
    i32* %19 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %12];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    i32 %21 = add i32 %12, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @starttime(i32 59);
    store i32* %i2 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %22 = phi [^while.body9, i32 %107] [^b1, i32 %11];
    i32 %23 = phi [^while.body9, i32 %125] [^b1, i32 0];
    i1 %24 = scmp lt i32 %23, i32 50;
    cbr i1 %24(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %n1 with i32 %22;
    store i32* %y1 with i32 0;
    store i32* %x1 with i32 11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header4;
^b2:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %22, i32* %3);
    ret i32 0;
^while.header4:
    i32 %25 = phi [^while.body3, i32 %36] [^while.body2, i32 %22];
    i32 %26 = phi [^while.body3, i32 %37] [^while.body2, i32 %23];
    i32 %27 = phi [^while.body3, i32 %42] [^while.body2, i32 0];
    i32 %28 = phi [^while.body3, i32 %39] [^while.body2, i32 0];
    i32 %29 = phi [^while.body3, i32 %40] [^while.body2, i32 11];
    i32* %30 = phi [^while.body3, i32* %30] [^while.body2, i32* %3];
    i32* %31 = phi [^while.body3, i32* %31] [^while.body2, i32* %2];
    [2010 * i32]* %32 = phi [^while.body3, [2010 * i32]* %32] [^while.body2, [2010 * i32]* %1];
    i32 %33 = phi [^while.body3, i32 %41] [^while.body2, i32 %22];
    i1 %34 = scmp lt i32 %27, i32 %33;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32* %35 = getelementptr &(i32* %30)[i32 %27];
    store i32* %35 with i32 0;
    i32 %36 = load i32* %n2;
    i32 %37 = load i32* %i2;
    i32 %38 = load i32* %i1;
    i32 %39 = load i32* %y1;
    i32 %40 = load i32* %x1;
    i32 %41 = load i32* %n1;
    i32 %42 = add i32 %38, i32 1;
    store i32* %i1 with i32 %42;
    ubr ^while.header4;
^b3:
    store i32* %i1 with i32 0;
    ubr ^while.header5;
^while.header5:
    i32 %43 = phi [^b4, i32 %53] [^b3, i32 %25];
    i32 %44 = phi [^b4, i32 %54] [^b3, i32 %26];
    i32 %45 = phi [^b4, i32 %74] [^b3, i32 0];
    i32 %46 = phi [^b4, i32 %57] [^b3, i32 %28];
    i32 %47 = phi [^b4, i32 %58] [^b3, i32 %29];
    i32* %48 = phi [^b4, i32* %59] [^b3, i32* %30];
    i32* %49 = phi [^b4, i32* %60] [^b3, i32* %31];
    [2010 * i32]* %50 = phi [^b4, [2010 * i32]* %61] [^b3, [2010 * i32]* %32];
    i32 %51 = phi [^b4, i32 %62] [^b3, i32 %33];
    i1 %52 = scmp lt i32 %45, i32 %51;
    cbr i1 %52(prob = 0.97), ^while.body4, ^while.body5;
^while.body4:
    store i32* %j1 with i32 0;
    ubr ^while.header6;
^while.body5:
    store i32* %n with i32 %43;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header7;
^while.header6:
    i32 %53 = phi [^b6, i32 %117] [^while.body4, i32 %43];
    i32 %54 = phi [^b6, i32 %118] [^while.body4, i32 %44];
    i32 %55 = phi [^b6, i32 %124] [^while.body4, i32 0];
    i32 %56 = phi [^b6, i32 %120] [^while.body4, i32 %45];
    i32 %57 = phi [^b6, i32 %121] [^while.body4, i32 %46];
    i32 %58 = phi [^b6, i32 %122] [^while.body4, i32 %47];
    i32* %59 = phi [^b6, i32* %59] [^while.body4, i32* %48];
    i32* %60 = phi [^b6, i32* %60] [^while.body4, i32* %49];
    [2010 * i32]* %61 = phi [^b6, [2010 * i32]* %61] [^while.body4, [2010 * i32]* %50];
    i32 %62 = phi [^b6, i32 %123] [^while.body4, i32 %51];
    i1 %63 = scmp lt i32 %55, i32 %62;
    cbr i1 %63(prob = 0.97), ^while.body7, ^b4;
^while.header7:
    i32 %64 = phi [^while.body6, i32 %76] [^while.body5, i32 %43];
    i32 %65 = phi [^while.body6, i32 %77] [^while.body5, i32 %44];
    i32 %66 = phi [^while.body6, i32 %82] [^while.body5, i32 0];
    i32 %67 = phi [^while.body6, i32 %79] [^while.body5, i32 0];
    i32 %68 = phi [^while.body6, i32 %80] [^while.body5, i32 11];
    i32* %69 = phi [^while.body6, i32* %69] [^while.body5, i32* %2];
    i32* %70 = phi [^while.body6, i32* %70] [^while.body5, i32* %3];
    [2010 * i32]* %71 = phi [^while.body6, [2010 * i32]* %71] [^while.body5, [2010 * i32]* %1];
    i32 %72 = phi [^while.body6, i32 %81] [^while.body5, i32 %43];
    i1 %73 = scmp lt i32 %66, i32 %72;
    cbr i1 %73(prob = 0.97), ^while.body6, ^b5;
^b4:
    i32 %74 = add i32 %56, i32 1;
    store i32* %i1 with i32 %74;
    ubr ^while.header5;
^while.body6:
    i32* %75 = getelementptr &(i32* %69)[i32 %66];
    store i32* %75 with i32 0;
    i32 %76 = load i32* %n2;
    i32 %77 = load i32* %i2;
    i32 %78 = load i32* %i;
    i32 %79 = load i32* %y;
    i32 %80 = load i32* %x;
    i32 %81 = load i32* %n;
    i32 %82 = add i32 %78, i32 1;
    store i32* %i with i32 %82;
    ubr ^while.header7;
^while.body7:
    [2010 * i32]* %83 = getelementptr &([2010 * i32]* %61)[i32 %56];
    i32* %84 = getelementptr &([2010 * i32]* %83)[i64 0][i32 %55];
    i32 %85 = load i32* %84;
    i1 %86 = scmp eq i32 %85, i32 0;
    cbr i1 %86(prob = 0.5), ^if.then, ^if.else;
^b5:
    store i32* %i with i32 0;
    ubr ^while.header8;
^if.then:
    i32* %87 = getelementptr &(i32* %60)[i32 %56];
    i32 %88 = load i32* %87;
    i32 %89 = mul i32 %88, i32 %58;
    i32* %90 = getelementptr &(i32* %60)[i32 %55];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    store i32* %x1 with i32 %92;
    i32 %93 = sub i32 %57, i32 %92;
    store i32* %y1 with i32 %93;
    ubr ^b6;
^if.else:
    i32* %94 = getelementptr &(i32* %59)[i32 %56];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %60)[i32 %55];
    i32 %97 = load i32* %96;
    i32 %98 = mul i32 %85, i32 %97;
    i32 %99 = add i32 %95, i32 %98;
    store i32* %94 with i32 %99;
    i32 %100 = load i32* %n2;
    i32 %101 = load i32* %i2;
    i32 %102 = load i32* %j1;
    i32 %103 = load i32* %i1;
    i32 %104 = load i32* %y1;
    i32 %105 = load i32* %x1;
    i32 %106 = load i32* %n1;
    ubr ^b6;
^while.header8:
    i32 %107 = phi [^b7, i32 %126] [^b5, i32 %64];
    i32 %108 = phi [^b7, i32 %127] [^b5, i32 %65];
    i32 %109 = phi [^b7, i32 %137] [^b5, i32 0];
    i32 %110 = phi [^b7, i32 %130] [^b5, i32 %67];
    i32 %111 = phi [^b7, i32 %131] [^b5, i32 %68];
    i32* %112 = phi [^b7, i32* %132] [^b5, i32* %69];
    i32* %113 = phi [^b7, i32* %133] [^b5, i32* %70];
    [2010 * i32]* %114 = phi [^b7, [2010 * i32]* %134] [^b5, [2010 * i32]* %71];
    i32 %115 = phi [^b7, i32 %135] [^b5, i32 %72];
    i1 %116 = scmp lt i32 %109, i32 %115;
    cbr i1 %116(prob = 0.97), ^while.body8, ^while.body9;
^b6:
    i32 %117 = phi [^if.else, i32 %100] [^if.then, i32 %53];
    i32 %118 = phi [^if.else, i32 %101] [^if.then, i32 %54];
    i32 %119 = phi [^if.else, i32 %102] [^if.then, i32 %55];
    i32 %120 = phi [^if.else, i32 %103] [^if.then, i32 %56];
    i32 %121 = phi [^if.else, i32 %104] [^if.then, i32 %93];
    i32 %122 = phi [^if.else, i32 %105] [^if.then, i32 %92];
    i32 %123 = phi [^if.else, i32 %106] [^if.then, i32 %62];
    i32 %124 = add i32 %119, i32 1;
    store i32* %j1 with i32 %124;
    ubr ^while.header6;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header9;
^while.body9:
    i32 %125 = add i32 %108, i32 1;
    store i32* %i2 with i32 %125;
    ubr ^while.header3;
^while.header9:
    i32 %126 = phi [^b8, i32 %162] [^while.body8, i32 %107];
    i32 %127 = phi [^b8, i32 %163] [^while.body8, i32 %108];
    i32 %128 = phi [^b8, i32 %169] [^while.body8, i32 0];
    i32 %129 = phi [^b8, i32 %165] [^while.body8, i32 %109];
    i32 %130 = phi [^b8, i32 %166] [^while.body8, i32 %110];
    i32 %131 = phi [^b8, i32 %167] [^while.body8, i32 %111];
    i32* %132 = phi [^b8, i32* %132] [^while.body8, i32* %112];
    i32* %133 = phi [^b8, i32* %133] [^while.body8, i32* %113];
    [2010 * i32]* %134 = phi [^b8, [2010 * i32]* %134] [^while.body8, [2010 * i32]* %114];
    i32 %135 = phi [^b8, i32 %168] [^while.body8, i32 %115];
    i1 %136 = scmp lt i32 %128, i32 %135;
    cbr i1 %136(prob = 0.97), ^while.body10, ^b7;
^b7:
    i32 %137 = add i32 %129, i32 1;
    store i32* %i with i32 %137;
    ubr ^while.header8;
^while.body10:
    [2010 * i32]* %138 = getelementptr &([2010 * i32]* %134)[i32 %129];
    i32* %139 = getelementptr &([2010 * i32]* %138)[i64 0][i32 %128];
    i32 %140 = load i32* %139;
    i1 %141 = scmp eq i32 %140, i32 0;
    cbr i1 %141(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32* %142 = getelementptr &(i32* %133)[i32 %129];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %143, i32 %131;
    i32* %145 = getelementptr &(i32* %133)[i32 %128];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %144, i32 %146;
    store i32* %x with i32 %147;
    i32 %148 = sub i32 %130, i32 %147;
    store i32* %y with i32 %148;
    ubr ^b8;
^if.else1:
    i32* %149 = getelementptr &(i32* %132)[i32 %129];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %133)[i32 %128];
    i32 %152 = load i32* %151;
    i32 %153 = mul i32 %140, i32 %152;
    i32 %154 = add i32 %150, i32 %153;
    store i32* %149 with i32 %154;
    i32 %155 = load i32* %n2;
    i32 %156 = load i32* %i2;
    i32 %157 = load i32* %j;
    i32 %158 = load i32* %i;
    i32 %159 = load i32* %y;
    i32 %160 = load i32* %x;
    i32 %161 = load i32* %n;
    ubr ^b8;
^b8:
    i32 %162 = phi [^if.else1, i32 %155] [^if.then1, i32 %126];
    i32 %163 = phi [^if.else1, i32 %156] [^if.then1, i32 %127];
    i32 %164 = phi [^if.else1, i32 %157] [^if.then1, i32 %128];
    i32 %165 = phi [^if.else1, i32 %158] [^if.then1, i32 %129];
    i32 %166 = phi [^if.else1, i32 %159] [^if.then1, i32 %148];
    i32 %167 = phi [^if.else1, i32 %160] [^if.then1, i32 %147];
    i32 %168 = phi [^if.else1, i32 %161] [^if.then1, i32 %135];
    i32 %169 = add i32 %164, i32 1;
    store i32* %j with i32 %169;
    ubr ^while.header9;
}
