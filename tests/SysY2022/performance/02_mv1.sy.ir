internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -20;
    [2010 * [2010 * i32]]* %6 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 0] [^b, i32 %10];
    i1 %8 = icmp sgt i32 %0, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %3(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    cbr i1 %3(prob = 0.97), ^prebody1, ^b1;
  ^prebody:
    [2010 * i32]* %9 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i32 %7];
    ubr ^while.body;
  ^b:
    i32 %10 = add i32 %7, i32 1;
    ubr ^while.header;
  ^prebody1:
    [2010 * i32]* %11 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    ubr ^while.body1;
  ^b1:
    call (i32) -> void @starttime(i32 59);
    [2010 * i32]* %12 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i64 0];
    [2010 * i32]* %13 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %14 = getelementptr &([2010 * i32]* %13)[i64 0][i64 0];
    [2010 * i32]* %15 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %16 = getelementptr &([2010 * i32]* %15)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body, i32 %20];
    i32 %18 = call () -> i32 @getint();
    i32* %19 = getelementptr &([2010 * i32]* %9)[i64 0][i32 %17];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %0, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body, ^b;
  ^while.body1:
    i32 %22 = phi [^prebody1, i32 0] [^while.body1, i32 %25];
    i32 %23 = call () -> i32 @getint();
    i32* %24 = getelementptr &([2010 * i32]* %11)[i64 0][i32 %22];
    store i32* %24 with i32 %23;
    i32 %25 = add i32 %22, i32 1;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b1;
  ^while.body2:
    i32 %27 = phi [^b1, i32 0] [^while.body9, i32 %84];
    cbr i1 %3(prob = 0.97), ^super.header, ^while.header3;
  ^super.header:
    cbr i1 %4(prob = 0.89), ^super.header1, ^while.body3;
  ^while.header3:
    i32 %28 = phi [^while.body2, i32 0] [^while.body3, i32 0] [^b2, i32 %57];
    i1 %29 = icmp sgt i32 %0, i32 %28;
    [2010 * i32]* %30 = getelementptr &([2010 * i32]* %12)[i32 %28];
    i32* %31 = getelementptr &(i32* %16)[i32 %28];
    cbr i1 %29(prob = 0.97), ^while.header4, ^while.body4;
  ^super.header1:
    cbr i1 %2(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body3 {scalar}:
    i32 %32 = phi [^super.header, i32 0] [^while.body3, i32 %34] [^while.body6, i32 %63];
    i32* %33 = getelementptr &(i32* %16)[i32 %32];
    store i32* %33 with i32 0;
    i32 %34 = add i32 %32, i32 1;
    i1 %35 = icmp sgt i32 %0, i32 %34;
    cbr i1 %35(prob = 0.75), ^while.body3, ^while.header3;
  ^while.header4:
    i32 %36 = phi [^while.header3, i32 0] [^b3, i32 %72];
    i1 %37 = icmp sgt i32 %0, i32 %36;
    cbr i1 %37(prob = 0.97), ^while.body7, ^b2;
  ^while.body4:
    cbr i1 %3(prob = 0.97), ^super.header2, ^while.header5;
  ^while.body5:
    i32 %38 = phi [^super.header1, i32 0] [^while.body5, i32 %55];
    i32* %39 = getelementptr &(i32* %16)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %39)[i64 4];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %39)[i64 5];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %39)[i64 6];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %39)[i64 7];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %39)[i64 8];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %39)[i64 9];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %39)[i64 10];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %39)[i64 11];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %39)[i64 12];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %39)[i64 13];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %39)[i64 14];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %39)[i64 15];
    store i32* %54 with i32 0;
    i32 %55 = add i32 %38, i32 16;
    i1 %56 = icmp sgt i32 %5, i32 %55;
    cbr i1 %56(prob = 0.89), ^while.body5, ^while.body6;
  ^b2:
    i32 %57 = add i32 %28, i32 1;
    ubr ^while.header3;
  ^while.body6 {scalar}:
    i32 %58 = phi [^super.header1, i32 0] [^while.body5, i32 %55] [^while.body6, i32 %63];
    i32* %59 = getelementptr &(i32* %16)[i32 %58];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %59)[i64 1];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %59)[i64 2];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %59)[i64 3];
    store i32* %62 with i32 0;
    i32 %63 = add i32 %58, i32 4;
    i1 %64 = icmp sgt i32 %1, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body6, ^while.body3;
  ^while.body7:
    i32* %65 = getelementptr &([2010 * i32]* %30)[i64 0][i32 %36];
    i32 %66 = load i32* %65;
    i1 %67 = icmp eq i32 %66, i32 0;
    cbr i1 %67(prob = 0.5), ^b3, ^if.else;
  ^super.header2:
    cbr i1 %4(prob = 0.89), ^super.header3, ^while.body8;
  ^while.header5:
    i32 %68 = phi [^while.body4, i32 0] [^while.body8, i32 0] [^b4, i32 %105];
    i1 %69 = icmp sgt i32 %0, i32 %68;
    [2010 * i32]* %70 = getelementptr &([2010 * i32]* %12)[i32 %68];
    i32* %71 = getelementptr &(i32* %14)[i32 %68];
    cbr i1 %69(prob = 0.97), ^while.header6, ^while.body9;
  ^b3:
    i32 %72 = add i32 %36, i32 1;
    ubr ^while.header4;
  ^if.else:
    i32* %73 = getelementptr &(i32* %14)[i32 %36];
    i32 %74 = load i32* %31;
    i32 %75 = load i32* %73;
    i32 %76 = mul i32 %66, i32 %75;
    i32 %77 = add i32 %74, i32 %76;
    store i32* %31 with i32 %77;
    ubr ^b3;
  ^super.header3:
    cbr i1 %2(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body8 {scalar}:
    i32 %78 = phi [^super.header2, i32 0] [^while.body8, i32 %80] [^while.body11, i32 %111];
    i32* %79 = getelementptr &(i32* %14)[i32 %78];
    store i32* %79 with i32 0;
    i32 %80 = add i32 %78, i32 1;
    i1 %81 = icmp sgt i32 %0, i32 %80;
    cbr i1 %81(prob = 0.75), ^while.body8, ^while.header5;
  ^while.header6:
    i32 %82 = phi [^while.header5, i32 0] [^b6, i32 %116];
    i1 %83 = icmp sgt i32 %0, i32 %82;
    cbr i1 %83(prob = 0.97), ^while.body12, ^b4;
  ^while.body9:
    i32 %84 = add i32 %27, i32 1;
    i1 %85 = icmp slt i32 %84, i32 50;
    cbr i1 %85(prob = 0.98), ^while.body2, ^b5;
  ^while.body10:
    i32 %86 = phi [^super.header3, i32 0] [^while.body10, i32 %103];
    i32* %87 = getelementptr &(i32* %14)[i32 %86];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %87)[i64 1];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %87)[i64 2];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %87)[i64 3];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %87)[i64 4];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %87)[i64 5];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %87)[i64 6];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %87)[i64 7];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %87)[i64 8];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %87)[i64 9];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %87)[i64 10];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %87)[i64 11];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %87)[i64 12];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %87)[i64 13];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %87)[i64 14];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %87)[i64 15];
    store i32* %102 with i32 0;
    i32 %103 = add i32 %86, i32 16;
    i1 %104 = icmp sgt i32 %5, i32 %103;
    cbr i1 %104(prob = 0.89), ^while.body10, ^while.body11;
  ^b4:
    i32 %105 = add i32 %68, i32 1;
    ubr ^while.header5;
  ^while.body11 {scalar}:
    i32 %106 = phi [^super.header3, i32 0] [^while.body10, i32 %103] [^while.body11, i32 %111];
    i32* %107 = getelementptr &(i32* %14)[i32 %106];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %107)[i64 1];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %107)[i64 2];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %107)[i64 3];
    store i32* %110 with i32 0;
    i32 %111 = add i32 %106, i32 4;
    i1 %112 = icmp sgt i32 %1, i32 %111;
    cbr i1 %112(prob = 0.75), ^while.body11, ^while.body8;
  ^while.body12:
    i32* %113 = getelementptr &([2010 * i32]* %70)[i64 0][i32 %82];
    i32 %114 = load i32* %113;
    i1 %115 = icmp eq i32 %114, i32 0;
    cbr i1 %115(prob = 0.5), ^b6, ^if.else1;
  ^b5:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %16);
    ret i32 0;
  ^b6:
    i32 %116 = add i32 %82, i32 1;
    ubr ^while.header6;
  ^if.else1:
    i32* %117 = getelementptr &(i32* %16)[i32 %82];
    i32 %118 = load i32* %71;
    i32 %119 = load i32* %117;
    i32 %120 = mul i32 %114, i32 %119;
    i32 %121 = add i32 %118, i32 %120;
    store i32* %71 with i32 %121;
    ubr ^b6;
}
