internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -8;
    i1 %3 = icmp sgt i32 %0, i32 8;
    [2010 * [2010 * i32]]* %4 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^b, i32 %9];
    i1 %6 = icmp sgt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.992248), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.992248), ^prebody, ^b;
  ^while.header2:
    [2010 * i32]* %7 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    cbr i1 %1(prob = 0.992248), ^while.body, ^b1;
  ^prebody:
    [2010 * i32]* %8 = getelementptr &([2010 * [2010 * i32]]* %4)[i64 0][i32 %5];
    ubr ^while.body1;
  ^b:
    i32 %9 = add i32 %5, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @starttime(i32 59);
    [2010 * i32]* %10 = getelementptr &([2010 * [2010 * i32]]* %4)[i64 0][i64 0];
    i32* %11 = getelementptr &([2010 * i32]* %7)[i64 0][i64 0];
    [2010 * i32]* %12 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %13 = getelementptr &([2010 * i32]* %12)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %14 = phi [^while.header2, i32 0] [^while.body, i32 %17];
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([2010 * i32]* %7)[i64 0][i32 %14];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = icmp sgt i32 %0, i32 %17;
    cbr i1 %18(prob = 0.992248), ^while.body, ^b1;
  ^while.body1:
    i32 %19 = phi [^prebody, i32 0] [^while.body1, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([2010 * i32]* %8)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.992248), ^while.body1, ^b;
  ^while.body2:
    i32 %24 = phi [^b1, i32 0] [^while.body9, i32 %77];
    cbr i1 %1(prob = 0.992248), ^super.header, ^while.header3;
  ^super.header:
    cbr i1 %3(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.header3:
    i32 %25 = phi [^while.body2, i32 0] [^while.body4, i32 0] [^b2, i32 %46];
    i1 %26 = icmp sgt i32 %0, i32 %25;
    [2010 * i32]* %27 = getelementptr &([2010 * i32]* %10)[i32 %25];
    i32* %28 = getelementptr &(i32* %13)[i32 %25];
    cbr i1 %26(prob = 0.992248), ^while.header4, ^while.body5;
  ^while.body3:
    i32 %29 = phi [^super.header, i32 0] [^while.body3, i32 %38];
    i32* %30 = getelementptr &(i32* %13)[i32 %29];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %30)[i64 4];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %30)[i64 5];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %30)[i64 6];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %30)[i64 7];
    store i32* %37 with i32 0;
    i32 %38 = add i32 %29, i32 8;
    i1 %39 = icmp sgt i32 %2, i32 %38;
    cbr i1 %39(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %40 = phi [^super.header, i32 0] [^while.body3, i32 %38] [^while.body4, i32 %42];
    i32* %41 = getelementptr &(i32* %13)[i32 %40];
    store i32* %41 with i32 0;
    i32 %42 = add i32 %40, i32 1;
    i1 %43 = icmp sgt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.875), ^while.body4, ^while.header3;
  ^while.header4:
    i32 %44 = phi [^while.header3, i32 0] [^b3, i32 %54];
    i1 %45 = icmp sgt i32 %0, i32 %44;
    cbr i1 %45(prob = 0.992248), ^while.body6, ^b2;
  ^while.body5:
    cbr i1 %1(prob = 0.992248), ^super.header1, ^while.header5;
  ^b2:
    i32 %46 = add i32 %25, i32 1;
    ubr ^while.header3;
  ^while.body6:
    i32* %47 = getelementptr &([2010 * i32]* %27)[i64 0][i32 %44];
    i32 %48 = load i32* %47;
    i1 %49 = icmp eq i32 %48, i32 0;
    cbr i1 %49(prob = 0.5), ^b3, ^if.else;
  ^super.header1:
    cbr i1 %3(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.header5:
    i32 %50 = phi [^while.body5, i32 0] [^while.body8, i32 0] [^b4, i32 %79];
    i1 %51 = icmp sgt i32 %0, i32 %50;
    [2010 * i32]* %52 = getelementptr &([2010 * i32]* %10)[i32 %50];
    i32* %53 = getelementptr &(i32* %11)[i32 %50];
    cbr i1 %51(prob = 0.992248), ^while.header6, ^while.body9;
  ^b3:
    i32 %54 = add i32 %44, i32 1;
    ubr ^while.header4;
  ^if.else:
    i32* %55 = getelementptr &(i32* %11)[i32 %44];
    i32 %56 = load i32* %28;
    i32 %57 = load i32* %55;
    i32 %58 = mul i32 %48, i32 %57;
    i32 %59 = add i32 %56, i32 %58;
    store i32* %28 with i32 %59;
    ubr ^b3;
  ^while.body7:
    i32 %60 = phi [^super.header1, i32 0] [^while.body7, i32 %69];
    i32* %61 = getelementptr &(i32* %11)[i32 %60];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %61)[i64 1];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %61)[i64 2];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %61)[i64 3];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %61)[i64 4];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %61)[i64 5];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %61)[i64 6];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %61)[i64 7];
    store i32* %68 with i32 0;
    i32 %69 = add i32 %60, i32 8;
    i1 %70 = icmp sgt i32 %2, i32 %69;
    cbr i1 %70(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %71 = phi [^super.header1, i32 0] [^while.body7, i32 %69] [^while.body8, i32 %73];
    i32* %72 = getelementptr &(i32* %11)[i32 %71];
    store i32* %72 with i32 0;
    i32 %73 = add i32 %71, i32 1;
    i1 %74 = icmp sgt i32 %0, i32 %73;
    cbr i1 %74(prob = 0.875), ^while.body8, ^while.header5;
  ^while.header6:
    i32 %75 = phi [^while.header5, i32 0] [^b6, i32 %83];
    i1 %76 = icmp sgt i32 %0, i32 %75;
    cbr i1 %76(prob = 0.992248), ^while.body10, ^b4;
  ^while.body9:
    i32 %77 = add i32 %24, i32 1;
    i1 %78 = icmp slt i32 %77, i32 50;
    cbr i1 %78(prob = 0.98), ^while.body2, ^b5;
  ^b4:
    i32 %79 = add i32 %50, i32 1;
    ubr ^while.header5;
  ^while.body10:
    i32* %80 = getelementptr &([2010 * i32]* %52)[i64 0][i32 %75];
    i32 %81 = load i32* %80;
    i1 %82 = icmp eq i32 %81, i32 0;
    cbr i1 %82(prob = 0.5), ^b6, ^if.else1;
  ^b5:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %13);
    ret i32 0;
  ^b6:
    i32 %83 = add i32 %75, i32 1;
    ubr ^while.header6;
  ^if.else1:
    i32* %84 = getelementptr &(i32* %13)[i32 %75];
    i32 %85 = load i32* %53;
    i32 %86 = load i32* %84;
    i32 %87 = mul i32 %81, i32 %86;
    i32 %88 = add i32 %85, i32 %87;
    store i32* %53 with i32 %88;
    ubr ^b6;
}
