internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A { Flexible };
internal [2010 * i32]* @B { Flexible };
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    [2010 * [2010 * i32]]* %2 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %3 = phi [^entry, i32 0] [^b, i32 %6];
    i1 %4 = icmp sgt i32 %0, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    cbr i1 %1(prob = 0.97), ^prebody1, ^b1;
  ^prebody:
    [2010 * i32]* %5 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i32 %3];
    ubr ^while.body;
  ^b:
    i32 %6 = add i32 %3, i32 1;
    ubr ^while.header;
  ^prebody1:
    [2010 * i32]* %7 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    ubr ^while.body1;
  ^b1:
    call (i32) -> void @starttime(i32 59);
    [2010 * i32]* %8 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i64 0];
    [2010 * i32]* %9 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %10 = getelementptr &([2010 * i32]* %9)[i64 0][i64 0];
    [2010 * i32]* %11 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %12 = getelementptr &([2010 * i32]* %11)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %13 = phi [^prebody, i32 0] [^while.body, i32 %16];
    i32 %14 = call () -> i32 @getint();
    i32* %15 = getelementptr &([2010 * i32]* %5)[i64 0][i32 %13];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %13, i32 1;
    i1 %17 = icmp sgt i32 %0, i32 %16;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
  ^while.body1:
    i32 %18 = phi [^prebody1, i32 0] [^while.body1, i32 %21];
    i32 %19 = call () -> i32 @getint();
    i32* %20 = getelementptr &([2010 * i32]* %7)[i64 0][i32 %18];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %18, i32 1;
    i1 %22 = icmp sgt i32 %0, i32 %21;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
  ^while.body2:
    i32 %23 = phi [^b1, i32 0] [^while.body9, i32 %68];
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header3;
  ^super.header:
    i32 %24 = phi [^while.body2, i32 0] [^while.body3, i32 %25];
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header3:
    i32 %27 = phi [^while.body2, i32 0] [^while.body4, i32 0] [^b2, i32 %41];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    [2010 * i32]* %29 = getelementptr &([2010 * i32]* %8)[i32 %27];
    i32* %30 = getelementptr &(i32* %12)[i32 %27];
    cbr i1 %28(prob = 0.97), ^while.header4, ^while.body5;
  ^while.body3:
    i32* %31 = getelementptr &(i32* %12)[i32 %24];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %31)[i64 1];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %31)[i64 2];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %31)[i64 3];
    store i32* %34 with i32 0;
    ubr ^super.header;
  ^while.body4:
    i32 %35 = phi [^super.header, i32 %24] [^while.body4, i32 %37];
    i32* %36 = getelementptr &(i32* %12)[i32 %35];
    store i32* %36 with i32 0;
    i32 %37 = add i32 %35, i32 1;
    i1 %38 = icmp sgt i32 %0, i32 %37;
    cbr i1 %38(prob = 0.75), ^while.body4, ^while.header3;
  ^while.header4:
    i32 %39 = phi [^while.header3, i32 0] [^b3, i32 %52];
    i1 %40 = icmp sgt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.97), ^while.body6, ^b2;
  ^while.body5:
    cbr i1 %1(prob = 0.97), ^super.header1, ^while.header5;
  ^b2:
    i32 %41 = add i32 %27, i32 1;
    ubr ^while.header3;
  ^while.body6:
    i32* %42 = getelementptr &([2010 * i32]* %29)[i64 0][i32 %39];
    i32 %43 = load i32* %42;
    i1 %44 = icmp eq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^b3, ^if.else;
  ^super.header1:
    i32 %45 = phi [^while.body5, i32 0] [^while.body7, i32 %46];
    i32 %46 = add i32 %45, i32 4;
    i1 %47 = icmp sgt i32 %0, i32 %46;
    cbr i1 %47(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header5:
    i32 %48 = phi [^while.body5, i32 0] [^while.body8, i32 0] [^b4, i32 %70];
    i1 %49 = icmp sgt i32 %0, i32 %48;
    [2010 * i32]* %50 = getelementptr &([2010 * i32]* %8)[i32 %48];
    i32* %51 = getelementptr &(i32* %10)[i32 %48];
    cbr i1 %49(prob = 0.97), ^while.header6, ^while.body9;
  ^b3:
    i32 %52 = add i32 %39, i32 1;
    ubr ^while.header4;
  ^if.else:
    i32* %53 = getelementptr &(i32* %10)[i32 %39];
    i32 %54 = load i32* %30;
    i32 %55 = load i32* %53;
    i32 %56 = mul i32 %43, i32 %55;
    i32 %57 = add i32 %54, i32 %56;
    store i32* %30 with i32 %57;
    ubr ^b3;
  ^while.body7:
    i32* %58 = getelementptr &(i32* %10)[i32 %45];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %58)[i64 1];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %58)[i64 2];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %58)[i64 3];
    store i32* %61 with i32 0;
    ubr ^super.header1;
  ^while.body8:
    i32 %62 = phi [^super.header1, i32 %45] [^while.body8, i32 %64];
    i32* %63 = getelementptr &(i32* %10)[i32 %62];
    store i32* %63 with i32 0;
    i32 %64 = add i32 %62, i32 1;
    i1 %65 = icmp sgt i32 %0, i32 %64;
    cbr i1 %65(prob = 0.75), ^while.body8, ^while.header5;
  ^while.header6:
    i32 %66 = phi [^while.header5, i32 0] [^b6, i32 %74];
    i1 %67 = icmp sgt i32 %0, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body10, ^b4;
  ^while.body9:
    i32 %68 = add i32 %23, i32 1;
    i1 %69 = icmp slt i32 %68, i32 50;
    cbr i1 %69(prob = 0.98), ^while.body2, ^b5;
  ^b4:
    i32 %70 = add i32 %48, i32 1;
    ubr ^while.header5;
  ^while.body10:
    i32* %71 = getelementptr &([2010 * i32]* %50)[i64 0][i32 %66];
    i32 %72 = load i32* %71;
    i1 %73 = icmp eq i32 %72, i32 0;
    cbr i1 %73(prob = 0.5), ^b6, ^if.else1;
  ^b5:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %12);
    ret i32 0;
  ^b6:
    i32 %74 = add i32 %66, i32 1;
    ubr ^while.header6;
  ^if.else1:
    i32* %75 = getelementptr &(i32* %12)[i32 %66];
    i32 %76 = load i32* %51;
    i32 %77 = load i32* %75;
    i32 %78 = mul i32 %72, i32 %77;
    i32 %79 = add i32 %76, i32 %78;
    store i32* %51 with i32 %79;
    ubr ^b6;
}
