internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -20;
    [2010 * [2010 * i32]]* %6 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    [2010 * i32]* %7 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i64 0];
    [2010 * i32]* %8 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %9 = getelementptr &([2010 * i32]* %8)[i64 0][i64 0];
    [2010 * i32]* %10 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %11 = getelementptr &([2010 * i32]* %10)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %12 = phi [^entry, i32 0] [^b1, i32 %25];
    i1 %13 = icmp sgt i32 %0, i32 %12;
    cbr i1 %13(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    [2010 * i32]* %14 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i32 %12];
    ubr ^while.body;
  ^while.header1:
    cbr i1 %3(prob = 0.984615), ^while.body1, ^b;
  ^b:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body2;
  ^while.body:
    i32 %15 = phi [^prebody, i32 0] [^while.body, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32* %17 = getelementptr &([2010 * i32]* %14)[i64 0][i32 %15];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b1;
  ^while.body1:
    i32 %20 = phi [^while.header1, i32 0] [^while.body1, i32 %23];
    i32 %21 = call () -> i32 @getint();
    i32* %22 = getelementptr &([2010 * i32]* %8)[i64 0][i32 %20];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %20, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body1, ^b;
  ^b1:
    i32 %25 = add i32 %12, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %26 = phi [^b, i32 0] [^while.body8, i32 %76];
    cbr i1 %3(prob = 0.984615), ^super.header, ^while.header2;
  ^super.header:
    cbr i1 %4(prob = 0.941176), ^super.header1, ^while.body3;
  ^while.header2:
    i32 %27 = phi [^while.body2, i32 0] [^while.body3, i32 0] [^b2, i32 %52];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.header3, ^while.body4;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body5, ^while.body6;
  ^while.body3 {scalar}:
    i32 %29 = phi [^super.header, i32 0] [^while.body3, i32 %31] [^while.body6, i32 %58];
    i32* %30 = getelementptr &(i32* %11)[i32 %29];
    store i32* %30 with i32 0;
    i32 %31 = add i32 %29, i32 1;
    i1 %32 = icmp sgt i32 %0, i32 %31;
    cbr i1 %32(prob = 0.75), ^while.body3, ^while.header2;
  ^while.header3:
    cbr i1 %3(prob = 0.984615), ^super.header2, ^b2;
  ^while.body4:
    cbr i1 %3(prob = 0.984615), ^super.header3, ^while.header4;
  ^while.body5:
    i32 %33 = phi [^super.header1, i32 0] [^while.body5, i32 %50];
    i32* %34 = getelementptr &(i32* %11)[i32 %33];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 0;
    i32 %50 = add i32 %33, i32 16;
    i1 %51 = icmp sgt i32 %5, i32 %50;
    cbr i1 %51(prob = 0.941176), ^while.body5, ^while.body6;
  ^b2:
    i32 %52 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^while.body6 {scalar}:
    i32 %53 = phi [^super.header1, i32 0] [^while.body5, i32 %50] [^while.body6, i32 %58];
    i32* %54 = getelementptr &(i32* %11)[i32 %53];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %54)[i64 1];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %54)[i64 2];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %54)[i64 3];
    store i32* %57 with i32 0;
    i32 %58 = add i32 %53, i32 4;
    i1 %59 = icmp sgt i32 %1, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body6, ^while.body3;
  ^super.header2:
    [2010 * i32]* %60 = getelementptr &([2010 * i32]* %7)[i32 %27];
    i32* %61 = getelementptr &(i32* %11)[i32 %27];
    cbr i1 %4(prob = 0.941176), ^b3, ^b4;
  ^super.header3:
    cbr i1 %4(prob = 0.941176), ^super.header4, ^while.body7;
  ^while.header4:
    i32 %62 = phi [^while.body4, i32 0] [^while.body7, i32 0] [^b7, i32 %113];
    i1 %63 = icmp sgt i32 %0, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.header5, ^while.body8;
  ^b3:
    i32 %64 = phi [^super.header2, i32 0] [^b15, i32 %170];
    i32* %65 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %64];
    i32 %66 = load i32* %65;
    i1 %67 = icmp eq i32 %66, i32 0;
    cbr i1 %67(prob = 0.5), ^b5, ^if.else;
  ^b4 {scalar}:
    i32 %68 = phi [^super.header2, i32 0] [^b6, i32 %92] [^b15, i32 %170];
    i32* %69 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = icmp eq i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^b6, ^if.else1;
  ^super.header4:
    cbr i1 %2(prob = 0.941176), ^while.body9, ^while.body10;
  ^while.body7 {scalar}:
    i32 %72 = phi [^super.header3, i32 0] [^while.body7, i32 %74] [^while.body10, i32 %119];
    i32* %73 = getelementptr &(i32* %9)[i32 %72];
    store i32* %73 with i32 0;
    i32 %74 = add i32 %72, i32 1;
    i1 %75 = icmp sgt i32 %0, i32 %74;
    cbr i1 %75(prob = 0.75), ^while.body7, ^while.header4;
  ^while.header5:
    cbr i1 %3(prob = 0.984615), ^super.header5, ^b7;
  ^while.body8:
    i32 %76 = add i32 %26, i32 1;
    i1 %77 = icmp slt i32 %76, i32 50;
    cbr i1 %77(prob = 0.98), ^while.body2, ^b8;
  ^if.else:
    i32* %78 = getelementptr &(i32* %9)[i32 %64];
    i32 %79 = load i32* %61;
    i32 %80 = load i32* %78;
    i32 %81 = mul i32 %66, i32 %80;
    i32 %82 = add i32 %79, i32 %81;
    store i32* %61 with i32 %82;
    ubr ^b5;
  ^if.else1:
    i32* %83 = getelementptr &(i32* %9)[i32 %68];
    i32 %84 = load i32* %61;
    i32 %85 = load i32* %83;
    i32 %86 = mul i32 %70, i32 %85;
    i32 %87 = add i32 %84, i32 %86;
    store i32* %61 with i32 %87;
    ubr ^b6;
  ^b5:
    i32 %88 = add i32 %64, i32 1;
    i32* %89 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %88];
    i32 %90 = load i32* %89;
    i1 %91 = icmp eq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^b9, ^if.else2;
  ^b6:
    i32 %92 = add i32 %68, i32 1;
    i1 %93 = icmp sgt i32 %0, i32 %92;
    cbr i1 %93(prob = 0.75), ^b4, ^b2;
  ^while.body9:
    i32 %94 = phi [^super.header4, i32 0] [^while.body9, i32 %111];
    i32* %95 = getelementptr &(i32* %9)[i32 %94];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %95)[i64 1];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %95)[i64 2];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %95)[i64 3];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %95)[i64 4];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %95)[i64 5];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %95)[i64 6];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %95)[i64 7];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %95)[i64 8];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %95)[i64 9];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %95)[i64 10];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %95)[i64 11];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %95)[i64 12];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %95)[i64 13];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %95)[i64 14];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %95)[i64 15];
    store i32* %110 with i32 0;
    i32 %111 = add i32 %94, i32 16;
    i1 %112 = icmp sgt i32 %5, i32 %111;
    cbr i1 %112(prob = 0.941176), ^while.body9, ^while.body10;
  ^b7:
    i32 %113 = add i32 %62, i32 1;
    ubr ^while.header4;
  ^while.body10 {scalar}:
    i32 %114 = phi [^super.header4, i32 0] [^while.body9, i32 %111] [^while.body10, i32 %119];
    i32* %115 = getelementptr &(i32* %9)[i32 %114];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %115)[i64 1];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %115)[i64 2];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %115)[i64 3];
    store i32* %118 with i32 0;
    i32 %119 = add i32 %114, i32 4;
    i1 %120 = icmp sgt i32 %1, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body10, ^while.body7;
  ^super.header5:
    [2010 * i32]* %121 = getelementptr &([2010 * i32]* %7)[i32 %62];
    i32* %122 = getelementptr &(i32* %9)[i32 %62];
    cbr i1 %4(prob = 0.941176), ^b10, ^b11;
  ^b8:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %11);
    ret i32 0;
  ^if.else2:
    i32* %123 = getelementptr &(i32* %9)[i32 %88];
    i32 %124 = load i32* %61;
    i32 %125 = load i32* %123;
    i32 %126 = mul i32 %90, i32 %125;
    i32 %127 = add i32 %124, i32 %126;
    store i32* %61 with i32 %127;
    ubr ^b9;
  ^b9:
    i32 %128 = add i32 %64, i32 2;
    i32* %129 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i1 %131 = icmp eq i32 %130, i32 0;
    cbr i1 %131(prob = 0.5), ^b12, ^if.else3;
  ^b10:
    i32 %132 = phi [^super.header5, i32 0] [^b18, i32 %195];
    i32* %133 = getelementptr &([2010 * i32]* %121)[i64 0][i32 %132];
    i32 %134 = load i32* %133;
    i1 %135 = icmp eq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^b13, ^if.else4;
  ^b11 {scalar}:
    i32 %136 = phi [^super.header5, i32 0] [^b14, i32 %163] [^b18, i32 %195];
    i32* %137 = getelementptr &([2010 * i32]* %121)[i64 0][i32 %136];
    i32 %138 = load i32* %137;
    i1 %139 = icmp eq i32 %138, i32 0;
    cbr i1 %139(prob = 0.5), ^b14, ^if.else5;
  ^if.else3:
    i32* %140 = getelementptr &(i32* %9)[i32 %128];
    i32 %141 = load i32* %61;
    i32 %142 = load i32* %140;
    i32 %143 = mul i32 %130, i32 %142;
    i32 %144 = add i32 %141, i32 %143;
    store i32* %61 with i32 %144;
    ubr ^b12;
  ^b12:
    i32 %145 = add i32 %64, i32 3;
    i32* %146 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %145];
    i32 %147 = load i32* %146;
    i1 %148 = icmp eq i32 %147, i32 0;
    cbr i1 %148(prob = 0.5), ^b15, ^if.else6;
  ^if.else4:
    i32* %149 = getelementptr &(i32* %11)[i32 %132];
    i32 %150 = load i32* %122;
    i32 %151 = load i32* %149;
    i32 %152 = mul i32 %134, i32 %151;
    i32 %153 = add i32 %150, i32 %152;
    store i32* %122 with i32 %153;
    ubr ^b13;
  ^if.else5:
    i32* %154 = getelementptr &(i32* %11)[i32 %136];
    i32 %155 = load i32* %122;
    i32 %156 = load i32* %154;
    i32 %157 = mul i32 %138, i32 %156;
    i32 %158 = add i32 %155, i32 %157;
    store i32* %122 with i32 %158;
    ubr ^b14;
  ^b13:
    i32 %159 = add i32 %132, i32 1;
    i32* %160 = getelementptr &([2010 * i32]* %121)[i64 0][i32 %159];
    i32 %161 = load i32* %160;
    i1 %162 = icmp eq i32 %161, i32 0;
    cbr i1 %162(prob = 0.5), ^b16, ^if.else7;
  ^b14:
    i32 %163 = add i32 %136, i32 1;
    i1 %164 = icmp sgt i32 %0, i32 %163;
    cbr i1 %164(prob = 0.75), ^b11, ^b7;
  ^if.else6:
    i32* %165 = getelementptr &(i32* %9)[i32 %145];
    i32 %166 = load i32* %61;
    i32 %167 = load i32* %165;
    i32 %168 = mul i32 %147, i32 %167;
    i32 %169 = add i32 %166, i32 %168;
    store i32* %61 with i32 %169;
    ubr ^b15;
  ^b15:
    i32 %170 = add i32 %64, i32 4;
    i1 %171 = icmp sgt i32 %1, i32 %170;
    cbr i1 %171(prob = 0.941176), ^b3, ^b4;
  ^if.else7:
    i32* %172 = getelementptr &(i32* %11)[i32 %159];
    i32 %173 = load i32* %122;
    i32 %174 = load i32* %172;
    i32 %175 = mul i32 %161, i32 %174;
    i32 %176 = add i32 %173, i32 %175;
    store i32* %122 with i32 %176;
    ubr ^b16;
  ^b16:
    i32 %177 = add i32 %132, i32 2;
    i32* %178 = getelementptr &([2010 * i32]* %121)[i64 0][i32 %177];
    i32 %179 = load i32* %178;
    i1 %180 = icmp eq i32 %179, i32 0;
    cbr i1 %180(prob = 0.5), ^b17, ^if.else8;
  ^if.else8:
    i32* %181 = getelementptr &(i32* %11)[i32 %177];
    i32 %182 = load i32* %122;
    i32 %183 = load i32* %181;
    i32 %184 = mul i32 %179, i32 %183;
    i32 %185 = add i32 %182, i32 %184;
    store i32* %122 with i32 %185;
    ubr ^b17;
  ^b17:
    i32 %186 = add i32 %132, i32 3;
    i32* %187 = getelementptr &([2010 * i32]* %121)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    i1 %189 = icmp eq i32 %188, i32 0;
    cbr i1 %189(prob = 0.5), ^b18, ^if.else9;
  ^if.else9:
    i32* %190 = getelementptr &(i32* %11)[i32 %186];
    i32 %191 = load i32* %122;
    i32 %192 = load i32* %190;
    i32 %193 = mul i32 %188, i32 %192;
    i32 %194 = add i32 %191, i32 %193;
    store i32* %122 with i32 %194;
    ubr ^b18;
  ^b18:
    i32 %195 = add i32 %132, i32 4;
    i1 %196 = icmp sgt i32 %1, i32 %195;
    cbr i1 %196(prob = 0.941176), ^b10, ^b11;
}
