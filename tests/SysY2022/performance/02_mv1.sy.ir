internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %i = alloc i32;
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    cbr i1 %4(prob = 0.97), [ ^super.header i32* %n, i32* %i, [2010 * i32]* %1, i32* %2, i32* %3, i32* %3, i32 %0, i32 0, i32 0 ], [ ^b i32* %n, i32* %i, i32* %3, i32* %2, [2010 * i32]* %1, i32* %3, i32 %0, i1 %4 ];
^super.header(i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1(prob = 0.67), [ ^while.body i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^while.body1 i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i1 %arg7):
    cbr i1 %arg7(prob = 0.97), [ ^super.header1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 0 ], [ ^b1 i32* %arg, i32* %arg1, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg5, i32 %arg6 ];
^while.body(i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    [2010 * i32]* %0 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %arg7];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i64 0][i32 %arg8];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32* %3 = getelementptr &(i32* %1)[i64 1];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32* %5 = getelementptr &(i32* %1)[i64 2];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32* %7 = getelementptr &(i32* %1)[i64 3];
    i32 %8 = call () -> i32 @getint();
    store i32* %7 with i32 %8;
    i32* %9 = getelementptr &(i32* %1)[i64 4];
    i32 %10 = call () -> i32 @getint();
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(i32* %1)[i64 5];
    i32 %12 = call () -> i32 @getint();
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(i32* %1)[i64 6];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %1)[i64 7];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %1)[i64 8];
    i32 %18 = call () -> i32 @getint();
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %1)[i64 9];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %1)[i64 10];
    i32 %22 = call () -> i32 @getint();
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %1)[i64 11];
    i32 %24 = call () -> i32 @getint();
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %1)[i64 12];
    i32 %26 = call () -> i32 @getint();
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %1)[i64 13];
    i32 %28 = call () -> i32 @getint();
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %1)[i64 14];
    i32 %30 = call () -> i32 @getint();
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %1)[i64 15];
    i32 %32 = call () -> i32 @getint();
    store i32* %31 with i32 %32;
    i32 %33 = add i32 %arg8, i32 16;
    i1 %34 = scmp lt i32 %33, i32 %arg6;
    cbr i1 %34(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %33 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, [2010 * i32]* %arg2, i32* %arg5, i32 %arg6, i32 %arg6, i32 %arg7 ];
^b1(i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    call (i32) -> void @starttime(i32 59);
    store i32* %arg1 with i32 0;
    ubr [ ^while.body4 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, [2010 * i32]* %arg2, i32* %arg5, i32 %arg6, i32 0 ];
^while.body1(i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    [2010 * i32]* %0 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %arg7];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i64 0][i32 %arg8];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg8, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg6;
    cbr i1 %4(prob = 0.97), [ ^while.body1 i32* %arg, i32* %arg1, [2010 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %3 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, [2010 * i32]* %arg2, i32* %arg5, i32 %arg6, i32 %arg6, i32 %arg7 ];
^super.header1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1(prob = 0.67), [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %arg7];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = call () -> i32 @getint();
    store i32* %2 with i32 %3;
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = call () -> i32 @getint();
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = call () -> i32 @getint();
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = call () -> i32 @getint();
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = call () -> i32 @getint();
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = call () -> i32 @getint();
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = call () -> i32 @getint();
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = call () -> i32 @getint();
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = call () -> i32 @getint();
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = call () -> i32 @getint();
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = call () -> i32 @getint();
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = call () -> i32 @getint();
    store i32* %30 with i32 %31;
    i32 %32 = add i32 %arg7, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg6;
    cbr i1 %33(prob = 0.97), [ ^super.header1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %32 ], [ ^b1 i32* %arg, i32* %arg1, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg5, i32 %arg6 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg5, i32 %arg7, i32 %0, i32 0 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg7, i1 true ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %arg7];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg7, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg6;
    cbr i1 %3(prob = 0.97), [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %2 ], [ ^b1 i32* %arg, i32* %arg1, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg5, i32 %arg6 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [2010 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %n = alloc i32;
    store i32* %n with i32 %arg6;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i1 %0 = scmp gt i32 %arg6, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body5 i32* %x, i32* %y, i32* %j, i32* %n, i32* %i, i32* %arg1, i32* %arg5, [2010 * i32]* %arg4, i32* %arg2, i32* %arg3, i32* %arg, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32 0, i32 %arg6, i32 11, i32 0, i32 0 ], [ ^b2 i32* %n, i32* %x, i32* %y, i32* %j, i32* %i, i32* %arg1, i32* %arg5, [2010 * i32]* %arg4, i32* %arg2, i32* %arg3, i32* %arg, i32 %arg6, i32 %arg7, i32 %arg6, [2010 * i32]* %arg4, i32* %arg3, i32* %arg2, i32 11, i32 0 ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32* %0 = getelementptr &(i32* %arg13)[i32 %arg14];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg10;
    i32 %2 = load i32* %arg5;
    i32 %3 = add i32 %arg18, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg15;
    cbr i1 %4(prob = 0.97), [ ^indirect1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %3, i32 %arg15, i32 %3 ], [ ^b2 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %2, i32 %1, i32 %arg15, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg16, i32 %arg17 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp gt i32 %arg13, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 0 ], [ ^while.body7 i32* %arg10, i32* %arg9, i32* %arg8, [2010 * i32]* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    ubr [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %1, i32 %0, i32 %arg16 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp gt i32 %arg13, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body8 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 0 ], [ ^b3 i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg, i32* %arg3, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, [2010 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %n = alloc i32;
    store i32* %n with i32 %arg6;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i1 %0 = scmp gt i32 %arg6, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body9 i32* %x, i32* %y, i32* %j, i32* %n, i32* %i, i32* %arg, i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1, [2010 * i32]* %arg3, [2010 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 0, i32 %arg6, i32 11, i32 0, i32 0 ], [ ^b4 i32* %n, i32* %x, i32* %y, i32* %j, i32* %i, i32* %arg, i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1, [2010 * i32]* %arg3, i32 %arg6, i32 %arg7, i32 %arg6, [2010 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 11, i32 0 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20):
    [2010 * i32]* %0 = getelementptr &([2010 * i32]* %arg14)[i32 %arg19];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i64 0][i32 %arg20];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), [ ^if.then i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg, i32* %arg10, i32* %arg9, i32* %arg8, [2010 * i32]* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20 ], [ ^indirect2 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [2010 * i32]* %arg14, i32* %arg10, i32* %arg9, i32* %arg8, [2010 * i32]* %arg7, i32* %arg6, i32* %arg5, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg19, i32 %arg20 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32 %0 = add i32 %arg19, i32 1;
    store i32* %arg4 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg13;
    cbr i1 %1(prob = 0.97), [ ^while.body6 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg4, i32* %arg2, i32* %arg5, i32* %arg6, [2010 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %0 ], [ ^while.body7 i32* %arg10, i32* %arg9, i32* %arg8, [2010 * i32]* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32* %0 = getelementptr &(i32* %arg13)[i32 %arg14];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg5;
    i32 %2 = load i32* %arg6;
    i32 %3 = add i32 %arg18, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg15;
    cbr i1 %4(prob = 0.97), [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %3, i32 %arg15, i32 %3 ], [ ^b4 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %2, i32 %1, i32 %arg15, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg16, i32 %arg17 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp gt i32 %arg13, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 0 ], [ ^while.body11 [2010 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [2010 * i32]* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20):
    i32* %0 = getelementptr &(i32* %arg15)[i32 %arg19];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %1, i32 %arg17;
    i32* %3 = getelementptr &(i32* %arg15)[i32 %arg20];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    store i32* %arg4 with i32 %5;
    i32 %6 = sub i32 %arg18, i32 %5;
    store i32* %arg1 with i32 %6;
    i32 %7 = add i32 %arg20, i32 1;
    store i32* %arg2 with i32 %7;
    ubr [ ^indirect4 i32* %arg3, i32* %arg1, i32* %arg4, i32* %arg, i32* %arg2, i32 %7, i32* %arg5, i32* %arg6, i32* %arg7, [2010 * i32]* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %5, i32 %6, i32 %arg19, i32 %7 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [2010 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, [2010 * i32]* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16):
    i32* %0 = getelementptr &(i32* %arg14)[i32 %arg15];
    i32 %1 = load i32* %0;
    [2010 * i32]* %2 = getelementptr &([2010 * i32]* %arg5)[i32 %arg15];
    i32* %3 = getelementptr &([2010 * i32]* %2)[i64 0][i32 %arg16];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %arg13)[i32 %arg16];
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %4, i32 %6;
    i32 %8 = add i32 %1, i32 %7;
    store i32* %0 with i32 %8;
    i32 %9 = load i32* %arg3;
    i32 %10 = load i32* %arg4;
    i32 %11 = load i32* %arg;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg2;
    i32 %14 = load i32* %arg6;
    i32 %15 = load i32* %arg11;
    i32 %16 = add i32 %9, i32 1;
    store i32* %arg3 with i32 %16;
    ubr [ ^indirect4 i32* %arg4, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %16, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %15, i32 %14, i32 %13, [2010 * i32]* %arg12, i32* %arg13, i32* %arg14, i32 %12, i32 %11, i32 %10, i32 %16 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    ubr [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, [2010 * i32]* %arg11, i32* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %1, i32 %0, i32 %arg16 ];
^while.body10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp gt i32 %arg13, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body12 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 0 ], [ ^b5 i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
^while.body11([2010 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg5 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 50;
    cbr i1 %1(prob = 0.97), [ ^while.body4 i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1, [2010 * i32]* %arg, i32* %arg3, i32 %arg6, i32 %0 ], [ ^b6 i32* %arg3, i32 %arg6 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21):
    i1 %0 = scmp lt i32 %arg5, i32 %arg14;
    cbr i1 %0(prob = 0.97), [ ^while.body8 i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg, i32* %arg11, i32* %arg10, [2010 * i32]* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21 ], [ ^b3 i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg, i32* %arg11, i32* %arg10, [2010 * i32]* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20):
    [2010 * i32]* %0 = getelementptr &([2010 * i32]* %arg14)[i32 %arg19];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i64 0][i32 %arg20];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), [ ^if.then1 i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg, [2010 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20 ], [ ^indirect5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [2010 * i32]* %arg14, [2010 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg19, i32 %arg20 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32 %0 = add i32 %arg19, i32 1;
    store i32* %arg4 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg13;
    cbr i1 %1(prob = 0.97), [ ^while.body10 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg4, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %0 ], [ ^while.body11 [2010 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg11, i32 %arg12 ];
^b6(i32* %arg, i32 %arg1):
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %arg1, i32* %arg);
    ret i32 0;
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [2010 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20):
    i32* %0 = getelementptr &(i32* %arg15)[i32 %arg19];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %1, i32 %arg17;
    i32* %3 = getelementptr &(i32* %arg15)[i32 %arg20];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    store i32* %arg4 with i32 %5;
    i32 %6 = sub i32 %arg18, i32 %5;
    store i32* %arg1 with i32 %6;
    i32 %7 = add i32 %arg20, i32 1;
    store i32* %arg2 with i32 %7;
    ubr [ ^indirect6 i32* %arg3, i32* %arg1, i32* %arg4, i32* %arg, i32* %arg2, i32 %7, [2010 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %5, i32 %6, i32 %arg19, i32 %7 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [2010 * i32]* %arg5, [2010 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [2010 * i32]* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16):
    i32* %0 = getelementptr &(i32* %arg14)[i32 %arg15];
    i32 %1 = load i32* %0;
    [2010 * i32]* %2 = getelementptr &([2010 * i32]* %arg5)[i32 %arg15];
    i32* %3 = getelementptr &([2010 * i32]* %2)[i64 0][i32 %arg16];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %arg13)[i32 %arg16];
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %4, i32 %6;
    i32 %8 = add i32 %1, i32 %7;
    store i32* %0 with i32 %8;
    i32 %9 = load i32* %arg3;
    i32 %10 = load i32* %arg4;
    i32 %11 = load i32* %arg;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg2;
    i32 %14 = load i32* %arg11;
    i32 %15 = load i32* %arg10;
    i32 %16 = add i32 %9, i32 1;
    store i32* %arg3 with i32 %16;
    ubr [ ^indirect6 i32* %arg4, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %16, [2010 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %15, i32 %14, i32 %13, [2010 * i32]* %arg12, i32* %arg13, i32* %arg14, i32 %12, i32 %11, i32 %10, i32 %16 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, [2010 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21):
    i1 %0 = scmp lt i32 %arg5, i32 %arg14;
    cbr i1 %0(prob = 0.97), [ ^while.body12 i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [2010 * i32]* %arg6, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21 ], [ ^b5 i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [2010 * i32]* %arg6, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20 ];
}
