internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @width { ReadOnly } = 512;
internal i32* @height { ReadOnly } = 1024;
internal [524288 * i32]* @image_in;
internal [524288 * i32]* @image_out;
internal func @cutout(i32 %val) -> i32 {
^entry:
    i32* %val1 = alloc i32;
    store i32* %val1 with i32 %val;
    i32 %0 = load i32* %val1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %val1 with i32 0;
    ubr ^b1;
^if.else:
    i32 %4 = load i32* %val1;
    i1 %5 = scmp gt i32 %4, i32 255;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b;
^if.then1:
    store i32* %val1 with i32 255;
    ubr ^b;
^b:
    ubr ^b1;
^b1:
    i32 %8 = load i32* %val1;
    ret i32 %8;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %val = alloc i32;
    i32* %ip1jp1 = alloc i32;
    i32* %ip1j = alloc i32;
    i32* %ip1jm1 = alloc i32;
    i32* %ijp1 = alloc i32;
    i32* %ij = alloc i32;
    i32* %ijm1 = alloc i32;
    i32* %im1jp1 = alloc i32;
    i32* %im1j = alloc i32;
    i32* %im1jm1 = alloc i32;
    i32* %num = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    i32* %0 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %num with i32 %1;
    call (i32) -> void @starttime(i32 23);
    store i32* %j with i32 1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %j;
    i1 %3 = scmp lt i32 %2, i32 511;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i with i32 1;
    ubr ^while.header1;
^b:
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %6 = load i32* %i;
    i1 %7 = scmp lt i32 %6, i32 1023;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %10 = load i32* %i;
    i1 %11 = scmp lt i32 %10, i32 1024;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %14 = load i32* %i;
    i32 %15 = sub i32 %14, i32 1;
    i32 %16 = mul i32 %15, i32 512;
    i32 %17 = load i32* %j;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = sub i32 %18, i32 1;
    store i32* %im1jm1 with i32 %19;
    i32 %20 = load i32* %i;
    i32 %21 = sub i32 %20, i32 1;
    i32 %22 = mul i32 %21, i32 512;
    i32 %23 = load i32* %j;
    i32 %24 = add i32 %22, i32 %23;
    store i32* %im1j with i32 %24;
    i32 %25 = load i32* %i;
    i32 %26 = sub i32 %25, i32 1;
    i32 %27 = mul i32 %26, i32 512;
    i32 %28 = load i32* %j;
    i32 %29 = add i32 %27, i32 %28;
    i32 %30 = add i32 %29, i32 1;
    store i32* %im1jp1 with i32 %30;
    i32 %31 = load i32* %i;
    i32 %32 = mul i32 %31, i32 512;
    i32 %33 = load i32* %j;
    i32 %34 = add i32 %32, i32 %33;
    i32 %35 = sub i32 %34, i32 1;
    store i32* %ijm1 with i32 %35;
    i32 %36 = load i32* %i;
    i32 %37 = mul i32 %36, i32 512;
    i32 %38 = load i32* %j;
    i32 %39 = add i32 %37, i32 %38;
    store i32* %ij with i32 %39;
    i32 %40 = load i32* %i;
    i32 %41 = mul i32 %40, i32 512;
    i32 %42 = load i32* %j;
    i32 %43 = add i32 %41, i32 %42;
    i32 %44 = add i32 %43, i32 1;
    store i32* %ijp1 with i32 %44;
    i32 %45 = load i32* %i;
    i32 %46 = add i32 %45, i32 1;
    i32 %47 = mul i32 %46, i32 512;
    i32 %48 = load i32* %j;
    i32 %49 = add i32 %47, i32 %48;
    i32 %50 = sub i32 %49, i32 1;
    store i32* %ip1jm1 with i32 %50;
    i32 %51 = load i32* %i;
    i32 %52 = add i32 %51, i32 1;
    i32 %53 = mul i32 %52, i32 512;
    i32 %54 = load i32* %j;
    i32 %55 = add i32 %53, i32 %54;
    store i32* %ip1j with i32 %55;
    i32 %56 = load i32* %i;
    i32 %57 = add i32 %56, i32 1;
    i32 %58 = mul i32 %57, i32 512;
    i32 %59 = load i32* %j;
    i32 %60 = add i32 %58, i32 %59;
    i32 %61 = add i32 %60, i32 1;
    store i32* %ip1jp1 with i32 %61;
    i32 %62 = load i32* %ij;
    i64 %63 = sext i32 %62 to i64;
    i32* %64 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %63];
    i32 %65 = load i32* %64;
    i32 %66 = mul i32 8, i32 %65;
    i32 %67 = load i32* %im1jm1;
    i64 %68 = sext i32 %67 to i64;
    i32* %69 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %68];
    i32 %70 = load i32* %69;
    i32 %71 = sub i32 %66, i32 %70;
    i32 %72 = load i32* %im1j;
    i64 %73 = sext i32 %72 to i64;
    i32* %74 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %73];
    i32 %75 = load i32* %74;
    i32 %76 = sub i32 %71, i32 %75;
    i32 %77 = load i32* %im1jp1;
    i64 %78 = sext i32 %77 to i64;
    i32* %79 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %78];
    i32 %80 = load i32* %79;
    i32 %81 = sub i32 %76, i32 %80;
    i32 %82 = load i32* %ijm1;
    i64 %83 = sext i32 %82 to i64;
    i32* %84 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %83];
    i32 %85 = load i32* %84;
    i32 %86 = sub i32 %81, i32 %85;
    i32 %87 = load i32* %ijp1;
    i64 %88 = sext i32 %87 to i64;
    i32* %89 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %88];
    i32 %90 = load i32* %89;
    i32 %91 = sub i32 %86, i32 %90;
    i32 %92 = load i32* %ip1jm1;
    i64 %93 = sext i32 %92 to i64;
    i32* %94 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %93];
    i32 %95 = load i32* %94;
    i32 %96 = sub i32 %91, i32 %95;
    i32 %97 = load i32* %ip1j;
    i64 %98 = sext i32 %97 to i64;
    i32* %99 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %98];
    i32 %100 = load i32* %99;
    i32 %101 = sub i32 %96, i32 %100;
    i32 %102 = load i32* %ip1jp1;
    i64 %103 = sext i32 %102 to i64;
    i32* %104 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %103];
    i32 %105 = load i32* %104;
    i32 %106 = sub i32 %101, i32 %105;
    store i32* %val with i32 %106;
    i32 %107 = load i32* %i;
    i32 %108 = mul i32 %107, i32 512;
    i32 %109 = load i32* %j;
    i32 %110 = add i32 %108, i32 %109;
    i64 %111 = sext i32 %110 to i64;
    i32* %112 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 %111];
    i32 %113 = load i32* %val;
    i32 %114 = call (i32) -> i32 @cutout(i32 %113);
    store i32* %112 with i32 %114;
    i32 %115 = load i32* %i;
    i32 %116 = add i32 %115, i32 1;
    store i32* %i with i32 %116;
    ubr ^while.header1;
^b1:
    i32 %117 = load i32* %j;
    i32 %118 = add i32 %117, i32 1;
    store i32* %j with i32 %118;
    ubr ^while.header;
^while.body2:
    i32 %119 = load i32* %i;
    i32 %120 = mul i32 %119, i32 512;
    i64 %121 = sext i32 %120 to i64;
    i32* %122 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 %121];
    i32 %123 = load i32* %i;
    i32 %124 = mul i32 %123, i32 512;
    i64 %125 = sext i32 %124 to i64;
    i32* %126 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %125];
    i32 %127 = load i32* %126;
    store i32* %122 with i32 %127;
    i32 %128 = load i32* %i;
    i32 %129 = mul i32 %128, i32 512;
    i32 %130 = add i32 %129, i32 512;
    i32 %131 = sub i32 %130, i32 1;
    i64 %132 = sext i32 %131 to i64;
    i32* %133 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 %132];
    i32 %134 = load i32* %i;
    i32 %135 = mul i32 %134, i32 512;
    i32 %136 = add i32 %135, i32 512;
    i32 %137 = sub i32 %136, i32 1;
    i64 %138 = sext i32 %137 to i64;
    i32* %139 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %138];
    i32 %140 = load i32* %139;
    store i32* %133 with i32 %140;
    i32 %141 = load i32* %i;
    i32 %142 = add i32 %141, i32 1;
    store i32* %i with i32 %142;
    ubr ^while.header2;
^b2:
    store i32* %j with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %143 = load i32* %j;
    i1 %144 = scmp lt i32 %143, i32 512;
    i32 %145 = zext i1 %144 to i32;
    i1 %146 = scmp neq i32 %145, i32 0;
    cbr i1 %146(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %147 = load i32* %j;
    i64 %148 = sext i32 %147 to i64;
    i32* %149 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 %148];
    i32 %150 = load i32* %j;
    i64 %151 = sext i32 %150 to i64;
    i32* %152 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %151];
    i32 %153 = load i32* %152;
    store i32* %149 with i32 %153;
    i32 %154 = load i32* %j;
    i32 %155 = add i32 523776, i32 %154;
    i64 %156 = sext i32 %155 to i64;
    i32* %157 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 %156];
    i32 %158 = load i32* %j;
    i32 %159 = add i32 523776, i32 %158;
    i64 %160 = sext i32 %159 to i64;
    i32* %161 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 %160];
    i32 %162 = load i32* %161;
    store i32* %157 with i32 %162;
    i32 %163 = load i32* %j;
    i32 %164 = add i32 %163, i32 1;
    store i32* %j with i32 %164;
    ubr ^while.header3;
^b3:
    call (i32) -> void @stoptime(i32 59);
    i32* %165 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 524288, i32* %165);
    i32 %166 = load i32* %num;
    ret i32 %166;
}
