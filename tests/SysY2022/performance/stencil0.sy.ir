internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [524288 * i32]* @image_in, align 8;
internal [524288 * i32]* @image_out, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [524288 * i32]* %0 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    i32* %1 = getelementptr &([524288 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    i8* %3 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 1, i32 1023, i8* %3);
    i8* %4 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1024, i8* %4);
    i8* %5 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %5);
    [524288 * i32]* %6 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    i32* %7 = getelementptr &([524288 * i32]* %6)[i64 0][i64 0];
    call (i32) -> void @stoptime(i32 59);
    call (i32, i32*) -> void @putarray(i32 524288, i32* %7);
    ret i32 %2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    [524288 * i32]* %2 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    [524288 * i32]* %3 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    ubr ^b1;
  ^b1:
    i32 %4 = phi [^b, i32 %0] [^b3, i32 %133];
    i32 %5 = mul i32 %4, i32 512;
    i32* %6 = getelementptr &([524288 * i32]* %2)[i64 0][i32 %5];
    i32* %7 = getelementptr &(i32* %6)[i64 -512];
    i32* %8 = getelementptr &(i32* %6)[i64 512];
    i32* %9 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %5];
    ubr ^b2;
  ^b2:
    i32 %10 = phi [^b1, i32 1] [^b2, i32 %95];
    i32* %11 = getelementptr &(i32* %6)[i32 %10];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &(i32* %7)[i32 %10];
    i32* %14 = getelementptr &(i32* %13)[i64 -1];
    i32 %15 = load i32* %14;
    i32 %16 = mul i32 %12, i32 8;
    i32 %17 = sub i32 %16, i32 %15;
    i32 %18 = load i32* %13;
    i32 %19 = sub i32 %17, i32 %18;
    i32* %20 = getelementptr &(i32* %13)[i64 1];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %19, i32 %21;
    i32* %23 = getelementptr &(i32* %11)[i64 -1];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %11)[i64 1];
    i32 %27 = load i32* %26;
    i32 %28 = sub i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %8)[i32 %10];
    i32* %30 = getelementptr &(i32* %29)[i64 -1];
    i32 %31 = load i32* %30;
    i32 %32 = sub i32 %28, i32 %31;
    i32 %33 = load i32* %29;
    i32 %34 = sub i32 %32, i32 %33;
    i32* %35 = getelementptr &(i32* %29)[i64 1];
    i32 %36 = load i32* %35;
    i32 %37 = sub i32 %34, i32 %36;
    i32 %38 = smin i32 %37, i32 255;
    i32 %39 = smax i32 %38, i32 0;
    i32* %40 = getelementptr &(i32* %9)[i32 %10];
    store i32* %40 with i32 %39;
    i32 %41 = mul i32 %27, i32 8;
    i32 %42 = sub i32 %41, i32 %18;
    i32 %43 = sub i32 %42, i32 %21;
    i32* %44 = getelementptr &(i32* %13)[i64 2];
    i32 %45 = load i32* %44;
    i32 %46 = sub i32 %43, i32 %45;
    i32 %47 = sub i32 %46, i32 %12;
    i32* %48 = getelementptr &(i32* %11)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = sub i32 %47, i32 %49;
    i32 %51 = sub i32 %50, i32 %33;
    i32 %52 = sub i32 %51, i32 %36;
    i32* %53 = getelementptr &(i32* %29)[i64 2];
    i32 %54 = load i32* %53;
    i32 %55 = sub i32 %52, i32 %54;
    i32 %56 = smin i32 %55, i32 255;
    i32 %57 = smax i32 %56, i32 0;
    i32* %58 = getelementptr &(i32* %40)[i64 1];
    store i32* %58 with i32 %57;
    i32 %59 = mul i32 %49, i32 8;
    i32 %60 = sub i32 %59, i32 %21;
    i32 %61 = sub i32 %60, i32 %45;
    i32* %62 = getelementptr &(i32* %13)[i64 3];
    i32 %63 = load i32* %62;
    i32 %64 = sub i32 %61, i32 %63;
    i32 %65 = sub i32 %64, i32 %27;
    i32* %66 = getelementptr &(i32* %11)[i64 3];
    i32 %67 = load i32* %66;
    i32 %68 = sub i32 %65, i32 %67;
    i32 %69 = sub i32 %68, i32 %36;
    i32 %70 = sub i32 %69, i32 %54;
    i32* %71 = getelementptr &(i32* %29)[i64 3];
    i32 %72 = load i32* %71;
    i32 %73 = sub i32 %70, i32 %72;
    i32 %74 = smin i32 %73, i32 255;
    i32 %75 = smax i32 %74, i32 0;
    i32* %76 = getelementptr &(i32* %40)[i64 2];
    store i32* %76 with i32 %75;
    i32 %77 = mul i32 %67, i32 8;
    i32 %78 = sub i32 %77, i32 %45;
    i32 %79 = sub i32 %78, i32 %63;
    i32* %80 = getelementptr &(i32* %13)[i64 4];
    i32 %81 = load i32* %80;
    i32 %82 = sub i32 %79, i32 %81;
    i32 %83 = sub i32 %82, i32 %49;
    i32* %84 = getelementptr &(i32* %11)[i64 4];
    i32 %85 = load i32* %84;
    i32 %86 = sub i32 %83, i32 %85;
    i32 %87 = sub i32 %86, i32 %54;
    i32 %88 = sub i32 %87, i32 %72;
    i32* %89 = getelementptr &(i32* %29)[i64 4];
    i32 %90 = load i32* %89;
    i32 %91 = sub i32 %88, i32 %90;
    i32 %92 = smin i32 %91, i32 255;
    i32 %93 = smax i32 %92, i32 0;
    i32* %94 = getelementptr &(i32* %40)[i64 3];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %10, i32 4;
    i1 %96 = icmp slt i32 %95, i32 509;
    cbr i1 %96(prob = 0.992126), ^b2, ^b3;
  ^b3:
    i32 %97 = mul i32 %85, i32 8;
    i32 %98 = sub i32 %97, i32 %63;
    i32 %99 = sub i32 %98, i32 %81;
    i32* %100 = getelementptr &(i32* %13)[i64 5];
    i32 %101 = load i32* %100;
    i32 %102 = sub i32 %99, i32 %101;
    i32 %103 = sub i32 %102, i32 %67;
    i32* %104 = getelementptr &(i32* %11)[i64 5];
    i32 %105 = load i32* %104;
    i32 %106 = sub i32 %103, i32 %105;
    i32 %107 = sub i32 %106, i32 %72;
    i32 %108 = sub i32 %107, i32 %90;
    i32* %109 = getelementptr &(i32* %29)[i64 5];
    i32 %110 = load i32* %109;
    i32 %111 = sub i32 %108, i32 %110;
    i32 %112 = smin i32 %111, i32 255;
    i32 %113 = smax i32 %112, i32 0;
    i32* %114 = getelementptr &(i32* %40)[i64 4];
    store i32* %114 with i32 %113;
    i32 %115 = mul i32 %105, i32 8;
    i32 %116 = sub i32 %115, i32 %81;
    i32 %117 = sub i32 %116, i32 %101;
    i32* %118 = getelementptr &(i32* %13)[i64 6];
    i32 %119 = load i32* %118;
    i32 %120 = sub i32 %117, i32 %119;
    i32 %121 = sub i32 %120, i32 %85;
    i32* %122 = getelementptr &(i32* %11)[i64 6];
    i32 %123 = load i32* %122;
    i32 %124 = sub i32 %121, i32 %123;
    i32 %125 = sub i32 %124, i32 %90;
    i32 %126 = sub i32 %125, i32 %110;
    i32* %127 = getelementptr &(i32* %29)[i64 6];
    i32 %128 = load i32* %127;
    i32 %129 = sub i32 %126, i32 %128;
    i32 %130 = smin i32 %129, i32 255;
    i32 %131 = smax i32 %130, i32 0;
    i32* %132 = getelementptr &(i32* %40)[i64 5];
    store i32* %132 with i32 %131;
    i32 %133 = add i32 %4, i32 1;
    i1 %134 = icmp sgt i32 %1, i32 %133;
    cbr i1 %134(prob = 0.984615), ^b1, ^b4;
  ^b4:
    ret;
}
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = add i32 %1, i32 -3;
    [524288 * i32]* %5 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    [524288 * i32]* %6 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b1, i32 %36];
    i32 %8 = mul i32 %7, i32 512;
    i32* %9 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %8];
    i32 %10 = load i32* %9;
    i32* %11 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %8];
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %7, i32 1;
    i32 %13 = mul i32 %12, i32 512;
    i32* %14 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %13];
    i32* %15 = getelementptr &(i32* %14)[i64 -1];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %13];
    i32* %18 = getelementptr &(i32* %17)[i64 -1];
    store i32* %18 with i32 %16;
    i32 %19 = load i32* %14;
    store i32* %17 with i32 %19;
    i32 %20 = add i32 %7, i32 2;
    i32 %21 = mul i32 %20, i32 512;
    i32* %22 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %21];
    i32* %23 = getelementptr &(i32* %22)[i64 -1];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %21];
    i32* %26 = getelementptr &(i32* %25)[i64 -1];
    store i32* %26 with i32 %24;
    i32 %27 = load i32* %22;
    store i32* %25 with i32 %27;
    i32 %28 = add i32 %7, i32 3;
    i32 %29 = mul i32 %28, i32 512;
    i32* %30 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %29];
    i32* %31 = getelementptr &(i32* %30)[i64 -1];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %29];
    i32* %34 = getelementptr &(i32* %33)[i64 -1];
    store i32* %34 with i32 %32;
    i32 %35 = load i32* %30;
    store i32* %33 with i32 %35;
    i32 %36 = add i32 %7, i32 4;
    i32 %37 = mul i32 %36, i32 512;
    i32 %38 = add i32 %37, i32 -1;
    i32* %39 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %38];
    store i32* %41 with i32 %40;
    i1 %42 = icmp sgt i32 %4, i32 %36;
    cbr i1 %42(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %43 = phi [^b, i32 %0] [^b1, i32 %36];
    i1 %44 = icmp sgt i32 %1, i32 %43;
    cbr i1 %44(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %45 = phi [^scalar.header, i32 %43] [^b2, i32 %50];
    i32 %46 = mul i32 %45, i32 512;
    i32* %47 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %46];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %45, i32 1;
    i32 %51 = mul i32 %50, i32 512;
    i32 %52 = add i32 %51, i32 -1;
    i32* %53 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %52];
    store i32* %55 with i32 %54;
    i1 %56 = icmp sgt i32 %1, i32 %50;
    cbr i1 %56(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = add i32 %1, i32 -3;
    [524288 * i32]* %5 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    [524288 * i32]* %6 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b1, i32 %32];
    i32* %8 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %7];
    store i32* %10 with i32 %9;
    i32* %11 = getelementptr &(i32* %8)[i64 523776];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &(i32* %10)[i64 523776];
    store i32* %13 with i32 %12;
    i32* %14 = getelementptr &(i32* %8)[i64 1];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &(i32* %10)[i64 1];
    store i32* %16 with i32 %15;
    i32* %17 = getelementptr &(i32* %8)[i64 523777];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %10)[i64 523777];
    store i32* %19 with i32 %18;
    i32* %20 = getelementptr &(i32* %8)[i64 2];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %10)[i64 2];
    store i32* %22 with i32 %21;
    i32* %23 = getelementptr &(i32* %8)[i64 523778];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %10)[i64 523778];
    store i32* %25 with i32 %24;
    i32* %26 = getelementptr &(i32* %8)[i64 3];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %10)[i64 3];
    store i32* %28 with i32 %27;
    i32* %29 = getelementptr &(i32* %8)[i64 523779];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %10)[i64 523779];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %7, i32 4;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %34 = phi [^b, i32 %0] [^b1, i32 %32];
    i1 %35 = icmp sgt i32 %1, i32 %34;
    cbr i1 %35(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %36 = phi [^scalar.header, i32 %34] [^b2, i32 %43];
    i32* %37 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %36];
    store i32* %39 with i32 %38;
    i32* %40 = getelementptr &(i32* %37)[i64 523776];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %39)[i64 523776];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %36, i32 1;
    i1 %44 = icmp sgt i32 %1, i32 %43;
    cbr i1 %44(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
