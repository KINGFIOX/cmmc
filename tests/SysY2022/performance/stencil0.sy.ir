internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [524288 * i32]* @image_in;
internal [524288 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [524288 * i32]* %0 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    i32* %1 = getelementptr &([524288 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    [524288 * i32]* %3 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 1] [^b1, i32 %117];
    i1 %5 = scmp lt i32 %4, i32 511;
    i32 %6 = add i32 %4, i32 -1;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %7 = phi [^while.header, i32 1] [^b, i32 %33];
    i32 %8 = mul i32 %7, i32 512;
    i32 %9 = add i32 %4, i32 %8;
    i32* %10 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = mul i32 %11, i32 8;
    i32 %13 = add i32 %7, i32 -1;
    i32 %14 = mul i32 %13, i32 512;
    i32 %15 = add i32 %6, i32 %14;
    i32* %16 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i32 %18 = sub i32 %12, i32 %17;
    i32 %19 = add i32 %4, i32 %14;
    i32* %20 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %18, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32 %26 = add i32 %6, i32 %8;
    i32* %27 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %26];
    i32 %28 = load i32* %27;
    i32 %29 = sub i32 %25, i32 %28;
    i32* %30 = getelementptr &(i32* %27)[i64 2];
    i32 %31 = load i32* %30;
    i32 %32 = sub i32 %29, i32 %31;
    i32 %33 = add i32 %7, i32 1;
    i32 %34 = mul i32 %33, i32 512;
    i32 %35 = add i32 %6, i32 %34;
    i32* %36 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = sub i32 %32, i32 %37;
    i32 %39 = add i32 %4, i32 %34;
    i32* %40 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %39];
    i32 %41 = load i32* %40;
    i32 %42 = sub i32 %38, i32 %41;
    i32* %43 = getelementptr &(i32* %40)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = sub i32 %42, i32 %44;
    i1 %46 = scmp lt i32 %45, i32 0;
    i32* %47 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %9];
    cbr i1 %46(prob = 0.5), ^b, ^if.else;
  ^while.body1:
    i32 %48 = phi [^while.header, i32 0] [^while.body1, i32 %80];
    i32 %49 = mul i32 %48, i32 512;
    i32* %50 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %49];
    store i32* %52 with i32 %51;
    i32 %53 = add i32 %48, i32 1;
    i32 %54 = mul i32 %53, i32 512;
    i32 %55 = add i32 %54, i32 -1;
    i32* %56 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %55];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %54];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %54];
    store i32* %61 with i32 %60;
    i32 %62 = add i32 %48, i32 2;
    i32 %63 = mul i32 %62, i32 512;
    i32 %64 = add i32 %63, i32 -1;
    i32* %65 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %64];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %64];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %63];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %63];
    store i32* %70 with i32 %69;
    i32 %71 = add i32 %48, i32 3;
    i32 %72 = mul i32 %71, i32 512;
    i32 %73 = add i32 %72, i32 -1;
    i32* %74 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %73];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %72];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %72];
    store i32* %79 with i32 %78;
    i32 %80 = add i32 %48, i32 4;
    i32 %81 = mul i32 %80, i32 512;
    i32 %82 = add i32 %81, i32 -1;
    i32* %83 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %82];
    store i32* %85 with i32 %84;
    i1 %86 = scmp lt i32 %80, i32 1024;
    cbr i1 %86(prob = 1), ^while.body1, ^while.body2;
  ^b:
    i32 %87 = phi [^while.body, i32 0] [^if.else, i32 255] [^indirect, i32 %45];
    store i32* %47 with i32 %87;
    i1 %88 = scmp lt i32 %33, i32 1023;
    cbr i1 %88(prob = 1), ^while.body, ^b1;
  ^if.else:
    i1 %89 = scmp gt i32 %45, i32 255;
    cbr i1 %89(prob = 0.5), ^b, ^indirect;
  ^while.body2:
    i32 %90 = phi [^while.body1, i32 0] [^while.body2, i32 %115];
    i32* %91 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %90];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 523776];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %93)[i64 523776];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 1];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %93)[i64 1];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 523777];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %93)[i64 523777];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %91)[i64 2];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %93)[i64 2];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %91)[i64 523778];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %93)[i64 523778];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %91)[i64 3];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %93)[i64 3];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %91)[i64 523779];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %93)[i64 523779];
    store i32* %114 with i32 %113;
    i32 %115 = add i32 %90, i32 4;
    i1 %116 = scmp lt i32 %115, i32 512;
    cbr i1 %116(prob = 0.99), ^while.body2, ^b2;
  ^b1:
    i32 %117 = add i32 %4, i32 1;
    ubr ^while.header;
  ^indirect:
    ubr ^b;
  ^b2:
    call (i32) -> void @stoptime(i32 59);
    i32* %118 = getelementptr &([524288 * i32]* %3)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 524288, i32* %118);
    ret i32 %2;
}
