internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [524288 * i32]* @image_in;
internal [524288 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [524288 * i32]* %0 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    i32* %1 = getelementptr &([524288 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    [524288 * i32]* %3 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 1] [^b, i32 %116];
    i1 %5 = icmp slt i32 %4, i32 511;
    cbr i1 %5(prob = 0.97), ^prebody, ^while.body;
  ^prebody:
    i32 %6 = add i32 %4, i32 -1;
    ubr ^while.body1;
  ^while.body:
    i32 %7 = phi [^while.header, i32 0] [^while.body, i32 %39];
    i32 %8 = mul i32 %7, i32 512;
    i32* %9 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %8];
    i32 %10 = load i32* %9;
    i32* %11 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %8];
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %7, i32 1;
    i32 %13 = mul i32 %12, i32 512;
    i32 %14 = add i32 %13, i32 -1;
    i32* %15 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %14];
    store i32* %17 with i32 %16;
    i32* %18 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %13];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %13];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %7, i32 2;
    i32 %22 = mul i32 %21, i32 512;
    i32 %23 = add i32 %22, i32 -1;
    i32* %24 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %23];
    store i32* %26 with i32 %25;
    i32* %27 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %22];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %22];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %7, i32 3;
    i32 %31 = mul i32 %30, i32 512;
    i32 %32 = add i32 %31, i32 -1;
    i32* %33 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %32];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %31];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %31];
    store i32* %38 with i32 %37;
    i32 %39 = add i32 %7, i32 4;
    i32 %40 = mul i32 %39, i32 512;
    i32 %41 = add i32 %40, i32 -1;
    i32* %42 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %41];
    store i32* %44 with i32 %43;
    i1 %45 = icmp slt i32 %39, i32 1024;
    cbr i1 %45(prob = 1), ^while.body, ^while.body2;
  ^while.body1:
    i32 %46 = phi [^prebody, i32 1] [^while.body1, i32 %72];
    i32 %47 = mul i32 %46, i32 512;
    i32 %48 = add i32 %4, i32 %47;
    i32* %49 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = mul i32 %50, i32 8;
    i32 %52 = add i32 %46, i32 -1;
    i32 %53 = mul i32 %52, i32 512;
    i32 %54 = add i32 %6, i32 %53;
    i32* %55 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    i32 %57 = sub i32 %51, i32 %56;
    i32 %58 = add i32 %4, i32 %53;
    i32* %59 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %57, i32 %60;
    i32* %62 = getelementptr &(i32* %59)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = sub i32 %61, i32 %63;
    i32 %65 = add i32 %6, i32 %47;
    i32* %66 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i32 %68 = sub i32 %64, i32 %67;
    i32* %69 = getelementptr &(i32* %66)[i64 2];
    i32 %70 = load i32* %69;
    i32 %71 = sub i32 %68, i32 %70;
    i32 %72 = add i32 %46, i32 1;
    i32 %73 = mul i32 %72, i32 512;
    i32 %74 = add i32 %6, i32 %73;
    i32* %75 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = sub i32 %71, i32 %76;
    i32 %78 = add i32 %4, i32 %73;
    i32* %79 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %78];
    i32 %80 = load i32* %79;
    i32 %81 = sub i32 %77, i32 %80;
    i32* %82 = getelementptr &(i32* %79)[i64 1];
    i32 %83 = load i32* %82;
    i32 %84 = sub i32 %81, i32 %83;
    i32 %85 = smin i32 %84, i32 255;
    i32 %86 = smax i32 %85, i32 0;
    i32* %87 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %48];
    store i32* %87 with i32 %86;
    i1 %88 = icmp slt i32 %72, i32 1023;
    cbr i1 %88(prob = 1), ^while.body1, ^b;
  ^while.body2:
    i32 %89 = phi [^while.body, i32 0] [^while.body2, i32 %114];
    i32* %90 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %89];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %90)[i64 523776];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %92)[i64 523776];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %90)[i64 1];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %92)[i64 1];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %90)[i64 523777];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %92)[i64 523777];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %90)[i64 2];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %92)[i64 2];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %90)[i64 523778];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %92)[i64 523778];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %90)[i64 3];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %92)[i64 3];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %90)[i64 523779];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %92)[i64 523779];
    store i32* %113 with i32 %112;
    i32 %114 = add i32 %89, i32 4;
    i1 %115 = icmp slt i32 %114, i32 512;
    cbr i1 %115(prob = 0.99), ^while.body2, ^b1;
  ^b:
    i32 %116 = add i32 %4, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @stoptime(i32 59);
    i32* %117 = getelementptr &([524288 * i32]* %3)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 524288, i32* %117);
    ret i32 %2;
}
