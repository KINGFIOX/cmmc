internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [524288 * i32]* @image_in;
internal [524288 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([524288 * i32]* @image_in)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b, i32 %12] [^entry, i32 1];
    i32 %3 = phi [^b, i32 %7] [^entry, i32 %1];
    i1 %4 = scmp lt i32 %2, i32 511;
    cbr i1 %4(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %5 = phi [^while.header, i32 1] [^b1, i32 %31];
    i32 %6 = phi [^while.header, i32 %2] [^b1, i32 %6];
    i32 %7 = phi [^while.header, i32 %3] [^b1, i32 %7];
    i1 %8 = scmp lt i32 %5, i32 1023;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b;
^while.header2:
    i32 %9 = phi [^while.header, i32 0] [^while.body, i32 %17];
    i32 %10 = phi [^while.header, i32 %3] [^while.body, i32 %10];
    i1 %11 = scmp lt i32 %9, i32 1024;
    cbr i1 %11(prob = 0.97), ^while.body, ^while.header3;
^b:
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
^while.body:
    i32 %13 = mul i32 %9, i32 512;
    i32* %14 = getelementptr &([524288 * i32]* @image_out)[i64 0][i32 %13];
    i32* %15 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %13];
    i32 %16 = load i32* %15;
    store i32* %14 with i32 %16;
    i32 %17 = add i32 %9, i32 1;
    i32 %18 = mul i32 %17, i32 512;
    i32 %19 = add i32 %18, i32 -1;
    i32* %20 = getelementptr &([524288 * i32]* @image_out)[i64 0][i32 %19];
    i32* %21 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %19];
    i32 %22 = load i32* %21;
    store i32* %20 with i32 %22;
    ubr ^while.header2;
^while.body1:
    i32 %23 = add i32 %5, i32 -1;
    i32 %24 = mul i32 %23, i32 512;
    i32 %25 = add i32 %6, i32 %24;
    i32 %26 = add i32 %6, i32 -1;
    i32 %27 = add i32 %26, i32 %24;
    i32 %28 = mul i32 %5, i32 512;
    i32 %29 = add i32 %6, i32 %28;
    i32 %30 = add i32 %26, i32 %28;
    i32 %31 = add i32 %5, i32 1;
    i32 %32 = mul i32 %31, i32 512;
    i32 %33 = add i32 %6, i32 %32;
    i32 %34 = add i32 %26, i32 %32;
    i32* %35 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %29];
    i32 %36 = load i32* %35;
    i32 %37 = mul i32 %36, i32 8;
    i32* %38 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %27];
    i32 %39 = load i32* %38;
    i32 %40 = sub i32 %37, i32 %39;
    i32* %41 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %25];
    i32 %42 = load i32* %41;
    i32 %43 = sub i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %41)[i64 1];
    i32 %45 = load i32* %44;
    i32 %46 = sub i32 %43, i32 %45;
    i32* %47 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %30];
    i32 %48 = load i32* %47;
    i32 %49 = sub i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %47)[i64 2];
    i32 %51 = load i32* %50;
    i32 %52 = sub i32 %49, i32 %51;
    i32* %53 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %34];
    i32 %54 = load i32* %53;
    i32 %55 = sub i32 %52, i32 %54;
    i32* %56 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %33];
    i32 %57 = load i32* %56;
    i32 %58 = sub i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %56)[i64 1];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %58, i32 %60;
    i32* %62 = getelementptr &([524288 * i32]* @image_out)[i64 0][i32 %29];
    i1 %63 = scmp lt i32 %61, i32 0;
    cbr i1 %63(prob = 0.5), ^b1, ^if.else;
^while.header3:
    i32 %64 = phi [^while.header2, i32 0] [^while.body2, i32 %74];
    i32 %65 = phi [^while.header2, i32 %10] [^while.body2, i32 %65];
    i1 %66 = scmp lt i32 %64, i32 512;
    cbr i1 %66(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %67 = phi [^while.body1, i32 0] [^if.else, i32 255] [^indirect, i32 %61];
    store i32* %62 with i32 %67;
    ubr ^while.header1;
^while.body2:
    i32* %68 = getelementptr &([524288 * i32]* @image_out)[i64 0][i32 %64];
    i32* %69 = getelementptr &([524288 * i32]* @image_in)[i64 0][i32 %64];
    i32 %70 = load i32* %69;
    store i32* %68 with i32 %70;
    i32* %71 = getelementptr &(i32* %68)[i64 523776];
    i32* %72 = getelementptr &(i32* %69)[i64 523776];
    i32 %73 = load i32* %72;
    store i32* %71 with i32 %73;
    i32 %74 = add i32 %64, i32 1;
    ubr ^while.header3;
^if.else:
    i1 %75 = scmp gt i32 %61, i32 255;
    cbr i1 %75(prob = 0.5), ^b1, ^indirect;
^b2:
    call (i32) -> void @stoptime(i32 59);
    i32* %76 = getelementptr &([524288 * i32]* @image_out)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 524288, i32* %76);
    ret i32 %65;
^indirect:
    ubr ^b1;
}
