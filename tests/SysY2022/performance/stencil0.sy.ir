internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [524288 * i32]* @image_in, align 8;
internal [524288 * i32]* @image_out, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [524288 * i32]* %0 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    i32* %1 = getelementptr &([524288 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    i8* %3 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 1, i32 511, i8* %3);
    [524288 * i32]* %4 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %5 = phi [^entry, i32 512] [^while.body, i32 %108];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %107];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %105];
    i32* %8 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %6];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &([524288 * i32]* %4)[i64 0][i32 %6];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %5, i32 -1;
    i32* %12 = getelementptr &([524288 * i32]* %0)[i64 0][i32 %11];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([524288 * i32]* %4)[i64 0][i32 %11];
    store i32* %14 with i32 %13;
    i32* %15 = getelementptr &(i32* %8)[i64 512];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %10)[i64 512];
    store i32* %17 with i32 %16;
    i32* %18 = getelementptr &(i32* %12)[i64 512];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %14)[i64 512];
    store i32* %20 with i32 %19;
    i32* %21 = getelementptr &(i32* %8)[i64 1024];
    i32 %22 = load i32* %21;
    i32* %23 = getelementptr &(i32* %10)[i64 1024];
    store i32* %23 with i32 %22;
    i32* %24 = getelementptr &(i32* %12)[i64 1024];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %14)[i64 1024];
    store i32* %26 with i32 %25;
    i32* %27 = getelementptr &(i32* %8)[i64 1536];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %10)[i64 1536];
    store i32* %29 with i32 %28;
    i32* %30 = getelementptr &(i32* %12)[i64 1536];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %14)[i64 1536];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %8)[i64 2048];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %10)[i64 2048];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %12)[i64 2048];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %14)[i64 2048];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %8)[i64 2560];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %10)[i64 2560];
    store i32* %41 with i32 %40;
    i32* %42 = getelementptr &(i32* %12)[i64 2560];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %14)[i64 2560];
    store i32* %44 with i32 %43;
    i32* %45 = getelementptr &(i32* %8)[i64 3072];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %10)[i64 3072];
    store i32* %47 with i32 %46;
    i32* %48 = getelementptr &(i32* %12)[i64 3072];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %14)[i64 3072];
    store i32* %50 with i32 %49;
    i32* %51 = getelementptr &(i32* %8)[i64 3584];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %10)[i64 3584];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %12)[i64 3584];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %14)[i64 3584];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %8)[i64 4096];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %10)[i64 4096];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %12)[i64 4096];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %14)[i64 4096];
    store i32* %62 with i32 %61;
    i32* %63 = getelementptr &(i32* %8)[i64 4608];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %10)[i64 4608];
    store i32* %65 with i32 %64;
    i32* %66 = getelementptr &(i32* %12)[i64 4608];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %14)[i64 4608];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &(i32* %8)[i64 5120];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %10)[i64 5120];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %12)[i64 5120];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %14)[i64 5120];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %8)[i64 5632];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %10)[i64 5632];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %12)[i64 5632];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %14)[i64 5632];
    store i32* %80 with i32 %79;
    i32* %81 = getelementptr &(i32* %8)[i64 6144];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %10)[i64 6144];
    store i32* %83 with i32 %82;
    i32* %84 = getelementptr &(i32* %12)[i64 6144];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %14)[i64 6144];
    store i32* %86 with i32 %85;
    i32* %87 = getelementptr &(i32* %8)[i64 6656];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %10)[i64 6656];
    store i32* %89 with i32 %88;
    i32* %90 = getelementptr &(i32* %12)[i64 6656];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %14)[i64 6656];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %8)[i64 7168];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %10)[i64 7168];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %12)[i64 7168];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %14)[i64 7168];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %8)[i64 7680];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %10)[i64 7680];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %12)[i64 7680];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %14)[i64 7680];
    store i32* %104 with i32 %103;
    i32 %105 = add i32 %7, i32 16;
    i1 %106 = icmp slt i32 %105, i32 1024;
    i32 %107 = add i32 %6, i32 8192;
    i32 %108 = add i32 %5, i32 8192;
    cbr i1 %106(prob = 0.984375), ^while.body, ^b;
  ^b:
    i8* %109 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %109);
    i32* %110 = getelementptr &([524288 * i32]* %4)[i64 0][i64 0];
    call (i32) -> void @stoptime(i32 59);
    call (i32, i32*) -> void @putarray(i32 524288, i32* %110);
    ret i32 %2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    [524288 * i32]* %2 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    [524288 * i32]* %3 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    ubr ^b1;
  ^b1:
    i32 %4 = phi [^b, i32 %0] [^while.body1, i32 %210];
    i32* %5 = getelementptr &([524288 * i32]* %2)[i64 0][i32 %4];
    i32* %6 = getelementptr &(i32* %5)[i64 512];
    i32* %7 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %4];
    i32* %8 = getelementptr &(i32* %7)[i64 512];
    i32* %9 = getelementptr &(i32* %5)[i64 1024];
    i32* %10 = getelementptr &(i32* %7)[i64 1024];
    i32* %11 = getelementptr &(i32* %5)[i64 1536];
    i32* %12 = getelementptr &(i32* %7)[i64 1536];
    ubr ^while.body;
  ^while.body:
    i32 %13 = phi [^b1, i32 1024] [^while.body, i32 %141];
    i32 %14 = phi [^b1, i32 512] [^while.body, i32 %140];
    i32 %15 = phi [^b1, i32 0] [^while.body, i32 %139];
    i32 %16 = phi [^b1, i32 1] [^while.body, i32 %137];
    i32* %17 = getelementptr &(i32* %5)[i32 %14];
    i32 %18 = load i32* %17;
    i32 %19 = mul i32 %18, i32 8;
    i32* %20 = getelementptr &(i32* %5)[i32 %15];
    i32* %21 = getelementptr &(i32* %20)[i64 -1];
    i32 %22 = load i32* %21;
    i32 %23 = sub i32 %19, i32 %22;
    i32 %24 = load i32* %20;
    i32 %25 = sub i32 %23, i32 %24;
    i32* %26 = getelementptr &(i32* %20)[i64 1];
    i32 %27 = load i32* %26;
    i32 %28 = sub i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %17)[i64 -1];
    i32 %30 = load i32* %29;
    i32 %31 = sub i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %17)[i64 1];
    i32 %33 = load i32* %32;
    i32 %34 = sub i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %5)[i32 %13];
    i32* %36 = getelementptr &(i32* %35)[i64 -1];
    i32 %37 = load i32* %36;
    i32 %38 = sub i32 %34, i32 %37;
    i32 %39 = load i32* %35;
    i32 %40 = sub i32 %38, i32 %39;
    i32* %41 = getelementptr &(i32* %35)[i64 1];
    i32 %42 = load i32* %41;
    i32 %43 = sub i32 %40, i32 %42;
    i32 %44 = smin i32 %43, i32 255;
    i32 %45 = smax i32 %44, i32 0;
    i32* %46 = getelementptr &(i32* %7)[i32 %14];
    store i32* %46 with i32 %45;
    i32* %47 = getelementptr &(i32* %6)[i32 %14];
    i32 %48 = load i32* %47;
    i32 %49 = mul i32 %48, i32 8;
    i32* %50 = getelementptr &(i32* %6)[i32 %15];
    i32* %51 = getelementptr &(i32* %50)[i64 -1];
    i32 %52 = load i32* %51;
    i32 %53 = sub i32 %49, i32 %52;
    i32 %54 = load i32* %50;
    i32 %55 = sub i32 %53, i32 %54;
    i32* %56 = getelementptr &(i32* %50)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = sub i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %47)[i64 -1];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %47)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = sub i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %6)[i32 %13];
    i32* %66 = getelementptr &(i32* %65)[i64 -1];
    i32 %67 = load i32* %66;
    i32 %68 = sub i32 %64, i32 %67;
    i32 %69 = load i32* %65;
    i32 %70 = sub i32 %68, i32 %69;
    i32* %71 = getelementptr &(i32* %65)[i64 1];
    i32 %72 = load i32* %71;
    i32 %73 = sub i32 %70, i32 %72;
    i32 %74 = smin i32 %73, i32 255;
    i32 %75 = smax i32 %74, i32 0;
    i32* %76 = getelementptr &(i32* %8)[i32 %14];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %9)[i32 %14];
    i32 %78 = load i32* %77;
    i32 %79 = mul i32 %78, i32 8;
    i32* %80 = getelementptr &(i32* %9)[i32 %15];
    i32* %81 = getelementptr &(i32* %80)[i64 -1];
    i32 %82 = load i32* %81;
    i32 %83 = sub i32 %79, i32 %82;
    i32 %84 = load i32* %80;
    i32 %85 = sub i32 %83, i32 %84;
    i32* %86 = getelementptr &(i32* %80)[i64 1];
    i32 %87 = load i32* %86;
    i32 %88 = sub i32 %85, i32 %87;
    i32* %89 = getelementptr &(i32* %77)[i64 -1];
    i32 %90 = load i32* %89;
    i32 %91 = sub i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %77)[i64 1];
    i32 %93 = load i32* %92;
    i32 %94 = sub i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %9)[i32 %13];
    i32* %96 = getelementptr &(i32* %95)[i64 -1];
    i32 %97 = load i32* %96;
    i32 %98 = sub i32 %94, i32 %97;
    i32 %99 = load i32* %95;
    i32 %100 = sub i32 %98, i32 %99;
    i32* %101 = getelementptr &(i32* %95)[i64 1];
    i32 %102 = load i32* %101;
    i32 %103 = sub i32 %100, i32 %102;
    i32 %104 = smin i32 %103, i32 255;
    i32 %105 = smax i32 %104, i32 0;
    i32* %106 = getelementptr &(i32* %10)[i32 %14];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %11)[i32 %14];
    i32 %108 = load i32* %107;
    i32 %109 = mul i32 %108, i32 8;
    i32* %110 = getelementptr &(i32* %11)[i32 %15];
    i32* %111 = getelementptr &(i32* %110)[i64 -1];
    i32 %112 = load i32* %111;
    i32 %113 = sub i32 %109, i32 %112;
    i32 %114 = load i32* %110;
    i32 %115 = sub i32 %113, i32 %114;
    i32* %116 = getelementptr &(i32* %110)[i64 1];
    i32 %117 = load i32* %116;
    i32 %118 = sub i32 %115, i32 %117;
    i32* %119 = getelementptr &(i32* %107)[i64 -1];
    i32 %120 = load i32* %119;
    i32 %121 = sub i32 %118, i32 %120;
    i32* %122 = getelementptr &(i32* %107)[i64 1];
    i32 %123 = load i32* %122;
    i32 %124 = sub i32 %121, i32 %123;
    i32* %125 = getelementptr &(i32* %11)[i32 %13];
    i32* %126 = getelementptr &(i32* %125)[i64 -1];
    i32 %127 = load i32* %126;
    i32 %128 = sub i32 %124, i32 %127;
    i32 %129 = load i32* %125;
    i32 %130 = sub i32 %128, i32 %129;
    i32* %131 = getelementptr &(i32* %125)[i64 1];
    i32 %132 = load i32* %131;
    i32 %133 = sub i32 %130, i32 %132;
    i32 %134 = smin i32 %133, i32 255;
    i32 %135 = smax i32 %134, i32 0;
    i32* %136 = getelementptr &(i32* %12)[i32 %14];
    store i32* %136 with i32 %135;
    i32 %137 = add i32 %16, i32 4;
    i1 %138 = icmp slt i32 %137, i32 1021;
    i32 %139 = add i32 %15, i32 2048;
    i32 %140 = add i32 %14, i32 2048;
    i32 %141 = add i32 %13, i32 2048;
    cbr i1 %138(prob = 0.996078), ^while.body, ^while.body1;
  ^while.body1:
    i32* %142 = getelementptr &(i32* %17)[i64 2048];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %143, i32 8;
    i32* %145 = getelementptr &(i32* %20)[i64 2047];
    i32 %146 = load i32* %145;
    i32 %147 = sub i32 %144, i32 %146;
    i32* %148 = getelementptr &(i32* %20)[i64 2048];
    i32 %149 = load i32* %148;
    i32 %150 = sub i32 %147, i32 %149;
    i32* %151 = getelementptr &(i32* %20)[i64 2049];
    i32 %152 = load i32* %151;
    i32 %153 = sub i32 %150, i32 %152;
    i32* %154 = getelementptr &(i32* %17)[i64 2047];
    i32 %155 = load i32* %154;
    i32 %156 = sub i32 %153, i32 %155;
    i32* %157 = getelementptr &(i32* %17)[i64 2049];
    i32 %158 = load i32* %157;
    i32 %159 = sub i32 %156, i32 %158;
    i32* %160 = getelementptr &(i32* %35)[i64 2047];
    i32 %161 = load i32* %160;
    i32 %162 = sub i32 %159, i32 %161;
    i32* %163 = getelementptr &(i32* %35)[i64 2048];
    i32 %164 = load i32* %163;
    i32 %165 = sub i32 %162, i32 %164;
    i32* %166 = getelementptr &(i32* %35)[i64 2049];
    i32 %167 = load i32* %166;
    i32 %168 = sub i32 %165, i32 %167;
    i32 %169 = smin i32 %168, i32 255;
    i32 %170 = smax i32 %169, i32 0;
    i32* %171 = getelementptr &(i32* %46)[i64 2048];
    store i32* %171 with i32 %170;
    i32* %172 = getelementptr &([524288 * i32]* %2)[i64 0][i32 %14];
    i32* %173 = getelementptr &(i32* %172)[i32 %4];
    i32* %174 = getelementptr &(i32* %173)[i64 2560];
    i32 %175 = load i32* %174;
    i32 %176 = mul i32 %175, i32 8;
    i32* %177 = getelementptr &([524288 * i32]* %2)[i64 0][i32 %15];
    i32* %178 = getelementptr &(i32* %177)[i32 %4];
    i32* %179 = getelementptr &(i32* %178)[i64 2559];
    i32 %180 = load i32* %179;
    i32 %181 = sub i32 %176, i32 %180;
    i32* %182 = getelementptr &(i32* %178)[i64 2560];
    i32 %183 = load i32* %182;
    i32 %184 = sub i32 %181, i32 %183;
    i32* %185 = getelementptr &(i32* %178)[i64 2561];
    i32 %186 = load i32* %185;
    i32 %187 = sub i32 %184, i32 %186;
    i32* %188 = getelementptr &(i32* %173)[i64 2559];
    i32 %189 = load i32* %188;
    i32 %190 = sub i32 %187, i32 %189;
    i32* %191 = getelementptr &(i32* %173)[i64 2561];
    i32 %192 = load i32* %191;
    i32 %193 = sub i32 %190, i32 %192;
    i32* %194 = getelementptr &([524288 * i32]* %2)[i64 0][i32 %13];
    i32* %195 = getelementptr &(i32* %194)[i32 %4];
    i32* %196 = getelementptr &(i32* %195)[i64 2559];
    i32 %197 = load i32* %196;
    i32 %198 = sub i32 %193, i32 %197;
    i32* %199 = getelementptr &(i32* %195)[i64 2560];
    i32 %200 = load i32* %199;
    i32 %201 = sub i32 %198, i32 %200;
    i32* %202 = getelementptr &(i32* %195)[i64 2561];
    i32 %203 = load i32* %202;
    i32 %204 = sub i32 %201, i32 %203;
    i32 %205 = smin i32 %204, i32 255;
    i32 %206 = smax i32 %205, i32 0;
    i32* %207 = getelementptr &([524288 * i32]* %3)[i64 0][i32 %14];
    i32* %208 = getelementptr &(i32* %207)[i32 %4];
    i32* %209 = getelementptr &(i32* %208)[i64 2560];
    store i32* %209 with i32 %206;
    i32 %210 = add i32 %4, i32 1;
    i1 %211 = icmp sgt i32 %1, i32 %210;
    cbr i1 %211(prob = 0.984615), ^b1, ^b2;
  ^b2:
    ret;
}
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = add i32 %1, i32 -3;
    [524288 * i32]* %5 = ptrcast [524288 * i32]* @image_out to [524288 * i32]*;
    [524288 * i32]* %6 = ptrcast [524288 * i32]* @image_in to [524288 * i32]*;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b1, i32 %32];
    i32* %8 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %7];
    store i32* %10 with i32 %9;
    i32* %11 = getelementptr &(i32* %8)[i64 523776];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &(i32* %10)[i64 523776];
    store i32* %13 with i32 %12;
    i32* %14 = getelementptr &(i32* %8)[i64 1];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &(i32* %10)[i64 1];
    store i32* %16 with i32 %15;
    i32* %17 = getelementptr &(i32* %8)[i64 523777];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %10)[i64 523777];
    store i32* %19 with i32 %18;
    i32* %20 = getelementptr &(i32* %8)[i64 2];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %10)[i64 2];
    store i32* %22 with i32 %21;
    i32* %23 = getelementptr &(i32* %8)[i64 523778];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %10)[i64 523778];
    store i32* %25 with i32 %24;
    i32* %26 = getelementptr &(i32* %8)[i64 3];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %10)[i64 3];
    store i32* %28 with i32 %27;
    i32* %29 = getelementptr &(i32* %8)[i64 523779];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %10)[i64 523779];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %7, i32 4;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %34 = phi [^b, i32 %0] [^b1, i32 %32];
    i1 %35 = icmp sgt i32 %1, i32 %34;
    cbr i1 %35(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %36 = phi [^scalar.header, i32 %34] [^b2, i32 %43];
    i32* %37 = getelementptr &([524288 * i32]* %6)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([524288 * i32]* %5)[i64 0][i32 %36];
    store i32* %39 with i32 %38;
    i32* %40 = getelementptr &(i32* %37)[i64 523776];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %39)[i64 523776];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %36, i32 1;
    i1 %44 = icmp sgt i32 %1, i32 %43;
    cbr i1 %44(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
