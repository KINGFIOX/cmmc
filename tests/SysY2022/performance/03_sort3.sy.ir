internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @base { ReadOnly } = 16;
internal func @getMaxNum(i32 %n, i32* %arr) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %ret = alloc i32;
    i32** %arr1 = alloc i32*;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32** %arr1 with i32* %arr;
    store i32* %ret with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %arr1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %8;
    i32 %10 = load i32* %ret;
    i1 %11 = scmp gt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %14 = load i32* %ret;
    ret i32 %14;
^if.then:
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = load i32** %arr1;
    i32* %18 = getelementptr &(i32* %17)[i64 %16];
    i32 %19 = load i32* %18;
    store i32* %ret with i32 %19;
    ubr ^b1;
^b1:
    i32 %20 = load i32* %i;
    i32 %21 = add i32 %20, i32 1;
    store i32* %i with i32 %21;
    ubr ^while.header;
}
internal func @getNumPos(i32 %num, i32 %pos) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %tmp = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %num1 = alloc i32;
    store i32* %num1 with i32 %num;
    store i32* %pos1 with i32 %pos;
    store i32* %tmp with i32 1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %pos1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %num1;
    i32 %6 = sdiv i32 %5, i32 16;
    store i32* %num1 with i32 %6;
    i32 %7 = load i32* %i;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i with i32 %8;
    ubr ^while.header;
^b:
    i32 %9 = load i32* %num1;
    i32 %10 = srem i32 %9, i32 16;
    ret i32 %10;
}
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %t = alloc i32;
    i32* %v = alloc i32;
    i32* %i1 = alloc i32;
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %r1 = alloc i32;
    i32* %l1 = alloc i32;
    i32** %a1 = alloc i32*;
    i32* %bitround1 = alloc i32;
    store i32* %bitround1 with i32 %bitround;
    store i32** %a1 with i32* %a;
    store i32* %l1 with i32 %l;
    store i32* %r1 with i32 %r;
    i32* %0 = getelementptr &([16 * i32]* %head)[i64 1][i64 0];
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 1][i64 0];
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 1][i64 0];
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %50 with i32 0;
    i32 %51 = load i32* %bitround1;
    i1 %52 = scmp eq i32 %51, i32 -1;
    i32 %53 = zext i1 %52 to i32;
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.5), ^b1, ^b;
^b:
    i32 %55 = load i32* %l1;
    i32 %56 = add i32 %55, i32 1;
    i32 %57 = load i32* %r1;
    i1 %58 = scmp ge i32 %56, i32 %57;
    i32 %59 = zext i1 %58 to i32;
    i1 %60 = scmp neq i32 %59, i32 0;
    ubr ^b1;
^b1:
    i1 %61 = phi [^b, i1 %60] [^entry, i1 true];
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %64 = load i32* %l1;
    store i32* %i1 with i32 %64;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %65 = load i32* %i1;
    i32 %66 = load i32* %r1;
    i1 %67 = scmp lt i32 %65, i32 %66;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = scmp neq i32 %68, i32 0;
    cbr i1 %69(prob = 0.97), ^while.body, ^b3;
^while.body:
    i32 %70 = load i32* %i1;
    i64 %71 = sext i32 %70 to i64;
    i32* %72 = load i32** %a1;
    i32* %73 = getelementptr &(i32* %72)[i64 %71];
    i32 %74 = load i32* %73;
    i32 %75 = load i32* %bitround1;
    i32 %76 = call (i32, i32) -> i32 @getNumPos(i32 %74, i32 %75);
    i64 %77 = sext i32 %76 to i64;
    i32* %78 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 %77];
    i32 %79 = load i32* %i1;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = load i32** %a1;
    i32* %82 = getelementptr &(i32* %81)[i64 %80];
    i32 %83 = load i32* %82;
    i32 %84 = load i32* %bitround1;
    i32 %85 = call (i32, i32) -> i32 @getNumPos(i32 %83, i32 %84);
    i64 %86 = sext i32 %85 to i64;
    i32* %87 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 %86];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %88, i32 1;
    store i32* %78 with i32 %89;
    i32 %90 = load i32* %i1;
    i32 %91 = add i32 %90, i32 1;
    store i32* %i1 with i32 %91;
    ubr ^while.header;
^b3:
    i32* %92 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    i32 %93 = load i32* %l1;
    store i32* %92 with i32 %93;
    i32* %94 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32 %95 = load i32* %l1;
    i32* %96 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %95, i32 %97;
    store i32* %94 with i32 %98;
    store i32* %i1 with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %99 = load i32* %i1;
    i1 %100 = scmp lt i32 %99, i32 16;
    i32 %101 = zext i1 %100 to i32;
    i1 %102 = scmp neq i32 %101, i32 0;
    cbr i1 %102(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %103 = load i32* %i1;
    i64 %104 = sext i32 %103 to i64;
    i32* %105 = getelementptr &([16 * i32]* %head)[i64 0][i64 %104];
    i32 %106 = load i32* %i1;
    i32 %107 = sub i32 %106, i32 1;
    i64 %108 = sext i32 %107 to i64;
    i32* %109 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %108];
    i32 %110 = load i32* %109;
    store i32* %105 with i32 %110;
    i32 %111 = load i32* %i1;
    i64 %112 = sext i32 %111 to i64;
    i32* %113 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %112];
    i32 %114 = load i32* %i1;
    i64 %115 = sext i32 %114 to i64;
    i32* %116 = getelementptr &([16 * i32]* %head)[i64 0][i64 %115];
    i32 %117 = load i32* %116;
    i32 %118 = load i32* %i1;
    i64 %119 = sext i32 %118 to i64;
    i32* %120 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 %119];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %117, i32 %121;
    store i32* %113 with i32 %122;
    i32 %123 = load i32* %i1;
    i32 %124 = add i32 %123, i32 1;
    store i32* %i1 with i32 %124;
    ubr ^while.header1;
^b4:
    store i32* %i1 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %125 = load i32* %i1;
    i1 %126 = scmp lt i32 %125, i32 16;
    i32 %127 = zext i1 %126 to i32;
    i1 %128 = scmp neq i32 %127, i32 0;
    cbr i1 %128(prob = 0.97), ^while.body2, ^b5;
^while.body2:
    ubr ^while.header3;
^b5:
    i32 %129 = load i32* %l1;
    store i32* %i with i32 %129;
    i32* %130 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    i32 %131 = load i32* %l1;
    store i32* %130 with i32 %131;
    i32* %132 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32 %133 = load i32* %l1;
    i32* %134 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %133, i32 %135;
    store i32* %132 with i32 %136;
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %137 = load i32* %i1;
    i64 %138 = sext i32 %137 to i64;
    i32* %139 = getelementptr &([16 * i32]* %head)[i64 0][i64 %138];
    i32 %140 = load i32* %139;
    i32 %141 = load i32* %i1;
    i64 %142 = sext i32 %141 to i64;
    i32* %143 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %142];
    i32 %144 = load i32* %143;
    i1 %145 = scmp lt i32 %140, i32 %144;
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.97), ^while.body3, ^b6;
^while.header4:
    i32 %148 = load i32* %i;
    i1 %149 = scmp lt i32 %148, i32 16;
    i32 %150 = zext i1 %149 to i32;
    i1 %151 = scmp neq i32 %150, i32 0;
    cbr i1 %151(prob = 0.97), ^while.body4, ^b7;
^while.body3:
    i32 %152 = load i32* %i1;
    i64 %153 = sext i32 %152 to i64;
    i32* %154 = getelementptr &([16 * i32]* %head)[i64 0][i64 %153];
    i32 %155 = load i32* %154;
    i64 %156 = sext i32 %155 to i64;
    i32* %157 = load i32** %a1;
    i32* %158 = getelementptr &(i32* %157)[i64 %156];
    i32 %159 = load i32* %158;
    store i32* %v with i32 %159;
    ubr ^while.header5;
^b6:
    i32 %160 = load i32* %i1;
    i32 %161 = add i32 %160, i32 1;
    store i32* %i1 with i32 %161;
    ubr ^while.header2;
^while.body4:
    i32 %162 = load i32* %i;
    i1 %163 = scmp gt i32 %162, i32 0;
    i32 %164 = zext i1 %163 to i32;
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.5), ^if.then1, ^b8;
^b7:
    ret;
^if.then1:
    i32 %166 = load i32* %i;
    i64 %167 = sext i32 %166 to i64;
    i32* %168 = getelementptr &([16 * i32]* %head)[i64 0][i64 %167];
    i32 %169 = load i32* %i;
    i32 %170 = sub i32 %169, i32 1;
    i64 %171 = sext i32 %170 to i64;
    i32* %172 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %171];
    i32 %173 = load i32* %172;
    store i32* %168 with i32 %173;
    i32 %174 = load i32* %i;
    i64 %175 = sext i32 %174 to i64;
    i32* %176 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %175];
    i32 %177 = load i32* %i;
    i64 %178 = sext i32 %177 to i64;
    i32* %179 = getelementptr &([16 * i32]* %head)[i64 0][i64 %178];
    i32 %180 = load i32* %179;
    i32 %181 = load i32* %i;
    i64 %182 = sext i32 %181 to i64;
    i32* %183 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 %182];
    i32 %184 = load i32* %183;
    i32 %185 = add i32 %180, i32 %184;
    store i32* %176 with i32 %185;
    ubr ^b8;
^while.header5:
    i32 %186 = load i32* %v;
    i32 %187 = load i32* %bitround1;
    i32 %188 = call (i32, i32) -> i32 @getNumPos(i32 %186, i32 %187);
    i32 %189 = load i32* %i1;
    i1 %190 = scmp neq i32 %188, i32 %189;
    i32 %191 = zext i1 %190 to i32;
    i1 %192 = scmp neq i32 %191, i32 0;
    cbr i1 %192(prob = 0.97), ^while.body5, ^b9;
^b8:
    i32 %193 = load i32* %bitround1;
    i32 %194 = sub i32 %193, i32 1;
    i32* %195 = load i32** %a1;
    i32 %196 = load i32* %i;
    i64 %197 = sext i32 %196 to i64;
    i32* %198 = getelementptr &([16 * i32]* %head)[i64 0][i64 %197];
    i32 %199 = load i32* %198;
    i32 %200 = load i32* %i;
    i64 %201 = sext i32 %200 to i64;
    i32* %202 = getelementptr &([16 * i32]* %tail)[i64 0][i64 %201];
    i32 %203 = load i32* %202;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %194, i32* %195, i32 %199, i32 %203);
    i32 %204 = load i32* %i;
    i32 %205 = add i32 %204, i32 1;
    store i32* %i with i32 %205;
    ubr ^while.header4;
^while.body5:
    i32 %206 = load i32* %v;
    store i32* %t with i32 %206;
    i32 %207 = load i32* %t;
    i32 %208 = load i32* %bitround1;
    i32 %209 = call (i32, i32) -> i32 @getNumPos(i32 %207, i32 %208);
    i64 %210 = sext i32 %209 to i64;
    i32* %211 = getelementptr &([16 * i32]* %head)[i64 0][i64 %210];
    i32 %212 = load i32* %211;
    i64 %213 = sext i32 %212 to i64;
    i32* %214 = load i32** %a1;
    i32* %215 = getelementptr &(i32* %214)[i64 %213];
    i32 %216 = load i32* %215;
    store i32* %v with i32 %216;
    i32 %217 = load i32* %t;
    i32 %218 = load i32* %bitround1;
    i32 %219 = call (i32, i32) -> i32 @getNumPos(i32 %217, i32 %218);
    i64 %220 = sext i32 %219 to i64;
    i32* %221 = getelementptr &([16 * i32]* %head)[i64 0][i64 %220];
    i32 %222 = load i32* %221;
    i64 %223 = sext i32 %222 to i64;
    i32* %224 = load i32** %a1;
    i32* %225 = getelementptr &(i32* %224)[i64 %223];
    i32 %226 = load i32* %t;
    store i32* %225 with i32 %226;
    i32 %227 = load i32* %t;
    i32 %228 = load i32* %bitround1;
    i32 %229 = call (i32, i32) -> i32 @getNumPos(i32 %227, i32 %228);
    i64 %230 = sext i32 %229 to i64;
    i32* %231 = getelementptr &([16 * i32]* %head)[i64 0][i64 %230];
    i32 %232 = load i32* %t;
    i32 %233 = load i32* %bitround1;
    i32 %234 = call (i32, i32) -> i32 @getNumPos(i32 %232, i32 %233);
    i64 %235 = sext i32 %234 to i64;
    i32* %236 = getelementptr &([16 * i32]* %head)[i64 0][i64 %235];
    i32 %237 = load i32* %236;
    i32 %238 = add i32 %237, i32 1;
    store i32* %231 with i32 %238;
    ubr ^while.header5;
^b9:
    i32 %239 = load i32* %i1;
    i64 %240 = sext i32 %239 to i64;
    i32* %241 = getelementptr &([16 * i32]* %head)[i64 0][i64 %240];
    i32 %242 = load i32* %241;
    i64 %243 = sext i32 %242 to i64;
    i32* %244 = load i32** %a1;
    i32* %245 = getelementptr &(i32* %244)[i64 %243];
    i32 %246 = load i32* %v;
    store i32* %245 with i32 %246;
    i32 %247 = load i32* %i1;
    i64 %248 = sext i32 %247 to i64;
    i32* %249 = getelementptr &([16 * i32]* %head)[i64 0][i64 %248];
    i32 %250 = load i32* %i1;
    i64 %251 = sext i32 %250 to i64;
    i32* %252 = getelementptr &([16 * i32]* %head)[i64 0][i64 %251];
    i32 %253 = load i32* %252;
    i32 %254 = add i32 %253, i32 1;
    store i32* %249 with i32 %254;
    ubr ^while.header3;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [30000010 * i32]* @a;
internal i32* @ans;
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 90);
    i32* %2 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %3 = load i32* %n;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %2, i32 0, i32 %3);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %i;
    i32 %5 = load i32* %n;
    i1 %6 = scmp lt i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %9 = load i32* @ans;
    i32 %10 = load i32* %i;
    i32 %11 = load i32* %i;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 %12];
    i32 %14 = load i32* %13;
    i32 %15 = load i32* %i;
    i32 %16 = add i32 2, i32 %15;
    i32 %17 = srem i32 %14, i32 %16;
    i32 %18 = mul i32 %10, i32 %17;
    i32 %19 = add i32 %9, i32 %18;
    store i32* @ans with i32 %19;
    i32 %20 = load i32* %i;
    i32 %21 = add i32 %20, i32 1;
    store i32* %i with i32 %21;
    ubr ^while.header;
^b:
    i32 %22 = load i32* @ans;
    i1 %23 = scmp lt i32 %22, i32 0;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %26 = load i32* @ans;
    i32 %27 = neg i32 %26;
    store i32* @ans with i32 %27;
    ubr ^b1;
^b1:
    call (i32) -> void @stoptime(i32 102);
    i32 %28 = load i32* @ans;
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
