internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32], align 8;
    [16 * i32]* %tail = alloc [16 * i32], align 8;
    [16 * i32]* %head = alloc [16 * i32], align 8;
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %51 with i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^while.header;
  ^while.header:
    i32 %52 = mul i32 %bitround, i32 4;
    i32 %53 = shl i32 1, i32 %52;
    i1 %54 = icmp slt i32 %l, i32 %r;
    i1 %55 = icmp slt i32 %bitround, i32 8;
    i1 %56 = icmp sgt i32 %bitround, i32 0;
    i32 %57 = add i32 %bitround, i32 -1;
    cbr i1 %54(prob = 0.984615), ^super.header, ^b;
  ^if.then:
    ret;
  ^b:
    store i32* %4 with i32 %l;
    i32 %58 = load i32* %36;
    i32 %59 = add i32 %l, i32 %58;
    store i32* %20 with i32 %59;
    store i32* %5 with i32 %59;
    i32 %60 = load i32* %37;
    i32 %61 = add i32 %59, i32 %60;
    store i32* %21 with i32 %61;
    store i32* %6 with i32 %61;
    i32 %62 = load i32* %38;
    i32 %63 = add i32 %61, i32 %62;
    store i32* %22 with i32 %63;
    store i32* %7 with i32 %63;
    i32 %64 = load i32* %39;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %23 with i32 %65;
    store i32* %8 with i32 %65;
    i32 %66 = load i32* %40;
    i32 %67 = add i32 %65, i32 %66;
    store i32* %24 with i32 %67;
    store i32* %9 with i32 %67;
    i32 %68 = load i32* %41;
    i32 %69 = add i32 %67, i32 %68;
    store i32* %25 with i32 %69;
    store i32* %10 with i32 %69;
    i32 %70 = load i32* %42;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %26 with i32 %71;
    store i32* %11 with i32 %71;
    i32 %72 = load i32* %43;
    i32 %73 = add i32 %71, i32 %72;
    store i32* %27 with i32 %73;
    store i32* %12 with i32 %73;
    i32 %74 = load i32* %44;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %28 with i32 %75;
    store i32* %13 with i32 %75;
    i32 %76 = load i32* %45;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %29 with i32 %77;
    store i32* %14 with i32 %77;
    i32 %78 = load i32* %46;
    i32 %79 = add i32 %77, i32 %78;
    store i32* %30 with i32 %79;
    store i32* %15 with i32 %79;
    i32 %80 = load i32* %47;
    i32 %81 = add i32 %79, i32 %80;
    store i32* %31 with i32 %81;
    store i32* %16 with i32 %81;
    i32 %82 = load i32* %48;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %32 with i32 %83;
    store i32* %17 with i32 %83;
    i32 %84 = load i32* %49;
    i32 %85 = add i32 %83, i32 %84;
    store i32* %33 with i32 %85;
    store i32* %18 with i32 %85;
    i32 %86 = load i32* %50;
    i32 %87 = add i32 %85, i32 %86;
    store i32* %34 with i32 %87;
    store i32* %19 with i32 %87;
    i32 %88 = load i32* %51;
    i32 %89 = add i32 %87, i32 %88;
    store i32* %35 with i32 %89;
    ubr ^while.header1;
  ^super.header:
    i32 %90 = add i32 %l, i32 4;
    i1 %91 = icmp sgt i32 %r, i32 %90;
    i32 %92 = add i32 %r, i32 -4;
    cbr i1 %91(prob = 0.941176), ^b1, ^b2;
  ^b1:
    i32 %93 = phi [^super.header, i32 %l] [^b10, i32 %176];
    i32* %94 = getelementptr &(i32* %a)[i32 %93];
    i32 %95 = load i32* %94;
    cbr i1 %56(prob = 0.984615), ^prebody, ^b4;
  ^b2 {scalar}:
    i32 %96 = phi [^super.header, i32 %l] [^b5, i32 %123] [^b10, i32 %176];
    i32* %97 = getelementptr &(i32* %a)[i32 %96];
    i32 %98 = load i32* %97;
    cbr i1 %56(prob = 0.984615), ^prebody1, ^b5;
  ^while.header1:
    i32 %99 = phi [^b, i32 0] [^b7, i32 %145];
    i1 %100 = icmp slt i32 %99, i32 16;
    cbr i1 %100(prob = 0.984615), ^indirect, ^b3;
  ^prebody:
    i32 %101 = sdiv i32 %95, i32 %53;
    i32 %102 = select i1 %55 ? i32 %101 : i32 0;
    ubr ^b4;
  ^indirect:
    i32* %103 = getelementptr &([16 * i32]* %head)[i64 0][i32 %99];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %99];
    ubr ^while.header2;
  ^prebody1:
    i32 %106 = sdiv i32 %98, i32 %53;
    i32 %107 = select i1 %55 ? i32 %106 : i32 0;
    ubr ^b5;
  ^b3:
    store i32* %4 with i32 %l;
    i32 %108 = load i32* %36;
    i32 %109 = add i32 %l, i32 %108;
    store i32* %20 with i32 %109;
    ubr ^while.body;
  ^b4:
    i32 %110 = phi [^b1, i32 %95] [^prebody, i32 %102];
    i32 %111 = and i32 %110, i32 15;
    i32* %112 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %111];
    i32 %113 = load i32* %112;
    i32 %114 = add i32 %113, i32 1;
    store i32* %112 with i32 %114;
    i32 %115 = add i32 %93, i32 1;
    i32* %116 = getelementptr &(i32* %a)[i32 %115];
    i32 %117 = load i32* %116;
    cbr i1 %56(prob = 0.984615), ^prebody2, ^b6;
  ^b5:
    i32 %118 = phi [^b2, i32 %98] [^prebody1, i32 %107];
    i32 %119 = and i32 %118, i32 15;
    i32* %120 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %119];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %121, i32 1;
    store i32* %120 with i32 %122;
    i32 %123 = add i32 %96, i32 1;
    i1 %124 = icmp sgt i32 %r, i32 %123;
    cbr i1 %124(prob = 0.75), ^b2, ^b;
  ^prebody2:
    i32 %125 = sdiv i32 %117, i32 %53;
    i32 %126 = select i1 %55 ? i32 %125 : i32 0;
    ubr ^b6;
  ^while.header2:
    i32 %127 = phi [^indirect, i32 %104] [^b12, i32 %190];
    i32 %128 = load i32* %105;
    i1 %129 = icmp slt i32 %127, i32 %128;
    cbr i1 %129(prob = 0.984615), ^while.body1, ^b7;
  ^while.body:
    i32 %130 = phi [^b3, i32 0] [^b9, i32 %169];
    i32* %131 = getelementptr &([16 * i32]* %head)[i64 0][i32 %130];
    i32* %132 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %130];
    i1 %133 = icmp sgt i32 %130, i32 0;
    cbr i1 %133(prob = 0.5), ^if.then1, ^indirect1;
  ^b6:
    i32 %134 = phi [^b4, i32 %117] [^prebody2, i32 %126];
    i32 %135 = and i32 %134, i32 15;
    i32* %136 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %135];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %137, i32 1;
    store i32* %136 with i32 %138;
    i32 %139 = add i32 %93, i32 2;
    i32* %140 = getelementptr &(i32* %a)[i32 %139];
    i32 %141 = load i32* %140;
    cbr i1 %56(prob = 0.984615), ^prebody3, ^b8;
  ^while.body1:
    i32 %142 = load i32* %103;
    i32* %143 = getelementptr &(i32* %a)[i32 %142];
    i32 %144 = load i32* %143;
    ubr ^while.header3;
  ^b7:
    i32 %145 = add i32 %99, i32 1;
    ubr ^while.header1;
  ^if.then1:
    i32 %146 = add i32 %130, i32 -1;
    i32* %147 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %146];
    i32 %148 = load i32* %147;
    store i32* %131 with i32 %148;
    i32* %149 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %130];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %148, i32 %150;
    store i32* %132 with i32 %151;
    ubr ^b9;
  ^prebody3:
    i32 %152 = sdiv i32 %141, i32 %53;
    i32 %153 = select i1 %55 ? i32 %152 : i32 0;
    ubr ^b8;
  ^indirect1:
    i32 %154 = load i32* %131;
    i32 %155 = load i32* %132;
    ubr ^b9;
  ^b8:
    i32 %156 = phi [^b6, i32 %141] [^prebody3, i32 %153];
    i32 %157 = and i32 %156, i32 15;
    i32* %158 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %157];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %159, i32 1;
    store i32* %158 with i32 %160;
    i32 %161 = add i32 %93, i32 3;
    i32* %162 = getelementptr &(i32* %a)[i32 %161];
    i32 %163 = load i32* %162;
    cbr i1 %56(prob = 0.984615), ^prebody4, ^b10;
  ^while.header3:
    i32 %164 = phi [^while.body1, i32 %144] [^while.body2, i32 %186];
    cbr i1 %56(prob = 0.984615), ^prebody5, ^b11;
  ^prebody4:
    i32 %165 = sdiv i32 %163, i32 %53;
    i32 %166 = select i1 %55 ? i32 %165 : i32 0;
    ubr ^b10;
  ^b9:
    i32 %167 = phi [^if.then1, i32 %148] [^indirect1, i32 %154];
    i32 %168 = phi [^if.then1, i32 %151] [^indirect1, i32 %155];
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %57, i32* %a, i32 %167, i32 %168);
    i32 %169 = add i32 %130, i32 1;
    i1 %170 = icmp slt i32 %169, i32 16;
    cbr i1 %170(prob = 0.9375), ^while.body, ^if.then;
  ^b10:
    i32 %171 = phi [^b8, i32 %163] [^prebody4, i32 %166];
    i32 %172 = and i32 %171, i32 15;
    i32* %173 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %172];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %174, i32 1;
    store i32* %173 with i32 %175;
    i32 %176 = add i32 %93, i32 4;
    i1 %177 = icmp sgt i32 %92, i32 %176;
    cbr i1 %177(prob = 0.941176), ^b1, ^b2;
  ^prebody5:
    i32 %178 = sdiv i32 %164, i32 %53;
    i32 %179 = select i1 %55 ? i32 %178 : i32 0;
    ubr ^b11;
  ^b11:
    i32 %180 = phi [^while.header3, i32 %164] [^prebody5, i32 %179];
    i32 %181 = srem i32 %180, i32 16;
    i1 %182 = icmp neq i32 %99, i32 %181;
    cbr i1 %182(prob = 0.984615), ^while.body2, ^b12;
  ^while.body2:
    i32* %183 = getelementptr &([16 * i32]* %head)[i64 0][i32 %181];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %a)[i32 %184];
    i32 %186 = load i32* %185;
    store i32* %185 with i32 %164;
    i32 %187 = add i32 %184, i32 1;
    store i32* %183 with i32 %187;
    ubr ^while.header3;
  ^b12:
    i32 %188 = load i32* %103;
    i32* %189 = getelementptr &(i32* %a)[i32 %188];
    store i32* %189 with i32 %164;
    i32 %190 = add i32 %188, i32 1;
    store i32* %103 with i32 %190;
    ubr ^while.header2;
}
internal [30000010 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    i1 %3 = icmp sgt i32 %2, i32 4;
    i32 %4 = add i32 %2, i32 -4;
    cbr i1 %3(prob = 0.941176), ^while.body, ^while.body1;
  ^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %21];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %31];
    i32* %7 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %5];
    i32 %8 = load i32* %7;
    i32* %9 = getelementptr &(i32* %7)[i64 1];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %5, i32 3;
    i32 %12 = srem i32 %10, i32 %11;
    i32 %13 = add i32 %5, i32 1;
    i32 %14 = mul i32 %12, i32 %13;
    i32 %15 = add i32 %5, i32 2;
    i32 %16 = srem i32 %8, i32 %15;
    i32 %17 = mul i32 %5, i32 %16;
    i32 %18 = add i32 %14, i32 %17;
    i32* %19 = getelementptr &(i32* %7)[i64 2];
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %5, i32 4;
    i32 %22 = srem i32 %20, i32 %21;
    i32 %23 = mul i32 %15, i32 %22;
    i32 %24 = add i32 %18, i32 %23;
    i32* %25 = getelementptr &(i32* %7)[i64 3];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %5, i32 5;
    i32 %28 = srem i32 %26, i32 %27;
    i32 %29 = mul i32 %11, i32 %28;
    i32 %30 = add i32 %24, i32 %29;
    i32 %31 = add i32 %6, i32 %30;
    i1 %32 = icmp sgt i32 %4, i32 %21;
    cbr i1 %32(prob = 0.941176), ^while.body, ^while.body1;
  ^while.body1 {scalar}:
    i32 %33 = phi [^entry, i32 0] [^while.body, i32 %31] [^while.body1, i32 %40];
    i32 %34 = phi [^entry, i32 0] [^while.body, i32 %21] [^while.body1, i32 %41];
    i32* %35 = getelementptr &([30000010 * i32]* %0)[i64 0][i32 %34];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 2;
    i32 %38 = srem i32 %36, i32 %37;
    i32 %39 = mul i32 %34, i32 %38;
    i32 %40 = add i32 %33, i32 %39;
    i32 %41 = add i32 %34, i32 1;
    i1 %42 = icmp sgt i32 %2, i32 %41;
    cbr i1 %42(prob = 0.75), ^while.body1, ^postbody;
  ^postbody:
    i32 %43 = abs i32 %40;
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %43);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
