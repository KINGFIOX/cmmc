internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
  ^entry:
    [16 * i32]* %cnt = alloc [16 * i32], align 8;
    [16 * i32]* %tail = alloc [16 * i32], align 8;
    [16 * i32]* %head = alloc [16 * i32], align 8;
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    i1 %2 = icmp eq i32 %bitround, i32 -1;
    i1 %3 = or i1 %1, i1 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^succ;
  ^b:
    i32 %4 = mul i32 %bitround, i32 4;
    i32 %5 = shl i32 1, i32 %4;
    i1 %6 = icmp slt i32 %l, i32 %r;
    i32 %7 = add i32 %bitround, i32 -1;
    i1 %8 = icmp sgt i32 %bitround, i32 0;
    i1 %9 = icmp slt i32 %bitround, i32 8;
    cbr i1 %6(prob = 0.984615), ^b1, ^b2;
  ^if.then:
    ret;
  ^b1:
    i32 %10 = phi [^b, i32 %l] [^b4, i32 %58];
    i32* %11 = getelementptr &(i32* %a)[i32 %10];
    i32 %12 = load i32* %11;
    cbr i1 %8(prob = 0.984615), ^prebody, ^b4;
  ^b2:
    store i32* %131 with i32 %l;
    i32 %13 = load i32* %163;
    i32 %14 = add i32 %l, i32 %13;
    store i32* %147 with i32 %14;
    store i32* %132 with i32 %14;
    i32 %15 = load i32* %164;
    i32 %16 = add i32 %14, i32 %15;
    store i32* %148 with i32 %16;
    store i32* %133 with i32 %16;
    i32 %17 = load i32* %165;
    i32 %18 = add i32 %16, i32 %17;
    store i32* %149 with i32 %18;
    store i32* %134 with i32 %18;
    i32 %19 = load i32* %166;
    i32 %20 = add i32 %18, i32 %19;
    store i32* %150 with i32 %20;
    store i32* %135 with i32 %20;
    i32 %21 = load i32* %167;
    i32 %22 = add i32 %20, i32 %21;
    store i32* %151 with i32 %22;
    store i32* %136 with i32 %22;
    i32 %23 = load i32* %168;
    i32 %24 = add i32 %22, i32 %23;
    store i32* %152 with i32 %24;
    store i32* %137 with i32 %24;
    i32 %25 = load i32* %169;
    i32 %26 = add i32 %24, i32 %25;
    store i32* %153 with i32 %26;
    store i32* %138 with i32 %26;
    i32 %27 = load i32* %170;
    i32 %28 = add i32 %26, i32 %27;
    store i32* %154 with i32 %28;
    store i32* %139 with i32 %28;
    i32 %29 = load i32* %171;
    i32 %30 = add i32 %28, i32 %29;
    store i32* %155 with i32 %30;
    store i32* %140 with i32 %30;
    i32 %31 = load i32* %172;
    i32 %32 = add i32 %30, i32 %31;
    store i32* %156 with i32 %32;
    store i32* %141 with i32 %32;
    i32 %33 = load i32* %173;
    i32 %34 = add i32 %32, i32 %33;
    store i32* %157 with i32 %34;
    store i32* %142 with i32 %34;
    i32 %35 = load i32* %174;
    i32 %36 = add i32 %34, i32 %35;
    store i32* %158 with i32 %36;
    store i32* %143 with i32 %36;
    i32 %37 = load i32* %175;
    i32 %38 = add i32 %36, i32 %37;
    store i32* %159 with i32 %38;
    store i32* %144 with i32 %38;
    i32 %39 = load i32* %176;
    i32 %40 = add i32 %38, i32 %39;
    store i32* %160 with i32 %40;
    store i32* %145 with i32 %40;
    i32 %41 = load i32* %177;
    i32 %42 = add i32 %40, i32 %41;
    store i32* %161 with i32 %42;
    store i32* %146 with i32 %42;
    i32 %43 = load i32* %178;
    i32 %44 = add i32 %42, i32 %43;
    store i32* %162 with i32 %44;
    cbr i1 %8(prob = 0.5), ^b3, ^b5;
  ^prebody:
    i32 %45 = sdiv i32 %12, i32 %5;
    i32 %46 = select i1 %9 ? i32 %45 : i32 0;
    ubr ^b4;
  ^b3:
    i32 %47 = phi [^b2, i32 0] [^b6, i32 %78];
    i32* %48 = getelementptr &([16 * i32]* %head)[i64 0][i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %47];
    i32 %51 = load i32* %50;
    i1 %52 = icmp slt i32 %49, i32 %51;
    cbr i1 %52(prob = 0.984615), ^while.body, ^b6;
  ^b4:
    i32 %53 = phi [^b1, i32 %12] [^prebody, i32 %46];
    i32 %54 = and i32 %53, i32 15;
    i32* %55 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %56, i32 1;
    store i32* %55 with i32 %57;
    i32 %58 = add i32 %10, i32 1;
    i1 %59 = icmp sgt i32 %r, i32 %58;
    cbr i1 %59(prob = 0.984615), ^b1, ^b2;
  ^b5:
    i32 %60 = phi [^b2, i32 0] [^b7, i32 %80];
    i32* %61 = getelementptr &([16 * i32]* %head)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %60];
    i32 %64 = load i32* %63;
    i1 %65 = icmp slt i32 %62, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.body1, ^b7;
  ^while.body:
    i32 %66 = phi [^b3, i32 %49] [^b9, i32 %107];
    i32* %67 = getelementptr &(i32* %a)[i32 %66];
    i32 %68 = load i32* %67;
    i32 %69 = sdiv i32 %68, i32 %5;
    i32 %70 = select i1 %9 ? i32 %69 : i32 0;
    i32 %71 = srem i32 %70, i32 16;
    i1 %72 = icmp neq i32 %47, i32 %71;
    cbr i1 %72(prob = 0.984615), ^while.body2, ^b9;
  ^while.body1:
    i32 %73 = phi [^b5, i32 %62] [^b10, i32 %113];
    i32* %74 = getelementptr &(i32* %a)[i32 %73];
    i32 %75 = load i32* %74;
    i32 %76 = srem i32 %75, i32 16;
    i1 %77 = icmp neq i32 %60, i32 %76;
    cbr i1 %77(prob = 0.984615), ^while.body3, ^b10;
  ^b6:
    i32 %78 = add i32 %47, i32 1;
    i1 %79 = icmp slt i32 %78, i32 16;
    cbr i1 %79(prob = 0.9375), ^b3, ^b8;
  ^b7:
    i32 %80 = add i32 %60, i32 1;
    i1 %81 = icmp slt i32 %80, i32 16;
    cbr i1 %81(prob = 0.9375), ^b5, ^b8;
  ^b8:
    store i32* %131 with i32 %l;
    i32 %82 = load i32* %163;
    i32 %83 = add i32 %l, i32 %82;
    store i32* %147 with i32 %83;
    ubr ^while.body4;
  ^while.body2:
    i32 %84 = phi [^while.body, i32 %71] [^while.body2, i32 %92];
    i32 %85 = phi [^while.body, i32 %68] [^while.body2, i32 %89];
    i32* %86 = getelementptr &([16 * i32]* %head)[i64 0][i32 %84];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %a)[i32 %87];
    i32 %89 = load i32* %88;
    i32 %90 = sdiv i32 %89, i32 %5;
    i32 %91 = select i1 %9 ? i32 %90 : i32 0;
    i32 %92 = srem i32 %91, i32 16;
    i1 %93 = icmp neq i32 %47, i32 %92;
    store i32* %88 with i32 %85;
    i32 %94 = add i32 %87, i32 1;
    store i32* %86 with i32 %94;
    cbr i1 %93(prob = 0.984615), ^while.body2, ^b9;
  ^while.body3:
    i32 %95 = phi [^while.body1, i32 %76] [^while.body3, i32 %101];
    i32 %96 = phi [^while.body1, i32 %75] [^while.body3, i32 %100];
    i32* %97 = getelementptr &([16 * i32]* %head)[i64 0][i32 %95];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %a)[i32 %98];
    i32 %100 = load i32* %99;
    i32 %101 = srem i32 %100, i32 16;
    i1 %102 = icmp neq i32 %60, i32 %101;
    store i32* %99 with i32 %96;
    i32 %103 = add i32 %98, i32 1;
    store i32* %97 with i32 %103;
    cbr i1 %102(prob = 0.984615), ^while.body3, ^b10;
  ^b9:
    i32 %104 = phi [^while.body, i32 %68] [^while.body2, i32 %89];
    i32 %105 = load i32* %48;
    i32* %106 = getelementptr &(i32* %a)[i32 %105];
    store i32* %106 with i32 %104;
    i32 %107 = add i32 %105, i32 1;
    store i32* %48 with i32 %107;
    i32 %108 = load i32* %50;
    i1 %109 = icmp slt i32 %107, i32 %108;
    cbr i1 %109(prob = 0.984615), ^while.body, ^b6;
  ^b10:
    i32 %110 = phi [^while.body1, i32 %75] [^while.body3, i32 %100];
    i32 %111 = load i32* %61;
    i32* %112 = getelementptr &(i32* %a)[i32 %111];
    store i32* %112 with i32 %110;
    i32 %113 = add i32 %111, i32 1;
    store i32* %61 with i32 %113;
    i32 %114 = load i32* %63;
    i1 %115 = icmp slt i32 %113, i32 %114;
    cbr i1 %115(prob = 0.984615), ^while.body1, ^b7;
  ^while.body4:
    i32 %116 = phi [^b8, i32 0] [^b11, i32 %129];
    i32* %117 = getelementptr &([16 * i32]* %head)[i64 0][i32 %116];
    i32* %118 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %116];
    i1 %119 = icmp sgt i32 %116, i32 0;
    cbr i1 %119(prob = 0.5), ^if.then1, ^indirect;
  ^if.then1:
    i32* %120 = getelementptr &(i32* %118)[i64 -1];
    i32 %121 = load i32* %120;
    store i32* %117 with i32 %121;
    i32* %122 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %116];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %121, i32 %123;
    store i32* %118 with i32 %124;
    ubr ^b11;
  ^indirect:
    i32 %125 = load i32* %117;
    i32 %126 = load i32* %118;
    ubr ^b11;
  ^b11:
    i32 %127 = phi [^if.then1, i32 %121] [^indirect, i32 %125];
    i32 %128 = phi [^if.then1, i32 %124] [^indirect, i32 %126];
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %7, i32* %a, i32 %127, i32 %128);
    i32 %129 = add i32 %116, i32 1;
    i1 %130 = icmp slt i32 %129, i32 16;
    cbr i1 %130(prob = 0.9375), ^while.body4, ^if.then;
  ^succ:
    i32* %131 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %168 with i32 0;
    i32* %169 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %169 with i32 0;
    i32* %170 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %170 with i32 0;
    i32* %171 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %171 with i32 0;
    i32* %172 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %172 with i32 0;
    i32* %173 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %173 with i32 0;
    i32* %174 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %174 with i32 0;
    i32* %175 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %175 with i32 0;
    i32* %176 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %176 with i32 0;
    i32* %177 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %177 with i32 0;
    i32* %178 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %178 with i32 0;
    ubr ^b;
}
internal [30000010 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [30000010 * i32]* %0 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    i32* %1 = getelementptr &([30000010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %1, i32 0, i32 %2);
    [12 * i8]* %3 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %4 = ptradd [12 * i8]* %3, i32 0;
    store i32* %4 with i32 0;
    i32* %5 = ptradd [12 * i8]* %3, i32 4;
    store i32* %5 with i32 0;
    i32* %6 = ptradd [12 * i8]* %3, i32 8;
    store i32* %6 with i32 %2;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %2, i8* %7);
    i32 %8 = load i32* %4;
    i32 %9 = abs i32 %8;
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = add i32 %1, i32 -3;
    [30000010 * i32]* %5 = ptrcast [30000010 * i32]* @a to [30000010 * i32]*;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %6 = phi [^b, i32 0] [^b1, i32 %32];
    i32 %7 = phi [^b, i32 %0] [^b1, i32 %22];
    i32* %8 = getelementptr &([30000010 * i32]* %5)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &(i32* %8)[i64 1];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %7, i32 3;
    i32 %13 = srem i32 %11, i32 %12;
    i32 %14 = add i32 %7, i32 1;
    i32 %15 = mul i32 %13, i32 %14;
    i32 %16 = add i32 %7, i32 2;
    i32 %17 = srem i32 %9, i32 %16;
    i32 %18 = mul i32 %7, i32 %17;
    i32 %19 = add i32 %15, i32 %18;
    i32* %20 = getelementptr &(i32* %8)[i64 2];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %7, i32 4;
    i32 %23 = srem i32 %21, i32 %22;
    i32 %24 = mul i32 %16, i32 %23;
    i32 %25 = add i32 %19, i32 %24;
    i32* %26 = getelementptr &(i32* %8)[i64 3];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %7, i32 5;
    i32 %29 = srem i32 %27, i32 %28;
    i32 %30 = mul i32 %12, i32 %29;
    i32 %31 = add i32 %25, i32 %30;
    i32 %32 = add i32 %6, i32 %31;
    i1 %33 = icmp sgt i32 %4, i32 %22;
    cbr i1 %33(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %34 = phi [^b, i32 0] [^b1, i32 %32];
    i32 %35 = phi [^b, i32 %0] [^b1, i32 %22];
    i32 %36 = phi [^b, i32 undef] [^b1, i32 %32];
    i1 %37 = icmp sgt i32 %1, i32 %35;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %38 = phi [^scalar.header, i32 %35] [^b2, i32 %46];
    i32 %39 = phi [^scalar.header, i32 %34] [^b2, i32 %45];
    i32* %40 = getelementptr &([30000010 * i32]* %5)[i64 0][i32 %38];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %38, i32 2;
    i32 %43 = srem i32 %41, i32 %42;
    i32 %44 = mul i32 %38, i32 %43;
    i32 %45 = add i32 %39, i32 %44;
    i32 %46 = add i32 %38, i32 1;
    i1 %47 = icmp sgt i32 %1, i32 %46;
    cbr i1 %47(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    i32 %48 = phi [^scalar.header, i32 %36] [^b2, i32 %45];
    [12 * i8]* %49 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_0 to [12 * i8]*;
    i32* %50 = ptradd [12 * i8]* %49, i32 0;
    atomicadd i32* %50, i32 %48;
    ret;
}
internal [12 * i8]* @cmmc_parallel_body_payload_0, align 8;
