internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @getNumPos(i32 %num, i32 %pos) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i1 %0 = scmp gt i32 %pos, i32 0;
    cbr i1 %0(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %1 = phi [^while.body, i32 %4] [^entry, i32 0];
    i32 %2 = phi [^while.body, i32 %3] [^entry, i32 %num];
    i32 %3 = sdiv i32 %2, i32 16;
    i32 %4 = add i32 %1, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %pos;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^b:
    i32 %6 = phi [^while.body, i32 %3] [^entry, i32 %num];
    i32 %7 = srem i32 %6, i32 16;
    ret i32 %7;
}
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %t = alloc i32;
    i32* %v = alloc i32;
    i32* %i1 = alloc i32;
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %r1 = alloc i32;
    i32* %l1 = alloc i32;
    i32** %a1 = alloc i32*;
    i32* %bitround1 = alloc i32;
    store i32* %bitround1 with i32 %bitround;
    store i32** %a1 with i32* %a;
    store i32* %l1 with i32 %l;
    store i32* %r1 with i32 %r;
    i32* %0 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %47 with i32 0;
    i1 %48 = scmp eq i32 %bitround, i32 -1;
    cbr i1 %48(prob = 0.5), ^b1, ^b;
^b:
    i32 %49 = add i32 %l, i32 1;
    i1 %50 = scmp ge i32 %49, i32 %r;
    ubr ^b1;
^b1:
    i1 %51 = phi [^b, i1 %50] [^entry, i1 true];
    cbr i1 %51(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %52 = load i32* %l1;
    store i32* %i1 with i32 %52;
    i32 %53 = load i32* %r1;
    i1 %54 = scmp lt i32 %52, i32 %53;
    cbr i1 %54(prob = 0.97), ^indirect, ^b4;
^b3:
    ret;
^indirect:
    i32* %55 = load i32** %a1;
    i32 %56 = load i32* %bitround1;
    ubr ^while.body;
^b4:
    i32 %57 = phi [^indirect1, i32 %83] [^b2, i32 %52];
    i32* %58 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32* %60 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %57, i32 %61;
    store i32* %59 with i32 %62;
    ubr ^while.body1;
^while.body:
    i32 %63 = phi [^while.body, i32 %70] [^indirect, i32 %52];
    i32* %64 = getelementptr &(i32* %55)[i32 %63];
    i32 %65 = load i32* %64;
    i32 %66 = call (i32, i32) -> i32 @getNumPos(i32 %65, i32 %56);
    i32* %67 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %66];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %68, i32 1;
    store i32* %67 with i32 %69;
    i32 %70 = add i32 %63, i32 1;
    store i32* %i1 with i32 %70;
    i1 %71 = scmp lt i32 %70, i32 %53;
    cbr i1 %71(prob = 0.97), ^while.body, ^indirect1;
^while.body1:
    i32 %72 = phi [^while.body1, i32 %81] [^b4, i32 1];
    i32* %73 = getelementptr &([16 * i32]* %head)[i64 0][i32 %72];
    i32 %74 = add i32 %72, i32 -1;
    i32* %75 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    store i32* %73 with i32 %76;
    i32* %77 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %72];
    i32* %78 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %72];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %76, i32 %79;
    store i32* %77 with i32 %80;
    i32 %81 = add i32 %72, i32 1;
    i1 %82 = scmp lt i32 %81, i32 16;
    cbr i1 %82(prob = 0.93), ^while.body1, ^b5;
^indirect1:
    i32 %83 = load i32* %l1;
    ubr ^b4;
^b5:
    store i32* %i1 with i32 0;
    ubr ^while.guard;
^while.guard:
    i32 %84 = phi [^b6, i32 %103] [^b5, i32 0];
    i32* %85 = getelementptr &([16 * i32]* %head)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %84];
    i32 %88 = load i32* %87;
    i1 %89 = scmp lt i32 %86, i32 %88;
    cbr i1 %89(prob = 0.97), ^indirect2, ^indirect3;
^indirect2:
    i32 %90 = load i32* %i1;
    i32* %91 = load i32** %a1;
    ubr ^while.body2;
^indirect3:
    i32 %92 = load i32* %i1;
    ubr ^b6;
^while.body2:
    i32 %93 = phi [^b8, i32 %141] [^indirect2, i32 %90];
    i32* %94 = phi [^b8, i32* %139] [^indirect2, i32* %91];
    i32* %95 = getelementptr &([16 * i32]* %head)[i64 0][i32 %93];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %94)[i32 %96];
    i32 %98 = load i32* %97;
    store i32* %v with i32 %98;
    i32 %99 = load i32* %bitround1;
    i32 %100 = call (i32, i32) -> i32 @getNumPos(i32 %98, i32 %99);
    i1 %101 = scmp neq i32 %100, i32 %93;
    cbr i1 %101(prob = 0.97), ^indirect4, ^indirect5;
^b6:
    i32 %102 = phi [^b8, i32 %141] [^indirect3, i32 %92];
    i32 %103 = add i32 %102, i32 1;
    store i32* %i1 with i32 %103;
    i1 %104 = scmp lt i32 %103, i32 16;
    cbr i1 %104(prob = 0.97), ^while.guard, ^b7;
^indirect4:
    i32* %105 = load i32** %a1;
    ubr ^while.body3;
^indirect5:
    i32 %106 = load i32* %i1;
    ubr ^b8;
^b7:
    i32 %107 = load i32* %l1;
    i32* %108 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32* %110 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %107, i32 %111;
    store i32* %109 with i32 %112;
    store i32* %i with i32 0;
    ubr ^while.body4;
^while.body3:
    i32 %113 = phi [^while.body3, i32 %126] [^indirect4, i32 %99];
    i32 %114 = phi [^while.body3, i32 %131] [^indirect4, i32 %98];
    store i32* %t with i32 %114;
    i32 %115 = call (i32, i32) -> i32 @getNumPos(i32 %114, i32 %113);
    i32* %116 = getelementptr &([16 * i32]* %head)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %105)[i32 %117];
    i32 %119 = load i32* %118;
    store i32* %v with i32 %119;
    i32 %120 = load i32* %t;
    i32 %121 = call (i32, i32) -> i32 @getNumPos(i32 %120, i32 %113);
    i32* %122 = getelementptr &([16 * i32]* %head)[i64 0][i32 %121];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %105)[i32 %123];
    store i32* %124 with i32 %120;
    i32 %125 = load i32* %t;
    i32 %126 = load i32* %bitround1;
    i32 %127 = call (i32, i32) -> i32 @getNumPos(i32 %125, i32 %126);
    i32* %128 = getelementptr &([16 * i32]* %head)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %129, i32 1;
    store i32* %128 with i32 %130;
    i32 %131 = load i32* %v;
    i32 %132 = call (i32, i32) -> i32 @getNumPos(i32 %131, i32 %126);
    i32 %133 = load i32* %i1;
    i1 %134 = scmp neq i32 %132, i32 %133;
    cbr i1 %134(prob = 0.97), ^while.body3, ^b8;
^b8:
    i32 %135 = phi [^while.body3, i32 %133] [^indirect5, i32 %106];
    i32 %136 = phi [^while.body3, i32 %131] [^indirect5, i32 %98];
    i32* %137 = getelementptr &([16 * i32]* %head)[i64 0][i32 %135];
    i32 %138 = load i32* %137;
    i32* %139 = load i32** %a1;
    i32* %140 = getelementptr &(i32* %139)[i32 %138];
    store i32* %140 with i32 %136;
    i32 %141 = load i32* %i1;
    i32* %142 = getelementptr &([16 * i32]* %head)[i64 0][i32 %141];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %143, i32 1;
    store i32* %142 with i32 %144;
    i32* %145 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %141];
    i32 %146 = load i32* %145;
    i1 %147 = scmp lt i32 %144, i32 %146;
    cbr i1 %147(prob = 0.97), ^while.body2, ^b6;
^while.body4:
    i32 %148 = phi [^b9, i32 %169] [^b7, i32 0];
    i1 %149 = scmp gt i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^if.then, ^indirect6;
^if.then:
    i32 %150 = load i32* %i;
    i32* %151 = getelementptr &([16 * i32]* %head)[i64 0][i32 %150];
    i32 %152 = add i32 %150, i32 -1;
    i32* %153 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %152];
    i32 %154 = load i32* %153;
    store i32* %151 with i32 %154;
    i32* %155 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %150];
    i32* %156 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %150];
    i32 %157 = load i32* %156;
    i32 %158 = add i32 %154, i32 %157;
    store i32* %155 with i32 %158;
    ubr ^b9;
^indirect6:
    i32 %159 = load i32* %i;
    ubr ^b9;
^b9:
    i32 %160 = phi [^if.then, i32 %150] [^indirect6, i32 %159];
    i32 %161 = load i32* %bitround1;
    i32 %162 = add i32 %161, i32 -1;
    i32* %163 = load i32** %a1;
    i32* %164 = getelementptr &([16 * i32]* %head)[i64 0][i32 %160];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %160];
    i32 %167 = load i32* %166;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %162, i32* %163, i32 %165, i32 %167);
    i32 %168 = load i32* %i;
    i32 %169 = add i32 %168, i32 1;
    store i32* %i with i32 %169;
    i1 %170 = scmp lt i32 %169, i32 16;
    cbr i1 %170(prob = 0.97), ^while.body4, ^b3;
}
internal [30000010 * i32]* @a;
internal i32* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1);
    i32 %2 = load i32* %n;
    i1 %3 = scmp gt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^indirect, ^indirect1;
^indirect:
    i32 %4 = load i32* @ans;
    ubr ^while.body;
^indirect1:
    i32 %5 = load i32* @ans;
    ubr ^b;
^while.body:
    i32 %6 = phi [^while.body, i32 %13] [^indirect, i32 %4];
    i32 %7 = phi [^while.body, i32 %14] [^indirect, i32 0];
    i32* %8 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %7];
    i32 %9 = load i32* %8;
    i32 %10 = add i32 %7, i32 2;
    i32 %11 = srem i32 %9, i32 %10;
    i32 %12 = mul i32 %7, i32 %11;
    i32 %13 = add i32 %6, i32 %12;
    store i32* @ans with i32 %13;
    i32 %14 = add i32 %7, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %2;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
^b:
    i32 %16 = phi [^while.body, i32 %13] [^indirect1, i32 %5];
    i1 %17 = scmp lt i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^indirect2;
^if.then:
    i32 %18 = load i32* @ans;
    i32 %19 = neg i32 %18;
    store i32* @ans with i32 %19;
    ubr ^b1;
^indirect2:
    i32 %20 = load i32* @ans;
    ubr ^b1;
^b1:
    i32 %21 = phi [^if.then, i32 %19] [^indirect2, i32 %20];
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %21);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
