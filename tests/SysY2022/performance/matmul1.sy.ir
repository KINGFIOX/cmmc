internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a, align 8;
internal [1000 * [1000 * i32]]* @b, align 8 { Flexible };
internal [1000 * [1000 * i32]]* @c, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [12 * i8]* %0 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_2 to [12 * i8]*;
    [1000 * i32]** %1 = ptradd [12 * i8]* %0, i32 0;
    i32* %2 = ptradd [12 * i8]* %0, i32 8;
    [1000 * [1000 * i32]]* %3 = ptrcast [1000 * [1000 * i32]]* @a to [1000 * [1000 * i32]]*;
    [1000 * [1000 * i32]]* %4 = ptrcast [1000 * [1000 * i32]]* @c to [1000 * [1000 * i32]]*;
    i8* %5 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b1, i32 %14];
    i1 %7 = icmp slt i32 %6, i32 1000;
    cbr i1 %7(prob = 0.984615), ^while.body, ^b;
  ^b:
    call (i32) -> void @starttime(i32 23);
    i8* %8 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %8);
    i8* %9 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %9);
    ubr ^while.body1;
  ^while.body:
    [1000 * i32]* %10 = getelementptr &([1000 * [1000 * i32]]* %3)[i64 0][i32 %6];
    i32* %11 = getelementptr &([1000 * i32]* %10)[i64 0][i64 0];
    i32 %12 = call (i32*) -> i32 @getarray(i32* %11);
    i1 %13 = icmp neq i32 %12, i32 1000;
    cbr i1 %13(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %14 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %15 = phi [^b, i32 0] [^while.body3, i32 %334];
    [1000 * i32]* %16 = getelementptr &([1000 * [1000 * i32]]* %4)[i64 0][i32 %15];
    ubr ^while.body2;
  ^b2:
    i32 %17 = phi [^while.body, i32 %12] [^b3, i32 0];
    ret i32 %17;
  ^while.body2:
    i32 %18 = phi [^while.body1, i32 0] [^while.body2, i32 %212];
    i32 %19 = phi [^while.body1, i32 2147483647] [^while.body2, i32 %211];
    i32* %20 = getelementptr &([1000 * i32]* %16)[i64 0][i32 %18];
    i32 %21 = load i32* %20;
    i32 %22 = smin i32 %19, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = smin i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %20)[i64 2];
    i32 %27 = load i32* %26;
    i32 %28 = smin i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %20)[i64 3];
    i32 %30 = load i32* %29;
    i32 %31 = smin i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %20)[i64 4];
    i32 %33 = load i32* %32;
    i32 %34 = smin i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %20)[i64 5];
    i32 %36 = load i32* %35;
    i32 %37 = smin i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %20)[i64 6];
    i32 %39 = load i32* %38;
    i32 %40 = smin i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %20)[i64 7];
    i32 %42 = load i32* %41;
    i32 %43 = smin i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %20)[i64 8];
    i32 %45 = load i32* %44;
    i32 %46 = smin i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %20)[i64 9];
    i32 %48 = load i32* %47;
    i32 %49 = smin i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %20)[i64 10];
    i32 %51 = load i32* %50;
    i32 %52 = smin i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %20)[i64 11];
    i32 %54 = load i32* %53;
    i32 %55 = smin i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %20)[i64 12];
    i32 %57 = load i32* %56;
    i32 %58 = smin i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %20)[i64 13];
    i32 %60 = load i32* %59;
    i32 %61 = smin i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %20)[i64 14];
    i32 %63 = load i32* %62;
    i32 %64 = smin i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %20)[i64 15];
    i32 %66 = load i32* %65;
    i32 %67 = smin i32 %64, i32 %66;
    i32* %68 = getelementptr &(i32* %20)[i64 16];
    i32 %69 = load i32* %68;
    i32 %70 = smin i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %20)[i64 17];
    i32 %72 = load i32* %71;
    i32 %73 = smin i32 %70, i32 %72;
    i32* %74 = getelementptr &(i32* %20)[i64 18];
    i32 %75 = load i32* %74;
    i32 %76 = smin i32 %73, i32 %75;
    i32* %77 = getelementptr &(i32* %20)[i64 19];
    i32 %78 = load i32* %77;
    i32 %79 = smin i32 %76, i32 %78;
    i32* %80 = getelementptr &(i32* %20)[i64 20];
    i32 %81 = load i32* %80;
    i32 %82 = smin i32 %79, i32 %81;
    i32* %83 = getelementptr &(i32* %20)[i64 21];
    i32 %84 = load i32* %83;
    i32 %85 = smin i32 %82, i32 %84;
    i32* %86 = getelementptr &(i32* %20)[i64 22];
    i32 %87 = load i32* %86;
    i32 %88 = smin i32 %85, i32 %87;
    i32* %89 = getelementptr &(i32* %20)[i64 23];
    i32 %90 = load i32* %89;
    i32 %91 = smin i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %20)[i64 24];
    i32 %93 = load i32* %92;
    i32 %94 = smin i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %20)[i64 25];
    i32 %96 = load i32* %95;
    i32 %97 = smin i32 %94, i32 %96;
    i32* %98 = getelementptr &(i32* %20)[i64 26];
    i32 %99 = load i32* %98;
    i32 %100 = smin i32 %97, i32 %99;
    i32* %101 = getelementptr &(i32* %20)[i64 27];
    i32 %102 = load i32* %101;
    i32 %103 = smin i32 %100, i32 %102;
    i32* %104 = getelementptr &(i32* %20)[i64 28];
    i32 %105 = load i32* %104;
    i32 %106 = smin i32 %103, i32 %105;
    i32* %107 = getelementptr &(i32* %20)[i64 29];
    i32 %108 = load i32* %107;
    i32 %109 = smin i32 %106, i32 %108;
    i32* %110 = getelementptr &(i32* %20)[i64 30];
    i32 %111 = load i32* %110;
    i32 %112 = smin i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %20)[i64 31];
    i32 %114 = load i32* %113;
    i32 %115 = smin i32 %112, i32 %114;
    i32* %116 = getelementptr &(i32* %20)[i64 32];
    i32 %117 = load i32* %116;
    i32 %118 = smin i32 %115, i32 %117;
    i32* %119 = getelementptr &(i32* %20)[i64 33];
    i32 %120 = load i32* %119;
    i32 %121 = smin i32 %118, i32 %120;
    i32* %122 = getelementptr &(i32* %20)[i64 34];
    i32 %123 = load i32* %122;
    i32 %124 = smin i32 %121, i32 %123;
    i32* %125 = getelementptr &(i32* %20)[i64 35];
    i32 %126 = load i32* %125;
    i32 %127 = smin i32 %124, i32 %126;
    i32* %128 = getelementptr &(i32* %20)[i64 36];
    i32 %129 = load i32* %128;
    i32 %130 = smin i32 %127, i32 %129;
    i32* %131 = getelementptr &(i32* %20)[i64 37];
    i32 %132 = load i32* %131;
    i32 %133 = smin i32 %130, i32 %132;
    i32* %134 = getelementptr &(i32* %20)[i64 38];
    i32 %135 = load i32* %134;
    i32 %136 = smin i32 %133, i32 %135;
    i32* %137 = getelementptr &(i32* %20)[i64 39];
    i32 %138 = load i32* %137;
    i32 %139 = smin i32 %136, i32 %138;
    i32* %140 = getelementptr &(i32* %20)[i64 40];
    i32 %141 = load i32* %140;
    i32 %142 = smin i32 %139, i32 %141;
    i32* %143 = getelementptr &(i32* %20)[i64 41];
    i32 %144 = load i32* %143;
    i32 %145 = smin i32 %142, i32 %144;
    i32* %146 = getelementptr &(i32* %20)[i64 42];
    i32 %147 = load i32* %146;
    i32 %148 = smin i32 %145, i32 %147;
    i32* %149 = getelementptr &(i32* %20)[i64 43];
    i32 %150 = load i32* %149;
    i32 %151 = smin i32 %148, i32 %150;
    i32* %152 = getelementptr &(i32* %20)[i64 44];
    i32 %153 = load i32* %152;
    i32 %154 = smin i32 %151, i32 %153;
    i32* %155 = getelementptr &(i32* %20)[i64 45];
    i32 %156 = load i32* %155;
    i32 %157 = smin i32 %154, i32 %156;
    i32* %158 = getelementptr &(i32* %20)[i64 46];
    i32 %159 = load i32* %158;
    i32 %160 = smin i32 %157, i32 %159;
    i32* %161 = getelementptr &(i32* %20)[i64 47];
    i32 %162 = load i32* %161;
    i32 %163 = smin i32 %160, i32 %162;
    i32* %164 = getelementptr &(i32* %20)[i64 48];
    i32 %165 = load i32* %164;
    i32 %166 = smin i32 %163, i32 %165;
    i32* %167 = getelementptr &(i32* %20)[i64 49];
    i32 %168 = load i32* %167;
    i32 %169 = smin i32 %166, i32 %168;
    i32* %170 = getelementptr &(i32* %20)[i64 50];
    i32 %171 = load i32* %170;
    i32 %172 = smin i32 %169, i32 %171;
    i32* %173 = getelementptr &(i32* %20)[i64 51];
    i32 %174 = load i32* %173;
    i32 %175 = smin i32 %172, i32 %174;
    i32* %176 = getelementptr &(i32* %20)[i64 52];
    i32 %177 = load i32* %176;
    i32 %178 = smin i32 %175, i32 %177;
    i32* %179 = getelementptr &(i32* %20)[i64 53];
    i32 %180 = load i32* %179;
    i32 %181 = smin i32 %178, i32 %180;
    i32* %182 = getelementptr &(i32* %20)[i64 54];
    i32 %183 = load i32* %182;
    i32 %184 = smin i32 %181, i32 %183;
    i32* %185 = getelementptr &(i32* %20)[i64 55];
    i32 %186 = load i32* %185;
    i32 %187 = smin i32 %184, i32 %186;
    i32* %188 = getelementptr &(i32* %20)[i64 56];
    i32 %189 = load i32* %188;
    i32 %190 = smin i32 %187, i32 %189;
    i32* %191 = getelementptr &(i32* %20)[i64 57];
    i32 %192 = load i32* %191;
    i32 %193 = smin i32 %190, i32 %192;
    i32* %194 = getelementptr &(i32* %20)[i64 58];
    i32 %195 = load i32* %194;
    i32 %196 = smin i32 %193, i32 %195;
    i32* %197 = getelementptr &(i32* %20)[i64 59];
    i32 %198 = load i32* %197;
    i32 %199 = smin i32 %196, i32 %198;
    i32* %200 = getelementptr &(i32* %20)[i64 60];
    i32 %201 = load i32* %200;
    i32 %202 = smin i32 %199, i32 %201;
    i32* %203 = getelementptr &(i32* %20)[i64 61];
    i32 %204 = load i32* %203;
    i32 %205 = smin i32 %202, i32 %204;
    i32* %206 = getelementptr &(i32* %20)[i64 62];
    i32 %207 = load i32* %206;
    i32 %208 = smin i32 %205, i32 %207;
    i32* %209 = getelementptr &(i32* %20)[i64 63];
    i32 %210 = load i32* %209;
    i32 %211 = smin i32 %208, i32 %210;
    i32 %212 = add i32 %18, i32 64;
    i1 %213 = icmp slt i32 %212, i32 960;
    cbr i1 %213(prob = 0.933333), ^while.body2, ^while.body3;
  ^while.body3:
    i32* %214 = getelementptr &(i32* %20)[i64 64];
    i32 %215 = load i32* %214;
    i32 %216 = smin i32 %211, i32 %215;
    i32* %217 = getelementptr &(i32* %20)[i64 65];
    i32 %218 = load i32* %217;
    i32 %219 = smin i32 %216, i32 %218;
    i32* %220 = getelementptr &(i32* %20)[i64 66];
    i32 %221 = load i32* %220;
    i32 %222 = smin i32 %219, i32 %221;
    i32* %223 = getelementptr &(i32* %20)[i64 67];
    i32 %224 = load i32* %223;
    i32 %225 = smin i32 %222, i32 %224;
    i32* %226 = getelementptr &(i32* %20)[i64 68];
    i32 %227 = load i32* %226;
    i32 %228 = smin i32 %225, i32 %227;
    i32* %229 = getelementptr &(i32* %20)[i64 69];
    i32 %230 = load i32* %229;
    i32 %231 = smin i32 %228, i32 %230;
    i32* %232 = getelementptr &(i32* %20)[i64 70];
    i32 %233 = load i32* %232;
    i32 %234 = smin i32 %231, i32 %233;
    i32* %235 = getelementptr &(i32* %20)[i64 71];
    i32 %236 = load i32* %235;
    i32 %237 = smin i32 %234, i32 %236;
    i32* %238 = getelementptr &(i32* %20)[i64 72];
    i32 %239 = load i32* %238;
    i32 %240 = smin i32 %237, i32 %239;
    i32* %241 = getelementptr &(i32* %20)[i64 73];
    i32 %242 = load i32* %241;
    i32 %243 = smin i32 %240, i32 %242;
    i32* %244 = getelementptr &(i32* %20)[i64 74];
    i32 %245 = load i32* %244;
    i32 %246 = smin i32 %243, i32 %245;
    i32* %247 = getelementptr &(i32* %20)[i64 75];
    i32 %248 = load i32* %247;
    i32 %249 = smin i32 %246, i32 %248;
    i32* %250 = getelementptr &(i32* %20)[i64 76];
    i32 %251 = load i32* %250;
    i32 %252 = smin i32 %249, i32 %251;
    i32* %253 = getelementptr &(i32* %20)[i64 77];
    i32 %254 = load i32* %253;
    i32 %255 = smin i32 %252, i32 %254;
    i32* %256 = getelementptr &(i32* %20)[i64 78];
    i32 %257 = load i32* %256;
    i32 %258 = smin i32 %255, i32 %257;
    i32* %259 = getelementptr &(i32* %20)[i64 79];
    i32 %260 = load i32* %259;
    i32 %261 = smin i32 %258, i32 %260;
    i32* %262 = getelementptr &(i32* %20)[i64 80];
    i32 %263 = load i32* %262;
    i32 %264 = smin i32 %261, i32 %263;
    i32* %265 = getelementptr &(i32* %20)[i64 81];
    i32 %266 = load i32* %265;
    i32 %267 = smin i32 %264, i32 %266;
    i32* %268 = getelementptr &(i32* %20)[i64 82];
    i32 %269 = load i32* %268;
    i32 %270 = smin i32 %267, i32 %269;
    i32* %271 = getelementptr &(i32* %20)[i64 83];
    i32 %272 = load i32* %271;
    i32 %273 = smin i32 %270, i32 %272;
    i32* %274 = getelementptr &(i32* %20)[i64 84];
    i32 %275 = load i32* %274;
    i32 %276 = smin i32 %273, i32 %275;
    i32* %277 = getelementptr &(i32* %20)[i64 85];
    i32 %278 = load i32* %277;
    i32 %279 = smin i32 %276, i32 %278;
    i32* %280 = getelementptr &(i32* %20)[i64 86];
    i32 %281 = load i32* %280;
    i32 %282 = smin i32 %279, i32 %281;
    i32* %283 = getelementptr &(i32* %20)[i64 87];
    i32 %284 = load i32* %283;
    i32 %285 = smin i32 %282, i32 %284;
    i32* %286 = getelementptr &(i32* %20)[i64 88];
    i32 %287 = load i32* %286;
    i32 %288 = smin i32 %285, i32 %287;
    i32* %289 = getelementptr &(i32* %20)[i64 89];
    i32 %290 = load i32* %289;
    i32 %291 = smin i32 %288, i32 %290;
    i32* %292 = getelementptr &(i32* %20)[i64 90];
    i32 %293 = load i32* %292;
    i32 %294 = smin i32 %291, i32 %293;
    i32* %295 = getelementptr &(i32* %20)[i64 91];
    i32 %296 = load i32* %295;
    i32 %297 = smin i32 %294, i32 %296;
    i32* %298 = getelementptr &(i32* %20)[i64 92];
    i32 %299 = load i32* %298;
    i32 %300 = smin i32 %297, i32 %299;
    i32* %301 = getelementptr &(i32* %20)[i64 93];
    i32 %302 = load i32* %301;
    i32 %303 = smin i32 %300, i32 %302;
    i32* %304 = getelementptr &(i32* %20)[i64 94];
    i32 %305 = load i32* %304;
    i32 %306 = smin i32 %303, i32 %305;
    i32* %307 = getelementptr &(i32* %20)[i64 95];
    i32 %308 = load i32* %307;
    i32 %309 = smin i32 %306, i32 %308;
    i32* %310 = getelementptr &(i32* %20)[i64 96];
    i32 %311 = load i32* %310;
    i32 %312 = smin i32 %309, i32 %311;
    i32* %313 = getelementptr &(i32* %20)[i64 97];
    i32 %314 = load i32* %313;
    i32 %315 = smin i32 %312, i32 %314;
    i32* %316 = getelementptr &(i32* %20)[i64 98];
    i32 %317 = load i32* %316;
    i32 %318 = smin i32 %315, i32 %317;
    i32* %319 = getelementptr &(i32* %20)[i64 99];
    i32 %320 = load i32* %319;
    i32 %321 = smin i32 %318, i32 %320;
    i32* %322 = getelementptr &(i32* %20)[i64 100];
    i32 %323 = load i32* %322;
    i32 %324 = smin i32 %321, i32 %323;
    i32* %325 = getelementptr &(i32* %20)[i64 101];
    i32 %326 = load i32* %325;
    i32 %327 = smin i32 %324, i32 %326;
    i32* %328 = getelementptr &(i32* %20)[i64 102];
    i32 %329 = load i32* %328;
    i32 %330 = smin i32 %327, i32 %329;
    i32* %331 = getelementptr &(i32* %20)[i64 103];
    i32 %332 = load i32* %331;
    i32 %333 = smin i32 %330, i32 %332;
    store [1000 * i32]** %1 with [1000 * i32]* %16;
    store i32* %2 with i32 %333;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %5);
    i32 %334 = add i32 %15, i32 1;
    i1 %335 = icmp slt i32 %334, i32 1000;
    cbr i1 %335(prob = 0.999), ^while.body1, ^while.body4;
  ^while.body4:
    i32 %336 = phi [^while.body3, i32 0] [^while.body6, i32 %461];
    [1000 * i32]* %337 = getelementptr &([1000 * [1000 * i32]]* %4)[i64 0][i32 %336];
    ubr ^while.body5;
  ^while.body5:
    i32 %338 = phi [^while.body4, i32 0] [^while.body5, i32 %419];
    [1000 * i32]* %339 = getelementptr &([1000 * [1000 * i32]]* %4)[i64 0][i32 %338];
    i32* %340 = getelementptr &([1000 * i32]* %339)[i64 0][i32 %336];
    i32 %341 = load i32* %340;
    i32 %342 = neg i32 %341;
    i32* %343 = getelementptr &([1000 * i32]* %337)[i64 0][i32 %338];
    store i32* %343 with i32 %342;
    [1000 * i32]* %344 = getelementptr &([1000 * i32]* %339)[i64 1];
    i32* %345 = getelementptr &([1000 * i32]* %344)[i64 0][i32 %336];
    i32 %346 = load i32* %345;
    i32 %347 = neg i32 %346;
    i32* %348 = getelementptr &(i32* %343)[i64 1];
    store i32* %348 with i32 %347;
    [1000 * i32]* %349 = getelementptr &([1000 * i32]* %339)[i64 2];
    i32* %350 = getelementptr &([1000 * i32]* %349)[i64 0][i32 %336];
    i32 %351 = load i32* %350;
    i32 %352 = neg i32 %351;
    i32* %353 = getelementptr &(i32* %343)[i64 2];
    store i32* %353 with i32 %352;
    [1000 * i32]* %354 = getelementptr &([1000 * i32]* %339)[i64 3];
    i32* %355 = getelementptr &([1000 * i32]* %354)[i64 0][i32 %336];
    i32 %356 = load i32* %355;
    i32 %357 = neg i32 %356;
    i32* %358 = getelementptr &(i32* %343)[i64 3];
    store i32* %358 with i32 %357;
    [1000 * i32]* %359 = getelementptr &([1000 * i32]* %339)[i64 4];
    i32* %360 = getelementptr &([1000 * i32]* %359)[i64 0][i32 %336];
    i32 %361 = load i32* %360;
    i32 %362 = neg i32 %361;
    i32* %363 = getelementptr &(i32* %343)[i64 4];
    store i32* %363 with i32 %362;
    [1000 * i32]* %364 = getelementptr &([1000 * i32]* %339)[i64 5];
    i32* %365 = getelementptr &([1000 * i32]* %364)[i64 0][i32 %336];
    i32 %366 = load i32* %365;
    i32 %367 = neg i32 %366;
    i32* %368 = getelementptr &(i32* %343)[i64 5];
    store i32* %368 with i32 %367;
    [1000 * i32]* %369 = getelementptr &([1000 * i32]* %339)[i64 6];
    i32* %370 = getelementptr &([1000 * i32]* %369)[i64 0][i32 %336];
    i32 %371 = load i32* %370;
    i32 %372 = neg i32 %371;
    i32* %373 = getelementptr &(i32* %343)[i64 6];
    store i32* %373 with i32 %372;
    [1000 * i32]* %374 = getelementptr &([1000 * i32]* %339)[i64 7];
    i32* %375 = getelementptr &([1000 * i32]* %374)[i64 0][i32 %336];
    i32 %376 = load i32* %375;
    i32 %377 = neg i32 %376;
    i32* %378 = getelementptr &(i32* %343)[i64 7];
    store i32* %378 with i32 %377;
    [1000 * i32]* %379 = getelementptr &([1000 * i32]* %339)[i64 8];
    i32* %380 = getelementptr &([1000 * i32]* %379)[i64 0][i32 %336];
    i32 %381 = load i32* %380;
    i32 %382 = neg i32 %381;
    i32* %383 = getelementptr &(i32* %343)[i64 8];
    store i32* %383 with i32 %382;
    [1000 * i32]* %384 = getelementptr &([1000 * i32]* %339)[i64 9];
    i32* %385 = getelementptr &([1000 * i32]* %384)[i64 0][i32 %336];
    i32 %386 = load i32* %385;
    i32 %387 = neg i32 %386;
    i32* %388 = getelementptr &(i32* %343)[i64 9];
    store i32* %388 with i32 %387;
    [1000 * i32]* %389 = getelementptr &([1000 * i32]* %339)[i64 10];
    i32* %390 = getelementptr &([1000 * i32]* %389)[i64 0][i32 %336];
    i32 %391 = load i32* %390;
    i32 %392 = neg i32 %391;
    i32* %393 = getelementptr &(i32* %343)[i64 10];
    store i32* %393 with i32 %392;
    [1000 * i32]* %394 = getelementptr &([1000 * i32]* %339)[i64 11];
    i32* %395 = getelementptr &([1000 * i32]* %394)[i64 0][i32 %336];
    i32 %396 = load i32* %395;
    i32 %397 = neg i32 %396;
    i32* %398 = getelementptr &(i32* %343)[i64 11];
    store i32* %398 with i32 %397;
    [1000 * i32]* %399 = getelementptr &([1000 * i32]* %339)[i64 12];
    i32* %400 = getelementptr &([1000 * i32]* %399)[i64 0][i32 %336];
    i32 %401 = load i32* %400;
    i32 %402 = neg i32 %401;
    i32* %403 = getelementptr &(i32* %343)[i64 12];
    store i32* %403 with i32 %402;
    [1000 * i32]* %404 = getelementptr &([1000 * i32]* %339)[i64 13];
    i32* %405 = getelementptr &([1000 * i32]* %404)[i64 0][i32 %336];
    i32 %406 = load i32* %405;
    i32 %407 = neg i32 %406;
    i32* %408 = getelementptr &(i32* %343)[i64 13];
    store i32* %408 with i32 %407;
    [1000 * i32]* %409 = getelementptr &([1000 * i32]* %339)[i64 14];
    i32* %410 = getelementptr &([1000 * i32]* %409)[i64 0][i32 %336];
    i32 %411 = load i32* %410;
    i32 %412 = neg i32 %411;
    i32* %413 = getelementptr &(i32* %343)[i64 14];
    store i32* %413 with i32 %412;
    [1000 * i32]* %414 = getelementptr &([1000 * i32]* %339)[i64 15];
    i32* %415 = getelementptr &([1000 * i32]* %414)[i64 0][i32 %336];
    i32 %416 = load i32* %415;
    i32 %417 = neg i32 %416;
    i32* %418 = getelementptr &(i32* %343)[i64 15];
    store i32* %418 with i32 %417;
    i32 %419 = add i32 %338, i32 16;
    i1 %420 = icmp slt i32 %419, i32 992;
    cbr i1 %420(prob = 0.983871), ^while.body5, ^while.body6;
  ^while.body6:
    [1000 * i32]* %421 = getelementptr &([1000 * i32]* %339)[i64 16];
    i32* %422 = getelementptr &([1000 * i32]* %421)[i64 0][i32 %336];
    i32 %423 = load i32* %422;
    i32 %424 = neg i32 %423;
    i32* %425 = getelementptr &(i32* %343)[i64 16];
    store i32* %425 with i32 %424;
    [1000 * i32]* %426 = getelementptr &([1000 * i32]* %339)[i64 17];
    i32* %427 = getelementptr &([1000 * i32]* %426)[i64 0][i32 %336];
    i32 %428 = load i32* %427;
    i32 %429 = neg i32 %428;
    i32* %430 = getelementptr &(i32* %343)[i64 17];
    store i32* %430 with i32 %429;
    [1000 * i32]* %431 = getelementptr &([1000 * i32]* %339)[i64 18];
    i32* %432 = getelementptr &([1000 * i32]* %431)[i64 0][i32 %336];
    i32 %433 = load i32* %432;
    i32 %434 = neg i32 %433;
    i32* %435 = getelementptr &(i32* %343)[i64 18];
    store i32* %435 with i32 %434;
    [1000 * i32]* %436 = getelementptr &([1000 * i32]* %339)[i64 19];
    i32* %437 = getelementptr &([1000 * i32]* %436)[i64 0][i32 %336];
    i32 %438 = load i32* %437;
    i32 %439 = neg i32 %438;
    i32* %440 = getelementptr &(i32* %343)[i64 19];
    store i32* %440 with i32 %439;
    [1000 * i32]* %441 = getelementptr &([1000 * i32]* %339)[i64 20];
    i32* %442 = getelementptr &([1000 * i32]* %441)[i64 0][i32 %336];
    i32 %443 = load i32* %442;
    i32 %444 = neg i32 %443;
    i32* %445 = getelementptr &(i32* %343)[i64 20];
    store i32* %445 with i32 %444;
    [1000 * i32]* %446 = getelementptr &([1000 * i32]* %339)[i64 21];
    i32* %447 = getelementptr &([1000 * i32]* %446)[i64 0][i32 %336];
    i32 %448 = load i32* %447;
    i32 %449 = neg i32 %448;
    i32* %450 = getelementptr &(i32* %343)[i64 21];
    store i32* %450 with i32 %449;
    [1000 * i32]* %451 = getelementptr &([1000 * i32]* %339)[i64 22];
    i32* %452 = getelementptr &([1000 * i32]* %451)[i64 0][i32 %336];
    i32 %453 = load i32* %452;
    i32 %454 = neg i32 %453;
    i32* %455 = getelementptr &(i32* %343)[i64 22];
    store i32* %455 with i32 %454;
    [1000 * i32]* %456 = getelementptr &([1000 * i32]* %339)[i64 23];
    i32* %457 = getelementptr &([1000 * i32]* %456)[i64 0][i32 %336];
    i32 %458 = load i32* %457;
    i32 %459 = neg i32 %458;
    i32* %460 = getelementptr &(i32* %343)[i64 23];
    store i32* %460 with i32 %459;
    i32 %461 = add i32 %336, i32 1;
    i1 %462 = icmp slt i32 %461, i32 1000;
    cbr i1 %462(prob = 0.999), ^while.body4, ^prebody;
  ^prebody:
    [16 * i8]* %463 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_3 to [16 * i8]*;
    i32* %464 = ptradd [16 * i8]* %463, i32 0;
    i32* %465 = ptradd [16 * i8]* %463, i32 4;
    [1000 * i32]** %466 = ptradd [16 * i8]* %463, i32 8;
    i8* %467 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    ubr ^while.body7;
  ^while.body7:
    i32 %468 = phi [^prebody, i32 0] [^while.body7, i32 %471];
    i32 %469 = phi [^prebody, i32 0] [^while.body7, i32 %473];
    [1000 * i32]* %470 = getelementptr &([1000 * [1000 * i32]]* %4)[i64 0][i32 %468];
    store i32* %464 with i32 %469;
    store i32* %465 with i32 %469;
    store [1000 * i32]** %466 with [1000 * i32]* %470;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %467);
    i32 %471 = add i32 %468, i32 1;
    i1 %472 = icmp slt i32 %471, i32 1000;
    i32 %473 = load i32* %464;
    cbr i1 %472(prob = 0.999), ^while.body7, ^b3;
  ^b3:
    call (i32) -> void @stoptime(i32 92);
    call (i32) -> void @putint(i32 %473);
    ubr ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [1000 * [1000 * i32]]* %2 = ptrcast [1000 * [1000 * i32]]* @b to [1000 * [1000 * i32]]*;
    [1000 * [1000 * i32]]* %3 = ptrcast [1000 * [1000 * i32]]* @a to [1000 * [1000 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %4 = phi [^b, i32 %0] [^while.body1, i32 %425];
    [1000 * i32]* %5 = getelementptr &([1000 * [1000 * i32]]* %2)[i64 0][i32 %4];
    ubr ^while.body;
  ^while.body:
    i32 %6 = phi [^b1, i32 0] [^while.body, i32 %263];
    [1000 * i32]* %7 = getelementptr &([1000 * [1000 * i32]]* %3)[i64 0][i32 %6];
    i32* %8 = getelementptr &([1000 * i32]* %7)[i64 0][i32 %4];
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &([1000 * i32]* %5)[i64 0][i32 %6];
    store i32* %10 with i32 %9;
    [1000 * i32]* %11 = getelementptr &([1000 * i32]* %7)[i64 1];
    i32* %12 = getelementptr &([1000 * i32]* %11)[i64 0][i32 %4];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(i32* %10)[i64 1];
    store i32* %14 with i32 %13;
    [1000 * i32]* %15 = getelementptr &([1000 * i32]* %7)[i64 2];
    i32* %16 = getelementptr &([1000 * i32]* %15)[i64 0][i32 %4];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &(i32* %10)[i64 2];
    store i32* %18 with i32 %17;
    [1000 * i32]* %19 = getelementptr &([1000 * i32]* %7)[i64 3];
    i32* %20 = getelementptr &([1000 * i32]* %19)[i64 0][i32 %4];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %10)[i64 3];
    store i32* %22 with i32 %21;
    [1000 * i32]* %23 = getelementptr &([1000 * i32]* %7)[i64 4];
    i32* %24 = getelementptr &([1000 * i32]* %23)[i64 0][i32 %4];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %10)[i64 4];
    store i32* %26 with i32 %25;
    [1000 * i32]* %27 = getelementptr &([1000 * i32]* %7)[i64 5];
    i32* %28 = getelementptr &([1000 * i32]* %27)[i64 0][i32 %4];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %10)[i64 5];
    store i32* %30 with i32 %29;
    [1000 * i32]* %31 = getelementptr &([1000 * i32]* %7)[i64 6];
    i32* %32 = getelementptr &([1000 * i32]* %31)[i64 0][i32 %4];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &(i32* %10)[i64 6];
    store i32* %34 with i32 %33;
    [1000 * i32]* %35 = getelementptr &([1000 * i32]* %7)[i64 7];
    i32* %36 = getelementptr &([1000 * i32]* %35)[i64 0][i32 %4];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %10)[i64 7];
    store i32* %38 with i32 %37;
    [1000 * i32]* %39 = getelementptr &([1000 * i32]* %7)[i64 8];
    i32* %40 = getelementptr &([1000 * i32]* %39)[i64 0][i32 %4];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %10)[i64 8];
    store i32* %42 with i32 %41;
    [1000 * i32]* %43 = getelementptr &([1000 * i32]* %7)[i64 9];
    i32* %44 = getelementptr &([1000 * i32]* %43)[i64 0][i32 %4];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %10)[i64 9];
    store i32* %46 with i32 %45;
    [1000 * i32]* %47 = getelementptr &([1000 * i32]* %7)[i64 10];
    i32* %48 = getelementptr &([1000 * i32]* %47)[i64 0][i32 %4];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %10)[i64 10];
    store i32* %50 with i32 %49;
    [1000 * i32]* %51 = getelementptr &([1000 * i32]* %7)[i64 11];
    i32* %52 = getelementptr &([1000 * i32]* %51)[i64 0][i32 %4];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %10)[i64 11];
    store i32* %54 with i32 %53;
    [1000 * i32]* %55 = getelementptr &([1000 * i32]* %7)[i64 12];
    i32* %56 = getelementptr &([1000 * i32]* %55)[i64 0][i32 %4];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %10)[i64 12];
    store i32* %58 with i32 %57;
    [1000 * i32]* %59 = getelementptr &([1000 * i32]* %7)[i64 13];
    i32* %60 = getelementptr &([1000 * i32]* %59)[i64 0][i32 %4];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %10)[i64 13];
    store i32* %62 with i32 %61;
    [1000 * i32]* %63 = getelementptr &([1000 * i32]* %7)[i64 14];
    i32* %64 = getelementptr &([1000 * i32]* %63)[i64 0][i32 %4];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %10)[i64 14];
    store i32* %66 with i32 %65;
    [1000 * i32]* %67 = getelementptr &([1000 * i32]* %7)[i64 15];
    i32* %68 = getelementptr &([1000 * i32]* %67)[i64 0][i32 %4];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %10)[i64 15];
    store i32* %70 with i32 %69;
    [1000 * i32]* %71 = getelementptr &([1000 * i32]* %7)[i64 16];
    i32* %72 = getelementptr &([1000 * i32]* %71)[i64 0][i32 %4];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %10)[i64 16];
    store i32* %74 with i32 %73;
    [1000 * i32]* %75 = getelementptr &([1000 * i32]* %7)[i64 17];
    i32* %76 = getelementptr &([1000 * i32]* %75)[i64 0][i32 %4];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %10)[i64 17];
    store i32* %78 with i32 %77;
    [1000 * i32]* %79 = getelementptr &([1000 * i32]* %7)[i64 18];
    i32* %80 = getelementptr &([1000 * i32]* %79)[i64 0][i32 %4];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %10)[i64 18];
    store i32* %82 with i32 %81;
    [1000 * i32]* %83 = getelementptr &([1000 * i32]* %7)[i64 19];
    i32* %84 = getelementptr &([1000 * i32]* %83)[i64 0][i32 %4];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %10)[i64 19];
    store i32* %86 with i32 %85;
    [1000 * i32]* %87 = getelementptr &([1000 * i32]* %7)[i64 20];
    i32* %88 = getelementptr &([1000 * i32]* %87)[i64 0][i32 %4];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %10)[i64 20];
    store i32* %90 with i32 %89;
    [1000 * i32]* %91 = getelementptr &([1000 * i32]* %7)[i64 21];
    i32* %92 = getelementptr &([1000 * i32]* %91)[i64 0][i32 %4];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %10)[i64 21];
    store i32* %94 with i32 %93;
    [1000 * i32]* %95 = getelementptr &([1000 * i32]* %7)[i64 22];
    i32* %96 = getelementptr &([1000 * i32]* %95)[i64 0][i32 %4];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %10)[i64 22];
    store i32* %98 with i32 %97;
    [1000 * i32]* %99 = getelementptr &([1000 * i32]* %7)[i64 23];
    i32* %100 = getelementptr &([1000 * i32]* %99)[i64 0][i32 %4];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %10)[i64 23];
    store i32* %102 with i32 %101;
    [1000 * i32]* %103 = getelementptr &([1000 * i32]* %7)[i64 24];
    i32* %104 = getelementptr &([1000 * i32]* %103)[i64 0][i32 %4];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %10)[i64 24];
    store i32* %106 with i32 %105;
    [1000 * i32]* %107 = getelementptr &([1000 * i32]* %7)[i64 25];
    i32* %108 = getelementptr &([1000 * i32]* %107)[i64 0][i32 %4];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %10)[i64 25];
    store i32* %110 with i32 %109;
    [1000 * i32]* %111 = getelementptr &([1000 * i32]* %7)[i64 26];
    i32* %112 = getelementptr &([1000 * i32]* %111)[i64 0][i32 %4];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %10)[i64 26];
    store i32* %114 with i32 %113;
    [1000 * i32]* %115 = getelementptr &([1000 * i32]* %7)[i64 27];
    i32* %116 = getelementptr &([1000 * i32]* %115)[i64 0][i32 %4];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %10)[i64 27];
    store i32* %118 with i32 %117;
    [1000 * i32]* %119 = getelementptr &([1000 * i32]* %7)[i64 28];
    i32* %120 = getelementptr &([1000 * i32]* %119)[i64 0][i32 %4];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %10)[i64 28];
    store i32* %122 with i32 %121;
    [1000 * i32]* %123 = getelementptr &([1000 * i32]* %7)[i64 29];
    i32* %124 = getelementptr &([1000 * i32]* %123)[i64 0][i32 %4];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %10)[i64 29];
    store i32* %126 with i32 %125;
    [1000 * i32]* %127 = getelementptr &([1000 * i32]* %7)[i64 30];
    i32* %128 = getelementptr &([1000 * i32]* %127)[i64 0][i32 %4];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %10)[i64 30];
    store i32* %130 with i32 %129;
    [1000 * i32]* %131 = getelementptr &([1000 * i32]* %7)[i64 31];
    i32* %132 = getelementptr &([1000 * i32]* %131)[i64 0][i32 %4];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %10)[i64 31];
    store i32* %134 with i32 %133;
    [1000 * i32]* %135 = getelementptr &([1000 * i32]* %7)[i64 32];
    i32* %136 = getelementptr &([1000 * i32]* %135)[i64 0][i32 %4];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %10)[i64 32];
    store i32* %138 with i32 %137;
    [1000 * i32]* %139 = getelementptr &([1000 * i32]* %7)[i64 33];
    i32* %140 = getelementptr &([1000 * i32]* %139)[i64 0][i32 %4];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %10)[i64 33];
    store i32* %142 with i32 %141;
    [1000 * i32]* %143 = getelementptr &([1000 * i32]* %7)[i64 34];
    i32* %144 = getelementptr &([1000 * i32]* %143)[i64 0][i32 %4];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &(i32* %10)[i64 34];
    store i32* %146 with i32 %145;
    [1000 * i32]* %147 = getelementptr &([1000 * i32]* %7)[i64 35];
    i32* %148 = getelementptr &([1000 * i32]* %147)[i64 0][i32 %4];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %10)[i64 35];
    store i32* %150 with i32 %149;
    [1000 * i32]* %151 = getelementptr &([1000 * i32]* %7)[i64 36];
    i32* %152 = getelementptr &([1000 * i32]* %151)[i64 0][i32 %4];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %10)[i64 36];
    store i32* %154 with i32 %153;
    [1000 * i32]* %155 = getelementptr &([1000 * i32]* %7)[i64 37];
    i32* %156 = getelementptr &([1000 * i32]* %155)[i64 0][i32 %4];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %10)[i64 37];
    store i32* %158 with i32 %157;
    [1000 * i32]* %159 = getelementptr &([1000 * i32]* %7)[i64 38];
    i32* %160 = getelementptr &([1000 * i32]* %159)[i64 0][i32 %4];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %10)[i64 38];
    store i32* %162 with i32 %161;
    [1000 * i32]* %163 = getelementptr &([1000 * i32]* %7)[i64 39];
    i32* %164 = getelementptr &([1000 * i32]* %163)[i64 0][i32 %4];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %10)[i64 39];
    store i32* %166 with i32 %165;
    [1000 * i32]* %167 = getelementptr &([1000 * i32]* %7)[i64 40];
    i32* %168 = getelementptr &([1000 * i32]* %167)[i64 0][i32 %4];
    i32 %169 = load i32* %168;
    i32* %170 = getelementptr &(i32* %10)[i64 40];
    store i32* %170 with i32 %169;
    [1000 * i32]* %171 = getelementptr &([1000 * i32]* %7)[i64 41];
    i32* %172 = getelementptr &([1000 * i32]* %171)[i64 0][i32 %4];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %10)[i64 41];
    store i32* %174 with i32 %173;
    [1000 * i32]* %175 = getelementptr &([1000 * i32]* %7)[i64 42];
    i32* %176 = getelementptr &([1000 * i32]* %175)[i64 0][i32 %4];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %10)[i64 42];
    store i32* %178 with i32 %177;
    [1000 * i32]* %179 = getelementptr &([1000 * i32]* %7)[i64 43];
    i32* %180 = getelementptr &([1000 * i32]* %179)[i64 0][i32 %4];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &(i32* %10)[i64 43];
    store i32* %182 with i32 %181;
    [1000 * i32]* %183 = getelementptr &([1000 * i32]* %7)[i64 44];
    i32* %184 = getelementptr &([1000 * i32]* %183)[i64 0][i32 %4];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %10)[i64 44];
    store i32* %186 with i32 %185;
    [1000 * i32]* %187 = getelementptr &([1000 * i32]* %7)[i64 45];
    i32* %188 = getelementptr &([1000 * i32]* %187)[i64 0][i32 %4];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %10)[i64 45];
    store i32* %190 with i32 %189;
    [1000 * i32]* %191 = getelementptr &([1000 * i32]* %7)[i64 46];
    i32* %192 = getelementptr &([1000 * i32]* %191)[i64 0][i32 %4];
    i32 %193 = load i32* %192;
    i32* %194 = getelementptr &(i32* %10)[i64 46];
    store i32* %194 with i32 %193;
    [1000 * i32]* %195 = getelementptr &([1000 * i32]* %7)[i64 47];
    i32* %196 = getelementptr &([1000 * i32]* %195)[i64 0][i32 %4];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %10)[i64 47];
    store i32* %198 with i32 %197;
    [1000 * i32]* %199 = getelementptr &([1000 * i32]* %7)[i64 48];
    i32* %200 = getelementptr &([1000 * i32]* %199)[i64 0][i32 %4];
    i32 %201 = load i32* %200;
    i32* %202 = getelementptr &(i32* %10)[i64 48];
    store i32* %202 with i32 %201;
    [1000 * i32]* %203 = getelementptr &([1000 * i32]* %7)[i64 49];
    i32* %204 = getelementptr &([1000 * i32]* %203)[i64 0][i32 %4];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %10)[i64 49];
    store i32* %206 with i32 %205;
    [1000 * i32]* %207 = getelementptr &([1000 * i32]* %7)[i64 50];
    i32* %208 = getelementptr &([1000 * i32]* %207)[i64 0][i32 %4];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %10)[i64 50];
    store i32* %210 with i32 %209;
    [1000 * i32]* %211 = getelementptr &([1000 * i32]* %7)[i64 51];
    i32* %212 = getelementptr &([1000 * i32]* %211)[i64 0][i32 %4];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %10)[i64 51];
    store i32* %214 with i32 %213;
    [1000 * i32]* %215 = getelementptr &([1000 * i32]* %7)[i64 52];
    i32* %216 = getelementptr &([1000 * i32]* %215)[i64 0][i32 %4];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &(i32* %10)[i64 52];
    store i32* %218 with i32 %217;
    [1000 * i32]* %219 = getelementptr &([1000 * i32]* %7)[i64 53];
    i32* %220 = getelementptr &([1000 * i32]* %219)[i64 0][i32 %4];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %10)[i64 53];
    store i32* %222 with i32 %221;
    [1000 * i32]* %223 = getelementptr &([1000 * i32]* %7)[i64 54];
    i32* %224 = getelementptr &([1000 * i32]* %223)[i64 0][i32 %4];
    i32 %225 = load i32* %224;
    i32* %226 = getelementptr &(i32* %10)[i64 54];
    store i32* %226 with i32 %225;
    [1000 * i32]* %227 = getelementptr &([1000 * i32]* %7)[i64 55];
    i32* %228 = getelementptr &([1000 * i32]* %227)[i64 0][i32 %4];
    i32 %229 = load i32* %228;
    i32* %230 = getelementptr &(i32* %10)[i64 55];
    store i32* %230 with i32 %229;
    [1000 * i32]* %231 = getelementptr &([1000 * i32]* %7)[i64 56];
    i32* %232 = getelementptr &([1000 * i32]* %231)[i64 0][i32 %4];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &(i32* %10)[i64 56];
    store i32* %234 with i32 %233;
    [1000 * i32]* %235 = getelementptr &([1000 * i32]* %7)[i64 57];
    i32* %236 = getelementptr &([1000 * i32]* %235)[i64 0][i32 %4];
    i32 %237 = load i32* %236;
    i32* %238 = getelementptr &(i32* %10)[i64 57];
    store i32* %238 with i32 %237;
    [1000 * i32]* %239 = getelementptr &([1000 * i32]* %7)[i64 58];
    i32* %240 = getelementptr &([1000 * i32]* %239)[i64 0][i32 %4];
    i32 %241 = load i32* %240;
    i32* %242 = getelementptr &(i32* %10)[i64 58];
    store i32* %242 with i32 %241;
    [1000 * i32]* %243 = getelementptr &([1000 * i32]* %7)[i64 59];
    i32* %244 = getelementptr &([1000 * i32]* %243)[i64 0][i32 %4];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %10)[i64 59];
    store i32* %246 with i32 %245;
    [1000 * i32]* %247 = getelementptr &([1000 * i32]* %7)[i64 60];
    i32* %248 = getelementptr &([1000 * i32]* %247)[i64 0][i32 %4];
    i32 %249 = load i32* %248;
    i32* %250 = getelementptr &(i32* %10)[i64 60];
    store i32* %250 with i32 %249;
    [1000 * i32]* %251 = getelementptr &([1000 * i32]* %7)[i64 61];
    i32* %252 = getelementptr &([1000 * i32]* %251)[i64 0][i32 %4];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &(i32* %10)[i64 61];
    store i32* %254 with i32 %253;
    [1000 * i32]* %255 = getelementptr &([1000 * i32]* %7)[i64 62];
    i32* %256 = getelementptr &([1000 * i32]* %255)[i64 0][i32 %4];
    i32 %257 = load i32* %256;
    i32* %258 = getelementptr &(i32* %10)[i64 62];
    store i32* %258 with i32 %257;
    [1000 * i32]* %259 = getelementptr &([1000 * i32]* %7)[i64 63];
    i32* %260 = getelementptr &([1000 * i32]* %259)[i64 0][i32 %4];
    i32 %261 = load i32* %260;
    i32* %262 = getelementptr &(i32* %10)[i64 63];
    store i32* %262 with i32 %261;
    i32 %263 = add i32 %6, i32 64;
    i1 %264 = icmp slt i32 %263, i32 960;
    cbr i1 %264(prob = 0.933333), ^while.body, ^while.body1;
  ^while.body1:
    [1000 * i32]* %265 = getelementptr &([1000 * i32]* %7)[i64 64];
    i32* %266 = getelementptr &([1000 * i32]* %265)[i64 0][i32 %4];
    i32 %267 = load i32* %266;
    i32* %268 = getelementptr &(i32* %10)[i64 64];
    store i32* %268 with i32 %267;
    [1000 * i32]* %269 = getelementptr &([1000 * i32]* %7)[i64 65];
    i32* %270 = getelementptr &([1000 * i32]* %269)[i64 0][i32 %4];
    i32 %271 = load i32* %270;
    i32* %272 = getelementptr &(i32* %10)[i64 65];
    store i32* %272 with i32 %271;
    [1000 * i32]* %273 = getelementptr &([1000 * i32]* %7)[i64 66];
    i32* %274 = getelementptr &([1000 * i32]* %273)[i64 0][i32 %4];
    i32 %275 = load i32* %274;
    i32* %276 = getelementptr &(i32* %10)[i64 66];
    store i32* %276 with i32 %275;
    [1000 * i32]* %277 = getelementptr &([1000 * i32]* %7)[i64 67];
    i32* %278 = getelementptr &([1000 * i32]* %277)[i64 0][i32 %4];
    i32 %279 = load i32* %278;
    i32* %280 = getelementptr &(i32* %10)[i64 67];
    store i32* %280 with i32 %279;
    [1000 * i32]* %281 = getelementptr &([1000 * i32]* %7)[i64 68];
    i32* %282 = getelementptr &([1000 * i32]* %281)[i64 0][i32 %4];
    i32 %283 = load i32* %282;
    i32* %284 = getelementptr &(i32* %10)[i64 68];
    store i32* %284 with i32 %283;
    [1000 * i32]* %285 = getelementptr &([1000 * i32]* %7)[i64 69];
    i32* %286 = getelementptr &([1000 * i32]* %285)[i64 0][i32 %4];
    i32 %287 = load i32* %286;
    i32* %288 = getelementptr &(i32* %10)[i64 69];
    store i32* %288 with i32 %287;
    [1000 * i32]* %289 = getelementptr &([1000 * i32]* %7)[i64 70];
    i32* %290 = getelementptr &([1000 * i32]* %289)[i64 0][i32 %4];
    i32 %291 = load i32* %290;
    i32* %292 = getelementptr &(i32* %10)[i64 70];
    store i32* %292 with i32 %291;
    [1000 * i32]* %293 = getelementptr &([1000 * i32]* %7)[i64 71];
    i32* %294 = getelementptr &([1000 * i32]* %293)[i64 0][i32 %4];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %10)[i64 71];
    store i32* %296 with i32 %295;
    [1000 * i32]* %297 = getelementptr &([1000 * i32]* %7)[i64 72];
    i32* %298 = getelementptr &([1000 * i32]* %297)[i64 0][i32 %4];
    i32 %299 = load i32* %298;
    i32* %300 = getelementptr &(i32* %10)[i64 72];
    store i32* %300 with i32 %299;
    [1000 * i32]* %301 = getelementptr &([1000 * i32]* %7)[i64 73];
    i32* %302 = getelementptr &([1000 * i32]* %301)[i64 0][i32 %4];
    i32 %303 = load i32* %302;
    i32* %304 = getelementptr &(i32* %10)[i64 73];
    store i32* %304 with i32 %303;
    [1000 * i32]* %305 = getelementptr &([1000 * i32]* %7)[i64 74];
    i32* %306 = getelementptr &([1000 * i32]* %305)[i64 0][i32 %4];
    i32 %307 = load i32* %306;
    i32* %308 = getelementptr &(i32* %10)[i64 74];
    store i32* %308 with i32 %307;
    [1000 * i32]* %309 = getelementptr &([1000 * i32]* %7)[i64 75];
    i32* %310 = getelementptr &([1000 * i32]* %309)[i64 0][i32 %4];
    i32 %311 = load i32* %310;
    i32* %312 = getelementptr &(i32* %10)[i64 75];
    store i32* %312 with i32 %311;
    [1000 * i32]* %313 = getelementptr &([1000 * i32]* %7)[i64 76];
    i32* %314 = getelementptr &([1000 * i32]* %313)[i64 0][i32 %4];
    i32 %315 = load i32* %314;
    i32* %316 = getelementptr &(i32* %10)[i64 76];
    store i32* %316 with i32 %315;
    [1000 * i32]* %317 = getelementptr &([1000 * i32]* %7)[i64 77];
    i32* %318 = getelementptr &([1000 * i32]* %317)[i64 0][i32 %4];
    i32 %319 = load i32* %318;
    i32* %320 = getelementptr &(i32* %10)[i64 77];
    store i32* %320 with i32 %319;
    [1000 * i32]* %321 = getelementptr &([1000 * i32]* %7)[i64 78];
    i32* %322 = getelementptr &([1000 * i32]* %321)[i64 0][i32 %4];
    i32 %323 = load i32* %322;
    i32* %324 = getelementptr &(i32* %10)[i64 78];
    store i32* %324 with i32 %323;
    [1000 * i32]* %325 = getelementptr &([1000 * i32]* %7)[i64 79];
    i32* %326 = getelementptr &([1000 * i32]* %325)[i64 0][i32 %4];
    i32 %327 = load i32* %326;
    i32* %328 = getelementptr &(i32* %10)[i64 79];
    store i32* %328 with i32 %327;
    [1000 * i32]* %329 = getelementptr &([1000 * i32]* %7)[i64 80];
    i32* %330 = getelementptr &([1000 * i32]* %329)[i64 0][i32 %4];
    i32 %331 = load i32* %330;
    i32* %332 = getelementptr &(i32* %10)[i64 80];
    store i32* %332 with i32 %331;
    [1000 * i32]* %333 = getelementptr &([1000 * i32]* %7)[i64 81];
    i32* %334 = getelementptr &([1000 * i32]* %333)[i64 0][i32 %4];
    i32 %335 = load i32* %334;
    i32* %336 = getelementptr &(i32* %10)[i64 81];
    store i32* %336 with i32 %335;
    [1000 * i32]* %337 = getelementptr &([1000 * i32]* %7)[i64 82];
    i32* %338 = getelementptr &([1000 * i32]* %337)[i64 0][i32 %4];
    i32 %339 = load i32* %338;
    i32* %340 = getelementptr &(i32* %10)[i64 82];
    store i32* %340 with i32 %339;
    [1000 * i32]* %341 = getelementptr &([1000 * i32]* %7)[i64 83];
    i32* %342 = getelementptr &([1000 * i32]* %341)[i64 0][i32 %4];
    i32 %343 = load i32* %342;
    i32* %344 = getelementptr &(i32* %10)[i64 83];
    store i32* %344 with i32 %343;
    [1000 * i32]* %345 = getelementptr &([1000 * i32]* %7)[i64 84];
    i32* %346 = getelementptr &([1000 * i32]* %345)[i64 0][i32 %4];
    i32 %347 = load i32* %346;
    i32* %348 = getelementptr &(i32* %10)[i64 84];
    store i32* %348 with i32 %347;
    [1000 * i32]* %349 = getelementptr &([1000 * i32]* %7)[i64 85];
    i32* %350 = getelementptr &([1000 * i32]* %349)[i64 0][i32 %4];
    i32 %351 = load i32* %350;
    i32* %352 = getelementptr &(i32* %10)[i64 85];
    store i32* %352 with i32 %351;
    [1000 * i32]* %353 = getelementptr &([1000 * i32]* %7)[i64 86];
    i32* %354 = getelementptr &([1000 * i32]* %353)[i64 0][i32 %4];
    i32 %355 = load i32* %354;
    i32* %356 = getelementptr &(i32* %10)[i64 86];
    store i32* %356 with i32 %355;
    [1000 * i32]* %357 = getelementptr &([1000 * i32]* %7)[i64 87];
    i32* %358 = getelementptr &([1000 * i32]* %357)[i64 0][i32 %4];
    i32 %359 = load i32* %358;
    i32* %360 = getelementptr &(i32* %10)[i64 87];
    store i32* %360 with i32 %359;
    [1000 * i32]* %361 = getelementptr &([1000 * i32]* %7)[i64 88];
    i32* %362 = getelementptr &([1000 * i32]* %361)[i64 0][i32 %4];
    i32 %363 = load i32* %362;
    i32* %364 = getelementptr &(i32* %10)[i64 88];
    store i32* %364 with i32 %363;
    [1000 * i32]* %365 = getelementptr &([1000 * i32]* %7)[i64 89];
    i32* %366 = getelementptr &([1000 * i32]* %365)[i64 0][i32 %4];
    i32 %367 = load i32* %366;
    i32* %368 = getelementptr &(i32* %10)[i64 89];
    store i32* %368 with i32 %367;
    [1000 * i32]* %369 = getelementptr &([1000 * i32]* %7)[i64 90];
    i32* %370 = getelementptr &([1000 * i32]* %369)[i64 0][i32 %4];
    i32 %371 = load i32* %370;
    i32* %372 = getelementptr &(i32* %10)[i64 90];
    store i32* %372 with i32 %371;
    [1000 * i32]* %373 = getelementptr &([1000 * i32]* %7)[i64 91];
    i32* %374 = getelementptr &([1000 * i32]* %373)[i64 0][i32 %4];
    i32 %375 = load i32* %374;
    i32* %376 = getelementptr &(i32* %10)[i64 91];
    store i32* %376 with i32 %375;
    [1000 * i32]* %377 = getelementptr &([1000 * i32]* %7)[i64 92];
    i32* %378 = getelementptr &([1000 * i32]* %377)[i64 0][i32 %4];
    i32 %379 = load i32* %378;
    i32* %380 = getelementptr &(i32* %10)[i64 92];
    store i32* %380 with i32 %379;
    [1000 * i32]* %381 = getelementptr &([1000 * i32]* %7)[i64 93];
    i32* %382 = getelementptr &([1000 * i32]* %381)[i64 0][i32 %4];
    i32 %383 = load i32* %382;
    i32* %384 = getelementptr &(i32* %10)[i64 93];
    store i32* %384 with i32 %383;
    [1000 * i32]* %385 = getelementptr &([1000 * i32]* %7)[i64 94];
    i32* %386 = getelementptr &([1000 * i32]* %385)[i64 0][i32 %4];
    i32 %387 = load i32* %386;
    i32* %388 = getelementptr &(i32* %10)[i64 94];
    store i32* %388 with i32 %387;
    [1000 * i32]* %389 = getelementptr &([1000 * i32]* %7)[i64 95];
    i32* %390 = getelementptr &([1000 * i32]* %389)[i64 0][i32 %4];
    i32 %391 = load i32* %390;
    i32* %392 = getelementptr &(i32* %10)[i64 95];
    store i32* %392 with i32 %391;
    [1000 * i32]* %393 = getelementptr &([1000 * i32]* %7)[i64 96];
    i32* %394 = getelementptr &([1000 * i32]* %393)[i64 0][i32 %4];
    i32 %395 = load i32* %394;
    i32* %396 = getelementptr &(i32* %10)[i64 96];
    store i32* %396 with i32 %395;
    [1000 * i32]* %397 = getelementptr &([1000 * i32]* %7)[i64 97];
    i32* %398 = getelementptr &([1000 * i32]* %397)[i64 0][i32 %4];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %10)[i64 97];
    store i32* %400 with i32 %399;
    [1000 * i32]* %401 = getelementptr &([1000 * i32]* %7)[i64 98];
    i32* %402 = getelementptr &([1000 * i32]* %401)[i64 0][i32 %4];
    i32 %403 = load i32* %402;
    i32* %404 = getelementptr &(i32* %10)[i64 98];
    store i32* %404 with i32 %403;
    [1000 * i32]* %405 = getelementptr &([1000 * i32]* %7)[i64 99];
    i32* %406 = getelementptr &([1000 * i32]* %405)[i64 0][i32 %4];
    i32 %407 = load i32* %406;
    i32* %408 = getelementptr &(i32* %10)[i64 99];
    store i32* %408 with i32 %407;
    [1000 * i32]* %409 = getelementptr &([1000 * i32]* %7)[i64 100];
    i32* %410 = getelementptr &([1000 * i32]* %409)[i64 0][i32 %4];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &(i32* %10)[i64 100];
    store i32* %412 with i32 %411;
    [1000 * i32]* %413 = getelementptr &([1000 * i32]* %7)[i64 101];
    i32* %414 = getelementptr &([1000 * i32]* %413)[i64 0][i32 %4];
    i32 %415 = load i32* %414;
    i32* %416 = getelementptr &(i32* %10)[i64 101];
    store i32* %416 with i32 %415;
    [1000 * i32]* %417 = getelementptr &([1000 * i32]* %7)[i64 102];
    i32* %418 = getelementptr &([1000 * i32]* %417)[i64 0][i32 %4];
    i32 %419 = load i32* %418;
    i32* %420 = getelementptr &(i32* %10)[i64 102];
    store i32* %420 with i32 %419;
    [1000 * i32]* %421 = getelementptr &([1000 * i32]* %7)[i64 103];
    i32* %422 = getelementptr &([1000 * i32]* %421)[i64 0][i32 %4];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %10)[i64 103];
    store i32* %424 with i32 %423;
    i32 %425 = add i32 %4, i32 1;
    i1 %426 = icmp sgt i32 %1, i32 %425;
    cbr i1 %426(prob = 0.984615), ^b1, ^b2;
  ^b2:
    ret;
}
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [1000 * [1000 * i32]]* %2 = ptrcast [1000 * [1000 * i32]]* @b to [1000 * [1000 * i32]]*;
    [1000 * [1000 * i32]]* %3 = ptrcast [1000 * [1000 * i32]]* @c to [1000 * [1000 * i32]]*;
    [1000 * [1000 * i32]]* %4 = ptrcast [1000 * [1000 * i32]]* @a to [1000 * [1000 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %5 = phi [^b, i32 %0] [^b2, i32 %184];
    [1000 * i32]* %6 = getelementptr &([1000 * [1000 * i32]]* %3)[i64 0][i32 %5];
    [1000 * i32]* %7 = getelementptr &([1000 * [1000 * i32]]* %4)[i64 0][i32 %5];
    ubr ^while.body;
  ^while.body:
    i32 %8 = phi [^b1, i32 0] [^while.body2, i32 %182];
    ubr ^while.body1;
  ^while.body1:
    i32 %9 = phi [^while.body, i32 0] [^while.body1, i32 %123];
    i32 %10 = phi [^while.body, i32 0] [^while.body1, i32 %122];
    [1000 * i32]* %11 = getelementptr &([1000 * [1000 * i32]]* %2)[i64 0][i32 %9];
    i32* %12 = getelementptr &([1000 * i32]* %11)[i64 0][i32 %8];
    i32* %13 = getelementptr &([1000 * i32]* %7)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i32 %15 = load i32* %12;
    [1000 * i32]* %16 = getelementptr &([1000 * i32]* %11)[i64 1];
    i32* %17 = getelementptr &([1000 * i32]* %16)[i64 0][i32 %8];
    i32* %18 = getelementptr &(i32* %13)[i64 1];
    i32 %19 = load i32* %18;
    i32 %20 = load i32* %17;
    i32 %21 = mul i32 %19, i32 %20;
    i32 %22 = mul i32 %14, i32 %15;
    i32 %23 = add i32 %21, i32 %22;
    [1000 * i32]* %24 = getelementptr &([1000 * i32]* %11)[i64 2];
    i32* %25 = getelementptr &([1000 * i32]* %24)[i64 0][i32 %8];
    i32* %26 = getelementptr &(i32* %13)[i64 2];
    i32 %27 = load i32* %26;
    i32 %28 = load i32* %25;
    i32 %29 = mul i32 %27, i32 %28;
    i32 %30 = add i32 %23, i32 %29;
    [1000 * i32]* %31 = getelementptr &([1000 * i32]* %11)[i64 3];
    i32* %32 = getelementptr &([1000 * i32]* %31)[i64 0][i32 %8];
    i32* %33 = getelementptr &(i32* %13)[i64 3];
    i32 %34 = load i32* %33;
    i32 %35 = load i32* %32;
    i32 %36 = mul i32 %34, i32 %35;
    i32 %37 = add i32 %30, i32 %36;
    [1000 * i32]* %38 = getelementptr &([1000 * i32]* %11)[i64 4];
    i32* %39 = getelementptr &([1000 * i32]* %38)[i64 0][i32 %8];
    i32* %40 = getelementptr &(i32* %13)[i64 4];
    i32 %41 = load i32* %40;
    i32 %42 = load i32* %39;
    i32 %43 = mul i32 %41, i32 %42;
    i32 %44 = add i32 %37, i32 %43;
    [1000 * i32]* %45 = getelementptr &([1000 * i32]* %11)[i64 5];
    i32* %46 = getelementptr &([1000 * i32]* %45)[i64 0][i32 %8];
    i32* %47 = getelementptr &(i32* %13)[i64 5];
    i32 %48 = load i32* %47;
    i32 %49 = load i32* %46;
    i32 %50 = mul i32 %48, i32 %49;
    i32 %51 = add i32 %44, i32 %50;
    [1000 * i32]* %52 = getelementptr &([1000 * i32]* %11)[i64 6];
    i32* %53 = getelementptr &([1000 * i32]* %52)[i64 0][i32 %8];
    i32* %54 = getelementptr &(i32* %13)[i64 6];
    i32 %55 = load i32* %54;
    i32 %56 = load i32* %53;
    i32 %57 = mul i32 %55, i32 %56;
    i32 %58 = add i32 %51, i32 %57;
    [1000 * i32]* %59 = getelementptr &([1000 * i32]* %11)[i64 7];
    i32* %60 = getelementptr &([1000 * i32]* %59)[i64 0][i32 %8];
    i32* %61 = getelementptr &(i32* %13)[i64 7];
    i32 %62 = load i32* %61;
    i32 %63 = load i32* %60;
    i32 %64 = mul i32 %62, i32 %63;
    i32 %65 = add i32 %58, i32 %64;
    [1000 * i32]* %66 = getelementptr &([1000 * i32]* %11)[i64 8];
    i32* %67 = getelementptr &([1000 * i32]* %66)[i64 0][i32 %8];
    i32* %68 = getelementptr &(i32* %13)[i64 8];
    i32 %69 = load i32* %68;
    i32 %70 = load i32* %67;
    i32 %71 = mul i32 %69, i32 %70;
    i32 %72 = add i32 %65, i32 %71;
    [1000 * i32]* %73 = getelementptr &([1000 * i32]* %11)[i64 9];
    i32* %74 = getelementptr &([1000 * i32]* %73)[i64 0][i32 %8];
    i32* %75 = getelementptr &(i32* %13)[i64 9];
    i32 %76 = load i32* %75;
    i32 %77 = load i32* %74;
    i32 %78 = mul i32 %76, i32 %77;
    i32 %79 = add i32 %72, i32 %78;
    [1000 * i32]* %80 = getelementptr &([1000 * i32]* %11)[i64 10];
    i32* %81 = getelementptr &([1000 * i32]* %80)[i64 0][i32 %8];
    i32* %82 = getelementptr &(i32* %13)[i64 10];
    i32 %83 = load i32* %82;
    i32 %84 = load i32* %81;
    i32 %85 = mul i32 %83, i32 %84;
    i32 %86 = add i32 %79, i32 %85;
    [1000 * i32]* %87 = getelementptr &([1000 * i32]* %11)[i64 11];
    i32* %88 = getelementptr &([1000 * i32]* %87)[i64 0][i32 %8];
    i32* %89 = getelementptr &(i32* %13)[i64 11];
    i32 %90 = load i32* %89;
    i32 %91 = load i32* %88;
    i32 %92 = mul i32 %90, i32 %91;
    i32 %93 = add i32 %86, i32 %92;
    [1000 * i32]* %94 = getelementptr &([1000 * i32]* %11)[i64 12];
    i32* %95 = getelementptr &([1000 * i32]* %94)[i64 0][i32 %8];
    i32* %96 = getelementptr &(i32* %13)[i64 12];
    i32 %97 = load i32* %96;
    i32 %98 = load i32* %95;
    i32 %99 = mul i32 %97, i32 %98;
    i32 %100 = add i32 %93, i32 %99;
    [1000 * i32]* %101 = getelementptr &([1000 * i32]* %11)[i64 13];
    i32* %102 = getelementptr &([1000 * i32]* %101)[i64 0][i32 %8];
    i32* %103 = getelementptr &(i32* %13)[i64 13];
    i32 %104 = load i32* %103;
    i32 %105 = load i32* %102;
    i32 %106 = mul i32 %104, i32 %105;
    i32 %107 = add i32 %100, i32 %106;
    [1000 * i32]* %108 = getelementptr &([1000 * i32]* %11)[i64 14];
    i32* %109 = getelementptr &([1000 * i32]* %108)[i64 0][i32 %8];
    i32* %110 = getelementptr &(i32* %13)[i64 14];
    i32 %111 = load i32* %110;
    i32 %112 = load i32* %109;
    i32 %113 = mul i32 %111, i32 %112;
    i32 %114 = add i32 %107, i32 %113;
    [1000 * i32]* %115 = getelementptr &([1000 * i32]* %11)[i64 15];
    i32* %116 = getelementptr &([1000 * i32]* %115)[i64 0][i32 %8];
    i32* %117 = getelementptr &(i32* %13)[i64 15];
    i32 %118 = load i32* %117;
    i32 %119 = load i32* %116;
    i32 %120 = mul i32 %118, i32 %119;
    i32 %121 = add i32 %114, i32 %120;
    i32 %122 = add i32 %10, i32 %121;
    i32 %123 = add i32 %9, i32 16;
    i1 %124 = icmp slt i32 %123, i32 992;
    cbr i1 %124(prob = 0.983871), ^while.body1, ^while.body2;
  ^while.body2:
    [1000 * i32]* %125 = getelementptr &([1000 * i32]* %11)[i64 16];
    i32* %126 = getelementptr &([1000 * i32]* %125)[i64 0][i32 %8];
    i32* %127 = getelementptr &(i32* %13)[i64 16];
    i32 %128 = load i32* %127;
    i32 %129 = load i32* %126;
    i32 %130 = mul i32 %128, i32 %129;
    i32 %131 = add i32 %122, i32 %130;
    [1000 * i32]* %132 = getelementptr &([1000 * i32]* %11)[i64 17];
    i32* %133 = getelementptr &([1000 * i32]* %132)[i64 0][i32 %8];
    i32* %134 = getelementptr &(i32* %13)[i64 17];
    i32 %135 = load i32* %134;
    i32 %136 = load i32* %133;
    i32 %137 = mul i32 %135, i32 %136;
    i32 %138 = add i32 %131, i32 %137;
    [1000 * i32]* %139 = getelementptr &([1000 * i32]* %11)[i64 18];
    i32* %140 = getelementptr &([1000 * i32]* %139)[i64 0][i32 %8];
    i32* %141 = getelementptr &(i32* %13)[i64 18];
    i32 %142 = load i32* %141;
    i32 %143 = load i32* %140;
    i32 %144 = mul i32 %142, i32 %143;
    i32 %145 = add i32 %138, i32 %144;
    [1000 * i32]* %146 = getelementptr &([1000 * i32]* %11)[i64 19];
    i32* %147 = getelementptr &([1000 * i32]* %146)[i64 0][i32 %8];
    i32* %148 = getelementptr &(i32* %13)[i64 19];
    i32 %149 = load i32* %148;
    i32 %150 = load i32* %147;
    i32 %151 = mul i32 %149, i32 %150;
    i32 %152 = add i32 %145, i32 %151;
    [1000 * i32]* %153 = getelementptr &([1000 * i32]* %11)[i64 20];
    i32* %154 = getelementptr &([1000 * i32]* %153)[i64 0][i32 %8];
    i32* %155 = getelementptr &(i32* %13)[i64 20];
    i32 %156 = load i32* %155;
    i32 %157 = load i32* %154;
    i32 %158 = mul i32 %156, i32 %157;
    i32 %159 = add i32 %152, i32 %158;
    [1000 * i32]* %160 = getelementptr &([1000 * i32]* %11)[i64 21];
    i32* %161 = getelementptr &([1000 * i32]* %160)[i64 0][i32 %8];
    i32* %162 = getelementptr &(i32* %13)[i64 21];
    i32 %163 = load i32* %162;
    i32 %164 = load i32* %161;
    i32 %165 = mul i32 %163, i32 %164;
    i32 %166 = add i32 %159, i32 %165;
    [1000 * i32]* %167 = getelementptr &([1000 * i32]* %11)[i64 22];
    i32* %168 = getelementptr &([1000 * i32]* %167)[i64 0][i32 %8];
    i32* %169 = getelementptr &(i32* %13)[i64 22];
    i32 %170 = load i32* %169;
    i32 %171 = load i32* %168;
    i32 %172 = mul i32 %170, i32 %171;
    i32 %173 = add i32 %166, i32 %172;
    [1000 * i32]* %174 = getelementptr &([1000 * i32]* %11)[i64 23];
    i32* %175 = getelementptr &([1000 * i32]* %174)[i64 0][i32 %8];
    i32* %176 = getelementptr &(i32* %13)[i64 23];
    i32 %177 = load i32* %176;
    i32 %178 = load i32* %175;
    i32 %179 = mul i32 %177, i32 %178;
    i32 %180 = add i32 %173, i32 %179;
    i32* %181 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %8];
    store i32* %181 with i32 %180;
    i32 %182 = add i32 %8, i32 1;
    i1 %183 = icmp slt i32 %182, i32 1000;
    cbr i1 %183(prob = 0.999), ^while.body, ^b2;
  ^b2:
    i32 %184 = add i32 %5, i32 1;
    i1 %185 = icmp sgt i32 %1, i32 %184;
    cbr i1 %185(prob = 0.984615), ^b1, ^b3;
  ^b3:
    ret;
}
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [12 * i8]* %4 = ptrcast [12 * i8]* @cmmc_parallel_body_payload_2 to [12 * i8]*;
    [1000 * i32]** %5 = ptradd [12 * i8]* %4, i32 0;
    [1000 * i32]* %6 = load [1000 * i32]** %5;
    i32* %7 = ptradd [12 * i8]* %4, i32 8;
    i32 %8 = load i32* %7;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %9 = add i32 %0, i32 15;
    i32 %10 = add i32 %1, i32 -3;
    i1 %11 = icmp slt i32 %9, i32 %10;
    i32 %12 = add i32 %1, i32 -18;
    cbr i1 %11(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b, i32 %0] [^scalar.header1, i32 %35] [^b3, i32 %46];
    i1 %14 = icmp sgt i32 %1, i32 %13;
    cbr i1 %14(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %15 = phi [^super.header, i32 %0] [^b1, i32 %32];
    i32* %16 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %15];
    store i32* %16 with i32 %8;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 %8;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 %8;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 %8;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 %8;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 %8;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 %8;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 %8;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 %8;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 %8;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 %8;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 %8;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 %8;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 %8;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 %8;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 %8;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %12, i32 %32;
    cbr i1 %33(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 %0] [^b1, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^b1, i32 %32];
    i1 %36 = icmp sgt i32 %10, i32 %34;
    cbr i1 %36(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^b2, i32 %39];
    i32* %38 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %37];
    store i32* %38 with i32 %8;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %1, i32 %39;
    cbr i1 %40(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %41 = phi [^scalar.header1, i32 %34] [^b3, i32 %46];
    i32* %42 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %41];
    store i32* %42 with i32 %8;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 %8;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 %8;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 %8;
    i32 %46 = add i32 %41, i32 4;
    i1 %47 = icmp sgt i32 %10, i32 %46;
    cbr i1 %47(prob = 0.75), ^b3, ^scalar.header;
}
internal [12 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [16 * i8]* %4 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_3 to [16 * i8]*;
    [1000 * i32]** %5 = ptradd [16 * i8]* %4, i32 8;
    [1000 * i32]* %6 = load [1000 * i32]** %5;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 15;
    i32 %8 = add i32 %1, i32 -3;
    i1 %9 = icmp slt i32 %7, i32 %8;
    i32 %10 = add i32 %1, i32 -18;
    cbr i1 %9(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %11 = phi [^b, i32 0] [^scalar.final1, i32 %82];
    i32 %12 = phi [^b, i32 %0] [^scalar.final1, i32 %83];
    i32 %13 = phi [^b, i32 undef] [^scalar.final1, i32 %82];
    i1 %14 = icmp sgt i32 %1, i32 %12;
    cbr i1 %14(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %15 = phi [^super.header, i32 %0] [^b1, i32 %65];
    i32 %16 = phi [^super.header, i32 0] [^b1, i32 %64];
    i32* %17 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %15];
    i32 %18 = load i32* %17;
    i32 %19 = add i32 %16, i32 %18;
    i32* %20 = getelementptr &(i32* %17)[i64 1];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &(i32* %17)[i64 2];
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %17)[i64 3];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %17)[i64 4];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %17)[i64 5];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %17)[i64 6];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %17)[i64 7];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %17)[i64 8];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %17)[i64 9];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %17)[i64 10];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %17)[i64 11];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %17)[i64 12];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %17)[i64 13];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %17)[i64 14];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %17)[i64 15];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32 %65 = add i32 %15, i32 16;
    i1 %66 = icmp sgt i32 %10, i32 %65;
    cbr i1 %66(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %67 = phi [^super.header, i32 %0] [^b1, i32 %65];
    i32 %68 = phi [^super.header, i32 0] [^b1, i32 %64];
    i32 %69 = phi [^super.header, i32 undef] [^b1, i32 %64];
    i32 %70 = phi [^super.header, i32 undef] [^b1, i32 %65];
    i1 %71 = icmp sgt i32 %8, i32 %67;
    cbr i1 %71(prob = 0.75), ^b3, ^scalar.final1;
  ^b2 {scalar}:
    i32 %72 = phi [^scalar.header, i32 %12] [^b2, i32 %77];
    i32 %73 = phi [^scalar.header, i32 %11] [^b2, i32 %76];
    i32* %74 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %72];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32 %77 = add i32 %72, i32 1;
    i1 %78 = icmp sgt i32 %1, i32 %77;
    cbr i1 %78(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    i32 %79 = phi [^scalar.header, i32 %13] [^b2, i32 %76];
    i32* %80 = ptradd [16 * i8]* %4, i32 0;
    atomicadd i32* %80, i32 %79;
    ret;
  ^scalar.final1:
    i32 %82 = phi [^scalar.header1, i32 %69] [^b3, i32 %97];
    i32 %83 = phi [^scalar.header1, i32 %70] [^b3, i32 %98];
    ubr ^scalar.header;
  ^b3 {scalar}:
    i32 %84 = phi [^scalar.header1, i32 %68] [^b3, i32 %97];
    i32 %85 = phi [^scalar.header1, i32 %67] [^b3, i32 %98];
    i32* %86 = getelementptr &([1000 * i32]* %6)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %84, i32 %87;
    i32* %89 = getelementptr &(i32* %86)[i64 1];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %86)[i64 2];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %86)[i64 3];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32 %98 = add i32 %85, i32 4;
    i1 %99 = icmp sgt i32 %8, i32 %98;
    cbr i1 %99(prob = 0.75), ^b3, ^scalar.final1;
}
internal [16 * i8]* @cmmc_parallel_body_payload_3, align 8;
