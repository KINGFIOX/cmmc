internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %rowsize = alloc i32;
    i32* %colsize = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %curr = alloc i32;
    i32* %i1 = alloc i32;
    i32* %len = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    i32* %4 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %3];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^while.body, i32 %10] [^entry, i32 0];
    i1 %8 = scmp lt i32 %7, i32 %5;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %9 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %7];
    store i32* %9 with i32 %7;
    i32 %10 = add i32 %7, i32 1;
    ubr ^while.header;
^b:
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %11 = phi [^while.body4, i32 %28] [^b, i32 %5];
    i32 %12 = phi [^while.body4, i32 %29] [^b, i32 %6];
    i32 %13 = phi [^while.body4, i32 %37] [^b, i32 0];
    i1 %14 = scmp lt i32 %13, i32 %12;
    cbr i1 %14(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %15 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %13];
    i32 %16 = load i32* %15;
    store i32* %rowsize with i32 %16;
    i32 %17 = sdiv i32 %11, i32 %16;
    store i32* %colsize with i32 %17;
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %18 = phi [^while.header1, i32 %12] [^while.body2, i32 %18];
    i32 %19 = phi [^while.header1, i32 0] [^while.body2, i32 %27];
    i32 %20 = phi [^while.header1, i32 0] [^while.body2, i32 %26];
    i1 %21 = scmp lt i32 %19, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %22 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %19];
    i32 %23 = load i32* %22;
    i32 %24 = mul i32 %19, i32 %19;
    i32 %25 = mul i32 %24, i32 %23;
    i32 %26 = add i32 %20, i32 %25;
    i32 %27 = add i32 %19, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %28 = phi [^b3, i32 %39] [^while.body1, i32 %11];
    i32 %29 = phi [^b3, i32 %40] [^while.body1, i32 %12];
    i32 %30 = phi [^b3, i32 %41] [^while.body1, i32 %13];
    i32 %31 = phi [^b3, i32 %48] [^while.body1, i32 0];
    i32 %32 = phi [^b3, i32 %44] [^while.body1, i32 %17];
    i32 %33 = phi [^b3, i32 %45] [^while.body1, i32 %16];
    i32* %34 = phi [^b3, i32* %46] [^while.body1, i32* %4];
    i1 %35 = scmp lt i32 %31, i32 %32;
    cbr i1 %35(prob = 0.97), ^while.body3, ^while.body4;
^b1:
    i1 %36 = scmp lt i32 %20, i32 0;
    cbr i1 %36(prob = 0.5), ^if.then, ^b2;
^while.body3:
    store i32* %j with i32 0;
    ubr ^while.header4;
^while.body4:
    i32 %37 = add i32 %30, i32 1;
    store i32* %i1 with i32 %37;
    ubr ^while.header1;
^if.then:
    i32 %38 = neg i32 %20;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %38);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %20);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header4:
    i32 %39 = phi [^b4, i32 %66] [^if.then1, i32 %39] [^while.body3, i32 %28];
    i32 %40 = phi [^b4, i32 %67] [^if.then1, i32 %40] [^while.body3, i32 %29];
    i32 %41 = phi [^b4, i32 %68] [^if.then1, i32 %41] [^while.body3, i32 %30];
    i32 %42 = phi [^b4, i32 %73] [^if.then1, i32 %50] [^while.body3, i32 0];
    i32 %43 = phi [^b4, i32 %70] [^if.then1, i32 %43] [^while.body3, i32 %31];
    i32 %44 = phi [^b4, i32 %71] [^if.then1, i32 %44] [^while.body3, i32 %32];
    i32 %45 = phi [^b4, i32 %72] [^if.then1, i32 %45] [^while.body3, i32 %33];
    i32* %46 = phi [^b4, i32* %46] [^if.then1, i32* %46] [^while.body3, i32* %34];
    i1 %47 = scmp lt i32 %42, i32 %45;
    cbr i1 %47(prob = 0.97), ^while.body5, ^b3;
^b3:
    i32 %48 = add i32 %43, i32 1;
    store i32* %i with i32 %48;
    ubr ^while.header3;
^while.body5:
    i1 %49 = scmp lt i32 %43, i32 %42;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    i32 %50 = add i32 %42, i32 1;
    store i32* %j with i32 %50;
    ubr ^while.header4;
^b4:
    i32 %51 = mul i32 %45, i32 %43;
    i32 %52 = add i32 %51, i32 %42;
    i32* %53 = getelementptr &(i32* %46)[i32 %52];
    i32 %54 = load i32* %53;
    store i32* %curr with i32 %54;
    i32 %55 = mul i32 %44, i32 %42;
    i32 %56 = add i32 %55, i32 %43;
    i32* %57 = getelementptr &(i32* %46)[i32 %56];
    i32 %58 = load i32* %53;
    store i32* %57 with i32 %58;
    i32 %59 = load i32* %curr;
    i32 %60 = load i32* %j;
    i32 %61 = load i32* %i;
    i32 %62 = load i32* %rowsize;
    i32 %63 = mul i32 %62, i32 %61;
    i32 %64 = add i32 %63, i32 %60;
    i32* %65 = getelementptr &(i32* %46)[i32 %64];
    store i32* %65 with i32 %59;
    i32 %66 = load i32* %n;
    i32 %67 = load i32* %len;
    i32 %68 = load i32* %i1;
    i32 %69 = load i32* %j;
    i32 %70 = load i32* %i;
    i32 %71 = load i32* %colsize;
    i32 %72 = load i32* %rowsize;
    i32 %73 = add i32 %69, i32 1;
    store i32* %j with i32 %73;
    ubr ^while.header4;
}
