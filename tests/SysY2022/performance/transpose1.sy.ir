internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 28);
    i32* %3 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    cbr i1 %4(prob = 0.97), ^super.header, ^b;
^super.header:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %6];
    i32 %6 = add i32 %5, i32 16;
    i1 %7 = scmp lt i32 %6, i32 %0;
    cbr i1 %7(prob = 0.67), ^while.body, ^super.header1;
^b:
    i1 %8 = scmp gt i32 %2, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b1;
^while.body:
    i32* %9 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %5];
    store i32* %9 with i32 %5;
    i32 %10 = add i32 %5, i32 1;
    i32* %11 = getelementptr &(i32* %9)[i64 1];
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %5, i32 2;
    i32* %13 = getelementptr &(i32* %9)[i64 2];
    store i32* %13 with i32 %12;
    i32 %14 = add i32 %5, i32 3;
    i32* %15 = getelementptr &(i32* %9)[i64 3];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %5, i32 4;
    i32* %17 = getelementptr &(i32* %9)[i64 4];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %5, i32 5;
    i32* %19 = getelementptr &(i32* %9)[i64 5];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %5, i32 6;
    i32* %21 = getelementptr &(i32* %9)[i64 6];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %5, i32 7;
    i32* %23 = getelementptr &(i32* %9)[i64 7];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %5, i32 8;
    i32* %25 = getelementptr &(i32* %9)[i64 8];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %5, i32 9;
    i32* %27 = getelementptr &(i32* %9)[i64 9];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %5, i32 10;
    i32* %29 = getelementptr &(i32* %9)[i64 10];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %5, i32 11;
    i32* %31 = getelementptr &(i32* %9)[i64 11];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %5, i32 12;
    i32* %33 = getelementptr &(i32* %9)[i64 12];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %5, i32 13;
    i32* %35 = getelementptr &(i32* %9)[i64 13];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %5, i32 14;
    i32* %37 = getelementptr &(i32* %9)[i64 14];
    store i32* %37 with i32 %36;
    i32 %38 = add i32 %5, i32 15;
    i32* %39 = getelementptr &(i32* %9)[i64 15];
    store i32* %39 with i32 %38;
    ubr ^super.header;
^while.body1:
    i32 %40 = phi [^b, i32 0] [^while.body5, i32 %189];
    i32* %41 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %40];
    i32 %42 = load i32* %41;
    i32 %43 = sdiv i32 %0, i32 %42;
    ubr ^while.header;
^super.header1:
    i32 %44 = phi [^super.header, i32 %5] [^while.body2, i32 %45];
    i32 %45 = add i32 %44, i32 16;
    i1 %46 = scmp lt i32 %45, i32 %0;
    cbr i1 %46(prob = 0.67), ^while.body2, ^while.body3;
^b1:
    cbr i1 %8(prob = 0.97), ^super.header2, ^b2;
^while.body2:
    i32* %47 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %44];
    store i32* %47 with i32 %44;
    i32 %48 = add i32 %44, i32 1;
    i32* %49 = getelementptr &(i32* %47)[i64 1];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %44, i32 2;
    i32* %51 = getelementptr &(i32* %47)[i64 2];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %44, i32 3;
    i32* %53 = getelementptr &(i32* %47)[i64 3];
    store i32* %53 with i32 %52;
    i32 %54 = add i32 %44, i32 4;
    i32* %55 = getelementptr &(i32* %47)[i64 4];
    store i32* %55 with i32 %54;
    i32 %56 = add i32 %44, i32 5;
    i32* %57 = getelementptr &(i32* %47)[i64 5];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %44, i32 6;
    i32* %59 = getelementptr &(i32* %47)[i64 6];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %44, i32 7;
    i32* %61 = getelementptr &(i32* %47)[i64 7];
    store i32* %61 with i32 %60;
    i32 %62 = add i32 %44, i32 8;
    i32* %63 = getelementptr &(i32* %47)[i64 8];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %44, i32 9;
    i32* %65 = getelementptr &(i32* %47)[i64 9];
    store i32* %65 with i32 %64;
    i32 %66 = add i32 %44, i32 10;
    i32* %67 = getelementptr &(i32* %47)[i64 10];
    store i32* %67 with i32 %66;
    i32 %68 = add i32 %44, i32 11;
    i32* %69 = getelementptr &(i32* %47)[i64 11];
    store i32* %69 with i32 %68;
    i32 %70 = add i32 %44, i32 12;
    i32* %71 = getelementptr &(i32* %47)[i64 12];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %44, i32 13;
    i32* %73 = getelementptr &(i32* %47)[i64 13];
    store i32* %73 with i32 %72;
    i32 %74 = add i32 %44, i32 14;
    i32* %75 = getelementptr &(i32* %47)[i64 14];
    store i32* %75 with i32 %74;
    i32 %76 = add i32 %44, i32 15;
    i32* %77 = getelementptr &(i32* %47)[i64 15];
    store i32* %77 with i32 %76;
    ubr ^super.header1;
^while.header:
    i32 %78 = phi [^while.body1, i32 0] [^b4, i32 %196];
    i1 %79 = scmp lt i32 %78, i32 %43;
    i32 %80 = mul i32 %78, i32 %42;
    cbr i1 %79(prob = 0.97), ^while.header1, ^while.body5;
^while.body3:
    i32 %81 = phi [^super.header1, i32 %44] [^while.body3, i32 %83];
    i32* %82 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %81];
    store i32* %82 with i32 %81;
    i32 %83 = add i32 %81, i32 1;
    i1 %84 = scmp lt i32 %83, i32 %0;
    cbr i1 %84(prob = 0.97), ^while.body3, ^b;
^super.header2:
    i32 %85 = phi [^b1, i32 0] [^while.body4, i32 %185];
    i32 %86 = phi [^b1, i32 0] [^while.body4, i32 %87];
    i32 %87 = add i32 %86, i32 16;
    i1 %88 = scmp lt i32 %87, i32 %2;
    cbr i1 %88(prob = 0.67), ^while.body4, ^super.header3;
^b2:
    i32 %89 = phi [^b1, i32 0] [^while.body8, i32 %299];
    i1 %90 = scmp lt i32 %89, i32 0;
    cbr i1 %90(prob = 0.5), ^if.then, ^b3;
^while.body4:
    i32* %91 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %86];
    i32 %92 = load i32* %91;
    i32 %93 = mul i32 %86, i32 %86;
    i32 %94 = mul i32 %93, i32 %92;
    i32 %95 = add i32 %86, i32 1;
    i32* %96 = getelementptr &(i32* %91)[i64 1];
    i32 %97 = load i32* %96;
    i32 %98 = mul i32 %95, i32 %95;
    i32 %99 = mul i32 %97, i32 %98;
    i32 %100 = add i32 %86, i32 2;
    i32* %101 = getelementptr &(i32* %91)[i64 2];
    i32 %102 = load i32* %101;
    i32 %103 = mul i32 %100, i32 %100;
    i32 %104 = mul i32 %102, i32 %103;
    i32 %105 = add i32 %86, i32 3;
    i32* %106 = getelementptr &(i32* %91)[i64 3];
    i32 %107 = load i32* %106;
    i32 %108 = mul i32 %105, i32 %105;
    i32 %109 = mul i32 %107, i32 %108;
    i32 %110 = add i32 %86, i32 4;
    i32* %111 = getelementptr &(i32* %91)[i64 4];
    i32 %112 = load i32* %111;
    i32 %113 = mul i32 %110, i32 %110;
    i32 %114 = mul i32 %112, i32 %113;
    i32 %115 = add i32 %86, i32 5;
    i32* %116 = getelementptr &(i32* %91)[i64 5];
    i32 %117 = load i32* %116;
    i32 %118 = mul i32 %115, i32 %115;
    i32 %119 = mul i32 %117, i32 %118;
    i32 %120 = add i32 %86, i32 6;
    i32* %121 = getelementptr &(i32* %91)[i64 6];
    i32 %122 = load i32* %121;
    i32 %123 = mul i32 %120, i32 %120;
    i32 %124 = mul i32 %122, i32 %123;
    i32 %125 = add i32 %86, i32 7;
    i32* %126 = getelementptr &(i32* %91)[i64 7];
    i32 %127 = load i32* %126;
    i32 %128 = mul i32 %125, i32 %125;
    i32 %129 = mul i32 %127, i32 %128;
    i32 %130 = add i32 %86, i32 8;
    i32* %131 = getelementptr &(i32* %91)[i64 8];
    i32 %132 = load i32* %131;
    i32 %133 = mul i32 %130, i32 %130;
    i32 %134 = mul i32 %132, i32 %133;
    i32 %135 = add i32 %86, i32 9;
    i32* %136 = getelementptr &(i32* %91)[i64 9];
    i32 %137 = load i32* %136;
    i32 %138 = mul i32 %135, i32 %135;
    i32 %139 = mul i32 %137, i32 %138;
    i32 %140 = add i32 %86, i32 10;
    i32* %141 = getelementptr &(i32* %91)[i64 10];
    i32 %142 = load i32* %141;
    i32 %143 = mul i32 %140, i32 %140;
    i32 %144 = mul i32 %142, i32 %143;
    i32 %145 = add i32 %86, i32 11;
    i32* %146 = getelementptr &(i32* %91)[i64 11];
    i32 %147 = load i32* %146;
    i32 %148 = mul i32 %145, i32 %145;
    i32 %149 = mul i32 %147, i32 %148;
    i32 %150 = add i32 %86, i32 12;
    i32* %151 = getelementptr &(i32* %91)[i64 12];
    i32 %152 = load i32* %151;
    i32 %153 = mul i32 %150, i32 %150;
    i32 %154 = mul i32 %152, i32 %153;
    i32 %155 = add i32 %86, i32 13;
    i32* %156 = getelementptr &(i32* %91)[i64 13];
    i32 %157 = load i32* %156;
    i32 %158 = mul i32 %155, i32 %155;
    i32 %159 = mul i32 %157, i32 %158;
    i32 %160 = add i32 %86, i32 14;
    i32* %161 = getelementptr &(i32* %91)[i64 14];
    i32 %162 = load i32* %161;
    i32 %163 = mul i32 %160, i32 %160;
    i32 %164 = mul i32 %162, i32 %163;
    i32 %165 = add i32 %86, i32 15;
    i32* %166 = getelementptr &(i32* %91)[i64 15];
    i32 %167 = load i32* %166;
    i32 %168 = mul i32 %165, i32 %165;
    i32 %169 = mul i32 %167, i32 %168;
    i32 %170 = add i32 %85, i32 %94;
    i32 %171 = add i32 %170, i32 %99;
    i32 %172 = add i32 %171, i32 %104;
    i32 %173 = add i32 %172, i32 %109;
    i32 %174 = add i32 %173, i32 %114;
    i32 %175 = add i32 %174, i32 %119;
    i32 %176 = add i32 %175, i32 %124;
    i32 %177 = add i32 %176, i32 %129;
    i32 %178 = add i32 %177, i32 %134;
    i32 %179 = add i32 %178, i32 %139;
    i32 %180 = add i32 %179, i32 %144;
    i32 %181 = add i32 %180, i32 %149;
    i32 %182 = add i32 %181, i32 %154;
    i32 %183 = add i32 %182, i32 %159;
    i32 %184 = add i32 %183, i32 %164;
    i32 %185 = add i32 %184, i32 %169;
    ubr ^super.header2;
^if.then:
    i32 %186 = neg i32 %89;
    ubr ^b3;
^while.header1:
    i32 %187 = phi [^while.header, i32 0] [^if.then1, i32 %302] [^b5, i32 %309];
    i1 %188 = scmp lt i32 %187, i32 %42;
    cbr i1 %188(prob = 0.97), ^while.body7, ^b4;
^while.body5:
    i32 %189 = add i32 %40, i32 1;
    i1 %190 = scmp lt i32 %189, i32 %2;
    cbr i1 %190(prob = 0.97), ^while.body1, ^b1;
^super.header3:
    i32 %191 = phi [^super.header2, i32 %85] [^while.body6, i32 %291];
    i32 %192 = phi [^super.header2, i32 %86] [^while.body6, i32 %193];
    i32 %193 = add i32 %192, i32 16;
    i1 %194 = scmp lt i32 %193, i32 %2;
    cbr i1 %194(prob = 0.67), ^while.body6, ^while.body8;
^b3:
    i32 %195 = phi [^b2, i32 %89] [^if.then, i32 %186];
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %195);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b4:
    i32 %196 = add i32 %78, i32 1;
    ubr ^while.header;
^while.body6:
    i32* %197 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %192];
    i32 %198 = load i32* %197;
    i32 %199 = mul i32 %192, i32 %192;
    i32 %200 = mul i32 %199, i32 %198;
    i32 %201 = add i32 %192, i32 1;
    i32* %202 = getelementptr &(i32* %197)[i64 1];
    i32 %203 = load i32* %202;
    i32 %204 = mul i32 %201, i32 %201;
    i32 %205 = mul i32 %203, i32 %204;
    i32 %206 = add i32 %192, i32 2;
    i32* %207 = getelementptr &(i32* %197)[i64 2];
    i32 %208 = load i32* %207;
    i32 %209 = mul i32 %206, i32 %206;
    i32 %210 = mul i32 %208, i32 %209;
    i32 %211 = add i32 %192, i32 3;
    i32* %212 = getelementptr &(i32* %197)[i64 3];
    i32 %213 = load i32* %212;
    i32 %214 = mul i32 %211, i32 %211;
    i32 %215 = mul i32 %213, i32 %214;
    i32 %216 = add i32 %192, i32 4;
    i32* %217 = getelementptr &(i32* %197)[i64 4];
    i32 %218 = load i32* %217;
    i32 %219 = mul i32 %216, i32 %216;
    i32 %220 = mul i32 %218, i32 %219;
    i32 %221 = add i32 %192, i32 5;
    i32* %222 = getelementptr &(i32* %197)[i64 5];
    i32 %223 = load i32* %222;
    i32 %224 = mul i32 %221, i32 %221;
    i32 %225 = mul i32 %223, i32 %224;
    i32 %226 = add i32 %192, i32 6;
    i32* %227 = getelementptr &(i32* %197)[i64 6];
    i32 %228 = load i32* %227;
    i32 %229 = mul i32 %226, i32 %226;
    i32 %230 = mul i32 %228, i32 %229;
    i32 %231 = add i32 %192, i32 7;
    i32* %232 = getelementptr &(i32* %197)[i64 7];
    i32 %233 = load i32* %232;
    i32 %234 = mul i32 %231, i32 %231;
    i32 %235 = mul i32 %233, i32 %234;
    i32 %236 = add i32 %192, i32 8;
    i32* %237 = getelementptr &(i32* %197)[i64 8];
    i32 %238 = load i32* %237;
    i32 %239 = mul i32 %236, i32 %236;
    i32 %240 = mul i32 %238, i32 %239;
    i32 %241 = add i32 %192, i32 9;
    i32* %242 = getelementptr &(i32* %197)[i64 9];
    i32 %243 = load i32* %242;
    i32 %244 = mul i32 %241, i32 %241;
    i32 %245 = mul i32 %243, i32 %244;
    i32 %246 = add i32 %192, i32 10;
    i32* %247 = getelementptr &(i32* %197)[i64 10];
    i32 %248 = load i32* %247;
    i32 %249 = mul i32 %246, i32 %246;
    i32 %250 = mul i32 %248, i32 %249;
    i32 %251 = add i32 %192, i32 11;
    i32* %252 = getelementptr &(i32* %197)[i64 11];
    i32 %253 = load i32* %252;
    i32 %254 = mul i32 %251, i32 %251;
    i32 %255 = mul i32 %253, i32 %254;
    i32 %256 = add i32 %192, i32 12;
    i32* %257 = getelementptr &(i32* %197)[i64 12];
    i32 %258 = load i32* %257;
    i32 %259 = mul i32 %256, i32 %256;
    i32 %260 = mul i32 %258, i32 %259;
    i32 %261 = add i32 %192, i32 13;
    i32* %262 = getelementptr &(i32* %197)[i64 13];
    i32 %263 = load i32* %262;
    i32 %264 = mul i32 %261, i32 %261;
    i32 %265 = mul i32 %263, i32 %264;
    i32 %266 = add i32 %192, i32 14;
    i32* %267 = getelementptr &(i32* %197)[i64 14];
    i32 %268 = load i32* %267;
    i32 %269 = mul i32 %266, i32 %266;
    i32 %270 = mul i32 %268, i32 %269;
    i32 %271 = add i32 %192, i32 15;
    i32* %272 = getelementptr &(i32* %197)[i64 15];
    i32 %273 = load i32* %272;
    i32 %274 = mul i32 %271, i32 %271;
    i32 %275 = mul i32 %273, i32 %274;
    i32 %276 = add i32 %191, i32 %200;
    i32 %277 = add i32 %276, i32 %205;
    i32 %278 = add i32 %277, i32 %210;
    i32 %279 = add i32 %278, i32 %215;
    i32 %280 = add i32 %279, i32 %220;
    i32 %281 = add i32 %280, i32 %225;
    i32 %282 = add i32 %281, i32 %230;
    i32 %283 = add i32 %282, i32 %235;
    i32 %284 = add i32 %283, i32 %240;
    i32 %285 = add i32 %284, i32 %245;
    i32 %286 = add i32 %285, i32 %250;
    i32 %287 = add i32 %286, i32 %255;
    i32 %288 = add i32 %287, i32 %260;
    i32 %289 = add i32 %288, i32 %265;
    i32 %290 = add i32 %289, i32 %270;
    i32 %291 = add i32 %290, i32 %275;
    ubr ^super.header3;
^while.body7:
    i1 %292 = scmp lt i32 %78, i32 %187;
    cbr i1 %292(prob = 0.5), ^if.then1, ^b5;
^while.body8:
    i32 %293 = phi [^super.header3, i32 %191] [^while.body8, i32 %299];
    i32 %294 = phi [^super.header3, i32 %192] [^while.body8, i32 %300];
    i32* %295 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %294];
    i32 %296 = load i32* %295;
    i32 %297 = mul i32 %294, i32 %294;
    i32 %298 = mul i32 %296, i32 %297;
    i32 %299 = add i32 %298, i32 %293;
    i32 %300 = add i32 %294, i32 1;
    i1 %301 = scmp lt i32 %300, i32 %2;
    cbr i1 %301(prob = 0.97), ^while.body8, ^b2;
^if.then1:
    i32 %302 = add i32 %187, i32 1;
    ubr ^while.header1;
^b5:
    i32 %303 = add i32 %187, i32 %80;
    i32* %304 = getelementptr &(i32* %3)[i32 %303];
    i32 %305 = load i32* %304;
    i32 %306 = mul i32 %187, i32 %43;
    i32 %307 = add i32 %306, i32 %78;
    i32* %308 = getelementptr &(i32* %3)[i32 %307];
    store i32* %308 with i32 %305;
    store i32* %304 with i32 %305;
    i32 %309 = add i32 %187, i32 1;
    ubr ^while.header1;
}
