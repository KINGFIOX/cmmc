internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix { Flexible };
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 28);
    cbr i1 %4(prob = 0.97), ^prebody, ^while.header;
  ^prebody:
    i1 %5 = icmp sgt i32 %0, i32 4;
    [20000000 * i32]* %6 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %5(prob = 0.89), ^while.body, ^while.body1;
  ^while.header:
    i1 %7 = icmp sgt i32 %3, i32 0;
    cbr i1 %7(prob = 0.97), ^prebody1, ^while.header1;
  ^prebody1:
    [20000000 * i32]* %8 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    i32* %9 = getelementptr &([20000000 * i32]* %8)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %10 = phi [^prebody, i32 0] [^while.body, i32 %20];
    i32* %11 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %10];
    store i32* %11 with i32 %10;
    i32* %12 = getelementptr &(i32* %11)[i64 1];
    i32 %13 = add i32 %10, i32 1;
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %11)[i64 2];
    i32 %15 = add i32 %10, i32 2;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %11)[i64 3];
    i32 %17 = add i32 %10, i32 3;
    store i32* %16 with i32 %17;
    i32 %18 = add i32 %10, i32 8;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    i32 %20 = add i32 %10, i32 4;
    cbr i1 %19(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %20] [^while.body1, i32 %23];
    i32* %22 = getelementptr &([20000000 * i32]* %6)[i64 0][i32 %21];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %21, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.75), ^while.body1, ^while.header;
  ^while.header1:
    cbr i1 %7(prob = 0.97), ^prebody2, ^b;
  ^while.body2:
    i32 %25 = phi [^prebody1, i32 0] [^while.body5, i32 %84];
    i32* %26 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i32 %28 = sdiv i32 %0, i32 %27;
    ubr ^while.header2;
  ^prebody2:
    i1 %29 = icmp sgt i32 %3, i32 4;
    [20000000 * i32]* %30 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %29(prob = 0.89), ^while.body3, ^while.body4;
  ^b:
    i32 %31 = phi [^while.header1, i32 0] [^while.body4, i32 %77];
    call (i32) -> void @stoptime(i32 47);
    i32 %32 = abs i32 %31;
    call (i32) -> void @putint(i32 %32);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.header2:
    i32 %33 = phi [^while.body2, i32 0] [^b1, i32 %86];
    i1 %34 = icmp sgt i32 %28, i32 %33;
    i32 %35 = mul i32 %27, i32 %33;
    cbr i1 %34(prob = 0.97), ^while.header3, ^while.body5;
  ^while.body3:
    i32 %36 = phi [^prebody2, i32 0] [^while.body3, i32 %62];
    i32 %37 = phi [^prebody2, i32 0] [^while.body3, i32 %69];
    i32 %38 = phi [^prebody2, i32 1] [^while.body3, i32 %68];
    i32 %39 = phi [^prebody2, i32 0] [^while.body3, i32 %65];
    i32* %40 = getelementptr &([20000000 * i32]* %30)[i64 0][i32 %37];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %40)[i64 1];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %38, i32 %39;
    i32 %45 = mul i32 %43, i32 %44;
    i32 %46 = mul i32 %39, i32 %41;
    i32 %47 = add i32 %45, i32 %46;
    i32 %48 = add i32 %38, i32 1;
    i32 %49 = mul i32 %48, i32 2;
    i32 %50 = add i32 %39, i32 %49;
    i32* %51 = getelementptr &(i32* %40)[i64 2];
    i32 %52 = load i32* %51;
    i32 %53 = mul i32 %50, i32 %52;
    i32 %54 = add i32 %47, i32 %53;
    i32 %55 = mul i32 %38, i32 3;
    i32 %56 = add i32 %55, i32 6;
    i32 %57 = add i32 %39, i32 %56;
    i32* %58 = getelementptr &(i32* %40)[i64 3];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %57, i32 %59;
    i32 %61 = add i32 %54, i32 %60;
    i32 %62 = add i32 %36, i32 %61;
    i32 %63 = mul i32 %38, i32 4;
    i32 %64 = add i32 %63, i32 12;
    i32 %65 = add i32 %39, i32 %64;
    i32 %66 = add i32 %37, i32 8;
    i1 %67 = icmp sgt i32 %3, i32 %66;
    i32 %68 = add i32 %38, i32 8;
    i32 %69 = add i32 %37, i32 4;
    cbr i1 %67(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %70 = phi [^prebody2, i32 0] [^while.body3, i32 %65] [^while.body4, i32 %80];
    i32 %71 = phi [^prebody2, i32 1] [^while.body3, i32 %68] [^while.body4, i32 %81];
    i32 %72 = phi [^prebody2, i32 0] [^while.body3, i32 %69] [^while.body4, i32 %78];
    i32 %73 = phi [^prebody2, i32 0] [^while.body3, i32 %62] [^while.body4, i32 %77];
    i32* %74 = getelementptr &([20000000 * i32]* %30)[i64 0][i32 %72];
    i32 %75 = load i32* %74;
    i32 %76 = mul i32 %70, i32 %75;
    i32 %77 = add i32 %73, i32 %76;
    i32 %78 = add i32 %72, i32 1;
    i1 %79 = icmp sgt i32 %3, i32 %78;
    i32 %80 = add i32 %70, i32 %71;
    i32 %81 = add i32 %71, i32 2;
    cbr i1 %79(prob = 0.75), ^while.body4, ^b;
  ^while.header3:
    i32 %82 = phi [^while.header2, i32 0] [^if.then, i32 %88] [^b2, i32 %95];
    i1 %83 = icmp sgt i32 %27, i32 %82;
    cbr i1 %83(prob = 0.97), ^while.body6, ^b1;
  ^while.body5:
    i32 %84 = add i32 %25, i32 1;
    i1 %85 = icmp sgt i32 %3, i32 %84;
    cbr i1 %85(prob = 0.97), ^while.body2, ^while.header1;
  ^b1:
    i32 %86 = add i32 %33, i32 1;
    ubr ^while.header2;
  ^while.body6:
    i1 %87 = icmp slt i32 %33, i32 %82;
    cbr i1 %87(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %88 = add i32 %82, i32 1;
    ubr ^while.header3;
  ^b2:
    i32 %89 = mul i32 %28, i32 %82;
    i32 %90 = add i32 %33, i32 %89;
    i32* %91 = getelementptr &(i32* %9)[i32 %90];
    i32 %92 = add i32 %35, i32 %82;
    i32* %93 = getelementptr &(i32* %9)[i32 %92];
    i32 %94 = load i32* %93;
    store i32* %91 with i32 %94;
    i32 %95 = add i32 %82, i32 1;
    ubr ^while.header3;
}
