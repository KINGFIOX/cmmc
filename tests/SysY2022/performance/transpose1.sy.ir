internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 28);
    i1 %4 = icmp sgt i32 %0, i32 0;
    [20000000 * i32]* %5 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %4(prob = 0.984615), ^b, ^prebody;
  ^b:
    [4 * i8]* %6 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %7 = ptradd [4 * i8]* %6, i32 0;
    store i32* %7 with i32 %0;
    i8* %8 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %8);
    ubr ^prebody;
  ^prebody:
    i32* %9 = getelementptr &([20000000 * i32]* %5)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %10 = phi [^prebody, i32 0] [^b1, i32 %21];
    i32* %11 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i32 %13 = sdiv i32 %0, i32 %12;
    i1 %14 = icmp sgt i32 %13, i32 0;
    i32 %15 = mul i32 %13, i32 4;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^while.body, i32 0] [^b2, i32 %27];
    i32 %17 = phi [^while.body, i32 0] [^b2, i32 %18];
    i32 %18 = add i32 %17, i32 1;
    i32 %19 = smin i32 %12, i32 %18;
    i1 %20 = icmp sgt i32 %19, i32 0;
    cbr i1 %20(prob = 0.886154), ^super.header, ^b2;
  ^b1:
    i32 %21 = add i32 %10, i32 1;
    i1 %22 = icmp sgt i32 %3, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body, ^b3;
  ^super.header:
    i32* %23 = getelementptr &(i32* %9)[i32 %17];
    i32* %24 = getelementptr &(i32* %9)[i32 %16];
    i1 %25 = icmp sgt i32 %19, i32 3;
    cbr i1 %25(prob = 0.941176), ^prebody1, ^scalar.header;
  ^b2:
    i1 %26 = icmp sgt i32 %13, i32 %18;
    i32 %27 = add i32 %12, i32 %16;
    cbr i1 %26(prob = 0.984615), ^while.body1, ^b1;
  ^b3:
    [8 * i8]* %28 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %29 = ptradd [8 * i8]* %28, i32 0;
    store i32* %29 with i32 0;
    i32* %30 = ptradd [8 * i8]* %28, i32 4;
    store i32* %30 with i32 %3;
    i8* %31 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %3, i8* %31);
    i32 %32 = load i32* %29;
    i32 %33 = abs i32 %32;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody1:
    i32* %34 = getelementptr &(i32* %23)[i32 %13];
    i32* %35 = getelementptr &(i32* %34)[i32 %13];
    i32* %36 = getelementptr &(i32* %35)[i32 %13];
    i32 %37 = add i32 %19, i32 -3;
    ubr ^b4;
  ^scalar.header:
    i32 %38 = phi [^super.header, i32 0] [^b4, i32 %55];
    i32 %39 = phi [^super.header, i32 0] [^b4, i32 %57];
    i1 %40 = icmp sgt i32 %19, i32 %38;
    cbr i1 %40(prob = 0.75), ^b5, ^b2;
  ^b4:
    i32 %41 = phi [^prebody1, i32 0] [^b4, i32 %55];
    i32 %42 = phi [^prebody1, i32 0] [^b4, i32 %57];
    i32* %43 = getelementptr &(i32* %24)[i32 %41];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %23)[i32 %42];
    store i32* %45 with i32 %44;
    i32* %46 = getelementptr &(i32* %43)[i64 1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %34)[i32 %42];
    store i32* %48 with i32 %47;
    i32* %49 = getelementptr &(i32* %43)[i64 2];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %35)[i32 %42];
    store i32* %51 with i32 %50;
    i32* %52 = getelementptr &(i32* %43)[i64 3];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %36)[i32 %42];
    store i32* %54 with i32 %53;
    i32 %55 = add i32 %41, i32 4;
    i1 %56 = icmp sgt i32 %37, i32 %55;
    i32 %57 = add i32 %15, i32 %42;
    cbr i1 %56(prob = 0.941176), ^b4, ^scalar.header;
  ^b5 {scalar}:
    i32 %58 = phi [^scalar.header, i32 %39] [^b5, i32 %65];
    i32 %59 = phi [^scalar.header, i32 %38] [^b5, i32 %63];
    i32* %60 = getelementptr &(i32* %24)[i32 %59];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %23)[i32 %58];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %59, i32 1;
    i1 %64 = icmp sgt i32 %19, i32 %63;
    i32 %65 = add i32 %13, i32 %58;
    cbr i1 %64(prob = 0.75), ^b5, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [20000000 * i32]* %4 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %5 = add i32 %0, i32 15;
    i32 %6 = add i32 %1, i32 -3;
    i1 %7 = icmp slt i32 %5, i32 %6;
    i32 %8 = add i32 %1, i32 -18;
    cbr i1 %7(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %9 = phi [^b, i32 0] [^scalar.final1, i32 %130];
    i32 %10 = phi [^b, i32 %0] [^scalar.final1, i32 %131];
    i32 %11 = phi [^b, i32 undef] [^scalar.final1, i32 %130];
    i1 %12 = icmp sgt i32 %1, i32 %10;
    cbr i1 %12(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %13 = phi [^super.header, i32 %0] [^b1, i32 %110];
    i32 %14 = phi [^super.header, i32 0] [^b1, i32 %109];
    i32* %15 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %13];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %15)[i64 1];
    i32 %18 = load i32* %17;
    i32 %19 = add i32 %13, i32 1;
    i32 %20 = mul i32 %19, i32 %19;
    i32 %21 = mul i32 %18, i32 %20;
    i32 %22 = mul i32 %13, i32 %13;
    i32 %23 = mul i32 %16, i32 %22;
    i32 %24 = add i32 %21, i32 %23;
    i32* %25 = getelementptr &(i32* %15)[i64 2];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %13, i32 2;
    i32 %28 = mul i32 %27, i32 %27;
    i32 %29 = mul i32 %26, i32 %28;
    i32 %30 = add i32 %24, i32 %29;
    i32* %31 = getelementptr &(i32* %15)[i64 3];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %13, i32 3;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = mul i32 %32, i32 %34;
    i32 %36 = add i32 %30, i32 %35;
    i32* %37 = getelementptr &(i32* %15)[i64 4];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %13, i32 4;
    i32 %40 = mul i32 %39, i32 %39;
    i32 %41 = mul i32 %38, i32 %40;
    i32 %42 = add i32 %36, i32 %41;
    i32* %43 = getelementptr &(i32* %15)[i64 5];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %13, i32 5;
    i32 %46 = mul i32 %45, i32 %45;
    i32 %47 = mul i32 %44, i32 %46;
    i32 %48 = add i32 %42, i32 %47;
    i32* %49 = getelementptr &(i32* %15)[i64 6];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %13, i32 6;
    i32 %52 = mul i32 %51, i32 %51;
    i32 %53 = mul i32 %50, i32 %52;
    i32 %54 = add i32 %48, i32 %53;
    i32* %55 = getelementptr &(i32* %15)[i64 7];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %13, i32 7;
    i32 %58 = mul i32 %57, i32 %57;
    i32 %59 = mul i32 %56, i32 %58;
    i32 %60 = add i32 %54, i32 %59;
    i32* %61 = getelementptr &(i32* %15)[i64 8];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %13, i32 8;
    i32 %64 = mul i32 %63, i32 %63;
    i32 %65 = mul i32 %62, i32 %64;
    i32 %66 = add i32 %60, i32 %65;
    i32* %67 = getelementptr &(i32* %15)[i64 9];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %13, i32 9;
    i32 %70 = mul i32 %69, i32 %69;
    i32 %71 = mul i32 %68, i32 %70;
    i32 %72 = add i32 %66, i32 %71;
    i32* %73 = getelementptr &(i32* %15)[i64 10];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %13, i32 10;
    i32 %76 = mul i32 %75, i32 %75;
    i32 %77 = mul i32 %74, i32 %76;
    i32 %78 = add i32 %72, i32 %77;
    i32* %79 = getelementptr &(i32* %15)[i64 11];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %13, i32 11;
    i32 %82 = mul i32 %81, i32 %81;
    i32 %83 = mul i32 %80, i32 %82;
    i32 %84 = add i32 %78, i32 %83;
    i32* %85 = getelementptr &(i32* %15)[i64 12];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %13, i32 12;
    i32 %88 = mul i32 %87, i32 %87;
    i32 %89 = mul i32 %86, i32 %88;
    i32 %90 = add i32 %84, i32 %89;
    i32* %91 = getelementptr &(i32* %15)[i64 13];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %13, i32 13;
    i32 %94 = mul i32 %93, i32 %93;
    i32 %95 = mul i32 %92, i32 %94;
    i32 %96 = add i32 %90, i32 %95;
    i32* %97 = getelementptr &(i32* %15)[i64 14];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %13, i32 14;
    i32 %100 = mul i32 %99, i32 %99;
    i32 %101 = mul i32 %98, i32 %100;
    i32 %102 = add i32 %96, i32 %101;
    i32* %103 = getelementptr &(i32* %15)[i64 15];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %13, i32 15;
    i32 %106 = mul i32 %105, i32 %105;
    i32 %107 = mul i32 %104, i32 %106;
    i32 %108 = add i32 %102, i32 %107;
    i32 %109 = add i32 %14, i32 %108;
    i32 %110 = add i32 %13, i32 16;
    i1 %111 = icmp sgt i32 %8, i32 %110;
    cbr i1 %111(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %112 = phi [^super.header, i32 %0] [^b1, i32 %110];
    i32 %113 = phi [^super.header, i32 0] [^b1, i32 %109];
    i32 %114 = phi [^super.header, i32 undef] [^b1, i32 %109];
    i32 %115 = phi [^super.header, i32 undef] [^b1, i32 %110];
    i1 %116 = icmp sgt i32 %6, i32 %112;
    cbr i1 %116(prob = 0.75), ^b3, ^scalar.final1;
  ^b2 {scalar}:
    i32 %117 = phi [^scalar.header, i32 %10] [^b2, i32 %124];
    i32 %118 = phi [^scalar.header, i32 %9] [^b2, i32 %123];
    i32* %119 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %117];
    i32 %120 = load i32* %119;
    i32 %121 = mul i32 %117, i32 %117;
    i32 %122 = mul i32 %120, i32 %121;
    i32 %123 = add i32 %118, i32 %122;
    i32 %124 = add i32 %117, i32 1;
    i1 %125 = icmp sgt i32 %1, i32 %124;
    cbr i1 %125(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    i32 %126 = phi [^scalar.header, i32 %11] [^b2, i32 %123];
    [8 * i8]* %127 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %128 = ptradd [8 * i8]* %127, i32 0;
    atomicadd i32* %128, i32 %126;
    ret;
  ^scalar.final1:
    i32 %130 = phi [^scalar.header1, i32 %114] [^b3, i32 %156];
    i32 %131 = phi [^scalar.header1, i32 %115] [^b3, i32 %157];
    ubr ^scalar.header;
  ^b3 {scalar}:
    i32 %132 = phi [^scalar.header1, i32 %113] [^b3, i32 %156];
    i32 %133 = phi [^scalar.header1, i32 %112] [^b3, i32 %157];
    i32* %134 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %134)[i64 1];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %133, i32 1;
    i32 %139 = mul i32 %138, i32 %138;
    i32 %140 = mul i32 %137, i32 %139;
    i32 %141 = mul i32 %133, i32 %133;
    i32 %142 = mul i32 %135, i32 %141;
    i32 %143 = add i32 %140, i32 %142;
    i32* %144 = getelementptr &(i32* %134)[i64 2];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %133, i32 2;
    i32 %147 = mul i32 %146, i32 %146;
    i32 %148 = mul i32 %145, i32 %147;
    i32 %149 = add i32 %143, i32 %148;
    i32* %150 = getelementptr &(i32* %134)[i64 3];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %133, i32 3;
    i32 %153 = mul i32 %152, i32 %152;
    i32 %154 = mul i32 %151, i32 %153;
    i32 %155 = add i32 %149, i32 %154;
    i32 %156 = add i32 %132, i32 %155;
    i32 %157 = add i32 %133, i32 4;
    i1 %158 = icmp sgt i32 %6, i32 %157;
    cbr i1 %158(prob = 0.75), ^b3, ^scalar.final1;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [20000000 * i32]* %4 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %5 = add i32 %0, i32 15;
    i32 %6 = add i32 %1, i32 -3;
    i1 %7 = icmp slt i32 %5, i32 %6;
    i32 %8 = add i32 %1, i32 -18;
    cbr i1 %7(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %9 = phi [^b, i32 %0] [^scalar.header1, i32 %46] [^b3, i32 %60];
    i1 %10 = icmp sgt i32 %1, i32 %9;
    cbr i1 %10(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %11 = phi [^super.header, i32 %0] [^b1, i32 %43];
    i32* %12 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %11];
    store i32* %12 with i32 %11;
    i32* %13 = getelementptr &(i32* %12)[i64 1];
    i32 %14 = add i32 %11, i32 1;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %12)[i64 2];
    i32 %16 = add i32 %11, i32 2;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %12)[i64 3];
    i32 %18 = add i32 %11, i32 3;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %12)[i64 4];
    i32 %20 = add i32 %11, i32 4;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %12)[i64 5];
    i32 %22 = add i32 %11, i32 5;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %12)[i64 6];
    i32 %24 = add i32 %11, i32 6;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %12)[i64 7];
    i32 %26 = add i32 %11, i32 7;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %12)[i64 8];
    i32 %28 = add i32 %11, i32 8;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %12)[i64 9];
    i32 %30 = add i32 %11, i32 9;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %12)[i64 10];
    i32 %32 = add i32 %11, i32 10;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %12)[i64 11];
    i32 %34 = add i32 %11, i32 11;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %12)[i64 12];
    i32 %36 = add i32 %11, i32 12;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %12)[i64 13];
    i32 %38 = add i32 %11, i32 13;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %12)[i64 14];
    i32 %40 = add i32 %11, i32 14;
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &(i32* %12)[i64 15];
    i32 %42 = add i32 %11, i32 15;
    store i32* %41 with i32 %42;
    i32 %43 = add i32 %11, i32 16;
    i1 %44 = icmp sgt i32 %8, i32 %43;
    cbr i1 %44(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %45 = phi [^super.header, i32 %0] [^b1, i32 %43];
    i32 %46 = phi [^super.header, i32 undef] [^b1, i32 %43];
    i1 %47 = icmp sgt i32 %6, i32 %45;
    cbr i1 %47(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %48 = phi [^scalar.header, i32 %9] [^b2, i32 %50];
    i32* %49 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %48];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %48, i32 1;
    i1 %51 = icmp sgt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %52 = phi [^scalar.header1, i32 %45] [^b3, i32 %60];
    i32* %53 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %52];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    i32 %55 = add i32 %52, i32 1;
    store i32* %54 with i32 %55;
    i32* %56 = getelementptr &(i32* %53)[i64 2];
    i32 %57 = add i32 %52, i32 2;
    store i32* %56 with i32 %57;
    i32* %58 = getelementptr &(i32* %53)[i64 3];
    i32 %59 = add i32 %52, i32 3;
    store i32* %58 with i32 %59;
    i32 %60 = add i32 %52, i32 4;
    i1 %61 = icmp sgt i32 %6, i32 %60;
    cbr i1 %61(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
