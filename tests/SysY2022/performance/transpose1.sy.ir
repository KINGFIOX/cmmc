internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 28);
    i1 %3 = scmp gt i32 %0, i32 0;
    i32* %4 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32* %6 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %5];
    store i32* %6 with i32 %5;
    i32 %7 = add i32 %5, i32 1;
    i1 %8 = scmp lt i32 %7, i32 %0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^b:
    i1 %9 = scmp gt i32 %2, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %10 = phi [^b, i32 0] [^while.body4, i32 %26];
    i32* %11 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i32 %13 = sdiv i32 %0, i32 %12;
    i1 %14 = scmp gt i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^while.body4;
^b1:
    cbr i1 %9(prob = 0.97), ^while.body3, ^b2;
^while.body2:
    i32 %15 = phi [^while.body1, i32 0] [^b4, i32 %36];
    i32 %16 = mul i32 %15, i32 %12;
    ubr ^while.guard;
^while.body3:
    i32 %17 = phi [^b1, i32 0] [^while.body3, i32 %23];
    i32 %18 = phi [^b1, i32 0] [^while.body3, i32 %24];
    i32* %19 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = mul i32 %18, i32 %18;
    i32 %22 = mul i32 %20, i32 %21;
    i32 %23 = add i32 %22, i32 %17;
    i32 %24 = add i32 %18, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %2;
    cbr i1 %25(prob = 0.97), ^while.body3, ^b2;
^while.body4:
    i32 %26 = add i32 %10, i32 1;
    i1 %27 = scmp lt i32 %26, i32 %2;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b1;
^b2:
    i32 %28 = phi [^b1, i32 0] [^while.body3, i32 %23];
    i1 %29 = scmp lt i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %30 = neg i32 %28;
    ubr ^b3;
^while.guard:
    i32 %31 = phi [^while.body2, i32 0] [^if.then1, i32 %38];
    i1 %32 = scmp lt i32 %31, i32 %12;
    cbr i1 %32(prob = 0.97), ^while.body5, ^b4;
^b3:
    i32 %33 = phi [^b2, i32 %28] [^if.then, i32 %30];
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body5:
    i32 %34 = phi [^while.guard, i32 %31] [^b5, i32 %45];
    i1 %35 = scmp lt i32 %15, i32 %34;
    cbr i1 %35(prob = 0.5), ^if.then1, ^b5;
^b4:
    i32 %36 = add i32 %15, i32 1;
    i1 %37 = scmp lt i32 %36, i32 %13;
    cbr i1 %37(prob = 0.97), ^while.body2, ^while.body4;
^if.then1:
    i32 %38 = add i32 %34, i32 1;
    ubr ^while.guard;
^b5:
    i32 %39 = add i32 %34, i32 %16;
    i32* %40 = getelementptr &(i32* %4)[i32 %39];
    i32 %41 = load i32* %40;
    i32 %42 = mul i32 %34, i32 %13;
    i32 %43 = add i32 %15, i32 %42;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    store i32* %44 with i32 %41;
    store i32* %40 with i32 %41;
    i32 %45 = add i32 %34, i32 1;
    i1 %46 = scmp lt i32 %45, i32 %12;
    cbr i1 %46(prob = 0.97), ^while.body5, ^b4;
}
