internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 28);
    [20000000 * i32]* %5 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    i32* %6 = getelementptr &([20000000 * i32]* %5)[i64 0][i64 0];
    cbr i1 %4(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %8 = add i32 %7, i32 16;
    i1 %9 = scmp lt i32 %8, i32 %0;
    cbr i1 %9(prob = 0.67), ^while.body, ^super.header1;
  ^b:
    i1 %10 = scmp gt i32 %3, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
  ^while.body:
    i32* %11 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %7];
    store i32* %11 with i32 %7;
    i32* %12 = getelementptr &(i32* %11)[i64 1];
    i32 %13 = add i32 %7, i32 1;
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %11)[i64 2];
    i32 %15 = add i32 %7, i32 2;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %11)[i64 3];
    i32 %17 = add i32 %7, i32 3;
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %11)[i64 4];
    i32 %19 = add i32 %7, i32 4;
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &(i32* %11)[i64 5];
    i32 %21 = add i32 %7, i32 5;
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &(i32* %11)[i64 6];
    i32 %23 = add i32 %7, i32 6;
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %11)[i64 7];
    i32 %25 = add i32 %7, i32 7;
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %11)[i64 8];
    i32 %27 = add i32 %7, i32 8;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %11)[i64 9];
    i32 %29 = add i32 %7, i32 9;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %11)[i64 10];
    i32 %31 = add i32 %7, i32 10;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %11)[i64 11];
    i32 %33 = add i32 %7, i32 11;
    store i32* %32 with i32 %33;
    i32* %34 = getelementptr &(i32* %11)[i64 12];
    i32 %35 = add i32 %7, i32 12;
    store i32* %34 with i32 %35;
    i32* %36 = getelementptr &(i32* %11)[i64 13];
    i32 %37 = add i32 %7, i32 13;
    store i32* %36 with i32 %37;
    i32* %38 = getelementptr &(i32* %11)[i64 14];
    i32 %39 = add i32 %7, i32 14;
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &(i32* %11)[i64 15];
    i32 %41 = add i32 %7, i32 15;
    store i32* %40 with i32 %41;
    ubr ^super.header;
  ^while.body1:
    i32 %42 = phi [^b, i32 0] [^while.body5, i32 %191];
    i32* %43 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %42];
    i32 %44 = load i32* %43;
    i32 %45 = sdiv i32 %0, i32 %44;
    ubr ^while.header;
  ^super.header1:
    i32 %46 = phi [^super.header, i32 %7] [^while.body2, i32 %47];
    i32 %47 = add i32 %46, i32 16;
    i1 %48 = scmp lt i32 %47, i32 %0;
    cbr i1 %48(prob = 0.67), ^while.body2, ^while.body3;
  ^b1:
    cbr i1 %10(prob = 0.97), ^super.header2, ^b2;
  ^while.body2:
    i32* %49 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %46];
    store i32* %49 with i32 %46;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    i32 %51 = add i32 %46, i32 1;
    store i32* %50 with i32 %51;
    i32* %52 = getelementptr &(i32* %49)[i64 2];
    i32 %53 = add i32 %46, i32 2;
    store i32* %52 with i32 %53;
    i32* %54 = getelementptr &(i32* %49)[i64 3];
    i32 %55 = add i32 %46, i32 3;
    store i32* %54 with i32 %55;
    i32* %56 = getelementptr &(i32* %49)[i64 4];
    i32 %57 = add i32 %46, i32 4;
    store i32* %56 with i32 %57;
    i32* %58 = getelementptr &(i32* %49)[i64 5];
    i32 %59 = add i32 %46, i32 5;
    store i32* %58 with i32 %59;
    i32* %60 = getelementptr &(i32* %49)[i64 6];
    i32 %61 = add i32 %46, i32 6;
    store i32* %60 with i32 %61;
    i32* %62 = getelementptr &(i32* %49)[i64 7];
    i32 %63 = add i32 %46, i32 7;
    store i32* %62 with i32 %63;
    i32* %64 = getelementptr &(i32* %49)[i64 8];
    i32 %65 = add i32 %46, i32 8;
    store i32* %64 with i32 %65;
    i32* %66 = getelementptr &(i32* %49)[i64 9];
    i32 %67 = add i32 %46, i32 9;
    store i32* %66 with i32 %67;
    i32* %68 = getelementptr &(i32* %49)[i64 10];
    i32 %69 = add i32 %46, i32 10;
    store i32* %68 with i32 %69;
    i32* %70 = getelementptr &(i32* %49)[i64 11];
    i32 %71 = add i32 %46, i32 11;
    store i32* %70 with i32 %71;
    i32* %72 = getelementptr &(i32* %49)[i64 12];
    i32 %73 = add i32 %46, i32 12;
    store i32* %72 with i32 %73;
    i32* %74 = getelementptr &(i32* %49)[i64 13];
    i32 %75 = add i32 %46, i32 13;
    store i32* %74 with i32 %75;
    i32* %76 = getelementptr &(i32* %49)[i64 14];
    i32 %77 = add i32 %46, i32 14;
    store i32* %76 with i32 %77;
    i32* %78 = getelementptr &(i32* %49)[i64 15];
    i32 %79 = add i32 %46, i32 15;
    store i32* %78 with i32 %79;
    ubr ^super.header1;
  ^while.header:
    i32 %80 = phi [^while.body1, i32 0] [^b4, i32 %198];
    i1 %81 = scmp lt i32 %80, i32 %45;
    i32 %82 = mul i32 %44, i32 %80;
    cbr i1 %81(prob = 0.97), ^while.header1, ^while.body5;
  ^while.body3:
    i32 %83 = phi [^super.header1, i32 %46] [^while.body3, i32 %85];
    i32* %84 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %83];
    store i32* %84 with i32 %83;
    i32 %85 = add i32 %83, i32 1;
    i1 %86 = scmp lt i32 %85, i32 %0;
    cbr i1 %86(prob = 0.97), ^while.body3, ^b;
  ^super.header2:
    i32 %87 = phi [^b1, i32 0] [^while.body4, i32 %187];
    i32 %88 = phi [^b1, i32 0] [^while.body4, i32 %89];
    i32 %89 = add i32 %88, i32 16;
    i1 %90 = scmp lt i32 %89, i32 %3;
    cbr i1 %90(prob = 0.67), ^while.body4, ^super.header3;
  ^b2:
    i32 %91 = phi [^b1, i32 0] [^while.body8, i32 %301];
    i1 %92 = scmp lt i32 %91, i32 0;
    cbr i1 %92(prob = 0.5), ^if.then, ^b3;
  ^while.body4:
    i32* %93 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %88];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %93)[i64 1];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %88, i32 1;
    i32 %98 = mul i32 %97, i32 %97;
    i32 %99 = mul i32 %98, i32 %96;
    i32 %100 = mul i32 %88, i32 %88;
    i32 %101 = mul i32 %100, i32 %94;
    i32 %102 = add i32 %87, i32 %101;
    i32 %103 = add i32 %102, i32 %99;
    i32* %104 = getelementptr &(i32* %93)[i64 2];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %88, i32 2;
    i32 %107 = mul i32 %106, i32 %106;
    i32 %108 = mul i32 %107, i32 %105;
    i32 %109 = add i32 %103, i32 %108;
    i32* %110 = getelementptr &(i32* %93)[i64 3];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %88, i32 3;
    i32 %113 = mul i32 %112, i32 %112;
    i32 %114 = mul i32 %113, i32 %111;
    i32 %115 = add i32 %109, i32 %114;
    i32* %116 = getelementptr &(i32* %93)[i64 4];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %88, i32 4;
    i32 %119 = mul i32 %118, i32 %118;
    i32 %120 = mul i32 %119, i32 %117;
    i32 %121 = add i32 %115, i32 %120;
    i32* %122 = getelementptr &(i32* %93)[i64 5];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %88, i32 5;
    i32 %125 = mul i32 %124, i32 %124;
    i32 %126 = mul i32 %125, i32 %123;
    i32 %127 = add i32 %121, i32 %126;
    i32* %128 = getelementptr &(i32* %93)[i64 6];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %88, i32 6;
    i32 %131 = mul i32 %130, i32 %130;
    i32 %132 = mul i32 %131, i32 %129;
    i32 %133 = add i32 %127, i32 %132;
    i32* %134 = getelementptr &(i32* %93)[i64 7];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %88, i32 7;
    i32 %137 = mul i32 %136, i32 %136;
    i32 %138 = mul i32 %137, i32 %135;
    i32 %139 = add i32 %133, i32 %138;
    i32* %140 = getelementptr &(i32* %93)[i64 8];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %88, i32 8;
    i32 %143 = mul i32 %142, i32 %142;
    i32 %144 = mul i32 %143, i32 %141;
    i32 %145 = add i32 %139, i32 %144;
    i32* %146 = getelementptr &(i32* %93)[i64 9];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %88, i32 9;
    i32 %149 = mul i32 %148, i32 %148;
    i32 %150 = mul i32 %149, i32 %147;
    i32 %151 = add i32 %145, i32 %150;
    i32* %152 = getelementptr &(i32* %93)[i64 10];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %88, i32 10;
    i32 %155 = mul i32 %154, i32 %154;
    i32 %156 = mul i32 %155, i32 %153;
    i32 %157 = add i32 %151, i32 %156;
    i32* %158 = getelementptr &(i32* %93)[i64 11];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %88, i32 11;
    i32 %161 = mul i32 %160, i32 %160;
    i32 %162 = mul i32 %161, i32 %159;
    i32 %163 = add i32 %157, i32 %162;
    i32* %164 = getelementptr &(i32* %93)[i64 12];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %88, i32 12;
    i32 %167 = mul i32 %166, i32 %166;
    i32 %168 = mul i32 %167, i32 %165;
    i32 %169 = add i32 %163, i32 %168;
    i32* %170 = getelementptr &(i32* %93)[i64 13];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %88, i32 13;
    i32 %173 = mul i32 %172, i32 %172;
    i32 %174 = mul i32 %173, i32 %171;
    i32 %175 = add i32 %169, i32 %174;
    i32* %176 = getelementptr &(i32* %93)[i64 14];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %88, i32 14;
    i32 %179 = mul i32 %178, i32 %178;
    i32 %180 = mul i32 %179, i32 %177;
    i32 %181 = add i32 %175, i32 %180;
    i32* %182 = getelementptr &(i32* %93)[i64 15];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %88, i32 15;
    i32 %185 = mul i32 %184, i32 %184;
    i32 %186 = mul i32 %185, i32 %183;
    i32 %187 = add i32 %181, i32 %186;
    ubr ^super.header2;
  ^if.then:
    i32 %188 = neg i32 %91;
    ubr ^b3;
  ^while.header1:
    i32 %189 = phi [^while.header, i32 0] [^if.then1, i32 %304] [^b5, i32 %311];
    i1 %190 = scmp lt i32 %189, i32 %44;
    cbr i1 %190(prob = 0.97), ^while.body7, ^b4;
  ^while.body5:
    i32 %191 = add i32 %42, i32 1;
    i1 %192 = scmp lt i32 %191, i32 %3;
    cbr i1 %192(prob = 0.97), ^while.body1, ^b1;
  ^super.header3:
    i32 %193 = phi [^super.header2, i32 %87] [^while.body6, i32 %293];
    i32 %194 = phi [^super.header2, i32 %88] [^while.body6, i32 %195];
    i32 %195 = add i32 %194, i32 16;
    i1 %196 = scmp lt i32 %195, i32 %3;
    cbr i1 %196(prob = 0.67), ^while.body6, ^while.body8;
  ^b3:
    i32 %197 = phi [^b2, i32 %91] [^if.then, i32 %188];
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %197);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b4:
    i32 %198 = add i32 %80, i32 1;
    ubr ^while.header;
  ^while.body6:
    i32* %199 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %194];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %199)[i64 1];
    i32 %202 = load i32* %201;
    i32 %203 = add i32 %194, i32 1;
    i32 %204 = mul i32 %203, i32 %203;
    i32 %205 = mul i32 %204, i32 %202;
    i32 %206 = mul i32 %194, i32 %194;
    i32 %207 = mul i32 %206, i32 %200;
    i32 %208 = add i32 %193, i32 %207;
    i32 %209 = add i32 %208, i32 %205;
    i32* %210 = getelementptr &(i32* %199)[i64 2];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %194, i32 2;
    i32 %213 = mul i32 %212, i32 %212;
    i32 %214 = mul i32 %213, i32 %211;
    i32 %215 = add i32 %209, i32 %214;
    i32* %216 = getelementptr &(i32* %199)[i64 3];
    i32 %217 = load i32* %216;
    i32 %218 = add i32 %194, i32 3;
    i32 %219 = mul i32 %218, i32 %218;
    i32 %220 = mul i32 %219, i32 %217;
    i32 %221 = add i32 %215, i32 %220;
    i32* %222 = getelementptr &(i32* %199)[i64 4];
    i32 %223 = load i32* %222;
    i32 %224 = add i32 %194, i32 4;
    i32 %225 = mul i32 %224, i32 %224;
    i32 %226 = mul i32 %225, i32 %223;
    i32 %227 = add i32 %221, i32 %226;
    i32* %228 = getelementptr &(i32* %199)[i64 5];
    i32 %229 = load i32* %228;
    i32 %230 = add i32 %194, i32 5;
    i32 %231 = mul i32 %230, i32 %230;
    i32 %232 = mul i32 %231, i32 %229;
    i32 %233 = add i32 %227, i32 %232;
    i32* %234 = getelementptr &(i32* %199)[i64 6];
    i32 %235 = load i32* %234;
    i32 %236 = add i32 %194, i32 6;
    i32 %237 = mul i32 %236, i32 %236;
    i32 %238 = mul i32 %237, i32 %235;
    i32 %239 = add i32 %233, i32 %238;
    i32* %240 = getelementptr &(i32* %199)[i64 7];
    i32 %241 = load i32* %240;
    i32 %242 = add i32 %194, i32 7;
    i32 %243 = mul i32 %242, i32 %242;
    i32 %244 = mul i32 %243, i32 %241;
    i32 %245 = add i32 %239, i32 %244;
    i32* %246 = getelementptr &(i32* %199)[i64 8];
    i32 %247 = load i32* %246;
    i32 %248 = add i32 %194, i32 8;
    i32 %249 = mul i32 %248, i32 %248;
    i32 %250 = mul i32 %249, i32 %247;
    i32 %251 = add i32 %245, i32 %250;
    i32* %252 = getelementptr &(i32* %199)[i64 9];
    i32 %253 = load i32* %252;
    i32 %254 = add i32 %194, i32 9;
    i32 %255 = mul i32 %254, i32 %254;
    i32 %256 = mul i32 %255, i32 %253;
    i32 %257 = add i32 %251, i32 %256;
    i32* %258 = getelementptr &(i32* %199)[i64 10];
    i32 %259 = load i32* %258;
    i32 %260 = add i32 %194, i32 10;
    i32 %261 = mul i32 %260, i32 %260;
    i32 %262 = mul i32 %261, i32 %259;
    i32 %263 = add i32 %257, i32 %262;
    i32* %264 = getelementptr &(i32* %199)[i64 11];
    i32 %265 = load i32* %264;
    i32 %266 = add i32 %194, i32 11;
    i32 %267 = mul i32 %266, i32 %266;
    i32 %268 = mul i32 %267, i32 %265;
    i32 %269 = add i32 %263, i32 %268;
    i32* %270 = getelementptr &(i32* %199)[i64 12];
    i32 %271 = load i32* %270;
    i32 %272 = add i32 %194, i32 12;
    i32 %273 = mul i32 %272, i32 %272;
    i32 %274 = mul i32 %273, i32 %271;
    i32 %275 = add i32 %269, i32 %274;
    i32* %276 = getelementptr &(i32* %199)[i64 13];
    i32 %277 = load i32* %276;
    i32 %278 = add i32 %194, i32 13;
    i32 %279 = mul i32 %278, i32 %278;
    i32 %280 = mul i32 %279, i32 %277;
    i32 %281 = add i32 %275, i32 %280;
    i32* %282 = getelementptr &(i32* %199)[i64 14];
    i32 %283 = load i32* %282;
    i32 %284 = add i32 %194, i32 14;
    i32 %285 = mul i32 %284, i32 %284;
    i32 %286 = mul i32 %285, i32 %283;
    i32 %287 = add i32 %281, i32 %286;
    i32* %288 = getelementptr &(i32* %199)[i64 15];
    i32 %289 = load i32* %288;
    i32 %290 = add i32 %194, i32 15;
    i32 %291 = mul i32 %290, i32 %290;
    i32 %292 = mul i32 %291, i32 %289;
    i32 %293 = add i32 %287, i32 %292;
    ubr ^super.header3;
  ^while.body7:
    i1 %294 = scmp lt i32 %80, i32 %189;
    cbr i1 %294(prob = 0.5), ^if.then1, ^b5;
  ^while.body8:
    i32 %295 = phi [^super.header3, i32 %193] [^while.body8, i32 %301];
    i32 %296 = phi [^super.header3, i32 %194] [^while.body8, i32 %302];
    i32* %297 = getelementptr &([20000000 * i32]* %5)[i64 0][i32 %296];
    i32 %298 = load i32* %297;
    i32 %299 = mul i32 %296, i32 %296;
    i32 %300 = mul i32 %299, i32 %298;
    i32 %301 = add i32 %300, i32 %295;
    i32 %302 = add i32 %296, i32 1;
    i1 %303 = scmp lt i32 %302, i32 %3;
    cbr i1 %303(prob = 0.97), ^while.body8, ^b2;
  ^if.then1:
    i32 %304 = add i32 %189, i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %305 = add i32 %189, i32 %82;
    i32* %306 = getelementptr &(i32* %6)[i32 %305];
    i32 %307 = load i32* %306;
    i32 %308 = mul i32 %45, i32 %189;
    i32 %309 = add i32 %80, i32 %308;
    i32* %310 = getelementptr &(i32* %6)[i32 %309];
    store i32* %310 with i32 %307;
    store i32* %306 with i32 %307;
    i32 %311 = add i32 %189, i32 1;
    ubr ^while.header1;
}
