internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix, align 8 { Flexible };
internal [100000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [100000 * i32]* %1 = ptrcast [100000 * i32]* @a to [100000 * i32]*;
    i32* %2 = getelementptr &([100000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 28);
    i32 %4 = add i32 %3, i32 -3;
    i32 %5 = add i32 %3, i32 -18;
    i1 %6 = icmp sgt i32 %0, i32 0;
    [20000000 * i32]* %7 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %6(prob = 0.984615), ^b, ^prebody;
  ^b:
    [4 * i8]* %8 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %9 = ptradd [4 * i8]* %8, i32 0;
    store i32* %9 with i32 %0;
    i8* %10 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %10);
    ubr ^prebody;
  ^prebody:
    i32* %11 = getelementptr &([20000000 * i32]* %7)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %12 = phi [^prebody, i32 0] [^b1, i32 %21];
    i32* %13 = getelementptr &([100000 * i32]* %1)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    i32 %15 = sdiv i32 %0, i32 %14;
    i1 %16 = icmp sgt i32 %15, i32 0;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %17 = phi [^while.body, i32 0] [^b2, i32 %30];
    i32 %18 = phi [^while.body, i32 0] [^b2, i32 %28];
    i32* %19 = getelementptr &(i32* %11)[i32 %17];
    i32* %20 = getelementptr &(i32* %11)[i32 %18];
    ubr ^while.header;
  ^b1:
    i32 %21 = add i32 %12, i32 1;
    i1 %22 = icmp sgt i32 %3, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body, ^super.header;
  ^while.header:
    i32 %23 = phi [^while.body1, i32 0] [^while.body2, i32 %27] [^b3, i32 %27];
    i1 %24 = icmp sgt i32 %14, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body2, ^b2;
  ^super.header:
    i1 %25 = icmp sgt i32 %3, i32 3;
    cbr i1 %25(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.body2:
    i1 %26 = icmp slt i32 %18, i32 %23;
    i32 %27 = add i32 %23, i32 1;
    cbr i1 %26(prob = 0.5), ^while.header, ^b3;
  ^b2:
    i32 %28 = add i32 %18, i32 1;
    i1 %29 = icmp sgt i32 %15, i32 %28;
    i32 %30 = add i32 %14, i32 %17;
    cbr i1 %29(prob = 0.984615), ^while.body1, ^b1;
  ^super.header1:
    i1 %31 = icmp sgt i32 %4, i32 15;
    cbr i1 %31(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^scalar.header:
    i32 %32 = phi [^super.header, i32 0] [^scalar.final1, i32 %199];
    i32 %33 = phi [^super.header, i32 0] [^scalar.final1, i32 %200];
    i32 %34 = phi [^super.header, i32 1] [^scalar.final1, i32 %197];
    i32 %35 = phi [^super.header, i32 0] [^scalar.final1, i32 %198];
    i32 %36 = phi [^super.header, i32 undef] [^scalar.final1, i32 %199];
    i1 %37 = icmp sgt i32 %3, i32 %33;
    cbr i1 %37(prob = 0.75), ^while.body4, ^scalar.final;
  ^b3:
    i32 %38 = mul i32 %15, i32 %23;
    i32* %39 = getelementptr &(i32* %20)[i32 %38];
    i32* %40 = getelementptr &(i32* %19)[i32 %23];
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    ubr ^while.header;
  ^while.body3:
    i32 %42 = phi [^super.header1, i32 16] [^while.body3, i32 %173];
    i32 %43 = phi [^super.header1, i32 15] [^while.body3, i32 %171];
    i32 %44 = phi [^super.header1, i32 14] [^while.body3, i32 %170];
    i32 %45 = phi [^super.header1, i32 13] [^while.body3, i32 %169];
    i32 %46 = phi [^super.header1, i32 12] [^while.body3, i32 %168];
    i32 %47 = phi [^super.header1, i32 11] [^while.body3, i32 %167];
    i32 %48 = phi [^super.header1, i32 10] [^while.body3, i32 %166];
    i32 %49 = phi [^super.header1, i32 9] [^while.body3, i32 %165];
    i32 %50 = phi [^super.header1, i32 8] [^while.body3, i32 %164];
    i32 %51 = phi [^super.header1, i32 7] [^while.body3, i32 %163];
    i32 %52 = phi [^super.header1, i32 6] [^while.body3, i32 %162];
    i32 %53 = phi [^super.header1, i32 5] [^while.body3, i32 %161];
    i32 %54 = phi [^super.header1, i32 4] [^while.body3, i32 %160];
    i32 %55 = phi [^super.header1, i32 3] [^while.body3, i32 %159];
    i32 %56 = phi [^super.header1, i32 2] [^while.body3, i32 %158];
    i32 %57 = phi [^super.header1, i32 0] [^while.body3, i32 %155];
    i32 %58 = phi [^super.header1, i32 1] [^while.body3, i32 %172];
    i32 %59 = phi [^super.header1, i32 0] [^while.body3, i32 %156];
    i32 %60 = phi [^super.header1, i32 0] [^while.body3, i32 %153];
    i32* %61 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %59];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %61)[i64 1];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %57, i32 %58;
    i32 %66 = mul i32 %64, i32 %65;
    i32 %67 = mul i32 %57, i32 %62;
    i32 %68 = add i32 %66, i32 %67;
    i32* %69 = getelementptr &(i32* %61)[i64 2];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %56, i32 2;
    i32 %72 = add i32 %57, i32 %71;
    i32 %73 = mul i32 %70, i32 %72;
    i32 %74 = add i32 %68, i32 %73;
    i32* %75 = getelementptr &(i32* %61)[i64 3];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %55, i32 6;
    i32 %78 = add i32 %57, i32 %77;
    i32 %79 = mul i32 %76, i32 %78;
    i32 %80 = add i32 %74, i32 %79;
    i32* %81 = getelementptr &(i32* %61)[i64 4];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %54, i32 12;
    i32 %84 = add i32 %57, i32 %83;
    i32 %85 = mul i32 %82, i32 %84;
    i32 %86 = add i32 %80, i32 %85;
    i32* %87 = getelementptr &(i32* %61)[i64 5];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %53, i32 20;
    i32 %90 = add i32 %57, i32 %89;
    i32 %91 = mul i32 %88, i32 %90;
    i32 %92 = add i32 %86, i32 %91;
    i32* %93 = getelementptr &(i32* %61)[i64 6];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %52, i32 30;
    i32 %96 = add i32 %57, i32 %95;
    i32 %97 = mul i32 %94, i32 %96;
    i32 %98 = add i32 %92, i32 %97;
    i32* %99 = getelementptr &(i32* %61)[i64 7];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %51, i32 42;
    i32 %102 = add i32 %57, i32 %101;
    i32 %103 = mul i32 %100, i32 %102;
    i32 %104 = add i32 %98, i32 %103;
    i32* %105 = getelementptr &(i32* %61)[i64 8];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %50, i32 56;
    i32 %108 = add i32 %57, i32 %107;
    i32 %109 = mul i32 %106, i32 %108;
    i32 %110 = add i32 %104, i32 %109;
    i32* %111 = getelementptr &(i32* %61)[i64 9];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %49, i32 72;
    i32 %114 = add i32 %57, i32 %113;
    i32 %115 = mul i32 %112, i32 %114;
    i32 %116 = add i32 %110, i32 %115;
    i32* %117 = getelementptr &(i32* %61)[i64 10];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %48, i32 90;
    i32 %120 = add i32 %57, i32 %119;
    i32 %121 = mul i32 %118, i32 %120;
    i32 %122 = add i32 %116, i32 %121;
    i32* %123 = getelementptr &(i32* %61)[i64 11];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %47, i32 110;
    i32 %126 = add i32 %57, i32 %125;
    i32 %127 = mul i32 %124, i32 %126;
    i32 %128 = add i32 %122, i32 %127;
    i32* %129 = getelementptr &(i32* %61)[i64 12];
    i32 %130 = load i32* %129;
    i32 %131 = add i32 %46, i32 132;
    i32 %132 = add i32 %57, i32 %131;
    i32 %133 = mul i32 %130, i32 %132;
    i32 %134 = add i32 %128, i32 %133;
    i32* %135 = getelementptr &(i32* %61)[i64 13];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %45, i32 156;
    i32 %138 = add i32 %57, i32 %137;
    i32 %139 = mul i32 %136, i32 %138;
    i32 %140 = add i32 %134, i32 %139;
    i32* %141 = getelementptr &(i32* %61)[i64 14];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %44, i32 182;
    i32 %144 = add i32 %57, i32 %143;
    i32 %145 = mul i32 %142, i32 %144;
    i32 %146 = add i32 %140, i32 %145;
    i32* %147 = getelementptr &(i32* %61)[i64 15];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %43, i32 210;
    i32 %150 = add i32 %57, i32 %149;
    i32 %151 = mul i32 %148, i32 %150;
    i32 %152 = add i32 %146, i32 %151;
    i32 %153 = add i32 %60, i32 %152;
    i32 %154 = add i32 %42, i32 240;
    i32 %155 = add i32 %57, i32 %154;
    i32 %156 = add i32 %59, i32 16;
    i1 %157 = icmp sgt i32 %5, i32 %156;
    i32 %158 = add i32 %56, i32 64;
    i32 %159 = add i32 %55, i32 96;
    i32 %160 = add i32 %54, i32 128;
    i32 %161 = add i32 %53, i32 160;
    i32 %162 = add i32 %52, i32 192;
    i32 %163 = add i32 %51, i32 224;
    i32 %164 = add i32 %50, i32 256;
    i32 %165 = add i32 %49, i32 288;
    i32 %166 = add i32 %48, i32 320;
    i32 %167 = add i32 %47, i32 352;
    i32 %168 = add i32 %46, i32 384;
    i32 %169 = add i32 %45, i32 416;
    i32 %170 = add i32 %44, i32 448;
    i32 %171 = add i32 %43, i32 480;
    i32 %172 = add i32 %58, i32 32;
    i32 %173 = add i32 %42, i32 512;
    cbr i1 %157(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^scalar.header1:
    i32 %174 = phi [^super.header1, i32 0] [^while.body3, i32 %155];
    i32 %175 = phi [^super.header1, i32 1] [^while.body3, i32 %172];
    i32 %176 = phi [^super.header1, i32 0] [^while.body3, i32 %156];
    i32 %177 = phi [^super.header1, i32 0] [^while.body3, i32 %153];
    i32 %178 = phi [^super.header1, i32 undef] [^while.body3, i32 %172];
    i32 %179 = phi [^super.header1, i32 undef] [^while.body3, i32 %155];
    i32 %180 = phi [^super.header1, i32 undef] [^while.body3, i32 %153];
    i32 %181 = phi [^super.header1, i32 undef] [^while.body3, i32 %156];
    i1 %182 = icmp sgt i32 %4, i32 %176;
    cbr i1 %182(prob = 0.75), ^while.body5, ^scalar.final1;
  ^while.body4 {scalar}:
    i32 %183 = phi [^scalar.header, i32 %35] [^while.body4, i32 %193];
    i32 %184 = phi [^scalar.header, i32 %34] [^while.body4, i32 %194];
    i32 %185 = phi [^scalar.header, i32 %33] [^while.body4, i32 %191];
    i32 %186 = phi [^scalar.header, i32 %32] [^while.body4, i32 %190];
    i32* %187 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %185];
    i32 %188 = load i32* %187;
    i32 %189 = mul i32 %183, i32 %188;
    i32 %190 = add i32 %186, i32 %189;
    i32 %191 = add i32 %185, i32 1;
    i1 %192 = icmp sgt i32 %3, i32 %191;
    i32 %193 = add i32 %183, i32 %184;
    i32 %194 = add i32 %184, i32 2;
    cbr i1 %192(prob = 0.75), ^while.body4, ^scalar.final;
  ^scalar.final:
    i32 %195 = phi [^scalar.header, i32 %36] [^while.body4, i32 %190];
    i32 %196 = abs i32 %195;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %196);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^scalar.final1:
    i32 %197 = phi [^scalar.header1, i32 %178] [^while.body5, i32 %233];
    i32 %198 = phi [^scalar.header1, i32 %179] [^while.body5, i32 %230];
    i32 %199 = phi [^scalar.header1, i32 %180] [^while.body5, i32 %227];
    i32 %200 = phi [^scalar.header1, i32 %181] [^while.body5, i32 %231];
    ubr ^scalar.header;
  ^while.body5 {scalar}:
    i32 %201 = phi [^scalar.header1, i32 %177] [^while.body5, i32 %227];
    i32 %202 = phi [^scalar.header1, i32 %176] [^while.body5, i32 %231];
    i32 %203 = phi [^scalar.header1, i32 %175] [^while.body5, i32 %233];
    i32 %204 = phi [^scalar.header1, i32 %174] [^while.body5, i32 %230];
    i32* %205 = getelementptr &([20000000 * i32]* %7)[i64 0][i32 %202];
    i32 %206 = load i32* %205;
    i32* %207 = getelementptr &(i32* %205)[i64 1];
    i32 %208 = load i32* %207;
    i32 %209 = add i32 %203, i32 %204;
    i32 %210 = mul i32 %208, i32 %209;
    i32 %211 = mul i32 %204, i32 %206;
    i32 %212 = add i32 %210, i32 %211;
    i32 %213 = add i32 %203, i32 1;
    i32 %214 = mul i32 %213, i32 2;
    i32 %215 = add i32 %204, i32 %214;
    i32* %216 = getelementptr &(i32* %205)[i64 2];
    i32 %217 = load i32* %216;
    i32 %218 = mul i32 %215, i32 %217;
    i32 %219 = add i32 %212, i32 %218;
    i32 %220 = mul i32 %203, i32 3;
    i32 %221 = add i32 %220, i32 6;
    i32 %222 = add i32 %204, i32 %221;
    i32* %223 = getelementptr &(i32* %205)[i64 3];
    i32 %224 = load i32* %223;
    i32 %225 = mul i32 %222, i32 %224;
    i32 %226 = add i32 %219, i32 %225;
    i32 %227 = add i32 %201, i32 %226;
    i32 %228 = mul i32 %203, i32 4;
    i32 %229 = add i32 %228, i32 12;
    i32 %230 = add i32 %204, i32 %229;
    i32 %231 = add i32 %202, i32 4;
    i1 %232 = icmp sgt i32 %4, i32 %231;
    i32 %233 = add i32 %203, i32 8;
    cbr i1 %232(prob = 0.75), ^while.body5, ^scalar.final1;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [20000000 * i32]* %4 = ptrcast [20000000 * i32]* @matrix to [20000000 * i32]*;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %5 = add i32 %0, i32 15;
    i32 %6 = add i32 %1, i32 -3;
    i1 %7 = icmp slt i32 %5, i32 %6;
    i32 %8 = add i32 %1, i32 -18;
    cbr i1 %7(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %9 = phi [^b, i32 %0] [^scalar.header1, i32 %46] [^b3, i32 %60];
    i1 %10 = icmp sgt i32 %1, i32 %9;
    cbr i1 %10(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %11 = phi [^super.header, i32 %0] [^b1, i32 %43];
    i32* %12 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %11];
    store i32* %12 with i32 %11;
    i32* %13 = getelementptr &(i32* %12)[i64 1];
    i32 %14 = add i32 %11, i32 1;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %12)[i64 2];
    i32 %16 = add i32 %11, i32 2;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %12)[i64 3];
    i32 %18 = add i32 %11, i32 3;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %12)[i64 4];
    i32 %20 = add i32 %11, i32 4;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %12)[i64 5];
    i32 %22 = add i32 %11, i32 5;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %12)[i64 6];
    i32 %24 = add i32 %11, i32 6;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %12)[i64 7];
    i32 %26 = add i32 %11, i32 7;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %12)[i64 8];
    i32 %28 = add i32 %11, i32 8;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %12)[i64 9];
    i32 %30 = add i32 %11, i32 9;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %12)[i64 10];
    i32 %32 = add i32 %11, i32 10;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %12)[i64 11];
    i32 %34 = add i32 %11, i32 11;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %12)[i64 12];
    i32 %36 = add i32 %11, i32 12;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %12)[i64 13];
    i32 %38 = add i32 %11, i32 13;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %12)[i64 14];
    i32 %40 = add i32 %11, i32 14;
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &(i32* %12)[i64 15];
    i32 %42 = add i32 %11, i32 15;
    store i32* %41 with i32 %42;
    i32 %43 = add i32 %11, i32 16;
    i1 %44 = icmp sgt i32 %8, i32 %43;
    cbr i1 %44(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %45 = phi [^super.header, i32 %0] [^b1, i32 %43];
    i32 %46 = phi [^super.header, i32 undef] [^b1, i32 %43];
    i1 %47 = icmp sgt i32 %6, i32 %45;
    cbr i1 %47(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %48 = phi [^scalar.header, i32 %9] [^b2, i32 %50];
    i32* %49 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %48];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %48, i32 1;
    i1 %51 = icmp sgt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %52 = phi [^scalar.header1, i32 %45] [^b3, i32 %60];
    i32* %53 = getelementptr &([20000000 * i32]* %4)[i64 0][i32 %52];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    i32 %55 = add i32 %52, i32 1;
    store i32* %54 with i32 %55;
    i32* %56 = getelementptr &(i32* %53)[i64 2];
    i32 %57 = add i32 %52, i32 2;
    store i32* %56 with i32 %57;
    i32* %58 = getelementptr &(i32* %53)[i64 3];
    i32 %59 = add i32 %52, i32 3;
    store i32* %58 with i32 %59;
    i32 %60 = add i32 %52, i32 4;
    i1 %61 = icmp sgt i32 %6, i32 %60;
    cbr i1 %61(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
