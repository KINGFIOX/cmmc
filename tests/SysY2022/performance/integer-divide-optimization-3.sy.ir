internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 1016);
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %2 = phi [^entry, i32 0] [^prebody, i32 %4];
    i32 %3 = phi [^entry, i32 0] [^prebody, i32 %57];
    i32 %4 = add i32 %2, i32 4;
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.89), ^prebody, ^prebody1;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^prebody1, i32 %71];
    call (i32) -> void @stoptime(i32 1031);
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody:
    i32 %7 = add i32 %2, i32 1;
    i32 %8 = mul i32 %7, i32 256;
    i32 %9 = mul i32 %8, i32 2;
    i32 %10 = mul i32 %7, i32 488;
    i32 %11 = add i32 %9, i32 %10;
    i32 %12 = sdiv i32 %11, i32 1000;
    i32 %13 = mul i32 %12, i32 128;
    i32 %14 = mul i32 %13, i32 2;
    i32 %15 = mul i32 %12, i32 44;
    i32 %16 = add i32 %14, i32 %15;
    i32 %17 = sdiv i32 %16, i32 300;
    i32 %18 = mul i32 %2, i32 256;
    i32 %19 = mul i32 %18, i32 2;
    i32 %20 = mul i32 %2, i32 488;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = sdiv i32 %21, i32 1000;
    i32 %23 = mul i32 %22, i32 128;
    i32 %24 = mul i32 %23, i32 2;
    i32 %25 = mul i32 %22, i32 44;
    i32 %26 = add i32 %24, i32 %25;
    i32 %27 = sdiv i32 %26, i32 300;
    i32 %28 = add i32 %3, i32 %27;
    i32 %29 = srem i32 %28, i32 2147385347;
    i32 %30 = add i32 %17, i32 %29;
    i32 %31 = srem i32 %30, i32 2147385347;
    i32 %32 = add i32 %2, i32 2;
    i32 %33 = mul i32 %32, i32 256;
    i32 %34 = mul i32 %33, i32 2;
    i32 %35 = mul i32 %32, i32 488;
    i32 %36 = add i32 %34, i32 %35;
    i32 %37 = sdiv i32 %36, i32 1000;
    i32 %38 = mul i32 %37, i32 128;
    i32 %39 = mul i32 %38, i32 2;
    i32 %40 = mul i32 %37, i32 44;
    i32 %41 = add i32 %39, i32 %40;
    i32 %42 = sdiv i32 %41, i32 300;
    i32 %43 = add i32 %31, i32 %42;
    i32 %44 = srem i32 %43, i32 2147385347;
    i32 %45 = add i32 %2, i32 3;
    i32 %46 = mul i32 %45, i32 256;
    i32 %47 = mul i32 %46, i32 2;
    i32 %48 = mul i32 %45, i32 488;
    i32 %49 = add i32 %47, i32 %48;
    i32 %50 = sdiv i32 %49, i32 1000;
    i32 %51 = mul i32 %50, i32 128;
    i32 %52 = mul i32 %51, i32 2;
    i32 %53 = mul i32 %50, i32 44;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = sdiv i32 %54, i32 300;
    i32 %56 = add i32 %44, i32 %55;
    i32 %57 = srem i32 %56, i32 2147385347;
    ubr ^super.header;
  ^prebody1:
    i32 %58 = phi [^super.header, i32 %2] [^prebody1, i32 %72];
    i32 %59 = phi [^super.header, i32 %3] [^prebody1, i32 %71];
    i32 %60 = mul i32 %58, i32 256;
    i32 %61 = mul i32 %60, i32 2;
    i32 %62 = mul i32 %58, i32 488;
    i32 %63 = add i32 %61, i32 %62;
    i32 %64 = sdiv i32 %63, i32 1000;
    i32 %65 = mul i32 %64, i32 128;
    i32 %66 = mul i32 %65, i32 2;
    i32 %67 = mul i32 %64, i32 44;
    i32 %68 = add i32 %66, i32 %67;
    i32 %69 = sdiv i32 %68, i32 300;
    i32 %70 = add i32 %59, i32 %69;
    i32 %71 = srem i32 %70, i32 2147385347;
    i32 %72 = add i32 %58, i32 1;
    i1 %73 = icmp sgt i32 %0, i32 %72;
    cbr i1 %73(prob = 0.75), ^prebody1, ^b;
}
