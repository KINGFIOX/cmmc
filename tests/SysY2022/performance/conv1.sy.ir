internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b { Flexible };
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i1 %9 = icmp sgt i32 %8, i32 0;
    i32 %10 = sdiv i32 %0, i32 2;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %9(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %11 = mul i32 %1, i32 %2;
    i1 %12 = icmp sgt i32 %11, i32 0;
    i1 %13 = icmp sgt i32 %11, i32 4;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %15 = getelementptr &([10000000 * i32]* %14)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %16 = mul i32 %1, i32 %2;
    call (i32, i32*) -> void @putarray(i32 %16, i32* %4);
    ret i32 0;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body11, i32 %112];
    i32* %18 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp eq i32 %19, i32 0;
    i1 %21 = icmp eq i32 %19, i32 1;
    i1 %22 = icmp eq i32 %19, i32 2;
    i1 %23 = icmp eq i32 %19, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %24 = phi [^while.body, i32 0] [^b10, i32 %94];
    i32 %25 = sub i32 %24, i32 %10;
    i32 %26 = add i32 %10, i32 %24;
    i32 %27 = mul i32 %2, i32 %24;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 0] [^b9, i32 %83];
    i32 %29 = sub i32 %28, i32 %10;
    i32 %30 = add i32 %10, i32 %28;
    ubr ^while.body3;
  ^while.body3:
    i32 %31 = phi [^while.body2, i32 %25] [^b7, i32 %75];
    i32 %32 = phi [^while.body2, i32 0] [^b7, i32 %67];
    i1 %33 = icmp sle i32 %1, i32 %31;
    i1 %34 = icmp slt i32 %31, i32 0;
    i1 %35 = or i1 %33, i1 %34;
    ubr ^while.body4;
  ^while.body4:
    i32 %36 = phi [^while.body3, i32 %29] [^b5, i32 %68];
    i32 %37 = phi [^while.body3, i32 %32] [^b5, i32 %67];
    i1 %38 = icmp slt i32 %36, i32 0;
    i1 %39 = or i1 %35, i1 %38;
    i1 %40 = icmp sle i32 %2, i32 %36;
    i1 %41 = or i1 %39, i1 %40;
    cbr i1 %41(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %42 = mul i32 %2, i32 %31;
    i32 %43 = add i32 %36, i32 %42;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    ubr ^b2;
  ^b2:
    i32 %46 = phi [^while.body4, i32 0] [^b1, i32 %45];
    cbr i1 %20(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %47 = add i32 %37, i32 %46;
    i1 %48 = icmp sgt i32 %47, i32 1073741824;
    cbr i1 %48(prob = 0.97), ^while.body5, ^55;
  ^b3:
    cbr i1 %21(prob = 0.5), ^while.header, ^b4;
  ^while.body5:
    i32 %49 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i32 %50 = add i32 %49, i32 -1073741824;
    i1 %51 = icmp sgt i32 %50, i32 1073741824;
    cbr i1 %51(prob = 0.97), ^while.body5, ^55;
  ^while.header:
    i32 %52 = phi [^b3, i32 0] [^if.then2, i32 %70] [^if.else, i32 %73];
    i32 %53 = phi [^b3, i32 1] [^if.then2, i32 %71] [^if.else, i32 %74];
    i1 %54 = icmp slt i32 %53, i32 1073741824;
    cbr i1 %54(prob = 0.97), ^while.body6, ^b5;
  ^55:
    i32 %56 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i1 %57 = icmp slt i32 %56, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %22(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %58 = smax i32 %37, i32 %46;
    ubr ^b5;
  ^while.body6:
    i32 %59 = sdiv i32 %37, i32 %53;
    i32 %60 = srem i32 %59, i32 2;
    i32 %61 = sdiv i32 %46, i32 %53;
    i32 %62 = srem i32 %61, i32 2;
    i1 %63 = icmp eq i32 %60, i32 %62;
    cbr i1 %63(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %64 = phi [^55, i32 %56] [^while.body7, i32 %65];
    i32 %65 = add i32 %64, i32 1073741824;
    i1 %66 = icmp slt i32 %65, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %67 = phi [^while.header, i32 %52] [^55, i32 %56] [^if.then1, i32 %58] [^while.body7, i32 %65] [^while.header1, i32 %77] [^b8, i32 0] [^while.header2, i32 %88];
    i32 %68 = add i32 %36, i32 1;
    i1 %69 = icmp sle i32 %30, i32 %68;
    cbr i1 %69(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %23(prob = 0.5), ^while.header1, ^b8;
  ^if.then2:
    i32 %70 = mul i32 %52, i32 2;
    i32 %71 = mul i32 %53, i32 2;
    ubr ^while.header;
  ^if.else:
    i32 %72 = mul i32 %52, i32 2;
    i32 %73 = add i32 %72, i32 1;
    i32 %74 = mul i32 %53, i32 2;
    ubr ^while.header;
  ^b7:
    i32 %75 = add i32 %31, i32 1;
    i1 %76 = icmp sle i32 %26, i32 %75;
    cbr i1 %76(prob = 0.5), ^b9, ^while.body3;
  ^while.header1:
    i32 %77 = phi [^b6, i32 0] [^if.then3, i32 %92] [^if.else2, i32 %104];
    i32 %78 = phi [^b6, i32 1] [^if.then3, i32 %93] [^if.else2, i32 %105];
    i1 %79 = icmp slt i32 %78, i32 1073741824;
    cbr i1 %79(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %80 = icmp eq i32 %19, i32 4;
    cbr i1 %80(prob = 0.5), ^while.header2, ^b5;
  ^b9:
    i32 %81 = add i32 %27, i32 %28;
    i32* %82 = getelementptr &(i32* %15)[i32 %81];
    store i32* %82 with i32 %67;
    i32 %83 = add i32 %28, i32 1;
    i1 %84 = icmp sle i32 %2, i32 %83;
    cbr i1 %84(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %85 = sdiv i32 %37, i32 %78;
    i32 %86 = and i32 %85, i32 -2147483647;
    i1 %87 = icmp eq i32 %86, i32 1;
    cbr i1 %87(prob = 0.5), ^if.then3, ^b11;
  ^while.header2:
    i32 %88 = phi [^b8, i32 0] [^if.else1, i32 %102] [^if.then4, i32 %110];
    i32 %89 = phi [^b8, i32 1] [^if.else1, i32 %103] [^if.then4, i32 %111];
    i1 %90 = icmp slt i32 %89, i32 1073741824;
    cbr i1 %90(prob = 0.97), ^while.body9, ^b5;
  ^if.then3:
    i32 %91 = mul i32 %77, i32 2;
    i32 %92 = add i32 %91, i32 1;
    i32 %93 = mul i32 %78, i32 2;
    ubr ^while.header1;
  ^b10:
    i32 %94 = add i32 %24, i32 1;
    i1 %95 = icmp sle i32 %1, i32 %94;
    cbr i1 %95(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %96 = sdiv i32 %46, i32 %78;
    i32 %97 = and i32 %96, i32 -2147483647;
    i1 %98 = icmp eq i32 %97, i32 1;
    cbr i1 %98(prob = 0.5), ^if.then3, ^if.else2;
  ^while.body9:
    i32 %99 = sdiv i32 %37, i32 %89;
    i32 %100 = and i32 %99, i32 -2147483647;
    i1 %101 = icmp eq i32 %100, i32 1;
    cbr i1 %101(prob = 0.5), ^b12, ^if.else1;
  ^while.body10:
    cbr i1 %12(prob = 0.97), ^super.header, ^while.body11;
  ^if.else1:
    i32 %102 = mul i32 %88, i32 2;
    i32 %103 = mul i32 %89, i32 2;
    ubr ^while.header2;
  ^if.else2:
    i32 %104 = mul i32 %77, i32 2;
    i32 %105 = mul i32 %78, i32 2;
    ubr ^while.header1;
  ^b12:
    i32 %106 = sdiv i32 %46, i32 %89;
    i32 %107 = and i32 %106, i32 -2147483647;
    i1 %108 = icmp eq i32 %107, i32 1;
    cbr i1 %108(prob = 0.5), ^if.then4, ^if.else1;
  ^if.then4:
    i32 %109 = mul i32 %88, i32 2;
    i32 %110 = add i32 %109, i32 1;
    i32 %111 = mul i32 %89, i32 2;
    ubr ^while.header2;
  ^super.header:
    cbr i1 %13(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body11:
    i32 %112 = add i32 %17, i32 1;
    i1 %113 = icmp sgt i32 %8, i32 %112;
    cbr i1 %113(prob = 0.97), ^while.body, ^b;
  ^while.body12:
    i32 %114 = phi [^super.header, i32 0] [^while.body12, i32 %129];
    i32* %115 = getelementptr &(i32* %15)[i32 %114];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %4)[i32 %114];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %115)[i64 1];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %117)[i64 1];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %115)[i64 2];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %117)[i64 2];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %115)[i64 3];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %117)[i64 3];
    store i32* %126 with i32 %125;
    i32 %127 = add i32 %114, i32 8;
    i1 %128 = icmp sgt i32 %11, i32 %127;
    i32 %129 = add i32 %114, i32 4;
    cbr i1 %128(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body13:
    i32 %130 = phi [^super.header, i32 0] [^while.body12, i32 %129] [^while.body13, i32 %134];
    i32* %131 = getelementptr &(i32* %15)[i32 %130];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %4)[i32 %130];
    store i32* %133 with i32 %132;
    i32 %134 = add i32 %130, i32 1;
    i1 %135 = icmp sgt i32 %11, i32 %134;
    cbr i1 %135(prob = 0.75), ^while.body13, ^while.body11;
}
