internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 109);
    i32 %9 = mul i32 %1, i32 %2;
    i1 %10 = icmp sgt i32 %9, i32 0;
    i32 %11 = sdiv i32 %0, i32 2;
    [16 * i8]* %12 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_0 to [16 * i8]*;
    i32* %13 = ptradd [16 * i8]* %12, i32 0;
    i32* %14 = ptradd [16 * i8]* %12, i32 4;
    i32* %15 = ptradd [16 * i8]* %12, i32 8;
    i32* %16 = ptradd [16 * i8]* %12, i32 12;
    [16 * i8]* %17 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_3 to [16 * i8]*;
    i32* %18 = ptradd [16 * i8]* %17, i32 0;
    i32* %19 = ptradd [16 * i8]* %17, i32 4;
    i32* %20 = ptradd [16 * i8]* %17, i32 8;
    i32* %21 = ptradd [16 * i8]* %17, i32 12;
    [4 * i8]* %22 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %23 = ptradd [4 * i8]* %22, i32 0;
    [16 * i8]* %24 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_4 to [16 * i8]*;
    i32* %25 = ptradd [16 * i8]* %24, i32 0;
    i32* %26 = ptradd [16 * i8]* %24, i32 4;
    i32* %27 = ptradd [16 * i8]* %24, i32 8;
    i32* %28 = ptradd [16 * i8]* %24, i32 12;
    [16 * i8]* %29 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_5 to [16 * i8]*;
    i32* %30 = ptradd [16 * i8]* %29, i32 0;
    i32* %31 = ptradd [16 * i8]* %29, i32 4;
    i32* %32 = ptradd [16 * i8]* %29, i32 8;
    i32* %33 = ptradd [16 * i8]* %29, i32 12;
    [16 * i8]* %34 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_6 to [16 * i8]*;
    i32* %35 = ptradd [16 * i8]* %34, i32 0;
    i32* %36 = ptradd [16 * i8]* %34, i32 4;
    i32* %37 = ptradd [16 * i8]* %34, i32 8;
    i32* %38 = ptradd [16 * i8]* %34, i32 12;
    [16 * i8]* %39 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_2 to [16 * i8]*;
    i32* %40 = ptradd [16 * i8]* %39, i32 0;
    i32* %41 = ptradd [16 * i8]* %39, i32 4;
    i32* %42 = ptradd [16 * i8]* %39, i32 8;
    i32* %43 = ptradd [16 * i8]* %39, i32 12;
    i8* %44 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %45 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    i8* %46 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %47 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    i8* %48 = functionptr () -> void @cmmc_parallel_body_5 as i8*;
    i8* %49 = functionptr () -> void @cmmc_parallel_body_6 as i8*;
    i8* %50 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    ubr ^while.body;
  ^b:
    store i32* %13 with i32 0;
    store i32* %14 with i32 %2;
    store i32* %15 with i32 %11;
    store i32* %16 with i32 %1;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %44);
    ubr ^b6;
  ^b1:
    store i32* %18 with i32 0;
    store i32* %19 with i32 %11;
    store i32* %20 with i32 %1;
    store i32* %21 with i32 %2;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %45);
    ubr ^b6;
  ^b2:
    store i32* %30 with i32 0;
    store i32* %31 with i32 %11;
    store i32* %32 with i32 %1;
    store i32* %33 with i32 %2;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %48);
    ubr ^b6;
  ^while.body:
    i32 %51 = phi [^entry, i32 0] [^b8, i32 %54];
    i32* %52 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %51];
    i32 %53 = load i32* %52;
    switch i32 %53, [0, ^b], [1, ^b1], [2, ^b2], [3, ^b3], [4, ^b4], default ^b5;
  ^b3:
    store i32* %25 with i32 0;
    store i32* %26 with i32 %11;
    store i32* %27 with i32 %2;
    store i32* %28 with i32 %1;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %47);
    ubr ^b6;
  ^b4:
    store i32* %35 with i32 0;
    store i32* %36 with i32 %2;
    store i32* %37 with i32 %1;
    store i32* %38 with i32 %11;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %49);
    ubr ^b6;
  ^b5:
    store i32* %40 with i32 0;
    store i32* %41 with i32 %11;
    store i32* %42 with i32 %2;
    store i32* %43 with i32 %1;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %1, i8* %50);
    ubr ^b6;
  ^b6:
    cbr i1 %10(prob = 0.984615), ^b7, ^b8;
  ^b7:
    store i32* %23 with i32 %9;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %9, i8* %46);
    ubr ^b8;
  ^b8:
    i32 %54 = add i32 %51, i32 1;
    i1 %55 = icmp sgt i32 %8, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body, ^b9;
  ^b9:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %4);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_0 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32 %5 = mul i32 %0, i32 %4;
    i32* %6 = ptradd [16 * i8]* %2, i32 8;
    i32 %7 = load i32* %6;
    i32* %8 = ptradd [16 * i8]* %2, i32 12;
    i32 %9 = load i32* %8;
    i32* %10 = ptradd [16 * i8]* %2, i32 0;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %5, i32 %11;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %17 = phi [^b, i32 %0] [^b7, i32 %60];
    i32 %18 = phi [^b, i32 %12] [^b7, i32 %62];
    i32 %19 = sub i32 %17, i32 %7;
    i32 %20 = add i32 %7, i32 %17;
    i32* %21 = getelementptr &(i32* %16)[i32 %18];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^b6, i32 %58];
    i32 %23 = sub i32 %22, i32 %7;
    i32 %24 = add i32 %7, i32 %22;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 %19] [^b5, i32 %55];
    i32 %26 = phi [^while.body, i32 0] [^b5, i32 %52];
    i1 %27 = icmp sle i32 %9, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 %23] [^b4, i32 %53];
    i32 %29 = phi [^while.body1, i32 %26] [^b4, i32 %52];
    i32 %30 = or i32 %25, i32 %28;
    i32 %31 = lshr i32 %30, i32 31;
    i1 %32 = ztrunc i32 %31 to i1;
    i1 %33 = or i1 %27, i1 %32;
    i1 %34 = icmp sle i32 %4, i32 %28;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.5), ^b3, ^b2;
  ^b2:
    i32 %36 = mul i32 %4, i32 %25;
    i32* %37 = getelementptr &(i32* %14)[i32 %28];
    i32* %38 = getelementptr &(i32* %37)[i32 %36];
    i32 %39 = load i32* %38;
    ubr ^b3;
  ^b3:
    i32 %40 = phi [^while.body2, i32 0] [^b2, i32 %39];
    i32 %41 = add i32 %29, i32 %40;
    i1 %42 = icmp sgt i32 %41, i32 1073741824;
    cbr i1 %42(prob = 0.984615), ^while.body3, ^46;
  ^while.body3:
    i32 %43 = phi [^b3, i32 %41] [^while.body3, i32 %44];
    i32 %44 = add i32 %43, i32 -1073741824;
    i1 %45 = icmp sgt i32 %44, i32 1073741824;
    cbr i1 %45(prob = 0.984615), ^while.body3, ^46;
  ^46:
    i32 %47 = phi [^b3, i32 %41] [^while.body3, i32 %44];
    i1 %48 = icmp slt i32 %47, i32 0;
    cbr i1 %48(prob = 0.984615), ^while.body4, ^b4;
  ^while.body4:
    i32 %49 = phi [^46, i32 %47] [^while.body4, i32 %50];
    i32 %50 = add i32 %49, i32 1073741824;
    i1 %51 = icmp slt i32 %50, i32 0;
    cbr i1 %51(prob = 0.984615), ^while.body4, ^b4;
  ^b4:
    i32 %52 = phi [^46, i32 %47] [^while.body4, i32 %50];
    i32 %53 = add i32 %28, i32 1;
    i1 %54 = icmp sgt i32 %24, i32 %53;
    cbr i1 %54(prob = 0.5), ^while.body2, ^b5;
  ^b5:
    i32 %55 = add i32 %25, i32 1;
    i1 %56 = icmp sgt i32 %20, i32 %55;
    cbr i1 %56(prob = 0.5), ^while.body1, ^b6;
  ^b6:
    i32* %57 = getelementptr &(i32* %21)[i32 %22];
    store i32* %57 with i32 %52;
    i32 %58 = add i32 %22, i32 1;
    i1 %59 = icmp sgt i32 %4, i32 %58;
    cbr i1 %59(prob = 0.5), ^while.body, ^b7;
  ^b7:
    i32 %60 = add i32 %17, i32 1;
    i1 %61 = icmp sgt i32 %1, i32 %60;
    i32 %62 = add i32 %4, i32 %18;
    cbr i1 %61(prob = 0.984615), ^b1, ^b8;
  ^b8:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [10000000 * i32]* %4 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %5 = getelementptr &([10000000 * i32]* %4)[i64 0][i64 0];
    [10000000 * i32]* %6 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %7 = getelementptr &([10000000 * i32]* %6)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %8 = add i32 %0, i32 15;
    i32 %9 = add i32 %1, i32 -3;
    i1 %10 = icmp slt i32 %8, i32 %9;
    i32 %11 = add i32 %1, i32 -18;
    cbr i1 %10(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %12 = phi [^b, i32 %0] [^scalar.header1, i32 %66] [^b3, i32 %87];
    i1 %13 = icmp sgt i32 %1, i32 %12;
    cbr i1 %13(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %14 = phi [^super.header, i32 %0] [^b1, i32 %63];
    i32* %15 = getelementptr &(i32* %7)[i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %5)[i32 %14];
    store i32* %17 with i32 %16;
    i32* %18 = getelementptr &(i32* %15)[i64 1];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %17)[i64 1];
    store i32* %20 with i32 %19;
    i32* %21 = getelementptr &(i32* %15)[i64 2];
    i32 %22 = load i32* %21;
    i32* %23 = getelementptr &(i32* %17)[i64 2];
    store i32* %23 with i32 %22;
    i32* %24 = getelementptr &(i32* %15)[i64 3];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %17)[i64 3];
    store i32* %26 with i32 %25;
    i32* %27 = getelementptr &(i32* %15)[i64 4];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %17)[i64 4];
    store i32* %29 with i32 %28;
    i32* %30 = getelementptr &(i32* %15)[i64 5];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %17)[i64 5];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %15)[i64 6];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %17)[i64 6];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %15)[i64 7];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %17)[i64 7];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %15)[i64 8];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %17)[i64 8];
    store i32* %41 with i32 %40;
    i32* %42 = getelementptr &(i32* %15)[i64 9];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %17)[i64 9];
    store i32* %44 with i32 %43;
    i32* %45 = getelementptr &(i32* %15)[i64 10];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %17)[i64 10];
    store i32* %47 with i32 %46;
    i32* %48 = getelementptr &(i32* %15)[i64 11];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %17)[i64 11];
    store i32* %50 with i32 %49;
    i32* %51 = getelementptr &(i32* %15)[i64 12];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %17)[i64 12];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %15)[i64 13];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %17)[i64 13];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %15)[i64 14];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %17)[i64 14];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %15)[i64 15];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %17)[i64 15];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %14, i32 16;
    i1 %64 = icmp sgt i32 %11, i32 %63;
    cbr i1 %64(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %65 = phi [^super.header, i32 %0] [^b1, i32 %63];
    i32 %66 = phi [^super.header, i32 undef] [^b1, i32 %63];
    i1 %67 = icmp sgt i32 %9, i32 %65;
    cbr i1 %67(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %68 = phi [^scalar.header, i32 %12] [^b2, i32 %72];
    i32* %69 = getelementptr &(i32* %7)[i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %5)[i32 %68];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %68, i32 1;
    i1 %73 = icmp sgt i32 %1, i32 %72;
    cbr i1 %73(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %74 = phi [^scalar.header1, i32 %65] [^b3, i32 %87];
    i32* %75 = getelementptr &(i32* %7)[i32 %74];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %5)[i32 %74];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %75)[i64 1];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %77)[i64 1];
    store i32* %80 with i32 %79;
    i32* %81 = getelementptr &(i32* %75)[i64 2];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %77)[i64 2];
    store i32* %83 with i32 %82;
    i32* %84 = getelementptr &(i32* %75)[i64 3];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %77)[i64 3];
    store i32* %86 with i32 %85;
    i32 %87 = add i32 %74, i32 4;
    i1 %88 = icmp sgt i32 %9, i32 %87;
    cbr i1 %88(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_2 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32* %5 = ptradd [16 * i8]* %2, i32 8;
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %0, i32 %6;
    i32* %8 = ptradd [16 * i8]* %2, i32 0;
    i32 %9 = load i32* %8;
    i32 %10 = add i32 %7, i32 %9;
    i32 %11 = add i32 %4, i32 -3;
    i32 %12 = add i32 %4, i32 -18;
    i32 %13 = add i32 %4, i32 -81;
    i32 %14 = add i32 %4, i32 -336;
    i32 %15 = add i32 %4, i32 -1359;
    i32 %16 = add i32 %4, i32 -5454;
    i32 %17 = add i32 %4, i32 -21837;
    [10000000 * i32]* %18 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %19 = getelementptr &([10000000 * i32]* %18)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %20 = phi [^b, i32 %0] [^b7, i32 %79];
    i32 %21 = phi [^b, i32 %10] [^b7, i32 %81];
    i32 %22 = sub i32 %20, i32 %4;
    i32 %23 = add i32 %4, i32 %20;
    i32* %24 = getelementptr &(i32* %19)[i32 %21];
    ubr ^while.body;
  ^while.body:
    i32 %25 = phi [^b1, i32 0] [^b5, i32 %63];
    i32 %26 = sub i32 %25, i32 %4;
    i32 %27 = add i32 %26, i32 3;
    i32 %28 = add i32 %4, i32 %25;
    i1 %29 = icmp slt i32 %27, i32 %28;
    i32 %30 = add i32 %11, i32 %25;
    i32 %31 = add i32 %12, i32 %25;
    i32 %32 = add i32 %13, i32 %25;
    i32 %33 = add i32 %14, i32 %25;
    i32 %34 = add i32 %15, i32 %25;
    i32 %35 = add i32 %16, i32 %25;
    i32 %36 = add i32 %17, i32 %25;
    cbr i1 %29(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %37 = phi [^while.body, i32 %22] [^b6, i32 %77];
    i32 %38 = add i32 %26, i32 15;
    i1 %39 = icmp sgt i32 %30, i32 %38;
    cbr i1 %39(prob = 0.941176), ^super.header, ^scalar.header;
  ^b3:
    i32 %40 = phi [^while.body, i32 %22] [^b4, i32 %50];
    i1 %41 = icmp slt i32 %26, i32 %28;
    cbr i1 %41(prob = 0.75), ^while.body1, ^b4;
  ^super.header:
    i32 %42 = add i32 %26, i32 63;
    i1 %43 = icmp sgt i32 %31, i32 %42;
    cbr i1 %43(prob = 0.941176), ^super.header1, ^scalar.header1;
  ^while.body1 {scalar}:
    i32 %44 = phi [^b3, i32 %26] [^while.body1, i32 %45];
    i32 %45 = add i32 %44, i32 1;
    i1 %46 = icmp sgt i32 %28, i32 %45;
    cbr i1 %46(prob = 0.75), ^while.body1, ^b4;
  ^scalar.header:
    i32 %47 = phi [^b2, i32 %26] [^scalar.final1, i32 %67];
    i32 %48 = phi [^b2, i32 undef] [^scalar.final1, i32 %67];
    i1 %49 = icmp sgt i32 %30, i32 %47;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.final;
  ^b4:
    i32 %50 = add i32 %40, i32 1;
    i1 %51 = icmp sgt i32 %23, i32 %50;
    cbr i1 %51(prob = 0.5), ^b3, ^b5;
  ^super.header1:
    i32 %52 = add i32 %26, i32 255;
    i1 %53 = icmp sgt i32 %32, i32 %52;
    cbr i1 %53(prob = 0.941176), ^super.header2, ^scalar.header2;
  ^scalar.header1:
    i32 %54 = phi [^super.header, i32 %26] [^scalar.final2, i32 %84];
    i32 %55 = phi [^super.header, i32 undef] [^scalar.final2, i32 %84];
    i1 %56 = icmp sgt i32 %31, i32 %54;
    cbr i1 %56(prob = 0.75), ^while.body3, ^scalar.final1;
  ^while.body2 {scalar}:
    i32 %57 = phi [^scalar.header, i32 %47] [^while.body2, i32 %58];
    i32 %58 = add i32 %57, i32 4;
    i1 %59 = icmp sgt i32 %30, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body2, ^scalar.final;
  ^scalar.final:
    i32 %60 = phi [^scalar.header, i32 %48] [^while.body2, i32 %58];
    i1 %61 = icmp sgt i32 %28, i32 %60;
    cbr i1 %61(prob = 0.75), ^while.body4, ^b6;
  ^b5:
    i32* %62 = getelementptr &(i32* %24)[i32 %25];
    store i32* %62 with i32 0;
    i32 %63 = add i32 %25, i32 1;
    i1 %64 = icmp sgt i32 %6, i32 %63;
    cbr i1 %64(prob = 0.5), ^while.body, ^b7;
  ^super.header2:
    i32 %65 = add i32 %26, i32 1023;
    i1 %66 = icmp sgt i32 %33, i32 %65;
    cbr i1 %66(prob = 0.941176), ^super.header3, ^scalar.header3;
  ^scalar.final1:
    i32 %67 = phi [^scalar.header1, i32 %55] [^while.body3, i32 %72];
    ubr ^scalar.header;
  ^scalar.header2:
    i32 %68 = phi [^super.header1, i32 %26] [^scalar.final3, i32 %93];
    i32 %69 = phi [^super.header1, i32 undef] [^scalar.final3, i32 %93];
    i1 %70 = icmp sgt i32 %32, i32 %68;
    cbr i1 %70(prob = 0.75), ^while.body5, ^scalar.final2;
  ^while.body3 {scalar}:
    i32 %71 = phi [^scalar.header1, i32 %54] [^while.body3, i32 %72];
    i32 %72 = add i32 %71, i32 16;
    i1 %73 = icmp sgt i32 %31, i32 %72;
    cbr i1 %73(prob = 0.75), ^while.body3, ^scalar.final1;
  ^while.body4 {scalar}:
    i32 %74 = phi [^scalar.final, i32 %60] [^while.body4, i32 %75];
    i32 %75 = add i32 %74, i32 1;
    i1 %76 = icmp sgt i32 %28, i32 %75;
    cbr i1 %76(prob = 0.75), ^while.body4, ^b6;
  ^b6:
    i32 %77 = add i32 %37, i32 1;
    i1 %78 = icmp sgt i32 %23, i32 %77;
    cbr i1 %78(prob = 0.5), ^b2, ^b5;
  ^b7:
    i32 %79 = add i32 %20, i32 1;
    i1 %80 = icmp sgt i32 %1, i32 %79;
    i32 %81 = add i32 %6, i32 %21;
    cbr i1 %80(prob = 0.984615), ^b1, ^b8;
  ^super.header3:
    i32 %82 = add i32 %26, i32 4095;
    i1 %83 = icmp sgt i32 %34, i32 %82;
    cbr i1 %83(prob = 0.941176), ^super.header4, ^scalar.header4;
  ^scalar.final2:
    i32 %84 = phi [^scalar.header2, i32 %69] [^while.body5, i32 %89];
    ubr ^scalar.header1;
  ^scalar.header3:
    i32 %85 = phi [^super.header2, i32 %26] [^scalar.final4, i32 %102];
    i32 %86 = phi [^super.header2, i32 undef] [^scalar.final4, i32 %102];
    i1 %87 = icmp sgt i32 %33, i32 %85;
    cbr i1 %87(prob = 0.75), ^while.body6, ^scalar.final3;
  ^while.body5 {scalar}:
    i32 %88 = phi [^scalar.header2, i32 %68] [^while.body5, i32 %89];
    i32 %89 = add i32 %88, i32 64;
    i1 %90 = icmp sgt i32 %32, i32 %89;
    cbr i1 %90(prob = 0.75), ^while.body5, ^scalar.final2;
  ^b8:
    ret;
  ^super.header4:
    i32 %91 = add i32 %26, i32 16383;
    i1 %92 = icmp sgt i32 %35, i32 %91;
    cbr i1 %92(prob = 0.941176), ^super.header5, ^scalar.header5;
  ^scalar.final3:
    i32 %93 = phi [^scalar.header3, i32 %86] [^while.body6, i32 %98];
    ubr ^scalar.header2;
  ^scalar.header4:
    i32 %94 = phi [^super.header3, i32 %26] [^scalar.final5, i32 %113];
    i32 %95 = phi [^super.header3, i32 undef] [^scalar.final5, i32 %113];
    i1 %96 = icmp sgt i32 %34, i32 %94;
    cbr i1 %96(prob = 0.75), ^while.body7, ^scalar.final4;
  ^while.body6 {scalar}:
    i32 %97 = phi [^scalar.header3, i32 %85] [^while.body6, i32 %98];
    i32 %98 = add i32 %97, i32 256;
    i1 %99 = icmp sgt i32 %33, i32 %98;
    cbr i1 %99(prob = 0.75), ^while.body6, ^scalar.final3;
  ^super.header5:
    i32 %100 = add i32 %26, i32 65535;
    i1 %101 = icmp sgt i32 %36, i32 %100;
    cbr i1 %101(prob = 0.941176), ^while.body8, ^scalar.header6;
  ^scalar.final4:
    i32 %102 = phi [^scalar.header4, i32 %95] [^while.body7, i32 %107];
    ubr ^scalar.header3;
  ^scalar.header5:
    i32 %103 = phi [^super.header4, i32 %26] [^scalar.final6, i32 %120];
    i32 %104 = phi [^super.header4, i32 undef] [^scalar.final6, i32 %120];
    i1 %105 = icmp sgt i32 %35, i32 %103;
    cbr i1 %105(prob = 0.75), ^while.body9, ^scalar.final5;
  ^while.body7 {scalar}:
    i32 %106 = phi [^scalar.header4, i32 %94] [^while.body7, i32 %107];
    i32 %107 = add i32 %106, i32 1024;
    i1 %108 = icmp sgt i32 %34, i32 %107;
    cbr i1 %108(prob = 0.75), ^while.body7, ^scalar.final4;
  ^while.body8:
    i32 %109 = phi [^super.header5, i32 %26] [^while.body8, i32 %112];
    i32 %110 = add i32 %109, i32 131071;
    i1 %111 = icmp sgt i32 %36, i32 %110;
    i32 %112 = add i32 %109, i32 65536;
    cbr i1 %111(prob = 0.941176), ^while.body8, ^scalar.header6;
  ^scalar.final5:
    i32 %113 = phi [^scalar.header5, i32 %104] [^while.body9, i32 %118];
    ubr ^scalar.header4;
  ^scalar.header6:
    i32 %114 = phi [^super.header5, i32 %26] [^while.body8, i32 %112];
    i32 %115 = phi [^super.header5, i32 undef] [^while.body8, i32 %112];
    i1 %116 = icmp sgt i32 %36, i32 %114;
    cbr i1 %116(prob = 0.75), ^while.body10, ^scalar.final6;
  ^while.body9 {scalar}:
    i32 %117 = phi [^scalar.header5, i32 %103] [^while.body9, i32 %118];
    i32 %118 = add i32 %117, i32 4096;
    i1 %119 = icmp sgt i32 %35, i32 %118;
    cbr i1 %119(prob = 0.75), ^while.body9, ^scalar.final5;
  ^scalar.final6:
    i32 %120 = phi [^scalar.header6, i32 %115] [^while.body10, i32 %122];
    ubr ^scalar.header5;
  ^while.body10 {scalar}:
    i32 %121 = phi [^scalar.header6, i32 %114] [^while.body10, i32 %122];
    i32 %122 = add i32 %121, i32 16384;
    i1 %123 = icmp sgt i32 %36, i32 %122;
    cbr i1 %123(prob = 0.75), ^while.body10, ^scalar.final6;
}
internal [16 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_3 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32* %5 = ptradd [16 * i8]* %2, i32 8;
    i32 %6 = load i32* %5;
    i32* %7 = ptradd [16 * i8]* %2, i32 12;
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %0, i32 %8;
    i32* %10 = ptradd [16 * i8]* %2, i32 0;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %9, i32 %11;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %17 = phi [^b, i32 %0] [^b7, i32 %61];
    i32 %18 = phi [^b, i32 %12] [^b7, i32 %63];
    i32 %19 = sub i32 %17, i32 %4;
    i32 %20 = add i32 %4, i32 %17;
    i32* %21 = getelementptr &(i32* %16)[i32 %18];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^b6, i32 %59];
    i32 %23 = sub i32 %22, i32 %4;
    i32 %24 = add i32 %4, i32 %22;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 %19] [^b5, i32 %56];
    i32 %26 = phi [^while.body, i32 0] [^b5, i32 %51];
    i1 %27 = icmp sle i32 %6, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 %23] [^b4, i32 %54];
    i32 %29 = phi [^while.body1, i32 %26] [^b4, i32 %51];
    i32 %30 = or i32 %25, i32 %28;
    i32 %31 = lshr i32 %30, i32 31;
    i1 %32 = ztrunc i32 %31 to i1;
    i1 %33 = or i1 %27, i1 %32;
    i1 %34 = icmp sle i32 %8, i32 %28;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %36 = phi [^while.body2, i32 0] [^b3, i32 %40];
    ubr ^while.body3;
  ^b3:
    i32 %37 = mul i32 %8, i32 %25;
    i32* %38 = getelementptr &(i32* %14)[i32 %28];
    i32* %39 = getelementptr &(i32* %38)[i32 %37];
    i32 %40 = load i32* %39;
    ubr ^b2;
  ^while.body3:
    i32 %41 = phi [^b2, i32 1] [^while.body3, i32 %52];
    i32 %42 = phi [^b2, i32 0] [^while.body3, i32 %51];
    i32 %43 = sdiv i32 %29, i32 %41;
    i32 %44 = srem i32 %43, i32 2;
    i32 %45 = sdiv i32 %36, i32 %41;
    i32 %46 = srem i32 %45, i32 2;
    i1 %47 = icmp eq i32 %44, i32 %46;
    i32 %48 = zext i1 %47 to i32;
    i32 %49 = mul i32 %42, i32 2;
    i32 %50 = add i32 %49, i32 1;
    i32 %51 = sub i32 %50, i32 %48;
    i32 %52 = mul i32 %41, i32 2;
    i1 %53 = icmp slt i32 %52, i32 1073741824;
    cbr i1 %53(prob = 0.984615), ^while.body3, ^b4;
  ^b4:
    i32 %54 = add i32 %28, i32 1;
    i1 %55 = icmp sgt i32 %24, i32 %54;
    cbr i1 %55(prob = 0.5), ^while.body2, ^b5;
  ^b5:
    i32 %56 = add i32 %25, i32 1;
    i1 %57 = icmp sgt i32 %20, i32 %56;
    cbr i1 %57(prob = 0.5), ^while.body1, ^b6;
  ^b6:
    i32* %58 = getelementptr &(i32* %21)[i32 %22];
    store i32* %58 with i32 %51;
    i32 %59 = add i32 %22, i32 1;
    i1 %60 = icmp sgt i32 %8, i32 %59;
    cbr i1 %60(prob = 0.5), ^while.body, ^b7;
  ^b7:
    i32 %61 = add i32 %17, i32 1;
    i1 %62 = icmp sgt i32 %1, i32 %61;
    i32 %63 = add i32 %8, i32 %18;
    cbr i1 %62(prob = 0.984615), ^b1, ^b8;
  ^b8:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_4 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32* %5 = ptradd [16 * i8]* %2, i32 8;
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %0, i32 %6;
    i32* %8 = ptradd [16 * i8]* %2, i32 12;
    i32 %9 = load i32* %8;
    i32* %10 = ptradd [16 * i8]* %2, i32 0;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %7, i32 %11;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %17 = phi [^b, i32 %0] [^b9, i32 %62];
    i32 %18 = phi [^b, i32 %12] [^b9, i32 %64];
    i32 %19 = sub i32 %17, i32 %4;
    i32 %20 = add i32 %4, i32 %17;
    i32* %21 = getelementptr &(i32* %16)[i32 %18];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^b8, i32 %60];
    i32 %23 = sub i32 %22, i32 %4;
    i32 %24 = add i32 %4, i32 %22;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 %19] [^b7, i32 %57];
    i32 %26 = phi [^while.body, i32 0] [^b7, i32 %52];
    i1 %27 = icmp sle i32 %9, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 %23] [^b6, i32 %55];
    i32 %29 = phi [^while.body1, i32 %26] [^b6, i32 %52];
    i32 %30 = or i32 %25, i32 %28;
    i32 %31 = lshr i32 %30, i32 31;
    i1 %32 = ztrunc i32 %31 to i1;
    i1 %33 = or i1 %27, i1 %32;
    i1 %34 = icmp sle i32 %6, i32 %28;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %36 = phi [^while.body2, i32 0] [^b3, i32 %40];
    ubr ^while.body3;
  ^b3:
    i32 %37 = mul i32 %6, i32 %25;
    i32* %38 = getelementptr &(i32* %14)[i32 %28];
    i32* %39 = getelementptr &(i32* %38)[i32 %37];
    i32 %40 = load i32* %39;
    ubr ^b2;
  ^while.body3:
    i32 %41 = phi [^b2, i32 1] [^b5, i32 %53];
    i32 %42 = phi [^b2, i32 0] [^b5, i32 %52];
    i32 %43 = sdiv i32 %29, i32 %41;
    i32 %44 = and i32 %43, i32 -2147483647;
    i1 %45 = icmp eq i32 %44, i32 1;
    cbr i1 %45(prob = 0.5), ^b5, ^b4;
  ^b4:
    i32 %46 = sdiv i32 %36, i32 %41;
    i32 %47 = and i32 %46, i32 -2147483647;
    i1 %48 = icmp eq i32 %47, i32 1;
    ubr ^b5;
  ^b5:
    i1 %49 = phi [^while.body3, i1 true] [^b4, i1 %48];
    i32 %50 = mul i32 %42, i32 2;
    i32 %51 = zext i1 %49 to i32;
    i32 %52 = add i32 %50, i32 %51;
    i32 %53 = mul i32 %41, i32 2;
    i1 %54 = icmp slt i32 %53, i32 1073741824;
    cbr i1 %54(prob = 0.984615), ^while.body3, ^b6;
  ^b6:
    i32 %55 = add i32 %28, i32 1;
    i1 %56 = icmp sgt i32 %24, i32 %55;
    cbr i1 %56(prob = 0.5), ^while.body2, ^b7;
  ^b7:
    i32 %57 = add i32 %25, i32 1;
    i1 %58 = icmp sgt i32 %20, i32 %57;
    cbr i1 %58(prob = 0.5), ^while.body1, ^b8;
  ^b8:
    i32* %59 = getelementptr &(i32* %21)[i32 %22];
    store i32* %59 with i32 %52;
    i32 %60 = add i32 %22, i32 1;
    i1 %61 = icmp sgt i32 %6, i32 %60;
    cbr i1 %61(prob = 0.5), ^while.body, ^b9;
  ^b9:
    i32 %62 = add i32 %17, i32 1;
    i1 %63 = icmp sgt i32 %1, i32 %62;
    i32 %64 = add i32 %6, i32 %18;
    cbr i1 %63(prob = 0.984615), ^b1, ^b10;
  ^b10:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_4, align 8;
internal func @cmmc_parallel_body_5(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_5 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32* %5 = ptradd [16 * i8]* %2, i32 8;
    i32 %6 = load i32* %5;
    i32* %7 = ptradd [16 * i8]* %2, i32 12;
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %0, i32 %8;
    i32* %10 = ptradd [16 * i8]* %2, i32 0;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %9, i32 %11;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %17 = phi [^b, i32 %0] [^b7, i32 %49];
    i32 %18 = phi [^b, i32 %12] [^b7, i32 %51];
    i32 %19 = sub i32 %17, i32 %4;
    i32 %20 = add i32 %4, i32 %17;
    i32* %21 = getelementptr &(i32* %16)[i32 %18];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^b6, i32 %47];
    i32 %23 = sub i32 %22, i32 %4;
    i32 %24 = add i32 %4, i32 %22;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 %19] [^b5, i32 %44];
    i32 %26 = phi [^while.body, i32 0] [^b5, i32 %43];
    i1 %27 = icmp sle i32 %6, i32 %25;
    ubr ^b2;
  ^b2:
    i32 %28 = phi [^while.body1, i32 %23] [^b4, i32 %41];
    i32 %29 = phi [^while.body1, i32 %26] [^b4, i32 %43];
    i32 %30 = or i32 %25, i32 %28;
    i32 %31 = lshr i32 %30, i32 31;
    i1 %32 = ztrunc i32 %31 to i1;
    i1 %33 = or i1 %27, i1 %32;
    i1 %34 = icmp sle i32 %8, i32 %28;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.5), ^b4, ^b3;
  ^b3:
    i32 %36 = mul i32 %8, i32 %25;
    i32* %37 = getelementptr &(i32* %14)[i32 %28];
    i32* %38 = getelementptr &(i32* %37)[i32 %36];
    i32 %39 = load i32* %38;
    ubr ^b4;
  ^b4:
    i32 %40 = phi [^b2, i32 0] [^b3, i32 %39];
    i32 %41 = add i32 %28, i32 1;
    i1 %42 = icmp sgt i32 %24, i32 %41;
    i32 %43 = smax i32 %29, i32 %40;
    cbr i1 %42(prob = 0.5), ^b2, ^b5;
  ^b5:
    i32 %44 = add i32 %25, i32 1;
    i1 %45 = icmp sgt i32 %20, i32 %44;
    cbr i1 %45(prob = 0.5), ^while.body1, ^b6;
  ^b6:
    i32* %46 = getelementptr &(i32* %21)[i32 %22];
    store i32* %46 with i32 %43;
    i32 %47 = add i32 %22, i32 1;
    i1 %48 = icmp sgt i32 %8, i32 %47;
    cbr i1 %48(prob = 0.5), ^while.body, ^b7;
  ^b7:
    i32 %49 = add i32 %17, i32 1;
    i1 %50 = icmp sgt i32 %1, i32 %49;
    i32 %51 = add i32 %8, i32 %18;
    cbr i1 %50(prob = 0.984615), ^b1, ^b8;
  ^b8:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_5, align 8;
internal func @cmmc_parallel_body_6(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_6 to [16 * i8]*;
    i32* %3 = ptradd [16 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32 %5 = mul i32 %0, i32 %4;
    i32* %6 = ptradd [16 * i8]* %2, i32 8;
    i32 %7 = load i32* %6;
    i32* %8 = ptradd [16 * i8]* %2, i32 12;
    i32 %9 = load i32* %8;
    i32* %10 = ptradd [16 * i8]* %2, i32 0;
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %5, i32 %11;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %17 = phi [^b, i32 %0] [^b9, i32 %62];
    i32 %18 = phi [^b, i32 %12] [^b9, i32 %64];
    i32 %19 = sub i32 %17, i32 %9;
    i32 %20 = add i32 %9, i32 %17;
    i32* %21 = getelementptr &(i32* %16)[i32 %18];
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^b8, i32 %60];
    i32 %23 = sub i32 %22, i32 %9;
    i32 %24 = add i32 %9, i32 %22;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 %19] [^b7, i32 %57];
    i32 %26 = phi [^while.body, i32 0] [^b7, i32 %52];
    i1 %27 = icmp sle i32 %7, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %28 = phi [^while.body1, i32 %23] [^b6, i32 %55];
    i32 %29 = phi [^while.body1, i32 %26] [^b6, i32 %52];
    i32 %30 = or i32 %25, i32 %28;
    i32 %31 = lshr i32 %30, i32 31;
    i1 %32 = ztrunc i32 %31 to i1;
    i1 %33 = or i1 %27, i1 %32;
    i1 %34 = icmp sle i32 %4, i32 %28;
    i1 %35 = or i1 %33, i1 %34;
    cbr i1 %35(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %36 = phi [^while.body2, i32 0] [^b3, i32 %40];
    ubr ^while.body3;
  ^b3:
    i32 %37 = mul i32 %4, i32 %25;
    i32* %38 = getelementptr &(i32* %14)[i32 %28];
    i32* %39 = getelementptr &(i32* %38)[i32 %37];
    i32 %40 = load i32* %39;
    ubr ^b2;
  ^while.body3:
    i32 %41 = phi [^b2, i32 1] [^b5, i32 %53];
    i32 %42 = phi [^b2, i32 0] [^b5, i32 %52];
    i32 %43 = sdiv i32 %29, i32 %41;
    i32 %44 = and i32 %43, i32 -2147483647;
    i1 %45 = icmp eq i32 %44, i32 1;
    cbr i1 %45(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %46 = sdiv i32 %36, i32 %41;
    i32 %47 = and i32 %46, i32 -2147483647;
    i1 %48 = icmp eq i32 %47, i32 1;
    ubr ^b5;
  ^b5:
    i1 %49 = phi [^while.body3, i1 false] [^b4, i1 %48];
    i32 %50 = mul i32 %42, i32 2;
    i32 %51 = zext i1 %49 to i32;
    i32 %52 = add i32 %50, i32 %51;
    i32 %53 = mul i32 %41, i32 2;
    i1 %54 = icmp slt i32 %53, i32 1073741824;
    cbr i1 %54(prob = 0.984615), ^while.body3, ^b6;
  ^b6:
    i32 %55 = add i32 %28, i32 1;
    i1 %56 = icmp sgt i32 %24, i32 %55;
    cbr i1 %56(prob = 0.5), ^while.body2, ^b7;
  ^b7:
    i32 %57 = add i32 %25, i32 1;
    i1 %58 = icmp sgt i32 %20, i32 %57;
    cbr i1 %58(prob = 0.5), ^while.body1, ^b8;
  ^b8:
    i32* %59 = getelementptr &(i32* %21)[i32 %22];
    store i32* %59 with i32 %52;
    i32 %60 = add i32 %22, i32 1;
    i1 %61 = icmp sgt i32 %4, i32 %60;
    cbr i1 %61(prob = 0.5), ^while.body, ^b9;
  ^b9:
    i32 %62 = add i32 %17, i32 1;
    i1 %63 = icmp sgt i32 %1, i32 %62;
    i32 %64 = add i32 %4, i32 %18;
    cbr i1 %63(prob = 0.984615), ^b1, ^b10;
  ^b10:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_6, align 8;
