internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %kernelid = alloc i32;
    i32* %n1 = alloc i32;
    i32* %m = alloc i32;
    i32* %c = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %task = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %c1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %c1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %n2 with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %m1 with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %c1;
    i32 %8 = load i32* %n2;
    i32 %9 = load i32* %m1;
    store i32* %task with i32 %6;
    call (i32) -> void @starttime(i32 109);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body14, i32 %127] [^entry, i32 %7];
    i32 %12 = phi [^while.body14, i32 %128] [^entry, i32 %8];
    i32 %13 = phi [^while.body14, i32 %129] [^entry, i32 %9];
    i32 %14 = phi [^while.body14, i32 %149] [^entry, i32 0];
    i32 %15 = phi [^while.body14, i32 %130] [^entry, i32 %6];
    i1 %16 = scmp lt i32 %14, i32 %15;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %17 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    store i32* %kernelid with i32 %18;
    store i32* %n1 with i32 %12;
    store i32* %m with i32 %13;
    store i32* %c with i32 %11;
    store i32* %i1 with i32 0;
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %19 = mul i32 %13, i32 %12;
    call (i32, i32*) -> void @putarray(i32 %19, i32* %3);
    ret i32 0;
^while.body1:
    i32 %20 = phi [^b16, i32 %111] [^while.body, i32 0];
    i32 %21 = phi [^b16, i32 %96] [^while.body, i32 %11];
    i32 %22 = phi [^b16, i32 %97] [^while.body, i32 %13];
    i32 %23 = phi [^b16, i32 %98] [^while.body, i32 %12];
    i32 %24 = phi [^b16, i32 %99] [^while.body, i32 %18];
    store i32* %j with i32 0;
    ubr ^while.body2;
^while.body2:
    i32 %25 = phi [^b14, i32 %100] [^while.body1, i32 0];
    i32 %26 = phi [^b14, i32 %95] [^while.body1, i32 %20];
    i32 %27 = phi [^b14, i32 %96] [^while.body1, i32 %21];
    i32 %28 = phi [^b14, i32 %97] [^while.body1, i32 %22];
    i32 %29 = phi [^b14, i32 %98] [^while.body1, i32 %23];
    i32 %30 = phi [^b14, i32 %99] [^while.body1, i32 %24];
    i32 %31 = sdiv i32 %27, i32 2;
    i32 %32 = sub i32 %26, i32 %31;
    i32 %33 = sub i32 %25, i32 %31;
    i32 %34 = add i32 %31, i32 %25;
    i1 %35 = scmp eq i32 %30, i32 0;
    i1 %36 = scmp eq i32 %30, i32 1;
    i32 %37 = add i32 %31, i32 %26;
    ubr ^while.body3;
^while.body3:
    i32 %38 = phi [^b11, i32 %78] [^while.body2, i32 %32];
    i32 %39 = phi [^b11, i32 %70] [^while.body2, i32 0];
    i1 %40 = scmp lt i32 %38, i32 0;
    ubr ^while.body4;
^while.body4:
    i32 %41 = phi [^while.body3, i32 %39] [^while.body8, i32 %70];
    i32 %42 = phi [^while.body3, i32 %33] [^while.body8, i32 %71];
    cbr i1 %40(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %43 = scmp lt i32 %42, i32 0;
    ubr ^b2;
^b2:
    i1 %44 = phi [^while.body4, i1 true] [^b1, i1 %43];
    cbr i1 %44(prob = 0.5), ^b4, ^b3;
^b3:
    i1 %45 = scmp ge i32 %38, i32 %29;
    ubr ^b4;
^b4:
    i1 %46 = phi [^b2, i1 true] [^b3, i1 %45];
    cbr i1 %46(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %47 = scmp ge i32 %42, i32 %28;
    ubr ^b6;
^b6:
    i1 %48 = phi [^b4, i1 true] [^b5, i1 %47];
    cbr i1 %48(prob = 0.5), ^while.body5, ^b7;
^b7:
    i32 %49 = mul i32 %28, i32 %38;
    i32 %50 = add i32 %42, i32 %49;
    i32* %51 = getelementptr &(i32* %3)[i32 %50];
    i32 %52 = load i32* %51;
    ubr ^while.body5;
^while.body5:
    i32 %53 = phi [^b6, i32 0] [^b7, i32 %52];
    cbr i1 %35(prob = 0.5), ^if.then, ^b8;
^if.then:
    i32 %54 = add i32 %41, i32 %53;
    ubr ^while.header1;
^b8:
    cbr i1 %36(prob = 0.5), ^while.header2, ^b9;
^while.header1:
    i32 %55 = phi [^while.body6, i32 %61] [^if.then, i32 %54];
    i1 %56 = scmp gt i32 %55, i32 1073741824;
    cbr i1 %56(prob = 0.97), ^while.body6, ^while.header3;
^while.header2:
    i32 %57 = phi [^b8, i32 0] [^b13, i32 %84];
    i32 %58 = phi [^b8, i32 1] [^b13, i32 %85];
    i1 %59 = scmp lt i32 %58, i32 1073741824;
    cbr i1 %59(prob = 0.97), ^while.body7, ^while.body8;
^b9:
    i1 %60 = scmp eq i32 %30, i32 2;
    cbr i1 %60(prob = 0.5), ^if.then1, ^b10;
^while.body6:
    i32 %61 = add i32 %55, i32 -1073741824;
    ubr ^while.header1;
^while.header3:
    i32 %62 = phi [^while.header1, i32 %55] [^while.body9, i32 %74];
    i1 %63 = scmp lt i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body9, ^while.body8;
^while.body7:
    i32 %64 = sdiv i32 %41, i32 %58;
    i32 %65 = srem i32 %64, i32 2;
    i32 %66 = sdiv i32 %53, i32 %58;
    i32 %67 = srem i32 %66, i32 2;
    i1 %68 = scmp eq i32 %65, i32 %67;
    cbr i1 %68(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i1 %69 = scmp gt i32 %41, i32 %53;
    cbr i1 %69(prob = 0.5), ^while.body8, ^if.else1;
^while.body8:
    i32 %70 = phi [^while.header5, i32 %105] [^while.header4, i32 %80] [^while.header3, i32 %62] [^b12, i32 0] [^if.else1, i32 %53] [^if.then1, i32 %41] [^while.header2, i32 %57];
    i32 %71 = add i32 %42, i32 1;
    i1 %72 = scmp ge i32 %71, i32 %34;
    cbr i1 %72(prob = 0.5), ^b11, ^while.body4;
^b10:
    i1 %73 = scmp eq i32 %30, i32 3;
    cbr i1 %73(prob = 0.5), ^while.header4, ^b12;
^while.body9:
    i32 %74 = add i32 %62, i32 1073741824;
    ubr ^while.header3;
^if.then2:
    i32 %75 = mul i32 %57, i32 2;
    ubr ^b13;
^if.else:
    i32 %76 = mul i32 %57, i32 2;
    i32 %77 = add i32 %76, i32 1;
    ubr ^b13;
^if.else1:
    ubr ^while.body8;
^b11:
    i32 %78 = add i32 %38, i32 1;
    i1 %79 = scmp ge i32 %78, i32 %37;
    cbr i1 %79(prob = 0.5), ^b14, ^while.body3;
^while.header4:
    i32 %80 = phi [^b10, i32 0] [^b20, i32 %125];
    i32 %81 = phi [^b10, i32 1] [^b20, i32 %126];
    i1 %82 = scmp lt i32 %81, i32 1073741824;
    cbr i1 %82(prob = 0.97), ^while.body10, ^while.body8;
^b12:
    i1 %83 = scmp eq i32 %30, i32 4;
    cbr i1 %83(prob = 0.5), ^while.header5, ^while.body8;
^b13:
    i32 %84 = phi [^if.else, i32 %77] [^if.then2, i32 %75];
    i32 %85 = mul i32 %58, i32 2;
    ubr ^while.header2;
^b14:
    i32 %86 = mul i32 %28, i32 %26;
    i32 %87 = add i32 %86, i32 %25;
    i32* %88 = getelementptr &(i32* %10)[i32 %87];
    store i32* %88 with i32 %70;
    i32 %89 = load i32* %c1;
    i32 %90 = load i32* %n2;
    i32 %91 = load i32* %m1;
    i32 %92 = load i32* %task;
    i32 %93 = load i32* %i2;
    i32 %94 = load i32* %j;
    i32 %95 = load i32* %i1;
    i32 %96 = load i32* %c;
    i32 %97 = load i32* %m;
    i32 %98 = load i32* %n1;
    i32 %99 = load i32* %kernelid;
    i32 %100 = add i32 %94, i32 1;
    store i32* %j with i32 %100;
    i1 %101 = scmp ge i32 %100, i32 %97;
    cbr i1 %101(prob = 0.5), ^b16, ^while.body2;
^while.body10:
    i32 %102 = sdiv i32 %41, i32 %81;
    i32 %103 = srem i32 %102, i32 2;
    i1 %104 = scmp eq i32 %103, i32 1;
    cbr i1 %104(prob = 0.5), ^b17, ^b15;
^while.header5:
    i32 %105 = phi [^b12, i32 0] [^b21, i32 %150];
    i32 %106 = phi [^b12, i32 1] [^b21, i32 %151];
    i1 %107 = scmp lt i32 %106, i32 1073741824;
    cbr i1 %107(prob = 0.97), ^while.body11, ^while.body8;
^b15:
    i32 %108 = sdiv i32 %53, i32 %81;
    i32 %109 = srem i32 %108, i32 2;
    i1 %110 = scmp eq i32 %109, i32 1;
    ubr ^b17;
^b16:
    i32 %111 = add i32 %95, i32 1;
    store i32* %i1 with i32 %111;
    i1 %112 = scmp ge i32 %111, i32 %98;
    cbr i1 %112(prob = 0.5), ^while.body12, ^while.body1;
^b17:
    i1 %113 = phi [^b15, i1 %110] [^while.body10, i1 true];
    cbr i1 %113(prob = 0.5), ^if.then3, ^if.else2;
^while.body11:
    i32 %114 = sdiv i32 %41, i32 %106;
    i32 %115 = srem i32 %114, i32 2;
    i1 %116 = scmp eq i32 %115, i32 1;
    cbr i1 %116(prob = 0.5), ^b18, ^b19;
^while.body12:
    i32 %117 = mul i32 %91, i32 %90;
    store i32* %n with i32 %117;
    store i32* %i with i32 0;
    ubr ^while.header6;
^if.then3:
    i32 %118 = mul i32 %80, i32 2;
    i32 %119 = add i32 %118, i32 1;
    ubr ^b20;
^if.else2:
    i32 %120 = mul i32 %80, i32 2;
    ubr ^b20;
^b18:
    i32 %121 = sdiv i32 %53, i32 %106;
    i32 %122 = srem i32 %121, i32 2;
    i1 %123 = scmp eq i32 %122, i32 1;
    ubr ^b19;
^b19:
    i1 %124 = phi [^b18, i1 %123] [^while.body11, i1 false];
    cbr i1 %124(prob = 0.5), ^if.then4, ^if.else3;
^b20:
    i32 %125 = phi [^if.else2, i32 %120] [^if.then3, i32 %119];
    i32 %126 = mul i32 %81, i32 2;
    ubr ^while.header4;
^while.header6:
    i32 %127 = phi [^while.body13, i32 %141] [^while.body12, i32 %89];
    i32 %128 = phi [^while.body13, i32 %142] [^while.body12, i32 %90];
    i32 %129 = phi [^while.body13, i32 %143] [^while.body12, i32 %91];
    i32 %130 = phi [^while.body13, i32 %144] [^while.body12, i32 %92];
    i32 %131 = phi [^while.body13, i32 %145] [^while.body12, i32 %93];
    i32 %132 = phi [^while.body13, i32 %148] [^while.body12, i32 0];
    i32 %133 = phi [^while.body12, i32 %117] [^while.body13, i32 %147];
    i1 %134 = scmp lt i32 %132, i32 %133;
    cbr i1 %134(prob = 0.97), ^while.body13, ^while.body14;
^if.then4:
    i32 %135 = mul i32 %105, i32 2;
    i32 %136 = add i32 %135, i32 1;
    ubr ^b21;
^if.else3:
    i32 %137 = mul i32 %105, i32 2;
    ubr ^b21;
^while.body13:
    i32* %138 = getelementptr &(i32* %3)[i32 %132];
    i32* %139 = getelementptr &(i32* %10)[i32 %132];
    i32 %140 = load i32* %139;
    store i32* %138 with i32 %140;
    i32 %141 = load i32* %c1;
    i32 %142 = load i32* %n2;
    i32 %143 = load i32* %m1;
    i32 %144 = load i32* %task;
    i32 %145 = load i32* %i2;
    i32 %146 = load i32* %i;
    i32 %147 = load i32* %n;
    i32 %148 = add i32 %146, i32 1;
    store i32* %i with i32 %148;
    ubr ^while.header6;
^while.body14:
    i32 %149 = add i32 %131, i32 1;
    store i32* %i2 with i32 %149;
    ubr ^while.header;
^b21:
    i32 %150 = phi [^if.else3, i32 %137] [^if.then4, i32 %136];
    i32 %151 = mul i32 %106, i32 2;
    ubr ^while.header5;
}
