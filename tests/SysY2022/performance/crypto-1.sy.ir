internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [32768 * i32]* @buffer;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [80 * i32]* %words = alloc [80 * i32];
    [5 * i32]* %output_b = alloc [5 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 161);
    i32* %2 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %6 with i32 0;
    [32768 * i32]* %7 = ptrcast [32768 * i32]* @buffer to [32768 * i32]*;
    i32* %8 = getelementptr &([32768 * i32]* %7)[i64 0][i64 0];
    i32* %9 = getelementptr &([32768 * i32]* %7)[i64 0][i64 32000];
    i32* %10 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 %0] [^b3, i32 %28];
    i32 %12 = phi [^entry, i32 %1] [^b3, i32 %93];
    i1 %13 = icmp sgt i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %14 = phi [^while.header, i32 %11] [^while.body, i32 %28];
    i32 %15 = phi [^while.header, i32 0] [^while.body, i32 %40];
    i32 %16 = mul i32 %14, i32 8193;
    i32 %17 = sdiv i32 %16, i32 131072;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = mul i32 %18, i32 270369;
    i32 %20 = sdiv i32 %19, i32 131072;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = mul i32 %21, i32 270369;
    i32 %23 = sdiv i32 %22, i32 131072;
    i32 %24 = add i32 %22, i32 %23;
    i32 %25 = mul i32 %24, i32 270369;
    i32 %26 = sdiv i32 %25, i32 131072;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = mul i32 %27, i32 33;
    i32 %29 = srem i32 %28, i32 256;
    i32 %30 = mul i32 %24, i32 33;
    i32 %31 = srem i32 %30, i32 256;
    i32 %32 = mul i32 %21, i32 33;
    i32 %33 = srem i32 %32, i32 256;
    i32 %34 = mul i32 %18, i32 33;
    i32 %35 = srem i32 %34, i32 256;
    i32* %36 = getelementptr &([32768 * i32]* %7)[i64 0][i32 %15];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 %33;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 %31;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 %29;
    i32 %40 = add i32 %15, i32 4;
    i1 %41 = icmp slt i32 %40, i32 32000;
    cbr i1 %41(prob = 1), ^while.body, ^postbody;
  ^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %2);
    ret i32 0;
  ^postbody:
    store i32* %9 with i32 128;
    ubr ^while.body1;
  ^while.body1:
    i32 %42 = phi [^postbody, i32 32001] [^while.body1, i32 %44];
    i32* %43 = getelementptr &(i32* %8)[i32 %42];
    store i32* %43 with i32 0;
    i32 %44 = add i32 %42, i32 1;
    i32 %45 = srem i32 %44, i32 64;
    i1 %46 = icmp neq i32 %45, i32 60;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32* %47 = getelementptr &(i32* %8)[i32 %44];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 125;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32 %51 = add i32 %42, i32 5;
    ubr ^b2;
  ^b2:
    i64 %52 = phi [^b1, i64 0] [^b2, i64 %69];
    i32* %53 = getelementptr &(i32* %10)[i64 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %53)[i64 4];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %53)[i64 5];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %53)[i64 6];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %53)[i64 7];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %53)[i64 8];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %53)[i64 9];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %53)[i64 10];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %53)[i64 11];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %53)[i64 12];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %53)[i64 13];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %53)[i64 14];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %53)[i64 15];
    store i32* %68 with i32 0;
    i64 %69 = add i64 %52, i64 16;
    i1 %70 = icmp slt i64 %69, i64 80;
    cbr i1 %70(prob = 0.8), ^b2, ^while.header1;
  ^while.header1:
    i32 %71 = phi [^b2, i32 -1009589776] [^b4, i32 %259];
    i32 %72 = phi [^b2, i32 271733878] [^b4, i32 %258];
    i32 %73 = phi [^b2, i32 -1732584194] [^b4, i32 %257];
    i32 %74 = phi [^b2, i32 -271733879] [^b4, i32 %256];
    i32 %75 = phi [^b2, i32 1732584193] [^b4, i32 %255];
    i32 %76 = phi [^b2, i32 0] [^b4, i32 %260];
    i1 %77 = icmp sgt i32 %51, i32 %76;
    cbr i1 %77(prob = 0.97), ^while.body2, ^b3;
  ^b3:
    i32 %78 = load i32* %2;
    i32 %79 = add i32 %75, i32 %78;
    i32 %80 = neg i32 %79;
    store i32* %2 with i32 %80;
    i32 %81 = load i32* %3;
    i32 %82 = add i32 %74, i32 %81;
    i32 %83 = neg i32 %82;
    store i32* %3 with i32 %83;
    i32 %84 = load i32* %4;
    i32 %85 = add i32 %73, i32 %84;
    i32 %86 = neg i32 %85;
    store i32* %4 with i32 %86;
    i32 %87 = load i32* %5;
    i32 %88 = add i32 %72, i32 %87;
    i32 %89 = neg i32 %88;
    store i32* %5 with i32 %89;
    i32 %90 = load i32* %6;
    i32 %91 = add i32 %71, i32 %90;
    i32 %92 = neg i32 %91;
    store i32* %6 with i32 %92;
    i32 %93 = add i32 %12, i32 -1;
    ubr ^while.header;
  ^while.body2:
    i32 %94 = phi [^while.header1, i32 0] [^while.body2, i32 %166];
    i32 %95 = mul i32 %94, i32 4;
    i32 %96 = add i32 %76, i32 %95;
    i32* %97 = getelementptr &(i32* %8)[i32 %96];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %97)[i64 1];
    i32 %100 = load i32* %99;
    i32 %101 = mul i32 %100, i32 65536;
    i32 %102 = mul i32 %98, i32 16777216;
    i32 %103 = add i32 %101, i32 %102;
    i32* %104 = getelementptr &(i32* %97)[i64 2];
    i32 %105 = load i32* %104;
    i32 %106 = mul i32 %105, i32 256;
    i32 %107 = add i32 %103, i32 %106;
    i32* %108 = getelementptr &(i32* %97)[i64 3];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %107, i32 %109;
    i32* %111 = getelementptr &([80 * i32]* %words)[i64 0][i32 %94];
    store i32* %111 with i32 %110;
    i32 %112 = add i32 %94, i32 1;
    i32 %113 = mul i32 %112, i32 4;
    i32 %114 = add i32 %76, i32 %113;
    i32* %115 = getelementptr &(i32* %8)[i32 %114];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %115)[i64 1];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %118, i32 65536;
    i32 %120 = mul i32 %116, i32 16777216;
    i32 %121 = add i32 %119, i32 %120;
    i32* %122 = getelementptr &(i32* %115)[i64 2];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %123, i32 256;
    i32 %125 = add i32 %121, i32 %124;
    i32* %126 = getelementptr &(i32* %115)[i64 3];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %125, i32 %127;
    i32* %129 = getelementptr &(i32* %111)[i64 1];
    store i32* %129 with i32 %128;
    i32 %130 = add i32 %94, i32 2;
    i32 %131 = mul i32 %130, i32 4;
    i32 %132 = add i32 %76, i32 %131;
    i32* %133 = getelementptr &(i32* %8)[i32 %132];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %133)[i64 1];
    i32 %136 = load i32* %135;
    i32 %137 = mul i32 %136, i32 65536;
    i32 %138 = mul i32 %134, i32 16777216;
    i32 %139 = add i32 %137, i32 %138;
    i32* %140 = getelementptr &(i32* %133)[i64 2];
    i32 %141 = load i32* %140;
    i32 %142 = mul i32 %141, i32 256;
    i32 %143 = add i32 %139, i32 %142;
    i32* %144 = getelementptr &(i32* %133)[i64 3];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %143, i32 %145;
    i32* %147 = getelementptr &(i32* %111)[i64 2];
    store i32* %147 with i32 %146;
    i32 %148 = add i32 %94, i32 3;
    i32 %149 = mul i32 %148, i32 4;
    i32 %150 = add i32 %76, i32 %149;
    i32* %151 = getelementptr &(i32* %8)[i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %151)[i64 1];
    i32 %154 = load i32* %153;
    i32 %155 = mul i32 %154, i32 65536;
    i32 %156 = mul i32 %152, i32 16777216;
    i32 %157 = add i32 %155, i32 %156;
    i32* %158 = getelementptr &(i32* %151)[i64 2];
    i32 %159 = load i32* %158;
    i32 %160 = mul i32 %159, i32 256;
    i32 %161 = add i32 %157, i32 %160;
    i32* %162 = getelementptr &(i32* %151)[i64 3];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %161, i32 %163;
    i32* %165 = getelementptr &(i32* %111)[i64 3];
    store i32* %165 with i32 %164;
    i32 %166 = add i32 %94, i32 4;
    i1 %167 = icmp slt i32 %166, i32 16;
    cbr i1 %167(prob = 0.75), ^while.body2, ^super.header;
  ^super.header:
    i32 %168 = phi [^while.body2, i32 %166] [^while.body3, i32 %169];
    i32 %169 = add i32 %168, i32 4;
    i1 %170 = icmp slt i32 %169, i32 80;
    cbr i1 %170(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body3:
    i32* %171 = getelementptr &([80 * i32]* %words)[i64 0][i32 %168];
    i32* %172 = getelementptr &(i32* %171)[i64 -3];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %171)[i64 -8];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %173, i32 %175;
    i32* %177 = getelementptr &(i32* %171)[i64 -14];
    i32 %178 = load i32* %177;
    i32 %179 = sub i32 %176, i32 %178;
    i32* %180 = getelementptr &(i32* %171)[i64 -16];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    i32 %183 = neg i32 %182;
    i32 %184 = mul i32 %183, i32 2;
    i32 %185 = srem i32 %183, i32 2;
    i32 %186 = add i32 %184, i32 %185;
    store i32* %171 with i32 %186;
    i32* %187 = getelementptr &(i32* %171)[i64 -2];
    i32 %188 = load i32* %187;
    i32* %189 = getelementptr &(i32* %171)[i64 -7];
    i32 %190 = load i32* %189;
    i32 %191 = add i32 %188, i32 %190;
    i32* %192 = getelementptr &(i32* %171)[i64 -13];
    i32 %193 = load i32* %192;
    i32 %194 = sub i32 %191, i32 %193;
    i32* %195 = getelementptr &(i32* %171)[i64 -15];
    i32 %196 = load i32* %195;
    i32 %197 = add i32 %194, i32 %196;
    i32 %198 = neg i32 %197;
    i32 %199 = mul i32 %198, i32 2;
    i32 %200 = srem i32 %198, i32 2;
    i32 %201 = add i32 %199, i32 %200;
    i32* %202 = getelementptr &(i32* %171)[i64 1];
    store i32* %202 with i32 %201;
    i32* %203 = getelementptr &(i32* %171)[i64 -1];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &(i32* %171)[i64 -6];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %204, i32 %206;
    i32* %208 = getelementptr &(i32* %171)[i64 -12];
    i32 %209 = load i32* %208;
    i32 %210 = sub i32 %207, i32 %209;
    i32 %211 = add i32 %178, i32 %210;
    i32 %212 = neg i32 %211;
    i32 %213 = mul i32 %212, i32 2;
    i32 %214 = srem i32 %212, i32 2;
    i32 %215 = add i32 %213, i32 %214;
    i32* %216 = getelementptr &(i32* %171)[i64 2];
    store i32* %216 with i32 %215;
    i32* %217 = getelementptr &(i32* %171)[i64 -5];
    i32 %218 = load i32* %217;
    i32 %219 = add i32 %186, i32 %218;
    i32* %220 = getelementptr &(i32* %171)[i64 -11];
    i32 %221 = load i32* %220;
    i32 %222 = sub i32 %219, i32 %221;
    i32 %223 = add i32 %193, i32 %222;
    i32 %224 = neg i32 %223;
    i32 %225 = mul i32 %224, i32 2;
    i32 %226 = srem i32 %224, i32 2;
    i32 %227 = add i32 %225, i32 %226;
    i32* %228 = getelementptr &(i32* %171)[i64 3];
    store i32* %228 with i32 %227;
    ubr ^super.header;
  ^while.body4:
    i32 %229 = phi [^super.header, i32 %168] [^while.body4, i32 %246];
    i32* %230 = getelementptr &([80 * i32]* %words)[i64 0][i32 %229];
    i32* %231 = getelementptr &(i32* %230)[i64 -3];
    i32 %232 = load i32* %231;
    i32* %233 = getelementptr &(i32* %230)[i64 -8];
    i32 %234 = load i32* %233;
    i32 %235 = add i32 %232, i32 %234;
    i32* %236 = getelementptr &(i32* %230)[i64 -14];
    i32 %237 = load i32* %236;
    i32 %238 = sub i32 %235, i32 %237;
    i32* %239 = getelementptr &(i32* %230)[i64 -16];
    i32 %240 = load i32* %239;
    i32 %241 = add i32 %238, i32 %240;
    i32 %242 = neg i32 %241;
    i32 %243 = mul i32 %242, i32 2;
    i32 %244 = srem i32 %242, i32 2;
    i32 %245 = add i32 %243, i32 %244;
    store i32* %230 with i32 %245;
    i32 %246 = add i32 %229, i32 1;
    i1 %247 = icmp slt i32 %246, i32 80;
    cbr i1 %247(prob = 0.97), ^while.body4, ^while.header2;
  ^while.header2:
    i32 %248 = phi [^while.body4, i32 %71] [^b5, i32 %249];
    i32 %249 = phi [^while.body4, i32 %72] [^b5, i32 %250];
    i32 %250 = phi [^while.body4, i32 %73] [^b5, i32 %275];
    i32 %251 = phi [^while.body4, i32 %74] [^b5, i32 %252];
    i32 %252 = phi [^while.body4, i32 %75] [^b5, i32 %272];
    i32 %253 = phi [^while.body4, i32 0] [^b5, i32 %276];
    i1 %254 = icmp slt i32 %253, i32 80;
    cbr i1 %254(prob = 0.97), ^while.body5, ^b4;
  ^b4:
    i32 %255 = add i32 %75, i32 %252;
    i32 %256 = add i32 %74, i32 %251;
    i32 %257 = add i32 %73, i32 %250;
    i32 %258 = add i32 %72, i32 %249;
    i32 %259 = add i32 %71, i32 %248;
    i32 %260 = add i32 %76, i32 64;
    ubr ^while.header1;
  ^while.body5:
    i1 %261 = icmp slt i32 %253, i32 20;
    cbr i1 %261(prob = 0.5), ^b5, ^if.else;
  ^b5:
    i32 %262 = phi [^while.body5, i32 1518500249] [^entry1, i32 1859775361] [^if.else1, i32 %284];
    i32 %263 = phi [^while.body5, i32 0] [^entry1, i32 %279] [^if.else1, i32 %283];
    i32 %264 = mul i32 %252, i32 32;
    i32 %265 = add i32 %248, i32 %264;
    i32 %266 = add i32 %262, i32 %265;
    i32 %267 = add i32 %263, i32 %266;
    i32 %268 = srem i32 %252, i32 32;
    i32 %269 = add i32 %267, i32 %268;
    i32* %270 = getelementptr &([80 * i32]* %words)[i64 0][i32 %253];
    i32 %271 = load i32* %270;
    i32 %272 = add i32 %269, i32 %271;
    i32 %273 = mul i32 %251, i32 1073741824;
    i32 %274 = srem i32 %251, i32 1073741824;
    i32 %275 = add i32 %273, i32 %274;
    i32 %276 = add i32 %253, i32 1;
    ubr ^while.header2;
  ^if.else:
    i1 %277 = icmp slt i32 %253, i32 40;
    cbr i1 %277(prob = 0.5), ^entry1, ^if.else1;
  ^entry1:
    i32 %278 = add i32 %250, i32 %251;
    i32 %279 = sub i32 %278, i32 %249;
    ubr ^b5;
  ^if.else1:
    i32 %280 = add i32 %250, i32 %251;
    i32 %281 = sub i32 %280, i32 %249;
    i1 %282 = icmp slt i32 %253, i32 60;
    i32 %283 = select i1 %282 ? i32 0 : i32 %281;
    i32 %284 = select i1 %282 ? i32 -1894007588 : i32 -899497722;
    ubr ^b5;
}
