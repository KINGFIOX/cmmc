internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [80 * i32]* %words = alloc [80 * i32];
    [5 * i32]* %output_b = alloc [5 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 161);
    i32* %2 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %6 with i32 0;
    [32768 * i32]* %7 = ptrcast [32768 * i32]* @buffer to [32768 * i32]*;
    i32* %8 = getelementptr &([32768 * i32]* %7)[i64 0][i64 0];
    i32* %9 = getelementptr &([32768 * i32]* %7)[i64 0][i64 32000];
    i32* %10 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 %0] [^b3, i32 %28];
    i32 %12 = phi [^entry, i32 %1] [^b3, i32 %105];
    i1 %13 = scmp gt i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %14 = phi [^while.header, i32 %11] [^while.body, i32 %28];
    i32 %15 = phi [^while.header, i32 0] [^while.body, i32 %40];
    i32 %16 = mul i32 %14, i32 8193;
    i32 %17 = sdiv i32 %16, i32 131072;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = mul i32 %18, i32 270369;
    i32 %20 = sdiv i32 %19, i32 131072;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = mul i32 %21, i32 270369;
    i32 %23 = sdiv i32 %22, i32 131072;
    i32 %24 = add i32 %22, i32 %23;
    i32 %25 = mul i32 %24, i32 270369;
    i32 %26 = sdiv i32 %25, i32 131072;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = mul i32 %27, i32 33;
    i32 %29 = srem i32 %28, i32 256;
    i32 %30 = mul i32 %24, i32 33;
    i32 %31 = srem i32 %30, i32 256;
    i32 %32 = mul i32 %21, i32 33;
    i32 %33 = srem i32 %32, i32 256;
    i32 %34 = mul i32 %18, i32 33;
    i32 %35 = srem i32 %34, i32 256;
    i32* %36 = getelementptr &([32768 * i32]* %7)[i64 0][i32 %15];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 %33;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 %31;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 %29;
    i32 %40 = add i32 %15, i32 4;
    i1 %41 = scmp lt i32 %40, i32 32000;
    cbr i1 %41(prob = 1), ^while.body, ^entry1;
  ^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %2);
    ret i32 0;
  ^entry1:
    store i32* %9 with i32 128;
    ubr ^while.body1;
  ^while.body1:
    i32 %42 = phi [^entry1, i32 32001] [^while.body1, i32 %43];
    i32 %43 = add i32 %42, i32 1;
    i32 %44 = srem i32 %43, i32 64;
    i1 %45 = scmp neq i32 %44, i32 60;
    i32* %46 = getelementptr &(i32* %8)[i32 %42];
    store i32* %46 with i32 0;
    cbr i1 %45(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32* %47 = getelementptr &(i32* %8)[i32 %43];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 125;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32 %51 = add i32 %42, i32 5;
    ubr ^b2;
  ^b2:
    i64 %52 = phi [^b1, i64 0] [^b2, i64 %69];
    i32* %53 = getelementptr &(i32* %10)[i64 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %53)[i64 4];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %53)[i64 5];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %53)[i64 6];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %53)[i64 7];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %53)[i64 8];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %53)[i64 9];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %53)[i64 10];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %53)[i64 11];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %53)[i64 12];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %53)[i64 13];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %53)[i64 14];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %53)[i64 15];
    store i32* %68 with i32 0;
    i64 %69 = add i64 %52, i64 16;
    i1 %70 = scmp lt i64 %69, i64 80;
    cbr i1 %70(prob = 0.8), ^b2, ^while.header1;
  ^while.header1:
    i32 %71 = phi [^b2, i32 0] [^b4, i32 %184];
    i32 %72 = phi [^b2, i32 0] [^b4, i32 %185];
    i32 %73 = phi [^b2, i32 0] [^b4, i32 %288];
    i32 %74 = phi [^b2, i32 -1009589776] [^b4, i32 %287];
    i32 %75 = phi [^b2, i32 271733878] [^b4, i32 %286];
    i32 %76 = phi [^b2, i32 -1732584194] [^b4, i32 %285];
    i32 %77 = phi [^b2, i32 -271733879] [^b4, i32 %284];
    i32 %78 = phi [^b2, i32 1732584193] [^b4, i32 %283];
    i1 %79 = scmp lt i32 %73, i32 %51;
    cbr i1 %79(prob = 0.97), ^while.body2, ^b3;
  ^b3:
    i32 %80 = load i32* %2;
    i32 %81 = add i32 %78, i32 %80;
    i32 %82 = sub i32 %80, i32 %81;
    i32 %83 = add i32 %78, i32 %82;
    i32 %84 = sub i32 %83, i32 %81;
    store i32* %2 with i32 %84;
    i32 %85 = load i32* %3;
    i32 %86 = add i32 %77, i32 %85;
    i32 %87 = sub i32 %85, i32 %86;
    i32 %88 = add i32 %77, i32 %87;
    i32 %89 = sub i32 %88, i32 %86;
    store i32* %3 with i32 %89;
    i32 %90 = load i32* %4;
    i32 %91 = add i32 %76, i32 %90;
    i32 %92 = sub i32 %90, i32 %91;
    i32 %93 = add i32 %76, i32 %92;
    i32 %94 = sub i32 %93, i32 %91;
    store i32* %4 with i32 %94;
    i32 %95 = load i32* %5;
    i32 %96 = add i32 %75, i32 %95;
    i32 %97 = sub i32 %95, i32 %96;
    i32 %98 = add i32 %75, i32 %97;
    i32 %99 = sub i32 %98, i32 %96;
    store i32* %5 with i32 %99;
    i32 %100 = load i32* %6;
    i32 %101 = add i32 %74, i32 %100;
    i32 %102 = sub i32 %100, i32 %101;
    i32 %103 = add i32 %74, i32 %102;
    i32 %104 = sub i32 %103, i32 %101;
    store i32* %6 with i32 %104;
    i32 %105 = add i32 %12, i32 -1;
    ubr ^while.header;
  ^while.body2:
    i32 %106 = phi [^while.header1, i32 0] [^while.body2, i32 %178];
    i32 %107 = mul i32 %106, i32 4;
    i32 %108 = add i32 %73, i32 %107;
    i32* %109 = getelementptr &(i32* %8)[i32 %108];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %109)[i64 1];
    i32 %112 = load i32* %111;
    i32 %113 = mul i32 %112, i32 65536;
    i32 %114 = mul i32 %110, i32 16777216;
    i32 %115 = add i32 %114, i32 %113;
    i32* %116 = getelementptr &(i32* %109)[i64 2];
    i32 %117 = load i32* %116;
    i32 %118 = mul i32 %117, i32 256;
    i32 %119 = add i32 %115, i32 %118;
    i32* %120 = getelementptr &(i32* %109)[i64 3];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %119, i32 %121;
    i32* %123 = getelementptr &([80 * i32]* %words)[i64 0][i32 %106];
    store i32* %123 with i32 %122;
    i32 %124 = add i32 %106, i32 1;
    i32 %125 = mul i32 %124, i32 4;
    i32 %126 = add i32 %73, i32 %125;
    i32* %127 = getelementptr &(i32* %8)[i32 %126];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %127)[i64 1];
    i32 %130 = load i32* %129;
    i32 %131 = mul i32 %130, i32 65536;
    i32 %132 = mul i32 %128, i32 16777216;
    i32 %133 = add i32 %132, i32 %131;
    i32* %134 = getelementptr &(i32* %127)[i64 2];
    i32 %135 = load i32* %134;
    i32 %136 = mul i32 %135, i32 256;
    i32 %137 = add i32 %133, i32 %136;
    i32* %138 = getelementptr &(i32* %127)[i64 3];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %137, i32 %139;
    i32* %141 = getelementptr &(i32* %123)[i64 1];
    store i32* %141 with i32 %140;
    i32 %142 = add i32 %106, i32 2;
    i32 %143 = mul i32 %142, i32 4;
    i32 %144 = add i32 %73, i32 %143;
    i32* %145 = getelementptr &(i32* %8)[i32 %144];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %145)[i64 1];
    i32 %148 = load i32* %147;
    i32 %149 = mul i32 %148, i32 65536;
    i32 %150 = mul i32 %146, i32 16777216;
    i32 %151 = add i32 %150, i32 %149;
    i32* %152 = getelementptr &(i32* %145)[i64 2];
    i32 %153 = load i32* %152;
    i32 %154 = mul i32 %153, i32 256;
    i32 %155 = add i32 %151, i32 %154;
    i32* %156 = getelementptr &(i32* %145)[i64 3];
    i32 %157 = load i32* %156;
    i32 %158 = add i32 %155, i32 %157;
    i32* %159 = getelementptr &(i32* %123)[i64 2];
    store i32* %159 with i32 %158;
    i32 %160 = add i32 %106, i32 3;
    i32 %161 = mul i32 %160, i32 4;
    i32 %162 = add i32 %73, i32 %161;
    i32* %163 = getelementptr &(i32* %8)[i32 %162];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %163)[i64 1];
    i32 %166 = load i32* %165;
    i32 %167 = mul i32 %166, i32 65536;
    i32 %168 = mul i32 %164, i32 16777216;
    i32 %169 = add i32 %168, i32 %167;
    i32* %170 = getelementptr &(i32* %163)[i64 2];
    i32 %171 = load i32* %170;
    i32 %172 = mul i32 %171, i32 256;
    i32 %173 = add i32 %169, i32 %172;
    i32* %174 = getelementptr &(i32* %163)[i64 3];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %173, i32 %175;
    i32* %177 = getelementptr &(i32* %123)[i64 3];
    store i32* %177 with i32 %176;
    i32 %178 = add i32 %106, i32 4;
    i1 %179 = scmp lt i32 %178, i32 16;
    cbr i1 %179(prob = 0.75), ^while.body2, ^indirect;
  ^indirect:
    i1 %180 = scmp lt i32 %178, i32 80;
    cbr i1 %180(prob = 0.97), ^super.header, ^while.header2;
  ^super.header:
    i32 %181 = phi [^indirect, i32 %178] [^while.body3, i32 %182];
    i32 %182 = add i32 %181, i32 4;
    i1 %183 = scmp lt i32 %182, i32 80;
    cbr i1 %183(prob = 0.89), ^while.body3, ^super.header1;
  ^while.header2:
    i32 %184 = phi [^indirect, i32 %71] [^while.body6, i32 %71] [^b5, i32 %424];
    i32 %185 = phi [^indirect, i32 %72] [^while.body6, i32 %72] [^b5, i32 %425];
    i32 %186 = phi [^indirect, i32 0] [^while.body6, i32 0] [^b5, i32 %438];
    i32 %187 = phi [^indirect, i32 %74] [^while.body6, i32 %74] [^b5, i32 %188];
    i32 %188 = phi [^indirect, i32 %75] [^while.body6, i32 %75] [^b5, i32 %189];
    i32 %189 = phi [^indirect, i32 %76] [^while.body6, i32 %76] [^b5, i32 %437];
    i32 %190 = phi [^indirect, i32 %77] [^while.body6, i32 %77] [^b5, i32 %191];
    i32 %191 = phi [^indirect, i32 %78] [^while.body6, i32 %78] [^b5, i32 %434];
    i1 %192 = scmp lt i32 %186, i32 80;
    cbr i1 %192(prob = 0.97), ^while.body4, ^b4;
  ^while.body3:
    i32* %193 = getelementptr &([80 * i32]* %words)[i64 0][i32 %181];
    i32* %194 = getelementptr &(i32* %193)[i64 -3];
    i32 %195 = load i32* %194;
    i32* %196 = getelementptr &(i32* %193)[i64 -8];
    i32 %197 = load i32* %196;
    i32 %198 = add i32 %195, i32 %197;
    i32 %199 = sub i32 %195, i32 %198;
    i32 %200 = add i32 %197, i32 %199;
    i32 %201 = sub i32 %200, i32 %198;
    i32* %202 = getelementptr &(i32* %193)[i64 -14];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %201, i32 %203;
    i32 %205 = sub i32 %201, i32 %204;
    i32 %206 = add i32 %203, i32 %205;
    i32 %207 = sub i32 %206, i32 %204;
    i32* %208 = getelementptr &(i32* %193)[i64 -16];
    i32 %209 = load i32* %208;
    i32 %210 = add i32 %207, i32 %209;
    i32 %211 = sub i32 %207, i32 %210;
    i32 %212 = add i32 %209, i32 %211;
    i32 %213 = sub i32 %212, i32 %210;
    i32 %214 = mul i32 %213, i32 2;
    i32 %215 = srem i32 %213, i32 2;
    i32 %216 = add i32 %214, i32 %215;
    store i32* %193 with i32 %216;
    i32* %217 = getelementptr &(i32* %193)[i64 -2];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &(i32* %193)[i64 -7];
    i32 %220 = load i32* %219;
    i32 %221 = add i32 %218, i32 %220;
    i32 %222 = sub i32 %218, i32 %221;
    i32 %223 = add i32 %220, i32 %222;
    i32 %224 = sub i32 %223, i32 %221;
    i32* %225 = getelementptr &(i32* %193)[i64 -13];
    i32 %226 = load i32* %225;
    i32 %227 = add i32 %224, i32 %226;
    i32 %228 = sub i32 %224, i32 %227;
    i32 %229 = add i32 %226, i32 %228;
    i32 %230 = sub i32 %229, i32 %227;
    i32* %231 = getelementptr &(i32* %193)[i64 -15];
    i32 %232 = load i32* %231;
    i32 %233 = add i32 %230, i32 %232;
    i32 %234 = sub i32 %230, i32 %233;
    i32 %235 = add i32 %232, i32 %234;
    i32 %236 = sub i32 %235, i32 %233;
    i32 %237 = mul i32 %236, i32 2;
    i32 %238 = srem i32 %236, i32 2;
    i32 %239 = add i32 %237, i32 %238;
    i32* %240 = getelementptr &(i32* %193)[i64 1];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %193)[i64 -1];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %193)[i64 -6];
    i32 %244 = load i32* %243;
    i32 %245 = add i32 %242, i32 %244;
    i32 %246 = sub i32 %242, i32 %245;
    i32 %247 = add i32 %244, i32 %246;
    i32 %248 = sub i32 %247, i32 %245;
    i32* %249 = getelementptr &(i32* %193)[i64 -12];
    i32 %250 = load i32* %249;
    i32 %251 = add i32 %248, i32 %250;
    i32 %252 = sub i32 %248, i32 %251;
    i32 %253 = add i32 %250, i32 %252;
    i32 %254 = sub i32 %253, i32 %251;
    i32 %255 = add i32 %203, i32 %254;
    i32 %256 = sub i32 %254, i32 %255;
    i32 %257 = add i32 %203, i32 %256;
    i32 %258 = sub i32 %257, i32 %255;
    i32 %259 = mul i32 %258, i32 2;
    i32 %260 = srem i32 %258, i32 2;
    i32 %261 = add i32 %259, i32 %260;
    i32* %262 = getelementptr &(i32* %193)[i64 2];
    store i32* %262 with i32 %261;
    i32* %263 = getelementptr &(i32* %193)[i64 -5];
    i32 %264 = load i32* %263;
    i32 %265 = add i32 %216, i32 %264;
    i32 %266 = sub i32 %216, i32 %265;
    i32 %267 = add i32 %264, i32 %266;
    i32 %268 = sub i32 %267, i32 %265;
    i32* %269 = getelementptr &(i32* %193)[i64 -11];
    i32 %270 = load i32* %269;
    i32 %271 = add i32 %268, i32 %270;
    i32 %272 = sub i32 %268, i32 %271;
    i32 %273 = add i32 %270, i32 %272;
    i32 %274 = sub i32 %273, i32 %271;
    i32 %275 = add i32 %226, i32 %274;
    i32 %276 = sub i32 %274, i32 %275;
    i32 %277 = add i32 %226, i32 %276;
    i32 %278 = sub i32 %277, i32 %275;
    i32 %279 = mul i32 %278, i32 2;
    i32 %280 = srem i32 %278, i32 2;
    i32 %281 = add i32 %279, i32 %280;
    i32* %282 = getelementptr &(i32* %193)[i64 3];
    store i32* %282 with i32 %281;
    ubr ^super.header;
  ^b4:
    i32 %283 = add i32 %78, i32 %191;
    i32 %284 = add i32 %77, i32 %190;
    i32 %285 = add i32 %76, i32 %189;
    i32 %286 = add i32 %75, i32 %188;
    i32 %287 = add i32 %74, i32 %187;
    i32 %288 = add i32 %73, i32 64;
    ubr ^while.header1;
  ^super.header1:
    i32 %289 = phi [^super.header, i32 %181] [^while.body5, i32 %290];
    i32 %290 = add i32 %289, i32 4;
    i1 %291 = scmp lt i32 %290, i32 80;
    cbr i1 %291(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body4:
    i1 %292 = scmp lt i32 %186, i32 20;
    cbr i1 %292(prob = 0.5), ^entry2, ^if.else;
  ^while.body5:
    i32* %293 = getelementptr &([80 * i32]* %words)[i64 0][i32 %289];
    i32* %294 = getelementptr &(i32* %293)[i64 -3];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %293)[i64 -8];
    i32 %297 = load i32* %296;
    i32 %298 = add i32 %295, i32 %297;
    i32 %299 = sub i32 %295, i32 %298;
    i32 %300 = add i32 %297, i32 %299;
    i32 %301 = sub i32 %300, i32 %298;
    i32* %302 = getelementptr &(i32* %293)[i64 -14];
    i32 %303 = load i32* %302;
    i32 %304 = add i32 %301, i32 %303;
    i32 %305 = sub i32 %301, i32 %304;
    i32 %306 = add i32 %303, i32 %305;
    i32 %307 = sub i32 %306, i32 %304;
    i32* %308 = getelementptr &(i32* %293)[i64 -16];
    i32 %309 = load i32* %308;
    i32 %310 = add i32 %307, i32 %309;
    i32 %311 = sub i32 %307, i32 %310;
    i32 %312 = add i32 %309, i32 %311;
    i32 %313 = sub i32 %312, i32 %310;
    i32 %314 = mul i32 %313, i32 2;
    i32 %315 = srem i32 %313, i32 2;
    i32 %316 = add i32 %314, i32 %315;
    store i32* %293 with i32 %316;
    i32* %317 = getelementptr &(i32* %293)[i64 -2];
    i32 %318 = load i32* %317;
    i32* %319 = getelementptr &(i32* %293)[i64 -7];
    i32 %320 = load i32* %319;
    i32 %321 = add i32 %318, i32 %320;
    i32 %322 = sub i32 %318, i32 %321;
    i32 %323 = add i32 %320, i32 %322;
    i32 %324 = sub i32 %323, i32 %321;
    i32* %325 = getelementptr &(i32* %293)[i64 -13];
    i32 %326 = load i32* %325;
    i32 %327 = add i32 %324, i32 %326;
    i32 %328 = sub i32 %324, i32 %327;
    i32 %329 = add i32 %326, i32 %328;
    i32 %330 = sub i32 %329, i32 %327;
    i32* %331 = getelementptr &(i32* %293)[i64 -15];
    i32 %332 = load i32* %331;
    i32 %333 = add i32 %330, i32 %332;
    i32 %334 = sub i32 %330, i32 %333;
    i32 %335 = add i32 %332, i32 %334;
    i32 %336 = sub i32 %335, i32 %333;
    i32 %337 = mul i32 %336, i32 2;
    i32 %338 = srem i32 %336, i32 2;
    i32 %339 = add i32 %337, i32 %338;
    i32* %340 = getelementptr &(i32* %293)[i64 1];
    store i32* %340 with i32 %339;
    i32* %341 = getelementptr &(i32* %293)[i64 -1];
    i32 %342 = load i32* %341;
    i32* %343 = getelementptr &(i32* %293)[i64 -6];
    i32 %344 = load i32* %343;
    i32 %345 = add i32 %342, i32 %344;
    i32 %346 = sub i32 %342, i32 %345;
    i32 %347 = add i32 %344, i32 %346;
    i32 %348 = sub i32 %347, i32 %345;
    i32* %349 = getelementptr &(i32* %293)[i64 -12];
    i32 %350 = load i32* %349;
    i32 %351 = add i32 %348, i32 %350;
    i32 %352 = sub i32 %348, i32 %351;
    i32 %353 = add i32 %350, i32 %352;
    i32 %354 = sub i32 %353, i32 %351;
    i32 %355 = add i32 %303, i32 %354;
    i32 %356 = sub i32 %354, i32 %355;
    i32 %357 = add i32 %303, i32 %356;
    i32 %358 = sub i32 %357, i32 %355;
    i32 %359 = mul i32 %358, i32 2;
    i32 %360 = srem i32 %358, i32 2;
    i32 %361 = add i32 %359, i32 %360;
    i32* %362 = getelementptr &(i32* %293)[i64 2];
    store i32* %362 with i32 %361;
    i32* %363 = getelementptr &(i32* %293)[i64 -5];
    i32 %364 = load i32* %363;
    i32 %365 = add i32 %316, i32 %364;
    i32 %366 = sub i32 %316, i32 %365;
    i32 %367 = add i32 %364, i32 %366;
    i32 %368 = sub i32 %367, i32 %365;
    i32* %369 = getelementptr &(i32* %293)[i64 -11];
    i32 %370 = load i32* %369;
    i32 %371 = add i32 %368, i32 %370;
    i32 %372 = sub i32 %368, i32 %371;
    i32 %373 = add i32 %370, i32 %372;
    i32 %374 = sub i32 %373, i32 %371;
    i32 %375 = add i32 %326, i32 %374;
    i32 %376 = sub i32 %374, i32 %375;
    i32 %377 = add i32 %326, i32 %376;
    i32 %378 = sub i32 %377, i32 %375;
    i32 %379 = mul i32 %378, i32 2;
    i32 %380 = srem i32 %378, i32 2;
    i32 %381 = add i32 %379, i32 %380;
    i32* %382 = getelementptr &(i32* %293)[i64 3];
    store i32* %382 with i32 %381;
    ubr ^super.header1;
  ^entry2:
    i32 %383 = add i32 %188, i32 %189;
    i32 %384 = add i32 %383, i32 %190;
    i32 %385 = sub i32 -1, i32 %190;
    i32 %386 = add i32 %384, i32 %385;
    i32 %387 = add i32 %189, i32 %190;
    i32 %388 = sub i32 %387, i32 %386;
    i32 %389 = add i32 %188, i32 %385;
    i32 %390 = add i32 %389, i32 %388;
    i32 %391 = sub i32 %390, i32 %386;
    i32 %392 = add i32 %386, i32 %391;
    i32 %393 = sub i32 %391, i32 %392;
    i32 %394 = add i32 %386, i32 %393;
    i32 %395 = sub i32 %394, i32 %392;
    ubr ^b5;
  ^while.body6:
    i32 %396 = phi [^super.header1, i32 %289] [^while.body6, i32 %421];
    i32* %397 = getelementptr &([80 * i32]* %words)[i64 0][i32 %396];
    i32* %398 = getelementptr &(i32* %397)[i64 -3];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %397)[i64 -8];
    i32 %401 = load i32* %400;
    i32 %402 = add i32 %399, i32 %401;
    i32 %403 = sub i32 %399, i32 %402;
    i32 %404 = add i32 %401, i32 %403;
    i32 %405 = sub i32 %404, i32 %402;
    i32* %406 = getelementptr &(i32* %397)[i64 -14];
    i32 %407 = load i32* %406;
    i32 %408 = add i32 %405, i32 %407;
    i32 %409 = sub i32 %405, i32 %408;
    i32 %410 = add i32 %407, i32 %409;
    i32 %411 = sub i32 %410, i32 %408;
    i32* %412 = getelementptr &(i32* %397)[i64 -16];
    i32 %413 = load i32* %412;
    i32 %414 = add i32 %411, i32 %413;
    i32 %415 = sub i32 %411, i32 %414;
    i32 %416 = add i32 %413, i32 %415;
    i32 %417 = sub i32 %416, i32 %414;
    i32 %418 = mul i32 %417, i32 2;
    i32 %419 = srem i32 %417, i32 2;
    i32 %420 = add i32 %418, i32 %419;
    store i32* %397 with i32 %420;
    i32 %421 = add i32 %396, i32 1;
    i1 %422 = scmp lt i32 %421, i32 80;
    cbr i1 %422(prob = 0.97), ^while.body6, ^while.header2;
  ^if.else:
    i1 %423 = scmp lt i32 %186, i32 40;
    cbr i1 %423(prob = 0.5), ^entry3, ^if.else1;
  ^b5:
    i32 %424 = phi [^entry2, i32 1518500249] [^entry3, i32 1859775361] [^entry4, i32 -1894007588] [^if.else2, i32 %184] [^entry5, i32 -899497722];
    i32 %425 = phi [^entry2, i32 %395] [^entry3, i32 %446] [^entry4, i32 %467] [^if.else2, i32 %185] [^entry5, i32 %475];
    i32 %426 = mul i32 %191, i32 32;
    i32 %427 = add i32 %187, i32 %426;
    i32 %428 = add i32 %427, i32 %424;
    i32 %429 = add i32 %428, i32 %425;
    i32 %430 = srem i32 %191, i32 32;
    i32 %431 = add i32 %429, i32 %430;
    i32* %432 = getelementptr &([80 * i32]* %words)[i64 0][i32 %186];
    i32 %433 = load i32* %432;
    i32 %434 = add i32 %431, i32 %433;
    i32 %435 = mul i32 %190, i32 1073741824;
    i32 %436 = srem i32 %190, i32 1073741824;
    i32 %437 = add i32 %435, i32 %436;
    i32 %438 = add i32 %186, i32 1;
    ubr ^while.header2;
  ^entry3:
    i32 %439 = add i32 %189, i32 %190;
    i32 %440 = sub i32 %190, i32 %439;
    i32 %441 = add i32 %189, i32 %440;
    i32 %442 = sub i32 %441, i32 %439;
    i32 %443 = add i32 %188, i32 %442;
    i32 %444 = sub i32 %442, i32 %443;
    i32 %445 = add i32 %188, i32 %444;
    i32 %446 = sub i32 %445, i32 %443;
    ubr ^b5;
  ^if.else1:
    i1 %447 = scmp lt i32 %186, i32 60;
    cbr i1 %447(prob = 0.5), ^entry4, ^if.else2;
  ^entry4:
    i32 %448 = mul i32 %190, i32 2;
    i32 %449 = add i32 %188, i32 %189;
    i32 %450 = add i32 %449, i32 %448;
    i32 %451 = add i32 %189, i32 %190;
    i32 %452 = sub i32 %451, i32 %450;
    i32 %453 = add i32 %188, i32 %190;
    i32 %454 = add i32 %453, i32 %452;
    i32 %455 = sub i32 %454, i32 %450;
    i32 %456 = add i32 %450, i32 %455;
    i32 %457 = sub i32 %455, i32 %456;
    i32 %458 = add i32 %450, i32 %457;
    i32 %459 = sub i32 %458, i32 %456;
    i32 %460 = add i32 %449, i32 %459;
    i32 %461 = sub i32 %459, i32 %460;
    i32 %462 = add i32 %449, i32 %461;
    i32 %463 = sub i32 %462, i32 %460;
    i32 %464 = add i32 %460, i32 %463;
    i32 %465 = sub i32 %463, i32 %464;
    i32 %466 = add i32 %460, i32 %465;
    i32 %467 = sub i32 %466, i32 %464;
    ubr ^b5;
  ^if.else2:
    cbr i1 %192(prob = 0.5), ^entry5, ^b5;
  ^entry5:
    i32 %468 = add i32 %189, i32 %190;
    i32 %469 = sub i32 %190, i32 %468;
    i32 %470 = add i32 %189, i32 %469;
    i32 %471 = sub i32 %470, i32 %468;
    i32 %472 = add i32 %188, i32 %471;
    i32 %473 = sub i32 %471, i32 %472;
    i32 %474 = add i32 %188, i32 %473;
    i32 %475 = sub i32 %474, i32 %472;
    ubr ^b5;
}
