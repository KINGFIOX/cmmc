internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %state = alloc i32;
    i32** %input = alloc i32*;
    i32* %input_len = alloc i32;
    i32** %output = alloc i32*;
    i32* %h0 = alloc i32;
    i32* %h1 = alloc i32;
    i32* %h2 = alloc i32;
    i32* %h3 = alloc i32;
    i32* %h4 = alloc i32;
    i32* %f = alloc i32;
    i32* %k = alloc i32;
    i32* %chunk_st = alloc i32;
    [80 * i32]* %words = alloc [80 * i32];
    [5 * i32]* %output_b = alloc [5 * i32];
    [5 * i32]* %output1 = alloc [5 * i32];
    i32* %rounds = alloc i32;
    i32* %0 = getelementptr &([5 * i32]* %output1)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([5 * i32]* %output1)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %output1)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output1)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output1)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32 %5 = call () -> i32 @getint();
    store i32* %state with i32 %5;
    i32 %6 = call () -> i32 @getint();
    store i32* %rounds with i32 %6;
    call (i32) -> void @starttime(i32 161);
    i32* %7 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %11 with i32 0;
    i1 %12 = scmp gt i32 %6, i32 0;
    i32* %13 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 0];
    i32* %14 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    i32* %15 = getelementptr &([80 * i32]* %words)[i64 0][i64 1];
    i32* %16 = getelementptr &([80 * i32]* %words)[i64 0][i64 2];
    i32* %17 = getelementptr &([80 * i32]* %words)[i64 0][i64 3];
    i32* %18 = getelementptr &([80 * i32]* %words)[i64 0][i64 4];
    i32* %19 = getelementptr &([80 * i32]* %words)[i64 0][i64 5];
    i32* %20 = getelementptr &([80 * i32]* %words)[i64 0][i64 6];
    i32* %21 = getelementptr &([80 * i32]* %words)[i64 0][i64 7];
    i32* %22 = getelementptr &([80 * i32]* %words)[i64 0][i64 8];
    i32* %23 = getelementptr &([80 * i32]* %words)[i64 0][i64 9];
    i32* %24 = getelementptr &([80 * i32]* %words)[i64 0][i64 10];
    i32* %25 = getelementptr &([80 * i32]* %words)[i64 0][i64 11];
    i32* %26 = getelementptr &([80 * i32]* %words)[i64 0][i64 12];
    i32* %27 = getelementptr &([80 * i32]* %words)[i64 0][i64 13];
    i32* %28 = getelementptr &([80 * i32]* %words)[i64 0][i64 14];
    i32* %29 = getelementptr &([80 * i32]* %words)[i64 0][i64 15];
    i8* %30 = ptrcast i32* %14 to i8*;
    i32* %31 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 32000];
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %32 = phi [^entry, i32 %5] [^b2, i32 %400];
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %7);
    ret i32 0;
^while.body1:
    i32 %33 = phi [^while.body, i32 %32] [^while.body1, i32 %129];
    i32 %34 = phi [^while.body, i32 0] [^while.body1, i32 %131];
    i32 %35 = mul i32 %33, i32 8193;
    i32* %36 = getelementptr &([32768 * i32]* @buffer)[i64 0][i32 %34];
    i32 %37 = sdiv i32 %35, i32 131072;
    i32 %38 = add i32 %37, i32 %35;
    i32 %39 = mul i32 %38, i32 33;
    i32 %40 = srem i32 %39, i32 256;
    store i32* %36 with i32 %40;
    i32 %41 = mul i32 %38, i32 270369;
    i32* %42 = getelementptr &(i32* %36)[i64 1];
    i32 %43 = sdiv i32 %41, i32 131072;
    i32 %44 = add i32 %43, i32 %41;
    i32 %45 = mul i32 %44, i32 33;
    i32 %46 = srem i32 %45, i32 256;
    store i32* %42 with i32 %46;
    i32 %47 = mul i32 %44, i32 270369;
    i32* %48 = getelementptr &(i32* %36)[i64 2];
    i32 %49 = sdiv i32 %47, i32 131072;
    i32 %50 = add i32 %49, i32 %47;
    i32 %51 = mul i32 %50, i32 33;
    i32 %52 = srem i32 %51, i32 256;
    store i32* %48 with i32 %52;
    i32 %53 = mul i32 %50, i32 270369;
    i32* %54 = getelementptr &(i32* %36)[i64 3];
    i32 %55 = sdiv i32 %53, i32 131072;
    i32 %56 = add i32 %55, i32 %53;
    i32 %57 = mul i32 %56, i32 33;
    i32 %58 = srem i32 %57, i32 256;
    store i32* %54 with i32 %58;
    i32 %59 = mul i32 %56, i32 270369;
    i32* %60 = getelementptr &(i32* %36)[i64 4];
    i32 %61 = sdiv i32 %59, i32 131072;
    i32 %62 = add i32 %61, i32 %59;
    i32 %63 = mul i32 %62, i32 33;
    i32 %64 = srem i32 %63, i32 256;
    store i32* %60 with i32 %64;
    i32 %65 = mul i32 %62, i32 270369;
    i32* %66 = getelementptr &(i32* %36)[i64 5];
    i32 %67 = sdiv i32 %65, i32 131072;
    i32 %68 = add i32 %67, i32 %65;
    i32 %69 = mul i32 %68, i32 33;
    i32 %70 = srem i32 %69, i32 256;
    store i32* %66 with i32 %70;
    i32 %71 = mul i32 %68, i32 270369;
    i32* %72 = getelementptr &(i32* %36)[i64 6];
    i32 %73 = sdiv i32 %71, i32 131072;
    i32 %74 = add i32 %73, i32 %71;
    i32 %75 = mul i32 %74, i32 33;
    i32 %76 = srem i32 %75, i32 256;
    store i32* %72 with i32 %76;
    i32 %77 = mul i32 %74, i32 270369;
    i32* %78 = getelementptr &(i32* %36)[i64 7];
    i32 %79 = sdiv i32 %77, i32 131072;
    i32 %80 = add i32 %79, i32 %77;
    i32 %81 = mul i32 %80, i32 33;
    i32 %82 = srem i32 %81, i32 256;
    store i32* %78 with i32 %82;
    i32 %83 = mul i32 %80, i32 270369;
    i32* %84 = getelementptr &(i32* %36)[i64 8];
    i32 %85 = sdiv i32 %83, i32 131072;
    i32 %86 = add i32 %85, i32 %83;
    i32 %87 = mul i32 %86, i32 33;
    i32 %88 = srem i32 %87, i32 256;
    store i32* %84 with i32 %88;
    i32 %89 = mul i32 %86, i32 270369;
    i32* %90 = getelementptr &(i32* %36)[i64 9];
    i32 %91 = sdiv i32 %89, i32 131072;
    i32 %92 = add i32 %91, i32 %89;
    i32 %93 = mul i32 %92, i32 33;
    i32 %94 = srem i32 %93, i32 256;
    store i32* %90 with i32 %94;
    i32 %95 = mul i32 %92, i32 270369;
    i32* %96 = getelementptr &(i32* %36)[i64 10];
    i32 %97 = sdiv i32 %95, i32 131072;
    i32 %98 = add i32 %97, i32 %95;
    i32 %99 = mul i32 %98, i32 33;
    i32 %100 = srem i32 %99, i32 256;
    store i32* %96 with i32 %100;
    i32 %101 = mul i32 %98, i32 270369;
    i32* %102 = getelementptr &(i32* %36)[i64 11];
    i32 %103 = sdiv i32 %101, i32 131072;
    i32 %104 = add i32 %103, i32 %101;
    i32 %105 = mul i32 %104, i32 33;
    i32 %106 = srem i32 %105, i32 256;
    store i32* %102 with i32 %106;
    i32 %107 = mul i32 %104, i32 270369;
    i32* %108 = getelementptr &(i32* %36)[i64 12];
    i32 %109 = sdiv i32 %107, i32 131072;
    i32 %110 = add i32 %109, i32 %107;
    i32 %111 = mul i32 %110, i32 33;
    store i32* %state with i32 %111;
    i32 %112 = srem i32 %111, i32 256;
    store i32* %108 with i32 %112;
    i32 %113 = mul i32 %110, i32 270369;
    i32* %114 = getelementptr &(i32* %36)[i64 13];
    i32 %115 = sdiv i32 %113, i32 131072;
    i32 %116 = add i32 %115, i32 %113;
    i32 %117 = mul i32 %116, i32 33;
    store i32* %state with i32 %117;
    i32 %118 = srem i32 %117, i32 256;
    store i32* %114 with i32 %118;
    i32 %119 = mul i32 %116, i32 270369;
    i32* %120 = getelementptr &(i32* %36)[i64 14];
    i32 %121 = sdiv i32 %119, i32 131072;
    i32 %122 = add i32 %121, i32 %119;
    i32 %123 = mul i32 %122, i32 33;
    store i32* %state with i32 %123;
    i32 %124 = srem i32 %123, i32 256;
    store i32* %120 with i32 %124;
    i32 %125 = mul i32 %122, i32 270369;
    i32* %126 = getelementptr &(i32* %36)[i64 15];
    i32 %127 = sdiv i32 %125, i32 131072;
    i32 %128 = add i32 %127, i32 %125;
    i32 %129 = mul i32 %128, i32 33;
    store i32* %state with i32 %129;
    i32 %130 = srem i32 %129, i32 256;
    store i32* %126 with i32 %130;
    i32 %131 = add i32 %34, i32 16;
    i1 %132 = scmp lt i32 %131, i32 32000;
    cbr i1 %132(prob = 1), ^while.body1, ^entry1;
^entry1:
    store i32** %input with i32* %13;
    store i32** %output with i32* %0;
    store i32* %h0 with i32 1732584193;
    store i32* %h1 with i32 -271733879;
    store i32* %h2 with i32 -1732584194;
    store i32* %h3 with i32 271733878;
    store i32* %h4 with i32 -1009589776;
    store i32* %f with i32 0;
    store i32* %k with i32 0;
    store i32* %31 with i32 128;
    ubr ^while.body2;
^while.body2:
    i32 %133 = phi [^entry1, i32 32001] [^while.body2, i32 %135];
    i32* %134 = getelementptr &(i32* %13)[i32 %133];
    store i32* %134 with i32 0;
    i32 %135 = add i32 %133, i32 1;
    i32 %136 = srem i32 %135, i32 64;
    i1 %137 = scmp neq i32 %136, i32 60;
    cbr i1 %137(prob = 0.97), ^while.body2, ^b1;
^b1:
    i32* %138 = getelementptr &(i32* %13)[i32 %135];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %138)[i64 1];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %138)[i64 2];
    store i32* %140 with i32 125;
    i32* %141 = getelementptr &(i32* %138)[i64 3];
    store i32* %141 with i32 0;
    i32 %142 = add i32 %133, i32 5;
    store i32* %input_len with i32 %142;
    store i32* %chunk_st with i32 0;
    i8* %143 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %30, i32 0, i64 320);
    i32 %144 = load i32* %chunk_st;
    i32 %145 = load i32* %k;
    i32 %146 = load i32* %f;
    i32 %147 = load i32* %h4;
    i32 %148 = load i32* %h3;
    i32 %149 = load i32* %h2;
    i32 %150 = load i32* %h1;
    i32 %151 = load i32* %h0;
    i32* %152 = load i32** %output;
    i32 %153 = load i32* %input_len;
    i32* %154 = load i32** %input;
    i1 %155 = scmp lt i32 %144, i32 %153;
    cbr i1 %155(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    i32 %156 = phi [^b1, i32 %144] [^b4, i32 %868];
    i32 %157 = phi [^b1, i32 %145] [^b4, i32 %805];
    i32 %158 = phi [^b1, i32 %146] [^b4, i32 %806];
    i32 %159 = phi [^b1, i32 %147] [^b4, i32 %867];
    i32 %160 = phi [^b1, i32 %148] [^b4, i32 %866];
    i32 %161 = phi [^b1, i32 %149] [^b4, i32 %865];
    i32 %162 = phi [^b1, i32 %150] [^b4, i32 %864];
    i32 %163 = phi [^b1, i32 %151] [^b4, i32 %863];
    i32* %164 = phi [^b1, i32* %154] [^b4, i32* %807];
    i32* %165 = getelementptr &(i32* %164)[i32 %156];
    i32 %166 = load i32* %165;
    i32 %167 = mul i32 %166, i32 16777216;
    i32* %168 = getelementptr &(i32* %165)[i64 1];
    i32 %169 = load i32* %168;
    i32 %170 = mul i32 %169, i32 65536;
    i32* %171 = getelementptr &(i32* %165)[i64 2];
    i32 %172 = load i32* %171;
    i32 %173 = mul i32 %172, i32 256;
    i32* %174 = getelementptr &(i32* %165)[i64 3];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %175, i32 %167;
    i32 %177 = add i32 %176, i32 %170;
    i32 %178 = add i32 %177, i32 %173;
    store i32* %14 with i32 %178;
    i32* %179 = getelementptr &(i32* %165)[i64 4];
    i32 %180 = load i32* %179;
    i32 %181 = mul i32 %180, i32 16777216;
    i32* %182 = getelementptr &(i32* %165)[i64 5];
    i32 %183 = load i32* %182;
    i32 %184 = mul i32 %183, i32 65536;
    i32* %185 = getelementptr &(i32* %165)[i64 6];
    i32 %186 = load i32* %185;
    i32 %187 = mul i32 %186, i32 256;
    i32* %188 = getelementptr &(i32* %165)[i64 7];
    i32 %189 = load i32* %188;
    i32 %190 = add i32 %189, i32 %181;
    i32 %191 = add i32 %190, i32 %184;
    i32 %192 = add i32 %191, i32 %187;
    store i32* %15 with i32 %192;
    i32* %193 = getelementptr &(i32* %165)[i64 8];
    i32 %194 = load i32* %193;
    i32 %195 = mul i32 %194, i32 16777216;
    i32* %196 = getelementptr &(i32* %165)[i64 9];
    i32 %197 = load i32* %196;
    i32 %198 = mul i32 %197, i32 65536;
    i32* %199 = getelementptr &(i32* %165)[i64 10];
    i32 %200 = load i32* %199;
    i32 %201 = mul i32 %200, i32 256;
    i32* %202 = getelementptr &(i32* %165)[i64 11];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %203, i32 %195;
    i32 %205 = add i32 %204, i32 %198;
    i32 %206 = add i32 %205, i32 %201;
    store i32* %16 with i32 %206;
    i32* %207 = getelementptr &(i32* %165)[i64 12];
    i32 %208 = load i32* %207;
    i32 %209 = mul i32 %208, i32 16777216;
    i32* %210 = getelementptr &(i32* %165)[i64 13];
    i32 %211 = load i32* %210;
    i32 %212 = mul i32 %211, i32 65536;
    i32* %213 = getelementptr &(i32* %165)[i64 14];
    i32 %214 = load i32* %213;
    i32 %215 = mul i32 %214, i32 256;
    i32* %216 = getelementptr &(i32* %165)[i64 15];
    i32 %217 = load i32* %216;
    i32 %218 = add i32 %217, i32 %209;
    i32 %219 = add i32 %218, i32 %212;
    i32 %220 = add i32 %219, i32 %215;
    store i32* %17 with i32 %220;
    i32* %221 = getelementptr &(i32* %165)[i64 16];
    i32 %222 = load i32* %221;
    i32 %223 = mul i32 %222, i32 16777216;
    i32* %224 = getelementptr &(i32* %165)[i64 17];
    i32 %225 = load i32* %224;
    i32 %226 = mul i32 %225, i32 65536;
    i32* %227 = getelementptr &(i32* %165)[i64 18];
    i32 %228 = load i32* %227;
    i32 %229 = mul i32 %228, i32 256;
    i32* %230 = getelementptr &(i32* %165)[i64 19];
    i32 %231 = load i32* %230;
    i32 %232 = add i32 %231, i32 %223;
    i32 %233 = add i32 %232, i32 %226;
    i32 %234 = add i32 %233, i32 %229;
    store i32* %18 with i32 %234;
    i32* %235 = getelementptr &(i32* %165)[i64 20];
    i32 %236 = load i32* %235;
    i32 %237 = mul i32 %236, i32 16777216;
    i32* %238 = getelementptr &(i32* %165)[i64 21];
    i32 %239 = load i32* %238;
    i32 %240 = mul i32 %239, i32 65536;
    i32* %241 = getelementptr &(i32* %165)[i64 22];
    i32 %242 = load i32* %241;
    i32 %243 = mul i32 %242, i32 256;
    i32* %244 = getelementptr &(i32* %165)[i64 23];
    i32 %245 = load i32* %244;
    i32 %246 = add i32 %245, i32 %237;
    i32 %247 = add i32 %246, i32 %240;
    i32 %248 = add i32 %247, i32 %243;
    store i32* %19 with i32 %248;
    i32* %249 = getelementptr &(i32* %165)[i64 24];
    i32 %250 = load i32* %249;
    i32 %251 = mul i32 %250, i32 16777216;
    i32* %252 = getelementptr &(i32* %165)[i64 25];
    i32 %253 = load i32* %252;
    i32 %254 = mul i32 %253, i32 65536;
    i32* %255 = getelementptr &(i32* %165)[i64 26];
    i32 %256 = load i32* %255;
    i32 %257 = mul i32 %256, i32 256;
    i32* %258 = getelementptr &(i32* %165)[i64 27];
    i32 %259 = load i32* %258;
    i32 %260 = add i32 %259, i32 %251;
    i32 %261 = add i32 %260, i32 %254;
    i32 %262 = add i32 %261, i32 %257;
    store i32* %20 with i32 %262;
    i32* %263 = getelementptr &(i32* %165)[i64 28];
    i32 %264 = load i32* %263;
    i32 %265 = mul i32 %264, i32 16777216;
    i32* %266 = getelementptr &(i32* %165)[i64 29];
    i32 %267 = load i32* %266;
    i32 %268 = mul i32 %267, i32 65536;
    i32* %269 = getelementptr &(i32* %165)[i64 30];
    i32 %270 = load i32* %269;
    i32 %271 = mul i32 %270, i32 256;
    i32* %272 = getelementptr &(i32* %165)[i64 31];
    i32 %273 = load i32* %272;
    i32 %274 = add i32 %273, i32 %265;
    i32 %275 = add i32 %274, i32 %268;
    i32 %276 = add i32 %275, i32 %271;
    store i32* %21 with i32 %276;
    i32* %277 = getelementptr &(i32* %165)[i64 32];
    i32 %278 = load i32* %277;
    i32 %279 = mul i32 %278, i32 16777216;
    i32* %280 = getelementptr &(i32* %165)[i64 33];
    i32 %281 = load i32* %280;
    i32 %282 = mul i32 %281, i32 65536;
    i32* %283 = getelementptr &(i32* %165)[i64 34];
    i32 %284 = load i32* %283;
    i32 %285 = mul i32 %284, i32 256;
    i32* %286 = getelementptr &(i32* %165)[i64 35];
    i32 %287 = load i32* %286;
    i32 %288 = add i32 %287, i32 %279;
    i32 %289 = add i32 %288, i32 %282;
    i32 %290 = add i32 %289, i32 %285;
    store i32* %22 with i32 %290;
    i32* %291 = getelementptr &(i32* %165)[i64 36];
    i32 %292 = load i32* %291;
    i32 %293 = mul i32 %292, i32 16777216;
    i32* %294 = getelementptr &(i32* %165)[i64 37];
    i32 %295 = load i32* %294;
    i32 %296 = mul i32 %295, i32 65536;
    i32* %297 = getelementptr &(i32* %165)[i64 38];
    i32 %298 = load i32* %297;
    i32 %299 = mul i32 %298, i32 256;
    i32* %300 = getelementptr &(i32* %165)[i64 39];
    i32 %301 = load i32* %300;
    i32 %302 = add i32 %301, i32 %293;
    i32 %303 = add i32 %302, i32 %296;
    i32 %304 = add i32 %303, i32 %299;
    store i32* %23 with i32 %304;
    i32* %305 = getelementptr &(i32* %165)[i64 40];
    i32 %306 = load i32* %305;
    i32 %307 = mul i32 %306, i32 16777216;
    i32* %308 = getelementptr &(i32* %165)[i64 41];
    i32 %309 = load i32* %308;
    i32 %310 = mul i32 %309, i32 65536;
    i32* %311 = getelementptr &(i32* %165)[i64 42];
    i32 %312 = load i32* %311;
    i32 %313 = mul i32 %312, i32 256;
    i32* %314 = getelementptr &(i32* %165)[i64 43];
    i32 %315 = load i32* %314;
    i32 %316 = add i32 %315, i32 %307;
    i32 %317 = add i32 %316, i32 %310;
    i32 %318 = add i32 %317, i32 %313;
    store i32* %24 with i32 %318;
    i32* %319 = getelementptr &(i32* %165)[i64 44];
    i32 %320 = load i32* %319;
    i32 %321 = mul i32 %320, i32 16777216;
    i32* %322 = getelementptr &(i32* %165)[i64 45];
    i32 %323 = load i32* %322;
    i32 %324 = mul i32 %323, i32 65536;
    i32* %325 = getelementptr &(i32* %165)[i64 46];
    i32 %326 = load i32* %325;
    i32 %327 = mul i32 %326, i32 256;
    i32* %328 = getelementptr &(i32* %165)[i64 47];
    i32 %329 = load i32* %328;
    i32 %330 = add i32 %329, i32 %321;
    i32 %331 = add i32 %330, i32 %324;
    i32 %332 = add i32 %331, i32 %327;
    store i32* %25 with i32 %332;
    i32* %333 = getelementptr &(i32* %165)[i64 48];
    i32 %334 = load i32* %333;
    i32 %335 = mul i32 %334, i32 16777216;
    i32* %336 = getelementptr &(i32* %165)[i64 49];
    i32 %337 = load i32* %336;
    i32 %338 = mul i32 %337, i32 65536;
    i32* %339 = getelementptr &(i32* %165)[i64 50];
    i32 %340 = load i32* %339;
    i32 %341 = mul i32 %340, i32 256;
    i32* %342 = getelementptr &(i32* %165)[i64 51];
    i32 %343 = load i32* %342;
    i32 %344 = add i32 %343, i32 %335;
    i32 %345 = add i32 %344, i32 %338;
    i32 %346 = add i32 %345, i32 %341;
    store i32* %26 with i32 %346;
    i32* %347 = getelementptr &(i32* %165)[i64 52];
    i32 %348 = load i32* %347;
    i32 %349 = mul i32 %348, i32 16777216;
    i32* %350 = getelementptr &(i32* %165)[i64 53];
    i32 %351 = load i32* %350;
    i32 %352 = mul i32 %351, i32 65536;
    i32* %353 = getelementptr &(i32* %165)[i64 54];
    i32 %354 = load i32* %353;
    i32 %355 = mul i32 %354, i32 256;
    i32* %356 = getelementptr &(i32* %165)[i64 55];
    i32 %357 = load i32* %356;
    i32 %358 = add i32 %357, i32 %349;
    i32 %359 = add i32 %358, i32 %352;
    i32 %360 = add i32 %359, i32 %355;
    store i32* %27 with i32 %360;
    i32* %361 = getelementptr &(i32* %165)[i64 56];
    i32 %362 = load i32* %361;
    i32 %363 = mul i32 %362, i32 16777216;
    i32* %364 = getelementptr &(i32* %165)[i64 57];
    i32 %365 = load i32* %364;
    i32 %366 = mul i32 %365, i32 65536;
    i32* %367 = getelementptr &(i32* %165)[i64 58];
    i32 %368 = load i32* %367;
    i32 %369 = mul i32 %368, i32 256;
    i32* %370 = getelementptr &(i32* %165)[i64 59];
    i32 %371 = load i32* %370;
    i32 %372 = add i32 %371, i32 %363;
    i32 %373 = add i32 %372, i32 %366;
    i32 %374 = add i32 %373, i32 %369;
    store i32* %28 with i32 %374;
    i32* %375 = getelementptr &(i32* %165)[i64 60];
    i32 %376 = load i32* %375;
    i32 %377 = mul i32 %376, i32 16777216;
    i32* %378 = getelementptr &(i32* %165)[i64 61];
    i32 %379 = load i32* %378;
    i32 %380 = mul i32 %379, i32 65536;
    i32* %381 = getelementptr &(i32* %165)[i64 62];
    i32 %382 = load i32* %381;
    i32 %383 = mul i32 %382, i32 256;
    i32* %384 = getelementptr &(i32* %165)[i64 63];
    i32 %385 = load i32* %384;
    i32 %386 = add i32 %385, i32 %377;
    i32 %387 = add i32 %386, i32 %380;
    i32 %388 = add i32 %387, i32 %383;
    store i32* %29 with i32 %388;
    ubr ^while.body4;
^b2:
    i32* %389 = phi [^b1, i32* %152] [^b4, i32* %809];
    i32 %390 = phi [^b1, i32 %151] [^b4, i32 %863];
    store i32* %389 with i32 %390;
    i32 %391 = load i32* %h1;
    i32* %392 = getelementptr &(i32* %389)[i64 1];
    store i32* %392 with i32 %391;
    i32 %393 = load i32* %h2;
    i32* %394 = getelementptr &(i32* %389)[i64 2];
    store i32* %394 with i32 %393;
    i32 %395 = load i32* %h3;
    i32* %396 = getelementptr &(i32* %389)[i64 3];
    store i32* %396 with i32 %395;
    i32 %397 = load i32* %h4;
    i32* %398 = getelementptr &(i32* %389)[i64 4];
    store i32* %398 with i32 %397;
    i32 %399 = load i32* %rounds;
    i32 %400 = load i32* %state;
    i32 %401 = load i32* %7;
    i32 %402 = load i32* %0;
    i32 %403 = add i32 %401, i32 %402;
    i32 %404 = sub i32 %401, i32 %403;
    i32 %405 = add i32 %402, i32 %404;
    i32 %406 = sub i32 %405, i32 %403;
    store i32* %7 with i32 %406;
    i32 %407 = load i32* %8;
    i32 %408 = load i32* %1;
    i32 %409 = add i32 %407, i32 %408;
    i32 %410 = sub i32 %407, i32 %409;
    i32 %411 = add i32 %408, i32 %410;
    i32 %412 = sub i32 %411, i32 %409;
    store i32* %8 with i32 %412;
    i32 %413 = load i32* %9;
    i32 %414 = load i32* %2;
    i32 %415 = add i32 %413, i32 %414;
    i32 %416 = sub i32 %413, i32 %415;
    i32 %417 = add i32 %414, i32 %416;
    i32 %418 = sub i32 %417, i32 %415;
    store i32* %9 with i32 %418;
    i32 %419 = load i32* %10;
    i32 %420 = load i32* %3;
    i32 %421 = add i32 %419, i32 %420;
    i32 %422 = sub i32 %419, i32 %421;
    i32 %423 = add i32 %420, i32 %422;
    i32 %424 = sub i32 %423, i32 %421;
    store i32* %10 with i32 %424;
    i32 %425 = load i32* %11;
    i32 %426 = load i32* %4;
    i32 %427 = add i32 %425, i32 %426;
    i32 %428 = sub i32 %425, i32 %427;
    i32 %429 = add i32 %428, i32 %426;
    i32 %430 = sub i32 %429, i32 %427;
    store i32* %11 with i32 %430;
    i32 %431 = add i32 %399, i32 -1;
    store i32* %rounds with i32 %431;
    i1 %432 = scmp gt i32 %431, i32 0;
    cbr i1 %432(prob = 0.97), ^while.body, ^b;
^while.body4:
    i32 %433 = phi [^while.body3, i32 16] [^while.body4, i32 %755];
    i32* %434 = getelementptr &([80 * i32]* %words)[i64 0][i32 %433];
    i32* %435 = getelementptr &(i32* %434)[i64 -3];
    i32 %436 = load i32* %435;
    i32* %437 = getelementptr &(i32* %434)[i64 -8];
    i32 %438 = load i32* %437;
    i32 %439 = add i32 %436, i32 %438;
    i32* %440 = getelementptr &(i32* %434)[i64 -14];
    i32 %441 = sub i32 %436, i32 %439;
    i32 %442 = add i32 %438, i32 %441;
    i32 %443 = sub i32 %442, i32 %439;
    i32 %444 = load i32* %440;
    i32 %445 = add i32 %443, i32 %444;
    i32* %446 = getelementptr &(i32* %434)[i64 -16];
    i32 %447 = sub i32 %443, i32 %445;
    i32 %448 = add i32 %444, i32 %447;
    i32 %449 = sub i32 %448, i32 %445;
    i32 %450 = load i32* %446;
    i32 %451 = add i32 %449, i32 %450;
    i32 %452 = sub i32 %449, i32 %451;
    i32 %453 = add i32 %450, i32 %452;
    i32 %454 = sub i32 %453, i32 %451;
    i32 %455 = mul i32 %454, i32 2;
    i32 %456 = srem i32 %454, i32 2;
    i32 %457 = add i32 %456, i32 %455;
    store i32* %434 with i32 %457;
    i32* %458 = getelementptr &(i32* %434)[i64 -2];
    i32* %459 = getelementptr &(i32* %434)[i64 1];
    i32 %460 = load i32* %458;
    i32* %461 = getelementptr &(i32* %434)[i64 -7];
    i32 %462 = load i32* %461;
    i32 %463 = add i32 %460, i32 %462;
    i32* %464 = getelementptr &(i32* %434)[i64 -13];
    i32 %465 = sub i32 %460, i32 %463;
    i32 %466 = add i32 %462, i32 %465;
    i32 %467 = sub i32 %466, i32 %463;
    i32 %468 = load i32* %464;
    i32 %469 = add i32 %467, i32 %468;
    i32* %470 = getelementptr &(i32* %434)[i64 -15];
    i32 %471 = sub i32 %467, i32 %469;
    i32 %472 = add i32 %468, i32 %471;
    i32 %473 = sub i32 %472, i32 %469;
    i32 %474 = load i32* %470;
    i32 %475 = add i32 %473, i32 %474;
    i32 %476 = sub i32 %473, i32 %475;
    i32 %477 = add i32 %474, i32 %476;
    i32 %478 = sub i32 %477, i32 %475;
    i32 %479 = mul i32 %478, i32 2;
    i32 %480 = srem i32 %478, i32 2;
    i32 %481 = add i32 %480, i32 %479;
    store i32* %459 with i32 %481;
    i32* %482 = getelementptr &(i32* %434)[i64 -1];
    i32* %483 = getelementptr &(i32* %434)[i64 2];
    i32 %484 = load i32* %482;
    i32* %485 = getelementptr &(i32* %434)[i64 -6];
    i32 %486 = load i32* %485;
    i32 %487 = add i32 %484, i32 %486;
    i32* %488 = getelementptr &(i32* %434)[i64 -12];
    i32 %489 = sub i32 %484, i32 %487;
    i32 %490 = add i32 %486, i32 %489;
    i32 %491 = sub i32 %490, i32 %487;
    i32 %492 = load i32* %488;
    i32 %493 = add i32 %491, i32 %492;
    i32 %494 = sub i32 %491, i32 %493;
    i32 %495 = add i32 %492, i32 %494;
    i32 %496 = sub i32 %495, i32 %493;
    i32 %497 = add i32 %444, i32 %496;
    i32 %498 = sub i32 %496, i32 %497;
    i32 %499 = add i32 %444, i32 %498;
    i32 %500 = sub i32 %499, i32 %497;
    i32 %501 = mul i32 %500, i32 2;
    i32 %502 = srem i32 %500, i32 2;
    i32 %503 = add i32 %502, i32 %501;
    store i32* %483 with i32 %503;
    i32* %504 = getelementptr &(i32* %434)[i64 -5];
    i32* %505 = getelementptr &(i32* %434)[i64 3];
    i32 %506 = load i32* %504;
    i32 %507 = add i32 %456, i32 %506;
    i32* %508 = getelementptr &(i32* %434)[i64 -11];
    i32 %509 = add i32 %507, i32 %455;
    i32 %510 = sub i32 %457, i32 %509;
    i32 %511 = add i32 %506, i32 %510;
    i32 %512 = sub i32 %511, i32 %509;
    i32 %513 = load i32* %508;
    i32 %514 = add i32 %512, i32 %513;
    i32 %515 = sub i32 %512, i32 %514;
    i32 %516 = add i32 %513, i32 %515;
    i32 %517 = sub i32 %516, i32 %514;
    i32 %518 = add i32 %468, i32 %517;
    i32 %519 = sub i32 %517, i32 %518;
    i32 %520 = add i32 %468, i32 %519;
    i32 %521 = sub i32 %520, i32 %518;
    i32 %522 = mul i32 %521, i32 2;
    i32 %523 = srem i32 %521, i32 2;
    i32 %524 = add i32 %523, i32 %522;
    store i32* %505 with i32 %524;
    i32* %525 = getelementptr &(i32* %434)[i64 -4];
    i32* %526 = getelementptr &(i32* %434)[i64 4];
    i32 %527 = load i32* %525;
    i32 %528 = add i32 %480, i32 %527;
    i32* %529 = getelementptr &(i32* %434)[i64 -10];
    i32 %530 = add i32 %528, i32 %479;
    i32 %531 = sub i32 %481, i32 %530;
    i32 %532 = add i32 %527, i32 %531;
    i32 %533 = sub i32 %532, i32 %530;
    i32 %534 = load i32* %529;
    i32 %535 = add i32 %533, i32 %534;
    i32 %536 = sub i32 %533, i32 %535;
    i32 %537 = add i32 %534, i32 %536;
    i32 %538 = sub i32 %537, i32 %535;
    i32 %539 = add i32 %492, i32 %538;
    i32 %540 = sub i32 %538, i32 %539;
    i32 %541 = add i32 %492, i32 %540;
    i32 %542 = sub i32 %541, i32 %539;
    i32 %543 = mul i32 %542, i32 2;
    i32 %544 = srem i32 %542, i32 2;
    i32 %545 = add i32 %544, i32 %543;
    store i32* %526 with i32 %545;
    i32 %546 = add i32 %436, i32 %502;
    i32* %547 = getelementptr &(i32* %434)[i64 5];
    i32* %548 = getelementptr &(i32* %434)[i64 -9];
    i32 %549 = add i32 %546, i32 %501;
    i32 %550 = sub i32 %503, i32 %549;
    i32 %551 = add i32 %436, i32 %550;
    i32 %552 = sub i32 %551, i32 %549;
    i32 %553 = load i32* %548;
    i32 %554 = add i32 %552, i32 %553;
    i32 %555 = sub i32 %552, i32 %554;
    i32 %556 = add i32 %553, i32 %555;
    i32 %557 = sub i32 %556, i32 %554;
    i32 %558 = add i32 %513, i32 %557;
    i32 %559 = sub i32 %557, i32 %558;
    i32 %560 = add i32 %513, i32 %559;
    i32 %561 = sub i32 %560, i32 %558;
    i32 %562 = mul i32 %561, i32 2;
    i32 %563 = srem i32 %561, i32 2;
    i32 %564 = add i32 %563, i32 %562;
    store i32* %547 with i32 %564;
    i32 %565 = add i32 %460, i32 %523;
    i32* %566 = getelementptr &(i32* %434)[i64 6];
    i32 %567 = add i32 %565, i32 %522;
    i32 %568 = sub i32 %524, i32 %567;
    i32 %569 = add i32 %460, i32 %568;
    i32 %570 = sub i32 %569, i32 %567;
    i32 %571 = add i32 %438, i32 %570;
    i32 %572 = sub i32 %570, i32 %571;
    i32 %573 = add i32 %438, i32 %572;
    i32 %574 = sub i32 %573, i32 %571;
    i32 %575 = add i32 %534, i32 %574;
    i32 %576 = sub i32 %574, i32 %575;
    i32 %577 = add i32 %534, i32 %576;
    i32 %578 = sub i32 %577, i32 %575;
    i32 %579 = mul i32 %578, i32 2;
    i32 %580 = srem i32 %578, i32 2;
    i32 %581 = add i32 %580, i32 %579;
    store i32* %566 with i32 %581;
    i32 %582 = add i32 %484, i32 %544;
    i32* %583 = getelementptr &(i32* %434)[i64 7];
    i32 %584 = add i32 %582, i32 %543;
    i32 %585 = sub i32 %545, i32 %584;
    i32 %586 = add i32 %484, i32 %585;
    i32 %587 = sub i32 %586, i32 %584;
    i32 %588 = add i32 %462, i32 %587;
    i32 %589 = sub i32 %587, i32 %588;
    i32 %590 = add i32 %462, i32 %589;
    i32 %591 = sub i32 %590, i32 %588;
    i32 %592 = add i32 %553, i32 %591;
    i32 %593 = sub i32 %591, i32 %592;
    i32 %594 = add i32 %553, i32 %593;
    i32 %595 = sub i32 %594, i32 %592;
    i32 %596 = mul i32 %595, i32 2;
    i32 %597 = srem i32 %595, i32 2;
    i32 %598 = add i32 %597, i32 %596;
    store i32* %583 with i32 %598;
    i32 %599 = add i32 %456, i32 %563;
    i32* %600 = getelementptr &(i32* %434)[i64 8];
    i32 %601 = add i32 %599, i32 %455;
    i32 %602 = add i32 %601, i32 %562;
    i32 %603 = sub i32 %564, i32 %602;
    i32 %604 = add i32 %456, i32 %603;
    i32 %605 = add i32 %604, i32 %455;
    i32 %606 = sub i32 %605, i32 %602;
    i32 %607 = add i32 %486, i32 %606;
    i32 %608 = sub i32 %606, i32 %607;
    i32 %609 = add i32 %486, i32 %608;
    i32 %610 = sub i32 %609, i32 %607;
    i32 %611 = add i32 %438, i32 %610;
    i32 %612 = sub i32 %610, i32 %611;
    i32 %613 = add i32 %438, i32 %612;
    i32 %614 = sub i32 %613, i32 %611;
    i32 %615 = mul i32 %614, i32 2;
    i32 %616 = srem i32 %614, i32 2;
    i32 %617 = add i32 %616, i32 %615;
    store i32* %600 with i32 %617;
    i32 %618 = add i32 %480, i32 %580;
    i32* %619 = getelementptr &(i32* %434)[i64 9];
    i32 %620 = add i32 %618, i32 %479;
    i32 %621 = add i32 %620, i32 %579;
    i32 %622 = sub i32 %581, i32 %621;
    i32 %623 = add i32 %480, i32 %622;
    i32 %624 = add i32 %623, i32 %479;
    i32 %625 = sub i32 %624, i32 %621;
    i32 %626 = add i32 %506, i32 %625;
    i32 %627 = sub i32 %625, i32 %626;
    i32 %628 = add i32 %506, i32 %627;
    i32 %629 = sub i32 %628, i32 %626;
    i32 %630 = add i32 %462, i32 %629;
    i32 %631 = sub i32 %629, i32 %630;
    i32 %632 = add i32 %462, i32 %631;
    i32 %633 = sub i32 %632, i32 %630;
    i32 %634 = mul i32 %633, i32 2;
    i32 %635 = srem i32 %633, i32 2;
    i32 %636 = add i32 %635, i32 %634;
    store i32* %619 with i32 %636;
    i32 %637 = add i32 %502, i32 %597;
    i32* %638 = getelementptr &(i32* %434)[i64 10];
    i32 %639 = add i32 %637, i32 %501;
    i32 %640 = add i32 %639, i32 %596;
    i32 %641 = sub i32 %598, i32 %640;
    i32 %642 = add i32 %502, i32 %641;
    i32 %643 = add i32 %642, i32 %501;
    i32 %644 = sub i32 %643, i32 %640;
    i32 %645 = add i32 %527, i32 %644;
    i32 %646 = sub i32 %644, i32 %645;
    i32 %647 = add i32 %527, i32 %646;
    i32 %648 = sub i32 %647, i32 %645;
    i32 %649 = add i32 %486, i32 %648;
    i32 %650 = sub i32 %648, i32 %649;
    i32 %651 = add i32 %486, i32 %650;
    i32 %652 = sub i32 %651, i32 %649;
    i32 %653 = mul i32 %652, i32 2;
    i32 %654 = srem i32 %652, i32 2;
    i32 %655 = add i32 %654, i32 %653;
    store i32* %638 with i32 %655;
    i32 %656 = add i32 %523, i32 %616;
    i32* %657 = getelementptr &(i32* %434)[i64 11];
    i32 %658 = add i32 %656, i32 %522;
    i32 %659 = add i32 %658, i32 %615;
    i32 %660 = sub i32 %617, i32 %659;
    i32 %661 = add i32 %523, i32 %660;
    i32 %662 = add i32 %661, i32 %522;
    i32 %663 = sub i32 %662, i32 %659;
    i32 %664 = add i32 %436, i32 %663;
    i32 %665 = sub i32 %663, i32 %664;
    i32 %666 = add i32 %436, i32 %665;
    i32 %667 = sub i32 %666, i32 %664;
    i32 %668 = add i32 %506, i32 %667;
    i32 %669 = sub i32 %667, i32 %668;
    i32 %670 = add i32 %506, i32 %669;
    i32 %671 = sub i32 %670, i32 %668;
    i32 %672 = mul i32 %671, i32 2;
    i32 %673 = srem i32 %671, i32 2;
    i32 %674 = add i32 %673, i32 %672;
    store i32* %657 with i32 %674;
    i32 %675 = add i32 %544, i32 %635;
    i32* %676 = getelementptr &(i32* %434)[i64 12];
    i32 %677 = add i32 %675, i32 %543;
    i32 %678 = add i32 %677, i32 %634;
    i32 %679 = sub i32 %636, i32 %678;
    i32 %680 = add i32 %544, i32 %679;
    i32 %681 = add i32 %680, i32 %543;
    i32 %682 = sub i32 %681, i32 %678;
    i32 %683 = add i32 %460, i32 %682;
    i32 %684 = sub i32 %682, i32 %683;
    i32 %685 = add i32 %460, i32 %684;
    i32 %686 = sub i32 %685, i32 %683;
    i32 %687 = add i32 %527, i32 %686;
    i32 %688 = sub i32 %686, i32 %687;
    i32 %689 = add i32 %527, i32 %688;
    i32 %690 = sub i32 %689, i32 %687;
    i32 %691 = mul i32 %690, i32 2;
    i32 %692 = srem i32 %690, i32 2;
    i32 %693 = add i32 %692, i32 %691;
    store i32* %676 with i32 %693;
    i32 %694 = add i32 %563, i32 %654;
    i32* %695 = getelementptr &(i32* %434)[i64 13];
    i32 %696 = add i32 %694, i32 %562;
    i32 %697 = add i32 %696, i32 %653;
    i32 %698 = sub i32 %655, i32 %697;
    i32 %699 = add i32 %563, i32 %698;
    i32 %700 = add i32 %699, i32 %562;
    i32 %701 = sub i32 %700, i32 %697;
    i32 %702 = add i32 %484, i32 %701;
    i32 %703 = sub i32 %701, i32 %702;
    i32 %704 = add i32 %484, i32 %703;
    i32 %705 = sub i32 %704, i32 %702;
    i32 %706 = add i32 %436, i32 %705;
    i32 %707 = sub i32 %705, i32 %706;
    i32 %708 = add i32 %436, i32 %707;
    i32 %709 = sub i32 %708, i32 %706;
    i32 %710 = mul i32 %709, i32 2;
    i32 %711 = srem i32 %709, i32 2;
    i32 %712 = add i32 %711, i32 %710;
    store i32* %695 with i32 %712;
    i32 %713 = add i32 %580, i32 %673;
    i32* %714 = getelementptr &(i32* %434)[i64 14];
    i32 %715 = add i32 %713, i32 %579;
    i32 %716 = add i32 %715, i32 %672;
    i32 %717 = sub i32 %674, i32 %716;
    i32 %718 = add i32 %580, i32 %717;
    i32 %719 = add i32 %718, i32 %579;
    i32 %720 = sub i32 %719, i32 %716;
    i32 %721 = add i32 %456, i32 %720;
    i32 %722 = add i32 %721, i32 %455;
    i32 %723 = sub i32 %720, i32 %722;
    i32 %724 = add i32 %456, i32 %723;
    i32 %725 = add i32 %724, i32 %455;
    i32 %726 = sub i32 %725, i32 %722;
    i32 %727 = add i32 %460, i32 %726;
    i32 %728 = sub i32 %726, i32 %727;
    i32 %729 = add i32 %460, i32 %728;
    i32 %730 = sub i32 %729, i32 %727;
    i32 %731 = mul i32 %730, i32 2;
    i32 %732 = srem i32 %730, i32 2;
    i32 %733 = add i32 %732, i32 %731;
    store i32* %714 with i32 %733;
    i32 %734 = add i32 %597, i32 %692;
    i32* %735 = getelementptr &(i32* %434)[i64 15];
    i32 %736 = add i32 %734, i32 %596;
    i32 %737 = add i32 %736, i32 %691;
    i32 %738 = sub i32 %693, i32 %737;
    i32 %739 = add i32 %738, i32 %597;
    i32 %740 = add i32 %739, i32 %596;
    i32 %741 = sub i32 %740, i32 %737;
    i32 %742 = add i32 %741, i32 %480;
    i32 %743 = add i32 %742, i32 %479;
    i32 %744 = sub i32 %741, i32 %743;
    i32 %745 = add i32 %744, i32 %480;
    i32 %746 = add i32 %745, i32 %479;
    i32 %747 = sub i32 %746, i32 %743;
    i32 %748 = add i32 %747, i32 %484;
    i32 %749 = sub i32 %747, i32 %748;
    i32 %750 = add i32 %749, i32 %484;
    i32 %751 = sub i32 %750, i32 %748;
    i32 %752 = mul i32 %751, i32 2;
    i32 %753 = srem i32 %751, i32 2;
    i32 %754 = add i32 %753, i32 %752;
    store i32* %735 with i32 %754;
    i32 %755 = add i32 %433, i32 16;
    i1 %756 = scmp lt i32 %755, i32 80;
    cbr i1 %756(prob = 0.75), ^while.body4, ^while.body5;
^while.body5:
    i32 %757 = phi [^while.body4, i32 0] [^b3, i32 %830];
    i32 %758 = phi [^while.body4, i32 %157] [^b3, i32 %805];
    i32 %759 = phi [^while.body4, i32 %158] [^b3, i32 %806];
    i32 %760 = phi [^while.body4, i32 %159] [^b3, i32 %761];
    i32 %761 = phi [^while.body4, i32 %160] [^b3, i32 %762];
    i32 %762 = phi [^while.body4, i32 %161] [^b3, i32 %829];
    i32 %763 = phi [^while.body4, i32 %162] [^b3, i32 %764];
    i32 %764 = phi [^while.body4, i32 %163] [^b3, i32 %826];
    i32* %765 = phi [^while.body4, i32* %154] [^b3, i32* %807];
    i32 %766 = phi [^while.body4, i32 %153] [^b3, i32 %808];
    i32* %767 = phi [^while.body4, i32* %152] [^b3, i32* %809];
    i32 %768 = phi [^while.body4, i32 %163] [^b3, i32 %810];
    i32 %769 = phi [^while.body4, i32 %162] [^b3, i32 %811];
    i32 %770 = phi [^while.body4, i32 %161] [^b3, i32 %812];
    i32 %771 = phi [^while.body4, i32 %160] [^b3, i32 %813];
    i32 %772 = phi [^while.body4, i32 %159] [^b3, i32 %814];
    i32 %773 = phi [^while.body4, i32 %158] [^b3, i32 %815];
    i32 %774 = phi [^while.body4, i32 %157] [^b3, i32 %816];
    i32 %775 = phi [^while.body4, i32 %156] [^b3, i32 %817];
    i1 %776 = scmp lt i32 %757, i32 20;
    cbr i1 %776(prob = 0.5), ^entry2, ^if.else;
^entry2:
    i32 %777 = add i32 %763, i32 %762;
    i32 %778 = sub i32 -1, i32 %763;
    i32 %779 = add i32 %778, i32 %763;
    i32 %780 = add i32 %779, i32 %762;
    i32 %781 = add i32 %780, i32 %761;
    i32 %782 = sub i32 %777, i32 %781;
    i32 %783 = add i32 %778, i32 %782;
    i32 %784 = add i32 %783, i32 %761;
    i32 %785 = sub i32 %784, i32 %781;
    i32 %786 = add i32 %778, i32 %785;
    i32 %787 = add i32 %786, i32 %763;
    i32 %788 = add i32 %787, i32 %762;
    i32 %789 = add i32 %788, i32 %761;
    i32 %790 = sub i32 %785, i32 %789;
    i32 %791 = add i32 %778, i32 %790;
    i32 %792 = add i32 %791, i32 %763;
    i32 %793 = add i32 %792, i32 %762;
    i32 %794 = add i32 %793, i32 %761;
    i32 %795 = sub i32 %794, i32 %789;
    store i32* %f with i32 %795;
    store i32* %k with i32 1518500249;
    ubr ^b3;
^if.else:
    i1 %796 = scmp lt i32 %757, i32 40;
    cbr i1 %796(prob = 0.5), ^entry3, ^if.else1;
^entry3:
    i32 %797 = add i32 %763, i32 %762;
    i32 %798 = sub i32 %763, i32 %797;
    i32 %799 = add i32 %798, i32 %762;
    i32 %800 = sub i32 %799, i32 %797;
    i32 %801 = add i32 %800, i32 %761;
    i32 %802 = sub i32 %800, i32 %801;
    i32 %803 = add i32 %802, i32 %761;
    i32 %804 = sub i32 %803, i32 %801;
    store i32* %f with i32 %804;
    store i32* %k with i32 1859775361;
    ubr ^b3;
^b3:
    i32 %805 = phi [^entry2, i32 1518500249] [^entry3, i32 1859775361] [^entry4, i32 -1894007588] [^if.else2, i32 %758] [^entry5, i32 -899497722];
    i32 %806 = phi [^entry2, i32 %795] [^entry3, i32 %804] [^entry4, i32 %862] [^if.else2, i32 %759] [^entry5, i32 %878];
    i32* %807 = phi [^entry2, i32* %154] [^entry3, i32* %154] [^entry4, i32* %154] [^if.else2, i32* %765] [^entry5, i32* %154];
    i32 %808 = phi [^entry2, i32 %153] [^entry3, i32 %153] [^entry4, i32 %153] [^if.else2, i32 %766] [^entry5, i32 %153];
    i32* %809 = phi [^entry2, i32* %152] [^entry3, i32* %152] [^entry4, i32* %152] [^if.else2, i32* %767] [^entry5, i32* %152];
    i32 %810 = phi [^entry2, i32 %163] [^entry3, i32 %163] [^entry4, i32 %163] [^if.else2, i32 %768] [^entry5, i32 %163];
    i32 %811 = phi [^entry2, i32 %162] [^entry3, i32 %162] [^entry4, i32 %162] [^if.else2, i32 %769] [^entry5, i32 %162];
    i32 %812 = phi [^entry2, i32 %161] [^entry3, i32 %161] [^entry4, i32 %161] [^if.else2, i32 %770] [^entry5, i32 %161];
    i32 %813 = phi [^entry2, i32 %160] [^entry3, i32 %160] [^entry4, i32 %160] [^if.else2, i32 %771] [^entry5, i32 %160];
    i32 %814 = phi [^entry2, i32 %159] [^entry3, i32 %159] [^entry4, i32 %159] [^if.else2, i32 %772] [^entry5, i32 %159];
    i32 %815 = phi [^entry2, i32 %795] [^entry3, i32 %804] [^entry4, i32 %862] [^if.else2, i32 %773] [^entry5, i32 %878];
    i32 %816 = phi [^entry2, i32 1518500249] [^entry3, i32 1859775361] [^entry4, i32 -1894007588] [^if.else2, i32 %774] [^entry5, i32 -899497722];
    i32 %817 = phi [^entry2, i32 %156] [^entry3, i32 %156] [^entry4, i32 %156] [^if.else2, i32 %775] [^entry5, i32 %156];
    i32 %818 = mul i32 %764, i32 32;
    i32 %819 = srem i32 %764, i32 32;
    i32* %820 = getelementptr &([80 * i32]* %words)[i64 0][i32 %757];
    i32 %821 = load i32* %820;
    i32 %822 = add i32 %815, i32 %816;
    i32 %823 = add i32 %822, i32 %819;
    i32 %824 = add i32 %823, i32 %821;
    i32 %825 = add i32 %824, i32 %760;
    i32 %826 = add i32 %825, i32 %818;
    i32 %827 = mul i32 %763, i32 1073741824;
    i32 %828 = srem i32 %763, i32 1073741824;
    i32 %829 = add i32 %828, i32 %827;
    i32 %830 = add i32 %757, i32 1;
    i1 %831 = scmp lt i32 %830, i32 80;
    cbr i1 %831(prob = 0.99), ^while.body5, ^b4;
^if.else1:
    i1 %832 = scmp lt i32 %757, i32 60;
    cbr i1 %832(prob = 0.5), ^entry4, ^if.else2;
^entry4:
    i32 %833 = add i32 %763, i32 %762;
    i32 %834 = add i32 %762, i32 %761;
    i32 %835 = mul i32 %763, i32 2;
    i32 %836 = add i32 %834, i32 %835;
    i32 %837 = sub i32 %833, i32 %836;
    i32 %838 = add i32 %837, i32 %763;
    i32 %839 = add i32 %838, i32 %761;
    i32 %840 = sub i32 %839, i32 %836;
    i32 %841 = add i32 %840, i32 %762;
    i32 %842 = add i32 %841, i32 %761;
    i32 %843 = add i32 %842, i32 %835;
    i32 %844 = sub i32 %840, i32 %843;
    i32 %845 = add i32 %844, i32 %762;
    i32 %846 = add i32 %845, i32 %761;
    i32 %847 = add i32 %846, i32 %835;
    i32 %848 = sub i32 %847, i32 %843;
    i32 %849 = add i32 %848, i32 %762;
    i32 %850 = add i32 %849, i32 %761;
    i32 %851 = sub i32 %848, i32 %850;
    i32 %852 = add i32 %851, i32 %762;
    i32 %853 = add i32 %852, i32 %761;
    i32 %854 = sub i32 %853, i32 %850;
    i32 %855 = add i32 %848, i32 %854;
    i32 %856 = add i32 %855, i32 %762;
    i32 %857 = add i32 %856, i32 %761;
    i32 %858 = sub i32 %854, i32 %857;
    i32 %859 = add i32 %848, i32 %858;
    i32 %860 = add i32 %859, i32 %762;
    i32 %861 = add i32 %860, i32 %761;
    i32 %862 = sub i32 %861, i32 %857;
    store i32* %f with i32 %862;
    store i32* %k with i32 -1894007588;
    ubr ^b3;
^b4:
    i32 %863 = add i32 %810, i32 %826;
    store i32* %h0 with i32 %863;
    i32 %864 = add i32 %811, i32 %764;
    store i32* %h1 with i32 %864;
    i32 %865 = add i32 %812, i32 %829;
    store i32* %h2 with i32 %865;
    i32 %866 = add i32 %813, i32 %762;
    store i32* %h3 with i32 %866;
    i32 %867 = add i32 %814, i32 %761;
    store i32* %h4 with i32 %867;
    i32 %868 = add i32 %817, i32 64;
    store i32* %chunk_st with i32 %868;
    i1 %869 = scmp lt i32 %868, i32 %808;
    cbr i1 %869(prob = 0.97), ^while.body3, ^b2;
^if.else2:
    i1 %870 = scmp lt i32 %757, i32 80;
    cbr i1 %870(prob = 0.5), ^entry5, ^b3;
^entry5:
    i32 %871 = add i32 %763, i32 %762;
    i32 %872 = sub i32 %763, i32 %871;
    i32 %873 = add i32 %872, i32 %762;
    i32 %874 = sub i32 %873, i32 %871;
    i32 %875 = add i32 %874, i32 %761;
    i32 %876 = sub i32 %874, i32 %875;
    i32 %877 = add i32 %876, i32 %761;
    i32 %878 = sub i32 %877, i32 %875;
    store i32* %f with i32 %878;
    store i32* %k with i32 -899497722;
    ubr ^b3;
}
