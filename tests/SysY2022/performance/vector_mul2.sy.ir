internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    f32* %0 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %1 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %2 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (i32) -> void @starttime(i32 62);
    ubr ^while.body;
^while.body:
    i32 %3 = phi [^while.body, i32 %20] [^entry, i32 0];
    f32* %4 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %3];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %4)[i64 1];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %4)[i64 2];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %4)[i64 3];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %4)[i64 4];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %4)[i64 5];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %4)[i64 6];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %4)[i64 7];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %4)[i64 8];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %4)[i64 9];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %4)[i64 10];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %4)[i64 11];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %4)[i64 12];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %4)[i64 13];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %4)[i64 14];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %4)[i64 15];
    store f32* %19 with f32 1;
    i32 %20 = add i32 %3, i32 16;
    i1 %21 = scmp lt i32 %20, i32 100000;
    cbr i1 %21(prob = 1), ^while.body, ^while.body1;
^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^while.body6, i32 %115];
    ubr ^while.guard;
^while.guard:
    f32 %23 = phi [^b, f32 %42] [^while.body1, f32 0];
    i32 %24 = phi [^while.body1, i32 0] [^b, i32 %27];
    i32 %25 = phi [^while.body1, i32 0] [^b, i32 %43];
    i1 %26 = scmp lt i32 %25, i32 100000;
    i32 %27 = add i32 %24, i32 1;
    cbr i1 %26(prob = 0.97), ^while.body2, ^b;
^while.body2:
    i32 %28 = phi [^while.guard, i32 %25] [^while.body2, i32 %40];
    f32 %29 = phi [^while.guard, f32 %23] [^while.body2, f32 %39];
    f32* %30 = getelementptr &(f32* %0)[i32 %28];
    f32 %31 = load f32* %30;
    i32 %32 = add i32 %24, i32 %28;
    i32 %33 = add i32 %28, i32 %27;
    i32 %34 = mul i32 %32, i32 %33;
    i32 %35 = sdiv i32 %34, i32 2;
    i32 %36 = add i32 %35, i32 %27;
    f32 %37 = s2f i32 %36 to f32;
    f32 %38 = fdiv f32 %31, f32 %37;
    f32 %39 = fadd f32 %29, f32 %38;
    i32 %40 = add i32 %28, i32 1;
    i1 %41 = scmp lt i32 %40, i32 100000;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b;
^b:
    f32 %42 = phi [^while.body2, f32 %39] [^while.guard, f32 %23];
    i32 %43 = phi [^while.guard, i32 %25] [^while.body2, i32 %40];
    f32* %44 = getelementptr &(f32* %2)[i32 %24];
    store f32* %44 with f32 %42;
    i1 %45 = scmp lt i32 %27, i32 100000;
    cbr i1 %45(prob = 1), ^while.guard, ^while.guard1;
^while.guard1:
    f32 %46 = phi [^b, f32 0] [^b1, f32 %65];
    i32 %47 = phi [^b, i32 0] [^b1, i32 %50];
    i32 %48 = phi [^b, i32 0] [^b1, i32 %66];
    i1 %49 = scmp lt i32 %48, i32 100000;
    i32 %50 = add i32 %47, i32 1;
    cbr i1 %49(prob = 0.97), ^while.body3, ^b1;
^while.body3:
    i32 %51 = phi [^while.body3, i32 %56] [^while.guard1, i32 %48];
    f32 %52 = phi [^while.body3, f32 %63] [^while.guard1, f32 %46];
    f32* %53 = getelementptr &(f32* %2)[i32 %51];
    f32 %54 = load f32* %53;
    i32 %55 = add i32 %47, i32 %51;
    i32 %56 = add i32 %51, i32 1;
    i32 %57 = add i32 %51, i32 %50;
    i32 %58 = mul i32 %55, i32 %57;
    i32 %59 = sdiv i32 %58, i32 2;
    i32 %60 = add i32 %56, i32 %59;
    f32 %61 = s2f i32 %60 to f32;
    f32 %62 = fdiv f32 %54, f32 %61;
    f32 %63 = fadd f32 %52, f32 %62;
    i1 %64 = scmp lt i32 %56, i32 100000;
    cbr i1 %64(prob = 0.97), ^while.body3, ^b1;
^b1:
    f32 %65 = phi [^while.guard1, f32 %46] [^while.body3, f32 %63];
    i32 %66 = phi [^while.guard1, i32 %48] [^while.body3, i32 %56];
    f32* %67 = getelementptr &(f32* %1)[i32 %47];
    store f32* %67 with f32 %65;
    i1 %68 = scmp lt i32 %50, i32 100000;
    cbr i1 %68(prob = 1), ^while.guard1, ^while.guard2;
^while.guard2:
    f32 %69 = phi [^b1, f32 0] [^b2, f32 %88];
    i32 %70 = phi [^b1, i32 0] [^b2, i32 %73];
    i32 %71 = phi [^b1, i32 0] [^b2, i32 %89];
    i1 %72 = scmp lt i32 %71, i32 100000;
    i32 %73 = add i32 %70, i32 1;
    cbr i1 %72(prob = 0.97), ^while.body4, ^b2;
^while.body4:
    i32 %74 = phi [^while.guard2, i32 %71] [^while.body4, i32 %86];
    f32 %75 = phi [^while.guard2, f32 %69] [^while.body4, f32 %85];
    f32* %76 = getelementptr &(f32* %1)[i32 %74];
    f32 %77 = load f32* %76;
    i32 %78 = add i32 %70, i32 %74;
    i32 %79 = add i32 %74, i32 %73;
    i32 %80 = mul i32 %78, i32 %79;
    i32 %81 = sdiv i32 %80, i32 2;
    i32 %82 = add i32 %81, i32 %73;
    f32 %83 = s2f i32 %82 to f32;
    f32 %84 = fdiv f32 %77, f32 %83;
    f32 %85 = fadd f32 %75, f32 %84;
    i32 %86 = add i32 %74, i32 1;
    i1 %87 = scmp lt i32 %86, i32 100000;
    cbr i1 %87(prob = 0.97), ^while.body4, ^b2;
^b2:
    f32 %88 = phi [^while.guard2, f32 %69] [^while.body4, f32 %85];
    i32 %89 = phi [^while.guard2, i32 %71] [^while.body4, i32 %86];
    f32* %90 = getelementptr &(f32* %2)[i32 %70];
    store f32* %90 with f32 %88;
    i1 %91 = scmp lt i32 %73, i32 100000;
    cbr i1 %91(prob = 1), ^while.guard2, ^while.guard3;
^while.guard3:
    f32 %92 = phi [^b2, f32 0] [^b3, f32 %111];
    i32 %93 = phi [^b2, i32 0] [^b3, i32 %96];
    i32 %94 = phi [^b2, i32 0] [^b3, i32 %112];
    i1 %95 = scmp lt i32 %94, i32 100000;
    i32 %96 = add i32 %93, i32 1;
    cbr i1 %95(prob = 0.97), ^while.body5, ^b3;
^while.body5:
    i32 %97 = phi [^while.body5, i32 %102] [^while.guard3, i32 %94];
    f32 %98 = phi [^while.body5, f32 %109] [^while.guard3, f32 %92];
    f32* %99 = getelementptr &(f32* %2)[i32 %97];
    f32 %100 = load f32* %99;
    i32 %101 = add i32 %93, i32 %97;
    i32 %102 = add i32 %97, i32 1;
    i32 %103 = add i32 %97, i32 %96;
    i32 %104 = mul i32 %101, i32 %103;
    i32 %105 = sdiv i32 %104, i32 2;
    i32 %106 = add i32 %102, i32 %105;
    f32 %107 = s2f i32 %106 to f32;
    f32 %108 = fdiv f32 %100, f32 %107;
    f32 %109 = fadd f32 %98, f32 %108;
    i1 %110 = scmp lt i32 %102, i32 100000;
    cbr i1 %110(prob = 0.97), ^while.body5, ^b3;
^b3:
    f32 %111 = phi [^while.guard3, f32 %92] [^while.body5, f32 %109];
    i32 %112 = phi [^while.guard3, i32 %94] [^while.body5, i32 %102];
    f32* %113 = getelementptr &(f32* %0)[i32 %93];
    store f32* %113 with f32 %111;
    i1 %114 = scmp lt i32 %96, i32 100000;
    cbr i1 %114(prob = 1), ^while.guard3, ^while.body6;
^while.body6:
    i32 %115 = add i32 %22, i32 1;
    i1 %116 = scmp lt i32 %115, i32 1000;
    cbr i1 %116(prob = 1), ^while.body1, ^b4;
^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body7;
^while.body7:
    i32 %117 = phi [^while.body7, i32 %215] [^b4, i32 0];
    f32 %118 = phi [^while.body7, f32 %214] [^b4, f32 0];
    f32* %119 = getelementptr &(f32* %0)[i32 %117];
    f32 %120 = load f32* %119;
    f32* %121 = getelementptr &(f32* %1)[i32 %117];
    f32 %122 = load f32* %121;
    f32 %123 = fmul f32 %120, f32 %122;
    f32 %124 = fadd f32 %118, f32 %123;
    f32* %125 = getelementptr &(f32* %119)[i64 1];
    f32 %126 = load f32* %125;
    f32* %127 = getelementptr &(f32* %121)[i64 1];
    f32 %128 = load f32* %127;
    f32 %129 = fmul f32 %126, f32 %128;
    f32 %130 = fadd f32 %124, f32 %129;
    f32* %131 = getelementptr &(f32* %119)[i64 2];
    f32 %132 = load f32* %131;
    f32* %133 = getelementptr &(f32* %121)[i64 2];
    f32 %134 = load f32* %133;
    f32 %135 = fmul f32 %132, f32 %134;
    f32 %136 = fadd f32 %130, f32 %135;
    f32* %137 = getelementptr &(f32* %119)[i64 3];
    f32 %138 = load f32* %137;
    f32* %139 = getelementptr &(f32* %121)[i64 3];
    f32 %140 = load f32* %139;
    f32 %141 = fmul f32 %138, f32 %140;
    f32 %142 = fadd f32 %136, f32 %141;
    f32* %143 = getelementptr &(f32* %119)[i64 4];
    f32 %144 = load f32* %143;
    f32* %145 = getelementptr &(f32* %121)[i64 4];
    f32 %146 = load f32* %145;
    f32 %147 = fmul f32 %144, f32 %146;
    f32 %148 = fadd f32 %142, f32 %147;
    f32* %149 = getelementptr &(f32* %119)[i64 5];
    f32 %150 = load f32* %149;
    f32* %151 = getelementptr &(f32* %121)[i64 5];
    f32 %152 = load f32* %151;
    f32 %153 = fmul f32 %150, f32 %152;
    f32 %154 = fadd f32 %148, f32 %153;
    f32* %155 = getelementptr &(f32* %119)[i64 6];
    f32 %156 = load f32* %155;
    f32* %157 = getelementptr &(f32* %121)[i64 6];
    f32 %158 = load f32* %157;
    f32 %159 = fmul f32 %156, f32 %158;
    f32 %160 = fadd f32 %154, f32 %159;
    f32* %161 = getelementptr &(f32* %119)[i64 7];
    f32 %162 = load f32* %161;
    f32* %163 = getelementptr &(f32* %121)[i64 7];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 %162, f32 %164;
    f32 %166 = fadd f32 %160, f32 %165;
    f32* %167 = getelementptr &(f32* %119)[i64 8];
    f32 %168 = load f32* %167;
    f32* %169 = getelementptr &(f32* %121)[i64 8];
    f32 %170 = load f32* %169;
    f32 %171 = fmul f32 %168, f32 %170;
    f32 %172 = fadd f32 %166, f32 %171;
    f32* %173 = getelementptr &(f32* %119)[i64 9];
    f32 %174 = load f32* %173;
    f32* %175 = getelementptr &(f32* %121)[i64 9];
    f32 %176 = load f32* %175;
    f32 %177 = fmul f32 %174, f32 %176;
    f32 %178 = fadd f32 %172, f32 %177;
    f32* %179 = getelementptr &(f32* %119)[i64 10];
    f32 %180 = load f32* %179;
    f32* %181 = getelementptr &(f32* %121)[i64 10];
    f32 %182 = load f32* %181;
    f32 %183 = fmul f32 %180, f32 %182;
    f32 %184 = fadd f32 %178, f32 %183;
    f32* %185 = getelementptr &(f32* %119)[i64 11];
    f32 %186 = load f32* %185;
    f32* %187 = getelementptr &(f32* %121)[i64 11];
    f32 %188 = load f32* %187;
    f32 %189 = fmul f32 %186, f32 %188;
    f32 %190 = fadd f32 %184, f32 %189;
    f32* %191 = getelementptr &(f32* %119)[i64 12];
    f32 %192 = load f32* %191;
    f32* %193 = getelementptr &(f32* %121)[i64 12];
    f32 %194 = load f32* %193;
    f32 %195 = fmul f32 %192, f32 %194;
    f32 %196 = fadd f32 %190, f32 %195;
    f32* %197 = getelementptr &(f32* %119)[i64 13];
    f32 %198 = load f32* %197;
    f32* %199 = getelementptr &(f32* %121)[i64 13];
    f32 %200 = load f32* %199;
    f32 %201 = fmul f32 %198, f32 %200;
    f32 %202 = fadd f32 %196, f32 %201;
    f32* %203 = getelementptr &(f32* %119)[i64 14];
    f32 %204 = load f32* %203;
    f32* %205 = getelementptr &(f32* %121)[i64 14];
    f32 %206 = load f32* %205;
    f32 %207 = fmul f32 %204, f32 %206;
    f32 %208 = fadd f32 %202, f32 %207;
    f32* %209 = getelementptr &(f32* %119)[i64 15];
    f32 %210 = load f32* %209;
    f32* %211 = getelementptr &(f32* %121)[i64 15];
    f32 %212 = load f32* %211;
    f32 %213 = fmul f32 %210, f32 %212;
    f32 %214 = fadd f32 %208, f32 %213;
    i32 %215 = add i32 %117, i32 16;
    i1 %216 = scmp lt i32 %215, i32 100000;
    cbr i1 %216(prob = 1), ^while.body7, ^while.body8;
^while.body8:
    i32 %217 = phi [^while.body8, i32 %283] [^while.body7, i32 0];
    f32 %218 = phi [^while.body8, f32 %282] [^while.body7, f32 0];
    f32* %219 = getelementptr &(f32* %1)[i32 %217];
    f32 %220 = load f32* %219;
    f32 %221 = fmul f32 %220, f32 %220;
    f32 %222 = fadd f32 %218, f32 %221;
    f32* %223 = getelementptr &(f32* %219)[i64 1];
    f32 %224 = load f32* %223;
    f32 %225 = fmul f32 %224, f32 %224;
    f32 %226 = fadd f32 %222, f32 %225;
    f32* %227 = getelementptr &(f32* %219)[i64 2];
    f32 %228 = load f32* %227;
    f32 %229 = fmul f32 %228, f32 %228;
    f32 %230 = fadd f32 %226, f32 %229;
    f32* %231 = getelementptr &(f32* %219)[i64 3];
    f32 %232 = load f32* %231;
    f32 %233 = fmul f32 %232, f32 %232;
    f32 %234 = fadd f32 %230, f32 %233;
    f32* %235 = getelementptr &(f32* %219)[i64 4];
    f32 %236 = load f32* %235;
    f32 %237 = fmul f32 %236, f32 %236;
    f32 %238 = fadd f32 %234, f32 %237;
    f32* %239 = getelementptr &(f32* %219)[i64 5];
    f32 %240 = load f32* %239;
    f32 %241 = fmul f32 %240, f32 %240;
    f32 %242 = fadd f32 %238, f32 %241;
    f32* %243 = getelementptr &(f32* %219)[i64 6];
    f32 %244 = load f32* %243;
    f32 %245 = fmul f32 %244, f32 %244;
    f32 %246 = fadd f32 %242, f32 %245;
    f32* %247 = getelementptr &(f32* %219)[i64 7];
    f32 %248 = load f32* %247;
    f32 %249 = fmul f32 %248, f32 %248;
    f32 %250 = fadd f32 %246, f32 %249;
    f32* %251 = getelementptr &(f32* %219)[i64 8];
    f32 %252 = load f32* %251;
    f32 %253 = fmul f32 %252, f32 %252;
    f32 %254 = fadd f32 %250, f32 %253;
    f32* %255 = getelementptr &(f32* %219)[i64 9];
    f32 %256 = load f32* %255;
    f32 %257 = fmul f32 %256, f32 %256;
    f32 %258 = fadd f32 %254, f32 %257;
    f32* %259 = getelementptr &(f32* %219)[i64 10];
    f32 %260 = load f32* %259;
    f32 %261 = fmul f32 %260, f32 %260;
    f32 %262 = fadd f32 %258, f32 %261;
    f32* %263 = getelementptr &(f32* %219)[i64 11];
    f32 %264 = load f32* %263;
    f32 %265 = fmul f32 %264, f32 %264;
    f32 %266 = fadd f32 %262, f32 %265;
    f32* %267 = getelementptr &(f32* %219)[i64 12];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 %268, f32 %268;
    f32 %270 = fadd f32 %266, f32 %269;
    f32* %271 = getelementptr &(f32* %219)[i64 13];
    f32 %272 = load f32* %271;
    f32 %273 = fmul f32 %272, f32 %272;
    f32 %274 = fadd f32 %270, f32 %273;
    f32* %275 = getelementptr &(f32* %219)[i64 14];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 %276, f32 %276;
    f32 %278 = fadd f32 %274, f32 %277;
    f32* %279 = getelementptr &(f32* %219)[i64 15];
    f32 %280 = load f32* %279;
    f32 %281 = fmul f32 %280, f32 %280;
    f32 %282 = fadd f32 %278, f32 %281;
    i32 %283 = add i32 %217, i32 16;
    i1 %284 = scmp lt i32 %283, i32 100000;
    cbr i1 %284(prob = 1), ^while.body8, ^b5;
^b5:
    f32 %285 = fdiv f32 %214, f32 %282;
    f32 %286 = fsub f32 1, f32 %285;
    i1 %287 = fcmp gt f32 %286, f32 1e-06;
    i1 %288 = fcmp lt f32 %286, f32 -1e-06;
    i1 %289 = or i1 %287, i1 %288;
    cbr i1 %289(prob = 0.98), ^while.body9, ^b6;
^while.body9:
    f32 %290 = phi [^b8, f32 %293] [^b5, f32 1];
    f32 %291 = fdiv f32 %285, f32 %290;
    f32 %292 = fadd f32 %290, f32 %291;
    f32 %293 = fdiv f32 %292, f32 2;
    f32 %294 = fdiv f32 %285, f32 %293;
    f32 %295 = fsub f32 %293, f32 %294;
    i1 %296 = fcmp gt f32 %295, f32 1e-06;
    cbr i1 %296(prob = 0.5), ^b8, ^b7;
^b6:
    f32 %297 = phi [^b8, f32 %293] [^b5, f32 1];
    f32 %298 = fsub f32 %297, f32 1;
    i1 %299 = fcmp le f32 %298, f32 1e-06;
    i1 %300 = fcmp ge f32 %298, f32 -1e-06;
    i1 %301 = and i1 %300, i1 %299;
    cbr i1 %301(prob = 0.25), ^if.then, ^if.else;
^b7:
    i1 %302 = fcmp lt f32 %295, f32 -1e-06;
    ubr ^b8;
^if.then:
    call (i32) -> void @putint(i32 1);
    ubr ^b9;
^b8:
    i1 %303 = phi [^while.body9, i1 true] [^b7, i1 %302];
    cbr i1 %303(prob = 0.97), ^while.body9, ^b6;
^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b9;
^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
