internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %18];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    i32 %18 = add i32 %1, i32 16;
    i1 %19 = icmp slt i32 %18, i32 100000;
    cbr i1 %19(prob = 1), ^while.body, ^prebody;
  ^prebody:
    f32* %20 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %21 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %22 = getelementptr &([100000 * f32]* %21)[i64 0][i64 0];
    [100000 * f32]* %23 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %24 = getelementptr &([100000 * f32]* %23)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^prebody, i32 0] [^while.body4, i32 %131];
    ubr ^while.header;
  ^while.header:
    f32 %26 = phi [^while.body1, f32 0] [^b, f32 %40];
    i32 %27 = phi [^while.body1, i32 0] [^b, i32 %39];
    i32 %28 = phi [^while.body1, i32 0] [^b, i32 %33];
    i1 %29 = icmp slt i32 %28, i32 100000;
    cbr i1 %29(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %30 = add i32 %28, i32 4;
    i32 %31 = add i32 %28, i32 3;
    i32 %32 = add i32 %28, i32 2;
    i32 %33 = add i32 %28, i32 1;
    i1 %34 = icmp slt i32 %27, i32 100000;
    cbr i1 %34(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %35 = phi [^while.header, f32 0] [^b1, f32 %89];
    i32 %36 = phi [^while.header, i32 0] [^b1, i32 %88];
    i32 %37 = phi [^while.header, i32 0] [^b1, i32 %91];
    i1 %38 = icmp slt i32 %37, i32 100000;
    cbr i1 %38(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %39 = phi [^while.header1, i32 %27] [^while.body3, i32 100000];
    f32 %40 = phi [^while.header1, f32 %26] [^while.body3, f32 %103];
    f32* %41 = getelementptr &(f32* %24)[i32 %28];
    store f32* %41 with f32 %40;
    ubr ^while.header;
  ^super.header:
    i32 %42 = phi [^while.header1, i32 %27] [^while.body2, i32 %44];
    f32 %43 = phi [^while.header1, f32 %26] [^while.body2, f32 %87];
    i32 %44 = add i32 %42, i32 4;
    i1 %45 = icmp slt i32 %44, i32 100000;
    cbr i1 %45(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i1 %46 = icmp slt i32 %36, i32 100000;
    cbr i1 %46(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %47 = phi [^while.header2, f32 0] [^b2, f32 %124];
    i32 %48 = phi [^while.header2, i32 0] [^b2, i32 %123];
    i32 %49 = phi [^while.header2, i32 0] [^b2, i32 %111];
    i1 %50 = icmp slt i32 %49, i32 100000;
    cbr i1 %50(prob = 0.97), ^while.header5, ^while.header6;
  ^while.body2:
    i32 %51 = add i32 %28, i32 %42;
    i32 %52 = add i32 %33, i32 %42;
    i32 %53 = mul i32 %51, i32 %52;
    i32 %54 = sdiv i32 %53, i32 2;
    i32 %55 = add i32 %33, i32 %54;
    f32 %56 = s2f i32 %55 to f32;
    f32* %57 = getelementptr &(f32* %20)[i32 %42];
    f32 %58 = load f32* %57;
    f32 %59 = fdiv f32 %58, f32 %56;
    f32 %60 = fadd f32 %43, f32 %59;
    i32 %61 = add i32 %32, i32 %42;
    i32 %62 = mul i32 %52, i32 %61;
    i32 %63 = sdiv i32 %62, i32 2;
    i32 %64 = add i32 %33, i32 %63;
    f32 %65 = s2f i32 %64 to f32;
    f32* %66 = getelementptr &(f32* %57)[i64 1];
    f32 %67 = load f32* %66;
    f32 %68 = fdiv f32 %67, f32 %65;
    f32 %69 = fadd f32 %60, f32 %68;
    i32 %70 = add i32 %31, i32 %42;
    i32 %71 = mul i32 %61, i32 %70;
    i32 %72 = sdiv i32 %71, i32 2;
    i32 %73 = add i32 %33, i32 %72;
    f32 %74 = s2f i32 %73 to f32;
    f32* %75 = getelementptr &(f32* %57)[i64 2];
    f32 %76 = load f32* %75;
    f32 %77 = fdiv f32 %76, f32 %74;
    f32 %78 = fadd f32 %69, f32 %77;
    i32 %79 = add i32 %30, i32 %42;
    i32 %80 = mul i32 %70, i32 %79;
    i32 %81 = sdiv i32 %80, i32 2;
    i32 %82 = add i32 %33, i32 %81;
    f32 %83 = s2f i32 %82 to f32;
    f32* %84 = getelementptr &(f32* %57)[i64 3];
    f32 %85 = load f32* %84;
    f32 %86 = fdiv f32 %85, f32 %83;
    f32 %87 = fadd f32 %78, f32 %86;
    ubr ^super.header;
  ^b1:
    i32 %88 = phi [^while.header3, i32 %36] [^while.body7, i32 100000];
    f32 %89 = phi [^while.header3, f32 %35] [^while.body7, f32 %227];
    f32* %90 = getelementptr &(f32* %22)[i32 %37];
    store f32* %90 with f32 %89;
    i32 %91 = add i32 %37, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %92 = phi [^super.header, i32 %42] [^while.body3, i32 %104];
    f32 %93 = phi [^super.header, f32 %43] [^while.body3, f32 %103];
    i32 %94 = add i32 %28, i32 %92;
    i32 %95 = add i32 %33, i32 %92;
    i32 %96 = mul i32 %94, i32 %95;
    i32 %97 = sdiv i32 %96, i32 2;
    i32 %98 = add i32 %33, i32 %97;
    f32 %99 = s2f i32 %98 to f32;
    f32* %100 = getelementptr &(f32* %20)[i32 %92];
    f32 %101 = load f32* %100;
    f32 %102 = fdiv f32 %101, f32 %99;
    f32 %103 = fadd f32 %93, f32 %102;
    i32 %104 = add i32 %92, i32 1;
    i1 %105 = icmp slt i32 %104, i32 100000;
    cbr i1 %105(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %106 = add i32 %36, i32 4;
    i1 %107 = icmp slt i32 %106, i32 100000;
    cbr i1 %107(prob = 0.89), ^prebody1, ^prebody2;
  ^while.header5:
    i32 %108 = add i32 %49, i32 4;
    i32 %109 = add i32 %49, i32 3;
    i32 %110 = add i32 %49, i32 2;
    i32 %111 = add i32 %49, i32 1;
    i1 %112 = icmp slt i32 %48, i32 100000;
    cbr i1 %112(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %113 = phi [^while.header4, f32 0] [^b3, f32 %230];
    i32 %114 = phi [^while.header4, i32 0] [^b3, i32 %229];
    i32 %115 = phi [^while.header4, i32 0] [^b3, i32 %232];
    i1 %116 = icmp slt i32 %115, i32 100000;
    cbr i1 %116(prob = 0.97), ^while.header7, ^while.body4;
  ^prebody1:
    i32 %117 = add i32 %37, i32 1;
    i32 %118 = add i32 %37, i32 2;
    i32 %119 = add i32 %37, i32 3;
    ubr ^while.body6;
  ^prebody2:
    f32 %120 = phi [^super.header1, f32 %35] [^while.body6, f32 %212];
    i32 %121 = phi [^super.header1, i32 %36] [^while.body6, i32 %170];
    i32 %122 = add i32 %37, i32 1;
    ubr ^while.body7;
  ^b2:
    i32 %123 = phi [^while.header5, i32 %48] [^while.body8, i32 100000];
    f32 %124 = phi [^while.header5, f32 %47] [^while.body8, f32 %244];
    f32* %125 = getelementptr &(f32* %24)[i32 %49];
    store f32* %125 with f32 %124;
    ubr ^while.header4;
  ^super.header2:
    i32 %126 = phi [^while.header5, i32 %48] [^while.body5, i32 %128];
    f32 %127 = phi [^while.header5, f32 %47] [^while.body5, f32 %169];
    i32 %128 = add i32 %126, i32 4;
    i1 %129 = icmp slt i32 %128, i32 100000;
    cbr i1 %129(prob = 0.89), ^while.body5, ^while.body8;
  ^while.header7:
    i1 %130 = icmp slt i32 %114, i32 100000;
    cbr i1 %130(prob = 0.97), ^super.header3, ^b3;
  ^while.body4:
    i32 %131 = add i32 %25, i32 1;
    i1 %132 = icmp slt i32 %131, i32 1000;
    cbr i1 %132(prob = 1), ^while.body1, ^b4;
  ^while.body5:
    i32 %133 = add i32 %49, i32 %126;
    i32 %134 = add i32 %111, i32 %126;
    i32 %135 = mul i32 %133, i32 %134;
    i32 %136 = sdiv i32 %135, i32 2;
    i32 %137 = add i32 %111, i32 %136;
    f32 %138 = s2f i32 %137 to f32;
    f32* %139 = getelementptr &(f32* %22)[i32 %126];
    f32 %140 = load f32* %139;
    f32 %141 = fdiv f32 %140, f32 %138;
    f32 %142 = fadd f32 %127, f32 %141;
    i32 %143 = add i32 %110, i32 %126;
    i32 %144 = mul i32 %134, i32 %143;
    i32 %145 = sdiv i32 %144, i32 2;
    i32 %146 = add i32 %111, i32 %145;
    f32 %147 = s2f i32 %146 to f32;
    f32* %148 = getelementptr &(f32* %139)[i64 1];
    f32 %149 = load f32* %148;
    f32 %150 = fdiv f32 %149, f32 %147;
    f32 %151 = fadd f32 %142, f32 %150;
    i32 %152 = add i32 %109, i32 %126;
    i32 %153 = mul i32 %143, i32 %152;
    i32 %154 = sdiv i32 %153, i32 2;
    i32 %155 = add i32 %111, i32 %154;
    f32 %156 = s2f i32 %155 to f32;
    f32* %157 = getelementptr &(f32* %139)[i64 2];
    f32 %158 = load f32* %157;
    f32 %159 = fdiv f32 %158, f32 %156;
    f32 %160 = fadd f32 %151, f32 %159;
    i32 %161 = add i32 %108, i32 %126;
    i32 %162 = mul i32 %152, i32 %161;
    i32 %163 = sdiv i32 %162, i32 2;
    i32 %164 = add i32 %111, i32 %163;
    f32 %165 = s2f i32 %164 to f32;
    f32* %166 = getelementptr &(f32* %139)[i64 3];
    f32 %167 = load f32* %166;
    f32 %168 = fdiv f32 %167, f32 %165;
    f32 %169 = fadd f32 %160, f32 %168;
    ubr ^super.header2;
  ^while.body6:
    i32 %170 = phi [^prebody1, i32 %106] [^while.body6, i32 %213];
    f32 %171 = phi [^prebody1, f32 %35] [^while.body6, f32 %212];
    i32 %172 = phi [^prebody1, i32 %36] [^while.body6, i32 %170];
    i32 %173 = add i32 %37, i32 %172;
    i32 %174 = add i32 %117, i32 %172;
    i32 %175 = mul i32 %173, i32 %174;
    i32 %176 = sdiv i32 %175, i32 2;
    i32 %177 = add i32 %172, i32 1;
    i32 %178 = add i32 %176, i32 %177;
    f32 %179 = s2f i32 %178 to f32;
    f32* %180 = getelementptr &(f32* %24)[i32 %172];
    f32 %181 = load f32* %180;
    f32 %182 = fdiv f32 %181, f32 %179;
    f32 %183 = fadd f32 %171, f32 %182;
    i32 %184 = add i32 %118, i32 %172;
    i32 %185 = mul i32 %174, i32 %184;
    i32 %186 = sdiv i32 %185, i32 2;
    i32 %187 = add i32 %172, i32 2;
    i32 %188 = add i32 %186, i32 %187;
    f32 %189 = s2f i32 %188 to f32;
    f32* %190 = getelementptr &(f32* %180)[i64 1];
    f32 %191 = load f32* %190;
    f32 %192 = fdiv f32 %191, f32 %189;
    f32 %193 = fadd f32 %183, f32 %192;
    i32 %194 = add i32 %119, i32 %172;
    i32 %195 = mul i32 %184, i32 %194;
    i32 %196 = sdiv i32 %195, i32 2;
    i32 %197 = add i32 %172, i32 3;
    i32 %198 = add i32 %196, i32 %197;
    f32 %199 = s2f i32 %198 to f32;
    f32* %200 = getelementptr &(f32* %180)[i64 2];
    f32 %201 = load f32* %200;
    f32 %202 = fdiv f32 %201, f32 %199;
    f32 %203 = fadd f32 %193, f32 %202;
    i32 %204 = add i32 %37, i32 %170;
    i32 %205 = mul i32 %194, i32 %204;
    i32 %206 = sdiv i32 %205, i32 2;
    i32 %207 = add i32 %170, i32 %206;
    f32 %208 = s2f i32 %207 to f32;
    f32* %209 = getelementptr &(f32* %180)[i64 3];
    f32 %210 = load f32* %209;
    f32 %211 = fdiv f32 %210, f32 %208;
    f32 %212 = fadd f32 %203, f32 %211;
    i32 %213 = add i32 %170, i32 4;
    i1 %214 = icmp slt i32 %213, i32 100000;
    cbr i1 %214(prob = 0.89), ^while.body6, ^prebody2;
  ^while.body7:
    i32 %215 = phi [^prebody2, i32 %121] [^while.body7, i32 %221];
    f32 %216 = phi [^prebody2, f32 %120] [^while.body7, f32 %227];
    i32 %217 = add i32 %37, i32 %215;
    i32 %218 = add i32 %122, i32 %215;
    i32 %219 = mul i32 %217, i32 %218;
    i32 %220 = sdiv i32 %219, i32 2;
    i32 %221 = add i32 %215, i32 1;
    i32 %222 = add i32 %220, i32 %221;
    f32 %223 = s2f i32 %222 to f32;
    f32* %224 = getelementptr &(f32* %24)[i32 %215];
    f32 %225 = load f32* %224;
    f32 %226 = fdiv f32 %225, f32 %223;
    f32 %227 = fadd f32 %216, f32 %226;
    i1 %228 = icmp slt i32 %221, i32 100000;
    cbr i1 %228(prob = 0.75), ^while.body7, ^b1;
  ^b3:
    i32 %229 = phi [^while.header7, i32 %114] [^while.body11, i32 100000];
    f32 %230 = phi [^while.header7, f32 %113] [^while.body11, f32 %340];
    f32* %231 = getelementptr &(f32* %20)[i32 %115];
    store f32* %231 with f32 %230;
    i32 %232 = add i32 %115, i32 1;
    ubr ^while.header6;
  ^while.body8:
    i32 %233 = phi [^super.header2, i32 %126] [^while.body8, i32 %245];
    f32 %234 = phi [^super.header2, f32 %127] [^while.body8, f32 %244];
    i32 %235 = add i32 %49, i32 %233;
    i32 %236 = add i32 %111, i32 %233;
    i32 %237 = mul i32 %235, i32 %236;
    i32 %238 = sdiv i32 %237, i32 2;
    i32 %239 = add i32 %111, i32 %238;
    f32 %240 = s2f i32 %239 to f32;
    f32* %241 = getelementptr &(f32* %22)[i32 %233];
    f32 %242 = load f32* %241;
    f32 %243 = fdiv f32 %242, f32 %240;
    f32 %244 = fadd f32 %234, f32 %243;
    i32 %245 = add i32 %233, i32 1;
    i1 %246 = icmp slt i32 %245, i32 100000;
    cbr i1 %246(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %247 = add i32 %114, i32 4;
    i1 %248 = icmp slt i32 %247, i32 100000;
    cbr i1 %248(prob = 0.89), ^prebody3, ^prebody4;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^super.header4;
  ^prebody3:
    i32 %249 = add i32 %115, i32 1;
    i32 %250 = add i32 %115, i32 2;
    i32 %251 = add i32 %115, i32 3;
    ubr ^while.body9;
  ^prebody4:
    f32 %252 = phi [^super.header3, f32 %113] [^while.body9, f32 %301];
    i32 %253 = phi [^super.header3, i32 %114] [^while.body9, i32 %259];
    i32 %254 = add i32 %115, i32 1;
    ubr ^while.body11;
  ^super.header4:
    i32 %255 = phi [^b4, i32 0] [^while.body10, i32 %257];
    f32 %256 = phi [^b4, f32 0] [^while.body10, f32 %327];
    i32 %257 = add i32 %255, i32 4;
    i1 %258 = icmp slt i32 %257, i32 100000;
    cbr i1 %258(prob = 0.89), ^while.body10, ^while.body12;
  ^while.body9:
    i32 %259 = phi [^prebody3, i32 %247] [^while.body9, i32 %302];
    f32 %260 = phi [^prebody3, f32 %113] [^while.body9, f32 %301];
    i32 %261 = phi [^prebody3, i32 %114] [^while.body9, i32 %259];
    i32 %262 = add i32 %115, i32 %261;
    i32 %263 = add i32 %249, i32 %261;
    i32 %264 = mul i32 %262, i32 %263;
    i32 %265 = sdiv i32 %264, i32 2;
    i32 %266 = add i32 %261, i32 1;
    i32 %267 = add i32 %265, i32 %266;
    f32 %268 = s2f i32 %267 to f32;
    f32* %269 = getelementptr &(f32* %24)[i32 %261];
    f32 %270 = load f32* %269;
    f32 %271 = fdiv f32 %270, f32 %268;
    f32 %272 = fadd f32 %260, f32 %271;
    i32 %273 = add i32 %250, i32 %261;
    i32 %274 = mul i32 %263, i32 %273;
    i32 %275 = sdiv i32 %274, i32 2;
    i32 %276 = add i32 %261, i32 2;
    i32 %277 = add i32 %275, i32 %276;
    f32 %278 = s2f i32 %277 to f32;
    f32* %279 = getelementptr &(f32* %269)[i64 1];
    f32 %280 = load f32* %279;
    f32 %281 = fdiv f32 %280, f32 %278;
    f32 %282 = fadd f32 %272, f32 %281;
    i32 %283 = add i32 %251, i32 %261;
    i32 %284 = mul i32 %273, i32 %283;
    i32 %285 = sdiv i32 %284, i32 2;
    i32 %286 = add i32 %261, i32 3;
    i32 %287 = add i32 %285, i32 %286;
    f32 %288 = s2f i32 %287 to f32;
    f32* %289 = getelementptr &(f32* %269)[i64 2];
    f32 %290 = load f32* %289;
    f32 %291 = fdiv f32 %290, f32 %288;
    f32 %292 = fadd f32 %282, f32 %291;
    i32 %293 = add i32 %115, i32 %259;
    i32 %294 = mul i32 %283, i32 %293;
    i32 %295 = sdiv i32 %294, i32 2;
    i32 %296 = add i32 %259, i32 %295;
    f32 %297 = s2f i32 %296 to f32;
    f32* %298 = getelementptr &(f32* %269)[i64 3];
    f32 %299 = load f32* %298;
    f32 %300 = fdiv f32 %299, f32 %297;
    f32 %301 = fadd f32 %292, f32 %300;
    i32 %302 = add i32 %259, i32 4;
    i1 %303 = icmp slt i32 %302, i32 100000;
    cbr i1 %303(prob = 0.89), ^while.body9, ^prebody4;
  ^while.body10:
    f32* %304 = getelementptr &(f32* %20)[i32 %255];
    f32 %305 = load f32* %304;
    f32* %306 = getelementptr &(f32* %22)[i32 %255];
    f32 %307 = load f32* %306;
    f32 %308 = fmul f32 %305, f32 %307;
    f32 %309 = fadd f32 %256, f32 %308;
    f32* %310 = getelementptr &(f32* %304)[i64 1];
    f32 %311 = load f32* %310;
    f32* %312 = getelementptr &(f32* %306)[i64 1];
    f32 %313 = load f32* %312;
    f32 %314 = fmul f32 %311, f32 %313;
    f32 %315 = fadd f32 %309, f32 %314;
    f32* %316 = getelementptr &(f32* %304)[i64 2];
    f32 %317 = load f32* %316;
    f32* %318 = getelementptr &(f32* %306)[i64 2];
    f32 %319 = load f32* %318;
    f32 %320 = fmul f32 %317, f32 %319;
    f32 %321 = fadd f32 %315, f32 %320;
    f32* %322 = getelementptr &(f32* %304)[i64 3];
    f32 %323 = load f32* %322;
    f32* %324 = getelementptr &(f32* %306)[i64 3];
    f32 %325 = load f32* %324;
    f32 %326 = fmul f32 %323, f32 %325;
    f32 %327 = fadd f32 %321, f32 %326;
    ubr ^super.header4;
  ^while.body11:
    i32 %328 = phi [^prebody4, i32 %253] [^while.body11, i32 %334];
    f32 %329 = phi [^prebody4, f32 %252] [^while.body11, f32 %340];
    i32 %330 = add i32 %115, i32 %328;
    i32 %331 = add i32 %254, i32 %328;
    i32 %332 = mul i32 %330, i32 %331;
    i32 %333 = sdiv i32 %332, i32 2;
    i32 %334 = add i32 %328, i32 1;
    i32 %335 = add i32 %333, i32 %334;
    f32 %336 = s2f i32 %335 to f32;
    f32* %337 = getelementptr &(f32* %24)[i32 %328];
    f32 %338 = load f32* %337;
    f32 %339 = fdiv f32 %338, f32 %336;
    f32 %340 = fadd f32 %329, f32 %339;
    i1 %341 = icmp slt i32 %334, i32 100000;
    cbr i1 %341(prob = 0.75), ^while.body11, ^b3;
  ^while.body12:
    i32 %342 = phi [^super.header4, i32 %255] [^while.body12, i32 %350];
    f32 %343 = phi [^super.header4, f32 %256] [^while.body12, f32 %349];
    f32* %344 = getelementptr &(f32* %20)[i32 %342];
    f32 %345 = load f32* %344;
    f32* %346 = getelementptr &(f32* %22)[i32 %342];
    f32 %347 = load f32* %346;
    f32 %348 = fmul f32 %345, f32 %347;
    f32 %349 = fadd f32 %343, f32 %348;
    i32 %350 = add i32 %342, i32 1;
    i1 %351 = icmp slt i32 %350, i32 100000;
    cbr i1 %351(prob = 0.75), ^while.body12, ^super.header5;
  ^super.header5:
    i32 %352 = phi [^while.body12, i32 0] [^while.body13, i32 %354];
    f32 %353 = phi [^while.body12, f32 0] [^while.body13, f32 %371];
    i32 %354 = add i32 %352, i32 4;
    i1 %355 = icmp slt i32 %354, i32 100000;
    cbr i1 %355(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body13:
    f32* %356 = getelementptr &(f32* %22)[i32 %352];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 %357, f32 %357;
    f32 %359 = fadd f32 %353, f32 %358;
    f32* %360 = getelementptr &(f32* %356)[i64 1];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 %361, f32 %361;
    f32 %363 = fadd f32 %359, f32 %362;
    f32* %364 = getelementptr &(f32* %356)[i64 2];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %365, f32 %365;
    f32 %367 = fadd f32 %363, f32 %366;
    f32* %368 = getelementptr &(f32* %356)[i64 3];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %369, f32 %369;
    f32 %371 = fadd f32 %367, f32 %370;
    ubr ^super.header5;
  ^while.body14:
    i32 %372 = phi [^super.header5, i32 %352] [^while.body14, i32 %378];
    f32 %373 = phi [^super.header5, f32 %353] [^while.body14, f32 %377];
    f32* %374 = getelementptr &(f32* %22)[i32 %372];
    f32 %375 = load f32* %374;
    f32 %376 = fmul f32 %375, f32 %375;
    f32 %377 = fadd f32 %373, f32 %376;
    i32 %378 = add i32 %372, i32 1;
    i1 %379 = icmp slt i32 %378, i32 100000;
    cbr i1 %379(prob = 0.75), ^while.body14, ^b5;
  ^b5:
    f32 %380 = fdiv f32 %349, f32 %377;
    f32 %381 = fsub f32 1, f32 %380;
    i1 %382 = fcmp ogt f32 %381, f32 1e-06;
    i1 %383 = fcmp olt f32 %381, f32 -1e-06;
    i1 %384 = or i1 %382, i1 %383;
    cbr i1 %384(prob = 0.98), ^while.body15, ^b6;
  ^while.body15:
    f32 %385 = phi [^b5, f32 %380] [^while.body15, f32 %389];
    f32 %386 = phi [^b5, f32 1] [^while.body15, f32 %388];
    f32 %387 = fadd f32 %386, f32 %385;
    f32 %388 = fmul f32 %387, f32 0.5;
    f32 %389 = fdiv f32 %380, f32 %388;
    f32 %390 = fsub f32 %388, f32 %389;
    i1 %391 = fcmp ogt f32 %390, f32 1e-06;
    i1 %392 = fcmp olt f32 %390, f32 -1e-06;
    i1 %393 = or i1 %391, i1 %392;
    cbr i1 %393(prob = 0.98), ^while.body15, ^b6;
  ^b6:
    f32 %394 = phi [^b5, f32 1] [^while.body15, f32 %388];
    f32 %395 = fsub f32 %394, f32 1;
    i1 %396 = fcmp ole f32 %395, f32 1e-06;
    i1 %397 = fcmp oge f32 %395, f32 -1e-06;
    i1 %398 = and i1 %396, i1 %397;
    i32 %399 = zext i1 %398 to i32;
    call (i32) -> void @putint(i32 %399);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm;
internal [100000 * f32]* @vectorB;
internal [100000 * f32]* @vectorA;
