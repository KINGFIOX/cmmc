internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %66];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %2)[i64 16];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %2)[i64 17];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %2)[i64 18];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %2)[i64 19];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %2)[i64 20];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %2)[i64 21];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %2)[i64 22];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %2)[i64 23];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %2)[i64 24];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %2)[i64 25];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %2)[i64 26];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %2)[i64 27];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %2)[i64 28];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %2)[i64 29];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %2)[i64 30];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %2)[i64 31];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %2)[i64 32];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %2)[i64 33];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %2)[i64 34];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %2)[i64 35];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %2)[i64 36];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %2)[i64 37];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %2)[i64 38];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %2)[i64 39];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %2)[i64 40];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %2)[i64 41];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %2)[i64 42];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %2)[i64 43];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %2)[i64 44];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %2)[i64 45];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %2)[i64 46];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %2)[i64 47];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %2)[i64 48];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %2)[i64 49];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %2)[i64 50];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %2)[i64 51];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %2)[i64 52];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %2)[i64 53];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %2)[i64 54];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %2)[i64 55];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %2)[i64 56];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %2)[i64 57];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %2)[i64 58];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %2)[i64 59];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %2)[i64 60];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %2)[i64 61];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %2)[i64 62];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %2)[i64 63];
    store f32* %65 with f32 1;
    i32 %66 = add i32 %1, i32 64;
    i1 %67 = icmp slt i32 %66, i32 99968;
    cbr i1 %67(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    f32* %68 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %66];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %68)[i64 1];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %68)[i64 2];
    store f32* %70 with f32 1;
    f32* %71 = getelementptr &(f32* %68)[i64 3];
    store f32* %71 with f32 1;
    f32* %72 = getelementptr &(f32* %68)[i64 4];
    store f32* %72 with f32 1;
    f32* %73 = getelementptr &(f32* %68)[i64 5];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %68)[i64 6];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %68)[i64 7];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %68)[i64 8];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %68)[i64 9];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %68)[i64 10];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %68)[i64 11];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %68)[i64 12];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %68)[i64 13];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %68)[i64 14];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %68)[i64 15];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %68)[i64 16];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %68)[i64 17];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %68)[i64 18];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %68)[i64 19];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %68)[i64 20];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %68)[i64 21];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %68)[i64 22];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %68)[i64 23];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %68)[i64 24];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %68)[i64 25];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %68)[i64 26];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %68)[i64 27];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %68)[i64 28];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %68)[i64 29];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %68)[i64 30];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %68)[i64 31];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %101 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %102 = getelementptr &([100000 * f32]* %101)[i64 0][i64 0];
    [100000 * f32]* %103 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %104 = getelementptr &([100000 * f32]* %103)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^while.body6, i32 %220];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %110];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp slt i32 %107, i32 100000;
    cbr i1 %111(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %131];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %130];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %122];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body3, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body3, f32 %144];
    f32* %118 = getelementptr &(f32* %104)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 4;
    i1 %120 = icmp slt i32 %119, i32 100000;
    cbr i1 %120(prob = 0.89), ^prebody, ^while.body3;
  ^while.header3:
    i1 %121 = icmp slt i32 %113, i32 100000;
    i32 %122 = add i32 %114, i32 1;
    cbr i1 %121(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %123 = phi [^while.header2, f32 0] [^b2, f32 %200];
    i32 %124 = phi [^while.header2, i32 0] [^b2, i32 %199];
    i32 %125 = phi [^while.header2, i32 0] [^b2, i32 %149];
    i1 %126 = icmp slt i32 %125, i32 100000;
    cbr i1 %126(prob = 0.97), ^while.header5, ^while.header6;
  ^prebody:
    i32 %127 = add i32 %108, i32 2;
    i32 %128 = add i32 %108, i32 3;
    i32 %129 = add i32 %108, i32 4;
    ubr ^while.body4;
  ^b1:
    i32 %130 = phi [^while.header3, i32 %113] [^while.body5, i32 100000];
    f32 %131 = phi [^while.header3, f32 %112] [^while.body5, f32 %214];
    f32* %132 = getelementptr &(f32* %102)[i32 %114];
    store f32* %132 with f32 %131;
    ubr ^while.header2;
  ^while.body3 {scalar}:
    i32 %133 = phi [^super.header, i32 %107] [^while.body3, i32 %145] [^while.body4, i32 %197];
    f32 %134 = phi [^super.header, f32 %106] [^while.body3, f32 %144] [^while.body4, f32 %196];
    i32 %135 = add i32 %108, i32 %133;
    i32 %136 = add i32 %110, i32 %133;
    i32 %137 = mul i32 %135, i32 %136;
    i32 %138 = sdiv i32 %137, i32 2;
    i32 %139 = add i32 %110, i32 %138;
    f32 %140 = s2f i32 %139 to f32;
    f32* %141 = getelementptr &(f32* %100)[i32 %133];
    f32 %142 = load f32* %141;
    f32 %143 = fdiv f32 %142, f32 %140;
    f32 %144 = fadd f32 %134, f32 %143;
    i32 %145 = add i32 %133, i32 1;
    i1 %146 = icmp slt i32 %145, i32 100000;
    cbr i1 %146(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %147 = add i32 %113, i32 4;
    i1 %148 = icmp slt i32 %147, i32 100000;
    cbr i1 %148(prob = 0.89), ^prebody1, ^while.body5;
  ^while.header5:
    i32 %149 = add i32 %125, i32 1;
    i1 %150 = icmp slt i32 %124, i32 100000;
    cbr i1 %150(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %151 = phi [^while.header4, f32 0] [^b3, f32 %270];
    i32 %152 = phi [^while.header4, i32 0] [^b3, i32 %269];
    i32 %153 = phi [^while.header4, i32 0] [^b3, i32 %219];
    i1 %154 = icmp slt i32 %153, i32 100000;
    cbr i1 %154(prob = 0.97), ^while.header7, ^while.body6;
  ^prebody1:
    i32 %155 = add i32 %114, i32 2;
    i32 %156 = add i32 %114, i32 3;
    i32 %157 = add i32 %114, i32 4;
    ubr ^while.body7;
  ^while.body4:
    f32 %158 = phi [^prebody, f32 %106] [^while.body4, f32 %196];
    i32 %159 = phi [^prebody, i32 %107] [^while.body4, i32 %197];
    i32 %160 = add i32 %108, i32 %159;
    i32 %161 = add i32 %110, i32 %159;
    i32 %162 = mul i32 %160, i32 %161;
    i32 %163 = sdiv i32 %162, i32 2;
    i32 %164 = add i32 %110, i32 %163;
    f32 %165 = s2f i32 %164 to f32;
    f32* %166 = getelementptr &(f32* %100)[i32 %159];
    f32 %167 = load f32* %166;
    f32 %168 = fdiv f32 %167, f32 %165;
    f32 %169 = fadd f32 %158, f32 %168;
    i32 %170 = add i32 %127, i32 %159;
    i32 %171 = mul i32 %161, i32 %170;
    i32 %172 = sdiv i32 %171, i32 2;
    i32 %173 = add i32 %110, i32 %172;
    f32 %174 = s2f i32 %173 to f32;
    f32* %175 = getelementptr &(f32* %166)[i64 1];
    f32 %176 = load f32* %175;
    f32 %177 = fdiv f32 %176, f32 %174;
    f32 %178 = fadd f32 %169, f32 %177;
    i32 %179 = add i32 %128, i32 %159;
    i32 %180 = mul i32 %170, i32 %179;
    i32 %181 = sdiv i32 %180, i32 2;
    i32 %182 = add i32 %110, i32 %181;
    f32 %183 = s2f i32 %182 to f32;
    f32* %184 = getelementptr &(f32* %166)[i64 2];
    f32 %185 = load f32* %184;
    f32 %186 = fdiv f32 %185, f32 %183;
    f32 %187 = fadd f32 %178, f32 %186;
    i32 %188 = add i32 %129, i32 %159;
    i32 %189 = mul i32 %179, i32 %188;
    i32 %190 = sdiv i32 %189, i32 2;
    i32 %191 = add i32 %110, i32 %190;
    f32 %192 = s2f i32 %191 to f32;
    f32* %193 = getelementptr &(f32* %166)[i64 3];
    f32 %194 = load f32* %193;
    f32 %195 = fdiv f32 %194, f32 %192;
    f32 %196 = fadd f32 %187, f32 %195;
    i32 %197 = add i32 %159, i32 4;
    i1 %198 = icmp slt i32 %197, i32 99996;
    cbr i1 %198(prob = 0.89), ^while.body4, ^while.body3;
  ^b2:
    i32 %199 = phi [^while.header5, i32 %124] [^while.body8, i32 100000];
    f32 %200 = phi [^while.header5, f32 %123] [^while.body8, f32 %283];
    f32* %201 = getelementptr &(f32* %104)[i32 %125];
    store f32* %201 with f32 %200;
    ubr ^while.header4;
  ^while.body5 {scalar}:
    i32 %202 = phi [^super.header1, i32 %113] [^while.body5, i32 %208] [^while.body7, i32 %261];
    f32 %203 = phi [^super.header1, f32 %112] [^while.body5, f32 %214] [^while.body7, f32 %267];
    i32 %204 = add i32 %114, i32 %202;
    i32 %205 = add i32 %122, i32 %202;
    i32 %206 = mul i32 %204, i32 %205;
    i32 %207 = sdiv i32 %206, i32 2;
    i32 %208 = add i32 %202, i32 1;
    i32 %209 = add i32 %207, i32 %208;
    f32 %210 = s2f i32 %209 to f32;
    f32* %211 = getelementptr &(f32* %104)[i32 %202];
    f32 %212 = load f32* %211;
    f32 %213 = fdiv f32 %212, f32 %210;
    f32 %214 = fadd f32 %203, f32 %213;
    i1 %215 = icmp slt i32 %208, i32 100000;
    cbr i1 %215(prob = 0.75), ^while.body5, ^b1;
  ^super.header2:
    i32 %216 = add i32 %124, i32 4;
    i1 %217 = icmp slt i32 %216, i32 100000;
    cbr i1 %217(prob = 0.89), ^prebody2, ^while.body8;
  ^while.header7:
    i1 %218 = icmp slt i32 %152, i32 100000;
    i32 %219 = add i32 %153, i32 1;
    cbr i1 %218(prob = 0.97), ^super.header3, ^b3;
  ^while.body6:
    i32 %220 = add i32 %105, i32 1;
    i1 %221 = icmp slt i32 %220, i32 1000;
    cbr i1 %221(prob = 1), ^while.body2, ^b4;
  ^prebody2:
    i32 %222 = add i32 %125, i32 2;
    i32 %223 = add i32 %125, i32 3;
    i32 %224 = add i32 %125, i32 4;
    ubr ^while.body9;
  ^while.body7:
    f32 %225 = phi [^prebody1, f32 %112] [^while.body7, f32 %267];
    i32 %226 = phi [^prebody1, i32 %113] [^while.body7, i32 %261];
    i32 %227 = add i32 %114, i32 %226;
    i32 %228 = add i32 %122, i32 %226;
    i32 %229 = mul i32 %227, i32 %228;
    i32 %230 = sdiv i32 %229, i32 2;
    i32 %231 = add i32 %226, i32 1;
    i32 %232 = add i32 %230, i32 %231;
    f32 %233 = s2f i32 %232 to f32;
    f32* %234 = getelementptr &(f32* %104)[i32 %226];
    f32 %235 = load f32* %234;
    f32 %236 = fdiv f32 %235, f32 %233;
    f32 %237 = fadd f32 %225, f32 %236;
    i32 %238 = add i32 %155, i32 %226;
    i32 %239 = mul i32 %228, i32 %238;
    i32 %240 = sdiv i32 %239, i32 2;
    i32 %241 = add i32 %226, i32 2;
    i32 %242 = add i32 %240, i32 %241;
    f32 %243 = s2f i32 %242 to f32;
    f32* %244 = getelementptr &(f32* %234)[i64 1];
    f32 %245 = load f32* %244;
    f32 %246 = fdiv f32 %245, f32 %243;
    f32 %247 = fadd f32 %237, f32 %246;
    i32 %248 = add i32 %156, i32 %226;
    i32 %249 = mul i32 %238, i32 %248;
    i32 %250 = sdiv i32 %249, i32 2;
    i32 %251 = add i32 %226, i32 3;
    i32 %252 = add i32 %250, i32 %251;
    f32 %253 = s2f i32 %252 to f32;
    f32* %254 = getelementptr &(f32* %234)[i64 2];
    f32 %255 = load f32* %254;
    f32 %256 = fdiv f32 %255, f32 %253;
    f32 %257 = fadd f32 %247, f32 %256;
    i32 %258 = add i32 %157, i32 %226;
    i32 %259 = mul i32 %248, i32 %258;
    i32 %260 = sdiv i32 %259, i32 2;
    i32 %261 = add i32 %226, i32 4;
    i32 %262 = add i32 %260, i32 %261;
    f32 %263 = s2f i32 %262 to f32;
    f32* %264 = getelementptr &(f32* %234)[i64 3];
    f32 %265 = load f32* %264;
    f32 %266 = fdiv f32 %265, f32 %263;
    f32 %267 = fadd f32 %257, f32 %266;
    i1 %268 = icmp slt i32 %261, i32 99996;
    cbr i1 %268(prob = 0.89), ^while.body7, ^while.body5;
  ^b3:
    i32 %269 = phi [^while.header7, i32 %152] [^while.body10, i32 100000];
    f32 %270 = phi [^while.header7, f32 %151] [^while.body10, f32 %344];
    f32* %271 = getelementptr &(f32* %100)[i32 %153];
    store f32* %271 with f32 %270;
    ubr ^while.header6;
  ^while.body8 {scalar}:
    i32 %272 = phi [^super.header2, i32 %124] [^while.body8, i32 %284] [^while.body9, i32 %330];
    f32 %273 = phi [^super.header2, f32 %123] [^while.body8, f32 %283] [^while.body9, f32 %329];
    i32 %274 = add i32 %125, i32 %272;
    i32 %275 = add i32 %149, i32 %272;
    i32 %276 = mul i32 %274, i32 %275;
    i32 %277 = sdiv i32 %276, i32 2;
    i32 %278 = add i32 %149, i32 %277;
    f32 %279 = s2f i32 %278 to f32;
    f32* %280 = getelementptr &(f32* %102)[i32 %272];
    f32 %281 = load f32* %280;
    f32 %282 = fdiv f32 %281, f32 %279;
    f32 %283 = fadd f32 %273, f32 %282;
    i32 %284 = add i32 %272, i32 1;
    i1 %285 = icmp slt i32 %284, i32 100000;
    cbr i1 %285(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %286 = add i32 %152, i32 4;
    i1 %287 = icmp slt i32 %286, i32 100000;
    cbr i1 %287(prob = 0.89), ^prebody3, ^while.body10;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body11;
  ^prebody3:
    i32 %288 = add i32 %153, i32 2;
    i32 %289 = add i32 %153, i32 3;
    i32 %290 = add i32 %153, i32 4;
    ubr ^while.body12;
  ^while.body9:
    f32 %291 = phi [^prebody2, f32 %123] [^while.body9, f32 %329];
    i32 %292 = phi [^prebody2, i32 %124] [^while.body9, i32 %330];
    i32 %293 = add i32 %125, i32 %292;
    i32 %294 = add i32 %149, i32 %292;
    i32 %295 = mul i32 %293, i32 %294;
    i32 %296 = sdiv i32 %295, i32 2;
    i32 %297 = add i32 %149, i32 %296;
    f32 %298 = s2f i32 %297 to f32;
    f32* %299 = getelementptr &(f32* %102)[i32 %292];
    f32 %300 = load f32* %299;
    f32 %301 = fdiv f32 %300, f32 %298;
    f32 %302 = fadd f32 %291, f32 %301;
    i32 %303 = add i32 %222, i32 %292;
    i32 %304 = mul i32 %294, i32 %303;
    i32 %305 = sdiv i32 %304, i32 2;
    i32 %306 = add i32 %149, i32 %305;
    f32 %307 = s2f i32 %306 to f32;
    f32* %308 = getelementptr &(f32* %299)[i64 1];
    f32 %309 = load f32* %308;
    f32 %310 = fdiv f32 %309, f32 %307;
    f32 %311 = fadd f32 %302, f32 %310;
    i32 %312 = add i32 %223, i32 %292;
    i32 %313 = mul i32 %303, i32 %312;
    i32 %314 = sdiv i32 %313, i32 2;
    i32 %315 = add i32 %149, i32 %314;
    f32 %316 = s2f i32 %315 to f32;
    f32* %317 = getelementptr &(f32* %299)[i64 2];
    f32 %318 = load f32* %317;
    f32 %319 = fdiv f32 %318, f32 %316;
    f32 %320 = fadd f32 %311, f32 %319;
    i32 %321 = add i32 %224, i32 %292;
    i32 %322 = mul i32 %312, i32 %321;
    i32 %323 = sdiv i32 %322, i32 2;
    i32 %324 = add i32 %149, i32 %323;
    f32 %325 = s2f i32 %324 to f32;
    f32* %326 = getelementptr &(f32* %299)[i64 3];
    f32 %327 = load f32* %326;
    f32 %328 = fdiv f32 %327, f32 %325;
    f32 %329 = fadd f32 %320, f32 %328;
    i32 %330 = add i32 %292, i32 4;
    i1 %331 = icmp slt i32 %330, i32 99996;
    cbr i1 %331(prob = 0.89), ^while.body9, ^while.body8;
  ^while.body10 {scalar}:
    i32 %332 = phi [^super.header3, i32 %152] [^while.body10, i32 %338] [^while.body12, i32 %482];
    f32 %333 = phi [^super.header3, f32 %151] [^while.body10, f32 %344] [^while.body12, f32 %488];
    i32 %334 = add i32 %153, i32 %332;
    i32 %335 = add i32 %219, i32 %332;
    i32 %336 = mul i32 %334, i32 %335;
    i32 %337 = sdiv i32 %336, i32 2;
    i32 %338 = add i32 %332, i32 1;
    i32 %339 = add i32 %337, i32 %338;
    f32 %340 = s2f i32 %339 to f32;
    f32* %341 = getelementptr &(f32* %104)[i32 %332];
    f32 %342 = load f32* %341;
    f32 %343 = fdiv f32 %342, f32 %340;
    f32 %344 = fadd f32 %333, f32 %343;
    i1 %345 = icmp slt i32 %338, i32 100000;
    cbr i1 %345(prob = 0.75), ^while.body10, ^b3;
  ^while.body11:
    f32 %346 = phi [^b4, f32 0] [^while.body11, f32 %443];
    i32 %347 = phi [^b4, i32 0] [^while.body11, i32 %444];
    f32* %348 = getelementptr &(f32* %100)[i32 %347];
    f32 %349 = load f32* %348;
    f32* %350 = getelementptr &(f32* %102)[i32 %347];
    f32 %351 = load f32* %350;
    f32 %352 = fmul f32 %349, f32 %351;
    f32 %353 = fadd f32 %346, f32 %352;
    f32* %354 = getelementptr &(f32* %348)[i64 1];
    f32 %355 = load f32* %354;
    f32* %356 = getelementptr &(f32* %350)[i64 1];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 %355, f32 %357;
    f32 %359 = fadd f32 %353, f32 %358;
    f32* %360 = getelementptr &(f32* %348)[i64 2];
    f32 %361 = load f32* %360;
    f32* %362 = getelementptr &(f32* %350)[i64 2];
    f32 %363 = load f32* %362;
    f32 %364 = fmul f32 %361, f32 %363;
    f32 %365 = fadd f32 %359, f32 %364;
    f32* %366 = getelementptr &(f32* %348)[i64 3];
    f32 %367 = load f32* %366;
    f32* %368 = getelementptr &(f32* %350)[i64 3];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %367, f32 %369;
    f32 %371 = fadd f32 %365, f32 %370;
    f32* %372 = getelementptr &(f32* %348)[i64 4];
    f32 %373 = load f32* %372;
    f32* %374 = getelementptr &(f32* %350)[i64 4];
    f32 %375 = load f32* %374;
    f32 %376 = fmul f32 %373, f32 %375;
    f32 %377 = fadd f32 %371, f32 %376;
    f32* %378 = getelementptr &(f32* %348)[i64 5];
    f32 %379 = load f32* %378;
    f32* %380 = getelementptr &(f32* %350)[i64 5];
    f32 %381 = load f32* %380;
    f32 %382 = fmul f32 %379, f32 %381;
    f32 %383 = fadd f32 %377, f32 %382;
    f32* %384 = getelementptr &(f32* %348)[i64 6];
    f32 %385 = load f32* %384;
    f32* %386 = getelementptr &(f32* %350)[i64 6];
    f32 %387 = load f32* %386;
    f32 %388 = fmul f32 %385, f32 %387;
    f32 %389 = fadd f32 %383, f32 %388;
    f32* %390 = getelementptr &(f32* %348)[i64 7];
    f32 %391 = load f32* %390;
    f32* %392 = getelementptr &(f32* %350)[i64 7];
    f32 %393 = load f32* %392;
    f32 %394 = fmul f32 %391, f32 %393;
    f32 %395 = fadd f32 %389, f32 %394;
    f32* %396 = getelementptr &(f32* %348)[i64 8];
    f32 %397 = load f32* %396;
    f32* %398 = getelementptr &(f32* %350)[i64 8];
    f32 %399 = load f32* %398;
    f32 %400 = fmul f32 %397, f32 %399;
    f32 %401 = fadd f32 %395, f32 %400;
    f32* %402 = getelementptr &(f32* %348)[i64 9];
    f32 %403 = load f32* %402;
    f32* %404 = getelementptr &(f32* %350)[i64 9];
    f32 %405 = load f32* %404;
    f32 %406 = fmul f32 %403, f32 %405;
    f32 %407 = fadd f32 %401, f32 %406;
    f32* %408 = getelementptr &(f32* %348)[i64 10];
    f32 %409 = load f32* %408;
    f32* %410 = getelementptr &(f32* %350)[i64 10];
    f32 %411 = load f32* %410;
    f32 %412 = fmul f32 %409, f32 %411;
    f32 %413 = fadd f32 %407, f32 %412;
    f32* %414 = getelementptr &(f32* %348)[i64 11];
    f32 %415 = load f32* %414;
    f32* %416 = getelementptr &(f32* %350)[i64 11];
    f32 %417 = load f32* %416;
    f32 %418 = fmul f32 %415, f32 %417;
    f32 %419 = fadd f32 %413, f32 %418;
    f32* %420 = getelementptr &(f32* %348)[i64 12];
    f32 %421 = load f32* %420;
    f32* %422 = getelementptr &(f32* %350)[i64 12];
    f32 %423 = load f32* %422;
    f32 %424 = fmul f32 %421, f32 %423;
    f32 %425 = fadd f32 %419, f32 %424;
    f32* %426 = getelementptr &(f32* %348)[i64 13];
    f32 %427 = load f32* %426;
    f32* %428 = getelementptr &(f32* %350)[i64 13];
    f32 %429 = load f32* %428;
    f32 %430 = fmul f32 %427, f32 %429;
    f32 %431 = fadd f32 %425, f32 %430;
    f32* %432 = getelementptr &(f32* %348)[i64 14];
    f32 %433 = load f32* %432;
    f32* %434 = getelementptr &(f32* %350)[i64 14];
    f32 %435 = load f32* %434;
    f32 %436 = fmul f32 %433, f32 %435;
    f32 %437 = fadd f32 %431, f32 %436;
    f32* %438 = getelementptr &(f32* %348)[i64 15];
    f32 %439 = load f32* %438;
    f32* %440 = getelementptr &(f32* %350)[i64 15];
    f32 %441 = load f32* %440;
    f32 %442 = fmul f32 %439, f32 %441;
    f32 %443 = fadd f32 %437, f32 %442;
    i32 %444 = add i32 %347, i32 16;
    i1 %445 = icmp slt i32 %444, i32 99984;
    cbr i1 %445(prob = 1), ^while.body11, ^while.body13;
  ^while.body12:
    f32 %446 = phi [^prebody3, f32 %151] [^while.body12, f32 %488];
    i32 %447 = phi [^prebody3, i32 %152] [^while.body12, i32 %482];
    i32 %448 = add i32 %153, i32 %447;
    i32 %449 = add i32 %219, i32 %447;
    i32 %450 = mul i32 %448, i32 %449;
    i32 %451 = sdiv i32 %450, i32 2;
    i32 %452 = add i32 %447, i32 1;
    i32 %453 = add i32 %451, i32 %452;
    f32 %454 = s2f i32 %453 to f32;
    f32* %455 = getelementptr &(f32* %104)[i32 %447];
    f32 %456 = load f32* %455;
    f32 %457 = fdiv f32 %456, f32 %454;
    f32 %458 = fadd f32 %446, f32 %457;
    i32 %459 = add i32 %288, i32 %447;
    i32 %460 = mul i32 %449, i32 %459;
    i32 %461 = sdiv i32 %460, i32 2;
    i32 %462 = add i32 %447, i32 2;
    i32 %463 = add i32 %461, i32 %462;
    f32 %464 = s2f i32 %463 to f32;
    f32* %465 = getelementptr &(f32* %455)[i64 1];
    f32 %466 = load f32* %465;
    f32 %467 = fdiv f32 %466, f32 %464;
    f32 %468 = fadd f32 %458, f32 %467;
    i32 %469 = add i32 %289, i32 %447;
    i32 %470 = mul i32 %459, i32 %469;
    i32 %471 = sdiv i32 %470, i32 2;
    i32 %472 = add i32 %447, i32 3;
    i32 %473 = add i32 %471, i32 %472;
    f32 %474 = s2f i32 %473 to f32;
    f32* %475 = getelementptr &(f32* %455)[i64 2];
    f32 %476 = load f32* %475;
    f32 %477 = fdiv f32 %476, f32 %474;
    f32 %478 = fadd f32 %468, f32 %477;
    i32 %479 = add i32 %290, i32 %447;
    i32 %480 = mul i32 %469, i32 %479;
    i32 %481 = sdiv i32 %480, i32 2;
    i32 %482 = add i32 %447, i32 4;
    i32 %483 = add i32 %481, i32 %482;
    f32 %484 = s2f i32 %483 to f32;
    f32* %485 = getelementptr &(f32* %455)[i64 3];
    f32 %486 = load f32* %485;
    f32 %487 = fdiv f32 %486, f32 %484;
    f32 %488 = fadd f32 %478, f32 %487;
    i1 %489 = icmp slt i32 %482, i32 99996;
    cbr i1 %489(prob = 0.89), ^while.body12, ^while.body10;
  ^while.body13:
    f32* %490 = getelementptr &(f32* %100)[i32 %444];
    f32 %491 = load f32* %490;
    f32* %492 = getelementptr &(f32* %102)[i32 %444];
    f32 %493 = load f32* %492;
    f32 %494 = fmul f32 %491, f32 %493;
    f32 %495 = fadd f32 %443, f32 %494;
    f32* %496 = getelementptr &(f32* %490)[i64 1];
    f32 %497 = load f32* %496;
    f32* %498 = getelementptr &(f32* %492)[i64 1];
    f32 %499 = load f32* %498;
    f32 %500 = fmul f32 %497, f32 %499;
    f32 %501 = fadd f32 %495, f32 %500;
    f32* %502 = getelementptr &(f32* %490)[i64 2];
    f32 %503 = load f32* %502;
    f32* %504 = getelementptr &(f32* %492)[i64 2];
    f32 %505 = load f32* %504;
    f32 %506 = fmul f32 %503, f32 %505;
    f32 %507 = fadd f32 %501, f32 %506;
    f32* %508 = getelementptr &(f32* %490)[i64 3];
    f32 %509 = load f32* %508;
    f32* %510 = getelementptr &(f32* %492)[i64 3];
    f32 %511 = load f32* %510;
    f32 %512 = fmul f32 %509, f32 %511;
    f32 %513 = fadd f32 %507, f32 %512;
    f32* %514 = getelementptr &(f32* %490)[i64 4];
    f32 %515 = load f32* %514;
    f32* %516 = getelementptr &(f32* %492)[i64 4];
    f32 %517 = load f32* %516;
    f32 %518 = fmul f32 %515, f32 %517;
    f32 %519 = fadd f32 %513, f32 %518;
    f32* %520 = getelementptr &(f32* %490)[i64 5];
    f32 %521 = load f32* %520;
    f32* %522 = getelementptr &(f32* %492)[i64 5];
    f32 %523 = load f32* %522;
    f32 %524 = fmul f32 %521, f32 %523;
    f32 %525 = fadd f32 %519, f32 %524;
    f32* %526 = getelementptr &(f32* %490)[i64 6];
    f32 %527 = load f32* %526;
    f32* %528 = getelementptr &(f32* %492)[i64 6];
    f32 %529 = load f32* %528;
    f32 %530 = fmul f32 %527, f32 %529;
    f32 %531 = fadd f32 %525, f32 %530;
    f32* %532 = getelementptr &(f32* %490)[i64 7];
    f32 %533 = load f32* %532;
    f32* %534 = getelementptr &(f32* %492)[i64 7];
    f32 %535 = load f32* %534;
    f32 %536 = fmul f32 %533, f32 %535;
    f32 %537 = fadd f32 %531, f32 %536;
    f32* %538 = getelementptr &(f32* %490)[i64 8];
    f32 %539 = load f32* %538;
    f32* %540 = getelementptr &(f32* %492)[i64 8];
    f32 %541 = load f32* %540;
    f32 %542 = fmul f32 %539, f32 %541;
    f32 %543 = fadd f32 %537, f32 %542;
    f32* %544 = getelementptr &(f32* %490)[i64 9];
    f32 %545 = load f32* %544;
    f32* %546 = getelementptr &(f32* %492)[i64 9];
    f32 %547 = load f32* %546;
    f32 %548 = fmul f32 %545, f32 %547;
    f32 %549 = fadd f32 %543, f32 %548;
    f32* %550 = getelementptr &(f32* %490)[i64 10];
    f32 %551 = load f32* %550;
    f32* %552 = getelementptr &(f32* %492)[i64 10];
    f32 %553 = load f32* %552;
    f32 %554 = fmul f32 %551, f32 %553;
    f32 %555 = fadd f32 %549, f32 %554;
    f32* %556 = getelementptr &(f32* %490)[i64 11];
    f32 %557 = load f32* %556;
    f32* %558 = getelementptr &(f32* %492)[i64 11];
    f32 %559 = load f32* %558;
    f32 %560 = fmul f32 %557, f32 %559;
    f32 %561 = fadd f32 %555, f32 %560;
    i32 %562 = add i32 %347, i32 28;
    ubr ^while.body14;
  ^while.body14 {scalar}:
    i32 %563 = phi [^while.body13, i32 %562] [^while.body14, i32 %571];
    f32 %564 = phi [^while.body13, f32 %561] [^while.body14, f32 %570];
    f32* %565 = getelementptr &(f32* %100)[i32 %563];
    f32 %566 = load f32* %565;
    f32* %567 = getelementptr &(f32* %102)[i32 %563];
    f32 %568 = load f32* %567;
    f32 %569 = fmul f32 %566, f32 %568;
    f32 %570 = fadd f32 %564, f32 %569;
    i32 %571 = add i32 %563, i32 1;
    i1 %572 = icmp slt i32 %571, i32 100000;
    cbr i1 %572(prob = 0.75), ^while.body14, ^while.body15;
  ^while.body15:
    f32 %573 = phi [^while.body14, f32 0] [^while.body15, f32 %638];
    i32 %574 = phi [^while.body14, i32 0] [^while.body15, i32 %639];
    f32* %575 = getelementptr &(f32* %102)[i32 %574];
    f32 %576 = load f32* %575;
    f32 %577 = fmul f32 %576, f32 %576;
    f32 %578 = fadd f32 %573, f32 %577;
    f32* %579 = getelementptr &(f32* %575)[i64 1];
    f32 %580 = load f32* %579;
    f32 %581 = fmul f32 %580, f32 %580;
    f32 %582 = fadd f32 %578, f32 %581;
    f32* %583 = getelementptr &(f32* %575)[i64 2];
    f32 %584 = load f32* %583;
    f32 %585 = fmul f32 %584, f32 %584;
    f32 %586 = fadd f32 %582, f32 %585;
    f32* %587 = getelementptr &(f32* %575)[i64 3];
    f32 %588 = load f32* %587;
    f32 %589 = fmul f32 %588, f32 %588;
    f32 %590 = fadd f32 %586, f32 %589;
    f32* %591 = getelementptr &(f32* %575)[i64 4];
    f32 %592 = load f32* %591;
    f32 %593 = fmul f32 %592, f32 %592;
    f32 %594 = fadd f32 %590, f32 %593;
    f32* %595 = getelementptr &(f32* %575)[i64 5];
    f32 %596 = load f32* %595;
    f32 %597 = fmul f32 %596, f32 %596;
    f32 %598 = fadd f32 %594, f32 %597;
    f32* %599 = getelementptr &(f32* %575)[i64 6];
    f32 %600 = load f32* %599;
    f32 %601 = fmul f32 %600, f32 %600;
    f32 %602 = fadd f32 %598, f32 %601;
    f32* %603 = getelementptr &(f32* %575)[i64 7];
    f32 %604 = load f32* %603;
    f32 %605 = fmul f32 %604, f32 %604;
    f32 %606 = fadd f32 %602, f32 %605;
    f32* %607 = getelementptr &(f32* %575)[i64 8];
    f32 %608 = load f32* %607;
    f32 %609 = fmul f32 %608, f32 %608;
    f32 %610 = fadd f32 %606, f32 %609;
    f32* %611 = getelementptr &(f32* %575)[i64 9];
    f32 %612 = load f32* %611;
    f32 %613 = fmul f32 %612, f32 %612;
    f32 %614 = fadd f32 %610, f32 %613;
    f32* %615 = getelementptr &(f32* %575)[i64 10];
    f32 %616 = load f32* %615;
    f32 %617 = fmul f32 %616, f32 %616;
    f32 %618 = fadd f32 %614, f32 %617;
    f32* %619 = getelementptr &(f32* %575)[i64 11];
    f32 %620 = load f32* %619;
    f32 %621 = fmul f32 %620, f32 %620;
    f32 %622 = fadd f32 %618, f32 %621;
    f32* %623 = getelementptr &(f32* %575)[i64 12];
    f32 %624 = load f32* %623;
    f32 %625 = fmul f32 %624, f32 %624;
    f32 %626 = fadd f32 %622, f32 %625;
    f32* %627 = getelementptr &(f32* %575)[i64 13];
    f32 %628 = load f32* %627;
    f32 %629 = fmul f32 %628, f32 %628;
    f32 %630 = fadd f32 %626, f32 %629;
    f32* %631 = getelementptr &(f32* %575)[i64 14];
    f32 %632 = load f32* %631;
    f32 %633 = fmul f32 %632, f32 %632;
    f32 %634 = fadd f32 %630, f32 %633;
    f32* %635 = getelementptr &(f32* %575)[i64 15];
    f32 %636 = load f32* %635;
    f32 %637 = fmul f32 %636, f32 %636;
    f32 %638 = fadd f32 %634, f32 %637;
    i32 %639 = add i32 %574, i32 16;
    i1 %640 = icmp slt i32 %639, i32 99984;
    cbr i1 %640(prob = 1), ^while.body15, ^while.body16;
  ^while.body16:
    f32* %641 = getelementptr &(f32* %102)[i32 %639];
    f32 %642 = load f32* %641;
    f32 %643 = fmul f32 %642, f32 %642;
    f32 %644 = fadd f32 %638, f32 %643;
    f32* %645 = getelementptr &(f32* %641)[i64 1];
    f32 %646 = load f32* %645;
    f32 %647 = fmul f32 %646, f32 %646;
    f32 %648 = fadd f32 %644, f32 %647;
    f32* %649 = getelementptr &(f32* %641)[i64 2];
    f32 %650 = load f32* %649;
    f32 %651 = fmul f32 %650, f32 %650;
    f32 %652 = fadd f32 %648, f32 %651;
    f32* %653 = getelementptr &(f32* %641)[i64 3];
    f32 %654 = load f32* %653;
    f32 %655 = fmul f32 %654, f32 %654;
    f32 %656 = fadd f32 %652, f32 %655;
    f32* %657 = getelementptr &(f32* %641)[i64 4];
    f32 %658 = load f32* %657;
    f32 %659 = fmul f32 %658, f32 %658;
    f32 %660 = fadd f32 %656, f32 %659;
    f32* %661 = getelementptr &(f32* %641)[i64 5];
    f32 %662 = load f32* %661;
    f32 %663 = fmul f32 %662, f32 %662;
    f32 %664 = fadd f32 %660, f32 %663;
    f32* %665 = getelementptr &(f32* %641)[i64 6];
    f32 %666 = load f32* %665;
    f32 %667 = fmul f32 %666, f32 %666;
    f32 %668 = fadd f32 %664, f32 %667;
    f32* %669 = getelementptr &(f32* %641)[i64 7];
    f32 %670 = load f32* %669;
    f32 %671 = fmul f32 %670, f32 %670;
    f32 %672 = fadd f32 %668, f32 %671;
    f32* %673 = getelementptr &(f32* %641)[i64 8];
    f32 %674 = load f32* %673;
    f32 %675 = fmul f32 %674, f32 %674;
    f32 %676 = fadd f32 %672, f32 %675;
    f32* %677 = getelementptr &(f32* %641)[i64 9];
    f32 %678 = load f32* %677;
    f32 %679 = fmul f32 %678, f32 %678;
    f32 %680 = fadd f32 %676, f32 %679;
    f32* %681 = getelementptr &(f32* %641)[i64 10];
    f32 %682 = load f32* %681;
    f32 %683 = fmul f32 %682, f32 %682;
    f32 %684 = fadd f32 %680, f32 %683;
    f32* %685 = getelementptr &(f32* %641)[i64 11];
    f32 %686 = load f32* %685;
    f32 %687 = fmul f32 %686, f32 %686;
    f32 %688 = fadd f32 %684, f32 %687;
    i32 %689 = add i32 %574, i32 28;
    ubr ^while.body17;
  ^while.body17 {scalar}:
    i32 %690 = phi [^while.body16, i32 %689] [^while.body17, i32 %696];
    f32 %691 = phi [^while.body16, f32 %688] [^while.body17, f32 %695];
    f32* %692 = getelementptr &(f32* %102)[i32 %690];
    f32 %693 = load f32* %692;
    f32 %694 = fmul f32 %693, f32 %693;
    f32 %695 = fadd f32 %691, f32 %694;
    i32 %696 = add i32 %690, i32 1;
    i1 %697 = icmp slt i32 %696, i32 100000;
    cbr i1 %697(prob = 0.75), ^while.body17, ^b5;
  ^b5:
    f32 %698 = fdiv f32 %570, f32 %695;
    f32 %699 = fsub f32 1, f32 %698;
    i1 %700 = fcmp ogt f32 %699, f32 1e-06;
    i1 %701 = fcmp olt f32 %699, f32 -1e-06;
    i1 %702 = or i1 %700, i1 %701;
    cbr i1 %702(prob = 0.98), ^while.body18, ^b6;
  ^while.body18:
    f32 %703 = phi [^b5, f32 %698] [^while.body18, f32 %707];
    f32 %704 = phi [^b5, f32 1] [^while.body18, f32 %706];
    f32 %705 = fadd f32 %704, f32 %703;
    f32 %706 = fmul f32 %705, f32 0.5;
    f32 %707 = fdiv f32 %698, f32 %706;
    f32 %708 = fsub f32 %706, f32 %707;
    i1 %709 = fcmp ogt f32 %708, f32 1e-06;
    i1 %710 = fcmp olt f32 %708, f32 -1e-06;
    i1 %711 = or i1 %709, i1 %710;
    cbr i1 %711(prob = 0.98), ^while.body18, ^b6;
  ^b6:
    f32 %712 = phi [^b5, f32 1] [^while.body18, f32 %706];
    f32 %713 = fsub f32 %712, f32 1;
    i1 %714 = fcmp ole f32 %713, f32 1e-06;
    i1 %715 = fcmp oge f32 %713, f32 -1e-06;
    i1 %716 = and i1 %714, i1 %715;
    i32 %717 = zext i1 %716 to i32;
    call (i32) -> void @putint(i32 %717);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
