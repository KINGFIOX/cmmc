internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %18];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    i32 %18 = add i32 %1, i32 16;
    i1 %19 = icmp slt i32 %18, i32 100000;
    cbr i1 %19(prob = 1), ^while.body, ^prebody;
  ^prebody:
    f32* %20 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %21 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %22 = getelementptr &([100000 * f32]* %21)[i64 0][i64 0];
    [100000 * f32]* %23 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %24 = getelementptr &([100000 * f32]* %23)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^prebody, i32 0] [^while.body6, i32 %190];
    ubr ^while.header;
  ^while.header:
    f32 %26 = phi [^while.body1, f32 0] [^b, f32 %39];
    i32 %27 = phi [^while.body1, i32 0] [^b, i32 %38];
    i32 %28 = phi [^while.body1, i32 0] [^b, i32 %32];
    i1 %29 = icmp slt i32 %28, i32 100000;
    cbr i1 %29(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %30 = add i32 %28, i32 3;
    i32 %31 = add i32 %28, i32 2;
    i32 %32 = add i32 %28, i32 1;
    i1 %33 = icmp slt i32 %27, i32 100000;
    cbr i1 %33(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %34 = phi [^while.header, f32 0] [^b1, f32 %94];
    i32 %35 = phi [^while.header, i32 0] [^b1, i32 %93];
    i32 %36 = phi [^while.header, i32 0] [^b1, i32 %45];
    i1 %37 = icmp slt i32 %36, i32 100000;
    cbr i1 %37(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %38 = phi [^while.header1, i32 %27] [^while.body3, i32 100000];
    f32 %39 = phi [^while.header1, f32 %26] [^while.body3, f32 %107];
    f32* %40 = getelementptr &(f32* %24)[i32 %28];
    store f32* %40 with f32 %39;
    ubr ^while.header;
  ^super.header:
    i32 %41 = phi [^while.header1, i32 %27] [^while.body2, i32 %43];
    f32 %42 = phi [^while.header1, f32 %26] [^while.body2, f32 %92];
    i32 %43 = add i32 %41, i32 4;
    i1 %44 = icmp slt i32 %43, i32 100000;
    cbr i1 %44(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i32 %45 = add i32 %36, i32 1;
    i1 %46 = icmp slt i32 %35, i32 100000;
    cbr i1 %46(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %47 = phi [^while.header2, f32 0] [^b2, f32 %168];
    i32 %48 = phi [^while.header2, i32 0] [^b2, i32 %167];
    i32 %49 = phi [^while.header2, i32 0] [^b2, i32 %116];
    i1 %50 = icmp slt i32 %49, i32 100000;
    cbr i1 %50(prob = 0.97), ^while.header5, ^while.header6;
  ^while.body2:
    i32 %51 = add i32 %28, i32 %41;
    i32 %52 = add i32 %32, i32 %41;
    i32 %53 = mul i32 %51, i32 %52;
    i32 %54 = sdiv i32 %53, i32 2;
    i32 %55 = add i32 %32, i32 %54;
    f32 %56 = s2f i32 %55 to f32;
    f32* %57 = getelementptr &(f32* %20)[i32 %41];
    f32 %58 = load f32* %57;
    f32 %59 = fdiv f32 %58, f32 %56;
    f32 %60 = fadd f32 %42, f32 %59;
    i32 %61 = add i32 %41, i32 1;
    i32 %62 = add i32 %32, i32 %61;
    i32 %63 = mul i32 %52, i32 %62;
    i32 %64 = sdiv i32 %63, i32 2;
    i32 %65 = add i32 %32, i32 %64;
    f32 %66 = s2f i32 %65 to f32;
    f32* %67 = getelementptr &(f32* %57)[i64 1];
    f32 %68 = load f32* %67;
    f32 %69 = fdiv f32 %68, f32 %66;
    f32 %70 = fadd f32 %60, f32 %69;
    i32 %71 = add i32 %41, i32 2;
    i32 %72 = add i32 %32, i32 %71;
    i32 %73 = add i32 %31, i32 %41;
    i32 %74 = mul i32 %72, i32 %73;
    i32 %75 = sdiv i32 %74, i32 2;
    i32 %76 = add i32 %32, i32 %75;
    f32 %77 = s2f i32 %76 to f32;
    f32* %78 = getelementptr &(f32* %57)[i64 2];
    f32 %79 = load f32* %78;
    f32 %80 = fdiv f32 %79, f32 %77;
    f32 %81 = fadd f32 %70, f32 %80;
    i32 %82 = add i32 %41, i32 3;
    i32 %83 = add i32 %32, i32 %82;
    i32 %84 = add i32 %30, i32 %41;
    i32 %85 = mul i32 %83, i32 %84;
    i32 %86 = sdiv i32 %85, i32 2;
    i32 %87 = add i32 %32, i32 %86;
    f32 %88 = s2f i32 %87 to f32;
    f32* %89 = getelementptr &(f32* %57)[i64 3];
    f32 %90 = load f32* %89;
    f32 %91 = fdiv f32 %90, f32 %88;
    f32 %92 = fadd f32 %81, f32 %91;
    ubr ^super.header;
  ^b1:
    i32 %93 = phi [^while.header3, i32 %35] [^while.body5, i32 100000];
    f32 %94 = phi [^while.header3, f32 %34] [^while.body5, f32 %182];
    f32* %95 = getelementptr &(f32* %22)[i32 %36];
    store f32* %95 with f32 %94;
    ubr ^while.header2;
  ^while.body3:
    i32 %96 = phi [^super.header, i32 %41] [^while.body3, i32 %108];
    f32 %97 = phi [^super.header, f32 %42] [^while.body3, f32 %107];
    i32 %98 = add i32 %28, i32 %96;
    i32 %99 = add i32 %32, i32 %96;
    i32 %100 = mul i32 %98, i32 %99;
    i32 %101 = sdiv i32 %100, i32 2;
    i32 %102 = add i32 %32, i32 %101;
    f32 %103 = s2f i32 %102 to f32;
    f32* %104 = getelementptr &(f32* %20)[i32 %96];
    f32 %105 = load f32* %104;
    f32 %106 = fdiv f32 %105, f32 %103;
    f32 %107 = fadd f32 %97, f32 %106;
    i32 %108 = add i32 %96, i32 1;
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %110 = add i32 %35, i32 4;
    i1 %111 = icmp slt i32 %110, i32 100000;
    i32 %112 = add i32 %36, i32 2;
    i32 %113 = add i32 %36, i32 3;
    cbr i1 %111(prob = 0.89), ^while.body4, ^while.body5;
  ^while.header5:
    i32 %114 = add i32 %49, i32 3;
    i32 %115 = add i32 %49, i32 2;
    i32 %116 = add i32 %49, i32 1;
    i1 %117 = icmp slt i32 %48, i32 100000;
    cbr i1 %117(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %118 = phi [^while.header4, f32 0] [^b3, f32 %235];
    i32 %119 = phi [^while.header4, i32 0] [^b3, i32 %234];
    i32 %120 = phi [^while.header4, i32 0] [^b3, i32 %188];
    i1 %121 = icmp slt i32 %120, i32 100000;
    cbr i1 %121(prob = 0.97), ^while.header7, ^while.body6;
  ^while.body4:
    i32 %122 = phi [^super.header1, i32 %110] [^while.body4, i32 %165];
    f32 %123 = phi [^super.header1, f32 %34] [^while.body4, f32 %164];
    i32 %124 = phi [^super.header1, i32 %35] [^while.body4, i32 %122];
    i32 %125 = add i32 %36, i32 %124;
    i32 %126 = add i32 %45, i32 %124;
    i32 %127 = mul i32 %125, i32 %126;
    i32 %128 = sdiv i32 %127, i32 2;
    i32 %129 = add i32 %124, i32 1;
    i32 %130 = add i32 %128, i32 %129;
    f32 %131 = s2f i32 %130 to f32;
    f32* %132 = getelementptr &(f32* %24)[i32 %124];
    f32 %133 = load f32* %132;
    f32 %134 = fdiv f32 %133, f32 %131;
    f32 %135 = fadd f32 %123, f32 %134;
    i32 %136 = add i32 %112, i32 %124;
    i32 %137 = mul i32 %126, i32 %136;
    i32 %138 = sdiv i32 %137, i32 2;
    i32 %139 = add i32 %124, i32 2;
    i32 %140 = add i32 %138, i32 %139;
    f32 %141 = s2f i32 %140 to f32;
    f32* %142 = getelementptr &(f32* %132)[i64 1];
    f32 %143 = load f32* %142;
    f32 %144 = fdiv f32 %143, f32 %141;
    f32 %145 = fadd f32 %135, f32 %144;
    i32 %146 = add i32 %113, i32 %124;
    i32 %147 = mul i32 %136, i32 %146;
    i32 %148 = sdiv i32 %147, i32 2;
    i32 %149 = add i32 %124, i32 3;
    i32 %150 = add i32 %148, i32 %149;
    f32 %151 = s2f i32 %150 to f32;
    f32* %152 = getelementptr &(f32* %132)[i64 2];
    f32 %153 = load f32* %152;
    f32 %154 = fdiv f32 %153, f32 %151;
    f32 %155 = fadd f32 %145, f32 %154;
    i32 %156 = add i32 %36, i32 %122;
    i32 %157 = mul i32 %146, i32 %156;
    i32 %158 = sdiv i32 %157, i32 2;
    i32 %159 = add i32 %122, i32 %158;
    f32 %160 = s2f i32 %159 to f32;
    f32* %161 = getelementptr &(f32* %132)[i64 3];
    f32 %162 = load f32* %161;
    f32 %163 = fdiv f32 %162, f32 %160;
    f32 %164 = fadd f32 %155, f32 %163;
    i32 %165 = add i32 %122, i32 4;
    i1 %166 = icmp slt i32 %165, i32 100000;
    cbr i1 %166(prob = 0.89), ^while.body4, ^while.body5;
  ^b2:
    i32 %167 = phi [^while.header5, i32 %48] [^while.body8, i32 100000];
    f32 %168 = phi [^while.header5, f32 %47] [^while.body8, f32 %248];
    f32* %169 = getelementptr &(f32* %24)[i32 %49];
    store f32* %169 with f32 %168;
    ubr ^while.header4;
  ^while.body5:
    i32 %170 = phi [^super.header1, i32 %35] [^while.body4, i32 %122] [^while.body5, i32 %176];
    f32 %171 = phi [^super.header1, f32 %34] [^while.body4, f32 %164] [^while.body5, f32 %182];
    i32 %172 = add i32 %36, i32 %170;
    i32 %173 = add i32 %45, i32 %170;
    i32 %174 = mul i32 %172, i32 %173;
    i32 %175 = sdiv i32 %174, i32 2;
    i32 %176 = add i32 %170, i32 1;
    i32 %177 = add i32 %175, i32 %176;
    f32 %178 = s2f i32 %177 to f32;
    f32* %179 = getelementptr &(f32* %24)[i32 %170];
    f32 %180 = load f32* %179;
    f32 %181 = fdiv f32 %180, f32 %178;
    f32 %182 = fadd f32 %171, f32 %181;
    i1 %183 = icmp slt i32 %176, i32 100000;
    cbr i1 %183(prob = 0.75), ^while.body5, ^b1;
  ^super.header2:
    i32 %184 = phi [^while.header5, i32 %48] [^while.body7, i32 %186];
    f32 %185 = phi [^while.header5, f32 %47] [^while.body7, f32 %233];
    i32 %186 = add i32 %184, i32 4;
    i1 %187 = icmp slt i32 %186, i32 100000;
    cbr i1 %187(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header7:
    i32 %188 = add i32 %120, i32 1;
    i1 %189 = icmp slt i32 %119, i32 100000;
    cbr i1 %189(prob = 0.97), ^super.header3, ^b3;
  ^while.body6:
    i32 %190 = add i32 %25, i32 1;
    i1 %191 = icmp slt i32 %190, i32 1000;
    cbr i1 %191(prob = 1), ^while.body1, ^b4;
  ^while.body7:
    i32 %192 = add i32 %49, i32 %184;
    i32 %193 = add i32 %116, i32 %184;
    i32 %194 = mul i32 %192, i32 %193;
    i32 %195 = sdiv i32 %194, i32 2;
    i32 %196 = add i32 %116, i32 %195;
    f32 %197 = s2f i32 %196 to f32;
    f32* %198 = getelementptr &(f32* %22)[i32 %184];
    f32 %199 = load f32* %198;
    f32 %200 = fdiv f32 %199, f32 %197;
    f32 %201 = fadd f32 %185, f32 %200;
    i32 %202 = add i32 %184, i32 1;
    i32 %203 = add i32 %116, i32 %202;
    i32 %204 = mul i32 %193, i32 %203;
    i32 %205 = sdiv i32 %204, i32 2;
    i32 %206 = add i32 %116, i32 %205;
    f32 %207 = s2f i32 %206 to f32;
    f32* %208 = getelementptr &(f32* %198)[i64 1];
    f32 %209 = load f32* %208;
    f32 %210 = fdiv f32 %209, f32 %207;
    f32 %211 = fadd f32 %201, f32 %210;
    i32 %212 = add i32 %184, i32 2;
    i32 %213 = add i32 %116, i32 %212;
    i32 %214 = add i32 %115, i32 %184;
    i32 %215 = mul i32 %213, i32 %214;
    i32 %216 = sdiv i32 %215, i32 2;
    i32 %217 = add i32 %116, i32 %216;
    f32 %218 = s2f i32 %217 to f32;
    f32* %219 = getelementptr &(f32* %198)[i64 2];
    f32 %220 = load f32* %219;
    f32 %221 = fdiv f32 %220, f32 %218;
    f32 %222 = fadd f32 %211, f32 %221;
    i32 %223 = add i32 %184, i32 3;
    i32 %224 = add i32 %116, i32 %223;
    i32 %225 = add i32 %114, i32 %184;
    i32 %226 = mul i32 %224, i32 %225;
    i32 %227 = sdiv i32 %226, i32 2;
    i32 %228 = add i32 %116, i32 %227;
    f32 %229 = s2f i32 %228 to f32;
    f32* %230 = getelementptr &(f32* %198)[i64 3];
    f32 %231 = load f32* %230;
    f32 %232 = fdiv f32 %231, f32 %229;
    f32 %233 = fadd f32 %222, f32 %232;
    ubr ^super.header2;
  ^b3:
    i32 %234 = phi [^while.header7, i32 %119] [^while.body10, i32 100000];
    f32 %235 = phi [^while.header7, f32 %118] [^while.body10, f32 %312];
    f32* %236 = getelementptr &(f32* %20)[i32 %120];
    store f32* %236 with f32 %235;
    ubr ^while.header6;
  ^while.body8:
    i32 %237 = phi [^super.header2, i32 %184] [^while.body8, i32 %249];
    f32 %238 = phi [^super.header2, f32 %185] [^while.body8, f32 %248];
    i32 %239 = add i32 %49, i32 %237;
    i32 %240 = add i32 %116, i32 %237;
    i32 %241 = mul i32 %239, i32 %240;
    i32 %242 = sdiv i32 %241, i32 2;
    i32 %243 = add i32 %116, i32 %242;
    f32 %244 = s2f i32 %243 to f32;
    f32* %245 = getelementptr &(f32* %22)[i32 %237];
    f32 %246 = load f32* %245;
    f32 %247 = fdiv f32 %246, f32 %244;
    f32 %248 = fadd f32 %238, f32 %247;
    i32 %249 = add i32 %237, i32 1;
    i1 %250 = icmp slt i32 %249, i32 100000;
    cbr i1 %250(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %251 = add i32 %119, i32 4;
    i1 %252 = icmp slt i32 %251, i32 100000;
    i32 %253 = add i32 %120, i32 2;
    i32 %254 = add i32 %120, i32 3;
    cbr i1 %252(prob = 0.89), ^while.body9, ^while.body10;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^super.header4;
  ^while.body9:
    i32 %255 = phi [^super.header3, i32 %251] [^while.body9, i32 %298];
    f32 %256 = phi [^super.header3, f32 %118] [^while.body9, f32 %297];
    i32 %257 = phi [^super.header3, i32 %119] [^while.body9, i32 %255];
    i32 %258 = add i32 %120, i32 %257;
    i32 %259 = add i32 %188, i32 %257;
    i32 %260 = mul i32 %258, i32 %259;
    i32 %261 = sdiv i32 %260, i32 2;
    i32 %262 = add i32 %257, i32 1;
    i32 %263 = add i32 %261, i32 %262;
    f32 %264 = s2f i32 %263 to f32;
    f32* %265 = getelementptr &(f32* %24)[i32 %257];
    f32 %266 = load f32* %265;
    f32 %267 = fdiv f32 %266, f32 %264;
    f32 %268 = fadd f32 %256, f32 %267;
    i32 %269 = add i32 %253, i32 %257;
    i32 %270 = mul i32 %259, i32 %269;
    i32 %271 = sdiv i32 %270, i32 2;
    i32 %272 = add i32 %257, i32 2;
    i32 %273 = add i32 %271, i32 %272;
    f32 %274 = s2f i32 %273 to f32;
    f32* %275 = getelementptr &(f32* %265)[i64 1];
    f32 %276 = load f32* %275;
    f32 %277 = fdiv f32 %276, f32 %274;
    f32 %278 = fadd f32 %268, f32 %277;
    i32 %279 = add i32 %254, i32 %257;
    i32 %280 = mul i32 %269, i32 %279;
    i32 %281 = sdiv i32 %280, i32 2;
    i32 %282 = add i32 %257, i32 3;
    i32 %283 = add i32 %281, i32 %282;
    f32 %284 = s2f i32 %283 to f32;
    f32* %285 = getelementptr &(f32* %265)[i64 2];
    f32 %286 = load f32* %285;
    f32 %287 = fdiv f32 %286, f32 %284;
    f32 %288 = fadd f32 %278, f32 %287;
    i32 %289 = add i32 %120, i32 %255;
    i32 %290 = mul i32 %279, i32 %289;
    i32 %291 = sdiv i32 %290, i32 2;
    i32 %292 = add i32 %255, i32 %291;
    f32 %293 = s2f i32 %292 to f32;
    f32* %294 = getelementptr &(f32* %265)[i64 3];
    f32 %295 = load f32* %294;
    f32 %296 = fdiv f32 %295, f32 %293;
    f32 %297 = fadd f32 %288, f32 %296;
    i32 %298 = add i32 %255, i32 4;
    i1 %299 = icmp slt i32 %298, i32 100000;
    cbr i1 %299(prob = 0.89), ^while.body9, ^while.body10;
  ^while.body10:
    i32 %300 = phi [^super.header3, i32 %119] [^while.body9, i32 %255] [^while.body10, i32 %306];
    f32 %301 = phi [^super.header3, f32 %118] [^while.body9, f32 %297] [^while.body10, f32 %312];
    i32 %302 = add i32 %120, i32 %300;
    i32 %303 = add i32 %188, i32 %300;
    i32 %304 = mul i32 %302, i32 %303;
    i32 %305 = sdiv i32 %304, i32 2;
    i32 %306 = add i32 %300, i32 1;
    i32 %307 = add i32 %305, i32 %306;
    f32 %308 = s2f i32 %307 to f32;
    f32* %309 = getelementptr &(f32* %24)[i32 %300];
    f32 %310 = load f32* %309;
    f32 %311 = fdiv f32 %310, f32 %308;
    f32 %312 = fadd f32 %301, f32 %311;
    i1 %313 = icmp slt i32 %306, i32 100000;
    cbr i1 %313(prob = 0.75), ^while.body10, ^b3;
  ^super.header4:
    i32 %314 = phi [^b4, i32 0] [^while.body11, i32 %316];
    f32 %315 = phi [^b4, f32 0] [^while.body11, f32 %341];
    i32 %316 = add i32 %314, i32 4;
    i1 %317 = icmp slt i32 %316, i32 100000;
    cbr i1 %317(prob = 0.89), ^while.body11, ^while.body12;
  ^while.body11:
    f32* %318 = getelementptr &(f32* %20)[i32 %314];
    f32 %319 = load f32* %318;
    f32* %320 = getelementptr &(f32* %22)[i32 %314];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %319, f32 %321;
    f32 %323 = fadd f32 %315, f32 %322;
    f32* %324 = getelementptr &(f32* %318)[i64 1];
    f32 %325 = load f32* %324;
    f32* %326 = getelementptr &(f32* %320)[i64 1];
    f32 %327 = load f32* %326;
    f32 %328 = fmul f32 %325, f32 %327;
    f32 %329 = fadd f32 %323, f32 %328;
    f32* %330 = getelementptr &(f32* %318)[i64 2];
    f32 %331 = load f32* %330;
    f32* %332 = getelementptr &(f32* %320)[i64 2];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 %331, f32 %333;
    f32 %335 = fadd f32 %329, f32 %334;
    f32* %336 = getelementptr &(f32* %318)[i64 3];
    f32 %337 = load f32* %336;
    f32* %338 = getelementptr &(f32* %320)[i64 3];
    f32 %339 = load f32* %338;
    f32 %340 = fmul f32 %337, f32 %339;
    f32 %341 = fadd f32 %335, f32 %340;
    ubr ^super.header4;
  ^while.body12:
    i32 %342 = phi [^super.header4, i32 %314] [^while.body12, i32 %350];
    f32 %343 = phi [^super.header4, f32 %315] [^while.body12, f32 %349];
    f32* %344 = getelementptr &(f32* %20)[i32 %342];
    f32 %345 = load f32* %344;
    f32* %346 = getelementptr &(f32* %22)[i32 %342];
    f32 %347 = load f32* %346;
    f32 %348 = fmul f32 %345, f32 %347;
    f32 %349 = fadd f32 %343, f32 %348;
    i32 %350 = add i32 %342, i32 1;
    i1 %351 = icmp slt i32 %350, i32 100000;
    cbr i1 %351(prob = 0.75), ^while.body12, ^super.header5;
  ^super.header5:
    i32 %352 = phi [^while.body12, i32 0] [^while.body13, i32 %354];
    f32 %353 = phi [^while.body12, f32 0] [^while.body13, f32 %371];
    i32 %354 = add i32 %352, i32 4;
    i1 %355 = icmp slt i32 %354, i32 100000;
    cbr i1 %355(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body13:
    f32* %356 = getelementptr &(f32* %22)[i32 %352];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 %357, f32 %357;
    f32 %359 = fadd f32 %353, f32 %358;
    f32* %360 = getelementptr &(f32* %356)[i64 1];
    f32 %361 = load f32* %360;
    f32 %362 = fmul f32 %361, f32 %361;
    f32 %363 = fadd f32 %359, f32 %362;
    f32* %364 = getelementptr &(f32* %356)[i64 2];
    f32 %365 = load f32* %364;
    f32 %366 = fmul f32 %365, f32 %365;
    f32 %367 = fadd f32 %363, f32 %366;
    f32* %368 = getelementptr &(f32* %356)[i64 3];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %369, f32 %369;
    f32 %371 = fadd f32 %367, f32 %370;
    ubr ^super.header5;
  ^while.body14:
    i32 %372 = phi [^super.header5, i32 %352] [^while.body14, i32 %378];
    f32 %373 = phi [^super.header5, f32 %353] [^while.body14, f32 %377];
    f32* %374 = getelementptr &(f32* %22)[i32 %372];
    f32 %375 = load f32* %374;
    f32 %376 = fmul f32 %375, f32 %375;
    f32 %377 = fadd f32 %373, f32 %376;
    i32 %378 = add i32 %372, i32 1;
    i1 %379 = icmp slt i32 %378, i32 100000;
    cbr i1 %379(prob = 0.75), ^while.body14, ^b5;
  ^b5:
    f32 %380 = fdiv f32 %349, f32 %377;
    f32 %381 = fsub f32 1, f32 %380;
    i1 %382 = fcmp ogt f32 %381, f32 1e-06;
    i1 %383 = fcmp olt f32 %381, f32 -1e-06;
    i1 %384 = or i1 %382, i1 %383;
    cbr i1 %384(prob = 0.98), ^while.body15, ^b6;
  ^while.body15:
    f32 %385 = phi [^b5, f32 %380] [^while.body15, f32 %389];
    f32 %386 = phi [^b5, f32 1] [^while.body15, f32 %388];
    f32 %387 = fadd f32 %386, f32 %385;
    f32 %388 = fmul f32 %387, f32 0.5;
    f32 %389 = fdiv f32 %380, f32 %388;
    f32 %390 = fsub f32 %388, f32 %389;
    i1 %391 = fcmp ogt f32 %390, f32 1e-06;
    i1 %392 = fcmp olt f32 %390, f32 -1e-06;
    i1 %393 = or i1 %391, i1 %392;
    cbr i1 %393(prob = 0.98), ^while.body15, ^b6;
  ^b6:
    f32 %394 = phi [^b5, f32 1] [^while.body15, f32 %388];
    f32 %395 = fsub f32 %394, f32 1;
    i1 %396 = fcmp ole f32 %395, f32 1e-06;
    i1 %397 = fcmp oge f32 %395, f32 -1e-06;
    i1 %398 = and i1 %396, i1 %397;
    i32 %399 = zext i1 %398 to i32;
    call (i32) -> void @putint(i32 %399);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm;
internal [100000 * f32]* @vectorB;
internal [100000 * f32]* @vectorA;
