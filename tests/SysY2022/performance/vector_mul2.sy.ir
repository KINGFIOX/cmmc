internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %18];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    i32 %18 = add i32 %1, i32 16;
    i1 %19 = icmp slt i32 %18, i32 100000;
    cbr i1 %19(prob = 1), ^while.body, ^prebody;
  ^prebody:
    f32* %20 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %21 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %22 = getelementptr &([100000 * f32]* %21)[i64 0][i64 0];
    [100000 * f32]* %23 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %24 = getelementptr &([100000 * f32]* %23)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^prebody, i32 0] [^while.body6, i32 %199];
    ubr ^while.header;
  ^while.header:
    f32 %26 = phi [^while.body1, f32 0] [^b, f32 %39];
    i32 %27 = phi [^while.body1, i32 0] [^b, i32 %38];
    i32 %28 = phi [^while.body1, i32 0] [^b, i32 %32];
    i1 %29 = icmp slt i32 %28, i32 100000;
    cbr i1 %29(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %30 = add i32 %28, i32 3;
    i32 %31 = add i32 %28, i32 2;
    i32 %32 = add i32 %28, i32 1;
    i1 %33 = icmp slt i32 %27, i32 100000;
    cbr i1 %33(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %34 = phi [^while.header, f32 0] [^b1, f32 %96];
    i32 %35 = phi [^while.header, i32 0] [^b1, i32 %95];
    i32 %36 = phi [^while.header, i32 0] [^b1, i32 %48];
    i1 %37 = icmp slt i32 %36, i32 100000;
    cbr i1 %37(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %38 = phi [^while.header1, i32 %27] [^while.body3, i32 %100];
    f32 %39 = phi [^while.header1, f32 %26] [^while.body3, f32 %111];
    f32* %40 = getelementptr &(f32* %24)[i32 %28];
    store f32* %40 with f32 %39;
    ubr ^while.header;
  ^super.header:
    i32 %41 = phi [^while.header1, i32 %27] [^while.body2, i32 %43];
    f32 %42 = phi [^while.header1, f32 %26] [^while.body2, f32 %94];
    i32 %43 = add i32 %41, i32 4;
    i1 %44 = icmp slt i32 %43, i32 100000;
    cbr i1 %44(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i32 %45 = add i32 %36, i32 4;
    i32 %46 = add i32 %36, i32 3;
    i32 %47 = add i32 %36, i32 2;
    i32 %48 = add i32 %36, i32 1;
    i1 %49 = icmp slt i32 %35, i32 100000;
    cbr i1 %49(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %50 = phi [^while.header2, f32 0] [^b2, f32 %173];
    i32 %51 = phi [^while.header2, i32 0] [^b2, i32 %172];
    i32 %52 = phi [^while.header2, i32 0] [^b2, i32 %119];
    i1 %53 = icmp slt i32 %52, i32 100000;
    cbr i1 %53(prob = 0.97), ^while.header5, ^while.header6;
  ^while.body2:
    i32 %54 = add i32 %28, i32 %41;
    i32 %55 = add i32 %32, i32 %41;
    i32 %56 = mul i32 %54, i32 %55;
    i32 %57 = sdiv i32 %56, i32 2;
    i32 %58 = add i32 %57, i32 1;
    i32 %59 = add i32 %28, i32 %58;
    f32 %60 = s2f i32 %59 to f32;
    f32* %61 = getelementptr &(f32* %20)[i32 %41];
    f32 %62 = load f32* %61;
    f32 %63 = fdiv f32 %62, f32 %60;
    f32 %64 = fadd f32 %42, f32 %63;
    i32 %65 = add i32 %31, i32 %41;
    i32 %66 = mul i32 %55, i32 %65;
    i32 %67 = sdiv i32 %66, i32 2;
    i32 %68 = add i32 %67, i32 1;
    i32 %69 = add i32 %28, i32 %68;
    f32 %70 = s2f i32 %69 to f32;
    f32* %71 = getelementptr &(f32* %61)[i64 1];
    f32 %72 = load f32* %71;
    f32 %73 = fdiv f32 %72, f32 %70;
    f32 %74 = fadd f32 %64, f32 %73;
    i32 %75 = add i32 %30, i32 %41;
    i32 %76 = mul i32 %65, i32 %75;
    i32 %77 = sdiv i32 %76, i32 2;
    i32 %78 = add i32 %77, i32 1;
    i32 %79 = add i32 %28, i32 %78;
    f32 %80 = s2f i32 %79 to f32;
    f32* %81 = getelementptr &(f32* %61)[i64 2];
    f32 %82 = load f32* %81;
    f32 %83 = fdiv f32 %82, f32 %80;
    f32 %84 = fadd f32 %74, f32 %83;
    i32 %85 = add i32 %28, i32 %43;
    i32 %86 = mul i32 %75, i32 %85;
    i32 %87 = sdiv i32 %86, i32 2;
    i32 %88 = add i32 %87, i32 1;
    i32 %89 = add i32 %28, i32 %88;
    f32 %90 = s2f i32 %89 to f32;
    f32* %91 = getelementptr &(f32* %61)[i64 3];
    f32 %92 = load f32* %91;
    f32 %93 = fdiv f32 %92, f32 %90;
    f32 %94 = fadd f32 %84, f32 %93;
    ubr ^super.header;
  ^b1:
    i32 %95 = phi [^while.header3, i32 %35] [^while.body5, i32 %188];
    f32 %96 = phi [^while.header3, f32 %34] [^while.body5, f32 %187];
    f32* %97 = getelementptr &(f32* %22)[i32 %36];
    store f32* %97 with f32 %96;
    ubr ^while.header2;
  ^while.body3:
    i32 %98 = phi [^super.header, i32 %41] [^while.body3, i32 %100];
    f32 %99 = phi [^super.header, f32 %42] [^while.body3, f32 %111];
    i32 %100 = add i32 %98, i32 1;
    i32 %101 = add i32 %28, i32 %100;
    i32 %102 = add i32 %28, i32 %98;
    i32 %103 = mul i32 %101, i32 %102;
    i32 %104 = sdiv i32 %103, i32 2;
    i32 %105 = add i32 %104, i32 1;
    i32 %106 = add i32 %28, i32 %105;
    f32 %107 = s2f i32 %106 to f32;
    f32* %108 = getelementptr &(f32* %20)[i32 %98];
    f32 %109 = load f32* %108;
    f32 %110 = fdiv f32 %109, f32 %107;
    f32 %111 = fadd f32 %99, f32 %110;
    i1 %112 = icmp slt i32 %100, i32 100000;
    cbr i1 %112(prob = 0.75), ^while.body3, ^b;
  ^super.header1:
    i32 %113 = phi [^while.header3, i32 %35] [^while.body4, i32 %115];
    f32 %114 = phi [^while.header3, f32 %34] [^while.body4, f32 %171];
    i32 %115 = add i32 %113, i32 4;
    i1 %116 = icmp slt i32 %115, i32 100000;
    cbr i1 %116(prob = 0.89), ^while.body4, ^while.body5;
  ^while.header5:
    i32 %117 = add i32 %52, i32 3;
    i32 %118 = add i32 %52, i32 2;
    i32 %119 = add i32 %52, i32 1;
    i1 %120 = icmp slt i32 %51, i32 100000;
    cbr i1 %120(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %121 = phi [^while.header4, f32 0] [^b3, f32 %243];
    i32 %122 = phi [^while.header4, i32 0] [^b3, i32 %242];
    i32 %123 = phi [^while.header4, i32 0] [^b3, i32 %197];
    i1 %124 = icmp slt i32 %123, i32 100000;
    cbr i1 %124(prob = 0.97), ^while.header7, ^while.body6;
  ^while.body4:
    i32 %125 = add i32 %36, i32 %113;
    i32 %126 = add i32 %48, i32 %113;
    i32 %127 = mul i32 %125, i32 %126;
    i32 %128 = sdiv i32 %127, i32 2;
    i32 %129 = add i32 %128, i32 1;
    i32 %130 = add i32 %113, i32 %129;
    f32 %131 = s2f i32 %130 to f32;
    f32* %132 = getelementptr &(f32* %24)[i32 %113];
    f32 %133 = load f32* %132;
    f32 %134 = fdiv f32 %133, f32 %131;
    f32 %135 = fadd f32 %114, f32 %134;
    i32 %136 = add i32 %113, i32 1;
    i32 %137 = add i32 %36, i32 %136;
    i32 %138 = add i32 %47, i32 %113;
    i32 %139 = mul i32 %137, i32 %138;
    i32 %140 = sdiv i32 %139, i32 2;
    i32 %141 = add i32 %140, i32 2;
    i32 %142 = add i32 %113, i32 %141;
    f32 %143 = s2f i32 %142 to f32;
    f32* %144 = getelementptr &(f32* %132)[i64 1];
    f32 %145 = load f32* %144;
    f32 %146 = fdiv f32 %145, f32 %143;
    f32 %147 = fadd f32 %135, f32 %146;
    i32 %148 = add i32 %113, i32 2;
    i32 %149 = add i32 %36, i32 %148;
    i32 %150 = add i32 %46, i32 %113;
    i32 %151 = mul i32 %149, i32 %150;
    i32 %152 = sdiv i32 %151, i32 2;
    i32 %153 = add i32 %152, i32 2;
    i32 %154 = add i32 %136, i32 %153;
    f32 %155 = s2f i32 %154 to f32;
    f32* %156 = getelementptr &(f32* %132)[i64 2];
    f32 %157 = load f32* %156;
    f32 %158 = fdiv f32 %157, f32 %155;
    f32 %159 = fadd f32 %147, f32 %158;
    i32 %160 = add i32 %113, i32 3;
    i32 %161 = add i32 %36, i32 %160;
    i32 %162 = add i32 %45, i32 %113;
    i32 %163 = mul i32 %161, i32 %162;
    i32 %164 = sdiv i32 %163, i32 2;
    i32 %165 = add i32 %164, i32 3;
    i32 %166 = add i32 %136, i32 %165;
    f32 %167 = s2f i32 %166 to f32;
    f32* %168 = getelementptr &(f32* %132)[i64 3];
    f32 %169 = load f32* %168;
    f32 %170 = fdiv f32 %169, f32 %167;
    f32 %171 = fadd f32 %159, f32 %170;
    ubr ^super.header1;
  ^b2:
    i32 %172 = phi [^while.header5, i32 %51] [^while.body8, i32 %247];
    f32 %173 = phi [^while.header5, f32 %50] [^while.body8, f32 %258];
    f32* %174 = getelementptr &(f32* %24)[i32 %52];
    store f32* %174 with f32 %173;
    ubr ^while.header4;
  ^while.body5:
    i32 %175 = phi [^super.header1, i32 %113] [^while.body5, i32 %188];
    f32 %176 = phi [^super.header1, f32 %114] [^while.body5, f32 %187];
    i32 %177 = add i32 %36, i32 %175;
    i32 %178 = add i32 %48, i32 %175;
    i32 %179 = mul i32 %177, i32 %178;
    i32 %180 = sdiv i32 %179, i32 2;
    i32 %181 = add i32 %180, i32 1;
    i32 %182 = add i32 %175, i32 %181;
    f32 %183 = s2f i32 %182 to f32;
    f32* %184 = getelementptr &(f32* %24)[i32 %175];
    f32 %185 = load f32* %184;
    f32 %186 = fdiv f32 %185, f32 %183;
    f32 %187 = fadd f32 %176, f32 %186;
    i32 %188 = add i32 %175, i32 1;
    i1 %189 = icmp slt i32 %188, i32 100000;
    cbr i1 %189(prob = 0.75), ^while.body5, ^b1;
  ^super.header2:
    i32 %190 = phi [^while.header5, i32 %51] [^while.body7, i32 %192];
    f32 %191 = phi [^while.header5, f32 %50] [^while.body7, f32 %241];
    i32 %192 = add i32 %190, i32 4;
    i1 %193 = icmp slt i32 %192, i32 100000;
    cbr i1 %193(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header7:
    i32 %194 = add i32 %123, i32 4;
    i32 %195 = add i32 %123, i32 3;
    i32 %196 = add i32 %123, i32 2;
    i32 %197 = add i32 %123, i32 1;
    i1 %198 = icmp slt i32 %122, i32 100000;
    cbr i1 %198(prob = 0.97), ^super.header3, ^b3;
  ^while.body6:
    i32 %199 = add i32 %25, i32 1;
    i1 %200 = icmp slt i32 %199, i32 1000;
    cbr i1 %200(prob = 1), ^while.body1, ^b4;
  ^while.body7:
    i32 %201 = add i32 %52, i32 %190;
    i32 %202 = add i32 %119, i32 %190;
    i32 %203 = mul i32 %201, i32 %202;
    i32 %204 = sdiv i32 %203, i32 2;
    i32 %205 = add i32 %204, i32 1;
    i32 %206 = add i32 %52, i32 %205;
    f32 %207 = s2f i32 %206 to f32;
    f32* %208 = getelementptr &(f32* %22)[i32 %190];
    f32 %209 = load f32* %208;
    f32 %210 = fdiv f32 %209, f32 %207;
    f32 %211 = fadd f32 %191, f32 %210;
    i32 %212 = add i32 %118, i32 %190;
    i32 %213 = mul i32 %202, i32 %212;
    i32 %214 = sdiv i32 %213, i32 2;
    i32 %215 = add i32 %214, i32 1;
    i32 %216 = add i32 %52, i32 %215;
    f32 %217 = s2f i32 %216 to f32;
    f32* %218 = getelementptr &(f32* %208)[i64 1];
    f32 %219 = load f32* %218;
    f32 %220 = fdiv f32 %219, f32 %217;
    f32 %221 = fadd f32 %211, f32 %220;
    i32 %222 = add i32 %117, i32 %190;
    i32 %223 = mul i32 %212, i32 %222;
    i32 %224 = sdiv i32 %223, i32 2;
    i32 %225 = add i32 %224, i32 1;
    i32 %226 = add i32 %52, i32 %225;
    f32 %227 = s2f i32 %226 to f32;
    f32* %228 = getelementptr &(f32* %208)[i64 2];
    f32 %229 = load f32* %228;
    f32 %230 = fdiv f32 %229, f32 %227;
    f32 %231 = fadd f32 %221, f32 %230;
    i32 %232 = add i32 %52, i32 %192;
    i32 %233 = mul i32 %222, i32 %232;
    i32 %234 = sdiv i32 %233, i32 2;
    i32 %235 = add i32 %234, i32 1;
    i32 %236 = add i32 %52, i32 %235;
    f32 %237 = s2f i32 %236 to f32;
    f32* %238 = getelementptr &(f32* %208)[i64 3];
    f32 %239 = load f32* %238;
    f32 %240 = fdiv f32 %239, f32 %237;
    f32 %241 = fadd f32 %231, f32 %240;
    ubr ^super.header2;
  ^b3:
    i32 %242 = phi [^while.header7, i32 %122] [^while.body10, i32 %324];
    f32 %243 = phi [^while.header7, f32 %121] [^while.body10, f32 %323];
    f32* %244 = getelementptr &(f32* %20)[i32 %123];
    store f32* %244 with f32 %243;
    ubr ^while.header6;
  ^while.body8:
    i32 %245 = phi [^super.header2, i32 %190] [^while.body8, i32 %247];
    f32 %246 = phi [^super.header2, f32 %191] [^while.body8, f32 %258];
    i32 %247 = add i32 %245, i32 1;
    i32 %248 = add i32 %52, i32 %247;
    i32 %249 = add i32 %52, i32 %245;
    i32 %250 = mul i32 %248, i32 %249;
    i32 %251 = sdiv i32 %250, i32 2;
    i32 %252 = add i32 %251, i32 1;
    i32 %253 = add i32 %52, i32 %252;
    f32 %254 = s2f i32 %253 to f32;
    f32* %255 = getelementptr &(f32* %22)[i32 %245];
    f32 %256 = load f32* %255;
    f32 %257 = fdiv f32 %256, f32 %254;
    f32 %258 = fadd f32 %246, f32 %257;
    i1 %259 = icmp slt i32 %247, i32 100000;
    cbr i1 %259(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %260 = phi [^while.header7, i32 %122] [^while.body9, i32 %262];
    f32 %261 = phi [^while.header7, f32 %121] [^while.body9, f32 %310];
    i32 %262 = add i32 %260, i32 4;
    i1 %263 = icmp slt i32 %262, i32 100000;
    cbr i1 %263(prob = 0.89), ^while.body9, ^while.body10;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^super.header4;
  ^while.body9:
    i32 %264 = add i32 %123, i32 %260;
    i32 %265 = add i32 %197, i32 %260;
    i32 %266 = mul i32 %264, i32 %265;
    i32 %267 = sdiv i32 %266, i32 2;
    i32 %268 = add i32 %267, i32 1;
    i32 %269 = add i32 %260, i32 %268;
    f32 %270 = s2f i32 %269 to f32;
    f32* %271 = getelementptr &(f32* %24)[i32 %260];
    f32 %272 = load f32* %271;
    f32 %273 = fdiv f32 %272, f32 %270;
    f32 %274 = fadd f32 %261, f32 %273;
    i32 %275 = add i32 %260, i32 1;
    i32 %276 = add i32 %123, i32 %275;
    i32 %277 = add i32 %196, i32 %260;
    i32 %278 = mul i32 %276, i32 %277;
    i32 %279 = sdiv i32 %278, i32 2;
    i32 %280 = add i32 %279, i32 2;
    i32 %281 = add i32 %260, i32 %280;
    f32 %282 = s2f i32 %281 to f32;
    f32* %283 = getelementptr &(f32* %271)[i64 1];
    f32 %284 = load f32* %283;
    f32 %285 = fdiv f32 %284, f32 %282;
    f32 %286 = fadd f32 %274, f32 %285;
    i32 %287 = add i32 %260, i32 2;
    i32 %288 = add i32 %123, i32 %287;
    i32 %289 = add i32 %195, i32 %260;
    i32 %290 = mul i32 %288, i32 %289;
    i32 %291 = sdiv i32 %290, i32 2;
    i32 %292 = add i32 %291, i32 2;
    i32 %293 = add i32 %275, i32 %292;
    f32 %294 = s2f i32 %293 to f32;
    f32* %295 = getelementptr &(f32* %271)[i64 2];
    f32 %296 = load f32* %295;
    f32 %297 = fdiv f32 %296, f32 %294;
    f32 %298 = fadd f32 %286, f32 %297;
    i32 %299 = add i32 %260, i32 3;
    i32 %300 = add i32 %123, i32 %299;
    i32 %301 = add i32 %194, i32 %260;
    i32 %302 = mul i32 %300, i32 %301;
    i32 %303 = sdiv i32 %302, i32 2;
    i32 %304 = add i32 %303, i32 3;
    i32 %305 = add i32 %275, i32 %304;
    f32 %306 = s2f i32 %305 to f32;
    f32* %307 = getelementptr &(f32* %271)[i64 3];
    f32 %308 = load f32* %307;
    f32 %309 = fdiv f32 %308, f32 %306;
    f32 %310 = fadd f32 %298, f32 %309;
    ubr ^super.header3;
  ^while.body10:
    i32 %311 = phi [^super.header3, i32 %260] [^while.body10, i32 %324];
    f32 %312 = phi [^super.header3, f32 %261] [^while.body10, f32 %323];
    i32 %313 = add i32 %123, i32 %311;
    i32 %314 = add i32 %197, i32 %311;
    i32 %315 = mul i32 %313, i32 %314;
    i32 %316 = sdiv i32 %315, i32 2;
    i32 %317 = add i32 %316, i32 1;
    i32 %318 = add i32 %311, i32 %317;
    f32 %319 = s2f i32 %318 to f32;
    f32* %320 = getelementptr &(f32* %24)[i32 %311];
    f32 %321 = load f32* %320;
    f32 %322 = fdiv f32 %321, f32 %319;
    f32 %323 = fadd f32 %312, f32 %322;
    i32 %324 = add i32 %311, i32 1;
    i1 %325 = icmp slt i32 %324, i32 100000;
    cbr i1 %325(prob = 0.75), ^while.body10, ^b3;
  ^super.header4:
    i32 %326 = phi [^b4, i32 0] [^while.body11, i32 %328];
    f32 %327 = phi [^b4, f32 0] [^while.body11, f32 %353];
    i32 %328 = add i32 %326, i32 4;
    i1 %329 = icmp slt i32 %328, i32 100000;
    cbr i1 %329(prob = 0.89), ^while.body11, ^while.body12;
  ^while.body11:
    f32* %330 = getelementptr &(f32* %20)[i32 %326];
    f32 %331 = load f32* %330;
    f32* %332 = getelementptr &(f32* %22)[i32 %326];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 %331, f32 %333;
    f32 %335 = fadd f32 %327, f32 %334;
    f32* %336 = getelementptr &(f32* %330)[i64 1];
    f32 %337 = load f32* %336;
    f32* %338 = getelementptr &(f32* %332)[i64 1];
    f32 %339 = load f32* %338;
    f32 %340 = fmul f32 %337, f32 %339;
    f32 %341 = fadd f32 %335, f32 %340;
    f32* %342 = getelementptr &(f32* %330)[i64 2];
    f32 %343 = load f32* %342;
    f32* %344 = getelementptr &(f32* %332)[i64 2];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 %343, f32 %345;
    f32 %347 = fadd f32 %341, f32 %346;
    f32* %348 = getelementptr &(f32* %330)[i64 3];
    f32 %349 = load f32* %348;
    f32* %350 = getelementptr &(f32* %332)[i64 3];
    f32 %351 = load f32* %350;
    f32 %352 = fmul f32 %349, f32 %351;
    f32 %353 = fadd f32 %347, f32 %352;
    ubr ^super.header4;
  ^while.body12:
    i32 %354 = phi [^super.header4, i32 %326] [^while.body12, i32 %362];
    f32 %355 = phi [^super.header4, f32 %327] [^while.body12, f32 %361];
    f32* %356 = getelementptr &(f32* %20)[i32 %354];
    f32 %357 = load f32* %356;
    f32* %358 = getelementptr &(f32* %22)[i32 %354];
    f32 %359 = load f32* %358;
    f32 %360 = fmul f32 %357, f32 %359;
    f32 %361 = fadd f32 %355, f32 %360;
    i32 %362 = add i32 %354, i32 1;
    i1 %363 = icmp slt i32 %362, i32 100000;
    cbr i1 %363(prob = 0.75), ^while.body12, ^super.header5;
  ^super.header5:
    i32 %364 = phi [^while.body12, i32 0] [^while.body13, i32 %366];
    f32 %365 = phi [^while.body12, f32 0] [^while.body13, f32 %383];
    i32 %366 = add i32 %364, i32 4;
    i1 %367 = icmp slt i32 %366, i32 100000;
    cbr i1 %367(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body13:
    f32* %368 = getelementptr &(f32* %22)[i32 %364];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %369, f32 %369;
    f32 %371 = fadd f32 %365, f32 %370;
    f32* %372 = getelementptr &(f32* %368)[i64 1];
    f32 %373 = load f32* %372;
    f32 %374 = fmul f32 %373, f32 %373;
    f32 %375 = fadd f32 %371, f32 %374;
    f32* %376 = getelementptr &(f32* %368)[i64 2];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 %377, f32 %377;
    f32 %379 = fadd f32 %375, f32 %378;
    f32* %380 = getelementptr &(f32* %368)[i64 3];
    f32 %381 = load f32* %380;
    f32 %382 = fmul f32 %381, f32 %381;
    f32 %383 = fadd f32 %379, f32 %382;
    ubr ^super.header5;
  ^while.body14:
    i32 %384 = phi [^super.header5, i32 %364] [^while.body14, i32 %390];
    f32 %385 = phi [^super.header5, f32 %365] [^while.body14, f32 %389];
    f32* %386 = getelementptr &(f32* %22)[i32 %384];
    f32 %387 = load f32* %386;
    f32 %388 = fmul f32 %387, f32 %387;
    f32 %389 = fadd f32 %385, f32 %388;
    i32 %390 = add i32 %384, i32 1;
    i1 %391 = icmp slt i32 %390, i32 100000;
    cbr i1 %391(prob = 0.75), ^while.body14, ^b5;
  ^b5:
    f32 %392 = fdiv f32 %361, f32 %389;
    f32 %393 = fsub f32 1, f32 %392;
    i1 %394 = fcmp ogt f32 %393, f32 1e-06;
    i1 %395 = fcmp olt f32 %393, f32 -1e-06;
    i1 %396 = or i1 %394, i1 %395;
    cbr i1 %396(prob = 0.98), ^while.body15, ^b6;
  ^while.body15:
    f32 %397 = phi [^b5, f32 %392] [^while.body15, f32 %401];
    f32 %398 = phi [^b5, f32 1] [^while.body15, f32 %400];
    f32 %399 = fadd f32 %398, f32 %397;
    f32 %400 = fmul f32 %399, f32 0.5;
    f32 %401 = fdiv f32 %392, f32 %400;
    f32 %402 = fsub f32 %400, f32 %401;
    i1 %403 = fcmp ogt f32 %402, f32 1e-06;
    i1 %404 = fcmp olt f32 %402, f32 -1e-06;
    i1 %405 = or i1 %403, i1 %404;
    cbr i1 %405(prob = 0.98), ^while.body15, ^b6;
  ^b6:
    f32 %406 = phi [^b5, f32 1] [^while.body15, f32 %400];
    f32 %407 = fsub f32 %406, f32 1;
    i1 %408 = fcmp ole f32 %407, f32 1e-06;
    i1 %409 = fcmp oge f32 %407, f32 -1e-06;
    i1 %410 = and i1 %408, i1 %409;
    i32 %411 = zext i1 %410 to i32;
    call (i32) -> void @putint(i32 %411);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm;
internal [100000 * f32]* @vectorB;
internal [100000 * f32]* @vectorA;
