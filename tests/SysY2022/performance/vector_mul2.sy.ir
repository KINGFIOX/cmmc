internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    call (i32) -> void @starttime(i32 62);
    f32* %0 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %1 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %2 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %20];
    f32* %4 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %3];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %4)[i64 1];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %4)[i64 2];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %4)[i64 3];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %4)[i64 4];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %4)[i64 5];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %4)[i64 6];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %4)[i64 7];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %4)[i64 8];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %4)[i64 9];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %4)[i64 10];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %4)[i64 11];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %4)[i64 12];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %4)[i64 13];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %4)[i64 14];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %4)[i64 15];
    store f32* %19 with f32 1;
    i32 %20 = add i32 %3, i32 16;
    i1 %21 = scmp lt i32 %20, i32 100000;
    cbr i1 %21(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^while.body5, i32 %212];
    ubr ^while.header;
  ^while.header:
    i32 %23 = phi [^while.body1, i32 0] [^b, i32 %29];
    f32 %24 = phi [^while.body1, f32 0] [^b, f32 %35];
    i32 %25 = phi [^while.body1, i32 0] [^b, i32 %36];
    i1 %26 = scmp lt i32 %23, i32 100000;
    cbr i1 %26(prob = 0.97), ^indirect, ^while.header1;
  ^indirect:
    i32 %27 = add i32 %23, i32 3;
    i32 %28 = add i32 %23, i32 2;
    i32 %29 = add i32 %23, i32 1;
    i1 %30 = scmp lt i32 %25, i32 100000;
    cbr i1 %30(prob = 0.97), ^super.header, ^b;
  ^while.header1:
    i32 %31 = phi [^while.header, i32 0] [^b1, i32 %44];
    f32 %32 = phi [^while.header, f32 0] [^b1, f32 %92];
    i32 %33 = phi [^while.header, i32 0] [^b1, i32 %93];
    i1 %34 = scmp lt i32 %31, i32 100000;
    cbr i1 %34(prob = 0.97), ^indirect1, ^while.header2;
  ^b:
    f32 %35 = phi [^indirect, f32 %24] [^while.body13, f32 %537];
    i32 %36 = phi [^indirect, i32 %25] [^while.body13, i32 %538];
    f32* %37 = getelementptr &(f32* %2)[i32 %23];
    store f32* %37 with f32 %35;
    ubr ^while.header;
  ^super.header:
    f32 %38 = phi [^indirect, f32 %24] [^while.body2, f32 %91];
    i32 %39 = phi [^indirect, i32 %25] [^while.body2, i32 %40];
    i32 %40 = add i32 %39, i32 4;
    i1 %41 = scmp lt i32 %40, i32 100000;
    cbr i1 %41(prob = 0.89), ^while.body2, ^super.header1;
  ^indirect1:
    i32 %42 = add i32 %31, i32 3;
    i32 %43 = add i32 %31, i32 2;
    i32 %44 = add i32 %31, i32 1;
    i1 %45 = scmp lt i32 %33, i32 100000;
    cbr i1 %45(prob = 0.97), ^super.header2, ^b1;
  ^while.header2:
    i32 %46 = phi [^while.header1, i32 0] [^b2, i32 %105];
    f32 %47 = phi [^while.header1, f32 0] [^b2, f32 %193];
    i32 %48 = phi [^while.header1, i32 0] [^b2, i32 %194];
    i1 %49 = scmp lt i32 %46, i32 100000;
    cbr i1 %49(prob = 0.97), ^indirect2, ^while.header3;
  ^while.body2:
    i32 %50 = add i32 %23, i32 %39;
    i32 %51 = add i32 %29, i32 %39;
    i32 %52 = mul i32 %50, i32 %51;
    i32 %53 = sdiv i32 %52, i32 2;
    i32 %54 = add i32 %29, i32 %53;
    f32 %55 = s2f i32 %54 to f32;
    f32* %56 = getelementptr &(f32* %0)[i32 %39];
    f32 %57 = load f32* %56;
    f32 %58 = fdiv f32 %57, f32 %55;
    f32 %59 = fadd f32 %38, f32 %58;
    i32 %60 = add i32 %39, i32 1;
    i32 %61 = add i32 %29, i32 %60;
    i32 %62 = mul i32 %51, i32 %61;
    i32 %63 = sdiv i32 %62, i32 2;
    i32 %64 = add i32 %29, i32 %63;
    f32 %65 = s2f i32 %64 to f32;
    f32* %66 = getelementptr &(f32* %56)[i64 1];
    f32 %67 = load f32* %66;
    f32 %68 = fdiv f32 %67, f32 %65;
    f32 %69 = fadd f32 %59, f32 %68;
    i32 %70 = add i32 %39, i32 2;
    i32 %71 = add i32 %29, i32 %70;
    i32 %72 = add i32 %28, i32 %39;
    i32 %73 = mul i32 %71, i32 %72;
    i32 %74 = sdiv i32 %73, i32 2;
    i32 %75 = add i32 %29, i32 %74;
    f32 %76 = s2f i32 %75 to f32;
    f32* %77 = getelementptr &(f32* %56)[i64 2];
    f32 %78 = load f32* %77;
    f32 %79 = fdiv f32 %78, f32 %76;
    f32 %80 = fadd f32 %69, f32 %79;
    i32 %81 = add i32 %39, i32 3;
    i32 %82 = add i32 %29, i32 %81;
    i32 %83 = add i32 %27, i32 %39;
    i32 %84 = mul i32 %82, i32 %83;
    i32 %85 = sdiv i32 %84, i32 2;
    i32 %86 = add i32 %29, i32 %85;
    f32 %87 = s2f i32 %86 to f32;
    f32* %88 = getelementptr &(f32* %56)[i64 3];
    f32 %89 = load f32* %88;
    f32 %90 = fdiv f32 %89, f32 %87;
    f32 %91 = fadd f32 %80, f32 %90;
    ubr ^super.header;
  ^b1:
    f32 %92 = phi [^indirect1, f32 %32] [^while.body18, f32 %719];
    i32 %93 = phi [^indirect1, i32 %33] [^while.body18, i32 %713];
    f32* %94 = getelementptr &(f32* %1)[i32 %31];
    store f32* %94 with f32 %92;
    ubr ^while.header1;
  ^super.header1:
    f32 %95 = phi [^super.header, f32 %38] [^while.body3, f32 %152];
    i32 %96 = phi [^super.header, i32 %39] [^while.body3, i32 %97];
    i32 %97 = add i32 %96, i32 4;
    i1 %98 = scmp lt i32 %97, i32 100000;
    cbr i1 %98(prob = 0.89), ^while.body3, ^super.header3;
  ^super.header2:
    f32 %99 = phi [^indirect1, f32 %32] [^while.body4, f32 %192];
    i32 %100 = phi [^indirect1, i32 %33] [^while.body4, i32 %101];
    i32 %101 = add i32 %100, i32 4;
    i1 %102 = scmp lt i32 %101, i32 100000;
    cbr i1 %102(prob = 0.89), ^while.body4, ^super.header4;
  ^indirect2:
    i32 %103 = add i32 %46, i32 3;
    i32 %104 = add i32 %46, i32 2;
    i32 %105 = add i32 %46, i32 1;
    i1 %106 = scmp lt i32 %48, i32 100000;
    cbr i1 %106(prob = 0.97), ^super.header5, ^b2;
  ^while.header3:
    i32 %107 = phi [^while.header2, i32 0] [^b3, i32 %210];
    f32 %108 = phi [^while.header2, f32 0] [^b3, f32 %340];
    i32 %109 = phi [^while.header2, i32 0] [^b3, i32 %341];
    i1 %110 = scmp lt i32 %107, i32 100000;
    cbr i1 %110(prob = 0.97), ^indirect3, ^while.body5;
  ^while.body3:
    i32 %111 = add i32 %23, i32 %96;
    i32 %112 = add i32 %29, i32 %96;
    i32 %113 = mul i32 %111, i32 %112;
    i32 %114 = sdiv i32 %113, i32 2;
    i32 %115 = add i32 %29, i32 %114;
    f32 %116 = s2f i32 %115 to f32;
    f32* %117 = getelementptr &(f32* %0)[i32 %96];
    f32 %118 = load f32* %117;
    f32 %119 = fdiv f32 %118, f32 %116;
    f32 %120 = fadd f32 %95, f32 %119;
    i32 %121 = add i32 %96, i32 1;
    i32 %122 = add i32 %29, i32 %121;
    i32 %123 = mul i32 %112, i32 %122;
    i32 %124 = sdiv i32 %123, i32 2;
    i32 %125 = add i32 %29, i32 %124;
    f32 %126 = s2f i32 %125 to f32;
    f32* %127 = getelementptr &(f32* %117)[i64 1];
    f32 %128 = load f32* %127;
    f32 %129 = fdiv f32 %128, f32 %126;
    f32 %130 = fadd f32 %120, f32 %129;
    i32 %131 = add i32 %96, i32 2;
    i32 %132 = add i32 %29, i32 %131;
    i32 %133 = add i32 %28, i32 %96;
    i32 %134 = mul i32 %132, i32 %133;
    i32 %135 = sdiv i32 %134, i32 2;
    i32 %136 = add i32 %29, i32 %135;
    f32 %137 = s2f i32 %136 to f32;
    f32* %138 = getelementptr &(f32* %117)[i64 2];
    f32 %139 = load f32* %138;
    f32 %140 = fdiv f32 %139, f32 %137;
    f32 %141 = fadd f32 %130, f32 %140;
    i32 %142 = add i32 %96, i32 3;
    i32 %143 = add i32 %29, i32 %142;
    i32 %144 = add i32 %27, i32 %96;
    i32 %145 = mul i32 %143, i32 %144;
    i32 %146 = sdiv i32 %145, i32 2;
    i32 %147 = add i32 %29, i32 %146;
    f32 %148 = s2f i32 %147 to f32;
    f32* %149 = getelementptr &(f32* %117)[i64 3];
    f32 %150 = load f32* %149;
    f32 %151 = fdiv f32 %150, f32 %148;
    f32 %152 = fadd f32 %141, f32 %151;
    ubr ^super.header1;
  ^while.body4:
    i32 %153 = add i32 %31, i32 %100;
    i32 %154 = add i32 %44, i32 %100;
    i32 %155 = mul i32 %153, i32 %154;
    i32 %156 = sdiv i32 %155, i32 2;
    i32 %157 = add i32 %100, i32 1;
    i32 %158 = add i32 %156, i32 %157;
    f32 %159 = s2f i32 %158 to f32;
    f32* %160 = getelementptr &(f32* %2)[i32 %100];
    f32 %161 = load f32* %160;
    f32 %162 = fdiv f32 %161, f32 %159;
    f32 %163 = fadd f32 %99, f32 %162;
    i32 %164 = add i32 %43, i32 %100;
    i32 %165 = mul i32 %154, i32 %164;
    i32 %166 = sdiv i32 %165, i32 2;
    i32 %167 = add i32 %100, i32 2;
    i32 %168 = add i32 %166, i32 %167;
    f32 %169 = s2f i32 %168 to f32;
    f32* %170 = getelementptr &(f32* %160)[i64 1];
    f32 %171 = load f32* %170;
    f32 %172 = fdiv f32 %171, f32 %169;
    f32 %173 = fadd f32 %163, f32 %172;
    i32 %174 = add i32 %42, i32 %100;
    i32 %175 = mul i32 %164, i32 %174;
    i32 %176 = sdiv i32 %175, i32 2;
    i32 %177 = add i32 %100, i32 3;
    i32 %178 = add i32 %176, i32 %177;
    f32 %179 = s2f i32 %178 to f32;
    f32* %180 = getelementptr &(f32* %160)[i64 2];
    f32 %181 = load f32* %180;
    f32 %182 = fdiv f32 %181, f32 %179;
    f32 %183 = fadd f32 %173, f32 %182;
    i32 %184 = add i32 %31, i32 %101;
    i32 %185 = mul i32 %174, i32 %184;
    i32 %186 = sdiv i32 %185, i32 2;
    i32 %187 = add i32 %101, i32 %186;
    f32 %188 = s2f i32 %187 to f32;
    f32* %189 = getelementptr &(f32* %160)[i64 3];
    f32 %190 = load f32* %189;
    f32 %191 = fdiv f32 %190, f32 %188;
    f32 %192 = fadd f32 %183, f32 %191;
    ubr ^super.header2;
  ^b2:
    f32 %193 = phi [^indirect2, f32 %47] [^while.body22, f32 %853];
    i32 %194 = phi [^indirect2, i32 %48] [^while.body22, i32 %854];
    f32* %195 = getelementptr &(f32* %2)[i32 %46];
    store f32* %195 with f32 %193;
    ubr ^while.header2;
  ^super.header3:
    f32 %196 = phi [^super.header1, f32 %95] [^while.body6, f32 %255];
    i32 %197 = phi [^super.header1, i32 %96] [^while.body6, i32 %198];
    i32 %198 = add i32 %197, i32 4;
    i1 %199 = scmp lt i32 %198, i32 100000;
    cbr i1 %199(prob = 0.89), ^while.body6, ^super.header6;
  ^super.header4:
    f32 %200 = phi [^super.header2, f32 %99] [^while.body7, f32 %297];
    i32 %201 = phi [^super.header2, i32 %100] [^while.body7, i32 %202];
    i32 %202 = add i32 %201, i32 4;
    i1 %203 = scmp lt i32 %202, i32 100000;
    cbr i1 %203(prob = 0.89), ^while.body7, ^super.header7;
  ^super.header5:
    f32 %204 = phi [^indirect2, f32 %47] [^while.body8, f32 %339];
    i32 %205 = phi [^indirect2, i32 %48] [^while.body8, i32 %206];
    i32 %206 = add i32 %205, i32 4;
    i1 %207 = scmp lt i32 %206, i32 100000;
    cbr i1 %207(prob = 0.89), ^while.body8, ^super.header8;
  ^indirect3:
    i32 %208 = add i32 %107, i32 3;
    i32 %209 = add i32 %107, i32 2;
    i32 %210 = add i32 %107, i32 1;
    i1 %211 = scmp lt i32 %109, i32 100000;
    cbr i1 %211(prob = 0.97), ^super.header9, ^b3;
  ^while.body5:
    i32 %212 = add i32 %22, i32 1;
    i1 %213 = scmp lt i32 %212, i32 1000;
    cbr i1 %213(prob = 1), ^while.body1, ^b4;
  ^while.body6:
    i32 %214 = add i32 %23, i32 %197;
    i32 %215 = add i32 %29, i32 %197;
    i32 %216 = mul i32 %214, i32 %215;
    i32 %217 = sdiv i32 %216, i32 2;
    i32 %218 = add i32 %29, i32 %217;
    f32 %219 = s2f i32 %218 to f32;
    f32* %220 = getelementptr &(f32* %0)[i32 %197];
    f32 %221 = load f32* %220;
    f32 %222 = fdiv f32 %221, f32 %219;
    f32 %223 = fadd f32 %196, f32 %222;
    i32 %224 = add i32 %197, i32 1;
    i32 %225 = add i32 %29, i32 %224;
    i32 %226 = mul i32 %215, i32 %225;
    i32 %227 = sdiv i32 %226, i32 2;
    i32 %228 = add i32 %29, i32 %227;
    f32 %229 = s2f i32 %228 to f32;
    f32* %230 = getelementptr &(f32* %220)[i64 1];
    f32 %231 = load f32* %230;
    f32 %232 = fdiv f32 %231, f32 %229;
    f32 %233 = fadd f32 %223, f32 %232;
    i32 %234 = add i32 %197, i32 2;
    i32 %235 = add i32 %29, i32 %234;
    i32 %236 = add i32 %28, i32 %197;
    i32 %237 = mul i32 %235, i32 %236;
    i32 %238 = sdiv i32 %237, i32 2;
    i32 %239 = add i32 %29, i32 %238;
    f32 %240 = s2f i32 %239 to f32;
    f32* %241 = getelementptr &(f32* %220)[i64 2];
    f32 %242 = load f32* %241;
    f32 %243 = fdiv f32 %242, f32 %240;
    f32 %244 = fadd f32 %233, f32 %243;
    i32 %245 = add i32 %197, i32 3;
    i32 %246 = add i32 %29, i32 %245;
    i32 %247 = add i32 %27, i32 %197;
    i32 %248 = mul i32 %246, i32 %247;
    i32 %249 = sdiv i32 %248, i32 2;
    i32 %250 = add i32 %29, i32 %249;
    f32 %251 = s2f i32 %250 to f32;
    f32* %252 = getelementptr &(f32* %220)[i64 3];
    f32 %253 = load f32* %252;
    f32 %254 = fdiv f32 %253, f32 %251;
    f32 %255 = fadd f32 %244, f32 %254;
    ubr ^super.header3;
  ^while.body7:
    i32 %256 = add i32 %31, i32 %201;
    i32 %257 = add i32 %44, i32 %201;
    i32 %258 = mul i32 %256, i32 %257;
    i32 %259 = sdiv i32 %258, i32 2;
    i32 %260 = add i32 %201, i32 1;
    i32 %261 = add i32 %259, i32 %260;
    f32 %262 = s2f i32 %261 to f32;
    f32* %263 = getelementptr &(f32* %2)[i32 %201];
    f32 %264 = load f32* %263;
    f32 %265 = fdiv f32 %264, f32 %262;
    f32 %266 = fadd f32 %200, f32 %265;
    i32 %267 = add i32 %44, i32 %260;
    i32 %268 = mul i32 %257, i32 %267;
    i32 %269 = sdiv i32 %268, i32 2;
    i32 %270 = add i32 %201, i32 2;
    i32 %271 = add i32 %269, i32 %270;
    f32 %272 = s2f i32 %271 to f32;
    f32* %273 = getelementptr &(f32* %263)[i64 1];
    f32 %274 = load f32* %273;
    f32 %275 = fdiv f32 %274, f32 %272;
    f32 %276 = fadd f32 %266, f32 %275;
    i32 %277 = add i32 %44, i32 %270;
    i32 %278 = add i32 %43, i32 %201;
    i32 %279 = mul i32 %277, i32 %278;
    i32 %280 = sdiv i32 %279, i32 2;
    i32 %281 = add i32 %201, i32 3;
    i32 %282 = add i32 %280, i32 %281;
    f32 %283 = s2f i32 %282 to f32;
    f32* %284 = getelementptr &(f32* %263)[i64 2];
    f32 %285 = load f32* %284;
    f32 %286 = fdiv f32 %285, f32 %283;
    f32 %287 = fadd f32 %276, f32 %286;
    i32 %288 = add i32 %44, i32 %281;
    i32 %289 = add i32 %42, i32 %201;
    i32 %290 = mul i32 %288, i32 %289;
    i32 %291 = sdiv i32 %290, i32 2;
    i32 %292 = add i32 %202, i32 %291;
    f32 %293 = s2f i32 %292 to f32;
    f32* %294 = getelementptr &(f32* %263)[i64 3];
    f32 %295 = load f32* %294;
    f32 %296 = fdiv f32 %295, f32 %293;
    f32 %297 = fadd f32 %287, f32 %296;
    ubr ^super.header4;
  ^while.body8:
    i32 %298 = add i32 %46, i32 %205;
    i32 %299 = add i32 %105, i32 %205;
    i32 %300 = mul i32 %298, i32 %299;
    i32 %301 = sdiv i32 %300, i32 2;
    i32 %302 = add i32 %105, i32 %301;
    f32 %303 = s2f i32 %302 to f32;
    f32* %304 = getelementptr &(f32* %1)[i32 %205];
    f32 %305 = load f32* %304;
    f32 %306 = fdiv f32 %305, f32 %303;
    f32 %307 = fadd f32 %204, f32 %306;
    i32 %308 = add i32 %205, i32 1;
    i32 %309 = add i32 %105, i32 %308;
    i32 %310 = mul i32 %299, i32 %309;
    i32 %311 = sdiv i32 %310, i32 2;
    i32 %312 = add i32 %105, i32 %311;
    f32 %313 = s2f i32 %312 to f32;
    f32* %314 = getelementptr &(f32* %304)[i64 1];
    f32 %315 = load f32* %314;
    f32 %316 = fdiv f32 %315, f32 %313;
    f32 %317 = fadd f32 %307, f32 %316;
    i32 %318 = add i32 %205, i32 2;
    i32 %319 = add i32 %105, i32 %318;
    i32 %320 = add i32 %104, i32 %205;
    i32 %321 = mul i32 %319, i32 %320;
    i32 %322 = sdiv i32 %321, i32 2;
    i32 %323 = add i32 %105, i32 %322;
    f32 %324 = s2f i32 %323 to f32;
    f32* %325 = getelementptr &(f32* %304)[i64 2];
    f32 %326 = load f32* %325;
    f32 %327 = fdiv f32 %326, f32 %324;
    f32 %328 = fadd f32 %317, f32 %327;
    i32 %329 = add i32 %205, i32 3;
    i32 %330 = add i32 %105, i32 %329;
    i32 %331 = add i32 %103, i32 %205;
    i32 %332 = mul i32 %330, i32 %331;
    i32 %333 = sdiv i32 %332, i32 2;
    i32 %334 = add i32 %105, i32 %333;
    f32 %335 = s2f i32 %334 to f32;
    f32* %336 = getelementptr &(f32* %304)[i64 3];
    f32 %337 = load f32* %336;
    f32 %338 = fdiv f32 %337, f32 %335;
    f32 %339 = fadd f32 %328, f32 %338;
    ubr ^super.header5;
  ^b3:
    f32 %340 = phi [^indirect3, f32 %108] [^while.body25, f32 %943];
    i32 %341 = phi [^indirect3, i32 %109] [^while.body25, i32 %937];
    f32* %342 = getelementptr &(f32* %0)[i32 %107];
    store f32* %342 with f32 %340;
    ubr ^while.header3;
  ^super.header6:
    f32 %343 = phi [^super.header3, f32 %196] [^while.body9, f32 %401];
    i32 %344 = phi [^super.header3, i32 %197] [^while.body9, i32 %345];
    i32 %345 = add i32 %344, i32 4;
    i1 %346 = scmp lt i32 %345, i32 100000;
    cbr i1 %346(prob = 0.89), ^while.body9, ^while.body13;
  ^super.header7:
    f32 %347 = phi [^super.header4, f32 %200] [^while.body10, f32 %443];
    i32 %348 = phi [^super.header4, i32 %201] [^while.body10, i32 %349];
    i32 %349 = add i32 %348, i32 4;
    i1 %350 = scmp lt i32 %349, i32 100000;
    cbr i1 %350(prob = 0.89), ^while.body10, ^super.header10;
  ^super.header8:
    f32 %351 = phi [^super.header5, f32 %204] [^while.body11, f32 %485];
    i32 %352 = phi [^super.header5, i32 %205] [^while.body11, i32 %353];
    i32 %353 = add i32 %352, i32 4;
    i1 %354 = scmp lt i32 %353, i32 100000;
    cbr i1 %354(prob = 0.89), ^while.body11, ^super.header11;
  ^super.header9:
    f32 %355 = phi [^indirect3, f32 %108] [^while.body12, f32 %525];
    i32 %356 = phi [^indirect3, i32 %109] [^while.body12, i32 %357];
    i32 %357 = add i32 %356, i32 4;
    i1 %358 = scmp lt i32 %357, i32 100000;
    cbr i1 %358(prob = 0.89), ^while.body12, ^super.header12;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^super.header13;
  ^while.body9:
    i32 %359 = add i32 %23, i32 %344;
    i32 %360 = add i32 %29, i32 %344;
    i32 %361 = mul i32 %359, i32 %360;
    i32 %362 = sdiv i32 %361, i32 2;
    i32 %363 = add i32 %29, i32 %362;
    f32 %364 = s2f i32 %363 to f32;
    f32* %365 = getelementptr &(f32* %0)[i32 %344];
    f32 %366 = load f32* %365;
    f32 %367 = fdiv f32 %366, f32 %364;
    f32 %368 = fadd f32 %343, f32 %367;
    i32 %369 = add i32 %344, i32 1;
    i32 %370 = add i32 %29, i32 %369;
    i32 %371 = add i32 %29, i32 %344;
    i32 %372 = mul i32 %370, i32 %371;
    i32 %373 = sdiv i32 %372, i32 2;
    i32 %374 = add i32 %29, i32 %373;
    f32 %375 = s2f i32 %374 to f32;
    f32* %376 = getelementptr &(f32* %365)[i64 1];
    f32 %377 = load f32* %376;
    f32 %378 = fdiv f32 %377, f32 %375;
    f32 %379 = fadd f32 %368, f32 %378;
    i32 %380 = add i32 %344, i32 2;
    i32 %381 = add i32 %29, i32 %380;
    i32 %382 = add i32 %28, i32 %344;
    i32 %383 = mul i32 %381, i32 %382;
    i32 %384 = sdiv i32 %383, i32 2;
    i32 %385 = add i32 %29, i32 %384;
    f32 %386 = s2f i32 %385 to f32;
    f32* %387 = getelementptr &(f32* %365)[i64 2];
    f32 %388 = load f32* %387;
    f32 %389 = fdiv f32 %388, f32 %386;
    f32 %390 = fadd f32 %379, f32 %389;
    i32 %391 = add i32 %344, i32 3;
    i32 %392 = add i32 %29, i32 %391;
    i32 %393 = add i32 %27, i32 %344;
    i32 %394 = mul i32 %392, i32 %393;
    i32 %395 = sdiv i32 %394, i32 2;
    i32 %396 = add i32 %29, i32 %395;
    f32 %397 = s2f i32 %396 to f32;
    f32* %398 = getelementptr &(f32* %365)[i64 3];
    f32 %399 = load f32* %398;
    f32 %400 = fdiv f32 %399, f32 %397;
    f32 %401 = fadd f32 %390, f32 %400;
    ubr ^super.header6;
  ^while.body10:
    i32 %402 = add i32 %31, i32 %348;
    i32 %403 = add i32 %44, i32 %348;
    i32 %404 = mul i32 %402, i32 %403;
    i32 %405 = sdiv i32 %404, i32 2;
    i32 %406 = add i32 %348, i32 1;
    i32 %407 = add i32 %405, i32 %406;
    f32 %408 = s2f i32 %407 to f32;
    f32* %409 = getelementptr &(f32* %2)[i32 %348];
    f32 %410 = load f32* %409;
    f32 %411 = fdiv f32 %410, f32 %408;
    f32 %412 = fadd f32 %347, f32 %411;
    i32 %413 = add i32 %44, i32 %406;
    i32 %414 = mul i32 %403, i32 %413;
    i32 %415 = sdiv i32 %414, i32 2;
    i32 %416 = add i32 %348, i32 2;
    i32 %417 = add i32 %415, i32 %416;
    f32 %418 = s2f i32 %417 to f32;
    f32* %419 = getelementptr &(f32* %409)[i64 1];
    f32 %420 = load f32* %419;
    f32 %421 = fdiv f32 %420, f32 %418;
    f32 %422 = fadd f32 %412, f32 %421;
    i32 %423 = add i32 %44, i32 %416;
    i32 %424 = add i32 %43, i32 %348;
    i32 %425 = mul i32 %423, i32 %424;
    i32 %426 = sdiv i32 %425, i32 2;
    i32 %427 = add i32 %348, i32 3;
    i32 %428 = add i32 %426, i32 %427;
    f32 %429 = s2f i32 %428 to f32;
    f32* %430 = getelementptr &(f32* %409)[i64 2];
    f32 %431 = load f32* %430;
    f32 %432 = fdiv f32 %431, f32 %429;
    f32 %433 = fadd f32 %422, f32 %432;
    i32 %434 = add i32 %44, i32 %427;
    i32 %435 = add i32 %42, i32 %348;
    i32 %436 = mul i32 %434, i32 %435;
    i32 %437 = sdiv i32 %436, i32 2;
    i32 %438 = add i32 %349, i32 %437;
    f32 %439 = s2f i32 %438 to f32;
    f32* %440 = getelementptr &(f32* %409)[i64 3];
    f32 %441 = load f32* %440;
    f32 %442 = fdiv f32 %441, f32 %439;
    f32 %443 = fadd f32 %433, f32 %442;
    ubr ^super.header7;
  ^while.body11:
    i32 %444 = add i32 %46, i32 %352;
    i32 %445 = add i32 %105, i32 %352;
    i32 %446 = mul i32 %444, i32 %445;
    i32 %447 = sdiv i32 %446, i32 2;
    i32 %448 = add i32 %105, i32 %447;
    f32 %449 = s2f i32 %448 to f32;
    f32* %450 = getelementptr &(f32* %1)[i32 %352];
    f32 %451 = load f32* %450;
    f32 %452 = fdiv f32 %451, f32 %449;
    f32 %453 = fadd f32 %351, f32 %452;
    i32 %454 = add i32 %352, i32 1;
    i32 %455 = add i32 %105, i32 %454;
    i32 %456 = mul i32 %445, i32 %455;
    i32 %457 = sdiv i32 %456, i32 2;
    i32 %458 = add i32 %105, i32 %457;
    f32 %459 = s2f i32 %458 to f32;
    f32* %460 = getelementptr &(f32* %450)[i64 1];
    f32 %461 = load f32* %460;
    f32 %462 = fdiv f32 %461, f32 %459;
    f32 %463 = fadd f32 %453, f32 %462;
    i32 %464 = add i32 %352, i32 2;
    i32 %465 = add i32 %105, i32 %464;
    i32 %466 = add i32 %104, i32 %352;
    i32 %467 = mul i32 %465, i32 %466;
    i32 %468 = sdiv i32 %467, i32 2;
    i32 %469 = add i32 %105, i32 %468;
    f32 %470 = s2f i32 %469 to f32;
    f32* %471 = getelementptr &(f32* %450)[i64 2];
    f32 %472 = load f32* %471;
    f32 %473 = fdiv f32 %472, f32 %470;
    f32 %474 = fadd f32 %463, f32 %473;
    i32 %475 = add i32 %352, i32 3;
    i32 %476 = add i32 %105, i32 %475;
    i32 %477 = add i32 %103, i32 %352;
    i32 %478 = mul i32 %476, i32 %477;
    i32 %479 = sdiv i32 %478, i32 2;
    i32 %480 = add i32 %105, i32 %479;
    f32 %481 = s2f i32 %480 to f32;
    f32* %482 = getelementptr &(f32* %450)[i64 3];
    f32 %483 = load f32* %482;
    f32 %484 = fdiv f32 %483, f32 %481;
    f32 %485 = fadd f32 %474, f32 %484;
    ubr ^super.header8;
  ^while.body12:
    i32 %486 = add i32 %107, i32 %356;
    i32 %487 = add i32 %210, i32 %356;
    i32 %488 = mul i32 %486, i32 %487;
    i32 %489 = sdiv i32 %488, i32 2;
    i32 %490 = add i32 %356, i32 1;
    i32 %491 = add i32 %489, i32 %490;
    f32 %492 = s2f i32 %491 to f32;
    f32* %493 = getelementptr &(f32* %2)[i32 %356];
    f32 %494 = load f32* %493;
    f32 %495 = fdiv f32 %494, f32 %492;
    f32 %496 = fadd f32 %355, f32 %495;
    i32 %497 = add i32 %209, i32 %356;
    i32 %498 = mul i32 %487, i32 %497;
    i32 %499 = sdiv i32 %498, i32 2;
    i32 %500 = add i32 %356, i32 2;
    i32 %501 = add i32 %499, i32 %500;
    f32 %502 = s2f i32 %501 to f32;
    f32* %503 = getelementptr &(f32* %493)[i64 1];
    f32 %504 = load f32* %503;
    f32 %505 = fdiv f32 %504, f32 %502;
    f32 %506 = fadd f32 %496, f32 %505;
    i32 %507 = add i32 %208, i32 %356;
    i32 %508 = mul i32 %497, i32 %507;
    i32 %509 = sdiv i32 %508, i32 2;
    i32 %510 = add i32 %356, i32 3;
    i32 %511 = add i32 %509, i32 %510;
    f32 %512 = s2f i32 %511 to f32;
    f32* %513 = getelementptr &(f32* %493)[i64 2];
    f32 %514 = load f32* %513;
    f32 %515 = fdiv f32 %514, f32 %512;
    f32 %516 = fadd f32 %506, f32 %515;
    i32 %517 = add i32 %107, i32 %357;
    i32 %518 = mul i32 %507, i32 %517;
    i32 %519 = sdiv i32 %518, i32 2;
    i32 %520 = add i32 %357, i32 %519;
    f32 %521 = s2f i32 %520 to f32;
    f32* %522 = getelementptr &(f32* %493)[i64 3];
    f32 %523 = load f32* %522;
    f32 %524 = fdiv f32 %523, f32 %521;
    f32 %525 = fadd f32 %516, f32 %524;
    ubr ^super.header9;
  ^while.body13:
    f32 %526 = phi [^super.header6, f32 %343] [^while.body13, f32 %537];
    i32 %527 = phi [^super.header6, i32 %344] [^while.body13, i32 %538];
    i32 %528 = add i32 %23, i32 %527;
    i32 %529 = add i32 %29, i32 %527;
    i32 %530 = mul i32 %528, i32 %529;
    i32 %531 = sdiv i32 %530, i32 2;
    i32 %532 = add i32 %29, i32 %531;
    f32 %533 = s2f i32 %532 to f32;
    f32* %534 = getelementptr &(f32* %0)[i32 %527];
    f32 %535 = load f32* %534;
    f32 %536 = fdiv f32 %535, f32 %533;
    f32 %537 = fadd f32 %526, f32 %536;
    i32 %538 = add i32 %527, i32 1;
    i1 %539 = scmp lt i32 %538, i32 100000;
    cbr i1 %539(prob = 0.97), ^while.body13, ^b;
  ^super.header10:
    f32 %540 = phi [^super.header7, f32 %347] [^while.body14, f32 %598];
    i32 %541 = phi [^super.header7, i32 %348] [^while.body14, i32 %542];
    i32 %542 = add i32 %541, i32 4;
    i1 %543 = scmp lt i32 %542, i32 100000;
    cbr i1 %543(prob = 0.89), ^while.body14, ^while.body18;
  ^super.header11:
    f32 %544 = phi [^super.header8, f32 %351] [^while.body15, f32 %640];
    i32 %545 = phi [^super.header8, i32 %352] [^while.body15, i32 %546];
    i32 %546 = add i32 %545, i32 4;
    i1 %547 = scmp lt i32 %546, i32 100000;
    cbr i1 %547(prob = 0.89), ^while.body15, ^super.header14;
  ^super.header12:
    f32 %548 = phi [^super.header9, f32 %355] [^while.body16, f32 %682];
    i32 %549 = phi [^super.header9, i32 %356] [^while.body16, i32 %550];
    i32 %550 = add i32 %549, i32 4;
    i1 %551 = scmp lt i32 %550, i32 100000;
    cbr i1 %551(prob = 0.89), ^while.body16, ^super.header15;
  ^super.header13:
    f32 %552 = phi [^b4, f32 0] [^while.body17, f32 %706];
    i32 %553 = phi [^b4, i32 0] [^while.body17, i32 %554];
    i32 %554 = add i32 %553, i32 4;
    i1 %555 = scmp lt i32 %554, i32 100000;
    cbr i1 %555(prob = 0.89), ^while.body17, ^super.header16;
  ^while.body14:
    i32 %556 = add i32 %31, i32 %541;
    i32 %557 = add i32 %44, i32 %541;
    i32 %558 = mul i32 %556, i32 %557;
    i32 %559 = sdiv i32 %558, i32 2;
    i32 %560 = add i32 %541, i32 1;
    i32 %561 = add i32 %559, i32 %560;
    f32 %562 = s2f i32 %561 to f32;
    f32* %563 = getelementptr &(f32* %2)[i32 %541];
    f32 %564 = load f32* %563;
    f32 %565 = fdiv f32 %564, f32 %562;
    f32 %566 = fadd f32 %540, f32 %565;
    i32 %567 = add i32 %44, i32 %560;
    i32 %568 = add i32 %44, i32 %541;
    i32 %569 = mul i32 %567, i32 %568;
    i32 %570 = sdiv i32 %569, i32 2;
    i32 %571 = add i32 %541, i32 2;
    i32 %572 = add i32 %570, i32 %571;
    f32 %573 = s2f i32 %572 to f32;
    f32* %574 = getelementptr &(f32* %563)[i64 1];
    f32 %575 = load f32* %574;
    f32 %576 = fdiv f32 %575, f32 %573;
    f32 %577 = fadd f32 %566, f32 %576;
    i32 %578 = add i32 %44, i32 %571;
    i32 %579 = add i32 %43, i32 %541;
    i32 %580 = mul i32 %578, i32 %579;
    i32 %581 = sdiv i32 %580, i32 2;
    i32 %582 = add i32 %541, i32 3;
    i32 %583 = add i32 %581, i32 %582;
    f32 %584 = s2f i32 %583 to f32;
    f32* %585 = getelementptr &(f32* %563)[i64 2];
    f32 %586 = load f32* %585;
    f32 %587 = fdiv f32 %586, f32 %584;
    f32 %588 = fadd f32 %577, f32 %587;
    i32 %589 = add i32 %44, i32 %582;
    i32 %590 = add i32 %42, i32 %541;
    i32 %591 = mul i32 %589, i32 %590;
    i32 %592 = sdiv i32 %591, i32 2;
    i32 %593 = add i32 %542, i32 %592;
    f32 %594 = s2f i32 %593 to f32;
    f32* %595 = getelementptr &(f32* %563)[i64 3];
    f32 %596 = load f32* %595;
    f32 %597 = fdiv f32 %596, f32 %594;
    f32 %598 = fadd f32 %588, f32 %597;
    ubr ^super.header10;
  ^while.body15:
    i32 %599 = add i32 %46, i32 %545;
    i32 %600 = add i32 %105, i32 %545;
    i32 %601 = mul i32 %599, i32 %600;
    i32 %602 = sdiv i32 %601, i32 2;
    i32 %603 = add i32 %105, i32 %602;
    f32 %604 = s2f i32 %603 to f32;
    f32* %605 = getelementptr &(f32* %1)[i32 %545];
    f32 %606 = load f32* %605;
    f32 %607 = fdiv f32 %606, f32 %604;
    f32 %608 = fadd f32 %544, f32 %607;
    i32 %609 = add i32 %545, i32 1;
    i32 %610 = add i32 %105, i32 %609;
    i32 %611 = mul i32 %600, i32 %610;
    i32 %612 = sdiv i32 %611, i32 2;
    i32 %613 = add i32 %105, i32 %612;
    f32 %614 = s2f i32 %613 to f32;
    f32* %615 = getelementptr &(f32* %605)[i64 1];
    f32 %616 = load f32* %615;
    f32 %617 = fdiv f32 %616, f32 %614;
    f32 %618 = fadd f32 %608, f32 %617;
    i32 %619 = add i32 %545, i32 2;
    i32 %620 = add i32 %105, i32 %619;
    i32 %621 = add i32 %104, i32 %545;
    i32 %622 = mul i32 %620, i32 %621;
    i32 %623 = sdiv i32 %622, i32 2;
    i32 %624 = add i32 %105, i32 %623;
    f32 %625 = s2f i32 %624 to f32;
    f32* %626 = getelementptr &(f32* %605)[i64 2];
    f32 %627 = load f32* %626;
    f32 %628 = fdiv f32 %627, f32 %625;
    f32 %629 = fadd f32 %618, f32 %628;
    i32 %630 = add i32 %545, i32 3;
    i32 %631 = add i32 %105, i32 %630;
    i32 %632 = add i32 %103, i32 %545;
    i32 %633 = mul i32 %631, i32 %632;
    i32 %634 = sdiv i32 %633, i32 2;
    i32 %635 = add i32 %105, i32 %634;
    f32 %636 = s2f i32 %635 to f32;
    f32* %637 = getelementptr &(f32* %605)[i64 3];
    f32 %638 = load f32* %637;
    f32 %639 = fdiv f32 %638, f32 %636;
    f32 %640 = fadd f32 %629, f32 %639;
    ubr ^super.header11;
  ^while.body16:
    i32 %641 = add i32 %107, i32 %549;
    i32 %642 = add i32 %210, i32 %549;
    i32 %643 = mul i32 %641, i32 %642;
    i32 %644 = sdiv i32 %643, i32 2;
    i32 %645 = add i32 %549, i32 1;
    i32 %646 = add i32 %644, i32 %645;
    f32 %647 = s2f i32 %646 to f32;
    f32* %648 = getelementptr &(f32* %2)[i32 %549];
    f32 %649 = load f32* %648;
    f32 %650 = fdiv f32 %649, f32 %647;
    f32 %651 = fadd f32 %548, f32 %650;
    i32 %652 = add i32 %210, i32 %645;
    i32 %653 = mul i32 %642, i32 %652;
    i32 %654 = sdiv i32 %653, i32 2;
    i32 %655 = add i32 %549, i32 2;
    i32 %656 = add i32 %654, i32 %655;
    f32 %657 = s2f i32 %656 to f32;
    f32* %658 = getelementptr &(f32* %648)[i64 1];
    f32 %659 = load f32* %658;
    f32 %660 = fdiv f32 %659, f32 %657;
    f32 %661 = fadd f32 %651, f32 %660;
    i32 %662 = add i32 %210, i32 %655;
    i32 %663 = add i32 %209, i32 %549;
    i32 %664 = mul i32 %662, i32 %663;
    i32 %665 = sdiv i32 %664, i32 2;
    i32 %666 = add i32 %549, i32 3;
    i32 %667 = add i32 %665, i32 %666;
    f32 %668 = s2f i32 %667 to f32;
    f32* %669 = getelementptr &(f32* %648)[i64 2];
    f32 %670 = load f32* %669;
    f32 %671 = fdiv f32 %670, f32 %668;
    f32 %672 = fadd f32 %661, f32 %671;
    i32 %673 = add i32 %210, i32 %666;
    i32 %674 = add i32 %208, i32 %549;
    i32 %675 = mul i32 %673, i32 %674;
    i32 %676 = sdiv i32 %675, i32 2;
    i32 %677 = add i32 %550, i32 %676;
    f32 %678 = s2f i32 %677 to f32;
    f32* %679 = getelementptr &(f32* %648)[i64 3];
    f32 %680 = load f32* %679;
    f32 %681 = fdiv f32 %680, f32 %678;
    f32 %682 = fadd f32 %672, f32 %681;
    ubr ^super.header12;
  ^while.body17:
    f32* %683 = getelementptr &(f32* %0)[i32 %553];
    f32 %684 = load f32* %683;
    f32* %685 = getelementptr &(f32* %1)[i32 %553];
    f32 %686 = load f32* %685;
    f32 %687 = fmul f32 %684, f32 %686;
    f32 %688 = fadd f32 %552, f32 %687;
    f32* %689 = getelementptr &(f32* %683)[i64 1];
    f32 %690 = load f32* %689;
    f32* %691 = getelementptr &(f32* %685)[i64 1];
    f32 %692 = load f32* %691;
    f32 %693 = fmul f32 %690, f32 %692;
    f32 %694 = fadd f32 %688, f32 %693;
    f32* %695 = getelementptr &(f32* %683)[i64 2];
    f32 %696 = load f32* %695;
    f32* %697 = getelementptr &(f32* %685)[i64 2];
    f32 %698 = load f32* %697;
    f32 %699 = fmul f32 %696, f32 %698;
    f32 %700 = fadd f32 %694, f32 %699;
    f32* %701 = getelementptr &(f32* %683)[i64 3];
    f32 %702 = load f32* %701;
    f32* %703 = getelementptr &(f32* %685)[i64 3];
    f32 %704 = load f32* %703;
    f32 %705 = fmul f32 %702, f32 %704;
    f32 %706 = fadd f32 %700, f32 %705;
    ubr ^super.header13;
  ^while.body18:
    f32 %707 = phi [^super.header10, f32 %540] [^while.body18, f32 %719];
    i32 %708 = phi [^super.header10, i32 %541] [^while.body18, i32 %713];
    i32 %709 = add i32 %31, i32 %708;
    i32 %710 = add i32 %44, i32 %708;
    i32 %711 = mul i32 %709, i32 %710;
    i32 %712 = sdiv i32 %711, i32 2;
    i32 %713 = add i32 %708, i32 1;
    i32 %714 = add i32 %712, i32 %713;
    f32 %715 = s2f i32 %714 to f32;
    f32* %716 = getelementptr &(f32* %2)[i32 %708];
    f32 %717 = load f32* %716;
    f32 %718 = fdiv f32 %717, f32 %715;
    f32 %719 = fadd f32 %707, f32 %718;
    i1 %720 = scmp lt i32 %713, i32 100000;
    cbr i1 %720(prob = 0.97), ^while.body18, ^b1;
  ^super.header14:
    f32 %721 = phi [^super.header11, f32 %544] [^while.body19, f32 %775];
    i32 %722 = phi [^super.header11, i32 %545] [^while.body19, i32 %723];
    i32 %723 = add i32 %722, i32 4;
    i1 %724 = scmp lt i32 %723, i32 100000;
    cbr i1 %724(prob = 0.89), ^while.body19, ^while.body22;
  ^super.header15:
    f32 %725 = phi [^super.header12, f32 %548] [^while.body20, f32 %817];
    i32 %726 = phi [^super.header12, i32 %549] [^while.body20, i32 %727];
    i32 %727 = add i32 %726, i32 4;
    i1 %728 = scmp lt i32 %727, i32 100000;
    cbr i1 %728(prob = 0.89), ^while.body20, ^super.header17;
  ^super.header16:
    f32 %729 = phi [^super.header13, f32 %552] [^while.body21, f32 %841];
    i32 %730 = phi [^super.header13, i32 %553] [^while.body21, i32 %731];
    i32 %731 = add i32 %730, i32 4;
    i1 %732 = scmp lt i32 %731, i32 100000;
    cbr i1 %732(prob = 0.89), ^while.body21, ^super.header18;
  ^while.body19:
    i32 %733 = add i32 %46, i32 %722;
    i32 %734 = add i32 %105, i32 %722;
    i32 %735 = mul i32 %733, i32 %734;
    i32 %736 = sdiv i32 %735, i32 2;
    i32 %737 = add i32 %105, i32 %736;
    f32 %738 = s2f i32 %737 to f32;
    f32* %739 = getelementptr &(f32* %1)[i32 %722];
    f32 %740 = load f32* %739;
    f32 %741 = fdiv f32 %740, f32 %738;
    f32 %742 = fadd f32 %721, f32 %741;
    i32 %743 = add i32 %722, i32 1;
    i32 %744 = add i32 %105, i32 %743;
    i32 %745 = add i32 %105, i32 %722;
    i32 %746 = mul i32 %744, i32 %745;
    i32 %747 = sdiv i32 %746, i32 2;
    i32 %748 = add i32 %105, i32 %747;
    f32 %749 = s2f i32 %748 to f32;
    f32* %750 = getelementptr &(f32* %739)[i64 1];
    f32 %751 = load f32* %750;
    f32 %752 = fdiv f32 %751, f32 %749;
    f32 %753 = fadd f32 %742, f32 %752;
    i32 %754 = add i32 %722, i32 2;
    i32 %755 = add i32 %105, i32 %754;
    i32 %756 = add i32 %104, i32 %722;
    i32 %757 = mul i32 %755, i32 %756;
    i32 %758 = sdiv i32 %757, i32 2;
    i32 %759 = add i32 %105, i32 %758;
    f32 %760 = s2f i32 %759 to f32;
    f32* %761 = getelementptr &(f32* %739)[i64 2];
    f32 %762 = load f32* %761;
    f32 %763 = fdiv f32 %762, f32 %760;
    f32 %764 = fadd f32 %753, f32 %763;
    i32 %765 = add i32 %722, i32 3;
    i32 %766 = add i32 %105, i32 %765;
    i32 %767 = add i32 %103, i32 %722;
    i32 %768 = mul i32 %766, i32 %767;
    i32 %769 = sdiv i32 %768, i32 2;
    i32 %770 = add i32 %105, i32 %769;
    f32 %771 = s2f i32 %770 to f32;
    f32* %772 = getelementptr &(f32* %739)[i64 3];
    f32 %773 = load f32* %772;
    f32 %774 = fdiv f32 %773, f32 %771;
    f32 %775 = fadd f32 %764, f32 %774;
    ubr ^super.header14;
  ^while.body20:
    i32 %776 = add i32 %107, i32 %726;
    i32 %777 = add i32 %210, i32 %726;
    i32 %778 = mul i32 %776, i32 %777;
    i32 %779 = sdiv i32 %778, i32 2;
    i32 %780 = add i32 %726, i32 1;
    i32 %781 = add i32 %779, i32 %780;
    f32 %782 = s2f i32 %781 to f32;
    f32* %783 = getelementptr &(f32* %2)[i32 %726];
    f32 %784 = load f32* %783;
    f32 %785 = fdiv f32 %784, f32 %782;
    f32 %786 = fadd f32 %725, f32 %785;
    i32 %787 = add i32 %210, i32 %780;
    i32 %788 = mul i32 %777, i32 %787;
    i32 %789 = sdiv i32 %788, i32 2;
    i32 %790 = add i32 %726, i32 2;
    i32 %791 = add i32 %789, i32 %790;
    f32 %792 = s2f i32 %791 to f32;
    f32* %793 = getelementptr &(f32* %783)[i64 1];
    f32 %794 = load f32* %793;
    f32 %795 = fdiv f32 %794, f32 %792;
    f32 %796 = fadd f32 %786, f32 %795;
    i32 %797 = add i32 %210, i32 %790;
    i32 %798 = add i32 %209, i32 %726;
    i32 %799 = mul i32 %797, i32 %798;
    i32 %800 = sdiv i32 %799, i32 2;
    i32 %801 = add i32 %726, i32 3;
    i32 %802 = add i32 %800, i32 %801;
    f32 %803 = s2f i32 %802 to f32;
    f32* %804 = getelementptr &(f32* %783)[i64 2];
    f32 %805 = load f32* %804;
    f32 %806 = fdiv f32 %805, f32 %803;
    f32 %807 = fadd f32 %796, f32 %806;
    i32 %808 = add i32 %210, i32 %801;
    i32 %809 = add i32 %208, i32 %726;
    i32 %810 = mul i32 %808, i32 %809;
    i32 %811 = sdiv i32 %810, i32 2;
    i32 %812 = add i32 %727, i32 %811;
    f32 %813 = s2f i32 %812 to f32;
    f32* %814 = getelementptr &(f32* %783)[i64 3];
    f32 %815 = load f32* %814;
    f32 %816 = fdiv f32 %815, f32 %813;
    f32 %817 = fadd f32 %807, f32 %816;
    ubr ^super.header15;
  ^while.body21:
    f32* %818 = getelementptr &(f32* %0)[i32 %730];
    f32 %819 = load f32* %818;
    f32* %820 = getelementptr &(f32* %1)[i32 %730];
    f32 %821 = load f32* %820;
    f32 %822 = fmul f32 %819, f32 %821;
    f32 %823 = fadd f32 %729, f32 %822;
    f32* %824 = getelementptr &(f32* %818)[i64 1];
    f32 %825 = load f32* %824;
    f32* %826 = getelementptr &(f32* %820)[i64 1];
    f32 %827 = load f32* %826;
    f32 %828 = fmul f32 %825, f32 %827;
    f32 %829 = fadd f32 %823, f32 %828;
    f32* %830 = getelementptr &(f32* %818)[i64 2];
    f32 %831 = load f32* %830;
    f32* %832 = getelementptr &(f32* %820)[i64 2];
    f32 %833 = load f32* %832;
    f32 %834 = fmul f32 %831, f32 %833;
    f32 %835 = fadd f32 %829, f32 %834;
    f32* %836 = getelementptr &(f32* %818)[i64 3];
    f32 %837 = load f32* %836;
    f32* %838 = getelementptr &(f32* %820)[i64 3];
    f32 %839 = load f32* %838;
    f32 %840 = fmul f32 %837, f32 %839;
    f32 %841 = fadd f32 %835, f32 %840;
    ubr ^super.header16;
  ^while.body22:
    f32 %842 = phi [^super.header14, f32 %721] [^while.body22, f32 %853];
    i32 %843 = phi [^super.header14, i32 %722] [^while.body22, i32 %854];
    i32 %844 = add i32 %46, i32 %843;
    i32 %845 = add i32 %105, i32 %843;
    i32 %846 = mul i32 %844, i32 %845;
    i32 %847 = sdiv i32 %846, i32 2;
    i32 %848 = add i32 %105, i32 %847;
    f32 %849 = s2f i32 %848 to f32;
    f32* %850 = getelementptr &(f32* %1)[i32 %843];
    f32 %851 = load f32* %850;
    f32 %852 = fdiv f32 %851, f32 %849;
    f32 %853 = fadd f32 %842, f32 %852;
    i32 %854 = add i32 %843, i32 1;
    i1 %855 = scmp lt i32 %854, i32 100000;
    cbr i1 %855(prob = 0.97), ^while.body22, ^b2;
  ^super.header17:
    f32 %856 = phi [^super.header15, f32 %725] [^while.body23, f32 %906];
    i32 %857 = phi [^super.header15, i32 %726] [^while.body23, i32 %858];
    i32 %858 = add i32 %857, i32 4;
    i1 %859 = scmp lt i32 %858, i32 100000;
    cbr i1 %859(prob = 0.89), ^while.body23, ^while.body25;
  ^super.header18:
    f32 %860 = phi [^super.header16, f32 %729] [^while.body24, f32 %930];
    i32 %861 = phi [^super.header16, i32 %730] [^while.body24, i32 %862];
    i32 %862 = add i32 %861, i32 4;
    i1 %863 = scmp lt i32 %862, i32 100000;
    cbr i1 %863(prob = 0.89), ^while.body24, ^while.body26;
  ^while.body23:
    i32 %864 = add i32 %107, i32 %857;
    i32 %865 = add i32 %210, i32 %857;
    i32 %866 = mul i32 %864, i32 %865;
    i32 %867 = sdiv i32 %866, i32 2;
    i32 %868 = add i32 %857, i32 1;
    i32 %869 = add i32 %867, i32 %868;
    f32 %870 = s2f i32 %869 to f32;
    f32* %871 = getelementptr &(f32* %2)[i32 %857];
    f32 %872 = load f32* %871;
    f32 %873 = fdiv f32 %872, f32 %870;
    f32 %874 = fadd f32 %856, f32 %873;
    i32 %875 = add i32 %210, i32 %868;
    i32 %876 = add i32 %210, i32 %857;
    i32 %877 = mul i32 %875, i32 %876;
    i32 %878 = sdiv i32 %877, i32 2;
    i32 %879 = add i32 %857, i32 2;
    i32 %880 = add i32 %878, i32 %879;
    f32 %881 = s2f i32 %880 to f32;
    f32* %882 = getelementptr &(f32* %871)[i64 1];
    f32 %883 = load f32* %882;
    f32 %884 = fdiv f32 %883, f32 %881;
    f32 %885 = fadd f32 %874, f32 %884;
    i32 %886 = add i32 %210, i32 %879;
    i32 %887 = add i32 %209, i32 %857;
    i32 %888 = mul i32 %886, i32 %887;
    i32 %889 = sdiv i32 %888, i32 2;
    i32 %890 = add i32 %857, i32 3;
    i32 %891 = add i32 %889, i32 %890;
    f32 %892 = s2f i32 %891 to f32;
    f32* %893 = getelementptr &(f32* %871)[i64 2];
    f32 %894 = load f32* %893;
    f32 %895 = fdiv f32 %894, f32 %892;
    f32 %896 = fadd f32 %885, f32 %895;
    i32 %897 = add i32 %210, i32 %890;
    i32 %898 = add i32 %208, i32 %857;
    i32 %899 = mul i32 %897, i32 %898;
    i32 %900 = sdiv i32 %899, i32 2;
    i32 %901 = add i32 %858, i32 %900;
    f32 %902 = s2f i32 %901 to f32;
    f32* %903 = getelementptr &(f32* %871)[i64 3];
    f32 %904 = load f32* %903;
    f32 %905 = fdiv f32 %904, f32 %902;
    f32 %906 = fadd f32 %896, f32 %905;
    ubr ^super.header17;
  ^while.body24:
    f32* %907 = getelementptr &(f32* %0)[i32 %861];
    f32 %908 = load f32* %907;
    f32* %909 = getelementptr &(f32* %1)[i32 %861];
    f32 %910 = load f32* %909;
    f32 %911 = fmul f32 %908, f32 %910;
    f32 %912 = fadd f32 %860, f32 %911;
    f32* %913 = getelementptr &(f32* %907)[i64 1];
    f32 %914 = load f32* %913;
    f32* %915 = getelementptr &(f32* %909)[i64 1];
    f32 %916 = load f32* %915;
    f32 %917 = fmul f32 %914, f32 %916;
    f32 %918 = fadd f32 %912, f32 %917;
    f32* %919 = getelementptr &(f32* %907)[i64 2];
    f32 %920 = load f32* %919;
    f32* %921 = getelementptr &(f32* %909)[i64 2];
    f32 %922 = load f32* %921;
    f32 %923 = fmul f32 %920, f32 %922;
    f32 %924 = fadd f32 %918, f32 %923;
    f32* %925 = getelementptr &(f32* %907)[i64 3];
    f32 %926 = load f32* %925;
    f32* %927 = getelementptr &(f32* %909)[i64 3];
    f32 %928 = load f32* %927;
    f32 %929 = fmul f32 %926, f32 %928;
    f32 %930 = fadd f32 %924, f32 %929;
    ubr ^super.header18;
  ^while.body25:
    f32 %931 = phi [^super.header17, f32 %856] [^while.body25, f32 %943];
    i32 %932 = phi [^super.header17, i32 %857] [^while.body25, i32 %937];
    i32 %933 = add i32 %107, i32 %932;
    i32 %934 = add i32 %210, i32 %932;
    i32 %935 = mul i32 %933, i32 %934;
    i32 %936 = sdiv i32 %935, i32 2;
    i32 %937 = add i32 %932, i32 1;
    i32 %938 = add i32 %936, i32 %937;
    f32 %939 = s2f i32 %938 to f32;
    f32* %940 = getelementptr &(f32* %2)[i32 %932];
    f32 %941 = load f32* %940;
    f32 %942 = fdiv f32 %941, f32 %939;
    f32 %943 = fadd f32 %931, f32 %942;
    i1 %944 = scmp lt i32 %937, i32 100000;
    cbr i1 %944(prob = 0.97), ^while.body25, ^b3;
  ^while.body26:
    f32 %945 = phi [^super.header18, f32 %860] [^while.body26, f32 %952];
    i32 %946 = phi [^super.header18, i32 %861] [^while.body26, i32 %953];
    f32* %947 = getelementptr &(f32* %0)[i32 %946];
    f32 %948 = load f32* %947;
    f32* %949 = getelementptr &(f32* %1)[i32 %946];
    f32 %950 = load f32* %949;
    f32 %951 = fmul f32 %948, f32 %950;
    f32 %952 = fadd f32 %945, f32 %951;
    i32 %953 = add i32 %946, i32 1;
    i1 %954 = scmp lt i32 %953, i32 100000;
    cbr i1 %954(prob = 0.97), ^while.body26, ^super.header19;
  ^super.header19:
    f32 %955 = phi [^while.body26, f32 0] [^while.body27, f32 %974];
    i32 %956 = phi [^while.body26, i32 0] [^while.body27, i32 %957];
    i32 %957 = add i32 %956, i32 4;
    i1 %958 = scmp lt i32 %957, i32 100000;
    cbr i1 %958(prob = 0.89), ^while.body27, ^super.header20;
  ^while.body27:
    f32* %959 = getelementptr &(f32* %1)[i32 %956];
    f32 %960 = load f32* %959;
    f32 %961 = fmul f32 %960, f32 %960;
    f32 %962 = fadd f32 %955, f32 %961;
    f32* %963 = getelementptr &(f32* %959)[i64 1];
    f32 %964 = load f32* %963;
    f32 %965 = fmul f32 %964, f32 %964;
    f32 %966 = fadd f32 %962, f32 %965;
    f32* %967 = getelementptr &(f32* %959)[i64 2];
    f32 %968 = load f32* %967;
    f32 %969 = fmul f32 %968, f32 %968;
    f32 %970 = fadd f32 %966, f32 %969;
    f32* %971 = getelementptr &(f32* %959)[i64 3];
    f32 %972 = load f32* %971;
    f32 %973 = fmul f32 %972, f32 %972;
    f32 %974 = fadd f32 %970, f32 %973;
    ubr ^super.header19;
  ^super.header20:
    f32 %975 = phi [^super.header19, f32 %955] [^while.body28, f32 %994];
    i32 %976 = phi [^super.header19, i32 %956] [^while.body28, i32 %977];
    i32 %977 = add i32 %976, i32 4;
    i1 %978 = scmp lt i32 %977, i32 100000;
    cbr i1 %978(prob = 0.89), ^while.body28, ^super.header21;
  ^while.body28:
    f32* %979 = getelementptr &(f32* %1)[i32 %976];
    f32 %980 = load f32* %979;
    f32 %981 = fmul f32 %980, f32 %980;
    f32 %982 = fadd f32 %975, f32 %981;
    f32* %983 = getelementptr &(f32* %979)[i64 1];
    f32 %984 = load f32* %983;
    f32 %985 = fmul f32 %984, f32 %984;
    f32 %986 = fadd f32 %982, f32 %985;
    f32* %987 = getelementptr &(f32* %979)[i64 2];
    f32 %988 = load f32* %987;
    f32 %989 = fmul f32 %988, f32 %988;
    f32 %990 = fadd f32 %986, f32 %989;
    f32* %991 = getelementptr &(f32* %979)[i64 3];
    f32 %992 = load f32* %991;
    f32 %993 = fmul f32 %992, f32 %992;
    f32 %994 = fadd f32 %990, f32 %993;
    ubr ^super.header20;
  ^super.header21:
    f32 %995 = phi [^super.header20, f32 %975] [^while.body29, f32 %1014];
    i32 %996 = phi [^super.header20, i32 %976] [^while.body29, i32 %997];
    i32 %997 = add i32 %996, i32 4;
    i1 %998 = scmp lt i32 %997, i32 100000;
    cbr i1 %998(prob = 0.89), ^while.body29, ^while.body30;
  ^while.body29:
    f32* %999 = getelementptr &(f32* %1)[i32 %996];
    f32 %1000 = load f32* %999;
    f32 %1001 = fmul f32 %1000, f32 %1000;
    f32 %1002 = fadd f32 %995, f32 %1001;
    f32* %1003 = getelementptr &(f32* %999)[i64 1];
    f32 %1004 = load f32* %1003;
    f32 %1005 = fmul f32 %1004, f32 %1004;
    f32 %1006 = fadd f32 %1002, f32 %1005;
    f32* %1007 = getelementptr &(f32* %999)[i64 2];
    f32 %1008 = load f32* %1007;
    f32 %1009 = fmul f32 %1008, f32 %1008;
    f32 %1010 = fadd f32 %1006, f32 %1009;
    f32* %1011 = getelementptr &(f32* %999)[i64 3];
    f32 %1012 = load f32* %1011;
    f32 %1013 = fmul f32 %1012, f32 %1012;
    f32 %1014 = fadd f32 %1010, f32 %1013;
    ubr ^super.header21;
  ^while.body30:
    f32 %1015 = phi [^super.header21, f32 %995] [^while.body30, f32 %1020];
    i32 %1016 = phi [^super.header21, i32 %996] [^while.body30, i32 %1021];
    f32* %1017 = getelementptr &(f32* %1)[i32 %1016];
    f32 %1018 = load f32* %1017;
    f32 %1019 = fmul f32 %1018, f32 %1018;
    f32 %1020 = fadd f32 %1015, f32 %1019;
    i32 %1021 = add i32 %1016, i32 1;
    i1 %1022 = scmp lt i32 %1021, i32 100000;
    cbr i1 %1022(prob = 0.97), ^while.body30, ^b5;
  ^b5:
    f32 %1023 = fdiv f32 %952, f32 %1020;
    f32 %1024 = fsub f32 1, f32 %1023;
    i1 %1025 = fcmp gt f32 %1024, f32 1e-06;
    i1 %1026 = fcmp lt f32 %1024, f32 -1e-06;
    i1 %1027 = or i1 %1025, i1 %1026;
    cbr i1 %1027(prob = 0.97), ^while.body31, ^b6;
  ^while.body31:
    f32 %1028 = phi [^b5, f32 %1023] [^while.body31, f32 %1032];
    f32 %1029 = phi [^b5, f32 1] [^while.body31, f32 %1031];
    f32 %1030 = fadd f32 %1029, f32 %1028;
    f32 %1031 = fmul f32 %1030, f32 0.5;
    f32 %1032 = fdiv f32 %1023, f32 %1031;
    f32 %1033 = fsub f32 %1031, f32 %1032;
    i1 %1034 = fcmp gt f32 %1033, f32 1e-06;
    i1 %1035 = fcmp lt f32 %1033, f32 -1e-06;
    i1 %1036 = or i1 %1034, i1 %1035;
    cbr i1 %1036(prob = 0.97), ^while.body31, ^b6;
  ^b6:
    f32 %1037 = phi [^b5, f32 1] [^while.body31, f32 %1031];
    f32 %1038 = fsub f32 %1037, f32 1;
    i1 %1039 = fcmp le f32 %1038, f32 1e-06;
    i1 %1040 = fcmp ge f32 %1038, f32 -1e-06;
    i1 %1041 = and i1 %1039, i1 %1040;
    i32 %1042 = zext i1 %1041 to i32;
    call (i32) -> void @putint(i32 %1042);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
