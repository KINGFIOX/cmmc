internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %66];
    f32* %2 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %1];
    store f32* %2 with f32 1;
    f32* %3 = getelementptr &(f32* %2)[i64 1];
    store f32* %3 with f32 1;
    f32* %4 = getelementptr &(f32* %2)[i64 2];
    store f32* %4 with f32 1;
    f32* %5 = getelementptr &(f32* %2)[i64 3];
    store f32* %5 with f32 1;
    f32* %6 = getelementptr &(f32* %2)[i64 4];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &(f32* %2)[i64 5];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %2)[i64 6];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %2)[i64 7];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %2)[i64 8];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %2)[i64 9];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %2)[i64 10];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %2)[i64 11];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %2)[i64 12];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %2)[i64 13];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %2)[i64 14];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %2)[i64 15];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %2)[i64 16];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %2)[i64 17];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %2)[i64 18];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %2)[i64 19];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %2)[i64 20];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %2)[i64 21];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %2)[i64 22];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %2)[i64 23];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %2)[i64 24];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %2)[i64 25];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %2)[i64 26];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %2)[i64 27];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %2)[i64 28];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %2)[i64 29];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %2)[i64 30];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %2)[i64 31];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %2)[i64 32];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %2)[i64 33];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %2)[i64 34];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %2)[i64 35];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %2)[i64 36];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %2)[i64 37];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %2)[i64 38];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %2)[i64 39];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %2)[i64 40];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %2)[i64 41];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %2)[i64 42];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %2)[i64 43];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %2)[i64 44];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %2)[i64 45];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %2)[i64 46];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %2)[i64 47];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %2)[i64 48];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %2)[i64 49];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %2)[i64 50];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %2)[i64 51];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %2)[i64 52];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %2)[i64 53];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %2)[i64 54];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %2)[i64 55];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %2)[i64 56];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %2)[i64 57];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %2)[i64 58];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %2)[i64 59];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %2)[i64 60];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %2)[i64 61];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %2)[i64 62];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %2)[i64 63];
    store f32* %65 with f32 1;
    i32 %66 = add i32 %1, i32 64;
    i1 %67 = icmp slt i32 %66, i32 99968;
    cbr i1 %67(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    f32* %68 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %66];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %68)[i64 1];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %68)[i64 2];
    store f32* %70 with f32 1;
    f32* %71 = getelementptr &(f32* %68)[i64 3];
    store f32* %71 with f32 1;
    f32* %72 = getelementptr &(f32* %68)[i64 4];
    store f32* %72 with f32 1;
    f32* %73 = getelementptr &(f32* %68)[i64 5];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %68)[i64 6];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %68)[i64 7];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %68)[i64 8];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %68)[i64 9];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %68)[i64 10];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %68)[i64 11];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %68)[i64 12];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %68)[i64 13];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %68)[i64 14];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %68)[i64 15];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %68)[i64 16];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %68)[i64 17];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %68)[i64 18];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %68)[i64 19];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %68)[i64 20];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %68)[i64 21];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %68)[i64 22];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %68)[i64 23];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %68)[i64 24];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %68)[i64 25];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %68)[i64 26];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %68)[i64 27];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %68)[i64 28];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %68)[i64 29];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %68)[i64 30];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %68)[i64 31];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %101 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %102 = getelementptr &([100000 * f32]* %101)[i64 0][i64 0];
    [100000 * f32]* %103 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %104 = getelementptr &([100000 * f32]* %103)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^while.body7, i32 %269];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %110];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %110 = add i32 %108, i32 1;
    i1 %111 = icmp slt i32 %107, i32 100000;
    cbr i1 %111(prob = 0.97), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %172];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %171];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %174];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.97), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^while.body4, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^while.body4, f32 %186];
    f32* %118 = getelementptr &(f32* %104)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 4;
    i1 %120 = icmp slt i32 %119, i32 100000;
    i32 %121 = add i32 %108, i32 2;
    i32 %122 = add i32 %108, i32 3;
    i32 %123 = add i32 %108, i32 4;
    cbr i1 %120(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header3:
    i1 %124 = icmp slt i32 %113, i32 100000;
    cbr i1 %124(prob = 0.97), ^super.header1, ^b1;
  ^while.header4:
    f32 %125 = phi [^while.header2, f32 0] [^b2, f32 %247];
    i32 %126 = phi [^while.header2, i32 0] [^b2, i32 %246];
    i32 %127 = phi [^while.header2, i32 0] [^b2, i32 %195];
    i1 %128 = icmp slt i32 %127, i32 100000;
    cbr i1 %128(prob = 0.97), ^while.header5, ^while.header6;
  ^while.body3:
    f32 %129 = phi [^super.header, f32 %106] [^while.body3, f32 %167];
    i32 %130 = phi [^super.header, i32 %107] [^while.body3, i32 %170];
    i32 %131 = add i32 %108, i32 %130;
    i32 %132 = add i32 %110, i32 %130;
    i32 %133 = mul i32 %131, i32 %132;
    i32 %134 = sdiv i32 %133, i32 2;
    i32 %135 = add i32 %110, i32 %134;
    f32 %136 = s2f i32 %135 to f32;
    f32* %137 = getelementptr &(f32* %100)[i32 %130];
    f32 %138 = load f32* %137;
    f32 %139 = fdiv f32 %138, f32 %136;
    f32 %140 = fadd f32 %129, f32 %139;
    i32 %141 = add i32 %121, i32 %130;
    i32 %142 = mul i32 %132, i32 %141;
    i32 %143 = sdiv i32 %142, i32 2;
    i32 %144 = add i32 %110, i32 %143;
    f32 %145 = s2f i32 %144 to f32;
    f32* %146 = getelementptr &(f32* %137)[i64 1];
    f32 %147 = load f32* %146;
    f32 %148 = fdiv f32 %147, f32 %145;
    f32 %149 = fadd f32 %140, f32 %148;
    i32 %150 = add i32 %122, i32 %130;
    i32 %151 = mul i32 %141, i32 %150;
    i32 %152 = sdiv i32 %151, i32 2;
    i32 %153 = add i32 %110, i32 %152;
    f32 %154 = s2f i32 %153 to f32;
    f32* %155 = getelementptr &(f32* %137)[i64 2];
    f32 %156 = load f32* %155;
    f32 %157 = fdiv f32 %156, f32 %154;
    f32 %158 = fadd f32 %149, f32 %157;
    i32 %159 = add i32 %123, i32 %130;
    i32 %160 = mul i32 %150, i32 %159;
    i32 %161 = sdiv i32 %160, i32 2;
    i32 %162 = add i32 %110, i32 %161;
    f32 %163 = s2f i32 %162 to f32;
    f32* %164 = getelementptr &(f32* %137)[i64 3];
    f32 %165 = load f32* %164;
    f32 %166 = fdiv f32 %165, f32 %163;
    f32 %167 = fadd f32 %158, f32 %166;
    i32 %168 = add i32 %130, i32 8;
    i1 %169 = icmp slt i32 %168, i32 100000;
    i32 %170 = add i32 %130, i32 4;
    cbr i1 %169(prob = 0.89), ^while.body3, ^while.body4;
  ^b1:
    i32 %171 = phi [^while.header3, i32 %113] [^while.body6, i32 100000];
    f32 %172 = phi [^while.header3, f32 %112] [^while.body6, f32 %261];
    f32* %173 = getelementptr &(f32* %102)[i32 %114];
    store f32* %173 with f32 %172;
    i32 %174 = add i32 %114, i32 1;
    ubr ^while.header2;
  ^while.body4:
    i32 %175 = phi [^super.header, i32 %107] [^while.body3, i32 %170] [^while.body4, i32 %187];
    f32 %176 = phi [^super.header, f32 %106] [^while.body3, f32 %167] [^while.body4, f32 %186];
    i32 %177 = add i32 %108, i32 %175;
    i32 %178 = add i32 %110, i32 %175;
    i32 %179 = mul i32 %177, i32 %178;
    i32 %180 = sdiv i32 %179, i32 2;
    i32 %181 = add i32 %110, i32 %180;
    f32 %182 = s2f i32 %181 to f32;
    f32* %183 = getelementptr &(f32* %100)[i32 %175];
    f32 %184 = load f32* %183;
    f32 %185 = fdiv f32 %184, f32 %182;
    f32 %186 = fadd f32 %176, f32 %185;
    i32 %187 = add i32 %175, i32 1;
    i1 %188 = icmp slt i32 %187, i32 100000;
    cbr i1 %188(prob = 0.75), ^while.body4, ^b;
  ^super.header1:
    i32 %189 = add i32 %113, i32 4;
    i1 %190 = icmp slt i32 %189, i32 100000;
    i32 %191 = add i32 %114, i32 1;
    i32 %192 = add i32 %114, i32 2;
    i32 %193 = add i32 %114, i32 3;
    i32 %194 = add i32 %114, i32 4;
    cbr i1 %190(prob = 0.89), ^while.body5, ^while.body6;
  ^while.header5:
    i32 %195 = add i32 %127, i32 1;
    i1 %196 = icmp slt i32 %126, i32 100000;
    cbr i1 %196(prob = 0.97), ^super.header2, ^b2;
  ^while.header6:
    f32 %197 = phi [^while.header4, f32 0] [^b3, f32 %314];
    i32 %198 = phi [^while.header4, i32 0] [^b3, i32 %313];
    i32 %199 = phi [^while.header4, i32 0] [^b3, i32 %316];
    i1 %200 = icmp slt i32 %199, i32 100000;
    cbr i1 %200(prob = 0.97), ^while.header7, ^while.body7;
  ^while.body5:
    f32 %201 = phi [^super.header1, f32 %112] [^while.body5, f32 %243];
    i32 %202 = phi [^super.header1, i32 %113] [^while.body5, i32 %237];
    i32 %203 = add i32 %114, i32 %202;
    i32 %204 = add i32 %191, i32 %202;
    i32 %205 = mul i32 %203, i32 %204;
    i32 %206 = sdiv i32 %205, i32 2;
    i32 %207 = add i32 %202, i32 1;
    i32 %208 = add i32 %206, i32 %207;
    f32 %209 = s2f i32 %208 to f32;
    f32* %210 = getelementptr &(f32* %104)[i32 %202];
    f32 %211 = load f32* %210;
    f32 %212 = fdiv f32 %211, f32 %209;
    f32 %213 = fadd f32 %201, f32 %212;
    i32 %214 = add i32 %192, i32 %202;
    i32 %215 = mul i32 %204, i32 %214;
    i32 %216 = sdiv i32 %215, i32 2;
    i32 %217 = add i32 %202, i32 2;
    i32 %218 = add i32 %216, i32 %217;
    f32 %219 = s2f i32 %218 to f32;
    f32* %220 = getelementptr &(f32* %210)[i64 1];
    f32 %221 = load f32* %220;
    f32 %222 = fdiv f32 %221, f32 %219;
    f32 %223 = fadd f32 %213, f32 %222;
    i32 %224 = add i32 %193, i32 %202;
    i32 %225 = mul i32 %214, i32 %224;
    i32 %226 = sdiv i32 %225, i32 2;
    i32 %227 = add i32 %202, i32 3;
    i32 %228 = add i32 %226, i32 %227;
    f32 %229 = s2f i32 %228 to f32;
    f32* %230 = getelementptr &(f32* %210)[i64 2];
    f32 %231 = load f32* %230;
    f32 %232 = fdiv f32 %231, f32 %229;
    f32 %233 = fadd f32 %223, f32 %232;
    i32 %234 = add i32 %194, i32 %202;
    i32 %235 = mul i32 %224, i32 %234;
    i32 %236 = sdiv i32 %235, i32 2;
    i32 %237 = add i32 %202, i32 4;
    i32 %238 = add i32 %236, i32 %237;
    f32 %239 = s2f i32 %238 to f32;
    f32* %240 = getelementptr &(f32* %210)[i64 3];
    f32 %241 = load f32* %240;
    f32 %242 = fdiv f32 %241, f32 %239;
    f32 %243 = fadd f32 %233, f32 %242;
    i32 %244 = add i32 %202, i32 8;
    i1 %245 = icmp slt i32 %244, i32 100000;
    cbr i1 %245(prob = 0.89), ^while.body5, ^while.body6;
  ^b2:
    i32 %246 = phi [^while.header5, i32 %126] [^while.body9, i32 100000];
    f32 %247 = phi [^while.header5, f32 %125] [^while.body9, f32 %328];
    f32* %248 = getelementptr &(f32* %104)[i32 %127];
    store f32* %248 with f32 %247;
    ubr ^while.header4;
  ^while.body6:
    i32 %249 = phi [^super.header1, i32 %113] [^while.body5, i32 %237] [^while.body6, i32 %255];
    f32 %250 = phi [^super.header1, f32 %112] [^while.body5, f32 %243] [^while.body6, f32 %261];
    i32 %251 = add i32 %114, i32 %249;
    i32 %252 = add i32 %191, i32 %249;
    i32 %253 = mul i32 %251, i32 %252;
    i32 %254 = sdiv i32 %253, i32 2;
    i32 %255 = add i32 %249, i32 1;
    i32 %256 = add i32 %254, i32 %255;
    f32 %257 = s2f i32 %256 to f32;
    f32* %258 = getelementptr &(f32* %104)[i32 %249];
    f32 %259 = load f32* %258;
    f32 %260 = fdiv f32 %259, f32 %257;
    f32 %261 = fadd f32 %250, f32 %260;
    i1 %262 = icmp slt i32 %255, i32 100000;
    cbr i1 %262(prob = 0.75), ^while.body6, ^b1;
  ^super.header2:
    i32 %263 = add i32 %126, i32 4;
    i1 %264 = icmp slt i32 %263, i32 100000;
    i32 %265 = add i32 %127, i32 2;
    i32 %266 = add i32 %127, i32 3;
    i32 %267 = add i32 %127, i32 4;
    cbr i1 %264(prob = 0.89), ^while.body8, ^while.body9;
  ^while.header7:
    i1 %268 = icmp slt i32 %198, i32 100000;
    cbr i1 %268(prob = 0.97), ^super.header3, ^b3;
  ^while.body7:
    i32 %269 = add i32 %105, i32 1;
    i1 %270 = icmp slt i32 %269, i32 1000;
    cbr i1 %270(prob = 1), ^while.body2, ^b4;
  ^while.body8:
    f32 %271 = phi [^super.header2, f32 %125] [^while.body8, f32 %309];
    i32 %272 = phi [^super.header2, i32 %126] [^while.body8, i32 %312];
    i32 %273 = add i32 %127, i32 %272;
    i32 %274 = add i32 %195, i32 %272;
    i32 %275 = mul i32 %273, i32 %274;
    i32 %276 = sdiv i32 %275, i32 2;
    i32 %277 = add i32 %195, i32 %276;
    f32 %278 = s2f i32 %277 to f32;
    f32* %279 = getelementptr &(f32* %102)[i32 %272];
    f32 %280 = load f32* %279;
    f32 %281 = fdiv f32 %280, f32 %278;
    f32 %282 = fadd f32 %271, f32 %281;
    i32 %283 = add i32 %265, i32 %272;
    i32 %284 = mul i32 %274, i32 %283;
    i32 %285 = sdiv i32 %284, i32 2;
    i32 %286 = add i32 %195, i32 %285;
    f32 %287 = s2f i32 %286 to f32;
    f32* %288 = getelementptr &(f32* %279)[i64 1];
    f32 %289 = load f32* %288;
    f32 %290 = fdiv f32 %289, f32 %287;
    f32 %291 = fadd f32 %282, f32 %290;
    i32 %292 = add i32 %266, i32 %272;
    i32 %293 = mul i32 %283, i32 %292;
    i32 %294 = sdiv i32 %293, i32 2;
    i32 %295 = add i32 %195, i32 %294;
    f32 %296 = s2f i32 %295 to f32;
    f32* %297 = getelementptr &(f32* %279)[i64 2];
    f32 %298 = load f32* %297;
    f32 %299 = fdiv f32 %298, f32 %296;
    f32 %300 = fadd f32 %291, f32 %299;
    i32 %301 = add i32 %267, i32 %272;
    i32 %302 = mul i32 %292, i32 %301;
    i32 %303 = sdiv i32 %302, i32 2;
    i32 %304 = add i32 %195, i32 %303;
    f32 %305 = s2f i32 %304 to f32;
    f32* %306 = getelementptr &(f32* %279)[i64 3];
    f32 %307 = load f32* %306;
    f32 %308 = fdiv f32 %307, f32 %305;
    f32 %309 = fadd f32 %300, f32 %308;
    i32 %310 = add i32 %272, i32 8;
    i1 %311 = icmp slt i32 %310, i32 100000;
    i32 %312 = add i32 %272, i32 4;
    cbr i1 %311(prob = 0.89), ^while.body8, ^while.body9;
  ^b3:
    i32 %313 = phi [^while.header7, i32 %198] [^while.body11, i32 100000];
    f32 %314 = phi [^while.header7, f32 %197] [^while.body11, f32 %394];
    f32* %315 = getelementptr &(f32* %100)[i32 %199];
    store f32* %315 with f32 %314;
    i32 %316 = add i32 %199, i32 1;
    ubr ^while.header6;
  ^while.body9:
    i32 %317 = phi [^super.header2, i32 %126] [^while.body8, i32 %312] [^while.body9, i32 %329];
    f32 %318 = phi [^super.header2, f32 %125] [^while.body8, f32 %309] [^while.body9, f32 %328];
    i32 %319 = add i32 %127, i32 %317;
    i32 %320 = add i32 %195, i32 %317;
    i32 %321 = mul i32 %319, i32 %320;
    i32 %322 = sdiv i32 %321, i32 2;
    i32 %323 = add i32 %195, i32 %322;
    f32 %324 = s2f i32 %323 to f32;
    f32* %325 = getelementptr &(f32* %102)[i32 %317];
    f32 %326 = load f32* %325;
    f32 %327 = fdiv f32 %326, f32 %324;
    f32 %328 = fadd f32 %318, f32 %327;
    i32 %329 = add i32 %317, i32 1;
    i1 %330 = icmp slt i32 %329, i32 100000;
    cbr i1 %330(prob = 0.75), ^while.body9, ^b2;
  ^super.header3:
    i32 %331 = add i32 %198, i32 4;
    i1 %332 = icmp slt i32 %331, i32 100000;
    i32 %333 = add i32 %199, i32 1;
    i32 %334 = add i32 %199, i32 2;
    i32 %335 = add i32 %199, i32 3;
    i32 %336 = add i32 %199, i32 4;
    cbr i1 %332(prob = 0.89), ^while.body10, ^while.body11;
  ^b4:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body12;
  ^while.body10:
    f32 %337 = phi [^super.header3, f32 %197] [^while.body10, f32 %379];
    i32 %338 = phi [^super.header3, i32 %198] [^while.body10, i32 %373];
    i32 %339 = add i32 %199, i32 %338;
    i32 %340 = add i32 %333, i32 %338;
    i32 %341 = mul i32 %339, i32 %340;
    i32 %342 = sdiv i32 %341, i32 2;
    i32 %343 = add i32 %338, i32 1;
    i32 %344 = add i32 %342, i32 %343;
    f32 %345 = s2f i32 %344 to f32;
    f32* %346 = getelementptr &(f32* %104)[i32 %338];
    f32 %347 = load f32* %346;
    f32 %348 = fdiv f32 %347, f32 %345;
    f32 %349 = fadd f32 %337, f32 %348;
    i32 %350 = add i32 %334, i32 %338;
    i32 %351 = mul i32 %340, i32 %350;
    i32 %352 = sdiv i32 %351, i32 2;
    i32 %353 = add i32 %338, i32 2;
    i32 %354 = add i32 %352, i32 %353;
    f32 %355 = s2f i32 %354 to f32;
    f32* %356 = getelementptr &(f32* %346)[i64 1];
    f32 %357 = load f32* %356;
    f32 %358 = fdiv f32 %357, f32 %355;
    f32 %359 = fadd f32 %349, f32 %358;
    i32 %360 = add i32 %335, i32 %338;
    i32 %361 = mul i32 %350, i32 %360;
    i32 %362 = sdiv i32 %361, i32 2;
    i32 %363 = add i32 %338, i32 3;
    i32 %364 = add i32 %362, i32 %363;
    f32 %365 = s2f i32 %364 to f32;
    f32* %366 = getelementptr &(f32* %346)[i64 2];
    f32 %367 = load f32* %366;
    f32 %368 = fdiv f32 %367, f32 %365;
    f32 %369 = fadd f32 %359, f32 %368;
    i32 %370 = add i32 %336, i32 %338;
    i32 %371 = mul i32 %360, i32 %370;
    i32 %372 = sdiv i32 %371, i32 2;
    i32 %373 = add i32 %338, i32 4;
    i32 %374 = add i32 %372, i32 %373;
    f32 %375 = s2f i32 %374 to f32;
    f32* %376 = getelementptr &(f32* %346)[i64 3];
    f32 %377 = load f32* %376;
    f32 %378 = fdiv f32 %377, f32 %375;
    f32 %379 = fadd f32 %369, f32 %378;
    i32 %380 = add i32 %338, i32 8;
    i1 %381 = icmp slt i32 %380, i32 100000;
    cbr i1 %381(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body11:
    i32 %382 = phi [^super.header3, i32 %198] [^while.body10, i32 %373] [^while.body11, i32 %388];
    f32 %383 = phi [^super.header3, f32 %197] [^while.body10, f32 %379] [^while.body11, f32 %394];
    i32 %384 = add i32 %199, i32 %382;
    i32 %385 = add i32 %333, i32 %382;
    i32 %386 = mul i32 %384, i32 %385;
    i32 %387 = sdiv i32 %386, i32 2;
    i32 %388 = add i32 %382, i32 1;
    i32 %389 = add i32 %387, i32 %388;
    f32 %390 = s2f i32 %389 to f32;
    f32* %391 = getelementptr &(f32* %104)[i32 %382];
    f32 %392 = load f32* %391;
    f32 %393 = fdiv f32 %392, f32 %390;
    f32 %394 = fadd f32 %383, f32 %393;
    i1 %395 = icmp slt i32 %388, i32 100000;
    cbr i1 %395(prob = 0.75), ^while.body11, ^b3;
  ^while.body12:
    f32 %396 = phi [^b4, f32 0] [^while.body12, f32 %421];
    i32 %397 = phi [^b4, i32 0] [^while.body12, i32 %424];
    f32* %398 = getelementptr &(f32* %100)[i32 %397];
    f32 %399 = load f32* %398;
    f32* %400 = getelementptr &(f32* %102)[i32 %397];
    f32 %401 = load f32* %400;
    f32 %402 = fmul f32 %399, f32 %401;
    f32 %403 = fadd f32 %396, f32 %402;
    f32* %404 = getelementptr &(f32* %398)[i64 1];
    f32 %405 = load f32* %404;
    f32* %406 = getelementptr &(f32* %400)[i64 1];
    f32 %407 = load f32* %406;
    f32 %408 = fmul f32 %405, f32 %407;
    f32 %409 = fadd f32 %403, f32 %408;
    f32* %410 = getelementptr &(f32* %398)[i64 2];
    f32 %411 = load f32* %410;
    f32* %412 = getelementptr &(f32* %400)[i64 2];
    f32 %413 = load f32* %412;
    f32 %414 = fmul f32 %411, f32 %413;
    f32 %415 = fadd f32 %409, f32 %414;
    f32* %416 = getelementptr &(f32* %398)[i64 3];
    f32 %417 = load f32* %416;
    f32* %418 = getelementptr &(f32* %400)[i64 3];
    f32 %419 = load f32* %418;
    f32 %420 = fmul f32 %417, f32 %419;
    f32 %421 = fadd f32 %415, f32 %420;
    i32 %422 = add i32 %397, i32 8;
    i1 %423 = icmp slt i32 %422, i32 100000;
    i32 %424 = add i32 %397, i32 4;
    cbr i1 %423(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body13:
    i32 %425 = phi [^while.body12, i32 %424] [^while.body13, i32 %433];
    f32 %426 = phi [^while.body12, f32 %421] [^while.body13, f32 %432];
    f32* %427 = getelementptr &(f32* %100)[i32 %425];
    f32 %428 = load f32* %427;
    f32* %429 = getelementptr &(f32* %102)[i32 %425];
    f32 %430 = load f32* %429;
    f32 %431 = fmul f32 %428, f32 %430;
    f32 %432 = fadd f32 %426, f32 %431;
    i32 %433 = add i32 %425, i32 1;
    i1 %434 = icmp slt i32 %433, i32 100000;
    cbr i1 %434(prob = 0.75), ^while.body13, ^while.body14;
  ^while.body14:
    f32 %435 = phi [^while.body13, f32 0] [^while.body14, f32 %452];
    i32 %436 = phi [^while.body13, i32 0] [^while.body14, i32 %455];
    f32* %437 = getelementptr &(f32* %102)[i32 %436];
    f32 %438 = load f32* %437;
    f32 %439 = fmul f32 %438, f32 %438;
    f32 %440 = fadd f32 %435, f32 %439;
    f32* %441 = getelementptr &(f32* %437)[i64 1];
    f32 %442 = load f32* %441;
    f32 %443 = fmul f32 %442, f32 %442;
    f32 %444 = fadd f32 %440, f32 %443;
    f32* %445 = getelementptr &(f32* %437)[i64 2];
    f32 %446 = load f32* %445;
    f32 %447 = fmul f32 %446, f32 %446;
    f32 %448 = fadd f32 %444, f32 %447;
    f32* %449 = getelementptr &(f32* %437)[i64 3];
    f32 %450 = load f32* %449;
    f32 %451 = fmul f32 %450, f32 %450;
    f32 %452 = fadd f32 %448, f32 %451;
    i32 %453 = add i32 %436, i32 8;
    i1 %454 = icmp slt i32 %453, i32 100000;
    i32 %455 = add i32 %436, i32 4;
    cbr i1 %454(prob = 0.89), ^while.body14, ^while.body15;
  ^while.body15:
    i32 %456 = phi [^while.body14, i32 %455] [^while.body15, i32 %462];
    f32 %457 = phi [^while.body14, f32 %452] [^while.body15, f32 %461];
    f32* %458 = getelementptr &(f32* %102)[i32 %456];
    f32 %459 = load f32* %458;
    f32 %460 = fmul f32 %459, f32 %459;
    f32 %461 = fadd f32 %457, f32 %460;
    i32 %462 = add i32 %456, i32 1;
    i1 %463 = icmp slt i32 %462, i32 100000;
    cbr i1 %463(prob = 0.75), ^while.body15, ^b5;
  ^b5:
    f32 %464 = fdiv f32 %432, f32 %461;
    f32 %465 = fsub f32 1, f32 %464;
    i1 %466 = fcmp ogt f32 %465, f32 1e-06;
    i1 %467 = fcmp olt f32 %465, f32 -1e-06;
    i1 %468 = or i1 %466, i1 %467;
    cbr i1 %468(prob = 0.98), ^while.body16, ^b6;
  ^while.body16:
    f32 %469 = phi [^b5, f32 %464] [^while.body16, f32 %473];
    f32 %470 = phi [^b5, f32 1] [^while.body16, f32 %472];
    f32 %471 = fadd f32 %470, f32 %469;
    f32 %472 = fmul f32 %471, f32 0.5;
    f32 %473 = fdiv f32 %464, f32 %472;
    f32 %474 = fsub f32 %472, f32 %473;
    i1 %475 = fcmp ogt f32 %474, f32 1e-06;
    i1 %476 = fcmp olt f32 %474, f32 -1e-06;
    i1 %477 = or i1 %475, i1 %476;
    cbr i1 %477(prob = 0.98), ^while.body16, ^b6;
  ^b6:
    f32 %478 = phi [^b5, f32 1] [^while.body16, f32 %472];
    f32 %479 = fsub f32 %478, f32 1;
    i1 %480 = fcmp ole f32 %479, f32 1e-06;
    i1 %481 = fcmp oge f32 %479, f32 -1e-06;
    i1 %482 = and i1 %480, i1 %481;
    i32 %483 = zext i1 %482 to i32;
    call (i32) -> void @putint(i32 %483);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm { Flexible };
internal [100000 * f32]* @vectorB { Flexible };
internal [100000 * f32]* @vectorA { Flexible };
