internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [1000 * f32]* %var = alloc [1000 * f32];
    [1000 * f32]* %mean = alloc [1000 * f32];
    f32* %sum = alloc f32;
    i32* %i = alloc i32;
    store f32* %sum with f32 0;
    store i32* %i with i32 0;
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^b, i32 %7] [^entry, i32 0];
    [1000 * f32]* %1 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %0];
    f32* %2 = getelementptr &([1000 * f32]* %1)[i64 0][i64 0];
    i32 %3 = call (f32*) -> i32 @getfarray(f32* %2);
    i32 %4 = load i32* %i;
    f32 %5 = load f32* %sum;
    i1 %6 = scmp neq i32 %3, i32 1000;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^b:
    i32 %7 = add i32 %4, i32 1;
    store i32* %i with i32 %7;
    i1 %8 = scmp lt i32 %7, i32 1000;
    cbr i1 %8(prob = 0.97), ^while.body, ^b2;
^b1:
    i32 %9 = phi [^while.body, i32 %3] [^b8, i32 0];
    ret i32 %9;
^b2:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.body1;
^while.body1:
    i32 %10 = phi [^b7, i32 %395] [^b2, i32 0];
    f32 %11 = phi [^b7, f32 %392] [^b2, f32 %5];
    ubr ^while.body2;
^while.body2:
    i32 %12 = phi [^while.body4, i32 %95] [^while.body1, i32 0];
    f32* %13 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %12];
    [1000 * f32]* %14 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %12];
    ubr ^while.body3;
^while.body3:
    f32 %15 = phi [^indirect, f32 %67] [^while.body2, f32 0];
    i32 %16 = phi [^indirect, i32 %65] [^while.body2, i32 0];
    f32* %17 = getelementptr &([1000 * f32]* %14)[i64 0][i32 %16];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %15, f32 %18;
    f32* %20 = getelementptr &(f32* %17)[i64 1];
    f32 %21 = load f32* %20;
    f32 %22 = fadd f32 %19, f32 %21;
    f32* %23 = getelementptr &(f32* %17)[i64 2];
    f32 %24 = load f32* %23;
    f32 %25 = fadd f32 %22, f32 %24;
    f32* %26 = getelementptr &(f32* %17)[i64 3];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %17)[i64 4];
    f32 %30 = load f32* %29;
    f32 %31 = fadd f32 %28, f32 %30;
    f32* %32 = getelementptr &(f32* %17)[i64 5];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %17)[i64 6];
    f32 %36 = load f32* %35;
    f32 %37 = fadd f32 %34, f32 %36;
    f32* %38 = getelementptr &(f32* %17)[i64 7];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %17)[i64 8];
    f32 %42 = load f32* %41;
    f32 %43 = fadd f32 %40, f32 %42;
    f32* %44 = getelementptr &(f32* %17)[i64 9];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %17)[i64 10];
    f32 %48 = load f32* %47;
    f32 %49 = fadd f32 %46, f32 %48;
    f32* %50 = getelementptr &(f32* %17)[i64 11];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %17)[i64 12];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &(f32* %17)[i64 13];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %17)[i64 14];
    f32 %60 = load f32* %59;
    f32 %61 = fadd f32 %58, f32 %60;
    f32* %62 = getelementptr &(f32* %17)[i64 15];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    store f32* %13 with f32 %64;
    i32 %65 = add i32 %16, i32 16;
    i1 %66 = scmp lt i32 %65, i32 992;
    cbr i1 %66(prob = 0.98), ^indirect, ^while.body4;
^indirect:
    f32 %67 = load f32* %13;
    ubr ^while.body3;
^while.body4:
    f32 %68 = load f32* %13;
    f32* %69 = getelementptr &([1000 * f32]* %14)[i64 0][i32 %65];
    f32 %70 = load f32* %69;
    f32 %71 = fadd f32 %68, f32 %70;
    f32* %72 = getelementptr &(f32* %69)[i64 1];
    f32 %73 = load f32* %72;
    f32 %74 = fadd f32 %71, f32 %73;
    f32* %75 = getelementptr &(f32* %69)[i64 2];
    f32 %76 = load f32* %75;
    f32 %77 = fadd f32 %74, f32 %76;
    f32* %78 = getelementptr &(f32* %69)[i64 3];
    f32 %79 = load f32* %78;
    f32 %80 = fadd f32 %77, f32 %79;
    f32* %81 = getelementptr &(f32* %69)[i64 4];
    f32 %82 = load f32* %81;
    f32 %83 = fadd f32 %80, f32 %82;
    f32* %84 = getelementptr &(f32* %69)[i64 5];
    f32 %85 = load f32* %84;
    f32 %86 = fadd f32 %83, f32 %85;
    f32* %87 = getelementptr &(f32* %69)[i64 6];
    f32 %88 = load f32* %87;
    f32 %89 = fadd f32 %86, f32 %88;
    f32* %90 = getelementptr &(f32* %69)[i64 7];
    f32 %91 = load f32* %90;
    f32 %92 = fadd f32 %89, f32 %91;
    store f32* %13 with f32 %92;
    f32 %93 = load f32* %13;
    f32 %94 = fdiv f32 %93, f32 1000;
    store f32* %13 with f32 %94;
    i32 %95 = add i32 %12, i32 1;
    i1 %96 = scmp lt i32 %95, i32 1000;
    cbr i1 %96(prob = 1), ^while.body2, ^while.body5;
^while.body5:
    i32 %97 = phi [^b4, i32 %245] [^while.body4, i32 0];
    f32* %98 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %97];
    [1000 * f32]* %99 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %97];
    f32* %100 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %97];
    ubr ^while.body6;
^while.body6:
    f32 %101 = phi [^indirect1, f32 %186] [^while.body5, f32 0];
    i32 %102 = phi [^indirect1, i32 %184] [^while.body5, i32 0];
    f32* %103 = getelementptr &([1000 * f32]* %99)[i64 0][i32 %102];
    f32 %104 = load f32* %103;
    f32 %105 = load f32* %100;
    f32 %106 = fsub f32 %104, f32 %105;
    f32 %107 = fmul f32 %106, f32 %106;
    f32 %108 = fadd f32 %101, f32 %107;
    f32* %109 = getelementptr &(f32* %103)[i64 1];
    f32 %110 = load f32* %109;
    f32 %111 = fsub f32 %110, f32 %105;
    f32 %112 = fmul f32 %111, f32 %111;
    f32 %113 = fadd f32 %108, f32 %112;
    f32* %114 = getelementptr &(f32* %103)[i64 2];
    f32 %115 = load f32* %114;
    f32 %116 = fsub f32 %115, f32 %105;
    f32 %117 = fmul f32 %116, f32 %116;
    f32 %118 = fadd f32 %113, f32 %117;
    f32* %119 = getelementptr &(f32* %103)[i64 3];
    f32 %120 = load f32* %119;
    f32 %121 = fsub f32 %120, f32 %105;
    f32 %122 = fmul f32 %121, f32 %121;
    f32 %123 = fadd f32 %118, f32 %122;
    f32* %124 = getelementptr &(f32* %103)[i64 4];
    f32 %125 = load f32* %124;
    f32 %126 = fsub f32 %125, f32 %105;
    f32 %127 = fmul f32 %126, f32 %126;
    f32 %128 = fadd f32 %123, f32 %127;
    f32* %129 = getelementptr &(f32* %103)[i64 5];
    f32 %130 = load f32* %129;
    f32 %131 = fsub f32 %130, f32 %105;
    f32 %132 = fmul f32 %131, f32 %131;
    f32 %133 = fadd f32 %128, f32 %132;
    f32* %134 = getelementptr &(f32* %103)[i64 6];
    f32 %135 = load f32* %134;
    f32 %136 = fsub f32 %135, f32 %105;
    f32 %137 = fmul f32 %136, f32 %136;
    f32 %138 = fadd f32 %133, f32 %137;
    f32* %139 = getelementptr &(f32* %103)[i64 7];
    f32 %140 = load f32* %139;
    f32 %141 = fsub f32 %140, f32 %105;
    f32 %142 = fmul f32 %141, f32 %141;
    f32 %143 = fadd f32 %138, f32 %142;
    f32* %144 = getelementptr &(f32* %103)[i64 8];
    f32 %145 = load f32* %144;
    f32 %146 = fsub f32 %145, f32 %105;
    f32 %147 = fmul f32 %146, f32 %146;
    f32 %148 = fadd f32 %143, f32 %147;
    f32* %149 = getelementptr &(f32* %103)[i64 9];
    f32 %150 = load f32* %149;
    f32 %151 = fsub f32 %150, f32 %105;
    f32 %152 = fmul f32 %151, f32 %151;
    f32 %153 = fadd f32 %148, f32 %152;
    f32* %154 = getelementptr &(f32* %103)[i64 10];
    f32 %155 = load f32* %154;
    f32 %156 = fsub f32 %155, f32 %105;
    f32 %157 = fmul f32 %156, f32 %156;
    f32 %158 = fadd f32 %153, f32 %157;
    f32* %159 = getelementptr &(f32* %103)[i64 11];
    f32 %160 = load f32* %159;
    f32 %161 = fsub f32 %160, f32 %105;
    f32 %162 = fmul f32 %161, f32 %161;
    f32 %163 = fadd f32 %158, f32 %162;
    f32* %164 = getelementptr &(f32* %103)[i64 12];
    f32 %165 = load f32* %164;
    f32 %166 = fsub f32 %165, f32 %105;
    f32 %167 = fmul f32 %166, f32 %166;
    f32 %168 = fadd f32 %163, f32 %167;
    f32* %169 = getelementptr &(f32* %103)[i64 13];
    f32 %170 = load f32* %169;
    f32 %171 = fsub f32 %170, f32 %105;
    f32 %172 = fmul f32 %171, f32 %171;
    f32 %173 = fadd f32 %168, f32 %172;
    f32* %174 = getelementptr &(f32* %103)[i64 14];
    f32 %175 = load f32* %174;
    f32 %176 = fsub f32 %175, f32 %105;
    f32 %177 = fmul f32 %176, f32 %176;
    f32 %178 = fadd f32 %173, f32 %177;
    f32* %179 = getelementptr &(f32* %103)[i64 15];
    f32 %180 = load f32* %179;
    f32 %181 = fsub f32 %180, f32 %105;
    f32 %182 = fmul f32 %181, f32 %181;
    f32 %183 = fadd f32 %178, f32 %182;
    store f32* %98 with f32 %183;
    i32 %184 = add i32 %102, i32 16;
    i1 %185 = scmp lt i32 %184, i32 992;
    cbr i1 %185(prob = 0.98), ^indirect1, ^while.body7;
^indirect1:
    f32 %186 = load f32* %98;
    ubr ^while.body6;
^while.body7:
    f32 %187 = load f32* %98;
    f32* %188 = getelementptr &([1000 * f32]* %99)[i64 0][i32 %184];
    f32 %189 = load f32* %188;
    f32 %190 = load f32* %100;
    f32 %191 = fsub f32 %189, f32 %190;
    f32 %192 = fmul f32 %191, f32 %191;
    f32 %193 = fadd f32 %187, f32 %192;
    f32* %194 = getelementptr &(f32* %188)[i64 1];
    f32 %195 = load f32* %194;
    f32 %196 = fsub f32 %195, f32 %190;
    f32 %197 = fmul f32 %196, f32 %196;
    f32 %198 = fadd f32 %193, f32 %197;
    f32* %199 = getelementptr &(f32* %188)[i64 2];
    f32 %200 = load f32* %199;
    f32 %201 = fsub f32 %200, f32 %190;
    f32 %202 = fmul f32 %201, f32 %201;
    f32 %203 = fadd f32 %198, f32 %202;
    f32* %204 = getelementptr &(f32* %188)[i64 3];
    f32 %205 = load f32* %204;
    f32 %206 = fsub f32 %205, f32 %190;
    f32 %207 = fmul f32 %206, f32 %206;
    f32 %208 = fadd f32 %203, f32 %207;
    f32* %209 = getelementptr &(f32* %188)[i64 4];
    f32 %210 = load f32* %209;
    f32 %211 = fsub f32 %210, f32 %190;
    f32 %212 = fmul f32 %211, f32 %211;
    f32 %213 = fadd f32 %208, f32 %212;
    f32* %214 = getelementptr &(f32* %188)[i64 5];
    f32 %215 = load f32* %214;
    f32 %216 = fsub f32 %215, f32 %190;
    f32 %217 = fmul f32 %216, f32 %216;
    f32 %218 = fadd f32 %213, f32 %217;
    f32* %219 = getelementptr &(f32* %188)[i64 6];
    f32 %220 = load f32* %219;
    f32 %221 = fsub f32 %220, f32 %190;
    f32 %222 = fmul f32 %221, f32 %221;
    f32 %223 = fadd f32 %218, f32 %222;
    f32* %224 = getelementptr &(f32* %188)[i64 7];
    f32 %225 = load f32* %224;
    f32 %226 = fsub f32 %225, f32 %190;
    f32 %227 = fmul f32 %226, f32 %226;
    f32 %228 = fadd f32 %223, f32 %227;
    store f32* %98 with f32 %228;
    f32 %229 = load f32* %98;
    f32 %230 = fdiv f32 %229, f32 1000;
    f32 %231 = fadd f32 %230, f32 0.01;
    f32 %232 = fdiv f32 %231, f32 2;
    f32 %233 = fmul f32 %232, f32 %232;
    f32 %234 = fsub f32 %233, f32 %231;
    i1 %235 = fcmp lt f32 %234, f32 0;
    cbr i1 %235(prob = 0.5), ^if.then, ^b3;
^if.then:
    f32 %236 = fneg f32 %234;
    ubr ^b3;
^b3:
    f32 %237 = phi [^while.body7, f32 %234] [^if.then, f32 %236];
    i1 %238 = fcmp gt f32 %237, f32 0.001;
    cbr i1 %238(prob = 0.97), ^while.body8, ^b4;
^while.body8:
    f32 %239 = phi [^b6, f32 %256] [^b3, f32 0];
    f32 %240 = phi [^b6, f32 %257] [^b3, f32 %231];
    f32 %241 = phi [^b6, f32 %258] [^b3, f32 %232];
    f32 %242 = fmul f32 %241, f32 %241;
    i1 %243 = fcmp gt f32 %242, f32 %231;
    cbr i1 %243(prob = 0.5), ^if.then1, ^if.else;
^b4:
    f32 %244 = phi [^b6, f32 %258] [^b3, f32 %232];
    store f32* %98 with f32 %244;
    i32 %245 = add i32 %97, i32 1;
    i1 %246 = scmp lt i32 %245, i32 1000;
    cbr i1 %246(prob = 1), ^while.body5, ^while.body9;
^if.then1:
    f32 %247 = fadd f32 %241, f32 %239;
    f32 %248 = fdiv f32 %247, f32 2;
    ubr ^b5;
^if.else:
    f32 %249 = fadd f32 %241, f32 %240;
    f32 %250 = fdiv f32 %249, f32 2;
    ubr ^b5;
^while.body9:
    i32 %251 = phi [^b4, i32 0] [^while.body11, i32 %393];
    f32 %252 = phi [^b4, f32 %11] [^while.body11, f32 %392];
    [1000 * f32]* %253 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %251];
    f32* %254 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %251];
    f32* %255 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %251];
    ubr ^while.body10;
^b5:
    f32 %256 = phi [^if.else, f32 %241] [^if.then1, f32 %239];
    f32 %257 = phi [^if.else, f32 %240] [^if.then1, f32 %241];
    f32 %258 = phi [^if.else, f32 %250] [^if.then1, f32 %248];
    f32 %259 = fmul f32 %258, f32 %258;
    f32 %260 = fsub f32 %259, f32 %231;
    i1 %261 = fcmp lt f32 %260, f32 0;
    cbr i1 %261(prob = 0.5), ^if.then2, ^b6;
^while.body10:
    f32 %262 = phi [^while.body10, f32 %345] [^while.body9, f32 %252];
    i32 %263 = phi [^while.body10, i32 %346] [^while.body9, i32 0];
    f32* %264 = getelementptr &([1000 * f32]* %253)[i64 0][i32 %263];
    f32 %265 = load f32* %264;
    f32 %266 = load f32* %254;
    f32 %267 = fsub f32 %265, f32 %266;
    f32 %268 = load f32* %255;
    f32 %269 = fdiv f32 %267, f32 %268;
    store f32* %264 with f32 %269;
    f32 %270 = fadd f32 %262, f32 %269;
    f32* %271 = getelementptr &(f32* %264)[i64 1];
    f32 %272 = load f32* %271;
    f32 %273 = fsub f32 %272, f32 %266;
    f32 %274 = fdiv f32 %273, f32 %268;
    store f32* %271 with f32 %274;
    f32 %275 = fadd f32 %270, f32 %274;
    f32* %276 = getelementptr &(f32* %264)[i64 2];
    f32 %277 = load f32* %276;
    f32 %278 = fsub f32 %277, f32 %266;
    f32 %279 = fdiv f32 %278, f32 %268;
    store f32* %276 with f32 %279;
    f32 %280 = fadd f32 %275, f32 %279;
    f32* %281 = getelementptr &(f32* %264)[i64 3];
    f32 %282 = load f32* %281;
    f32 %283 = fsub f32 %282, f32 %266;
    f32 %284 = fdiv f32 %283, f32 %268;
    store f32* %281 with f32 %284;
    f32 %285 = fadd f32 %280, f32 %284;
    f32* %286 = getelementptr &(f32* %264)[i64 4];
    f32 %287 = load f32* %286;
    f32 %288 = fsub f32 %287, f32 %266;
    f32 %289 = fdiv f32 %288, f32 %268;
    store f32* %286 with f32 %289;
    f32 %290 = fadd f32 %285, f32 %289;
    f32* %291 = getelementptr &(f32* %264)[i64 5];
    f32 %292 = load f32* %291;
    f32 %293 = fsub f32 %292, f32 %266;
    f32 %294 = fdiv f32 %293, f32 %268;
    store f32* %291 with f32 %294;
    f32 %295 = fadd f32 %290, f32 %294;
    f32* %296 = getelementptr &(f32* %264)[i64 6];
    f32 %297 = load f32* %296;
    f32 %298 = fsub f32 %297, f32 %266;
    f32 %299 = fdiv f32 %298, f32 %268;
    store f32* %296 with f32 %299;
    f32 %300 = fadd f32 %295, f32 %299;
    f32* %301 = getelementptr &(f32* %264)[i64 7];
    f32 %302 = load f32* %301;
    f32 %303 = fsub f32 %302, f32 %266;
    f32 %304 = fdiv f32 %303, f32 %268;
    store f32* %301 with f32 %304;
    f32 %305 = fadd f32 %300, f32 %304;
    f32* %306 = getelementptr &(f32* %264)[i64 8];
    f32 %307 = load f32* %306;
    f32 %308 = fsub f32 %307, f32 %266;
    f32 %309 = fdiv f32 %308, f32 %268;
    store f32* %306 with f32 %309;
    f32 %310 = fadd f32 %305, f32 %309;
    f32* %311 = getelementptr &(f32* %264)[i64 9];
    f32 %312 = load f32* %311;
    f32 %313 = fsub f32 %312, f32 %266;
    f32 %314 = fdiv f32 %313, f32 %268;
    store f32* %311 with f32 %314;
    f32 %315 = fadd f32 %310, f32 %314;
    f32* %316 = getelementptr &(f32* %264)[i64 10];
    f32 %317 = load f32* %316;
    f32 %318 = fsub f32 %317, f32 %266;
    f32 %319 = fdiv f32 %318, f32 %268;
    store f32* %316 with f32 %319;
    f32 %320 = fadd f32 %315, f32 %319;
    f32* %321 = getelementptr &(f32* %264)[i64 11];
    f32 %322 = load f32* %321;
    f32 %323 = fsub f32 %322, f32 %266;
    f32 %324 = fdiv f32 %323, f32 %268;
    store f32* %321 with f32 %324;
    f32 %325 = fadd f32 %320, f32 %324;
    f32* %326 = getelementptr &(f32* %264)[i64 12];
    f32 %327 = load f32* %326;
    f32 %328 = fsub f32 %327, f32 %266;
    f32 %329 = fdiv f32 %328, f32 %268;
    store f32* %326 with f32 %329;
    f32 %330 = fadd f32 %325, f32 %329;
    f32* %331 = getelementptr &(f32* %264)[i64 13];
    f32 %332 = load f32* %331;
    f32 %333 = fsub f32 %332, f32 %266;
    f32 %334 = fdiv f32 %333, f32 %268;
    store f32* %331 with f32 %334;
    f32 %335 = fadd f32 %330, f32 %334;
    f32* %336 = getelementptr &(f32* %264)[i64 14];
    f32 %337 = load f32* %336;
    f32 %338 = fsub f32 %337, f32 %266;
    f32 %339 = fdiv f32 %338, f32 %268;
    store f32* %336 with f32 %339;
    f32 %340 = fadd f32 %335, f32 %339;
    f32* %341 = getelementptr &(f32* %264)[i64 15];
    f32 %342 = load f32* %341;
    f32 %343 = fsub f32 %342, f32 %266;
    f32 %344 = fdiv f32 %343, f32 %268;
    store f32* %341 with f32 %344;
    f32 %345 = fadd f32 %340, f32 %344;
    i32 %346 = add i32 %263, i32 16;
    i1 %347 = scmp lt i32 %346, i32 992;
    cbr i1 %347(prob = 0.98), ^while.body10, ^while.body11;
^if.then2:
    f32 %348 = fneg f32 %260;
    ubr ^b6;
^b6:
    f32 %349 = phi [^if.then2, f32 %348] [^b5, f32 %260];
    i1 %350 = fcmp gt f32 %349, f32 0.001;
    cbr i1 %350(prob = 0.97), ^while.body8, ^b4;
^while.body11:
    f32* %351 = getelementptr &([1000 * f32]* %253)[i64 0][i32 %346];
    f32 %352 = load f32* %351;
    f32 %353 = load f32* %254;
    f32 %354 = fsub f32 %352, f32 %353;
    f32 %355 = load f32* %255;
    f32 %356 = fdiv f32 %354, f32 %355;
    store f32* %351 with f32 %356;
    f32 %357 = fadd f32 %345, f32 %356;
    f32* %358 = getelementptr &(f32* %351)[i64 1];
    f32 %359 = load f32* %358;
    f32 %360 = fsub f32 %359, f32 %353;
    f32 %361 = fdiv f32 %360, f32 %355;
    store f32* %358 with f32 %361;
    f32 %362 = fadd f32 %357, f32 %361;
    f32* %363 = getelementptr &(f32* %351)[i64 2];
    f32 %364 = load f32* %363;
    f32 %365 = fsub f32 %364, f32 %353;
    f32 %366 = fdiv f32 %365, f32 %355;
    store f32* %363 with f32 %366;
    f32 %367 = fadd f32 %362, f32 %366;
    f32* %368 = getelementptr &(f32* %351)[i64 3];
    f32 %369 = load f32* %368;
    f32 %370 = fsub f32 %369, f32 %353;
    f32 %371 = fdiv f32 %370, f32 %355;
    store f32* %368 with f32 %371;
    f32 %372 = fadd f32 %367, f32 %371;
    f32* %373 = getelementptr &(f32* %351)[i64 4];
    f32 %374 = load f32* %373;
    f32 %375 = fsub f32 %374, f32 %353;
    f32 %376 = fdiv f32 %375, f32 %355;
    store f32* %373 with f32 %376;
    f32 %377 = fadd f32 %372, f32 %376;
    f32* %378 = getelementptr &(f32* %351)[i64 5];
    f32 %379 = load f32* %378;
    f32 %380 = fsub f32 %379, f32 %353;
    f32 %381 = fdiv f32 %380, f32 %355;
    store f32* %378 with f32 %381;
    f32 %382 = fadd f32 %377, f32 %381;
    f32* %383 = getelementptr &(f32* %351)[i64 6];
    f32 %384 = load f32* %383;
    f32 %385 = fsub f32 %384, f32 %353;
    f32 %386 = fdiv f32 %385, f32 %355;
    store f32* %383 with f32 %386;
    f32 %387 = fadd f32 %382, f32 %386;
    f32* %388 = getelementptr &(f32* %351)[i64 7];
    f32 %389 = load f32* %388;
    f32 %390 = fsub f32 %389, f32 %353;
    f32 %391 = fdiv f32 %390, f32 %355;
    store f32* %388 with f32 %391;
    f32 %392 = fadd f32 %387, f32 %391;
    i32 %393 = add i32 %251, i32 1;
    i1 %394 = scmp lt i32 %393, i32 1000;
    cbr i1 %394(prob = 1), ^while.body9, ^b7;
^b7:
    i32 %395 = add i32 %10, i32 1;
    i1 %396 = scmp lt i32 %395, i32 100;
    cbr i1 %396(prob = 0.99), ^while.body1, ^while.body12;
^while.body12:
    i32 %397 = phi [^b7, i32 0] [^while.body14, i32 %476];
    f32 %398 = phi [^b7, f32 %392] [^while.body14, f32 %475];
    [1000 * f32]* %399 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %397];
    ubr ^while.body13;
^while.body13:
    f32 %400 = phi [^while.body13, f32 %449] [^while.body12, f32 %398];
    i32 %401 = phi [^while.body13, i32 %450] [^while.body12, i32 0];
    f32* %402 = getelementptr &([1000 * f32]* %399)[i64 0][i32 %401];
    f32 %403 = load f32* %402;
    f32 %404 = fadd f32 %400, f32 %403;
    f32* %405 = getelementptr &(f32* %402)[i64 1];
    f32 %406 = load f32* %405;
    f32 %407 = fadd f32 %404, f32 %406;
    f32* %408 = getelementptr &(f32* %402)[i64 2];
    f32 %409 = load f32* %408;
    f32 %410 = fadd f32 %407, f32 %409;
    f32* %411 = getelementptr &(f32* %402)[i64 3];
    f32 %412 = load f32* %411;
    f32 %413 = fadd f32 %410, f32 %412;
    f32* %414 = getelementptr &(f32* %402)[i64 4];
    f32 %415 = load f32* %414;
    f32 %416 = fadd f32 %413, f32 %415;
    f32* %417 = getelementptr &(f32* %402)[i64 5];
    f32 %418 = load f32* %417;
    f32 %419 = fadd f32 %416, f32 %418;
    f32* %420 = getelementptr &(f32* %402)[i64 6];
    f32 %421 = load f32* %420;
    f32 %422 = fadd f32 %419, f32 %421;
    f32* %423 = getelementptr &(f32* %402)[i64 7];
    f32 %424 = load f32* %423;
    f32 %425 = fadd f32 %422, f32 %424;
    f32* %426 = getelementptr &(f32* %402)[i64 8];
    f32 %427 = load f32* %426;
    f32 %428 = fadd f32 %425, f32 %427;
    f32* %429 = getelementptr &(f32* %402)[i64 9];
    f32 %430 = load f32* %429;
    f32 %431 = fadd f32 %428, f32 %430;
    f32* %432 = getelementptr &(f32* %402)[i64 10];
    f32 %433 = load f32* %432;
    f32 %434 = fadd f32 %431, f32 %433;
    f32* %435 = getelementptr &(f32* %402)[i64 11];
    f32 %436 = load f32* %435;
    f32 %437 = fadd f32 %434, f32 %436;
    f32* %438 = getelementptr &(f32* %402)[i64 12];
    f32 %439 = load f32* %438;
    f32 %440 = fadd f32 %437, f32 %439;
    f32* %441 = getelementptr &(f32* %402)[i64 13];
    f32 %442 = load f32* %441;
    f32 %443 = fadd f32 %440, f32 %442;
    f32* %444 = getelementptr &(f32* %402)[i64 14];
    f32 %445 = load f32* %444;
    f32 %446 = fadd f32 %443, f32 %445;
    f32* %447 = getelementptr &(f32* %402)[i64 15];
    f32 %448 = load f32* %447;
    f32 %449 = fadd f32 %446, f32 %448;
    i32 %450 = add i32 %401, i32 16;
    i1 %451 = scmp lt i32 %450, i32 992;
    cbr i1 %451(prob = 0.98), ^while.body13, ^while.body14;
^while.body14:
    f32* %452 = getelementptr &([1000 * f32]* %399)[i64 0][i32 %450];
    f32 %453 = load f32* %452;
    f32 %454 = fadd f32 %449, f32 %453;
    f32* %455 = getelementptr &(f32* %452)[i64 1];
    f32 %456 = load f32* %455;
    f32 %457 = fadd f32 %454, f32 %456;
    f32* %458 = getelementptr &(f32* %452)[i64 2];
    f32 %459 = load f32* %458;
    f32 %460 = fadd f32 %457, f32 %459;
    f32* %461 = getelementptr &(f32* %452)[i64 3];
    f32 %462 = load f32* %461;
    f32 %463 = fadd f32 %460, f32 %462;
    f32* %464 = getelementptr &(f32* %452)[i64 4];
    f32 %465 = load f32* %464;
    f32 %466 = fadd f32 %463, f32 %465;
    f32* %467 = getelementptr &(f32* %452)[i64 5];
    f32 %468 = load f32* %467;
    f32 %469 = fadd f32 %466, f32 %468;
    f32* %470 = getelementptr &(f32* %452)[i64 6];
    f32 %471 = load f32* %470;
    f32 %472 = fadd f32 %469, f32 %471;
    f32* %473 = getelementptr &(f32* %452)[i64 7];
    f32 %474 = load f32* %473;
    f32 %475 = fadd f32 %472, f32 %474;
    i32 %476 = add i32 %397, i32 1;
    i1 %477 = scmp lt i32 %476, i32 1000;
    cbr i1 %477(prob = 1), ^while.body12, ^b8;
^b8:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %475);
    ubr ^b1;
}
