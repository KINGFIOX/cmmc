internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [8 * i8]* %0 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [1000 * f32]** %1 = ptradd [8 * i8]* %0, i32 0;
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_1 to [16 * i8]*;
    [1000 * f32]** %3 = ptradd [16 * i8]* %2, i32 0;
    [1000 * f32]** %4 = ptradd [16 * i8]* %2, i32 8;
    [1000 * [1000 * f32]]* %5 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    i8* %6 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    [1000 * f32]* %8 = ptrcast [1000 * f32]* @mean to [1000 * f32]*;
    [1000 * f32]* %9 = ptrcast [1000 * f32]* @var to [1000 * f32]*;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %16];
    i1 %11 = icmp slt i32 %10, i32 1000;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^b:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.body1;
  ^while.body:
    [1000 * f32]* %12 = getelementptr &([1000 * [1000 * f32]]* %5)[i64 0][i32 %10];
    f32* %13 = getelementptr &([1000 * f32]* %12)[i64 0][i64 0];
    i32 %14 = call (f32*) -> i32 @getfarray(f32* %13);
    i1 %15 = icmp neq i32 %14, i32 1000;
    cbr i1 %15(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %16 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %153];
    f32 %18 = phi [^b, f32 0] [^b3, f32 %150];
    store [1000 * f32]** %1 with [1000 * f32]* %8;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %6);
    store [1000 * f32]** %3 with [1000 * f32]* %9;
    store [1000 * f32]** %4 with [1000 * f32]* %8;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %7);
    ubr ^while.body2;
  ^b2:
    i32 %19 = phi [^while.body, i32 %14] [^b4, i32 0];
    ret i32 %19;
  ^while.body2:
    i32 %20 = phi [^while.body1, i32 0] [^while.body4, i32 %151];
    f32 %21 = phi [^while.body1, f32 %18] [^while.body4, f32 %150];
    f32* %22 = getelementptr &([1000 * f32]* %8)[i64 0][i32 %20];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &([1000 * f32]* %9)[i64 0][i32 %20];
    f32 %25 = load f32* %24;
    [1000 * f32]* %26 = getelementptr &([1000 * [1000 * f32]]* %5)[i64 0][i32 %20];
    ubr ^while.body3;
  ^while.body3:
    i32 %27 = phi [^while.body2, i32 0] [^while.body3, i32 %109];
    f32 %28 = phi [^while.body2, f32 %21] [^while.body3, f32 %108];
    f32* %29 = getelementptr &([1000 * f32]* %26)[i64 0][i32 %27];
    f32 %30 = load f32* %29;
    f32 %31 = fsub f32 %30, f32 %23;
    f32 %32 = fdiv f32 %31, f32 %25;
    store f32* %29 with f32 %32;
    f32 %33 = fadd f32 %28, f32 %32;
    f32* %34 = getelementptr &(f32* %29)[i64 1];
    f32 %35 = load f32* %34;
    f32 %36 = fsub f32 %35, f32 %23;
    f32 %37 = fdiv f32 %36, f32 %25;
    f32 %38 = fadd f32 %33, f32 %37;
    store f32* %34 with f32 %37;
    f32* %39 = getelementptr &(f32* %29)[i64 2];
    f32 %40 = load f32* %39;
    f32 %41 = fsub f32 %40, f32 %23;
    f32 %42 = fdiv f32 %41, f32 %25;
    f32 %43 = fadd f32 %38, f32 %42;
    store f32* %39 with f32 %42;
    f32* %44 = getelementptr &(f32* %29)[i64 3];
    f32 %45 = load f32* %44;
    f32 %46 = fsub f32 %45, f32 %23;
    f32 %47 = fdiv f32 %46, f32 %25;
    f32 %48 = fadd f32 %43, f32 %47;
    store f32* %44 with f32 %47;
    f32* %49 = getelementptr &(f32* %29)[i64 4];
    f32 %50 = load f32* %49;
    f32 %51 = fsub f32 %50, f32 %23;
    f32 %52 = fdiv f32 %51, f32 %25;
    f32 %53 = fadd f32 %48, f32 %52;
    store f32* %49 with f32 %52;
    f32* %54 = getelementptr &(f32* %29)[i64 5];
    f32 %55 = load f32* %54;
    f32 %56 = fsub f32 %55, f32 %23;
    f32 %57 = fdiv f32 %56, f32 %25;
    f32 %58 = fadd f32 %53, f32 %57;
    store f32* %54 with f32 %57;
    f32* %59 = getelementptr &(f32* %29)[i64 6];
    f32 %60 = load f32* %59;
    f32 %61 = fsub f32 %60, f32 %23;
    f32 %62 = fdiv f32 %61, f32 %25;
    f32 %63 = fadd f32 %58, f32 %62;
    store f32* %59 with f32 %62;
    f32* %64 = getelementptr &(f32* %29)[i64 7];
    f32 %65 = load f32* %64;
    f32 %66 = fsub f32 %65, f32 %23;
    f32 %67 = fdiv f32 %66, f32 %25;
    f32 %68 = fadd f32 %63, f32 %67;
    store f32* %64 with f32 %67;
    f32* %69 = getelementptr &(f32* %29)[i64 8];
    f32 %70 = load f32* %69;
    f32 %71 = fsub f32 %70, f32 %23;
    f32 %72 = fdiv f32 %71, f32 %25;
    f32 %73 = fadd f32 %68, f32 %72;
    store f32* %69 with f32 %72;
    f32* %74 = getelementptr &(f32* %29)[i64 9];
    f32 %75 = load f32* %74;
    f32 %76 = fsub f32 %75, f32 %23;
    f32 %77 = fdiv f32 %76, f32 %25;
    f32 %78 = fadd f32 %73, f32 %77;
    store f32* %74 with f32 %77;
    f32* %79 = getelementptr &(f32* %29)[i64 10];
    f32 %80 = load f32* %79;
    f32 %81 = fsub f32 %80, f32 %23;
    f32 %82 = fdiv f32 %81, f32 %25;
    f32 %83 = fadd f32 %78, f32 %82;
    store f32* %79 with f32 %82;
    f32* %84 = getelementptr &(f32* %29)[i64 11];
    f32 %85 = load f32* %84;
    f32 %86 = fsub f32 %85, f32 %23;
    f32 %87 = fdiv f32 %86, f32 %25;
    f32 %88 = fadd f32 %83, f32 %87;
    store f32* %84 with f32 %87;
    f32* %89 = getelementptr &(f32* %29)[i64 12];
    f32 %90 = load f32* %89;
    f32 %91 = fsub f32 %90, f32 %23;
    f32 %92 = fdiv f32 %91, f32 %25;
    f32 %93 = fadd f32 %88, f32 %92;
    store f32* %89 with f32 %92;
    f32* %94 = getelementptr &(f32* %29)[i64 13];
    f32 %95 = load f32* %94;
    f32 %96 = fsub f32 %95, f32 %23;
    f32 %97 = fdiv f32 %96, f32 %25;
    f32 %98 = fadd f32 %93, f32 %97;
    store f32* %94 with f32 %97;
    f32* %99 = getelementptr &(f32* %29)[i64 14];
    f32 %100 = load f32* %99;
    f32 %101 = fsub f32 %100, f32 %23;
    f32 %102 = fdiv f32 %101, f32 %25;
    f32 %103 = fadd f32 %98, f32 %102;
    store f32* %99 with f32 %102;
    f32* %104 = getelementptr &(f32* %29)[i64 15];
    f32 %105 = load f32* %104;
    f32 %106 = fsub f32 %105, f32 %23;
    f32 %107 = fdiv f32 %106, f32 %25;
    f32 %108 = fadd f32 %103, f32 %107;
    store f32* %104 with f32 %107;
    i32 %109 = add i32 %27, i32 16;
    i1 %110 = icmp slt i32 %109, i32 992;
    cbr i1 %110(prob = 0.983871), ^while.body3, ^while.body4;
  ^while.body4:
    f32* %111 = getelementptr &(f32* %29)[i64 16];
    f32 %112 = load f32* %111;
    f32 %113 = fsub f32 %112, f32 %23;
    f32 %114 = fdiv f32 %113, f32 %25;
    store f32* %111 with f32 %114;
    f32 %115 = fadd f32 %108, f32 %114;
    f32* %116 = getelementptr &(f32* %29)[i64 17];
    f32 %117 = load f32* %116;
    f32 %118 = fsub f32 %117, f32 %23;
    f32 %119 = fdiv f32 %118, f32 %25;
    f32 %120 = fadd f32 %115, f32 %119;
    store f32* %116 with f32 %119;
    f32* %121 = getelementptr &(f32* %29)[i64 18];
    f32 %122 = load f32* %121;
    f32 %123 = fsub f32 %122, f32 %23;
    f32 %124 = fdiv f32 %123, f32 %25;
    f32 %125 = fadd f32 %120, f32 %124;
    store f32* %121 with f32 %124;
    f32* %126 = getelementptr &(f32* %29)[i64 19];
    f32 %127 = load f32* %126;
    f32 %128 = fsub f32 %127, f32 %23;
    f32 %129 = fdiv f32 %128, f32 %25;
    f32 %130 = fadd f32 %125, f32 %129;
    store f32* %126 with f32 %129;
    f32* %131 = getelementptr &(f32* %29)[i64 20];
    f32 %132 = load f32* %131;
    f32 %133 = fsub f32 %132, f32 %23;
    f32 %134 = fdiv f32 %133, f32 %25;
    f32 %135 = fadd f32 %130, f32 %134;
    store f32* %131 with f32 %134;
    f32* %136 = getelementptr &(f32* %29)[i64 21];
    f32 %137 = load f32* %136;
    f32 %138 = fsub f32 %137, f32 %23;
    f32 %139 = fdiv f32 %138, f32 %25;
    f32 %140 = fadd f32 %135, f32 %139;
    store f32* %136 with f32 %139;
    f32* %141 = getelementptr &(f32* %29)[i64 22];
    f32 %142 = load f32* %141;
    f32 %143 = fsub f32 %142, f32 %23;
    f32 %144 = fdiv f32 %143, f32 %25;
    f32 %145 = fadd f32 %140, f32 %144;
    store f32* %141 with f32 %144;
    f32* %146 = getelementptr &(f32* %29)[i64 23];
    f32 %147 = load f32* %146;
    f32 %148 = fsub f32 %147, f32 %23;
    f32 %149 = fdiv f32 %148, f32 %25;
    f32 %150 = fadd f32 %145, f32 %149;
    store f32* %146 with f32 %149;
    i32 %151 = add i32 %20, i32 1;
    i1 %152 = icmp slt i32 %151, i32 1000;
    cbr i1 %152(prob = 0.999), ^while.body2, ^b3;
  ^b3:
    i32 %153 = add i32 %17, i32 1;
    i1 %154 = icmp slt i32 %153, i32 100;
    cbr i1 %154(prob = 0.99), ^while.body1, ^while.body5;
  ^while.body5:
    i32 %155 = phi [^b3, i32 0] [^while.body7, i32 %474];
    f32 %156 = phi [^b3, f32 %150] [^while.body7, f32 %473];
    [1000 * f32]* %157 = getelementptr &([1000 * [1000 * f32]]* %5)[i64 0][i32 %155];
    ubr ^while.body6;
  ^while.body6:
    i32 %158 = phi [^while.body5, i32 0] [^while.body6, i32 %352];
    f32 %159 = phi [^while.body5, f32 %156] [^while.body6, f32 %351];
    f32* %160 = getelementptr &([1000 * f32]* %157)[i64 0][i32 %158];
    f32 %161 = load f32* %160;
    f32 %162 = fadd f32 %159, f32 %161;
    f32* %163 = getelementptr &(f32* %160)[i64 1];
    f32 %164 = load f32* %163;
    f32 %165 = fadd f32 %162, f32 %164;
    f32* %166 = getelementptr &(f32* %160)[i64 2];
    f32 %167 = load f32* %166;
    f32 %168 = fadd f32 %165, f32 %167;
    f32* %169 = getelementptr &(f32* %160)[i64 3];
    f32 %170 = load f32* %169;
    f32 %171 = fadd f32 %168, f32 %170;
    f32* %172 = getelementptr &(f32* %160)[i64 4];
    f32 %173 = load f32* %172;
    f32 %174 = fadd f32 %171, f32 %173;
    f32* %175 = getelementptr &(f32* %160)[i64 5];
    f32 %176 = load f32* %175;
    f32 %177 = fadd f32 %174, f32 %176;
    f32* %178 = getelementptr &(f32* %160)[i64 6];
    f32 %179 = load f32* %178;
    f32 %180 = fadd f32 %177, f32 %179;
    f32* %181 = getelementptr &(f32* %160)[i64 7];
    f32 %182 = load f32* %181;
    f32 %183 = fadd f32 %180, f32 %182;
    f32* %184 = getelementptr &(f32* %160)[i64 8];
    f32 %185 = load f32* %184;
    f32 %186 = fadd f32 %183, f32 %185;
    f32* %187 = getelementptr &(f32* %160)[i64 9];
    f32 %188 = load f32* %187;
    f32 %189 = fadd f32 %186, f32 %188;
    f32* %190 = getelementptr &(f32* %160)[i64 10];
    f32 %191 = load f32* %190;
    f32 %192 = fadd f32 %189, f32 %191;
    f32* %193 = getelementptr &(f32* %160)[i64 11];
    f32 %194 = load f32* %193;
    f32 %195 = fadd f32 %192, f32 %194;
    f32* %196 = getelementptr &(f32* %160)[i64 12];
    f32 %197 = load f32* %196;
    f32 %198 = fadd f32 %195, f32 %197;
    f32* %199 = getelementptr &(f32* %160)[i64 13];
    f32 %200 = load f32* %199;
    f32 %201 = fadd f32 %198, f32 %200;
    f32* %202 = getelementptr &(f32* %160)[i64 14];
    f32 %203 = load f32* %202;
    f32 %204 = fadd f32 %201, f32 %203;
    f32* %205 = getelementptr &(f32* %160)[i64 15];
    f32 %206 = load f32* %205;
    f32 %207 = fadd f32 %204, f32 %206;
    f32* %208 = getelementptr &(f32* %160)[i64 16];
    f32 %209 = load f32* %208;
    f32 %210 = fadd f32 %207, f32 %209;
    f32* %211 = getelementptr &(f32* %160)[i64 17];
    f32 %212 = load f32* %211;
    f32 %213 = fadd f32 %210, f32 %212;
    f32* %214 = getelementptr &(f32* %160)[i64 18];
    f32 %215 = load f32* %214;
    f32 %216 = fadd f32 %213, f32 %215;
    f32* %217 = getelementptr &(f32* %160)[i64 19];
    f32 %218 = load f32* %217;
    f32 %219 = fadd f32 %216, f32 %218;
    f32* %220 = getelementptr &(f32* %160)[i64 20];
    f32 %221 = load f32* %220;
    f32 %222 = fadd f32 %219, f32 %221;
    f32* %223 = getelementptr &(f32* %160)[i64 21];
    f32 %224 = load f32* %223;
    f32 %225 = fadd f32 %222, f32 %224;
    f32* %226 = getelementptr &(f32* %160)[i64 22];
    f32 %227 = load f32* %226;
    f32 %228 = fadd f32 %225, f32 %227;
    f32* %229 = getelementptr &(f32* %160)[i64 23];
    f32 %230 = load f32* %229;
    f32 %231 = fadd f32 %228, f32 %230;
    f32* %232 = getelementptr &(f32* %160)[i64 24];
    f32 %233 = load f32* %232;
    f32 %234 = fadd f32 %231, f32 %233;
    f32* %235 = getelementptr &(f32* %160)[i64 25];
    f32 %236 = load f32* %235;
    f32 %237 = fadd f32 %234, f32 %236;
    f32* %238 = getelementptr &(f32* %160)[i64 26];
    f32 %239 = load f32* %238;
    f32 %240 = fadd f32 %237, f32 %239;
    f32* %241 = getelementptr &(f32* %160)[i64 27];
    f32 %242 = load f32* %241;
    f32 %243 = fadd f32 %240, f32 %242;
    f32* %244 = getelementptr &(f32* %160)[i64 28];
    f32 %245 = load f32* %244;
    f32 %246 = fadd f32 %243, f32 %245;
    f32* %247 = getelementptr &(f32* %160)[i64 29];
    f32 %248 = load f32* %247;
    f32 %249 = fadd f32 %246, f32 %248;
    f32* %250 = getelementptr &(f32* %160)[i64 30];
    f32 %251 = load f32* %250;
    f32 %252 = fadd f32 %249, f32 %251;
    f32* %253 = getelementptr &(f32* %160)[i64 31];
    f32 %254 = load f32* %253;
    f32 %255 = fadd f32 %252, f32 %254;
    f32* %256 = getelementptr &(f32* %160)[i64 32];
    f32 %257 = load f32* %256;
    f32 %258 = fadd f32 %255, f32 %257;
    f32* %259 = getelementptr &(f32* %160)[i64 33];
    f32 %260 = load f32* %259;
    f32 %261 = fadd f32 %258, f32 %260;
    f32* %262 = getelementptr &(f32* %160)[i64 34];
    f32 %263 = load f32* %262;
    f32 %264 = fadd f32 %261, f32 %263;
    f32* %265 = getelementptr &(f32* %160)[i64 35];
    f32 %266 = load f32* %265;
    f32 %267 = fadd f32 %264, f32 %266;
    f32* %268 = getelementptr &(f32* %160)[i64 36];
    f32 %269 = load f32* %268;
    f32 %270 = fadd f32 %267, f32 %269;
    f32* %271 = getelementptr &(f32* %160)[i64 37];
    f32 %272 = load f32* %271;
    f32 %273 = fadd f32 %270, f32 %272;
    f32* %274 = getelementptr &(f32* %160)[i64 38];
    f32 %275 = load f32* %274;
    f32 %276 = fadd f32 %273, f32 %275;
    f32* %277 = getelementptr &(f32* %160)[i64 39];
    f32 %278 = load f32* %277;
    f32 %279 = fadd f32 %276, f32 %278;
    f32* %280 = getelementptr &(f32* %160)[i64 40];
    f32 %281 = load f32* %280;
    f32 %282 = fadd f32 %279, f32 %281;
    f32* %283 = getelementptr &(f32* %160)[i64 41];
    f32 %284 = load f32* %283;
    f32 %285 = fadd f32 %282, f32 %284;
    f32* %286 = getelementptr &(f32* %160)[i64 42];
    f32 %287 = load f32* %286;
    f32 %288 = fadd f32 %285, f32 %287;
    f32* %289 = getelementptr &(f32* %160)[i64 43];
    f32 %290 = load f32* %289;
    f32 %291 = fadd f32 %288, f32 %290;
    f32* %292 = getelementptr &(f32* %160)[i64 44];
    f32 %293 = load f32* %292;
    f32 %294 = fadd f32 %291, f32 %293;
    f32* %295 = getelementptr &(f32* %160)[i64 45];
    f32 %296 = load f32* %295;
    f32 %297 = fadd f32 %294, f32 %296;
    f32* %298 = getelementptr &(f32* %160)[i64 46];
    f32 %299 = load f32* %298;
    f32 %300 = fadd f32 %297, f32 %299;
    f32* %301 = getelementptr &(f32* %160)[i64 47];
    f32 %302 = load f32* %301;
    f32 %303 = fadd f32 %300, f32 %302;
    f32* %304 = getelementptr &(f32* %160)[i64 48];
    f32 %305 = load f32* %304;
    f32 %306 = fadd f32 %303, f32 %305;
    f32* %307 = getelementptr &(f32* %160)[i64 49];
    f32 %308 = load f32* %307;
    f32 %309 = fadd f32 %306, f32 %308;
    f32* %310 = getelementptr &(f32* %160)[i64 50];
    f32 %311 = load f32* %310;
    f32 %312 = fadd f32 %309, f32 %311;
    f32* %313 = getelementptr &(f32* %160)[i64 51];
    f32 %314 = load f32* %313;
    f32 %315 = fadd f32 %312, f32 %314;
    f32* %316 = getelementptr &(f32* %160)[i64 52];
    f32 %317 = load f32* %316;
    f32 %318 = fadd f32 %315, f32 %317;
    f32* %319 = getelementptr &(f32* %160)[i64 53];
    f32 %320 = load f32* %319;
    f32 %321 = fadd f32 %318, f32 %320;
    f32* %322 = getelementptr &(f32* %160)[i64 54];
    f32 %323 = load f32* %322;
    f32 %324 = fadd f32 %321, f32 %323;
    f32* %325 = getelementptr &(f32* %160)[i64 55];
    f32 %326 = load f32* %325;
    f32 %327 = fadd f32 %324, f32 %326;
    f32* %328 = getelementptr &(f32* %160)[i64 56];
    f32 %329 = load f32* %328;
    f32 %330 = fadd f32 %327, f32 %329;
    f32* %331 = getelementptr &(f32* %160)[i64 57];
    f32 %332 = load f32* %331;
    f32 %333 = fadd f32 %330, f32 %332;
    f32* %334 = getelementptr &(f32* %160)[i64 58];
    f32 %335 = load f32* %334;
    f32 %336 = fadd f32 %333, f32 %335;
    f32* %337 = getelementptr &(f32* %160)[i64 59];
    f32 %338 = load f32* %337;
    f32 %339 = fadd f32 %336, f32 %338;
    f32* %340 = getelementptr &(f32* %160)[i64 60];
    f32 %341 = load f32* %340;
    f32 %342 = fadd f32 %339, f32 %341;
    f32* %343 = getelementptr &(f32* %160)[i64 61];
    f32 %344 = load f32* %343;
    f32 %345 = fadd f32 %342, f32 %344;
    f32* %346 = getelementptr &(f32* %160)[i64 62];
    f32 %347 = load f32* %346;
    f32 %348 = fadd f32 %345, f32 %347;
    f32* %349 = getelementptr &(f32* %160)[i64 63];
    f32 %350 = load f32* %349;
    f32 %351 = fadd f32 %348, f32 %350;
    i32 %352 = add i32 %158, i32 64;
    i1 %353 = icmp slt i32 %352, i32 960;
    cbr i1 %353(prob = 0.933333), ^while.body6, ^while.body7;
  ^while.body7:
    f32* %354 = getelementptr &(f32* %160)[i64 64];
    f32 %355 = load f32* %354;
    f32 %356 = fadd f32 %351, f32 %355;
    f32* %357 = getelementptr &(f32* %160)[i64 65];
    f32 %358 = load f32* %357;
    f32 %359 = fadd f32 %356, f32 %358;
    f32* %360 = getelementptr &(f32* %160)[i64 66];
    f32 %361 = load f32* %360;
    f32 %362 = fadd f32 %359, f32 %361;
    f32* %363 = getelementptr &(f32* %160)[i64 67];
    f32 %364 = load f32* %363;
    f32 %365 = fadd f32 %362, f32 %364;
    f32* %366 = getelementptr &(f32* %160)[i64 68];
    f32 %367 = load f32* %366;
    f32 %368 = fadd f32 %365, f32 %367;
    f32* %369 = getelementptr &(f32* %160)[i64 69];
    f32 %370 = load f32* %369;
    f32 %371 = fadd f32 %368, f32 %370;
    f32* %372 = getelementptr &(f32* %160)[i64 70];
    f32 %373 = load f32* %372;
    f32 %374 = fadd f32 %371, f32 %373;
    f32* %375 = getelementptr &(f32* %160)[i64 71];
    f32 %376 = load f32* %375;
    f32 %377 = fadd f32 %374, f32 %376;
    f32* %378 = getelementptr &(f32* %160)[i64 72];
    f32 %379 = load f32* %378;
    f32 %380 = fadd f32 %377, f32 %379;
    f32* %381 = getelementptr &(f32* %160)[i64 73];
    f32 %382 = load f32* %381;
    f32 %383 = fadd f32 %380, f32 %382;
    f32* %384 = getelementptr &(f32* %160)[i64 74];
    f32 %385 = load f32* %384;
    f32 %386 = fadd f32 %383, f32 %385;
    f32* %387 = getelementptr &(f32* %160)[i64 75];
    f32 %388 = load f32* %387;
    f32 %389 = fadd f32 %386, f32 %388;
    f32* %390 = getelementptr &(f32* %160)[i64 76];
    f32 %391 = load f32* %390;
    f32 %392 = fadd f32 %389, f32 %391;
    f32* %393 = getelementptr &(f32* %160)[i64 77];
    f32 %394 = load f32* %393;
    f32 %395 = fadd f32 %392, f32 %394;
    f32* %396 = getelementptr &(f32* %160)[i64 78];
    f32 %397 = load f32* %396;
    f32 %398 = fadd f32 %395, f32 %397;
    f32* %399 = getelementptr &(f32* %160)[i64 79];
    f32 %400 = load f32* %399;
    f32 %401 = fadd f32 %398, f32 %400;
    f32* %402 = getelementptr &(f32* %160)[i64 80];
    f32 %403 = load f32* %402;
    f32 %404 = fadd f32 %401, f32 %403;
    f32* %405 = getelementptr &(f32* %160)[i64 81];
    f32 %406 = load f32* %405;
    f32 %407 = fadd f32 %404, f32 %406;
    f32* %408 = getelementptr &(f32* %160)[i64 82];
    f32 %409 = load f32* %408;
    f32 %410 = fadd f32 %407, f32 %409;
    f32* %411 = getelementptr &(f32* %160)[i64 83];
    f32 %412 = load f32* %411;
    f32 %413 = fadd f32 %410, f32 %412;
    f32* %414 = getelementptr &(f32* %160)[i64 84];
    f32 %415 = load f32* %414;
    f32 %416 = fadd f32 %413, f32 %415;
    f32* %417 = getelementptr &(f32* %160)[i64 85];
    f32 %418 = load f32* %417;
    f32 %419 = fadd f32 %416, f32 %418;
    f32* %420 = getelementptr &(f32* %160)[i64 86];
    f32 %421 = load f32* %420;
    f32 %422 = fadd f32 %419, f32 %421;
    f32* %423 = getelementptr &(f32* %160)[i64 87];
    f32 %424 = load f32* %423;
    f32 %425 = fadd f32 %422, f32 %424;
    f32* %426 = getelementptr &(f32* %160)[i64 88];
    f32 %427 = load f32* %426;
    f32 %428 = fadd f32 %425, f32 %427;
    f32* %429 = getelementptr &(f32* %160)[i64 89];
    f32 %430 = load f32* %429;
    f32 %431 = fadd f32 %428, f32 %430;
    f32* %432 = getelementptr &(f32* %160)[i64 90];
    f32 %433 = load f32* %432;
    f32 %434 = fadd f32 %431, f32 %433;
    f32* %435 = getelementptr &(f32* %160)[i64 91];
    f32 %436 = load f32* %435;
    f32 %437 = fadd f32 %434, f32 %436;
    f32* %438 = getelementptr &(f32* %160)[i64 92];
    f32 %439 = load f32* %438;
    f32 %440 = fadd f32 %437, f32 %439;
    f32* %441 = getelementptr &(f32* %160)[i64 93];
    f32 %442 = load f32* %441;
    f32 %443 = fadd f32 %440, f32 %442;
    f32* %444 = getelementptr &(f32* %160)[i64 94];
    f32 %445 = load f32* %444;
    f32 %446 = fadd f32 %443, f32 %445;
    f32* %447 = getelementptr &(f32* %160)[i64 95];
    f32 %448 = load f32* %447;
    f32 %449 = fadd f32 %446, f32 %448;
    f32* %450 = getelementptr &(f32* %160)[i64 96];
    f32 %451 = load f32* %450;
    f32 %452 = fadd f32 %449, f32 %451;
    f32* %453 = getelementptr &(f32* %160)[i64 97];
    f32 %454 = load f32* %453;
    f32 %455 = fadd f32 %452, f32 %454;
    f32* %456 = getelementptr &(f32* %160)[i64 98];
    f32 %457 = load f32* %456;
    f32 %458 = fadd f32 %455, f32 %457;
    f32* %459 = getelementptr &(f32* %160)[i64 99];
    f32 %460 = load f32* %459;
    f32 %461 = fadd f32 %458, f32 %460;
    f32* %462 = getelementptr &(f32* %160)[i64 100];
    f32 %463 = load f32* %462;
    f32 %464 = fadd f32 %461, f32 %463;
    f32* %465 = getelementptr &(f32* %160)[i64 101];
    f32 %466 = load f32* %465;
    f32 %467 = fadd f32 %464, f32 %466;
    f32* %468 = getelementptr &(f32* %160)[i64 102];
    f32 %469 = load f32* %468;
    f32 %470 = fadd f32 %467, f32 %469;
    f32* %471 = getelementptr &(f32* %160)[i64 103];
    f32 %472 = load f32* %471;
    f32 %473 = fadd f32 %470, f32 %472;
    i32 %474 = add i32 %155, i32 1;
    i1 %475 = icmp slt i32 %474, i32 1000;
    cbr i1 %475(prob = 0.999), ^while.body5, ^b4;
  ^b4:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %473);
    ubr ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [1000 * f32]** %3 = ptradd [8 * i8]* %2, i32 0;
    [1000 * f32]* %4 = load [1000 * f32]** %3;
    [1000 * [1000 * f32]]* %5 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    ubr ^b1;
  ^b1:
    i32 %6 = phi [^b, i32 %0] [^while.body1, i32 %326];
    f32* %7 = getelementptr &([1000 * f32]* %4)[i64 0][i32 %6];
    [1000 * f32]* %8 = getelementptr &([1000 * [1000 * f32]]* %5)[i64 0][i32 %6];
    ubr ^while.body;
  ^while.body:
    f32 %9 = phi [^b1, f32 0] [^while.body, f32 %202];
    i32 %10 = phi [^b1, i32 0] [^while.body, i32 %203];
    f32* %11 = getelementptr &([1000 * f32]* %8)[i64 0][i32 %10];
    f32 %12 = load f32* %11;
    f32 %13 = fadd f32 %9, f32 %12;
    f32* %14 = getelementptr &(f32* %11)[i64 1];
    f32 %15 = load f32* %14;
    f32 %16 = fadd f32 %13, f32 %15;
    f32* %17 = getelementptr &(f32* %11)[i64 2];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %16, f32 %18;
    f32* %20 = getelementptr &(f32* %11)[i64 3];
    f32 %21 = load f32* %20;
    f32 %22 = fadd f32 %19, f32 %21;
    f32* %23 = getelementptr &(f32* %11)[i64 4];
    f32 %24 = load f32* %23;
    f32 %25 = fadd f32 %22, f32 %24;
    f32* %26 = getelementptr &(f32* %11)[i64 5];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %11)[i64 6];
    f32 %30 = load f32* %29;
    f32 %31 = fadd f32 %28, f32 %30;
    f32* %32 = getelementptr &(f32* %11)[i64 7];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %11)[i64 8];
    f32 %36 = load f32* %35;
    f32 %37 = fadd f32 %34, f32 %36;
    f32* %38 = getelementptr &(f32* %11)[i64 9];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %11)[i64 10];
    f32 %42 = load f32* %41;
    f32 %43 = fadd f32 %40, f32 %42;
    f32* %44 = getelementptr &(f32* %11)[i64 11];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %11)[i64 12];
    f32 %48 = load f32* %47;
    f32 %49 = fadd f32 %46, f32 %48;
    f32* %50 = getelementptr &(f32* %11)[i64 13];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %11)[i64 14];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &(f32* %11)[i64 15];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %11)[i64 16];
    f32 %60 = load f32* %59;
    f32 %61 = fadd f32 %58, f32 %60;
    f32* %62 = getelementptr &(f32* %11)[i64 17];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32* %65 = getelementptr &(f32* %11)[i64 18];
    f32 %66 = load f32* %65;
    f32 %67 = fadd f32 %64, f32 %66;
    f32* %68 = getelementptr &(f32* %11)[i64 19];
    f32 %69 = load f32* %68;
    f32 %70 = fadd f32 %67, f32 %69;
    f32* %71 = getelementptr &(f32* %11)[i64 20];
    f32 %72 = load f32* %71;
    f32 %73 = fadd f32 %70, f32 %72;
    f32* %74 = getelementptr &(f32* %11)[i64 21];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    f32* %77 = getelementptr &(f32* %11)[i64 22];
    f32 %78 = load f32* %77;
    f32 %79 = fadd f32 %76, f32 %78;
    f32* %80 = getelementptr &(f32* %11)[i64 23];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %79, f32 %81;
    f32* %83 = getelementptr &(f32* %11)[i64 24];
    f32 %84 = load f32* %83;
    f32 %85 = fadd f32 %82, f32 %84;
    f32* %86 = getelementptr &(f32* %11)[i64 25];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    f32* %89 = getelementptr &(f32* %11)[i64 26];
    f32 %90 = load f32* %89;
    f32 %91 = fadd f32 %88, f32 %90;
    f32* %92 = getelementptr &(f32* %11)[i64 27];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %91, f32 %93;
    f32* %95 = getelementptr &(f32* %11)[i64 28];
    f32 %96 = load f32* %95;
    f32 %97 = fadd f32 %94, f32 %96;
    f32* %98 = getelementptr &(f32* %11)[i64 29];
    f32 %99 = load f32* %98;
    f32 %100 = fadd f32 %97, f32 %99;
    f32* %101 = getelementptr &(f32* %11)[i64 30];
    f32 %102 = load f32* %101;
    f32 %103 = fadd f32 %100, f32 %102;
    f32* %104 = getelementptr &(f32* %11)[i64 31];
    f32 %105 = load f32* %104;
    f32 %106 = fadd f32 %103, f32 %105;
    f32* %107 = getelementptr &(f32* %11)[i64 32];
    f32 %108 = load f32* %107;
    f32 %109 = fadd f32 %106, f32 %108;
    f32* %110 = getelementptr &(f32* %11)[i64 33];
    f32 %111 = load f32* %110;
    f32 %112 = fadd f32 %109, f32 %111;
    f32* %113 = getelementptr &(f32* %11)[i64 34];
    f32 %114 = load f32* %113;
    f32 %115 = fadd f32 %112, f32 %114;
    f32* %116 = getelementptr &(f32* %11)[i64 35];
    f32 %117 = load f32* %116;
    f32 %118 = fadd f32 %115, f32 %117;
    f32* %119 = getelementptr &(f32* %11)[i64 36];
    f32 %120 = load f32* %119;
    f32 %121 = fadd f32 %118, f32 %120;
    f32* %122 = getelementptr &(f32* %11)[i64 37];
    f32 %123 = load f32* %122;
    f32 %124 = fadd f32 %121, f32 %123;
    f32* %125 = getelementptr &(f32* %11)[i64 38];
    f32 %126 = load f32* %125;
    f32 %127 = fadd f32 %124, f32 %126;
    f32* %128 = getelementptr &(f32* %11)[i64 39];
    f32 %129 = load f32* %128;
    f32 %130 = fadd f32 %127, f32 %129;
    f32* %131 = getelementptr &(f32* %11)[i64 40];
    f32 %132 = load f32* %131;
    f32 %133 = fadd f32 %130, f32 %132;
    f32* %134 = getelementptr &(f32* %11)[i64 41];
    f32 %135 = load f32* %134;
    f32 %136 = fadd f32 %133, f32 %135;
    f32* %137 = getelementptr &(f32* %11)[i64 42];
    f32 %138 = load f32* %137;
    f32 %139 = fadd f32 %136, f32 %138;
    f32* %140 = getelementptr &(f32* %11)[i64 43];
    f32 %141 = load f32* %140;
    f32 %142 = fadd f32 %139, f32 %141;
    f32* %143 = getelementptr &(f32* %11)[i64 44];
    f32 %144 = load f32* %143;
    f32 %145 = fadd f32 %142, f32 %144;
    f32* %146 = getelementptr &(f32* %11)[i64 45];
    f32 %147 = load f32* %146;
    f32 %148 = fadd f32 %145, f32 %147;
    f32* %149 = getelementptr &(f32* %11)[i64 46];
    f32 %150 = load f32* %149;
    f32 %151 = fadd f32 %148, f32 %150;
    f32* %152 = getelementptr &(f32* %11)[i64 47];
    f32 %153 = load f32* %152;
    f32 %154 = fadd f32 %151, f32 %153;
    f32* %155 = getelementptr &(f32* %11)[i64 48];
    f32 %156 = load f32* %155;
    f32 %157 = fadd f32 %154, f32 %156;
    f32* %158 = getelementptr &(f32* %11)[i64 49];
    f32 %159 = load f32* %158;
    f32 %160 = fadd f32 %157, f32 %159;
    f32* %161 = getelementptr &(f32* %11)[i64 50];
    f32 %162 = load f32* %161;
    f32 %163 = fadd f32 %160, f32 %162;
    f32* %164 = getelementptr &(f32* %11)[i64 51];
    f32 %165 = load f32* %164;
    f32 %166 = fadd f32 %163, f32 %165;
    f32* %167 = getelementptr &(f32* %11)[i64 52];
    f32 %168 = load f32* %167;
    f32 %169 = fadd f32 %166, f32 %168;
    f32* %170 = getelementptr &(f32* %11)[i64 53];
    f32 %171 = load f32* %170;
    f32 %172 = fadd f32 %169, f32 %171;
    f32* %173 = getelementptr &(f32* %11)[i64 54];
    f32 %174 = load f32* %173;
    f32 %175 = fadd f32 %172, f32 %174;
    f32* %176 = getelementptr &(f32* %11)[i64 55];
    f32 %177 = load f32* %176;
    f32 %178 = fadd f32 %175, f32 %177;
    f32* %179 = getelementptr &(f32* %11)[i64 56];
    f32 %180 = load f32* %179;
    f32 %181 = fadd f32 %178, f32 %180;
    f32* %182 = getelementptr &(f32* %11)[i64 57];
    f32 %183 = load f32* %182;
    f32 %184 = fadd f32 %181, f32 %183;
    f32* %185 = getelementptr &(f32* %11)[i64 58];
    f32 %186 = load f32* %185;
    f32 %187 = fadd f32 %184, f32 %186;
    f32* %188 = getelementptr &(f32* %11)[i64 59];
    f32 %189 = load f32* %188;
    f32 %190 = fadd f32 %187, f32 %189;
    f32* %191 = getelementptr &(f32* %11)[i64 60];
    f32 %192 = load f32* %191;
    f32 %193 = fadd f32 %190, f32 %192;
    f32* %194 = getelementptr &(f32* %11)[i64 61];
    f32 %195 = load f32* %194;
    f32 %196 = fadd f32 %193, f32 %195;
    f32* %197 = getelementptr &(f32* %11)[i64 62];
    f32 %198 = load f32* %197;
    f32 %199 = fadd f32 %196, f32 %198;
    f32* %200 = getelementptr &(f32* %11)[i64 63];
    f32 %201 = load f32* %200;
    f32 %202 = fadd f32 %199, f32 %201;
    i32 %203 = add i32 %10, i32 64;
    i1 %204 = icmp slt i32 %203, i32 960;
    cbr i1 %204(prob = 0.933333), ^while.body, ^while.body1;
  ^while.body1:
    f32* %205 = getelementptr &(f32* %11)[i64 64];
    f32 %206 = load f32* %205;
    f32 %207 = fadd f32 %202, f32 %206;
    f32* %208 = getelementptr &(f32* %11)[i64 65];
    f32 %209 = load f32* %208;
    f32 %210 = fadd f32 %207, f32 %209;
    f32* %211 = getelementptr &(f32* %11)[i64 66];
    f32 %212 = load f32* %211;
    f32 %213 = fadd f32 %210, f32 %212;
    f32* %214 = getelementptr &(f32* %11)[i64 67];
    f32 %215 = load f32* %214;
    f32 %216 = fadd f32 %213, f32 %215;
    f32* %217 = getelementptr &(f32* %11)[i64 68];
    f32 %218 = load f32* %217;
    f32 %219 = fadd f32 %216, f32 %218;
    f32* %220 = getelementptr &(f32* %11)[i64 69];
    f32 %221 = load f32* %220;
    f32 %222 = fadd f32 %219, f32 %221;
    f32* %223 = getelementptr &(f32* %11)[i64 70];
    f32 %224 = load f32* %223;
    f32 %225 = fadd f32 %222, f32 %224;
    f32* %226 = getelementptr &(f32* %11)[i64 71];
    f32 %227 = load f32* %226;
    f32 %228 = fadd f32 %225, f32 %227;
    f32* %229 = getelementptr &(f32* %11)[i64 72];
    f32 %230 = load f32* %229;
    f32 %231 = fadd f32 %228, f32 %230;
    f32* %232 = getelementptr &(f32* %11)[i64 73];
    f32 %233 = load f32* %232;
    f32 %234 = fadd f32 %231, f32 %233;
    f32* %235 = getelementptr &(f32* %11)[i64 74];
    f32 %236 = load f32* %235;
    f32 %237 = fadd f32 %234, f32 %236;
    f32* %238 = getelementptr &(f32* %11)[i64 75];
    f32 %239 = load f32* %238;
    f32 %240 = fadd f32 %237, f32 %239;
    f32* %241 = getelementptr &(f32* %11)[i64 76];
    f32 %242 = load f32* %241;
    f32 %243 = fadd f32 %240, f32 %242;
    f32* %244 = getelementptr &(f32* %11)[i64 77];
    f32 %245 = load f32* %244;
    f32 %246 = fadd f32 %243, f32 %245;
    f32* %247 = getelementptr &(f32* %11)[i64 78];
    f32 %248 = load f32* %247;
    f32 %249 = fadd f32 %246, f32 %248;
    f32* %250 = getelementptr &(f32* %11)[i64 79];
    f32 %251 = load f32* %250;
    f32 %252 = fadd f32 %249, f32 %251;
    f32* %253 = getelementptr &(f32* %11)[i64 80];
    f32 %254 = load f32* %253;
    f32 %255 = fadd f32 %252, f32 %254;
    f32* %256 = getelementptr &(f32* %11)[i64 81];
    f32 %257 = load f32* %256;
    f32 %258 = fadd f32 %255, f32 %257;
    f32* %259 = getelementptr &(f32* %11)[i64 82];
    f32 %260 = load f32* %259;
    f32 %261 = fadd f32 %258, f32 %260;
    f32* %262 = getelementptr &(f32* %11)[i64 83];
    f32 %263 = load f32* %262;
    f32 %264 = fadd f32 %261, f32 %263;
    f32* %265 = getelementptr &(f32* %11)[i64 84];
    f32 %266 = load f32* %265;
    f32 %267 = fadd f32 %264, f32 %266;
    f32* %268 = getelementptr &(f32* %11)[i64 85];
    f32 %269 = load f32* %268;
    f32 %270 = fadd f32 %267, f32 %269;
    f32* %271 = getelementptr &(f32* %11)[i64 86];
    f32 %272 = load f32* %271;
    f32 %273 = fadd f32 %270, f32 %272;
    f32* %274 = getelementptr &(f32* %11)[i64 87];
    f32 %275 = load f32* %274;
    f32 %276 = fadd f32 %273, f32 %275;
    f32* %277 = getelementptr &(f32* %11)[i64 88];
    f32 %278 = load f32* %277;
    f32 %279 = fadd f32 %276, f32 %278;
    f32* %280 = getelementptr &(f32* %11)[i64 89];
    f32 %281 = load f32* %280;
    f32 %282 = fadd f32 %279, f32 %281;
    f32* %283 = getelementptr &(f32* %11)[i64 90];
    f32 %284 = load f32* %283;
    f32 %285 = fadd f32 %282, f32 %284;
    f32* %286 = getelementptr &(f32* %11)[i64 91];
    f32 %287 = load f32* %286;
    f32 %288 = fadd f32 %285, f32 %287;
    f32* %289 = getelementptr &(f32* %11)[i64 92];
    f32 %290 = load f32* %289;
    f32 %291 = fadd f32 %288, f32 %290;
    f32* %292 = getelementptr &(f32* %11)[i64 93];
    f32 %293 = load f32* %292;
    f32 %294 = fadd f32 %291, f32 %293;
    f32* %295 = getelementptr &(f32* %11)[i64 94];
    f32 %296 = load f32* %295;
    f32 %297 = fadd f32 %294, f32 %296;
    f32* %298 = getelementptr &(f32* %11)[i64 95];
    f32 %299 = load f32* %298;
    f32 %300 = fadd f32 %297, f32 %299;
    f32* %301 = getelementptr &(f32* %11)[i64 96];
    f32 %302 = load f32* %301;
    f32 %303 = fadd f32 %300, f32 %302;
    f32* %304 = getelementptr &(f32* %11)[i64 97];
    f32 %305 = load f32* %304;
    f32 %306 = fadd f32 %303, f32 %305;
    f32* %307 = getelementptr &(f32* %11)[i64 98];
    f32 %308 = load f32* %307;
    f32 %309 = fadd f32 %306, f32 %308;
    f32* %310 = getelementptr &(f32* %11)[i64 99];
    f32 %311 = load f32* %310;
    f32 %312 = fadd f32 %309, f32 %311;
    f32* %313 = getelementptr &(f32* %11)[i64 100];
    f32 %314 = load f32* %313;
    f32 %315 = fadd f32 %312, f32 %314;
    f32* %316 = getelementptr &(f32* %11)[i64 101];
    f32 %317 = load f32* %316;
    f32 %318 = fadd f32 %315, f32 %317;
    f32* %319 = getelementptr &(f32* %11)[i64 102];
    f32 %320 = load f32* %319;
    f32 %321 = fadd f32 %318, f32 %320;
    f32* %322 = getelementptr &(f32* %11)[i64 103];
    f32 %323 = load f32* %322;
    f32 %324 = fadd f32 %321, f32 %323;
    f32 %325 = fdiv f32 %324, f32 1000;
    store f32* %7 with f32 %325;
    i32 %326 = add i32 %6, i32 1;
    i1 %327 = icmp sgt i32 %1, i32 %326;
    cbr i1 %327(prob = 0.984615), ^b1, ^b2;
  ^b2:
    ret;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [16 * i8]* %2 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_1 to [16 * i8]*;
    [1000 * f32]** %3 = ptradd [16 * i8]* %2, i32 0;
    [1000 * f32]* %4 = load [1000 * f32]** %3;
    [1000 * f32]** %5 = ptradd [16 * i8]* %2, i32 8;
    [1000 * f32]* %6 = load [1000 * f32]** %5;
    [1000 * [1000 * f32]]* %7 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    ubr ^b1;
  ^b1:
    i32 %8 = phi [^b, i32 %0] [^b2, i32 %148];
    f32* %9 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %8];
    f32 %10 = load f32* %9;
    f32* %11 = getelementptr &([1000 * f32]* %4)[i64 0][i32 %8];
    [1000 * f32]* %12 = getelementptr &([1000 * [1000 * f32]]* %7)[i64 0][i32 %8];
    ubr ^while.body;
  ^while.body:
    f32 %13 = phi [^b1, f32 0] [^while.body, f32 %94];
    i32 %14 = phi [^b1, i32 0] [^while.body, i32 %95];
    f32* %15 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %14];
    f32 %16 = load f32* %15;
    f32 %17 = fsub f32 %16, f32 %10;
    f32 %18 = fmul f32 %17, f32 %17;
    f32 %19 = fadd f32 %13, f32 %18;
    f32* %20 = getelementptr &(f32* %15)[i64 1];
    f32 %21 = load f32* %20;
    f32 %22 = fsub f32 %21, f32 %10;
    f32 %23 = fmul f32 %22, f32 %22;
    f32 %24 = fadd f32 %19, f32 %23;
    f32* %25 = getelementptr &(f32* %15)[i64 2];
    f32 %26 = load f32* %25;
    f32 %27 = fsub f32 %26, f32 %10;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fadd f32 %24, f32 %28;
    f32* %30 = getelementptr &(f32* %15)[i64 3];
    f32 %31 = load f32* %30;
    f32 %32 = fsub f32 %31, f32 %10;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fadd f32 %29, f32 %33;
    f32* %35 = getelementptr &(f32* %15)[i64 4];
    f32 %36 = load f32* %35;
    f32 %37 = fsub f32 %36, f32 %10;
    f32 %38 = fmul f32 %37, f32 %37;
    f32 %39 = fadd f32 %34, f32 %38;
    f32* %40 = getelementptr &(f32* %15)[i64 5];
    f32 %41 = load f32* %40;
    f32 %42 = fsub f32 %41, f32 %10;
    f32 %43 = fmul f32 %42, f32 %42;
    f32 %44 = fadd f32 %39, f32 %43;
    f32* %45 = getelementptr &(f32* %15)[i64 6];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %46, f32 %10;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fadd f32 %44, f32 %48;
    f32* %50 = getelementptr &(f32* %15)[i64 7];
    f32 %51 = load f32* %50;
    f32 %52 = fsub f32 %51, f32 %10;
    f32 %53 = fmul f32 %52, f32 %52;
    f32 %54 = fadd f32 %49, f32 %53;
    f32* %55 = getelementptr &(f32* %15)[i64 8];
    f32 %56 = load f32* %55;
    f32 %57 = fsub f32 %56, f32 %10;
    f32 %58 = fmul f32 %57, f32 %57;
    f32 %59 = fadd f32 %54, f32 %58;
    f32* %60 = getelementptr &(f32* %15)[i64 9];
    f32 %61 = load f32* %60;
    f32 %62 = fsub f32 %61, f32 %10;
    f32 %63 = fmul f32 %62, f32 %62;
    f32 %64 = fadd f32 %59, f32 %63;
    f32* %65 = getelementptr &(f32* %15)[i64 10];
    f32 %66 = load f32* %65;
    f32 %67 = fsub f32 %66, f32 %10;
    f32 %68 = fmul f32 %67, f32 %67;
    f32 %69 = fadd f32 %64, f32 %68;
    f32* %70 = getelementptr &(f32* %15)[i64 11];
    f32 %71 = load f32* %70;
    f32 %72 = fsub f32 %71, f32 %10;
    f32 %73 = fmul f32 %72, f32 %72;
    f32 %74 = fadd f32 %69, f32 %73;
    f32* %75 = getelementptr &(f32* %15)[i64 12];
    f32 %76 = load f32* %75;
    f32 %77 = fsub f32 %76, f32 %10;
    f32 %78 = fmul f32 %77, f32 %77;
    f32 %79 = fadd f32 %74, f32 %78;
    f32* %80 = getelementptr &(f32* %15)[i64 13];
    f32 %81 = load f32* %80;
    f32 %82 = fsub f32 %81, f32 %10;
    f32 %83 = fmul f32 %82, f32 %82;
    f32 %84 = fadd f32 %79, f32 %83;
    f32* %85 = getelementptr &(f32* %15)[i64 14];
    f32 %86 = load f32* %85;
    f32 %87 = fsub f32 %86, f32 %10;
    f32 %88 = fmul f32 %87, f32 %87;
    f32 %89 = fadd f32 %84, f32 %88;
    f32* %90 = getelementptr &(f32* %15)[i64 15];
    f32 %91 = load f32* %90;
    f32 %92 = fsub f32 %91, f32 %10;
    f32 %93 = fmul f32 %92, f32 %92;
    f32 %94 = fadd f32 %89, f32 %93;
    i32 %95 = add i32 %14, i32 16;
    i1 %96 = icmp slt i32 %95, i32 992;
    cbr i1 %96(prob = 0.983871), ^while.body, ^while.body1;
  ^while.body1:
    f32* %97 = getelementptr &(f32* %15)[i64 16];
    f32 %98 = load f32* %97;
    f32 %99 = fsub f32 %98, f32 %10;
    f32 %100 = fmul f32 %99, f32 %99;
    f32 %101 = fadd f32 %94, f32 %100;
    f32* %102 = getelementptr &(f32* %15)[i64 17];
    f32 %103 = load f32* %102;
    f32 %104 = fsub f32 %103, f32 %10;
    f32 %105 = fmul f32 %104, f32 %104;
    f32 %106 = fadd f32 %101, f32 %105;
    f32* %107 = getelementptr &(f32* %15)[i64 18];
    f32 %108 = load f32* %107;
    f32 %109 = fsub f32 %108, f32 %10;
    f32 %110 = fmul f32 %109, f32 %109;
    f32 %111 = fadd f32 %106, f32 %110;
    f32* %112 = getelementptr &(f32* %15)[i64 19];
    f32 %113 = load f32* %112;
    f32 %114 = fsub f32 %113, f32 %10;
    f32 %115 = fmul f32 %114, f32 %114;
    f32 %116 = fadd f32 %111, f32 %115;
    f32* %117 = getelementptr &(f32* %15)[i64 20];
    f32 %118 = load f32* %117;
    f32 %119 = fsub f32 %118, f32 %10;
    f32 %120 = fmul f32 %119, f32 %119;
    f32 %121 = fadd f32 %116, f32 %120;
    f32* %122 = getelementptr &(f32* %15)[i64 21];
    f32 %123 = load f32* %122;
    f32 %124 = fsub f32 %123, f32 %10;
    f32 %125 = fmul f32 %124, f32 %124;
    f32 %126 = fadd f32 %121, f32 %125;
    f32* %127 = getelementptr &(f32* %15)[i64 22];
    f32 %128 = load f32* %127;
    f32 %129 = fsub f32 %128, f32 %10;
    f32 %130 = fmul f32 %129, f32 %129;
    f32 %131 = fadd f32 %126, f32 %130;
    f32* %132 = getelementptr &(f32* %15)[i64 23];
    f32 %133 = load f32* %132;
    f32 %134 = fsub f32 %133, f32 %10;
    f32 %135 = fmul f32 %134, f32 %134;
    f32 %136 = fadd f32 %131, f32 %135;
    f32 %137 = fdiv f32 %136, f32 1000;
    f32 %138 = fadd f32 %137, f32 0.01;
    f32 %139 = fmul f32 %138, f32 0.5;
    ubr ^while.header;
  ^while.header:
    f32 %140 = phi [^while.body1, f32 %138] [^if.then, f32 %142] [^if.else, f32 %140];
    f32 %141 = phi [^while.body1, f32 0] [^if.then, f32 %141] [^if.else, f32 %142];
    f32 %142 = phi [^while.body1, f32 %139] [^if.then, f32 %151] [^if.else, f32 %153];
    f32 %143 = fmul f32 %142, f32 %142;
    f32 %144 = fsub f32 %143, f32 %138;
    f32 %145 = fabs f32 %144;
    i1 %146 = fcmp ogt f32 %145, f32 0.001;
    cbr i1 %146(prob = 0.984615), ^while.body2, ^b2;
  ^while.body2:
    i1 %147 = fcmp ogt f32 %143, f32 %138;
    cbr i1 %147(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32 %148 = add i32 %8, i32 1;
    i1 %149 = icmp sgt i32 %1, i32 %148;
    store f32* %11 with f32 %142;
    cbr i1 %149(prob = 0.984615), ^b1, ^b3;
  ^if.then:
    f32 %150 = fadd f32 %142, f32 %141;
    f32 %151 = fmul f32 %150, f32 0.5;
    ubr ^while.header;
  ^if.else:
    f32 %152 = fadd f32 %142, f32 %140;
    f32 %153 = fmul f32 %152, f32 0.5;
    ubr ^while.header;
  ^b3:
    ret;
}
internal [16 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal [1000 * f32]* @var, align 8;
internal [1000 * f32]* @mean, align 8;
