internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1000 * [1000 * f32]]* %0 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    [1000 * f32]* %1 = ptrcast [1000 * f32]* @mean to [1000 * f32]*;
    [1000 * f32]* %2 = ptrcast [1000 * f32]* @var to [1000 * f32]*;
    ubr ^while.header;
  ^while.header:
    i32 %3 = phi [^entry, i32 0] [^b1, i32 %9];
    i1 %4 = icmp slt i32 %3, i32 1000;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^b:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.header1;
  ^while.body:
    [1000 * f32]* %5 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %3];
    f32* %6 = getelementptr &([1000 * f32]* %5)[i64 0][i64 0];
    i32 %7 = call (f32*) -> i32 @getfarray(f32* %6);
    i1 %8 = icmp neq i32 %7, i32 1000;
    cbr i1 %8(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %9 = add i32 %3, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %10 = phi [^b, i32 0] [^b4, i32 %275];
    f32 %11 = phi [^b, f32 0] [^b4, f32 %132];
    i1 %12 = icmp slt i32 %10, i32 100;
    cbr i1 %12(prob = 0.97), ^while.header2, ^while.header3;
  ^b2:
    i32 %13 = phi [^while.body, i32 %7] [^b3, i32 0];
    ret i32 %13;
  ^while.header2:
    i32 %14 = phi [^while.header1, i32 0] [^while.body6, i32 %160];
    i1 %15 = icmp slt i32 %14, i32 1000;
    cbr i1 %15(prob = 0.97), ^while.body1, ^while.header4;
  ^while.header3:
    i32 %16 = phi [^while.header1, i32 0] [^while.body7, i32 %185];
    f32 %17 = phi [^while.header1, f32 %11] [^while.body7, f32 %184];
    i1 %18 = icmp slt i32 %16, i32 1000;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b3;
  ^while.body1:
    f32* %19 = getelementptr &([1000 * f32]* %1)[i64 0][i32 %14];
    [1000 * f32]* %20 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %14];
    ubr ^while.body4;
  ^while.body2:
    [1000 * f32]* %21 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %16];
    ubr ^while.body5;
  ^b3:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %17);
    ubr ^b2;
  ^while.header4:
    i32 %22 = phi [^while.header2, i32 0] [^while.body13, i32 %456];
    i1 %23 = icmp slt i32 %22, i32 1000;
    cbr i1 %23(prob = 0.97), ^while.body3, ^while.header5;
  ^while.body3:
    f32* %24 = getelementptr &([1000 * f32]* %1)[i64 0][i32 %22];
    f32 %25 = load f32* %24;
    f32* %26 = getelementptr &([1000 * f32]* %2)[i64 0][i32 %22];
    [1000 * f32]* %27 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %22];
    ubr ^while.body9;
  ^while.body4:
    f32 %28 = phi [^while.body1, f32 0] [^while.body4, f32 %77];
    i32 %29 = phi [^while.body1, i32 0] [^while.body4, i32 %78];
    f32* %30 = getelementptr &([1000 * f32]* %20)[i64 0][i32 %29];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %28, f32 %31;
    f32* %33 = getelementptr &(f32* %30)[i64 1];
    f32 %34 = load f32* %33;
    f32 %35 = fadd f32 %32, f32 %34;
    f32* %36 = getelementptr &(f32* %30)[i64 2];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &(f32* %30)[i64 3];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32* %42 = getelementptr &(f32* %30)[i64 4];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %30)[i64 5];
    f32 %46 = load f32* %45;
    f32 %47 = fadd f32 %44, f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 6];
    f32 %49 = load f32* %48;
    f32 %50 = fadd f32 %47, f32 %49;
    f32* %51 = getelementptr &(f32* %30)[i64 7];
    f32 %52 = load f32* %51;
    f32 %53 = fadd f32 %50, f32 %52;
    f32* %54 = getelementptr &(f32* %30)[i64 8];
    f32 %55 = load f32* %54;
    f32 %56 = fadd f32 %53, f32 %55;
    f32* %57 = getelementptr &(f32* %30)[i64 9];
    f32 %58 = load f32* %57;
    f32 %59 = fadd f32 %56, f32 %58;
    f32* %60 = getelementptr &(f32* %30)[i64 10];
    f32 %61 = load f32* %60;
    f32 %62 = fadd f32 %59, f32 %61;
    f32* %63 = getelementptr &(f32* %30)[i64 11];
    f32 %64 = load f32* %63;
    f32 %65 = fadd f32 %62, f32 %64;
    f32* %66 = getelementptr &(f32* %30)[i64 12];
    f32 %67 = load f32* %66;
    f32 %68 = fadd f32 %65, f32 %67;
    f32* %69 = getelementptr &(f32* %30)[i64 13];
    f32 %70 = load f32* %69;
    f32 %71 = fadd f32 %68, f32 %70;
    f32* %72 = getelementptr &(f32* %30)[i64 14];
    f32 %73 = load f32* %72;
    f32 %74 = fadd f32 %71, f32 %73;
    f32* %75 = getelementptr &(f32* %30)[i64 15];
    f32 %76 = load f32* %75;
    f32 %77 = fadd f32 %74, f32 %76;
    store f32* %19 with f32 %77;
    i32 %78 = add i32 %29, i32 16;
    i1 %79 = icmp slt i32 %78, i32 992;
    cbr i1 %79(prob = 0.98), ^while.body4, ^while.body6;
  ^while.body5:
    i32 %80 = phi [^while.body2, i32 0] [^while.body5, i32 %130];
    f32 %81 = phi [^while.body2, f32 %17] [^while.body5, f32 %129];
    f32* %82 = getelementptr &([1000 * f32]* %21)[i64 0][i32 %80];
    f32 %83 = load f32* %82;
    f32 %84 = fadd f32 %81, f32 %83;
    f32* %85 = getelementptr &(f32* %82)[i64 1];
    f32 %86 = load f32* %85;
    f32 %87 = fadd f32 %84, f32 %86;
    f32* %88 = getelementptr &(f32* %82)[i64 2];
    f32 %89 = load f32* %88;
    f32 %90 = fadd f32 %87, f32 %89;
    f32* %91 = getelementptr &(f32* %82)[i64 3];
    f32 %92 = load f32* %91;
    f32 %93 = fadd f32 %90, f32 %92;
    f32* %94 = getelementptr &(f32* %82)[i64 4];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    f32* %97 = getelementptr &(f32* %82)[i64 5];
    f32 %98 = load f32* %97;
    f32 %99 = fadd f32 %96, f32 %98;
    f32* %100 = getelementptr &(f32* %82)[i64 6];
    f32 %101 = load f32* %100;
    f32 %102 = fadd f32 %99, f32 %101;
    f32* %103 = getelementptr &(f32* %82)[i64 7];
    f32 %104 = load f32* %103;
    f32 %105 = fadd f32 %102, f32 %104;
    f32* %106 = getelementptr &(f32* %82)[i64 8];
    f32 %107 = load f32* %106;
    f32 %108 = fadd f32 %105, f32 %107;
    f32* %109 = getelementptr &(f32* %82)[i64 9];
    f32 %110 = load f32* %109;
    f32 %111 = fadd f32 %108, f32 %110;
    f32* %112 = getelementptr &(f32* %82)[i64 10];
    f32 %113 = load f32* %112;
    f32 %114 = fadd f32 %111, f32 %113;
    f32* %115 = getelementptr &(f32* %82)[i64 11];
    f32 %116 = load f32* %115;
    f32 %117 = fadd f32 %114, f32 %116;
    f32* %118 = getelementptr &(f32* %82)[i64 12];
    f32 %119 = load f32* %118;
    f32 %120 = fadd f32 %117, f32 %119;
    f32* %121 = getelementptr &(f32* %82)[i64 13];
    f32 %122 = load f32* %121;
    f32 %123 = fadd f32 %120, f32 %122;
    f32* %124 = getelementptr &(f32* %82)[i64 14];
    f32 %125 = load f32* %124;
    f32 %126 = fadd f32 %123, f32 %125;
    f32* %127 = getelementptr &(f32* %82)[i64 15];
    f32 %128 = load f32* %127;
    f32 %129 = fadd f32 %126, f32 %128;
    i32 %130 = add i32 %80, i32 16;
    i1 %131 = icmp slt i32 %130, i32 992;
    cbr i1 %131(prob = 0.98), ^while.body5, ^while.body7;
  ^while.header5:
    f32 %132 = phi [^while.header4, f32 %11] [^while.body12, f32 %445];
    i32 %133 = phi [^while.header4, i32 0] [^while.body12, i32 %446];
    i1 %134 = icmp slt i32 %133, i32 1000;
    cbr i1 %134(prob = 0.97), ^while.body8, ^b4;
  ^while.body6:
    f32* %135 = getelementptr &([1000 * f32]* %20)[i64 0][i32 %78];
    f32 %136 = load f32* %135;
    f32 %137 = fadd f32 %77, f32 %136;
    f32* %138 = getelementptr &(f32* %135)[i64 1];
    f32 %139 = load f32* %138;
    f32 %140 = fadd f32 %137, f32 %139;
    f32* %141 = getelementptr &(f32* %135)[i64 2];
    f32 %142 = load f32* %141;
    f32 %143 = fadd f32 %140, f32 %142;
    f32* %144 = getelementptr &(f32* %135)[i64 3];
    f32 %145 = load f32* %144;
    f32 %146 = fadd f32 %143, f32 %145;
    f32* %147 = getelementptr &(f32* %135)[i64 4];
    f32 %148 = load f32* %147;
    f32 %149 = fadd f32 %146, f32 %148;
    f32* %150 = getelementptr &(f32* %135)[i64 5];
    f32 %151 = load f32* %150;
    f32 %152 = fadd f32 %149, f32 %151;
    f32* %153 = getelementptr &(f32* %135)[i64 6];
    f32 %154 = load f32* %153;
    f32 %155 = fadd f32 %152, f32 %154;
    f32* %156 = getelementptr &(f32* %135)[i64 7];
    f32 %157 = load f32* %156;
    f32 %158 = fadd f32 %155, f32 %157;
    f32 %159 = fdiv f32 %158, f32 1000;
    store f32* %19 with f32 %159;
    i32 %160 = add i32 %14, i32 1;
    ubr ^while.header2;
  ^while.body7:
    f32* %161 = getelementptr &([1000 * f32]* %21)[i64 0][i32 %130];
    f32 %162 = load f32* %161;
    f32 %163 = fadd f32 %129, f32 %162;
    f32* %164 = getelementptr &(f32* %161)[i64 1];
    f32 %165 = load f32* %164;
    f32 %166 = fadd f32 %163, f32 %165;
    f32* %167 = getelementptr &(f32* %161)[i64 2];
    f32 %168 = load f32* %167;
    f32 %169 = fadd f32 %166, f32 %168;
    f32* %170 = getelementptr &(f32* %161)[i64 3];
    f32 %171 = load f32* %170;
    f32 %172 = fadd f32 %169, f32 %171;
    f32* %173 = getelementptr &(f32* %161)[i64 4];
    f32 %174 = load f32* %173;
    f32 %175 = fadd f32 %172, f32 %174;
    f32* %176 = getelementptr &(f32* %161)[i64 5];
    f32 %177 = load f32* %176;
    f32 %178 = fadd f32 %175, f32 %177;
    f32* %179 = getelementptr &(f32* %161)[i64 6];
    f32 %180 = load f32* %179;
    f32 %181 = fadd f32 %178, f32 %180;
    f32* %182 = getelementptr &(f32* %161)[i64 7];
    f32 %183 = load f32* %182;
    f32 %184 = fadd f32 %181, f32 %183;
    i32 %185 = add i32 %16, i32 1;
    ubr ^while.header3;
  ^while.body8:
    f32* %186 = getelementptr &([1000 * f32]* %1)[i64 0][i32 %133];
    f32 %187 = load f32* %186;
    f32* %188 = getelementptr &([1000 * f32]* %2)[i64 0][i32 %133];
    f32 %189 = load f32* %188;
    [1000 * f32]* %190 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %133];
    ubr ^while.body11;
  ^while.body9:
    f32 %191 = phi [^while.body3, f32 0] [^while.body9, f32 %272];
    i32 %192 = phi [^while.body3, i32 0] [^while.body9, i32 %273];
    f32* %193 = getelementptr &([1000 * f32]* %27)[i64 0][i32 %192];
    f32 %194 = load f32* %193;
    f32 %195 = fsub f32 %194, f32 %25;
    f32 %196 = fmul f32 %195, f32 %195;
    f32 %197 = fadd f32 %191, f32 %196;
    f32* %198 = getelementptr &(f32* %193)[i64 1];
    f32 %199 = load f32* %198;
    f32 %200 = fsub f32 %199, f32 %25;
    f32 %201 = fmul f32 %200, f32 %200;
    f32 %202 = fadd f32 %197, f32 %201;
    f32* %203 = getelementptr &(f32* %193)[i64 2];
    f32 %204 = load f32* %203;
    f32 %205 = fsub f32 %204, f32 %25;
    f32 %206 = fmul f32 %205, f32 %205;
    f32 %207 = fadd f32 %202, f32 %206;
    f32* %208 = getelementptr &(f32* %193)[i64 3];
    f32 %209 = load f32* %208;
    f32 %210 = fsub f32 %209, f32 %25;
    f32 %211 = fmul f32 %210, f32 %210;
    f32 %212 = fadd f32 %207, f32 %211;
    f32* %213 = getelementptr &(f32* %193)[i64 4];
    f32 %214 = load f32* %213;
    f32 %215 = fsub f32 %214, f32 %25;
    f32 %216 = fmul f32 %215, f32 %215;
    f32 %217 = fadd f32 %212, f32 %216;
    f32* %218 = getelementptr &(f32* %193)[i64 5];
    f32 %219 = load f32* %218;
    f32 %220 = fsub f32 %219, f32 %25;
    f32 %221 = fmul f32 %220, f32 %220;
    f32 %222 = fadd f32 %217, f32 %221;
    f32* %223 = getelementptr &(f32* %193)[i64 6];
    f32 %224 = load f32* %223;
    f32 %225 = fsub f32 %224, f32 %25;
    f32 %226 = fmul f32 %225, f32 %225;
    f32 %227 = fadd f32 %222, f32 %226;
    f32* %228 = getelementptr &(f32* %193)[i64 7];
    f32 %229 = load f32* %228;
    f32 %230 = fsub f32 %229, f32 %25;
    f32 %231 = fmul f32 %230, f32 %230;
    f32 %232 = fadd f32 %227, f32 %231;
    f32* %233 = getelementptr &(f32* %193)[i64 8];
    f32 %234 = load f32* %233;
    f32 %235 = fsub f32 %234, f32 %25;
    f32 %236 = fmul f32 %235, f32 %235;
    f32 %237 = fadd f32 %232, f32 %236;
    f32* %238 = getelementptr &(f32* %193)[i64 9];
    f32 %239 = load f32* %238;
    f32 %240 = fsub f32 %239, f32 %25;
    f32 %241 = fmul f32 %240, f32 %240;
    f32 %242 = fadd f32 %237, f32 %241;
    f32* %243 = getelementptr &(f32* %193)[i64 10];
    f32 %244 = load f32* %243;
    f32 %245 = fsub f32 %244, f32 %25;
    f32 %246 = fmul f32 %245, f32 %245;
    f32 %247 = fadd f32 %242, f32 %246;
    f32* %248 = getelementptr &(f32* %193)[i64 11];
    f32 %249 = load f32* %248;
    f32 %250 = fsub f32 %249, f32 %25;
    f32 %251 = fmul f32 %250, f32 %250;
    f32 %252 = fadd f32 %247, f32 %251;
    f32* %253 = getelementptr &(f32* %193)[i64 12];
    f32 %254 = load f32* %253;
    f32 %255 = fsub f32 %254, f32 %25;
    f32 %256 = fmul f32 %255, f32 %255;
    f32 %257 = fadd f32 %252, f32 %256;
    f32* %258 = getelementptr &(f32* %193)[i64 13];
    f32 %259 = load f32* %258;
    f32 %260 = fsub f32 %259, f32 %25;
    f32 %261 = fmul f32 %260, f32 %260;
    f32 %262 = fadd f32 %257, f32 %261;
    f32* %263 = getelementptr &(f32* %193)[i64 14];
    f32 %264 = load f32* %263;
    f32 %265 = fsub f32 %264, f32 %25;
    f32 %266 = fmul f32 %265, f32 %265;
    f32 %267 = fadd f32 %262, f32 %266;
    f32* %268 = getelementptr &(f32* %193)[i64 15];
    f32 %269 = load f32* %268;
    f32 %270 = fsub f32 %269, f32 %25;
    f32 %271 = fmul f32 %270, f32 %270;
    f32 %272 = fadd f32 %267, f32 %271;
    store f32* %26 with f32 %272;
    i32 %273 = add i32 %192, i32 16;
    i1 %274 = icmp slt i32 %273, i32 992;
    cbr i1 %274(prob = 0.98), ^while.body9, ^while.body10;
  ^b4:
    i32 %275 = add i32 %10, i32 1;
    ubr ^while.header1;
  ^while.body10:
    f32* %276 = getelementptr &([1000 * f32]* %27)[i64 0][i32 %273];
    f32 %277 = load f32* %276;
    f32 %278 = load f32* %24;
    f32 %279 = fsub f32 %277, f32 %278;
    f32 %280 = fmul f32 %279, f32 %279;
    f32 %281 = fadd f32 %272, f32 %280;
    f32* %282 = getelementptr &(f32* %276)[i64 1];
    f32 %283 = load f32* %282;
    f32 %284 = fsub f32 %283, f32 %278;
    f32 %285 = fmul f32 %284, f32 %284;
    f32 %286 = fadd f32 %281, f32 %285;
    f32* %287 = getelementptr &(f32* %276)[i64 2];
    f32 %288 = load f32* %287;
    f32 %289 = fsub f32 %288, f32 %278;
    f32 %290 = fmul f32 %289, f32 %289;
    f32 %291 = fadd f32 %286, f32 %290;
    f32* %292 = getelementptr &(f32* %276)[i64 3];
    f32 %293 = load f32* %292;
    f32 %294 = fsub f32 %293, f32 %278;
    f32 %295 = fmul f32 %294, f32 %294;
    f32 %296 = fadd f32 %291, f32 %295;
    f32* %297 = getelementptr &(f32* %276)[i64 4];
    f32 %298 = load f32* %297;
    f32 %299 = fsub f32 %298, f32 %278;
    f32 %300 = fmul f32 %299, f32 %299;
    f32 %301 = fadd f32 %296, f32 %300;
    f32* %302 = getelementptr &(f32* %276)[i64 5];
    f32 %303 = load f32* %302;
    f32 %304 = fsub f32 %303, f32 %278;
    f32 %305 = fmul f32 %304, f32 %304;
    f32 %306 = fadd f32 %301, f32 %305;
    f32* %307 = getelementptr &(f32* %276)[i64 6];
    f32 %308 = load f32* %307;
    f32 %309 = fsub f32 %308, f32 %278;
    f32 %310 = fmul f32 %309, f32 %309;
    f32 %311 = fadd f32 %306, f32 %310;
    f32* %312 = getelementptr &(f32* %276)[i64 7];
    f32 %313 = load f32* %312;
    f32 %314 = fsub f32 %313, f32 %278;
    f32 %315 = fmul f32 %314, f32 %314;
    f32 %316 = fadd f32 %311, f32 %315;
    f32 %317 = fdiv f32 %316, f32 1000;
    f32 %318 = fadd f32 %317, f32 0.01;
    f32 %319 = fmul f32 %318, f32 0.5;
    ubr ^while.header6;
  ^while.body11:
    i32 %320 = phi [^while.body8, i32 0] [^while.body11, i32 %402];
    f32 %321 = phi [^while.body8, f32 %132] [^while.body11, f32 %401];
    f32* %322 = getelementptr &([1000 * f32]* %190)[i64 0][i32 %320];
    f32 %323 = load f32* %322;
    f32 %324 = fsub f32 %323, f32 %187;
    f32 %325 = fdiv f32 %324, f32 %189;
    store f32* %322 with f32 %325;
    f32 %326 = fadd f32 %321, f32 %325;
    f32* %327 = getelementptr &(f32* %322)[i64 1];
    f32 %328 = load f32* %327;
    f32 %329 = fsub f32 %328, f32 %187;
    f32 %330 = fdiv f32 %329, f32 %189;
    f32 %331 = fadd f32 %326, f32 %330;
    store f32* %327 with f32 %330;
    f32* %332 = getelementptr &(f32* %322)[i64 2];
    f32 %333 = load f32* %332;
    f32 %334 = fsub f32 %333, f32 %187;
    f32 %335 = fdiv f32 %334, f32 %189;
    f32 %336 = fadd f32 %331, f32 %335;
    store f32* %332 with f32 %335;
    f32* %337 = getelementptr &(f32* %322)[i64 3];
    f32 %338 = load f32* %337;
    f32 %339 = fsub f32 %338, f32 %187;
    f32 %340 = fdiv f32 %339, f32 %189;
    f32 %341 = fadd f32 %336, f32 %340;
    store f32* %337 with f32 %340;
    f32* %342 = getelementptr &(f32* %322)[i64 4];
    f32 %343 = load f32* %342;
    f32 %344 = fsub f32 %343, f32 %187;
    f32 %345 = fdiv f32 %344, f32 %189;
    f32 %346 = fadd f32 %341, f32 %345;
    store f32* %342 with f32 %345;
    f32* %347 = getelementptr &(f32* %322)[i64 5];
    f32 %348 = load f32* %347;
    f32 %349 = fsub f32 %348, f32 %187;
    f32 %350 = fdiv f32 %349, f32 %189;
    f32 %351 = fadd f32 %346, f32 %350;
    store f32* %347 with f32 %350;
    f32* %352 = getelementptr &(f32* %322)[i64 6];
    f32 %353 = load f32* %352;
    f32 %354 = fsub f32 %353, f32 %187;
    f32 %355 = fdiv f32 %354, f32 %189;
    f32 %356 = fadd f32 %351, f32 %355;
    store f32* %352 with f32 %355;
    f32* %357 = getelementptr &(f32* %322)[i64 7];
    f32 %358 = load f32* %357;
    f32 %359 = fsub f32 %358, f32 %187;
    f32 %360 = fdiv f32 %359, f32 %189;
    f32 %361 = fadd f32 %356, f32 %360;
    store f32* %357 with f32 %360;
    f32* %362 = getelementptr &(f32* %322)[i64 8];
    f32 %363 = load f32* %362;
    f32 %364 = fsub f32 %363, f32 %187;
    f32 %365 = fdiv f32 %364, f32 %189;
    f32 %366 = fadd f32 %361, f32 %365;
    store f32* %362 with f32 %365;
    f32* %367 = getelementptr &(f32* %322)[i64 9];
    f32 %368 = load f32* %367;
    f32 %369 = fsub f32 %368, f32 %187;
    f32 %370 = fdiv f32 %369, f32 %189;
    f32 %371 = fadd f32 %366, f32 %370;
    store f32* %367 with f32 %370;
    f32* %372 = getelementptr &(f32* %322)[i64 10];
    f32 %373 = load f32* %372;
    f32 %374 = fsub f32 %373, f32 %187;
    f32 %375 = fdiv f32 %374, f32 %189;
    f32 %376 = fadd f32 %371, f32 %375;
    store f32* %372 with f32 %375;
    f32* %377 = getelementptr &(f32* %322)[i64 11];
    f32 %378 = load f32* %377;
    f32 %379 = fsub f32 %378, f32 %187;
    f32 %380 = fdiv f32 %379, f32 %189;
    f32 %381 = fadd f32 %376, f32 %380;
    store f32* %377 with f32 %380;
    f32* %382 = getelementptr &(f32* %322)[i64 12];
    f32 %383 = load f32* %382;
    f32 %384 = fsub f32 %383, f32 %187;
    f32 %385 = fdiv f32 %384, f32 %189;
    f32 %386 = fadd f32 %381, f32 %385;
    store f32* %382 with f32 %385;
    f32* %387 = getelementptr &(f32* %322)[i64 13];
    f32 %388 = load f32* %387;
    f32 %389 = fsub f32 %388, f32 %187;
    f32 %390 = fdiv f32 %389, f32 %189;
    f32 %391 = fadd f32 %386, f32 %390;
    store f32* %387 with f32 %390;
    f32* %392 = getelementptr &(f32* %322)[i64 14];
    f32 %393 = load f32* %392;
    f32 %394 = fsub f32 %393, f32 %187;
    f32 %395 = fdiv f32 %394, f32 %189;
    f32 %396 = fadd f32 %391, f32 %395;
    store f32* %392 with f32 %395;
    f32* %397 = getelementptr &(f32* %322)[i64 15];
    f32 %398 = load f32* %397;
    f32 %399 = fsub f32 %398, f32 %187;
    f32 %400 = fdiv f32 %399, f32 %189;
    f32 %401 = fadd f32 %396, f32 %400;
    store f32* %397 with f32 %400;
    i32 %402 = add i32 %320, i32 16;
    i1 %403 = icmp slt i32 %402, i32 992;
    cbr i1 %403(prob = 0.98), ^while.body11, ^while.body12;
  ^while.body12:
    f32* %404 = getelementptr &([1000 * f32]* %190)[i64 0][i32 %402];
    f32 %405 = load f32* %404;
    f32 %406 = load f32* %186;
    f32 %407 = fsub f32 %405, f32 %406;
    f32 %408 = load f32* %188;
    f32 %409 = fdiv f32 %407, f32 %408;
    store f32* %404 with f32 %409;
    f32 %410 = fadd f32 %401, f32 %409;
    f32* %411 = getelementptr &(f32* %404)[i64 1];
    f32 %412 = load f32* %411;
    f32 %413 = fsub f32 %412, f32 %406;
    f32 %414 = fdiv f32 %413, f32 %408;
    f32 %415 = fadd f32 %410, f32 %414;
    store f32* %411 with f32 %414;
    f32* %416 = getelementptr &(f32* %404)[i64 2];
    f32 %417 = load f32* %416;
    f32 %418 = fsub f32 %417, f32 %406;
    f32 %419 = fdiv f32 %418, f32 %408;
    f32 %420 = fadd f32 %415, f32 %419;
    store f32* %416 with f32 %419;
    f32* %421 = getelementptr &(f32* %404)[i64 3];
    f32 %422 = load f32* %421;
    f32 %423 = fsub f32 %422, f32 %406;
    f32 %424 = fdiv f32 %423, f32 %408;
    f32 %425 = fadd f32 %420, f32 %424;
    store f32* %421 with f32 %424;
    f32* %426 = getelementptr &(f32* %404)[i64 4];
    f32 %427 = load f32* %426;
    f32 %428 = fsub f32 %427, f32 %406;
    f32 %429 = fdiv f32 %428, f32 %408;
    f32 %430 = fadd f32 %425, f32 %429;
    store f32* %426 with f32 %429;
    f32* %431 = getelementptr &(f32* %404)[i64 5];
    f32 %432 = load f32* %431;
    f32 %433 = fsub f32 %432, f32 %406;
    f32 %434 = fdiv f32 %433, f32 %408;
    f32 %435 = fadd f32 %430, f32 %434;
    store f32* %431 with f32 %434;
    f32* %436 = getelementptr &(f32* %404)[i64 6];
    f32 %437 = load f32* %436;
    f32 %438 = fsub f32 %437, f32 %406;
    f32 %439 = fdiv f32 %438, f32 %408;
    f32 %440 = fadd f32 %435, f32 %439;
    store f32* %436 with f32 %439;
    f32* %441 = getelementptr &(f32* %404)[i64 7];
    f32 %442 = load f32* %441;
    f32 %443 = fsub f32 %442, f32 %406;
    f32 %444 = fdiv f32 %443, f32 %408;
    f32 %445 = fadd f32 %440, f32 %444;
    store f32* %441 with f32 %444;
    i32 %446 = add i32 %133, i32 1;
    ubr ^while.header5;
  ^while.header6:
    f32 %447 = phi [^while.body10, f32 0] [^if.then, f32 %447] [^if.else, f32 %449];
    f32 %448 = phi [^while.body10, f32 %318] [^if.then, f32 %449] [^if.else, f32 %448];
    f32 %449 = phi [^while.body10, f32 %319] [^if.then, f32 %459] [^if.else, f32 %461];
    f32 %450 = fmul f32 %449, f32 %449;
    f32 %451 = fsub f32 %450, f32 %318;
    i1 %452 = fcmp olt f32 %451, f32 0;
    f32 %453 = fneg f32 %451;
    f32 %454 = select i1 %452 ? f32 %453 : f32 %451;
    i1 %455 = fcmp ogt f32 %454, f32 0.001;
    cbr i1 %455(prob = 0.97), ^while.body14, ^while.body13;
  ^while.body13:
    store f32* %26 with f32 %449;
    i32 %456 = add i32 %22, i32 1;
    ubr ^while.header4;
  ^while.body14:
    i1 %457 = fcmp ogt f32 %450, f32 %318;
    cbr i1 %457(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    f32 %458 = fadd f32 %449, f32 %447;
    f32 %459 = fmul f32 %458, f32 0.5;
    ubr ^while.header6;
  ^if.else:
    f32 %460 = fadd f32 %449, f32 %448;
    f32 %461 = fmul f32 %460, f32 0.5;
    ubr ^while.header6;
}
internal [1000 * f32]* @var;
internal [1000 * f32]* @mean;
