internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = icmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b4, i32 %8] [^if.then1, i32 %15];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = add i32 %b, i32 1;
    i1 %5 = icmp ult i32 %4, i32 3;
    cbr i1 %5(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %6 = phi [^b3, i32 0] [^if.then2, i32 %16] [^b6, i32 %20] [^if.then3, i32 %24];
    i32 %7 = mul i32 %6, i32 2;
    i32 %8 = srem i32 %7, i32 998244353;
    i32 %9 = and i32 %b, i32 -2147483647;
    i1 %10 = icmp eq i32 %9, i32 1;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b2;
  ^b5:
    i32 %11 = add i32 %b, i32 -2;
    i1 %12 = icmp ult i32 %11, i32 2;
    i32 %13 = sdiv i32 %b, i32 2;
    cbr i1 %12(prob = 0.5), ^if.then2, ^b6;
  ^if.then1:
    i32 %14 = add i32 %a, i32 %8;
    i32 %15 = srem i32 %14, i32 998244353;
    ubr ^b2;
  ^if.then2:
    i32 %16 = srem i32 %a, i32 998244353;
    ubr ^b4;
  ^b6:
    i32 %17 = sdiv i32 %b, i32 4;
    i32 %18 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %17);
    i32 %19 = mul i32 %18, i32 2;
    i32 %20 = srem i32 %19, i32 998244353;
    i32 %21 = and i32 %13, i32 -2147483647;
    i1 %22 = icmp eq i32 %21, i32 1;
    cbr i1 %22(prob = 0.5), ^if.then3, ^b4;
  ^if.then3:
    i32 %23 = add i32 %a, i32 %20;
    i32 %24 = srem i32 %23, i32 998244353;
    ubr ^b4;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = and i32 %b, i32 -2147483647;
    i1 %5 = icmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> void {
  ^entry:
    i1 %0 = icmp eq i32 %n, i32 1;
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
  ^while.header:
    i32 %3 = phi [^entry, i32 0] [^if.then, i32 %14] [^if.else, i32 %21];
    i1 %4 = icmp sgt i32 %n, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b1;
  ^b:
    ret;
  ^while.body:
    i32 %5 = and i32 %3, i32 1;
    i1 %6 = icmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^b1:
    i32* %7 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %8 = icmp sgt i32 %n, i32 0;
    cbr i1 %8(prob = 0.97), ^super.header, ^b2;
  ^if.then:
    i32 %9 = add i32 %begin_pos, i32 %3;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %3, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %12];
    store i32* %13 with i32 %11;
    i32 %14 = add i32 %3, i32 1;
    ubr ^while.header;
  ^if.else:
    i32 %15 = sdiv i32 %3, i32 2;
    i32 %16 = add i32 %1, i32 %15;
    i32* %17 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %16];
    i32 %18 = add i32 %begin_pos, i32 %3;
    i32* %19 = getelementptr &(i32* %arr)[i32 %18];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    i32 %21 = add i32 %3, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %22 = phi [^b1, i32 0] [^while.body1, i32 %23];
    i32 %23 = add i32 %22, i32 4;
    i1 %24 = icmp sgt i32 %n, i32 %23;
    cbr i1 %24(prob = 0.89), ^while.body1, ^while.body2;
  ^b2:
    i32 %25 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %25);
    i32 %26 = add i32 %begin_pos, i32 %1;
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %26, i32 %1, i32 %25);
    i1 %27 = icmp sgt i32 %1, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b;
  ^while.body1:
    i32 %28 = add i32 %begin_pos, i32 %22;
    i32* %29 = getelementptr &(i32* %arr)[i32 %28];
    i32* %30 = getelementptr &(i32* %7)[i32 %22];
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %22, i32 1;
    i32 %33 = add i32 %begin_pos, i32 %32;
    i32* %34 = getelementptr &(i32* %arr)[i32 %33];
    i32* %35 = getelementptr &(i32* %30)[i64 1];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    i32 %37 = add i32 %22, i32 2;
    i32 %38 = add i32 %begin_pos, i32 %37;
    i32* %39 = getelementptr &(i32* %arr)[i32 %38];
    i32* %40 = getelementptr &(i32* %30)[i64 2];
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    i32 %42 = add i32 %22, i32 3;
    i32 %43 = add i32 %begin_pos, i32 %42;
    i32* %44 = getelementptr &(i32* %arr)[i32 %43];
    i32* %45 = getelementptr &(i32* %30)[i64 3];
    i32 %46 = load i32* %45;
    store i32* %44 with i32 %46;
    ubr ^super.header;
  ^while.body2:
    i32 %47 = phi [^super.header, i32 %22] [^while.body2, i32 %52];
    i32 %48 = add i32 %begin_pos, i32 %47;
    i32* %49 = getelementptr &(i32* %arr)[i32 %48];
    i32* %50 = getelementptr &(i32* %7)[i32 %47];
    i32 %51 = load i32* %50;
    store i32* %49 with i32 %51;
    i32 %52 = add i32 %47, i32 1;
    i1 %53 = icmp sgt i32 %n, i32 %52;
    cbr i1 %53(prob = 0.75), ^while.body2, ^b2;
  ^while.body3:
    i32 %54 = phi [^b2, i32 0] [^while.body3, i32 %69];
    i32 %55 = phi [^b2, i32 1] [^while.body3, i32 %68];
    i32 %56 = add i32 %begin_pos, i32 %54;
    i32* %57 = getelementptr &(i32* %arr)[i32 %56];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %26, i32 %54;
    i32* %60 = getelementptr &(i32* %arr)[i32 %59];
    i32 %61 = load i32* %60;
    i32 %62 = call (i32, i32) -> i32 @multiply(i32 %55, i32 %61);
    i32 %63 = add i32 %58, i32 %62;
    i32 %64 = srem i32 %63, i32 998244353;
    store i32* %57 with i32 %64;
    i32 %65 = sub i32 %58, i32 %62;
    i32 %66 = add i32 %65, i32 998244353;
    i32 %67 = srem i32 %66, i32 998244353;
    store i32* %60 with i32 %67;
    i32 %68 = call (i32, i32) -> i32 @multiply(i32 %55, i32 %w);
    i32 %69 = add i32 %54, i32 1;
    i1 %70 = icmp sgt i32 %1, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.body3, ^b;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = icmp sgt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = icmp sgt i32 %7, i32 %10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %14);
    call (i32*, i32, i32, i32) -> void @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %15 = icmp sgt i32 %12, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = icmp sgt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %24 = sub i32 998244352, i32 %13;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %25);
    cbr i1 %15(prob = 0.97), ^prebody, ^b2;
  ^prebody:
    i32 %26 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %27 = phi [^prebody, i32 0] [^while.body2, i32 %31];
    i32* %28 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %26);
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %27, i32 1;
    i1 %32 = icmp sgt i32 %12, i32 %31;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b2;
}
