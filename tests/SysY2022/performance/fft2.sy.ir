internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32, i32, i32*) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^indirect i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 1;
    cbr i1 %0(prob = 0.5), [ ^if.then1 i32 %arg2 ], [ ^b i32* %arg1, i32 %arg2, i32 %arg3 ];
^if.then():
    ret i32 0;
^b(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sdiv i32 %arg2, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg1, i32 %0, i32* %arg);
    i32 %2 = mul i32 %1, i32 2;
    i32 %3 = srem i32 %2, i32 998244353;
    i32 %4 = srem i32 %arg2, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), [ ^indirect1 i32 %arg1, i32 %3 ], [ ^indirect2 i32 %3 ];
^if.then1(i32 %arg):
    i32 %0 = srem i32 %arg, i32 998244353;
    ret i32 %0;
^indirect1(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 %arg1;
    i32 %1 = srem i32 %0, i32 998244353;
    ret i32 %1;
^indirect2(i32 %arg):
    ret i32 %arg;
}
internal func @power(i32, i32, i32*) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^indirect i32 %arg1, i32 %arg, i32* %arg2, i32 %arg ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @power(i32 %arg1, i32 %0, i32* %arg2);
    i32 %2 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %1, i32* %arg2);
    i32 %3 = srem i32 %arg, i32 2;
    i1 %4 = scmp eq i32 %3, i32 1;
    cbr i1 %4(prob = 0.5), [ ^indirect1 i32 %2, i32* %arg2, i32 %arg3 ], [ ^indirect2 i32 %2 ];
^if.then():
    ret i32 1;
^indirect1(i32 %arg, i32* %arg1, i32 %arg2):
    i32 %0 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg, i32 %arg2, i32* %arg1);
    ret i32 %0;
^indirect2(i32 %arg):
    ret i32 %arg;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32*, i32, i32, i32, i32*) -> i32 {
^entry(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %arg;
    i32* %begin_pos = alloc i32;
    store i32* %begin_pos with i32 %arg1;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i32* %w = alloc i32;
    store i32* %w with i32 %arg3;
    i1 %0 = scmp eq i32 %arg2, i32 1;
    i32 %1 = sdiv i32 %arg2, i32 2;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^b i32* %n, i32* %begin_pos, i32** %arr, i32* %w, i32* %arg4, i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %1 ];
^b(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp gt i32 %arg7, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body i32* %arg3, i32* %arg1, i32** %arg2, i32* %arg, i32* %i, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i32 %arg9 ], [ ^indirect i32* %i, i32* %arg3, i32* %arg, i32* %arg1, i32** %arg2, i32 %arg7, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %0 ];
^if.then():
    ret i32 1;
^while.body(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = srem i32 %arg10, i32 2;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect1 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg4, i32 %arg10, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^indirect2 i32* %arg, i32** %arg2, i32* %arg1, i32* %arg4, i32* %arg3, i32 %arg10, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11):
    i32* %0 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32* %dst_pos = alloc i32;
    store i32* %dst_pos with i32 %arg8;
    i32* %len = alloc i32;
    store i32* %len with i32 %arg5;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    cbr i1 %arg11(prob = 0.97), [ ^while.body1 i32* %len, i32* %i, i32* %dst_pos, i32** %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg, i32* %arg7, i32* %arg7, i32 %arg8, i32* %0, i32 0 ], [ ^b1 i32** %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^indirect1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = sdiv i32 %arg5, i32 2;
    i32* %1 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %0];
    i32 %2 = add i32 %arg5, i32 %arg8;
    i32* %3 = getelementptr &(i32* %arg7)[i32 %2];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    i32 %5 = add i32 %arg11, i32 1;
    store i32* %arg4 with i32 %5;
    ubr [ ^indirect3 i32* %arg, i32** %arg2, i32* %arg3, i32* %arg1, i32* %arg4, i32 %5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %5, i32 %arg12 ];
^indirect2(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = sdiv i32 %arg5, i32 2;
    i32 %1 = add i32 %arg12, i32 %0;
    i32* %2 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %1];
    i32 %3 = add i32 %arg5, i32 %arg8;
    i32* %4 = getelementptr &(i32* %arg7)[i32 %3];
    i32 %5 = load i32* %4;
    store i32* %2 with i32 %5;
    i32 %6 = add i32 %arg11, i32 1;
    store i32* %arg3 with i32 %6;
    ubr [ ^indirect3 i32* %arg, i32** %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32 %6, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %6, i32 %arg12 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32* %arg12, i32 %arg13):
    i32 %0 = add i32 %arg11, i32 %arg13;
    i32* %1 = getelementptr &(i32* %arg10)[i32 %0];
    i32* %2 = getelementptr &(i32* %arg12)[i32 %arg13];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg;
    i32 %6 = load i32* %arg2;
    i32 %7 = load i32* %arg6;
    i32 %8 = load i32* %arg5;
    i32 %9 = load i32* %arg4;
    i32 %10 = add i32 %4, i32 1;
    store i32* %arg1 with i32 %10;
    i1 %11 = scmp lt i32 %10, i32 %5;
    cbr i1 %11(prob = 0.97), [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %6, i32* %arg12, i32 %10 ], [ ^b1 i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %9, i32 %8, i32 %7 ];
^b1(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = sdiv i32 %arg8, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg9, i32 %arg9, i32* %arg4);
    i32 %2 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg6, i32 %arg7, i32 %0, i32 %1, i32* %arg4);
    i32 %3 = load i32* %arg3;
    i32 %4 = load i32* %arg2;
    i32 %5 = load i32* %arg1;
    i32* %6 = load i32** %arg;
    i32 %7 = sdiv i32 %4, i32 2;
    i32 %8 = add i32 %5, i32 %7;
    i32 %9 = call (i32, i32, i32*) -> i32 @multiply(i32 %3, i32 %3, i32* %arg4);
    i32 %10 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %6, i32 %8, i32 %7, i32 %9, i32* %arg4);
    i32 %11 = load i32* %arg2;
    i32 %12 = load i32* %arg1;
    i32* %13 = load i32** %arg;
    store i32* %arg5 with i32 0;
    i32* %wn = alloc i32;
    store i32* %wn with i32 1;
    i32 %14 = sdiv i32 %11, i32 2;
    i1 %15 = scmp gt i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), [ ^indirect4 i32* %arg3, i32* %wn, i32* %arg2, i32* %arg5, i32* %arg1, i32 %14, i32* %arg4, i32* %13, i32 %12, i32 0, i32 1 ], [ ^b2 ];
^indirect3(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg5, i32 %arg9;
    cbr i1 %0(prob = 0.97), [ ^while.body i32* %arg, i32* %arg2, i32** %arg1, i32* %arg3, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^indirect i32* %arg4, i32* %arg, i32* %arg3, i32* %arg2, i32** %arg1, i32 %arg9, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 true ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %x = alloc i32;
    i32 %0 = add i32 %arg8, i32 %arg9;
    i32* %1 = getelementptr &(i32* %arg7)[i32 %0];
    i32 %2 = load i32* %1;
    store i32* %x with i32 %2;
    i32* %y = alloc i32;
    i32 %3 = add i32 %arg5, i32 %arg8;
    i32 %4 = add i32 %3, i32 %arg9;
    i32* %5 = getelementptr &(i32* %arg7)[i32 %4];
    i32 %6 = load i32* %5;
    store i32* %y with i32 %6;
    i32 %7 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg10, i32 %6, i32* %arg6);
    i32 %8 = add i32 %2, i32 %7;
    i32 %9 = srem i32 %8, i32 998244353;
    store i32* %1 with i32 %9;
    i32 %10 = load i32* %y;
    i32 %11 = load i32* %x;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg3;
    i32 %14 = load i32* %arg2;
    i32 %15 = load i32* %arg4;
    i32 %16 = sdiv i32 %14, i32 2;
    i32 %17 = add i32 %15, i32 %13;
    i32 %18 = add i32 %17, i32 %16;
    i32* %19 = getelementptr &(i32* %arg7)[i32 %18];
    i32 %20 = call (i32, i32, i32*) -> i32 @multiply(i32 %12, i32 %10, i32* %arg6);
    i32 %21 = sub i32 %11, i32 %20;
    i32 %22 = add i32 %21, i32 998244353;
    i32 %23 = srem i32 %22, i32 998244353;
    store i32* %19 with i32 %23;
    i32 %24 = load i32* %arg1;
    i32 %25 = load i32* %arg3;
    i32 %26 = load i32* %arg;
    i32 %27 = load i32* %arg2;
    i32 %28 = load i32* %arg4;
    i32 %29 = call (i32, i32, i32*) -> i32 @multiply(i32 %24, i32 %26, i32* %arg6);
    store i32* %arg1 with i32 %29;
    i32 %30 = add i32 %25, i32 1;
    store i32* %arg3 with i32 %30;
    i32 %31 = sdiv i32 %27, i32 2;
    i1 %32 = scmp lt i32 %30, i32 %31;
    cbr i1 %32(prob = 0.97), [ ^indirect4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %31, i32* %arg6, i32* %arg7, i32 %28, i32 %30, i32 %29 ], [ ^b2 ];
^b2():
    ret i32 0;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %d = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %m = alloc i32;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = load i32* %n;
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* %d with i32 1;
    i32 %5 = add i32 %4, i32 -1;
    i32 %6 = add i32 %5, i32 %3;
    i1 %7 = scmp gt i32 %6, i32 1;
    cbr i1 %7(prob = 0.97), [ ^while.body i32* %n, i32* %m, i32* %2, i32* %0, i32* %d, i32 1, i32* %d, i32 %6 ], [ ^b i32* %m, i32* %n, i32* %2, i32* %0, i32* %d, i32 1, i32* %d ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = mul i32 %arg5, i32 2;
    store i32* %arg4 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg7;
    cbr i1 %1(prob = 0.97), [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %0, i32* %arg6, i32 %arg7 ], [ ^b i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %0, i32* %arg6 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6):
    i32 %0 = sdiv i32 998244352, i32 %arg5;
    i32 %1 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %0, i32* %arg4);
    i32 %2 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg3, i32 0, i32 %arg5, i32 %1, i32* %arg4);
    i32 %3 = load i32* %arg4;
    i32 %4 = sdiv i32 998244352, i32 %3;
    i32 %5 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %4, i32* %arg4);
    i32 %6 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg2, i32 0, i32 %3, i32 %5, i32* %arg4);
    i32 %7 = load i32* %arg4;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32* %i, i32* %arg3, i32* %arg4, i32 %7, i32 0, i32* %arg6 ], [ ^indirect i32* %arg, i32* %arg1, i32 %7, i32* %arg3, i32* %arg4, i32* %arg6 ];
^super.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32 %0 = add i32 %arg6, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.67), [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7 ], [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = sdiv i32 998244352, i32 %arg2;
    i32 %1 = sub i32 998244352, i32 %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %1, i32* %arg4);
    i32 %3 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg3, i32 0, i32 %arg2, i32 %2, i32* %arg4);
    i32 %4 = load i32* %arg;
    i32 %5 = load i32* %arg1;
    i32 %6 = load i32* %arg4;
    i1 %7 = scmp gt i32 %6, i32 0;
    i32 %8 = call (i32, i32, i32*) -> i32 @power(i32 %6, i32 998244351, i32* %arg5);
    cbr i1 %7(prob = 0.97), [ ^super.header1 i32* %arg3, i32* %arg4, i32 %6, i32 %5, i32 %4, i32 0, i32 %8 ], [ ^b1 i32* %arg3, i32 %5, i32 %4 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %arg6];
    i32 %3 = load i32* %2;
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %3, i32* %arg4);
    store i32* %0 with i32 %4;
    i32* %5 = getelementptr &(i32* %0)[i64 1];
    i32 %6 = load i32* %5;
    i32* %7 = getelementptr &(i32* %2)[i64 1];
    i32 %8 = load i32* %7;
    i32 %9 = call (i32, i32, i32*) -> i32 @multiply(i32 %6, i32 %8, i32* %arg4);
    store i32* %5 with i32 %9;
    i32* %10 = getelementptr &(i32* %0)[i64 2];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(i32* %2)[i64 2];
    i32 %13 = load i32* %12;
    i32 %14 = call (i32, i32, i32*) -> i32 @multiply(i32 %11, i32 %13, i32* %arg4);
    store i32* %10 with i32 %14;
    i32* %15 = getelementptr &(i32* %0)[i64 3];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %2)[i64 3];
    i32 %18 = load i32* %17;
    i32 %19 = call (i32, i32, i32*) -> i32 @multiply(i32 %16, i32 %18, i32* %arg4);
    store i32* %15 with i32 %19;
    i32* %20 = getelementptr &(i32* %0)[i64 4];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %2)[i64 4];
    i32 %23 = load i32* %22;
    i32 %24 = call (i32, i32, i32*) -> i32 @multiply(i32 %21, i32 %23, i32* %arg4);
    store i32* %20 with i32 %24;
    i32* %25 = getelementptr &(i32* %0)[i64 5];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %2)[i64 5];
    i32 %28 = load i32* %27;
    i32 %29 = call (i32, i32, i32*) -> i32 @multiply(i32 %26, i32 %28, i32* %arg4);
    store i32* %25 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 6];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %2)[i64 6];
    i32 %33 = load i32* %32;
    i32 %34 = call (i32, i32, i32*) -> i32 @multiply(i32 %31, i32 %33, i32* %arg4);
    store i32* %30 with i32 %34;
    i32* %35 = getelementptr &(i32* %0)[i64 7];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %2)[i64 7];
    i32 %38 = load i32* %37;
    i32 %39 = call (i32, i32, i32*) -> i32 @multiply(i32 %36, i32 %38, i32* %arg4);
    store i32* %35 with i32 %39;
    i32* %40 = getelementptr &(i32* %0)[i64 8];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %2)[i64 8];
    i32 %43 = load i32* %42;
    i32 %44 = call (i32, i32, i32*) -> i32 @multiply(i32 %41, i32 %43, i32* %arg4);
    store i32* %40 with i32 %44;
    i32* %45 = getelementptr &(i32* %0)[i64 9];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %2)[i64 9];
    i32 %48 = load i32* %47;
    i32 %49 = call (i32, i32, i32*) -> i32 @multiply(i32 %46, i32 %48, i32* %arg4);
    store i32* %45 with i32 %49;
    i32* %50 = getelementptr &(i32* %0)[i64 10];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %2)[i64 10];
    i32 %53 = load i32* %52;
    i32 %54 = call (i32, i32, i32*) -> i32 @multiply(i32 %51, i32 %53, i32* %arg4);
    store i32* %50 with i32 %54;
    i32* %55 = getelementptr &(i32* %0)[i64 11];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %2)[i64 11];
    i32 %58 = load i32* %57;
    i32 %59 = call (i32, i32, i32*) -> i32 @multiply(i32 %56, i32 %58, i32* %arg4);
    store i32* %55 with i32 %59;
    i32* %60 = getelementptr &(i32* %0)[i64 12];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %2)[i64 12];
    i32 %63 = load i32* %62;
    i32 %64 = call (i32, i32, i32*) -> i32 @multiply(i32 %61, i32 %63, i32* %arg4);
    store i32* %60 with i32 %64;
    i32* %65 = getelementptr &(i32* %0)[i64 13];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %2)[i64 13];
    i32 %68 = load i32* %67;
    i32 %69 = call (i32, i32, i32*) -> i32 @multiply(i32 %66, i32 %68, i32* %arg4);
    store i32* %65 with i32 %69;
    i32* %70 = getelementptr &(i32* %0)[i64 14];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %2)[i64 14];
    i32 %73 = load i32* %72;
    i32 %74 = call (i32, i32, i32*) -> i32 @multiply(i32 %71, i32 %73, i32* %arg4);
    store i32* %70 with i32 %74;
    i32* %75 = getelementptr &(i32* %0)[i64 15];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %2)[i64 15];
    i32 %78 = load i32* %77;
    i32 %79 = call (i32, i32, i32*) -> i32 @multiply(i32 %76, i32 %78, i32* %arg4);
    store i32* %75 with i32 %79;
    i32 %80 = add i32 %arg6, i32 16;
    store i32* %arg2 with i32 %80;
    i1 %81 = scmp lt i32 %80, i32 %arg5;
    cbr i1 %81(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %80, i32* %arg7 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg5, i32* %arg3, i32* %arg4, i32* %arg7 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %arg6];
    i32 %3 = load i32* %2;
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %3, i32* %arg4);
    store i32* %0 with i32 %4;
    i32 %5 = add i32 %arg6, i32 1;
    store i32* %arg2 with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg5;
    cbr i1 %6(prob = 0.97), [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %5, i32* %arg7 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg5, i32* %arg3, i32* %arg4, i32* %arg7 ];
^super.header1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg5, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1(prob = 0.67), [ ^while.body3 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^while.body4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b1(i32* %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @stoptime(i32 79);
    i32 %0 = add i32 %arg1, i32 -1;
    i32 %1 = add i32 %0, i32 %arg2;
    call (i32, i32*) -> void @putarray(i32 %1, i32* %arg);
    ret i32 0;
^while.body3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %arg6, i32* %arg1);
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(i32* %0)[i64 1];
    i32 %4 = load i32* %3;
    i32 %5 = call (i32, i32, i32*) -> i32 @multiply(i32 %4, i32 %arg6, i32* %arg1);
    store i32* %3 with i32 %5;
    i32* %6 = getelementptr &(i32* %0)[i64 2];
    i32 %7 = load i32* %6;
    i32 %8 = call (i32, i32, i32*) -> i32 @multiply(i32 %7, i32 %arg6, i32* %arg1);
    store i32* %6 with i32 %8;
    i32* %9 = getelementptr &(i32* %0)[i64 3];
    i32 %10 = load i32* %9;
    i32 %11 = call (i32, i32, i32*) -> i32 @multiply(i32 %10, i32 %arg6, i32* %arg1);
    store i32* %9 with i32 %11;
    i32* %12 = getelementptr &(i32* %0)[i64 4];
    i32 %13 = load i32* %12;
    i32 %14 = call (i32, i32, i32*) -> i32 @multiply(i32 %13, i32 %arg6, i32* %arg1);
    store i32* %12 with i32 %14;
    i32* %15 = getelementptr &(i32* %0)[i64 5];
    i32 %16 = load i32* %15;
    i32 %17 = call (i32, i32, i32*) -> i32 @multiply(i32 %16, i32 %arg6, i32* %arg1);
    store i32* %15 with i32 %17;
    i32* %18 = getelementptr &(i32* %0)[i64 6];
    i32 %19 = load i32* %18;
    i32 %20 = call (i32, i32, i32*) -> i32 @multiply(i32 %19, i32 %arg6, i32* %arg1);
    store i32* %18 with i32 %20;
    i32* %21 = getelementptr &(i32* %0)[i64 7];
    i32 %22 = load i32* %21;
    i32 %23 = call (i32, i32, i32*) -> i32 @multiply(i32 %22, i32 %arg6, i32* %arg1);
    store i32* %21 with i32 %23;
    i32* %24 = getelementptr &(i32* %0)[i64 8];
    i32 %25 = load i32* %24;
    i32 %26 = call (i32, i32, i32*) -> i32 @multiply(i32 %25, i32 %arg6, i32* %arg1);
    store i32* %24 with i32 %26;
    i32* %27 = getelementptr &(i32* %0)[i64 9];
    i32 %28 = load i32* %27;
    i32 %29 = call (i32, i32, i32*) -> i32 @multiply(i32 %28, i32 %arg6, i32* %arg1);
    store i32* %27 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 10];
    i32 %31 = load i32* %30;
    i32 %32 = call (i32, i32, i32*) -> i32 @multiply(i32 %31, i32 %arg6, i32* %arg1);
    store i32* %30 with i32 %32;
    i32* %33 = getelementptr &(i32* %0)[i64 11];
    i32 %34 = load i32* %33;
    i32 %35 = call (i32, i32, i32*) -> i32 @multiply(i32 %34, i32 %arg6, i32* %arg1);
    store i32* %33 with i32 %35;
    i32* %36 = getelementptr &(i32* %0)[i64 12];
    i32 %37 = load i32* %36;
    i32 %38 = call (i32, i32, i32*) -> i32 @multiply(i32 %37, i32 %arg6, i32* %arg1);
    store i32* %36 with i32 %38;
    i32* %39 = getelementptr &(i32* %0)[i64 13];
    i32 %40 = load i32* %39;
    i32 %41 = call (i32, i32, i32*) -> i32 @multiply(i32 %40, i32 %arg6, i32* %arg1);
    store i32* %39 with i32 %41;
    i32* %42 = getelementptr &(i32* %0)[i64 14];
    i32 %43 = load i32* %42;
    i32 %44 = call (i32, i32, i32*) -> i32 @multiply(i32 %43, i32 %arg6, i32* %arg1);
    store i32* %42 with i32 %44;
    i32* %45 = getelementptr &(i32* %0)[i64 15];
    i32 %46 = load i32* %45;
    i32 %47 = call (i32, i32, i32*) -> i32 @multiply(i32 %46, i32 %arg6, i32* %arg1);
    store i32* %45 with i32 %47;
    i32 %48 = add i32 %arg5, i32 16;
    i1 %49 = scmp lt i32 %48, i32 %arg2;
    cbr i1 %49(prob = 0.97), [ ^super.header1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %48, i32 %arg6 ], [ ^b1 i32* %arg, i32 %arg3, i32 %arg4 ];
^while.body4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %arg6, i32* %arg1);
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg5, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4(prob = 0.97), [ ^while.body4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %3, i32 %arg6 ], [ ^b1 i32* %arg, i32 %arg3, i32 %arg4 ];
}
