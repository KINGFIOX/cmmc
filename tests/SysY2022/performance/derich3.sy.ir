internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1 { Flexible };
internal [512 * [270 * f32]]* @my_y2 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * [270 * f32]]* %0 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    f32* %1 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %3 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0];
    [512 * [270 * f32]]* %4 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0];
    [512 * [270 * f32]]* %6 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* %6)[i64 0][i64 0];
    [512 * [270 * f32]]* %8 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %9 = getelementptr &([512 * [270 * f32]]* %8)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %127];
    i1 %11 = icmp slt i32 %10, i32 512;
    cbr i1 %11(prob = 0.97), ^prebody, ^while.header1;
  ^prebody:
    [270 * f32]* %12 = getelementptr &([270 * f32]* %7)[i32 %10];
    [270 * f32]* %13 = getelementptr &([270 * f32]* %3)[i32 %10];
    ubr ^while.body;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b1, i32 %225];
    i1 %15 = icmp slt i32 %14, i32 512;
    cbr i1 %15(prob = 0.97), ^prebody1, ^while.header2;
  ^prebody1:
    [270 * f32]* %16 = getelementptr &([270 * f32]* %9)[i32 %14];
    [270 * f32]* %17 = getelementptr &([270 * f32]* %3)[i32 %14];
    ubr ^while.body2;
  ^while.body:
    f32 %18 = phi [^prebody, f32 0] [^while.body, f32 %47];
    f32 %19 = phi [^prebody, f32 0] [^while.body, f32 %56];
    f32 %20 = phi [^prebody, f32 0] [^while.body, f32 %50];
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %60];
    f32* %22 = getelementptr &([270 * f32]* %13)[i64 0][i32 %21];
    f32 %23 = load f32* %22;
    f32 %24 = fmul f32 %23, f32 -0.189399;
    f32 %25 = fmul f32 %20, f32 0.110615;
    f32 %26 = fadd f32 %24, f32 %25;
    f32 %27 = fadd f32 %26, f32 %19;
    f32 %28 = fmul f32 %18, f32 -0.606235;
    f32 %29 = fadd f32 %27, f32 %28;
    f32* %30 = getelementptr &([270 * f32]* %12)[i64 0][i32 %21];
    store f32* %30 with f32 %29;
    f32* %31 = getelementptr &(f32* %22)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fmul f32 %32, f32 -0.189399;
    f32 %34 = fmul f32 %23, f32 0.110615;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fadd f32 %35, f32 %29;
    f32 %37 = fmul f32 %19, f32 -0.606235;
    f32 %38 = fadd f32 %36, f32 %37;
    f32* %39 = getelementptr &(f32* %30)[i64 1];
    store f32* %39 with f32 %38;
    f32* %40 = getelementptr &(f32* %22)[i64 2];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %41, f32 -0.189399;
    f32 %43 = fmul f32 %32, f32 0.110615;
    f32 %44 = fadd f32 %42, f32 %43;
    f32 %45 = fadd f32 %44, f32 %38;
    f32 %46 = fmul f32 %29, f32 -0.606235;
    f32 %47 = fadd f32 %45, f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 2];
    store f32* %48 with f32 %47;
    f32* %49 = getelementptr &(f32* %22)[i64 3];
    f32 %50 = load f32* %49;
    f32 %51 = fmul f32 %50, f32 -0.189399;
    f32 %52 = fmul f32 %41, f32 0.110615;
    f32 %53 = fadd f32 %51, f32 %52;
    f32 %54 = fadd f32 %53, f32 %47;
    f32 %55 = fmul f32 %38, f32 -0.606235;
    f32 %56 = fadd f32 %54, f32 %55;
    f32* %57 = getelementptr &(f32* %30)[i64 3];
    store f32* %57 with f32 %56;
    i32 %58 = add i32 %21, i32 8;
    i1 %59 = icmp slt i32 %58, i32 270;
    i32 %60 = add i32 %21, i32 4;
    cbr i1 %59(prob = 0.89), ^while.body, ^while.body1;
  ^while.header2:
    i32 %61 = phi [^while.header1, i32 0] [^b2, i32 %306];
    i1 %62 = icmp slt i32 %61, i32 512;
    cbr i1 %62(prob = 0.97), ^prebody2, ^while.header3;
  ^prebody2:
    [270 * f32]* %63 = getelementptr &([270 * f32]* %5)[i32 %61];
    [270 * f32]* %64 = getelementptr &([270 * f32]* %7)[i32 %61];
    [270 * f32]* %65 = getelementptr &([270 * f32]* %9)[i32 %61];
    ubr ^while.body4;
  ^while.body1:
    i32 %66 = phi [^while.body, i32 %60] [^while.body1, i32 %79];
    f32 %67 = phi [^while.body, f32 %50] [^while.body1, f32 %71];
    f32 %68 = phi [^while.body, f32 %56] [^while.body1, f32 %77];
    f32 %69 = phi [^while.body, f32 %47] [^while.body1, f32 %68];
    f32* %70 = getelementptr &([270 * f32]* %13)[i64 0][i32 %66];
    f32 %71 = load f32* %70;
    f32 %72 = fmul f32 %71, f32 -0.189399;
    f32 %73 = fmul f32 %67, f32 0.110615;
    f32 %74 = fadd f32 %72, f32 %73;
    f32 %75 = fadd f32 %74, f32 %68;
    f32 %76 = fmul f32 %69, f32 -0.606235;
    f32 %77 = fadd f32 %75, f32 %76;
    f32* %78 = getelementptr &([270 * f32]* %12)[i64 0][i32 %66];
    store f32* %78 with f32 %77;
    i32 %79 = add i32 %66, i32 1;
    i1 %80 = icmp slt i32 %79, i32 270;
    cbr i1 %80(prob = 0.75), ^while.body1, ^b;
  ^while.body2:
    f32 %81 = phi [^prebody1, f32 0] [^while.body2, f32 %109];
    f32 %82 = phi [^prebody1, f32 0] [^while.body2, f32 %118];
    f32 %83 = phi [^prebody1, f32 0] [^while.body2, f32 %112];
    f32 %84 = phi [^prebody1, f32 0] [^while.body2, f32 %121];
    i32 %85 = phi [^prebody1, i32 269] [^while.body2, i32 %124];
    f32 %86 = fmul f32 %84, f32 -0.184358;
    f32 %87 = fmul f32 %83, f32 0.114821;
    f32 %88 = fadd f32 %86, f32 %87;
    f32 %89 = fadd f32 %88, f32 %82;
    f32 %90 = fmul f32 %81, f32 -0.606235;
    f32 %91 = fadd f32 %89, f32 %90;
    f32* %92 = getelementptr &([270 * f32]* %16)[i64 0][i32 %85];
    store f32* %92 with f32 %91;
    f32* %93 = getelementptr &([270 * f32]* %17)[i64 0][i32 %85];
    f32 %94 = load f32* %93;
    f32 %95 = fmul f32 %94, f32 -0.184358;
    f32 %96 = fmul f32 %84, f32 0.114821;
    f32 %97 = fadd f32 %95, f32 %96;
    f32 %98 = fadd f32 %97, f32 %91;
    f32 %99 = fmul f32 %82, f32 -0.606235;
    f32 %100 = fadd f32 %98, f32 %99;
    f32* %101 = getelementptr &(f32* %92)[i64 -1];
    store f32* %101 with f32 %100;
    f32* %102 = getelementptr &(f32* %93)[i64 -1];
    f32 %103 = load f32* %102;
    f32 %104 = fmul f32 %103, f32 -0.184358;
    f32 %105 = fmul f32 %94, f32 0.114821;
    f32 %106 = fadd f32 %104, f32 %105;
    f32 %107 = fadd f32 %106, f32 %100;
    f32 %108 = fmul f32 %91, f32 -0.606235;
    f32 %109 = fadd f32 %107, f32 %108;
    f32* %110 = getelementptr &(f32* %92)[i64 -2];
    store f32* %110 with f32 %109;
    f32* %111 = getelementptr &(f32* %93)[i64 -2];
    f32 %112 = load f32* %111;
    f32 %113 = fmul f32 %112, f32 -0.184358;
    f32 %114 = fmul f32 %103, f32 0.114821;
    f32 %115 = fadd f32 %113, f32 %114;
    f32 %116 = fadd f32 %115, f32 %109;
    f32 %117 = fmul f32 %100, f32 -0.606235;
    f32 %118 = fadd f32 %116, f32 %117;
    f32* %119 = getelementptr &(f32* %92)[i64 -3];
    store f32* %119 with f32 %118;
    f32* %120 = getelementptr &(f32* %93)[i64 -3];
    f32 %121 = load f32* %120;
    i32 %122 = add i32 %85, i32 -8;
    i1 %123 = icmp sgt i32 %122, i32 -1;
    i32 %124 = add i32 %85, i32 -4;
    cbr i1 %123(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i32 %125 = phi [^while.header2, i32 0] [^b3, i32 %310];
    i1 %126 = icmp slt i32 %125, i32 270;
    cbr i1 %126(prob = 0.97), ^while.body5, ^while.header4;
  ^b:
    i32 %127 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.body3:
    i32 %128 = phi [^while.body2, i32 %124] [^while.body3, i32 %142];
    f32 %129 = phi [^while.body2, f32 %121] [^while.body3, f32 %141];
    f32 %130 = phi [^while.body2, f32 %112] [^while.body3, f32 %129];
    f32 %131 = phi [^while.body2, f32 %118] [^while.body3, f32 %138];
    f32 %132 = phi [^while.body2, f32 %109] [^while.body3, f32 %131];
    f32 %133 = fmul f32 %129, f32 -0.184358;
    f32 %134 = fmul f32 %130, f32 0.114821;
    f32 %135 = fadd f32 %133, f32 %134;
    f32 %136 = fadd f32 %135, f32 %131;
    f32 %137 = fmul f32 %132, f32 -0.606235;
    f32 %138 = fadd f32 %136, f32 %137;
    f32* %139 = getelementptr &([270 * f32]* %16)[i64 0][i32 %128];
    store f32* %139 with f32 %138;
    f32* %140 = getelementptr &([270 * f32]* %17)[i64 0][i32 %128];
    f32 %141 = load f32* %140;
    i32 %142 = add i32 %128, i32 -1;
    i1 %143 = icmp sgt i32 %142, i32 -1;
    cbr i1 %143(prob = 0.75), ^while.body3, ^b1;
  ^while.body4:
    i32 %144 = phi [^prebody2, i32 0] [^while.body4, i32 %171];
    f32* %145 = getelementptr &([270 * f32]* %64)[i64 0][i32 %144];
    f32 %146 = load f32* %145;
    f32* %147 = getelementptr &([270 * f32]* %65)[i64 0][i32 %144];
    f32 %148 = load f32* %147;
    f32 %149 = fadd f32 %146, f32 %148;
    f32* %150 = getelementptr &([270 * f32]* %63)[i64 0][i32 %144];
    store f32* %150 with f32 %149;
    f32* %151 = getelementptr &(f32* %145)[i64 1];
    f32 %152 = load f32* %151;
    f32* %153 = getelementptr &(f32* %147)[i64 1];
    f32 %154 = load f32* %153;
    f32 %155 = fadd f32 %152, f32 %154;
    f32* %156 = getelementptr &(f32* %150)[i64 1];
    store f32* %156 with f32 %155;
    f32* %157 = getelementptr &(f32* %145)[i64 2];
    f32 %158 = load f32* %157;
    f32* %159 = getelementptr &(f32* %147)[i64 2];
    f32 %160 = load f32* %159;
    f32 %161 = fadd f32 %158, f32 %160;
    f32* %162 = getelementptr &(f32* %150)[i64 2];
    store f32* %162 with f32 %161;
    f32* %163 = getelementptr &(f32* %145)[i64 3];
    f32 %164 = load f32* %163;
    f32* %165 = getelementptr &(f32* %147)[i64 3];
    f32 %166 = load f32* %165;
    f32 %167 = fadd f32 %164, f32 %166;
    f32* %168 = getelementptr &(f32* %150)[i64 3];
    store f32* %168 with f32 %167;
    i32 %169 = add i32 %144, i32 8;
    i1 %170 = icmp slt i32 %169, i32 270;
    i32 %171 = add i32 %144, i32 4;
    cbr i1 %170(prob = 0.89), ^while.body4, ^while.body6;
  ^while.body5:
    f32 %172 = phi [^while.header3, f32 0] [^while.body5, f32 %206];
    f32 %173 = phi [^while.header3, f32 0] [^while.body5, f32 %217];
    f32 %174 = phi [^while.header3, f32 0] [^while.body5, f32 %211];
    i32 %175 = phi [^while.header3, i32 0] [^while.body5, i32 %222];
    [270 * f32]* %176 = getelementptr &([270 * f32]* %5)[i32 %175];
    f32* %177 = getelementptr &([270 * f32]* %176)[i64 0][i32 %125];
    f32 %178 = load f32* %177;
    f32 %179 = fmul f32 %178, f32 -0.189399;
    f32 %180 = fmul f32 %174, f32 0.110615;
    f32 %181 = fadd f32 %179, f32 %180;
    f32 %182 = fadd f32 %181, f32 %173;
    f32 %183 = fmul f32 %172, f32 -0.606235;
    f32 %184 = fadd f32 %182, f32 %183;
    [270 * f32]* %185 = getelementptr &([270 * f32]* %7)[i32 %175];
    f32* %186 = getelementptr &([270 * f32]* %185)[i64 0][i32 %125];
    store f32* %186 with f32 %184;
    [270 * f32]* %187 = getelementptr &([270 * f32]* %176)[i64 1];
    f32* %188 = getelementptr &([270 * f32]* %187)[i64 0][i32 %125];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %189, f32 -0.189399;
    f32 %191 = fmul f32 %178, f32 0.110615;
    f32 %192 = fadd f32 %190, f32 %191;
    f32 %193 = fadd f32 %192, f32 %184;
    f32 %194 = fmul f32 %173, f32 -0.606235;
    f32 %195 = fadd f32 %193, f32 %194;
    [270 * f32]* %196 = getelementptr &([270 * f32]* %185)[i64 1];
    f32* %197 = getelementptr &([270 * f32]* %196)[i64 0][i32 %125];
    store f32* %197 with f32 %195;
    [270 * f32]* %198 = getelementptr &([270 * f32]* %176)[i64 2];
    f32* %199 = getelementptr &([270 * f32]* %198)[i64 0][i32 %125];
    f32 %200 = load f32* %199;
    f32 %201 = fmul f32 %200, f32 -0.189399;
    f32 %202 = fmul f32 %189, f32 0.110615;
    f32 %203 = fadd f32 %201, f32 %202;
    f32 %204 = fadd f32 %203, f32 %195;
    f32 %205 = fmul f32 %184, f32 -0.606235;
    f32 %206 = fadd f32 %204, f32 %205;
    [270 * f32]* %207 = getelementptr &([270 * f32]* %185)[i64 2];
    f32* %208 = getelementptr &([270 * f32]* %207)[i64 0][i32 %125];
    store f32* %208 with f32 %206;
    [270 * f32]* %209 = getelementptr &([270 * f32]* %176)[i64 3];
    f32* %210 = getelementptr &([270 * f32]* %209)[i64 0][i32 %125];
    f32 %211 = load f32* %210;
    f32 %212 = fmul f32 %211, f32 -0.189399;
    f32 %213 = fmul f32 %200, f32 0.110615;
    f32 %214 = fadd f32 %212, f32 %213;
    f32 %215 = fadd f32 %214, f32 %206;
    f32 %216 = fmul f32 %195, f32 -0.606235;
    f32 %217 = fadd f32 %215, f32 %216;
    [270 * f32]* %218 = getelementptr &([270 * f32]* %185)[i64 3];
    f32* %219 = getelementptr &([270 * f32]* %218)[i64 0][i32 %125];
    store f32* %219 with f32 %217;
    i32 %220 = add i32 %175, i32 8;
    i1 %221 = icmp slt i32 %220, i32 512;
    i32 %222 = add i32 %175, i32 4;
    cbr i1 %221(prob = 0.89), ^while.body5, ^while.body7;
  ^while.header4:
    i32 %223 = phi [^while.header3, i32 0] [^b4, i32 %330];
    i1 %224 = icmp slt i32 %223, i32 270;
    cbr i1 %224(prob = 0.97), ^while.body8, ^while.header5;
  ^b1:
    i32 %225 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^while.body6:
    i32 %226 = phi [^while.body4, i32 %171] [^while.body6, i32 %233];
    f32* %227 = getelementptr &([270 * f32]* %64)[i64 0][i32 %226];
    f32 %228 = load f32* %227;
    f32* %229 = getelementptr &([270 * f32]* %65)[i64 0][i32 %226];
    f32 %230 = load f32* %229;
    f32 %231 = fadd f32 %228, f32 %230;
    f32* %232 = getelementptr &([270 * f32]* %63)[i64 0][i32 %226];
    store f32* %232 with f32 %231;
    i32 %233 = add i32 %226, i32 1;
    i1 %234 = icmp slt i32 %233, i32 270;
    cbr i1 %234(prob = 0.75), ^while.body6, ^b2;
  ^while.body7:
    i32 %235 = phi [^while.body5, i32 %222] [^while.body7, i32 %250];
    f32 %236 = phi [^while.body5, f32 %211] [^while.body7, f32 %241];
    f32 %237 = phi [^while.body5, f32 %217] [^while.body7, f32 %247];
    f32 %238 = phi [^while.body5, f32 %206] [^while.body7, f32 %237];
    [270 * f32]* %239 = getelementptr &([270 * f32]* %5)[i32 %235];
    f32* %240 = getelementptr &([270 * f32]* %239)[i64 0][i32 %125];
    f32 %241 = load f32* %240;
    f32 %242 = fmul f32 %241, f32 -0.189399;
    f32 %243 = fmul f32 %236, f32 0.110615;
    f32 %244 = fadd f32 %242, f32 %243;
    f32 %245 = fadd f32 %244, f32 %237;
    f32 %246 = fmul f32 %238, f32 -0.606235;
    f32 %247 = fadd f32 %245, f32 %246;
    [270 * f32]* %248 = getelementptr &([270 * f32]* %7)[i32 %235];
    f32* %249 = getelementptr &([270 * f32]* %248)[i64 0][i32 %125];
    store f32* %249 with f32 %247;
    i32 %250 = add i32 %235, i32 1;
    i1 %251 = icmp slt i32 %250, i32 512;
    cbr i1 %251(prob = 0.75), ^while.body7, ^b3;
  ^while.body8:
    f32 %252 = phi [^while.header4, f32 0] [^while.body8, f32 %284];
    f32 %253 = phi [^while.header4, f32 0] [^while.body8, f32 %295];
    f32 %254 = phi [^while.header4, f32 0] [^while.body8, f32 %289];
    f32 %255 = phi [^while.header4, f32 0] [^while.body8, f32 %300];
    i32 %256 = phi [^while.header4, i32 511] [^while.body8, i32 %303];
    f32 %257 = fmul f32 %255, f32 -0.184358;
    f32 %258 = fmul f32 %254, f32 0.114821;
    f32 %259 = fadd f32 %257, f32 %258;
    f32 %260 = fadd f32 %259, f32 %253;
    f32 %261 = fmul f32 %252, f32 -0.606235;
    f32 %262 = fadd f32 %260, f32 %261;
    [270 * f32]* %263 = getelementptr &([270 * f32]* %9)[i32 %256];
    f32* %264 = getelementptr &([270 * f32]* %263)[i64 0][i32 %223];
    store f32* %264 with f32 %262;
    [270 * f32]* %265 = getelementptr &([270 * f32]* %5)[i32 %256];
    f32* %266 = getelementptr &([270 * f32]* %265)[i64 0][i32 %223];
    f32 %267 = load f32* %266;
    f32 %268 = fmul f32 %267, f32 -0.184358;
    f32 %269 = fmul f32 %255, f32 0.114821;
    f32 %270 = fadd f32 %268, f32 %269;
    f32 %271 = fadd f32 %270, f32 %262;
    f32 %272 = fmul f32 %253, f32 -0.606235;
    f32 %273 = fadd f32 %271, f32 %272;
    [270 * f32]* %274 = getelementptr &([270 * f32]* %263)[i64 -1];
    f32* %275 = getelementptr &([270 * f32]* %274)[i64 0][i32 %223];
    store f32* %275 with f32 %273;
    [270 * f32]* %276 = getelementptr &([270 * f32]* %265)[i64 -1];
    f32* %277 = getelementptr &([270 * f32]* %276)[i64 0][i32 %223];
    f32 %278 = load f32* %277;
    f32 %279 = fmul f32 %278, f32 -0.184358;
    f32 %280 = fmul f32 %267, f32 0.114821;
    f32 %281 = fadd f32 %279, f32 %280;
    f32 %282 = fadd f32 %281, f32 %273;
    f32 %283 = fmul f32 %262, f32 -0.606235;
    f32 %284 = fadd f32 %282, f32 %283;
    [270 * f32]* %285 = getelementptr &([270 * f32]* %263)[i64 -2];
    f32* %286 = getelementptr &([270 * f32]* %285)[i64 0][i32 %223];
    store f32* %286 with f32 %284;
    [270 * f32]* %287 = getelementptr &([270 * f32]* %265)[i64 -2];
    f32* %288 = getelementptr &([270 * f32]* %287)[i64 0][i32 %223];
    f32 %289 = load f32* %288;
    f32 %290 = fmul f32 %289, f32 -0.184358;
    f32 %291 = fmul f32 %278, f32 0.114821;
    f32 %292 = fadd f32 %290, f32 %291;
    f32 %293 = fadd f32 %292, f32 %284;
    f32 %294 = fmul f32 %273, f32 -0.606235;
    f32 %295 = fadd f32 %293, f32 %294;
    [270 * f32]* %296 = getelementptr &([270 * f32]* %263)[i64 -3];
    f32* %297 = getelementptr &([270 * f32]* %296)[i64 0][i32 %223];
    store f32* %297 with f32 %295;
    [270 * f32]* %298 = getelementptr &([270 * f32]* %265)[i64 -3];
    f32* %299 = getelementptr &([270 * f32]* %298)[i64 0][i32 %223];
    f32 %300 = load f32* %299;
    i32 %301 = add i32 %256, i32 -8;
    i1 %302 = icmp sgt i32 %301, i32 -1;
    i32 %303 = add i32 %256, i32 -4;
    cbr i1 %302(prob = 0.89), ^while.body8, ^while.body9;
  ^while.header5:
    i32 %304 = phi [^while.header4, i32 0] [^b5, i32 %368];
    i1 %305 = icmp slt i32 %304, i32 512;
    cbr i1 %305(prob = 0.97), ^prebody3, ^entry1;
  ^b2:
    i32 %306 = add i32 %61, i32 1;
    ubr ^while.header2;
  ^prebody3:
    [270 * f32]* %307 = getelementptr &([270 * f32]* %5)[i32 %304];
    [270 * f32]* %308 = getelementptr &([270 * f32]* %7)[i32 %304];
    [270 * f32]* %309 = getelementptr &([270 * f32]* %9)[i32 %304];
    ubr ^while.body10;
  ^b3:
    i32 %310 = add i32 %125, i32 1;
    ubr ^while.header3;
  ^while.body9:
    i32 %311 = phi [^while.body8, i32 %303] [^while.body9, i32 %327];
    f32 %312 = phi [^while.body8, f32 %300] [^while.body9, f32 %326];
    f32 %313 = phi [^while.body8, f32 %289] [^while.body9, f32 %312];
    f32 %314 = phi [^while.body8, f32 %295] [^while.body9, f32 %321];
    f32 %315 = phi [^while.body8, f32 %284] [^while.body9, f32 %314];
    f32 %316 = fmul f32 %312, f32 -0.184358;
    f32 %317 = fmul f32 %313, f32 0.114821;
    f32 %318 = fadd f32 %316, f32 %317;
    f32 %319 = fadd f32 %318, f32 %314;
    f32 %320 = fmul f32 %315, f32 -0.606235;
    f32 %321 = fadd f32 %319, f32 %320;
    [270 * f32]* %322 = getelementptr &([270 * f32]* %9)[i32 %311];
    f32* %323 = getelementptr &([270 * f32]* %322)[i64 0][i32 %223];
    store f32* %323 with f32 %321;
    [270 * f32]* %324 = getelementptr &([270 * f32]* %5)[i32 %311];
    f32* %325 = getelementptr &([270 * f32]* %324)[i64 0][i32 %223];
    f32 %326 = load f32* %325;
    i32 %327 = add i32 %311, i32 -1;
    i1 %328 = icmp sgt i32 %327, i32 -1;
    cbr i1 %328(prob = 0.75), ^while.body9, ^b4;
  ^entry1:
    call (i32) -> void @stoptime(i32 158);
    f32* %329 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 138240, f32* %329);
    ret i32 0;
  ^b4:
    i32 %330 = add i32 %223, i32 1;
    ubr ^while.header4;
  ^while.body10:
    i32 %331 = phi [^prebody3, i32 0] [^while.body10, i32 %358];
    f32* %332 = getelementptr &([270 * f32]* %308)[i64 0][i32 %331];
    f32 %333 = load f32* %332;
    f32* %334 = getelementptr &([270 * f32]* %309)[i64 0][i32 %331];
    f32 %335 = load f32* %334;
    f32 %336 = fadd f32 %333, f32 %335;
    f32* %337 = getelementptr &([270 * f32]* %307)[i64 0][i32 %331];
    store f32* %337 with f32 %336;
    f32* %338 = getelementptr &(f32* %332)[i64 1];
    f32 %339 = load f32* %338;
    f32* %340 = getelementptr &(f32* %334)[i64 1];
    f32 %341 = load f32* %340;
    f32 %342 = fadd f32 %339, f32 %341;
    f32* %343 = getelementptr &(f32* %337)[i64 1];
    store f32* %343 with f32 %342;
    f32* %344 = getelementptr &(f32* %332)[i64 2];
    f32 %345 = load f32* %344;
    f32* %346 = getelementptr &(f32* %334)[i64 2];
    f32 %347 = load f32* %346;
    f32 %348 = fadd f32 %345, f32 %347;
    f32* %349 = getelementptr &(f32* %337)[i64 2];
    store f32* %349 with f32 %348;
    f32* %350 = getelementptr &(f32* %332)[i64 3];
    f32 %351 = load f32* %350;
    f32* %352 = getelementptr &(f32* %334)[i64 3];
    f32 %353 = load f32* %352;
    f32 %354 = fadd f32 %351, f32 %353;
    f32* %355 = getelementptr &(f32* %337)[i64 3];
    store f32* %355 with f32 %354;
    i32 %356 = add i32 %331, i32 8;
    i1 %357 = icmp slt i32 %356, i32 270;
    i32 %358 = add i32 %331, i32 4;
    cbr i1 %357(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body11:
    i32 %359 = phi [^while.body10, i32 %358] [^while.body11, i32 %366];
    f32* %360 = getelementptr &([270 * f32]* %308)[i64 0][i32 %359];
    f32 %361 = load f32* %360;
    f32* %362 = getelementptr &([270 * f32]* %309)[i64 0][i32 %359];
    f32 %363 = load f32* %362;
    f32 %364 = fadd f32 %361, f32 %363;
    f32* %365 = getelementptr &([270 * f32]* %307)[i64 0][i32 %359];
    store f32* %365 with f32 %364;
    i32 %366 = add i32 %359, i32 1;
    i1 %367 = icmp slt i32 %366, i32 270;
    cbr i1 %367(prob = 0.75), ^while.body11, ^b5;
  ^b5:
    i32 %368 = add i32 %304, i32 1;
    ubr ^while.header5;
}
