internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * [270 * f32]]* %0 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    f32* %1 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %3 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0];
    [512 * [270 * f32]]* %4 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0];
    [512 * [270 * f32]]* %6 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* %6)[i64 0][i64 0];
    [512 * [270 * f32]]* %8 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %9 = getelementptr &([512 * [270 * f32]]* %8)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %125];
    i1 %11 = icmp slt i32 %10, i32 512;
    cbr i1 %11(prob = 0.97), ^prebody, ^while.header1;
  ^prebody:
    [270 * f32]* %12 = getelementptr &([270 * f32]* %7)[i32 %10];
    [270 * f32]* %13 = getelementptr &([270 * f32]* %3)[i32 %10];
    ubr ^super.header;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b1, i32 %177];
    i1 %15 = icmp slt i32 %14, i32 512;
    cbr i1 %15(prob = 0.97), ^prebody1, ^while.header2;
  ^prebody1:
    [270 * f32]* %16 = getelementptr &([270 * f32]* %9)[i32 %14];
    [270 * f32]* %17 = getelementptr &([270 * f32]* %3)[i32 %14];
    ubr ^super.header1;
  ^super.header:
    i32 %18 = phi [^prebody, i32 0] [^while.body, i32 %22];
    f32 %19 = phi [^prebody, f32 0] [^while.body, f32 %54];
    f32 %20 = phi [^prebody, f32 0] [^while.body, f32 %60];
    f32 %21 = phi [^prebody, f32 0] [^while.body, f32 %51];
    i32 %22 = add i32 %18, i32 4;
    i1 %23 = icmp slt i32 %22, i32 270;
    cbr i1 %23(prob = 0.89), ^while.body, ^while.body1;
  ^while.header2:
    i32 %24 = phi [^while.header1, i32 0] [^b2, i32 %257];
    i1 %25 = icmp slt i32 %24, i32 512;
    cbr i1 %25(prob = 0.97), ^prebody2, ^while.header3;
  ^while.body:
    f32* %26 = getelementptr &([270 * f32]* %13)[i64 0][i32 %18];
    f32 %27 = load f32* %26;
    f32 %28 = fmul f32 %27, f32 -0.189399;
    f32 %29 = fmul f32 %19, f32 0.110615;
    f32 %30 = fadd f32 %28, f32 %29;
    f32 %31 = fadd f32 %30, f32 %20;
    f32 %32 = fmul f32 %21, f32 -0.606235;
    f32 %33 = fadd f32 %31, f32 %32;
    f32* %34 = getelementptr &([270 * f32]* %12)[i64 0][i32 %18];
    store f32* %34 with f32 %33;
    f32* %35 = getelementptr &(f32* %26)[i64 1];
    f32 %36 = load f32* %35;
    f32 %37 = fmul f32 %36, f32 -0.189399;
    f32 %38 = fmul f32 %27, f32 0.110615;
    f32 %39 = fadd f32 %37, f32 %38;
    f32 %40 = fadd f32 %39, f32 %33;
    f32 %41 = fmul f32 %20, f32 -0.606235;
    f32 %42 = fadd f32 %40, f32 %41;
    f32* %43 = getelementptr &(f32* %34)[i64 1];
    store f32* %43 with f32 %42;
    f32* %44 = getelementptr &(f32* %26)[i64 2];
    f32 %45 = load f32* %44;
    f32 %46 = fmul f32 %45, f32 -0.189399;
    f32 %47 = fmul f32 %36, f32 0.110615;
    f32 %48 = fadd f32 %46, f32 %47;
    f32 %49 = fadd f32 %48, f32 %42;
    f32 %50 = fmul f32 %33, f32 -0.606235;
    f32 %51 = fadd f32 %49, f32 %50;
    f32* %52 = getelementptr &(f32* %34)[i64 2];
    store f32* %52 with f32 %51;
    f32* %53 = getelementptr &(f32* %26)[i64 3];
    f32 %54 = load f32* %53;
    f32 %55 = fmul f32 %54, f32 -0.189399;
    f32 %56 = fmul f32 %45, f32 0.110615;
    f32 %57 = fadd f32 %55, f32 %56;
    f32 %58 = fadd f32 %57, f32 %51;
    f32 %59 = fmul f32 %42, f32 -0.606235;
    f32 %60 = fadd f32 %58, f32 %59;
    f32* %61 = getelementptr &(f32* %34)[i64 3];
    store f32* %61 with f32 %60;
    ubr ^super.header;
  ^prebody2:
    [270 * f32]* %62 = getelementptr &([270 * f32]* %5)[i32 %24];
    [270 * f32]* %63 = getelementptr &([270 * f32]* %7)[i32 %24];
    [270 * f32]* %64 = getelementptr &([270 * f32]* %9)[i32 %24];
    ubr ^super.header2;
  ^while.body1:
    i32 %65 = phi [^super.header, i32 %18] [^while.body1, i32 %78];
    f32 %66 = phi [^super.header, f32 %19] [^while.body1, f32 %70];
    f32 %67 = phi [^super.header, f32 %20] [^while.body1, f32 %76];
    f32 %68 = phi [^super.header, f32 %21] [^while.body1, f32 %67];
    f32* %69 = getelementptr &([270 * f32]* %13)[i64 0][i32 %65];
    f32 %70 = load f32* %69;
    f32 %71 = fmul f32 %70, f32 -0.189399;
    f32 %72 = fmul f32 %66, f32 0.110615;
    f32 %73 = fadd f32 %71, f32 %72;
    f32 %74 = fadd f32 %73, f32 %67;
    f32 %75 = fmul f32 %68, f32 -0.606235;
    f32 %76 = fadd f32 %74, f32 %75;
    f32* %77 = getelementptr &([270 * f32]* %12)[i64 0][i32 %65];
    store f32* %77 with f32 %76;
    i32 %78 = add i32 %65, i32 1;
    i1 %79 = icmp slt i32 %78, i32 270;
    cbr i1 %79(prob = 0.75), ^while.body1, ^b;
  ^super.header1:
    i32 %80 = phi [^prebody1, i32 269] [^while.body2, i32 %85];
    f32 %81 = phi [^prebody1, f32 0] [^while.body2, f32 %124];
    f32 %82 = phi [^prebody1, f32 0] [^while.body2, f32 %115];
    f32 %83 = phi [^prebody1, f32 0] [^while.body2, f32 %121];
    f32 %84 = phi [^prebody1, f32 0] [^while.body2, f32 %112];
    i32 %85 = add i32 %80, i32 -4;
    i1 %86 = icmp sgt i32 %85, i32 -1;
    cbr i1 %86(prob = 0.89), ^while.body2, ^while.body3;
  ^while.header3:
    i32 %87 = phi [^while.header2, i32 0] [^b3, i32 %302];
    i1 %88 = icmp slt i32 %87, i32 270;
    cbr i1 %88(prob = 0.97), ^super.header3, ^while.header4;
  ^while.body2:
    f32 %89 = fmul f32 %81, f32 -0.184358;
    f32 %90 = fmul f32 %82, f32 0.114821;
    f32 %91 = fadd f32 %89, f32 %90;
    f32 %92 = fadd f32 %91, f32 %83;
    f32 %93 = fmul f32 %84, f32 -0.606235;
    f32 %94 = fadd f32 %92, f32 %93;
    f32* %95 = getelementptr &([270 * f32]* %16)[i64 0][i32 %80];
    store f32* %95 with f32 %94;
    f32* %96 = getelementptr &([270 * f32]* %17)[i64 0][i32 %80];
    f32 %97 = load f32* %96;
    f32 %98 = fmul f32 %97, f32 -0.184358;
    f32 %99 = fmul f32 %81, f32 0.114821;
    f32 %100 = fadd f32 %98, f32 %99;
    f32 %101 = fadd f32 %100, f32 %94;
    f32 %102 = fmul f32 %83, f32 -0.606235;
    f32 %103 = fadd f32 %101, f32 %102;
    f32* %104 = getelementptr &(f32* %95)[i64 -1];
    store f32* %104 with f32 %103;
    f32* %105 = getelementptr &(f32* %96)[i64 -1];
    f32 %106 = load f32* %105;
    f32 %107 = fmul f32 %106, f32 -0.184358;
    f32 %108 = fmul f32 %97, f32 0.114821;
    f32 %109 = fadd f32 %107, f32 %108;
    f32 %110 = fadd f32 %109, f32 %103;
    f32 %111 = fmul f32 %94, f32 -0.606235;
    f32 %112 = fadd f32 %110, f32 %111;
    f32* %113 = getelementptr &(f32* %95)[i64 -2];
    store f32* %113 with f32 %112;
    f32* %114 = getelementptr &(f32* %96)[i64 -2];
    f32 %115 = load f32* %114;
    f32 %116 = fmul f32 %115, f32 -0.184358;
    f32 %117 = fmul f32 %106, f32 0.114821;
    f32 %118 = fadd f32 %116, f32 %117;
    f32 %119 = fadd f32 %118, f32 %112;
    f32 %120 = fmul f32 %103, f32 -0.606235;
    f32 %121 = fadd f32 %119, f32 %120;
    f32* %122 = getelementptr &(f32* %95)[i64 -3];
    store f32* %122 with f32 %121;
    f32* %123 = getelementptr &(f32* %96)[i64 -3];
    f32 %124 = load f32* %123;
    ubr ^super.header1;
  ^b:
    i32 %125 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.body3:
    i32 %126 = phi [^super.header1, i32 %80] [^while.body3, i32 %140];
    f32 %127 = phi [^super.header1, f32 %81] [^while.body3, f32 %139];
    f32 %128 = phi [^super.header1, f32 %82] [^while.body3, f32 %127];
    f32 %129 = phi [^super.header1, f32 %83] [^while.body3, f32 %136];
    f32 %130 = phi [^super.header1, f32 %84] [^while.body3, f32 %129];
    f32 %131 = fmul f32 %127, f32 -0.184358;
    f32 %132 = fmul f32 %128, f32 0.114821;
    f32 %133 = fadd f32 %131, f32 %132;
    f32 %134 = fadd f32 %133, f32 %129;
    f32 %135 = fmul f32 %130, f32 -0.606235;
    f32 %136 = fadd f32 %134, f32 %135;
    f32* %137 = getelementptr &([270 * f32]* %16)[i64 0][i32 %126];
    store f32* %137 with f32 %136;
    f32* %138 = getelementptr &([270 * f32]* %17)[i64 0][i32 %126];
    f32 %139 = load f32* %138;
    i32 %140 = add i32 %126, i32 -1;
    i1 %141 = icmp sgt i32 %140, i32 -1;
    cbr i1 %141(prob = 0.75), ^while.body3, ^b1;
  ^super.header2:
    i32 %142 = phi [^prebody2, i32 0] [^while.body4, i32 %143];
    i32 %143 = add i32 %142, i32 4;
    i1 %144 = icmp slt i32 %143, i32 270;
    cbr i1 %144(prob = 0.89), ^while.body4, ^while.body6;
  ^super.header3:
    i32 %145 = phi [^while.header3, i32 0] [^while.body5, i32 %149];
    f32 %146 = phi [^while.header3, f32 0] [^while.body5, f32 %213];
    f32 %147 = phi [^while.header3, f32 0] [^while.body5, f32 %219];
    f32 %148 = phi [^while.header3, f32 0] [^while.body5, f32 %208];
    i32 %149 = add i32 %145, i32 4;
    i1 %150 = icmp slt i32 %149, i32 512;
    cbr i1 %150(prob = 0.89), ^while.body5, ^while.body7;
  ^while.header4:
    i32 %151 = phi [^while.header3, i32 0] [^b4, i32 %325];
    i1 %152 = icmp slt i32 %151, i32 270;
    cbr i1 %152(prob = 0.97), ^super.header4, ^while.header5;
  ^while.body4:
    f32* %153 = getelementptr &([270 * f32]* %63)[i64 0][i32 %142];
    f32 %154 = load f32* %153;
    f32* %155 = getelementptr &([270 * f32]* %64)[i64 0][i32 %142];
    f32 %156 = load f32* %155;
    f32 %157 = fadd f32 %154, f32 %156;
    f32* %158 = getelementptr &([270 * f32]* %62)[i64 0][i32 %142];
    store f32* %158 with f32 %157;
    f32* %159 = getelementptr &(f32* %153)[i64 1];
    f32 %160 = load f32* %159;
    f32* %161 = getelementptr &(f32* %155)[i64 1];
    f32 %162 = load f32* %161;
    f32 %163 = fadd f32 %160, f32 %162;
    f32* %164 = getelementptr &(f32* %158)[i64 1];
    store f32* %164 with f32 %163;
    f32* %165 = getelementptr &(f32* %153)[i64 2];
    f32 %166 = load f32* %165;
    f32* %167 = getelementptr &(f32* %155)[i64 2];
    f32 %168 = load f32* %167;
    f32 %169 = fadd f32 %166, f32 %168;
    f32* %170 = getelementptr &(f32* %158)[i64 2];
    store f32* %170 with f32 %169;
    f32* %171 = getelementptr &(f32* %153)[i64 3];
    f32 %172 = load f32* %171;
    f32* %173 = getelementptr &(f32* %155)[i64 3];
    f32 %174 = load f32* %173;
    f32 %175 = fadd f32 %172, f32 %174;
    f32* %176 = getelementptr &(f32* %158)[i64 3];
    store f32* %176 with f32 %175;
    ubr ^super.header2;
  ^b1:
    i32 %177 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^while.body5:
    [270 * f32]* %178 = getelementptr &([270 * f32]* %5)[i32 %145];
    f32* %179 = getelementptr &([270 * f32]* %178)[i64 0][i32 %87];
    f32 %180 = load f32* %179;
    f32 %181 = fmul f32 %180, f32 -0.189399;
    f32 %182 = fmul f32 %146, f32 0.110615;
    f32 %183 = fadd f32 %181, f32 %182;
    f32 %184 = fadd f32 %183, f32 %147;
    f32 %185 = fmul f32 %148, f32 -0.606235;
    f32 %186 = fadd f32 %184, f32 %185;
    [270 * f32]* %187 = getelementptr &([270 * f32]* %7)[i32 %145];
    f32* %188 = getelementptr &([270 * f32]* %187)[i64 0][i32 %87];
    store f32* %188 with f32 %186;
    [270 * f32]* %189 = getelementptr &([270 * f32]* %178)[i64 1];
    f32* %190 = getelementptr &([270 * f32]* %189)[i64 0][i32 %87];
    f32 %191 = load f32* %190;
    f32 %192 = fmul f32 %191, f32 -0.189399;
    f32 %193 = fmul f32 %180, f32 0.110615;
    f32 %194 = fadd f32 %192, f32 %193;
    f32 %195 = fadd f32 %194, f32 %186;
    f32 %196 = fmul f32 %147, f32 -0.606235;
    f32 %197 = fadd f32 %195, f32 %196;
    [270 * f32]* %198 = getelementptr &([270 * f32]* %187)[i64 1];
    f32* %199 = getelementptr &([270 * f32]* %198)[i64 0][i32 %87];
    store f32* %199 with f32 %197;
    [270 * f32]* %200 = getelementptr &([270 * f32]* %178)[i64 2];
    f32* %201 = getelementptr &([270 * f32]* %200)[i64 0][i32 %87];
    f32 %202 = load f32* %201;
    f32 %203 = fmul f32 %202, f32 -0.189399;
    f32 %204 = fmul f32 %191, f32 0.110615;
    f32 %205 = fadd f32 %203, f32 %204;
    f32 %206 = fadd f32 %205, f32 %197;
    f32 %207 = fmul f32 %186, f32 -0.606235;
    f32 %208 = fadd f32 %206, f32 %207;
    [270 * f32]* %209 = getelementptr &([270 * f32]* %187)[i64 2];
    f32* %210 = getelementptr &([270 * f32]* %209)[i64 0][i32 %87];
    store f32* %210 with f32 %208;
    [270 * f32]* %211 = getelementptr &([270 * f32]* %178)[i64 3];
    f32* %212 = getelementptr &([270 * f32]* %211)[i64 0][i32 %87];
    f32 %213 = load f32* %212;
    f32 %214 = fmul f32 %213, f32 -0.189399;
    f32 %215 = fmul f32 %202, f32 0.110615;
    f32 %216 = fadd f32 %214, f32 %215;
    f32 %217 = fadd f32 %216, f32 %208;
    f32 %218 = fmul f32 %197, f32 -0.606235;
    f32 %219 = fadd f32 %217, f32 %218;
    [270 * f32]* %220 = getelementptr &([270 * f32]* %187)[i64 3];
    f32* %221 = getelementptr &([270 * f32]* %220)[i64 0][i32 %87];
    store f32* %221 with f32 %219;
    ubr ^super.header3;
  ^while.body6:
    i32 %222 = phi [^super.header2, i32 %142] [^while.body6, i32 %229];
    f32* %223 = getelementptr &([270 * f32]* %63)[i64 0][i32 %222];
    f32 %224 = load f32* %223;
    f32* %225 = getelementptr &([270 * f32]* %64)[i64 0][i32 %222];
    f32 %226 = load f32* %225;
    f32 %227 = fadd f32 %224, f32 %226;
    f32* %228 = getelementptr &([270 * f32]* %62)[i64 0][i32 %222];
    store f32* %228 with f32 %227;
    i32 %229 = add i32 %222, i32 1;
    i1 %230 = icmp slt i32 %229, i32 270;
    cbr i1 %230(prob = 0.75), ^while.body6, ^b2;
  ^while.body7:
    i32 %231 = phi [^super.header3, i32 %145] [^while.body7, i32 %246];
    f32 %232 = phi [^super.header3, f32 %146] [^while.body7, f32 %237];
    f32 %233 = phi [^super.header3, f32 %147] [^while.body7, f32 %243];
    f32 %234 = phi [^super.header3, f32 %148] [^while.body7, f32 %233];
    [270 * f32]* %235 = getelementptr &([270 * f32]* %5)[i32 %231];
    f32* %236 = getelementptr &([270 * f32]* %235)[i64 0][i32 %87];
    f32 %237 = load f32* %236;
    f32 %238 = fmul f32 %237, f32 -0.189399;
    f32 %239 = fmul f32 %232, f32 0.110615;
    f32 %240 = fadd f32 %238, f32 %239;
    f32 %241 = fadd f32 %240, f32 %233;
    f32 %242 = fmul f32 %234, f32 -0.606235;
    f32 %243 = fadd f32 %241, f32 %242;
    [270 * f32]* %244 = getelementptr &([270 * f32]* %7)[i32 %231];
    f32* %245 = getelementptr &([270 * f32]* %244)[i64 0][i32 %87];
    store f32* %245 with f32 %243;
    i32 %246 = add i32 %231, i32 1;
    i1 %247 = icmp slt i32 %246, i32 512;
    cbr i1 %247(prob = 0.75), ^while.body7, ^b3;
  ^super.header4:
    i32 %248 = phi [^while.header4, i32 511] [^while.body8, i32 %253];
    f32 %249 = phi [^while.header4, f32 0] [^while.body8, f32 %301];
    f32 %250 = phi [^while.header4, f32 0] [^while.body8, f32 %290];
    f32 %251 = phi [^while.header4, f32 0] [^while.body8, f32 %296];
    f32 %252 = phi [^while.header4, f32 0] [^while.body8, f32 %285];
    i32 %253 = add i32 %248, i32 -4;
    i1 %254 = icmp sgt i32 %253, i32 -1;
    cbr i1 %254(prob = 0.89), ^while.body8, ^while.body9;
  ^while.header5:
    i32 %255 = phi [^while.header4, i32 0] [^b5, i32 %362];
    i1 %256 = icmp slt i32 %255, i32 512;
    cbr i1 %256(prob = 0.97), ^prebody3, ^entry1;
  ^b2:
    i32 %257 = add i32 %24, i32 1;
    ubr ^while.header2;
  ^while.body8:
    f32 %258 = fmul f32 %249, f32 -0.184358;
    f32 %259 = fmul f32 %250, f32 0.114821;
    f32 %260 = fadd f32 %258, f32 %259;
    f32 %261 = fadd f32 %260, f32 %251;
    f32 %262 = fmul f32 %252, f32 -0.606235;
    f32 %263 = fadd f32 %261, f32 %262;
    [270 * f32]* %264 = getelementptr &([270 * f32]* %9)[i32 %248];
    f32* %265 = getelementptr &([270 * f32]* %264)[i64 0][i32 %151];
    store f32* %265 with f32 %263;
    [270 * f32]* %266 = getelementptr &([270 * f32]* %5)[i32 %248];
    f32* %267 = getelementptr &([270 * f32]* %266)[i64 0][i32 %151];
    f32 %268 = load f32* %267;
    f32 %269 = fmul f32 %268, f32 -0.184358;
    f32 %270 = fmul f32 %249, f32 0.114821;
    f32 %271 = fadd f32 %269, f32 %270;
    f32 %272 = fadd f32 %271, f32 %263;
    f32 %273 = fmul f32 %251, f32 -0.606235;
    f32 %274 = fadd f32 %272, f32 %273;
    [270 * f32]* %275 = getelementptr &([270 * f32]* %264)[i64 -1];
    f32* %276 = getelementptr &([270 * f32]* %275)[i64 0][i32 %151];
    store f32* %276 with f32 %274;
    [270 * f32]* %277 = getelementptr &([270 * f32]* %266)[i64 -1];
    f32* %278 = getelementptr &([270 * f32]* %277)[i64 0][i32 %151];
    f32 %279 = load f32* %278;
    f32 %280 = fmul f32 %279, f32 -0.184358;
    f32 %281 = fmul f32 %268, f32 0.114821;
    f32 %282 = fadd f32 %280, f32 %281;
    f32 %283 = fadd f32 %282, f32 %274;
    f32 %284 = fmul f32 %263, f32 -0.606235;
    f32 %285 = fadd f32 %283, f32 %284;
    [270 * f32]* %286 = getelementptr &([270 * f32]* %264)[i64 -2];
    f32* %287 = getelementptr &([270 * f32]* %286)[i64 0][i32 %151];
    store f32* %287 with f32 %285;
    [270 * f32]* %288 = getelementptr &([270 * f32]* %266)[i64 -2];
    f32* %289 = getelementptr &([270 * f32]* %288)[i64 0][i32 %151];
    f32 %290 = load f32* %289;
    f32 %291 = fmul f32 %290, f32 -0.184358;
    f32 %292 = fmul f32 %279, f32 0.114821;
    f32 %293 = fadd f32 %291, f32 %292;
    f32 %294 = fadd f32 %293, f32 %285;
    f32 %295 = fmul f32 %274, f32 -0.606235;
    f32 %296 = fadd f32 %294, f32 %295;
    [270 * f32]* %297 = getelementptr &([270 * f32]* %264)[i64 -3];
    f32* %298 = getelementptr &([270 * f32]* %297)[i64 0][i32 %151];
    store f32* %298 with f32 %296;
    [270 * f32]* %299 = getelementptr &([270 * f32]* %266)[i64 -3];
    f32* %300 = getelementptr &([270 * f32]* %299)[i64 0][i32 %151];
    f32 %301 = load f32* %300;
    ubr ^super.header4;
  ^b3:
    i32 %302 = add i32 %87, i32 1;
    ubr ^while.header3;
  ^prebody3:
    [270 * f32]* %303 = getelementptr &([270 * f32]* %5)[i32 %255];
    [270 * f32]* %304 = getelementptr &([270 * f32]* %7)[i32 %255];
    [270 * f32]* %305 = getelementptr &([270 * f32]* %9)[i32 %255];
    ubr ^super.header5;
  ^while.body9:
    i32 %306 = phi [^super.header4, i32 %248] [^while.body9, i32 %322];
    f32 %307 = phi [^super.header4, f32 %249] [^while.body9, f32 %321];
    f32 %308 = phi [^super.header4, f32 %250] [^while.body9, f32 %307];
    f32 %309 = phi [^super.header4, f32 %251] [^while.body9, f32 %316];
    f32 %310 = phi [^super.header4, f32 %252] [^while.body9, f32 %309];
    f32 %311 = fmul f32 %307, f32 -0.184358;
    f32 %312 = fmul f32 %308, f32 0.114821;
    f32 %313 = fadd f32 %311, f32 %312;
    f32 %314 = fadd f32 %313, f32 %309;
    f32 %315 = fmul f32 %310, f32 -0.606235;
    f32 %316 = fadd f32 %314, f32 %315;
    [270 * f32]* %317 = getelementptr &([270 * f32]* %9)[i32 %306];
    f32* %318 = getelementptr &([270 * f32]* %317)[i64 0][i32 %151];
    store f32* %318 with f32 %316;
    [270 * f32]* %319 = getelementptr &([270 * f32]* %5)[i32 %306];
    f32* %320 = getelementptr &([270 * f32]* %319)[i64 0][i32 %151];
    f32 %321 = load f32* %320;
    i32 %322 = add i32 %306, i32 -1;
    i1 %323 = icmp sgt i32 %322, i32 -1;
    cbr i1 %323(prob = 0.75), ^while.body9, ^b4;
  ^entry1:
    call (i32) -> void @stoptime(i32 158);
    f32* %324 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 138240, f32* %324);
    ret i32 0;
  ^b4:
    i32 %325 = add i32 %151, i32 1;
    ubr ^while.header4;
  ^super.header5:
    i32 %326 = phi [^prebody3, i32 0] [^while.body10, i32 %327];
    i32 %327 = add i32 %326, i32 4;
    i1 %328 = icmp slt i32 %327, i32 270;
    cbr i1 %328(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body10:
    f32* %329 = getelementptr &([270 * f32]* %304)[i64 0][i32 %326];
    f32 %330 = load f32* %329;
    f32* %331 = getelementptr &([270 * f32]* %305)[i64 0][i32 %326];
    f32 %332 = load f32* %331;
    f32 %333 = fadd f32 %330, f32 %332;
    f32* %334 = getelementptr &([270 * f32]* %303)[i64 0][i32 %326];
    store f32* %334 with f32 %333;
    f32* %335 = getelementptr &(f32* %329)[i64 1];
    f32 %336 = load f32* %335;
    f32* %337 = getelementptr &(f32* %331)[i64 1];
    f32 %338 = load f32* %337;
    f32 %339 = fadd f32 %336, f32 %338;
    f32* %340 = getelementptr &(f32* %334)[i64 1];
    store f32* %340 with f32 %339;
    f32* %341 = getelementptr &(f32* %329)[i64 2];
    f32 %342 = load f32* %341;
    f32* %343 = getelementptr &(f32* %331)[i64 2];
    f32 %344 = load f32* %343;
    f32 %345 = fadd f32 %342, f32 %344;
    f32* %346 = getelementptr &(f32* %334)[i64 2];
    store f32* %346 with f32 %345;
    f32* %347 = getelementptr &(f32* %329)[i64 3];
    f32 %348 = load f32* %347;
    f32* %349 = getelementptr &(f32* %331)[i64 3];
    f32 %350 = load f32* %349;
    f32 %351 = fadd f32 %348, f32 %350;
    f32* %352 = getelementptr &(f32* %334)[i64 3];
    store f32* %352 with f32 %351;
    ubr ^super.header5;
  ^while.body11:
    i32 %353 = phi [^super.header5, i32 %326] [^while.body11, i32 %360];
    f32* %354 = getelementptr &([270 * f32]* %304)[i64 0][i32 %353];
    f32 %355 = load f32* %354;
    f32* %356 = getelementptr &([270 * f32]* %305)[i64 0][i32 %353];
    f32 %357 = load f32* %356;
    f32 %358 = fadd f32 %355, f32 %357;
    f32* %359 = getelementptr &([270 * f32]* %303)[i64 0][i32 %353];
    store f32* %359 with f32 %358;
    i32 %360 = add i32 %353, i32 1;
    i1 %361 = icmp slt i32 %360, i32 270;
    cbr i1 %361(prob = 0.75), ^while.body11, ^b5;
  ^b5:
    i32 %362 = add i32 %255, i32 1;
    ubr ^while.header5;
}
