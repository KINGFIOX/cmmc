internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [2048 * f32]* %y = alloc [2048 * f32];
    [2048 * f32]* %x = alloc [2048 * f32];
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 22);
    f32* %2 = getelementptr &([2048 * f32]* %x)[i64 0][i64 0];
    f32* %3 = getelementptr &([2048 * f32]* %y)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %4 = phi [^entry, f32 0] [^b2, f32 %30];
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %20];
    f32 %6 = phi [^entry, f32 1] [^b2, f32 %18];
    f32 %7 = phi [^entry, f32 0] [^b2, f32 %19];
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %31];
    i1 %9 = scmp lt i32 %8, i32 500000;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = srem i32 %8, i32 10;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^while.header1, ^if.else;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %12 = fsub f32 %4, f32 1.43032e+15;
    i1 %13 = fcmp le f32 %12, f32 1e-06;
    i1 %14 = fcmp ge f32 %12, f32 -1e-06;
    i1 %15 = or i1 %13, i1 %14;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    f32 %16 = fadd f32 %7, f32 0.1;
    f32 %17 = fadd f32 %6, f32 0.2;
    ubr ^while.header1;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b1;
  ^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
  ^while.header1:
    f32 %18 = phi [^while.body, f32 1] [^if.else, f32 %17] [^while.body1, f32 %18];
    f32 %19 = phi [^while.body, f32 0] [^if.else, f32 %16] [^while.body1, f32 %19];
    i32 %20 = phi [^while.body, i32 %5] [^if.else, i32 %5] [^while.body1, i32 %27];
    i1 %21 = scmp lt i32 %20, i32 %0;
    cbr i1 %21(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    f32 %22 = s2f i32 %20 to f32;
    f32 %23 = fadd f32 %19, f32 %22;
    f32* %24 = getelementptr &([2048 * f32]* %x)[i64 0][i32 %20];
    store f32* %24 with f32 %23;
    f32 %25 = fadd f32 %18, f32 %22;
    f32* %26 = getelementptr &([2048 * f32]* %y)[i64 0][i32 %20];
    store f32* %26 with f32 %25;
    i32 %27 = add i32 %20, i32 1;
    ubr ^while.header1;
  ^entry1:
    cbr i1 %1(prob = 0.97), ^super.header, ^b2;
  ^b1:
    i32 %28 = phi [^if.then, i32 0] [^if.else1, i32 1];
    ret i32 %28;
  ^b2:
    f32 %29 = phi [^entry1, f32 0] [^while.body5, f32 %123];
    f32 %30 = fadd f32 %4, f32 %29;
    i32 %31 = add i32 %8, i32 1;
    ubr ^while.header;
  ^super.header:
    f32 %32 = phi [^entry1, f32 0] [^while.body2, f32 %59];
    i32 %33 = phi [^entry1, i32 0] [^while.body2, i32 %34];
    i32 %34 = add i32 %33, i32 4;
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.89), ^while.body2, ^super.header1;
  ^while.body2:
    f32* %36 = getelementptr &(f32* %2)[i32 %33];
    f32 %37 = load f32* %36;
    f32* %38 = getelementptr &(f32* %3)[i32 %33];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &(f32* %36)[i64 1];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &(f32* %38)[i64 1];
    f32 %43 = load f32* %42;
    f32 %44 = fmul f32 %41, f32 %43;
    f32 %45 = fmul f32 %37, f32 %39;
    f32 %46 = fadd f32 %32, f32 %45;
    f32 %47 = fadd f32 %46, f32 %44;
    f32* %48 = getelementptr &(f32* %36)[i64 2];
    f32 %49 = load f32* %48;
    f32* %50 = getelementptr &(f32* %38)[i64 2];
    f32 %51 = load f32* %50;
    f32 %52 = fmul f32 %49, f32 %51;
    f32 %53 = fadd f32 %47, f32 %52;
    f32* %54 = getelementptr &(f32* %36)[i64 3];
    f32 %55 = load f32* %54;
    f32* %56 = getelementptr &(f32* %38)[i64 3];
    f32 %57 = load f32* %56;
    f32 %58 = fmul f32 %55, f32 %57;
    f32 %59 = fadd f32 %53, f32 %58;
    ubr ^super.header;
  ^super.header1:
    f32 %60 = phi [^super.header, f32 %32] [^while.body3, f32 %87];
    i32 %61 = phi [^super.header, i32 %33] [^while.body3, i32 %62];
    i32 %62 = add i32 %61, i32 4;
    i1 %63 = scmp lt i32 %62, i32 %0;
    cbr i1 %63(prob = 0.89), ^while.body3, ^super.header2;
  ^while.body3:
    f32* %64 = getelementptr &(f32* %2)[i32 %61];
    f32 %65 = load f32* %64;
    f32* %66 = getelementptr &(f32* %3)[i32 %61];
    f32 %67 = load f32* %66;
    f32* %68 = getelementptr &(f32* %64)[i64 1];
    f32 %69 = load f32* %68;
    f32* %70 = getelementptr &(f32* %66)[i64 1];
    f32 %71 = load f32* %70;
    f32 %72 = fmul f32 %69, f32 %71;
    f32 %73 = fmul f32 %65, f32 %67;
    f32 %74 = fadd f32 %60, f32 %73;
    f32 %75 = fadd f32 %74, f32 %72;
    f32* %76 = getelementptr &(f32* %64)[i64 2];
    f32 %77 = load f32* %76;
    f32* %78 = getelementptr &(f32* %66)[i64 2];
    f32 %79 = load f32* %78;
    f32 %80 = fmul f32 %77, f32 %79;
    f32 %81 = fadd f32 %75, f32 %80;
    f32* %82 = getelementptr &(f32* %64)[i64 3];
    f32 %83 = load f32* %82;
    f32* %84 = getelementptr &(f32* %66)[i64 3];
    f32 %85 = load f32* %84;
    f32 %86 = fmul f32 %83, f32 %85;
    f32 %87 = fadd f32 %81, f32 %86;
    ubr ^super.header1;
  ^super.header2:
    f32 %88 = phi [^super.header1, f32 %60] [^while.body4, f32 %115];
    i32 %89 = phi [^super.header1, i32 %61] [^while.body4, i32 %90];
    i32 %90 = add i32 %89, i32 4;
    i1 %91 = scmp lt i32 %90, i32 %0;
    cbr i1 %91(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    f32* %92 = getelementptr &(f32* %2)[i32 %89];
    f32 %93 = load f32* %92;
    f32* %94 = getelementptr &(f32* %3)[i32 %89];
    f32 %95 = load f32* %94;
    f32* %96 = getelementptr &(f32* %92)[i64 1];
    f32 %97 = load f32* %96;
    f32* %98 = getelementptr &(f32* %94)[i64 1];
    f32 %99 = load f32* %98;
    f32 %100 = fmul f32 %97, f32 %99;
    f32 %101 = fmul f32 %93, f32 %95;
    f32 %102 = fadd f32 %88, f32 %101;
    f32 %103 = fadd f32 %102, f32 %100;
    f32* %104 = getelementptr &(f32* %92)[i64 2];
    f32 %105 = load f32* %104;
    f32* %106 = getelementptr &(f32* %94)[i64 2];
    f32 %107 = load f32* %106;
    f32 %108 = fmul f32 %105, f32 %107;
    f32 %109 = fadd f32 %103, f32 %108;
    f32* %110 = getelementptr &(f32* %92)[i64 3];
    f32 %111 = load f32* %110;
    f32* %112 = getelementptr &(f32* %94)[i64 3];
    f32 %113 = load f32* %112;
    f32 %114 = fmul f32 %111, f32 %113;
    f32 %115 = fadd f32 %109, f32 %114;
    ubr ^super.header2;
  ^while.body5:
    f32 %116 = phi [^super.header2, f32 %88] [^while.body5, f32 %123];
    i32 %117 = phi [^super.header2, i32 %89] [^while.body5, i32 %124];
    f32* %118 = getelementptr &(f32* %2)[i32 %117];
    f32 %119 = load f32* %118;
    f32* %120 = getelementptr &(f32* %3)[i32 %117];
    f32 %121 = load f32* %120;
    f32 %122 = fmul f32 %119, f32 %121;
    f32 %123 = fadd f32 %116, f32 %122;
    i32 %124 = add i32 %117, i32 1;
    i1 %125 = scmp lt i32 %124, i32 %0;
    cbr i1 %125(prob = 0.97), ^while.body5, ^b2;
}
