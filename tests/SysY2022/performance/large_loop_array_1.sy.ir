internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    i1 %1 = icmp sgt i32 %0, i32 0;
    [2048 * f32]* %2 = ptrcast [2048 * f32]* @x to [2048 * f32]*;
    f32* %3 = getelementptr &([2048 * f32]* %2)[i64 0][i64 0];
    [2048 * f32]* %4 = ptrcast [2048 * f32]* @y to [2048 * f32]*;
    f32* %5 = getelementptr &([2048 * f32]* %4)[i64 0][i64 0];
    [40 * i8]* %6 = ptrcast [40 * i8]* @cmmc_parallel_body_payload_0 to [40 * i8]*;
    i32* %7 = ptradd [40 * i8]* %6, i32 0;
    [2048 * f32]** %8 = ptradd [40 * i8]* %6, i32 8;
    f32* %9 = ptradd [40 * i8]* %6, i32 16;
    [2048 * f32]** %10 = ptradd [40 * i8]* %6, i32 24;
    f32* %11 = ptradd [40 * i8]* %6, i32 32;
    i32* %12 = ptradd [40 * i8]* %6, i32 36;
    [28 * i8]* %13 = ptrcast [28 * i8]* @cmmc_parallel_body_payload_1 to [28 * i8]*;
    f32* %14 = ptradd [28 * i8]* %13, i32 0;
    f32** %15 = ptradd [28 * i8]* %13, i32 8;
    f32** %16 = ptradd [28 * i8]* %13, i32 16;
    i32* %17 = ptradd [28 * i8]* %13, i32 24;
    i8* %18 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %19 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    ubr ^while.body;
  ^while.body:
    i32 %20 = phi [^entry, i32 0] [^b3, i32 %36];
    f32 %21 = phi [^entry, f32 0] [^b3, f32 %30];
    f32 %22 = phi [^entry, f32 1] [^b3, f32 %28];
    i32 %23 = phi [^entry, i32 0] [^b3, i32 %32];
    f32 %24 = phi [^entry, f32 0] [^b3, f32 %35];
    i32 %25 = srem i32 %20, i32 10;
    i1 %26 = icmp neq i32 %25, i32 0;
    f32 %27 = fadd f32 %22, f32 0.2;
    f32 %28 = select i1 %26 ? f32 1 : f32 %27;
    f32 %29 = fadd f32 %21, f32 0.1;
    f32 %30 = select i1 %26 ? f32 0 : f32 %29;
    i1 %31 = icmp sgt i32 %0, i32 %23;
    cbr i1 %31(prob = 0.984615), ^b, ^b1;
  ^b:
    store i32* %7 with i32 %23;
    store [2048 * f32]** %8 with [2048 * f32]* %2;
    store f32* %9 with f32 %30;
    store [2048 * f32]** %10 with [2048 * f32]* %4;
    store f32* %11 with f32 %28;
    store i32* %12 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %23, i32 %0, i8* %18);
    ubr ^b1;
  ^b1:
    i32 %32 = phi [^while.body, i32 %23] [^b, i32 %0];
    cbr i1 %1(prob = 0.984615), ^b2, ^b3;
  ^b2:
    store f32* %14 with f32 0;
    store f32** %15 with f32* %3;
    store f32** %16 with f32* %5;
    store i32* %17 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %19);
    f32 %33 = load f32* %14;
    ubr ^b3;
  ^b3:
    f32 %34 = phi [^b1, f32 0] [^b2, f32 %33];
    f32 %35 = fadd f32 %24, f32 %34;
    i32 %36 = add i32 %20, i32 1;
    i1 %37 = icmp slt i32 %36, i32 500000;
    cbr i1 %37(prob = 0.999998), ^while.body, ^b4;
  ^b4:
    call (i32) -> void @stoptime(i32 39);
    call (f32) -> void @putfloat(f32 %35);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [40 * i8]* %4 = ptrcast [40 * i8]* @cmmc_parallel_body_payload_0 to [40 * i8]*;
    [2048 * f32]** %5 = ptradd [40 * i8]* %4, i32 8;
    [2048 * f32]* %6 = load [2048 * f32]** %5;
    f32* %7 = ptradd [40 * i8]* %4, i32 16;
    f32 %8 = load f32* %7;
    [2048 * f32]** %9 = ptradd [40 * i8]* %4, i32 24;
    [2048 * f32]* %10 = load [2048 * f32]** %9;
    f32* %11 = ptradd [40 * i8]* %4, i32 32;
    f32 %12 = load f32* %11;
    i32 %13 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %14 = phi [^b, i32 %0] [^b1, i32 %38];
    f32 %15 = s2f i32 %14 to f32;
    f32 %16 = fadd f32 %8, f32 %15;
    f32* %17 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %14];
    store f32* %17 with f32 %16;
    f32 %18 = fadd f32 %12, f32 %15;
    f32* %19 = getelementptr &([2048 * f32]* %10)[i64 0][i32 %14];
    store f32* %19 with f32 %18;
    i32 %20 = add i32 %14, i32 1;
    f32 %21 = s2f i32 %20 to f32;
    f32 %22 = fadd f32 %8, f32 %21;
    f32* %23 = getelementptr &(f32* %17)[i64 1];
    store f32* %23 with f32 %22;
    f32 %24 = fadd f32 %12, f32 %21;
    f32* %25 = getelementptr &(f32* %19)[i64 1];
    store f32* %25 with f32 %24;
    i32 %26 = add i32 %14, i32 2;
    f32 %27 = s2f i32 %26 to f32;
    f32 %28 = fadd f32 %8, f32 %27;
    f32* %29 = getelementptr &(f32* %17)[i64 2];
    store f32* %29 with f32 %28;
    f32 %30 = fadd f32 %12, f32 %27;
    f32* %31 = getelementptr &(f32* %19)[i64 2];
    store f32* %31 with f32 %30;
    i32 %32 = add i32 %14, i32 3;
    f32 %33 = s2f i32 %32 to f32;
    f32 %34 = fadd f32 %8, f32 %33;
    f32* %35 = getelementptr &(f32* %17)[i64 3];
    store f32* %35 with f32 %34;
    f32 %36 = fadd f32 %12, f32 %33;
    f32* %37 = getelementptr &(f32* %19)[i64 3];
    store f32* %37 with f32 %36;
    i32 %38 = add i32 %14, i32 4;
    i1 %39 = icmp sgt i32 %13, i32 %38;
    cbr i1 %39(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %40 = phi [^b, i32 %0] [^b1, i32 %38];
    i1 %41 = icmp sgt i32 %1, i32 %40;
    cbr i1 %41(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %42 = phi [^scalar.header, i32 %40] [^b2, i32 %48];
    f32 %43 = s2f i32 %42 to f32;
    f32 %44 = fadd f32 %8, f32 %43;
    f32* %45 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %42];
    store f32* %45 with f32 %44;
    f32 %46 = fadd f32 %12, f32 %43;
    f32* %47 = getelementptr &([2048 * f32]* %10)[i64 0][i32 %42];
    store f32* %47 with f32 %46;
    i32 %48 = add i32 %42, i32 1;
    i1 %49 = icmp sgt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [40 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [28 * i8]* %4 = ptrcast [28 * i8]* @cmmc_parallel_body_payload_1 to [28 * i8]*;
    f32** %5 = ptradd [28 * i8]* %4, i32 8;
    f32* %6 = load f32** %5;
    f32** %7 = ptradd [28 * i8]* %4, i32 16;
    f32* %8 = load f32** %7;
    i32 %9 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    f32 %10 = phi [^b, f32 0] [^b1, f32 %35];
    i32 %11 = phi [^b, i32 %0] [^b1, i32 %36];
    f32* %12 = getelementptr &(f32* %6)[i32 %11];
    f32 %13 = load f32* %12;
    f32* %14 = getelementptr &(f32* %8)[i32 %11];
    f32 %15 = load f32* %14;
    f32 %16 = fmul f32 %13, f32 %15;
    f32 %17 = fadd f32 %10, f32 %16;
    f32* %18 = getelementptr &(f32* %12)[i64 1];
    f32 %19 = load f32* %18;
    f32* %20 = getelementptr &(f32* %14)[i64 1];
    f32 %21 = load f32* %20;
    f32 %22 = fmul f32 %19, f32 %21;
    f32 %23 = fadd f32 %17, f32 %22;
    f32* %24 = getelementptr &(f32* %12)[i64 2];
    f32 %25 = load f32* %24;
    f32* %26 = getelementptr &(f32* %14)[i64 2];
    f32 %27 = load f32* %26;
    f32 %28 = fmul f32 %25, f32 %27;
    f32 %29 = fadd f32 %23, f32 %28;
    f32* %30 = getelementptr &(f32* %12)[i64 3];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &(f32* %14)[i64 3];
    f32 %33 = load f32* %32;
    f32 %34 = fmul f32 %31, f32 %33;
    f32 %35 = fadd f32 %29, f32 %34;
    i32 %36 = add i32 %11, i32 4;
    i1 %37 = icmp sgt i32 %9, i32 %36;
    cbr i1 %37(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    f32 %38 = phi [^b, f32 0] [^b1, f32 %35];
    i32 %39 = phi [^b, i32 %0] [^b1, i32 %36];
    f32 %40 = phi [^b, f32 undef] [^b1, f32 %35];
    i1 %41 = icmp sgt i32 %1, i32 %39;
    cbr i1 %41(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %42 = phi [^scalar.header, i32 %39] [^b2, i32 %50];
    f32 %43 = phi [^scalar.header, f32 %38] [^b2, f32 %49];
    f32* %44 = getelementptr &(f32* %6)[i32 %42];
    f32 %45 = load f32* %44;
    f32* %46 = getelementptr &(f32* %8)[i32 %42];
    f32 %47 = load f32* %46;
    f32 %48 = fmul f32 %45, f32 %47;
    f32 %49 = fadd f32 %43, f32 %48;
    i32 %50 = add i32 %42, i32 1;
    i1 %51 = icmp sgt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    f32 %52 = phi [^scalar.header, f32 %40] [^b2, f32 %49];
    f32* %53 = ptradd [28 * i8]* %4, i32 0;
    call (f32*, f32) -> void @cmmcReduceAddF32(f32* %53, f32 %52);
    ret;
}
internal [28 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmcReduceAddF32(f32*, f32) -> void { NoRecurse };
internal [2048 * f32]* @y, align 8;
internal [2048 * f32]* @x, align 8;
