internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -3;
    i1 %3 = icmp sgt i32 %0, i32 3;
    [2048 * f32]* %4 = ptrcast [2048 * f32]* @x to [2048 * f32]*;
    f32* %5 = getelementptr &([2048 * f32]* %4)[i64 0][i64 0];
    [2048 * f32]* %6 = ptrcast [2048 * f32]* @y to [2048 * f32]*;
    f32* %7 = getelementptr &([2048 * f32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %27];
    f32 %9 = phi [^entry, f32 1] [^b2, f32 %17];
    f32 %10 = phi [^entry, f32 0] [^b2, f32 %19];
    f32 %11 = phi [^entry, f32 0] [^b2, f32 %55];
    i32 %12 = phi [^entry, i32 0] [^b2, i32 %56];
    i1 %13 = icmp slt i32 %12, i32 500000;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %14 = srem i32 %12, i32 10;
    i1 %15 = icmp neq i32 %14, i32 0;
    f32 %16 = fadd f32 %9, f32 0.2;
    f32 %17 = select i1 %15 ? f32 1 : f32 %16;
    f32 %18 = fadd f32 %10, f32 0.1;
    f32 %19 = select i1 %15 ? f32 0 : f32 %18;
    i1 %20 = icmp sgt i32 %0, i32 %8;
    cbr i1 %20(prob = 0.984615), ^super.header, ^b1;
  ^b:
    f32 %21 = fsub f32 %11, f32 1.43032e+15;
    i1 %22 = fcmp ole f32 %21, f32 1e-06;
    i1 %23 = fcmp oge f32 %21, f32 -1e-06;
    i1 %24 = or i1 %22, i1 %23;
    call (i32) -> void @stoptime(i32 39);
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %25 = add i32 %8, i32 3;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.941176), ^while.body1, ^scalar.header;
  ^b1:
    i32 %27 = phi [^while.body, i32 %8] [^scalar.header, i32 %0] [^while.body3, i32 %0];
    cbr i1 %1(prob = 0.984615), ^super.header1, ^b2;
  ^while.body1:
    i32 %28 = phi [^super.header, i32 %8] [^while.body1, i32 %52];
    f32 %29 = s2f i32 %28 to f32;
    f32 %30 = fadd f32 %19, f32 %29;
    f32* %31 = getelementptr &([2048 * f32]* %4)[i64 0][i32 %28];
    store f32* %31 with f32 %30;
    f32 %32 = fadd f32 %17, f32 %29;
    f32* %33 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %28];
    store f32* %33 with f32 %32;
    i32 %34 = add i32 %28, i32 1;
    f32 %35 = s2f i32 %34 to f32;
    f32 %36 = fadd f32 %19, f32 %35;
    f32* %37 = getelementptr &(f32* %31)[i64 1];
    store f32* %37 with f32 %36;
    f32 %38 = fadd f32 %17, f32 %35;
    f32* %39 = getelementptr &(f32* %33)[i64 1];
    store f32* %39 with f32 %38;
    i32 %40 = add i32 %28, i32 2;
    f32 %41 = s2f i32 %40 to f32;
    f32 %42 = fadd f32 %19, f32 %41;
    f32* %43 = getelementptr &(f32* %31)[i64 2];
    store f32* %43 with f32 %42;
    f32 %44 = fadd f32 %17, f32 %41;
    f32* %45 = getelementptr &(f32* %33)[i64 2];
    store f32* %45 with f32 %44;
    i32 %46 = add i32 %28, i32 3;
    f32 %47 = s2f i32 %46 to f32;
    f32 %48 = fadd f32 %19, f32 %47;
    f32* %49 = getelementptr &(f32* %31)[i64 3];
    store f32* %49 with f32 %48;
    f32 %50 = fadd f32 %17, f32 %47;
    f32* %51 = getelementptr &(f32* %33)[i64 3];
    store f32* %51 with f32 %50;
    i32 %52 = add i32 %28, i32 4;
    i1 %53 = icmp sgt i32 %2, i32 %52;
    cbr i1 %53(prob = 0.941176), ^while.body1, ^scalar.header;
  ^b2:
    f32 %54 = phi [^b1, f32 0] [^scalar.header1, f32 %98] [^while.body4, f32 %107];
    f32 %55 = fadd f32 %11, f32 %54;
    i32 %56 = add i32 %12, i32 1;
    ubr ^while.header;
  ^scalar.header:
    i32 %57 = phi [^super.header, i32 %8] [^while.body1, i32 %52];
    i1 %58 = icmp sgt i32 %0, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body3, ^b1;
  ^super.header1:
    cbr i1 %3(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^b3:
    i32 %59 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %59;
  ^while.body2:
    f32 %60 = phi [^super.header1, f32 0] [^while.body2, f32 %85];
    i32 %61 = phi [^super.header1, i32 0] [^while.body2, i32 %86];
    f32* %62 = getelementptr &(f32* %5)[i32 %61];
    f32 %63 = load f32* %62;
    f32* %64 = getelementptr &(f32* %7)[i32 %61];
    f32 %65 = load f32* %64;
    f32 %66 = fmul f32 %63, f32 %65;
    f32 %67 = fadd f32 %60, f32 %66;
    f32* %68 = getelementptr &(f32* %62)[i64 1];
    f32 %69 = load f32* %68;
    f32* %70 = getelementptr &(f32* %64)[i64 1];
    f32 %71 = load f32* %70;
    f32 %72 = fmul f32 %69, f32 %71;
    f32 %73 = fadd f32 %67, f32 %72;
    f32* %74 = getelementptr &(f32* %62)[i64 2];
    f32 %75 = load f32* %74;
    f32* %76 = getelementptr &(f32* %64)[i64 2];
    f32 %77 = load f32* %76;
    f32 %78 = fmul f32 %75, f32 %77;
    f32 %79 = fadd f32 %73, f32 %78;
    f32* %80 = getelementptr &(f32* %62)[i64 3];
    f32 %81 = load f32* %80;
    f32* %82 = getelementptr &(f32* %64)[i64 3];
    f32 %83 = load f32* %82;
    f32 %84 = fmul f32 %81, f32 %83;
    f32 %85 = fadd f32 %79, f32 %84;
    i32 %86 = add i32 %61, i32 4;
    i1 %87 = icmp sgt i32 %2, i32 %86;
    cbr i1 %87(prob = 0.941176), ^while.body2, ^scalar.header1;
  ^while.body3 {scalar}:
    i32 %88 = phi [^scalar.header, i32 %57] [^while.body3, i32 %94];
    f32 %89 = s2f i32 %88 to f32;
    f32 %90 = fadd f32 %19, f32 %89;
    f32* %91 = getelementptr &([2048 * f32]* %4)[i64 0][i32 %88];
    store f32* %91 with f32 %90;
    f32 %92 = fadd f32 %17, f32 %89;
    f32* %93 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %88];
    store f32* %93 with f32 %92;
    i32 %94 = add i32 %88, i32 1;
    i1 %95 = icmp sgt i32 %0, i32 %94;
    cbr i1 %95(prob = 0.75), ^while.body3, ^b1;
  ^scalar.header1:
    f32 %96 = phi [^super.header1, f32 0] [^while.body2, f32 %85];
    i32 %97 = phi [^super.header1, i32 0] [^while.body2, i32 %86];
    f32 %98 = phi [^super.header1, f32 undef] [^while.body2, f32 %85];
    i1 %99 = icmp sgt i32 %0, i32 %97;
    cbr i1 %99(prob = 0.75), ^while.body4, ^b2;
  ^while.body4 {scalar}:
    i32 %100 = phi [^scalar.header1, i32 %97] [^while.body4, i32 %108];
    f32 %101 = phi [^scalar.header1, f32 %96] [^while.body4, f32 %107];
    f32* %102 = getelementptr &(f32* %5)[i32 %100];
    f32 %103 = load f32* %102;
    f32* %104 = getelementptr &(f32* %7)[i32 %100];
    f32 %105 = load f32* %104;
    f32 %106 = fmul f32 %103, f32 %105;
    f32 %107 = fadd f32 %101, f32 %106;
    i32 %108 = add i32 %100, i32 1;
    i1 %109 = icmp sgt i32 %0, i32 %108;
    cbr i1 %109(prob = 0.75), ^while.body4, ^b2;
}
internal [2048 * f32]* @y, align 8 { Flexible };
internal [2048 * f32]* @x, align 8 { Flexible };
