internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -4;
    i1 %3 = icmp sgt i32 %0, i32 4;
    [2048 * f32]* %4 = ptrcast [2048 * f32]* @x to [2048 * f32]*;
    f32* %5 = getelementptr &([2048 * f32]* %4)[i64 0][i64 0];
    [2048 * f32]* %6 = ptrcast [2048 * f32]* @y to [2048 * f32]*;
    f32* %7 = getelementptr &([2048 * f32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %27];
    f32 %9 = phi [^entry, f32 1] [^b2, f32 %17];
    f32 %10 = phi [^entry, f32 0] [^b2, f32 %19];
    f32 %11 = phi [^entry, f32 0] [^b2, f32 %29];
    i32 %12 = phi [^entry, i32 0] [^b2, i32 %30];
    i1 %13 = icmp slt i32 %12, i32 500000;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %14 = srem i32 %12, i32 10;
    i1 %15 = icmp neq i32 %14, i32 0;
    f32 %16 = fadd f32 %9, f32 0.2;
    f32 %17 = select i1 %15 ? f32 1 : f32 %16;
    f32 %18 = fadd f32 %10, f32 0.1;
    f32 %19 = select i1 %15 ? f32 0 : f32 %18;
    i1 %20 = icmp sgt i32 %0, i32 %8;
    cbr i1 %20(prob = 0.984615), ^super.header, ^b1;
  ^b:
    f32 %21 = fsub f32 %11, f32 1.43032e+15;
    i1 %22 = fcmp ole f32 %21, f32 1e-06;
    i1 %23 = fcmp oge f32 %21, f32 -1e-06;
    i1 %24 = or i1 %22, i1 %23;
    call (i32) -> void @stoptime(i32 39);
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %25 = add i32 %8, i32 4;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.941176), ^while.body1, ^while.body2;
  ^b1:
    i32 %27 = phi [^while.body, i32 %8] [^while.body2, i32 %0];
    cbr i1 %1(prob = 0.984615), ^super.header1, ^b2;
  ^b2:
    f32 %28 = phi [^b1, f32 0] [^while.body4, f32 %101];
    f32 %29 = fadd f32 %11, f32 %28;
    i32 %30 = add i32 %12, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %31 = phi [^super.header, i32 %8] [^while.body1, i32 %55];
    f32 %32 = s2f i32 %31 to f32;
    f32 %33 = fadd f32 %19, f32 %32;
    f32* %34 = getelementptr &([2048 * f32]* %4)[i64 0][i32 %31];
    store f32* %34 with f32 %33;
    f32 %35 = fadd f32 %17, f32 %32;
    f32* %36 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %31];
    store f32* %36 with f32 %35;
    i32 %37 = add i32 %31, i32 1;
    f32 %38 = s2f i32 %37 to f32;
    f32 %39 = fadd f32 %19, f32 %38;
    f32* %40 = getelementptr &(f32* %34)[i64 1];
    store f32* %40 with f32 %39;
    f32 %41 = fadd f32 %17, f32 %38;
    f32* %42 = getelementptr &(f32* %36)[i64 1];
    store f32* %42 with f32 %41;
    i32 %43 = add i32 %31, i32 2;
    f32 %44 = s2f i32 %43 to f32;
    f32 %45 = fadd f32 %19, f32 %44;
    f32* %46 = getelementptr &(f32* %34)[i64 2];
    store f32* %46 with f32 %45;
    f32 %47 = fadd f32 %17, f32 %44;
    f32* %48 = getelementptr &(f32* %36)[i64 2];
    store f32* %48 with f32 %47;
    i32 %49 = add i32 %31, i32 3;
    f32 %50 = s2f i32 %49 to f32;
    f32 %51 = fadd f32 %19, f32 %50;
    f32* %52 = getelementptr &(f32* %34)[i64 3];
    store f32* %52 with f32 %51;
    f32 %53 = fadd f32 %17, f32 %50;
    f32* %54 = getelementptr &(f32* %36)[i64 3];
    store f32* %54 with f32 %53;
    i32 %55 = add i32 %31, i32 4;
    i1 %56 = icmp sgt i32 %2, i32 %55;
    cbr i1 %56(prob = 0.941176), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %57 = phi [^super.header, i32 %8] [^while.body1, i32 %55] [^while.body2, i32 %63];
    f32 %58 = s2f i32 %57 to f32;
    f32 %59 = fadd f32 %19, f32 %58;
    f32* %60 = getelementptr &([2048 * f32]* %4)[i64 0][i32 %57];
    store f32* %60 with f32 %59;
    f32 %61 = fadd f32 %17, f32 %58;
    f32* %62 = getelementptr &([2048 * f32]* %6)[i64 0][i32 %57];
    store f32* %62 with f32 %61;
    i32 %63 = add i32 %57, i32 1;
    i1 %64 = icmp sgt i32 %0, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body2, ^b1;
  ^super.header1:
    cbr i1 %3(prob = 0.941176), ^while.body3, ^while.body4;
  ^b3:
    i32 %65 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %65;
  ^while.body3:
    f32 %66 = phi [^super.header1, f32 0] [^while.body3, f32 %91];
    i32 %67 = phi [^super.header1, i32 0] [^while.body3, i32 %92];
    f32* %68 = getelementptr &(f32* %5)[i32 %67];
    f32 %69 = load f32* %68;
    f32* %70 = getelementptr &(f32* %7)[i32 %67];
    f32 %71 = load f32* %70;
    f32 %72 = fmul f32 %69, f32 %71;
    f32 %73 = fadd f32 %66, f32 %72;
    f32* %74 = getelementptr &(f32* %68)[i64 1];
    f32 %75 = load f32* %74;
    f32* %76 = getelementptr &(f32* %70)[i64 1];
    f32 %77 = load f32* %76;
    f32 %78 = fmul f32 %75, f32 %77;
    f32 %79 = fadd f32 %73, f32 %78;
    f32* %80 = getelementptr &(f32* %68)[i64 2];
    f32 %81 = load f32* %80;
    f32* %82 = getelementptr &(f32* %70)[i64 2];
    f32 %83 = load f32* %82;
    f32 %84 = fmul f32 %81, f32 %83;
    f32 %85 = fadd f32 %79, f32 %84;
    f32* %86 = getelementptr &(f32* %68)[i64 3];
    f32 %87 = load f32* %86;
    f32* %88 = getelementptr &(f32* %70)[i64 3];
    f32 %89 = load f32* %88;
    f32 %90 = fmul f32 %87, f32 %89;
    f32 %91 = fadd f32 %85, f32 %90;
    i32 %92 = add i32 %67, i32 4;
    i1 %93 = icmp sgt i32 %2, i32 %92;
    cbr i1 %93(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %94 = phi [^super.header1, i32 0] [^while.body3, i32 %92] [^while.body4, i32 %102];
    f32 %95 = phi [^super.header1, f32 0] [^while.body3, f32 %91] [^while.body4, f32 %101];
    f32* %96 = getelementptr &(f32* %5)[i32 %94];
    f32 %97 = load f32* %96;
    f32* %98 = getelementptr &(f32* %7)[i32 %94];
    f32 %99 = load f32* %98;
    f32 %100 = fmul f32 %97, f32 %99;
    f32 %101 = fadd f32 %95, f32 %100;
    i32 %102 = add i32 %94, i32 1;
    i1 %103 = icmp sgt i32 %0, i32 %102;
    cbr i1 %103(prob = 0.75), ^while.body4, ^b2;
}
internal [2048 * f32]* @y, align 8 { Flexible };
internal [2048 * f32]* @x, align 8 { Flexible };
