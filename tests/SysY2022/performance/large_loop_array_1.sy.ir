internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [2048 * f32]* %y = alloc [2048 * f32];
    [2048 * f32]* %x = alloc [2048 * f32];
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 22);
    f32* %2 = getelementptr &([2048 * f32]* %x)[i64 0][i64 0];
    f32* %3 = getelementptr &([2048 * f32]* %y)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %4 = phi [^entry, f32 0] [^b2, f32 %49];
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %24];
    f32 %6 = phi [^entry, f32 1] [^b2, f32 %13];
    f32 %7 = phi [^entry, f32 0] [^b2, f32 %15];
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %50];
    i1 %9 = scmp lt i32 %8, i32 500000;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = srem i32 %8, i32 10;
    i1 %11 = scmp neq i32 %10, i32 0;
    f32 %12 = fadd f32 %6, f32 0.2;
    f32 %13 = select i1 %11 ? f32 1 : f32 %12;
    f32 %14 = fadd f32 %7, f32 0.1;
    f32 %15 = select i1 %11 ? f32 0 : f32 %14;
    i1 %16 = scmp lt i32 %5, i32 %0;
    cbr i1 %16(prob = 0.97), ^super.header, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %17 = fsub f32 %4, f32 1.43032e+15;
    i1 %18 = fcmp le f32 %17, f32 1e-06;
    i1 %19 = fcmp ge f32 %17, f32 -1e-06;
    i1 %20 = or i1 %18, i1 %19;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %21 = phi [^while.body, i32 %5] [^while.body1, i32 %22];
    i32 %22 = add i32 %21, i32 4;
    i1 %23 = scmp lt i32 %22, i32 %0;
    cbr i1 %23(prob = 0.89), ^while.body1, ^super.header1;
  ^b1:
    i32 %24 = phi [^while.body, i32 %5] [^while.body4, i32 %112];
    cbr i1 %1(prob = 0.97), ^super.header2, ^b2;
  ^while.body1:
    f32 %25 = s2f i32 %21 to f32;
    f32 %26 = fadd f32 %15, f32 %25;
    f32* %27 = getelementptr &([2048 * f32]* %x)[i64 0][i32 %21];
    store f32* %27 with f32 %26;
    f32 %28 = fadd f32 %13, f32 %25;
    f32* %29 = getelementptr &([2048 * f32]* %y)[i64 0][i32 %21];
    store f32* %29 with f32 %28;
    i32 %30 = add i32 %21, i32 1;
    f32 %31 = s2f i32 %30 to f32;
    f32 %32 = fadd f32 %15, f32 %31;
    f32* %33 = getelementptr &(f32* %27)[i64 1];
    store f32* %33 with f32 %32;
    f32 %34 = fadd f32 %13, f32 %31;
    f32* %35 = getelementptr &(f32* %29)[i64 1];
    store f32* %35 with f32 %34;
    i32 %36 = add i32 %21, i32 2;
    f32 %37 = s2f i32 %36 to f32;
    f32 %38 = fadd f32 %15, f32 %37;
    f32* %39 = getelementptr &(f32* %27)[i64 2];
    store f32* %39 with f32 %38;
    f32 %40 = fadd f32 %13, f32 %37;
    f32* %41 = getelementptr &(f32* %29)[i64 2];
    store f32* %41 with f32 %40;
    i32 %42 = add i32 %21, i32 3;
    f32 %43 = s2f i32 %42 to f32;
    f32 %44 = fadd f32 %15, f32 %43;
    f32* %45 = getelementptr &(f32* %27)[i64 3];
    store f32* %45 with f32 %44;
    f32 %46 = fadd f32 %13, f32 %43;
    f32* %47 = getelementptr &(f32* %29)[i64 3];
    store f32* %47 with f32 %46;
    ubr ^super.header;
  ^b2:
    f32 %48 = phi [^b1, f32 0] [^while.body7, f32 %177];
    f32 %49 = fadd f32 %4, f32 %48;
    i32 %50 = add i32 %8, i32 1;
    ubr ^while.header;
  ^super.header1:
    i32 %51 = phi [^super.header, i32 %21] [^while.body2, i32 %52];
    i32 %52 = add i32 %51, i32 4;
    i1 %53 = scmp lt i32 %52, i32 %0;
    cbr i1 %53(prob = 0.89), ^while.body2, ^while.body4;
  ^super.header2:
    f32 %54 = phi [^b1, f32 0] [^while.body3, f32 %105];
    i32 %55 = phi [^b1, i32 0] [^while.body3, i32 %56];
    i32 %56 = add i32 %55, i32 4;
    i1 %57 = scmp lt i32 %56, i32 %0;
    cbr i1 %57(prob = 0.89), ^while.body3, ^super.header3;
  ^b3:
    i32 %58 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %58;
  ^while.body2:
    f32 %59 = s2f i32 %51 to f32;
    f32 %60 = fadd f32 %15, f32 %59;
    f32* %61 = getelementptr &([2048 * f32]* %x)[i64 0][i32 %51];
    store f32* %61 with f32 %60;
    f32 %62 = fadd f32 %13, f32 %59;
    f32* %63 = getelementptr &([2048 * f32]* %y)[i64 0][i32 %51];
    store f32* %63 with f32 %62;
    i32 %64 = add i32 %51, i32 1;
    f32 %65 = s2f i32 %64 to f32;
    f32 %66 = fadd f32 %15, f32 %65;
    f32* %67 = getelementptr &(f32* %61)[i64 1];
    store f32* %67 with f32 %66;
    f32 %68 = fadd f32 %13, f32 %65;
    f32* %69 = getelementptr &(f32* %63)[i64 1];
    store f32* %69 with f32 %68;
    i32 %70 = add i32 %51, i32 2;
    f32 %71 = s2f i32 %70 to f32;
    f32 %72 = fadd f32 %15, f32 %71;
    f32* %73 = getelementptr &(f32* %61)[i64 2];
    store f32* %73 with f32 %72;
    f32 %74 = fadd f32 %13, f32 %71;
    f32* %75 = getelementptr &(f32* %63)[i64 2];
    store f32* %75 with f32 %74;
    i32 %76 = add i32 %51, i32 3;
    f32 %77 = s2f i32 %76 to f32;
    f32 %78 = fadd f32 %15, f32 %77;
    f32* %79 = getelementptr &(f32* %61)[i64 3];
    store f32* %79 with f32 %78;
    f32 %80 = fadd f32 %13, f32 %77;
    f32* %81 = getelementptr &(f32* %63)[i64 3];
    store f32* %81 with f32 %80;
    ubr ^super.header1;
  ^while.body3:
    f32* %82 = getelementptr &(f32* %2)[i32 %55];
    f32 %83 = load f32* %82;
    f32* %84 = getelementptr &(f32* %3)[i32 %55];
    f32 %85 = load f32* %84;
    f32 %86 = fmul f32 %83, f32 %85;
    f32 %87 = fadd f32 %54, f32 %86;
    f32* %88 = getelementptr &(f32* %82)[i64 1];
    f32 %89 = load f32* %88;
    f32* %90 = getelementptr &(f32* %84)[i64 1];
    f32 %91 = load f32* %90;
    f32 %92 = fmul f32 %89, f32 %91;
    f32 %93 = fadd f32 %87, f32 %92;
    f32* %94 = getelementptr &(f32* %82)[i64 2];
    f32 %95 = load f32* %94;
    f32* %96 = getelementptr &(f32* %84)[i64 2];
    f32 %97 = load f32* %96;
    f32 %98 = fmul f32 %95, f32 %97;
    f32 %99 = fadd f32 %93, f32 %98;
    f32* %100 = getelementptr &(f32* %82)[i64 3];
    f32 %101 = load f32* %100;
    f32* %102 = getelementptr &(f32* %84)[i64 3];
    f32 %103 = load f32* %102;
    f32 %104 = fmul f32 %101, f32 %103;
    f32 %105 = fadd f32 %99, f32 %104;
    ubr ^super.header2;
  ^while.body4:
    i32 %106 = phi [^super.header1, i32 %51] [^while.body4, i32 %112];
    f32 %107 = s2f i32 %106 to f32;
    f32 %108 = fadd f32 %15, f32 %107;
    f32* %109 = getelementptr &([2048 * f32]* %x)[i64 0][i32 %106];
    store f32* %109 with f32 %108;
    f32 %110 = fadd f32 %13, f32 %107;
    f32* %111 = getelementptr &([2048 * f32]* %y)[i64 0][i32 %106];
    store f32* %111 with f32 %110;
    i32 %112 = add i32 %106, i32 1;
    i1 %113 = scmp lt i32 %112, i32 %0;
    cbr i1 %113(prob = 0.97), ^while.body4, ^b1;
  ^super.header3:
    f32 %114 = phi [^super.header2, f32 %54] [^while.body5, f32 %141];
    i32 %115 = phi [^super.header2, i32 %55] [^while.body5, i32 %116];
    i32 %116 = add i32 %115, i32 4;
    i1 %117 = scmp lt i32 %116, i32 %0;
    cbr i1 %117(prob = 0.89), ^while.body5, ^super.header4;
  ^while.body5:
    f32* %118 = getelementptr &(f32* %2)[i32 %115];
    f32 %119 = load f32* %118;
    f32* %120 = getelementptr &(f32* %3)[i32 %115];
    f32 %121 = load f32* %120;
    f32 %122 = fmul f32 %119, f32 %121;
    f32 %123 = fadd f32 %114, f32 %122;
    f32* %124 = getelementptr &(f32* %118)[i64 1];
    f32 %125 = load f32* %124;
    f32* %126 = getelementptr &(f32* %120)[i64 1];
    f32 %127 = load f32* %126;
    f32 %128 = fmul f32 %125, f32 %127;
    f32 %129 = fadd f32 %123, f32 %128;
    f32* %130 = getelementptr &(f32* %118)[i64 2];
    f32 %131 = load f32* %130;
    f32* %132 = getelementptr &(f32* %120)[i64 2];
    f32 %133 = load f32* %132;
    f32 %134 = fmul f32 %131, f32 %133;
    f32 %135 = fadd f32 %129, f32 %134;
    f32* %136 = getelementptr &(f32* %118)[i64 3];
    f32 %137 = load f32* %136;
    f32* %138 = getelementptr &(f32* %120)[i64 3];
    f32 %139 = load f32* %138;
    f32 %140 = fmul f32 %137, f32 %139;
    f32 %141 = fadd f32 %135, f32 %140;
    ubr ^super.header3;
  ^super.header4:
    f32 %142 = phi [^super.header3, f32 %114] [^while.body6, f32 %169];
    i32 %143 = phi [^super.header3, i32 %115] [^while.body6, i32 %144];
    i32 %144 = add i32 %143, i32 4;
    i1 %145 = scmp lt i32 %144, i32 %0;
    cbr i1 %145(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    f32* %146 = getelementptr &(f32* %2)[i32 %143];
    f32 %147 = load f32* %146;
    f32* %148 = getelementptr &(f32* %3)[i32 %143];
    f32 %149 = load f32* %148;
    f32 %150 = fmul f32 %147, f32 %149;
    f32 %151 = fadd f32 %142, f32 %150;
    f32* %152 = getelementptr &(f32* %146)[i64 1];
    f32 %153 = load f32* %152;
    f32* %154 = getelementptr &(f32* %148)[i64 1];
    f32 %155 = load f32* %154;
    f32 %156 = fmul f32 %153, f32 %155;
    f32 %157 = fadd f32 %151, f32 %156;
    f32* %158 = getelementptr &(f32* %146)[i64 2];
    f32 %159 = load f32* %158;
    f32* %160 = getelementptr &(f32* %148)[i64 2];
    f32 %161 = load f32* %160;
    f32 %162 = fmul f32 %159, f32 %161;
    f32 %163 = fadd f32 %157, f32 %162;
    f32* %164 = getelementptr &(f32* %146)[i64 3];
    f32 %165 = load f32* %164;
    f32* %166 = getelementptr &(f32* %148)[i64 3];
    f32 %167 = load f32* %166;
    f32 %168 = fmul f32 %165, f32 %167;
    f32 %169 = fadd f32 %163, f32 %168;
    ubr ^super.header4;
  ^while.body7:
    f32 %170 = phi [^super.header4, f32 %142] [^while.body7, f32 %177];
    i32 %171 = phi [^super.header4, i32 %143] [^while.body7, i32 %178];
    f32* %172 = getelementptr &(f32* %2)[i32 %171];
    f32 %173 = load f32* %172;
    f32* %174 = getelementptr &(f32* %3)[i32 %171];
    f32 %175 = load f32* %174;
    f32 %176 = fmul f32 %173, f32 %175;
    f32 %177 = fadd f32 %170, f32 %176;
    i32 %178 = add i32 %171, i32 1;
    i1 %179 = scmp lt i32 %178, i32 %0;
    cbr i1 %179(prob = 0.97), ^while.body7, ^b2;
}
