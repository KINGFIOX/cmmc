internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [31 * i32]* %x = alloc [31 * i32];
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 56);
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @a to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i64 0];
    i32* %5 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    i32* %6 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32* %7 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32* %8 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32* %9 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32* %10 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32* %11 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32* %12 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32* %13 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32* %14 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32* %15 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    i32* %16 = getelementptr &([31 * i32]* %x)[i64 0][i64 11];
    i32* %17 = getelementptr &([31 * i32]* %x)[i64 0][i64 12];
    i32* %18 = getelementptr &([31 * i32]* %x)[i64 0][i64 13];
    i32* %19 = getelementptr &([31 * i32]* %x)[i64 0][i64 14];
    i32* %20 = getelementptr &([31 * i32]* %x)[i64 0][i64 15];
    i32* %21 = getelementptr &([31 * i32]* %x)[i64 0][i64 16];
    i32* %22 = getelementptr &([31 * i32]* %x)[i64 0][i64 17];
    i32* %23 = getelementptr &([31 * i32]* %x)[i64 0][i64 18];
    i32* %24 = getelementptr &([31 * i32]* %x)[i64 0][i64 19];
    i32* %25 = getelementptr &([31 * i32]* %x)[i64 0][i64 20];
    i32* %26 = getelementptr &([31 * i32]* %x)[i64 0][i64 21];
    i32* %27 = getelementptr &([31 * i32]* %x)[i64 0][i64 22];
    i32* %28 = getelementptr &([31 * i32]* %x)[i64 0][i64 23];
    i32* %29 = getelementptr &([31 * i32]* %x)[i64 0][i64 24];
    i32* %30 = getelementptr &([31 * i32]* %x)[i64 0][i64 25];
    i32* %31 = getelementptr &([31 * i32]* %x)[i64 0][i64 26];
    i32* %32 = getelementptr &([31 * i32]* %x)[i64 0][i64 27];
    i32* %33 = getelementptr &([31 * i32]* %x)[i64 0][i64 28];
    i32* %34 = getelementptr &([31 * i32]* %x)[i64 0][i64 29];
    i32* %35 = getelementptr &([31 * i32]* %x)[i64 0][i64 30];
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %36 = phi [^entry, i32 %2] [^while.body1, i32 %49];
    i32 %37 = phi [^entry, i32 %0] [^while.body1, i32 %61];
    i32 %38 = mul i32 %36, i32 19971231;
    i32 %39 = add i32 %38, i32 19981013;
    i32 %40 = srem i32 %39, i32 1000000007;
    i1 %41 = icmp slt i32 %40, i32 0;
    i32 %42 = add i32 %40, i32 1000000007;
    i32 %43 = select i1 %41 ? i32 %42 : i32 %40;
    i32 %44 = mul i32 %43, i32 19971231;
    i32 %45 = add i32 %44, i32 19981013;
    i32 %46 = srem i32 %45, i32 1000000007;
    i1 %47 = icmp slt i32 %46, i32 0;
    i32 %48 = add i32 %46, i32 1000000007;
    i32 %49 = select i1 %47 ? i32 %48 : i32 %46;
    i32 %50 = srem i32 %49, i32 2;
    i32 %51 = srem i32 %43, i32 300000;
    i32 %52 = sdiv i32 %51, i32 30;
    i32* %53 = getelementptr &(i32* %4)[i32 %52];
    store i32* %5 with i32 1;
    store i32* %6 with i32 2;
    store i32* %7 with i32 4;
    store i32* %8 with i32 8;
    store i32* %9 with i32 16;
    store i32* %10 with i32 32;
    store i32* %11 with i32 64;
    store i32* %12 with i32 128;
    store i32* %13 with i32 256;
    store i32* %14 with i32 512;
    store i32* %15 with i32 1024;
    store i32* %16 with i32 2048;
    store i32* %17 with i32 4096;
    store i32* %18 with i32 8192;
    store i32* %19 with i32 16384;
    store i32* %20 with i32 32768;
    store i32* %21 with i32 65536;
    store i32* %22 with i32 131072;
    store i32* %23 with i32 262144;
    store i32* %24 with i32 524288;
    store i32* %25 with i32 1048576;
    store i32* %26 with i32 2097152;
    store i32* %27 with i32 4194304;
    store i32* %28 with i32 8388608;
    store i32* %29 with i32 16777216;
    store i32* %30 with i32 33554432;
    store i32* %31 with i32 67108864;
    store i32* %32 with i32 134217728;
    store i32* %33 with i32 268435456;
    store i32* %34 with i32 536870912;
    store i32* %35 with i32 1073741824;
    i32 %54 = load i32* %53;
    i32 %55 = srem i32 %51, i32 30;
    i32* %56 = getelementptr &([31 * i32]* %x)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i32 %58 = sdiv i32 %54, i32 %57;
    i32 %59 = srem i32 %58, i32 2;
    i1 %60 = icmp neq i32 %50, i32 %59;
    i32 %61 = add i32 %37, i32 -1;
    cbr i1 %60(prob = 0.5), ^if.then, ^while.body1;
  ^b:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 10000, i32* %4);
    ret i32 0;
  ^if.then:
    i32 %62 = and i32 %58, i32 1;
    i32 %63 = xor i32 %50, i32 1;
    i32 %64 = or i32 %62, i32 %63;
    i1 %65 = icmp eq i32 %64, i32 0;
    i32 %66 = select i1 %65 ? i32 %57 : i32 0;
    i32 %67 = and i32 %58, i32 -2147483647;
    i32 %68 = xor i32 %67, i32 1;
    i32 %69 = or i32 %50, i32 %68;
    i1 %70 = icmp eq i32 %69, i32 0;
    cbr i1 %70(prob = 0.25), ^if.then1, ^indirect;
  ^while.body1:
    i1 %71 = icmp sgt i32 %61, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body, ^b;
  ^if.then1:
    i32 %72 = load i32* %56;
    i32 %73 = sub i32 %66, i32 %72;
    i32 %74 = load i32* %53;
    i32 %75 = add i32 %73, i32 %74;
    store i32* %53 with i32 %75;
    ubr ^while.body1;
  ^indirect:
    i32 %76 = load i32* %53;
    i32 %77 = add i32 %66, i32 %76;
    store i32* %53 with i32 %77;
    ubr ^while.body1;
}
