internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [3 * i32]* %seed = alloc [3 * i32];
    [31 * i32]* %x = alloc [31 * i32];
    i32* %0 = getelementptr &([10000 * i32]* @a)[i64 0][i64 0];
    i32* %1 = getelementptr &([3 * i32]* %seed)[i64 0][i64 0];
    store i32* %1 with i32 19971231;
    i32* %2 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    i32* %3 = getelementptr &([3 * i32]* %seed)[i64 0][i64 1];
    store i32* %3 with i32 19981013;
    i32* %4 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32* %5 = getelementptr &([3 * i32]* %seed)[i64 0][i64 2];
    store i32* %5 with i32 1000000007;
    i32* %6 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32* %7 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32* %8 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32* %9 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32* %10 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32* %11 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32* %12 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32* %13 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32* %14 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    i32* %15 = getelementptr &([31 * i32]* %x)[i64 0][i64 11];
    i32* %16 = getelementptr &([31 * i32]* %x)[i64 0][i64 12];
    i32* %17 = getelementptr &([31 * i32]* %x)[i64 0][i64 13];
    i32* %18 = getelementptr &([31 * i32]* %x)[i64 0][i64 14];
    i32* %19 = getelementptr &([31 * i32]* %x)[i64 0][i64 15];
    i32* %20 = getelementptr &([31 * i32]* %x)[i64 0][i64 16];
    i32* %21 = getelementptr &([31 * i32]* %x)[i64 0][i64 17];
    i32* %22 = getelementptr &([31 * i32]* %x)[i64 0][i64 18];
    i32* %23 = getelementptr &([31 * i32]* %x)[i64 0][i64 19];
    i32* %24 = getelementptr &([31 * i32]* %x)[i64 0][i64 20];
    i32* %25 = getelementptr &([31 * i32]* %x)[i64 0][i64 21];
    i32* %26 = getelementptr &([31 * i32]* %x)[i64 0][i64 22];
    i32* %27 = getelementptr &([31 * i32]* %x)[i64 0][i64 23];
    i32* %28 = getelementptr &([31 * i32]* %x)[i64 0][i64 24];
    i32* %29 = getelementptr &([31 * i32]* %x)[i64 0][i64 25];
    i32* %30 = getelementptr &([31 * i32]* %x)[i64 0][i64 26];
    i32* %31 = getelementptr &([31 * i32]* %x)[i64 0][i64 27];
    i32* %32 = getelementptr &([31 * i32]* %x)[i64 0][i64 28];
    i32* %33 = getelementptr &([31 * i32]* %x)[i64 0][i64 29];
    i32* %34 = getelementptr &([31 * i32]* %x)[i64 0][i64 30];
    i32 %35 = call () -> i32 @getint();
    i1 %36 = scmp gt i32 %35, i32 0;
    i32 %37 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 56);
    cbr i1 %36(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %38 = phi [^entry, i32 1000000007] [^indirect, i32 %74];
    i32 %39 = phi [^entry, i32 19981013] [^indirect, i32 %73];
    i32 %40 = phi [^entry, i32 19971231] [^indirect, i32 %72];
    i32 %41 = phi [^entry, i32 %37] [^indirect, i32 %59];
    i32 %42 = phi [^entry, i32 %35] [^indirect, i32 %43];
    i32 %43 = add i32 %42, i32 -1;
    i32 %44 = mul i32 %41, i32 %40;
    i32 %45 = add i32 %44, i32 %39;
    i32 %46 = srem i32 %45, i32 %38;
    i1 %47 = scmp lt i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^if.then, ^b1;
^b:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 10000, i32* %0);
    ret i32 0;
^if.then:
    i32 %48 = add i32 %46, i32 %38;
    ubr ^b1;
^b1:
    i32 %49 = phi [^while.body, i32 %46] [^if.then, i32 %48];
    i32 %50 = load i32* %1;
    i32 %51 = load i32* %3;
    i32 %52 = load i32* %5;
    i32 %53 = mul i32 %50, i32 %49;
    i32 %54 = add i32 %51, i32 %53;
    i32 %55 = srem i32 %49, i32 300000;
    i32 %56 = srem i32 %54, i32 %52;
    i1 %57 = scmp lt i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %58 = add i32 %52, i32 %56;
    ubr ^b2;
^b2:
    i32 %59 = phi [^b1, i32 %56] [^if.then1, i32 %58];
    store i32* %2 with i32 1;
    store i32* %4 with i32 2;
    store i32* %6 with i32 4;
    store i32* %7 with i32 8;
    store i32* %8 with i32 16;
    store i32* %9 with i32 32;
    store i32* %10 with i32 64;
    store i32* %11 with i32 128;
    store i32* %12 with i32 256;
    store i32* %13 with i32 512;
    store i32* %14 with i32 1024;
    store i32* %15 with i32 2048;
    store i32* %16 with i32 4096;
    store i32* %17 with i32 8192;
    store i32* %18 with i32 16384;
    store i32* %19 with i32 32768;
    store i32* %20 with i32 65536;
    store i32* %21 with i32 131072;
    store i32* %22 with i32 262144;
    store i32* %23 with i32 524288;
    store i32* %24 with i32 1048576;
    store i32* %25 with i32 2097152;
    store i32* %26 with i32 4194304;
    store i32* %27 with i32 8388608;
    store i32* %28 with i32 16777216;
    store i32* %29 with i32 33554432;
    store i32* %30 with i32 67108864;
    store i32* %31 with i32 134217728;
    store i32* %32 with i32 268435456;
    store i32* %33 with i32 536870912;
    store i32* %34 with i32 1073741824;
    i32 %60 = sdiv i32 %55, i32 30;
    i1 %61 = scmp gt i32 %60, i32 9999;
    cbr i1 %61(prob = 0.5), ^while.body1, ^b3;
^while.body1:
    i1 %62 = scmp gt i32 %43, i32 0;
    cbr i1 %62(prob = 0.97), ^indirect, ^b;
^b3:
    i32 %63 = srem i32 %55, i32 30;
    i32 %64 = srem i32 %59, i32 2;
    i32* %65 = getelementptr &(i32* %0)[i32 %60];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([31 * i32]* %x)[i64 0][i32 %63];
    i32 %68 = load i32* %67;
    i32 %69 = sdiv i32 %66, i32 %68;
    i32 %70 = srem i32 %69, i32 2;
    i1 %71 = scmp neq i32 %70, i32 %64;
    cbr i1 %71(prob = 0.5), ^if.then2, ^b4;
^indirect:
    i32 %72 = load i32* %1;
    i32 %73 = load i32* %3;
    i32 %74 = load i32* %5;
    ubr ^while.body;
^b4:
    i32 %75 = phi [^b3, i32 %66] [^if.then4, i32 %90] [^indirect1, i32 %92];
    i32 %76 = phi [^b3, i32 0] [^if.then4, i32 %91] [^indirect1, i32 %83];
    i32 %77 = add i32 %75, i32 %76;
    store i32* %65 with i32 %77;
    ubr ^while.body1;
^if.then2:
    i1 %78 = scmp eq i32 %64, i32 1;
    i1 %79 = scmp eq i32 %70, i32 0;
    i1 %80 = and i1 %78, i1 %79;
    cbr i1 %80(prob = 0.25), ^if.then3, ^b5;
^if.then3:
    i32 %81 = load i32* %65;
    ubr ^b5;
^b5:
    i32 %82 = phi [^if.then2, i32 %66] [^if.then3, i32 %81];
    i32 %83 = phi [^if.then2, i32 0] [^if.then3, i32 %68];
    i32 %84 = sdiv i32 %82, i32 %68;
    i32 %85 = srem i32 %84, i32 2;
    i1 %86 = scmp eq i32 %64, i32 0;
    i1 %87 = scmp eq i32 %85, i32 1;
    i1 %88 = and i1 %86, i1 %87;
    cbr i1 %88(prob = 0.25), ^if.then4, ^indirect1;
^if.then4:
    i32 %89 = load i32* %67;
    i32 %90 = load i32* %65;
    i32 %91 = sub i32 %83, i32 %89;
    ubr ^b4;
^indirect1:
    i32 %92 = load i32* %65;
    ubr ^b4;
}
