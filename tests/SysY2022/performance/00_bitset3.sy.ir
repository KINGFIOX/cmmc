internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [31 * i32]* %x = alloc [31 * i32];
    i32* %staticvalue = alloc i32;
    [3 * i32]* %seed = alloc [3 * i32];
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([3 * i32]* %seed)[i64 0][i64 0];
    store i32* %0 with i32 19971231;
    i32* %1 = getelementptr &([3 * i32]* %seed)[i64 0][i64 1];
    store i32* %1 with i32 19981013;
    i32* %2 = getelementptr &([3 * i32]* %seed)[i64 0][i64 2];
    store i32* %2 with i32 1000000007;
    i32 %3 = call () -> i32 @getint();
    store i32* %n with i32 %3;
    i32 %4 = call () -> i32 @getint();
    store i32* %staticvalue with i32 %4;
    call (i32) -> void @starttime(i32 56);
    i32* %5 = getelementptr &([10000 * i32]* @a)[i64 0][i64 0];
    i32* %6 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    i32* %7 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32* %8 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32* %9 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32* %10 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32* %11 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32* %12 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32* %13 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32* %14 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32* %15 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32* %16 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    i32* %17 = getelementptr &([31 * i32]* %x)[i64 0][i64 11];
    i32* %18 = getelementptr &([31 * i32]* %x)[i64 0][i64 12];
    i32* %19 = getelementptr &([31 * i32]* %x)[i64 0][i64 13];
    i32* %20 = getelementptr &([31 * i32]* %x)[i64 0][i64 14];
    i32* %21 = getelementptr &([31 * i32]* %x)[i64 0][i64 15];
    i32* %22 = getelementptr &([31 * i32]* %x)[i64 0][i64 16];
    i32* %23 = getelementptr &([31 * i32]* %x)[i64 0][i64 17];
    i32* %24 = getelementptr &([31 * i32]* %x)[i64 0][i64 18];
    i32* %25 = getelementptr &([31 * i32]* %x)[i64 0][i64 19];
    i32* %26 = getelementptr &([31 * i32]* %x)[i64 0][i64 20];
    i32* %27 = getelementptr &([31 * i32]* %x)[i64 0][i64 21];
    i32* %28 = getelementptr &([31 * i32]* %x)[i64 0][i64 22];
    i32* %29 = getelementptr &([31 * i32]* %x)[i64 0][i64 23];
    i32* %30 = getelementptr &([31 * i32]* %x)[i64 0][i64 24];
    i32* %31 = getelementptr &([31 * i32]* %x)[i64 0][i64 25];
    i32* %32 = getelementptr &([31 * i32]* %x)[i64 0][i64 26];
    i32* %33 = getelementptr &([31 * i32]* %x)[i64 0][i64 27];
    i32* %34 = getelementptr &([31 * i32]* %x)[i64 0][i64 28];
    i32* %35 = getelementptr &([31 * i32]* %x)[i64 0][i64 29];
    i32* %36 = getelementptr &([31 * i32]* %x)[i64 0][i64 30];
    ubr ^while.header;
^while.header:
    i32 %37 = phi [^while.body2, i32 %70] [^entry, i32 %3];
    i32 %38 = phi [^while.body2, i32 %71] [^entry, i32 %4];
    i1 %39 = scmp gt i32 %37, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %40 = add i32 %37, i32 -1;
    store i32* %n with i32 %40;
    i32 %41 = load i32* %0;
    i32 %42 = mul i32 %41, i32 %38;
    i32 %43 = load i32* %1;
    i32 %44 = add i32 %42, i32 %43;
    i32 %45 = load i32* %2;
    i32 %46 = srem i32 %44, i32 %45;
    i1 %47 = scmp lt i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^if.then, ^b1;
^b:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 10000, i32* %5);
    ret i32 0;
^if.then:
    i32 %48 = add i32 %45, i32 %46;
    ubr ^b1;
^b1:
    i32 %49 = phi [^if.then, i32 %48] [^while.body, i32 %46];
    i32 %50 = srem i32 %49, i32 300000;
    i32 %51 = load i32* %0;
    i32 %52 = mul i32 %51, i32 %49;
    i32 %53 = load i32* %1;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = load i32* %2;
    i32 %56 = srem i32 %54, i32 %55;
    store i32* %staticvalue with i32 %56;
    i1 %57 = scmp lt i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %58 = add i32 %55, i32 %56;
    store i32* %staticvalue with i32 %58;
    ubr ^b2;
^b2:
    i32 %59 = phi [^if.then1, i32 %58] [^b1, i32 %56];
    i32 %60 = srem i32 %59, i32 2;
    store i32* %17 with i32 0;
    store i32* %18 with i32 0;
    store i32* %19 with i32 0;
    store i32* %20 with i32 0;
    store i32* %21 with i32 0;
    store i32* %22 with i32 0;
    store i32* %23 with i32 0;
    store i32* %24 with i32 0;
    store i32* %25 with i32 0;
    store i32* %26 with i32 0;
    store i32* %27 with i32 0;
    store i32* %28 with i32 0;
    store i32* %29 with i32 0;
    store i32* %30 with i32 0;
    store i32* %31 with i32 0;
    store i32* %32 with i32 0;
    store i32* %33 with i32 0;
    store i32* %34 with i32 0;
    store i32* %35 with i32 0;
    store i32* %36 with i32 0;
    store i32* %6 with i32 1;
    store i32* %7 with i32 2;
    store i32* %8 with i32 4;
    store i32* %9 with i32 8;
    store i32* %10 with i32 16;
    store i32* %11 with i32 32;
    store i32* %12 with i32 64;
    store i32* %13 with i32 128;
    store i32* %14 with i32 256;
    store i32* %15 with i32 512;
    store i32* %16 with i32 1024;
    ubr ^while.header1;
^while.header1:
    i32 %61 = phi [^while.body1, i32 %63] [^b2, i32 10];
    i1 %62 = scmp lt i32 %61, i32 30;
    cbr i1 %62(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %63 = add i32 %61, i32 1;
    i32* %64 = getelementptr &([31 * i32]* %x)[i64 0][i32 %63];
    i32* %65 = getelementptr &(i32* %64)[i64 -1];
    i32 %66 = load i32* %65;
    i32 %67 = mul i32 %66, i32 2;
    store i32* %64 with i32 %67;
    ubr ^while.header1;
^b3:
    i32 %68 = sdiv i32 %50, i32 30;
    i1 %69 = scmp gt i32 %68, i32 9999;
    cbr i1 %69(prob = 0.5), ^while.body2, ^b4;
^while.body2:
    i32 %70 = phi [^b5, i32 %83] [^b3, i32 %40];
    i32 %71 = phi [^b5, i32 %84] [^b3, i32 %59];
    ubr ^while.header;
^b4:
    i32* %72 = getelementptr &(i32* %5)[i32 %68];
    i32 %73 = load i32* %72;
    i32 %74 = srem i32 %50, i32 30;
    i32* %75 = getelementptr &([31 * i32]* %x)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = sdiv i32 %73, i32 %76;
    i32 %78 = srem i32 %77, i32 2;
    i1 %79 = scmp neq i32 %78, i32 %60;
    cbr i1 %79(prob = 0.5), ^if.then2, ^b5;
^b5:
    i32 %80 = phi [^indirect1, i32 %99] [^indirect, i32 %94] [^if.then6, i32 %98] [^b4, i32 %73];
    i32 %81 = phi [^indirect, i32 %87] [^indirect1, i32 %87] [^if.then6, i32 %97] [^b4, i32 0];
    i32 %82 = add i32 %81, i32 %80;
    store i32* %72 with i32 %82;
    i32 %83 = load i32* %n;
    i32 %84 = load i32* %staticvalue;
    ubr ^while.body2;
^if.then2:
    i1 %85 = scmp eq i32 %78, i32 0;
    cbr i1 %85(prob = 0.5), ^if.then3, ^b6;
^if.then3:
    i1 %86 = scmp eq i32 %60, i32 1;
    cbr i1 %86(prob = 0.5), ^if.then4, ^b6;
^b6:
    i32 %87 = phi [^if.then3, i32 0] [^if.then4, i32 %93] [^if.then2, i32 0];
    i32 %88 = load i32* %72;
    i32 %89 = load i32* %75;
    i32 %90 = sdiv i32 %88, i32 %89;
    i32 %91 = srem i32 %90, i32 2;
    i1 %92 = scmp eq i32 %91, i32 1;
    cbr i1 %92(prob = 0.5), ^if.then5, ^indirect;
^if.then4:
    i32 %93 = load i32* %75;
    ubr ^b6;
^indirect:
    i32 %94 = load i32* %72;
    ubr ^b5;
^if.then5:
    i1 %95 = scmp eq i32 %60, i32 0;
    cbr i1 %95(prob = 0.5), ^if.then6, ^indirect1;
^if.then6:
    i32 %96 = load i32* %75;
    i32 %97 = sub i32 %87, i32 %96;
    i32 %98 = load i32* %72;
    ubr ^b5;
^indirect1:
    i32 %99 = load i32* %72;
    ubr ^b5;
}
