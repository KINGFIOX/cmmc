internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 1016);
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %2 = icmp sgt i32 %0, i32 3;
    cbr i1 %2(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^scalar.header, i32 %10] [^while.body1, i32 %76];
    call (i32) -> void @stoptime(i32 1031);
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^super.header1:
    i32 %4 = add i32 %0, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 15;
    i32 %6 = add i32 %0, i32 -18;
    cbr i1 %5(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %7 = phi [^super.header, i32 0] [^scalar.final, i32 %81];
    i32 %8 = phi [^super.header, i32 0] [^scalar.final, i32 %82];
    i32 %9 = phi [^super.header, i32 0] [^scalar.final, i32 %80];
    i32 %10 = phi [^super.header, i32 undef] [^scalar.final, i32 %81];
    i1 %11 = icmp sgt i32 %0, i32 %8;
    cbr i1 %11(prob = 0.75), ^while.body1, ^b;
  ^while.body:
    i32 %12 = phi [^super.header1, i32 0] [^while.body, i32 %64];
    i32 %13 = phi [^super.header1, i32 0] [^while.body, i32 %62];
    i32 %14 = phi [^super.header1, i32 0] [^while.body, i32 %61];
    i32 %15 = add i32 %12, i32 %14;
    i32 %16 = srem i32 %15, i32 2147385347;
    i32 %17 = add i32 %12, i32 1;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = srem i32 %18, i32 2147385347;
    i32 %20 = add i32 %12, i32 2;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = srem i32 %21, i32 2147385347;
    i32 %23 = add i32 %12, i32 3;
    i32 %24 = add i32 %22, i32 %23;
    i32 %25 = srem i32 %24, i32 2147385347;
    i32 %26 = add i32 %12, i32 4;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = srem i32 %27, i32 2147385347;
    i32 %29 = add i32 %12, i32 5;
    i32 %30 = add i32 %28, i32 %29;
    i32 %31 = srem i32 %30, i32 2147385347;
    i32 %32 = add i32 %12, i32 6;
    i32 %33 = add i32 %31, i32 %32;
    i32 %34 = srem i32 %33, i32 2147385347;
    i32 %35 = add i32 %12, i32 7;
    i32 %36 = add i32 %34, i32 %35;
    i32 %37 = srem i32 %36, i32 2147385347;
    i32 %38 = add i32 %12, i32 8;
    i32 %39 = add i32 %37, i32 %38;
    i32 %40 = srem i32 %39, i32 2147385347;
    i32 %41 = add i32 %12, i32 9;
    i32 %42 = add i32 %40, i32 %41;
    i32 %43 = srem i32 %42, i32 2147385347;
    i32 %44 = add i32 %12, i32 10;
    i32 %45 = add i32 %43, i32 %44;
    i32 %46 = srem i32 %45, i32 2147385347;
    i32 %47 = add i32 %12, i32 11;
    i32 %48 = add i32 %46, i32 %47;
    i32 %49 = srem i32 %48, i32 2147385347;
    i32 %50 = add i32 %12, i32 12;
    i32 %51 = add i32 %49, i32 %50;
    i32 %52 = srem i32 %51, i32 2147385347;
    i32 %53 = add i32 %12, i32 13;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = srem i32 %54, i32 2147385347;
    i32 %56 = add i32 %12, i32 14;
    i32 %57 = add i32 %55, i32 %56;
    i32 %58 = srem i32 %57, i32 2147385347;
    i32 %59 = add i32 %12, i32 15;
    i32 %60 = add i32 %58, i32 %59;
    i32 %61 = srem i32 %60, i32 2147385347;
    i32 %62 = add i32 %13, i32 16;
    i1 %63 = icmp sgt i32 %6, i32 %62;
    i32 %64 = add i32 %12, i32 16;
    cbr i1 %63(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %65 = phi [^super.header1, i32 0] [^while.body, i32 %64];
    i32 %66 = phi [^super.header1, i32 0] [^while.body, i32 %62];
    i32 %67 = phi [^super.header1, i32 0] [^while.body, i32 %61];
    i32 %68 = phi [^super.header1, i32 undef] [^while.body, i32 %64];
    i32 %69 = phi [^super.header1, i32 undef] [^while.body, i32 %61];
    i32 %70 = phi [^super.header1, i32 undef] [^while.body, i32 %62];
    i1 %71 = icmp sgt i32 %4, i32 %66;
    cbr i1 %71(prob = 0.75), ^while.body2, ^scalar.final;
  ^while.body1 {scalar}:
    i32 %72 = phi [^scalar.header, i32 %9] [^while.body1, i32 %79];
    i32 %73 = phi [^scalar.header, i32 %8] [^while.body1, i32 %77];
    i32 %74 = phi [^scalar.header, i32 %7] [^while.body1, i32 %76];
    i32 %75 = add i32 %72, i32 %74;
    i32 %76 = srem i32 %75, i32 2147385347;
    i32 %77 = add i32 %73, i32 1;
    i1 %78 = icmp sgt i32 %0, i32 %77;
    i32 %79 = add i32 %72, i32 1;
    cbr i1 %78(prob = 0.75), ^while.body1, ^b;
  ^scalar.final:
    i32 %80 = phi [^scalar.header1, i32 %68] [^while.body2, i32 %99];
    i32 %81 = phi [^scalar.header1, i32 %69] [^while.body2, i32 %96];
    i32 %82 = phi [^scalar.header1, i32 %70] [^while.body2, i32 %97];
    ubr ^scalar.header;
  ^while.body2 {scalar}:
    i32 %83 = phi [^scalar.header1, i32 %67] [^while.body2, i32 %96];
    i32 %84 = phi [^scalar.header1, i32 %66] [^while.body2, i32 %97];
    i32 %85 = phi [^scalar.header1, i32 %65] [^while.body2, i32 %99];
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = srem i32 %86, i32 2147385347;
    i32 %88 = add i32 %85, i32 1;
    i32 %89 = add i32 %87, i32 %88;
    i32 %90 = srem i32 %89, i32 2147385347;
    i32 %91 = add i32 %85, i32 2;
    i32 %92 = add i32 %90, i32 %91;
    i32 %93 = srem i32 %92, i32 2147385347;
    i32 %94 = add i32 %85, i32 3;
    i32 %95 = add i32 %93, i32 %94;
    i32 %96 = srem i32 %95, i32 2147385347;
    i32 %97 = add i32 %84, i32 4;
    i1 %98 = icmp sgt i32 %4, i32 %97;
    i32 %99 = add i32 %85, i32 4;
    cbr i1 %98(prob = 0.75), ^while.body2, ^scalar.final;
}
