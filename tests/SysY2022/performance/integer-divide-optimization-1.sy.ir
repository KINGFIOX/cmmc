internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 1016);
    i1 %1 = icmp sgt i32 %0, i32 0;
    [20 * i8]* %2 = ptrcast [20 * i8]* @cmmc_parallel_body_payload_0 to [20 * i8]*;
    i32* %3 = ptradd [20 * i8]* %2, i32 0;
    i32* %4 = ptradd [20 * i8]* %2, i32 4;
    i32* %5 = ptradd [20 * i8]* %2, i32 8;
    i32* %6 = ptradd [20 * i8]* %2, i32 12;
    i32* %7 = ptradd [20 * i8]* %2, i32 16;
    i8* %8 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %18];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %15];
    store i32* %3 with i32 0;
    store i32* %4 with i32 0;
    store i32* %5 with i32 0;
    store i32* %6 with i32 %9;
    store i32* %7 with i32 1000;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 300, i8* %8);
    i32 %12 = load i32* %3;
    i32 %13 = sdiv i32 %12, i32 300;
    i32 %14 = add i32 %11, i32 %13;
    i32 %15 = srem i32 %14, i32 2147385347;
    i32 %16 = add i32 %10, i32 1;
    i1 %17 = icmp sgt i32 %0, i32 %16;
    i32 %18 = add i32 %9, i32 2;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %19 = phi [^entry, i32 0] [^while.body, i32 %15];
    call (i32) -> void @stoptime(i32 1031);
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmcReduceAddI32(i32*, i32) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [20 * i8]* %2 = ptrcast [20 * i8]* @cmmc_parallel_body_payload_0 to [20 * i8]*;
    i32* %3 = ptradd [20 * i8]* %2, i32 12;
    i32 %4 = load i32* %3;
    i32 %5 = sdiv i32 %4, i32 2;
    i32 %6 = mul i32 %5, i32 1000;
    i32* %7 = ptradd [20 * i8]* %2, i32 16;
    i32 %8 = load i32* %7;
    i32 %9 = sdiv i32 %6, i32 %8;
    i32 %10 = add i32 %0, i32 3;
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %12 = add i32 %0, i32 15;
    i32 %13 = add i32 %1, i32 -3;
    i1 %14 = icmp slt i32 %12, i32 %13;
    cbr i1 %14(prob = 0.941176), ^super.header1, ^scalar.header1;
  ^scalar.header:
    i32 %15 = phi [^b, i32 0] [^scalar.final1, i32 %37];
    i32 %16 = phi [^b, i32 %0] [^scalar.final1, i32 %38];
    i32 %17 = phi [^b, i32 undef] [^scalar.final1, i32 %37];
    i1 %18 = icmp sgt i32 %1, i32 %16;
    cbr i1 %18(prob = 0.75), ^b1, ^scalar.final;
  ^super.header1:
    i32 %19 = add i32 %0, i32 63;
    i32 %20 = add i32 %1, i32 -18;
    i1 %21 = icmp slt i32 %19, i32 %20;
    cbr i1 %21(prob = 0.941176), ^prebody, ^scalar.header2;
  ^scalar.header1:
    i32 %22 = phi [^super.header, i32 %0] [^scalar.final2, i32 %51];
    i32 %23 = phi [^super.header, i32 0] [^scalar.final2, i32 %50];
    i32 %24 = phi [^super.header, i32 undef] [^scalar.final2, i32 %50];
    i32 %25 = phi [^super.header, i32 undef] [^scalar.final2, i32 %51];
    i1 %26 = icmp sgt i32 %13, i32 %22;
    cbr i1 %26(prob = 0.75), ^prebody1, ^scalar.final1;
  ^b1 {scalar}:
    i32 %27 = phi [^scalar.header, i32 %16] [^b1, i32 %29];
    i32 %28 = phi [^scalar.header, i32 %15] [^b1, i32 %31];
    i32 %29 = add i32 %27, i32 1;
    i1 %30 = icmp sgt i32 %1, i32 %29;
    i32 %31 = add i32 %9, i32 %28;
    cbr i1 %30(prob = 0.75), ^b1, ^scalar.final;
  ^scalar.final:
    i32 %32 = phi [^scalar.header, i32 %17] [^b1, i32 %31];
    i32* %33 = ptradd [20 * i8]* %2, i32 0;
    call (i32*, i32) -> void @cmmcReduceAddI32(i32* %33, i32 %32);
    ret;
  ^prebody:
    i32 %34 = mul i32 %9, i32 64;
    i32 %35 = add i32 %1, i32 -81;
    ubr ^b2;
  ^prebody1:
    i32 %36 = mul i32 %9, i32 4;
    ubr ^b3;
  ^scalar.final1:
    i32 %37 = phi [^scalar.header1, i32 %24] [^b3, i32 %56];
    i32 %38 = phi [^scalar.header1, i32 %25] [^b3, i32 %54];
    ubr ^scalar.header;
  ^scalar.header2:
    i32 %39 = phi [^super.header1, i32 0] [^b2, i32 %49];
    i32 %40 = phi [^super.header1, i32 %0] [^b2, i32 %47];
    i32 %41 = phi [^super.header1, i32 undef] [^b2, i32 %49];
    i32 %42 = phi [^super.header1, i32 undef] [^b2, i32 %47];
    i1 %43 = icmp sgt i32 %20, i32 %40;
    cbr i1 %43(prob = 0.75), ^prebody2, ^scalar.final2;
  ^prebody2:
    i32 %44 = mul i32 %9, i32 16;
    ubr ^b4;
  ^b2:
    i32 %45 = phi [^prebody, i32 0] [^b2, i32 %49];
    i32 %46 = phi [^prebody, i32 %0] [^b2, i32 %47];
    i32 %47 = add i32 %46, i32 64;
    i1 %48 = icmp sgt i32 %35, i32 %47;
    i32 %49 = add i32 %34, i32 %45;
    cbr i1 %48(prob = 0.941176), ^b2, ^scalar.header2;
  ^scalar.final2:
    i32 %50 = phi [^scalar.header2, i32 %41] [^b4, i32 %61];
    i32 %51 = phi [^scalar.header2, i32 %42] [^b4, i32 %59];
    ubr ^scalar.header1;
  ^b3 {scalar}:
    i32 %52 = phi [^prebody1, i32 %23] [^b3, i32 %56];
    i32 %53 = phi [^prebody1, i32 %22] [^b3, i32 %54];
    i32 %54 = add i32 %53, i32 4;
    i1 %55 = icmp sgt i32 %13, i32 %54;
    i32 %56 = add i32 %36, i32 %52;
    cbr i1 %55(prob = 0.75), ^b3, ^scalar.final1;
  ^b4 {scalar}:
    i32 %57 = phi [^prebody2, i32 %40] [^b4, i32 %59];
    i32 %58 = phi [^prebody2, i32 %39] [^b4, i32 %61];
    i32 %59 = add i32 %57, i32 16;
    i1 %60 = icmp sgt i32 %20, i32 %59;
    i32 %61 = add i32 %44, i32 %58;
    cbr i1 %60(prob = 0.75), ^b4, ^scalar.final2;
}
internal [20 * i8]* @cmmc_parallel_body_payload_0, align 8;
