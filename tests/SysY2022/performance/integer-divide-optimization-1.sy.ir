internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 1016);
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %2 = phi [^entry, i32 0] [^indirect, i32 %4];
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %41];
    i32 %4 = add i32 %2, i32 4;
    i1 %5 = scmp lt i32 %4, i32 %0;
    cbr i1 %5(prob = 0.89), ^indirect, ^super.header1;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^indirect2, i32 %90];
    call (i32) -> void @stoptime(i32 1031);
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^indirect:
    i32 %7 = mul i32 %2, i32 2;
    i32 %8 = sdiv i32 %7, i32 2;
    i32 %9 = mul i32 %8, i32 1000;
    i32 %10 = sdiv i32 %9, i32 1000;
    i32 %11 = mul i32 %10, i32 300;
    i32 %12 = sdiv i32 %11, i32 300;
    i32 %13 = add i32 %3, i32 %12;
    i32 %14 = srem i32 %13, i32 2147385347;
    i32 %15 = add i32 %2, i32 1;
    i32 %16 = mul i32 %15, i32 2;
    i32 %17 = sdiv i32 %16, i32 2;
    i32 %18 = mul i32 %17, i32 1000;
    i32 %19 = sdiv i32 %18, i32 1000;
    i32 %20 = mul i32 %19, i32 300;
    i32 %21 = sdiv i32 %20, i32 300;
    i32 %22 = add i32 %14, i32 %21;
    i32 %23 = srem i32 %22, i32 2147385347;
    i32 %24 = add i32 %2, i32 2;
    i32 %25 = mul i32 %24, i32 2;
    i32 %26 = sdiv i32 %25, i32 2;
    i32 %27 = mul i32 %26, i32 1000;
    i32 %28 = sdiv i32 %27, i32 1000;
    i32 %29 = mul i32 %28, i32 300;
    i32 %30 = sdiv i32 %29, i32 300;
    i32 %31 = add i32 %23, i32 %30;
    i32 %32 = srem i32 %31, i32 2147385347;
    i32 %33 = add i32 %2, i32 3;
    i32 %34 = mul i32 %33, i32 2;
    i32 %35 = sdiv i32 %34, i32 2;
    i32 %36 = mul i32 %35, i32 1000;
    i32 %37 = sdiv i32 %36, i32 1000;
    i32 %38 = mul i32 %37, i32 300;
    i32 %39 = sdiv i32 %38, i32 300;
    i32 %40 = add i32 %32, i32 %39;
    i32 %41 = srem i32 %40, i32 2147385347;
    ubr ^super.header;
  ^super.header1:
    i32 %42 = phi [^super.header, i32 %2] [^indirect1, i32 %44];
    i32 %43 = phi [^super.header, i32 %3] [^indirect1, i32 %80];
    i32 %44 = add i32 %42, i32 4;
    i1 %45 = scmp lt i32 %44, i32 %0;
    cbr i1 %45(prob = 0.89), ^indirect1, ^indirect2;
  ^indirect1:
    i32 %46 = mul i32 %42, i32 2;
    i32 %47 = sdiv i32 %46, i32 2;
    i32 %48 = mul i32 %47, i32 1000;
    i32 %49 = sdiv i32 %48, i32 1000;
    i32 %50 = mul i32 %49, i32 300;
    i32 %51 = sdiv i32 %50, i32 300;
    i32 %52 = add i32 %43, i32 %51;
    i32 %53 = srem i32 %52, i32 2147385347;
    i32 %54 = add i32 %42, i32 1;
    i32 %55 = mul i32 %54, i32 2;
    i32 %56 = sdiv i32 %55, i32 2;
    i32 %57 = mul i32 %56, i32 1000;
    i32 %58 = sdiv i32 %57, i32 1000;
    i32 %59 = mul i32 %58, i32 300;
    i32 %60 = sdiv i32 %59, i32 300;
    i32 %61 = add i32 %53, i32 %60;
    i32 %62 = srem i32 %61, i32 2147385347;
    i32 %63 = add i32 %42, i32 2;
    i32 %64 = mul i32 %63, i32 2;
    i32 %65 = sdiv i32 %64, i32 2;
    i32 %66 = mul i32 %65, i32 1000;
    i32 %67 = sdiv i32 %66, i32 1000;
    i32 %68 = mul i32 %67, i32 300;
    i32 %69 = sdiv i32 %68, i32 300;
    i32 %70 = add i32 %62, i32 %69;
    i32 %71 = srem i32 %70, i32 2147385347;
    i32 %72 = add i32 %42, i32 3;
    i32 %73 = mul i32 %72, i32 2;
    i32 %74 = sdiv i32 %73, i32 2;
    i32 %75 = mul i32 %74, i32 1000;
    i32 %76 = sdiv i32 %75, i32 1000;
    i32 %77 = mul i32 %76, i32 300;
    i32 %78 = sdiv i32 %77, i32 300;
    i32 %79 = add i32 %71, i32 %78;
    i32 %80 = srem i32 %79, i32 2147385347;
    ubr ^super.header1;
  ^indirect2:
    i32 %81 = phi [^super.header1, i32 %42] [^indirect2, i32 %91];
    i32 %82 = phi [^super.header1, i32 %43] [^indirect2, i32 %90];
    i32 %83 = mul i32 %81, i32 2;
    i32 %84 = sdiv i32 %83, i32 2;
    i32 %85 = mul i32 %84, i32 1000;
    i32 %86 = sdiv i32 %85, i32 1000;
    i32 %87 = mul i32 %86, i32 300;
    i32 %88 = sdiv i32 %87, i32 300;
    i32 %89 = add i32 %82, i32 %88;
    i32 %90 = srem i32 %89, i32 2147385347;
    i32 %91 = add i32 %81, i32 1;
    i1 %92 = scmp lt i32 %91, i32 %0;
    cbr i1 %92(prob = 0.97), ^indirect2, ^b;
}
