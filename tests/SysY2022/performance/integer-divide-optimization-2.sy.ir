internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 1016);
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^super.header i32 %0, i32 0, i32 0 ], [ ^b i32 0 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg):
    call (i32) -> void @stoptime(i32 1031);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg2, i32 2;
    i32 %1 = sdiv i32 %0, i32 2;
    i32 %2 = mul i32 %1, i32 1000;
    i32 %3 = sdiv i32 %2, i32 1000;
    i32 %4 = mul i32 %3, i32 300;
    i32 %5 = sdiv i32 %4, i32 300;
    i32 %6 = add i32 %arg1, i32 %5;
    i32 %7 = srem i32 %6, i32 2147385347;
    i32 %8 = add i32 %arg2, i32 1;
    i32 %9 = mul i32 %8, i32 2;
    i32 %10 = sdiv i32 %9, i32 2;
    i32 %11 = mul i32 %10, i32 1000;
    i32 %12 = sdiv i32 %11, i32 1000;
    i32 %13 = mul i32 %12, i32 300;
    i32 %14 = sdiv i32 %13, i32 300;
    i32 %15 = add i32 %7, i32 %14;
    i32 %16 = srem i32 %15, i32 2147385347;
    i32 %17 = add i32 %arg2, i32 2;
    i32 %18 = mul i32 %17, i32 2;
    i32 %19 = sdiv i32 %18, i32 2;
    i32 %20 = mul i32 %19, i32 1000;
    i32 %21 = sdiv i32 %20, i32 1000;
    i32 %22 = mul i32 %21, i32 300;
    i32 %23 = sdiv i32 %22, i32 300;
    i32 %24 = add i32 %16, i32 %23;
    i32 %25 = srem i32 %24, i32 2147385347;
    i32 %26 = add i32 %arg2, i32 3;
    i32 %27 = mul i32 %26, i32 2;
    i32 %28 = sdiv i32 %27, i32 2;
    i32 %29 = mul i32 %28, i32 1000;
    i32 %30 = sdiv i32 %29, i32 1000;
    i32 %31 = mul i32 %30, i32 300;
    i32 %32 = sdiv i32 %31, i32 300;
    i32 %33 = add i32 %25, i32 %32;
    i32 %34 = srem i32 %33, i32 2147385347;
    i32 %35 = add i32 %arg2, i32 4;
    i32 %36 = mul i32 %35, i32 2;
    i32 %37 = sdiv i32 %36, i32 2;
    i32 %38 = mul i32 %37, i32 1000;
    i32 %39 = sdiv i32 %38, i32 1000;
    i32 %40 = mul i32 %39, i32 300;
    i32 %41 = sdiv i32 %40, i32 300;
    i32 %42 = add i32 %34, i32 %41;
    i32 %43 = srem i32 %42, i32 2147385347;
    i32 %44 = add i32 %arg2, i32 5;
    i32 %45 = mul i32 %44, i32 2;
    i32 %46 = sdiv i32 %45, i32 2;
    i32 %47 = mul i32 %46, i32 1000;
    i32 %48 = sdiv i32 %47, i32 1000;
    i32 %49 = mul i32 %48, i32 300;
    i32 %50 = sdiv i32 %49, i32 300;
    i32 %51 = add i32 %43, i32 %50;
    i32 %52 = srem i32 %51, i32 2147385347;
    i32 %53 = add i32 %arg2, i32 6;
    i32 %54 = mul i32 %53, i32 2;
    i32 %55 = sdiv i32 %54, i32 2;
    i32 %56 = mul i32 %55, i32 1000;
    i32 %57 = sdiv i32 %56, i32 1000;
    i32 %58 = mul i32 %57, i32 300;
    i32 %59 = sdiv i32 %58, i32 300;
    i32 %60 = add i32 %52, i32 %59;
    i32 %61 = srem i32 %60, i32 2147385347;
    i32 %62 = add i32 %arg2, i32 7;
    i32 %63 = mul i32 %62, i32 2;
    i32 %64 = sdiv i32 %63, i32 2;
    i32 %65 = mul i32 %64, i32 1000;
    i32 %66 = sdiv i32 %65, i32 1000;
    i32 %67 = mul i32 %66, i32 300;
    i32 %68 = sdiv i32 %67, i32 300;
    i32 %69 = add i32 %61, i32 %68;
    i32 %70 = srem i32 %69, i32 2147385347;
    i32 %71 = add i32 %arg2, i32 8;
    i32 %72 = mul i32 %71, i32 2;
    i32 %73 = sdiv i32 %72, i32 2;
    i32 %74 = mul i32 %73, i32 1000;
    i32 %75 = sdiv i32 %74, i32 1000;
    i32 %76 = mul i32 %75, i32 300;
    i32 %77 = sdiv i32 %76, i32 300;
    i32 %78 = add i32 %70, i32 %77;
    i32 %79 = srem i32 %78, i32 2147385347;
    i32 %80 = add i32 %arg2, i32 9;
    i32 %81 = mul i32 %80, i32 2;
    i32 %82 = sdiv i32 %81, i32 2;
    i32 %83 = mul i32 %82, i32 1000;
    i32 %84 = sdiv i32 %83, i32 1000;
    i32 %85 = mul i32 %84, i32 300;
    i32 %86 = sdiv i32 %85, i32 300;
    i32 %87 = add i32 %79, i32 %86;
    i32 %88 = srem i32 %87, i32 2147385347;
    i32 %89 = add i32 %arg2, i32 10;
    i32 %90 = mul i32 %89, i32 2;
    i32 %91 = sdiv i32 %90, i32 2;
    i32 %92 = mul i32 %91, i32 1000;
    i32 %93 = sdiv i32 %92, i32 1000;
    i32 %94 = mul i32 %93, i32 300;
    i32 %95 = sdiv i32 %94, i32 300;
    i32 %96 = add i32 %88, i32 %95;
    i32 %97 = srem i32 %96, i32 2147385347;
    i32 %98 = add i32 %arg2, i32 11;
    i32 %99 = mul i32 %98, i32 2;
    i32 %100 = sdiv i32 %99, i32 2;
    i32 %101 = mul i32 %100, i32 1000;
    i32 %102 = sdiv i32 %101, i32 1000;
    i32 %103 = mul i32 %102, i32 300;
    i32 %104 = sdiv i32 %103, i32 300;
    i32 %105 = add i32 %97, i32 %104;
    i32 %106 = srem i32 %105, i32 2147385347;
    i32 %107 = add i32 %arg2, i32 12;
    i32 %108 = mul i32 %107, i32 2;
    i32 %109 = sdiv i32 %108, i32 2;
    i32 %110 = mul i32 %109, i32 1000;
    i32 %111 = sdiv i32 %110, i32 1000;
    i32 %112 = mul i32 %111, i32 300;
    i32 %113 = sdiv i32 %112, i32 300;
    i32 %114 = add i32 %106, i32 %113;
    i32 %115 = srem i32 %114, i32 2147385347;
    i32 %116 = add i32 %arg2, i32 13;
    i32 %117 = mul i32 %116, i32 2;
    i32 %118 = sdiv i32 %117, i32 2;
    i32 %119 = mul i32 %118, i32 1000;
    i32 %120 = sdiv i32 %119, i32 1000;
    i32 %121 = mul i32 %120, i32 300;
    i32 %122 = sdiv i32 %121, i32 300;
    i32 %123 = add i32 %115, i32 %122;
    i32 %124 = srem i32 %123, i32 2147385347;
    i32 %125 = add i32 %arg2, i32 14;
    i32 %126 = mul i32 %125, i32 2;
    i32 %127 = sdiv i32 %126, i32 2;
    i32 %128 = mul i32 %127, i32 1000;
    i32 %129 = sdiv i32 %128, i32 1000;
    i32 %130 = mul i32 %129, i32 300;
    i32 %131 = sdiv i32 %130, i32 300;
    i32 %132 = add i32 %124, i32 %131;
    i32 %133 = srem i32 %132, i32 2147385347;
    i32 %134 = add i32 %arg2, i32 15;
    i32 %135 = mul i32 %134, i32 2;
    i32 %136 = sdiv i32 %135, i32 2;
    i32 %137 = mul i32 %136, i32 1000;
    i32 %138 = sdiv i32 %137, i32 1000;
    i32 %139 = mul i32 %138, i32 300;
    i32 %140 = sdiv i32 %139, i32 300;
    i32 %141 = add i32 %133, i32 %140;
    i32 %142 = srem i32 %141, i32 2147385347;
    i32 %143 = add i32 %arg2, i32 16;
    i1 %144 = scmp lt i32 %143, i32 %arg;
    cbr i1 %144(prob = 0.97), [ ^super.header i32 %arg, i32 %142, i32 %143 ], [ ^b i32 %142 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg2, i32 2;
    i32 %1 = sdiv i32 %0, i32 2;
    i32 %2 = mul i32 %1, i32 1000;
    i32 %3 = sdiv i32 %2, i32 1000;
    i32 %4 = mul i32 %3, i32 300;
    i32 %5 = sdiv i32 %4, i32 300;
    i32 %6 = add i32 %5, i32 %arg1;
    i32 %7 = srem i32 %6, i32 2147385347;
    i32 %8 = add i32 %arg2, i32 1;
    i1 %9 = scmp lt i32 %8, i32 %arg;
    cbr i1 %9(prob = 0.97), [ ^while.body1 i32 %arg, i32 %7, i32 %8 ], [ ^b i32 %7 ];
}
