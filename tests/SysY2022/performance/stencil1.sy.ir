internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1048576 * i32]* %0 = ptrcast [1048576 * i32]* @image_in to [1048576 * i32]*;
    i32* %1 = getelementptr &([1048576 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    [1048576 * i32]* %3 = ptrcast [1048576 * i32]* @image_out to [1048576 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 1] [^b, i32 %91];
    i1 %5 = icmp slt i32 %4, i32 1023;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %6 = phi [^while.header, i32 1] [^while.body, i32 %34];
    i32 %7 = add i32 %6, i32 -1;
    i32 %8 = mul i32 %7, i32 1024;
    i32 %9 = add i32 %8, i32 -1;
    i32 %10 = add i32 %4, i32 %9;
    i32* %11 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %10];
    i32 %12 = mul i32 %6, i32 1024;
    i32 %13 = add i32 %4, i32 %12;
    i32* %14 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %13];
    i32 %15 = load i32* %14;
    i32 %16 = load i32* %11;
    i32 %17 = mul i32 %15, i32 8;
    i32 %18 = sub i32 %17, i32 %16;
    i32 %19 = add i32 %4, i32 %8;
    i32* %20 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %18, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32 %26 = add i32 %12, i32 -1;
    i32 %27 = add i32 %4, i32 %26;
    i32* %28 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = sub i32 %25, i32 %29;
    i32* %31 = getelementptr &(i32* %28)[i64 2];
    i32 %32 = load i32* %31;
    i32 %33 = sub i32 %30, i32 %32;
    i32 %34 = add i32 %6, i32 1;
    i32 %35 = mul i32 %34, i32 1024;
    i32 %36 = add i32 %35, i32 -1;
    i32 %37 = add i32 %4, i32 %36;
    i32* %38 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = sub i32 %33, i32 %39;
    i32 %41 = add i32 %4, i32 %35;
    i32* %42 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32 %44 = sub i32 %40, i32 %43;
    i32* %45 = getelementptr &(i32* %42)[i64 1];
    i32 %46 = load i32* %45;
    i32 %47 = sub i32 %44, i32 %46;
    i32 %48 = smin i32 %47, i32 255;
    i32 %49 = smax i32 %48, i32 0;
    i32* %50 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %13];
    store i32* %50 with i32 %49;
    i1 %51 = icmp slt i32 %34, i32 1023;
    cbr i1 %51(prob = 1), ^while.body, ^b;
  ^while.body1:
    i32 %52 = phi [^while.header, i32 0] [^while.body1, i32 %84];
    i32 %53 = mul i32 %52, i32 1024;
    i32* %54 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %53];
    store i32* %56 with i32 %55;
    i32 %57 = add i32 %52, i32 1;
    i32 %58 = mul i32 %57, i32 1024;
    i32 %59 = add i32 %58, i32 -1;
    i32* %60 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %59];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %59];
    store i32* %62 with i32 %61;
    i32* %63 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %58];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %58];
    store i32* %65 with i32 %64;
    i32 %66 = add i32 %52, i32 2;
    i32 %67 = mul i32 %66, i32 1024;
    i32 %68 = add i32 %67, i32 -1;
    i32* %69 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %68];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %67];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %67];
    store i32* %74 with i32 %73;
    i32 %75 = add i32 %52, i32 3;
    i32 %76 = mul i32 %75, i32 1024;
    i32 %77 = add i32 %76, i32 -1;
    i32* %78 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %77];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %77];
    store i32* %80 with i32 %79;
    i32* %81 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %76];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %76];
    store i32* %83 with i32 %82;
    i32 %84 = add i32 %52, i32 4;
    i32 %85 = mul i32 %84, i32 1024;
    i32 %86 = add i32 %85, i32 -1;
    i32* %87 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %86];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %86];
    store i32* %89 with i32 %88;
    i1 %90 = icmp slt i32 %84, i32 1024;
    cbr i1 %90(prob = 1), ^while.body1, ^while.body2;
  ^b:
    i32 %91 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %92 = phi [^while.body1, i32 0] [^while.body2, i32 %117];
    i32* %93 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %92];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1047552];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1047552];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %93)[i64 1];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %95)[i64 1];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %93)[i64 1047553];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %95)[i64 1047553];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %93)[i64 2];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %95)[i64 2];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %93)[i64 1047554];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %95)[i64 1047554];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %93)[i64 3];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %95)[i64 3];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %93)[i64 1047555];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %95)[i64 1047555];
    store i32* %116 with i32 %115;
    i32 %117 = add i32 %92, i32 4;
    i1 %118 = icmp slt i32 %117, i32 1024;
    cbr i1 %118(prob = 1), ^while.body2, ^b1;
  ^b1:
    call (i32) -> void @stoptime(i32 59);
    i32* %119 = getelementptr &([1048576 * i32]* %3)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %119);
    ret i32 %2;
}
