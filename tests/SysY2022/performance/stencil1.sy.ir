internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b, i32 %15] [^entry, i32 1];
    i32 %3 = phi [^b, i32 %8] [^entry, i32 %1];
    i32 %4 = phi [^b, i32 %15] [^entry, i32 1];
    i1 %5 = scmp lt i32 %4, i32 1023;
    cbr i1 %5(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %6 = phi [^while.header, i32 1] [^b1, i32 %34];
    i32 %7 = phi [^while.header, i32 %2] [^b1, i32 %7];
    i32 %8 = phi [^while.header, i32 %3] [^b1, i32 %8];
    i32 %9 = phi [^while.header, i32 1] [^b1, i32 %34];
    i1 %10 = scmp lt i32 %9, i32 1023;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 0] [^while.body, i32 %20];
    i32 %12 = phi [^while.header, i32 %3] [^while.body, i32 %12];
    i32 %13 = phi [^while.header, i32 0] [^while.body, i32 %20];
    i1 %14 = scmp lt i32 %13, i32 1024;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header3;
^b:
    i32 %15 = add i32 %7, i32 1;
    ubr ^while.header;
^while.body:
    i32 %16 = mul i32 %11, i32 1024;
    i32* %17 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %16];
    i32* %18 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %16];
    i32 %19 = load i32* %18;
    store i32* %17 with i32 %19;
    i32 %20 = add i32 %11, i32 1;
    i32 %21 = mul i32 %20, i32 1024;
    i32 %22 = add i32 %21, i32 -1;
    i32* %23 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %22];
    i32* %24 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %22];
    i32 %25 = load i32* %24;
    store i32* %23 with i32 %25;
    ubr ^while.header2;
^while.body1:
    i32 %26 = add i32 %6, i32 -1;
    i32 %27 = mul i32 %26, i32 1024;
    i32 %28 = add i32 %7, i32 %27;
    i32 %29 = add i32 %7, i32 -1;
    i32 %30 = add i32 %29, i32 %27;
    i32 %31 = mul i32 %6, i32 1024;
    i32 %32 = add i32 %7, i32 %31;
    i32 %33 = add i32 %29, i32 %31;
    i32 %34 = add i32 %6, i32 1;
    i32 %35 = mul i32 %34, i32 1024;
    i32 %36 = add i32 %7, i32 %35;
    i32 %37 = add i32 %29, i32 %35;
    i32* %38 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %32];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %39, i32 8;
    i32* %41 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %30];
    i32 %42 = load i32* %41;
    i32 %43 = sub i32 %40, i32 %42;
    i32* %44 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %28];
    i32 %45 = load i32* %44;
    i32 %46 = sub i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %44)[i64 1];
    i32 %48 = load i32* %47;
    i32 %49 = sub i32 %46, i32 %48;
    i32* %50 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %33];
    i32 %51 = load i32* %50;
    i32 %52 = sub i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %50)[i64 2];
    i32 %54 = load i32* %53;
    i32 %55 = sub i32 %52, i32 %54;
    i32* %56 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %37];
    i32 %57 = load i32* %56;
    i32 %58 = sub i32 %55, i32 %57;
    i32* %59 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %36];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %59)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = sub i32 %61, i32 %63;
    i32* %65 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %32];
    i1 %66 = scmp lt i32 %64, i32 0;
    cbr i1 %66(prob = 0.5), ^b1, ^if.else;
^while.header3:
    i32 %67 = phi [^while.header2, i32 0] [^while.body2, i32 %78];
    i32 %68 = phi [^while.header2, i32 %12] [^while.body2, i32 %68];
    i32 %69 = phi [^while.header2, i32 0] [^while.body2, i32 %78];
    i1 %70 = scmp lt i32 %69, i32 1024;
    cbr i1 %70(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %71 = phi [^while.body1, i32 0] [^if.else, i32 255] [^indirect, i32 %64];
    store i32* %65 with i32 %71;
    ubr ^while.header1;
^while.body2:
    i32* %72 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %67];
    i32* %73 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %67];
    i32 %74 = load i32* %73;
    store i32* %72 with i32 %74;
    i32* %75 = getelementptr &(i32* %72)[i64 1047552];
    i32* %76 = getelementptr &(i32* %73)[i64 1047552];
    i32 %77 = load i32* %76;
    store i32* %75 with i32 %77;
    i32 %78 = add i32 %67, i32 1;
    ubr ^while.header3;
^if.else:
    i1 %79 = scmp gt i32 %64, i32 255;
    cbr i1 %79(prob = 0.5), ^b1, ^indirect;
^b2:
    call (i32) -> void @stoptime(i32 59);
    i32* %80 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %80);
    ret i32 %68;
^indirect:
    ubr ^b1;
}
