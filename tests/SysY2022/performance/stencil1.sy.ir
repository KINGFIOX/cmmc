internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1048576 * i32]* %0 = ptrcast [1048576 * i32]* @image_in to [1048576 * i32]*;
    i32* %1 = getelementptr &([1048576 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    [1048576 * i32]* %3 = ptrcast [1048576 * i32]* @image_out to [1048576 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 1] [^b, i32 %89];
    i1 %5 = scmp lt i32 %4, i32 1023;
    i32 %6 = add i32 %4, i32 -1;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %7 = phi [^while.header, i32 1] [^while.body, i32 %33];
    i32 %8 = mul i32 %7, i32 1024;
    i32 %9 = add i32 %4, i32 %8;
    i32* %10 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = mul i32 %11, i32 8;
    i32 %13 = add i32 %7, i32 -1;
    i32 %14 = mul i32 %13, i32 1024;
    i32 %15 = add i32 %6, i32 %14;
    i32* %16 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i32 %18 = sub i32 %12, i32 %17;
    i32 %19 = add i32 %4, i32 %14;
    i32* %20 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %18, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32 %26 = add i32 %6, i32 %8;
    i32* %27 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %26];
    i32 %28 = load i32* %27;
    i32 %29 = sub i32 %25, i32 %28;
    i32* %30 = getelementptr &(i32* %27)[i64 2];
    i32 %31 = load i32* %30;
    i32 %32 = sub i32 %29, i32 %31;
    i32 %33 = add i32 %7, i32 1;
    i32 %34 = mul i32 %33, i32 1024;
    i32 %35 = add i32 %6, i32 %34;
    i32* %36 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = sub i32 %32, i32 %37;
    i32 %39 = add i32 %4, i32 %34;
    i32* %40 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %39];
    i32 %41 = load i32* %40;
    i32 %42 = sub i32 %38, i32 %41;
    i32* %43 = getelementptr &(i32* %40)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = sub i32 %42, i32 %44;
    i32 %46 = smin i32 %45, i32 255;
    i32 %47 = smax i32 %46, i32 0;
    i32* %48 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %9];
    store i32* %48 with i32 %47;
    i1 %49 = scmp lt i32 %33, i32 1023;
    cbr i1 %49(prob = 1), ^while.body, ^b;
  ^while.body1:
    i32 %50 = phi [^while.header, i32 0] [^while.body1, i32 %82];
    i32 %51 = mul i32 %50, i32 1024;
    i32* %52 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %51];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %51];
    store i32* %54 with i32 %53;
    i32 %55 = add i32 %50, i32 1;
    i32 %56 = mul i32 %55, i32 1024;
    i32 %57 = add i32 %56, i32 -1;
    i32* %58 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %57];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %57];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %56];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %56];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %50, i32 2;
    i32 %65 = mul i32 %64, i32 1024;
    i32 %66 = add i32 %65, i32 -1;
    i32* %67 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %66];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %66];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %65];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %65];
    store i32* %72 with i32 %71;
    i32 %73 = add i32 %50, i32 3;
    i32 %74 = mul i32 %73, i32 1024;
    i32 %75 = add i32 %74, i32 -1;
    i32* %76 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %75];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %75];
    store i32* %78 with i32 %77;
    i32* %79 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %74];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %74];
    store i32* %81 with i32 %80;
    i32 %82 = add i32 %50, i32 4;
    i32 %83 = mul i32 %82, i32 1024;
    i32 %84 = add i32 %83, i32 -1;
    i32* %85 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %84];
    store i32* %87 with i32 %86;
    i1 %88 = scmp lt i32 %82, i32 1024;
    cbr i1 %88(prob = 1), ^while.body1, ^while.body2;
  ^b:
    i32 %89 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %90 = phi [^while.body1, i32 0] [^while.body2, i32 %115];
    i32* %91 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %90];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1047552];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1047552];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 1];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %93)[i64 1];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 1047553];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %93)[i64 1047553];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %91)[i64 2];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %93)[i64 2];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %91)[i64 1047554];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %93)[i64 1047554];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %91)[i64 3];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %93)[i64 3];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %91)[i64 1047555];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %93)[i64 1047555];
    store i32* %114 with i32 %113;
    i32 %115 = add i32 %90, i32 4;
    i1 %116 = scmp lt i32 %115, i32 1024;
    cbr i1 %116(prob = 1), ^while.body2, ^b1;
  ^b1:
    call (i32) -> void @stoptime(i32 59);
    i32* %117 = getelementptr &([1048576 * i32]* %3)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %117);
    ret i32 %2;
}
