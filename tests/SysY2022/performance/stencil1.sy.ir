internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1048576 * i32]* %0 = ptrcast [1048576 * i32]* @image_in to [1048576 * i32]*;
    i32* %1 = getelementptr &([1048576 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 23);
    [1048576 * i32]* %3 = ptrcast [1048576 * i32]* @image_out to [1048576 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 1] [^b, i32 %90];
    i1 %5 = scmp lt i32 %4, i32 1023;
    i32 %6 = add i32 %4, i32 -1;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %7 = phi [^while.header, i32 1] [^while.body, i32 %33];
    i32 %8 = mul i32 %7, i32 1024;
    i32 %9 = add i32 %4, i32 %8;
    i32* %10 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = mul i32 %11, i32 8;
    i32 %13 = add i32 %7, i32 -1;
    i32 %14 = mul i32 %13, i32 1024;
    i32 %15 = add i32 %6, i32 %14;
    i32* %16 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i32 %18 = sub i32 %12, i32 %17;
    i32 %19 = add i32 %4, i32 %14;
    i32* %20 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %18, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32 %26 = add i32 %6, i32 %8;
    i32* %27 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %26];
    i32 %28 = load i32* %27;
    i32 %29 = sub i32 %25, i32 %28;
    i32* %30 = getelementptr &(i32* %27)[i64 2];
    i32 %31 = load i32* %30;
    i32 %32 = sub i32 %29, i32 %31;
    i32 %33 = add i32 %7, i32 1;
    i32 %34 = mul i32 %33, i32 1024;
    i32 %35 = add i32 %6, i32 %34;
    i32* %36 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = sub i32 %32, i32 %37;
    i32 %39 = add i32 %4, i32 %34;
    i32* %40 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %39];
    i32 %41 = load i32* %40;
    i32 %42 = sub i32 %38, i32 %41;
    i32* %43 = getelementptr &(i32* %40)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = sub i32 %42, i32 %44;
    i1 %46 = scmp lt i32 %45, i32 0;
    i32 %47 = smin i32 %45, i32 255;
    i32 %48 = select i1 %46 ? i32 0 : i32 %47;
    i32* %49 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %9];
    store i32* %49 with i32 %48;
    i1 %50 = scmp lt i32 %33, i32 1023;
    cbr i1 %50(prob = 1), ^while.body, ^b;
  ^while.body1:
    i32 %51 = phi [^while.header, i32 0] [^while.body1, i32 %83];
    i32 %52 = mul i32 %51, i32 1024;
    i32* %53 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %52];
    store i32* %55 with i32 %54;
    i32 %56 = add i32 %51, i32 1;
    i32 %57 = mul i32 %56, i32 1024;
    i32 %58 = add i32 %57, i32 -1;
    i32* %59 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %58];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %57];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %57];
    store i32* %64 with i32 %63;
    i32 %65 = add i32 %51, i32 2;
    i32 %66 = mul i32 %65, i32 1024;
    i32 %67 = add i32 %66, i32 -1;
    i32* %68 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %67];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %66];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %66];
    store i32* %73 with i32 %72;
    i32 %74 = add i32 %51, i32 3;
    i32 %75 = mul i32 %74, i32 1024;
    i32 %76 = add i32 %75, i32 -1;
    i32* %77 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %76];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %75];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %75];
    store i32* %82 with i32 %81;
    i32 %83 = add i32 %51, i32 4;
    i32 %84 = mul i32 %83, i32 1024;
    i32 %85 = add i32 %84, i32 -1;
    i32* %86 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %85];
    store i32* %88 with i32 %87;
    i1 %89 = scmp lt i32 %83, i32 1024;
    cbr i1 %89(prob = 1), ^while.body1, ^while.body2;
  ^b:
    i32 %90 = add i32 %4, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %91 = phi [^while.body1, i32 0] [^while.body2, i32 %116];
    i32* %92 = getelementptr &([1048576 * i32]* %0)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &([1048576 * i32]* %3)[i64 0][i32 %91];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1047552];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %94)[i64 1047552];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %92)[i64 1];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %94)[i64 1];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %92)[i64 1047553];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %94)[i64 1047553];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %92)[i64 2];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %94)[i64 2];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %92)[i64 1047554];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %94)[i64 1047554];
    store i32* %109 with i32 %108;
    i32* %110 = getelementptr &(i32* %92)[i64 3];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %94)[i64 3];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %92)[i64 1047555];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %94)[i64 1047555];
    store i32* %115 with i32 %114;
    i32 %116 = add i32 %91, i32 4;
    i1 %117 = scmp lt i32 %116, i32 1024;
    cbr i1 %117(prob = 1), ^while.body2, ^b1;
  ^b1:
    call (i32) -> void @stoptime(i32 59);
    i32* %118 = getelementptr &([1048576 * i32]* %3)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %118);
    ret i32 %2;
}
