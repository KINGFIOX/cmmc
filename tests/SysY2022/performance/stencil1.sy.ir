internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b, i32 %9] [^entry, i32 1];
    i1 %3 = scmp lt i32 %2, i32 1023;
    i32 %4 = add i32 %2, i32 -1;
    cbr i1 %3(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %5 = phi [^while.header, i32 1] [^b1, i32 %27];
    i1 %6 = scmp lt i32 %5, i32 1023;
    cbr i1 %6(prob = 0.97), ^while.body1, ^b;
^while.header2:
    i32 %7 = phi [^while.header, i32 0] [^while.body, i32 %14];
    i1 %8 = scmp lt i32 %7, i32 1024;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.header3;
^b:
    i32 %9 = add i32 %2, i32 1;
    ubr ^while.header;
^while.body:
    i32 %10 = mul i32 %7, i32 1024;
    i32* %11 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %10];
    i32* %12 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %10];
    i32 %13 = load i32* %12;
    store i32* %11 with i32 %13;
    i32 %14 = add i32 %7, i32 1;
    i32 %15 = mul i32 %14, i32 1024;
    i32 %16 = add i32 %15, i32 -1;
    i32* %17 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %16];
    i32* %18 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %16];
    i32 %19 = load i32* %18;
    store i32* %17 with i32 %19;
    ubr ^while.header2;
^while.body1:
    i32 %20 = add i32 %5, i32 -1;
    i32 %21 = mul i32 %20, i32 1024;
    i32 %22 = add i32 %2, i32 %21;
    i32 %23 = add i32 %4, i32 %21;
    i32 %24 = mul i32 %5, i32 1024;
    i32 %25 = add i32 %2, i32 %24;
    i32 %26 = add i32 %4, i32 %24;
    i32 %27 = add i32 %5, i32 1;
    i32 %28 = mul i32 %27, i32 1024;
    i32 %29 = add i32 %2, i32 %28;
    i32 %30 = add i32 %4, i32 %28;
    i32* %31 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %25];
    i32 %32 = load i32* %31;
    i32 %33 = mul i32 %32, i32 8;
    i32* %34 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %23];
    i32 %35 = load i32* %34;
    i32 %36 = sub i32 %33, i32 %35;
    i32* %37 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %22];
    i32 %38 = load i32* %37;
    i32 %39 = sub i32 %36, i32 %38;
    i32* %40 = getelementptr &(i32* %37)[i64 1];
    i32 %41 = load i32* %40;
    i32 %42 = sub i32 %39, i32 %41;
    i32* %43 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %26];
    i32 %44 = load i32* %43;
    i32 %45 = sub i32 %42, i32 %44;
    i32* %46 = getelementptr &(i32* %43)[i64 2];
    i32 %47 = load i32* %46;
    i32 %48 = sub i32 %45, i32 %47;
    i32* %49 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %30];
    i32 %50 = load i32* %49;
    i32 %51 = sub i32 %48, i32 %50;
    i32* %52 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %29];
    i32 %53 = load i32* %52;
    i32 %54 = sub i32 %51, i32 %53;
    i32* %55 = getelementptr &(i32* %52)[i64 1];
    i32 %56 = load i32* %55;
    i32 %57 = sub i32 %54, i32 %56;
    i32* %58 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %25];
    i1 %59 = scmp lt i32 %57, i32 0;
    cbr i1 %59(prob = 0.5), ^b1, ^if.else;
^while.header3:
    i32 %60 = phi [^while.header2, i32 0] [^while.body2, i32 %69];
    i1 %61 = scmp lt i32 %60, i32 1024;
    cbr i1 %61(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %62 = phi [^while.body1, i32 0] [^if.else, i32 255] [^indirect, i32 %57];
    store i32* %58 with i32 %62;
    ubr ^while.header1;
^while.body2:
    i32* %63 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i32 %60];
    i32* %64 = getelementptr &([1048576 * i32]* @image_in)[i64 0][i32 %60];
    i32 %65 = load i32* %64;
    store i32* %63 with i32 %65;
    i32* %66 = getelementptr &(i32* %63)[i64 1047552];
    i32* %67 = getelementptr &(i32* %64)[i64 1047552];
    i32 %68 = load i32* %67;
    store i32* %66 with i32 %68;
    i32 %69 = add i32 %60, i32 1;
    ubr ^while.header3;
^if.else:
    i1 %70 = scmp gt i32 %57, i32 255;
    cbr i1 %70(prob = 0.5), ^b1, ^indirect;
^b2:
    call (i32) -> void @stoptime(i32 59);
    i32* %71 = getelementptr &([1048576 * i32]* @image_out)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %71);
    ret i32 %1;
^indirect:
    ubr ^b1;
}
