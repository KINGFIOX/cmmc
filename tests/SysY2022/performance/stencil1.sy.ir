internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1048576 * i32]* @image_in;
internal [1048576 * i32]* @image_out;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %0 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 23);
    ubr [ ^while.body i32 1, i32 1, i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg, i32 1;
    i32 %1 = mul i32 %0, i32 1024;
    i32 %2 = add i32 %1, i32 %arg1;
    i32 %3 = sub i32 %2, i32 1;
    i32 %4 = add i32 %2, i32 1;
    i32 %5 = mul i32 %arg, i32 1024;
    i32 %6 = add i32 %5, i32 %arg1;
    i32 %7 = sub i32 %6, i32 1;
    i32 %8 = add i32 %6, i32 1;
    i32 %9 = add i32 %arg, i32 1;
    i32 %10 = mul i32 %9, i32 1024;
    i32 %11 = add i32 %10, i32 %arg1;
    i32 %12 = sub i32 %11, i32 1;
    i32 %13 = add i32 %11, i32 1;
    i32* %14 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %6];
    i32 %15 = load i32* %14;
    i32 %16 = mul i32 8, i32 %15;
    i32* %17 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %3];
    i32 %18 = load i32* %17;
    i32 %19 = sub i32 %16, i32 %18;
    i32* %20 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %2];
    i32 %21 = load i32* %20;
    i32 %22 = sub i32 %19, i32 %21;
    i32* %23 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %4];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32* %26 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %7];
    i32 %27 = load i32* %26;
    i32 %28 = sub i32 %25, i32 %27;
    i32* %29 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %8];
    i32 %30 = load i32* %29;
    i32 %31 = sub i32 %28, i32 %30;
    i32* %32 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %12];
    i32 %33 = load i32* %32;
    i32 %34 = sub i32 %31, i32 %33;
    i32* %35 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %11];
    i32 %36 = load i32* %35;
    i32 %37 = sub i32 %34, i32 %36;
    i32* %38 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %13];
    i32 %39 = load i32* %38;
    i32 %40 = sub i32 %37, i32 %39;
    i32* %41 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 %6];
    i1 %42 = scmp lt i32 %40, i32 0;
    cbr i1 %42, [ ^while.body1 i32 0, i32 %9, i32* %41, i32 %arg1, i32 %arg2 ], [ ^indirect i32 %40, i32 %9, i32* %41, i32 %arg1, i32 %arg2, i32 %40 ];
^while.body1(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg2 with i32 %arg;
    i1 %0 = scmp lt i32 %arg1, i32 1023;
    cbr i1 %0, [ ^while.body i32 %arg1, i32 %arg3, i32 %arg4 ], [ ^b i32 %arg3, i32 %arg4 ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp gt i32 %arg, i32 255;
    cbr i1 %0, [ ^while.body1 i32 255, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^indirect1 i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^b(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1023;
    cbr i1 %1, [ ^while.body i32 1, i32 %0, i32 %arg1 ], [ ^while.body2 i32 0, i32 %arg1 ];
^indirect1(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg1 with i32 %arg4;
    i1 %0 = scmp lt i32 %arg, i32 1023;
    cbr i1 %0, [ ^while.body i32 %arg, i32 %arg2, i32 %arg3 ], [ ^b i32 %arg2, i32 %arg3 ];
^while.body2(i32 %arg, i32 %arg1):
    i32 %0 = mul i32 %arg, i32 1024;
    i32* %1 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 %0];
    i32* %2 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %0];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %arg, i32 1;
    i32 %5 = mul i32 %4, i32 1024;
    i32 %6 = sub i32 %5, i32 1;
    i32* %7 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 %6];
    i32* %8 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %6];
    i32 %9 = load i32* %8;
    store i32* %7 with i32 %9;
    i1 %10 = scmp lt i32 %4, i32 1024;
    cbr i1 %10, [ ^while.body2 i32 %4, i32 %arg1 ], [ ^while.body3 i32 0, i32 %arg1 ];
^while.body3(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %arg];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg, i32 1047552;
    i32* %4 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 %3];
    i32* %5 = getelementptr &([1048576 * i32]* @image_in)[i32 0][i32 %3];
    i32 %6 = load i32* %5;
    store i32* %4 with i32 %6;
    i32 %7 = add i32 %arg, i32 1;
    i1 %8 = scmp lt i32 %7, i32 1024;
    cbr i1 %8, [ ^while.body3 i32 %7, i32 %arg1 ], [ ^b1 i32 %arg1 ];
^b1(i32 %arg):
    call (i32) -> void @stoptime(i32 59);
    i32* %0 = getelementptr &([1048576 * i32]* @image_out)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 1048576, i32* %0);
    ret i32 %arg;
}
