internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    i1 %4 = icmp sgt i32 %3, i32 0;
    i1 %5 = icmp sgt i32 %3, i32 8;
    i32 %6 = add i32 %2, i32 -9;
    [3000000 * i32]* %7 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %8 = getelementptr &([3000000 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    [3000000 * i32]* %10 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %11 = getelementptr &([3000000 * i32]* %10)[i64 0][i64 0];
    i32 %12 = call (i32*) -> i32 @getarray(i32* %11);
    [100010 * i32]* %13 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %14 = getelementptr &([100010 * i32]* %13)[i64 0][i64 0];
    i32 %15 = call (i32*) -> i32 @getarray(i32* %14);
    call (i32) -> void @starttime(i32 39);
    [100010 * i32]* %16 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %17 = getelementptr &([100010 * i32]* %16)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %18 = phi [^entry, i32 0] [^while.body9, i32 %79];
    cbr i1 %4(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %5(prob = 0.888889), ^while.body1, ^while.body2;
  ^while.header:
    i32 %19 = phi [^while.body, i32 0] [^while.body2, i32 0] [^b, i32 %36] [^while.body10, i32 %36];
    i1 %20 = icmp sgt i32 %3, i32 %19;
    cbr i1 %20(prob = 0.984615), ^while.body3, ^while.body4;
  ^while.body1:
    i32 %21 = phi [^super.header, i32 0] [^while.body1, i32 %30];
    i32* %22 = getelementptr &(i32* %17)[i32 %21];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %22)[i64 1];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %22)[i64 2];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %22)[i64 3];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %22)[i64 4];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %22)[i64 5];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %22)[i64 6];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %22)[i64 7];
    store i32* %29 with i32 0;
    i32 %30 = add i32 %21, i32 8;
    i1 %31 = icmp sgt i32 %6, i32 %30;
    cbr i1 %31(prob = 0.888889), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %32 = phi [^super.header, i32 0] [^while.body1, i32 %30] [^while.body2, i32 %34];
    i32* %33 = getelementptr &(i32* %17)[i32 %32];
    store i32* %33 with i32 0;
    i32 %34 = add i32 %32, i32 1;
    i1 %35 = icmp sgt i32 %3, i32 %34;
    cbr i1 %35(prob = 0.875), ^while.body2, ^while.header;
  ^while.body3:
    i32 %36 = add i32 %19, i32 1;
    i32* %37 = getelementptr &(i32* %1)[i32 %36];
    i32* %38 = getelementptr &(i32* %1)[i32 %19];
    i32 %39 = load i32* %38;
    i32 %40 = load i32* %37;
    i1 %41 = icmp slt i32 %39, i32 %40;
    i32* %42 = getelementptr &(i32* %14)[i32 %19];
    cbr i1 %41(prob = 0.984615), ^while.body5, ^b;
  ^while.body4:
    cbr i1 %4(prob = 0.984615), ^super.header1, ^while.header1;
  ^while.body5:
    i32 %43 = phi [^while.body3, i32 %39] [^while.body5, i32 %51];
    i32* %44 = getelementptr &(i32* %8)[i32 %43];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %17)[i32 %45];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %11)[i32 %43];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    store i32* %46 with i32 %50;
    i32 %51 = add i32 %43, i32 1;
    i1 %52 = icmp sgt i32 %40, i32 %51;
    cbr i1 %52(prob = 0.984615), ^while.body5, ^b;
  ^b:
    cbr i1 %41(prob = 0.984615), ^indirect, ^while.header;
  ^super.header1:
    cbr i1 %5(prob = 0.888889), ^while.body6, ^while.body7;
  ^while.header1:
    i32 %53 = phi [^while.body4, i32 0] [^while.body7, i32 0] [^b1, i32 %72] [^while.body12, i32 %72];
    i1 %54 = icmp sgt i32 %3, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body8, ^while.body9;
  ^indirect:
    i32 %55 = load i32* %42;
    i32 %56 = add i32 %55, i32 -1;
    ubr ^while.body10;
  ^while.body6:
    i32 %57 = phi [^super.header1, i32 0] [^while.body6, i32 %66];
    i32* %58 = getelementptr &(i32* %14)[i32 %57];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %58)[i64 1];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %58)[i64 2];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %58)[i64 3];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %58)[i64 4];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %58)[i64 5];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %58)[i64 6];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %58)[i64 7];
    store i32* %65 with i32 0;
    i32 %66 = add i32 %57, i32 8;
    i1 %67 = icmp sgt i32 %6, i32 %66;
    cbr i1 %67(prob = 0.888889), ^while.body6, ^while.body7;
  ^while.body7 {scalar}:
    i32 %68 = phi [^super.header1, i32 0] [^while.body6, i32 %66] [^while.body7, i32 %70];
    i32* %69 = getelementptr &(i32* %14)[i32 %68];
    store i32* %69 with i32 0;
    i32 %70 = add i32 %68, i32 1;
    i1 %71 = icmp sgt i32 %3, i32 %70;
    cbr i1 %71(prob = 0.875), ^while.body7, ^while.header1;
  ^while.body8:
    i32 %72 = add i32 %53, i32 1;
    i32* %73 = getelementptr &(i32* %1)[i32 %72];
    i32* %74 = getelementptr &(i32* %1)[i32 %53];
    i32 %75 = load i32* %74;
    i32 %76 = load i32* %73;
    i1 %77 = icmp slt i32 %75, i32 %76;
    i32* %78 = getelementptr &(i32* %17)[i32 %53];
    cbr i1 %77(prob = 0.984615), ^while.body11, ^b1;
  ^while.body9:
    i32 %79 = add i32 %18, i32 1;
    i1 %80 = icmp slt i32 %79, i32 100;
    cbr i1 %80(prob = 0.99), ^while.body, ^b2;
  ^while.body10:
    i32 %81 = phi [^indirect, i32 %39] [^while.body10, i32 %90];
    i32* %82 = getelementptr &(i32* %8)[i32 %81];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %17)[i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %11)[i32 %81];
    i32 %87 = load i32* %86;
    i32 %88 = mul i32 %56, i32 %87;
    i32 %89 = add i32 %85, i32 %88;
    store i32* %84 with i32 %89;
    i32 %90 = add i32 %81, i32 1;
    i1 %91 = icmp sgt i32 %40, i32 %90;
    cbr i1 %91(prob = 0.984615), ^while.body10, ^while.header;
  ^while.body11:
    i32 %92 = phi [^while.body8, i32 %75] [^while.body11, i32 %100];
    i32* %93 = getelementptr &(i32* %8)[i32 %92];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %14)[i32 %94];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %11)[i32 %92];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    store i32* %95 with i32 %99;
    i32 %100 = add i32 %92, i32 1;
    i1 %101 = icmp sgt i32 %76, i32 %100;
    cbr i1 %101(prob = 0.984615), ^while.body11, ^b1;
  ^b1:
    cbr i1 %77(prob = 0.984615), ^indirect1, ^while.header1;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %17);
    ret i32 0;
  ^indirect1:
    i32 %102 = load i32* %78;
    i32 %103 = add i32 %102, i32 -1;
    ubr ^while.body12;
  ^while.body12:
    i32 %104 = phi [^indirect1, i32 %75] [^while.body12, i32 %113];
    i32* %105 = getelementptr &(i32* %8)[i32 %104];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %14)[i32 %106];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %11)[i32 %104];
    i32 %110 = load i32* %109;
    i32 %111 = mul i32 %103, i32 %110;
    i32 %112 = add i32 %108, i32 %111;
    store i32* %107 with i32 %112;
    i32 %113 = add i32 %104, i32 1;
    i1 %114 = icmp sgt i32 %76, i32 %113;
    cbr i1 %114(prob = 0.984615), ^while.body12, ^while.header1;
}
