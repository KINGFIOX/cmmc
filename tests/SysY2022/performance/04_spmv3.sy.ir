internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    store i32* %n2 with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n2;
    call (i32) -> void @starttime(i32 39);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body8, i32 %76] [^entry, i32 %9];
    i32 %12 = phi [^while.body8, i32 %100] [^entry, i32 0];
    i1 %13 = scmp lt i32 %12, i32 100;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %n1 with i32 %11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^b:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %11, i32* %10);
    ret i32 0;
^while.header1:
    i32 %14 = phi [^while.body1, i32 %20] [^while.body, i32 %11];
    i32 %15 = phi [^while.body1, i32 %21] [^while.body, i32 %12];
    i32 %16 = phi [^while.body1, i32 %24] [^while.body, i32 0];
    i32 %17 = phi [^while.body1, i32 %23] [^while.body, i32 %11];
    i1 %18 = scmp lt i32 %16, i32 %17;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %19 = getelementptr &(i32* %10)[i32 %16];
    store i32* %19 with i32 0;
    i32 %20 = load i32* %n2;
    i32 %21 = load i32* %i2;
    i32 %22 = load i32* %i1;
    i32 %23 = load i32* %n1;
    i32 %24 = add i32 %22, i32 1;
    store i32* %i1 with i32 %24;
    ubr ^while.header1;
^b1:
    store i32* %i1 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %25 = phi [^b4, i32 %67] [^b1, i32 %14];
    i32 %26 = phi [^b4, i32 %68] [^b1, i32 %15];
    i32 %27 = phi [^b4, i32 %72] [^b1, i32 0];
    i32 %28 = phi [^b4, i32 %71] [^b1, i32 %17];
    i1 %29 = scmp lt i32 %27, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32* %30 = getelementptr &(i32* %0)[i32 %27];
    i32 %31 = load i32* %30;
    store i32* %j1 with i32 %31;
    ubr ^while.header3;
^while.body3:
    store i32* %n with i32 %25;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %32 = phi [^while.body4, i32 %53] [^while.body2, i32 %25];
    i32 %33 = phi [^while.body4, i32 %54] [^while.body2, i32 %26];
    i32 %34 = phi [^while.body4, i32 %58] [^while.body2, i32 %31];
    i32 %35 = phi [^while.body4, i32 %56] [^while.body2, i32 %27];
    i32 %36 = phi [^while.body4, i32 %57] [^while.body2, i32 %28];
    i32 %37 = add i32 %35, i32 1;
    i32* %38 = getelementptr &(i32* %0)[i32 %37];
    i32 %39 = load i32* %38;
    i1 %40 = scmp lt i32 %34, i32 %39;
    cbr i1 %40(prob = 0.97), ^while.body4, ^b2;
^while.header4:
    i32 %41 = phi [^while.body5, i32 %62] [^while.body3, i32 %25];
    i32 %42 = phi [^while.body5, i32 %63] [^while.body3, i32 %26];
    i32 %43 = phi [^while.body5, i32 %66] [^while.body3, i32 0];
    i32 %44 = phi [^while.body5, i32 %65] [^while.body3, i32 %25];
    i1 %45 = scmp lt i32 %43, i32 %44;
    cbr i1 %45(prob = 0.97), ^while.body5, ^b3;
^while.body4:
    i32* %46 = getelementptr &(i32* %3)[i32 %34];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %10)[i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %5)[i32 %34];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    store i32* %48 with i32 %52;
    i32 %53 = load i32* %n2;
    i32 %54 = load i32* %i2;
    i32 %55 = load i32* %j1;
    i32 %56 = load i32* %i1;
    i32 %57 = load i32* %n1;
    i32 %58 = add i32 %55, i32 1;
    store i32* %j1 with i32 %58;
    ubr ^while.header3;
^b2:
    i32* %59 = getelementptr &(i32* %0)[i32 %35];
    i32 %60 = load i32* %59;
    store i32* %j1 with i32 %60;
    ubr ^while.header5;
^while.body5:
    i32* %61 = getelementptr &(i32* %7)[i32 %43];
    store i32* %61 with i32 0;
    i32 %62 = load i32* %n2;
    i32 %63 = load i32* %i2;
    i32 %64 = load i32* %i;
    i32 %65 = load i32* %n;
    i32 %66 = add i32 %64, i32 1;
    store i32* %i with i32 %66;
    ubr ^while.header4;
^b3:
    store i32* %i with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %67 = phi [^while.body6, i32 %92] [^b2, i32 %32];
    i32 %68 = phi [^while.body6, i32 %93] [^b2, i32 %33];
    i32 %69 = phi [^while.body6, i32 %97] [^b2, i32 %60];
    i32 %70 = phi [^while.body6, i32 %95] [^b2, i32 %35];
    i32 %71 = phi [^while.body6, i32 %96] [^b2, i32 %36];
    i32 %72 = add i32 %70, i32 1;
    i32* %73 = getelementptr &(i32* %0)[i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = scmp lt i32 %69, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body6, ^b4;
^while.header6:
    i32 %76 = phi [^b6, i32 %125] [^b3, i32 %41];
    i32 %77 = phi [^b6, i32 %126] [^b3, i32 %42];
    i32 %78 = phi [^b6, i32 %130] [^b3, i32 0];
    i32 %79 = phi [^b6, i32 %129] [^b3, i32 %44];
    i1 %80 = scmp lt i32 %78, i32 %79;
    cbr i1 %80(prob = 0.97), ^while.body7, ^while.body8;
^while.body6:
    i32* %81 = getelementptr &(i32* %3)[i32 %69];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %10)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %5)[i32 %69];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %7)[i32 %70];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %88, i32 -1;
    i32 %90 = mul i32 %86, i32 %89;
    i32 %91 = add i32 %84, i32 %90;
    store i32* %83 with i32 %91;
    i32 %92 = load i32* %n2;
    i32 %93 = load i32* %i2;
    i32 %94 = load i32* %j1;
    i32 %95 = load i32* %i1;
    i32 %96 = load i32* %n1;
    i32 %97 = add i32 %94, i32 1;
    store i32* %j1 with i32 %97;
    ubr ^while.header5;
^b4:
    store i32* %i1 with i32 %72;
    ubr ^while.header2;
^while.body7:
    i32* %98 = getelementptr &(i32* %0)[i32 %78];
    i32 %99 = load i32* %98;
    store i32* %j with i32 %99;
    ubr ^while.header7;
^while.body8:
    i32 %100 = add i32 %77, i32 1;
    store i32* %i2 with i32 %100;
    ubr ^while.header;
^while.header7:
    i32 %101 = phi [^while.body9, i32 %117] [^while.body7, i32 %76];
    i32 %102 = phi [^while.body9, i32 %118] [^while.body7, i32 %77];
    i32 %103 = phi [^while.body9, i32 %122] [^while.body7, i32 %99];
    i32 %104 = phi [^while.body9, i32 %120] [^while.body7, i32 %78];
    i32 %105 = phi [^while.body9, i32 %121] [^while.body7, i32 %79];
    i32 %106 = add i32 %104, i32 1;
    i32* %107 = getelementptr &(i32* %0)[i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = scmp lt i32 %103, i32 %108;
    cbr i1 %109(prob = 0.97), ^while.body9, ^b5;
^while.body9:
    i32* %110 = getelementptr &(i32* %3)[i32 %103];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %7)[i32 %111];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %5)[i32 %103];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %113, i32 %115;
    store i32* %112 with i32 %116;
    i32 %117 = load i32* %n2;
    i32 %118 = load i32* %i2;
    i32 %119 = load i32* %j;
    i32 %120 = load i32* %i;
    i32 %121 = load i32* %n;
    i32 %122 = add i32 %119, i32 1;
    store i32* %j with i32 %122;
    ubr ^while.header7;
^b5:
    i32* %123 = getelementptr &(i32* %0)[i32 %104];
    i32 %124 = load i32* %123;
    store i32* %j with i32 %124;
    ubr ^while.header8;
^while.header8:
    i32 %125 = phi [^while.body10, i32 %145] [^b5, i32 %101];
    i32 %126 = phi [^while.body10, i32 %146] [^b5, i32 %102];
    i32 %127 = phi [^while.body10, i32 %150] [^b5, i32 %124];
    i32 %128 = phi [^while.body10, i32 %148] [^b5, i32 %104];
    i32 %129 = phi [^while.body10, i32 %149] [^b5, i32 %105];
    i32 %130 = add i32 %128, i32 1;
    i32* %131 = getelementptr &(i32* %0)[i32 %130];
    i32 %132 = load i32* %131;
    i1 %133 = scmp lt i32 %127, i32 %132;
    cbr i1 %133(prob = 0.97), ^while.body10, ^b6;
^while.body10:
    i32* %134 = getelementptr &(i32* %3)[i32 %127];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %7)[i32 %135];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %5)[i32 %127];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %10)[i32 %128];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %141, i32 -1;
    i32 %143 = mul i32 %139, i32 %142;
    i32 %144 = add i32 %137, i32 %143;
    store i32* %136 with i32 %144;
    i32 %145 = load i32* %n2;
    i32 %146 = load i32* %i2;
    i32 %147 = load i32* %j;
    i32 %148 = load i32* %i;
    i32 %149 = load i32* %n;
    i32 %150 = add i32 %147, i32 1;
    store i32* %j with i32 %150;
    ubr ^while.header8;
^b6:
    store i32* %i with i32 %130;
    ubr ^while.header6;
}
