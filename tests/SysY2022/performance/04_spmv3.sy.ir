internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    i32* %9 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %10 = scmp gt i32 %2, i32 0;
    ubr ^while.body;
^while.body:
    i32 %11 = phi [^entry, i32 0] [^while.body8, i32 %76];
    cbr i1 %10(prob = 0.97), ^while.body1, ^while.header;
^while.body1:
    i32 %12 = phi [^while.body, i32 0] [^while.body1, i32 %14];
    i32* %13 = getelementptr &(i32* %9)[i32 %12];
    store i32* %13 with i32 0;
    i32 %14 = add i32 %12, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %2;
    cbr i1 %15(prob = 0.97), ^while.body1, ^while.header;
^while.header:
    i32 %16 = phi [^while.body, i32 0] [^while.body1, i32 0] [^b, i32 %18] [^while.body6, i32 %18];
    i1 %17 = scmp lt i32 %16, i32 %2;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32 %18 = add i32 %16, i32 1;
    i32* %19 = getelementptr &(i32* %0)[i32 %18];
    i32* %20 = getelementptr &(i32* %7)[i32 %16];
    i32* %21 = getelementptr &(i32* %0)[i32 %16];
    i32 %22 = load i32* %21;
    i32 %23 = load i32* %19;
    i1 %24 = scmp lt i32 %22, i32 %23;
    cbr i1 %24(prob = 0.97), ^while.body4, ^b;
^while.body3:
    cbr i1 %10(prob = 0.97), ^while.body5, ^while.header1;
^while.body4:
    i32* %25 = getelementptr &(i32* %3)[i32 %22];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %9)[i32 %26];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %5)[i32 %22];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    store i32* %27 with i32 %31;
    i32 %32 = add i32 %22, i32 1;
    i1 %33 = scmp lt i32 %32, i32 %23;
    cbr i1 %33(prob = 0.97), ^indirect1, ^indirect;
^b:
    i32 %34 = phi [^while.body2, i32 %23] [^indirect, i32 %43];
    i32 %35 = load i32* %21;
    i1 %36 = scmp lt i32 %35, i32 %34;
    cbr i1 %36(prob = 0.97), ^while.body6, ^while.header;
^while.body5:
    i32 %37 = phi [^while.body3, i32 0] [^while.body5, i32 %39];
    i32* %38 = getelementptr &(i32* %7)[i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = scmp lt i32 %39, i32 %2;
    cbr i1 %40(prob = 0.97), ^while.body5, ^while.header1;
^while.header1:
    i32 %41 = phi [^while.body3, i32 0] [^while.body5, i32 0] [^b1, i32 %69] [^while.body10, i32 %69];
    i1 %42 = scmp lt i32 %41, i32 %2;
    cbr i1 %42(prob = 0.97), ^while.body7, ^while.body8;
^indirect:
    i32 %43 = load i32* %19;
    ubr ^b;
^indirect1:
    i32 %44 = phi [^while.body4, i32 %32] [^indirect1, i32 %53];
    i32 %45 = load i32* %19;
    i32* %46 = getelementptr &(i32* %3)[i32 %44];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %9)[i32 %47];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %5)[i32 %44];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    store i32* %48 with i32 %52;
    i32 %53 = add i32 %44, i32 1;
    i1 %54 = scmp lt i32 %53, i32 %45;
    cbr i1 %54(prob = 0.97), ^indirect1, ^indirect;
^while.body6:
    i32 %55 = phi [^b, i32 %35] [^while.body6, i32 %66];
    i32* %56 = getelementptr &(i32* %3)[i32 %55];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %9)[i32 %57];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %5)[i32 %55];
    i32 %61 = load i32* %60;
    i32 %62 = load i32* %20;
    i32 %63 = add i32 %62, i32 -1;
    i32 %64 = mul i32 %61, i32 %63;
    i32 %65 = add i32 %59, i32 %64;
    store i32* %58 with i32 %65;
    i32 %66 = add i32 %55, i32 1;
    i32 %67 = load i32* %19;
    i1 %68 = scmp lt i32 %66, i32 %67;
    cbr i1 %68(prob = 0.97), ^while.body6, ^while.header;
^while.body7:
    i32 %69 = add i32 %41, i32 1;
    i32* %70 = getelementptr &(i32* %0)[i32 %69];
    i32* %71 = getelementptr &(i32* %9)[i32 %41];
    i32* %72 = getelementptr &(i32* %0)[i32 %41];
    i32 %73 = load i32* %72;
    i32 %74 = load i32* %70;
    i1 %75 = scmp lt i32 %73, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body9, ^b1;
^while.body8:
    i32 %76 = add i32 %11, i32 1;
    i1 %77 = scmp lt i32 %76, i32 100;
    cbr i1 %77(prob = 0.99), ^while.body, ^b2;
^while.body9:
    i32* %78 = getelementptr &(i32* %3)[i32 %73];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %7)[i32 %79];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %5)[i32 %73];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    store i32* %80 with i32 %84;
    i32 %85 = add i32 %73, i32 1;
    i1 %86 = scmp lt i32 %85, i32 %74;
    cbr i1 %86(prob = 0.97), ^indirect3, ^indirect2;
^b1:
    i32 %87 = phi [^while.body7, i32 %74] [^indirect2, i32 %90];
    i32 %88 = load i32* %72;
    i1 %89 = scmp lt i32 %88, i32 %87;
    cbr i1 %89(prob = 0.97), ^while.body10, ^while.header1;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %9);
    ret i32 0;
^indirect2:
    i32 %90 = load i32* %70;
    ubr ^b1;
^indirect3:
    i32 %91 = phi [^while.body9, i32 %85] [^indirect3, i32 %100];
    i32 %92 = load i32* %70;
    i32* %93 = getelementptr &(i32* %3)[i32 %91];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %7)[i32 %94];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %5)[i32 %91];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    store i32* %95 with i32 %99;
    i32 %100 = add i32 %91, i32 1;
    i1 %101 = scmp lt i32 %100, i32 %92;
    cbr i1 %101(prob = 0.97), ^indirect3, ^indirect2;
^while.body10:
    i32 %102 = phi [^b1, i32 %88] [^while.body10, i32 %113];
    i32* %103 = getelementptr &(i32* %3)[i32 %102];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %7)[i32 %104];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %5)[i32 %102];
    i32 %108 = load i32* %107;
    i32 %109 = load i32* %71;
    i32 %110 = add i32 %109, i32 -1;
    i32 %111 = mul i32 %108, i32 %110;
    i32 %112 = add i32 %106, i32 %111;
    store i32* %105 with i32 %112;
    i32 %113 = add i32 %102, i32 1;
    i32 %114 = load i32* %70;
    i1 %115 = scmp lt i32 %113, i32 %114;
    cbr i1 %115(prob = 0.97), ^while.body10, ^while.header1;
}
