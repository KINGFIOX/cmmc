internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    i32* %9 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %10 = scmp gt i32 %2, i32 0;
    ubr ^while.body;
^while.body:
    i32 %11 = phi [^entry, i32 0] [^while.body11, i32 %142];
    cbr i1 %10(prob = 0.97), ^super.header, ^while.header;
^super.header:
    i32 %12 = phi [^while.body, i32 0] [^while.body1, i32 %13];
    i32 %13 = add i32 %12, i32 16;
    i1 %14 = scmp lt i32 %13, i32 %2;
    cbr i1 %14(prob = 0.67), ^while.body1, ^super.header1;
^while.header:
    i32 %15 = phi [^while.body, i32 0] [^b, i32 %36] [^while.body8, i32 %36] [^while.body9, i32 0];
    i1 %16 = scmp lt i32 %15, i32 %2;
    cbr i1 %16(prob = 0.97), ^while.body2, ^while.body3;
^while.body1:
    i32* %17 = getelementptr &(i32* %9)[i32 %12];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %17)[i64 1];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %17)[i64 2];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %17)[i64 3];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %17)[i64 4];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %17)[i64 5];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %17)[i64 6];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %17)[i64 7];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %17)[i64 8];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %17)[i64 9];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %17)[i64 10];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %17)[i64 11];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %17)[i64 12];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %17)[i64 13];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %17)[i64 14];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %17)[i64 15];
    store i32* %32 with i32 0;
    ubr ^super.header;
^super.header1:
    i32 %33 = phi [^super.header, i32 %12] [^while.body4, i32 %34];
    i32 %34 = add i32 %33, i32 16;
    i1 %35 = scmp lt i32 %34, i32 %2;
    cbr i1 %35(prob = 0.67), ^while.body4, ^super.header2;
^while.body2:
    i32 %36 = add i32 %15, i32 1;
    i32* %37 = getelementptr &(i32* %0)[i32 %36];
    i32* %38 = getelementptr &(i32* %0)[i32 %15];
    i32 %39 = load i32* %38;
    i32 %40 = load i32* %37;
    i1 %41 = scmp lt i32 %39, i32 %40;
    cbr i1 %41(prob = 0.97), ^while.body5, ^b;
^while.body3:
    cbr i1 %10(prob = 0.97), ^super.header3, ^while.header1;
^while.body4:
    i32* %42 = getelementptr &(i32* %9)[i32 %33];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %42)[i64 4];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %42)[i64 5];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %42)[i64 6];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %42)[i64 7];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %42)[i64 8];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %42)[i64 9];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %42)[i64 10];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %42)[i64 11];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %42)[i64 12];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %42)[i64 13];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %42)[i64 14];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %42)[i64 15];
    store i32* %57 with i32 0;
    ubr ^super.header1;
^while.body5:
    i32 %58 = phi [^while.body2, i32 %40] [^indirect, i32 %82];
    i32 %59 = phi [^while.body2, i32 %39] [^indirect, i32 %67];
    i32* %60 = getelementptr &(i32* %3)[i32 %59];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %9)[i32 %61];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %5)[i32 %59];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 %65;
    store i32* %62 with i32 %66;
    i32 %67 = add i32 %59, i32 1;
    i1 %68 = scmp lt i32 %67, i32 %58;
    cbr i1 %68(prob = 0.97), ^indirect, ^b;
^super.header2:
    i32 %69 = phi [^super.header1, i32 %33] [^while.body6, i32 %70];
    i32 %70 = add i32 %69, i32 16;
    i1 %71 = scmp lt i32 %70, i32 %2;
    cbr i1 %71(prob = 0.67), ^while.body6, ^while.body9;
^b:
    i32 %72 = load i32* %38;
    i32* %73 = getelementptr &(i32* %38)[i64 1];
    i32 %74 = load i32* %73;
    i1 %75 = scmp lt i32 %72, i32 %74;
    i32* %76 = getelementptr &(i32* %7)[i32 %15];
    cbr i1 %75(prob = 0.97), ^while.body8, ^while.header;
^super.header3:
    i32 %77 = phi [^while.body3, i32 0] [^while.body7, i32 %78];
    i32 %78 = add i32 %77, i32 16;
    i1 %79 = scmp lt i32 %78, i32 %2;
    cbr i1 %79(prob = 0.67), ^while.body7, ^super.header4;
^while.header1:
    i32 %80 = phi [^while.body3, i32 0] [^b1, i32 %136] [^while.body15, i32 %136] [^while.body16, i32 0];
    i1 %81 = scmp lt i32 %80, i32 %2;
    cbr i1 %81(prob = 0.97), ^while.body10, ^while.body11;
^indirect:
    i32 %82 = load i32* %37;
    ubr ^while.body5;
^while.body6:
    i32* %83 = getelementptr &(i32* %9)[i32 %69];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %83)[i64 1];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %83)[i64 2];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %83)[i64 3];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %83)[i64 4];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %83)[i64 5];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %83)[i64 6];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %83)[i64 7];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %83)[i64 8];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %83)[i64 9];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %83)[i64 10];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %83)[i64 11];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %83)[i64 12];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %83)[i64 13];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %83)[i64 14];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %83)[i64 15];
    store i32* %98 with i32 0;
    ubr ^super.header2;
^while.body7:
    i32* %99 = getelementptr &(i32* %7)[i32 %77];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %99)[i64 1];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %99)[i64 2];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %99)[i64 3];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %99)[i64 4];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %99)[i64 5];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %99)[i64 6];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %99)[i64 7];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %99)[i64 8];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %99)[i64 9];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %99)[i64 10];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %99)[i64 11];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %99)[i64 12];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %99)[i64 13];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %99)[i64 14];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %99)[i64 15];
    store i32* %114 with i32 0;
    ubr ^super.header3;
^while.body8:
    i32 %115 = phi [^b, i32 %74] [^indirect1, i32 %144];
    i32 %116 = phi [^b, i32 %72] [^indirect1, i32 %127];
    i32* %117 = getelementptr &(i32* %3)[i32 %116];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %9)[i32 %118];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %5)[i32 %116];
    i32 %122 = load i32* %121;
    i32 %123 = load i32* %76;
    i32 %124 = add i32 %123, i32 -1;
    i32 %125 = mul i32 %122, i32 %124;
    i32 %126 = add i32 %120, i32 %125;
    store i32* %119 with i32 %126;
    i32 %127 = add i32 %116, i32 1;
    i1 %128 = scmp lt i32 %127, i32 %115;
    cbr i1 %128(prob = 0.97), ^indirect1, ^while.header;
^while.body9:
    i32 %129 = phi [^super.header2, i32 %69] [^while.body9, i32 %131];
    i32* %130 = getelementptr &(i32* %9)[i32 %129];
    store i32* %130 with i32 0;
    i32 %131 = add i32 %129, i32 1;
    i1 %132 = scmp lt i32 %131, i32 %2;
    cbr i1 %132(prob = 0.97), ^while.body9, ^while.header;
^super.header4:
    i32 %133 = phi [^super.header3, i32 %77] [^while.body12, i32 %134];
    i32 %134 = add i32 %133, i32 16;
    i1 %135 = scmp lt i32 %134, i32 %2;
    cbr i1 %135(prob = 0.67), ^while.body12, ^super.header5;
^while.body10:
    i32 %136 = add i32 %80, i32 1;
    i32* %137 = getelementptr &(i32* %0)[i32 %136];
    i32* %138 = getelementptr &(i32* %0)[i32 %80];
    i32 %139 = load i32* %138;
    i32 %140 = load i32* %137;
    i1 %141 = scmp lt i32 %139, i32 %140;
    cbr i1 %141(prob = 0.97), ^while.body13, ^b1;
^while.body11:
    i32 %142 = add i32 %11, i32 1;
    i1 %143 = scmp lt i32 %142, i32 100;
    cbr i1 %143(prob = 0.99), ^while.body, ^b2;
^indirect1:
    i32 %144 = load i32* %73;
    ubr ^while.body8;
^while.body12:
    i32* %145 = getelementptr &(i32* %7)[i32 %133];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %145)[i64 1];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %145)[i64 2];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %145)[i64 3];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %145)[i64 4];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %145)[i64 5];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &(i32* %145)[i64 6];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %145)[i64 7];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %145)[i64 8];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %145)[i64 9];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %145)[i64 10];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %145)[i64 11];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %145)[i64 12];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %145)[i64 13];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &(i32* %145)[i64 14];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %145)[i64 15];
    store i32* %160 with i32 0;
    ubr ^super.header4;
^while.body13:
    i32 %161 = phi [^while.body10, i32 %140] [^indirect2, i32 %180];
    i32 %162 = phi [^while.body10, i32 %139] [^indirect2, i32 %170];
    i32* %163 = getelementptr &(i32* %3)[i32 %162];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %7)[i32 %164];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %5)[i32 %162];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %166, i32 %168;
    store i32* %165 with i32 %169;
    i32 %170 = add i32 %162, i32 1;
    i1 %171 = scmp lt i32 %170, i32 %161;
    cbr i1 %171(prob = 0.97), ^indirect2, ^b1;
^super.header5:
    i32 %172 = phi [^super.header4, i32 %133] [^while.body14, i32 %173];
    i32 %173 = add i32 %172, i32 16;
    i1 %174 = scmp lt i32 %173, i32 %2;
    cbr i1 %174(prob = 0.67), ^while.body14, ^while.body16;
^b1:
    i32 %175 = load i32* %138;
    i32* %176 = getelementptr &(i32* %138)[i64 1];
    i32 %177 = load i32* %176;
    i1 %178 = scmp lt i32 %175, i32 %177;
    i32* %179 = getelementptr &(i32* %9)[i32 %80];
    cbr i1 %178(prob = 0.97), ^while.body15, ^while.header1;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %9);
    ret i32 0;
^indirect2:
    i32 %180 = load i32* %137;
    ubr ^while.body13;
^while.body14:
    i32* %181 = getelementptr &(i32* %7)[i32 %172];
    store i32* %181 with i32 0;
    i32* %182 = getelementptr &(i32* %181)[i64 1];
    store i32* %182 with i32 0;
    i32* %183 = getelementptr &(i32* %181)[i64 2];
    store i32* %183 with i32 0;
    i32* %184 = getelementptr &(i32* %181)[i64 3];
    store i32* %184 with i32 0;
    i32* %185 = getelementptr &(i32* %181)[i64 4];
    store i32* %185 with i32 0;
    i32* %186 = getelementptr &(i32* %181)[i64 5];
    store i32* %186 with i32 0;
    i32* %187 = getelementptr &(i32* %181)[i64 6];
    store i32* %187 with i32 0;
    i32* %188 = getelementptr &(i32* %181)[i64 7];
    store i32* %188 with i32 0;
    i32* %189 = getelementptr &(i32* %181)[i64 8];
    store i32* %189 with i32 0;
    i32* %190 = getelementptr &(i32* %181)[i64 9];
    store i32* %190 with i32 0;
    i32* %191 = getelementptr &(i32* %181)[i64 10];
    store i32* %191 with i32 0;
    i32* %192 = getelementptr &(i32* %181)[i64 11];
    store i32* %192 with i32 0;
    i32* %193 = getelementptr &(i32* %181)[i64 12];
    store i32* %193 with i32 0;
    i32* %194 = getelementptr &(i32* %181)[i64 13];
    store i32* %194 with i32 0;
    i32* %195 = getelementptr &(i32* %181)[i64 14];
    store i32* %195 with i32 0;
    i32* %196 = getelementptr &(i32* %181)[i64 15];
    store i32* %196 with i32 0;
    ubr ^super.header5;
^while.body15:
    i32 %197 = phi [^b1, i32 %177] [^indirect3, i32 %215];
    i32 %198 = phi [^b1, i32 %175] [^indirect3, i32 %209];
    i32* %199 = getelementptr &(i32* %3)[i32 %198];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %7)[i32 %200];
    i32 %202 = load i32* %201;
    i32* %203 = getelementptr &(i32* %5)[i32 %198];
    i32 %204 = load i32* %203;
    i32 %205 = load i32* %179;
    i32 %206 = add i32 %205, i32 -1;
    i32 %207 = mul i32 %204, i32 %206;
    i32 %208 = add i32 %202, i32 %207;
    store i32* %201 with i32 %208;
    i32 %209 = add i32 %198, i32 1;
    i1 %210 = scmp lt i32 %209, i32 %197;
    cbr i1 %210(prob = 0.97), ^indirect3, ^while.header1;
^while.body16:
    i32 %211 = phi [^super.header5, i32 %172] [^while.body16, i32 %213];
    i32* %212 = getelementptr &(i32* %7)[i32 %211];
    store i32* %212 with i32 0;
    i32 %213 = add i32 %211, i32 1;
    i1 %214 = scmp lt i32 %213, i32 %2;
    cbr i1 %214(prob = 0.97), ^while.body16, ^while.header1;
^indirect3:
    i32 %215 = load i32* %176;
    ubr ^while.body15;
}
