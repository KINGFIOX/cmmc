internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    store i32* %n2 with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n2;
    call (i32) -> void @starttime(i32 39);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body8, i32 %101] [^entry, i32 %9];
    i32 %12 = phi [^while.body8, i32 %130] [^entry, i32 0];
    i1 %13 = scmp lt i32 %12, i32 100;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %n1 with i32 %11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^b:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %11, i32* %10);
    ret i32 0;
^while.header1:
    i32 %14 = phi [^while.body1, i32 %25] [^while.body, i32 %11];
    i32 %15 = phi [^while.body1, i32 %26] [^while.body, i32 %12];
    i32 %16 = phi [^while.body1, i32 %29] [^while.body, i32 0];
    i32* %17 = phi [^while.body1, i32* %17] [^while.body, i32* %10];
    i32* %18 = phi [^while.body1, i32* %18] [^while.body, i32* %7];
    i32* %19 = phi [^while.body1, i32* %19] [^while.body, i32* %5];
    i32* %20 = phi [^while.body1, i32* %20] [^while.body, i32* %3];
    i32* %21 = phi [^while.body1, i32* %21] [^while.body, i32* %0];
    i32 %22 = phi [^while.body1, i32 %28] [^while.body, i32 %11];
    i1 %23 = scmp lt i32 %16, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %24 = getelementptr &(i32* %17)[i32 %16];
    store i32* %24 with i32 0;
    i32 %25 = load i32* %n2;
    i32 %26 = load i32* %i2;
    i32 %27 = load i32* %i1;
    i32 %28 = load i32* %n1;
    i32 %29 = add i32 %27, i32 1;
    store i32* %i1 with i32 %29;
    ubr ^while.header1;
^b1:
    store i32* %i1 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %30 = phi [^b4, i32 %87] [^b1, i32 %14];
    i32 %31 = phi [^b4, i32 %88] [^b1, i32 %15];
    i32 %32 = phi [^b4, i32 %97] [^b1, i32 0];
    i32* %33 = phi [^b4, i32* %91] [^b1, i32* %17];
    i32* %34 = phi [^b4, i32* %92] [^b1, i32* %18];
    i32* %35 = phi [^b4, i32* %93] [^b1, i32* %19];
    i32* %36 = phi [^b4, i32* %94] [^b1, i32* %20];
    i32* %37 = phi [^b4, i32* %95] [^b1, i32* %21];
    i32 %38 = phi [^b4, i32 %96] [^b1, i32 %22];
    i1 %39 = scmp lt i32 %32, i32 %38;
    cbr i1 %39(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32* %40 = getelementptr &(i32* %37)[i32 %32];
    i32 %41 = load i32* %40;
    store i32* %j1 with i32 %41;
    ubr ^while.header3;
^while.body3:
    store i32* %n with i32 %30;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %42 = phi [^while.body4, i32 %73] [^while.body2, i32 %30];
    i32 %43 = phi [^while.body4, i32 %74] [^while.body2, i32 %31];
    i32 %44 = phi [^while.body4, i32 %78] [^while.body2, i32 %41];
    i32 %45 = phi [^while.body4, i32 %76] [^while.body2, i32 %32];
    i32* %46 = phi [^while.body4, i32* %46] [^while.body2, i32* %33];
    i32* %47 = phi [^while.body4, i32* %47] [^while.body2, i32* %34];
    i32* %48 = phi [^while.body4, i32* %48] [^while.body2, i32* %35];
    i32* %49 = phi [^while.body4, i32* %49] [^while.body2, i32* %36];
    i32* %50 = phi [^while.body4, i32* %50] [^while.body2, i32* %37];
    i32 %51 = phi [^while.body4, i32 %77] [^while.body2, i32 %38];
    i32 %52 = add i32 %45, i32 1;
    i32* %53 = getelementptr &(i32* %50)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = scmp lt i32 %44, i32 %54;
    cbr i1 %55(prob = 0.97), ^while.body4, ^b2;
^while.header4:
    i32 %56 = phi [^while.body5, i32 %82] [^while.body3, i32 %30];
    i32 %57 = phi [^while.body5, i32 %83] [^while.body3, i32 %31];
    i32 %58 = phi [^while.body5, i32 %86] [^while.body3, i32 0];
    i32* %59 = phi [^while.body5, i32* %59] [^while.body3, i32* %7];
    i32* %60 = phi [^while.body5, i32* %60] [^while.body3, i32* %10];
    i32* %61 = phi [^while.body5, i32* %61] [^while.body3, i32* %5];
    i32* %62 = phi [^while.body5, i32* %62] [^while.body3, i32* %3];
    i32* %63 = phi [^while.body5, i32* %63] [^while.body3, i32* %0];
    i32 %64 = phi [^while.body5, i32 %85] [^while.body3, i32 %30];
    i1 %65 = scmp lt i32 %58, i32 %64;
    cbr i1 %65(prob = 0.97), ^while.body5, ^b3;
^while.body4:
    i32* %66 = getelementptr &(i32* %49)[i32 %44];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %46)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %48)[i32 %44];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %68 with i32 %72;
    i32 %73 = load i32* %n2;
    i32 %74 = load i32* %i2;
    i32 %75 = load i32* %j1;
    i32 %76 = load i32* %i1;
    i32 %77 = load i32* %n1;
    i32 %78 = add i32 %75, i32 1;
    store i32* %j1 with i32 %78;
    ubr ^while.header3;
^b2:
    i32* %79 = getelementptr &(i32* %50)[i32 %45];
    i32 %80 = load i32* %79;
    store i32* %j1 with i32 %80;
    ubr ^while.header5;
^while.body5:
    i32* %81 = getelementptr &(i32* %59)[i32 %58];
    store i32* %81 with i32 0;
    i32 %82 = load i32* %n2;
    i32 %83 = load i32* %i2;
    i32 %84 = load i32* %i;
    i32 %85 = load i32* %n;
    i32 %86 = add i32 %84, i32 1;
    store i32* %i with i32 %86;
    ubr ^while.header4;
^b3:
    store i32* %i with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %87 = phi [^while.body6, i32 %122] [^b2, i32 %42];
    i32 %88 = phi [^while.body6, i32 %123] [^b2, i32 %43];
    i32 %89 = phi [^while.body6, i32 %127] [^b2, i32 %80];
    i32 %90 = phi [^while.body6, i32 %125] [^b2, i32 %45];
    i32* %91 = phi [^while.body6, i32* %91] [^b2, i32* %46];
    i32* %92 = phi [^while.body6, i32* %92] [^b2, i32* %47];
    i32* %93 = phi [^while.body6, i32* %93] [^b2, i32* %48];
    i32* %94 = phi [^while.body6, i32* %94] [^b2, i32* %49];
    i32* %95 = phi [^while.body6, i32* %95] [^b2, i32* %50];
    i32 %96 = phi [^while.body6, i32 %126] [^b2, i32 %51];
    i32 %97 = add i32 %90, i32 1;
    i32* %98 = getelementptr &(i32* %95)[i32 %97];
    i32 %99 = load i32* %98;
    i1 %100 = scmp lt i32 %89, i32 %99;
    cbr i1 %100(prob = 0.97), ^while.body6, ^b4;
^while.header6:
    i32 %101 = phi [^b6, i32 %160] [^b3, i32 %56];
    i32 %102 = phi [^b6, i32 %161] [^b3, i32 %57];
    i32 %103 = phi [^b6, i32 %170] [^b3, i32 0];
    i32* %104 = phi [^b6, i32* %164] [^b3, i32* %59];
    i32* %105 = phi [^b6, i32* %165] [^b3, i32* %60];
    i32* %106 = phi [^b6, i32* %166] [^b3, i32* %61];
    i32* %107 = phi [^b6, i32* %167] [^b3, i32* %62];
    i32* %108 = phi [^b6, i32* %168] [^b3, i32* %63];
    i32 %109 = phi [^b6, i32 %169] [^b3, i32 %64];
    i1 %110 = scmp lt i32 %103, i32 %109;
    cbr i1 %110(prob = 0.97), ^while.body7, ^while.body8;
^while.body6:
    i32* %111 = getelementptr &(i32* %94)[i32 %89];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %91)[i32 %112];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %93)[i32 %89];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %92)[i32 %90];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %118, i32 -1;
    i32 %120 = mul i32 %116, i32 %119;
    i32 %121 = add i32 %114, i32 %120;
    store i32* %113 with i32 %121;
    i32 %122 = load i32* %n2;
    i32 %123 = load i32* %i2;
    i32 %124 = load i32* %j1;
    i32 %125 = load i32* %i1;
    i32 %126 = load i32* %n1;
    i32 %127 = add i32 %124, i32 1;
    store i32* %j1 with i32 %127;
    ubr ^while.header5;
^b4:
    store i32* %i1 with i32 %97;
    ubr ^while.header2;
^while.body7:
    i32* %128 = getelementptr &(i32* %108)[i32 %103];
    i32 %129 = load i32* %128;
    store i32* %j with i32 %129;
    ubr ^while.header7;
^while.body8:
    i32 %130 = add i32 %102, i32 1;
    store i32* %i2 with i32 %130;
    ubr ^while.header;
^while.header7:
    i32 %131 = phi [^while.body9, i32 %152] [^while.body7, i32 %101];
    i32 %132 = phi [^while.body9, i32 %153] [^while.body7, i32 %102];
    i32 %133 = phi [^while.body9, i32 %157] [^while.body7, i32 %129];
    i32 %134 = phi [^while.body9, i32 %155] [^while.body7, i32 %103];
    i32* %135 = phi [^while.body9, i32* %135] [^while.body7, i32* %104];
    i32* %136 = phi [^while.body9, i32* %136] [^while.body7, i32* %105];
    i32* %137 = phi [^while.body9, i32* %137] [^while.body7, i32* %106];
    i32* %138 = phi [^while.body9, i32* %138] [^while.body7, i32* %107];
    i32* %139 = phi [^while.body9, i32* %139] [^while.body7, i32* %108];
    i32 %140 = phi [^while.body9, i32 %156] [^while.body7, i32 %109];
    i32 %141 = add i32 %134, i32 1;
    i32* %142 = getelementptr &(i32* %139)[i32 %141];
    i32 %143 = load i32* %142;
    i1 %144 = scmp lt i32 %133, i32 %143;
    cbr i1 %144(prob = 0.97), ^while.body9, ^b5;
^while.body9:
    i32* %145 = getelementptr &(i32* %138)[i32 %133];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %135)[i32 %146];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %137)[i32 %133];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %148, i32 %150;
    store i32* %147 with i32 %151;
    i32 %152 = load i32* %n2;
    i32 %153 = load i32* %i2;
    i32 %154 = load i32* %j;
    i32 %155 = load i32* %i;
    i32 %156 = load i32* %n;
    i32 %157 = add i32 %154, i32 1;
    store i32* %j with i32 %157;
    ubr ^while.header7;
^b5:
    i32* %158 = getelementptr &(i32* %139)[i32 %134];
    i32 %159 = load i32* %158;
    store i32* %j with i32 %159;
    ubr ^while.header8;
^while.header8:
    i32 %160 = phi [^while.body10, i32 %185] [^b5, i32 %131];
    i32 %161 = phi [^while.body10, i32 %186] [^b5, i32 %132];
    i32 %162 = phi [^while.body10, i32 %190] [^b5, i32 %159];
    i32 %163 = phi [^while.body10, i32 %188] [^b5, i32 %134];
    i32* %164 = phi [^while.body10, i32* %164] [^b5, i32* %135];
    i32* %165 = phi [^while.body10, i32* %165] [^b5, i32* %136];
    i32* %166 = phi [^while.body10, i32* %166] [^b5, i32* %137];
    i32* %167 = phi [^while.body10, i32* %167] [^b5, i32* %138];
    i32* %168 = phi [^while.body10, i32* %168] [^b5, i32* %139];
    i32 %169 = phi [^while.body10, i32 %189] [^b5, i32 %140];
    i32 %170 = add i32 %163, i32 1;
    i32* %171 = getelementptr &(i32* %168)[i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = scmp lt i32 %162, i32 %172;
    cbr i1 %173(prob = 0.97), ^while.body10, ^b6;
^while.body10:
    i32* %174 = getelementptr &(i32* %167)[i32 %162];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %164)[i32 %175];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %166)[i32 %162];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %165)[i32 %163];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %181, i32 -1;
    i32 %183 = mul i32 %179, i32 %182;
    i32 %184 = add i32 %177, i32 %183;
    store i32* %176 with i32 %184;
    i32 %185 = load i32* %n2;
    i32 %186 = load i32* %i2;
    i32 %187 = load i32* %j;
    i32 %188 = load i32* %i;
    i32 %189 = load i32* %n;
    i32 %190 = add i32 %187, i32 1;
    store i32* %j with i32 %190;
    ubr ^while.header8;
^b6:
    store i32* %i with i32 %170;
    ubr ^while.header6;
}
