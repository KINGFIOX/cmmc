internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i1 %14 = icmp sgt i32 %12, i32 4;
    i32 %15 = add i32 %2, i32 -5;
    i1 %16 = icmp sgt i32 %15, i32 16;
    i32 %17 = add i32 %2, i32 -21;
    [100010 * i32]* %18 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %19 = getelementptr &([100010 * i32]* %18)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %20 = phi [^entry, i32 0] [^while.body10, i32 %116];
    cbr i1 %13(prob = 0.984615), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %14(prob = 0.941176), ^super.header1, ^while.body1;
  ^while.header:
    i32 %21 = phi [^while.body, i32 0] [^while.body1, i32 0] [^while.body2, i32 %27] [^while.body16, i32 %27];
    i1 %22 = icmp sgt i32 %12, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body2, ^while.body3;
  ^super.header1:
    cbr i1 %16(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body1 {scalar}:
    i32 %23 = phi [^super.header, i32 0] [^while.body1, i32 %25] [^while.body5, i32 %57];
    i32* %24 = getelementptr &(i32* %19)[i32 %23];
    store i32* %24 with i32 0;
    i32 %25 = add i32 %23, i32 1;
    i1 %26 = icmp sgt i32 %12, i32 %25;
    cbr i1 %26(prob = 0.75), ^while.body1, ^while.header;
  ^while.body2:
    i32 %27 = add i32 %21, i32 1;
    i32* %28 = getelementptr &(i32* %1)[i32 %27];
    i32* %29 = getelementptr &(i32* %1)[i32 %21];
    i32 %30 = load i32* %29;
    i32 %31 = load i32* %28;
    i1 %32 = icmp slt i32 %30, i32 %31;
    cbr i1 %32(prob = 0.984615), ^super.header2, ^while.header;
  ^while.body3:
    cbr i1 %13(prob = 0.984615), ^super.header3, ^while.header1;
  ^while.body4:
    i32 %33 = phi [^super.header1, i32 0] [^while.body4, i32 %50];
    i32* %34 = getelementptr &(i32* %19)[i32 %33];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 0;
    i32 %50 = add i32 %33, i32 16;
    i1 %51 = icmp sgt i32 %17, i32 %50;
    cbr i1 %51(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body5 {scalar}:
    i32 %52 = phi [^super.header1, i32 0] [^while.body4, i32 %50] [^while.body5, i32 %57];
    i32* %53 = getelementptr &(i32* %19)[i32 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32 %57 = add i32 %52, i32 4;
    i1 %58 = icmp sgt i32 %15, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body5, ^while.body1;
  ^super.header2:
    i32 %59 = add i32 %30, i32 4;
    i1 %60 = icmp sgt i32 %31, i32 %59;
    i32* %61 = getelementptr &(i32* %10)[i32 %21];
    i32 %62 = add i32 %31, i32 -4;
    cbr i1 %60(prob = 0.941176), ^while.body6, ^while.body7;
  ^super.header3:
    cbr i1 %14(prob = 0.941176), ^super.header4, ^while.body8;
  ^while.header1:
    i32 %63 = phi [^while.body3, i32 0] [^while.body8, i32 0] [^while.body9, i32 %110] [^while.body18, i32 %110];
    i1 %64 = icmp sgt i32 %12, i32 %63;
    cbr i1 %64(prob = 0.984615), ^while.body9, ^while.body10;
  ^while.body6:
    i32 %65 = phi [^super.header2, i32 %30] [^while.body6, i32 %94];
    i32* %66 = getelementptr &(i32* %4)[i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %19)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %7)[i32 %65];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %68 with i32 %72;
    i32* %73 = getelementptr &(i32* %66)[i64 1];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %19)[i32 %74];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %70)[i64 1];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    store i32* %75 with i32 %79;
    i32* %80 = getelementptr &(i32* %66)[i64 2];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %19)[i32 %81];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %70)[i64 2];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    store i32* %82 with i32 %86;
    i32* %87 = getelementptr &(i32* %66)[i64 3];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %19)[i32 %88];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %70)[i64 3];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    store i32* %89 with i32 %93;
    i32 %94 = add i32 %65, i32 4;
    i1 %95 = icmp sgt i32 %62, i32 %94;
    cbr i1 %95(prob = 0.941176), ^while.body6, ^while.body7;
  ^while.body7 {scalar}:
    i32 %96 = phi [^super.header2, i32 %30] [^while.body6, i32 %94] [^while.body7, i32 %104];
    i32* %97 = getelementptr &(i32* %4)[i32 %96];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %19)[i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %7)[i32 %96];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    store i32* %99 with i32 %103;
    i32 %104 = add i32 %96, i32 1;
    i1 %105 = icmp sgt i32 %31, i32 %104;
    cbr i1 %105(prob = 0.75), ^while.body7, ^indirect;
  ^super.header4:
    cbr i1 %16(prob = 0.941176), ^while.body11, ^while.body12;
  ^while.body8 {scalar}:
    i32 %106 = phi [^super.header3, i32 0] [^while.body8, i32 %108] [^while.body12, i32 %144];
    i32* %107 = getelementptr &(i32* %10)[i32 %106];
    store i32* %107 with i32 0;
    i32 %108 = add i32 %106, i32 1;
    i1 %109 = icmp sgt i32 %12, i32 %108;
    cbr i1 %109(prob = 0.75), ^while.body8, ^while.header1;
  ^while.body9:
    i32 %110 = add i32 %63, i32 1;
    i32* %111 = getelementptr &(i32* %1)[i32 %110];
    i32* %112 = getelementptr &(i32* %1)[i32 %63];
    i32 %113 = load i32* %112;
    i32 %114 = load i32* %111;
    i1 %115 = icmp slt i32 %113, i32 %114;
    cbr i1 %115(prob = 0.984615), ^super.header5, ^while.header1;
  ^while.body10:
    i32 %116 = add i32 %20, i32 1;
    i1 %117 = icmp slt i32 %116, i32 100;
    cbr i1 %117(prob = 0.99), ^while.body, ^b;
  ^while.body11:
    i32 %118 = phi [^super.header4, i32 0] [^while.body11, i32 %135];
    i32* %119 = getelementptr &(i32* %10)[i32 %118];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %119)[i64 1];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %119)[i64 2];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %119)[i64 3];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %119)[i64 4];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %119)[i64 5];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %119)[i64 6];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %119)[i64 7];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %119)[i64 8];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %119)[i64 9];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %119)[i64 10];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %119)[i64 11];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %119)[i64 12];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %119)[i64 13];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %119)[i64 14];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %119)[i64 15];
    store i32* %134 with i32 0;
    i32 %135 = add i32 %118, i32 16;
    i1 %136 = icmp sgt i32 %17, i32 %135;
    cbr i1 %136(prob = 0.941176), ^while.body11, ^while.body12;
  ^indirect:
    i32 %137 = load i32* %61;
    i32 %138 = add i32 %137, i32 -1;
    cbr i1 %60(prob = 0.941176), ^while.body14, ^while.body16;
  ^while.body12 {scalar}:
    i32 %139 = phi [^super.header4, i32 0] [^while.body11, i32 %135] [^while.body12, i32 %144];
    i32* %140 = getelementptr &(i32* %10)[i32 %139];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %140)[i64 1];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %140)[i64 2];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %140)[i64 3];
    store i32* %143 with i32 0;
    i32 %144 = add i32 %139, i32 4;
    i1 %145 = icmp sgt i32 %15, i32 %144;
    cbr i1 %145(prob = 0.75), ^while.body12, ^while.body8;
  ^super.header5:
    i32 %146 = add i32 %113, i32 4;
    i1 %147 = icmp sgt i32 %114, i32 %146;
    i32* %148 = getelementptr &(i32* %19)[i32 %63];
    i32 %149 = add i32 %114, i32 -4;
    cbr i1 %147(prob = 0.941176), ^while.body13, ^while.body15;
  ^b:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %19);
    ret i32 0;
  ^while.body13:
    i32 %150 = phi [^super.header5, i32 %113] [^while.body13, i32 %179];
    i32* %151 = getelementptr &(i32* %4)[i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %10)[i32 %152];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %7)[i32 %150];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %154, i32 %156;
    store i32* %153 with i32 %157;
    i32* %158 = getelementptr &(i32* %151)[i64 1];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %10)[i32 %159];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %155)[i64 1];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %161, i32 %163;
    store i32* %160 with i32 %164;
    i32* %165 = getelementptr &(i32* %151)[i64 2];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %10)[i32 %166];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %155)[i64 2];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %168, i32 %170;
    store i32* %167 with i32 %171;
    i32* %172 = getelementptr &(i32* %151)[i64 3];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %10)[i32 %173];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %155)[i64 3];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %175, i32 %177;
    store i32* %174 with i32 %178;
    i32 %179 = add i32 %150, i32 4;
    i1 %180 = icmp sgt i32 %149, i32 %179;
    cbr i1 %180(prob = 0.941176), ^while.body13, ^while.body15;
  ^while.body14:
    i32 %181 = phi [^indirect, i32 %59] [^while.body14, i32 %215];
    i32 %182 = phi [^indirect, i32 %30] [^while.body14, i32 %181];
    i32* %183 = getelementptr &(i32* %4)[i32 %182];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %19)[i32 %184];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %7)[i32 %182];
    i32 %188 = load i32* %187;
    i32 %189 = mul i32 %138, i32 %188;
    i32 %190 = add i32 %186, i32 %189;
    store i32* %185 with i32 %190;
    i32* %191 = getelementptr &(i32* %183)[i64 1];
    i32 %192 = load i32* %191;
    i32* %193 = getelementptr &(i32* %19)[i32 %192];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &(i32* %187)[i64 1];
    i32 %196 = load i32* %195;
    i32 %197 = mul i32 %138, i32 %196;
    i32 %198 = add i32 %194, i32 %197;
    store i32* %193 with i32 %198;
    i32* %199 = getelementptr &(i32* %183)[i64 2];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %19)[i32 %200];
    i32 %202 = load i32* %201;
    i32* %203 = getelementptr &(i32* %187)[i64 2];
    i32 %204 = load i32* %203;
    i32 %205 = mul i32 %138, i32 %204;
    i32 %206 = add i32 %202, i32 %205;
    store i32* %201 with i32 %206;
    i32* %207 = getelementptr &(i32* %183)[i64 3];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &(i32* %19)[i32 %208];
    i32 %210 = load i32* %209;
    i32* %211 = getelementptr &(i32* %187)[i64 3];
    i32 %212 = load i32* %211;
    i32 %213 = mul i32 %138, i32 %212;
    i32 %214 = add i32 %210, i32 %213;
    store i32* %209 with i32 %214;
    i32 %215 = add i32 %181, i32 4;
    i1 %216 = icmp sgt i32 %31, i32 %215;
    cbr i1 %216(prob = 0.941176), ^while.body14, ^while.body16;
  ^while.body15 {scalar}:
    i32 %217 = phi [^super.header5, i32 %113] [^while.body13, i32 %179] [^while.body15, i32 %225];
    i32* %218 = getelementptr &(i32* %4)[i32 %217];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &(i32* %10)[i32 %219];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %7)[i32 %217];
    i32 %223 = load i32* %222;
    i32 %224 = add i32 %221, i32 %223;
    store i32* %220 with i32 %224;
    i32 %225 = add i32 %217, i32 1;
    i1 %226 = icmp sgt i32 %114, i32 %225;
    cbr i1 %226(prob = 0.75), ^while.body15, ^indirect1;
  ^while.body16 {scalar}:
    i32 %227 = phi [^indirect, i32 %30] [^while.body14, i32 %181] [^while.body16, i32 %236];
    i32* %228 = getelementptr &(i32* %4)[i32 %227];
    i32 %229 = load i32* %228;
    i32* %230 = getelementptr &(i32* %19)[i32 %229];
    i32 %231 = load i32* %230;
    i32* %232 = getelementptr &(i32* %7)[i32 %227];
    i32 %233 = load i32* %232;
    i32 %234 = mul i32 %138, i32 %233;
    i32 %235 = add i32 %231, i32 %234;
    store i32* %230 with i32 %235;
    i32 %236 = add i32 %227, i32 1;
    i1 %237 = icmp sgt i32 %31, i32 %236;
    cbr i1 %237(prob = 0.75), ^while.body16, ^while.header;
  ^indirect1:
    i32 %238 = load i32* %148;
    i32 %239 = add i32 %238, i32 -1;
    cbr i1 %147(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body17:
    i32 %240 = phi [^indirect1, i32 %146] [^while.body17, i32 %274];
    i32 %241 = phi [^indirect1, i32 %113] [^while.body17, i32 %240];
    i32* %242 = getelementptr &(i32* %4)[i32 %241];
    i32 %243 = load i32* %242;
    i32* %244 = getelementptr &(i32* %10)[i32 %243];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %7)[i32 %241];
    i32 %247 = load i32* %246;
    i32 %248 = mul i32 %239, i32 %247;
    i32 %249 = add i32 %245, i32 %248;
    store i32* %244 with i32 %249;
    i32* %250 = getelementptr &(i32* %242)[i64 1];
    i32 %251 = load i32* %250;
    i32* %252 = getelementptr &(i32* %10)[i32 %251];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &(i32* %246)[i64 1];
    i32 %255 = load i32* %254;
    i32 %256 = mul i32 %239, i32 %255;
    i32 %257 = add i32 %253, i32 %256;
    store i32* %252 with i32 %257;
    i32* %258 = getelementptr &(i32* %242)[i64 2];
    i32 %259 = load i32* %258;
    i32* %260 = getelementptr &(i32* %10)[i32 %259];
    i32 %261 = load i32* %260;
    i32* %262 = getelementptr &(i32* %246)[i64 2];
    i32 %263 = load i32* %262;
    i32 %264 = mul i32 %239, i32 %263;
    i32 %265 = add i32 %261, i32 %264;
    store i32* %260 with i32 %265;
    i32* %266 = getelementptr &(i32* %242)[i64 3];
    i32 %267 = load i32* %266;
    i32* %268 = getelementptr &(i32* %10)[i32 %267];
    i32 %269 = load i32* %268;
    i32* %270 = getelementptr &(i32* %246)[i64 3];
    i32 %271 = load i32* %270;
    i32 %272 = mul i32 %239, i32 %271;
    i32 %273 = add i32 %269, i32 %272;
    store i32* %268 with i32 %273;
    i32 %274 = add i32 %240, i32 4;
    i1 %275 = icmp sgt i32 %114, i32 %274;
    cbr i1 %275(prob = 0.941176), ^while.body17, ^while.body18;
  ^while.body18 {scalar}:
    i32 %276 = phi [^indirect1, i32 %113] [^while.body17, i32 %240] [^while.body18, i32 %285];
    i32* %277 = getelementptr &(i32* %4)[i32 %276];
    i32 %278 = load i32* %277;
    i32* %279 = getelementptr &(i32* %10)[i32 %278];
    i32 %280 = load i32* %279;
    i32* %281 = getelementptr &(i32* %7)[i32 %276];
    i32 %282 = load i32* %281;
    i32 %283 = mul i32 %239, i32 %282;
    i32 %284 = add i32 %280, i32 %283;
    store i32* %279 with i32 %284;
    i32 %285 = add i32 %276, i32 1;
    i1 %286 = icmp sgt i32 %114, i32 %285;
    cbr i1 %286(prob = 0.75), ^while.body18, ^while.header1;
}
