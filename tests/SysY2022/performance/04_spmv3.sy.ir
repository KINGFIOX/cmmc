internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    i1 %4 = icmp sgt i32 %3, i32 0;
    i1 %5 = icmp sgt i32 %3, i32 4;
    i32 %6 = add i32 %2, i32 -5;
    [3000000 * i32]* %7 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %8 = getelementptr &([3000000 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    [3000000 * i32]* %10 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %11 = getelementptr &([3000000 * i32]* %10)[i64 0][i64 0];
    i32 %12 = call (i32*) -> i32 @getarray(i32* %11);
    [100010 * i32]* %13 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %14 = getelementptr &([100010 * i32]* %13)[i64 0][i64 0];
    i32 %15 = call (i32*) -> i32 @getarray(i32* %14);
    call (i32) -> void @starttime(i32 39);
    [100010 * i32]* %16 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %17 = getelementptr &([100010 * i32]* %16)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %18 = phi [^entry, i32 0] [^while.body10, i32 %108];
    cbr i1 %4(prob = 0.97), ^super.header, ^while.header;
  ^super.header:
    cbr i1 %5(prob = 0.89), ^while.body1, ^while.body2;
  ^while.header:
    i32 %19 = phi [^while.body, i32 0] [^while.body2, i32 0] [^b, i32 %32] [^while.body12, i32 %32];
    i1 %20 = icmp sgt i32 %3, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.body3, ^while.body4;
  ^while.body1:
    i32 %21 = phi [^super.header, i32 0] [^while.body1, i32 %26];
    i32* %22 = getelementptr &(i32* %17)[i32 %21];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %22)[i64 1];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %22)[i64 2];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %22)[i64 3];
    store i32* %25 with i32 0;
    i32 %26 = add i32 %21, i32 4;
    i1 %27 = icmp sgt i32 %6, i32 %26;
    cbr i1 %27(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %28 = phi [^super.header, i32 0] [^while.body1, i32 %26] [^while.body2, i32 %30];
    i32* %29 = getelementptr &(i32* %17)[i32 %28];
    store i32* %29 with i32 0;
    i32 %30 = add i32 %28, i32 1;
    i1 %31 = icmp sgt i32 %3, i32 %30;
    cbr i1 %31(prob = 0.75), ^while.body2, ^while.header;
  ^while.body3:
    i32 %32 = add i32 %19, i32 1;
    i32* %33 = getelementptr &(i32* %1)[i32 %32];
    i32* %34 = getelementptr &(i32* %1)[i32 %19];
    i32 %35 = load i32* %34;
    i32 %36 = load i32* %33;
    i1 %37 = icmp slt i32 %35, i32 %36;
    i32* %38 = getelementptr &(i32* %14)[i32 %19];
    cbr i1 %37(prob = 0.97), ^super.header1, ^b;
  ^while.body4:
    cbr i1 %4(prob = 0.97), ^super.header2, ^while.header1;
  ^super.header1:
    i32 %39 = add i32 %35, i32 4;
    i1 %40 = icmp sgt i32 %36, i32 %39;
    i32 %41 = add i32 %36, i32 -4;
    cbr i1 %40(prob = 0.89), ^while.body5, ^while.body6;
  ^b:
    cbr i1 %37(prob = 0.97), ^indirect, ^while.header;
  ^super.header2:
    cbr i1 %5(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header1:
    i32 %42 = phi [^while.body4, i32 0] [^while.body8, i32 0] [^b1, i32 %101] [^while.body16, i32 %101];
    i1 %43 = icmp sgt i32 %3, i32 %42;
    cbr i1 %43(prob = 0.97), ^while.body9, ^while.body10;
  ^while.body5:
    i32 %44 = phi [^super.header1, i32 %35] [^while.body5, i32 %73];
    i32* %45 = getelementptr &(i32* %8)[i32 %44];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %17)[i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %11)[i32 %44];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    store i32* %47 with i32 %51;
    i32* %52 = getelementptr &(i32* %45)[i64 1];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %17)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %49)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    store i32* %54 with i32 %58;
    i32* %59 = getelementptr &(i32* %45)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %17)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %49)[i64 2];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    store i32* %61 with i32 %65;
    i32* %66 = getelementptr &(i32* %45)[i64 3];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %17)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %49)[i64 3];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %68 with i32 %72;
    i32 %73 = add i32 %44, i32 4;
    i1 %74 = icmp sgt i32 %41, i32 %73;
    cbr i1 %74(prob = 0.89), ^while.body5, ^while.body6;
  ^indirect:
    i32 %75 = add i32 %35, i32 4;
    i1 %76 = icmp sgt i32 %36, i32 %75;
    i32 %77 = load i32* %38;
    i32 %78 = add i32 %77, i32 -1;
    i32 %79 = add i32 %36, i32 -4;
    cbr i1 %76(prob = 0.89), ^while.body11, ^while.body12;
  ^while.body6 {scalar}:
    i32 %80 = phi [^super.header1, i32 %35] [^while.body5, i32 %73] [^while.body6, i32 %88];
    i32* %81 = getelementptr &(i32* %8)[i32 %80];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %17)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %11)[i32 %80];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    store i32* %83 with i32 %87;
    i32 %88 = add i32 %80, i32 1;
    i1 %89 = icmp sgt i32 %36, i32 %88;
    cbr i1 %89(prob = 0.75), ^while.body6, ^b;
  ^while.body7:
    i32 %90 = phi [^super.header2, i32 0] [^while.body7, i32 %95];
    i32* %91 = getelementptr &(i32* %14)[i32 %90];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %91)[i64 1];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %91)[i64 2];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %91)[i64 3];
    store i32* %94 with i32 0;
    i32 %95 = add i32 %90, i32 4;
    i1 %96 = icmp sgt i32 %6, i32 %95;
    cbr i1 %96(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body8 {scalar}:
    i32 %97 = phi [^super.header2, i32 0] [^while.body7, i32 %95] [^while.body8, i32 %99];
    i32* %98 = getelementptr &(i32* %14)[i32 %97];
    store i32* %98 with i32 0;
    i32 %99 = add i32 %97, i32 1;
    i1 %100 = icmp sgt i32 %3, i32 %99;
    cbr i1 %100(prob = 0.75), ^while.body8, ^while.header1;
  ^while.body9:
    i32 %101 = add i32 %42, i32 1;
    i32* %102 = getelementptr &(i32* %1)[i32 %101];
    i32* %103 = getelementptr &(i32* %1)[i32 %42];
    i32 %104 = load i32* %103;
    i32 %105 = load i32* %102;
    i1 %106 = icmp slt i32 %104, i32 %105;
    i32* %107 = getelementptr &(i32* %17)[i32 %42];
    cbr i1 %106(prob = 0.97), ^super.header3, ^b1;
  ^while.body10:
    i32 %108 = add i32 %18, i32 1;
    i1 %109 = icmp slt i32 %108, i32 100;
    cbr i1 %109(prob = 0.99), ^while.body, ^b2;
  ^while.body11:
    i32 %110 = phi [^indirect, i32 %35] [^while.body11, i32 %143];
    i32* %111 = getelementptr &(i32* %8)[i32 %110];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %17)[i32 %112];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %11)[i32 %110];
    i32 %116 = load i32* %115;
    i32 %117 = mul i32 %78, i32 %116;
    i32 %118 = add i32 %114, i32 %117;
    store i32* %113 with i32 %118;
    i32* %119 = getelementptr &(i32* %111)[i64 1];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %17)[i32 %120];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %115)[i64 1];
    i32 %124 = load i32* %123;
    i32 %125 = mul i32 %78, i32 %124;
    i32 %126 = add i32 %122, i32 %125;
    store i32* %121 with i32 %126;
    i32* %127 = getelementptr &(i32* %111)[i64 2];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %17)[i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %115)[i64 2];
    i32 %132 = load i32* %131;
    i32 %133 = mul i32 %78, i32 %132;
    i32 %134 = add i32 %130, i32 %133;
    store i32* %129 with i32 %134;
    i32* %135 = getelementptr &(i32* %111)[i64 3];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %17)[i32 %136];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %115)[i64 3];
    i32 %140 = load i32* %139;
    i32 %141 = mul i32 %78, i32 %140;
    i32 %142 = add i32 %138, i32 %141;
    store i32* %137 with i32 %142;
    i32 %143 = add i32 %110, i32 4;
    i1 %144 = icmp sgt i32 %79, i32 %143;
    cbr i1 %144(prob = 0.89), ^while.body11, ^while.body12;
  ^super.header3:
    i32 %145 = add i32 %104, i32 4;
    i1 %146 = icmp sgt i32 %105, i32 %145;
    i32 %147 = add i32 %105, i32 -4;
    cbr i1 %146(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body12 {scalar}:
    i32 %148 = phi [^indirect, i32 %35] [^while.body11, i32 %143] [^while.body12, i32 %157];
    i32* %149 = getelementptr &(i32* %8)[i32 %148];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %17)[i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %11)[i32 %148];
    i32 %154 = load i32* %153;
    i32 %155 = mul i32 %78, i32 %154;
    i32 %156 = add i32 %152, i32 %155;
    store i32* %151 with i32 %156;
    i32 %157 = add i32 %148, i32 1;
    i1 %158 = icmp sgt i32 %36, i32 %157;
    cbr i1 %158(prob = 0.75), ^while.body12, ^while.header;
  ^b1:
    cbr i1 %106(prob = 0.97), ^indirect1, ^while.header1;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %17);
    ret i32 0;
  ^while.body13:
    i32 %159 = phi [^super.header3, i32 %104] [^while.body13, i32 %188];
    i32* %160 = getelementptr &(i32* %8)[i32 %159];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %14)[i32 %161];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %11)[i32 %159];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %163, i32 %165;
    store i32* %162 with i32 %166;
    i32* %167 = getelementptr &(i32* %160)[i64 1];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %14)[i32 %168];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %164)[i64 1];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %170, i32 %172;
    store i32* %169 with i32 %173;
    i32* %174 = getelementptr &(i32* %160)[i64 2];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %14)[i32 %175];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %164)[i64 2];
    i32 %179 = load i32* %178;
    i32 %180 = add i32 %177, i32 %179;
    store i32* %176 with i32 %180;
    i32* %181 = getelementptr &(i32* %160)[i64 3];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %14)[i32 %182];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %164)[i64 3];
    i32 %186 = load i32* %185;
    i32 %187 = add i32 %184, i32 %186;
    store i32* %183 with i32 %187;
    i32 %188 = add i32 %159, i32 4;
    i1 %189 = icmp sgt i32 %147, i32 %188;
    cbr i1 %189(prob = 0.89), ^while.body13, ^while.body14;
  ^indirect1:
    i32 %190 = add i32 %104, i32 4;
    i1 %191 = icmp sgt i32 %105, i32 %190;
    i32 %192 = load i32* %107;
    i32 %193 = add i32 %192, i32 -1;
    i32 %194 = add i32 %105, i32 -4;
    cbr i1 %191(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body14 {scalar}:
    i32 %195 = phi [^super.header3, i32 %104] [^while.body13, i32 %188] [^while.body14, i32 %203];
    i32* %196 = getelementptr &(i32* %8)[i32 %195];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %14)[i32 %197];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &(i32* %11)[i32 %195];
    i32 %201 = load i32* %200;
    i32 %202 = add i32 %199, i32 %201;
    store i32* %198 with i32 %202;
    i32 %203 = add i32 %195, i32 1;
    i1 %204 = icmp sgt i32 %105, i32 %203;
    cbr i1 %204(prob = 0.75), ^while.body14, ^b1;
  ^while.body15:
    i32 %205 = phi [^indirect1, i32 %104] [^while.body15, i32 %238];
    i32* %206 = getelementptr &(i32* %8)[i32 %205];
    i32 %207 = load i32* %206;
    i32* %208 = getelementptr &(i32* %14)[i32 %207];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %11)[i32 %205];
    i32 %211 = load i32* %210;
    i32 %212 = mul i32 %193, i32 %211;
    i32 %213 = add i32 %209, i32 %212;
    store i32* %208 with i32 %213;
    i32* %214 = getelementptr &(i32* %206)[i64 1];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %14)[i32 %215];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &(i32* %210)[i64 1];
    i32 %219 = load i32* %218;
    i32 %220 = mul i32 %193, i32 %219;
    i32 %221 = add i32 %217, i32 %220;
    store i32* %216 with i32 %221;
    i32* %222 = getelementptr &(i32* %206)[i64 2];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &(i32* %14)[i32 %223];
    i32 %225 = load i32* %224;
    i32* %226 = getelementptr &(i32* %210)[i64 2];
    i32 %227 = load i32* %226;
    i32 %228 = mul i32 %193, i32 %227;
    i32 %229 = add i32 %225, i32 %228;
    store i32* %224 with i32 %229;
    i32* %230 = getelementptr &(i32* %206)[i64 3];
    i32 %231 = load i32* %230;
    i32* %232 = getelementptr &(i32* %14)[i32 %231];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &(i32* %210)[i64 3];
    i32 %235 = load i32* %234;
    i32 %236 = mul i32 %193, i32 %235;
    i32 %237 = add i32 %233, i32 %236;
    store i32* %232 with i32 %237;
    i32 %238 = add i32 %205, i32 4;
    i1 %239 = icmp sgt i32 %194, i32 %238;
    cbr i1 %239(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body16 {scalar}:
    i32 %240 = phi [^indirect1, i32 %104] [^while.body15, i32 %238] [^while.body16, i32 %249];
    i32* %241 = getelementptr &(i32* %8)[i32 %240];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %14)[i32 %242];
    i32 %244 = load i32* %243;
    i32* %245 = getelementptr &(i32* %11)[i32 %240];
    i32 %246 = load i32* %245;
    i32 %247 = mul i32 %193, i32 %246;
    i32 %248 = add i32 %244, i32 %247;
    store i32* %243 with i32 %248;
    i32 %249 = add i32 %240, i32 1;
    i1 %250 = icmp sgt i32 %105, i32 %249;
    cbr i1 %250(prob = 0.75), ^while.body16, ^while.header1;
}
