internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    i32* %9 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %10 = scmp gt i32 %2, i32 0;
    ubr ^while.body;
^while.body:
    i32 %11 = phi [^entry, i32 0] [^while.body8, i32 %67];
    cbr i1 %10(prob = 0.97), ^while.body1, ^while.header;
^while.body1:
    i32 %12 = phi [^while.body, i32 0] [^while.body1, i32 %14];
    i32* %13 = getelementptr &(i32* %9)[i32 %12];
    store i32* %13 with i32 0;
    i32 %14 = add i32 %12, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %2;
    cbr i1 %15(prob = 0.97), ^while.body1, ^while.header;
^while.header:
    i32 %16 = phi [^while.body, i32 0] [^while.body1, i32 0] [^b, i32 %18] [^while.body6, i32 %18];
    i1 %17 = scmp lt i32 %16, i32 %2;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32 %18 = add i32 %16, i32 1;
    i32* %19 = getelementptr &(i32* %0)[i32 %18];
    i32* %20 = getelementptr &(i32* %0)[i32 %16];
    i32 %21 = load i32* %20;
    i32 %22 = load i32* %19;
    i1 %23 = scmp lt i32 %21, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body4, ^b;
^while.body3:
    cbr i1 %10(prob = 0.97), ^while.body5, ^while.header1;
^while.body4:
    i32 %24 = phi [^while.body2, i32 %22] [^indirect, i32 %46];
    i32 %25 = phi [^while.body2, i32 %21] [^indirect, i32 %33];
    i32* %26 = getelementptr &(i32* %3)[i32 %25];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %9)[i32 %27];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %5)[i32 %25];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %29, i32 %31;
    store i32* %28 with i32 %32;
    i32 %33 = add i32 %25, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %24;
    cbr i1 %34(prob = 0.97), ^indirect, ^b;
^b:
    i32 %35 = load i32* %20;
    i32* %36 = getelementptr &(i32* %20)[i64 1];
    i32 %37 = load i32* %36;
    i1 %38 = scmp lt i32 %35, i32 %37;
    i32* %39 = getelementptr &(i32* %7)[i32 %16];
    cbr i1 %38(prob = 0.97), ^while.body6, ^while.header;
^while.body5:
    i32 %40 = phi [^while.body3, i32 0] [^while.body5, i32 %42];
    i32* %41 = getelementptr &(i32* %7)[i32 %40];
    store i32* %41 with i32 0;
    i32 %42 = add i32 %40, i32 1;
    i1 %43 = scmp lt i32 %42, i32 %2;
    cbr i1 %43(prob = 0.97), ^while.body5, ^while.header1;
^while.header1:
    i32 %44 = phi [^while.body3, i32 0] [^while.body5, i32 0] [^b1, i32 %61] [^while.body10, i32 %61];
    i1 %45 = scmp lt i32 %44, i32 %2;
    cbr i1 %45(prob = 0.97), ^while.body7, ^while.body8;
^indirect:
    i32 %46 = load i32* %19;
    ubr ^while.body4;
^while.body6:
    i32 %47 = phi [^b, i32 %37] [^indirect1, i32 %69];
    i32 %48 = phi [^b, i32 %35] [^indirect1, i32 %59];
    i32* %49 = getelementptr &(i32* %3)[i32 %48];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %9)[i32 %50];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %5)[i32 %48];
    i32 %54 = load i32* %53;
    i32 %55 = load i32* %39;
    i32 %56 = add i32 %55, i32 -1;
    i32 %57 = mul i32 %54, i32 %56;
    i32 %58 = add i32 %52, i32 %57;
    store i32* %51 with i32 %58;
    i32 %59 = add i32 %48, i32 1;
    i1 %60 = scmp lt i32 %59, i32 %47;
    cbr i1 %60(prob = 0.97), ^indirect1, ^while.header;
^while.body7:
    i32 %61 = add i32 %44, i32 1;
    i32* %62 = getelementptr &(i32* %0)[i32 %61];
    i32* %63 = getelementptr &(i32* %0)[i32 %44];
    i32 %64 = load i32* %63;
    i32 %65 = load i32* %62;
    i1 %66 = scmp lt i32 %64, i32 %65;
    cbr i1 %66(prob = 0.97), ^while.body9, ^b1;
^while.body8:
    i32 %67 = add i32 %11, i32 1;
    i1 %68 = scmp lt i32 %67, i32 100;
    cbr i1 %68(prob = 0.99), ^while.body, ^b2;
^indirect1:
    i32 %69 = load i32* %36;
    ubr ^while.body6;
^while.body9:
    i32 %70 = phi [^while.body7, i32 %65] [^indirect2, i32 %86];
    i32 %71 = phi [^while.body7, i32 %64] [^indirect2, i32 %79];
    i32* %72 = getelementptr &(i32* %3)[i32 %71];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %7)[i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %5)[i32 %71];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    store i32* %74 with i32 %78;
    i32 %79 = add i32 %71, i32 1;
    i1 %80 = scmp lt i32 %79, i32 %70;
    cbr i1 %80(prob = 0.97), ^indirect2, ^b1;
^b1:
    i32 %81 = load i32* %63;
    i32* %82 = getelementptr &(i32* %63)[i64 1];
    i32 %83 = load i32* %82;
    i1 %84 = scmp lt i32 %81, i32 %83;
    i32* %85 = getelementptr &(i32* %9)[i32 %44];
    cbr i1 %84(prob = 0.97), ^while.body10, ^while.header1;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %9);
    ret i32 0;
^indirect2:
    i32 %86 = load i32* %62;
    ubr ^while.body9;
^while.body10:
    i32 %87 = phi [^b1, i32 %83] [^indirect3, i32 %101];
    i32 %88 = phi [^b1, i32 %81] [^indirect3, i32 %99];
    i32* %89 = getelementptr &(i32* %3)[i32 %88];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %7)[i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %5)[i32 %88];
    i32 %94 = load i32* %93;
    i32 %95 = load i32* %85;
    i32 %96 = add i32 %95, i32 -1;
    i32 %97 = mul i32 %94, i32 %96;
    i32 %98 = add i32 %92, i32 %97;
    store i32* %91 with i32 %98;
    i32 %99 = add i32 %88, i32 1;
    i1 %100 = scmp lt i32 %99, i32 %87;
    cbr i1 %100(prob = 0.97), ^indirect3, ^while.header1;
^indirect3:
    i32 %101 = load i32* %82;
    ubr ^while.body10;
}
