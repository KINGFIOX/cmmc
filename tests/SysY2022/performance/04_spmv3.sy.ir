internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    store i32* %n with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n;
    call (i32) -> void @starttime(i32 39);
    i32* %10 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i1 %11 = scmp gt i32 %9, i32 0;
    ubr ^while.body;
^while.body:
    i32 %12 = phi [^entry, i32 0] [^while.body7, i32 %59];
    cbr i1 %11(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %13 = phi [^while.body, i32 0] [^while.body1, i32 %15];
    i32* %14 = getelementptr &(i32* %10)[i32 %13];
    store i32* %14 with i32 0;
    i32 %15 = add i32 %13, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %9;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b;
^b:
    cbr i1 %11(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32 %17 = phi [^b, i32 0] [^b3, i32 %49];
    i32 %18 = phi [^b, i32 %9] [^b3, i32 %48];
    i32* %19 = getelementptr &(i32* %0)[i32 %17];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %19)[i64 1];
    i32 %22 = load i32* %21;
    i1 %23 = scmp lt i32 %20, i32 %22;
    i32* %24 = getelementptr &(i32* %7)[i32 %17];
    cbr i1 %23(prob = 0.97), ^indirect, ^b1;
^while.body3:
    cbr i1 %11(prob = 0.97), ^while.body4, ^b2;
^indirect:
    i32 %25 = add i32 %17, i32 1;
    i32* %26 = getelementptr &(i32* %0)[i32 %25];
    ubr ^while.body5;
^b1:
    i32 %27 = phi [^while.body2, i32 %22] [^indirect2, i32 %62];
    i32 %28 = phi [^while.body2, i32 %20] [^indirect2, i32 %61];
    i32 %29 = phi [^while.body2, i32 %18] [^indirect2, i32 %9];
    i1 %30 = scmp lt i32 %28, i32 %27;
    cbr i1 %30(prob = 0.97), ^indirect1, ^b3;
^while.body4:
    i32 %31 = phi [^while.body3, i32 0] [^while.body4, i32 %33];
    i32* %32 = getelementptr &(i32* %7)[i32 %31];
    store i32* %32 with i32 0;
    i32 %33 = add i32 %31, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %9;
    cbr i1 %34(prob = 0.97), ^while.body4, ^b2;
^b2:
    cbr i1 %11(prob = 0.97), ^while.body6, ^while.body7;
^indirect1:
    i32 %35 = add i32 %17, i32 1;
    i32* %36 = getelementptr &(i32* %0)[i32 %35];
    ubr ^while.body8;
^while.body5:
    i32 %37 = phi [^indirect, i32 %20] [^while.body5, i32 %45];
    i32* %38 = getelementptr &(i32* %3)[i32 %37];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %10)[i32 %39];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %5)[i32 %37];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %41, i32 %43;
    store i32* %40 with i32 %44;
    i32 %45 = add i32 %37, i32 1;
    i32 %46 = load i32* %26;
    i1 %47 = scmp lt i32 %45, i32 %46;
    cbr i1 %47(prob = 0.97), ^while.body5, ^indirect2;
^b3:
    i32 %48 = phi [^b1, i32 %29] [^while.body8, i32 %9];
    i32 %49 = add i32 %17, i32 1;
    i1 %50 = scmp lt i32 %49, i32 %48;
    cbr i1 %50(prob = 0.97), ^while.body2, ^while.body3;
^while.body6:
    i32 %51 = phi [^b2, i32 0] [^b6, i32 %97];
    i32 %52 = phi [^b2, i32 %9] [^b6, i32 %96];
    i32* %53 = getelementptr &(i32* %0)[i32 %51];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %53)[i64 1];
    i32 %56 = load i32* %55;
    i1 %57 = scmp lt i32 %54, i32 %56;
    i32* %58 = getelementptr &(i32* %10)[i32 %51];
    cbr i1 %57(prob = 0.97), ^indirect3, ^b4;
^while.body7:
    i32 %59 = add i32 %12, i32 1;
    i1 %60 = scmp lt i32 %59, i32 100;
    cbr i1 %60(prob = 0.99), ^while.body, ^b5;
^indirect2:
    i32 %61 = load i32* %19;
    i32 %62 = load i32* %21;
    ubr ^b1;
^indirect3:
    i32 %63 = add i32 %51, i32 1;
    i32* %64 = getelementptr &(i32* %0)[i32 %63];
    ubr ^while.body9;
^while.body8:
    i32 %65 = phi [^indirect1, i32 %28] [^while.body8, i32 %76];
    i32* %66 = getelementptr &(i32* %3)[i32 %65];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %10)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %5)[i32 %65];
    i32 %71 = load i32* %70;
    i32 %72 = load i32* %24;
    i32 %73 = add i32 %72, i32 -1;
    i32 %74 = mul i32 %71, i32 %73;
    i32 %75 = add i32 %69, i32 %74;
    store i32* %68 with i32 %75;
    i32 %76 = add i32 %65, i32 1;
    i32 %77 = load i32* %36;
    i1 %78 = scmp lt i32 %76, i32 %77;
    cbr i1 %78(prob = 0.97), ^while.body8, ^b3;
^b4:
    i32 %79 = phi [^while.body6, i32 %56] [^indirect5, i32 %100];
    i32 %80 = phi [^while.body6, i32 %54] [^indirect5, i32 %99];
    i32 %81 = phi [^while.body6, i32 %52] [^indirect5, i32 %9];
    i1 %82 = scmp lt i32 %80, i32 %79;
    cbr i1 %82(prob = 0.97), ^indirect4, ^b6;
^b5:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %10);
    ret i32 0;
^indirect4:
    i32 %83 = add i32 %51, i32 1;
    i32* %84 = getelementptr &(i32* %0)[i32 %83];
    ubr ^while.body10;
^while.body9:
    i32 %85 = phi [^indirect3, i32 %54] [^while.body9, i32 %93];
    i32* %86 = getelementptr &(i32* %3)[i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %7)[i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %5)[i32 %85];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    store i32* %88 with i32 %92;
    i32 %93 = add i32 %85, i32 1;
    i32 %94 = load i32* %64;
    i1 %95 = scmp lt i32 %93, i32 %94;
    cbr i1 %95(prob = 0.97), ^while.body9, ^indirect5;
^b6:
    i32 %96 = phi [^b4, i32 %81] [^while.body10, i32 %9];
    i32 %97 = add i32 %51, i32 1;
    i1 %98 = scmp lt i32 %97, i32 %96;
    cbr i1 %98(prob = 0.97), ^while.body6, ^while.body7;
^indirect5:
    i32 %99 = load i32* %53;
    i32 %100 = load i32* %55;
    ubr ^b4;
^while.body10:
    i32 %101 = phi [^indirect4, i32 %80] [^while.body10, i32 %112];
    i32* %102 = getelementptr &(i32* %3)[i32 %101];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %7)[i32 %103];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %5)[i32 %101];
    i32 %107 = load i32* %106;
    i32 %108 = load i32* %58;
    i32 %109 = add i32 %108, i32 -1;
    i32 %110 = mul i32 %107, i32 %109;
    i32 %111 = add i32 %105, i32 %110;
    store i32* %104 with i32 %111;
    i32 %112 = add i32 %101, i32 1;
    i32 %113 = load i32* %84;
    i1 %114 = scmp lt i32 %112, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body10, ^b6;
}
