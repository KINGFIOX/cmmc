internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x, align 8;
internal [3000000 * i32]* @y, align 8;
internal [3000000 * i32]* @v, align 8;
internal [100010 * i32]* @a, align 8;
internal [100010 * i32]* @b, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [100010 * i32]* %0 = ptrcast [100010 * i32]* @x to [100010 * i32]*;
    i32* %1 = getelementptr &([100010 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [3000000 * i32]* %3 = ptrcast [3000000 * i32]* @y to [3000000 * i32]*;
    i32* %4 = getelementptr &([3000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [3000000 * i32]* %6 = ptrcast [3000000 * i32]* @v to [3000000 * i32]*;
    i32* %7 = getelementptr &([3000000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    [100010 * i32]* %9 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %10 = getelementptr &([100010 * i32]* %9)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @getarray(i32* %10);
    call (i32) -> void @starttime(i32 39);
    i32 %12 = add i32 %2, i32 -1;
    i1 %13 = icmp sgt i32 %12, i32 0;
    [100010 * i32]* %14 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %15 = getelementptr &([100010 * i32]* %14)[i64 0][i64 0];
    [4 * i8]* %16 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %17 = ptradd [4 * i8]* %16, i32 0;
    [4 * i8]* %18 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %19 = ptradd [4 * i8]* %18, i32 0;
    i8* %20 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %21 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    ubr ^while.body;
  ^while.body:
    i32 %22 = phi [^entry, i32 0] [^b1, i32 %23];
    cbr i1 %13(prob = 0.984615), ^b, ^b1;
  ^b:
    store i32* %17 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %20);
    ubr ^while.body1;
  ^b1:
    i32 %23 = add i32 %22, i32 1;
    i1 %24 = icmp slt i32 %23, i32 100;
    cbr i1 %24(prob = 0.99), ^while.body, ^b2;
  ^while.body1:
    i32 %25 = phi [^b, i32 0] [^b3, i32 %31];
    i32* %26 = getelementptr &(i32* %1)[i32 %25];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %26)[i64 1];
    i32 %29 = load i32* %28;
    i1 %30 = icmp slt i32 %27, i32 %29;
    i32 %31 = add i32 %25, i32 1;
    cbr i1 %30(prob = 0.984615), ^super.header, ^b3;
  ^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %15);
    ret i32 0;
  ^super.header:
    i32 %32 = add i32 %27, i32 3;
    i1 %33 = icmp sgt i32 %29, i32 %32;
    i32* %34 = getelementptr &(i32* %10)[i32 %25];
    i32 %35 = add i32 %29, i32 -3;
    cbr i1 %33(prob = 0.941176), ^while.body2, ^scalar.header;
  ^b3:
    i1 %36 = icmp sgt i32 %12, i32 %31;
    cbr i1 %36(prob = 0.984615), ^while.body1, ^b4;
  ^while.body2:
    i32 %37 = phi [^super.header, i32 %27] [^while.body2, i32 %66];
    i32* %38 = getelementptr &(i32* %4)[i32 %37];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %15)[i32 %39];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %7)[i32 %37];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %41, i32 %43;
    store i32* %40 with i32 %44;
    i32* %45 = getelementptr &(i32* %38)[i64 1];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %15)[i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %42)[i64 1];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    store i32* %47 with i32 %51;
    i32* %52 = getelementptr &(i32* %38)[i64 2];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %15)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %42)[i64 2];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    store i32* %54 with i32 %58;
    i32* %59 = getelementptr &(i32* %38)[i64 3];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %15)[i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %42)[i64 3];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    store i32* %61 with i32 %65;
    i32 %66 = add i32 %37, i32 4;
    i1 %67 = icmp sgt i32 %35, i32 %66;
    cbr i1 %67(prob = 0.941176), ^while.body2, ^scalar.header;
  ^b4:
    store i32* %19 with i32 %12;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %21);
    ubr ^while.body4;
  ^scalar.header:
    i32 %68 = phi [^super.header, i32 %27] [^while.body2, i32 %66];
    i1 %69 = icmp sgt i32 %29, i32 %68;
    cbr i1 %69(prob = 0.75), ^while.body3, ^scalar.final;
  ^while.body3 {scalar}:
    i32 %70 = phi [^scalar.header, i32 %68] [^while.body3, i32 %78];
    i32* %71 = getelementptr &(i32* %4)[i32 %70];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %15)[i32 %72];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %7)[i32 %70];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    store i32* %73 with i32 %77;
    i32 %78 = add i32 %70, i32 1;
    i1 %79 = icmp sgt i32 %29, i32 %78;
    cbr i1 %79(prob = 0.75), ^while.body3, ^scalar.final;
  ^scalar.final:
    i32 %80 = load i32* %34;
    i32 %81 = add i32 %80, i32 -1;
    cbr i1 %33(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^while.body4:
    i32 %82 = phi [^b4, i32 0] [^b5, i32 %88];
    i32* %83 = getelementptr &(i32* %1)[i32 %82];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %83)[i64 1];
    i32 %86 = load i32* %85;
    i1 %87 = icmp slt i32 %84, i32 %86;
    i32 %88 = add i32 %82, i32 1;
    cbr i1 %87(prob = 0.984615), ^super.header1, ^b5;
  ^super.header1:
    i32 %89 = add i32 %84, i32 3;
    i1 %90 = icmp sgt i32 %86, i32 %89;
    i32* %91 = getelementptr &(i32* %15)[i32 %82];
    i32 %92 = add i32 %86, i32 -3;
    cbr i1 %90(prob = 0.941176), ^while.body6, ^scalar.header2;
  ^while.body5:
    i32 %93 = phi [^scalar.final, i32 %27] [^while.body5, i32 %126];
    i32* %94 = getelementptr &(i32* %4)[i32 %93];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %15)[i32 %95];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %7)[i32 %93];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %81, i32 %99;
    i32 %101 = add i32 %97, i32 %100;
    store i32* %96 with i32 %101;
    i32* %102 = getelementptr &(i32* %94)[i64 1];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %15)[i32 %103];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %98)[i64 1];
    i32 %107 = load i32* %106;
    i32 %108 = mul i32 %81, i32 %107;
    i32 %109 = add i32 %105, i32 %108;
    store i32* %104 with i32 %109;
    i32* %110 = getelementptr &(i32* %94)[i64 2];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %15)[i32 %111];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %98)[i64 2];
    i32 %115 = load i32* %114;
    i32 %116 = mul i32 %81, i32 %115;
    i32 %117 = add i32 %113, i32 %116;
    store i32* %112 with i32 %117;
    i32* %118 = getelementptr &(i32* %94)[i64 3];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %15)[i32 %119];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %98)[i64 3];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %81, i32 %123;
    i32 %125 = add i32 %121, i32 %124;
    store i32* %120 with i32 %125;
    i32 %126 = add i32 %93, i32 4;
    i1 %127 = icmp sgt i32 %35, i32 %126;
    cbr i1 %127(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^b5:
    i1 %128 = icmp sgt i32 %12, i32 %88;
    cbr i1 %128(prob = 0.984615), ^while.body4, ^b1;
  ^scalar.header1:
    i32 %129 = phi [^scalar.final, i32 %27] [^while.body5, i32 %126];
    i1 %130 = icmp sgt i32 %29, i32 %129;
    cbr i1 %130(prob = 0.75), ^while.body7, ^b3;
  ^while.body6:
    i32 %131 = phi [^super.header1, i32 %84] [^while.body6, i32 %160];
    i32* %132 = getelementptr &(i32* %4)[i32 %131];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %10)[i32 %133];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %7)[i32 %131];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %135, i32 %137;
    store i32* %134 with i32 %138;
    i32* %139 = getelementptr &(i32* %132)[i64 1];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %10)[i32 %140];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %136)[i64 1];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %142, i32 %144;
    store i32* %141 with i32 %145;
    i32* %146 = getelementptr &(i32* %132)[i64 2];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %10)[i32 %147];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %136)[i64 2];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %149, i32 %151;
    store i32* %148 with i32 %152;
    i32* %153 = getelementptr &(i32* %132)[i64 3];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %10)[i32 %154];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %136)[i64 3];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %156, i32 %158;
    store i32* %155 with i32 %159;
    i32 %160 = add i32 %131, i32 4;
    i1 %161 = icmp sgt i32 %92, i32 %160;
    cbr i1 %161(prob = 0.941176), ^while.body6, ^scalar.header2;
  ^scalar.header2:
    i32 %162 = phi [^super.header1, i32 %84] [^while.body6, i32 %160];
    i1 %163 = icmp sgt i32 %86, i32 %162;
    cbr i1 %163(prob = 0.75), ^while.body8, ^scalar.final1;
  ^while.body7 {scalar}:
    i32 %164 = phi [^scalar.header1, i32 %129] [^while.body7, i32 %173];
    i32* %165 = getelementptr &(i32* %4)[i32 %164];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %15)[i32 %166];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %7)[i32 %164];
    i32 %170 = load i32* %169;
    i32 %171 = mul i32 %81, i32 %170;
    i32 %172 = add i32 %168, i32 %171;
    store i32* %167 with i32 %172;
    i32 %173 = add i32 %164, i32 1;
    i1 %174 = icmp sgt i32 %29, i32 %173;
    cbr i1 %174(prob = 0.75), ^while.body7, ^b3;
  ^while.body8 {scalar}:
    i32 %175 = phi [^scalar.header2, i32 %162] [^while.body8, i32 %183];
    i32* %176 = getelementptr &(i32* %4)[i32 %175];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %10)[i32 %177];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %7)[i32 %175];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    store i32* %178 with i32 %182;
    i32 %183 = add i32 %175, i32 1;
    i1 %184 = icmp sgt i32 %86, i32 %183;
    cbr i1 %184(prob = 0.75), ^while.body8, ^scalar.final1;
  ^scalar.final1:
    i32 %185 = load i32* %91;
    i32 %186 = add i32 %185, i32 -1;
    cbr i1 %90(prob = 0.941176), ^while.body9, ^scalar.header3;
  ^while.body9:
    i32 %187 = phi [^scalar.final1, i32 %84] [^while.body9, i32 %220];
    i32* %188 = getelementptr &(i32* %4)[i32 %187];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %10)[i32 %189];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %7)[i32 %187];
    i32 %193 = load i32* %192;
    i32 %194 = mul i32 %186, i32 %193;
    i32 %195 = add i32 %191, i32 %194;
    store i32* %190 with i32 %195;
    i32* %196 = getelementptr &(i32* %188)[i64 1];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %10)[i32 %197];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &(i32* %192)[i64 1];
    i32 %201 = load i32* %200;
    i32 %202 = mul i32 %186, i32 %201;
    i32 %203 = add i32 %199, i32 %202;
    store i32* %198 with i32 %203;
    i32* %204 = getelementptr &(i32* %188)[i64 2];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &(i32* %10)[i32 %205];
    i32 %207 = load i32* %206;
    i32* %208 = getelementptr &(i32* %192)[i64 2];
    i32 %209 = load i32* %208;
    i32 %210 = mul i32 %186, i32 %209;
    i32 %211 = add i32 %207, i32 %210;
    store i32* %206 with i32 %211;
    i32* %212 = getelementptr &(i32* %188)[i64 3];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %10)[i32 %213];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %192)[i64 3];
    i32 %217 = load i32* %216;
    i32 %218 = mul i32 %186, i32 %217;
    i32 %219 = add i32 %215, i32 %218;
    store i32* %214 with i32 %219;
    i32 %220 = add i32 %187, i32 4;
    i1 %221 = icmp sgt i32 %92, i32 %220;
    cbr i1 %221(prob = 0.941176), ^while.body9, ^scalar.header3;
  ^scalar.header3:
    i32 %222 = phi [^scalar.final1, i32 %84] [^while.body9, i32 %220];
    i1 %223 = icmp sgt i32 %86, i32 %222;
    cbr i1 %223(prob = 0.75), ^while.body10, ^b5;
  ^while.body10 {scalar}:
    i32 %224 = phi [^scalar.header3, i32 %222] [^while.body10, i32 %233];
    i32* %225 = getelementptr &(i32* %4)[i32 %224];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %10)[i32 %226];
    i32 %228 = load i32* %227;
    i32* %229 = getelementptr &(i32* %7)[i32 %224];
    i32 %230 = load i32* %229;
    i32 %231 = mul i32 %186, i32 %230;
    i32 %232 = add i32 %228, i32 %231;
    store i32* %227 with i32 %232;
    i32 %233 = add i32 %224, i32 1;
    i1 %234 = icmp sgt i32 %86, i32 %233;
    cbr i1 %234(prob = 0.75), ^while.body10, ^b5;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @b to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [100010 * i32]* %4 = ptrcast [100010 * i32]* @a to [100010 * i32]*;
    i32* %5 = getelementptr &([100010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
