internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %18];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i1 %11 = icmp sle i32 %0, i32 %9;
    i1 %12 = icmp slt i32 %9, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %13 = phi [^while.header, i32 0] [^b3, i32 %42];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    i1 %15 = icmp sle i32 %0, i32 %13;
    i32 %16 = mul i32 %0, i32 %13;
    i1 %17 = icmp slt i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %18 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %19 = phi [^while.header1, i32 0] [^b4, i32 %44];
    i1 %20 = icmp sle i32 %0, i32 %19;
    i1 %21 = or i1 %12, i1 %20;
    i1 %22 = icmp slt i32 %19, i32 0;
    i1 %23 = or i1 %11, i1 %22;
    i1 %24 = or i1 %21, i1 %23;
    i32 %25 = mul i32 %0, i32 %19;
    i32 %26 = add i32 %9, i32 %25;
    i32* %27 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %26];
    cbr i1 %24(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %28 = phi [^while.header2, i32 0] [^b5, i32 %51];
    i1 %29 = icmp sle i32 %0, i32 %28;
    i1 %30 = or i1 %15, i1 %29;
    i1 %31 = icmp slt i32 %28, i32 0;
    i1 %32 = or i1 %17, i1 %31;
    i1 %33 = or i1 %30, i1 %32;
    i32 %34 = mul i32 %0, i32 %28;
    i32 %35 = add i32 %13, i32 %34;
    i32* %36 = getelementptr &(i32* %8)[i32 %35];
    i1 %37 = icmp sgt i32 %0, i32 %28;
    cbr i1 %37(prob = 0.97), ^while.header4, ^b3;
  ^b1:
    i32 %38 = mul i32 %0, i32 %0;
    i1 %39 = icmp sgt i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %40 = getelementptr &(i32* %2)[i32 %26];
    i32 %41 = load i32* %40;
    ubr ^b4;
  ^b3:
    i32 %42 = add i32 %13, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %43 = phi [^while.body, i32 -1] [^b2, i32 %41];
    i32 %44 = add i32 %19, i32 1;
    i1 %45 = icmp sgt i32 %0, i32 %44;
    store i32* %27 with i32 %43;
    cbr i1 %45(prob = 0.97), ^while.body, ^b;
  ^while.header4:
    i32 %46 = phi [^while.header3, i32 0] [^b8, i32 %73];
    i1 %47 = icmp sgt i32 %0, i32 %46;
    cbr i1 %47(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %48 = phi [^b1, i32 0] [^while.body1, i32 %49];
    i32 %49 = add i32 %48, i32 4;
    i1 %50 = icmp sgt i32 %38, i32 %49;
    cbr i1 %50(prob = 0.89), ^while.body1, ^while.body2;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %38, i32* %6);
    ret i32 0;
  ^b5:
    i32 %51 = add i32 %28, i32 1;
    ubr ^while.header3;
  ^while.body1:
    i32* %52 = getelementptr &(i32* %8)[i32 %48];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %6)[i32 %48];
    store i32* %54 with i32 %53;
    i32* %55 = getelementptr &(i32* %52)[i64 1];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %52)[i64 2];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %54)[i64 2];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %52)[i64 3];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %54)[i64 3];
    store i32* %63 with i32 %62;
    ubr ^super.header;
  ^entry2:
    cbr i1 %33(prob = 0.5), ^b7, ^b6;
  ^while.body2:
    i32 %64 = phi [^super.header, i32 %48] [^while.body2, i32 %68];
    i32* %65 = getelementptr &(i32* %8)[i32 %64];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %6)[i32 %64];
    store i32* %67 with i32 %66;
    i32 %68 = add i32 %64, i32 1;
    i1 %69 = icmp sgt i32 %38, i32 %68;
    cbr i1 %69(prob = 0.75), ^while.body2, ^entry1;
  ^b6:
    i32 %70 = load i32* %36;
    ubr ^b7;
  ^b7:
    i32 %71 = phi [^entry2, i32 -1] [^b6, i32 %70];
    i1 %72 = icmp sgt i32 %71, i32 -1;
    cbr i1 %72(prob = 0.5), ^entry3, ^b8;
  ^b8:
    i32 %73 = add i32 %46, i32 1;
    ubr ^while.header4;
  ^entry3:
    i1 %74 = icmp sle i32 %0, i32 %46;
    i1 %75 = or i1 %15, i1 %74;
    i1 %76 = icmp slt i32 %46, i32 0;
    i1 %77 = or i1 %17, i1 %76;
    i1 %78 = or i1 %75, i1 %77;
    cbr i1 %78(prob = 0.5), ^b10, ^b9;
  ^b9:
    i32 %79 = add i32 %16, i32 %46;
    i32* %80 = getelementptr &(i32* %8)[i32 %79];
    i32 %81 = load i32* %80;
    ubr ^b10;
  ^b10:
    i32 %82 = phi [^entry3, i32 -1] [^b9, i32 %81];
    i1 %83 = icmp sgt i32 %82, i32 -1;
    cbr i1 %83(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    i1 %84 = or i1 %31, i1 %76;
    i1 %85 = or i1 %29, i1 %74;
    i1 %86 = or i1 %84, i1 %85;
    cbr i1 %86(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32 %87 = add i32 %34, i32 %46;
    i32* %88 = getelementptr &(i32* %8)[i32 %87];
    i32 %89 = load i32* %88;
    ubr ^b12;
  ^b12:
    i32 %90 = phi [^entry4, i32 -1] [^b11, i32 %89];
    i1 %91 = icmp slt i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %92 = add i32 %34, i32 %46;
    i32* %93 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %92];
    i32 %94 = add i32 %71, i32 %82;
    store i32* %93 with i32 %94;
    ubr ^b8;
  ^if.else:
    i32 %95 = add i32 %34, i32 %46;
    i32* %96 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %95];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %71, i32 %82;
    i1 %99 = icmp sgt i32 %97, i32 %98;
    cbr i1 %99(prob = 0.5), ^if.then, ^b8;
}
