internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    i1 %4 = icmp sgt i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 -4;
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    [2097152 * i32]* %8 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %9 = getelementptr &([2097152 * i32]* %8)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b9, i32 %59];
    i1 %11 = icmp sgt i32 %0, i32 %10;
    cbr i1 %11(prob = 0.984615), ^super.header, ^while.header1;
  ^super.header:
    i32 %12 = add i32 %0, i32 %10;
    cbr i1 %4(prob = 0.941176), ^b, ^b1;
  ^while.header1:
    i32 %13 = phi [^while.header, i32 0] [^b4, i32 %35];
    i32 %14 = mul i32 %0, i32 %13;
    i32* %15 = getelementptr &(i32* %9)[i32 %14];
    i1 %16 = icmp sgt i32 %0, i32 %13;
    cbr i1 %16(prob = 0.984615), ^while.header2, ^b2;
  ^b:
    i32 %17 = phi [^super.header, i32 0] [^b19, i32 %172];
    i32 %18 = phi [^super.header, i32 0] [^b19, i32 %170];
    i32 %19 = add i32 %10, i32 %17;
    i32* %20 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %19];
    i1 %21 = icmp sle i32 %0, i32 %18;
    cbr i1 %21(prob = 0.5), ^b5, ^b3;
  ^b1 {scalar}:
    i32 %22 = phi [^super.header, i32 0] [^b7, i32 %51] [^b19, i32 %170];
    i32 %23 = phi [^super.header, i32 0] [^b7, i32 %53] [^b19, i32 %172];
    i32 %24 = add i32 %10, i32 %23;
    i32* %25 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %24];
    i1 %26 = icmp sle i32 %0, i32 %22;
    cbr i1 %26(prob = 0.5), ^b7, ^b6;
  ^while.header2:
    i32 %27 = phi [^while.header1, i32 0] [^b23, i32 %179];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.header3, ^b4;
  ^b2:
    i1 %29 = icmp neq i32 %0, i32 0;
    i32 %30 = mul i32 %0, i32 %0;
    cbr i1 %29(prob = 0.984615), ^super.header1, ^entry1;
  ^b3:
    i32 %31 = mul i32 %0, i32 %18;
    i32* %32 = getelementptr &(i32* %2)[i32 %31];
    i32* %33 = getelementptr &(i32* %32)[i32 %10];
    i32 %34 = load i32* %33;
    ubr ^b5;
  ^b4:
    i32 %35 = add i32 %13, i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %36 = phi [^b, i32 -1] [^b3, i32 %34];
    i32 %37 = add i32 %12, i32 %17;
    i32* %38 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %37];
    i32 %39 = add i32 %18, i32 1;
    i1 %40 = icmp sle i32 %0, i32 %39;
    store i32* %20 with i32 %36;
    i32 %41 = add i32 %0, i32 %17;
    cbr i1 %40(prob = 0.5), ^b10, ^b8;
  ^b6:
    i32 %42 = mul i32 %0, i32 %22;
    i32* %43 = getelementptr &(i32* %2)[i32 %42];
    i32* %44 = getelementptr &(i32* %43)[i32 %10];
    i32 %45 = load i32* %44;
    ubr ^b7;
  ^while.header3:
    i32 %46 = mul i32 %0, i32 %27;
    i32* %47 = getelementptr &(i32* %9)[i32 %46];
    i32* %48 = getelementptr &(i32* %47)[i32 %13];
    i32* %49 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %46];
    cbr i1 %4(prob = 0.941176), ^b11, ^b12;
  ^b7:
    i32 %50 = phi [^b1, i32 -1] [^b6, i32 %45];
    i32 %51 = add i32 %22, i32 1;
    i1 %52 = icmp sgt i32 %0, i32 %51;
    store i32* %25 with i32 %50;
    i32 %53 = add i32 %0, i32 %23;
    cbr i1 %52(prob = 0.75), ^b1, ^b9;
  ^super.header1:
    i1 %54 = icmp sgt i32 %30, i32 4;
    cbr i1 %54(prob = 0.941176), ^super.header2, ^while.body;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %30, i32* %7);
    ret i32 0;
  ^b8:
    i32 %55 = mul i32 %0, i32 %39;
    i32* %56 = getelementptr &(i32* %2)[i32 %55];
    i32* %57 = getelementptr &(i32* %56)[i32 %10];
    i32 %58 = load i32* %57;
    ubr ^b10;
  ^b9:
    i32 %59 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b10:
    i32 %60 = phi [^b5, i32 -1] [^b8, i32 %58];
    i32 %61 = add i32 %12, i32 %41;
    i32* %62 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %61];
    i32 %63 = add i32 %18, i32 2;
    i1 %64 = icmp sle i32 %0, i32 %63;
    store i32* %38 with i32 %60;
    i32 %65 = add i32 %0, i32 %41;
    cbr i1 %64(prob = 0.5), ^b14, ^b13;
  ^b11:
    i32 %66 = phi [^while.header3, i32 0] [^b34, i32 %211];
    i32 %67 = load i32* %48;
    i1 %68 = icmp sgt i32 %67, i32 -1;
    cbr i1 %68(prob = 0.5), ^entry2, ^b15;
  ^b12 {scalar}:
    i32 %69 = phi [^while.header3, i32 0] [^b16, i32 %161] [^b34, i32 %211];
    i32 %70 = load i32* %48;
    i1 %71 = icmp sgt i32 %70, i32 -1;
    cbr i1 %71(prob = 0.5), ^entry3, ^b16;
  ^super.header2:
    i32 %72 = add i32 %30, i32 -4;
    i1 %73 = icmp sgt i32 %72, i32 16;
    i32 %74 = add i32 %30, i32 -20;
    cbr i1 %73(prob = 0.941176), ^while.body1, ^while.body2;
  ^while.body {scalar}:
    i32 %75 = phi [^super.header1, i32 0] [^while.body, i32 %79] [^while.body2, i32 %159];
    i32* %76 = getelementptr &(i32* %9)[i32 %75];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %7)[i32 %75];
    store i32* %78 with i32 %77;
    i32 %79 = add i32 %75, i32 1;
    i1 %80 = icmp sgt i32 %30, i32 %79;
    cbr i1 %80(prob = 0.75), ^while.body, ^entry1;
  ^b13:
    i32 %81 = mul i32 %0, i32 %63;
    i32* %82 = getelementptr &(i32* %2)[i32 %81];
    i32* %83 = getelementptr &(i32* %82)[i32 %10];
    i32 %84 = load i32* %83;
    ubr ^b14;
  ^b14:
    i32 %85 = phi [^b10, i32 -1] [^b13, i32 %84];
    i32 %86 = add i32 %12, i32 %65;
    i32* %87 = getelementptr &([2097152 * i32]* %8)[i64 0][i32 %86];
    i32 %88 = add i32 %18, i32 3;
    i1 %89 = icmp sle i32 %0, i32 %88;
    store i32* %62 with i32 %85;
    i32 %90 = add i32 %0, i32 %65;
    cbr i1 %89(prob = 0.5), ^b19, ^b17;
  ^entry2:
    i1 %91 = icmp sle i32 %0, i32 %66;
    cbr i1 %91(prob = 0.5), ^b20, ^b18;
  ^while.body1:
    i32 %92 = phi [^super.header2, i32 0] [^while.body1, i32 %141];
    i32* %93 = getelementptr &(i32* %9)[i32 %92];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %7)[i32 %92];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %95)[i64 2];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %95)[i64 3];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %93)[i64 4];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %95)[i64 4];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %93)[i64 5];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %95)[i64 5];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %93)[i64 6];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %95)[i64 6];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %93)[i64 7];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %95)[i64 7];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %93)[i64 8];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %95)[i64 8];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %93)[i64 9];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %95)[i64 9];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %93)[i64 10];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %95)[i64 10];
    store i32* %125 with i32 %124;
    i32* %126 = getelementptr &(i32* %93)[i64 11];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %95)[i64 11];
    store i32* %128 with i32 %127;
    i32* %129 = getelementptr &(i32* %93)[i64 12];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %95)[i64 12];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %93)[i64 13];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %95)[i64 13];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %93)[i64 14];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %95)[i64 14];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %93)[i64 15];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %95)[i64 15];
    store i32* %140 with i32 %139;
    i32 %141 = add i32 %92, i32 16;
    i1 %142 = icmp sgt i32 %74, i32 %141;
    cbr i1 %142(prob = 0.941176), ^while.body1, ^while.body2;
  ^entry3:
    i1 %143 = icmp sle i32 %0, i32 %69;
    cbr i1 %143(prob = 0.5), ^b22, ^b21;
  ^b15:
    i32 %144 = phi [^b11, i32 %67] [^indirect, i32 %184];
    i1 %145 = icmp sgt i32 %144, i32 -1;
    cbr i1 %145(prob = 0.5), ^entry4, ^b24;
  ^while.body2 {scalar}:
    i32 %146 = phi [^super.header2, i32 0] [^while.body1, i32 %141] [^while.body2, i32 %159];
    i32* %147 = getelementptr &(i32* %9)[i32 %146];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %7)[i32 %146];
    store i32* %149 with i32 %148;
    i32* %150 = getelementptr &(i32* %147)[i64 1];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &(i32* %149)[i64 1];
    store i32* %152 with i32 %151;
    i32* %153 = getelementptr &(i32* %147)[i64 2];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %149)[i64 2];
    store i32* %155 with i32 %154;
    i32* %156 = getelementptr &(i32* %147)[i64 3];
    i32 %157 = load i32* %156;
    i32* %158 = getelementptr &(i32* %149)[i64 3];
    store i32* %158 with i32 %157;
    i32 %159 = add i32 %146, i32 4;
    i1 %160 = icmp sgt i32 %72, i32 %159;
    cbr i1 %160(prob = 0.75), ^while.body2, ^while.body;
  ^b16:
    i32 %161 = add i32 %69, i32 1;
    i1 %162 = icmp sgt i32 %0, i32 %161;
    cbr i1 %162(prob = 0.75), ^b12, ^b23;
  ^b17:
    i32 %163 = mul i32 %0, i32 %88;
    i32* %164 = getelementptr &(i32* %2)[i32 %163];
    i32* %165 = getelementptr &(i32* %164)[i32 %10];
    i32 %166 = load i32* %165;
    ubr ^b19;
  ^b18:
    i32* %167 = getelementptr &(i32* %15)[i32 %66];
    i32 %168 = load i32* %167;
    ubr ^b20;
  ^b19:
    i32 %169 = phi [^b14, i32 -1] [^b17, i32 %166];
    i32 %170 = add i32 %18, i32 4;
    i1 %171 = icmp sgt i32 %5, i32 %170;
    store i32* %87 with i32 %169;
    i32 %172 = add i32 %0, i32 %90;
    cbr i1 %171(prob = 0.941176), ^b, ^b1;
  ^b20:
    i32 %173 = phi [^entry2, i32 -1] [^b18, i32 %168];
    i1 %174 = icmp sgt i32 %173, i32 -1;
    cbr i1 %174(prob = 0.5), ^entry5, ^indirect;
  ^b21:
    i32* %175 = getelementptr &(i32* %15)[i32 %69];
    i32 %176 = load i32* %175;
    ubr ^b22;
  ^b22:
    i32 %177 = phi [^entry3, i32 -1] [^b21, i32 %176];
    i1 %178 = icmp sgt i32 %177, i32 -1;
    cbr i1 %178(prob = 0.5), ^entry6, ^b16;
  ^b23:
    i32 %179 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^entry4:
    i32 %180 = add i32 %66, i32 1;
    i1 %181 = icmp sle i32 %0, i32 %180;
    cbr i1 %181(prob = 0.5), ^b26, ^b25;
  ^b24:
    i32 %182 = load i32* %48;
    i1 %183 = icmp sgt i32 %182, i32 -1;
    cbr i1 %183(prob = 0.5), ^entry7, ^b27;
  ^indirect:
    i32 %184 = load i32* %48;
    ubr ^b15;
  ^entry5:
    cbr i1 %91(prob = 0.5), ^b29, ^b28;
  ^b25:
    i32* %185 = getelementptr &(i32* %15)[i32 %180];
    i32 %186 = load i32* %185;
    ubr ^b26;
  ^entry6:
    cbr i1 %143(prob = 0.5), ^b31, ^b30;
  ^b26:
    i32 %187 = phi [^entry4, i32 -1] [^b25, i32 %186];
    i1 %188 = icmp sgt i32 %187, i32 -1;
    cbr i1 %188(prob = 0.5), ^entry8, ^b24;
  ^entry7:
    i32 %189 = add i32 %66, i32 2;
    i1 %190 = icmp sle i32 %0, i32 %189;
    cbr i1 %190(prob = 0.5), ^b33, ^b32;
  ^b27:
    i32 %191 = phi [^b24, i32 %182] [^indirect1, i32 %221];
    i1 %192 = icmp sgt i32 %191, i32 -1;
    cbr i1 %192(prob = 0.5), ^entry9, ^b34;
  ^b28:
    i32* %193 = getelementptr &(i32* %47)[i32 %66];
    i32 %194 = load i32* %193;
    ubr ^b29;
  ^b29:
    i32 %195 = phi [^entry5, i32 -1] [^b28, i32 %194];
    i32* %196 = getelementptr &(i32* %49)[i32 %66];
    i32 %197 = add i32 %67, i32 %173;
    i1 %198 = icmp slt i32 %195, i32 0;
    cbr i1 %198(prob = 0.5), ^if.then, ^if.else;
  ^b30:
    i32* %199 = getelementptr &(i32* %47)[i32 %69];
    i32 %200 = load i32* %199;
    ubr ^b31;
  ^b31:
    i32 %201 = phi [^entry6, i32 -1] [^b30, i32 %200];
    i32* %202 = getelementptr &(i32* %49)[i32 %69];
    i32 %203 = add i32 %70, i32 %177;
    i1 %204 = icmp slt i32 %201, i32 0;
    cbr i1 %204(prob = 0.5), ^if.then1, ^if.else1;
  ^entry8:
    cbr i1 %181(prob = 0.5), ^b36, ^b35;
  ^b32:
    i32* %205 = getelementptr &(i32* %15)[i32 %189];
    i32 %206 = load i32* %205;
    ubr ^b33;
  ^b33:
    i32 %207 = phi [^entry7, i32 -1] [^b32, i32 %206];
    i1 %208 = icmp sgt i32 %207, i32 -1;
    cbr i1 %208(prob = 0.5), ^entry10, ^indirect1;
  ^entry9:
    i32 %209 = add i32 %66, i32 3;
    i1 %210 = icmp sle i32 %0, i32 %209;
    cbr i1 %210(prob = 0.5), ^b38, ^b37;
  ^b34:
    i32 %211 = add i32 %66, i32 4;
    i1 %212 = icmp sgt i32 %5, i32 %211;
    cbr i1 %212(prob = 0.941176), ^b11, ^b12;
  ^if.then:
    store i32* %196 with i32 %197;
    ubr ^indirect;
  ^if.then1:
    store i32* %202 with i32 %203;
    ubr ^b16;
  ^b35:
    i32* %213 = getelementptr &(i32* %47)[i32 %180];
    i32 %214 = load i32* %213;
    ubr ^b36;
  ^if.else:
    i32 %215 = load i32* %196;
    i1 %216 = icmp slt i32 %197, i32 %215;
    cbr i1 %216(prob = 0.5), ^if.then, ^indirect;
  ^b36:
    i32 %217 = phi [^entry8, i32 -1] [^b35, i32 %214];
    i32* %218 = getelementptr &(i32* %49)[i32 %180];
    i32 %219 = add i32 %144, i32 %187;
    i1 %220 = icmp slt i32 %217, i32 0;
    cbr i1 %220(prob = 0.5), ^if.then2, ^if.else2;
  ^indirect1:
    i32 %221 = load i32* %48;
    ubr ^b27;
  ^if.else1:
    i32 %222 = load i32* %202;
    i1 %223 = icmp slt i32 %203, i32 %222;
    cbr i1 %223(prob = 0.5), ^if.then1, ^b16;
  ^entry10:
    cbr i1 %190(prob = 0.5), ^b40, ^b39;
  ^b37:
    i32* %224 = getelementptr &(i32* %15)[i32 %209];
    i32 %225 = load i32* %224;
    ubr ^b38;
  ^b38:
    i32 %226 = phi [^entry9, i32 -1] [^b37, i32 %225];
    i1 %227 = icmp sgt i32 %226, i32 -1;
    cbr i1 %227(prob = 0.5), ^entry11, ^b34;
  ^if.then2:
    store i32* %218 with i32 %219;
    ubr ^b24;
  ^b39:
    i32* %228 = getelementptr &(i32* %47)[i32 %189];
    i32 %229 = load i32* %228;
    ubr ^b40;
  ^if.else2:
    i32 %230 = load i32* %218;
    i1 %231 = icmp slt i32 %219, i32 %230;
    cbr i1 %231(prob = 0.5), ^if.then2, ^b24;
  ^b40:
    i32 %232 = phi [^entry10, i32 -1] [^b39, i32 %229];
    i32* %233 = getelementptr &(i32* %49)[i32 %189];
    i32 %234 = add i32 %182, i32 %207;
    i1 %235 = icmp slt i32 %232, i32 0;
    cbr i1 %235(prob = 0.5), ^if.then3, ^if.else3;
  ^entry11:
    cbr i1 %210(prob = 0.5), ^b42, ^b41;
  ^if.then3:
    store i32* %233 with i32 %234;
    ubr ^indirect1;
  ^b41:
    i32* %236 = getelementptr &(i32* %47)[i32 %209];
    i32 %237 = load i32* %236;
    ubr ^b42;
  ^if.else3:
    i32 %238 = load i32* %233;
    i1 %239 = icmp slt i32 %234, i32 %238;
    cbr i1 %239(prob = 0.5), ^if.then3, ^indirect1;
  ^b42:
    i32 %240 = phi [^entry11, i32 -1] [^b41, i32 %237];
    i32* %241 = getelementptr &(i32* %49)[i32 %209];
    i32 %242 = add i32 %191, i32 %226;
    i1 %243 = icmp slt i32 %240, i32 0;
    cbr i1 %243(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    store i32* %241 with i32 %242;
    ubr ^b34;
  ^if.else4:
    i32 %244 = load i32* %241;
    i1 %245 = icmp slt i32 %242, i32 %244;
    cbr i1 %245(prob = 0.5), ^if.then4, ^b34;
}
