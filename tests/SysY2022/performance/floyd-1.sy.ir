internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    i1 %4 = icmp sgt i32 %0, i32 0;
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    cbr i1 %4(prob = 0.984615), ^b, ^b1;
  ^b:
    [4 * i8]* %7 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %8 = ptradd [4 * i8]* %7, i32 0;
    store i32* %8 with i32 %0;
    i8* %9 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %9);
    [2097152 * i32]* %10 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %11 = getelementptr &([2097152 * i32]* %10)[i64 0][i64 0];
    ubr ^while.body;
  ^b1:
    i32 %12 = mul i32 %0, i32 %0;
    i1 %13 = icmp neq i32 %0, i32 0;
    cbr i1 %13(prob = 0.984615), ^b2, ^b3;
  ^while.body:
    i32 %14 = phi [^b, i32 0] [^b8, i32 %49];
    i32 %15 = phi [^b, i32 0] [^b8, i32 %47];
    i32* %16 = getelementptr &(i32* %11)[i32 %15];
    ubr ^while.body1;
  ^b2:
    [4 * i8]* %17 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %18 = ptradd [4 * i8]* %17, i32 0;
    store i32* %18 with i32 %12;
    i8* %19 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %12, i8* %19);
    ubr ^b3;
  ^b3:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %12, i32* %6);
    ret i32 0;
  ^while.body1:
    i32 %20 = phi [^while.body, i32 0] [^b7, i32 %44];
    i32 %21 = phi [^while.body, i32 0] [^b7, i32 %43];
    i32 %22 = phi [^while.body, i32 0] [^b7, i32 %42];
    i32 %23 = phi [^while.body, i32 0] [^b7, i32 %40];
    i32* %24 = getelementptr &([2097152 * i32]* %10)[i64 0][i32 %22];
    i32* %25 = getelementptr &(i32* %16)[i32 %21];
    ubr ^b4;
  ^b4:
    i32 %26 = phi [^while.body1, i32 0] [^b6, i32 %33];
    i32 %27 = load i32* %25;
    i1 %28 = icmp sgt i32 %27, i32 -1;
    cbr i1 %28(prob = 0.5), ^b5, ^b6;
  ^b5:
    i32* %29 = getelementptr &(i32* %11)[i32 %26];
    i32* %30 = getelementptr &(i32* %29)[i32 %14];
    i32 %31 = load i32* %30;
    i1 %32 = icmp sgt i32 %31, i32 -1;
    cbr i1 %32(prob = 0.5), ^if.then, ^b6;
  ^b6:
    i32 %33 = add i32 %26, i32 1;
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.984615), ^b4, ^b7;
  ^if.then:
    i32* %35 = getelementptr &(i32* %29)[i32 %20];
    i32 %36 = load i32* %35;
    i1 %37 = icmp slt i32 %36, i32 0;
    i32* %38 = getelementptr &(i32* %24)[i32 %26];
    i32 %39 = add i32 %27, i32 %31;
    cbr i1 %37(prob = 0.5), ^if.then1, ^if.else;
  ^b7:
    i32 %40 = add i32 %23, i32 1;
    i1 %41 = icmp sgt i32 %0, i32 %40;
    i32 %42 = add i32 %0, i32 %22;
    i32 %43 = add i32 %0, i32 %21;
    i32 %44 = add i32 %0, i32 %20;
    cbr i1 %41(prob = 0.984615), ^while.body1, ^b8;
  ^if.then1:
    store i32* %38 with i32 %39;
    ubr ^b6;
  ^if.else:
    i32 %45 = load i32* %38;
    i1 %46 = icmp slt i32 %39, i32 %45;
    cbr i1 %46(prob = 0.5), ^if.then1, ^b6;
  ^b8:
    i32 %47 = add i32 %15, i32 1;
    i1 %48 = icmp sgt i32 %0, i32 %47;
    i32 %49 = add i32 %0, i32 %14;
    cbr i1 %48(prob = 0.984615), ^while.body, ^b1;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %8 = add i32 %0, i32 15;
    i32 %9 = add i32 %1, i32 -3;
    i1 %10 = icmp slt i32 %8, i32 %9;
    i32 %11 = add i32 %1, i32 -18;
    cbr i1 %10(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %12 = phi [^b, i32 %0] [^scalar.header1, i32 %66] [^b3, i32 %87];
    i1 %13 = icmp sgt i32 %1, i32 %12;
    cbr i1 %13(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %14 = phi [^super.header, i32 %0] [^b1, i32 %63];
    i32* %15 = getelementptr &(i32* %7)[i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %5)[i32 %14];
    store i32* %17 with i32 %16;
    i32* %18 = getelementptr &(i32* %15)[i64 1];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %17)[i64 1];
    store i32* %20 with i32 %19;
    i32* %21 = getelementptr &(i32* %15)[i64 2];
    i32 %22 = load i32* %21;
    i32* %23 = getelementptr &(i32* %17)[i64 2];
    store i32* %23 with i32 %22;
    i32* %24 = getelementptr &(i32* %15)[i64 3];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %17)[i64 3];
    store i32* %26 with i32 %25;
    i32* %27 = getelementptr &(i32* %15)[i64 4];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %17)[i64 4];
    store i32* %29 with i32 %28;
    i32* %30 = getelementptr &(i32* %15)[i64 5];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %17)[i64 5];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %15)[i64 6];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %17)[i64 6];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %15)[i64 7];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %17)[i64 7];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %15)[i64 8];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %17)[i64 8];
    store i32* %41 with i32 %40;
    i32* %42 = getelementptr &(i32* %15)[i64 9];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %17)[i64 9];
    store i32* %44 with i32 %43;
    i32* %45 = getelementptr &(i32* %15)[i64 10];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %17)[i64 10];
    store i32* %47 with i32 %46;
    i32* %48 = getelementptr &(i32* %15)[i64 11];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %17)[i64 11];
    store i32* %50 with i32 %49;
    i32* %51 = getelementptr &(i32* %15)[i64 12];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %17)[i64 12];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %15)[i64 13];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %17)[i64 13];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %15)[i64 14];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %17)[i64 14];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %15)[i64 15];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %17)[i64 15];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %14, i32 16;
    i1 %64 = icmp sgt i32 %11, i32 %63;
    cbr i1 %64(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %65 = phi [^super.header, i32 %0] [^b1, i32 %63];
    i32 %66 = phi [^super.header, i32 undef] [^b1, i32 %63];
    i1 %67 = icmp sgt i32 %9, i32 %65;
    cbr i1 %67(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %68 = phi [^scalar.header, i32 %12] [^b2, i32 %72];
    i32* %69 = getelementptr &(i32* %7)[i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %5)[i32 %68];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %68, i32 1;
    i1 %73 = icmp sgt i32 %1, i32 %72;
    cbr i1 %73(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %74 = phi [^scalar.header1, i32 %65] [^b3, i32 %87];
    i32* %75 = getelementptr &(i32* %7)[i32 %74];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %5)[i32 %74];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %75)[i64 1];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %77)[i64 1];
    store i32* %80 with i32 %79;
    i32* %81 = getelementptr &(i32* %75)[i64 2];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %77)[i64 2];
    store i32* %83 with i32 %82;
    i32* %84 = getelementptr &(i32* %75)[i64 3];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %77)[i64 3];
    store i32* %86 with i32 %85;
    i32 %87 = add i32 %74, i32 4;
    i1 %88 = icmp sgt i32 %9, i32 %87;
    cbr i1 %88(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    i32 %7 = mul i32 %4, i32 4;
    [2097152 * i32]* %8 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %9 = getelementptr &([2097152 * i32]* %8)[i64 0][i64 0];
    [2097152 * i32]* %10 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^b4, i32 %64];
    i32* %12 = getelementptr &([2097152 * i32]* %10)[i64 0][i32 %11];
    i32* %13 = getelementptr &(i32* %12)[i32 %4];
    i32* %14 = getelementptr &(i32* %13)[i32 %4];
    i32* %15 = getelementptr &(i32* %14)[i32 %4];
    i32* %16 = getelementptr &(i32* %9)[i32 %11];
    i32* %17 = getelementptr &(i32* %16)[i32 %4];
    i32* %18 = getelementptr &(i32* %17)[i32 %4];
    i32* %19 = getelementptr &(i32* %18)[i32 %4];
    ubr ^while.body;
  ^cond:
    i1 %20 = icmp sgt i32 %4, i32 0;
    cbr i1 %20(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %21 = phi [^cond, i32 %0] [^b5, i32 %66];
    i32* %22 = getelementptr &([2097152 * i32]* %10)[i64 0][i32 %21];
    i32* %23 = getelementptr &(i32* %9)[i32 %21];
    ubr ^while.body1;
  ^while.body:
    i32 %24 = phi [^b1, i32 0] [^while.body, i32 %39];
    i32 %25 = phi [^b1, i32 0] [^while.body, i32 %41];
    i32 %26 = phi [^b1, i32 0] [^while.body, i32 %42];
    i32* %27 = getelementptr &(i32* %16)[i32 %26];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %12)[i32 %25];
    store i32* %29 with i32 %28;
    i32* %30 = getelementptr &(i32* %17)[i32 %26];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %13)[i32 %25];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %18)[i32 %26];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %14)[i32 %25];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %19)[i32 %26];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %15)[i32 %25];
    store i32* %38 with i32 %37;
    i32 %39 = add i32 %24, i32 4;
    i1 %40 = icmp sgt i32 %6, i32 %39;
    i32 %41 = add i32 %7, i32 %25;
    i32 %42 = add i32 %7, i32 %26;
    cbr i1 %40(prob = 0.941176), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %43 = icmp sgt i32 %4, i32 %39;
    cbr i1 %43(prob = 0.75), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %44 = phi [^b2, i32 0] [^while.body1, i32 %53];
    i32 %45 = phi [^b2, i32 0] [^while.body1, i32 %52];
    i32 %46 = phi [^b2, i32 0] [^while.body1, i32 %50];
    i32* %47 = getelementptr &(i32* %23)[i32 %44];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %22)[i32 %45];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %46, i32 1;
    i1 %51 = icmp sgt i32 %4, i32 %50;
    i32 %52 = add i32 %4, i32 %45;
    i32 %53 = add i32 %4, i32 %44;
    cbr i1 %51(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %54 = phi [^scalar.header, i32 %42] [^while.body2, i32 %63];
    i32 %55 = phi [^scalar.header, i32 %41] [^while.body2, i32 %62];
    i32 %56 = phi [^scalar.header, i32 %39] [^while.body2, i32 %60];
    i32* %57 = getelementptr &(i32* %16)[i32 %54];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %12)[i32 %55];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %56, i32 1;
    i1 %61 = icmp sgt i32 %4, i32 %60;
    i32 %62 = add i32 %4, i32 %55;
    i32 %63 = add i32 %4, i32 %54;
    cbr i1 %61(prob = 0.75), ^while.body2, ^b4;
  ^b4:
    i32 %64 = add i32 %11, i32 1;
    i1 %65 = icmp sgt i32 %1, i32 %64;
    cbr i1 %65(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %66 = add i32 %21, i32 1;
    i1 %67 = icmp sgt i32 %1, i32 %66;
    cbr i1 %67(prob = 0.984615), ^b2, ^b3;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
