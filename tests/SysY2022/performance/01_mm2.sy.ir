internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp slt i32 %0, i32 1;
    [4 * i8]* %3 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %4 = ptradd [4 * i8]* %3, i32 0;
    [4 * i8]* %5 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %6 = ptradd [4 * i8]* %5, i32 0;
    [4 * i8]* %7 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %8 = ptradd [4 * i8]* %7, i32 0;
    [4 * i8]* %9 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_4 to [4 * i8]*;
    i32* %10 = ptradd [4 * i8]* %9, i32 0;
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %12 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    i8* %13 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %14 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %15 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    i8* %16 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %17 = phi [^entry, i32 0] [^b1, i32 %25];
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* %12)[i64 0][i32 %17];
    ubr ^while.body1;
  ^b:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body2;
  ^while.body1:
    i32 %19 = phi [^while.body, i32 0] [^while.body1, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([1024 * i32]* %18)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b1;
  ^while.body2:
    i32 %24 = phi [^b, i32 0] [^b3, i32 %27];
    cbr i1 %1(prob = 0.984615), ^b2, ^b3;
  ^b1:
    i32 %25 = add i32 %17, i32 1;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    store i32* %4 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %13);
    cbr i1 %2(prob = 0.5), ^b6, ^b5;
  ^b3:
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp slt i32 %27, i32 5;
    cbr i1 %28(prob = 0.8), ^while.body2, ^b7;
  ^b4:
    i32 %29 = phi [^b1, i32 0] [^b11, i32 %42];
    [1024 * i32]* %30 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i32 %29];
    ubr ^while.body3;
  ^b5:
    store i32* %6 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %14);
    ubr ^b6;
  ^b6:
    store i32* %8 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %15);
    cbr i1 %2(prob = 0.5), ^b3, ^b8;
  ^b7:
    cbr i1 %1(prob = 0.984615), ^b9, ^b10;
  ^b8:
    store i32* %10 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %16);
    ubr ^b3;
  ^b9:
    [8 * i8]* %31 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %32 = ptradd [8 * i8]* %31, i32 0;
    store i32* %32 with i32 0;
    i32* %33 = ptradd [8 * i8]* %31, i32 4;
    store i32* %33 with i32 %0;
    i8* %34 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %34);
    i32 %35 = load i32* %32;
    ubr ^b10;
  ^while.body3:
    i32 %36 = phi [^b4, i32 0] [^while.body3, i32 %39];
    i32 %37 = call () -> i32 @getint();
    i32* %38 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %36];
    store i32* %38 with i32 %37;
    i32 %39 = add i32 %36, i32 1;
    i1 %40 = icmp sgt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.984615), ^while.body3, ^b11;
  ^b10:
    i32 %41 = phi [^b7, i32 0] [^b9, i32 %35];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %41);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b11:
    i32 %42 = add i32 %29, i32 1;
    i1 %43 = icmp sgt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.984615), ^b4, ^b;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %3 = ptradd [8 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^cond, ^b1;
  ^cond:
    i1 %6 = icmp sgt i32 %4, i32 3;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    cbr i1 %6(prob = 0.5), ^cond1, ^b2;
  ^b1:
    i32 %8 = phi [^b, i32 0] [^scalar.final, i32 %27] [^scalar.final3, i32 %128] [^scalar.final4, i32 %138];
    i32* %9 = ptradd [8 * i8]* %2, i32 0;
    atomicadd i32* %9, i32 %8;
    ret;
  ^b2:
    i32 %11 = phi [^cond, i32 %0] [^scalar.final, i32 %98];
    i32 %12 = phi [^cond, i32 0] [^scalar.final, i32 %27];
    [1024 * i32]* %13 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i32 %11];
    ubr ^while.body;
  ^cond1:
    i32 %14 = add i32 %4, i32 -3;
    i1 %15 = icmp sgt i32 %14, i32 15;
    i32 %16 = add i32 %4, i32 -18;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %17 = phi [^cond1, i32 0] [^scalar.final4, i32 %138];
    i32 %18 = phi [^cond1, i32 %0] [^scalar.final4, i32 %139];
    [1024 * i32]* %19 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i32 %18];
    ubr ^while.body1;
  ^b4:
    i32 %20 = phi [^cond1, i32 %0] [^scalar.final3, i32 %129];
    i32 %21 = phi [^cond1, i32 0] [^scalar.final3, i32 %128];
    [1024 * i32]* %22 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i32 %20];
    ubr ^while.body2;
  ^while.body {scalar}:
    i32 %23 = phi [^b2, i32 0] [^while.body, i32 %28];
    i32 %24 = phi [^b2, i32 %12] [^while.body, i32 %27];
    i32* %25 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %23];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %24, i32 %26;
    i32 %28 = add i32 %23, i32 1;
    i1 %29 = icmp sgt i32 %4, i32 %28;
    cbr i1 %29(prob = 0.75), ^while.body, ^scalar.final;
  ^while.body1:
    i32 %30 = phi [^b3, i32 0] [^while.body1, i32 %80];
    i32 %31 = phi [^b3, i32 %17] [^while.body1, i32 %79];
    i32* %32 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %30];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %32)[i64 4];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %32)[i64 5];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %32)[i64 6];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %32)[i64 7];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %32)[i64 8];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %32)[i64 9];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %32)[i64 10];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %32)[i64 11];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32* %68 = getelementptr &(i32* %32)[i64 12];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %32)[i64 13];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32* %74 = getelementptr &(i32* %32)[i64 14];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &(i32* %32)[i64 15];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32 %80 = add i32 %30, i32 16;
    i1 %81 = icmp sgt i32 %16, i32 %80;
    cbr i1 %81(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %82 = phi [^b4, i32 %21] [^while.body2, i32 %95];
    i32 %83 = phi [^b4, i32 0] [^while.body2, i32 %96];
    i32* %84 = getelementptr &([1024 * i32]* %22)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %82, i32 %85;
    i32* %87 = getelementptr &(i32* %84)[i64 1];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    i32* %90 = getelementptr &(i32* %84)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    i32* %93 = getelementptr &(i32* %84)[i64 3];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = add i32 %83, i32 4;
    i1 %97 = icmp sgt i32 %14, i32 %96;
    cbr i1 %97(prob = 0.75), ^while.body2, ^scalar.final1;
  ^scalar.final:
    i32 %98 = add i32 %11, i32 1;
    i1 %99 = icmp sgt i32 %1, i32 %98;
    cbr i1 %99(prob = 0.984615), ^b2, ^b1;
  ^scalar.header:
    i1 %100 = icmp sgt i32 %14, i32 %80;
    cbr i1 %100(prob = 0.75), ^while.body3, ^scalar.final2;
  ^scalar.final1:
    i1 %101 = icmp sgt i32 %4, i32 %96;
    cbr i1 %101(prob = 0.75), ^while.body4, ^scalar.final3;
  ^while.body3 {scalar}:
    i32 %102 = phi [^scalar.header, i32 %79] [^while.body3, i32 %115];
    i32 %103 = phi [^scalar.header, i32 %80] [^while.body3, i32 %116];
    i32* %104 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %103];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %102, i32 %105;
    i32* %107 = getelementptr &(i32* %104)[i64 1];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %106, i32 %108;
    i32* %110 = getelementptr &(i32* %104)[i64 2];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %104)[i64 3];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %112, i32 %114;
    i32 %116 = add i32 %103, i32 4;
    i1 %117 = icmp sgt i32 %14, i32 %116;
    cbr i1 %117(prob = 0.75), ^while.body3, ^scalar.final2;
  ^scalar.final2:
    i32 %118 = phi [^scalar.header, i32 %79] [^while.body3, i32 %115];
    i32 %119 = phi [^scalar.header, i32 %80] [^while.body3, i32 %116];
    i1 %120 = icmp sgt i32 %4, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body5, ^scalar.final4;
  ^while.body4 {scalar}:
    i32 %121 = phi [^scalar.final1, i32 %96] [^while.body4, i32 %126];
    i32 %122 = phi [^scalar.final1, i32 %95] [^while.body4, i32 %125];
    i32* %123 = getelementptr &([1024 * i32]* %22)[i64 0][i32 %121];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %122, i32 %124;
    i32 %126 = add i32 %121, i32 1;
    i1 %127 = icmp sgt i32 %4, i32 %126;
    cbr i1 %127(prob = 0.75), ^while.body4, ^scalar.final3;
  ^scalar.final3:
    i32 %128 = phi [^scalar.final1, i32 %95] [^while.body4, i32 %125];
    i32 %129 = add i32 %20, i32 1;
    i1 %130 = icmp sgt i32 %1, i32 %129;
    cbr i1 %130(prob = 0.984615), ^b4, ^b1;
  ^while.body5 {scalar}:
    i32 %131 = phi [^scalar.final2, i32 %119] [^while.body5, i32 %136];
    i32 %132 = phi [^scalar.final2, i32 %118] [^while.body5, i32 %135];
    i32* %133 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %131];
    i32 %134 = load i32* %133;
    i32 %135 = add i32 %132, i32 %134;
    i32 %136 = add i32 %131, i32 1;
    i1 %137 = icmp sgt i32 %4, i32 %136;
    cbr i1 %137(prob = 0.75), ^while.body5, ^scalar.final4;
  ^scalar.final4:
    i32 %138 = phi [^scalar.final2, i32 %118] [^while.body5, i32 %135];
    i32 %139 = add i32 %18, i32 1;
    i1 %140 = icmp sgt i32 %1, i32 %139;
    cbr i1 %140(prob = 0.984615), ^b3, ^b1;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    [1024 * [1024 * i32]]* %6 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %7 = getelementptr &([1024 * [1024 * i32]]* %6)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^cond, ^cond1;
  ^cond:
    i32 %8 = add i32 %4, i32 -3;
    i1 %9 = icmp sgt i32 %8, i32 15;
    i32 %10 = add i32 %4, i32 -18;
    cbr i1 %9(prob = 0.5), ^b1, ^b3;
  ^cond1:
    i1 %11 = icmp sgt i32 %4, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b4;
  ^b1:
    i32 %12 = phi [^cond, i32 %0] [^b7, i32 %71];
    [1024 * i32]* %13 = getelementptr &([1024 * i32]* %7)[i32 %12];
    ubr ^while.body;
  ^b2:
    i32 %14 = phi [^cond1, i32 %0] [^b5, i32 %49];
    [1024 * i32]* %15 = getelementptr &([1024 * i32]* %7)[i32 %14];
    ubr ^while.body1;
  ^b3:
    i32 %16 = phi [^cond, i32 %0] [^b6, i32 %65];
    [1024 * i32]* %17 = getelementptr &([1024 * i32]* %7)[i32 %16];
    ubr ^while.body2;
  ^b4:
    ret;
  ^while.body:
    i32 %18 = phi [^b1, i32 0] [^while.body, i32 %35];
    i32* %19 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %18];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %19)[i64 1];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %19)[i64 2];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %19)[i64 3];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %19)[i64 4];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %19)[i64 5];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %19)[i64 6];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %19)[i64 7];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %19)[i64 8];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %19)[i64 9];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %19)[i64 10];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %19)[i64 11];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %19)[i64 12];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %19)[i64 13];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %19)[i64 14];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %19)[i64 15];
    store i32* %34 with i32 0;
    i32 %35 = add i32 %18, i32 16;
    i1 %36 = icmp sgt i32 %10, i32 %35;
    cbr i1 %36(prob = 0.941176), ^while.body, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^b2, i32 0] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %41 = phi [^b3, i32 0] [^while.body2, i32 %46];
    i32* %42 = getelementptr &([1024 * i32]* %17)[i64 0][i32 %41];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    i32 %46 = add i32 %41, i32 4;
    i1 %47 = icmp sgt i32 %8, i32 %46;
    cbr i1 %47(prob = 0.75), ^while.body2, ^scalar.final;
  ^scalar.header:
    i1 %48 = icmp sgt i32 %8, i32 %35;
    cbr i1 %48(prob = 0.75), ^while.body3, ^scalar.final1;
  ^b5:
    i32 %49 = add i32 %14, i32 1;
    i1 %50 = icmp sgt i32 %1, i32 %49;
    cbr i1 %50(prob = 0.984615), ^b2, ^b4;
  ^scalar.final:
    i1 %51 = icmp sgt i32 %4, i32 %46;
    cbr i1 %51(prob = 0.75), ^while.body4, ^b6;
  ^while.body3 {scalar}:
    i32 %52 = phi [^scalar.header, i32 %35] [^while.body3, i32 %57];
    i32* %53 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32 %57 = add i32 %52, i32 4;
    i1 %58 = icmp sgt i32 %8, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body3, ^scalar.final1;
  ^scalar.final1:
    i32 %59 = phi [^scalar.header, i32 %35] [^while.body3, i32 %57];
    i1 %60 = icmp sgt i32 %4, i32 %59;
    cbr i1 %60(prob = 0.75), ^while.body5, ^b7;
  ^while.body4 {scalar}:
    i32 %61 = phi [^scalar.final, i32 %46] [^while.body4, i32 %63];
    i32* %62 = getelementptr &([1024 * i32]* %17)[i64 0][i32 %61];
    store i32* %62 with i32 0;
    i32 %63 = add i32 %61, i32 1;
    i1 %64 = icmp sgt i32 %4, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body4, ^b6;
  ^b6:
    i32 %65 = add i32 %16, i32 1;
    i1 %66 = icmp sgt i32 %1, i32 %65;
    cbr i1 %66(prob = 0.984615), ^b3, ^b4;
  ^while.body5 {scalar}:
    i32 %67 = phi [^scalar.final1, i32 %59] [^while.body5, i32 %69];
    i32* %68 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %67];
    store i32* %68 with i32 0;
    i32 %69 = add i32 %67, i32 1;
    i1 %70 = icmp sgt i32 %4, i32 %69;
    cbr i1 %70(prob = 0.75), ^while.body5, ^b7;
  ^b7:
    i32 %71 = add i32 %12, i32 1;
    i1 %72 = icmp sgt i32 %1, i32 %71;
    cbr i1 %72(prob = 0.984615), ^b1, ^b4;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %25];
    [1024 * i32]* %14 = getelementptr &([1024 * i32]* %12)[i32 %13];
    ubr ^while.header;
  ^cond:
    i1 %15 = icmp slt i32 %4, i32 1;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^while.header:
    i32 %16 = phi [^b1, i32 0] [^while.body, i32 %24] [^scalar.header, i32 %24] [^while.body4, i32 %24];
    i1 %17 = icmp sgt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %35];
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %18];
    ubr ^while.header1;
  ^b3:
    ret;
  ^while.body:
    [1024 * i32]* %20 = getelementptr &([1024 * i32]* %8)[i32 %16];
    i32* %21 = getelementptr &([1024 * i32]* %20)[i64 0][i32 %13];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    i32 %24 = add i32 %16, i32 1;
    cbr i1 %23(prob = 0.49), ^while.header, ^prebody;
  ^b4:
    i32 %25 = add i32 %13, i32 1;
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^b1, ^b3;
  ^while.header1:
    i32 %27 = phi [^b2, i32 0] [^while.body1, i32 %34] [^while.body3, i32 %34];
    i1 %28 = icmp sgt i32 %4, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b5;
  ^prebody:
    [1024 * i32]* %29 = getelementptr &([1024 * i32]* %10)[i32 %16];
    ubr ^while.body2;
  ^while.body1:
    [1024 * i32]* %30 = getelementptr &([1024 * i32]* %8)[i32 %27];
    i32* %31 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %18];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 0;
    i32 %34 = add i32 %27, i32 1;
    cbr i1 %33(prob = 0.49), ^while.header1, ^prebody1;
  ^b5:
    i32 %35 = add i32 %18, i32 1;
    i1 %36 = icmp sgt i32 %1, i32 %35;
    cbr i1 %36(prob = 0.984615), ^b2, ^b3;
  ^while.body2:
    i32 %37 = phi [^prebody, i32 0] [^while.body2, i32 %58];
    i32* %38 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %22, i32 %39;
    i32* %41 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %37];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %38)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %22, i32 %44;
    i32* %46 = getelementptr &(i32* %41)[i64 1];
    atomicadd i32* %46, i32 %45;
    i32* %48 = getelementptr &(i32* %38)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = mul i32 %22, i32 %49;
    i32* %51 = getelementptr &(i32* %41)[i64 2];
    atomicadd i32* %51, i32 %50;
    i32* %53 = getelementptr &(i32* %38)[i64 3];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %22, i32 %54;
    i32* %56 = getelementptr &(i32* %41)[i64 3];
    atomicadd i32* %56, i32 %55;
    i32 %58 = add i32 %37, i32 4;
    i1 %59 = icmp sgt i32 %6, i32 %58;
    cbr i1 %59(prob = 0.941176), ^while.body2, ^scalar.header;
  ^prebody1:
    [1024 * i32]* %60 = getelementptr &([1024 * i32]* %10)[i32 %27];
    ubr ^while.body3;
  ^scalar.header:
    i1 %61 = icmp sle i32 %4, i32 %58;
    cbr i1 %61(prob = 0.25), ^while.header, ^while.body4;
  ^while.body3 {scalar}:
    i32 %62 = phi [^prebody1, i32 0] [^while.body3, i32 %68];
    i32* %63 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %62];
    i32 %64 = load i32* %63;
    i32 %65 = mul i32 %32, i32 %64;
    i32* %66 = getelementptr &([1024 * i32]* %60)[i64 0][i32 %62];
    atomicadd i32* %66, i32 %65;
    i32 %68 = add i32 %62, i32 1;
    i1 %69 = icmp sgt i32 %4, i32 %68;
    cbr i1 %69(prob = 0.75), ^while.body3, ^while.header1;
  ^while.body4 {scalar}:
    i32 %70 = phi [^scalar.header, i32 %58] [^while.body4, i32 %76];
    i32* %71 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    i32 %73 = mul i32 %22, i32 %72;
    i32* %74 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %70];
    atomicadd i32* %74, i32 %73;
    i32 %76 = add i32 %70, i32 1;
    i1 %77 = icmp sgt i32 %4, i32 %76;
    cbr i1 %77(prob = 0.75), ^while.body4, ^while.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    [1024 * [1024 * i32]]* %6 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %7 = getelementptr &([1024 * [1024 * i32]]* %6)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^cond, ^cond1;
  ^cond:
    i32 %8 = add i32 %4, i32 -3;
    i1 %9 = icmp sgt i32 %8, i32 15;
    i32 %10 = add i32 %4, i32 -18;
    cbr i1 %9(prob = 0.5), ^b1, ^b3;
  ^cond1:
    i1 %11 = icmp sgt i32 %4, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b4;
  ^b1:
    i32 %12 = phi [^cond, i32 %0] [^b7, i32 %71];
    [1024 * i32]* %13 = getelementptr &([1024 * i32]* %7)[i32 %12];
    ubr ^while.body;
  ^b2:
    i32 %14 = phi [^cond1, i32 %0] [^b5, i32 %49];
    [1024 * i32]* %15 = getelementptr &([1024 * i32]* %7)[i32 %14];
    ubr ^while.body1;
  ^b3:
    i32 %16 = phi [^cond, i32 %0] [^b6, i32 %65];
    [1024 * i32]* %17 = getelementptr &([1024 * i32]* %7)[i32 %16];
    ubr ^while.body2;
  ^b4:
    ret;
  ^while.body:
    i32 %18 = phi [^b1, i32 0] [^while.body, i32 %35];
    i32* %19 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %18];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %19)[i64 1];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %19)[i64 2];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %19)[i64 3];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %19)[i64 4];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %19)[i64 5];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %19)[i64 6];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %19)[i64 7];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %19)[i64 8];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %19)[i64 9];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %19)[i64 10];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %19)[i64 11];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %19)[i64 12];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %19)[i64 13];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %19)[i64 14];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %19)[i64 15];
    store i32* %34 with i32 0;
    i32 %35 = add i32 %18, i32 16;
    i1 %36 = icmp sgt i32 %10, i32 %35;
    cbr i1 %36(prob = 0.941176), ^while.body, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^b2, i32 0] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %41 = phi [^b3, i32 0] [^while.body2, i32 %46];
    i32* %42 = getelementptr &([1024 * i32]* %17)[i64 0][i32 %41];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    i32 %46 = add i32 %41, i32 4;
    i1 %47 = icmp sgt i32 %8, i32 %46;
    cbr i1 %47(prob = 0.75), ^while.body2, ^scalar.final;
  ^scalar.header:
    i1 %48 = icmp sgt i32 %8, i32 %35;
    cbr i1 %48(prob = 0.75), ^while.body3, ^scalar.final1;
  ^b5:
    i32 %49 = add i32 %14, i32 1;
    i1 %50 = icmp sgt i32 %1, i32 %49;
    cbr i1 %50(prob = 0.984615), ^b2, ^b4;
  ^scalar.final:
    i1 %51 = icmp sgt i32 %4, i32 %46;
    cbr i1 %51(prob = 0.75), ^while.body4, ^b6;
  ^while.body3 {scalar}:
    i32 %52 = phi [^scalar.header, i32 %35] [^while.body3, i32 %57];
    i32* %53 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32 %57 = add i32 %52, i32 4;
    i1 %58 = icmp sgt i32 %8, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body3, ^scalar.final1;
  ^scalar.final1:
    i32 %59 = phi [^scalar.header, i32 %35] [^while.body3, i32 %57];
    i1 %60 = icmp sgt i32 %4, i32 %59;
    cbr i1 %60(prob = 0.75), ^while.body5, ^b7;
  ^while.body4 {scalar}:
    i32 %61 = phi [^scalar.final, i32 %46] [^while.body4, i32 %63];
    i32* %62 = getelementptr &([1024 * i32]* %17)[i64 0][i32 %61];
    store i32* %62 with i32 0;
    i32 %63 = add i32 %61, i32 1;
    i1 %64 = icmp sgt i32 %4, i32 %63;
    cbr i1 %64(prob = 0.75), ^while.body4, ^b6;
  ^b6:
    i32 %65 = add i32 %16, i32 1;
    i1 %66 = icmp sgt i32 %1, i32 %65;
    cbr i1 %66(prob = 0.984615), ^b3, ^b4;
  ^while.body5 {scalar}:
    i32 %67 = phi [^scalar.final1, i32 %59] [^while.body5, i32 %69];
    i32* %68 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %67];
    store i32* %68 with i32 0;
    i32 %69 = add i32 %67, i32 1;
    i1 %70 = icmp sgt i32 %4, i32 %69;
    cbr i1 %70(prob = 0.75), ^while.body5, ^b7;
  ^b7:
    i32 %71 = add i32 %12, i32 1;
    i1 %72 = icmp sgt i32 %1, i32 %71;
    cbr i1 %72(prob = 0.984615), ^b1, ^b4;
}
internal [4 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_4 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %25];
    [1024 * i32]* %14 = getelementptr &([1024 * i32]* %12)[i32 %13];
    ubr ^while.header;
  ^cond:
    i1 %15 = icmp slt i32 %4, i32 1;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^while.header:
    i32 %16 = phi [^b1, i32 0] [^while.body, i32 %24] [^scalar.header, i32 %24] [^while.body4, i32 %24];
    i1 %17 = icmp sgt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %35];
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %18];
    ubr ^while.header1;
  ^b3:
    ret;
  ^while.body:
    [1024 * i32]* %20 = getelementptr &([1024 * i32]* %8)[i32 %16];
    i32* %21 = getelementptr &([1024 * i32]* %20)[i64 0][i32 %13];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    i32 %24 = add i32 %16, i32 1;
    cbr i1 %23(prob = 0.49), ^while.header, ^prebody;
  ^b4:
    i32 %25 = add i32 %13, i32 1;
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^b1, ^b3;
  ^while.header1:
    i32 %27 = phi [^b2, i32 0] [^while.body1, i32 %34] [^while.body3, i32 %34];
    i1 %28 = icmp sgt i32 %4, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b5;
  ^prebody:
    [1024 * i32]* %29 = getelementptr &([1024 * i32]* %10)[i32 %16];
    ubr ^while.body2;
  ^while.body1:
    [1024 * i32]* %30 = getelementptr &([1024 * i32]* %8)[i32 %27];
    i32* %31 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %18];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 0;
    i32 %34 = add i32 %27, i32 1;
    cbr i1 %33(prob = 0.49), ^while.header1, ^prebody1;
  ^b5:
    i32 %35 = add i32 %18, i32 1;
    i1 %36 = icmp sgt i32 %1, i32 %35;
    cbr i1 %36(prob = 0.984615), ^b2, ^b3;
  ^while.body2:
    i32 %37 = phi [^prebody, i32 0] [^while.body2, i32 %58];
    i32* %38 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %22, i32 %39;
    i32* %41 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %37];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %38)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %22, i32 %44;
    i32* %46 = getelementptr &(i32* %41)[i64 1];
    atomicadd i32* %46, i32 %45;
    i32* %48 = getelementptr &(i32* %38)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = mul i32 %22, i32 %49;
    i32* %51 = getelementptr &(i32* %41)[i64 2];
    atomicadd i32* %51, i32 %50;
    i32* %53 = getelementptr &(i32* %38)[i64 3];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %22, i32 %54;
    i32* %56 = getelementptr &(i32* %41)[i64 3];
    atomicadd i32* %56, i32 %55;
    i32 %58 = add i32 %37, i32 4;
    i1 %59 = icmp sgt i32 %6, i32 %58;
    cbr i1 %59(prob = 0.941176), ^while.body2, ^scalar.header;
  ^prebody1:
    [1024 * i32]* %60 = getelementptr &([1024 * i32]* %10)[i32 %27];
    ubr ^while.body3;
  ^scalar.header:
    i1 %61 = icmp sle i32 %4, i32 %58;
    cbr i1 %61(prob = 0.25), ^while.header, ^while.body4;
  ^while.body3 {scalar}:
    i32 %62 = phi [^prebody1, i32 0] [^while.body3, i32 %68];
    i32* %63 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %62];
    i32 %64 = load i32* %63;
    i32 %65 = mul i32 %32, i32 %64;
    i32* %66 = getelementptr &([1024 * i32]* %60)[i64 0][i32 %62];
    atomicadd i32* %66, i32 %65;
    i32 %68 = add i32 %62, i32 1;
    i1 %69 = icmp sgt i32 %4, i32 %68;
    cbr i1 %69(prob = 0.75), ^while.body3, ^while.header1;
  ^while.body4 {scalar}:
    i32 %70 = phi [^scalar.header, i32 %58] [^while.body4, i32 %76];
    i32* %71 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    i32 %73 = mul i32 %22, i32 %72;
    i32* %74 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %70];
    atomicadd i32* %74, i32 %73;
    i32 %76 = add i32 %70, i32 1;
    i1 %77 = icmp sgt i32 %4, i32 %76;
    cbr i1 %77(prob = 0.75), ^while.body4, ^while.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_4, align 8;
