internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %3 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %4 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %14];
    [1024 * i32]* %6 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body2;
^b:
    cbr i1 %1(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %7 = phi [^b, i32 0] [^b3, i32 %24];
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %7];
    ubr ^while.body3;
^b1:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body4;
^while.body2:
    i32 %9 = phi [^while.body, i32 0] [^while.body2, i32 %12];
    i32* %10 = getelementptr &([1024 * i32]* %6)[i64 0][i32 %9];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %9, i32 1;
    i1 %13 = scmp lt i32 %12, i32 %0;
    cbr i1 %13(prob = 0.97), ^while.body2, ^b2;
^b2:
    i32 %14 = add i32 %5, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %0;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
^while.body3:
    i32 %16 = phi [^while.body1, i32 0] [^while.body3, i32 %19];
    i32* %17 = getelementptr &([1024 * i32]* %8)[i64 0][i32 %16];
    i32 %18 = call () -> i32 @getint();
    store i32* %17 with i32 %18;
    i32 %19 = add i32 %16, i32 1;
    i1 %20 = scmp lt i32 %19, i32 %0;
    cbr i1 %20(prob = 0.97), ^while.body3, ^b3;
^while.body4:
    i32 %21 = phi [^b1, i32 0] [^while.body12, i32 %52];
    cbr i1 %1(prob = 0.97), ^while.body5, ^b4;
^while.body5:
    i32 %22 = phi [^while.body4, i32 0] [^b5, i32 %34];
    [1024 * i32]* %23 = getelementptr &([1024 * i32]* %4)[i32 %22];
    ubr ^while.body7;
^b3:
    i32 %24 = add i32 %7, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %0;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
^b4:
    cbr i1 %1(prob = 0.97), ^while.body6, ^entry1;
^while.body6:
    i32 %26 = phi [^b4, i32 0] [^b7, i32 %46];
    [1024 * i32]* %27 = getelementptr &([1024 * i32]* %3)[i32 %26];
    ubr ^while.guard;
^while.body7:
    i32 %28 = phi [^while.body5, i32 0] [^while.body7, i32 %30];
    i32* %29 = getelementptr &([1024 * i32]* %23)[i64 0][i32 %28];
    store i32* %29 with i32 0;
    i32 %30 = add i32 %28, i32 1;
    i1 %31 = scmp lt i32 %30, i32 %0;
    cbr i1 %31(prob = 0.97), ^while.body7, ^b5;
^entry1:
    cbr i1 %1(prob = 0.97), ^while.body8, ^b6;
^while.body8:
    i32 %32 = phi [^entry1, i32 0] [^b8, i32 %65];
    [1024 * i32]* %33 = getelementptr &([1024 * i32]* %3)[i32 %32];
    ubr ^while.body11;
^b5:
    i32 %34 = add i32 %22, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.97), ^while.body5, ^b4;
^while.guard:
    i32 %36 = phi [^while.body6, i32 0] [^if.then, i32 %54];
    i1 %37 = scmp lt i32 %36, i32 %0;
    cbr i1 %37(prob = 0.97), ^while.body9, ^b7;
^b6:
    cbr i1 %1(prob = 0.97), ^while.body10, ^while.body12;
^while.body9:
    i32 %38 = phi [^while.guard, i32 %36] [^b10, i32 %70];
    [1024 * i32]* %39 = getelementptr &([1024 * i32]* %2)[i32 %38];
    i32* %40 = getelementptr &([1024 * i32]* %39)[i64 0][i32 %26];
    i32 %41 = load i32* %40;
    i1 %42 = scmp eq i32 %41, i32 0;
    [1024 * i32]* %43 = getelementptr &([1024 * i32]* %4)[i32 %38];
    cbr i1 %42(prob = 0.5), ^if.then, ^while.body13;
^while.body10:
    i32 %44 = phi [^b6, i32 0] [^b11, i32 %81];
    [1024 * i32]* %45 = getelementptr &([1024 * i32]* %4)[i32 %44];
    ubr ^while.guard1;
^b7:
    i32 %46 = add i32 %26, i32 1;
    i1 %47 = scmp lt i32 %46, i32 %0;
    cbr i1 %47(prob = 0.97), ^while.body6, ^entry1;
^while.body11:
    i32 %48 = phi [^while.body8, i32 0] [^while.body11, i32 %50];
    i32* %49 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %48];
    store i32* %49 with i32 0;
    i32 %50 = add i32 %48, i32 1;
    i1 %51 = scmp lt i32 %50, i32 %0;
    cbr i1 %51(prob = 0.97), ^while.body11, ^b8;
^while.body12:
    i32 %52 = add i32 %21, i32 1;
    i1 %53 = scmp lt i32 %52, i32 5;
    cbr i1 %53(prob = 0.8), ^while.body4, ^b9;
^if.then:
    i32 %54 = add i32 %38, i32 1;
    ubr ^while.guard;
^while.body13:
    i32 %55 = phi [^while.body9, i32 %41] [^indirect, i32 %69];
    i32 %56 = phi [^while.body9, i32 0] [^indirect, i32 %63];
    i32* %57 = getelementptr &([1024 * i32]* %43)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &([1024 * i32]* %27)[i64 0][i32 %56];
    i32 %60 = load i32* %59;
    i32 %61 = mul i32 %55, i32 %60;
    i32 %62 = add i32 %58, i32 %61;
    store i32* %57 with i32 %62;
    i32 %63 = add i32 %56, i32 1;
    i1 %64 = scmp lt i32 %63, i32 %0;
    cbr i1 %64(prob = 0.97), ^indirect, ^b10;
^b8:
    i32 %65 = add i32 %32, i32 1;
    i1 %66 = scmp lt i32 %65, i32 %0;
    cbr i1 %66(prob = 0.97), ^while.body8, ^b6;
^while.guard1:
    i32 %67 = phi [^while.body10, i32 0] [^if.then1, i32 %84];
    i1 %68 = scmp lt i32 %67, i32 %0;
    cbr i1 %68(prob = 0.97), ^while.body14, ^b11;
^b9:
    cbr i1 %1(prob = 0.97), ^while.body15, ^b12;
^indirect:
    i32 %69 = load i32* %40;
    ubr ^while.body13;
^b10:
    i32 %70 = add i32 %38, i32 1;
    i1 %71 = scmp lt i32 %70, i32 %0;
    cbr i1 %71(prob = 0.97), ^while.body9, ^b7;
^while.body14:
    i32 %72 = phi [^while.guard1, i32 %67] [^b13, i32 %103];
    [1024 * i32]* %73 = getelementptr &([1024 * i32]* %2)[i32 %72];
    i32* %74 = getelementptr &([1024 * i32]* %73)[i64 0][i32 %44];
    i32 %75 = load i32* %74;
    i1 %76 = scmp eq i32 %75, i32 0;
    [1024 * i32]* %77 = getelementptr &([1024 * i32]* %3)[i32 %72];
    cbr i1 %76(prob = 0.5), ^if.then1, ^while.body16;
^while.body15:
    i32 %78 = phi [^b9, i32 0] [^b14, i32 %105];
    i32 %79 = phi [^b9, i32 0] [^b14, i32 %99];
    [1024 * i32]* %80 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %78];
    ubr ^while.body17;
^b11:
    i32 %81 = add i32 %44, i32 1;
    i1 %82 = scmp lt i32 %81, i32 %0;
    cbr i1 %82(prob = 0.97), ^while.body10, ^while.body12;
^b12:
    i32 %83 = phi [^b9, i32 0] [^b14, i32 %99];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %83);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then1:
    i32 %84 = add i32 %72, i32 1;
    ubr ^while.guard1;
^while.body16:
    i32 %85 = phi [^while.body14, i32 %75] [^indirect1, i32 %102];
    i32 %86 = phi [^while.body14, i32 0] [^indirect1, i32 %93];
    i32* %87 = getelementptr &([1024 * i32]* %77)[i64 0][i32 %86];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &([1024 * i32]* %45)[i64 0][i32 %86];
    i32 %90 = load i32* %89;
    i32 %91 = mul i32 %85, i32 %90;
    i32 %92 = add i32 %88, i32 %91;
    store i32* %87 with i32 %92;
    i32 %93 = add i32 %86, i32 1;
    i1 %94 = scmp lt i32 %93, i32 %0;
    cbr i1 %94(prob = 0.97), ^indirect1, ^b13;
^while.body17:
    i32 %95 = phi [^while.body15, i32 0] [^while.body17, i32 %100];
    i32 %96 = phi [^while.body15, i32 %79] [^while.body17, i32 %99];
    i32* %97 = getelementptr &([1024 * i32]* %80)[i64 0][i32 %95];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32 %100 = add i32 %95, i32 1;
    i1 %101 = scmp lt i32 %100, i32 %0;
    cbr i1 %101(prob = 0.97), ^while.body17, ^b14;
^indirect1:
    i32 %102 = load i32* %74;
    ubr ^while.body16;
^b13:
    i32 %103 = add i32 %72, i32 1;
    i1 %104 = scmp lt i32 %103, i32 %0;
    cbr i1 %104(prob = 0.97), ^while.body14, ^b11;
^b14:
    i32 %105 = add i32 %78, i32 1;
    i1 %106 = scmp lt i32 %105, i32 %0;
    cbr i1 %106(prob = 0.97), ^while.body15, ^b12;
}
