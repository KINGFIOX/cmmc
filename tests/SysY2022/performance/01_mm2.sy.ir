internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %3 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 0] [^b, i32 %10];
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    cbr i1 %4(prob = 0.97), ^indirect, ^b;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %17];
    i1 %8 = scmp lt i32 %7, i32 %0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b1;
^indirect:
    [1024 * i32]* %9 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body2;
^b:
    i32 %10 = add i32 %5, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body3;
^while.body1:
    cbr i1 %4(prob = 0.97), ^indirect1, ^b2;
^indirect1:
    [1024 * i32]* %11 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %7];
    ubr ^while.body4;
^while.body2:
    i32 %12 = phi [^indirect, i32 0] [^while.body2, i32 %15];
    i32* %13 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %12];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %0;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b;
^b2:
    i32 %17 = add i32 %7, i32 1;
    ubr ^while.header1;
^while.body3:
    i32 %18 = phi [^b1, i32 0] [^while.body10, i32 %59];
    ubr ^while.header2;
^while.body4:
    i32 %19 = phi [^indirect1, i32 0] [^while.body4, i32 %22];
    i32* %20 = getelementptr &([1024 * i32]* %11)[i64 0][i32 %19];
    i32 %21 = call () -> i32 @getint();
    store i32* %20 with i32 %21;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %0;
    cbr i1 %23(prob = 0.97), ^while.body4, ^b2;
^while.header2:
    i32 %24 = phi [^while.body3, i32 0] [^b3, i32 %30];
    i1 %25 = scmp lt i32 %24, i32 %0;
    cbr i1 %25(prob = 0.97), ^while.body5, ^while.header3;
^while.body5:
    [1024 * i32]* %26 = getelementptr &([1024 * i32]* %3)[i32 %24];
    cbr i1 %4(prob = 0.97), ^while.body6, ^b3;
^while.header3:
    i32 %27 = phi [^while.header2, i32 0] [^b4, i32 %39];
    i1 %28 = scmp lt i32 %27, i32 %0;
    [1024 * i32]* %29 = getelementptr &([1024 * i32]* %2)[i32 %27];
    cbr i1 %28(prob = 0.97), ^while.header4, ^while.header5;
^b3:
    i32 %30 = add i32 %24, i32 1;
    ubr ^while.header2;
^while.body6:
    i32 %31 = phi [^while.body5, i32 0] [^while.body6, i32 %33];
    i32* %32 = getelementptr &([1024 * i32]* %26)[i64 0][i32 %31];
    store i32* %32 with i32 0;
    i32 %33 = add i32 %31, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %0;
    cbr i1 %34(prob = 0.97), ^while.body6, ^b3;
^while.header4:
    i32 %35 = phi [^while.header3, i32 0] [^if.then, i32 %49];
    i1 %36 = scmp lt i32 %35, i32 %0;
    cbr i1 %36(prob = 0.97), ^while.body7, ^b4;
^while.header5:
    i32 %37 = phi [^while.header3, i32 0] [^b5, i32 %50];
    i1 %38 = scmp lt i32 %37, i32 %0;
    cbr i1 %38(prob = 0.97), ^while.body8, ^while.header6;
^b4:
    i32 %39 = add i32 %27, i32 1;
    ubr ^while.header3;
^while.body7:
    [1024 * i32]* %40 = getelementptr &([1024 * i32]* %1)[i32 %35];
    i32* %41 = getelementptr &([1024 * i32]* %40)[i64 0][i32 %27];
    [1024 * i32]* %42 = getelementptr &([1024 * i32]* %3)[i32 %35];
    i32 %43 = load i32* %41;
    i1 %44 = scmp eq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then, ^while.header7;
^while.body8:
    [1024 * i32]* %45 = getelementptr &([1024 * i32]* %2)[i32 %37];
    cbr i1 %4(prob = 0.97), ^while.body9, ^b5;
^while.header6:
    i32 %46 = phi [^while.header5, i32 0] [^b6, i32 %69];
    i1 %47 = scmp lt i32 %46, i32 %0;
    [1024 * i32]* %48 = getelementptr &([1024 * i32]* %3)[i32 %46];
    cbr i1 %47(prob = 0.97), ^while.header8, ^while.body10;
^if.then:
    i32 %49 = add i32 %35, i32 1;
    ubr ^while.header4;
^b5:
    i32 %50 = add i32 %37, i32 1;
    ubr ^while.header5;
^while.header7:
    i32 %51 = phi [^while.body7, i32 0] [^while.body11, i32 %68];
    i1 %52 = scmp lt i32 %51, i32 %0;
    cbr i1 %52(prob = 0.97), ^while.body11, ^if.then;
^while.body9:
    i32 %53 = phi [^while.body8, i32 0] [^while.body9, i32 %55];
    i32* %54 = getelementptr &([1024 * i32]* %45)[i64 0][i32 %53];
    store i32* %54 with i32 0;
    i32 %55 = add i32 %53, i32 1;
    i1 %56 = scmp lt i32 %55, i32 %0;
    cbr i1 %56(prob = 0.97), ^while.body9, ^b5;
^while.header8:
    i32 %57 = phi [^while.header6, i32 0] [^if.then1, i32 %78];
    i1 %58 = scmp lt i32 %57, i32 %0;
    cbr i1 %58(prob = 0.97), ^while.body12, ^b6;
^while.body10:
    i32 %59 = add i32 %18, i32 1;
    i1 %60 = scmp lt i32 %59, i32 5;
    cbr i1 %60(prob = 0.8), ^while.body3, ^while.header9;
^while.body11:
    i32* %61 = getelementptr &([1024 * i32]* %42)[i64 0][i32 %51];
    i32 %62 = load i32* %61;
    i32 %63 = load i32* %41;
    i32* %64 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %51];
    i32 %65 = load i32* %64;
    i32 %66 = mul i32 %63, i32 %65;
    i32 %67 = add i32 %62, i32 %66;
    store i32* %61 with i32 %67;
    i32 %68 = add i32 %51, i32 1;
    ubr ^while.header7;
^b6:
    i32 %69 = add i32 %46, i32 1;
    ubr ^while.header6;
^while.body12:
    [1024 * i32]* %70 = getelementptr &([1024 * i32]* %1)[i32 %57];
    i32* %71 = getelementptr &([1024 * i32]* %70)[i64 0][i32 %46];
    [1024 * i32]* %72 = getelementptr &([1024 * i32]* %2)[i32 %57];
    i32 %73 = load i32* %71;
    i1 %74 = scmp eq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then1, ^while.header10;
^while.header9:
    i32 %75 = phi [^while.body10, i32 0] [^b8, i32 %91];
    i32 %76 = phi [^while.body10, i32 0] [^b8, i32 %90];
    i1 %77 = scmp lt i32 %75, i32 %0;
    cbr i1 %77(prob = 0.97), ^while.body13, ^b7;
^if.then1:
    i32 %78 = add i32 %57, i32 1;
    ubr ^while.header8;
^while.header10:
    i32 %79 = phi [^while.body12, i32 0] [^while.body14, i32 %88];
    i1 %80 = scmp lt i32 %79, i32 %0;
    cbr i1 %80(prob = 0.97), ^while.body14, ^if.then1;
^while.body13:
    cbr i1 %4(prob = 0.97), ^indirect2, ^b8;
^b7:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body14:
    i32* %81 = getelementptr &([1024 * i32]* %72)[i64 0][i32 %79];
    i32 %82 = load i32* %81;
    i32 %83 = load i32* %71;
    i32* %84 = getelementptr &([1024 * i32]* %48)[i64 0][i32 %79];
    i32 %85 = load i32* %84;
    i32 %86 = mul i32 %83, i32 %85;
    i32 %87 = add i32 %82, i32 %86;
    store i32* %81 with i32 %87;
    i32 %88 = add i32 %79, i32 1;
    ubr ^while.header10;
^indirect2:
    [1024 * i32]* %89 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %75];
    ubr ^while.body15;
^b8:
    i32 %90 = phi [^while.body13, i32 %76] [^while.body15, i32 %96];
    i32 %91 = add i32 %75, i32 1;
    ubr ^while.header9;
^while.body15:
    i32 %92 = phi [^indirect2, i32 0] [^while.body15, i32 %97];
    i32 %93 = phi [^indirect2, i32 %76] [^while.body15, i32 %96];
    i32* %94 = getelementptr &([1024 * i32]* %89)[i64 0][i32 %92];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32 %97 = add i32 %92, i32 1;
    i1 %98 = scmp lt i32 %97, i32 %0;
    cbr i1 %98(prob = 0.97), ^while.body15, ^b8;
}
