internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %k1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %3 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %15] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %0;
    [1024 * i32]* %6 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %4];
    cbr i1 %5(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^while.body, i32 %14];
    i1 %8 = scmp lt i32 %7, i32 %0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %21];
    i1 %10 = scmp lt i32 %9, i32 %0;
    [1024 * i32]* %11 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %9];
    cbr i1 %10(prob = 0.97), ^while.header3, ^b1;
^while.body:
    i32* %12 = getelementptr &([1024 * i32]* %6)[i64 0][i32 %7];
    i32 %13 = call () -> i32 @getint();
    store i32* %12 with i32 %13;
    i32 %14 = add i32 %7, i32 1;
    ubr ^while.header1;
^b:
    i32 %15 = add i32 %4, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @starttime(i32 65);
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %16 = phi [^while.header2, i32 0] [^while.body1, i32 %20];
    i1 %17 = scmp lt i32 %16, i32 %0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32* %18 = getelementptr &([1024 * i32]* %11)[i64 0][i32 %16];
    i32 %19 = call () -> i32 @getint();
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %16, i32 1;
    ubr ^while.header3;
^b2:
    i32 %21 = add i32 %9, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %22 = phi [^while.body12, i32 %90] [^b1, i32 %0];
    i32 %23 = phi [^while.body12, i32 %111] [^b1, i32 0];
    i1 %24 = scmp lt i32 %23, i32 5;
    cbr i1 %24(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    store i32* %n1 with i32 %22;
    store i32* %i1 with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %25 = phi [^while.header4, i32 0] [^b5, i32 %41];
    i32 %26 = phi [^while.header4, i32 0] [^b5, i32 %35];
    i1 %27 = scmp lt i32 %25, i32 %22;
    [1024 * i32]* %28 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %25];
    cbr i1 %27(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %29 = phi [^b6, i32 %42] [^while.body2, i32 %22];
    i32 %30 = phi [^b6, i32 %43] [^while.body2, i32 %23];
    i32 %31 = phi [^b6, i32 %61] [^while.body2, i32 0];
    i32 %32 = phi [^b6, i32 %46] [^while.body2, i32 %22];
    i1 %33 = scmp lt i32 %31, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body3, ^b4;
^while.header7:
    i32 %34 = phi [^while.header5, i32 0] [^while.body4, i32 %40];
    i32 %35 = phi [^while.header5, i32 %26] [^while.body4, i32 %39];
    i1 %36 = scmp lt i32 %34, i32 %22;
    cbr i1 %36(prob = 0.97), ^while.body4, ^b5;
^b3:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %26);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body3:
    store i32* %j1 with i32 0;
    ubr ^while.header8;
^b4:
    store i32* %k1 with i32 0;
    ubr ^while.header9;
^while.body4:
    i32* %37 = getelementptr &([1024 * i32]* %28)[i64 0][i32 %34];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %35, i32 %38;
    i32 %40 = add i32 %34, i32 1;
    ubr ^while.header7;
^b5:
    i32 %41 = add i32 %25, i32 1;
    ubr ^while.header5;
^while.header8:
    i32 %42 = phi [^while.body5, i32 %55] [^while.body3, i32 %29];
    i32 %43 = phi [^while.body5, i32 %56] [^while.body3, i32 %30];
    i32 %44 = phi [^while.body5, i32 %60] [^while.body3, i32 0];
    i32 %45 = phi [^while.body5, i32 %58] [^while.body3, i32 %31];
    i32 %46 = phi [^while.body5, i32 %59] [^while.body3, i32 %32];
    i1 %47 = scmp lt i32 %44, i32 %46;
    cbr i1 %47(prob = 0.97), ^while.body5, ^b6;
^while.header9:
    i32 %48 = phi [^b7, i32 %62] [^b4, i32 %29];
    i32 %49 = phi [^b7, i32 %63] [^b4, i32 %30];
    i32 %50 = phi [^b7, i32 %73] [^b4, i32 0];
    i32 %51 = phi [^b7, i32 %66] [^b4, i32 %32];
    i1 %52 = scmp lt i32 %50, i32 %51;
    cbr i1 %52(prob = 0.97), ^while.body6, ^while.body7;
^while.body5:
    [1024 * i32]* %53 = getelementptr &([1024 * i32]* %3)[i32 %45];
    i32* %54 = getelementptr &([1024 * i32]* %53)[i64 0][i32 %44];
    store i32* %54 with i32 0;
    i32 %55 = load i32* %n2;
    i32 %56 = load i32* %i2;
    i32 %57 = load i32* %j1;
    i32 %58 = load i32* %i1;
    i32 %59 = load i32* %n1;
    i32 %60 = add i32 %57, i32 1;
    store i32* %j1 with i32 %60;
    ubr ^while.header8;
^b6:
    i32 %61 = add i32 %45, i32 1;
    store i32* %i1 with i32 %61;
    ubr ^while.header6;
^while.body6:
    store i32* %i1 with i32 0;
    ubr ^while.header10;
^while.body7:
    store i32* %n with i32 %48;
    store i32* %i with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %62 = phi [^if.then, i32 %78] [^while.body6, i32 %48];
    i32 %63 = phi [^if.then, i32 %79] [^while.body6, i32 %49];
    i32 %64 = phi [^if.then, i32 %80] [^while.body6, i32 %50];
    i32 %65 = phi [^if.then, i32 %83] [^while.body6, i32 0];
    i32 %66 = phi [^if.then, i32 %82] [^while.body6, i32 %51];
    i1 %67 = scmp lt i32 %65, i32 %66;
    cbr i1 %67(prob = 0.97), ^while.body9, ^b7;
^while.header11:
    i32 %68 = phi [^b10, i32 %84] [^while.body7, i32 %48];
    i32 %69 = phi [^b10, i32 %85] [^while.body7, i32 %49];
    i32 %70 = phi [^b10, i32 %103] [^while.body7, i32 0];
    i32 %71 = phi [^b10, i32 %88] [^while.body7, i32 %48];
    i1 %72 = scmp lt i32 %70, i32 %71;
    cbr i1 %72(prob = 0.97), ^while.body8, ^b8;
^b7:
    i32 %73 = add i32 %64, i32 1;
    store i32* %k1 with i32 %73;
    ubr ^while.header9;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header12;
^while.body9:
    [1024 * i32]* %74 = getelementptr &([1024 * i32]* %1)[i32 %65];
    i32* %75 = getelementptr &([1024 * i32]* %74)[i64 0][i32 %64];
    i32 %76 = load i32* %75;
    i1 %77 = scmp eq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then, ^b9;
^b8:
    store i32* %k with i32 0;
    ubr ^while.header13;
^if.then:
    i32 %78 = phi [^while.header14, i32 %104] [^while.body9, i32 %62];
    i32 %79 = phi [^while.header14, i32 %105] [^while.body9, i32 %63];
    i32 %80 = phi [^while.header14, i32 %106] [^while.body9, i32 %64];
    i32 %81 = phi [^while.header14, i32 %108] [^while.body9, i32 %65];
    i32 %82 = phi [^while.header14, i32 %109] [^while.body9, i32 %66];
    i32 %83 = add i32 %81, i32 1;
    store i32* %i1 with i32 %83;
    ubr ^while.header10;
^b9:
    store i32* %j1 with i32 0;
    ubr ^while.header14;
^while.header12:
    i32 %84 = phi [^while.body10, i32 %97] [^while.body8, i32 %68];
    i32 %85 = phi [^while.body10, i32 %98] [^while.body8, i32 %69];
    i32 %86 = phi [^while.body10, i32 %102] [^while.body8, i32 0];
    i32 %87 = phi [^while.body10, i32 %100] [^while.body8, i32 %70];
    i32 %88 = phi [^while.body10, i32 %101] [^while.body8, i32 %71];
    i1 %89 = scmp lt i32 %86, i32 %88;
    cbr i1 %89(prob = 0.97), ^while.body10, ^b10;
^while.header13:
    i32 %90 = phi [^b11, i32 %130] [^b8, i32 %68];
    i32 %91 = phi [^b11, i32 %131] [^b8, i32 %69];
    i32 %92 = phi [^b11, i32 %136] [^b8, i32 0];
    i32 %93 = phi [^b11, i32 %134] [^b8, i32 %71];
    i1 %94 = scmp lt i32 %92, i32 %93;
    cbr i1 %94(prob = 0.97), ^while.body11, ^while.body12;
^while.body10:
    [1024 * i32]* %95 = getelementptr &([1024 * i32]* %2)[i32 %87];
    i32* %96 = getelementptr &([1024 * i32]* %95)[i64 0][i32 %86];
    store i32* %96 with i32 0;
    i32 %97 = load i32* %n2;
    i32 %98 = load i32* %i2;
    i32 %99 = load i32* %j;
    i32 %100 = load i32* %i;
    i32 %101 = load i32* %n;
    i32 %102 = add i32 %99, i32 1;
    store i32* %j with i32 %102;
    ubr ^while.header12;
^b10:
    i32 %103 = add i32 %87, i32 1;
    store i32* %i with i32 %103;
    ubr ^while.header11;
^while.body11:
    store i32* %i with i32 0;
    ubr ^while.header15;
^while.header14:
    i32 %104 = phi [^while.body13, i32 %123] [^b9, i32 %62];
    i32 %105 = phi [^while.body13, i32 %124] [^b9, i32 %63];
    i32 %106 = phi [^while.body13, i32 %125] [^b9, i32 %64];
    i32 %107 = phi [^while.body13, i32 %129] [^b9, i32 0];
    i32 %108 = phi [^while.body13, i32 %127] [^b9, i32 %65];
    i32 %109 = phi [^while.body13, i32 %128] [^b9, i32 %66];
    i1 %110 = scmp lt i32 %107, i32 %109;
    cbr i1 %110(prob = 0.97), ^while.body13, ^if.then;
^while.body12:
    i32 %111 = add i32 %91, i32 1;
    store i32* %i2 with i32 %111;
    ubr ^while.header4;
^while.body13:
    [1024 * i32]* %112 = getelementptr &([1024 * i32]* %3)[i32 %108];
    i32* %113 = getelementptr &([1024 * i32]* %112)[i64 0][i32 %107];
    i32 %114 = load i32* %113;
    [1024 * i32]* %115 = getelementptr &([1024 * i32]* %1)[i32 %108];
    i32* %116 = getelementptr &([1024 * i32]* %115)[i64 0][i32 %106];
    i32 %117 = load i32* %116;
    [1024 * i32]* %118 = getelementptr &([1024 * i32]* %2)[i32 %106];
    i32* %119 = getelementptr &([1024 * i32]* %118)[i64 0][i32 %107];
    i32 %120 = load i32* %119;
    i32 %121 = mul i32 %117, i32 %120;
    i32 %122 = add i32 %114, i32 %121;
    store i32* %113 with i32 %122;
    i32 %123 = load i32* %n2;
    i32 %124 = load i32* %i2;
    i32 %125 = load i32* %k1;
    i32 %126 = load i32* %j1;
    i32 %127 = load i32* %i1;
    i32 %128 = load i32* %n1;
    i32 %129 = add i32 %126, i32 1;
    store i32* %j1 with i32 %129;
    ubr ^while.header14;
^while.header15:
    i32 %130 = phi [^if.then1, i32 %141] [^while.body11, i32 %90];
    i32 %131 = phi [^if.then1, i32 %142] [^while.body11, i32 %91];
    i32 %132 = phi [^if.then1, i32 %143] [^while.body11, i32 %92];
    i32 %133 = phi [^if.then1, i32 %146] [^while.body11, i32 0];
    i32 %134 = phi [^if.then1, i32 %145] [^while.body11, i32 %93];
    i1 %135 = scmp lt i32 %133, i32 %134;
    cbr i1 %135(prob = 0.97), ^while.body14, ^b11;
^b11:
    i32 %136 = add i32 %132, i32 1;
    store i32* %k with i32 %136;
    ubr ^while.header13;
^while.body14:
    [1024 * i32]* %137 = getelementptr &([1024 * i32]* %1)[i32 %133];
    i32* %138 = getelementptr &([1024 * i32]* %137)[i64 0][i32 %132];
    i32 %139 = load i32* %138;
    i1 %140 = scmp eq i32 %139, i32 0;
    cbr i1 %140(prob = 0.5), ^if.then1, ^b12;
^if.then1:
    i32 %141 = phi [^while.header16, i32 %147] [^while.body14, i32 %130];
    i32 %142 = phi [^while.header16, i32 %148] [^while.body14, i32 %131];
    i32 %143 = phi [^while.header16, i32 %149] [^while.body14, i32 %132];
    i32 %144 = phi [^while.header16, i32 %151] [^while.body14, i32 %133];
    i32 %145 = phi [^while.header16, i32 %152] [^while.body14, i32 %134];
    i32 %146 = add i32 %144, i32 1;
    store i32* %i with i32 %146;
    ubr ^while.header15;
^b12:
    store i32* %j with i32 0;
    ubr ^while.header16;
^while.header16:
    i32 %147 = phi [^while.body15, i32 %165] [^b12, i32 %130];
    i32 %148 = phi [^while.body15, i32 %166] [^b12, i32 %131];
    i32 %149 = phi [^while.body15, i32 %167] [^b12, i32 %132];
    i32 %150 = phi [^while.body15, i32 %171] [^b12, i32 0];
    i32 %151 = phi [^while.body15, i32 %169] [^b12, i32 %133];
    i32 %152 = phi [^while.body15, i32 %170] [^b12, i32 %134];
    i1 %153 = scmp lt i32 %150, i32 %152;
    cbr i1 %153(prob = 0.97), ^while.body15, ^if.then1;
^while.body15:
    [1024 * i32]* %154 = getelementptr &([1024 * i32]* %2)[i32 %151];
    i32* %155 = getelementptr &([1024 * i32]* %154)[i64 0][i32 %150];
    i32 %156 = load i32* %155;
    [1024 * i32]* %157 = getelementptr &([1024 * i32]* %1)[i32 %151];
    i32* %158 = getelementptr &([1024 * i32]* %157)[i64 0][i32 %149];
    i32 %159 = load i32* %158;
    [1024 * i32]* %160 = getelementptr &([1024 * i32]* %3)[i32 %149];
    i32* %161 = getelementptr &([1024 * i32]* %160)[i64 0][i32 %150];
    i32 %162 = load i32* %161;
    i32 %163 = mul i32 %159, i32 %162;
    i32 %164 = add i32 %156, i32 %163;
    store i32* %155 with i32 %164;
    i32 %165 = load i32* %n2;
    i32 %166 = load i32* %i2;
    i32 %167 = load i32* %k;
    i32 %168 = load i32* %j;
    i32 %169 = load i32* %i;
    i32 %170 = load i32* %n;
    i32 %171 = add i32 %168, i32 1;
    store i32* %j with i32 %171;
    ubr ^while.header16;
}
