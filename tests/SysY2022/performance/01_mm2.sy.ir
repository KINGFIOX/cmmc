internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 3;
    i32 %3 = add i32 %0, i32 -3;
    [4 * i8]* %4 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %5 = ptradd [4 * i8]* %4, i32 0;
    [4 * i8]* %6 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %7 = ptradd [4 * i8]* %6, i32 0;
    [1024 * [1024 * i32]]* %8 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    i8* %9 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %10 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %11 = phi [^entry, i32 0] [^b2, i32 %25];
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %8)[i64 0][i32 %11];
    ubr ^while.body2;
  ^b:
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    cbr i1 %1(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %14 = phi [^b, i32 0] [^b4, i32 %33];
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i32 %14];
    ubr ^while.body3;
  ^b1:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %16 = getelementptr &([1024 * [1024 * i32]]* %8)[i64 0][i64 0];
    [1024 * i32]* %17 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %18 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %19 = getelementptr &([1024 * [1024 * i32]]* %18)[i64 0][i64 0];
    ubr ^while.body4;
  ^while.body2:
    i32 %20 = phi [^while.body, i32 0] [^while.body2, i32 %23];
    i32 %21 = call () -> i32 @getint();
    i32* %22 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %20];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %20, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body2, ^b2;
  ^b2:
    i32 %25 = add i32 %11, i32 1;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body, ^b;
  ^while.body3:
    i32 %27 = phi [^while.body1, i32 0] [^while.body3, i32 %30];
    i32 %28 = call () -> i32 @getint();
    i32* %29 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %27];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = icmp sgt i32 %0, i32 %30;
    cbr i1 %31(prob = 0.984615), ^while.body3, ^b4;
  ^while.body4:
    i32 %32 = phi [^b1, i32 0] [^b5, i32 %35];
    cbr i1 %1(prob = 0.984615), ^b3, ^b5;
  ^b3:
    store i32* %5 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %9);
    ubr ^while.body5;
  ^b4:
    i32 %33 = add i32 %14, i32 1;
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body1, ^b1;
  ^b5:
    i32 %35 = add i32 %32, i32 1;
    i1 %36 = icmp slt i32 %35, i32 5;
    cbr i1 %36(prob = 0.8), ^while.body4, ^b6;
  ^while.body5:
    i32 %37 = phi [^b3, i32 0] [^b9, i32 %53];
    [1024 * i32]* %38 = getelementptr &([1024 * i32]* %17)[i32 %37];
    ubr ^while.header;
  ^b6:
    cbr i1 %1(prob = 0.984615), ^b7, ^b8;
  ^while.header:
    i32 %39 = phi [^while.body5, i32 0] [^while.body6, i32 %52] [^scalar.header, i32 %52] [^while.body9, i32 %52];
    i1 %40 = icmp sgt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.984615), ^while.body6, ^b9;
  ^b7:
    [9 * i8]* %41 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %42 = ptradd [9 * i8]* %41, i32 0;
    store i32* %42 with i32 0;
    i32* %43 = ptradd [9 * i8]* %41, i32 4;
    store i32* %43 with i32 %0;
    i1* %44 = ptradd [9 * i8]* %41, i32 8;
    store i1* %44 with i1 true;
    i8* %45 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %45);
    i32 %46 = load i32* %42;
    ubr ^b8;
  ^b8:
    i32 %47 = phi [^b6, i32 0] [^b7, i32 %46];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %47);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body6:
    [1024 * i32]* %48 = getelementptr &([1024 * i32]* %16)[i32 %39];
    i32* %49 = getelementptr &([1024 * i32]* %48)[i64 0][i32 %37];
    i32 %50 = load i32* %49;
    i1 %51 = icmp eq i32 %50, i32 0;
    i32 %52 = add i32 %39, i32 1;
    cbr i1 %51(prob = 0.5), ^while.header, ^b11;
  ^b9:
    i32 %53 = add i32 %37, i32 1;
    i1 %54 = icmp sgt i32 %0, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body5, ^b10;
  ^b10:
    store i32* %7 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %10);
    ubr ^while.body7;
  ^b11:
    [1024 * i32]* %55 = getelementptr &([1024 * i32]* %19)[i32 %39];
    cbr i1 %2(prob = 0.941176), ^while.body8, ^scalar.header;
  ^while.body7:
    i32 %56 = phi [^b10, i32 0] [^b12, i32 %103];
    [1024 * i32]* %57 = getelementptr &([1024 * i32]* %19)[i32 %56];
    ubr ^while.header1;
  ^while.body8:
    i32 %58 = phi [^b11, i32 0] [^while.body8, i32 %83];
    i32* %59 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([1024 * i32]* %38)[i64 0][i32 %58];
    i32 %62 = load i32* %61;
    i32 %63 = mul i32 %50, i32 %62;
    i32 %64 = add i32 %60, i32 %63;
    store i32* %59 with i32 %64;
    i32* %65 = getelementptr &(i32* %59)[i64 1];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %61)[i64 1];
    i32 %68 = load i32* %67;
    i32 %69 = mul i32 %50, i32 %68;
    i32 %70 = add i32 %66, i32 %69;
    store i32* %65 with i32 %70;
    i32* %71 = getelementptr &(i32* %59)[i64 2];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %61)[i64 2];
    i32 %74 = load i32* %73;
    i32 %75 = mul i32 %50, i32 %74;
    i32 %76 = add i32 %72, i32 %75;
    store i32* %71 with i32 %76;
    i32* %77 = getelementptr &(i32* %59)[i64 3];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %61)[i64 3];
    i32 %80 = load i32* %79;
    i32 %81 = mul i32 %50, i32 %80;
    i32 %82 = add i32 %78, i32 %81;
    store i32* %77 with i32 %82;
    i32 %83 = add i32 %58, i32 4;
    i1 %84 = icmp sgt i32 %3, i32 %83;
    cbr i1 %84(prob = 0.941176), ^while.body8, ^scalar.header;
  ^scalar.header:
    i32 %85 = phi [^b11, i32 0] [^while.body8, i32 %83];
    i1 %86 = icmp sle i32 %0, i32 %85;
    cbr i1 %86(prob = 0.25), ^while.header, ^while.body9;
  ^while.header1:
    i32 %87 = phi [^while.body7, i32 0] [^while.body10, i32 %102] [^scalar.header1, i32 %102] [^while.body12, i32 %102];
    i1 %88 = icmp sgt i32 %0, i32 %87;
    cbr i1 %88(prob = 0.984615), ^while.body10, ^b12;
  ^while.body9 {scalar}:
    i32 %89 = phi [^scalar.header, i32 %85] [^while.body9, i32 %96];
    i32* %90 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([1024 * i32]* %38)[i64 0][i32 %89];
    i32 %93 = load i32* %92;
    i32 %94 = mul i32 %50, i32 %93;
    i32 %95 = add i32 %91, i32 %94;
    store i32* %90 with i32 %95;
    i32 %96 = add i32 %89, i32 1;
    i1 %97 = icmp sgt i32 %0, i32 %96;
    cbr i1 %97(prob = 0.75), ^while.body9, ^while.header;
  ^while.body10:
    [1024 * i32]* %98 = getelementptr &([1024 * i32]* %16)[i32 %87];
    i32* %99 = getelementptr &([1024 * i32]* %98)[i64 0][i32 %56];
    i32 %100 = load i32* %99;
    i1 %101 = icmp eq i32 %100, i32 0;
    i32 %102 = add i32 %87, i32 1;
    cbr i1 %101(prob = 0.5), ^while.header1, ^b13;
  ^b12:
    i32 %103 = add i32 %56, i32 1;
    i1 %104 = icmp sgt i32 %0, i32 %103;
    cbr i1 %104(prob = 0.984615), ^while.body7, ^b5;
  ^b13:
    [1024 * i32]* %105 = getelementptr &([1024 * i32]* %17)[i32 %87];
    cbr i1 %2(prob = 0.941176), ^while.body11, ^scalar.header1;
  ^while.body11:
    i32 %106 = phi [^b13, i32 0] [^while.body11, i32 %131];
    i32* %107 = getelementptr &([1024 * i32]* %105)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &([1024 * i32]* %57)[i64 0][i32 %106];
    i32 %110 = load i32* %109;
    i32 %111 = mul i32 %100, i32 %110;
    i32 %112 = add i32 %108, i32 %111;
    store i32* %107 with i32 %112;
    i32* %113 = getelementptr &(i32* %107)[i64 1];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %109)[i64 1];
    i32 %116 = load i32* %115;
    i32 %117 = mul i32 %100, i32 %116;
    i32 %118 = add i32 %114, i32 %117;
    store i32* %113 with i32 %118;
    i32* %119 = getelementptr &(i32* %107)[i64 2];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %109)[i64 2];
    i32 %122 = load i32* %121;
    i32 %123 = mul i32 %100, i32 %122;
    i32 %124 = add i32 %120, i32 %123;
    store i32* %119 with i32 %124;
    i32* %125 = getelementptr &(i32* %107)[i64 3];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %109)[i64 3];
    i32 %128 = load i32* %127;
    i32 %129 = mul i32 %100, i32 %128;
    i32 %130 = add i32 %126, i32 %129;
    store i32* %125 with i32 %130;
    i32 %131 = add i32 %106, i32 4;
    i1 %132 = icmp sgt i32 %3, i32 %131;
    cbr i1 %132(prob = 0.941176), ^while.body11, ^scalar.header1;
  ^scalar.header1:
    i32 %133 = phi [^b13, i32 0] [^while.body11, i32 %131];
    i1 %134 = icmp sle i32 %0, i32 %133;
    cbr i1 %134(prob = 0.25), ^while.header1, ^while.body12;
  ^while.body12 {scalar}:
    i32 %135 = phi [^scalar.header1, i32 %133] [^while.body12, i32 %142];
    i32* %136 = getelementptr &([1024 * i32]* %105)[i64 0][i32 %135];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &([1024 * i32]* %57)[i64 0][i32 %135];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %100, i32 %139;
    i32 %141 = add i32 %137, i32 %140;
    store i32* %136 with i32 %141;
    i32 %142 = add i32 %135, i32 1;
    i1 %143 = icmp sgt i32 %0, i32 %142;
    cbr i1 %143(prob = 0.75), ^while.body12, ^while.header1;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmcReduceAddI32(i32*, i32) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [9 * i8]* %2 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %3 = ptradd [9 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    i1* %9 = ptradd [9 * i8]* %2, i32 8;
    i1 %10 = load i1* %9;
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %16];
    i32 %13 = phi [^b, i32 0] [^b2, i32 %15];
    cbr i1 %10(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i32 %12];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^b2:
    i32 %15 = phi [^b1, i32 %13] [^scalar.header, i32 %20] [^while.body1, i32 %84];
    i32 %16 = add i32 %12, i32 1;
    i1 %17 = icmp sgt i32 %1, i32 %16;
    cbr i1 %17(prob = 0.984615), ^b1, ^b3;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %18 = phi [^prebody, i32 %13] [^scalar.final, i32 %87];
    i32 %19 = phi [^prebody, i32 0] [^scalar.final, i32 %88];
    i32 %20 = phi [^prebody, i32 undef] [^scalar.final, i32 %87];
    i1 %21 = icmp sgt i32 %4, i32 %19;
    cbr i1 %21(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    i32* %22 = ptradd [9 * i8]* %2, i32 0;
    call (i32*, i32) -> void @cmmcReduceAddI32(i32* %22, i32 %15);
    ret;
  ^while.body:
    i32 %23 = phi [^super.header, i32 0] [^while.body, i32 %73];
    i32 %24 = phi [^super.header, i32 %13] [^while.body, i32 %72];
    i32* %25 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %23];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %24, i32 %26;
    i32* %28 = getelementptr &(i32* %25)[i64 1];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %27, i32 %29;
    i32* %31 = getelementptr &(i32* %25)[i64 2];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %30, i32 %32;
    i32* %34 = getelementptr &(i32* %25)[i64 3];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %33, i32 %35;
    i32* %37 = getelementptr &(i32* %25)[i64 4];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    i32* %40 = getelementptr &(i32* %25)[i64 5];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %39, i32 %41;
    i32* %43 = getelementptr &(i32* %25)[i64 6];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %42, i32 %44;
    i32* %46 = getelementptr &(i32* %25)[i64 7];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %45, i32 %47;
    i32* %49 = getelementptr &(i32* %25)[i64 8];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    i32* %52 = getelementptr &(i32* %25)[i64 9];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %51, i32 %53;
    i32* %55 = getelementptr &(i32* %25)[i64 10];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %54, i32 %56;
    i32* %58 = getelementptr &(i32* %25)[i64 11];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &(i32* %25)[i64 12];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &(i32* %25)[i64 13];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 %65;
    i32* %67 = getelementptr &(i32* %25)[i64 14];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %66, i32 %68;
    i32* %70 = getelementptr &(i32* %25)[i64 15];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    i32 %73 = add i32 %23, i32 16;
    i1 %74 = icmp sgt i32 %8, i32 %73;
    cbr i1 %74(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %75 = phi [^super.header, i32 0] [^while.body, i32 %73];
    i32 %76 = phi [^super.header, i32 %13] [^while.body, i32 %72];
    i32 %77 = phi [^super.header, i32 undef] [^while.body, i32 %72];
    i32 %78 = phi [^super.header, i32 undef] [^while.body, i32 %73];
    i1 %79 = icmp sgt i32 %5, i32 %75;
    cbr i1 %79(prob = 0.75), ^while.body2, ^scalar.final;
  ^while.body1 {scalar}:
    i32 %80 = phi [^scalar.header, i32 %19] [^while.body1, i32 %85];
    i32 %81 = phi [^scalar.header, i32 %18] [^while.body1, i32 %84];
    i32* %82 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %80];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32 %85 = add i32 %80, i32 1;
    i1 %86 = icmp sgt i32 %4, i32 %85;
    cbr i1 %86(prob = 0.75), ^while.body1, ^b2;
  ^scalar.final:
    i32 %87 = phi [^scalar.header1, i32 %77] [^while.body2, i32 %102];
    i32 %88 = phi [^scalar.header1, i32 %78] [^while.body2, i32 %103];
    ubr ^scalar.header;
  ^while.body2 {scalar}:
    i32 %89 = phi [^scalar.header1, i32 %76] [^while.body2, i32 %102];
    i32 %90 = phi [^scalar.header1, i32 %75] [^while.body2, i32 %103];
    i32* %91 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %89, i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    i32 %101 = load i32* %100;
    i32 %102 = add i32 %99, i32 %101;
    i32 %103 = add i32 %90, i32 4;
    i1 %104 = icmp sgt i32 %5, i32 %103;
    cbr i1 %104(prob = 0.75), ^while.body2, ^scalar.final;
}
internal [9 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
