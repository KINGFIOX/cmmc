internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A { Flexible };
internal [1024 * [1024 * i32]]* @B { Flexible };
internal [1024 * [1024 * i32]]* @C { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 4;
    [1024 * [1024 * i32]]* %3 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %4 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^b, i32 %10];
    i1 %6 = icmp sgt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %21];
    i1 %8 = icmp sgt i32 %0, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header3, ^b1;
  ^prebody:
    [1024 * i32]* %9 = getelementptr &([1024 * [1024 * i32]]* %3)[i64 0][i32 %5];
    ubr ^while.body;
  ^b:
    i32 %10 = add i32 %5, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %11 = getelementptr &([1024 * [1024 * i32]]* %3)[i64 0][i64 0];
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.header3:
    cbr i1 %1(prob = 0.97), ^prebody1, ^b2;
  ^prebody1:
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %7];
    ubr ^while.body2;
  ^while.body:
    i32 %16 = phi [^prebody, i32 0] [^while.body, i32 %19];
    i32 %17 = call () -> i32 @getint();
    i32* %18 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %16];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %16, i32 1;
    i1 %20 = icmp sgt i32 %0, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.body, ^b;
  ^b2:
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %22 = phi [^b1, i32 0] [^while.body6, i32 %63];
    ubr ^while.header4;
  ^while.body2:
    i32 %23 = phi [^prebody1, i32 0] [^while.body2, i32 %26];
    i32 %24 = call () -> i32 @getint();
    i32* %25 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %23];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %23, i32 1;
    i1 %27 = icmp sgt i32 %0, i32 %26;
    cbr i1 %27(prob = 0.97), ^while.body2, ^b2;
  ^while.header4:
    i32 %28 = phi [^while.body1, i32 0] [^b3, i32 %34];
    i1 %29 = icmp sgt i32 %0, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.header5, ^while.header6;
  ^while.header5:
    cbr i1 %1(prob = 0.97), ^prebody2, ^b3;
  ^while.header6:
    i32 %30 = phi [^while.header4, i32 0] [^b4, i32 %42];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    [1024 * i32]* %32 = getelementptr &([1024 * i32]* %12)[i32 %30];
    cbr i1 %31(prob = 0.97), ^while.header7, ^while.header8;
  ^prebody2:
    [1024 * i32]* %33 = getelementptr &([1024 * i32]* %14)[i32 %28];
    ubr ^super.header;
  ^b3:
    i32 %34 = add i32 %28, i32 1;
    ubr ^while.header4;
  ^while.header7:
    i32 %35 = phi [^while.header6, i32 0] [^if.then, i32 %54];
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.97), ^while.body3, ^b4;
  ^while.header8:
    i32 %37 = phi [^while.header6, i32 0] [^b5, i32 %60];
    i1 %38 = icmp sgt i32 %0, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.header9, ^while.header10;
  ^super.header:
    i32 %39 = phi [^prebody2, i32 0] [^while.body4, i32 %40];
    i32 %40 = add i32 %39, i32 4;
    i1 %41 = icmp sgt i32 %0, i32 %40;
    cbr i1 %41(prob = 0.89), ^while.body4, ^while.body5;
  ^b4:
    i32 %42 = add i32 %30, i32 1;
    ubr ^while.header6;
  ^while.body3:
    [1024 * i32]* %43 = getelementptr &([1024 * i32]* %11)[i32 %35];
    i32* %44 = getelementptr &([1024 * i32]* %43)[i64 0][i32 %30];
    i32 %45 = load i32* %44;
    i1 %46 = icmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then, ^while.header11;
  ^while.header9:
    cbr i1 %1(prob = 0.97), ^prebody3, ^b5;
  ^while.header10:
    i32 %47 = phi [^while.header8, i32 0] [^b6, i32 %69];
    i1 %48 = icmp sgt i32 %0, i32 %47;
    [1024 * i32]* %49 = getelementptr &([1024 * i32]* %14)[i32 %47];
    cbr i1 %48(prob = 0.97), ^while.header12, ^while.body6;
  ^while.body4:
    i32* %50 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %39];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %50)[i64 1];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %50)[i64 2];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %50)[i64 3];
    store i32* %53 with i32 0;
    ubr ^super.header;
  ^if.then:
    i32 %54 = add i32 %35, i32 1;
    ubr ^while.header7;
  ^prebody3:
    [1024 * i32]* %55 = getelementptr &([1024 * i32]* %12)[i32 %37];
    ubr ^super.header1;
  ^while.body5:
    i32 %56 = phi [^super.header, i32 %39] [^while.body5, i32 %58];
    i32* %57 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %56];
    store i32* %57 with i32 0;
    i32 %58 = add i32 %56, i32 1;
    i1 %59 = icmp sgt i32 %0, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body5, ^b3;
  ^b5:
    i32 %60 = add i32 %37, i32 1;
    ubr ^while.header8;
  ^while.header11:
    cbr i1 %1(prob = 0.97), ^prebody4, ^if.then;
  ^while.header12:
    i32 %61 = phi [^while.header10, i32 0] [^if.then1, i32 %81];
    i1 %62 = icmp sgt i32 %0, i32 %61;
    cbr i1 %62(prob = 0.97), ^while.body7, ^b6;
  ^while.body6:
    i32 %63 = add i32 %22, i32 1;
    i1 %64 = icmp slt i32 %63, i32 5;
    cbr i1 %64(prob = 0.8), ^while.body1, ^while.header13;
  ^prebody4:
    [1024 * i32]* %65 = getelementptr &([1024 * i32]* %14)[i32 %35];
    cbr i1 %2(prob = 0.89), ^while.body9, ^while.body11;
  ^super.header1:
    i32 %66 = phi [^prebody3, i32 0] [^while.body8, i32 %67];
    i32 %67 = add i32 %66, i32 4;
    i1 %68 = icmp sgt i32 %0, i32 %67;
    cbr i1 %68(prob = 0.89), ^while.body8, ^while.body10;
  ^b6:
    i32 %69 = add i32 %47, i32 1;
    ubr ^while.header10;
  ^while.body7:
    [1024 * i32]* %70 = getelementptr &([1024 * i32]* %11)[i32 %61];
    i32* %71 = getelementptr &([1024 * i32]* %70)[i64 0][i32 %47];
    i32 %72 = load i32* %71;
    i1 %73 = icmp eq i32 %72, i32 0;
    cbr i1 %73(prob = 0.5), ^if.then1, ^while.header14;
  ^while.header13:
    i32 %74 = phi [^while.body6, i32 0] [^b8, i32 %125];
    i32 %75 = phi [^while.body6, i32 0] [^b8, i32 %126];
    i1 %76 = icmp sgt i32 %0, i32 %75;
    cbr i1 %76(prob = 0.97), ^while.header15, ^b7;
  ^while.body8:
    i32* %77 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %66];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %77)[i64 1];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %77)[i64 2];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %77)[i64 3];
    store i32* %80 with i32 0;
    ubr ^super.header1;
  ^if.then1:
    i32 %81 = add i32 %61, i32 1;
    ubr ^while.header12;
  ^while.body9:
    i32 %82 = phi [^prebody4, i32 4] [^while.body9, i32 %108];
    i32 %83 = phi [^prebody4, i32 0] [^while.body9, i32 %82];
    i32* %84 = getelementptr &([1024 * i32]* %65)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %83];
    i32 %87 = load i32* %86;
    i32 %88 = mul i32 %45, i32 %87;
    i32 %89 = add i32 %85, i32 %88;
    store i32* %84 with i32 %89;
    i32* %90 = getelementptr &(i32* %84)[i64 1];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %86)[i64 1];
    i32 %93 = load i32* %92;
    i32 %94 = mul i32 %45, i32 %93;
    i32 %95 = add i32 %91, i32 %94;
    store i32* %90 with i32 %95;
    i32* %96 = getelementptr &(i32* %84)[i64 2];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %86)[i64 2];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %45, i32 %99;
    i32 %101 = add i32 %97, i32 %100;
    store i32* %96 with i32 %101;
    i32* %102 = getelementptr &(i32* %84)[i64 3];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %86)[i64 3];
    i32 %105 = load i32* %104;
    i32 %106 = mul i32 %45, i32 %105;
    i32 %107 = add i32 %103, i32 %106;
    store i32* %102 with i32 %107;
    i32 %108 = add i32 %82, i32 4;
    i1 %109 = icmp sgt i32 %0, i32 %108;
    cbr i1 %109(prob = 0.89), ^while.body9, ^while.body11;
  ^while.body10:
    i32 %110 = phi [^super.header1, i32 %66] [^while.body10, i32 %112];
    i32* %111 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %110];
    store i32* %111 with i32 0;
    i32 %112 = add i32 %110, i32 1;
    i1 %113 = icmp sgt i32 %0, i32 %112;
    cbr i1 %113(prob = 0.75), ^while.body10, ^b5;
  ^while.body11:
    i32 %114 = phi [^prebody4, i32 0] [^while.body9, i32 %82] [^while.body11, i32 %121];
    i32* %115 = getelementptr &([1024 * i32]* %65)[i64 0][i32 %114];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %114];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %45, i32 %118;
    i32 %120 = add i32 %116, i32 %119;
    store i32* %115 with i32 %120;
    i32 %121 = add i32 %114, i32 1;
    i1 %122 = icmp sgt i32 %0, i32 %121;
    cbr i1 %122(prob = 0.75), ^while.body11, ^if.then;
  ^while.header14:
    cbr i1 %1(prob = 0.97), ^prebody6, ^if.then1;
  ^while.header15:
    cbr i1 %1(prob = 0.97), ^prebody5, ^b8;
  ^b7:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %74);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody5:
    [1024 * i32]* %123 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %75];
    ubr ^super.header2;
  ^prebody6:
    [1024 * i32]* %124 = getelementptr &([1024 * i32]* %12)[i32 %61];
    cbr i1 %2(prob = 0.89), ^while.body12, ^while.body13;
  ^b8:
    i32 %125 = phi [^while.header15, i32 %74] [^while.body15, i32 %184];
    i32 %126 = add i32 %75, i32 1;
    ubr ^while.header13;
  ^while.body12:
    i32 %127 = phi [^prebody6, i32 4] [^while.body12, i32 %153];
    i32 %128 = phi [^prebody6, i32 0] [^while.body12, i32 %127];
    i32* %129 = getelementptr &([1024 * i32]* %124)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &([1024 * i32]* %49)[i64 0][i32 %128];
    i32 %132 = load i32* %131;
    i32 %133 = mul i32 %72, i32 %132;
    i32 %134 = add i32 %130, i32 %133;
    store i32* %129 with i32 %134;
    i32* %135 = getelementptr &(i32* %129)[i64 1];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %131)[i64 1];
    i32 %138 = load i32* %137;
    i32 %139 = mul i32 %72, i32 %138;
    i32 %140 = add i32 %136, i32 %139;
    store i32* %135 with i32 %140;
    i32* %141 = getelementptr &(i32* %129)[i64 2];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %131)[i64 2];
    i32 %144 = load i32* %143;
    i32 %145 = mul i32 %72, i32 %144;
    i32 %146 = add i32 %142, i32 %145;
    store i32* %141 with i32 %146;
    i32* %147 = getelementptr &(i32* %129)[i64 3];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %131)[i64 3];
    i32 %150 = load i32* %149;
    i32 %151 = mul i32 %72, i32 %150;
    i32 %152 = add i32 %148, i32 %151;
    store i32* %147 with i32 %152;
    i32 %153 = add i32 %127, i32 4;
    i1 %154 = icmp sgt i32 %0, i32 %153;
    cbr i1 %154(prob = 0.89), ^while.body12, ^while.body13;
  ^super.header2:
    i32 %155 = phi [^prebody5, i32 0] [^while.body14, i32 %157];
    i32 %156 = phi [^prebody5, i32 %74] [^while.body14, i32 %179];
    i32 %157 = add i32 %155, i32 4;
    i1 %158 = icmp sgt i32 %0, i32 %157;
    cbr i1 %158(prob = 0.89), ^while.body14, ^while.body15;
  ^while.body13:
    i32 %159 = phi [^prebody6, i32 0] [^while.body12, i32 %127] [^while.body13, i32 %166];
    i32* %160 = getelementptr &([1024 * i32]* %124)[i64 0][i32 %159];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &([1024 * i32]* %49)[i64 0][i32 %159];
    i32 %163 = load i32* %162;
    i32 %164 = mul i32 %72, i32 %163;
    i32 %165 = add i32 %161, i32 %164;
    store i32* %160 with i32 %165;
    i32 %166 = add i32 %159, i32 1;
    i1 %167 = icmp sgt i32 %0, i32 %166;
    cbr i1 %167(prob = 0.75), ^while.body13, ^if.then1;
  ^while.body14:
    i32* %168 = getelementptr &([1024 * i32]* %123)[i64 0][i32 %155];
    i32 %169 = load i32* %168;
    i32 %170 = add i32 %156, i32 %169;
    i32* %171 = getelementptr &(i32* %168)[i64 1];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %170, i32 %172;
    i32* %174 = getelementptr &(i32* %168)[i64 2];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %173, i32 %175;
    i32* %177 = getelementptr &(i32* %168)[i64 3];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %176, i32 %178;
    ubr ^super.header2;
  ^while.body15:
    i32 %180 = phi [^super.header2, i32 %155] [^while.body15, i32 %185];
    i32 %181 = phi [^super.header2, i32 %156] [^while.body15, i32 %184];
    i32* %182 = getelementptr &([1024 * i32]* %123)[i64 0][i32 %180];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %181, i32 %183;
    i32 %185 = add i32 %180, i32 1;
    i1 %186 = icmp sgt i32 %0, i32 %185;
    cbr i1 %186(prob = 0.75), ^while.body15, ^b8;
}
