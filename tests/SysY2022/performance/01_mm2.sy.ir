internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp slt i32 %0, i32 1;
    [4 * i8]* %3 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %4 = ptradd [4 * i8]* %3, i32 0;
    [4 * i8]* %5 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %6 = ptradd [4 * i8]* %5, i32 0;
    [4 * i8]* %7 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %8 = ptradd [4 * i8]* %7, i32 0;
    [4 * i8]* %9 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_4 to [4 * i8]*;
    i32* %10 = ptradd [4 * i8]* %9, i32 0;
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %12 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    i8* %13 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %14 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %15 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    i8* %16 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %17 = phi [^entry, i32 0] [^b1, i32 %25];
    [1024 * i32]* %18 = getelementptr &([1024 * [1024 * i32]]* %12)[i64 0][i32 %17];
    ubr ^while.body1;
  ^b:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body2;
  ^while.body1:
    i32 %19 = phi [^while.body, i32 0] [^while.body1, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([1024 * i32]* %18)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b1;
  ^while.body2:
    i32 %24 = phi [^b, i32 0] [^b3, i32 %27];
    cbr i1 %1(prob = 0.984615), ^b2, ^b3;
  ^b1:
    i32 %25 = add i32 %17, i32 1;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    store i32* %4 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %13);
    cbr i1 %2(prob = 0.5), ^b6, ^b5;
  ^b3:
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp slt i32 %27, i32 5;
    cbr i1 %28(prob = 0.8), ^while.body2, ^b7;
  ^b4:
    i32 %29 = phi [^b1, i32 0] [^b11, i32 %42];
    [1024 * i32]* %30 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i32 %29];
    ubr ^while.body3;
  ^b5:
    store i32* %6 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %14);
    ubr ^b6;
  ^b6:
    store i32* %8 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %15);
    cbr i1 %2(prob = 0.5), ^b3, ^b8;
  ^b7:
    cbr i1 %1(prob = 0.984615), ^b9, ^b10;
  ^b8:
    store i32* %10 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %16);
    ubr ^b3;
  ^b9:
    [8 * i8]* %31 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %32 = ptradd [8 * i8]* %31, i32 0;
    store i32* %32 with i32 0;
    i32* %33 = ptradd [8 * i8]* %31, i32 4;
    store i32* %33 with i32 %0;
    i8* %34 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %34);
    i32 %35 = load i32* %32;
    ubr ^b10;
  ^while.body3:
    i32 %36 = phi [^b4, i32 0] [^while.body3, i32 %39];
    i32 %37 = call () -> i32 @getint();
    i32* %38 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %36];
    store i32* %38 with i32 %37;
    i32 %39 = add i32 %36, i32 1;
    i1 %40 = icmp sgt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.984615), ^while.body3, ^b11;
  ^b10:
    i32 %41 = phi [^b7, i32 0] [^b9, i32 %35];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %41);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b11:
    i32 %42 = add i32 %29, i32 1;
    i1 %43 = icmp sgt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.984615), ^b4, ^b;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    i32* %3 = ptradd [8 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^cond, ^b1;
  ^cond:
    i32 %6 = add i32 %4, i32 -7;
    i1 %7 = icmp sgt i32 %4, i32 7;
    [1024 * [1024 * i32]]* %8 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
  ^b1:
    i32 %9 = phi [^b, i32 0] [^scalar.final, i32 %50] [^scalar.final1, i32 %63];
    i32* %10 = ptradd [8 * i8]* %2, i32 0;
    atomicadd i32* %10, i32 %9;
    ret;
  ^b2:
    i32 %12 = phi [^cond, i32 %0] [^scalar.final1, i32 %64];
    i32 %13 = phi [^cond, i32 0] [^scalar.final1, i32 %63];
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %8)[i64 0][i32 %12];
    ubr ^while.body;
  ^b3:
    i32 %15 = phi [^cond, i32 %0] [^scalar.final, i32 %54];
    i32 %16 = phi [^cond, i32 0] [^scalar.final, i32 %50];
    [1024 * i32]* %17 = getelementptr &([1024 * [1024 * i32]]* %8)[i64 0][i32 %15];
    ubr ^while.body1;
  ^while.body:
    i32 %18 = phi [^b2, i32 %13] [^while.body, i32 %43];
    i32 %19 = phi [^b2, i32 0] [^while.body, i32 %44];
    i32* %20 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %19];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %18, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %20)[i64 2];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %20)[i64 3];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %20)[i64 4];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %20)[i64 5];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %20)[i64 6];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %20)[i64 7];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32 %44 = add i32 %19, i32 8;
    i1 %45 = icmp sgt i32 %6, i32 %44;
    cbr i1 %45(prob = 0.888889), ^while.body, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %46 = phi [^b3, i32 0] [^while.body1, i32 %51];
    i32 %47 = phi [^b3, i32 %16] [^while.body1, i32 %50];
    i32* %48 = getelementptr &([1024 * i32]* %17)[i64 0][i32 %46];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32 %51 = add i32 %46, i32 1;
    i1 %52 = icmp sgt i32 %4, i32 %51;
    cbr i1 %52(prob = 0.875), ^while.body1, ^scalar.final;
  ^scalar.header:
    i1 %53 = icmp sgt i32 %4, i32 %44;
    cbr i1 %53(prob = 0.875), ^while.body2, ^scalar.final1;
  ^scalar.final:
    i32 %54 = add i32 %15, i32 1;
    i1 %55 = icmp sgt i32 %1, i32 %54;
    cbr i1 %55(prob = 0.984615), ^b3, ^b1;
  ^while.body2 {scalar}:
    i32 %56 = phi [^scalar.header, i32 %44] [^while.body2, i32 %61];
    i32 %57 = phi [^scalar.header, i32 %43] [^while.body2, i32 %60];
    i32* %58 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %56];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32 %61 = add i32 %56, i32 1;
    i1 %62 = icmp sgt i32 %4, i32 %61;
    cbr i1 %62(prob = 0.875), ^while.body2, ^scalar.final1;
  ^scalar.final1:
    i32 %63 = phi [^scalar.header, i32 %43] [^while.body2, i32 %60];
    i32 %64 = add i32 %12, i32 1;
    i1 %65 = icmp sgt i32 %1, i32 %64;
    cbr i1 %65(prob = 0.984615), ^b2, ^b1;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 7;
    i32 %6 = add i32 %4, i32 -7;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %9 = phi [^b, i32 %0] [^b4, i32 %34];
    [1024 * i32]* %10 = getelementptr &([1024 * i32]* %8)[i32 %9];
    ubr ^while.body;
  ^cond:
    i1 %11 = icmp sgt i32 %4, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %12 = phi [^cond, i32 %0] [^b5, i32 %36];
    [1024 * i32]* %13 = getelementptr &([1024 * i32]* %8)[i32 %12];
    ubr ^while.body1;
  ^while.body:
    i32 %14 = phi [^b1, i32 0] [^while.body, i32 %23];
    i32* %15 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %15)[i64 1];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %15)[i64 2];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %15)[i64 3];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %15)[i64 4];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %15)[i64 5];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %15)[i64 6];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %15)[i64 7];
    store i32* %22 with i32 0;
    i32 %23 = add i32 %14, i32 8;
    i1 %24 = icmp sgt i32 %6, i32 %23;
    cbr i1 %24(prob = 0.888889), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %25 = icmp sgt i32 %4, i32 %23;
    cbr i1 %25(prob = 0.875), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %26 = phi [^b2, i32 0] [^while.body1, i32 %28];
    i32* %27 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %26];
    store i32* %27 with i32 0;
    i32 %28 = add i32 %26, i32 1;
    i1 %29 = icmp sgt i32 %4, i32 %28;
    cbr i1 %29(prob = 0.875), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %30 = phi [^scalar.header, i32 %23] [^while.body2, i32 %32];
    i32* %31 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %30];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %30, i32 1;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.875), ^while.body2, ^b4;
  ^b4:
    i32 %34 = add i32 %9, i32 1;
    i1 %35 = icmp sgt i32 %1, i32 %34;
    cbr i1 %35(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %36 = add i32 %12, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.984615), ^b2, ^b3;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 7;
    i32 %6 = add i32 %4, i32 -7;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %25];
    [1024 * i32]* %14 = getelementptr &([1024 * i32]* %12)[i32 %13];
    ubr ^while.header;
  ^cond:
    i1 %15 = icmp slt i32 %4, i32 1;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^while.header:
    i32 %16 = phi [^b1, i32 0] [^while.body, i32 %24] [^scalar.header, i32 %24] [^while.body4, i32 %24];
    i1 %17 = icmp sgt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %35];
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %18];
    ubr ^while.header1;
  ^b3:
    ret;
  ^while.body:
    [1024 * i32]* %20 = getelementptr &([1024 * i32]* %8)[i32 %16];
    i32* %21 = getelementptr &([1024 * i32]* %20)[i64 0][i32 %13];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    i32 %24 = add i32 %16, i32 1;
    cbr i1 %23(prob = 0.5), ^while.header, ^prebody;
  ^b4:
    i32 %25 = add i32 %13, i32 1;
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^b1, ^b3;
  ^while.header1:
    i32 %27 = phi [^b2, i32 0] [^while.body1, i32 %34] [^while.body3, i32 %34];
    i1 %28 = icmp sgt i32 %4, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b5;
  ^prebody:
    [1024 * i32]* %29 = getelementptr &([1024 * i32]* %10)[i32 %16];
    ubr ^while.body2;
  ^while.body1:
    [1024 * i32]* %30 = getelementptr &([1024 * i32]* %8)[i32 %27];
    i32* %31 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %18];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 0;
    i32 %34 = add i32 %27, i32 1;
    cbr i1 %33(prob = 0.5), ^while.header1, ^prebody1;
  ^b5:
    i32 %35 = add i32 %18, i32 1;
    i1 %36 = icmp sgt i32 %1, i32 %35;
    cbr i1 %36(prob = 0.984615), ^b2, ^b3;
  ^while.body2:
    i32 %37 = phi [^prebody, i32 0] [^while.body2, i32 %78];
    i32* %38 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %22, i32 %39;
    i32* %41 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %37];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %38)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %22, i32 %44;
    i32* %46 = getelementptr &(i32* %41)[i64 1];
    atomicadd i32* %46, i32 %45;
    i32* %48 = getelementptr &(i32* %38)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = mul i32 %22, i32 %49;
    i32* %51 = getelementptr &(i32* %41)[i64 2];
    atomicadd i32* %51, i32 %50;
    i32* %53 = getelementptr &(i32* %38)[i64 3];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %22, i32 %54;
    i32* %56 = getelementptr &(i32* %41)[i64 3];
    atomicadd i32* %56, i32 %55;
    i32* %58 = getelementptr &(i32* %38)[i64 4];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %22, i32 %59;
    i32* %61 = getelementptr &(i32* %41)[i64 4];
    atomicadd i32* %61, i32 %60;
    i32* %63 = getelementptr &(i32* %38)[i64 5];
    i32 %64 = load i32* %63;
    i32 %65 = mul i32 %22, i32 %64;
    i32* %66 = getelementptr &(i32* %41)[i64 5];
    atomicadd i32* %66, i32 %65;
    i32* %68 = getelementptr &(i32* %38)[i64 6];
    i32 %69 = load i32* %68;
    i32 %70 = mul i32 %22, i32 %69;
    i32* %71 = getelementptr &(i32* %41)[i64 6];
    atomicadd i32* %71, i32 %70;
    i32* %73 = getelementptr &(i32* %38)[i64 7];
    i32 %74 = load i32* %73;
    i32 %75 = mul i32 %22, i32 %74;
    i32* %76 = getelementptr &(i32* %41)[i64 7];
    atomicadd i32* %76, i32 %75;
    i32 %78 = add i32 %37, i32 8;
    i1 %79 = icmp sgt i32 %6, i32 %78;
    cbr i1 %79(prob = 0.888889), ^while.body2, ^scalar.header;
  ^prebody1:
    [1024 * i32]* %80 = getelementptr &([1024 * i32]* %10)[i32 %27];
    ubr ^while.body3;
  ^scalar.header:
    i1 %81 = icmp sle i32 %4, i32 %78;
    cbr i1 %81(prob = 0.125), ^while.header, ^while.body4;
  ^while.body3 {scalar}:
    i32 %82 = phi [^prebody1, i32 0] [^while.body3, i32 %88];
    i32* %83 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %82];
    i32 %84 = load i32* %83;
    i32 %85 = mul i32 %32, i32 %84;
    i32* %86 = getelementptr &([1024 * i32]* %80)[i64 0][i32 %82];
    atomicadd i32* %86, i32 %85;
    i32 %88 = add i32 %82, i32 1;
    i1 %89 = icmp sgt i32 %4, i32 %88;
    cbr i1 %89(prob = 0.875), ^while.body3, ^while.header1;
  ^while.body4 {scalar}:
    i32 %90 = phi [^scalar.header, i32 %78] [^while.body4, i32 %96];
    i32* %91 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = mul i32 %22, i32 %92;
    i32* %94 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %90];
    atomicadd i32* %94, i32 %93;
    i32 %96 = add i32 %90, i32 1;
    i1 %97 = icmp sgt i32 %4, i32 %96;
    cbr i1 %97(prob = 0.875), ^while.body4, ^while.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 7;
    i32 %6 = add i32 %4, i32 -7;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %9 = phi [^b, i32 %0] [^b4, i32 %34];
    [1024 * i32]* %10 = getelementptr &([1024 * i32]* %8)[i32 %9];
    ubr ^while.body;
  ^cond:
    i1 %11 = icmp sgt i32 %4, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %12 = phi [^cond, i32 %0] [^b5, i32 %36];
    [1024 * i32]* %13 = getelementptr &([1024 * i32]* %8)[i32 %12];
    ubr ^while.body1;
  ^while.body:
    i32 %14 = phi [^b1, i32 0] [^while.body, i32 %23];
    i32* %15 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %15)[i64 1];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %15)[i64 2];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %15)[i64 3];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %15)[i64 4];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %15)[i64 5];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %15)[i64 6];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %15)[i64 7];
    store i32* %22 with i32 0;
    i32 %23 = add i32 %14, i32 8;
    i1 %24 = icmp sgt i32 %6, i32 %23;
    cbr i1 %24(prob = 0.888889), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %25 = icmp sgt i32 %4, i32 %23;
    cbr i1 %25(prob = 0.875), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %26 = phi [^b2, i32 0] [^while.body1, i32 %28];
    i32* %27 = getelementptr &([1024 * i32]* %13)[i64 0][i32 %26];
    store i32* %27 with i32 0;
    i32 %28 = add i32 %26, i32 1;
    i1 %29 = icmp sgt i32 %4, i32 %28;
    cbr i1 %29(prob = 0.875), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %30 = phi [^scalar.header, i32 %23] [^while.body2, i32 %32];
    i32* %31 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %30];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %30, i32 1;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.875), ^while.body2, ^b4;
  ^b4:
    i32 %34 = add i32 %9, i32 1;
    i1 %35 = icmp sgt i32 %1, i32 %34;
    cbr i1 %35(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %36 = add i32 %12, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.984615), ^b2, ^b3;
}
internal [4 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_4 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 7;
    i32 %6 = add i32 %4, i32 -7;
    [1024 * [1024 * i32]]* %7 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* %7)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %25];
    [1024 * i32]* %14 = getelementptr &([1024 * i32]* %12)[i32 %13];
    ubr ^while.header;
  ^cond:
    i1 %15 = icmp slt i32 %4, i32 1;
    cbr i1 %15(prob = 0.5), ^b3, ^b2;
  ^while.header:
    i32 %16 = phi [^b1, i32 0] [^while.body, i32 %24] [^scalar.header, i32 %24] [^while.body4, i32 %24];
    i1 %17 = icmp sgt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body, ^b4;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %35];
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %18];
    ubr ^while.header1;
  ^b3:
    ret;
  ^while.body:
    [1024 * i32]* %20 = getelementptr &([1024 * i32]* %8)[i32 %16];
    i32* %21 = getelementptr &([1024 * i32]* %20)[i64 0][i32 %13];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    i32 %24 = add i32 %16, i32 1;
    cbr i1 %23(prob = 0.5), ^while.header, ^prebody;
  ^b4:
    i32 %25 = add i32 %13, i32 1;
    i1 %26 = icmp sgt i32 %1, i32 %25;
    cbr i1 %26(prob = 0.984615), ^b1, ^b3;
  ^while.header1:
    i32 %27 = phi [^b2, i32 0] [^while.body1, i32 %34] [^while.body3, i32 %34];
    i1 %28 = icmp sgt i32 %4, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b5;
  ^prebody:
    [1024 * i32]* %29 = getelementptr &([1024 * i32]* %10)[i32 %16];
    ubr ^while.body2;
  ^while.body1:
    [1024 * i32]* %30 = getelementptr &([1024 * i32]* %8)[i32 %27];
    i32* %31 = getelementptr &([1024 * i32]* %30)[i64 0][i32 %18];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %32, i32 0;
    i32 %34 = add i32 %27, i32 1;
    cbr i1 %33(prob = 0.5), ^while.header1, ^prebody1;
  ^b5:
    i32 %35 = add i32 %18, i32 1;
    i1 %36 = icmp sgt i32 %1, i32 %35;
    cbr i1 %36(prob = 0.984615), ^b2, ^b3;
  ^while.body2:
    i32 %37 = phi [^prebody, i32 0] [^while.body2, i32 %78];
    i32* %38 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %22, i32 %39;
    i32* %41 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %37];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %38)[i64 1];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %22, i32 %44;
    i32* %46 = getelementptr &(i32* %41)[i64 1];
    atomicadd i32* %46, i32 %45;
    i32* %48 = getelementptr &(i32* %38)[i64 2];
    i32 %49 = load i32* %48;
    i32 %50 = mul i32 %22, i32 %49;
    i32* %51 = getelementptr &(i32* %41)[i64 2];
    atomicadd i32* %51, i32 %50;
    i32* %53 = getelementptr &(i32* %38)[i64 3];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %22, i32 %54;
    i32* %56 = getelementptr &(i32* %41)[i64 3];
    atomicadd i32* %56, i32 %55;
    i32* %58 = getelementptr &(i32* %38)[i64 4];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %22, i32 %59;
    i32* %61 = getelementptr &(i32* %41)[i64 4];
    atomicadd i32* %61, i32 %60;
    i32* %63 = getelementptr &(i32* %38)[i64 5];
    i32 %64 = load i32* %63;
    i32 %65 = mul i32 %22, i32 %64;
    i32* %66 = getelementptr &(i32* %41)[i64 5];
    atomicadd i32* %66, i32 %65;
    i32* %68 = getelementptr &(i32* %38)[i64 6];
    i32 %69 = load i32* %68;
    i32 %70 = mul i32 %22, i32 %69;
    i32* %71 = getelementptr &(i32* %41)[i64 6];
    atomicadd i32* %71, i32 %70;
    i32* %73 = getelementptr &(i32* %38)[i64 7];
    i32 %74 = load i32* %73;
    i32 %75 = mul i32 %22, i32 %74;
    i32* %76 = getelementptr &(i32* %41)[i64 7];
    atomicadd i32* %76, i32 %75;
    i32 %78 = add i32 %37, i32 8;
    i1 %79 = icmp sgt i32 %6, i32 %78;
    cbr i1 %79(prob = 0.888889), ^while.body2, ^scalar.header;
  ^prebody1:
    [1024 * i32]* %80 = getelementptr &([1024 * i32]* %10)[i32 %27];
    ubr ^while.body3;
  ^scalar.header:
    i1 %81 = icmp sle i32 %4, i32 %78;
    cbr i1 %81(prob = 0.125), ^while.header, ^while.body4;
  ^while.body3 {scalar}:
    i32 %82 = phi [^prebody1, i32 0] [^while.body3, i32 %88];
    i32* %83 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %82];
    i32 %84 = load i32* %83;
    i32 %85 = mul i32 %32, i32 %84;
    i32* %86 = getelementptr &([1024 * i32]* %80)[i64 0][i32 %82];
    atomicadd i32* %86, i32 %85;
    i32 %88 = add i32 %82, i32 1;
    i1 %89 = icmp sgt i32 %4, i32 %88;
    cbr i1 %89(prob = 0.875), ^while.body3, ^while.header1;
  ^while.body4 {scalar}:
    i32 %90 = phi [^scalar.header, i32 %78] [^while.body4, i32 %96];
    i32* %91 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i32 %93 = mul i32 %22, i32 %92;
    i32* %94 = getelementptr &([1024 * i32]* %29)[i64 0][i32 %90];
    atomicadd i32* %94, i32 %93;
    i32 %96 = add i32 %90, i32 1;
    i1 %97 = icmp sgt i32 %4, i32 %96;
    cbr i1 %97(prob = 0.875), ^while.body4, ^while.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_4, align 8;
