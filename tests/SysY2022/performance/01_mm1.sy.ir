internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @B, align 8 { Flexible };
internal [1024 * [1024 * i32]]* @C, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp slt i32 %0, i32 1;
    [4 * i8]* %3 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %4 = ptradd [4 * i8]* %3, i32 0;
    [8 * i8]* %5 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_2 to [8 * i8]*;
    i1* %6 = ptradd [8 * i8]* %5, i32 0;
    i32* %7 = ptradd [8 * i8]* %5, i32 4;
    [4 * i8]* %8 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %9 = ptradd [4 * i8]* %8, i32 0;
    [8 * i8]* %10 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_4 to [8 * i8]*;
    i1* %11 = ptradd [8 * i8]* %10, i32 0;
    i32* %12 = ptradd [8 * i8]* %10, i32 4;
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %14 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    i8* %15 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    i8* %16 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %17 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    i8* %18 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %19 = phi [^entry, i32 0] [^b2, i32 %27];
    [1024 * i32]* %20 = getelementptr &([1024 * [1024 * i32]]* %14)[i64 0][i32 %19];
    ubr ^while.body1;
  ^b:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body2;
  ^while.body1:
    i32 %21 = phi [^while.body, i32 0] [^while.body1, i32 %24];
    i32 %22 = call () -> i32 @getint();
    i32* %23 = getelementptr &([1024 * i32]* %20)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body1, ^b2;
  ^while.body2:
    i32 %26 = phi [^b, i32 0] [^b3, i32 %29];
    cbr i1 %1(prob = 0.984615), ^b1, ^b3;
  ^b1:
    store i32* %4 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %15);
    store i1* %6 with i1 %2;
    store i32* %7 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %16);
    store i32* %9 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %17);
    store i1* %11 with i1 %2;
    store i32* %12 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %18);
    ubr ^b3;
  ^b2:
    i32 %27 = add i32 %19, i32 1;
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body, ^while.body3;
  ^b3:
    i32 %29 = add i32 %26, i32 1;
    i1 %30 = icmp slt i32 %29, i32 5;
    cbr i1 %30(prob = 0.8), ^while.body2, ^b4;
  ^while.body3:
    i32 %31 = phi [^b2, i32 0] [^b7, i32 %45];
    [1024 * i32]* %32 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i32 %31];
    ubr ^while.body4;
  ^b4:
    cbr i1 %1(prob = 0.984615), ^b5, ^b6;
  ^b5:
    [9 * i8]* %33 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %34 = ptradd [9 * i8]* %33, i32 0;
    store i32* %34 with i32 0;
    i32* %35 = ptradd [9 * i8]* %33, i32 4;
    store i32* %35 with i32 %0;
    i1* %36 = ptradd [9 * i8]* %33, i32 8;
    store i1* %36 with i1 true;
    i8* %37 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %37);
    i32 %38 = load i32* %34;
    ubr ^b6;
  ^while.body4:
    i32 %39 = phi [^while.body3, i32 0] [^while.body4, i32 %42];
    i32 %40 = call () -> i32 @getint();
    i32* %41 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %39];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %39, i32 1;
    i1 %43 = icmp sgt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.984615), ^while.body4, ^b7;
  ^b6:
    i32 %44 = phi [^b4, i32 0] [^b5, i32 %38];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %44);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b7:
    i32 %45 = add i32 %31, i32 1;
    i1 %46 = icmp sgt i32 %0, i32 %45;
    cbr i1 %46(prob = 0.984615), ^while.body3, ^b;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [9 * i8]* %2 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_0 to [9 * i8]*;
    i32* %3 = ptradd [9 * i8]* %2, i32 4;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    i1* %9 = ptradd [9 * i8]* %2, i32 8;
    i1 %10 = load i1* %9;
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %12 = phi [^b, i32 %0] [^b2, i32 %16];
    i32 %13 = phi [^b, i32 0] [^b2, i32 %15];
    cbr i1 %10(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i32 %12];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^b2:
    i32 %15 = phi [^b1, i32 %13] [^scalar.header, i32 %20] [^while.body1, i32 %85];
    i32 %16 = add i32 %12, i32 1;
    i1 %17 = icmp sgt i32 %1, i32 %16;
    cbr i1 %17(prob = 0.984615), ^b1, ^b3;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %18 = phi [^prebody, i32 %13] [^scalar.final, i32 %88];
    i32 %19 = phi [^prebody, i32 0] [^scalar.final, i32 %89];
    i32 %20 = phi [^prebody, i32 undef] [^scalar.final, i32 %88];
    i1 %21 = icmp sgt i32 %4, i32 %19;
    cbr i1 %21(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    i32* %22 = ptradd [9 * i8]* %2, i32 0;
    atomicadd i32* %22, i32 %15;
    ret;
  ^while.body:
    i32 %24 = phi [^super.header, i32 0] [^while.body, i32 %74];
    i32 %25 = phi [^super.header, i32 %13] [^while.body, i32 %73];
    i32* %26 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %24];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %26)[i64 1];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %26)[i64 2];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %26)[i64 3];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %26)[i64 4];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %26)[i64 5];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %26)[i64 6];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %26)[i64 7];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %26)[i64 8];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %26)[i64 9];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %26)[i64 10];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %26)[i64 11];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %26)[i64 12];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %26)[i64 13];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32* %68 = getelementptr &(i32* %26)[i64 14];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %26)[i64 15];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = add i32 %24, i32 16;
    i1 %75 = icmp sgt i32 %8, i32 %74;
    cbr i1 %75(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %76 = phi [^super.header, i32 0] [^while.body, i32 %74];
    i32 %77 = phi [^super.header, i32 %13] [^while.body, i32 %73];
    i32 %78 = phi [^super.header, i32 undef] [^while.body, i32 %73];
    i32 %79 = phi [^super.header, i32 undef] [^while.body, i32 %74];
    i1 %80 = icmp sgt i32 %5, i32 %76;
    cbr i1 %80(prob = 0.75), ^while.body2, ^scalar.final;
  ^while.body1 {scalar}:
    i32 %81 = phi [^scalar.header, i32 %19] [^while.body1, i32 %86];
    i32 %82 = phi [^scalar.header, i32 %18] [^while.body1, i32 %85];
    i32* %83 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %81];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %82, i32 %84;
    i32 %86 = add i32 %81, i32 1;
    i1 %87 = icmp sgt i32 %4, i32 %86;
    cbr i1 %87(prob = 0.75), ^while.body1, ^b2;
  ^scalar.final:
    i32 %88 = phi [^scalar.header1, i32 %78] [^while.body2, i32 %103];
    i32 %89 = phi [^scalar.header1, i32 %79] [^while.body2, i32 %104];
    ubr ^scalar.header;
  ^while.body2 {scalar}:
    i32 %90 = phi [^scalar.header1, i32 %77] [^while.body2, i32 %103];
    i32 %91 = phi [^scalar.header1, i32 %76] [^while.body2, i32 %104];
    i32* %92 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %90, i32 %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %97, i32 %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    i32 %104 = add i32 %91, i32 4;
    i1 %105 = icmp sgt i32 %5, i32 %104;
    cbr i1 %105(prob = 0.75), ^while.body2, ^scalar.final;
}
internal [9 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_2 to [8 * i8]*;
    i1* %3 = ptradd [8 * i8]* %2, i32 0;
    i1 %4 = load i1* %3;
    i32* %5 = ptradd [8 * i8]* %2, i32 4;
    i32 %6 = load i32* %5;
    i1 %7 = icmp sgt i32 %6, i32 3;
    i32 %8 = add i32 %6, i32 -3;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %15 = phi [^b, i32 %0] [^b2, i32 %24];
    [1024 * i32]* %16 = getelementptr &([1024 * i32]* %14)[i32 %15];
    ubr ^while.header;
  ^while.header:
    i32 %17 = phi [^b1, i32 0] [^while.body, i32 %23] [^b3, i32 %23] [^scalar.header, i32 %23] [^while.body2, i32 %23];
    i1 %18 = icmp sgt i32 %6, i32 %17;
    cbr i1 %18(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %17];
    i32* %20 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %15];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %21, i32 0;
    i32 %23 = add i32 %17, i32 1;
    cbr i1 %22(prob = 0.5), ^while.header, ^b3;
  ^b2:
    i32 %24 = add i32 %15, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.984615), ^b1, ^b4;
  ^b3:
    cbr i1 %4(prob = 0.0153846), ^while.header, ^prebody;
  ^b4:
    ret;
  ^prebody:
    [1024 * i32]* %26 = getelementptr &([1024 * i32]* %10)[i32 %17];
    cbr i1 %7(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body1:
    i32 %27 = phi [^prebody, i32 0] [^while.body1, i32 %48];
    i32* %28 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = mul i32 %21, i32 %29;
    i32* %31 = getelementptr &([1024 * i32]* %26)[i64 0][i32 %27];
    atomicadd i32* %31, i32 %30;
    i32* %33 = getelementptr &(i32* %28)[i64 1];
    i32 %34 = load i32* %33;
    i32 %35 = mul i32 %21, i32 %34;
    i32* %36 = getelementptr &(i32* %31)[i64 1];
    atomicadd i32* %36, i32 %35;
    i32* %38 = getelementptr &(i32* %28)[i64 2];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %21, i32 %39;
    i32* %41 = getelementptr &(i32* %31)[i64 2];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %28)[i64 3];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %21, i32 %44;
    i32* %46 = getelementptr &(i32* %31)[i64 3];
    atomicadd i32* %46, i32 %45;
    i32 %48 = add i32 %27, i32 4;
    i1 %49 = icmp sgt i32 %8, i32 %48;
    cbr i1 %49(prob = 0.941176), ^while.body1, ^scalar.header;
  ^scalar.header:
    i32 %50 = phi [^prebody, i32 0] [^while.body1, i32 %48];
    i1 %51 = icmp sle i32 %6, i32 %50;
    cbr i1 %51(prob = 0.25), ^while.header, ^while.body2;
  ^while.body2 {scalar}:
    i32 %52 = phi [^scalar.header, i32 %50] [^while.body2, i32 %58];
    i32* %53 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %21, i32 %54;
    i32* %56 = getelementptr &([1024 * i32]* %26)[i64 0][i32 %52];
    atomicadd i32* %56, i32 %55;
    i32 %58 = add i32 %52, i32 1;
    i1 %59 = icmp sgt i32 %6, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body2, ^while.header;
}
internal [8 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_3 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 15;
    i1 %7 = icmp sgt i32 %4, i32 3;
    i32 %8 = add i32 %4, i32 -18;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^b, i32 %0] [^scalar.final, i32 %41];
    [1024 * i32]* %12 = getelementptr &([1024 * i32]* %10)[i32 %11];
    cbr i1 %7(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^b1, i32 0] [^scalar.header1, i32 %35] [^while.body2, i32 %48];
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %15 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32* %16 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %16)[i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %16)[i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %16)[i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %16)[i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %16)[i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %16)[i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %16)[i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %16)[i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %16)[i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %16)[i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %16)[i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %16)[i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %16)[i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %16)[i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %16)[i64 15];
    store i32* %31 with i32 0;
    i32 %32 = add i32 %15, i32 16;
    i1 %33 = icmp sgt i32 %8, i32 %32;
    cbr i1 %33(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header1:
    i32 %34 = phi [^super.header, i32 0] [^while.body, i32 %32];
    i32 %35 = phi [^super.header, i32 undef] [^while.body, i32 %32];
    i1 %36 = icmp sgt i32 %5, i32 %34;
    cbr i1 %36(prob = 0.75), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %37 = phi [^scalar.header, i32 %13] [^while.body1, i32 %39];
    i32* %38 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %4, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %41 = add i32 %11, i32 1;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.984615), ^b1, ^b2;
  ^while.body2 {scalar}:
    i32 %43 = phi [^scalar.header1, i32 %34] [^while.body2, i32 %48];
    i32* %44 = getelementptr &([1024 * i32]* %12)[i64 0][i32 %43];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %43, i32 4;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^scalar.header;
  ^b2:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_4 to [8 * i8]*;
    i1* %3 = ptradd [8 * i8]* %2, i32 0;
    i1 %4 = load i1* %3;
    i32* %5 = ptradd [8 * i8]* %2, i32 4;
    i32 %6 = load i32* %5;
    i1 %7 = icmp sgt i32 %6, i32 3;
    i32 %8 = add i32 %6, i32 -3;
    [1024 * [1024 * i32]]* %9 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %9)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %11 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %11)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %15 = phi [^b, i32 %0] [^b2, i32 %24];
    [1024 * i32]* %16 = getelementptr &([1024 * i32]* %14)[i32 %15];
    ubr ^while.header;
  ^while.header:
    i32 %17 = phi [^b1, i32 0] [^while.body, i32 %23] [^b3, i32 %23] [^scalar.header, i32 %23] [^while.body2, i32 %23];
    i1 %18 = icmp sgt i32 %6, i32 %17;
    cbr i1 %18(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [1024 * i32]* %19 = getelementptr &([1024 * i32]* %12)[i32 %17];
    i32* %20 = getelementptr &([1024 * i32]* %19)[i64 0][i32 %15];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %21, i32 0;
    i32 %23 = add i32 %17, i32 1;
    cbr i1 %22(prob = 0.5), ^while.header, ^b3;
  ^b2:
    i32 %24 = add i32 %15, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.984615), ^b1, ^b4;
  ^b3:
    cbr i1 %4(prob = 0.0153846), ^while.header, ^prebody;
  ^b4:
    ret;
  ^prebody:
    [1024 * i32]* %26 = getelementptr &([1024 * i32]* %10)[i32 %17];
    cbr i1 %7(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body1:
    i32 %27 = phi [^prebody, i32 0] [^while.body1, i32 %48];
    i32* %28 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = mul i32 %21, i32 %29;
    i32* %31 = getelementptr &([1024 * i32]* %26)[i64 0][i32 %27];
    atomicadd i32* %31, i32 %30;
    i32* %33 = getelementptr &(i32* %28)[i64 1];
    i32 %34 = load i32* %33;
    i32 %35 = mul i32 %21, i32 %34;
    i32* %36 = getelementptr &(i32* %31)[i64 1];
    atomicadd i32* %36, i32 %35;
    i32* %38 = getelementptr &(i32* %28)[i64 2];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %21, i32 %39;
    i32* %41 = getelementptr &(i32* %31)[i64 2];
    atomicadd i32* %41, i32 %40;
    i32* %43 = getelementptr &(i32* %28)[i64 3];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %21, i32 %44;
    i32* %46 = getelementptr &(i32* %31)[i64 3];
    atomicadd i32* %46, i32 %45;
    i32 %48 = add i32 %27, i32 4;
    i1 %49 = icmp sgt i32 %8, i32 %48;
    cbr i1 %49(prob = 0.941176), ^while.body1, ^scalar.header;
  ^scalar.header:
    i32 %50 = phi [^prebody, i32 0] [^while.body1, i32 %48];
    i1 %51 = icmp sle i32 %6, i32 %50;
    cbr i1 %51(prob = 0.25), ^while.header, ^while.body2;
  ^while.body2 {scalar}:
    i32 %52 = phi [^scalar.header, i32 %50] [^while.body2, i32 %58];
    i32* %53 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %21, i32 %54;
    i32* %56 = getelementptr &([1024 * i32]* %26)[i64 0][i32 %52];
    atomicadd i32* %56, i32 %55;
    i32 %58 = add i32 %52, i32 1;
    i1 %59 = icmp sgt i32 %6, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body2, ^while.header;
}
internal [8 * i8]* @cmmc_parallel_body_payload_4, align 8;
