internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 4;
    [1024 * [1024 * i32]]* %3 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %4 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^b, i32 %10];
    i1 %6 = icmp sgt i32 %0, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %21];
    i1 %8 = icmp sgt i32 %0, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header3, ^b1;
  ^prebody:
    [1024 * i32]* %9 = getelementptr &([1024 * [1024 * i32]]* %3)[i64 0][i32 %5];
    ubr ^while.body;
  ^b:
    i32 %10 = add i32 %5, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %11 = getelementptr &([1024 * [1024 * i32]]* %3)[i64 0][i64 0];
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %13 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* %13)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.header3:
    cbr i1 %1(prob = 0.97), ^prebody1, ^b2;
  ^prebody1:
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %7];
    ubr ^while.body2;
  ^while.body:
    i32 %16 = phi [^prebody, i32 0] [^while.body, i32 %19];
    i32 %17 = call () -> i32 @getint();
    i32* %18 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %16];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %16, i32 1;
    i1 %20 = icmp sgt i32 %0, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.body, ^b;
  ^b2:
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %22 = phi [^b1, i32 0] [^while.body6, i32 %63];
    ubr ^while.header4;
  ^while.body2:
    i32 %23 = phi [^prebody1, i32 0] [^while.body2, i32 %26];
    i32 %24 = call () -> i32 @getint();
    i32* %25 = getelementptr &([1024 * i32]* %15)[i64 0][i32 %23];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %23, i32 1;
    i1 %27 = icmp sgt i32 %0, i32 %26;
    cbr i1 %27(prob = 0.97), ^while.body2, ^b2;
  ^while.header4:
    i32 %28 = phi [^while.body1, i32 0] [^b3, i32 %34];
    i1 %29 = icmp sgt i32 %0, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.header5, ^while.header6;
  ^while.header5:
    cbr i1 %1(prob = 0.97), ^prebody2, ^b3;
  ^while.header6:
    i32 %30 = phi [^while.header4, i32 0] [^b4, i32 %42];
    i1 %31 = icmp sgt i32 %0, i32 %30;
    [1024 * i32]* %32 = getelementptr &([1024 * i32]* %12)[i32 %30];
    cbr i1 %31(prob = 0.97), ^while.header7, ^while.header8;
  ^prebody2:
    [1024 * i32]* %33 = getelementptr &([1024 * i32]* %14)[i32 %28];
    ubr ^super.header;
  ^b3:
    i32 %34 = add i32 %28, i32 1;
    ubr ^while.header4;
  ^while.header7:
    i32 %35 = phi [^while.header6, i32 0] [^if.then, i32 %54] [^b6, i32 %65];
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.97), ^while.body3, ^b4;
  ^while.header8:
    i32 %37 = phi [^while.header6, i32 0] [^b5, i32 %60];
    i1 %38 = icmp sgt i32 %0, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.header9, ^while.header10;
  ^super.header:
    i32 %39 = phi [^prebody2, i32 0] [^while.body4, i32 %40];
    i32 %40 = add i32 %39, i32 4;
    i1 %41 = icmp sgt i32 %0, i32 %40;
    cbr i1 %41(prob = 0.89), ^while.body4, ^while.body5;
  ^b4:
    i32 %42 = add i32 %30, i32 1;
    ubr ^while.header6;
  ^while.body3:
    [1024 * i32]* %43 = getelementptr &([1024 * i32]* %11)[i32 %35];
    i32* %44 = getelementptr &([1024 * i32]* %43)[i64 0][i32 %30];
    i32 %45 = load i32* %44;
    i1 %46 = icmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then, ^while.header11;
  ^while.header9:
    cbr i1 %1(prob = 0.97), ^prebody3, ^b5;
  ^while.header10:
    i32 %47 = phi [^while.header8, i32 0] [^b7, i32 %70];
    i1 %48 = icmp sgt i32 %0, i32 %47;
    [1024 * i32]* %49 = getelementptr &([1024 * i32]* %14)[i32 %47];
    cbr i1 %48(prob = 0.97), ^while.header12, ^while.body6;
  ^while.body4:
    i32* %50 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %39];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %50)[i64 1];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %50)[i64 2];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %50)[i64 3];
    store i32* %53 with i32 0;
    ubr ^super.header;
  ^if.then:
    i32 %54 = add i32 %35, i32 1;
    ubr ^while.header7;
  ^prebody3:
    [1024 * i32]* %55 = getelementptr &([1024 * i32]* %12)[i32 %37];
    ubr ^super.header1;
  ^while.body5:
    i32 %56 = phi [^super.header, i32 %39] [^while.body5, i32 %58];
    i32* %57 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %56];
    store i32* %57 with i32 0;
    i32 %58 = add i32 %56, i32 1;
    i1 %59 = icmp sgt i32 %0, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body5, ^b3;
  ^b5:
    i32 %60 = add i32 %37, i32 1;
    ubr ^while.header8;
  ^while.header11:
    cbr i1 %1(prob = 0.97), ^prebody4, ^b6;
  ^while.header12:
    i32 %61 = phi [^while.header10, i32 0] [^if.then1, i32 %82] [^b9, i32 %124];
    i1 %62 = icmp sgt i32 %0, i32 %61;
    cbr i1 %62(prob = 0.97), ^while.body7, ^b7;
  ^while.body6:
    i32 %63 = add i32 %22, i32 1;
    i1 %64 = icmp slt i32 %63, i32 5;
    cbr i1 %64(prob = 0.8), ^while.body1, ^while.header13;
  ^b6:
    i32 %65 = add i32 %35, i32 1;
    ubr ^while.header7;
  ^prebody4:
    [1024 * i32]* %66 = getelementptr &([1024 * i32]* %14)[i32 %35];
    cbr i1 %2(prob = 0.89), ^while.body9, ^while.body11;
  ^super.header1:
    i32 %67 = phi [^prebody3, i32 0] [^while.body8, i32 %68];
    i32 %68 = add i32 %67, i32 4;
    i1 %69 = icmp sgt i32 %0, i32 %68;
    cbr i1 %69(prob = 0.89), ^while.body8, ^while.body10;
  ^b7:
    i32 %70 = add i32 %47, i32 1;
    ubr ^while.header10;
  ^while.body7:
    [1024 * i32]* %71 = getelementptr &([1024 * i32]* %11)[i32 %61];
    i32* %72 = getelementptr &([1024 * i32]* %71)[i64 0][i32 %47];
    i32 %73 = load i32* %72;
    i1 %74 = icmp eq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then1, ^while.header14;
  ^while.header13:
    i32 %75 = phi [^while.body6, i32 0] [^b10, i32 %127];
    i32 %76 = phi [^while.body6, i32 0] [^b10, i32 %128];
    i1 %77 = icmp sgt i32 %0, i32 %76;
    cbr i1 %77(prob = 0.97), ^while.header15, ^b8;
  ^while.body8:
    i32* %78 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %67];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %78)[i64 1];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %78)[i64 2];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %78)[i64 3];
    store i32* %81 with i32 0;
    ubr ^super.header1;
  ^if.then1:
    i32 %82 = add i32 %61, i32 1;
    ubr ^while.header12;
  ^while.body9:
    i32 %83 = phi [^prebody4, i32 4] [^while.body9, i32 %109];
    i32 %84 = phi [^prebody4, i32 0] [^while.body9, i32 %83];
    i32* %85 = getelementptr &([1024 * i32]* %66)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %84];
    i32 %88 = load i32* %87;
    i32 %89 = mul i32 %45, i32 %88;
    i32 %90 = add i32 %86, i32 %89;
    store i32* %85 with i32 %90;
    i32* %91 = getelementptr &(i32* %85)[i64 1];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %87)[i64 1];
    i32 %94 = load i32* %93;
    i32 %95 = mul i32 %45, i32 %94;
    i32 %96 = add i32 %92, i32 %95;
    store i32* %91 with i32 %96;
    i32* %97 = getelementptr &(i32* %85)[i64 2];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %87)[i64 2];
    i32 %100 = load i32* %99;
    i32 %101 = mul i32 %45, i32 %100;
    i32 %102 = add i32 %98, i32 %101;
    store i32* %97 with i32 %102;
    i32* %103 = getelementptr &(i32* %85)[i64 3];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %87)[i64 3];
    i32 %106 = load i32* %105;
    i32 %107 = mul i32 %45, i32 %106;
    i32 %108 = add i32 %104, i32 %107;
    store i32* %103 with i32 %108;
    i32 %109 = add i32 %83, i32 4;
    i1 %110 = icmp sgt i32 %0, i32 %109;
    cbr i1 %110(prob = 0.89), ^while.body9, ^while.body11;
  ^while.body10:
    i32 %111 = phi [^super.header1, i32 %67] [^while.body10, i32 %113];
    i32* %112 = getelementptr &([1024 * i32]* %55)[i64 0][i32 %111];
    store i32* %112 with i32 0;
    i32 %113 = add i32 %111, i32 1;
    i1 %114 = icmp sgt i32 %0, i32 %113;
    cbr i1 %114(prob = 0.75), ^while.body10, ^b5;
  ^while.body11:
    i32 %115 = phi [^prebody4, i32 0] [^while.body9, i32 %83] [^while.body11, i32 %122];
    i32* %116 = getelementptr &([1024 * i32]* %66)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &([1024 * i32]* %32)[i64 0][i32 %115];
    i32 %119 = load i32* %118;
    i32 %120 = mul i32 %45, i32 %119;
    i32 %121 = add i32 %117, i32 %120;
    store i32* %116 with i32 %121;
    i32 %122 = add i32 %115, i32 1;
    i1 %123 = icmp sgt i32 %0, i32 %122;
    cbr i1 %123(prob = 0.75), ^while.body11, ^b6;
  ^while.header14:
    cbr i1 %1(prob = 0.97), ^prebody6, ^b9;
  ^while.header15:
    cbr i1 %1(prob = 0.97), ^prebody5, ^b10;
  ^b8:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %75);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b9:
    i32 %124 = add i32 %61, i32 1;
    ubr ^while.header12;
  ^prebody5:
    [1024 * i32]* %125 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %76];
    ubr ^super.header2;
  ^prebody6:
    [1024 * i32]* %126 = getelementptr &([1024 * i32]* %12)[i32 %61];
    cbr i1 %2(prob = 0.89), ^while.body12, ^while.body13;
  ^b10:
    i32 %127 = phi [^while.header15, i32 %75] [^while.body15, i32 %186];
    i32 %128 = add i32 %76, i32 1;
    ubr ^while.header13;
  ^while.body12:
    i32 %129 = phi [^prebody6, i32 4] [^while.body12, i32 %155];
    i32 %130 = phi [^prebody6, i32 0] [^while.body12, i32 %129];
    i32* %131 = getelementptr &([1024 * i32]* %126)[i64 0][i32 %130];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &([1024 * i32]* %49)[i64 0][i32 %130];
    i32 %134 = load i32* %133;
    i32 %135 = mul i32 %73, i32 %134;
    i32 %136 = add i32 %132, i32 %135;
    store i32* %131 with i32 %136;
    i32* %137 = getelementptr &(i32* %131)[i64 1];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %133)[i64 1];
    i32 %140 = load i32* %139;
    i32 %141 = mul i32 %73, i32 %140;
    i32 %142 = add i32 %138, i32 %141;
    store i32* %137 with i32 %142;
    i32* %143 = getelementptr &(i32* %131)[i64 2];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %133)[i64 2];
    i32 %146 = load i32* %145;
    i32 %147 = mul i32 %73, i32 %146;
    i32 %148 = add i32 %144, i32 %147;
    store i32* %143 with i32 %148;
    i32* %149 = getelementptr &(i32* %131)[i64 3];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %133)[i64 3];
    i32 %152 = load i32* %151;
    i32 %153 = mul i32 %73, i32 %152;
    i32 %154 = add i32 %150, i32 %153;
    store i32* %149 with i32 %154;
    i32 %155 = add i32 %129, i32 4;
    i1 %156 = icmp sgt i32 %0, i32 %155;
    cbr i1 %156(prob = 0.89), ^while.body12, ^while.body13;
  ^super.header2:
    i32 %157 = phi [^prebody5, i32 0] [^while.body14, i32 %159];
    i32 %158 = phi [^prebody5, i32 %75] [^while.body14, i32 %181];
    i32 %159 = add i32 %157, i32 4;
    i1 %160 = icmp sgt i32 %0, i32 %159;
    cbr i1 %160(prob = 0.89), ^while.body14, ^while.body15;
  ^while.body13:
    i32 %161 = phi [^prebody6, i32 0] [^while.body12, i32 %129] [^while.body13, i32 %168];
    i32* %162 = getelementptr &([1024 * i32]* %126)[i64 0][i32 %161];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &([1024 * i32]* %49)[i64 0][i32 %161];
    i32 %165 = load i32* %164;
    i32 %166 = mul i32 %73, i32 %165;
    i32 %167 = add i32 %163, i32 %166;
    store i32* %162 with i32 %167;
    i32 %168 = add i32 %161, i32 1;
    i1 %169 = icmp sgt i32 %0, i32 %168;
    cbr i1 %169(prob = 0.75), ^while.body13, ^b9;
  ^while.body14:
    i32* %170 = getelementptr &([1024 * i32]* %125)[i64 0][i32 %157];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %170)[i64 1];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %158, i32 %173;
    i32* %175 = getelementptr &(i32* %170)[i64 2];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %170)[i64 3];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %174, i32 %178;
    i32 %180 = add i32 %171, i32 %176;
    i32 %181 = add i32 %179, i32 %180;
    ubr ^super.header2;
  ^while.body15:
    i32 %182 = phi [^super.header2, i32 %157] [^while.body15, i32 %187];
    i32 %183 = phi [^super.header2, i32 %158] [^while.body15, i32 %186];
    i32* %184 = getelementptr &([1024 * i32]* %125)[i64 0][i32 %182];
    i32 %185 = load i32* %184;
    i32 %186 = add i32 %183, i32 %185;
    i32 %187 = add i32 %182, i32 1;
    i1 %188 = icmp sgt i32 %0, i32 %187;
    cbr i1 %188(prob = 0.75), ^while.body15, ^b10;
}
