internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [1024 * i32]* %0 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    i32 %3 = call () -> i32 @getint();
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %14];
    [1024 * i32]* %6 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body2;
^b:
    cbr i1 %4(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %7 = phi [^b, i32 0] [^b3, i32 %22];
    [1024 * i32]* %8 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %7];
    ubr ^while.body3;
^b1:
    call (i32) -> void @starttime(i32 65);
    ubr ^while.body4;
^while.body2:
    i32 %9 = phi [^while.body, i32 0] [^while.body2, i32 %10];
    i32 %10 = add i32 %9, i32 1;
    i1 %11 = scmp lt i32 %10, i32 %3;
    i32* %12 = getelementptr &([1024 * i32]* %6)[i64 0][i32 %9];
    i32 %13 = call () -> i32 @getint();
    store i32* %12 with i32 %13;
    cbr i1 %11(prob = 0.97), ^while.body2, ^b2;
^b2:
    i32 %14 = add i32 %5, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %3;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
^while.body3:
    i32 %16 = phi [^while.body1, i32 0] [^while.body3, i32 %17];
    i32 %17 = add i32 %16, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %3;
    i32* %19 = getelementptr &([1024 * i32]* %8)[i64 0][i32 %16];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    cbr i1 %18(prob = 0.97), ^while.body3, ^b3;
^while.body4:
    i32 %21 = phi [^b1, i32 0] [^while.body13, i32 %70];
    cbr i1 %4(prob = 0.97), ^while.body5, ^b4;
^b3:
    i32 %22 = add i32 %7, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %3;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^while.body5:
    i32 %24 = phi [^while.body4, i32 0] [^b5, i32 %37];
    i32 %25 = phi [^while.body4, i32 %3] [^b5, i32 %36];
    i1 %26 = scmp gt i32 %25, i32 0;
    [1024 * i32]* %27 = getelementptr &([1024 * i32]* %2)[i32 %24];
    cbr i1 %26(prob = 0.97), ^while.body7, ^b5;
^b4:
    i32 %28 = phi [^while.body4, i32 %3] [^b5, i32 %36];
    i1 %29 = scmp gt i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body6, ^while.body8;
^while.body6:
    i32 %30 = phi [^b4, i32 0] [^b7, i32 %61];
    i32 %31 = phi [^b4, i32 %28] [^b7, i32 %59];
    ubr ^while.guard;
^while.body7:
    i32 %32 = phi [^while.body5, i32 0] [^while.body7, i32 %33];
    i32 %33 = add i32 %32, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %3;
    i32* %35 = getelementptr &([1024 * i32]* %27)[i64 0][i32 %32];
    store i32* %35 with i32 0;
    cbr i1 %34(prob = 0.97), ^while.body7, ^b5;
^b5:
    i32 %36 = phi [^while.body5, i32 %25] [^while.body7, i32 %3];
    i32 %37 = add i32 %24, i32 1;
    i1 %38 = scmp lt i32 %37, i32 %36;
    cbr i1 %38(prob = 0.97), ^while.body5, ^b4;
^while.body8:
    cbr i1 %4(prob = 0.97), ^while.body9, ^b6;
^while.guard:
    i32 %39 = phi [^while.body6, i32 0] [^if.then, i32 %72];
    i32 %40 = phi [^while.body6, i32 %31] [^if.then, i32 %50];
    i32 %41 = phi [^while.body6, i32 %30] [^if.then, i32 %51];
    i1 %42 = scmp lt i32 %39, i32 %40;
    cbr i1 %42(prob = 0.97), ^while.body10, ^b7;
^while.body9:
    i32 %43 = phi [^while.body8, i32 0] [^b8, i32 %68];
    i32 %44 = phi [^while.body8, i32 %3] [^b8, i32 %67];
    i1 %45 = scmp gt i32 %44, i32 0;
    [1024 * i32]* %46 = getelementptr &([1024 * i32]* %1)[i32 %43];
    cbr i1 %45(prob = 0.97), ^while.body12, ^b8;
^b6:
    i32 %47 = phi [^while.body8, i32 %3] [^b8, i32 %67];
    i1 %48 = scmp gt i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body11, ^while.body13;
^while.body10:
    i32 %49 = phi [^while.guard, i32 %39] [^b11, i32 %93];
    i32 %50 = phi [^while.guard, i32 %40] [^b11, i32 %91];
    i32 %51 = phi [^while.guard, i32 %41] [^b11, i32 %92];
    [1024 * i32]* %52 = getelementptr &([1024 * i32]* %0)[i32 %49];
    i32* %53 = getelementptr &([1024 * i32]* %52)[i64 0][i32 %51];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 0;
    [1024 * i32]* %56 = getelementptr &([1024 * i32]* %2)[i32 %49];
    cbr i1 %55(prob = 0.5), ^if.then, ^b9;
^while.body11:
    i32 %57 = phi [^b6, i32 0] [^b12, i32 %108];
    i32 %58 = phi [^b6, i32 %47] [^b12, i32 %106];
    ubr ^while.guard1;
^b7:
    i32 %59 = phi [^while.guard, i32 %40] [^b11, i32 %91];
    i32 %60 = phi [^while.guard, i32 %41] [^b11, i32 %92];
    i32 %61 = add i32 %60, i32 1;
    i1 %62 = scmp lt i32 %61, i32 %59;
    cbr i1 %62(prob = 0.97), ^while.body6, ^while.body8;
^while.body12:
    i32 %63 = phi [^while.body9, i32 0] [^while.body12, i32 %64];
    i32 %64 = add i32 %63, i32 1;
    i1 %65 = scmp lt i32 %64, i32 %3;
    i32* %66 = getelementptr &([1024 * i32]* %46)[i64 0][i32 %63];
    store i32* %66 with i32 0;
    cbr i1 %65(prob = 0.97), ^while.body12, ^b8;
^b8:
    i32 %67 = phi [^while.body9, i32 %44] [^while.body12, i32 %3];
    i32 %68 = add i32 %43, i32 1;
    i1 %69 = scmp lt i32 %68, i32 %67;
    cbr i1 %69(prob = 0.97), ^while.body9, ^b6;
^while.body13:
    i32 %70 = add i32 %21, i32 1;
    i1 %71 = scmp lt i32 %70, i32 5;
    cbr i1 %71(prob = 0.8), ^while.body4, ^b10;
^if.then:
    i32 %72 = add i32 %49, i32 1;
    ubr ^while.guard;
^b9:
    i1 %73 = scmp gt i32 %50, i32 0;
    cbr i1 %73(prob = 0.97), ^while.body14, ^b11;
^while.guard1:
    i32 %74 = phi [^while.body11, i32 0] [^if.then1, i32 %111];
    i32 %75 = phi [^while.body11, i32 %58] [^if.then1, i32 %96];
    i32 %76 = phi [^while.body11, i32 %57] [^if.then1, i32 %97];
    i1 %77 = scmp lt i32 %74, i32 %75;
    cbr i1 %77(prob = 0.97), ^while.body15, ^b12;
^b10:
    cbr i1 %4(prob = 0.97), ^while.body16, ^b13;
^while.body14:
    i32 %78 = phi [^b9, i32 0] [^while.body14, i32 %80];
    i32 %79 = phi [^b9, i32 %51] [^while.body14, i32 %30];
    i32 %80 = add i32 %78, i32 1;
    i1 %81 = scmp lt i32 %80, i32 %3;
    i32* %82 = getelementptr &([1024 * i32]* %56)[i64 0][i32 %78];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &([1024 * i32]* %52)[i64 0][i32 %79];
    i32 %85 = load i32* %84;
    [1024 * i32]* %86 = getelementptr &([1024 * i32]* %1)[i32 %79];
    i32* %87 = getelementptr &([1024 * i32]* %86)[i64 0][i32 %78];
    i32 %88 = load i32* %87;
    i32 %89 = mul i32 %85, i32 %88;
    i32 %90 = add i32 %83, i32 %89;
    store i32* %82 with i32 %90;
    cbr i1 %81(prob = 0.97), ^while.body14, ^b11;
^b11:
    i32 %91 = phi [^b9, i32 %50] [^while.body14, i32 %3];
    i32 %92 = phi [^b9, i32 %51] [^while.body14, i32 %30];
    i32 %93 = add i32 %49, i32 1;
    i1 %94 = scmp lt i32 %93, i32 %91;
    cbr i1 %94(prob = 0.97), ^while.body10, ^b7;
^while.body15:
    i32 %95 = phi [^while.guard1, i32 %74] [^b15, i32 %135];
    i32 %96 = phi [^while.guard1, i32 %75] [^b15, i32 %133];
    i32 %97 = phi [^while.guard1, i32 %76] [^b15, i32 %134];
    [1024 * i32]* %98 = getelementptr &([1024 * i32]* %0)[i32 %95];
    i32* %99 = getelementptr &([1024 * i32]* %98)[i64 0][i32 %97];
    i32 %100 = load i32* %99;
    i1 %101 = scmp eq i32 %100, i32 0;
    [1024 * i32]* %102 = getelementptr &([1024 * i32]* %1)[i32 %95];
    cbr i1 %101(prob = 0.5), ^if.then1, ^b14;
^while.body16:
    i32 %103 = phi [^b10, i32 0] [^b16, i32 %137];
    i32 %104 = phi [^b10, i32 0] [^b16, i32 %119];
    [1024 * i32]* %105 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %103];
    ubr ^while.body17;
^b12:
    i32 %106 = phi [^while.guard1, i32 %75] [^b15, i32 %133];
    i32 %107 = phi [^while.guard1, i32 %76] [^b15, i32 %134];
    i32 %108 = add i32 %107, i32 1;
    i1 %109 = scmp lt i32 %108, i32 %106;
    cbr i1 %109(prob = 0.97), ^while.body11, ^while.body13;
^b13:
    i32 %110 = phi [^b10, i32 0] [^b16, i32 %119];
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %110);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then1:
    i32 %111 = add i32 %95, i32 1;
    ubr ^while.guard1;
^b14:
    i1 %112 = scmp gt i32 %96, i32 0;
    cbr i1 %112(prob = 0.97), ^while.body18, ^b15;
^while.body17:
    i32 %113 = phi [^while.body16, i32 %104] [^while.body17, i32 %119];
    i32 %114 = phi [^while.body16, i32 0] [^while.body17, i32 %115];
    i32 %115 = add i32 %114, i32 1;
    i1 %116 = scmp lt i32 %115, i32 %3;
    i32* %117 = getelementptr &([1024 * i32]* %105)[i64 0][i32 %114];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %113, i32 %118;
    cbr i1 %116(prob = 0.97), ^while.body17, ^b16;
^while.body18:
    i32 %120 = phi [^b14, i32 0] [^while.body18, i32 %122];
    i32 %121 = phi [^b14, i32 %97] [^while.body18, i32 %57];
    i32 %122 = add i32 %120, i32 1;
    i1 %123 = scmp lt i32 %122, i32 %3;
    i32* %124 = getelementptr &([1024 * i32]* %102)[i64 0][i32 %120];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &([1024 * i32]* %98)[i64 0][i32 %121];
    i32 %127 = load i32* %126;
    [1024 * i32]* %128 = getelementptr &([1024 * i32]* %2)[i32 %121];
    i32* %129 = getelementptr &([1024 * i32]* %128)[i64 0][i32 %120];
    i32 %130 = load i32* %129;
    i32 %131 = mul i32 %127, i32 %130;
    i32 %132 = add i32 %125, i32 %131;
    store i32* %124 with i32 %132;
    cbr i1 %123(prob = 0.97), ^while.body18, ^b15;
^b15:
    i32 %133 = phi [^b14, i32 %96] [^while.body18, i32 %3];
    i32 %134 = phi [^b14, i32 %97] [^while.body18, i32 %57];
    i32 %135 = add i32 %95, i32 1;
    i1 %136 = scmp lt i32 %135, i32 %133;
    cbr i1 %136(prob = 0.97), ^while.body15, ^b12;
^b16:
    i32 %137 = add i32 %103, i32 1;
    i1 %138 = scmp lt i32 %137, i32 %3;
    cbr i1 %138(prob = 0.97), ^while.body16, ^b13;
}
