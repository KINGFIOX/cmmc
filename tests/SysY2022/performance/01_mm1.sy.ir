internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A { Flexible };
internal [1024 * [1024 * i32]]* @B { Flexible };
internal [1024 * [1024 * i32]]* @C { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 4;
    i32 %3 = add i32 %0, i32 -4;
    [1024 * [1024 * i32]]* %4 = ptrcast [1024 * [1024 * i32]]* @A to [1024 * [1024 * i32]]*;
    [1024 * [1024 * i32]]* %5 = ptrcast [1024 * [1024 * i32]]* @B to [1024 * [1024 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %11];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    i32 %8 = phi [^while.header, i32 0] [^b2, i32 %22];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.97), ^while.header3, ^b1;
  ^prebody:
    [1024 * i32]* %10 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i32 %6];
    ubr ^while.body;
  ^b:
    i32 %11 = add i32 %6, i32 1;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @starttime(i32 65);
    [1024 * i32]* %12 = getelementptr &([1024 * [1024 * i32]]* %4)[i64 0][i64 0];
    [1024 * i32]* %13 = getelementptr &([1024 * [1024 * i32]]* %5)[i64 0][i64 0];
    [1024 * [1024 * i32]]* %14 = ptrcast [1024 * [1024 * i32]]* @C to [1024 * [1024 * i32]]*;
    [1024 * i32]* %15 = getelementptr &([1024 * [1024 * i32]]* %14)[i64 0][i64 0];
    ubr ^while.body1;
  ^while.header3:
    cbr i1 %1(prob = 0.97), ^prebody1, ^b2;
  ^prebody1:
    [1024 * i32]* %16 = getelementptr &([1024 * [1024 * i32]]* %5)[i64 0][i32 %8];
    ubr ^while.body2;
  ^while.body:
    i32 %17 = phi [^prebody, i32 0] [^while.body, i32 %20];
    i32 %18 = call () -> i32 @getint();
    i32* %19 = getelementptr &([1024 * i32]* %10)[i64 0][i32 %17];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %0, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body, ^b;
  ^b2:
    i32 %22 = add i32 %8, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %23 = phi [^b1, i32 0] [^while.body6, i32 %64];
    ubr ^while.header4;
  ^while.body2:
    i32 %24 = phi [^prebody1, i32 0] [^while.body2, i32 %27];
    i32 %25 = call () -> i32 @getint();
    i32* %26 = getelementptr &([1024 * i32]* %16)[i64 0][i32 %24];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %24, i32 1;
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b2;
  ^while.header4:
    i32 %29 = phi [^while.body1, i32 0] [^b3, i32 %34];
    i1 %30 = icmp sgt i32 %0, i32 %29;
    cbr i1 %30(prob = 0.97), ^while.header5, ^while.header6;
  ^while.header5:
    cbr i1 %1(prob = 0.97), ^prebody2, ^b3;
  ^while.header6:
    i32 %31 = phi [^while.header4, i32 0] [^b4, i32 %40];
    i1 %32 = icmp sgt i32 %0, i32 %31;
    [1024 * i32]* %33 = getelementptr &([1024 * i32]* %13)[i32 %31];
    cbr i1 %32(prob = 0.97), ^while.header7, ^while.header8;
  ^b3:
    i32 %34 = add i32 %29, i32 1;
    ubr ^while.header4;
  ^prebody2:
    [1024 * i32]* %35 = getelementptr &([1024 * i32]* %15)[i32 %29];
    cbr i1 %2(prob = 0.89), ^while.body3, ^while.body5;
  ^while.header7:
    i32 %36 = phi [^while.header6, i32 0] [^if.then, i32 %59];
    i1 %37 = icmp sgt i32 %0, i32 %36;
    cbr i1 %37(prob = 0.97), ^while.body4, ^b4;
  ^while.header8:
    i32 %38 = phi [^while.header6, i32 0] [^b5, i32 %60];
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.97), ^while.header9, ^while.header10;
  ^b4:
    i32 %40 = add i32 %31, i32 1;
    ubr ^while.header6;
  ^while.body3:
    i32 %41 = phi [^prebody2, i32 0] [^while.body3, i32 %46];
    i32* %42 = getelementptr &([1024 * i32]* %35)[i64 0][i32 %41];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    i32 %46 = add i32 %41, i32 4;
    i1 %47 = icmp sgt i32 %3, i32 %46;
    cbr i1 %47(prob = 0.89), ^while.body3, ^while.body5;
  ^while.body4:
    [1024 * i32]* %48 = getelementptr &([1024 * i32]* %12)[i32 %36];
    i32* %49 = getelementptr &([1024 * i32]* %48)[i64 0][i32 %31];
    i32 %50 = load i32* %49;
    i1 %51 = icmp eq i32 %50, i32 0;
    cbr i1 %51(prob = 0.5), ^if.then, ^while.header11;
  ^while.body5:
    i32 %52 = phi [^prebody2, i32 0] [^while.body3, i32 %46] [^while.body5, i32 %54];
    i32* %53 = getelementptr &([1024 * i32]* %35)[i64 0][i32 %52];
    store i32* %53 with i32 0;
    i32 %54 = add i32 %52, i32 1;
    i1 %55 = icmp sgt i32 %0, i32 %54;
    cbr i1 %55(prob = 0.75), ^while.body5, ^b3;
  ^while.header9:
    cbr i1 %1(prob = 0.97), ^prebody3, ^b5;
  ^while.header10:
    i32 %56 = phi [^while.header8, i32 0] [^b6, i32 %67];
    i1 %57 = icmp sgt i32 %0, i32 %56;
    [1024 * i32]* %58 = getelementptr &([1024 * i32]* %15)[i32 %56];
    cbr i1 %57(prob = 0.97), ^while.header12, ^while.body6;
  ^if.then:
    i32 %59 = add i32 %36, i32 1;
    ubr ^while.header7;
  ^b5:
    i32 %60 = add i32 %38, i32 1;
    ubr ^while.header8;
  ^while.header11:
    cbr i1 %1(prob = 0.97), ^prebody4, ^if.then;
  ^prebody3:
    [1024 * i32]* %61 = getelementptr &([1024 * i32]* %13)[i32 %38];
    cbr i1 %2(prob = 0.89), ^while.body7, ^while.body9;
  ^while.header12:
    i32 %62 = phi [^while.header10, i32 0] [^if.then1, i32 %86];
    i1 %63 = icmp sgt i32 %0, i32 %62;
    cbr i1 %63(prob = 0.97), ^while.body8, ^b6;
  ^while.body6:
    i32 %64 = add i32 %23, i32 1;
    i1 %65 = icmp slt i32 %64, i32 5;
    cbr i1 %65(prob = 0.8), ^while.body1, ^while.header13;
  ^prebody4:
    [1024 * i32]* %66 = getelementptr &([1024 * i32]* %15)[i32 %36];
    cbr i1 %2(prob = 0.89), ^while.body10, ^while.body11;
  ^b6:
    i32 %67 = add i32 %56, i32 1;
    ubr ^while.header10;
  ^while.body7:
    i32 %68 = phi [^prebody3, i32 0] [^while.body7, i32 %73];
    i32* %69 = getelementptr &([1024 * i32]* %61)[i64 0][i32 %68];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %69)[i64 1];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %69)[i64 2];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %69)[i64 3];
    store i32* %72 with i32 0;
    i32 %73 = add i32 %68, i32 4;
    i1 %74 = icmp sgt i32 %3, i32 %73;
    cbr i1 %74(prob = 0.89), ^while.body7, ^while.body9;
  ^while.body8:
    [1024 * i32]* %75 = getelementptr &([1024 * i32]* %12)[i32 %62];
    i32* %76 = getelementptr &([1024 * i32]* %75)[i64 0][i32 %56];
    i32 %77 = load i32* %76;
    i1 %78 = icmp eq i32 %77, i32 0;
    cbr i1 %78(prob = 0.5), ^if.then1, ^while.header14;
  ^while.body9:
    i32 %79 = phi [^prebody3, i32 0] [^while.body7, i32 %73] [^while.body9, i32 %81];
    i32* %80 = getelementptr &([1024 * i32]* %61)[i64 0][i32 %79];
    store i32* %80 with i32 0;
    i32 %81 = add i32 %79, i32 1;
    i1 %82 = icmp sgt i32 %0, i32 %81;
    cbr i1 %82(prob = 0.75), ^while.body9, ^b5;
  ^while.header13:
    i32 %83 = phi [^while.body6, i32 0] [^b8, i32 %124];
    i32 %84 = phi [^while.body6, i32 0] [^b8, i32 %125];
    i1 %85 = icmp sgt i32 %0, i32 %84;
    cbr i1 %85(prob = 0.97), ^while.header15, ^b7;
  ^if.then1:
    i32 %86 = add i32 %62, i32 1;
    ubr ^while.header12;
  ^while.body10:
    i32 %87 = phi [^prebody4, i32 0] [^while.body10, i32 %112];
    i32* %88 = getelementptr &([1024 * i32]* %66)[i64 0][i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %87];
    i32 %91 = load i32* %90;
    i32 %92 = mul i32 %50, i32 %91;
    i32 %93 = add i32 %89, i32 %92;
    store i32* %88 with i32 %93;
    i32* %94 = getelementptr &(i32* %88)[i64 1];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %90)[i64 1];
    i32 %97 = load i32* %96;
    i32 %98 = mul i32 %50, i32 %97;
    i32 %99 = add i32 %95, i32 %98;
    store i32* %94 with i32 %99;
    i32* %100 = getelementptr &(i32* %88)[i64 2];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %90)[i64 2];
    i32 %103 = load i32* %102;
    i32 %104 = mul i32 %50, i32 %103;
    i32 %105 = add i32 %101, i32 %104;
    store i32* %100 with i32 %105;
    i32* %106 = getelementptr &(i32* %88)[i64 3];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %90)[i64 3];
    i32 %109 = load i32* %108;
    i32 %110 = mul i32 %50, i32 %109;
    i32 %111 = add i32 %107, i32 %110;
    store i32* %106 with i32 %111;
    i32 %112 = add i32 %87, i32 4;
    i1 %113 = icmp sgt i32 %3, i32 %112;
    cbr i1 %113(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body11:
    i32 %114 = phi [^prebody4, i32 0] [^while.body10, i32 %112] [^while.body11, i32 %121];
    i32* %115 = getelementptr &([1024 * i32]* %66)[i64 0][i32 %114];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([1024 * i32]* %33)[i64 0][i32 %114];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %50, i32 %118;
    i32 %120 = add i32 %116, i32 %119;
    store i32* %115 with i32 %120;
    i32 %121 = add i32 %114, i32 1;
    i1 %122 = icmp sgt i32 %0, i32 %121;
    cbr i1 %122(prob = 0.75), ^while.body11, ^if.then;
  ^while.header14:
    cbr i1 %1(prob = 0.97), ^prebody5, ^if.then1;
  ^while.header15:
    cbr i1 %1(prob = 0.97), ^prebody6, ^b8;
  ^b7:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %83);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^prebody5:
    [1024 * i32]* %123 = getelementptr &([1024 * i32]* %13)[i32 %62];
    cbr i1 %2(prob = 0.89), ^while.body12, ^while.body14;
  ^b8:
    i32 %124 = phi [^while.header15, i32 %83] [^while.body15, i32 %183];
    i32 %125 = add i32 %84, i32 1;
    ubr ^while.header13;
  ^prebody6:
    [1024 * i32]* %126 = getelementptr &([1024 * [1024 * i32]]* %5)[i64 0][i32 %84];
    cbr i1 %2(prob = 0.89), ^while.body13, ^while.body15;
  ^while.body12:
    i32 %127 = phi [^prebody5, i32 0] [^while.body12, i32 %152];
    i32* %128 = getelementptr &([1024 * i32]* %123)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &([1024 * i32]* %58)[i64 0][i32 %127];
    i32 %131 = load i32* %130;
    i32 %132 = mul i32 %77, i32 %131;
    i32 %133 = add i32 %129, i32 %132;
    store i32* %128 with i32 %133;
    i32* %134 = getelementptr &(i32* %128)[i64 1];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %130)[i64 1];
    i32 %137 = load i32* %136;
    i32 %138 = mul i32 %77, i32 %137;
    i32 %139 = add i32 %135, i32 %138;
    store i32* %134 with i32 %139;
    i32* %140 = getelementptr &(i32* %128)[i64 2];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %130)[i64 2];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %77, i32 %143;
    i32 %145 = add i32 %141, i32 %144;
    store i32* %140 with i32 %145;
    i32* %146 = getelementptr &(i32* %128)[i64 3];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %130)[i64 3];
    i32 %149 = load i32* %148;
    i32 %150 = mul i32 %77, i32 %149;
    i32 %151 = add i32 %147, i32 %150;
    store i32* %146 with i32 %151;
    i32 %152 = add i32 %127, i32 4;
    i1 %153 = icmp sgt i32 %3, i32 %152;
    cbr i1 %153(prob = 0.89), ^while.body12, ^while.body14;
  ^while.body13:
    i32 %154 = phi [^prebody6, i32 %83] [^while.body13, i32 %167];
    i32 %155 = phi [^prebody6, i32 0] [^while.body13, i32 %168];
    i32* %156 = getelementptr &([1024 * i32]* %126)[i64 0][i32 %155];
    i32 %157 = load i32* %156;
    i32 %158 = add i32 %154, i32 %157;
    i32* %159 = getelementptr &(i32* %156)[i64 1];
    i32 %160 = load i32* %159;
    i32 %161 = add i32 %158, i32 %160;
    i32* %162 = getelementptr &(i32* %156)[i64 2];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %161, i32 %163;
    i32* %165 = getelementptr &(i32* %156)[i64 3];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %164, i32 %166;
    i32 %168 = add i32 %155, i32 4;
    i1 %169 = icmp sgt i32 %3, i32 %168;
    cbr i1 %169(prob = 0.89), ^while.body13, ^while.body15;
  ^while.body14:
    i32 %170 = phi [^prebody5, i32 0] [^while.body12, i32 %152] [^while.body14, i32 %177];
    i32* %171 = getelementptr &([1024 * i32]* %123)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &([1024 * i32]* %58)[i64 0][i32 %170];
    i32 %174 = load i32* %173;
    i32 %175 = mul i32 %77, i32 %174;
    i32 %176 = add i32 %172, i32 %175;
    store i32* %171 with i32 %176;
    i32 %177 = add i32 %170, i32 1;
    i1 %178 = icmp sgt i32 %0, i32 %177;
    cbr i1 %178(prob = 0.75), ^while.body14, ^if.then1;
  ^while.body15:
    i32 %179 = phi [^prebody6, i32 0] [^while.body13, i32 %168] [^while.body15, i32 %184];
    i32 %180 = phi [^prebody6, i32 %83] [^while.body13, i32 %167] [^while.body15, i32 %183];
    i32* %181 = getelementptr &([1024 * i32]* %126)[i64 0][i32 %179];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    i32 %184 = add i32 %179, i32 1;
    i1 %185 = icmp sgt i32 %0, i32 %184;
    cbr i1 %185(prob = 0.75), ^while.body15, ^b8;
}
