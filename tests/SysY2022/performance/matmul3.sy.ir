internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a;
internal [1000 * [1000 * i32]]* @b;
internal [1000 * [1000 * i32]]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^b1, i32 %9] [^entry, i32 0];
    i32 %1 = phi [^b1, i32 %7] [^entry, i32 0];
    i1 %2 = scmp lt i32 %0, i32 1000;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^b:
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header1;
^while.body:
    [1000 * i32]* %3 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %0];
    i32* %4 = getelementptr &([1000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    i32 %6 = load i32* %i;
    i32 %7 = load i32* %sum;
    i1 %8 = scmp neq i32 %5, i32 1000;
    cbr i1 %8(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %9 = add i32 %6, i32 1;
    store i32* %i with i32 %9;
    ubr ^while.header;
^while.header1:
    i32 %10 = phi [^b2, i32 %24] [^b, i32 0];
    i1 %11 = scmp lt i32 %10, i32 1000;
    [1000 * i32]* %12 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %10];
    cbr i1 %11(prob = 0.97), ^while.header2, ^while.header3;
^if.then:
    ret i32 %5;
^while.header2:
    i32 %13 = phi [^while.header1, i32 0] [^while.body1, i32 %23];
    i1 %14 = scmp lt i32 %13, i32 1000;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b2;
^while.header3:
    i32 %15 = phi [^while.header1, i32 0] [^b3, i32 %30];
    i1 %16 = scmp lt i32 %15, i32 1000;
    [1000 * i32]* %17 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %15];
    [1000 * i32]* %18 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %15];
    cbr i1 %16(prob = 0.97), ^while.header4, ^while.header5;
^while.body1:
    i32* %19 = getelementptr &([1000 * i32]* %12)[i64 0][i32 %13];
    [1000 * i32]* %20 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %13];
    i32* %21 = getelementptr &([1000 * i32]* %20)[i64 0][i32 %10];
    i32 %22 = load i32* %21;
    store i32* %19 with i32 %22;
    i32 %23 = add i32 %13, i32 1;
    ubr ^while.header2;
^b2:
    i32 %24 = add i32 %10, i32 1;
    ubr ^while.header1;
^while.header4:
    i32 %25 = phi [^while.header3, i32 0] [^b4, i32 %49];
    i1 %26 = scmp lt i32 %25, i32 1000;
    cbr i1 %26(prob = 0.97), ^while.header6, ^b3;
^while.header5:
    i32 %27 = phi [^while.header3, i32 0] [^b6, i32 %71];
    i1 %28 = scmp lt i32 %27, i32 1000;
    [1000 * i32]* %29 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %27];
    cbr i1 %28(prob = 0.97), ^while.header7, ^while.header8;
^b3:
    i32 %30 = add i32 %15, i32 1;
    ubr ^while.header3;
^while.header6:
    i32 %31 = phi [^while.header4, i32 0] [^while.body2, i32 %47];
    i32 %32 = phi [^while.header4, i32 0] [^while.body2, i32 %46];
    i1 %33 = scmp lt i32 %31, i32 1000;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b4;
^while.header7:
    i32 %34 = phi [^while.header5, i32 0] [^b5, i32 %62];
    i32 %35 = phi [^while.header5, i32 2147483647] [^b5, i32 %61];
    i1 %36 = scmp lt i32 %34, i32 1000;
    cbr i1 %36(prob = 0.97), ^while.body3, ^while.header9;
^while.header8:
    i32 %37 = phi [^while.header5, i32 0] [^b7, i32 %72];
    i1 %38 = scmp lt i32 %37, i32 1000;
    [1000 * i32]* %39 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %37];
    cbr i1 %38(prob = 0.97), ^while.header10, ^while.header11;
^while.body2:
    i32* %40 = getelementptr &([1000 * i32]* %17)[i64 0][i32 %31];
    i32 %41 = load i32* %40;
    [1000 * i32]* %42 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %31];
    i32* %43 = getelementptr &([1000 * i32]* %42)[i64 0][i32 %25];
    i32 %44 = load i32* %43;
    i32 %45 = mul i32 %41, i32 %44;
    i32 %46 = add i32 %32, i32 %45;
    i32 %47 = add i32 %31, i32 1;
    ubr ^while.header6;
^b4:
    i32* %48 = getelementptr &([1000 * i32]* %18)[i64 0][i32 %25];
    store i32* %48 with i32 %32;
    i32 %49 = add i32 %25, i32 1;
    ubr ^while.header4;
^while.body3:
    i32* %50 = getelementptr &([1000 * i32]* %29)[i64 0][i32 %34];
    i32 %51 = load i32* %50;
    i1 %52 = scmp lt i32 %51, i32 %35;
    cbr i1 %52(prob = 0.5), ^if.then1, ^b5;
^while.header9:
    i32 %53 = phi [^while.header7, i32 0] [^while.body4, i32 %64];
    i1 %54 = scmp lt i32 %53, i32 1000;
    cbr i1 %54(prob = 0.97), ^while.body4, ^b6;
^while.header10:
    i32 %55 = phi [^while.header8, i32 0] [^while.body5, i32 %70];
    i1 %56 = scmp lt i32 %55, i32 1000;
    cbr i1 %56(prob = 0.97), ^while.body5, ^b7;
^while.header11:
    i32 %57 = phi [^while.header8, i32 0] [^b9, i32 %80];
    i32 %58 = phi [^while.header8, i32 %1] [^b9, i32 %74];
    i1 %59 = scmp lt i32 %57, i32 1000;
    [1000 * i32]* %60 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %57];
    cbr i1 %59(prob = 0.97), ^while.header12, ^b8;
^if.then1:
    ubr ^b5;
^b5:
    i32 %61 = phi [^if.then1, i32 %51] [^while.body3, i32 %35];
    i32 %62 = add i32 %34, i32 1;
    ubr ^while.header7;
^while.body4:
    i32* %63 = getelementptr &([1000 * i32]* %29)[i64 0][i32 %53];
    store i32* %63 with i32 %35;
    i32 %64 = add i32 %53, i32 1;
    ubr ^while.header9;
^while.body5:
    i32* %65 = getelementptr &([1000 * i32]* %39)[i64 0][i32 %55];
    [1000 * i32]* %66 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %55];
    i32* %67 = getelementptr &([1000 * i32]* %66)[i64 0][i32 %37];
    i32 %68 = load i32* %67;
    i32 %69 = neg i32 %68;
    store i32* %65 with i32 %69;
    i32 %70 = add i32 %55, i32 1;
    ubr ^while.header10;
^b6:
    i32 %71 = add i32 %27, i32 1;
    ubr ^while.header5;
^b7:
    i32 %72 = add i32 %37, i32 1;
    ubr ^while.header8;
^while.header12:
    i32 %73 = phi [^while.header11, i32 0] [^while.body6, i32 %79];
    i32 %74 = phi [^while.header11, i32 %58] [^while.body6, i32 %78];
    i1 %75 = scmp lt i32 %73, i32 1000;
    cbr i1 %75(prob = 0.97), ^while.body6, ^b9;
^b8:
    call (i32) -> void @stoptime(i32 92);
    call (i32) -> void @putint(i32 %58);
    ret i32 0;
^while.body6:
    i32* %76 = getelementptr &([1000 * i32]* %60)[i64 0][i32 %73];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %74, i32 %77;
    i32 %79 = add i32 %73, i32 1;
    ubr ^while.header12;
^b9:
    i32 %80 = add i32 %57, i32 1;
    ubr ^while.header11;
}
