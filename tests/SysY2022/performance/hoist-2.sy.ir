internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -4;
    call (i32) -> void @starttime(i32 121);
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i1 %3 = icmp sgt i32 %0, i32 4;
    cbr i1 %3(prob = 0.89), ^while.body, ^while.body1;
  ^b:
    i32 %4 = phi [^entry, i32 0] [^while.body1, i32 %16];
    call (i32) -> void @stoptime(i32 123);
    call (i32) -> void @putint(i32 %4);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32 %5 = phi [^super.header, i32 0] [^while.body, i32 %10];
    i32 %6 = phi [^super.header, i32 0] [^while.body, i32 %7];
    i32 %7 = add i32 %6, i32 4;
    i1 %8 = icmp sgt i32 %2, i32 %7;
    i32 %9 = add i32 %5, i32 60;
    i32 %10 = srem i32 %9, i32 1500000001;
    cbr i1 %8(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %11 = phi [^super.header, i32 0] [^while.body, i32 %7] [^while.body1, i32 %13];
    i32 %12 = phi [^super.header, i32 0] [^while.body, i32 %10] [^while.body1, i32 %16];
    i32 %13 = add i32 %11, i32 1;
    i1 %14 = icmp sgt i32 %0, i32 %13;
    i32 %15 = add i32 %12, i32 15;
    i32 %16 = srem i32 %15, i32 1500000001;
    cbr i1 %14(prob = 0.75), ^while.body1, ^b;
}
