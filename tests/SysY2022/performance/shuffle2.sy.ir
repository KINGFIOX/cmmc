internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @hashmod;
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal i32* @cnt;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
internal func @hash(i32 %k) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry:
    i32 %0 = load i32* @hashmod;
    i32 %1 = srem i32 %k, i32 %0;
    ret i32 %1;
}
internal func @insert(i32 %k, i32 %v) -> i32 { NoRecurse } {
^entry:
    i32* %p = alloc i32;
    i32* %h = alloc i32;
    i32* %v1 = alloc i32;
    i32* %k1 = alloc i32;
    store i32* %k1 with i32 %k;
    store i32* %v1 with i32 %v;
    i32 %0 = call (i32) -> i32 @hash(i32 %k);
    store i32* %h with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %4 = load i32* @cnt;
    i32 %5 = add i32 %4, i32 1;
    store i32* @cnt with i32 %5;
    i32* %6 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %0];
    store i32* %6 with i32 %5;
    i32* %7 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %5];
    store i32* %7 with i32 %k;
    i32* %8 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %5];
    store i32* %8 with i32 %v;
    i32* %9 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %5];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %5];
    store i32* %10 with i32 0;
    ubr ^b2;
^b:
    i32* %11 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %0];
    i32 %12 = load i32* %11;
    store i32* %p with i32 %12;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %14 = load i32* @cnt;
    i32 %15 = add i32 %14, i32 1;
    store i32* @cnt with i32 %15;
    i32* %16 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %15];
    i32 %17 = load i32* %h;
    i32* %18 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    store i32* %16 with i32 %19;
    store i32* %18 with i32 %15;
    i32* %20 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %15];
    i32 %21 = load i32* %k1;
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %15];
    i32 %23 = load i32* %v1;
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %15];
    store i32* %24 with i32 0;
    ubr ^b2;
^while.body:
    i32 %25 = phi [^b, i32 %12] [^b3, i32 %41];
    i32* %26 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i32 %28 = load i32* %k1;
    i1 %29 = scmp eq i32 %27, i32 %28;
    cbr i1 %29(prob = 0.5), ^if.then1, ^b3;
^b2:
    i32 %30 = phi [^if.then, i32 0] [^b1, i32 0] [^if.then1, i32 1];
    ret i32 %30;
^if.then1:
    i32 %31 = load i32* @cnt;
    i32 %32 = add i32 %31, i32 1;
    store i32* @cnt with i32 %32;
    i32* %33 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %32];
    i32 %34 = load i32* %p;
    i32* %35 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %34];
    i32 %36 = load i32* %35;
    store i32* %33 with i32 %36;
    store i32* %35 with i32 %32;
    i32* %37 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %32];
    i32 %38 = load i32* %v1;
    store i32* %37 with i32 %38;
    ubr ^b2;
^b3:
    i32 %39 = load i32* %p;
    i32* %40 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %39];
    i32 %41 = load i32* %40;
    store i32* %p with i32 %41;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body, ^b1;
}
internal func @reduce(i32 %k) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry:
    i32* %p = alloc i32;
    i32* %k1 = alloc i32;
    store i32* %k1 with i32 %k;
    i32 %0 = call (i32) -> i32 @hash(i32 %k);
    i32* %1 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %0];
    i32 %2 = load i32* %1;
    store i32* %p with i32 %2;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = phi [^entry, i32 %k] [^indirect, i32 %17];
    i32 %5 = phi [^entry, i32 %2] [^indirect, i32 %14];
    i32* %6 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %5];
    i32 %7 = load i32* %6;
    i1 %8 = scmp eq i32 %7, i32 %4;
    cbr i1 %8(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %9 = phi [^entry, i32 0] [^b1, i32 0] [^b2, i32 %16];
    ret i32 %9;
^if.then:
    i32 %10 = load i32* %p;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b2;
^b1:
    i32 %12 = load i32* %p;
    i32* %13 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    store i32* %p with i32 %14;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^indirect, ^b;
^b2:
    i32 %16 = phi [^if.then, i32 0] [^while.body1, i32 %22];
    ubr ^b;
^indirect:
    i32 %17 = load i32* %k1;
    ubr ^while.body;
^while.body1:
    i32 %18 = phi [^if.then, i32 %10] [^while.body1, i32 %24];
    i32 %19 = phi [^if.then, i32 0] [^while.body1, i32 %22];
    i32* %20 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %18];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %18];
    i32 %24 = load i32* %23;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %ms = alloc i32;
    i32* %ks = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* @hashmod with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    store i32* %ms with i32 %6;
    call (i32) -> void @starttime(i32 78);
    store i32* %i with i32 0;
    i32 %7 = load i32* %ks;
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %10 = getelementptr &([10000000 * i32]* @keys)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &([10000000 * i32]* @values)[i64 0][i32 %9];
    i32 %13 = load i32* %12;
    i32 %14 = call (i32, i32) -> i32 @insert(i32 %11, i32 %13);
    i32 %15 = load i32* %i;
    i32 %16 = add i32 %15, i32 1;
    store i32* %i with i32 %16;
    i32 %17 = load i32* %ks;
    i1 %18 = scmp lt i32 %16, i32 %17;
    cbr i1 %18(prob = 0.97), ^while.body, ^indirect;
^b:
    i32 %19 = phi [^entry, i32 %6] [^indirect, i32 %21];
    store i32* %i with i32 0;
    i1 %20 = scmp gt i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^indirect1, ^b1;
^indirect:
    i32 %21 = load i32* %ms;
    ubr ^b;
^indirect1:
    i32 %22 = load i32* %ms;
    ubr ^while.body1;
^b1:
    call (i32) -> void @stoptime(i32 90);
    i32 %23 = load i32* %ms;
    i32* %24 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %23, i32* %24);
    ret i32 0;
^while.body1:
    i32 %25 = phi [^indirect1, i32 0] [^while.body1, i32 %30];
    i32* %26 = getelementptr &([10000000 * i32]* @ans)[i64 0][i32 %25];
    i32* %27 = getelementptr &([10000000 * i32]* @requests)[i64 0][i32 %25];
    i32 %28 = load i32* %27;
    i32 %29 = call (i32) -> i32 @reduce(i32 %28);
    store i32* %26 with i32 %29;
    i32 %30 = add i32 %25, i32 1;
    store i32* %i with i32 %30;
    i1 %31 = scmp lt i32 %30, i32 %22;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b1;
}
