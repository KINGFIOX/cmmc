internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @hashmod;
internal i32* @maxn { ReadOnly } = 10000000;
internal i32* @maxm { ReadOnly } = 10000000;
internal [10000000 * i32]* @bucket;
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal i32* @cnt;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
internal func @hash(i32 %k) -> i32 {
^entry:
    i32* %k1 = alloc i32;
    store i32* %k1 with i32 %k;
    i32 %0 = load i32* %k1;
    i32 %1 = load i32* @hashmod;
    i32 %2 = srem i32 %0, i32 %1;
    ret i32 %2;
}
internal func @insert(i32 %k, i32 %v) -> i32 {
^entry:
    i32* %p = alloc i32;
    i32* %h = alloc i32;
    i32* %v1 = alloc i32;
    i32* %k1 = alloc i32;
    store i32* %k1 with i32 %k;
    store i32* %v1 with i32 %v;
    i32 %0 = load i32* %k1;
    i32 %1 = call (i32) -> i32 @hash(i32 %0);
    store i32* %h with i32 %1;
    i32 %2 = load i32* %h;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 0;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b;
^b:
    i32 %9 = load i32* %h;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %10];
    i32 %12 = load i32* %11;
    store i32* %p with i32 %12;
    ubr ^while.header;
^if.then:
    i32 %13 = load i32* @cnt;
    i32 %14 = add i32 %13, i32 1;
    store i32* @cnt with i32 %14;
    i32 %15 = load i32* %h;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %16];
    i32 %18 = load i32* @cnt;
    store i32* %17 with i32 %18;
    i32 %19 = load i32* @cnt;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([10000000 * i32]* @key)[i64 0][i64 %20];
    i32 %22 = load i32* %k1;
    store i32* %21 with i32 %22;
    i32 %23 = load i32* @cnt;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([10000000 * i32]* @value)[i64 0][i64 %24];
    i32 %26 = load i32* %v1;
    store i32* %25 with i32 %26;
    i32 %27 = load i32* @cnt;
    i64 %28 = sext i32 %27 to i64;
    i32* %29 = getelementptr &([10000000 * i32]* @next)[i64 0][i64 %28];
    store i32* %29 with i32 0;
    i32 %30 = load i32* @cnt;
    i64 %31 = sext i32 %30 to i64;
    i32* %32 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %31];
    store i32* %32 with i32 0;
    ret i32 0;
^while.header:
    i32 %33 = load i32* %p;
    i1 %34 = scmp neq i32 %33, i32 0;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %37 = load i32* %p;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([10000000 * i32]* @key)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    i32 %41 = load i32* %k1;
    i1 %42 = scmp eq i32 %40, i32 %41;
    i32 %43 = zext i1 %42 to i32;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b2;
^b1:
    i32 %45 = load i32* @cnt;
    i32 %46 = add i32 %45, i32 1;
    store i32* @cnt with i32 %46;
    i32 %47 = load i32* @cnt;
    i64 %48 = sext i32 %47 to i64;
    i32* %49 = getelementptr &([10000000 * i32]* @next)[i64 0][i64 %48];
    i32 %50 = load i32* %h;
    i64 %51 = sext i32 %50 to i64;
    i32* %52 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %51];
    i32 %53 = load i32* %52;
    store i32* %49 with i32 %53;
    i32 %54 = load i32* %h;
    i64 %55 = sext i32 %54 to i64;
    i32* %56 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %55];
    i32 %57 = load i32* @cnt;
    store i32* %56 with i32 %57;
    i32 %58 = load i32* @cnt;
    i64 %59 = sext i32 %58 to i64;
    i32* %60 = getelementptr &([10000000 * i32]* @key)[i64 0][i64 %59];
    i32 %61 = load i32* %k1;
    store i32* %60 with i32 %61;
    i32 %62 = load i32* @cnt;
    i64 %63 = sext i32 %62 to i64;
    i32* %64 = getelementptr &([10000000 * i32]* @value)[i64 0][i64 %63];
    i32 %65 = load i32* %v1;
    store i32* %64 with i32 %65;
    i32 %66 = load i32* @cnt;
    i64 %67 = sext i32 %66 to i64;
    i32* %68 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %67];
    store i32* %68 with i32 0;
    ret i32 0;
^b2:
    i32 %69 = load i32* %p;
    i64 %70 = sext i32 %69 to i64;
    i32* %71 = getelementptr &([10000000 * i32]* @next)[i64 0][i64 %70];
    i32 %72 = load i32* %71;
    store i32* %p with i32 %72;
    ubr ^while.header;
^if.then1:
    i32 %73 = load i32* @cnt;
    i32 %74 = add i32 %73, i32 1;
    store i32* @cnt with i32 %74;
    i32 %75 = load i32* @cnt;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %76];
    i32 %78 = load i32* %p;
    i64 %79 = sext i32 %78 to i64;
    i32* %80 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %79];
    i32 %81 = load i32* %80;
    store i32* %77 with i32 %81;
    i32 %82 = load i32* %p;
    i64 %83 = sext i32 %82 to i64;
    i32* %84 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %83];
    i32 %85 = load i32* @cnt;
    store i32* %84 with i32 %85;
    i32 %86 = load i32* @cnt;
    i64 %87 = sext i32 %86 to i64;
    i32* %88 = getelementptr &([10000000 * i32]* @value)[i64 0][i64 %87];
    i32 %89 = load i32* %v1;
    store i32* %88 with i32 %89;
    ret i32 1;
}
internal func @reduce(i32 %k) -> i32 {
^entry:
    i32* %x = alloc i32;
    i32* %ret = alloc i32;
    i32* %p = alloc i32;
    i32* %h = alloc i32;
    i32* %k1 = alloc i32;
    store i32* %k1 with i32 %k;
    i32 %0 = load i32* %k1;
    i32 %1 = call (i32) -> i32 @hash(i32 %0);
    store i32* %h with i32 %1;
    i32 %2 = load i32* %h;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = getelementptr &([10000000 * i32]* @head)[i64 0][i64 %3];
    i32 %5 = load i32* %4;
    store i32* %p with i32 %5;
    ubr ^while.header;
^while.header:
    i32 %6 = load i32* %p;
    i1 %7 = scmp neq i32 %6, i32 0;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %10 = load i32* %p;
    i64 %11 = sext i32 %10 to i64;
    i32* %12 = getelementptr &([10000000 * i32]* @key)[i64 0][i64 %11];
    i32 %13 = load i32* %12;
    i32 %14 = load i32* %k1;
    i1 %15 = scmp eq i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b1;
^b:
    ret i32 0;
^if.then:
    store i32* %ret with i32 0;
    i32 %18 = load i32* %p;
    store i32* %x with i32 %18;
    ubr ^while.header1;
^b1:
    i32 %19 = load i32* %p;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([10000000 * i32]* @next)[i64 0][i64 %20];
    i32 %22 = load i32* %21;
    store i32* %p with i32 %22;
    ubr ^while.header;
^while.header1:
    i32 %23 = load i32* %x;
    i1 %24 = scmp neq i32 %23, i32 0;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %27 = load i32* %ret;
    i32 %28 = load i32* %x;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([10000000 * i32]* @value)[i64 0][i64 %29];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %27, i32 %31;
    store i32* %ret with i32 %32;
    i32 %33 = load i32* %x;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i64 %34];
    i32 %36 = load i32* %35;
    store i32* %x with i32 %36;
    ubr ^while.header1;
^b2:
    i32 %37 = load i32* %ret;
    ret i32 %37;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %ms = alloc i32;
    i32* %vs = alloc i32;
    i32* %ks = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* @hashmod with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    store i32* %vs with i32 %4;
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    store i32* %ms with i32 %6;
    call (i32) -> void @starttime(i32 78);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %7 = load i32* %i;
    i32 %8 = load i32* %ks;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 %17];
    i32 %19 = load i32* %18;
    i32 %20 = call (i32, i32) -> i32 @insert(i32 %15, i32 %19);
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %23 = load i32* %i;
    i32 %24 = load i32* %ms;
    i1 %25 = scmp lt i32 %23, i32 %24;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %28 = load i32* %i;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 %29];
    i32 %31 = load i32* %i;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 %32];
    i32 %34 = load i32* %33;
    i32 %35 = call (i32) -> i32 @reduce(i32 %34);
    store i32* %30 with i32 %35;
    i32 %36 = load i32* %i;
    i32 %37 = add i32 %36, i32 1;
    store i32* %i with i32 %37;
    ubr ^while.header1;
^b1:
    call (i32) -> void @stoptime(i32 90);
    i32 %38 = load i32* %ms;
    i32* %39 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %38, i32* %39);
    ret i32 0;
}
