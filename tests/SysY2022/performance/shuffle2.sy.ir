internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head, align 8 { Flexible };
internal [10000000 * i32]* @next, align 8 { Flexible };
internal [10000000 * i32]* @nextvalue, align 8 { Flexible };
internal [10000000 * i32]* @key, align 8 { Flexible };
internal [10000000 * i32]* @value, align 8 { Flexible };
internal [10000000 * i32]* @keys, align 8;
internal [10000000 * i32]* @values, align 8;
internal [10000000 * i32]* @requests, align 8;
internal [10000000 * i32]* @ans, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [10000000 * i32]* %1 = ptrcast [10000000 * i32]* @keys to [10000000 * i32]*;
    i32* %2 = getelementptr &([10000000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    [10000000 * i32]* %4 = ptrcast [10000000 * i32]* @values to [10000000 * i32]*;
    i32* %5 = getelementptr &([10000000 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    [10000000 * i32]* %7 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %8 = getelementptr &([10000000 * i32]* %7)[i64 0][i64 0];
    i32 %9 = call (i32*) -> i32 @getarray(i32* %8);
    call (i32) -> void @starttime(i32 78);
    [10000000 * i32]* %10 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    [10000000 * i32]* %11 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^b, i32 %26];
    i32 %17 = phi [^entry, i32 0] [^b, i32 %33];
    i32* %18 = getelementptr &([10000000 * i32]* %1)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i32 %20 = srem i32 %19, i32 %0;
    i32* %21 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %20];
    i32* %22 = getelementptr &([10000000 * i32]* %4)[i64 0][i32 %17];
    i32 %23 = load i32* %22;
    i32 %24 = load i32* %21;
    i1 %25 = icmp eq i32 %24, i32 0;
    i32 %26 = add i32 %16, i32 1;
    i32* %27 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %26];
    i32* %28 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %26];
    cbr i1 %25(prob = 0.5), ^if.then, ^while.header;
  ^if.then:
    store i32* %21 with i32 %26;
    i32* %29 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %26];
    store i32* %29 with i32 %19;
    store i32* %27 with i32 %23;
    i32* %30 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %26];
    store i32* %30 with i32 0;
    store i32* %28 with i32 0;
    ubr ^b;
  ^while.header:
    i32 %31 = phi [^while.body, i32 %24] [^b2, i32 %50];
    i1 %32 = icmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.984615), ^while.body1, ^b1;
  ^b:
    i32 %33 = add i32 %17, i32 1;
    i1 %34 = icmp sgt i32 %3, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body, ^while.body2;
  ^b1:
    i32* %35 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %26];
    store i32* %35 with i32 %24;
    store i32* %21 with i32 %26;
    i32* %36 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %26];
    store i32* %36 with i32 %19;
    store i32* %27 with i32 %23;
    store i32* %28 with i32 0;
    ubr ^b;
  ^while.body1:
    i32* %37 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %31];
    i32 %38 = load i32* %37;
    i1 %39 = icmp eq i32 %19, i32 %38;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32* %40 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %31];
    i32 %41 = load i32* %40;
    store i32* %28 with i32 %41;
    store i32* %40 with i32 %26;
    store i32* %27 with i32 %23;
    ubr ^b;
  ^while.body2:
    i32 %42 = phi [^b, i32 0] [^b3, i32 %57];
    i32* %43 = getelementptr &([10000000 * i32]* %7)[i64 0][i32 %42];
    i32 %44 = load i32* %43;
    i32 %45 = srem i32 %44, i32 %0;
    i32* %46 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %45];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &([10000000 * i32]* %10)[i64 0][i32 %42];
    ubr ^while.header1;
  ^b2:
    i32* %49 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %31];
    i32 %50 = load i32* %49;
    ubr ^while.header;
  ^while.header1:
    i32 %51 = phi [^while.body2, i32 %47] [^b4, i32 %60];
    i1 %52 = icmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.984615), ^while.body3, ^b3;
  ^while.body3:
    i32* %53 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %51];
    i32 %54 = load i32* %53;
    i1 %55 = icmp eq i32 %44, i32 %54;
    cbr i1 %55(prob = 0.5), ^while.body4, ^b4;
  ^b3:
    i32 %56 = phi [^while.header1, i32 0] [^while.body4, i32 %65];
    i32 %57 = add i32 %42, i32 1;
    i1 %58 = icmp sgt i32 %9, i32 %57;
    store i32* %48 with i32 %56;
    cbr i1 %58(prob = 0.984615), ^while.body2, ^b5;
  ^b4:
    i32* %59 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %51];
    i32 %60 = load i32* %59;
    ubr ^while.header1;
  ^while.body4:
    i32 %61 = phi [^while.body3, i32 %51] [^while.body4, i32 %67];
    i32 %62 = phi [^while.body3, i32 0] [^while.body4, i32 %65];
    i32* %63 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %61];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    i32* %66 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %61];
    i32 %67 = load i32* %66;
    i1 %68 = icmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.984615), ^while.body4, ^b3;
  ^b5:
    i32* %69 = getelementptr &([10000000 * i32]* %10)[i64 0][i64 0];
    call (i32) -> void @stoptime(i32 90);
    call (i32, i32*) -> void @putarray(i32 %9, i32* %69);
    ret i32 0;
}
