internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head, align 8 { Flexible };
internal [10000000 * i32]* @next, align 8 { Flexible };
internal [10000000 * i32]* @nextvalue, align 8 { Flexible };
internal [10000000 * i32]* @key, align 8 { Flexible };
internal [10000000 * i32]* @value, align 8 { Flexible };
internal [10000000 * i32]* @keys, align 8;
internal [10000000 * i32]* @values, align 8;
internal [10000000 * i32]* @requests, align 8;
internal [10000000 * i32]* @ans, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [10000000 * i32]* %1 = ptrcast [10000000 * i32]* @keys to [10000000 * i32]*;
    i32* %2 = getelementptr &([10000000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %3, i32 0;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @values to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000000 * i32]* %8 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %9 = getelementptr &([10000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    call (i32) -> void @starttime(i32 78);
    [10000000 * i32]* %11 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^while.body2, i32 %26];
    i32 %17 = phi [^entry, i32 0] [^while.body2, i32 %45];
    i32* %18 = getelementptr &([10000000 * i32]* %1)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i32 %20 = srem i32 %19, i32 %0;
    i32* %21 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %20];
    i32* %22 = getelementptr &([10000000 * i32]* %5)[i64 0][i32 %17];
    i32 %23 = load i32* %22;
    i32 %24 = load i32* %21;
    i1 %25 = icmp eq i32 %24, i32 0;
    i32 %26 = add i32 %16, i32 1;
    i32* %27 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %26];
    i32* %28 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %26];
    cbr i1 %25(prob = 0.5), ^if.then, ^while.header1;
  ^while.header:
    i1 %29 = icmp sgt i32 %10, i32 0;
    [10000000 * i32]* %30 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    cbr i1 %29(prob = 0.97), ^while.body1, ^b;
  ^if.then:
    store i32* %21 with i32 %26;
    i32* %31 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %26];
    store i32* %31 with i32 %19;
    store i32* %27 with i32 %23;
    i32* %32 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %26];
    store i32* %32 with i32 0;
    store i32* %28 with i32 0;
    ubr ^while.body2;
  ^while.body1:
    i32 %33 = phi [^while.header, i32 0] [^b3, i32 %60];
    i32* %34 = getelementptr &([10000000 * i32]* %8)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32 %36 = srem i32 %35, i32 %0;
    i32* %37 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10000000 * i32]* %30)[i64 0][i32 %33];
    ubr ^while.header2;
  ^while.header1:
    i32 %40 = phi [^while.body, i32 %24] [^b2, i32 %55];
    i1 %41 = icmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body3, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 90);
    i32* %42 = getelementptr &([10000000 * i32]* %30)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %10, i32* %42);
    ret i32 0;
  ^b1:
    i32* %43 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %26];
    store i32* %43 with i32 %24;
    store i32* %21 with i32 %26;
    i32* %44 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %26];
    store i32* %44 with i32 %19;
    store i32* %27 with i32 %23;
    store i32* %28 with i32 0;
    ubr ^while.body2;
  ^while.body2:
    i32 %45 = add i32 %17, i32 1;
    i1 %46 = icmp sgt i32 %3, i32 %45;
    cbr i1 %46(prob = 0.97), ^while.body, ^while.header;
  ^while.body3:
    i32* %47 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %40];
    i32 %48 = load i32* %47;
    i1 %49 = icmp eq i32 %19, i32 %48;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b2;
  ^while.header2:
    i32 %50 = phi [^while.body1, i32 %38] [^b4, i32 %63];
    i1 %51 = icmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body4, ^b3;
  ^if.then1:
    i32* %52 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %40];
    i32 %53 = load i32* %52;
    store i32* %28 with i32 %53;
    store i32* %52 with i32 %26;
    store i32* %27 with i32 %23;
    ubr ^while.body2;
  ^b2:
    i32* %54 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %40];
    i32 %55 = load i32* %54;
    ubr ^while.header1;
  ^while.body4:
    i32* %56 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %50];
    i32 %57 = load i32* %56;
    i1 %58 = icmp eq i32 %35, i32 %57;
    cbr i1 %58(prob = 0.5), ^while.body5, ^b4;
  ^b3:
    i32 %59 = phi [^while.header2, i32 0] [^while.body5, i32 %68];
    i32 %60 = add i32 %33, i32 1;
    i1 %61 = icmp sgt i32 %10, i32 %60;
    store i32* %39 with i32 %59;
    cbr i1 %61(prob = 0.97), ^while.body1, ^b;
  ^b4:
    i32* %62 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %50];
    i32 %63 = load i32* %62;
    ubr ^while.header2;
  ^while.body5:
    i32 %64 = phi [^while.body4, i32 %50] [^while.body5, i32 %70];
    i32 %65 = phi [^while.body4, i32 0] [^while.body5, i32 %68];
    i32* %66 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %64];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32* %69 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %64];
    i32 %70 = load i32* %69;
    i1 %71 = icmp neq i32 %70, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body5, ^b3;
}
