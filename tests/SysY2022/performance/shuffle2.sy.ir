internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal i32* @hashmod, align 4;
internal [10000000 * i32]* @head, align 8 { Flexible };
internal [10000000 * i32]* @next, align 8 { Flexible };
internal [10000000 * i32]* @nextvalue, align 8 { Flexible };
internal [10000000 * i32]* @key, align 8 { Flexible };
internal [10000000 * i32]* @value, align 8 { Flexible };
internal [10000000 * i32]* @keys, align 8;
internal [10000000 * i32]* @values, align 8;
internal [10000000 * i32]* @requests, align 8;
internal [10000000 * i32]* @ans, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = ptrcast i32* @hashmod to i32*;
    store i32* %1 with i32 %0;
    [10000000 * i32]* %2 = ptrcast [10000000 * i32]* @keys to [10000000 * i32]*;
    i32* %3 = getelementptr &([10000000 * i32]* %2)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @values to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000000 * i32]* %8 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %9 = getelementptr &([10000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    call (i32) -> void @starttime(i32 78);
    [10000000 * i32]* %11 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^b, i32 %27];
    i32 %17 = phi [^entry, i32 0] [^b, i32 %34];
    i32* %18 = getelementptr &([10000000 * i32]* %2)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([10000000 * i32]* %5)[i64 0][i32 %17];
    i32 %21 = load i32* %20;
    i32 %22 = load i32* %1;
    i32 %23 = srem i32 %19, i32 %22;
    i32* %24 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = icmp eq i32 %25, i32 0;
    i32 %27 = add i32 %16, i32 1;
    i32* %28 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %27];
    i32* %29 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %27];
    cbr i1 %26(prob = 0.49), ^if.then, ^while.header;
  ^if.then:
    store i32* %24 with i32 %27;
    i32* %30 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %27];
    store i32* %30 with i32 %19;
    store i32* %28 with i32 %21;
    i32* %31 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %27];
    store i32* %31 with i32 0;
    store i32* %29 with i32 0;
    ubr ^b;
  ^while.header:
    i32 %32 = phi [^while.body, i32 %25] [^b2, i32 %44];
    i1 %33 = icmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.984615), ^while.body1, ^b1;
  ^b:
    i32 %34 = add i32 %17, i32 1;
    i1 %35 = icmp sgt i32 %4, i32 %34;
    cbr i1 %35(prob = 0.984615), ^while.body, ^prebody;
  ^b1:
    i32* %36 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %27];
    store i32* %36 with i32 %25;
    store i32* %24 with i32 %27;
    i32* %37 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %27];
    store i32* %37 with i32 %19;
    store i32* %28 with i32 %21;
    store i32* %29 with i32 0;
    ubr ^b;
  ^while.body1:
    i32* %38 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %32];
    i32 %39 = load i32* %38;
    i1 %40 = icmp eq i32 %19, i32 %39;
    cbr i1 %40(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32* %41 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %32];
    i32 %42 = load i32* %41;
    store i32* %29 with i32 %42;
    store i32* %41 with i32 %27;
    store i32* %28 with i32 %21;
    ubr ^b;
  ^b2:
    i32* %43 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %32];
    i32 %44 = load i32* %43;
    ubr ^while.header;
  ^prebody:
    [4 * i8]* %45 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %46 = ptradd [4 * i8]* %45, i32 0;
    store i32* %46 with i32 %10;
    i8* %47 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %10, i8* %47);
    [10000000 * i32]* %48 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    i32* %49 = getelementptr &([10000000 * i32]* %48)[i64 0][i64 0];
    call (i32) -> void @stoptime(i32 90);
    call (i32, i32*) -> void @putarray(i32 %10, i32* %49);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [10000000 * i32]* %2 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %4 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    [10000000 * i32]* %6 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    [10000000 * i32]* %7 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %8 = ptrcast i32* @hashmod to i32*;
    [10000000 * i32]* %9 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    ubr ^b1;
  ^b1:
    i32 %10 = phi [^b, i32 %0] [^b2, i32 %24];
    i32* %11 = getelementptr &([10000000 * i32]* %7)[i64 0][i32 %10];
    i32 %12 = load i32* %8;
    i32 %13 = load i32* %11;
    i32 %14 = srem i32 %13, i32 %12;
    i32* %15 = getelementptr &([10000000 * i32]* %9)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([10000000 * i32]* %6)[i64 0][i32 %10];
    ubr ^while.header;
  ^while.header:
    i32 %18 = phi [^b1, i32 %16] [^b3, i32 %27];
    i1 %19 = icmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32* %20 = getelementptr &([10000000 * i32]* %3)[i64 0][i32 %18];
    i32 %21 = load i32* %20;
    i1 %22 = icmp eq i32 %13, i32 %21;
    cbr i1 %22(prob = 0.5), ^while.body1, ^b3;
  ^b2:
    i32 %23 = phi [^while.header, i32 0] [^while.body1, i32 %32];
    i32 %24 = add i32 %10, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    store i32* %17 with i32 %23;
    cbr i1 %25(prob = 0.984615), ^b1, ^b4;
  ^b3:
    i32* %26 = getelementptr &([10000000 * i32]* %2)[i64 0][i32 %18];
    i32 %27 = load i32* %26;
    ubr ^while.header;
  ^while.body1:
    i32 %28 = phi [^while.body, i32 %18] [^while.body1, i32 %34];
    i32 %29 = phi [^while.body, i32 0] [^while.body1, i32 %32];
    i32* %30 = getelementptr &([10000000 * i32]* %4)[i64 0][i32 %28];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %29, i32 %31;
    i32* %33 = getelementptr &([10000000 * i32]* %5)[i64 0][i32 %28];
    i32 %34 = load i32* %33;
    i1 %35 = icmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.984615), ^while.body1, ^b2;
  ^b4:
    ret;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
