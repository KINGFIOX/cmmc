internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %hashmod = alloc i32;
    i32* %cnt = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %hashmod with i32 %0;
    i32* %ks = alloc i32;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i32 0][i32 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i32 0][i32 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i32 0][i32 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %ks;
    i32 %8 = load i32* %cnt;
    i32 %9 = load i32* %hashmod;
    call (i32) -> void @starttime(i32 78);
    i1 %10 = scmp lt i32 0, i32 %7;
    cbr i1 %10, [ ^while.body i32 %9, i32 %8, i32 %7, i32 %6, i32 0 ], [ ^b i32 %9, i32 %6 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([10000000 * i32]* @keys)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([10000000 * i32]* @values)[i32 0][i32 %arg4];
    i32 %3 = load i32* %2;
    i32 %4 = srem i32 %1, i32 %arg;
    i32* %5 = getelementptr &([10000000 * i32]* @head)[i32 0][i32 %4];
    i32 %6 = load i32* %5;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7, [ ^indirect i32 %3, i32 %1, i32 %4, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^indirect1 i32 %4, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %1, i32 %3, i32 %4 ];
^b(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body1 i32 %arg, i32 %arg1, i32 0 ], [ ^indirect2 i32 %arg1 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg4, i32 1;
    i32* %1 = getelementptr &([10000000 * i32]* @head)[i32 0][i32 %arg2];
    store i32* %1 with i32 %0;
    i32* %2 = getelementptr &([10000000 * i32]* @key)[i32 0][i32 %0];
    store i32* %2 with i32 %arg1;
    i32* %3 = getelementptr &([10000000 * i32]* @value)[i32 0][i32 %0];
    store i32* %3 with i32 %arg;
    i32* %4 = getelementptr &([10000000 * i32]* @next)[i32 0][i32 %0];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10000000 * i32]* @nextvalue)[i32 0][i32 %0];
    store i32* %5 with i32 0;
    i32 %6 = add i32 %arg7, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %arg5;
    cbr i1 %7, [ ^while.body i32 %arg3, i32 %0, i32 %arg5, i32 %arg6, i32 %6 ], [ ^b i32 %arg3, i32 %arg6 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([10000000 * i32]* @head)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body2 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %1 ], [ ^b1 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10000000 * i32]* @ans)[i32 0][i32 %arg2];
    i32* %1 = getelementptr &([10000000 * i32]* @requests)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    i32 %3 = srem i32 %2, i32 %arg;
    i32* %4 = getelementptr &([10000000 * i32]* @head)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6, [ ^while.body3 i32 %arg2, i32* %0, i32 %arg, i32 %arg1, i32 %2, i32 %5 ], [ ^while.body4 i32 %arg2, i32* %0, i32 %arg, i32 %arg1 ];
^indirect2(i32 %arg):
    call (i32) -> void @stoptime(i32 90);
    i32* %0 = getelementptr &([10000000 * i32]* @ans)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %0);
    ret i32 0;
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([10000000 * i32]* @key)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg5;
    cbr i1 %2, [ ^indirect3 i32 %arg8, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg6 ], [ ^indirect5 i32 %arg8, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^while.body3(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([10000000 * i32]* @key)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg4;
    cbr i1 %2, [ ^indirect4 i32 %arg5, i32* %arg1, i32 %arg, i32 %arg2, i32 %arg3 ], [ ^indirect6 i32 %arg5, i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg1, i32 1;
    i32* %1 = getelementptr &([10000000 * i32]* @next)[i32 0][i32 %0];
    i32* %2 = getelementptr &([10000000 * i32]* @head)[i32 0][i32 %arg7];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    store i32* %2 with i32 %0;
    i32* %4 = getelementptr &([10000000 * i32]* @key)[i32 0][i32 %0];
    store i32* %4 with i32 %arg5;
    i32* %5 = getelementptr &([10000000 * i32]* @value)[i32 0][i32 %0];
    store i32* %5 with i32 %arg6;
    i32* %6 = getelementptr &([10000000 * i32]* @nextvalue)[i32 0][i32 %0];
    store i32* %6 with i32 0;
    i32 %7 = add i32 %arg4, i32 1;
    i1 %8 = scmp lt i32 %7, i32 %arg2;
    cbr i1 %8, [ ^while.body i32 %arg, i32 %0, i32 %arg2, i32 %arg3, i32 %7 ], [ ^b i32 %arg, i32 %arg3 ];
^while.body4(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    store i32* %arg1 with i32 0;
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body1 i32 %arg2, i32 %arg3, i32 %0 ], [ ^indirect2 i32 %arg3 ];
^indirect3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg2, i32 1;
    i32* %1 = getelementptr &([10000000 * i32]* @nextvalue)[i32 0][i32 %0];
    i32* %2 = getelementptr &([10000000 * i32]* @nextvalue)[i32 0][i32 %arg];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    store i32* %2 with i32 %0;
    i32* %4 = getelementptr &([10000000 * i32]* @value)[i32 0][i32 %0];
    store i32* %4 with i32 %arg6;
    i32 %5 = add i32 %arg5, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg3;
    cbr i1 %6, [ ^while.body i32 %arg1, i32 %0, i32 %arg3, i32 %arg4, i32 %5 ], [ ^b i32 %arg1, i32 %arg4 ];
^indirect4(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp neq i32 %arg, i32 0;
    cbr i1 %0, [ ^while.body5 i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0, i32 %arg ], [ ^b2 i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0 ];
^indirect5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([10000000 * i32]* @next)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body2 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %1 ], [ ^b1 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^indirect6(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([10000000 * i32]* @next)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body3 i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %1 ], [ ^while.body4 i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ];
^while.body5(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([10000000 * i32]* @value)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg4, i32 %1;
    i32* %3 = getelementptr &([10000000 * i32]* @nextvalue)[i32 0][i32 %arg5];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5, [ ^while.body5 i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %2, i32 %4 ], [ ^b2 i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %2 ];
^b2(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg with i32 %arg4;
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body1 i32 %arg2, i32 %arg3, i32 %0 ], [ ^indirect2 i32 %arg3 ];
}
