internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head { Flexible };
internal [10000000 * i32]* @next { Flexible };
internal [10000000 * i32]* @nextvalue { Flexible };
internal [10000000 * i32]* @key { Flexible };
internal [10000000 * i32]* @value { Flexible };
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [10000000 * i32]* %1 = ptrcast [10000000 * i32]* @keys to [10000000 * i32]*;
    i32* %2 = getelementptr &([10000000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %3, i32 0;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @values to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000000 * i32]* %8 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %9 = getelementptr &([10000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    call (i32) -> void @starttime(i32 78);
    [10000000 * i32]* %11 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^while.body2, i32 %49];
    i32 %17 = phi [^entry, i32 0] [^while.body2, i32 %50];
    i32* %18 = getelementptr &([10000000 * i32]* %1)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i32 %20 = srem i32 %19, i32 %0;
    i32* %21 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %20];
    i32* %22 = getelementptr &([10000000 * i32]* %5)[i64 0][i32 %17];
    i32 %23 = load i32* %22;
    i32 %24 = load i32* %21;
    i1 %25 = icmp eq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then, ^while.header1;
  ^while.header:
    i1 %26 = icmp sgt i32 %10, i32 0;
    cbr i1 %26(prob = 0.97), ^prebody, ^b;
  ^if.then:
    i32 %27 = add i32 %16, i32 1;
    store i32* %21 with i32 %27;
    i32* %28 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %27];
    store i32* %28 with i32 %19;
    i32* %29 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %27];
    store i32* %29 with i32 %23;
    i32* %30 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %27];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %27];
    store i32* %31 with i32 0;
    ubr ^while.body2;
  ^prebody:
    [10000000 * i32]* %32 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    ubr ^while.body1;
  ^while.header1:
    i32 %33 = phi [^while.body, i32 %24] [^b2, i32 %61];
    i1 %34 = icmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body3, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 90);
    [10000000 * i32]* %35 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    i32* %36 = getelementptr &([10000000 * i32]* %35)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %10, i32* %36);
    ret i32 0;
  ^while.body1:
    i32 %37 = phi [^prebody, i32 0] [^b3, i32 %68];
    i32* %38 = getelementptr &([10000000 * i32]* %8)[i64 0][i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = srem i32 %39, i32 %0;
    i32* %41 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %40];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &([10000000 * i32]* %32)[i64 0][i32 %37];
    ubr ^while.header2;
  ^b1:
    i32 %44 = add i32 %16, i32 1;
    i32* %45 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %44];
    store i32* %45 with i32 %24;
    store i32* %21 with i32 %44;
    i32* %46 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %44];
    store i32* %46 with i32 %19;
    i32* %47 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %44];
    store i32* %47 with i32 %23;
    i32* %48 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %44];
    store i32* %48 with i32 0;
    ubr ^while.body2;
  ^while.body2:
    i32 %49 = phi [^if.then, i32 %27] [^b1, i32 %44] [^if.then1, i32 %55];
    i32 %50 = add i32 %17, i32 1;
    i1 %51 = icmp sgt i32 %3, i32 %50;
    cbr i1 %51(prob = 0.97), ^while.body, ^while.header;
  ^while.body3:
    i32* %52 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %33];
    i32 %53 = load i32* %52;
    i1 %54 = icmp eq i32 %19, i32 %53;
    cbr i1 %54(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32 %55 = add i32 %16, i32 1;
    i32* %56 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %55];
    i32* %57 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %33];
    i32 %58 = load i32* %57;
    store i32* %56 with i32 %58;
    store i32* %57 with i32 %55;
    i32* %59 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %55];
    store i32* %59 with i32 %23;
    ubr ^while.body2;
  ^b2:
    i32* %60 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %33];
    i32 %61 = load i32* %60;
    ubr ^while.header1;
  ^while.header2:
    i32 %62 = phi [^while.body1, i32 %42] [^b4, i32 %71];
    i1 %63 = icmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body4, ^b3;
  ^while.body4:
    i32* %64 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %62];
    i32 %65 = load i32* %64;
    i1 %66 = icmp eq i32 %39, i32 %65;
    cbr i1 %66(prob = 0.5), ^while.body5, ^b4;
  ^b3:
    i32 %67 = phi [^while.header2, i32 0] [^while.body5, i32 %76];
    i32 %68 = add i32 %37, i32 1;
    i1 %69 = icmp sgt i32 %10, i32 %68;
    store i32* %43 with i32 %67;
    cbr i1 %69(prob = 0.97), ^while.body1, ^b;
  ^b4:
    i32* %70 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %62];
    i32 %71 = load i32* %70;
    ubr ^while.header2;
  ^while.body5:
    i32 %72 = phi [^while.body4, i32 %62] [^while.body5, i32 %78];
    i32 %73 = phi [^while.body4, i32 0] [^while.body5, i32 %76];
    i32* %74 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %72];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %72];
    i32 %78 = load i32* %77;
    i1 %79 = icmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.97), ^while.body5, ^b3;
}
