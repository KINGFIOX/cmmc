internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [10000000 * i32]* %1 = ptrcast [10000000 * i32]* @keys to [10000000 * i32]*;
    i32* %2 = getelementptr &([10000000 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = scmp gt i32 %3, i32 0;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @values to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000000 * i32]* %8 = ptrcast [10000000 * i32]* @requests to [10000000 * i32]*;
    i32* %9 = getelementptr &([10000000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    call (i32) -> void @starttime(i32 78);
    [10000000 * i32]* %11 = ptrcast [10000000 * i32]* @ans to [10000000 * i32]*;
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @head to [10000000 * i32]*;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @key to [10000000 * i32]*;
    [10000000 * i32]* %14 = ptrcast [10000000 * i32]* @value to [10000000 * i32]*;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @nextvalue to [10000000 * i32]*;
    [10000000 * i32]* %16 = ptrcast [10000000 * i32]* @next to [10000000 * i32]*;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %17 = phi [^entry, i32 0] [^while.body2, i32 %49];
    i32 %18 = phi [^entry, i32 0] [^while.body2, i32 %50];
    i32* %19 = getelementptr &([10000000 * i32]* %1)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = srem i32 %20, i32 %0;
    i32* %22 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %21];
    i32* %23 = getelementptr &([10000000 * i32]* %5)[i64 0][i32 %18];
    i32 %24 = load i32* %23;
    i32 %25 = load i32* %22;
    i1 %26 = scmp eq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^while.header;
  ^b:
    i1 %27 = scmp gt i32 %10, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b1;
  ^if.then:
    i32 %28 = add i32 %17, i32 1;
    store i32* %22 with i32 %28;
    i32* %29 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %28];
    store i32* %29 with i32 %20;
    i32* %30 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %28];
    store i32* %30 with i32 %24;
    i32* %31 = getelementptr &([10000000 * i32]* %16)[i64 0][i32 %28];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %28];
    store i32* %32 with i32 0;
    ubr ^while.body2;
  ^while.body1:
    i32 %33 = phi [^b, i32 0] [^b4, i32 %68];
    i32* %34 = getelementptr &([10000000 * i32]* %8)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32 %36 = srem i32 %35, i32 %0;
    i32* %37 = getelementptr &([10000000 * i32]* %12)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10000000 * i32]* %11)[i64 0][i32 %33];
    ubr ^while.header1;
  ^while.header:
    i32 %40 = phi [^while.body, i32 %25] [^b3, i32 %63];
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body3, ^b2;
  ^b1:
    call (i32) -> void @stoptime(i32 90);
    i32* %42 = getelementptr &([10000000 * i32]* %11)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %10, i32* %42);
    ret i32 0;
  ^b2:
    i32 %43 = add i32 %17, i32 1;
    i32* %44 = getelementptr &([10000000 * i32]* %16)[i64 0][i32 %43];
    i32 %45 = load i32* %22;
    store i32* %44 with i32 %45;
    store i32* %22 with i32 %43;
    i32* %46 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %43];
    store i32* %46 with i32 %20;
    i32* %47 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %43];
    store i32* %47 with i32 %24;
    i32* %48 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %43];
    store i32* %48 with i32 0;
    ubr ^while.body2;
  ^while.body2:
    i32 %49 = phi [^if.then, i32 %28] [^b2, i32 %43] [^if.then1, i32 %57];
    i32 %50 = add i32 %18, i32 1;
    i1 %51 = scmp gt i32 %3, i32 %50;
    cbr i1 %51(prob = 0.97), ^while.body, ^b;
  ^while.body3:
    i32* %52 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %40];
    i32 %53 = load i32* %52;
    i1 %54 = scmp eq i32 %20, i32 %53;
    cbr i1 %54(prob = 0.5), ^if.then1, ^b3;
  ^while.header1:
    i32 %55 = phi [^while.body1, i32 %38] [^b5, i32 %71];
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body4, ^b4;
  ^if.then1:
    i32 %57 = add i32 %17, i32 1;
    i32* %58 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %57];
    i32* %59 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %40];
    i32 %60 = load i32* %59;
    store i32* %58 with i32 %60;
    store i32* %59 with i32 %57;
    i32* %61 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %57];
    store i32* %61 with i32 %24;
    ubr ^while.body2;
  ^b3:
    i32* %62 = getelementptr &([10000000 * i32]* %16)[i64 0][i32 %40];
    i32 %63 = load i32* %62;
    ubr ^while.header;
  ^while.body4:
    i32* %64 = getelementptr &([10000000 * i32]* %13)[i64 0][i32 %55];
    i32 %65 = load i32* %64;
    i1 %66 = scmp eq i32 %35, i32 %65;
    cbr i1 %66(prob = 0.5), ^if.then2, ^b5;
  ^b4:
    i32 %67 = phi [^while.header1, i32 0] [^b6, i32 %72];
    i32 %68 = add i32 %33, i32 1;
    i1 %69 = scmp gt i32 %10, i32 %68;
    store i32* %39 with i32 %67;
    cbr i1 %69(prob = 0.97), ^while.body1, ^b1;
  ^b5:
    i32* %70 = getelementptr &([10000000 * i32]* %16)[i64 0][i32 %55];
    i32 %71 = load i32* %70;
    ubr ^while.header1;
  ^if.then2:
    cbr i1 %56(prob = 0.97), ^while.body5, ^b6;
  ^b6:
    i32 %72 = phi [^if.then2, i32 0] [^while.body5, i32 %77];
    ubr ^b4;
  ^while.body5:
    i32 %73 = phi [^if.then2, i32 0] [^while.body5, i32 %77];
    i32 %74 = phi [^if.then2, i32 %55] [^while.body5, i32 %79];
    i32* %75 = getelementptr &([10000000 * i32]* %14)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %73, i32 %76;
    i32* %78 = getelementptr &([10000000 * i32]* %15)[i64 0][i32 %74];
    i32 %79 = load i32* %78;
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.97), ^while.body5, ^b6;
}
