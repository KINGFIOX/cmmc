internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfarray(i32, f32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn, align 8;
internal [512 * [270 * f32]]* @imgOut, align 8;
internal [512 * [270 * f32]]* @my_y1, align 8 { Flexible };
internal [512 * [270 * f32]]* @my_y2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * [270 * f32]]* %0 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    f32* %1 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    [24 * i8]* %3 = ptrcast [24 * i8]* @cmmc_parallel_body_payload_1 to [24 * i8]*;
    f32* %4 = ptradd [24 * i8]* %3, i32 0;
    store f32* %4 with f32 -0.189399;
    f32* %5 = ptradd [24 * i8]* %3, i32 4;
    store f32* %5 with f32 0.110615;
    f32* %6 = ptradd [24 * i8]* %3, i32 8;
    store f32* %6 with f32 1;
    f32* %7 = ptradd [24 * i8]* %3, i32 12;
    store f32* %7 with f32 -0.606235;
    i32* %8 = ptradd [24 * i8]* %3, i32 16;
    store i32* %8 with i32 270;
    i32* %9 = ptradd [24 * i8]* %3, i32 20;
    store i32* %9 with i32 512;
    i8* %10 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %10);
    i8* %11 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %11);
    [8 * i8]* %12 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_2 to [8 * i8]*;
    i32* %13 = ptradd [8 * i8]* %12, i32 0;
    store i32* %13 with i32 270;
    i32* %14 = ptradd [8 * i8]* %12, i32 4;
    store i32* %14 with i32 512;
    i8* %15 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %15);
    [24 * i8]* %16 = ptrcast [24 * i8]* @cmmc_parallel_body_payload_0 to [24 * i8]*;
    f32* %17 = ptradd [24 * i8]* %16, i32 0;
    store f32* %17 with f32 -0.189399;
    f32* %18 = ptradd [24 * i8]* %16, i32 4;
    store f32* %18 with f32 0.110615;
    f32* %19 = ptradd [24 * i8]* %16, i32 8;
    store f32* %19 with f32 1;
    f32* %20 = ptradd [24 * i8]* %16, i32 12;
    store f32* %20 with f32 -0.606235;
    i32* %21 = ptradd [24 * i8]* %16, i32 16;
    store i32* %21 with i32 512;
    i32* %22 = ptradd [24 * i8]* %16, i32 20;
    store i32* %22 with i32 270;
    i8* %23 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 270, i8* %23);
    i8* %24 = functionptr () -> void @cmmc_parallel_body_5 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 270, i8* %24);
    [8 * i8]* %25 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_3 to [8 * i8]*;
    i32* %26 = ptradd [8 * i8]* %25, i32 0;
    store i32* %26 with i32 270;
    i32* %27 = ptradd [8 * i8]* %25, i32 4;
    store i32* %27 with i32 512;
    i8* %28 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %28);
    [512 * [270 * f32]]* %29 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    f32* %30 = getelementptr &([512 * [270 * f32]]* %29)[i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 158);
    call (i32, f32*) -> void @putfarray(i32 138240, f32* %30);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [24 * i8]* %2 = ptrcast [24 * i8]* @cmmc_parallel_body_payload_0 to [24 * i8]*;
    f32* %3 = ptradd [24 * i8]* %2, i32 0;
    f32 %4 = load f32* %3;
    f32* %5 = ptradd [24 * i8]* %2, i32 4;
    f32 %6 = load f32* %5;
    f32* %7 = ptradd [24 * i8]* %2, i32 8;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [24 * i8]* %2, i32 12;
    f32 %10 = load f32* %9;
    i32* %11 = ptradd [24 * i8]* %2, i32 16;
    i32 %12 = load i32* %11;
    i1 %13 = icmp sgt i32 %12, i32 3;
    i32 %14 = add i32 %12, i32 -3;
    [512 * [270 * f32]]* %15 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %16 = getelementptr &([512 * [270 * f32]]* %15)[i64 0][i64 0];
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    cbr i1 %13(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %19 = phi [^b, i32 %0] [^b4, i32 %113];
    ubr ^while.body;
  ^cond:
    i1 %20 = icmp sgt i32 %12, i32 0;
    cbr i1 %20(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %21 = phi [^cond, i32 %0] [^b5, i32 %115];
    ubr ^while.body1;
  ^while.body:
    f32 %22 = phi [^b1, f32 0] [^while.body, f32 %59];
    f32 %23 = phi [^b1, f32 0] [^while.body, f32 %71];
    f32 %24 = phi [^b1, f32 0] [^while.body, f32 %65];
    i32 %25 = phi [^b1, i32 0] [^while.body, i32 %74];
    [270 * f32]* %26 = getelementptr &([270 * f32]* %18)[i32 %25];
    f32* %27 = getelementptr &([270 * f32]* %26)[i64 0][i32 %19];
    f32 %28 = load f32* %27;
    f32 %29 = fmul f32 %4, f32 %28;
    f32 %30 = fmul f32 %6, f32 %24;
    f32 %31 = fadd f32 %29, f32 %30;
    f32 %32 = fmul f32 %8, f32 %23;
    f32 %33 = fadd f32 %31, f32 %32;
    f32 %34 = fmul f32 %10, f32 %22;
    f32 %35 = fadd f32 %33, f32 %34;
    [270 * f32]* %36 = getelementptr &([270 * f32]* %16)[i32 %25];
    f32* %37 = getelementptr &([270 * f32]* %36)[i64 0][i32 %19];
    store f32* %37 with f32 %35;
    f32 %38 = fmul f32 %8, f32 %35;
    [270 * f32]* %39 = getelementptr &([270 * f32]* %26)[i64 1];
    f32* %40 = getelementptr &([270 * f32]* %39)[i64 0][i32 %19];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %4, f32 %41;
    f32 %43 = fmul f32 %6, f32 %28;
    f32 %44 = fadd f32 %42, f32 %43;
    f32 %45 = fadd f32 %44, f32 %38;
    f32 %46 = fmul f32 %10, f32 %23;
    f32 %47 = fadd f32 %45, f32 %46;
    [270 * f32]* %48 = getelementptr &([270 * f32]* %36)[i64 1];
    f32* %49 = getelementptr &([270 * f32]* %48)[i64 0][i32 %19];
    store f32* %49 with f32 %47;
    f32 %50 = fmul f32 %8, f32 %47;
    [270 * f32]* %51 = getelementptr &([270 * f32]* %26)[i64 2];
    f32* %52 = getelementptr &([270 * f32]* %51)[i64 0][i32 %19];
    f32 %53 = load f32* %52;
    f32 %54 = fmul f32 %4, f32 %53;
    f32 %55 = fmul f32 %6, f32 %41;
    f32 %56 = fadd f32 %54, f32 %55;
    f32 %57 = fadd f32 %56, f32 %50;
    f32 %58 = fmul f32 %10, f32 %35;
    f32 %59 = fadd f32 %57, f32 %58;
    [270 * f32]* %60 = getelementptr &([270 * f32]* %36)[i64 2];
    f32* %61 = getelementptr &([270 * f32]* %60)[i64 0][i32 %19];
    store f32* %61 with f32 %59;
    f32 %62 = fmul f32 %8, f32 %59;
    [270 * f32]* %63 = getelementptr &([270 * f32]* %26)[i64 3];
    f32* %64 = getelementptr &([270 * f32]* %63)[i64 0][i32 %19];
    f32 %65 = load f32* %64;
    f32 %66 = fmul f32 %4, f32 %65;
    f32 %67 = fmul f32 %6, f32 %53;
    f32 %68 = fadd f32 %66, f32 %67;
    f32 %69 = fadd f32 %68, f32 %62;
    f32 %70 = fmul f32 %10, f32 %47;
    f32 %71 = fadd f32 %69, f32 %70;
    [270 * f32]* %72 = getelementptr &([270 * f32]* %36)[i64 3];
    f32* %73 = getelementptr &([270 * f32]* %72)[i64 0][i32 %19];
    store f32* %73 with f32 %71;
    i32 %74 = add i32 %25, i32 4;
    i1 %75 = icmp sgt i32 %14, i32 %74;
    cbr i1 %75(prob = 0.941176), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %76 = icmp sgt i32 %12, i32 %74;
    cbr i1 %76(prob = 0.75), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %77 = phi [^b2, i32 0] [^while.body1, i32 %93];
    f32 %78 = phi [^b2, f32 0] [^while.body1, f32 %83];
    f32 %79 = phi [^b2, f32 0] [^while.body1, f32 %90];
    f32 %80 = phi [^b2, f32 0] [^while.body1, f32 %79];
    [270 * f32]* %81 = getelementptr &([270 * f32]* %18)[i32 %77];
    f32* %82 = getelementptr &([270 * f32]* %81)[i64 0][i32 %21];
    f32 %83 = load f32* %82;
    f32 %84 = fmul f32 %4, f32 %83;
    f32 %85 = fmul f32 %6, f32 %78;
    f32 %86 = fadd f32 %84, f32 %85;
    f32 %87 = fmul f32 %8, f32 %79;
    f32 %88 = fadd f32 %86, f32 %87;
    f32 %89 = fmul f32 %10, f32 %80;
    f32 %90 = fadd f32 %88, f32 %89;
    [270 * f32]* %91 = getelementptr &([270 * f32]* %16)[i32 %77];
    f32* %92 = getelementptr &([270 * f32]* %91)[i64 0][i32 %21];
    store f32* %92 with f32 %90;
    i32 %93 = add i32 %77, i32 1;
    i1 %94 = icmp sgt i32 %12, i32 %93;
    cbr i1 %94(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %95 = phi [^scalar.header, i32 %74] [^while.body2, i32 %111];
    f32 %96 = phi [^scalar.header, f32 %65] [^while.body2, f32 %101];
    f32 %97 = phi [^scalar.header, f32 %71] [^while.body2, f32 %108];
    f32 %98 = phi [^scalar.header, f32 %59] [^while.body2, f32 %97];
    [270 * f32]* %99 = getelementptr &([270 * f32]* %18)[i32 %95];
    f32* %100 = getelementptr &([270 * f32]* %99)[i64 0][i32 %19];
    f32 %101 = load f32* %100;
    f32 %102 = fmul f32 %4, f32 %101;
    f32 %103 = fmul f32 %6, f32 %96;
    f32 %104 = fadd f32 %102, f32 %103;
    f32 %105 = fmul f32 %8, f32 %97;
    f32 %106 = fadd f32 %104, f32 %105;
    f32 %107 = fmul f32 %10, f32 %98;
    f32 %108 = fadd f32 %106, f32 %107;
    [270 * f32]* %109 = getelementptr &([270 * f32]* %16)[i32 %95];
    f32* %110 = getelementptr &([270 * f32]* %109)[i64 0][i32 %19];
    store f32* %110 with f32 %108;
    i32 %111 = add i32 %95, i32 1;
    i1 %112 = icmp sgt i32 %12, i32 %111;
    cbr i1 %112(prob = 0.75), ^while.body2, ^b4;
  ^b4:
    i32 %113 = add i32 %19, i32 1;
    i1 %114 = icmp sgt i32 %1, i32 %113;
    cbr i1 %114(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %115 = add i32 %21, i32 1;
    i1 %116 = icmp sgt i32 %1, i32 %115;
    cbr i1 %116(prob = 0.984615), ^b2, ^b3;
}
internal [24 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [24 * i8]* %2 = ptrcast [24 * i8]* @cmmc_parallel_body_payload_1 to [24 * i8]*;
    f32* %3 = ptradd [24 * i8]* %2, i32 0;
    f32 %4 = load f32* %3;
    f32* %5 = ptradd [24 * i8]* %2, i32 4;
    f32 %6 = load f32* %5;
    f32* %7 = ptradd [24 * i8]* %2, i32 8;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [24 * i8]* %2, i32 12;
    f32 %10 = load f32* %9;
    i32* %11 = ptradd [24 * i8]* %2, i32 16;
    i32 %12 = load i32* %11;
    i1 %13 = icmp sgt i32 %12, i32 3;
    i32 %14 = add i32 %12, i32 -3;
    [512 * [270 * f32]]* %15 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %16 = getelementptr &([512 * [270 * f32]]* %15)[i64 0][i64 0];
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    cbr i1 %13(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %19 = phi [^b, i32 %0] [^b4, i32 %105];
    [270 * f32]* %20 = getelementptr &([270 * f32]* %16)[i32 %19];
    [270 * f32]* %21 = getelementptr &([270 * f32]* %18)[i32 %19];
    ubr ^while.body;
  ^cond:
    i1 %22 = icmp sgt i32 %12, i32 0;
    cbr i1 %22(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %23 = phi [^cond, i32 %0] [^b5, i32 %107];
    [270 * f32]* %24 = getelementptr &([270 * f32]* %16)[i32 %23];
    [270 * f32]* %25 = getelementptr &([270 * f32]* %18)[i32 %23];
    ubr ^while.body1;
  ^while.body:
    f32 %26 = phi [^b1, f32 0] [^while.body, f32 %58];
    f32 %27 = phi [^b1, f32 0] [^while.body, f32 %68];
    f32 %28 = phi [^b1, f32 0] [^while.body, f32 %62];
    i32 %29 = phi [^b1, i32 0] [^while.body, i32 %70];
    f32* %30 = getelementptr &([270 * f32]* %21)[i64 0][i32 %29];
    f32 %31 = load f32* %30;
    f32 %32 = fmul f32 %4, f32 %31;
    f32 %33 = fmul f32 %6, f32 %28;
    f32 %34 = fadd f32 %32, f32 %33;
    f32 %35 = fmul f32 %8, f32 %27;
    f32 %36 = fadd f32 %34, f32 %35;
    f32 %37 = fmul f32 %10, f32 %26;
    f32 %38 = fadd f32 %36, f32 %37;
    f32* %39 = getelementptr &([270 * f32]* %20)[i64 0][i32 %29];
    store f32* %39 with f32 %38;
    f32 %40 = fmul f32 %8, f32 %38;
    f32* %41 = getelementptr &(f32* %30)[i64 1];
    f32 %42 = load f32* %41;
    f32 %43 = fmul f32 %4, f32 %42;
    f32 %44 = fmul f32 %6, f32 %31;
    f32 %45 = fadd f32 %43, f32 %44;
    f32 %46 = fadd f32 %45, f32 %40;
    f32 %47 = fmul f32 %10, f32 %27;
    f32 %48 = fadd f32 %46, f32 %47;
    f32* %49 = getelementptr &(f32* %39)[i64 1];
    store f32* %49 with f32 %48;
    f32 %50 = fmul f32 %8, f32 %48;
    f32* %51 = getelementptr &(f32* %30)[i64 2];
    f32 %52 = load f32* %51;
    f32 %53 = fmul f32 %4, f32 %52;
    f32 %54 = fmul f32 %6, f32 %42;
    f32 %55 = fadd f32 %53, f32 %54;
    f32 %56 = fadd f32 %55, f32 %50;
    f32 %57 = fmul f32 %10, f32 %38;
    f32 %58 = fadd f32 %56, f32 %57;
    f32* %59 = getelementptr &(f32* %39)[i64 2];
    store f32* %59 with f32 %58;
    f32 %60 = fmul f32 %8, f32 %58;
    f32* %61 = getelementptr &(f32* %30)[i64 3];
    f32 %62 = load f32* %61;
    f32 %63 = fmul f32 %4, f32 %62;
    f32 %64 = fmul f32 %6, f32 %52;
    f32 %65 = fadd f32 %63, f32 %64;
    f32 %66 = fadd f32 %65, f32 %60;
    f32 %67 = fmul f32 %10, f32 %48;
    f32 %68 = fadd f32 %66, f32 %67;
    f32* %69 = getelementptr &(f32* %39)[i64 3];
    store f32* %69 with f32 %68;
    i32 %70 = add i32 %29, i32 4;
    i1 %71 = icmp sgt i32 %14, i32 %70;
    cbr i1 %71(prob = 0.941176), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %72 = icmp sgt i32 %12, i32 %70;
    cbr i1 %72(prob = 0.75), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %73 = phi [^b2, i32 0] [^while.body1, i32 %87];
    f32 %74 = phi [^b2, f32 0] [^while.body1, f32 %78];
    f32 %75 = phi [^b2, f32 0] [^while.body1, f32 %85];
    f32 %76 = phi [^b2, f32 0] [^while.body1, f32 %75];
    f32* %77 = getelementptr &([270 * f32]* %25)[i64 0][i32 %73];
    f32 %78 = load f32* %77;
    f32 %79 = fmul f32 %4, f32 %78;
    f32 %80 = fmul f32 %6, f32 %74;
    f32 %81 = fadd f32 %79, f32 %80;
    f32 %82 = fmul f32 %8, f32 %75;
    f32 %83 = fadd f32 %81, f32 %82;
    f32 %84 = fmul f32 %10, f32 %76;
    f32 %85 = fadd f32 %83, f32 %84;
    f32* %86 = getelementptr &([270 * f32]* %24)[i64 0][i32 %73];
    store f32* %86 with f32 %85;
    i32 %87 = add i32 %73, i32 1;
    i1 %88 = icmp sgt i32 %12, i32 %87;
    cbr i1 %88(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %89 = phi [^scalar.header, i32 %70] [^while.body2, i32 %103];
    f32 %90 = phi [^scalar.header, f32 %62] [^while.body2, f32 %94];
    f32 %91 = phi [^scalar.header, f32 %68] [^while.body2, f32 %101];
    f32 %92 = phi [^scalar.header, f32 %58] [^while.body2, f32 %91];
    f32* %93 = getelementptr &([270 * f32]* %21)[i64 0][i32 %89];
    f32 %94 = load f32* %93;
    f32 %95 = fmul f32 %4, f32 %94;
    f32 %96 = fmul f32 %6, f32 %90;
    f32 %97 = fadd f32 %95, f32 %96;
    f32 %98 = fmul f32 %8, f32 %91;
    f32 %99 = fadd f32 %97, f32 %98;
    f32 %100 = fmul f32 %10, f32 %92;
    f32 %101 = fadd f32 %99, f32 %100;
    f32* %102 = getelementptr &([270 * f32]* %20)[i64 0][i32 %89];
    store f32* %102 with f32 %101;
    i32 %103 = add i32 %89, i32 1;
    i1 %104 = icmp sgt i32 %12, i32 %103;
    cbr i1 %104(prob = 0.75), ^while.body2, ^b4;
  ^b4:
    i32 %105 = add i32 %19, i32 1;
    i1 %106 = icmp sgt i32 %1, i32 %105;
    cbr i1 %106(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %107 = add i32 %23, i32 1;
    i1 %108 = icmp sgt i32 %1, i32 %107;
    cbr i1 %108(prob = 0.984615), ^b2, ^b3;
}
internal [24 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_2 to [8 * i8]*;
    i32* %3 = ptradd [8 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    [512 * [270 * f32]]* %7 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* %7)[i64 0][i64 0];
    [512 * [270 * f32]]* %9 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %10 = getelementptr &([512 * [270 * f32]]* %9)[i64 0][i64 0];
    [512 * [270 * f32]]* %11 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %12 = getelementptr &([512 * [270 * f32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %68];
    [270 * f32]* %14 = getelementptr &([270 * f32]* %8)[i32 %13];
    [270 * f32]* %15 = getelementptr &([270 * f32]* %10)[i32 %13];
    [270 * f32]* %16 = getelementptr &([270 * f32]* %12)[i32 %13];
    ubr ^while.body;
  ^cond:
    i1 %17 = icmp sgt i32 %4, i32 0;
    cbr i1 %17(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %70];
    [270 * f32]* %19 = getelementptr &([270 * f32]* %8)[i32 %18];
    [270 * f32]* %20 = getelementptr &([270 * f32]* %10)[i32 %18];
    [270 * f32]* %21 = getelementptr &([270 * f32]* %12)[i32 %18];
    ubr ^while.body1;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^while.body, i32 %47];
    f32* %23 = getelementptr &([270 * f32]* %15)[i64 0][i32 %22];
    f32 %24 = load f32* %23;
    f32* %25 = getelementptr &([270 * f32]* %16)[i64 0][i32 %22];
    f32 %26 = load f32* %25;
    f32 %27 = fadd f32 %24, f32 %26;
    f32* %28 = getelementptr &([270 * f32]* %14)[i64 0][i32 %22];
    store f32* %28 with f32 %27;
    f32* %29 = getelementptr &(f32* %23)[i64 1];
    f32 %30 = load f32* %29;
    f32* %31 = getelementptr &(f32* %25)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %28)[i64 1];
    store f32* %34 with f32 %33;
    f32* %35 = getelementptr &(f32* %23)[i64 2];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %25)[i64 2];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &(f32* %28)[i64 2];
    store f32* %40 with f32 %39;
    f32* %41 = getelementptr &(f32* %23)[i64 3];
    f32 %42 = load f32* %41;
    f32* %43 = getelementptr &(f32* %25)[i64 3];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %28)[i64 3];
    store f32* %46 with f32 %45;
    i32 %47 = add i32 %22, i32 4;
    i1 %48 = icmp sgt i32 %6, i32 %47;
    cbr i1 %48(prob = 0.941176), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %49 = icmp sgt i32 %4, i32 %47;
    cbr i1 %49(prob = 0.75), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %50 = phi [^b2, i32 0] [^while.body1, i32 %57];
    f32* %51 = getelementptr &([270 * f32]* %20)[i64 0][i32 %50];
    f32 %52 = load f32* %51;
    f32* %53 = getelementptr &([270 * f32]* %21)[i64 0][i32 %50];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &([270 * f32]* %19)[i64 0][i32 %50];
    store f32* %56 with f32 %55;
    i32 %57 = add i32 %50, i32 1;
    i1 %58 = icmp sgt i32 %4, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %59 = phi [^scalar.header, i32 %47] [^while.body2, i32 %66];
    f32* %60 = getelementptr &([270 * f32]* %15)[i64 0][i32 %59];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &([270 * f32]* %16)[i64 0][i32 %59];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32* %65 = getelementptr &([270 * f32]* %14)[i64 0][i32 %59];
    store f32* %65 with f32 %64;
    i32 %66 = add i32 %59, i32 1;
    i1 %67 = icmp sgt i32 %4, i32 %66;
    cbr i1 %67(prob = 0.75), ^while.body2, ^b4;
  ^b4:
    i32 %68 = add i32 %13, i32 1;
    i1 %69 = icmp sgt i32 %1, i32 %68;
    cbr i1 %69(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %70 = add i32 %18, i32 1;
    i1 %71 = icmp sgt i32 %1, i32 %70;
    cbr i1 %71(prob = 0.984615), ^b2, ^b3;
}
internal [8 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [8 * i8]* %2 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_3 to [8 * i8]*;
    i32* %3 = ptradd [8 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    [512 * [270 * f32]]* %7 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* %7)[i64 0][i64 0];
    [512 * [270 * f32]]* %9 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %10 = getelementptr &([512 * [270 * f32]]* %9)[i64 0][i64 0];
    [512 * [270 * f32]]* %11 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %12 = getelementptr &([512 * [270 * f32]]* %11)[i64 0][i64 0];
    cbr i1 %5(prob = 0.5), ^b1, ^cond;
  ^b1:
    i32 %13 = phi [^b, i32 %0] [^b4, i32 %68];
    [270 * f32]* %14 = getelementptr &([270 * f32]* %8)[i32 %13];
    [270 * f32]* %15 = getelementptr &([270 * f32]* %10)[i32 %13];
    [270 * f32]* %16 = getelementptr &([270 * f32]* %12)[i32 %13];
    ubr ^while.body;
  ^cond:
    i1 %17 = icmp sgt i32 %4, i32 0;
    cbr i1 %17(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %18 = phi [^cond, i32 %0] [^b5, i32 %70];
    [270 * f32]* %19 = getelementptr &([270 * f32]* %8)[i32 %18];
    [270 * f32]* %20 = getelementptr &([270 * f32]* %10)[i32 %18];
    [270 * f32]* %21 = getelementptr &([270 * f32]* %12)[i32 %18];
    ubr ^while.body1;
  ^while.body:
    i32 %22 = phi [^b1, i32 0] [^while.body, i32 %47];
    f32* %23 = getelementptr &([270 * f32]* %15)[i64 0][i32 %22];
    f32 %24 = load f32* %23;
    f32* %25 = getelementptr &([270 * f32]* %16)[i64 0][i32 %22];
    f32 %26 = load f32* %25;
    f32 %27 = fadd f32 %24, f32 %26;
    f32* %28 = getelementptr &([270 * f32]* %14)[i64 0][i32 %22];
    store f32* %28 with f32 %27;
    f32* %29 = getelementptr &(f32* %23)[i64 1];
    f32 %30 = load f32* %29;
    f32* %31 = getelementptr &(f32* %25)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %28)[i64 1];
    store f32* %34 with f32 %33;
    f32* %35 = getelementptr &(f32* %23)[i64 2];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %25)[i64 2];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &(f32* %28)[i64 2];
    store f32* %40 with f32 %39;
    f32* %41 = getelementptr &(f32* %23)[i64 3];
    f32 %42 = load f32* %41;
    f32* %43 = getelementptr &(f32* %25)[i64 3];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %28)[i64 3];
    store f32* %46 with f32 %45;
    i32 %47 = add i32 %22, i32 4;
    i1 %48 = icmp sgt i32 %6, i32 %47;
    cbr i1 %48(prob = 0.941176), ^while.body, ^scalar.header;
  ^b3:
    ret;
  ^scalar.header:
    i1 %49 = icmp sgt i32 %4, i32 %47;
    cbr i1 %49(prob = 0.75), ^while.body2, ^b4;
  ^while.body1 {scalar}:
    i32 %50 = phi [^b2, i32 0] [^while.body1, i32 %57];
    f32* %51 = getelementptr &([270 * f32]* %20)[i64 0][i32 %50];
    f32 %52 = load f32* %51;
    f32* %53 = getelementptr &([270 * f32]* %21)[i64 0][i32 %50];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &([270 * f32]* %19)[i64 0][i32 %50];
    store f32* %56 with f32 %55;
    i32 %57 = add i32 %50, i32 1;
    i1 %58 = icmp sgt i32 %4, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body1, ^b5;
  ^while.body2 {scalar}:
    i32 %59 = phi [^scalar.header, i32 %47] [^while.body2, i32 %66];
    f32* %60 = getelementptr &([270 * f32]* %15)[i64 0][i32 %59];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &([270 * f32]* %16)[i64 0][i32 %59];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32* %65 = getelementptr &([270 * f32]* %14)[i64 0][i32 %59];
    store f32* %65 with f32 %64;
    i32 %66 = add i32 %59, i32 1;
    i1 %67 = icmp sgt i32 %4, i32 %66;
    cbr i1 %67(prob = 0.75), ^while.body2, ^b4;
  ^b4:
    i32 %68 = add i32 %13, i32 1;
    i1 %69 = icmp sgt i32 %1, i32 %68;
    cbr i1 %69(prob = 0.984615), ^b1, ^b3;
  ^b5:
    i32 %70 = add i32 %18, i32 1;
    i1 %71 = icmp sgt i32 %1, i32 %70;
    cbr i1 %71(prob = 0.984615), ^b2, ^b3;
}
internal [8 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [512 * [270 * f32]]* %2 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %3 = getelementptr &([512 * [270 * f32]]* %2)[i64 0][i64 0];
    [512 * [270 * f32]]* %4 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %6 = phi [^b, i32 %0] [^while.body1, i32 %284];
    [270 * f32]* %7 = getelementptr &([270 * f32]* %3)[i32 %6];
    [270 * f32]* %8 = getelementptr &([270 * f32]* %5)[i32 %6];
    ubr ^while.body;
  ^while.body:
    i32 %9 = phi [^b1, i32 269] [^while.body, i32 %158];
    f32 %10 = phi [^b1, f32 0] [^while.body, f32 %157];
    f32 %11 = phi [^b1, f32 0] [^while.body, f32 %148];
    f32 %12 = phi [^b1, f32 0] [^while.body, f32 %154];
    f32 %13 = phi [^b1, f32 0] [^while.body, f32 %145];
    f32 %14 = fmul f32 %10, f32 -0.184358;
    f32 %15 = fmul f32 %11, f32 0.114821;
    f32 %16 = fadd f32 %14, f32 %15;
    f32 %17 = fadd f32 %16, f32 %12;
    f32 %18 = fmul f32 %13, f32 -0.606235;
    f32 %19 = fadd f32 %17, f32 %18;
    f32* %20 = getelementptr &([270 * f32]* %7)[i64 0][i32 %9];
    store f32* %20 with f32 %19;
    f32* %21 = getelementptr &([270 * f32]* %8)[i64 0][i32 %9];
    f32 %22 = load f32* %21;
    f32 %23 = fmul f32 %22, f32 -0.184358;
    f32 %24 = fmul f32 %10, f32 0.114821;
    f32 %25 = fadd f32 %23, f32 %24;
    f32 %26 = fadd f32 %25, f32 %19;
    f32 %27 = fmul f32 %12, f32 -0.606235;
    f32 %28 = fadd f32 %26, f32 %27;
    f32* %29 = getelementptr &(f32* %20)[i64 -1];
    store f32* %29 with f32 %28;
    f32* %30 = getelementptr &(f32* %21)[i64 -1];
    f32 %31 = load f32* %30;
    f32 %32 = fmul f32 %31, f32 -0.184358;
    f32 %33 = fmul f32 %22, f32 0.114821;
    f32 %34 = fadd f32 %32, f32 %33;
    f32 %35 = fadd f32 %34, f32 %28;
    f32 %36 = fmul f32 %19, f32 -0.606235;
    f32 %37 = fadd f32 %35, f32 %36;
    f32* %38 = getelementptr &(f32* %20)[i64 -2];
    store f32* %38 with f32 %37;
    f32* %39 = getelementptr &(f32* %21)[i64 -2];
    f32 %40 = load f32* %39;
    f32 %41 = fmul f32 %40, f32 -0.184358;
    f32 %42 = fmul f32 %31, f32 0.114821;
    f32 %43 = fadd f32 %41, f32 %42;
    f32 %44 = fadd f32 %43, f32 %37;
    f32 %45 = fmul f32 %28, f32 -0.606235;
    f32 %46 = fadd f32 %44, f32 %45;
    f32* %47 = getelementptr &(f32* %20)[i64 -3];
    store f32* %47 with f32 %46;
    f32* %48 = getelementptr &(f32* %21)[i64 -3];
    f32 %49 = load f32* %48;
    f32 %50 = fmul f32 %49, f32 -0.184358;
    f32 %51 = fmul f32 %40, f32 0.114821;
    f32 %52 = fadd f32 %50, f32 %51;
    f32 %53 = fadd f32 %52, f32 %46;
    f32 %54 = fmul f32 %37, f32 -0.606235;
    f32 %55 = fadd f32 %53, f32 %54;
    f32* %56 = getelementptr &(f32* %20)[i64 -4];
    store f32* %56 with f32 %55;
    f32* %57 = getelementptr &(f32* %21)[i64 -4];
    f32 %58 = load f32* %57;
    f32 %59 = fmul f32 %58, f32 -0.184358;
    f32 %60 = fmul f32 %49, f32 0.114821;
    f32 %61 = fadd f32 %59, f32 %60;
    f32 %62 = fadd f32 %61, f32 %55;
    f32 %63 = fmul f32 %46, f32 -0.606235;
    f32 %64 = fadd f32 %62, f32 %63;
    f32* %65 = getelementptr &(f32* %20)[i64 -5];
    store f32* %65 with f32 %64;
    f32* %66 = getelementptr &(f32* %21)[i64 -5];
    f32 %67 = load f32* %66;
    f32 %68 = fmul f32 %67, f32 -0.184358;
    f32 %69 = fmul f32 %58, f32 0.114821;
    f32 %70 = fadd f32 %68, f32 %69;
    f32 %71 = fadd f32 %70, f32 %64;
    f32 %72 = fmul f32 %55, f32 -0.606235;
    f32 %73 = fadd f32 %71, f32 %72;
    f32* %74 = getelementptr &(f32* %20)[i64 -6];
    store f32* %74 with f32 %73;
    f32* %75 = getelementptr &(f32* %21)[i64 -6];
    f32 %76 = load f32* %75;
    f32 %77 = fmul f32 %76, f32 -0.184358;
    f32 %78 = fmul f32 %67, f32 0.114821;
    f32 %79 = fadd f32 %77, f32 %78;
    f32 %80 = fadd f32 %79, f32 %73;
    f32 %81 = fmul f32 %64, f32 -0.606235;
    f32 %82 = fadd f32 %80, f32 %81;
    f32* %83 = getelementptr &(f32* %20)[i64 -7];
    store f32* %83 with f32 %82;
    f32* %84 = getelementptr &(f32* %21)[i64 -7];
    f32 %85 = load f32* %84;
    f32 %86 = fmul f32 %85, f32 -0.184358;
    f32 %87 = fmul f32 %76, f32 0.114821;
    f32 %88 = fadd f32 %86, f32 %87;
    f32 %89 = fadd f32 %88, f32 %82;
    f32 %90 = fmul f32 %73, f32 -0.606235;
    f32 %91 = fadd f32 %89, f32 %90;
    f32* %92 = getelementptr &(f32* %20)[i64 -8];
    store f32* %92 with f32 %91;
    f32* %93 = getelementptr &(f32* %21)[i64 -8];
    f32 %94 = load f32* %93;
    f32 %95 = fmul f32 %94, f32 -0.184358;
    f32 %96 = fmul f32 %85, f32 0.114821;
    f32 %97 = fadd f32 %95, f32 %96;
    f32 %98 = fadd f32 %97, f32 %91;
    f32 %99 = fmul f32 %82, f32 -0.606235;
    f32 %100 = fadd f32 %98, f32 %99;
    f32* %101 = getelementptr &(f32* %20)[i64 -9];
    store f32* %101 with f32 %100;
    f32* %102 = getelementptr &(f32* %21)[i64 -9];
    f32 %103 = load f32* %102;
    f32 %104 = fmul f32 %103, f32 -0.184358;
    f32 %105 = fmul f32 %94, f32 0.114821;
    f32 %106 = fadd f32 %104, f32 %105;
    f32 %107 = fadd f32 %106, f32 %100;
    f32 %108 = fmul f32 %91, f32 -0.606235;
    f32 %109 = fadd f32 %107, f32 %108;
    f32* %110 = getelementptr &(f32* %20)[i64 -10];
    store f32* %110 with f32 %109;
    f32* %111 = getelementptr &(f32* %21)[i64 -10];
    f32 %112 = load f32* %111;
    f32 %113 = fmul f32 %112, f32 -0.184358;
    f32 %114 = fmul f32 %103, f32 0.114821;
    f32 %115 = fadd f32 %113, f32 %114;
    f32 %116 = fadd f32 %115, f32 %109;
    f32 %117 = fmul f32 %100, f32 -0.606235;
    f32 %118 = fadd f32 %116, f32 %117;
    f32* %119 = getelementptr &(f32* %20)[i64 -11];
    store f32* %119 with f32 %118;
    f32* %120 = getelementptr &(f32* %21)[i64 -11];
    f32 %121 = load f32* %120;
    f32 %122 = fmul f32 %121, f32 -0.184358;
    f32 %123 = fmul f32 %112, f32 0.114821;
    f32 %124 = fadd f32 %122, f32 %123;
    f32 %125 = fadd f32 %124, f32 %118;
    f32 %126 = fmul f32 %109, f32 -0.606235;
    f32 %127 = fadd f32 %125, f32 %126;
    f32* %128 = getelementptr &(f32* %20)[i64 -12];
    store f32* %128 with f32 %127;
    f32* %129 = getelementptr &(f32* %21)[i64 -12];
    f32 %130 = load f32* %129;
    f32 %131 = fmul f32 %130, f32 -0.184358;
    f32 %132 = fmul f32 %121, f32 0.114821;
    f32 %133 = fadd f32 %131, f32 %132;
    f32 %134 = fadd f32 %133, f32 %127;
    f32 %135 = fmul f32 %118, f32 -0.606235;
    f32 %136 = fadd f32 %134, f32 %135;
    f32* %137 = getelementptr &(f32* %20)[i64 -13];
    store f32* %137 with f32 %136;
    f32* %138 = getelementptr &(f32* %21)[i64 -13];
    f32 %139 = load f32* %138;
    f32 %140 = fmul f32 %139, f32 -0.184358;
    f32 %141 = fmul f32 %130, f32 0.114821;
    f32 %142 = fadd f32 %140, f32 %141;
    f32 %143 = fadd f32 %142, f32 %136;
    f32 %144 = fmul f32 %127, f32 -0.606235;
    f32 %145 = fadd f32 %143, f32 %144;
    f32* %146 = getelementptr &(f32* %20)[i64 -14];
    store f32* %146 with f32 %145;
    f32* %147 = getelementptr &(f32* %21)[i64 -14];
    f32 %148 = load f32* %147;
    f32 %149 = fmul f32 %148, f32 -0.184358;
    f32 %150 = fmul f32 %139, f32 0.114821;
    f32 %151 = fadd f32 %149, f32 %150;
    f32 %152 = fadd f32 %151, f32 %145;
    f32 %153 = fmul f32 %136, f32 -0.606235;
    f32 %154 = fadd f32 %152, f32 %153;
    f32* %155 = getelementptr &(f32* %20)[i64 -15];
    store f32* %155 with f32 %154;
    f32* %156 = getelementptr &(f32* %21)[i64 -15];
    f32 %157 = load f32* %156;
    i32 %158 = add i32 %9, i32 -16;
    i1 %159 = icmp sgt i32 %158, i32 13;
    cbr i1 %159(prob = 0.9375), ^while.body, ^while.body1;
  ^while.body1:
    f32 %160 = fmul f32 %157, f32 -0.184358;
    f32 %161 = fmul f32 %148, f32 0.114821;
    f32 %162 = fadd f32 %160, f32 %161;
    f32 %163 = fadd f32 %162, f32 %154;
    f32 %164 = fmul f32 %145, f32 -0.606235;
    f32 %165 = fadd f32 %163, f32 %164;
    f32* %166 = getelementptr &(f32* %20)[i64 -16];
    store f32* %166 with f32 %165;
    f32* %167 = getelementptr &(f32* %21)[i64 -16];
    f32 %168 = load f32* %167;
    f32 %169 = fmul f32 %168, f32 -0.184358;
    f32 %170 = fmul f32 %157, f32 0.114821;
    f32 %171 = fadd f32 %169, f32 %170;
    f32 %172 = fadd f32 %171, f32 %165;
    f32 %173 = fmul f32 %154, f32 -0.606235;
    f32 %174 = fadd f32 %172, f32 %173;
    f32* %175 = getelementptr &(f32* %20)[i64 -17];
    store f32* %175 with f32 %174;
    f32* %176 = getelementptr &(f32* %21)[i64 -17];
    f32 %177 = load f32* %176;
    f32 %178 = fmul f32 %177, f32 -0.184358;
    f32 %179 = fmul f32 %168, f32 0.114821;
    f32 %180 = fadd f32 %178, f32 %179;
    f32 %181 = fadd f32 %180, f32 %174;
    f32 %182 = fmul f32 %165, f32 -0.606235;
    f32 %183 = fadd f32 %181, f32 %182;
    f32* %184 = getelementptr &(f32* %20)[i64 -18];
    store f32* %184 with f32 %183;
    f32* %185 = getelementptr &(f32* %21)[i64 -18];
    f32 %186 = load f32* %185;
    f32 %187 = fmul f32 %186, f32 -0.184358;
    f32 %188 = fmul f32 %177, f32 0.114821;
    f32 %189 = fadd f32 %187, f32 %188;
    f32 %190 = fadd f32 %189, f32 %183;
    f32 %191 = fmul f32 %174, f32 -0.606235;
    f32 %192 = fadd f32 %190, f32 %191;
    f32* %193 = getelementptr &(f32* %20)[i64 -19];
    store f32* %193 with f32 %192;
    f32* %194 = getelementptr &(f32* %21)[i64 -19];
    f32 %195 = load f32* %194;
    f32 %196 = fmul f32 %195, f32 -0.184358;
    f32 %197 = fmul f32 %186, f32 0.114821;
    f32 %198 = fadd f32 %196, f32 %197;
    f32 %199 = fadd f32 %198, f32 %192;
    f32 %200 = fmul f32 %183, f32 -0.606235;
    f32 %201 = fadd f32 %199, f32 %200;
    f32* %202 = getelementptr &(f32* %20)[i64 -20];
    store f32* %202 with f32 %201;
    f32* %203 = getelementptr &(f32* %21)[i64 -20];
    f32 %204 = load f32* %203;
    f32 %205 = fmul f32 %204, f32 -0.184358;
    f32 %206 = fmul f32 %195, f32 0.114821;
    f32 %207 = fadd f32 %205, f32 %206;
    f32 %208 = fadd f32 %207, f32 %201;
    f32 %209 = fmul f32 %192, f32 -0.606235;
    f32 %210 = fadd f32 %208, f32 %209;
    f32* %211 = getelementptr &(f32* %20)[i64 -21];
    store f32* %211 with f32 %210;
    f32* %212 = getelementptr &(f32* %21)[i64 -21];
    f32 %213 = load f32* %212;
    f32 %214 = fmul f32 %213, f32 -0.184358;
    f32 %215 = fmul f32 %204, f32 0.114821;
    f32 %216 = fadd f32 %214, f32 %215;
    f32 %217 = fadd f32 %216, f32 %210;
    f32 %218 = fmul f32 %201, f32 -0.606235;
    f32 %219 = fadd f32 %217, f32 %218;
    f32* %220 = getelementptr &(f32* %20)[i64 -22];
    store f32* %220 with f32 %219;
    f32* %221 = getelementptr &(f32* %21)[i64 -22];
    f32 %222 = load f32* %221;
    f32 %223 = fmul f32 %222, f32 -0.184358;
    f32 %224 = fmul f32 %213, f32 0.114821;
    f32 %225 = fadd f32 %223, f32 %224;
    f32 %226 = fadd f32 %225, f32 %219;
    f32 %227 = fmul f32 %210, f32 -0.606235;
    f32 %228 = fadd f32 %226, f32 %227;
    f32* %229 = getelementptr &(f32* %20)[i64 -23];
    store f32* %229 with f32 %228;
    f32* %230 = getelementptr &(f32* %21)[i64 -23];
    f32 %231 = load f32* %230;
    f32 %232 = fmul f32 %231, f32 -0.184358;
    f32 %233 = fmul f32 %222, f32 0.114821;
    f32 %234 = fadd f32 %232, f32 %233;
    f32 %235 = fadd f32 %234, f32 %228;
    f32 %236 = fmul f32 %219, f32 -0.606235;
    f32 %237 = fadd f32 %235, f32 %236;
    f32* %238 = getelementptr &(f32* %20)[i64 -24];
    store f32* %238 with f32 %237;
    f32* %239 = getelementptr &(f32* %21)[i64 -24];
    f32 %240 = load f32* %239;
    f32 %241 = fmul f32 %240, f32 -0.184358;
    f32 %242 = fmul f32 %231, f32 0.114821;
    f32 %243 = fadd f32 %241, f32 %242;
    f32 %244 = fadd f32 %243, f32 %237;
    f32 %245 = fmul f32 %228, f32 -0.606235;
    f32 %246 = fadd f32 %244, f32 %245;
    f32* %247 = getelementptr &(f32* %20)[i64 -25];
    store f32* %247 with f32 %246;
    f32* %248 = getelementptr &(f32* %21)[i64 -25];
    f32 %249 = load f32* %248;
    f32 %250 = fmul f32 %249, f32 -0.184358;
    f32 %251 = fmul f32 %240, f32 0.114821;
    f32 %252 = fadd f32 %250, f32 %251;
    f32 %253 = fadd f32 %252, f32 %246;
    f32 %254 = fmul f32 %237, f32 -0.606235;
    f32 %255 = fadd f32 %253, f32 %254;
    f32* %256 = getelementptr &(f32* %20)[i64 -26];
    store f32* %256 with f32 %255;
    f32* %257 = getelementptr &(f32* %21)[i64 -26];
    f32 %258 = load f32* %257;
    f32 %259 = fmul f32 %258, f32 -0.184358;
    f32 %260 = fmul f32 %249, f32 0.114821;
    f32 %261 = fadd f32 %259, f32 %260;
    f32 %262 = fadd f32 %261, f32 %255;
    f32 %263 = fmul f32 %246, f32 -0.606235;
    f32 %264 = fadd f32 %262, f32 %263;
    f32* %265 = getelementptr &(f32* %20)[i64 -27];
    store f32* %265 with f32 %264;
    f32* %266 = getelementptr &(f32* %21)[i64 -27];
    f32 %267 = load f32* %266;
    f32 %268 = fmul f32 %267, f32 -0.184358;
    f32 %269 = fmul f32 %258, f32 0.114821;
    f32 %270 = fadd f32 %268, f32 %269;
    f32 %271 = fadd f32 %270, f32 %264;
    f32 %272 = fmul f32 %255, f32 -0.606235;
    f32 %273 = fadd f32 %271, f32 %272;
    f32* %274 = getelementptr &(f32* %20)[i64 -28];
    store f32* %274 with f32 %273;
    f32* %275 = getelementptr &(f32* %21)[i64 -28];
    f32 %276 = load f32* %275;
    f32 %277 = fmul f32 %276, f32 -0.184358;
    f32 %278 = fmul f32 %267, f32 0.114821;
    f32 %279 = fadd f32 %277, f32 %278;
    f32 %280 = fadd f32 %279, f32 %273;
    f32 %281 = fmul f32 %264, f32 -0.606235;
    f32 %282 = fadd f32 %280, f32 %281;
    f32* %283 = getelementptr &(f32* %20)[i64 -29];
    store f32* %283 with f32 %282;
    i32 %284 = add i32 %6, i32 1;
    i1 %285 = icmp sgt i32 %1, i32 %284;
    cbr i1 %285(prob = 0.984615), ^b1, ^b2;
  ^b2:
    ret;
}
internal func @cmmc_parallel_body_5(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [512 * [270 * f32]]* %2 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %3 = getelementptr &([512 * [270 * f32]]* %2)[i64 0][i64 0];
    [512 * [270 * f32]]* %4 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %6 = phi [^b, i32 %0] [^b2, i32 %190];
    ubr ^while.body;
  ^while.body:
    i32 %7 = phi [^b1, i32 511] [^while.body, i32 %188];
    f32 %8 = phi [^b1, f32 0] [^while.body, f32 %187];
    f32 %9 = phi [^b1, f32 0] [^while.body, f32 %176];
    f32 %10 = phi [^b1, f32 0] [^while.body, f32 %182];
    f32 %11 = phi [^b1, f32 0] [^while.body, f32 %171];
    f32 %12 = fmul f32 %8, f32 -0.184358;
    f32 %13 = fmul f32 %9, f32 0.114821;
    f32 %14 = fadd f32 %12, f32 %13;
    f32 %15 = fadd f32 %14, f32 %10;
    f32 %16 = fmul f32 %11, f32 -0.606235;
    f32 %17 = fadd f32 %15, f32 %16;
    [270 * f32]* %18 = getelementptr &([270 * f32]* %3)[i32 %7];
    f32* %19 = getelementptr &([270 * f32]* %18)[i64 0][i32 %6];
    store f32* %19 with f32 %17;
    [270 * f32]* %20 = getelementptr &([270 * f32]* %5)[i32 %7];
    f32* %21 = getelementptr &([270 * f32]* %20)[i64 0][i32 %6];
    f32 %22 = load f32* %21;
    f32 %23 = fmul f32 %22, f32 -0.184358;
    f32 %24 = fmul f32 %8, f32 0.114821;
    f32 %25 = fadd f32 %23, f32 %24;
    f32 %26 = fadd f32 %25, f32 %17;
    f32 %27 = fmul f32 %10, f32 -0.606235;
    f32 %28 = fadd f32 %26, f32 %27;
    [270 * f32]* %29 = getelementptr &([270 * f32]* %18)[i64 -1];
    f32* %30 = getelementptr &([270 * f32]* %29)[i64 0][i32 %6];
    store f32* %30 with f32 %28;
    [270 * f32]* %31 = getelementptr &([270 * f32]* %20)[i64 -1];
    f32* %32 = getelementptr &([270 * f32]* %31)[i64 0][i32 %6];
    f32 %33 = load f32* %32;
    f32 %34 = fmul f32 %33, f32 -0.184358;
    f32 %35 = fmul f32 %22, f32 0.114821;
    f32 %36 = fadd f32 %34, f32 %35;
    f32 %37 = fadd f32 %36, f32 %28;
    f32 %38 = fmul f32 %17, f32 -0.606235;
    f32 %39 = fadd f32 %37, f32 %38;
    [270 * f32]* %40 = getelementptr &([270 * f32]* %18)[i64 -2];
    f32* %41 = getelementptr &([270 * f32]* %40)[i64 0][i32 %6];
    store f32* %41 with f32 %39;
    [270 * f32]* %42 = getelementptr &([270 * f32]* %20)[i64 -2];
    f32* %43 = getelementptr &([270 * f32]* %42)[i64 0][i32 %6];
    f32 %44 = load f32* %43;
    f32 %45 = fmul f32 %44, f32 -0.184358;
    f32 %46 = fmul f32 %33, f32 0.114821;
    f32 %47 = fadd f32 %45, f32 %46;
    f32 %48 = fadd f32 %47, f32 %39;
    f32 %49 = fmul f32 %28, f32 -0.606235;
    f32 %50 = fadd f32 %48, f32 %49;
    [270 * f32]* %51 = getelementptr &([270 * f32]* %18)[i64 -3];
    f32* %52 = getelementptr &([270 * f32]* %51)[i64 0][i32 %6];
    store f32* %52 with f32 %50;
    [270 * f32]* %53 = getelementptr &([270 * f32]* %20)[i64 -3];
    f32* %54 = getelementptr &([270 * f32]* %53)[i64 0][i32 %6];
    f32 %55 = load f32* %54;
    f32 %56 = fmul f32 %55, f32 -0.184358;
    f32 %57 = fmul f32 %44, f32 0.114821;
    f32 %58 = fadd f32 %56, f32 %57;
    f32 %59 = fadd f32 %58, f32 %50;
    f32 %60 = fmul f32 %39, f32 -0.606235;
    f32 %61 = fadd f32 %59, f32 %60;
    [270 * f32]* %62 = getelementptr &([270 * f32]* %18)[i64 -4];
    f32* %63 = getelementptr &([270 * f32]* %62)[i64 0][i32 %6];
    store f32* %63 with f32 %61;
    [270 * f32]* %64 = getelementptr &([270 * f32]* %20)[i64 -4];
    f32* %65 = getelementptr &([270 * f32]* %64)[i64 0][i32 %6];
    f32 %66 = load f32* %65;
    f32 %67 = fmul f32 %66, f32 -0.184358;
    f32 %68 = fmul f32 %55, f32 0.114821;
    f32 %69 = fadd f32 %67, f32 %68;
    f32 %70 = fadd f32 %69, f32 %61;
    f32 %71 = fmul f32 %50, f32 -0.606235;
    f32 %72 = fadd f32 %70, f32 %71;
    [270 * f32]* %73 = getelementptr &([270 * f32]* %18)[i64 -5];
    f32* %74 = getelementptr &([270 * f32]* %73)[i64 0][i32 %6];
    store f32* %74 with f32 %72;
    [270 * f32]* %75 = getelementptr &([270 * f32]* %20)[i64 -5];
    f32* %76 = getelementptr &([270 * f32]* %75)[i64 0][i32 %6];
    f32 %77 = load f32* %76;
    f32 %78 = fmul f32 %77, f32 -0.184358;
    f32 %79 = fmul f32 %66, f32 0.114821;
    f32 %80 = fadd f32 %78, f32 %79;
    f32 %81 = fadd f32 %80, f32 %72;
    f32 %82 = fmul f32 %61, f32 -0.606235;
    f32 %83 = fadd f32 %81, f32 %82;
    [270 * f32]* %84 = getelementptr &([270 * f32]* %18)[i64 -6];
    f32* %85 = getelementptr &([270 * f32]* %84)[i64 0][i32 %6];
    store f32* %85 with f32 %83;
    [270 * f32]* %86 = getelementptr &([270 * f32]* %20)[i64 -6];
    f32* %87 = getelementptr &([270 * f32]* %86)[i64 0][i32 %6];
    f32 %88 = load f32* %87;
    f32 %89 = fmul f32 %88, f32 -0.184358;
    f32 %90 = fmul f32 %77, f32 0.114821;
    f32 %91 = fadd f32 %89, f32 %90;
    f32 %92 = fadd f32 %91, f32 %83;
    f32 %93 = fmul f32 %72, f32 -0.606235;
    f32 %94 = fadd f32 %92, f32 %93;
    [270 * f32]* %95 = getelementptr &([270 * f32]* %18)[i64 -7];
    f32* %96 = getelementptr &([270 * f32]* %95)[i64 0][i32 %6];
    store f32* %96 with f32 %94;
    [270 * f32]* %97 = getelementptr &([270 * f32]* %20)[i64 -7];
    f32* %98 = getelementptr &([270 * f32]* %97)[i64 0][i32 %6];
    f32 %99 = load f32* %98;
    f32 %100 = fmul f32 %99, f32 -0.184358;
    f32 %101 = fmul f32 %88, f32 0.114821;
    f32 %102 = fadd f32 %100, f32 %101;
    f32 %103 = fadd f32 %102, f32 %94;
    f32 %104 = fmul f32 %83, f32 -0.606235;
    f32 %105 = fadd f32 %103, f32 %104;
    [270 * f32]* %106 = getelementptr &([270 * f32]* %18)[i64 -8];
    f32* %107 = getelementptr &([270 * f32]* %106)[i64 0][i32 %6];
    store f32* %107 with f32 %105;
    [270 * f32]* %108 = getelementptr &([270 * f32]* %20)[i64 -8];
    f32* %109 = getelementptr &([270 * f32]* %108)[i64 0][i32 %6];
    f32 %110 = load f32* %109;
    f32 %111 = fmul f32 %110, f32 -0.184358;
    f32 %112 = fmul f32 %99, f32 0.114821;
    f32 %113 = fadd f32 %111, f32 %112;
    f32 %114 = fadd f32 %113, f32 %105;
    f32 %115 = fmul f32 %94, f32 -0.606235;
    f32 %116 = fadd f32 %114, f32 %115;
    [270 * f32]* %117 = getelementptr &([270 * f32]* %18)[i64 -9];
    f32* %118 = getelementptr &([270 * f32]* %117)[i64 0][i32 %6];
    store f32* %118 with f32 %116;
    [270 * f32]* %119 = getelementptr &([270 * f32]* %20)[i64 -9];
    f32* %120 = getelementptr &([270 * f32]* %119)[i64 0][i32 %6];
    f32 %121 = load f32* %120;
    f32 %122 = fmul f32 %121, f32 -0.184358;
    f32 %123 = fmul f32 %110, f32 0.114821;
    f32 %124 = fadd f32 %122, f32 %123;
    f32 %125 = fadd f32 %124, f32 %116;
    f32 %126 = fmul f32 %105, f32 -0.606235;
    f32 %127 = fadd f32 %125, f32 %126;
    [270 * f32]* %128 = getelementptr &([270 * f32]* %18)[i64 -10];
    f32* %129 = getelementptr &([270 * f32]* %128)[i64 0][i32 %6];
    store f32* %129 with f32 %127;
    [270 * f32]* %130 = getelementptr &([270 * f32]* %20)[i64 -10];
    f32* %131 = getelementptr &([270 * f32]* %130)[i64 0][i32 %6];
    f32 %132 = load f32* %131;
    f32 %133 = fmul f32 %132, f32 -0.184358;
    f32 %134 = fmul f32 %121, f32 0.114821;
    f32 %135 = fadd f32 %133, f32 %134;
    f32 %136 = fadd f32 %135, f32 %127;
    f32 %137 = fmul f32 %116, f32 -0.606235;
    f32 %138 = fadd f32 %136, f32 %137;
    [270 * f32]* %139 = getelementptr &([270 * f32]* %18)[i64 -11];
    f32* %140 = getelementptr &([270 * f32]* %139)[i64 0][i32 %6];
    store f32* %140 with f32 %138;
    [270 * f32]* %141 = getelementptr &([270 * f32]* %20)[i64 -11];
    f32* %142 = getelementptr &([270 * f32]* %141)[i64 0][i32 %6];
    f32 %143 = load f32* %142;
    f32 %144 = fmul f32 %143, f32 -0.184358;
    f32 %145 = fmul f32 %132, f32 0.114821;
    f32 %146 = fadd f32 %144, f32 %145;
    f32 %147 = fadd f32 %146, f32 %138;
    f32 %148 = fmul f32 %127, f32 -0.606235;
    f32 %149 = fadd f32 %147, f32 %148;
    [270 * f32]* %150 = getelementptr &([270 * f32]* %18)[i64 -12];
    f32* %151 = getelementptr &([270 * f32]* %150)[i64 0][i32 %6];
    store f32* %151 with f32 %149;
    [270 * f32]* %152 = getelementptr &([270 * f32]* %20)[i64 -12];
    f32* %153 = getelementptr &([270 * f32]* %152)[i64 0][i32 %6];
    f32 %154 = load f32* %153;
    f32 %155 = fmul f32 %154, f32 -0.184358;
    f32 %156 = fmul f32 %143, f32 0.114821;
    f32 %157 = fadd f32 %155, f32 %156;
    f32 %158 = fadd f32 %157, f32 %149;
    f32 %159 = fmul f32 %138, f32 -0.606235;
    f32 %160 = fadd f32 %158, f32 %159;
    [270 * f32]* %161 = getelementptr &([270 * f32]* %18)[i64 -13];
    f32* %162 = getelementptr &([270 * f32]* %161)[i64 0][i32 %6];
    store f32* %162 with f32 %160;
    [270 * f32]* %163 = getelementptr &([270 * f32]* %20)[i64 -13];
    f32* %164 = getelementptr &([270 * f32]* %163)[i64 0][i32 %6];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 -0.184358;
    f32 %167 = fmul f32 %154, f32 0.114821;
    f32 %168 = fadd f32 %166, f32 %167;
    f32 %169 = fadd f32 %168, f32 %160;
    f32 %170 = fmul f32 %149, f32 -0.606235;
    f32 %171 = fadd f32 %169, f32 %170;
    [270 * f32]* %172 = getelementptr &([270 * f32]* %18)[i64 -14];
    f32* %173 = getelementptr &([270 * f32]* %172)[i64 0][i32 %6];
    store f32* %173 with f32 %171;
    [270 * f32]* %174 = getelementptr &([270 * f32]* %20)[i64 -14];
    f32* %175 = getelementptr &([270 * f32]* %174)[i64 0][i32 %6];
    f32 %176 = load f32* %175;
    f32 %177 = fmul f32 %176, f32 -0.184358;
    f32 %178 = fmul f32 %165, f32 0.114821;
    f32 %179 = fadd f32 %177, f32 %178;
    f32 %180 = fadd f32 %179, f32 %171;
    f32 %181 = fmul f32 %160, f32 -0.606235;
    f32 %182 = fadd f32 %180, f32 %181;
    [270 * f32]* %183 = getelementptr &([270 * f32]* %18)[i64 -15];
    f32* %184 = getelementptr &([270 * f32]* %183)[i64 0][i32 %6];
    store f32* %184 with f32 %182;
    [270 * f32]* %185 = getelementptr &([270 * f32]* %20)[i64 -15];
    f32* %186 = getelementptr &([270 * f32]* %185)[i64 0][i32 %6];
    f32 %187 = load f32* %186;
    i32 %188 = add i32 %7, i32 -16;
    i1 %189 = icmp sgt i32 %188, i32 -1;
    cbr i1 %189(prob = 0.96875), ^while.body, ^b2;
  ^b2:
    i32 %190 = add i32 %6, i32 1;
    i1 %191 = icmp sgt i32 %1, i32 %190;
    cbr i1 %191(prob = 0.984615), ^b1, ^b3;
  ^b3:
    ret;
}
