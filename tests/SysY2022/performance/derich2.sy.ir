internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn, align 8;
internal [512 * [270 * f32]]* @imgOut, align 8;
internal [512 * [270 * f32]]* @my_y1, align 8 { Flexible };
internal [512 * [270 * f32]]* @my_y2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * [270 * f32]]* %0 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    f32* %1 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %3 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0];
    [512 * [270 * f32]]* %4 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0];
    [512 * [270 * f32]]* %6 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* %6)[i64 0][i64 0];
    [512 * [270 * f32]]* %8 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %9 = getelementptr &([512 * [270 * f32]]* %8)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %197];
    i1 %11 = icmp slt i32 %10, i32 512;
    cbr i1 %11(prob = 0.992248), ^prebody, ^while.header1;
  ^prebody:
    [270 * f32]* %12 = getelementptr &([270 * f32]* %7)[i32 %10];
    [270 * f32]* %13 = getelementptr &([270 * f32]* %3)[i32 %10];
    ubr ^while.body;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b1, i32 %361];
    i1 %15 = icmp slt i32 %14, i32 512;
    cbr i1 %15(prob = 0.992248), ^prebody1, ^while.header2;
  ^prebody1:
    [270 * f32]* %16 = getelementptr &([270 * f32]* %9)[i32 %14];
    [270 * f32]* %17 = getelementptr &([270 * f32]* %3)[i32 %14];
    ubr ^while.body2;
  ^while.body:
    f32 %18 = phi [^prebody, f32 0] [^while.body, f32 %83];
    f32 %19 = phi [^prebody, f32 0] [^while.body, f32 %92];
    f32 %20 = phi [^prebody, f32 0] [^while.body, f32 %86];
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %94];
    f32* %22 = getelementptr &([270 * f32]* %13)[i64 0][i32 %21];
    f32 %23 = load f32* %22;
    f32 %24 = fmul f32 %23, f32 -0.189399;
    f32 %25 = fmul f32 %20, f32 0.110615;
    f32 %26 = fadd f32 %24, f32 %25;
    f32 %27 = fadd f32 %26, f32 %19;
    f32 %28 = fmul f32 %18, f32 -0.606235;
    f32 %29 = fadd f32 %27, f32 %28;
    f32* %30 = getelementptr &([270 * f32]* %12)[i64 0][i32 %21];
    store f32* %30 with f32 %29;
    f32* %31 = getelementptr &(f32* %22)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fmul f32 %32, f32 -0.189399;
    f32 %34 = fmul f32 %23, f32 0.110615;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fadd f32 %35, f32 %29;
    f32 %37 = fmul f32 %19, f32 -0.606235;
    f32 %38 = fadd f32 %36, f32 %37;
    f32* %39 = getelementptr &(f32* %30)[i64 1];
    store f32* %39 with f32 %38;
    f32* %40 = getelementptr &(f32* %22)[i64 2];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %41, f32 -0.189399;
    f32 %43 = fmul f32 %32, f32 0.110615;
    f32 %44 = fadd f32 %42, f32 %43;
    f32 %45 = fadd f32 %44, f32 %38;
    f32 %46 = fmul f32 %29, f32 -0.606235;
    f32 %47 = fadd f32 %45, f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 2];
    store f32* %48 with f32 %47;
    f32* %49 = getelementptr &(f32* %22)[i64 3];
    f32 %50 = load f32* %49;
    f32 %51 = fmul f32 %50, f32 -0.189399;
    f32 %52 = fmul f32 %41, f32 0.110615;
    f32 %53 = fadd f32 %51, f32 %52;
    f32 %54 = fadd f32 %53, f32 %47;
    f32 %55 = fmul f32 %38, f32 -0.606235;
    f32 %56 = fadd f32 %54, f32 %55;
    f32* %57 = getelementptr &(f32* %30)[i64 3];
    store f32* %57 with f32 %56;
    f32* %58 = getelementptr &(f32* %22)[i64 4];
    f32 %59 = load f32* %58;
    f32 %60 = fmul f32 %59, f32 -0.189399;
    f32 %61 = fmul f32 %50, f32 0.110615;
    f32 %62 = fadd f32 %60, f32 %61;
    f32 %63 = fadd f32 %62, f32 %56;
    f32 %64 = fmul f32 %47, f32 -0.606235;
    f32 %65 = fadd f32 %63, f32 %64;
    f32* %66 = getelementptr &(f32* %30)[i64 4];
    store f32* %66 with f32 %65;
    f32* %67 = getelementptr &(f32* %22)[i64 5];
    f32 %68 = load f32* %67;
    f32 %69 = fmul f32 %68, f32 -0.189399;
    f32 %70 = fmul f32 %59, f32 0.110615;
    f32 %71 = fadd f32 %69, f32 %70;
    f32 %72 = fadd f32 %71, f32 %65;
    f32 %73 = fmul f32 %56, f32 -0.606235;
    f32 %74 = fadd f32 %72, f32 %73;
    f32* %75 = getelementptr &(f32* %30)[i64 5];
    store f32* %75 with f32 %74;
    f32* %76 = getelementptr &(f32* %22)[i64 6];
    f32 %77 = load f32* %76;
    f32 %78 = fmul f32 %77, f32 -0.189399;
    f32 %79 = fmul f32 %68, f32 0.110615;
    f32 %80 = fadd f32 %78, f32 %79;
    f32 %81 = fadd f32 %80, f32 %74;
    f32 %82 = fmul f32 %65, f32 -0.606235;
    f32 %83 = fadd f32 %81, f32 %82;
    f32* %84 = getelementptr &(f32* %30)[i64 6];
    store f32* %84 with f32 %83;
    f32* %85 = getelementptr &(f32* %22)[i64 7];
    f32 %86 = load f32* %85;
    f32 %87 = fmul f32 %86, f32 -0.189399;
    f32 %88 = fmul f32 %77, f32 0.110615;
    f32 %89 = fadd f32 %87, f32 %88;
    f32 %90 = fadd f32 %89, f32 %83;
    f32 %91 = fmul f32 %74, f32 -0.606235;
    f32 %92 = fadd f32 %90, f32 %91;
    f32* %93 = getelementptr &(f32* %30)[i64 7];
    store f32* %93 with f32 %92;
    i32 %94 = add i32 %21, i32 8;
    i1 %95 = icmp slt i32 %94, i32 262;
    cbr i1 %95(prob = 0.969697), ^while.body, ^while.body1;
  ^while.header2:
    i32 %96 = phi [^while.header1, i32 0] [^b2, i32 %485];
    i1 %97 = icmp slt i32 %96, i32 512;
    cbr i1 %97(prob = 0.992248), ^prebody2, ^while.header3;
  ^prebody2:
    [270 * f32]* %98 = getelementptr &([270 * f32]* %5)[i32 %96];
    [270 * f32]* %99 = getelementptr &([270 * f32]* %7)[i32 %96];
    [270 * f32]* %100 = getelementptr &([270 * f32]* %9)[i32 %96];
    ubr ^while.body4;
  ^while.body1 {scalar}:
    i32 %101 = phi [^while.body, i32 %94] [^while.body1, i32 %114];
    f32 %102 = phi [^while.body, f32 %86] [^while.body1, f32 %106];
    f32 %103 = phi [^while.body, f32 %92] [^while.body1, f32 %112];
    f32 %104 = phi [^while.body, f32 %83] [^while.body1, f32 %103];
    f32* %105 = getelementptr &([270 * f32]* %13)[i64 0][i32 %101];
    f32 %106 = load f32* %105;
    f32 %107 = fmul f32 %106, f32 -0.189399;
    f32 %108 = fmul f32 %102, f32 0.110615;
    f32 %109 = fadd f32 %107, f32 %108;
    f32 %110 = fadd f32 %109, f32 %103;
    f32 %111 = fmul f32 %104, f32 -0.606235;
    f32 %112 = fadd f32 %110, f32 %111;
    f32* %113 = getelementptr &([270 * f32]* %12)[i64 0][i32 %101];
    store f32* %113 with f32 %112;
    i32 %114 = add i32 %101, i32 1;
    i1 %115 = icmp slt i32 %114, i32 270;
    cbr i1 %115(prob = 0.875), ^while.body1, ^b;
  ^while.body2:
    f32 %116 = phi [^prebody1, f32 0] [^while.body2, f32 %180];
    f32 %117 = phi [^prebody1, f32 0] [^while.body2, f32 %189];
    f32 %118 = phi [^prebody1, f32 0] [^while.body2, f32 %183];
    f32 %119 = phi [^prebody1, f32 0] [^while.body2, f32 %192];
    i32 %120 = phi [^prebody1, i32 269] [^while.body2, i32 %193];
    f32 %121 = fmul f32 %119, f32 -0.184358;
    f32 %122 = fmul f32 %118, f32 0.114821;
    f32 %123 = fadd f32 %121, f32 %122;
    f32 %124 = fadd f32 %123, f32 %117;
    f32 %125 = fmul f32 %116, f32 -0.606235;
    f32 %126 = fadd f32 %124, f32 %125;
    f32* %127 = getelementptr &([270 * f32]* %16)[i64 0][i32 %120];
    store f32* %127 with f32 %126;
    f32* %128 = getelementptr &([270 * f32]* %17)[i64 0][i32 %120];
    f32 %129 = load f32* %128;
    f32 %130 = fmul f32 %129, f32 -0.184358;
    f32 %131 = fmul f32 %119, f32 0.114821;
    f32 %132 = fadd f32 %130, f32 %131;
    f32 %133 = fadd f32 %132, f32 %126;
    f32 %134 = fmul f32 %117, f32 -0.606235;
    f32 %135 = fadd f32 %133, f32 %134;
    f32* %136 = getelementptr &(f32* %127)[i64 -1];
    store f32* %136 with f32 %135;
    f32* %137 = getelementptr &(f32* %128)[i64 -1];
    f32 %138 = load f32* %137;
    f32 %139 = fmul f32 %138, f32 -0.184358;
    f32 %140 = fmul f32 %129, f32 0.114821;
    f32 %141 = fadd f32 %139, f32 %140;
    f32 %142 = fadd f32 %141, f32 %135;
    f32 %143 = fmul f32 %126, f32 -0.606235;
    f32 %144 = fadd f32 %142, f32 %143;
    f32* %145 = getelementptr &(f32* %127)[i64 -2];
    store f32* %145 with f32 %144;
    f32* %146 = getelementptr &(f32* %128)[i64 -2];
    f32 %147 = load f32* %146;
    f32 %148 = fmul f32 %147, f32 -0.184358;
    f32 %149 = fmul f32 %138, f32 0.114821;
    f32 %150 = fadd f32 %148, f32 %149;
    f32 %151 = fadd f32 %150, f32 %144;
    f32 %152 = fmul f32 %135, f32 -0.606235;
    f32 %153 = fadd f32 %151, f32 %152;
    f32* %154 = getelementptr &(f32* %127)[i64 -3];
    store f32* %154 with f32 %153;
    f32* %155 = getelementptr &(f32* %128)[i64 -3];
    f32 %156 = load f32* %155;
    f32 %157 = fmul f32 %156, f32 -0.184358;
    f32 %158 = fmul f32 %147, f32 0.114821;
    f32 %159 = fadd f32 %157, f32 %158;
    f32 %160 = fadd f32 %159, f32 %153;
    f32 %161 = fmul f32 %144, f32 -0.606235;
    f32 %162 = fadd f32 %160, f32 %161;
    f32* %163 = getelementptr &(f32* %127)[i64 -4];
    store f32* %163 with f32 %162;
    f32* %164 = getelementptr &(f32* %128)[i64 -4];
    f32 %165 = load f32* %164;
    f32 %166 = fmul f32 %165, f32 -0.184358;
    f32 %167 = fmul f32 %156, f32 0.114821;
    f32 %168 = fadd f32 %166, f32 %167;
    f32 %169 = fadd f32 %168, f32 %162;
    f32 %170 = fmul f32 %153, f32 -0.606235;
    f32 %171 = fadd f32 %169, f32 %170;
    f32* %172 = getelementptr &(f32* %127)[i64 -5];
    store f32* %172 with f32 %171;
    f32* %173 = getelementptr &(f32* %128)[i64 -5];
    f32 %174 = load f32* %173;
    f32 %175 = fmul f32 %174, f32 -0.184358;
    f32 %176 = fmul f32 %165, f32 0.114821;
    f32 %177 = fadd f32 %175, f32 %176;
    f32 %178 = fadd f32 %177, f32 %171;
    f32 %179 = fmul f32 %162, f32 -0.606235;
    f32 %180 = fadd f32 %178, f32 %179;
    f32* %181 = getelementptr &(f32* %127)[i64 -6];
    store f32* %181 with f32 %180;
    f32* %182 = getelementptr &(f32* %128)[i64 -6];
    f32 %183 = load f32* %182;
    f32 %184 = fmul f32 %183, f32 -0.184358;
    f32 %185 = fmul f32 %174, f32 0.114821;
    f32 %186 = fadd f32 %184, f32 %185;
    f32 %187 = fadd f32 %186, f32 %180;
    f32 %188 = fmul f32 %171, f32 -0.606235;
    f32 %189 = fadd f32 %187, f32 %188;
    f32* %190 = getelementptr &(f32* %127)[i64 -7];
    store f32* %190 with f32 %189;
    f32* %191 = getelementptr &(f32* %128)[i64 -7];
    f32 %192 = load f32* %191;
    i32 %193 = add i32 %120, i32 -8;
    i1 %194 = icmp sgt i32 %193, i32 7;
    cbr i1 %194(prob = 0.969697), ^while.body2, ^while.body3;
  ^while.header3:
    i32 %195 = phi [^while.header2, i32 0] [^b3, i32 %489];
    i1 %196 = icmp slt i32 %195, i32 270;
    cbr i1 %196(prob = 0.992248), ^while.body5, ^while.header4;
  ^b:
    i32 %197 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.body3 {scalar}:
    i32 %198 = phi [^while.body2, i32 %193] [^while.body3, i32 %212];
    f32 %199 = phi [^while.body2, f32 %192] [^while.body3, f32 %211];
    f32 %200 = phi [^while.body2, f32 %183] [^while.body3, f32 %199];
    f32 %201 = phi [^while.body2, f32 %189] [^while.body3, f32 %208];
    f32 %202 = phi [^while.body2, f32 %180] [^while.body3, f32 %201];
    f32 %203 = fmul f32 %199, f32 -0.184358;
    f32 %204 = fmul f32 %200, f32 0.114821;
    f32 %205 = fadd f32 %203, f32 %204;
    f32 %206 = fadd f32 %205, f32 %201;
    f32 %207 = fmul f32 %202, f32 -0.606235;
    f32 %208 = fadd f32 %206, f32 %207;
    f32* %209 = getelementptr &([270 * f32]* %16)[i64 0][i32 %198];
    store f32* %209 with f32 %208;
    f32* %210 = getelementptr &([270 * f32]* %17)[i64 0][i32 %198];
    f32 %211 = load f32* %210;
    i32 %212 = add i32 %198, i32 -1;
    i1 %213 = icmp sgt i32 %212, i32 -1;
    cbr i1 %213(prob = 0.875), ^while.body3, ^b1;
  ^while.body4:
    i32 %214 = phi [^prebody2, i32 0] [^while.body4, i32 %263];
    f32* %215 = getelementptr &([270 * f32]* %99)[i64 0][i32 %214];
    f32 %216 = load f32* %215;
    f32* %217 = getelementptr &([270 * f32]* %100)[i64 0][i32 %214];
    f32 %218 = load f32* %217;
    f32 %219 = fadd f32 %216, f32 %218;
    f32* %220 = getelementptr &([270 * f32]* %98)[i64 0][i32 %214];
    store f32* %220 with f32 %219;
    f32* %221 = getelementptr &(f32* %215)[i64 1];
    f32 %222 = load f32* %221;
    f32* %223 = getelementptr &(f32* %217)[i64 1];
    f32 %224 = load f32* %223;
    f32 %225 = fadd f32 %222, f32 %224;
    f32* %226 = getelementptr &(f32* %220)[i64 1];
    store f32* %226 with f32 %225;
    f32* %227 = getelementptr &(f32* %215)[i64 2];
    f32 %228 = load f32* %227;
    f32* %229 = getelementptr &(f32* %217)[i64 2];
    f32 %230 = load f32* %229;
    f32 %231 = fadd f32 %228, f32 %230;
    f32* %232 = getelementptr &(f32* %220)[i64 2];
    store f32* %232 with f32 %231;
    f32* %233 = getelementptr &(f32* %215)[i64 3];
    f32 %234 = load f32* %233;
    f32* %235 = getelementptr &(f32* %217)[i64 3];
    f32 %236 = load f32* %235;
    f32 %237 = fadd f32 %234, f32 %236;
    f32* %238 = getelementptr &(f32* %220)[i64 3];
    store f32* %238 with f32 %237;
    f32* %239 = getelementptr &(f32* %215)[i64 4];
    f32 %240 = load f32* %239;
    f32* %241 = getelementptr &(f32* %217)[i64 4];
    f32 %242 = load f32* %241;
    f32 %243 = fadd f32 %240, f32 %242;
    f32* %244 = getelementptr &(f32* %220)[i64 4];
    store f32* %244 with f32 %243;
    f32* %245 = getelementptr &(f32* %215)[i64 5];
    f32 %246 = load f32* %245;
    f32* %247 = getelementptr &(f32* %217)[i64 5];
    f32 %248 = load f32* %247;
    f32 %249 = fadd f32 %246, f32 %248;
    f32* %250 = getelementptr &(f32* %220)[i64 5];
    store f32* %250 with f32 %249;
    f32* %251 = getelementptr &(f32* %215)[i64 6];
    f32 %252 = load f32* %251;
    f32* %253 = getelementptr &(f32* %217)[i64 6];
    f32 %254 = load f32* %253;
    f32 %255 = fadd f32 %252, f32 %254;
    f32* %256 = getelementptr &(f32* %220)[i64 6];
    store f32* %256 with f32 %255;
    f32* %257 = getelementptr &(f32* %215)[i64 7];
    f32 %258 = load f32* %257;
    f32* %259 = getelementptr &(f32* %217)[i64 7];
    f32 %260 = load f32* %259;
    f32 %261 = fadd f32 %258, f32 %260;
    f32* %262 = getelementptr &(f32* %220)[i64 7];
    store f32* %262 with f32 %261;
    i32 %263 = add i32 %214, i32 8;
    i1 %264 = icmp slt i32 %263, i32 262;
    cbr i1 %264(prob = 0.969697), ^while.body4, ^while.body6;
  ^while.body5:
    f32 %265 = phi [^while.header3, f32 0] [^while.body5, f32 %343];
    f32 %266 = phi [^while.header3, f32 0] [^while.body5, f32 %354];
    f32 %267 = phi [^while.header3, f32 0] [^while.body5, f32 %348];
    i32 %268 = phi [^while.header3, i32 0] [^while.body5, i32 %357];
    [270 * f32]* %269 = getelementptr &([270 * f32]* %5)[i32 %268];
    f32* %270 = getelementptr &([270 * f32]* %269)[i64 0][i32 %195];
    f32 %271 = load f32* %270;
    f32 %272 = fmul f32 %271, f32 -0.189399;
    f32 %273 = fmul f32 %267, f32 0.110615;
    f32 %274 = fadd f32 %272, f32 %273;
    f32 %275 = fadd f32 %274, f32 %266;
    f32 %276 = fmul f32 %265, f32 -0.606235;
    f32 %277 = fadd f32 %275, f32 %276;
    [270 * f32]* %278 = getelementptr &([270 * f32]* %7)[i32 %268];
    f32* %279 = getelementptr &([270 * f32]* %278)[i64 0][i32 %195];
    store f32* %279 with f32 %277;
    [270 * f32]* %280 = getelementptr &([270 * f32]* %269)[i64 1];
    f32* %281 = getelementptr &([270 * f32]* %280)[i64 0][i32 %195];
    f32 %282 = load f32* %281;
    f32 %283 = fmul f32 %282, f32 -0.189399;
    f32 %284 = fmul f32 %271, f32 0.110615;
    f32 %285 = fadd f32 %283, f32 %284;
    f32 %286 = fadd f32 %285, f32 %277;
    f32 %287 = fmul f32 %266, f32 -0.606235;
    f32 %288 = fadd f32 %286, f32 %287;
    [270 * f32]* %289 = getelementptr &([270 * f32]* %278)[i64 1];
    f32* %290 = getelementptr &([270 * f32]* %289)[i64 0][i32 %195];
    store f32* %290 with f32 %288;
    [270 * f32]* %291 = getelementptr &([270 * f32]* %269)[i64 2];
    f32* %292 = getelementptr &([270 * f32]* %291)[i64 0][i32 %195];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %293, f32 -0.189399;
    f32 %295 = fmul f32 %282, f32 0.110615;
    f32 %296 = fadd f32 %294, f32 %295;
    f32 %297 = fadd f32 %296, f32 %288;
    f32 %298 = fmul f32 %277, f32 -0.606235;
    f32 %299 = fadd f32 %297, f32 %298;
    [270 * f32]* %300 = getelementptr &([270 * f32]* %278)[i64 2];
    f32* %301 = getelementptr &([270 * f32]* %300)[i64 0][i32 %195];
    store f32* %301 with f32 %299;
    [270 * f32]* %302 = getelementptr &([270 * f32]* %269)[i64 3];
    f32* %303 = getelementptr &([270 * f32]* %302)[i64 0][i32 %195];
    f32 %304 = load f32* %303;
    f32 %305 = fmul f32 %304, f32 -0.189399;
    f32 %306 = fmul f32 %293, f32 0.110615;
    f32 %307 = fadd f32 %305, f32 %306;
    f32 %308 = fadd f32 %307, f32 %299;
    f32 %309 = fmul f32 %288, f32 -0.606235;
    f32 %310 = fadd f32 %308, f32 %309;
    [270 * f32]* %311 = getelementptr &([270 * f32]* %278)[i64 3];
    f32* %312 = getelementptr &([270 * f32]* %311)[i64 0][i32 %195];
    store f32* %312 with f32 %310;
    [270 * f32]* %313 = getelementptr &([270 * f32]* %269)[i64 4];
    f32* %314 = getelementptr &([270 * f32]* %313)[i64 0][i32 %195];
    f32 %315 = load f32* %314;
    f32 %316 = fmul f32 %315, f32 -0.189399;
    f32 %317 = fmul f32 %304, f32 0.110615;
    f32 %318 = fadd f32 %316, f32 %317;
    f32 %319 = fadd f32 %318, f32 %310;
    f32 %320 = fmul f32 %299, f32 -0.606235;
    f32 %321 = fadd f32 %319, f32 %320;
    [270 * f32]* %322 = getelementptr &([270 * f32]* %278)[i64 4];
    f32* %323 = getelementptr &([270 * f32]* %322)[i64 0][i32 %195];
    store f32* %323 with f32 %321;
    [270 * f32]* %324 = getelementptr &([270 * f32]* %269)[i64 5];
    f32* %325 = getelementptr &([270 * f32]* %324)[i64 0][i32 %195];
    f32 %326 = load f32* %325;
    f32 %327 = fmul f32 %326, f32 -0.189399;
    f32 %328 = fmul f32 %315, f32 0.110615;
    f32 %329 = fadd f32 %327, f32 %328;
    f32 %330 = fadd f32 %329, f32 %321;
    f32 %331 = fmul f32 %310, f32 -0.606235;
    f32 %332 = fadd f32 %330, f32 %331;
    [270 * f32]* %333 = getelementptr &([270 * f32]* %278)[i64 5];
    f32* %334 = getelementptr &([270 * f32]* %333)[i64 0][i32 %195];
    store f32* %334 with f32 %332;
    [270 * f32]* %335 = getelementptr &([270 * f32]* %269)[i64 6];
    f32* %336 = getelementptr &([270 * f32]* %335)[i64 0][i32 %195];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 %337, f32 -0.189399;
    f32 %339 = fmul f32 %326, f32 0.110615;
    f32 %340 = fadd f32 %338, f32 %339;
    f32 %341 = fadd f32 %340, f32 %332;
    f32 %342 = fmul f32 %321, f32 -0.606235;
    f32 %343 = fadd f32 %341, f32 %342;
    [270 * f32]* %344 = getelementptr &([270 * f32]* %278)[i64 6];
    f32* %345 = getelementptr &([270 * f32]* %344)[i64 0][i32 %195];
    store f32* %345 with f32 %343;
    [270 * f32]* %346 = getelementptr &([270 * f32]* %269)[i64 7];
    f32* %347 = getelementptr &([270 * f32]* %346)[i64 0][i32 %195];
    f32 %348 = load f32* %347;
    f32 %349 = fmul f32 %348, f32 -0.189399;
    f32 %350 = fmul f32 %337, f32 0.110615;
    f32 %351 = fadd f32 %349, f32 %350;
    f32 %352 = fadd f32 %351, f32 %343;
    f32 %353 = fmul f32 %332, f32 -0.606235;
    f32 %354 = fadd f32 %352, f32 %353;
    [270 * f32]* %355 = getelementptr &([270 * f32]* %278)[i64 7];
    f32* %356 = getelementptr &([270 * f32]* %355)[i64 0][i32 %195];
    store f32* %356 with f32 %354;
    i32 %357 = add i32 %268, i32 8;
    i1 %358 = icmp slt i32 %357, i32 504;
    cbr i1 %358(prob = 0.984127), ^while.body5, ^while.body7;
  ^while.header4:
    i32 %359 = phi [^while.header3, i32 0] [^b4, i32 %509];
    i1 %360 = icmp slt i32 %359, i32 270;
    cbr i1 %360(prob = 0.992248), ^while.body8, ^while.header5;
  ^b1:
    i32 %361 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^while.body6 {scalar}:
    i32 %362 = phi [^while.body4, i32 %263] [^while.body6, i32 %369];
    f32* %363 = getelementptr &([270 * f32]* %99)[i64 0][i32 %362];
    f32 %364 = load f32* %363;
    f32* %365 = getelementptr &([270 * f32]* %100)[i64 0][i32 %362];
    f32 %366 = load f32* %365;
    f32 %367 = fadd f32 %364, f32 %366;
    f32* %368 = getelementptr &([270 * f32]* %98)[i64 0][i32 %362];
    store f32* %368 with f32 %367;
    i32 %369 = add i32 %362, i32 1;
    i1 %370 = icmp slt i32 %369, i32 270;
    cbr i1 %370(prob = 0.875), ^while.body6, ^b2;
  ^while.body7 {scalar}:
    i32 %371 = phi [^while.body5, i32 %357] [^while.body7, i32 %386];
    f32 %372 = phi [^while.body5, f32 %348] [^while.body7, f32 %377];
    f32 %373 = phi [^while.body5, f32 %354] [^while.body7, f32 %383];
    f32 %374 = phi [^while.body5, f32 %343] [^while.body7, f32 %373];
    [270 * f32]* %375 = getelementptr &([270 * f32]* %5)[i32 %371];
    f32* %376 = getelementptr &([270 * f32]* %375)[i64 0][i32 %195];
    f32 %377 = load f32* %376;
    f32 %378 = fmul f32 %377, f32 -0.189399;
    f32 %379 = fmul f32 %372, f32 0.110615;
    f32 %380 = fadd f32 %378, f32 %379;
    f32 %381 = fadd f32 %380, f32 %373;
    f32 %382 = fmul f32 %374, f32 -0.606235;
    f32 %383 = fadd f32 %381, f32 %382;
    [270 * f32]* %384 = getelementptr &([270 * f32]* %7)[i32 %371];
    f32* %385 = getelementptr &([270 * f32]* %384)[i64 0][i32 %195];
    store f32* %385 with f32 %383;
    i32 %386 = add i32 %371, i32 1;
    i1 %387 = icmp slt i32 %386, i32 512;
    cbr i1 %387(prob = 0.875), ^while.body7, ^b3;
  ^while.body8:
    f32 %388 = phi [^while.header4, f32 0] [^while.body8, f32 %464];
    f32 %389 = phi [^while.header4, f32 0] [^while.body8, f32 %475];
    f32 %390 = phi [^while.header4, f32 0] [^while.body8, f32 %469];
    f32 %391 = phi [^while.header4, f32 0] [^while.body8, f32 %480];
    i32 %392 = phi [^while.header4, i32 511] [^while.body8, i32 %481];
    f32 %393 = fmul f32 %391, f32 -0.184358;
    f32 %394 = fmul f32 %390, f32 0.114821;
    f32 %395 = fadd f32 %393, f32 %394;
    f32 %396 = fadd f32 %395, f32 %389;
    f32 %397 = fmul f32 %388, f32 -0.606235;
    f32 %398 = fadd f32 %396, f32 %397;
    [270 * f32]* %399 = getelementptr &([270 * f32]* %9)[i32 %392];
    f32* %400 = getelementptr &([270 * f32]* %399)[i64 0][i32 %359];
    store f32* %400 with f32 %398;
    [270 * f32]* %401 = getelementptr &([270 * f32]* %5)[i32 %392];
    f32* %402 = getelementptr &([270 * f32]* %401)[i64 0][i32 %359];
    f32 %403 = load f32* %402;
    f32 %404 = fmul f32 %403, f32 -0.184358;
    f32 %405 = fmul f32 %391, f32 0.114821;
    f32 %406 = fadd f32 %404, f32 %405;
    f32 %407 = fadd f32 %406, f32 %398;
    f32 %408 = fmul f32 %389, f32 -0.606235;
    f32 %409 = fadd f32 %407, f32 %408;
    [270 * f32]* %410 = getelementptr &([270 * f32]* %399)[i64 -1];
    f32* %411 = getelementptr &([270 * f32]* %410)[i64 0][i32 %359];
    store f32* %411 with f32 %409;
    [270 * f32]* %412 = getelementptr &([270 * f32]* %401)[i64 -1];
    f32* %413 = getelementptr &([270 * f32]* %412)[i64 0][i32 %359];
    f32 %414 = load f32* %413;
    f32 %415 = fmul f32 %414, f32 -0.184358;
    f32 %416 = fmul f32 %403, f32 0.114821;
    f32 %417 = fadd f32 %415, f32 %416;
    f32 %418 = fadd f32 %417, f32 %409;
    f32 %419 = fmul f32 %398, f32 -0.606235;
    f32 %420 = fadd f32 %418, f32 %419;
    [270 * f32]* %421 = getelementptr &([270 * f32]* %399)[i64 -2];
    f32* %422 = getelementptr &([270 * f32]* %421)[i64 0][i32 %359];
    store f32* %422 with f32 %420;
    [270 * f32]* %423 = getelementptr &([270 * f32]* %401)[i64 -2];
    f32* %424 = getelementptr &([270 * f32]* %423)[i64 0][i32 %359];
    f32 %425 = load f32* %424;
    f32 %426 = fmul f32 %425, f32 -0.184358;
    f32 %427 = fmul f32 %414, f32 0.114821;
    f32 %428 = fadd f32 %426, f32 %427;
    f32 %429 = fadd f32 %428, f32 %420;
    f32 %430 = fmul f32 %409, f32 -0.606235;
    f32 %431 = fadd f32 %429, f32 %430;
    [270 * f32]* %432 = getelementptr &([270 * f32]* %399)[i64 -3];
    f32* %433 = getelementptr &([270 * f32]* %432)[i64 0][i32 %359];
    store f32* %433 with f32 %431;
    [270 * f32]* %434 = getelementptr &([270 * f32]* %401)[i64 -3];
    f32* %435 = getelementptr &([270 * f32]* %434)[i64 0][i32 %359];
    f32 %436 = load f32* %435;
    f32 %437 = fmul f32 %436, f32 -0.184358;
    f32 %438 = fmul f32 %425, f32 0.114821;
    f32 %439 = fadd f32 %437, f32 %438;
    f32 %440 = fadd f32 %439, f32 %431;
    f32 %441 = fmul f32 %420, f32 -0.606235;
    f32 %442 = fadd f32 %440, f32 %441;
    [270 * f32]* %443 = getelementptr &([270 * f32]* %399)[i64 -4];
    f32* %444 = getelementptr &([270 * f32]* %443)[i64 0][i32 %359];
    store f32* %444 with f32 %442;
    [270 * f32]* %445 = getelementptr &([270 * f32]* %401)[i64 -4];
    f32* %446 = getelementptr &([270 * f32]* %445)[i64 0][i32 %359];
    f32 %447 = load f32* %446;
    f32 %448 = fmul f32 %447, f32 -0.184358;
    f32 %449 = fmul f32 %436, f32 0.114821;
    f32 %450 = fadd f32 %448, f32 %449;
    f32 %451 = fadd f32 %450, f32 %442;
    f32 %452 = fmul f32 %431, f32 -0.606235;
    f32 %453 = fadd f32 %451, f32 %452;
    [270 * f32]* %454 = getelementptr &([270 * f32]* %399)[i64 -5];
    f32* %455 = getelementptr &([270 * f32]* %454)[i64 0][i32 %359];
    store f32* %455 with f32 %453;
    [270 * f32]* %456 = getelementptr &([270 * f32]* %401)[i64 -5];
    f32* %457 = getelementptr &([270 * f32]* %456)[i64 0][i32 %359];
    f32 %458 = load f32* %457;
    f32 %459 = fmul f32 %458, f32 -0.184358;
    f32 %460 = fmul f32 %447, f32 0.114821;
    f32 %461 = fadd f32 %459, f32 %460;
    f32 %462 = fadd f32 %461, f32 %453;
    f32 %463 = fmul f32 %442, f32 -0.606235;
    f32 %464 = fadd f32 %462, f32 %463;
    [270 * f32]* %465 = getelementptr &([270 * f32]* %399)[i64 -6];
    f32* %466 = getelementptr &([270 * f32]* %465)[i64 0][i32 %359];
    store f32* %466 with f32 %464;
    [270 * f32]* %467 = getelementptr &([270 * f32]* %401)[i64 -6];
    f32* %468 = getelementptr &([270 * f32]* %467)[i64 0][i32 %359];
    f32 %469 = load f32* %468;
    f32 %470 = fmul f32 %469, f32 -0.184358;
    f32 %471 = fmul f32 %458, f32 0.114821;
    f32 %472 = fadd f32 %470, f32 %471;
    f32 %473 = fadd f32 %472, f32 %464;
    f32 %474 = fmul f32 %453, f32 -0.606235;
    f32 %475 = fadd f32 %473, f32 %474;
    [270 * f32]* %476 = getelementptr &([270 * f32]* %399)[i64 -7];
    f32* %477 = getelementptr &([270 * f32]* %476)[i64 0][i32 %359];
    store f32* %477 with f32 %475;
    [270 * f32]* %478 = getelementptr &([270 * f32]* %401)[i64 -7];
    f32* %479 = getelementptr &([270 * f32]* %478)[i64 0][i32 %359];
    f32 %480 = load f32* %479;
    i32 %481 = add i32 %392, i32 -8;
    i1 %482 = icmp sgt i32 %481, i32 7;
    cbr i1 %482(prob = 0.984127), ^while.body8, ^while.body9;
  ^while.header5:
    i32 %483 = phi [^while.header4, i32 0] [^b5, i32 %570];
    i1 %484 = icmp slt i32 %483, i32 512;
    cbr i1 %484(prob = 0.992248), ^prebody3, ^entry1;
  ^b2:
    i32 %485 = add i32 %96, i32 1;
    ubr ^while.header2;
  ^prebody3:
    [270 * f32]* %486 = getelementptr &([270 * f32]* %5)[i32 %483];
    [270 * f32]* %487 = getelementptr &([270 * f32]* %7)[i32 %483];
    [270 * f32]* %488 = getelementptr &([270 * f32]* %9)[i32 %483];
    ubr ^while.body10;
  ^b3:
    i32 %489 = add i32 %195, i32 1;
    ubr ^while.header3;
  ^while.body9 {scalar}:
    i32 %490 = phi [^while.body8, i32 %481] [^while.body9, i32 %506];
    f32 %491 = phi [^while.body8, f32 %480] [^while.body9, f32 %505];
    f32 %492 = phi [^while.body8, f32 %469] [^while.body9, f32 %491];
    f32 %493 = phi [^while.body8, f32 %475] [^while.body9, f32 %500];
    f32 %494 = phi [^while.body8, f32 %464] [^while.body9, f32 %493];
    f32 %495 = fmul f32 %491, f32 -0.184358;
    f32 %496 = fmul f32 %492, f32 0.114821;
    f32 %497 = fadd f32 %495, f32 %496;
    f32 %498 = fadd f32 %497, f32 %493;
    f32 %499 = fmul f32 %494, f32 -0.606235;
    f32 %500 = fadd f32 %498, f32 %499;
    [270 * f32]* %501 = getelementptr &([270 * f32]* %9)[i32 %490];
    f32* %502 = getelementptr &([270 * f32]* %501)[i64 0][i32 %359];
    store f32* %502 with f32 %500;
    [270 * f32]* %503 = getelementptr &([270 * f32]* %5)[i32 %490];
    f32* %504 = getelementptr &([270 * f32]* %503)[i64 0][i32 %359];
    f32 %505 = load f32* %504;
    i32 %506 = add i32 %490, i32 -1;
    i1 %507 = icmp sgt i32 %506, i32 -1;
    cbr i1 %507(prob = 0.875), ^while.body9, ^b4;
  ^entry1:
    call (i32) -> void @stoptime(i32 158);
    f32* %508 = getelementptr &([512 * [270 * f32]]* %4)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 138240, f32* %508);
    ret i32 0;
  ^b4:
    i32 %509 = add i32 %359, i32 1;
    ubr ^while.header4;
  ^while.body10:
    i32 %510 = phi [^prebody3, i32 0] [^while.body10, i32 %559];
    f32* %511 = getelementptr &([270 * f32]* %487)[i64 0][i32 %510];
    f32 %512 = load f32* %511;
    f32* %513 = getelementptr &([270 * f32]* %488)[i64 0][i32 %510];
    f32 %514 = load f32* %513;
    f32 %515 = fadd f32 %512, f32 %514;
    f32* %516 = getelementptr &([270 * f32]* %486)[i64 0][i32 %510];
    store f32* %516 with f32 %515;
    f32* %517 = getelementptr &(f32* %511)[i64 1];
    f32 %518 = load f32* %517;
    f32* %519 = getelementptr &(f32* %513)[i64 1];
    f32 %520 = load f32* %519;
    f32 %521 = fadd f32 %518, f32 %520;
    f32* %522 = getelementptr &(f32* %516)[i64 1];
    store f32* %522 with f32 %521;
    f32* %523 = getelementptr &(f32* %511)[i64 2];
    f32 %524 = load f32* %523;
    f32* %525 = getelementptr &(f32* %513)[i64 2];
    f32 %526 = load f32* %525;
    f32 %527 = fadd f32 %524, f32 %526;
    f32* %528 = getelementptr &(f32* %516)[i64 2];
    store f32* %528 with f32 %527;
    f32* %529 = getelementptr &(f32* %511)[i64 3];
    f32 %530 = load f32* %529;
    f32* %531 = getelementptr &(f32* %513)[i64 3];
    f32 %532 = load f32* %531;
    f32 %533 = fadd f32 %530, f32 %532;
    f32* %534 = getelementptr &(f32* %516)[i64 3];
    store f32* %534 with f32 %533;
    f32* %535 = getelementptr &(f32* %511)[i64 4];
    f32 %536 = load f32* %535;
    f32* %537 = getelementptr &(f32* %513)[i64 4];
    f32 %538 = load f32* %537;
    f32 %539 = fadd f32 %536, f32 %538;
    f32* %540 = getelementptr &(f32* %516)[i64 4];
    store f32* %540 with f32 %539;
    f32* %541 = getelementptr &(f32* %511)[i64 5];
    f32 %542 = load f32* %541;
    f32* %543 = getelementptr &(f32* %513)[i64 5];
    f32 %544 = load f32* %543;
    f32 %545 = fadd f32 %542, f32 %544;
    f32* %546 = getelementptr &(f32* %516)[i64 5];
    store f32* %546 with f32 %545;
    f32* %547 = getelementptr &(f32* %511)[i64 6];
    f32 %548 = load f32* %547;
    f32* %549 = getelementptr &(f32* %513)[i64 6];
    f32 %550 = load f32* %549;
    f32 %551 = fadd f32 %548, f32 %550;
    f32* %552 = getelementptr &(f32* %516)[i64 6];
    store f32* %552 with f32 %551;
    f32* %553 = getelementptr &(f32* %511)[i64 7];
    f32 %554 = load f32* %553;
    f32* %555 = getelementptr &(f32* %513)[i64 7];
    f32 %556 = load f32* %555;
    f32 %557 = fadd f32 %554, f32 %556;
    f32* %558 = getelementptr &(f32* %516)[i64 7];
    store f32* %558 with f32 %557;
    i32 %559 = add i32 %510, i32 8;
    i1 %560 = icmp slt i32 %559, i32 262;
    cbr i1 %560(prob = 0.969697), ^while.body10, ^while.body11;
  ^while.body11 {scalar}:
    i32 %561 = phi [^while.body10, i32 %559] [^while.body11, i32 %568];
    f32* %562 = getelementptr &([270 * f32]* %487)[i64 0][i32 %561];
    f32 %563 = load f32* %562;
    f32* %564 = getelementptr &([270 * f32]* %488)[i64 0][i32 %561];
    f32 %565 = load f32* %564;
    f32 %566 = fadd f32 %563, f32 %565;
    f32* %567 = getelementptr &([270 * f32]* %486)[i64 0][i32 %561];
    store f32* %567 with f32 %566;
    i32 %568 = add i32 %561, i32 1;
    i1 %569 = icmp slt i32 %568, i32 270;
    cbr i1 %569(prob = 0.875), ^while.body11, ^b5;
  ^b5:
    i32 %570 = add i32 %483, i32 1;
    ubr ^while.header5;
}
