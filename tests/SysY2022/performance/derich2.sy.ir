internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal func @newPow(f32 %num, i32 %n, i32* %0, i32* %1, f32* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = scmp lt i32 %n, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i1 %4 = scmp eq i32 %n, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then1, ^if.then2;
^if.then:
    i32 %5 = neg i32 %n;
    f32 %6 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %5, i32* %0, i32* %1, f32* %2);
    f32 %7 = fdiv f32 1, f32 %6;
    ret f32 %7;
^if.then1:
    ret f32 1;
^if.then2:
    i32 %8 = add i32 %n, i32 -1;
    f32 %9 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %8, i32* %0, i32* %1, f32* %2);
    f32 %10 = fmul f32 %num, f32 %9;
    ret f32 %10;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %ym1 = alloc f32;
    f32* %xp1 = alloc f32;
    f32* %tp1 = alloc f32;
    f32* %yp1 = alloc f32;
    f32* %a1 = alloc f32;
    f32* %a2 = alloc f32;
    f32* %a3 = alloc f32;
    f32* %a4 = alloc f32;
    f32* %a5 = alloc f32;
    f32* %a6 = alloc f32;
    f32* %a7 = alloc f32;
    f32* %a8 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %b2 = alloc f32;
    f32* %c1 = alloc f32;
    f32* %c2 = alloc f32;
    f32* %alpha = alloc f32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    store i32* %w with i32 512;
    store i32* %h with i32 270;
    store f32* %alpha with f32 0.25;
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    f32* %1 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    i32 %3 = load i32* %w;
    i32 %4 = load i32* %h;
    f32 %5 = load f32* %alpha;
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %6 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* @my_y1)[i64 0][i64 0];
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* @my_y2)[i64 0][i64 0];
    f32 %9 = fneg f32 %5;
    f32 %10 = fdiv f32 %9, f32 256;
    f32 %11 = fadd f32 1, f32 %10;
    f32 %12 = fmul f32 %11, f32 %11;
    f32 %13 = fmul f32 %12, f32 %12;
    f32 %14 = fmul f32 %13, f32 %13;
    f32 %15 = fmul f32 %14, f32 %14;
    f32 %16 = fmul f32 %15, f32 %15;
    f32 %17 = fmul f32 %16, f32 %16;
    f32 %18 = fmul f32 %17, f32 %17;
    f32 %19 = fmul f32 %18, f32 %18;
    f32 %20 = fsub f32 1, f32 %19;
    f32 %21 = fmul f32 %20, f32 %20;
    f32 %22 = fmul f32 2, f32 %5;
    f32 %23 = fmul f32 %22, f32 %19;
    f32 %24 = fadd f32 1, f32 %23;
    f32 %25 = fdiv f32 %22, f32 256;
    f32 %26 = fadd f32 1, f32 %25;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fmul f32 %28, f32 %28;
    f32 %30 = fmul f32 %29, f32 %29;
    f32 %31 = fmul f32 %30, f32 %30;
    f32 %32 = fmul f32 %31, f32 %31;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fmul f32 %33, f32 %33;
    f32 %35 = fsub f32 %24, f32 %34;
    f32 %36 = fdiv f32 %21, f32 %35;
    store f32* %a1 with f32 %36;
    store f32* %a5 with f32 %36;
    f32 %37 = fmul f32 %36, f32 %19;
    f32 %38 = fsub f32 %5, f32 1;
    f32 %39 = fmul f32 %37, f32 %38;
    store f32* %a6 with f32 %39;
    store f32* %a2 with f32 %39;
    f32 %40 = fadd f32 %5, f32 1;
    f32 %41 = fmul f32 %37, f32 %40;
    store f32* %a7 with f32 %41;
    store f32* %a3 with f32 %41;
    f32 %42 = fneg f32 %36;
    f32 %43 = fmul f32 -2, f32 %5;
    f32 %44 = fdiv f32 %43, f32 256;
    f32 %45 = fadd f32 1, f32 %44;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fmul f32 %48, f32 %48;
    f32 %50 = fmul f32 %49, f32 %49;
    f32 %51 = fmul f32 %50, f32 %50;
    f32 %52 = fmul f32 %51, f32 %51;
    f32 %53 = fmul f32 %52, f32 %52;
    f32 %54 = fmul f32 %42, f32 %53;
    store f32* %a8 with f32 %54;
    store f32* %a4 with f32 %54;
    i32 %55 = f2s f32 %9 to i32;
    f32 %56 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 2, i32 %55, i32* %w, i32* %h, f32* %alpha);
    store f32* %b1 with f32 %56;
    f32 %57 = fneg f32 %53;
    store f32* %b2 with f32 %57;
    store f32* %c1 with f32 1;
    store f32* %c2 with f32 1;
    i32 %58 = add i32 %4, i32 -1;
    i32 %59 = add i32 %3, i32 -1;
    ubr ^while.header;
^while.header:
    f32 %60 = phi [^b, f32 %90] [^entry, f32 1];
    f32 %61 = phi [^b, f32 %91] [^entry, f32 1];
    f32 %62 = phi [^b, f32 %92] [^entry, f32 %57];
    f32 %63 = phi [^b, f32 %93] [^entry, f32 %56];
    f32 %64 = phi [^b, f32 %94] [^entry, f32 %54];
    f32 %65 = phi [^b, f32 %95] [^entry, f32 %41];
    f32 %66 = phi [^b, f32 %96] [^entry, f32 %39];
    f32 %67 = phi [^b, f32 %97] [^entry, f32 %36];
    f32 %68 = phi [^b, f32 %98] [^entry, f32 %54];
    f32 %69 = phi [^b, f32 %99] [^entry, f32 %41];
    f32 %70 = phi [^b, f32 %100] [^entry, f32 %39];
    f32 %71 = phi [^b, f32 %101] [^entry, f32 %36];
    i32 %72 = phi [^b, i32 %144] [^entry, i32 0];
    i1 %73 = scmp lt i32 %72, i32 %3;
    cbr i1 %73(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    [270 * f32]* %74 = getelementptr &([270 * f32]* %0)[i32 %72];
    [270 * f32]* %75 = getelementptr &([270 * f32]* %7)[i32 %72];
    store f32* %ym1 with f32 0;
    ubr ^while.header2;
^while.header1:
    f32 %76 = phi [^while.header, f32 %60] [^b1, f32 %145];
    f32 %77 = phi [^while.header, f32 %61] [^b1, f32 %146];
    f32 %78 = phi [^while.header, f32 %62] [^b1, f32 %147];
    f32 %79 = phi [^while.header, f32 %63] [^b1, f32 %148];
    f32 %80 = phi [^while.header, f32 %64] [^b1, f32 %149];
    f32 %81 = phi [^while.header, f32 %65] [^b1, f32 %150];
    f32 %82 = phi [^while.header, f32 %66] [^b1, f32 %151];
    f32 %83 = phi [^while.header, f32 %67] [^b1, f32 %152];
    f32 %84 = phi [^while.header, f32 %68] [^b1, f32 %153];
    f32 %85 = phi [^while.header, f32 %69] [^b1, f32 %154];
    i32 %86 = phi [^while.header, i32 0] [^b1, i32 %203];
    i1 %87 = scmp lt i32 %86, i32 %3;
    cbr i1 %87(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    [270 * f32]* %88 = getelementptr &([270 * f32]* %0)[i32 %86];
    [270 * f32]* %89 = getelementptr &([270 * f32]* %8)[i32 %86];
    store f32* %yp1 with f32 0;
    store f32* %xp1 with f32 0;
    ubr ^while.header4;
^while.header2:
    f32 %90 = phi [^while.body2, f32 %130] [^while.body, f32 %60];
    f32 %91 = phi [^while.body2, f32 %131] [^while.body, f32 %61];
    f32 %92 = phi [^while.body2, f32 %132] [^while.body, f32 %62];
    f32 %93 = phi [^while.body2, f32 %133] [^while.body, f32 %63];
    f32 %94 = phi [^while.body2, f32 %134] [^while.body, f32 %64];
    f32 %95 = phi [^while.body2, f32 %135] [^while.body, f32 %65];
    f32 %96 = phi [^while.body2, f32 %136] [^while.body, f32 %66];
    f32 %97 = phi [^while.body2, f32 %137] [^while.body, f32 %67];
    f32 %98 = phi [^while.body2, f32 %138] [^while.body, f32 %68];
    f32 %99 = phi [^while.body2, f32 %139] [^while.body, f32 %69];
    f32 %100 = phi [^while.body2, f32 %140] [^while.body, f32 %70];
    f32 %101 = phi [^while.body2, f32 %141] [^while.body, f32 %71];
    f32 %102 = phi [^while.body2, f32 %142] [^while.body, f32 0];
    f32 %103 = phi [^while.body2, f32 %129] [^while.body, f32 0];
    f32 %104 = phi [^while.body2, f32 %122] [^while.body, f32 0];
    i32 %105 = phi [^while.body2, i32 %143] [^while.body, i32 0];
    i1 %106 = scmp lt i32 %105, i32 %4;
    cbr i1 %106(prob = 0.97), ^while.body2, ^b;
^while.header3:
    f32 %107 = phi [^while.header1, f32 %76] [^b2, f32 %161];
    f32 %108 = phi [^while.header1, f32 %77] [^b2, f32 %162];
    f32 %109 = phi [^while.header1, f32 %78] [^b2, f32 %163];
    f32 %110 = phi [^while.header1, f32 %79] [^b2, f32 %164];
    f32 %111 = phi [^while.header1, f32 %80] [^b2, f32 %165];
    f32 %112 = phi [^while.header1, f32 %81] [^b2, f32 %166];
    f32 %113 = phi [^while.header1, f32 %82] [^b2, f32 %167];
    f32 %114 = phi [^while.header1, f32 %83] [^b2, f32 %168];
    i32 %115 = phi [^while.header1, i32 0] [^b2, i32 %220];
    i1 %116 = scmp lt i32 %115, i32 %3;
    [270 * f32]* %117 = getelementptr &([270 * f32]* %6)[i32 %115];
    [270 * f32]* %118 = getelementptr &([270 * f32]* %7)[i32 %115];
    [270 * f32]* %119 = getelementptr &([270 * f32]* %8)[i32 %115];
    cbr i1 %116(prob = 0.97), ^while.header5, ^while.header6;
^while.body2:
    f32* %120 = getelementptr &([270 * f32]* %75)[i64 0][i32 %105];
    f32* %121 = getelementptr &([270 * f32]* %74)[i64 0][i32 %105];
    f32 %122 = load f32* %121;
    f32 %123 = fmul f32 %101, f32 %122;
    f32 %124 = fmul f32 %100, f32 %104;
    f32 %125 = fadd f32 %123, f32 %124;
    f32 %126 = fmul f32 %93, f32 %103;
    f32 %127 = fadd f32 %125, f32 %126;
    f32 %128 = fmul f32 %92, f32 %102;
    f32 %129 = fadd f32 %127, f32 %128;
    store f32* %120 with f32 %129;
    f32 %130 = load f32* %c2;
    f32 %131 = load f32* %c1;
    f32 %132 = load f32* %b2;
    f32 %133 = load f32* %b1;
    f32 %134 = load f32* %a8;
    f32 %135 = load f32* %a7;
    f32 %136 = load f32* %a6;
    f32 %137 = load f32* %a5;
    f32 %138 = load f32* %a4;
    f32 %139 = load f32* %a3;
    f32 %140 = load f32* %a2;
    f32 %141 = load f32* %a1;
    f32 %142 = load f32* %ym1;
    store f32* %ym1 with f32 %129;
    i32 %143 = add i32 %105, i32 1;
    ubr ^while.header2;
^b:
    i32 %144 = add i32 %72, i32 1;
    ubr ^while.header;
^while.header4:
    f32 %145 = phi [^while.body3, f32 %188] [^while.body1, f32 %76];
    f32 %146 = phi [^while.body3, f32 %189] [^while.body1, f32 %77];
    f32 %147 = phi [^while.body3, f32 %190] [^while.body1, f32 %78];
    f32 %148 = phi [^while.body3, f32 %191] [^while.body1, f32 %79];
    f32 %149 = phi [^while.body3, f32 %192] [^while.body1, f32 %80];
    f32 %150 = phi [^while.body3, f32 %193] [^while.body1, f32 %81];
    f32 %151 = phi [^while.body3, f32 %194] [^while.body1, f32 %82];
    f32 %152 = phi [^while.body3, f32 %195] [^while.body1, f32 %83];
    f32 %153 = phi [^while.body3, f32 %196] [^while.body1, f32 %84];
    f32 %154 = phi [^while.body3, f32 %197] [^while.body1, f32 %85];
    f32 %155 = phi [^while.body3, f32 %198] [^while.body1, f32 0];
    f32 %156 = phi [^while.body3, f32 %187] [^while.body1, f32 0];
    f32 %157 = phi [^while.body3, f32 %199] [^while.body1, f32 0];
    f32 %158 = phi [^while.body3, f32 %201] [^while.body1, f32 0];
    i32 %159 = phi [^while.body3, i32 %202] [^while.body1, i32 %58];
    i1 %160 = scmp gt i32 %159, i32 -1;
    cbr i1 %160(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    f32 %161 = phi [^while.header3, f32 %107] [^while.body4, f32 %211];
    f32 %162 = phi [^while.header3, f32 %108] [^while.body4, f32 %212];
    f32 %163 = phi [^while.header3, f32 %109] [^while.body4, f32 %213];
    f32 %164 = phi [^while.header3, f32 %110] [^while.body4, f32 %214];
    f32 %165 = phi [^while.header3, f32 %111] [^while.body4, f32 %215];
    f32 %166 = phi [^while.header3, f32 %112] [^while.body4, f32 %216];
    f32 %167 = phi [^while.header3, f32 %113] [^while.body4, f32 %217];
    f32 %168 = phi [^while.header3, f32 %114] [^while.body4, f32 %218];
    i32 %169 = phi [^while.header3, i32 0] [^while.body4, i32 %219];
    i1 %170 = scmp lt i32 %169, i32 %4;
    cbr i1 %170(prob = 0.97), ^while.body4, ^b2;
^while.header6:
    f32 %171 = phi [^while.header3, f32 %107] [^b3, f32 %228];
    f32 %172 = phi [^while.header3, f32 %109] [^b3, f32 %229];
    f32 %173 = phi [^while.header3, f32 %110] [^b3, f32 %230];
    f32 %174 = phi [^while.header3, f32 %111] [^b3, f32 %231];
    f32 %175 = phi [^while.header3, f32 %112] [^b3, f32 %232];
    f32 %176 = phi [^while.header3, f32 %113] [^b3, f32 %233];
    f32 %177 = phi [^while.header3, f32 %114] [^b3, f32 %234];
    i32 %178 = phi [^while.header3, i32 0] [^b3, i32 %267];
    i1 %179 = scmp lt i32 %178, i32 %4;
    cbr i1 %179(prob = 0.97), ^while.body5, ^while.header7;
^while.body3:
    f32* %180 = getelementptr &([270 * f32]* %89)[i64 0][i32 %159];
    f32 %181 = fmul f32 %154, f32 %158;
    f32 %182 = fmul f32 %153, f32 %157;
    f32 %183 = fadd f32 %181, f32 %182;
    f32 %184 = fmul f32 %148, f32 %156;
    f32 %185 = fadd f32 %183, f32 %184;
    f32 %186 = fmul f32 %147, f32 %155;
    f32 %187 = fadd f32 %185, f32 %186;
    store f32* %180 with f32 %187;
    f32 %188 = load f32* %c2;
    f32 %189 = load f32* %c1;
    f32 %190 = load f32* %b2;
    f32 %191 = load f32* %b1;
    f32 %192 = load f32* %a8;
    f32 %193 = load f32* %a7;
    f32 %194 = load f32* %a6;
    f32 %195 = load f32* %a5;
    f32 %196 = load f32* %a4;
    f32 %197 = load f32* %a3;
    f32 %198 = load f32* %yp1;
    f32 %199 = load f32* %xp1;
    f32* %200 = getelementptr &([270 * f32]* %88)[i64 0][i32 %159];
    f32 %201 = load f32* %200;
    store f32* %xp1 with f32 %201;
    store f32* %yp1 with f32 %187;
    i32 %202 = add i32 %159, i32 -1;
    ubr ^while.header4;
^b1:
    i32 %203 = add i32 %86, i32 1;
    ubr ^while.header1;
^while.body4:
    f32* %204 = getelementptr &([270 * f32]* %117)[i64 0][i32 %169];
    f32* %205 = getelementptr &([270 * f32]* %118)[i64 0][i32 %169];
    f32 %206 = load f32* %205;
    f32* %207 = getelementptr &([270 * f32]* %119)[i64 0][i32 %169];
    f32 %208 = load f32* %207;
    f32 %209 = fadd f32 %206, f32 %208;
    f32 %210 = fmul f32 %162, f32 %209;
    store f32* %204 with f32 %210;
    f32 %211 = load f32* %c2;
    f32 %212 = load f32* %c1;
    f32 %213 = load f32* %b2;
    f32 %214 = load f32* %b1;
    f32 %215 = load f32* %a8;
    f32 %216 = load f32* %a7;
    f32 %217 = load f32* %a6;
    f32 %218 = load f32* %a5;
    i32 %219 = add i32 %169, i32 1;
    ubr ^while.header5;
^b2:
    i32 %220 = add i32 %115, i32 1;
    ubr ^while.header3;
^while.body5:
    store f32* %ym1 with f32 0;
    ubr ^while.header8;
^while.header7:
    f32 %221 = phi [^while.header6, f32 %171] [^b4, f32 %268];
    f32 %222 = phi [^while.header6, f32 %172] [^b4, f32 %269];
    f32 %223 = phi [^while.header6, f32 %173] [^b4, f32 %270];
    f32 %224 = phi [^while.header6, f32 %174] [^b4, f32 %271];
    f32 %225 = phi [^while.header6, f32 %175] [^b4, f32 %272];
    i32 %226 = phi [^while.header6, i32 0] [^b4, i32 %304];
    i1 %227 = scmp lt i32 %226, i32 %4;
    cbr i1 %227(prob = 0.97), ^while.body6, ^while.header9;
^while.body6:
    store f32* %tp1 with f32 0;
    store f32* %yp1 with f32 0;
    ubr ^while.header10;
^while.header8:
    f32 %228 = phi [^while.body7, f32 %258] [^while.body5, f32 %171];
    f32 %229 = phi [^while.body7, f32 %259] [^while.body5, f32 %172];
    f32 %230 = phi [^while.body7, f32 %260] [^while.body5, f32 %173];
    f32 %231 = phi [^while.body7, f32 %261] [^while.body5, f32 %174];
    f32 %232 = phi [^while.body7, f32 %262] [^while.body5, f32 %175];
    f32 %233 = phi [^while.body7, f32 %263] [^while.body5, f32 %176];
    f32 %234 = phi [^while.body7, f32 %264] [^while.body5, f32 %177];
    f32 %235 = phi [^while.body7, f32 %265] [^while.body5, f32 0];
    f32 %236 = phi [^while.body7, f32 %257] [^while.body5, f32 0];
    f32 %237 = phi [^while.body7, f32 %250] [^while.body5, f32 0];
    i32 %238 = phi [^while.body7, i32 %266] [^while.body5, i32 0];
    i1 %239 = scmp lt i32 %238, i32 %3;
    cbr i1 %239(prob = 0.97), ^while.body7, ^b3;
^while.header9:
    f32 %240 = phi [^while.header7, f32 %221] [^b5, f32 %279];
    i32 %241 = phi [^while.header7, i32 0] [^b5, i32 %314];
    i1 %242 = scmp lt i32 %241, i32 %3;
    [270 * f32]* %243 = getelementptr &([270 * f32]* %6)[i32 %241];
    [270 * f32]* %244 = getelementptr &([270 * f32]* %7)[i32 %241];
    [270 * f32]* %245 = getelementptr &([270 * f32]* %8)[i32 %241];
    cbr i1 %242(prob = 0.97), ^while.header11, ^entry1;
^while.body7:
    [270 * f32]* %246 = getelementptr &([270 * f32]* %7)[i32 %238];
    f32* %247 = getelementptr &([270 * f32]* %246)[i64 0][i32 %178];
    [270 * f32]* %248 = getelementptr &([270 * f32]* %6)[i32 %238];
    f32* %249 = getelementptr &([270 * f32]* %248)[i64 0][i32 %178];
    f32 %250 = load f32* %249;
    f32 %251 = fmul f32 %234, f32 %250;
    f32 %252 = fmul f32 %233, f32 %237;
    f32 %253 = fadd f32 %251, f32 %252;
    f32 %254 = fmul f32 %230, f32 %236;
    f32 %255 = fadd f32 %253, f32 %254;
    f32 %256 = fmul f32 %229, f32 %235;
    f32 %257 = fadd f32 %255, f32 %256;
    store f32* %247 with f32 %257;
    f32 %258 = load f32* %c2;
    f32 %259 = load f32* %b2;
    f32 %260 = load f32* %b1;
    f32 %261 = load f32* %a8;
    f32 %262 = load f32* %a7;
    f32 %263 = load f32* %a6;
    f32 %264 = load f32* %a5;
    f32 %265 = load f32* %ym1;
    store f32* %ym1 with f32 %257;
    i32 %266 = add i32 %238, i32 1;
    ubr ^while.header8;
^b3:
    i32 %267 = add i32 %178, i32 1;
    ubr ^while.header6;
^while.header10:
    f32 %268 = phi [^while.body8, f32 %293] [^while.body6, f32 %221];
    f32 %269 = phi [^while.body8, f32 %294] [^while.body6, f32 %222];
    f32 %270 = phi [^while.body8, f32 %295] [^while.body6, f32 %223];
    f32 %271 = phi [^while.body8, f32 %296] [^while.body6, f32 %224];
    f32 %272 = phi [^while.body8, f32 %297] [^while.body6, f32 %225];
    f32 %273 = phi [^while.body8, f32 %298] [^while.body6, f32 0];
    f32 %274 = phi [^while.body8, f32 %292] [^while.body6, f32 0];
    f32 %275 = phi [^while.body8, f32 %299] [^while.body6, f32 0];
    f32 %276 = phi [^while.body8, f32 %302] [^while.body6, f32 0];
    i32 %277 = phi [^while.body8, i32 %303] [^while.body6, i32 %59];
    i1 %278 = scmp gt i32 %277, i32 -1;
    cbr i1 %278(prob = 0.97), ^while.body8, ^b4;
^while.header11:
    f32 %279 = phi [^while.header9, f32 %240] [^while.body9, f32 %312];
    i32 %280 = phi [^while.header9, i32 0] [^while.body9, i32 %313];
    i1 %281 = scmp lt i32 %280, i32 %4;
    cbr i1 %281(prob = 0.97), ^while.body9, ^b5;
^entry1:
    call (i32) -> void @stoptime(i32 158);
    i32 %282 = mul i32 %4, i32 %3;
    f32* %283 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 %282, f32* %283);
    ret i32 0;
^while.body8:
    [270 * f32]* %284 = getelementptr &([270 * f32]* %8)[i32 %277];
    f32* %285 = getelementptr &([270 * f32]* %284)[i64 0][i32 %226];
    f32 %286 = fmul f32 %272, f32 %276;
    f32 %287 = fmul f32 %271, f32 %275;
    f32 %288 = fadd f32 %286, f32 %287;
    f32 %289 = fmul f32 %270, f32 %274;
    f32 %290 = fadd f32 %288, f32 %289;
    f32 %291 = fmul f32 %269, f32 %273;
    f32 %292 = fadd f32 %290, f32 %291;
    store f32* %285 with f32 %292;
    f32 %293 = load f32* %c2;
    f32 %294 = load f32* %b2;
    f32 %295 = load f32* %b1;
    f32 %296 = load f32* %a8;
    f32 %297 = load f32* %a7;
    f32 %298 = load f32* %yp1;
    f32 %299 = load f32* %tp1;
    [270 * f32]* %300 = getelementptr &([270 * f32]* %6)[i32 %277];
    f32* %301 = getelementptr &([270 * f32]* %300)[i64 0][i32 %226];
    f32 %302 = load f32* %301;
    store f32* %tp1 with f32 %302;
    store f32* %yp1 with f32 %292;
    i32 %303 = add i32 %277, i32 -1;
    ubr ^while.header10;
^b4:
    i32 %304 = add i32 %226, i32 1;
    ubr ^while.header7;
^while.body9:
    f32* %305 = getelementptr &([270 * f32]* %243)[i64 0][i32 %280];
    f32* %306 = getelementptr &([270 * f32]* %244)[i64 0][i32 %280];
    f32 %307 = load f32* %306;
    f32* %308 = getelementptr &([270 * f32]* %245)[i64 0][i32 %280];
    f32 %309 = load f32* %308;
    f32 %310 = fadd f32 %307, f32 %309;
    f32 %311 = fmul f32 %279, f32 %310;
    store f32* %305 with f32 %311;
    f32 %312 = load f32* %c2;
    i32 %313 = add i32 %280, i32 1;
    ubr ^while.header11;
^b5:
    i32 %314 = add i32 %241, i32 1;
    ubr ^while.header9;
}
