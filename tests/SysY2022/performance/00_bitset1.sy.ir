internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 56);
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @a to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 64);
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @a to [10000 * i32]*;
    i32* %6 = getelementptr &([10000 * i32]* %5)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 10000, i32* %6);
    ret i32 0;
  ^while.body:
    i32 %7 = phi [^prebody, i32 %2] [^while.body1, i32 %20];
    i32 %8 = phi [^prebody, i32 %0] [^while.body1, i32 %31];
    i32 %9 = mul i32 %7, i32 19971231;
    i32 %10 = add i32 %9, i32 19981013;
    i32 %11 = srem i32 %10, i32 1000000007;
    i1 %12 = icmp slt i32 %11, i32 0;
    i32 %13 = add i32 %11, i32 1000000007;
    i32 %14 = select i1 %12 ? i32 %13 : i32 %11;
    i32 %15 = mul i32 %14, i32 19971231;
    i32 %16 = add i32 %15, i32 19981013;
    i32 %17 = srem i32 %16, i32 1000000007;
    i1 %18 = icmp slt i32 %17, i32 0;
    i32 %19 = add i32 %17, i32 1000000007;
    i32 %20 = select i1 %18 ? i32 %19 : i32 %17;
    i32 %21 = and i32 %20, i32 1;
    i32 %22 = srem i32 %14, i32 300000;
    i32 %23 = sdiv i32 %22, i32 30;
    i32* %24 = getelementptr &(i32* %4)[i32 %23];
    i32 %25 = load i32* %24;
    i32 %26 = srem i32 %22, i32 30;
    i32 %27 = shl i32 1, i32 %26;
    i32 %28 = sdiv i32 %25, i32 %27;
    i32 %29 = srem i32 %28, i32 2;
    i1 %30 = icmp neq i32 %21, i32 %29;
    i32 %31 = add i32 %8, i32 -1;
    cbr i1 %30(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %32 = and i32 %28, i32 1;
    i32 %33 = xor i32 %21, i32 1;
    i32 %34 = or i32 %32, i32 %33;
    i1 %35 = icmp eq i32 %34, i32 0;
    i32 %36 = select i1 %35 ? i32 %27 : i32 0;
    i32 %37 = sub i32 %36, i32 %27;
    i32 %38 = and i32 %28, i32 -2147483647;
    i32 %39 = xor i32 %38, i32 1;
    i32 %40 = or i32 %21, i32 %39;
    i1 %41 = icmp eq i32 %40, i32 0;
    i32 %42 = select i1 %41 ? i32 %37 : i32 %36;
    i32 %43 = add i32 %25, i32 %42;
    store i32* %24 with i32 %43;
    ubr ^while.body1;
  ^b1:
    store i32* %24 with i32 %25;
    ubr ^while.body1;
  ^while.body1:
    i1 %44 = icmp sgt i32 %31, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body, ^b;
}
