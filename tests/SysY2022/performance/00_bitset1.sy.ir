internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 56);
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @a to [10000 * i32]*;
    i32* %4 = getelementptr &([10000 * i32]* %3)[i64 0][i64 0];
    cbr i1 %1(prob = 0.992248), ^while.body, ^b;
  ^while.body:
    i32 %5 = phi [^entry, i32 %2] [^while.body1, i32 %18];
    i32 %6 = phi [^entry, i32 %0] [^while.body1, i32 %29];
    i32 %7 = mul i32 %5, i32 19971231;
    i32 %8 = add i32 %7, i32 19981013;
    i32 %9 = srem i32 %8, i32 1000000007;
    i1 %10 = icmp slt i32 %9, i32 0;
    i32 %11 = add i32 %9, i32 1000000007;
    i32 %12 = select i1 %10 ? i32 %11 : i32 %9;
    i32 %13 = mul i32 %12, i32 19971231;
    i32 %14 = add i32 %13, i32 19981013;
    i32 %15 = srem i32 %14, i32 1000000007;
    i1 %16 = icmp slt i32 %15, i32 0;
    i32 %17 = add i32 %15, i32 1000000007;
    i32 %18 = select i1 %16 ? i32 %17 : i32 %15;
    i32 %19 = and i32 %18, i32 1;
    i32 %20 = srem i32 %12, i32 300000;
    i32 %21 = sdiv i32 %20, i32 30;
    i32* %22 = getelementptr &(i32* %4)[i32 %21];
    i32 %23 = load i32* %22;
    i32 %24 = srem i32 %20, i32 30;
    i32 %25 = shl i32 1, i32 %24;
    i32 %26 = sdiv i32 %23, i32 %25;
    i32 %27 = srem i32 %26, i32 2;
    i1 %28 = icmp neq i32 %19, i32 %27;
    i32 %29 = add i32 %6, i32 -1;
    cbr i1 %28(prob = 0.5), ^if.then, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 10000, i32* %4);
    ret i32 0;
  ^if.then:
    i32 %30 = and i32 %26, i32 1;
    i32 %31 = xor i32 %19, i32 1;
    i32 %32 = or i32 %30, i32 %31;
    i1 %33 = icmp eq i32 %32, i32 0;
    i32 %34 = select i1 %33 ? i32 %25 : i32 0;
    i32 %35 = sub i32 %34, i32 %25;
    i32 %36 = and i32 %26, i32 -2147483647;
    i32 %37 = xor i32 %36, i32 1;
    i32 %38 = or i32 %19, i32 %37;
    i1 %39 = icmp eq i32 %38, i32 0;
    i32 %40 = select i1 %39 ? i32 %35 : i32 %34;
    i32 %41 = add i32 %23, i32 %40;
    store i32* %22 with i32 %41;
    ubr ^while.body1;
  ^b1:
    store i32* %22 with i32 %23;
    ubr ^while.body1;
  ^while.body1:
    i1 %42 = icmp sgt i32 %29, i32 0;
    cbr i1 %42(prob = 0.992248), ^while.body, ^b;
}
