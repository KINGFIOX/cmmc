internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 10015);
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b1, i32 %18] [^entry, i32 0];
    i32 %2 = phi [^b1, i32 %19] [^entry, i32 0];
    i32 %3 = phi [^b1, i32 %11] [^entry, i32 %0];
    i32 %4 = phi [^b1, i32 %11] [^entry, i32 %0];
    i32 %5 = phi [^b1, i32 %19] [^entry, i32 0];
    i1 %6 = scmp lt i32 %5, i32 %4;
    cbr i1 %6(prob = 0.97), ^while.header1, ^b;
^while.header1:
    i32 %7 = phi [^while.header, i32 %1] [^while.body, i32 %7];
    i32 %8 = phi [^while.header, i32 %2] [^while.body, i32 %8];
    i32 %9 = phi [^while.header, i32 0] [^while.body, i32 %14];
    i32 %10 = phi [^while.header, i32 0] [^while.body, i32 %15];
    i32 %11 = phi [^while.header, i32 %3] [^while.body, i32 %11];
    i32 %12 = phi [^while.header, i32 0] [^while.body, i32 %15];
    i1 %13 = scmp lt i32 %12, i32 60;
    cbr i1 %13(prob = 0.97), ^while.body, ^b1;
^b:
    call (i32) -> void @stoptime(i32 10030);
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body:
    i32 %14 = add i32 %9, i32 %8;
    i32 %15 = add i32 %10, i32 1;
    ubr ^while.header1;
^b1:
    i32 %16 = sdiv i32 %9, i32 60;
    i32 %17 = add i32 %16, i32 %7;
    i32 %18 = srem i32 %17, i32 536854529;
    i32 %19 = add i32 %8, i32 1;
    ubr ^while.header;
}
