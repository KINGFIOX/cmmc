internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %kernelid = alloc i32;
    i32* %n1 = alloc i32;
    i32* %m = alloc i32;
    i32* %c = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j = alloc i32;
    i32* %i2 = alloc i32;
    i32* %task = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %c1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %c1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %n2 with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %m1 with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %c1;
    i32 %8 = load i32* %n2;
    i32 %9 = load i32* %m1;
    store i32* %task with i32 %6;
    call (i32) -> void @starttime(i32 109);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body14, i32 %227] [^entry, i32 %7];
    i32 %12 = phi [^while.body14, i32 %228] [^entry, i32 %8];
    i32 %13 = phi [^while.body14, i32 %229] [^entry, i32 %9];
    i32 %14 = phi [^while.body14, i32 %252] [^entry, i32 0];
    i32 %15 = phi [^while.body14, i32 %230] [^entry, i32 %6];
    i32 %16 = phi [^while.body14, i32 %252] [^entry, i32 0];
    i1 %17 = scmp lt i32 %16, i32 %15;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %18 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i32 %14];
    i32 %19 = load i32* %18;
    store i32* %kernelid with i32 %19;
    store i32* %n1 with i32 %12;
    store i32* %m with i32 %13;
    store i32* %c with i32 %11;
    store i32* %i1 with i32 0;
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %20 = mul i32 %13, i32 %12;
    call (i32, i32*) -> void @putarray(i32 %20, i32* %3);
    ret i32 0;
^while.body1:
    i32 %21 = phi [^b16, i32 %211] [^while.body, i32 0];
    i32 %22 = phi [^b16, i32 %184] [^while.body, i32 %11];
    i32 %23 = phi [^b16, i32 %185] [^while.body, i32 %13];
    i32 %24 = phi [^b16, i32 %186] [^while.body, i32 %12];
    i32* %25 = phi [^b16, i32* %139] [^while.body, i32* %10];
    i32* %26 = phi [^b16, i32* %140] [^while.body, i32* %3];
    i32 %27 = phi [^b16, i32 %187] [^while.body, i32 %19];
    store i32* %j with i32 0;
    ubr ^while.body2;
^while.body2:
    i32 %28 = phi [^b14, i32 %188] [^while.body1, i32 0];
    i32 %29 = phi [^b14, i32 %183] [^while.body1, i32 %21];
    i32 %30 = phi [^b14, i32 %184] [^while.body1, i32 %22];
    i32 %31 = phi [^b14, i32 %185] [^while.body1, i32 %23];
    i32 %32 = phi [^b14, i32 %186] [^while.body1, i32 %24];
    i32* %33 = phi [^b14, i32* %139] [^while.body1, i32* %25];
    i32* %34 = phi [^b14, i32* %140] [^while.body1, i32* %26];
    i32 %35 = phi [^b14, i32 %187] [^while.body1, i32 %27];
    i32 %36 = sdiv i32 %30, i32 2;
    i32 %37 = sub i32 %29, i32 %36;
    ubr ^while.body3;
^while.body3:
    i32 %38 = phi [^b11, i32 %152] [^while.body2, i32 %37];
    i32 %39 = phi [^b11, i32 %134] [^while.body2, i32 %28];
    i32 %40 = phi [^b11, i32 %135] [^while.body2, i32 %29];
    i32 %41 = phi [^b11, i32 %136] [^while.body2, i32 %30];
    i32 %42 = phi [^b11, i32 %137] [^while.body2, i32 %31];
    i32 %43 = phi [^b11, i32 %138] [^while.body2, i32 %32];
    i32* %44 = phi [^b11, i32* %139] [^while.body2, i32* %33];
    i32* %45 = phi [^b11, i32* %140] [^while.body2, i32* %34];
    i32 %46 = phi [^b11, i32 %141] [^while.body2, i32 %35];
    i32 %47 = phi [^b11, i32 %142] [^while.body2, i32 0];
    i32 %48 = phi [^b11, i32 %152] [^while.body2, i32 %37];
    i32 %49 = phi [^b11, i32 %136] [^while.body2, i32 %30];
    i32 %50 = phi [^b11, i32 %136] [^while.body2, i32 %30];
    i32 %51 = sdiv i32 %50, i32 2;
    i32 %52 = sub i32 %39, i32 %51;
    ubr ^while.body4;
^while.body4:
    i32 %53 = phi [^while.body8, i32 %133] [^while.body3, i32 %38];
    i32 %54 = phi [^while.body8, i32 %134] [^while.body3, i32 %39];
    i32 %55 = phi [^while.body8, i32 %135] [^while.body3, i32 %40];
    i32 %56 = phi [^while.body8, i32 %136] [^while.body3, i32 %41];
    i32 %57 = phi [^while.body8, i32 %137] [^while.body3, i32 %42];
    i32 %58 = phi [^while.body8, i32 %138] [^while.body3, i32 %43];
    i32* %59 = phi [^while.body8, i32* %139] [^while.body3, i32* %44];
    i32* %60 = phi [^while.body8, i32* %140] [^while.body3, i32* %45];
    i32 %61 = phi [^while.body8, i32 %141] [^while.body3, i32 %46];
    i32 %62 = phi [^while.body8, i32 %62] [^while.body3, i32 %42];
    i32 %63 = phi [^while.body8, i32 %63] [^while.body3, i32 %43];
    i32* %64 = phi [^while.body8, i32* %64] [^while.body3, i32* %45];
    i32 %65 = phi [^while.body8, i32 %142] [^while.body3, i32 %47];
    i32 %66 = phi [^while.body8, i32 %66] [^while.body3, i32 %48];
    i32 %67 = phi [^while.body8, i32 %67] [^while.body3, i32 %39];
    i32 %68 = phi [^while.body8, i32 %68] [^while.body3, i32 %49];
    i32 %69 = phi [^while.body8, i32 %69] [^while.body3, i32 %46];
    i32 %70 = phi [^while.body8, i32 %143] [^while.body3, i32 %52];
    i1 %71 = scmp lt i32 %66, i32 0;
    cbr i1 %71(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %72 = scmp lt i32 %70, i32 0;
    ubr ^b2;
^b2:
    i1 %73 = phi [^while.body4, i1 true] [^b1, i1 %72];
    cbr i1 %73(prob = 0.5), ^b4, ^b3;
^b3:
    i1 %74 = scmp ge i32 %66, i32 %63;
    ubr ^b4;
^b4:
    i1 %75 = phi [^b2, i1 true] [^b3, i1 %74];
    cbr i1 %75(prob = 0.5), ^b6, ^b5;
^b5:
    i1 %76 = scmp ge i32 %70, i32 %62;
    ubr ^b6;
^b6:
    i1 %77 = phi [^b5, i1 %76] [^b4, i1 true];
    cbr i1 %77(prob = 0.5), ^while.body5, ^b7;
^b7:
    i32 %78 = mul i32 %62, i32 %66;
    i32 %79 = add i32 %70, i32 %78;
    i32* %80 = getelementptr &(i32* %64)[i32 %79];
    i32 %81 = load i32* %80;
    ubr ^while.body5;
^while.body5:
    i32 %82 = phi [^b6, i32 0] [^b7, i32 %81];
    i1 %83 = scmp eq i32 %69, i32 0;
    cbr i1 %83(prob = 0.5), ^if.then, ^b8;
^if.then:
    i32 %84 = add i32 %65, i32 %82;
    ubr ^while.header1;
^b8:
    i1 %85 = scmp eq i32 %69, i32 1;
    cbr i1 %85(prob = 0.5), ^while.header2, ^b9;
^while.header1:
    i32 %86 = phi [^while.body6, i32 %114] [^if.then, i32 %84];
    i32 %87 = phi [^while.body6, i32 %87] [^if.then, i32 %53];
    i32 %88 = phi [^while.body6, i32 %88] [^if.then, i32 %54];
    i32 %89 = phi [^while.body6, i32 %89] [^if.then, i32 %55];
    i32 %90 = phi [^while.body6, i32 %90] [^if.then, i32 %56];
    i32 %91 = phi [^while.body6, i32 %91] [^if.then, i32 %57];
    i32 %92 = phi [^while.body6, i32 %92] [^if.then, i32 %58];
    i32* %93 = phi [^while.body6, i32* %93] [^if.then, i32* %59];
    i32* %94 = phi [^while.body6, i32* %94] [^if.then, i32* %60];
    i32 %95 = phi [^while.body6, i32 %95] [^if.then, i32 %61];
    i32 %96 = phi [^if.then, i32 %84] [^while.body6, i32 %114];
    i1 %97 = scmp gt i32 %96, i32 1073741824;
    cbr i1 %97(prob = 0.97), ^while.body6, ^while.header3;
^while.header2:
    i32 %98 = phi [^b8, i32 %65] [^b13, i32 %98];
    i32 %99 = phi [^b8, i32 %82] [^b13, i32 %99];
    i32 %100 = phi [^b8, i32 0] [^b13, i32 %172];
    i32 %101 = phi [^b8, i32 1] [^b13, i32 %173];
    i32 %102 = phi [^b8, i32 %53] [^b13, i32 %102];
    i32 %103 = phi [^b8, i32 %54] [^b13, i32 %103];
    i32 %104 = phi [^b8, i32 %55] [^b13, i32 %104];
    i32 %105 = phi [^b8, i32 %56] [^b13, i32 %105];
    i32 %106 = phi [^b8, i32 %57] [^b13, i32 %106];
    i32 %107 = phi [^b8, i32 %58] [^b13, i32 %107];
    i32* %108 = phi [^b8, i32* %59] [^b13, i32* %108];
    i32* %109 = phi [^b8, i32* %60] [^b13, i32* %109];
    i32 %110 = phi [^b8, i32 %61] [^b13, i32 %110];
    i32 %111 = phi [^b8, i32 1] [^b13, i32 %173];
    i1 %112 = scmp lt i32 %111, i32 1073741824;
    cbr i1 %112(prob = 0.97), ^while.body7, ^while.body8;
^b9:
    i1 %113 = scmp eq i32 %69, i32 2;
    cbr i1 %113(prob = 0.5), ^if.then1, ^b10;
^while.body6:
    i32 %114 = add i32 %86, i32 -1073741824;
    ubr ^while.header1;
^while.header3:
    i32 %115 = phi [^while.header1, i32 %86] [^while.body9, i32 %148];
    i32 %116 = phi [^while.header1, i32 %87] [^while.body9, i32 %116];
    i32 %117 = phi [^while.header1, i32 %88] [^while.body9, i32 %117];
    i32 %118 = phi [^while.header1, i32 %89] [^while.body9, i32 %118];
    i32 %119 = phi [^while.header1, i32 %90] [^while.body9, i32 %119];
    i32 %120 = phi [^while.header1, i32 %91] [^while.body9, i32 %120];
    i32 %121 = phi [^while.header1, i32 %92] [^while.body9, i32 %121];
    i32* %122 = phi [^while.header1, i32* %93] [^while.body9, i32* %122];
    i32* %123 = phi [^while.header1, i32* %94] [^while.body9, i32* %123];
    i32 %124 = phi [^while.header1, i32 %95] [^while.body9, i32 %124];
    i32 %125 = phi [^while.header1, i32 %86] [^while.body9, i32 %148];
    i1 %126 = scmp lt i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^while.body9, ^while.body8;
^while.body7:
    i32 %127 = sdiv i32 %98, i32 %101;
    i32 %128 = srem i32 %127, i32 2;
    i32 %129 = sdiv i32 %99, i32 %101;
    i32 %130 = srem i32 %129, i32 2;
    i1 %131 = scmp eq i32 %128, i32 %130;
    cbr i1 %131(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i1 %132 = scmp gt i32 %65, i32 %82;
    cbr i1 %132(prob = 0.5), ^while.body8, ^if.else1;
^while.body8:
    i32 %133 = phi [^while.header5, i32 %197] [^while.header4, i32 %160] [^while.header3, i32 %116] [^while.header2, i32 %102] [^b12, i32 %53] [^if.else1, i32 %53] [^if.then1, i32 %53];
    i32 %134 = phi [^while.header5, i32 %198] [^while.header4, i32 %161] [^while.header3, i32 %117] [^while.header2, i32 %103] [^b12, i32 %54] [^if.else1, i32 %54] [^if.then1, i32 %54];
    i32 %135 = phi [^while.header5, i32 %199] [^while.header4, i32 %162] [^while.header3, i32 %118] [^while.header2, i32 %104] [^b12, i32 %55] [^if.else1, i32 %55] [^if.then1, i32 %55];
    i32 %136 = phi [^while.header5, i32 %200] [^while.header4, i32 %163] [^while.header3, i32 %119] [^while.header2, i32 %105] [^b12, i32 %56] [^if.else1, i32 %56] [^if.then1, i32 %56];
    i32 %137 = phi [^while.header5, i32 %201] [^while.header4, i32 %164] [^while.header3, i32 %120] [^while.header2, i32 %106] [^b12, i32 %57] [^if.else1, i32 %57] [^if.then1, i32 %57];
    i32 %138 = phi [^while.header5, i32 %202] [^while.header4, i32 %165] [^while.header3, i32 %121] [^while.header2, i32 %107] [^b12, i32 %58] [^if.else1, i32 %58] [^if.then1, i32 %58];
    i32* %139 = phi [^while.header5, i32* %203] [^while.header4, i32* %166] [^while.header3, i32* %122] [^while.header2, i32* %108] [^b12, i32* %59] [^if.else1, i32* %59] [^if.then1, i32* %59];
    i32* %140 = phi [^while.header5, i32* %204] [^while.header4, i32* %167] [^while.header3, i32* %123] [^while.header2, i32* %109] [^b12, i32* %60] [^if.else1, i32* %60] [^if.then1, i32* %60];
    i32 %141 = phi [^while.header5, i32 %205] [^while.header4, i32 %168] [^while.header3, i32 %124] [^while.header2, i32 %110] [^b12, i32 %61] [^if.else1, i32 %61] [^if.then1, i32 %61];
    i32 %142 = phi [^while.header5, i32 %195] [^while.header4, i32 %158] [^while.header3, i32 %115] [^while.header2, i32 %100] [^b12, i32 0] [^if.else1, i32 %82] [^if.then1, i32 %65];
    i32 %143 = add i32 %70, i32 1;
    i32 %144 = sdiv i32 %68, i32 2;
    i32 %145 = add i32 %67, i32 %144;
    i1 %146 = scmp ge i32 %143, i32 %145;
    cbr i1 %146(prob = 0.5), ^b11, ^while.body4;
^b10:
    i1 %147 = scmp eq i32 %69, i32 3;
    cbr i1 %147(prob = 0.5), ^while.header4, ^b12;
^while.body9:
    i32 %148 = add i32 %115, i32 1073741824;
    ubr ^while.header3;
^if.then2:
    i32 %149 = mul i32 %100, i32 2;
    ubr ^b13;
^if.else:
    i32 %150 = mul i32 %100, i32 2;
    i32 %151 = add i32 %150, i32 1;
    ubr ^b13;
^if.else1:
    ubr ^while.body8;
^b11:
    i32 %152 = add i32 %133, i32 1;
    i32 %153 = sdiv i32 %136, i32 2;
    i32 %154 = add i32 %153, i32 %135;
    i1 %155 = scmp ge i32 %152, i32 %154;
    cbr i1 %155(prob = 0.5), ^b14, ^while.body3;
^while.header4:
    i32 %156 = phi [^b10, i32 %65] [^b20, i32 %156];
    i32 %157 = phi [^b10, i32 %82] [^b20, i32 %157];
    i32 %158 = phi [^b10, i32 0] [^b20, i32 %225];
    i32 %159 = phi [^b10, i32 1] [^b20, i32 %226];
    i32 %160 = phi [^b10, i32 %53] [^b20, i32 %160];
    i32 %161 = phi [^b10, i32 %54] [^b20, i32 %161];
    i32 %162 = phi [^b10, i32 %55] [^b20, i32 %162];
    i32 %163 = phi [^b10, i32 %56] [^b20, i32 %163];
    i32 %164 = phi [^b10, i32 %57] [^b20, i32 %164];
    i32 %165 = phi [^b10, i32 %58] [^b20, i32 %165];
    i32* %166 = phi [^b10, i32* %59] [^b20, i32* %166];
    i32* %167 = phi [^b10, i32* %60] [^b20, i32* %167];
    i32 %168 = phi [^b10, i32 %61] [^b20, i32 %168];
    i32 %169 = phi [^b10, i32 1] [^b20, i32 %226];
    i1 %170 = scmp lt i32 %169, i32 1073741824;
    cbr i1 %170(prob = 0.97), ^while.body10, ^while.body8;
^b12:
    i1 %171 = scmp eq i32 %69, i32 4;
    cbr i1 %171(prob = 0.5), ^while.header5, ^while.body8;
^b13:
    i32 %172 = phi [^if.else, i32 %151] [^if.then2, i32 %149];
    i32 %173 = mul i32 %101, i32 2;
    ubr ^while.header2;
^b14:
    i32 %174 = mul i32 %137, i32 %135;
    i32 %175 = add i32 %174, i32 %134;
    i32* %176 = getelementptr &(i32* %139)[i32 %175];
    store i32* %176 with i32 %142;
    i32 %177 = load i32* %c1;
    i32 %178 = load i32* %n2;
    i32 %179 = load i32* %m1;
    i32 %180 = load i32* %task;
    i32 %181 = load i32* %i2;
    i32 %182 = load i32* %j;
    i32 %183 = load i32* %i1;
    i32 %184 = load i32* %c;
    i32 %185 = load i32* %m;
    i32 %186 = load i32* %n1;
    i32 %187 = load i32* %kernelid;
    i32 %188 = add i32 %182, i32 1;
    store i32* %j with i32 %188;
    i1 %189 = scmp ge i32 %188, i32 %185;
    cbr i1 %189(prob = 0.5), ^b16, ^while.body2;
^while.body10:
    i32 %190 = sdiv i32 %156, i32 %159;
    i32 %191 = srem i32 %190, i32 2;
    i1 %192 = scmp eq i32 %191, i32 1;
    cbr i1 %192(prob = 0.5), ^b17, ^b15;
^while.header5:
    i32 %193 = phi [^b12, i32 %65] [^b21, i32 %193];
    i32 %194 = phi [^b12, i32 %82] [^b21, i32 %194];
    i32 %195 = phi [^b12, i32 0] [^b21, i32 %253];
    i32 %196 = phi [^b12, i32 1] [^b21, i32 %254];
    i32 %197 = phi [^b12, i32 %53] [^b21, i32 %197];
    i32 %198 = phi [^b12, i32 %54] [^b21, i32 %198];
    i32 %199 = phi [^b12, i32 %55] [^b21, i32 %199];
    i32 %200 = phi [^b12, i32 %56] [^b21, i32 %200];
    i32 %201 = phi [^b12, i32 %57] [^b21, i32 %201];
    i32 %202 = phi [^b12, i32 %58] [^b21, i32 %202];
    i32* %203 = phi [^b12, i32* %59] [^b21, i32* %203];
    i32* %204 = phi [^b12, i32* %60] [^b21, i32* %204];
    i32 %205 = phi [^b12, i32 %61] [^b21, i32 %205];
    i32 %206 = phi [^b12, i32 1] [^b21, i32 %254];
    i1 %207 = scmp lt i32 %206, i32 1073741824;
    cbr i1 %207(prob = 0.97), ^while.body11, ^while.body8;
^b15:
    i32 %208 = sdiv i32 %157, i32 %159;
    i32 %209 = srem i32 %208, i32 2;
    i1 %210 = scmp eq i32 %209, i32 1;
    ubr ^b17;
^b16:
    i32 %211 = add i32 %183, i32 1;
    store i32* %i1 with i32 %211;
    i1 %212 = scmp ge i32 %211, i32 %186;
    cbr i1 %212(prob = 0.5), ^while.body12, ^while.body1;
^b17:
    i1 %213 = phi [^b15, i1 %210] [^while.body10, i1 true];
    cbr i1 %213(prob = 0.5), ^if.then3, ^if.else2;
^while.body11:
    i32 %214 = sdiv i32 %193, i32 %196;
    i32 %215 = srem i32 %214, i32 2;
    i1 %216 = scmp eq i32 %215, i32 1;
    cbr i1 %216(prob = 0.5), ^b18, ^b19;
^while.body12:
    i32 %217 = mul i32 %179, i32 %178;
    store i32* %n with i32 %217;
    store i32* %i with i32 0;
    ubr ^while.header6;
^if.then3:
    i32 %218 = mul i32 %158, i32 2;
    i32 %219 = add i32 %218, i32 1;
    ubr ^b20;
^if.else2:
    i32 %220 = mul i32 %158, i32 2;
    ubr ^b20;
^b18:
    i32 %221 = sdiv i32 %194, i32 %196;
    i32 %222 = srem i32 %221, i32 2;
    i1 %223 = scmp eq i32 %222, i32 1;
    ubr ^b19;
^b19:
    i1 %224 = phi [^b18, i1 %223] [^while.body11, i1 false];
    cbr i1 %224(prob = 0.5), ^if.then4, ^if.else3;
^b20:
    i32 %225 = phi [^if.else2, i32 %220] [^if.then3, i32 %219];
    i32 %226 = mul i32 %159, i32 2;
    ubr ^while.header4;
^while.header6:
    i32 %227 = phi [^while.body13, i32 %244] [^while.body12, i32 %177];
    i32 %228 = phi [^while.body13, i32 %245] [^while.body12, i32 %178];
    i32 %229 = phi [^while.body13, i32 %246] [^while.body12, i32 %179];
    i32 %230 = phi [^while.body13, i32 %247] [^while.body12, i32 %180];
    i32 %231 = phi [^while.body13, i32 %248] [^while.body12, i32 %181];
    i32 %232 = phi [^while.body13, i32 %251] [^while.body12, i32 0];
    i32* %233 = phi [^while.body13, i32* %233] [^while.body12, i32* %10];
    i32* %234 = phi [^while.body13, i32* %234] [^while.body12, i32* %3];
    i32 %235 = phi [^while.body12, i32 %217] [^while.body13, i32 %250];
    i32 %236 = phi [^while.body12, i32 0] [^while.body13, i32 %251];
    i1 %237 = scmp lt i32 %236, i32 %235;
    cbr i1 %237(prob = 0.97), ^while.body13, ^while.body14;
^if.then4:
    i32 %238 = mul i32 %195, i32 2;
    i32 %239 = add i32 %238, i32 1;
    ubr ^b21;
^if.else3:
    i32 %240 = mul i32 %195, i32 2;
    ubr ^b21;
^while.body13:
    i32* %241 = getelementptr &(i32* %234)[i32 %232];
    i32* %242 = getelementptr &(i32* %233)[i32 %232];
    i32 %243 = load i32* %242;
    store i32* %241 with i32 %243;
    i32 %244 = load i32* %c1;
    i32 %245 = load i32* %n2;
    i32 %246 = load i32* %m1;
    i32 %247 = load i32* %task;
    i32 %248 = load i32* %i2;
    i32 %249 = load i32* %i;
    i32 %250 = load i32* %n;
    i32 %251 = add i32 %249, i32 1;
    store i32* %i with i32 %251;
    ubr ^while.header6;
^while.body14:
    i32 %252 = add i32 %231, i32 1;
    store i32* %i2 with i32 %252;
    ubr ^while.header;
^b21:
    i32 %253 = phi [^if.else3, i32 %240] [^if.then4, i32 %239];
    i32 %254 = mul i32 %196, i32 2;
    ubr ^while.header5;
}
