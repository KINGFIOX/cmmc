internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = mul i32 %1, i32 %2;
    i1 %4 = scmp gt i32 %3, i32 0;
    [10000000 * i32]* %5 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %6 = getelementptr &([10000000 * i32]* %5)[i64 0][i64 0];
    i32 %7 = call (i32*) -> i32 @getarray(i32* %6);
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %9 = getelementptr &([10000 * i32]* %8)[i64 0][i64 0];
    i32 %10 = call (i32*) -> i32 @getarray(i32* %9);
    i1 %11 = scmp gt i32 %10, i32 0;
    call (i32) -> void @starttime(i32 109);
    [10000000 * i32]* %12 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %13 = getelementptr &([10000000 * i32]* %12)[i64 0][i64 0];
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %14 = phi [^entry, i32 0] [^while.body11, i32 %110];
    i32* %15 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp eq i32 %16, i32 0;
    i1 %18 = scmp eq i32 %16, i32 1;
    i1 %19 = scmp eq i32 %16, i32 2;
    i1 %20 = scmp eq i32 %16, i32 3;
    ubr ^while.body1;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %3, i32* %6);
    ret i32 0;
  ^while.body1:
    i32 %21 = phi [^while.body, i32 0] [^b15, i32 %88];
    i32 %22 = mul i32 %2, i32 %21;
    ubr ^while.body2;
  ^while.body2:
    i32 %23 = phi [^while.body1, i32 0] [^b14, i32 %78];
    i32 %24 = sdiv i32 %0, i32 2;
    i32 %25 = sub i32 %23, i32 %24;
    i32 %26 = add i32 %23, i32 %24;
    i32 %27 = sub i32 %21, i32 %24;
    i32 %28 = add i32 %21, i32 %24;
    ubr ^while.body3;
  ^while.body3:
    i32 %29 = phi [^while.body2, i32 %27] [^b11, i32 %68];
    i32 %30 = phi [^while.body2, i32 0] [^b11, i32 %61];
    i1 %31 = scmp lt i32 %29, i32 0;
    ubr ^while.body4;
  ^while.body4:
    i32 %32 = phi [^while.body3, i32 %25] [^b9, i32 %62];
    i32 %33 = phi [^while.body3, i32 %30] [^b9, i32 %61];
    cbr i1 %31(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %34 = phi [^while.body4, i32 0] [^b2, i32 0] [^b4, i32 0] [^b6, i32 0] [^b8, i32 %60];
    cbr i1 %17(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i1 %35 = scmp lt i32 %32, i32 0;
    cbr i1 %35(prob = 0.5), ^b1, ^b4;
  ^if.then:
    i32 %36 = add i32 %33, i32 %34;
    i1 %37 = scmp gt i32 %36, i32 1073741824;
    cbr i1 %37(prob = 0.97), ^while.body5, ^indirect;
  ^b3:
    cbr i1 %18(prob = 0.5), ^while.header, ^b5;
  ^b4:
    i1 %38 = scmp ge i32 %29, i32 %1;
    cbr i1 %38(prob = 0.5), ^b1, ^b6;
  ^while.body5:
    i32 %39 = phi [^if.then, i32 %36] [^while.body5, i32 %40];
    i32 %40 = add i32 %39, i32 -1073741824;
    i1 %41 = scmp gt i32 %40, i32 1073741824;
    cbr i1 %41(prob = 0.97), ^while.body5, ^indirect;
  ^while.header:
    i32 %42 = phi [^b3, i32 1] [^b13, i32 %75];
    i32 %43 = phi [^b3, i32 0] [^b13, i32 %74];
    i1 %44 = scmp lt i32 %42, i32 1073741824;
    cbr i1 %44(prob = 0.97), ^while.body6, ^b9;
  ^indirect:
    i32 %45 = phi [^if.then, i32 %36] [^while.body5, i32 %40];
    i1 %46 = scmp lt i32 %45, i32 0;
    cbr i1 %46(prob = 0.97), ^while.body7, ^b7;
  ^b5:
    cbr i1 %19(prob = 0.5), ^if.then1, ^b10;
  ^b6:
    i1 %47 = scmp ge i32 %32, i32 %2;
    cbr i1 %47(prob = 0.5), ^b1, ^b8;
  ^b7:
    i32 %48 = phi [^indirect, i32 %45] [^while.body7, i32 %55];
    ubr ^b9;
  ^while.body6:
    i32 %49 = sdiv i32 %33, i32 %42;
    i32 %50 = srem i32 %49, i32 2;
    i32 %51 = sdiv i32 %34, i32 %42;
    i32 %52 = srem i32 %51, i32 2;
    i1 %53 = scmp eq i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %54 = phi [^indirect, i32 %45] [^while.body7, i32 %55];
    i32 %55 = add i32 %54, i32 1073741824;
    i1 %56 = scmp lt i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body7, ^b7;
  ^b8:
    i32 %57 = mul i32 %29, i32 %2;
    i32 %58 = add i32 %32, i32 %57;
    i32* %59 = getelementptr &(i32* %6)[i32 %58];
    i32 %60 = load i32* %59;
    ubr ^b1;
  ^b9:
    i32 %61 = phi [^while.header, i32 %43] [^b7, i32 %48] [^if.then1, i32 %33] [^if.else1, i32 %34] [^while.header1, i32 %71] [^b12, i32 0] [^while.header2, i32 %84];
    i32 %62 = add i32 %32, i32 1;
    i1 %63 = scmp ge i32 %62, i32 %26;
    cbr i1 %63(prob = 0.5), ^b11, ^while.body4;
  ^if.then1:
    i1 %64 = scmp gt i32 %33, i32 %34;
    cbr i1 %64(prob = 0.5), ^b9, ^if.else1;
  ^b10:
    cbr i1 %20(prob = 0.5), ^while.header1, ^b12;
  ^if.then2:
    i32 %65 = mul i32 %43, i32 2;
    ubr ^b13;
  ^if.else:
    i32 %66 = mul i32 %43, i32 2;
    i32 %67 = add i32 %66, i32 1;
    ubr ^b13;
  ^if.else1:
    ubr ^b9;
  ^b11:
    i32 %68 = add i32 %29, i32 1;
    i1 %69 = scmp ge i32 %68, i32 %28;
    cbr i1 %69(prob = 0.5), ^b14, ^while.body3;
  ^while.header1:
    i32 %70 = phi [^b10, i32 1] [^b17, i32 %97];
    i32 %71 = phi [^b10, i32 0] [^b17, i32 %96];
    i1 %72 = scmp lt i32 %70, i32 1073741824;
    cbr i1 %72(prob = 0.97), ^while.body8, ^b9;
  ^b12:
    i1 %73 = scmp eq i32 %16, i32 4;
    cbr i1 %73(prob = 0.5), ^while.header2, ^b9;
  ^b13:
    i32 %74 = phi [^if.then2, i32 %65] [^if.else, i32 %67];
    i32 %75 = mul i32 %42, i32 2;
    ubr ^while.header;
  ^b14:
    i32 %76 = add i32 %23, i32 %22;
    i32* %77 = getelementptr &(i32* %13)[i32 %76];
    store i32* %77 with i32 %61;
    i32 %78 = add i32 %23, i32 1;
    i1 %79 = scmp ge i32 %78, i32 %2;
    cbr i1 %79(prob = 0.5), ^b15, ^while.body2;
  ^while.body8:
    i32 %80 = sdiv i32 %33, i32 %70;
    i32 %81 = srem i32 %80, i32 2;
    i1 %82 = scmp eq i32 %81, i32 1;
    cbr i1 %82(prob = 0.5), ^if.then3, ^b16;
  ^while.header2:
    i32 %83 = phi [^b12, i32 1] [^b19, i32 %109];
    i32 %84 = phi [^b12, i32 0] [^b19, i32 %108];
    i1 %85 = scmp lt i32 %83, i32 1073741824;
    cbr i1 %85(prob = 0.97), ^while.body9, ^b9;
  ^if.then3:
    i32 %86 = mul i32 %71, i32 2;
    i32 %87 = add i32 %86, i32 1;
    ubr ^b17;
  ^b15:
    i32 %88 = add i32 %21, i32 1;
    i1 %89 = scmp ge i32 %88, i32 %1;
    cbr i1 %89(prob = 0.5), ^while.body10, ^while.body1;
  ^b16:
    i32 %90 = sdiv i32 %34, i32 %70;
    i32 %91 = srem i32 %90, i32 2;
    i1 %92 = scmp eq i32 %91, i32 1;
    cbr i1 %92(prob = 0.5), ^if.then3, ^if.else2;
  ^while.body9:
    i32 %93 = sdiv i32 %33, i32 %83;
    i32 %94 = srem i32 %93, i32 2;
    i1 %95 = scmp eq i32 %94, i32 1;
    cbr i1 %95(prob = 0.5), ^b18, ^if.else3;
  ^b17:
    i32 %96 = phi [^if.then3, i32 %87] [^if.else2, i32 %98];
    i32 %97 = mul i32 %70, i32 2;
    ubr ^while.header1;
  ^while.body10:
    cbr i1 %4(prob = 0.97), ^super.header, ^while.body11;
  ^if.else2:
    i32 %98 = mul i32 %71, i32 2;
    ubr ^b17;
  ^if.else3:
    i32 %99 = mul i32 %84, i32 2;
    ubr ^b19;
  ^b18:
    i32 %100 = sdiv i32 %34, i32 %83;
    i32 %101 = srem i32 %100, i32 2;
    i1 %102 = scmp eq i32 %101, i32 1;
    cbr i1 %102(prob = 0.5), ^if.then4, ^if.else3;
  ^if.then4:
    i32 %103 = mul i32 %84, i32 2;
    i32 %104 = add i32 %103, i32 1;
    ubr ^b19;
  ^super.header:
    i32 %105 = phi [^while.body10, i32 0] [^while.body12, i32 %106];
    i32 %106 = add i32 %105, i32 16;
    i1 %107 = scmp lt i32 %106, i32 %3;
    cbr i1 %107(prob = 0.67), ^while.body12, ^super.header1;
  ^b19:
    i32 %108 = phi [^if.else3, i32 %99] [^if.then4, i32 %104];
    i32 %109 = mul i32 %83, i32 2;
    ubr ^while.header2;
  ^while.body11:
    i32 %110 = add i32 %14, i32 1;
    i1 %111 = scmp lt i32 %110, i32 %10;
    cbr i1 %111(prob = 0.97), ^while.body, ^b;
  ^while.body12:
    i32* %112 = getelementptr &(i32* %13)[i32 %105];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %6)[i32 %105];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %112)[i64 1];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %114)[i64 1];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %112)[i64 2];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %114)[i64 2];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %112)[i64 3];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %114)[i64 3];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %112)[i64 4];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %114)[i64 4];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %112)[i64 5];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %114)[i64 5];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %112)[i64 6];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %114)[i64 6];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %112)[i64 7];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %114)[i64 7];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %112)[i64 8];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %114)[i64 8];
    store i32* %138 with i32 %137;
    i32* %139 = getelementptr &(i32* %112)[i64 9];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %114)[i64 9];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %112)[i64 10];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %114)[i64 10];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %112)[i64 11];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %114)[i64 11];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %112)[i64 12];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %114)[i64 12];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %112)[i64 13];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %114)[i64 13];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %112)[i64 14];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %114)[i64 14];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %112)[i64 15];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %114)[i64 15];
    store i32* %159 with i32 %158;
    ubr ^super.header;
  ^super.header1:
    i32 %160 = phi [^super.header, i32 %105] [^while.body13, i32 %161];
    i32 %161 = add i32 %160, i32 16;
    i1 %162 = scmp lt i32 %161, i32 %3;
    cbr i1 %162(prob = 0.67), ^while.body13, ^super.header2;
  ^while.body13:
    i32* %163 = getelementptr &(i32* %13)[i32 %160];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %6)[i32 %160];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &(i32* %163)[i64 1];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %165)[i64 1];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %163)[i64 2];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %165)[i64 2];
    store i32* %171 with i32 %170;
    i32* %172 = getelementptr &(i32* %163)[i64 3];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %165)[i64 3];
    store i32* %174 with i32 %173;
    i32* %175 = getelementptr &(i32* %163)[i64 4];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %165)[i64 4];
    store i32* %177 with i32 %176;
    i32* %178 = getelementptr &(i32* %163)[i64 5];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %165)[i64 5];
    store i32* %180 with i32 %179;
    i32* %181 = getelementptr &(i32* %163)[i64 6];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %165)[i64 6];
    store i32* %183 with i32 %182;
    i32* %184 = getelementptr &(i32* %163)[i64 7];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %165)[i64 7];
    store i32* %186 with i32 %185;
    i32* %187 = getelementptr &(i32* %163)[i64 8];
    i32 %188 = load i32* %187;
    i32* %189 = getelementptr &(i32* %165)[i64 8];
    store i32* %189 with i32 %188;
    i32* %190 = getelementptr &(i32* %163)[i64 9];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %165)[i64 9];
    store i32* %192 with i32 %191;
    i32* %193 = getelementptr &(i32* %163)[i64 10];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &(i32* %165)[i64 10];
    store i32* %195 with i32 %194;
    i32* %196 = getelementptr &(i32* %163)[i64 11];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %165)[i64 11];
    store i32* %198 with i32 %197;
    i32* %199 = getelementptr &(i32* %163)[i64 12];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %165)[i64 12];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &(i32* %163)[i64 13];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %165)[i64 13];
    store i32* %204 with i32 %203;
    i32* %205 = getelementptr &(i32* %163)[i64 14];
    i32 %206 = load i32* %205;
    i32* %207 = getelementptr &(i32* %165)[i64 14];
    store i32* %207 with i32 %206;
    i32* %208 = getelementptr &(i32* %163)[i64 15];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %165)[i64 15];
    store i32* %210 with i32 %209;
    ubr ^super.header1;
  ^super.header2:
    i32 %211 = phi [^super.header1, i32 %160] [^while.body14, i32 %212];
    i32 %212 = add i32 %211, i32 16;
    i1 %213 = scmp lt i32 %212, i32 %3;
    cbr i1 %213(prob = 0.67), ^while.body14, ^while.body15;
  ^while.body14:
    i32* %214 = getelementptr &(i32* %13)[i32 %211];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %6)[i32 %211];
    store i32* %216 with i32 %215;
    i32* %217 = getelementptr &(i32* %214)[i64 1];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &(i32* %216)[i64 1];
    store i32* %219 with i32 %218;
    i32* %220 = getelementptr &(i32* %214)[i64 2];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %216)[i64 2];
    store i32* %222 with i32 %221;
    i32* %223 = getelementptr &(i32* %214)[i64 3];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %216)[i64 3];
    store i32* %225 with i32 %224;
    i32* %226 = getelementptr &(i32* %214)[i64 4];
    i32 %227 = load i32* %226;
    i32* %228 = getelementptr &(i32* %216)[i64 4];
    store i32* %228 with i32 %227;
    i32* %229 = getelementptr &(i32* %214)[i64 5];
    i32 %230 = load i32* %229;
    i32* %231 = getelementptr &(i32* %216)[i64 5];
    store i32* %231 with i32 %230;
    i32* %232 = getelementptr &(i32* %214)[i64 6];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &(i32* %216)[i64 6];
    store i32* %234 with i32 %233;
    i32* %235 = getelementptr &(i32* %214)[i64 7];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &(i32* %216)[i64 7];
    store i32* %237 with i32 %236;
    i32* %238 = getelementptr &(i32* %214)[i64 8];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &(i32* %216)[i64 8];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %214)[i64 9];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %216)[i64 9];
    store i32* %243 with i32 %242;
    i32* %244 = getelementptr &(i32* %214)[i64 10];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %216)[i64 10];
    store i32* %246 with i32 %245;
    i32* %247 = getelementptr &(i32* %214)[i64 11];
    i32 %248 = load i32* %247;
    i32* %249 = getelementptr &(i32* %216)[i64 11];
    store i32* %249 with i32 %248;
    i32* %250 = getelementptr &(i32* %214)[i64 12];
    i32 %251 = load i32* %250;
    i32* %252 = getelementptr &(i32* %216)[i64 12];
    store i32* %252 with i32 %251;
    i32* %253 = getelementptr &(i32* %214)[i64 13];
    i32 %254 = load i32* %253;
    i32* %255 = getelementptr &(i32* %216)[i64 13];
    store i32* %255 with i32 %254;
    i32* %256 = getelementptr &(i32* %214)[i64 14];
    i32 %257 = load i32* %256;
    i32* %258 = getelementptr &(i32* %216)[i64 14];
    store i32* %258 with i32 %257;
    i32* %259 = getelementptr &(i32* %214)[i64 15];
    i32 %260 = load i32* %259;
    i32* %261 = getelementptr &(i32* %216)[i64 15];
    store i32* %261 with i32 %260;
    ubr ^super.header2;
  ^while.body15:
    i32 %262 = phi [^super.header2, i32 %211] [^while.body15, i32 %266];
    i32* %263 = getelementptr &(i32* %13)[i32 %262];
    i32 %264 = load i32* %263;
    i32* %265 = getelementptr &(i32* %6)[i32 %262];
    store i32* %265 with i32 %264;
    i32 %266 = add i32 %262, i32 1;
    i1 %267 = scmp lt i32 %266, i32 %3;
    cbr i1 %267(prob = 0.97), ^while.body15, ^while.body11;
}
