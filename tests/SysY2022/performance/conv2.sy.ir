internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b { Flexible };
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i1 %9 = icmp sgt i32 %8, i32 0;
    i32 %10 = sdiv i32 %0, i32 2;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %9(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %11 = mul i32 %1, i32 %2;
    i1 %12 = icmp sgt i32 %11, i32 0;
    i32 %13 = add i32 %11, i32 -4;
    i1 %14 = icmp sgt i32 %11, i32 4;
    [10000000 * i32]* %15 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %16 = getelementptr &([10000000 * i32]* %15)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %17 = mul i32 %1, i32 %2;
    call (i32, i32*) -> void @putarray(i32 %17, i32* %4);
    ret i32 0;
  ^while.body:
    i32 %18 = phi [^prebody, i32 0] [^while.body11, i32 %113];
    i32* %19 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = icmp eq i32 %20, i32 0;
    i1 %22 = icmp eq i32 %20, i32 1;
    i1 %23 = icmp eq i32 %20, i32 2;
    i1 %24 = icmp eq i32 %20, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %25 = phi [^while.body, i32 0] [^b10, i32 %95];
    i32 %26 = sub i32 %25, i32 %10;
    i32 %27 = add i32 %10, i32 %25;
    i32 %28 = mul i32 %2, i32 %25;
    ubr ^while.body2;
  ^while.body2:
    i32 %29 = phi [^while.body1, i32 0] [^b9, i32 %84];
    i32 %30 = sub i32 %29, i32 %10;
    i32 %31 = add i32 %10, i32 %29;
    ubr ^while.body3;
  ^while.body3:
    i32 %32 = phi [^while.body2, i32 %26] [^b7, i32 %76];
    i32 %33 = phi [^while.body2, i32 0] [^b7, i32 %68];
    i1 %34 = icmp sle i32 %1, i32 %32;
    i1 %35 = icmp slt i32 %32, i32 0;
    i1 %36 = or i1 %34, i1 %35;
    ubr ^while.body4;
  ^while.body4:
    i32 %37 = phi [^while.body3, i32 %30] [^b5, i32 %69];
    i32 %38 = phi [^while.body3, i32 %33] [^b5, i32 %68];
    i1 %39 = icmp slt i32 %37, i32 0;
    i1 %40 = or i1 %36, i1 %39;
    i1 %41 = icmp sle i32 %2, i32 %37;
    i1 %42 = or i1 %40, i1 %41;
    cbr i1 %42(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %43 = mul i32 %2, i32 %32;
    i32 %44 = add i32 %37, i32 %43;
    i32* %45 = getelementptr &(i32* %4)[i32 %44];
    i32 %46 = load i32* %45;
    ubr ^b2;
  ^b2:
    i32 %47 = phi [^while.body4, i32 0] [^b1, i32 %46];
    cbr i1 %21(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %48 = add i32 %38, i32 %47;
    i1 %49 = icmp sgt i32 %48, i32 1073741824;
    cbr i1 %49(prob = 0.97), ^while.body5, ^56;
  ^b3:
    cbr i1 %22(prob = 0.5), ^while.header, ^b4;
  ^while.body5:
    i32 %50 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i32 %51 = add i32 %50, i32 -1073741824;
    i1 %52 = icmp sgt i32 %51, i32 1073741824;
    cbr i1 %52(prob = 0.97), ^while.body5, ^56;
  ^while.header:
    i32 %53 = phi [^b3, i32 0] [^if.then2, i32 %71] [^if.else, i32 %74];
    i32 %54 = phi [^b3, i32 1] [^if.then2, i32 %72] [^if.else, i32 %75];
    i1 %55 = icmp slt i32 %54, i32 1073741824;
    cbr i1 %55(prob = 0.97), ^while.body6, ^b5;
  ^56:
    i32 %57 = phi [^if.then, i32 %48] [^while.body5, i32 %51];
    i1 %58 = icmp slt i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %23(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %59 = smax i32 %38, i32 %47;
    ubr ^b5;
  ^while.body6:
    i32 %60 = sdiv i32 %38, i32 %54;
    i32 %61 = srem i32 %60, i32 2;
    i32 %62 = sdiv i32 %47, i32 %54;
    i32 %63 = srem i32 %62, i32 2;
    i1 %64 = icmp eq i32 %61, i32 %63;
    cbr i1 %64(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %65 = phi [^56, i32 %57] [^while.body7, i32 %66];
    i32 %66 = add i32 %65, i32 1073741824;
    i1 %67 = icmp slt i32 %66, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %68 = phi [^while.header, i32 %53] [^56, i32 %57] [^if.then1, i32 %59] [^while.body7, i32 %66] [^while.header1, i32 %78] [^b8, i32 0] [^while.header2, i32 %89];
    i32 %69 = add i32 %37, i32 1;
    i1 %70 = icmp sle i32 %31, i32 %69;
    cbr i1 %70(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %24(prob = 0.5), ^while.header1, ^b8;
  ^if.then2:
    i32 %71 = mul i32 %53, i32 2;
    i32 %72 = mul i32 %54, i32 2;
    ubr ^while.header;
  ^if.else:
    i32 %73 = mul i32 %53, i32 2;
    i32 %74 = add i32 %73, i32 1;
    i32 %75 = mul i32 %54, i32 2;
    ubr ^while.header;
  ^b7:
    i32 %76 = add i32 %32, i32 1;
    i1 %77 = icmp sle i32 %27, i32 %76;
    cbr i1 %77(prob = 0.5), ^b9, ^while.body3;
  ^while.header1:
    i32 %78 = phi [^b6, i32 0] [^if.then3, i32 %93] [^if.else2, i32 %105];
    i32 %79 = phi [^b6, i32 1] [^if.then3, i32 %94] [^if.else2, i32 %106];
    i1 %80 = icmp slt i32 %79, i32 1073741824;
    cbr i1 %80(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %81 = icmp eq i32 %20, i32 4;
    cbr i1 %81(prob = 0.5), ^while.header2, ^b5;
  ^b9:
    i32 %82 = add i32 %28, i32 %29;
    i32* %83 = getelementptr &(i32* %16)[i32 %82];
    store i32* %83 with i32 %68;
    i32 %84 = add i32 %29, i32 1;
    i1 %85 = icmp sle i32 %2, i32 %84;
    cbr i1 %85(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %86 = sdiv i32 %38, i32 %79;
    i32 %87 = and i32 %86, i32 -2147483647;
    i1 %88 = icmp eq i32 %87, i32 1;
    cbr i1 %88(prob = 0.5), ^if.then3, ^b11;
  ^while.header2:
    i32 %89 = phi [^b8, i32 0] [^if.else1, i32 %103] [^if.then4, i32 %111];
    i32 %90 = phi [^b8, i32 1] [^if.else1, i32 %104] [^if.then4, i32 %112];
    i1 %91 = icmp slt i32 %90, i32 1073741824;
    cbr i1 %91(prob = 0.97), ^while.body9, ^b5;
  ^if.then3:
    i32 %92 = mul i32 %78, i32 2;
    i32 %93 = add i32 %92, i32 1;
    i32 %94 = mul i32 %79, i32 2;
    ubr ^while.header1;
  ^b10:
    i32 %95 = add i32 %25, i32 1;
    i1 %96 = icmp sle i32 %1, i32 %95;
    cbr i1 %96(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %97 = sdiv i32 %47, i32 %79;
    i32 %98 = and i32 %97, i32 -2147483647;
    i1 %99 = icmp eq i32 %98, i32 1;
    cbr i1 %99(prob = 0.5), ^if.then3, ^if.else2;
  ^while.body9:
    i32 %100 = sdiv i32 %38, i32 %90;
    i32 %101 = and i32 %100, i32 -2147483647;
    i1 %102 = icmp eq i32 %101, i32 1;
    cbr i1 %102(prob = 0.5), ^b12, ^if.else1;
  ^while.body10:
    cbr i1 %12(prob = 0.97), ^super.header, ^while.body11;
  ^if.else1:
    i32 %103 = mul i32 %89, i32 2;
    i32 %104 = mul i32 %90, i32 2;
    ubr ^while.header2;
  ^if.else2:
    i32 %105 = mul i32 %78, i32 2;
    i32 %106 = mul i32 %79, i32 2;
    ubr ^while.header1;
  ^b12:
    i32 %107 = sdiv i32 %47, i32 %90;
    i32 %108 = and i32 %107, i32 -2147483647;
    i1 %109 = icmp eq i32 %108, i32 1;
    cbr i1 %109(prob = 0.5), ^if.then4, ^if.else1;
  ^if.then4:
    i32 %110 = mul i32 %89, i32 2;
    i32 %111 = add i32 %110, i32 1;
    i32 %112 = mul i32 %90, i32 2;
    ubr ^while.header2;
  ^super.header:
    cbr i1 %14(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body11:
    i32 %113 = add i32 %18, i32 1;
    i1 %114 = icmp sgt i32 %8, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body, ^b;
  ^while.body12:
    i32 %115 = phi [^super.header, i32 0] [^while.body12, i32 %128];
    i32* %116 = getelementptr &(i32* %16)[i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %4)[i32 %115];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %116)[i64 1];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %118)[i64 1];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %116)[i64 2];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %118)[i64 2];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %116)[i64 3];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %118)[i64 3];
    store i32* %127 with i32 %126;
    i32 %128 = add i32 %115, i32 4;
    i1 %129 = icmp sgt i32 %13, i32 %128;
    cbr i1 %129(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body13:
    i32 %130 = phi [^super.header, i32 0] [^while.body12, i32 %128] [^while.body13, i32 %134];
    i32* %131 = getelementptr &(i32* %16)[i32 %130];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %4)[i32 %130];
    store i32* %133 with i32 %132;
    i32 %134 = add i32 %130, i32 1;
    i1 %135 = icmp sgt i32 %11, i32 %134;
    cbr i1 %135(prob = 0.75), ^while.body13, ^while.body11;
}
