internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b { Flexible };
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i1 %9 = icmp sgt i32 %8, i32 0;
    i32 %10 = sdiv i32 %0, i32 2;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %9(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %11 = mul i32 %1, i32 %2;
    i1 %12 = icmp sgt i32 %11, i32 0;
    [10000000 * i32]* %13 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %14 = getelementptr &([10000000 * i32]* %13)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %15 = mul i32 %1, i32 %2;
    call (i32, i32*) -> void @putarray(i32 %15, i32* %4);
    ret i32 0;
  ^while.body:
    i32 %16 = phi [^prebody, i32 0] [^while.body11, i32 %113];
    i32* %17 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %18, i32 0;
    i1 %20 = icmp eq i32 %18, i32 1;
    i1 %21 = icmp eq i32 %18, i32 2;
    i1 %22 = icmp eq i32 %18, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %23 = phi [^while.body, i32 0] [^b10, i32 %92];
    i32 %24 = sub i32 %23, i32 %10;
    i32 %25 = add i32 %10, i32 %23;
    i32 %26 = mul i32 %2, i32 %23;
    ubr ^while.body2;
  ^while.body2:
    i32 %27 = phi [^while.body1, i32 0] [^b9, i32 %81];
    i32 %28 = sub i32 %27, i32 %10;
    i32 %29 = add i32 %10, i32 %27;
    ubr ^while.body3;
  ^while.body3:
    i32 %30 = phi [^while.body2, i32 %24] [^b7, i32 %73];
    i32 %31 = phi [^while.body2, i32 0] [^b7, i32 %65];
    i1 %32 = icmp sle i32 %1, i32 %30;
    i1 %33 = icmp slt i32 %30, i32 0;
    i1 %34 = or i1 %32, i1 %33;
    ubr ^while.body4;
  ^while.body4:
    i32 %35 = phi [^while.body3, i32 %28] [^b5, i32 %66];
    i32 %36 = phi [^while.body3, i32 %31] [^b5, i32 %65];
    i1 %37 = icmp slt i32 %35, i32 0;
    i1 %38 = or i1 %34, i1 %37;
    i1 %39 = icmp sle i32 %2, i32 %35;
    i1 %40 = or i1 %38, i1 %39;
    cbr i1 %40(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %41 = mul i32 %2, i32 %30;
    i32 %42 = add i32 %35, i32 %41;
    i32* %43 = getelementptr &(i32* %4)[i32 %42];
    i32 %44 = load i32* %43;
    ubr ^b2;
  ^b2:
    i32 %45 = phi [^while.body4, i32 0] [^b1, i32 %44];
    cbr i1 %19(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %46 = add i32 %36, i32 %45;
    i1 %47 = icmp sgt i32 %46, i32 1073741824;
    cbr i1 %47(prob = 0.97), ^while.body5, ^while.header1;
  ^b3:
    cbr i1 %20(prob = 0.5), ^while.header, ^b4;
  ^while.body5:
    i32 %48 = phi [^if.then, i32 %46] [^while.body5, i32 %49];
    i32 %49 = add i32 %48, i32 -1073741824;
    i1 %50 = icmp sgt i32 %49, i32 1073741824;
    cbr i1 %50(prob = 0.97), ^while.body5, ^while.header1;
  ^while.header:
    i32 %51 = phi [^b3, i32 0] [^if.then2, i32 %68] [^if.else, i32 %71];
    i32 %52 = phi [^b3, i32 1] [^if.then2, i32 %69] [^if.else, i32 %72];
    i1 %53 = icmp slt i32 %52, i32 1073741824;
    cbr i1 %53(prob = 0.97), ^while.body6, ^b5;
  ^while.header1:
    i32 %54 = phi [^if.then, i32 %46] [^while.body5, i32 %49];
    i1 %55 = icmp slt i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %21(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %56 = smax i32 %36, i32 %45;
    ubr ^b5;
  ^while.body6:
    i32 %57 = sdiv i32 %36, i32 %52;
    i32 %58 = srem i32 %57, i32 2;
    i32 %59 = sdiv i32 %45, i32 %52;
    i32 %60 = srem i32 %59, i32 2;
    i1 %61 = icmp eq i32 %58, i32 %60;
    cbr i1 %61(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %62 = phi [^while.header1, i32 %54] [^while.body7, i32 %63];
    i32 %63 = add i32 %62, i32 1073741824;
    i1 %64 = icmp slt i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %65 = phi [^while.header, i32 %51] [^while.header1, i32 %54] [^if.then1, i32 %56] [^while.body7, i32 %63] [^while.header2, i32 %75] [^b8, i32 0] [^while.header3, i32 %86];
    i32 %66 = add i32 %35, i32 1;
    i1 %67 = icmp sle i32 %29, i32 %66;
    cbr i1 %67(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %22(prob = 0.5), ^while.header2, ^b8;
  ^if.then2:
    i32 %68 = mul i32 %51, i32 2;
    i32 %69 = mul i32 %52, i32 2;
    ubr ^while.header;
  ^if.else:
    i32 %70 = mul i32 %51, i32 2;
    i32 %71 = add i32 %70, i32 1;
    i32 %72 = mul i32 %52, i32 2;
    ubr ^while.header;
  ^b7:
    i32 %73 = add i32 %30, i32 1;
    i1 %74 = icmp sle i32 %25, i32 %73;
    cbr i1 %74(prob = 0.5), ^b9, ^while.body3;
  ^while.header2:
    i32 %75 = phi [^b6, i32 0] [^if.then3, i32 %90] [^if.else2, i32 %102];
    i32 %76 = phi [^b6, i32 1] [^if.then3, i32 %91] [^if.else2, i32 %103];
    i1 %77 = icmp slt i32 %76, i32 1073741824;
    cbr i1 %77(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %78 = icmp eq i32 %18, i32 4;
    cbr i1 %78(prob = 0.5), ^while.header3, ^b5;
  ^b9:
    i32 %79 = add i32 %26, i32 %27;
    i32* %80 = getelementptr &(i32* %14)[i32 %79];
    store i32* %80 with i32 %65;
    i32 %81 = add i32 %27, i32 1;
    i1 %82 = icmp sle i32 %2, i32 %81;
    cbr i1 %82(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %83 = sdiv i32 %36, i32 %76;
    i32 %84 = and i32 %83, i32 -2147483647;
    i1 %85 = icmp eq i32 %84, i32 1;
    cbr i1 %85(prob = 0.5), ^if.then3, ^b11;
  ^while.header3:
    i32 %86 = phi [^b8, i32 0] [^if.else1, i32 %100] [^if.then4, i32 %108];
    i32 %87 = phi [^b8, i32 1] [^if.else1, i32 %101] [^if.then4, i32 %109];
    i1 %88 = icmp slt i32 %87, i32 1073741824;
    cbr i1 %88(prob = 0.97), ^while.body9, ^b5;
  ^if.then3:
    i32 %89 = mul i32 %75, i32 2;
    i32 %90 = add i32 %89, i32 1;
    i32 %91 = mul i32 %76, i32 2;
    ubr ^while.header2;
  ^b10:
    i32 %92 = add i32 %23, i32 1;
    i1 %93 = icmp sle i32 %1, i32 %92;
    cbr i1 %93(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %94 = sdiv i32 %45, i32 %76;
    i32 %95 = and i32 %94, i32 -2147483647;
    i1 %96 = icmp eq i32 %95, i32 1;
    cbr i1 %96(prob = 0.5), ^if.then3, ^if.else2;
  ^while.body9:
    i32 %97 = sdiv i32 %36, i32 %87;
    i32 %98 = and i32 %97, i32 -2147483647;
    i1 %99 = icmp eq i32 %98, i32 1;
    cbr i1 %99(prob = 0.5), ^b12, ^if.else1;
  ^while.body10:
    cbr i1 %12(prob = 0.97), ^super.header, ^while.body11;
  ^if.else1:
    i32 %100 = mul i32 %86, i32 2;
    i32 %101 = mul i32 %87, i32 2;
    ubr ^while.header3;
  ^if.else2:
    i32 %102 = mul i32 %75, i32 2;
    i32 %103 = mul i32 %76, i32 2;
    ubr ^while.header2;
  ^b12:
    i32 %104 = sdiv i32 %45, i32 %87;
    i32 %105 = and i32 %104, i32 -2147483647;
    i1 %106 = icmp eq i32 %105, i32 1;
    cbr i1 %106(prob = 0.5), ^if.then4, ^if.else1;
  ^if.then4:
    i32 %107 = mul i32 %86, i32 2;
    i32 %108 = add i32 %107, i32 1;
    i32 %109 = mul i32 %87, i32 2;
    ubr ^while.header3;
  ^super.header:
    i32 %110 = phi [^while.body10, i32 0] [^while.body12, i32 %111];
    i32 %111 = add i32 %110, i32 4;
    i1 %112 = icmp sgt i32 %11, i32 %111;
    cbr i1 %112(prob = 0.89), ^while.body12, ^while.body13;
  ^while.body11:
    i32 %113 = add i32 %16, i32 1;
    i1 %114 = icmp sgt i32 %8, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body, ^b;
  ^while.body12:
    i32* %115 = getelementptr &(i32* %14)[i32 %110];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %4)[i32 %110];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %115)[i64 1];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %117)[i64 1];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %115)[i64 2];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %117)[i64 2];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %115)[i64 3];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %117)[i64 3];
    store i32* %126 with i32 %125;
    ubr ^super.header;
  ^while.body13:
    i32 %127 = phi [^super.header, i32 %110] [^while.body13, i32 %131];
    i32* %128 = getelementptr &(i32* %14)[i32 %127];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %4)[i32 %127];
    store i32* %130 with i32 %129;
    i32 %131 = add i32 %127, i32 1;
    i1 %132 = icmp sgt i32 %11, i32 %131;
    cbr i1 %132(prob = 0.75), ^while.body13, ^while.body11;
}
