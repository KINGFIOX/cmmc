internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
internal [10000000 * i32]* @b, align 8 { Flexible };
internal [10000 * i32]* @kernelid, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    [10000000 * i32]* %3 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %4 = getelementptr &([10000000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @kernelid to [10000 * i32]*;
    i32* %7 = getelementptr &([10000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i1 %9 = icmp sgt i32 %8, i32 0;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %9(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %10 = mul i32 %1, i32 %2;
    i32 %11 = add i32 %10, i32 -4;
    i1 %12 = icmp sgt i32 %11, i32 16;
    i1 %13 = icmp sgt i32 %10, i32 0;
    i1 %14 = icmp sgt i32 %10, i32 4;
    i32 %15 = add i32 %10, i32 -20;
    i32 %16 = sdiv i32 %0, i32 2;
    [10000000 * i32]* %17 = ptrcast [10000000 * i32]* @b to [10000000 * i32]*;
    i32* %18 = getelementptr &([10000000 * i32]* %17)[i64 0][i64 0];
    ubr ^while.body;
  ^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %19 = mul i32 %1, i32 %2;
    call (i32, i32*) -> void @putarray(i32 %19, i32* %4);
    ret i32 0;
  ^while.body:
    i32 %20 = phi [^prebody, i32 0] [^while.body11, i32 %115];
    i32* %21 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %20];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    i1 %24 = icmp eq i32 %22, i32 1;
    i1 %25 = icmp eq i32 %22, i32 2;
    i1 %26 = icmp eq i32 %22, i32 3;
    ubr ^while.body1;
  ^while.body1:
    i32 %27 = phi [^while.body, i32 0] [^b10, i32 %97];
    i32 %28 = sub i32 %27, i32 %16;
    i32 %29 = add i32 %16, i32 %27;
    i32 %30 = mul i32 %2, i32 %27;
    ubr ^while.body2;
  ^while.body2:
    i32 %31 = phi [^while.body1, i32 0] [^b9, i32 %86];
    i32 %32 = sub i32 %31, i32 %16;
    i32 %33 = add i32 %16, i32 %31;
    ubr ^while.body3;
  ^while.body3:
    i32 %34 = phi [^while.body2, i32 %28] [^b7, i32 %78];
    i32 %35 = phi [^while.body2, i32 0] [^b7, i32 %70];
    i1 %36 = icmp sle i32 %1, i32 %34;
    i1 %37 = icmp slt i32 %34, i32 0;
    i1 %38 = or i1 %36, i1 %37;
    ubr ^while.body4;
  ^while.body4:
    i32 %39 = phi [^while.body3, i32 %32] [^b5, i32 %71];
    i32 %40 = phi [^while.body3, i32 %35] [^b5, i32 %70];
    i1 %41 = icmp sle i32 %2, i32 %39;
    i1 %42 = icmp slt i32 %39, i32 0;
    i1 %43 = or i1 %41, i1 %42;
    i1 %44 = or i1 %38, i1 %43;
    cbr i1 %44(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %45 = mul i32 %2, i32 %34;
    i32 %46 = add i32 %39, i32 %45;
    i32* %47 = getelementptr &(i32* %4)[i32 %46];
    i32 %48 = load i32* %47;
    ubr ^b2;
  ^b2:
    i32 %49 = phi [^while.body4, i32 0] [^b1, i32 %48];
    cbr i1 %23(prob = 0.5), ^if.then, ^b3;
  ^if.then:
    i32 %50 = add i32 %40, i32 %49;
    i1 %51 = icmp sgt i32 %50, i32 1073741824;
    cbr i1 %51(prob = 0.97), ^while.body5, ^58;
  ^b3:
    cbr i1 %24(prob = 0.5), ^while.header, ^b4;
  ^while.body5:
    i32 %52 = phi [^if.then, i32 %50] [^while.body5, i32 %53];
    i32 %53 = add i32 %52, i32 -1073741824;
    i1 %54 = icmp sgt i32 %53, i32 1073741824;
    cbr i1 %54(prob = 0.97), ^while.body5, ^58;
  ^while.header:
    i32 %55 = phi [^b3, i32 0] [^if.then2, i32 %73] [^if.else, i32 %76];
    i32 %56 = phi [^b3, i32 1] [^if.then2, i32 %74] [^if.else, i32 %77];
    i1 %57 = icmp slt i32 %56, i32 1073741824;
    cbr i1 %57(prob = 0.97), ^while.body6, ^b5;
  ^58:
    i32 %59 = phi [^if.then, i32 %50] [^while.body5, i32 %53];
    i1 %60 = icmp slt i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body7, ^b5;
  ^b4:
    cbr i1 %25(prob = 0.5), ^if.then1, ^b6;
  ^if.then1:
    i32 %61 = smax i32 %40, i32 %49;
    ubr ^b5;
  ^while.body6:
    i32 %62 = sdiv i32 %40, i32 %56;
    i32 %63 = srem i32 %62, i32 2;
    i32 %64 = sdiv i32 %49, i32 %56;
    i32 %65 = srem i32 %64, i32 2;
    i1 %66 = icmp eq i32 %63, i32 %65;
    cbr i1 %66(prob = 0.5), ^if.then2, ^if.else;
  ^while.body7:
    i32 %67 = phi [^58, i32 %59] [^while.body7, i32 %68];
    i32 %68 = add i32 %67, i32 1073741824;
    i1 %69 = icmp slt i32 %68, i32 0;
    cbr i1 %69(prob = 0.97), ^while.body7, ^b5;
  ^b5:
    i32 %70 = phi [^while.header, i32 %55] [^58, i32 %59] [^if.then1, i32 %61] [^while.body7, i32 %68] [^while.header1, i32 %80] [^b8, i32 0] [^while.header2, i32 %91];
    i32 %71 = add i32 %39, i32 1;
    i1 %72 = icmp sle i32 %33, i32 %71;
    cbr i1 %72(prob = 0.5), ^b7, ^while.body4;
  ^b6:
    cbr i1 %26(prob = 0.5), ^while.header1, ^b8;
  ^if.then2:
    i32 %73 = mul i32 %55, i32 2;
    i32 %74 = mul i32 %56, i32 2;
    ubr ^while.header;
  ^if.else:
    i32 %75 = mul i32 %55, i32 2;
    i32 %76 = add i32 %75, i32 1;
    i32 %77 = mul i32 %56, i32 2;
    ubr ^while.header;
  ^b7:
    i32 %78 = add i32 %34, i32 1;
    i1 %79 = icmp sle i32 %29, i32 %78;
    cbr i1 %79(prob = 0.5), ^b9, ^while.body3;
  ^while.header1:
    i32 %80 = phi [^b6, i32 0] [^if.then3, i32 %95] [^if.else2, i32 %107];
    i32 %81 = phi [^b6, i32 1] [^if.then3, i32 %96] [^if.else2, i32 %108];
    i1 %82 = icmp slt i32 %81, i32 1073741824;
    cbr i1 %82(prob = 0.97), ^while.body8, ^b5;
  ^b8:
    i1 %83 = icmp eq i32 %22, i32 4;
    cbr i1 %83(prob = 0.5), ^while.header2, ^b5;
  ^b9:
    i32 %84 = add i32 %30, i32 %31;
    i32* %85 = getelementptr &(i32* %18)[i32 %84];
    store i32* %85 with i32 %70;
    i32 %86 = add i32 %31, i32 1;
    i1 %87 = icmp sle i32 %2, i32 %86;
    cbr i1 %87(prob = 0.5), ^b10, ^while.body2;
  ^while.body8:
    i32 %88 = sdiv i32 %40, i32 %81;
    i32 %89 = and i32 %88, i32 -2147483647;
    i1 %90 = icmp eq i32 %89, i32 1;
    cbr i1 %90(prob = 0.5), ^if.then3, ^b11;
  ^while.header2:
    i32 %91 = phi [^b8, i32 0] [^if.else1, i32 %105] [^if.then4, i32 %113];
    i32 %92 = phi [^b8, i32 1] [^if.else1, i32 %106] [^if.then4, i32 %114];
    i1 %93 = icmp slt i32 %92, i32 1073741824;
    cbr i1 %93(prob = 0.97), ^while.body9, ^b5;
  ^if.then3:
    i32 %94 = mul i32 %80, i32 2;
    i32 %95 = add i32 %94, i32 1;
    i32 %96 = mul i32 %81, i32 2;
    ubr ^while.header1;
  ^b10:
    i32 %97 = add i32 %27, i32 1;
    i1 %98 = icmp sle i32 %1, i32 %97;
    cbr i1 %98(prob = 0.5), ^while.body10, ^while.body1;
  ^b11:
    i32 %99 = sdiv i32 %49, i32 %81;
    i32 %100 = and i32 %99, i32 -2147483647;
    i1 %101 = icmp eq i32 %100, i32 1;
    cbr i1 %101(prob = 0.5), ^if.then3, ^if.else2;
  ^while.body9:
    i32 %102 = sdiv i32 %40, i32 %92;
    i32 %103 = and i32 %102, i32 -2147483647;
    i1 %104 = icmp eq i32 %103, i32 1;
    cbr i1 %104(prob = 0.5), ^b12, ^if.else1;
  ^while.body10:
    cbr i1 %13(prob = 0.97), ^super.header, ^while.body11;
  ^if.else1:
    i32 %105 = mul i32 %91, i32 2;
    i32 %106 = mul i32 %92, i32 2;
    ubr ^while.header2;
  ^if.else2:
    i32 %107 = mul i32 %80, i32 2;
    i32 %108 = mul i32 %81, i32 2;
    ubr ^while.header1;
  ^b12:
    i32 %109 = sdiv i32 %49, i32 %92;
    i32 %110 = and i32 %109, i32 -2147483647;
    i1 %111 = icmp eq i32 %110, i32 1;
    cbr i1 %111(prob = 0.5), ^if.then4, ^if.else1;
  ^if.then4:
    i32 %112 = mul i32 %91, i32 2;
    i32 %113 = add i32 %112, i32 1;
    i32 %114 = mul i32 %92, i32 2;
    ubr ^while.header2;
  ^super.header:
    cbr i1 %14(prob = 0.89), ^super.header1, ^while.body12;
  ^while.body11:
    i32 %115 = add i32 %20, i32 1;
    i1 %116 = icmp sgt i32 %8, i32 %115;
    cbr i1 %116(prob = 0.97), ^while.body, ^b;
  ^super.header1:
    cbr i1 %12(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body12 {scalar}:
    i32 %117 = phi [^super.header, i32 0] [^while.body12, i32 %121] [^while.body14, i32 %187];
    i32* %118 = getelementptr &(i32* %18)[i32 %117];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %4)[i32 %117];
    store i32* %120 with i32 %119;
    i32 %121 = add i32 %117, i32 1;
    i1 %122 = icmp sgt i32 %10, i32 %121;
    cbr i1 %122(prob = 0.75), ^while.body12, ^while.body11;
  ^while.body13:
    i32 %123 = phi [^super.header1, i32 0] [^while.body13, i32 %172];
    i32* %124 = getelementptr &(i32* %18)[i32 %123];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %4)[i32 %123];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %124)[i64 1];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %126)[i64 1];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %124)[i64 2];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %126)[i64 2];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %124)[i64 3];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %126)[i64 3];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %124)[i64 4];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %126)[i64 4];
    store i32* %138 with i32 %137;
    i32* %139 = getelementptr &(i32* %124)[i64 5];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %126)[i64 5];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %124)[i64 6];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %126)[i64 6];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %124)[i64 7];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %126)[i64 7];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %124)[i64 8];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %126)[i64 8];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %124)[i64 9];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %126)[i64 9];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %124)[i64 10];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %126)[i64 10];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %124)[i64 11];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %126)[i64 11];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %124)[i64 12];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %126)[i64 12];
    store i32* %162 with i32 %161;
    i32* %163 = getelementptr &(i32* %124)[i64 13];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %126)[i64 13];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &(i32* %124)[i64 14];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %126)[i64 14];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %124)[i64 15];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %126)[i64 15];
    store i32* %171 with i32 %170;
    i32 %172 = add i32 %123, i32 16;
    i1 %173 = icmp sgt i32 %15, i32 %172;
    cbr i1 %173(prob = 0.89), ^while.body13, ^while.body14;
  ^while.body14 {scalar}:
    i32 %174 = phi [^super.header1, i32 0] [^while.body13, i32 %172] [^while.body14, i32 %187];
    i32* %175 = getelementptr &(i32* %18)[i32 %174];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %4)[i32 %174];
    store i32* %177 with i32 %176;
    i32* %178 = getelementptr &(i32* %175)[i64 1];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %177)[i64 1];
    store i32* %180 with i32 %179;
    i32* %181 = getelementptr &(i32* %175)[i64 2];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %177)[i64 2];
    store i32* %183 with i32 %182;
    i32* %184 = getelementptr &(i32* %175)[i64 3];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %177)[i64 3];
    store i32* %186 with i32 %185;
    i32 %187 = add i32 %174, i32 4;
    i1 %188 = icmp sgt i32 %11, i32 %187;
    cbr i1 %188(prob = 0.75), ^while.body14, ^while.body12;
}
