internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %c = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32* %1 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    i32* %2 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %3 = call () -> i32 @getint();
    store i32* %c with i32 %3;
    i32 %4 = call () -> i32 @getint();
    store i32* %n with i32 %4;
    i32 %5 = call () -> i32 @getint();
    store i32* %m with i32 %5;
    i32 %6 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %7 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %8 = load i32* %c;
    i32 %9 = load i32* %n;
    i32 %10 = load i32* %m;
    i32 %11 = mul i32 %10, i32 %9;
    i32 %12 = sdiv i32 %8, i32 2;
    i1 %13 = scmp gt i32 %7, i32 0;
    i1 %14 = scmp gt i32 %11, i32 0;
    call (i32) -> void @starttime(i32 109);
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %15 = phi [^entry, i32 0] [^while.body12, i32 %118];
    i32* %16 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp eq i32 %17, i32 0;
    i1 %19 = scmp eq i32 %17, i32 1;
    i1 %20 = scmp eq i32 %17, i32 2;
    i1 %21 = scmp eq i32 %17, i32 3;
    ubr ^while.body1;
^b:
    call (i32) -> void @stoptime(i32 116);
    call (i32, i32*) -> void @putarray(i32 %11, i32* %0);
    ret i32 0;
^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^b13, i32 %107];
    i32 %23 = add i32 %12, i32 %22;
    i32 %24 = sub i32 %22, i32 %12;
    i32 %25 = mul i32 %22, i32 %10;
    ubr ^while.body2;
^while.body2:
    i32 %26 = phi [^while.body1, i32 0] [^b11, i32 %99];
    i32 %27 = add i32 %12, i32 %26;
    i32 %28 = sub i32 %26, i32 %12;
    ubr ^while.body3;
^while.body3:
    i32 %29 = phi [^while.body2, i32 %24] [^b10, i32 %86];
    i32 %30 = phi [^while.body2, i32 0] [^b10, i32 %72];
    i1 %31 = scmp lt i32 %29, i32 0;
    i1 %32 = scmp ge i32 %29, i32 %9;
    i1 %33 = or i1 %31, i1 %32;
    ubr ^while.body4;
^while.body4:
    i32 %34 = phi [^while.body3, i32 %30] [^b8, i32 %72];
    i32 %35 = phi [^while.body3, i32 %28] [^b8, i32 %36];
    i32 %36 = add i32 %35, i32 1;
    i1 %37 = scmp lt i32 %35, i32 0;
    i1 %38 = scmp ge i32 %35, i32 %10;
    i1 %39 = or i1 %37, i1 %38;
    i1 %40 = or i1 %39, i1 %33;
    i1 %41 = scmp ge i32 %36, i32 %27;
    cbr i1 %40(prob = 0.94), ^b2, ^b1;
^b1:
    i32 %42 = mul i32 %29, i32 %10;
    i32 %43 = add i32 %35, i32 %42;
    i32* %44 = getelementptr &(i32* %0)[i32 %43];
    i32 %45 = load i32* %44;
    ubr ^b2;
^b2:
    i32 %46 = phi [^while.body4, i32 0] [^b1, i32 %45];
    cbr i1 %18(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %47 = add i32 %34, i32 %46;
    i1 %48 = scmp gt i32 %47, i32 1073741824;
    cbr i1 %48(prob = 0.97), ^while.body5, ^while.guard;
^b3:
    cbr i1 %19(prob = 0.5), ^while.body6, ^b4;
^while.body5:
    i32 %49 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i32 %50 = add i32 %49, i32 -1073741824;
    i1 %51 = scmp gt i32 %50, i32 1073741824;
    cbr i1 %51(prob = 0.97), ^while.body5, ^while.guard;
^while.body6:
    i32 %52 = phi [^b3, i32 0] [^b7, i32 %69];
    i32 %53 = phi [^b3, i32 1] [^b7, i32 %70];
    i32 %54 = sdiv i32 %34, i32 %53;
    i32 %55 = sdiv i32 %46, i32 %53;
    i32 %56 = srem i32 %54, i32 2;
    i32 %57 = srem i32 %55, i32 2;
    i1 %58 = scmp eq i32 %56, i32 %57;
    cbr i1 %58(prob = 0.5), ^if.then1, ^if.else;
^while.guard:
    i32 %59 = phi [^if.then, i32 %47] [^while.body5, i32 %50];
    i1 %60 = scmp lt i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body7, ^b5;
^b4:
    cbr i1 %20(prob = 0.5), ^if.then2, ^b6;
^if.then1:
    i32 %61 = mul i32 %52, i32 2;
    ubr ^b7;
^if.else:
    i32 %62 = mul i32 %52, i32 2;
    i32 %63 = add i32 %62, i32 1;
    ubr ^b7;
^b5:
    i32 %64 = phi [^while.guard, i32 %59] [^while.body7, i32 %66];
    ubr ^b8;
^while.body7:
    i32 %65 = phi [^while.guard, i32 %59] [^while.body7, i32 %66];
    i32 %66 = add i32 %65, i32 1073741824;
    i1 %67 = scmp lt i32 %66, i32 0;
    cbr i1 %67(prob = 0.97), ^while.body7, ^b5;
^if.then2:
    i1 %68 = scmp gt i32 %34, i32 %46;
    cbr i1 %68(prob = 0.5), ^b8, ^if.else1;
^b6:
    cbr i1 %21(prob = 0.5), ^while.body8, ^b9;
^if.else1:
    ubr ^b8;
^b7:
    i32 %69 = phi [^if.then1, i32 %61] [^if.else, i32 %63];
    i32 %70 = mul i32 %53, i32 2;
    i1 %71 = scmp lt i32 %70, i32 1073741824;
    cbr i1 %71(prob = 0.97), ^while.body6, ^b8;
^b8:
    i32 %72 = phi [^b5, i32 %64] [^if.then2, i32 %34] [^if.else1, i32 %46] [^b7, i32 %69] [^b9, i32 0] [^b12, i32 %103] [^b14, i32 %109];
    cbr i1 %41(prob = 0.5), ^b10, ^while.body4;
^while.body8:
    i32 %73 = phi [^b6, i32 0] [^b12, i32 %103];
    i32 %74 = phi [^b6, i32 1] [^b12, i32 %104];
    i32 %75 = sdiv i32 %34, i32 %74;
    i32 %76 = sdiv i32 %46, i32 %74;
    i32 %77 = srem i32 %75, i32 2;
    i32 %78 = srem i32 %76, i32 2;
    i1 %79 = scmp eq i32 %77, i32 1;
    i1 %80 = scmp eq i32 %78, i32 1;
    i1 %81 = or i1 %79, i1 %80;
    cbr i1 %81(prob = 0.75), ^if.then3, ^if.else2;
^b9:
    i1 %82 = scmp eq i32 %17, i32 4;
    cbr i1 %82(prob = 0.5), ^while.body9, ^b8;
^if.then3:
    i32 %83 = mul i32 %73, i32 2;
    i32 %84 = add i32 %83, i32 1;
    ubr ^b12;
^if.else2:
    i32 %85 = mul i32 %73, i32 2;
    ubr ^b12;
^b10:
    i32 %86 = add i32 %29, i32 1;
    i1 %87 = scmp ge i32 %86, i32 %23;
    cbr i1 %87(prob = 0.5), ^b11, ^while.body3;
^while.body9:
    i32 %88 = phi [^b9, i32 0] [^b14, i32 %109];
    i32 %89 = phi [^b9, i32 1] [^b14, i32 %110];
    i32 %90 = sdiv i32 %34, i32 %89;
    i32 %91 = sdiv i32 %46, i32 %89;
    i32 %92 = srem i32 %90, i32 2;
    i32 %93 = srem i32 %91, i32 2;
    i1 %94 = scmp eq i32 %92, i32 1;
    i1 %95 = scmp eq i32 %93, i32 1;
    i1 %96 = and i1 %94, i1 %95;
    cbr i1 %96(prob = 0.25), ^if.then4, ^if.else3;
^if.then4:
    i32 %97 = mul i32 %88, i32 2;
    i32 %98 = add i32 %97, i32 1;
    ubr ^b14;
^b11:
    i32 %99 = add i32 %26, i32 1;
    i32 %100 = add i32 %26, i32 %25;
    i1 %101 = scmp ge i32 %99, i32 %10;
    i32* %102 = getelementptr &(i32* %1)[i32 %100];
    store i32* %102 with i32 %72;
    cbr i1 %101(prob = 0.5), ^b13, ^while.body2;
^b12:
    i32 %103 = phi [^if.then3, i32 %84] [^if.else2, i32 %85];
    i32 %104 = mul i32 %74, i32 2;
    i1 %105 = scmp lt i32 %104, i32 1073741824;
    cbr i1 %105(prob = 0.97), ^while.body8, ^b8;
^if.else3:
    i32 %106 = mul i32 %88, i32 2;
    ubr ^b14;
^b13:
    i32 %107 = add i32 %22, i32 1;
    i1 %108 = scmp ge i32 %107, i32 %9;
    cbr i1 %108(prob = 0.5), ^while.body10, ^while.body1;
^b14:
    i32 %109 = phi [^if.then4, i32 %98] [^if.else3, i32 %106];
    i32 %110 = mul i32 %89, i32 2;
    i1 %111 = scmp lt i32 %110, i32 1073741824;
    cbr i1 %111(prob = 0.97), ^while.body9, ^b8;
^while.body10:
    cbr i1 %14(prob = 0.97), ^while.body11, ^while.body12;
^while.body11:
    i32 %112 = phi [^while.body10, i32 0] [^while.body11, i32 %113];
    i32 %113 = add i32 %112, i32 1;
    i1 %114 = scmp lt i32 %113, i32 %11;
    i32* %115 = getelementptr &(i32* %0)[i32 %112];
    i32* %116 = getelementptr &(i32* %1)[i32 %112];
    i32 %117 = load i32* %116;
    store i32* %115 with i32 %117;
    cbr i1 %114(prob = 0.97), ^while.body11, ^while.body12;
^while.body12:
    i32 %118 = add i32 %15, i32 1;
    i1 %119 = scmp lt i32 %118, i32 %7;
    cbr i1 %119(prob = 0.97), ^while.body, ^b;
}
