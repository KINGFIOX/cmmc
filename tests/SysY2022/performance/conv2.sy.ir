internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @max { ReadOnly } = 1073741824;
internal func @checkrange(i32 %num) -> i32 {
^entry:
    i32* %num1 = alloc i32;
    store i32* %num1 with i32 %num;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %num1;
    i1 %1 = scmp gt i32 %0, i32 1073741824;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %num1;
    i32 %5 = sub i32 %4, i32 1073741824;
    store i32* %num1 with i32 %5;
    ubr ^while.header;
^b:
    ubr ^while.header1;
^while.header1:
    i32 %6 = load i32* %num1;
    i1 %7 = scmp lt i32 %6, i32 0;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %10 = load i32* %num1;
    i32 %11 = add i32 %10, i32 1073741824;
    store i32* %num1 with i32 %11;
    ubr ^while.header1;
^b1:
    i32 %12 = load i32* %num1;
    ret i32 %12;
}
internal func @reduce(i32 %kernelid, i32 %x, i32 %y) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %ret = alloc i32;
    i32* %i1 = alloc i32;
    i32* %ret1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %ret2 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %kernelid1 = alloc i32;
    store i32* %kernelid1 with i32 %kernelid;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %kernelid1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    i32 %4 = load i32* %kernelid1;
    i1 %5 = scmp eq i32 %4, i32 1;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b1;
^if.then:
    i32 %8 = load i32* %x1;
    i32 %9 = load i32* %y1;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = call (i32) -> i32 @checkrange(i32 %10);
    ret i32 %11;
^if.then1:
    store i32* %ret2 with i32 0;
    store i32* %i2 with i32 1;
    ubr ^while.header;
^b1:
    i32 %12 = load i32* %kernelid1;
    i1 %13 = scmp eq i32 %12, i32 2;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then2, ^b2;
^while.header:
    i32 %16 = load i32* %i2;
    i1 %17 = scmp lt i32 %16, i32 1073741824;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body, ^b4;
^if.then2:
    i32 %20 = load i32* %x1;
    i32 %21 = load i32* %y1;
    i1 %22 = scmp gt i32 %20, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then4, ^if.else;
^b2:
    i32 %25 = load i32* %kernelid1;
    i1 %26 = scmp eq i32 %25, i32 3;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then3, ^b3;
^while.body:
    i32 %29 = load i32* %x1;
    i32 %30 = load i32* %i2;
    i32 %31 = sdiv i32 %29, i32 %30;
    i32 %32 = srem i32 %31, i32 2;
    i32 %33 = load i32* %y1;
    i32 %34 = load i32* %i2;
    i32 %35 = sdiv i32 %33, i32 %34;
    i32 %36 = srem i32 %35, i32 2;
    i1 %37 = scmp eq i32 %32, i32 %36;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then5, ^if.else1;
^if.then3:
    store i32* %ret1 with i32 0;
    store i32* %i1 with i32 1;
    ubr ^while.header1;
^b3:
    i32 %40 = load i32* %kernelid1;
    i1 %41 = scmp eq i32 %40, i32 4;
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then6, ^b5;
^b4:
    i32 %44 = load i32* %ret2;
    ret i32 %44;
^if.then4:
    i32 %45 = load i32* %x1;
    ret i32 %45;
^if.else:
    i32 %46 = load i32* %y1;
    ret i32 %46;
^if.then5:
    i32 %47 = load i32* %ret2;
    i32 %48 = mul i32 %47, i32 2;
    store i32* %ret2 with i32 %48;
    ubr ^b6;
^if.else1:
    i32 %49 = load i32* %ret2;
    i32 %50 = mul i32 %49, i32 2;
    i32 %51 = add i32 %50, i32 1;
    store i32* %ret2 with i32 %51;
    ubr ^b6;
^if.then6:
    store i32* %ret with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %52 = load i32* %i1;
    i1 %53 = scmp lt i32 %52, i32 1073741824;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body1, ^b7;
^b5:
    ret i32 0;
^b6:
    i32 %56 = load i32* %i2;
    i32 %57 = mul i32 %56, i32 2;
    store i32* %i2 with i32 %57;
    ubr ^while.header;
^while.body1:
    i32 %58 = load i32* %x1;
    i32 %59 = load i32* %i1;
    i32 %60 = sdiv i32 %58, i32 %59;
    i32 %61 = srem i32 %60, i32 2;
    i1 %62 = scmp eq i32 %61, i32 1;
    i32 %63 = zext i1 %62 to i32;
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.5), ^b9, ^b8;
^while.header2:
    i32 %65 = load i32* %i;
    i1 %66 = scmp lt i32 %65, i32 1073741824;
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.97), ^while.body2, ^b10;
^b7:
    i32 %69 = load i32* %ret1;
    ret i32 %69;
^b8:
    i32 %70 = load i32* %y1;
    i32 %71 = load i32* %i1;
    i32 %72 = sdiv i32 %70, i32 %71;
    i32 %73 = srem i32 %72, i32 2;
    i1 %74 = scmp eq i32 %73, i32 1;
    i32 %75 = zext i1 %74 to i32;
    i1 %76 = scmp neq i32 %75, i32 0;
    ubr ^b9;
^b9:
    i1 %77 = phi [^b8, i1 %76] [^while.body1, i1 true];
    i32 %78 = zext i1 %77 to i32;
    i1 %79 = scmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.5), ^if.then7, ^if.else2;
^while.body2:
    i32 %80 = load i32* %x1;
    i32 %81 = load i32* %i;
    i32 %82 = sdiv i32 %80, i32 %81;
    i32 %83 = srem i32 %82, i32 2;
    i1 %84 = scmp eq i32 %83, i32 1;
    i32 %85 = zext i1 %84 to i32;
    i1 %86 = scmp neq i32 %85, i32 0;
    cbr i1 %86(prob = 0.5), ^b11, ^b12;
^b10:
    i32 %87 = load i32* %ret;
    ret i32 %87;
^if.then7:
    i32 %88 = load i32* %ret1;
    i32 %89 = mul i32 %88, i32 2;
    i32 %90 = add i32 %89, i32 1;
    store i32* %ret1 with i32 %90;
    ubr ^b13;
^if.else2:
    i32 %91 = load i32* %ret1;
    i32 %92 = mul i32 %91, i32 2;
    store i32* %ret1 with i32 %92;
    ubr ^b13;
^b11:
    i32 %93 = load i32* %y1;
    i32 %94 = load i32* %i;
    i32 %95 = sdiv i32 %93, i32 %94;
    i32 %96 = srem i32 %95, i32 2;
    i1 %97 = scmp eq i32 %96, i32 1;
    i32 %98 = zext i1 %97 to i32;
    i1 %99 = scmp neq i32 %98, i32 0;
    ubr ^b12;
^b12:
    i1 %100 = phi [^b11, i1 %99] [^while.body2, i1 false];
    i32 %101 = zext i1 %100 to i32;
    i1 %102 = scmp neq i32 %101, i32 0;
    cbr i1 %102(prob = 0.5), ^if.then8, ^if.else3;
^b13:
    i32 %103 = load i32* %i1;
    i32 %104 = mul i32 %103, i32 2;
    store i32* %i1 with i32 %104;
    ubr ^while.header1;
^if.then8:
    i32 %105 = load i32* %ret;
    i32 %106 = mul i32 %105, i32 2;
    i32 %107 = add i32 %106, i32 1;
    store i32* %ret with i32 %107;
    ubr ^b14;
^if.else3:
    i32 %108 = load i32* %ret;
    i32 %109 = mul i32 %108, i32 2;
    store i32* %ret with i32 %109;
    ubr ^b14;
^b14:
    i32 %110 = load i32* %i;
    i32 %111 = mul i32 %110, i32 2;
    store i32* %i with i32 %111;
    ubr ^while.header2;
^b15:
    ubr ^b2;
}
internal func @getvalue(i32* %array, i32 %n, i32 %m, i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    i32** %array1 = alloc i32*;
    store i32** %array1 with i32* %array;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %x1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = load i32* %y1;
    i1 %5 = scmp lt i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %11 = load i32* %x1;
    i32 %12 = load i32* %n1;
    i1 %13 = scmp ge i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    ubr ^b3;
^b3:
    i1 %16 = phi [^b2, i1 %15] [^b1, i1 true];
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^b5, ^b4;
^b4:
    i32 %19 = load i32* %y1;
    i32 %20 = load i32* %m1;
    i1 %21 = scmp ge i32 %19, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    ubr ^b5;
^b5:
    i1 %24 = phi [^b4, i1 %23] [^b3, i1 true];
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^b6;
^if.then:
    ret i32 0;
^b6:
    i32 %27 = load i32* %x1;
    i32 %28 = load i32* %m1;
    i32 %29 = mul i32 %27, i32 %28;
    i32 %30 = load i32* %y1;
    i32 %31 = add i32 %29, i32 %30;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = load i32** %array1;
    i32* %34 = getelementptr &(i32* %33)[i64 %32];
    i32 %35 = load i32* %34;
    ret i32 %35;
}
internal func @convn(i32 %kernelid, i32* %input, i32* %output, i32 %n, i32 %m, i32 %c) -> i32 {
^entry:
    i32* %true_ = alloc i32;
    i32* %curr = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %c1 = alloc i32;
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    i32** %output1 = alloc i32*;
    i32** %input1 = alloc i32*;
    i32* %kernelid1 = alloc i32;
    store i32* %kernelid1 with i32 %kernelid;
    store i32** %input1 with i32* %input;
    store i32** %output1 with i32* %output;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %c1 with i32 %c;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %x with i32 0;
    store i32* %y with i32 0;
    store i32* %curr with i32 0;
    store i32* %true_ with i32 1;
    ubr ^while.header;
^while.header:
    i1 %0 = scmp eq i32 1, i32 1;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i1 %3 = scmp eq i32 1, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %curr with i32 0;
    i32 %6 = load i32* %i;
    i32 %7 = load i32* %c1;
    i32 %8 = sdiv i32 %7, i32 2;
    i32 %9 = sub i32 %6, i32 %8;
    store i32* %x with i32 %9;
    ubr ^while.header2;
^b1:
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %n1;
    i1 %14 = scmp ge i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then, ^b2;
^if.then:
    ubr ^b;
^while.header2:
    i1 %17 = scmp eq i32 1, i32 1;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body2, ^b3;
^b2:
    ubr ^while.header;
^while.body2:
    i32 %20 = load i32* %j;
    i32 %21 = load i32* %c1;
    i32 %22 = sdiv i32 %21, i32 2;
    i32 %23 = sub i32 %20, i32 %22;
    store i32* %y with i32 %23;
    ubr ^while.header3;
^b3:
    i32 %24 = load i32* %i;
    i32 %25 = load i32* %m1;
    i32 %26 = mul i32 %24, i32 %25;
    i32 %27 = load i32* %j;
    i32 %28 = add i32 %26, i32 %27;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = load i32** %output1;
    i32* %31 = getelementptr &(i32* %30)[i64 %29];
    i32 %32 = load i32* %curr;
    store i32* %31 with i32 %32;
    i32 %33 = load i32* %j;
    i32 %34 = add i32 %33, i32 1;
    store i32* %j with i32 %34;
    i32 %35 = load i32* %j;
    i32 %36 = load i32* %m1;
    i1 %37 = scmp ge i32 %35, i32 %36;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    ubr ^b1;
^while.header3:
    i1 %40 = scmp eq i32 1, i32 1;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body3, ^b5;
^b4:
    ubr ^while.header1;
^while.body3:
    i32 %43 = load i32* %kernelid1;
    i32 %44 = load i32* %curr;
    i32* %45 = load i32** %input1;
    i32 %46 = load i32* %n1;
    i32 %47 = load i32* %m1;
    i32 %48 = load i32* %x;
    i32 %49 = load i32* %y;
    i32 %50 = call (i32*, i32, i32, i32, i32) -> i32 @getvalue(i32* %45, i32 %46, i32 %47, i32 %48, i32 %49);
    i32 %51 = call (i32, i32, i32) -> i32 @reduce(i32 %43, i32 %44, i32 %50);
    store i32* %curr with i32 %51;
    i32 %52 = load i32* %y;
    i32 %53 = add i32 %52, i32 1;
    store i32* %y with i32 %53;
    i32 %54 = load i32* %y;
    i32 %55 = load i32* %j;
    i32 %56 = load i32* %c1;
    i32 %57 = sdiv i32 %56, i32 2;
    i32 %58 = add i32 %55, i32 %57;
    i1 %59 = scmp ge i32 %54, i32 %58;
    i32 %60 = zext i1 %59 to i32;
    i1 %61 = scmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.5), ^if.then2, ^b6;
^b5:
    i32 %62 = load i32* %x;
    i32 %63 = add i32 %62, i32 1;
    store i32* %x with i32 %63;
    i32 %64 = load i32* %x;
    i32 %65 = load i32* %i;
    i32 %66 = load i32* %c1;
    i32 %67 = sdiv i32 %66, i32 2;
    i32 %68 = add i32 %65, i32 %67;
    i1 %69 = scmp ge i32 %64, i32 %68;
    i32 %70 = zext i1 %69 to i32;
    i1 %71 = scmp neq i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^if.then3, ^b7;
^if.then2:
    ubr ^b5;
^b6:
    ubr ^while.header3;
^if.then3:
    ubr ^b3;
^b7:
    ubr ^while.header2;
}
internal [10000000 * i32]* @a;
internal [10000000 * i32]* @b;
internal [10000 * i32]* @kernelid;
internal func @memmove(i32* %dst, i32* %src, i32 %n) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    i32** %src1 = alloc i32*;
    i32** %dst1 = alloc i32*;
    store i32** %dst1 with i32* %dst;
    store i32** %src1 with i32* %src;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %dst1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = load i32** %src1;
    i32* %12 = getelementptr &(i32* %11)[i64 %10];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
^b:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %task = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %c = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %c with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %n with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %m with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    store i32* %task with i32 %6;
    call (i32) -> void @starttime(i32 109);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %7 = load i32* %i;
    i32 %8 = load i32* %task;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([10000 * i32]* @kernelid)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32* %17 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    i32 %18 = load i32* %n;
    i32 %19 = load i32* %m;
    i32 %20 = load i32* %c;
    i32 %21 = call (i32, i32*, i32*, i32, i32, i32) -> i32 @convn(i32 %15, i32* %16, i32* %17, i32 %18, i32 %19, i32 %20);
    i32* %22 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32* %23 = getelementptr &([10000000 * i32]* @b)[i64 0][i64 0];
    i32 %24 = load i32* %n;
    i32 %25 = load i32* %m;
    i32 %26 = mul i32 %24, i32 %25;
    call (i32*, i32*, i32) -> void @memmove(i32* %22, i32* %23, i32 %26);
    i32 %27 = load i32* %i;
    i32 %28 = add i32 %27, i32 1;
    store i32* %i with i32 %28;
    ubr ^while.header;
^b:
    call (i32) -> void @stoptime(i32 116);
    i32 %29 = load i32* %n;
    i32 %30 = load i32* %m;
    i32 %31 = mul i32 %29, i32 %30;
    i32* %32 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %31, i32* %32);
    ret i32 0;
}
