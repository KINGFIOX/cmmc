internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 62);
    i32* %3 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    i32* %5 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = phi [^entry, i32 0] [^b4, i32 %37];
    i1 %7 = scmp lt i32 %6, i32 0;
    i1 %8 = scmp ge i32 %6, i32 %0;
    ubr ^while.body2;
^b:
    cbr i1 %4(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %9 = phi [^b, i32 0] [^b23, i32 %61];
    i1 %10 = scmp lt i32 %9, i32 0;
    i1 %11 = scmp ge i32 %9, i32 %0;
    i32 %12 = mul i32 %9, i32 %0;
    ubr ^while.body3;
^while.body2:
    i32 %13 = phi [^while.body, i32 0] [^b2, i32 %27];
    i32 %14 = mul i32 %13, i32 %0;
    i32 %15 = add i32 %6, i32 %14;
    i32* %16 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %15];
    i1 %17 = scmp lt i32 %13, i32 0;
    cbr i1 %17(prob = 0.5), ^b2, ^b3;
^b1:
    i32 %18 = mul i32 %0, i32 %0;
    i1 %19 = scmp gt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body4, ^entry1;
^while.body3:
    i32 %20 = phi [^while.body1, i32 0] [^b20, i32 %52];
    i32 %21 = mul i32 %20, i32 %0;
    i1 %22 = scmp lt i32 %20, i32 0;
    i1 %23 = scmp ge i32 %20, i32 %0;
    i32 %24 = add i32 %9, i32 %21;
    i32* %25 = getelementptr &(i32* %5)[i32 %24];
    ubr ^while.body5;
^b2:
    i32 %26 = phi [^while.body2, i32 -1] [^b3, i32 -1] [^b5, i32 -1] [^b8, i32 -1] [^b9, i32 %42];
    store i32* %16 with i32 %26;
    i32 %27 = add i32 %13, i32 1;
    i1 %28 = scmp lt i32 %27, i32 %0;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b4;
^b3:
    i1 %29 = scmp ge i32 %13, i32 %0;
    cbr i1 %29(prob = 0.5), ^b2, ^b5;
^while.body4:
    i32 %30 = phi [^b1, i32 0] [^while.body4, i32 %34];
    i32* %31 = getelementptr &(i32* %3)[i32 %30];
    i32* %32 = getelementptr &(i32* %5)[i32 %30];
    i32 %33 = load i32* %32;
    store i32* %31 with i32 %33;
    i32 %34 = add i32 %30, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %18;
    cbr i1 %35(prob = 0.97), ^while.body4, ^entry1;
^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %18, i32* %3);
    ret i32 0;
^while.body5:
    i32 %36 = phi [^while.body3, i32 0] [^b14, i32 %46];
    cbr i1 %22(prob = 0.5), ^b6, ^b7;
^b4:
    i32 %37 = add i32 %6, i32 1;
    i1 %38 = scmp lt i32 %37, i32 %0;
    cbr i1 %38(prob = 0.97), ^while.body, ^b;
^b5:
    cbr i1 %7(prob = 0.5), ^b2, ^b8;
^b6:
    i32 %39 = phi [^while.body5, i32 -1] [^b7, i32 -1] [^b11, i32 -1] [^b15, i32 -1] [^b17, i32 %50];
    i1 %40 = scmp gt i32 %39, i32 -1;
    cbr i1 %40(prob = 0.5), ^entry2, ^b10;
^b7:
    cbr i1 %23(prob = 0.5), ^b6, ^b11;
^b8:
    cbr i1 %8(prob = 0.5), ^b2, ^b9;
^entry2:
    cbr i1 %10(prob = 0.5), ^b12, ^b13;
^b9:
    i32* %41 = getelementptr &(i32* %1)[i32 %15];
    i32 %42 = load i32* %41;
    ubr ^b2;
^b10:
    i1 %43 = phi [^b6, i1 false] [^b12, i1 %45];
    cbr i1 %43(prob = 0.5), ^entry3, ^b14;
^b11:
    cbr i1 %10(prob = 0.5), ^b6, ^b15;
^b12:
    i32 %44 = phi [^entry2, i32 -1] [^b13, i32 -1] [^b18, i32 -1] [^b21, i32 -1] [^b25, i32 %66];
    i1 %45 = scmp ge i32 %44, i32 0;
    ubr ^b10;
^b13:
    cbr i1 %11(prob = 0.5), ^b12, ^b18;
^entry3:
    cbr i1 %22(prob = 0.5), ^b16, ^b19;
^b14:
    i32 %46 = add i32 %36, i32 1;
    i1 %47 = scmp lt i32 %46, i32 %0;
    cbr i1 %47(prob = 0.97), ^while.body5, ^b20;
^b15:
    cbr i1 %11(prob = 0.5), ^b6, ^b17;
^b16:
    i32 %48 = phi [^entry3, i32 -1] [^b19, i32 -1] [^b22, i32 -1] [^b29, i32 -1] [^b33, i32 %76];
    i1 %49 = scmp lt i32 %48, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then, ^if.else;
^b17:
    i32 %50 = load i32* %25;
    ubr ^b6;
^b18:
    i1 %51 = scmp lt i32 %36, i32 0;
    cbr i1 %51(prob = 0.5), ^b12, ^b21;
^b19:
    cbr i1 %23(prob = 0.5), ^b16, ^b22;
^b20:
    i32 %52 = add i32 %20, i32 1;
    i1 %53 = scmp lt i32 %52, i32 %0;
    cbr i1 %53(prob = 0.97), ^while.body3, ^b23;
^if.then:
    i32 %54 = add i32 %36, i32 %21;
    i32* %55 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %54];
    cbr i1 %22(prob = 0.5), ^b24, ^b27;
^if.else:
    i32 %56 = add i32 %36, i32 %21;
    i32* %57 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    cbr i1 %22(prob = 0.5), ^b26, ^b28;
^b21:
    i1 %59 = scmp ge i32 %36, i32 %0;
    cbr i1 %59(prob = 0.5), ^b12, ^b25;
^b22:
    i1 %60 = scmp lt i32 %36, i32 0;
    cbr i1 %60(prob = 0.5), ^b16, ^b29;
^b23:
    i32 %61 = add i32 %9, i32 1;
    i1 %62 = scmp lt i32 %61, i32 %0;
    cbr i1 %62(prob = 0.97), ^while.body1, ^b1;
^b24:
    i32 %63 = phi [^if.then, i32 -1] [^b27, i32 -1] [^b34, i32 -1] [^b38, i32 -1] [^b41, i32 %79];
    cbr i1 %10(prob = 0.5), ^b30, ^b32;
^b25:
    i32 %64 = add i32 %36, i32 %12;
    i32* %65 = getelementptr &(i32* %5)[i32 %64];
    i32 %66 = load i32* %65;
    ubr ^b12;
^b26:
    i32 %67 = phi [^if.else, i32 -1] [^b28, i32 -1] [^b36, i32 -1] [^b40, i32 -1] [^b42, i32 %80];
    cbr i1 %10(prob = 0.5), ^b31, ^b35;
^b27:
    cbr i1 %23(prob = 0.5), ^b24, ^b34;
^b28:
    cbr i1 %23(prob = 0.5), ^b26, ^b36;
^b29:
    i1 %68 = scmp ge i32 %36, i32 %0;
    cbr i1 %68(prob = 0.5), ^b16, ^b33;
^b30:
    i32 %69 = phi [^b24, i32 -1] [^b32, i32 -1] [^b37, i32 -1] [^b43, i32 -1] [^b45, i32 %85];
    i32 %70 = add i32 %63, i32 %69;
    store i32* %55 with i32 %70;
    ubr ^b14;
^b31:
    i32 %71 = phi [^b26, i32 -1] [^b35, i32 -1] [^b39, i32 -1] [^b44, i32 -1] [^b46, i32 %88];
    i32 %72 = add i32 %67, i32 %71;
    i1 %73 = scmp gt i32 %58, i32 %72;
    cbr i1 %73(prob = 0.5), ^if.then, ^b14;
^b32:
    cbr i1 %11(prob = 0.5), ^b30, ^b37;
^b33:
    i32 %74 = add i32 %36, i32 %21;
    i32* %75 = getelementptr &(i32* %5)[i32 %74];
    i32 %76 = load i32* %75;
    ubr ^b16;
^b34:
    cbr i1 %10(prob = 0.5), ^b24, ^b38;
^b35:
    cbr i1 %11(prob = 0.5), ^b31, ^b39;
^b36:
    cbr i1 %10(prob = 0.5), ^b26, ^b40;
^b37:
    i1 %77 = scmp lt i32 %36, i32 0;
    cbr i1 %77(prob = 0.5), ^b30, ^b43;
^b38:
    cbr i1 %11(prob = 0.5), ^b24, ^b41;
^b39:
    i1 %78 = scmp lt i32 %36, i32 0;
    cbr i1 %78(prob = 0.5), ^b31, ^b44;
^b40:
    cbr i1 %11(prob = 0.5), ^b26, ^b42;
^b41:
    i32 %79 = load i32* %25;
    ubr ^b24;
^b42:
    i32 %80 = load i32* %25;
    ubr ^b26;
^b43:
    i1 %81 = scmp ge i32 %36, i32 %0;
    cbr i1 %81(prob = 0.5), ^b30, ^b45;
^b44:
    i1 %82 = scmp ge i32 %36, i32 %0;
    cbr i1 %82(prob = 0.5), ^b31, ^b46;
^b45:
    i32 %83 = add i32 %36, i32 %12;
    i32* %84 = getelementptr &(i32* %5)[i32 %83];
    i32 %85 = load i32* %84;
    ubr ^b30;
^b46:
    i32 %86 = add i32 %36, i32 %12;
    i32* %87 = getelementptr &(i32* %5)[i32 %86];
    i32 %88 = load i32* %87;
    ubr ^b31;
}
