internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %n1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n1 with i32 %0;
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n1;
    call (i32) -> void @starttime(i32 62);
    i32* %4 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i32* %5 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^b, i32 %17] [^entry, i32 0];
    i1 %7 = scmp lt i32 %6, i32 %3;
    i1 %8 = scmp lt i32 %6, i32 0;
    i1 %9 = scmp ge i32 %6, i32 %3;
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %10 = phi [^while.header, i32 0] [^while.body3, i32 %52];
    i1 %11 = scmp lt i32 %10, i32 %3;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %12 = phi [^while.header, i32 0] [^b4, i32 %32];
    i1 %13 = scmp lt i32 %12, i32 %3;
    i1 %14 = scmp lt i32 %12, i32 0;
    i1 %15 = scmp ge i32 %12, i32 %3;
    i32 %16 = mul i32 %12, i32 %3;
    cbr i1 %13(prob = 0.97), ^while.header3, ^b1;
^b:
    i32 %17 = add i32 %6, i32 1;
    ubr ^while.header;
^while.body:
    i32 %18 = mul i32 %10, i32 %3;
    i32 %19 = add i32 %18, i32 %6;
    i32* %20 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %19];
    i1 %21 = scmp lt i32 %10, i32 0;
    cbr i1 %21(prob = 0.5), ^b3, ^b2;
^b1:
    i32 %22 = mul i32 %3, i32 %3;
    store i32* %n with i32 %22;
    store i32* %i with i32 0;
    ubr ^while.header5;
^while.header3:
    i32 %23 = phi [^while.header2, i32 0] [^b7, i32 %47];
    i1 %24 = scmp lt i32 %23, i32 %3;
    i1 %25 = scmp lt i32 %23, i32 0;
    i1 %26 = scmp ge i32 %23, i32 %3;
    i32 %27 = mul i32 %23, i32 %3;
    i32 %28 = add i32 %27, i32 %12;
    i32* %29 = getelementptr &(i32* %5)[i32 %28];
    cbr i1 %24(prob = 0.97), ^while.header4, ^b4;
^b2:
    i1 %30 = scmp ge i32 %10, i32 %3;
    ubr ^b3;
^b3:
    i1 %31 = phi [^while.body, i1 true] [^b2, i1 %30];
    cbr i1 %31(prob = 0.5), ^b6, ^b5;
^b4:
    i32 %32 = add i32 %12, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %33 = phi [^while.header3, i32 0] [^b23, i32 %62];
    i1 %34 = scmp lt i32 %33, i32 %3;
    cbr i1 %34(prob = 0.97), ^while.body2, ^b7;
^while.header5:
    i32 %35 = phi [^while.body1, i32 %43] [^b1, i32 %3];
    i32 %36 = phi [^while.body1, i32 %46] [^b1, i32 0];
    i32 %37 = phi [^b1, i32 %22] [^while.body1, i32 %44];
    i1 %38 = scmp lt i32 %36, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b8;
^b5:
    ubr ^b6;
^b6:
    i1 %39 = phi [^b3, i1 true] [^b5, i1 %8];
    cbr i1 %39(prob = 0.5), ^b10, ^b9;
^while.body1:
    i32* %40 = getelementptr &(i32* %4)[i32 %36];
    i32* %41 = getelementptr &(i32* %5)[i32 %36];
    i32 %42 = load i32* %41;
    store i32* %40 with i32 %42;
    i32 %43 = load i32* %n1;
    i32 %44 = load i32* %n;
    i32 %45 = load i32* %i;
    i32 %46 = add i32 %45, i32 1;
    store i32* %i with i32 %46;
    ubr ^while.header5;
^b7:
    i32 %47 = add i32 %23, i32 1;
    ubr ^while.header3;
^while.body2:
    cbr i1 %25(prob = 0.5), ^b12, ^b11;
^b8:
    call (i32) -> void @stoptime(i32 64);
    i32 %48 = mul i32 %35, i32 %35;
    call (i32, i32*) -> void @putarray(i32 %48, i32* %4);
    ret i32 0;
^b9:
    ubr ^b10;
^b10:
    i1 %49 = phi [^b6, i1 true] [^b9, i1 %9];
    cbr i1 %49(prob = 0.5), ^while.body3, ^b13;
^b11:
    ubr ^b12;
^b12:
    i1 %50 = phi [^while.body2, i1 true] [^b11, i1 %26];
    cbr i1 %50(prob = 0.5), ^b15, ^b14;
^while.body3:
    i32 %51 = phi [^b10, i32 -1] [^b13, i32 %54];
    store i32* %20 with i32 %51;
    i32 %52 = add i32 %10, i32 1;
    ubr ^while.header1;
^b13:
    i32* %53 = getelementptr &(i32* %1)[i32 %19];
    i32 %54 = load i32* %53;
    ubr ^while.body3;
^b14:
    ubr ^b15;
^b15:
    i1 %55 = phi [^b14, i1 %14] [^b12, i1 true];
    cbr i1 %55(prob = 0.5), ^b17, ^b16;
^b16:
    ubr ^b17;
^b17:
    i1 %56 = phi [^b16, i1 %15] [^b15, i1 true];
    cbr i1 %56(prob = 0.5), ^while.body4, ^b18;
^b18:
    i32 %57 = load i32* %29;
    ubr ^while.body4;
^while.body4:
    i32 %58 = phi [^b17, i32 -1] [^b18, i32 %57];
    i1 %59 = scmp gt i32 %58, i32 -1;
    cbr i1 %59(prob = 0.5), ^b19, ^b20;
^b19:
    cbr i1 %14(prob = 0.5), ^b22, ^b21;
^b20:
    i1 %60 = phi [^while.body4, i1 false] [^b32, i1 %71];
    cbr i1 %60(prob = 0.5), ^if.then, ^b23;
^b21:
    ubr ^b22;
^b22:
    i1 %61 = phi [^b19, i1 true] [^b21, i1 %15];
    cbr i1 %61(prob = 0.5), ^b25, ^b24;
^b23:
    i32 %62 = add i32 %33, i32 1;
    ubr ^while.header4;
^if.then:
    cbr i1 %25(prob = 0.5), ^b27, ^b26;
^b24:
    i1 %63 = scmp lt i32 %33, i32 0;
    ubr ^b25;
^b25:
    i1 %64 = phi [^b22, i1 true] [^b24, i1 %63];
    cbr i1 %64(prob = 0.5), ^b29, ^b28;
^b26:
    ubr ^b27;
^b27:
    i1 %65 = phi [^b26, i1 %26] [^if.then, i1 true];
    cbr i1 %65(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %66 = scmp ge i32 %33, i32 %3;
    ubr ^b29;
^b29:
    i1 %67 = phi [^b25, i1 true] [^b28, i1 %66];
    cbr i1 %67(prob = 0.5), ^b32, ^b33;
^b30:
    i1 %68 = scmp lt i32 %33, i32 0;
    ubr ^b31;
^b31:
    i1 %69 = phi [^b30, i1 %68] [^b27, i1 true];
    cbr i1 %69(prob = 0.5), ^b35, ^b34;
^b32:
    i32 %70 = phi [^b29, i32 -1] [^b33, i32 %74];
    i1 %71 = scmp ge i32 %70, i32 0;
    ubr ^b20;
^b33:
    i32 %72 = add i32 %33, i32 %16;
    i32* %73 = getelementptr &(i32* %5)[i32 %72];
    i32 %74 = load i32* %73;
    ubr ^b32;
^b34:
    i1 %75 = scmp ge i32 %33, i32 %3;
    ubr ^b35;
^b35:
    i1 %76 = phi [^b31, i1 true] [^b34, i1 %75];
    cbr i1 %76(prob = 0.5), ^if.then1, ^b36;
^b36:
    i32 %77 = add i32 %33, i32 %27;
    i32* %78 = getelementptr &(i32* %5)[i32 %77];
    i32 %79 = load i32* %78;
    ubr ^if.then1;
^if.then1:
    i32 %80 = phi [^b35, i32 -1] [^b36, i32 %79];
    i1 %81 = scmp lt i32 %80, i32 0;
    cbr i1 %81(prob = 0.5), ^if.then2, ^if.else;
^if.then2:
    i32 %82 = add i32 %33, i32 %27;
    i32* %83 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %82];
    cbr i1 %25(prob = 0.5), ^b39, ^b37;
^if.else:
    i32 %84 = add i32 %33, i32 %27;
    i32* %85 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    cbr i1 %25(prob = 0.5), ^b40, ^b38;
^b37:
    ubr ^b39;
^b38:
    ubr ^b40;
^b39:
    i1 %87 = phi [^if.then2, i1 true] [^b37, i1 %26];
    cbr i1 %87(prob = 0.5), ^b43, ^b41;
^b40:
    i1 %88 = phi [^if.else, i1 true] [^b38, i1 %26];
    cbr i1 %88(prob = 0.5), ^b44, ^b42;
^b41:
    ubr ^b43;
^b42:
    ubr ^b44;
^b43:
    i1 %89 = phi [^b39, i1 true] [^b41, i1 %14];
    cbr i1 %89(prob = 0.5), ^b47, ^b45;
^b44:
    i1 %90 = phi [^b40, i1 true] [^b42, i1 %14];
    cbr i1 %90(prob = 0.5), ^b48, ^b46;
^b45:
    ubr ^b47;
^b46:
    ubr ^b48;
^b47:
    i1 %91 = phi [^b43, i1 true] [^b45, i1 %15];
    cbr i1 %91(prob = 0.5), ^if.then3, ^b49;
^b48:
    i1 %92 = phi [^b44, i1 true] [^b46, i1 %15];
    cbr i1 %92(prob = 0.5), ^if.else1, ^b50;
^b49:
    i32 %93 = load i32* %29;
    ubr ^if.then3;
^b50:
    i32 %94 = load i32* %29;
    ubr ^if.else1;
^if.then3:
    i32 %95 = phi [^b47, i32 -1] [^b49, i32 %93];
    cbr i1 %14(prob = 0.5), ^b53, ^b51;
^if.else1:
    i32 %96 = phi [^b48, i32 -1] [^b50, i32 %94];
    cbr i1 %14(prob = 0.5), ^b54, ^b52;
^b51:
    ubr ^b53;
^b52:
    ubr ^b54;
^b53:
    i1 %97 = phi [^if.then3, i1 true] [^b51, i1 %15];
    cbr i1 %97(prob = 0.5), ^b57, ^b55;
^b54:
    i1 %98 = phi [^if.else1, i1 true] [^b52, i1 %15];
    cbr i1 %98(prob = 0.5), ^b58, ^b56;
^b55:
    i1 %99 = scmp lt i32 %33, i32 0;
    ubr ^b57;
^b56:
    i1 %100 = scmp lt i32 %33, i32 0;
    ubr ^b58;
^b57:
    i1 %101 = phi [^b55, i1 %99] [^b53, i1 true];
    cbr i1 %101(prob = 0.5), ^b61, ^b59;
^b58:
    i1 %102 = phi [^b56, i1 %100] [^b54, i1 true];
    cbr i1 %102(prob = 0.5), ^b62, ^b60;
^b59:
    i1 %103 = scmp ge i32 %33, i32 %3;
    ubr ^b61;
^b60:
    i1 %104 = scmp ge i32 %33, i32 %3;
    ubr ^b62;
^b61:
    i1 %105 = phi [^b59, i1 %103] [^b57, i1 true];
    cbr i1 %105(prob = 0.5), ^if.then4, ^b63;
^b62:
    i1 %106 = phi [^b60, i1 %104] [^b58, i1 true];
    cbr i1 %106(prob = 0.5), ^if.else2, ^b64;
^if.then4:
    i32 %107 = phi [^b61, i32 -1] [^b63, i32 %111];
    i32 %108 = add i32 %95, i32 %107;
    store i32* %83 with i32 %108;
    ubr ^b23;
^b63:
    i32 %109 = add i32 %33, i32 %16;
    i32* %110 = getelementptr &(i32* %5)[i32 %109];
    i32 %111 = load i32* %110;
    ubr ^if.then4;
^b64:
    i32 %112 = add i32 %33, i32 %16;
    i32* %113 = getelementptr &(i32* %5)[i32 %112];
    i32 %114 = load i32* %113;
    ubr ^if.else2;
^if.else2:
    i32 %115 = phi [^b62, i32 -1] [^b64, i32 %114];
    i32 %116 = add i32 %96, i32 %115;
    i1 %117 = scmp gt i32 %86, i32 %116;
    cbr i1 %117(prob = 0.5), ^if.then2, ^b23;
}
