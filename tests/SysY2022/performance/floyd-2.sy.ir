internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @maxlen { ReadOnly } = 2097152;
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
internal [2097152 * i32]* @c;
internal func @getvalue(i32* %a, i32 %n, i32 %i, i32 %j) -> i32 {
^entry:
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %n1 = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %n1 with i32 %n;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    i32 %0 = load i32* %i1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = load i32* %i1;
    i32 %5 = load i32* %n1;
    i1 %6 = scmp ge i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    ubr ^b1;
^b1:
    i1 %9 = phi [^b, i1 %8] [^entry, i1 true];
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %12 = load i32* %j1;
    i1 %13 = scmp lt i32 %12, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    ubr ^b3;
^b3:
    i1 %16 = phi [^b2, i1 %15] [^b1, i1 true];
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^b5, ^b4;
^b4:
    i32 %19 = load i32* %j1;
    i32 %20 = load i32* %n1;
    i1 %21 = scmp ge i32 %19, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    ubr ^b5;
^b5:
    i1 %24 = phi [^b4, i1 %23] [^b3, i1 true];
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^b6;
^if.then:
    ret i32 -1;
^b6:
    i32 %27 = load i32* %i1;
    i32 %28 = load i32* %n1;
    i32 %29 = mul i32 %27, i32 %28;
    i32 %30 = load i32* %j1;
    i32 %31 = add i32 %29, i32 %30;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = load i32** %a1;
    i32* %34 = getelementptr &(i32* %33)[i64 %32];
    i32 %35 = load i32* %34;
    ret i32 %35;
}
internal func @mem_move(i32* %src, i32* %dst, i32 %n) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    i32** %dst1 = alloc i32*;
    i32** %src1 = alloc i32*;
    store i32** %src1 with i32* %src;
    store i32** %dst1 with i32* %dst;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %dst1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = load i32** %src1;
    i32* %12 = getelementptr &(i32* %11)[i64 %10];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
^b:
    ret;
}
internal func @floyd(i32* %w, i32* %dst, i32 %n) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    i32* %k = alloc i32;
    i32* %n1 = alloc i32;
    i32** %dst1 = alloc i32*;
    i32** %w1 = alloc i32*;
    store i32** %w1 with i32* %w;
    store i32** %dst1 with i32* %dst;
    store i32* %n1 with i32 %n;
    store i32* %k with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %k;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^b:
    store i32* %k with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %5 = load i32* %i1;
    i32 %6 = load i32* %n1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %10 = load i32* %k;
    i32 %11 = load i32* %n1;
    i1 %12 = scmp lt i32 %10, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %15 = load i32* %i1;
    i32 %16 = load i32* %n1;
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = load i32* %k;
    i32 %19 = add i32 %17, i32 %18;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %20];
    i32* %22 = load i32** %w1;
    i32 %23 = load i32* %n1;
    i32 %24 = load i32* %i1;
    i32 %25 = load i32* %k;
    i32 %26 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %22, i32 %23, i32 %24, i32 %25);
    store i32* %21 with i32 %26;
    i32 %27 = load i32* %i1;
    i32 %28 = add i32 %27, i32 1;
    store i32* %i1 with i32 %28;
    ubr ^while.header1;
^b1:
    i32 %29 = load i32* %k;
    i32 %30 = add i32 %29, i32 1;
    store i32* %k with i32 %30;
    ubr ^while.header;
^while.body2:
    store i32* %i with i32 0;
    ubr ^while.header3;
^b2:
    i32* %31 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32* %32 = load i32** %dst1;
    i32 %33 = load i32* %n1;
    i32 %34 = load i32* %n1;
    i32 %35 = mul i32 %33, i32 %34;
    call (i32*, i32*, i32) -> void @mem_move(i32* %31, i32* %32, i32 %35);
    ret;
^while.header3:
    i32 %36 = load i32* %i;
    i32 %37 = load i32* %n1;
    i1 %38 = scmp lt i32 %36, i32 %37;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    store i32* %j with i32 0;
    ubr ^while.header4;
^b3:
    i32 %41 = load i32* %k;
    i32 %42 = add i32 %41, i32 1;
    store i32* %k with i32 %42;
    ubr ^while.header2;
^while.header4:
    i32 %43 = load i32* %j;
    i32 %44 = load i32* %n1;
    i1 %45 = scmp lt i32 %43, i32 %44;
    i32 %46 = zext i1 %45 to i32;
    i1 %47 = scmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.97), ^while.body4, ^b4;
^b4:
    i32 %48 = load i32* %i;
    i32 %49 = add i32 %48, i32 1;
    store i32* %i with i32 %49;
    ubr ^while.header3;
^while.body4:
    i32* %50 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %51 = load i32* %n1;
    i32 %52 = load i32* %i;
    i32 %53 = load i32* %k;
    i32 %54 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %50, i32 %51, i32 %52, i32 %53);
    i1 %55 = scmp ge i32 %54, i32 0;
    i32 %56 = zext i1 %55 to i32;
    i1 %57 = scmp neq i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^b5, ^b6;
^b5:
    i32* %58 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %59 = load i32* %n1;
    i32 %60 = load i32* %k;
    i32 %61 = load i32* %j;
    i32 %62 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %58, i32 %59, i32 %60, i32 %61);
    i1 %63 = scmp ge i32 %62, i32 0;
    i32 %64 = zext i1 %63 to i32;
    i1 %65 = scmp neq i32 %64, i32 0;
    ubr ^b6;
^b6:
    i1 %66 = phi [^b5, i1 %65] [^while.body4, i1 false];
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.5), ^if.then, ^b7;
^b7:
    i32 %69 = load i32* %j;
    i32 %70 = add i32 %69, i32 1;
    store i32* %j with i32 %70;
    ubr ^while.header4;
^if.then:
    i32* %71 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %72 = load i32* %n1;
    i32 %73 = load i32* %i;
    i32 %74 = load i32* %j;
    i32 %75 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %71, i32 %72, i32 %73, i32 %74);
    i1 %76 = scmp lt i32 %75, i32 0;
    i32 %77 = zext i1 %76 to i32;
    i1 %78 = scmp neq i32 %77, i32 0;
    cbr i1 %78(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %79 = load i32* %i;
    i32 %80 = load i32* %n1;
    i32 %81 = mul i32 %79, i32 %80;
    i32 %82 = load i32* %j;
    i32 %83 = add i32 %81, i32 %82;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %84];
    i32* %86 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %87 = load i32* %n1;
    i32 %88 = load i32* %i;
    i32 %89 = load i32* %k;
    i32 %90 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %86, i32 %87, i32 %88, i32 %89);
    i32* %91 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %92 = load i32* %n1;
    i32 %93 = load i32* %k;
    i32 %94 = load i32* %j;
    i32 %95 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %91, i32 %92, i32 %93, i32 %94);
    i32 %96 = add i32 %90, i32 %95;
    store i32* %85 with i32 %96;
    ubr ^b8;
^if.else:
    i32 %97 = load i32* %i;
    i32 %98 = load i32* %n1;
    i32 %99 = mul i32 %97, i32 %98;
    i32 %100 = load i32* %j;
    i32 %101 = add i32 %99, i32 %100;
    i64 %102 = sext i32 %101 to i64;
    i32* %103 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %102];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %106 = load i32* %n1;
    i32 %107 = load i32* %i;
    i32 %108 = load i32* %k;
    i32 %109 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %105, i32 %106, i32 %107, i32 %108);
    i32* %110 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %111 = load i32* %n1;
    i32 %112 = load i32* %k;
    i32 %113 = load i32* %j;
    i32 %114 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %110, i32 %111, i32 %112, i32 %113);
    i32 %115 = add i32 %109, i32 %114;
    i1 %116 = scmp gt i32 %104, i32 %115;
    i32 %117 = zext i1 %116 to i32;
    i1 %118 = scmp neq i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^if.then2, ^b9;
^b8:
    ubr ^b7;
^if.then2:
    i32 %119 = load i32* %i;
    i32 %120 = load i32* %n1;
    i32 %121 = mul i32 %119, i32 %120;
    i32 %122 = load i32* %j;
    i32 %123 = add i32 %121, i32 %122;
    i64 %124 = sext i32 %123 to i64;
    i32* %125 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %124];
    i32* %126 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %127 = load i32* %n1;
    i32 %128 = load i32* %i;
    i32 %129 = load i32* %k;
    i32 %130 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %126, i32 %127, i32 %128, i32 %129);
    i32* %131 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %132 = load i32* %n1;
    i32 %133 = load i32* %k;
    i32 %134 = load i32* %j;
    i32 %135 = call (i32*, i32, i32, i32) -> i32 @getvalue(i32* %131, i32 %132, i32 %133, i32 %134);
    i32 %136 = add i32 %130, i32 %135;
    store i32* %125 with i32 %136;
    ubr ^b9;
^b9:
    ubr ^b8;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32) -> void @starttime(i32 62);
    i32* %3 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32* %4 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i32 %5 = load i32* %n;
    call (i32*, i32*, i32) -> void @floyd(i32* %3, i32* %4, i32 %5);
    call (i32) -> void @stoptime(i32 64);
    i32 %6 = load i32* %n;
    i32 %7 = load i32* %n;
    i32 %8 = mul i32 %6, i32 %7;
    i32* %9 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %8, i32* %9);
    ret i32 0;
}
