internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %n1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n1 with i32 %0;
    i32* %1 = getelementptr &([2097152 * i32]* @w)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n1;
    call (i32) -> void @starttime(i32 62);
    i32* %4 = getelementptr &([2097152 * i32]* @dst)[i64 0][i64 0];
    i32* %5 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^b, i32 %12] [^entry, i32 %3];
    i32 %7 = phi [^b, i32 %24] [^entry, i32 0];
    i32 %8 = phi [^b, i32 %15] [^entry, i32 %3];
    i32* %9 = phi [^b, i32* %16] [^entry, i32* %4];
    i32* %10 = phi [^b, i32* %17] [^entry, i32* %1];
    i1 %11 = scmp lt i32 %7, i32 %8;
    cbr i1 %11(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %12 = phi [^while.header, i32 %6] [^while.body3, i32 %12];
    i32 %13 = phi [^while.header, i32 0] [^while.body3, i32 %69];
    i32 %14 = phi [^while.header, i32 %7] [^while.body3, i32 %14];
    i32 %15 = phi [^while.header, i32 %8] [^while.body3, i32 %15];
    i32* %16 = phi [^while.header, i32* %9] [^while.body3, i32* %16];
    i32* %17 = phi [^while.header, i32* %10] [^while.body3, i32* %17];
    i1 %18 = scmp lt i32 %13, i32 %15;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %19 = phi [^while.header, i32 %6] [^b4, i32 %30];
    i32 %20 = phi [^while.header, i32 0] [^b4, i32 %38];
    i32 %21 = phi [^while.header, i32 %8] [^b4, i32 %33];
    i32* %22 = phi [^while.header, i32* %9] [^b4, i32* %34];
    i1 %23 = scmp lt i32 %20, i32 %21;
    cbr i1 %23(prob = 0.97), ^while.header3, ^b1;
^b:
    i32 %24 = add i32 %14, i32 1;
    ubr ^while.header;
^while.body:
    i32 %25 = mul i32 %15, i32 %13;
    i32 %26 = add i32 %25, i32 %14;
    i32* %27 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %26];
    i1 %28 = scmp lt i32 %13, i32 0;
    cbr i1 %28(prob = 0.5), ^b3, ^b2;
^b1:
    i32 %29 = mul i32 %21, i32 %21;
    store i32* %n with i32 %29;
    store i32* %i with i32 0;
    ubr ^while.header5;
^while.header3:
    i32 %30 = phi [^while.header2, i32 %19] [^b7, i32 %39];
    i32 %31 = phi [^while.header2, i32 0] [^b7, i32 %61];
    i32 %32 = phi [^while.header2, i32 %20] [^b7, i32 %42];
    i32 %33 = phi [^while.header2, i32 %21] [^b7, i32 %43];
    i32* %34 = phi [^while.header2, i32* %22] [^b7, i32* %44];
    i1 %35 = scmp lt i32 %31, i32 %33;
    cbr i1 %35(prob = 0.97), ^while.header4, ^b4;
^b2:
    i1 %36 = scmp ge i32 %13, i32 %15;
    ubr ^b3;
^b3:
    i1 %37 = phi [^while.body, i1 true] [^b2, i1 %36];
    cbr i1 %37(prob = 0.5), ^b6, ^b5;
^b4:
    i32 %38 = add i32 %32, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %39 = phi [^while.header3, i32 %30] [^b23, i32 %39];
    i32 %40 = phi [^while.header3, i32 0] [^b23, i32 %86];
    i32 %41 = phi [^while.header3, i32 %31] [^b23, i32 %41];
    i32 %42 = phi [^while.header3, i32 %32] [^b23, i32 %42];
    i32 %43 = phi [^while.header3, i32 %33] [^b23, i32 %43];
    i32* %44 = phi [^while.header3, i32* %34] [^b23, i32* %44];
    i1 %45 = scmp lt i32 %40, i32 %43;
    cbr i1 %45(prob = 0.97), ^while.body2, ^b7;
^while.header5:
    i32 %46 = phi [^while.body1, i32 %57] [^b1, i32 %19];
    i32* %47 = phi [^while.body1, i32* %47] [^b1, i32* %5];
    i32* %48 = phi [^while.body1, i32* %48] [^b1, i32* %22];
    i32 %49 = phi [^while.body1, i32 %60] [^b1, i32 0];
    i32 %50 = phi [^b1, i32 %29] [^while.body1, i32 %58];
    i1 %51 = scmp lt i32 %49, i32 %50;
    cbr i1 %51(prob = 0.97), ^while.body1, ^b8;
^b5:
    i1 %52 = scmp lt i32 %14, i32 0;
    ubr ^b6;
^b6:
    i1 %53 = phi [^b3, i1 true] [^b5, i1 %52];
    cbr i1 %53(prob = 0.5), ^b10, ^b9;
^while.body1:
    i32* %54 = getelementptr &(i32* %48)[i32 %49];
    i32* %55 = getelementptr &(i32* %47)[i32 %49];
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32 %57 = load i32* %n1;
    i32 %58 = load i32* %n;
    i32 %59 = load i32* %i;
    i32 %60 = add i32 %59, i32 1;
    store i32* %i with i32 %60;
    ubr ^while.header5;
^b7:
    i32 %61 = add i32 %41, i32 1;
    ubr ^while.header3;
^while.body2:
    i1 %62 = scmp lt i32 %41, i32 0;
    cbr i1 %62(prob = 0.5), ^b12, ^b11;
^b8:
    call (i32) -> void @stoptime(i32 64);
    i32 %63 = mul i32 %46, i32 %46;
    call (i32, i32*) -> void @putarray(i32 %63, i32* %4);
    ret i32 0;
^b9:
    i1 %64 = scmp ge i32 %14, i32 %15;
    ubr ^b10;
^b10:
    i1 %65 = phi [^b6, i1 true] [^b9, i1 %64];
    cbr i1 %65(prob = 0.5), ^while.body3, ^b13;
^b11:
    i1 %66 = scmp ge i32 %41, i32 %43;
    ubr ^b12;
^b12:
    i1 %67 = phi [^while.body2, i1 true] [^b11, i1 %66];
    cbr i1 %67(prob = 0.5), ^b15, ^b14;
^while.body3:
    i32 %68 = phi [^b10, i32 -1] [^b13, i32 %71];
    store i32* %27 with i32 %68;
    i32 %69 = add i32 %13, i32 1;
    ubr ^while.header1;
^b13:
    i32* %70 = getelementptr &(i32* %17)[i32 %26];
    i32 %71 = load i32* %70;
    ubr ^while.body3;
^b14:
    i1 %72 = scmp lt i32 %42, i32 0;
    ubr ^b15;
^b15:
    i1 %73 = phi [^b14, i1 %72] [^b12, i1 true];
    cbr i1 %73(prob = 0.5), ^b17, ^b16;
^b16:
    i1 %74 = scmp ge i32 %42, i32 %43;
    ubr ^b17;
^b17:
    i1 %75 = phi [^b16, i1 %74] [^b15, i1 true];
    cbr i1 %75(prob = 0.5), ^while.body4, ^b18;
^b18:
    i32 %76 = mul i32 %43, i32 %41;
    i32 %77 = add i32 %76, i32 %42;
    i32* %78 = getelementptr &(i32* %5)[i32 %77];
    i32 %79 = load i32* %78;
    ubr ^while.body4;
^while.body4:
    i32 %80 = phi [^b17, i32 -1] [^b18, i32 %79];
    i1 %81 = scmp gt i32 %80, i32 -1;
    cbr i1 %81(prob = 0.5), ^b19, ^b20;
^b19:
    i1 %82 = scmp lt i32 %42, i32 0;
    cbr i1 %82(prob = 0.5), ^b22, ^b21;
^b20:
    i1 %83 = phi [^while.body4, i1 false] [^b32, i1 %96];
    cbr i1 %83(prob = 0.5), ^if.then, ^b23;
^b21:
    i1 %84 = scmp ge i32 %42, i32 %43;
    ubr ^b22;
^b22:
    i1 %85 = phi [^b19, i1 true] [^b21, i1 %84];
    cbr i1 %85(prob = 0.5), ^b25, ^b24;
^b23:
    i32 %86 = add i32 %40, i32 1;
    ubr ^while.header4;
^if.then:
    cbr i1 %62(prob = 0.5), ^b27, ^b26;
^b24:
    i1 %87 = scmp lt i32 %40, i32 0;
    ubr ^b25;
^b25:
    i1 %88 = phi [^b22, i1 true] [^b24, i1 %87];
    cbr i1 %88(prob = 0.5), ^b29, ^b28;
^b26:
    i1 %89 = scmp ge i32 %41, i32 %43;
    ubr ^b27;
^b27:
    i1 %90 = phi [^if.then, i1 true] [^b26, i1 %89];
    cbr i1 %90(prob = 0.5), ^b31, ^b30;
^b28:
    i1 %91 = scmp ge i32 %40, i32 %43;
    ubr ^b29;
^b29:
    i1 %92 = phi [^b25, i1 true] [^b28, i1 %91];
    cbr i1 %92(prob = 0.5), ^b32, ^b33;
^b30:
    i1 %93 = scmp lt i32 %40, i32 0;
    ubr ^b31;
^b31:
    i1 %94 = phi [^b30, i1 %93] [^b27, i1 true];
    cbr i1 %94(prob = 0.5), ^b35, ^b34;
^b32:
    i32 %95 = phi [^b29, i32 -1] [^b33, i32 %100];
    i1 %96 = scmp ge i32 %95, i32 0;
    ubr ^b20;
^b33:
    i32 %97 = mul i32 %43, i32 %42;
    i32 %98 = add i32 %97, i32 %40;
    i32* %99 = getelementptr &(i32* %5)[i32 %98];
    i32 %100 = load i32* %99;
    ubr ^b32;
^b34:
    i1 %101 = scmp ge i32 %40, i32 %43;
    ubr ^b35;
^b35:
    i1 %102 = phi [^b31, i1 true] [^b34, i1 %101];
    cbr i1 %102(prob = 0.5), ^if.then1, ^b36;
^b36:
    i32 %103 = mul i32 %43, i32 %41;
    i32 %104 = add i32 %103, i32 %40;
    i32* %105 = getelementptr &(i32* %5)[i32 %104];
    i32 %106 = load i32* %105;
    ubr ^if.then1;
^if.then1:
    i32 %107 = phi [^b35, i32 -1] [^b36, i32 %106];
    i1 %108 = scmp lt i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^if.then2, ^if.else;
^if.then2:
    i32 %109 = mul i32 %43, i32 %41;
    i32 %110 = add i32 %109, i32 %40;
    i32* %111 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %110];
    cbr i1 %62(prob = 0.5), ^b39, ^b37;
^if.else:
    i32 %112 = mul i32 %43, i32 %41;
    i32 %113 = add i32 %112, i32 %40;
    i32* %114 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %113];
    i32 %115 = load i32* %114;
    cbr i1 %62(prob = 0.5), ^b40, ^b38;
^b37:
    i1 %116 = scmp ge i32 %41, i32 %43;
    ubr ^b39;
^b38:
    i1 %117 = scmp ge i32 %41, i32 %43;
    ubr ^b40;
^b39:
    i1 %118 = phi [^if.then2, i1 true] [^b37, i1 %116];
    cbr i1 %118(prob = 0.5), ^b43, ^b41;
^b40:
    i1 %119 = phi [^if.else, i1 true] [^b38, i1 %117];
    cbr i1 %119(prob = 0.5), ^b44, ^b42;
^b41:
    i1 %120 = scmp lt i32 %42, i32 0;
    ubr ^b43;
^b42:
    i1 %121 = scmp lt i32 %42, i32 0;
    ubr ^b44;
^b43:
    i1 %122 = phi [^b39, i1 true] [^b41, i1 %120];
    cbr i1 %122(prob = 0.5), ^b47, ^b45;
^b44:
    i1 %123 = phi [^b40, i1 true] [^b42, i1 %121];
    cbr i1 %123(prob = 0.5), ^b48, ^b46;
^b45:
    i1 %124 = scmp ge i32 %42, i32 %43;
    ubr ^b47;
^b46:
    i1 %125 = scmp ge i32 %42, i32 %43;
    ubr ^b48;
^b47:
    i1 %126 = phi [^b43, i1 true] [^b45, i1 %124];
    cbr i1 %126(prob = 0.5), ^if.then3, ^b49;
^b48:
    i1 %127 = phi [^b46, i1 %125] [^b44, i1 true];
    cbr i1 %127(prob = 0.5), ^if.else1, ^b50;
^b49:
    i32 %128 = mul i32 %43, i32 %41;
    i32 %129 = add i32 %128, i32 %42;
    i32* %130 = getelementptr &(i32* %5)[i32 %129];
    i32 %131 = load i32* %130;
    ubr ^if.then3;
^b50:
    i32 %132 = mul i32 %43, i32 %41;
    i32 %133 = add i32 %132, i32 %42;
    i32* %134 = getelementptr &(i32* %5)[i32 %133];
    i32 %135 = load i32* %134;
    ubr ^if.else1;
^if.then3:
    i32 %136 = phi [^b47, i32 -1] [^b49, i32 %131];
    i1 %137 = scmp lt i32 %42, i32 0;
    cbr i1 %137(prob = 0.5), ^b53, ^b51;
^if.else1:
    i32 %138 = phi [^b48, i32 -1] [^b50, i32 %135];
    i1 %139 = scmp lt i32 %42, i32 0;
    cbr i1 %139(prob = 0.5), ^b54, ^b52;
^b51:
    i1 %140 = scmp ge i32 %42, i32 %43;
    ubr ^b53;
^b52:
    i1 %141 = scmp ge i32 %42, i32 %43;
    ubr ^b54;
^b53:
    i1 %142 = phi [^if.then3, i1 true] [^b51, i1 %140];
    cbr i1 %142(prob = 0.5), ^b57, ^b55;
^b54:
    i1 %143 = phi [^if.else1, i1 true] [^b52, i1 %141];
    cbr i1 %143(prob = 0.5), ^b58, ^b56;
^b55:
    i1 %144 = scmp lt i32 %40, i32 0;
    ubr ^b57;
^b56:
    i1 %145 = scmp lt i32 %40, i32 0;
    ubr ^b58;
^b57:
    i1 %146 = phi [^b53, i1 true] [^b55, i1 %144];
    cbr i1 %146(prob = 0.5), ^b61, ^b59;
^b58:
    i1 %147 = phi [^b56, i1 %145] [^b54, i1 true];
    cbr i1 %147(prob = 0.5), ^b62, ^b60;
^b59:
    i1 %148 = scmp ge i32 %40, i32 %43;
    ubr ^b61;
^b60:
    i1 %149 = scmp ge i32 %40, i32 %43;
    ubr ^b62;
^b61:
    i1 %150 = phi [^b59, i1 %148] [^b57, i1 true];
    cbr i1 %150(prob = 0.5), ^if.then4, ^b63;
^b62:
    i1 %151 = phi [^b58, i1 true] [^b60, i1 %149];
    cbr i1 %151(prob = 0.5), ^if.else2, ^b64;
^if.then4:
    i32 %152 = phi [^b61, i32 -1] [^b63, i32 %157];
    i32 %153 = add i32 %136, i32 %152;
    store i32* %111 with i32 %153;
    ubr ^b23;
^b63:
    i32 %154 = mul i32 %43, i32 %42;
    i32 %155 = add i32 %154, i32 %40;
    i32* %156 = getelementptr &(i32* %5)[i32 %155];
    i32 %157 = load i32* %156;
    ubr ^if.then4;
^b64:
    i32 %158 = mul i32 %43, i32 %42;
    i32 %159 = add i32 %158, i32 %40;
    i32* %160 = getelementptr &(i32* %5)[i32 %159];
    i32 %161 = load i32* %160;
    ubr ^if.else2;
^if.else2:
    i32 %162 = phi [^b62, i32 -1] [^b64, i32 %161];
    i32 %163 = add i32 %138, i32 %162;
    i1 %164 = scmp gt i32 %115, i32 %163;
    cbr i1 %164(prob = 0.5), ^if.then2, ^b23;
}
