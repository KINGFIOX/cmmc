internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %14];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %4(prob = 0.984615), ^while.body, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 0] [^b3, i32 %29];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    i32 %13 = mul i32 %0, i32 %11;
    cbr i1 %12(prob = 0.984615), ^while.header3, ^b1;
  ^b:
    i32 %14 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %15 = phi [^while.header1, i32 0] [^b4, i32 %31];
    i32 %16 = mul i32 %0, i32 %15;
    i32 %17 = add i32 %9, i32 %16;
    i32* %18 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %17];
    i1 %19 = icmp sle i32 %0, i32 %15;
    cbr i1 %19(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %20 = phi [^while.header2, i32 0] [^b5, i32 %36];
    i32 %21 = mul i32 %0, i32 %20;
    i32 %22 = add i32 %11, i32 %21;
    i32* %23 = getelementptr &(i32* %8)[i32 %22];
    i1 %24 = icmp sgt i32 %0, i32 %20;
    cbr i1 %24(prob = 0.984615), ^while.header4, ^b3;
  ^b1:
    i1 %25 = icmp neq i32 %0, i32 0;
    i32 %26 = mul i32 %0, i32 %0;
    cbr i1 %25(prob = 0.984615), ^super.header, ^entry1;
  ^b2:
    i32* %27 = getelementptr &(i32* %2)[i32 %17];
    i32 %28 = load i32* %27;
    ubr ^b4;
  ^b3:
    i32 %29 = add i32 %11, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %30 = phi [^while.body, i32 -1] [^b2, i32 %28];
    i32 %31 = add i32 %15, i32 1;
    i1 %32 = icmp sgt i32 %0, i32 %31;
    store i32* %18 with i32 %30;
    cbr i1 %32(prob = 0.984615), ^while.body, ^b;
  ^while.header4:
    i32 %33 = phi [^while.header3, i32 0] [^b6, i32 %48];
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.984615), ^entry2, ^b5;
  ^super.header:
    i1 %35 = icmp sgt i32 %26, i32 4;
    cbr i1 %35(prob = 0.941176), ^super.header1, ^while.body1;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %26, i32* %6);
    ret i32 0;
  ^b5:
    i32 %36 = add i32 %20, i32 1;
    ubr ^while.header3;
  ^entry2:
    i32 %37 = load i32* %23;
    i1 %38 = icmp sgt i32 %37, i32 -1;
    cbr i1 %38(prob = 0.5), ^entry3, ^b6;
  ^super.header1:
    i32 %39 = add i32 %26, i32 -4;
    i1 %40 = icmp sgt i32 %39, i32 16;
    i32 %41 = add i32 %26, i32 -20;
    cbr i1 %40(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %42 = phi [^super.header, i32 0] [^while.body1, i32 %46] [^while.body3, i32 %117];
    i32* %43 = getelementptr &(i32* %8)[i32 %42];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %6)[i32 %42];
    store i32* %45 with i32 %44;
    i32 %46 = add i32 %42, i32 1;
    i1 %47 = icmp sgt i32 %26, i32 %46;
    cbr i1 %47(prob = 0.75), ^while.body1, ^entry1;
  ^b6:
    i32 %48 = add i32 %33, i32 1;
    ubr ^while.header4;
  ^entry3:
    i32 %49 = add i32 %13, i32 %33;
    i32* %50 = getelementptr &(i32* %8)[i32 %49];
    i32 %51 = load i32* %50;
    i1 %52 = icmp sgt i32 %51, i32 -1;
    cbr i1 %52(prob = 0.5), ^entry4, ^b6;
  ^while.body2:
    i32 %53 = phi [^super.header1, i32 0] [^while.body2, i32 %102];
    i32* %54 = getelementptr &(i32* %8)[i32 %53];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %6)[i32 %53];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %56)[i64 1];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %54)[i64 2];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %56)[i64 2];
    store i32* %62 with i32 %61;
    i32* %63 = getelementptr &(i32* %54)[i64 3];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %56)[i64 3];
    store i32* %65 with i32 %64;
    i32* %66 = getelementptr &(i32* %54)[i64 4];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %56)[i64 4];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &(i32* %54)[i64 5];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %56)[i64 5];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %54)[i64 6];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %56)[i64 6];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %54)[i64 7];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %56)[i64 7];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %54)[i64 8];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %56)[i64 8];
    store i32* %80 with i32 %79;
    i32* %81 = getelementptr &(i32* %54)[i64 9];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %56)[i64 9];
    store i32* %83 with i32 %82;
    i32* %84 = getelementptr &(i32* %54)[i64 10];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %56)[i64 10];
    store i32* %86 with i32 %85;
    i32* %87 = getelementptr &(i32* %54)[i64 11];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %56)[i64 11];
    store i32* %89 with i32 %88;
    i32* %90 = getelementptr &(i32* %54)[i64 12];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %56)[i64 12];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %54)[i64 13];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %56)[i64 13];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %54)[i64 14];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %56)[i64 14];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %54)[i64 15];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %56)[i64 15];
    store i32* %101 with i32 %100;
    i32 %102 = add i32 %53, i32 16;
    i1 %103 = icmp sgt i32 %41, i32 %102;
    cbr i1 %103(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %104 = phi [^super.header1, i32 0] [^while.body2, i32 %102] [^while.body3, i32 %117];
    i32* %105 = getelementptr &(i32* %8)[i32 %104];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %6)[i32 %104];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %105)[i64 1];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %107)[i64 1];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %105)[i64 2];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %107)[i64 2];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %105)[i64 3];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %107)[i64 3];
    store i32* %116 with i32 %115;
    i32 %117 = add i32 %104, i32 4;
    i1 %118 = icmp sgt i32 %39, i32 %117;
    cbr i1 %118(prob = 0.75), ^while.body3, ^while.body1;
  ^entry4:
    i32 %119 = add i32 %21, i32 %33;
    i32* %120 = getelementptr &(i32* %8)[i32 %119];
    i32 %121 = load i32* %120;
    i1 %122 = icmp slt i32 %121, i32 0;
    i32* %123 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %119];
    i32 %124 = add i32 %37, i32 %51;
    cbr i1 %122(prob = 0.5), ^entry5, ^if.else;
  ^entry5:
    store i32* %123 with i32 %124;
    ubr ^b6;
  ^if.else:
    i32 %125 = load i32* %123;
    i1 %126 = icmp slt i32 %124, i32 %125;
    cbr i1 %126(prob = 0.5), ^entry5, ^b6;
}
