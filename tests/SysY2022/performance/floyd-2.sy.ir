internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %20];
    i1 %10 = scmp lt i32 %9, i32 %0;
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i1 %11 = scmp ge i32 %9, i32 %0;
    i1 %12 = scmp lt i32 %9, i32 0;
    i1 %13 = or i1 %11, i1 %12;
    cbr i1 %4(prob = 0.97), ^while.body1, ^b;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 0] [^b3, i32 %43];
    i1 %15 = scmp ge i32 %14, i32 %0;
    i1 %16 = scmp lt i32 %14, i32 0;
    i1 %17 = or i1 %15, i1 %16;
    i1 %18 = scmp lt i32 %14, i32 %0;
    i32 %19 = mul i32 %0, i32 %14;
    cbr i1 %18(prob = 0.97), ^while.header2, ^b1;
  ^b:
    i32 %20 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %21 = phi [^while.body, i32 0] [^b4, i32 %45];
    i1 %22 = scmp lt i32 %21, i32 0;
    i1 %23 = or i1 %13, i1 %22;
    i1 %24 = scmp ge i32 %21, i32 %0;
    i1 %25 = or i1 %23, i1 %24;
    i32 %26 = mul i32 %0, i32 %21;
    i32 %27 = add i32 %9, i32 %26;
    i32* %28 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %27];
    cbr i1 %25(prob = 0.5), ^b4, ^b2;
  ^while.header2:
    i32 %29 = phi [^while.header1, i32 0] [^b5, i32 %52];
    i1 %30 = scmp lt i32 %29, i32 0;
    i1 %31 = or i1 %17, i1 %30;
    i1 %32 = scmp ge i32 %29, i32 %0;
    i1 %33 = or i1 %31, i1 %32;
    i32 %34 = mul i32 %0, i32 %29;
    i32 %35 = add i32 %14, i32 %34;
    i32* %36 = getelementptr &(i32* %8)[i32 %35];
    i1 %37 = or i1 %30, i1 %32;
    i1 %38 = scmp lt i32 %29, i32 %0;
    cbr i1 %38(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i32 %39 = mul i32 %0, i32 %0;
    i1 %40 = scmp gt i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %41 = getelementptr &(i32* %2)[i32 %27];
    i32 %42 = load i32* %41;
    ubr ^b4;
  ^b3:
    i32 %43 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^b4:
    i32 %44 = phi [^while.body1, i32 -1] [^b2, i32 %42];
    i32 %45 = add i32 %21, i32 1;
    i1 %46 = scmp lt i32 %45, i32 %0;
    store i32* %28 with i32 %44;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b;
  ^while.header3:
    i32 %47 = phi [^while.header2, i32 0] [^b11, i32 %111];
    i1 %48 = scmp lt i32 %47, i32 %0;
    cbr i1 %48(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %49 = phi [^b1, i32 0] [^while.body2, i32 %50];
    i32 %50 = add i32 %49, i32 4;
    i1 %51 = scmp lt i32 %50, i32 %39;
    cbr i1 %51(prob = 0.89), ^while.body2, ^super.header1;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %39, i32* %6);
    ret i32 0;
  ^b5:
    i32 %52 = add i32 %29, i32 1;
    ubr ^while.header2;
  ^while.body2:
    i32* %53 = getelementptr &(i32* %8)[i32 %49];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %6)[i32 %49];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %55)[i64 1];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %55)[i64 2];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %53)[i64 3];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %55)[i64 3];
    store i32* %64 with i32 %63;
    ubr ^super.header;
  ^entry2:
    cbr i1 %33(prob = 0.5), ^b7, ^b6;
  ^super.header1:
    i32 %65 = phi [^super.header, i32 %49] [^while.body3, i32 %66];
    i32 %66 = add i32 %65, i32 4;
    i1 %67 = scmp lt i32 %66, i32 %39;
    cbr i1 %67(prob = 0.89), ^while.body3, ^super.header2;
  ^b6:
    i32 %68 = load i32* %36;
    ubr ^b7;
  ^while.body3:
    i32* %69 = getelementptr &(i32* %8)[i32 %65];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %6)[i32 %65];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %69)[i64 1];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %71)[i64 1];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %69)[i64 2];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %71)[i64 2];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %69)[i64 3];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %71)[i64 3];
    store i32* %80 with i32 %79;
    ubr ^super.header1;
  ^b7:
    i32 %81 = phi [^entry2, i32 -1] [^b6, i32 %68];
    i1 %82 = scmp gt i32 %81, i32 -1;
    cbr i1 %82(prob = 0.5), ^entry3, ^b8;
  ^super.header2:
    i32 %83 = phi [^super.header1, i32 %65] [^while.body4, i32 %84];
    i32 %84 = add i32 %83, i32 4;
    i1 %85 = scmp lt i32 %84, i32 %39;
    cbr i1 %85(prob = 0.89), ^while.body4, ^super.header3;
  ^entry3:
    i1 %86 = scmp lt i32 %47, i32 0;
    i1 %87 = or i1 %17, i1 %86;
    i1 %88 = scmp ge i32 %47, i32 %0;
    i1 %89 = or i1 %87, i1 %88;
    cbr i1 %89(prob = 0.5), ^b9, ^b10;
  ^while.body4:
    i32* %90 = getelementptr &(i32* %8)[i32 %83];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %6)[i32 %83];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %90)[i64 1];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %90)[i64 2];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %90)[i64 3];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    store i32* %101 with i32 %100;
    ubr ^super.header2;
  ^b8:
    i1 %102 = phi [^b7, i1 false] [^b9, i1 %107];
    cbr i1 %102(prob = 0.5), ^entry4, ^b11;
  ^super.header3:
    i32 %103 = phi [^super.header2, i32 %83] [^while.body5, i32 %104];
    i32 %104 = add i32 %103, i32 4;
    i1 %105 = scmp lt i32 %104, i32 %39;
    cbr i1 %105(prob = 0.89), ^while.body5, ^while.body6;
  ^b9:
    i32 %106 = phi [^entry3, i32 -1] [^b10, i32 %110];
    i1 %107 = scmp ge i32 %106, i32 0;
    ubr ^b8;
  ^b10:
    i32 %108 = add i32 %19, i32 %47;
    i32* %109 = getelementptr &(i32* %8)[i32 %108];
    i32 %110 = load i32* %109;
    ubr ^b9;
  ^b11:
    i32 %111 = add i32 %47, i32 1;
    ubr ^while.header3;
  ^entry4:
    i1 %112 = scmp lt i32 %47, i32 0;
    i1 %113 = or i1 %37, i1 %112;
    i1 %114 = scmp ge i32 %47, i32 %0;
    i1 %115 = or i1 %113, i1 %114;
    cbr i1 %115(prob = 0.5), ^b13, ^b12;
  ^while.body5:
    i32* %116 = getelementptr &(i32* %8)[i32 %103];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %6)[i32 %103];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %116)[i64 1];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %118)[i64 1];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %116)[i64 2];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %118)[i64 2];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %116)[i64 3];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %118)[i64 3];
    store i32* %127 with i32 %126;
    ubr ^super.header3;
  ^while.body6:
    i32 %128 = phi [^super.header3, i32 %103] [^while.body6, i32 %132];
    i32* %129 = getelementptr &(i32* %8)[i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %6)[i32 %128];
    store i32* %131 with i32 %130;
    i32 %132 = add i32 %128, i32 1;
    i1 %133 = scmp lt i32 %132, i32 %39;
    cbr i1 %133(prob = 0.97), ^while.body6, ^entry1;
  ^b12:
    i32 %134 = add i32 %34, i32 %47;
    i32* %135 = getelementptr &(i32* %8)[i32 %134];
    i32 %136 = load i32* %135;
    ubr ^b13;
  ^b13:
    i32 %137 = phi [^entry4, i32 -1] [^b12, i32 %136];
    i1 %138 = scmp lt i32 %137, i32 0;
    cbr i1 %138(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %139 = add i32 %34, i32 %47;
    i32* %140 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %139];
    cbr i1 %33(prob = 0.5), ^b15, ^b14;
  ^if.else:
    i32 %141 = add i32 %34, i32 %47;
    i32* %142 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %141];
    i32 %143 = load i32* %142;
    cbr i1 %33(prob = 0.5), ^b17, ^b16;
  ^b14:
    i32 %144 = load i32* %36;
    ubr ^b15;
  ^b15:
    i32 %145 = phi [^if.then, i32 -1] [^b14, i32 %144];
    i1 %146 = scmp lt i32 %47, i32 0;
    i1 %147 = or i1 %17, i1 %146;
    i1 %148 = scmp ge i32 %47, i32 %0;
    i1 %149 = or i1 %147, i1 %148;
    cbr i1 %149(prob = 0.5), ^b18, ^b19;
  ^b16:
    i32 %150 = load i32* %36;
    ubr ^b17;
  ^b17:
    i32 %151 = phi [^if.else, i32 -1] [^b16, i32 %150];
    i1 %152 = scmp lt i32 %47, i32 0;
    i1 %153 = or i1 %17, i1 %152;
    i1 %154 = scmp ge i32 %47, i32 %0;
    i1 %155 = or i1 %153, i1 %154;
    cbr i1 %155(prob = 0.5), ^b21, ^b20;
  ^b18:
    i32 %156 = phi [^b15, i32 -1] [^b19, i32 %160];
    i32 %157 = add i32 %145, i32 %156;
    store i32* %140 with i32 %157;
    ubr ^b11;
  ^b19:
    i32 %158 = add i32 %19, i32 %47;
    i32* %159 = getelementptr &(i32* %8)[i32 %158];
    i32 %160 = load i32* %159;
    ubr ^b18;
  ^b20:
    i32 %161 = add i32 %19, i32 %47;
    i32* %162 = getelementptr &(i32* %8)[i32 %161];
    i32 %163 = load i32* %162;
    ubr ^b21;
  ^b21:
    i32 %164 = phi [^b17, i32 -1] [^b20, i32 %163];
    i32 %165 = add i32 %151, i32 %164;
    i1 %166 = scmp gt i32 %143, i32 %165;
    cbr i1 %166(prob = 0.5), ^if.then, ^b11;
}
