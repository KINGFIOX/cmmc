internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    [2097152 * i32]* %6 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %7 = getelementptr &([2097152 * i32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b3, i32 %33];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^while.header1;
  ^while.body:
    i32 %10 = phi [^while.header, i32 0] [^b1, i32 %25];
    i32 %11 = phi [^while.header, i32 0] [^b1, i32 %23];
    i32 %12 = add i32 %8, i32 %10;
    i32* %13 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %12];
    i1 %14 = icmp sle i32 %0, i32 %11;
    cbr i1 %14(prob = 0.5), ^b1, ^b;
  ^while.header1:
    i32 %15 = phi [^while.header, i32 0] [^b4, i32 %34];
    i1 %16 = icmp sgt i32 %0, i32 %15;
    i32 %17 = mul i32 %0, i32 %15;
    cbr i1 %16(prob = 0.984615), ^while.header2, ^b2;
  ^b:
    i32 %18 = mul i32 %0, i32 %11;
    i32 %19 = add i32 %8, i32 %18;
    i32* %20 = getelementptr &(i32* %2)[i32 %19];
    i32 %21 = load i32* %20;
    ubr ^b1;
  ^b1:
    i32 %22 = phi [^while.body, i32 -1] [^b, i32 %21];
    i32 %23 = add i32 %11, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    store i32* %13 with i32 %22;
    i32 %25 = add i32 %0, i32 %10;
    cbr i1 %24(prob = 0.984615), ^while.body, ^b3;
  ^while.header2:
    i32 %26 = phi [^while.header1, i32 0] [^b5, i32 %38];
    i32 %27 = mul i32 %0, i32 %26;
    i32 %28 = add i32 %15, i32 %27;
    i32* %29 = getelementptr &(i32* %7)[i32 %28];
    i1 %30 = icmp sgt i32 %0, i32 %26;
    cbr i1 %30(prob = 0.984615), ^while.header3, ^b4;
  ^b2:
    i1 %31 = icmp neq i32 %0, i32 0;
    i32 %32 = mul i32 %0, i32 %0;
    cbr i1 %31(prob = 0.984615), ^super.header, ^entry1;
  ^b3:
    i32 %33 = add i32 %8, i32 1;
    ubr ^while.header;
  ^b4:
    i32 %34 = add i32 %15, i32 1;
    ubr ^while.header1;
  ^while.header3:
    i32 %35 = phi [^while.header2, i32 0] [^b6, i32 %50];
    i1 %36 = icmp sgt i32 %0, i32 %35;
    cbr i1 %36(prob = 0.984615), ^entry2, ^b5;
  ^super.header:
    i1 %37 = icmp sgt i32 %32, i32 4;
    cbr i1 %37(prob = 0.941176), ^super.header1, ^while.body1;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %32, i32* %5);
    ret i32 0;
  ^b5:
    i32 %38 = add i32 %26, i32 1;
    ubr ^while.header2;
  ^entry2:
    i32 %39 = load i32* %29;
    i1 %40 = icmp sgt i32 %39, i32 -1;
    cbr i1 %40(prob = 0.5), ^entry3, ^b6;
  ^super.header1:
    i32 %41 = add i32 %32, i32 -4;
    i1 %42 = icmp sgt i32 %41, i32 16;
    i32 %43 = add i32 %32, i32 -20;
    cbr i1 %42(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %44 = phi [^super.header, i32 0] [^while.body1, i32 %48] [^while.body3, i32 %119];
    i32* %45 = getelementptr &(i32* %7)[i32 %44];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %5)[i32 %44];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %44, i32 1;
    i1 %49 = icmp sgt i32 %32, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body1, ^entry1;
  ^b6:
    i32 %50 = add i32 %35, i32 1;
    ubr ^while.header3;
  ^entry3:
    i32 %51 = add i32 %17, i32 %35;
    i32* %52 = getelementptr &(i32* %7)[i32 %51];
    i32 %53 = load i32* %52;
    i1 %54 = icmp sgt i32 %53, i32 -1;
    cbr i1 %54(prob = 0.5), ^entry4, ^b6;
  ^while.body2:
    i32 %55 = phi [^super.header1, i32 0] [^while.body2, i32 %104];
    i32* %56 = getelementptr &(i32* %7)[i32 %55];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %5)[i32 %55];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %56)[i64 1];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %58)[i64 1];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %56)[i64 2];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %58)[i64 2];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %56)[i64 3];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %58)[i64 3];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %56)[i64 4];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %58)[i64 4];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &(i32* %56)[i64 5];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %58)[i64 5];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %56)[i64 6];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %58)[i64 6];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %56)[i64 7];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %58)[i64 7];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %56)[i64 8];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %58)[i64 8];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %56)[i64 9];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %58)[i64 9];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &(i32* %56)[i64 10];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %58)[i64 10];
    store i32* %88 with i32 %87;
    i32* %89 = getelementptr &(i32* %56)[i64 11];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %58)[i64 11];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %56)[i64 12];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %58)[i64 12];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %56)[i64 13];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %58)[i64 13];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %56)[i64 14];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %58)[i64 14];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %56)[i64 15];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %58)[i64 15];
    store i32* %103 with i32 %102;
    i32 %104 = add i32 %55, i32 16;
    i1 %105 = icmp sgt i32 %43, i32 %104;
    cbr i1 %105(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %106 = phi [^super.header1, i32 0] [^while.body2, i32 %104] [^while.body3, i32 %119];
    i32* %107 = getelementptr &(i32* %7)[i32 %106];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %5)[i32 %106];
    store i32* %109 with i32 %108;
    i32* %110 = getelementptr &(i32* %107)[i64 1];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %109)[i64 1];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %107)[i64 2];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %109)[i64 2];
    store i32* %115 with i32 %114;
    i32* %116 = getelementptr &(i32* %107)[i64 3];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %109)[i64 3];
    store i32* %118 with i32 %117;
    i32 %119 = add i32 %106, i32 4;
    i1 %120 = icmp sgt i32 %41, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body3, ^while.body1;
  ^entry4:
    i32 %121 = add i32 %27, i32 %35;
    i32* %122 = getelementptr &(i32* %7)[i32 %121];
    i32 %123 = load i32* %122;
    i1 %124 = icmp slt i32 %123, i32 0;
    i32* %125 = getelementptr &([2097152 * i32]* %6)[i64 0][i32 %121];
    i32 %126 = add i32 %39, i32 %53;
    cbr i1 %124(prob = 0.5), ^entry5, ^if.else;
  ^entry5:
    store i32* %125 with i32 %126;
    ubr ^b6;
  ^if.else:
    i32 %127 = load i32* %125;
    i1 %128 = icmp slt i32 %126, i32 %127;
    cbr i1 %128(prob = 0.5), ^entry5, ^b6;
}
