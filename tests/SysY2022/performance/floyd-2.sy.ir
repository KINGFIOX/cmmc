internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %14];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 0] [^b3, i32 %28];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    i32 %13 = mul i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %14 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %15 = phi [^while.header1, i32 0] [^b4, i32 %30];
    i32 %16 = mul i32 %0, i32 %15;
    i32 %17 = add i32 %9, i32 %16;
    i32* %18 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %17];
    i1 %19 = icmp sle i32 %0, i32 %15;
    cbr i1 %19(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %20 = phi [^while.header2, i32 0] [^b5, i32 %37];
    i32 %21 = mul i32 %0, i32 %20;
    i32 %22 = add i32 %11, i32 %21;
    i32* %23 = getelementptr &(i32* %8)[i32 %22];
    i1 %24 = icmp sgt i32 %0, i32 %20;
    cbr i1 %24(prob = 0.97), ^while.header4, ^b3;
  ^b1:
    i1 %25 = icmp neq i32 %0, i32 0;
    cbr i1 %25(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %26 = getelementptr &(i32* %2)[i32 %17];
    i32 %27 = load i32* %26;
    ubr ^b4;
  ^b3:
    i32 %28 = add i32 %11, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %29 = phi [^while.body, i32 -1] [^b2, i32 %27];
    i32 %30 = add i32 %15, i32 1;
    i1 %31 = icmp sgt i32 %0, i32 %30;
    store i32* %18 with i32 %29;
    cbr i1 %31(prob = 0.97), ^while.body, ^b;
  ^while.header4:
    i32 %32 = phi [^while.header3, i32 0] [^b6, i32 %49];
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %34 = mul i32 %0, i32 %0;
    i1 %35 = icmp sgt i32 %34, i32 4;
    cbr i1 %35(prob = 0.89), ^super.header1, ^while.body1;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    i32 %36 = mul i32 %0, i32 %0;
    call (i32, i32*) -> void @putarray(i32 %36, i32* %6);
    ret i32 0;
  ^b5:
    i32 %37 = add i32 %20, i32 1;
    ubr ^while.header3;
  ^entry2:
    i32 %38 = load i32* %23;
    i1 %39 = icmp sgt i32 %38, i32 -1;
    cbr i1 %39(prob = 0.5), ^entry3, ^b6;
  ^super.header1:
    i32 %40 = add i32 %34, i32 -4;
    i1 %41 = icmp sgt i32 %40, i32 16;
    i32 %42 = add i32 %34, i32 -20;
    cbr i1 %41(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %43 = phi [^super.header, i32 0] [^while.body1, i32 %47] [^while.body3, i32 %118];
    i32* %44 = getelementptr &(i32* %8)[i32 %43];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %6)[i32 %43];
    store i32* %46 with i32 %45;
    i32 %47 = add i32 %43, i32 1;
    i1 %48 = icmp sgt i32 %34, i32 %47;
    cbr i1 %48(prob = 0.75), ^while.body1, ^entry1;
  ^b6:
    i32 %49 = add i32 %32, i32 1;
    ubr ^while.header4;
  ^entry3:
    i32 %50 = add i32 %13, i32 %32;
    i32* %51 = getelementptr &(i32* %8)[i32 %50];
    i32 %52 = load i32* %51;
    i1 %53 = icmp sgt i32 %52, i32 -1;
    cbr i1 %53(prob = 0.5), ^entry4, ^b6;
  ^while.body2:
    i32 %54 = phi [^super.header1, i32 0] [^while.body2, i32 %103];
    i32* %55 = getelementptr &(i32* %8)[i32 %54];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %6)[i32 %54];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %55)[i64 1];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %57)[i64 1];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %55)[i64 2];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %57)[i64 2];
    store i32* %63 with i32 %62;
    i32* %64 = getelementptr &(i32* %55)[i64 3];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %57)[i64 3];
    store i32* %66 with i32 %65;
    i32* %67 = getelementptr &(i32* %55)[i64 4];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %57)[i64 4];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %55)[i64 5];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %57)[i64 5];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %55)[i64 6];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %57)[i64 6];
    store i32* %75 with i32 %74;
    i32* %76 = getelementptr &(i32* %55)[i64 7];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %57)[i64 7];
    store i32* %78 with i32 %77;
    i32* %79 = getelementptr &(i32* %55)[i64 8];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %57)[i64 8];
    store i32* %81 with i32 %80;
    i32* %82 = getelementptr &(i32* %55)[i64 9];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %57)[i64 9];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %55)[i64 10];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %57)[i64 10];
    store i32* %87 with i32 %86;
    i32* %88 = getelementptr &(i32* %55)[i64 11];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %57)[i64 11];
    store i32* %90 with i32 %89;
    i32* %91 = getelementptr &(i32* %55)[i64 12];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %57)[i64 12];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %55)[i64 13];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %57)[i64 13];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %55)[i64 14];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %57)[i64 14];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %55)[i64 15];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %57)[i64 15];
    store i32* %102 with i32 %101;
    i32 %103 = add i32 %54, i32 16;
    i1 %104 = icmp sgt i32 %42, i32 %103;
    cbr i1 %104(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %105 = phi [^super.header1, i32 0] [^while.body2, i32 %103] [^while.body3, i32 %118];
    i32* %106 = getelementptr &(i32* %8)[i32 %105];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %6)[i32 %105];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %106)[i64 1];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %108)[i64 1];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %106)[i64 2];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %108)[i64 2];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %106)[i64 3];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %108)[i64 3];
    store i32* %117 with i32 %116;
    i32 %118 = add i32 %105, i32 4;
    i1 %119 = icmp sgt i32 %40, i32 %118;
    cbr i1 %119(prob = 0.75), ^while.body3, ^while.body1;
  ^entry4:
    i32 %120 = add i32 %21, i32 %32;
    i32* %121 = getelementptr &(i32* %8)[i32 %120];
    i32 %122 = load i32* %121;
    i1 %123 = icmp slt i32 %122, i32 0;
    cbr i1 %123(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %124 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %120];
    i32 %125 = add i32 %38, i32 %52;
    store i32* %124 with i32 %125;
    ubr ^b6;
  ^if.else:
    i32* %126 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %120];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %38, i32 %52;
    i1 %129 = icmp sgt i32 %127, i32 %128;
    cbr i1 %129(prob = 0.5), ^if.then, ^b6;
}
