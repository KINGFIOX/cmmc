internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @w;
internal [2097152 * i32]* @dst;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %15];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 0] [^b3, i32 %32];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    i1 %13 = icmp sle i32 %0, i32 %11;
    i32 %14 = mul i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %15 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %16 = phi [^while.header1, i32 0] [^b4, i32 %34];
    i32 %17 = mul i32 %0, i32 %16;
    i32 %18 = add i32 %9, i32 %17;
    i32* %19 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %18];
    i1 %20 = icmp sle i32 %0, i32 %16;
    cbr i1 %20(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %21 = phi [^while.header2, i32 0] [^b5, i32 %41];
    i32 %22 = mul i32 %0, i32 %21;
    i32 %23 = add i32 %11, i32 %22;
    i32* %24 = getelementptr &(i32* %8)[i32 %23];
    i1 %25 = icmp sle i32 %0, i32 %21;
    i1 %26 = or i1 %13, i1 %25;
    i1 %27 = icmp sgt i32 %0, i32 %21;
    cbr i1 %27(prob = 0.97), ^while.header4, ^b3;
  ^b1:
    i32 %28 = mul i32 %0, i32 %0;
    i1 %29 = icmp sgt i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^super.header, ^entry1;
  ^b2:
    i32* %30 = getelementptr &(i32* %2)[i32 %18];
    i32 %31 = load i32* %30;
    ubr ^b4;
  ^b3:
    i32 %32 = add i32 %11, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %33 = phi [^while.body, i32 -1] [^b2, i32 %31];
    i32 %34 = add i32 %16, i32 1;
    i1 %35 = icmp sgt i32 %0, i32 %34;
    store i32* %19 with i32 %33;
    cbr i1 %35(prob = 0.97), ^while.body, ^b;
  ^while.header4:
    i32 %36 = phi [^while.header3, i32 0] [^b8, i32 %63];
    i1 %37 = icmp sgt i32 %0, i32 %36;
    cbr i1 %37(prob = 0.97), ^entry2, ^b5;
  ^super.header:
    i32 %38 = phi [^b1, i32 0] [^while.body1, i32 %39];
    i32 %39 = add i32 %38, i32 4;
    i1 %40 = icmp sgt i32 %28, i32 %39;
    cbr i1 %40(prob = 0.89), ^while.body1, ^while.body2;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %28, i32* %6);
    ret i32 0;
  ^b5:
    i32 %41 = add i32 %21, i32 1;
    ubr ^while.header3;
  ^while.body1:
    i32* %42 = getelementptr &(i32* %8)[i32 %38];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %6)[i32 %38];
    store i32* %44 with i32 %43;
    i32* %45 = getelementptr &(i32* %42)[i64 1];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %44)[i64 1];
    store i32* %47 with i32 %46;
    i32* %48 = getelementptr &(i32* %42)[i64 2];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %44)[i64 2];
    store i32* %50 with i32 %49;
    i32* %51 = getelementptr &(i32* %42)[i64 3];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %44)[i64 3];
    store i32* %53 with i32 %52;
    ubr ^super.header;
  ^entry2:
    cbr i1 %26(prob = 0.5), ^b7, ^b6;
  ^while.body2:
    i32 %54 = phi [^super.header, i32 %38] [^while.body2, i32 %58];
    i32* %55 = getelementptr &(i32* %8)[i32 %54];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %6)[i32 %54];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %54, i32 1;
    i1 %59 = icmp sgt i32 %28, i32 %58;
    cbr i1 %59(prob = 0.75), ^while.body2, ^entry1;
  ^b6:
    i32 %60 = load i32* %24;
    ubr ^b7;
  ^b7:
    i32 %61 = phi [^entry2, i32 -1] [^b6, i32 %60];
    i1 %62 = icmp sgt i32 %61, i32 -1;
    cbr i1 %62(prob = 0.5), ^entry3, ^b8;
  ^b8:
    i32 %63 = add i32 %36, i32 1;
    ubr ^while.header4;
  ^entry3:
    cbr i1 %13(prob = 0.5), ^b10, ^b9;
  ^b9:
    i32 %64 = add i32 %14, i32 %36;
    i32* %65 = getelementptr &(i32* %8)[i32 %64];
    i32 %66 = load i32* %65;
    ubr ^b10;
  ^b10:
    i32 %67 = phi [^entry3, i32 -1] [^b9, i32 %66];
    i1 %68 = icmp sgt i32 %67, i32 -1;
    cbr i1 %68(prob = 0.5), ^entry4, ^b8;
  ^entry4:
    cbr i1 %25(prob = 0.5), ^b12, ^b11;
  ^b11:
    i32 %69 = add i32 %22, i32 %36;
    i32* %70 = getelementptr &(i32* %8)[i32 %69];
    i32 %71 = load i32* %70;
    ubr ^b12;
  ^b12:
    i32 %72 = phi [^entry4, i32 -1] [^b11, i32 %71];
    i1 %73 = icmp slt i32 %72, i32 0;
    cbr i1 %73(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %74 = add i32 %22, i32 %36;
    i32* %75 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %74];
    i32 %76 = add i32 %61, i32 %67;
    store i32* %75 with i32 %76;
    ubr ^b8;
  ^if.else:
    i32 %77 = add i32 %22, i32 %36;
    i32* %78 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %77];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %61, i32 %67;
    i1 %81 = icmp sgt i32 %79, i32 %80;
    cbr i1 %81(prob = 0.5), ^if.then, ^b8;
}
