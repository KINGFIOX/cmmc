internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @w, align 8;
internal [2097152 * i32]* @dst, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @w to [2097152 * i32]*;
    i32* %2 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i1 %4 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 62);
    [2097152 * i32]* %5 = ptrcast [2097152 * i32]* @dst to [2097152 * i32]*;
    i32* %6 = getelementptr &([2097152 * i32]* %5)[i64 0][i64 0];
    [2097152 * i32]* %7 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %8 = getelementptr &([2097152 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %14];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %4(prob = 0.984615), ^while.body, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 0] [^b3, i32 %29];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    i32 %13 = mul i32 %0, i32 %11;
    cbr i1 %12(prob = 0.984615), ^while.header3, ^b1;
  ^b:
    i32 %14 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %15 = phi [^while.header1, i32 0] [^b4, i32 %31];
    i32 %16 = mul i32 %0, i32 %15;
    i32 %17 = add i32 %9, i32 %16;
    i32* %18 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %17];
    i1 %19 = icmp sle i32 %0, i32 %15;
    cbr i1 %19(prob = 0.5), ^b4, ^b2;
  ^while.header3:
    i32 %20 = phi [^while.header2, i32 0] [^b5, i32 %37];
    i32 %21 = mul i32 %0, i32 %20;
    i32 %22 = add i32 %11, i32 %21;
    i32* %23 = getelementptr &(i32* %8)[i32 %22];
    i1 %24 = icmp sgt i32 %0, i32 %20;
    cbr i1 %24(prob = 0.984615), ^while.header4, ^b3;
  ^b1:
    i1 %25 = icmp neq i32 %0, i32 0;
    i32 %26 = mul i32 %0, i32 %0;
    cbr i1 %25(prob = 0.984615), ^super.header, ^entry1;
  ^b2:
    i32* %27 = getelementptr &(i32* %2)[i32 %17];
    i32 %28 = load i32* %27;
    ubr ^b4;
  ^b3:
    i32 %29 = add i32 %11, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %30 = phi [^while.body, i32 -1] [^b2, i32 %28];
    i32 %31 = add i32 %15, i32 1;
    i1 %32 = icmp sgt i32 %0, i32 %31;
    store i32* %18 with i32 %30;
    cbr i1 %32(prob = 0.984615), ^while.body, ^b;
  ^while.header4:
    i32 %33 = phi [^while.header3, i32 0] [^b6, i32 %73];
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.984615), ^entry2, ^b5;
  ^super.header:
    i32 %35 = add i32 %26, i32 -8;
    i1 %36 = icmp sgt i32 %26, i32 8;
    cbr i1 %36(prob = 0.888889), ^while.body1, ^while.body2;
  ^entry1:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 %26, i32* %6);
    ret i32 0;
  ^b5:
    i32 %37 = add i32 %20, i32 1;
    ubr ^while.header3;
  ^entry2:
    i32 %38 = load i32* %23;
    i1 %39 = icmp sgt i32 %38, i32 -1;
    cbr i1 %39(prob = 0.5), ^entry3, ^b6;
  ^while.body1:
    i32 %40 = phi [^super.header, i32 0] [^while.body1, i32 %65];
    i32* %41 = getelementptr &(i32* %8)[i32 %40];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %6)[i32 %40];
    store i32* %43 with i32 %42;
    i32* %44 = getelementptr &(i32* %41)[i64 1];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %43)[i64 1];
    store i32* %46 with i32 %45;
    i32* %47 = getelementptr &(i32* %41)[i64 2];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %43)[i64 2];
    store i32* %49 with i32 %48;
    i32* %50 = getelementptr &(i32* %41)[i64 3];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %43)[i64 3];
    store i32* %52 with i32 %51;
    i32* %53 = getelementptr &(i32* %41)[i64 4];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %43)[i64 4];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %41)[i64 5];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %43)[i64 5];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %41)[i64 6];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %43)[i64 6];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %41)[i64 7];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %43)[i64 7];
    store i32* %64 with i32 %63;
    i32 %65 = add i32 %40, i32 8;
    i1 %66 = icmp sgt i32 %35, i32 %65;
    cbr i1 %66(prob = 0.888889), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %67 = phi [^super.header, i32 0] [^while.body1, i32 %65] [^while.body2, i32 %71];
    i32* %68 = getelementptr &(i32* %8)[i32 %67];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %6)[i32 %67];
    store i32* %70 with i32 %69;
    i32 %71 = add i32 %67, i32 1;
    i1 %72 = icmp sgt i32 %26, i32 %71;
    cbr i1 %72(prob = 0.875), ^while.body2, ^entry1;
  ^b6:
    i32 %73 = add i32 %33, i32 1;
    ubr ^while.header4;
  ^entry3:
    i32 %74 = add i32 %13, i32 %33;
    i32* %75 = getelementptr &(i32* %8)[i32 %74];
    i32 %76 = load i32* %75;
    i1 %77 = icmp sgt i32 %76, i32 -1;
    cbr i1 %77(prob = 0.5), ^entry4, ^b6;
  ^entry4:
    i32 %78 = add i32 %21, i32 %33;
    i32* %79 = getelementptr &(i32* %8)[i32 %78];
    i32 %80 = load i32* %79;
    i1 %81 = icmp slt i32 %80, i32 0;
    i32* %82 = getelementptr &([2097152 * i32]* %7)[i64 0][i32 %78];
    i32 %83 = add i32 %38, i32 %76;
    cbr i1 %81(prob = 0.5), ^entry5, ^if.else;
  ^entry5:
    store i32* %82 with i32 %83;
    ubr ^b6;
  ^if.else:
    i32 %84 = load i32* %82;
    i1 %85 = icmp slt i32 %83, i32 %84;
    cbr i1 %85(prob = 0.5), ^entry5, ^b6;
}
