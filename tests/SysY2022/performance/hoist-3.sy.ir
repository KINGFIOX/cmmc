internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 121);
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 %0];
    i32 %2 = phi [^while.body, i32 %38] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %37] [^entry, i32 0];
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 1];
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 1];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 1];
    i32 %7 = phi [^while.body, i32 %7] [^entry, i32 1];
    i32 %8 = phi [^while.body, i32 %8] [^entry, i32 1];
    i32 %9 = phi [^while.body, i32 %9] [^entry, i32 1];
    i32 %10 = phi [^while.body, i32 %10] [^entry, i32 1];
    i32 %11 = phi [^while.body, i32 %11] [^entry, i32 1];
    i32 %12 = phi [^while.body, i32 %12] [^entry, i32 1];
    i32 %13 = phi [^while.body, i32 %13] [^entry, i32 1];
    i32 %14 = phi [^while.body, i32 %14] [^entry, i32 1];
    i32 %15 = phi [^while.body, i32 %15] [^entry, i32 1];
    i32 %16 = phi [^while.body, i32 %16] [^entry, i32 1];
    i32 %17 = phi [^while.body, i32 %17] [^entry, i32 1];
    i32 %18 = phi [^while.body, i32 %18] [^entry, i32 1];
    i1 %19 = scmp lt i32 %2, i32 %1;
    cbr i1 %19(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %20 = add i32 %18, i32 %17;
    i32 %21 = add i32 %20, i32 %16;
    i32 %22 = add i32 %21, i32 %15;
    i32 %23 = add i32 %22, i32 %14;
    i32 %24 = add i32 %23, i32 %13;
    i32 %25 = add i32 %24, i32 %12;
    i32 %26 = add i32 %25, i32 %11;
    i32 %27 = add i32 %26, i32 %10;
    i32 %28 = add i32 %27, i32 %9;
    i32 %29 = add i32 %28, i32 %8;
    i32 %30 = add i32 %29, i32 %7;
    i32 %31 = add i32 %30, i32 %6;
    i32 %32 = add i32 %31, i32 %5;
    i32 %33 = add i32 %32, i32 %4;
    i32 %34 = mul i32 %33, i32 100;
    i32 %35 = sdiv i32 %34, i32 100;
    i32 %36 = add i32 %35, i32 %3;
    i32 %37 = srem i32 %36, i32 1500000001;
    i32 %38 = add i32 %2, i32 1;
    ubr ^while.header;
^b:
    call (i32) -> void @stoptime(i32 123);
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
