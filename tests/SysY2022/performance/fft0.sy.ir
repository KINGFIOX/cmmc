internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
^b1:
    i1 %2 = scmp eq i32 %b, i32 1;
    cbr i1 %2(prob = 0.5), ^if.then1, ^b2;
^if.then:
    ret i32 0;
^b2:
    i32 %3 = sdiv i32 %b, i32 2;
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %a, i32 %3, i32* %0);
    i32 %5 = mul i32 %4, i32 2;
    i32 %6 = srem i32 %5, i32 998244353;
    i32 %7 = srem i32 %b, i32 2;
    i1 %8 = scmp eq i32 %7, i32 1;
    cbr i1 %8(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i32 %9 = srem i32 %a, i32 998244353;
    ret i32 %9;
^if.then2:
    i32 %10 = add i32 %a, i32 %6;
    i32 %11 = srem i32 %10, i32 998244353;
    ret i32 %11;
^if.else:
    ret i32 %6;
}
internal func @power(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %2 = sdiv i32 %b, i32 2;
    i32 %3 = call (i32, i32, i32*) -> i32 @power(i32 %a, i32 %2, i32* %0);
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %3, i32 %3, i32* %0);
    i32 %5 = srem i32 %b, i32 2;
    i1 %6 = scmp eq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 1;
^if.then1:
    i32 %7 = call (i32, i32, i32*) -> i32 @multiply(i32 %4, i32 %a, i32* %0);
    ret i32 %7;
^if.else:
    ret i32 %4;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w, i32* %0) -> i32 {
^entry:
    i32* %dst_pos = alloc i32;
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %wn = alloc i32;
    i32* %i1 = alloc i32;
    i32* %w1 = alloc i32;
    i32* %n1 = alloc i32;
    i32* %begin_pos1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin_pos1 with i32 %begin_pos;
    store i32* %n1 with i32 %n;
    store i32* %w1 with i32 %w;
    i1 %1 = scmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^b:
    store i32* %i1 with i32 0;
    ubr ^while.header;
^if.then:
    ret i32 1;
^while.header:
    i32* %2 = phi [^b2, i32* %2] [^b, i32* %arr];
    i32 %3 = phi [^b2, i32 %3] [^b, i32 %begin_pos];
    i32 %4 = phi [^b2, i32 %4] [^b, i32 %n];
    i32 %5 = phi [^b2, i32 %5] [^b, i32 %w];
    i32 %6 = phi [^b2, i32 %33] [^b, i32 0];
    i1 %7 = scmp lt i32 %6, i32 %4;
    cbr i1 %7(prob = 0.97), ^while.body, ^b1;
^b1:
    i32* %8 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    store i32* %dst_pos with i32 %3;
    store i32* %len with i32 %4;
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %9 = srem i32 %6, i32 2;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %11 = sdiv i32 %6, i32 2;
    i32* %12 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %11];
    i32 %13 = add i32 %6, i32 %3;
    i32* %14 = getelementptr &(i32* %2)[i32 %13];
    i32 %15 = load i32* %14;
    store i32* %12 with i32 %15;
    ubr ^b2;
^if.else:
    i32 %16 = sdiv i32 %4, i32 2;
    i32 %17 = sdiv i32 %6, i32 2;
    i32 %18 = add i32 %16, i32 %17;
    i32* %19 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %18];
    i32 %20 = add i32 %6, i32 %3;
    i32* %21 = getelementptr &(i32* %2)[i32 %20];
    i32 %22 = load i32* %21;
    store i32* %19 with i32 %22;
    ubr ^b2;
^while.header1:
    i32* %23 = phi [^while.body1, i32* %23] [^b1, i32* %2];
    i32 %24 = phi [^while.body1, i32 %38] [^b1, i32 %3];
    i32 %25 = phi [^while.body1, i32 %39] [^b1, i32 %4];
    i32 %26 = phi [^while.body1, i32 %40] [^b1, i32 %5];
    i32 %27 = phi [^while.body1, i32 %44] [^b1, i32 0];
    i32* %28 = phi [^while.body1, i32* %28] [^b1, i32* %8];
    i32 %29 = phi [^while.body1, i32 %43] [^b1, i32 %3];
    i32* %30 = phi [^while.body1, i32* %30] [^b1, i32* %2];
    i32 %31 = phi [^b1, i32 %4] [^while.body1, i32 %42];
    i1 %32 = scmp lt i32 %27, i32 %31;
    cbr i1 %32(prob = 0.97), ^while.body1, ^b3;
^b2:
    i32 %33 = add i32 %6, i32 1;
    store i32* %i1 with i32 %33;
    ubr ^while.header;
^while.body1:
    i32 %34 = add i32 %29, i32 %27;
    i32* %35 = getelementptr &(i32* %30)[i32 %34];
    i32* %36 = getelementptr &(i32* %28)[i32 %27];
    i32 %37 = load i32* %36;
    store i32* %35 with i32 %37;
    i32 %38 = load i32* %begin_pos1;
    i32 %39 = load i32* %n1;
    i32 %40 = load i32* %w1;
    i32 %41 = load i32* %i;
    i32 %42 = load i32* %len;
    i32 %43 = load i32* %dst_pos;
    i32 %44 = add i32 %41, i32 1;
    store i32* %i with i32 %44;
    ubr ^while.header1;
^b3:
    i32 %45 = sdiv i32 %25, i32 2;
    i32 %46 = call (i32, i32, i32*) -> i32 @multiply(i32 %26, i32 %26, i32* %0);
    i32 %47 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %23, i32 %24, i32 %45, i32 %46, i32* %0);
    i32* %48 = load i32** %arr1;
    i32 %49 = load i32* %begin_pos1;
    i32 %50 = load i32* %n1;
    i32 %51 = load i32* %w1;
    i32 %52 = sdiv i32 %50, i32 2;
    i32 %53 = add i32 %49, i32 %52;
    i32 %54 = call (i32, i32, i32*) -> i32 @multiply(i32 %51, i32 %51, i32* %0);
    i32 %55 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %48, i32 %53, i32 %52, i32 %54, i32* %0);
    i32* %56 = load i32** %arr1;
    i32 %57 = load i32* %begin_pos1;
    i32 %58 = load i32* %n1;
    store i32* %i1 with i32 0;
    store i32* %wn with i32 1;
    ubr ^while.header2;
^while.header2:
    i32* %59 = phi [^while.body2, i32* %59] [^b3, i32* %56];
    i32 %60 = phi [^while.body2, i32 %89] [^b3, i32 %57];
    i32 %61 = phi [^while.body2, i32 %90] [^b3, i32 %58];
    i32 %62 = phi [^while.body2, i32 %95] [^b3, i32 0];
    i32 %63 = phi [^while.body2, i32 %94] [^b3, i32 1];
    i32 %64 = sdiv i32 %61, i32 2;
    i1 %65 = scmp lt i32 %62, i32 %64;
    cbr i1 %65(prob = 0.97), ^while.body2, ^b4;
^while.body2:
    i32 %66 = add i32 %62, i32 %60;
    i32* %67 = getelementptr &(i32* %59)[i32 %66];
    i32 %68 = load i32* %67;
    store i32* %x with i32 %68;
    i32 %69 = add i32 %66, i32 %64;
    i32* %70 = getelementptr &(i32* %59)[i32 %69];
    i32 %71 = load i32* %70;
    store i32* %y with i32 %71;
    i32 %72 = call (i32, i32, i32*) -> i32 @multiply(i32 %63, i32 %71, i32* %0);
    i32 %73 = add i32 %68, i32 %72;
    i32 %74 = srem i32 %73, i32 998244353;
    store i32* %67 with i32 %74;
    i32 %75 = load i32* %begin_pos1;
    i32 %76 = load i32* %n1;
    i32 %77 = load i32* %i1;
    i32 %78 = load i32* %wn;
    i32 %79 = load i32* %x;
    i32 %80 = load i32* %y;
    i32 %81 = sdiv i32 %76, i32 2;
    i32 %82 = add i32 %77, i32 %75;
    i32 %83 = add i32 %82, i32 %81;
    i32* %84 = getelementptr &(i32* %59)[i32 %83];
    i32 %85 = call (i32, i32, i32*) -> i32 @multiply(i32 %78, i32 %80, i32* %0);
    i32 %86 = sub i32 %79, i32 %85;
    i32 %87 = add i32 %86, i32 998244353;
    i32 %88 = srem i32 %87, i32 998244353;
    store i32* %84 with i32 %88;
    i32 %89 = load i32* %begin_pos1;
    i32 %90 = load i32* %n1;
    i32 %91 = load i32* %w1;
    i32 %92 = load i32* %i1;
    i32 %93 = load i32* %wn;
    i32 %94 = call (i32, i32, i32*) -> i32 @multiply(i32 %93, i32 %91, i32* %0);
    store i32* %wn with i32 %94;
    i32 %95 = add i32 %92, i32 1;
    store i32* %i1 with i32 %95;
    ubr ^while.header2;
^b4:
    ret i32 0;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %d = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = load i32* %n;
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* %d with i32 1;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %4];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %3];
    i32 %7 = phi [^while.body, i32 %11] [^entry, i32 1];
    i32 %8 = add i32 %6, i32 -1;
    i32 %9 = add i32 %8, i32 %5;
    i1 %10 = scmp lt i32 %7, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %11 = mul i32 %7, i32 2;
    store i32* %d with i32 %11;
    ubr ^while.header;
^b:
    i32 %12 = sdiv i32 998244352, i32 %7;
    i32 %13 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %12, i32* %d);
    i32 %14 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %7, i32 %13, i32* %d);
    i32 %15 = load i32* %d;
    i32 %16 = sdiv i32 998244352, i32 %15;
    i32 %17 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %16, i32* %d);
    i32 %18 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %2, i32 0, i32 %15, i32 %17, i32* %d);
    i32 %19 = load i32* %d;
    ubr ^while.header1;
^while.header1:
    i32 %20 = phi [^while.body1, i32 %28] [^b, i32 0];
    i32 %21 = phi [^while.body1, i32 %21] [^b, i32 %19];
    i1 %22 = scmp lt i32 %20, i32 %21;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %23 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %20];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %20];
    i32 %26 = load i32* %25;
    i32 %27 = call (i32, i32, i32*) -> i32 @multiply(i32 %24, i32 %26, i32* %d);
    store i32* %23 with i32 %27;
    i32 %28 = add i32 %20, i32 1;
    ubr ^while.header1;
^b1:
    i32 %29 = sdiv i32 998244352, i32 %21;
    i32 %30 = sub i32 998244352, i32 %29;
    i32 %31 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %30, i32* %d);
    i32 %32 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %21, i32 %31, i32* %d);
    i32 %33 = load i32* %n;
    i32 %34 = load i32* %m;
    i32 %35 = load i32* %d;
    ubr ^while.header2;
^while.header2:
    i32 %36 = phi [^while.body2, i32 %36] [^b1, i32 %33];
    i32 %37 = phi [^while.body2, i32 %37] [^b1, i32 %34];
    i32 %38 = phi [^while.body2, i32 %45] [^b1, i32 0];
    i32 %39 = phi [^while.body2, i32 %39] [^b1, i32 %35];
    i1 %40 = scmp lt i32 %38, i32 %39;
    cbr i1 %40(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32* %41 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %38];
    i32 %42 = load i32* %41;
    i32 %43 = call (i32, i32, i32*) -> i32 @power(i32 %39, i32 998244351, i32* %d);
    i32 %44 = call (i32, i32, i32*) -> i32 @multiply(i32 %42, i32 %43, i32* %d);
    store i32* %41 with i32 %44;
    i32 %45 = add i32 %38, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    i32 %46 = add i32 %37, i32 -1;
    i32 %47 = add i32 %46, i32 %36;
    call (i32, i32*) -> void @putarray(i32 %47, i32* %0);
    ret i32 0;
}
