internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = mul i32 %5, i32 2;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = and i32 %b, i32 -2147483647;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = and i32 %b, i32 -2147483647;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> void {
  ^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    ubr ^while.header;
  ^b1:
    ret;
  ^while.header:
    i32 %3 = phi [^b, i32 0] [^b4, i32 %25];
    i1 %4 = scmp gt i32 %n, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b2;
  ^while.body:
    i32 %5 = and i32 %3, i32 1;
    i1 %6 = scmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %7 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %8 = scmp gt i32 %n, i32 0;
    cbr i1 %8(prob = 0.97), ^super.header, ^b3;
  ^if.then:
    i32 %9 = add i32 %begin_pos, i32 %3;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %3, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %12];
    store i32* %13 with i32 %11;
    ubr ^b4;
  ^if.else:
    i32 %14 = sdiv i32 %3, i32 2;
    i32 %15 = add i32 %1, i32 %14;
    i32* %16 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %15];
    i32 %17 = add i32 %begin_pos, i32 %3;
    i32* %18 = getelementptr &(i32* %arr)[i32 %17];
    i32 %19 = load i32* %18;
    store i32* %16 with i32 %19;
    ubr ^b4;
  ^b3:
    i32 %20 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %20);
    i32 %21 = add i32 %begin_pos, i32 %1;
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %21, i32 %1, i32 %20);
    ubr ^while.header1;
  ^super.header:
    i32 %22 = phi [^b2, i32 0] [^while.body1, i32 %23];
    i32 %23 = add i32 %22, i32 4;
    i1 %24 = scmp gt i32 %n, i32 %23;
    cbr i1 %24(prob = 0.89), ^while.body1, ^super.header1;
  ^b4:
    i32 %25 = add i32 %3, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %26 = add i32 %begin_pos, i32 %22;
    i32* %27 = getelementptr &(i32* %arr)[i32 %26];
    i32* %28 = getelementptr &(i32* %7)[i32 %22];
    i32 %29 = load i32* %28;
    store i32* %27 with i32 %29;
    i32 %30 = add i32 %22, i32 1;
    i32 %31 = add i32 %begin_pos, i32 %30;
    i32* %32 = getelementptr &(i32* %arr)[i32 %31];
    i32* %33 = getelementptr &(i32* %28)[i64 1];
    i32 %34 = load i32* %33;
    store i32* %32 with i32 %34;
    i32 %35 = add i32 %22, i32 2;
    i32 %36 = add i32 %begin_pos, i32 %35;
    i32* %37 = getelementptr &(i32* %arr)[i32 %36];
    i32* %38 = getelementptr &(i32* %28)[i64 2];
    i32 %39 = load i32* %38;
    store i32* %37 with i32 %39;
    i32 %40 = add i32 %22, i32 3;
    i32 %41 = add i32 %begin_pos, i32 %40;
    i32* %42 = getelementptr &(i32* %arr)[i32 %41];
    i32* %43 = getelementptr &(i32* %28)[i64 3];
    i32 %44 = load i32* %43;
    store i32* %42 with i32 %44;
    ubr ^super.header;
  ^super.header1:
    i32 %45 = phi [^super.header, i32 %22] [^while.body2, i32 %46];
    i32 %46 = add i32 %45, i32 4;
    i1 %47 = scmp gt i32 %n, i32 %46;
    cbr i1 %47(prob = 0.89), ^while.body2, ^super.header2;
  ^while.header1:
    i32 %48 = phi [^b3, i32 1] [^while.body3, i32 %83];
    i32 %49 = phi [^b3, i32 0] [^while.body3, i32 %84];
    i1 %50 = scmp gt i32 %1, i32 %49;
    cbr i1 %50(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32 %51 = add i32 %begin_pos, i32 %45;
    i32* %52 = getelementptr &(i32* %arr)[i32 %51];
    i32* %53 = getelementptr &(i32* %7)[i32 %45];
    i32 %54 = load i32* %53;
    store i32* %52 with i32 %54;
    i32 %55 = add i32 %45, i32 1;
    i32 %56 = add i32 %begin_pos, i32 %55;
    i32* %57 = getelementptr &(i32* %arr)[i32 %56];
    i32* %58 = getelementptr &(i32* %53)[i64 1];
    i32 %59 = load i32* %58;
    store i32* %57 with i32 %59;
    i32 %60 = add i32 %45, i32 2;
    i32 %61 = add i32 %begin_pos, i32 %60;
    i32* %62 = getelementptr &(i32* %arr)[i32 %61];
    i32* %63 = getelementptr &(i32* %53)[i64 2];
    i32 %64 = load i32* %63;
    store i32* %62 with i32 %64;
    i32 %65 = add i32 %45, i32 3;
    i32 %66 = add i32 %begin_pos, i32 %65;
    i32* %67 = getelementptr &(i32* %arr)[i32 %66];
    i32* %68 = getelementptr &(i32* %53)[i64 3];
    i32 %69 = load i32* %68;
    store i32* %67 with i32 %69;
    ubr ^super.header1;
  ^while.body3:
    i32 %70 = add i32 %1, i32 %49;
    i32 %71 = add i32 %begin_pos, i32 %70;
    i32* %72 = getelementptr &(i32* %arr)[i32 %71];
    i32 %73 = add i32 %begin_pos, i32 %49;
    i32* %74 = getelementptr &(i32* %arr)[i32 %73];
    i32 %75 = load i32* %74;
    i32 %76 = load i32* %72;
    i32 %77 = call (i32, i32) -> i32 @multiply(i32 %48, i32 %76);
    i32 %78 = add i32 %75, i32 %77;
    i32 %79 = srem i32 %78, i32 998244353;
    store i32* %74 with i32 %79;
    i32 %80 = sub i32 %75, i32 %77;
    i32 %81 = add i32 %80, i32 998244353;
    i32 %82 = srem i32 %81, i32 998244353;
    store i32* %72 with i32 %82;
    i32 %83 = call (i32, i32) -> i32 @multiply(i32 %48, i32 %w);
    i32 %84 = add i32 %49, i32 1;
    ubr ^while.header1;
  ^super.header2:
    i32 %85 = phi [^super.header1, i32 %45] [^while.body4, i32 %86];
    i32 %86 = add i32 %85, i32 4;
    i1 %87 = scmp gt i32 %n, i32 %86;
    cbr i1 %87(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %88 = add i32 %begin_pos, i32 %85;
    i32* %89 = getelementptr &(i32* %arr)[i32 %88];
    i32* %90 = getelementptr &(i32* %7)[i32 %85];
    i32 %91 = load i32* %90;
    store i32* %89 with i32 %91;
    i32 %92 = add i32 %85, i32 1;
    i32 %93 = add i32 %begin_pos, i32 %92;
    i32* %94 = getelementptr &(i32* %arr)[i32 %93];
    i32* %95 = getelementptr &(i32* %90)[i64 1];
    i32 %96 = load i32* %95;
    store i32* %94 with i32 %96;
    i32 %97 = add i32 %85, i32 2;
    i32 %98 = add i32 %begin_pos, i32 %97;
    i32* %99 = getelementptr &(i32* %arr)[i32 %98];
    i32* %100 = getelementptr &(i32* %90)[i64 2];
    i32 %101 = load i32* %100;
    store i32* %99 with i32 %101;
    i32 %102 = add i32 %85, i32 3;
    i32 %103 = add i32 %begin_pos, i32 %102;
    i32* %104 = getelementptr &(i32* %arr)[i32 %103];
    i32* %105 = getelementptr &(i32* %90)[i64 3];
    i32 %106 = load i32* %105;
    store i32* %104 with i32 %106;
    ubr ^super.header2;
  ^while.body5:
    i32 %107 = phi [^super.header2, i32 %85] [^while.body5, i32 %112];
    i32 %108 = add i32 %begin_pos, i32 %107;
    i32* %109 = getelementptr &(i32* %arr)[i32 %108];
    i32* %110 = getelementptr &(i32* %7)[i32 %107];
    i32 %111 = load i32* %110;
    store i32* %109 with i32 %111;
    i32 %112 = add i32 %107, i32 1;
    i1 %113 = scmp gt i32 %n, i32 %112;
    cbr i1 %113(prob = 0.97), ^while.body5, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = scmp gt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = scmp gt i32 %7, i32 %10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %14);
    call (i32*, i32, i32, i32) -> void @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %15 = scmp gt i32 %12, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = scmp gt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %24 = sub i32 998244352, i32 %13;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %25);
    cbr i1 %15(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32 %26 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %27 = phi [^indirect, i32 0] [^while.body2, i32 %31];
    i32* %28 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %26);
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %27, i32 1;
    i1 %32 = scmp gt i32 %12, i32 %31;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b2;
}
