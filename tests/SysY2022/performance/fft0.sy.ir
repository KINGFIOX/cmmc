internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = mul i32 %5, i32 2;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = srem i32 %b, i32 2;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = srem i32 %b, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
  ^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    [2097152 * i32]* %1 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    ubr ^while.header;
  ^b1:
    ret i32 undef;
  ^while.header:
    i32 %2 = phi [^b, i32 0] [^b4, i32 %28];
    i1 %3 = scmp lt i32 %2, i32 %n;
    cbr i1 %3(prob = 0.97), ^while.body, ^b2;
  ^while.body:
    i32 %4 = srem i32 %2, i32 2;
    i1 %5 = scmp eq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %6 = getelementptr &([2097152 * i32]* %1)[i64 0][i64 0];
    i1 %7 = scmp gt i32 %n, i32 0;
    cbr i1 %7(prob = 0.97), ^super.header, ^b3;
  ^if.then:
    i32 %8 = add i32 %2, i32 %begin_pos;
    i32* %9 = getelementptr &(i32* %arr)[i32 %8];
    i32 %10 = load i32* %9;
    i32 %11 = sdiv i32 %2, i32 2;
    i32* %12 = getelementptr &([2097152 * i32]* %1)[i64 0][i32 %11];
    store i32* %12 with i32 %10;
    ubr ^b4;
  ^if.else:
    i32 %13 = sdiv i32 %n, i32 2;
    i32 %14 = sdiv i32 %2, i32 2;
    i32 %15 = add i32 %13, i32 %14;
    i32* %16 = getelementptr &([2097152 * i32]* %1)[i64 0][i32 %15];
    i32 %17 = add i32 %2, i32 %begin_pos;
    i32* %18 = getelementptr &(i32* %arr)[i32 %17];
    i32 %19 = load i32* %18;
    store i32* %16 with i32 %19;
    ubr ^b4;
  ^b3:
    i32 %20 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    i32 %21 = sdiv i32 %n, i32 2;
    i32 %22 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %begin_pos, i32 %21, i32 %20);
    i32 %23 = add i32 %begin_pos, i32 %21;
    i32 %24 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %23, i32 %21, i32 %20);
    ubr ^while.header1;
  ^super.header:
    i32 %25 = phi [^b2, i32 0] [^while.body1, i32 %26];
    i32 %26 = add i32 %25, i32 16;
    i1 %27 = scmp lt i32 %26, i32 %n;
    cbr i1 %27(prob = 0.67), ^while.body1, ^super.header1;
  ^b4:
    i32 %28 = add i32 %2, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %29 = add i32 %25, i32 %begin_pos;
    i32* %30 = getelementptr &(i32* %arr)[i32 %29];
    i32* %31 = getelementptr &(i32* %6)[i32 %25];
    i32 %32 = load i32* %31;
    store i32* %30 with i32 %32;
    i32 %33 = add i32 %25, i32 1;
    i32 %34 = add i32 %33, i32 %begin_pos;
    i32* %35 = getelementptr &(i32* %arr)[i32 %34];
    i32* %36 = getelementptr &(i32* %31)[i64 1];
    i32 %37 = load i32* %36;
    store i32* %35 with i32 %37;
    i32 %38 = add i32 %25, i32 2;
    i32 %39 = add i32 %38, i32 %begin_pos;
    i32* %40 = getelementptr &(i32* %arr)[i32 %39];
    i32* %41 = getelementptr &(i32* %31)[i64 2];
    i32 %42 = load i32* %41;
    store i32* %40 with i32 %42;
    i32 %43 = add i32 %25, i32 3;
    i32 %44 = add i32 %43, i32 %begin_pos;
    i32* %45 = getelementptr &(i32* %arr)[i32 %44];
    i32* %46 = getelementptr &(i32* %31)[i64 3];
    i32 %47 = load i32* %46;
    store i32* %45 with i32 %47;
    i32 %48 = add i32 %25, i32 4;
    i32 %49 = add i32 %48, i32 %begin_pos;
    i32* %50 = getelementptr &(i32* %arr)[i32 %49];
    i32* %51 = getelementptr &(i32* %31)[i64 4];
    i32 %52 = load i32* %51;
    store i32* %50 with i32 %52;
    i32 %53 = add i32 %25, i32 5;
    i32 %54 = add i32 %53, i32 %begin_pos;
    i32* %55 = getelementptr &(i32* %arr)[i32 %54];
    i32* %56 = getelementptr &(i32* %31)[i64 5];
    i32 %57 = load i32* %56;
    store i32* %55 with i32 %57;
    i32 %58 = add i32 %25, i32 6;
    i32 %59 = add i32 %58, i32 %begin_pos;
    i32* %60 = getelementptr &(i32* %arr)[i32 %59];
    i32* %61 = getelementptr &(i32* %31)[i64 6];
    i32 %62 = load i32* %61;
    store i32* %60 with i32 %62;
    i32 %63 = add i32 %25, i32 7;
    i32 %64 = add i32 %63, i32 %begin_pos;
    i32* %65 = getelementptr &(i32* %arr)[i32 %64];
    i32* %66 = getelementptr &(i32* %31)[i64 7];
    i32 %67 = load i32* %66;
    store i32* %65 with i32 %67;
    i32 %68 = add i32 %25, i32 8;
    i32 %69 = add i32 %68, i32 %begin_pos;
    i32* %70 = getelementptr &(i32* %arr)[i32 %69];
    i32* %71 = getelementptr &(i32* %31)[i64 8];
    i32 %72 = load i32* %71;
    store i32* %70 with i32 %72;
    i32 %73 = add i32 %25, i32 9;
    i32 %74 = add i32 %73, i32 %begin_pos;
    i32* %75 = getelementptr &(i32* %arr)[i32 %74];
    i32* %76 = getelementptr &(i32* %31)[i64 9];
    i32 %77 = load i32* %76;
    store i32* %75 with i32 %77;
    i32 %78 = add i32 %25, i32 10;
    i32 %79 = add i32 %78, i32 %begin_pos;
    i32* %80 = getelementptr &(i32* %arr)[i32 %79];
    i32* %81 = getelementptr &(i32* %31)[i64 10];
    i32 %82 = load i32* %81;
    store i32* %80 with i32 %82;
    i32 %83 = add i32 %25, i32 11;
    i32 %84 = add i32 %83, i32 %begin_pos;
    i32* %85 = getelementptr &(i32* %arr)[i32 %84];
    i32* %86 = getelementptr &(i32* %31)[i64 11];
    i32 %87 = load i32* %86;
    store i32* %85 with i32 %87;
    i32 %88 = add i32 %25, i32 12;
    i32 %89 = add i32 %88, i32 %begin_pos;
    i32* %90 = getelementptr &(i32* %arr)[i32 %89];
    i32* %91 = getelementptr &(i32* %31)[i64 12];
    i32 %92 = load i32* %91;
    store i32* %90 with i32 %92;
    i32 %93 = add i32 %25, i32 13;
    i32 %94 = add i32 %93, i32 %begin_pos;
    i32* %95 = getelementptr &(i32* %arr)[i32 %94];
    i32* %96 = getelementptr &(i32* %31)[i64 13];
    i32 %97 = load i32* %96;
    store i32* %95 with i32 %97;
    i32 %98 = add i32 %25, i32 14;
    i32 %99 = add i32 %98, i32 %begin_pos;
    i32* %100 = getelementptr &(i32* %arr)[i32 %99];
    i32* %101 = getelementptr &(i32* %31)[i64 14];
    i32 %102 = load i32* %101;
    store i32* %100 with i32 %102;
    i32 %103 = add i32 %25, i32 15;
    i32 %104 = add i32 %103, i32 %begin_pos;
    i32* %105 = getelementptr &(i32* %arr)[i32 %104];
    i32* %106 = getelementptr &(i32* %31)[i64 15];
    i32 %107 = load i32* %106;
    store i32* %105 with i32 %107;
    ubr ^super.header;
  ^super.header1:
    i32 %108 = phi [^super.header, i32 %25] [^while.body2, i32 %109];
    i32 %109 = add i32 %108, i32 16;
    i1 %110 = scmp lt i32 %109, i32 %n;
    cbr i1 %110(prob = 0.67), ^while.body2, ^super.header2;
  ^while.header1:
    i32 %111 = phi [^b3, i32 1] [^while.body3, i32 %207];
    i32 %112 = phi [^b3, i32 0] [^while.body3, i32 %208];
    i32 %113 = sdiv i32 %n, i32 2;
    i1 %114 = scmp lt i32 %112, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32 %115 = add i32 %108, i32 %begin_pos;
    i32* %116 = getelementptr &(i32* %arr)[i32 %115];
    i32* %117 = getelementptr &(i32* %6)[i32 %108];
    i32 %118 = load i32* %117;
    store i32* %116 with i32 %118;
    i32 %119 = add i32 %108, i32 1;
    i32 %120 = add i32 %119, i32 %begin_pos;
    i32* %121 = getelementptr &(i32* %arr)[i32 %120];
    i32* %122 = getelementptr &(i32* %117)[i64 1];
    i32 %123 = load i32* %122;
    store i32* %121 with i32 %123;
    i32 %124 = add i32 %108, i32 2;
    i32 %125 = add i32 %124, i32 %begin_pos;
    i32* %126 = getelementptr &(i32* %arr)[i32 %125];
    i32* %127 = getelementptr &(i32* %117)[i64 2];
    i32 %128 = load i32* %127;
    store i32* %126 with i32 %128;
    i32 %129 = add i32 %108, i32 3;
    i32 %130 = add i32 %129, i32 %begin_pos;
    i32* %131 = getelementptr &(i32* %arr)[i32 %130];
    i32* %132 = getelementptr &(i32* %117)[i64 3];
    i32 %133 = load i32* %132;
    store i32* %131 with i32 %133;
    i32 %134 = add i32 %108, i32 4;
    i32 %135 = add i32 %134, i32 %begin_pos;
    i32* %136 = getelementptr &(i32* %arr)[i32 %135];
    i32* %137 = getelementptr &(i32* %117)[i64 4];
    i32 %138 = load i32* %137;
    store i32* %136 with i32 %138;
    i32 %139 = add i32 %108, i32 5;
    i32 %140 = add i32 %139, i32 %begin_pos;
    i32* %141 = getelementptr &(i32* %arr)[i32 %140];
    i32* %142 = getelementptr &(i32* %117)[i64 5];
    i32 %143 = load i32* %142;
    store i32* %141 with i32 %143;
    i32 %144 = add i32 %108, i32 6;
    i32 %145 = add i32 %144, i32 %begin_pos;
    i32* %146 = getelementptr &(i32* %arr)[i32 %145];
    i32* %147 = getelementptr &(i32* %117)[i64 6];
    i32 %148 = load i32* %147;
    store i32* %146 with i32 %148;
    i32 %149 = add i32 %108, i32 7;
    i32 %150 = add i32 %149, i32 %begin_pos;
    i32* %151 = getelementptr &(i32* %arr)[i32 %150];
    i32* %152 = getelementptr &(i32* %117)[i64 7];
    i32 %153 = load i32* %152;
    store i32* %151 with i32 %153;
    i32 %154 = add i32 %108, i32 8;
    i32 %155 = add i32 %154, i32 %begin_pos;
    i32* %156 = getelementptr &(i32* %arr)[i32 %155];
    i32* %157 = getelementptr &(i32* %117)[i64 8];
    i32 %158 = load i32* %157;
    store i32* %156 with i32 %158;
    i32 %159 = add i32 %108, i32 9;
    i32 %160 = add i32 %159, i32 %begin_pos;
    i32* %161 = getelementptr &(i32* %arr)[i32 %160];
    i32* %162 = getelementptr &(i32* %117)[i64 9];
    i32 %163 = load i32* %162;
    store i32* %161 with i32 %163;
    i32 %164 = add i32 %108, i32 10;
    i32 %165 = add i32 %164, i32 %begin_pos;
    i32* %166 = getelementptr &(i32* %arr)[i32 %165];
    i32* %167 = getelementptr &(i32* %117)[i64 10];
    i32 %168 = load i32* %167;
    store i32* %166 with i32 %168;
    i32 %169 = add i32 %108, i32 11;
    i32 %170 = add i32 %169, i32 %begin_pos;
    i32* %171 = getelementptr &(i32* %arr)[i32 %170];
    i32* %172 = getelementptr &(i32* %117)[i64 11];
    i32 %173 = load i32* %172;
    store i32* %171 with i32 %173;
    i32 %174 = add i32 %108, i32 12;
    i32 %175 = add i32 %174, i32 %begin_pos;
    i32* %176 = getelementptr &(i32* %arr)[i32 %175];
    i32* %177 = getelementptr &(i32* %117)[i64 12];
    i32 %178 = load i32* %177;
    store i32* %176 with i32 %178;
    i32 %179 = add i32 %108, i32 13;
    i32 %180 = add i32 %179, i32 %begin_pos;
    i32* %181 = getelementptr &(i32* %arr)[i32 %180];
    i32* %182 = getelementptr &(i32* %117)[i64 13];
    i32 %183 = load i32* %182;
    store i32* %181 with i32 %183;
    i32 %184 = add i32 %108, i32 14;
    i32 %185 = add i32 %184, i32 %begin_pos;
    i32* %186 = getelementptr &(i32* %arr)[i32 %185];
    i32* %187 = getelementptr &(i32* %117)[i64 14];
    i32 %188 = load i32* %187;
    store i32* %186 with i32 %188;
    i32 %189 = add i32 %108, i32 15;
    i32 %190 = add i32 %189, i32 %begin_pos;
    i32* %191 = getelementptr &(i32* %arr)[i32 %190];
    i32* %192 = getelementptr &(i32* %117)[i64 15];
    i32 %193 = load i32* %192;
    store i32* %191 with i32 %193;
    ubr ^super.header1;
  ^while.body3:
    i32 %194 = add i32 %112, i32 %begin_pos;
    i32* %195 = getelementptr &(i32* %arr)[i32 %194];
    i32 %196 = load i32* %195;
    i32 %197 = add i32 %112, i32 %113;
    i32 %198 = add i32 %197, i32 %begin_pos;
    i32* %199 = getelementptr &(i32* %arr)[i32 %198];
    i32 %200 = load i32* %199;
    i32 %201 = call (i32, i32) -> i32 @multiply(i32 %111, i32 %200);
    i32 %202 = add i32 %196, i32 %201;
    i32 %203 = srem i32 %202, i32 998244353;
    store i32* %195 with i32 %203;
    i32 %204 = sub i32 %196, i32 %201;
    i32 %205 = add i32 %204, i32 998244353;
    i32 %206 = srem i32 %205, i32 998244353;
    store i32* %199 with i32 %206;
    i32 %207 = call (i32, i32) -> i32 @multiply(i32 %111, i32 %w);
    i32 %208 = add i32 %112, i32 1;
    ubr ^while.header1;
  ^super.header2:
    i32 %209 = phi [^super.header1, i32 %108] [^while.body4, i32 %210];
    i32 %210 = add i32 %209, i32 16;
    i1 %211 = scmp lt i32 %210, i32 %n;
    cbr i1 %211(prob = 0.67), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %212 = add i32 %209, i32 %begin_pos;
    i32* %213 = getelementptr &(i32* %arr)[i32 %212];
    i32* %214 = getelementptr &(i32* %6)[i32 %209];
    i32 %215 = load i32* %214;
    store i32* %213 with i32 %215;
    i32 %216 = add i32 %209, i32 1;
    i32 %217 = add i32 %216, i32 %begin_pos;
    i32* %218 = getelementptr &(i32* %arr)[i32 %217];
    i32* %219 = getelementptr &(i32* %214)[i64 1];
    i32 %220 = load i32* %219;
    store i32* %218 with i32 %220;
    i32 %221 = add i32 %209, i32 2;
    i32 %222 = add i32 %221, i32 %begin_pos;
    i32* %223 = getelementptr &(i32* %arr)[i32 %222];
    i32* %224 = getelementptr &(i32* %214)[i64 2];
    i32 %225 = load i32* %224;
    store i32* %223 with i32 %225;
    i32 %226 = add i32 %209, i32 3;
    i32 %227 = add i32 %226, i32 %begin_pos;
    i32* %228 = getelementptr &(i32* %arr)[i32 %227];
    i32* %229 = getelementptr &(i32* %214)[i64 3];
    i32 %230 = load i32* %229;
    store i32* %228 with i32 %230;
    i32 %231 = add i32 %209, i32 4;
    i32 %232 = add i32 %231, i32 %begin_pos;
    i32* %233 = getelementptr &(i32* %arr)[i32 %232];
    i32* %234 = getelementptr &(i32* %214)[i64 4];
    i32 %235 = load i32* %234;
    store i32* %233 with i32 %235;
    i32 %236 = add i32 %209, i32 5;
    i32 %237 = add i32 %236, i32 %begin_pos;
    i32* %238 = getelementptr &(i32* %arr)[i32 %237];
    i32* %239 = getelementptr &(i32* %214)[i64 5];
    i32 %240 = load i32* %239;
    store i32* %238 with i32 %240;
    i32 %241 = add i32 %209, i32 6;
    i32 %242 = add i32 %241, i32 %begin_pos;
    i32* %243 = getelementptr &(i32* %arr)[i32 %242];
    i32* %244 = getelementptr &(i32* %214)[i64 6];
    i32 %245 = load i32* %244;
    store i32* %243 with i32 %245;
    i32 %246 = add i32 %209, i32 7;
    i32 %247 = add i32 %246, i32 %begin_pos;
    i32* %248 = getelementptr &(i32* %arr)[i32 %247];
    i32* %249 = getelementptr &(i32* %214)[i64 7];
    i32 %250 = load i32* %249;
    store i32* %248 with i32 %250;
    i32 %251 = add i32 %209, i32 8;
    i32 %252 = add i32 %251, i32 %begin_pos;
    i32* %253 = getelementptr &(i32* %arr)[i32 %252];
    i32* %254 = getelementptr &(i32* %214)[i64 8];
    i32 %255 = load i32* %254;
    store i32* %253 with i32 %255;
    i32 %256 = add i32 %209, i32 9;
    i32 %257 = add i32 %256, i32 %begin_pos;
    i32* %258 = getelementptr &(i32* %arr)[i32 %257];
    i32* %259 = getelementptr &(i32* %214)[i64 9];
    i32 %260 = load i32* %259;
    store i32* %258 with i32 %260;
    i32 %261 = add i32 %209, i32 10;
    i32 %262 = add i32 %261, i32 %begin_pos;
    i32* %263 = getelementptr &(i32* %arr)[i32 %262];
    i32* %264 = getelementptr &(i32* %214)[i64 10];
    i32 %265 = load i32* %264;
    store i32* %263 with i32 %265;
    i32 %266 = add i32 %209, i32 11;
    i32 %267 = add i32 %266, i32 %begin_pos;
    i32* %268 = getelementptr &(i32* %arr)[i32 %267];
    i32* %269 = getelementptr &(i32* %214)[i64 11];
    i32 %270 = load i32* %269;
    store i32* %268 with i32 %270;
    i32 %271 = add i32 %209, i32 12;
    i32 %272 = add i32 %271, i32 %begin_pos;
    i32* %273 = getelementptr &(i32* %arr)[i32 %272];
    i32* %274 = getelementptr &(i32* %214)[i64 12];
    i32 %275 = load i32* %274;
    store i32* %273 with i32 %275;
    i32 %276 = add i32 %209, i32 13;
    i32 %277 = add i32 %276, i32 %begin_pos;
    i32* %278 = getelementptr &(i32* %arr)[i32 %277];
    i32* %279 = getelementptr &(i32* %214)[i64 13];
    i32 %280 = load i32* %279;
    store i32* %278 with i32 %280;
    i32 %281 = add i32 %209, i32 14;
    i32 %282 = add i32 %281, i32 %begin_pos;
    i32* %283 = getelementptr &(i32* %arr)[i32 %282];
    i32* %284 = getelementptr &(i32* %214)[i64 14];
    i32 %285 = load i32* %284;
    store i32* %283 with i32 %285;
    i32 %286 = add i32 %209, i32 15;
    i32 %287 = add i32 %286, i32 %begin_pos;
    i32* %288 = getelementptr &(i32* %arr)[i32 %287];
    i32* %289 = getelementptr &(i32* %214)[i64 15];
    i32 %290 = load i32* %289;
    store i32* %288 with i32 %290;
    ubr ^super.header2;
  ^while.body5:
    i32 %291 = phi [^super.header2, i32 %209] [^while.body5, i32 %296];
    i32 %292 = add i32 %begin_pos, i32 %291;
    i32* %293 = getelementptr &(i32* %arr)[i32 %292];
    i32* %294 = getelementptr &(i32* %6)[i32 %291];
    i32 %295 = load i32* %294;
    store i32* %293 with i32 %295;
    i32 %296 = add i32 %291, i32 1;
    i1 %297 = scmp lt i32 %296, i32 %n;
    cbr i1 %297(prob = 0.97), ^while.body5, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = scmp gt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = scmp lt i32 %10, i32 %7;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    i32 %15 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %14);
    i32 %16 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %17 = scmp gt i32 %12, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^while.body1, i32 %24];
    i32* %19 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i32 %23 = call (i32, i32) -> i32 @multiply(i32 %20, i32 %22);
    store i32* %19 with i32 %23;
    i32 %24 = add i32 %18, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %12;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %26 = sub i32 998244352, i32 %13;
    i32 %27 = call (i32, i32) -> i32 @power(i32 3, i32 %26);
    i32 %28 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %27);
    cbr i1 %17(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32 %29 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %30 = phi [^indirect, i32 0] [^while.body2, i32 %34];
    i32* %31 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = call (i32, i32) -> i32 @multiply(i32 %32, i32 %29);
    store i32* %31 with i32 %33;
    i32 %34 = add i32 %30, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %12;
    cbr i1 %35(prob = 0.97), ^while.body2, ^b2;
}
