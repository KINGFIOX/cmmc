internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %2 = scmp eq i32 %b, i32 1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %3 = phi [^entry, i32 0] [^if.then, i32 %4] [^b3, i32 %8] [^if.then1, i32 %12];
    ret i32 %3;
^if.then:
    i32 %4 = srem i32 %a, i32 998244353;
    ubr ^b2;
^b3:
    i32 %5 = sdiv i32 %b, i32 2;
    i32 %6 = call (i32, i32, i32*) -> i32 @multiply(i32 %a, i32 %5, i32* %0);
    i32 %7 = mul i32 %6, i32 2;
    i32 %8 = srem i32 %7, i32 998244353;
    i32 %9 = srem i32 %b, i32 2;
    i1 %10 = scmp eq i32 %9, i32 1;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %11 = add i32 %a, i32 %8;
    i32 %12 = srem i32 %11, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %2 = sdiv i32 %b, i32 2;
    i32 %3 = call (i32, i32, i32*) -> i32 @power(i32 %a, i32 %2, i32* %0);
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %3, i32 %3, i32* %0);
    i32 %5 = srem i32 %b, i32 2;
    i1 %6 = scmp eq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %7 = phi [^entry, i32 1] [^b1, i32 %4] [^if.then, i32 %8];
    ret i32 %7;
^if.then:
    i32 %8 = call (i32, i32, i32*) -> i32 @multiply(i32 %4, i32 %a, i32* %0);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w, i32* %0) -> i32 {
^entry:
    i32* %dst_pos = alloc i32;
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %wn = alloc i32;
    i32* %i1 = alloc i32;
    i32* %w1 = alloc i32;
    i32* %n1 = alloc i32;
    i32* %begin_pos1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin_pos1 with i32 %begin_pos;
    store i32* %n1 with i32 %n;
    store i32* %w1 with i32 %w;
    i1 %1 = scmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
^b:
    i32 %2 = sdiv i32 %n, i32 2;
    store i32* %i1 with i32 0;
    i1 %3 = scmp gt i32 %n, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b2;
^b1:
    ret i32 undef;
^while.body:
    i32 %4 = phi [^b, i32 0] [^b4, i32 %52];
    i32 %5 = srem i32 %4, i32 2;
    i1 %6 = scmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
^b2:
    i32* %7 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    store i32* %dst_pos with i32 %begin_pos;
    store i32* %len with i32 %n;
    store i32* %i with i32 0;
    cbr i1 %3(prob = 0.97), ^while.body1, ^b3;
^if.then:
    i32 %8 = add i32 %4, i32 %begin_pos;
    i32 %9 = sdiv i32 %4, i32 2;
    i32* %10 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %9];
    i32* %11 = getelementptr &(i32* %arr)[i32 %8];
    i32 %12 = load i32* %11;
    store i32* %10 with i32 %12;
    ubr ^b4;
^if.else:
    i32 %13 = add i32 %4, i32 %begin_pos;
    i32 %14 = sdiv i32 %4, i32 2;
    i32 %15 = add i32 %2, i32 %14;
    i32* %16 = getelementptr &(i32* %arr)[i32 %13];
    i32* %17 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %15];
    i32 %18 = load i32* %16;
    store i32* %17 with i32 %18;
    ubr ^b4;
^while.body1:
    i32 %19 = phi [^b2, i32 0] [^while.body1, i32 %31];
    i32 %20 = phi [^b2, i32 %begin_pos] [^while.body1, i32 %30];
    i32 %21 = add i32 %19, i32 %20;
    i32* %22 = getelementptr &(i32* %7)[i32 %19];
    i32* %23 = getelementptr &(i32* %arr)[i32 %21];
    i32 %24 = load i32* %22;
    store i32* %23 with i32 %24;
    i32 %25 = load i32* %begin_pos1;
    i32 %26 = load i32* %n1;
    i32 %27 = load i32* %w1;
    i32 %28 = load i32* %i;
    i32 %29 = load i32* %len;
    i32 %30 = load i32* %dst_pos;
    i32 %31 = add i32 %28, i32 1;
    store i32* %i with i32 %31;
    i1 %32 = scmp lt i32 %31, i32 %29;
    cbr i1 %32(prob = 0.97), ^while.body1, ^b3;
^b3:
    i32 %33 = phi [^b2, i32 %begin_pos] [^while.body1, i32 %25];
    i32 %34 = phi [^b2, i32 %n] [^while.body1, i32 %26];
    i32 %35 = phi [^b2, i32 %w] [^while.body1, i32 %27];
    i32 %36 = sdiv i32 %34, i32 2;
    i32 %37 = call (i32, i32, i32*) -> i32 @multiply(i32 %35, i32 %35, i32* %0);
    i32 %38 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arr, i32 %33, i32 %36, i32 %37, i32* %0);
    i32* %39 = load i32** %arr1;
    i32 %40 = load i32* %begin_pos1;
    i32 %41 = load i32* %n1;
    i32 %42 = load i32* %w1;
    i32 %43 = sdiv i32 %41, i32 2;
    i32 %44 = call (i32, i32, i32*) -> i32 @multiply(i32 %42, i32 %42, i32* %0);
    i32 %45 = add i32 %40, i32 %43;
    i32 %46 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %39, i32 %45, i32 %43, i32 %44, i32* %0);
    i32* %47 = load i32** %arr1;
    i32 %48 = load i32* %begin_pos1;
    i32 %49 = load i32* %n1;
    store i32* %i1 with i32 0;
    store i32* %wn with i32 1;
    i32 %50 = sdiv i32 %49, i32 2;
    i1 %51 = scmp gt i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body2, ^b1;
^b4:
    i32 %52 = add i32 %4, i32 1;
    store i32* %i1 with i32 %52;
    i1 %53 = scmp lt i32 %52, i32 %n;
    cbr i1 %53(prob = 0.97), ^while.body, ^b2;
^while.body2:
    i32 %54 = phi [^b3, i32 %48] [^while.body2, i32 %82];
    i32 %55 = phi [^b3, i32 1] [^while.body2, i32 %87];
    i32 %56 = phi [^b3, i32 0] [^while.body2, i32 %88];
    i32 %57 = phi [^b3, i32 %49] [^while.body2, i32 %83];
    i32 %58 = add i32 %56, i32 %54;
    i32* %59 = getelementptr &(i32* %47)[i32 %58];
    i32 %60 = load i32* %59;
    store i32* %x with i32 %60;
    i32 %61 = sdiv i32 %57, i32 2;
    i32 %62 = add i32 %58, i32 %61;
    i32* %63 = getelementptr &(i32* %47)[i32 %62];
    i32 %64 = load i32* %63;
    store i32* %y with i32 %64;
    i32 %65 = call (i32, i32, i32*) -> i32 @multiply(i32 %55, i32 %64, i32* %0);
    i32 %66 = add i32 %60, i32 %65;
    i32 %67 = srem i32 %66, i32 998244353;
    store i32* %59 with i32 %67;
    i32 %68 = load i32* %begin_pos1;
    i32 %69 = load i32* %n1;
    i32 %70 = load i32* %i1;
    i32 %71 = load i32* %wn;
    i32 %72 = load i32* %x;
    i32 %73 = load i32* %y;
    i32 %74 = add i32 %70, i32 %68;
    i32 %75 = sdiv i32 %69, i32 2;
    i32 %76 = call (i32, i32, i32*) -> i32 @multiply(i32 %71, i32 %73, i32* %0);
    i32 %77 = add i32 %74, i32 %75;
    i32 %78 = sub i32 %72, i32 %76;
    i32 %79 = add i32 %78, i32 998244353;
    i32* %80 = getelementptr &(i32* %47)[i32 %77];
    i32 %81 = srem i32 %79, i32 998244353;
    store i32* %80 with i32 %81;
    i32 %82 = load i32* %begin_pos1;
    i32 %83 = load i32* %n1;
    i32 %84 = load i32* %w1;
    i32 %85 = load i32* %i1;
    i32 %86 = load i32* %wn;
    i32 %87 = call (i32, i32, i32*) -> i32 @multiply(i32 %86, i32 %84, i32* %0);
    store i32* %wn with i32 %87;
    i32 %88 = add i32 %85, i32 1;
    store i32* %i1 with i32 %88;
    i32 %89 = sdiv i32 %83, i32 2;
    i1 %90 = scmp lt i32 %88, i32 %89;
    cbr i1 %90(prob = 0.97), ^while.body2, ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %d = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = load i32* %n;
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* %d with i32 1;
    i32 %5 = add i32 %4, i32 -1;
    i32 %6 = add i32 %5, i32 %3;
    i1 %7 = scmp gt i32 %6, i32 1;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = phi [^entry, i32 1] [^while.body, i32 %9];
    i32 %9 = mul i32 %8, i32 2;
    store i32* %d with i32 %9;
    i1 %10 = scmp lt i32 %9, i32 %6;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^b:
    i32 %11 = phi [^entry, i32 1] [^while.body, i32 %9];
    i32 %12 = sdiv i32 998244352, i32 %11;
    i32 %13 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %12, i32* %d);
    i32 %14 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %11, i32 %13, i32* %d);
    i32 %15 = load i32* %d;
    i32 %16 = sdiv i32 998244352, i32 %15;
    i32 %17 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %16, i32* %d);
    i32 %18 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %2, i32 0, i32 %15, i32 %17, i32* %d);
    i32 %19 = load i32* %d;
    i1 %20 = scmp gt i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %21 = phi [^b, i32 0] [^while.body1, i32 %27];
    i32* %22 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %21];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %21];
    i32 %25 = load i32* %24;
    i32 %26 = call (i32, i32, i32*) -> i32 @multiply(i32 %23, i32 %25, i32* %d);
    store i32* %22 with i32 %26;
    i32 %27 = add i32 %21, i32 1;
    i1 %28 = scmp lt i32 %27, i32 %19;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %29 = sdiv i32 998244352, i32 %19;
    i32 %30 = sub i32 998244352, i32 %29;
    i32 %31 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %30, i32* %d);
    i32 %32 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %19, i32 %31, i32* %d);
    i32 %33 = load i32* %n;
    i32 %34 = load i32* %m;
    i32 %35 = load i32* %d;
    i1 %36 = scmp gt i32 %35, i32 0;
    i32 %37 = call (i32, i32, i32*) -> i32 @power(i32 %35, i32 998244351, i32* %d);
    cbr i1 %36(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %38 = phi [^b1, i32 0] [^while.body2, i32 %42];
    i32* %39 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    i32 %41 = call (i32, i32, i32*) -> i32 @multiply(i32 %40, i32 %37, i32* %d);
    store i32* %39 with i32 %41;
    i32 %42 = add i32 %38, i32 1;
    i1 %43 = scmp lt i32 %42, i32 %35;
    cbr i1 %43(prob = 0.97), ^while.body2, ^b2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    i32 %44 = add i32 %34, i32 -1;
    i32 %45 = add i32 %44, i32 %33;
    call (i32, i32*) -> void @putarray(i32 %45, i32* %0);
    ret i32 0;
}
