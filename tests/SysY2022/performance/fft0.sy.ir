internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = mul i32 %5, i32 2;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = srem i32 %b, i32 2;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = srem i32 %b, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
  ^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    ubr ^while.header;
  ^b1:
    ret i32 undef;
  ^while.header:
    i32 %3 = phi [^b, i32 0] [^b4, i32 %27];
    i1 %4 = scmp lt i32 %3, i32 %n;
    cbr i1 %4(prob = 0.97), ^while.body, ^b2;
  ^while.body:
    i32 %5 = and i32 %3, i32 1;
    i1 %6 = scmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %7 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %8 = scmp gt i32 %n, i32 0;
    cbr i1 %8(prob = 0.97), ^super.header, ^b3;
  ^if.then:
    i32 %9 = add i32 %3, i32 %begin_pos;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %3, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %12];
    store i32* %13 with i32 %11;
    ubr ^b4;
  ^if.else:
    i32 %14 = sdiv i32 %3, i32 2;
    i32 %15 = add i32 %1, i32 %14;
    i32* %16 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %15];
    i32 %17 = add i32 %3, i32 %begin_pos;
    i32* %18 = getelementptr &(i32* %arr)[i32 %17];
    i32 %19 = load i32* %18;
    store i32* %16 with i32 %19;
    ubr ^b4;
  ^b3:
    i32 %20 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    i32 %21 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %20);
    i32 %22 = add i32 %1, i32 %begin_pos;
    i32 %23 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %22, i32 %1, i32 %20);
    ubr ^while.header1;
  ^super.header:
    i32 %24 = phi [^b2, i32 0] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 16;
    i1 %26 = scmp lt i32 %25, i32 %n;
    cbr i1 %26(prob = 0.67), ^while.body1, ^super.header1;
  ^b4:
    i32 %27 = add i32 %3, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %28 = add i32 %24, i32 %begin_pos;
    i32* %29 = getelementptr &(i32* %arr)[i32 %28];
    i32* %30 = getelementptr &(i32* %7)[i32 %24];
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %24, i32 1;
    i32 %33 = add i32 %32, i32 %begin_pos;
    i32* %34 = getelementptr &(i32* %arr)[i32 %33];
    i32* %35 = getelementptr &(i32* %30)[i64 1];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    i32 %37 = add i32 %24, i32 2;
    i32 %38 = add i32 %37, i32 %begin_pos;
    i32* %39 = getelementptr &(i32* %arr)[i32 %38];
    i32* %40 = getelementptr &(i32* %30)[i64 2];
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    i32 %42 = add i32 %24, i32 3;
    i32 %43 = add i32 %42, i32 %begin_pos;
    i32* %44 = getelementptr &(i32* %arr)[i32 %43];
    i32* %45 = getelementptr &(i32* %30)[i64 3];
    i32 %46 = load i32* %45;
    store i32* %44 with i32 %46;
    i32 %47 = add i32 %24, i32 4;
    i32 %48 = add i32 %47, i32 %begin_pos;
    i32* %49 = getelementptr &(i32* %arr)[i32 %48];
    i32* %50 = getelementptr &(i32* %30)[i64 4];
    i32 %51 = load i32* %50;
    store i32* %49 with i32 %51;
    i32 %52 = add i32 %24, i32 5;
    i32 %53 = add i32 %52, i32 %begin_pos;
    i32* %54 = getelementptr &(i32* %arr)[i32 %53];
    i32* %55 = getelementptr &(i32* %30)[i64 5];
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32 %57 = add i32 %24, i32 6;
    i32 %58 = add i32 %57, i32 %begin_pos;
    i32* %59 = getelementptr &(i32* %arr)[i32 %58];
    i32* %60 = getelementptr &(i32* %30)[i64 6];
    i32 %61 = load i32* %60;
    store i32* %59 with i32 %61;
    i32 %62 = add i32 %24, i32 7;
    i32 %63 = add i32 %62, i32 %begin_pos;
    i32* %64 = getelementptr &(i32* %arr)[i32 %63];
    i32* %65 = getelementptr &(i32* %30)[i64 7];
    i32 %66 = load i32* %65;
    store i32* %64 with i32 %66;
    i32 %67 = add i32 %24, i32 8;
    i32 %68 = add i32 %67, i32 %begin_pos;
    i32* %69 = getelementptr &(i32* %arr)[i32 %68];
    i32* %70 = getelementptr &(i32* %30)[i64 8];
    i32 %71 = load i32* %70;
    store i32* %69 with i32 %71;
    i32 %72 = add i32 %24, i32 9;
    i32 %73 = add i32 %72, i32 %begin_pos;
    i32* %74 = getelementptr &(i32* %arr)[i32 %73];
    i32* %75 = getelementptr &(i32* %30)[i64 9];
    i32 %76 = load i32* %75;
    store i32* %74 with i32 %76;
    i32 %77 = add i32 %24, i32 10;
    i32 %78 = add i32 %77, i32 %begin_pos;
    i32* %79 = getelementptr &(i32* %arr)[i32 %78];
    i32* %80 = getelementptr &(i32* %30)[i64 10];
    i32 %81 = load i32* %80;
    store i32* %79 with i32 %81;
    i32 %82 = add i32 %24, i32 11;
    i32 %83 = add i32 %82, i32 %begin_pos;
    i32* %84 = getelementptr &(i32* %arr)[i32 %83];
    i32* %85 = getelementptr &(i32* %30)[i64 11];
    i32 %86 = load i32* %85;
    store i32* %84 with i32 %86;
    i32 %87 = add i32 %24, i32 12;
    i32 %88 = add i32 %87, i32 %begin_pos;
    i32* %89 = getelementptr &(i32* %arr)[i32 %88];
    i32* %90 = getelementptr &(i32* %30)[i64 12];
    i32 %91 = load i32* %90;
    store i32* %89 with i32 %91;
    i32 %92 = add i32 %24, i32 13;
    i32 %93 = add i32 %92, i32 %begin_pos;
    i32* %94 = getelementptr &(i32* %arr)[i32 %93];
    i32* %95 = getelementptr &(i32* %30)[i64 13];
    i32 %96 = load i32* %95;
    store i32* %94 with i32 %96;
    i32 %97 = add i32 %24, i32 14;
    i32 %98 = add i32 %97, i32 %begin_pos;
    i32* %99 = getelementptr &(i32* %arr)[i32 %98];
    i32* %100 = getelementptr &(i32* %30)[i64 14];
    i32 %101 = load i32* %100;
    store i32* %99 with i32 %101;
    i32 %102 = add i32 %24, i32 15;
    i32 %103 = add i32 %102, i32 %begin_pos;
    i32* %104 = getelementptr &(i32* %arr)[i32 %103];
    i32* %105 = getelementptr &(i32* %30)[i64 15];
    i32 %106 = load i32* %105;
    store i32* %104 with i32 %106;
    ubr ^super.header;
  ^super.header1:
    i32 %107 = phi [^super.header, i32 %24] [^while.body2, i32 %108];
    i32 %108 = add i32 %107, i32 16;
    i1 %109 = scmp lt i32 %108, i32 %n;
    cbr i1 %109(prob = 0.67), ^while.body2, ^super.header2;
  ^while.header1:
    i32 %110 = phi [^b3, i32 1] [^while.body3, i32 %205];
    i32 %111 = phi [^b3, i32 0] [^while.body3, i32 %206];
    i1 %112 = scmp lt i32 %111, i32 %1;
    cbr i1 %112(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32 %113 = add i32 %107, i32 %begin_pos;
    i32* %114 = getelementptr &(i32* %arr)[i32 %113];
    i32* %115 = getelementptr &(i32* %7)[i32 %107];
    i32 %116 = load i32* %115;
    store i32* %114 with i32 %116;
    i32 %117 = add i32 %107, i32 1;
    i32 %118 = add i32 %117, i32 %begin_pos;
    i32* %119 = getelementptr &(i32* %arr)[i32 %118];
    i32* %120 = getelementptr &(i32* %115)[i64 1];
    i32 %121 = load i32* %120;
    store i32* %119 with i32 %121;
    i32 %122 = add i32 %107, i32 2;
    i32 %123 = add i32 %122, i32 %begin_pos;
    i32* %124 = getelementptr &(i32* %arr)[i32 %123];
    i32* %125 = getelementptr &(i32* %115)[i64 2];
    i32 %126 = load i32* %125;
    store i32* %124 with i32 %126;
    i32 %127 = add i32 %107, i32 3;
    i32 %128 = add i32 %127, i32 %begin_pos;
    i32* %129 = getelementptr &(i32* %arr)[i32 %128];
    i32* %130 = getelementptr &(i32* %115)[i64 3];
    i32 %131 = load i32* %130;
    store i32* %129 with i32 %131;
    i32 %132 = add i32 %107, i32 4;
    i32 %133 = add i32 %132, i32 %begin_pos;
    i32* %134 = getelementptr &(i32* %arr)[i32 %133];
    i32* %135 = getelementptr &(i32* %115)[i64 4];
    i32 %136 = load i32* %135;
    store i32* %134 with i32 %136;
    i32 %137 = add i32 %107, i32 5;
    i32 %138 = add i32 %137, i32 %begin_pos;
    i32* %139 = getelementptr &(i32* %arr)[i32 %138];
    i32* %140 = getelementptr &(i32* %115)[i64 5];
    i32 %141 = load i32* %140;
    store i32* %139 with i32 %141;
    i32 %142 = add i32 %107, i32 6;
    i32 %143 = add i32 %142, i32 %begin_pos;
    i32* %144 = getelementptr &(i32* %arr)[i32 %143];
    i32* %145 = getelementptr &(i32* %115)[i64 6];
    i32 %146 = load i32* %145;
    store i32* %144 with i32 %146;
    i32 %147 = add i32 %107, i32 7;
    i32 %148 = add i32 %147, i32 %begin_pos;
    i32* %149 = getelementptr &(i32* %arr)[i32 %148];
    i32* %150 = getelementptr &(i32* %115)[i64 7];
    i32 %151 = load i32* %150;
    store i32* %149 with i32 %151;
    i32 %152 = add i32 %107, i32 8;
    i32 %153 = add i32 %152, i32 %begin_pos;
    i32* %154 = getelementptr &(i32* %arr)[i32 %153];
    i32* %155 = getelementptr &(i32* %115)[i64 8];
    i32 %156 = load i32* %155;
    store i32* %154 with i32 %156;
    i32 %157 = add i32 %107, i32 9;
    i32 %158 = add i32 %157, i32 %begin_pos;
    i32* %159 = getelementptr &(i32* %arr)[i32 %158];
    i32* %160 = getelementptr &(i32* %115)[i64 9];
    i32 %161 = load i32* %160;
    store i32* %159 with i32 %161;
    i32 %162 = add i32 %107, i32 10;
    i32 %163 = add i32 %162, i32 %begin_pos;
    i32* %164 = getelementptr &(i32* %arr)[i32 %163];
    i32* %165 = getelementptr &(i32* %115)[i64 10];
    i32 %166 = load i32* %165;
    store i32* %164 with i32 %166;
    i32 %167 = add i32 %107, i32 11;
    i32 %168 = add i32 %167, i32 %begin_pos;
    i32* %169 = getelementptr &(i32* %arr)[i32 %168];
    i32* %170 = getelementptr &(i32* %115)[i64 11];
    i32 %171 = load i32* %170;
    store i32* %169 with i32 %171;
    i32 %172 = add i32 %107, i32 12;
    i32 %173 = add i32 %172, i32 %begin_pos;
    i32* %174 = getelementptr &(i32* %arr)[i32 %173];
    i32* %175 = getelementptr &(i32* %115)[i64 12];
    i32 %176 = load i32* %175;
    store i32* %174 with i32 %176;
    i32 %177 = add i32 %107, i32 13;
    i32 %178 = add i32 %177, i32 %begin_pos;
    i32* %179 = getelementptr &(i32* %arr)[i32 %178];
    i32* %180 = getelementptr &(i32* %115)[i64 13];
    i32 %181 = load i32* %180;
    store i32* %179 with i32 %181;
    i32 %182 = add i32 %107, i32 14;
    i32 %183 = add i32 %182, i32 %begin_pos;
    i32* %184 = getelementptr &(i32* %arr)[i32 %183];
    i32* %185 = getelementptr &(i32* %115)[i64 14];
    i32 %186 = load i32* %185;
    store i32* %184 with i32 %186;
    i32 %187 = add i32 %107, i32 15;
    i32 %188 = add i32 %187, i32 %begin_pos;
    i32* %189 = getelementptr &(i32* %arr)[i32 %188];
    i32* %190 = getelementptr &(i32* %115)[i64 15];
    i32 %191 = load i32* %190;
    store i32* %189 with i32 %191;
    ubr ^super.header1;
  ^while.body3:
    i32 %192 = add i32 %111, i32 %begin_pos;
    i32* %193 = getelementptr &(i32* %arr)[i32 %192];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %111, i32 %1;
    i32 %196 = add i32 %195, i32 %begin_pos;
    i32* %197 = getelementptr &(i32* %arr)[i32 %196];
    i32 %198 = load i32* %197;
    i32 %199 = call (i32, i32) -> i32 @multiply(i32 %110, i32 %198);
    i32 %200 = add i32 %194, i32 %199;
    i32 %201 = srem i32 %200, i32 998244353;
    store i32* %193 with i32 %201;
    i32 %202 = sub i32 %194, i32 %199;
    i32 %203 = add i32 %202, i32 998244353;
    i32 %204 = srem i32 %203, i32 998244353;
    store i32* %197 with i32 %204;
    i32 %205 = call (i32, i32) -> i32 @multiply(i32 %110, i32 %w);
    i32 %206 = add i32 %111, i32 1;
    ubr ^while.header1;
  ^super.header2:
    i32 %207 = phi [^super.header1, i32 %107] [^while.body4, i32 %208];
    i32 %208 = add i32 %207, i32 16;
    i1 %209 = scmp lt i32 %208, i32 %n;
    cbr i1 %209(prob = 0.67), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %210 = add i32 %207, i32 %begin_pos;
    i32* %211 = getelementptr &(i32* %arr)[i32 %210];
    i32* %212 = getelementptr &(i32* %7)[i32 %207];
    i32 %213 = load i32* %212;
    store i32* %211 with i32 %213;
    i32 %214 = add i32 %207, i32 1;
    i32 %215 = add i32 %214, i32 %begin_pos;
    i32* %216 = getelementptr &(i32* %arr)[i32 %215];
    i32* %217 = getelementptr &(i32* %212)[i64 1];
    i32 %218 = load i32* %217;
    store i32* %216 with i32 %218;
    i32 %219 = add i32 %207, i32 2;
    i32 %220 = add i32 %219, i32 %begin_pos;
    i32* %221 = getelementptr &(i32* %arr)[i32 %220];
    i32* %222 = getelementptr &(i32* %212)[i64 2];
    i32 %223 = load i32* %222;
    store i32* %221 with i32 %223;
    i32 %224 = add i32 %207, i32 3;
    i32 %225 = add i32 %224, i32 %begin_pos;
    i32* %226 = getelementptr &(i32* %arr)[i32 %225];
    i32* %227 = getelementptr &(i32* %212)[i64 3];
    i32 %228 = load i32* %227;
    store i32* %226 with i32 %228;
    i32 %229 = add i32 %207, i32 4;
    i32 %230 = add i32 %229, i32 %begin_pos;
    i32* %231 = getelementptr &(i32* %arr)[i32 %230];
    i32* %232 = getelementptr &(i32* %212)[i64 4];
    i32 %233 = load i32* %232;
    store i32* %231 with i32 %233;
    i32 %234 = add i32 %207, i32 5;
    i32 %235 = add i32 %234, i32 %begin_pos;
    i32* %236 = getelementptr &(i32* %arr)[i32 %235];
    i32* %237 = getelementptr &(i32* %212)[i64 5];
    i32 %238 = load i32* %237;
    store i32* %236 with i32 %238;
    i32 %239 = add i32 %207, i32 6;
    i32 %240 = add i32 %239, i32 %begin_pos;
    i32* %241 = getelementptr &(i32* %arr)[i32 %240];
    i32* %242 = getelementptr &(i32* %212)[i64 6];
    i32 %243 = load i32* %242;
    store i32* %241 with i32 %243;
    i32 %244 = add i32 %207, i32 7;
    i32 %245 = add i32 %244, i32 %begin_pos;
    i32* %246 = getelementptr &(i32* %arr)[i32 %245];
    i32* %247 = getelementptr &(i32* %212)[i64 7];
    i32 %248 = load i32* %247;
    store i32* %246 with i32 %248;
    i32 %249 = add i32 %207, i32 8;
    i32 %250 = add i32 %249, i32 %begin_pos;
    i32* %251 = getelementptr &(i32* %arr)[i32 %250];
    i32* %252 = getelementptr &(i32* %212)[i64 8];
    i32 %253 = load i32* %252;
    store i32* %251 with i32 %253;
    i32 %254 = add i32 %207, i32 9;
    i32 %255 = add i32 %254, i32 %begin_pos;
    i32* %256 = getelementptr &(i32* %arr)[i32 %255];
    i32* %257 = getelementptr &(i32* %212)[i64 9];
    i32 %258 = load i32* %257;
    store i32* %256 with i32 %258;
    i32 %259 = add i32 %207, i32 10;
    i32 %260 = add i32 %259, i32 %begin_pos;
    i32* %261 = getelementptr &(i32* %arr)[i32 %260];
    i32* %262 = getelementptr &(i32* %212)[i64 10];
    i32 %263 = load i32* %262;
    store i32* %261 with i32 %263;
    i32 %264 = add i32 %207, i32 11;
    i32 %265 = add i32 %264, i32 %begin_pos;
    i32* %266 = getelementptr &(i32* %arr)[i32 %265];
    i32* %267 = getelementptr &(i32* %212)[i64 11];
    i32 %268 = load i32* %267;
    store i32* %266 with i32 %268;
    i32 %269 = add i32 %207, i32 12;
    i32 %270 = add i32 %269, i32 %begin_pos;
    i32* %271 = getelementptr &(i32* %arr)[i32 %270];
    i32* %272 = getelementptr &(i32* %212)[i64 12];
    i32 %273 = load i32* %272;
    store i32* %271 with i32 %273;
    i32 %274 = add i32 %207, i32 13;
    i32 %275 = add i32 %274, i32 %begin_pos;
    i32* %276 = getelementptr &(i32* %arr)[i32 %275];
    i32* %277 = getelementptr &(i32* %212)[i64 13];
    i32 %278 = load i32* %277;
    store i32* %276 with i32 %278;
    i32 %279 = add i32 %207, i32 14;
    i32 %280 = add i32 %279, i32 %begin_pos;
    i32* %281 = getelementptr &(i32* %arr)[i32 %280];
    i32* %282 = getelementptr &(i32* %212)[i64 14];
    i32 %283 = load i32* %282;
    store i32* %281 with i32 %283;
    i32 %284 = add i32 %207, i32 15;
    i32 %285 = add i32 %284, i32 %begin_pos;
    i32* %286 = getelementptr &(i32* %arr)[i32 %285];
    i32* %287 = getelementptr &(i32* %212)[i64 15];
    i32 %288 = load i32* %287;
    store i32* %286 with i32 %288;
    ubr ^super.header2;
  ^while.body5:
    i32 %289 = phi [^super.header2, i32 %207] [^while.body5, i32 %294];
    i32 %290 = add i32 %begin_pos, i32 %289;
    i32* %291 = getelementptr &(i32* %arr)[i32 %290];
    i32* %292 = getelementptr &(i32* %7)[i32 %289];
    i32 %293 = load i32* %292;
    store i32* %291 with i32 %293;
    i32 %294 = add i32 %289, i32 1;
    i1 %295 = scmp lt i32 %294, i32 %n;
    cbr i1 %295(prob = 0.97), ^while.body5, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = scmp gt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = scmp lt i32 %10, i32 %7;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    i32 %15 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %14);
    i32 %16 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %17 = scmp gt i32 %12, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^while.body1, i32 %24];
    i32* %19 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i32 %23 = call (i32, i32) -> i32 @multiply(i32 %20, i32 %22);
    store i32* %19 with i32 %23;
    i32 %24 = add i32 %18, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %12;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %26 = sub i32 998244352, i32 %13;
    i32 %27 = call (i32, i32) -> i32 @power(i32 3, i32 %26);
    i32 %28 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %27);
    cbr i1 %17(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32 %29 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %30 = phi [^indirect, i32 0] [^while.body2, i32 %34];
    i32* %31 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = call (i32, i32) -> i32 @multiply(i32 %32, i32 %29);
    store i32* %31 with i32 %33;
    i32 %34 = add i32 %30, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %12;
    cbr i1 %35(prob = 0.97), ^while.body2, ^b2;
}
