internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = icmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b4, i32 %8] [^if.then1, i32 %13];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i1 %5 = icmp eq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %6 = phi [^b3, i32 0] [^if.then2, i32 %14] [^b6, i32 %18] [^if.then3, i32 %22];
    i32 %7 = mul i32 %6, i32 2;
    i32 %8 = srem i32 %7, i32 998244353;
    i32 %9 = and i32 %b, i32 -2147483647;
    i1 %10 = icmp eq i32 %9, i32 1;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b2;
  ^b5:
    i1 %11 = icmp eq i32 %4, i32 1;
    cbr i1 %11(prob = 0.5), ^if.then2, ^b6;
  ^if.then1:
    i32 %12 = add i32 %a, i32 %8;
    i32 %13 = srem i32 %12, i32 998244353;
    ubr ^b2;
  ^if.then2:
    i32 %14 = srem i32 %a, i32 998244353;
    ubr ^b4;
  ^b6:
    i32 %15 = sdiv i32 %b, i32 4;
    i32 %16 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %15);
    i32 %17 = mul i32 %16, i32 2;
    i32 %18 = srem i32 %17, i32 998244353;
    i32 %19 = and i32 %4, i32 -2147483647;
    i1 %20 = icmp eq i32 %19, i32 1;
    cbr i1 %20(prob = 0.5), ^if.then3, ^b4;
  ^if.then3:
    i32 %21 = add i32 %a, i32 %18;
    i32 %22 = srem i32 %21, i32 998244353;
    ubr ^b4;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = and i32 %b, i32 -2147483647;
    i1 %5 = icmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> void {
  ^entry:
    i1 %0 = icmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    ubr ^while.header;
  ^b1:
    ret;
  ^while.header:
    i32 %3 = phi [^b, i32 0] [^if.then, i32 %14] [^if.else, i32 %21];
    i1 %4 = icmp sgt i32 %n, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b2;
  ^while.body:
    i32 %5 = and i32 %3, i32 1;
    i1 %6 = icmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %7 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %8 = icmp sgt i32 %n, i32 0;
    cbr i1 %8(prob = 0.97), ^super.header, ^b3;
  ^if.then:
    i32 %9 = add i32 %begin_pos, i32 %3;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %3, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %12];
    store i32* %13 with i32 %11;
    i32 %14 = add i32 %3, i32 1;
    ubr ^while.header;
  ^if.else:
    i32 %15 = sdiv i32 %3, i32 2;
    i32 %16 = add i32 %1, i32 %15;
    i32* %17 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %16];
    i32 %18 = add i32 %begin_pos, i32 %3;
    i32* %19 = getelementptr &(i32* %arr)[i32 %18];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    i32 %21 = add i32 %3, i32 1;
    ubr ^while.header;
  ^b3:
    i32 %22 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %22);
    i32 %23 = add i32 %begin_pos, i32 %1;
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %23, i32 %1, i32 %22);
    ubr ^while.header1;
  ^super.header:
    i32 %24 = phi [^b2, i32 0] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = icmp sgt i32 %n, i32 %25;
    cbr i1 %26(prob = 0.89), ^while.body1, ^super.header1;
  ^while.body1:
    i32 %27 = add i32 %begin_pos, i32 %24;
    i32* %28 = getelementptr &(i32* %arr)[i32 %27];
    i32* %29 = getelementptr &(i32* %7)[i32 %24];
    i32 %30 = load i32* %29;
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %24, i32 1;
    i32 %32 = add i32 %begin_pos, i32 %31;
    i32* %33 = getelementptr &(i32* %arr)[i32 %32];
    i32* %34 = getelementptr &(i32* %29)[i64 1];
    i32 %35 = load i32* %34;
    store i32* %33 with i32 %35;
    i32 %36 = add i32 %24, i32 2;
    i32 %37 = add i32 %begin_pos, i32 %36;
    i32* %38 = getelementptr &(i32* %arr)[i32 %37];
    i32* %39 = getelementptr &(i32* %29)[i64 2];
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32 %41 = add i32 %24, i32 3;
    i32 %42 = add i32 %begin_pos, i32 %41;
    i32* %43 = getelementptr &(i32* %arr)[i32 %42];
    i32* %44 = getelementptr &(i32* %29)[i64 3];
    i32 %45 = load i32* %44;
    store i32* %43 with i32 %45;
    ubr ^super.header;
  ^super.header1:
    i32 %46 = phi [^super.header, i32 %24] [^while.body2, i32 %47];
    i32 %47 = add i32 %46, i32 4;
    i1 %48 = icmp sgt i32 %n, i32 %47;
    cbr i1 %48(prob = 0.89), ^while.body2, ^super.header2;
  ^while.header1:
    i32 %49 = phi [^b3, i32 1] [^while.body3, i32 %84];
    i32 %50 = phi [^b3, i32 0] [^while.body3, i32 %85];
    i1 %51 = icmp sgt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32 %52 = add i32 %begin_pos, i32 %46;
    i32* %53 = getelementptr &(i32* %arr)[i32 %52];
    i32* %54 = getelementptr &(i32* %7)[i32 %46];
    i32 %55 = load i32* %54;
    store i32* %53 with i32 %55;
    i32 %56 = add i32 %46, i32 1;
    i32 %57 = add i32 %begin_pos, i32 %56;
    i32* %58 = getelementptr &(i32* %arr)[i32 %57];
    i32* %59 = getelementptr &(i32* %54)[i64 1];
    i32 %60 = load i32* %59;
    store i32* %58 with i32 %60;
    i32 %61 = add i32 %46, i32 2;
    i32 %62 = add i32 %begin_pos, i32 %61;
    i32* %63 = getelementptr &(i32* %arr)[i32 %62];
    i32* %64 = getelementptr &(i32* %54)[i64 2];
    i32 %65 = load i32* %64;
    store i32* %63 with i32 %65;
    i32 %66 = add i32 %46, i32 3;
    i32 %67 = add i32 %begin_pos, i32 %66;
    i32* %68 = getelementptr &(i32* %arr)[i32 %67];
    i32* %69 = getelementptr &(i32* %54)[i64 3];
    i32 %70 = load i32* %69;
    store i32* %68 with i32 %70;
    ubr ^super.header1;
  ^while.body3:
    i32 %71 = add i32 %1, i32 %50;
    i32 %72 = add i32 %begin_pos, i32 %71;
    i32* %73 = getelementptr &(i32* %arr)[i32 %72];
    i32 %74 = add i32 %begin_pos, i32 %50;
    i32* %75 = getelementptr &(i32* %arr)[i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = load i32* %73;
    i32 %78 = call (i32, i32) -> i32 @multiply(i32 %49, i32 %77);
    i32 %79 = add i32 %76, i32 %78;
    i32 %80 = srem i32 %79, i32 998244353;
    store i32* %75 with i32 %80;
    i32 %81 = sub i32 %76, i32 %78;
    i32 %82 = add i32 %81, i32 998244353;
    i32 %83 = srem i32 %82, i32 998244353;
    store i32* %73 with i32 %83;
    i32 %84 = call (i32, i32) -> i32 @multiply(i32 %49, i32 %w);
    i32 %85 = add i32 %50, i32 1;
    ubr ^while.header1;
  ^super.header2:
    i32 %86 = phi [^super.header1, i32 %46] [^while.body4, i32 %87];
    i32 %87 = add i32 %86, i32 4;
    i1 %88 = icmp sgt i32 %n, i32 %87;
    cbr i1 %88(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %89 = add i32 %begin_pos, i32 %86;
    i32* %90 = getelementptr &(i32* %arr)[i32 %89];
    i32* %91 = getelementptr &(i32* %7)[i32 %86];
    i32 %92 = load i32* %91;
    store i32* %90 with i32 %92;
    i32 %93 = add i32 %86, i32 1;
    i32 %94 = add i32 %begin_pos, i32 %93;
    i32* %95 = getelementptr &(i32* %arr)[i32 %94];
    i32* %96 = getelementptr &(i32* %91)[i64 1];
    i32 %97 = load i32* %96;
    store i32* %95 with i32 %97;
    i32 %98 = add i32 %86, i32 2;
    i32 %99 = add i32 %begin_pos, i32 %98;
    i32* %100 = getelementptr &(i32* %arr)[i32 %99];
    i32* %101 = getelementptr &(i32* %91)[i64 2];
    i32 %102 = load i32* %101;
    store i32* %100 with i32 %102;
    i32 %103 = add i32 %86, i32 3;
    i32 %104 = add i32 %begin_pos, i32 %103;
    i32* %105 = getelementptr &(i32* %arr)[i32 %104];
    i32* %106 = getelementptr &(i32* %91)[i64 3];
    i32 %107 = load i32* %106;
    store i32* %105 with i32 %107;
    ubr ^super.header2;
  ^while.body5:
    i32 %108 = phi [^super.header2, i32 %86] [^while.body5, i32 %113];
    i32 %109 = add i32 %begin_pos, i32 %108;
    i32* %110 = getelementptr &(i32* %arr)[i32 %109];
    i32* %111 = getelementptr &(i32* %7)[i32 %108];
    i32 %112 = load i32* %111;
    store i32* %110 with i32 %112;
    i32 %113 = add i32 %108, i32 1;
    i1 %114 = icmp sgt i32 %n, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body5, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = icmp sgt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = icmp sgt i32 %7, i32 %10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %14);
    call (i32*, i32, i32, i32) -> void @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %15 = icmp sgt i32 %12, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = icmp sgt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %24 = sub i32 998244352, i32 %13;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %25);
    cbr i1 %15(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32 %26 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %27 = phi [^indirect, i32 0] [^while.body2, i32 %31];
    i32* %28 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %26);
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %27, i32 1;
    i1 %32 = icmp sgt i32 %12, i32 %31;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b2;
}
