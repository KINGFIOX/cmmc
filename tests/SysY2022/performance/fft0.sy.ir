internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = shl i32 %5, i32 1;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = srem i32 %b, i32 2;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = srem i32 %b, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    i32 %1 = sdiv i32 %n, i32 2;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 0] [^b3, i32 %30];
    i1 %3 = scmp lt i32 %2, i32 %n;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^b:
    ret i32 undef;
^while.body:
    i32 %4 = srem i32 %2, i32 2;
    i1 %5 = scmp eq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
^b1:
    i32* %6 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i1 %7 = scmp gt i32 %n, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b2;
^if.then:
    i32 %8 = sdiv i32 %2, i32 2;
    i32* %9 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %8];
    i32 %10 = add i32 %2, i32 %begin_pos;
    i32* %11 = getelementptr &(i32* %arr)[i32 %10];
    i32 %12 = load i32* %11;
    store i32* %9 with i32 %12;
    ubr ^b3;
^if.else:
    i32 %13 = sdiv i32 %2, i32 2;
    i32 %14 = add i32 %1, i32 %13;
    i32* %15 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %14];
    i32 %16 = add i32 %2, i32 %begin_pos;
    i32* %17 = getelementptr &(i32* %arr)[i32 %16];
    i32 %18 = load i32* %17;
    store i32* %15 with i32 %18;
    ubr ^b3;
^b2:
    i32 %19 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    i32 %20 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %19);
    i32 %21 = add i32 %1, i32 %begin_pos;
    i32 %22 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %21, i32 %1, i32 %19);
    ubr ^while.header1;
^while.body1:
    i32 %23 = phi [^b1, i32 0] [^while.body1, i32 %28];
    i32 %24 = add i32 %23, i32 %begin_pos;
    i32* %25 = getelementptr &(i32* %arr)[i32 %24];
    i32* %26 = getelementptr &(i32* %6)[i32 %23];
    i32 %27 = load i32* %26;
    store i32* %25 with i32 %27;
    i32 %28 = add i32 %23, i32 1;
    i1 %29 = scmp lt i32 %28, i32 %n;
    cbr i1 %29(prob = 0.97), ^while.body1, ^b2;
^b3:
    i32 %30 = add i32 %2, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %31 = phi [^b2, i32 1] [^while.body2, i32 %47];
    i32 %32 = phi [^b2, i32 0] [^while.body2, i32 %48];
    i1 %33 = scmp lt i32 %32, i32 %1;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b;
^while.body2:
    i32 %34 = add i32 %32, i32 %begin_pos;
    i32* %35 = getelementptr &(i32* %arr)[i32 %34];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %32, i32 %1;
    i32 %38 = add i32 %37, i32 %begin_pos;
    i32* %39 = getelementptr &(i32* %arr)[i32 %38];
    i32 %40 = load i32* %39;
    i32 %41 = call (i32, i32) -> i32 @multiply(i32 %31, i32 %40);
    i32 %42 = add i32 %36, i32 %41;
    i32 %43 = srem i32 %42, i32 998244353;
    store i32* %35 with i32 %43;
    i32 %44 = sub i32 %36, i32 %41;
    i32 %45 = add i32 %44, i32 998244353;
    i32 %46 = srem i32 %45, i32 998244353;
    store i32* %39 with i32 %46;
    i32 %47 = call (i32, i32) -> i32 @multiply(i32 %31, i32 %w);
    i32 %48 = add i32 %32, i32 1;
    ubr ^while.header1;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 60);
    i32 %4 = add i32 %1, i32 -1;
    i32 %5 = add i32 %4, i32 %3;
    i1 %6 = scmp gt i32 %5, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = phi [^entry, i32 1] [^while.body, i32 %8];
    i32 %8 = shl i32 %7, i32 1;
    i1 %9 = scmp lt i32 %8, i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^b:
    i32 %10 = phi [^entry, i32 1] [^while.body, i32 %8];
    i32 %11 = sdiv i32 998244352, i32 %10;
    i32 %12 = call (i32, i32) -> i32 @power(i32 3, i32 %11);
    i32 %13 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %0, i32 0, i32 %10, i32 %12);
    i32 %14 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %2, i32 0, i32 %10, i32 %12);
    i1 %15 = scmp gt i32 %10, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %10;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %24 = sub i32 998244352, i32 %11;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    i32 %26 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %0, i32 0, i32 %10, i32 %25);
    cbr i1 %15(prob = 0.97), ^indirect, ^b2;
^indirect:
    i32 %27 = call (i32, i32) -> i32 @power(i32 %10, i32 998244351);
    ubr ^while.body2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    ret i32 0;
^while.body2:
    i32 %28 = phi [^indirect, i32 0] [^while.body2, i32 %32];
    i32* %29 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %28];
    i32 %30 = load i32* %29;
    i32 %31 = call (i32, i32) -> i32 @multiply(i32 %30, i32 %27);
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %28, i32 1;
    i1 %33 = scmp lt i32 %32, i32 %10;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b2;
}
