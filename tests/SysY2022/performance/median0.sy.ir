internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32*, i32, i32, i32, i32*) -> i32 {
^entry(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32* %begin = alloc i32;
    store i32* %begin with i32 %arg1;
    i32* %end = alloc i32;
    store i32* %end with i32 %arg2;
    i32* %pos = alloc i32;
    store i32* %pos with i32 %arg3;
    i32* %pivot = alloc i32;
    i32* %0 = getelementptr &(i32* %arg)[i32 %arg1];
    i32 %1 = load i32* %0;
    store i32* %pivot with i32 %1;
    i32* %l = alloc i32;
    store i32* %l with i32 %arg1;
    i32* %r = alloc i32;
    i32 %2 = add i32 %arg2, i32 1;
    store i32* %r with i32 %2;
    i32* %xx = alloc i32;
    store i32* %xx with i32 0;
    i1 %3 = scmp lt i32 %arg1, i32 %2;
    cbr i1 %3, [ ^while.body i32* %end, i32* %begin, i32* %pos, i32* %xx, i32* %pivot, i32* %l, i32* %r, i32* %arg4, i32* %arg, i32 %arg1, i32 %1, i32 %arg1, i32 %2, i32 0 ], [ ^while.header i32* %end, i32* %begin, i32* %pivot, i32* %pos, i32* %xx, i32* %r, i32* %l, i32* %arg4, i32* %arg, i32 %arg1, i32 %1, i32 %arg1, i32 %2, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = sub i32 %arg12, i32 1;
    store i32* %arg6 with i32 %0;
    i32* %1 = getelementptr &(i32* %arg8)[i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp lt i32 %2, i32 %arg10;
    cbr i1 %3, [ ^while.header i32* %arg, i32* %arg1, i32* %arg4, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg13 ], [ ^b i32* %arg, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg2, i32* %arg3, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg13 ];
^while.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i1 %0 = scmp lt i32 %arg11, i32 %arg12;
    cbr i1 %0, [ ^indirect i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg6, i32 %arg11, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg12, i32 %arg13 ], [ ^b1 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32 %arg12, i32 %arg11, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg13, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %arg11, i32 %arg12;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0 ], [ ^while.header i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg6 with i32 %0;
    i32* %1 = getelementptr &(i32* %arg9)[i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp ge i32 %2, i32 %arg11;
    cbr i1 %3, [ ^indirect1 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg1, i32* %arg4, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg12 ], [ ^b2 i32* %arg, i32* %arg5, i32* %arg1, i32* %arg6, i32* %arg4, i32* %arg2, i32* %arg3, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %0, i32 %arg12, i32 %arg13 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i1 %0 = scmp eq i32 %arg8, i32 %arg7;
    cbr i1 %0, [ ^b3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg6, i32* %arg4, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ], [ ^if.else i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg9, i32* %arg10, i32 %arg13, i32 %arg14 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp eq i32 %arg11, i32 %arg12;
    cbr i1 %0, [ ^b3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg6, i32* %arg4, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10 ], [ ^if.else i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg11, i32 %arg12 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = sub i32 %arg13, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %arg11, i32 %arg12;
    cbr i1 %1, [ ^indirect i32* %arg, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg4, i32* %arg1, i32* %arg3, i32 %arg11, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg12, i32 %0 ], [ ^b1 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32 %arg12, i32 %arg11, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg7];
    store i32* %0 with i32 %arg8;
    i32 %1 = load i32* %arg3;
    i32 %2 = load i32* %arg4;
    i32* %3 = getelementptr &(i32* %arg6)[i32 %2];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %arg6)[i32 %1];
    i32 %6 = load i32* %5;
    store i32* %3 with i32 %6;
    store i32* %5 with i32 %4;
    i32 %7 = load i32* %arg1;
    i32 %8 = load i32* %arg3;
    i32 %9 = load i32* %arg2;
    i32 %10 = load i32* %arg;
    i32 %11 = load i32* %arg4;
    i1 %12 = scmp lt i32 0, i32 %2;
    cbr i1 %12, [ ^b4 i32* %arg5, i32* %arg6, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7, i32 %2, i32 %1, i32 0, i32 0 ], [ ^b6 i32* %arg5, i32* %arg6, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg8)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg8)[i32 %arg10];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i32 %4 = load i32* %arg4;
    i32 %5 = load i32* %arg5;
    i32 %6 = load i32* %arg6;
    i32 %7 = load i32* %arg2;
    i32 %8 = load i32* %arg1;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %ret = alloc i32;
    store i32* %ret with i32 0;
    i1 %9 = scmp lt i32 0, i32 %arg9;
    cbr i1 %9, [ ^b5 i32* %ret, i32* %i, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg7, i32* %arg1, i32* %arg, i32* %arg8, i32 %8, i32 %7, i32 %6, i32 %5, i32 %4, i32 %arg9, i32 %arg10, i32 0, i32 0 ], [ ^indirect2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %8, i32 %7, i32 %6, i32 %5, i32 %4 ];
^b4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg9, i32 %arg8;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i1 %0 = scmp lt i32 %arg18, i32 %arg17;
    cbr i1 %0, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ], [ ^indirect2 i32* %arg9, i32* %arg8, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg7, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^b6(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp gt i32 %arg5, i32 %arg4;
    cbr i1 %0, [ ^indirect4 i32 %arg4, i32 %arg5, i32* %arg, i32* %arg1, i32 %arg2 ], [ ^indirect3 i32 %arg4, i32 %arg5, i32* %arg, i32* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i1 %0 = scmp lt i32 %arg11, i32 %arg12;
    cbr i1 %0, [ ^while.body i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^while.header i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^while.body1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg9, i32 1;
    i32 %1 = add i32 %arg7, i32 1;
    i32 %2 = add i32 %1, i32 %arg9;
    i32 %3 = add i32 %2, i32 %arg10;
    i1 %4 = scmp lt i32 %0, i32 %arg7;
    cbr i1 %4, [ ^b4 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %3 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32 %0 = add i32 %arg18, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = add i32 %arg16, i32 1;
    i32 %2 = add i32 %1, i32 %arg18;
    i32 %3 = add i32 %2, i32 %arg19;
    store i32* %arg with i32 %3;
    i1 %4 = scmp lt i32 %0, i32 %arg16;
    cbr i1 %4, [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %0, i32 %3 ], [ ^indirect2 i32* %arg9, i32* %arg8, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg7, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^indirect3(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp lt i32 %arg1, i32 %arg;
    cbr i1 %0, [ ^if.then i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^b7 i32 %arg7 ];
^indirect4(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arg3, i32 %arg4, i32 %arg1, i32 %arg, i32* %arg2);
    ret i32 %0;
^if.then(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i32 %1 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arg1, i32 %0, i32 %arg2, i32 %arg3, i32* %arg);
    ret i32 %1;
^b7(i32 %arg):
    ret i32 %arg;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = sub i32 %1, i32 1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i32 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
