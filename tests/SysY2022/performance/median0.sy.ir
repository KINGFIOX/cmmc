internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32 %1 = add i32 %end, i32 1;
    i32* %2 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %3 = load i32* %2;
    store i32* %pivot with i32 %3;
    store i32* %l with i32 %begin;
    store i32* %r with i32 %1;
    store i32* %xx with i32 0;
    ubr ^while.guard;
^while.guard:
    i32 %4 = phi [^entry, i32 %begin] [^entry1, i32 %33];
    i32 %5 = phi [^entry, i32 %3] [^entry1, i32 %34];
    i32 %6 = phi [^entry, i32 %begin] [^entry1, i32 %35];
    i32 %7 = phi [^entry, i32 %1] [^entry1, i32 %36];
    i32 %8 = phi [^entry, i32 0] [^entry1, i32 %37];
    i1 %9 = scmp lt i32 %6, i32 %7;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.guard1;
^while.body:
    i32 %10 = phi [^while.guard, i32 %8] [^b, i32 %19];
    i32 %11 = phi [^while.guard, i32 %7] [^b, i32 %12];
    i32 %12 = add i32 %11, i32 -1;
    store i32* %r with i32 %12;
    i32* %13 = getelementptr &(i32* %arr)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp lt i32 %14, i32 %5;
    cbr i1 %15(prob = 0.5), ^while.guard1, ^b;
^while.guard1:
    i32 %16 = phi [^while.guard, i32 %7] [^while.body, i32 %12] [^b, i32 %12];
    i32 %17 = phi [^while.guard, i32 %8] [^while.body, i32 %10] [^b, i32 %19];
    i1 %18 = scmp lt i32 %6, i32 %16;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %19 = add i32 %10, i32 1;
    store i32* %xx with i32 %19;
    i1 %20 = scmp lt i32 %6, i32 %12;
    cbr i1 %20(prob = 0.97), ^while.body, ^while.guard1;
^while.body1:
    i32 %21 = phi [^while.guard1, i32 %17] [^b3, i32 %49];
    i32 %22 = phi [^while.guard1, i32 %6] [^b3, i32 %23];
    i32 %23 = add i32 %22, i32 1;
    store i32* %l with i32 %23;
    i32* %24 = getelementptr &(i32* %arr)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp ge i32 %25, i32 %5;
    cbr i1 %26(prob = 0.5), ^b1, ^b3;
^b1:
    i32 %27 = phi [^while.guard1, i32 %6] [^while.body1, i32 %23] [^b3, i32 %23];
    i1 %28 = scmp eq i32 %27, i32 %16;
    cbr i1 %28(prob = 0.5), ^b2, ^entry1;
^entry1:
    i32* %29 = getelementptr &(i32* %arr)[i32 %16];
    i32* %30 = getelementptr &(i32* %arr)[i32 %27];
    i32 %31 = load i32* %30;
    i32 %32 = load i32* %29;
    store i32* %30 with i32 %32;
    store i32* %29 with i32 %31;
    i32 %33 = load i32* %begin1;
    i32 %34 = load i32* %pivot;
    i32 %35 = load i32* %l;
    i32 %36 = load i32* %r;
    i32 %37 = load i32* %xx;
    ubr ^while.guard;
^b2:
    i32* %38 = getelementptr &(i32* %arr)[i32 %4];
    store i32* %38 with i32 %5;
    i32 %39 = load i32* %begin1;
    i32 %40 = load i32* %l;
    i32* %41 = getelementptr &(i32* %arr)[i32 %39];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %arr)[i32 %40];
    i32 %44 = load i32* %43;
    store i32* %41 with i32 %44;
    store i32* %43 with i32 %42;
    i32 %45 = load i32* %end1;
    i32 %46 = load i32* %pos1;
    i32 %47 = load i32* %xx;
    i1 %48 = scmp gt i32 %40, i32 %46;
    cbr i1 %48(prob = 0.5), ^if.then, ^b4;
^b3:
    i32 %49 = add i32 %21, i32 -1;
    store i32* %xx with i32 %49;
    i1 %50 = scmp lt i32 %23, i32 %16;
    cbr i1 %50(prob = 0.97), ^while.body1, ^b1;
^if.then:
    i32 %51 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %39, i32 %40, i32 %46, i32* %0);
    ubr ^b5;
^b4:
    i1 %52 = scmp lt i32 %40, i32 %46;
    cbr i1 %52(prob = 0.5), ^if.then1, ^b5;
^if.then1:
    i32 %53 = add i32 %40, i32 1;
    i32 %54 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %53, i32 %45, i32 %46, i32* %0);
    ubr ^b5;
^b5:
    i32 %55 = phi [^if.then, i32 %51] [^b4, i32 %47] [^if.then1, i32 %54];
    ret i32 %55;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    call (i32) -> void @starttime(i32 59);
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
