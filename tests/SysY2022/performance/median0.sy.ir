internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos) -> i32 {
^0:
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    ubr ^entry;
^entry:
    i32 %2 = phi [^0, i32 %end] [^b3, i32 %22];
    i32 %3 = load i32* %1;
    i32 %4 = add i32 %2, i32 1;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 %begin] [^b, i32 %5] [^entry1, i32 %22];
    i32 %6 = phi [^entry, i32 0] [^b, i32 %17] [^entry1, i32 %13];
    i32 %7 = phi [^entry, i32 %4] [^b, i32 %9] [^entry1, i32 %14];
    i1 %8 = scmp lt i32 %5, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %9 = add i32 %7, i32 -1;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i1 %12 = scmp lt i32 %11, i32 %3;
    cbr i1 %12(prob = 0.5), ^while.header1, ^b;
^while.header1:
    i32 %13 = phi [^while.header, i32 %6] [^while.body, i32 %6] [^b2, i32 %24];
    i32 %14 = phi [^while.header, i32 %7] [^while.body, i32 %9] [^b2, i32 %14];
    i32 %15 = phi [^while.header, i32 %5] [^while.body, i32 %5] [^b2, i32 %18];
    i1 %16 = scmp lt i32 %15, i32 %14;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %17 = add i32 %6, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %18 = add i32 %15, i32 1;
    i32* %19 = getelementptr &(i32* %arr)[i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = scmp ge i32 %20, i32 %3;
    cbr i1 %21(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %22 = phi [^while.header1, i32 %15] [^while.body1, i32 %18];
    i1 %23 = scmp eq i32 %22, i32 %14;
    cbr i1 %23(prob = 0.5), ^b3, ^entry1;
^b2:
    i32 %24 = add i32 %13, i32 -1;
    ubr ^while.header1;
^entry1:
    i32* %25 = getelementptr &(i32* %arr)[i32 %22];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %arr)[i32 %14];
    i32 %28 = load i32* %27;
    store i32* %25 with i32 %28;
    store i32* %27 with i32 %26;
    ubr ^while.header;
^b3:
    store i32* %1 with i32 %3;
    i32 %29 = load i32* %1;
    i32* %30 = getelementptr &(i32* %arr)[i32 %22];
    i32 %31 = load i32* %30;
    store i32* %1 with i32 %31;
    store i32* %30 with i32 %29;
    i1 %32 = scmp gt i32 %22, i32 %pos;
    cbr i1 %32(prob = 0.5), ^entry, ^b4;
^b4:
    i1 %33 = scmp lt i32 %22, i32 %pos;
    cbr i1 %33(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %34 = add i32 %22, i32 1;
    i32 %35 = call (i32*, i32, i32, i32) -> i32 @median(i32* %arr, i32 %34, i32 %2, i32 %pos);
    ubr ^b5;
^b5:
    i32 %36 = phi [^b4, i32 %13] [^if.then, i32 %35];
    ret i32 %36;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3);
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %1, i32* %0);
    i32* %5 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = srem i32 %6, i32 256;
    ret i32 %7;
}
