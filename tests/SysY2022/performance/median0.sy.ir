internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %2 = load i32* %1;
    store i32* %pivot with i32 %2;
    store i32* %l with i32 %begin;
    i32 %3 = add i32 %end, i32 1;
    store i32* %r with i32 %3;
    store i32* %xx with i32 0;
    ubr ^while.guard;
^while.guard:
    i32 %4 = phi [^b8, i32 %48] [^entry1, i32 %48] [^entry, i32 %begin];
    i32 %5 = phi [^b8, i32 %49] [^entry1, i32 %49] [^entry, i32 %2];
    i32 %6 = phi [^b8, i32 %50] [^entry1, i32 %50] [^entry, i32 %begin];
    i32 %7 = phi [^b8, i32 %51] [^entry1, i32 %51] [^entry, i32 %3];
    i32 %8 = phi [^b8, i32 %52] [^entry1, i32 %52] [^entry, i32 0];
    i1 %9 = scmp lt i32 %6, i32 %7;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.guard1;
^while.body:
    i32 %10 = phi [^while.guard, i32 %8] [^b, i32 %19];
    i32 %11 = phi [^while.guard, i32 %7] [^b, i32 %12];
    i32 %12 = add i32 %11, i32 -1;
    store i32* %r with i32 %12;
    i32* %13 = getelementptr &(i32* %arr)[i32 %12];
    i32 %14 = load i32* %13;
    i1 %15 = scmp lt i32 %14, i32 %5;
    cbr i1 %15(prob = 0.5), ^while.guard1, ^b;
^while.guard1:
    i32 %16 = phi [^while.body, i32 %12] [^while.guard, i32 %7] [^b, i32 %12];
    i32 %17 = phi [^while.body, i32 %10] [^while.guard, i32 %8] [^b, i32 %19];
    i1 %18 = scmp lt i32 %6, i32 %16;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %19 = add i32 %10, i32 1;
    store i32* %xx with i32 %19;
    i1 %20 = scmp lt i32 %6, i32 %12;
    cbr i1 %20(prob = 0.97), ^while.body, ^while.guard1;
^while.body1:
    i32 %21 = phi [^while.guard1, i32 %17] [^b3, i32 %42];
    i32 %22 = phi [^while.guard1, i32 %6] [^b3, i32 %23];
    i32 %23 = add i32 %22, i32 1;
    store i32* %l with i32 %23;
    i32* %24 = getelementptr &(i32* %arr)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp ge i32 %25, i32 %5;
    cbr i1 %26(prob = 0.5), ^b1, ^b3;
^b1:
    i32 %27 = phi [^while.body1, i32 %23] [^while.guard1, i32 %6] [^b3, i32 %23];
    i1 %28 = scmp eq i32 %27, i32 %16;
    cbr i1 %28(prob = 0.5), ^b2, ^entry1;
^b2:
    i32* %29 = getelementptr &(i32* %arr)[i32 %4];
    store i32* %29 with i32 %5;
    i32 %30 = load i32* %begin1;
    i32 %31 = load i32* %l;
    i32* %32 = getelementptr &(i32* %arr)[i32 %30];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &(i32* %arr)[i32 %31];
    i32 %35 = load i32* %34;
    store i32* %32 with i32 %35;
    store i32* %34 with i32 %33;
    i32 %36 = load i32* %end1;
    i32 %37 = load i32* %pos1;
    i32 %38 = load i32* %xx;
    i1 %39 = scmp gt i32 %30, i32 0;
    i1 %40 = scmp gt i32 %31, i32 0;
    i1 %41 = and i1 %39, i1 %40;
    cbr i1 %41(prob = 0.48), ^while.body2, ^b4;
^b3:
    i32 %42 = add i32 %21, i32 -1;
    store i32* %xx with i32 %42;
    i1 %43 = scmp lt i32 %23, i32 %16;
    cbr i1 %43(prob = 0.97), ^while.body1, ^b1;
^entry1:
    i32* %44 = getelementptr &(i32* %arr)[i32 %27];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %arr)[i32 %16];
    i32 %47 = load i32* %46;
    store i32* %44 with i32 %47;
    store i32* %46 with i32 %45;
    i32 %48 = load i32* %begin1;
    i32 %49 = load i32* %pivot;
    i32 %50 = load i32* %l;
    i32 %51 = load i32* %r;
    i32 %52 = load i32* %xx;
    i1 %53 = scmp gt i32 %27, i32 0;
    i1 %54 = scmp gt i32 %16, i32 0;
    i1 %55 = and i1 %53, i1 %54;
    cbr i1 %55(prob = 0.48), ^while.body3, ^while.guard;
^while.body2:
    i32 %56 = phi [^b2, i32 0] [^b7, i32 %57];
    i32 %57 = add i32 %56, i32 1;
    i1 %58 = scmp lt i32 %57, i32 %30;
    cbr i1 %58(prob = 0.5), ^b5, ^b7;
^while.body3:
    i32 %59 = phi [^entry1, i32 0] [^b8, i32 %60];
    i32 %60 = add i32 %59, i32 1;
    i1 %61 = scmp lt i32 %60, i32 %27;
    cbr i1 %61(prob = 0.5), ^b6, ^b8;
^b4:
    i1 %62 = scmp gt i32 %31, i32 %37;
    cbr i1 %62(prob = 0.5), ^if.then, ^b9;
^b5:
    i1 %63 = scmp lt i32 %57, i32 %31;
    ubr ^b7;
^b6:
    i1 %64 = scmp lt i32 %60, i32 %16;
    ubr ^b8;
^if.then:
    i32 %65 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %30, i32 %31, i32 %37, i32* %0);
    ubr ^b10;
^b7:
    i1 %66 = phi [^while.body2, i1 false] [^b5, i1 %63];
    cbr i1 %66(prob = 0.97), ^while.body2, ^b4;
^b8:
    i1 %67 = phi [^while.body3, i1 false] [^b6, i1 %64];
    cbr i1 %67(prob = 0.97), ^while.body3, ^while.guard;
^b9:
    i1 %68 = scmp lt i32 %31, i32 %37;
    cbr i1 %68(prob = 0.5), ^if.then1, ^b10;
^if.then1:
    i32 %69 = add i32 %31, i32 1;
    i32 %70 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %69, i32 %36, i32 %37, i32* %0);
    ubr ^b10;
^b10:
    i32 %71 = phi [^b9, i32 %38] [^if.then1, i32 %70] [^if.then, i32 %65];
    ret i32 %71;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
