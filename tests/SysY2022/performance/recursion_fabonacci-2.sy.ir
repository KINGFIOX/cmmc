internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @fibFP(f32 %n) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i32 %0 = bitcast f32 %n to i32;
    [4084 * i32]* %1 = ptrcast [4084 * i32]* @lut_fibFP to [4084 * i32]*;
    i32* %2 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %1, i32 %0, i32 0);
    i32* %3 = getelementptr &(i32* %2)[i64 3];
    i32 %4 = load i32* %3;
    i1 %5 = icmp neq i32 %4, i32 0;
    i32* %6 = getelementptr &(i32* %2)[i64 2];
    f32* %7 = ptrcast i32* %6 to f32*;
    cbr i1 %5(prob = 0.9), ^b, ^entry1;
  ^b:
    f32 %8 = load f32* %7;
    ubr ^b3;
  ^entry1:
    i1 %9 = fcmp olt f32 %n, f32 2;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b1:
    store i32* %3 with i32 1;
    store f32* %7 with f32 1;
    ubr ^b3;
  ^b2:
    f32 %10 = fsub f32 %n, f32 2;
    f32 %11 = call (f32) -> f32 @fibFP(f32 %10);
    f32 %12 = fsub f32 %n, f32 1;
    f32 %13 = call (f32) -> f32 @fibFP(f32 %12);
    f32 %14 = fadd f32 %11, f32 %13;
    store i32* %3 with i32 1;
    store f32* %7 with f32 %14;
    ubr ^b3;
  ^b3:
    f32 %15 = phi [^b, f32 %8] [^b1, f32 1] [^b2, f32 %14];
    ret f32 %15;
}
internal func @takFP(f32 %x, f32 %y, f32 %z) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    i1 %1 = fcmp olt f32 %y, f32 %x;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    f32 %2 = phi [^0, f32 %x] [^b3, f32 %18];
    f32 %3 = phi [^0, f32 %y] [^b3, f32 %31];
    f32 %4 = phi [^0, f32 %z] [^b3, f32 %44];
    f32 %5 = fsub f32 %2, f32 1;
    i1 %6 = fcmp olt f32 %3, f32 %5;
    cbr i1 %6(prob = 0.5), ^if.then1, ^b1;
  ^b:
    f32 %7 = phi [^0, f32 %z] [^b3, f32 %44];
    ret f32 %7;
  ^if.then1:
    f32 %8 = phi [^if.then, f32 %5] [^if.then1, f32 %12];
    f32 %9 = phi [^if.then, f32 %3] [^if.then1, f32 %14];
    f32 %10 = phi [^if.then, f32 %4] [^if.then1, f32 %17];
    f32 %11 = fsub f32 %8, f32 1;
    f32 %12 = call (f32, f32, f32) -> f32 @takFP(f32 %11, f32 %9, f32 %10);
    f32 %13 = fsub f32 %9, f32 1;
    f32 %14 = call (f32, f32, f32) -> f32 @takFP(f32 %13, f32 %10, f32 %8);
    i1 %15 = fcmp olt f32 %14, f32 %12;
    f32 %16 = fsub f32 %10, f32 1;
    f32 %17 = call (f32, f32, f32) -> f32 @takFP(f32 %16, f32 %8, f32 %9);
    cbr i1 %15(prob = 0.5), ^if.then1, ^b1;
  ^b1:
    f32 %18 = phi [^if.then, f32 %4] [^if.then1, f32 %17];
    f32 %19 = fsub f32 %3, f32 1;
    i1 %20 = fcmp olt f32 %4, f32 %19;
    cbr i1 %20(prob = 0.5), ^if.then2, ^b2;
  ^if.then2:
    f32 %21 = phi [^b1, f32 %19] [^if.then2, f32 %25];
    f32 %22 = phi [^b1, f32 %4] [^if.then2, f32 %27];
    f32 %23 = phi [^b1, f32 %2] [^if.then2, f32 %30];
    f32 %24 = fsub f32 %21, f32 1;
    f32 %25 = call (f32, f32, f32) -> f32 @takFP(f32 %24, f32 %22, f32 %23);
    f32 %26 = fsub f32 %22, f32 1;
    f32 %27 = call (f32, f32, f32) -> f32 @takFP(f32 %26, f32 %23, f32 %21);
    i1 %28 = fcmp olt f32 %27, f32 %25;
    f32 %29 = fsub f32 %23, f32 1;
    f32 %30 = call (f32, f32, f32) -> f32 @takFP(f32 %29, f32 %21, f32 %22);
    cbr i1 %28(prob = 0.5), ^if.then2, ^b2;
  ^b2:
    f32 %31 = phi [^b1, f32 %2] [^if.then2, f32 %30];
    f32 %32 = fsub f32 %4, f32 1;
    i1 %33 = fcmp olt f32 %2, f32 %32;
    cbr i1 %33(prob = 0.5), ^if.then3, ^b3;
  ^if.then3:
    f32 %34 = phi [^b2, f32 %32] [^if.then3, f32 %38];
    f32 %35 = phi [^b2, f32 %2] [^if.then3, f32 %40];
    f32 %36 = phi [^b2, f32 %3] [^if.then3, f32 %43];
    f32 %37 = fsub f32 %34, f32 1;
    f32 %38 = call (f32, f32, f32) -> f32 @takFP(f32 %37, f32 %35, f32 %36);
    f32 %39 = fsub f32 %35, f32 1;
    f32 %40 = call (f32, f32, f32) -> f32 @takFP(f32 %39, f32 %36, f32 %34);
    i1 %41 = fcmp olt f32 %40, f32 %38;
    f32 %42 = fsub f32 %36, f32 1;
    f32 %43 = call (f32, f32, f32) -> f32 @takFP(f32 %42, f32 %34, f32 %35);
    cbr i1 %41(prob = 0.5), ^if.then3, ^b3;
  ^b3:
    f32 %44 = phi [^b2, f32 %3] [^if.then3, f32 %43];
    i1 %45 = fcmp olt f32 %31, f32 %18;
    cbr i1 %45(prob = 0.5), ^if.then, ^b;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 20);
    i32 %0 = call () -> i32 @getint();
    f32 %1 = call () -> f32 @getfloat();
    f32 %2 = call () -> f32 @getfloat();
    f32 %3 = call () -> f32 @getfloat();
    f32 %4 = call (f32, f32, f32) -> f32 @takFP(f32 %1, f32 %2, f32 %3);
    f32 %5 = s2f i32 %0 to f32;
    f32 %6 = fadd f32 %5, f32 28;
    f32 %7 = call (f32) -> f32 @fibFP(f32 %6);
    i1 %8 = fcmp oeq f32 %7, f32 3.90882e+07;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putch(i32 112);
    ubr ^b;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b;
  ^b:
    i1 %9 = fcmp oeq f32 %4, f32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    call (i32) -> void @putch(i32 112);
    ubr ^b1;
  ^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
  ^b1:
    call (i32) -> void @stoptime(i32 41);
    ret i32 0;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
internal [4084 * i32]* @lut_fibFP, align 8;
