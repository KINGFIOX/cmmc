internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 121);
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^super.header i32 %0, i32 0, i32 0 ], [ ^b i32 0 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg):
    call (i32) -> void @stoptime(i32 123);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 15;
    i32 %1 = srem i32 %0, i32 1500000001;
    i32 %2 = add i32 %1, i32 15;
    i32 %3 = srem i32 %2, i32 1500000001;
    i32 %4 = add i32 %3, i32 15;
    i32 %5 = srem i32 %4, i32 1500000001;
    i32 %6 = add i32 %5, i32 15;
    i32 %7 = srem i32 %6, i32 1500000001;
    i32 %8 = add i32 %7, i32 15;
    i32 %9 = srem i32 %8, i32 1500000001;
    i32 %10 = add i32 %9, i32 15;
    i32 %11 = srem i32 %10, i32 1500000001;
    i32 %12 = add i32 %11, i32 15;
    i32 %13 = srem i32 %12, i32 1500000001;
    i32 %14 = add i32 %13, i32 15;
    i32 %15 = srem i32 %14, i32 1500000001;
    i32 %16 = add i32 %15, i32 15;
    i32 %17 = srem i32 %16, i32 1500000001;
    i32 %18 = add i32 %17, i32 15;
    i32 %19 = srem i32 %18, i32 1500000001;
    i32 %20 = add i32 %19, i32 15;
    i32 %21 = srem i32 %20, i32 1500000001;
    i32 %22 = add i32 %21, i32 15;
    i32 %23 = srem i32 %22, i32 1500000001;
    i32 %24 = add i32 %23, i32 15;
    i32 %25 = srem i32 %24, i32 1500000001;
    i32 %26 = add i32 %25, i32 15;
    i32 %27 = srem i32 %26, i32 1500000001;
    i32 %28 = add i32 %27, i32 15;
    i32 %29 = srem i32 %28, i32 1500000001;
    i32 %30 = add i32 %29, i32 15;
    i32 %31 = srem i32 %30, i32 1500000001;
    i32 %32 = add i32 %arg2, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg;
    cbr i1 %33(prob = 0.97), [ ^super.header i32 %arg, i32 %31, i32 %32 ], [ ^b i32 %31 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 15;
    i32 %1 = srem i32 %0, i32 1500000001;
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg;
    cbr i1 %3(prob = 0.97), [ ^while.body1 i32 %arg, i32 %1, i32 %2 ], [ ^b i32 %1 ];
}
