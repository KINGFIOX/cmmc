internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 121);
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i1 %2 = icmp sgt i32 %0, i32 4;
    cbr i1 %2(prob = 0.89), ^super.header1, ^while.body;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %11];
    call (i32) -> void @stoptime(i32 123);
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^super.header1:
    i32 %4 = add i32 %0, i32 -4;
    i1 %5 = icmp sgt i32 %4, i32 16;
    cbr i1 %5(prob = 0.89), ^super.header2, ^while.body1;
  ^while.body {scalar}:
    i32 %6 = phi [^super.header, i32 0] [^while.body, i32 %8] [^while.body1, i32 %16];
    i32 %7 = phi [^super.header, i32 0] [^while.body, i32 %11] [^while.body1, i32 %19];
    i32 %8 = add i32 %6, i32 1;
    i1 %9 = icmp sgt i32 %0, i32 %8;
    i32 %10 = add i32 %7, i32 15;
    i32 %11 = srem i32 %10, i32 1500000001;
    cbr i1 %9(prob = 0.75), ^while.body, ^b;
  ^super.header2:
    i32 %12 = add i32 %0, i32 -20;
    i1 %13 = icmp sgt i32 %12, i32 64;
    cbr i1 %13(prob = 0.89), ^super.header3, ^while.body2;
  ^while.body1 {scalar}:
    i32 %14 = phi [^super.header1, i32 0] [^while.body1, i32 %19] [^while.body2, i32 %27];
    i32 %15 = phi [^super.header1, i32 0] [^while.body1, i32 %16] [^while.body2, i32 %24];
    i32 %16 = add i32 %15, i32 4;
    i1 %17 = icmp sgt i32 %4, i32 %16;
    i32 %18 = add i32 %14, i32 60;
    i32 %19 = srem i32 %18, i32 1500000001;
    cbr i1 %17(prob = 0.75), ^while.body1, ^while.body;
  ^super.header3:
    i32 %20 = add i32 %0, i32 -84;
    i1 %21 = icmp sgt i32 %20, i32 256;
    cbr i1 %21(prob = 0.89), ^super.header4, ^while.body3;
  ^while.body2 {scalar}:
    i32 %22 = phi [^super.header2, i32 0] [^while.body2, i32 %24] [^while.body3, i32 %32];
    i32 %23 = phi [^super.header2, i32 0] [^while.body2, i32 %27] [^while.body3, i32 %35];
    i32 %24 = add i32 %22, i32 16;
    i1 %25 = icmp sgt i32 %12, i32 %24;
    i32 %26 = add i32 %23, i32 240;
    i32 %27 = srem i32 %26, i32 1500000001;
    cbr i1 %25(prob = 0.75), ^while.body2, ^while.body1;
  ^super.header4:
    i32 %28 = add i32 %0, i32 -340;
    i1 %29 = icmp sgt i32 %28, i32 1024;
    cbr i1 %29(prob = 0.89), ^super.header5, ^while.body4;
  ^while.body3 {scalar}:
    i32 %30 = phi [^super.header3, i32 0] [^while.body3, i32 %35] [^while.body4, i32 %43];
    i32 %31 = phi [^super.header3, i32 0] [^while.body3, i32 %32] [^while.body4, i32 %40];
    i32 %32 = add i32 %31, i32 64;
    i1 %33 = icmp sgt i32 %20, i32 %32;
    i32 %34 = add i32 %30, i32 960;
    i32 %35 = srem i32 %34, i32 1500000001;
    cbr i1 %33(prob = 0.75), ^while.body3, ^while.body2;
  ^super.header5:
    i32 %36 = add i32 %0, i32 -1364;
    i1 %37 = icmp sgt i32 %36, i32 4096;
    cbr i1 %37(prob = 0.89), ^super.header6, ^while.body5;
  ^while.body4 {scalar}:
    i32 %38 = phi [^super.header4, i32 0] [^while.body4, i32 %40] [^while.body5, i32 %49];
    i32 %39 = phi [^super.header4, i32 0] [^while.body4, i32 %43] [^while.body5, i32 %52];
    i32 %40 = add i32 %38, i32 256;
    i1 %41 = icmp sgt i32 %28, i32 %40;
    i32 %42 = add i32 %39, i32 3840;
    i32 %43 = srem i32 %42, i32 1500000001;
    cbr i1 %41(prob = 0.75), ^while.body4, ^while.body3;
  ^super.header6:
    i32 %44 = add i32 %0, i32 -5460;
    i1 %45 = icmp sgt i32 %44, i32 16384;
    i32 %46 = add i32 %0, i32 -21844;
    cbr i1 %45(prob = 0.89), ^super.header7, ^while.body6;
  ^while.body5 {scalar}:
    i32 %47 = phi [^super.header5, i32 0] [^while.body5, i32 %52] [^while.body6, i32 %62];
    i32 %48 = phi [^super.header5, i32 0] [^while.body5, i32 %49] [^while.body6, i32 %59];
    i32 %49 = add i32 %48, i32 1024;
    i1 %50 = icmp sgt i32 %36, i32 %49;
    i32 %51 = add i32 %47, i32 15360;
    i32 %52 = srem i32 %51, i32 1500000001;
    cbr i1 %50(prob = 0.75), ^while.body5, ^while.body4;
  ^super.header7:
    i32 %53 = phi [^super.header6, i32 0] [^while.body7, i32 %64];
    i32 %54 = phi [^super.header6, i32 0] [^while.body7, i32 %55];
    i32 %55 = add i32 %54, i32 65536;
    i1 %56 = icmp sgt i32 %46, i32 %55;
    cbr i1 %56(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body6 {scalar}:
    i32 %57 = phi [^super.header6, i32 0] [^while.body6, i32 %59] [^while.body8, i32 %67];
    i32 %58 = phi [^super.header6, i32 0] [^while.body6, i32 %62] [^while.body8, i32 %70];
    i32 %59 = add i32 %57, i32 4096;
    i1 %60 = icmp sgt i32 %44, i32 %59;
    i32 %61 = add i32 %58, i32 61440;
    i32 %62 = srem i32 %61, i32 1500000001;
    cbr i1 %60(prob = 0.75), ^while.body6, ^while.body5;
  ^while.body7:
    i32 %63 = add i32 %53, i32 983040;
    i32 %64 = srem i32 %63, i32 1500000001;
    ubr ^super.header7;
  ^while.body8 {scalar}:
    i32 %65 = phi [^super.header7, i32 %53] [^while.body8, i32 %70];
    i32 %66 = phi [^super.header7, i32 %54] [^while.body8, i32 %67];
    i32 %67 = add i32 %66, i32 16384;
    i1 %68 = icmp sgt i32 %46, i32 %67;
    i32 %69 = add i32 %65, i32 245760;
    i32 %70 = srem i32 %69, i32 1500000001;
    cbr i1 %68(prob = 0.75), ^while.body8, ^while.body6;
}
