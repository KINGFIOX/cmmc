internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 100016);
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^super.header i32 %0, i32 0, i32 0 ], [ ^b i32 0 ];
^super.header(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg):
    call (i32) -> void @stoptime(i32 100032);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg2, i32 60;
    i32 %1 = sdiv i32 %0, i32 60;
    i32 %2 = add i32 %arg1, i32 %1;
    i32 %3 = srem i32 %2, i32 134209537;
    i32 %4 = add i32 %arg2, i32 1;
    i32 %5 = mul i32 %4, i32 60;
    i32 %6 = sdiv i32 %5, i32 60;
    i32 %7 = add i32 %3, i32 %6;
    i32 %8 = srem i32 %7, i32 134209537;
    i32 %9 = add i32 %arg2, i32 2;
    i32 %10 = mul i32 %9, i32 60;
    i32 %11 = sdiv i32 %10, i32 60;
    i32 %12 = add i32 %8, i32 %11;
    i32 %13 = srem i32 %12, i32 134209537;
    i32 %14 = add i32 %arg2, i32 3;
    i32 %15 = mul i32 %14, i32 60;
    i32 %16 = sdiv i32 %15, i32 60;
    i32 %17 = add i32 %13, i32 %16;
    i32 %18 = srem i32 %17, i32 134209537;
    i32 %19 = add i32 %arg2, i32 4;
    i32 %20 = mul i32 %19, i32 60;
    i32 %21 = sdiv i32 %20, i32 60;
    i32 %22 = add i32 %18, i32 %21;
    i32 %23 = srem i32 %22, i32 134209537;
    i32 %24 = add i32 %arg2, i32 5;
    i32 %25 = mul i32 %24, i32 60;
    i32 %26 = sdiv i32 %25, i32 60;
    i32 %27 = add i32 %23, i32 %26;
    i32 %28 = srem i32 %27, i32 134209537;
    i32 %29 = add i32 %arg2, i32 6;
    i32 %30 = mul i32 %29, i32 60;
    i32 %31 = sdiv i32 %30, i32 60;
    i32 %32 = add i32 %28, i32 %31;
    i32 %33 = srem i32 %32, i32 134209537;
    i32 %34 = add i32 %arg2, i32 7;
    i32 %35 = mul i32 %34, i32 60;
    i32 %36 = sdiv i32 %35, i32 60;
    i32 %37 = add i32 %33, i32 %36;
    i32 %38 = srem i32 %37, i32 134209537;
    i32 %39 = add i32 %arg2, i32 8;
    i32 %40 = mul i32 %39, i32 60;
    i32 %41 = sdiv i32 %40, i32 60;
    i32 %42 = add i32 %38, i32 %41;
    i32 %43 = srem i32 %42, i32 134209537;
    i32 %44 = add i32 %arg2, i32 9;
    i32 %45 = mul i32 %44, i32 60;
    i32 %46 = sdiv i32 %45, i32 60;
    i32 %47 = add i32 %46, i32 %43;
    i32 %48 = srem i32 %47, i32 134209537;
    i32 %49 = add i32 %arg2, i32 10;
    i32 %50 = mul i32 %49, i32 60;
    i32 %51 = sdiv i32 %50, i32 60;
    i32 %52 = add i32 %48, i32 %51;
    i32 %53 = srem i32 %52, i32 134209537;
    i32 %54 = add i32 %arg2, i32 11;
    i32 %55 = mul i32 %54, i32 60;
    i32 %56 = sdiv i32 %55, i32 60;
    i32 %57 = add i32 %53, i32 %56;
    i32 %58 = srem i32 %57, i32 134209537;
    i32 %59 = add i32 %arg2, i32 12;
    i32 %60 = mul i32 %59, i32 60;
    i32 %61 = sdiv i32 %60, i32 60;
    i32 %62 = add i32 %58, i32 %61;
    i32 %63 = srem i32 %62, i32 134209537;
    i32 %64 = add i32 %arg2, i32 13;
    i32 %65 = mul i32 %64, i32 60;
    i32 %66 = sdiv i32 %65, i32 60;
    i32 %67 = add i32 %63, i32 %66;
    i32 %68 = srem i32 %67, i32 134209537;
    i32 %69 = add i32 %arg2, i32 14;
    i32 %70 = mul i32 %69, i32 60;
    i32 %71 = sdiv i32 %70, i32 60;
    i32 %72 = add i32 %68, i32 %71;
    i32 %73 = srem i32 %72, i32 134209537;
    i32 %74 = add i32 %arg2, i32 15;
    i32 %75 = mul i32 %74, i32 60;
    i32 %76 = sdiv i32 %75, i32 60;
    i32 %77 = add i32 %73, i32 %76;
    i32 %78 = srem i32 %77, i32 134209537;
    i32 %79 = add i32 %arg2, i32 16;
    i1 %80 = scmp lt i32 %79, i32 %arg;
    cbr i1 %80(prob = 0.97), [ ^super.header i32 %arg, i32 %78, i32 %79 ], [ ^b i32 %78 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg2, i32 60;
    i32 %1 = sdiv i32 %0, i32 60;
    i32 %2 = add i32 %arg1, i32 %1;
    i32 %3 = srem i32 %2, i32 134209537;
    i32 %4 = add i32 %arg2, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %arg;
    cbr i1 %5(prob = 0.97), [ ^while.body1 i32 %arg, i32 %3, i32 %4 ], [ ^b i32 %3 ];
}
