internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 100016);
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %4];
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %25];
    i32 %4 = add i32 %2, i32 4;
    i1 %5 = scmp gt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.89), ^while.body, ^super.header1;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^while.body2, i32 %54];
    call (i32) -> void @stoptime(i32 100032);
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body:
    i32 %7 = mul i32 %2, i32 60;
    i32 %8 = sdiv i32 %7, i32 60;
    i32 %9 = add i32 %3, i32 %8;
    i32 %10 = srem i32 %9, i32 134209537;
    i32 %11 = add i32 %2, i32 1;
    i32 %12 = mul i32 %11, i32 60;
    i32 %13 = sdiv i32 %12, i32 60;
    i32 %14 = add i32 %10, i32 %13;
    i32 %15 = srem i32 %14, i32 134209537;
    i32 %16 = add i32 %2, i32 2;
    i32 %17 = mul i32 %16, i32 60;
    i32 %18 = sdiv i32 %17, i32 60;
    i32 %19 = add i32 %15, i32 %18;
    i32 %20 = srem i32 %19, i32 134209537;
    i32 %21 = add i32 %2, i32 3;
    i32 %22 = mul i32 %21, i32 60;
    i32 %23 = sdiv i32 %22, i32 60;
    i32 %24 = add i32 %20, i32 %23;
    i32 %25 = srem i32 %24, i32 134209537;
    ubr ^super.header;
  ^super.header1:
    i32 %26 = phi [^super.header, i32 %2] [^while.body1, i32 %28];
    i32 %27 = phi [^super.header, i32 %3] [^while.body1, i32 %48];
    i32 %28 = add i32 %26, i32 4;
    i1 %29 = scmp gt i32 %0, i32 %28;
    cbr i1 %29(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body1:
    i32 %30 = mul i32 %26, i32 60;
    i32 %31 = sdiv i32 %30, i32 60;
    i32 %32 = add i32 %27, i32 %31;
    i32 %33 = srem i32 %32, i32 134209537;
    i32 %34 = add i32 %26, i32 1;
    i32 %35 = mul i32 %34, i32 60;
    i32 %36 = sdiv i32 %35, i32 60;
    i32 %37 = add i32 %33, i32 %36;
    i32 %38 = srem i32 %37, i32 134209537;
    i32 %39 = add i32 %26, i32 2;
    i32 %40 = mul i32 %39, i32 60;
    i32 %41 = sdiv i32 %40, i32 60;
    i32 %42 = add i32 %38, i32 %41;
    i32 %43 = srem i32 %42, i32 134209537;
    i32 %44 = add i32 %26, i32 3;
    i32 %45 = mul i32 %44, i32 60;
    i32 %46 = sdiv i32 %45, i32 60;
    i32 %47 = add i32 %43, i32 %46;
    i32 %48 = srem i32 %47, i32 134209537;
    ubr ^super.header1;
  ^while.body2:
    i32 %49 = phi [^super.header1, i32 %26] [^while.body2, i32 %55];
    i32 %50 = phi [^super.header1, i32 %27] [^while.body2, i32 %54];
    i32 %51 = mul i32 %49, i32 60;
    i32 %52 = sdiv i32 %51, i32 60;
    i32 %53 = add i32 %50, i32 %52;
    i32 %54 = srem i32 %53, i32 134209537;
    i32 %55 = add i32 %49, i32 1;
    i1 %56 = scmp gt i32 %0, i32 %55;
    cbr i1 %56(prob = 0.97), ^while.body2, ^b;
}
