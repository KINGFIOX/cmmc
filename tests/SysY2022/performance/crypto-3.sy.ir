internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [80 * i32]* %words = alloc [80 * i32];
    [5 * i32]* %output_b = alloc [5 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 161);
    i32* %2 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %6 with i32 0;
    [32768 * i32]* %7 = ptrcast [32768 * i32]* @buffer to [32768 * i32]*;
    i32* %8 = getelementptr &([32768 * i32]* %7)[i64 0][i64 0];
    i32* %9 = getelementptr &([32768 * i32]* %7)[i64 0][i64 32000];
    i32* %10 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 %0] [^b3, i32 %28];
    i32 %12 = phi [^entry, i32 %1] [^b3, i32 %95];
    i1 %13 = scmp gt i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %14 = phi [^while.header, i32 %11] [^while.body, i32 %28];
    i32 %15 = phi [^while.header, i32 0] [^while.body, i32 %40];
    i32 %16 = mul i32 %14, i32 8193;
    i32 %17 = sdiv i32 %16, i32 131072;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = mul i32 %18, i32 270369;
    i32 %20 = sdiv i32 %19, i32 131072;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = mul i32 %21, i32 270369;
    i32 %23 = sdiv i32 %22, i32 131072;
    i32 %24 = add i32 %22, i32 %23;
    i32 %25 = mul i32 %24, i32 270369;
    i32 %26 = sdiv i32 %25, i32 131072;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = mul i32 %27, i32 33;
    i32 %29 = srem i32 %28, i32 256;
    i32 %30 = mul i32 %24, i32 33;
    i32 %31 = srem i32 %30, i32 256;
    i32 %32 = mul i32 %21, i32 33;
    i32 %33 = srem i32 %32, i32 256;
    i32 %34 = mul i32 %18, i32 33;
    i32 %35 = srem i32 %34, i32 256;
    i32* %36 = getelementptr &([32768 * i32]* %7)[i64 0][i32 %15];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 %33;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 %31;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 %29;
    i32 %40 = add i32 %15, i32 4;
    i1 %41 = scmp lt i32 %40, i32 32000;
    cbr i1 %41(prob = 1), ^while.body, ^entry1;
  ^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %2);
    ret i32 0;
  ^entry1:
    store i32* %9 with i32 128;
    ubr ^while.body1;
  ^while.body1:
    i32 %42 = phi [^entry1, i32 32001] [^while.body1, i32 %44];
    i32* %43 = getelementptr &(i32* %8)[i32 %42];
    store i32* %43 with i32 0;
    i32 %44 = add i32 %42, i32 1;
    i32 %45 = srem i32 %44, i32 64;
    i1 %46 = scmp neq i32 %45, i32 60;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32* %47 = getelementptr &(i32* %8)[i32 %44];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 125;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32 %51 = add i32 %42, i32 5;
    ubr ^b2;
  ^b2:
    i64 %52 = phi [^b1, i64 0] [^b2, i64 %69];
    i32* %53 = getelementptr &(i32* %10)[i64 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %53)[i64 4];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %53)[i64 5];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %53)[i64 6];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %53)[i64 7];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %53)[i64 8];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %53)[i64 9];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %53)[i64 10];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %53)[i64 11];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %53)[i64 12];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %53)[i64 13];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %53)[i64 14];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %53)[i64 15];
    store i32* %68 with i32 0;
    i64 %69 = add i64 %52, i64 16;
    i1 %70 = scmp lt i64 %69, i64 80;
    cbr i1 %70(prob = 0.8), ^b2, ^while.header1;
  ^while.header1:
    i32 %71 = phi [^b2, i32 0] [^b4, i32 %174];
    i32 %72 = phi [^b2, i32 0] [^b4, i32 %175];
    i32 %73 = phi [^b2, i32 0] [^b4, i32 %246];
    i32 %74 = phi [^b2, i32 -1009589776] [^b4, i32 %245];
    i32 %75 = phi [^b2, i32 271733878] [^b4, i32 %244];
    i32 %76 = phi [^b2, i32 -1732584194] [^b4, i32 %243];
    i32 %77 = phi [^b2, i32 -271733879] [^b4, i32 %242];
    i32 %78 = phi [^b2, i32 1732584193] [^b4, i32 %241];
    i1 %79 = scmp gt i32 %51, i32 %73;
    cbr i1 %79(prob = 0.97), ^while.body2, ^b3;
  ^b3:
    i32 %80 = load i32* %2;
    i32 %81 = add i32 %78, i32 %80;
    i32 %82 = neg i32 %81;
    store i32* %2 with i32 %82;
    i32 %83 = load i32* %3;
    i32 %84 = add i32 %77, i32 %83;
    i32 %85 = neg i32 %84;
    store i32* %3 with i32 %85;
    i32 %86 = load i32* %4;
    i32 %87 = add i32 %76, i32 %86;
    i32 %88 = neg i32 %87;
    store i32* %4 with i32 %88;
    i32 %89 = load i32* %5;
    i32 %90 = add i32 %75, i32 %89;
    i32 %91 = neg i32 %90;
    store i32* %5 with i32 %91;
    i32 %92 = load i32* %6;
    i32 %93 = add i32 %74, i32 %92;
    i32 %94 = neg i32 %93;
    store i32* %6 with i32 %94;
    i32 %95 = add i32 %12, i32 -1;
    ubr ^while.header;
  ^while.body2:
    i32 %96 = phi [^while.header1, i32 0] [^while.body2, i32 %168];
    i32 %97 = mul i32 %96, i32 4;
    i32 %98 = add i32 %73, i32 %97;
    i32* %99 = getelementptr &(i32* %8)[i32 %98];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %99)[i64 1];
    i32 %102 = load i32* %101;
    i32 %103 = mul i32 %102, i32 65536;
    i32 %104 = mul i32 %100, i32 16777216;
    i32 %105 = add i32 %103, i32 %104;
    i32* %106 = getelementptr &(i32* %99)[i64 2];
    i32 %107 = load i32* %106;
    i32 %108 = mul i32 %107, i32 256;
    i32 %109 = add i32 %105, i32 %108;
    i32* %110 = getelementptr &(i32* %99)[i64 3];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &([80 * i32]* %words)[i64 0][i32 %96];
    store i32* %113 with i32 %112;
    i32 %114 = add i32 %96, i32 1;
    i32 %115 = mul i32 %114, i32 4;
    i32 %116 = add i32 %73, i32 %115;
    i32* %117 = getelementptr &(i32* %8)[i32 %116];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %117)[i64 1];
    i32 %120 = load i32* %119;
    i32 %121 = mul i32 %120, i32 65536;
    i32 %122 = mul i32 %118, i32 16777216;
    i32 %123 = add i32 %121, i32 %122;
    i32* %124 = getelementptr &(i32* %117)[i64 2];
    i32 %125 = load i32* %124;
    i32 %126 = mul i32 %125, i32 256;
    i32 %127 = add i32 %123, i32 %126;
    i32* %128 = getelementptr &(i32* %117)[i64 3];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %127, i32 %129;
    i32* %131 = getelementptr &(i32* %113)[i64 1];
    store i32* %131 with i32 %130;
    i32 %132 = add i32 %96, i32 2;
    i32 %133 = mul i32 %132, i32 4;
    i32 %134 = add i32 %73, i32 %133;
    i32* %135 = getelementptr &(i32* %8)[i32 %134];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %135)[i64 1];
    i32 %138 = load i32* %137;
    i32 %139 = mul i32 %138, i32 65536;
    i32 %140 = mul i32 %136, i32 16777216;
    i32 %141 = add i32 %139, i32 %140;
    i32* %142 = getelementptr &(i32* %135)[i64 2];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %143, i32 256;
    i32 %145 = add i32 %141, i32 %144;
    i32* %146 = getelementptr &(i32* %135)[i64 3];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %145, i32 %147;
    i32* %149 = getelementptr &(i32* %113)[i64 2];
    store i32* %149 with i32 %148;
    i32 %150 = add i32 %96, i32 3;
    i32 %151 = mul i32 %150, i32 4;
    i32 %152 = add i32 %73, i32 %151;
    i32* %153 = getelementptr &(i32* %8)[i32 %152];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %153)[i64 1];
    i32 %156 = load i32* %155;
    i32 %157 = mul i32 %156, i32 65536;
    i32 %158 = mul i32 %154, i32 16777216;
    i32 %159 = add i32 %157, i32 %158;
    i32* %160 = getelementptr &(i32* %153)[i64 2];
    i32 %161 = load i32* %160;
    i32 %162 = mul i32 %161, i32 256;
    i32 %163 = add i32 %159, i32 %162;
    i32* %164 = getelementptr &(i32* %153)[i64 3];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %163, i32 %165;
    i32* %167 = getelementptr &(i32* %113)[i64 3];
    store i32* %167 with i32 %166;
    i32 %168 = add i32 %96, i32 4;
    i1 %169 = scmp lt i32 %168, i32 16;
    cbr i1 %169(prob = 0.75), ^while.body2, ^indirect;
  ^indirect:
    i1 %170 = scmp lt i32 %168, i32 80;
    cbr i1 %170(prob = 0.97), ^super.header, ^while.header2;
  ^super.header:
    i32 %171 = phi [^indirect, i32 %168] [^while.body3, i32 %172];
    i32 %172 = add i32 %171, i32 4;
    i1 %173 = scmp lt i32 %172, i32 80;
    cbr i1 %173(prob = 0.89), ^while.body3, ^super.header1;
  ^while.header2:
    i32 %174 = phi [^indirect, i32 %71] [^b5, i32 %309] [^while.body6, i32 %71];
    i32 %175 = phi [^indirect, i32 %72] [^b5, i32 %310] [^while.body6, i32 %72];
    i32 %176 = phi [^indirect, i32 0] [^b5, i32 %323] [^while.body6, i32 0];
    i32 %177 = phi [^indirect, i32 %74] [^b5, i32 %178] [^while.body6, i32 %74];
    i32 %178 = phi [^indirect, i32 %75] [^b5, i32 %179] [^while.body6, i32 %75];
    i32 %179 = phi [^indirect, i32 %76] [^b5, i32 %322] [^while.body6, i32 %76];
    i32 %180 = phi [^indirect, i32 %77] [^b5, i32 %181] [^while.body6, i32 %77];
    i32 %181 = phi [^indirect, i32 %78] [^b5, i32 %319] [^while.body6, i32 %78];
    i1 %182 = scmp lt i32 %176, i32 80;
    cbr i1 %182(prob = 0.97), ^while.body4, ^b4;
  ^while.body3:
    i32* %183 = getelementptr &([80 * i32]* %words)[i64 0][i32 %171];
    i32* %184 = getelementptr &(i32* %183)[i64 -3];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %183)[i64 -8];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %185, i32 %187;
    i32* %189 = getelementptr &(i32* %183)[i64 -14];
    i32 %190 = load i32* %189;
    i32 %191 = sub i32 %188, i32 %190;
    i32* %192 = getelementptr &(i32* %183)[i64 -16];
    i32 %193 = load i32* %192;
    i32 %194 = add i32 %191, i32 %193;
    i32 %195 = neg i32 %194;
    i32 %196 = mul i32 %195, i32 2;
    i32 %197 = srem i32 %195, i32 2;
    i32 %198 = add i32 %196, i32 %197;
    store i32* %183 with i32 %198;
    i32* %199 = getelementptr &(i32* %183)[i64 -2];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %183)[i64 -7];
    i32 %202 = load i32* %201;
    i32 %203 = add i32 %200, i32 %202;
    i32* %204 = getelementptr &(i32* %183)[i64 -13];
    i32 %205 = load i32* %204;
    i32 %206 = sub i32 %203, i32 %205;
    i32* %207 = getelementptr &(i32* %183)[i64 -15];
    i32 %208 = load i32* %207;
    i32 %209 = add i32 %206, i32 %208;
    i32 %210 = neg i32 %209;
    i32 %211 = mul i32 %210, i32 2;
    i32 %212 = srem i32 %210, i32 2;
    i32 %213 = add i32 %211, i32 %212;
    i32* %214 = getelementptr &(i32* %183)[i64 1];
    store i32* %214 with i32 %213;
    i32* %215 = getelementptr &(i32* %183)[i64 -1];
    i32 %216 = load i32* %215;
    i32* %217 = getelementptr &(i32* %183)[i64 -6];
    i32 %218 = load i32* %217;
    i32 %219 = add i32 %216, i32 %218;
    i32* %220 = getelementptr &(i32* %183)[i64 -12];
    i32 %221 = load i32* %220;
    i32 %222 = sub i32 %219, i32 %221;
    i32 %223 = add i32 %190, i32 %222;
    i32 %224 = neg i32 %223;
    i32 %225 = mul i32 %224, i32 2;
    i32 %226 = srem i32 %224, i32 2;
    i32 %227 = add i32 %225, i32 %226;
    i32* %228 = getelementptr &(i32* %183)[i64 2];
    store i32* %228 with i32 %227;
    i32* %229 = getelementptr &(i32* %183)[i64 -5];
    i32 %230 = load i32* %229;
    i32 %231 = add i32 %198, i32 %230;
    i32* %232 = getelementptr &(i32* %183)[i64 -11];
    i32 %233 = load i32* %232;
    i32 %234 = sub i32 %231, i32 %233;
    i32 %235 = add i32 %205, i32 %234;
    i32 %236 = neg i32 %235;
    i32 %237 = mul i32 %236, i32 2;
    i32 %238 = srem i32 %236, i32 2;
    i32 %239 = add i32 %237, i32 %238;
    i32* %240 = getelementptr &(i32* %183)[i64 3];
    store i32* %240 with i32 %239;
    ubr ^super.header;
  ^b4:
    i32 %241 = add i32 %78, i32 %181;
    i32 %242 = add i32 %77, i32 %180;
    i32 %243 = add i32 %76, i32 %179;
    i32 %244 = add i32 %75, i32 %178;
    i32 %245 = add i32 %74, i32 %177;
    i32 %246 = add i32 %73, i32 64;
    ubr ^while.header1;
  ^super.header1:
    i32 %247 = phi [^super.header, i32 %171] [^while.body5, i32 %248];
    i32 %248 = add i32 %247, i32 4;
    i1 %249 = scmp lt i32 %248, i32 80;
    cbr i1 %249(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body4:
    i1 %250 = scmp lt i32 %176, i32 20;
    cbr i1 %250(prob = 0.5), ^b5, ^if.else;
  ^while.body5:
    i32* %251 = getelementptr &([80 * i32]* %words)[i64 0][i32 %247];
    i32* %252 = getelementptr &(i32* %251)[i64 -3];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &(i32* %251)[i64 -8];
    i32 %255 = load i32* %254;
    i32 %256 = add i32 %253, i32 %255;
    i32* %257 = getelementptr &(i32* %251)[i64 -14];
    i32 %258 = load i32* %257;
    i32 %259 = sub i32 %256, i32 %258;
    i32* %260 = getelementptr &(i32* %251)[i64 -16];
    i32 %261 = load i32* %260;
    i32 %262 = add i32 %259, i32 %261;
    i32 %263 = neg i32 %262;
    i32 %264 = mul i32 %263, i32 2;
    i32 %265 = srem i32 %263, i32 2;
    i32 %266 = add i32 %264, i32 %265;
    store i32* %251 with i32 %266;
    i32* %267 = getelementptr &(i32* %251)[i64 -2];
    i32 %268 = load i32* %267;
    i32* %269 = getelementptr &(i32* %251)[i64 -7];
    i32 %270 = load i32* %269;
    i32 %271 = add i32 %268, i32 %270;
    i32* %272 = getelementptr &(i32* %251)[i64 -13];
    i32 %273 = load i32* %272;
    i32 %274 = sub i32 %271, i32 %273;
    i32* %275 = getelementptr &(i32* %251)[i64 -15];
    i32 %276 = load i32* %275;
    i32 %277 = add i32 %274, i32 %276;
    i32 %278 = neg i32 %277;
    i32 %279 = mul i32 %278, i32 2;
    i32 %280 = srem i32 %278, i32 2;
    i32 %281 = add i32 %279, i32 %280;
    i32* %282 = getelementptr &(i32* %251)[i64 1];
    store i32* %282 with i32 %281;
    i32* %283 = getelementptr &(i32* %251)[i64 -1];
    i32 %284 = load i32* %283;
    i32* %285 = getelementptr &(i32* %251)[i64 -6];
    i32 %286 = load i32* %285;
    i32 %287 = add i32 %284, i32 %286;
    i32* %288 = getelementptr &(i32* %251)[i64 -12];
    i32 %289 = load i32* %288;
    i32 %290 = sub i32 %287, i32 %289;
    i32 %291 = add i32 %258, i32 %290;
    i32 %292 = neg i32 %291;
    i32 %293 = mul i32 %292, i32 2;
    i32 %294 = srem i32 %292, i32 2;
    i32 %295 = add i32 %293, i32 %294;
    i32* %296 = getelementptr &(i32* %251)[i64 2];
    store i32* %296 with i32 %295;
    i32* %297 = getelementptr &(i32* %251)[i64 -5];
    i32 %298 = load i32* %297;
    i32 %299 = add i32 %266, i32 %298;
    i32* %300 = getelementptr &(i32* %251)[i64 -11];
    i32 %301 = load i32* %300;
    i32 %302 = sub i32 %299, i32 %301;
    i32 %303 = add i32 %273, i32 %302;
    i32 %304 = neg i32 %303;
    i32 %305 = mul i32 %304, i32 2;
    i32 %306 = srem i32 %304, i32 2;
    i32 %307 = add i32 %305, i32 %306;
    i32* %308 = getelementptr &(i32* %251)[i64 3];
    store i32* %308 with i32 %307;
    ubr ^super.header1;
  ^b5:
    i32 %309 = phi [^while.body4, i32 1518500249] [^entry2, i32 1859775361] [^if.else1, i32 -1894007588] [^entry3, i32 %350];
    i32 %310 = phi [^while.body4, i32 0] [^entry2, i32 %345] [^if.else1, i32 0] [^entry3, i32 %349];
    i32 %311 = mul i32 %181, i32 32;
    i32 %312 = add i32 %177, i32 %311;
    i32 %313 = add i32 %309, i32 %312;
    i32 %314 = add i32 %310, i32 %313;
    i32 %315 = srem i32 %181, i32 32;
    i32 %316 = add i32 %314, i32 %315;
    i32* %317 = getelementptr &([80 * i32]* %words)[i64 0][i32 %176];
    i32 %318 = load i32* %317;
    i32 %319 = add i32 %316, i32 %318;
    i32 %320 = mul i32 %180, i32 1073741824;
    i32 %321 = srem i32 %180, i32 1073741824;
    i32 %322 = add i32 %320, i32 %321;
    i32 %323 = add i32 %176, i32 1;
    ubr ^while.header2;
  ^while.body6:
    i32 %324 = phi [^super.header1, i32 %247] [^while.body6, i32 %341];
    i32* %325 = getelementptr &([80 * i32]* %words)[i64 0][i32 %324];
    i32* %326 = getelementptr &(i32* %325)[i64 -3];
    i32 %327 = load i32* %326;
    i32* %328 = getelementptr &(i32* %325)[i64 -8];
    i32 %329 = load i32* %328;
    i32 %330 = add i32 %327, i32 %329;
    i32* %331 = getelementptr &(i32* %325)[i64 -14];
    i32 %332 = load i32* %331;
    i32 %333 = sub i32 %330, i32 %332;
    i32* %334 = getelementptr &(i32* %325)[i64 -16];
    i32 %335 = load i32* %334;
    i32 %336 = add i32 %333, i32 %335;
    i32 %337 = neg i32 %336;
    i32 %338 = mul i32 %337, i32 2;
    i32 %339 = srem i32 %337, i32 2;
    i32 %340 = add i32 %338, i32 %339;
    store i32* %325 with i32 %340;
    i32 %341 = add i32 %324, i32 1;
    i1 %342 = scmp lt i32 %341, i32 80;
    cbr i1 %342(prob = 0.97), ^while.body6, ^while.header2;
  ^if.else:
    i1 %343 = scmp lt i32 %176, i32 40;
    cbr i1 %343(prob = 0.5), ^entry2, ^if.else1;
  ^entry2:
    i32 %344 = add i32 %179, i32 %180;
    i32 %345 = sub i32 %344, i32 %178;
    ubr ^b5;
  ^if.else1:
    i1 %346 = scmp lt i32 %176, i32 60;
    cbr i1 %346(prob = 0.5), ^b5, ^entry3;
  ^entry3:
    i32 %347 = add i32 %179, i32 %180;
    i32 %348 = sub i32 %347, i32 %178;
    i32 %349 = select i1 %182 ? i32 %348 : i32 %175;
    i32 %350 = select i1 %182 ? i32 -899497722 : i32 %174;
    ubr ^b5;
}
