internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32** %input = alloc i32*;
    i32* %input_len = alloc i32;
    i32** %output = alloc i32*;
    i32* %h0 = alloc i32;
    i32* %h1 = alloc i32;
    i32* %h2 = alloc i32;
    i32* %h3 = alloc i32;
    i32* %h4 = alloc i32;
    i32* %f = alloc i32;
    i32* %k = alloc i32;
    i32* %orig_len = alloc i32;
    i32* %chunk_st = alloc i32;
    [80 * i32]* %words = alloc [80 * i32];
    i32* %state = alloc i32;
    [5 * i32]* %output_b = alloc [5 * i32];
    [5 * i32]* %output1 = alloc [5 * i32];
    i32* %rounds = alloc i32;
    i32* %0 = getelementptr &([5 * i32]* %output1)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([5 * i32]* %output1)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %output1)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output1)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output1)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32 %5 = call () -> i32 @getint();
    store i32* %state with i32 %5;
    i32 %6 = call () -> i32 @getint();
    store i32* %rounds with i32 %6;
    call (i32) -> void @starttime(i32 161);
    i32* %7 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 0];
    i32* %13 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    i8* %14 = ptrcast i32* %13 to i8*;
    i32* %15 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 32000];
    ubr ^while.header;
^while.header:
    i32 %16 = phi [^b4, i32 %82] [^entry, i32 %5];
    i32 %17 = phi [^b4, i32 %141] [^entry, i32 %6];
    i1 %18 = scmp gt i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.header1, ^b;
^while.header1:
    i32 %19 = phi [^while.header, i32 0] [^while.body, i32 %28];
    i32 %20 = phi [^while.header, i32 %16] [^while.body, i32 %26];
    i1 %21 = scmp lt i32 %19, i32 32000;
    cbr i1 %21(prob = 0.97), ^while.body, ^b1;
^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %7);
    ret i32 0;
^while.body:
    i32* %22 = getelementptr &([32768 * i32]* @buffer)[i64 0][i32 %19];
    i32 %23 = mul i32 %20, i32 8193;
    i32 %24 = sdiv i32 %23, i32 131072;
    i32 %25 = add i32 %23, i32 %24;
    i32 %26 = mul i32 %25, i32 33;
    store i32* %state with i32 %26;
    i32 %27 = srem i32 %26, i32 256;
    store i32* %22 with i32 %27;
    i32 %28 = add i32 %19, i32 1;
    ubr ^while.header1;
^b1:
    store i32** %input with i32* %12;
    store i32** %output with i32* %0;
    store i32* %h0 with i32 1732584193;
    store i32* %h1 with i32 -271733879;
    store i32* %h2 with i32 -1732584194;
    store i32* %h3 with i32 271733878;
    store i32* %h4 with i32 -1009589776;
    store i32* %f with i32 0;
    store i32* %k with i32 0;
    store i32* %orig_len with i32 32000;
    store i32* %15 with i32 128;
    store i32* %input_len with i32 32001;
    ubr ^while.header2;
^while.header2:
    i32 %29 = phi [^while.body1, i32 %34] [^b1, i32 32000];
    i32 %30 = phi [^while.body1, i32 %36] [^b1, i32 32001];
    i32 %31 = srem i32 %30, i32 64;
    i1 %32 = scmp neq i32 %31, i32 60;
    cbr i1 %32(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32* %33 = getelementptr &(i32* %12)[i32 %30];
    store i32* %33 with i32 0;
    i32 %34 = load i32* %orig_len;
    i32 %35 = load i32* %input_len;
    i32 %36 = add i32 %35, i32 1;
    store i32* %input_len with i32 %36;
    ubr ^while.header2;
^b2:
    i32* %37 = getelementptr &(i32* %12)[i32 %30];
    i32 %38 = sdiv i32 %29, i32 16777216;
    i32 %39 = srem i32 %38, i32 256;
    store i32* %37 with i32 %39;
    i32 %40 = load i32* %orig_len;
    i32 %41 = load i32* %input_len;
    i32 %42 = add i32 %41, i32 1;
    i32* %43 = getelementptr &(i32* %12)[i32 %42];
    i32 %44 = sdiv i32 %40, i32 65536;
    i32 %45 = srem i32 %44, i32 256;
    store i32* %43 with i32 %45;
    i32* %46 = getelementptr &(i32* %43)[i64 1];
    i32 %47 = sdiv i32 %40, i32 256;
    i32 %48 = srem i32 %47, i32 256;
    store i32* %46 with i32 %48;
    i32* %49 = getelementptr &(i32* %43)[i64 2];
    i32 %50 = srem i32 %40, i32 256;
    store i32* %49 with i32 %50;
    i32 %51 = add i32 %41, i32 4;
    store i32* %input_len with i32 %51;
    store i32* %chunk_st with i32 0;
    i8* %52 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %14, i32 0, i64 320);
    i32 %53 = load i32* %chunk_st;
    i32 %54 = load i32* %k;
    i32 %55 = load i32* %f;
    i32 %56 = load i32* %h4;
    i32 %57 = load i32* %h3;
    i32 %58 = load i32* %h2;
    i32 %59 = load i32* %h1;
    i32 %60 = load i32* %h0;
    i32* %61 = load i32** %output;
    i32 %62 = load i32* %input_len;
    i32* %63 = load i32** %input;
    ubr ^while.header3;
^while.header3:
    i32 %64 = phi [^b5, i32 %156] [^b2, i32 %53];
    i32 %65 = phi [^b5, i32 %143] [^b2, i32 %54];
    i32 %66 = phi [^b5, i32 %144] [^b2, i32 %55];
    i32 %67 = phi [^b5, i32 %155] [^b2, i32 %56];
    i32 %68 = phi [^b5, i32 %154] [^b2, i32 %57];
    i32 %69 = phi [^b5, i32 %153] [^b2, i32 %58];
    i32 %70 = phi [^b5, i32 %152] [^b2, i32 %59];
    i32 %71 = phi [^b5, i32 %151] [^b2, i32 %60];
    i1 %72 = scmp lt i32 %64, i32 %62;
    cbr i1 %72(prob = 0.97), ^while.header4, ^b3;
^b3:
    store i32* %61 with i32 %71;
    i32 %73 = load i32* %h1;
    i32* %74 = getelementptr &(i32* %61)[i64 1];
    store i32* %74 with i32 %73;
    i32 %75 = load i32* %h2;
    i32* %76 = getelementptr &(i32* %61)[i64 2];
    store i32* %76 with i32 %75;
    i32 %77 = load i32* %h3;
    i32* %78 = getelementptr &(i32* %61)[i64 3];
    store i32* %78 with i32 %77;
    i32 %79 = load i32* %h4;
    i32* %80 = getelementptr &(i32* %61)[i64 4];
    store i32* %80 with i32 %79;
    i32 %81 = load i32* %rounds;
    i32 %82 = load i32* %state;
    ubr ^while.header5;
^while.header4:
    i32 %83 = phi [^while.header3, i32 0] [^while.body2, i32 %102];
    i1 %84 = scmp lt i32 %83, i32 16;
    cbr i1 %84(prob = 0.97), ^while.body2, ^while.header6;
^while.body2:
    i32* %85 = getelementptr &([80 * i32]* %words)[i64 0][i32 %83];
    i32 %86 = mul i32 %83, i32 4;
    i32 %87 = add i32 %86, i32 %64;
    i32* %88 = getelementptr &(i32* %63)[i32 %87];
    i32 %89 = load i32* %88;
    i32 %90 = mul i32 %89, i32 16777216;
    i32* %91 = getelementptr &(i32* %88)[i64 1];
    i32 %92 = load i32* %91;
    i32 %93 = mul i32 %92, i32 65536;
    i32* %94 = getelementptr &(i32* %88)[i64 2];
    i32 %95 = load i32* %94;
    i32 %96 = mul i32 %95, i32 256;
    i32* %97 = getelementptr &(i32* %88)[i64 3];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %90, i32 %93;
    i32 %100 = add i32 %99, i32 %96;
    i32 %101 = add i32 %100, i32 %98;
    store i32* %85 with i32 %101;
    i32 %102 = add i32 %83, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %103 = phi [^while.body3, i32 %115] [^b3, i32 0];
    i1 %104 = scmp lt i32 %103, i32 5;
    cbr i1 %104(prob = 0.97), ^while.body3, ^b4;
^while.header6:
    i32 %105 = phi [^while.header4, i32 %83] [^while.body4, i32 %140];
    i1 %106 = scmp lt i32 %105, i32 80;
    cbr i1 %106(prob = 0.97), ^while.body4, ^while.header7;
^while.body3:
    i32* %107 = getelementptr &([5 * i32]* %output_b)[i64 0][i32 %103];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &([5 * i32]* %output1)[i64 0][i32 %103];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %108, i32 %110;
    i32 %112 = sub i32 %108, i32 %111;
    i32 %113 = add i32 %112, i32 %110;
    i32 %114 = sub i32 %113, i32 %111;
    store i32* %107 with i32 %114;
    i32 %115 = add i32 %103, i32 1;
    ubr ^while.header5;
^while.body4:
    i32* %116 = getelementptr &([80 * i32]* %words)[i64 0][i32 %105];
    i32* %117 = getelementptr &(i32* %116)[i64 -3];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %116)[i64 -8];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %118, i32 %120;
    i32 %122 = sub i32 %118, i32 %121;
    i32 %123 = add i32 %120, i32 %122;
    i32 %124 = sub i32 %123, i32 %121;
    i32* %125 = getelementptr &(i32* %116)[i64 -14];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %124, i32 %126;
    i32 %128 = sub i32 %124, i32 %127;
    i32 %129 = add i32 %126, i32 %128;
    i32 %130 = sub i32 %129, i32 %127;
    i32* %131 = getelementptr &(i32* %116)[i64 -16];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %130, i32 %132;
    i32 %134 = sub i32 %130, i32 %133;
    i32 %135 = add i32 %132, i32 %134;
    i32 %136 = sub i32 %135, i32 %133;
    i32 %137 = mul i32 %136, i32 2;
    i32 %138 = srem i32 %136, i32 2;
    i32 %139 = add i32 %137, i32 %138;
    store i32* %116 with i32 %139;
    i32 %140 = add i32 %105, i32 1;
    ubr ^while.header6;
^b4:
    i32 %141 = add i32 %81, i32 -1;
    store i32* %rounds with i32 %141;
    ubr ^while.header;
^while.header7:
    i32 %142 = phi [^while.header6, i32 0] [^b6, i32 %192];
    i32 %143 = phi [^while.header6, i32 %65] [^b6, i32 %178];
    i32 %144 = phi [^while.header6, i32 %66] [^b6, i32 %179];
    i32 %145 = phi [^while.header6, i32 %67] [^b6, i32 %146];
    i32 %146 = phi [^while.header6, i32 %68] [^b6, i32 %147];
    i32 %147 = phi [^while.header6, i32 %69] [^b6, i32 %191];
    i32 %148 = phi [^while.header6, i32 %70] [^b6, i32 %149];
    i32 %149 = phi [^while.header6, i32 %71] [^b6, i32 %188];
    i1 %150 = scmp lt i32 %142, i32 80;
    cbr i1 %150(prob = 0.97), ^while.body5, ^b5;
^b5:
    i32 %151 = add i32 %71, i32 %149;
    store i32* %h0 with i32 %151;
    i32 %152 = add i32 %70, i32 %148;
    store i32* %h1 with i32 %152;
    i32 %153 = add i32 %69, i32 %147;
    store i32* %h2 with i32 %153;
    i32 %154 = add i32 %68, i32 %146;
    store i32* %h3 with i32 %154;
    i32 %155 = add i32 %67, i32 %145;
    store i32* %h4 with i32 %155;
    i32 %156 = add i32 %64, i32 64;
    store i32* %chunk_st with i32 %156;
    ubr ^while.header3;
^while.body5:
    i1 %157 = scmp lt i32 %142, i32 20;
    cbr i1 %157(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %158 = add i32 %148, i32 %147;
    i32 %159 = sub i32 -1, i32 %148;
    i32 %160 = add i32 %159, i32 %148;
    i32 %161 = add i32 %160, i32 %147;
    i32 %162 = add i32 %161, i32 %146;
    i32 %163 = sub i32 %158, i32 %162;
    i32 %164 = add i32 %159, i32 %163;
    i32 %165 = add i32 %164, i32 %146;
    i32 %166 = sub i32 %165, i32 %162;
    i32 %167 = add i32 %159, i32 %166;
    i32 %168 = add i32 %167, i32 %148;
    i32 %169 = add i32 %168, i32 %147;
    i32 %170 = add i32 %169, i32 %146;
    i32 %171 = sub i32 %166, i32 %170;
    i32 %172 = add i32 %159, i32 %171;
    i32 %173 = add i32 %172, i32 %148;
    i32 %174 = add i32 %173, i32 %147;
    i32 %175 = add i32 %174, i32 %146;
    i32 %176 = sub i32 %175, i32 %170;
    store i32* %f with i32 %176;
    store i32* %k with i32 1518500249;
    ubr ^b6;
^if.else:
    i1 %177 = scmp lt i32 %142, i32 40;
    cbr i1 %177(prob = 0.5), ^if.then1, ^if.else1;
^b6:
    i32 %178 = phi [^if.else2, i32 %143] [^if.then3, i32 -899497722] [^if.then1, i32 1859775361] [^if.then2, i32 -1894007588] [^if.then, i32 1518500249];
    i32 %179 = phi [^if.else2, i32 %144] [^if.then3, i32 %239] [^if.then1, i32 %200] [^if.then2, i32 %231] [^if.then, i32 %176];
    i32 %180 = mul i32 %149, i32 32;
    i32 %181 = srem i32 %149, i32 32;
    i32* %182 = getelementptr &([80 * i32]* %words)[i64 0][i32 %142];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %180, i32 %181;
    i32 %185 = add i32 %184, i32 %183;
    i32 %186 = add i32 %185, i32 %145;
    i32 %187 = add i32 %186, i32 %179;
    i32 %188 = add i32 %187, i32 %178;
    i32 %189 = mul i32 %148, i32 1073741824;
    i32 %190 = srem i32 %148, i32 1073741824;
    i32 %191 = add i32 %189, i32 %190;
    i32 %192 = add i32 %142, i32 1;
    ubr ^while.header7;
^if.then1:
    i32 %193 = add i32 %148, i32 %147;
    i32 %194 = sub i32 %148, i32 %193;
    i32 %195 = add i32 %194, i32 %147;
    i32 %196 = sub i32 %195, i32 %193;
    i32 %197 = add i32 %196, i32 %146;
    i32 %198 = sub i32 %196, i32 %197;
    i32 %199 = add i32 %198, i32 %146;
    i32 %200 = sub i32 %199, i32 %197;
    store i32* %f with i32 %200;
    store i32* %k with i32 1859775361;
    ubr ^b6;
^if.else1:
    i1 %201 = scmp lt i32 %142, i32 60;
    cbr i1 %201(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %202 = add i32 %148, i32 %147;
    i32 %203 = mul i32 %148, i32 2;
    i32 %204 = add i32 %203, i32 %147;
    i32 %205 = add i32 %204, i32 %146;
    i32 %206 = sub i32 %202, i32 %205;
    i32 %207 = add i32 %206, i32 %148;
    i32 %208 = add i32 %207, i32 %146;
    i32 %209 = sub i32 %208, i32 %205;
    i32 %210 = add i32 %209, i32 %203;
    i32 %211 = add i32 %210, i32 %147;
    i32 %212 = add i32 %211, i32 %146;
    i32 %213 = sub i32 %209, i32 %212;
    i32 %214 = add i32 %213, i32 %203;
    i32 %215 = add i32 %214, i32 %147;
    i32 %216 = add i32 %215, i32 %146;
    i32 %217 = sub i32 %216, i32 %212;
    i32 %218 = add i32 %217, i32 %147;
    i32 %219 = add i32 %218, i32 %146;
    i32 %220 = sub i32 %217, i32 %219;
    i32 %221 = add i32 %220, i32 %147;
    i32 %222 = add i32 %221, i32 %146;
    i32 %223 = sub i32 %222, i32 %219;
    i32 %224 = add i32 %217, i32 %223;
    i32 %225 = add i32 %224, i32 %147;
    i32 %226 = add i32 %225, i32 %146;
    i32 %227 = sub i32 %223, i32 %226;
    i32 %228 = add i32 %217, i32 %227;
    i32 %229 = add i32 %228, i32 %147;
    i32 %230 = add i32 %229, i32 %146;
    i32 %231 = sub i32 %230, i32 %226;
    store i32* %f with i32 %231;
    store i32* %k with i32 -1894007588;
    ubr ^b6;
^if.else2:
    cbr i1 %150(prob = 0.5), ^if.then3, ^b6;
^if.then3:
    i32 %232 = add i32 %148, i32 %147;
    i32 %233 = sub i32 %148, i32 %232;
    i32 %234 = add i32 %233, i32 %147;
    i32 %235 = sub i32 %234, i32 %232;
    i32 %236 = add i32 %235, i32 %146;
    i32 %237 = sub i32 %235, i32 %236;
    i32 %238 = add i32 %237, i32 %146;
    i32 %239 = sub i32 %238, i32 %236;
    store i32* %f with i32 %239;
    store i32* %k with i32 -899497722;
    ubr ^b6;
}
