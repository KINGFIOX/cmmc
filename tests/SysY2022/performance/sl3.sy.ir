internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i32 %3 = add i32 %0, i32 -4;
    i1 %4 = icmp sgt i32 %3, i32 16;
    i1 %5 = icmp sgt i32 %0, i32 0;
    i1 %6 = icmp sgt i32 %0, i32 4;
    i32 %7 = add i32 %0, i32 -20;
    i32 %8 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %9 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %22];
    i1 %11 = icmp sgt i32 %0, i32 %10;
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %10];
    cbr i1 %11(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %13 = phi [^while.header, i32 0] [^b2, i32 %33];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    cbr i1 %14(prob = 0.984615), ^while.header3, ^b;
  ^while.header2:
    i32 %15 = phi [^while.header, i32 1] [^while.header4, i32 %23];
    i32 %16 = phi [^while.header, i32 1] [^while.header4, i32 %21];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %16];
    [600 * [600 * i32]]* %18 = getelementptr &([600 * [600 * i32]]* %17)[i64 -1];
    [600 * [600 * i32]]* %19 = getelementptr &([600 * [600 * i32]]* %17)[i64 1];
    i1 %20 = icmp sgt i32 %1, i32 %16;
    i32 %21 = add i32 %16, i32 1;
    cbr i1 %20(prob = 0.984615), ^while.header4, ^b1;
  ^b:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.header3:
    cbr i1 %5(prob = 0.984615), ^prebody, ^b2;
  ^while.header4:
    i32 %23 = phi [^while.header2, i32 1] [^while.header5, i32 %35] [^while.body, i32 %35];
    i1 %24 = icmp sgt i32 %1, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %25 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    i32 %26 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %27 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %26];
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %27)[i64 0][i32 %26];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    i32 %30 = add i32 %15, i32 -1;
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %30];
    i32* %32 = getelementptr &([600 * i32]* %31)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %32);
    ret i32 0;
  ^b2:
    i32 %33 = add i32 %13, i32 1;
    ubr ^while.header1;
  ^prebody:
    [600 * i32]* %34 = getelementptr &([600 * [600 * i32]]* %12)[i64 0][i32 %13];
    cbr i1 %6(prob = 0.941176), ^super.header, ^while.body1;
  ^while.header5:
    i32 %35 = add i32 %23, i32 1;
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %35];
    [600 * i32]* %37 = getelementptr &([600 * i32]* %36)[i64 -2];
    [600 * i32]* %38 = getelementptr &([600 * [600 * i32]]* %19)[i64 0][i32 %23];
    [600 * i32]* %39 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %23];
    [600 * i32]* %40 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %23];
    cbr i1 %2(prob = 0.984615), ^while.body, ^while.header4;
  ^super.header:
    cbr i1 %4(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body:
    i32 %41 = phi [^while.header5, i32 1] [^while.body, i32 %61];
    i32* %42 = getelementptr &([600 * i32]* %39)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([600 * i32]* %38)[i64 0][i32 %41];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &([600 * i32]* %37)[i64 0][i32 %41];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &([600 * i32]* %36)[i64 0][i32 %41];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &([600 * i32]* %40)[i64 0][i32 %41];
    i32* %54 = getelementptr &(i32* %53)[i64 -1];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %52, i32 %55;
    i32* %57 = getelementptr &(i32* %53)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32 %60 = sdiv i32 %59, i32 %8;
    store i32* %53 with i32 %60;
    i32 %61 = add i32 %41, i32 1;
    i1 %62 = icmp sgt i32 %1, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body, ^while.header4;
  ^while.body1 {scalar}:
    i32 %63 = phi [^prebody, i32 0] [^while.body1, i32 %65] [^while.body3, i32 %91];
    i32* %64 = getelementptr &([600 * i32]* %34)[i64 0][i32 %63];
    store i32* %64 with i32 1;
    i32 %65 = add i32 %63, i32 1;
    i1 %66 = icmp sgt i32 %0, i32 %65;
    cbr i1 %66(prob = 0.75), ^while.body1, ^b2;
  ^while.body2:
    i32 %67 = phi [^super.header, i32 0] [^while.body2, i32 %84];
    i32* %68 = getelementptr &([600 * i32]* %34)[i64 0][i32 %67];
    store i32* %68 with i32 1;
    i32* %69 = getelementptr &(i32* %68)[i64 1];
    store i32* %69 with i32 1;
    i32* %70 = getelementptr &(i32* %68)[i64 2];
    store i32* %70 with i32 1;
    i32* %71 = getelementptr &(i32* %68)[i64 3];
    store i32* %71 with i32 1;
    i32* %72 = getelementptr &(i32* %68)[i64 4];
    store i32* %72 with i32 1;
    i32* %73 = getelementptr &(i32* %68)[i64 5];
    store i32* %73 with i32 1;
    i32* %74 = getelementptr &(i32* %68)[i64 6];
    store i32* %74 with i32 1;
    i32* %75 = getelementptr &(i32* %68)[i64 7];
    store i32* %75 with i32 1;
    i32* %76 = getelementptr &(i32* %68)[i64 8];
    store i32* %76 with i32 1;
    i32* %77 = getelementptr &(i32* %68)[i64 9];
    store i32* %77 with i32 1;
    i32* %78 = getelementptr &(i32* %68)[i64 10];
    store i32* %78 with i32 1;
    i32* %79 = getelementptr &(i32* %68)[i64 11];
    store i32* %79 with i32 1;
    i32* %80 = getelementptr &(i32* %68)[i64 12];
    store i32* %80 with i32 1;
    i32* %81 = getelementptr &(i32* %68)[i64 13];
    store i32* %81 with i32 1;
    i32* %82 = getelementptr &(i32* %68)[i64 14];
    store i32* %82 with i32 1;
    i32* %83 = getelementptr &(i32* %68)[i64 15];
    store i32* %83 with i32 1;
    i32 %84 = add i32 %67, i32 16;
    i1 %85 = icmp sgt i32 %7, i32 %84;
    cbr i1 %85(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %86 = phi [^super.header, i32 0] [^while.body2, i32 %84] [^while.body3, i32 %91];
    i32* %87 = getelementptr &([600 * i32]* %34)[i64 0][i32 %86];
    store i32* %87 with i32 1;
    i32* %88 = getelementptr &(i32* %87)[i64 1];
    store i32* %88 with i32 1;
    i32* %89 = getelementptr &(i32* %87)[i64 2];
    store i32* %89 with i32 1;
    i32* %90 = getelementptr &(i32* %87)[i64 3];
    store i32* %90 with i32 1;
    i32 %91 = add i32 %86, i32 4;
    i1 %92 = icmp sgt i32 %3, i32 %91;
    cbr i1 %92(prob = 0.75), ^while.body3, ^while.body1;
}
