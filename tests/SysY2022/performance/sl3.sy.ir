internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %5 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %18];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    [600 * [600 * i32]]* %8 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %6];
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %30];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header3, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^while.header4, i32 %20];
    i32 %12 = phi [^while.header, i32 1] [^while.header4, i32 %17];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %12];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * i32]]* %13)[i64 -1];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * i32]]* %13)[i64 1];
    i1 %16 = icmp sgt i32 %1, i32 %12;
    i32 %17 = add i32 %12, i32 1;
    cbr i1 %16(prob = 0.97), ^while.header4, ^b1;
  ^b:
    i32 %18 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header3:
    [600 * i32]* %19 = getelementptr &([600 * [600 * i32]]* %8)[i64 0][i32 %9];
    cbr i1 %3(prob = 0.97), ^super.header, ^b2;
  ^while.header4:
    i32 %20 = phi [^while.header2, i32 1] [^while.header5, i32 %34] [^while.body5, i32 %34];
    i1 %21 = icmp sgt i32 %1, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %22 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %22);
    i32 %23 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %24 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %23];
    [600 * i32]* %25 = getelementptr &([600 * [600 * i32]]* %24)[i64 0][i32 %23];
    i32* %26 = getelementptr &([600 * i32]* %25)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %26);
    i32 %27 = add i32 %11, i32 -1;
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %27];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    ret i32 0;
  ^b2:
    i32 %30 = add i32 %9, i32 1;
    ubr ^while.header1;
  ^super.header:
    i32 %31 = phi [^while.header3, i32 0] [^while.body, i32 %32];
    i32 %32 = add i32 %31, i32 4;
    i1 %33 = icmp sgt i32 %0, i32 %32;
    cbr i1 %33(prob = 0.89), ^while.body, ^super.header1;
  ^while.header5:
    i32 %34 = add i32 %20, i32 1;
    [600 * i32]* %35 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %34];
    [600 * i32]* %36 = getelementptr &([600 * i32]* %35)[i64 -2];
    [600 * i32]* %37 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %20];
    [600 * i32]* %38 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %20];
    [600 * i32]* %39 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %20];
    cbr i1 %2(prob = 0.97), ^super.header2, ^while.header4;
  ^while.body:
    i32* %40 = getelementptr &([600 * i32]* %19)[i64 0][i32 %31];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &(i32* %40)[i64 1];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &(i32* %40)[i64 2];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &(i32* %40)[i64 3];
    store i32* %43 with i32 1;
    ubr ^super.header;
  ^super.header1:
    i32 %44 = phi [^super.header, i32 %31] [^while.body1, i32 %45];
    i32 %45 = add i32 %44, i32 4;
    i1 %46 = icmp sgt i32 %0, i32 %45;
    cbr i1 %46(prob = 0.89), ^while.body1, ^while.body3;
  ^super.header2:
    i32 %47 = phi [^while.header5, i32 1] [^while.body2, i32 %48];
    i32 %48 = add i32 %47, i32 4;
    i1 %49 = icmp sgt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.89), ^while.body2, ^super.header3;
  ^while.body1:
    i32* %50 = getelementptr &([600 * i32]* %19)[i64 0][i32 %44];
    store i32* %50 with i32 1;
    i32* %51 = getelementptr &(i32* %50)[i64 1];
    store i32* %51 with i32 1;
    i32* %52 = getelementptr &(i32* %50)[i64 2];
    store i32* %52 with i32 1;
    i32* %53 = getelementptr &(i32* %50)[i64 3];
    store i32* %53 with i32 1;
    ubr ^super.header1;
  ^while.body2:
    i32* %54 = getelementptr &([600 * i32]* %38)[i64 0][i32 %47];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &([600 * i32]* %37)[i64 0][i32 %47];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &([600 * i32]* %36)[i64 0][i32 %47];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &([600 * i32]* %35)[i64 0][i32 %47];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &([600 * i32]* %39)[i64 0][i32 %47];
    i32* %66 = getelementptr &(i32* %65)[i64 -1];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %64, i32 %67;
    i32* %69 = getelementptr &(i32* %65)[i64 1];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32 %72 = sdiv i32 %71, i32 %4;
    store i32* %65 with i32 %72;
    i32* %73 = getelementptr &(i32* %54)[i64 1];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %56)[i64 1];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    i32* %78 = getelementptr &(i32* %59)[i64 1];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %77, i32 %79;
    i32* %81 = getelementptr &(i32* %62)[i64 1];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %80, i32 %82;
    i32 %84 = load i32* %65;
    i32 %85 = add i32 %83, i32 %84;
    i32* %86 = getelementptr &(i32* %65)[i64 2];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %85, i32 %87;
    i32 %89 = sdiv i32 %88, i32 %4;
    store i32* %69 with i32 %89;
    i32* %90 = getelementptr &(i32* %54)[i64 2];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %56)[i64 2];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %59)[i64 2];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32* %98 = getelementptr &(i32* %62)[i64 2];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %97, i32 %99;
    i32 %101 = load i32* %69;
    i32 %102 = add i32 %100, i32 %101;
    i32* %103 = getelementptr &(i32* %65)[i64 3];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    i32 %106 = sdiv i32 %105, i32 %4;
    store i32* %86 with i32 %106;
    i32* %107 = getelementptr &(i32* %54)[i64 3];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %56)[i64 3];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %108, i32 %110;
    i32* %112 = getelementptr &(i32* %59)[i64 3];
    i32 %113 = load i32* %112;
    i32 %114 = add i32 %111, i32 %113;
    i32* %115 = getelementptr &(i32* %62)[i64 3];
    i32 %116 = load i32* %115;
    i32 %117 = add i32 %114, i32 %116;
    i32 %118 = load i32* %86;
    i32 %119 = add i32 %117, i32 %118;
    i32* %120 = getelementptr &(i32* %65)[i64 4];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %119, i32 %121;
    i32 %123 = sdiv i32 %122, i32 %4;
    store i32* %103 with i32 %123;
    ubr ^super.header2;
  ^while.body3:
    i32 %124 = phi [^super.header1, i32 %44] [^while.body3, i32 %126];
    i32* %125 = getelementptr &([600 * i32]* %19)[i64 0][i32 %124];
    store i32* %125 with i32 1;
    i32 %126 = add i32 %124, i32 1;
    i1 %127 = icmp sgt i32 %0, i32 %126;
    cbr i1 %127(prob = 0.97), ^while.body3, ^b2;
  ^super.header3:
    i32 %128 = phi [^super.header2, i32 %47] [^while.body4, i32 %129];
    i32 %129 = add i32 %128, i32 4;
    i1 %130 = icmp sgt i32 %1, i32 %129;
    cbr i1 %130(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32* %131 = getelementptr &([600 * i32]* %38)[i64 0][i32 %128];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &([600 * i32]* %37)[i64 0][i32 %128];
    i32 %134 = load i32* %133;
    i32 %135 = add i32 %132, i32 %134;
    i32* %136 = getelementptr &([600 * i32]* %36)[i64 0][i32 %128];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %135, i32 %137;
    i32* %139 = getelementptr &([600 * i32]* %35)[i64 0][i32 %128];
    i32 %140 = load i32* %139;
    i32 %141 = add i32 %138, i32 %140;
    i32* %142 = getelementptr &([600 * i32]* %39)[i64 0][i32 %128];
    i32* %143 = getelementptr &(i32* %142)[i64 -1];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %141, i32 %144;
    i32* %146 = getelementptr &(i32* %142)[i64 1];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %145, i32 %147;
    i32 %149 = sdiv i32 %148, i32 %4;
    store i32* %142 with i32 %149;
    i32* %150 = getelementptr &(i32* %131)[i64 1];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &(i32* %133)[i64 1];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %151, i32 %153;
    i32* %155 = getelementptr &(i32* %136)[i64 1];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %154, i32 %156;
    i32* %158 = getelementptr &(i32* %139)[i64 1];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    i32 %161 = load i32* %142;
    i32 %162 = add i32 %160, i32 %161;
    i32* %163 = getelementptr &(i32* %142)[i64 2];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %162, i32 %164;
    i32 %166 = sdiv i32 %165, i32 %4;
    store i32* %146 with i32 %166;
    i32* %167 = getelementptr &(i32* %131)[i64 2];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %133)[i64 2];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %168, i32 %170;
    i32* %172 = getelementptr &(i32* %136)[i64 2];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %171, i32 %173;
    i32* %175 = getelementptr &(i32* %139)[i64 2];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %174, i32 %176;
    i32 %178 = load i32* %146;
    i32 %179 = add i32 %177, i32 %178;
    i32* %180 = getelementptr &(i32* %142)[i64 3];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    i32 %183 = sdiv i32 %182, i32 %4;
    store i32* %163 with i32 %183;
    i32* %184 = getelementptr &(i32* %131)[i64 3];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %133)[i64 3];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %185, i32 %187;
    i32* %189 = getelementptr &(i32* %136)[i64 3];
    i32 %190 = load i32* %189;
    i32 %191 = add i32 %188, i32 %190;
    i32* %192 = getelementptr &(i32* %139)[i64 3];
    i32 %193 = load i32* %192;
    i32 %194 = add i32 %191, i32 %193;
    i32 %195 = load i32* %163;
    i32 %196 = add i32 %194, i32 %195;
    i32* %197 = getelementptr &(i32* %142)[i64 4];
    i32 %198 = load i32* %197;
    i32 %199 = add i32 %196, i32 %198;
    i32 %200 = sdiv i32 %199, i32 %4;
    store i32* %180 with i32 %200;
    ubr ^super.header3;
  ^while.body5:
    i32 %201 = phi [^super.header3, i32 %128] [^while.body5, i32 %221];
    i32* %202 = getelementptr &([600 * i32]* %38)[i64 0][i32 %201];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &([600 * i32]* %37)[i64 0][i32 %201];
    i32 %205 = load i32* %204;
    i32 %206 = add i32 %203, i32 %205;
    i32* %207 = getelementptr &([600 * i32]* %36)[i64 0][i32 %201];
    i32 %208 = load i32* %207;
    i32 %209 = add i32 %206, i32 %208;
    i32* %210 = getelementptr &([600 * i32]* %35)[i64 0][i32 %201];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %209, i32 %211;
    i32* %213 = getelementptr &([600 * i32]* %39)[i64 0][i32 %201];
    i32* %214 = getelementptr &(i32* %213)[i64 -1];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %212, i32 %215;
    i32* %217 = getelementptr &(i32* %213)[i64 1];
    i32 %218 = load i32* %217;
    i32 %219 = add i32 %216, i32 %218;
    i32 %220 = sdiv i32 %219, i32 %4;
    store i32* %213 with i32 %220;
    i32 %221 = add i32 %201, i32 1;
    i1 %222 = icmp sgt i32 %1, i32 %221;
    cbr i1 %222(prob = 0.97), ^while.body5, ^while.header4;
}
