internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^b3, i32 %62];
    [600 * [600 * i32]]* %4 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %3];
    [600 * [600 * i32]]* %5 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i32 %3];
    ubr ^while.body1;
^b:
    i32 %6 = add i32 %0, i32 -1;
    i1 %7 = scmp gt i32 %6, i32 1;
    cbr i1 %7(prob = 0.97), ^while.body2, ^b1;
^while.body1:
    i32 %8 = phi [^while.body, i32 0] [^b2, i32 %38];
    [600 * i32]* %9 = getelementptr &([600 * [600 * i32]]* %4)[i64 0][i32 %8];
    [600 * i32]* %10 = getelementptr &([600 * [600 * i32]]* %5)[i64 0][i32 %8];
    ubr ^while.body4;
^while.body2:
    i32 %11 = phi [^b, i32 1] [^b5, i32 %66];
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %11];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * i32]]* %12)[i64 -1];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * i32]]* %12)[i64 1];
    ubr ^while.body3;
^b1:
    i32 %15 = phi [^b, i32 1] [^b5, i32 %64];
    i32 %16 = phi [^b, i32 1] [^b5, i32 %66];
    i32 %17 = add i32 %15, i32 -1;
    i32 %18 = add i32 %16, i32 -1;
    i32 %19 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %20 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %18];
    [600 * i32]* %21 = getelementptr &([600 * [600 * i32]]* %20)[i64 0][i32 %17];
    i32* %22 = getelementptr &([600 * i32]* %21)[i64 0][i64 0];
    [600 * [600 * i32]]* %23 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %19];
    [600 * i32]* %24 = getelementptr &([600 * [600 * i32]]* %23)[i64 0][i32 %19];
    i32* %25 = getelementptr &([600 * i32]* %24)[i64 0][i64 0];
    i32* %26 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %26);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %22);
    ret i32 0;
^while.body3:
    i32 %27 = phi [^while.body2, i32 1] [^b4, i32 %64];
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %12)[i64 0][i32 %27];
    [600 * i32]* %29 = getelementptr &([600 * i32]* %28)[i64 -1];
    [600 * i32]* %30 = getelementptr &([600 * i32]* %28)[i64 1];
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %27];
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %27];
    ubr ^while.body5;
^while.body4:
    i32 %33 = phi [^while.body1, i32 0] [^while.body4, i32 %34];
    i32 %34 = add i32 %33, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %0;
    i32* %36 = getelementptr &([600 * i32]* %9)[i64 0][i32 %33];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &([600 * i32]* %10)[i64 0][i32 %33];
    store i32* %37 with i32 0;
    cbr i1 %35(prob = 0.97), ^while.body4, ^b2;
^b2:
    i32 %38 = add i32 %8, i32 1;
    i1 %39 = scmp lt i32 %38, i32 %0;
    cbr i1 %39(prob = 0.97), ^while.body1, ^b3;
^while.body5:
    i32 %40 = phi [^while.body3, i32 1] [^while.body5, i32 %41];
    i32 %41 = add i32 %40, i32 1;
    i1 %42 = scmp lt i32 %41, i32 %6;
    i32* %43 = getelementptr &([600 * i32]* %28)[i64 0][i32 %40];
    i32* %44 = getelementptr &(i32* %43)[i64 -1];
    i32* %45 = getelementptr &(i32* %43)[i64 1];
    i32* %46 = getelementptr &([600 * i32]* %29)[i64 0][i32 %40];
    i32* %47 = getelementptr &([600 * i32]* %30)[i64 0][i32 %40];
    i32* %48 = getelementptr &([600 * i32]* %31)[i64 0][i32 %40];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([600 * i32]* %32)[i64 0][i32 %40];
    i32 %51 = load i32* %50;
    i32 %52 = load i32* %46;
    i32 %53 = load i32* %47;
    i32 %54 = load i32* %44;
    i32 %55 = load i32* %45;
    i32 %56 = add i32 %54, i32 %55;
    i32 %57 = add i32 %56, i32 %49;
    i32 %58 = add i32 %57, i32 %51;
    i32 %59 = add i32 %58, i32 %52;
    i32 %60 = add i32 %59, i32 %53;
    i32 %61 = sdiv i32 %60, i32 %2;
    store i32* %43 with i32 %61;
    cbr i1 %42(prob = 0.97), ^while.body5, ^b4;
^b3:
    i32 %62 = add i32 %3, i32 1;
    i1 %63 = scmp lt i32 %62, i32 %0;
    cbr i1 %63(prob = 0.97), ^while.body, ^b;
^b4:
    i32 %64 = add i32 %27, i32 1;
    i1 %65 = scmp lt i32 %64, i32 %6;
    cbr i1 %65(prob = 0.97), ^while.body3, ^b5;
^b5:
    i32 %66 = add i32 %11, i32 1;
    i1 %67 = scmp lt i32 %66, i32 %6;
    cbr i1 %67(prob = 0.97), ^while.body2, ^b1;
}
