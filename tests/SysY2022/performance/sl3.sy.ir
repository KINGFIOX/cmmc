internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { Entry } {
^entry:
    i32* %N = alloc i32;
    i32* %f = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %f with i32 0;
    store i32* %N with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %N with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %f with i32 %1;
    call (i32) -> void @starttime(i32 13);
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* %N;
    i1 %4 = scmp lt i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header1;
^b:
    store i32* %i with i32 1;
    store i32* %j with i32 1;
    store i32* %k with i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %7 = load i32* %j;
    i32 %8 = load i32* %N;
    i1 %9 = scmp lt i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %N;
    i32 %14 = sub i32 %13, i32 1;
    i1 %15 = scmp lt i32 %12, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    store i32* %k with i32 0;
    ubr ^while.header3;
^b1:
    i32 %18 = load i32* %i;
    i32 %19 = add i32 %18, i32 1;
    store i32* %i with i32 %19;
    ubr ^while.header;
^while.body2:
    store i32* %j with i32 1;
    store i32* %k with i32 1;
    ubr ^while.header4;
^b2:
    call (i32) -> void @stoptime(i32 53);
    i32 %20 = load i32* %N;
    [600 * [600 * i32]]* %21 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0];
    [600 * i32]* %22 = getelementptr &([600 * [600 * i32]]* %21)[i64 0][i64 0];
    i32* %23 = getelementptr &([600 * i32]* %22)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %20, i32* %23);
    i32 %24 = load i32* %N;
    i32 %25 = load i32* %N;
    i32 %26 = sdiv i32 %25, i32 2;
    i64 %27 = sext i32 %26 to i64;
    [600 * [600 * i32]]* %28 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %27];
    i32 %29 = load i32* %N;
    i32 %30 = sdiv i32 %29, i32 2;
    i64 %31 = sext i32 %30 to i64;
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %28)[i64 0][i64 %31];
    i32* %33 = getelementptr &([600 * i32]* %32)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %24, i32* %33);
    i32 %34 = load i32* %N;
    i32 %35 = load i32* %i;
    i32 %36 = sub i32 %35, i32 1;
    i64 %37 = sext i32 %36 to i64;
    [600 * [600 * i32]]* %38 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %37];
    i32 %39 = load i32* %j;
    i32 %40 = sub i32 %39, i32 1;
    i64 %41 = sext i32 %40 to i64;
    [600 * i32]* %42 = getelementptr &([600 * [600 * i32]]* %38)[i64 0][i64 %41];
    i32* %43 = getelementptr &([600 * i32]* %42)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %34, i32* %43);
    ret i32 0;
^while.header3:
    i32 %44 = load i32* %k;
    i32 %45 = load i32* %N;
    i1 %46 = scmp lt i32 %44, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b3;
^while.header4:
    i32 %49 = load i32* %j;
    i32 %50 = load i32* %N;
    i32 %51 = sub i32 %50, i32 1;
    i1 %52 = scmp lt i32 %49, i32 %51;
    i32 %53 = zext i1 %52 to i32;
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body4, ^b4;
^while.body3:
    i32 %55 = load i32* %i;
    i64 %56 = sext i32 %55 to i64;
    [600 * [600 * i32]]* %57 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %56];
    i32 %58 = load i32* %j;
    i64 %59 = sext i32 %58 to i64;
    [600 * i32]* %60 = getelementptr &([600 * [600 * i32]]* %57)[i64 0][i64 %59];
    i32 %61 = load i32* %k;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = getelementptr &([600 * i32]* %60)[i64 0][i64 %62];
    store i32* %63 with i32 1;
    i32 %64 = load i32* %i;
    i64 %65 = sext i32 %64 to i64;
    [600 * [600 * i32]]* %66 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i64 %65];
    i32 %67 = load i32* %j;
    i64 %68 = sext i32 %67 to i64;
    [600 * i32]* %69 = getelementptr &([600 * [600 * i32]]* %66)[i64 0][i64 %68];
    i32 %70 = load i32* %k;
    i64 %71 = sext i32 %70 to i64;
    i32* %72 = getelementptr &([600 * i32]* %69)[i64 0][i64 %71];
    store i32* %72 with i32 0;
    i32 %73 = load i32* %k;
    i32 %74 = add i32 %73, i32 1;
    store i32* %k with i32 %74;
    ubr ^while.header3;
^b3:
    i32 %75 = load i32* %j;
    i32 %76 = add i32 %75, i32 1;
    store i32* %j with i32 %76;
    ubr ^while.header1;
^while.body4:
    store i32* %k with i32 1;
    ubr ^while.header5;
^b4:
    i32 %77 = load i32* %i;
    i32 %78 = add i32 %77, i32 1;
    store i32* %i with i32 %78;
    ubr ^while.header2;
^while.header5:
    i32 %79 = load i32* %k;
    i32 %80 = load i32* %N;
    i32 %81 = sub i32 %80, i32 1;
    i1 %82 = scmp lt i32 %79, i32 %81;
    i32 %83 = zext i1 %82 to i32;
    i1 %84 = scmp neq i32 %83, i32 0;
    cbr i1 %84(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    i32 %85 = load i32* %i;
    i64 %86 = sext i32 %85 to i64;
    [600 * [600 * i32]]* %87 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %86];
    i32 %88 = load i32* %j;
    i64 %89 = sext i32 %88 to i64;
    [600 * i32]* %90 = getelementptr &([600 * [600 * i32]]* %87)[i64 0][i64 %89];
    i32 %91 = load i32* %k;
    i64 %92 = sext i32 %91 to i64;
    i32* %93 = getelementptr &([600 * i32]* %90)[i64 0][i64 %92];
    i32 %94 = load i32* %i;
    i32 %95 = sub i32 %94, i32 1;
    i64 %96 = sext i32 %95 to i64;
    [600 * [600 * i32]]* %97 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %96];
    i32 %98 = load i32* %j;
    i64 %99 = sext i32 %98 to i64;
    [600 * i32]* %100 = getelementptr &([600 * [600 * i32]]* %97)[i64 0][i64 %99];
    i32 %101 = load i32* %k;
    i64 %102 = sext i32 %101 to i64;
    i32* %103 = getelementptr &([600 * i32]* %100)[i64 0][i64 %102];
    i32 %104 = load i32* %103;
    i32 %105 = load i32* %i;
    i32 %106 = add i32 %105, i32 1;
    i64 %107 = sext i32 %106 to i64;
    [600 * [600 * i32]]* %108 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %107];
    i32 %109 = load i32* %j;
    i64 %110 = sext i32 %109 to i64;
    [600 * i32]* %111 = getelementptr &([600 * [600 * i32]]* %108)[i64 0][i64 %110];
    i32 %112 = load i32* %k;
    i64 %113 = sext i32 %112 to i64;
    i32* %114 = getelementptr &([600 * i32]* %111)[i64 0][i64 %113];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %104, i32 %115;
    i32 %117 = load i32* %i;
    i64 %118 = sext i32 %117 to i64;
    [600 * [600 * i32]]* %119 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %118];
    i32 %120 = load i32* %j;
    i32 %121 = sub i32 %120, i32 1;
    i64 %122 = sext i32 %121 to i64;
    [600 * i32]* %123 = getelementptr &([600 * [600 * i32]]* %119)[i64 0][i64 %122];
    i32 %124 = load i32* %k;
    i64 %125 = sext i32 %124 to i64;
    i32* %126 = getelementptr &([600 * i32]* %123)[i64 0][i64 %125];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %116, i32 %127;
    i32 %129 = load i32* %i;
    i64 %130 = sext i32 %129 to i64;
    [600 * [600 * i32]]* %131 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %130];
    i32 %132 = load i32* %j;
    i32 %133 = add i32 %132, i32 1;
    i64 %134 = sext i32 %133 to i64;
    [600 * i32]* %135 = getelementptr &([600 * [600 * i32]]* %131)[i64 0][i64 %134];
    i32 %136 = load i32* %k;
    i64 %137 = sext i32 %136 to i64;
    i32* %138 = getelementptr &([600 * i32]* %135)[i64 0][i64 %137];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %128, i32 %139;
    i32 %141 = load i32* %i;
    i64 %142 = sext i32 %141 to i64;
    [600 * [600 * i32]]* %143 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %142];
    i32 %144 = load i32* %j;
    i64 %145 = sext i32 %144 to i64;
    [600 * i32]* %146 = getelementptr &([600 * [600 * i32]]* %143)[i64 0][i64 %145];
    i32 %147 = load i32* %k;
    i32 %148 = sub i32 %147, i32 1;
    i64 %149 = sext i32 %148 to i64;
    i32* %150 = getelementptr &([600 * i32]* %146)[i64 0][i64 %149];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %140, i32 %151;
    i32 %153 = load i32* %i;
    i64 %154 = sext i32 %153 to i64;
    [600 * [600 * i32]]* %155 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 %154];
    i32 %156 = load i32* %j;
    i64 %157 = sext i32 %156 to i64;
    [600 * i32]* %158 = getelementptr &([600 * [600 * i32]]* %155)[i64 0][i64 %157];
    i32 %159 = load i32* %k;
    i32 %160 = add i32 %159, i32 1;
    i64 %161 = sext i32 %160 to i64;
    i32* %162 = getelementptr &([600 * i32]* %158)[i64 0][i64 %161];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %152, i32 %163;
    i32 %165 = load i32* %f;
    i32 %166 = sdiv i32 %164, i32 %165;
    store i32* %93 with i32 %166;
    i32 %167 = load i32* %k;
    i32 %168 = add i32 %167, i32 1;
    store i32* %k with i32 %168;
    ubr ^while.header5;
^b5:
    i32 %169 = load i32* %j;
    i32 %170 = add i32 %169, i32 1;
    store i32* %j with i32 %170;
    ubr ^while.header4;
}
