internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %5 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %18];
    i1 %7 = icmp sgt i32 %0, i32 %6;
    [600 * [600 * i32]]* %8 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %6];
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %30];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header3, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^while.header4, i32 %19];
    i32 %12 = phi [^while.header, i32 1] [^while.header4, i32 %17];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %12];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * i32]]* %13)[i64 -1];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * i32]]* %13)[i64 1];
    i1 %16 = icmp sgt i32 %1, i32 %12;
    i32 %17 = add i32 %12, i32 1;
    cbr i1 %16(prob = 0.97), ^while.header4, ^b1;
  ^b:
    i32 %18 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header3:
    cbr i1 %3(prob = 0.97), ^prebody, ^b2;
  ^while.header4:
    i32 %19 = phi [^while.header2, i32 1] [^while.header5, i32 %31] [^while.body3, i32 %31];
    i1 %20 = icmp sgt i32 %1, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %21 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %21);
    i32 %22 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %23 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %22];
    [600 * i32]* %24 = getelementptr &([600 * [600 * i32]]* %23)[i64 0][i32 %22];
    i32* %25 = getelementptr &([600 * i32]* %24)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    i32 %26 = add i32 %11, i32 -1;
    [600 * i32]* %27 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %26];
    i32* %28 = getelementptr &([600 * i32]* %27)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %28);
    ret i32 0;
  ^prebody:
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %8)[i64 0][i32 %9];
    ubr ^super.header;
  ^b2:
    i32 %30 = add i32 %9, i32 1;
    ubr ^while.header1;
  ^while.header5:
    i32 %31 = add i32 %19, i32 1;
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %31];
    [600 * i32]* %33 = getelementptr &([600 * i32]* %32)[i64 -2];
    [600 * i32]* %34 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %19];
    [600 * i32]* %35 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %19];
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %19];
    cbr i1 %2(prob = 0.97), ^super.header1, ^while.header4;
  ^super.header:
    i32 %37 = phi [^prebody, i32 0] [^while.body, i32 %38];
    i32 %38 = add i32 %37, i32 4;
    i1 %39 = icmp sgt i32 %0, i32 %38;
    cbr i1 %39(prob = 0.89), ^while.body, ^while.body2;
  ^super.header1:
    i32 %40 = phi [^while.header5, i32 1] [^while.body1, i32 %41];
    i32 %41 = add i32 %40, i32 4;
    i1 %42 = icmp sgt i32 %1, i32 %41;
    cbr i1 %42(prob = 0.89), ^while.body1, ^while.body3;
  ^while.body:
    i32* %43 = getelementptr &([600 * i32]* %29)[i64 0][i32 %37];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &(i32* %43)[i64 1];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &(i32* %43)[i64 2];
    store i32* %45 with i32 1;
    i32* %46 = getelementptr &(i32* %43)[i64 3];
    store i32* %46 with i32 1;
    ubr ^super.header;
  ^while.body1:
    i32* %47 = getelementptr &([600 * i32]* %35)[i64 0][i32 %40];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([600 * i32]* %34)[i64 0][i32 %40];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([600 * i32]* %33)[i64 0][i32 %40];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %48, i32 %52;
    i32* %54 = getelementptr &([600 * i32]* %32)[i64 0][i32 %40];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &([600 * i32]* %36)[i64 0][i32 %40];
    i32* %57 = getelementptr &(i32* %56)[i64 -1];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %53, i32 %58;
    i32 %60 = add i32 %50, i32 %55;
    i32* %61 = getelementptr &(i32* %56)[i64 1];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32 %64 = add i32 %59, i32 %63;
    i32 %65 = sdiv i32 %64, i32 %4;
    store i32* %56 with i32 %65;
    i32* %66 = getelementptr &(i32* %47)[i64 1];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %49)[i64 1];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %51)[i64 1];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %54)[i64 1];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %69, i32 %73;
    i32 %75 = load i32* %56;
    i32* %76 = getelementptr &(i32* %56)[i64 2];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %74, i32 %77;
    i32 %79 = add i32 %67, i32 %71;
    i32 %80 = add i32 %75, i32 %79;
    i32 %81 = add i32 %78, i32 %80;
    i32 %82 = sdiv i32 %81, i32 %4;
    store i32* %61 with i32 %82;
    i32* %83 = getelementptr &(i32* %47)[i64 2];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %49)[i64 2];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %51)[i64 2];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %84, i32 %88;
    i32* %90 = getelementptr &(i32* %54)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = load i32* %61;
    i32 %93 = add i32 %89, i32 %92;
    i32 %94 = add i32 %86, i32 %91;
    i32* %95 = getelementptr &(i32* %56)[i64 3];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32 %98 = add i32 %93, i32 %97;
    i32 %99 = sdiv i32 %98, i32 %4;
    store i32* %76 with i32 %99;
    i32* %100 = getelementptr &(i32* %47)[i64 3];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %49)[i64 3];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %51)[i64 3];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %101, i32 %105;
    i32* %107 = getelementptr &(i32* %54)[i64 3];
    i32 %108 = load i32* %107;
    i32 %109 = load i32* %76;
    i32 %110 = add i32 %106, i32 %109;
    i32 %111 = add i32 %103, i32 %108;
    i32* %112 = getelementptr &(i32* %56)[i64 4];
    i32 %113 = load i32* %112;
    i32 %114 = add i32 %111, i32 %113;
    i32 %115 = add i32 %110, i32 %114;
    i32 %116 = sdiv i32 %115, i32 %4;
    store i32* %95 with i32 %116;
    ubr ^super.header1;
  ^while.body2:
    i32 %117 = phi [^super.header, i32 %37] [^while.body2, i32 %119];
    i32* %118 = getelementptr &([600 * i32]* %29)[i64 0][i32 %117];
    store i32* %118 with i32 1;
    i32 %119 = add i32 %117, i32 1;
    i1 %120 = icmp sgt i32 %0, i32 %119;
    cbr i1 %120(prob = 0.75), ^while.body2, ^b2;
  ^while.body3:
    i32 %121 = phi [^super.header1, i32 %40] [^while.body3, i32 %141];
    i32* %122 = getelementptr &([600 * i32]* %35)[i64 0][i32 %121];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &([600 * i32]* %34)[i64 0][i32 %121];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &([600 * i32]* %33)[i64 0][i32 %121];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %123, i32 %127;
    i32* %129 = getelementptr &([600 * i32]* %32)[i64 0][i32 %121];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &([600 * i32]* %36)[i64 0][i32 %121];
    i32* %132 = getelementptr &(i32* %131)[i64 -1];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %128, i32 %133;
    i32 %135 = add i32 %125, i32 %130;
    i32* %136 = getelementptr &(i32* %131)[i64 1];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %135, i32 %137;
    i32 %139 = add i32 %134, i32 %138;
    i32 %140 = sdiv i32 %139, i32 %4;
    store i32* %131 with i32 %140;
    i32 %141 = add i32 %121, i32 1;
    i1 %142 = icmp sgt i32 %1, i32 %141;
    cbr i1 %142(prob = 0.75), ^while.body3, ^while.header4;
}
