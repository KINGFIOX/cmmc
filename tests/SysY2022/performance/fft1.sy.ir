internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = icmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b4, i32 %8] [^if.then1, i32 %15];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = add i32 %b, i32 1;
    i1 %5 = icmp ult i32 %4, i32 3;
    cbr i1 %5(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %6 = phi [^b3, i32 0] [^if.then2, i32 %16] [^b7, i32 %21] [^if.then3, i32 %28];
    i32 %7 = mul i32 %6, i32 2;
    i32 %8 = srem i32 %7, i32 998244353;
    i32 %9 = and i32 %b, i32 -2147483647;
    i1 %10 = icmp eq i32 %9, i32 1;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b2;
  ^b5:
    i32 %11 = add i32 %b, i32 -2;
    i1 %12 = icmp ult i32 %11, i32 2;
    i32 %13 = sdiv i32 %b, i32 2;
    cbr i1 %12(prob = 0.5), ^if.then2, ^b6;
  ^if.then1:
    i32 %14 = add i32 %a, i32 %8;
    i32 %15 = srem i32 %14, i32 998244353;
    ubr ^b2;
  ^if.then2:
    i32 %16 = srem i32 %a, i32 998244353;
    ubr ^b4;
  ^b6:
    i32 %17 = add i32 %b, i32 3;
    i1 %18 = icmp ult i32 %17, i32 7;
    cbr i1 %18(prob = 0.5), ^b7, ^b8;
  ^b7:
    i32 %19 = phi [^b6, i32 0] [^if.then4, i32 %29] [^b10, i32 %34] [^if.then5, i32 %41];
    i32 %20 = mul i32 %19, i32 2;
    i32 %21 = srem i32 %20, i32 998244353;
    i32 %22 = and i32 %13, i32 -2147483647;
    i1 %23 = icmp eq i32 %22, i32 1;
    cbr i1 %23(prob = 0.5), ^if.then3, ^b4;
  ^b8:
    i32 %24 = add i32 %b, i32 -4;
    i1 %25 = icmp ult i32 %24, i32 4;
    i32 %26 = sdiv i32 %b, i32 4;
    cbr i1 %25(prob = 0.5), ^if.then4, ^b9;
  ^if.then3:
    i32 %27 = add i32 %a, i32 %21;
    i32 %28 = srem i32 %27, i32 998244353;
    ubr ^b4;
  ^if.then4:
    i32 %29 = srem i32 %a, i32 998244353;
    ubr ^b7;
  ^b9:
    i32 %30 = add i32 %26, i32 1;
    i1 %31 = icmp ult i32 %30, i32 3;
    cbr i1 %31(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %32 = phi [^b9, i32 0] [^if.then6, i32 %42] [^b13, i32 %48] [^if.then7, i32 %54];
    i32 %33 = mul i32 %32, i32 2;
    i32 %34 = srem i32 %33, i32 998244353;
    i32 %35 = and i32 %26, i32 -2147483647;
    i1 %36 = icmp eq i32 %35, i32 1;
    cbr i1 %36(prob = 0.5), ^if.then5, ^b7;
  ^b11:
    i32 %37 = add i32 %26, i32 -2;
    i1 %38 = icmp ult i32 %37, i32 2;
    i32 %39 = sdiv i32 %b, i32 8;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b12;
  ^if.then5:
    i32 %40 = add i32 %a, i32 %34;
    i32 %41 = srem i32 %40, i32 998244353;
    ubr ^b7;
  ^if.then6:
    i32 %42 = srem i32 %a, i32 998244353;
    ubr ^b10;
  ^b12:
    i32 %43 = add i32 %b, i32 15;
    i1 %44 = icmp ult i32 %43, i32 31;
    i32 %45 = sdiv i32 %b, i32 16;
    cbr i1 %44(prob = 0.5), ^b13, ^b14;
  ^b13:
    i32 %46 = phi [^b12, i32 0] [^if.then8, i32 %55] [^b16, i32 %60] [^if.then9, i32 %67];
    i32 %47 = mul i32 %46, i32 2;
    i32 %48 = srem i32 %47, i32 998244353;
    i32 %49 = and i32 %39, i32 -2147483647;
    i1 %50 = icmp eq i32 %49, i32 1;
    cbr i1 %50(prob = 0.5), ^if.then7, ^b10;
  ^b14:
    i32 %51 = add i32 %b, i32 -16;
    i1 %52 = icmp ult i32 %51, i32 16;
    cbr i1 %52(prob = 0.5), ^if.then8, ^b15;
  ^if.then7:
    i32 %53 = add i32 %a, i32 %48;
    i32 %54 = srem i32 %53, i32 998244353;
    ubr ^b10;
  ^if.then8:
    i32 %55 = srem i32 %a, i32 998244353;
    ubr ^b13;
  ^b15:
    i32 %56 = add i32 %45, i32 1;
    i1 %57 = icmp ult i32 %56, i32 3;
    cbr i1 %57(prob = 0.5), ^b16, ^b17;
  ^b16:
    i32 %58 = phi [^b15, i32 0] [^if.then10, i32 %68] [^b19, i32 %73] [^if.then11, i32 %80];
    i32 %59 = mul i32 %58, i32 2;
    i32 %60 = srem i32 %59, i32 998244353;
    i32 %61 = and i32 %45, i32 -2147483647;
    i1 %62 = icmp eq i32 %61, i32 1;
    cbr i1 %62(prob = 0.5), ^if.then9, ^b13;
  ^b17:
    i32 %63 = add i32 %45, i32 -2;
    i1 %64 = icmp ult i32 %63, i32 2;
    i32 %65 = sdiv i32 %b, i32 32;
    cbr i1 %64(prob = 0.5), ^if.then10, ^b18;
  ^if.then9:
    i32 %66 = add i32 %a, i32 %60;
    i32 %67 = srem i32 %66, i32 998244353;
    ubr ^b13;
  ^if.then10:
    i32 %68 = srem i32 %a, i32 998244353;
    ubr ^b16;
  ^b18:
    i32 %69 = add i32 %45, i32 3;
    i1 %70 = icmp ult i32 %69, i32 7;
    cbr i1 %70(prob = 0.5), ^b19, ^b20;
  ^b19:
    i32 %71 = phi [^b18, i32 0] [^if.then12, i32 %81] [^b22, i32 %86] [^if.then13, i32 %93];
    i32 %72 = mul i32 %71, i32 2;
    i32 %73 = srem i32 %72, i32 998244353;
    i32 %74 = and i32 %65, i32 -2147483647;
    i1 %75 = icmp eq i32 %74, i32 1;
    cbr i1 %75(prob = 0.5), ^if.then11, ^b16;
  ^b20:
    i32 %76 = add i32 %45, i32 -4;
    i1 %77 = icmp ult i32 %76, i32 4;
    i32 %78 = sdiv i32 %b, i32 64;
    cbr i1 %77(prob = 0.5), ^if.then12, ^b21;
  ^if.then11:
    i32 %79 = add i32 %a, i32 %73;
    i32 %80 = srem i32 %79, i32 998244353;
    ubr ^b16;
  ^if.then12:
    i32 %81 = srem i32 %a, i32 998244353;
    ubr ^b19;
  ^b21:
    i32 %82 = add i32 %78, i32 1;
    i1 %83 = icmp ult i32 %82, i32 3;
    cbr i1 %83(prob = 0.5), ^b22, ^b23;
  ^b22:
    i32 %84 = phi [^b21, i32 0] [^if.then14, i32 %94] [^b24, i32 %98] [^if.then15, i32 %102];
    i32 %85 = mul i32 %84, i32 2;
    i32 %86 = srem i32 %85, i32 998244353;
    i32 %87 = and i32 %78, i32 -2147483647;
    i1 %88 = icmp eq i32 %87, i32 1;
    cbr i1 %88(prob = 0.5), ^if.then13, ^b19;
  ^b23:
    i32 %89 = add i32 %78, i32 -2;
    i1 %90 = icmp ult i32 %89, i32 2;
    i32 %91 = sdiv i32 %b, i32 128;
    cbr i1 %90(prob = 0.5), ^if.then14, ^b24;
  ^if.then13:
    i32 %92 = add i32 %a, i32 %86;
    i32 %93 = srem i32 %92, i32 998244353;
    ubr ^b19;
  ^if.then14:
    i32 %94 = srem i32 %a, i32 998244353;
    ubr ^b22;
  ^b24:
    i32 %95 = sdiv i32 %b, i32 256;
    i32 %96 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %95);
    i32 %97 = mul i32 %96, i32 2;
    i32 %98 = srem i32 %97, i32 998244353;
    i32 %99 = and i32 %91, i32 -2147483647;
    i1 %100 = icmp eq i32 %99, i32 1;
    cbr i1 %100(prob = 0.5), ^if.then15, ^b22;
  ^if.then15:
    i32 %101 = add i32 %a, i32 %98;
    i32 %102 = srem i32 %101, i32 998244353;
    ubr ^b22;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = and i32 %b, i32 -2147483647;
    i1 %5 = icmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @a, align 8;
internal [2097152 * i32]* @b, align 8;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> void {
  ^entry:
    i1 %0 = icmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b, ^succ;
  ^succ:
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    i32* %3 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %1];
    i32 %4 = add i32 %n, i32 -3;
    i1 %5 = icmp sgt i32 %n, i32 0;
    cbr i1 %5(prob = 0.984615), ^b1, ^b2;
  ^b:
    ret;
  ^b1:
    i32 %6 = phi [^succ, i32 0] [^b3, i32 %20];
    i32 %7 = add i32 %begin_pos, i32 %6;
    i32* %8 = getelementptr &(i32* %arr)[i32 %7];
    i32 %9 = and i32 %6, i32 1;
    i1 %10 = icmp eq i32 %9, i32 0;
    i32 %11 = sdiv i32 %6, i32 2;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32 %12 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %12);
    i32 %13 = add i32 %begin_pos, i32 %1;
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %13, i32 %1, i32 %12);
    i1 %14 = icmp sgt i32 %1, i32 0;
    cbr i1 %14(prob = 0.984615), ^prebody, ^b;
  ^if.then:
    i32* %15 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %11];
    i32 %16 = load i32* %8;
    store i32* %15 with i32 %16;
    ubr ^b3;
  ^prebody:
    i32* %17 = getelementptr &(i32* %arr)[i32 %1];
    ubr ^while.body;
  ^if.else:
    i32* %18 = getelementptr &(i32* %3)[i32 %11];
    i32 %19 = load i32* %8;
    store i32* %18 with i32 %19;
    ubr ^b3;
  ^b3:
    i32 %20 = add i32 %6, i32 1;
    i1 %21 = icmp sgt i32 %n, i32 %20;
    cbr i1 %21(prob = 0.984615), ^b1, ^b4;
  ^while.body:
    i32 %22 = phi [^prebody, i32 0] [^while.body, i32 %36];
    i32 %23 = phi [^prebody, i32 1] [^while.body, i32 %35];
    i32 %24 = add i32 %begin_pos, i32 %22;
    i32* %25 = getelementptr &(i32* %arr)[i32 %24];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %17)[i32 %24];
    i32 %28 = load i32* %27;
    i32 %29 = call (i32, i32) -> i32 @multiply(i32 %23, i32 %28);
    i32 %30 = add i32 %26, i32 %29;
    i32 %31 = srem i32 %30, i32 998244353;
    store i32* %25 with i32 %31;
    i32 %32 = sub i32 %26, i32 %29;
    i32 %33 = add i32 %32, i32 998244353;
    i32 %34 = srem i32 %33, i32 998244353;
    store i32* %27 with i32 %34;
    i32 %35 = call (i32, i32) -> i32 @multiply(i32 %23, i32 %w);
    i32 %36 = add i32 %22, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.984615), ^while.body, ^b;
  ^b4:
    i32* %38 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %39 = icmp sgt i32 %n, i32 3;
    cbr i1 %39(prob = 0.941176), ^prebody1, ^scalar.header;
  ^prebody1:
    i32 %40 = add i32 %begin_pos, i32 1;
    i32* %41 = getelementptr &(i32* %arr)[i32 %40];
    i32* %42 = getelementptr &(i32* %41)[i64 1];
    i32* %43 = getelementptr &(i32* %41)[i64 2];
    ubr ^while.body1;
  ^scalar.header:
    i32 %44 = phi [^b4, i32 0] [^while.body1, i32 %60];
    i1 %45 = icmp sgt i32 %n, i32 %44;
    cbr i1 %45(prob = 0.75), ^while.body2, ^b2;
  ^while.body1:
    i32 %46 = phi [^prebody1, i32 0] [^while.body1, i32 %60];
    i32 %47 = add i32 %begin_pos, i32 %46;
    i32* %48 = getelementptr &(i32* %arr)[i32 %47];
    i32* %49 = getelementptr &(i32* %38)[i32 %46];
    i32 %50 = load i32* %49;
    store i32* %48 with i32 %50;
    i32* %51 = getelementptr &(i32* %49)[i64 1];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %41)[i32 %46];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %49)[i64 2];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %42)[i32 %46];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %49)[i64 3];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %43)[i32 %46];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %46, i32 4;
    i1 %61 = icmp sgt i32 %4, i32 %60;
    cbr i1 %61(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %62 = phi [^scalar.header, i32 %44] [^while.body2, i32 %67];
    i32 %63 = add i32 %begin_pos, i32 %62;
    i32* %64 = getelementptr &(i32* %arr)[i32 %63];
    i32* %65 = getelementptr &(i32* %38)[i32 %62];
    i32 %66 = load i32* %65;
    store i32* %64 with i32 %66;
    i32 %67 = add i32 %62, i32 1;
    i1 %68 = icmp sgt i32 %n, i32 %67;
    cbr i1 %68(prob = 0.75), ^while.body2, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [2097152 * i32]* %3 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %4 = getelementptr &([2097152 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    call (i32) -> void @starttime(i32 60);
    i32 %6 = add i32 %2, i32 -1;
    i32 %7 = add i32 %5, i32 %6;
    i1 %8 = icmp sgt i32 %7, i32 1;
    cbr i1 %8(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = icmp sgt i32 %7, i32 %10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %14);
    call (i32*, i32, i32, i32) -> void @fft(i32* %4, i32 0, i32 %12, i32 %14);
    i1 %15 = icmp sgt i32 %12, i32 0;
    cbr i1 %15(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* %3)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = icmp sgt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b1;
  ^b1:
    i32 %24 = sub i32 998244352, i32 %13;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %25);
    cbr i1 %15(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    i32 %26 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %27 = phi [^prebody, i32 0] [^while.body2, i32 %31];
    i32* %28 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %26);
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %27, i32 1;
    i1 %32 = icmp sgt i32 %12, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.body2, ^b2;
}
