internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = mul i32 %5, i32 2;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = srem i32 %b, i32 2;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = srem i32 %b, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
  ^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %1 = sdiv i32 %n, i32 2;
    [2097152 * i32]* %2 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    ubr ^while.header;
  ^b1:
    ret i32 undef;
  ^while.header:
    i32 %3 = phi [^b, i32 0] [^b4, i32 %27];
    i1 %4 = scmp lt i32 %3, i32 %n;
    cbr i1 %4(prob = 0.97), ^while.body, ^b2;
  ^while.body:
    i32 %5 = and i32 %3, i32 1;
    i1 %6 = scmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32* %7 = getelementptr &([2097152 * i32]* %2)[i64 0][i64 0];
    i1 %8 = scmp gt i32 %n, i32 0;
    cbr i1 %8(prob = 0.97), ^super.header, ^b3;
  ^if.then:
    i32 %9 = add i32 %3, i32 %begin_pos;
    i32* %10 = getelementptr &(i32* %arr)[i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = sdiv i32 %3, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %12];
    store i32* %13 with i32 %11;
    ubr ^b4;
  ^if.else:
    i32 %14 = sdiv i32 %3, i32 2;
    i32 %15 = add i32 %1, i32 %14;
    i32* %16 = getelementptr &([2097152 * i32]* %2)[i64 0][i32 %15];
    i32 %17 = add i32 %3, i32 %begin_pos;
    i32* %18 = getelementptr &(i32* %arr)[i32 %17];
    i32 %19 = load i32* %18;
    store i32* %16 with i32 %19;
    ubr ^b4;
  ^b3:
    i32 %20 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    i32 %21 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %20);
    i32 %22 = add i32 %1, i32 %begin_pos;
    i32 %23 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %22, i32 %1, i32 %20);
    ubr ^while.header1;
  ^super.header:
    i32 %24 = phi [^b2, i32 0] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = scmp lt i32 %25, i32 %n;
    cbr i1 %26(prob = 0.89), ^while.body1, ^super.header1;
  ^b4:
    i32 %27 = add i32 %3, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %28 = add i32 %24, i32 %begin_pos;
    i32* %29 = getelementptr &(i32* %arr)[i32 %28];
    i32* %30 = getelementptr &(i32* %7)[i32 %24];
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %24, i32 1;
    i32 %33 = add i32 %32, i32 %begin_pos;
    i32* %34 = getelementptr &(i32* %arr)[i32 %33];
    i32* %35 = getelementptr &(i32* %30)[i64 1];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    i32 %37 = add i32 %24, i32 2;
    i32 %38 = add i32 %37, i32 %begin_pos;
    i32* %39 = getelementptr &(i32* %arr)[i32 %38];
    i32* %40 = getelementptr &(i32* %30)[i64 2];
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    i32 %42 = add i32 %24, i32 3;
    i32 %43 = add i32 %42, i32 %begin_pos;
    i32* %44 = getelementptr &(i32* %arr)[i32 %43];
    i32* %45 = getelementptr &(i32* %30)[i64 3];
    i32 %46 = load i32* %45;
    store i32* %44 with i32 %46;
    ubr ^super.header;
  ^super.header1:
    i32 %47 = phi [^super.header, i32 %24] [^while.body2, i32 %48];
    i32 %48 = add i32 %47, i32 4;
    i1 %49 = scmp lt i32 %48, i32 %n;
    cbr i1 %49(prob = 0.89), ^while.body2, ^super.header2;
  ^while.header1:
    i32 %50 = phi [^b3, i32 1] [^while.body3, i32 %85];
    i32 %51 = phi [^b3, i32 0] [^while.body3, i32 %86];
    i1 %52 = scmp lt i32 %51, i32 %1;
    cbr i1 %52(prob = 0.97), ^while.body3, ^b1;
  ^while.body2:
    i32 %53 = add i32 %47, i32 %begin_pos;
    i32* %54 = getelementptr &(i32* %arr)[i32 %53];
    i32* %55 = getelementptr &(i32* %7)[i32 %47];
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32 %57 = add i32 %47, i32 1;
    i32 %58 = add i32 %57, i32 %begin_pos;
    i32* %59 = getelementptr &(i32* %arr)[i32 %58];
    i32* %60 = getelementptr &(i32* %55)[i64 1];
    i32 %61 = load i32* %60;
    store i32* %59 with i32 %61;
    i32 %62 = add i32 %47, i32 2;
    i32 %63 = add i32 %62, i32 %begin_pos;
    i32* %64 = getelementptr &(i32* %arr)[i32 %63];
    i32* %65 = getelementptr &(i32* %55)[i64 2];
    i32 %66 = load i32* %65;
    store i32* %64 with i32 %66;
    i32 %67 = add i32 %47, i32 3;
    i32 %68 = add i32 %67, i32 %begin_pos;
    i32* %69 = getelementptr &(i32* %arr)[i32 %68];
    i32* %70 = getelementptr &(i32* %55)[i64 3];
    i32 %71 = load i32* %70;
    store i32* %69 with i32 %71;
    ubr ^super.header1;
  ^while.body3:
    i32 %72 = add i32 %51, i32 %begin_pos;
    i32* %73 = getelementptr &(i32* %arr)[i32 %72];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %51, i32 %1;
    i32 %76 = add i32 %75, i32 %begin_pos;
    i32* %77 = getelementptr &(i32* %arr)[i32 %76];
    i32 %78 = load i32* %77;
    i32 %79 = call (i32, i32) -> i32 @multiply(i32 %50, i32 %78);
    i32 %80 = add i32 %74, i32 %79;
    i32 %81 = srem i32 %80, i32 998244353;
    store i32* %73 with i32 %81;
    i32 %82 = sub i32 %74, i32 %79;
    i32 %83 = add i32 %82, i32 998244353;
    i32 %84 = srem i32 %83, i32 998244353;
    store i32* %77 with i32 %84;
    i32 %85 = call (i32, i32) -> i32 @multiply(i32 %50, i32 %w);
    i32 %86 = add i32 %51, i32 1;
    ubr ^while.header1;
  ^super.header2:
    i32 %87 = phi [^super.header1, i32 %47] [^while.body4, i32 %88];
    i32 %88 = add i32 %87, i32 4;
    i1 %89 = scmp lt i32 %88, i32 %n;
    cbr i1 %89(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %90 = add i32 %87, i32 %begin_pos;
    i32* %91 = getelementptr &(i32* %arr)[i32 %90];
    i32* %92 = getelementptr &(i32* %7)[i32 %87];
    i32 %93 = load i32* %92;
    store i32* %91 with i32 %93;
    i32 %94 = add i32 %87, i32 1;
    i32 %95 = add i32 %94, i32 %begin_pos;
    i32* %96 = getelementptr &(i32* %arr)[i32 %95];
    i32* %97 = getelementptr &(i32* %92)[i64 1];
    i32 %98 = load i32* %97;
    store i32* %96 with i32 %98;
    i32 %99 = add i32 %87, i32 2;
    i32 %100 = add i32 %99, i32 %begin_pos;
    i32* %101 = getelementptr &(i32* %arr)[i32 %100];
    i32* %102 = getelementptr &(i32* %92)[i64 2];
    i32 %103 = load i32* %102;
    store i32* %101 with i32 %103;
    i32 %104 = add i32 %87, i32 3;
    i32 %105 = add i32 %104, i32 %begin_pos;
    i32* %106 = getelementptr &(i32* %arr)[i32 %105];
    i32* %107 = getelementptr &(i32* %92)[i64 3];
    i32 %108 = load i32* %107;
    store i32* %106 with i32 %108;
    ubr ^super.header2;
  ^while.body5:
    i32 %109 = phi [^super.header2, i32 %87] [^while.body5, i32 %114];
    i32 %110 = add i32 %begin_pos, i32 %109;
    i32* %111 = getelementptr &(i32* %arr)[i32 %110];
    i32* %112 = getelementptr &(i32* %7)[i32 %109];
    i32 %113 = load i32* %112;
    store i32* %111 with i32 %113;
    i32 %114 = add i32 %109, i32 1;
    i1 %115 = scmp lt i32 %114, i32 %n;
    cbr i1 %115(prob = 0.97), ^while.body5, ^b3;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    [2097152 * i32]* %4 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %5 = getelementptr &([2097152 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = scmp gt i32 %7, i32 1;
    call (i32) -> void @starttime(i32 60);
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = scmp lt i32 %10, i32 %7;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    i32 %15 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %14);
    i32 %16 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %5, i32 0, i32 %12, i32 %14);
    i1 %17 = scmp gt i32 %12, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^while.body1, i32 %24];
    i32* %19 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([2097152 * i32]* %4)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i32 %23 = call (i32, i32) -> i32 @multiply(i32 %20, i32 %22);
    store i32* %19 with i32 %23;
    i32 %24 = add i32 %18, i32 1;
    i1 %25 = scmp lt i32 %24, i32 %12;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
  ^b1:
    i32 %26 = sub i32 998244352, i32 %13;
    i32 %27 = call (i32, i32) -> i32 @power(i32 3, i32 %26);
    i32 %28 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %1, i32 0, i32 %12, i32 %27);
    cbr i1 %17(prob = 0.97), ^indirect, ^b2;
  ^indirect:
    i32 %29 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %30 = phi [^indirect, i32 0] [^while.body2, i32 %34];
    i32* %31 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = call (i32, i32) -> i32 @multiply(i32 %32, i32 %29);
    store i32* %31 with i32 %33;
    i32 %34 = add i32 %30, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %12;
    cbr i1 %35(prob = 0.97), ^while.body2, ^b2;
}
