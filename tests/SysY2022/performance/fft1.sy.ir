internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i1 %1 = icmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
  ^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b4, i32 %8] [^if.then1, i32 %15];
    ret i32 %2;
  ^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
  ^b3:
    i32 %4 = add i32 %b, i32 1;
    i1 %5 = icmp ult i32 %4, i32 3;
    cbr i1 %5(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %6 = phi [^b3, i32 0] [^if.then2, i32 %16] [^b7, i32 %21] [^if.then3, i32 %28];
    i32 %7 = mul i32 %6, i32 2;
    i32 %8 = srem i32 %7, i32 998244353;
    i32 %9 = and i32 %b, i32 -2147483647;
    i1 %10 = icmp eq i32 %9, i32 1;
    cbr i1 %10(prob = 0.5), ^if.then1, ^b2;
  ^b5:
    i32 %11 = add i32 %b, i32 -2;
    i1 %12 = icmp ult i32 %11, i32 2;
    i32 %13 = sdiv i32 %b, i32 2;
    cbr i1 %12(prob = 0.5), ^if.then2, ^b6;
  ^if.then1:
    i32 %14 = add i32 %a, i32 %8;
    i32 %15 = srem i32 %14, i32 998244353;
    ubr ^b2;
  ^if.then2:
    i32 %16 = srem i32 %a, i32 998244353;
    ubr ^b4;
  ^b6:
    i32 %17 = add i32 %b, i32 3;
    i1 %18 = icmp ult i32 %17, i32 7;
    cbr i1 %18(prob = 0.5), ^b7, ^b8;
  ^b7:
    i32 %19 = phi [^b6, i32 0] [^if.then4, i32 %29] [^b10, i32 %34] [^if.then5, i32 %41];
    i32 %20 = mul i32 %19, i32 2;
    i32 %21 = srem i32 %20, i32 998244353;
    i32 %22 = and i32 %13, i32 -2147483647;
    i1 %23 = icmp eq i32 %22, i32 1;
    cbr i1 %23(prob = 0.5), ^if.then3, ^b4;
  ^b8:
    i32 %24 = add i32 %b, i32 -4;
    i1 %25 = icmp ult i32 %24, i32 4;
    i32 %26 = sdiv i32 %b, i32 4;
    cbr i1 %25(prob = 0.5), ^if.then4, ^b9;
  ^if.then3:
    i32 %27 = add i32 %a, i32 %21;
    i32 %28 = srem i32 %27, i32 998244353;
    ubr ^b4;
  ^if.then4:
    i32 %29 = srem i32 %a, i32 998244353;
    ubr ^b7;
  ^b9:
    i32 %30 = add i32 %26, i32 1;
    i1 %31 = icmp ult i32 %30, i32 3;
    cbr i1 %31(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %32 = phi [^b9, i32 0] [^if.then6, i32 %42] [^b12, i32 %46] [^if.then7, i32 %50];
    i32 %33 = mul i32 %32, i32 2;
    i32 %34 = srem i32 %33, i32 998244353;
    i32 %35 = and i32 %26, i32 -2147483647;
    i1 %36 = icmp eq i32 %35, i32 1;
    cbr i1 %36(prob = 0.5), ^if.then5, ^b7;
  ^b11:
    i32 %37 = add i32 %26, i32 -2;
    i1 %38 = icmp ult i32 %37, i32 2;
    i32 %39 = sdiv i32 %b, i32 8;
    cbr i1 %38(prob = 0.5), ^if.then6, ^b12;
  ^if.then5:
    i32 %40 = add i32 %a, i32 %34;
    i32 %41 = srem i32 %40, i32 998244353;
    ubr ^b7;
  ^if.then6:
    i32 %42 = srem i32 %a, i32 998244353;
    ubr ^b10;
  ^b12:
    i32 %43 = sdiv i32 %b, i32 16;
    i32 %44 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %43);
    i32 %45 = mul i32 %44, i32 2;
    i32 %46 = srem i32 %45, i32 998244353;
    i32 %47 = and i32 %39, i32 -2147483647;
    i1 %48 = icmp eq i32 %47, i32 1;
    cbr i1 %48(prob = 0.5), ^if.then7, ^b10;
  ^if.then7:
    i32 %49 = add i32 %a, i32 %46;
    i32 %50 = srem i32 %49, i32 998244353;
    ubr ^b10;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i1 %0 = icmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = and i32 %b, i32 -2147483647;
    i1 %5 = icmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
  ^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
  ^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp, align 8 { Flexible };
internal [2097152 * i32]* @a, align 8;
internal [2097152 * i32]* @b, align 8;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> void {
  ^entry:
    i1 %0 = icmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
  ^while.header:
    i32 %1 = sdiv i32 %n, i32 2;
    i1 %2 = icmp sgt i32 %n, i32 0;
    [2097152 * i32]* %3 = ptrcast [2097152 * i32]* @temp to [2097152 * i32]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^b1;
  ^b:
    ret;
  ^while.body:
    i32 %4 = phi [^while.header, i32 0] [^b2, i32 %35];
    i32 %5 = add i32 %begin_pos, i32 %4;
    i32* %6 = getelementptr &(i32* %arr)[i32 %5];
    i32 %7 = and i32 %4, i32 1;
    i1 %8 = icmp eq i32 %7, i32 0;
    i32 %9 = sdiv i32 %4, i32 2;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else;
  ^b1:
    i32 %10 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %10);
    i32 %11 = add i32 %begin_pos, i32 %1;
    call (i32*, i32, i32, i32) -> void @fft(i32* %arr, i32 %11, i32 %1, i32 %10);
    i1 %12 = icmp sgt i32 %1, i32 0;
    cbr i1 %12(prob = 0.984615), ^while.body1, ^b;
  ^if.then:
    i32* %13 = getelementptr &([2097152 * i32]* %3)[i64 0][i32 %9];
    i32 %14 = load i32* %6;
    store i32* %13 with i32 %14;
    ubr ^b2;
  ^if.else:
    i32 %15 = add i32 %1, i32 %9;
    i32* %16 = getelementptr &([2097152 * i32]* %3)[i64 0][i32 %15];
    i32 %17 = load i32* %6;
    store i32* %16 with i32 %17;
    ubr ^b2;
  ^while.body1:
    i32 %18 = phi [^b1, i32 0] [^while.body1, i32 %33];
    i32 %19 = phi [^b1, i32 1] [^while.body1, i32 %32];
    i32 %20 = add i32 %begin_pos, i32 %18;
    i32* %21 = getelementptr &(i32* %arr)[i32 %20];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %11, i32 %18;
    i32* %24 = getelementptr &(i32* %arr)[i32 %23];
    i32 %25 = load i32* %24;
    i32 %26 = call (i32, i32) -> i32 @multiply(i32 %19, i32 %25);
    i32 %27 = add i32 %22, i32 %26;
    i32 %28 = srem i32 %27, i32 998244353;
    store i32* %21 with i32 %28;
    i32 %29 = sub i32 %22, i32 %26;
    i32 %30 = add i32 %29, i32 998244353;
    i32 %31 = srem i32 %30, i32 998244353;
    store i32* %24 with i32 %31;
    i32 %32 = call (i32, i32) -> i32 @multiply(i32 %19, i32 %w);
    i32 %33 = add i32 %18, i32 1;
    i1 %34 = icmp sgt i32 %1, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body1, ^b;
  ^b2:
    i32 %35 = add i32 %4, i32 1;
    i1 %36 = icmp sgt i32 %n, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.body, ^super.header;
  ^super.header:
    i32* %37 = getelementptr &([2097152 * i32]* %3)[i64 0][i64 0];
    i1 %38 = icmp sgt i32 %n, i32 4;
    cbr i1 %38(prob = 0.941176), ^prebody, ^while.body2;
  ^prebody:
    i32 %39 = add i32 %begin_pos, i32 1;
    i32 %40 = add i32 %begin_pos, i32 2;
    i32 %41 = add i32 %begin_pos, i32 3;
    i32 %42 = add i32 %n, i32 -4;
    ubr ^while.body3;
  ^while.body2 {scalar}:
    i32 %43 = phi [^super.header, i32 0] [^while.body2, i32 %48] [^while.body3, i32 %67];
    i32 %44 = add i32 %begin_pos, i32 %43;
    i32* %45 = getelementptr &(i32* %arr)[i32 %44];
    i32* %46 = getelementptr &(i32* %37)[i32 %43];
    i32 %47 = load i32* %46;
    store i32* %45 with i32 %47;
    i32 %48 = add i32 %43, i32 1;
    i1 %49 = icmp sgt i32 %n, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body2, ^b1;
  ^while.body3:
    i32 %50 = phi [^prebody, i32 0] [^while.body3, i32 %67];
    i32 %51 = add i32 %begin_pos, i32 %50;
    i32* %52 = getelementptr &(i32* %arr)[i32 %51];
    i32* %53 = getelementptr &(i32* %37)[i32 %50];
    i32 %54 = load i32* %53;
    store i32* %52 with i32 %54;
    i32* %55 = getelementptr &(i32* %53)[i64 1];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %39, i32 %50;
    i32* %58 = getelementptr &(i32* %arr)[i32 %57];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %40, i32 %50;
    i32* %62 = getelementptr &(i32* %arr)[i32 %61];
    store i32* %62 with i32 %60;
    i32* %63 = getelementptr &(i32* %53)[i64 3];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %41, i32 %50;
    i32* %66 = getelementptr &(i32* %arr)[i32 %65];
    store i32* %66 with i32 %64;
    i32 %67 = add i32 %50, i32 4;
    i1 %68 = icmp sgt i32 %42, i32 %67;
    cbr i1 %68(prob = 0.941176), ^while.body3, ^while.body2;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2097152 * i32]* %0 = ptrcast [2097152 * i32]* @a to [2097152 * i32]*;
    i32* %1 = getelementptr &([2097152 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    [2097152 * i32]* %3 = ptrcast [2097152 * i32]* @b to [2097152 * i32]*;
    i32* %4 = getelementptr &([2097152 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    call (i32) -> void @starttime(i32 60);
    i32 %6 = add i32 %2, i32 -1;
    i32 %7 = add i32 %5, i32 %6;
    i1 %8 = icmp sgt i32 %7, i32 1;
    cbr i1 %8(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %10 = mul i32 %9, i32 2;
    i1 %11 = icmp sgt i32 %7, i32 %10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %12 = phi [^entry, i32 1] [^while.body, i32 %10];
    i32 %13 = sdiv i32 998244352, i32 %12;
    i32 %14 = call (i32, i32) -> i32 @power(i32 3, i32 %13);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %14);
    call (i32*, i32, i32, i32) -> void @fft(i32* %4, i32 0, i32 %12, i32 %14);
    i1 %15 = icmp sgt i32 %12, i32 0;
    cbr i1 %15(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* %3)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = icmp sgt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^b1;
  ^b1:
    i32 %24 = sub i32 998244352, i32 %13;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    call (i32*, i32, i32, i32) -> void @fft(i32* %1, i32 0, i32 %12, i32 %25);
    cbr i1 %15(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    i32 %26 = call (i32, i32) -> i32 @power(i32 %12, i32 998244351);
    ubr ^while.body2;
  ^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %7, i32* %1);
    ret i32 0;
  ^while.body2:
    i32 %27 = phi [^prebody, i32 0] [^while.body2, i32 %31];
    i32* %28 = getelementptr &([2097152 * i32]* %0)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %26);
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %27, i32 1;
    i1 %32 = icmp sgt i32 %12, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.body2, ^b2;
}
