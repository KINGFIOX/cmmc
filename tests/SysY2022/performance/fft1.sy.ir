internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %1 = scmp eq i32 %b, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %2 = phi [^entry, i32 0] [^if.then, i32 %3] [^b3, i32 %7] [^if.then1, i32 %11];
    ret i32 %2;
^if.then:
    i32 %3 = srem i32 %a, i32 998244353;
    ubr ^b2;
^b3:
    i32 %4 = sdiv i32 %b, i32 2;
    i32 %5 = call (i32, i32) -> i32 @multiply(i32 %a, i32 %4);
    i32 %6 = shl i32 %5, i32 1;
    i32 %7 = srem i32 %6, i32 998244353;
    i32 %8 = srem i32 %b, i32 2;
    i1 %9 = scmp eq i32 %8, i32 1;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %10 = add i32 %a, i32 %7;
    i32 %11 = srem i32 %10, i32 998244353;
    ubr ^b2;
}
internal func @power(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %1 = sdiv i32 %b, i32 2;
    i32 %2 = call (i32, i32) -> i32 @power(i32 %a, i32 %1);
    i32 %3 = call (i32, i32) -> i32 @multiply(i32 %2, i32 %2);
    i32 %4 = srem i32 %b, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %6 = phi [^entry, i32 1] [^b1, i32 %3] [^if.then, i32 %7];
    ret i32 %6;
^if.then:
    i32 %7 = call (i32, i32) -> i32 @multiply(i32 %3, i32 %a);
    ubr ^b2;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    i32 %1 = sdiv i32 %n, i32 2;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 0] [^b3, i32 %26];
    i1 %3 = scmp lt i32 %2, i32 %n;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^b:
    ret i32 undef;
^while.body:
    i32 %4 = srem i32 %2, i32 2;
    i1 %5 = scmp eq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
^b1:
    i32* %6 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i1 %7 = scmp gt i32 %n, i32 0;
    cbr i1 %7(prob = 0.97), ^super.header, ^b2;
^if.then:
    i32 %8 = sdiv i32 %2, i32 2;
    i32* %9 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %8];
    i32 %10 = add i32 %2, i32 %begin_pos;
    i32* %11 = getelementptr &(i32* %arr)[i32 %10];
    i32 %12 = load i32* %11;
    store i32* %9 with i32 %12;
    ubr ^b3;
^if.else:
    i32 %13 = sdiv i32 %2, i32 2;
    i32 %14 = add i32 %1, i32 %13;
    i32* %15 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %14];
    i32 %16 = add i32 %2, i32 %begin_pos;
    i32* %17 = getelementptr &(i32* %arr)[i32 %16];
    i32 %18 = load i32* %17;
    store i32* %15 with i32 %18;
    ubr ^b3;
^b2:
    i32 %19 = call (i32, i32) -> i32 @multiply(i32 %w, i32 %w);
    i32 %20 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %begin_pos, i32 %1, i32 %19);
    i32 %21 = add i32 %1, i32 %begin_pos;
    i32 %22 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %arr, i32 %21, i32 %1, i32 %19);
    ubr ^while.header1;
^super.header:
    i32 %23 = phi [^b1, i32 0] [^while.body1, i32 %24];
    i32 %24 = add i32 %23, i32 16;
    i1 %25 = scmp lt i32 %24, i32 %n;
    cbr i1 %25(prob = 0.67), ^while.body1, ^super.header1;
^b3:
    i32 %26 = add i32 %2, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %27 = add i32 %23, i32 %begin_pos;
    i32* %28 = getelementptr &(i32* %arr)[i32 %27];
    i32* %29 = getelementptr &(i32* %6)[i32 %23];
    i32 %30 = load i32* %29;
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %23, i32 1;
    i32 %32 = add i32 %31, i32 %begin_pos;
    i32* %33 = getelementptr &(i32* %arr)[i32 %32];
    i32* %34 = getelementptr &(i32* %29)[i64 1];
    i32 %35 = load i32* %34;
    store i32* %33 with i32 %35;
    i32 %36 = add i32 %23, i32 2;
    i32 %37 = add i32 %36, i32 %begin_pos;
    i32* %38 = getelementptr &(i32* %arr)[i32 %37];
    i32* %39 = getelementptr &(i32* %29)[i64 2];
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32 %41 = add i32 %23, i32 3;
    i32 %42 = add i32 %41, i32 %begin_pos;
    i32* %43 = getelementptr &(i32* %arr)[i32 %42];
    i32* %44 = getelementptr &(i32* %29)[i64 3];
    i32 %45 = load i32* %44;
    store i32* %43 with i32 %45;
    i32 %46 = add i32 %23, i32 4;
    i32 %47 = add i32 %46, i32 %begin_pos;
    i32* %48 = getelementptr &(i32* %arr)[i32 %47];
    i32* %49 = getelementptr &(i32* %29)[i64 4];
    i32 %50 = load i32* %49;
    store i32* %48 with i32 %50;
    i32 %51 = add i32 %23, i32 5;
    i32 %52 = add i32 %51, i32 %begin_pos;
    i32* %53 = getelementptr &(i32* %arr)[i32 %52];
    i32* %54 = getelementptr &(i32* %29)[i64 5];
    i32 %55 = load i32* %54;
    store i32* %53 with i32 %55;
    i32 %56 = add i32 %23, i32 6;
    i32 %57 = add i32 %56, i32 %begin_pos;
    i32* %58 = getelementptr &(i32* %arr)[i32 %57];
    i32* %59 = getelementptr &(i32* %29)[i64 6];
    i32 %60 = load i32* %59;
    store i32* %58 with i32 %60;
    i32 %61 = add i32 %23, i32 7;
    i32 %62 = add i32 %61, i32 %begin_pos;
    i32* %63 = getelementptr &(i32* %arr)[i32 %62];
    i32* %64 = getelementptr &(i32* %29)[i64 7];
    i32 %65 = load i32* %64;
    store i32* %63 with i32 %65;
    i32 %66 = add i32 %23, i32 8;
    i32 %67 = add i32 %66, i32 %begin_pos;
    i32* %68 = getelementptr &(i32* %arr)[i32 %67];
    i32* %69 = getelementptr &(i32* %29)[i64 8];
    i32 %70 = load i32* %69;
    store i32* %68 with i32 %70;
    i32 %71 = add i32 %23, i32 9;
    i32 %72 = add i32 %71, i32 %begin_pos;
    i32* %73 = getelementptr &(i32* %arr)[i32 %72];
    i32* %74 = getelementptr &(i32* %29)[i64 9];
    i32 %75 = load i32* %74;
    store i32* %73 with i32 %75;
    i32 %76 = add i32 %23, i32 10;
    i32 %77 = add i32 %76, i32 %begin_pos;
    i32* %78 = getelementptr &(i32* %arr)[i32 %77];
    i32* %79 = getelementptr &(i32* %29)[i64 10];
    i32 %80 = load i32* %79;
    store i32* %78 with i32 %80;
    i32 %81 = add i32 %23, i32 11;
    i32 %82 = add i32 %81, i32 %begin_pos;
    i32* %83 = getelementptr &(i32* %arr)[i32 %82];
    i32* %84 = getelementptr &(i32* %29)[i64 11];
    i32 %85 = load i32* %84;
    store i32* %83 with i32 %85;
    i32 %86 = add i32 %23, i32 12;
    i32 %87 = add i32 %86, i32 %begin_pos;
    i32* %88 = getelementptr &(i32* %arr)[i32 %87];
    i32* %89 = getelementptr &(i32* %29)[i64 12];
    i32 %90 = load i32* %89;
    store i32* %88 with i32 %90;
    i32 %91 = add i32 %23, i32 13;
    i32 %92 = add i32 %91, i32 %begin_pos;
    i32* %93 = getelementptr &(i32* %arr)[i32 %92];
    i32* %94 = getelementptr &(i32* %29)[i64 13];
    i32 %95 = load i32* %94;
    store i32* %93 with i32 %95;
    i32 %96 = add i32 %23, i32 14;
    i32 %97 = add i32 %96, i32 %begin_pos;
    i32* %98 = getelementptr &(i32* %arr)[i32 %97];
    i32* %99 = getelementptr &(i32* %29)[i64 14];
    i32 %100 = load i32* %99;
    store i32* %98 with i32 %100;
    i32 %101 = add i32 %23, i32 15;
    i32 %102 = add i32 %101, i32 %begin_pos;
    i32* %103 = getelementptr &(i32* %arr)[i32 %102];
    i32* %104 = getelementptr &(i32* %29)[i64 15];
    i32 %105 = load i32* %104;
    store i32* %103 with i32 %105;
    ubr ^super.header;
^super.header1:
    i32 %106 = phi [^super.header, i32 %23] [^while.body2, i32 %107];
    i32 %107 = add i32 %106, i32 16;
    i1 %108 = scmp lt i32 %107, i32 %n;
    cbr i1 %108(prob = 0.67), ^while.body2, ^super.header2;
^while.header1:
    i32 %109 = phi [^b2, i32 1] [^while.body3, i32 %204];
    i32 %110 = phi [^b2, i32 0] [^while.body3, i32 %205];
    i1 %111 = scmp lt i32 %110, i32 %1;
    cbr i1 %111(prob = 0.97), ^while.body3, ^b;
^while.body2:
    i32 %112 = add i32 %106, i32 %begin_pos;
    i32* %113 = getelementptr &(i32* %arr)[i32 %112];
    i32* %114 = getelementptr &(i32* %6)[i32 %106];
    i32 %115 = load i32* %114;
    store i32* %113 with i32 %115;
    i32 %116 = add i32 %106, i32 1;
    i32 %117 = add i32 %116, i32 %begin_pos;
    i32* %118 = getelementptr &(i32* %arr)[i32 %117];
    i32* %119 = getelementptr &(i32* %114)[i64 1];
    i32 %120 = load i32* %119;
    store i32* %118 with i32 %120;
    i32 %121 = add i32 %106, i32 2;
    i32 %122 = add i32 %121, i32 %begin_pos;
    i32* %123 = getelementptr &(i32* %arr)[i32 %122];
    i32* %124 = getelementptr &(i32* %114)[i64 2];
    i32 %125 = load i32* %124;
    store i32* %123 with i32 %125;
    i32 %126 = add i32 %106, i32 3;
    i32 %127 = add i32 %126, i32 %begin_pos;
    i32* %128 = getelementptr &(i32* %arr)[i32 %127];
    i32* %129 = getelementptr &(i32* %114)[i64 3];
    i32 %130 = load i32* %129;
    store i32* %128 with i32 %130;
    i32 %131 = add i32 %106, i32 4;
    i32 %132 = add i32 %131, i32 %begin_pos;
    i32* %133 = getelementptr &(i32* %arr)[i32 %132];
    i32* %134 = getelementptr &(i32* %114)[i64 4];
    i32 %135 = load i32* %134;
    store i32* %133 with i32 %135;
    i32 %136 = add i32 %106, i32 5;
    i32 %137 = add i32 %136, i32 %begin_pos;
    i32* %138 = getelementptr &(i32* %arr)[i32 %137];
    i32* %139 = getelementptr &(i32* %114)[i64 5];
    i32 %140 = load i32* %139;
    store i32* %138 with i32 %140;
    i32 %141 = add i32 %106, i32 6;
    i32 %142 = add i32 %141, i32 %begin_pos;
    i32* %143 = getelementptr &(i32* %arr)[i32 %142];
    i32* %144 = getelementptr &(i32* %114)[i64 6];
    i32 %145 = load i32* %144;
    store i32* %143 with i32 %145;
    i32 %146 = add i32 %106, i32 7;
    i32 %147 = add i32 %146, i32 %begin_pos;
    i32* %148 = getelementptr &(i32* %arr)[i32 %147];
    i32* %149 = getelementptr &(i32* %114)[i64 7];
    i32 %150 = load i32* %149;
    store i32* %148 with i32 %150;
    i32 %151 = add i32 %106, i32 8;
    i32 %152 = add i32 %151, i32 %begin_pos;
    i32* %153 = getelementptr &(i32* %arr)[i32 %152];
    i32* %154 = getelementptr &(i32* %114)[i64 8];
    i32 %155 = load i32* %154;
    store i32* %153 with i32 %155;
    i32 %156 = add i32 %106, i32 9;
    i32 %157 = add i32 %156, i32 %begin_pos;
    i32* %158 = getelementptr &(i32* %arr)[i32 %157];
    i32* %159 = getelementptr &(i32* %114)[i64 9];
    i32 %160 = load i32* %159;
    store i32* %158 with i32 %160;
    i32 %161 = add i32 %106, i32 10;
    i32 %162 = add i32 %161, i32 %begin_pos;
    i32* %163 = getelementptr &(i32* %arr)[i32 %162];
    i32* %164 = getelementptr &(i32* %114)[i64 10];
    i32 %165 = load i32* %164;
    store i32* %163 with i32 %165;
    i32 %166 = add i32 %106, i32 11;
    i32 %167 = add i32 %166, i32 %begin_pos;
    i32* %168 = getelementptr &(i32* %arr)[i32 %167];
    i32* %169 = getelementptr &(i32* %114)[i64 11];
    i32 %170 = load i32* %169;
    store i32* %168 with i32 %170;
    i32 %171 = add i32 %106, i32 12;
    i32 %172 = add i32 %171, i32 %begin_pos;
    i32* %173 = getelementptr &(i32* %arr)[i32 %172];
    i32* %174 = getelementptr &(i32* %114)[i64 12];
    i32 %175 = load i32* %174;
    store i32* %173 with i32 %175;
    i32 %176 = add i32 %106, i32 13;
    i32 %177 = add i32 %176, i32 %begin_pos;
    i32* %178 = getelementptr &(i32* %arr)[i32 %177];
    i32* %179 = getelementptr &(i32* %114)[i64 13];
    i32 %180 = load i32* %179;
    store i32* %178 with i32 %180;
    i32 %181 = add i32 %106, i32 14;
    i32 %182 = add i32 %181, i32 %begin_pos;
    i32* %183 = getelementptr &(i32* %arr)[i32 %182];
    i32* %184 = getelementptr &(i32* %114)[i64 14];
    i32 %185 = load i32* %184;
    store i32* %183 with i32 %185;
    i32 %186 = add i32 %106, i32 15;
    i32 %187 = add i32 %186, i32 %begin_pos;
    i32* %188 = getelementptr &(i32* %arr)[i32 %187];
    i32* %189 = getelementptr &(i32* %114)[i64 15];
    i32 %190 = load i32* %189;
    store i32* %188 with i32 %190;
    ubr ^super.header1;
^while.body3:
    i32 %191 = add i32 %110, i32 %begin_pos;
    i32* %192 = getelementptr &(i32* %arr)[i32 %191];
    i32 %193 = load i32* %192;
    i32 %194 = add i32 %110, i32 %1;
    i32 %195 = add i32 %194, i32 %begin_pos;
    i32* %196 = getelementptr &(i32* %arr)[i32 %195];
    i32 %197 = load i32* %196;
    i32 %198 = call (i32, i32) -> i32 @multiply(i32 %109, i32 %197);
    i32 %199 = add i32 %193, i32 %198;
    i32 %200 = srem i32 %199, i32 998244353;
    store i32* %192 with i32 %200;
    i32 %201 = sub i32 %193, i32 %198;
    i32 %202 = add i32 %201, i32 998244353;
    i32 %203 = srem i32 %202, i32 998244353;
    store i32* %196 with i32 %203;
    i32 %204 = call (i32, i32) -> i32 @multiply(i32 %109, i32 %w);
    i32 %205 = add i32 %110, i32 1;
    ubr ^while.header1;
^super.header2:
    i32 %206 = phi [^super.header1, i32 %106] [^while.body4, i32 %207];
    i32 %207 = add i32 %206, i32 16;
    i1 %208 = scmp lt i32 %207, i32 %n;
    cbr i1 %208(prob = 0.67), ^while.body4, ^while.body5;
^while.body4:
    i32 %209 = add i32 %206, i32 %begin_pos;
    i32* %210 = getelementptr &(i32* %arr)[i32 %209];
    i32* %211 = getelementptr &(i32* %6)[i32 %206];
    i32 %212 = load i32* %211;
    store i32* %210 with i32 %212;
    i32 %213 = add i32 %206, i32 1;
    i32 %214 = add i32 %213, i32 %begin_pos;
    i32* %215 = getelementptr &(i32* %arr)[i32 %214];
    i32* %216 = getelementptr &(i32* %211)[i64 1];
    i32 %217 = load i32* %216;
    store i32* %215 with i32 %217;
    i32 %218 = add i32 %206, i32 2;
    i32 %219 = add i32 %218, i32 %begin_pos;
    i32* %220 = getelementptr &(i32* %arr)[i32 %219];
    i32* %221 = getelementptr &(i32* %211)[i64 2];
    i32 %222 = load i32* %221;
    store i32* %220 with i32 %222;
    i32 %223 = add i32 %206, i32 3;
    i32 %224 = add i32 %223, i32 %begin_pos;
    i32* %225 = getelementptr &(i32* %arr)[i32 %224];
    i32* %226 = getelementptr &(i32* %211)[i64 3];
    i32 %227 = load i32* %226;
    store i32* %225 with i32 %227;
    i32 %228 = add i32 %206, i32 4;
    i32 %229 = add i32 %228, i32 %begin_pos;
    i32* %230 = getelementptr &(i32* %arr)[i32 %229];
    i32* %231 = getelementptr &(i32* %211)[i64 4];
    i32 %232 = load i32* %231;
    store i32* %230 with i32 %232;
    i32 %233 = add i32 %206, i32 5;
    i32 %234 = add i32 %233, i32 %begin_pos;
    i32* %235 = getelementptr &(i32* %arr)[i32 %234];
    i32* %236 = getelementptr &(i32* %211)[i64 5];
    i32 %237 = load i32* %236;
    store i32* %235 with i32 %237;
    i32 %238 = add i32 %206, i32 6;
    i32 %239 = add i32 %238, i32 %begin_pos;
    i32* %240 = getelementptr &(i32* %arr)[i32 %239];
    i32* %241 = getelementptr &(i32* %211)[i64 6];
    i32 %242 = load i32* %241;
    store i32* %240 with i32 %242;
    i32 %243 = add i32 %206, i32 7;
    i32 %244 = add i32 %243, i32 %begin_pos;
    i32* %245 = getelementptr &(i32* %arr)[i32 %244];
    i32* %246 = getelementptr &(i32* %211)[i64 7];
    i32 %247 = load i32* %246;
    store i32* %245 with i32 %247;
    i32 %248 = add i32 %206, i32 8;
    i32 %249 = add i32 %248, i32 %begin_pos;
    i32* %250 = getelementptr &(i32* %arr)[i32 %249];
    i32* %251 = getelementptr &(i32* %211)[i64 8];
    i32 %252 = load i32* %251;
    store i32* %250 with i32 %252;
    i32 %253 = add i32 %206, i32 9;
    i32 %254 = add i32 %253, i32 %begin_pos;
    i32* %255 = getelementptr &(i32* %arr)[i32 %254];
    i32* %256 = getelementptr &(i32* %211)[i64 9];
    i32 %257 = load i32* %256;
    store i32* %255 with i32 %257;
    i32 %258 = add i32 %206, i32 10;
    i32 %259 = add i32 %258, i32 %begin_pos;
    i32* %260 = getelementptr &(i32* %arr)[i32 %259];
    i32* %261 = getelementptr &(i32* %211)[i64 10];
    i32 %262 = load i32* %261;
    store i32* %260 with i32 %262;
    i32 %263 = add i32 %206, i32 11;
    i32 %264 = add i32 %263, i32 %begin_pos;
    i32* %265 = getelementptr &(i32* %arr)[i32 %264];
    i32* %266 = getelementptr &(i32* %211)[i64 11];
    i32 %267 = load i32* %266;
    store i32* %265 with i32 %267;
    i32 %268 = add i32 %206, i32 12;
    i32 %269 = add i32 %268, i32 %begin_pos;
    i32* %270 = getelementptr &(i32* %arr)[i32 %269];
    i32* %271 = getelementptr &(i32* %211)[i64 12];
    i32 %272 = load i32* %271;
    store i32* %270 with i32 %272;
    i32 %273 = add i32 %206, i32 13;
    i32 %274 = add i32 %273, i32 %begin_pos;
    i32* %275 = getelementptr &(i32* %arr)[i32 %274];
    i32* %276 = getelementptr &(i32* %211)[i64 13];
    i32 %277 = load i32* %276;
    store i32* %275 with i32 %277;
    i32 %278 = add i32 %206, i32 14;
    i32 %279 = add i32 %278, i32 %begin_pos;
    i32* %280 = getelementptr &(i32* %arr)[i32 %279];
    i32* %281 = getelementptr &(i32* %211)[i64 14];
    i32 %282 = load i32* %281;
    store i32* %280 with i32 %282;
    i32 %283 = add i32 %206, i32 15;
    i32 %284 = add i32 %283, i32 %begin_pos;
    i32* %285 = getelementptr &(i32* %arr)[i32 %284];
    i32* %286 = getelementptr &(i32* %211)[i64 15];
    i32 %287 = load i32* %286;
    store i32* %285 with i32 %287;
    ubr ^super.header2;
^while.body5:
    i32 %288 = phi [^super.header2, i32 %206] [^while.body5, i32 %293];
    i32 %289 = add i32 %288, i32 %begin_pos;
    i32* %290 = getelementptr &(i32* %arr)[i32 %289];
    i32* %291 = getelementptr &(i32* %6)[i32 %288];
    i32 %292 = load i32* %291;
    store i32* %290 with i32 %292;
    i32 %293 = add i32 %288, i32 1;
    i1 %294 = scmp lt i32 %293, i32 %n;
    cbr i1 %294(prob = 0.97), ^while.body5, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    call (i32) -> void @starttime(i32 60);
    i32 %4 = add i32 %1, i32 -1;
    i32 %5 = add i32 %4, i32 %3;
    i1 %6 = scmp gt i32 %5, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = phi [^entry, i32 1] [^while.body, i32 %8];
    i32 %8 = shl i32 %7, i32 1;
    i1 %9 = scmp lt i32 %8, i32 %5;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^b:
    i32 %10 = phi [^entry, i32 1] [^while.body, i32 %8];
    i32 %11 = sdiv i32 998244352, i32 %10;
    i32 %12 = call (i32, i32) -> i32 @power(i32 3, i32 %11);
    i32 %13 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %0, i32 0, i32 %10, i32 %12);
    i32 %14 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %2, i32 0, i32 %10, i32 %12);
    i1 %15 = scmp gt i32 %10, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %16 = phi [^b, i32 0] [^while.body1, i32 %22];
    i32* %17 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %20);
    store i32* %17 with i32 %21;
    i32 %22 = add i32 %16, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %10;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %24 = sub i32 998244352, i32 %11;
    i32 %25 = call (i32, i32) -> i32 @power(i32 3, i32 %24);
    i32 %26 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %0, i32 0, i32 %10, i32 %25);
    cbr i1 %15(prob = 0.97), ^indirect, ^b2;
^indirect:
    i32 %27 = call (i32, i32) -> i32 @power(i32 %10, i32 998244351);
    ubr ^while.body2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    ret i32 0;
^while.body2:
    i32 %28 = phi [^indirect, i32 0] [^while.body2, i32 %32];
    i32* %29 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %28];
    i32 %30 = load i32* %29;
    i32 %31 = call (i32, i32) -> i32 @multiply(i32 %30, i32 %27);
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %28, i32 1;
    i1 %33 = scmp lt i32 %32, i32 %10;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b2;
}
