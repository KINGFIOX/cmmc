internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program, align 8 { Flexible };
internal [65536 * i32]* @tape, align 8 { Flexible };
internal [65536 * i32]* @input, align 8 { Flexible };
internal [65536 * i32]* @output, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i64 %2 = sext i32 %1 to i64;
    i64 %3 = shl i64 1, i64 %2;
    i64 %4 = and i64 %3, i64 360287970357415681;
    i1 %5 = icmp eq i64 %4, i64 0;
    i1 %6 = icmp slt i32 %1, i32 0;
    i1 %7 = or i1 %5, i1 %6;
    i1 %8 = icmp sgt i32 %0, i32 93;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b;
  ^b:
    i1 %10 = icmp neq i32 %0, i32 35;
    [65536 * i32]* %11 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    [65536 * i32]* %12 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    cbr i1 %10(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %13 = phi [^b, i32 0] [^b4, i32 %102];
    i32 %14 = phi [^b, i32 %0] [^b4, i32 %22];
    i32* %15 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %13];
    store i32* %15 with i32 %14;
    ubr ^while.body2;
  ^b1:
    i32 %16 = phi [^b, i32 0] [^b4, i32 %102];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = icmp neq i32 %17, i32 105;
    cbr i1 %18(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %19 = phi [^b1, i32 0] [^b2, i32 %32] [^while.body3, i32 %32];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %20 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %21 = getelementptr &([512 * i32]* %20)[i64 0][i64 0];
    ubr ^b3;
  ^while.body2:
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %22, i32 -35;
    i64 %24 = sext i32 %23 to i64;
    i64 %25 = shl i64 1, i64 %24;
    i64 %26 = and i64 %25, i64 360287970357415681;
    i1 %27 = icmp eq i64 %26, i64 0;
    i1 %28 = icmp slt i32 %23, i32 0;
    i1 %29 = or i1 %27, i1 %28;
    i1 %30 = icmp sgt i32 %22, i32 93;
    i1 %31 = or i1 %29, i1 %30;
    cbr i1 %31(prob = 0.984615), ^while.body2, ^b4;
  ^b2:
    i32 %32 = call () -> i32 @getint();
    i1 %33 = icmp sgt i32 %32, i32 0;
    i32 %34 = call () -> i32 @getch();
    cbr i1 %33(prob = 0.984615), ^while.body3, ^if.then;
  ^b3:
    i64 %35 = phi [^if.then, i64 0] [^b3, i64 %100];
    i32* %36 = getelementptr &(i32* %21)[i64 %35];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %36)[i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %36)[i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %36)[i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %36)[i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %36)[i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %36)[i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %36)[i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %36)[i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %36)[i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %36)[i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %36)[i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %36)[i64 15];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %36)[i64 16];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %36)[i64 17];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %36)[i64 18];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %36)[i64 19];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %36)[i64 20];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %36)[i64 21];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %36)[i64 22];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %36)[i64 23];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %36)[i64 24];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %36)[i64 25];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %36)[i64 26];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %36)[i64 27];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %36)[i64 28];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %36)[i64 29];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %36)[i64 30];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %36)[i64 31];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %36)[i64 32];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %36)[i64 33];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %36)[i64 34];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %36)[i64 35];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %36)[i64 36];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %36)[i64 37];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %36)[i64 38];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %36)[i64 39];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %36)[i64 40];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %36)[i64 41];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %36)[i64 42];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %36)[i64 43];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %36)[i64 44];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %36)[i64 45];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %36)[i64 46];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %36)[i64 47];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %36)[i64 48];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %36)[i64 49];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %36)[i64 50];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %36)[i64 51];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %36)[i64 52];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %36)[i64 53];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %36)[i64 54];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %36)[i64 55];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %36)[i64 56];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %36)[i64 57];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %36)[i64 58];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %36)[i64 59];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %36)[i64 60];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %36)[i64 61];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %36)[i64 62];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %36)[i64 63];
    store i32* %99 with i32 0;
    i64 %100 = add i64 %35, i64 64;
    i1 %101 = icmp slt i64 %100, i64 512;
    cbr i1 %101(prob = 0.875), ^b3, ^b5;
  ^b4:
    i32 %102 = add i32 %13, i32 1;
    i1 %103 = icmp neq i32 %22, i32 35;
    cbr i1 %103(prob = 0.984615), ^while.body1, ^b1;
  ^while.body3:
    i32 %104 = phi [^b2, i32 0] [^while.body3, i32 %107];
    i32 %105 = call () -> i32 @getch();
    i32* %106 = getelementptr &([65536 * i32]* %11)[i64 0][i32 %104];
    store i32* %106 with i32 %105;
    i32 %107 = add i32 %104, i32 1;
    i1 %108 = icmp sgt i32 %32, i32 %107;
    cbr i1 %108(prob = 0.984615), ^while.body3, ^if.then;
  ^b5:
    i1 %109 = icmp sgt i32 %16, i32 0;
    [65536 * i32]* %110 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    [65536 * i32]* %111 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %109(prob = 0.984615), ^while.body4, ^b6;
  ^while.body4:
    i32 %112 = phi [^b5, i32 0] [^b8, i32 %130];
    i32 %113 = phi [^b5, i32 0] [^b8, i32 %135];
    i32 %114 = phi [^b5, i32 0] [^b8, i32 %133];
    i32 %115 = phi [^b5, i32 0] [^b8, i32 %132];
    i32 %116 = phi [^b5, i32 0] [^b8, i32 %131];
    i32* %117 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %113];
    i32 %118 = load i32* %117;
    i1 %119 = icmp eq i32 %118, i32 62;
    cbr i1 %119(prob = 0.5), ^if.then1, ^if.else;
  ^b6:
    i32 %120 = phi [^b5, i32 0] [^b8, i32 %130];
    i1 %121 = icmp sgt i32 %120, i32 0;
    call (i32) -> void @stoptime(i32 118);
    cbr i1 %121(prob = 0.984615), ^while.body5, ^b7;
  ^if.then1:
    i32 %122 = add i32 %114, i32 1;
    ubr ^b8;
  ^if.else:
    i1 %123 = icmp eq i32 %118, i32 60;
    cbr i1 %123(prob = 0.5), ^if.then2, ^if.else1;
  ^while.body5:
    i32 %124 = phi [^b6, i32 0] [^while.body5, i32 %127];
    i32* %125 = getelementptr &([65536 * i32]* %111)[i64 0][i32 %124];
    i32 %126 = load i32* %125;
    call (i32) -> void @putch(i32 %126);
    i32 %127 = add i32 %124, i32 1;
    i1 %128 = icmp sgt i32 %120, i32 %127;
    cbr i1 %128(prob = 0.984615), ^while.body5, ^b7;
  ^b7:
    ret i32 0;
  ^if.then2:
    i32 %129 = add i32 %114, i32 -1;
    ubr ^b8;
  ^b8:
    i32 %130 = phi [^if.then1, i32 %112] [^if.then2, i32 %112] [^if.then3, i32 %112] [^if.then4, i32 %112] [^if.then6, i32 %112] [^if.then7, i32 %112] [^while.body6, i32 %112] [^if.else6, i32 %112] [^if.then8, i32 %172] [^if.else7, i32 %112] [^if.then10, i32 %112] [^if.else8, i32 %112];
    i32 %131 = phi [^if.then1, i32 %116] [^if.then2, i32 %116] [^if.then3, i32 %116] [^if.then4, i32 %116] [^if.then6, i32 %116] [^if.then7, i32 %116] [^while.body6, i32 %116] [^if.else6, i32 %116] [^if.then8, i32 %116] [^if.else7, i32 %116] [^if.then10, i32 %116] [^if.else8, i32 %177];
    i32 %132 = phi [^if.then1, i32 %115] [^if.then2, i32 %115] [^if.then3, i32 %115] [^if.then4, i32 %115] [^if.then6, i32 %149] [^if.then7, i32 %152] [^while.body6, i32 %115] [^if.else6, i32 %115] [^if.then8, i32 %115] [^if.else7, i32 %115] [^if.then10, i32 %115] [^if.else8, i32 %115];
    i32 %133 = phi [^if.then1, i32 %122] [^if.then2, i32 %129] [^if.then3, i32 %114] [^if.then4, i32 %114] [^if.then6, i32 %114] [^if.then7, i32 %114] [^while.body6, i32 %114] [^if.else6, i32 %114] [^if.then8, i32 %114] [^if.else7, i32 %114] [^if.then10, i32 %114] [^if.else8, i32 %114];
    i32 %134 = phi [^if.then1, i32 %113] [^if.then2, i32 %113] [^if.then3, i32 %113] [^if.then4, i32 %113] [^if.then6, i32 %113] [^if.then7, i32 %113] [^while.body6, i32 %155] [^if.else6, i32 %169] [^if.then8, i32 %113] [^if.else7, i32 %113] [^if.then10, i32 %113] [^if.else8, i32 %113];
    i32 %135 = add i32 %134, i32 1;
    i1 %136 = icmp sgt i32 %16, i32 %135;
    cbr i1 %136(prob = 0.984615), ^while.body4, ^b6;
  ^if.else1:
    i32* %137 = getelementptr &([65536 * i32]* %110)[i64 0][i32 %114];
    i1 %138 = icmp eq i32 %118, i32 43;
    cbr i1 %138(prob = 0.5), ^if.then3, ^if.else2;
  ^if.then3:
    i32 %139 = load i32* %137;
    i32 %140 = add i32 %139, i32 1;
    store i32* %137 with i32 %140;
    ubr ^b8;
  ^if.else2:
    i1 %141 = icmp eq i32 %118, i32 45;
    cbr i1 %141(prob = 0.5), ^if.then4, ^if.else3;
  ^if.then4:
    i32 %142 = load i32* %137;
    i32 %143 = add i32 %142, i32 -1;
    store i32* %137 with i32 %143;
    ubr ^b8;
  ^if.else3:
    i1 %144 = icmp eq i32 %118, i32 91;
    cbr i1 %144(prob = 0.5), ^if.then5, ^if.else4;
  ^if.then5:
    i32 %145 = load i32* %137;
    i1 %146 = icmp neq i32 %145, i32 0;
    cbr i1 %146(prob = 0.5), ^if.then6, ^while.body6;
  ^if.else4:
    i1 %147 = icmp eq i32 %118, i32 93;
    cbr i1 %147(prob = 0.5), ^if.then7, ^if.else5;
  ^if.then6:
    i32* %148 = getelementptr &([512 * i32]* %20)[i64 0][i32 %115];
    store i32* %148 with i32 %113;
    i32 %149 = add i32 %115, i32 1;
    ubr ^b8;
  ^if.then7:
    i32 %150 = load i32* %137;
    i1 %151 = icmp eq i32 %150, i32 0;
    i32 %152 = add i32 %115, i32 -1;
    cbr i1 %151(prob = 0.5), ^b8, ^if.else6;
  ^while.body6:
    i32 %153 = phi [^if.then5, i32 1] [^while.body6, i32 %164];
    i32 %154 = phi [^if.then5, i32 %113] [^while.body6, i32 %155];
    i32 %155 = add i32 %154, i32 1;
    i32* %156 = getelementptr &([65536 * i32]* %12)[i64 0][i32 %155];
    i32 %157 = load i32* %156;
    i1 %158 = icmp eq i32 %157, i32 93;
    i32 %159 = zext i1 %158 to i32;
    i32 %160 = sub i32 %153, i32 %159;
    i32 %161 = add i32 %160, i32 1;
    i1 %162 = icmp neq i32 %157, i32 91;
    i32 %163 = zext i1 %162 to i32;
    i32 %164 = sub i32 %161, i32 %163;
    i1 %165 = icmp sgt i32 %164, i32 0;
    cbr i1 %165(prob = 0.984615), ^while.body6, ^b8;
  ^if.else5:
    i1 %166 = icmp eq i32 %118, i32 46;
    cbr i1 %166(prob = 0.5), ^if.then8, ^if.else7;
  ^if.else6:
    i32* %167 = getelementptr &([512 * i32]* %20)[i64 0][i32 %115];
    i32* %168 = getelementptr &(i32* %167)[i64 -1];
    i32 %169 = load i32* %168;
    ubr ^b8;
  ^if.then8:
    i32* %170 = getelementptr &([65536 * i32]* %111)[i64 0][i32 %112];
    i32 %171 = load i32* %137;
    store i32* %170 with i32 %171;
    i32 %172 = add i32 %112, i32 1;
    ubr ^b8;
  ^if.else7:
    i1 %173 = icmp eq i32 %118, i32 44;
    cbr i1 %173(prob = 0.5), ^if.then9, ^b8;
  ^if.then9:
    i1 %174 = icmp sle i32 %19, i32 %116;
    cbr i1 %174(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    store i32* %137 with i32 0;
    ubr ^b8;
  ^if.else8:
    i32* %175 = getelementptr &([65536 * i32]* %11)[i64 0][i32 %116];
    i32 %176 = load i32* %175;
    store i32* %137 with i32 %176;
    i32 %177 = add i32 %116, i32 1;
    ubr ^b8;
}
internal [512 * i32]* @return_a, align 8 { Flexible };
