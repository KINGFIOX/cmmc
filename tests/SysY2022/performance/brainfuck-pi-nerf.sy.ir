internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %ip = alloc i32;
    i32* %read_hea = alloc i32;
    i32* %input_he = alloc i32;
    [512 * i32]* %return_a = alloc [512 * i32];
    i32* %input_length = alloc i32;
    i32* %program_length = alloc i32;
    store i32* %program_length with i32 0;
    store i32* %input_length with i32 0;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 0];
    i32 %2 = phi [^while.body, i32 %20] [^entry, i32 %0];
    i1 %3 = scmp neq i32 %2, i32 62;
    cbr i1 %3(prob = 0.5), ^b, ^b1;
^b:
    i1 %4 = scmp neq i32 %2, i32 60;
    ubr ^b1;
^b1:
    i1 %5 = phi [^while.header, i1 false] [^b, i1 %4];
    cbr i1 %5(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %6 = scmp neq i32 %2, i32 43;
    ubr ^b3;
^b3:
    i1 %7 = phi [^b1, i1 false] [^b2, i1 %6];
    cbr i1 %7(prob = 0.5), ^b4, ^b5;
^b4:
    i1 %8 = scmp neq i32 %2, i32 45;
    ubr ^b5;
^b5:
    i1 %9 = phi [^b3, i1 false] [^b4, i1 %8];
    cbr i1 %9(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %10 = scmp neq i32 %2, i32 91;
    ubr ^b7;
^b7:
    i1 %11 = phi [^b5, i1 false] [^b6, i1 %10];
    cbr i1 %11(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %12 = scmp neq i32 %2, i32 93;
    ubr ^b9;
^b9:
    i1 %13 = phi [^b7, i1 false] [^b8, i1 %12];
    cbr i1 %13(prob = 0.5), ^b10, ^b11;
^b10:
    i1 %14 = scmp neq i32 %2, i32 46;
    ubr ^b11;
^b11:
    i1 %15 = phi [^b9, i1 false] [^b10, i1 %14];
    cbr i1 %15(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %16 = scmp neq i32 %2, i32 44;
    ubr ^b13;
^b13:
    i1 %17 = phi [^b11, i1 false] [^b12, i1 %16];
    cbr i1 %17(prob = 0.5), ^b14, ^b15;
^b14:
    i1 %18 = scmp neq i32 %2, i32 35;
    ubr ^b15;
^b15:
    i1 %19 = phi [^b14, i1 %18] [^b13, i1 false];
    cbr i1 %19(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %20 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %21 = phi [^b15, i32 %1] [^b35, i32 %131];
    i32 %22 = phi [^b15, i32 %2] [^b35, i32 %38];
    i1 %23 = scmp neq i32 %22, i32 35;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b16;
^while.body1:
    i32* %24 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %21];
    store i32* %24 with i32 %22;
    i32 %25 = call () -> i32 @getch();
    ubr ^while.header2;
^b16:
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp neq i32 %26, i32 105;
    cbr i1 %27(prob = 0.5), ^entry1, ^b17;
^entry1:
    call (i32) -> void @starttime(i32 116);
    store i32* %ip with i32 0;
    store i32* %read_hea with i32 0;
    store i32* %input_he with i32 0;
    i32* %28 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %29 = ptrcast i32* %28 to i8*;
    i8* %30 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %29, i32 0, i64 2048);
    i32 %31 = load i32* %program_length;
    i32 %32 = load i32* %input_length;
    i32 %33 = load i32* %input_he;
    i32 %34 = load i32* %read_hea;
    i32 %35 = load i32* %ip;
    ubr ^while.header3;
^b17:
    i32 %36 = call () -> i32 @getint();
    store i32* %input_length with i32 %36;
    i32 %37 = call () -> i32 @getch();
    ubr ^while.header4;
^while.header2:
    i32 %38 = phi [^while.body5, i32 %126] [^while.body1, i32 %25];
    i1 %39 = scmp neq i32 %38, i32 62;
    cbr i1 %39(prob = 0.5), ^b18, ^b19;
^b18:
    i1 %40 = scmp neq i32 %38, i32 60;
    ubr ^b19;
^b19:
    i1 %41 = phi [^b18, i1 %40] [^while.header2, i1 false];
    cbr i1 %41(prob = 0.5), ^b20, ^b21;
^while.header3:
    i32 %42 = phi [^b24, i32 %68] [^entry1, i32 %31];
    i32 %43 = phi [^b24, i32 %69] [^entry1, i32 %32];
    i32 %44 = phi [^b24, i32 %70] [^entry1, i32 0];
    i32 %45 = phi [^b24, i32 %71] [^entry1, i32 0];
    i32 %46 = phi [^b24, i32 %72] [^entry1, i32 %33];
    i32 %47 = phi [^b24, i32 %73] [^entry1, i32 %34];
    i32 %48 = phi [^b24, i32 %75] [^entry1, i32 %35];
    i1 %49 = scmp lt i32 %48, i32 %42;
    cbr i1 %49(prob = 0.97), ^while.body3, ^entry2;
^while.header4:
    i32 %50 = phi [^while.body2, i32 %50] [^b17, i32 %36];
    i32 %51 = phi [^while.body2, i32 %56] [^b17, i32 0];
    i1 %52 = scmp lt i32 %51, i32 %50;
    cbr i1 %52(prob = 0.97), ^while.body2, ^entry1;
^b20:
    i1 %53 = scmp neq i32 %38, i32 43;
    ubr ^b21;
^while.body2:
    i32* %54 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %51];
    i32 %55 = call () -> i32 @getch();
    store i32* %54 with i32 %55;
    i32 %56 = add i32 %51, i32 1;
    ubr ^while.header4;
^entry2:
    call (i32) -> void @stoptime(i32 118);
    ubr ^while.header5;
^while.body3:
    i32* %57 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %48];
    i32 %58 = load i32* %57;
    i1 %59 = scmp eq i32 %58, i32 62;
    cbr i1 %59(prob = 0.5), ^if.then, ^if.else;
^b21:
    i1 %60 = phi [^b20, i1 %53] [^b19, i1 false];
    cbr i1 %60(prob = 0.5), ^b22, ^b23;
^if.then:
    i32 %61 = add i32 %47, i32 1;
    ubr ^b24;
^b22:
    i1 %62 = scmp neq i32 %38, i32 45;
    ubr ^b23;
^if.else:
    i1 %63 = scmp eq i32 %58, i32 60;
    cbr i1 %63(prob = 0.5), ^if.then1, ^if.else1;
^while.header5:
    i32 %64 = phi [^while.body4, i32 %64] [^entry2, i32 %44];
    i32 %65 = phi [^while.body4, i32 %79] [^entry2, i32 0];
    i1 %66 = scmp lt i32 %65, i32 %64;
    cbr i1 %66(prob = 0.97), ^while.body4, ^entry3;
^b23:
    i1 %67 = phi [^b21, i1 false] [^b22, i1 %62];
    cbr i1 %67(prob = 0.5), ^b25, ^b26;
^b24:
    i32 %68 = phi [^while.header6, i32 %107] [^if.then, i32 %42] [^if.then1, i32 %42] [^if.then3, i32 %42] [^if.else7, i32 %42] [^if.then8, i32 %42] [^if.then2, i32 %42] [^if.then5, i32 %42] [^if.then7, i32 %42] [^if.else6, i32 %42] [^if.then12, i32 %42] [^if.else8, i32 %42];
    i32 %69 = phi [^while.header6, i32 %108] [^if.then, i32 %43] [^if.then1, i32 %43] [^if.then3, i32 %43] [^if.else7, i32 %43] [^if.then8, i32 %43] [^if.then2, i32 %43] [^if.then5, i32 %43] [^if.then7, i32 %43] [^if.else6, i32 %43] [^if.then12, i32 %43] [^if.else8, i32 %43];
    i32 %70 = phi [^while.header6, i32 %109] [^if.then, i32 %44] [^if.then1, i32 %44] [^if.then3, i32 %44] [^if.else7, i32 %44] [^if.then8, i32 %125] [^if.then2, i32 %44] [^if.then5, i32 %44] [^if.then7, i32 %44] [^if.else6, i32 %44] [^if.then12, i32 %44] [^if.else8, i32 %44];
    i32 %71 = phi [^while.header6, i32 %111] [^if.then, i32 %45] [^if.then1, i32 %45] [^if.then3, i32 %45] [^if.else7, i32 %45] [^if.then8, i32 %45] [^if.then2, i32 %45] [^if.then5, i32 %102] [^if.then7, i32 %118] [^if.else6, i32 %45] [^if.then12, i32 %45] [^if.else8, i32 %45];
    i32 %72 = phi [^while.header6, i32 %112] [^if.then, i32 %46] [^if.then1, i32 %46] [^if.then3, i32 %46] [^if.else7, i32 %46] [^if.then8, i32 %46] [^if.then2, i32 %46] [^if.then5, i32 %46] [^if.then7, i32 %46] [^if.else6, i32 %46] [^if.then12, i32 %46] [^if.else8, i32 %142];
    i32 %73 = phi [^while.header6, i32 %113] [^if.then, i32 %61] [^if.then1, i32 %76] [^if.then3, i32 %47] [^if.else7, i32 %47] [^if.then8, i32 %47] [^if.then2, i32 %47] [^if.then5, i32 %47] [^if.then7, i32 %47] [^if.else6, i32 %47] [^if.then12, i32 %47] [^if.else8, i32 %47];
    i32 %74 = phi [^if.then8, i32 %48] [^while.header6, i32 %114] [^if.else8, i32 %48] [^if.then12, i32 %48] [^if.then7, i32 %48] [^if.else6, i32 %121] [^if.then, i32 %48] [^if.then1, i32 %48] [^if.then3, i32 %48] [^if.else7, i32 %48] [^if.then2, i32 %48] [^if.then5, i32 %48];
    i32 %75 = add i32 %74, i32 1;
    ubr ^while.header3;
^if.then1:
    i32 %76 = add i32 %47, i32 -1;
    ubr ^b24;
^while.body4:
    i32* %77 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %65];
    i32 %78 = load i32* %77;
    call (i32) -> void @putch(i32 %78);
    i32 %79 = add i32 %65, i32 1;
    ubr ^while.header5;
^b25:
    i1 %80 = scmp neq i32 %38, i32 91;
    ubr ^b26;
^if.else1:
    i1 %81 = scmp eq i32 %58, i32 43;
    cbr i1 %81(prob = 0.5), ^if.then2, ^if.else2;
^b26:
    i1 %82 = phi [^b23, i1 false] [^b25, i1 %80];
    cbr i1 %82(prob = 0.5), ^b27, ^b28;
^entry3:
    ret i32 0;
^if.then2:
    i32* %83 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %84, i32 1;
    store i32* %83 with i32 %85;
    ubr ^b24;
^b27:
    i1 %86 = scmp neq i32 %38, i32 93;
    ubr ^b28;
^if.else2:
    i1 %87 = scmp eq i32 %58, i32 45;
    cbr i1 %87(prob = 0.5), ^if.then3, ^if.else3;
^b28:
    i1 %88 = phi [^b26, i1 false] [^b27, i1 %86];
    cbr i1 %88(prob = 0.5), ^b29, ^b30;
^if.then3:
    i32* %89 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %90, i32 -1;
    store i32* %89 with i32 %91;
    ubr ^b24;
^b29:
    i1 %92 = scmp neq i32 %38, i32 46;
    ubr ^b30;
^if.else3:
    i1 %93 = scmp eq i32 %58, i32 91;
    cbr i1 %93(prob = 0.5), ^if.then4, ^if.else4;
^b30:
    i1 %94 = phi [^b28, i1 false] [^b29, i1 %92];
    cbr i1 %94(prob = 0.5), ^b31, ^b32;
^b31:
    i1 %95 = scmp neq i32 %38, i32 44;
    ubr ^b32;
^if.then4:
    i32* %96 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32 %97 = load i32* %96;
    i1 %98 = scmp neq i32 %97, i32 0;
    cbr i1 %98(prob = 0.5), ^if.then5, ^while.header6;
^if.else4:
    i1 %99 = scmp eq i32 %58, i32 93;
    cbr i1 %99(prob = 0.5), ^if.then6, ^if.else5;
^b32:
    i1 %100 = phi [^b30, i1 false] [^b31, i1 %95];
    cbr i1 %100(prob = 0.5), ^b33, ^b34;
^if.then5:
    i32* %101 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %45];
    store i32* %101 with i32 %48;
    i32 %102 = add i32 %45, i32 1;
    ubr ^b24;
^b33:
    i1 %103 = scmp neq i32 %38, i32 35;
    ubr ^b34;
^if.then6:
    i32* %104 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32 %105 = load i32* %104;
    i1 %106 = scmp eq i32 %105, i32 0;
    cbr i1 %106(prob = 0.5), ^if.then7, ^if.else6;
^while.header6:
    i32 %107 = phi [^if.then4, i32 %42] [^b36, i32 %107] [^if.then11, i32 %107];
    i32 %108 = phi [^if.then4, i32 %43] [^b36, i32 %108] [^if.then11, i32 %108];
    i32 %109 = phi [^if.then4, i32 %44] [^b36, i32 %109] [^if.then11, i32 %109];
    i32 %110 = phi [^if.then4, i32 1] [^b36, i32 %134] [^if.then11, i32 %137];
    i32 %111 = phi [^if.then4, i32 %45] [^b36, i32 %111] [^if.then11, i32 %111];
    i32 %112 = phi [^if.then4, i32 %46] [^b36, i32 %112] [^if.then11, i32 %112];
    i32 %113 = phi [^if.then4, i32 %47] [^b36, i32 %113] [^if.then11, i32 %113];
    i32 %114 = phi [^if.then4, i32 %48] [^b36, i32 %127] [^if.then11, i32 %127];
    i1 %115 = scmp gt i32 %110, i32 0;
    cbr i1 %115(prob = 0.97), ^while.body6, ^b24;
^if.else5:
    i1 %116 = scmp eq i32 %58, i32 46;
    cbr i1 %116(prob = 0.5), ^if.then8, ^if.else7;
^b34:
    i1 %117 = phi [^b33, i1 %103] [^b32, i1 false];
    cbr i1 %117(prob = 0.97), ^while.body5, ^b35;
^if.then7:
    i32 %118 = add i32 %45, i32 -1;
    ubr ^b24;
^if.else6:
    i32 %119 = add i32 %45, i32 -1;
    i32* %120 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %119];
    i32 %121 = load i32* %120;
    ubr ^b24;
^if.then8:
    i32* %122 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %44];
    i32* %123 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32 %124 = load i32* %123;
    store i32* %122 with i32 %124;
    i32 %125 = add i32 %44, i32 1;
    ubr ^b24;
^while.body5:
    i32 %126 = call () -> i32 @getch();
    ubr ^while.header2;
^while.body6:
    i32 %127 = add i32 %114, i32 1;
    i32* %128 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    i1 %130 = scmp eq i32 %129, i32 93;
    cbr i1 %130(prob = 0.5), ^if.then9, ^b36;
^b35:
    i32 %131 = add i32 %21, i32 1;
    store i32* %program_length with i32 %131;
    ubr ^while.header1;
^if.else7:
    i1 %132 = scmp eq i32 %58, i32 44;
    cbr i1 %132(prob = 0.5), ^if.then10, ^b24;
^if.then9:
    i32 %133 = add i32 %110, i32 -1;
    ubr ^b36;
^b36:
    i32 %134 = phi [^if.then9, i32 %133] [^while.body6, i32 %110];
    i1 %135 = scmp eq i32 %129, i32 91;
    cbr i1 %135(prob = 0.5), ^if.then11, ^while.header6;
^if.then10:
    i1 %136 = scmp ge i32 %46, i32 %43;
    cbr i1 %136(prob = 0.5), ^if.then12, ^if.else8;
^if.then11:
    i32 %137 = add i32 %134, i32 1;
    ubr ^while.header6;
^if.then12:
    i32* %138 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    store i32* %138 with i32 0;
    ubr ^b24;
^if.else8:
    i32* %139 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %47];
    i32* %140 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %46];
    i32 %141 = load i32* %140;
    store i32* %139 with i32 %141;
    i32 %142 = add i32 %46, i32 1;
    ubr ^b24;
}
