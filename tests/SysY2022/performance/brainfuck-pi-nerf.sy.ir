internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [512 * i32]* %return_a = alloc [512 * i32];
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^entry, i32 %0] [^while.body, i32 %19];
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
^b:
    i1 %3 = scmp neq i32 %1, i32 60;
    ubr ^b1;
^b1:
    i1 %4 = phi [^while.header, i1 false] [^b, i1 %3];
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %5 = scmp neq i32 %1, i32 43;
    ubr ^b3;
^b3:
    i1 %6 = phi [^b1, i1 false] [^b2, i1 %5];
    cbr i1 %6(prob = 0.5), ^b4, ^b5;
^b4:
    i1 %7 = scmp neq i32 %1, i32 45;
    ubr ^b5;
^b5:
    i1 %8 = phi [^b3, i1 false] [^b4, i1 %7];
    cbr i1 %8(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %9 = scmp neq i32 %1, i32 91;
    ubr ^b7;
^b7:
    i1 %10 = phi [^b5, i1 false] [^b6, i1 %9];
    cbr i1 %10(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %11 = scmp neq i32 %1, i32 93;
    ubr ^b9;
^b9:
    i1 %12 = phi [^b7, i1 false] [^b8, i1 %11];
    cbr i1 %12(prob = 0.5), ^b10, ^b11;
^b10:
    i1 %13 = scmp neq i32 %1, i32 46;
    ubr ^b11;
^b11:
    i1 %14 = phi [^b9, i1 false] [^b10, i1 %13];
    cbr i1 %14(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %15 = scmp neq i32 %1, i32 44;
    ubr ^b13;
^b13:
    i1 %16 = phi [^b11, i1 false] [^b12, i1 %15];
    cbr i1 %16(prob = 0.5), ^b14, ^b15;
^b14:
    i1 %17 = scmp neq i32 %1, i32 35;
    ubr ^b15;
^b15:
    i1 %18 = phi [^b13, i1 false] [^b14, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header;
^entry1:
    i1 %20 = scmp neq i32 %1, i32 35;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b16;
^while.body1:
    i32 %21 = phi [^entry1, i32 0] [^while.body6, i32 %122];
    i32 %22 = phi [^entry1, i32 %1] [^while.body6, i32 %33];
    i32* %23 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header1;
^b16:
    i32 %25 = phi [^entry1, i32 0] [^while.body6, i32 %122];
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp neq i32 %26, i32 105;
    cbr i1 %27(prob = 0.5), ^entry2, ^b17;
^entry2:
    i32 %28 = phi [^b16, i32 0] [^while.header2, i32 %31];
    call (i32) -> void @starttime(i32 116);
    i32* %29 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %30 = ptrcast i32* %29 to i8*;
    ubr ^b19;
^b17:
    i32 %31 = call () -> i32 @getint();
    i32 %32 = call () -> i32 @getch();
    ubr ^while.header2;
^while.header1:
    i32 %33 = phi [^while.body1, i32 %24] [^while.body5, i32 %114];
    i1 %34 = scmp neq i32 %33, i32 62;
    cbr i1 %34(prob = 0.5), ^b18, ^b20;
^b18:
    i1 %35 = scmp neq i32 %33, i32 60;
    ubr ^b20;
^b19:
    i64 %36 = phi [^entry2, i64 0] [^b19, i64 %53];
    i8* %37 = getelementptr &(i8* %30)[i64 %36];
    store i8* %37 with i8 0;
    i8* %38 = getelementptr &(i8* %37)[i64 1];
    store i8* %38 with i8 0;
    i8* %39 = getelementptr &(i8* %37)[i64 2];
    store i8* %39 with i8 0;
    i8* %40 = getelementptr &(i8* %37)[i64 3];
    store i8* %40 with i8 0;
    i8* %41 = getelementptr &(i8* %37)[i64 4];
    store i8* %41 with i8 0;
    i8* %42 = getelementptr &(i8* %37)[i64 5];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %37)[i64 6];
    store i8* %43 with i8 0;
    i8* %44 = getelementptr &(i8* %37)[i64 7];
    store i8* %44 with i8 0;
    i8* %45 = getelementptr &(i8* %37)[i64 8];
    store i8* %45 with i8 0;
    i8* %46 = getelementptr &(i8* %37)[i64 9];
    store i8* %46 with i8 0;
    i8* %47 = getelementptr &(i8* %37)[i64 10];
    store i8* %47 with i8 0;
    i8* %48 = getelementptr &(i8* %37)[i64 11];
    store i8* %48 with i8 0;
    i8* %49 = getelementptr &(i8* %37)[i64 12];
    store i8* %49 with i8 0;
    i8* %50 = getelementptr &(i8* %37)[i64 13];
    store i8* %50 with i8 0;
    i8* %51 = getelementptr &(i8* %37)[i64 14];
    store i8* %51 with i8 0;
    i8* %52 = getelementptr &(i8* %37)[i64 15];
    store i8* %52 with i8 0;
    i64 %53 = add i64 %36, i64 16;
    i1 %54 = scmp lt i64 %53, i64 2048;
    cbr i1 %54(prob = 0.99), ^b19, ^while.header3;
^b20:
    i1 %55 = phi [^while.header1, i1 false] [^b18, i1 %35];
    cbr i1 %55(prob = 0.5), ^b21, ^b22;
^while.header2:
    i32 %56 = phi [^b17, i32 0] [^while.body2, i32 %61];
    i1 %57 = scmp lt i32 %56, i32 %31;
    cbr i1 %57(prob = 0.97), ^while.body2, ^entry2;
^b21:
    i1 %58 = scmp neq i32 %33, i32 43;
    ubr ^b22;
^while.body2:
    i32* %59 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %56];
    i32 %60 = call () -> i32 @getch();
    store i32* %59 with i32 %60;
    i32 %61 = add i32 %56, i32 1;
    ubr ^while.header2;
^b22:
    i1 %62 = phi [^b20, i1 false] [^b21, i1 %58];
    cbr i1 %62(prob = 0.5), ^b23, ^b24;
^while.header3:
    i32 %63 = phi [^b19, i32 0] [^b27, i32 %84];
    i32 %64 = phi [^b19, i32 0] [^b27, i32 %85];
    i32 %65 = phi [^b19, i32 0] [^b27, i32 %86];
    i32 %66 = phi [^b19, i32 0] [^b27, i32 %87];
    i32 %67 = phi [^b19, i32 0] [^b27, i32 %89];
    i1 %68 = scmp lt i32 %67, i32 %25;
    cbr i1 %68(prob = 0.97), ^while.body3, ^entry3;
^b23:
    i1 %69 = scmp neq i32 %33, i32 45;
    ubr ^b24;
^while.body3:
    i32* %70 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %67];
    i32 %71 = load i32* %70;
    i1 %72 = scmp eq i32 %71, i32 62;
    cbr i1 %72(prob = 0.5), ^if.then, ^if.else;
^b24:
    i1 %73 = phi [^b22, i1 false] [^b23, i1 %69];
    cbr i1 %73(prob = 0.5), ^b25, ^b26;
^entry3:
    call (i32) -> void @stoptime(i32 118);
    i1 %74 = scmp gt i32 %63, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body4, ^entry4;
^if.then:
    i32 %75 = add i32 %66, i32 1;
    ubr ^b27;
^b25:
    i1 %76 = scmp neq i32 %33, i32 91;
    ubr ^b26;
^if.else:
    i1 %77 = scmp eq i32 %71, i32 60;
    cbr i1 %77(prob = 0.5), ^if.then1, ^if.else1;
^while.body4:
    i32 %78 = phi [^entry3, i32 0] [^while.body4, i32 %81];
    i32* %79 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %78];
    i32 %80 = load i32* %79;
    call (i32) -> void @putch(i32 %80);
    i32 %81 = add i32 %78, i32 1;
    i1 %82 = scmp lt i32 %81, i32 %63;
    cbr i1 %82(prob = 0.97), ^while.body4, ^entry4;
^b26:
    i1 %83 = phi [^b24, i1 false] [^b25, i1 %76];
    cbr i1 %83(prob = 0.5), ^b28, ^b29;
^entry4:
    ret i32 0;
^b27:
    i32 %84 = phi [^if.then, i32 %63] [^if.then1, i32 %63] [^if.then2, i32 %63] [^if.then3, i32 %63] [^if.then5, i32 %63] [^while.header4, i32 %63] [^if.then7, i32 %63] [^if.else6, i32 %63] [^if.then8, i32 %131] [^if.else7, i32 %63] [^if.then12, i32 %63] [^if.else8, i32 %63];
    i32 %85 = phi [^if.then, i32 %64] [^if.then1, i32 %64] [^if.then2, i32 %64] [^if.then3, i32 %64] [^if.then5, i32 %64] [^while.header4, i32 %64] [^if.then7, i32 %64] [^if.else6, i32 %64] [^if.then8, i32 %64] [^if.else7, i32 %64] [^if.then12, i32 %64] [^if.else8, i32 %146];
    i32 %86 = phi [^if.then, i32 %65] [^if.then1, i32 %65] [^if.then2, i32 %65] [^if.then3, i32 %65] [^if.then5, i32 %113] [^while.header4, i32 %65] [^if.then7, i32 %124] [^if.else6, i32 %65] [^if.then8, i32 %65] [^if.else7, i32 %65] [^if.then12, i32 %65] [^if.else8, i32 %65];
    i32 %87 = phi [^if.then, i32 %75] [^if.then1, i32 %90] [^if.then2, i32 %66] [^if.then3, i32 %66] [^if.then5, i32 %66] [^while.header4, i32 %66] [^if.then7, i32 %66] [^if.else6, i32 %66] [^if.then8, i32 %66] [^if.else7, i32 %66] [^if.then12, i32 %66] [^if.else8, i32 %66];
    i32 %88 = phi [^if.then, i32 %67] [^if.then1, i32 %67] [^if.then2, i32 %67] [^if.then3, i32 %67] [^if.then5, i32 %67] [^while.header4, i32 %119] [^if.then7, i32 %67] [^if.else6, i32 %127] [^if.then8, i32 %67] [^if.else7, i32 %67] [^if.then12, i32 %67] [^if.else8, i32 %67];
    i32 %89 = add i32 %88, i32 1;
    ubr ^while.header3;
^if.then1:
    i32 %90 = add i32 %66, i32 -1;
    ubr ^b27;
^b28:
    i1 %91 = scmp neq i32 %33, i32 93;
    ubr ^b29;
^if.else1:
    i1 %92 = scmp eq i32 %71, i32 43;
    cbr i1 %92(prob = 0.5), ^if.then2, ^if.else2;
^b29:
    i1 %93 = phi [^b26, i1 false] [^b28, i1 %91];
    cbr i1 %93(prob = 0.5), ^b30, ^b31;
^if.then2:
    i32* %94 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %95, i32 1;
    store i32* %94 with i32 %96;
    ubr ^b27;
^b30:
    i1 %97 = scmp neq i32 %33, i32 46;
    ubr ^b31;
^if.else2:
    i1 %98 = scmp eq i32 %71, i32 45;
    cbr i1 %98(prob = 0.5), ^if.then3, ^if.else3;
^b31:
    i1 %99 = phi [^b29, i1 false] [^b30, i1 %97];
    cbr i1 %99(prob = 0.5), ^b32, ^b33;
^if.then3:
    i32* %100 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32 %101 = load i32* %100;
    i32 %102 = add i32 %101, i32 -1;
    store i32* %100 with i32 %102;
    ubr ^b27;
^b32:
    i1 %103 = scmp neq i32 %33, i32 44;
    ubr ^b33;
^if.else3:
    i1 %104 = scmp eq i32 %71, i32 91;
    cbr i1 %104(prob = 0.5), ^if.then4, ^if.else4;
^b33:
    i1 %105 = phi [^b31, i1 false] [^b32, i1 %103];
    cbr i1 %105(prob = 0.5), ^b34, ^b35;
^b34:
    i1 %106 = scmp neq i32 %33, i32 35;
    ubr ^b35;
^if.then4:
    i32* %107 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32 %108 = load i32* %107;
    i1 %109 = scmp neq i32 %108, i32 0;
    cbr i1 %109(prob = 0.5), ^if.then5, ^while.header4;
^if.else4:
    i1 %110 = scmp eq i32 %71, i32 93;
    cbr i1 %110(prob = 0.5), ^if.then6, ^if.else5;
^b35:
    i1 %111 = phi [^b33, i1 false] [^b34, i1 %106];
    cbr i1 %111(prob = 0.97), ^while.body5, ^while.body6;
^if.then5:
    i32* %112 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %65];
    store i32* %112 with i32 %67;
    i32 %113 = add i32 %65, i32 1;
    ubr ^b27;
^while.body5:
    i32 %114 = call () -> i32 @getch();
    ubr ^while.header1;
^if.then6:
    i32* %115 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32 %116 = load i32* %115;
    i1 %117 = scmp eq i32 %116, i32 0;
    cbr i1 %117(prob = 0.5), ^if.then7, ^if.else6;
^while.header4:
    i32 %118 = phi [^if.then4, i32 1] [^b36, i32 %138] [^if.then11, i32 %141];
    i32 %119 = phi [^if.then4, i32 %67] [^b36, i32 %132] [^if.then11, i32 %132];
    i1 %120 = scmp gt i32 %118, i32 0;
    cbr i1 %120(prob = 0.97), ^while.body7, ^b27;
^if.else5:
    i1 %121 = scmp eq i32 %71, i32 46;
    cbr i1 %121(prob = 0.5), ^if.then8, ^if.else7;
^while.body6:
    i32 %122 = add i32 %21, i32 1;
    i1 %123 = scmp neq i32 %33, i32 35;
    cbr i1 %123(prob = 0.97), ^while.body1, ^b16;
^if.then7:
    i32 %124 = add i32 %65, i32 -1;
    ubr ^b27;
^if.else6:
    i32 %125 = add i32 %65, i32 -1;
    i32* %126 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %125];
    i32 %127 = load i32* %126;
    ubr ^b27;
^if.then8:
    i32* %128 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %63];
    i32* %129 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32 %130 = load i32* %129;
    store i32* %128 with i32 %130;
    i32 %131 = add i32 %63, i32 1;
    ubr ^b27;
^while.body7:
    i32 %132 = add i32 %119, i32 1;
    i32* %133 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %132];
    i32 %134 = load i32* %133;
    i1 %135 = scmp eq i32 %134, i32 93;
    cbr i1 %135(prob = 0.5), ^if.then9, ^b36;
^if.else7:
    i1 %136 = scmp eq i32 %71, i32 44;
    cbr i1 %136(prob = 0.5), ^if.then10, ^b27;
^if.then9:
    i32 %137 = add i32 %118, i32 -1;
    ubr ^b36;
^b36:
    i32 %138 = phi [^while.body7, i32 %118] [^if.then9, i32 %137];
    i1 %139 = scmp eq i32 %134, i32 91;
    cbr i1 %139(prob = 0.5), ^if.then11, ^while.header4;
^if.then10:
    i1 %140 = scmp ge i32 %64, i32 %28;
    cbr i1 %140(prob = 0.5), ^if.then12, ^if.else8;
^if.then11:
    i32 %141 = add i32 %138, i32 1;
    ubr ^while.header4;
^if.then12:
    i32* %142 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    store i32* %142 with i32 0;
    ubr ^b27;
^if.else8:
    i32* %143 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %66];
    i32* %144 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %64];
    i32 %145 = load i32* %144;
    store i32* %143 with i32 %145;
    i32 %146 = add i32 %64, i32 1;
    ubr ^b27;
}
