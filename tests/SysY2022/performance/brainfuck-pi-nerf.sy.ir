internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program, align 8 { Flexible };
internal [65536 * i32]* @tape, align 8 { Flexible };
internal [65536 * i32]* @input, align 8 { Flexible };
internal [65536 * i32]* @output, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -35;
    i32 %2 = shl i32 1, i32 %1;
    i32 %3 = and i32 %2, i32 167776001;
    i1 %4 = icmp eq i32 %3, i32 0;
    i1 %5 = icmp slt i32 %1, i32 0;
    i1 %6 = or i1 %4, i1 %5;
    i32 %7 = add i32 %0, i32 -67;
    i32 %8 = shl i32 1, i32 %7;
    i32 %9 = and i32 %8, i32 83886080;
    i1 %10 = icmp eq i32 %9, i32 0;
    i1 %11 = icmp sge i32 %7, i32 0;
    i1 %12 = select i1 %11 ? i1 %10 : i1 %6;
    i1 %13 = icmp sgt i32 %0, i32 93;
    i1 %14 = or i1 %12, i1 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^entry1;
  ^entry1:
    i1 %15 = icmp neq i32 %0, i32 35;
    [65536 * i32]* %16 = ptrcast [65536 * i32]* @input to [65536 * i32]*;
    cbr i1 %15(prob = 0.97), ^indirect, ^b;
  ^indirect:
    [65536 * i32]* %17 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    ubr ^while.body1;
  ^b:
    i32 %18 = phi [^entry1, i32 0] [^while.body4, i32 %119];
    i32 %19 = call () -> i32 @getch();
    i1 %20 = icmp neq i32 %19, i32 105;
    cbr i1 %20(prob = 0.5), ^entry2, ^b1;
  ^while.body1:
    i32 %21 = phi [^indirect, i32 0] [^while.body4, i32 %119];
    i32 %22 = phi [^indirect, i32 %0] [^while.body4, i32 %30];
    i32* %23 = getelementptr &([65536 * i32]* %17)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    ubr ^while.body2;
  ^entry2:
    i32 %24 = phi [^b, i32 0] [^b1, i32 %27] [^while.body3, i32 %27];
    call (i32) -> void @starttime(i32 116);
    [512 * i32]* %25 = ptrcast [512 * i32]* @return_a to [512 * i32]*;
    i32* %26 = getelementptr &([512 * i32]* %25)[i64 0][i64 0];
    ubr ^b2;
  ^b1:
    i32 %27 = call () -> i32 @getint();
    i1 %28 = icmp sgt i32 %27, i32 0;
    i32 %29 = call () -> i32 @getch();
    cbr i1 %28(prob = 0.97), ^while.body3, ^entry2;
  ^while.body2:
    i32 %30 = call () -> i32 @getch();
    i32 %31 = add i32 %30, i32 -35;
    i32 %32 = shl i32 1, i32 %31;
    i32 %33 = and i32 %32, i32 167776001;
    i1 %34 = icmp eq i32 %33, i32 0;
    i1 %35 = icmp slt i32 %31, i32 0;
    i1 %36 = or i1 %34, i1 %35;
    i32 %37 = add i32 %30, i32 -67;
    i32 %38 = shl i32 1, i32 %37;
    i32 %39 = and i32 %38, i32 83886080;
    i1 %40 = icmp eq i32 %39, i32 0;
    i1 %41 = icmp sge i32 %37, i32 0;
    i1 %42 = select i1 %41 ? i1 %40 : i1 %36;
    i1 %43 = icmp sgt i32 %30, i32 93;
    i1 %44 = or i1 %42, i1 %43;
    cbr i1 %44(prob = 0.97), ^while.body2, ^while.body4;
  ^b2:
    i64 %45 = phi [^entry2, i64 0] [^b2, i64 %110];
    i32* %46 = getelementptr &(i32* %26)[i64 %45];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %46)[i64 2];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %46)[i64 3];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %46)[i64 4];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %46)[i64 5];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %46)[i64 6];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %46)[i64 7];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %46)[i64 8];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %46)[i64 9];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %46)[i64 10];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %46)[i64 11];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %46)[i64 12];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %46)[i64 13];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %46)[i64 14];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %46)[i64 15];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %46)[i64 16];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %46)[i64 17];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %46)[i64 18];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %46)[i64 19];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %46)[i64 20];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %46)[i64 21];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %46)[i64 22];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %46)[i64 23];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %46)[i64 24];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %46)[i64 25];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %46)[i64 26];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %46)[i64 27];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %46)[i64 28];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %46)[i64 29];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %46)[i64 30];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %46)[i64 31];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %46)[i64 32];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %46)[i64 33];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %46)[i64 34];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %46)[i64 35];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %46)[i64 36];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %46)[i64 37];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %46)[i64 38];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %46)[i64 39];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %46)[i64 40];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %46)[i64 41];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %46)[i64 42];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %46)[i64 43];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %46)[i64 44];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %46)[i64 45];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %46)[i64 46];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %46)[i64 47];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %46)[i64 48];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %46)[i64 49];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %46)[i64 50];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %46)[i64 51];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %46)[i64 52];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %46)[i64 53];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %46)[i64 54];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %46)[i64 55];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %46)[i64 56];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %46)[i64 57];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %46)[i64 58];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %46)[i64 59];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %46)[i64 60];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %46)[i64 61];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %46)[i64 62];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %46)[i64 63];
    store i32* %109 with i32 0;
    i64 %110 = add i64 %45, i64 64;
    i1 %111 = icmp slt i64 %110, i64 512;
    cbr i1 %111(prob = 0.88), ^b2, ^entry3;
  ^while.body3:
    i32 %112 = phi [^b1, i32 0] [^while.body3, i32 %115];
    i32 %113 = call () -> i32 @getch();
    i32* %114 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %112];
    store i32* %114 with i32 %113;
    i32 %115 = add i32 %112, i32 1;
    i1 %116 = icmp sgt i32 %27, i32 %115;
    cbr i1 %116(prob = 0.97), ^while.body3, ^entry2;
  ^entry3:
    [65536 * i32]* %117 = ptrcast [65536 * i32]* @program to [65536 * i32]*;
    [65536 * i32]* %118 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.body4:
    i32 %119 = add i32 %21, i32 1;
    i1 %120 = icmp neq i32 %30, i32 35;
    cbr i1 %120(prob = 0.97), ^while.body1, ^b;
  ^while.header:
    i32 %121 = phi [^entry3, i32 0] [^b3, i32 %139];
    i32 %122 = phi [^entry3, i32 0] [^b3, i32 %140];
    i32 %123 = phi [^entry3, i32 0] [^b3, i32 %141];
    i32 %124 = phi [^entry3, i32 0] [^b3, i32 %142];
    i32 %125 = phi [^entry3, i32 0] [^b3, i32 %144];
    i1 %126 = icmp sgt i32 %18, i32 %125;
    cbr i1 %126(prob = 0.97), ^while.body5, ^entry4;
  ^while.body5:
    i32* %127 = getelementptr &([65536 * i32]* %117)[i64 0][i32 %125];
    i32 %128 = load i32* %127;
    i1 %129 = icmp eq i32 %128, i32 62;
    cbr i1 %129(prob = 0.5), ^if.then, ^if.else;
  ^entry4:
    call (i32) -> void @stoptime(i32 118);
    i1 %130 = icmp sgt i32 %121, i32 0;
    [65536 * i32]* %131 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    cbr i1 %130(prob = 0.97), ^while.body6, ^entry5;
  ^if.then:
    i32 %132 = add i32 %124, i32 1;
    ubr ^b3;
  ^if.else:
    i1 %133 = icmp eq i32 %128, i32 60;
    cbr i1 %133(prob = 0.5), ^if.then1, ^if.else1;
  ^while.body6:
    i32 %134 = phi [^entry4, i32 0] [^while.body6, i32 %137];
    i32* %135 = getelementptr &([65536 * i32]* %131)[i64 0][i32 %134];
    i32 %136 = load i32* %135;
    call (i32) -> void @putch(i32 %136);
    i32 %137 = add i32 %134, i32 1;
    i1 %138 = icmp sgt i32 %121, i32 %137;
    cbr i1 %138(prob = 0.97), ^while.body6, ^entry5;
  ^entry5:
    ret i32 0;
  ^b3:
    i32 %139 = phi [^if.then, i32 %121] [^if.then1, i32 %121] [^if.then2, i32 %121] [^if.then3, i32 %121] [^if.then5, i32 %121] [^while.body7, i32 %121] [^if.then7, i32 %121] [^if.else6, i32 %121] [^if.then8, i32 %185] [^if.else7, i32 %121] [^if.then10, i32 %121] [^if.else8, i32 %121];
    i32 %140 = phi [^if.then, i32 %122] [^if.then1, i32 %122] [^if.then2, i32 %122] [^if.then3, i32 %122] [^if.then5, i32 %122] [^while.body7, i32 %122] [^if.then7, i32 %122] [^if.else6, i32 %122] [^if.then8, i32 %122] [^if.else7, i32 %122] [^if.then10, i32 %122] [^if.else8, i32 %192];
    i32 %141 = phi [^if.then, i32 %123] [^if.then1, i32 %123] [^if.then2, i32 %123] [^if.then3, i32 %123] [^if.then5, i32 %160] [^while.body7, i32 %123] [^if.then7, i32 %177] [^if.else6, i32 %123] [^if.then8, i32 %123] [^if.else7, i32 %123] [^if.then10, i32 %123] [^if.else8, i32 %123];
    i32 %142 = phi [^if.then, i32 %132] [^if.then1, i32 %145] [^if.then2, i32 %124] [^if.then3, i32 %124] [^if.then5, i32 %124] [^while.body7, i32 %124] [^if.then7, i32 %124] [^if.else6, i32 %124] [^if.then8, i32 %124] [^if.else7, i32 %124] [^if.then10, i32 %124] [^if.else8, i32 %124];
    i32 %143 = phi [^if.then, i32 %125] [^if.then1, i32 %125] [^if.then2, i32 %125] [^if.then3, i32 %125] [^if.then5, i32 %125] [^while.body7, i32 %166] [^if.then7, i32 %125] [^if.else6, i32 %180] [^if.then8, i32 %125] [^if.else7, i32 %125] [^if.then10, i32 %125] [^if.else8, i32 %125];
    i32 %144 = add i32 %143, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %145 = add i32 %124, i32 -1;
    ubr ^b3;
  ^if.else1:
    i1 %146 = icmp eq i32 %128, i32 43;
    cbr i1 %146(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %147 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %148, i32 1;
    store i32* %147 with i32 %149;
    ubr ^b3;
  ^if.else2:
    i1 %150 = icmp eq i32 %128, i32 45;
    cbr i1 %150(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %151 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %152, i32 -1;
    store i32* %151 with i32 %153;
    ubr ^b3;
  ^if.else3:
    i1 %154 = icmp eq i32 %128, i32 91;
    cbr i1 %154(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %155 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    i32 %156 = load i32* %155;
    i1 %157 = icmp neq i32 %156, i32 0;
    cbr i1 %157(prob = 0.5), ^if.then5, ^while.body7;
  ^if.else4:
    i1 %158 = icmp eq i32 %128, i32 93;
    cbr i1 %158(prob = 0.5), ^if.then6, ^if.else5;
  ^if.then5:
    i32* %159 = getelementptr &([512 * i32]* %25)[i64 0][i32 %123];
    store i32* %159 with i32 %125;
    i32 %160 = add i32 %123, i32 1;
    ubr ^b3;
  ^if.then6:
    i32* %161 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    i32 %162 = load i32* %161;
    i1 %163 = icmp eq i32 %162, i32 0;
    cbr i1 %163(prob = 0.5), ^if.then7, ^if.else6;
  ^while.body7:
    i32 %164 = phi [^if.then4, i32 1] [^while.body7, i32 %174];
    i32 %165 = phi [^if.then4, i32 %125] [^while.body7, i32 %166];
    i32 %166 = add i32 %165, i32 1;
    i32* %167 = getelementptr &([65536 * i32]* %117)[i64 0][i32 %166];
    i32 %168 = load i32* %167;
    i1 %169 = icmp eq i32 %168, i32 93;
    i32 %170 = zext i1 %169 to i32;
    i32 %171 = sub i32 %164, i32 %170;
    i1 %172 = icmp eq i32 %168, i32 91;
    i32 %173 = zext i1 %172 to i32;
    i32 %174 = add i32 %171, i32 %173;
    i1 %175 = icmp sgt i32 %174, i32 0;
    cbr i1 %175(prob = 0.97), ^while.body7, ^b3;
  ^if.else5:
    i1 %176 = icmp eq i32 %128, i32 46;
    cbr i1 %176(prob = 0.5), ^if.then8, ^if.else7;
  ^if.then7:
    i32 %177 = add i32 %123, i32 -1;
    ubr ^b3;
  ^if.else6:
    i32 %178 = add i32 %123, i32 -1;
    i32* %179 = getelementptr &([512 * i32]* %25)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    ubr ^b3;
  ^if.then8:
    i32* %181 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    i32 %182 = load i32* %181;
    [65536 * i32]* %183 = ptrcast [65536 * i32]* @output to [65536 * i32]*;
    i32* %184 = getelementptr &([65536 * i32]* %183)[i64 0][i32 %121];
    store i32* %184 with i32 %182;
    i32 %185 = add i32 %121, i32 1;
    ubr ^b3;
  ^if.else7:
    i1 %186 = icmp eq i32 %128, i32 44;
    cbr i1 %186(prob = 0.5), ^if.then9, ^b3;
  ^if.then9:
    i1 %187 = icmp sle i32 %24, i32 %122;
    cbr i1 %187(prob = 0.5), ^if.then10, ^if.else8;
  ^if.then10:
    i32* %188 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    store i32* %188 with i32 0;
    ubr ^b3;
  ^if.else8:
    i32* %189 = getelementptr &([65536 * i32]* %16)[i64 0][i32 %122];
    i32 %190 = load i32* %189;
    i32* %191 = getelementptr &([65536 * i32]* %118)[i64 0][i32 %124];
    store i32* %191 with i32 %190;
    i32 %192 = add i32 %122, i32 1;
    ubr ^b3;
}
internal [512 * i32]* @return_a, align 8 { Flexible };
