internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [8192 * f32]* %y = alloc [8192 * f32];
    [8192 * f32]* %x = alloc [8192 * f32];
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    call (i32) -> void @starttime(i32 22);
    f32* %2 = getelementptr &([8192 * f32]* %x)[i64 0][i64 0];
    f32* %3 = getelementptr &([8192 * f32]* %y)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    f32 %4 = phi [^entry, f32 0] [^b2, f32 %30];
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %18];
    f32 %6 = phi [^entry, f32 1] [^b2, f32 %19];
    f32 %7 = phi [^entry, f32 0] [^b2, f32 %20];
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %31];
    i1 %9 = scmp lt i32 %8, i32 100000;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %10 = srem i32 %8, i32 10;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^while.header1, ^if.else;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %12 = fsub f32 %4, f32 1.8338e+16;
    i1 %13 = fcmp le f32 %12, f32 1e-06;
    i1 %14 = fcmp ge f32 %12, f32 -1e-06;
    i1 %15 = or i1 %13, i1 %14;
    cbr i1 %15(prob = 0.75), ^if.then, ^if.else1;
  ^if.else:
    f32 %16 = fadd f32 %7, f32 0.1;
    f32 %17 = fadd f32 %6, f32 0.2;
    ubr ^while.header1;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b1;
  ^while.header1:
    i32 %18 = phi [^while.body, i32 %5] [^if.else, i32 %5] [^while.body1, i32 %27];
    f32 %19 = phi [^while.body, f32 1] [^if.else, f32 %17] [^while.body1, f32 %19];
    f32 %20 = phi [^while.body, f32 0] [^if.else, f32 %16] [^while.body1, f32 %20];
    i1 %21 = scmp lt i32 %18, i32 %0;
    cbr i1 %21(prob = 0.97), ^while.body1, ^entry1;
  ^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
  ^while.body1:
    f32 %22 = s2f i32 %18 to f32;
    f32 %23 = fadd f32 %20, f32 %22;
    f32* %24 = getelementptr &([8192 * f32]* %x)[i64 0][i32 %18];
    store f32* %24 with f32 %23;
    f32 %25 = fadd f32 %19, f32 %22;
    f32* %26 = getelementptr &([8192 * f32]* %y)[i64 0][i32 %18];
    store f32* %26 with f32 %25;
    i32 %27 = add i32 %18, i32 1;
    ubr ^while.header1;
  ^entry1:
    cbr i1 %1(prob = 0.97), ^super.header, ^b2;
  ^b1:
    i32 %28 = phi [^if.then, i32 0] [^if.else1, i32 1];
    ret i32 %28;
  ^b2:
    f32 %29 = phi [^entry1, f32 0] [^while.body5, f32 %339];
    f32 %30 = fadd f32 %4, f32 %29;
    i32 %31 = add i32 %8, i32 1;
    ubr ^while.header;
  ^super.header:
    f32 %32 = phi [^entry1, f32 0] [^while.body2, f32 %131];
    i32 %33 = phi [^entry1, i32 0] [^while.body2, i32 %34];
    i32 %34 = add i32 %33, i32 16;
    i1 %35 = scmp lt i32 %34, i32 %0;
    cbr i1 %35(prob = 0.67), ^while.body2, ^super.header1;
  ^while.body2:
    f32* %36 = getelementptr &(f32* %2)[i32 %33];
    f32 %37 = load f32* %36;
    f32* %38 = getelementptr &(f32* %3)[i32 %33];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &(f32* %36)[i64 1];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &(f32* %38)[i64 1];
    f32 %43 = load f32* %42;
    f32 %44 = fmul f32 %41, f32 %43;
    f32 %45 = fmul f32 %37, f32 %39;
    f32 %46 = fadd f32 %32, f32 %45;
    f32 %47 = fadd f32 %46, f32 %44;
    f32* %48 = getelementptr &(f32* %36)[i64 2];
    f32 %49 = load f32* %48;
    f32* %50 = getelementptr &(f32* %38)[i64 2];
    f32 %51 = load f32* %50;
    f32 %52 = fmul f32 %49, f32 %51;
    f32 %53 = fadd f32 %47, f32 %52;
    f32* %54 = getelementptr &(f32* %36)[i64 3];
    f32 %55 = load f32* %54;
    f32* %56 = getelementptr &(f32* %38)[i64 3];
    f32 %57 = load f32* %56;
    f32 %58 = fmul f32 %55, f32 %57;
    f32 %59 = fadd f32 %53, f32 %58;
    f32* %60 = getelementptr &(f32* %36)[i64 4];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &(f32* %38)[i64 4];
    f32 %63 = load f32* %62;
    f32 %64 = fmul f32 %61, f32 %63;
    f32 %65 = fadd f32 %59, f32 %64;
    f32* %66 = getelementptr &(f32* %36)[i64 5];
    f32 %67 = load f32* %66;
    f32* %68 = getelementptr &(f32* %38)[i64 5];
    f32 %69 = load f32* %68;
    f32 %70 = fmul f32 %67, f32 %69;
    f32 %71 = fadd f32 %65, f32 %70;
    f32* %72 = getelementptr &(f32* %36)[i64 6];
    f32 %73 = load f32* %72;
    f32* %74 = getelementptr &(f32* %38)[i64 6];
    f32 %75 = load f32* %74;
    f32 %76 = fmul f32 %73, f32 %75;
    f32 %77 = fadd f32 %71, f32 %76;
    f32* %78 = getelementptr &(f32* %36)[i64 7];
    f32 %79 = load f32* %78;
    f32* %80 = getelementptr &(f32* %38)[i64 7];
    f32 %81 = load f32* %80;
    f32 %82 = fmul f32 %79, f32 %81;
    f32 %83 = fadd f32 %77, f32 %82;
    f32* %84 = getelementptr &(f32* %36)[i64 8];
    f32 %85 = load f32* %84;
    f32* %86 = getelementptr &(f32* %38)[i64 8];
    f32 %87 = load f32* %86;
    f32 %88 = fmul f32 %85, f32 %87;
    f32 %89 = fadd f32 %83, f32 %88;
    f32* %90 = getelementptr &(f32* %36)[i64 9];
    f32 %91 = load f32* %90;
    f32* %92 = getelementptr &(f32* %38)[i64 9];
    f32 %93 = load f32* %92;
    f32 %94 = fmul f32 %91, f32 %93;
    f32 %95 = fadd f32 %89, f32 %94;
    f32* %96 = getelementptr &(f32* %36)[i64 10];
    f32 %97 = load f32* %96;
    f32* %98 = getelementptr &(f32* %38)[i64 10];
    f32 %99 = load f32* %98;
    f32 %100 = fmul f32 %97, f32 %99;
    f32 %101 = fadd f32 %95, f32 %100;
    f32* %102 = getelementptr &(f32* %36)[i64 11];
    f32 %103 = load f32* %102;
    f32* %104 = getelementptr &(f32* %38)[i64 11];
    f32 %105 = load f32* %104;
    f32 %106 = fmul f32 %103, f32 %105;
    f32 %107 = fadd f32 %101, f32 %106;
    f32* %108 = getelementptr &(f32* %36)[i64 12];
    f32 %109 = load f32* %108;
    f32* %110 = getelementptr &(f32* %38)[i64 12];
    f32 %111 = load f32* %110;
    f32 %112 = fmul f32 %109, f32 %111;
    f32 %113 = fadd f32 %107, f32 %112;
    f32* %114 = getelementptr &(f32* %36)[i64 13];
    f32 %115 = load f32* %114;
    f32* %116 = getelementptr &(f32* %38)[i64 13];
    f32 %117 = load f32* %116;
    f32 %118 = fmul f32 %115, f32 %117;
    f32 %119 = fadd f32 %113, f32 %118;
    f32* %120 = getelementptr &(f32* %36)[i64 14];
    f32 %121 = load f32* %120;
    f32* %122 = getelementptr &(f32* %38)[i64 14];
    f32 %123 = load f32* %122;
    f32 %124 = fmul f32 %121, f32 %123;
    f32 %125 = fadd f32 %119, f32 %124;
    f32* %126 = getelementptr &(f32* %36)[i64 15];
    f32 %127 = load f32* %126;
    f32* %128 = getelementptr &(f32* %38)[i64 15];
    f32 %129 = load f32* %128;
    f32 %130 = fmul f32 %127, f32 %129;
    f32 %131 = fadd f32 %125, f32 %130;
    ubr ^super.header;
  ^super.header1:
    f32 %132 = phi [^super.header, f32 %32] [^while.body3, f32 %231];
    i32 %133 = phi [^super.header, i32 %33] [^while.body3, i32 %134];
    i32 %134 = add i32 %133, i32 16;
    i1 %135 = scmp lt i32 %134, i32 %0;
    cbr i1 %135(prob = 0.67), ^while.body3, ^super.header2;
  ^while.body3:
    f32* %136 = getelementptr &(f32* %2)[i32 %133];
    f32 %137 = load f32* %136;
    f32* %138 = getelementptr &(f32* %3)[i32 %133];
    f32 %139 = load f32* %138;
    f32* %140 = getelementptr &(f32* %136)[i64 1];
    f32 %141 = load f32* %140;
    f32* %142 = getelementptr &(f32* %138)[i64 1];
    f32 %143 = load f32* %142;
    f32 %144 = fmul f32 %141, f32 %143;
    f32 %145 = fmul f32 %137, f32 %139;
    f32 %146 = fadd f32 %132, f32 %145;
    f32 %147 = fadd f32 %146, f32 %144;
    f32* %148 = getelementptr &(f32* %136)[i64 2];
    f32 %149 = load f32* %148;
    f32* %150 = getelementptr &(f32* %138)[i64 2];
    f32 %151 = load f32* %150;
    f32 %152 = fmul f32 %149, f32 %151;
    f32 %153 = fadd f32 %147, f32 %152;
    f32* %154 = getelementptr &(f32* %136)[i64 3];
    f32 %155 = load f32* %154;
    f32* %156 = getelementptr &(f32* %138)[i64 3];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %155, f32 %157;
    f32 %159 = fadd f32 %153, f32 %158;
    f32* %160 = getelementptr &(f32* %136)[i64 4];
    f32 %161 = load f32* %160;
    f32* %162 = getelementptr &(f32* %138)[i64 4];
    f32 %163 = load f32* %162;
    f32 %164 = fmul f32 %161, f32 %163;
    f32 %165 = fadd f32 %159, f32 %164;
    f32* %166 = getelementptr &(f32* %136)[i64 5];
    f32 %167 = load f32* %166;
    f32* %168 = getelementptr &(f32* %138)[i64 5];
    f32 %169 = load f32* %168;
    f32 %170 = fmul f32 %167, f32 %169;
    f32 %171 = fadd f32 %165, f32 %170;
    f32* %172 = getelementptr &(f32* %136)[i64 6];
    f32 %173 = load f32* %172;
    f32* %174 = getelementptr &(f32* %138)[i64 6];
    f32 %175 = load f32* %174;
    f32 %176 = fmul f32 %173, f32 %175;
    f32 %177 = fadd f32 %171, f32 %176;
    f32* %178 = getelementptr &(f32* %136)[i64 7];
    f32 %179 = load f32* %178;
    f32* %180 = getelementptr &(f32* %138)[i64 7];
    f32 %181 = load f32* %180;
    f32 %182 = fmul f32 %179, f32 %181;
    f32 %183 = fadd f32 %177, f32 %182;
    f32* %184 = getelementptr &(f32* %136)[i64 8];
    f32 %185 = load f32* %184;
    f32* %186 = getelementptr &(f32* %138)[i64 8];
    f32 %187 = load f32* %186;
    f32 %188 = fmul f32 %185, f32 %187;
    f32 %189 = fadd f32 %183, f32 %188;
    f32* %190 = getelementptr &(f32* %136)[i64 9];
    f32 %191 = load f32* %190;
    f32* %192 = getelementptr &(f32* %138)[i64 9];
    f32 %193 = load f32* %192;
    f32 %194 = fmul f32 %191, f32 %193;
    f32 %195 = fadd f32 %189, f32 %194;
    f32* %196 = getelementptr &(f32* %136)[i64 10];
    f32 %197 = load f32* %196;
    f32* %198 = getelementptr &(f32* %138)[i64 10];
    f32 %199 = load f32* %198;
    f32 %200 = fmul f32 %197, f32 %199;
    f32 %201 = fadd f32 %195, f32 %200;
    f32* %202 = getelementptr &(f32* %136)[i64 11];
    f32 %203 = load f32* %202;
    f32* %204 = getelementptr &(f32* %138)[i64 11];
    f32 %205 = load f32* %204;
    f32 %206 = fmul f32 %203, f32 %205;
    f32 %207 = fadd f32 %201, f32 %206;
    f32* %208 = getelementptr &(f32* %136)[i64 12];
    f32 %209 = load f32* %208;
    f32* %210 = getelementptr &(f32* %138)[i64 12];
    f32 %211 = load f32* %210;
    f32 %212 = fmul f32 %209, f32 %211;
    f32 %213 = fadd f32 %207, f32 %212;
    f32* %214 = getelementptr &(f32* %136)[i64 13];
    f32 %215 = load f32* %214;
    f32* %216 = getelementptr &(f32* %138)[i64 13];
    f32 %217 = load f32* %216;
    f32 %218 = fmul f32 %215, f32 %217;
    f32 %219 = fadd f32 %213, f32 %218;
    f32* %220 = getelementptr &(f32* %136)[i64 14];
    f32 %221 = load f32* %220;
    f32* %222 = getelementptr &(f32* %138)[i64 14];
    f32 %223 = load f32* %222;
    f32 %224 = fmul f32 %221, f32 %223;
    f32 %225 = fadd f32 %219, f32 %224;
    f32* %226 = getelementptr &(f32* %136)[i64 15];
    f32 %227 = load f32* %226;
    f32* %228 = getelementptr &(f32* %138)[i64 15];
    f32 %229 = load f32* %228;
    f32 %230 = fmul f32 %227, f32 %229;
    f32 %231 = fadd f32 %225, f32 %230;
    ubr ^super.header1;
  ^super.header2:
    f32 %232 = phi [^super.header1, f32 %132] [^while.body4, f32 %331];
    i32 %233 = phi [^super.header1, i32 %133] [^while.body4, i32 %234];
    i32 %234 = add i32 %233, i32 16;
    i1 %235 = scmp lt i32 %234, i32 %0;
    cbr i1 %235(prob = 0.67), ^while.body4, ^while.body5;
  ^while.body4:
    f32* %236 = getelementptr &(f32* %2)[i32 %233];
    f32 %237 = load f32* %236;
    f32* %238 = getelementptr &(f32* %3)[i32 %233];
    f32 %239 = load f32* %238;
    f32* %240 = getelementptr &(f32* %236)[i64 1];
    f32 %241 = load f32* %240;
    f32* %242 = getelementptr &(f32* %238)[i64 1];
    f32 %243 = load f32* %242;
    f32 %244 = fmul f32 %241, f32 %243;
    f32 %245 = fmul f32 %237, f32 %239;
    f32 %246 = fadd f32 %232, f32 %245;
    f32 %247 = fadd f32 %246, f32 %244;
    f32* %248 = getelementptr &(f32* %236)[i64 2];
    f32 %249 = load f32* %248;
    f32* %250 = getelementptr &(f32* %238)[i64 2];
    f32 %251 = load f32* %250;
    f32 %252 = fmul f32 %249, f32 %251;
    f32 %253 = fadd f32 %247, f32 %252;
    f32* %254 = getelementptr &(f32* %236)[i64 3];
    f32 %255 = load f32* %254;
    f32* %256 = getelementptr &(f32* %238)[i64 3];
    f32 %257 = load f32* %256;
    f32 %258 = fmul f32 %255, f32 %257;
    f32 %259 = fadd f32 %253, f32 %258;
    f32* %260 = getelementptr &(f32* %236)[i64 4];
    f32 %261 = load f32* %260;
    f32* %262 = getelementptr &(f32* %238)[i64 4];
    f32 %263 = load f32* %262;
    f32 %264 = fmul f32 %261, f32 %263;
    f32 %265 = fadd f32 %259, f32 %264;
    f32* %266 = getelementptr &(f32* %236)[i64 5];
    f32 %267 = load f32* %266;
    f32* %268 = getelementptr &(f32* %238)[i64 5];
    f32 %269 = load f32* %268;
    f32 %270 = fmul f32 %267, f32 %269;
    f32 %271 = fadd f32 %265, f32 %270;
    f32* %272 = getelementptr &(f32* %236)[i64 6];
    f32 %273 = load f32* %272;
    f32* %274 = getelementptr &(f32* %238)[i64 6];
    f32 %275 = load f32* %274;
    f32 %276 = fmul f32 %273, f32 %275;
    f32 %277 = fadd f32 %271, f32 %276;
    f32* %278 = getelementptr &(f32* %236)[i64 7];
    f32 %279 = load f32* %278;
    f32* %280 = getelementptr &(f32* %238)[i64 7];
    f32 %281 = load f32* %280;
    f32 %282 = fmul f32 %279, f32 %281;
    f32 %283 = fadd f32 %277, f32 %282;
    f32* %284 = getelementptr &(f32* %236)[i64 8];
    f32 %285 = load f32* %284;
    f32* %286 = getelementptr &(f32* %238)[i64 8];
    f32 %287 = load f32* %286;
    f32 %288 = fmul f32 %285, f32 %287;
    f32 %289 = fadd f32 %283, f32 %288;
    f32* %290 = getelementptr &(f32* %236)[i64 9];
    f32 %291 = load f32* %290;
    f32* %292 = getelementptr &(f32* %238)[i64 9];
    f32 %293 = load f32* %292;
    f32 %294 = fmul f32 %291, f32 %293;
    f32 %295 = fadd f32 %289, f32 %294;
    f32* %296 = getelementptr &(f32* %236)[i64 10];
    f32 %297 = load f32* %296;
    f32* %298 = getelementptr &(f32* %238)[i64 10];
    f32 %299 = load f32* %298;
    f32 %300 = fmul f32 %297, f32 %299;
    f32 %301 = fadd f32 %295, f32 %300;
    f32* %302 = getelementptr &(f32* %236)[i64 11];
    f32 %303 = load f32* %302;
    f32* %304 = getelementptr &(f32* %238)[i64 11];
    f32 %305 = load f32* %304;
    f32 %306 = fmul f32 %303, f32 %305;
    f32 %307 = fadd f32 %301, f32 %306;
    f32* %308 = getelementptr &(f32* %236)[i64 12];
    f32 %309 = load f32* %308;
    f32* %310 = getelementptr &(f32* %238)[i64 12];
    f32 %311 = load f32* %310;
    f32 %312 = fmul f32 %309, f32 %311;
    f32 %313 = fadd f32 %307, f32 %312;
    f32* %314 = getelementptr &(f32* %236)[i64 13];
    f32 %315 = load f32* %314;
    f32* %316 = getelementptr &(f32* %238)[i64 13];
    f32 %317 = load f32* %316;
    f32 %318 = fmul f32 %315, f32 %317;
    f32 %319 = fadd f32 %313, f32 %318;
    f32* %320 = getelementptr &(f32* %236)[i64 14];
    f32 %321 = load f32* %320;
    f32* %322 = getelementptr &(f32* %238)[i64 14];
    f32 %323 = load f32* %322;
    f32 %324 = fmul f32 %321, f32 %323;
    f32 %325 = fadd f32 %319, f32 %324;
    f32* %326 = getelementptr &(f32* %236)[i64 15];
    f32 %327 = load f32* %326;
    f32* %328 = getelementptr &(f32* %238)[i64 15];
    f32 %329 = load f32* %328;
    f32 %330 = fmul f32 %327, f32 %329;
    f32 %331 = fadd f32 %325, f32 %330;
    ubr ^super.header2;
  ^while.body5:
    f32 %332 = phi [^super.header2, f32 %232] [^while.body5, f32 %339];
    i32 %333 = phi [^super.header2, i32 %233] [^while.body5, i32 %340];
    f32* %334 = getelementptr &(f32* %2)[i32 %333];
    f32 %335 = load f32* %334;
    f32* %336 = getelementptr &(f32* %3)[i32 %333];
    f32 %337 = load f32* %336;
    f32 %338 = fmul f32 %335, f32 %337;
    f32 %339 = fadd f32 %332, f32 %338;
    i32 %340 = add i32 %333, i32 1;
    i1 %341 = scmp lt i32 %340, i32 %0;
    cbr i1 %341(prob = 0.97), ^while.body5, ^b2;
}
