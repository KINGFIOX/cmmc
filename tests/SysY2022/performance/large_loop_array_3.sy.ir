internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8192 * f32]* %y = alloc [8192 * f32];
    [8192 * f32]* %x = alloc [8192 * f32];
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    f32* %1 = getelementptr &([8192 * f32]* %x)[i64 0][i64 0];
    f32* %2 = getelementptr &([8192 * f32]* %y)[i64 0][i64 0];
    i1 %3 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^entry, i32 0] [^b2, i32 %18];
    f32 %5 = phi [^entry, f32 1] [^b2, f32 %19];
    f32 %6 = phi [^entry, f32 0] [^b2, f32 %20];
    i32 %7 = phi [^entry, i32 0] [^b2, i32 %31];
    f32 %8 = phi [^entry, f32 0] [^b2, f32 %30];
    i1 %9 = scmp lt i32 %7, i32 100000;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %10 = srem i32 %7, i32 10;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^while.header1, ^if.else;
^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %12 = fsub f32 %8, f32 1.8338e+16;
    i1 %13 = fcmp le f32 %12, f32 1e-06;
    i1 %14 = fcmp ge f32 %12, f32 -1e-06;
    i1 %15 = or i1 %14, i1 %13;
    cbr i1 %15(prob = 0.75), ^if.then, ^if.else1;
^if.else:
    f32 %16 = fadd f32 %6, f32 0.1;
    f32 %17 = fadd f32 %5, f32 0.2;
    ubr ^while.header1;
^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b1;
^while.header1:
    i32 %18 = phi [^while.body, i32 %4] [^if.else, i32 %4] [^while.body1, i32 %27];
    f32 %19 = phi [^while.body, f32 1] [^if.else, f32 %17] [^while.body1, f32 %19];
    f32 %20 = phi [^while.body, f32 0] [^if.else, f32 %16] [^while.body1, f32 %20];
    i1 %21 = scmp lt i32 %18, i32 %0;
    cbr i1 %21(prob = 0.97), ^while.body1, ^entry1;
^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
^while.body1:
    f32* %22 = getelementptr &([8192 * f32]* %x)[i64 0][i32 %18];
    f32 %23 = s2f i32 %18 to f32;
    f32 %24 = fadd f32 %20, f32 %23;
    store f32* %22 with f32 %24;
    f32* %25 = getelementptr &([8192 * f32]* %y)[i64 0][i32 %18];
    f32 %26 = fadd f32 %19, f32 %23;
    store f32* %25 with f32 %26;
    i32 %27 = add i32 %18, i32 1;
    ubr ^while.header1;
^entry1:
    cbr i1 %3(prob = 0.97), ^while.body2, ^b2;
^b1:
    i32 %28 = phi [^if.then, i32 0] [^if.else1, i32 1];
    ret i32 %28;
^b2:
    f32 %29 = phi [^entry1, f32 0] [^while.body2, f32 %39];
    f32 %30 = fadd f32 %8, f32 %29;
    i32 %31 = add i32 %7, i32 1;
    ubr ^while.header;
^while.body2:
    f32 %32 = phi [^entry1, f32 0] [^while.body2, f32 %39];
    i32 %33 = phi [^entry1, i32 0] [^while.body2, i32 %40];
    f32* %34 = getelementptr &(f32* %1)[i32 %33];
    f32 %35 = load f32* %34;
    f32* %36 = getelementptr &(f32* %2)[i32 %33];
    f32 %37 = load f32* %36;
    f32 %38 = fmul f32 %35, f32 %37;
    f32 %39 = fadd f32 %32, f32 %38;
    i32 %40 = add i32 %33, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %0;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b2;
}
