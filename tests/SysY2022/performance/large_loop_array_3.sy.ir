internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 3;
    i32 %3 = add i32 %0, i32 -3;
    [8192 * f32]* %4 = ptrcast [8192 * f32]* @x to [8192 * f32]*;
    f32* %5 = getelementptr &([8192 * f32]* %4)[i64 0][i64 0];
    [8192 * f32]* %6 = ptrcast [8192 * f32]* @y to [8192 * f32]*;
    f32* %7 = getelementptr &([8192 * f32]* %6)[i64 0][i64 0];
    [40 * i8]* %8 = ptrcast [40 * i8]* @cmmc_parallel_body_payload_0 to [40 * i8]*;
    i32* %9 = ptradd [40 * i8]* %8, i32 0;
    [8192 * f32]** %10 = ptradd [40 * i8]* %8, i32 8;
    f32* %11 = ptradd [40 * i8]* %8, i32 16;
    [8192 * f32]** %12 = ptradd [40 * i8]* %8, i32 24;
    f32* %13 = ptradd [40 * i8]* %8, i32 32;
    i32* %14 = ptradd [40 * i8]* %8, i32 36;
    i8* %15 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    ubr ^while.body;
  ^while.body:
    i32 %16 = phi [^entry, i32 0] [^b2, i32 %31];
    f32 %17 = phi [^entry, f32 0] [^b2, f32 %26];
    f32 %18 = phi [^entry, f32 1] [^b2, f32 %24];
    i32 %19 = phi [^entry, i32 0] [^b2, i32 %28];
    f32 %20 = phi [^entry, f32 0] [^b2, f32 %30];
    i32 %21 = srem i32 %16, i32 10;
    i1 %22 = icmp neq i32 %21, i32 0;
    f32 %23 = fadd f32 %18, f32 0.2;
    f32 %24 = select i1 %22 ? f32 1 : f32 %23;
    f32 %25 = fadd f32 %17, f32 0.1;
    f32 %26 = select i1 %22 ? f32 0 : f32 %25;
    i1 %27 = icmp sgt i32 %0, i32 %19;
    cbr i1 %27(prob = 0.984615), ^b, ^b1;
  ^b:
    store i32* %9 with i32 %19;
    store [8192 * f32]** %10 with [8192 * f32]* %4;
    store f32* %11 with f32 %26;
    store [8192 * f32]** %12 with [8192 * f32]* %6;
    store f32* %13 with f32 %24;
    store i32* %14 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 %19, i32 %0, i8* %15);
    ubr ^b1;
  ^b1:
    i32 %28 = phi [^while.body, i32 %19] [^b, i32 %0];
    cbr i1 %1(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    cbr i1 %2(prob = 0.941176), ^while.body1, ^scalar.header;
  ^b2:
    f32 %29 = phi [^b1, f32 0] [^scalar.header, f32 %63] [^while.body2, f32 %72];
    f32 %30 = fadd f32 %20, f32 %29;
    i32 %31 = add i32 %16, i32 1;
    i1 %32 = icmp slt i32 %31, i32 100000;
    cbr i1 %32(prob = 0.99999), ^while.body, ^b3;
  ^while.body1:
    f32 %33 = phi [^super.header, f32 0] [^while.body1, f32 %58];
    i32 %34 = phi [^super.header, i32 0] [^while.body1, i32 %59];
    f32* %35 = getelementptr &(f32* %5)[i32 %34];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %7)[i32 %34];
    f32 %38 = load f32* %37;
    f32 %39 = fmul f32 %36, f32 %38;
    f32 %40 = fadd f32 %33, f32 %39;
    f32* %41 = getelementptr &(f32* %35)[i64 1];
    f32 %42 = load f32* %41;
    f32* %43 = getelementptr &(f32* %37)[i64 1];
    f32 %44 = load f32* %43;
    f32 %45 = fmul f32 %42, f32 %44;
    f32 %46 = fadd f32 %40, f32 %45;
    f32* %47 = getelementptr &(f32* %35)[i64 2];
    f32 %48 = load f32* %47;
    f32* %49 = getelementptr &(f32* %37)[i64 2];
    f32 %50 = load f32* %49;
    f32 %51 = fmul f32 %48, f32 %50;
    f32 %52 = fadd f32 %46, f32 %51;
    f32* %53 = getelementptr &(f32* %35)[i64 3];
    f32 %54 = load f32* %53;
    f32* %55 = getelementptr &(f32* %37)[i64 3];
    f32 %56 = load f32* %55;
    f32 %57 = fmul f32 %54, f32 %56;
    f32 %58 = fadd f32 %52, f32 %57;
    i32 %59 = add i32 %34, i32 4;
    i1 %60 = icmp sgt i32 %3, i32 %59;
    cbr i1 %60(prob = 0.941176), ^while.body1, ^scalar.header;
  ^scalar.header:
    f32 %61 = phi [^super.header, f32 0] [^while.body1, f32 %58];
    i32 %62 = phi [^super.header, i32 0] [^while.body1, i32 %59];
    f32 %63 = phi [^super.header, f32 undef] [^while.body1, f32 %58];
    i1 %64 = icmp sgt i32 %0, i32 %62;
    cbr i1 %64(prob = 0.75), ^while.body2, ^b2;
  ^b3:
    call (i32) -> void @stoptime(i32 39);
    call (f32) -> void @putfloat(f32 %30);
    ret i32 0;
  ^while.body2 {scalar}:
    i32 %65 = phi [^scalar.header, i32 %62] [^while.body2, i32 %73];
    f32 %66 = phi [^scalar.header, f32 %61] [^while.body2, f32 %72];
    f32* %67 = getelementptr &(f32* %5)[i32 %65];
    f32 %68 = load f32* %67;
    f32* %69 = getelementptr &(f32* %7)[i32 %65];
    f32 %70 = load f32* %69;
    f32 %71 = fmul f32 %68, f32 %70;
    f32 %72 = fadd f32 %66, f32 %71;
    i32 %73 = add i32 %65, i32 1;
    i1 %74 = icmp sgt i32 %0, i32 %73;
    cbr i1 %74(prob = 0.75), ^while.body2, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [40 * i8]* %4 = ptrcast [40 * i8]* @cmmc_parallel_body_payload_0 to [40 * i8]*;
    [8192 * f32]** %5 = ptradd [40 * i8]* %4, i32 8;
    [8192 * f32]* %6 = load [8192 * f32]** %5;
    f32* %7 = ptradd [40 * i8]* %4, i32 16;
    f32 %8 = load f32* %7;
    [8192 * f32]** %9 = ptradd [40 * i8]* %4, i32 24;
    [8192 * f32]* %10 = load [8192 * f32]** %9;
    f32* %11 = ptradd [40 * i8]* %4, i32 32;
    f32 %12 = load f32* %11;
    i32 %13 = add i32 %1, i32 -3;
    cbr i1 %3(prob = 0.941176), ^b1, ^scalar.header;
  ^b1:
    i32 %14 = phi [^b, i32 %0] [^b1, i32 %38];
    f32 %15 = s2f i32 %14 to f32;
    f32 %16 = fadd f32 %8, f32 %15;
    f32* %17 = getelementptr &([8192 * f32]* %6)[i64 0][i32 %14];
    store f32* %17 with f32 %16;
    f32 %18 = fadd f32 %12, f32 %15;
    f32* %19 = getelementptr &([8192 * f32]* %10)[i64 0][i32 %14];
    store f32* %19 with f32 %18;
    i32 %20 = add i32 %14, i32 1;
    f32 %21 = s2f i32 %20 to f32;
    f32 %22 = fadd f32 %8, f32 %21;
    f32* %23 = getelementptr &(f32* %17)[i64 1];
    store f32* %23 with f32 %22;
    f32 %24 = fadd f32 %12, f32 %21;
    f32* %25 = getelementptr &(f32* %19)[i64 1];
    store f32* %25 with f32 %24;
    i32 %26 = add i32 %14, i32 2;
    f32 %27 = s2f i32 %26 to f32;
    f32 %28 = fadd f32 %8, f32 %27;
    f32* %29 = getelementptr &(f32* %17)[i64 2];
    store f32* %29 with f32 %28;
    f32 %30 = fadd f32 %12, f32 %27;
    f32* %31 = getelementptr &(f32* %19)[i64 2];
    store f32* %31 with f32 %30;
    i32 %32 = add i32 %14, i32 3;
    f32 %33 = s2f i32 %32 to f32;
    f32 %34 = fadd f32 %8, f32 %33;
    f32* %35 = getelementptr &(f32* %17)[i64 3];
    store f32* %35 with f32 %34;
    f32 %36 = fadd f32 %12, f32 %33;
    f32* %37 = getelementptr &(f32* %19)[i64 3];
    store f32* %37 with f32 %36;
    i32 %38 = add i32 %14, i32 4;
    i1 %39 = icmp sgt i32 %13, i32 %38;
    cbr i1 %39(prob = 0.941176), ^b1, ^scalar.header;
  ^scalar.header:
    i32 %40 = phi [^b, i32 %0] [^b1, i32 %38];
    i1 %41 = icmp sgt i32 %1, i32 %40;
    cbr i1 %41(prob = 0.75), ^b2, ^scalar.final;
  ^b2 {scalar}:
    i32 %42 = phi [^scalar.header, i32 %40] [^b2, i32 %48];
    f32 %43 = s2f i32 %42 to f32;
    f32 %44 = fadd f32 %8, f32 %43;
    f32* %45 = getelementptr &([8192 * f32]* %6)[i64 0][i32 %42];
    store f32* %45 with f32 %44;
    f32 %46 = fadd f32 %12, f32 %43;
    f32* %47 = getelementptr &([8192 * f32]* %10)[i64 0][i32 %42];
    store f32* %47 with f32 %46;
    i32 %48 = add i32 %42, i32 1;
    i1 %49 = icmp sgt i32 %1, i32 %48;
    cbr i1 %49(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
}
internal [40 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal [8192 * f32]* @y, align 8;
internal [8192 * f32]* @x, align 8;
