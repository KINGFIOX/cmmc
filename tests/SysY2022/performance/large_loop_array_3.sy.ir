internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [8192 * f32]* %y = alloc [8192 * f32];
    [8192 * f32]* %x = alloc [8192 * f32];
    f32* %0 = getelementptr &([8192 * f32]* %y)[i64 0][i64 0];
    f32* %1 = getelementptr &([8192 * f32]* %x)[i64 0][i64 0];
    i32 %2 = call () -> i32 @getint();
    i1 %3 = scmp gt i32 %2, i32 0;
    call (i32) -> void @starttime(i32 22);
    ubr ^while.body;
^while.body:
    i32 %4 = phi [^entry, i32 0] [^b1, i32 %25];
    i32 %5 = phi [^entry, i32 0] [^b1, i32 %24];
    f32 %6 = phi [^entry, f32 0] [^b1, f32 %37];
    f32 %7 = phi [^entry, f32 0] [^b1, f32 %13];
    f32 %8 = phi [^entry, f32 1] [^b1, f32 %14];
    i32 %9 = srem i32 %4, i32 10;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^while.guard, ^if.else;
^if.else:
    f32 %11 = fadd f32 %7, f32 0.1;
    f32 %12 = fadd f32 %8, f32 0.2;
    ubr ^while.guard;
^while.guard:
    f32 %13 = phi [^while.body, f32 0] [^if.else, f32 %11];
    f32 %14 = phi [^while.body, f32 1] [^if.else, f32 %12];
    i1 %15 = scmp lt i32 %5, i32 %2;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %16 = phi [^while.guard, i32 %5] [^while.body1, i32 %17];
    i32 %17 = add i32 %16, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %2;
    f32 %19 = s2f i32 %16 to f32;
    f32 %20 = fadd f32 %13, f32 %19;
    f32 %21 = fadd f32 %14, f32 %19;
    f32* %22 = getelementptr &([8192 * f32]* %y)[i64 0][i32 %16];
    f32* %23 = getelementptr &([8192 * f32]* %x)[i64 0][i32 %16];
    store f32* %23 with f32 %20;
    store f32* %22 with f32 %21;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b;
^b:
    i32 %24 = phi [^while.guard, i32 %5] [^while.body1, i32 %17];
    i32 %25 = add i32 %4, i32 1;
    cbr i1 %3(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32 %26 = phi [^b, i32 0] [^while.body2, i32 %28];
    f32 %27 = phi [^b, f32 0] [^while.body2, f32 %35];
    i32 %28 = add i32 %26, i32 1;
    i1 %29 = scmp lt i32 %28, i32 %2;
    f32* %30 = getelementptr &(f32* %0)[i32 %26];
    f32* %31 = getelementptr &(f32* %1)[i32 %26];
    f32 %32 = load f32* %31;
    f32 %33 = load f32* %30;
    f32 %34 = fmul f32 %32, f32 %33;
    f32 %35 = fadd f32 %27, f32 %34;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b1;
^b1:
    f32 %36 = phi [^b, f32 0] [^while.body2, f32 %35];
    f32 %37 = fadd f32 %6, f32 %36;
    i1 %38 = scmp lt i32 %25, i32 100000;
    cbr i1 %38(prob = 1), ^while.body, ^b2;
^b2:
    f32 %39 = fsub f32 %37, f32 1.8338e+16;
    i1 %40 = fcmp le f32 %39, f32 1e-06;
    i1 %41 = fcmp ge f32 %39, f32 -1e-06;
    i1 %42 = or i1 %41, i1 %40;
    call (i32) -> void @stoptime(i32 39);
    cbr i1 %42(prob = 0.75), ^if.then, ^if.else1;
^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
^b3:
    i32 %43 = phi [^if.then, i32 0] [^if.else1, i32 1];
    ret i32 %43;
}
