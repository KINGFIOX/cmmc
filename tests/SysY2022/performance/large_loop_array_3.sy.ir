internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = add i32 %0, i32 -8;
    i1 %3 = icmp sgt i32 %0, i32 8;
    call (i32) -> void @starttime(i32 22);
    [8192 * f32]* %4 = ptrcast [8192 * f32]* @x to [8192 * f32]*;
    f32* %5 = getelementptr &([8192 * f32]* %4)[i64 0][i64 0];
    [8192 * f32]* %6 = ptrcast [8192 * f32]* @y to [8192 * f32]*;
    f32* %7 = getelementptr &([8192 * f32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b2, i32 %27];
    f32 %9 = phi [^entry, f32 1] [^b2, f32 %17];
    f32 %10 = phi [^entry, f32 0] [^b2, f32 %19];
    f32 %11 = phi [^entry, f32 0] [^b2, f32 %29];
    i32 %12 = phi [^entry, i32 0] [^b2, i32 %30];
    i1 %13 = icmp slt i32 %12, i32 100000;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %14 = srem i32 %12, i32 10;
    i1 %15 = icmp neq i32 %14, i32 0;
    f32 %16 = fadd f32 %9, f32 0.2;
    f32 %17 = select i1 %15 ? f32 1 : f32 %16;
    f32 %18 = fadd f32 %10, f32 0.1;
    f32 %19 = select i1 %15 ? f32 0 : f32 %18;
    i1 %20 = icmp sgt i32 %0, i32 %8;
    cbr i1 %20(prob = 0.984615), ^super.header, ^b1;
  ^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %21 = fsub f32 %11, f32 1.8338e+16;
    i1 %22 = fcmp ole f32 %21, f32 1e-06;
    i1 %23 = fcmp oge f32 %21, f32 -1e-06;
    i1 %24 = or i1 %22, i1 %23;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    call (i32) -> void @putint(i32 0);
    ubr ^b3;
  ^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b3;
  ^super.header:
    i32 %25 = add i32 %8, i32 8;
    i1 %26 = icmp sgt i32 %0, i32 %25;
    cbr i1 %26(prob = 0.888889), ^while.body1, ^while.body2;
  ^b1:
    i32 %27 = phi [^while.body, i32 %8] [^while.body2, i32 %0];
    cbr i1 %1(prob = 0.984615), ^super.header1, ^b2;
  ^b2:
    f32 %28 = phi [^b1, f32 0] [^while.body4, f32 %149];
    f32 %29 = fadd f32 %11, f32 %28;
    i32 %30 = add i32 %12, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %31 = phi [^super.header, i32 %8] [^while.body1, i32 %79];
    f32 %32 = s2f i32 %31 to f32;
    f32 %33 = fadd f32 %19, f32 %32;
    f32* %34 = getelementptr &([8192 * f32]* %4)[i64 0][i32 %31];
    store f32* %34 with f32 %33;
    f32 %35 = fadd f32 %17, f32 %32;
    f32* %36 = getelementptr &([8192 * f32]* %6)[i64 0][i32 %31];
    store f32* %36 with f32 %35;
    i32 %37 = add i32 %31, i32 1;
    f32 %38 = s2f i32 %37 to f32;
    f32 %39 = fadd f32 %19, f32 %38;
    f32* %40 = getelementptr &(f32* %34)[i64 1];
    store f32* %40 with f32 %39;
    f32 %41 = fadd f32 %17, f32 %38;
    f32* %42 = getelementptr &(f32* %36)[i64 1];
    store f32* %42 with f32 %41;
    i32 %43 = add i32 %31, i32 2;
    f32 %44 = s2f i32 %43 to f32;
    f32 %45 = fadd f32 %19, f32 %44;
    f32* %46 = getelementptr &(f32* %34)[i64 2];
    store f32* %46 with f32 %45;
    f32 %47 = fadd f32 %17, f32 %44;
    f32* %48 = getelementptr &(f32* %36)[i64 2];
    store f32* %48 with f32 %47;
    i32 %49 = add i32 %31, i32 3;
    f32 %50 = s2f i32 %49 to f32;
    f32 %51 = fadd f32 %19, f32 %50;
    f32* %52 = getelementptr &(f32* %34)[i64 3];
    store f32* %52 with f32 %51;
    f32 %53 = fadd f32 %17, f32 %50;
    f32* %54 = getelementptr &(f32* %36)[i64 3];
    store f32* %54 with f32 %53;
    i32 %55 = add i32 %31, i32 4;
    f32 %56 = s2f i32 %55 to f32;
    f32 %57 = fadd f32 %19, f32 %56;
    f32* %58 = getelementptr &(f32* %34)[i64 4];
    store f32* %58 with f32 %57;
    f32 %59 = fadd f32 %17, f32 %56;
    f32* %60 = getelementptr &(f32* %36)[i64 4];
    store f32* %60 with f32 %59;
    i32 %61 = add i32 %31, i32 5;
    f32 %62 = s2f i32 %61 to f32;
    f32 %63 = fadd f32 %19, f32 %62;
    f32* %64 = getelementptr &(f32* %34)[i64 5];
    store f32* %64 with f32 %63;
    f32 %65 = fadd f32 %17, f32 %62;
    f32* %66 = getelementptr &(f32* %36)[i64 5];
    store f32* %66 with f32 %65;
    i32 %67 = add i32 %31, i32 6;
    f32 %68 = s2f i32 %67 to f32;
    f32 %69 = fadd f32 %19, f32 %68;
    f32* %70 = getelementptr &(f32* %34)[i64 6];
    store f32* %70 with f32 %69;
    f32 %71 = fadd f32 %17, f32 %68;
    f32* %72 = getelementptr &(f32* %36)[i64 6];
    store f32* %72 with f32 %71;
    i32 %73 = add i32 %31, i32 7;
    f32 %74 = s2f i32 %73 to f32;
    f32 %75 = fadd f32 %19, f32 %74;
    f32* %76 = getelementptr &(f32* %34)[i64 7];
    store f32* %76 with f32 %75;
    f32 %77 = fadd f32 %17, f32 %74;
    f32* %78 = getelementptr &(f32* %36)[i64 7];
    store f32* %78 with f32 %77;
    i32 %79 = add i32 %31, i32 8;
    i1 %80 = icmp sgt i32 %2, i32 %79;
    cbr i1 %80(prob = 0.888889), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %81 = phi [^super.header, i32 %8] [^while.body1, i32 %79] [^while.body2, i32 %87];
    f32 %82 = s2f i32 %81 to f32;
    f32 %83 = fadd f32 %19, f32 %82;
    f32* %84 = getelementptr &([8192 * f32]* %4)[i64 0][i32 %81];
    store f32* %84 with f32 %83;
    f32 %85 = fadd f32 %17, f32 %82;
    f32* %86 = getelementptr &([8192 * f32]* %6)[i64 0][i32 %81];
    store f32* %86 with f32 %85;
    i32 %87 = add i32 %81, i32 1;
    i1 %88 = icmp sgt i32 %0, i32 %87;
    cbr i1 %88(prob = 0.875), ^while.body2, ^b1;
  ^super.header1:
    cbr i1 %3(prob = 0.888889), ^while.body3, ^while.body4;
  ^b3:
    i32 %89 = phi [^if.then, i32 0] [^if.else, i32 1];
    ret i32 %89;
  ^while.body3:
    f32 %90 = phi [^super.header1, f32 0] [^while.body3, f32 %139];
    i32 %91 = phi [^super.header1, i32 0] [^while.body3, i32 %140];
    f32* %92 = getelementptr &(f32* %5)[i32 %91];
    f32 %93 = load f32* %92;
    f32* %94 = getelementptr &(f32* %7)[i32 %91];
    f32 %95 = load f32* %94;
    f32 %96 = fmul f32 %93, f32 %95;
    f32 %97 = fadd f32 %90, f32 %96;
    f32* %98 = getelementptr &(f32* %92)[i64 1];
    f32 %99 = load f32* %98;
    f32* %100 = getelementptr &(f32* %94)[i64 1];
    f32 %101 = load f32* %100;
    f32 %102 = fmul f32 %99, f32 %101;
    f32 %103 = fadd f32 %97, f32 %102;
    f32* %104 = getelementptr &(f32* %92)[i64 2];
    f32 %105 = load f32* %104;
    f32* %106 = getelementptr &(f32* %94)[i64 2];
    f32 %107 = load f32* %106;
    f32 %108 = fmul f32 %105, f32 %107;
    f32 %109 = fadd f32 %103, f32 %108;
    f32* %110 = getelementptr &(f32* %92)[i64 3];
    f32 %111 = load f32* %110;
    f32* %112 = getelementptr &(f32* %94)[i64 3];
    f32 %113 = load f32* %112;
    f32 %114 = fmul f32 %111, f32 %113;
    f32 %115 = fadd f32 %109, f32 %114;
    f32* %116 = getelementptr &(f32* %92)[i64 4];
    f32 %117 = load f32* %116;
    f32* %118 = getelementptr &(f32* %94)[i64 4];
    f32 %119 = load f32* %118;
    f32 %120 = fmul f32 %117, f32 %119;
    f32 %121 = fadd f32 %115, f32 %120;
    f32* %122 = getelementptr &(f32* %92)[i64 5];
    f32 %123 = load f32* %122;
    f32* %124 = getelementptr &(f32* %94)[i64 5];
    f32 %125 = load f32* %124;
    f32 %126 = fmul f32 %123, f32 %125;
    f32 %127 = fadd f32 %121, f32 %126;
    f32* %128 = getelementptr &(f32* %92)[i64 6];
    f32 %129 = load f32* %128;
    f32* %130 = getelementptr &(f32* %94)[i64 6];
    f32 %131 = load f32* %130;
    f32 %132 = fmul f32 %129, f32 %131;
    f32 %133 = fadd f32 %127, f32 %132;
    f32* %134 = getelementptr &(f32* %92)[i64 7];
    f32 %135 = load f32* %134;
    f32* %136 = getelementptr &(f32* %94)[i64 7];
    f32 %137 = load f32* %136;
    f32 %138 = fmul f32 %135, f32 %137;
    f32 %139 = fadd f32 %133, f32 %138;
    i32 %140 = add i32 %91, i32 8;
    i1 %141 = icmp sgt i32 %2, i32 %140;
    cbr i1 %141(prob = 0.888889), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %142 = phi [^super.header1, i32 0] [^while.body3, i32 %140] [^while.body4, i32 %150];
    f32 %143 = phi [^super.header1, f32 0] [^while.body3, f32 %139] [^while.body4, f32 %149];
    f32* %144 = getelementptr &(f32* %5)[i32 %142];
    f32 %145 = load f32* %144;
    f32* %146 = getelementptr &(f32* %7)[i32 %142];
    f32 %147 = load f32* %146;
    f32 %148 = fmul f32 %145, f32 %147;
    f32 %149 = fadd f32 %143, f32 %148;
    i32 %150 = add i32 %142, i32 1;
    i1 %151 = icmp sgt i32 %0, i32 %150;
    cbr i1 %151(prob = 0.875), ^while.body4, ^b2;
}
internal [8192 * f32]* @y, align 8 { Flexible };
internal [8192 * f32]* @x, align 8 { Flexible };
