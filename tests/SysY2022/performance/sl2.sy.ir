internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i1 %4 = icmp sgt i32 %0, i32 8;
    i32 %5 = add i32 %0, i32 -8;
    i32 %6 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %7 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b, i32 %20];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    [600 * [600 * i32]]* %10 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %8];
    cbr i1 %9(prob = 0.992248), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %11 = phi [^while.header, i32 0] [^b2, i32 %31];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.992248), ^while.header3, ^b;
  ^while.header2:
    i32 %13 = phi [^while.header, i32 1] [^while.header4, i32 %21];
    i32 %14 = phi [^while.header, i32 1] [^while.header4, i32 %19];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %14];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %15)[i64 -1];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * i32]]* %15)[i64 1];
    i1 %18 = icmp sgt i32 %1, i32 %14;
    i32 %19 = add i32 %14, i32 1;
    cbr i1 %18(prob = 0.992248), ^while.header4, ^b1;
  ^b:
    i32 %20 = add i32 %8, i32 1;
    ubr ^while.header;
  ^while.header3:
    cbr i1 %3(prob = 0.992248), ^prebody, ^b2;
  ^while.header4:
    i32 %21 = phi [^while.header2, i32 1] [^while.header5, i32 %33] [^while.body1, i32 %33];
    i1 %22 = icmp sgt i32 %1, i32 %21;
    cbr i1 %22(prob = 0.992248), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %23 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %23);
    i32 %24 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %25 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %24];
    [600 * i32]* %26 = getelementptr &([600 * [600 * i32]]* %25)[i64 0][i32 %24];
    i32* %27 = getelementptr &([600 * i32]* %26)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %27);
    i32 %28 = add i32 %13, i32 -1;
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %28];
    i32* %30 = getelementptr &([600 * i32]* %29)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %30);
    ret i32 0;
  ^b2:
    i32 %31 = add i32 %11, i32 1;
    ubr ^while.header1;
  ^prebody:
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %10)[i64 0][i32 %11];
    cbr i1 %4(prob = 0.941176), ^while.body, ^while.body2;
  ^while.header5:
    i32 %33 = add i32 %21, i32 1;
    [600 * i32]* %34 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %33];
    [600 * i32]* %35 = getelementptr &([600 * i32]* %34)[i64 -2];
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %21];
    [600 * i32]* %37 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %21];
    [600 * i32]* %38 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %21];
    cbr i1 %2(prob = 0.992248), ^while.body1, ^while.header4;
  ^while.body:
    i32 %39 = phi [^prebody, i32 0] [^while.body, i32 %48];
    i32* %40 = getelementptr &([600 * i32]* %32)[i64 0][i32 %39];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &(i32* %40)[i64 1];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &(i32* %40)[i64 2];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &(i32* %40)[i64 3];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &(i32* %40)[i64 4];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &(i32* %40)[i64 5];
    store i32* %45 with i32 1;
    i32* %46 = getelementptr &(i32* %40)[i64 6];
    store i32* %46 with i32 1;
    i32* %47 = getelementptr &(i32* %40)[i64 7];
    store i32* %47 with i32 1;
    i32 %48 = add i32 %39, i32 8;
    i1 %49 = icmp sgt i32 %5, i32 %48;
    cbr i1 %49(prob = 0.941176), ^while.body, ^while.body2;
  ^while.body1:
    i32 %50 = phi [^while.header5, i32 1] [^while.body1, i32 %70];
    i32* %51 = getelementptr &([600 * i32]* %37)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([600 * i32]* %36)[i64 0][i32 %50];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &([600 * i32]* %35)[i64 0][i32 %50];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &([600 * i32]* %34)[i64 0][i32 %50];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &([600 * i32]* %38)[i64 0][i32 %50];
    i32* %63 = getelementptr &(i32* %62)[i64 -1];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %61, i32 %64;
    i32* %66 = getelementptr &(i32* %62)[i64 1];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32 %69 = sdiv i32 %68, i32 %6;
    store i32* %62 with i32 %69;
    i32 %70 = add i32 %50, i32 1;
    i1 %71 = icmp sgt i32 %1, i32 %70;
    cbr i1 %71(prob = 0.992248), ^while.body1, ^while.header4;
  ^while.body2 {scalar}:
    i32 %72 = phi [^prebody, i32 0] [^while.body, i32 %48] [^while.body2, i32 %74];
    i32* %73 = getelementptr &([600 * i32]* %32)[i64 0][i32 %72];
    store i32* %73 with i32 1;
    i32 %74 = add i32 %72, i32 1;
    i1 %75 = icmp sgt i32 %0, i32 %74;
    cbr i1 %75(prob = 0.875), ^while.body2, ^b2;
}
