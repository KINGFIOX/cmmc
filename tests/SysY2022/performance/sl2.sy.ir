internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i1 %3 = icmp sgt i32 %1, i32 5;
    i1 %4 = icmp sgt i32 %0, i32 0;
    i1 %5 = icmp sgt i32 %0, i32 4;
    i32 %6 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %7 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b, i32 %20];
    i1 %9 = icmp sgt i32 %0, i32 %8;
    [600 * [600 * i32]]* %10 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %8];
    cbr i1 %9(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %11 = phi [^while.header, i32 0] [^b2, i32 %31];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.header3, ^b;
  ^while.header2:
    i32 %13 = phi [^while.header, i32 1] [^while.header4, i32 %21];
    i32 %14 = phi [^while.header, i32 1] [^while.header4, i32 %19];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %14];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %15)[i64 -1];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * i32]]* %15)[i64 1];
    i1 %18 = icmp sgt i32 %1, i32 %14;
    i32 %19 = add i32 %14, i32 1;
    cbr i1 %18(prob = 0.97), ^while.header4, ^b1;
  ^b:
    i32 %20 = add i32 %8, i32 1;
    ubr ^while.header;
  ^while.header3:
    cbr i1 %4(prob = 0.97), ^prebody, ^b2;
  ^while.header4:
    i32 %21 = phi [^while.header2, i32 1] [^while.header5, i32 %33] [^while.body3, i32 %33];
    i1 %22 = icmp sgt i32 %1, i32 %21;
    cbr i1 %22(prob = 0.97), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %23 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %23);
    i32 %24 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %25 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %24];
    [600 * i32]* %26 = getelementptr &([600 * [600 * i32]]* %25)[i64 0][i32 %24];
    i32* %27 = getelementptr &([600 * i32]* %26)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %27);
    i32 %28 = add i32 %13, i32 -1;
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %28];
    i32* %30 = getelementptr &([600 * i32]* %29)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %30);
    ret i32 0;
  ^b2:
    i32 %31 = add i32 %11, i32 1;
    ubr ^while.header1;
  ^prebody:
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %10)[i64 0][i32 %11];
    cbr i1 %5(prob = 0.89), ^while.body, ^while.body1;
  ^while.header5:
    i32 %33 = add i32 %21, i32 1;
    cbr i1 %2(prob = 0.97), ^super.header, ^while.header4;
  ^while.body:
    i32 %34 = phi [^prebody, i32 0] [^while.body, i32 %41];
    i32* %35 = getelementptr &([600 * i32]* %32)[i64 0][i32 %34];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &(i32* %35)[i64 1];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &(i32* %35)[i64 2];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &(i32* %35)[i64 3];
    store i32* %38 with i32 1;
    i32 %39 = add i32 %34, i32 8;
    i1 %40 = icmp sgt i32 %0, i32 %39;
    i32 %41 = add i32 %34, i32 4;
    cbr i1 %40(prob = 0.89), ^while.body, ^while.body1;
  ^super.header:
    [600 * i32]* %42 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %33];
    [600 * i32]* %43 = getelementptr &([600 * i32]* %42)[i64 -2];
    [600 * i32]* %44 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %21];
    [600 * i32]* %45 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %21];
    [600 * i32]* %46 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %21];
    cbr i1 %3(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body1:
    i32 %47 = phi [^prebody, i32 0] [^while.body, i32 %41] [^while.body1, i32 %49];
    i32* %48 = getelementptr &([600 * i32]* %32)[i64 0][i32 %47];
    store i32* %48 with i32 1;
    i32 %49 = add i32 %47, i32 1;
    i1 %50 = icmp sgt i32 %0, i32 %49;
    cbr i1 %50(prob = 0.75), ^while.body1, ^b2;
  ^while.body2:
    i32 %51 = phi [^super.header, i32 1] [^while.body2, i32 %124];
    i32* %52 = getelementptr &([600 * i32]* %45)[i64 0][i32 %51];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([600 * i32]* %46)[i64 0][i32 %51];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %53, i32 %55;
    i32* %57 = getelementptr &([600 * i32]* %43)[i64 0][i32 %51];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &([600 * i32]* %42)[i64 0][i32 %51];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %59, i32 %61;
    i32* %63 = getelementptr &([600 * i32]* %44)[i64 0][i32 %51];
    i32* %64 = getelementptr &(i32* %63)[i64 -1];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %62, i32 %65;
    i32* %67 = getelementptr &(i32* %63)[i64 1];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %66, i32 %68;
    i32 %70 = sdiv i32 %69, i32 %6;
    store i32* %63 with i32 %70;
    i32* %71 = getelementptr &(i32* %52)[i64 1];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %54)[i64 1];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %72, i32 %74;
    i32* %76 = getelementptr &(i32* %57)[i64 1];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    i32* %79 = getelementptr &(i32* %60)[i64 1];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %78, i32 %80;
    i32 %82 = load i32* %63;
    i32 %83 = add i32 %81, i32 %82;
    i32* %84 = getelementptr &(i32* %63)[i64 2];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = sdiv i32 %86, i32 %6;
    store i32* %67 with i32 %87;
    i32* %88 = getelementptr &(i32* %52)[i64 2];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %54)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    i32* %93 = getelementptr &(i32* %57)[i64 2];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    i32* %96 = getelementptr &(i32* %60)[i64 2];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %95, i32 %97;
    i32 %99 = load i32* %67;
    i32 %100 = add i32 %98, i32 %99;
    i32* %101 = getelementptr &(i32* %63)[i64 3];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    i32 %104 = sdiv i32 %103, i32 %6;
    store i32* %84 with i32 %104;
    i32* %105 = getelementptr &(i32* %52)[i64 3];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %54)[i64 3];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %106, i32 %108;
    i32* %110 = getelementptr &(i32* %57)[i64 3];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %60)[i64 3];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %112, i32 %114;
    i32 %116 = load i32* %84;
    i32 %117 = add i32 %115, i32 %116;
    i32* %118 = getelementptr &(i32* %63)[i64 4];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %117, i32 %119;
    i32 %121 = sdiv i32 %120, i32 %6;
    store i32* %101 with i32 %121;
    i32 %122 = add i32 %51, i32 8;
    i1 %123 = icmp sgt i32 %1, i32 %122;
    i32 %124 = add i32 %51, i32 4;
    cbr i1 %123(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body3:
    i32 %125 = phi [^super.header, i32 1] [^while.body2, i32 %124] [^while.body3, i32 %145];
    i32* %126 = getelementptr &([600 * i32]* %45)[i64 0][i32 %125];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &([600 * i32]* %46)[i64 0][i32 %125];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %127, i32 %129;
    i32* %131 = getelementptr &([600 * i32]* %43)[i64 0][i32 %125];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %130, i32 %132;
    i32* %134 = getelementptr &([600 * i32]* %42)[i64 0][i32 %125];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %133, i32 %135;
    i32* %137 = getelementptr &([600 * i32]* %44)[i64 0][i32 %125];
    i32* %138 = getelementptr &(i32* %137)[i64 -1];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %136, i32 %139;
    i32* %141 = getelementptr &(i32* %137)[i64 1];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %140, i32 %142;
    i32 %144 = sdiv i32 %143, i32 %6;
    store i32* %137 with i32 %144;
    i32 %145 = add i32 %125, i32 1;
    i1 %146 = icmp sgt i32 %1, i32 %145;
    cbr i1 %146(prob = 0.75), ^while.body3, ^while.header4;
}
