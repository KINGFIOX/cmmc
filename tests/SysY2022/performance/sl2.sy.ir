internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i1 %2 = icmp sgt i32 %0, i32 0;
    i32 %3 = add i32 %0, i32 -1;
    [600 * [600 * [600 * i32]]]* %4 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %2(prob = 0.984615), ^b, ^b1;
  ^b:
    [4 * i8]* %5 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %6 = ptradd [4 * i8]* %5, i32 0;
    store i32* %6 with i32 %0;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %7);
    ubr ^b1;
  ^b1:
    i1 %8 = icmp sgt i32 %3, i32 1;
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0];
    cbr i1 %8(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [600 * [600 * i32]]* %10 = phi [^b1, [600 * [600 * i32]]* %9] [^b5, [600 * [600 * i32]]* %12];
    i32 %11 = phi [^b1, i32 1] [^b5, i32 %14];
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %11];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * i32]]* %12)[i64 1];
    i32 %14 = add i32 %11, i32 1;
    ubr ^b3;
  ^b2:
    [600 * [600 * i32]]* %15 = phi [^b1, [600 * [600 * i32]]* %9] [^b5, [600 * [600 * i32]]* %12];
    i32 %16 = phi [^b1, i32 1] [^b5, i32 %31];
    i32* %17 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %17);
    i32 %18 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %19 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %18];
    [600 * i32]* %20 = getelementptr &([600 * [600 * i32]]* %19)[i64 0][i32 %18];
    i32* %21 = getelementptr &([600 * i32]* %20)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %21);
    i32 %22 = add i32 %16, i32 -1;
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %22];
    i32* %24 = getelementptr &([600 * i32]* %23)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %24);
    ret i32 0;
  ^b3:
    i32 %25 = phi [^while.body, i32 1] [^b4, i32 %31];
    [600 * i32]* %26 = getelementptr &([600 * [600 * i32]]* %12)[i64 0][i32 %25];
    [600 * i32]* %27 = getelementptr &([600 * i32]* %26)[i64 -1];
    [600 * i32]* %28 = getelementptr &([600 * i32]* %26)[i64 1];
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %10)[i64 0][i32 %25];
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %25];
    i32 %31 = add i32 %25, i32 1;
    ubr ^while.body1;
  ^while.body1:
    i32 %32 = phi [^b3, i32 1] [^while.body1, i32 %52];
    i32* %33 = getelementptr &([600 * i32]* %29)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([600 * i32]* %30)[i64 0][i32 %32];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &([600 * i32]* %27)[i64 0][i32 %32];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &([600 * i32]* %28)[i64 0][i32 %32];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &([600 * i32]* %26)[i64 0][i32 %32];
    i32* %45 = getelementptr &(i32* %44)[i64 -1];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %43, i32 %46;
    i32* %48 = getelementptr &(i32* %44)[i64 1];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32 %51 = sdiv i32 %50, i32 %1;
    store i32* %44 with i32 %51;
    i32 %52 = add i32 %32, i32 1;
    i1 %53 = icmp sgt i32 %3, i32 %52;
    cbr i1 %53(prob = 0.984615), ^while.body1, ^b4;
  ^b4:
    i1 %54 = icmp sgt i32 %3, i32 %31;
    cbr i1 %54(prob = 0.984615), ^b3, ^b5;
  ^b5:
    i1 %55 = icmp sgt i32 %3, i32 %14;
    cbr i1 %55(prob = 0.984615), ^while.body, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^cond, ^b1;
  ^cond:
    i1 %6 = icmp sgt i32 %4, i32 3;
    [600 * [600 * [600 * i32]]]* %7 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %6(prob = 0.5), ^cond1, ^b2;
  ^b1:
    ret;
  ^b2:
    i32 %8 = phi [^cond, i32 %0] [^b5, i32 %57];
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %8];
    ubr ^while.body;
  ^cond1:
    i32 %10 = add i32 %4, i32 -3;
    i1 %11 = icmp sgt i32 %10, i32 15;
    i32 %12 = add i32 %4, i32 -18;
    cbr i1 %11(prob = 0.5), ^b3, ^b4;
  ^b3:
    i32 %13 = phi [^cond1, i32 %0] [^b7, i32 %82];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %13];
    ubr ^while.body1;
  ^while.body:
    i32 %15 = phi [^b2, i32 0] [^scalar.final, i32 %53];
    [600 * i32]* %16 = getelementptr &([600 * [600 * i32]]* %9)[i64 0][i32 %15];
    ubr ^while.body3;
  ^b4:
    i32 %17 = phi [^cond1, i32 %0] [^b6, i32 %80];
    [600 * [600 * i32]]* %18 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %17];
    ubr ^while.body2;
  ^while.body1:
    i32 %19 = phi [^b3, i32 0] [^scalar.final4, i32 %78];
    [600 * i32]* %20 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %19];
    ubr ^while.body4;
  ^while.body2:
    i32 %21 = phi [^b4, i32 0] [^scalar.final3, i32 %72];
    [600 * i32]* %22 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %21];
    ubr ^while.body5;
  ^while.body3 {scalar}:
    i32 %23 = phi [^while.body, i32 0] [^while.body3, i32 %25];
    i32* %24 = getelementptr &([600 * i32]* %16)[i64 0][i32 %23];
    store i32* %24 with i32 1;
    i32 %25 = add i32 %23, i32 1;
    i1 %26 = icmp sgt i32 %4, i32 %25;
    cbr i1 %26(prob = 0.75), ^while.body3, ^scalar.final;
  ^while.body4:
    i32 %27 = phi [^while.body1, i32 0] [^while.body4, i32 %44];
    i32* %28 = getelementptr &([600 * i32]* %20)[i64 0][i32 %27];
    store i32* %28 with i32 1;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 1;
    i32* %32 = getelementptr &(i32* %28)[i64 4];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &(i32* %28)[i64 5];
    store i32* %33 with i32 1;
    i32* %34 = getelementptr &(i32* %28)[i64 6];
    store i32* %34 with i32 1;
    i32* %35 = getelementptr &(i32* %28)[i64 7];
    store i32* %35 with i32 1;
    i32* %36 = getelementptr &(i32* %28)[i64 8];
    store i32* %36 with i32 1;
    i32* %37 = getelementptr &(i32* %28)[i64 9];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &(i32* %28)[i64 10];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &(i32* %28)[i64 11];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &(i32* %28)[i64 12];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &(i32* %28)[i64 13];
    store i32* %41 with i32 1;
    i32* %42 = getelementptr &(i32* %28)[i64 14];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &(i32* %28)[i64 15];
    store i32* %43 with i32 1;
    i32 %44 = add i32 %27, i32 16;
    i1 %45 = icmp sgt i32 %12, i32 %44;
    cbr i1 %45(prob = 0.941176), ^while.body4, ^scalar.header;
  ^while.body5 {scalar}:
    i32 %46 = phi [^while.body2, i32 0] [^while.body5, i32 %51];
    i32* %47 = getelementptr &([600 * i32]* %22)[i64 0][i32 %46];
    store i32* %47 with i32 1;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 1;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 1;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 1;
    i32 %51 = add i32 %46, i32 4;
    i1 %52 = icmp sgt i32 %10, i32 %51;
    cbr i1 %52(prob = 0.75), ^while.body5, ^scalar.final1;
  ^scalar.final:
    i32 %53 = add i32 %15, i32 1;
    i1 %54 = icmp sgt i32 %4, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body, ^b5;
  ^scalar.header:
    i1 %55 = icmp sgt i32 %10, i32 %44;
    cbr i1 %55(prob = 0.75), ^while.body6, ^scalar.final2;
  ^scalar.final1:
    i1 %56 = icmp sgt i32 %4, i32 %51;
    cbr i1 %56(prob = 0.75), ^while.body7, ^scalar.final3;
  ^b5:
    i32 %57 = add i32 %8, i32 1;
    i1 %58 = icmp sgt i32 %1, i32 %57;
    cbr i1 %58(prob = 0.984615), ^b2, ^b1;
  ^while.body6 {scalar}:
    i32 %59 = phi [^scalar.header, i32 %44] [^while.body6, i32 %64];
    i32* %60 = getelementptr &([600 * i32]* %20)[i64 0][i32 %59];
    store i32* %60 with i32 1;
    i32* %61 = getelementptr &(i32* %60)[i64 1];
    store i32* %61 with i32 1;
    i32* %62 = getelementptr &(i32* %60)[i64 2];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &(i32* %60)[i64 3];
    store i32* %63 with i32 1;
    i32 %64 = add i32 %59, i32 4;
    i1 %65 = icmp sgt i32 %10, i32 %64;
    cbr i1 %65(prob = 0.75), ^while.body6, ^scalar.final2;
  ^scalar.final2:
    i32 %66 = phi [^scalar.header, i32 %44] [^while.body6, i32 %64];
    i1 %67 = icmp sgt i32 %4, i32 %66;
    cbr i1 %67(prob = 0.75), ^while.body8, ^scalar.final4;
  ^while.body7 {scalar}:
    i32 %68 = phi [^scalar.final1, i32 %51] [^while.body7, i32 %70];
    i32* %69 = getelementptr &([600 * i32]* %22)[i64 0][i32 %68];
    store i32* %69 with i32 1;
    i32 %70 = add i32 %68, i32 1;
    i1 %71 = icmp sgt i32 %4, i32 %70;
    cbr i1 %71(prob = 0.75), ^while.body7, ^scalar.final3;
  ^scalar.final3:
    i32 %72 = add i32 %21, i32 1;
    i1 %73 = icmp sgt i32 %4, i32 %72;
    cbr i1 %73(prob = 0.984615), ^while.body2, ^b6;
  ^while.body8 {scalar}:
    i32 %74 = phi [^scalar.final2, i32 %66] [^while.body8, i32 %76];
    i32* %75 = getelementptr &([600 * i32]* %20)[i64 0][i32 %74];
    store i32* %75 with i32 1;
    i32 %76 = add i32 %74, i32 1;
    i1 %77 = icmp sgt i32 %4, i32 %76;
    cbr i1 %77(prob = 0.75), ^while.body8, ^scalar.final4;
  ^scalar.final4:
    i32 %78 = add i32 %19, i32 1;
    i1 %79 = icmp sgt i32 %4, i32 %78;
    cbr i1 %79(prob = 0.984615), ^while.body1, ^b7;
  ^b6:
    i32 %80 = add i32 %17, i32 1;
    i1 %81 = icmp sgt i32 %1, i32 %80;
    cbr i1 %81(prob = 0.984615), ^b4, ^b1;
  ^b7:
    i32 %82 = add i32 %13, i32 1;
    i1 %83 = icmp sgt i32 %1, i32 %82;
    cbr i1 %83(prob = 0.984615), ^b3, ^b1;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
