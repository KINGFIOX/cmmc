internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = icmp sgt i32 %1, i32 1;
    i1 %3 = icmp sgt i32 %1, i32 5;
    i1 %4 = icmp sgt i32 %0, i32 0;
    i1 %5 = icmp sgt i32 %0, i32 4;
    i32 %6 = add i32 %0, i32 -4;
    i32 %7 = add i32 %0, i32 -5;
    i32 %8 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %9 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %22];
    i1 %11 = icmp sgt i32 %0, i32 %10;
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %10];
    cbr i1 %11(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %13 = phi [^while.header, i32 0] [^b2, i32 %33];
    i1 %14 = icmp sgt i32 %0, i32 %13;
    cbr i1 %14(prob = 0.97), ^while.header3, ^b;
  ^while.header2:
    i32 %15 = phi [^while.header, i32 1] [^while.header4, i32 %23];
    i32 %16 = phi [^while.header, i32 1] [^while.header4, i32 %21];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %16];
    [600 * [600 * i32]]* %18 = getelementptr &([600 * [600 * i32]]* %17)[i64 -1];
    [600 * [600 * i32]]* %19 = getelementptr &([600 * [600 * i32]]* %17)[i64 1];
    i1 %20 = icmp sgt i32 %1, i32 %16;
    i32 %21 = add i32 %16, i32 1;
    cbr i1 %20(prob = 0.97), ^while.header4, ^b1;
  ^b:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.header3:
    cbr i1 %4(prob = 0.97), ^prebody, ^b2;
  ^while.header4:
    i32 %23 = phi [^while.header2, i32 1] [^while.header5, i32 %35] [^while.body3, i32 %35];
    i1 %24 = icmp sgt i32 %1, i32 %23;
    cbr i1 %24(prob = 0.97), ^while.header5, ^while.header2;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %25 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    i32 %26 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %27 = getelementptr &([600 * [600 * [600 * i32]]]* %9)[i64 0][i32 %26];
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %27)[i64 0][i32 %26];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    i32 %30 = add i32 %15, i32 -1;
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %30];
    i32* %32 = getelementptr &([600 * i32]* %31)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %32);
    ret i32 0;
  ^b2:
    i32 %33 = add i32 %13, i32 1;
    ubr ^while.header1;
  ^prebody:
    [600 * i32]* %34 = getelementptr &([600 * [600 * i32]]* %12)[i64 0][i32 %13];
    cbr i1 %5(prob = 0.89), ^while.body, ^while.body1;
  ^while.header5:
    i32 %35 = add i32 %23, i32 1;
    cbr i1 %2(prob = 0.97), ^super.header, ^while.header4;
  ^while.body:
    i32 %36 = phi [^prebody, i32 0] [^while.body, i32 %41];
    i32* %37 = getelementptr &([600 * i32]* %34)[i64 0][i32 %36];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &(i32* %37)[i64 1];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &(i32* %37)[i64 2];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &(i32* %37)[i64 3];
    store i32* %40 with i32 1;
    i32 %41 = add i32 %36, i32 4;
    i1 %42 = icmp sgt i32 %6, i32 %41;
    cbr i1 %42(prob = 0.89), ^while.body, ^while.body1;
  ^super.header:
    [600 * i32]* %43 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %35];
    [600 * i32]* %44 = getelementptr &([600 * i32]* %43)[i64 -2];
    [600 * i32]* %45 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %23];
    [600 * i32]* %46 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %23];
    [600 * i32]* %47 = getelementptr &([600 * [600 * i32]]* %19)[i64 0][i32 %23];
    cbr i1 %3(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body1 {scalar}:
    i32 %48 = phi [^prebody, i32 0] [^while.body, i32 %41] [^while.body1, i32 %50];
    i32* %49 = getelementptr &([600 * i32]* %34)[i64 0][i32 %48];
    store i32* %49 with i32 1;
    i32 %50 = add i32 %48, i32 1;
    i1 %51 = icmp sgt i32 %0, i32 %50;
    cbr i1 %51(prob = 0.75), ^while.body1, ^b2;
  ^while.body2:
    i32 %52 = phi [^super.header, i32 1] [^while.body2, i32 %123];
    i32* %53 = getelementptr &([600 * i32]* %46)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &([600 * i32]* %47)[i64 0][i32 %52];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %54, i32 %56;
    i32* %58 = getelementptr &([600 * i32]* %44)[i64 0][i32 %52];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &([600 * i32]* %43)[i64 0][i32 %52];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &([600 * i32]* %45)[i64 0][i32 %52];
    i32* %65 = getelementptr &(i32* %64)[i64 -1];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %63, i32 %66;
    i32* %68 = getelementptr &(i32* %64)[i64 1];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32 %71 = sdiv i32 %70, i32 %8;
    store i32* %64 with i32 %71;
    i32* %72 = getelementptr &(i32* %53)[i64 1];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %55)[i64 1];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &(i32* %58)[i64 1];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32* %80 = getelementptr &(i32* %61)[i64 1];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %79, i32 %81;
    i32 %83 = load i32* %64;
    i32 %84 = add i32 %82, i32 %83;
    i32* %85 = getelementptr &(i32* %64)[i64 2];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    i32 %88 = sdiv i32 %87, i32 %8;
    store i32* %68 with i32 %88;
    i32* %89 = getelementptr &(i32* %53)[i64 2];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %55)[i64 2];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    i32* %94 = getelementptr &(i32* %58)[i64 2];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32* %97 = getelementptr &(i32* %61)[i64 2];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32 %100 = load i32* %68;
    i32 %101 = add i32 %99, i32 %100;
    i32* %102 = getelementptr &(i32* %64)[i64 3];
    i32 %103 = load i32* %102;
    i32 %104 = add i32 %101, i32 %103;
    i32 %105 = sdiv i32 %104, i32 %8;
    store i32* %85 with i32 %105;
    i32* %106 = getelementptr &(i32* %53)[i64 3];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %55)[i64 3];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %107, i32 %109;
    i32* %111 = getelementptr &(i32* %58)[i64 3];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %110, i32 %112;
    i32* %114 = getelementptr &(i32* %61)[i64 3];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %113, i32 %115;
    i32 %117 = load i32* %85;
    i32 %118 = add i32 %116, i32 %117;
    i32* %119 = getelementptr &(i32* %64)[i64 4];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %118, i32 %120;
    i32 %122 = sdiv i32 %121, i32 %8;
    store i32* %102 with i32 %122;
    i32 %123 = add i32 %52, i32 4;
    i1 %124 = icmp sgt i32 %7, i32 %123;
    cbr i1 %124(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %125 = phi [^super.header, i32 1] [^while.body2, i32 %123] [^while.body3, i32 %145];
    i32* %126 = getelementptr &([600 * i32]* %46)[i64 0][i32 %125];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &([600 * i32]* %47)[i64 0][i32 %125];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %127, i32 %129;
    i32* %131 = getelementptr &([600 * i32]* %44)[i64 0][i32 %125];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %130, i32 %132;
    i32* %134 = getelementptr &([600 * i32]* %43)[i64 0][i32 %125];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %133, i32 %135;
    i32* %137 = getelementptr &([600 * i32]* %45)[i64 0][i32 %125];
    i32* %138 = getelementptr &(i32* %137)[i64 -1];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %136, i32 %139;
    i32* %141 = getelementptr &(i32* %137)[i64 1];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %140, i32 %142;
    i32 %144 = sdiv i32 %143, i32 %8;
    store i32* %137 with i32 %144;
    i32 %145 = add i32 %125, i32 1;
    i1 %146 = icmp sgt i32 %1, i32 %145;
    cbr i1 %146(prob = 0.75), ^while.body3, ^while.header4;
}
