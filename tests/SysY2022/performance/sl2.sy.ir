internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i32 %2 = add i32 %0, i32 -1;
    i1 %3 = scmp gt i32 %0, i32 0;
    i1 %4 = scmp gt i32 %2, i32 1;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 0] [^b, i32 %17];
    i1 %6 = scmp lt i32 %5, i32 %0;
    [600 * [600 * i32]]* %7 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %5];
    [600 * [600 * i32]]* %8 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i32 %5];
    cbr i1 %6(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %32];
    i1 %10 = scmp lt i32 %9, i32 %0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^b3, i32 %18];
    i32 %12 = phi [^while.header, i32 1] [^b3, i32 %33];
    i1 %13 = scmp lt i32 %12, i32 %2;
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %12];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * i32]]* %14)[i64 -1];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %14)[i64 1];
    cbr i1 %13(prob = 0.97), ^while.header3, ^b1;
^b:
    i32 %17 = add i32 %5, i32 1;
    ubr ^while.header;
^while.body:
    cbr i1 %3(prob = 0.97), ^indirect, ^b2;
^while.header3:
    i32 %18 = phi [^while.header2, i32 1] [^b4, i32 %44];
    i1 %19 = scmp lt i32 %18, i32 %2;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b3;
^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %20 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %20);
    i32 %21 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %22 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %21];
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %22)[i64 0][i32 %21];
    i32* %24 = getelementptr &([600 * i32]* %23)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %24);
    i32 %25 = add i32 %12, i32 -1;
    [600 * [600 * i32]]* %26 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %25];
    i32 %27 = add i32 %11, i32 -1;
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %26)[i64 0][i32 %27];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    ret i32 0;
^indirect:
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %7)[i64 0][i32 %9];
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %8)[i64 0][i32 %9];
    ubr ^while.body2;
^b2:
    i32 %32 = add i32 %9, i32 1;
    ubr ^while.header1;
^b3:
    i32 %33 = add i32 %12, i32 1;
    ubr ^while.header2;
^while.body1:
    cbr i1 %4(prob = 0.97), ^indirect1, ^b4;
^indirect1:
    [600 * i32]* %34 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %18];
    [600 * i32]* %35 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %18];
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %18];
    [600 * i32]* %37 = getelementptr &([600 * i32]* %34)[i64 -1];
    [600 * i32]* %38 = getelementptr &([600 * i32]* %34)[i64 1];
    ubr ^while.body3;
^while.body2:
    i32 %39 = phi [^indirect, i32 0] [^while.body2, i32 %42];
    i32* %40 = getelementptr &([600 * i32]* %30)[i64 0][i32 %39];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([600 * i32]* %31)[i64 0][i32 %39];
    store i32* %41 with i32 0;
    i32 %42 = add i32 %39, i32 1;
    i1 %43 = scmp lt i32 %42, i32 %0;
    cbr i1 %43(prob = 0.97), ^while.body2, ^b2;
^b4:
    i32 %44 = add i32 %18, i32 1;
    ubr ^while.header3;
^while.body3:
    i32 %45 = phi [^indirect1, i32 1] [^while.body3, i32 %57];
    i32* %46 = getelementptr &([600 * i32]* %34)[i64 0][i32 %45];
    i32* %47 = getelementptr &([600 * i32]* %35)[i64 0][i32 %45];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([600 * i32]* %36)[i64 0][i32 %45];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([600 * i32]* %37)[i64 0][i32 %45];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([600 * i32]* %38)[i64 0][i32 %45];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %46)[i64 -1];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %45, i32 1;
    i32* %58 = getelementptr &(i32* %46)[i64 1];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %52, i32 %54;
    i32 %61 = add i32 %60, i32 %56;
    i32 %62 = add i32 %61, i32 %59;
    i32 %63 = add i32 %62, i32 %48;
    i32 %64 = add i32 %63, i32 %50;
    i32 %65 = sdiv i32 %64, i32 %1;
    store i32* %46 with i32 %65;
    i1 %66 = scmp lt i32 %57, i32 %2;
    cbr i1 %66(prob = 0.97), ^while.body3, ^b4;
}
