internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i1 %2 = icmp sgt i32 %0, i32 0;
    i32 %3 = add i32 %0, i32 -1;
    [600 * [600 * [600 * i32]]]* %4 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %2(prob = 0.984615), ^b, ^b1;
  ^b:
    [4 * i8]* %5 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %6 = ptradd [4 * i8]* %5, i32 0;
    store i32* %6 with i32 %0;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %7);
    ubr ^b1;
  ^b1:
    i1 %8 = icmp sgt i32 %3, i32 1;
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0];
    cbr i1 %8(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [600 * [600 * i32]]* %10 = phi [^b1, [600 * [600 * i32]]* %9] [^b5, [600 * [600 * i32]]* %12];
    i32 %11 = phi [^b1, i32 1] [^b5, i32 %14];
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %11];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * i32]]* %12)[i64 1];
    i32 %14 = add i32 %11, i32 1;
    ubr ^b3;
  ^b2:
    [600 * [600 * i32]]* %15 = phi [^b1, [600 * [600 * i32]]* %9] [^b5, [600 * [600 * i32]]* %12];
    i32 %16 = phi [^b1, i32 1] [^b5, i32 %31];
    i32* %17 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %17);
    i32 %18 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %19 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %18];
    [600 * i32]* %20 = getelementptr &([600 * [600 * i32]]* %19)[i64 0][i32 %18];
    i32* %21 = getelementptr &([600 * i32]* %20)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %21);
    i32 %22 = add i32 %16, i32 -1;
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %22];
    i32* %24 = getelementptr &([600 * i32]* %23)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %24);
    ret i32 0;
  ^b3:
    i32 %25 = phi [^while.body, i32 1] [^b4, i32 %31];
    [600 * i32]* %26 = getelementptr &([600 * [600 * i32]]* %12)[i64 0][i32 %25];
    [600 * i32]* %27 = getelementptr &([600 * i32]* %26)[i64 -1];
    [600 * i32]* %28 = getelementptr &([600 * i32]* %26)[i64 1];
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %10)[i64 0][i32 %25];
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %25];
    i32 %31 = add i32 %25, i32 1;
    ubr ^while.body1;
  ^while.body1:
    i32 %32 = phi [^b3, i32 1] [^while.body1, i32 %52];
    i32* %33 = getelementptr &([600 * i32]* %29)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([600 * i32]* %30)[i64 0][i32 %32];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &([600 * i32]* %27)[i64 0][i32 %32];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &([600 * i32]* %28)[i64 0][i32 %32];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &([600 * i32]* %26)[i64 0][i32 %32];
    i32* %45 = getelementptr &(i32* %44)[i64 -1];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %43, i32 %46;
    i32* %48 = getelementptr &(i32* %44)[i64 1];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32 %51 = sdiv i32 %50, i32 %1;
    store i32* %44 with i32 %51;
    i32 %52 = add i32 %32, i32 1;
    i1 %53 = icmp sgt i32 %3, i32 %52;
    cbr i1 %53(prob = 0.984615), ^while.body1, ^b4;
  ^b4:
    i1 %54 = icmp sgt i32 %3, i32 %31;
    cbr i1 %54(prob = 0.984615), ^b3, ^b5;
  ^b5:
    i1 %55 = icmp sgt i32 %3, i32 %14;
    cbr i1 %55(prob = 0.984615), ^while.body, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 0;
    [600 * [600 * [600 * i32]]]* %6 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b4, i32 %17];
    [600 * [600 * i32]]* %8 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i32 %7];
    ubr ^while.body;
  ^b2:
    ret;
  ^while.body:
    i32 %9 = phi [^b1, i32 0] [^b3, i32 %15];
    [600 * i32]* %10 = getelementptr &([600 * [600 * i32]]* %8)[i64 0][i32 %9];
    ubr ^while.body1;
  ^while.body1:
    i32 %11 = phi [^while.body, i32 0] [^while.body1, i32 %13];
    i32* %12 = getelementptr &([600 * i32]* %10)[i64 0][i32 %11];
    store i32* %12 with i32 1;
    i32 %13 = add i32 %11, i32 1;
    i1 %14 = icmp sgt i32 %4, i32 %13;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b3;
  ^b3:
    i32 %15 = add i32 %9, i32 1;
    i1 %16 = icmp sgt i32 %4, i32 %15;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b4;
  ^b4:
    i32 %17 = add i32 %7, i32 1;
    i1 %18 = icmp sgt i32 %1, i32 %17;
    cbr i1 %18(prob = 0.984615), ^b1, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
