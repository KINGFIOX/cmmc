internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b, i32 %21] [^entry, i32 0];
    i32 %3 = phi [^b, i32 %10] [^entry, i32 %1];
    i32 %4 = phi [^b, i32 %11] [^entry, i32 %0];
    i32 %5 = phi [^b, i32 %11] [^entry, i32 %0];
    i32 %6 = phi [^b, i32 %21] [^entry, i32 0];
    i1 %7 = scmp lt i32 %6, i32 %5;
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %8 = phi [^while.header, i32 %2] [^b2, i32 %22];
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %53];
    i32 %10 = phi [^while.header, i32 %3] [^b2, i32 %25];
    i32 %11 = phi [^while.header, i32 %4] [^b2, i32 %26];
    i32 %12 = phi [^while.header, i32 0] [^b2, i32 %53];
    i1 %13 = scmp lt i32 %12, i32 %11;
    cbr i1 %13(prob = 0.97), ^while.header3, ^b;
^while.header2:
    i32 %14 = phi [^while.header, i32 1] [^b3, i32 %54];
    i32 %15 = phi [^while.header, i32 1] [^b3, i32 %30];
    i32 %16 = phi [^while.header, i32 %3] [^b3, i32 %31];
    i32 %17 = phi [^while.header, i32 %4] [^b3, i32 %32];
    i32 %18 = phi [^while.header, i32 1] [^b3, i32 %54];
    i32 %19 = add i32 %17, i32 -1;
    i1 %20 = scmp lt i32 %18, i32 %19;
    cbr i1 %20(prob = 0.97), ^while.header4, ^b1;
^b:
    i32 %21 = add i32 %8, i32 1;
    ubr ^while.header;
^while.header3:
    i32 %22 = phi [^while.header1, i32 %8] [^while.body, i32 %22];
    i32 %23 = phi [^while.header1, i32 %9] [^while.body, i32 %23];
    i32 %24 = phi [^while.header1, i32 0] [^while.body, i32 %52];
    i32 %25 = phi [^while.header1, i32 %10] [^while.body, i32 %25];
    i32 %26 = phi [^while.header1, i32 %11] [^while.body, i32 %26];
    i32 %27 = phi [^while.header1, i32 0] [^while.body, i32 %52];
    i1 %28 = scmp lt i32 %27, i32 %26;
    cbr i1 %28(prob = 0.97), ^while.body, ^b2;
^while.header4:
    i32 %29 = phi [^while.header2, i32 %14] [^b4, i32 %55];
    i32 %30 = phi [^while.header2, i32 1] [^b4, i32 %91];
    i32 %31 = phi [^while.header2, i32 %16] [^b4, i32 %58];
    i32 %32 = phi [^while.header2, i32 %17] [^b4, i32 %59];
    i32 %33 = phi [^while.header2, i32 1] [^b4, i32 %91];
    i32 %34 = add i32 %32, i32 -1;
    i1 %35 = scmp lt i32 %33, i32 %34;
    cbr i1 %35(prob = 0.97), ^while.header5, ^b3;
^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %36 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %17, i32* %36);
    i32 %37 = sdiv i32 %17, i32 2;
    [600 * [600 * i32]]* %38 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %37];
    [600 * i32]* %39 = getelementptr &([600 * [600 * i32]]* %38)[i64 0][i32 %37];
    i32* %40 = getelementptr &([600 * i32]* %39)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %17, i32* %40);
    i32 %41 = add i32 %14, i32 -1;
    [600 * [600 * i32]]* %42 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %41];
    i32 %43 = add i32 %15, i32 -1;
    [600 * i32]* %44 = getelementptr &([600 * [600 * i32]]* %42)[i64 0][i32 %43];
    i32* %45 = getelementptr &([600 * i32]* %44)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %17, i32* %45);
    ret i32 0;
^while.body:
    [600 * [600 * i32]]* %46 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %22];
    [600 * i32]* %47 = getelementptr &([600 * [600 * i32]]* %46)[i64 0][i32 %23];
    i32* %48 = getelementptr &([600 * i32]* %47)[i64 0][i32 %24];
    store i32* %48 with i32 1;
    [600 * [600 * i32]]* %49 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i32 %22];
    [600 * i32]* %50 = getelementptr &([600 * [600 * i32]]* %49)[i64 0][i32 %23];
    i32* %51 = getelementptr &([600 * i32]* %50)[i64 0][i32 %24];
    store i32* %51 with i32 0;
    i32 %52 = add i32 %24, i32 1;
    ubr ^while.header3;
^b2:
    i32 %53 = add i32 %23, i32 1;
    ubr ^while.header1;
^b3:
    i32 %54 = add i32 %29, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %55 = phi [^while.header4, i32 %29] [^while.body1, i32 %55];
    i32 %56 = phi [^while.header4, i32 %30] [^while.body1, i32 %56];
    i32 %57 = phi [^while.header4, i32 1] [^while.body1, i32 %82];
    i32 %58 = phi [^while.header4, i32 %31] [^while.body1, i32 %58];
    i32 %59 = phi [^while.header4, i32 %32] [^while.body1, i32 %59];
    i32 %60 = phi [^while.header4, i32 1] [^while.body1, i32 %82];
    i32 %61 = add i32 %59, i32 -1;
    i1 %62 = scmp lt i32 %60, i32 %61;
    cbr i1 %62(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    [600 * [600 * i32]]* %63 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %55];
    [600 * i32]* %64 = getelementptr &([600 * [600 * i32]]* %63)[i64 0][i32 %56];
    i32* %65 = getelementptr &([600 * i32]* %64)[i64 0][i32 %57];
    [600 * [600 * i32]]* %66 = getelementptr &([600 * [600 * i32]]* %63)[i64 -1];
    [600 * i32]* %67 = getelementptr &([600 * [600 * i32]]* %66)[i64 0][i32 %56];
    i32* %68 = getelementptr &([600 * i32]* %67)[i64 0][i32 %57];
    i32 %69 = load i32* %68;
    [600 * [600 * i32]]* %70 = getelementptr &([600 * [600 * i32]]* %63)[i64 1];
    [600 * i32]* %71 = getelementptr &([600 * [600 * i32]]* %70)[i64 0][i32 %56];
    i32* %72 = getelementptr &([600 * i32]* %71)[i64 0][i32 %57];
    i32 %73 = load i32* %72;
    [600 * i32]* %74 = getelementptr &([600 * i32]* %64)[i64 -1];
    i32* %75 = getelementptr &([600 * i32]* %74)[i64 0][i32 %57];
    i32 %76 = load i32* %75;
    [600 * i32]* %77 = getelementptr &([600 * i32]* %64)[i64 1];
    i32* %78 = getelementptr &([600 * i32]* %77)[i64 0][i32 %57];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %65)[i64 -1];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %57, i32 1;
    i32* %83 = getelementptr &(i32* %65)[i64 1];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %84, i32 %69;
    i32 %86 = add i32 %85, i32 %73;
    i32 %87 = add i32 %86, i32 %76;
    i32 %88 = add i32 %87, i32 %79;
    i32 %89 = add i32 %88, i32 %81;
    i32 %90 = sdiv i32 %89, i32 %58;
    store i32* %65 with i32 %90;
    ubr ^while.header5;
^b4:
    i32 %91 = add i32 %56, i32 1;
    ubr ^while.header4;
}
