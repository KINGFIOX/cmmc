internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @spmv(i32 %n, i32* %xptr, i32* %yidx, i32* %vals, i32* %b, i32* %x) -> void {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32** %x1 = alloc i32*;
    i32** %b1 = alloc i32*;
    i32** %vals1 = alloc i32*;
    i32** %yidx1 = alloc i32*;
    i32** %xptr1 = alloc i32*;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32** %xptr1 with i32* %xptr;
    store i32** %yidx1 with i32* %yidx;
    store i32** %vals1 with i32* %vals;
    store i32** %b1 with i32* %b;
    store i32** %x1 with i32* %x;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %x1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    store i32* %8 with i32 0;
    i32 %9 = load i32* %i;
    i32 %10 = add i32 %9, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^b2:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %11 = load i32* %i;
    i32 %12 = load i32* %n1;
    i1 %13 = scmp lt i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = load i32** %xptr1;
    i32* %19 = getelementptr &(i32* %18)[i64 %17];
    i32 %20 = load i32* %19;
    store i32* %j with i32 %20;
    ubr ^while.header2;
^b3:
    ret;
^while.header2:
    i32 %21 = load i32* %j;
    i32 %22 = load i32* %i;
    i32 %23 = add i32 %22, i32 1;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = load i32** %xptr1;
    i32* %26 = getelementptr &(i32* %25)[i64 %24];
    i32 %27 = load i32* %26;
    i1 %28 = scmp lt i32 %21, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body2, ^b4;
^while.body2:
    i32 %31 = load i32* %j;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = load i32** %yidx1;
    i32* %34 = getelementptr &(i32* %33)[i64 %32];
    i32 %35 = load i32* %34;
    i64 %36 = sext i32 %35 to i64;
    i32* %37 = load i32** %x1;
    i32* %38 = getelementptr &(i32* %37)[i64 %36];
    i32 %39 = load i32* %j;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = load i32** %yidx1;
    i32* %42 = getelementptr &(i32* %41)[i64 %40];
    i32 %43 = load i32* %42;
    i64 %44 = sext i32 %43 to i64;
    i32* %45 = load i32** %x1;
    i32* %46 = getelementptr &(i32* %45)[i64 %44];
    i32 %47 = load i32* %46;
    i32 %48 = load i32* %j;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = load i32** %vals1;
    i32* %51 = getelementptr &(i32* %50)[i64 %49];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %47, i32 %52;
    store i32* %38 with i32 %53;
    i32 %54 = load i32* %j;
    i32 %55 = add i32 %54, i32 1;
    store i32* %j with i32 %55;
    ubr ^while.header2;
^b4:
    i32 %56 = load i32* %i;
    i64 %57 = sext i32 %56 to i64;
    i32* %58 = load i32** %xptr1;
    i32* %59 = getelementptr &(i32* %58)[i64 %57];
    i32 %60 = load i32* %59;
    store i32* %j with i32 %60;
    ubr ^while.header3;
^while.header3:
    i32 %61 = load i32* %j;
    i32 %62 = load i32* %i;
    i32 %63 = add i32 %62, i32 1;
    i64 %64 = sext i32 %63 to i64;
    i32* %65 = load i32** %xptr1;
    i32* %66 = getelementptr &(i32* %65)[i64 %64];
    i32 %67 = load i32* %66;
    i1 %68 = scmp lt i32 %61, i32 %67;
    i32 %69 = zext i1 %68 to i32;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.97), ^while.body3, ^b5;
^while.body3:
    i32 %71 = load i32* %j;
    i64 %72 = sext i32 %71 to i64;
    i32* %73 = load i32** %yidx1;
    i32* %74 = getelementptr &(i32* %73)[i64 %72];
    i32 %75 = load i32* %74;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = load i32** %x1;
    i32* %78 = getelementptr &(i32* %77)[i64 %76];
    i32 %79 = load i32* %j;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = load i32** %yidx1;
    i32* %82 = getelementptr &(i32* %81)[i64 %80];
    i32 %83 = load i32* %82;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = load i32** %x1;
    i32* %86 = getelementptr &(i32* %85)[i64 %84];
    i32 %87 = load i32* %86;
    i32 %88 = load i32* %j;
    i64 %89 = sext i32 %88 to i64;
    i32* %90 = load i32** %vals1;
    i32* %91 = getelementptr &(i32* %90)[i64 %89];
    i32 %92 = load i32* %91;
    i32 %93 = load i32* %i;
    i64 %94 = sext i32 %93 to i64;
    i32* %95 = load i32** %b1;
    i32* %96 = getelementptr &(i32* %95)[i64 %94];
    i32 %97 = load i32* %96;
    i32 %98 = sub i32 %97, i32 1;
    i32 %99 = mul i32 %92, i32 %98;
    i32 %100 = add i32 %87, i32 %99;
    store i32* %78 with i32 %100;
    i32 %101 = load i32* %j;
    i32 %102 = add i32 %101, i32 1;
    store i32* %j with i32 %102;
    ubr ^while.header3;
^b5:
    i32 %103 = load i32* %i;
    i32 %104 = add i32 %103, i32 1;
    store i32* %i with i32 %104;
    ubr ^while.header1;
}
internal i32* @N { ReadOnly } = 100010;
internal i32* @M { ReadOnly } = 3000000;
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
internal [100010 * i32]* @c;
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = sub i32 %1, i32 1;
    store i32* %n with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    store i32* %m with i32 %4;
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    call (i32) -> void @starttime(i32 39);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %9 = load i32* %i;
    i1 %10 = scmp lt i32 %9, i32 100;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %13 = load i32* %n;
    i32* %14 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32* %15 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32* %16 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32* %17 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32* %18 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    call (i32, i32*, i32*, i32*, i32*, i32*) -> void @spmv(i32 %13, i32* %14, i32* %15, i32* %16, i32* %17, i32* %18);
    i32 %19 = load i32* %n;
    i32* %20 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32* %21 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32* %22 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32* %23 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    i32* %24 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    call (i32, i32*, i32*, i32*, i32*, i32*) -> void @spmv(i32 %19, i32* %20, i32* %21, i32* %22, i32* %23, i32* %24);
    i32 %25 = load i32* %i;
    i32 %26 = add i32 %25, i32 1;
    store i32* %i with i32 %26;
    ubr ^while.header;
^b:
    call (i32) -> void @stoptime(i32 47);
    i32 %27 = load i32* %n;
    i32* %28 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %27, i32* %28);
    ret i32 0;
}
