internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [1000 * f32]* %var = alloc [1000 * f32];
    [1000 * f32]* %mean = alloc [1000 * f32];
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^b, i32 %5];
    [1000 * f32]* %1 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %0];
    f32* %2 = getelementptr &([1000 * f32]* %1)[i64 0][i64 0];
    i32 %3 = call (f32*) -> i32 @getfarray(f32* %2);
    i1 %4 = scmp neq i32 %3, i32 1000;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
^b:
    i32 %5 = add i32 %0, i32 1;
    i1 %6 = scmp lt i32 %5, i32 1000;
    cbr i1 %6(prob = 1), ^while.body, ^b2;
^b1:
    i32 %7 = phi [^while.body, i32 %3] [^b8, i32 0];
    ret i32 %7;
^b2:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.body1;
^while.body1:
    i32 %8 = phi [^b2, i32 0] [^b7, i32 %402];
    f32 %9 = phi [^b2, f32 0] [^b7, f32 %399];
    ubr ^while.body2;
^while.body2:
    i32 %10 = phi [^while.body1, i32 0] [^while.body4, i32 %99];
    f32* %11 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %10];
    [1000 * f32]* %12 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %10];
    ubr ^while.body3;
^while.body3:
    f32 %13 = phi [^while.body2, f32 0] [^indirect, f32 %65];
    i32 %14 = phi [^while.body2, i32 0] [^indirect, i32 %63];
    f32* %15 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %14];
    f32 %16 = load f32* %15;
    f32 %17 = fadd f32 %13, f32 %16;
    f32* %18 = getelementptr &(f32* %15)[i64 1];
    f32 %19 = load f32* %18;
    f32 %20 = fadd f32 %17, f32 %19;
    f32* %21 = getelementptr &(f32* %15)[i64 2];
    f32 %22 = load f32* %21;
    f32 %23 = fadd f32 %20, f32 %22;
    f32* %24 = getelementptr &(f32* %15)[i64 3];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    f32* %27 = getelementptr &(f32* %15)[i64 4];
    f32 %28 = load f32* %27;
    f32 %29 = fadd f32 %26, f32 %28;
    f32* %30 = getelementptr &(f32* %15)[i64 5];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &(f32* %15)[i64 6];
    f32 %34 = load f32* %33;
    f32 %35 = fadd f32 %32, f32 %34;
    f32* %36 = getelementptr &(f32* %15)[i64 7];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &(f32* %15)[i64 8];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32* %42 = getelementptr &(f32* %15)[i64 9];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %15)[i64 10];
    f32 %46 = load f32* %45;
    f32 %47 = fadd f32 %44, f32 %46;
    f32* %48 = getelementptr &(f32* %15)[i64 11];
    f32 %49 = load f32* %48;
    f32 %50 = fadd f32 %47, f32 %49;
    f32* %51 = getelementptr &(f32* %15)[i64 12];
    f32 %52 = load f32* %51;
    f32 %53 = fadd f32 %50, f32 %52;
    f32* %54 = getelementptr &(f32* %15)[i64 13];
    f32 %55 = load f32* %54;
    f32 %56 = fadd f32 %53, f32 %55;
    f32* %57 = getelementptr &(f32* %15)[i64 14];
    f32 %58 = load f32* %57;
    f32 %59 = fadd f32 %56, f32 %58;
    f32* %60 = getelementptr &(f32* %15)[i64 15];
    f32 %61 = load f32* %60;
    f32 %62 = fadd f32 %59, f32 %61;
    store f32* %11 with f32 %62;
    i32 %63 = add i32 %14, i32 16;
    i1 %64 = scmp lt i32 %63, i32 992;
    cbr i1 %64(prob = 0.98), ^indirect, ^while.body4;
^indirect:
    f32 %65 = load f32* %11;
    ubr ^while.body3;
^while.body4:
    f32* %66 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %63];
    f32 %67 = load f32* %66;
    f32 %68 = fadd f32 %62, f32 %67;
    store f32* %11 with f32 %68;
    f32 %69 = load f32* %11;
    f32* %70 = getelementptr &(f32* %66)[i64 1];
    f32 %71 = load f32* %70;
    f32 %72 = fadd f32 %69, f32 %71;
    store f32* %11 with f32 %72;
    f32 %73 = load f32* %11;
    f32* %74 = getelementptr &(f32* %66)[i64 2];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    store f32* %11 with f32 %76;
    f32 %77 = load f32* %11;
    f32* %78 = getelementptr &(f32* %66)[i64 3];
    f32 %79 = load f32* %78;
    f32 %80 = fadd f32 %77, f32 %79;
    store f32* %11 with f32 %80;
    f32 %81 = load f32* %11;
    f32* %82 = getelementptr &(f32* %66)[i64 4];
    f32 %83 = load f32* %82;
    f32 %84 = fadd f32 %81, f32 %83;
    store f32* %11 with f32 %84;
    f32 %85 = load f32* %11;
    f32* %86 = getelementptr &(f32* %66)[i64 5];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    store f32* %11 with f32 %88;
    f32 %89 = load f32* %11;
    f32* %90 = getelementptr &(f32* %66)[i64 6];
    f32 %91 = load f32* %90;
    f32 %92 = fadd f32 %89, f32 %91;
    store f32* %11 with f32 %92;
    f32 %93 = load f32* %11;
    f32* %94 = getelementptr &(f32* %66)[i64 7];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    store f32* %11 with f32 %96;
    f32 %97 = load f32* %11;
    f32 %98 = fdiv f32 %97, f32 1000;
    store f32* %11 with f32 %98;
    i32 %99 = add i32 %10, i32 1;
    i1 %100 = scmp lt i32 %99, i32 1000;
    cbr i1 %100(prob = 1), ^while.body2, ^while.body5;
^while.body5:
    i32 %101 = phi [^while.body4, i32 0] [^b4, i32 %254];
    f32* %102 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %101];
    [1000 * f32]* %103 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %101];
    f32* %104 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %101];
    ubr ^while.body6;
^while.body6:
    f32 %105 = phi [^while.body5, f32 0] [^indirect1, f32 %190];
    i32 %106 = phi [^while.body5, i32 0] [^indirect1, i32 %188];
    f32* %107 = getelementptr &([1000 * f32]* %103)[i64 0][i32 %106];
    f32 %108 = load f32* %107;
    f32 %109 = load f32* %104;
    f32 %110 = fsub f32 %108, f32 %109;
    f32 %111 = fmul f32 %110, f32 %110;
    f32 %112 = fadd f32 %105, f32 %111;
    f32* %113 = getelementptr &(f32* %107)[i64 1];
    f32 %114 = load f32* %113;
    f32 %115 = fsub f32 %114, f32 %109;
    f32 %116 = fmul f32 %115, f32 %115;
    f32 %117 = fadd f32 %112, f32 %116;
    f32* %118 = getelementptr &(f32* %107)[i64 2];
    f32 %119 = load f32* %118;
    f32 %120 = fsub f32 %119, f32 %109;
    f32 %121 = fmul f32 %120, f32 %120;
    f32 %122 = fadd f32 %117, f32 %121;
    f32* %123 = getelementptr &(f32* %107)[i64 3];
    f32 %124 = load f32* %123;
    f32 %125 = fsub f32 %124, f32 %109;
    f32 %126 = fmul f32 %125, f32 %125;
    f32 %127 = fadd f32 %122, f32 %126;
    f32* %128 = getelementptr &(f32* %107)[i64 4];
    f32 %129 = load f32* %128;
    f32 %130 = fsub f32 %129, f32 %109;
    f32 %131 = fmul f32 %130, f32 %130;
    f32 %132 = fadd f32 %127, f32 %131;
    f32* %133 = getelementptr &(f32* %107)[i64 5];
    f32 %134 = load f32* %133;
    f32 %135 = fsub f32 %134, f32 %109;
    f32 %136 = fmul f32 %135, f32 %135;
    f32 %137 = fadd f32 %132, f32 %136;
    f32* %138 = getelementptr &(f32* %107)[i64 6];
    f32 %139 = load f32* %138;
    f32 %140 = fsub f32 %139, f32 %109;
    f32 %141 = fmul f32 %140, f32 %140;
    f32 %142 = fadd f32 %137, f32 %141;
    f32* %143 = getelementptr &(f32* %107)[i64 7];
    f32 %144 = load f32* %143;
    f32 %145 = fsub f32 %144, f32 %109;
    f32 %146 = fmul f32 %145, f32 %145;
    f32 %147 = fadd f32 %142, f32 %146;
    f32* %148 = getelementptr &(f32* %107)[i64 8];
    f32 %149 = load f32* %148;
    f32 %150 = fsub f32 %149, f32 %109;
    f32 %151 = fmul f32 %150, f32 %150;
    f32 %152 = fadd f32 %147, f32 %151;
    f32* %153 = getelementptr &(f32* %107)[i64 9];
    f32 %154 = load f32* %153;
    f32 %155 = fsub f32 %154, f32 %109;
    f32 %156 = fmul f32 %155, f32 %155;
    f32 %157 = fadd f32 %152, f32 %156;
    f32* %158 = getelementptr &(f32* %107)[i64 10];
    f32 %159 = load f32* %158;
    f32 %160 = fsub f32 %159, f32 %109;
    f32 %161 = fmul f32 %160, f32 %160;
    f32 %162 = fadd f32 %157, f32 %161;
    f32* %163 = getelementptr &(f32* %107)[i64 11];
    f32 %164 = load f32* %163;
    f32 %165 = fsub f32 %164, f32 %109;
    f32 %166 = fmul f32 %165, f32 %165;
    f32 %167 = fadd f32 %162, f32 %166;
    f32* %168 = getelementptr &(f32* %107)[i64 12];
    f32 %169 = load f32* %168;
    f32 %170 = fsub f32 %169, f32 %109;
    f32 %171 = fmul f32 %170, f32 %170;
    f32 %172 = fadd f32 %167, f32 %171;
    f32* %173 = getelementptr &(f32* %107)[i64 13];
    f32 %174 = load f32* %173;
    f32 %175 = fsub f32 %174, f32 %109;
    f32 %176 = fmul f32 %175, f32 %175;
    f32 %177 = fadd f32 %172, f32 %176;
    f32* %178 = getelementptr &(f32* %107)[i64 14];
    f32 %179 = load f32* %178;
    f32 %180 = fsub f32 %179, f32 %109;
    f32 %181 = fmul f32 %180, f32 %180;
    f32 %182 = fadd f32 %177, f32 %181;
    f32* %183 = getelementptr &(f32* %107)[i64 15];
    f32 %184 = load f32* %183;
    f32 %185 = fsub f32 %184, f32 %109;
    f32 %186 = fmul f32 %185, f32 %185;
    f32 %187 = fadd f32 %182, f32 %186;
    store f32* %102 with f32 %187;
    i32 %188 = add i32 %106, i32 16;
    i1 %189 = scmp lt i32 %188, i32 992;
    cbr i1 %189(prob = 0.98), ^indirect1, ^while.body7;
^indirect1:
    f32 %190 = load f32* %102;
    ubr ^while.body6;
^while.body7:
    f32* %191 = getelementptr &([1000 * f32]* %103)[i64 0][i32 %188];
    f32 %192 = load f32* %191;
    f32 %193 = fsub f32 %192, f32 %109;
    f32 %194 = fmul f32 %193, f32 %193;
    f32 %195 = fadd f32 %187, f32 %194;
    store f32* %102 with f32 %195;
    f32 %196 = load f32* %102;
    f32* %197 = getelementptr &(f32* %191)[i64 1];
    f32 %198 = load f32* %197;
    f32 %199 = fsub f32 %198, f32 %109;
    f32 %200 = fmul f32 %199, f32 %199;
    f32 %201 = fadd f32 %196, f32 %200;
    store f32* %102 with f32 %201;
    f32 %202 = load f32* %102;
    f32* %203 = getelementptr &(f32* %191)[i64 2];
    f32 %204 = load f32* %203;
    f32 %205 = fsub f32 %204, f32 %109;
    f32 %206 = fmul f32 %205, f32 %205;
    f32 %207 = fadd f32 %202, f32 %206;
    store f32* %102 with f32 %207;
    f32 %208 = load f32* %102;
    f32* %209 = getelementptr &(f32* %191)[i64 3];
    f32 %210 = load f32* %209;
    f32 %211 = fsub f32 %210, f32 %109;
    f32 %212 = fmul f32 %211, f32 %211;
    f32 %213 = fadd f32 %208, f32 %212;
    store f32* %102 with f32 %213;
    f32 %214 = load f32* %102;
    f32* %215 = getelementptr &(f32* %191)[i64 4];
    f32 %216 = load f32* %215;
    f32 %217 = fsub f32 %216, f32 %109;
    f32 %218 = fmul f32 %217, f32 %217;
    f32 %219 = fadd f32 %214, f32 %218;
    store f32* %102 with f32 %219;
    f32 %220 = load f32* %102;
    f32* %221 = getelementptr &(f32* %191)[i64 5];
    f32 %222 = load f32* %221;
    f32 %223 = fsub f32 %222, f32 %109;
    f32 %224 = fmul f32 %223, f32 %223;
    f32 %225 = fadd f32 %220, f32 %224;
    store f32* %102 with f32 %225;
    f32 %226 = load f32* %102;
    f32* %227 = getelementptr &(f32* %191)[i64 6];
    f32 %228 = load f32* %227;
    f32 %229 = fsub f32 %228, f32 %109;
    f32 %230 = fmul f32 %229, f32 %229;
    f32 %231 = fadd f32 %226, f32 %230;
    store f32* %102 with f32 %231;
    f32 %232 = load f32* %102;
    f32* %233 = getelementptr &(f32* %191)[i64 7];
    f32 %234 = load f32* %233;
    f32 %235 = fsub f32 %234, f32 %109;
    f32 %236 = fmul f32 %235, f32 %235;
    f32 %237 = fadd f32 %232, f32 %236;
    store f32* %102 with f32 %237;
    f32 %238 = load f32* %102;
    f32 %239 = fdiv f32 %238, f32 1000;
    f32 %240 = fadd f32 %239, f32 0.01;
    f32 %241 = fdiv f32 %240, f32 2;
    f32 %242 = fmul f32 %241, f32 %241;
    f32 %243 = fsub f32 %242, f32 %240;
    i1 %244 = fcmp lt f32 %243, f32 0;
    cbr i1 %244(prob = 0.5), ^if.then, ^b3;
^if.then:
    f32 %245 = fneg f32 %243;
    ubr ^b3;
^b3:
    f32 %246 = phi [^while.body7, f32 %243] [^if.then, f32 %245];
    i1 %247 = fcmp gt f32 %246, f32 0.001;
    cbr i1 %247(prob = 0.97), ^while.body8, ^b4;
^while.body8:
    f32 %248 = phi [^b3, f32 %240] [^b6, f32 %265];
    f32 %249 = phi [^b3, f32 0] [^b6, f32 %266];
    f32 %250 = phi [^b3, f32 %241] [^b6, f32 %267];
    f32 %251 = fmul f32 %250, f32 %250;
    i1 %252 = fcmp gt f32 %251, f32 %240;
    cbr i1 %252(prob = 0.5), ^if.then1, ^if.else;
^b4:
    f32 %253 = phi [^b3, f32 %241] [^b6, f32 %267];
    store f32* %102 with f32 %253;
    i32 %254 = add i32 %101, i32 1;
    i1 %255 = scmp lt i32 %254, i32 1000;
    cbr i1 %255(prob = 1), ^while.body5, ^while.body9;
^if.then1:
    f32 %256 = fadd f32 %250, f32 %249;
    f32 %257 = fdiv f32 %256, f32 2;
    ubr ^b5;
^if.else:
    f32 %258 = fadd f32 %250, f32 %248;
    f32 %259 = fdiv f32 %258, f32 2;
    ubr ^b5;
^while.body9:
    i32 %260 = phi [^b4, i32 0] [^while.body11, i32 %400];
    f32 %261 = phi [^b4, f32 %9] [^while.body11, f32 %399];
    [1000 * f32]* %262 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %260];
    f32* %263 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %260];
    f32* %264 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %260];
    ubr ^while.body10;
^b5:
    f32 %265 = phi [^if.then1, f32 %250] [^if.else, f32 %248];
    f32 %266 = phi [^if.then1, f32 %249] [^if.else, f32 %250];
    f32 %267 = phi [^if.then1, f32 %257] [^if.else, f32 %259];
    f32 %268 = fmul f32 %267, f32 %267;
    f32 %269 = fsub f32 %268, f32 %240;
    i1 %270 = fcmp lt f32 %269, f32 0;
    cbr i1 %270(prob = 0.5), ^if.then2, ^b6;
^while.body10:
    i32 %271 = phi [^while.body9, i32 0] [^while.body10, i32 %355];
    f32 %272 = phi [^while.body9, f32 %261] [^while.body10, f32 %354];
    f32* %273 = getelementptr &([1000 * f32]* %262)[i64 0][i32 %271];
    f32 %274 = load f32* %273;
    f32 %275 = load f32* %263;
    f32 %276 = fsub f32 %274, f32 %275;
    f32 %277 = load f32* %264;
    f32 %278 = fdiv f32 %276, f32 %277;
    store f32* %273 with f32 %278;
    f32 %279 = fadd f32 %272, f32 %278;
    f32* %280 = getelementptr &(f32* %273)[i64 1];
    f32 %281 = load f32* %280;
    f32 %282 = fsub f32 %281, f32 %275;
    f32 %283 = fdiv f32 %282, f32 %277;
    store f32* %280 with f32 %283;
    f32 %284 = fadd f32 %279, f32 %283;
    f32* %285 = getelementptr &(f32* %273)[i64 2];
    f32 %286 = load f32* %285;
    f32 %287 = fsub f32 %286, f32 %275;
    f32 %288 = fdiv f32 %287, f32 %277;
    store f32* %285 with f32 %288;
    f32 %289 = fadd f32 %284, f32 %288;
    f32* %290 = getelementptr &(f32* %273)[i64 3];
    f32 %291 = load f32* %290;
    f32 %292 = fsub f32 %291, f32 %275;
    f32 %293 = fdiv f32 %292, f32 %277;
    store f32* %290 with f32 %293;
    f32 %294 = fadd f32 %289, f32 %293;
    f32* %295 = getelementptr &(f32* %273)[i64 4];
    f32 %296 = load f32* %295;
    f32 %297 = fsub f32 %296, f32 %275;
    f32 %298 = fdiv f32 %297, f32 %277;
    store f32* %295 with f32 %298;
    f32 %299 = fadd f32 %294, f32 %298;
    f32* %300 = getelementptr &(f32* %273)[i64 5];
    f32 %301 = load f32* %300;
    f32 %302 = fsub f32 %301, f32 %275;
    f32 %303 = fdiv f32 %302, f32 %277;
    store f32* %300 with f32 %303;
    f32 %304 = fadd f32 %299, f32 %303;
    f32* %305 = getelementptr &(f32* %273)[i64 6];
    f32 %306 = load f32* %305;
    f32 %307 = fsub f32 %306, f32 %275;
    f32 %308 = fdiv f32 %307, f32 %277;
    store f32* %305 with f32 %308;
    f32 %309 = fadd f32 %304, f32 %308;
    f32* %310 = getelementptr &(f32* %273)[i64 7];
    f32 %311 = load f32* %310;
    f32 %312 = fsub f32 %311, f32 %275;
    f32 %313 = fdiv f32 %312, f32 %277;
    store f32* %310 with f32 %313;
    f32 %314 = fadd f32 %309, f32 %313;
    f32* %315 = getelementptr &(f32* %273)[i64 8];
    f32 %316 = load f32* %315;
    f32 %317 = fsub f32 %316, f32 %275;
    f32 %318 = fdiv f32 %317, f32 %277;
    store f32* %315 with f32 %318;
    f32 %319 = fadd f32 %314, f32 %318;
    f32* %320 = getelementptr &(f32* %273)[i64 9];
    f32 %321 = load f32* %320;
    f32 %322 = fsub f32 %321, f32 %275;
    f32 %323 = fdiv f32 %322, f32 %277;
    store f32* %320 with f32 %323;
    f32 %324 = fadd f32 %319, f32 %323;
    f32* %325 = getelementptr &(f32* %273)[i64 10];
    f32 %326 = load f32* %325;
    f32 %327 = fsub f32 %326, f32 %275;
    f32 %328 = fdiv f32 %327, f32 %277;
    store f32* %325 with f32 %328;
    f32 %329 = fadd f32 %324, f32 %328;
    f32* %330 = getelementptr &(f32* %273)[i64 11];
    f32 %331 = load f32* %330;
    f32 %332 = fsub f32 %331, f32 %275;
    f32 %333 = fdiv f32 %332, f32 %277;
    store f32* %330 with f32 %333;
    f32 %334 = fadd f32 %329, f32 %333;
    f32* %335 = getelementptr &(f32* %273)[i64 12];
    f32 %336 = load f32* %335;
    f32 %337 = fsub f32 %336, f32 %275;
    f32 %338 = fdiv f32 %337, f32 %277;
    store f32* %335 with f32 %338;
    f32 %339 = fadd f32 %334, f32 %338;
    f32* %340 = getelementptr &(f32* %273)[i64 13];
    f32 %341 = load f32* %340;
    f32 %342 = fsub f32 %341, f32 %275;
    f32 %343 = fdiv f32 %342, f32 %277;
    store f32* %340 with f32 %343;
    f32 %344 = fadd f32 %339, f32 %343;
    f32* %345 = getelementptr &(f32* %273)[i64 14];
    f32 %346 = load f32* %345;
    f32 %347 = fsub f32 %346, f32 %275;
    f32 %348 = fdiv f32 %347, f32 %277;
    store f32* %345 with f32 %348;
    f32 %349 = fadd f32 %344, f32 %348;
    f32* %350 = getelementptr &(f32* %273)[i64 15];
    f32 %351 = load f32* %350;
    f32 %352 = fsub f32 %351, f32 %275;
    f32 %353 = fdiv f32 %352, f32 %277;
    store f32* %350 with f32 %353;
    f32 %354 = fadd f32 %349, f32 %353;
    i32 %355 = add i32 %271, i32 16;
    i1 %356 = scmp lt i32 %355, i32 992;
    cbr i1 %356(prob = 0.98), ^while.body10, ^while.body11;
^if.then2:
    f32 %357 = fneg f32 %269;
    ubr ^b6;
^b6:
    f32 %358 = phi [^b5, f32 %269] [^if.then2, f32 %357];
    i1 %359 = fcmp gt f32 %358, f32 0.001;
    cbr i1 %359(prob = 0.97), ^while.body8, ^b4;
^while.body11:
    f32* %360 = getelementptr &([1000 * f32]* %262)[i64 0][i32 %355];
    f32 %361 = load f32* %360;
    f32 %362 = fsub f32 %361, f32 %275;
    f32 %363 = fdiv f32 %362, f32 %277;
    store f32* %360 with f32 %363;
    f32 %364 = fadd f32 %354, f32 %363;
    f32* %365 = getelementptr &(f32* %360)[i64 1];
    f32 %366 = load f32* %365;
    f32 %367 = fsub f32 %366, f32 %275;
    f32 %368 = fdiv f32 %367, f32 %277;
    store f32* %365 with f32 %368;
    f32 %369 = fadd f32 %364, f32 %368;
    f32* %370 = getelementptr &(f32* %360)[i64 2];
    f32 %371 = load f32* %370;
    f32 %372 = fsub f32 %371, f32 %275;
    f32 %373 = fdiv f32 %372, f32 %277;
    store f32* %370 with f32 %373;
    f32 %374 = fadd f32 %369, f32 %373;
    f32* %375 = getelementptr &(f32* %360)[i64 3];
    f32 %376 = load f32* %375;
    f32 %377 = fsub f32 %376, f32 %275;
    f32 %378 = fdiv f32 %377, f32 %277;
    store f32* %375 with f32 %378;
    f32 %379 = fadd f32 %374, f32 %378;
    f32* %380 = getelementptr &(f32* %360)[i64 4];
    f32 %381 = load f32* %380;
    f32 %382 = fsub f32 %381, f32 %275;
    f32 %383 = fdiv f32 %382, f32 %277;
    store f32* %380 with f32 %383;
    f32 %384 = fadd f32 %379, f32 %383;
    f32* %385 = getelementptr &(f32* %360)[i64 5];
    f32 %386 = load f32* %385;
    f32 %387 = fsub f32 %386, f32 %275;
    f32 %388 = fdiv f32 %387, f32 %277;
    store f32* %385 with f32 %388;
    f32 %389 = fadd f32 %384, f32 %388;
    f32* %390 = getelementptr &(f32* %360)[i64 6];
    f32 %391 = load f32* %390;
    f32 %392 = fsub f32 %391, f32 %275;
    f32 %393 = fdiv f32 %392, f32 %277;
    store f32* %390 with f32 %393;
    f32 %394 = fadd f32 %389, f32 %393;
    f32* %395 = getelementptr &(f32* %360)[i64 7];
    f32 %396 = load f32* %395;
    f32 %397 = fsub f32 %396, f32 %275;
    f32 %398 = fdiv f32 %397, f32 %277;
    store f32* %395 with f32 %398;
    f32 %399 = fadd f32 %394, f32 %398;
    i32 %400 = add i32 %260, i32 1;
    i1 %401 = scmp lt i32 %400, i32 1000;
    cbr i1 %401(prob = 1), ^while.body9, ^b7;
^b7:
    i32 %402 = add i32 %8, i32 1;
    i1 %403 = scmp lt i32 %402, i32 100;
    cbr i1 %403(prob = 0.99), ^while.body1, ^while.body12;
^while.body12:
    i32 %404 = phi [^b7, i32 0] [^while.body14, i32 %483];
    f32 %405 = phi [^b7, f32 %399] [^while.body14, f32 %482];
    [1000 * f32]* %406 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %404];
    ubr ^while.body13;
^while.body13:
    i32 %407 = phi [^while.body12, i32 0] [^while.body13, i32 %457];
    f32 %408 = phi [^while.body12, f32 %405] [^while.body13, f32 %456];
    f32* %409 = getelementptr &([1000 * f32]* %406)[i64 0][i32 %407];
    f32 %410 = load f32* %409;
    f32 %411 = fadd f32 %408, f32 %410;
    f32* %412 = getelementptr &(f32* %409)[i64 1];
    f32 %413 = load f32* %412;
    f32 %414 = fadd f32 %411, f32 %413;
    f32* %415 = getelementptr &(f32* %409)[i64 2];
    f32 %416 = load f32* %415;
    f32 %417 = fadd f32 %414, f32 %416;
    f32* %418 = getelementptr &(f32* %409)[i64 3];
    f32 %419 = load f32* %418;
    f32 %420 = fadd f32 %417, f32 %419;
    f32* %421 = getelementptr &(f32* %409)[i64 4];
    f32 %422 = load f32* %421;
    f32 %423 = fadd f32 %420, f32 %422;
    f32* %424 = getelementptr &(f32* %409)[i64 5];
    f32 %425 = load f32* %424;
    f32 %426 = fadd f32 %423, f32 %425;
    f32* %427 = getelementptr &(f32* %409)[i64 6];
    f32 %428 = load f32* %427;
    f32 %429 = fadd f32 %426, f32 %428;
    f32* %430 = getelementptr &(f32* %409)[i64 7];
    f32 %431 = load f32* %430;
    f32 %432 = fadd f32 %429, f32 %431;
    f32* %433 = getelementptr &(f32* %409)[i64 8];
    f32 %434 = load f32* %433;
    f32 %435 = fadd f32 %432, f32 %434;
    f32* %436 = getelementptr &(f32* %409)[i64 9];
    f32 %437 = load f32* %436;
    f32 %438 = fadd f32 %435, f32 %437;
    f32* %439 = getelementptr &(f32* %409)[i64 10];
    f32 %440 = load f32* %439;
    f32 %441 = fadd f32 %438, f32 %440;
    f32* %442 = getelementptr &(f32* %409)[i64 11];
    f32 %443 = load f32* %442;
    f32 %444 = fadd f32 %441, f32 %443;
    f32* %445 = getelementptr &(f32* %409)[i64 12];
    f32 %446 = load f32* %445;
    f32 %447 = fadd f32 %444, f32 %446;
    f32* %448 = getelementptr &(f32* %409)[i64 13];
    f32 %449 = load f32* %448;
    f32 %450 = fadd f32 %447, f32 %449;
    f32* %451 = getelementptr &(f32* %409)[i64 14];
    f32 %452 = load f32* %451;
    f32 %453 = fadd f32 %450, f32 %452;
    f32* %454 = getelementptr &(f32* %409)[i64 15];
    f32 %455 = load f32* %454;
    f32 %456 = fadd f32 %453, f32 %455;
    i32 %457 = add i32 %407, i32 16;
    i1 %458 = scmp lt i32 %457, i32 992;
    cbr i1 %458(prob = 0.98), ^while.body13, ^while.body14;
^while.body14:
    f32* %459 = getelementptr &([1000 * f32]* %406)[i64 0][i32 %457];
    f32 %460 = load f32* %459;
    f32 %461 = fadd f32 %456, f32 %460;
    f32* %462 = getelementptr &(f32* %459)[i64 1];
    f32 %463 = load f32* %462;
    f32 %464 = fadd f32 %461, f32 %463;
    f32* %465 = getelementptr &(f32* %459)[i64 2];
    f32 %466 = load f32* %465;
    f32 %467 = fadd f32 %464, f32 %466;
    f32* %468 = getelementptr &(f32* %459)[i64 3];
    f32 %469 = load f32* %468;
    f32 %470 = fadd f32 %467, f32 %469;
    f32* %471 = getelementptr &(f32* %459)[i64 4];
    f32 %472 = load f32* %471;
    f32 %473 = fadd f32 %470, f32 %472;
    f32* %474 = getelementptr &(f32* %459)[i64 5];
    f32 %475 = load f32* %474;
    f32 %476 = fadd f32 %473, f32 %475;
    f32* %477 = getelementptr &(f32* %459)[i64 6];
    f32 %478 = load f32* %477;
    f32 %479 = fadd f32 %476, f32 %478;
    f32* %480 = getelementptr &(f32* %459)[i64 7];
    f32 %481 = load f32* %480;
    f32 %482 = fadd f32 %479, f32 %481;
    i32 %483 = add i32 %404, i32 1;
    i1 %484 = scmp lt i32 %483, i32 1000;
    cbr i1 %484(prob = 1), ^while.body12, ^b8;
^b8:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %482);
    ubr ^b1;
}
