internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %x = alloc f32;
    f32* %start = alloc f32;
    f32* %end = alloc f32;
    [1000 * f32]* %var = alloc [1000 * f32];
    [1000 * f32]* %mean = alloc [1000 * f32];
    f32* %sum = alloc f32;
    i32* %i = alloc i32;
    store f32* %sum with f32 0;
    store i32* %i with i32 0;
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^b, i32 %7];
    [1000 * f32]* %1 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %0];
    f32* %2 = getelementptr &([1000 * f32]* %1)[i64 0][i64 0];
    i32 %3 = call (f32*) -> i32 @getfarray(f32* %2);
    i32 %4 = load i32* %i;
    f32 %5 = load f32* %sum;
    i1 %6 = scmp neq i32 %3, i32 1000;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
^b:
    i32 %7 = add i32 %4, i32 1;
    store i32* %i with i32 %7;
    i1 %8 = scmp lt i32 %7, i32 1000;
    cbr i1 %8(prob = 0.97), ^while.body, ^b2;
^b1:
    i32 %9 = phi [^while.body, i32 %3] [^b9, i32 0];
    ret i32 %9;
^b2:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.body1;
^while.body1:
    i32 %10 = phi [^b2, i32 0] [^b8, i32 %393];
    f32 %11 = phi [^b2, f32 %5] [^b8, f32 %392];
    ubr ^while.body2;
^while.body2:
    i32 %12 = phi [^while.body1, i32 0] [^while.body4, i32 %69];
    f32* %13 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %12];
    [1000 * f32]* %14 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %12];
    ubr ^while.body3;
^while.body3:
    f32 %15 = phi [^while.body2, f32 0] [^indirect, f32 %67];
    i32 %16 = phi [^while.body2, i32 0] [^indirect, i32 %17];
    i32 %17 = add i32 %16, i32 16;
    i1 %18 = scmp lt i32 %17, i32 992;
    f32* %19 = getelementptr &([1000 * f32]* %14)[i64 0][i32 %16];
    f32 %20 = load f32* %19;
    f32 %21 = fadd f32 %15, f32 %20;
    f32* %22 = getelementptr &(f32* %19)[i64 1];
    f32 %23 = load f32* %22;
    f32 %24 = fadd f32 %21, f32 %23;
    f32* %25 = getelementptr &(f32* %19)[i64 2];
    f32 %26 = load f32* %25;
    f32 %27 = fadd f32 %24, f32 %26;
    f32* %28 = getelementptr &(f32* %19)[i64 3];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %27, f32 %29;
    f32* %31 = getelementptr &(f32* %19)[i64 4];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %19)[i64 5];
    f32 %35 = load f32* %34;
    f32 %36 = fadd f32 %33, f32 %35;
    f32* %37 = getelementptr &(f32* %19)[i64 6];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &(f32* %19)[i64 7];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32* %43 = getelementptr &(f32* %19)[i64 8];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %19)[i64 9];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    f32* %49 = getelementptr &(f32* %19)[i64 10];
    f32 %50 = load f32* %49;
    f32 %51 = fadd f32 %48, f32 %50;
    f32* %52 = getelementptr &(f32* %19)[i64 11];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %51, f32 %53;
    f32* %55 = getelementptr &(f32* %19)[i64 12];
    f32 %56 = load f32* %55;
    f32 %57 = fadd f32 %54, f32 %56;
    f32* %58 = getelementptr &(f32* %19)[i64 13];
    f32 %59 = load f32* %58;
    f32 %60 = fadd f32 %57, f32 %59;
    f32* %61 = getelementptr &(f32* %19)[i64 14];
    f32 %62 = load f32* %61;
    f32 %63 = fadd f32 %60, f32 %62;
    f32* %64 = getelementptr &(f32* %19)[i64 15];
    f32 %65 = load f32* %64;
    f32 %66 = fadd f32 %63, f32 %65;
    store f32* %13 with f32 %66;
    cbr i1 %18(prob = 0.98), ^indirect, ^while.body4;
^indirect:
    f32 %67 = load f32* %13;
    ubr ^while.body3;
^while.body4:
    f32 %68 = load f32* %13;
    i32 %69 = add i32 %12, i32 1;
    i1 %70 = scmp lt i32 %69, i32 1000;
    f32* %71 = getelementptr &([1000 * f32]* %14)[i64 0][i32 %17];
    f32 %72 = load f32* %71;
    f32 %73 = fadd f32 %68, f32 %72;
    f32* %74 = getelementptr &(f32* %71)[i64 1];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    f32* %77 = getelementptr &(f32* %71)[i64 2];
    f32 %78 = load f32* %77;
    f32 %79 = fadd f32 %76, f32 %78;
    f32* %80 = getelementptr &(f32* %71)[i64 3];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %79, f32 %81;
    f32* %83 = getelementptr &(f32* %71)[i64 4];
    f32 %84 = load f32* %83;
    f32 %85 = fadd f32 %82, f32 %84;
    f32* %86 = getelementptr &(f32* %71)[i64 5];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    f32* %89 = getelementptr &(f32* %71)[i64 6];
    f32 %90 = load f32* %89;
    f32 %91 = fadd f32 %88, f32 %90;
    f32* %92 = getelementptr &(f32* %71)[i64 7];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %91, f32 %93;
    store f32* %13 with f32 %94;
    f32 %95 = load f32* %13;
    f32 %96 = fdiv f32 %95, f32 1000;
    store f32* %13 with f32 %96;
    store i32* %i with i32 %69;
    cbr i1 %70(prob = 1), ^while.body2, ^b3;
^b3:
    store i32* %i with i32 0;
    ubr ^while.body5;
^while.body5:
    i32 %97 = phi [^b3, i32 0] [^b5, i32 %188];
    f32* %98 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %97];
    f32* %99 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %97];
    [1000 * f32]* %100 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %97];
    ubr ^while.body6;
^while.body6:
    f32 %101 = phi [^while.body5, f32 0] [^indirect1, f32 %186];
    i32 %102 = phi [^while.body5, i32 0] [^indirect1, i32 %103];
    i32 %103 = add i32 %102, i32 16;
    i1 %104 = scmp lt i32 %103, i32 992;
    f32* %105 = getelementptr &([1000 * f32]* %100)[i64 0][i32 %102];
    f32 %106 = load f32* %105;
    f32 %107 = load f32* %99;
    f32 %108 = fsub f32 %106, f32 %107;
    f32 %109 = fmul f32 %108, f32 %108;
    f32 %110 = fadd f32 %101, f32 %109;
    f32* %111 = getelementptr &(f32* %105)[i64 1];
    f32 %112 = load f32* %111;
    f32 %113 = fsub f32 %112, f32 %107;
    f32 %114 = fmul f32 %113, f32 %113;
    f32 %115 = fadd f32 %110, f32 %114;
    f32* %116 = getelementptr &(f32* %105)[i64 2];
    f32 %117 = load f32* %116;
    f32 %118 = fsub f32 %117, f32 %107;
    f32 %119 = fmul f32 %118, f32 %118;
    f32 %120 = fadd f32 %115, f32 %119;
    f32* %121 = getelementptr &(f32* %105)[i64 3];
    f32 %122 = load f32* %121;
    f32 %123 = fsub f32 %122, f32 %107;
    f32 %124 = fmul f32 %123, f32 %123;
    f32 %125 = fadd f32 %120, f32 %124;
    f32* %126 = getelementptr &(f32* %105)[i64 4];
    f32 %127 = load f32* %126;
    f32 %128 = fsub f32 %127, f32 %107;
    f32 %129 = fmul f32 %128, f32 %128;
    f32 %130 = fadd f32 %125, f32 %129;
    f32* %131 = getelementptr &(f32* %105)[i64 5];
    f32 %132 = load f32* %131;
    f32 %133 = fsub f32 %132, f32 %107;
    f32 %134 = fmul f32 %133, f32 %133;
    f32 %135 = fadd f32 %130, f32 %134;
    f32* %136 = getelementptr &(f32* %105)[i64 6];
    f32 %137 = load f32* %136;
    f32 %138 = fsub f32 %137, f32 %107;
    f32 %139 = fmul f32 %138, f32 %138;
    f32 %140 = fadd f32 %135, f32 %139;
    f32* %141 = getelementptr &(f32* %105)[i64 7];
    f32 %142 = load f32* %141;
    f32 %143 = fsub f32 %142, f32 %107;
    f32 %144 = fmul f32 %143, f32 %143;
    f32 %145 = fadd f32 %140, f32 %144;
    f32* %146 = getelementptr &(f32* %105)[i64 8];
    f32 %147 = load f32* %146;
    f32 %148 = fsub f32 %147, f32 %107;
    f32 %149 = fmul f32 %148, f32 %148;
    f32 %150 = fadd f32 %145, f32 %149;
    f32* %151 = getelementptr &(f32* %105)[i64 9];
    f32 %152 = load f32* %151;
    f32 %153 = fsub f32 %152, f32 %107;
    f32 %154 = fmul f32 %153, f32 %153;
    f32 %155 = fadd f32 %150, f32 %154;
    f32* %156 = getelementptr &(f32* %105)[i64 10];
    f32 %157 = load f32* %156;
    f32 %158 = fsub f32 %157, f32 %107;
    f32 %159 = fmul f32 %158, f32 %158;
    f32 %160 = fadd f32 %155, f32 %159;
    f32* %161 = getelementptr &(f32* %105)[i64 11];
    f32 %162 = load f32* %161;
    f32 %163 = fsub f32 %162, f32 %107;
    f32 %164 = fmul f32 %163, f32 %163;
    f32 %165 = fadd f32 %160, f32 %164;
    f32* %166 = getelementptr &(f32* %105)[i64 12];
    f32 %167 = load f32* %166;
    f32 %168 = fsub f32 %167, f32 %107;
    f32 %169 = fmul f32 %168, f32 %168;
    f32 %170 = fadd f32 %165, f32 %169;
    f32* %171 = getelementptr &(f32* %105)[i64 13];
    f32 %172 = load f32* %171;
    f32 %173 = fsub f32 %172, f32 %107;
    f32 %174 = fmul f32 %173, f32 %173;
    f32 %175 = fadd f32 %170, f32 %174;
    f32* %176 = getelementptr &(f32* %105)[i64 14];
    f32 %177 = load f32* %176;
    f32 %178 = fsub f32 %177, f32 %107;
    f32 %179 = fmul f32 %178, f32 %178;
    f32 %180 = fadd f32 %175, f32 %179;
    f32* %181 = getelementptr &(f32* %105)[i64 15];
    f32 %182 = load f32* %181;
    f32 %183 = fsub f32 %182, f32 %107;
    f32 %184 = fmul f32 %183, f32 %183;
    f32 %185 = fadd f32 %180, f32 %184;
    store f32* %98 with f32 %185;
    cbr i1 %104(prob = 0.98), ^indirect1, ^while.body7;
^indirect1:
    f32 %186 = load f32* %98;
    ubr ^while.body6;
^while.body7:
    f32 %187 = load f32* %98;
    i32 %188 = add i32 %97, i32 1;
    i1 %189 = scmp lt i32 %188, i32 1000;
    f32* %190 = getelementptr &([1000 * f32]* %100)[i64 0][i32 %103];
    f32 %191 = load f32* %190;
    f32 %192 = load f32* %99;
    f32 %193 = fsub f32 %191, f32 %192;
    f32 %194 = fmul f32 %193, f32 %193;
    f32 %195 = fadd f32 %187, f32 %194;
    f32* %196 = getelementptr &(f32* %190)[i64 1];
    f32 %197 = load f32* %196;
    f32 %198 = fsub f32 %197, f32 %192;
    f32 %199 = fmul f32 %198, f32 %198;
    f32 %200 = fadd f32 %195, f32 %199;
    f32* %201 = getelementptr &(f32* %190)[i64 2];
    f32 %202 = load f32* %201;
    f32 %203 = fsub f32 %202, f32 %192;
    f32 %204 = fmul f32 %203, f32 %203;
    f32 %205 = fadd f32 %200, f32 %204;
    f32* %206 = getelementptr &(f32* %190)[i64 3];
    f32 %207 = load f32* %206;
    f32 %208 = fsub f32 %207, f32 %192;
    f32 %209 = fmul f32 %208, f32 %208;
    f32 %210 = fadd f32 %205, f32 %209;
    f32* %211 = getelementptr &(f32* %190)[i64 4];
    f32 %212 = load f32* %211;
    f32 %213 = fsub f32 %212, f32 %192;
    f32 %214 = fmul f32 %213, f32 %213;
    f32 %215 = fadd f32 %210, f32 %214;
    f32* %216 = getelementptr &(f32* %190)[i64 5];
    f32 %217 = load f32* %216;
    f32 %218 = fsub f32 %217, f32 %192;
    f32 %219 = fmul f32 %218, f32 %218;
    f32 %220 = fadd f32 %215, f32 %219;
    f32* %221 = getelementptr &(f32* %190)[i64 6];
    f32 %222 = load f32* %221;
    f32 %223 = fsub f32 %222, f32 %192;
    f32 %224 = fmul f32 %223, f32 %223;
    f32 %225 = fadd f32 %220, f32 %224;
    f32* %226 = getelementptr &(f32* %190)[i64 7];
    f32 %227 = load f32* %226;
    f32 %228 = fsub f32 %227, f32 %192;
    f32 %229 = fmul f32 %228, f32 %228;
    f32 %230 = fadd f32 %225, f32 %229;
    store f32* %98 with f32 %230;
    f32 %231 = load f32* %98;
    f32 %232 = fdiv f32 %231, f32 1000;
    f32 %233 = fadd f32 %232, f32 0.01;
    store f32* %x with f32 %233;
    store f32* %start with f32 0;
    store f32* %end with f32 %233;
    f32 %234 = fdiv f32 %233, f32 2;
    f32 %235 = fmul f32 %234, f32 %234;
    f32 %236 = fsub f32 %235, f32 %233;
    i1 %237 = fcmp lt f32 %236, f32 0;
    cbr i1 %237(prob = 0.5), ^if.then, ^b4;
^if.then:
    f32 %238 = fneg f32 %236;
    ubr ^b4;
^b4:
    f32 %239 = phi [^while.body7, f32 %236] [^if.then, f32 %238];
    i1 %240 = fcmp gt f32 %239, f32 0.001;
    cbr i1 %240(prob = 0.97), ^while.body8, ^b5;
^while.body8:
    f32 %241 = phi [^b4, f32 %234] [^b7, f32 %250];
    f32 %242 = phi [^b4, f32 %233] [^b7, f32 %247];
    f32 %243 = fmul f32 %241, f32 %241;
    i1 %244 = fcmp gt f32 %243, f32 %242;
    f32* %245 = select i1 %244 ? f32* %start : f32* %end;
    f32* %246 = select i1 %244 ? f32* %end : f32* %start;
    store f32* %246 with f32 %241;
    f32 %247 = load f32* %x;
    f32 %248 = load f32* %245;
    f32 %249 = fadd f32 %241, f32 %248;
    f32 %250 = fdiv f32 %249, f32 2;
    f32 %251 = fmul f32 %250, f32 %250;
    f32 %252 = fsub f32 %251, f32 %247;
    i1 %253 = fcmp lt f32 %252, f32 0;
    cbr i1 %253(prob = 0.5), ^if.then1, ^b7;
^b5:
    f32 %254 = phi [^b4, f32 %234] [^b7, f32 %250];
    store f32* %98 with f32 %254;
    store i32* %i with i32 %188;
    cbr i1 %189(prob = 1), ^while.body5, ^b6;
^if.then1:
    f32 %255 = fneg f32 %252;
    ubr ^b7;
^b6:
    store i32* %i with i32 0;
    ubr ^while.body9;
^b7:
    f32 %256 = phi [^while.body8, f32 %252] [^if.then1, f32 %255];
    i1 %257 = fcmp gt f32 %256, f32 0.001;
    cbr i1 %257(prob = 0.97), ^while.body8, ^b5;
^while.body9:
    i32 %258 = phi [^b6, i32 0] [^while.body11, i32 %349];
    f32 %259 = phi [^b6, f32 %11] [^while.body11, f32 %392];
    f32* %260 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %258];
    f32* %261 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %258];
    [1000 * f32]* %262 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %258];
    ubr ^while.body10;
^while.body10:
    f32 %263 = phi [^while.body9, f32 %259] [^while.body10, f32 %348];
    i32 %264 = phi [^while.body9, i32 0] [^while.body10, i32 %265];
    i32 %265 = add i32 %264, i32 16;
    i1 %266 = scmp lt i32 %265, i32 992;
    f32* %267 = getelementptr &([1000 * f32]* %262)[i64 0][i32 %264];
    f32 %268 = load f32* %267;
    f32 %269 = load f32* %261;
    f32 %270 = load f32* %260;
    f32 %271 = fsub f32 %268, f32 %269;
    f32 %272 = fdiv f32 %271, f32 %270;
    store f32* %267 with f32 %272;
    f32 %273 = fadd f32 %263, f32 %272;
    f32* %274 = getelementptr &(f32* %267)[i64 1];
    f32 %275 = load f32* %274;
    f32 %276 = fsub f32 %275, f32 %269;
    f32 %277 = fdiv f32 %276, f32 %270;
    store f32* %274 with f32 %277;
    f32 %278 = fadd f32 %273, f32 %277;
    f32* %279 = getelementptr &(f32* %267)[i64 2];
    f32 %280 = load f32* %279;
    f32 %281 = fsub f32 %280, f32 %269;
    f32 %282 = fdiv f32 %281, f32 %270;
    store f32* %279 with f32 %282;
    f32 %283 = fadd f32 %278, f32 %282;
    f32* %284 = getelementptr &(f32* %267)[i64 3];
    f32 %285 = load f32* %284;
    f32 %286 = fsub f32 %285, f32 %269;
    f32 %287 = fdiv f32 %286, f32 %270;
    store f32* %284 with f32 %287;
    f32 %288 = fadd f32 %283, f32 %287;
    f32* %289 = getelementptr &(f32* %267)[i64 4];
    f32 %290 = load f32* %289;
    f32 %291 = fsub f32 %290, f32 %269;
    f32 %292 = fdiv f32 %291, f32 %270;
    store f32* %289 with f32 %292;
    f32 %293 = fadd f32 %288, f32 %292;
    f32* %294 = getelementptr &(f32* %267)[i64 5];
    f32 %295 = load f32* %294;
    f32 %296 = fsub f32 %295, f32 %269;
    f32 %297 = fdiv f32 %296, f32 %270;
    store f32* %294 with f32 %297;
    f32 %298 = fadd f32 %293, f32 %297;
    f32* %299 = getelementptr &(f32* %267)[i64 6];
    f32 %300 = load f32* %299;
    f32 %301 = fsub f32 %300, f32 %269;
    f32 %302 = fdiv f32 %301, f32 %270;
    store f32* %299 with f32 %302;
    f32 %303 = fadd f32 %298, f32 %302;
    f32* %304 = getelementptr &(f32* %267)[i64 7];
    f32 %305 = load f32* %304;
    f32 %306 = fsub f32 %305, f32 %269;
    f32 %307 = fdiv f32 %306, f32 %270;
    store f32* %304 with f32 %307;
    f32 %308 = fadd f32 %303, f32 %307;
    f32* %309 = getelementptr &(f32* %267)[i64 8];
    f32 %310 = load f32* %309;
    f32 %311 = fsub f32 %310, f32 %269;
    f32 %312 = fdiv f32 %311, f32 %270;
    store f32* %309 with f32 %312;
    f32 %313 = fadd f32 %308, f32 %312;
    f32* %314 = getelementptr &(f32* %267)[i64 9];
    f32 %315 = load f32* %314;
    f32 %316 = fsub f32 %315, f32 %269;
    f32 %317 = fdiv f32 %316, f32 %270;
    store f32* %314 with f32 %317;
    f32 %318 = fadd f32 %313, f32 %317;
    f32* %319 = getelementptr &(f32* %267)[i64 10];
    f32 %320 = load f32* %319;
    f32 %321 = fsub f32 %320, f32 %269;
    f32 %322 = fdiv f32 %321, f32 %270;
    store f32* %319 with f32 %322;
    f32 %323 = fadd f32 %318, f32 %322;
    f32* %324 = getelementptr &(f32* %267)[i64 11];
    f32 %325 = load f32* %324;
    f32 %326 = fsub f32 %325, f32 %269;
    f32 %327 = fdiv f32 %326, f32 %270;
    store f32* %324 with f32 %327;
    f32 %328 = fadd f32 %323, f32 %327;
    f32* %329 = getelementptr &(f32* %267)[i64 12];
    f32 %330 = load f32* %329;
    f32 %331 = fsub f32 %330, f32 %269;
    f32 %332 = fdiv f32 %331, f32 %270;
    store f32* %329 with f32 %332;
    f32 %333 = fadd f32 %328, f32 %332;
    f32* %334 = getelementptr &(f32* %267)[i64 13];
    f32 %335 = load f32* %334;
    f32 %336 = fsub f32 %335, f32 %269;
    f32 %337 = fdiv f32 %336, f32 %270;
    store f32* %334 with f32 %337;
    f32 %338 = fadd f32 %333, f32 %337;
    f32* %339 = getelementptr &(f32* %267)[i64 14];
    f32 %340 = load f32* %339;
    f32 %341 = fsub f32 %340, f32 %269;
    f32 %342 = fdiv f32 %341, f32 %270;
    store f32* %339 with f32 %342;
    f32 %343 = fadd f32 %338, f32 %342;
    f32* %344 = getelementptr &(f32* %267)[i64 15];
    f32 %345 = load f32* %344;
    f32 %346 = fsub f32 %345, f32 %269;
    f32 %347 = fdiv f32 %346, f32 %270;
    store f32* %344 with f32 %347;
    f32 %348 = fadd f32 %343, f32 %347;
    store f32* %sum with f32 %348;
    cbr i1 %266(prob = 0.98), ^while.body10, ^while.body11;
^while.body11:
    i32 %349 = add i32 %258, i32 1;
    i1 %350 = scmp lt i32 %349, i32 1000;
    f32* %351 = getelementptr &([1000 * f32]* %262)[i64 0][i32 %265];
    f32 %352 = load f32* %351;
    f32 %353 = load f32* %261;
    f32 %354 = load f32* %260;
    f32 %355 = fsub f32 %352, f32 %353;
    f32 %356 = fdiv f32 %355, f32 %354;
    store f32* %351 with f32 %356;
    f32 %357 = fadd f32 %348, f32 %356;
    f32* %358 = getelementptr &(f32* %351)[i64 1];
    f32 %359 = load f32* %358;
    f32 %360 = fsub f32 %359, f32 %353;
    f32 %361 = fdiv f32 %360, f32 %354;
    store f32* %358 with f32 %361;
    f32 %362 = fadd f32 %357, f32 %361;
    f32* %363 = getelementptr &(f32* %351)[i64 2];
    f32 %364 = load f32* %363;
    f32 %365 = fsub f32 %364, f32 %353;
    f32 %366 = fdiv f32 %365, f32 %354;
    store f32* %363 with f32 %366;
    f32 %367 = fadd f32 %362, f32 %366;
    f32* %368 = getelementptr &(f32* %351)[i64 3];
    f32 %369 = load f32* %368;
    f32 %370 = fsub f32 %369, f32 %353;
    f32 %371 = fdiv f32 %370, f32 %354;
    store f32* %368 with f32 %371;
    f32 %372 = fadd f32 %367, f32 %371;
    f32* %373 = getelementptr &(f32* %351)[i64 4];
    f32 %374 = load f32* %373;
    f32 %375 = fsub f32 %374, f32 %353;
    f32 %376 = fdiv f32 %375, f32 %354;
    store f32* %373 with f32 %376;
    f32 %377 = fadd f32 %372, f32 %376;
    f32* %378 = getelementptr &(f32* %351)[i64 5];
    f32 %379 = load f32* %378;
    f32 %380 = fsub f32 %379, f32 %353;
    f32 %381 = fdiv f32 %380, f32 %354;
    store f32* %378 with f32 %381;
    f32 %382 = fadd f32 %377, f32 %381;
    f32* %383 = getelementptr &(f32* %351)[i64 6];
    f32 %384 = load f32* %383;
    f32 %385 = fsub f32 %384, f32 %353;
    f32 %386 = fdiv f32 %385, f32 %354;
    store f32* %383 with f32 %386;
    f32 %387 = fadd f32 %382, f32 %386;
    f32* %388 = getelementptr &(f32* %351)[i64 7];
    f32 %389 = load f32* %388;
    f32 %390 = fsub f32 %389, f32 %353;
    f32 %391 = fdiv f32 %390, f32 %354;
    store f32* %388 with f32 %391;
    f32 %392 = fadd f32 %387, f32 %391;
    store f32* %sum with f32 %392;
    store i32* %i with i32 %349;
    cbr i1 %350(prob = 1), ^while.body9, ^b8;
^b8:
    i32 %393 = add i32 %10, i32 1;
    i1 %394 = scmp lt i32 %393, i32 100;
    cbr i1 %394(prob = 0.99), ^while.body1, ^while.body12;
^while.body12:
    i32 %395 = phi [^b8, i32 0] [^while.body14, i32 %450];
    f32 %396 = phi [^b8, f32 %392] [^while.body14, f32 %475];
    [1000 * f32]* %397 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %395];
    ubr ^while.body13;
^while.body13:
    f32 %398 = phi [^while.body12, f32 %396] [^while.body13, f32 %449];
    i32 %399 = phi [^while.body12, i32 0] [^while.body13, i32 %400];
    i32 %400 = add i32 %399, i32 16;
    i1 %401 = scmp lt i32 %400, i32 992;
    f32* %402 = getelementptr &([1000 * f32]* %397)[i64 0][i32 %399];
    f32 %403 = load f32* %402;
    f32 %404 = fadd f32 %398, f32 %403;
    f32* %405 = getelementptr &(f32* %402)[i64 1];
    f32 %406 = load f32* %405;
    f32 %407 = fadd f32 %404, f32 %406;
    f32* %408 = getelementptr &(f32* %402)[i64 2];
    f32 %409 = load f32* %408;
    f32 %410 = fadd f32 %407, f32 %409;
    f32* %411 = getelementptr &(f32* %402)[i64 3];
    f32 %412 = load f32* %411;
    f32 %413 = fadd f32 %410, f32 %412;
    f32* %414 = getelementptr &(f32* %402)[i64 4];
    f32 %415 = load f32* %414;
    f32 %416 = fadd f32 %413, f32 %415;
    f32* %417 = getelementptr &(f32* %402)[i64 5];
    f32 %418 = load f32* %417;
    f32 %419 = fadd f32 %416, f32 %418;
    f32* %420 = getelementptr &(f32* %402)[i64 6];
    f32 %421 = load f32* %420;
    f32 %422 = fadd f32 %419, f32 %421;
    f32* %423 = getelementptr &(f32* %402)[i64 7];
    f32 %424 = load f32* %423;
    f32 %425 = fadd f32 %422, f32 %424;
    f32* %426 = getelementptr &(f32* %402)[i64 8];
    f32 %427 = load f32* %426;
    f32 %428 = fadd f32 %425, f32 %427;
    f32* %429 = getelementptr &(f32* %402)[i64 9];
    f32 %430 = load f32* %429;
    f32 %431 = fadd f32 %428, f32 %430;
    f32* %432 = getelementptr &(f32* %402)[i64 10];
    f32 %433 = load f32* %432;
    f32 %434 = fadd f32 %431, f32 %433;
    f32* %435 = getelementptr &(f32* %402)[i64 11];
    f32 %436 = load f32* %435;
    f32 %437 = fadd f32 %434, f32 %436;
    f32* %438 = getelementptr &(f32* %402)[i64 12];
    f32 %439 = load f32* %438;
    f32 %440 = fadd f32 %437, f32 %439;
    f32* %441 = getelementptr &(f32* %402)[i64 13];
    f32 %442 = load f32* %441;
    f32 %443 = fadd f32 %440, f32 %442;
    f32* %444 = getelementptr &(f32* %402)[i64 14];
    f32 %445 = load f32* %444;
    f32 %446 = fadd f32 %443, f32 %445;
    f32* %447 = getelementptr &(f32* %402)[i64 15];
    f32 %448 = load f32* %447;
    f32 %449 = fadd f32 %446, f32 %448;
    store f32* %sum with f32 %449;
    cbr i1 %401(prob = 0.98), ^while.body13, ^while.body14;
^while.body14:
    i32 %450 = add i32 %395, i32 1;
    i1 %451 = scmp lt i32 %450, i32 1000;
    f32* %452 = getelementptr &([1000 * f32]* %397)[i64 0][i32 %400];
    f32 %453 = load f32* %452;
    f32 %454 = fadd f32 %449, f32 %453;
    f32* %455 = getelementptr &(f32* %452)[i64 1];
    f32 %456 = load f32* %455;
    f32 %457 = fadd f32 %454, f32 %456;
    f32* %458 = getelementptr &(f32* %452)[i64 2];
    f32 %459 = load f32* %458;
    f32 %460 = fadd f32 %457, f32 %459;
    f32* %461 = getelementptr &(f32* %452)[i64 3];
    f32 %462 = load f32* %461;
    f32 %463 = fadd f32 %460, f32 %462;
    f32* %464 = getelementptr &(f32* %452)[i64 4];
    f32 %465 = load f32* %464;
    f32 %466 = fadd f32 %463, f32 %465;
    f32* %467 = getelementptr &(f32* %452)[i64 5];
    f32 %468 = load f32* %467;
    f32 %469 = fadd f32 %466, f32 %468;
    f32* %470 = getelementptr &(f32* %452)[i64 6];
    f32 %471 = load f32* %470;
    f32 %472 = fadd f32 %469, f32 %471;
    f32* %473 = getelementptr &(f32* %452)[i64 7];
    f32 %474 = load f32* %473;
    store i32* %i with i32 %450;
    f32 %475 = fadd f32 %472, f32 %474;
    cbr i1 %451(prob = 1), ^while.body12, ^b9;
^b9:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %475);
    ubr ^b1;
}
