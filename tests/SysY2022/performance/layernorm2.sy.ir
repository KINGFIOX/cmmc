internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [16 * i8]* %0 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_0 to [16 * i8]*;
    f32* %1 = ptradd [16 * i8]* %0, i32 0;
    f32* %2 = ptradd [16 * i8]* %0, i32 4;
    [1000 * f32]** %3 = ptradd [16 * i8]* %0, i32 8;
    [20 * i8]* %4 = ptrcast [20 * i8]* @cmmc_parallel_body_payload_1 to [20 * i8]*;
    f32* %5 = ptradd [20 * i8]* %4, i32 0;
    f32* %6 = ptradd [20 * i8]* %4, i32 4;
    [1000 * f32]** %7 = ptradd [20 * i8]* %4, i32 8;
    f32* %8 = ptradd [20 * i8]* %4, i32 16;
    [1000 * [1000 * f32]]* %9 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    i8* %10 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %11 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    [1000 * f32]* %12 = ptrcast [1000 * f32]* @mean to [1000 * f32]*;
    [1000 * f32]* %13 = ptrcast [1000 * f32]* @var to [1000 * f32]*;
    ubr ^while.header;
  ^while.header:
    i32 %14 = phi [^entry, i32 0] [^b1, i32 %20];
    i1 %15 = icmp slt i32 %14, i32 1000;
    cbr i1 %15(prob = 0.984615), ^while.body, ^b;
  ^b:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.body1;
  ^while.body:
    [1000 * f32]* %16 = getelementptr &([1000 * [1000 * f32]]* %9)[i64 0][i32 %14];
    f32* %17 = getelementptr &([1000 * f32]* %16)[i64 0][i64 0];
    i32 %18 = call (f32*) -> i32 @getfarray(f32* %17);
    i1 %19 = icmp neq i32 %18, i32 1000;
    cbr i1 %19(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %20 = add i32 %14, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %21 = phi [^b, i32 0] [^b4, i32 %187];
    f32 %22 = phi [^b, f32 0] [^b4, f32 %184];
    ubr ^while.body2;
  ^b2:
    i32 %23 = phi [^while.body, i32 %18] [^b5, i32 0];
    ret i32 %23;
  ^while.body2:
    i32 %24 = phi [^while.body1, i32 0] [^while.body2, i32 %29];
    f32* %25 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %24];
    store f32* %25 with f32 0;
    [1000 * f32]* %26 = getelementptr &([1000 * [1000 * f32]]* %9)[i64 0][i32 %24];
    store f32* %1 with f32 0;
    store f32* %2 with f32 0;
    store [1000 * f32]** %3 with [1000 * f32]* %26;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %10);
    f32 %27 = load f32* %1;
    f32 %28 = fdiv f32 %27, f32 1000;
    store f32* %25 with f32 %28;
    i32 %29 = add i32 %24, i32 1;
    i1 %30 = icmp slt i32 %29, i32 1000;
    cbr i1 %30(prob = 0.999), ^while.body2, ^while.body3;
  ^while.body3:
    i32 %31 = phi [^while.body2, i32 0] [^b3, i32 %48];
    f32* %32 = getelementptr &([1000 * f32]* %13)[i64 0][i32 %31];
    store f32* %32 with f32 0;
    f32* %33 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %31];
    f32 %34 = load f32* %33;
    [1000 * f32]* %35 = getelementptr &([1000 * [1000 * f32]]* %9)[i64 0][i32 %31];
    store f32* %5 with f32 0;
    store f32* %6 with f32 0;
    store [1000 * f32]** %7 with [1000 * f32]* %35;
    store f32* %8 with f32 %34;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %11);
    f32 %36 = load f32* %5;
    f32 %37 = fdiv f32 %36, f32 1000;
    f32 %38 = fadd f32 %37, f32 0.01;
    f32 %39 = fmul f32 %38, f32 0.5;
    ubr ^while.header1;
  ^while.header1:
    f32 %40 = phi [^while.body3, f32 %38] [^if.then, f32 %42] [^if.else, f32 %40];
    f32 %41 = phi [^while.body3, f32 0] [^if.then, f32 %41] [^if.else, f32 %42];
    f32 %42 = phi [^while.body3, f32 %39] [^if.then, f32 %51] [^if.else, f32 %53];
    f32 %43 = fmul f32 %42, f32 %42;
    f32 %44 = fsub f32 %43, f32 %38;
    f32 %45 = fabs f32 %44;
    i1 %46 = fcmp ogt f32 %45, f32 0.001;
    cbr i1 %46(prob = 0.984615), ^while.body4, ^b3;
  ^while.body4:
    i1 %47 = fcmp ogt f32 %43, f32 %38;
    cbr i1 %47(prob = 0.5), ^if.then, ^if.else;
  ^b3:
    store f32* %32 with f32 %42;
    i32 %48 = add i32 %31, i32 1;
    i1 %49 = icmp slt i32 %48, i32 1000;
    cbr i1 %49(prob = 0.999), ^while.body3, ^while.body5;
  ^if.then:
    f32 %50 = fadd f32 %42, f32 %41;
    f32 %51 = fmul f32 %50, f32 0.5;
    ubr ^while.header1;
  ^if.else:
    f32 %52 = fadd f32 %42, f32 %40;
    f32 %53 = fmul f32 %52, f32 0.5;
    ubr ^while.header1;
  ^while.body5:
    i32 %54 = phi [^b3, i32 0] [^while.body7, i32 %185];
    f32 %55 = phi [^b3, f32 %22] [^while.body7, f32 %184];
    f32* %56 = getelementptr &([1000 * f32]* %12)[i64 0][i32 %54];
    f32 %57 = load f32* %56;
    f32* %58 = getelementptr &([1000 * f32]* %13)[i64 0][i32 %54];
    f32 %59 = load f32* %58;
    [1000 * f32]* %60 = getelementptr &([1000 * [1000 * f32]]* %9)[i64 0][i32 %54];
    ubr ^while.body6;
  ^while.body6:
    i32 %61 = phi [^while.body5, i32 0] [^while.body6, i32 %143];
    f32 %62 = phi [^while.body5, f32 %55] [^while.body6, f32 %142];
    f32* %63 = getelementptr &([1000 * f32]* %60)[i64 0][i32 %61];
    f32 %64 = load f32* %63;
    f32 %65 = fsub f32 %64, f32 %57;
    f32 %66 = fdiv f32 %65, f32 %59;
    store f32* %63 with f32 %66;
    f32 %67 = fadd f32 %62, f32 %66;
    f32* %68 = getelementptr &(f32* %63)[i64 1];
    f32 %69 = load f32* %68;
    f32 %70 = fsub f32 %69, f32 %57;
    f32 %71 = fdiv f32 %70, f32 %59;
    f32 %72 = fadd f32 %67, f32 %71;
    store f32* %68 with f32 %71;
    f32* %73 = getelementptr &(f32* %63)[i64 2];
    f32 %74 = load f32* %73;
    f32 %75 = fsub f32 %74, f32 %57;
    f32 %76 = fdiv f32 %75, f32 %59;
    f32 %77 = fadd f32 %72, f32 %76;
    store f32* %73 with f32 %76;
    f32* %78 = getelementptr &(f32* %63)[i64 3];
    f32 %79 = load f32* %78;
    f32 %80 = fsub f32 %79, f32 %57;
    f32 %81 = fdiv f32 %80, f32 %59;
    f32 %82 = fadd f32 %77, f32 %81;
    store f32* %78 with f32 %81;
    f32* %83 = getelementptr &(f32* %63)[i64 4];
    f32 %84 = load f32* %83;
    f32 %85 = fsub f32 %84, f32 %57;
    f32 %86 = fdiv f32 %85, f32 %59;
    f32 %87 = fadd f32 %82, f32 %86;
    store f32* %83 with f32 %86;
    f32* %88 = getelementptr &(f32* %63)[i64 5];
    f32 %89 = load f32* %88;
    f32 %90 = fsub f32 %89, f32 %57;
    f32 %91 = fdiv f32 %90, f32 %59;
    f32 %92 = fadd f32 %87, f32 %91;
    store f32* %88 with f32 %91;
    f32* %93 = getelementptr &(f32* %63)[i64 6];
    f32 %94 = load f32* %93;
    f32 %95 = fsub f32 %94, f32 %57;
    f32 %96 = fdiv f32 %95, f32 %59;
    f32 %97 = fadd f32 %92, f32 %96;
    store f32* %93 with f32 %96;
    f32* %98 = getelementptr &(f32* %63)[i64 7];
    f32 %99 = load f32* %98;
    f32 %100 = fsub f32 %99, f32 %57;
    f32 %101 = fdiv f32 %100, f32 %59;
    f32 %102 = fadd f32 %97, f32 %101;
    store f32* %98 with f32 %101;
    f32* %103 = getelementptr &(f32* %63)[i64 8];
    f32 %104 = load f32* %103;
    f32 %105 = fsub f32 %104, f32 %57;
    f32 %106 = fdiv f32 %105, f32 %59;
    f32 %107 = fadd f32 %102, f32 %106;
    store f32* %103 with f32 %106;
    f32* %108 = getelementptr &(f32* %63)[i64 9];
    f32 %109 = load f32* %108;
    f32 %110 = fsub f32 %109, f32 %57;
    f32 %111 = fdiv f32 %110, f32 %59;
    f32 %112 = fadd f32 %107, f32 %111;
    store f32* %108 with f32 %111;
    f32* %113 = getelementptr &(f32* %63)[i64 10];
    f32 %114 = load f32* %113;
    f32 %115 = fsub f32 %114, f32 %57;
    f32 %116 = fdiv f32 %115, f32 %59;
    f32 %117 = fadd f32 %112, f32 %116;
    store f32* %113 with f32 %116;
    f32* %118 = getelementptr &(f32* %63)[i64 11];
    f32 %119 = load f32* %118;
    f32 %120 = fsub f32 %119, f32 %57;
    f32 %121 = fdiv f32 %120, f32 %59;
    f32 %122 = fadd f32 %117, f32 %121;
    store f32* %118 with f32 %121;
    f32* %123 = getelementptr &(f32* %63)[i64 12];
    f32 %124 = load f32* %123;
    f32 %125 = fsub f32 %124, f32 %57;
    f32 %126 = fdiv f32 %125, f32 %59;
    f32 %127 = fadd f32 %122, f32 %126;
    store f32* %123 with f32 %126;
    f32* %128 = getelementptr &(f32* %63)[i64 13];
    f32 %129 = load f32* %128;
    f32 %130 = fsub f32 %129, f32 %57;
    f32 %131 = fdiv f32 %130, f32 %59;
    f32 %132 = fadd f32 %127, f32 %131;
    store f32* %128 with f32 %131;
    f32* %133 = getelementptr &(f32* %63)[i64 14];
    f32 %134 = load f32* %133;
    f32 %135 = fsub f32 %134, f32 %57;
    f32 %136 = fdiv f32 %135, f32 %59;
    f32 %137 = fadd f32 %132, f32 %136;
    store f32* %133 with f32 %136;
    f32* %138 = getelementptr &(f32* %63)[i64 15];
    f32 %139 = load f32* %138;
    f32 %140 = fsub f32 %139, f32 %57;
    f32 %141 = fdiv f32 %140, f32 %59;
    f32 %142 = fadd f32 %137, f32 %141;
    store f32* %138 with f32 %141;
    i32 %143 = add i32 %61, i32 16;
    i1 %144 = icmp slt i32 %143, i32 992;
    cbr i1 %144(prob = 0.983871), ^while.body6, ^while.body7;
  ^while.body7:
    f32* %145 = getelementptr &(f32* %63)[i64 16];
    f32 %146 = load f32* %145;
    f32 %147 = fsub f32 %146, f32 %57;
    f32 %148 = fdiv f32 %147, f32 %59;
    store f32* %145 with f32 %148;
    f32 %149 = fadd f32 %142, f32 %148;
    f32* %150 = getelementptr &(f32* %63)[i64 17];
    f32 %151 = load f32* %150;
    f32 %152 = fsub f32 %151, f32 %57;
    f32 %153 = fdiv f32 %152, f32 %59;
    f32 %154 = fadd f32 %149, f32 %153;
    store f32* %150 with f32 %153;
    f32* %155 = getelementptr &(f32* %63)[i64 18];
    f32 %156 = load f32* %155;
    f32 %157 = fsub f32 %156, f32 %57;
    f32 %158 = fdiv f32 %157, f32 %59;
    f32 %159 = fadd f32 %154, f32 %158;
    store f32* %155 with f32 %158;
    f32* %160 = getelementptr &(f32* %63)[i64 19];
    f32 %161 = load f32* %160;
    f32 %162 = fsub f32 %161, f32 %57;
    f32 %163 = fdiv f32 %162, f32 %59;
    f32 %164 = fadd f32 %159, f32 %163;
    store f32* %160 with f32 %163;
    f32* %165 = getelementptr &(f32* %63)[i64 20];
    f32 %166 = load f32* %165;
    f32 %167 = fsub f32 %166, f32 %57;
    f32 %168 = fdiv f32 %167, f32 %59;
    f32 %169 = fadd f32 %164, f32 %168;
    store f32* %165 with f32 %168;
    f32* %170 = getelementptr &(f32* %63)[i64 21];
    f32 %171 = load f32* %170;
    f32 %172 = fsub f32 %171, f32 %57;
    f32 %173 = fdiv f32 %172, f32 %59;
    f32 %174 = fadd f32 %169, f32 %173;
    store f32* %170 with f32 %173;
    f32* %175 = getelementptr &(f32* %63)[i64 22];
    f32 %176 = load f32* %175;
    f32 %177 = fsub f32 %176, f32 %57;
    f32 %178 = fdiv f32 %177, f32 %59;
    f32 %179 = fadd f32 %174, f32 %178;
    store f32* %175 with f32 %178;
    f32* %180 = getelementptr &(f32* %63)[i64 23];
    f32 %181 = load f32* %180;
    f32 %182 = fsub f32 %181, f32 %57;
    f32 %183 = fdiv f32 %182, f32 %59;
    f32 %184 = fadd f32 %179, f32 %183;
    store f32* %180 with f32 %183;
    i32 %185 = add i32 %54, i32 1;
    i1 %186 = icmp slt i32 %185, i32 1000;
    cbr i1 %186(prob = 0.999), ^while.body5, ^b4;
  ^b4:
    i32 %187 = add i32 %21, i32 1;
    i1 %188 = icmp slt i32 %187, i32 100;
    cbr i1 %188(prob = 0.99), ^while.body1, ^prebody;
  ^prebody:
    [16 * i8]* %189 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_2 to [16 * i8]*;
    f32* %190 = ptradd [16 * i8]* %189, i32 0;
    f32* %191 = ptradd [16 * i8]* %189, i32 4;
    [1000 * f32]** %192 = ptradd [16 * i8]* %189, i32 8;
    i8* %193 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    ubr ^while.body8;
  ^while.body8:
    i32 %194 = phi [^prebody, i32 0] [^while.body8, i32 %197];
    f32 %195 = phi [^prebody, f32 %184] [^while.body8, f32 %199];
    [1000 * f32]* %196 = getelementptr &([1000 * [1000 * f32]]* %9)[i64 0][i32 %194];
    store f32* %190 with f32 %195;
    store f32* %191 with f32 %195;
    store [1000 * f32]** %192 with [1000 * f32]* %196;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 1000, i8* %193);
    i32 %197 = add i32 %194, i32 1;
    i1 %198 = icmp slt i32 %197, i32 1000;
    f32 %199 = load f32* %190;
    cbr i1 %198(prob = 0.999), ^while.body8, ^b5;
  ^b5:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %199);
    ubr ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [16 * i8]* %4 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_0 to [16 * i8]*;
    [1000 * f32]** %5 = ptradd [16 * i8]* %4, i32 8;
    [1000 * f32]* %6 = load [1000 * f32]** %5;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 15;
    i32 %8 = add i32 %1, i32 -3;
    i1 %9 = icmp slt i32 %7, i32 %8;
    i32 %10 = add i32 %1, i32 -18;
    cbr i1 %9(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    f32 %11 = phi [^b, f32 0] [^scalar.final1, f32 %81];
    i32 %12 = phi [^b, i32 %0] [^scalar.final1, i32 %82];
    f32 %13 = phi [^b, f32 undef] [^scalar.final1, f32 %81];
    i1 %14 = icmp sgt i32 %1, i32 %12;
    cbr i1 %14(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %15 = phi [^super.header, i32 %0] [^b1, i32 %65];
    f32 %16 = phi [^super.header, f32 0] [^b1, f32 %64];
    f32* %17 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %15];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %16, f32 %18;
    f32* %20 = getelementptr &(f32* %17)[i64 1];
    f32 %21 = load f32* %20;
    f32 %22 = fadd f32 %19, f32 %21;
    f32* %23 = getelementptr &(f32* %17)[i64 2];
    f32 %24 = load f32* %23;
    f32 %25 = fadd f32 %22, f32 %24;
    f32* %26 = getelementptr &(f32* %17)[i64 3];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %17)[i64 4];
    f32 %30 = load f32* %29;
    f32 %31 = fadd f32 %28, f32 %30;
    f32* %32 = getelementptr &(f32* %17)[i64 5];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %17)[i64 6];
    f32 %36 = load f32* %35;
    f32 %37 = fadd f32 %34, f32 %36;
    f32* %38 = getelementptr &(f32* %17)[i64 7];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %17)[i64 8];
    f32 %42 = load f32* %41;
    f32 %43 = fadd f32 %40, f32 %42;
    f32* %44 = getelementptr &(f32* %17)[i64 9];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %17)[i64 10];
    f32 %48 = load f32* %47;
    f32 %49 = fadd f32 %46, f32 %48;
    f32* %50 = getelementptr &(f32* %17)[i64 11];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %17)[i64 12];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &(f32* %17)[i64 13];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %17)[i64 14];
    f32 %60 = load f32* %59;
    f32 %61 = fadd f32 %58, f32 %60;
    f32* %62 = getelementptr &(f32* %17)[i64 15];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    i32 %65 = add i32 %15, i32 16;
    i1 %66 = icmp sgt i32 %10, i32 %65;
    cbr i1 %66(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %67 = phi [^super.header, i32 %0] [^b1, i32 %65];
    f32 %68 = phi [^super.header, f32 0] [^b1, f32 %64];
    f32 %69 = phi [^super.header, f32 undef] [^b1, f32 %64];
    i32 %70 = phi [^super.header, i32 undef] [^b1, i32 %65];
    i1 %71 = icmp sgt i32 %8, i32 %67;
    cbr i1 %71(prob = 0.75), ^b3, ^scalar.final1;
  ^b2 {scalar}:
    i32 %72 = phi [^scalar.header, i32 %12] [^b2, i32 %77];
    f32 %73 = phi [^scalar.header, f32 %11] [^b2, f32 %76];
    f32* %74 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %72];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    i32 %77 = add i32 %72, i32 1;
    i1 %78 = icmp sgt i32 %1, i32 %77;
    cbr i1 %78(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    f32 %79 = phi [^scalar.header, f32 %13] [^b2, f32 %76];
    f32* %80 = ptradd [16 * i8]* %4, i32 0;
    call (f32*, f32) -> void @cmmcReduceAddF32(f32* %80, f32 %79);
    ret;
  ^scalar.final1:
    f32 %81 = phi [^scalar.header1, f32 %69] [^b3, f32 %96];
    i32 %82 = phi [^scalar.header1, i32 %70] [^b3, i32 %97];
    ubr ^scalar.header;
  ^b3 {scalar}:
    f32 %83 = phi [^scalar.header1, f32 %68] [^b3, f32 %96];
    i32 %84 = phi [^scalar.header1, i32 %67] [^b3, i32 %97];
    f32* %85 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %84];
    f32 %86 = load f32* %85;
    f32 %87 = fadd f32 %83, f32 %86;
    f32* %88 = getelementptr &(f32* %85)[i64 1];
    f32 %89 = load f32* %88;
    f32 %90 = fadd f32 %87, f32 %89;
    f32* %91 = getelementptr &(f32* %85)[i64 2];
    f32 %92 = load f32* %91;
    f32 %93 = fadd f32 %90, f32 %92;
    f32* %94 = getelementptr &(f32* %85)[i64 3];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    i32 %97 = add i32 %84, i32 4;
    i1 %98 = icmp sgt i32 %8, i32 %97;
    cbr i1 %98(prob = 0.75), ^b3, ^scalar.final1;
}
internal [16 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmcReduceAddF32(f32*, f32) -> void { NoRecurse };
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [20 * i8]* %4 = ptrcast [20 * i8]* @cmmc_parallel_body_payload_1 to [20 * i8]*;
    [1000 * f32]** %5 = ptradd [20 * i8]* %4, i32 8;
    [1000 * f32]* %6 = load [1000 * f32]** %5;
    f32* %7 = ptradd [20 * i8]* %4, i32 16;
    f32 %8 = load f32* %7;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %9 = add i32 %0, i32 15;
    i32 %10 = add i32 %1, i32 -3;
    i1 %11 = icmp slt i32 %9, i32 %10;
    i32 %12 = add i32 %1, i32 -18;
    cbr i1 %11(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    f32 %13 = phi [^b, f32 0] [^scalar.final1, f32 %117];
    i32 %14 = phi [^b, i32 %0] [^scalar.final1, i32 %118];
    f32 %15 = phi [^b, f32 undef] [^scalar.final1, f32 %117];
    i1 %16 = icmp sgt i32 %1, i32 %14;
    cbr i1 %16(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %17 = phi [^super.header, i32 %0] [^b1, i32 %99];
    f32 %18 = phi [^super.header, f32 0] [^b1, f32 %98];
    f32* %19 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %17];
    f32 %20 = load f32* %19;
    f32 %21 = fsub f32 %20, f32 %8;
    f32 %22 = fmul f32 %21, f32 %21;
    f32 %23 = fadd f32 %18, f32 %22;
    f32* %24 = getelementptr &(f32* %19)[i64 1];
    f32 %25 = load f32* %24;
    f32 %26 = fsub f32 %25, f32 %8;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fadd f32 %23, f32 %27;
    f32* %29 = getelementptr &(f32* %19)[i64 2];
    f32 %30 = load f32* %29;
    f32 %31 = fsub f32 %30, f32 %8;
    f32 %32 = fmul f32 %31, f32 %31;
    f32 %33 = fadd f32 %28, f32 %32;
    f32* %34 = getelementptr &(f32* %19)[i64 3];
    f32 %35 = load f32* %34;
    f32 %36 = fsub f32 %35, f32 %8;
    f32 %37 = fmul f32 %36, f32 %36;
    f32 %38 = fadd f32 %33, f32 %37;
    f32* %39 = getelementptr &(f32* %19)[i64 4];
    f32 %40 = load f32* %39;
    f32 %41 = fsub f32 %40, f32 %8;
    f32 %42 = fmul f32 %41, f32 %41;
    f32 %43 = fadd f32 %38, f32 %42;
    f32* %44 = getelementptr &(f32* %19)[i64 5];
    f32 %45 = load f32* %44;
    f32 %46 = fsub f32 %45, f32 %8;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fadd f32 %43, f32 %47;
    f32* %49 = getelementptr &(f32* %19)[i64 6];
    f32 %50 = load f32* %49;
    f32 %51 = fsub f32 %50, f32 %8;
    f32 %52 = fmul f32 %51, f32 %51;
    f32 %53 = fadd f32 %48, f32 %52;
    f32* %54 = getelementptr &(f32* %19)[i64 7];
    f32 %55 = load f32* %54;
    f32 %56 = fsub f32 %55, f32 %8;
    f32 %57 = fmul f32 %56, f32 %56;
    f32 %58 = fadd f32 %53, f32 %57;
    f32* %59 = getelementptr &(f32* %19)[i64 8];
    f32 %60 = load f32* %59;
    f32 %61 = fsub f32 %60, f32 %8;
    f32 %62 = fmul f32 %61, f32 %61;
    f32 %63 = fadd f32 %58, f32 %62;
    f32* %64 = getelementptr &(f32* %19)[i64 9];
    f32 %65 = load f32* %64;
    f32 %66 = fsub f32 %65, f32 %8;
    f32 %67 = fmul f32 %66, f32 %66;
    f32 %68 = fadd f32 %63, f32 %67;
    f32* %69 = getelementptr &(f32* %19)[i64 10];
    f32 %70 = load f32* %69;
    f32 %71 = fsub f32 %70, f32 %8;
    f32 %72 = fmul f32 %71, f32 %71;
    f32 %73 = fadd f32 %68, f32 %72;
    f32* %74 = getelementptr &(f32* %19)[i64 11];
    f32 %75 = load f32* %74;
    f32 %76 = fsub f32 %75, f32 %8;
    f32 %77 = fmul f32 %76, f32 %76;
    f32 %78 = fadd f32 %73, f32 %77;
    f32* %79 = getelementptr &(f32* %19)[i64 12];
    f32 %80 = load f32* %79;
    f32 %81 = fsub f32 %80, f32 %8;
    f32 %82 = fmul f32 %81, f32 %81;
    f32 %83 = fadd f32 %78, f32 %82;
    f32* %84 = getelementptr &(f32* %19)[i64 13];
    f32 %85 = load f32* %84;
    f32 %86 = fsub f32 %85, f32 %8;
    f32 %87 = fmul f32 %86, f32 %86;
    f32 %88 = fadd f32 %83, f32 %87;
    f32* %89 = getelementptr &(f32* %19)[i64 14];
    f32 %90 = load f32* %89;
    f32 %91 = fsub f32 %90, f32 %8;
    f32 %92 = fmul f32 %91, f32 %91;
    f32 %93 = fadd f32 %88, f32 %92;
    f32* %94 = getelementptr &(f32* %19)[i64 15];
    f32 %95 = load f32* %94;
    f32 %96 = fsub f32 %95, f32 %8;
    f32 %97 = fmul f32 %96, f32 %96;
    f32 %98 = fadd f32 %93, f32 %97;
    i32 %99 = add i32 %17, i32 16;
    i1 %100 = icmp sgt i32 %12, i32 %99;
    cbr i1 %100(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %101 = phi [^super.header, i32 %0] [^b1, i32 %99];
    f32 %102 = phi [^super.header, f32 0] [^b1, f32 %98];
    f32 %103 = phi [^super.header, f32 undef] [^b1, f32 %98];
    i32 %104 = phi [^super.header, i32 undef] [^b1, i32 %99];
    i1 %105 = icmp sgt i32 %10, i32 %101;
    cbr i1 %105(prob = 0.75), ^b3, ^scalar.final1;
  ^b2 {scalar}:
    i32 %106 = phi [^scalar.header, i32 %14] [^b2, i32 %113];
    f32 %107 = phi [^scalar.header, f32 %13] [^b2, f32 %112];
    f32* %108 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %106];
    f32 %109 = load f32* %108;
    f32 %110 = fsub f32 %109, f32 %8;
    f32 %111 = fmul f32 %110, f32 %110;
    f32 %112 = fadd f32 %107, f32 %111;
    i32 %113 = add i32 %106, i32 1;
    i1 %114 = icmp sgt i32 %1, i32 %113;
    cbr i1 %114(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    f32 %115 = phi [^scalar.header, f32 %15] [^b2, f32 %112];
    f32* %116 = ptradd [20 * i8]* %4, i32 0;
    call (f32*, f32) -> void @cmmcReduceAddF32(f32* %116, f32 %115);
    ret;
  ^scalar.final1:
    f32 %117 = phi [^scalar.header1, f32 %103] [^b3, f32 %140];
    i32 %118 = phi [^scalar.header1, i32 %104] [^b3, i32 %141];
    ubr ^scalar.header;
  ^b3 {scalar}:
    f32 %119 = phi [^scalar.header1, f32 %102] [^b3, f32 %140];
    i32 %120 = phi [^scalar.header1, i32 %101] [^b3, i32 %141];
    f32* %121 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %120];
    f32 %122 = load f32* %121;
    f32 %123 = fsub f32 %122, f32 %8;
    f32 %124 = fmul f32 %123, f32 %123;
    f32 %125 = fadd f32 %119, f32 %124;
    f32* %126 = getelementptr &(f32* %121)[i64 1];
    f32 %127 = load f32* %126;
    f32 %128 = fsub f32 %127, f32 %8;
    f32 %129 = fmul f32 %128, f32 %128;
    f32 %130 = fadd f32 %125, f32 %129;
    f32* %131 = getelementptr &(f32* %121)[i64 2];
    f32 %132 = load f32* %131;
    f32 %133 = fsub f32 %132, f32 %8;
    f32 %134 = fmul f32 %133, f32 %133;
    f32 %135 = fadd f32 %130, f32 %134;
    f32* %136 = getelementptr &(f32* %121)[i64 3];
    f32 %137 = load f32* %136;
    f32 %138 = fsub f32 %137, f32 %8;
    f32 %139 = fmul f32 %138, f32 %138;
    f32 %140 = fadd f32 %135, f32 %139;
    i32 %141 = add i32 %120, i32 4;
    i1 %142 = icmp sgt i32 %10, i32 %141;
    cbr i1 %142(prob = 0.75), ^b3, ^scalar.final1;
}
internal [20 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [16 * i8]* %4 = ptrcast [16 * i8]* @cmmc_parallel_body_payload_2 to [16 * i8]*;
    [1000 * f32]** %5 = ptradd [16 * i8]* %4, i32 8;
    [1000 * f32]* %6 = load [1000 * f32]** %5;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 15;
    i32 %8 = add i32 %1, i32 -3;
    i1 %9 = icmp slt i32 %7, i32 %8;
    i32 %10 = add i32 %1, i32 -18;
    cbr i1 %9(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    f32 %11 = phi [^b, f32 0] [^scalar.final1, f32 %81];
    i32 %12 = phi [^b, i32 %0] [^scalar.final1, i32 %82];
    f32 %13 = phi [^b, f32 undef] [^scalar.final1, f32 %81];
    i1 %14 = icmp sgt i32 %1, i32 %12;
    cbr i1 %14(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %15 = phi [^super.header, i32 %0] [^b1, i32 %65];
    f32 %16 = phi [^super.header, f32 0] [^b1, f32 %64];
    f32* %17 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %15];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %16, f32 %18;
    f32* %20 = getelementptr &(f32* %17)[i64 1];
    f32 %21 = load f32* %20;
    f32 %22 = fadd f32 %19, f32 %21;
    f32* %23 = getelementptr &(f32* %17)[i64 2];
    f32 %24 = load f32* %23;
    f32 %25 = fadd f32 %22, f32 %24;
    f32* %26 = getelementptr &(f32* %17)[i64 3];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %17)[i64 4];
    f32 %30 = load f32* %29;
    f32 %31 = fadd f32 %28, f32 %30;
    f32* %32 = getelementptr &(f32* %17)[i64 5];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %17)[i64 6];
    f32 %36 = load f32* %35;
    f32 %37 = fadd f32 %34, f32 %36;
    f32* %38 = getelementptr &(f32* %17)[i64 7];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %17)[i64 8];
    f32 %42 = load f32* %41;
    f32 %43 = fadd f32 %40, f32 %42;
    f32* %44 = getelementptr &(f32* %17)[i64 9];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %17)[i64 10];
    f32 %48 = load f32* %47;
    f32 %49 = fadd f32 %46, f32 %48;
    f32* %50 = getelementptr &(f32* %17)[i64 11];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %17)[i64 12];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &(f32* %17)[i64 13];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %17)[i64 14];
    f32 %60 = load f32* %59;
    f32 %61 = fadd f32 %58, f32 %60;
    f32* %62 = getelementptr &(f32* %17)[i64 15];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    i32 %65 = add i32 %15, i32 16;
    i1 %66 = icmp sgt i32 %10, i32 %65;
    cbr i1 %66(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %67 = phi [^super.header, i32 %0] [^b1, i32 %65];
    f32 %68 = phi [^super.header, f32 0] [^b1, f32 %64];
    f32 %69 = phi [^super.header, f32 undef] [^b1, f32 %64];
    i32 %70 = phi [^super.header, i32 undef] [^b1, i32 %65];
    i1 %71 = icmp sgt i32 %8, i32 %67;
    cbr i1 %71(prob = 0.75), ^b3, ^scalar.final1;
  ^b2 {scalar}:
    i32 %72 = phi [^scalar.header, i32 %12] [^b2, i32 %77];
    f32 %73 = phi [^scalar.header, f32 %11] [^b2, f32 %76];
    f32* %74 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %72];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    i32 %77 = add i32 %72, i32 1;
    i1 %78 = icmp sgt i32 %1, i32 %77;
    cbr i1 %78(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    f32 %79 = phi [^scalar.header, f32 %13] [^b2, f32 %76];
    f32* %80 = ptradd [16 * i8]* %4, i32 0;
    call (f32*, f32) -> void @cmmcReduceAddF32(f32* %80, f32 %79);
    ret;
  ^scalar.final1:
    f32 %81 = phi [^scalar.header1, f32 %69] [^b3, f32 %96];
    i32 %82 = phi [^scalar.header1, i32 %70] [^b3, i32 %97];
    ubr ^scalar.header;
  ^b3 {scalar}:
    f32 %83 = phi [^scalar.header1, f32 %68] [^b3, f32 %96];
    i32 %84 = phi [^scalar.header1, i32 %67] [^b3, i32 %97];
    f32* %85 = getelementptr &([1000 * f32]* %6)[i64 0][i32 %84];
    f32 %86 = load f32* %85;
    f32 %87 = fadd f32 %83, f32 %86;
    f32* %88 = getelementptr &(f32* %85)[i64 1];
    f32 %89 = load f32* %88;
    f32 %90 = fadd f32 %87, f32 %89;
    f32* %91 = getelementptr &(f32* %85)[i64 2];
    f32 %92 = load f32* %91;
    f32 %93 = fadd f32 %90, f32 %92;
    f32* %94 = getelementptr &(f32* %85)[i64 3];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    i32 %97 = add i32 %84, i32 4;
    i1 %98 = icmp sgt i32 %8, i32 %97;
    cbr i1 %98(prob = 0.75), ^b3, ^scalar.final1;
}
internal [16 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal [1000 * f32]* @var, align 8;
internal [1000 * f32]* @mean, align 8;
