internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1000 * f32]* %var = alloc [1000 * f32];
    [1000 * f32]* %mean = alloc [1000 * f32];
    [1000 * [1000 * f32]]* %0 = ptrcast [1000 * [1000 * f32]]* @a to [1000 * [1000 * f32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %1 = phi [^entry, i32 0] [^b1, i32 %7];
    i1 %2 = scmp lt i32 %1, i32 1000;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
  ^b:
    call (i32) -> void @starttime(i32 42);
    ubr ^while.header1;
  ^while.body:
    [1000 * f32]* %3 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %1];
    f32* %4 = getelementptr &([1000 * f32]* %3)[i64 0][i64 0];
    i32 %5 = call (f32*) -> i32 @getfarray(f32* %4);
    i1 %6 = scmp neq i32 %5, i32 1000;
    cbr i1 %6(prob = 0.5), ^b2, ^b1;
  ^b1:
    i32 %7 = add i32 %1, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %8 = phi [^b, i32 0] [^b4, i32 %273];
    f32 %9 = phi [^b, f32 0] [^b4, f32 %130];
    i1 %10 = scmp lt i32 %8, i32 100;
    cbr i1 %10(prob = 0.97), ^while.header2, ^while.header3;
  ^b2:
    i32 %11 = phi [^while.body, i32 %5] [^b3, i32 0];
    ret i32 %11;
  ^while.header2:
    i32 %12 = phi [^while.header1, i32 0] [^while.body6, i32 %158];
    i1 %13 = scmp lt i32 %12, i32 1000;
    cbr i1 %13(prob = 0.97), ^while.body1, ^while.header4;
  ^while.header3:
    i32 %14 = phi [^while.header1, i32 0] [^while.body7, i32 %183];
    f32 %15 = phi [^while.header1, f32 %9] [^while.body7, f32 %182];
    i1 %16 = scmp lt i32 %14, i32 1000;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b3;
  ^while.body1:
    f32* %17 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %12];
    [1000 * f32]* %18 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %12];
    ubr ^while.body4;
  ^while.body2:
    [1000 * f32]* %19 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %14];
    ubr ^while.body5;
  ^b3:
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %15);
    ubr ^b2;
  ^while.header4:
    i32 %20 = phi [^while.header2, i32 0] [^while.body13, i32 %454];
    i1 %21 = scmp lt i32 %20, i32 1000;
    cbr i1 %21(prob = 0.97), ^while.body3, ^while.header5;
  ^while.body3:
    f32* %22 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %20];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %20];
    [1000 * f32]* %25 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %20];
    ubr ^while.body9;
  ^while.body4:
    f32 %26 = phi [^while.body1, f32 0] [^while.body4, f32 %75];
    i32 %27 = phi [^while.body1, i32 0] [^while.body4, i32 %76];
    f32* %28 = getelementptr &([1000 * f32]* %18)[i64 0][i32 %27];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %26, f32 %29;
    f32* %31 = getelementptr &(f32* %28)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %28)[i64 2];
    f32 %35 = load f32* %34;
    f32 %36 = fadd f32 %33, f32 %35;
    f32* %37 = getelementptr &(f32* %28)[i64 3];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &(f32* %28)[i64 4];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32* %43 = getelementptr &(f32* %28)[i64 5];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %28)[i64 6];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    f32* %49 = getelementptr &(f32* %28)[i64 7];
    f32 %50 = load f32* %49;
    f32 %51 = fadd f32 %48, f32 %50;
    f32* %52 = getelementptr &(f32* %28)[i64 8];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %51, f32 %53;
    f32* %55 = getelementptr &(f32* %28)[i64 9];
    f32 %56 = load f32* %55;
    f32 %57 = fadd f32 %54, f32 %56;
    f32* %58 = getelementptr &(f32* %28)[i64 10];
    f32 %59 = load f32* %58;
    f32 %60 = fadd f32 %57, f32 %59;
    f32* %61 = getelementptr &(f32* %28)[i64 11];
    f32 %62 = load f32* %61;
    f32 %63 = fadd f32 %60, f32 %62;
    f32* %64 = getelementptr &(f32* %28)[i64 12];
    f32 %65 = load f32* %64;
    f32 %66 = fadd f32 %63, f32 %65;
    f32* %67 = getelementptr &(f32* %28)[i64 13];
    f32 %68 = load f32* %67;
    f32 %69 = fadd f32 %66, f32 %68;
    f32* %70 = getelementptr &(f32* %28)[i64 14];
    f32 %71 = load f32* %70;
    f32 %72 = fadd f32 %69, f32 %71;
    f32* %73 = getelementptr &(f32* %28)[i64 15];
    f32 %74 = load f32* %73;
    f32 %75 = fadd f32 %72, f32 %74;
    store f32* %17 with f32 %75;
    i32 %76 = add i32 %27, i32 16;
    i1 %77 = scmp lt i32 %76, i32 992;
    cbr i1 %77(prob = 0.98), ^while.body4, ^while.body6;
  ^while.body5:
    i32 %78 = phi [^while.body2, i32 0] [^while.body5, i32 %128];
    f32 %79 = phi [^while.body2, f32 %15] [^while.body5, f32 %127];
    f32* %80 = getelementptr &([1000 * f32]* %19)[i64 0][i32 %78];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %79, f32 %81;
    f32* %83 = getelementptr &(f32* %80)[i64 1];
    f32 %84 = load f32* %83;
    f32 %85 = fadd f32 %82, f32 %84;
    f32* %86 = getelementptr &(f32* %80)[i64 2];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    f32* %89 = getelementptr &(f32* %80)[i64 3];
    f32 %90 = load f32* %89;
    f32 %91 = fadd f32 %88, f32 %90;
    f32* %92 = getelementptr &(f32* %80)[i64 4];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %91, f32 %93;
    f32* %95 = getelementptr &(f32* %80)[i64 5];
    f32 %96 = load f32* %95;
    f32 %97 = fadd f32 %94, f32 %96;
    f32* %98 = getelementptr &(f32* %80)[i64 6];
    f32 %99 = load f32* %98;
    f32 %100 = fadd f32 %97, f32 %99;
    f32* %101 = getelementptr &(f32* %80)[i64 7];
    f32 %102 = load f32* %101;
    f32 %103 = fadd f32 %100, f32 %102;
    f32* %104 = getelementptr &(f32* %80)[i64 8];
    f32 %105 = load f32* %104;
    f32 %106 = fadd f32 %103, f32 %105;
    f32* %107 = getelementptr &(f32* %80)[i64 9];
    f32 %108 = load f32* %107;
    f32 %109 = fadd f32 %106, f32 %108;
    f32* %110 = getelementptr &(f32* %80)[i64 10];
    f32 %111 = load f32* %110;
    f32 %112 = fadd f32 %109, f32 %111;
    f32* %113 = getelementptr &(f32* %80)[i64 11];
    f32 %114 = load f32* %113;
    f32 %115 = fadd f32 %112, f32 %114;
    f32* %116 = getelementptr &(f32* %80)[i64 12];
    f32 %117 = load f32* %116;
    f32 %118 = fadd f32 %115, f32 %117;
    f32* %119 = getelementptr &(f32* %80)[i64 13];
    f32 %120 = load f32* %119;
    f32 %121 = fadd f32 %118, f32 %120;
    f32* %122 = getelementptr &(f32* %80)[i64 14];
    f32 %123 = load f32* %122;
    f32 %124 = fadd f32 %121, f32 %123;
    f32* %125 = getelementptr &(f32* %80)[i64 15];
    f32 %126 = load f32* %125;
    f32 %127 = fadd f32 %124, f32 %126;
    i32 %128 = add i32 %78, i32 16;
    i1 %129 = scmp lt i32 %128, i32 992;
    cbr i1 %129(prob = 0.98), ^while.body5, ^while.body7;
  ^while.header5:
    f32 %130 = phi [^while.header4, f32 %9] [^while.body12, f32 %443];
    i32 %131 = phi [^while.header4, i32 0] [^while.body12, i32 %444];
    i1 %132 = scmp lt i32 %131, i32 1000;
    cbr i1 %132(prob = 0.97), ^while.body8, ^b4;
  ^while.body6:
    f32* %133 = getelementptr &([1000 * f32]* %18)[i64 0][i32 %76];
    f32 %134 = load f32* %133;
    f32 %135 = fadd f32 %75, f32 %134;
    f32* %136 = getelementptr &(f32* %133)[i64 1];
    f32 %137 = load f32* %136;
    f32 %138 = fadd f32 %135, f32 %137;
    f32* %139 = getelementptr &(f32* %133)[i64 2];
    f32 %140 = load f32* %139;
    f32 %141 = fadd f32 %138, f32 %140;
    f32* %142 = getelementptr &(f32* %133)[i64 3];
    f32 %143 = load f32* %142;
    f32 %144 = fadd f32 %141, f32 %143;
    f32* %145 = getelementptr &(f32* %133)[i64 4];
    f32 %146 = load f32* %145;
    f32 %147 = fadd f32 %144, f32 %146;
    f32* %148 = getelementptr &(f32* %133)[i64 5];
    f32 %149 = load f32* %148;
    f32 %150 = fadd f32 %147, f32 %149;
    f32* %151 = getelementptr &(f32* %133)[i64 6];
    f32 %152 = load f32* %151;
    f32 %153 = fadd f32 %150, f32 %152;
    f32* %154 = getelementptr &(f32* %133)[i64 7];
    f32 %155 = load f32* %154;
    f32 %156 = fadd f32 %153, f32 %155;
    f32 %157 = fdiv f32 %156, f32 1000;
    store f32* %17 with f32 %157;
    i32 %158 = add i32 %12, i32 1;
    ubr ^while.header2;
  ^while.body7:
    f32* %159 = getelementptr &([1000 * f32]* %19)[i64 0][i32 %128];
    f32 %160 = load f32* %159;
    f32 %161 = fadd f32 %127, f32 %160;
    f32* %162 = getelementptr &(f32* %159)[i64 1];
    f32 %163 = load f32* %162;
    f32 %164 = fadd f32 %161, f32 %163;
    f32* %165 = getelementptr &(f32* %159)[i64 2];
    f32 %166 = load f32* %165;
    f32 %167 = fadd f32 %164, f32 %166;
    f32* %168 = getelementptr &(f32* %159)[i64 3];
    f32 %169 = load f32* %168;
    f32 %170 = fadd f32 %167, f32 %169;
    f32* %171 = getelementptr &(f32* %159)[i64 4];
    f32 %172 = load f32* %171;
    f32 %173 = fadd f32 %170, f32 %172;
    f32* %174 = getelementptr &(f32* %159)[i64 5];
    f32 %175 = load f32* %174;
    f32 %176 = fadd f32 %173, f32 %175;
    f32* %177 = getelementptr &(f32* %159)[i64 6];
    f32 %178 = load f32* %177;
    f32 %179 = fadd f32 %176, f32 %178;
    f32* %180 = getelementptr &(f32* %159)[i64 7];
    f32 %181 = load f32* %180;
    f32 %182 = fadd f32 %179, f32 %181;
    i32 %183 = add i32 %14, i32 1;
    ubr ^while.header3;
  ^while.body8:
    f32* %184 = getelementptr &([1000 * f32]* %mean)[i64 0][i32 %131];
    f32 %185 = load f32* %184;
    f32* %186 = getelementptr &([1000 * f32]* %var)[i64 0][i32 %131];
    f32 %187 = load f32* %186;
    [1000 * f32]* %188 = getelementptr &([1000 * [1000 * f32]]* %0)[i64 0][i32 %131];
    ubr ^while.body11;
  ^while.body9:
    f32 %189 = phi [^while.body3, f32 0] [^while.body9, f32 %270];
    i32 %190 = phi [^while.body3, i32 0] [^while.body9, i32 %271];
    f32* %191 = getelementptr &([1000 * f32]* %25)[i64 0][i32 %190];
    f32 %192 = load f32* %191;
    f32 %193 = fsub f32 %192, f32 %23;
    f32 %194 = fmul f32 %193, f32 %193;
    f32 %195 = fadd f32 %189, f32 %194;
    f32* %196 = getelementptr &(f32* %191)[i64 1];
    f32 %197 = load f32* %196;
    f32 %198 = fsub f32 %197, f32 %23;
    f32 %199 = fmul f32 %198, f32 %198;
    f32 %200 = fadd f32 %195, f32 %199;
    f32* %201 = getelementptr &(f32* %191)[i64 2];
    f32 %202 = load f32* %201;
    f32 %203 = fsub f32 %202, f32 %23;
    f32 %204 = fmul f32 %203, f32 %203;
    f32 %205 = fadd f32 %200, f32 %204;
    f32* %206 = getelementptr &(f32* %191)[i64 3];
    f32 %207 = load f32* %206;
    f32 %208 = fsub f32 %207, f32 %23;
    f32 %209 = fmul f32 %208, f32 %208;
    f32 %210 = fadd f32 %205, f32 %209;
    f32* %211 = getelementptr &(f32* %191)[i64 4];
    f32 %212 = load f32* %211;
    f32 %213 = fsub f32 %212, f32 %23;
    f32 %214 = fmul f32 %213, f32 %213;
    f32 %215 = fadd f32 %210, f32 %214;
    f32* %216 = getelementptr &(f32* %191)[i64 5];
    f32 %217 = load f32* %216;
    f32 %218 = fsub f32 %217, f32 %23;
    f32 %219 = fmul f32 %218, f32 %218;
    f32 %220 = fadd f32 %215, f32 %219;
    f32* %221 = getelementptr &(f32* %191)[i64 6];
    f32 %222 = load f32* %221;
    f32 %223 = fsub f32 %222, f32 %23;
    f32 %224 = fmul f32 %223, f32 %223;
    f32 %225 = fadd f32 %220, f32 %224;
    f32* %226 = getelementptr &(f32* %191)[i64 7];
    f32 %227 = load f32* %226;
    f32 %228 = fsub f32 %227, f32 %23;
    f32 %229 = fmul f32 %228, f32 %228;
    f32 %230 = fadd f32 %225, f32 %229;
    f32* %231 = getelementptr &(f32* %191)[i64 8];
    f32 %232 = load f32* %231;
    f32 %233 = fsub f32 %232, f32 %23;
    f32 %234 = fmul f32 %233, f32 %233;
    f32 %235 = fadd f32 %230, f32 %234;
    f32* %236 = getelementptr &(f32* %191)[i64 9];
    f32 %237 = load f32* %236;
    f32 %238 = fsub f32 %237, f32 %23;
    f32 %239 = fmul f32 %238, f32 %238;
    f32 %240 = fadd f32 %235, f32 %239;
    f32* %241 = getelementptr &(f32* %191)[i64 10];
    f32 %242 = load f32* %241;
    f32 %243 = fsub f32 %242, f32 %23;
    f32 %244 = fmul f32 %243, f32 %243;
    f32 %245 = fadd f32 %240, f32 %244;
    f32* %246 = getelementptr &(f32* %191)[i64 11];
    f32 %247 = load f32* %246;
    f32 %248 = fsub f32 %247, f32 %23;
    f32 %249 = fmul f32 %248, f32 %248;
    f32 %250 = fadd f32 %245, f32 %249;
    f32* %251 = getelementptr &(f32* %191)[i64 12];
    f32 %252 = load f32* %251;
    f32 %253 = fsub f32 %252, f32 %23;
    f32 %254 = fmul f32 %253, f32 %253;
    f32 %255 = fadd f32 %250, f32 %254;
    f32* %256 = getelementptr &(f32* %191)[i64 13];
    f32 %257 = load f32* %256;
    f32 %258 = fsub f32 %257, f32 %23;
    f32 %259 = fmul f32 %258, f32 %258;
    f32 %260 = fadd f32 %255, f32 %259;
    f32* %261 = getelementptr &(f32* %191)[i64 14];
    f32 %262 = load f32* %261;
    f32 %263 = fsub f32 %262, f32 %23;
    f32 %264 = fmul f32 %263, f32 %263;
    f32 %265 = fadd f32 %260, f32 %264;
    f32* %266 = getelementptr &(f32* %191)[i64 15];
    f32 %267 = load f32* %266;
    f32 %268 = fsub f32 %267, f32 %23;
    f32 %269 = fmul f32 %268, f32 %268;
    f32 %270 = fadd f32 %265, f32 %269;
    store f32* %24 with f32 %270;
    i32 %271 = add i32 %190, i32 16;
    i1 %272 = scmp lt i32 %271, i32 992;
    cbr i1 %272(prob = 0.98), ^while.body9, ^while.body10;
  ^b4:
    i32 %273 = add i32 %8, i32 1;
    ubr ^while.header1;
  ^while.body10:
    f32* %274 = getelementptr &([1000 * f32]* %25)[i64 0][i32 %271];
    f32 %275 = load f32* %274;
    f32 %276 = load f32* %22;
    f32 %277 = fsub f32 %275, f32 %276;
    f32 %278 = fmul f32 %277, f32 %277;
    f32 %279 = fadd f32 %270, f32 %278;
    f32* %280 = getelementptr &(f32* %274)[i64 1];
    f32 %281 = load f32* %280;
    f32 %282 = fsub f32 %281, f32 %276;
    f32 %283 = fmul f32 %282, f32 %282;
    f32 %284 = fadd f32 %279, f32 %283;
    f32* %285 = getelementptr &(f32* %274)[i64 2];
    f32 %286 = load f32* %285;
    f32 %287 = fsub f32 %286, f32 %276;
    f32 %288 = fmul f32 %287, f32 %287;
    f32 %289 = fadd f32 %284, f32 %288;
    f32* %290 = getelementptr &(f32* %274)[i64 3];
    f32 %291 = load f32* %290;
    f32 %292 = fsub f32 %291, f32 %276;
    f32 %293 = fmul f32 %292, f32 %292;
    f32 %294 = fadd f32 %289, f32 %293;
    f32* %295 = getelementptr &(f32* %274)[i64 4];
    f32 %296 = load f32* %295;
    f32 %297 = fsub f32 %296, f32 %276;
    f32 %298 = fmul f32 %297, f32 %297;
    f32 %299 = fadd f32 %294, f32 %298;
    f32* %300 = getelementptr &(f32* %274)[i64 5];
    f32 %301 = load f32* %300;
    f32 %302 = fsub f32 %301, f32 %276;
    f32 %303 = fmul f32 %302, f32 %302;
    f32 %304 = fadd f32 %299, f32 %303;
    f32* %305 = getelementptr &(f32* %274)[i64 6];
    f32 %306 = load f32* %305;
    f32 %307 = fsub f32 %306, f32 %276;
    f32 %308 = fmul f32 %307, f32 %307;
    f32 %309 = fadd f32 %304, f32 %308;
    f32* %310 = getelementptr &(f32* %274)[i64 7];
    f32 %311 = load f32* %310;
    f32 %312 = fsub f32 %311, f32 %276;
    f32 %313 = fmul f32 %312, f32 %312;
    f32 %314 = fadd f32 %309, f32 %313;
    f32 %315 = fdiv f32 %314, f32 1000;
    f32 %316 = fadd f32 %315, f32 0.01;
    f32 %317 = fmul f32 %316, f32 0.5;
    ubr ^while.header6;
  ^while.body11:
    i32 %318 = phi [^while.body8, i32 0] [^while.body11, i32 %400];
    f32 %319 = phi [^while.body8, f32 %130] [^while.body11, f32 %399];
    f32* %320 = getelementptr &([1000 * f32]* %188)[i64 0][i32 %318];
    f32 %321 = load f32* %320;
    f32 %322 = fsub f32 %321, f32 %185;
    f32 %323 = fdiv f32 %322, f32 %187;
    store f32* %320 with f32 %323;
    f32 %324 = fadd f32 %319, f32 %323;
    f32* %325 = getelementptr &(f32* %320)[i64 1];
    f32 %326 = load f32* %325;
    f32 %327 = fsub f32 %326, f32 %185;
    f32 %328 = fdiv f32 %327, f32 %187;
    f32 %329 = fadd f32 %324, f32 %328;
    store f32* %325 with f32 %328;
    f32* %330 = getelementptr &(f32* %320)[i64 2];
    f32 %331 = load f32* %330;
    f32 %332 = fsub f32 %331, f32 %185;
    f32 %333 = fdiv f32 %332, f32 %187;
    f32 %334 = fadd f32 %329, f32 %333;
    store f32* %330 with f32 %333;
    f32* %335 = getelementptr &(f32* %320)[i64 3];
    f32 %336 = load f32* %335;
    f32 %337 = fsub f32 %336, f32 %185;
    f32 %338 = fdiv f32 %337, f32 %187;
    f32 %339 = fadd f32 %334, f32 %338;
    store f32* %335 with f32 %338;
    f32* %340 = getelementptr &(f32* %320)[i64 4];
    f32 %341 = load f32* %340;
    f32 %342 = fsub f32 %341, f32 %185;
    f32 %343 = fdiv f32 %342, f32 %187;
    f32 %344 = fadd f32 %339, f32 %343;
    store f32* %340 with f32 %343;
    f32* %345 = getelementptr &(f32* %320)[i64 5];
    f32 %346 = load f32* %345;
    f32 %347 = fsub f32 %346, f32 %185;
    f32 %348 = fdiv f32 %347, f32 %187;
    f32 %349 = fadd f32 %344, f32 %348;
    store f32* %345 with f32 %348;
    f32* %350 = getelementptr &(f32* %320)[i64 6];
    f32 %351 = load f32* %350;
    f32 %352 = fsub f32 %351, f32 %185;
    f32 %353 = fdiv f32 %352, f32 %187;
    f32 %354 = fadd f32 %349, f32 %353;
    store f32* %350 with f32 %353;
    f32* %355 = getelementptr &(f32* %320)[i64 7];
    f32 %356 = load f32* %355;
    f32 %357 = fsub f32 %356, f32 %185;
    f32 %358 = fdiv f32 %357, f32 %187;
    f32 %359 = fadd f32 %354, f32 %358;
    store f32* %355 with f32 %358;
    f32* %360 = getelementptr &(f32* %320)[i64 8];
    f32 %361 = load f32* %360;
    f32 %362 = fsub f32 %361, f32 %185;
    f32 %363 = fdiv f32 %362, f32 %187;
    f32 %364 = fadd f32 %359, f32 %363;
    store f32* %360 with f32 %363;
    f32* %365 = getelementptr &(f32* %320)[i64 9];
    f32 %366 = load f32* %365;
    f32 %367 = fsub f32 %366, f32 %185;
    f32 %368 = fdiv f32 %367, f32 %187;
    f32 %369 = fadd f32 %364, f32 %368;
    store f32* %365 with f32 %368;
    f32* %370 = getelementptr &(f32* %320)[i64 10];
    f32 %371 = load f32* %370;
    f32 %372 = fsub f32 %371, f32 %185;
    f32 %373 = fdiv f32 %372, f32 %187;
    f32 %374 = fadd f32 %369, f32 %373;
    store f32* %370 with f32 %373;
    f32* %375 = getelementptr &(f32* %320)[i64 11];
    f32 %376 = load f32* %375;
    f32 %377 = fsub f32 %376, f32 %185;
    f32 %378 = fdiv f32 %377, f32 %187;
    f32 %379 = fadd f32 %374, f32 %378;
    store f32* %375 with f32 %378;
    f32* %380 = getelementptr &(f32* %320)[i64 12];
    f32 %381 = load f32* %380;
    f32 %382 = fsub f32 %381, f32 %185;
    f32 %383 = fdiv f32 %382, f32 %187;
    f32 %384 = fadd f32 %379, f32 %383;
    store f32* %380 with f32 %383;
    f32* %385 = getelementptr &(f32* %320)[i64 13];
    f32 %386 = load f32* %385;
    f32 %387 = fsub f32 %386, f32 %185;
    f32 %388 = fdiv f32 %387, f32 %187;
    f32 %389 = fadd f32 %384, f32 %388;
    store f32* %385 with f32 %388;
    f32* %390 = getelementptr &(f32* %320)[i64 14];
    f32 %391 = load f32* %390;
    f32 %392 = fsub f32 %391, f32 %185;
    f32 %393 = fdiv f32 %392, f32 %187;
    f32 %394 = fadd f32 %389, f32 %393;
    store f32* %390 with f32 %393;
    f32* %395 = getelementptr &(f32* %320)[i64 15];
    f32 %396 = load f32* %395;
    f32 %397 = fsub f32 %396, f32 %185;
    f32 %398 = fdiv f32 %397, f32 %187;
    f32 %399 = fadd f32 %394, f32 %398;
    store f32* %395 with f32 %398;
    i32 %400 = add i32 %318, i32 16;
    i1 %401 = scmp lt i32 %400, i32 992;
    cbr i1 %401(prob = 0.98), ^while.body11, ^while.body12;
  ^while.body12:
    f32* %402 = getelementptr &([1000 * f32]* %188)[i64 0][i32 %400];
    f32 %403 = load f32* %402;
    f32 %404 = load f32* %184;
    f32 %405 = fsub f32 %403, f32 %404;
    f32 %406 = load f32* %186;
    f32 %407 = fdiv f32 %405, f32 %406;
    store f32* %402 with f32 %407;
    f32 %408 = fadd f32 %399, f32 %407;
    f32* %409 = getelementptr &(f32* %402)[i64 1];
    f32 %410 = load f32* %409;
    f32 %411 = fsub f32 %410, f32 %404;
    f32 %412 = fdiv f32 %411, f32 %406;
    f32 %413 = fadd f32 %408, f32 %412;
    store f32* %409 with f32 %412;
    f32* %414 = getelementptr &(f32* %402)[i64 2];
    f32 %415 = load f32* %414;
    f32 %416 = fsub f32 %415, f32 %404;
    f32 %417 = fdiv f32 %416, f32 %406;
    f32 %418 = fadd f32 %413, f32 %417;
    store f32* %414 with f32 %417;
    f32* %419 = getelementptr &(f32* %402)[i64 3];
    f32 %420 = load f32* %419;
    f32 %421 = fsub f32 %420, f32 %404;
    f32 %422 = fdiv f32 %421, f32 %406;
    f32 %423 = fadd f32 %418, f32 %422;
    store f32* %419 with f32 %422;
    f32* %424 = getelementptr &(f32* %402)[i64 4];
    f32 %425 = load f32* %424;
    f32 %426 = fsub f32 %425, f32 %404;
    f32 %427 = fdiv f32 %426, f32 %406;
    f32 %428 = fadd f32 %423, f32 %427;
    store f32* %424 with f32 %427;
    f32* %429 = getelementptr &(f32* %402)[i64 5];
    f32 %430 = load f32* %429;
    f32 %431 = fsub f32 %430, f32 %404;
    f32 %432 = fdiv f32 %431, f32 %406;
    f32 %433 = fadd f32 %428, f32 %432;
    store f32* %429 with f32 %432;
    f32* %434 = getelementptr &(f32* %402)[i64 6];
    f32 %435 = load f32* %434;
    f32 %436 = fsub f32 %435, f32 %404;
    f32 %437 = fdiv f32 %436, f32 %406;
    f32 %438 = fadd f32 %433, f32 %437;
    store f32* %434 with f32 %437;
    f32* %439 = getelementptr &(f32* %402)[i64 7];
    f32 %440 = load f32* %439;
    f32 %441 = fsub f32 %440, f32 %404;
    f32 %442 = fdiv f32 %441, f32 %406;
    f32 %443 = fadd f32 %438, f32 %442;
    store f32* %439 with f32 %442;
    i32 %444 = add i32 %131, i32 1;
    ubr ^while.header5;
  ^while.header6:
    f32 %445 = phi [^while.body10, f32 0] [^if.then, f32 %445] [^if.else, f32 %447];
    f32 %446 = phi [^while.body10, f32 %316] [^if.then, f32 %447] [^if.else, f32 %446];
    f32 %447 = phi [^while.body10, f32 %317] [^if.then, f32 %457] [^if.else, f32 %459];
    f32 %448 = fmul f32 %447, f32 %447;
    f32 %449 = fsub f32 %448, f32 %316;
    i1 %450 = fcmp lt f32 %449, f32 0;
    f32 %451 = fneg f32 %449;
    f32 %452 = select i1 %450 ? f32 %451 : f32 %449;
    i1 %453 = fcmp gt f32 %452, f32 0.001;
    cbr i1 %453(prob = 0.97), ^while.body14, ^while.body13;
  ^while.body13:
    store f32* %24 with f32 %447;
    i32 %454 = add i32 %20, i32 1;
    ubr ^while.header4;
  ^while.body14:
    i1 %455 = fcmp gt f32 %448, f32 %316;
    cbr i1 %455(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    f32 %456 = fadd f32 %447, f32 %445;
    f32 %457 = fmul f32 %456, f32 0.5;
    ubr ^while.header6;
  ^if.else:
    f32 %458 = fadd f32 %447, f32 %446;
    f32 %459 = fmul f32 %458, f32 0.5;
    ubr ^while.header6;
}
