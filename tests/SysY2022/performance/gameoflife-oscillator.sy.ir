internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
internal i32* @active = 1;
internal i32* @width;
internal i32* @height;
internal i32* @steps;
internal func @read_map() -> void {
^entry:
    i32* %get = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* @width with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @height with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* @steps with i32 %2;
    i32 %3 = call () -> i32 @getch();
    store i32* %i with i32 1;
    store i32* %j with i32 1;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %j;
    i32 %5 = load i32* @height;
    i1 %6 = scmp le i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i with i32 1;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* @width;
    i1 %11 = scmp le i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %14 = call () -> i32 @getch();
    i32 %15 = load i32* %j;
    i32 %16 = add i32 %15, i32 1;
    store i32* %j with i32 %16;
    ubr ^while.header;
^while.body1:
    i32 %17 = call () -> i32 @getch();
    store i32* %get with i32 %17;
    i32 %18 = load i32* %get;
    i1 %19 = scmp eq i32 %18, i32 35;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %22 = load i32* %j;
    i64 %23 = sext i32 %22 to i64;
    [500 * i32]* %24 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 %23];
    i32 %25 = load i32* %i;
    i64 %26 = sext i32 %25 to i64;
    i32* %27 = getelementptr &([500 * i32]* %24)[i64 0][i64 %26];
    store i32* %27 with i32 1;
    ubr ^b2;
^if.else:
    i32 %28 = load i32* %j;
    i64 %29 = sext i32 %28 to i64;
    [500 * i32]* %30 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 %29];
    i32 %31 = load i32* %i;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = getelementptr &([500 * i32]* %30)[i64 0][i64 %32];
    store i32* %33 with i32 0;
    ubr ^b2;
^b2:
    i32 %34 = load i32* %i;
    i32 %35 = add i32 %34, i32 1;
    store i32* %i with i32 %35;
    ubr ^while.header1;
}
internal func @put_map() -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    store i32* %j with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %j;
    i32 %1 = load i32* @height;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i with i32 1;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %i;
    i32 %6 = load i32* @width;
    i1 %7 = scmp le i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32 %10 = load i32* %j;
    i32 %11 = add i32 %10, i32 1;
    store i32* %j with i32 %11;
    ubr ^while.header;
^while.body1:
    i32 %12 = load i32* %j;
    i64 %13 = sext i32 %12 to i64;
    [500 * i32]* %14 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 %13];
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = getelementptr &([500 * i32]* %14)[i64 0][i64 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp eq i32 %18, i32 1;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then, ^if.else;
^if.then:
    call (i32) -> void @putch(i32 35);
    ubr ^b2;
^if.else:
    call (i32) -> void @putch(i32 46);
    ubr ^b2;
^b2:
    i32 %22 = load i32* %i;
    i32 %23 = add i32 %22, i32 1;
    store i32* %i with i32 %23;
    ubr ^while.header1;
}
internal func @swap12() -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    store i32* %j with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %j;
    i32 %1 = load i32* @height;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i with i32 1;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %i;
    i32 %6 = load i32* @width;
    i1 %7 = scmp le i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %10 = load i32* %j;
    i64 %11 = sext i32 %10 to i64;
    [500 * i32]* %12 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 %11];
    i32 %13 = load i32* %i;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = getelementptr &([500 * i32]* %12)[i64 0][i64 %14];
    i32 %16 = load i32* %j;
    i64 %17 = sext i32 %16 to i64;
    [500 * i32]* %18 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 %17];
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([500 * i32]* %18)[i64 0][i64 %20];
    i32 %22 = load i32* %21;
    store i32* %15 with i32 %22;
    i32 %23 = load i32* %i;
    i32 %24 = add i32 %23, i32 1;
    store i32* %i with i32 %24;
    ubr ^while.header1;
^b1:
    i32 %25 = load i32* %j;
    i32 %26 = add i32 %25, i32 1;
    store i32* %j with i32 %26;
    ubr ^while.header;
}
internal func @step([500 * i32]* %source, [500 * i32]* %target) -> void {
^entry:
    i32* %alive_co = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [500 * i32]** %target1 = alloc [500 * i32]*;
    [500 * i32]** %source1 = alloc [500 * i32]*;
    store [500 * i32]** %source1 with [500 * i32]* %source;
    store [500 * i32]** %target1 with [500 * i32]* %target;
    store i32* %i with i32 1;
    store i32* %j with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %j;
    i32 %1 = load i32* @height;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %i with i32 1;
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %i;
    i32 %6 = load i32* @width;
    i1 %7 = scmp le i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %10 = load i32* %j;
    i32 %11 = add i32 %10, i32 1;
    store i32* %j with i32 %11;
    ubr ^while.header;
^while.body1:
    i32 %12 = load i32* %j;
    i32 %13 = sub i32 %12, i32 1;
    i64 %14 = sext i32 %13 to i64;
    [500 * i32]* %15 = load [500 * i32]** %source1;
    [500 * i32]* %16 = getelementptr &([500 * i32]* %15)[i64 %14];
    i32 %17 = load i32* %i;
    i32 %18 = sub i32 %17, i32 1;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = getelementptr &([500 * i32]* %16)[i64 0][i64 %19];
    i32 %21 = load i32* %20;
    i32 %22 = load i32* %j;
    i32 %23 = sub i32 %22, i32 1;
    i64 %24 = sext i32 %23 to i64;
    [500 * i32]* %25 = load [500 * i32]** %source1;
    [500 * i32]* %26 = getelementptr &([500 * i32]* %25)[i64 %24];
    i32 %27 = load i32* %i;
    i64 %28 = sext i32 %27 to i64;
    i32* %29 = getelementptr &([500 * i32]* %26)[i64 0][i64 %28];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %21, i32 %30;
    i32 %32 = load i32* %j;
    i32 %33 = sub i32 %32, i32 1;
    i64 %34 = sext i32 %33 to i64;
    [500 * i32]* %35 = load [500 * i32]** %source1;
    [500 * i32]* %36 = getelementptr &([500 * i32]* %35)[i64 %34];
    i32 %37 = load i32* %i;
    i32 %38 = add i32 %37, i32 1;
    i64 %39 = sext i32 %38 to i64;
    i32* %40 = getelementptr &([500 * i32]* %36)[i64 0][i64 %39];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %31, i32 %41;
    i32 %43 = load i32* %j;
    i64 %44 = sext i32 %43 to i64;
    [500 * i32]* %45 = load [500 * i32]** %source1;
    [500 * i32]* %46 = getelementptr &([500 * i32]* %45)[i64 %44];
    i32 %47 = load i32* %i;
    i32 %48 = sub i32 %47, i32 1;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = getelementptr &([500 * i32]* %46)[i64 0][i64 %49];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %42, i32 %51;
    i32 %53 = load i32* %j;
    i64 %54 = sext i32 %53 to i64;
    [500 * i32]* %55 = load [500 * i32]** %source1;
    [500 * i32]* %56 = getelementptr &([500 * i32]* %55)[i64 %54];
    i32 %57 = load i32* %i;
    i32 %58 = add i32 %57, i32 1;
    i64 %59 = sext i32 %58 to i64;
    i32* %60 = getelementptr &([500 * i32]* %56)[i64 0][i64 %59];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %52, i32 %61;
    i32 %63 = load i32* %j;
    i32 %64 = add i32 %63, i32 1;
    i64 %65 = sext i32 %64 to i64;
    [500 * i32]* %66 = load [500 * i32]** %source1;
    [500 * i32]* %67 = getelementptr &([500 * i32]* %66)[i64 %65];
    i32 %68 = load i32* %i;
    i32 %69 = sub i32 %68, i32 1;
    i64 %70 = sext i32 %69 to i64;
    i32* %71 = getelementptr &([500 * i32]* %67)[i64 0][i64 %70];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %62, i32 %72;
    i32 %74 = load i32* %j;
    i32 %75 = add i32 %74, i32 1;
    i64 %76 = sext i32 %75 to i64;
    [500 * i32]* %77 = load [500 * i32]** %source1;
    [500 * i32]* %78 = getelementptr &([500 * i32]* %77)[i64 %76];
    i32 %79 = load i32* %i;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = getelementptr &([500 * i32]* %78)[i64 0][i64 %80];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %73, i32 %82;
    i32 %84 = load i32* %j;
    i32 %85 = add i32 %84, i32 1;
    i64 %86 = sext i32 %85 to i64;
    [500 * i32]* %87 = load [500 * i32]** %source1;
    [500 * i32]* %88 = getelementptr &([500 * i32]* %87)[i64 %86];
    i32 %89 = load i32* %i;
    i32 %90 = add i32 %89, i32 1;
    i64 %91 = sext i32 %90 to i64;
    i32* %92 = getelementptr &([500 * i32]* %88)[i64 0][i64 %91];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %83, i32 %93;
    store i32* %alive_co with i32 %94;
    i32 %95 = load i32* %j;
    i64 %96 = sext i32 %95 to i64;
    [500 * i32]* %97 = load [500 * i32]** %source1;
    [500 * i32]* %98 = getelementptr &([500 * i32]* %97)[i64 %96];
    i32 %99 = load i32* %i;
    i64 %100 = sext i32 %99 to i64;
    i32* %101 = getelementptr &([500 * i32]* %98)[i64 0][i64 %100];
    i32 %102 = load i32* %101;
    i1 %103 = scmp eq i32 %102, i32 1;
    i32 %104 = zext i1 %103 to i32;
    i1 %105 = scmp neq i32 %104, i32 0;
    cbr i1 %105(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %106 = load i32* %alive_co;
    i1 %107 = scmp eq i32 %106, i32 2;
    i32 %108 = zext i1 %107 to i32;
    i1 %109 = scmp neq i32 %108, i32 0;
    ubr ^b3;
^b3:
    i1 %110 = phi [^b2, i1 %109] [^while.body1, i1 false];
    i32 %111 = zext i1 %110 to i32;
    i1 %112 = scmp neq i32 %111, i32 0;
    cbr i1 %112(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %113 = load i32* %j;
    i64 %114 = sext i32 %113 to i64;
    [500 * i32]* %115 = load [500 * i32]** %target1;
    [500 * i32]* %116 = getelementptr &([500 * i32]* %115)[i64 %114];
    i32 %117 = load i32* %i;
    i64 %118 = sext i32 %117 to i64;
    i32* %119 = getelementptr &([500 * i32]* %116)[i64 0][i64 %118];
    store i32* %119 with i32 1;
    ubr ^b4;
^if.else:
    i32 %120 = load i32* %alive_co;
    i1 %121 = scmp eq i32 %120, i32 3;
    i32 %122 = zext i1 %121 to i32;
    i1 %123 = scmp neq i32 %122, i32 0;
    cbr i1 %123(prob = 0.5), ^if.then1, ^if.else1;
^b4:
    i32 %124 = load i32* %i;
    i32 %125 = add i32 %124, i32 1;
    store i32* %i with i32 %125;
    ubr ^while.header1;
^if.then1:
    i32 %126 = load i32* %j;
    i64 %127 = sext i32 %126 to i64;
    [500 * i32]* %128 = load [500 * i32]** %target1;
    [500 * i32]* %129 = getelementptr &([500 * i32]* %128)[i64 %127];
    i32 %130 = load i32* %i;
    i64 %131 = sext i32 %130 to i64;
    i32* %132 = getelementptr &([500 * i32]* %129)[i64 0][i64 %131];
    store i32* %132 with i32 1;
    ubr ^b5;
^if.else1:
    i32 %133 = load i32* %j;
    i64 %134 = sext i32 %133 to i64;
    [500 * i32]* %135 = load [500 * i32]** %target1;
    [500 * i32]* %136 = getelementptr &([500 * i32]* %135)[i64 %134];
    i32 %137 = load i32* %i;
    i64 %138 = sext i32 %137 to i64;
    i32* %139 = getelementptr &([500 * i32]* %136)[i64 0][i64 %138];
    store i32* %139 with i32 0;
    ubr ^b5;
^b5:
    ubr ^b4;
}
func @main() -> i32 { Entry } {
^entry:
    call () -> void @read_map();
    call (i32) -> void @starttime(i32 95);
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* @steps;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* @active;
    i1 %5 = scmp eq i32 %4, i32 1;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
^b:
    call (i32) -> void @stoptime(i32 106);
    i32 %8 = load i32* @active;
    i1 %9 = scmp eq i32 %8, i32 2;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^b1;
^if.then:
    [500 * i32]* %12 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %13 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    call ([500 * i32]*, [500 * i32]*) -> void @step([500 * i32]* %12, [500 * i32]* %13);
    store i32* @active with i32 2;
    ubr ^b2;
^if.else:
    [500 * i32]* %14 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    [500 * i32]* %15 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    call ([500 * i32]*, [500 * i32]*) -> void @step([500 * i32]* %14, [500 * i32]* %15);
    store i32* @active with i32 1;
    ubr ^b2;
^if.then1:
    call () -> void @swap12();
    ubr ^b1;
^b1:
    call () -> void @put_map();
    ret i32 0;
^b2:
    i32 %16 = load i32* @steps;
    i32 %17 = sub i32 %16, i32 1;
    store i32* @steps with i32 %17;
    ubr ^while.header;
}
