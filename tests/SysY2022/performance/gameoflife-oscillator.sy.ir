internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getch();
    [500 * [500 * i32]]* %5 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %12];
    i1 %7 = icmp sge i32 %2, i32 %6;
    cbr i1 %7(prob = 0.992248), ^while.header1, ^entry1;
  ^while.header1:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %6];
    cbr i1 %1(prob = 0.992248), ^while.body1, ^b;
  ^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %9 = icmp sgt i32 %3, i32 0;
    [500 * [500 * i32]]* %10 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %9(prob = 0.992248), ^while.body, ^b1;
  ^b:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %13 = phi [^entry1, i32 %3] [^while.body2, i32 %45];
    i32 %14 = phi [^entry1, i32 1] [^while.body2, i32 %21];
    i1 %15 = icmp eq i32 %14, i32 1;
    [500 * [500 * i32]]* %16 = select i1 %15 ? [500 * [500 * i32]]* %5 : [500 * [500 * i32]]* %10;
    [500 * i32]* %17 = getelementptr &([500 * [500 * i32]]* %16)[i64 0][i64 0];
    [500 * [500 * i32]]* %18 = select i1 %15 ? [500 * [500 * i32]]* %10 : [500 * [500 * i32]]* %5;
    [500 * i32]* %19 = getelementptr &([500 * [500 * i32]]* %18)[i64 0][i64 0];
    i32 %20 = zext i1 %15 to i32;
    i32 %21 = add i32 %20, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %22 = phi [^while.header1, i32 1] [^while.body1, i32 %27];
    i32 %23 = call () -> i32 @getch();
    i1 %24 = icmp eq i32 %23, i32 35;
    i32 %25 = zext i1 %24 to i32;
    i32* %26 = getelementptr &([500 * i32]* %8)[i64 0][i32 %22];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %22, i32 1;
    i1 %28 = icmp sge i32 %0, i32 %27;
    cbr i1 %28(prob = 0.992248), ^while.body1, ^b;
  ^b1:
    i32 %29 = phi [^entry1, i32 1] [^while.body2, i32 %21];
    call (i32) -> void @stoptime(i32 106);
    i1 %30 = icmp eq i32 %29, i32 2;
    cbr i1 %30(prob = 0.5), ^while.header3, ^while.header4;
  ^while.header2:
    i32 %31 = phi [^while.body, i32 1] [^while.header5, i32 %38];
    i32 %32 = add i32 %31, i32 -1;
    [500 * i32]* %33 = getelementptr &([500 * i32]* %17)[i32 %32];
    [500 * i32]* %34 = getelementptr &([500 * i32]* %17)[i32 %31];
    [500 * i32]* %35 = getelementptr &([500 * i32]* %34)[i64 1];
    i1 %36 = icmp sge i32 %2, i32 %31;
    [500 * i32]* %37 = getelementptr &([500 * i32]* %19)[i32 %31];
    i32 %38 = add i32 %31, i32 1;
    cbr i1 %36(prob = 0.992248), ^while.header5, ^while.body2;
  ^while.header3:
    i32 %39 = phi [^b1, i32 1] [^b3, i32 %82];
    i1 %40 = icmp sge i32 %2, i32 %39;
    cbr i1 %40(prob = 0.992248), ^while.header6, ^while.header4;
  ^while.header4:
    i32 %41 = phi [^b1, i32 1] [^while.header3, i32 1] [^b4, i32 %89];
    i1 %42 = icmp sge i32 %2, i32 %41;
    cbr i1 %42(prob = 0.992248), ^while.header7, ^b2;
  ^while.header5:
    i32 %43 = phi [^while.header2, i32 1] [^if.then, i32 %81] [^if.else, i32 %81];
    i1 %44 = icmp sge i32 %0, i32 %43;
    cbr i1 %44(prob = 0.992248), ^while.body3, ^while.header2;
  ^while.body2:
    i32 %45 = add i32 %13, i32 -1;
    i1 %46 = icmp sgt i32 %45, i32 0;
    cbr i1 %46(prob = 0.992248), ^while.body, ^b1;
  ^while.header6:
    [500 * i32]* %47 = getelementptr &([500 * [500 * i32]]* %10)[i64 0][i32 %39];
    [500 * i32]* %48 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %39];
    cbr i1 %1(prob = 0.992248), ^while.body4, ^b3;
  ^while.header7:
    [500 * i32]* %49 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %41];
    cbr i1 %1(prob = 0.992248), ^while.body5, ^b4;
  ^b2:
    ret i32 0;
  ^while.body3:
    i32 %50 = add i32 %43, i32 -1;
    i32* %51 = getelementptr &([500 * i32]* %33)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([500 * i32]* %33)[i64 0][i32 %43];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &([500 * i32]* %34)[i64 0][i32 %50];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %59)[i64 2];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &([500 * i32]* %35)[i64 0][i32 %50];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32* %68 = getelementptr &([500 * i32]* %35)[i64 0][i32 %43];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %68)[i64 1];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = xor i32 %73, i32 2;
    i32* %75 = getelementptr &([500 * i32]* %34)[i64 0][i32 %43];
    i32 %76 = load i32* %75;
    i32 %77 = xor i32 %76, i32 1;
    i32 %78 = or i32 %74, i32 %77;
    i1 %79 = icmp eq i32 %78, i32 0;
    i32* %80 = getelementptr &([500 * i32]* %37)[i64 0][i32 %43];
    i32 %81 = add i32 %43, i32 1;
    cbr i1 %79(prob = 0.5), ^if.then, ^if.else;
  ^b3:
    i32 %82 = add i32 %39, i32 1;
    ubr ^while.header3;
  ^while.body4:
    i32 %83 = phi [^while.header6, i32 1] [^while.body4, i32 %87];
    i32* %84 = getelementptr &([500 * i32]* %47)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([500 * i32]* %48)[i64 0][i32 %83];
    store i32* %86 with i32 %85;
    i32 %87 = add i32 %83, i32 1;
    i1 %88 = icmp sge i32 %0, i32 %87;
    cbr i1 %88(prob = 0.992248), ^while.body4, ^b3;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %89 = add i32 %41, i32 1;
    ubr ^while.header4;
  ^while.body5:
    i32 %90 = phi [^while.header7, i32 1] [^while.body5, i32 %95];
    i32* %91 = getelementptr &([500 * i32]* %49)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i1 %93 = icmp eq i32 %92, i32 1;
    i32 %94 = select i1 %93 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %94);
    i32 %95 = add i32 %90, i32 1;
    i1 %96 = icmp sge i32 %0, i32 %95;
    cbr i1 %96(prob = 0.992248), ^while.body5, ^b4;
  ^if.then:
    store i32* %80 with i32 1;
    ubr ^while.header5;
  ^if.else:
    i1 %97 = icmp eq i32 %73, i32 3;
    i32 %98 = zext i1 %97 to i32;
    store i32* %80 with i32 %98;
    ubr ^while.header5;
}
