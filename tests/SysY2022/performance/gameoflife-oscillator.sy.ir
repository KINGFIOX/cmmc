internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %steps = alloc i32;
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %width with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %height with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %steps with i32 %2;
    i32 %3 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %12] [^entry, i32 1];
    i1 %5 = scmp le i32 %4, i32 %1;
    [500 * i32]* %6 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %4];
    cbr i1 %5(prob = 0.97), ^while.header1, ^entry1;
^entry1:
    call (i32) -> void @starttime(i32 95);
    [500 * i32]* %7 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %9 = phi [^while.header, i32 1] [^b2, i32 %24];
    i1 %10 = scmp le i32 %9, i32 %0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^b:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %4, i32 1;
    ubr ^while.header;
^while.body:
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp eq i32 %13, i32 35;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
^while.header2:
    i32 %15 = phi [^b4, i32 %46] [^entry1, i32 1];
    i32 %16 = phi [^b4, i32 %47] [^entry1, i32 %0];
    i32 %17 = phi [^b4, i32 %48] [^entry1, i32 %1];
    i32 %18 = phi [^b4, i32 %50] [^entry1, i32 %2];
    i1 %19 = scmp gt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b1;
^if.then:
    i32* %20 = getelementptr &([500 * i32]* %6)[i64 0][i32 %9];
    store i32* %20 with i32 1;
    ubr ^b2;
^if.else:
    i32* %21 = getelementptr &([500 * i32]* %6)[i64 0][i32 %9];
    store i32* %21 with i32 0;
    ubr ^b2;
^while.body1:
    i1 %22 = scmp eq i32 %15, i32 1;
    cbr i1 %22(prob = 0.5), ^entry2, ^entry3;
^b1:
    call (i32) -> void @stoptime(i32 106);
    i1 %23 = scmp eq i32 %15, i32 2;
    cbr i1 %23(prob = 0.5), ^while.header3, ^while.header4;
^b2:
    i32 %24 = add i32 %9, i32 1;
    ubr ^while.header1;
^entry2:
    store i32* %j1 with i32 1;
    ubr ^while.header5;
^entry3:
    store i32* %j with i32 1;
    ubr ^while.header6;
^while.header3:
    i32 %25 = phi [^b1, i32 1] [^b5, i32 %55];
    i1 %26 = scmp le i32 %25, i32 %17;
    [500 * i32]* %27 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %25];
    [500 * i32]* %28 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %25];
    cbr i1 %26(prob = 0.97), ^while.header7, ^while.header4;
^while.header4:
    i32 %29 = phi [^while.header3, i32 1] [^b1, i32 1] [^b6, i32 %56];
    i1 %30 = scmp le i32 %29, i32 %17;
    [500 * i32]* %31 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %29];
    cbr i1 %30(prob = 0.97), ^while.header8, ^b3;
^while.header5:
    i32 %32 = phi [^b7, i32 %60] [^entry2, i32 %16];
    i32 %33 = phi [^b7, i32 %61] [^entry2, i32 %17];
    i32 %34 = phi [^b7, i32 %62] [^entry2, i32 %18];
    i32 %35 = phi [^b7, i32 %72] [^entry2, i32 1];
    i1 %36 = scmp le i32 %35, i32 %33;
    cbr i1 %36(prob = 0.97), ^while.body2, ^b4;
^while.header6:
    i32 %37 = phi [^b8, i32 %66] [^entry3, i32 %16];
    i32 %38 = phi [^b8, i32 %67] [^entry3, i32 %17];
    i32 %39 = phi [^b8, i32 %68] [^entry3, i32 %18];
    i32 %40 = phi [^b8, i32 %104] [^entry3, i32 1];
    i1 %41 = scmp le i32 %40, i32 %38;
    cbr i1 %41(prob = 0.97), ^while.body3, ^b4;
^while.header7:
    i32 %42 = phi [^while.header3, i32 1] [^while.body4, i32 %54];
    i1 %43 = scmp le i32 %42, i32 %16;
    cbr i1 %43(prob = 0.97), ^while.body4, ^b5;
^while.header8:
    i32 %44 = phi [^while.header4, i32 1] [^b9, i32 %105];
    i1 %45 = scmp le i32 %44, i32 %16;
    cbr i1 %45(prob = 0.97), ^while.body5, ^b6;
^b3:
    ret i32 0;
^while.body2:
    store i32* %i1 with i32 1;
    ubr ^while.header9;
^while.body3:
    store i32* %i with i32 1;
    ubr ^while.header10;
^b4:
    i32 %46 = phi [^while.header6, i32 1] [^while.header5, i32 2];
    i32 %47 = phi [^while.header6, i32 %37] [^while.header5, i32 %32];
    i32 %48 = phi [^while.header6, i32 %38] [^while.header5, i32 %33];
    i32 %49 = phi [^while.header6, i32 %39] [^while.header5, i32 %34];
    i32 %50 = add i32 %49, i32 -1;
    store i32* %steps with i32 %50;
    ubr ^while.header2;
^while.body4:
    i32* %51 = getelementptr &([500 * i32]* %27)[i64 0][i32 %42];
    i32* %52 = getelementptr &([500 * i32]* %28)[i64 0][i32 %42];
    i32 %53 = load i32* %52;
    store i32* %51 with i32 %53;
    i32 %54 = add i32 %42, i32 1;
    ubr ^while.header7;
^b5:
    i32 %55 = add i32 %25, i32 1;
    ubr ^while.header3;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %56 = add i32 %29, i32 1;
    ubr ^while.header4;
^while.body5:
    i32* %57 = getelementptr &([500 * i32]* %31)[i64 0][i32 %44];
    i32 %58 = load i32* %57;
    i1 %59 = scmp eq i32 %58, i32 1;
    cbr i1 %59(prob = 0.5), ^if.then1, ^if.else1;
^while.header9:
    i32 %60 = phi [^b14, i32 %157] [^while.body2, i32 %32];
    i32 %61 = phi [^b14, i32 %158] [^while.body2, i32 %33];
    i32 %62 = phi [^b14, i32 %159] [^while.body2, i32 %34];
    i32 %63 = phi [^b14, i32 %160] [^while.body2, i32 %35];
    i32 %64 = phi [^b14, i32 %162] [^while.body2, i32 1];
    i1 %65 = scmp le i32 %64, i32 %60;
    cbr i1 %65(prob = 0.97), ^while.body6, ^b7;
^if.then1:
    call (i32) -> void @putch(i32 35);
    ubr ^b9;
^while.header10:
    i32 %66 = phi [^b15, i32 %163] [^while.body3, i32 %37];
    i32 %67 = phi [^b15, i32 %164] [^while.body3, i32 %38];
    i32 %68 = phi [^b15, i32 %165] [^while.body3, i32 %39];
    i32 %69 = phi [^b15, i32 %166] [^while.body3, i32 %40];
    i32 %70 = phi [^b15, i32 %168] [^while.body3, i32 1];
    i1 %71 = scmp le i32 %70, i32 %66;
    cbr i1 %71(prob = 0.97), ^while.body7, ^b8;
^if.else1:
    call (i32) -> void @putch(i32 46);
    ubr ^b9;
^b7:
    i32 %72 = add i32 %63, i32 1;
    store i32* %j1 with i32 %72;
    ubr ^while.header5;
^while.body6:
    i32 %73 = add i32 %63, i32 -1;
    [500 * i32]* %74 = getelementptr &([500 * i32]* %7)[i32 %73];
    i32 %75 = add i32 %64, i32 -1;
    i32* %76 = getelementptr &([500 * i32]* %74)[i64 0][i32 %75];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &([500 * i32]* %74)[i64 0][i32 %64];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %78)[i64 1];
    i32 %81 = load i32* %80;
    [500 * i32]* %82 = getelementptr &([500 * i32]* %7)[i32 %63];
    i32* %83 = getelementptr &([500 * i32]* %82)[i64 0][i32 %75];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %83)[i64 2];
    i32 %86 = load i32* %85;
    [500 * i32]* %87 = getelementptr &([500 * i32]* %82)[i64 1];
    i32* %88 = getelementptr &([500 * i32]* %87)[i64 0][i32 %75];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([500 * i32]* %87)[i64 0][i32 %64];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %90)[i64 1];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %77, i32 %79;
    i32 %95 = add i32 %94, i32 %81;
    i32 %96 = add i32 %95, i32 %84;
    i32 %97 = add i32 %96, i32 %86;
    i32 %98 = add i32 %97, i32 %89;
    i32 %99 = add i32 %98, i32 %91;
    i32 %100 = add i32 %99, i32 %93;
    i32* %101 = getelementptr &([500 * i32]* %82)[i64 0][i32 %64];
    i32 %102 = load i32* %101;
    i1 %103 = scmp eq i32 %102, i32 1;
    cbr i1 %103(prob = 0.5), ^b10, ^b12;
^b8:
    i32 %104 = add i32 %69, i32 1;
    store i32* %j with i32 %104;
    ubr ^while.header6;
^b9:
    i32 %105 = add i32 %44, i32 1;
    ubr ^while.header8;
^while.body7:
    i32 %106 = add i32 %69, i32 -1;
    [500 * i32]* %107 = getelementptr &([500 * i32]* %8)[i32 %106];
    i32 %108 = add i32 %70, i32 -1;
    i32* %109 = getelementptr &([500 * i32]* %107)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &([500 * i32]* %107)[i64 0][i32 %70];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %111)[i64 1];
    i32 %114 = load i32* %113;
    [500 * i32]* %115 = getelementptr &([500 * i32]* %8)[i32 %69];
    i32* %116 = getelementptr &([500 * i32]* %115)[i64 0][i32 %108];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %116)[i64 2];
    i32 %119 = load i32* %118;
    [500 * i32]* %120 = getelementptr &([500 * i32]* %115)[i64 1];
    i32* %121 = getelementptr &([500 * i32]* %120)[i64 0][i32 %108];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &([500 * i32]* %120)[i64 0][i32 %70];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %123)[i64 1];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %110, i32 %112;
    i32 %128 = add i32 %127, i32 %114;
    i32 %129 = add i32 %128, i32 %117;
    i32 %130 = add i32 %129, i32 %119;
    i32 %131 = add i32 %130, i32 %122;
    i32 %132 = add i32 %131, i32 %124;
    i32 %133 = add i32 %132, i32 %126;
    i32* %134 = getelementptr &([500 * i32]* %115)[i64 0][i32 %70];
    i32 %135 = load i32* %134;
    i1 %136 = scmp eq i32 %135, i32 1;
    cbr i1 %136(prob = 0.5), ^b11, ^b13;
^b10:
    i1 %137 = scmp eq i32 %100, i32 2;
    ubr ^b12;
^b11:
    i1 %138 = scmp eq i32 %133, i32 2;
    ubr ^b13;
^b12:
    i1 %139 = phi [^b10, i1 %137] [^while.body6, i1 false];
    cbr i1 %139(prob = 0.5), ^if.then2, ^if.else2;
^b13:
    i1 %140 = phi [^while.body7, i1 false] [^b11, i1 %138];
    cbr i1 %140(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    [500 * i32]* %141 = getelementptr &([500 * i32]* %8)[i32 %63];
    i32* %142 = getelementptr &([500 * i32]* %141)[i64 0][i32 %64];
    store i32* %142 with i32 1;
    i32 %143 = load i32* %width;
    i32 %144 = load i32* %height;
    i32 %145 = load i32* %steps;
    i32 %146 = load i32* %j1;
    i32 %147 = load i32* %i1;
    ubr ^b14;
^if.then3:
    [500 * i32]* %148 = getelementptr &([500 * i32]* %7)[i32 %69];
    i32* %149 = getelementptr &([500 * i32]* %148)[i64 0][i32 %70];
    store i32* %149 with i32 1;
    i32 %150 = load i32* %width;
    i32 %151 = load i32* %height;
    i32 %152 = load i32* %steps;
    i32 %153 = load i32* %j;
    i32 %154 = load i32* %i;
    ubr ^b15;
^if.else2:
    i1 %155 = scmp eq i32 %100, i32 3;
    cbr i1 %155(prob = 0.5), ^if.then2, ^if.else4;
^if.else3:
    i1 %156 = scmp eq i32 %133, i32 3;
    cbr i1 %156(prob = 0.5), ^if.then3, ^if.else5;
^b14:
    i32 %157 = phi [^if.else4, i32 %171] [^if.then2, i32 %143];
    i32 %158 = phi [^if.else4, i32 %172] [^if.then2, i32 %144];
    i32 %159 = phi [^if.else4, i32 %173] [^if.then2, i32 %145];
    i32 %160 = phi [^if.else4, i32 %174] [^if.then2, i32 %146];
    i32 %161 = phi [^if.else4, i32 %175] [^if.then2, i32 %147];
    i32 %162 = add i32 %161, i32 1;
    store i32* %i1 with i32 %162;
    ubr ^while.header9;
^b15:
    i32 %163 = phi [^if.else5, i32 %178] [^if.then3, i32 %150];
    i32 %164 = phi [^if.else5, i32 %179] [^if.then3, i32 %151];
    i32 %165 = phi [^if.else5, i32 %180] [^if.then3, i32 %152];
    i32 %166 = phi [^if.else5, i32 %181] [^if.then3, i32 %153];
    i32 %167 = phi [^if.else5, i32 %182] [^if.then3, i32 %154];
    i32 %168 = add i32 %167, i32 1;
    store i32* %i with i32 %168;
    ubr ^while.header10;
^if.else4:
    [500 * i32]* %169 = getelementptr &([500 * i32]* %8)[i32 %63];
    i32* %170 = getelementptr &([500 * i32]* %169)[i64 0][i32 %64];
    store i32* %170 with i32 0;
    i32 %171 = load i32* %width;
    i32 %172 = load i32* %height;
    i32 %173 = load i32* %steps;
    i32 %174 = load i32* %j1;
    i32 %175 = load i32* %i1;
    ubr ^b14;
^if.else5:
    [500 * i32]* %176 = getelementptr &([500 * i32]* %7)[i32 %69];
    i32* %177 = getelementptr &([500 * i32]* %176)[i64 0][i32 %70];
    store i32* %177 with i32 0;
    i32 %178 = load i32* %width;
    i32 %179 = load i32* %height;
    i32 %180 = load i32* %steps;
    i32 %181 = load i32* %j;
    i32 %182 = load i32* %i;
    ubr ^b15;
}
