internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getch();
    [500 * [500 * i32]]* %5 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %12];
    i1 %7 = icmp sge i32 %2, i32 %6;
    cbr i1 %7(prob = 0.984615), ^while.body, ^entry1;
  ^while.body:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %6];
    cbr i1 %1(prob = 0.984615), ^while.body1, ^b;
  ^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %9 = icmp sgt i32 %3, i32 0;
    [500 * [500 * i32]]* %10 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %9(prob = 0.984615), ^indirect, ^b1;
  ^b:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^indirect:
    [500 * i32]* %13 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i64 0];
    [500 * i32]* %14 = getelementptr &([500 * [500 * i32]]* %10)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body1:
    i32 %15 = phi [^while.body, i32 1] [^while.body1, i32 %20];
    i32 %16 = call () -> i32 @getch();
    i1 %17 = icmp eq i32 %16, i32 35;
    i32 %18 = zext i1 %17 to i32;
    i32* %19 = getelementptr &([500 * i32]* %8)[i64 0][i32 %15];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %15, i32 1;
    i1 %21 = icmp sge i32 %0, i32 %20;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^b;
  ^b1:
    i32 %22 = phi [^entry1, i32 1] [^while.body6, i32 %30];
    i1 %23 = icmp eq i32 %22, i32 2;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %23(prob = 0.5), ^while.header1, ^while.header2;
  ^while.body2:
    i32 %24 = phi [^indirect, i32 %3] [^while.body6, i32 %46];
    i32 %25 = phi [^indirect, i32 1] [^while.body6, i32 %30];
    i1 %26 = icmp eq i32 %25, i32 1;
    [500 * i32]* %27 = select i1 %26 ? [500 * i32]* %13 : [500 * i32]* %14;
    [500 * i32]* %28 = select i1 %26 ? [500 * i32]* %14 : [500 * i32]* %13;
    i32 %29 = zext i1 %26 to i32;
    i32 %30 = add i32 %29, i32 1;
    ubr ^while.header3;
  ^while.header1:
    i32 %31 = phi [^b1, i32 1] [^b3, i32 %45];
    i1 %32 = icmp sge i32 %2, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.body3, ^while.header2;
  ^while.header2:
    i32 %33 = phi [^b1, i32 1] [^while.header1, i32 1] [^b4, i32 %54];
    i1 %34 = icmp sge i32 %2, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body4, ^b2;
  ^while.header3:
    i32 %35 = phi [^while.body2, i32 1] [^while.body5, i32 %44] [^b5, i32 %44];
    i1 %36 = icmp sge i32 %2, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.body5, ^while.body6;
  ^while.body3:
    [500 * i32]* %37 = getelementptr &([500 * [500 * i32]]* %10)[i64 0][i32 %31];
    [500 * i32]* %38 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %31];
    cbr i1 %1(prob = 0.984615), ^while.body7, ^b3;
  ^while.body4:
    [500 * i32]* %39 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %33];
    cbr i1 %1(prob = 0.984615), ^while.body8, ^b4;
  ^b2:
    ret i32 0;
  ^while.body5:
    [500 * i32]* %40 = getelementptr &([500 * i32]* %27)[i32 %35];
    [500 * i32]* %41 = getelementptr &([500 * i32]* %40)[i64 -1];
    [500 * i32]* %42 = getelementptr &([500 * i32]* %40)[i64 1];
    [500 * i32]* %43 = getelementptr &([500 * i32]* %28)[i32 %35];
    i32 %44 = add i32 %35, i32 1;
    cbr i1 %1(prob = 0.984615), ^while.body9, ^while.header3;
  ^b3:
    i32 %45 = add i32 %31, i32 1;
    ubr ^while.header1;
  ^while.body6:
    i32 %46 = add i32 %24, i32 -1;
    i1 %47 = icmp sgt i32 %46, i32 0;
    cbr i1 %47(prob = 0.984615), ^while.body2, ^b1;
  ^while.body7:
    i32 %48 = phi [^while.body3, i32 1] [^while.body7, i32 %52];
    i32* %49 = getelementptr &([500 * i32]* %37)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([500 * i32]* %38)[i64 0][i32 %48];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %48, i32 1;
    i1 %53 = icmp sge i32 %0, i32 %52;
    cbr i1 %53(prob = 0.984615), ^while.body7, ^b3;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %54 = add i32 %33, i32 1;
    ubr ^while.header2;
  ^while.body8:
    i32 %55 = phi [^while.body4, i32 1] [^while.body8, i32 %60];
    i32* %56 = getelementptr &([500 * i32]* %39)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i1 %58 = icmp eq i32 %57, i32 1;
    i32 %59 = select i1 %58 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %59);
    i32 %60 = add i32 %55, i32 1;
    i1 %61 = icmp sge i32 %0, i32 %60;
    cbr i1 %61(prob = 0.984615), ^while.body8, ^b4;
  ^while.body9:
    i32 %62 = phi [^while.body5, i32 1] [^b5, i32 %94];
    i32 %63 = add i32 %62, i32 -1;
    i32* %64 = getelementptr &([500 * i32]* %41)[i64 0][i32 %63];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &([500 * i32]* %41)[i64 0][i32 %62];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32* %69 = getelementptr &(i32* %66)[i64 1];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32* %72 = getelementptr &([500 * i32]* %40)[i64 0][i32 %63];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %71, i32 %73;
    i32* %75 = getelementptr &(i32* %72)[i64 2];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    i32* %78 = getelementptr &([500 * i32]* %42)[i64 0][i32 %63];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %77, i32 %79;
    i32* %81 = getelementptr &([500 * i32]* %42)[i64 0][i32 %62];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %80, i32 %82;
    i32* %84 = getelementptr &(i32* %81)[i64 1];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = xor i32 %86, i32 2;
    i32* %88 = getelementptr &([500 * i32]* %40)[i64 0][i32 %62];
    i32 %89 = load i32* %88;
    i32 %90 = xor i32 %89, i32 1;
    i32 %91 = or i32 %87, i32 %90;
    i1 %92 = icmp eq i32 %91, i32 0;
    i32* %93 = getelementptr &([500 * i32]* %43)[i64 0][i32 %62];
    i32 %94 = add i32 %62, i32 1;
    cbr i1 %92(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %93 with i32 1;
    ubr ^b5;
  ^if.else:
    i1 %95 = icmp eq i32 %86, i32 3;
    i32 %96 = zext i1 %95 to i32;
    store i32* %93 with i32 %96;
    ubr ^b5;
  ^b5:
    i1 %97 = icmp sge i32 %0, i32 %94;
    cbr i1 %97(prob = 0.984615), ^while.body9, ^while.header3;
}
