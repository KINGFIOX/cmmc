internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %steps = alloc i32;
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %1 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    i32 %2 = call () -> i32 @getint();
    store i32* %width with i32 %2;
    i1 %3 = scmp gt i32 %2, i32 0;
    i32 %4 = call () -> i32 @getint();
    store i32* %height with i32 %4;
    i1 %5 = scmp gt i32 %4, i32 0;
    i32 %6 = call () -> i32 @getint();
    store i32* %steps with i32 %6;
    i32 %7 = call () -> i32 @getch();
    cbr i1 %5(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %8 = phi [^entry, i32 1] [^b, i32 %11];
    cbr i1 %3(prob = 0.97), ^indirect, ^b;
^entry1:
    i1 %9 = scmp gt i32 %6, i32 0;
    call (i32) -> void @starttime(i32 95);
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^indirect:
    [500 * i32]* %10 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %8];
    ubr ^while.body2;
^b:
    i32 %11 = add i32 %8, i32 1;
    i1 %12 = scmp le i32 %11, i32 %4;
    i32 %13 = call () -> i32 @getch();
    cbr i1 %12(prob = 0.97), ^while.body, ^entry1;
^while.body1:
    i32 %14 = phi [^entry1, i32 %2] [^while.body4, i32 %42];
    i32 %15 = phi [^entry1, i32 %4] [^while.body4, i32 %43];
    i32 %16 = phi [^entry1, i32 %6] [^while.body4, i32 %45];
    i32 %17 = phi [^entry1, i32 1] [^while.body4, i32 %20];
    store i32* %j with i32 1;
    i1 %18 = scmp gt i32 %15, i32 0;
    i1 %19 = scmp eq i32 %17, i32 1;
    i32 %20 = select i1 %19 ? i32 2 : i32 1;
    [500 * i32]* %21 = select i1 %19 ? [500 * i32]* %0 : [500 * i32]* %1;
    [500 * i32]* %22 = select i1 %19 ? [500 * i32]* %1 : [500 * i32]* %0;
    cbr i1 %18(prob = 0.97), ^while.body3, ^while.body4;
^b1:
    i32 %23 = phi [^entry1, i32 %2] [^while.body4, i32 %42];
    i32 %24 = phi [^entry1, i32 %4] [^while.body4, i32 %43];
    i32 %25 = phi [^entry1, i32 1] [^while.body4, i32 %20];
    i1 %26 = scmp gt i32 %23, i32 0;
    i1 %27 = scmp gt i32 %24, i32 0;
    i1 %28 = scmp eq i32 %25, i32 2;
    i1 %29 = and i1 %27, i1 %28;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %29(prob = 0.48), ^while.body5, ^entry2;
^while.body2:
    i32 %30 = phi [^indirect, i32 1] [^while.body2, i32 %31];
    i32 %31 = add i32 %30, i32 1;
    i1 %32 = scmp le i32 %31, i32 %2;
    i32* %33 = getelementptr &([500 * i32]* %10)[i64 0][i32 %30];
    i32 %34 = call () -> i32 @getch();
    i1 %35 = scmp eq i32 %34, i32 35;
    i32 %36 = zext i1 %35 to i32;
    store i32* %33 with i32 %36;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b;
^while.body3:
    i32 %37 = phi [^while.body1, i32 %14] [^b2, i32 %81];
    i32 %38 = phi [^while.body1, i32 %15] [^b2, i32 %82];
    i32 %39 = phi [^while.body1, i32 %16] [^b2, i32 %83];
    i32 %40 = phi [^while.body1, i32 1] [^b2, i32 %85];
    store i32* %i with i32 1;
    i1 %41 = scmp gt i32 %37, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body6, ^b2;
^while.body4:
    i32 %42 = phi [^while.body1, i32 %14] [^b2, i32 %81];
    i32 %43 = phi [^while.body1, i32 %15] [^b2, i32 %82];
    i32 %44 = phi [^while.body1, i32 %16] [^b2, i32 %83];
    i32 %45 = add i32 %44, i32 -1;
    store i32* %steps with i32 %45;
    i1 %46 = scmp gt i32 %45, i32 0;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b1;
^while.body5:
    i32 %47 = phi [^b1, i32 1] [^b3, i32 %88];
    cbr i1 %26(prob = 0.97), ^indirect1, ^b3;
^entry2:
    cbr i1 %27(prob = 0.97), ^while.body7, ^b4;
^indirect1:
    [500 * i32]* %48 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %47];
    [500 * i32]* %49 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %47];
    ubr ^while.body8;
^while.body6:
    i32 %50 = phi [^while.body3, i32 1] [^b8, i32 %129];
    i32 %51 = phi [^while.body3, i32 %40] [^b8, i32 %128];
    [500 * i32]* %52 = getelementptr &([500 * i32]* %21)[i32 %51];
    i32* %53 = getelementptr &([500 * i32]* %52)[i64 0][i32 %50];
    i32* %54 = getelementptr &(i32* %53)[i64 -1];
    i32* %55 = getelementptr &(i32* %53)[i64 1];
    [500 * i32]* %56 = getelementptr &([500 * i32]* %52)[i64 -1];
    i32* %57 = getelementptr &([500 * i32]* %56)[i64 0][i32 %50];
    i32* %58 = getelementptr &(i32* %57)[i64 -1];
    i32 %59 = load i32* %58;
    i32 %60 = load i32* %57;
    i32 %61 = add i32 %59, i32 %60;
    i32* %62 = getelementptr &(i32* %57)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = load i32* %54;
    i32 %65 = load i32* %55;
    i32 %66 = add i32 %61, i32 %63;
    i32 %67 = add i32 %66, i32 %64;
    i32 %68 = add i32 %67, i32 %65;
    [500 * i32]* %69 = getelementptr &([500 * i32]* %52)[i64 1];
    i32* %70 = getelementptr &([500 * i32]* %69)[i64 0][i32 %50];
    i32* %71 = getelementptr &(i32* %70)[i64 -1];
    i32 %72 = load i32* %71;
    i32 %73 = load i32* %70;
    i32 %74 = add i32 %68, i32 %72;
    i32 %75 = add i32 %74, i32 %73;
    i32* %76 = getelementptr &(i32* %70)[i64 1];
    i32 %77 = load i32* %76;
    i32 %78 = load i32* %53;
    i32 %79 = add i32 %75, i32 %77;
    i1 %80 = scmp eq i32 %78, i32 1;
    cbr i1 %80(prob = 0.5), ^b5, ^b6;
^b2:
    i32 %81 = phi [^while.body3, i32 %37] [^b8, i32 %124];
    i32 %82 = phi [^while.body3, i32 %38] [^b8, i32 %125];
    i32 %83 = phi [^while.body3, i32 %39] [^b8, i32 %126];
    i32 %84 = phi [^while.body3, i32 %40] [^b8, i32 %128];
    i32 %85 = add i32 %84, i32 1;
    store i32* %j with i32 %85;
    i1 %86 = scmp le i32 %85, i32 %82;
    cbr i1 %86(prob = 0.97), ^while.body3, ^while.body4;
^while.body7:
    i32 %87 = phi [^entry2, i32 1] [^b7, i32 %99];
    cbr i1 %26(prob = 0.97), ^indirect2, ^b7;
^b3:
    i32 %88 = add i32 %47, i32 1;
    i1 %89 = scmp le i32 %88, i32 %24;
    cbr i1 %89(prob = 0.97), ^while.body5, ^entry2;
^b4:
    ret i32 0;
^b5:
    i1 %90 = scmp eq i32 %79, i32 2;
    ubr ^b6;
^indirect2:
    [500 * i32]* %91 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %87];
    ubr ^while.body9;
^b6:
    i1 %92 = phi [^while.body6, i1 false] [^b5, i1 %90];
    cbr i1 %92(prob = 0.5), ^if.then, ^if.else;
^while.body8:
    i32 %93 = phi [^indirect1, i32 1] [^while.body8, i32 %94];
    i32 %94 = add i32 %93, i32 1;
    i1 %95 = scmp le i32 %94, i32 %23;
    i32* %96 = getelementptr &([500 * i32]* %48)[i64 0][i32 %93];
    i32* %97 = getelementptr &([500 * i32]* %49)[i64 0][i32 %93];
    i32 %98 = load i32* %97;
    store i32* %96 with i32 %98;
    cbr i1 %95(prob = 0.97), ^while.body8, ^b3;
^b7:
    i32 %99 = add i32 %87, i32 1;
    i1 %100 = scmp le i32 %99, i32 %24;
    call (i32) -> void @putch(i32 10);
    cbr i1 %100(prob = 0.97), ^while.body7, ^b4;
^if.then:
    [500 * i32]* %101 = getelementptr &([500 * i32]* %22)[i32 %51];
    i32* %102 = getelementptr &([500 * i32]* %101)[i64 0][i32 %50];
    store i32* %102 with i32 1;
    i32 %103 = load i32* %j;
    i32 %104 = load i32* %i;
    i32 %105 = load i32* %width;
    i32 %106 = load i32* %height;
    i32 %107 = load i32* %steps;
    ubr ^b8;
^if.else:
    i1 %108 = scmp eq i32 %79, i32 3;
    i32 %109 = zext i1 %108 to i32;
    [500 * i32]* %110 = getelementptr &([500 * i32]* %22)[i32 %51];
    i32* %111 = getelementptr &([500 * i32]* %110)[i64 0][i32 %50];
    store i32* %111 with i32 %109;
    i32 %112 = load i32* %j;
    i32 %113 = load i32* %i;
    i32 %114 = load i32* %width;
    i32 %115 = load i32* %height;
    i32 %116 = load i32* %steps;
    ubr ^b8;
^while.body9:
    i32 %117 = phi [^indirect2, i32 1] [^while.body9, i32 %118];
    i32 %118 = add i32 %117, i32 1;
    i1 %119 = scmp le i32 %118, i32 %23;
    i32* %120 = getelementptr &([500 * i32]* %91)[i64 0][i32 %117];
    i32 %121 = load i32* %120;
    i1 %122 = scmp eq i32 %121, i32 1;
    i32 %123 = select i1 %122 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %123);
    cbr i1 %119(prob = 0.97), ^while.body9, ^b7;
^b8:
    i32 %124 = phi [^if.then, i32 %105] [^if.else, i32 %114];
    i32 %125 = phi [^if.then, i32 %106] [^if.else, i32 %115];
    i32 %126 = phi [^if.then, i32 %107] [^if.else, i32 %116];
    i32 %127 = phi [^if.then, i32 %104] [^if.else, i32 %113];
    i32 %128 = phi [^if.then, i32 %103] [^if.else, i32 %112];
    i32 %129 = add i32 %127, i32 1;
    store i32* %i with i32 %129;
    i1 %130 = scmp le i32 %129, i32 %124;
    cbr i1 %130(prob = 0.97), ^while.body6, ^b2;
}
