internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %0 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    f32* %1 = getelementptr &([100000 * f32]* %0)[i64 0][i64 0];
    [100000 * f32]* %2 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %3 = getelementptr &([100000 * f32]* %2)[i64 0][i64 0];
    [100000 * f32]* %4 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %5 = getelementptr &([100000 * f32]* %4)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %71];
    f32* %7 = getelementptr &([100000 * f32]* %0)[i64 0][i32 %6];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &(f32* %7)[i64 1];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &(f32* %7)[i64 2];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &(f32* %7)[i64 3];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &(f32* %7)[i64 4];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &(f32* %7)[i64 5];
    store f32* %12 with f32 1;
    f32* %13 = getelementptr &(f32* %7)[i64 6];
    store f32* %13 with f32 1;
    f32* %14 = getelementptr &(f32* %7)[i64 7];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %7)[i64 8];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %7)[i64 9];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %7)[i64 10];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %7)[i64 11];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %7)[i64 12];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %7)[i64 13];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %7)[i64 14];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %7)[i64 15];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %7)[i64 16];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %7)[i64 17];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %7)[i64 18];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %7)[i64 19];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %7)[i64 20];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %7)[i64 21];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %7)[i64 22];
    store f32* %29 with f32 1;
    f32* %30 = getelementptr &(f32* %7)[i64 23];
    store f32* %30 with f32 1;
    f32* %31 = getelementptr &(f32* %7)[i64 24];
    store f32* %31 with f32 1;
    f32* %32 = getelementptr &(f32* %7)[i64 25];
    store f32* %32 with f32 1;
    f32* %33 = getelementptr &(f32* %7)[i64 26];
    store f32* %33 with f32 1;
    f32* %34 = getelementptr &(f32* %7)[i64 27];
    store f32* %34 with f32 1;
    f32* %35 = getelementptr &(f32* %7)[i64 28];
    store f32* %35 with f32 1;
    f32* %36 = getelementptr &(f32* %7)[i64 29];
    store f32* %36 with f32 1;
    f32* %37 = getelementptr &(f32* %7)[i64 30];
    store f32* %37 with f32 1;
    f32* %38 = getelementptr &(f32* %7)[i64 31];
    store f32* %38 with f32 1;
    f32* %39 = getelementptr &(f32* %7)[i64 32];
    store f32* %39 with f32 1;
    f32* %40 = getelementptr &(f32* %7)[i64 33];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %7)[i64 34];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %7)[i64 35];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %7)[i64 36];
    store f32* %43 with f32 1;
    f32* %44 = getelementptr &(f32* %7)[i64 37];
    store f32* %44 with f32 1;
    f32* %45 = getelementptr &(f32* %7)[i64 38];
    store f32* %45 with f32 1;
    f32* %46 = getelementptr &(f32* %7)[i64 39];
    store f32* %46 with f32 1;
    f32* %47 = getelementptr &(f32* %7)[i64 40];
    store f32* %47 with f32 1;
    f32* %48 = getelementptr &(f32* %7)[i64 41];
    store f32* %48 with f32 1;
    f32* %49 = getelementptr &(f32* %7)[i64 42];
    store f32* %49 with f32 1;
    f32* %50 = getelementptr &(f32* %7)[i64 43];
    store f32* %50 with f32 1;
    f32* %51 = getelementptr &(f32* %7)[i64 44];
    store f32* %51 with f32 1;
    f32* %52 = getelementptr &(f32* %7)[i64 45];
    store f32* %52 with f32 1;
    f32* %53 = getelementptr &(f32* %7)[i64 46];
    store f32* %53 with f32 1;
    f32* %54 = getelementptr &(f32* %7)[i64 47];
    store f32* %54 with f32 1;
    f32* %55 = getelementptr &(f32* %7)[i64 48];
    store f32* %55 with f32 1;
    f32* %56 = getelementptr &(f32* %7)[i64 49];
    store f32* %56 with f32 1;
    f32* %57 = getelementptr &(f32* %7)[i64 50];
    store f32* %57 with f32 1;
    f32* %58 = getelementptr &(f32* %7)[i64 51];
    store f32* %58 with f32 1;
    f32* %59 = getelementptr &(f32* %7)[i64 52];
    store f32* %59 with f32 1;
    f32* %60 = getelementptr &(f32* %7)[i64 53];
    store f32* %60 with f32 1;
    f32* %61 = getelementptr &(f32* %7)[i64 54];
    store f32* %61 with f32 1;
    f32* %62 = getelementptr &(f32* %7)[i64 55];
    store f32* %62 with f32 1;
    f32* %63 = getelementptr &(f32* %7)[i64 56];
    store f32* %63 with f32 1;
    f32* %64 = getelementptr &(f32* %7)[i64 57];
    store f32* %64 with f32 1;
    f32* %65 = getelementptr &(f32* %7)[i64 58];
    store f32* %65 with f32 1;
    f32* %66 = getelementptr &(f32* %7)[i64 59];
    store f32* %66 with f32 1;
    f32* %67 = getelementptr &(f32* %7)[i64 60];
    store f32* %67 with f32 1;
    f32* %68 = getelementptr &(f32* %7)[i64 61];
    store f32* %68 with f32 1;
    f32* %69 = getelementptr &(f32* %7)[i64 62];
    store f32* %69 with f32 1;
    f32* %70 = getelementptr &(f32* %7)[i64 63];
    store f32* %70 with f32 1;
    i32 %71 = add i32 %6, i32 64;
    i1 %72 = icmp slt i32 %71, i32 99968;
    cbr i1 %72(prob = 0.99936), ^while.body, ^while.body1;
  ^while.body1:
    f32* %73 = getelementptr &(f32* %7)[i64 64];
    store f32* %73 with f32 1;
    f32* %74 = getelementptr &(f32* %7)[i64 65];
    store f32* %74 with f32 1;
    f32* %75 = getelementptr &(f32* %7)[i64 66];
    store f32* %75 with f32 1;
    f32* %76 = getelementptr &(f32* %7)[i64 67];
    store f32* %76 with f32 1;
    f32* %77 = getelementptr &(f32* %7)[i64 68];
    store f32* %77 with f32 1;
    f32* %78 = getelementptr &(f32* %7)[i64 69];
    store f32* %78 with f32 1;
    f32* %79 = getelementptr &(f32* %7)[i64 70];
    store f32* %79 with f32 1;
    f32* %80 = getelementptr &(f32* %7)[i64 71];
    store f32* %80 with f32 1;
    f32* %81 = getelementptr &(f32* %7)[i64 72];
    store f32* %81 with f32 1;
    f32* %82 = getelementptr &(f32* %7)[i64 73];
    store f32* %82 with f32 1;
    f32* %83 = getelementptr &(f32* %7)[i64 74];
    store f32* %83 with f32 1;
    f32* %84 = getelementptr &(f32* %7)[i64 75];
    store f32* %84 with f32 1;
    f32* %85 = getelementptr &(f32* %7)[i64 76];
    store f32* %85 with f32 1;
    f32* %86 = getelementptr &(f32* %7)[i64 77];
    store f32* %86 with f32 1;
    f32* %87 = getelementptr &(f32* %7)[i64 78];
    store f32* %87 with f32 1;
    f32* %88 = getelementptr &(f32* %7)[i64 79];
    store f32* %88 with f32 1;
    f32* %89 = getelementptr &(f32* %7)[i64 80];
    store f32* %89 with f32 1;
    f32* %90 = getelementptr &(f32* %7)[i64 81];
    store f32* %90 with f32 1;
    f32* %91 = getelementptr &(f32* %7)[i64 82];
    store f32* %91 with f32 1;
    f32* %92 = getelementptr &(f32* %7)[i64 83];
    store f32* %92 with f32 1;
    f32* %93 = getelementptr &(f32* %7)[i64 84];
    store f32* %93 with f32 1;
    f32* %94 = getelementptr &(f32* %7)[i64 85];
    store f32* %94 with f32 1;
    f32* %95 = getelementptr &(f32* %7)[i64 86];
    store f32* %95 with f32 1;
    f32* %96 = getelementptr &(f32* %7)[i64 87];
    store f32* %96 with f32 1;
    f32* %97 = getelementptr &(f32* %7)[i64 88];
    store f32* %97 with f32 1;
    f32* %98 = getelementptr &(f32* %7)[i64 89];
    store f32* %98 with f32 1;
    f32* %99 = getelementptr &(f32* %7)[i64 90];
    store f32* %99 with f32 1;
    f32* %100 = getelementptr &(f32* %7)[i64 91];
    store f32* %100 with f32 1;
    f32* %101 = getelementptr &(f32* %7)[i64 92];
    store f32* %101 with f32 1;
    f32* %102 = getelementptr &(f32* %7)[i64 93];
    store f32* %102 with f32 1;
    f32* %103 = getelementptr &(f32* %7)[i64 94];
    store f32* %103 with f32 1;
    f32* %104 = getelementptr &(f32* %7)[i64 95];
    store f32* %104 with f32 1;
    ubr ^while.body2;
  ^while.body2:
    i32 %105 = phi [^while.body1, i32 0] [^b3, i32 %214];
    ubr ^while.header;
  ^while.header:
    f32 %106 = phi [^while.body2, f32 0] [^b, f32 %117];
    i32 %107 = phi [^while.body2, i32 0] [^b, i32 %116];
    i32 %108 = phi [^while.body2, i32 0] [^b, i32 %111];
    i1 %109 = icmp slt i32 %108, i32 100000;
    cbr i1 %109(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    i1 %110 = icmp slt i32 %107, i32 100000;
    i32 %111 = add i32 %108, i32 1;
    cbr i1 %110(prob = 0.984615), ^super.header, ^b;
  ^while.header2:
    f32 %112 = phi [^while.header, f32 0] [^b1, f32 %131];
    i32 %113 = phi [^while.header, i32 0] [^b1, i32 %130];
    i32 %114 = phi [^while.header, i32 0] [^b1, i32 %122];
    i1 %115 = icmp slt i32 %114, i32 100000;
    cbr i1 %115(prob = 0.984615), ^while.header3, ^while.header4;
  ^b:
    i32 %116 = phi [^while.header1, i32 %107] [^scalar.header, i32 100000] [^while.body4, i32 100000];
    f32 %117 = phi [^while.header1, f32 %106] [^scalar.header, f32 %135] [^while.body4, f32 %200];
    f32* %118 = getelementptr &(f32* %5)[i32 %108];
    store f32* %118 with f32 %117;
    ubr ^while.header;
  ^super.header:
    i32 %119 = add i32 %107, i32 3;
    i1 %120 = icmp slt i32 %119, i32 100000;
    cbr i1 %120(prob = 0.941176), ^prebody, ^scalar.header;
  ^while.header3:
    i1 %121 = icmp slt i32 %113, i32 100000;
    i32 %122 = add i32 %114, i32 1;
    cbr i1 %121(prob = 0.984615), ^super.header1, ^b1;
  ^while.header4:
    f32 %123 = phi [^while.header2, f32 0] [^b2, f32 %204];
    i32 %124 = phi [^while.header2, i32 0] [^b2, i32 %203];
    i32 %125 = phi [^while.header2, i32 0] [^b2, i32 %140];
    i1 %126 = icmp slt i32 %125, i32 100000;
    cbr i1 %126(prob = 0.984615), ^while.header5, ^while.header6;
  ^prebody:
    i32 %127 = add i32 %108, i32 2;
    i32 %128 = add i32 %108, i32 3;
    i32 %129 = add i32 %108, i32 4;
    ubr ^while.body3;
  ^b1:
    i32 %130 = phi [^while.header3, i32 %113] [^scalar.header1, i32 100000] [^while.body6, i32 100000];
    f32 %131 = phi [^while.header3, f32 %112] [^scalar.header1, f32 %208] [^while.body6, f32 %274];
    f32* %132 = getelementptr &(f32* %3)[i32 %114];
    store f32* %132 with f32 %131;
    ubr ^while.header2;
  ^scalar.header:
    f32 %133 = phi [^super.header, f32 %106] [^while.body3, f32 %186];
    i32 %134 = phi [^super.header, i32 %107] [^while.body3, i32 %187];
    f32 %135 = phi [^super.header, f32 undef] [^while.body3, f32 %186];
    i1 %136 = icmp slt i32 %134, i32 100000;
    cbr i1 %136(prob = 0.75), ^while.body4, ^b;
  ^super.header1:
    i32 %137 = add i32 %113, i32 3;
    i1 %138 = icmp slt i32 %137, i32 100000;
    cbr i1 %138(prob = 0.941176), ^prebody1, ^scalar.header1;
  ^while.header5:
    i1 %139 = icmp slt i32 %124, i32 100000;
    i32 %140 = add i32 %125, i32 1;
    cbr i1 %139(prob = 0.984615), ^super.header2, ^b2;
  ^while.header6:
    f32 %141 = phi [^while.header4, f32 0] [^b4, f32 %277];
    i32 %142 = phi [^while.header4, i32 0] [^b4, i32 %276];
    i32 %143 = phi [^while.header4, i32 0] [^b4, i32 %213];
    i1 %144 = icmp slt i32 %143, i32 100000;
    cbr i1 %144(prob = 0.984615), ^while.header7, ^b3;
  ^prebody1:
    i32 %145 = add i32 %114, i32 2;
    i32 %146 = add i32 %114, i32 3;
    i32 %147 = add i32 %114, i32 4;
    ubr ^while.body5;
  ^while.body3:
    f32 %148 = phi [^prebody, f32 %106] [^while.body3, f32 %186];
    i32 %149 = phi [^prebody, i32 %107] [^while.body3, i32 %187];
    i32 %150 = add i32 %108, i32 %149;
    i32 %151 = add i32 %111, i32 %149;
    i32 %152 = mul i32 %150, i32 %151;
    i32 %153 = sdiv i32 %152, i32 2;
    i32 %154 = add i32 %111, i32 %153;
    f32 %155 = s2f i32 %154 to f32;
    f32* %156 = getelementptr &(f32* %1)[i32 %149];
    f32 %157 = load f32* %156;
    f32 %158 = fdiv f32 %157, f32 %155;
    f32 %159 = fadd f32 %148, f32 %158;
    i32 %160 = add i32 %127, i32 %149;
    i32 %161 = mul i32 %151, i32 %160;
    i32 %162 = sdiv i32 %161, i32 2;
    i32 %163 = add i32 %111, i32 %162;
    f32 %164 = s2f i32 %163 to f32;
    f32* %165 = getelementptr &(f32* %156)[i64 1];
    f32 %166 = load f32* %165;
    f32 %167 = fdiv f32 %166, f32 %164;
    f32 %168 = fadd f32 %159, f32 %167;
    i32 %169 = add i32 %128, i32 %149;
    i32 %170 = mul i32 %160, i32 %169;
    i32 %171 = sdiv i32 %170, i32 2;
    i32 %172 = add i32 %111, i32 %171;
    f32 %173 = s2f i32 %172 to f32;
    f32* %174 = getelementptr &(f32* %156)[i64 2];
    f32 %175 = load f32* %174;
    f32 %176 = fdiv f32 %175, f32 %173;
    f32 %177 = fadd f32 %168, f32 %176;
    i32 %178 = add i32 %129, i32 %149;
    i32 %179 = mul i32 %169, i32 %178;
    i32 %180 = sdiv i32 %179, i32 2;
    i32 %181 = add i32 %111, i32 %180;
    f32 %182 = s2f i32 %181 to f32;
    f32* %183 = getelementptr &(f32* %156)[i64 3];
    f32 %184 = load f32* %183;
    f32 %185 = fdiv f32 %184, f32 %182;
    f32 %186 = fadd f32 %177, f32 %185;
    i32 %187 = add i32 %149, i32 4;
    i1 %188 = icmp slt i32 %187, i32 99997;
    cbr i1 %188(prob = 0.941176), ^while.body3, ^scalar.header;
  ^while.body4 {scalar}:
    i32 %189 = phi [^scalar.header, i32 %134] [^while.body4, i32 %201];
    f32 %190 = phi [^scalar.header, f32 %133] [^while.body4, f32 %200];
    i32 %191 = add i32 %108, i32 %189;
    i32 %192 = add i32 %111, i32 %189;
    i32 %193 = mul i32 %191, i32 %192;
    i32 %194 = sdiv i32 %193, i32 2;
    i32 %195 = add i32 %111, i32 %194;
    f32 %196 = s2f i32 %195 to f32;
    f32* %197 = getelementptr &(f32* %1)[i32 %189];
    f32 %198 = load f32* %197;
    f32 %199 = fdiv f32 %198, f32 %196;
    f32 %200 = fadd f32 %190, f32 %199;
    i32 %201 = add i32 %189, i32 1;
    i1 %202 = icmp slt i32 %201, i32 100000;
    cbr i1 %202(prob = 0.75), ^while.body4, ^b;
  ^b2:
    i32 %203 = phi [^while.header5, i32 %124] [^scalar.header2, i32 100000] [^while.body8, i32 100000];
    f32 %204 = phi [^while.header5, f32 %123] [^scalar.header2, f32 %281] [^while.body8, f32 %342];
    f32* %205 = getelementptr &(f32* %5)[i32 %125];
    store f32* %205 with f32 %204;
    ubr ^while.header4;
  ^scalar.header1:
    f32 %206 = phi [^super.header1, f32 %112] [^while.body5, f32 %260];
    i32 %207 = phi [^super.header1, i32 %113] [^while.body5, i32 %254];
    f32 %208 = phi [^super.header1, f32 undef] [^while.body5, f32 %260];
    i1 %209 = icmp slt i32 %207, i32 100000;
    cbr i1 %209(prob = 0.75), ^while.body6, ^b1;
  ^super.header2:
    i32 %210 = add i32 %124, i32 3;
    i1 %211 = icmp slt i32 %210, i32 100000;
    cbr i1 %211(prob = 0.941176), ^prebody2, ^scalar.header2;
  ^while.header7:
    i1 %212 = icmp slt i32 %142, i32 100000;
    i32 %213 = add i32 %143, i32 1;
    cbr i1 %212(prob = 0.984615), ^super.header3, ^b4;
  ^b3:
    i32 %214 = add i32 %105, i32 1;
    i1 %215 = icmp slt i32 %214, i32 1000;
    cbr i1 %215(prob = 0.999), ^while.body2, ^b5;
  ^prebody2:
    i32 %216 = add i32 %125, i32 2;
    i32 %217 = add i32 %125, i32 3;
    ubr ^while.body7;
  ^while.body5:
    f32 %218 = phi [^prebody1, f32 %112] [^while.body5, f32 %260];
    i32 %219 = phi [^prebody1, i32 %113] [^while.body5, i32 %254];
    i32 %220 = add i32 %114, i32 %219;
    i32 %221 = add i32 %122, i32 %219;
    i32 %222 = mul i32 %220, i32 %221;
    i32 %223 = sdiv i32 %222, i32 2;
    i32 %224 = add i32 %219, i32 1;
    i32 %225 = add i32 %223, i32 %224;
    f32 %226 = s2f i32 %225 to f32;
    f32* %227 = getelementptr &(f32* %5)[i32 %219];
    f32 %228 = load f32* %227;
    f32 %229 = fdiv f32 %228, f32 %226;
    f32 %230 = fadd f32 %218, f32 %229;
    i32 %231 = add i32 %145, i32 %219;
    i32 %232 = mul i32 %221, i32 %231;
    i32 %233 = sdiv i32 %232, i32 2;
    i32 %234 = add i32 %219, i32 2;
    i32 %235 = add i32 %233, i32 %234;
    f32 %236 = s2f i32 %235 to f32;
    f32* %237 = getelementptr &(f32* %227)[i64 1];
    f32 %238 = load f32* %237;
    f32 %239 = fdiv f32 %238, f32 %236;
    f32 %240 = fadd f32 %230, f32 %239;
    i32 %241 = add i32 %146, i32 %219;
    i32 %242 = mul i32 %231, i32 %241;
    i32 %243 = sdiv i32 %242, i32 2;
    i32 %244 = add i32 %219, i32 3;
    i32 %245 = add i32 %243, i32 %244;
    f32 %246 = s2f i32 %245 to f32;
    f32* %247 = getelementptr &(f32* %227)[i64 2];
    f32 %248 = load f32* %247;
    f32 %249 = fdiv f32 %248, f32 %246;
    f32 %250 = fadd f32 %240, f32 %249;
    i32 %251 = add i32 %147, i32 %219;
    i32 %252 = mul i32 %241, i32 %251;
    i32 %253 = sdiv i32 %252, i32 2;
    i32 %254 = add i32 %219, i32 4;
    i32 %255 = add i32 %253, i32 %254;
    f32 %256 = s2f i32 %255 to f32;
    f32* %257 = getelementptr &(f32* %227)[i64 3];
    f32 %258 = load f32* %257;
    f32 %259 = fdiv f32 %258, f32 %256;
    f32 %260 = fadd f32 %250, f32 %259;
    i1 %261 = icmp slt i32 %254, i32 99997;
    cbr i1 %261(prob = 0.941176), ^while.body5, ^scalar.header1;
  ^while.body6 {scalar}:
    i32 %262 = phi [^scalar.header1, i32 %207] [^while.body6, i32 %268];
    f32 %263 = phi [^scalar.header1, f32 %206] [^while.body6, f32 %274];
    i32 %264 = add i32 %114, i32 %262;
    i32 %265 = add i32 %122, i32 %262;
    i32 %266 = mul i32 %264, i32 %265;
    i32 %267 = sdiv i32 %266, i32 2;
    i32 %268 = add i32 %262, i32 1;
    i32 %269 = add i32 %267, i32 %268;
    f32 %270 = s2f i32 %269 to f32;
    f32* %271 = getelementptr &(f32* %5)[i32 %262];
    f32 %272 = load f32* %271;
    f32 %273 = fdiv f32 %272, f32 %270;
    f32 %274 = fadd f32 %263, f32 %273;
    i1 %275 = icmp slt i32 %268, i32 100000;
    cbr i1 %275(prob = 0.75), ^while.body6, ^b1;
  ^b4:
    i32 %276 = phi [^while.header7, i32 %142] [^scalar.header3, i32 100000] [^while.body11, i32 100000];
    f32 %277 = phi [^while.header7, f32 %141] [^scalar.header3, f32 %347] [^while.body11, f32 %507];
    f32* %278 = getelementptr &(f32* %1)[i32 %143];
    store f32* %278 with f32 %277;
    ubr ^while.header6;
  ^scalar.header2:
    f32 %279 = phi [^super.header2, f32 %123] [^while.body7, f32 %327];
    i32 %280 = phi [^super.header2, i32 %124] [^while.body7, i32 %328];
    f32 %281 = phi [^super.header2, f32 undef] [^while.body7, f32 %327];
    i1 %282 = icmp slt i32 %280, i32 100000;
    cbr i1 %282(prob = 0.75), ^while.body8, ^b2;
  ^super.header3:
    i32 %283 = add i32 %142, i32 3;
    i1 %284 = icmp slt i32 %283, i32 100000;
    cbr i1 %284(prob = 0.941176), ^prebody3, ^scalar.header3;
  ^b5:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body9;
  ^prebody3:
    i32 %285 = add i32 %143, i32 2;
    i32 %286 = add i32 %143, i32 3;
    ubr ^while.body10;
  ^while.body7:
    i32 %287 = phi [^prebody2, i32 %210] [^while.body7, i32 %330];
    f32 %288 = phi [^prebody2, f32 %123] [^while.body7, f32 %327];
    i32 %289 = phi [^prebody2, i32 %124] [^while.body7, i32 %328];
    i32 %290 = add i32 %125, i32 %289;
    i32 %291 = add i32 %140, i32 %289;
    i32 %292 = mul i32 %290, i32 %291;
    i32 %293 = sdiv i32 %292, i32 2;
    i32 %294 = add i32 %140, i32 %293;
    f32 %295 = s2f i32 %294 to f32;
    f32* %296 = getelementptr &(f32* %3)[i32 %289];
    f32 %297 = load f32* %296;
    f32 %298 = fdiv f32 %297, f32 %295;
    f32 %299 = fadd f32 %288, f32 %298;
    i32 %300 = add i32 %216, i32 %289;
    i32 %301 = mul i32 %291, i32 %300;
    i32 %302 = sdiv i32 %301, i32 2;
    i32 %303 = add i32 %140, i32 %302;
    f32 %304 = s2f i32 %303 to f32;
    f32* %305 = getelementptr &(f32* %296)[i64 1];
    f32 %306 = load f32* %305;
    f32 %307 = fdiv f32 %306, f32 %304;
    f32 %308 = fadd f32 %299, f32 %307;
    i32 %309 = add i32 %217, i32 %289;
    i32 %310 = mul i32 %300, i32 %309;
    i32 %311 = sdiv i32 %310, i32 2;
    i32 %312 = add i32 %140, i32 %311;
    f32 %313 = s2f i32 %312 to f32;
    f32* %314 = getelementptr &(f32* %296)[i64 2];
    f32 %315 = load f32* %314;
    f32 %316 = fdiv f32 %315, f32 %313;
    f32 %317 = fadd f32 %308, f32 %316;
    i32 %318 = add i32 %125, i32 %287;
    i32 %319 = add i32 %140, i32 %287;
    i32 %320 = mul i32 %318, i32 %319;
    i32 %321 = sdiv i32 %320, i32 2;
    i32 %322 = add i32 %140, i32 %321;
    f32 %323 = s2f i32 %322 to f32;
    f32* %324 = getelementptr &(f32* %296)[i64 3];
    f32 %325 = load f32* %324;
    f32 %326 = fdiv f32 %325, f32 %323;
    f32 %327 = fadd f32 %317, f32 %326;
    i32 %328 = add i32 %289, i32 4;
    i1 %329 = icmp slt i32 %328, i32 99997;
    i32 %330 = add i32 %289, i32 7;
    cbr i1 %329(prob = 0.941176), ^while.body7, ^scalar.header2;
  ^while.body8 {scalar}:
    i32 %331 = phi [^scalar.header2, i32 %280] [^while.body8, i32 %343];
    f32 %332 = phi [^scalar.header2, f32 %279] [^while.body8, f32 %342];
    i32 %333 = add i32 %125, i32 %331;
    i32 %334 = add i32 %140, i32 %331;
    i32 %335 = mul i32 %333, i32 %334;
    i32 %336 = sdiv i32 %335, i32 2;
    i32 %337 = add i32 %140, i32 %336;
    f32 %338 = s2f i32 %337 to f32;
    f32* %339 = getelementptr &(f32* %3)[i32 %331];
    f32 %340 = load f32* %339;
    f32 %341 = fdiv f32 %340, f32 %338;
    f32 %342 = fadd f32 %332, f32 %341;
    i32 %343 = add i32 %331, i32 1;
    i1 %344 = icmp slt i32 %343, i32 100000;
    cbr i1 %344(prob = 0.75), ^while.body8, ^b2;
  ^scalar.header3:
    f32 %345 = phi [^super.header3, f32 %141] [^while.body10, f32 %492];
    i32 %346 = phi [^super.header3, i32 %142] [^while.body10, i32 %486];
    f32 %347 = phi [^super.header3, f32 undef] [^while.body10, f32 %492];
    i1 %348 = icmp slt i32 %346, i32 100000;
    cbr i1 %348(prob = 0.75), ^while.body11, ^b4;
  ^while.body9:
    i32 %349 = phi [^b5, i32 0] [^while.body9, i32 %447];
    f32 %350 = phi [^b5, f32 0] [^while.body9, f32 %446];
    f32* %351 = getelementptr &(f32* %1)[i32 %349];
    f32 %352 = load f32* %351;
    f32* %353 = getelementptr &(f32* %3)[i32 %349];
    f32 %354 = load f32* %353;
    f32 %355 = fmul f32 %352, f32 %354;
    f32 %356 = fadd f32 %350, f32 %355;
    f32* %357 = getelementptr &(f32* %351)[i64 1];
    f32 %358 = load f32* %357;
    f32* %359 = getelementptr &(f32* %353)[i64 1];
    f32 %360 = load f32* %359;
    f32 %361 = fmul f32 %358, f32 %360;
    f32 %362 = fadd f32 %356, f32 %361;
    f32* %363 = getelementptr &(f32* %351)[i64 2];
    f32 %364 = load f32* %363;
    f32* %365 = getelementptr &(f32* %353)[i64 2];
    f32 %366 = load f32* %365;
    f32 %367 = fmul f32 %364, f32 %366;
    f32 %368 = fadd f32 %362, f32 %367;
    f32* %369 = getelementptr &(f32* %351)[i64 3];
    f32 %370 = load f32* %369;
    f32* %371 = getelementptr &(f32* %353)[i64 3];
    f32 %372 = load f32* %371;
    f32 %373 = fmul f32 %370, f32 %372;
    f32 %374 = fadd f32 %368, f32 %373;
    f32* %375 = getelementptr &(f32* %351)[i64 4];
    f32 %376 = load f32* %375;
    f32* %377 = getelementptr &(f32* %353)[i64 4];
    f32 %378 = load f32* %377;
    f32 %379 = fmul f32 %376, f32 %378;
    f32 %380 = fadd f32 %374, f32 %379;
    f32* %381 = getelementptr &(f32* %351)[i64 5];
    f32 %382 = load f32* %381;
    f32* %383 = getelementptr &(f32* %353)[i64 5];
    f32 %384 = load f32* %383;
    f32 %385 = fmul f32 %382, f32 %384;
    f32 %386 = fadd f32 %380, f32 %385;
    f32* %387 = getelementptr &(f32* %351)[i64 6];
    f32 %388 = load f32* %387;
    f32* %389 = getelementptr &(f32* %353)[i64 6];
    f32 %390 = load f32* %389;
    f32 %391 = fmul f32 %388, f32 %390;
    f32 %392 = fadd f32 %386, f32 %391;
    f32* %393 = getelementptr &(f32* %351)[i64 7];
    f32 %394 = load f32* %393;
    f32* %395 = getelementptr &(f32* %353)[i64 7];
    f32 %396 = load f32* %395;
    f32 %397 = fmul f32 %394, f32 %396;
    f32 %398 = fadd f32 %392, f32 %397;
    f32* %399 = getelementptr &(f32* %351)[i64 8];
    f32 %400 = load f32* %399;
    f32* %401 = getelementptr &(f32* %353)[i64 8];
    f32 %402 = load f32* %401;
    f32 %403 = fmul f32 %400, f32 %402;
    f32 %404 = fadd f32 %398, f32 %403;
    f32* %405 = getelementptr &(f32* %351)[i64 9];
    f32 %406 = load f32* %405;
    f32* %407 = getelementptr &(f32* %353)[i64 9];
    f32 %408 = load f32* %407;
    f32 %409 = fmul f32 %406, f32 %408;
    f32 %410 = fadd f32 %404, f32 %409;
    f32* %411 = getelementptr &(f32* %351)[i64 10];
    f32 %412 = load f32* %411;
    f32* %413 = getelementptr &(f32* %353)[i64 10];
    f32 %414 = load f32* %413;
    f32 %415 = fmul f32 %412, f32 %414;
    f32 %416 = fadd f32 %410, f32 %415;
    f32* %417 = getelementptr &(f32* %351)[i64 11];
    f32 %418 = load f32* %417;
    f32* %419 = getelementptr &(f32* %353)[i64 11];
    f32 %420 = load f32* %419;
    f32 %421 = fmul f32 %418, f32 %420;
    f32 %422 = fadd f32 %416, f32 %421;
    f32* %423 = getelementptr &(f32* %351)[i64 12];
    f32 %424 = load f32* %423;
    f32* %425 = getelementptr &(f32* %353)[i64 12];
    f32 %426 = load f32* %425;
    f32 %427 = fmul f32 %424, f32 %426;
    f32 %428 = fadd f32 %422, f32 %427;
    f32* %429 = getelementptr &(f32* %351)[i64 13];
    f32 %430 = load f32* %429;
    f32* %431 = getelementptr &(f32* %353)[i64 13];
    f32 %432 = load f32* %431;
    f32 %433 = fmul f32 %430, f32 %432;
    f32 %434 = fadd f32 %428, f32 %433;
    f32* %435 = getelementptr &(f32* %351)[i64 14];
    f32 %436 = load f32* %435;
    f32* %437 = getelementptr &(f32* %353)[i64 14];
    f32 %438 = load f32* %437;
    f32 %439 = fmul f32 %436, f32 %438;
    f32 %440 = fadd f32 %434, f32 %439;
    f32* %441 = getelementptr &(f32* %351)[i64 15];
    f32 %442 = load f32* %441;
    f32* %443 = getelementptr &(f32* %353)[i64 15];
    f32 %444 = load f32* %443;
    f32 %445 = fmul f32 %442, f32 %444;
    f32 %446 = fadd f32 %440, f32 %445;
    i32 %447 = add i32 %349, i32 16;
    i1 %448 = icmp slt i32 %447, i32 100000;
    cbr i1 %448(prob = 0.99984), ^while.body9, ^while.body12;
  ^while.body10:
    i32 %449 = phi [^prebody3, i32 %283] [^while.body10, i32 %494];
    f32 %450 = phi [^prebody3, f32 %141] [^while.body10, f32 %492];
    i32 %451 = phi [^prebody3, i32 %142] [^while.body10, i32 %486];
    i32 %452 = add i32 %143, i32 %451;
    i32 %453 = add i32 %213, i32 %451;
    i32 %454 = mul i32 %452, i32 %453;
    i32 %455 = sdiv i32 %454, i32 2;
    i32 %456 = add i32 %451, i32 1;
    i32 %457 = add i32 %455, i32 %456;
    f32 %458 = s2f i32 %457 to f32;
    f32* %459 = getelementptr &(f32* %5)[i32 %451];
    f32 %460 = load f32* %459;
    f32 %461 = fdiv f32 %460, f32 %458;
    f32 %462 = fadd f32 %450, f32 %461;
    i32 %463 = add i32 %285, i32 %451;
    i32 %464 = mul i32 %453, i32 %463;
    i32 %465 = sdiv i32 %464, i32 2;
    i32 %466 = add i32 %451, i32 2;
    i32 %467 = add i32 %465, i32 %466;
    f32 %468 = s2f i32 %467 to f32;
    f32* %469 = getelementptr &(f32* %459)[i64 1];
    f32 %470 = load f32* %469;
    f32 %471 = fdiv f32 %470, f32 %468;
    f32 %472 = fadd f32 %462, f32 %471;
    i32 %473 = add i32 %286, i32 %451;
    i32 %474 = mul i32 %463, i32 %473;
    i32 %475 = sdiv i32 %474, i32 2;
    i32 %476 = add i32 %449, i32 %475;
    f32 %477 = s2f i32 %476 to f32;
    f32* %478 = getelementptr &(f32* %459)[i64 2];
    f32 %479 = load f32* %478;
    f32 %480 = fdiv f32 %479, f32 %477;
    f32 %481 = fadd f32 %472, f32 %480;
    i32 %482 = add i32 %143, i32 %449;
    i32 %483 = add i32 %213, i32 %449;
    i32 %484 = mul i32 %482, i32 %483;
    i32 %485 = sdiv i32 %484, i32 2;
    i32 %486 = add i32 %451, i32 4;
    i32 %487 = add i32 %485, i32 %486;
    f32 %488 = s2f i32 %487 to f32;
    f32* %489 = getelementptr &(f32* %459)[i64 3];
    f32 %490 = load f32* %489;
    f32 %491 = fdiv f32 %490, f32 %488;
    f32 %492 = fadd f32 %481, f32 %491;
    i1 %493 = icmp slt i32 %486, i32 99997;
    i32 %494 = add i32 %451, i32 7;
    cbr i1 %493(prob = 0.941176), ^while.body10, ^scalar.header3;
  ^while.body11 {scalar}:
    i32 %495 = phi [^scalar.header3, i32 %346] [^while.body11, i32 %501];
    f32 %496 = phi [^scalar.header3, f32 %345] [^while.body11, f32 %507];
    i32 %497 = add i32 %143, i32 %495;
    i32 %498 = add i32 %213, i32 %495;
    i32 %499 = mul i32 %497, i32 %498;
    i32 %500 = sdiv i32 %499, i32 2;
    i32 %501 = add i32 %495, i32 1;
    i32 %502 = add i32 %500, i32 %501;
    f32 %503 = s2f i32 %502 to f32;
    f32* %504 = getelementptr &(f32* %5)[i32 %495];
    f32 %505 = load f32* %504;
    f32 %506 = fdiv f32 %505, f32 %503;
    f32 %507 = fadd f32 %496, f32 %506;
    i1 %508 = icmp slt i32 %501, i32 100000;
    cbr i1 %508(prob = 0.75), ^while.body11, ^b4;
  ^while.body12:
    i32 %509 = phi [^while.body9, i32 0] [^while.body12, i32 %575];
    f32 %510 = phi [^while.body9, f32 0] [^while.body12, f32 %574];
    f32* %511 = getelementptr &(f32* %3)[i32 %509];
    f32 %512 = load f32* %511;
    f32 %513 = fmul f32 %512, f32 %512;
    f32 %514 = fadd f32 %510, f32 %513;
    f32* %515 = getelementptr &(f32* %511)[i64 1];
    f32 %516 = load f32* %515;
    f32 %517 = fmul f32 %516, f32 %516;
    f32 %518 = fadd f32 %514, f32 %517;
    f32* %519 = getelementptr &(f32* %511)[i64 2];
    f32 %520 = load f32* %519;
    f32 %521 = fmul f32 %520, f32 %520;
    f32 %522 = fadd f32 %518, f32 %521;
    f32* %523 = getelementptr &(f32* %511)[i64 3];
    f32 %524 = load f32* %523;
    f32 %525 = fmul f32 %524, f32 %524;
    f32 %526 = fadd f32 %522, f32 %525;
    f32* %527 = getelementptr &(f32* %511)[i64 4];
    f32 %528 = load f32* %527;
    f32 %529 = fmul f32 %528, f32 %528;
    f32 %530 = fadd f32 %526, f32 %529;
    f32* %531 = getelementptr &(f32* %511)[i64 5];
    f32 %532 = load f32* %531;
    f32 %533 = fmul f32 %532, f32 %532;
    f32 %534 = fadd f32 %530, f32 %533;
    f32* %535 = getelementptr &(f32* %511)[i64 6];
    f32 %536 = load f32* %535;
    f32 %537 = fmul f32 %536, f32 %536;
    f32 %538 = fadd f32 %534, f32 %537;
    f32* %539 = getelementptr &(f32* %511)[i64 7];
    f32 %540 = load f32* %539;
    f32 %541 = fmul f32 %540, f32 %540;
    f32 %542 = fadd f32 %538, f32 %541;
    f32* %543 = getelementptr &(f32* %511)[i64 8];
    f32 %544 = load f32* %543;
    f32 %545 = fmul f32 %544, f32 %544;
    f32 %546 = fadd f32 %542, f32 %545;
    f32* %547 = getelementptr &(f32* %511)[i64 9];
    f32 %548 = load f32* %547;
    f32 %549 = fmul f32 %548, f32 %548;
    f32 %550 = fadd f32 %546, f32 %549;
    f32* %551 = getelementptr &(f32* %511)[i64 10];
    f32 %552 = load f32* %551;
    f32 %553 = fmul f32 %552, f32 %552;
    f32 %554 = fadd f32 %550, f32 %553;
    f32* %555 = getelementptr &(f32* %511)[i64 11];
    f32 %556 = load f32* %555;
    f32 %557 = fmul f32 %556, f32 %556;
    f32 %558 = fadd f32 %554, f32 %557;
    f32* %559 = getelementptr &(f32* %511)[i64 12];
    f32 %560 = load f32* %559;
    f32 %561 = fmul f32 %560, f32 %560;
    f32 %562 = fadd f32 %558, f32 %561;
    f32* %563 = getelementptr &(f32* %511)[i64 13];
    f32 %564 = load f32* %563;
    f32 %565 = fmul f32 %564, f32 %564;
    f32 %566 = fadd f32 %562, f32 %565;
    f32* %567 = getelementptr &(f32* %511)[i64 14];
    f32 %568 = load f32* %567;
    f32 %569 = fmul f32 %568, f32 %568;
    f32 %570 = fadd f32 %566, f32 %569;
    f32* %571 = getelementptr &(f32* %511)[i64 15];
    f32 %572 = load f32* %571;
    f32 %573 = fmul f32 %572, f32 %572;
    f32 %574 = fadd f32 %570, f32 %573;
    i32 %575 = add i32 %509, i32 16;
    i1 %576 = icmp slt i32 %575, i32 100000;
    cbr i1 %576(prob = 0.99984), ^while.body12, ^b6;
  ^b6:
    f32 %577 = fdiv f32 %446, f32 %574;
    f32 %578 = fsub f32 1, f32 %577;
    i1 %579 = fcmp ogt f32 %578, f32 1e-06;
    i1 %580 = fcmp olt f32 %578, f32 -1e-06;
    i1 %581 = or i1 %579, i1 %580;
    cbr i1 %581(prob = 0.992308), ^while.body13, ^b7;
  ^while.body13:
    f32 %582 = phi [^b6, f32 1] [^while.body13, f32 %585];
    f32 %583 = fdiv f32 %577, f32 %582;
    f32 %584 = fadd f32 %582, f32 %583;
    f32 %585 = fmul f32 %584, f32 0.5;
    f32 %586 = fdiv f32 %577, f32 %585;
    f32 %587 = fsub f32 %585, f32 %586;
    i1 %588 = fcmp ogt f32 %587, f32 1e-06;
    i1 %589 = fcmp olt f32 %587, f32 -1e-06;
    i1 %590 = or i1 %588, i1 %589;
    cbr i1 %590(prob = 0.992308), ^while.body13, ^b7;
  ^b7:
    f32 %591 = phi [^b6, f32 1] [^while.body13, f32 %585];
    f32 %592 = fsub f32 %591, f32 1;
    i1 %593 = fcmp ole f32 %592, f32 1e-06;
    i1 %594 = fcmp oge f32 %592, f32 -1e-06;
    i1 %595 = and i1 %593, i1 %594;
    i32 %596 = zext i1 %595 to i32;
    call (i32) -> void @putint(i32 %596);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [100000 * f32]* @Vectortm, align 8 { Flexible };
internal [100000 * f32]* @vectorB, align 8 { Flexible };
internal [100000 * f32]* @vectorA, align 8 { Flexible };
