internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 62);
    [8 * i8]* %0 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [100000 * f32]** %1 = ptradd [8 * i8]* %0, i32 0;
    [100000 * f32]* %2 = ptrcast [100000 * f32]* @vectorA to [100000 * f32]*;
    store [100000 * f32]** %1 with [100000 * f32]* %2;
    i8* %3 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 100000, i8* %3);
    f32* %4 = getelementptr &([100000 * f32]* %2)[i64 0][i64 0];
    [100000 * f32]* %5 = ptrcast [100000 * f32]* @vectorB to [100000 * f32]*;
    f32* %6 = getelementptr &([100000 * f32]* %5)[i64 0][i64 0];
    [100000 * f32]* %7 = ptrcast [100000 * f32]* @Vectortm to [100000 * f32]*;
    f32* %8 = getelementptr &([100000 * f32]* %7)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^b4, i32 %250];
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^while.body, i32 0] [^b, i32 %14];
    i32 %11 = phi [^while.body, i32 0] [^b, i32 %17];
    f32 %12 = phi [^while.body, f32 0] [^b, f32 %18];
    i1 %13 = icmp slt i32 %11, i32 100000;
    i32 %14 = add i32 %10, i32 1;
    cbr i1 %13(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %15 = add i32 %11, i32 3;
    i1 %16 = icmp slt i32 %15, i32 100000;
    cbr i1 %16(prob = 0.941176), ^prebody, ^scalar.header;
  ^b:
    i32 %17 = phi [^while.header, i32 %11] [^scalar.header, i32 100000] [^while.body2, i32 100000];
    f32 %18 = phi [^while.header, f32 %12] [^scalar.header, f32 %26] [^while.body2, f32 %85];
    f32* %19 = getelementptr &(f32* %8)[i32 %10];
    store f32* %19 with f32 %18;
    i1 %20 = icmp slt i32 %14, i32 100000;
    cbr i1 %20(prob = 0.99999), ^while.header, ^while.header1;
  ^prebody:
    i32 %21 = add i32 %10, i32 2;
    i32 %22 = add i32 %10, i32 3;
    i32 %23 = add i32 %10, i32 4;
    ubr ^while.body1;
  ^scalar.header:
    f32 %24 = phi [^super.header, f32 %12] [^while.body1, f32 %71];
    i32 %25 = phi [^super.header, i32 %11] [^while.body1, i32 %72];
    f32 %26 = phi [^super.header, f32 undef] [^while.body1, f32 %71];
    i1 %27 = icmp slt i32 %25, i32 100000;
    cbr i1 %27(prob = 0.75), ^while.body2, ^b;
  ^while.header1:
    i32 %28 = phi [^b, i32 0] [^b1, i32 %32];
    i32 %29 = phi [^b, i32 0] [^b1, i32 %90];
    f32 %30 = phi [^b, f32 0] [^b1, f32 %91];
    i1 %31 = icmp slt i32 %29, i32 100000;
    i32 %32 = add i32 %28, i32 1;
    cbr i1 %31(prob = 0.984615), ^super.header1, ^b1;
  ^while.body1:
    f32 %33 = phi [^prebody, f32 %12] [^while.body1, f32 %71];
    i32 %34 = phi [^prebody, i32 %11] [^while.body1, i32 %72];
    i32 %35 = add i32 %10, i32 %34;
    i32 %36 = add i32 %14, i32 %34;
    i32 %37 = mul i32 %35, i32 %36;
    i32 %38 = sdiv i32 %37, i32 2;
    i32 %39 = add i32 %14, i32 %38;
    f32 %40 = s2f i32 %39 to f32;
    f32* %41 = getelementptr &(f32* %4)[i32 %34];
    f32 %42 = load f32* %41;
    f32 %43 = fdiv f32 %42, f32 %40;
    f32 %44 = fadd f32 %33, f32 %43;
    i32 %45 = add i32 %21, i32 %34;
    i32 %46 = mul i32 %36, i32 %45;
    i32 %47 = sdiv i32 %46, i32 2;
    i32 %48 = add i32 %14, i32 %47;
    f32 %49 = s2f i32 %48 to f32;
    f32* %50 = getelementptr &(f32* %41)[i64 1];
    f32 %51 = load f32* %50;
    f32 %52 = fdiv f32 %51, f32 %49;
    f32 %53 = fadd f32 %44, f32 %52;
    i32 %54 = add i32 %22, i32 %34;
    i32 %55 = mul i32 %45, i32 %54;
    i32 %56 = sdiv i32 %55, i32 2;
    i32 %57 = add i32 %14, i32 %56;
    f32 %58 = s2f i32 %57 to f32;
    f32* %59 = getelementptr &(f32* %41)[i64 2];
    f32 %60 = load f32* %59;
    f32 %61 = fdiv f32 %60, f32 %58;
    f32 %62 = fadd f32 %53, f32 %61;
    i32 %63 = add i32 %23, i32 %34;
    i32 %64 = mul i32 %54, i32 %63;
    i32 %65 = sdiv i32 %64, i32 2;
    i32 %66 = add i32 %14, i32 %65;
    f32 %67 = s2f i32 %66 to f32;
    f32* %68 = getelementptr &(f32* %41)[i64 3];
    f32 %69 = load f32* %68;
    f32 %70 = fdiv f32 %69, f32 %67;
    f32 %71 = fadd f32 %62, f32 %70;
    i32 %72 = add i32 %34, i32 4;
    i1 %73 = icmp slt i32 %72, i32 99997;
    cbr i1 %73(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %74 = phi [^scalar.header, i32 %25] [^while.body2, i32 %86];
    f32 %75 = phi [^scalar.header, f32 %24] [^while.body2, f32 %85];
    i32 %76 = add i32 %10, i32 %74;
    i32 %77 = add i32 %14, i32 %74;
    i32 %78 = mul i32 %76, i32 %77;
    i32 %79 = sdiv i32 %78, i32 2;
    i32 %80 = add i32 %14, i32 %79;
    f32 %81 = s2f i32 %80 to f32;
    f32* %82 = getelementptr &(f32* %4)[i32 %74];
    f32 %83 = load f32* %82;
    f32 %84 = fdiv f32 %83, f32 %81;
    f32 %85 = fadd f32 %75, f32 %84;
    i32 %86 = add i32 %74, i32 1;
    i1 %87 = icmp slt i32 %86, i32 100000;
    cbr i1 %87(prob = 0.75), ^while.body2, ^b;
  ^super.header1:
    i32 %88 = add i32 %29, i32 3;
    i1 %89 = icmp slt i32 %88, i32 100000;
    cbr i1 %89(prob = 0.941176), ^prebody1, ^scalar.header1;
  ^b1:
    i32 %90 = phi [^while.header1, i32 %29] [^scalar.header1, i32 100000] [^while.body4, i32 100000];
    f32 %91 = phi [^while.header1, f32 %30] [^scalar.header1, f32 %99] [^while.body4, f32 %162];
    f32* %92 = getelementptr &(f32* %6)[i32 %28];
    store f32* %92 with f32 %91;
    i1 %93 = icmp slt i32 %32, i32 100000;
    cbr i1 %93(prob = 0.99999), ^while.header1, ^while.header2;
  ^prebody1:
    i32 %94 = add i32 %28, i32 2;
    i32 %95 = add i32 %28, i32 3;
    i32 %96 = add i32 %28, i32 4;
    ubr ^while.body3;
  ^scalar.header1:
    f32 %97 = phi [^super.header1, f32 %30] [^while.body3, f32 %148];
    i32 %98 = phi [^super.header1, i32 %29] [^while.body3, i32 %142];
    f32 %99 = phi [^super.header1, f32 undef] [^while.body3, f32 %148];
    i1 %100 = icmp slt i32 %98, i32 100000;
    cbr i1 %100(prob = 0.75), ^while.body4, ^b1;
  ^while.header2:
    i32 %101 = phi [^b1, i32 0] [^b2, i32 %105];
    i32 %102 = phi [^b1, i32 0] [^b2, i32 %166];
    f32 %103 = phi [^b1, f32 0] [^b2, f32 %167];
    i1 %104 = icmp slt i32 %102, i32 100000;
    i32 %105 = add i32 %101, i32 1;
    cbr i1 %104(prob = 0.984615), ^super.header2, ^b2;
  ^while.body3:
    f32 %106 = phi [^prebody1, f32 %30] [^while.body3, f32 %148];
    i32 %107 = phi [^prebody1, i32 %29] [^while.body3, i32 %142];
    i32 %108 = add i32 %28, i32 %107;
    i32 %109 = add i32 %32, i32 %107;
    i32 %110 = mul i32 %108, i32 %109;
    i32 %111 = sdiv i32 %110, i32 2;
    i32 %112 = add i32 %107, i32 1;
    i32 %113 = add i32 %111, i32 %112;
    f32 %114 = s2f i32 %113 to f32;
    f32* %115 = getelementptr &(f32* %8)[i32 %107];
    f32 %116 = load f32* %115;
    f32 %117 = fdiv f32 %116, f32 %114;
    f32 %118 = fadd f32 %106, f32 %117;
    i32 %119 = add i32 %94, i32 %107;
    i32 %120 = mul i32 %109, i32 %119;
    i32 %121 = sdiv i32 %120, i32 2;
    i32 %122 = add i32 %107, i32 2;
    i32 %123 = add i32 %121, i32 %122;
    f32 %124 = s2f i32 %123 to f32;
    f32* %125 = getelementptr &(f32* %115)[i64 1];
    f32 %126 = load f32* %125;
    f32 %127 = fdiv f32 %126, f32 %124;
    f32 %128 = fadd f32 %118, f32 %127;
    i32 %129 = add i32 %95, i32 %107;
    i32 %130 = mul i32 %119, i32 %129;
    i32 %131 = sdiv i32 %130, i32 2;
    i32 %132 = add i32 %107, i32 3;
    i32 %133 = add i32 %131, i32 %132;
    f32 %134 = s2f i32 %133 to f32;
    f32* %135 = getelementptr &(f32* %115)[i64 2];
    f32 %136 = load f32* %135;
    f32 %137 = fdiv f32 %136, f32 %134;
    f32 %138 = fadd f32 %128, f32 %137;
    i32 %139 = add i32 %96, i32 %107;
    i32 %140 = mul i32 %129, i32 %139;
    i32 %141 = sdiv i32 %140, i32 2;
    i32 %142 = add i32 %107, i32 4;
    i32 %143 = add i32 %141, i32 %142;
    f32 %144 = s2f i32 %143 to f32;
    f32* %145 = getelementptr &(f32* %115)[i64 3];
    f32 %146 = load f32* %145;
    f32 %147 = fdiv f32 %146, f32 %144;
    f32 %148 = fadd f32 %138, f32 %147;
    i1 %149 = icmp slt i32 %142, i32 99997;
    cbr i1 %149(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^while.body4 {scalar}:
    i32 %150 = phi [^scalar.header1, i32 %98] [^while.body4, i32 %156];
    f32 %151 = phi [^scalar.header1, f32 %97] [^while.body4, f32 %162];
    i32 %152 = add i32 %28, i32 %150;
    i32 %153 = add i32 %32, i32 %150;
    i32 %154 = mul i32 %152, i32 %153;
    i32 %155 = sdiv i32 %154, i32 2;
    i32 %156 = add i32 %150, i32 1;
    i32 %157 = add i32 %155, i32 %156;
    f32 %158 = s2f i32 %157 to f32;
    f32* %159 = getelementptr &(f32* %8)[i32 %150];
    f32 %160 = load f32* %159;
    f32 %161 = fdiv f32 %160, f32 %158;
    f32 %162 = fadd f32 %151, f32 %161;
    i1 %163 = icmp slt i32 %156, i32 100000;
    cbr i1 %163(prob = 0.75), ^while.body4, ^b1;
  ^super.header2:
    i32 %164 = add i32 %102, i32 3;
    i1 %165 = icmp slt i32 %164, i32 100000;
    cbr i1 %165(prob = 0.941176), ^prebody2, ^scalar.header2;
  ^b2:
    i32 %166 = phi [^while.header2, i32 %102] [^scalar.header2, i32 100000] [^while.body6, i32 100000];
    f32 %167 = phi [^while.header2, f32 %103] [^scalar.header2, f32 %175] [^while.body6, f32 %234];
    f32* %168 = getelementptr &(f32* %8)[i32 %101];
    store f32* %168 with f32 %167;
    i1 %169 = icmp slt i32 %105, i32 100000;
    cbr i1 %169(prob = 0.99999), ^while.header2, ^while.header3;
  ^prebody2:
    i32 %170 = add i32 %101, i32 2;
    i32 %171 = add i32 %101, i32 3;
    i32 %172 = add i32 %101, i32 4;
    ubr ^while.body5;
  ^scalar.header2:
    f32 %173 = phi [^super.header2, f32 %103] [^while.body5, f32 %220];
    i32 %174 = phi [^super.header2, i32 %102] [^while.body5, i32 %221];
    f32 %175 = phi [^super.header2, f32 undef] [^while.body5, f32 %220];
    i1 %176 = icmp slt i32 %174, i32 100000;
    cbr i1 %176(prob = 0.75), ^while.body6, ^b2;
  ^while.header3:
    i32 %177 = phi [^b2, i32 0] [^b3, i32 %181];
    i32 %178 = phi [^b2, i32 0] [^b3, i32 %239];
    f32 %179 = phi [^b2, f32 0] [^b3, f32 %240];
    i1 %180 = icmp slt i32 %178, i32 100000;
    i32 %181 = add i32 %177, i32 1;
    cbr i1 %180(prob = 0.984615), ^super.header3, ^b3;
  ^while.body5:
    f32 %182 = phi [^prebody2, f32 %103] [^while.body5, f32 %220];
    i32 %183 = phi [^prebody2, i32 %102] [^while.body5, i32 %221];
    i32 %184 = add i32 %101, i32 %183;
    i32 %185 = add i32 %105, i32 %183;
    i32 %186 = mul i32 %184, i32 %185;
    i32 %187 = sdiv i32 %186, i32 2;
    i32 %188 = add i32 %105, i32 %187;
    f32 %189 = s2f i32 %188 to f32;
    f32* %190 = getelementptr &(f32* %6)[i32 %183];
    f32 %191 = load f32* %190;
    f32 %192 = fdiv f32 %191, f32 %189;
    f32 %193 = fadd f32 %182, f32 %192;
    i32 %194 = add i32 %170, i32 %183;
    i32 %195 = mul i32 %185, i32 %194;
    i32 %196 = sdiv i32 %195, i32 2;
    i32 %197 = add i32 %105, i32 %196;
    f32 %198 = s2f i32 %197 to f32;
    f32* %199 = getelementptr &(f32* %190)[i64 1];
    f32 %200 = load f32* %199;
    f32 %201 = fdiv f32 %200, f32 %198;
    f32 %202 = fadd f32 %193, f32 %201;
    i32 %203 = add i32 %171, i32 %183;
    i32 %204 = mul i32 %194, i32 %203;
    i32 %205 = sdiv i32 %204, i32 2;
    i32 %206 = add i32 %105, i32 %205;
    f32 %207 = s2f i32 %206 to f32;
    f32* %208 = getelementptr &(f32* %190)[i64 2];
    f32 %209 = load f32* %208;
    f32 %210 = fdiv f32 %209, f32 %207;
    f32 %211 = fadd f32 %202, f32 %210;
    i32 %212 = add i32 %172, i32 %183;
    i32 %213 = mul i32 %203, i32 %212;
    i32 %214 = sdiv i32 %213, i32 2;
    i32 %215 = add i32 %105, i32 %214;
    f32 %216 = s2f i32 %215 to f32;
    f32* %217 = getelementptr &(f32* %190)[i64 3];
    f32 %218 = load f32* %217;
    f32 %219 = fdiv f32 %218, f32 %216;
    f32 %220 = fadd f32 %211, f32 %219;
    i32 %221 = add i32 %183, i32 4;
    i1 %222 = icmp slt i32 %221, i32 99997;
    cbr i1 %222(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^while.body6 {scalar}:
    i32 %223 = phi [^scalar.header2, i32 %174] [^while.body6, i32 %235];
    f32 %224 = phi [^scalar.header2, f32 %173] [^while.body6, f32 %234];
    i32 %225 = add i32 %101, i32 %223;
    i32 %226 = add i32 %105, i32 %223;
    i32 %227 = mul i32 %225, i32 %226;
    i32 %228 = sdiv i32 %227, i32 2;
    i32 %229 = add i32 %105, i32 %228;
    f32 %230 = s2f i32 %229 to f32;
    f32* %231 = getelementptr &(f32* %6)[i32 %223];
    f32 %232 = load f32* %231;
    f32 %233 = fdiv f32 %232, f32 %230;
    f32 %234 = fadd f32 %224, f32 %233;
    i32 %235 = add i32 %223, i32 1;
    i1 %236 = icmp slt i32 %235, i32 100000;
    cbr i1 %236(prob = 0.75), ^while.body6, ^b2;
  ^super.header3:
    i32 %237 = add i32 %178, i32 3;
    i1 %238 = icmp slt i32 %237, i32 100000;
    cbr i1 %238(prob = 0.941176), ^prebody3, ^scalar.header3;
  ^b3:
    i32 %239 = phi [^while.header3, i32 %178] [^scalar.header3, i32 100000] [^while.body8, i32 100000];
    f32 %240 = phi [^while.header3, f32 %179] [^scalar.header3, f32 %248] [^while.body8, f32 %308];
    f32* %241 = getelementptr &(f32* %4)[i32 %177];
    store f32* %241 with f32 %240;
    i1 %242 = icmp slt i32 %181, i32 100000;
    cbr i1 %242(prob = 0.99999), ^while.header3, ^b4;
  ^prebody3:
    i32 %243 = add i32 %177, i32 2;
    i32 %244 = add i32 %177, i32 3;
    i32 %245 = add i32 %177, i32 4;
    ubr ^while.body7;
  ^scalar.header3:
    f32 %246 = phi [^super.header3, f32 %179] [^while.body7, f32 %294];
    i32 %247 = phi [^super.header3, i32 %178] [^while.body7, i32 %288];
    f32 %248 = phi [^super.header3, f32 undef] [^while.body7, f32 %294];
    i1 %249 = icmp slt i32 %247, i32 100000;
    cbr i1 %249(prob = 0.75), ^while.body8, ^b3;
  ^b4:
    i32 %250 = add i32 %9, i32 1;
    i1 %251 = icmp slt i32 %250, i32 1000;
    cbr i1 %251(prob = 0.999), ^while.body, ^b5;
  ^while.body7:
    f32 %252 = phi [^prebody3, f32 %179] [^while.body7, f32 %294];
    i32 %253 = phi [^prebody3, i32 %178] [^while.body7, i32 %288];
    i32 %254 = add i32 %177, i32 %253;
    i32 %255 = add i32 %181, i32 %253;
    i32 %256 = mul i32 %254, i32 %255;
    i32 %257 = sdiv i32 %256, i32 2;
    i32 %258 = add i32 %253, i32 1;
    i32 %259 = add i32 %257, i32 %258;
    f32 %260 = s2f i32 %259 to f32;
    f32* %261 = getelementptr &(f32* %8)[i32 %253];
    f32 %262 = load f32* %261;
    f32 %263 = fdiv f32 %262, f32 %260;
    f32 %264 = fadd f32 %252, f32 %263;
    i32 %265 = add i32 %243, i32 %253;
    i32 %266 = mul i32 %255, i32 %265;
    i32 %267 = sdiv i32 %266, i32 2;
    i32 %268 = add i32 %253, i32 2;
    i32 %269 = add i32 %267, i32 %268;
    f32 %270 = s2f i32 %269 to f32;
    f32* %271 = getelementptr &(f32* %261)[i64 1];
    f32 %272 = load f32* %271;
    f32 %273 = fdiv f32 %272, f32 %270;
    f32 %274 = fadd f32 %264, f32 %273;
    i32 %275 = add i32 %244, i32 %253;
    i32 %276 = mul i32 %265, i32 %275;
    i32 %277 = sdiv i32 %276, i32 2;
    i32 %278 = add i32 %253, i32 3;
    i32 %279 = add i32 %277, i32 %278;
    f32 %280 = s2f i32 %279 to f32;
    f32* %281 = getelementptr &(f32* %261)[i64 2];
    f32 %282 = load f32* %281;
    f32 %283 = fdiv f32 %282, f32 %280;
    f32 %284 = fadd f32 %274, f32 %283;
    i32 %285 = add i32 %245, i32 %253;
    i32 %286 = mul i32 %275, i32 %285;
    i32 %287 = sdiv i32 %286, i32 2;
    i32 %288 = add i32 %253, i32 4;
    i32 %289 = add i32 %287, i32 %288;
    f32 %290 = s2f i32 %289 to f32;
    f32* %291 = getelementptr &(f32* %261)[i64 3];
    f32 %292 = load f32* %291;
    f32 %293 = fdiv f32 %292, f32 %290;
    f32 %294 = fadd f32 %284, f32 %293;
    i1 %295 = icmp slt i32 %288, i32 99997;
    cbr i1 %295(prob = 0.941176), ^while.body7, ^scalar.header3;
  ^while.body8 {scalar}:
    i32 %296 = phi [^scalar.header3, i32 %247] [^while.body8, i32 %302];
    f32 %297 = phi [^scalar.header3, f32 %246] [^while.body8, f32 %308];
    i32 %298 = add i32 %177, i32 %296;
    i32 %299 = add i32 %181, i32 %296;
    i32 %300 = mul i32 %298, i32 %299;
    i32 %301 = sdiv i32 %300, i32 2;
    i32 %302 = add i32 %296, i32 1;
    i32 %303 = add i32 %301, i32 %302;
    f32 %304 = s2f i32 %303 to f32;
    f32* %305 = getelementptr &(f32* %8)[i32 %296];
    f32 %306 = load f32* %305;
    f32 %307 = fdiv f32 %306, f32 %304;
    f32 %308 = fadd f32 %297, f32 %307;
    i1 %309 = icmp slt i32 %302, i32 100000;
    cbr i1 %309(prob = 0.75), ^while.body8, ^b3;
  ^b5:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.body9;
  ^while.body9:
    i32 %310 = phi [^b5, i32 0] [^while.body9, i32 %408];
    f32 %311 = phi [^b5, f32 0] [^while.body9, f32 %407];
    f32* %312 = getelementptr &(f32* %4)[i32 %310];
    f32 %313 = load f32* %312;
    f32* %314 = getelementptr &(f32* %6)[i32 %310];
    f32 %315 = load f32* %314;
    f32 %316 = fmul f32 %313, f32 %315;
    f32 %317 = fadd f32 %311, f32 %316;
    f32* %318 = getelementptr &(f32* %312)[i64 1];
    f32 %319 = load f32* %318;
    f32* %320 = getelementptr &(f32* %314)[i64 1];
    f32 %321 = load f32* %320;
    f32 %322 = fmul f32 %319, f32 %321;
    f32 %323 = fadd f32 %317, f32 %322;
    f32* %324 = getelementptr &(f32* %312)[i64 2];
    f32 %325 = load f32* %324;
    f32* %326 = getelementptr &(f32* %314)[i64 2];
    f32 %327 = load f32* %326;
    f32 %328 = fmul f32 %325, f32 %327;
    f32 %329 = fadd f32 %323, f32 %328;
    f32* %330 = getelementptr &(f32* %312)[i64 3];
    f32 %331 = load f32* %330;
    f32* %332 = getelementptr &(f32* %314)[i64 3];
    f32 %333 = load f32* %332;
    f32 %334 = fmul f32 %331, f32 %333;
    f32 %335 = fadd f32 %329, f32 %334;
    f32* %336 = getelementptr &(f32* %312)[i64 4];
    f32 %337 = load f32* %336;
    f32* %338 = getelementptr &(f32* %314)[i64 4];
    f32 %339 = load f32* %338;
    f32 %340 = fmul f32 %337, f32 %339;
    f32 %341 = fadd f32 %335, f32 %340;
    f32* %342 = getelementptr &(f32* %312)[i64 5];
    f32 %343 = load f32* %342;
    f32* %344 = getelementptr &(f32* %314)[i64 5];
    f32 %345 = load f32* %344;
    f32 %346 = fmul f32 %343, f32 %345;
    f32 %347 = fadd f32 %341, f32 %346;
    f32* %348 = getelementptr &(f32* %312)[i64 6];
    f32 %349 = load f32* %348;
    f32* %350 = getelementptr &(f32* %314)[i64 6];
    f32 %351 = load f32* %350;
    f32 %352 = fmul f32 %349, f32 %351;
    f32 %353 = fadd f32 %347, f32 %352;
    f32* %354 = getelementptr &(f32* %312)[i64 7];
    f32 %355 = load f32* %354;
    f32* %356 = getelementptr &(f32* %314)[i64 7];
    f32 %357 = load f32* %356;
    f32 %358 = fmul f32 %355, f32 %357;
    f32 %359 = fadd f32 %353, f32 %358;
    f32* %360 = getelementptr &(f32* %312)[i64 8];
    f32 %361 = load f32* %360;
    f32* %362 = getelementptr &(f32* %314)[i64 8];
    f32 %363 = load f32* %362;
    f32 %364 = fmul f32 %361, f32 %363;
    f32 %365 = fadd f32 %359, f32 %364;
    f32* %366 = getelementptr &(f32* %312)[i64 9];
    f32 %367 = load f32* %366;
    f32* %368 = getelementptr &(f32* %314)[i64 9];
    f32 %369 = load f32* %368;
    f32 %370 = fmul f32 %367, f32 %369;
    f32 %371 = fadd f32 %365, f32 %370;
    f32* %372 = getelementptr &(f32* %312)[i64 10];
    f32 %373 = load f32* %372;
    f32* %374 = getelementptr &(f32* %314)[i64 10];
    f32 %375 = load f32* %374;
    f32 %376 = fmul f32 %373, f32 %375;
    f32 %377 = fadd f32 %371, f32 %376;
    f32* %378 = getelementptr &(f32* %312)[i64 11];
    f32 %379 = load f32* %378;
    f32* %380 = getelementptr &(f32* %314)[i64 11];
    f32 %381 = load f32* %380;
    f32 %382 = fmul f32 %379, f32 %381;
    f32 %383 = fadd f32 %377, f32 %382;
    f32* %384 = getelementptr &(f32* %312)[i64 12];
    f32 %385 = load f32* %384;
    f32* %386 = getelementptr &(f32* %314)[i64 12];
    f32 %387 = load f32* %386;
    f32 %388 = fmul f32 %385, f32 %387;
    f32 %389 = fadd f32 %383, f32 %388;
    f32* %390 = getelementptr &(f32* %312)[i64 13];
    f32 %391 = load f32* %390;
    f32* %392 = getelementptr &(f32* %314)[i64 13];
    f32 %393 = load f32* %392;
    f32 %394 = fmul f32 %391, f32 %393;
    f32 %395 = fadd f32 %389, f32 %394;
    f32* %396 = getelementptr &(f32* %312)[i64 14];
    f32 %397 = load f32* %396;
    f32* %398 = getelementptr &(f32* %314)[i64 14];
    f32 %399 = load f32* %398;
    f32 %400 = fmul f32 %397, f32 %399;
    f32 %401 = fadd f32 %395, f32 %400;
    f32* %402 = getelementptr &(f32* %312)[i64 15];
    f32 %403 = load f32* %402;
    f32* %404 = getelementptr &(f32* %314)[i64 15];
    f32 %405 = load f32* %404;
    f32 %406 = fmul f32 %403, f32 %405;
    f32 %407 = fadd f32 %401, f32 %406;
    i32 %408 = add i32 %310, i32 16;
    i1 %409 = icmp slt i32 %408, i32 100000;
    cbr i1 %409(prob = 0.99984), ^while.body9, ^while.body10;
  ^while.body10:
    i32 %410 = phi [^while.body9, i32 0] [^while.body10, i32 %476];
    f32 %411 = phi [^while.body9, f32 0] [^while.body10, f32 %475];
    f32* %412 = getelementptr &(f32* %6)[i32 %410];
    f32 %413 = load f32* %412;
    f32 %414 = fmul f32 %413, f32 %413;
    f32 %415 = fadd f32 %411, f32 %414;
    f32* %416 = getelementptr &(f32* %412)[i64 1];
    f32 %417 = load f32* %416;
    f32 %418 = fmul f32 %417, f32 %417;
    f32 %419 = fadd f32 %415, f32 %418;
    f32* %420 = getelementptr &(f32* %412)[i64 2];
    f32 %421 = load f32* %420;
    f32 %422 = fmul f32 %421, f32 %421;
    f32 %423 = fadd f32 %419, f32 %422;
    f32* %424 = getelementptr &(f32* %412)[i64 3];
    f32 %425 = load f32* %424;
    f32 %426 = fmul f32 %425, f32 %425;
    f32 %427 = fadd f32 %423, f32 %426;
    f32* %428 = getelementptr &(f32* %412)[i64 4];
    f32 %429 = load f32* %428;
    f32 %430 = fmul f32 %429, f32 %429;
    f32 %431 = fadd f32 %427, f32 %430;
    f32* %432 = getelementptr &(f32* %412)[i64 5];
    f32 %433 = load f32* %432;
    f32 %434 = fmul f32 %433, f32 %433;
    f32 %435 = fadd f32 %431, f32 %434;
    f32* %436 = getelementptr &(f32* %412)[i64 6];
    f32 %437 = load f32* %436;
    f32 %438 = fmul f32 %437, f32 %437;
    f32 %439 = fadd f32 %435, f32 %438;
    f32* %440 = getelementptr &(f32* %412)[i64 7];
    f32 %441 = load f32* %440;
    f32 %442 = fmul f32 %441, f32 %441;
    f32 %443 = fadd f32 %439, f32 %442;
    f32* %444 = getelementptr &(f32* %412)[i64 8];
    f32 %445 = load f32* %444;
    f32 %446 = fmul f32 %445, f32 %445;
    f32 %447 = fadd f32 %443, f32 %446;
    f32* %448 = getelementptr &(f32* %412)[i64 9];
    f32 %449 = load f32* %448;
    f32 %450 = fmul f32 %449, f32 %449;
    f32 %451 = fadd f32 %447, f32 %450;
    f32* %452 = getelementptr &(f32* %412)[i64 10];
    f32 %453 = load f32* %452;
    f32 %454 = fmul f32 %453, f32 %453;
    f32 %455 = fadd f32 %451, f32 %454;
    f32* %456 = getelementptr &(f32* %412)[i64 11];
    f32 %457 = load f32* %456;
    f32 %458 = fmul f32 %457, f32 %457;
    f32 %459 = fadd f32 %455, f32 %458;
    f32* %460 = getelementptr &(f32* %412)[i64 12];
    f32 %461 = load f32* %460;
    f32 %462 = fmul f32 %461, f32 %461;
    f32 %463 = fadd f32 %459, f32 %462;
    f32* %464 = getelementptr &(f32* %412)[i64 13];
    f32 %465 = load f32* %464;
    f32 %466 = fmul f32 %465, f32 %465;
    f32 %467 = fadd f32 %463, f32 %466;
    f32* %468 = getelementptr &(f32* %412)[i64 14];
    f32 %469 = load f32* %468;
    f32 %470 = fmul f32 %469, f32 %469;
    f32 %471 = fadd f32 %467, f32 %470;
    f32* %472 = getelementptr &(f32* %412)[i64 15];
    f32 %473 = load f32* %472;
    f32 %474 = fmul f32 %473, f32 %473;
    f32 %475 = fadd f32 %471, f32 %474;
    i32 %476 = add i32 %410, i32 16;
    i1 %477 = icmp slt i32 %476, i32 100000;
    cbr i1 %477(prob = 0.99984), ^while.body10, ^b6;
  ^b6:
    f32 %478 = fdiv f32 %407, f32 %475;
    f32 %479 = fsub f32 1, f32 %478;
    i1 %480 = fcmp ogt f32 %479, f32 1e-06;
    i1 %481 = fcmp olt f32 %479, f32 -1e-06;
    i1 %482 = or i1 %480, i1 %481;
    cbr i1 %482(prob = 0.992308), ^while.body11, ^b7;
  ^while.body11:
    f32 %483 = phi [^b6, f32 %478] [^while.body11, f32 %487];
    f32 %484 = phi [^b6, f32 1] [^while.body11, f32 %486];
    f32 %485 = fadd f32 %484, f32 %483;
    f32 %486 = fmul f32 %485, f32 0.5;
    f32 %487 = fdiv f32 %478, f32 %486;
    f32 %488 = fsub f32 %486, f32 %487;
    i1 %489 = fcmp ogt f32 %488, f32 1e-06;
    i1 %490 = fcmp olt f32 %488, f32 -1e-06;
    i1 %491 = or i1 %489, i1 %490;
    cbr i1 %491(prob = 0.992308), ^while.body11, ^b7;
  ^b7:
    f32 %492 = phi [^b6, f32 1] [^while.body11, f32 %486];
    f32 %493 = fsub f32 %492, f32 1;
    i1 %494 = fcmp ole f32 %493, f32 1e-06;
    i1 %495 = fcmp oge f32 %493, f32 -1e-06;
    i1 %496 = and i1 %494, i1 %495;
    i32 %497 = zext i1 %496 to i32;
    call (i32) -> void @putint(i32 %497);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [8 * i8]* %4 = ptrcast [8 * i8]* @cmmc_parallel_body_payload_0 to [8 * i8]*;
    [100000 * f32]** %5 = ptradd [8 * i8]* %4, i32 0;
    [100000 * f32]* %6 = load [100000 * f32]** %5;
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %7 = add i32 %0, i32 15;
    i32 %8 = add i32 %1, i32 -3;
    i1 %9 = icmp slt i32 %7, i32 %8;
    i32 %10 = add i32 %1, i32 -18;
    cbr i1 %9(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %11 = phi [^b, i32 %0] [^scalar.header1, i32 %33] [^b3, i32 %44];
    i1 %12 = icmp sgt i32 %1, i32 %11;
    cbr i1 %12(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %13 = phi [^super.header, i32 %0] [^b1, i32 %30];
    f32* %14 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %13];
    store f32* %14 with f32 1;
    f32* %15 = getelementptr &(f32* %14)[i64 1];
    store f32* %15 with f32 1;
    f32* %16 = getelementptr &(f32* %14)[i64 2];
    store f32* %16 with f32 1;
    f32* %17 = getelementptr &(f32* %14)[i64 3];
    store f32* %17 with f32 1;
    f32* %18 = getelementptr &(f32* %14)[i64 4];
    store f32* %18 with f32 1;
    f32* %19 = getelementptr &(f32* %14)[i64 5];
    store f32* %19 with f32 1;
    f32* %20 = getelementptr &(f32* %14)[i64 6];
    store f32* %20 with f32 1;
    f32* %21 = getelementptr &(f32* %14)[i64 7];
    store f32* %21 with f32 1;
    f32* %22 = getelementptr &(f32* %14)[i64 8];
    store f32* %22 with f32 1;
    f32* %23 = getelementptr &(f32* %14)[i64 9];
    store f32* %23 with f32 1;
    f32* %24 = getelementptr &(f32* %14)[i64 10];
    store f32* %24 with f32 1;
    f32* %25 = getelementptr &(f32* %14)[i64 11];
    store f32* %25 with f32 1;
    f32* %26 = getelementptr &(f32* %14)[i64 12];
    store f32* %26 with f32 1;
    f32* %27 = getelementptr &(f32* %14)[i64 13];
    store f32* %27 with f32 1;
    f32* %28 = getelementptr &(f32* %14)[i64 14];
    store f32* %28 with f32 1;
    f32* %29 = getelementptr &(f32* %14)[i64 15];
    store f32* %29 with f32 1;
    i32 %30 = add i32 %13, i32 16;
    i1 %31 = icmp sgt i32 %10, i32 %30;
    cbr i1 %31(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %32 = phi [^super.header, i32 %0] [^b1, i32 %30];
    i32 %33 = phi [^super.header, i32 undef] [^b1, i32 %30];
    i1 %34 = icmp sgt i32 %8, i32 %32;
    cbr i1 %34(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %35 = phi [^scalar.header, i32 %11] [^b2, i32 %37];
    f32* %36 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %35];
    store f32* %36 with f32 1;
    i32 %37 = add i32 %35, i32 1;
    i1 %38 = icmp sgt i32 %1, i32 %37;
    cbr i1 %38(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %39 = phi [^scalar.header1, i32 %32] [^b3, i32 %44];
    f32* %40 = getelementptr &([100000 * f32]* %6)[i64 0][i32 %39];
    store f32* %40 with f32 1;
    f32* %41 = getelementptr &(f32* %40)[i64 1];
    store f32* %41 with f32 1;
    f32* %42 = getelementptr &(f32* %40)[i64 2];
    store f32* %42 with f32 1;
    f32* %43 = getelementptr &(f32* %40)[i64 3];
    store f32* %43 with f32 1;
    i32 %44 = add i32 %39, i32 4;
    i1 %45 = icmp sgt i32 %8, i32 %44;
    cbr i1 %45(prob = 0.75), ^b3, ^scalar.header;
}
internal [8 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal [100000 * f32]* @Vectortm, align 8;
internal [100000 * f32]* @vectorB, align 8;
internal [100000 * f32]* @vectorA, align 8;
