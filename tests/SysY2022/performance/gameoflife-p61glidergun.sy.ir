internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %steps = alloc i32;
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %width with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %height with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %steps with i32 %2;
    i32 %3 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %12] [^entry, i32 1];
    i32 %5 = phi [^b, i32 %13] [^entry, i32 %0];
    i32 %6 = phi [^b, i32 %14] [^entry, i32 %1];
    i32 %7 = phi [^b, i32 %15] [^entry, i32 %2];
    i32 %8 = phi [^b, i32 %20] [^entry, i32 1];
    i1 %9 = scmp le i32 %8, i32 %6;
    cbr i1 %9(prob = 0.97), ^while.header1, ^entry1;
^entry1:
    call (i32) -> void @starttime(i32 95);
    [500 * i32]* %10 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %11 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %12 = phi [^while.header, i32 %4] [^b2, i32 %12];
    i32 %13 = phi [^while.header, i32 %5] [^b2, i32 %13];
    i32 %14 = phi [^while.header, i32 %6] [^b2, i32 %14];
    i32 %15 = phi [^while.header, i32 %7] [^b2, i32 %15];
    i32 %16 = phi [^while.header, i32 %8] [^b2, i32 %16];
    i32 %17 = phi [^while.header, i32 1] [^b2, i32 %34];
    i1 %18 = scmp le i32 %17, i32 %13;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
^b:
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %16, i32 1;
    ubr ^while.header;
^while.body:
    i32 %21 = call () -> i32 @getch();
    i1 %22 = scmp eq i32 %21, i32 35;
    cbr i1 %22(prob = 0.5), ^if.then, ^if.else;
^while.header2:
    i32 %23 = phi [^b3, i32 %64] [^entry1, i32 %4];
    i32 %24 = phi [^b3, i32 %65] [^entry1, i32 %5];
    i32 %25 = phi [^b3, i32 %66] [^entry1, i32 %6];
    i32 %26 = phi [^b3, i32 %68] [^entry1, i32 %7];
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b1;
^if.then:
    [500 * i32]* %28 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %16];
    i32* %29 = getelementptr &([500 * i32]* %28)[i64 0][i32 %17];
    store i32* %29 with i32 1;
    ubr ^b2;
^if.else:
    [500 * i32]* %30 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %16];
    i32* %31 = getelementptr &([500 * i32]* %30)[i64 0][i32 %17];
    store i32* %31 with i32 0;
    ubr ^b2;
^while.body1:
    i1 %32 = scmp eq i32 %23, i32 1;
    cbr i1 %32(prob = 0.5), ^entry2, ^entry3;
^b1:
    call (i32) -> void @stoptime(i32 106);
    i1 %33 = scmp eq i32 %23, i32 2;
    cbr i1 %33(prob = 0.5), ^while.header3, ^entry4;
^b2:
    i32 %34 = add i32 %17, i32 1;
    ubr ^while.header1;
^entry2:
    store i32* %j1 with i32 1;
    ubr ^while.header4;
^entry3:
    store i32* %j with i32 1;
    ubr ^while.header5;
^entry4:
    i32 %35 = phi [^while.header3, i32 %37] [^b1, i32 %24];
    i32 %36 = phi [^while.header3, i32 %38] [^b1, i32 %25];
    ubr ^while.header7;
^while.header3:
    i32 %37 = phi [^b1, i32 %24] [^b4, i32 %55];
    i32 %38 = phi [^b1, i32 %25] [^b4, i32 %56];
    i32 %39 = phi [^b1, i32 1] [^b4, i32 %75];
    i1 %40 = scmp le i32 %39, i32 %38;
    cbr i1 %40(prob = 0.97), ^while.header6, ^entry4;
^while.header4:
    i32 %41 = phi [^b7, i32 %81] [^entry2, i32 %24];
    i32 %42 = phi [^b7, i32 %82] [^entry2, i32 %25];
    i32 %43 = phi [^b7, i32 %83] [^entry2, i32 %26];
    i32 %44 = phi [^b7, i32 %102] [^entry2, i32 1];
    [500 * i32]* %45 = phi [^b7, [500 * i32]* %86] [^entry2, [500 * i32]* %11];
    [500 * i32]* %46 = phi [^b7, [500 * i32]* %87] [^entry2, [500 * i32]* %10];
    i1 %47 = scmp le i32 %44, i32 %42;
    cbr i1 %47(prob = 0.97), ^while.body2, ^b3;
^while.header5:
    i32 %48 = phi [^b8, i32 %89] [^entry3, i32 %24];
    i32 %49 = phi [^b8, i32 %90] [^entry3, i32 %25];
    i32 %50 = phi [^b8, i32 %91] [^entry3, i32 %26];
    i32 %51 = phi [^b8, i32 %134] [^entry3, i32 1];
    [500 * i32]* %52 = phi [^b8, [500 * i32]* %94] [^entry3, [500 * i32]* %10];
    [500 * i32]* %53 = phi [^b8, [500 * i32]* %95] [^entry3, [500 * i32]* %11];
    i1 %54 = scmp le i32 %51, i32 %49;
    cbr i1 %54(prob = 0.97), ^while.body3, ^b3;
^while.header6:
    i32 %55 = phi [^while.header3, i32 %37] [^while.body4, i32 %55];
    i32 %56 = phi [^while.header3, i32 %38] [^while.body4, i32 %56];
    i32 %57 = phi [^while.header3, i32 %39] [^while.body4, i32 %57];
    i32 %58 = phi [^while.header3, i32 1] [^while.body4, i32 %74];
    i1 %59 = scmp le i32 %58, i32 %55;
    cbr i1 %59(prob = 0.97), ^while.body4, ^b4;
^while.header7:
    i32 %60 = phi [^b6, i32 %76] [^entry4, i32 %35];
    i32 %61 = phi [^b6, i32 %77] [^entry4, i32 %36];
    i32 %62 = phi [^b6, i32 %97] [^entry4, i32 1];
    i1 %63 = scmp le i32 %62, i32 %61;
    cbr i1 %63(prob = 0.97), ^while.header8, ^b5;
^while.body2:
    store i32* %i1 with i32 1;
    ubr ^while.header9;
^while.body3:
    store i32* %i with i32 1;
    ubr ^while.header10;
^b3:
    i32 %64 = phi [^while.header5, i32 1] [^while.header4, i32 2];
    i32 %65 = phi [^while.header5, i32 %48] [^while.header4, i32 %41];
    i32 %66 = phi [^while.header5, i32 %49] [^while.header4, i32 %42];
    i32 %67 = phi [^while.header5, i32 %50] [^while.header4, i32 %43];
    i32 %68 = add i32 %67, i32 -1;
    store i32* %steps with i32 %68;
    ubr ^while.header2;
^while.body4:
    [500 * i32]* %69 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %57];
    i32* %70 = getelementptr &([500 * i32]* %69)[i64 0][i32 %58];
    [500 * i32]* %71 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %57];
    i32* %72 = getelementptr &([500 * i32]* %71)[i64 0][i32 %58];
    i32 %73 = load i32* %72;
    store i32* %70 with i32 %73;
    i32 %74 = add i32 %58, i32 1;
    ubr ^while.header6;
^b4:
    i32 %75 = add i32 %57, i32 1;
    ubr ^while.header3;
^while.header8:
    i32 %76 = phi [^while.header7, i32 %60] [^b11, i32 %76];
    i32 %77 = phi [^while.header7, i32 %61] [^b11, i32 %77];
    i32 %78 = phi [^while.header7, i32 %62] [^b11, i32 %78];
    i32 %79 = phi [^while.header7, i32 1] [^b11, i32 %168];
    i1 %80 = scmp le i32 %79, i32 %76;
    cbr i1 %80(prob = 0.97), ^while.body5, ^b6;
^b5:
    ret i32 0;
^while.header9:
    i32 %81 = phi [^b14, i32 %187] [^while.body2, i32 %41];
    i32 %82 = phi [^b14, i32 %188] [^while.body2, i32 %42];
    i32 %83 = phi [^b14, i32 %189] [^while.body2, i32 %43];
    i32 %84 = phi [^b14, i32 %190] [^while.body2, i32 %44];
    i32 %85 = phi [^b14, i32 %192] [^while.body2, i32 1];
    [500 * i32]* %86 = phi [^b14, [500 * i32]* %86] [^while.body2, [500 * i32]* %45];
    [500 * i32]* %87 = phi [^b14, [500 * i32]* %87] [^while.body2, [500 * i32]* %46];
    i1 %88 = scmp le i32 %85, i32 %81;
    cbr i1 %88(prob = 0.97), ^while.body6, ^b7;
^while.header10:
    i32 %89 = phi [^b15, i32 %193] [^while.body3, i32 %48];
    i32 %90 = phi [^b15, i32 %194] [^while.body3, i32 %49];
    i32 %91 = phi [^b15, i32 %195] [^while.body3, i32 %50];
    i32 %92 = phi [^b15, i32 %196] [^while.body3, i32 %51];
    i32 %93 = phi [^b15, i32 %198] [^while.body3, i32 1];
    [500 * i32]* %94 = phi [^b15, [500 * i32]* %94] [^while.body3, [500 * i32]* %52];
    [500 * i32]* %95 = phi [^b15, [500 * i32]* %95] [^while.body3, [500 * i32]* %53];
    i1 %96 = scmp le i32 %93, i32 %89;
    cbr i1 %96(prob = 0.97), ^while.body7, ^b8;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %97 = add i32 %78, i32 1;
    ubr ^while.header7;
^while.body5:
    [500 * i32]* %98 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %78];
    i32* %99 = getelementptr &([500 * i32]* %98)[i64 0][i32 %79];
    i32 %100 = load i32* %99;
    i1 %101 = scmp eq i32 %100, i32 1;
    cbr i1 %101(prob = 0.5), ^if.then1, ^if.else1;
^b7:
    i32 %102 = add i32 %84, i32 1;
    store i32* %j1 with i32 %102;
    ubr ^while.header4;
^while.body6:
    i32 %103 = add i32 %84, i32 -1;
    [500 * i32]* %104 = getelementptr &([500 * i32]* %87)[i32 %103];
    i32 %105 = add i32 %85, i32 -1;
    i32* %106 = getelementptr &([500 * i32]* %104)[i64 0][i32 %105];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &([500 * i32]* %104)[i64 0][i32 %85];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %108)[i64 1];
    i32 %111 = load i32* %110;
    [500 * i32]* %112 = getelementptr &([500 * i32]* %87)[i32 %84];
    i32* %113 = getelementptr &([500 * i32]* %112)[i64 0][i32 %105];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %113)[i64 2];
    i32 %116 = load i32* %115;
    [500 * i32]* %117 = getelementptr &([500 * i32]* %112)[i64 1];
    i32* %118 = getelementptr &([500 * i32]* %117)[i64 0][i32 %105];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &([500 * i32]* %117)[i64 0][i32 %85];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %120)[i64 1];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %107, i32 %109;
    i32 %125 = add i32 %124, i32 %111;
    i32 %126 = add i32 %125, i32 %114;
    i32 %127 = add i32 %126, i32 %116;
    i32 %128 = add i32 %127, i32 %119;
    i32 %129 = add i32 %128, i32 %121;
    i32 %130 = add i32 %129, i32 %123;
    i32* %131 = getelementptr &([500 * i32]* %112)[i64 0][i32 %85];
    i32 %132 = load i32* %131;
    i1 %133 = scmp eq i32 %132, i32 1;
    cbr i1 %133(prob = 0.5), ^b9, ^b12;
^b8:
    i32 %134 = add i32 %92, i32 1;
    store i32* %j with i32 %134;
    ubr ^while.header5;
^if.then1:
    call (i32) -> void @putch(i32 35);
    ubr ^b11;
^while.body7:
    i32 %135 = add i32 %92, i32 -1;
    [500 * i32]* %136 = getelementptr &([500 * i32]* %95)[i32 %135];
    i32 %137 = add i32 %93, i32 -1;
    i32* %138 = getelementptr &([500 * i32]* %136)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &([500 * i32]* %136)[i64 0][i32 %93];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %140)[i64 1];
    i32 %143 = load i32* %142;
    [500 * i32]* %144 = getelementptr &([500 * i32]* %95)[i32 %92];
    i32* %145 = getelementptr &([500 * i32]* %144)[i64 0][i32 %137];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %145)[i64 2];
    i32 %148 = load i32* %147;
    [500 * i32]* %149 = getelementptr &([500 * i32]* %144)[i64 1];
    i32* %150 = getelementptr &([500 * i32]* %149)[i64 0][i32 %137];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &([500 * i32]* %149)[i64 0][i32 %93];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %152)[i64 1];
    i32 %155 = load i32* %154;
    i32 %156 = add i32 %139, i32 %141;
    i32 %157 = add i32 %156, i32 %143;
    i32 %158 = add i32 %157, i32 %146;
    i32 %159 = add i32 %158, i32 %148;
    i32 %160 = add i32 %159, i32 %151;
    i32 %161 = add i32 %160, i32 %153;
    i32 %162 = add i32 %161, i32 %155;
    i32* %163 = getelementptr &([500 * i32]* %144)[i64 0][i32 %93];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %164, i32 1;
    cbr i1 %165(prob = 0.5), ^b10, ^b13;
^if.else1:
    call (i32) -> void @putch(i32 46);
    ubr ^b11;
^b9:
    i1 %166 = scmp eq i32 %130, i32 2;
    ubr ^b12;
^b10:
    i1 %167 = scmp eq i32 %162, i32 2;
    ubr ^b13;
^b11:
    i32 %168 = add i32 %79, i32 1;
    ubr ^while.header8;
^b12:
    i1 %169 = phi [^while.body6, i1 false] [^b9, i1 %166];
    cbr i1 %169(prob = 0.5), ^if.then2, ^if.else2;
^b13:
    i1 %170 = phi [^b10, i1 %167] [^while.body7, i1 false];
    cbr i1 %170(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    [500 * i32]* %171 = getelementptr &([500 * i32]* %86)[i32 %84];
    i32* %172 = getelementptr &([500 * i32]* %171)[i64 0][i32 %85];
    store i32* %172 with i32 1;
    i32 %173 = load i32* %width;
    i32 %174 = load i32* %height;
    i32 %175 = load i32* %steps;
    i32 %176 = load i32* %j1;
    i32 %177 = load i32* %i1;
    ubr ^b14;
^if.then3:
    [500 * i32]* %178 = getelementptr &([500 * i32]* %94)[i32 %92];
    i32* %179 = getelementptr &([500 * i32]* %178)[i64 0][i32 %93];
    store i32* %179 with i32 1;
    i32 %180 = load i32* %width;
    i32 %181 = load i32* %height;
    i32 %182 = load i32* %steps;
    i32 %183 = load i32* %j;
    i32 %184 = load i32* %i;
    ubr ^b15;
^if.else2:
    i1 %185 = scmp eq i32 %130, i32 3;
    cbr i1 %185(prob = 0.5), ^if.then2, ^if.else4;
^if.else3:
    i1 %186 = scmp eq i32 %162, i32 3;
    cbr i1 %186(prob = 0.5), ^if.then3, ^if.else5;
^b14:
    i32 %187 = phi [^if.else4, i32 %201] [^if.then2, i32 %173];
    i32 %188 = phi [^if.else4, i32 %202] [^if.then2, i32 %174];
    i32 %189 = phi [^if.else4, i32 %203] [^if.then2, i32 %175];
    i32 %190 = phi [^if.else4, i32 %204] [^if.then2, i32 %176];
    i32 %191 = phi [^if.else4, i32 %205] [^if.then2, i32 %177];
    i32 %192 = add i32 %191, i32 1;
    store i32* %i1 with i32 %192;
    ubr ^while.header9;
^b15:
    i32 %193 = phi [^if.else5, i32 %208] [^if.then3, i32 %180];
    i32 %194 = phi [^if.else5, i32 %209] [^if.then3, i32 %181];
    i32 %195 = phi [^if.else5, i32 %210] [^if.then3, i32 %182];
    i32 %196 = phi [^if.else5, i32 %211] [^if.then3, i32 %183];
    i32 %197 = phi [^if.else5, i32 %212] [^if.then3, i32 %184];
    i32 %198 = add i32 %197, i32 1;
    store i32* %i with i32 %198;
    ubr ^while.header10;
^if.else4:
    [500 * i32]* %199 = getelementptr &([500 * i32]* %86)[i32 %84];
    i32* %200 = getelementptr &([500 * i32]* %199)[i64 0][i32 %85];
    store i32* %200 with i32 0;
    i32 %201 = load i32* %width;
    i32 %202 = load i32* %height;
    i32 %203 = load i32* %steps;
    i32 %204 = load i32* %j1;
    i32 %205 = load i32* %i1;
    ubr ^b14;
^if.else5:
    [500 * i32]* %206 = getelementptr &([500 * i32]* %94)[i32 %92];
    i32* %207 = getelementptr &([500 * i32]* %206)[i64 0][i32 %93];
    store i32* %207 with i32 0;
    i32 %208 = load i32* %width;
    i32 %209 = load i32* %height;
    i32 %210 = load i32* %steps;
    i32 %211 = load i32* %j;
    i32 %212 = load i32* %i;
    ubr ^b15;
}
