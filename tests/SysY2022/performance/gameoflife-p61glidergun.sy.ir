internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getch();
    i1 %4 = scmp gt i32 %1, i32 0;
    i1 %5 = scmp gt i32 %0, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %10];
    cbr i1 %5(prob = 0.97), ^indirect, ^b;
^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %7 = scmp gt i32 %2, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b1;
^indirect:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %6];
    ubr ^while.body2;
^b:
    i32 %9 = call () -> i32 @getch();
    i32 %10 = add i32 %6, i32 1;
    i1 %11 = scmp le i32 %10, i32 %1;
    cbr i1 %11(prob = 0.97), ^while.body, ^entry1;
^while.body1:
    i32 %12 = phi [^entry1, i32 %2] [^while.body4, i32 %36];
    i32 %13 = phi [^entry1, i32 1] [^while.body4, i32 %17];
    i1 %14 = scmp eq i32 %13, i32 1;
    [500 * [500 * i32]]* %15 = select i1 %14 ? [500 * [500 * i32]]* @sheet1 : [500 * [500 * i32]]* @sheet2;
    [500 * [500 * i32]]* %16 = select i1 %14 ? [500 * [500 * i32]]* @sheet2 : [500 * [500 * i32]]* @sheet1;
    i32 %17 = select i1 %14 ? i32 2 : i32 1;
    [500 * i32]* %18 = getelementptr &([500 * [500 * i32]]* %15)[i64 0][i64 0];
    [500 * i32]* %19 = getelementptr &([500 * [500 * i32]]* %16)[i64 0][i64 0];
    cbr i1 %4(prob = 0.97), ^while.body3, ^while.body4;
^b1:
    i32 %20 = phi [^entry1, i32 1] [^while.body4, i32 %17];
    call (i32) -> void @stoptime(i32 106);
    i1 %21 = scmp eq i32 %20, i32 2;
    i1 %22 = and i1 %4, i1 %21;
    cbr i1 %22(prob = 0.48), ^while.body5, ^entry2;
^while.body2:
    i32 %23 = phi [^indirect, i32 1] [^while.body2, i32 %28];
    i32 %24 = call () -> i32 @getch();
    i1 %25 = scmp eq i32 %24, i32 35;
    i32* %26 = getelementptr &([500 * i32]* %8)[i64 0][i32 %23];
    i32 %27 = zext i1 %25 to i32;
    store i32* %26 with i32 %27;
    i32 %28 = add i32 %23, i32 1;
    i1 %29 = scmp le i32 %28, i32 %0;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b;
^while.body3:
    i32 %30 = phi [^while.body1, i32 1] [^b2, i32 %69];
    i32 %31 = add i32 %30, i32 -1;
    [500 * i32]* %32 = getelementptr &([500 * i32]* %18)[i32 %31];
    [500 * i32]* %33 = getelementptr &([500 * i32]* %18)[i32 %30];
    [500 * i32]* %34 = getelementptr &([500 * i32]* %33)[i64 1];
    [500 * i32]* %35 = getelementptr &([500 * i32]* %19)[i32 %30];
    cbr i1 %5(prob = 0.97), ^while.body6, ^b2;
^while.body4:
    i32 %36 = add i32 %12, i32 -1;
    i1 %37 = scmp gt i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body1, ^b1;
^while.body5:
    i32 %38 = phi [^b1, i32 1] [^b3, i32 %72];
    cbr i1 %5(prob = 0.97), ^indirect1, ^b3;
^entry2:
    cbr i1 %4(prob = 0.97), ^while.body7, ^b4;
^indirect1:
    [500 * i32]* %39 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %38];
    [500 * i32]* %40 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %38];
    ubr ^while.body8;
^while.body6:
    i32 %41 = phi [^while.body3, i32 1] [^b8, i32 %96];
    i32 %42 = add i32 %41, i32 -1;
    i32* %43 = getelementptr &([500 * i32]* %32)[i64 0][i32 %42];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &([500 * i32]* %32)[i64 0][i32 %41];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %45)[i64 1];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([500 * i32]* %33)[i64 0][i32 %42];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %49)[i64 2];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([500 * i32]* %34)[i64 0][i32 %42];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &([500 * i32]* %34)[i64 0][i32 %41];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %55)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %44, i32 %46;
    i32* %60 = getelementptr &([500 * i32]* %33)[i64 0][i32 %41];
    i32 %61 = add i32 %59, i32 %48;
    i32 %62 = add i32 %61, i32 %50;
    i32 %63 = add i32 %62, i32 %52;
    i32 %64 = add i32 %63, i32 %54;
    i32 %65 = add i32 %64, i32 %56;
    i32 %66 = add i32 %65, i32 %58;
    i32 %67 = load i32* %60;
    i1 %68 = scmp eq i32 %67, i32 1;
    cbr i1 %68(prob = 0.5), ^b5, ^b6;
^b2:
    i32 %69 = add i32 %30, i32 1;
    i1 %70 = scmp le i32 %69, i32 %1;
    cbr i1 %70(prob = 0.97), ^while.body3, ^while.body4;
^while.body7:
    i32 %71 = phi [^entry2, i32 1] [^b7, i32 %83];
    cbr i1 %5(prob = 0.97), ^indirect2, ^b7;
^b3:
    i32 %72 = add i32 %38, i32 1;
    i1 %73 = scmp le i32 %72, i32 %1;
    cbr i1 %73(prob = 0.97), ^while.body5, ^entry2;
^b4:
    ret i32 0;
^b5:
    i1 %74 = scmp eq i32 %66, i32 2;
    ubr ^b6;
^indirect2:
    [500 * i32]* %75 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %71];
    ubr ^while.body9;
^b6:
    i1 %76 = phi [^while.body6, i1 false] [^b5, i1 %74];
    cbr i1 %76(prob = 0.5), ^if.then, ^if.else;
^while.body8:
    i32 %77 = phi [^indirect1, i32 1] [^while.body8, i32 %81];
    i32* %78 = getelementptr &([500 * i32]* %39)[i64 0][i32 %77];
    i32* %79 = getelementptr &([500 * i32]* %40)[i64 0][i32 %77];
    i32 %80 = load i32* %79;
    store i32* %78 with i32 %80;
    i32 %81 = add i32 %77, i32 1;
    i1 %82 = scmp le i32 %81, i32 %0;
    cbr i1 %82(prob = 0.97), ^while.body8, ^b3;
^b7:
    call (i32) -> void @putch(i32 10);
    i32 %83 = add i32 %71, i32 1;
    i1 %84 = scmp le i32 %83, i32 %1;
    cbr i1 %84(prob = 0.97), ^while.body7, ^b4;
^if.then:
    i32* %85 = getelementptr &([500 * i32]* %35)[i64 0][i32 %41];
    store i32* %85 with i32 1;
    ubr ^b8;
^if.else:
    i1 %86 = scmp eq i32 %66, i32 3;
    i32* %87 = getelementptr &([500 * i32]* %35)[i64 0][i32 %41];
    i32 %88 = zext i1 %86 to i32;
    store i32* %87 with i32 %88;
    ubr ^b8;
^while.body9:
    i32 %89 = phi [^indirect2, i32 1] [^while.body9, i32 %94];
    i32* %90 = getelementptr &([500 * i32]* %75)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i1 %92 = scmp eq i32 %91, i32 1;
    i32 %93 = select i1 %92 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %93);
    i32 %94 = add i32 %89, i32 1;
    i1 %95 = scmp le i32 %94, i32 %0;
    cbr i1 %95(prob = 0.97), ^while.body9, ^b7;
^b8:
    i32 %96 = add i32 %41, i32 1;
    i1 %97 = scmp le i32 %96, i32 %0;
    cbr i1 %97(prob = 0.97), ^while.body6, ^b2;
}
