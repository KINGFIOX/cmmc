internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
internal i32* @width, align 4;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = ptrcast i32* @width to i32*;
    store i32* %1 with i32 %0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = add i32 %2, i32 1;
    i1 %4 = icmp sgt i32 %2, i32 0;
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getch();
    [4 * i8]* %7 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_2 to [4 * i8]*;
    i32* %8 = ptradd [4 * i8]* %7, i32 0;
    [4 * i8]* %9 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %10 = ptradd [4 * i8]* %9, i32 0;
    [500 * [500 * i32]]* %11 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    i8* %12 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    i8* %13 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    cbr i1 %4(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %14 = phi [^entry, i32 %0] [^indirect1, i32 %30];
    i32 %15 = phi [^entry, i32 1] [^indirect1, i32 %22];
    i1 %16 = icmp sgt i32 %14, i32 0;
    cbr i1 %16(prob = 0.984615), ^indirect, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 95);
    i1 %17 = icmp sgt i32 %5, i32 0;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b2;
  ^indirect:
    [500 * i32]* %18 = getelementptr &([500 * [500 * i32]]* %11)[i64 0][i32 %15];
    i32 %19 = load i32* %1;
    i32 %20 = add i32 %19, i32 1;
    ubr ^while.body2;
  ^b1:
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %15, i32 1;
    i1 %23 = icmp sge i32 %2, i32 %22;
    cbr i1 %23(prob = 0.984615), ^indirect1, ^b;
  ^while.body1:
    i32 %24 = phi [^b, i32 %5] [^b7, i32 %42];
    i32 %25 = phi [^b, i32 1] [^b7, i32 %41];
    i1 %26 = icmp eq i32 %25, i32 1;
    cbr i1 %26(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32 %27 = phi [^b, i32 1] [^b7, i32 %41];
    i1 %28 = icmp eq i32 %27, i32 2;
    i1 %29 = and i1 %4, i1 %28;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %29(prob = 0.492308), ^b3, ^b4;
  ^indirect1:
    i32 %30 = load i32* %1;
    ubr ^while.body;
  ^while.body2:
    i32 %31 = phi [^indirect, i32 1] [^while.body2, i32 %36];
    i32 %32 = call () -> i32 @getch();
    i1 %33 = icmp eq i32 %32, i32 35;
    i32 %34 = zext i1 %33 to i32;
    i32* %35 = getelementptr &([500 * i32]* %18)[i64 0][i32 %31];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %31, i32 1;
    i1 %37 = icmp sgt i32 %20, i32 %36;
    cbr i1 %37(prob = 0.984615), ^while.body2, ^b1;
  ^b3:
    [4 * i8]* %38 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %39 = ptradd [4 * i8]* %38, i32 0;
    store i32* %39 with i32 %3;
    i8* %40 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 1, i32 %3, i8* %40);
    ubr ^b4;
  ^if.then:
    cbr i1 %4(prob = 0.984615), ^b5, ^b7;
  ^if.else:
    cbr i1 %4(prob = 0.984615), ^b6, ^b7;
  ^b4:
    cbr i1 %4(prob = 0.984615), ^while.body3, ^b8;
  ^b5:
    store i32* %8 with i32 %3;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 1, i32 %3, i8* %12);
    ubr ^b7;
  ^b6:
    store i32* %10 with i32 %3;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 1, i32 %3, i8* %13);
    ubr ^b7;
  ^b7:
    i32 %41 = phi [^if.then, i32 2] [^if.else, i32 1] [^b5, i32 2] [^b6, i32 1];
    i32 %42 = add i32 %24, i32 -1;
    i1 %43 = icmp sgt i32 %42, i32 0;
    cbr i1 %43(prob = 0.984615), ^while.body1, ^b2;
  ^while.body3:
    i32 %44 = phi [^b4, i32 1] [^b9, i32 %56];
    i32 %45 = load i32* %1;
    i32 %46 = add i32 %45, i32 1;
    i1 %47 = icmp sgt i32 %45, i32 0;
    [500 * i32]* %48 = getelementptr &([500 * [500 * i32]]* %11)[i64 0][i32 %44];
    cbr i1 %47(prob = 0.984615), ^while.body4, ^b9;
  ^b8:
    ret i32 0;
  ^while.body4:
    i32 %49 = phi [^while.body3, i32 1] [^while.body4, i32 %54];
    i32* %50 = getelementptr &([500 * i32]* %48)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i1 %52 = icmp eq i32 %51, i32 1;
    i32 %53 = select i1 %52 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %53);
    i32 %54 = add i32 %49, i32 1;
    i1 %55 = icmp sgt i32 %46, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body4, ^b9;
  ^b9:
    call (i32) -> void @putch(i32 10);
    i32 %56 = add i32 %44, i32 1;
    i1 %57 = icmp sgt i32 %3, i32 %56;
    cbr i1 %57(prob = 0.984615), ^while.body3, ^b8;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    i32* %2 = ptrcast i32* @width to i32*;
    [500 * [500 * i32]]* %3 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    [500 * [500 * i32]]* %4 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    ubr ^b1;
  ^b1:
    i32 %5 = phi [^b, i32 %0] [^b2, i32 %13];
    i32 %6 = load i32* %2;
    i1 %7 = icmp sgt i32 %6, i32 0;
    cbr i1 %7(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* %4)[i64 0][i32 %5];
    [500 * i32]* %9 = getelementptr &([500 * [500 * i32]]* %3)[i64 0][i32 %5];
    i32 %10 = add i32 %6, i32 1;
    i1 %11 = icmp sgt i32 %10, i32 16;
    i32 %12 = add i32 %6, i32 -14;
    cbr i1 %11(prob = 0.8), ^while.body, ^scalar.header;
  ^b2:
    i32 %13 = add i32 %5, i32 1;
    i1 %14 = icmp sgt i32 %1, i32 %13;
    cbr i1 %14(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    i32 %15 = phi [^super.header, i32 1] [^while.body, i32 %64];
    i32* %16 = getelementptr &([500 * i32]* %8)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &([500 * i32]* %9)[i64 0][i32 %15];
    store i32* %18 with i32 %17;
    i32* %19 = getelementptr &(i32* %16)[i64 1];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %18)[i64 1];
    store i32* %21 with i32 %20;
    i32* %22 = getelementptr &(i32* %16)[i64 2];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %18)[i64 2];
    store i32* %24 with i32 %23;
    i32* %25 = getelementptr &(i32* %16)[i64 3];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %18)[i64 3];
    store i32* %27 with i32 %26;
    i32* %28 = getelementptr &(i32* %16)[i64 4];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %18)[i64 4];
    store i32* %30 with i32 %29;
    i32* %31 = getelementptr &(i32* %16)[i64 5];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %18)[i64 5];
    store i32* %33 with i32 %32;
    i32* %34 = getelementptr &(i32* %16)[i64 6];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &(i32* %18)[i64 6];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %16)[i64 7];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %18)[i64 7];
    store i32* %39 with i32 %38;
    i32* %40 = getelementptr &(i32* %16)[i64 8];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %18)[i64 8];
    store i32* %42 with i32 %41;
    i32* %43 = getelementptr &(i32* %16)[i64 9];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %18)[i64 9];
    store i32* %45 with i32 %44;
    i32* %46 = getelementptr &(i32* %16)[i64 10];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %18)[i64 10];
    store i32* %48 with i32 %47;
    i32* %49 = getelementptr &(i32* %16)[i64 11];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %18)[i64 11];
    store i32* %51 with i32 %50;
    i32* %52 = getelementptr &(i32* %16)[i64 12];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %18)[i64 12];
    store i32* %54 with i32 %53;
    i32* %55 = getelementptr &(i32* %16)[i64 13];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %18)[i64 13];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %16)[i64 14];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %18)[i64 14];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %16)[i64 15];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %18)[i64 15];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %15, i32 16;
    i1 %65 = icmp sgt i32 %12, i32 %64;
    cbr i1 %65(prob = 0.8), ^while.body, ^scalar.header;
  ^scalar.header:
    i32 %66 = phi [^super.header, i32 1] [^while.body, i32 %64];
    i1 %67 = icmp sgt i32 %10, i32 %66;
    cbr i1 %67(prob = 0.9375), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %68 = phi [^scalar.header, i32 %66] [^while.body1, i32 %72];
    i32* %69 = getelementptr &([500 * i32]* %8)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &([500 * i32]* %9)[i64 0][i32 %68];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %68, i32 1;
    i1 %73 = icmp sgt i32 %10, i32 %72;
    cbr i1 %73(prob = 0.9375), ^while.body1, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    [500 * [500 * i32]]* %2 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    [500 * i32]* %3 = getelementptr &([500 * [500 * i32]]* %2)[i64 0][i64 0];
    [500 * [500 * i32]]* %4 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    [500 * i32]* %5 = getelementptr &([500 * [500 * i32]]* %4)[i64 0][i64 0];
    i32* %6 = ptrcast i32* @width to i32*;
    ubr ^b1;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b2, i32 %47];
    [500 * i32]* %8 = getelementptr &([500 * i32]* %3)[i32 %7];
    [500 * i32]* %9 = getelementptr &([500 * i32]* %8)[i64 -1];
    [500 * i32]* %10 = getelementptr &([500 * i32]* %8)[i64 1];
    i32 %11 = load i32* %6;
    i32 %12 = add i32 %11, i32 1;
    i1 %13 = icmp sgt i32 %11, i32 0;
    [500 * i32]* %14 = getelementptr &([500 * i32]* %5)[i32 %7];
    cbr i1 %13(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32 %15 = phi [^b1, i32 1] [^b4, i32 %46];
    i32* %16 = getelementptr &([500 * i32]* %9)[i64 0][i32 %15];
    i32* %17 = getelementptr &(i32* %16)[i64 -1];
    i32 %18 = load i32* %17;
    i32 %19 = load i32* %16;
    i32 %20 = add i32 %18, i32 %19;
    i32* %21 = getelementptr &(i32* %16)[i64 1];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    i32* %24 = getelementptr &([500 * i32]* %8)[i64 0][i32 %15];
    i32* %25 = getelementptr &(i32* %24)[i64 -1];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %23, i32 %26;
    i32* %28 = getelementptr &(i32* %24)[i64 1];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %27, i32 %29;
    i32* %31 = getelementptr &([500 * i32]* %10)[i64 0][i32 %15];
    i32* %32 = getelementptr &(i32* %31)[i64 -1];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %30, i32 %33;
    i32 %35 = load i32* %31;
    i32 %36 = add i32 %34, i32 %35;
    i32* %37 = getelementptr &(i32* %31)[i64 1];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    i32 %40 = xor i32 %39, i32 2;
    i32 %41 = load i32* %24;
    i32 %42 = xor i32 %41, i32 1;
    i32 %43 = or i32 %40, i32 %42;
    i1 %44 = icmp eq i32 %43, i32 0;
    i32* %45 = getelementptr &([500 * i32]* %14)[i64 0][i32 %15];
    i32 %46 = add i32 %15, i32 1;
    cbr i1 %44(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32 %47 = add i32 %7, i32 1;
    i1 %48 = icmp sgt i32 %1, i32 %47;
    cbr i1 %48(prob = 0.984615), ^b1, ^b3;
  ^if.then:
    store i32* %45 with i32 1;
    ubr ^b4;
  ^if.else:
    i1 %49 = icmp eq i32 %39, i32 3;
    i32 %50 = zext i1 %49 to i32;
    store i32* %45 with i32 %50;
    ubr ^b4;
  ^b3:
    ret;
  ^b4:
    i1 %51 = icmp sgt i32 %12, i32 %46;
    cbr i1 %51(prob = 0.984615), ^while.body, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody } {
  ^b:
    [500 * [500 * i32]]* %2 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    [500 * i32]* %3 = getelementptr &([500 * [500 * i32]]* %2)[i64 0][i64 0];
    [500 * [500 * i32]]* %4 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    [500 * i32]* %5 = getelementptr &([500 * [500 * i32]]* %4)[i64 0][i64 0];
    i32* %6 = ptrcast i32* @width to i32*;
    ubr ^b1;
  ^b1:
    i32 %7 = phi [^b, i32 %0] [^b2, i32 %47];
    [500 * i32]* %8 = getelementptr &([500 * i32]* %3)[i32 %7];
    [500 * i32]* %9 = getelementptr &([500 * i32]* %8)[i64 -1];
    [500 * i32]* %10 = getelementptr &([500 * i32]* %8)[i64 1];
    i32 %11 = load i32* %6;
    i32 %12 = add i32 %11, i32 1;
    i1 %13 = icmp sgt i32 %11, i32 0;
    [500 * i32]* %14 = getelementptr &([500 * i32]* %5)[i32 %7];
    cbr i1 %13(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32 %15 = phi [^b1, i32 1] [^b4, i32 %46];
    i32* %16 = getelementptr &([500 * i32]* %9)[i64 0][i32 %15];
    i32* %17 = getelementptr &(i32* %16)[i64 -1];
    i32 %18 = load i32* %17;
    i32 %19 = load i32* %16;
    i32 %20 = add i32 %18, i32 %19;
    i32* %21 = getelementptr &(i32* %16)[i64 1];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    i32* %24 = getelementptr &([500 * i32]* %8)[i64 0][i32 %15];
    i32* %25 = getelementptr &(i32* %24)[i64 -1];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %23, i32 %26;
    i32* %28 = getelementptr &(i32* %24)[i64 1];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %27, i32 %29;
    i32* %31 = getelementptr &([500 * i32]* %10)[i64 0][i32 %15];
    i32* %32 = getelementptr &(i32* %31)[i64 -1];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %30, i32 %33;
    i32 %35 = load i32* %31;
    i32 %36 = add i32 %34, i32 %35;
    i32* %37 = getelementptr &(i32* %31)[i64 1];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    i32 %40 = xor i32 %39, i32 2;
    i32 %41 = load i32* %24;
    i32 %42 = xor i32 %41, i32 1;
    i32 %43 = or i32 %40, i32 %42;
    i1 %44 = icmp eq i32 %43, i32 0;
    i32* %45 = getelementptr &([500 * i32]* %14)[i64 0][i32 %15];
    i32 %46 = add i32 %15, i32 1;
    cbr i1 %44(prob = 0.5), ^if.then, ^if.else;
  ^b2:
    i32 %47 = add i32 %7, i32 1;
    i1 %48 = icmp sgt i32 %1, i32 %47;
    cbr i1 %48(prob = 0.984615), ^b1, ^b3;
  ^if.then:
    store i32* %45 with i32 1;
    ubr ^b4;
  ^if.else:
    i1 %49 = icmp eq i32 %39, i32 3;
    i32 %50 = zext i1 %49 to i32;
    store i32* %45 with i32 %50;
    ubr ^b4;
  ^b3:
    ret;
  ^b4:
    i1 %51 = icmp sgt i32 %12, i32 %46;
    cbr i1 %51(prob = 0.984615), ^while.body, ^b2;
}
internal [4 * i8]* @cmmc_parallel_body_payload_2, align 8;
