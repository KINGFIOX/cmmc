internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getch();
    [500 * [500 * i32]]* %5 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %11];
    i1 %7 = icmp sge i32 %2, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.header1, ^entry1;
  ^while.header1:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %6];
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %9 = icmp sgt i32 %3, i32 0;
    cbr i1 %9(prob = 0.97), ^indirect, ^b1;
  ^b:
    i32 %10 = call () -> i32 @getch();
    i32 %11 = add i32 %6, i32 1;
    ubr ^while.header;
  ^indirect:
    [500 * [500 * i32]]* %12 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    ubr ^while.body1;
  ^while.body:
    i32 %13 = phi [^while.header1, i32 1] [^while.body, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i1 %15 = icmp eq i32 %14, i32 35;
    i32 %16 = zext i1 %15 to i32;
    i32* %17 = getelementptr &([500 * i32]* %8)[i64 0][i32 %13];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %13, i32 1;
    i1 %19 = icmp sge i32 %0, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body, ^b;
  ^b1:
    i32 %20 = phi [^entry1, i32 1] [^while.body2, i32 %30];
    call (i32) -> void @stoptime(i32 106);
    i1 %21 = icmp eq i32 %20, i32 2;
    cbr i1 %21(prob = 0.5), ^entry2, ^while.header2;
  ^while.body1:
    i32 %22 = phi [^indirect, i32 %3] [^while.body2, i32 %47];
    i32 %23 = phi [^indirect, i32 1] [^while.body2, i32 %30];
    i1 %24 = icmp eq i32 %23, i32 1;
    [500 * [500 * i32]]* %25 = select i1 %24 ? [500 * [500 * i32]]* %5 : [500 * [500 * i32]]* %12;
    [500 * i32]* %26 = getelementptr &([500 * [500 * i32]]* %25)[i64 0][i64 0];
    [500 * [500 * i32]]* %27 = select i1 %24 ? [500 * [500 * i32]]* %12 : [500 * [500 * i32]]* %5;
    [500 * i32]* %28 = getelementptr &([500 * [500 * i32]]* %27)[i64 0][i64 0];
    i32 %29 = zext i1 %24 to i32;
    i32 %30 = add i32 %29, i32 1;
    ubr ^while.header3;
  ^entry2:
    [500 * [500 * i32]]* %31 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    ubr ^while.header4;
  ^while.header2:
    i32 %32 = phi [^b1, i32 1] [^while.header4, i32 1] [^b3, i32 %51];
    i1 %33 = icmp sge i32 %2, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.header5, ^b2;
  ^while.header3:
    i32 %34 = phi [^while.body1, i32 1] [^while.header6, i32 %41];
    i32 %35 = add i32 %34, i32 -1;
    [500 * i32]* %36 = getelementptr &([500 * i32]* %26)[i32 %35];
    [500 * i32]* %37 = getelementptr &([500 * i32]* %26)[i32 %34];
    [500 * i32]* %38 = getelementptr &([500 * i32]* %37)[i64 1];
    i1 %39 = icmp sge i32 %2, i32 %34;
    [500 * i32]* %40 = getelementptr &([500 * i32]* %28)[i32 %34];
    i32 %41 = add i32 %34, i32 1;
    cbr i1 %39(prob = 0.97), ^while.header6, ^while.body2;
  ^while.header4:
    i32 %42 = phi [^entry2, i32 1] [^b4, i32 %90];
    i1 %43 = icmp sge i32 %2, i32 %42;
    cbr i1 %43(prob = 0.97), ^while.header7, ^while.header2;
  ^while.header5:
    [500 * i32]* %44 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %32];
    cbr i1 %1(prob = 0.97), ^while.body3, ^b3;
  ^b2:
    ret i32 0;
  ^while.header6:
    i32 %45 = phi [^while.header3, i32 1] [^if.then, i32 %89] [^if.else, i32 %89];
    i1 %46 = icmp sge i32 %0, i32 %45;
    cbr i1 %46(prob = 0.97), ^while.body4, ^while.header3;
  ^while.body2:
    i32 %47 = add i32 %22, i32 -1;
    i1 %48 = icmp sgt i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body1, ^b1;
  ^while.header7:
    [500 * i32]* %49 = getelementptr &([500 * [500 * i32]]* %31)[i64 0][i32 %42];
    [500 * i32]* %50 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %42];
    cbr i1 %1(prob = 0.97), ^while.body5, ^b4;
  ^b3:
    call (i32) -> void @putch(i32 10);
    i32 %51 = add i32 %32, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %52 = phi [^while.header5, i32 1] [^while.body3, i32 %57];
    i32* %53 = getelementptr &([500 * i32]* %44)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = icmp eq i32 %54, i32 1;
    i32 %56 = select i1 %55 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %56);
    i32 %57 = add i32 %52, i32 1;
    i1 %58 = icmp sge i32 %0, i32 %57;
    cbr i1 %58(prob = 0.97), ^while.body3, ^b3;
  ^while.body4:
    i32 %59 = add i32 %45, i32 -1;
    i32* %60 = getelementptr &([500 * i32]* %36)[i64 0][i32 %59];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &([500 * i32]* %36)[i64 0][i32 %45];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %62)[i64 1];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32* %68 = getelementptr &([500 * i32]* %37)[i64 0][i32 %59];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %68)[i64 2];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32* %74 = getelementptr &([500 * i32]* %38)[i64 0][i32 %59];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &([500 * i32]* %38)[i64 0][i32 %45];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32* %80 = getelementptr &(i32* %77)[i64 1];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %79, i32 %81;
    i32 %83 = xor i32 %82, i32 2;
    i32* %84 = getelementptr &([500 * i32]* %37)[i64 0][i32 %45];
    i32 %85 = load i32* %84;
    i32 %86 = xor i32 %85, i32 1;
    i32 %87 = or i32 %83, i32 %86;
    i1 %88 = icmp eq i32 %87, i32 0;
    i32 %89 = add i32 %45, i32 1;
    cbr i1 %88(prob = 0.5), ^if.then, ^if.else;
  ^b4:
    i32 %90 = add i32 %42, i32 1;
    ubr ^while.header4;
  ^while.body5:
    i32 %91 = phi [^while.header7, i32 1] [^while.body5, i32 %95];
    i32* %92 = getelementptr &([500 * i32]* %49)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &([500 * i32]* %50)[i64 0][i32 %91];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %91, i32 1;
    i1 %96 = icmp sge i32 %0, i32 %95;
    cbr i1 %96(prob = 0.97), ^while.body5, ^b4;
  ^if.then:
    i32* %97 = getelementptr &([500 * i32]* %40)[i64 0][i32 %45];
    store i32* %97 with i32 1;
    ubr ^while.header6;
  ^if.else:
    i1 %98 = icmp eq i32 %82, i32 3;
    i32 %99 = zext i1 %98 to i32;
    i32* %100 = getelementptr &([500 * i32]* %40)[i64 0][i32 %45];
    store i32* %100 with i32 %99;
    ubr ^while.header6;
}
