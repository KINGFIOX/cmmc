internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    call (i32) -> void @starttime(i32 78);
    i1 %7 = scmp gt i32 %2, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = phi [^entry, i32 undef] [^while.body2, i32 %40];
    i32 %9 = phi [^entry, i32 0] [^while.body2, i32 %41];
    i32* %10 = getelementptr &([10000000 * i32]* @keys)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &([10000000 * i32]* @values)[i64 0][i32 %9];
    i32 %13 = load i32* %12;
    i32 %14 = srem i32 %11, i32 %0;
    i32* %15 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp eq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b1;
^b:
    i1 %18 = scmp gt i32 %6, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b2;
^if.then:
    i32 %19 = add i32 %8, i32 1;
    store i32* %15 with i32 %19;
    i32* %20 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %19];
    store i32* %20 with i32 %11;
    i32* %21 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %19];
    store i32* %21 with i32 %13;
    i32* %22 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %19];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %19];
    store i32* %23 with i32 0;
    ubr ^while.body2;
^while.body1:
    i32 %24 = phi [^b, i32 0] [^b4, i32 %52];
    i32* %25 = getelementptr &([10000000 * i32]* @ans)[i64 0][i32 %24];
    i32* %26 = getelementptr &([10000000 * i32]* @requests)[i64 0][i32 %24];
    i32 %27 = load i32* %26;
    i32 %28 = srem i32 %27, i32 %0;
    i32* %29 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %28];
    i32 %30 = load i32* %29;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body4, ^b4;
^b1:
    i1 %32 = scmp neq i32 %16, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body3, ^b3;
^b2:
    call (i32) -> void @stoptime(i32 90);
    i32* %33 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %6, i32* %33);
    ret i32 0;
^b3:
    i32 %34 = add i32 %8, i32 1;
    i32* %35 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %34];
    i32 %36 = load i32* %15;
    store i32* %35 with i32 %36;
    store i32* %15 with i32 %34;
    i32* %37 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %34];
    store i32* %37 with i32 %11;
    i32* %38 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %34];
    store i32* %38 with i32 %13;
    i32* %39 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %34];
    store i32* %39 with i32 0;
    ubr ^while.body2;
^while.body2:
    i32 %40 = phi [^if.then, i32 %19] [^b3, i32 %34] [^if.then1, i32 %54];
    i32 %41 = add i32 %9, i32 1;
    i1 %42 = scmp lt i32 %41, i32 %2;
    cbr i1 %42(prob = 0.97), ^while.body, ^b;
^while.body3:
    i32 %43 = phi [^b1, i32 %16] [^b5, i32 %61];
    i32* %44 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 %11;
    cbr i1 %46(prob = 0.5), ^if.then1, ^b5;
^while.body4:
    i32 %47 = phi [^while.body1, i32 %30] [^b6, i32 %64];
    i32* %48 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %47];
    i32 %49 = load i32* %48;
    i1 %50 = scmp eq i32 %49, i32 %27;
    cbr i1 %50(prob = 0.5), ^if.then2, ^b6;
^b4:
    i32 %51 = phi [^while.body1, i32 0] [^b6, i32 0] [^b7, i32 %66];
    store i32* %25 with i32 %51;
    i32 %52 = add i32 %24, i32 1;
    i1 %53 = scmp lt i32 %52, i32 %6;
    cbr i1 %53(prob = 0.97), ^while.body1, ^b2;
^if.then1:
    i32 %54 = add i32 %8, i32 1;
    i32* %55 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %54];
    i32* %56 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %43];
    i32 %57 = load i32* %56;
    store i32* %55 with i32 %57;
    store i32* %56 with i32 %54;
    i32* %58 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %54];
    store i32* %58 with i32 %13;
    ubr ^while.body2;
^if.then2:
    i1 %59 = scmp neq i32 %47, i32 0;
    cbr i1 %59(prob = 0.97), ^while.body5, ^b7;
^b5:
    i32* %60 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %43];
    i32 %61 = load i32* %60;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body3, ^b3;
^b6:
    i32* %63 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %47];
    i32 %64 = load i32* %63;
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body4, ^b4;
^b7:
    i32 %66 = phi [^if.then2, i32 0] [^while.body5, i32 %71];
    ubr ^b4;
^while.body5:
    i32 %67 = phi [^if.then2, i32 0] [^while.body5, i32 %71];
    i32 %68 = phi [^if.then2, i32 %47] [^while.body5, i32 %73];
    i32* %69 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %67, i32 %70;
    i32* %72 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %68];
    i32 %73 = load i32* %72;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body5, ^b7;
}
