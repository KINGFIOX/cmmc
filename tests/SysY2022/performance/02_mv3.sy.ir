internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    [2010 * [2010 * i32]]* %2 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    [2010 * i32]* %3 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i64 0];
    [2010 * i32]* %4 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %5 = getelementptr &([2010 * i32]* %4)[i64 0][i64 0];
    [2010 * i32]* %6 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %7 = getelementptr &([2010 * i32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b1, i32 %11];
    i1 %9 = scmp lt i32 %8, i32 %0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^while.body:
    cbr i1 %1(prob = 0.97), ^indirect, ^b1;
  ^b:
    cbr i1 %1(prob = 0.97), ^while.body1, ^b2;
  ^indirect:
    [2010 * i32]* %10 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i32 %8];
    ubr ^while.body2;
  ^b1:
    i32 %11 = add i32 %8, i32 1;
    ubr ^while.header;
  ^b2:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
  ^while.body1:
    i32 %12 = phi [^b, i32 0] [^while.body1, i32 %15];
    i32 %13 = call () -> i32 @getint();
    i32* %14 = getelementptr &([2010 * i32]* %4)[i64 0][i32 %12];
    store i32* %14 with i32 %13;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b2;
  ^while.body2:
    i32 %17 = phi [^indirect, i32 0] [^while.body2, i32 %20];
    i32 %18 = call () -> i32 @getint();
    i32* %19 = getelementptr &([2010 * i32]* %10)[i64 0][i32 %17];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = scmp lt i32 %20, i32 %0;
    cbr i1 %21(prob = 0.97), ^while.body2, ^b1;
  ^while.body3:
    i32 %22 = phi [^b2, i32 0] [^while.body11, i32 %128];
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header1;
  ^super.header:
    i32 %23 = phi [^while.body3, i32 0] [^while.body4, i32 %24];
    i32 %24 = add i32 %23, i32 16;
    i1 %25 = scmp lt i32 %24, i32 %0;
    cbr i1 %25(prob = 0.67), ^while.body4, ^super.header1;
  ^while.header1:
    i32 %26 = phi [^while.body3, i32 0] [^b3, i32 %67] [^while.body10, i32 0];
    i1 %27 = scmp lt i32 %26, i32 %0;
    [2010 * i32]* %28 = getelementptr &([2010 * i32]* %3)[i32 %26];
    i32* %29 = getelementptr &(i32* %7)[i32 %26];
    cbr i1 %27(prob = 0.97), ^while.header2, ^while.body5;
  ^while.body4:
    i32* %30 = getelementptr &(i32* %7)[i32 %23];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %30)[i64 4];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %30)[i64 5];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %30)[i64 6];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %30)[i64 7];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %30)[i64 8];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %30)[i64 9];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %30)[i64 10];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %30)[i64 11];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %30)[i64 12];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %30)[i64 13];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %30)[i64 14];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %30)[i64 15];
    store i32* %45 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i32 %46 = phi [^super.header, i32 %23] [^while.body6, i32 %47];
    i32 %47 = add i32 %46, i32 16;
    i1 %48 = scmp lt i32 %47, i32 %0;
    cbr i1 %48(prob = 0.67), ^while.body6, ^super.header2;
  ^while.header2:
    i32 %49 = phi [^while.header1, i32 0] [^b4, i32 %81];
    i1 %50 = scmp lt i32 %49, i32 %0;
    cbr i1 %50(prob = 0.97), ^while.body7, ^b3;
  ^while.body5:
    cbr i1 %1(prob = 0.97), ^super.header3, ^while.header3;
  ^while.body6:
    i32* %51 = getelementptr &(i32* %7)[i32 %46];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %51)[i64 1];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %51)[i64 2];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %51)[i64 3];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %51)[i64 4];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %51)[i64 5];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %51)[i64 6];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %51)[i64 7];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %51)[i64 8];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %51)[i64 9];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %51)[i64 10];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %51)[i64 11];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %51)[i64 12];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %51)[i64 13];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %51)[i64 14];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %51)[i64 15];
    store i32* %66 with i32 0;
    ubr ^super.header1;
  ^b3:
    i32 %67 = add i32 %26, i32 1;
    ubr ^while.header1;
  ^while.body7:
    i32* %68 = getelementptr &([2010 * i32]* %28)[i64 0][i32 %49];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^b4, ^if.else;
  ^super.header2:
    i32 %71 = phi [^super.header1, i32 %46] [^while.body8, i32 %72];
    i32 %72 = add i32 %71, i32 16;
    i1 %73 = scmp lt i32 %72, i32 %0;
    cbr i1 %73(prob = 0.67), ^while.body8, ^while.body10;
  ^super.header3:
    i32 %74 = phi [^while.body5, i32 0] [^while.body9, i32 %75];
    i32 %75 = add i32 %74, i32 16;
    i1 %76 = scmp lt i32 %75, i32 %0;
    cbr i1 %76(prob = 0.67), ^while.body9, ^super.header4;
  ^while.header3:
    i32 %77 = phi [^while.body5, i32 0] [^b5, i32 %146] [^while.body15, i32 0];
    i1 %78 = scmp lt i32 %77, i32 %0;
    [2010 * i32]* %79 = getelementptr &([2010 * i32]* %3)[i32 %77];
    i32* %80 = getelementptr &(i32* %5)[i32 %77];
    cbr i1 %78(prob = 0.97), ^while.header4, ^while.body11;
  ^b4:
    i32 %81 = add i32 %49, i32 1;
    ubr ^while.header2;
  ^while.body8:
    i32* %82 = getelementptr &(i32* %7)[i32 %71];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %82)[i64 1];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %82)[i64 2];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %82)[i64 3];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %82)[i64 4];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %82)[i64 5];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %82)[i64 6];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %82)[i64 7];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %82)[i64 8];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %82)[i64 9];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %82)[i64 10];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %82)[i64 11];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %82)[i64 12];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %82)[i64 13];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %82)[i64 14];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %82)[i64 15];
    store i32* %97 with i32 0;
    ubr ^super.header2;
  ^if.else:
    i32 %98 = load i32* %29;
    i32* %99 = getelementptr &(i32* %5)[i32 %49];
    i32 %100 = load i32* %99;
    i32 %101 = mul i32 %69, i32 %100;
    i32 %102 = add i32 %101, i32 %98;
    store i32* %29 with i32 %102;
    ubr ^b4;
  ^while.body9:
    i32* %103 = getelementptr &(i32* %5)[i32 %74];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %103)[i64 1];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %103)[i64 2];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %103)[i64 3];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %103)[i64 4];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %103)[i64 5];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %103)[i64 6];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %103)[i64 7];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %103)[i64 8];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %103)[i64 9];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %103)[i64 10];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %103)[i64 11];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %103)[i64 12];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %103)[i64 13];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %103)[i64 14];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %103)[i64 15];
    store i32* %118 with i32 0;
    ubr ^super.header3;
  ^while.body10:
    i32 %119 = phi [^super.header2, i32 %71] [^while.body10, i32 %121];
    i32* %120 = getelementptr &(i32* %7)[i32 %119];
    store i32* %120 with i32 0;
    i32 %121 = add i32 %119, i32 1;
    i1 %122 = scmp lt i32 %121, i32 %0;
    cbr i1 %122(prob = 0.97), ^while.body10, ^while.header1;
  ^super.header4:
    i32 %123 = phi [^super.header3, i32 %74] [^while.body12, i32 %124];
    i32 %124 = add i32 %123, i32 16;
    i1 %125 = scmp lt i32 %124, i32 %0;
    cbr i1 %125(prob = 0.67), ^while.body12, ^super.header5;
  ^while.header4:
    i32 %126 = phi [^while.header3, i32 0] [^b7, i32 %153];
    i1 %127 = scmp lt i32 %126, i32 %0;
    cbr i1 %127(prob = 0.97), ^while.body13, ^b5;
  ^while.body11:
    i32 %128 = add i32 %22, i32 1;
    i1 %129 = scmp lt i32 %128, i32 50;
    cbr i1 %129(prob = 0.98), ^while.body3, ^b6;
  ^while.body12:
    i32* %130 = getelementptr &(i32* %5)[i32 %123];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %130)[i64 1];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %130)[i64 2];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %130)[i64 3];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %130)[i64 4];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %130)[i64 5];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %130)[i64 6];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %130)[i64 7];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %130)[i64 8];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %130)[i64 9];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %130)[i64 10];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %130)[i64 11];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %130)[i64 12];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %130)[i64 13];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %130)[i64 14];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %130)[i64 15];
    store i32* %145 with i32 0;
    ubr ^super.header4;
  ^b5:
    i32 %146 = add i32 %77, i32 1;
    ubr ^while.header3;
  ^while.body13:
    i32* %147 = getelementptr &([2010 * i32]* %79)[i64 0][i32 %126];
    i32 %148 = load i32* %147;
    i1 %149 = scmp eq i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^b7, ^if.else1;
  ^super.header5:
    i32 %150 = phi [^super.header4, i32 %123] [^while.body14, i32 %151];
    i32 %151 = add i32 %150, i32 16;
    i1 %152 = scmp lt i32 %151, i32 %0;
    cbr i1 %152(prob = 0.67), ^while.body14, ^while.body15;
  ^b6:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %7);
    ret i32 0;
  ^b7:
    i32 %153 = add i32 %126, i32 1;
    ubr ^while.header4;
  ^while.body14:
    i32* %154 = getelementptr &(i32* %5)[i32 %150];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %154)[i64 1];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %154)[i64 2];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %154)[i64 3];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %154)[i64 4];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &(i32* %154)[i64 5];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %154)[i64 6];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %154)[i64 7];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %154)[i64 8];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %154)[i64 9];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %154)[i64 10];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %154)[i64 11];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %154)[i64 12];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &(i32* %154)[i64 13];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &(i32* %154)[i64 14];
    store i32* %168 with i32 0;
    i32* %169 = getelementptr &(i32* %154)[i64 15];
    store i32* %169 with i32 0;
    ubr ^super.header5;
  ^if.else1:
    i32 %170 = load i32* %80;
    i32* %171 = getelementptr &(i32* %7)[i32 %126];
    i32 %172 = load i32* %171;
    i32 %173 = mul i32 %148, i32 %172;
    i32 %174 = add i32 %173, i32 %170;
    store i32* %80 with i32 %174;
    ubr ^b7;
  ^while.body15:
    i32 %175 = phi [^super.header5, i32 %150] [^while.body15, i32 %177];
    i32* %176 = getelementptr &(i32* %5)[i32 %175];
    store i32* %176 with i32 0;
    i32 %177 = add i32 %175, i32 1;
    i1 %178 = scmp lt i32 %177, i32 %0;
    cbr i1 %178(prob = 0.97), ^while.body15, ^while.header3;
}
