internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -3;
    i1 %2 = icmp sgt i32 %1, i32 15;
    i1 %3 = icmp sgt i32 %0, i32 3;
    i32 %4 = add i32 %0, i32 -18;
    [2010 * i32]* %5 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %6 = getelementptr &([2010 * i32]* %5)[i64 0][i64 0];
    [2010 * [2010 * i32]]* %7 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    [2010 * i32]* %8 = getelementptr &([2010 * [2010 * i32]]* %7)[i64 0][i64 0];
    [2010 * i32]* %9 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %10 = getelementptr &([2010 * i32]* %9)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 0] [^b1, i32 %25];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    [2010 * i32]* %13 = getelementptr &([2010 * [2010 * i32]]* %7)[i64 0][i32 %11];
    ubr ^while.body;
  ^while.header1:
    i1 %14 = icmp sgt i32 %0, i32 0;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body:
    i32 %15 = phi [^prebody, i32 0] [^while.body, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32* %17 = getelementptr &([2010 * i32]* %13)[i64 0][i32 %15];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body2;
  ^while.body1:
    i32 %20 = phi [^while.header1, i32 0] [^while.body1, i32 %23];
    i32 %21 = call () -> i32 @getint();
    i32* %22 = getelementptr &([2010 * i32]* %9)[i64 0][i32 %20];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %20, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body1, ^b;
  ^b1:
    i32 %25 = add i32 %11, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %26 = phi [^b, i32 0] [^b6, i32 %84];
    cbr i1 %14(prob = 0.984615), ^super.header, ^while.header2;
  ^super.header:
    cbr i1 %3(prob = 0.941176), ^super.header1, ^scalar.header;
  ^while.header2:
    i32 %27 = phi [^while.body2, i32 0] [^scalar.header, i32 0] [^b3, i32 %52] [^while.body4, i32 0];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.header3, ^b2;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^scalar.header:
    i32 %29 = phi [^super.header, i32 0] [^scalar.header1, i32 %58] [^while.body5, i32 %76];
    i1 %30 = icmp sgt i32 %0, i32 %29;
    cbr i1 %30(prob = 0.75), ^while.body4, ^while.header2;
  ^while.header3:
    i32* %31 = getelementptr &(i32* %6)[i32 %27];
    [2010 * i32]* %32 = getelementptr &([2010 * i32]* %8)[i32 %27];
    cbr i1 %14(prob = 0.984615), ^b4, ^b3;
  ^b2:
    cbr i1 %14(prob = 0.984615), ^super.header2, ^while.header4;
  ^while.body3:
    i32 %33 = phi [^super.header1, i32 0] [^while.body3, i32 %50];
    i32* %34 = getelementptr &(i32* %6)[i32 %33];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 0;
    i32 %50 = add i32 %33, i32 16;
    i1 %51 = icmp sgt i32 %4, i32 %50;
    cbr i1 %51(prob = 0.941176), ^while.body3, ^scalar.header1;
  ^b3:
    i32 %52 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %53 = phi [^while.header3, i32 0] [^b5, i32 %78];
    i32* %54 = getelementptr &([2010 * i32]* %32)[i64 0][i32 %53];
    i32 %55 = load i32* %54;
    i1 %56 = icmp eq i32 %55, i32 0;
    cbr i1 %56(prob = 0.5), ^b5, ^if.else;
  ^scalar.header1:
    i32 %57 = phi [^super.header1, i32 0] [^while.body3, i32 %50];
    i32 %58 = phi [^super.header1, i32 undef] [^while.body3, i32 %50];
    i1 %59 = icmp sgt i32 %1, i32 %57;
    cbr i1 %59(prob = 0.75), ^while.body5, ^scalar.header;
  ^while.body4 {scalar}:
    i32 %60 = phi [^scalar.header, i32 %29] [^while.body4, i32 %62];
    i32* %61 = getelementptr &(i32* %6)[i32 %60];
    store i32* %61 with i32 0;
    i32 %62 = add i32 %60, i32 1;
    i1 %63 = icmp sgt i32 %0, i32 %62;
    cbr i1 %63(prob = 0.75), ^while.body4, ^while.header2;
  ^super.header2:
    cbr i1 %3(prob = 0.941176), ^super.header3, ^scalar.header2;
  ^while.header4:
    i32 %64 = phi [^b2, i32 0] [^scalar.header2, i32 0] [^b7, i32 %105] [^while.body7, i32 0];
    i1 %65 = icmp sgt i32 %0, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.header5, ^b6;
  ^if.else:
    i32* %66 = getelementptr &(i32* %10)[i32 %53];
    i32 %67 = load i32* %31;
    i32 %68 = load i32* %66;
    i32 %69 = mul i32 %55, i32 %68;
    i32 %70 = add i32 %67, i32 %69;
    store i32* %31 with i32 %70;
    ubr ^b5;
  ^while.body5 {scalar}:
    i32 %71 = phi [^scalar.header1, i32 %57] [^while.body5, i32 %76];
    i32* %72 = getelementptr &(i32* %6)[i32 %71];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %72)[i64 1];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %72)[i64 2];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %72)[i64 3];
    store i32* %75 with i32 0;
    i32 %76 = add i32 %71, i32 4;
    i1 %77 = icmp sgt i32 %1, i32 %76;
    cbr i1 %77(prob = 0.75), ^while.body5, ^scalar.header;
  ^b5:
    i32 %78 = add i32 %53, i32 1;
    i1 %79 = icmp sgt i32 %0, i32 %78;
    cbr i1 %79(prob = 0.984615), ^b4, ^b3;
  ^super.header3:
    cbr i1 %2(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^scalar.header2:
    i32 %80 = phi [^super.header2, i32 0] [^scalar.header3, i32 %111] [^while.body8, i32 %127];
    i1 %81 = icmp sgt i32 %0, i32 %80;
    cbr i1 %81(prob = 0.75), ^while.body7, ^while.header4;
  ^while.header5:
    i32* %82 = getelementptr &(i32* %10)[i32 %64];
    [2010 * i32]* %83 = getelementptr &([2010 * i32]* %8)[i32 %64];
    cbr i1 %14(prob = 0.984615), ^b8, ^b7;
  ^b6:
    i32 %84 = add i32 %26, i32 1;
    i1 %85 = icmp slt i32 %84, i32 50;
    cbr i1 %85(prob = 0.98), ^while.body2, ^b9;
  ^while.body6:
    i32 %86 = phi [^super.header3, i32 0] [^while.body6, i32 %103];
    i32* %87 = getelementptr &(i32* %10)[i32 %86];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %87)[i64 1];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %87)[i64 2];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %87)[i64 3];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %87)[i64 4];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %87)[i64 5];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %87)[i64 6];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %87)[i64 7];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %87)[i64 8];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %87)[i64 9];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %87)[i64 10];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %87)[i64 11];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %87)[i64 12];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %87)[i64 13];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %87)[i64 14];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %87)[i64 15];
    store i32* %102 with i32 0;
    i32 %103 = add i32 %86, i32 16;
    i1 %104 = icmp sgt i32 %4, i32 %103;
    cbr i1 %104(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^b7:
    i32 %105 = add i32 %64, i32 1;
    ubr ^while.header4;
  ^b8:
    i32 %106 = phi [^while.header5, i32 0] [^b10, i32 %129];
    i32* %107 = getelementptr &([2010 * i32]* %83)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = icmp eq i32 %108, i32 0;
    cbr i1 %109(prob = 0.5), ^b10, ^if.else1;
  ^scalar.header3:
    i32 %110 = phi [^super.header3, i32 0] [^while.body6, i32 %103];
    i32 %111 = phi [^super.header3, i32 undef] [^while.body6, i32 %103];
    i1 %112 = icmp sgt i32 %1, i32 %110;
    cbr i1 %112(prob = 0.75), ^while.body8, ^scalar.header2;
  ^while.body7 {scalar}:
    i32 %113 = phi [^scalar.header2, i32 %80] [^while.body7, i32 %115];
    i32* %114 = getelementptr &(i32* %10)[i32 %113];
    store i32* %114 with i32 0;
    i32 %115 = add i32 %113, i32 1;
    i1 %116 = icmp sgt i32 %0, i32 %115;
    cbr i1 %116(prob = 0.75), ^while.body7, ^while.header4;
  ^b9:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %6);
    ret i32 0;
  ^if.else1:
    i32* %117 = getelementptr &(i32* %6)[i32 %106];
    i32 %118 = load i32* %82;
    i32 %119 = load i32* %117;
    i32 %120 = mul i32 %108, i32 %119;
    i32 %121 = add i32 %118, i32 %120;
    store i32* %82 with i32 %121;
    ubr ^b10;
  ^while.body8 {scalar}:
    i32 %122 = phi [^scalar.header3, i32 %110] [^while.body8, i32 %127];
    i32* %123 = getelementptr &(i32* %10)[i32 %122];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %123)[i64 1];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %123)[i64 2];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %123)[i64 3];
    store i32* %126 with i32 0;
    i32 %127 = add i32 %122, i32 4;
    i1 %128 = icmp sgt i32 %1, i32 %127;
    cbr i1 %128(prob = 0.75), ^while.body8, ^scalar.header2;
  ^b10:
    i32 %129 = add i32 %106, i32 1;
    i1 %130 = icmp sgt i32 %0, i32 %129;
    cbr i1 %130(prob = 0.984615), ^b8, ^b7;
}
