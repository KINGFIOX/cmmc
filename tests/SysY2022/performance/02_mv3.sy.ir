internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    [2010 * i32]* %2 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %4 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %17];
    [2010 * i32]* %6 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body1;
^b:
    cbr i1 %1(prob = 0.97), ^while.body2, ^b1;
^b1:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
^while.body1:
    i32 %7 = phi [^while.body, i32 0] [^while.body1, i32 %10];
    i32* %8 = getelementptr &([2010 * i32]* %6)[i64 0][i32 %7];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32 %10 = add i32 %7, i32 1;
    i1 %11 = scmp lt i32 %10, i32 %0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %12 = phi [^b, i32 0] [^while.body2, i32 %15];
    i32* %13 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %12];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %0;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b1;
^b2:
    i32 %17 = add i32 %5, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
^while.body3:
    i32 %19 = phi [^b1, i32 0] [^while.body9, i32 %45];
    cbr i1 %1(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    i32 %20 = phi [^while.body3, i32 0] [^while.body4, i32 %22];
    i32* %21 = getelementptr &(i32* %4)[i32 %20];
    store i32* %21 with i32 0;
    i32 %22 = add i32 %20, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %0;
    cbr i1 %23(prob = 0.97), ^while.body4, ^b3;
^b3:
    cbr i1 %1(prob = 0.97), ^while.body5, ^entry1;
^while.body5:
    i32 %24 = phi [^b3, i32 0] [^b6, i32 %47];
    [2010 * i32]* %25 = getelementptr &([2010 * i32]* %2)[i32 %24];
    i32* %26 = getelementptr &(i32* %4)[i32 %24];
    ubr ^while.body6;
^entry1:
    cbr i1 %1(prob = 0.97), ^while.body7, ^b4;
^while.body6:
    i32 %27 = phi [^while.body5, i32 0] [^b5, i32 %40];
    i32* %28 = getelementptr &([2010 * i32]* %25)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i1 %30 = scmp eq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^b5, ^if.else;
^while.body7:
    i32 %31 = phi [^entry1, i32 0] [^while.body7, i32 %33];
    i32* %32 = getelementptr &(i32* %3)[i32 %31];
    store i32* %32 with i32 0;
    i32 %33 = add i32 %31, i32 1;
    i1 %34 = scmp lt i32 %33, i32 %0;
    cbr i1 %34(prob = 0.97), ^while.body7, ^b4;
^b4:
    cbr i1 %1(prob = 0.97), ^while.body8, ^while.body9;
^if.else:
    i32 %35 = load i32* %26;
    i32* %36 = getelementptr &(i32* %3)[i32 %27];
    i32 %37 = load i32* %36;
    i32 %38 = mul i32 %29, i32 %37;
    i32 %39 = add i32 %35, i32 %38;
    store i32* %26 with i32 %39;
    ubr ^b5;
^b5:
    i32 %40 = add i32 %27, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %0;
    cbr i1 %41(prob = 0.97), ^while.body6, ^b6;
^while.body8:
    i32 %42 = phi [^b4, i32 0] [^b9, i32 %60];
    [2010 * i32]* %43 = getelementptr &([2010 * i32]* %2)[i32 %42];
    i32* %44 = getelementptr &(i32* %3)[i32 %42];
    ubr ^while.body10;
^while.body9:
    i32 %45 = add i32 %19, i32 1;
    i1 %46 = scmp lt i32 %45, i32 50;
    cbr i1 %46(prob = 0.98), ^while.body3, ^b7;
^b6:
    i32 %47 = add i32 %24, i32 1;
    i1 %48 = scmp lt i32 %47, i32 %0;
    cbr i1 %48(prob = 0.97), ^while.body5, ^entry1;
^while.body10:
    i32 %49 = phi [^while.body8, i32 0] [^b8, i32 %58];
    i32* %50 = getelementptr &([2010 * i32]* %43)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i1 %52 = scmp eq i32 %51, i32 0;
    cbr i1 %52(prob = 0.5), ^b8, ^if.else1;
^b7:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %4);
    ret i32 0;
^if.else1:
    i32 %53 = load i32* %44;
    i32* %54 = getelementptr &(i32* %4)[i32 %49];
    i32 %55 = load i32* %54;
    i32 %56 = mul i32 %51, i32 %55;
    i32 %57 = add i32 %53, i32 %56;
    store i32* %44 with i32 %57;
    ubr ^b8;
^b8:
    i32 %58 = add i32 %49, i32 1;
    i1 %59 = scmp lt i32 %58, i32 %0;
    cbr i1 %59(prob = 0.97), ^while.body10, ^b9;
^b9:
    i32 %60 = add i32 %42, i32 1;
    i1 %61 = scmp lt i32 %60, i32 %0;
    cbr i1 %61(prob = 0.97), ^while.body8, ^while.body9;
}
