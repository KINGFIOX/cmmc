internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    [2010 * [2010 * i32]]* %2 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    [2010 * i32]* %3 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i64 0];
    [2010 * i32]* %4 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %5 = getelementptr &([2010 * i32]* %4)[i64 0][i64 0];
    [2010 * i32]* %6 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %7 = getelementptr &([2010 * i32]* %6)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %8 = phi [^entry, i32 0] [^b1, i32 %11];
    i1 %9 = scmp lt i32 %8, i32 %0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
  ^while.body:
    cbr i1 %1(prob = 0.97), ^indirect, ^b1;
  ^b:
    cbr i1 %1(prob = 0.97), ^while.body1, ^b2;
  ^indirect:
    [2010 * i32]* %10 = getelementptr &([2010 * [2010 * i32]]* %2)[i64 0][i32 %8];
    ubr ^while.body2;
  ^b1:
    i32 %11 = add i32 %8, i32 1;
    ubr ^while.header;
  ^b2:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
  ^while.body1:
    i32 %12 = phi [^b, i32 0] [^while.body1, i32 %15];
    i32 %13 = call () -> i32 @getint();
    i32* %14 = getelementptr &([2010 * i32]* %4)[i64 0][i32 %12];
    store i32* %14 with i32 %13;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b2;
  ^while.body2:
    i32 %17 = phi [^indirect, i32 0] [^while.body2, i32 %20];
    i32 %18 = call () -> i32 @getint();
    i32* %19 = getelementptr &([2010 * i32]* %10)[i64 0][i32 %17];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = scmp lt i32 %20, i32 %0;
    cbr i1 %21(prob = 0.97), ^while.body2, ^b1;
  ^while.body3:
    i32 %22 = phi [^b2, i32 0] [^while.body11, i32 %80];
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header1;
  ^super.header:
    i32 %23 = phi [^while.body3, i32 0] [^while.body4, i32 %24];
    i32 %24 = add i32 %23, i32 4;
    i1 %25 = scmp lt i32 %24, i32 %0;
    cbr i1 %25(prob = 0.89), ^while.body4, ^super.header1;
  ^while.header1:
    i32 %26 = phi [^while.body3, i32 0] [^b3, i32 %43] [^while.body10, i32 0];
    i1 %27 = scmp lt i32 %26, i32 %0;
    [2010 * i32]* %28 = getelementptr &([2010 * i32]* %3)[i32 %26];
    i32* %29 = getelementptr &(i32* %7)[i32 %26];
    cbr i1 %27(prob = 0.97), ^while.header2, ^while.body5;
  ^while.body4:
    i32* %30 = getelementptr &(i32* %7)[i32 %23];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i32 %34 = phi [^super.header, i32 %23] [^while.body6, i32 %35];
    i32 %35 = add i32 %34, i32 4;
    i1 %36 = scmp lt i32 %35, i32 %0;
    cbr i1 %36(prob = 0.89), ^while.body6, ^super.header2;
  ^while.header2:
    i32 %37 = phi [^while.header1, i32 0] [^b4, i32 %57];
    i1 %38 = scmp lt i32 %37, i32 %0;
    cbr i1 %38(prob = 0.97), ^while.body7, ^b3;
  ^while.body5:
    cbr i1 %1(prob = 0.97), ^super.header3, ^while.header3;
  ^while.body6:
    i32* %39 = getelementptr &(i32* %7)[i32 %34];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    ubr ^super.header1;
  ^b3:
    i32 %43 = add i32 %26, i32 1;
    ubr ^while.header1;
  ^while.body7:
    i32* %44 = getelementptr &([2010 * i32]* %28)[i64 0][i32 %37];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^b4, ^if.else;
  ^super.header2:
    i32 %47 = phi [^super.header1, i32 %34] [^while.body8, i32 %48];
    i32 %48 = add i32 %47, i32 4;
    i1 %49 = scmp lt i32 %48, i32 %0;
    cbr i1 %49(prob = 0.89), ^while.body8, ^while.body10;
  ^super.header3:
    i32 %50 = phi [^while.body5, i32 0] [^while.body9, i32 %51];
    i32 %51 = add i32 %50, i32 4;
    i1 %52 = scmp lt i32 %51, i32 %0;
    cbr i1 %52(prob = 0.89), ^while.body9, ^super.header4;
  ^while.header3:
    i32 %53 = phi [^while.body5, i32 0] [^b5, i32 %86] [^while.body15, i32 0];
    i1 %54 = scmp lt i32 %53, i32 %0;
    [2010 * i32]* %55 = getelementptr &([2010 * i32]* %3)[i32 %53];
    i32* %56 = getelementptr &(i32* %5)[i32 %53];
    cbr i1 %54(prob = 0.97), ^while.header4, ^while.body11;
  ^b4:
    i32 %57 = add i32 %37, i32 1;
    ubr ^while.header2;
  ^while.body8:
    i32* %58 = getelementptr &(i32* %7)[i32 %47];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %58)[i64 1];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %58)[i64 2];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %58)[i64 3];
    store i32* %61 with i32 0;
    ubr ^super.header2;
  ^if.else:
    i32* %62 = getelementptr &(i32* %5)[i32 %37];
    i32 %63 = load i32* %29;
    i32 %64 = load i32* %62;
    i32 %65 = mul i32 %45, i32 %64;
    i32 %66 = add i32 %63, i32 %65;
    store i32* %29 with i32 %66;
    ubr ^b4;
  ^while.body9:
    i32* %67 = getelementptr &(i32* %5)[i32 %50];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %67)[i64 2];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %67)[i64 3];
    store i32* %70 with i32 0;
    ubr ^super.header3;
  ^while.body10:
    i32 %71 = phi [^super.header2, i32 %47] [^while.body10, i32 %73];
    i32* %72 = getelementptr &(i32* %7)[i32 %71];
    store i32* %72 with i32 0;
    i32 %73 = add i32 %71, i32 1;
    i1 %74 = scmp lt i32 %73, i32 %0;
    cbr i1 %74(prob = 0.97), ^while.body10, ^while.header1;
  ^super.header4:
    i32 %75 = phi [^super.header3, i32 %50] [^while.body12, i32 %76];
    i32 %76 = add i32 %75, i32 4;
    i1 %77 = scmp lt i32 %76, i32 %0;
    cbr i1 %77(prob = 0.89), ^while.body12, ^super.header5;
  ^while.header4:
    i32 %78 = phi [^while.header3, i32 0] [^b7, i32 %93];
    i1 %79 = scmp lt i32 %78, i32 %0;
    cbr i1 %79(prob = 0.97), ^while.body13, ^b5;
  ^while.body11:
    i32 %80 = add i32 %22, i32 1;
    i1 %81 = scmp lt i32 %80, i32 50;
    cbr i1 %81(prob = 0.98), ^while.body3, ^b6;
  ^while.body12:
    i32* %82 = getelementptr &(i32* %5)[i32 %75];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %82)[i64 1];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %82)[i64 2];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %82)[i64 3];
    store i32* %85 with i32 0;
    ubr ^super.header4;
  ^b5:
    i32 %86 = add i32 %53, i32 1;
    ubr ^while.header3;
  ^while.body13:
    i32* %87 = getelementptr &([2010 * i32]* %55)[i64 0][i32 %78];
    i32 %88 = load i32* %87;
    i1 %89 = scmp eq i32 %88, i32 0;
    cbr i1 %89(prob = 0.5), ^b7, ^if.else1;
  ^super.header5:
    i32 %90 = phi [^super.header4, i32 %75] [^while.body14, i32 %91];
    i32 %91 = add i32 %90, i32 4;
    i1 %92 = scmp lt i32 %91, i32 %0;
    cbr i1 %92(prob = 0.89), ^while.body14, ^while.body15;
  ^b6:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %7);
    ret i32 0;
  ^b7:
    i32 %93 = add i32 %78, i32 1;
    ubr ^while.header4;
  ^while.body14:
    i32* %94 = getelementptr &(i32* %5)[i32 %90];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %94)[i64 1];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %94)[i64 2];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %94)[i64 3];
    store i32* %97 with i32 0;
    ubr ^super.header5;
  ^if.else1:
    i32* %98 = getelementptr &(i32* %7)[i32 %78];
    i32 %99 = load i32* %56;
    i32 %100 = load i32* %98;
    i32 %101 = mul i32 %88, i32 %100;
    i32 %102 = add i32 %99, i32 %101;
    store i32* %56 with i32 %102;
    ubr ^b7;
  ^while.body15:
    i32 %103 = phi [^super.header5, i32 %90] [^while.body15, i32 %105];
    i32* %104 = getelementptr &(i32* %5)[i32 %103];
    store i32* %104 with i32 0;
    i32 %105 = add i32 %103, i32 1;
    i1 %106 = scmp lt i32 %105, i32 %0;
    cbr i1 %106(prob = 0.97), ^while.body15, ^while.header3;
}
