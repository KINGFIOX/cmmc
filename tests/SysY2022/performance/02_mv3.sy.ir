internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A { Flexible };
internal [2010 * i32]* @B { Flexible };
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp sgt i32 %0, i32 4;
    [2010 * [2010 * i32]]* %3 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 0] [^b, i32 %7];
    i1 %5 = icmp sgt i32 %0, i32 %4;
    cbr i1 %5(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^while.header2:
    cbr i1 %1(prob = 0.97), ^prebody1, ^b1;
  ^prebody:
    [2010 * i32]* %6 = getelementptr &([2010 * [2010 * i32]]* %3)[i64 0][i32 %4];
    ubr ^while.body;
  ^b:
    i32 %7 = add i32 %4, i32 1;
    ubr ^while.header;
  ^prebody1:
    [2010 * i32]* %8 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    ubr ^while.body1;
  ^b1:
    call (i32) -> void @starttime(i32 59);
    [2010 * i32]* %9 = getelementptr &([2010 * [2010 * i32]]* %3)[i64 0][i64 0];
    [2010 * i32]* %10 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %11 = getelementptr &([2010 * i32]* %10)[i64 0][i64 0];
    [2010 * i32]* %12 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %13 = getelementptr &([2010 * i32]* %12)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body:
    i32 %14 = phi [^prebody, i32 0] [^while.body, i32 %17];
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([2010 * i32]* %6)[i64 0][i32 %14];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = icmp sgt i32 %0, i32 %17;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
  ^while.body1:
    i32 %19 = phi [^prebody1, i32 0] [^while.body1, i32 %22];
    i32 %20 = call () -> i32 @getint();
    i32* %21 = getelementptr &([2010 * i32]* %8)[i64 0][i32 %19];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %19, i32 1;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
  ^while.body2:
    i32 %24 = phi [^b1, i32 0] [^while.body9, i32 %71];
    cbr i1 %1(prob = 0.97), ^super.header, ^while.header3;
  ^super.header:
    cbr i1 %2(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header3:
    i32 %25 = phi [^while.body2, i32 0] [^while.body4, i32 0] [^b2, i32 %43];
    i1 %26 = icmp sgt i32 %0, i32 %25;
    [2010 * i32]* %27 = getelementptr &([2010 * i32]* %9)[i32 %25];
    i32* %28 = getelementptr &(i32* %13)[i32 %25];
    cbr i1 %26(prob = 0.97), ^while.header4, ^while.body5;
  ^while.body3:
    i32 %29 = phi [^super.header, i32 0] [^while.body3, i32 %36];
    i32* %30 = getelementptr &(i32* %13)[i32 %29];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    i32 %34 = add i32 %29, i32 8;
    i1 %35 = icmp sgt i32 %0, i32 %34;
    i32 %36 = add i32 %29, i32 4;
    cbr i1 %35(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %37 = phi [^super.header, i32 0] [^while.body3, i32 %36] [^while.body4, i32 %39];
    i32* %38 = getelementptr &(i32* %13)[i32 %37];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %37, i32 1;
    i1 %40 = icmp sgt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.75), ^while.body4, ^while.header3;
  ^while.header4:
    i32 %41 = phi [^while.header3, i32 0] [^b3, i32 %51];
    i1 %42 = icmp sgt i32 %0, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body6, ^b2;
  ^while.body5:
    cbr i1 %1(prob = 0.97), ^super.header1, ^while.header5;
  ^b2:
    i32 %43 = add i32 %25, i32 1;
    ubr ^while.header3;
  ^while.body6:
    i32* %44 = getelementptr &([2010 * i32]* %27)[i64 0][i32 %41];
    i32 %45 = load i32* %44;
    i1 %46 = icmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^b3, ^if.else;
  ^super.header1:
    cbr i1 %2(prob = 0.89), ^while.body7, ^while.body8;
  ^while.header5:
    i32 %47 = phi [^while.body5, i32 0] [^while.body8, i32 0] [^b4, i32 %73];
    i1 %48 = icmp sgt i32 %0, i32 %47;
    [2010 * i32]* %49 = getelementptr &([2010 * i32]* %9)[i32 %47];
    i32* %50 = getelementptr &(i32* %11)[i32 %47];
    cbr i1 %48(prob = 0.97), ^while.header6, ^while.body9;
  ^b3:
    i32 %51 = add i32 %41, i32 1;
    ubr ^while.header4;
  ^if.else:
    i32* %52 = getelementptr &(i32* %11)[i32 %41];
    i32 %53 = load i32* %28;
    i32 %54 = load i32* %52;
    i32 %55 = mul i32 %45, i32 %54;
    i32 %56 = add i32 %53, i32 %55;
    store i32* %28 with i32 %56;
    ubr ^b3;
  ^while.body7:
    i32 %57 = phi [^super.header1, i32 0] [^while.body7, i32 %64];
    i32* %58 = getelementptr &(i32* %11)[i32 %57];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %58)[i64 1];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %58)[i64 2];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %58)[i64 3];
    store i32* %61 with i32 0;
    i32 %62 = add i32 %57, i32 8;
    i1 %63 = icmp sgt i32 %0, i32 %62;
    i32 %64 = add i32 %57, i32 4;
    cbr i1 %63(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body8:
    i32 %65 = phi [^super.header1, i32 0] [^while.body7, i32 %64] [^while.body8, i32 %67];
    i32* %66 = getelementptr &(i32* %11)[i32 %65];
    store i32* %66 with i32 0;
    i32 %67 = add i32 %65, i32 1;
    i1 %68 = icmp sgt i32 %0, i32 %67;
    cbr i1 %68(prob = 0.75), ^while.body8, ^while.header5;
  ^while.header6:
    i32 %69 = phi [^while.header5, i32 0] [^b6, i32 %77];
    i1 %70 = icmp sgt i32 %0, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.body10, ^b4;
  ^while.body9:
    i32 %71 = add i32 %24, i32 1;
    i1 %72 = icmp slt i32 %71, i32 50;
    cbr i1 %72(prob = 0.98), ^while.body2, ^b5;
  ^b4:
    i32 %73 = add i32 %47, i32 1;
    ubr ^while.header5;
  ^while.body10:
    i32* %74 = getelementptr &([2010 * i32]* %49)[i64 0][i32 %69];
    i32 %75 = load i32* %74;
    i1 %76 = icmp eq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^b6, ^if.else1;
  ^b5:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %13);
    ret i32 0;
  ^b6:
    i32 %77 = add i32 %69, i32 1;
    ubr ^while.header6;
  ^if.else1:
    i32* %78 = getelementptr &(i32* %13)[i32 %69];
    i32 %79 = load i32* %50;
    i32 %80 = load i32* %78;
    i32 %81 = mul i32 %75, i32 %80;
    i32 %82 = add i32 %79, i32 %81;
    store i32* %50 with i32 %82;
    ubr ^b6;
}
