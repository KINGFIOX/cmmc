internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 0] [^b1, i32 %8];
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    cbr i1 %4(prob = 0.97), ^indirect, ^b1;
^b:
    cbr i1 %4(prob = 0.97), ^while.body1, ^b2;
^indirect:
    [2010 * i32]* %7 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body2;
^b1:
    i32 %8 = add i32 %5, i32 1;
    ubr ^while.header;
^b2:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
^while.body1:
    i32 %9 = phi [^b, i32 0] [^while.body1, i32 %12];
    i32* %10 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %9];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %9, i32 1;
    i1 %13 = scmp lt i32 %12, i32 %0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %14 = phi [^indirect, i32 0] [^while.body2, i32 %17];
    i32* %15 = getelementptr &([2010 * i32]* %7)[i64 0][i32 %14];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %0;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b1;
^while.body3:
    i32 %19 = phi [^b2, i32 0] [^while.body8, i32 %50];
    cbr i1 %4(prob = 0.97), ^while.body4, ^while.header1;
^while.body4:
    i32 %20 = phi [^while.body3, i32 0] [^while.body4, i32 %22];
    i32* %21 = getelementptr &(i32* %3)[i32 %20];
    store i32* %21 with i32 0;
    i32 %22 = add i32 %20, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %0;
    cbr i1 %23(prob = 0.97), ^while.body4, ^while.header1;
^while.header1:
    i32 %24 = phi [^while.body3, i32 0] [^while.body4, i32 0] [^b3, i32 %30];
    i1 %25 = scmp lt i32 %24, i32 %0;
    [2010 * i32]* %26 = getelementptr &([2010 * i32]* %1)[i32 %24];
    i32* %27 = getelementptr &(i32* %3)[i32 %24];
    cbr i1 %25(prob = 0.97), ^while.header2, ^while.body5;
^while.header2:
    i32 %28 = phi [^while.header1, i32 0] [^b4, i32 %42];
    i1 %29 = scmp lt i32 %28, i32 %0;
    cbr i1 %29(prob = 0.97), ^while.body6, ^b3;
^while.body5:
    cbr i1 %4(prob = 0.97), ^while.body7, ^while.header3;
^b3:
    i32 %30 = add i32 %24, i32 1;
    ubr ^while.header1;
^while.body6:
    i32* %31 = getelementptr &([2010 * i32]* %26)[i64 0][i32 %28];
    i32 %32 = load i32* %31;
    i1 %33 = scmp eq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^b4, ^if.else;
^while.body7:
    i32 %34 = phi [^while.body5, i32 0] [^while.body7, i32 %36];
    i32* %35 = getelementptr &(i32* %2)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = scmp lt i32 %36, i32 %0;
    cbr i1 %37(prob = 0.97), ^while.body7, ^while.header3;
^while.header3:
    i32 %38 = phi [^while.body5, i32 0] [^while.body7, i32 0] [^b5, i32 %52];
    i1 %39 = scmp lt i32 %38, i32 %0;
    [2010 * i32]* %40 = getelementptr &([2010 * i32]* %1)[i32 %38];
    i32* %41 = getelementptr &(i32* %2)[i32 %38];
    cbr i1 %39(prob = 0.97), ^while.header4, ^while.body8;
^b4:
    i32 %42 = add i32 %28, i32 1;
    ubr ^while.header2;
^if.else:
    i32 %43 = load i32* %27;
    i32* %44 = getelementptr &(i32* %2)[i32 %28];
    i32 %45 = load i32* %44;
    i32 %46 = mul i32 %32, i32 %45;
    i32 %47 = add i32 %43, i32 %46;
    store i32* %27 with i32 %47;
    ubr ^b4;
^while.header4:
    i32 %48 = phi [^while.header3, i32 0] [^b7, i32 %56];
    i1 %49 = scmp lt i32 %48, i32 %0;
    cbr i1 %49(prob = 0.97), ^while.body9, ^b5;
^while.body8:
    i32 %50 = add i32 %19, i32 1;
    i1 %51 = scmp lt i32 %50, i32 50;
    cbr i1 %51(prob = 0.98), ^while.body3, ^b6;
^b5:
    i32 %52 = add i32 %38, i32 1;
    ubr ^while.header3;
^while.body9:
    i32* %53 = getelementptr &([2010 * i32]* %40)[i64 0][i32 %48];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^b7, ^if.else1;
^b6:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %3);
    ret i32 0;
^b7:
    i32 %56 = add i32 %48, i32 1;
    ubr ^while.header4;
^if.else1:
    i32 %57 = load i32* %41;
    i32* %58 = getelementptr &(i32* %3)[i32 %48];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %54, i32 %59;
    i32 %61 = add i32 %57, i32 %60;
    store i32* %41 with i32 %61;
    ubr ^b7;
}
