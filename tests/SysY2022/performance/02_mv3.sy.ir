internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    [4 * i8]* %2 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_0 to [4 * i8]*;
    i32* %3 = ptradd [4 * i8]* %2, i32 0;
    [4 * i8]* %4 = ptrcast [4 * i8]* @cmmc_parallel_body_payload_1 to [4 * i8]*;
    i32* %5 = ptradd [4 * i8]* %4, i32 0;
    [2010 * [2010 * i32]]* %6 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    i8* %7 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    i8* %8 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^b2, i32 %26];
    [2010 * i32]* %10 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i32 %9];
    ubr ^while.body1;
  ^b:
    [2010 * i32]* %11 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    cbr i1 %1(prob = 0.984615), ^while.body2, ^b1;
  ^b1:
    call (i32) -> void @starttime(i32 59);
    [2010 * i32]* %12 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %13 = getelementptr &([2010 * i32]* %12)[i64 0][i64 0];
    [2010 * i32]* %14 = getelementptr &([2010 * [2010 * i32]]* %6)[i64 0][i64 0];
    i32* %15 = getelementptr &([2010 * i32]* %11)[i64 0][i64 0];
    ubr ^while.body3;
  ^while.body1:
    i32 %16 = phi [^while.body, i32 0] [^while.body1, i32 %19];
    i32 %17 = call () -> i32 @getint();
    i32* %18 = getelementptr &([2010 * i32]* %10)[i64 0][i32 %16];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %16, i32 1;
    i1 %20 = icmp sgt i32 %0, i32 %19;
    cbr i1 %20(prob = 0.984615), ^while.body1, ^b2;
  ^while.body2:
    i32 %21 = phi [^b, i32 0] [^while.body2, i32 %24];
    i32 %22 = call () -> i32 @getint();
    i32* %23 = getelementptr &([2010 * i32]* %11)[i64 0][i32 %21];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = icmp sgt i32 %0, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body2, ^b1;
  ^b2:
    i32 %26 = add i32 %9, i32 1;
    i1 %27 = icmp sgt i32 %0, i32 %26;
    cbr i1 %27(prob = 0.984615), ^while.body, ^b;
  ^while.body3:
    i32 %28 = phi [^b1, i32 0] [^b4, i32 %29];
    cbr i1 %1(prob = 0.984615), ^b3, ^b4;
  ^b3:
    store i32* %3 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %7);
    ubr ^while.body4;
  ^b4:
    i32 %29 = add i32 %28, i32 1;
    i1 %30 = icmp slt i32 %29, i32 50;
    cbr i1 %30(prob = 0.98), ^while.body3, ^b5;
  ^while.body4:
    i32 %31 = phi [^b3, i32 0] [^b8, i32 %45];
    [2010 * i32]* %32 = getelementptr &([2010 * i32]* %14)[i32 %31];
    i32* %33 = getelementptr &(i32* %13)[i32 %31];
    ubr ^b6;
  ^b5:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %13);
    ret i32 0;
  ^b6:
    i32 %34 = phi [^while.body4, i32 0] [^b7, i32 %43];
    i32* %35 = getelementptr &([2010 * i32]* %32)[i64 0][i32 %34];
    i32 %36 = load i32* %35;
    i1 %37 = icmp eq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^b7, ^if.else;
  ^if.else:
    i32* %38 = getelementptr &(i32* %15)[i32 %34];
    i32 %39 = load i32* %33;
    i32 %40 = load i32* %38;
    i32 %41 = mul i32 %36, i32 %40;
    i32 %42 = add i32 %39, i32 %41;
    store i32* %33 with i32 %42;
    ubr ^b7;
  ^b7:
    i32 %43 = add i32 %34, i32 1;
    i1 %44 = icmp sgt i32 %0, i32 %43;
    cbr i1 %44(prob = 0.984615), ^b6, ^b8;
  ^b8:
    i32 %45 = add i32 %31, i32 1;
    i1 %46 = icmp sgt i32 %0, i32 %45;
    cbr i1 %46(prob = 0.984615), ^while.body4, ^b9;
  ^b9:
    store i32* %5 with i32 %0;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %8);
    ubr ^while.body5;
  ^while.body5:
    i32 %47 = phi [^b9, i32 0] [^b12, i32 %61];
    [2010 * i32]* %48 = getelementptr &([2010 * i32]* %14)[i32 %47];
    i32* %49 = getelementptr &(i32* %15)[i32 %47];
    ubr ^b10;
  ^b10:
    i32 %50 = phi [^while.body5, i32 0] [^b11, i32 %59];
    i32* %51 = getelementptr &([2010 * i32]* %48)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i1 %53 = icmp eq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^b11, ^if.else1;
  ^if.else1:
    i32* %54 = getelementptr &(i32* %13)[i32 %50];
    i32 %55 = load i32* %49;
    i32 %56 = load i32* %54;
    i32 %57 = mul i32 %52, i32 %56;
    i32 %58 = add i32 %55, i32 %57;
    store i32* %49 with i32 %58;
    ubr ^b11;
  ^b11:
    i32 %59 = add i32 %50, i32 1;
    i1 %60 = icmp sgt i32 %0, i32 %59;
    cbr i1 %60(prob = 0.984615), ^b10, ^b12;
  ^b12:
    i32 %61 = add i32 %47, i32 1;
    i1 %62 = icmp sgt i32 %0, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body5, ^b4;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [2010 * i32]* %4 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %5 = getelementptr &([2010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoMemoryRead NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    i32 %2 = add i32 %0, i32 3;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    [2010 * i32]* %4 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %5 = getelementptr &([2010 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    i32 %6 = add i32 %0, i32 15;
    i32 %7 = add i32 %1, i32 -3;
    i1 %8 = icmp slt i32 %6, i32 %7;
    i32 %9 = add i32 %1, i32 -18;
    cbr i1 %8(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^b, i32 %0] [^scalar.header1, i32 %32] [^b3, i32 %43];
    i1 %11 = icmp sgt i32 %1, i32 %10;
    cbr i1 %11(prob = 0.75), ^b2, ^scalar.final;
  ^b1:
    i32 %12 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32* %13 = getelementptr &(i32* %5)[i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %9, i32 %29;
    cbr i1 %30(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 %0] [^b1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^b1, i32 %29];
    i1 %33 = icmp sgt i32 %7, i32 %31;
    cbr i1 %33(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^b2, i32 %36];
    i32* %35 = getelementptr &(i32* %5)[i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %1, i32 %36;
    cbr i1 %37(prob = 0.75), ^b2, ^scalar.final;
  ^scalar.final:
    ret;
  ^b3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^b3, i32 %43];
    i32* %39 = getelementptr &(i32* %5)[i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %7, i32 %43;
    cbr i1 %44(prob = 0.75), ^b3, ^scalar.header;
}
internal [4 * i8]* @cmmc_parallel_body_payload_1, align 8;
