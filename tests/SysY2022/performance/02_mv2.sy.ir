internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A, align 8 { Flexible };
internal [2010 * i32]* @B, align 8 { Flexible };
internal [2010 * i32]* @C, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -4;
    i1 %2 = icmp sgt i32 %1, i32 16;
    i1 %3 = icmp sgt i32 %0, i32 4;
    i32 %4 = add i32 %0, i32 -20;
    [2010 * i32]* %5 = ptrcast [2010 * i32]* @C to [2010 * i32]*;
    i32* %6 = getelementptr &([2010 * i32]* %5)[i64 0][i64 0];
    [2010 * [2010 * i32]]* %7 = ptrcast [2010 * [2010 * i32]]* @A to [2010 * [2010 * i32]]*;
    [2010 * i32]* %8 = getelementptr &([2010 * [2010 * i32]]* %7)[i64 0][i64 0];
    [2010 * i32]* %9 = ptrcast [2010 * i32]* @B to [2010 * i32]*;
    i32* %10 = getelementptr &([2010 * i32]* %9)[i64 0][i64 0];
    ubr ^while.header;
  ^while.header:
    i32 %11 = phi [^entry, i32 0] [^b1, i32 %25];
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.984615), ^prebody, ^while.header1;
  ^prebody:
    [2010 * i32]* %13 = getelementptr &([2010 * [2010 * i32]]* %7)[i64 0][i32 %11];
    ubr ^while.body;
  ^while.header1:
    i1 %14 = icmp sgt i32 %0, i32 0;
    cbr i1 %14(prob = 0.984615), ^while.body1, ^b;
  ^while.body:
    i32 %15 = phi [^prebody, i32 0] [^while.body, i32 %18];
    i32 %16 = call () -> i32 @getint();
    i32* %17 = getelementptr &([2010 * i32]* %13)[i64 0][i32 %15];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %0, i32 %18;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body2;
  ^while.body1:
    i32 %20 = phi [^while.header1, i32 0] [^while.body1, i32 %23];
    i32 %21 = call () -> i32 @getint();
    i32* %22 = getelementptr &([2010 * i32]* %9)[i64 0][i32 %20];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %20, i32 1;
    i1 %24 = icmp sgt i32 %0, i32 %23;
    cbr i1 %24(prob = 0.984615), ^while.body1, ^b;
  ^b1:
    i32 %25 = add i32 %11, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32 %26 = phi [^b, i32 0] [^b6, i32 %81];
    cbr i1 %14(prob = 0.984615), ^super.header, ^while.header2;
  ^super.header:
    cbr i1 %3(prob = 0.941176), ^super.header1, ^while.body3;
  ^while.header2:
    i32 %27 = phi [^while.body2, i32 0] [^while.body3, i32 0] [^b3, i32 %54];
    i1 %28 = icmp sgt i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.header3, ^b2;
  ^super.header1:
    cbr i1 %2(prob = 0.941176), ^while.body4, ^while.body5;
  ^while.body3 {scalar}:
    i32 %29 = phi [^super.header, i32 0] [^while.body3, i32 %31] [^while.body5, i32 %64];
    i32* %30 = getelementptr &(i32* %6)[i32 %29];
    store i32* %30 with i32 0;
    i32 %31 = add i32 %29, i32 1;
    i1 %32 = icmp sgt i32 %0, i32 %31;
    cbr i1 %32(prob = 0.75), ^while.body3, ^while.header2;
  ^while.header3:
    i32* %33 = getelementptr &(i32* %6)[i32 %27];
    [2010 * i32]* %34 = getelementptr &([2010 * i32]* %8)[i32 %27];
    cbr i1 %14(prob = 0.984615), ^b4, ^b3;
  ^b2:
    cbr i1 %14(prob = 0.984615), ^super.header2, ^while.header4;
  ^while.body4:
    i32 %35 = phi [^super.header1, i32 0] [^while.body4, i32 %52];
    i32* %36 = getelementptr &(i32* %6)[i32 %35];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %36)[i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %36)[i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %36)[i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %36)[i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %36)[i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %36)[i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %36)[i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %36)[i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %36)[i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %36)[i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %36)[i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %36)[i64 15];
    store i32* %51 with i32 0;
    i32 %52 = add i32 %35, i32 16;
    i1 %53 = icmp sgt i32 %4, i32 %52;
    cbr i1 %53(prob = 0.941176), ^while.body4, ^while.body5;
  ^b3:
    i32 %54 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^b4:
    i32 %55 = phi [^while.header3, i32 0] [^b5, i32 %73];
    i32* %56 = getelementptr &([2010 * i32]* %34)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i1 %58 = icmp eq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^b5, ^if.else;
  ^while.body5 {scalar}:
    i32 %59 = phi [^super.header1, i32 0] [^while.body4, i32 %52] [^while.body5, i32 %64];
    i32* %60 = getelementptr &(i32* %6)[i32 %59];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %60)[i64 1];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %60)[i64 2];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %60)[i64 3];
    store i32* %63 with i32 0;
    i32 %64 = add i32 %59, i32 4;
    i1 %65 = icmp sgt i32 %1, i32 %64;
    cbr i1 %65(prob = 0.75), ^while.body5, ^while.body3;
  ^super.header2:
    cbr i1 %3(prob = 0.941176), ^super.header3, ^while.body6;
  ^while.header4:
    i32 %66 = phi [^b2, i32 0] [^while.body6, i32 0] [^b7, i32 %102];
    i1 %67 = icmp sgt i32 %0, i32 %66;
    cbr i1 %67(prob = 0.984615), ^while.header5, ^b6;
  ^if.else:
    i32* %68 = getelementptr &(i32* %10)[i32 %55];
    i32 %69 = load i32* %33;
    i32 %70 = load i32* %68;
    i32 %71 = mul i32 %57, i32 %70;
    i32 %72 = add i32 %69, i32 %71;
    store i32* %33 with i32 %72;
    ubr ^b5;
  ^b5:
    i32 %73 = add i32 %55, i32 1;
    i1 %74 = icmp sgt i32 %0, i32 %73;
    cbr i1 %74(prob = 0.984615), ^b4, ^b3;
  ^super.header3:
    cbr i1 %2(prob = 0.941176), ^while.body7, ^while.body8;
  ^while.body6 {scalar}:
    i32 %75 = phi [^super.header2, i32 0] [^while.body6, i32 %77] [^while.body8, i32 %112];
    i32* %76 = getelementptr &(i32* %10)[i32 %75];
    store i32* %76 with i32 0;
    i32 %77 = add i32 %75, i32 1;
    i1 %78 = icmp sgt i32 %0, i32 %77;
    cbr i1 %78(prob = 0.75), ^while.body6, ^while.header4;
  ^while.header5:
    i32* %79 = getelementptr &(i32* %10)[i32 %66];
    [2010 * i32]* %80 = getelementptr &([2010 * i32]* %8)[i32 %66];
    cbr i1 %14(prob = 0.984615), ^b8, ^b7;
  ^b6:
    i32 %81 = add i32 %26, i32 1;
    i1 %82 = icmp slt i32 %81, i32 50;
    cbr i1 %82(prob = 0.98), ^while.body2, ^b9;
  ^while.body7:
    i32 %83 = phi [^super.header3, i32 0] [^while.body7, i32 %100];
    i32* %84 = getelementptr &(i32* %10)[i32 %83];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %84)[i64 1];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %84)[i64 2];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %84)[i64 3];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %84)[i64 4];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %84)[i64 5];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %84)[i64 6];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %84)[i64 7];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %84)[i64 8];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %84)[i64 9];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %84)[i64 10];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %84)[i64 11];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %84)[i64 12];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %84)[i64 13];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %84)[i64 14];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %84)[i64 15];
    store i32* %99 with i32 0;
    i32 %100 = add i32 %83, i32 16;
    i1 %101 = icmp sgt i32 %4, i32 %100;
    cbr i1 %101(prob = 0.941176), ^while.body7, ^while.body8;
  ^b7:
    i32 %102 = add i32 %66, i32 1;
    ubr ^while.header4;
  ^b8:
    i32 %103 = phi [^while.header5, i32 0] [^b10, i32 %119];
    i32* %104 = getelementptr &([2010 * i32]* %80)[i64 0][i32 %103];
    i32 %105 = load i32* %104;
    i1 %106 = icmp eq i32 %105, i32 0;
    cbr i1 %106(prob = 0.5), ^b10, ^if.else1;
  ^while.body8 {scalar}:
    i32 %107 = phi [^super.header3, i32 0] [^while.body7, i32 %100] [^while.body8, i32 %112];
    i32* %108 = getelementptr &(i32* %10)[i32 %107];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %108)[i64 1];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %108)[i64 2];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %108)[i64 3];
    store i32* %111 with i32 0;
    i32 %112 = add i32 %107, i32 4;
    i1 %113 = icmp sgt i32 %1, i32 %112;
    cbr i1 %113(prob = 0.75), ^while.body8, ^while.body6;
  ^b9:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %6);
    ret i32 0;
  ^if.else1:
    i32* %114 = getelementptr &(i32* %6)[i32 %103];
    i32 %115 = load i32* %79;
    i32 %116 = load i32* %114;
    i32 %117 = mul i32 %105, i32 %116;
    i32 %118 = add i32 %115, i32 %117;
    store i32* %79 with i32 %118;
    ubr ^b10;
  ^b10:
    i32 %119 = add i32 %103, i32 1;
    i1 %120 = icmp sgt i32 %0, i32 %119;
    cbr i1 %120(prob = 0.984615), ^b8, ^b7;
}
