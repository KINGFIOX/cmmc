internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    i1 %4 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 0] [^b1, i32 %8];
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    cbr i1 %4(prob = 0.97), ^indirect, ^b1;
^b:
    cbr i1 %4(prob = 0.97), ^while.body1, ^b2;
^indirect:
    [2010 * i32]* %7 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body2;
^b1:
    i32 %8 = add i32 %5, i32 1;
    ubr ^while.header;
^b2:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
^while.body1:
    i32 %9 = phi [^b, i32 0] [^while.body1, i32 %12];
    i32* %10 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %9];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %9, i32 1;
    i1 %13 = scmp lt i32 %12, i32 %0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %14 = phi [^indirect, i32 0] [^while.body2, i32 %17];
    i32* %15 = getelementptr &([2010 * i32]* %7)[i64 0][i32 %14];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %0;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b1;
^while.body3:
    i32 %19 = phi [^b2, i32 0] [^while.body11, i32 %125];
    cbr i1 %4(prob = 0.97), ^super.header, ^while.header1;
^super.header:
    i32 %20 = phi [^while.body3, i32 0] [^while.body4, i32 %21];
    i32 %21 = add i32 %20, i32 16;
    i1 %22 = scmp lt i32 %21, i32 %0;
    cbr i1 %22(prob = 0.67), ^while.body4, ^super.header1;
^while.header1:
    i32 %23 = phi [^while.body3, i32 0] [^b3, i32 %64] [^while.body10, i32 0];
    i1 %24 = scmp lt i32 %23, i32 %0;
    [2010 * i32]* %25 = getelementptr &([2010 * i32]* %1)[i32 %23];
    i32* %26 = getelementptr &(i32* %3)[i32 %23];
    cbr i1 %24(prob = 0.97), ^while.header2, ^while.body5;
^while.body4:
    i32* %27 = getelementptr &(i32* %3)[i32 %20];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %27)[i64 1];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %27)[i64 2];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %27)[i64 3];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %27)[i64 4];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %27)[i64 5];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %27)[i64 6];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %27)[i64 7];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %27)[i64 8];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %27)[i64 9];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %27)[i64 10];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %27)[i64 11];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %27)[i64 12];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %27)[i64 13];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %27)[i64 14];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %27)[i64 15];
    store i32* %42 with i32 0;
    ubr ^super.header;
^super.header1:
    i32 %43 = phi [^super.header, i32 %20] [^while.body6, i32 %44];
    i32 %44 = add i32 %43, i32 16;
    i1 %45 = scmp lt i32 %44, i32 %0;
    cbr i1 %45(prob = 0.67), ^while.body6, ^super.header2;
^while.header2:
    i32 %46 = phi [^while.header1, i32 0] [^b4, i32 %78];
    i1 %47 = scmp lt i32 %46, i32 %0;
    cbr i1 %47(prob = 0.97), ^while.body7, ^b3;
^while.body5:
    cbr i1 %4(prob = 0.97), ^super.header3, ^while.header3;
^while.body6:
    i32* %48 = getelementptr &(i32* %3)[i32 %43];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %48)[i64 1];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %48)[i64 2];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %48)[i64 3];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %48)[i64 4];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %48)[i64 5];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %48)[i64 6];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %48)[i64 7];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %48)[i64 8];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %48)[i64 9];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %48)[i64 10];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %48)[i64 11];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %48)[i64 12];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %48)[i64 13];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %48)[i64 14];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %48)[i64 15];
    store i32* %63 with i32 0;
    ubr ^super.header1;
^b3:
    i32 %64 = add i32 %23, i32 1;
    ubr ^while.header1;
^while.body7:
    i32* %65 = getelementptr &([2010 * i32]* %25)[i64 0][i32 %46];
    i32 %66 = load i32* %65;
    i1 %67 = scmp eq i32 %66, i32 0;
    cbr i1 %67(prob = 0.5), ^b4, ^if.else;
^super.header2:
    i32 %68 = phi [^super.header1, i32 %43] [^while.body8, i32 %69];
    i32 %69 = add i32 %68, i32 16;
    i1 %70 = scmp lt i32 %69, i32 %0;
    cbr i1 %70(prob = 0.67), ^while.body8, ^while.body10;
^super.header3:
    i32 %71 = phi [^while.body5, i32 0] [^while.body9, i32 %72];
    i32 %72 = add i32 %71, i32 16;
    i1 %73 = scmp lt i32 %72, i32 %0;
    cbr i1 %73(prob = 0.67), ^while.body9, ^super.header4;
^while.header3:
    i32 %74 = phi [^while.body5, i32 0] [^b5, i32 %143] [^while.body15, i32 0];
    i1 %75 = scmp lt i32 %74, i32 %0;
    [2010 * i32]* %76 = getelementptr &([2010 * i32]* %1)[i32 %74];
    i32* %77 = getelementptr &(i32* %2)[i32 %74];
    cbr i1 %75(prob = 0.97), ^while.header4, ^while.body11;
^b4:
    i32 %78 = add i32 %46, i32 1;
    ubr ^while.header2;
^while.body8:
    i32* %79 = getelementptr &(i32* %3)[i32 %68];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %79)[i64 1];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %79)[i64 2];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %79)[i64 3];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %79)[i64 4];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %79)[i64 5];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %79)[i64 6];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %79)[i64 7];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %79)[i64 8];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %79)[i64 9];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %79)[i64 10];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %79)[i64 11];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %79)[i64 12];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %79)[i64 13];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %79)[i64 14];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %79)[i64 15];
    store i32* %94 with i32 0;
    ubr ^super.header2;
^if.else:
    i32 %95 = load i32* %26;
    i32* %96 = getelementptr &(i32* %2)[i32 %46];
    i32 %97 = load i32* %96;
    i32 %98 = mul i32 %66, i32 %97;
    i32 %99 = add i32 %95, i32 %98;
    store i32* %26 with i32 %99;
    ubr ^b4;
^while.body9:
    i32* %100 = getelementptr &(i32* %2)[i32 %71];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %100)[i64 1];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %100)[i64 2];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %100)[i64 3];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %100)[i64 4];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %100)[i64 5];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %100)[i64 6];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %100)[i64 7];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %100)[i64 8];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %100)[i64 9];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %100)[i64 10];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %100)[i64 11];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %100)[i64 12];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %100)[i64 13];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %100)[i64 14];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %100)[i64 15];
    store i32* %115 with i32 0;
    ubr ^super.header3;
^while.body10:
    i32 %116 = phi [^super.header2, i32 %68] [^while.body10, i32 %118];
    i32* %117 = getelementptr &(i32* %3)[i32 %116];
    store i32* %117 with i32 0;
    i32 %118 = add i32 %116, i32 1;
    i1 %119 = scmp lt i32 %118, i32 %0;
    cbr i1 %119(prob = 0.97), ^while.body10, ^while.header1;
^super.header4:
    i32 %120 = phi [^super.header3, i32 %71] [^while.body12, i32 %121];
    i32 %121 = add i32 %120, i32 16;
    i1 %122 = scmp lt i32 %121, i32 %0;
    cbr i1 %122(prob = 0.67), ^while.body12, ^super.header5;
^while.header4:
    i32 %123 = phi [^while.header3, i32 0] [^b7, i32 %150];
    i1 %124 = scmp lt i32 %123, i32 %0;
    cbr i1 %124(prob = 0.97), ^while.body13, ^b5;
^while.body11:
    i32 %125 = add i32 %19, i32 1;
    i1 %126 = scmp lt i32 %125, i32 50;
    cbr i1 %126(prob = 0.98), ^while.body3, ^b6;
^while.body12:
    i32* %127 = getelementptr &(i32* %2)[i32 %120];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %127)[i64 1];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %127)[i64 2];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %127)[i64 3];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %127)[i64 4];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %127)[i64 5];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %127)[i64 6];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %127)[i64 7];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %127)[i64 8];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %127)[i64 9];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %127)[i64 10];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %127)[i64 11];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %127)[i64 12];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %127)[i64 13];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %127)[i64 14];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %127)[i64 15];
    store i32* %142 with i32 0;
    ubr ^super.header4;
^b5:
    i32 %143 = add i32 %74, i32 1;
    ubr ^while.header3;
^while.body13:
    i32* %144 = getelementptr &([2010 * i32]* %76)[i64 0][i32 %123];
    i32 %145 = load i32* %144;
    i1 %146 = scmp eq i32 %145, i32 0;
    cbr i1 %146(prob = 0.5), ^b7, ^if.else1;
^super.header5:
    i32 %147 = phi [^super.header4, i32 %120] [^while.body14, i32 %148];
    i32 %148 = add i32 %147, i32 16;
    i1 %149 = scmp lt i32 %148, i32 %0;
    cbr i1 %149(prob = 0.67), ^while.body14, ^while.body15;
^b6:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %3);
    ret i32 0;
^b7:
    i32 %150 = add i32 %123, i32 1;
    ubr ^while.header4;
^while.body14:
    i32* %151 = getelementptr &(i32* %2)[i32 %147];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %151)[i64 1];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %151)[i64 2];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %151)[i64 3];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %151)[i64 4];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %151)[i64 5];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %151)[i64 6];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %151)[i64 7];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &(i32* %151)[i64 8];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %151)[i64 9];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %151)[i64 10];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %151)[i64 11];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %151)[i64 12];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %151)[i64 13];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %151)[i64 14];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %151)[i64 15];
    store i32* %166 with i32 0;
    ubr ^super.header5;
^if.else1:
    i32 %167 = load i32* %77;
    i32* %168 = getelementptr &(i32* %3)[i32 %123];
    i32 %169 = load i32* %168;
    i32 %170 = mul i32 %145, i32 %169;
    i32 %171 = add i32 %167, i32 %170;
    store i32* %77 with i32 %171;
    ubr ^b7;
^while.body15:
    i32 %172 = phi [^super.header5, i32 %147] [^while.body15, i32 %174];
    i32* %173 = getelementptr &(i32* %2)[i32 %172];
    store i32* %173 with i32 0;
    i32 %174 = add i32 %172, i32 1;
    i1 %175 = scmp lt i32 %174, i32 %0;
    cbr i1 %175(prob = 0.97), ^while.body15, ^while.header3;
}
