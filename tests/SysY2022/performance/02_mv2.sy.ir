internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    [2010 * i32]* %2 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %4 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^b2, i32 %17] [^entry, i32 0];
    [2010 * i32]* %6 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %5];
    ubr ^while.body1;
^b:
    cbr i1 %1(prob = 0.97), ^while.body2, ^b1;
^b1:
    call (i32) -> void @starttime(i32 59);
    ubr ^while.body3;
^while.body1:
    i32 %7 = phi [^while.body, i32 0] [^while.body1, i32 %10];
    i32* %8 = getelementptr &([2010 * i32]* %6)[i64 0][i32 %7];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32 %10 = add i32 %7, i32 1;
    i1 %11 = scmp lt i32 %10, i32 %0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %12 = phi [^b, i32 0] [^while.body2, i32 %15];
    i32* %13 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %12];
    i32 %14 = call () -> i32 @getint();
    store i32* %13 with i32 %14;
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %0;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b1;
^b2:
    i32 %17 = add i32 %5, i32 1;
    i1 %18 = scmp lt i32 %17, i32 %0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
^while.body3:
    i32 %19 = phi [^while.body10, i32 %55] [^b1, i32 0];
    cbr i1 %1(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    i32 %20 = phi [^while.body4, i32 %22] [^while.body3, i32 0];
    i32* %21 = getelementptr &(i32* %4)[i32 %20];
    store i32* %21 with i32 0;
    i32 %22 = add i32 %20, i32 1;
    i1 %23 = scmp lt i32 %22, i32 %0;
    cbr i1 %23(prob = 0.97), ^while.body4, ^b3;
^b3:
    cbr i1 %1(prob = 0.97), ^while.body5, ^while.body6;
^while.body5:
    i32 %24 = phi [^b4, i32 %36] [^b3, i32 0];
    i32 %25 = phi [^b4, i32 %34] [^b3, i32 %0];
    i1 %26 = scmp gt i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body7, ^b4;
^while.body6:
    cbr i1 %1(prob = 0.97), ^while.body8, ^b5;
^while.body7:
    i32 %27 = phi [^b6, i32 %50] [^while.body5, i32 0];
    i32 %28 = phi [^while.body5, i32 %25] [^b6, i32 %48];
    i32 %29 = phi [^while.body5, i32 %24] [^b6, i32 %49];
    [2010 * i32]* %30 = getelementptr &([2010 * i32]* %2)[i32 %29];
    i32* %31 = getelementptr &([2010 * i32]* %30)[i64 0][i32 %27];
    i32 %32 = load i32* %31;
    i1 %33 = scmp eq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^b6, ^if.else;
^b4:
    i32 %34 = phi [^while.body5, i32 %25] [^b6, i32 %48];
    i32 %35 = phi [^while.body5, i32 %24] [^b6, i32 %49];
    i32 %36 = add i32 %35, i32 1;
    i1 %37 = scmp lt i32 %36, i32 %34;
    cbr i1 %37(prob = 0.97), ^while.body5, ^while.body6;
^while.body8:
    i32 %38 = phi [^while.body8, i32 %40] [^while.body6, i32 0];
    i32* %39 = getelementptr &(i32* %3)[i32 %38];
    store i32* %39 with i32 0;
    i32 %40 = add i32 %38, i32 1;
    i1 %41 = scmp lt i32 %40, i32 %0;
    cbr i1 %41(prob = 0.97), ^while.body8, ^b5;
^b5:
    cbr i1 %1(prob = 0.97), ^while.body9, ^while.body10;
^if.else:
    i32* %42 = getelementptr &(i32* %4)[i32 %29];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %3)[i32 %27];
    i32 %45 = load i32* %44;
    i32 %46 = mul i32 %32, i32 %45;
    i32 %47 = add i32 %43, i32 %46;
    store i32* %42 with i32 %47;
    ubr ^b6;
^b6:
    i32 %48 = phi [^while.body7, i32 %28] [^if.else, i32 %0];
    i32 %49 = phi [^while.body7, i32 %29] [^if.else, i32 %24];
    i32 %50 = add i32 %27, i32 1;
    i1 %51 = scmp lt i32 %50, i32 %48;
    cbr i1 %51(prob = 0.97), ^while.body7, ^b4;
^while.body9:
    i32 %52 = phi [^b7, i32 %66] [^b5, i32 0];
    i32 %53 = phi [^b7, i32 %64] [^b5, i32 %0];
    i1 %54 = scmp gt i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body11, ^b7;
^while.body10:
    i32 %55 = add i32 %19, i32 1;
    i1 %56 = scmp lt i32 %55, i32 50;
    cbr i1 %56(prob = 0.98), ^while.body3, ^b8;
^while.body11:
    i32 %57 = phi [^b9, i32 %76] [^while.body9, i32 0];
    i32 %58 = phi [^while.body9, i32 %53] [^b9, i32 %74];
    i32 %59 = phi [^while.body9, i32 %52] [^b9, i32 %75];
    [2010 * i32]* %60 = getelementptr &([2010 * i32]* %2)[i32 %59];
    i32* %61 = getelementptr &([2010 * i32]* %60)[i64 0][i32 %57];
    i32 %62 = load i32* %61;
    i1 %63 = scmp eq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^b9, ^if.else1;
^b7:
    i32 %64 = phi [^while.body9, i32 %53] [^b9, i32 %74];
    i32 %65 = phi [^while.body9, i32 %52] [^b9, i32 %75];
    i32 %66 = add i32 %65, i32 1;
    i1 %67 = scmp lt i32 %66, i32 %64;
    cbr i1 %67(prob = 0.97), ^while.body9, ^while.body10;
^b8:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %4);
    ret i32 0;
^if.else1:
    i32* %68 = getelementptr &(i32* %3)[i32 %59];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %4)[i32 %57];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %62, i32 %71;
    i32 %73 = add i32 %69, i32 %72;
    store i32* %68 with i32 %73;
    ubr ^b9;
^b9:
    i32 %74 = phi [^while.body11, i32 %58] [^if.else1, i32 %0];
    i32 %75 = phi [^while.body11, i32 %59] [^if.else1, i32 %52];
    i32 %76 = add i32 %57, i32 1;
    i1 %77 = scmp lt i32 %76, i32 %74;
    cbr i1 %77(prob = 0.97), ^while.body11, ^b7;
}
