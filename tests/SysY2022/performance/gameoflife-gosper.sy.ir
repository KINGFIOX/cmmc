internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getch();
    i1 %4 = scmp gt i32 %0, i32 0;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^entry, i32 1] [^b, i32 %10];
    i1 %6 = scmp le i32 %5, i32 %1;
    cbr i1 %6(prob = 0.97), ^while.body, ^entry1;
^while.body:
    cbr i1 %4(prob = 0.97), ^indirect, ^b;
^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %7 = scmp gt i32 %2, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b1;
^indirect:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %5];
    ubr ^while.body2;
^b:
    i32 %9 = call () -> i32 @getch();
    i32 %10 = add i32 %5, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %11 = phi [^entry1, i32 %2] [^while.body3, i32 %42];
    i32 %12 = phi [^entry1, i32 1] [^while.body3, i32 %16];
    i1 %13 = scmp eq i32 %12, i32 1;
    [500 * [500 * i32]]* %14 = select i1 %13 ? [500 * [500 * i32]]* @sheet1 : [500 * [500 * i32]]* @sheet2;
    [500 * [500 * i32]]* %15 = select i1 %13 ? [500 * [500 * i32]]* @sheet2 : [500 * [500 * i32]]* @sheet1;
    i32 %16 = select i1 %13 ? i32 2 : i32 1;
    [500 * i32]* %17 = getelementptr &([500 * [500 * i32]]* %14)[i64 0][i64 0];
    [500 * i32]* %18 = getelementptr &([500 * [500 * i32]]* %15)[i64 0][i64 0];
    ubr ^while.header1;
^b1:
    i32 %19 = phi [^entry1, i32 1] [^while.body3, i32 %16];
    call (i32) -> void @stoptime(i32 106);
    i1 %20 = scmp eq i32 %19, i32 2;
    cbr i1 %20(prob = 0.5), ^while.header2, ^while.header3;
^while.body2:
    i32 %21 = phi [^indirect, i32 1] [^while.body2, i32 %26];
    i32 %22 = call () -> i32 @getch();
    i1 %23 = scmp eq i32 %22, i32 35;
    i32 %24 = zext i1 %23 to i32;
    i32* %25 = getelementptr &([500 * i32]* %8)[i64 0][i32 %21];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %21, i32 1;
    i1 %27 = scmp le i32 %26, i32 %0;
    cbr i1 %27(prob = 0.97), ^while.body2, ^b;
^while.header1:
    i32 %28 = phi [^while.body1, i32 1] [^while.header4, i32 %33];
    i1 %29 = scmp le i32 %28, i32 %1;
    i32 %30 = add i32 %28, i32 -1;
    [500 * i32]* %31 = getelementptr &([500 * i32]* %17)[i32 %30];
    [500 * i32]* %32 = getelementptr &([500 * i32]* %17)[i32 %28];
    i32 %33 = add i32 %28, i32 1;
    [500 * i32]* %34 = getelementptr &([500 * i32]* %32)[i64 1];
    [500 * i32]* %35 = getelementptr &([500 * i32]* %18)[i32 %28];
    cbr i1 %29(prob = 0.97), ^while.header4, ^while.body3;
^while.header2:
    i32 %36 = phi [^b1, i32 1] [^b3, i32 %74];
    i1 %37 = scmp le i32 %36, i32 %1;
    cbr i1 %37(prob = 0.97), ^while.body4, ^while.header3;
^while.header3:
    i32 %38 = phi [^b1, i32 1] [^while.header2, i32 1] [^b4, i32 %76];
    i1 %39 = scmp le i32 %38, i32 %1;
    cbr i1 %39(prob = 0.97), ^while.body5, ^b2;
^while.header4:
    i32 %40 = phi [^while.header1, i32 1] [^if.then, i32 %51] [^if.else, i32 %51];
    i1 %41 = scmp le i32 %40, i32 %0;
    cbr i1 %41(prob = 0.97), ^while.body6, ^while.header1;
^while.body3:
    i32 %42 = add i32 %11, i32 -1;
    i1 %43 = scmp gt i32 %42, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body1, ^b1;
^while.body4:
    cbr i1 %4(prob = 0.97), ^indirect1, ^b3;
^while.body5:
    cbr i1 %4(prob = 0.97), ^indirect2, ^b4;
^b2:
    ret i32 0;
^indirect1:
    [500 * i32]* %44 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %36];
    [500 * i32]* %45 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %36];
    ubr ^while.body7;
^while.body6:
    i32 %46 = add i32 %40, i32 -1;
    i32* %47 = getelementptr &([500 * i32]* %31)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([500 * i32]* %31)[i64 0][i32 %40];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %40, i32 1;
    i32* %52 = getelementptr &(i32* %49)[i64 1];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([500 * i32]* %32)[i64 0][i32 %46];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %54)[i64 2];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &([500 * i32]* %34)[i64 0][i32 %46];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([500 * i32]* %34)[i64 0][i32 %40];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %60)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %48, i32 %50;
    i32 %65 = add i32 %64, i32 %53;
    i32 %66 = add i32 %65, i32 %55;
    i32 %67 = add i32 %66, i32 %57;
    i32 %68 = add i32 %67, i32 %59;
    i32 %69 = add i32 %68, i32 %61;
    i32 %70 = add i32 %69, i32 %63;
    i32* %71 = getelementptr &([500 * i32]* %32)[i64 0][i32 %40];
    i32 %72 = load i32* %71;
    i1 %73 = scmp eq i32 %72, i32 1;
    cbr i1 %73(prob = 0.5), ^b5, ^b6;
^b3:
    i32 %74 = add i32 %36, i32 1;
    ubr ^while.header2;
^indirect2:
    [500 * i32]* %75 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %38];
    ubr ^while.body8;
^b4:
    call (i32) -> void @putch(i32 10);
    i32 %76 = add i32 %38, i32 1;
    ubr ^while.header3;
^b5:
    i1 %77 = scmp eq i32 %70, i32 2;
    ubr ^b6;
^b6:
    i1 %78 = phi [^while.body6, i1 false] [^b5, i1 %77];
    cbr i1 %78(prob = 0.5), ^if.then, ^if.else;
^while.body7:
    i32 %79 = phi [^indirect1, i32 1] [^while.body7, i32 %83];
    i32* %80 = getelementptr &([500 * i32]* %44)[i64 0][i32 %79];
    i32* %81 = getelementptr &([500 * i32]* %45)[i64 0][i32 %79];
    i32 %82 = load i32* %81;
    store i32* %80 with i32 %82;
    i32 %83 = add i32 %79, i32 1;
    i1 %84 = scmp le i32 %83, i32 %0;
    cbr i1 %84(prob = 0.97), ^while.body7, ^b3;
^while.body8:
    i32 %85 = phi [^indirect2, i32 1] [^while.body8, i32 %90];
    i32* %86 = getelementptr &([500 * i32]* %75)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 1;
    i32 %89 = select i1 %88 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %89);
    i32 %90 = add i32 %85, i32 1;
    i1 %91 = scmp le i32 %90, i32 %0;
    cbr i1 %91(prob = 0.97), ^while.body8, ^b4;
^if.then:
    i32* %92 = getelementptr &([500 * i32]* %35)[i64 0][i32 %40];
    store i32* %92 with i32 1;
    ubr ^while.header4;
^if.else:
    i1 %93 = scmp eq i32 %70, i32 3;
    i32 %94 = zext i1 %93 to i32;
    i32* %95 = getelementptr &([500 * i32]* %35)[i64 0][i32 %40];
    store i32* %95 with i32 %94;
    ubr ^while.header4;
}
