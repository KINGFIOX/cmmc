internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getch();
    i1 %4 = scmp gt i32 %1, i32 0;
    i1 %5 = scmp gt i32 %0, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %6 = phi [^b, i32 %15] [^entry, i32 1];
    [500 * i32]* %7 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %6];
    cbr i1 %5(prob = 0.97), ^while.body1, ^b;
^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %8 = scmp gt i32 %2, i32 0;
    [500 * i32]* %9 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %10 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    cbr i1 %8(prob = 0.97), ^while.body2, ^b1;
^while.body1:
    i32 %11 = phi [^while.body, i32 1] [^b2, i32 %26];
    i32 %12 = call () -> i32 @getch();
    i1 %13 = scmp eq i32 %12, i32 35;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else;
^b:
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %6, i32 1;
    i1 %16 = scmp le i32 %15, i32 %1;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry1;
^while.body2:
    i32 %17 = phi [^b3, i32 %42] [^entry1, i32 1];
    i32 %18 = phi [^b3, i32 %43] [^entry1, i32 %2];
    i1 %19 = scmp eq i32 %17, i32 1;
    cbr i1 %19(prob = 0.5), ^entry2, ^entry3;
^b1:
    i32 %20 = phi [^b3, i32 %42] [^entry1, i32 1];
    call (i32) -> void @stoptime(i32 106);
    i1 %21 = scmp eq i32 %20, i32 2;
    i1 %22 = and i1 %4, i1 %21;
    cbr i1 %22(prob = 0.48), ^while.body3, ^entry4;
^if.then:
    i32* %23 = getelementptr &([500 * i32]* %7)[i64 0][i32 %11];
    store i32* %23 with i32 1;
    ubr ^b2;
^if.else:
    i32* %24 = getelementptr &([500 * i32]* %7)[i64 0][i32 %11];
    store i32* %24 with i32 0;
    ubr ^b2;
^entry2:
    cbr i1 %4(prob = 0.97), ^while.body4, ^b3;
^entry3:
    cbr i1 %4(prob = 0.97), ^while.body5, ^b3;
^while.body3:
    i32 %25 = phi [^b1, i32 1] [^b4, i32 %47];
    cbr i1 %5(prob = 0.97), ^indirect, ^b4;
^entry4:
    cbr i1 %4(prob = 0.97), ^while.body6, ^b5;
^b2:
    i32 %26 = add i32 %11, i32 1;
    i1 %27 = scmp le i32 %26, i32 %0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b;
^indirect:
    [500 * i32]* %28 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %25];
    [500 * i32]* %29 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %25];
    ubr ^while.body9;
^while.body4:
    i32 %30 = phi [^b6, i32 %77] [^entry2, i32 1];
    i32 %31 = add i32 %30, i32 -1;
    [500 * i32]* %32 = getelementptr &([500 * i32]* %9)[i32 %31];
    [500 * i32]* %33 = getelementptr &([500 * i32]* %9)[i32 %30];
    [500 * i32]* %34 = getelementptr &([500 * i32]* %33)[i64 1];
    [500 * i32]* %35 = getelementptr &([500 * i32]* %10)[i32 %30];
    cbr i1 %5(prob = 0.97), ^while.body7, ^b6;
^while.body5:
    i32 %36 = phi [^b7, i32 %113] [^entry3, i32 1];
    i32 %37 = add i32 %36, i32 -1;
    [500 * i32]* %38 = getelementptr &([500 * i32]* %10)[i32 %37];
    [500 * i32]* %39 = getelementptr &([500 * i32]* %10)[i32 %36];
    [500 * i32]* %40 = getelementptr &([500 * i32]* %39)[i64 1];
    [500 * i32]* %41 = getelementptr &([500 * i32]* %9)[i32 %36];
    cbr i1 %5(prob = 0.97), ^while.body8, ^b7;
^b3:
    i32 %42 = phi [^b7, i32 1] [^b6, i32 2] [^entry3, i32 1] [^entry2, i32 2];
    i32 %43 = add i32 %18, i32 -1;
    i1 %44 = scmp gt i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body2, ^b1;
^while.body6:
    i32 %45 = phi [^entry4, i32 1] [^b8, i32 %119];
    [500 * i32]* %46 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %45];
    cbr i1 %5(prob = 0.97), ^while.body10, ^b8;
^b4:
    i32 %47 = add i32 %25, i32 1;
    i1 %48 = scmp le i32 %47, i32 %1;
    cbr i1 %48(prob = 0.97), ^while.body3, ^entry4;
^b5:
    ret i32 0;
^while.body7:
    i32 %49 = phi [^b14, i32 %135] [^while.body4, i32 1];
    i32 %50 = add i32 %49, i32 -1;
    i32* %51 = getelementptr &([500 * i32]* %32)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([500 * i32]* %32)[i64 0][i32 %49];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %53)[i64 1];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &([500 * i32]* %33)[i64 0][i32 %50];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %57)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([500 * i32]* %34)[i64 0][i32 %50];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([500 * i32]* %34)[i64 0][i32 %49];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %63)[i64 1];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %52, i32 %54;
    i32 %68 = add i32 %67, i32 %56;
    i32 %69 = add i32 %68, i32 %58;
    i32 %70 = add i32 %69, i32 %60;
    i32 %71 = add i32 %70, i32 %62;
    i32 %72 = add i32 %71, i32 %64;
    i32 %73 = add i32 %72, i32 %66;
    i32* %74 = getelementptr &([500 * i32]* %33)[i64 0][i32 %49];
    i32 %75 = load i32* %74;
    i1 %76 = scmp eq i32 %75, i32 1;
    cbr i1 %76(prob = 0.5), ^b9, ^b11;
^b6:
    i32 %77 = add i32 %30, i32 1;
    i1 %78 = scmp le i32 %77, i32 %1;
    cbr i1 %78(prob = 0.97), ^while.body4, ^b3;
^while.body8:
    i32 %79 = phi [^b15, i32 %137] [^while.body5, i32 1];
    i32 %80 = add i32 %79, i32 -1;
    i32* %81 = getelementptr &([500 * i32]* %38)[i64 0][i32 %80];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &([500 * i32]* %38)[i64 0][i32 %79];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %83)[i64 1];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([500 * i32]* %39)[i64 0][i32 %80];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %87)[i64 2];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([500 * i32]* %40)[i64 0][i32 %80];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([500 * i32]* %40)[i64 0][i32 %79];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %93)[i64 1];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %82, i32 %84;
    i32 %98 = add i32 %97, i32 %86;
    i32 %99 = add i32 %98, i32 %88;
    i32 %100 = add i32 %99, i32 %90;
    i32 %101 = add i32 %100, i32 %92;
    i32 %102 = add i32 %101, i32 %94;
    i32 %103 = add i32 %102, i32 %96;
    i32* %104 = getelementptr &([500 * i32]* %39)[i64 0][i32 %79];
    i32 %105 = load i32* %104;
    i1 %106 = scmp eq i32 %105, i32 1;
    cbr i1 %106(prob = 0.5), ^b10, ^b12;
^while.body9:
    i32 %107 = phi [^indirect, i32 1] [^while.body9, i32 %111];
    i32* %108 = getelementptr &([500 * i32]* %28)[i64 0][i32 %107];
    i32* %109 = getelementptr &([500 * i32]* %29)[i64 0][i32 %107];
    i32 %110 = load i32* %109;
    store i32* %108 with i32 %110;
    i32 %111 = add i32 %107, i32 1;
    i1 %112 = scmp le i32 %111, i32 %0;
    cbr i1 %112(prob = 0.97), ^while.body9, ^b4;
^b7:
    i32 %113 = add i32 %36, i32 1;
    i1 %114 = scmp le i32 %113, i32 %1;
    cbr i1 %114(prob = 0.97), ^while.body5, ^b3;
^while.body10:
    i32 %115 = phi [^while.body6, i32 1] [^b13, i32 %133];
    i32* %116 = getelementptr &([500 * i32]* %46)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = scmp eq i32 %117, i32 1;
    cbr i1 %118(prob = 0.5), ^if.then1, ^if.else1;
^b8:
    call (i32) -> void @putch(i32 10);
    i32 %119 = add i32 %45, i32 1;
    i1 %120 = scmp le i32 %119, i32 %1;
    cbr i1 %120(prob = 0.97), ^while.body6, ^b5;
^b9:
    i1 %121 = scmp eq i32 %73, i32 2;
    ubr ^b11;
^b10:
    i1 %122 = scmp eq i32 %103, i32 2;
    ubr ^b12;
^if.then1:
    call (i32) -> void @putch(i32 35);
    ubr ^b13;
^b11:
    i1 %123 = phi [^while.body7, i1 false] [^b9, i1 %121];
    i1 %124 = scmp eq i32 %73, i32 3;
    i1 %125 = or i1 %123, i1 %124;
    cbr i1 %125(prob = 0.75), ^if.then2, ^if.else2;
^if.else1:
    call (i32) -> void @putch(i32 46);
    ubr ^b13;
^b12:
    i1 %126 = phi [^while.body8, i1 false] [^b10, i1 %122];
    i1 %127 = scmp eq i32 %103, i32 3;
    i1 %128 = or i1 %126, i1 %127;
    cbr i1 %128(prob = 0.75), ^if.then3, ^if.else3;
^if.then2:
    i32* %129 = getelementptr &([500 * i32]* %35)[i64 0][i32 %49];
    store i32* %129 with i32 1;
    ubr ^b14;
^if.else2:
    i32* %130 = getelementptr &([500 * i32]* %35)[i64 0][i32 %49];
    store i32* %130 with i32 0;
    ubr ^b14;
^if.then3:
    i32* %131 = getelementptr &([500 * i32]* %41)[i64 0][i32 %79];
    store i32* %131 with i32 1;
    ubr ^b15;
^if.else3:
    i32* %132 = getelementptr &([500 * i32]* %41)[i64 0][i32 %79];
    store i32* %132 with i32 0;
    ubr ^b15;
^b13:
    i32 %133 = add i32 %115, i32 1;
    i1 %134 = scmp le i32 %133, i32 %0;
    cbr i1 %134(prob = 0.97), ^while.body10, ^b8;
^b14:
    i32 %135 = add i32 %49, i32 1;
    i1 %136 = scmp le i32 %135, i32 %0;
    cbr i1 %136(prob = 0.97), ^while.body7, ^b6;
^b15:
    i32 %137 = add i32 %79, i32 1;
    i1 %138 = scmp le i32 %137, i32 %0;
    cbr i1 %138(prob = 0.97), ^while.body8, ^b7;
}
