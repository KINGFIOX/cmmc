internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getch();
    [500 * [500 * i32]]* %6 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %7 = phi [^entry, i32 1] [^b1, i32 %12];
    cbr i1 %3(prob = 0.984615), ^indirect, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 95);
    i1 %8 = icmp sgt i32 %4, i32 0;
    [500 * [500 * i32]]* %9 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %8(prob = 0.984615), ^indirect1, ^b2;
  ^indirect:
    [500 * i32]* %10 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %7];
    ubr ^while.body1;
  ^indirect1:
    cbr i1 %2(prob = 0.333333), ^cond, ^cond1;
  ^b1:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %7, i32 1;
    i1 %13 = icmp sge i32 %1, i32 %12;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b;
  ^b2:
    i32 %14 = phi [^b, i32 1] [^scalar.header, i32 %63] [^scalar.header1, i32 %78] [^b11, i32 %227] [^b12, i32 %38] [^b13, i32 %241] [^b18, i32 %33];
    i1 %15 = icmp eq i32 %14, i32 2;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %15(prob = 0.49), ^if.then, ^b3;
  ^while.body1:
    i32 %16 = phi [^indirect, i32 1] [^while.body1, i32 %21];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = icmp eq i32 %17, i32 35;
    i32 %19 = zext i1 %18 to i32;
    i32* %20 = getelementptr &([500 * i32]* %10)[i64 0][i32 %16];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %16, i32 1;
    i1 %22 = icmp sge i32 %0, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b1;
  ^cond:
    [500 * i32]* %23 = getelementptr &([500 * [500 * i32]]* %9)[i64 0][i64 0];
    [500 * i32]* %24 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i64 0];
    cbr i1 %3(prob = 0.5), ^b4, ^b5;
  ^if.then:
    cbr i1 %2(prob = 0.984615), ^while.body2, ^b6;
  ^cond1:
    i32 %25 = add i32 %4, i32 -3;
    i1 %26 = icmp sgt i32 %25, i32 0;
    cbr i1 %3(prob = 0.333333), ^super.header, ^super.header1;
  ^b3:
    cbr i1 %2(prob = 0.984615), ^while.body3, ^b6;
  ^b4:
    i32 %27 = phi [^cond, i32 %4] [^b18, i32 %284];
    i32 %28 = phi [^cond, i32 1] [^b18, i32 %33];
    i1 %29 = icmp eq i32 %28, i32 1;
    [500 * i32]* %30 = select i1 %29 ? [500 * i32]* %24 : [500 * i32]* %23;
    [500 * i32]* %31 = select i1 %29 ? [500 * i32]* %23 : [500 * i32]* %24;
    i32 %32 = zext i1 %29 to i32;
    i32 %33 = add i32 %32, i32 1;
    ubr ^while.body4;
  ^b5:
    i32 %34 = phi [^cond, i32 %4] [^b12, i32 %230];
    i32 %35 = phi [^cond, i32 1] [^b12, i32 %38];
    i1 %36 = icmp eq i32 %35, i32 1;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = add i32 %37, i32 1;
    ubr ^while.body5;
  ^super.header:
    cbr i1 %26(prob = 0.941176), ^super.header2, ^scalar.header;
  ^while.body2:
    i32 %39 = phi [^if.then, i32 1] [^b7, i32 %67];
    [500 * i32]* %40 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %39];
    [500 * i32]* %41 = getelementptr &([500 * [500 * i32]]* %9)[i64 0][i32 %39];
    cbr i1 %3(prob = 0.984615), ^while.body6, ^b7;
  ^super.header1:
    cbr i1 %26(prob = 0.941176), ^super.header3, ^scalar.header1;
  ^while.body3:
    i32 %42 = phi [^b3, i32 1] [^b8, i32 %80];
    [500 * i32]* %43 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %42];
    cbr i1 %3(prob = 0.984615), ^while.body7, ^b8;
  ^b6:
    ret i32 0;
  ^while.body4:
    i32 %44 = phi [^b4, i32 1] [^b17, i32 %49];
    [500 * i32]* %45 = getelementptr &([500 * i32]* %30)[i32 %44];
    [500 * i32]* %46 = getelementptr &([500 * i32]* %45)[i64 -1];
    [500 * i32]* %47 = getelementptr &([500 * i32]* %45)[i64 1];
    [500 * i32]* %48 = getelementptr &([500 * i32]* %31)[i32 %44];
    i32 %49 = add i32 %44, i32 1;
    ubr ^while.body8;
  ^super.header2:
    i32 %50 = add i32 %4, i32 -15;
    i1 %51 = icmp sgt i32 %50, i32 3;
    cbr i1 %51(prob = 0.941176), ^b9, ^scalar.header2;
  ^while.body5:
    i32 %52 = phi [^b5, i32 1] [^while.body5, i32 %53];
    i32 %53 = add i32 %52, i32 1;
    i1 %54 = icmp sge i32 %1, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body5, ^b12;
  ^while.body6:
    i32 %55 = phi [^while.body2, i32 1] [^while.body6, i32 %59];
    i32* %56 = getelementptr &([500 * i32]* %41)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &([500 * i32]* %40)[i64 0][i32 %55];
    store i32* %58 with i32 %57;
    i32 %59 = add i32 %55, i32 1;
    i1 %60 = icmp sge i32 %0, i32 %59;
    cbr i1 %60(prob = 0.984615), ^while.body6, ^b7;
  ^scalar.header:
    i32 %61 = phi [^super.header, i32 %4] [^scalar.final, i32 %247];
    i32 %62 = phi [^super.header, i32 1] [^scalar.final, i32 %246];
    i32 %63 = phi [^super.header, i32 undef] [^scalar.final, i32 %246];
    i1 %64 = icmp sgt i32 %61, i32 0;
    cbr i1 %64(prob = 0.75), ^b11, ^b2;
  ^super.header3:
    i32 %65 = add i32 %4, i32 -15;
    i1 %66 = icmp sgt i32 %65, i32 3;
    cbr i1 %66(prob = 0.941176), ^b10, ^scalar.header3;
  ^b7:
    i32 %67 = add i32 %39, i32 1;
    i1 %68 = icmp sge i32 %1, i32 %67;
    cbr i1 %68(prob = 0.984615), ^while.body2, ^b3;
  ^while.body7:
    i32 %69 = phi [^while.body3, i32 1] [^while.body7, i32 %74];
    i32* %70 = getelementptr &([500 * i32]* %43)[i64 0][i32 %69];
    i32 %71 = load i32* %70;
    i1 %72 = icmp eq i32 %71, i32 1;
    i32 %73 = select i1 %72 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %73);
    i32 %74 = add i32 %69, i32 1;
    i1 %75 = icmp sge i32 %0, i32 %74;
    cbr i1 %75(prob = 0.984615), ^while.body7, ^b8;
  ^scalar.header1:
    i32 %76 = phi [^super.header1, i32 %4] [^scalar.final1, i32 %249];
    i32 %77 = phi [^super.header1, i32 1] [^scalar.final1, i32 %248];
    i32 %78 = phi [^super.header1, i32 undef] [^scalar.final1, i32 %248];
    i1 %79 = icmp sgt i32 %76, i32 0;
    cbr i1 %79(prob = 0.75), ^b13, ^b2;
  ^b8:
    call (i32) -> void @putch(i32 10);
    i32 %80 = add i32 %42, i32 1;
    i1 %81 = icmp sge i32 %1, i32 %80;
    cbr i1 %81(prob = 0.984615), ^while.body3, ^b6;
  ^while.body8:
    i32 %82 = phi [^while.body4, i32 1] [^b16, i32 %113];
    i32* %83 = getelementptr &([500 * i32]* %46)[i64 0][i32 %82];
    i32* %84 = getelementptr &(i32* %83)[i64 -1];
    i32 %85 = load i32* %84;
    i32 %86 = load i32* %83;
    i32 %87 = add i32 %85, i32 %86;
    i32* %88 = getelementptr &(i32* %83)[i64 1];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %87, i32 %89;
    i32* %91 = getelementptr &([500 * i32]* %45)[i64 0][i32 %82];
    i32* %92 = getelementptr &(i32* %91)[i64 -1];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %90, i32 %93;
    i32* %95 = getelementptr &(i32* %91)[i64 1];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32* %98 = getelementptr &([500 * i32]* %47)[i64 0][i32 %82];
    i32* %99 = getelementptr &(i32* %98)[i64 -1];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %97, i32 %100;
    i32 %102 = load i32* %98;
    i32 %103 = add i32 %101, i32 %102;
    i32* %104 = getelementptr &(i32* %98)[i64 1];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %103, i32 %105;
    i32 %107 = xor i32 %106, i32 2;
    i32 %108 = load i32* %91;
    i32 %109 = xor i32 %108, i32 1;
    i32 %110 = or i32 %107, i32 %109;
    i1 %111 = icmp eq i32 %110, i32 0;
    i32* %112 = getelementptr &([500 * i32]* %48)[i64 0][i32 %82];
    i32 %113 = add i32 %82, i32 1;
    cbr i1 %111(prob = 0.49), ^if.then1, ^if.else;
  ^b9:
    i32 %114 = phi [^super.header2, i32 1] [^b9, i32 %163];
    i32 %115 = phi [^super.header2, i32 %4] [^b9, i32 %164];
    i1 %116 = icmp eq i32 %114, i32 1;
    i32 %117 = zext i1 %116 to i32;
    i32 %118 = add i32 %117, i32 1;
    i1 %119 = icmp eq i32 %118, i32 1;
    i32 %120 = zext i1 %119 to i32;
    i32 %121 = add i32 %120, i32 1;
    i1 %122 = icmp eq i32 %121, i32 1;
    i32 %123 = zext i1 %122 to i32;
    i32 %124 = add i32 %123, i32 1;
    i1 %125 = icmp eq i32 %124, i32 1;
    i32 %126 = zext i1 %125 to i32;
    i32 %127 = add i32 %126, i32 1;
    i1 %128 = icmp eq i32 %127, i32 1;
    i32 %129 = zext i1 %128 to i32;
    i32 %130 = add i32 %129, i32 1;
    i1 %131 = icmp eq i32 %130, i32 1;
    i32 %132 = zext i1 %131 to i32;
    i32 %133 = add i32 %132, i32 1;
    i1 %134 = icmp eq i32 %133, i32 1;
    i32 %135 = zext i1 %134 to i32;
    i32 %136 = add i32 %135, i32 1;
    i1 %137 = icmp eq i32 %136, i32 1;
    i32 %138 = zext i1 %137 to i32;
    i32 %139 = add i32 %138, i32 1;
    i1 %140 = icmp eq i32 %139, i32 1;
    i32 %141 = zext i1 %140 to i32;
    i32 %142 = add i32 %141, i32 1;
    i1 %143 = icmp eq i32 %142, i32 1;
    i32 %144 = zext i1 %143 to i32;
    i32 %145 = add i32 %144, i32 1;
    i1 %146 = icmp eq i32 %145, i32 1;
    i32 %147 = zext i1 %146 to i32;
    i32 %148 = add i32 %147, i32 1;
    i1 %149 = icmp eq i32 %148, i32 1;
    i32 %150 = zext i1 %149 to i32;
    i32 %151 = add i32 %150, i32 1;
    i1 %152 = icmp eq i32 %151, i32 1;
    i32 %153 = zext i1 %152 to i32;
    i32 %154 = add i32 %153, i32 1;
    i1 %155 = icmp eq i32 %154, i32 1;
    i32 %156 = zext i1 %155 to i32;
    i32 %157 = add i32 %156, i32 1;
    i1 %158 = icmp eq i32 %157, i32 1;
    i32 %159 = zext i1 %158 to i32;
    i32 %160 = add i32 %159, i32 1;
    i1 %161 = icmp eq i32 %160, i32 1;
    i32 %162 = zext i1 %161 to i32;
    i32 %163 = add i32 %162, i32 1;
    i32 %164 = add i32 %115, i32 -16;
    i1 %165 = icmp sgt i32 %164, i32 18;
    cbr i1 %165(prob = 0.941176), ^b9, ^scalar.header2;
  ^b10:
    i32 %166 = phi [^super.header3, i32 1] [^b10, i32 %215];
    i32 %167 = phi [^super.header3, i32 %4] [^b10, i32 %216];
    i1 %168 = icmp eq i32 %166, i32 1;
    i32 %169 = zext i1 %168 to i32;
    i32 %170 = add i32 %169, i32 1;
    i1 %171 = icmp eq i32 %170, i32 1;
    i32 %172 = zext i1 %171 to i32;
    i32 %173 = add i32 %172, i32 1;
    i1 %174 = icmp eq i32 %173, i32 1;
    i32 %175 = zext i1 %174 to i32;
    i32 %176 = add i32 %175, i32 1;
    i1 %177 = icmp eq i32 %176, i32 1;
    i32 %178 = zext i1 %177 to i32;
    i32 %179 = add i32 %178, i32 1;
    i1 %180 = icmp eq i32 %179, i32 1;
    i32 %181 = zext i1 %180 to i32;
    i32 %182 = add i32 %181, i32 1;
    i1 %183 = icmp eq i32 %182, i32 1;
    i32 %184 = zext i1 %183 to i32;
    i32 %185 = add i32 %184, i32 1;
    i1 %186 = icmp eq i32 %185, i32 1;
    i32 %187 = zext i1 %186 to i32;
    i32 %188 = add i32 %187, i32 1;
    i1 %189 = icmp eq i32 %188, i32 1;
    i32 %190 = zext i1 %189 to i32;
    i32 %191 = add i32 %190, i32 1;
    i1 %192 = icmp eq i32 %191, i32 1;
    i32 %193 = zext i1 %192 to i32;
    i32 %194 = add i32 %193, i32 1;
    i1 %195 = icmp eq i32 %194, i32 1;
    i32 %196 = zext i1 %195 to i32;
    i32 %197 = add i32 %196, i32 1;
    i1 %198 = icmp eq i32 %197, i32 1;
    i32 %199 = zext i1 %198 to i32;
    i32 %200 = add i32 %199, i32 1;
    i1 %201 = icmp eq i32 %200, i32 1;
    i32 %202 = zext i1 %201 to i32;
    i32 %203 = add i32 %202, i32 1;
    i1 %204 = icmp eq i32 %203, i32 1;
    i32 %205 = zext i1 %204 to i32;
    i32 %206 = add i32 %205, i32 1;
    i1 %207 = icmp eq i32 %206, i32 1;
    i32 %208 = zext i1 %207 to i32;
    i32 %209 = add i32 %208, i32 1;
    i1 %210 = icmp eq i32 %209, i32 1;
    i32 %211 = zext i1 %210 to i32;
    i32 %212 = add i32 %211, i32 1;
    i1 %213 = icmp eq i32 %212, i32 1;
    i32 %214 = zext i1 %213 to i32;
    i32 %215 = add i32 %214, i32 1;
    i32 %216 = add i32 %167, i32 -16;
    i1 %217 = icmp sgt i32 %216, i32 18;
    cbr i1 %217(prob = 0.941176), ^b10, ^scalar.header3;
  ^scalar.header2:
    i32 %218 = phi [^super.header2, i32 1] [^b9, i32 %163];
    i32 %219 = phi [^super.header2, i32 %4] [^b9, i32 %164];
    i32 %220 = phi [^super.header2, i32 undef] [^b9, i32 %163];
    i32 %221 = phi [^super.header2, i32 undef] [^b9, i32 %164];
    i1 %222 = icmp sgt i32 %219, i32 3;
    cbr i1 %222(prob = 0.75), ^b14, ^scalar.final;
  ^b11 {scalar}:
    i32 %223 = phi [^scalar.header, i32 %62] [^b11, i32 %227];
    i32 %224 = phi [^scalar.header, i32 %61] [^b11, i32 %228];
    i1 %225 = icmp eq i32 %223, i32 1;
    i32 %226 = zext i1 %225 to i32;
    i32 %227 = add i32 %226, i32 1;
    i32 %228 = add i32 %224, i32 -1;
    i1 %229 = icmp sgt i32 %228, i32 0;
    cbr i1 %229(prob = 0.75), ^b11, ^b2;
  ^b12:
    i32 %230 = add i32 %34, i32 -1;
    i1 %231 = icmp sgt i32 %230, i32 0;
    cbr i1 %231(prob = 0.984615), ^b5, ^b2;
  ^scalar.header3:
    i32 %232 = phi [^super.header3, i32 1] [^b10, i32 %215];
    i32 %233 = phi [^super.header3, i32 %4] [^b10, i32 %216];
    i32 %234 = phi [^super.header3, i32 undef] [^b10, i32 %215];
    i32 %235 = phi [^super.header3, i32 undef] [^b10, i32 %216];
    i1 %236 = icmp sgt i32 %233, i32 3;
    cbr i1 %236(prob = 0.75), ^b15, ^scalar.final1;
  ^b13 {scalar}:
    i32 %237 = phi [^scalar.header1, i32 %77] [^b13, i32 %241];
    i32 %238 = phi [^scalar.header1, i32 %76] [^b13, i32 %242];
    i1 %239 = icmp eq i32 %237, i32 1;
    i32 %240 = zext i1 %239 to i32;
    i32 %241 = add i32 %240, i32 1;
    i32 %242 = add i32 %238, i32 -1;
    i1 %243 = icmp sgt i32 %242, i32 0;
    cbr i1 %243(prob = 0.75), ^b13, ^b2;
  ^if.then1:
    store i32* %112 with i32 1;
    ubr ^b16;
  ^if.else:
    i1 %244 = icmp eq i32 %106, i32 3;
    i32 %245 = zext i1 %244 to i32;
    store i32* %112 with i32 %245;
    ubr ^b16;
  ^scalar.final:
    i32 %246 = phi [^scalar.header2, i32 %220] [^b14, i32 %263];
    i32 %247 = phi [^scalar.header2, i32 %221] [^b14, i32 %264];
    ubr ^scalar.header;
  ^scalar.final1:
    i32 %248 = phi [^scalar.header3, i32 %234] [^b15, i32 %279];
    i32 %249 = phi [^scalar.header3, i32 %235] [^b15, i32 %280];
    ubr ^scalar.header1;
  ^b14 {scalar}:
    i32 %250 = phi [^scalar.header2, i32 %219] [^b14, i32 %264];
    i32 %251 = phi [^scalar.header2, i32 %218] [^b14, i32 %263];
    i1 %252 = icmp eq i32 %251, i32 1;
    i32 %253 = zext i1 %252 to i32;
    i32 %254 = add i32 %253, i32 1;
    i1 %255 = icmp eq i32 %254, i32 1;
    i32 %256 = zext i1 %255 to i32;
    i32 %257 = add i32 %256, i32 1;
    i1 %258 = icmp eq i32 %257, i32 1;
    i32 %259 = zext i1 %258 to i32;
    i32 %260 = add i32 %259, i32 1;
    i1 %261 = icmp eq i32 %260, i32 1;
    i32 %262 = zext i1 %261 to i32;
    i32 %263 = add i32 %262, i32 1;
    i32 %264 = add i32 %250, i32 -4;
    i1 %265 = icmp sgt i32 %264, i32 3;
    cbr i1 %265(prob = 0.75), ^b14, ^scalar.final;
  ^b15 {scalar}:
    i32 %266 = phi [^scalar.header3, i32 %233] [^b15, i32 %280];
    i32 %267 = phi [^scalar.header3, i32 %232] [^b15, i32 %279];
    i1 %268 = icmp eq i32 %267, i32 1;
    i32 %269 = zext i1 %268 to i32;
    i32 %270 = add i32 %269, i32 1;
    i1 %271 = icmp eq i32 %270, i32 1;
    i32 %272 = zext i1 %271 to i32;
    i32 %273 = add i32 %272, i32 1;
    i1 %274 = icmp eq i32 %273, i32 1;
    i32 %275 = zext i1 %274 to i32;
    i32 %276 = add i32 %275, i32 1;
    i1 %277 = icmp eq i32 %276, i32 1;
    i32 %278 = zext i1 %277 to i32;
    i32 %279 = add i32 %278, i32 1;
    i32 %280 = add i32 %266, i32 -4;
    i1 %281 = icmp sgt i32 %280, i32 3;
    cbr i1 %281(prob = 0.75), ^b15, ^scalar.final1;
  ^b16:
    i1 %282 = icmp sge i32 %0, i32 %113;
    cbr i1 %282(prob = 0.984615), ^while.body8, ^b17;
  ^b17:
    i1 %283 = icmp sge i32 %1, i32 %49;
    cbr i1 %283(prob = 0.984615), ^while.body4, ^b18;
  ^b18:
    i32 %284 = add i32 %27, i32 -1;
    i1 %285 = icmp sgt i32 %284, i32 0;
    cbr i1 %285(prob = 0.984615), ^b4, ^b2;
}
