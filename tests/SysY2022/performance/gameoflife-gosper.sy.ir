internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1;
internal [500 * [500 * i32]]* @sheet2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getch();
    [500 * [500 * i32]]* %5 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %12];
    i1 %7 = scmp ge i32 %2, i32 %6;
    cbr i1 %7(prob = 0.97), ^while.body, ^entry1;
  ^while.body:
    cbr i1 %1(prob = 0.97), ^indirect, ^b;
  ^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %8 = scmp gt i32 %3, i32 0;
    [500 * [500 * i32]]* %9 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b1;
  ^indirect:
    [500 * i32]* %10 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %6];
    ubr ^while.body2;
  ^b:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32 %13 = phi [^entry1, i32 %3] [^while.body3, i32 %43];
    i32 %14 = phi [^entry1, i32 1] [^while.body3, i32 %20];
    i1 %15 = scmp eq i32 %14, i32 1;
    [500 * [500 * i32]]* %16 = select i1 %15 ? [500 * [500 * i32]]* %5 : [500 * [500 * i32]]* %9;
    [500 * i32]* %17 = getelementptr &([500 * [500 * i32]]* %16)[i64 0][i64 0];
    [500 * [500 * i32]]* %18 = select i1 %15 ? [500 * [500 * i32]]* %9 : [500 * [500 * i32]]* %5;
    [500 * i32]* %19 = getelementptr &([500 * [500 * i32]]* %18)[i64 0][i64 0];
    i32 %20 = select i1 %15 ? i32 2 : i32 1;
    ubr ^while.header1;
  ^b1:
    i32 %21 = phi [^entry1, i32 1] [^while.body3, i32 %20];
    call (i32) -> void @stoptime(i32 106);
    i1 %22 = scmp eq i32 %21, i32 2;
    cbr i1 %22(prob = 0.5), ^while.header2, ^while.header3;
  ^while.body2:
    i32 %23 = phi [^indirect, i32 1] [^while.body2, i32 %28];
    i32 %24 = call () -> i32 @getch();
    i1 %25 = scmp eq i32 %24, i32 35;
    i32 %26 = zext i1 %25 to i32;
    i32* %27 = getelementptr &([500 * i32]* %10)[i64 0][i32 %23];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %23, i32 1;
    i1 %29 = scmp ge i32 %0, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b;
  ^while.header1:
    i32 %30 = phi [^while.body1, i32 1] [^b3, i32 %45];
    i32 %31 = add i32 %30, i32 -1;
    [500 * i32]* %32 = getelementptr &([500 * i32]* %17)[i32 %31];
    [500 * i32]* %33 = getelementptr &([500 * i32]* %17)[i32 %30];
    [500 * i32]* %34 = getelementptr &([500 * i32]* %33)[i64 1];
    i1 %35 = scmp ge i32 %2, i32 %30;
    [500 * i32]* %36 = getelementptr &([500 * i32]* %19)[i32 %30];
    cbr i1 %35(prob = 0.97), ^while.header4, ^while.body3;
  ^while.header2:
    i32 %37 = phi [^b1, i32 1] [^b4, i32 %78];
    i1 %38 = scmp ge i32 %2, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.body4, ^while.header3;
  ^while.header3:
    i32 %39 = phi [^b1, i32 1] [^while.header2, i32 1] [^b5, i32 %80];
    i1 %40 = scmp ge i32 %2, i32 %39;
    cbr i1 %40(prob = 0.97), ^while.body5, ^b2;
  ^while.header4:
    i32 %41 = phi [^while.header1, i32 1] [^b6, i32 %98];
    i1 %42 = scmp ge i32 %0, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body6, ^b3;
  ^while.body3:
    i32 %43 = add i32 %13, i32 -1;
    i1 %44 = scmp gt i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body1, ^b1;
  ^while.body4:
    cbr i1 %1(prob = 0.97), ^indirect1, ^b4;
  ^while.body5:
    cbr i1 %1(prob = 0.97), ^indirect2, ^b5;
  ^b2:
    ret i32 0;
  ^b3:
    i32 %45 = add i32 %30, i32 1;
    ubr ^while.header1;
  ^indirect1:
    [500 * i32]* %46 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %37];
    [500 * i32]* %47 = getelementptr &([500 * [500 * i32]]* %9)[i64 0][i32 %37];
    ubr ^while.body7;
  ^while.body6:
    i32 %48 = add i32 %41, i32 -1;
    i32* %49 = getelementptr &([500 * i32]* %32)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([500 * i32]* %32)[i64 0][i32 %41];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %50, i32 %52;
    i32* %54 = getelementptr &(i32* %51)[i64 1];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %53, i32 %55;
    i32* %57 = getelementptr &([500 * i32]* %33)[i64 0][i32 %48];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %57)[i64 2];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %59, i32 %61;
    i32* %63 = getelementptr &([500 * i32]* %34)[i64 0][i32 %48];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    i32* %66 = getelementptr &([500 * i32]* %34)[i64 0][i32 %41];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32* %69 = getelementptr &(i32* %66)[i64 1];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32 %72 = xor i32 %71, i32 2;
    i32* %73 = getelementptr &([500 * i32]* %33)[i64 0][i32 %41];
    i32 %74 = load i32* %73;
    i32 %75 = xor i32 %74, i32 1;
    i32 %76 = or i32 %72, i32 %75;
    i1 %77 = scmp eq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then, ^if.else;
  ^b4:
    i32 %78 = add i32 %37, i32 1;
    ubr ^while.header2;
  ^indirect2:
    [500 * i32]* %79 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %39];
    ubr ^while.body8;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %80 = add i32 %39, i32 1;
    ubr ^while.header3;
  ^if.then:
    i32* %81 = getelementptr &([500 * i32]* %36)[i64 0][i32 %41];
    store i32* %81 with i32 1;
    ubr ^b6;
  ^if.else:
    i1 %82 = scmp eq i32 %71, i32 3;
    i32 %83 = zext i1 %82 to i32;
    i32* %84 = getelementptr &([500 * i32]* %36)[i64 0][i32 %41];
    store i32* %84 with i32 %83;
    ubr ^b6;
  ^while.body7:
    i32 %85 = phi [^indirect1, i32 1] [^while.body7, i32 %89];
    i32* %86 = getelementptr &([500 * i32]* %47)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([500 * i32]* %46)[i64 0][i32 %85];
    store i32* %88 with i32 %87;
    i32 %89 = add i32 %85, i32 1;
    i1 %90 = scmp ge i32 %0, i32 %89;
    cbr i1 %90(prob = 0.97), ^while.body7, ^b4;
  ^while.body8:
    i32 %91 = phi [^indirect2, i32 1] [^while.body8, i32 %96];
    i32* %92 = getelementptr &([500 * i32]* %79)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i1 %94 = scmp eq i32 %93, i32 1;
    i32 %95 = select i1 %94 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %95);
    i32 %96 = add i32 %91, i32 1;
    i1 %97 = scmp ge i32 %0, i32 %96;
    cbr i1 %97(prob = 0.97), ^while.body8, ^b5;
  ^b6:
    i32 %98 = add i32 %41, i32 1;
    ubr ^while.header4;
}
