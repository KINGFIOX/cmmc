internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %width = alloc i32;
    i32* %height = alloc i32;
    i32* %steps = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %width with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %height with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %steps with i32 %2;
    i32 %3 = call () -> i32 @getch();
    i1 %4 = scmp le i32 1, i32 %1;
    cbr i1 %4, [ ^while.body i32* %steps, i32* %height, i32* %width, i32 %0, i32 %1, i32 %2, i32 1 ], [ ^entry1 i32* %width, i32* %height, i32* %steps, i32 %0, i32 %1, i32 %2 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp le i32 1, i32 %arg3;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 1, i32 %arg6 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    call (i32) -> void @starttime(i32 95);
    i1 %0 = scmp gt i32 %arg5, i32 0;
    cbr i1 %0, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32 1, i32 %arg3, i32 %arg4, i32 %arg5 ], [ ^b1 i32 1, i32 %arg3, i32 %arg4 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp eq i32 %0, i32 35;
    cbr i1 %1, [ ^if.then i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^if.else i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %arg6, i32 1;
    i1 %2 = scmp le i32 %1, i32 %arg4;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %1 ], [ ^entry1 i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp eq i32 %arg3, i32 1;
    cbr i1 %0, [ ^if.then1 i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^if.else1 i32* %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @stoptime(i32 106);
    i1 %0 = scmp eq i32 %arg, i32 2;
    cbr i1 %0, [ ^entry2 i32 %arg1, i32 %arg2 ], [ ^entry3 i32 %arg1, i32 %arg2 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 1;
    i32 %2 = add i32 %arg6, i32 1;
    ubr [ ^while.header i32 %2, i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %2, i32 %arg7 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 0;
    i32 %2 = add i32 %arg6, i32 1;
    ubr [ ^while.header i32 %2, i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %2, i32 %arg7 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %j = alloc i32;
    store i32* %j with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg4;
    cbr i1 %0, [ ^while.body3 i32* %j, i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 1 ], [ ^if.then2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^if.else1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %j = alloc i32;
    store i32* %j with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg4;
    cbr i1 %0, [ ^while.body4 i32* %j, i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg3, i32 %arg4, i32 %arg5, i32 1 ], [ ^if.else2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5 ];
^entry2(i32 %arg, i32 %arg1):
    i1 %0 = scmp le i32 1, i32 %arg1;
    cbr i1 %0, [ ^while.body5 i32 %arg, i32 %arg1, i32 1 ], [ ^entry3 i32 %arg, i32 %arg1 ];
^entry3(i32 %arg, i32 %arg1):
    i1 %0 = scmp le i32 1, i32 %arg1;
    cbr i1 %0, [ ^while.body6 i32 %arg, i32 %arg1, i32 1 ], [ ^b2 ];
^while.header(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp le i32 %arg, i32 %arg4;
    cbr i1 %0, [ ^while.body1 i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^b i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg8 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = sub i32 %arg5, i32 1;
    store i32* %arg with i32 %0;
    ubr [ ^while.header1 i32 %0, i32* %arg, i32* %arg1, i32* %arg2, i32 2, i32 %arg3, i32 %arg4, i32 %0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp le i32 1, i32 %arg6;
    cbr i1 %0, [ ^while.body7 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 1, i32 %arg9 ], [ ^b3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^if.else2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = sub i32 %arg5, i32 1;
    store i32* %arg with i32 %0;
    ubr [ ^while.header1 i32 %0, i32* %arg, i32* %arg1, i32* %arg2, i32 1, i32 %arg3, i32 %arg4, i32 %0 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp le i32 1, i32 %arg6;
    cbr i1 %0, [ ^while.body9 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 1, i32 %arg9 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^while.body5(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp le i32 1, i32 %arg;
    cbr i1 %0, [ ^while.body8 i32 %arg, i32 %arg1, i32 1, i32 %arg2 ], [ ^b5 i32 %arg, i32 %arg1, i32 %arg2 ];
^while.body6(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp le i32 1, i32 %arg;
    cbr i1 %0, [ ^while.body10 i32 %arg, i32 %arg1, i32 1, i32 %arg2 ], [ ^b6 i32 %arg, i32 %arg1, i32 %arg2 ];
^b2():
    ret i32 0;
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    [500 * i32]* %1 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %0];
    i32 %2 = sub i32 %arg6, i32 1;
    i32* %3 = getelementptr &([500 * i32]* %1)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &([500 * i32]* %1)[i32 0][i32 %arg6];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %4, i32 %6;
    i32 %8 = add i32 %arg6, i32 1;
    i32* %9 = getelementptr &([500 * i32]* %1)[i32 0][i32 %8];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %7, i32 %10;
    [500 * i32]* %12 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg7];
    i32* %13 = getelementptr &([500 * i32]* %12)[i32 0][i32 %2];
    i32 %14 = load i32* %13;
    i32 %15 = add i32 %11, i32 %14;
    i32* %16 = getelementptr &([500 * i32]* %12)[i32 0][i32 %8];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %arg7, i32 1;
    [500 * i32]* %20 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %19];
    i32* %21 = getelementptr &([500 * i32]* %20)[i32 0][i32 %2];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %18, i32 %22;
    i32* %24 = getelementptr &([500 * i32]* %20)[i32 0][i32 %arg6];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %23, i32 %25;
    i32* %27 = getelementptr &([500 * i32]* %20)[i32 0][i32 %8];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    i32* %30 = getelementptr &([500 * i32]* %12)[i32 0][i32 %arg6];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 1;
    cbr i1 %32, [ ^indirect i32* %arg, i32 %29, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %29 ], [ ^if.else4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %29 ];
^while.header1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0, [ ^while.body2 i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^b1 i32 %arg4, i32 %arg5, i32 %arg6 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg7;
    cbr i1 %1, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ], [ ^if.then2 i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ];
^while.body8(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg2];
    [500 * i32]* %2 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %arg3];
    i32* %3 = getelementptr &([500 * i32]* %2)[i32 0][i32 %arg2];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    i32 %5 = add i32 %arg2, i32 1;
    i1 %6 = scmp le i32 %5, i32 %arg;
    cbr i1 %6, [ ^while.body8 i32 %arg, i32 %arg1, i32 %5, i32 %arg3 ], [ ^b5 i32 %arg, i32 %arg1, i32 %arg3 ];
^while.body9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    [500 * i32]* %1 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %0];
    i32 %2 = sub i32 %arg6, i32 1;
    i32* %3 = getelementptr &([500 * i32]* %1)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &([500 * i32]* %1)[i32 0][i32 %arg6];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %4, i32 %6;
    i32 %8 = add i32 %arg6, i32 1;
    i32* %9 = getelementptr &([500 * i32]* %1)[i32 0][i32 %8];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %7, i32 %10;
    [500 * i32]* %12 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %arg7];
    i32* %13 = getelementptr &([500 * i32]* %12)[i32 0][i32 %2];
    i32 %14 = load i32* %13;
    i32 %15 = add i32 %11, i32 %14;
    i32* %16 = getelementptr &([500 * i32]* %12)[i32 0][i32 %8];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %arg7, i32 1;
    [500 * i32]* %20 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %19];
    i32* %21 = getelementptr &([500 * i32]* %20)[i32 0][i32 %2];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %18, i32 %22;
    i32* %24 = getelementptr &([500 * i32]* %20)[i32 0][i32 %arg6];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %23, i32 %25;
    i32* %27 = getelementptr &([500 * i32]* %20)[i32 0][i32 %8];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    i32* %30 = getelementptr &([500 * i32]* %12)[i32 0][i32 %arg6];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 1;
    cbr i1 %32, [ ^indirect1 i32* %arg, i32 %29, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %29 ], [ ^if.else5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %29 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg7;
    cbr i1 %1, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ], [ ^if.else2 i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ];
^b5(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body5 i32 %arg, i32 %arg1, i32 %0 ], [ ^entry3 i32 %arg, i32 %arg1 ];
^while.body10(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 1;
    cbr i1 %3, [ ^if.then3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^if.else3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b6(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg2, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body6 i32 %arg, i32 %arg1, i32 %0 ], [ ^b2 ];
^indirect(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 2;
    cbr i1 %0, [ ^if.then4 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else4 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9 ];
^if.then3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    call (i32) -> void @putch(i32 35);
    i32 %0 = add i32 %arg2, i32 1;
    ubr [ ^while.header2 i32 %0, i32 %arg, i32 %arg1, i32 %0, i32 %arg3 ];
^indirect1(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i1 %0 = scmp eq i32 %arg1, i32 2;
    cbr i1 %0, [ ^if.then5 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^if.else5 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9 ];
^if.else3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    call (i32) -> void @putch(i32 46);
    i32 %0 = add i32 %arg2, i32 1;
    ubr [ ^while.header2 i32 %0, i32 %arg, i32 %arg1, i32 %0, i32 %arg3 ];
^if.else4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 3;
    cbr i1 %0, [ ^if.then4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7 ], [ ^if.else6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7 ];
^if.else5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 3;
    cbr i1 %0, [ ^if.then5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7 ], [ ^if.else7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 1;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg2;
    i32 %6 = add i32 %arg6, i32 1;
    i1 %7 = scmp le i32 %6, i32 %5;
    cbr i1 %7, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %6, i32 %2 ], [ ^b3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %5, i32 %4, i32 %3, i32 %2 ];
^if.then5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 1;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg2;
    i32 %6 = add i32 %arg6, i32 1;
    i1 %7 = scmp le i32 %6, i32 %5;
    cbr i1 %7, [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %6, i32 %2 ], [ ^b4 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %5, i32 %4, i32 %3, i32 %2 ];
^while.header2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp le i32 %arg, i32 %arg1;
    cbr i1 %0, [ ^while.body10 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ], [ ^b6 i32 %arg1, i32 %arg2, i32 %arg4 ];
^if.else6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet2)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg2;
    i32 %6 = add i32 %arg6, i32 1;
    i1 %7 = scmp le i32 %6, i32 %5;
    cbr i1 %7, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %6, i32 %2 ], [ ^b3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %5, i32 %4, i32 %3, i32 %2 ];
^if.else7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    [500 * i32]* %0 = getelementptr &([500 * [500 * i32]]* @sheet1)[i32 0][i32 %arg7];
    i32* %1 = getelementptr &([500 * i32]* %0)[i32 0][i32 %arg6];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg2;
    i32 %6 = add i32 %arg6, i32 1;
    i1 %7 = scmp le i32 %6, i32 %5;
    cbr i1 %7, [ ^while.body9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %6, i32 %2 ], [ ^b4 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %5, i32 %4, i32 %3, i32 %2 ];
}
