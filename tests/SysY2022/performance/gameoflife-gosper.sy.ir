internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i1 %2 = icmp slt i32 %0, i32 1;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getch();
    [500 * [500 * i32]]* %6 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 1] [^b1, i32 %13];
    i1 %8 = icmp sge i32 %3, i32 %7;
    cbr i1 %8(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    [500 * i32]* %9 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %7];
    cbr i1 %1(prob = 0.984615), ^while.body1, ^b1;
  ^b:
    call (i32) -> void @starttime(i32 95);
    i1 %10 = icmp sgt i32 %4, i32 0;
    [500 * [500 * i32]]* %11 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %10(prob = 0.984615), ^indirect, ^b2;
  ^b1:
    i32 %12 = call () -> i32 @getch();
    i32 %13 = add i32 %7, i32 1;
    ubr ^while.header;
  ^indirect:
    [500 * i32]* %14 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i64 0];
    [500 * i32]* %15 = getelementptr &([500 * [500 * i32]]* %11)[i64 0][i64 0];
    ubr ^while.body2;
  ^while.body1:
    i32 %16 = phi [^while.body, i32 1] [^while.body1, i32 %21];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = icmp eq i32 %17, i32 35;
    i32 %19 = zext i1 %18 to i32;
    i32* %20 = getelementptr &([500 * i32]* %9)[i64 0][i32 %16];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %16, i32 1;
    i1 %22 = icmp sge i32 %0, i32 %21;
    cbr i1 %22(prob = 0.984615), ^while.body1, ^b1;
  ^b2:
    i32 %23 = phi [^b, i32 1] [^b5, i32 %31];
    i1 %24 = icmp eq i32 %23, i32 2;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %24(prob = 0.5), ^while.header1, ^while.header2;
  ^while.body2:
    i32 %25 = phi [^indirect, i32 %4] [^b5, i32 %47];
    i32 %26 = phi [^indirect, i32 1] [^b5, i32 %31];
    i1 %27 = icmp eq i32 %26, i32 1;
    [500 * i32]* %28 = select i1 %27 ? [500 * i32]* %14 : [500 * i32]* %15;
    [500 * i32]* %29 = select i1 %27 ? [500 * i32]* %15 : [500 * i32]* %14;
    i32 %30 = zext i1 %27 to i32;
    i32 %31 = add i32 %30, i32 1;
    ubr ^while.header3;
  ^while.header1:
    i32 %32 = phi [^b2, i32 1] [^b4, i32 %46];
    i1 %33 = icmp sge i32 %3, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.body3, ^while.header2;
  ^while.header2:
    i32 %34 = phi [^b2, i32 1] [^while.header1, i32 1] [^b6, i32 %55];
    i1 %35 = icmp sge i32 %3, i32 %34;
    cbr i1 %35(prob = 0.984615), ^while.body4, ^b3;
  ^while.header3:
    i32 %36 = phi [^while.body2, i32 1] [^while.body5, i32 %45] [^b7, i32 %45];
    i1 %37 = icmp sge i32 %3, i32 %36;
    cbr i1 %37(prob = 0.984615), ^while.body5, ^b5;
  ^while.body3:
    [500 * i32]* %38 = getelementptr &([500 * [500 * i32]]* %11)[i64 0][i32 %32];
    [500 * i32]* %39 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %32];
    cbr i1 %1(prob = 0.984615), ^while.body6, ^b4;
  ^while.body4:
    [500 * i32]* %40 = getelementptr &([500 * [500 * i32]]* %6)[i64 0][i32 %34];
    cbr i1 %1(prob = 0.984615), ^while.body7, ^b6;
  ^b3:
    ret i32 0;
  ^while.body5:
    [500 * i32]* %41 = getelementptr &([500 * i32]* %28)[i32 %36];
    [500 * i32]* %42 = getelementptr &([500 * i32]* %41)[i64 -1];
    [500 * i32]* %43 = getelementptr &([500 * i32]* %41)[i64 1];
    [500 * i32]* %44 = getelementptr &([500 * i32]* %29)[i32 %36];
    i32 %45 = add i32 %36, i32 1;
    cbr i1 %2(prob = 0.0153846), ^while.header3, ^while.body8;
  ^b4:
    i32 %46 = add i32 %32, i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %47 = add i32 %25, i32 -1;
    i1 %48 = icmp sgt i32 %47, i32 0;
    cbr i1 %48(prob = 0.984615), ^while.body2, ^b2;
  ^while.body6:
    i32 %49 = phi [^while.body3, i32 1] [^while.body6, i32 %53];
    i32* %50 = getelementptr &([500 * i32]* %38)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([500 * i32]* %39)[i64 0][i32 %49];
    store i32* %52 with i32 %51;
    i32 %53 = add i32 %49, i32 1;
    i1 %54 = icmp sge i32 %0, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body6, ^b4;
  ^b6:
    call (i32) -> void @putch(i32 10);
    i32 %55 = add i32 %34, i32 1;
    ubr ^while.header2;
  ^while.body7:
    i32 %56 = phi [^while.body4, i32 1] [^while.body7, i32 %61];
    i32* %57 = getelementptr &([500 * i32]* %40)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    i1 %59 = icmp eq i32 %58, i32 1;
    i32 %60 = select i1 %59 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %60);
    i32 %61 = add i32 %56, i32 1;
    i1 %62 = icmp sge i32 %0, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body7, ^b6;
  ^while.body8:
    i32 %63 = phi [^while.body5, i32 1] [^b7, i32 %95];
    i32 %64 = add i32 %63, i32 -1;
    i32* %65 = getelementptr &([500 * i32]* %42)[i64 0][i32 %64];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([500 * i32]* %42)[i64 0][i32 %63];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %66, i32 %68;
    i32* %70 = getelementptr &(i32* %67)[i64 1];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %69, i32 %71;
    i32* %73 = getelementptr &([500 * i32]* %41)[i64 0][i32 %64];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %72, i32 %74;
    i32* %76 = getelementptr &(i32* %73)[i64 2];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    i32* %79 = getelementptr &([500 * i32]* %43)[i64 0][i32 %64];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %78, i32 %80;
    i32* %82 = getelementptr &([500 * i32]* %43)[i64 0][i32 %63];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32* %85 = getelementptr &(i32* %82)[i64 1];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    i32 %88 = xor i32 %87, i32 2;
    i32* %89 = getelementptr &([500 * i32]* %41)[i64 0][i32 %63];
    i32 %90 = load i32* %89;
    i32 %91 = xor i32 %90, i32 1;
    i32 %92 = or i32 %88, i32 %91;
    i1 %93 = icmp eq i32 %92, i32 0;
    i32* %94 = getelementptr &([500 * i32]* %44)[i64 0][i32 %63];
    i32 %95 = add i32 %63, i32 1;
    cbr i1 %93(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %94 with i32 1;
    ubr ^b7;
  ^if.else:
    i1 %96 = icmp eq i32 %87, i32 3;
    i32 %97 = zext i1 %96 to i32;
    store i32* %94 with i32 %97;
    ubr ^b7;
  ^b7:
    i1 %98 = icmp sge i32 %0, i32 %95;
    cbr i1 %98(prob = 0.984615), ^while.body8, ^while.header3;
}
