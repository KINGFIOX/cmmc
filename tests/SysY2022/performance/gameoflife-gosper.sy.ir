internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1, align 8 { Flexible };
internal [500 * [500 * i32]]* @sheet2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getch();
    [500 * [500 * i32]]* %5 = ptrcast [500 * [500 * i32]]* @sheet1 to [500 * [500 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 1] [^b, i32 %12];
    i1 %7 = icmp sge i32 %2, i32 %6;
    cbr i1 %7(prob = 0.984615), ^while.header1, ^entry1;
  ^while.header1:
    [500 * i32]* %8 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %6];
    cbr i1 %1(prob = 0.984615), ^while.body1, ^b;
  ^entry1:
    call (i32) -> void @starttime(i32 95);
    i1 %9 = icmp sgt i32 %3, i32 0;
    [500 * [500 * i32]]* %10 = ptrcast [500 * [500 * i32]]* @sheet2 to [500 * [500 * i32]]*;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b1;
  ^b:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %13 = phi [^entry1, i32 %3] [^while.body2, i32 %42];
    i32 %14 = phi [^entry1, i32 1] [^while.body2, i32 %21];
    i1 %15 = icmp eq i32 %14, i32 1;
    [500 * [500 * i32]]* %16 = select i1 %15 ? [500 * [500 * i32]]* %5 : [500 * [500 * i32]]* %10;
    [500 * i32]* %17 = getelementptr &([500 * [500 * i32]]* %16)[i64 0][i64 0];
    [500 * [500 * i32]]* %18 = select i1 %15 ? [500 * [500 * i32]]* %10 : [500 * [500 * i32]]* %5;
    [500 * i32]* %19 = getelementptr &([500 * [500 * i32]]* %18)[i64 0][i64 0];
    i32 %20 = zext i1 %15 to i32;
    i32 %21 = add i32 %20, i32 1;
    ubr ^while.header2;
  ^while.body1:
    i32 %22 = phi [^while.header1, i32 1] [^while.body1, i32 %27];
    i32 %23 = call () -> i32 @getch();
    i1 %24 = icmp eq i32 %23, i32 35;
    i32 %25 = zext i1 %24 to i32;
    i32* %26 = getelementptr &([500 * i32]* %8)[i64 0][i32 %22];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %22, i32 1;
    i1 %28 = icmp sge i32 %0, i32 %27;
    cbr i1 %28(prob = 0.984615), ^while.body1, ^b;
  ^b1:
    i32 %29 = phi [^entry1, i32 1] [^while.body2, i32 %21];
    i1 %30 = icmp eq i32 %29, i32 2;
    call (i32) -> void @stoptime(i32 106);
    cbr i1 %30(prob = 0.5), ^while.header3, ^while.header4;
  ^while.header2:
    i32 %31 = phi [^while.body, i32 1] [^while.header5, i32 %37] [^b5, i32 %37];
    i1 %32 = icmp sge i32 %2, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.header5, ^while.body2;
  ^while.header3:
    i32 %33 = phi [^b1, i32 1] [^b3, i32 %80];
    i1 %34 = icmp sge i32 %2, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.header6, ^while.header4;
  ^while.header4:
    i32 %35 = phi [^b1, i32 1] [^while.header3, i32 1] [^b4, i32 %87];
    i1 %36 = icmp sge i32 %2, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.header7, ^b2;
  ^while.header5:
    i32 %37 = add i32 %31, i32 1;
    [500 * i32]* %38 = getelementptr &([500 * i32]* %17)[i32 %37];
    [500 * i32]* %39 = getelementptr &([500 * i32]* %17)[i32 %31];
    [500 * i32]* %40 = getelementptr &([500 * i32]* %39)[i64 -1];
    [500 * i32]* %41 = getelementptr &([500 * i32]* %19)[i32 %31];
    cbr i1 %1(prob = 0.984615), ^while.body3, ^while.header2;
  ^while.body2:
    i32 %42 = add i32 %13, i32 -1;
    i1 %43 = icmp sgt i32 %42, i32 0;
    cbr i1 %43(prob = 0.984615), ^while.body, ^b1;
  ^while.header6:
    [500 * i32]* %44 = getelementptr &([500 * [500 * i32]]* %10)[i64 0][i32 %33];
    [500 * i32]* %45 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %33];
    cbr i1 %1(prob = 0.984615), ^while.body4, ^b3;
  ^while.header7:
    [500 * i32]* %46 = getelementptr &([500 * [500 * i32]]* %5)[i64 0][i32 %35];
    cbr i1 %1(prob = 0.984615), ^while.body5, ^b4;
  ^b2:
    ret i32 0;
  ^while.body3:
    i32 %47 = phi [^while.header5, i32 1] [^b5, i32 %79];
    i32 %48 = add i32 %47, i32 -1;
    i32* %49 = getelementptr &([500 * i32]* %40)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([500 * i32]* %40)[i64 0][i32 %47];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %50, i32 %52;
    i32* %54 = getelementptr &(i32* %51)[i64 1];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %53, i32 %55;
    i32* %57 = getelementptr &([500 * i32]* %39)[i64 0][i32 %48];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %57)[i64 2];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %59, i32 %61;
    i32* %63 = getelementptr &([500 * i32]* %38)[i64 0][i32 %48];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    i32* %66 = getelementptr &([500 * i32]* %38)[i64 0][i32 %47];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32* %69 = getelementptr &(i32* %66)[i64 1];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32 %72 = xor i32 %71, i32 2;
    i32* %73 = getelementptr &([500 * i32]* %39)[i64 0][i32 %47];
    i32 %74 = load i32* %73;
    i32 %75 = xor i32 %74, i32 1;
    i32 %76 = or i32 %72, i32 %75;
    i1 %77 = icmp eq i32 %76, i32 0;
    i32* %78 = getelementptr &([500 * i32]* %41)[i64 0][i32 %47];
    i32 %79 = add i32 %47, i32 1;
    cbr i1 %77(prob = 0.5), ^if.then, ^if.else;
  ^b3:
    i32 %80 = add i32 %33, i32 1;
    ubr ^while.header3;
  ^while.body4:
    i32 %81 = phi [^while.header6, i32 1] [^while.body4, i32 %85];
    i32* %82 = getelementptr &([500 * i32]* %44)[i64 0][i32 %81];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &([500 * i32]* %45)[i64 0][i32 %81];
    store i32* %84 with i32 %83;
    i32 %85 = add i32 %81, i32 1;
    i1 %86 = icmp sge i32 %0, i32 %85;
    cbr i1 %86(prob = 0.984615), ^while.body4, ^b3;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %87 = add i32 %35, i32 1;
    ubr ^while.header4;
  ^while.body5:
    i32 %88 = phi [^while.header7, i32 1] [^while.body5, i32 %93];
    i32* %89 = getelementptr &([500 * i32]* %46)[i64 0][i32 %88];
    i32 %90 = load i32* %89;
    i1 %91 = icmp eq i32 %90, i32 1;
    i32 %92 = select i1 %91 ? i32 35 : i32 46;
    call (i32) -> void @putch(i32 %92);
    i32 %93 = add i32 %88, i32 1;
    i1 %94 = icmp sge i32 %0, i32 %93;
    cbr i1 %94(prob = 0.984615), ^while.body5, ^b4;
  ^if.then:
    store i32* %78 with i32 1;
    ubr ^b5;
  ^if.else:
    i1 %95 = icmp eq i32 %71, i32 3;
    i32 %96 = zext i1 %95 to i32;
    store i32* %78 with i32 %96;
    ubr ^b5;
  ^b5:
    i1 %97 = icmp sge i32 %0, i32 %79;
    cbr i1 %97(prob = 0.984615), ^while.body3, ^while.header2;
}
