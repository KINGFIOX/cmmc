internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @func(f32 %data, i32 %num) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i32 %0 = bitcast f32 %data to i32;
    [4084 * i32]* %1 = ptrcast [4084 * i32]* @lut_func to [4084 * i32]*;
    i32* %2 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %1, i32 %0, i32 %num);
    i32* %3 = getelementptr &(i32* %2)[i64 3];
    i32 %4 = load i32* %3;
    i1 %5 = icmp neq i32 %4, i32 0;
    i32* %6 = getelementptr &(i32* %2)[i64 2];
    f32* %7 = ptrcast i32* %6 to f32*;
    cbr i1 %5(prob = 0.9), ^b, ^entry1;
  ^b:
    f32 %8 = load f32* %7;
    ubr ^b3;
  ^entry1:
    i1 %9 = icmp slt i32 %num, i32 0;
    cbr i1 %9(prob = 0.5), ^b1, ^b2;
  ^b1:
    store i32* %3 with i32 1;
    store f32* %7 with f32 0;
    ubr ^b3;
  ^b2:
    i32 %10 = add i32 %num, i32 -1;
    f32 %11 = call (f32, i32) -> f32 @func(f32 %data, i32 %10);
    f32 %12 = fadd f32 %data, f32 %11;
    f32 %13 = call (f32, i32) -> f32 @func(f32 %12, i32 %10);
    f32 %14 = fsub f32 %12, f32 %13;
    store i32* %3 with i32 1;
    store f32* %7 with f32 %14;
    ubr ^b3;
  ^b3:
    f32 %15 = phi [^b, f32 %8] [^b1, f32 0] [^b2, f32 %14];
    ret f32 %15;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    call (i32) -> void @starttime(i32 21);
    i32 %0 = call () -> i32 @getint();
    f32 %1 = call (f32, i32) -> f32 @func(f32 1.001, i32 %0);
    i1 %2 = fcmp oeq f32 %1, f32 0;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    call (i32) -> void @putch(i32 112);
    ubr ^b;
  ^b:
    call (i32) -> void @stoptime(i32 32);
    ret i32 0;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
[4084 * i32]* @lut_func, align 8;
