internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %2 = load i32* %1;
    store i32* %pivot with i32 %2;
    store i32* %l with i32 %begin;
    i32 %3 = add i32 %end, i32 1;
    store i32* %r with i32 %3;
    store i32* %xx with i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b7, i32 %42] [^b, i32 %4] [^entry, i32 %begin];
    i32 %5 = phi [^b7, i32 %43] [^b, i32 %5] [^entry, i32 %2];
    i32 %6 = phi [^b7, i32 %44] [^b, i32 %6] [^entry, i32 %begin];
    i32 %7 = phi [^b7, i32 %45] [^b, i32 %10] [^entry, i32 %3];
    i32 %8 = phi [^b7, i32 %46] [^b, i32 %18] [^entry, i32 0];
    i1 %9 = scmp lt i32 %6, i32 %7;
    cbr i1 %9(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %10 = add i32 %7, i32 -1;
    store i32* %r with i32 %10;
    i32* %11 = getelementptr &(i32* %arr)[i32 %10];
    i32 %12 = load i32* %11;
    i1 %13 = scmp lt i32 %12, i32 %5;
    cbr i1 %13(prob = 0.5), ^while.header1, ^b;
^while.header1:
    i32 %14 = phi [^b2, i32 %19] [^while.body, i32 %6] [^while.header, i32 %6];
    i32 %15 = phi [^b2, i32 %15] [^while.body, i32 %10] [^while.header, i32 %7];
    i32 %16 = phi [^b2, i32 %25] [^while.body, i32 %8] [^while.header, i32 %8];
    i1 %17 = scmp lt i32 %14, i32 %15;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %18 = add i32 %8, i32 1;
    store i32* %xx with i32 %18;
    ubr ^while.header;
^while.body1:
    i32 %19 = add i32 %14, i32 1;
    store i32* %l with i32 %19;
    i32* %20 = getelementptr &(i32* %arr)[i32 %19];
    i32 %21 = load i32* %20;
    i1 %22 = scmp ge i32 %21, i32 %5;
    cbr i1 %22(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %23 = phi [^while.body1, i32 %19] [^while.header1, i32 %14];
    i1 %24 = scmp eq i32 %23, i32 %15;
    cbr i1 %24(prob = 0.5), ^b3, ^if.else;
^b2:
    i32 %25 = add i32 %16, i32 -1;
    store i32* %xx with i32 %25;
    ubr ^while.header1;
^b3:
    i32* %26 = getelementptr &(i32* %arr)[i32 %4];
    store i32* %26 with i32 %5;
    i32 %27 = load i32* %begin1;
    i32 %28 = load i32* %l;
    i32* %29 = getelementptr &(i32* %arr)[i32 %27];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %arr)[i32 %28];
    i32 %32 = load i32* %31;
    store i32* %29 with i32 %32;
    store i32* %31 with i32 %30;
    i32 %33 = load i32* %begin1;
    i32 %34 = load i32* %end1;
    i32 %35 = load i32* %pos1;
    i32 %36 = load i32* %l;
    i32 %37 = load i32* %xx;
    ubr ^while.header2;
^if.else:
    i32* %38 = getelementptr &(i32* %arr)[i32 %23];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %arr)[i32 %15];
    i32 %41 = load i32* %40;
    store i32* %38 with i32 %41;
    store i32* %40 with i32 %39;
    i32 %42 = load i32* %begin1;
    i32 %43 = load i32* %pivot;
    i32 %44 = load i32* %l;
    i32 %45 = load i32* %r;
    i32 %46 = load i32* %xx;
    ubr ^while.header3;
^while.header2:
    i32 %47 = phi [^while.body2, i32 %55] [^b3, i32 0];
    i1 %48 = scmp lt i32 %47, i32 %27;
    cbr i1 %48(prob = 0.5), ^b4, ^b6;
^while.header3:
    i32 %49 = phi [^while.body3, i32 %56] [^if.else, i32 0];
    i1 %50 = scmp lt i32 %49, i32 %23;
    cbr i1 %50(prob = 0.5), ^b5, ^b7;
^b4:
    i1 %51 = scmp lt i32 %47, i32 %28;
    ubr ^b6;
^b5:
    i1 %52 = scmp lt i32 %49, i32 %15;
    ubr ^b7;
^b6:
    i1 %53 = phi [^while.header2, i1 false] [^b4, i1 %51];
    cbr i1 %53(prob = 0.97), ^while.body2, ^entry1;
^b7:
    i1 %54 = phi [^while.header3, i1 false] [^b5, i1 %52];
    cbr i1 %54(prob = 0.97), ^while.body3, ^while.header;
^while.body2:
    i32 %55 = add i32 %47, i32 1;
    ubr ^while.header2;
^while.body3:
    i32 %56 = add i32 %49, i32 1;
    ubr ^while.header3;
^entry1:
    i1 %57 = scmp gt i32 %36, i32 %35;
    cbr i1 %57(prob = 0.5), ^if.then, ^b8;
^b8:
    i1 %58 = scmp lt i32 %36, i32 %35;
    cbr i1 %58(prob = 0.5), ^if.then1, ^b9;
^if.then:
    i32 %59 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %33, i32 %36, i32 %35, i32* %0);
    ret i32 %59;
^if.then1:
    i32 %60 = add i32 %36, i32 1;
    i32 %61 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %arr, i32 %60, i32 %34, i32 %35, i32* %0);
    ret i32 %61;
^b9:
    ret i32 %37;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
