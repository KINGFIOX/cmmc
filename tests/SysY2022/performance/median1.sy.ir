internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10000000 * i32]* %0 = ptrcast [10000000 * i32]* @a to [10000000 * i32]*;
    i32* %1 = getelementptr &([10000000 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = add i32 %2, i32 -1;
    i32 %4 = sdiv i32 %2, i32 2;
    call (i32) -> void @starttime(i32 59);
    ubr ^5;
  ^5:
    i32 %6 = phi [^entry, i32 %3] [^if.then, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^if.then, i32 %36];
    i32* %8 = phi [^entry, i32* %1] [^if.then, i32* %37];
    ubr ^entry1;
  ^entry1:
    i32 %9 = phi [^5, i32 %6] [^b1, i32 %26];
    i32 %10 = load i32* %8;
    i32 %11 = add i32 %9, i32 1;
    ubr ^while.header;
  ^while.header:
    i32 %12 = phi [^entry1, i32 %11] [^while.body, i32 %15] [^entry2, i32 %19];
    i32 %13 = phi [^entry1, i32 %7] [^while.body, i32 %13] [^entry2, i32 %26];
    i1 %14 = icmp sgt i32 %12, i32 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32 %15 = add i32 %12, i32 -1;
    i32* %16 = getelementptr &(i32* %1)[i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = icmp sgt i32 %10, i32 %17;
    cbr i1 %18(prob = 0.5), ^while.header1, ^while.header;
  ^while.header1:
    i32 %19 = phi [^while.header, i32 %12] [^while.body, i32 %15] [^while.body1, i32 %19];
    i32 %20 = phi [^while.header, i32 %13] [^while.body, i32 %13] [^while.body1, i32 %22];
    i1 %21 = icmp sgt i32 %19, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %22 = add i32 %20, i32 1;
    i32* %23 = getelementptr &(i32* %1)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = icmp sle i32 %10, i32 %24;
    cbr i1 %25(prob = 0.5), ^b, ^while.header1;
  ^b:
    i32 %26 = phi [^while.header1, i32 %20] [^while.body1, i32 %22];
    i1 %27 = icmp eq i32 %19, i32 %26;
    cbr i1 %27(prob = 0.5), ^b1, ^entry2;
  ^entry2:
    i32* %28 = getelementptr &(i32* %1)[i32 %26];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %1)[i32 %19];
    i32 %31 = load i32* %30;
    store i32* %28 with i32 %31;
    store i32* %30 with i32 %29;
    ubr ^while.header;
  ^b1:
    store i32* %8 with i32 %10;
    i32* %32 = getelementptr &(i32* %1)[i32 %26];
    i32 %33 = load i32* %32;
    store i32* %8 with i32 %33;
    store i32* %32 with i32 %10;
    i1 %34 = icmp slt i32 %4, i32 %26;
    cbr i1 %34(prob = 0.5), ^entry1, ^b2;
  ^b2:
    i1 %35 = icmp sgt i32 %4, i32 %26;
    cbr i1 %35(prob = 0.5), ^if.then, ^entry3;
  ^if.then:
    i32 %36 = add i32 %26, i32 1;
    i32* %37 = getelementptr &(i32* %1)[i32 %36];
    ubr ^5;
  ^entry3:
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    i32* %38 = getelementptr &([10000000 * i32]* %0)[i64 0][i32 %4];
    i32 %39 = load i32* %38;
    i32 %40 = srem i32 %39, i32 256;
    ret i32 %40;
}
