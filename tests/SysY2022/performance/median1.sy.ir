internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    ubr ^4;
^4:
    i32 %5 = phi [^entry, i32 %2] [^if.then, i32 %8];
    i32 %6 = phi [^entry, i32 0] [^if.then, i32 %36];
    i32* %7 = getelementptr &(i32* %0)[i32 %6];
    ubr ^entry1;
^entry1:
    i32 %8 = phi [^4, i32 %5] [^b1, i32 %25];
    i32 %9 = load i32* %7;
    i32 %10 = add i32 %8, i32 1;
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^entry1, i32 %6] [^while.body, i32 %11] [^entry2, i32 %25];
    i32 %12 = phi [^entry1, i32 %10] [^while.body, i32 %14] [^entry2, i32 %18];
    i1 %13 = scmp lt i32 %11, i32 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %14 = add i32 %12, i32 -1;
    i32* %15 = getelementptr &(i32* %0)[i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp lt i32 %16, i32 %9;
    cbr i1 %17(prob = 0.5), ^while.header1, ^while.header;
^while.header1:
    i32 %18 = phi [^while.header, i32 %12] [^while.body, i32 %14] [^while.body1, i32 %18];
    i32 %19 = phi [^while.header, i32 %11] [^while.body, i32 %11] [^while.body1, i32 %21];
    i1 %20 = scmp lt i32 %19, i32 %18;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %21 = add i32 %19, i32 1;
    i32* %22 = getelementptr &(i32* %0)[i32 %21];
    i32 %23 = load i32* %22;
    i1 %24 = scmp ge i32 %23, i32 %9;
    cbr i1 %24(prob = 0.5), ^b, ^while.header1;
^b:
    i32 %25 = phi [^while.header1, i32 %19] [^while.body1, i32 %21];
    i1 %26 = scmp eq i32 %25, i32 %18;
    cbr i1 %26(prob = 0.5), ^b1, ^entry2;
^entry2:
    i32* %27 = getelementptr &(i32* %0)[i32 %25];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &(i32* %0)[i32 %18];
    i32 %30 = load i32* %29;
    store i32* %27 with i32 %30;
    store i32* %29 with i32 %28;
    ubr ^while.header;
^b1:
    store i32* %7 with i32 %9;
    i32 %31 = load i32* %7;
    i32* %32 = getelementptr &(i32* %0)[i32 %25];
    i32 %33 = load i32* %32;
    store i32* %7 with i32 %33;
    store i32* %32 with i32 %31;
    i1 %34 = scmp gt i32 %25, i32 %3;
    cbr i1 %34(prob = 0.5), ^entry1, ^b2;
^b2:
    i1 %35 = scmp lt i32 %25, i32 %3;
    cbr i1 %35(prob = 0.5), ^if.then, ^entry3;
^if.then:
    i32 %36 = add i32 %25, i32 1;
    ubr ^4;
^entry3:
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %1, i32* %0);
    i32* %37 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %3];
    i32 %38 = load i32* %37;
    i32 %39 = srem i32 %38, i32 256;
    ret i32 %39;
}
