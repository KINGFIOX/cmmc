internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos) -> i32 {
^0:
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    ubr ^entry;
^entry:
    i32 %2 = phi [^0, i32 %end] [^b2, i32 %27];
    i32 %3 = load i32* %1;
    i32 %4 = add i32 %2, i32 1;
    ubr ^while.guard;
^while.guard:
    i32 %5 = phi [^entry, i32 0] [^entry1, i32 %26];
    i32 %6 = phi [^entry, i32 %4] [^entry1, i32 %15];
    i32 %7 = phi [^entry, i32 %begin] [^entry1, i32 %27];
    i1 %8 = scmp lt i32 %7, i32 %6;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.guard1;
^while.body:
    i32 %9 = phi [^while.guard, i32 %5] [^b, i32 %18];
    i32 %10 = phi [^while.guard, i32 %6] [^b, i32 %11];
    i32 %11 = add i32 %10, i32 -1;
    i32* %12 = getelementptr &(i32* %arr)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %13, i32 %3;
    cbr i1 %14(prob = 0.5), ^while.guard1, ^b;
^while.guard1:
    i32 %15 = phi [^while.guard, i32 %6] [^while.body, i32 %11] [^b, i32 %11];
    i32 %16 = phi [^while.guard, i32 %5] [^while.body, i32 %9] [^b, i32 %18];
    i1 %17 = scmp lt i32 %7, i32 %15;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %18 = add i32 %9, i32 1;
    i1 %19 = scmp lt i32 %7, i32 %11;
    cbr i1 %19(prob = 0.97), ^while.body, ^while.guard1;
^while.body1:
    i32 %20 = phi [^while.guard1, i32 %16] [^b3, i32 %37];
    i32 %21 = phi [^while.guard1, i32 %7] [^b3, i32 %22];
    i32 %22 = add i32 %21, i32 1;
    i32* %23 = getelementptr &(i32* %arr)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp ge i32 %24, i32 %3;
    cbr i1 %25(prob = 0.5), ^b1, ^b3;
^b1:
    i32 %26 = phi [^while.guard1, i32 %16] [^while.body1, i32 %20] [^b3, i32 %37];
    i32 %27 = phi [^while.guard1, i32 %7] [^while.body1, i32 %22] [^b3, i32 %22];
    i1 %28 = scmp eq i32 %27, i32 %15;
    cbr i1 %28(prob = 0.5), ^b2, ^entry1;
^entry1:
    i32* %29 = getelementptr &(i32* %arr)[i32 %27];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %arr)[i32 %15];
    i32 %32 = load i32* %31;
    store i32* %29 with i32 %32;
    store i32* %31 with i32 %30;
    ubr ^while.guard;
^b2:
    store i32* %1 with i32 %3;
    i32 %33 = load i32* %1;
    i32* %34 = getelementptr &(i32* %arr)[i32 %27];
    i32 %35 = load i32* %34;
    store i32* %1 with i32 %35;
    store i32* %34 with i32 %33;
    i1 %36 = scmp gt i32 %27, i32 %pos;
    cbr i1 %36(prob = 0.5), ^entry, ^b4;
^b3:
    i32 %37 = add i32 %20, i32 -1;
    i1 %38 = scmp lt i32 %22, i32 %15;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b1;
^b4:
    i1 %39 = scmp lt i32 %27, i32 %pos;
    cbr i1 %39(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %40 = add i32 %27, i32 1;
    i32 %41 = call (i32*, i32, i32, i32) -> i32 @median(i32* %arr, i32 %40, i32 %2, i32 %pos);
    ubr ^b5;
^b5:
    i32 %42 = phi [^b4, i32 %26] [^if.then, i32 %41];
    ret i32 %42;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3);
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %1, i32* %0);
    i32* %5 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = srem i32 %6, i32 256;
    ret i32 %7;
}
