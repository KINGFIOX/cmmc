internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = scmp gt i32 %1, i32 1;
    i1 %3 = scmp gt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %5 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^b, i32 %17];
    i1 %7 = scmp gt i32 %0, i32 %6;
    [600 * [600 * i32]]* %8 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %6];
    cbr i1 %7(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %9 = phi [^while.header, i32 0] [^b2, i32 %31];
    i1 %10 = scmp gt i32 %0, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^b3, i32 %18];
    i32 %12 = phi [^while.header, i32 1] [^b3, i32 %32];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %12];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * i32]]* %13)[i64 -1];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * i32]]* %13)[i64 1];
    i1 %16 = scmp gt i32 %1, i32 %12;
    cbr i1 %16(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %17 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.body:
    cbr i1 %3(prob = 0.97), ^indirect, ^b2;
  ^while.header3:
    i32 %18 = phi [^while.header2, i32 1] [^b4, i32 %41];
    i1 %19 = scmp gt i32 %1, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b3;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %20 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %20);
    i32 %21 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %22 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %21];
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %22)[i64 0][i32 %21];
    i32* %24 = getelementptr &([600 * i32]* %23)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %24);
    i32 %25 = add i32 %12, i32 -1;
    [600 * [600 * i32]]* %26 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %25];
    i32 %27 = add i32 %11, i32 -1;
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %26)[i64 0][i32 %27];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    ret i32 0;
  ^indirect:
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %8)[i64 0][i32 %9];
    ubr ^super.header;
  ^b2:
    i32 %31 = add i32 %9, i32 1;
    ubr ^while.header1;
  ^b3:
    i32 %32 = add i32 %12, i32 1;
    ubr ^while.header2;
  ^while.body1:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b4;
  ^indirect1:
    [600 * i32]* %33 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %18];
    [600 * i32]* %34 = getelementptr &([600 * i32]* %33)[i64 -1];
    [600 * i32]* %35 = getelementptr &([600 * i32]* %33)[i64 1];
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %18];
    [600 * i32]* %37 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %18];
    ubr ^super.header2;
  ^super.header:
    i32 %38 = phi [^indirect, i32 0] [^while.body2, i32 %39];
    i32 %39 = add i32 %38, i32 4;
    i1 %40 = scmp gt i32 %0, i32 %39;
    cbr i1 %40(prob = 0.89), ^while.body2, ^super.header1;
  ^b4:
    i32 %41 = add i32 %18, i32 1;
    ubr ^while.header3;
  ^while.body2:
    i32* %42 = getelementptr &([600 * i32]* %30)[i64 0][i32 %38];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 1;
    ubr ^super.header;
  ^super.header1:
    i32 %46 = phi [^super.header, i32 %38] [^while.body3, i32 %47];
    i32 %47 = add i32 %46, i32 4;
    i1 %48 = scmp gt i32 %0, i32 %47;
    cbr i1 %48(prob = 0.89), ^while.body3, ^while.body5;
  ^super.header2:
    i32 %49 = phi [^indirect1, i32 1] [^while.body4, i32 %50];
    i32 %50 = add i32 %49, i32 4;
    i1 %51 = scmp gt i32 %1, i32 %50;
    cbr i1 %51(prob = 0.89), ^while.body4, ^super.header3;
  ^while.body3:
    i32* %52 = getelementptr &([600 * i32]* %30)[i64 0][i32 %46];
    store i32* %52 with i32 1;
    i32* %53 = getelementptr &(i32* %52)[i64 1];
    store i32* %53 with i32 1;
    i32* %54 = getelementptr &(i32* %52)[i64 2];
    store i32* %54 with i32 1;
    i32* %55 = getelementptr &(i32* %52)[i64 3];
    store i32* %55 with i32 1;
    ubr ^super.header1;
  ^while.body4:
    i32* %56 = getelementptr &([600 * i32]* %36)[i64 0][i32 %49];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &([600 * i32]* %37)[i64 0][i32 %49];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &([600 * i32]* %34)[i64 0][i32 %49];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &([600 * i32]* %35)[i64 0][i32 %49];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 %65;
    i32* %67 = getelementptr &([600 * i32]* %33)[i64 0][i32 %49];
    i32* %68 = getelementptr &(i32* %67)[i64 -1];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %66, i32 %69;
    i32* %71 = getelementptr &(i32* %67)[i64 1];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = sdiv i32 %73, i32 %4;
    store i32* %67 with i32 %74;
    i32* %75 = getelementptr &(i32* %56)[i64 1];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    i32* %78 = getelementptr &(i32* %58)[i64 1];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %77, i32 %79;
    i32* %81 = getelementptr &(i32* %61)[i64 1];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %80, i32 %82;
    i32* %84 = getelementptr &(i32* %64)[i64 1];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32* %87 = getelementptr &(i32* %67)[i64 2];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    i32 %90 = sdiv i32 %89, i32 %4;
    store i32* %71 with i32 %90;
    i32* %91 = getelementptr &(i32* %56)[i64 2];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    i32* %94 = getelementptr &(i32* %58)[i64 2];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32* %97 = getelementptr &(i32* %61)[i64 2];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32* %100 = getelementptr &(i32* %64)[i64 2];
    i32 %101 = load i32* %100;
    i32 %102 = add i32 %99, i32 %101;
    i32* %103 = getelementptr &(i32* %67)[i64 3];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    i32 %106 = sdiv i32 %105, i32 %4;
    store i32* %87 with i32 %106;
    i32* %107 = getelementptr &(i32* %56)[i64 3];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %106, i32 %108;
    i32* %110 = getelementptr &(i32* %58)[i64 3];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %61)[i64 3];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %112, i32 %114;
    i32* %116 = getelementptr &(i32* %64)[i64 3];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %115, i32 %117;
    i32* %119 = getelementptr &(i32* %67)[i64 4];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %118, i32 %120;
    i32 %122 = sdiv i32 %121, i32 %4;
    store i32* %103 with i32 %122;
    ubr ^super.header2;
  ^while.body5:
    i32 %123 = phi [^super.header1, i32 %46] [^while.body5, i32 %125];
    i32* %124 = getelementptr &([600 * i32]* %30)[i64 0][i32 %123];
    store i32* %124 with i32 1;
    i32 %125 = add i32 %123, i32 1;
    i1 %126 = scmp gt i32 %0, i32 %125;
    cbr i1 %126(prob = 0.97), ^while.body5, ^b2;
  ^super.header3:
    i32 %127 = phi [^super.header2, i32 %49] [^while.body6, i32 %128];
    i32 %128 = add i32 %127, i32 4;
    i1 %129 = scmp gt i32 %1, i32 %128;
    cbr i1 %129(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %130 = getelementptr &([600 * i32]* %36)[i64 0][i32 %127];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([600 * i32]* %37)[i64 0][i32 %127];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %131, i32 %133;
    i32* %135 = getelementptr &([600 * i32]* %34)[i64 0][i32 %127];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %134, i32 %136;
    i32* %138 = getelementptr &([600 * i32]* %35)[i64 0][i32 %127];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %137, i32 %139;
    i32* %141 = getelementptr &([600 * i32]* %33)[i64 0][i32 %127];
    i32* %142 = getelementptr &(i32* %141)[i64 -1];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %140, i32 %143;
    i32* %145 = getelementptr &(i32* %141)[i64 1];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %144, i32 %146;
    i32 %148 = sdiv i32 %147, i32 %4;
    store i32* %141 with i32 %148;
    i32* %149 = getelementptr &(i32* %130)[i64 1];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %148, i32 %150;
    i32* %152 = getelementptr &(i32* %132)[i64 1];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %151, i32 %153;
    i32* %155 = getelementptr &(i32* %135)[i64 1];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %154, i32 %156;
    i32* %158 = getelementptr &(i32* %138)[i64 1];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    i32* %161 = getelementptr &(i32* %141)[i64 2];
    i32 %162 = load i32* %161;
    i32 %163 = add i32 %160, i32 %162;
    i32 %164 = sdiv i32 %163, i32 %4;
    store i32* %145 with i32 %164;
    i32* %165 = getelementptr &(i32* %130)[i64 2];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %164, i32 %166;
    i32* %168 = getelementptr &(i32* %132)[i64 2];
    i32 %169 = load i32* %168;
    i32 %170 = add i32 %167, i32 %169;
    i32* %171 = getelementptr &(i32* %135)[i64 2];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %170, i32 %172;
    i32* %174 = getelementptr &(i32* %138)[i64 2];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %173, i32 %175;
    i32* %177 = getelementptr &(i32* %141)[i64 3];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %176, i32 %178;
    i32 %180 = sdiv i32 %179, i32 %4;
    store i32* %161 with i32 %180;
    i32* %181 = getelementptr &(i32* %130)[i64 3];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    i32* %184 = getelementptr &(i32* %132)[i64 3];
    i32 %185 = load i32* %184;
    i32 %186 = add i32 %183, i32 %185;
    i32* %187 = getelementptr &(i32* %135)[i64 3];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %186, i32 %188;
    i32* %190 = getelementptr &(i32* %138)[i64 3];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %189, i32 %191;
    i32* %193 = getelementptr &(i32* %141)[i64 4];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %192, i32 %194;
    i32 %196 = sdiv i32 %195, i32 %4;
    store i32* %177 with i32 %196;
    ubr ^super.header3;
  ^while.body7:
    i32 %197 = phi [^super.header3, i32 %127] [^while.body7, i32 %217];
    i32* %198 = getelementptr &([600 * i32]* %36)[i64 0][i32 %197];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &([600 * i32]* %37)[i64 0][i32 %197];
    i32 %201 = load i32* %200;
    i32 %202 = add i32 %199, i32 %201;
    i32* %203 = getelementptr &([600 * i32]* %34)[i64 0][i32 %197];
    i32 %204 = load i32* %203;
    i32 %205 = add i32 %202, i32 %204;
    i32* %206 = getelementptr &([600 * i32]* %35)[i64 0][i32 %197];
    i32 %207 = load i32* %206;
    i32 %208 = add i32 %205, i32 %207;
    i32* %209 = getelementptr &([600 * i32]* %33)[i64 0][i32 %197];
    i32* %210 = getelementptr &(i32* %209)[i64 -1];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %208, i32 %211;
    i32* %213 = getelementptr &(i32* %209)[i64 1];
    i32 %214 = load i32* %213;
    i32 %215 = add i32 %212, i32 %214;
    i32 %216 = sdiv i32 %215, i32 %4;
    store i32* %209 with i32 %216;
    i32 %217 = add i32 %197, i32 1;
    i1 %218 = scmp gt i32 %1, i32 %217;
    cbr i1 %218(prob = 0.97), ^while.body7, ^b4;
}
