internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^b, i32 %17] [^entry, i32 0];
    i32 %3 = phi [^b, i32 %8] [^entry, i32 %1];
    i32 %4 = phi [^b, i32 %9] [^entry, i32 %0];
    i1 %5 = scmp lt i32 %2, i32 %4;
    cbr i1 %5(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %6 = phi [^while.header, i32 %2] [^b2, i32 %18];
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %47];
    i32 %8 = phi [^while.header, i32 %3] [^b2, i32 %21];
    i32 %9 = phi [^while.header, i32 %4] [^b2, i32 %22];
    i1 %10 = scmp lt i32 %7, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header3, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^b3, i32 %48];
    i32 %12 = phi [^while.header, i32 1] [^b3, i32 %25];
    i32 %13 = phi [^while.header, i32 %3] [^b3, i32 %26];
    i32 %14 = phi [^while.header, i32 %4] [^b3, i32 %27];
    i32 %15 = add i32 %14, i32 -1;
    i1 %16 = scmp lt i32 %11, i32 %15;
    cbr i1 %16(prob = 0.97), ^while.header4, ^b1;
^b:
    i32 %17 = add i32 %6, i32 1;
    ubr ^while.header;
^while.header3:
    i32 %18 = phi [^while.header1, i32 %6] [^while.body, i32 %18];
    i32 %19 = phi [^while.header1, i32 %7] [^while.body, i32 %19];
    i32 %20 = phi [^while.header1, i32 0] [^while.body, i32 %46];
    i32 %21 = phi [^while.header1, i32 %8] [^while.body, i32 %21];
    i32 %22 = phi [^while.header1, i32 %9] [^while.body, i32 %22];
    i1 %23 = scmp lt i32 %20, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body, ^b2;
^while.header4:
    i32 %24 = phi [^while.header2, i32 %11] [^b4, i32 %49];
    i32 %25 = phi [^while.header2, i32 1] [^b4, i32 %84];
    i32 %26 = phi [^while.header2, i32 %13] [^b4, i32 %52];
    i32 %27 = phi [^while.header2, i32 %14] [^b4, i32 %53];
    i32 %28 = add i32 %27, i32 -1;
    i1 %29 = scmp lt i32 %25, i32 %28;
    cbr i1 %29(prob = 0.97), ^while.header5, ^b3;
^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %30 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %14, i32* %30);
    i32 %31 = sdiv i32 %14, i32 2;
    [600 * [600 * i32]]* %32 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %31];
    [600 * i32]* %33 = getelementptr &([600 * [600 * i32]]* %32)[i64 0][i32 %31];
    i32* %34 = getelementptr &([600 * i32]* %33)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %14, i32* %34);
    i32 %35 = add i32 %11, i32 -1;
    [600 * [600 * i32]]* %36 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %35];
    i32 %37 = add i32 %12, i32 -1;
    [600 * i32]* %38 = getelementptr &([600 * [600 * i32]]* %36)[i64 0][i32 %37];
    i32* %39 = getelementptr &([600 * i32]* %38)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %14, i32* %39);
    ret i32 0;
^while.body:
    [600 * [600 * i32]]* %40 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %18];
    [600 * i32]* %41 = getelementptr &([600 * [600 * i32]]* %40)[i64 0][i32 %19];
    i32* %42 = getelementptr &([600 * i32]* %41)[i64 0][i32 %20];
    store i32* %42 with i32 1;
    [600 * [600 * i32]]* %43 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i32 %18];
    [600 * i32]* %44 = getelementptr &([600 * [600 * i32]]* %43)[i64 0][i32 %19];
    i32* %45 = getelementptr &([600 * i32]* %44)[i64 0][i32 %20];
    store i32* %45 with i32 0;
    i32 %46 = add i32 %20, i32 1;
    ubr ^while.header3;
^b2:
    i32 %47 = add i32 %19, i32 1;
    ubr ^while.header1;
^b3:
    i32 %48 = add i32 %24, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %49 = phi [^while.header4, i32 %24] [^while.body1, i32 %49];
    i32 %50 = phi [^while.header4, i32 %25] [^while.body1, i32 %50];
    i32 %51 = phi [^while.header4, i32 1] [^while.body1, i32 %75];
    i32 %52 = phi [^while.header4, i32 %26] [^while.body1, i32 %52];
    i32 %53 = phi [^while.header4, i32 %27] [^while.body1, i32 %53];
    i32 %54 = add i32 %53, i32 -1;
    i1 %55 = scmp lt i32 %51, i32 %54;
    cbr i1 %55(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    [600 * [600 * i32]]* %56 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %49];
    [600 * i32]* %57 = getelementptr &([600 * [600 * i32]]* %56)[i64 0][i32 %50];
    i32* %58 = getelementptr &([600 * i32]* %57)[i64 0][i32 %51];
    [600 * [600 * i32]]* %59 = getelementptr &([600 * [600 * i32]]* %56)[i64 -1];
    [600 * i32]* %60 = getelementptr &([600 * [600 * i32]]* %59)[i64 0][i32 %50];
    i32* %61 = getelementptr &([600 * i32]* %60)[i64 0][i32 %51];
    i32 %62 = load i32* %61;
    [600 * [600 * i32]]* %63 = getelementptr &([600 * [600 * i32]]* %56)[i64 1];
    [600 * i32]* %64 = getelementptr &([600 * [600 * i32]]* %63)[i64 0][i32 %50];
    i32* %65 = getelementptr &([600 * i32]* %64)[i64 0][i32 %51];
    i32 %66 = load i32* %65;
    [600 * i32]* %67 = getelementptr &([600 * i32]* %57)[i64 -1];
    i32* %68 = getelementptr &([600 * i32]* %67)[i64 0][i32 %51];
    i32 %69 = load i32* %68;
    [600 * i32]* %70 = getelementptr &([600 * i32]* %57)[i64 1];
    i32* %71 = getelementptr &([600 * i32]* %70)[i64 0][i32 %51];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %58)[i64 -1];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %51, i32 1;
    i32* %76 = getelementptr &(i32* %58)[i64 1];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %77, i32 %62;
    i32 %79 = add i32 %78, i32 %66;
    i32 %80 = add i32 %79, i32 %69;
    i32 %81 = add i32 %80, i32 %72;
    i32 %82 = add i32 %81, i32 %74;
    i32 %83 = sdiv i32 %82, i32 %52;
    store i32* %58 with i32 %83;
    ubr ^while.header5;
^b4:
    i32 %84 = add i32 %50, i32 1;
    ubr ^while.header4;
}
