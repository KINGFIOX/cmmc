internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body i32 0, i32 %1, i32 %0 ], [ ^b i32 %1, i32 %0 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body1 i32 %arg, i32 0, i32 %arg1, i32 %arg2 ], [ ^indirect i32 %arg2, i32 %arg, i32 %arg1, i32 %arg2 ];
^b(i32 %arg, i32 %arg1):
    i32 %0 = sub i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 1, i32 %0;
    cbr i1 %1, [ ^while.body2 i32 1, i32 %arg, i32 %arg1 ], [ ^indirect1 i32 %arg1, i32 1, i32 1 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 %arg1, i32 0, i32 %arg2, i32 %arg3 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 1, i32 %0;
    cbr i1 %1, [ ^while.body4 i32 %arg, i32 1, i32 %arg1, i32 %arg2 ], [ ^b2 i32 %arg, i32 1, i32 %arg1, i32 %arg2 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1, [ ^while.body i32 %0, i32 %arg2, i32 %arg3 ], [ ^b i32 %arg2, i32 %arg3 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @stoptime(i32 53);
    i32* %0 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 0][i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %0);
    i32 %1 = sdiv i32 %arg, i32 2;
    [600 * [600 * i32]]* %2 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %1];
    [600 * i32]* %3 = getelementptr &([600 * [600 * i32]]* %2)[i32 0][i32 %1];
    i32* %4 = getelementptr &([600 * i32]* %3)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %4);
    i32 %5 = sub i32 %arg1, i32 1;
    [600 * [600 * i32]]* %6 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %5];
    i32 %7 = sub i32 %arg2, i32 1;
    [600 * i32]* %8 = getelementptr &([600 * [600 * i32]]* %6)[i32 0][i32 %7];
    i32* %9 = getelementptr &([600 * i32]* %8)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %9);
    ret i32 0;
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [600 * [600 * i32]]* %0 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %arg];
    [600 * i32]* %1 = getelementptr &([600 * [600 * i32]]* %0)[i32 0][i32 %arg1];
    i32* %2 = getelementptr &([600 * i32]* %1)[i32 0][i32 %arg2];
    store i32* %2 with i32 1;
    [600 * [600 * i32]]* %3 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i32 0][i32 %arg];
    [600 * i32]* %4 = getelementptr &([600 * [600 * i32]]* %3)[i32 0][i32 %arg1];
    i32* %5 = getelementptr &([600 * i32]* %4)[i32 0][i32 %arg2];
    store i32* %5 with i32 0;
    i32 %6 = add i32 %arg2, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %arg4;
    cbr i1 %7, [ ^while.body3 i32 %arg, i32 %arg1, i32 %6, i32 %arg3, i32 %arg4 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg3, i32 %arg4 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body1 i32 %arg, i32 %0, i32 %arg2, i32 %arg3 ], [ ^indirect i32 %arg3, i32 %arg, i32 %arg2, i32 %arg3 ];
^while.body4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 1, i32 %0;
    cbr i1 %1, [ ^while.body5 i32 %arg, i32 %arg1, i32 1, i32 %arg2, i32 %arg3 ], [ ^b3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = sub i32 %arg3, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body2 i32 %0, i32 %arg2, i32 %arg3 ], [ ^indirect1 i32 %arg3, i32 %0, i32 %arg1 ];
^while.body5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [600 * [600 * i32]]* %0 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %arg];
    [600 * i32]* %1 = getelementptr &([600 * [600 * i32]]* %0)[i32 0][i32 %arg1];
    i32* %2 = getelementptr &([600 * i32]* %1)[i32 0][i32 %arg2];
    i32 %3 = sub i32 %arg, i32 1;
    [600 * [600 * i32]]* %4 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %3];
    [600 * i32]* %5 = getelementptr &([600 * [600 * i32]]* %4)[i32 0][i32 %arg1];
    i32* %6 = getelementptr &([600 * i32]* %5)[i32 0][i32 %arg2];
    i32 %7 = load i32* %6;
    i32 %8 = add i32 %arg, i32 1;
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i32 0][i32 %8];
    [600 * i32]* %10 = getelementptr &([600 * [600 * i32]]* %9)[i32 0][i32 %arg1];
    i32* %11 = getelementptr &([600 * i32]* %10)[i32 0][i32 %arg2];
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %7, i32 %12;
    i32 %14 = sub i32 %arg1, i32 1;
    [600 * i32]* %15 = getelementptr &([600 * [600 * i32]]* %0)[i32 0][i32 %14];
    i32* %16 = getelementptr &([600 * i32]* %15)[i32 0][i32 %arg2];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %13, i32 %17;
    i32 %19 = add i32 %arg1, i32 1;
    [600 * i32]* %20 = getelementptr &([600 * [600 * i32]]* %0)[i32 0][i32 %19];
    i32* %21 = getelementptr &([600 * i32]* %20)[i32 0][i32 %arg2];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %18, i32 %22;
    i32 %24 = sub i32 %arg2, i32 1;
    i32* %25 = getelementptr &([600 * i32]* %1)[i32 0][i32 %24];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %23, i32 %26;
    i32 %28 = add i32 %arg2, i32 1;
    i32* %29 = getelementptr &([600 * i32]* %1)[i32 0][i32 %28];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %27, i32 %30;
    i32 %32 = sdiv i32 %31, i32 %arg3;
    store i32* %2 with i32 %32;
    i32 %33 = sub i32 %arg4, i32 1;
    i1 %34 = scmp lt i32 %28, i32 %33;
    cbr i1 %34, [ ^while.body5 i32 %arg, i32 %arg1, i32 %28, i32 %arg3, i32 %arg4 ], [ ^b3 i32 %arg, i32 %arg1, i32 %arg3, i32 %arg4 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 1;
    i32 %1 = sub i32 %arg3, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body4 i32 %arg, i32 %0, i32 %arg2, i32 %arg3 ], [ ^b2 i32 %arg, i32 %0, i32 %arg2, i32 %arg3 ];
}
