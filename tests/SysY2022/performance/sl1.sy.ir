internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i1 %2 = icmp sgt i32 %0, i32 0;
    i32 %3 = add i32 %0, i32 -1;
    [600 * [600 * [600 * i32]]]* %4 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %2(prob = 0.984615), ^b, ^b1;
  ^b:
    [5 * i8]* %5 = ptrcast [5 * i8]* @cmmc_parallel_body_payload_0 to [5 * i8]*;
    i32* %6 = ptradd [5 * i8]* %5, i32 0;
    store i32* %6 with i32 %0;
    i1* %7 = ptradd [5 * i8]* %5, i32 4;
    store i1* %7 with i1 true;
    i8* %8 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %8);
    ubr ^b1;
  ^b1:
    i1 %9 = icmp sgt i32 %3, i32 1;
    [600 * [600 * i32]]* %10 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0];
    cbr i1 %9(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [600 * [600 * i32]]* %11 = phi [^b1, [600 * [600 * i32]]* %10] [^b4, [600 * [600 * i32]]* %13];
    i32 %12 = phi [^b1, i32 1] [^b4, i32 %15];
    [600 * [600 * i32]]* %13 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %12];
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * i32]]* %13)[i64 1];
    i32 %15 = add i32 %12, i32 1;
    ubr ^while.body1;
  ^b2:
    [600 * [600 * i32]]* %16 = phi [^b1, [600 * [600 * i32]]* %10] [^b4, [600 * [600 * i32]]* %13];
    i32 %17 = phi [^b1, i32 1] [^b4, i32 %32];
    i32* %18 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %18);
    i32 %19 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %20 = getelementptr &([600 * [600 * [600 * i32]]]* %4)[i64 0][i32 %19];
    [600 * i32]* %21 = getelementptr &([600 * [600 * i32]]* %20)[i64 0][i32 %19];
    i32* %22 = getelementptr &([600 * i32]* %21)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %22);
    i32 %23 = add i32 %17, i32 -1;
    [600 * i32]* %24 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %23];
    i32* %25 = getelementptr &([600 * i32]* %24)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    ret i32 0;
  ^while.body1:
    i32 %26 = phi [^while.body, i32 1] [^b3, i32 %32];
    [600 * i32]* %27 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %26];
    [600 * i32]* %28 = getelementptr &([600 * i32]* %27)[i64 -1];
    [600 * i32]* %29 = getelementptr &([600 * i32]* %27)[i64 1];
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %11)[i64 0][i32 %26];
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %26];
    i32 %32 = add i32 %26, i32 1;
    ubr ^while.body2;
  ^while.body2:
    i32 %33 = phi [^while.body1, i32 1] [^while.body2, i32 %53];
    i32* %34 = getelementptr &([600 * i32]* %30)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &([600 * i32]* %31)[i64 0][i32 %33];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 %37;
    i32* %39 = getelementptr &([600 * i32]* %28)[i64 0][i32 %33];
    i32 %40 = load i32* %39;
    i32 %41 = add i32 %38, i32 %40;
    i32* %42 = getelementptr &([600 * i32]* %29)[i64 0][i32 %33];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %41, i32 %43;
    i32* %45 = getelementptr &([600 * i32]* %27)[i64 0][i32 %33];
    i32* %46 = getelementptr &(i32* %45)[i64 -1];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %44, i32 %47;
    i32* %49 = getelementptr &(i32* %45)[i64 1];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    i32 %52 = sdiv i32 %51, i32 %1;
    store i32* %45 with i32 %52;
    i32 %53 = add i32 %33, i32 1;
    i1 %54 = icmp sgt i32 %3, i32 %53;
    cbr i1 %54(prob = 0.984615), ^while.body2, ^b3;
  ^b3:
    i1 %55 = icmp sgt i32 %3, i32 %32;
    cbr i1 %55(prob = 0.984615), ^while.body1, ^b4;
  ^b4:
    i1 %56 = icmp sgt i32 %3, i32 %15;
    cbr i1 %56(prob = 0.984615), ^while.body, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [5 * i8]* %2 = ptrcast [5 * i8]* @cmmc_parallel_body_payload_0 to [5 * i8]*;
    i32* %3 = ptradd [5 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1* %5 = ptradd [5 * i8]* %2, i32 4;
    i1 %6 = load i1* %5;
    [600 * [600 * [600 * i32]]]* %7 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^b1;
  ^b1:
    i32 %8 = phi [^b, i32 %0] [^b2, i32 %12];
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* %7)[i64 0][i32 %8];
    cbr i1 %6(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32 %10 = phi [^b1, i32 0] [^b4, i32 %18];
    [600 * i32]* %11 = getelementptr &([600 * [600 * i32]]* %9)[i64 0][i32 %10];
    ubr ^while.body1;
  ^b2:
    i32 %12 = add i32 %8, i32 1;
    i1 %13 = icmp sgt i32 %1, i32 %12;
    cbr i1 %13(prob = 0.984615), ^b1, ^b3;
  ^while.body1:
    i32 %14 = phi [^while.body, i32 0] [^while.body1, i32 %16];
    i32* %15 = getelementptr &([600 * i32]* %11)[i64 0][i32 %14];
    store i32* %15 with i32 1;
    i32 %16 = add i32 %14, i32 1;
    i1 %17 = icmp sgt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.984615), ^while.body1, ^b4;
  ^b3:
    ret;
  ^b4:
    i32 %18 = add i32 %10, i32 1;
    i1 %19 = icmp sgt i32 %4, i32 %18;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b2;
}
internal [5 * i8]* @cmmc_parallel_body_payload_0, align 8;
