internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i32 %2 = add i32 %0, i32 -1;
    ubr ^while.header;
^while.header:
    i32 %3 = phi [^b, i32 %17] [^entry, i32 0];
    i1 %4 = scmp lt i32 %3, i32 %0;
    [600 * [600 * i32]]* %5 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %3];
    [600 * [600 * i32]]* %6 = getelementptr &([600 * [600 * [600 * i32]]]* @y)[i64 0][i32 %3];
    cbr i1 %4(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^b2, i32 %40];
    i1 %8 = scmp lt i32 %7, i32 %0;
    [600 * i32]* %9 = getelementptr &([600 * [600 * i32]]* %5)[i64 0][i32 %7];
    [600 * i32]* %10 = getelementptr &([600 * [600 * i32]]* %6)[i64 0][i32 %7];
    cbr i1 %8(prob = 0.97), ^while.header3, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 1] [^b3, i32 %41];
    i32 %12 = phi [^while.header, i32 1] [^b3, i32 %20];
    i1 %13 = scmp lt i32 %11, i32 %2;
    [600 * [600 * i32]]* %14 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %11];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * i32]]* %14)[i64 -1];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %14)[i64 1];
    cbr i1 %13(prob = 0.97), ^while.header4, ^b1;
^b:
    i32 %17 = add i32 %3, i32 1;
    ubr ^while.header;
^while.header3:
    i32 %18 = phi [^while.header1, i32 0] [^while.body, i32 %39];
    i1 %19 = scmp lt i32 %18, i32 %0;
    cbr i1 %19(prob = 0.97), ^while.body, ^b2;
^while.header4:
    i32 %20 = phi [^while.header2, i32 1] [^b4, i32 %64];
    i1 %21 = scmp lt i32 %20, i32 %2;
    [600 * i32]* %22 = getelementptr &([600 * [600 * i32]]* %14)[i64 0][i32 %20];
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %20];
    [600 * i32]* %24 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %20];
    [600 * i32]* %25 = getelementptr &([600 * i32]* %22)[i64 -1];
    [600 * i32]* %26 = getelementptr &([600 * i32]* %22)[i64 1];
    cbr i1 %21(prob = 0.97), ^while.header5, ^b3;
^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %27 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %27);
    i32 %28 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %29 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %28];
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %29)[i64 0][i32 %28];
    i32* %31 = getelementptr &([600 * i32]* %30)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %31);
    i32 %32 = add i32 %11, i32 -1;
    [600 * [600 * i32]]* %33 = getelementptr &([600 * [600 * [600 * i32]]]* @x)[i64 0][i32 %32];
    i32 %34 = add i32 %12, i32 -1;
    [600 * i32]* %35 = getelementptr &([600 * [600 * i32]]* %33)[i64 0][i32 %34];
    i32* %36 = getelementptr &([600 * i32]* %35)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %36);
    ret i32 0;
^while.body:
    i32* %37 = getelementptr &([600 * i32]* %9)[i64 0][i32 %18];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([600 * i32]* %10)[i64 0][i32 %18];
    store i32* %38 with i32 0;
    i32 %39 = add i32 %18, i32 1;
    ubr ^while.header3;
^b2:
    i32 %40 = add i32 %7, i32 1;
    ubr ^while.header1;
^b3:
    i32 %41 = add i32 %11, i32 1;
    ubr ^while.header2;
^while.header5:
    i32 %42 = phi [^while.header4, i32 1] [^while.body1, i32 %55];
    i1 %43 = scmp lt i32 %42, i32 %2;
    cbr i1 %43(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32* %44 = getelementptr &([600 * i32]* %22)[i64 0][i32 %42];
    i32* %45 = getelementptr &([600 * i32]* %23)[i64 0][i32 %42];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &([600 * i32]* %24)[i64 0][i32 %42];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([600 * i32]* %25)[i64 0][i32 %42];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([600 * i32]* %26)[i64 0][i32 %42];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %44)[i64 -1];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %42, i32 1;
    i32* %56 = getelementptr &(i32* %44)[i64 1];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %57, i32 %46;
    i32 %59 = add i32 %58, i32 %48;
    i32 %60 = add i32 %59, i32 %50;
    i32 %61 = add i32 %60, i32 %52;
    i32 %62 = add i32 %61, i32 %54;
    i32 %63 = sdiv i32 %62, i32 %1;
    store i32* %44 with i32 %63;
    ubr ^while.header5;
^b4:
    i32 %64 = add i32 %20, i32 1;
    ubr ^while.header4;
}
