internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i32 %2 = add i32 %0, i32 -1;
    i1 %3 = icmp sgt i32 %2, i32 2;
    i1 %4 = icmp sgt i32 %0, i32 0;
    i32 %5 = add i32 %0, i32 -2;
    [600 * [600 * [600 * i32]]]* %6 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    cbr i1 %4(prob = 0.984615), ^b, ^b1;
  ^b:
    [5 * i8]* %7 = ptrcast [5 * i8]* @cmmc_parallel_body_payload_0 to [5 * i8]*;
    i32* %8 = ptradd [5 * i8]* %7, i32 0;
    store i32* %8 with i32 %0;
    i1* %9 = ptradd [5 * i8]* %7, i32 4;
    store i1* %9 with i1 true;
    i8* %10 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 %0, i8* %10);
    ubr ^b1;
  ^b1:
    i1 %11 = icmp sgt i32 %2, i32 1;
    [600 * [600 * i32]]* %12 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i64 0];
    cbr i1 %11(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    [600 * [600 * i32]]* %13 = phi [^b1, [600 * [600 * i32]]* %12] [^b3, [600 * [600 * i32]]* %15];
    i32 %14 = phi [^b1, i32 1] [^b3, i32 %17];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i32 %14];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %15)[i64 1];
    i32 %17 = add i32 %14, i32 1;
    ubr ^while.body1;
  ^b2:
    [600 * [600 * i32]]* %18 = phi [^b1, [600 * [600 * i32]]* %12] [^b3, [600 * [600 * i32]]* %15];
    i32 %19 = phi [^b1, i32 1] [^b3, i32 %34];
    i32* %20 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %20);
    i32 %21 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %22 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i32 %21];
    [600 * i32]* %23 = getelementptr &([600 * [600 * i32]]* %22)[i64 0][i32 %21];
    i32* %24 = getelementptr &([600 * i32]* %23)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %24);
    i32 %25 = add i32 %19, i32 -1;
    [600 * i32]* %26 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %25];
    i32* %27 = getelementptr &([600 * i32]* %26)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %27);
    ret i32 0;
  ^while.body1:
    i32 %28 = phi [^while.body, i32 1] [^scalar.final, i32 %34];
    [600 * i32]* %29 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %28];
    [600 * i32]* %30 = getelementptr &([600 * i32]* %29)[i64 -1];
    [600 * i32]* %31 = getelementptr &([600 * i32]* %29)[i64 1];
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %13)[i64 0][i32 %28];
    [600 * i32]* %33 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %28];
    i32 %34 = add i32 %28, i32 1;
    cbr i1 %3(prob = 0.969697), ^while.body2, ^scalar.header;
  ^while.body2:
    i32 %35 = phi [^while.body1, i32 1] [^while.body2, i32 %72];
    i32* %36 = getelementptr &([600 * i32]* %32)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &([600 * i32]* %33)[i64 0][i32 %35];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &([600 * i32]* %30)[i64 0][i32 %35];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &([600 * i32]* %31)[i64 0][i32 %35];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &([600 * i32]* %29)[i64 0][i32 %35];
    i32* %48 = getelementptr &(i32* %47)[i64 -1];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %46, i32 %49;
    i32* %51 = getelementptr &(i32* %47)[i64 1];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %50, i32 %52;
    i32 %54 = sdiv i32 %53, i32 %1;
    store i32* %47 with i32 %54;
    i32* %55 = getelementptr &(i32* %36)[i64 1];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %38)[i64 1];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %41)[i64 1];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %59, i32 %61;
    i32* %63 = getelementptr &(i32* %44)[i64 1];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    i32 %66 = load i32* %47;
    i32 %67 = add i32 %65, i32 %66;
    i32* %68 = getelementptr &(i32* %47)[i64 2];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32 %71 = sdiv i32 %70, i32 %1;
    store i32* %51 with i32 %71;
    i32 %72 = add i32 %35, i32 2;
    i1 %73 = icmp sgt i32 %5, i32 %72;
    cbr i1 %73(prob = 0.969697), ^while.body2, ^scalar.header;
  ^scalar.header:
    i32 %74 = phi [^while.body1, i32 1] [^while.body2, i32 %72];
    i1 %75 = icmp sgt i32 %2, i32 %74;
    cbr i1 %75(prob = 0.5), ^while.body3, ^scalar.final;
  ^while.body3 {scalar}:
    i32 %76 = phi [^scalar.header, i32 %74] [^while.body3, i32 %96];
    i32* %77 = getelementptr &([600 * i32]* %32)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([600 * i32]* %33)[i64 0][i32 %76];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %78, i32 %80;
    i32* %82 = getelementptr &([600 * i32]* %30)[i64 0][i32 %76];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32* %85 = getelementptr &([600 * i32]* %31)[i64 0][i32 %76];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    i32* %88 = getelementptr &([600 * i32]* %29)[i64 0][i32 %76];
    i32* %89 = getelementptr &(i32* %88)[i64 -1];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %87, i32 %90;
    i32* %92 = getelementptr &(i32* %88)[i64 1];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32 %95 = sdiv i32 %94, i32 %1;
    store i32* %88 with i32 %95;
    i32 %96 = add i32 %76, i32 1;
    i1 %97 = icmp sgt i32 %2, i32 %96;
    cbr i1 %97(prob = 0.5), ^while.body3, ^scalar.final;
  ^scalar.final:
    i1 %98 = icmp sgt i32 %2, i32 %34;
    cbr i1 %98(prob = 0.984615), ^while.body1, ^b3;
  ^b3:
    i1 %99 = icmp sgt i32 %2, i32 %17;
    cbr i1 %99(prob = 0.984615), ^while.body, ^b2;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [5 * i8]* %2 = ptrcast [5 * i8]* @cmmc_parallel_body_payload_0 to [5 * i8]*;
    i32* %3 = ptradd [5 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    i1 %6 = icmp sgt i32 %5, i32 3;
    i32 %7 = add i32 %4, i32 -4;
    i1 %8 = icmp sgt i32 %7, i32 7;
    i32 %9 = add i32 %4, i32 -11;
    i1 %10 = icmp sgt i32 %9, i32 15;
    i32 %11 = add i32 %4, i32 -26;
    i1 %12 = icmp sgt i32 %11, i32 31;
    i1 %13 = icmp sgt i32 %4, i32 1;
    i32 %14 = add i32 %4, i32 -57;
    i1* %15 = ptradd [5 * i8]* %2, i32 4;
    i1 %16 = load i1* %15;
    [600 * [600 * [600 * i32]]]* %17 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^b1;
  ^b1:
    i32 %18 = phi [^b, i32 %0] [^b2, i32 %22];
    [600 * [600 * i32]]* %19 = getelementptr &([600 * [600 * [600 * i32]]]* %17)[i64 0][i32 %18];
    cbr i1 %16(prob = 0.984615), ^while.body, ^b2;
  ^while.body:
    i32 %20 = phi [^b1, i32 0] [^scalar.final, i32 %33];
    [600 * i32]* %21 = getelementptr &([600 * [600 * i32]]* %19)[i64 0][i32 %20];
    cbr i1 %13(prob = 0.969697), ^super.header, ^scalar.header;
  ^b2:
    i32 %22 = add i32 %18, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^b1, ^b3;
  ^super.header:
    cbr i1 %6(prob = 0.969697), ^super.header1, ^scalar.header1;
  ^scalar.header:
    i32 %24 = phi [^while.body, i32 0] [^scalar.header1, i32 %27] [^while.body2, i32 %41];
    i1 %25 = icmp sgt i32 %4, i32 %24;
    cbr i1 %25(prob = 0.5), ^while.body1, ^scalar.final;
  ^b3:
    ret;
  ^super.header1:
    cbr i1 %8(prob = 0.969697), ^super.header2, ^scalar.header2;
  ^scalar.header1:
    i32 %26 = phi [^super.header, i32 0] [^scalar.final1, i32 %43];
    i32 %27 = phi [^super.header, i32 undef] [^scalar.final1, i32 %43];
    i1 %28 = icmp sgt i32 %5, i32 %26;
    cbr i1 %28(prob = 0.5), ^while.body2, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %29 = phi [^scalar.header, i32 %24] [^while.body1, i32 %31];
    i32* %30 = getelementptr &([600 * i32]* %21)[i64 0][i32 %29];
    store i32* %30 with i32 1;
    i32 %31 = add i32 %29, i32 1;
    i1 %32 = icmp sgt i32 %4, i32 %31;
    cbr i1 %32(prob = 0.5), ^while.body1, ^scalar.final;
  ^scalar.final:
    i32 %33 = add i32 %20, i32 1;
    i1 %34 = icmp sgt i32 %4, i32 %33;
    cbr i1 %34(prob = 0.984615), ^while.body, ^b2;
  ^super.header2:
    cbr i1 %10(prob = 0.969697), ^super.header3, ^scalar.header3;
  ^scalar.header2:
    i32 %35 = phi [^super.header1, i32 0] [^scalar.final2, i32 %89];
    i32 %36 = phi [^super.header1, i32 undef] [^scalar.final2, i32 %89];
    i1 %37 = icmp sgt i32 %7, i32 %35;
    cbr i1 %37(prob = 0.5), ^while.body3, ^scalar.final1;
  ^while.body2 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %26] [^while.body2, i32 %41];
    i32* %39 = getelementptr &([600 * i32]* %21)[i64 0][i32 %38];
    store i32* %39 with i32 1;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 1;
    i32 %41 = add i32 %38, i32 2;
    i1 %42 = icmp sgt i32 %5, i32 %41;
    cbr i1 %42(prob = 0.5), ^while.body2, ^scalar.header;
  ^super.header3:
    cbr i1 %12(prob = 0.969697), ^while.body4, ^scalar.header4;
  ^scalar.final1:
    i32 %43 = phi [^scalar.header2, i32 %36] [^while.body3, i32 %52];
    ubr ^scalar.header1;
  ^scalar.header3:
    i32 %44 = phi [^super.header2, i32 0] [^scalar.final3, i32 %104];
    i32 %45 = phi [^super.header2, i32 undef] [^scalar.final3, i32 %104];
    i1 %46 = icmp sgt i32 %9, i32 %44;
    cbr i1 %46(prob = 0.5), ^while.body5, ^scalar.final2;
  ^while.body3 {scalar}:
    i32 %47 = phi [^scalar.header2, i32 %35] [^while.body3, i32 %52];
    i32* %48 = getelementptr &([600 * i32]* %21)[i64 0][i32 %47];
    store i32* %48 with i32 1;
    i32* %49 = getelementptr &(i32* %48)[i64 1];
    store i32* %49 with i32 1;
    i32* %50 = getelementptr &(i32* %48)[i64 2];
    store i32* %50 with i32 1;
    i32* %51 = getelementptr &(i32* %48)[i64 3];
    store i32* %51 with i32 1;
    i32 %52 = add i32 %47, i32 4;
    i1 %53 = icmp sgt i32 %7, i32 %52;
    cbr i1 %53(prob = 0.5), ^while.body3, ^scalar.final1;
  ^while.body4:
    i32 %54 = phi [^super.header3, i32 0] [^while.body4, i32 %87];
    i32* %55 = getelementptr &([600 * i32]* %21)[i64 0][i32 %54];
    store i32* %55 with i32 1;
    i32* %56 = getelementptr &(i32* %55)[i64 1];
    store i32* %56 with i32 1;
    i32* %57 = getelementptr &(i32* %55)[i64 2];
    store i32* %57 with i32 1;
    i32* %58 = getelementptr &(i32* %55)[i64 3];
    store i32* %58 with i32 1;
    i32* %59 = getelementptr &(i32* %55)[i64 4];
    store i32* %59 with i32 1;
    i32* %60 = getelementptr &(i32* %55)[i64 5];
    store i32* %60 with i32 1;
    i32* %61 = getelementptr &(i32* %55)[i64 6];
    store i32* %61 with i32 1;
    i32* %62 = getelementptr &(i32* %55)[i64 7];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &(i32* %55)[i64 8];
    store i32* %63 with i32 1;
    i32* %64 = getelementptr &(i32* %55)[i64 9];
    store i32* %64 with i32 1;
    i32* %65 = getelementptr &(i32* %55)[i64 10];
    store i32* %65 with i32 1;
    i32* %66 = getelementptr &(i32* %55)[i64 11];
    store i32* %66 with i32 1;
    i32* %67 = getelementptr &(i32* %55)[i64 12];
    store i32* %67 with i32 1;
    i32* %68 = getelementptr &(i32* %55)[i64 13];
    store i32* %68 with i32 1;
    i32* %69 = getelementptr &(i32* %55)[i64 14];
    store i32* %69 with i32 1;
    i32* %70 = getelementptr &(i32* %55)[i64 15];
    store i32* %70 with i32 1;
    i32* %71 = getelementptr &(i32* %55)[i64 16];
    store i32* %71 with i32 1;
    i32* %72 = getelementptr &(i32* %55)[i64 17];
    store i32* %72 with i32 1;
    i32* %73 = getelementptr &(i32* %55)[i64 18];
    store i32* %73 with i32 1;
    i32* %74 = getelementptr &(i32* %55)[i64 19];
    store i32* %74 with i32 1;
    i32* %75 = getelementptr &(i32* %55)[i64 20];
    store i32* %75 with i32 1;
    i32* %76 = getelementptr &(i32* %55)[i64 21];
    store i32* %76 with i32 1;
    i32* %77 = getelementptr &(i32* %55)[i64 22];
    store i32* %77 with i32 1;
    i32* %78 = getelementptr &(i32* %55)[i64 23];
    store i32* %78 with i32 1;
    i32* %79 = getelementptr &(i32* %55)[i64 24];
    store i32* %79 with i32 1;
    i32* %80 = getelementptr &(i32* %55)[i64 25];
    store i32* %80 with i32 1;
    i32* %81 = getelementptr &(i32* %55)[i64 26];
    store i32* %81 with i32 1;
    i32* %82 = getelementptr &(i32* %55)[i64 27];
    store i32* %82 with i32 1;
    i32* %83 = getelementptr &(i32* %55)[i64 28];
    store i32* %83 with i32 1;
    i32* %84 = getelementptr &(i32* %55)[i64 29];
    store i32* %84 with i32 1;
    i32* %85 = getelementptr &(i32* %55)[i64 30];
    store i32* %85 with i32 1;
    i32* %86 = getelementptr &(i32* %55)[i64 31];
    store i32* %86 with i32 1;
    i32 %87 = add i32 %54, i32 32;
    i1 %88 = icmp sgt i32 %14, i32 %87;
    cbr i1 %88(prob = 0.969697), ^while.body4, ^scalar.header4;
  ^scalar.final2:
    i32 %89 = phi [^scalar.header3, i32 %45] [^while.body5, i32 %102];
    ubr ^scalar.header2;
  ^scalar.header4:
    i32 %90 = phi [^super.header3, i32 0] [^while.body4, i32 %87];
    i32 %91 = phi [^super.header3, i32 undef] [^while.body4, i32 %87];
    i1 %92 = icmp sgt i32 %11, i32 %90;
    cbr i1 %92(prob = 0.5), ^while.body6, ^scalar.final3;
  ^while.body5 {scalar}:
    i32 %93 = phi [^scalar.header3, i32 %44] [^while.body5, i32 %102];
    i32* %94 = getelementptr &([600 * i32]* %21)[i64 0][i32 %93];
    store i32* %94 with i32 1;
    i32* %95 = getelementptr &(i32* %94)[i64 1];
    store i32* %95 with i32 1;
    i32* %96 = getelementptr &(i32* %94)[i64 2];
    store i32* %96 with i32 1;
    i32* %97 = getelementptr &(i32* %94)[i64 3];
    store i32* %97 with i32 1;
    i32* %98 = getelementptr &(i32* %94)[i64 4];
    store i32* %98 with i32 1;
    i32* %99 = getelementptr &(i32* %94)[i64 5];
    store i32* %99 with i32 1;
    i32* %100 = getelementptr &(i32* %94)[i64 6];
    store i32* %100 with i32 1;
    i32* %101 = getelementptr &(i32* %94)[i64 7];
    store i32* %101 with i32 1;
    i32 %102 = add i32 %93, i32 8;
    i1 %103 = icmp sgt i32 %9, i32 %102;
    cbr i1 %103(prob = 0.5), ^while.body5, ^scalar.final2;
  ^scalar.final3:
    i32 %104 = phi [^scalar.header4, i32 %91] [^while.body6, i32 %122];
    ubr ^scalar.header3;
  ^while.body6 {scalar}:
    i32 %105 = phi [^scalar.header4, i32 %90] [^while.body6, i32 %122];
    i32* %106 = getelementptr &([600 * i32]* %21)[i64 0][i32 %105];
    store i32* %106 with i32 1;
    i32* %107 = getelementptr &(i32* %106)[i64 1];
    store i32* %107 with i32 1;
    i32* %108 = getelementptr &(i32* %106)[i64 2];
    store i32* %108 with i32 1;
    i32* %109 = getelementptr &(i32* %106)[i64 3];
    store i32* %109 with i32 1;
    i32* %110 = getelementptr &(i32* %106)[i64 4];
    store i32* %110 with i32 1;
    i32* %111 = getelementptr &(i32* %106)[i64 5];
    store i32* %111 with i32 1;
    i32* %112 = getelementptr &(i32* %106)[i64 6];
    store i32* %112 with i32 1;
    i32* %113 = getelementptr &(i32* %106)[i64 7];
    store i32* %113 with i32 1;
    i32* %114 = getelementptr &(i32* %106)[i64 8];
    store i32* %114 with i32 1;
    i32* %115 = getelementptr &(i32* %106)[i64 9];
    store i32* %115 with i32 1;
    i32* %116 = getelementptr &(i32* %106)[i64 10];
    store i32* %116 with i32 1;
    i32* %117 = getelementptr &(i32* %106)[i64 11];
    store i32* %117 with i32 1;
    i32* %118 = getelementptr &(i32* %106)[i64 12];
    store i32* %118 with i32 1;
    i32* %119 = getelementptr &(i32* %106)[i64 13];
    store i32* %119 with i32 1;
    i32* %120 = getelementptr &(i32* %106)[i64 14];
    store i32* %120 with i32 1;
    i32* %121 = getelementptr &(i32* %106)[i64 15];
    store i32* %121 with i32 1;
    i32 %122 = add i32 %105, i32 16;
    i1 %123 = icmp sgt i32 %11, i32 %122;
    cbr i1 %123(prob = 0.5), ^while.body6, ^scalar.final3;
}
internal [5 * i8]* @cmmc_parallel_body_payload_0, align 8;
