internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x, align 8;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    i32 %2 = add i32 %0, i32 -1;
    i1 %3 = icmp slt i32 %2, i32 2;
    i32 %4 = add i32 %0, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 15;
    i1 %6 = icmp sgt i32 %0, i32 3;
    i32 %7 = add i32 %0, i32 -18;
    [600 * [600 * [600 * i32]]]* %8 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %9 = phi [^entry, i32 0] [^b, i32 %21];
    i1 %10 = icmp sgt i32 %0, i32 %9;
    [600 * [600 * i32]]* %11 = getelementptr &([600 * [600 * [600 * i32]]]* %8)[i64 0][i32 %9];
    cbr i1 %10(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 0] [^scalar.final, i32 %60];
    i1 %13 = icmp sgt i32 %0, i32 %12;
    cbr i1 %13(prob = 0.984615), ^prebody, ^b;
  ^while.header2:
    i32 %14 = phi [^while.header, i32 1] [^while.header3, i32 %23];
    i32 %15 = phi [^while.header, i32 1] [^while.header3, i32 %20];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * [600 * i32]]]* %8)[i64 0][i32 %15];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * i32]]* %16)[i64 -1];
    [600 * [600 * i32]]* %18 = getelementptr &([600 * [600 * i32]]* %16)[i64 1];
    i1 %19 = icmp sgt i32 %2, i32 %15;
    i32 %20 = add i32 %15, i32 1;
    cbr i1 %19(prob = 0.984615), ^while.header3, ^b1;
  ^b:
    i32 %21 = add i32 %9, i32 1;
    ubr ^while.header;
  ^prebody:
    [600 * i32]* %22 = getelementptr &([600 * [600 * i32]]* %11)[i64 0][i32 %12];
    cbr i1 %6(prob = 0.941176), ^super.header, ^scalar.header;
  ^while.header3:
    i32 %23 = phi [^while.header2, i32 1] [^while.header4, i32 %40] [^while.body2, i32 %40];
    i1 %24 = icmp sle i32 %2, i32 %23;
    cbr i1 %24(prob = 0.0153846), ^while.header2, ^while.header4;
  ^b1:
    i32* %25 = getelementptr &([600 * [600 * [600 * i32]]]* %8)[i64 0][i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 53);
    call (i32, i32*) -> void @putarray(i32 %0, i32* %25);
    i32 %26 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %27 = getelementptr &([600 * [600 * [600 * i32]]]* %8)[i64 0][i32 %26];
    [600 * i32]* %28 = getelementptr &([600 * [600 * i32]]* %27)[i64 0][i32 %26];
    i32* %29 = getelementptr &([600 * i32]* %28)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %29);
    i32 %30 = add i32 %14, i32 -1;
    [600 * i32]* %31 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %30];
    i32* %32 = getelementptr &([600 * i32]* %31)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %32);
    ret i32 0;
  ^super.header:
    cbr i1 %5(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.header:
    i32 %33 = phi [^prebody, i32 0] [^scalar.header1, i32 %62] [^while.body3, i32 %95];
    i1 %34 = icmp sgt i32 %0, i32 %33;
    cbr i1 %34(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.header4:
    [600 * i32]* %35 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %23];
    [600 * i32]* %36 = getelementptr &([600 * i32]* %35)[i64 1];
    [600 * i32]* %37 = getelementptr &([600 * i32]* %35)[i64 -1];
    [600 * i32]* %38 = getelementptr &([600 * [600 * i32]]* %18)[i64 0][i32 %23];
    [600 * i32]* %39 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %23];
    i32 %40 = add i32 %23, i32 1;
    cbr i1 %3(prob = 0.0153846), ^while.header3, ^while.body2;
  ^while.body:
    i32 %41 = phi [^super.header, i32 0] [^while.body, i32 %58];
    i32* %42 = getelementptr &([600 * i32]* %22)[i64 0][i32 %41];
    store i32* %42 with i32 1;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 1;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 1;
    i32* %46 = getelementptr &(i32* %42)[i64 4];
    store i32* %46 with i32 1;
    i32* %47 = getelementptr &(i32* %42)[i64 5];
    store i32* %47 with i32 1;
    i32* %48 = getelementptr &(i32* %42)[i64 6];
    store i32* %48 with i32 1;
    i32* %49 = getelementptr &(i32* %42)[i64 7];
    store i32* %49 with i32 1;
    i32* %50 = getelementptr &(i32* %42)[i64 8];
    store i32* %50 with i32 1;
    i32* %51 = getelementptr &(i32* %42)[i64 9];
    store i32* %51 with i32 1;
    i32* %52 = getelementptr &(i32* %42)[i64 10];
    store i32* %52 with i32 1;
    i32* %53 = getelementptr &(i32* %42)[i64 11];
    store i32* %53 with i32 1;
    i32* %54 = getelementptr &(i32* %42)[i64 12];
    store i32* %54 with i32 1;
    i32* %55 = getelementptr &(i32* %42)[i64 13];
    store i32* %55 with i32 1;
    i32* %56 = getelementptr &(i32* %42)[i64 14];
    store i32* %56 with i32 1;
    i32* %57 = getelementptr &(i32* %42)[i64 15];
    store i32* %57 with i32 1;
    i32 %58 = add i32 %41, i32 16;
    i1 %59 = icmp sgt i32 %7, i32 %58;
    cbr i1 %59(prob = 0.941176), ^while.body, ^scalar.header1;
  ^scalar.final:
    i32 %60 = add i32 %12, i32 1;
    ubr ^while.header1;
  ^scalar.header1:
    i32 %61 = phi [^super.header, i32 0] [^while.body, i32 %58];
    i32 %62 = phi [^super.header, i32 undef] [^while.body, i32 %58];
    i1 %63 = icmp sgt i32 %4, i32 %61;
    cbr i1 %63(prob = 0.75), ^while.body3, ^scalar.header;
  ^while.body1 {scalar}:
    i32 %64 = phi [^scalar.header, i32 %33] [^while.body1, i32 %66];
    i32* %65 = getelementptr &([600 * i32]* %22)[i64 0][i32 %64];
    store i32* %65 with i32 1;
    i32 %66 = add i32 %64, i32 1;
    i1 %67 = icmp sgt i32 %0, i32 %66;
    cbr i1 %67(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body2:
    i32 %68 = phi [^while.header4, i32 1] [^while.body2, i32 %88];
    i32* %69 = getelementptr &([600 * i32]* %39)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &([600 * i32]* %38)[i64 0][i32 %68];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32* %74 = getelementptr &([600 * i32]* %37)[i64 0][i32 %68];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &([600 * i32]* %36)[i64 0][i32 %68];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32* %80 = getelementptr &([600 * i32]* %35)[i64 0][i32 %68];
    i32* %81 = getelementptr &(i32* %80)[i64 -1];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %79, i32 %82;
    i32* %84 = getelementptr &(i32* %80)[i64 1];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = sdiv i32 %86, i32 %1;
    store i32* %80 with i32 %87;
    i32 %88 = add i32 %68, i32 1;
    i1 %89 = icmp sgt i32 %2, i32 %88;
    cbr i1 %89(prob = 0.984615), ^while.body2, ^while.header3;
  ^while.body3 {scalar}:
    i32 %90 = phi [^scalar.header1, i32 %61] [^while.body3, i32 %95];
    i32* %91 = getelementptr &([600 * i32]* %22)[i64 0][i32 %90];
    store i32* %91 with i32 1;
    i32* %92 = getelementptr &(i32* %91)[i64 1];
    store i32* %92 with i32 1;
    i32* %93 = getelementptr &(i32* %91)[i64 2];
    store i32* %93 with i32 1;
    i32* %94 = getelementptr &(i32* %91)[i64 3];
    store i32* %94 with i32 1;
    i32 %95 = add i32 %90, i32 4;
    i1 %96 = icmp sgt i32 %4, i32 %95;
    cbr i1 %96(prob = 0.75), ^while.body3, ^scalar.header;
}
