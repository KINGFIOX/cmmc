internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [600 * [600 * [600 * i32]]]* @x;
internal [600 * [600 * [600 * i32]]]* @y;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = add i32 %0, i32 -1;
    i1 %2 = scmp gt i32 %1, i32 1;
    i1 %3 = scmp gt i32 %0, i32 0;
    i32 %4 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 13);
    [600 * [600 * [600 * i32]]]* %5 = ptrcast [600 * [600 * [600 * i32]]]* @x to [600 * [600 * [600 * i32]]]*;
    [600 * [600 * [600 * i32]]]* %6 = ptrcast [600 * [600 * [600 * i32]]]* @y to [600 * [600 * [600 * i32]]]*;
    ubr ^while.header;
  ^while.header:
    i32 %7 = phi [^entry, i32 0] [^b, i32 %19];
    i1 %8 = scmp gt i32 %0, i32 %7;
    [600 * [600 * i32]]* %9 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %7];
    [600 * [600 * i32]]* %10 = getelementptr &([600 * [600 * [600 * i32]]]* %6)[i64 0][i32 %7];
    cbr i1 %8(prob = 0.97), ^while.header1, ^while.header2;
  ^while.header1:
    i32 %11 = phi [^while.header, i32 0] [^b2, i32 %34];
    i1 %12 = scmp gt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
  ^while.header2:
    i32 %13 = phi [^while.header, i32 1] [^b3, i32 %20];
    i32 %14 = phi [^while.header, i32 1] [^b3, i32 %35];
    [600 * [600 * i32]]* %15 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %14];
    [600 * [600 * i32]]* %16 = getelementptr &([600 * [600 * i32]]* %15)[i64 -1];
    [600 * [600 * i32]]* %17 = getelementptr &([600 * [600 * i32]]* %15)[i64 1];
    i1 %18 = scmp gt i32 %1, i32 %14;
    cbr i1 %18(prob = 0.97), ^while.header3, ^b1;
  ^b:
    i32 %19 = add i32 %7, i32 1;
    ubr ^while.header;
  ^while.body:
    cbr i1 %3(prob = 0.97), ^indirect, ^b2;
  ^while.header3:
    i32 %20 = phi [^while.header2, i32 1] [^b4, i32 %44];
    i1 %21 = scmp gt i32 %1, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b3;
  ^b1:
    call (i32) -> void @stoptime(i32 53);
    i32* %22 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i64 0][i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %22);
    i32 %23 = sdiv i32 %0, i32 2;
    [600 * [600 * i32]]* %24 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %23];
    [600 * i32]* %25 = getelementptr &([600 * [600 * i32]]* %24)[i64 0][i32 %23];
    i32* %26 = getelementptr &([600 * i32]* %25)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %26);
    i32 %27 = add i32 %14, i32 -1;
    [600 * [600 * i32]]* %28 = getelementptr &([600 * [600 * [600 * i32]]]* %5)[i64 0][i32 %27];
    i32 %29 = add i32 %13, i32 -1;
    [600 * i32]* %30 = getelementptr &([600 * [600 * i32]]* %28)[i64 0][i32 %29];
    i32* %31 = getelementptr &([600 * i32]* %30)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %0, i32* %31);
    ret i32 0;
  ^indirect:
    [600 * i32]* %32 = getelementptr &([600 * [600 * i32]]* %9)[i64 0][i32 %11];
    [600 * i32]* %33 = getelementptr &([600 * [600 * i32]]* %10)[i64 0][i32 %11];
    ubr ^super.header;
  ^b2:
    i32 %34 = add i32 %11, i32 1;
    ubr ^while.header1;
  ^b3:
    i32 %35 = add i32 %14, i32 1;
    ubr ^while.header2;
  ^while.body1:
    cbr i1 %2(prob = 0.97), ^indirect1, ^b4;
  ^indirect1:
    [600 * i32]* %36 = getelementptr &([600 * [600 * i32]]* %15)[i64 0][i32 %20];
    [600 * i32]* %37 = getelementptr &([600 * i32]* %36)[i64 -1];
    [600 * i32]* %38 = getelementptr &([600 * i32]* %36)[i64 1];
    [600 * i32]* %39 = getelementptr &([600 * [600 * i32]]* %16)[i64 0][i32 %20];
    [600 * i32]* %40 = getelementptr &([600 * [600 * i32]]* %17)[i64 0][i32 %20];
    ubr ^super.header2;
  ^super.header:
    i32 %41 = phi [^indirect, i32 0] [^while.body2, i32 %42];
    i32 %42 = add i32 %41, i32 4;
    i1 %43 = scmp gt i32 %0, i32 %42;
    cbr i1 %43(prob = 0.89), ^while.body2, ^super.header1;
  ^b4:
    i32 %44 = add i32 %20, i32 1;
    ubr ^while.header3;
  ^while.body2:
    i32* %45 = getelementptr &([600 * i32]* %32)[i64 0][i32 %41];
    store i32* %45 with i32 1;
    i32* %46 = getelementptr &([600 * i32]* %33)[i64 0][i32 %41];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %45)[i64 1];
    store i32* %47 with i32 1;
    i32* %48 = getelementptr &(i32* %46)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %45)[i64 2];
    store i32* %49 with i32 1;
    i32* %50 = getelementptr &(i32* %46)[i64 2];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %45)[i64 3];
    store i32* %51 with i32 1;
    i32* %52 = getelementptr &(i32* %46)[i64 3];
    store i32* %52 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i32 %53 = phi [^super.header, i32 %41] [^while.body3, i32 %54];
    i32 %54 = add i32 %53, i32 4;
    i1 %55 = scmp gt i32 %0, i32 %54;
    cbr i1 %55(prob = 0.89), ^while.body3, ^while.body5;
  ^super.header2:
    i32 %56 = phi [^indirect1, i32 1] [^while.body4, i32 %57];
    i32 %57 = add i32 %56, i32 4;
    i1 %58 = scmp gt i32 %1, i32 %57;
    cbr i1 %58(prob = 0.89), ^while.body4, ^super.header3;
  ^while.body3:
    i32* %59 = getelementptr &([600 * i32]* %32)[i64 0][i32 %53];
    store i32* %59 with i32 1;
    i32* %60 = getelementptr &([600 * i32]* %33)[i64 0][i32 %53];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %59)[i64 1];
    store i32* %61 with i32 1;
    i32* %62 = getelementptr &(i32* %60)[i64 1];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %59)[i64 2];
    store i32* %63 with i32 1;
    i32* %64 = getelementptr &(i32* %60)[i64 2];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %59)[i64 3];
    store i32* %65 with i32 1;
    i32* %66 = getelementptr &(i32* %60)[i64 3];
    store i32* %66 with i32 0;
    ubr ^super.header1;
  ^while.body4:
    i32* %67 = getelementptr &([600 * i32]* %39)[i64 0][i32 %56];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([600 * i32]* %40)[i64 0][i32 %56];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32* %72 = getelementptr &([600 * i32]* %37)[i64 0][i32 %56];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %71, i32 %73;
    i32* %75 = getelementptr &([600 * i32]* %38)[i64 0][i32 %56];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    i32* %78 = getelementptr &([600 * i32]* %36)[i64 0][i32 %56];
    i32* %79 = getelementptr &(i32* %78)[i64 -1];
    i32 %80 = load i32* %79;
    i32 %81 = add i32 %77, i32 %80;
    i32* %82 = getelementptr &(i32* %78)[i64 1];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32 %85 = sdiv i32 %84, i32 %4;
    store i32* %78 with i32 %85;
    i32* %86 = getelementptr &(i32* %67)[i64 1];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %85, i32 %87;
    i32* %89 = getelementptr &(i32* %69)[i64 1];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %72)[i64 1];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %75)[i64 1];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32* %98 = getelementptr &(i32* %78)[i64 2];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %97, i32 %99;
    i32 %101 = sdiv i32 %100, i32 %4;
    store i32* %82 with i32 %101;
    i32* %102 = getelementptr &(i32* %67)[i64 2];
    i32 %103 = load i32* %102;
    i32 %104 = add i32 %101, i32 %103;
    i32* %105 = getelementptr &(i32* %69)[i64 2];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %104, i32 %106;
    i32* %108 = getelementptr &(i32* %72)[i64 2];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %107, i32 %109;
    i32* %111 = getelementptr &(i32* %75)[i64 2];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %110, i32 %112;
    i32* %114 = getelementptr &(i32* %78)[i64 3];
    i32 %115 = load i32* %114;
    i32 %116 = add i32 %113, i32 %115;
    i32 %117 = sdiv i32 %116, i32 %4;
    store i32* %98 with i32 %117;
    i32* %118 = getelementptr &(i32* %67)[i64 3];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %117, i32 %119;
    i32* %121 = getelementptr &(i32* %69)[i64 3];
    i32 %122 = load i32* %121;
    i32 %123 = add i32 %120, i32 %122;
    i32* %124 = getelementptr &(i32* %72)[i64 3];
    i32 %125 = load i32* %124;
    i32 %126 = add i32 %123, i32 %125;
    i32* %127 = getelementptr &(i32* %75)[i64 3];
    i32 %128 = load i32* %127;
    i32 %129 = add i32 %126, i32 %128;
    i32* %130 = getelementptr &(i32* %78)[i64 4];
    i32 %131 = load i32* %130;
    i32 %132 = add i32 %129, i32 %131;
    i32 %133 = sdiv i32 %132, i32 %4;
    store i32* %114 with i32 %133;
    ubr ^super.header2;
  ^while.body5:
    i32 %134 = phi [^super.header1, i32 %53] [^while.body5, i32 %137];
    i32* %135 = getelementptr &([600 * i32]* %32)[i64 0][i32 %134];
    store i32* %135 with i32 1;
    i32* %136 = getelementptr &([600 * i32]* %33)[i64 0][i32 %134];
    store i32* %136 with i32 0;
    i32 %137 = add i32 %134, i32 1;
    i1 %138 = scmp gt i32 %0, i32 %137;
    cbr i1 %138(prob = 0.97), ^while.body5, ^b2;
  ^super.header3:
    i32 %139 = phi [^super.header2, i32 %56] [^while.body6, i32 %140];
    i32 %140 = add i32 %139, i32 4;
    i1 %141 = scmp gt i32 %1, i32 %140;
    cbr i1 %141(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %142 = getelementptr &([600 * i32]* %39)[i64 0][i32 %139];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &([600 * i32]* %40)[i64 0][i32 %139];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %143, i32 %145;
    i32* %147 = getelementptr &([600 * i32]* %37)[i64 0][i32 %139];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %146, i32 %148;
    i32* %150 = getelementptr &([600 * i32]* %38)[i64 0][i32 %139];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %149, i32 %151;
    i32* %153 = getelementptr &([600 * i32]* %36)[i64 0][i32 %139];
    i32* %154 = getelementptr &(i32* %153)[i64 -1];
    i32 %155 = load i32* %154;
    i32 %156 = add i32 %152, i32 %155;
    i32* %157 = getelementptr &(i32* %153)[i64 1];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %156, i32 %158;
    i32 %160 = sdiv i32 %159, i32 %4;
    store i32* %153 with i32 %160;
    i32* %161 = getelementptr &(i32* %142)[i64 1];
    i32 %162 = load i32* %161;
    i32 %163 = add i32 %160, i32 %162;
    i32* %164 = getelementptr &(i32* %144)[i64 1];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %163, i32 %165;
    i32* %167 = getelementptr &(i32* %147)[i64 1];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %166, i32 %168;
    i32* %170 = getelementptr &(i32* %150)[i64 1];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 %171;
    i32* %173 = getelementptr &(i32* %153)[i64 2];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %172, i32 %174;
    i32 %176 = sdiv i32 %175, i32 %4;
    store i32* %157 with i32 %176;
    i32* %177 = getelementptr &(i32* %142)[i64 2];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %176, i32 %178;
    i32* %180 = getelementptr &(i32* %144)[i64 2];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %179, i32 %181;
    i32* %183 = getelementptr &(i32* %147)[i64 2];
    i32 %184 = load i32* %183;
    i32 %185 = add i32 %182, i32 %184;
    i32* %186 = getelementptr &(i32* %150)[i64 2];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %185, i32 %187;
    i32* %189 = getelementptr &(i32* %153)[i64 3];
    i32 %190 = load i32* %189;
    i32 %191 = add i32 %188, i32 %190;
    i32 %192 = sdiv i32 %191, i32 %4;
    store i32* %173 with i32 %192;
    i32* %193 = getelementptr &(i32* %142)[i64 3];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %192, i32 %194;
    i32* %196 = getelementptr &(i32* %144)[i64 3];
    i32 %197 = load i32* %196;
    i32 %198 = add i32 %195, i32 %197;
    i32* %199 = getelementptr &(i32* %147)[i64 3];
    i32 %200 = load i32* %199;
    i32 %201 = add i32 %198, i32 %200;
    i32* %202 = getelementptr &(i32* %150)[i64 3];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %201, i32 %203;
    i32* %205 = getelementptr &(i32* %153)[i64 4];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %204, i32 %206;
    i32 %208 = sdiv i32 %207, i32 %4;
    store i32* %189 with i32 %208;
    ubr ^super.header3;
  ^while.body7:
    i32 %209 = phi [^super.header3, i32 %139] [^while.body7, i32 %229];
    i32* %210 = getelementptr &([600 * i32]* %39)[i64 0][i32 %209];
    i32 %211 = load i32* %210;
    i32* %212 = getelementptr &([600 * i32]* %40)[i64 0][i32 %209];
    i32 %213 = load i32* %212;
    i32 %214 = add i32 %211, i32 %213;
    i32* %215 = getelementptr &([600 * i32]* %37)[i64 0][i32 %209];
    i32 %216 = load i32* %215;
    i32 %217 = add i32 %214, i32 %216;
    i32* %218 = getelementptr &([600 * i32]* %38)[i64 0][i32 %209];
    i32 %219 = load i32* %218;
    i32 %220 = add i32 %217, i32 %219;
    i32* %221 = getelementptr &([600 * i32]* %36)[i64 0][i32 %209];
    i32* %222 = getelementptr &(i32* %221)[i64 -1];
    i32 %223 = load i32* %222;
    i32 %224 = add i32 %220, i32 %223;
    i32* %225 = getelementptr &(i32* %221)[i64 1];
    i32 %226 = load i32* %225;
    i32 %227 = add i32 %224, i32 %226;
    i32 %228 = sdiv i32 %227, i32 %4;
    store i32* %221 with i32 %228;
    i32 %229 = add i32 %209, i32 1;
    i1 %230 = scmp gt i32 %1, i32 %229;
    cbr i1 %230(prob = 0.97), ^while.body7, ^b4;
}
