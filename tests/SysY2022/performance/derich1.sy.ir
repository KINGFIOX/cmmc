internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal func @newPow(f32 %num, i32 %n, i32* %0, i32* %1, f32* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = scmp lt i32 %n, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = neg i32 %n;
    f32 %5 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %4, i32* %0, i32* %1, f32* %2);
    f32 %6 = fdiv f32 1, f32 %5;
    ubr ^b;
^if.else:
    i1 %7 = scmp eq i32 %n, i32 0;
    cbr i1 %7(prob = 0.5), ^b, ^if.then1;
^if.then1:
    i32 %8 = add i32 %n, i32 -1;
    f32 %9 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %8, i32* %0, i32* %1, f32* %2);
    f32 %10 = fmul f32 %num, f32 %9;
    ubr ^b;
^b:
    f32 %11 = phi [^if.else, f32 1] [^if.then1, f32 %10] [^if.then, f32 %6];
    ret f32 %11;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %alpha = alloc f32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    store i32* %w with i32 512;
    store i32* %h with i32 270;
    store f32* %alpha with f32 0.25;
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    f32* %1 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    i32 %3 = load i32* %w;
    i32 %4 = load i32* %h;
    f32 %5 = load f32* %alpha;
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %6 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* @my_y1)[i64 0][i64 0];
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* @my_y2)[i64 0][i64 0];
    f32 %9 = fneg f32 %5;
    f32 %10 = fdiv f32 %9, f32 256;
    f32 %11 = fadd f32 1, f32 %10;
    f32 %12 = fmul f32 %11, f32 %11;
    f32 %13 = fmul f32 %12, f32 %12;
    f32 %14 = fmul f32 %13, f32 %13;
    f32 %15 = fmul f32 %14, f32 %14;
    f32 %16 = fmul f32 %15, f32 %15;
    f32 %17 = fmul f32 %16, f32 %16;
    f32 %18 = fmul f32 %17, f32 %17;
    f32 %19 = fmul f32 %18, f32 %18;
    f32 %20 = fsub f32 1, f32 %19;
    f32 %21 = fmul f32 %20, f32 %20;
    f32 %22 = fmul f32 2, f32 %5;
    f32 %23 = fmul f32 %22, f32 %19;
    f32 %24 = fadd f32 1, f32 %23;
    f32 %25 = fdiv f32 %22, f32 256;
    f32 %26 = fadd f32 1, f32 %25;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fmul f32 %28, f32 %28;
    f32 %30 = fmul f32 %29, f32 %29;
    f32 %31 = fmul f32 %30, f32 %30;
    f32 %32 = fmul f32 %31, f32 %31;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fmul f32 %33, f32 %33;
    f32 %35 = fsub f32 %24, f32 %34;
    f32 %36 = fdiv f32 %21, f32 %35;
    f32 %37 = fmul f32 %36, f32 %19;
    f32 %38 = fsub f32 %5, f32 1;
    f32 %39 = fmul f32 %37, f32 %38;
    f32 %40 = fadd f32 %5, f32 1;
    f32 %41 = fmul f32 %37, f32 %40;
    f32 %42 = fneg f32 %36;
    f32 %43 = fmul f32 -2, f32 %5;
    f32 %44 = fdiv f32 %43, f32 256;
    f32 %45 = fadd f32 1, f32 %44;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fmul f32 %48, f32 %48;
    f32 %50 = fmul f32 %49, f32 %49;
    f32 %51 = fmul f32 %50, f32 %50;
    f32 %52 = fmul f32 %51, f32 %51;
    f32 %53 = fmul f32 %52, f32 %52;
    f32 %54 = fmul f32 %42, f32 %53;
    i32 %55 = f2s f32 %9 to i32;
    f32 %56 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 2, i32 %55, i32* %w, i32* %h, f32* %alpha);
    f32 %57 = fneg f32 %53;
    i1 %58 = scmp gt i32 %3, i32 0;
    i1 %59 = scmp gt i32 %4, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %60 = phi [^entry, i32 0] [^b1, i32 %110];
    f32 %61 = phi [^entry, f32 %36] [^b1, f32 %98];
    f32 %62 = phi [^entry, f32 %39] [^b1, f32 %99];
    f32 %63 = phi [^entry, f32 %41] [^b1, f32 %100];
    f32 %64 = phi [^entry, f32 %54] [^b1, f32 %101];
    f32 %65 = phi [^entry, f32 %36] [^b1, f32 %102];
    f32 %66 = phi [^entry, f32 %39] [^b1, f32 %103];
    f32 %67 = phi [^entry, f32 %41] [^b1, f32 %104];
    f32 %68 = phi [^entry, f32 %54] [^b1, f32 %105];
    f32 %69 = phi [^entry, f32 %56] [^b1, f32 %106];
    f32 %70 = phi [^entry, f32 %57] [^b1, f32 %107];
    f32 %71 = phi [^entry, f32 1] [^b1, f32 %108];
    f32 %72 = phi [^entry, f32 1] [^b1, f32 %109];
    cbr i1 %59(prob = 0.97), ^indirect, ^b1;
^b:
    f32 %73 = phi [^entry, f32 %41] [^b1, f32 %100];
    f32 %74 = phi [^entry, f32 %54] [^b1, f32 %101];
    f32 %75 = phi [^entry, f32 %36] [^b1, f32 %102];
    f32 %76 = phi [^entry, f32 %39] [^b1, f32 %103];
    f32 %77 = phi [^entry, f32 %41] [^b1, f32 %104];
    f32 %78 = phi [^entry, f32 %54] [^b1, f32 %105];
    f32 %79 = phi [^entry, f32 %56] [^b1, f32 %106];
    f32 %80 = phi [^entry, f32 %57] [^b1, f32 %107];
    f32 %81 = phi [^entry, f32 1] [^b1, f32 %108];
    f32 %82 = phi [^entry, f32 1] [^b1, f32 %109];
    i32 %83 = add i32 %4, i32 -1;
    i1 %84 = scmp gt i32 %83, i32 -1;
    cbr i1 %58(prob = 0.97), ^while.body1, ^b2;
^indirect:
    [270 * f32]* %85 = getelementptr &([270 * f32]* %7)[i32 %60];
    [270 * f32]* %86 = getelementptr &([270 * f32]* %0)[i32 %60];
    ubr ^while.body2;
^while.body1:
    i32 %87 = phi [^b3, i32 %152] [^b, i32 0];
    f32 %88 = phi [^b3, f32 %142] [^b, f32 %73];
    f32 %89 = phi [^b3, f32 %143] [^b, f32 %74];
    f32 %90 = phi [^b3, f32 %144] [^b, f32 %75];
    f32 %91 = phi [^b3, f32 %145] [^b, f32 %76];
    f32 %92 = phi [^b3, f32 %146] [^b, f32 %77];
    f32 %93 = phi [^b3, f32 %147] [^b, f32 %78];
    f32 %94 = phi [^b3, f32 %148] [^b, f32 %79];
    f32 %95 = phi [^b3, f32 %149] [^b, f32 %80];
    f32 %96 = phi [^b3, f32 %150] [^b, f32 %81];
    f32 %97 = phi [^b3, f32 %151] [^b, f32 %82];
    cbr i1 %84(prob = 0.97), ^indirect1, ^b3;
^b1:
    f32 %98 = phi [^while.body2, f32 %36] [^while.body, f32 %61];
    f32 %99 = phi [^while.body2, f32 %39] [^while.body, f32 %62];
    f32 %100 = phi [^while.body2, f32 %41] [^while.body, f32 %63];
    f32 %101 = phi [^while.body2, f32 %54] [^while.body, f32 %64];
    f32 %102 = phi [^while.body2, f32 %36] [^while.body, f32 %65];
    f32 %103 = phi [^while.body2, f32 %39] [^while.body, f32 %66];
    f32 %104 = phi [^while.body2, f32 %41] [^while.body, f32 %67];
    f32 %105 = phi [^while.body2, f32 %54] [^while.body, f32 %68];
    f32 %106 = phi [^while.body2, f32 %56] [^while.body, f32 %69];
    f32 %107 = phi [^while.body2, f32 %57] [^while.body, f32 %70];
    f32 %108 = phi [^while.body2, f32 1] [^while.body, f32 %71];
    f32 %109 = phi [^while.body2, f32 1] [^while.body, f32 %72];
    i32 %110 = add i32 %60, i32 1;
    i1 %111 = scmp lt i32 %110, i32 %3;
    cbr i1 %111(prob = 0.97), ^while.body, ^b;
^b2:
    f32 %112 = phi [^b3, f32 %144] [^b, f32 %75];
    f32 %113 = phi [^b3, f32 %145] [^b, f32 %76];
    f32 %114 = phi [^b3, f32 %146] [^b, f32 %77];
    f32 %115 = phi [^b3, f32 %147] [^b, f32 %78];
    f32 %116 = phi [^b3, f32 %148] [^b, f32 %79];
    f32 %117 = phi [^b3, f32 %149] [^b, f32 %80];
    f32 %118 = phi [^b3, f32 %150] [^b, f32 %81];
    f32 %119 = phi [^b3, f32 %151] [^b, f32 %82];
    cbr i1 %58(prob = 0.97), ^while.body3, ^b4;
^indirect1:
    [270 * f32]* %120 = getelementptr &([270 * f32]* %8)[i32 %87];
    [270 * f32]* %121 = getelementptr &([270 * f32]* %0)[i32 %87];
    ubr ^while.body4;
^while.body2:
    f32 %122 = phi [^indirect, f32 0] [^while.body2, f32 %139];
    f32 %123 = phi [^indirect, f32 %61] [^while.body2, f32 %36];
    f32 %124 = phi [^indirect, f32 %62] [^while.body2, f32 %39];
    f32 %125 = phi [^indirect, f32 %69] [^while.body2, f32 %56];
    f32 %126 = phi [^indirect, f32 %70] [^while.body2, f32 %57];
    f32 %127 = phi [^indirect, f32 0] [^while.body2, f32 %122];
    f32 %128 = phi [^indirect, f32 0] [^while.body2, f32 %132];
    i32 %129 = phi [^indirect, i32 0] [^while.body2, i32 %140];
    f32* %130 = getelementptr &([270 * f32]* %85)[i64 0][i32 %129];
    f32* %131 = getelementptr &([270 * f32]* %86)[i64 0][i32 %129];
    f32 %132 = load f32* %131;
    f32 %133 = fmul f32 %123, f32 %132;
    f32 %134 = fmul f32 %124, f32 %128;
    f32 %135 = fadd f32 %133, f32 %134;
    f32 %136 = fmul f32 %125, f32 %122;
    f32 %137 = fadd f32 %135, f32 %136;
    f32 %138 = fmul f32 %126, f32 %127;
    f32 %139 = fadd f32 %137, f32 %138;
    store f32* %130 with f32 %139;
    i32 %140 = add i32 %129, i32 1;
    i1 %141 = scmp lt i32 %140, i32 %4;
    cbr i1 %141(prob = 0.97), ^while.body2, ^b1;
^b3:
    f32 %142 = phi [^while.body1, f32 %88] [^while.body4, f32 %41];
    f32 %143 = phi [^while.body1, f32 %89] [^while.body4, f32 %54];
    f32 %144 = phi [^while.body1, f32 %90] [^while.body4, f32 %36];
    f32 %145 = phi [^while.body1, f32 %91] [^while.body4, f32 %39];
    f32 %146 = phi [^while.body1, f32 %92] [^while.body4, f32 %41];
    f32 %147 = phi [^while.body1, f32 %93] [^while.body4, f32 %54];
    f32 %148 = phi [^while.body1, f32 %94] [^while.body4, f32 %56];
    f32 %149 = phi [^while.body1, f32 %95] [^while.body4, f32 %57];
    f32 %150 = phi [^while.body1, f32 %96] [^while.body4, f32 1];
    f32 %151 = phi [^while.body1, f32 %97] [^while.body4, f32 1];
    i32 %152 = add i32 %87, i32 1;
    i1 %153 = scmp lt i32 %152, i32 %3;
    cbr i1 %153(prob = 0.97), ^while.body1, ^b2;
^while.body3:
    i32 %154 = phi [^b2, i32 0] [^b5, i32 %210];
    f32 %155 = phi [^b2, f32 %112] [^b5, f32 %202];
    f32 %156 = phi [^b2, f32 %113] [^b5, f32 %203];
    f32 %157 = phi [^b2, f32 %114] [^b5, f32 %204];
    f32 %158 = phi [^b2, f32 %115] [^b5, f32 %205];
    f32 %159 = phi [^b2, f32 %116] [^b5, f32 %206];
    f32 %160 = phi [^b2, f32 %117] [^b5, f32 %207];
    f32 %161 = phi [^b2, f32 %118] [^b5, f32 %208];
    f32 %162 = phi [^b2, f32 %119] [^b5, f32 %209];
    cbr i1 %59(prob = 0.97), ^indirect2, ^b5;
^b4:
    f32 %163 = phi [^b2, f32 %112] [^b5, f32 %202];
    f32 %164 = phi [^b2, f32 %113] [^b5, f32 %203];
    f32 %165 = phi [^b2, f32 %114] [^b5, f32 %204];
    f32 %166 = phi [^b2, f32 %115] [^b5, f32 %205];
    f32 %167 = phi [^b2, f32 %116] [^b5, f32 %206];
    f32 %168 = phi [^b2, f32 %117] [^b5, f32 %207];
    f32 %169 = phi [^b2, f32 %119] [^b5, f32 %209];
    cbr i1 %59(prob = 0.97), ^while.body5, ^b6;
^indirect2:
    [270 * f32]* %170 = getelementptr &([270 * f32]* %6)[i32 %154];
    [270 * f32]* %171 = getelementptr &([270 * f32]* %7)[i32 %154];
    [270 * f32]* %172 = getelementptr &([270 * f32]* %8)[i32 %154];
    ubr ^while.body6;
^while.body4:
    f32 %173 = phi [^indirect1, f32 0] [^while.body4, f32 %189];
    f32 %174 = phi [^indirect1, f32 0] [^while.body4, f32 %191];
    f32 %175 = phi [^indirect1, f32 %88] [^while.body4, f32 %41];
    f32 %176 = phi [^indirect1, f32 %89] [^while.body4, f32 %54];
    f32 %177 = phi [^indirect1, f32 %94] [^while.body4, f32 %56];
    f32 %178 = phi [^indirect1, f32 %95] [^while.body4, f32 %57];
    f32 %179 = phi [^indirect1, f32 0] [^while.body4, f32 %173];
    f32 %180 = phi [^indirect1, f32 0] [^while.body4, f32 %174];
    i32 %181 = phi [^indirect1, i32 %83] [^while.body4, i32 %192];
    f32* %182 = getelementptr &([270 * f32]* %120)[i64 0][i32 %181];
    f32 %183 = fmul f32 %175, f32 %174;
    f32 %184 = fmul f32 %176, f32 %180;
    f32 %185 = fadd f32 %183, f32 %184;
    f32 %186 = fmul f32 %177, f32 %173;
    f32 %187 = fadd f32 %185, f32 %186;
    f32 %188 = fmul f32 %178, f32 %179;
    f32 %189 = fadd f32 %187, f32 %188;
    store f32* %182 with f32 %189;
    f32* %190 = getelementptr &([270 * f32]* %121)[i64 0][i32 %181];
    f32 %191 = load f32* %190;
    i32 %192 = add i32 %181, i32 -1;
    i1 %193 = scmp gt i32 %192, i32 -1;
    cbr i1 %193(prob = 0.97), ^while.body4, ^b3;
^while.body5:
    i32 %194 = phi [^b4, i32 0] [^b7, i32 %265];
    f32 %195 = phi [^b4, f32 %163] [^b7, f32 %258];
    f32 %196 = phi [^b4, f32 %164] [^b7, f32 %259];
    f32 %197 = phi [^b4, f32 %165] [^b7, f32 %260];
    f32 %198 = phi [^b4, f32 %166] [^b7, f32 %261];
    f32 %199 = phi [^b4, f32 %167] [^b7, f32 %262];
    f32 %200 = phi [^b4, f32 %168] [^b7, f32 %263];
    f32 %201 = phi [^b4, f32 %169] [^b7, f32 %264];
    cbr i1 %58(prob = 0.97), ^while.body7, ^b7;
^b5:
    f32 %202 = phi [^while.body3, f32 %155] [^while.body6, f32 %36];
    f32 %203 = phi [^while.body3, f32 %156] [^while.body6, f32 %39];
    f32 %204 = phi [^while.body3, f32 %157] [^while.body6, f32 %41];
    f32 %205 = phi [^while.body3, f32 %158] [^while.body6, f32 %54];
    f32 %206 = phi [^while.body3, f32 %159] [^while.body6, f32 %56];
    f32 %207 = phi [^while.body3, f32 %160] [^while.body6, f32 %57];
    f32 %208 = phi [^while.body3, f32 %161] [^while.body6, f32 1];
    f32 %209 = phi [^while.body3, f32 %162] [^while.body6, f32 1];
    i32 %210 = add i32 %154, i32 1;
    i1 %211 = scmp lt i32 %210, i32 %3;
    cbr i1 %211(prob = 0.97), ^while.body3, ^b4;
^b6:
    f32 %212 = phi [^b4, f32 %165] [^b7, f32 %260];
    f32 %213 = phi [^b4, f32 %166] [^b7, f32 %261];
    f32 %214 = phi [^b4, f32 %167] [^b7, f32 %262];
    f32 %215 = phi [^b4, f32 %168] [^b7, f32 %263];
    f32 %216 = phi [^b4, f32 %169] [^b7, f32 %264];
    i32 %217 = add i32 %3, i32 -1;
    i1 %218 = scmp gt i32 %217, i32 -1;
    cbr i1 %59(prob = 0.97), ^while.body8, ^b8;
^while.body6:
    f32 %219 = phi [^indirect2, f32 %161] [^while.body6, f32 1];
    i32 %220 = phi [^indirect2, i32 0] [^while.body6, i32 %228];
    f32* %221 = getelementptr &([270 * f32]* %170)[i64 0][i32 %220];
    f32* %222 = getelementptr &([270 * f32]* %171)[i64 0][i32 %220];
    f32 %223 = load f32* %222;
    f32* %224 = getelementptr &([270 * f32]* %172)[i64 0][i32 %220];
    f32 %225 = load f32* %224;
    f32 %226 = fadd f32 %223, f32 %225;
    f32 %227 = fmul f32 %219, f32 %226;
    store f32* %221 with f32 %227;
    i32 %228 = add i32 %220, i32 1;
    i1 %229 = scmp lt i32 %228, i32 %4;
    cbr i1 %229(prob = 0.97), ^while.body6, ^b5;
^while.body7:
    f32 %230 = phi [^while.body5, f32 0] [^while.body7, f32 %249];
    f32 %231 = phi [^while.body5, f32 %195] [^while.body7, f32 %36];
    f32 %232 = phi [^while.body5, f32 %196] [^while.body7, f32 %39];
    f32 %233 = phi [^while.body5, f32 %199] [^while.body7, f32 %56];
    f32 %234 = phi [^while.body5, f32 %200] [^while.body7, f32 %57];
    f32 %235 = phi [^while.body5, f32 0] [^while.body7, f32 %230];
    f32 %236 = phi [^while.body5, f32 0] [^while.body7, f32 %242];
    i32 %237 = phi [^while.body5, i32 0] [^while.body7, i32 %250];
    [270 * f32]* %238 = getelementptr &([270 * f32]* %7)[i32 %237];
    f32* %239 = getelementptr &([270 * f32]* %238)[i64 0][i32 %194];
    [270 * f32]* %240 = getelementptr &([270 * f32]* %6)[i32 %237];
    f32* %241 = getelementptr &([270 * f32]* %240)[i64 0][i32 %194];
    f32 %242 = load f32* %241;
    f32 %243 = fmul f32 %231, f32 %242;
    f32 %244 = fmul f32 %232, f32 %236;
    f32 %245 = fadd f32 %243, f32 %244;
    f32 %246 = fmul f32 %233, f32 %230;
    f32 %247 = fadd f32 %245, f32 %246;
    f32 %248 = fmul f32 %234, f32 %235;
    f32 %249 = fadd f32 %247, f32 %248;
    store f32* %239 with f32 %249;
    i32 %250 = add i32 %237, i32 1;
    i1 %251 = scmp lt i32 %250, i32 %3;
    cbr i1 %251(prob = 0.97), ^while.body7, ^b7;
^while.body8:
    i32 %252 = phi [^b6, i32 0] [^b9, i32 %298];
    f32 %253 = phi [^b6, f32 %212] [^b9, f32 %293];
    f32 %254 = phi [^b6, f32 %213] [^b9, f32 %294];
    f32 %255 = phi [^b6, f32 %214] [^b9, f32 %295];
    f32 %256 = phi [^b6, f32 %215] [^b9, f32 %296];
    f32 %257 = phi [^b6, f32 %216] [^b9, f32 %297];
    cbr i1 %218(prob = 0.97), ^while.body9, ^b9;
^b7:
    f32 %258 = phi [^while.body5, f32 %195] [^while.body7, f32 %36];
    f32 %259 = phi [^while.body5, f32 %196] [^while.body7, f32 %39];
    f32 %260 = phi [^while.body5, f32 %197] [^while.body7, f32 %41];
    f32 %261 = phi [^while.body5, f32 %198] [^while.body7, f32 %54];
    f32 %262 = phi [^while.body5, f32 %199] [^while.body7, f32 %56];
    f32 %263 = phi [^while.body5, f32 %200] [^while.body7, f32 %57];
    f32 %264 = phi [^while.body5, f32 %201] [^while.body7, f32 1];
    i32 %265 = add i32 %194, i32 1;
    i1 %266 = scmp lt i32 %265, i32 %4;
    cbr i1 %266(prob = 0.97), ^while.body5, ^b6;
^b8:
    f32 %267 = phi [^b6, f32 %216] [^b9, f32 %297];
    cbr i1 %58(prob = 0.97), ^while.body10, ^entry1;
^while.body9:
    f32 %268 = phi [^while.body8, f32 0] [^while.body9, f32 %285];
    f32 %269 = phi [^while.body8, f32 0] [^while.body9, f32 %288];
    f32 %270 = phi [^while.body8, f32 %253] [^while.body9, f32 %41];
    f32 %271 = phi [^while.body8, f32 %254] [^while.body9, f32 %54];
    f32 %272 = phi [^while.body8, f32 %255] [^while.body9, f32 %56];
    f32 %273 = phi [^while.body8, f32 %256] [^while.body9, f32 %57];
    f32 %274 = phi [^while.body8, f32 0] [^while.body9, f32 %268];
    f32 %275 = phi [^while.body8, f32 0] [^while.body9, f32 %269];
    i32 %276 = phi [^while.body8, i32 %217] [^while.body9, i32 %289];
    [270 * f32]* %277 = getelementptr &([270 * f32]* %8)[i32 %276];
    f32* %278 = getelementptr &([270 * f32]* %277)[i64 0][i32 %252];
    f32 %279 = fmul f32 %270, f32 %269;
    f32 %280 = fmul f32 %271, f32 %275;
    f32 %281 = fadd f32 %279, f32 %280;
    f32 %282 = fmul f32 %272, f32 %268;
    f32 %283 = fadd f32 %281, f32 %282;
    f32 %284 = fmul f32 %273, f32 %274;
    f32 %285 = fadd f32 %283, f32 %284;
    store f32* %278 with f32 %285;
    [270 * f32]* %286 = getelementptr &([270 * f32]* %6)[i32 %276];
    f32* %287 = getelementptr &([270 * f32]* %286)[i64 0][i32 %252];
    f32 %288 = load f32* %287;
    i32 %289 = add i32 %276, i32 -1;
    i1 %290 = scmp gt i32 %289, i32 -1;
    cbr i1 %290(prob = 0.97), ^while.body9, ^b9;
^while.body10:
    i32 %291 = phi [^b8, i32 0] [^b10, i32 %306];
    f32 %292 = phi [^b8, f32 %267] [^b10, f32 %305];
    cbr i1 %59(prob = 0.97), ^indirect3, ^b10;
^b9:
    f32 %293 = phi [^while.body8, f32 %253] [^while.body9, f32 %41];
    f32 %294 = phi [^while.body8, f32 %254] [^while.body9, f32 %54];
    f32 %295 = phi [^while.body8, f32 %255] [^while.body9, f32 %56];
    f32 %296 = phi [^while.body8, f32 %256] [^while.body9, f32 %57];
    f32 %297 = phi [^while.body8, f32 %257] [^while.body9, f32 1];
    i32 %298 = add i32 %252, i32 1;
    i1 %299 = scmp lt i32 %298, i32 %4;
    cbr i1 %299(prob = 0.97), ^while.body8, ^b8;
^entry1:
    call (i32) -> void @stoptime(i32 158);
    i32 %300 = mul i32 %4, i32 %3;
    f32* %301 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 %300, f32* %301);
    ret i32 0;
^indirect3:
    [270 * f32]* %302 = getelementptr &([270 * f32]* %6)[i32 %291];
    [270 * f32]* %303 = getelementptr &([270 * f32]* %7)[i32 %291];
    [270 * f32]* %304 = getelementptr &([270 * f32]* %8)[i32 %291];
    ubr ^while.body11;
^b10:
    f32 %305 = phi [^while.body10, f32 %292] [^while.body11, f32 1];
    i32 %306 = add i32 %291, i32 1;
    i1 %307 = scmp lt i32 %306, i32 %3;
    cbr i1 %307(prob = 0.97), ^while.body10, ^entry1;
^while.body11:
    f32 %308 = phi [^indirect3, f32 %292] [^while.body11, f32 1];
    i32 %309 = phi [^indirect3, i32 0] [^while.body11, i32 %317];
    f32* %310 = getelementptr &([270 * f32]* %302)[i64 0][i32 %309];
    f32* %311 = getelementptr &([270 * f32]* %303)[i64 0][i32 %309];
    f32 %312 = load f32* %311;
    f32* %313 = getelementptr &([270 * f32]* %304)[i64 0][i32 %309];
    f32 %314 = load f32* %313;
    f32 %315 = fadd f32 %312, f32 %314;
    f32 %316 = fmul f32 %308, f32 %315;
    store f32* %310 with f32 %316;
    i32 %317 = add i32 %309, i32 1;
    i1 %318 = scmp lt i32 %317, i32 %4;
    cbr i1 %318(prob = 0.97), ^while.body11, ^b10;
}
