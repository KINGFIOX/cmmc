internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfarray(i32, f32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn, align 8;
internal [512 * [270 * f32]]* @imgOut, align 8;
internal [512 * [270 * f32]]* @my_y1, align 8 { Flexible };
internal [512 * [270 * f32]]* @my_y2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [512 * [270 * f32]]* %0 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    f32* %1 = getelementptr &([512 * [270 * f32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    [25 * i8]* %3 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_0 to [25 * i8]*;
    f32* %4 = ptradd [25 * i8]* %3, i32 0;
    store f32* %4 with f32 -0.189399;
    f32* %5 = ptradd [25 * i8]* %3, i32 4;
    store f32* %5 with f32 0.110615;
    f32* %6 = ptradd [25 * i8]* %3, i32 8;
    store f32* %6 with f32 1;
    f32* %7 = ptradd [25 * i8]* %3, i32 12;
    store f32* %7 with f32 -0.606235;
    i32* %8 = ptradd [25 * i8]* %3, i32 16;
    store i32* %8 with i32 270;
    i32* %9 = ptradd [25 * i8]* %3, i32 20;
    store i32* %9 with i32 512;
    i1* %10 = ptradd [25 * i8]* %3, i32 24;
    store i1* %10 with i1 true;
    i8* %11 = functionptr () -> void @cmmc_parallel_body_0 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %11);
    [25 * i8]* %12 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_1 to [25 * i8]*;
    i32* %13 = ptradd [25 * i8]* %12, i32 0;
    store i32* %13 with i32 269;
    f32* %14 = ptradd [25 * i8]* %12, i32 4;
    store f32* %14 with f32 -0.184358;
    f32* %15 = ptradd [25 * i8]* %12, i32 8;
    store f32* %15 with f32 0.114821;
    f32* %16 = ptradd [25 * i8]* %12, i32 12;
    store f32* %16 with f32 1;
    f32* %17 = ptradd [25 * i8]* %12, i32 16;
    store f32* %17 with f32 -0.606235;
    i32* %18 = ptradd [25 * i8]* %12, i32 20;
    store i32* %18 with i32 512;
    i1* %19 = ptradd [25 * i8]* %12, i32 24;
    store i1* %19 with i1 true;
    i8* %20 = functionptr () -> void @cmmc_parallel_body_1 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %20);
    [9 * i8]* %21 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_4 to [9 * i8]*;
    i32* %22 = ptradd [9 * i8]* %21, i32 0;
    store i32* %22 with i32 270;
    i32* %23 = ptradd [9 * i8]* %21, i32 4;
    store i32* %23 with i32 512;
    i1* %24 = ptradd [9 * i8]* %21, i32 8;
    store i1* %24 with i1 true;
    i8* %25 = functionptr () -> void @cmmc_parallel_body_4 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %25);
    [25 * i8]* %26 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_3 to [25 * i8]*;
    f32* %27 = ptradd [25 * i8]* %26, i32 0;
    store f32* %27 with f32 -0.189399;
    f32* %28 = ptradd [25 * i8]* %26, i32 4;
    store f32* %28 with f32 0.110615;
    f32* %29 = ptradd [25 * i8]* %26, i32 8;
    store f32* %29 with f32 1;
    f32* %30 = ptradd [25 * i8]* %26, i32 12;
    store f32* %30 with f32 -0.606235;
    i32* %31 = ptradd [25 * i8]* %26, i32 16;
    store i32* %31 with i32 512;
    i32* %32 = ptradd [25 * i8]* %26, i32 20;
    store i32* %32 with i32 270;
    i1* %33 = ptradd [25 * i8]* %26, i32 24;
    store i1* %33 with i1 true;
    i8* %34 = functionptr () -> void @cmmc_parallel_body_3 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 270, i8* %34);
    [25 * i8]* %35 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_5 to [25 * i8]*;
    i32* %36 = ptradd [25 * i8]* %35, i32 0;
    store i32* %36 with i32 511;
    f32* %37 = ptradd [25 * i8]* %35, i32 4;
    store f32* %37 with f32 -0.184358;
    f32* %38 = ptradd [25 * i8]* %35, i32 8;
    store f32* %38 with f32 0.114821;
    f32* %39 = ptradd [25 * i8]* %35, i32 12;
    store f32* %39 with f32 1;
    f32* %40 = ptradd [25 * i8]* %35, i32 16;
    store f32* %40 with f32 -0.606235;
    i32* %41 = ptradd [25 * i8]* %35, i32 20;
    store i32* %41 with i32 270;
    i1* %42 = ptradd [25 * i8]* %35, i32 24;
    store i1* %42 with i1 true;
    i8* %43 = functionptr () -> void @cmmc_parallel_body_5 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 270, i8* %43);
    [9 * i8]* %44 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_2 to [9 * i8]*;
    i32* %45 = ptradd [9 * i8]* %44, i32 0;
    store i32* %45 with i32 270;
    i32* %46 = ptradd [9 * i8]* %44, i32 4;
    store i32* %46 with i32 512;
    i1* %47 = ptradd [9 * i8]* %44, i32 8;
    store i1* %47 with i1 true;
    i8* %48 = functionptr () -> void @cmmc_parallel_body_2 as i8*;
    call (i32, i32, i8*) -> void @cmmcParallelFor(i32 0, i32 512, i8* %48);
    [512 * [270 * f32]]* %49 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    f32* %50 = getelementptr &([512 * [270 * f32]]* %49)[i64 0][i64 0][i64 0];
    call (i32) -> void @stoptime(i32 158);
    call (i32, f32*) -> void @putfarray(i32 138240, f32* %50);
    ret i32 0;
}
internal func @cmmcParallelFor(i32, i32, i8*) -> void { NoRecurse };
internal func @cmmc_parallel_body_0(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [25 * i8]* %2 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_0 to [25 * i8]*;
    f32* %3 = ptradd [25 * i8]* %2, i32 0;
    f32 %4 = load f32* %3;
    f32* %5 = ptradd [25 * i8]* %2, i32 4;
    f32 %6 = load f32* %5;
    f32* %7 = ptradd [25 * i8]* %2, i32 8;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [25 * i8]* %2, i32 12;
    f32 %10 = load f32* %9;
    i32* %11 = ptradd [25 * i8]* %2, i32 16;
    i32 %12 = load i32* %11;
    i1 %13 = icmp sgt i32 %12, i32 3;
    i32 %14 = add i32 %12, i32 -3;
    i1* %15 = ptradd [25 * i8]* %2, i32 24;
    i1 %16 = load i1* %15;
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    [512 * [270 * f32]]* %19 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    [270 * f32]* %20 = getelementptr &([512 * [270 * f32]]* %19)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %21 = phi [^b, i32 %0] [^b2, i32 %24];
    cbr i1 %16(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [270 * f32]* %22 = getelementptr &([270 * f32]* %18)[i32 %21];
    [270 * f32]* %23 = getelementptr &([270 * f32]* %20)[i32 %21];
    cbr i1 %13(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    f32 %26 = phi [^prebody, f32 0] [^while.body, f32 %58];
    f32 %27 = phi [^prebody, f32 0] [^while.body, f32 %68];
    f32 %28 = phi [^prebody, f32 0] [^while.body, f32 %62];
    i32 %29 = phi [^prebody, i32 0] [^while.body, i32 %70];
    f32* %30 = getelementptr &([270 * f32]* %23)[i64 0][i32 %29];
    f32 %31 = load f32* %30;
    f32 %32 = fmul f32 %4, f32 %31;
    f32 %33 = fmul f32 %6, f32 %28;
    f32 %34 = fadd f32 %32, f32 %33;
    f32 %35 = fmul f32 %8, f32 %27;
    f32 %36 = fadd f32 %34, f32 %35;
    f32 %37 = fmul f32 %10, f32 %26;
    f32 %38 = fadd f32 %36, f32 %37;
    f32* %39 = getelementptr &([270 * f32]* %22)[i64 0][i32 %29];
    store f32* %39 with f32 %38;
    f32 %40 = fmul f32 %8, f32 %38;
    f32* %41 = getelementptr &(f32* %30)[i64 1];
    f32 %42 = load f32* %41;
    f32 %43 = fmul f32 %4, f32 %42;
    f32 %44 = fmul f32 %6, f32 %31;
    f32 %45 = fadd f32 %43, f32 %44;
    f32 %46 = fadd f32 %45, f32 %40;
    f32 %47 = fmul f32 %10, f32 %27;
    f32 %48 = fadd f32 %46, f32 %47;
    f32* %49 = getelementptr &(f32* %39)[i64 1];
    store f32* %49 with f32 %48;
    f32 %50 = fmul f32 %8, f32 %48;
    f32* %51 = getelementptr &(f32* %30)[i64 2];
    f32 %52 = load f32* %51;
    f32 %53 = fmul f32 %4, f32 %52;
    f32 %54 = fmul f32 %6, f32 %42;
    f32 %55 = fadd f32 %53, f32 %54;
    f32 %56 = fadd f32 %55, f32 %50;
    f32 %57 = fmul f32 %10, f32 %38;
    f32 %58 = fadd f32 %56, f32 %57;
    f32* %59 = getelementptr &(f32* %39)[i64 2];
    store f32* %59 with f32 %58;
    f32 %60 = fmul f32 %8, f32 %58;
    f32* %61 = getelementptr &(f32* %30)[i64 3];
    f32 %62 = load f32* %61;
    f32 %63 = fmul f32 %4, f32 %62;
    f32 %64 = fmul f32 %6, f32 %52;
    f32 %65 = fadd f32 %63, f32 %64;
    f32 %66 = fadd f32 %65, f32 %60;
    f32 %67 = fmul f32 %10, f32 %48;
    f32 %68 = fadd f32 %66, f32 %67;
    f32* %69 = getelementptr &(f32* %39)[i64 3];
    store f32* %69 with f32 %68;
    i32 %70 = add i32 %29, i32 4;
    i1 %71 = icmp sgt i32 %14, i32 %70;
    cbr i1 %71(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    f32 %72 = phi [^prebody, f32 0] [^while.body, f32 %58];
    f32 %73 = phi [^prebody, f32 0] [^while.body, f32 %68];
    f32 %74 = phi [^prebody, f32 0] [^while.body, f32 %62];
    i32 %75 = phi [^prebody, i32 0] [^while.body, i32 %70];
    i1 %76 = icmp sgt i32 %12, i32 %75;
    cbr i1 %76(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %77 = phi [^scalar.header, i32 %75] [^while.body1, i32 %91];
    f32 %78 = phi [^scalar.header, f32 %74] [^while.body1, f32 %82];
    f32 %79 = phi [^scalar.header, f32 %73] [^while.body1, f32 %89];
    f32 %80 = phi [^scalar.header, f32 %72] [^while.body1, f32 %79];
    f32* %81 = getelementptr &([270 * f32]* %23)[i64 0][i32 %77];
    f32 %82 = load f32* %81;
    f32 %83 = fmul f32 %4, f32 %82;
    f32 %84 = fmul f32 %6, f32 %78;
    f32 %85 = fadd f32 %83, f32 %84;
    f32 %86 = fmul f32 %8, f32 %79;
    f32 %87 = fadd f32 %85, f32 %86;
    f32 %88 = fmul f32 %10, f32 %80;
    f32 %89 = fadd f32 %87, f32 %88;
    f32* %90 = getelementptr &([270 * f32]* %22)[i64 0][i32 %77];
    store f32* %90 with f32 %89;
    i32 %91 = add i32 %77, i32 1;
    i1 %92 = icmp sgt i32 %12, i32 %91;
    cbr i1 %92(prob = 0.75), ^while.body1, ^b2;
}
internal [25 * i8]* @cmmc_parallel_body_payload_0, align 8;
internal func @cmmc_parallel_body_1(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [25 * i8]* %2 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_1 to [25 * i8]*;
    i32* %3 = ptradd [25 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 -1;
    f32* %7 = ptradd [25 * i8]* %2, i32 4;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [25 * i8]* %2, i32 8;
    f32 %10 = load f32* %9;
    f32* %11 = ptradd [25 * i8]* %2, i32 12;
    f32 %12 = load f32* %11;
    f32* %13 = ptradd [25 * i8]* %2, i32 16;
    f32 %14 = load f32* %13;
    i1* %15 = ptradd [25 * i8]* %2, i32 24;
    i1 %16 = load i1* %15;
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    [512 * [270 * f32]]* %19 = ptrcast [512 * [270 * f32]]* @imgIn to [512 * [270 * f32]]*;
    [270 * f32]* %20 = getelementptr &([512 * [270 * f32]]* %19)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %21 = phi [^b, i32 %0] [^b2, i32 %24];
    cbr i1 %16(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [270 * f32]* %22 = getelementptr &([270 * f32]* %18)[i32 %21];
    [270 * f32]* %23 = getelementptr &([270 * f32]* %20)[i32 %21];
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %24 = add i32 %21, i32 1;
    i1 %25 = icmp sgt i32 %1, i32 %24;
    cbr i1 %25(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    f32 %26 = phi [^prebody, f32 0] [^while.body, f32 %57];
    f32 %27 = phi [^prebody, f32 0] [^while.body, f32 %67];
    f32 %28 = phi [^prebody, f32 0] [^while.body, f32 %61];
    f32 %29 = phi [^prebody, f32 0] [^while.body, f32 %70];
    i32 %30 = phi [^prebody, i32 %4] [^while.body, i32 %71];
    f32 %31 = fmul f32 %8, f32 %29;
    f32 %32 = fmul f32 %10, f32 %28;
    f32 %33 = fadd f32 %31, f32 %32;
    f32 %34 = fmul f32 %12, f32 %27;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fmul f32 %14, f32 %26;
    f32 %37 = fadd f32 %35, f32 %36;
    f32* %38 = getelementptr &([270 * f32]* %22)[i64 0][i32 %30];
    store f32* %38 with f32 %37;
    f32 %39 = fmul f32 %12, f32 %37;
    f32* %40 = getelementptr &([270 * f32]* %23)[i64 0][i32 %30];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %8, f32 %41;
    f32 %43 = fmul f32 %10, f32 %29;
    f32 %44 = fadd f32 %42, f32 %43;
    f32 %45 = fadd f32 %44, f32 %39;
    f32 %46 = fmul f32 %14, f32 %27;
    f32 %47 = fadd f32 %45, f32 %46;
    f32* %48 = getelementptr &(f32* %38)[i64 -1];
    store f32* %48 with f32 %47;
    f32 %49 = fmul f32 %12, f32 %47;
    f32* %50 = getelementptr &(f32* %40)[i64 -1];
    f32 %51 = load f32* %50;
    f32 %52 = fmul f32 %8, f32 %51;
    f32 %53 = fmul f32 %10, f32 %41;
    f32 %54 = fadd f32 %52, f32 %53;
    f32 %55 = fadd f32 %54, f32 %49;
    f32 %56 = fmul f32 %14, f32 %37;
    f32 %57 = fadd f32 %55, f32 %56;
    f32* %58 = getelementptr &(f32* %38)[i64 -2];
    store f32* %58 with f32 %57;
    f32 %59 = fmul f32 %12, f32 %57;
    f32* %60 = getelementptr &(f32* %40)[i64 -2];
    f32 %61 = load f32* %60;
    f32 %62 = fmul f32 %8, f32 %61;
    f32 %63 = fmul f32 %10, f32 %51;
    f32 %64 = fadd f32 %62, f32 %63;
    f32 %65 = fadd f32 %64, f32 %59;
    f32 %66 = fmul f32 %14, f32 %47;
    f32 %67 = fadd f32 %65, f32 %66;
    f32* %68 = getelementptr &(f32* %38)[i64 -3];
    store f32* %68 with f32 %67;
    f32* %69 = getelementptr &(f32* %40)[i64 -3];
    f32 %70 = load f32* %69;
    i32 %71 = add i32 %30, i32 -4;
    i1 %72 = icmp sgt i32 %71, i32 2;
    cbr i1 %72(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    f32 %73 = phi [^prebody, f32 0] [^while.body, f32 %57];
    f32 %74 = phi [^prebody, f32 0] [^while.body, f32 %67];
    f32 %75 = phi [^prebody, f32 0] [^while.body, f32 %61];
    f32 %76 = phi [^prebody, f32 0] [^while.body, f32 %70];
    i32 %77 = phi [^prebody, i32 %4] [^while.body, i32 %71];
    i1 %78 = icmp sgt i32 %77, i32 -1;
    cbr i1 %78(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %79 = phi [^scalar.header, i32 %77] [^while.body1, i32 %94];
    f32 %80 = phi [^scalar.header, f32 %76] [^while.body1, f32 %93];
    f32 %81 = phi [^scalar.header, f32 %75] [^while.body1, f32 %80];
    f32 %82 = phi [^scalar.header, f32 %74] [^while.body1, f32 %90];
    f32 %83 = phi [^scalar.header, f32 %73] [^while.body1, f32 %82];
    f32 %84 = fmul f32 %8, f32 %80;
    f32 %85 = fmul f32 %10, f32 %81;
    f32 %86 = fadd f32 %84, f32 %85;
    f32 %87 = fmul f32 %12, f32 %82;
    f32 %88 = fadd f32 %86, f32 %87;
    f32 %89 = fmul f32 %14, f32 %83;
    f32 %90 = fadd f32 %88, f32 %89;
    f32* %91 = getelementptr &([270 * f32]* %22)[i64 0][i32 %79];
    store f32* %91 with f32 %90;
    f32* %92 = getelementptr &([270 * f32]* %23)[i64 0][i32 %79];
    f32 %93 = load f32* %92;
    i32 %94 = add i32 %79, i32 -1;
    i1 %95 = icmp sgt i32 %94, i32 -1;
    cbr i1 %95(prob = 0.75), ^while.body1, ^b2;
}
internal [25 * i8]* @cmmc_parallel_body_payload_1, align 8;
internal func @cmmc_parallel_body_2(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [9 * i8]* %2 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_2 to [9 * i8]*;
    i32* %3 = ptradd [9 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    i1* %7 = ptradd [9 * i8]* %2, i32 8;
    i1 %8 = load i1* %7;
    [512 * [270 * f32]]* %9 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %10 = getelementptr &([512 * [270 * f32]]* %9)[i64 0][i64 0];
    [512 * [270 * f32]]* %11 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %12 = getelementptr &([512 * [270 * f32]]* %11)[i64 0][i64 0];
    [512 * [270 * f32]]* %13 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %14 = getelementptr &([512 * [270 * f32]]* %13)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %15 = phi [^b, i32 %0] [^b2, i32 %19];
    cbr i1 %8(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [270 * f32]* %16 = getelementptr &([270 * f32]* %10)[i32 %15];
    [270 * f32]* %17 = getelementptr &([270 * f32]* %12)[i32 %15];
    [270 * f32]* %18 = getelementptr &([270 * f32]* %14)[i32 %15];
    cbr i1 %5(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %19 = add i32 %15, i32 1;
    i1 %20 = icmp sgt i32 %1, i32 %19;
    cbr i1 %20(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %46];
    f32* %22 = getelementptr &([270 * f32]* %17)[i64 0][i32 %21];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &([270 * f32]* %18)[i64 0][i32 %21];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    f32* %27 = getelementptr &([270 * f32]* %16)[i64 0][i32 %21];
    store f32* %27 with f32 %26;
    f32* %28 = getelementptr &(f32* %22)[i64 1];
    f32 %29 = load f32* %28;
    f32* %30 = getelementptr &(f32* %24)[i64 1];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &(f32* %27)[i64 1];
    store f32* %33 with f32 %32;
    f32* %34 = getelementptr &(f32* %22)[i64 2];
    f32 %35 = load f32* %34;
    f32* %36 = getelementptr &(f32* %24)[i64 2];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &(f32* %27)[i64 2];
    store f32* %39 with f32 %38;
    f32* %40 = getelementptr &(f32* %22)[i64 3];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &(f32* %24)[i64 3];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %27)[i64 3];
    store f32* %45 with f32 %44;
    i32 %46 = add i32 %21, i32 4;
    i1 %47 = icmp sgt i32 %6, i32 %46;
    cbr i1 %47(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    i32 %48 = phi [^prebody, i32 0] [^while.body, i32 %46];
    i1 %49 = icmp sgt i32 %4, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %50 = phi [^scalar.header, i32 %48] [^while.body1, i32 %57];
    f32* %51 = getelementptr &([270 * f32]* %17)[i64 0][i32 %50];
    f32 %52 = load f32* %51;
    f32* %53 = getelementptr &([270 * f32]* %18)[i64 0][i32 %50];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &([270 * f32]* %16)[i64 0][i32 %50];
    store f32* %56 with f32 %55;
    i32 %57 = add i32 %50, i32 1;
    i1 %58 = icmp sgt i32 %4, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body1, ^b2;
}
internal [9 * i8]* @cmmc_parallel_body_payload_2, align 8;
internal func @cmmc_parallel_body_3(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [25 * i8]* %2 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_3 to [25 * i8]*;
    f32* %3 = ptradd [25 * i8]* %2, i32 0;
    f32 %4 = load f32* %3;
    f32* %5 = ptradd [25 * i8]* %2, i32 4;
    f32 %6 = load f32* %5;
    f32* %7 = ptradd [25 * i8]* %2, i32 8;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [25 * i8]* %2, i32 12;
    f32 %10 = load f32* %9;
    i32* %11 = ptradd [25 * i8]* %2, i32 16;
    i32 %12 = load i32* %11;
    i1 %13 = icmp sgt i32 %12, i32 3;
    i32 %14 = add i32 %12, i32 -3;
    i1* %15 = ptradd [25 * i8]* %2, i32 24;
    i1 %16 = load i1* %15;
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    [512 * [270 * f32]]* %19 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %20 = getelementptr &([512 * [270 * f32]]* %19)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %21 = phi [^b, i32 %0] [^b2, i32 %22];
    cbr i1 %16(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    cbr i1 %13(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %22 = add i32 %21, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    f32 %24 = phi [^super.header, f32 0] [^while.body, f32 %61];
    f32 %25 = phi [^super.header, f32 0] [^while.body, f32 %73];
    f32 %26 = phi [^super.header, f32 0] [^while.body, f32 %67];
    i32 %27 = phi [^super.header, i32 0] [^while.body, i32 %76];
    [270 * f32]* %28 = getelementptr &([270 * f32]* %20)[i32 %27];
    f32* %29 = getelementptr &([270 * f32]* %28)[i64 0][i32 %21];
    f32 %30 = load f32* %29;
    f32 %31 = fmul f32 %4, f32 %30;
    f32 %32 = fmul f32 %6, f32 %26;
    f32 %33 = fadd f32 %31, f32 %32;
    f32 %34 = fmul f32 %8, f32 %25;
    f32 %35 = fadd f32 %33, f32 %34;
    f32 %36 = fmul f32 %10, f32 %24;
    f32 %37 = fadd f32 %35, f32 %36;
    [270 * f32]* %38 = getelementptr &([270 * f32]* %18)[i32 %27];
    f32* %39 = getelementptr &([270 * f32]* %38)[i64 0][i32 %21];
    store f32* %39 with f32 %37;
    f32 %40 = fmul f32 %8, f32 %37;
    [270 * f32]* %41 = getelementptr &([270 * f32]* %28)[i64 1];
    f32* %42 = getelementptr &([270 * f32]* %41)[i64 0][i32 %21];
    f32 %43 = load f32* %42;
    f32 %44 = fmul f32 %4, f32 %43;
    f32 %45 = fmul f32 %6, f32 %30;
    f32 %46 = fadd f32 %44, f32 %45;
    f32 %47 = fadd f32 %46, f32 %40;
    f32 %48 = fmul f32 %10, f32 %25;
    f32 %49 = fadd f32 %47, f32 %48;
    [270 * f32]* %50 = getelementptr &([270 * f32]* %38)[i64 1];
    f32* %51 = getelementptr &([270 * f32]* %50)[i64 0][i32 %21];
    store f32* %51 with f32 %49;
    f32 %52 = fmul f32 %8, f32 %49;
    [270 * f32]* %53 = getelementptr &([270 * f32]* %28)[i64 2];
    f32* %54 = getelementptr &([270 * f32]* %53)[i64 0][i32 %21];
    f32 %55 = load f32* %54;
    f32 %56 = fmul f32 %4, f32 %55;
    f32 %57 = fmul f32 %6, f32 %43;
    f32 %58 = fadd f32 %56, f32 %57;
    f32 %59 = fadd f32 %58, f32 %52;
    f32 %60 = fmul f32 %10, f32 %37;
    f32 %61 = fadd f32 %59, f32 %60;
    [270 * f32]* %62 = getelementptr &([270 * f32]* %38)[i64 2];
    f32* %63 = getelementptr &([270 * f32]* %62)[i64 0][i32 %21];
    store f32* %63 with f32 %61;
    f32 %64 = fmul f32 %8, f32 %61;
    [270 * f32]* %65 = getelementptr &([270 * f32]* %28)[i64 3];
    f32* %66 = getelementptr &([270 * f32]* %65)[i64 0][i32 %21];
    f32 %67 = load f32* %66;
    f32 %68 = fmul f32 %4, f32 %67;
    f32 %69 = fmul f32 %6, f32 %55;
    f32 %70 = fadd f32 %68, f32 %69;
    f32 %71 = fadd f32 %70, f32 %64;
    f32 %72 = fmul f32 %10, f32 %49;
    f32 %73 = fadd f32 %71, f32 %72;
    [270 * f32]* %74 = getelementptr &([270 * f32]* %38)[i64 3];
    f32* %75 = getelementptr &([270 * f32]* %74)[i64 0][i32 %21];
    store f32* %75 with f32 %73;
    i32 %76 = add i32 %27, i32 4;
    i1 %77 = icmp sgt i32 %14, i32 %76;
    cbr i1 %77(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    f32 %78 = phi [^super.header, f32 0] [^while.body, f32 %61];
    f32 %79 = phi [^super.header, f32 0] [^while.body, f32 %73];
    f32 %80 = phi [^super.header, f32 0] [^while.body, f32 %67];
    i32 %81 = phi [^super.header, i32 0] [^while.body, i32 %76];
    i1 %82 = icmp sgt i32 %12, i32 %81;
    cbr i1 %82(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %83 = phi [^scalar.header, i32 %81] [^while.body1, i32 %99];
    f32 %84 = phi [^scalar.header, f32 %80] [^while.body1, f32 %89];
    f32 %85 = phi [^scalar.header, f32 %79] [^while.body1, f32 %96];
    f32 %86 = phi [^scalar.header, f32 %78] [^while.body1, f32 %85];
    [270 * f32]* %87 = getelementptr &([270 * f32]* %20)[i32 %83];
    f32* %88 = getelementptr &([270 * f32]* %87)[i64 0][i32 %21];
    f32 %89 = load f32* %88;
    f32 %90 = fmul f32 %4, f32 %89;
    f32 %91 = fmul f32 %6, f32 %84;
    f32 %92 = fadd f32 %90, f32 %91;
    f32 %93 = fmul f32 %8, f32 %85;
    f32 %94 = fadd f32 %92, f32 %93;
    f32 %95 = fmul f32 %10, f32 %86;
    f32 %96 = fadd f32 %94, f32 %95;
    [270 * f32]* %97 = getelementptr &([270 * f32]* %18)[i32 %83];
    f32* %98 = getelementptr &([270 * f32]* %97)[i64 0][i32 %21];
    store f32* %98 with f32 %96;
    i32 %99 = add i32 %83, i32 1;
    i1 %100 = icmp sgt i32 %12, i32 %99;
    cbr i1 %100(prob = 0.75), ^while.body1, ^b2;
}
internal [25 * i8]* @cmmc_parallel_body_payload_3, align 8;
internal func @cmmc_parallel_body_4(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [9 * i8]* %2 = ptrcast [9 * i8]* @cmmc_parallel_body_payload_4 to [9 * i8]*;
    i32* %3 = ptradd [9 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i1 %5 = icmp sgt i32 %4, i32 3;
    i32 %6 = add i32 %4, i32 -3;
    i1* %7 = ptradd [9 * i8]* %2, i32 8;
    i1 %8 = load i1* %7;
    [512 * [270 * f32]]* %9 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %10 = getelementptr &([512 * [270 * f32]]* %9)[i64 0][i64 0];
    [512 * [270 * f32]]* %11 = ptrcast [512 * [270 * f32]]* @my_y1 to [512 * [270 * f32]]*;
    [270 * f32]* %12 = getelementptr &([512 * [270 * f32]]* %11)[i64 0][i64 0];
    [512 * [270 * f32]]* %13 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %14 = getelementptr &([512 * [270 * f32]]* %13)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %15 = phi [^b, i32 %0] [^b2, i32 %19];
    cbr i1 %8(prob = 0.984615), ^prebody, ^b2;
  ^prebody:
    [270 * f32]* %16 = getelementptr &([270 * f32]* %10)[i32 %15];
    [270 * f32]* %17 = getelementptr &([270 * f32]* %12)[i32 %15];
    [270 * f32]* %18 = getelementptr &([270 * f32]* %14)[i32 %15];
    cbr i1 %5(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %19 = add i32 %15, i32 1;
    i1 %20 = icmp sgt i32 %1, i32 %19;
    cbr i1 %20(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    i32 %21 = phi [^prebody, i32 0] [^while.body, i32 %46];
    f32* %22 = getelementptr &([270 * f32]* %17)[i64 0][i32 %21];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &([270 * f32]* %18)[i64 0][i32 %21];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    f32* %27 = getelementptr &([270 * f32]* %16)[i64 0][i32 %21];
    store f32* %27 with f32 %26;
    f32* %28 = getelementptr &(f32* %22)[i64 1];
    f32 %29 = load f32* %28;
    f32* %30 = getelementptr &(f32* %24)[i64 1];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &(f32* %27)[i64 1];
    store f32* %33 with f32 %32;
    f32* %34 = getelementptr &(f32* %22)[i64 2];
    f32 %35 = load f32* %34;
    f32* %36 = getelementptr &(f32* %24)[i64 2];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &(f32* %27)[i64 2];
    store f32* %39 with f32 %38;
    f32* %40 = getelementptr &(f32* %22)[i64 3];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &(f32* %24)[i64 3];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %27)[i64 3];
    store f32* %45 with f32 %44;
    i32 %46 = add i32 %21, i32 4;
    i1 %47 = icmp sgt i32 %6, i32 %46;
    cbr i1 %47(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    i32 %48 = phi [^prebody, i32 0] [^while.body, i32 %46];
    i1 %49 = icmp sgt i32 %4, i32 %48;
    cbr i1 %49(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %50 = phi [^scalar.header, i32 %48] [^while.body1, i32 %57];
    f32* %51 = getelementptr &([270 * f32]* %17)[i64 0][i32 %50];
    f32 %52 = load f32* %51;
    f32* %53 = getelementptr &([270 * f32]* %18)[i64 0][i32 %50];
    f32 %54 = load f32* %53;
    f32 %55 = fadd f32 %52, f32 %54;
    f32* %56 = getelementptr &([270 * f32]* %16)[i64 0][i32 %50];
    store f32* %56 with f32 %55;
    i32 %57 = add i32 %50, i32 1;
    i1 %58 = icmp sgt i32 %4, i32 %57;
    cbr i1 %58(prob = 0.75), ^while.body1, ^b2;
}
internal [9 * i8]* @cmmc_parallel_body_payload_4, align 8;
internal func @cmmc_parallel_body_5(i32 %0, i32 %1) -> void { NoRecurse ParallelBody AlignedParallelBody } {
  ^b:
    [25 * i8]* %2 = ptrcast [25 * i8]* @cmmc_parallel_body_payload_5 to [25 * i8]*;
    i32* %3 = ptradd [25 * i8]* %2, i32 0;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -3;
    i1 %6 = icmp sgt i32 %5, i32 -1;
    f32* %7 = ptradd [25 * i8]* %2, i32 4;
    f32 %8 = load f32* %7;
    f32* %9 = ptradd [25 * i8]* %2, i32 8;
    f32 %10 = load f32* %9;
    f32* %11 = ptradd [25 * i8]* %2, i32 12;
    f32 %12 = load f32* %11;
    f32* %13 = ptradd [25 * i8]* %2, i32 16;
    f32 %14 = load f32* %13;
    i1* %15 = ptradd [25 * i8]* %2, i32 24;
    i1 %16 = load i1* %15;
    [512 * [270 * f32]]* %17 = ptrcast [512 * [270 * f32]]* @my_y2 to [512 * [270 * f32]]*;
    [270 * f32]* %18 = getelementptr &([512 * [270 * f32]]* %17)[i64 0][i64 0];
    [512 * [270 * f32]]* %19 = ptrcast [512 * [270 * f32]]* @imgOut to [512 * [270 * f32]]*;
    [270 * f32]* %20 = getelementptr &([512 * [270 * f32]]* %19)[i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i32 %21 = phi [^b, i32 %0] [^b2, i32 %22];
    cbr i1 %16(prob = 0.984615), ^super.header, ^b2;
  ^super.header:
    cbr i1 %6(prob = 0.941176), ^while.body, ^scalar.header;
  ^b2:
    i32 %22 = add i32 %21, i32 1;
    i1 %23 = icmp sgt i32 %1, i32 %22;
    cbr i1 %23(prob = 0.984615), ^b1, ^b3;
  ^while.body:
    f32 %24 = phi [^super.header, f32 0] [^while.body, f32 %59];
    f32 %25 = phi [^super.header, f32 0] [^while.body, f32 %71];
    f32 %26 = phi [^super.header, f32 0] [^while.body, f32 %65];
    f32 %27 = phi [^super.header, f32 0] [^while.body, f32 %76];
    i32 %28 = phi [^super.header, i32 %4] [^while.body, i32 %77];
    f32 %29 = fmul f32 %8, f32 %27;
    f32 %30 = fmul f32 %10, f32 %26;
    f32 %31 = fadd f32 %29, f32 %30;
    f32 %32 = fmul f32 %12, f32 %25;
    f32 %33 = fadd f32 %31, f32 %32;
    f32 %34 = fmul f32 %14, f32 %24;
    f32 %35 = fadd f32 %33, f32 %34;
    [270 * f32]* %36 = getelementptr &([270 * f32]* %18)[i32 %28];
    f32* %37 = getelementptr &([270 * f32]* %36)[i64 0][i32 %21];
    store f32* %37 with f32 %35;
    f32 %38 = fmul f32 %12, f32 %35;
    [270 * f32]* %39 = getelementptr &([270 * f32]* %20)[i32 %28];
    f32* %40 = getelementptr &([270 * f32]* %39)[i64 0][i32 %21];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %8, f32 %41;
    f32 %43 = fmul f32 %10, f32 %27;
    f32 %44 = fadd f32 %42, f32 %43;
    f32 %45 = fadd f32 %44, f32 %38;
    f32 %46 = fmul f32 %14, f32 %25;
    f32 %47 = fadd f32 %45, f32 %46;
    [270 * f32]* %48 = getelementptr &([270 * f32]* %36)[i64 -1];
    f32* %49 = getelementptr &([270 * f32]* %48)[i64 0][i32 %21];
    store f32* %49 with f32 %47;
    f32 %50 = fmul f32 %12, f32 %47;
    [270 * f32]* %51 = getelementptr &([270 * f32]* %39)[i64 -1];
    f32* %52 = getelementptr &([270 * f32]* %51)[i64 0][i32 %21];
    f32 %53 = load f32* %52;
    f32 %54 = fmul f32 %8, f32 %53;
    f32 %55 = fmul f32 %10, f32 %41;
    f32 %56 = fadd f32 %54, f32 %55;
    f32 %57 = fadd f32 %56, f32 %50;
    f32 %58 = fmul f32 %14, f32 %35;
    f32 %59 = fadd f32 %57, f32 %58;
    [270 * f32]* %60 = getelementptr &([270 * f32]* %36)[i64 -2];
    f32* %61 = getelementptr &([270 * f32]* %60)[i64 0][i32 %21];
    store f32* %61 with f32 %59;
    f32 %62 = fmul f32 %12, f32 %59;
    [270 * f32]* %63 = getelementptr &([270 * f32]* %39)[i64 -2];
    f32* %64 = getelementptr &([270 * f32]* %63)[i64 0][i32 %21];
    f32 %65 = load f32* %64;
    f32 %66 = fmul f32 %8, f32 %65;
    f32 %67 = fmul f32 %10, f32 %53;
    f32 %68 = fadd f32 %66, f32 %67;
    f32 %69 = fadd f32 %68, f32 %62;
    f32 %70 = fmul f32 %14, f32 %47;
    f32 %71 = fadd f32 %69, f32 %70;
    [270 * f32]* %72 = getelementptr &([270 * f32]* %36)[i64 -3];
    f32* %73 = getelementptr &([270 * f32]* %72)[i64 0][i32 %21];
    store f32* %73 with f32 %71;
    [270 * f32]* %74 = getelementptr &([270 * f32]* %39)[i64 -3];
    f32* %75 = getelementptr &([270 * f32]* %74)[i64 0][i32 %21];
    f32 %76 = load f32* %75;
    i32 %77 = add i32 %28, i32 -4;
    i1 %78 = icmp sgt i32 %77, i32 2;
    cbr i1 %78(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.header:
    f32 %79 = phi [^super.header, f32 0] [^while.body, f32 %59];
    f32 %80 = phi [^super.header, f32 0] [^while.body, f32 %71];
    f32 %81 = phi [^super.header, f32 0] [^while.body, f32 %65];
    f32 %82 = phi [^super.header, f32 0] [^while.body, f32 %76];
    i32 %83 = phi [^super.header, i32 %4] [^while.body, i32 %77];
    i1 %84 = icmp sgt i32 %83, i32 -1;
    cbr i1 %84(prob = 0.75), ^while.body1, ^b2;
  ^b3:
    ret;
  ^while.body1 {scalar}:
    i32 %85 = phi [^scalar.header, i32 %83] [^while.body1, i32 %102];
    f32 %86 = phi [^scalar.header, f32 %82] [^while.body1, f32 %101];
    f32 %87 = phi [^scalar.header, f32 %81] [^while.body1, f32 %86];
    f32 %88 = phi [^scalar.header, f32 %80] [^while.body1, f32 %96];
    f32 %89 = phi [^scalar.header, f32 %79] [^while.body1, f32 %88];
    f32 %90 = fmul f32 %8, f32 %86;
    f32 %91 = fmul f32 %10, f32 %87;
    f32 %92 = fadd f32 %90, f32 %91;
    f32 %93 = fmul f32 %12, f32 %88;
    f32 %94 = fadd f32 %92, f32 %93;
    f32 %95 = fmul f32 %14, f32 %89;
    f32 %96 = fadd f32 %94, f32 %95;
    [270 * f32]* %97 = getelementptr &([270 * f32]* %18)[i32 %85];
    f32* %98 = getelementptr &([270 * f32]* %97)[i64 0][i32 %21];
    store f32* %98 with f32 %96;
    [270 * f32]* %99 = getelementptr &([270 * f32]* %20)[i32 %85];
    f32* %100 = getelementptr &([270 * f32]* %99)[i64 0][i32 %21];
    f32 %101 = load f32* %100;
    i32 %102 = add i32 %85, i32 -1;
    i1 %103 = icmp sgt i32 %102, i32 -1;
    cbr i1 %103(prob = 0.75), ^while.body1, ^b2;
}
internal [25 * i8]* @cmmc_parallel_body_payload_5, align 8;
