internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @N { ReadOnly } = -1;
internal [6 * i32]* @arr = [1, 2, 33, 4, 5, 6];
func @main() -> i32 { Entry } {
^entry:
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 6;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %sum;
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([6 * i32]* @arr)[i64 0][i64 %6];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %4, i32 %8;
    store i32* %sum with i32 %9;
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    ubr ^while.header;
^b:
    i32 %12 = load i32* %sum;
    ret i32 %12;
}
