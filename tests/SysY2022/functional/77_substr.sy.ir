internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32** %arr1 = alloc i32*;
    i32* %len1 = alloc i32;
    i32** %arr2 = alloc i32*;
    i32* %len2 = alloc i32;
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    [16 * i32]* %temp = alloc [16 * i32];
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %1 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %2 with i32 8;
    i32* %3 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %4 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    i32* %7 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %8 with i32 4;
    i32* %9 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    i32* %10 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %11 with i32 1;
    i32* %12 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    i32* %13 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %14 with i32 2;
    i32* %15 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    i32* %17 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    i32* %20 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    i32* %23 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    store i32* %23 with i32 1;
    i32* %24 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    i32* %26 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %26 with i32 9;
    i32* %27 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    i32* %28 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    i32* %29 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %29 with i32 3;
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    i32* %31 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    i32* %32 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %32 with i32 4;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    i32* %34 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %35 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %35 with i32 8;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    i32* %37 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    i32* %38 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %38 with i32 3;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    i32* %40 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %40 with i32 7;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    i32* %42 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %42 with i32 0;
    store i32* %1 with i32 3;
    store i32* %4 with i32 9;
    store i32* %7 with i32 7;
    store i32* %10 with i32 1;
    store i32* %13 with i32 4;
    store i32* %16 with i32 2;
    store i32* %19 with i32 4;
    store i32* %22 with i32 3;
    store i32* %25 with i32 6;
    store i32* %28 with i32 8;
    store i32* %31 with i32 0;
    store i32* %34 with i32 1;
    store i32* %37 with i32 5;
    store i32* %6 with i32 0;
    store i32* %9 with i32 0;
    store i32* %12 with i32 0;
    store i32* %15 with i32 0;
    store i32* %18 with i32 0;
    store i32* %21 with i32 0;
    store i32* %24 with i32 0;
    store i32* %27 with i32 0;
    store i32* %30 with i32 0;
    store i32* %33 with i32 0;
    store i32* %36 with i32 0;
    store i32* %39 with i32 0;
    store i32* %41 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %0 with i32 8;
    store i32* %3 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %44 = phi [^entry, i32 2] [^b, i32 %45];
    i32 %45 = add i32 %44, i32 1;
    i1 %46 = scmp lt i32 %45, i32 15;
    i32* %47 = getelementptr &(i32* %2)[i32 %44];
    i32* %48 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %44];
    i32* %49 = getelementptr &(i32* %48)[i64 -2];
    i32 %50 = load i32* %49;
    i32 %51 = load i32* %47;
    i32 %52 = add i32 %50, i32 %51;
    i32* %53 = getelementptr &(i32* %48)[i64 -1];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %52, i32 %54;
    i1 %56 = scmp gt i32 %52, i32 %54;
    i1 %57 = or i1 %55, i1 %56;
    cbr i1 %57(prob = 0.75), ^b, ^if.else;
^if.else:
    ubr ^b;
^b:
    i32 %58 = phi [^while.body, i32 %52] [^if.else, i32 %54];
    store i32* %48 with i32 %58;
    cbr i1 %46(prob = 0.92), ^while.body, ^b1;
^b1:
    i32 %59 = load i32* %41;
    i32* %60 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %61 = ptrcast i32* %60 to i8*;
    call (i32) -> void @putint(i32 %59);
    call (i32) -> void @putch(i32 10);
    store i32** %arr1 with i32* %2;
    store i32* %len1 with i32 15;
    store i32** %arr2 with i32* %1;
    store i32* %len2 with i32 13;
    i8* %62 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %61, i32 0, i64 1024);
    i32 %63 = load i32* %len2;
    i32* %64 = load i32** %arr2;
    i32 %65 = load i32* %len1;
    i32* %66 = load i32** %arr1;
    i1 %67 = scmp gt i32 %63, i32 0;
    i1 %68 = scmp gt i32 %65, i32 0;
    cbr i1 %68(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %69 = phi [^b1, i32 1] [^b3, i32 %83];
    i32 %70 = add i32 %69, i32 -1;
    i32* %71 = getelementptr &(i32* %66)[i32 %70];
    [16 * i32]* %72 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %69];
    [16 * i32]* %73 = getelementptr &([16 * i32]* %72)[i64 -1];
    cbr i1 %67(prob = 0.97), ^while.body2, ^b3;
^b2:
    [16 * i32]* %74 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %65];
    i32* %75 = getelementptr &([16 * i32]* %74)[i64 0][i32 %63];
    i32 %76 = load i32* %75;
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body2:
    i32 %77 = phi [^while.body1, i32 1] [^b5, i32 %98];
    i32 %78 = load i32* %71;
    i32 %79 = add i32 %77, i32 -1;
    i32* %80 = getelementptr &(i32* %64)[i32 %79];
    i32 %81 = load i32* %80;
    i1 %82 = scmp eq i32 %78, i32 %81;
    cbr i1 %82(prob = 0.5), ^if.then, ^if.else1;
^b3:
    i32 %83 = add i32 %69, i32 1;
    i1 %84 = scmp le i32 %83, i32 %65;
    cbr i1 %84(prob = 0.97), ^while.body1, ^b2;
^if.then:
    i32* %85 = getelementptr &([16 * i32]* %72)[i64 0][i32 %77];
    i32* %86 = getelementptr &([16 * i32]* %73)[i64 0][i32 %79];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %87, i32 1;
    store i32* %85 with i32 %88;
    ubr ^b5;
^if.else1:
    i32* %89 = getelementptr &([16 * i32]* %72)[i64 0][i32 %77];
    i32* %90 = getelementptr &(i32* %89)[i64 -1];
    i32* %91 = getelementptr &([16 * i32]* %73)[i64 0][i32 %77];
    i32 %92 = load i32* %91;
    i32 %93 = load i32* %90;
    i1 %94 = scmp eq i32 %92, i32 %93;
    i1 %95 = scmp gt i32 %92, i32 %93;
    i1 %96 = or i1 %94, i1 %95;
    cbr i1 %96(prob = 0.75), ^b4, ^if.else2;
^b4:
    i32 %97 = phi [^if.else1, i32 %92] [^if.else2, i32 %93];
    store i32* %89 with i32 %97;
    ubr ^b5;
^b5:
    i32 %98 = add i32 %77, i32 1;
    i1 %99 = scmp le i32 %98, i32 %63;
    cbr i1 %99(prob = 0.97), ^while.body2, ^b3;
^if.else2:
    ubr ^b4;
}
