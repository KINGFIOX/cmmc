internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32** %arr1 = alloc i32*;
    i32* %len1 = alloc i32;
    i32** %arr2 = alloc i32*;
    i32* %len2 = alloc i32;
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    [16 * i32]* %temp = alloc [16 * i32];
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %26 with i32 0;
    store i32* %25 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    i32* %28 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %29 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %28 with i32 8;
    store i32* %29 with i32 8;
    ubr ^while.header;
^while.header:
    i32 %44 = phi [^while.body1, i32 %64] [^entry, i32 2];
    i1 %45 = scmp lt i32 %44, i32 15;
    cbr i1 %45(prob = 0.97), ^while.body, ^b;
^b:
    i32 %46 = load i32* %42;
    call (i32) -> void @putint(i32 %46);
    call (i32) -> void @putch(i32 10);
    store i32** %arr1 with i32* %0;
    store i32* %len1 with i32 15;
    store i32** %arr2 with i32* %15;
    store i32* %len2 with i32 13;
    i32* %47 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %48 = ptrcast i32* %47 to i8*;
    i8* %49 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %48, i32 0, i64 1024);
    i32 %50 = load i32* %len2;
    i32* %51 = load i32** %arr2;
    i32 %52 = load i32* %len1;
    i32* %53 = load i32** %arr1;
    ubr ^while.header1;
^while.body:
    i32* %54 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %44];
    i32* %55 = getelementptr &(i32* %54)[i64 -2];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %0)[i32 %44];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %54)[i64 -1];
    i32 %61 = load i32* %60;
    i1 %62 = scmp eq i32 %59, i32 %61;
    cbr i1 %62(prob = 0.5), ^while.body1, ^if.else;
^while.body1:
    i32 %63 = phi [^while.body, i32 %59] [^if.else, i32 %61] [^if.then, i32 %59];
    store i32* %54 with i32 %63;
    i32 %64 = add i32 %44, i32 1;
    ubr ^while.header;
^if.else:
    i1 %65 = scmp gt i32 %59, i32 %61;
    cbr i1 %65(prob = 0.5), ^if.then, ^while.body1;
^while.header1:
    i32 %66 = phi [^b2, i32 %77] [^b, i32 1];
    i1 %67 = scmp le i32 %66, i32 %52;
    i32 %68 = add i32 %66, i32 -1;
    i32* %69 = getelementptr &(i32* %53)[i32 %68];
    [16 * i32]* %70 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %66];
    [16 * i32]* %71 = getelementptr &([16 * i32]* %70)[i64 -1];
    cbr i1 %67(prob = 0.97), ^while.header2, ^b1;
^if.then:
    ubr ^while.body1;
^while.header2:
    i32 %72 = phi [^while.header1, i32 1] [^b3, i32 %93];
    i1 %73 = scmp le i32 %72, i32 %50;
    cbr i1 %73(prob = 0.97), ^while.body2, ^b2;
^b1:
    [16 * i32]* %74 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %52];
    i32* %75 = getelementptr &([16 * i32]* %74)[i64 0][i32 %50];
    i32 %76 = load i32* %75;
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b2:
    i32 %77 = add i32 %66, i32 1;
    ubr ^while.header1;
^while.body2:
    i32 %78 = load i32* %69;
    i32 %79 = add i32 %72, i32 -1;
    i32* %80 = getelementptr &(i32* %51)[i32 %79];
    i32 %81 = load i32* %80;
    i1 %82 = scmp eq i32 %78, i32 %81;
    cbr i1 %82(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32* %83 = getelementptr &([16 * i32]* %70)[i64 0][i32 %72];
    i32* %84 = getelementptr &([16 * i32]* %71)[i64 0][i32 %79];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %85, i32 1;
    store i32* %83 with i32 %86;
    ubr ^b3;
^if.else1:
    i32* %87 = getelementptr &([16 * i32]* %70)[i64 0][i32 %72];
    i32* %88 = getelementptr &([16 * i32]* %71)[i64 0][i32 %72];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %87)[i64 -1];
    i32 %91 = load i32* %90;
    i1 %92 = scmp eq i32 %89, i32 %91;
    cbr i1 %92(prob = 0.5), ^if.else2, ^if.else3;
^b3:
    i32 %93 = add i32 %72, i32 1;
    ubr ^while.header2;
^if.else2:
    i32 %94 = phi [^if.else1, i32 %89] [^if.else3, i32 %91] [^if.then2, i32 %89];
    store i32* %87 with i32 %94;
    ubr ^b3;
^if.else3:
    i1 %95 = scmp gt i32 %89, i32 %91;
    cbr i1 %95(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    ubr ^if.else2;
}
