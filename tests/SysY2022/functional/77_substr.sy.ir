internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    [16 * i32]* %temp = alloc [16 * i32];
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %26 with i32 0;
    store i32* %25 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    i32* %28 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %29 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %28 with i32 8;
    store i32* %29 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %44 = phi [^entry, i32 2] [^b, i32 %55];
    i32* %45 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %44];
    i32* %46 = getelementptr &(i32* %45)[i64 -2];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %0)[i32 %44];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32* %51 = getelementptr &(i32* %45)[i64 -1];
    i32 %52 = load i32* %51;
    i1 %53 = scmp eq i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^b, ^if.else;
^b:
    i32 %54 = phi [^while.body, i32 %50] [^if.else, i32 %50] [^if.else1, i32 %52];
    store i32* %45 with i32 %54;
    i32 %55 = add i32 %44, i32 1;
    i1 %56 = scmp lt i32 %55, i32 15;
    cbr i1 %56(prob = 0.92), ^while.body, ^b1;
^if.else:
    i1 %57 = scmp gt i32 %50, i32 %52;
    cbr i1 %57(prob = 0.5), ^b, ^if.else1;
^b1:
    i32 %58 = load i32* %42;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    i32* %59 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    ubr ^super.header;
^if.else1:
    ubr ^b;
^super.header:
    i64 %60 = phi [^b1, i64 0] [^b2, i64 %61];
    i64 %61 = add i64 %60, i64 16;
    i1 %62 = scmp lt i64 %61, i64 256;
    cbr i1 %62(prob = 0.67), ^b2, ^super.header1;
^b2:
    i32* %63 = getelementptr &(i32* %59)[i64 %60];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %63)[i64 1];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %63)[i64 2];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %63)[i64 3];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %63)[i64 4];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %63)[i64 5];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %63)[i64 6];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %63)[i64 7];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %63)[i64 8];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %63)[i64 9];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %63)[i64 10];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %63)[i64 11];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %63)[i64 12];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %63)[i64 13];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %63)[i64 14];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %63)[i64 15];
    store i32* %78 with i32 0;
    ubr ^super.header;
^super.header1:
    i64 %79 = phi [^super.header, i64 %60] [^b3, i64 %80];
    i64 %80 = add i64 %79, i64 16;
    i1 %81 = scmp lt i64 %80, i64 256;
    cbr i1 %81(prob = 0.67), ^b3, ^super.header2;
^b3:
    i32* %82 = getelementptr &(i32* %59)[i64 %79];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %82)[i64 1];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %82)[i64 2];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %82)[i64 3];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %82)[i64 4];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %82)[i64 5];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %82)[i64 6];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %82)[i64 7];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %82)[i64 8];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %82)[i64 9];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %82)[i64 10];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %82)[i64 11];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %82)[i64 12];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %82)[i64 13];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %82)[i64 14];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %82)[i64 15];
    store i32* %97 with i32 0;
    ubr ^super.header1;
^super.header2:
    i64 %98 = phi [^super.header1, i64 %79] [^b4, i64 %99];
    i64 %99 = add i64 %98, i64 16;
    i1 %100 = scmp lt i64 %99, i64 256;
    cbr i1 %100(prob = 0.67), ^b4, ^super.header3;
^b4:
    i32* %101 = getelementptr &(i32* %59)[i64 %98];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %101)[i64 1];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %101)[i64 2];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %101)[i64 3];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %101)[i64 4];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %101)[i64 5];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %101)[i64 6];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %101)[i64 7];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %101)[i64 8];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %101)[i64 9];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %101)[i64 10];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %101)[i64 11];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %101)[i64 12];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %101)[i64 13];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %101)[i64 14];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %101)[i64 15];
    store i32* %116 with i32 0;
    ubr ^super.header2;
^super.header3:
    i64 %117 = phi [^super.header2, i64 %98] [^b5, i64 %118];
    i64 %118 = add i64 %117, i64 16;
    i1 %119 = scmp lt i64 %118, i64 256;
    cbr i1 %119(prob = 0.67), ^b5, ^b6;
^b5:
    i32* %120 = getelementptr &(i32* %59)[i64 %117];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %120)[i64 1];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %120)[i64 2];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %120)[i64 3];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %120)[i64 4];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %120)[i64 5];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %120)[i64 6];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %120)[i64 7];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %120)[i64 8];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %120)[i64 9];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %120)[i64 10];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %120)[i64 11];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %120)[i64 12];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %120)[i64 13];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %120)[i64 14];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %120)[i64 15];
    store i32* %135 with i32 0;
    ubr ^super.header3;
^b6:
    i64 %136 = phi [^super.header3, i64 %117] [^b6, i64 %138];
    i32* %137 = getelementptr &(i32* %59)[i64 %136];
    store i32* %137 with i32 0;
    i64 %138 = add i64 %136, i64 1;
    i1 %139 = scmp lt i64 %138, i64 256;
    cbr i1 %139(prob = 0.97), ^b6, ^while.header;
^while.header:
    i32 %140 = phi [^b6, i32 1] [^b8, i32 %150];
    i1 %141 = scmp lt i32 %140, i32 16;
    i32 %142 = add i32 %140, i32 -1;
    i32* %143 = getelementptr &(i32* %0)[i32 %142];
    [16 * i32]* %144 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %140];
    [16 * i32]* %145 = getelementptr &([16 * i32]* %144)[i64 -1];
    cbr i1 %141(prob = 0.97), ^while.header1, ^b7;
^while.header1:
    i32 %146 = phi [^while.header, i32 1] [^b9, i32 %166];
    i1 %147 = scmp lt i32 %146, i32 14;
    cbr i1 %147(prob = 0.97), ^while.body1, ^b8;
^b7:
    i32* %148 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 15][i64 13];
    i32 %149 = load i32* %148;
    call (i32) -> void @putint(i32 %149);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b8:
    i32 %150 = add i32 %140, i32 1;
    ubr ^while.header;
^while.body1:
    i32 %151 = load i32* %143;
    i32 %152 = add i32 %146, i32 -1;
    i32* %153 = getelementptr &(i32* %15)[i32 %152];
    i32 %154 = load i32* %153;
    i1 %155 = scmp eq i32 %151, i32 %154;
    cbr i1 %155(prob = 0.5), ^if.then, ^if.else2;
^if.then:
    i32* %156 = getelementptr &([16 * i32]* %144)[i64 0][i32 %146];
    i32* %157 = getelementptr &([16 * i32]* %145)[i64 0][i32 %152];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %158, i32 1;
    store i32* %156 with i32 %159;
    ubr ^b9;
^if.else2:
    i32* %160 = getelementptr &([16 * i32]* %144)[i64 0][i32 %146];
    i32* %161 = getelementptr &([16 * i32]* %145)[i64 0][i32 %146];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %160)[i64 -1];
    i32 %164 = load i32* %163;
    i1 %165 = scmp eq i32 %162, i32 %164;
    cbr i1 %165(prob = 0.5), ^b10, ^if.else3;
^b9:
    i32 %166 = add i32 %146, i32 1;
    ubr ^while.header1;
^b10:
    i32 %167 = phi [^if.else2, i32 %162] [^if.else3, i32 %162] [^if.else4, i32 %164];
    store i32* %160 with i32 %167;
    ubr ^b9;
^if.else3:
    i1 %168 = scmp gt i32 %162, i32 %164;
    cbr i1 %168(prob = 0.5), ^b10, ^if.else4;
^if.else4:
    ubr ^b10;
}
