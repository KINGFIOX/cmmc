internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    store i32* %7 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    call (i32) -> void @putint(i32 43);
    call (i32) -> void @putch(i32 10);
    [16 * [16 * i32]]* %28 = ptrcast [16 * [16 * i32]]* @p to [16 * [16 * i32]]*;
    i32* %29 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i64 0][i64 0];
    ubr ^b;
  ^b:
    i64 %30 = phi [^entry, i64 0] [^b, i64 %47];
    i32* %31 = getelementptr &(i32* %29)[i64 %30];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %31)[i64 1];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %31)[i64 2];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %31)[i64 3];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %31)[i64 4];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %31)[i64 5];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %31)[i64 6];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %31)[i64 7];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %31)[i64 8];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %31)[i64 9];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %31)[i64 10];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %31)[i64 11];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %31)[i64 12];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %31)[i64 13];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %31)[i64 14];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %31)[i64 15];
    store i32* %46 with i32 0;
    i64 %47 = add i64 %30, i64 16;
    i1 %48 = icmp slt i64 %47, i64 256;
    cbr i1 %48(prob = 0.94), ^b, ^while.header;
  ^while.header:
    i32 %49 = phi [^b, i32 1] [^b2, i32 %59];
    i32 %50 = add i32 %49, i32 -1;
    i32* %51 = getelementptr &(i32* %0)[i32 %50];
    [16 * i32]* %52 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i32 %49];
    [16 * i32]* %53 = getelementptr &([16 * i32]* %52)[i64 -1];
    i1 %54 = icmp slt i32 %49, i32 16;
    cbr i1 %54(prob = 0.97), ^while.header1, ^b1;
  ^while.header1:
    i32 %55 = phi [^while.header, i32 1] [^if.then, i32 %69] [^if.else, i32 %76];
    i1 %56 = icmp slt i32 %55, i32 14;
    cbr i1 %56(prob = 0.97), ^while.body, ^b2;
  ^b1:
    i32* %57 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i64 15][i64 13];
    i32 %58 = load i32* %57;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b2:
    i32 %59 = add i32 %49, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %60 = add i32 %55, i32 -1;
    i32* %61 = getelementptr &(i32* %15)[i32 %60];
    i32 %62 = load i32* %51;
    i32 %63 = load i32* %61;
    i1 %64 = icmp eq i32 %62, i32 %63;
    cbr i1 %64(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %65 = getelementptr &([16 * i32]* %53)[i64 0][i32 %60];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %66, i32 1;
    i32* %68 = getelementptr &([16 * i32]* %52)[i64 0][i32 %55];
    store i32* %68 with i32 %67;
    i32 %69 = add i32 %55, i32 1;
    ubr ^while.header1;
  ^if.else:
    i32* %70 = getelementptr &([16 * i32]* %53)[i64 0][i32 %55];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &([16 * i32]* %52)[i64 0][i32 %55];
    i32* %73 = getelementptr &(i32* %72)[i64 -1];
    i32 %74 = load i32* %73;
    i32 %75 = smax i32 %71, i32 %74;
    store i32* %72 with i32 %75;
    i32 %76 = add i32 %55, i32 1;
    ubr ^while.header1;
}
internal [16 * [16 * i32]]* @p;
