internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @MAX(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %b1;
    i1 %2 = scmp eq i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %5 = load i32* %a1;
    i32 %6 = load i32* %b1;
    i1 %7 = scmp gt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    i32 %10 = load i32* %a1;
    ret i32 %10;
^if.then1:
    i32 %11 = load i32* %a1;
    ret i32 %11;
^if.else1:
    i32 %12 = load i32* %b1;
    ret i32 %12;
^b2:
    unreachable;
^b3:
    ubr ^b2;
}
internal func @max_sum_nonadjacent(i32* %arr, i32 %n) -> i32 {
^entry:
    i32* %i = alloc i32;
    [16 * i32]* %temp = alloc [16 * i32];
    i32* %n1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %n1 with i32 %n;
    i32* %0 = getelementptr &([16 * i32]* %temp)[i64 1][i64 0];
    i32* %1 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %18 = load i32** %arr1;
    i32* %19 = getelementptr &(i32* %18)[i64 0];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    i32* %21 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %22 = load i32** %arr1;
    i32* %23 = getelementptr &(i32* %22)[i64 0];
    i32 %24 = load i32* %23;
    i32* %25 = load i32** %arr1;
    i32* %26 = getelementptr &(i32* %25)[i64 1];
    i32 %27 = load i32* %26;
    i32 %28 = call (i32, i32) -> i32 @MAX(i32 %24, i32 %27);
    store i32* %21 with i32 %28;
    store i32* %i with i32 2;
    ubr ^while.header;
^while.header:
    i32 %29 = load i32* %i;
    i32 %30 = load i32* %n1;
    i1 %31 = scmp lt i32 %29, i32 %30;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %34 = load i32* %i;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 %35];
    i32 %37 = load i32* %i;
    i32 %38 = sub i32 %37, i32 2;
    i64 %39 = sext i32 %38 to i64;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 %39];
    i32 %41 = load i32* %40;
    i32 %42 = load i32* %i;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = load i32** %arr1;
    i32* %45 = getelementptr &(i32* %44)[i64 %43];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %41, i32 %46;
    i32 %48 = load i32* %i;
    i32 %49 = sub i32 %48, i32 1;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([16 * i32]* %temp)[i64 0][i64 %50];
    i32 %52 = load i32* %51;
    i32 %53 = call (i32, i32) -> i32 @MAX(i32 %47, i32 %52);
    store i32* %36 with i32 %53;
    i32 %54 = load i32* %i;
    i32 %55 = add i32 %54, i32 1;
    store i32* %i with i32 %55;
    ubr ^while.header;
^b:
    i32 %56 = load i32* %n1;
    i32 %57 = sub i32 %56, i32 1;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = getelementptr &([16 * i32]* %temp)[i64 0][i64 %58];
    i32 %60 = load i32* %59;
    ret i32 %60;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal func @longest_common_subseq(i32* %arr1, i32 %len1, i32* %arr2, i32 %len2) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    i32* %len21 = alloc i32;
    i32** %arr21 = alloc i32*;
    i32* %len11 = alloc i32;
    i32** %arr11 = alloc i32*;
    store i32** %arr11 with i32* %arr1;
    store i32* %len11 with i32 %len1;
    store i32** %arr21 with i32* %arr2;
    store i32* %len21 with i32 %len2;
    i32* %0 = getelementptr &([16 * [16 * i32]]* %p)[i64 1][i64 0][i64 0];
    i32* %1 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %2 = ptrcast i32* %1 to i8*;
    i8* %3 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %2, i32 0, i64 1024);
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %i;
    i32 %5 = load i32* %len11;
    i1 %6 = scmp le i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 1;
    ubr ^while.header1;
^b:
    i32 %9 = load i32* %len11;
    i64 %10 = sext i32 %9 to i64;
    [16 * i32]* %11 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %10];
    i32 %12 = load i32* %len21;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([16 * i32]* %11)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    ret i32 %15;
^while.header1:
    i32 %16 = load i32* %j;
    i32 %17 = load i32* %len21;
    i1 %18 = scmp le i32 %16, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header;
^while.body1:
    i32 %23 = load i32* %i;
    i32 %24 = sub i32 %23, i32 1;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = load i32** %arr11;
    i32* %27 = getelementptr &(i32* %26)[i64 %25];
    i32 %28 = load i32* %27;
    i32 %29 = load i32* %j;
    i32 %30 = sub i32 %29, i32 1;
    i64 %31 = sext i32 %30 to i64;
    i32* %32 = load i32** %arr21;
    i32* %33 = getelementptr &(i32* %32)[i64 %31];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %28, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %38 = load i32* %i;
    i64 %39 = sext i32 %38 to i64;
    [16 * i32]* %40 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %39];
    i32 %41 = load i32* %j;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([16 * i32]* %40)[i64 0][i64 %42];
    i32 %44 = load i32* %i;
    i32 %45 = sub i32 %44, i32 1;
    i64 %46 = sext i32 %45 to i64;
    [16 * i32]* %47 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %46];
    i32 %48 = load i32* %j;
    i32 %49 = sub i32 %48, i32 1;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([16 * i32]* %47)[i64 0][i64 %50];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %52, i32 1;
    store i32* %43 with i32 %53;
    ubr ^b2;
^if.else:
    i32 %54 = load i32* %i;
    i64 %55 = sext i32 %54 to i64;
    [16 * i32]* %56 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %55];
    i32 %57 = load i32* %j;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = getelementptr &([16 * i32]* %56)[i64 0][i64 %58];
    i32 %60 = load i32* %i;
    i32 %61 = sub i32 %60, i32 1;
    i64 %62 = sext i32 %61 to i64;
    [16 * i32]* %63 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %62];
    i32 %64 = load i32* %j;
    i64 %65 = sext i32 %64 to i64;
    i32* %66 = getelementptr &([16 * i32]* %63)[i64 0][i64 %65];
    i32 %67 = load i32* %66;
    i32 %68 = load i32* %i;
    i64 %69 = sext i32 %68 to i64;
    [16 * i32]* %70 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 %69];
    i32 %71 = load i32* %j;
    i32 %72 = sub i32 %71, i32 1;
    i64 %73 = sext i32 %72 to i64;
    i32* %74 = getelementptr &([16 * i32]* %70)[i64 0][i64 %73];
    i32 %75 = load i32* %74;
    i32 %76 = call (i32, i32) -> i32 @MAX(i32 %67, i32 %75);
    store i32* %59 with i32 %76;
    ubr ^b2;
^b2:
    i32 %77 = load i32* %j;
    i32 %78 = add i32 %77, i32 1;
    store i32* %j with i32 %78;
    ubr ^while.header1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %Bn = alloc i32;
    i32* %An = alloc i32;
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 1][i64 0];
    i32* %15 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %16 with i32 3;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %17 with i32 9;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %18 with i32 7;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %19 with i32 1;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %20 with i32 4;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %21 with i32 2;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %22 with i32 4;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %23 with i32 3;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %24 with i32 6;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %25 with i32 8;
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %27 with i32 0;
    store i32* %26 with i32 1;
    i32* %28 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %28 with i32 5;
    i32* %29 = getelementptr &([13 * i32]* %B)[i64 1][i64 0];
    store i32* %An with i32 0;
    store i32* %Bn with i32 0;
    i32* %30 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    i32 %31 = call (i32*, i32) -> i32 @max_sum_nonadjacent(i32* %30, i32 15);
    call (i32) -> void @putint(i32 %31);
    call (i32) -> void @putch(i32 10);
    i32* %32 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    i32* %33 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    i32 %34 = call (i32*, i32, i32*, i32) -> i32 @longest_common_subseq(i32* %32, i32 15, i32* %33, i32 13);
    call (i32) -> void @putint(i32 %34);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
