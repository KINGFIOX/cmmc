internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32** %arr1 = alloc i32*;
    i32* %len1 = alloc i32;
    i32** %arr2 = alloc i32*;
    i32* %len2 = alloc i32;
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    [16 * i32]* %temp = alloc [16 * i32];
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %26 with i32 0;
    store i32* %25 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    i32* %28 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %29 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %28 with i32 8;
    store i32* %29 with i32 8;
    ubr ^while.header;
^while.header:
    i32 %44 = phi [^while.body1, i32 %68] [^entry, i32 2];
    i32 %45 = phi [^while.body1, i32 %45] [^entry, i32 15];
    i32* %46 = phi [^while.body1, i32* %46] [^entry, i32* %0];
    i1 %47 = scmp lt i32 %44, i32 %45;
    cbr i1 %47(prob = 0.97), ^while.body, ^b;
^b:
    i32 %48 = add i32 %45, i32 -1;
    i32* %49 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    call (i32) -> void @putint(i32 %50);
    call (i32) -> void @putch(i32 10);
    store i32** %arr1 with i32* %0;
    store i32* %len1 with i32 15;
    store i32** %arr2 with i32* %15;
    store i32* %len2 with i32 13;
    i32* %51 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %52 = ptrcast i32* %51 to i8*;
    i8* %53 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %52, i32 0, i64 1024);
    i32 %54 = load i32* %len2;
    i32* %55 = load i32** %arr2;
    i32 %56 = load i32* %len1;
    i32* %57 = load i32** %arr1;
    ubr ^while.header1;
^while.body:
    i32* %58 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %44];
    i32* %59 = getelementptr &(i32* %58)[i64 -2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %46)[i32 %44];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &(i32* %58)[i64 -1];
    i32 %65 = load i32* %64;
    i1 %66 = scmp eq i32 %63, i32 %65;
    cbr i1 %66(prob = 0.5), ^while.body1, ^if.else;
^while.body1:
    i32 %67 = phi [^while.body, i32 %63] [^if.else, i32 %65] [^if.then, i32 %63];
    store i32* %58 with i32 %67;
    i32 %68 = add i32 %44, i32 1;
    ubr ^while.header;
^if.else:
    i1 %69 = scmp gt i32 %63, i32 %65;
    cbr i1 %69(prob = 0.5), ^if.then, ^while.body1;
^while.header1:
    i32 %70 = phi [^b2, i32 %86] [^b, i32 1];
    i32 %71 = phi [^b2, i32 %78] [^b, i32 %54];
    i32* %72 = phi [^b2, i32* %79] [^b, i32* %55];
    i32 %73 = phi [^b2, i32 %80] [^b, i32 %56];
    i32* %74 = phi [^b2, i32* %81] [^b, i32* %57];
    i1 %75 = scmp le i32 %70, i32 %73;
    cbr i1 %75(prob = 0.97), ^while.header2, ^b1;
^if.then:
    ubr ^while.body1;
^while.header2:
    i32 %76 = phi [^while.header1, i32 1] [^b3, i32 %108];
    i32 %77 = phi [^while.header1, i32 %70] [^b3, i32 %77];
    i32 %78 = phi [^while.header1, i32 %71] [^b3, i32 %78];
    i32* %79 = phi [^while.header1, i32* %72] [^b3, i32* %79];
    i32 %80 = phi [^while.header1, i32 %73] [^b3, i32 %80];
    i32* %81 = phi [^while.header1, i32* %74] [^b3, i32* %81];
    i1 %82 = scmp le i32 %76, i32 %78;
    cbr i1 %82(prob = 0.97), ^while.body2, ^b2;
^b1:
    [16 * i32]* %83 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %73];
    i32* %84 = getelementptr &([16 * i32]* %83)[i64 0][i32 %71];
    i32 %85 = load i32* %84;
    call (i32) -> void @putint(i32 %85);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b2:
    i32 %86 = add i32 %77, i32 1;
    ubr ^while.header1;
^while.body2:
    i32 %87 = add i32 %77, i32 -1;
    i32* %88 = getelementptr &(i32* %81)[i32 %87];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %76, i32 -1;
    i32* %91 = getelementptr &(i32* %79)[i32 %90];
    i32 %92 = load i32* %91;
    i1 %93 = scmp eq i32 %89, i32 %92;
    cbr i1 %93(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    [16 * i32]* %94 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %77];
    i32* %95 = getelementptr &([16 * i32]* %94)[i64 0][i32 %76];
    [16 * i32]* %96 = getelementptr &([16 * i32]* %94)[i64 -1];
    i32* %97 = getelementptr &([16 * i32]* %96)[i64 0][i32 %90];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %98, i32 1;
    store i32* %95 with i32 %99;
    ubr ^b3;
^if.else1:
    [16 * i32]* %100 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %77];
    i32* %101 = getelementptr &([16 * i32]* %100)[i64 0][i32 %76];
    [16 * i32]* %102 = getelementptr &([16 * i32]* %100)[i64 -1];
    i32* %103 = getelementptr &([16 * i32]* %102)[i64 0][i32 %76];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %101)[i64 -1];
    i32 %106 = load i32* %105;
    i1 %107 = scmp eq i32 %104, i32 %106;
    cbr i1 %107(prob = 0.5), ^if.else2, ^if.else3;
^b3:
    i32 %108 = add i32 %76, i32 1;
    ubr ^while.header2;
^if.else2:
    i32 %109 = phi [^if.else1, i32 %104] [^if.else3, i32 %106] [^if.then2, i32 %104];
    store i32* %101 with i32 %109;
    ubr ^b3;
^if.else3:
    i1 %110 = scmp gt i32 %104, i32 %106;
    cbr i1 %110(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    ubr ^if.else2;
}
