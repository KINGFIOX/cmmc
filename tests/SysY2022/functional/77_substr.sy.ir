internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [13 * i32]* %B = alloc [13 * i32], align 8;
    [15 * i32]* %A = alloc [15 * i32], align 8;
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    store i32* %7 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    store i32* %26 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    call (i32) -> void @putint(i32 43);
    call (i32) -> void @putch(i32 10);
    [16 * [16 * i32]]* %28 = ptrcast [16 * [16 * i32]]* @p to [16 * [16 * i32]]*;
    i32* %29 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i64 0][i64 0];
    ubr ^b;
  ^b:
    i64 %30 = phi [^entry, i64 0] [^b, i64 %95];
    i32* %31 = getelementptr &(i32* %29)[i64 %30];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %31)[i64 1];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %31)[i64 2];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %31)[i64 3];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %31)[i64 4];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %31)[i64 5];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %31)[i64 6];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %31)[i64 7];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %31)[i64 8];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %31)[i64 9];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %31)[i64 10];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %31)[i64 11];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %31)[i64 12];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %31)[i64 13];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %31)[i64 14];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %31)[i64 15];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %31)[i64 16];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %31)[i64 17];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %31)[i64 18];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %31)[i64 19];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %31)[i64 20];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %31)[i64 21];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %31)[i64 22];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %31)[i64 23];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %31)[i64 24];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %31)[i64 25];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %31)[i64 26];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %31)[i64 27];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %31)[i64 28];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %31)[i64 29];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %31)[i64 30];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %31)[i64 31];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %31)[i64 32];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %31)[i64 33];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %31)[i64 34];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %31)[i64 35];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %31)[i64 36];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %31)[i64 37];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %31)[i64 38];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %31)[i64 39];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %31)[i64 40];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %31)[i64 41];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %31)[i64 42];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %31)[i64 43];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %31)[i64 44];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %31)[i64 45];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %31)[i64 46];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %31)[i64 47];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %31)[i64 48];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %31)[i64 49];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %31)[i64 50];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %31)[i64 51];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %31)[i64 52];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %31)[i64 53];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %31)[i64 54];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %31)[i64 55];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %31)[i64 56];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %31)[i64 57];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %31)[i64 58];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %31)[i64 59];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %31)[i64 60];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &(i32* %31)[i64 61];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &(i32* %31)[i64 62];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %31)[i64 63];
    store i32* %94 with i32 0;
    i64 %95 = add i64 %30, i64 64;
    i1 %96 = icmp slt i64 %95, i64 256;
    cbr i1 %96(prob = 0.75), ^b, ^while.header;
  ^while.header:
    i32 %97 = phi [^b, i32 1] [^b2, i32 %107];
    i32 %98 = add i32 %97, i32 -1;
    i32* %99 = getelementptr &(i32* %0)[i32 %98];
    [16 * i32]* %100 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i32 %97];
    [16 * i32]* %101 = getelementptr &([16 * i32]* %100)[i64 -1];
    i1 %102 = icmp slt i32 %97, i32 16;
    cbr i1 %102(prob = 0.984615), ^while.header1, ^b1;
  ^while.header1:
    i32 %103 = phi [^while.header, i32 1] [^if.then, i32 %114] [^if.else, i32 %114];
    i1 %104 = icmp slt i32 %103, i32 14;
    cbr i1 %104(prob = 0.984615), ^while.body, ^b2;
  ^b1:
    i32* %105 = getelementptr &([16 * [16 * i32]]* %28)[i64 0][i64 15][i64 13];
    i32 %106 = load i32* %105;
    call (i32) -> void @putint(i32 %106);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b2:
    i32 %107 = add i32 %97, i32 1;
    ubr ^while.header;
  ^while.body:
    i32 %108 = add i32 %103, i32 -1;
    i32* %109 = getelementptr &(i32* %15)[i32 %108];
    i32 %110 = load i32* %99;
    i32 %111 = load i32* %109;
    i1 %112 = icmp eq i32 %110, i32 %111;
    i32* %113 = getelementptr &([16 * i32]* %100)[i64 0][i32 %103];
    i32 %114 = add i32 %103, i32 1;
    cbr i1 %112(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %115 = getelementptr &([16 * i32]* %101)[i64 0][i32 %108];
    i32 %116 = load i32* %115;
    i32 %117 = add i32 %116, i32 1;
    store i32* %113 with i32 %117;
    ubr ^while.header1;
  ^if.else:
    i32* %118 = getelementptr &([16 * i32]* %101)[i64 0][i32 %103];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &([16 * i32]* %100)[i64 0][i32 %108];
    i32 %121 = load i32* %120;
    i32 %122 = smax i32 %119, i32 %121;
    store i32* %113 with i32 %122;
    ubr ^while.header1;
}
internal [16 * [16 * i32]]* @p, align 8 { Flexible };
