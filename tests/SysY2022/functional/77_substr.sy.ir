internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    [16 * i32]* %temp = alloc [16 * i32];
    [13 * i32]* %B = alloc [13 * i32];
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %26 with i32 0;
    store i32* %25 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    i32* %28 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %29 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %28 with i32 8;
    store i32* %29 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %44 = phi [^entry, i32 2] [^b, i32 %55];
    i32* %45 = getelementptr &([16 * i32]* %temp)[i64 0][i32 %44];
    i32* %46 = getelementptr &(i32* %45)[i64 -2];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %0)[i32 %44];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32* %51 = getelementptr &(i32* %45)[i64 -1];
    i32 %52 = load i32* %51;
    i1 %53 = scmp eq i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^b, ^if.else;
^b:
    i32 %54 = phi [^while.body, i32 %50] [^if.else, i32 %50] [^if.else1, i32 %52];
    store i32* %45 with i32 %54;
    i32 %55 = add i32 %44, i32 1;
    i1 %56 = scmp lt i32 %55, i32 15;
    cbr i1 %56(prob = 0.92), ^while.body, ^b1;
^if.else:
    i1 %57 = scmp gt i32 %50, i32 %52;
    cbr i1 %57(prob = 0.5), ^b, ^if.else1;
^b1:
    i32 %58 = load i32* %42;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    i32* %59 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %60 = ptrcast i32* %59 to i8*;
    ubr ^b2;
^if.else1:
    ubr ^b;
^b2:
    i64 %61 = phi [^b1, i64 0] [^b2, i64 %78];
    i8* %62 = getelementptr &(i8* %60)[i64 %61];
    store i8* %62 with i8 0;
    i8* %63 = getelementptr &(i8* %62)[i64 1];
    store i8* %63 with i8 0;
    i8* %64 = getelementptr &(i8* %62)[i64 2];
    store i8* %64 with i8 0;
    i8* %65 = getelementptr &(i8* %62)[i64 3];
    store i8* %65 with i8 0;
    i8* %66 = getelementptr &(i8* %62)[i64 4];
    store i8* %66 with i8 0;
    i8* %67 = getelementptr &(i8* %62)[i64 5];
    store i8* %67 with i8 0;
    i8* %68 = getelementptr &(i8* %62)[i64 6];
    store i8* %68 with i8 0;
    i8* %69 = getelementptr &(i8* %62)[i64 7];
    store i8* %69 with i8 0;
    i8* %70 = getelementptr &(i8* %62)[i64 8];
    store i8* %70 with i8 0;
    i8* %71 = getelementptr &(i8* %62)[i64 9];
    store i8* %71 with i8 0;
    i8* %72 = getelementptr &(i8* %62)[i64 10];
    store i8* %72 with i8 0;
    i8* %73 = getelementptr &(i8* %62)[i64 11];
    store i8* %73 with i8 0;
    i8* %74 = getelementptr &(i8* %62)[i64 12];
    store i8* %74 with i8 0;
    i8* %75 = getelementptr &(i8* %62)[i64 13];
    store i8* %75 with i8 0;
    i8* %76 = getelementptr &(i8* %62)[i64 14];
    store i8* %76 with i8 0;
    i8* %77 = getelementptr &(i8* %62)[i64 15];
    store i8* %77 with i8 0;
    i64 %78 = add i64 %61, i64 16;
    i1 %79 = scmp lt i64 %78, i64 1024;
    cbr i1 %79(prob = 0.98), ^b2, ^while.body1;
^while.body1:
    i32 %80 = phi [^b2, i32 1] [^b5, i32 %105];
    i32 %81 = add i32 %80, i32 -1;
    i32* %82 = getelementptr &(i32* %0)[i32 %81];
    [16 * i32]* %83 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i32 %80];
    [16 * i32]* %84 = getelementptr &([16 * i32]* %83)[i64 -1];
    ubr ^while.body2;
^while.body2:
    i32 %85 = phi [^while.body1, i32 1] [^b4, i32 %102];
    i32 %86 = load i32* %82;
    i32 %87 = add i32 %85, i32 -1;
    i32* %88 = getelementptr &(i32* %15)[i32 %87];
    i32 %89 = load i32* %88;
    i1 %90 = scmp eq i32 %86, i32 %89;
    cbr i1 %90(prob = 0.5), ^if.then, ^if.else2;
^if.then:
    i32* %91 = getelementptr &([16 * i32]* %83)[i64 0][i32 %85];
    i32* %92 = getelementptr &([16 * i32]* %84)[i64 0][i32 %87];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %93, i32 1;
    store i32* %91 with i32 %94;
    ubr ^b4;
^if.else2:
    i32* %95 = getelementptr &([16 * i32]* %83)[i64 0][i32 %85];
    i32* %96 = getelementptr &([16 * i32]* %84)[i64 0][i32 %85];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %95)[i64 -1];
    i32 %99 = load i32* %98;
    i1 %100 = scmp eq i32 %97, i32 %99;
    cbr i1 %100(prob = 0.5), ^b3, ^if.else3;
^b3:
    i32 %101 = phi [^if.else2, i32 %97] [^if.else3, i32 %97] [^if.else4, i32 %99];
    store i32* %95 with i32 %101;
    ubr ^b4;
^b4:
    i32 %102 = add i32 %85, i32 1;
    i1 %103 = scmp lt i32 %102, i32 14;
    cbr i1 %103(prob = 0.92), ^while.body2, ^b5;
^if.else3:
    i1 %104 = scmp gt i32 %97, i32 %99;
    cbr i1 %104(prob = 0.5), ^b3, ^if.else4;
^b5:
    i32 %105 = add i32 %80, i32 1;
    i1 %106 = scmp lt i32 %105, i32 16;
    cbr i1 %106(prob = 0.93), ^while.body1, ^b6;
^if.else4:
    ubr ^b3;
^b6:
    i32* %107 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 15][i64 13];
    i32 %108 = load i32* %107;
    call (i32) -> void @putint(i32 %108);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
