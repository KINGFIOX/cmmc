internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset(i8*, i32, i64) -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [15 * i32]* %A = alloc [15 * i32];
    i32* %0 = getelementptr &([15 * i32]* %A)[i64 0][i64 0];
    store i32* %0 with i32 8;
    i32* %1 = getelementptr &([15 * i32]* %A)[i64 0][i64 1];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([15 * i32]* %A)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([15 * i32]* %A)[i64 0][i64 3];
    store i32* %3 with i32 1;
    i32* %4 = getelementptr &([15 * i32]* %A)[i64 0][i64 4];
    store i32* %4 with i32 2;
    i32* %5 = getelementptr &([15 * i32]* %A)[i64 0][i64 5];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([15 * i32]* %A)[i64 0][i64 7];
    i32* %7 = getelementptr &([15 * i32]* %A)[i64 0][i64 6];
    store i32* %7 with i32 0;
    store i32* %6 with i32 1;
    i32* %8 = getelementptr &([15 * i32]* %A)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([15 * i32]* %A)[i64 0][i64 9];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([15 * i32]* %A)[i64 0][i64 10];
    store i32* %10 with i32 4;
    i32* %11 = getelementptr &([15 * i32]* %A)[i64 0][i64 11];
    store i32* %11 with i32 8;
    i32* %12 = getelementptr &([15 * i32]* %A)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([15 * i32]* %A)[i64 0][i64 13];
    store i32* %13 with i32 7;
    i32* %14 = getelementptr &([15 * i32]* %A)[i64 0][i64 14];
    store i32* %14 with i32 0;
    [13 * i32]* %B = alloc [13 * i32];
    i32* %15 = getelementptr &([13 * i32]* %B)[i64 0][i64 0];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([13 * i32]* %B)[i64 0][i64 1];
    store i32* %16 with i32 9;
    i32* %17 = getelementptr &([13 * i32]* %B)[i64 0][i64 2];
    store i32* %17 with i32 7;
    i32* %18 = getelementptr &([13 * i32]* %B)[i64 0][i64 3];
    store i32* %18 with i32 1;
    i32* %19 = getelementptr &([13 * i32]* %B)[i64 0][i64 4];
    store i32* %19 with i32 4;
    i32* %20 = getelementptr &([13 * i32]* %B)[i64 0][i64 5];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([13 * i32]* %B)[i64 0][i64 6];
    store i32* %21 with i32 4;
    i32* %22 = getelementptr &([13 * i32]* %B)[i64 0][i64 7];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([13 * i32]* %B)[i64 0][i64 8];
    store i32* %23 with i32 6;
    i32* %24 = getelementptr &([13 * i32]* %B)[i64 0][i64 9];
    store i32* %24 with i32 8;
    i32* %25 = getelementptr &([13 * i32]* %B)[i64 0][i64 11];
    i32* %26 = getelementptr &([13 * i32]* %B)[i64 0][i64 10];
    store i32* %26 with i32 0;
    store i32* %25 with i32 1;
    i32* %27 = getelementptr &([13 * i32]* %B)[i64 0][i64 12];
    store i32* %27 with i32 5;
    [16 * i32]* %temp = alloc [16 * i32];
    i32* %28 = getelementptr &([16 * i32]* %temp)[i64 0][i64 0];
    i32* %29 = getelementptr &([16 * i32]* %temp)[i64 0][i64 1];
    i32* %30 = getelementptr &([16 * i32]* %temp)[i64 0][i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %temp)[i64 0][i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %temp)[i64 0][i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %temp)[i64 0][i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %temp)[i64 0][i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %temp)[i64 0][i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %temp)[i64 0][i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %temp)[i64 0][i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %temp)[i64 0][i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %temp)[i64 0][i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %temp)[i64 0][i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %temp)[i64 0][i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %temp)[i64 0][i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %temp)[i64 0][i64 15];
    store i32* %43 with i32 0;
    store i32* %28 with i32 8;
    store i32* %29 with i32 8;
    i32* %i = alloc i32;
    store i32* %i with i32 2;
    ubr [ ^while.body [16 * i32]* %temp, i32* %i, i32* %15, i32* %0, i32* %0, i32 2, i32* %42 ];
^while.body([16 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6):
    i32* %0 = getelementptr &([16 * i32]* %arg)[i64 0][i32 %arg5];
    i32* %1 = getelementptr &(i32* %0)[i64 -2];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &(i32* %arg4)[i32 %arg5];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    i32* %6 = getelementptr &(i32* %0)[i64 -1];
    i32 %7 = load i32* %6;
    i32* %a = alloc i32;
    store i32* %a with i32 %5;
    i32* %b = alloc i32;
    store i32* %b with i32 %7;
    i1 %8 = scmp eq i32 %5, i32 %7;
    cbr i1 %8(prob = 0.5), [ ^while.body1 i32 %5, [16 * i32]* %arg, i32* %arg1, i32 %arg5, i32* %0, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6 ], [ ^indirect i32* %b, i32* %a, i32 %7, i32 %5, i32* %0, i32 %arg5, i32* %arg1, [16 * i32]* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg6 ];
^while.body1(i32 %arg, [16 * i32]* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    store i32* %arg4 with i32 %arg;
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 15;
    cbr i1 %1(prob = 0.97), [ ^while.body [16 * i32]* %arg1, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg7, i32 %0, i32* %arg8 ], [ ^indirect1 i32* %arg5, i32* %arg6, i32* %arg8 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32* %arg6, [16 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11):
    i1 %0 = scmp gt i32 %arg3, i32 %arg2;
    i32* %1 = select i1 %0 ? i32* %arg1 : i32* %arg;
    i32 %2 = load i32* %1;
    store i32* %arg4 with i32 %2;
    i32 %3 = add i32 %arg5, i32 1;
    store i32* %arg6 with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 15;
    cbr i1 %4(prob = 0.97), [ ^while.body [16 * i32]* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32 %3, i32* %arg11 ], [ ^indirect1 i32* %arg9, i32* %arg8, i32* %arg11 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arg;
    i32* %len1 = alloc i32;
    store i32* %len1 with i32 15;
    i32** %arr2 = alloc i32*;
    store i32** %arr2 with i32* %arg1;
    i32* %len2 = alloc i32;
    store i32* %len2 with i32 13;
    [16 * [16 * i32]]* %p = alloc [16 * [16 * i32]];
    i32* %1 = getelementptr &([16 * [16 * i32]]* %p)[i64 0][i64 0][i64 0];
    i8* %2 = ptrcast i32* %1 to i8*;
    i8* %3 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %2, i32 0, i64 1024);
    i32 %4 = load i32* %len2;
    i32* %5 = load i32** %arr2;
    i32 %6 = load i32* %len1;
    i32* %7 = load i32** %arr1;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %i with i32 1;
    i1 %8 = scmp gt i32 %6, i32 0;
    i1 %9 = scmp gt i32 %4, i32 0;
    cbr i1 %8(prob = 0.97), [ ^while.body2 [16 * [16 * i32]]* %p, i32* %i, i32* %j, i32* %7, i32 %6, i32* %5, i32 %4, i32 1, i1 %9 ], [ ^indirect2 [16 * [16 * i32]]* %p, i32 %6, i32 %4 ];
^while.body2([16 * [16 * i32]]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    store i32* %arg2 with i32 1;
    cbr i1 %arg8(prob = 0.97), [ ^while.body3 i32* %arg2, [16 * [16 * i32]]* %arg, i32* %arg1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 1, i1 %arg8 ], [ ^b i32* %arg2, [16 * [16 * i32]]* %arg, i32* %arg1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg8 ];
^indirect2([16 * [16 * i32]]* %arg, i32 %arg1, i32 %arg2):
    [16 * i32]* %0 = getelementptr &([16 * [16 * i32]]* %arg)[i64 0][i32 %arg1];
    i32* %1 = getelementptr &([16 * i32]* %0)[i64 0][i32 %arg2];
    i32 %2 = load i32* %1;
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body3(i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    i32 %0 = add i32 %arg7, i32 -1;
    i32* %1 = getelementptr &(i32* %arg3)[i32 %0];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg8, i32 -1;
    i32* %4 = getelementptr &(i32* %arg5)[i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), [ ^if.then i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9 ], [ ^if.else i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9 ];
^b(i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.97), [ ^while.body2 [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0, i1 %arg8 ], [ ^indirect2 [16 * [16 * i32]]* %arg1, i32 %arg4, i32 %arg6 ];
^if.then(i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    [16 * i32]* %0 = getelementptr &([16 * [16 * i32]]* %arg1)[i64 0][i32 %arg7];
    i32* %1 = getelementptr &([16 * i32]* %0)[i64 0][i32 %arg8];
    [16 * i32]* %2 = getelementptr &([16 * i32]* %0)[i64 -1];
    i32 %3 = add i32 %arg8, i32 -1;
    i32* %4 = getelementptr &([16 * i32]* %2)[i64 0][i32 %3];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %5, i32 1;
    store i32* %1 with i32 %6;
    i32 %7 = add i32 %arg8, i32 1;
    store i32* %arg with i32 %7;
    i1 %8 = scmp le i32 %7, i32 %arg6;
    cbr i1 %8(prob = 0.97), [ ^while.body3 i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %7, i1 %arg9 ], [ ^b i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg9 ];
^if.else(i32* %arg, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    [16 * i32]* %0 = getelementptr &([16 * [16 * i32]]* %arg1)[i64 0][i32 %arg7];
    i32* %1 = getelementptr &([16 * i32]* %0)[i64 0][i32 %arg8];
    [16 * i32]* %2 = getelementptr &([16 * i32]* %0)[i64 -1];
    i32* %3 = getelementptr &([16 * i32]* %2)[i64 0][i32 %arg8];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %1)[i64 -1];
    i32 %6 = load i32* %5;
    i32* %a = alloc i32;
    store i32* %a with i32 %4;
    i32* %b = alloc i32;
    store i32* %b with i32 %6;
    i1 %7 = scmp eq i32 %4, i32 %6;
    cbr i1 %7(prob = 0.5), [ ^if.else1 i32 %4, i32 %arg8, i32* %arg, i32* %arg2, [16 * [16 * i32]]* %arg1, i32* %1, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg9 ], [ ^indirect3 i32* %b, i32* %a, i32 %6, i32 %4, i32* %1, [16 * [16 * i32]]* %arg1, i32* %arg2, i32* %arg, i32 %arg8, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i1 %arg9 ];
^if.else1(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, [16 * [16 * i32]]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i1 %arg11):
    store i32* %arg5 with i32 %arg;
    i32 %0 = add i32 %arg1, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg9;
    cbr i1 %1(prob = 0.97), [ ^while.body3 i32* %arg2, [16 * [16 * i32]]* %arg4, i32* %arg3, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %0, i1 %arg11 ], [ ^b i32* %arg2, [16 * [16 * i32]]* %arg4, i32* %arg3, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i1 %arg11 ];
^indirect3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, [16 * [16 * i32]]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i1 %arg14):
    i1 %0 = scmp gt i32 %arg3, i32 %arg2;
    i32* %1 = select i1 %0 ? i32* %arg1 : i32* %arg;
    i32 %2 = load i32* %1;
    store i32* %arg4 with i32 %2;
    i32 %3 = add i32 %arg8, i32 1;
    store i32* %arg7 with i32 %3;
    i1 %4 = scmp le i32 %3, i32 %arg12;
    cbr i1 %4(prob = 0.97), [ ^while.body3 i32* %arg7, [16 * [16 * i32]]* %arg5, i32* %arg6, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %3, i1 %arg14 ], [ ^b i32* %arg7, [16 * [16 * i32]]* %arg5, i32* %arg6, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i1 %arg14 ];
}
