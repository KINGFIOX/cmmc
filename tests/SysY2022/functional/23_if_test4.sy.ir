internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @if_ifElse_() -> i32 {
^entry:
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 0;
    store i32* %b with i32 10;
    i32 %0 = load i32* %a;
    i1 %1 = scmp eq i32 %0, i32 5;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %4 = load i32* %b;
    i1 %5 = scmp eq i32 %4, i32 10;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^if.else;
^b1:
    i32 %8 = load i32* %a;
    ret i32 %8;
^if.then1:
    store i32* %a with i32 25;
    ubr ^b2;
^if.else:
    i32 %9 = load i32* %a;
    i32 %10 = add i32 %9, i32 15;
    store i32* %a with i32 %10;
    ubr ^b2;
^b2:
    ubr ^b1;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call () -> i32 @if_ifElse_();
    ret i32 %0;
}
