internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    call (i32) -> void @putint(i32 0);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 0);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 65);
    call (i32) -> void @putch(i32 68);
    call (i32) -> void @putch(i32 70);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %0] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 1];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 2];
    i32 %3 = phi [^while.body, i32 %3] [^entry, i32 3];
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 4];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %0];
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^b, ^b1;
^b:
    i1 %7 = scmp neq i32 %1, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^while.header, i1 false];
    cbr i1 %8(prob = 0.97), ^while.body, ^b2;
^while.body:
    call (i32) -> void @putch(i32 32);
    ubr ^while.header;
^b2:
    i1 %9 = scmp neq i32 %0, i32 0;
    cbr i1 %9(prob = 0.5), ^b4, ^b3;
^b3:
    i1 %10 = scmp neq i32 %1, i32 0;
    ubr ^b4;
^b4:
    i1 %11 = phi [^b3, i1 %10] [^b2, i1 true];
    cbr i1 %11(prob = 0.5), ^if.then, ^b5;
^if.then:
    call (i32) -> void @putch(i32 67);
    ubr ^b5;
^b5:
    i1 %12 = scmp ge i32 %0, i32 %1;
    cbr i1 %12(prob = 0.5), ^b7, ^b6;
^b6:
    i1 %13 = scmp le i32 %1, i32 %0;
    ubr ^b7;
^b7:
    i1 %14 = phi [^b6, i1 %13] [^b5, i1 true];
    cbr i1 %14(prob = 0.5), ^if.then1, ^b8;
^if.then1:
    call (i32) -> void @putch(i32 72);
    ubr ^b8;
^b8:
    i1 %15 = scmp ge i32 %2, i32 %1;
    cbr i1 %15(prob = 0.5), ^b9, ^b10;
^b9:
    i1 %16 = scmp neq i32 %4, i32 %3;
    ubr ^b10;
^b10:
    i1 %17 = phi [^b9, i1 %16] [^b8, i1 false];
    cbr i1 %17(prob = 0.5), ^if.then2, ^b11;
^if.then2:
    call (i32) -> void @putch(i32 73);
    ubr ^b11;
^b11:
    i1 %18 = scmp eq i32 %1, i32 0;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp eq i32 %0, i32 %19;
    cbr i1 %20(prob = 0.5), ^b12, ^b13;
^b12:
    ubr ^b13;
^b13:
    call (i32) -> void @putch(i32 74);
    cbr i1 %20(prob = 0.5), ^b15, ^b14;
^b14:
    ubr ^b15;
^b15:
    i1 %21 = phi [^b13, i1 true] [^b14, i1 false];
    cbr i1 %21(prob = 0.5), ^if.then3, ^b16;
^if.then3:
    call (i32) -> void @putch(i32 75);
    ubr ^b16;
^b16:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
