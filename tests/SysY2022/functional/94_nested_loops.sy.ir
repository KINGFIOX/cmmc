internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1;
internal [10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2;
internal func @loop1(i32 %x, i32 %y) -> void {
^entry:
    i32* %g = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %e with i32 0;
    store i32* %f with i32 0;
    store i32* %g with i32 0;
    store i32* %a with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i32 %1 = load i32* %x1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %5 = load i32* %a;
    i32 %6 = load i32* %y1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    ubr ^b2;
^b2:
    i1 %10 = phi [^b1, i1 %9] [^while.header, i1 false];
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b3;
^while.body:
    store i32* %b with i32 0;
    ubr ^while.header1;
^b3:
    ret;
^while.header1:
    i32 %13 = load i32* %b;
    i1 %14 = scmp lt i32 %13, i32 2;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    store i32* %c with i32 0;
    ubr ^while.header2;
^b4:
    i32 %17 = load i32* %a;
    i32 %18 = add i32 %17, i32 1;
    store i32* %a with i32 %18;
    ubr ^while.header;
^while.header2:
    i32 %19 = load i32* %c;
    i1 %20 = scmp lt i32 %19, i32 3;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body2, ^b5;
^while.body2:
    store i32* %d with i32 0;
    ubr ^while.header3;
^b5:
    i32 %23 = load i32* %b;
    i32 %24 = add i32 %23, i32 1;
    store i32* %b with i32 %24;
    ubr ^while.header1;
^while.header3:
    i32 %25 = load i32* %d;
    i1 %26 = scmp lt i32 %25, i32 4;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body3, ^b6;
^while.body3:
    store i32* %e with i32 0;
    ubr ^while.header4;
^b6:
    i32 %29 = load i32* %c;
    i32 %30 = add i32 %29, i32 1;
    store i32* %c with i32 %30;
    ubr ^while.header2;
^while.header4:
    i32 %31 = load i32* %e;
    i1 %32 = scmp lt i32 %31, i32 5;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body4, ^b7;
^while.body4:
    store i32* %f with i32 0;
    ubr ^while.header5;
^b7:
    i32 %35 = load i32* %d;
    i32 %36 = add i32 %35, i32 1;
    store i32* %d with i32 %36;
    ubr ^while.header3;
^while.header5:
    i32 %37 = load i32* %f;
    i1 %38 = scmp lt i32 %37, i32 6;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body5, ^b8;
^while.body5:
    store i32* %g with i32 0;
    ubr ^while.header6;
^b8:
    i32 %41 = load i32* %e;
    i32 %42 = add i32 %41, i32 1;
    store i32* %e with i32 %42;
    ubr ^while.header4;
^while.header6:
    i32 %43 = load i32* %g;
    i1 %44 = scmp lt i32 %43, i32 2;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.97), ^while.body6, ^b9;
^while.body6:
    i32 %47 = load i32* %a;
    i64 %48 = sext i32 %47 to i64;
    [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %49 = getelementptr &([10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1)[i64 0][i64 %48];
    i32 %50 = load i32* %b;
    i64 %51 = sext i32 %50 to i64;
    [3 * [4 * [5 * [6 * [2 * i32]]]]]* %52 = getelementptr &([2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %49)[i64 0][i64 %51];
    i32 %53 = load i32* %c;
    i64 %54 = sext i32 %53 to i64;
    [4 * [5 * [6 * [2 * i32]]]]* %55 = getelementptr &([3 * [4 * [5 * [6 * [2 * i32]]]]]* %52)[i64 0][i64 %54];
    i32 %56 = load i32* %d;
    i64 %57 = sext i32 %56 to i64;
    [5 * [6 * [2 * i32]]]* %58 = getelementptr &([4 * [5 * [6 * [2 * i32]]]]* %55)[i64 0][i64 %57];
    i32 %59 = load i32* %e;
    i64 %60 = sext i32 %59 to i64;
    [6 * [2 * i32]]* %61 = getelementptr &([5 * [6 * [2 * i32]]]* %58)[i64 0][i64 %60];
    i32 %62 = load i32* %f;
    i64 %63 = sext i32 %62 to i64;
    [2 * i32]* %64 = getelementptr &([6 * [2 * i32]]* %61)[i64 0][i64 %63];
    i32 %65 = load i32* %g;
    i64 %66 = sext i32 %65 to i64;
    i32* %67 = getelementptr &([2 * i32]* %64)[i64 0][i64 %66];
    i32 %68 = load i32* %a;
    i32 %69 = load i32* %b;
    i32 %70 = add i32 %68, i32 %69;
    i32 %71 = load i32* %c;
    i32 %72 = add i32 %70, i32 %71;
    i32 %73 = load i32* %d;
    i32 %74 = add i32 %72, i32 %73;
    i32 %75 = load i32* %e;
    i32 %76 = add i32 %74, i32 %75;
    i32 %77 = load i32* %f;
    i32 %78 = add i32 %76, i32 %77;
    i32 %79 = load i32* %g;
    i32 %80 = add i32 %78, i32 %79;
    i32 %81 = load i32* %x1;
    i32 %82 = add i32 %80, i32 %81;
    i32 %83 = load i32* %y1;
    i32 %84 = add i32 %82, i32 %83;
    store i32* %67 with i32 %84;
    i32 %85 = load i32* %g;
    i32 %86 = add i32 %85, i32 1;
    store i32* %g with i32 %86;
    ubr ^while.header6;
^b9:
    i32 %87 = load i32* %f;
    i32 %88 = add i32 %87, i32 1;
    store i32* %f with i32 %88;
    ubr ^while.header5;
}
internal func @loop2() -> void {
^entry:
    i32* %g = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %e with i32 0;
    store i32* %f with i32 0;
    store i32* %g with i32 0;
    store i32* %a with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    store i32* %b with i32 0;
    ubr ^while.header1;
^b1:
    ret;
^while.header1:
    i32 %4 = load i32* %b;
    i1 %5 = scmp lt i32 %4, i32 2;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    store i32* %c with i32 0;
    ubr ^while.header2;
^b2:
    i32 %8 = load i32* %a;
    i32 %9 = add i32 %8, i32 1;
    store i32* %a with i32 %9;
    ubr ^while.header;
^while.header2:
    i32 %10 = load i32* %c;
    i1 %11 = scmp lt i32 %10, i32 3;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    store i32* %d with i32 0;
    ubr ^while.header3;
^b3:
    i32 %14 = load i32* %b;
    i32 %15 = add i32 %14, i32 1;
    store i32* %b with i32 %15;
    ubr ^while.header1;
^while.header3:
    i32 %16 = load i32* %d;
    i1 %17 = scmp lt i32 %16, i32 2;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body3, ^b4;
^while.body3:
    store i32* %e with i32 0;
    ubr ^while.header4;
^b4:
    i32 %20 = load i32* %c;
    i32 %21 = add i32 %20, i32 1;
    store i32* %c with i32 %21;
    ubr ^while.header2;
^while.header4:
    i32 %22 = load i32* %e;
    i1 %23 = scmp lt i32 %22, i32 4;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body4, ^b5;
^while.body4:
    store i32* %f with i32 0;
    ubr ^while.header5;
^b5:
    i32 %26 = load i32* %d;
    i32 %27 = add i32 %26, i32 1;
    store i32* %d with i32 %27;
    ubr ^while.header3;
^while.header5:
    i32 %28 = load i32* %f;
    i1 %29 = scmp lt i32 %28, i32 8;
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body5, ^b6;
^while.body5:
    store i32* %g with i32 0;
    ubr ^while.header6;
^b6:
    i32 %32 = load i32* %e;
    i32 %33 = add i32 %32, i32 1;
    store i32* %e with i32 %33;
    ubr ^while.header4;
^while.header6:
    i32 %34 = load i32* %g;
    i1 %35 = scmp lt i32 %34, i32 7;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body6, ^b7;
^while.body6:
    i32 %38 = load i32* %a;
    i64 %39 = sext i32 %38 to i64;
    [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %40 = getelementptr &([10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2)[i64 0][i64 %39];
    i32 %41 = load i32* %b;
    i64 %42 = sext i32 %41 to i64;
    [3 * [2 * [4 * [8 * [7 * i32]]]]]* %43 = getelementptr &([2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %40)[i64 0][i64 %42];
    i32 %44 = load i32* %c;
    i64 %45 = sext i32 %44 to i64;
    [2 * [4 * [8 * [7 * i32]]]]* %46 = getelementptr &([3 * [2 * [4 * [8 * [7 * i32]]]]]* %43)[i64 0][i64 %45];
    i32 %47 = load i32* %d;
    i64 %48 = sext i32 %47 to i64;
    [4 * [8 * [7 * i32]]]* %49 = getelementptr &([2 * [4 * [8 * [7 * i32]]]]* %46)[i64 0][i64 %48];
    i32 %50 = load i32* %e;
    i64 %51 = sext i32 %50 to i64;
    [8 * [7 * i32]]* %52 = getelementptr &([4 * [8 * [7 * i32]]]* %49)[i64 0][i64 %51];
    i32 %53 = load i32* %f;
    i64 %54 = sext i32 %53 to i64;
    [7 * i32]* %55 = getelementptr &([8 * [7 * i32]]* %52)[i64 0][i64 %54];
    i32 %56 = load i32* %g;
    i64 %57 = sext i32 %56 to i64;
    i32* %58 = getelementptr &([7 * i32]* %55)[i64 0][i64 %57];
    i32 %59 = load i32* %a;
    i32 %60 = load i32* %b;
    i32 %61 = add i32 %59, i32 %60;
    i32 %62 = load i32* %d;
    i32 %63 = add i32 %61, i32 %62;
    i32 %64 = load i32* %g;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %58 with i32 %65;
    i32 %66 = load i32* %g;
    i32 %67 = add i32 %66, i32 1;
    store i32* %g with i32 %67;
    ubr ^while.header6;
^b7:
    i32 %68 = load i32* %f;
    i32 %69 = add i32 %68, i32 1;
    store i32* %f with i32 %69;
    ubr ^while.header5;
}
internal func @loop3(i32 %h, i32 %i, i32 %j, i32 %k, i32 %l, i32 %m, i32 %n) -> i32 {
^entry:
    i32* %ans = alloc i32;
    i32* %g = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    i32* %n1 = alloc i32;
    i32* %m1 = alloc i32;
    i32* %l1 = alloc i32;
    i32* %k1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %h1 = alloc i32;
    store i32* %h1 with i32 %h;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    store i32* %k1 with i32 %k;
    store i32* %l1 with i32 %l;
    store i32* %m1 with i32 %m;
    store i32* %n1 with i32 %n;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %e with i32 0;
    store i32* %f with i32 0;
    store i32* %g with i32 0;
    store i32* %ans with i32 0;
    store i32* %a with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    store i32* %b with i32 0;
    ubr ^while.header1;
^b1:
    i32 %4 = load i32* %ans;
    ret i32 %4;
^while.header1:
    i32 %5 = load i32* %b;
    i1 %6 = scmp lt i32 %5, i32 100;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    store i32* %c with i32 0;
    ubr ^while.header2;
^b2:
    i32 %9 = load i32* %a;
    i32 %10 = add i32 %9, i32 1;
    store i32* %a with i32 %10;
    i32 %11 = load i32* %a;
    i32 %12 = load i32* %h1;
    i1 %13 = scmp ge i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b3;
^if.then:
    ubr ^b1;
^while.header2:
    i32 %16 = load i32* %c;
    i1 %17 = scmp lt i32 %16, i32 1000;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body2, ^b4;
^b3:
    ubr ^while.header;
^while.body2:
    store i32* %d with i32 0;
    ubr ^while.header3;
^b4:
    i32 %20 = load i32* %b;
    i32 %21 = add i32 %20, i32 1;
    store i32* %b with i32 %21;
    i32 %22 = load i32* %b;
    i32 %23 = load i32* %i1;
    i1 %24 = scmp ge i32 %22, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then1, ^b5;
^if.then1:
    ubr ^b2;
^while.header3:
    i32 %27 = load i32* %d;
    i1 %28 = scmp lt i32 %27, i32 10000;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body3, ^b6;
^b5:
    ubr ^while.header1;
^while.body3:
    store i32* %e with i32 0;
    ubr ^while.header4;
^b6:
    i32 %31 = load i32* %c;
    i32 %32 = add i32 %31, i32 1;
    store i32* %c with i32 %32;
    i32 %33 = load i32* %c;
    i32 %34 = load i32* %j1;
    i1 %35 = scmp ge i32 %33, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then2, ^b7;
^if.then2:
    ubr ^b4;
^while.header4:
    i32 %38 = load i32* %e;
    i1 %39 = scmp lt i32 %38, i32 100000;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body4, ^b8;
^b7:
    ubr ^while.header2;
^while.body4:
    store i32* %f with i32 0;
    ubr ^while.header5;
^b8:
    i32 %42 = load i32* %d;
    i32 %43 = add i32 %42, i32 1;
    store i32* %d with i32 %43;
    i32 %44 = load i32* %d;
    i32 %45 = load i32* %k1;
    i1 %46 = scmp ge i32 %44, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then3, ^b9;
^if.then3:
    ubr ^b6;
^while.header5:
    i32 %49 = load i32* %f;
    i1 %50 = scmp lt i32 %49, i32 1000000;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.97), ^while.body5, ^b10;
^b9:
    ubr ^while.header3;
^while.body5:
    store i32* %g with i32 0;
    ubr ^while.header6;
^b10:
    i32 %53 = load i32* %e;
    i32 %54 = add i32 %53, i32 1;
    store i32* %e with i32 %54;
    i32 %55 = load i32* %e;
    i32 %56 = load i32* %l1;
    i1 %57 = scmp ge i32 %55, i32 %56;
    i32 %58 = zext i1 %57 to i32;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^if.then4, ^b11;
^if.then4:
    ubr ^b8;
^while.header6:
    i32 %60 = load i32* %g;
    i1 %61 = scmp lt i32 %60, i32 10000000;
    i32 %62 = zext i1 %61 to i32;
    i1 %63 = scmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body6, ^b12;
^b11:
    ubr ^while.header4;
^while.body6:
    i32 %64 = load i32* %ans;
    i32 %65 = srem i32 %64, i32 817;
    i32 %66 = load i32* %a;
    i64 %67 = sext i32 %66 to i64;
    [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %68 = getelementptr &([10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1)[i64 0][i64 %67];
    i32 %69 = load i32* %b;
    i64 %70 = sext i32 %69 to i64;
    [3 * [4 * [5 * [6 * [2 * i32]]]]]* %71 = getelementptr &([2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %68)[i64 0][i64 %70];
    i32 %72 = load i32* %c;
    i64 %73 = sext i32 %72 to i64;
    [4 * [5 * [6 * [2 * i32]]]]* %74 = getelementptr &([3 * [4 * [5 * [6 * [2 * i32]]]]]* %71)[i64 0][i64 %73];
    i32 %75 = load i32* %d;
    i64 %76 = sext i32 %75 to i64;
    [5 * [6 * [2 * i32]]]* %77 = getelementptr &([4 * [5 * [6 * [2 * i32]]]]* %74)[i64 0][i64 %76];
    i32 %78 = load i32* %e;
    i64 %79 = sext i32 %78 to i64;
    [6 * [2 * i32]]* %80 = getelementptr &([5 * [6 * [2 * i32]]]* %77)[i64 0][i64 %79];
    i32 %81 = load i32* %f;
    i64 %82 = sext i32 %81 to i64;
    [2 * i32]* %83 = getelementptr &([6 * [2 * i32]]* %80)[i64 0][i64 %82];
    i32 %84 = load i32* %g;
    i64 %85 = sext i32 %84 to i64;
    i32* %86 = getelementptr &([2 * i32]* %83)[i64 0][i64 %85];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %65, i32 %87;
    i32 %89 = load i32* %a;
    i64 %90 = sext i32 %89 to i64;
    [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %91 = getelementptr &([10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2)[i64 0][i64 %90];
    i32 %92 = load i32* %b;
    i64 %93 = sext i32 %92 to i64;
    [3 * [2 * [4 * [8 * [7 * i32]]]]]* %94 = getelementptr &([2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %91)[i64 0][i64 %93];
    i32 %95 = load i32* %c;
    i64 %96 = sext i32 %95 to i64;
    [2 * [4 * [8 * [7 * i32]]]]* %97 = getelementptr &([3 * [2 * [4 * [8 * [7 * i32]]]]]* %94)[i64 0][i64 %96];
    i32 %98 = load i32* %d;
    i64 %99 = sext i32 %98 to i64;
    [4 * [8 * [7 * i32]]]* %100 = getelementptr &([2 * [4 * [8 * [7 * i32]]]]* %97)[i64 0][i64 %99];
    i32 %101 = load i32* %e;
    i64 %102 = sext i32 %101 to i64;
    [8 * [7 * i32]]* %103 = getelementptr &([4 * [8 * [7 * i32]]]* %100)[i64 0][i64 %102];
    i32 %104 = load i32* %f;
    i64 %105 = sext i32 %104 to i64;
    [7 * i32]* %106 = getelementptr &([8 * [7 * i32]]* %103)[i64 0][i64 %105];
    i32 %107 = load i32* %g;
    i64 %108 = sext i32 %107 to i64;
    i32* %109 = getelementptr &([7 * i32]* %106)[i64 0][i64 %108];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %88, i32 %110;
    store i32* %ans with i32 %111;
    i32 %112 = load i32* %g;
    i32 %113 = add i32 %112, i32 1;
    store i32* %g with i32 %113;
    i32 %114 = load i32* %g;
    i32 %115 = load i32* %n1;
    i1 %116 = scmp ge i32 %114, i32 %115;
    i32 %117 = zext i1 %116 to i32;
    i1 %118 = scmp neq i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^if.then5, ^b13;
^b12:
    i32 %119 = load i32* %f;
    i32 %120 = add i32 %119, i32 1;
    store i32* %f with i32 %120;
    i32 %121 = load i32* %f;
    i32 %122 = load i32* %m1;
    i1 %123 = scmp ge i32 %121, i32 %122;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp neq i32 %124, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then6, ^b14;
^if.then5:
    ubr ^b12;
^b13:
    ubr ^while.header6;
^if.then6:
    ubr ^b10;
^b14:
    ubr ^while.header5;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %l = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %h = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %x with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %y with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %h with i32 %2;
    i32 %3 = call () -> i32 @getint();
    store i32* %i with i32 %3;
    i32 %4 = call () -> i32 @getint();
    store i32* %j with i32 %4;
    i32 %5 = call () -> i32 @getint();
    store i32* %k with i32 %5;
    i32 %6 = call () -> i32 @getint();
    store i32* %l with i32 %6;
    i32 %7 = call () -> i32 @getint();
    store i32* %m with i32 %7;
    i32 %8 = call () -> i32 @getint();
    store i32* %n with i32 %8;
    i32 %9 = load i32* %x;
    i32 %10 = load i32* %y;
    call (i32, i32) -> void @loop1(i32 %9, i32 %10);
    call () -> void @loop2();
    i32 %11 = load i32* %h;
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %j;
    i32 %14 = load i32* %k;
    i32 %15 = load i32* %l;
    i32 %16 = load i32* %m;
    i32 %17 = load i32* %n;
    i32 %18 = call (i32, i32, i32, i32, i32, i32, i32) -> i32 @loop3(i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17);
    ret i32 %18;
}
