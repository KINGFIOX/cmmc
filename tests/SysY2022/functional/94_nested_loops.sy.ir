internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal [10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1;
internal [10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %9 = phi [^b2, i32 %17] [^entry, i32 0];
    i1 %10 = scmp lt i32 %9, i32 %0;
    cbr i1 %10(prob = 0.5), ^b, ^b1;
^b:
    i1 %11 = scmp lt i32 %9, i32 %1;
    ubr ^b1;
^b1:
    i1 %12 = phi [^b, i1 %11] [^while.header, i1 false];
    cbr i1 %12(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %13 = phi [^b1, i32 0] [^b3, i32 %25];
    i1 %14 = scmp lt i32 %13, i32 2;
    cbr i1 %14(prob = 0.97), ^while.header3, ^b2;
^while.header2:
    i32 %15 = phi [^b1, i32 0] [^b4, i32 %26];
    i1 %16 = scmp lt i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.header4, ^while.header5;
^b2:
    i32 %17 = add i32 %9, i32 1;
    ubr ^while.header;
^while.header3:
    i32 %18 = phi [^while.header1, i32 0] [^b6, i32 %35];
    i1 %19 = scmp lt i32 %18, i32 3;
    cbr i1 %19(prob = 0.97), ^while.header6, ^b3;
^while.header4:
    i32 %20 = phi [^while.header2, i32 0] [^b7, i32 %36];
    i1 %21 = scmp lt i32 %20, i32 2;
    cbr i1 %21(prob = 0.97), ^while.header7, ^b4;
^while.header5:
    i32 %22 = phi [^while.header2, i32 0] [^b8, i32 %44];
    i32 %23 = phi [^while.header2, i32 0] [^b8, i32 %45];
    i1 %24 = scmp lt i32 %23, i32 10;
    cbr i1 %24(prob = 0.97), ^while.header8, ^b5;
^b3:
    i32 %25 = add i32 %13, i32 1;
    ubr ^while.header1;
^b4:
    i32 %26 = add i32 %15, i32 1;
    ubr ^while.header2;
^while.header6:
    i32 %27 = phi [^while.header3, i32 0] [^b9, i32 %47];
    i1 %28 = scmp lt i32 %27, i32 4;
    cbr i1 %28(prob = 0.97), ^while.header9, ^b6;
^while.header7:
    i32 %29 = phi [^while.header4, i32 0] [^b10, i32 %48];
    i1 %30 = scmp lt i32 %29, i32 3;
    cbr i1 %30(prob = 0.97), ^while.header10, ^b7;
^while.header8:
    i32 %31 = phi [^while.header5, i32 %22] [^b11, i32 %56];
    i32 %32 = phi [^while.header5, i32 0] [^b11, i32 %57];
    i1 %33 = scmp lt i32 %32, i32 100;
    cbr i1 %33(prob = 0.97), ^while.header11, ^b8;
^b5:
    i32 %34 = phi [^b8, i32 %44] [^while.header5, i32 %22];
    ret i32 %34;
^b6:
    i32 %35 = add i32 %18, i32 1;
    ubr ^while.header3;
^b7:
    i32 %36 = add i32 %20, i32 1;
    ubr ^while.header4;
^while.header9:
    i32 %37 = phi [^while.header6, i32 0] [^b12, i32 %59];
    i1 %38 = scmp lt i32 %37, i32 5;
    cbr i1 %38(prob = 0.97), ^while.header12, ^b9;
^while.header10:
    i32 %39 = phi [^while.header7, i32 0] [^b13, i32 %60];
    i1 %40 = scmp lt i32 %39, i32 2;
    cbr i1 %40(prob = 0.97), ^while.header13, ^b10;
^while.header11:
    i32 %41 = phi [^while.header8, i32 %31] [^b14, i32 %68];
    i32 %42 = phi [^while.header8, i32 0] [^b14, i32 %69];
    i1 %43 = scmp lt i32 %42, i32 1000;
    cbr i1 %43(prob = 0.97), ^while.header14, ^b11;
^b8:
    i32 %44 = phi [^b11, i32 %56] [^while.header8, i32 %31];
    i32 %45 = add i32 %23, i32 1;
    i1 %46 = scmp ge i32 %45, i32 %2;
    cbr i1 %46(prob = 0.5), ^b5, ^while.header5;
^b9:
    i32 %47 = add i32 %27, i32 1;
    ubr ^while.header6;
^b10:
    i32 %48 = add i32 %29, i32 1;
    ubr ^while.header7;
^while.header12:
    i32 %49 = phi [^while.header9, i32 0] [^b15, i32 %87];
    i1 %50 = scmp lt i32 %49, i32 6;
    cbr i1 %50(prob = 0.97), ^while.header15, ^b12;
^while.header13:
    i32 %51 = phi [^while.header10, i32 0] [^b16, i32 %88];
    i1 %52 = scmp lt i32 %51, i32 4;
    cbr i1 %52(prob = 0.97), ^while.header16, ^b13;
^while.header14:
    i32 %53 = phi [^while.header11, i32 %41] [^b17, i32 %94];
    i32 %54 = phi [^while.header11, i32 0] [^b17, i32 %95];
    i1 %55 = scmp lt i32 %54, i32 10000;
    cbr i1 %55(prob = 0.97), ^while.header17, ^b14;
^b11:
    i32 %56 = phi [^b14, i32 %68] [^while.header11, i32 %41];
    i32 %57 = add i32 %32, i32 1;
    i1 %58 = scmp ge i32 %57, i32 %3;
    cbr i1 %58(prob = 0.5), ^b8, ^while.header8;
^b12:
    i32 %59 = add i32 %37, i32 1;
    ubr ^while.header9;
^b13:
    i32 %60 = add i32 %39, i32 1;
    ubr ^while.header10;
^while.header15:
    i32 %61 = phi [^while.header12, i32 0] [^while.body, i32 %86];
    i1 %62 = scmp lt i32 %61, i32 2;
    cbr i1 %62(prob = 0.97), ^while.body, ^b15;
^while.header16:
    i32 %63 = phi [^while.header13, i32 0] [^b18, i32 %108];
    i1 %64 = scmp lt i32 %63, i32 8;
    cbr i1 %64(prob = 0.97), ^while.header18, ^b16;
^while.header17:
    i32 %65 = phi [^while.header14, i32 %53] [^b19, i32 %112];
    i32 %66 = phi [^while.header14, i32 0] [^b19, i32 %113];
    i1 %67 = scmp lt i32 %66, i32 100000;
    cbr i1 %67(prob = 0.97), ^while.header19, ^b17;
^b14:
    i32 %68 = phi [^b17, i32 %94] [^while.header14, i32 %53];
    i32 %69 = add i32 %42, i32 1;
    i1 %70 = scmp ge i32 %69, i32 %4;
    cbr i1 %70(prob = 0.5), ^b11, ^while.header11;
^while.body:
    [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %71 = getelementptr &([10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1)[i64 0][i32 %9];
    [3 * [4 * [5 * [6 * [2 * i32]]]]]* %72 = getelementptr &([2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %71)[i64 0][i32 %13];
    [4 * [5 * [6 * [2 * i32]]]]* %73 = getelementptr &([3 * [4 * [5 * [6 * [2 * i32]]]]]* %72)[i64 0][i32 %18];
    [5 * [6 * [2 * i32]]]* %74 = getelementptr &([4 * [5 * [6 * [2 * i32]]]]* %73)[i64 0][i32 %27];
    [6 * [2 * i32]]* %75 = getelementptr &([5 * [6 * [2 * i32]]]* %74)[i64 0][i32 %37];
    [2 * i32]* %76 = getelementptr &([6 * [2 * i32]]* %75)[i64 0][i32 %49];
    i32* %77 = getelementptr &([2 * i32]* %76)[i64 0][i32 %61];
    i32 %78 = add i32 %9, i32 %13;
    i32 %79 = add i32 %78, i32 %18;
    i32 %80 = add i32 %79, i32 %27;
    i32 %81 = add i32 %80, i32 %37;
    i32 %82 = add i32 %81, i32 %49;
    i32 %83 = add i32 %82, i32 %61;
    i32 %84 = add i32 %83, i32 %0;
    i32 %85 = add i32 %84, i32 %1;
    store i32* %77 with i32 %85;
    i32 %86 = add i32 %61, i32 1;
    ubr ^while.header15;
^b15:
    i32 %87 = add i32 %49, i32 1;
    ubr ^while.header12;
^b16:
    i32 %88 = add i32 %51, i32 1;
    ubr ^while.header13;
^while.header18:
    i32 %89 = phi [^while.header16, i32 0] [^while.body1, i32 %107];
    i1 %90 = scmp lt i32 %89, i32 7;
    cbr i1 %90(prob = 0.97), ^while.body1, ^b18;
^while.header19:
    i32 %91 = phi [^while.header17, i32 %65] [^b20, i32 %136];
    i32 %92 = phi [^while.header17, i32 0] [^b20, i32 %137];
    i1 %93 = scmp lt i32 %92, i32 1000000;
    cbr i1 %93(prob = 0.97), ^while.header20, ^b19;
^b17:
    i32 %94 = phi [^b19, i32 %112] [^while.header17, i32 %65];
    i32 %95 = add i32 %54, i32 1;
    i1 %96 = scmp ge i32 %95, i32 %5;
    cbr i1 %96(prob = 0.5), ^b14, ^while.header14;
^while.body1:
    [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %97 = getelementptr &([10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2)[i64 0][i32 %15];
    [3 * [2 * [4 * [8 * [7 * i32]]]]]* %98 = getelementptr &([2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %97)[i64 0][i32 %20];
    [2 * [4 * [8 * [7 * i32]]]]* %99 = getelementptr &([3 * [2 * [4 * [8 * [7 * i32]]]]]* %98)[i64 0][i32 %29];
    [4 * [8 * [7 * i32]]]* %100 = getelementptr &([2 * [4 * [8 * [7 * i32]]]]* %99)[i64 0][i32 %39];
    [8 * [7 * i32]]* %101 = getelementptr &([4 * [8 * [7 * i32]]]* %100)[i64 0][i32 %51];
    [7 * i32]* %102 = getelementptr &([8 * [7 * i32]]* %101)[i64 0][i32 %63];
    i32* %103 = getelementptr &([7 * i32]* %102)[i64 0][i32 %89];
    i32 %104 = add i32 %15, i32 %20;
    i32 %105 = add i32 %104, i32 %39;
    i32 %106 = add i32 %105, i32 %89;
    store i32* %103 with i32 %106;
    i32 %107 = add i32 %89, i32 1;
    ubr ^while.header18;
^b18:
    i32 %108 = add i32 %63, i32 1;
    ubr ^while.header16;
^while.header20:
    i32 %109 = phi [^while.header19, i32 %91] [^while.body2, i32 %133];
    i32 %110 = phi [^while.header19, i32 0] [^while.body2, i32 %134];
    i1 %111 = scmp lt i32 %110, i32 10000000;
    cbr i1 %111(prob = 0.97), ^while.body2, ^b20;
^b19:
    i32 %112 = phi [^b20, i32 %136] [^while.header19, i32 %91];
    i32 %113 = add i32 %66, i32 1;
    i1 %114 = scmp ge i32 %113, i32 %6;
    cbr i1 %114(prob = 0.5), ^b17, ^while.header17;
^while.body2:
    i32 %115 = srem i32 %109, i32 817;
    [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %116 = getelementptr &([10 * [2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]]* @arr1)[i64 0][i32 %23];
    [3 * [4 * [5 * [6 * [2 * i32]]]]]* %117 = getelementptr &([2 * [3 * [4 * [5 * [6 * [2 * i32]]]]]]* %116)[i64 0][i32 %32];
    [4 * [5 * [6 * [2 * i32]]]]* %118 = getelementptr &([3 * [4 * [5 * [6 * [2 * i32]]]]]* %117)[i64 0][i32 %42];
    [5 * [6 * [2 * i32]]]* %119 = getelementptr &([4 * [5 * [6 * [2 * i32]]]]* %118)[i64 0][i32 %54];
    [6 * [2 * i32]]* %120 = getelementptr &([5 * [6 * [2 * i32]]]* %119)[i64 0][i32 %66];
    [2 * i32]* %121 = getelementptr &([6 * [2 * i32]]* %120)[i64 0][i32 %92];
    i32* %122 = getelementptr &([2 * i32]* %121)[i64 0][i32 %110];
    i32 %123 = load i32* %122;
    [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %124 = getelementptr &([10 * [2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]]* @arr2)[i64 0][i32 %23];
    [3 * [2 * [4 * [8 * [7 * i32]]]]]* %125 = getelementptr &([2 * [3 * [2 * [4 * [8 * [7 * i32]]]]]]* %124)[i64 0][i32 %32];
    [2 * [4 * [8 * [7 * i32]]]]* %126 = getelementptr &([3 * [2 * [4 * [8 * [7 * i32]]]]]* %125)[i64 0][i32 %42];
    [4 * [8 * [7 * i32]]]* %127 = getelementptr &([2 * [4 * [8 * [7 * i32]]]]* %126)[i64 0][i32 %54];
    [8 * [7 * i32]]* %128 = getelementptr &([4 * [8 * [7 * i32]]]* %127)[i64 0][i32 %66];
    [7 * i32]* %129 = getelementptr &([8 * [7 * i32]]* %128)[i64 0][i32 %92];
    i32* %130 = getelementptr &([7 * i32]* %129)[i64 0][i32 %110];
    i32 %131 = load i32* %130;
    i32 %132 = add i32 %115, i32 %123;
    i32 %133 = add i32 %132, i32 %131;
    i32 %134 = add i32 %110, i32 1;
    i1 %135 = scmp ge i32 %134, i32 %8;
    cbr i1 %135(prob = 0.5), ^b20, ^while.header20;
^b20:
    i32 %136 = phi [^while.header20, i32 %109] [^while.body2, i32 %133];
    i32 %137 = add i32 %92, i32 1;
    i1 %138 = scmp ge i32 %137, i32 %7;
    cbr i1 %138(prob = 0.5), ^b19, ^while.header19;
}
