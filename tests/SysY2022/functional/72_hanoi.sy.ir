internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @hanoi(i32, i32, i32, i32) -> void { NoMemoryRead NoMemoryWrite } {
^dummy_entry(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    ubr [ ^entry i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^entry(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 1;
    cbr i1 %0(prob = 0.5), [ ^entry1 i32 %arg1, i32 %arg3 ], [ ^indirect i32 %arg2, i32 %arg3, i32 %arg1, i32 %arg ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 -1;
    call (i32, i32, i32, i32) -> void @hanoi(i32 %0, i32 %arg2, i32 %arg1, i32 %arg);
    call (i32) -> void @putint(i32 %arg2);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg1);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    ubr [ ^entry i32 %0, i32 %arg, i32 %arg2, i32 %arg1 ];
^entry1(i32 %arg, i32 %arg1):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg1);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    ret;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^super.header i32 %0 ], [ ^b ];
^super.header(i32 %arg):
    i32 %0 = add i32 %arg, i32 -15;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.67), [ ^while.body i32 %arg ], [ ^while.body1 i32 %arg ];
^b():
    ret i32 0;
^while.body(i32 %arg):
    i32 %0 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %0, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %1 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %1, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %2 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %2, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %3 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %3, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %4 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %4, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %5 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %5, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %6 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %6, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %7 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %7, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %8 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %8, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %9 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %9, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %10 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %10, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %11 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %11, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %12 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %12, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %13 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %13, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %14 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %14, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %15 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %15, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %16 = add i32 %arg, i32 -16;
    i1 %17 = scmp gt i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), [ ^super.header i32 %16 ], [ ^b ];
^while.body1(i32 %arg):
    i32 %0 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %0, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %1 = add i32 %arg, i32 -1;
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), [ ^while.body1 i32 %1 ], [ ^b ];
}
