internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @hanoi(i32 %n, i32 %one, i32 %two, i32 %three) -> void { NoMemoryRead NoMemoryWrite } {
^entry:
    i1 %0 = scmp eq i32 %n, i32 1;
    cbr i1 %0(prob = 0.5), ^entry1, ^if.else;
^entry1:
    call (i32) -> void @putint(i32 %one);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %three);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    ubr ^b;
^if.else:
    i32 %1 = add i32 %n, i32 -1;
    call (i32, i32, i32, i32) -> void @hanoi(i32 %1, i32 %one, i32 %three, i32 %two);
    call (i32) -> void @putint(i32 %one);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %three);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    call (i32, i32, i32, i32) -> void @hanoi(i32 %1, i32 %two, i32 %one, i32 %three);
    ubr ^b;
^b:
    ret;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^while.body, i32 %4] [^entry, i32 %0];
    i32 %3 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %3, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %4 = add i32 %2, i32 -1;
    i1 %5 = scmp gt i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^b:
    ret i32 0;
}
