internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @hanoi(i32 %n, i32 %one, i32 %two, i32 %three) -> void { NoMemoryRead NoMemoryWrite } {
  ^0:
    i1 %1 = icmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i32 %2 = phi [^0, i32 %n] [^if.else, i32 %5];
    i32 %3 = phi [^0, i32 %one] [^if.else, i32 %4];
    i32 %4 = phi [^0, i32 %two] [^if.else, i32 %3];
    i32 %5 = add i32 %2, i32 -1;
    call (i32, i32, i32, i32) -> void @hanoi(i32 %5, i32 %3, i32 %three, i32 %4);
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %three);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    i1 %6 = icmp neq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.else, ^if.then;
  ^if.then:
    i32 %7 = phi [^0, i32 %one] [^if.else, i32 %4];
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %three);
    call (i32) -> void @putch(i32 44);
    call (i32) -> void @putch(i32 32);
    ret;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %4];
    i32 %3 = call () -> i32 @getint();
    call (i32, i32, i32, i32) -> void @hanoi(i32 %3, i32 1, i32 2, i32 3);
    call (i32) -> void @putch(i32 10);
    i32 %4 = add i32 %2, i32 -1;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 0;
}
