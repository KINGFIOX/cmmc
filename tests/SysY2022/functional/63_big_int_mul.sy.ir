internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [40 * i32]* %result = alloc [40 * i32];
    [25 * i32]* %c2 = alloc [25 * i32];
    [25 * i32]* %c1 = alloc [25 * i32];
    i32* %0 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    i32* %1 = getelementptr &([40 * i32]* %result)[i64 0][i64 1];
    i32* %2 = getelementptr &([40 * i32]* %result)[i64 0][i64 2];
    i32* %3 = getelementptr &([40 * i32]* %result)[i64 0][i64 3];
    i32* %4 = getelementptr &([40 * i32]* %result)[i64 0][i64 4];
    i32* %5 = getelementptr &([40 * i32]* %result)[i64 0][i64 5];
    i32* %6 = getelementptr &([40 * i32]* %result)[i64 0][i64 6];
    i32* %7 = getelementptr &([40 * i32]* %result)[i64 0][i64 7];
    i32* %8 = getelementptr &([40 * i32]* %result)[i64 0][i64 8];
    i32* %9 = getelementptr &([40 * i32]* %result)[i64 0][i64 9];
    i32* %10 = getelementptr &([40 * i32]* %result)[i64 0][i64 10];
    i32* %11 = getelementptr &([40 * i32]* %result)[i64 0][i64 11];
    i32* %12 = getelementptr &([40 * i32]* %result)[i64 0][i64 12];
    i32* %13 = getelementptr &([40 * i32]* %result)[i64 0][i64 13];
    i32* %14 = getelementptr &([40 * i32]* %result)[i64 0][i64 14];
    i32* %15 = getelementptr &([40 * i32]* %result)[i64 0][i64 15];
    i32* %16 = getelementptr &([40 * i32]* %result)[i64 0][i64 16];
    i32* %17 = getelementptr &([40 * i32]* %result)[i64 0][i64 17];
    i32* %18 = getelementptr &([40 * i32]* %result)[i64 0][i64 18];
    i32* %19 = getelementptr &([40 * i32]* %result)[i64 0][i64 19];
    i32* %20 = getelementptr &([40 * i32]* %result)[i64 0][i64 20];
    i32* %21 = getelementptr &([40 * i32]* %result)[i64 0][i64 21];
    i32* %22 = getelementptr &([40 * i32]* %result)[i64 0][i64 22];
    i32* %23 = getelementptr &([40 * i32]* %result)[i64 0][i64 23];
    i32* %24 = getelementptr &([40 * i32]* %result)[i64 0][i64 24];
    i32* %25 = getelementptr &([40 * i32]* %result)[i64 0][i64 25];
    i32* %26 = getelementptr &([40 * i32]* %result)[i64 0][i64 26];
    i32* %27 = getelementptr &([40 * i32]* %result)[i64 0][i64 27];
    i32* %28 = getelementptr &([40 * i32]* %result)[i64 0][i64 28];
    i32* %29 = getelementptr &([40 * i32]* %result)[i64 0][i64 29];
    i32* %30 = getelementptr &([40 * i32]* %result)[i64 0][i64 30];
    i32* %31 = getelementptr &([40 * i32]* %result)[i64 0][i64 31];
    i32* %32 = getelementptr &([40 * i32]* %result)[i64 0][i64 32];
    i32* %33 = getelementptr &([40 * i32]* %result)[i64 0][i64 33];
    i32* %34 = getelementptr &([40 * i32]* %result)[i64 0][i64 34];
    i32* %35 = getelementptr &([40 * i32]* %result)[i64 0][i64 35];
    i32* %36 = getelementptr &([40 * i32]* %result)[i64 0][i64 36];
    i32* %37 = getelementptr &([40 * i32]* %result)[i64 0][i64 37];
    i32* %38 = getelementptr &([40 * i32]* %result)[i64 0][i64 38];
    i32* %39 = getelementptr &([40 * i32]* %result)[i64 0][i64 39];
    i32* %40 = getelementptr &([25 * i32]* %c1)[i64 0][i64 0];
    store i32* %40 with i32 1;
    i32* %41 = getelementptr &([25 * i32]* %c1)[i64 0][i64 1];
    store i32* %41 with i32 2;
    i32* %42 = getelementptr &([25 * i32]* %c1)[i64 0][i64 2];
    store i32* %42 with i32 3;
    i32* %43 = getelementptr &([25 * i32]* %c1)[i64 0][i64 3];
    store i32* %43 with i32 4;
    i32* %44 = getelementptr &([25 * i32]* %c1)[i64 0][i64 4];
    store i32* %44 with i32 5;
    i32* %45 = getelementptr &([25 * i32]* %c1)[i64 0][i64 5];
    store i32* %45 with i32 6;
    i32* %46 = getelementptr &([25 * i32]* %c1)[i64 0][i64 6];
    store i32* %46 with i32 7;
    i32* %47 = getelementptr &([25 * i32]* %c1)[i64 0][i64 7];
    store i32* %47 with i32 8;
    i32* %48 = getelementptr &([25 * i32]* %c1)[i64 0][i64 8];
    store i32* %48 with i32 9;
    i32* %49 = getelementptr &([25 * i32]* %c1)[i64 0][i64 9];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([25 * i32]* %c1)[i64 0][i64 10];
    store i32* %50 with i32 1;
    i32* %51 = getelementptr &([25 * i32]* %c1)[i64 0][i64 11];
    store i32* %51 with i32 2;
    i32* %52 = getelementptr &([25 * i32]* %c1)[i64 0][i64 12];
    store i32* %52 with i32 3;
    i32* %53 = getelementptr &([25 * i32]* %c1)[i64 0][i64 13];
    store i32* %53 with i32 4;
    i32* %54 = getelementptr &([25 * i32]* %c1)[i64 0][i64 14];
    store i32* %54 with i32 5;
    i32* %55 = getelementptr &([25 * i32]* %c1)[i64 0][i64 15];
    store i32* %55 with i32 6;
    i32* %56 = getelementptr &([25 * i32]* %c1)[i64 0][i64 16];
    store i32* %56 with i32 7;
    i32* %57 = getelementptr &([25 * i32]* %c1)[i64 0][i64 17];
    store i32* %57 with i32 8;
    i32* %58 = getelementptr &([25 * i32]* %c1)[i64 0][i64 18];
    store i32* %58 with i32 9;
    i32* %59 = getelementptr &([25 * i32]* %c1)[i64 0][i64 19];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([25 * i32]* %c2)[i64 0][i64 0];
    store i32* %60 with i32 2;
    i32* %61 = getelementptr &([25 * i32]* %c2)[i64 0][i64 1];
    store i32* %61 with i32 3;
    i32* %62 = getelementptr &([25 * i32]* %c2)[i64 0][i64 2];
    store i32* %62 with i32 4;
    i32* %63 = getelementptr &([25 * i32]* %c2)[i64 0][i64 3];
    store i32* %63 with i32 2;
    i32* %64 = getelementptr &([25 * i32]* %c2)[i64 0][i64 4];
    store i32* %64 with i32 5;
    i32* %65 = getelementptr &([25 * i32]* %c2)[i64 0][i64 5];
    store i32* %65 with i32 7;
    i32* %66 = getelementptr &([25 * i32]* %c2)[i64 0][i64 6];
    store i32* %66 with i32 9;
    i32* %67 = getelementptr &([25 * i32]* %c2)[i64 0][i64 7];
    store i32* %67 with i32 9;
    i32* %68 = getelementptr &([25 * i32]* %c2)[i64 0][i64 8];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([25 * i32]* %c2)[i64 0][i64 9];
    store i32* %69 with i32 1;
    i32* %70 = getelementptr &([25 * i32]* %c2)[i64 0][i64 10];
    store i32* %70 with i32 9;
    i32* %71 = getelementptr &([25 * i32]* %c2)[i64 0][i64 11];
    store i32* %71 with i32 8;
    i32* %72 = getelementptr &([25 * i32]* %c2)[i64 0][i64 12];
    store i32* %72 with i32 7;
    i32* %73 = getelementptr &([25 * i32]* %c2)[i64 0][i64 13];
    store i32* %73 with i32 6;
    i32* %74 = getelementptr &([25 * i32]* %c2)[i64 0][i64 14];
    store i32* %74 with i32 4;
    i32* %75 = getelementptr &([25 * i32]* %c2)[i64 0][i64 15];
    store i32* %75 with i32 3;
    i32* %76 = getelementptr &([25 * i32]* %c2)[i64 0][i64 16];
    store i32* %76 with i32 2;
    i32* %77 = getelementptr &([25 * i32]* %c2)[i64 0][i64 17];
    store i32* %77 with i32 1;
    i32* %78 = getelementptr &([25 * i32]* %c2)[i64 0][i64 18];
    store i32* %78 with i32 2;
    i32* %79 = getelementptr &([25 * i32]* %c2)[i64 0][i64 19];
    store i32* %79 with i32 2;
    store i32* %0 with i32 0;
    store i32* %1 with i32 0;
    store i32* %2 with i32 0;
    store i32* %3 with i32 0;
    store i32* %4 with i32 0;
    store i32* %5 with i32 0;
    store i32* %6 with i32 0;
    store i32* %7 with i32 0;
    store i32* %8 with i32 0;
    store i32* %9 with i32 0;
    store i32* %10 with i32 0;
    store i32* %11 with i32 0;
    store i32* %12 with i32 0;
    store i32* %13 with i32 0;
    store i32* %14 with i32 0;
    store i32* %15 with i32 0;
    store i32* %16 with i32 0;
    store i32* %17 with i32 0;
    store i32* %18 with i32 0;
    store i32* %19 with i32 0;
    store i32* %20 with i32 0;
    store i32* %21 with i32 0;
    store i32* %22 with i32 0;
    store i32* %23 with i32 0;
    store i32* %24 with i32 0;
    store i32* %25 with i32 0;
    store i32* %26 with i32 0;
    store i32* %27 with i32 0;
    store i32* %28 with i32 0;
    store i32* %29 with i32 0;
    store i32* %30 with i32 0;
    store i32* %31 with i32 0;
    store i32* %32 with i32 0;
    store i32* %33 with i32 0;
    store i32* %34 with i32 0;
    store i32* %35 with i32 0;
    store i32* %36 with i32 0;
    store i32* %37 with i32 0;
    store i32* %38 with i32 0;
    store i32* %39 with i32 0;
    ubr ^while.body;
^while.body:
    i32 %80 = phi [^b1, i32 %101] [^entry, i32 19];
    i32 %81 = phi [^b1, i32 %100] [^entry, i32 39];
    i32* %82 = getelementptr &([25 * i32]* %c2)[i64 0][i32 %80];
    i32 %83 = load i32* %82;
    ubr ^while.body1;
^while.body1:
    i32 %84 = phi [^b, i32 %97] [^while.body, i32 19];
    i32 %85 = phi [^b, i32 %98] [^while.body, i32 %81];
    i32* %86 = getelementptr &([40 * i32]* %result)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([25 * i32]* %c1)[i64 0][i32 %84];
    i32 %89 = load i32* %88;
    i32 %90 = mul i32 %83, i32 %89;
    i32 %91 = add i32 %90, i32 %87;
    i1 %92 = scmp gt i32 %91, i32 9;
    cbr i1 %92(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %86 with i32 %91;
    i32* %93 = getelementptr &(i32* %86)[i64 -1];
    i32 %94 = load i32* %93;
    i32 %95 = sdiv i32 %91, i32 10;
    i32 %96 = add i32 %94, i32 %95;
    store i32* %93 with i32 %96;
    ubr ^b;
^if.else:
    store i32* %86 with i32 %91;
    ubr ^b;
^b:
    i32 %97 = add i32 %84, i32 -1;
    i32 %98 = add i32 %85, i32 -1;
    i1 %99 = scmp gt i32 %97, i32 -1;
    cbr i1 %99(prob = 0.95), ^while.body1, ^b1;
^b1:
    i32 %100 = add i32 %85, i32 18;
    i32 %101 = add i32 %80, i32 -1;
    i1 %102 = scmp gt i32 %101, i32 -1;
    cbr i1 %102(prob = 0.95), ^while.body, ^b2;
^b2:
    i32 %103 = load i32* %0;
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.5), ^if.then1, ^while.body2;
^if.then1:
    i32 %105 = load i32* %0;
    call (i32) -> void @putint(i32 %105);
    ubr ^while.body2;
^while.body2:
    i32 %106 = phi [^if.then1, i32 1] [^b2, i32 1] [^while.body2, i32 %109];
    i32* %107 = getelementptr &([40 * i32]* %result)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    call (i32) -> void @putint(i32 %108);
    i32 %109 = add i32 %106, i32 1;
    i1 %110 = scmp lt i32 %109, i32 40;
    cbr i1 %110(prob = 0.97), ^while.body2, ^b3;
^b3:
    ret i32 0;
}
