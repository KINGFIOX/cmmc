internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @len { ReadOnly } = 20;
func @main() -> i32 { Entry } {
^entry:
    [40 * i32]* %result = alloc [40 * i32];
    [25 * i32]* %c2 = alloc [25 * i32];
    [25 * i32]* %c1 = alloc [25 * i32];
    i32* %len2 = alloc i32;
    i32* %len1 = alloc i32;
    [20 * i32]* %mult2 = alloc [20 * i32];
    [20 * i32]* %mult1 = alloc [20 * i32];
    i32* %temp = alloc i32;
    i32* %n = alloc i32;
    i32* %t = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %t with i32 0;
    store i32* %n with i32 0;
    store i32* %temp with i32 0;
    i32* %0 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 2];
    store i32* %2 with i32 3;
    i32* %3 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 3];
    store i32* %3 with i32 4;
    i32* %4 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 4];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 5];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 6];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 7];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 10];
    i32* %10 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 9];
    store i32* %10 with i32 0;
    store i32* %9 with i32 1;
    i32* %11 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 11];
    store i32* %11 with i32 2;
    i32* %12 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 13];
    store i32* %13 with i32 4;
    i32* %14 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 14];
    store i32* %14 with i32 5;
    i32* %15 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 15];
    store i32* %15 with i32 6;
    i32* %16 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 16];
    store i32* %16 with i32 7;
    i32* %17 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 17];
    store i32* %17 with i32 8;
    i32* %18 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 18];
    store i32* %18 with i32 9;
    i32* %19 = getelementptr &([20 * i32]* %mult1)[i64 1][i64 0];
    i32* %20 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 19];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 0];
    store i32* %21 with i32 2;
    i32* %22 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 1];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 2];
    store i32* %23 with i32 4;
    i32* %24 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 3];
    store i32* %24 with i32 2;
    i32* %25 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 4];
    store i32* %25 with i32 5;
    i32* %26 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 5];
    store i32* %26 with i32 7;
    i32* %27 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 6];
    store i32* %27 with i32 9;
    i32* %28 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 7];
    store i32* %28 with i32 9;
    i32* %29 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 9];
    i32* %30 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 8];
    store i32* %30 with i32 0;
    store i32* %29 with i32 1;
    i32* %31 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 10];
    store i32* %31 with i32 9;
    i32* %32 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 11];
    store i32* %32 with i32 8;
    i32* %33 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 12];
    store i32* %33 with i32 7;
    i32* %34 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 13];
    store i32* %34 with i32 6;
    i32* %35 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 14];
    store i32* %35 with i32 4;
    i32* %36 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 15];
    store i32* %36 with i32 3;
    i32* %37 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 16];
    store i32* %37 with i32 2;
    i32* %38 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 17];
    store i32* %38 with i32 1;
    i32* %39 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 18];
    store i32* %39 with i32 2;
    i32* %40 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 19];
    store i32* %40 with i32 2;
    i32* %41 = getelementptr &([20 * i32]* %mult2)[i64 1][i64 0];
    store i32* %len1 with i32 20;
    store i32* %len2 with i32 20;
    i32* %42 = getelementptr &([40 * i32]* %result)[i64 1][i64 0];
    i32* %43 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([40 * i32]* %result)[i64 0][i64 1];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([40 * i32]* %result)[i64 0][i64 2];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([40 * i32]* %result)[i64 0][i64 3];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([40 * i32]* %result)[i64 0][i64 4];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([40 * i32]* %result)[i64 0][i64 5];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([40 * i32]* %result)[i64 0][i64 6];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([40 * i32]* %result)[i64 0][i64 7];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([40 * i32]* %result)[i64 0][i64 8];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([40 * i32]* %result)[i64 0][i64 9];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([40 * i32]* %result)[i64 0][i64 10];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([40 * i32]* %result)[i64 0][i64 11];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([40 * i32]* %result)[i64 0][i64 12];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([40 * i32]* %result)[i64 0][i64 13];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([40 * i32]* %result)[i64 0][i64 14];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([40 * i32]* %result)[i64 0][i64 15];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([40 * i32]* %result)[i64 0][i64 16];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([40 * i32]* %result)[i64 0][i64 17];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([40 * i32]* %result)[i64 0][i64 18];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([40 * i32]* %result)[i64 0][i64 19];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([40 * i32]* %result)[i64 0][i64 20];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([40 * i32]* %result)[i64 0][i64 21];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([40 * i32]* %result)[i64 0][i64 22];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([40 * i32]* %result)[i64 0][i64 23];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([40 * i32]* %result)[i64 0][i64 24];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([40 * i32]* %result)[i64 0][i64 25];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([40 * i32]* %result)[i64 0][i64 26];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([40 * i32]* %result)[i64 0][i64 27];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([40 * i32]* %result)[i64 0][i64 28];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([40 * i32]* %result)[i64 0][i64 29];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([40 * i32]* %result)[i64 0][i64 30];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([40 * i32]* %result)[i64 0][i64 31];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([40 * i32]* %result)[i64 0][i64 32];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([40 * i32]* %result)[i64 0][i64 33];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([40 * i32]* %result)[i64 0][i64 34];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([40 * i32]* %result)[i64 0][i64 35];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([40 * i32]* %result)[i64 0][i64 36];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &([40 * i32]* %result)[i64 0][i64 37];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &([40 * i32]* %result)[i64 0][i64 38];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &([40 * i32]* %result)[i64 0][i64 39];
    store i32* %82 with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %83 = load i32* %i;
    i32 %84 = load i32* %len1;
    i1 %85 = scmp lt i32 %83, i32 %84;
    i32 %86 = zext i1 %85 to i32;
    i1 %87 = scmp neq i32 %86, i32 0;
    cbr i1 %87(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %88 = load i32* %i;
    i64 %89 = sext i32 %88 to i64;
    i32* %90 = getelementptr &([25 * i32]* %c1)[i64 0][i64 %89];
    i32 %91 = load i32* %i;
    i64 %92 = sext i32 %91 to i64;
    i32* %93 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 %92];
    i32 %94 = load i32* %93;
    store i32* %90 with i32 %94;
    i32 %95 = load i32* %i;
    i32 %96 = add i32 %95, i32 1;
    store i32* %i with i32 %96;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %97 = load i32* %i;
    i32 %98 = load i32* %len2;
    i1 %99 = scmp lt i32 %97, i32 %98;
    i32 %100 = zext i1 %99 to i32;
    i1 %101 = scmp neq i32 %100, i32 0;
    cbr i1 %101(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %102 = load i32* %i;
    i64 %103 = sext i32 %102 to i64;
    i32* %104 = getelementptr &([25 * i32]* %c2)[i64 0][i64 %103];
    i32 %105 = load i32* %i;
    i64 %106 = sext i32 %105 to i64;
    i32* %107 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 %106];
    i32 %108 = load i32* %107;
    store i32* %104 with i32 %108;
    i32 %109 = load i32* %i;
    i32 %110 = add i32 %109, i32 1;
    store i32* %i with i32 %110;
    ubr ^while.header1;
^b1:
    i32 %111 = load i32* %len1;
    i32 %112 = load i32* %len2;
    i32 %113 = add i32 %111, i32 %112;
    i32 %114 = sub i32 %113, i32 1;
    store i32* %n with i32 %114;
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %115 = load i32* %i;
    i32 %116 = load i32* %n;
    i1 %117 = scmp le i32 %115, i32 %116;
    i32 %118 = zext i1 %117 to i32;
    i1 %119 = scmp neq i32 %118, i32 0;
    cbr i1 %119(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %120 = load i32* %i;
    i64 %121 = sext i32 %120 to i64;
    i32* %122 = getelementptr &([40 * i32]* %result)[i64 0][i64 %121];
    store i32* %122 with i32 0;
    i32 %123 = load i32* %i;
    i32 %124 = add i32 %123, i32 1;
    store i32* %i with i32 %124;
    ubr ^while.header2;
^b2:
    store i32* %temp with i32 0;
    i32 %125 = load i32* %len2;
    i32 %126 = sub i32 %125, i32 1;
    store i32* %i with i32 %126;
    ubr ^while.header3;
^while.header3:
    i32 %127 = load i32* %i;
    i1 %128 = scmp gt i32 %127, i32 -1;
    i32 %129 = zext i1 %128 to i32;
    i1 %130 = scmp neq i32 %129, i32 0;
    cbr i1 %130(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %131 = load i32* %i;
    i64 %132 = sext i32 %131 to i64;
    i32* %133 = getelementptr &([25 * i32]* %c2)[i64 0][i64 %132];
    i32 %134 = load i32* %133;
    store i32* %t with i32 %134;
    i32 %135 = load i32* %len1;
    i32 %136 = sub i32 %135, i32 1;
    store i32* %j with i32 %136;
    ubr ^while.header4;
^b3:
    i32* %137 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    i32 %138 = load i32* %137;
    i1 %139 = scmp neq i32 %138, i32 0;
    i32 %140 = zext i1 %139 to i32;
    i1 %141 = scmp neq i32 %140, i32 0;
    cbr i1 %141(prob = 0.5), ^if.then, ^b4;
^if.then:
    i32* %142 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    i32 %143 = load i32* %142;
    call (i32) -> void @putint(i32 %143);
    ubr ^b4;
^while.header4:
    i32 %144 = load i32* %j;
    i1 %145 = scmp gt i32 %144, i32 -1;
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.97), ^while.body4, ^b5;
^b4:
    store i32* %i with i32 1;
    ubr ^while.header5;
^b5:
    i32 %148 = load i32* %n;
    i32 %149 = load i32* %len1;
    i32 %150 = add i32 %148, i32 %149;
    i32 %151 = sub i32 %150, i32 1;
    store i32* %n with i32 %151;
    i32 %152 = load i32* %i;
    i32 %153 = sub i32 %152, i32 1;
    store i32* %i with i32 %153;
    ubr ^while.header3;
^while.body4:
    i32 %154 = load i32* %n;
    i64 %155 = sext i32 %154 to i64;
    i32* %156 = getelementptr &([40 * i32]* %result)[i64 0][i64 %155];
    i32 %157 = load i32* %156;
    i32 %158 = load i32* %t;
    i32 %159 = load i32* %j;
    i64 %160 = sext i32 %159 to i64;
    i32* %161 = getelementptr &([25 * i32]* %c1)[i64 0][i64 %160];
    i32 %162 = load i32* %161;
    i32 %163 = mul i32 %158, i32 %162;
    i32 %164 = add i32 %157, i32 %163;
    store i32* %temp with i32 %164;
    i32 %165 = load i32* %temp;
    i1 %166 = scmp ge i32 %165, i32 10;
    i32 %167 = zext i1 %166 to i32;
    i1 %168 = scmp neq i32 %167, i32 0;
    cbr i1 %168(prob = 0.5), ^if.then1, ^if.else;
^while.header5:
    i32 %169 = load i32* %i;
    i32 %170 = load i32* %len1;
    i32 %171 = load i32* %len2;
    i32 %172 = add i32 %170, i32 %171;
    i32 %173 = sub i32 %172, i32 1;
    i1 %174 = scmp le i32 %169, i32 %173;
    i32 %175 = zext i1 %174 to i32;
    i1 %176 = scmp neq i32 %175, i32 0;
    cbr i1 %176(prob = 0.97), ^while.body5, ^b6;
^if.then1:
    i32 %177 = load i32* %n;
    i64 %178 = sext i32 %177 to i64;
    i32* %179 = getelementptr &([40 * i32]* %result)[i64 0][i64 %178];
    i32 %180 = load i32* %temp;
    store i32* %179 with i32 %180;
    i32 %181 = load i32* %n;
    i32 %182 = sub i32 %181, i32 1;
    i64 %183 = sext i32 %182 to i64;
    i32* %184 = getelementptr &([40 * i32]* %result)[i64 0][i64 %183];
    i32 %185 = load i32* %n;
    i32 %186 = sub i32 %185, i32 1;
    i64 %187 = sext i32 %186 to i64;
    i32* %188 = getelementptr &([40 * i32]* %result)[i64 0][i64 %187];
    i32 %189 = load i32* %188;
    i32 %190 = load i32* %temp;
    i32 %191 = sdiv i32 %190, i32 10;
    i32 %192 = add i32 %189, i32 %191;
    store i32* %184 with i32 %192;
    ubr ^b7;
^if.else:
    i32 %193 = load i32* %n;
    i64 %194 = sext i32 %193 to i64;
    i32* %195 = getelementptr &([40 * i32]* %result)[i64 0][i64 %194];
    i32 %196 = load i32* %temp;
    store i32* %195 with i32 %196;
    ubr ^b7;
^while.body5:
    i32 %197 = load i32* %i;
    i64 %198 = sext i32 %197 to i64;
    i32* %199 = getelementptr &([40 * i32]* %result)[i64 0][i64 %198];
    i32 %200 = load i32* %199;
    call (i32) -> void @putint(i32 %200);
    i32 %201 = load i32* %i;
    i32 %202 = add i32 %201, i32 1;
    store i32* %i with i32 %202;
    ubr ^while.header5;
^b6:
    ret i32 0;
^b7:
    i32 %203 = load i32* %j;
    i32 %204 = sub i32 %203, i32 1;
    store i32* %j with i32 %204;
    i32 %205 = load i32* %n;
    i32 %206 = sub i32 %205, i32 1;
    store i32* %n with i32 %206;
    ubr ^while.header4;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
