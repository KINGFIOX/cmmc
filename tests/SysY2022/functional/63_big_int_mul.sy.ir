internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [40 * i32]* %result = alloc [40 * i32];
    [25 * i32]* %c2 = alloc [25 * i32];
    [25 * i32]* %c1 = alloc [25 * i32];
    [20 * i32]* %mult2 = alloc [20 * i32];
    [20 * i32]* %mult1 = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 2];
    store i32* %2 with i32 3;
    i32* %3 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 3];
    store i32* %3 with i32 4;
    i32* %4 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 4];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 5];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 6];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 7];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 10];
    i32* %10 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 9];
    store i32* %10 with i32 0;
    store i32* %9 with i32 1;
    i32* %11 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 11];
    store i32* %11 with i32 2;
    i32* %12 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 13];
    store i32* %13 with i32 4;
    i32* %14 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 14];
    store i32* %14 with i32 5;
    i32* %15 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 15];
    store i32* %15 with i32 6;
    i32* %16 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 16];
    store i32* %16 with i32 7;
    i32* %17 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 17];
    store i32* %17 with i32 8;
    i32* %18 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 18];
    store i32* %18 with i32 9;
    i32* %19 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 0];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 1];
    store i32* %21 with i32 3;
    i32* %22 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 2];
    store i32* %22 with i32 4;
    i32* %23 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 3];
    store i32* %23 with i32 2;
    i32* %24 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 4];
    store i32* %24 with i32 5;
    i32* %25 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 5];
    store i32* %25 with i32 7;
    i32* %26 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 6];
    store i32* %26 with i32 9;
    i32* %27 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 7];
    store i32* %27 with i32 9;
    i32* %28 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 9];
    i32* %29 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 8];
    store i32* %29 with i32 0;
    store i32* %28 with i32 1;
    i32* %30 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 10];
    store i32* %30 with i32 9;
    i32* %31 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 11];
    store i32* %31 with i32 8;
    i32* %32 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 12];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 13];
    store i32* %33 with i32 6;
    i32* %34 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 14];
    store i32* %34 with i32 4;
    i32* %35 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 15];
    store i32* %35 with i32 3;
    i32* %36 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 16];
    store i32* %36 with i32 2;
    i32* %37 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 17];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 18];
    store i32* %38 with i32 2;
    i32* %39 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 19];
    store i32* %39 with i32 2;
    i32* %40 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([40 * i32]* %result)[i64 0][i64 1];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([40 * i32]* %result)[i64 0][i64 2];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([40 * i32]* %result)[i64 0][i64 3];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([40 * i32]* %result)[i64 0][i64 4];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([40 * i32]* %result)[i64 0][i64 5];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([40 * i32]* %result)[i64 0][i64 6];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([40 * i32]* %result)[i64 0][i64 7];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([40 * i32]* %result)[i64 0][i64 8];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([40 * i32]* %result)[i64 0][i64 9];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([40 * i32]* %result)[i64 0][i64 10];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([40 * i32]* %result)[i64 0][i64 11];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([40 * i32]* %result)[i64 0][i64 12];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([40 * i32]* %result)[i64 0][i64 13];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([40 * i32]* %result)[i64 0][i64 14];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([40 * i32]* %result)[i64 0][i64 15];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([40 * i32]* %result)[i64 0][i64 16];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([40 * i32]* %result)[i64 0][i64 17];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([40 * i32]* %result)[i64 0][i64 18];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([40 * i32]* %result)[i64 0][i64 19];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([40 * i32]* %result)[i64 0][i64 20];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([40 * i32]* %result)[i64 0][i64 21];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([40 * i32]* %result)[i64 0][i64 22];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([40 * i32]* %result)[i64 0][i64 23];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([40 * i32]* %result)[i64 0][i64 24];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([40 * i32]* %result)[i64 0][i64 25];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([40 * i32]* %result)[i64 0][i64 26];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([40 * i32]* %result)[i64 0][i64 27];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([40 * i32]* %result)[i64 0][i64 28];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([40 * i32]* %result)[i64 0][i64 29];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([40 * i32]* %result)[i64 0][i64 30];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([40 * i32]* %result)[i64 0][i64 31];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([40 * i32]* %result)[i64 0][i64 32];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([40 * i32]* %result)[i64 0][i64 33];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([40 * i32]* %result)[i64 0][i64 34];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([40 * i32]* %result)[i64 0][i64 35];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([40 * i32]* %result)[i64 0][i64 36];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([40 * i32]* %result)[i64 0][i64 37];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([40 * i32]* %result)[i64 0][i64 38];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([40 * i32]* %result)[i64 0][i64 39];
    store i32* %79 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %80 = phi [^while.body, i32 %85] [^entry, i32 0];
    i1 %81 = scmp lt i32 %80, i32 20;
    cbr i1 %81(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %82 = getelementptr &([25 * i32]* %c1)[i64 0][i32 %80];
    i32* %83 = getelementptr &([20 * i32]* %mult1)[i64 0][i32 %80];
    i32 %84 = load i32* %83;
    store i32* %82 with i32 %84;
    i32 %85 = add i32 %80, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %86 = phi [^while.header, i32 0] [^while.body1, i32 %91];
    i1 %87 = scmp lt i32 %86, i32 20;
    cbr i1 %87(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %88 = getelementptr &([25 * i32]* %c2)[i64 0][i32 %86];
    i32* %89 = getelementptr &([20 * i32]* %mult2)[i64 0][i32 %86];
    i32 %90 = load i32* %89;
    store i32* %88 with i32 %90;
    i32 %91 = add i32 %86, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %92 = phi [^while.header1, i32 0] [^while.body2, i32 %95];
    i1 %93 = scmp lt i32 %92, i32 40;
    cbr i1 %93(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i32* %94 = getelementptr &([40 * i32]* %result)[i64 0][i32 %92];
    store i32* %94 with i32 0;
    i32 %95 = add i32 %92, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %96 = phi [^while.header2, i32 19] [^b1, i32 %110];
    i32 %97 = phi [^while.header2, i32 39] [^b1, i32 %109];
    i1 %98 = scmp gt i32 %96, i32 -1;
    cbr i1 %98(prob = 0.97), ^while.body3, ^b;
^while.body3:
    i32* %99 = getelementptr &([25 * i32]* %c2)[i64 0][i32 %96];
    i32 %100 = load i32* %99;
    ubr ^while.header4;
^b:
    i32 %101 = load i32* %40;
    i1 %102 = scmp neq i32 %101, i32 0;
    cbr i1 %102(prob = 0.5), ^if.then, ^while.header5;
^if.then:
    i32 %103 = load i32* %40;
    call (i32) -> void @putint(i32 %103);
    ubr ^while.header5;
^while.header4:
    i32 %104 = phi [^b3, i32 %125] [^while.body3, i32 19];
    i32 %105 = phi [^b3, i32 %126] [^while.body3, i32 %97];
    i1 %106 = scmp gt i32 %104, i32 -1;
    cbr i1 %106(prob = 0.97), ^while.body4, ^b1;
^while.header5:
    i32 %107 = phi [^if.then, i32 1] [^b, i32 1] [^while.body5, i32 %120];
    i1 %108 = scmp lt i32 %107, i32 40;
    cbr i1 %108(prob = 0.97), ^while.body5, ^b2;
^b1:
    i32 %109 = add i32 %105, i32 19;
    i32 %110 = add i32 %96, i32 -1;
    ubr ^while.header3;
^while.body4:
    i32* %111 = getelementptr &([40 * i32]* %result)[i64 0][i32 %105];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([25 * i32]* %c1)[i64 0][i32 %104];
    i32 %114 = load i32* %113;
    i32 %115 = mul i32 %100, i32 %114;
    i32 %116 = add i32 %112, i32 %115;
    i1 %117 = scmp gt i32 %116, i32 9;
    cbr i1 %117(prob = 0.5), ^if.then1, ^if.else;
^while.body5:
    i32* %118 = getelementptr &([40 * i32]* %result)[i64 0][i32 %107];
    i32 %119 = load i32* %118;
    call (i32) -> void @putint(i32 %119);
    i32 %120 = add i32 %107, i32 1;
    ubr ^while.header5;
^b2:
    ret i32 0;
^if.then1:
    store i32* %111 with i32 %116;
    i32* %121 = getelementptr &(i32* %111)[i64 -1];
    i32 %122 = load i32* %121;
    i32 %123 = sdiv i32 %116, i32 10;
    i32 %124 = add i32 %122, i32 %123;
    store i32* %121 with i32 %124;
    ubr ^b3;
^if.else:
    store i32* %111 with i32 %116;
    ubr ^b3;
^b3:
    i32 %125 = add i32 %104, i32 -1;
    i32 %126 = add i32 %105, i32 -1;
    ubr ^while.header4;
}
