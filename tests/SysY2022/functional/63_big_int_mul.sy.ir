internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [40 * i32]* %result = alloc [40 * i32];
    [25 * i32]* %c2 = alloc [25 * i32];
    [25 * i32]* %c1 = alloc [25 * i32];
    [20 * i32]* %mult2 = alloc [20 * i32];
    [20 * i32]* %mult1 = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 2];
    store i32* %2 with i32 3;
    i32* %3 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 3];
    store i32* %3 with i32 4;
    i32* %4 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 4];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 5];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 6];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 7];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 10];
    i32* %10 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 9];
    store i32* %10 with i32 0;
    store i32* %9 with i32 1;
    i32* %11 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 11];
    store i32* %11 with i32 2;
    i32* %12 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 13];
    store i32* %13 with i32 4;
    i32* %14 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 14];
    store i32* %14 with i32 5;
    i32* %15 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 15];
    store i32* %15 with i32 6;
    i32* %16 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 16];
    store i32* %16 with i32 7;
    i32* %17 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 17];
    store i32* %17 with i32 8;
    i32* %18 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 18];
    store i32* %18 with i32 9;
    i32* %19 = getelementptr &([20 * i32]* %mult1)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 0];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 1];
    store i32* %21 with i32 3;
    i32* %22 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 2];
    store i32* %22 with i32 4;
    i32* %23 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 3];
    store i32* %23 with i32 2;
    i32* %24 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 4];
    store i32* %24 with i32 5;
    i32* %25 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 5];
    store i32* %25 with i32 7;
    i32* %26 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 6];
    store i32* %26 with i32 9;
    i32* %27 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 7];
    store i32* %27 with i32 9;
    i32* %28 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 9];
    i32* %29 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 8];
    store i32* %29 with i32 0;
    store i32* %28 with i32 1;
    i32* %30 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 10];
    store i32* %30 with i32 9;
    i32* %31 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 11];
    store i32* %31 with i32 8;
    i32* %32 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 12];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 13];
    store i32* %33 with i32 6;
    i32* %34 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 14];
    store i32* %34 with i32 4;
    i32* %35 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 15];
    store i32* %35 with i32 3;
    i32* %36 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 16];
    store i32* %36 with i32 2;
    i32* %37 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 17];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 18];
    store i32* %38 with i32 2;
    i32* %39 = getelementptr &([20 * i32]* %mult2)[i64 0][i64 19];
    store i32* %39 with i32 2;
    i32* %40 = getelementptr &([40 * i32]* %result)[i64 0][i64 0];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([40 * i32]* %result)[i64 0][i64 1];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([40 * i32]* %result)[i64 0][i64 2];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([40 * i32]* %result)[i64 0][i64 3];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([40 * i32]* %result)[i64 0][i64 4];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([40 * i32]* %result)[i64 0][i64 5];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([40 * i32]* %result)[i64 0][i64 6];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([40 * i32]* %result)[i64 0][i64 7];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([40 * i32]* %result)[i64 0][i64 8];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([40 * i32]* %result)[i64 0][i64 9];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([40 * i32]* %result)[i64 0][i64 10];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([40 * i32]* %result)[i64 0][i64 11];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([40 * i32]* %result)[i64 0][i64 12];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([40 * i32]* %result)[i64 0][i64 13];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([40 * i32]* %result)[i64 0][i64 14];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([40 * i32]* %result)[i64 0][i64 15];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([40 * i32]* %result)[i64 0][i64 16];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([40 * i32]* %result)[i64 0][i64 17];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([40 * i32]* %result)[i64 0][i64 18];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([40 * i32]* %result)[i64 0][i64 19];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([40 * i32]* %result)[i64 0][i64 20];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([40 * i32]* %result)[i64 0][i64 21];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([40 * i32]* %result)[i64 0][i64 22];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([40 * i32]* %result)[i64 0][i64 23];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([40 * i32]* %result)[i64 0][i64 24];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([40 * i32]* %result)[i64 0][i64 25];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([40 * i32]* %result)[i64 0][i64 26];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([40 * i32]* %result)[i64 0][i64 27];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([40 * i32]* %result)[i64 0][i64 28];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([40 * i32]* %result)[i64 0][i64 29];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([40 * i32]* %result)[i64 0][i64 30];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([40 * i32]* %result)[i64 0][i64 31];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([40 * i32]* %result)[i64 0][i64 32];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([40 * i32]* %result)[i64 0][i64 33];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([40 * i32]* %result)[i64 0][i64 34];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([40 * i32]* %result)[i64 0][i64 35];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([40 * i32]* %result)[i64 0][i64 36];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([40 * i32]* %result)[i64 0][i64 37];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([40 * i32]* %result)[i64 0][i64 38];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([40 * i32]* %result)[i64 0][i64 39];
    store i32* %79 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %80 = phi [^while.body, i32 %89] [^entry, i32 0];
    i32 %81 = phi [^while.body, i32 %81] [^entry, i32 20];
    i32 %82 = phi [^while.body, i32 %82] [^entry, i32 20];
    i32 %83 = phi [^while.body, i32 %81] [^entry, i32 20];
    i32 %84 = phi [^while.body, i32 %89] [^entry, i32 0];
    i1 %85 = scmp lt i32 %84, i32 %83;
    cbr i1 %85(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %86 = getelementptr &([25 * i32]* %c1)[i64 0][i32 %80];
    i32* %87 = getelementptr &([20 * i32]* %mult1)[i64 0][i32 %80];
    i32 %88 = load i32* %87;
    store i32* %86 with i32 %88;
    i32 %89 = add i32 %80, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %90 = phi [^while.header, i32 0] [^while.body1, i32 %98];
    i32 %91 = phi [^while.header, i32 %81] [^while.body1, i32 %91];
    i32 %92 = phi [^while.header, i32 %82] [^while.body1, i32 %92];
    i32 %93 = phi [^while.header, i32 0] [^while.body1, i32 %98];
    i1 %94 = scmp lt i32 %93, i32 %92;
    cbr i1 %94(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32* %95 = getelementptr &([25 * i32]* %c2)[i64 0][i32 %90];
    i32* %96 = getelementptr &([20 * i32]* %mult2)[i64 0][i32 %90];
    i32 %97 = load i32* %96;
    store i32* %95 with i32 %97;
    i32 %98 = add i32 %90, i32 1;
    ubr ^while.header1;
^b:
    i32 %99 = add i32 %92, i32 -1;
    i32 %100 = add i32 %99, i32 %91;
    ubr ^while.header2;
^while.header2:
    i32 %101 = phi [^while.body2, i32 %109] [^b, i32 0];
    i32 %102 = phi [^while.body2, i32 %102] [^b, i32 %100];
    i32 %103 = phi [^while.body2, i32 %103] [^b, i32 %91];
    i32 %104 = phi [^while.body2, i32 %104] [^b, i32 %92];
    i32 %105 = phi [^while.body2, i32 %102] [^b, i32 %100];
    i32 %106 = phi [^while.body2, i32 %109] [^b, i32 0];
    i1 %107 = scmp le i32 %106, i32 %105;
    cbr i1 %107(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %108 = getelementptr &([40 * i32]* %result)[i64 0][i32 %101];
    store i32* %108 with i32 0;
    i32 %109 = add i32 %101, i32 1;
    ubr ^while.header2;
^b1:
    i32 %110 = add i32 %104, i32 -1;
    ubr ^while.header3;
^while.header3:
    i32 %111 = phi [^b3, i32 %140] [^b1, i32 %110];
    i32 %112 = phi [^b3, i32 %139] [^b1, i32 %102];
    i32 %113 = phi [^b3, i32 %127] [^b1, i32 %103];
    i32 %114 = phi [^b3, i32 %128] [^b1, i32 %104];
    i32 %115 = phi [^b3, i32 %140] [^b1, i32 %110];
    i1 %116 = scmp gt i32 %115, i32 -1;
    cbr i1 %116(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    i32* %117 = getelementptr &([25 * i32]* %c2)[i64 0][i32 %111];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %113, i32 -1;
    ubr ^while.header4;
^b2:
    i32 %120 = load i32* %40;
    i1 %121 = scmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.5), ^if.then, ^while.header5;
^if.then:
    i32 %122 = load i32* %40;
    call (i32) -> void @putint(i32 %122);
    ubr ^while.header5;
^while.header4:
    i32 %123 = phi [^b5, i32 %123] [^while.body3, i32 %111];
    i32 %124 = phi [^b5, i32 %155] [^while.body3, i32 %119];
    i32 %125 = phi [^b5, i32 %125] [^while.body3, i32 %118];
    i32 %126 = phi [^b5, i32 %156] [^while.body3, i32 %112];
    i32 %127 = phi [^b5, i32 %127] [^while.body3, i32 %113];
    i32 %128 = phi [^b5, i32 %128] [^while.body3, i32 %114];
    i32 %129 = phi [^b5, i32 %155] [^while.body3, i32 %119];
    i1 %130 = scmp gt i32 %129, i32 -1;
    cbr i1 %130(prob = 0.97), ^while.body4, ^b3;
^while.header5:
    i32 %131 = phi [^if.then, i32 1] [^b2, i32 1] [^while.body5, i32 %150];
    i32 %132 = phi [^if.then, i32 %113] [^b2, i32 %113] [^while.body5, i32 %132];
    i32 %133 = phi [^if.then, i32 %114] [^b2, i32 %114] [^while.body5, i32 %133];
    i32 %134 = phi [^if.then, i32 1] [^b2, i32 1] [^while.body5, i32 %150];
    i32 %135 = add i32 %133, i32 -1;
    i32 %136 = add i32 %135, i32 %132;
    i1 %137 = scmp le i32 %134, i32 %136;
    cbr i1 %137(prob = 0.97), ^while.body5, ^b4;
^b3:
    i32 %138 = add i32 %126, i32 -1;
    i32 %139 = add i32 %138, i32 %127;
    i32 %140 = add i32 %123, i32 -1;
    ubr ^while.header3;
^while.body4:
    i32* %141 = getelementptr &([40 * i32]* %result)[i64 0][i32 %126];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &([25 * i32]* %c1)[i64 0][i32 %124];
    i32 %144 = load i32* %143;
    i32 %145 = mul i32 %125, i32 %144;
    i32 %146 = add i32 %142, i32 %145;
    i1 %147 = scmp gt i32 %146, i32 9;
    cbr i1 %147(prob = 0.5), ^if.then1, ^if.else;
^while.body5:
    i32* %148 = getelementptr &([40 * i32]* %result)[i64 0][i32 %131];
    i32 %149 = load i32* %148;
    call (i32) -> void @putint(i32 %149);
    i32 %150 = add i32 %131, i32 1;
    ubr ^while.header5;
^b4:
    ret i32 0;
^if.then1:
    store i32* %141 with i32 %146;
    i32* %151 = getelementptr &(i32* %141)[i64 -1];
    i32 %152 = load i32* %151;
    i32 %153 = sdiv i32 %146, i32 10;
    i32 %154 = add i32 %152, i32 %153;
    store i32* %151 with i32 %154;
    ubr ^b5;
^if.else:
    store i32* %141 with i32 %146;
    ubr ^b5;
^b5:
    i32 %155 = add i32 %124, i32 -1;
    i32 %156 = add i32 %126, i32 -1;
    ubr ^while.header4;
}
