internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [20 * i32]* %mult1 = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 2];
    store i32* %2 with i32 3;
    i32* %3 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 3];
    store i32* %3 with i32 4;
    i32* %4 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 4];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 5];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 6];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 7];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 8];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 10];
    i32* %10 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 9];
    store i32* %10 with i32 0;
    store i32* %9 with i32 1;
    i32* %11 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 11];
    store i32* %11 with i32 2;
    i32* %12 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 12];
    store i32* %12 with i32 3;
    i32* %13 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 13];
    store i32* %13 with i32 4;
    i32* %14 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 14];
    store i32* %14 with i32 5;
    i32* %15 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 15];
    store i32* %15 with i32 6;
    i32* %16 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 16];
    store i32* %16 with i32 7;
    i32* %17 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 17];
    store i32* %17 with i32 8;
    i32* %18 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 18];
    store i32* %18 with i32 9;
    i32* %19 = getelementptr &([20 * i32]* %mult1)[i32 0][i32 19];
    store i32* %19 with i32 0;
    [20 * i32]* %mult2 = alloc [20 * i32];
    i32* %20 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 0];
    store i32* %20 with i32 2;
    i32* %21 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 1];
    store i32* %21 with i32 3;
    i32* %22 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 2];
    store i32* %22 with i32 4;
    i32* %23 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 3];
    store i32* %23 with i32 2;
    i32* %24 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 4];
    store i32* %24 with i32 5;
    i32* %25 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 5];
    store i32* %25 with i32 7;
    i32* %26 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 6];
    store i32* %26 with i32 9;
    i32* %27 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 7];
    store i32* %27 with i32 9;
    i32* %28 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 9];
    i32* %29 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 8];
    store i32* %29 with i32 0;
    store i32* %28 with i32 1;
    i32* %30 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 10];
    store i32* %30 with i32 9;
    i32* %31 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 11];
    store i32* %31 with i32 8;
    i32* %32 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 12];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 13];
    store i32* %33 with i32 6;
    i32* %34 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 14];
    store i32* %34 with i32 4;
    i32* %35 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 15];
    store i32* %35 with i32 3;
    i32* %36 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 16];
    store i32* %36 with i32 2;
    i32* %37 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 17];
    store i32* %37 with i32 1;
    i32* %38 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 18];
    store i32* %38 with i32 2;
    i32* %39 = getelementptr &([20 * i32]* %mult2)[i32 0][i32 19];
    store i32* %39 with i32 2;
    [25 * i32]* %c1 = alloc [25 * i32];
    [25 * i32]* %c2 = alloc [25 * i32];
    [40 * i32]* %result = alloc [40 * i32];
    i32* %40 = getelementptr &([40 * i32]* %result)[i32 0][i32 0];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([40 * i32]* %result)[i32 0][i32 1];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([40 * i32]* %result)[i32 0][i32 2];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([40 * i32]* %result)[i32 0][i32 3];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([40 * i32]* %result)[i32 0][i32 4];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([40 * i32]* %result)[i32 0][i32 5];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([40 * i32]* %result)[i32 0][i32 6];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([40 * i32]* %result)[i32 0][i32 7];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([40 * i32]* %result)[i32 0][i32 8];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([40 * i32]* %result)[i32 0][i32 9];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([40 * i32]* %result)[i32 0][i32 10];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([40 * i32]* %result)[i32 0][i32 11];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([40 * i32]* %result)[i32 0][i32 12];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([40 * i32]* %result)[i32 0][i32 13];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([40 * i32]* %result)[i32 0][i32 14];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([40 * i32]* %result)[i32 0][i32 15];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([40 * i32]* %result)[i32 0][i32 16];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([40 * i32]* %result)[i32 0][i32 17];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([40 * i32]* %result)[i32 0][i32 18];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([40 * i32]* %result)[i32 0][i32 19];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([40 * i32]* %result)[i32 0][i32 20];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([40 * i32]* %result)[i32 0][i32 21];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([40 * i32]* %result)[i32 0][i32 22];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([40 * i32]* %result)[i32 0][i32 23];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([40 * i32]* %result)[i32 0][i32 24];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([40 * i32]* %result)[i32 0][i32 25];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([40 * i32]* %result)[i32 0][i32 26];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([40 * i32]* %result)[i32 0][i32 27];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([40 * i32]* %result)[i32 0][i32 28];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([40 * i32]* %result)[i32 0][i32 29];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([40 * i32]* %result)[i32 0][i32 30];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([40 * i32]* %result)[i32 0][i32 31];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([40 * i32]* %result)[i32 0][i32 32];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([40 * i32]* %result)[i32 0][i32 33];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([40 * i32]* %result)[i32 0][i32 34];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([40 * i32]* %result)[i32 0][i32 35];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([40 * i32]* %result)[i32 0][i32 36];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([40 * i32]* %result)[i32 0][i32 37];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([40 * i32]* %result)[i32 0][i32 38];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([40 * i32]* %result)[i32 0][i32 39];
    store i32* %79 with i32 0;
    ubr [ ^while.body [20 * i32]* %mult2, [25 * i32]* %c2, [40 * i32]* %result, [20 * i32]* %mult1, [25 * i32]* %c1, i32 0 ];
^while.body([20 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, [20 * i32]* %arg3, [25 * i32]* %arg4, i32 %arg5):
    i32* %0 = getelementptr &([25 * i32]* %arg4)[i32 0][i32 %arg5];
    i32* %1 = getelementptr &([20 * i32]* %arg3)[i32 0][i32 %arg5];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg5, i32 1;
    i1 %4 = scmp lt i32 %3, i32 20;
    cbr i1 %4, [ ^while.body [20 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, [20 * i32]* %arg3, [25 * i32]* %arg4, i32 %3 ], [ ^while.body1 [25 * i32]* %arg4, [40 * i32]* %arg2, [20 * i32]* %arg, [25 * i32]* %arg1, i32 0 ];
^while.body1([25 * i32]* %arg, [40 * i32]* %arg1, [20 * i32]* %arg2, [25 * i32]* %arg3, i32 %arg4):
    i32* %0 = getelementptr &([25 * i32]* %arg3)[i32 0][i32 %arg4];
    i32* %1 = getelementptr &([20 * i32]* %arg2)[i32 0][i32 %arg4];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    i1 %4 = scmp lt i32 %3, i32 20;
    cbr i1 %4, [ ^while.body1 [25 * i32]* %arg, [40 * i32]* %arg1, [20 * i32]* %arg2, [25 * i32]* %arg3, i32 %3 ], [ ^while.body2 [25 * i32]* %arg, [25 * i32]* %arg3, [40 * i32]* %arg1, i32 0 ];
^while.body2([25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([40 * i32]* %arg2)[i32 0][i32 %arg3];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg3, i32 1;
    i1 %2 = scmp le i32 %1, i32 39;
    cbr i1 %2, [ ^while.body2 [25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %1 ], [ ^while.body3 [25 * i32]* %arg, [40 * i32]* %arg2, [25 * i32]* %arg1, i32 19, i32 39 ];
^while.body3([25 * i32]* %arg, [40 * i32]* %arg1, [25 * i32]* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &([25 * i32]* %arg2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    ubr [ ^while.body4 [25 * i32]* %arg2, [25 * i32]* %arg, [40 * i32]* %arg1, i32 %arg3, i32 19, i32 %1, i32 %arg4 ];
^while.body4([25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([40 * i32]* %arg2)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([25 * i32]* %arg1)[i32 0][i32 %arg4];
    i32 %3 = load i32* %2;
    i32 %4 = mul i32 %arg5, i32 %3;
    i32 %5 = add i32 %1, i32 %4;
    i1 %6 = scmp ge i32 %5, i32 10;
    cbr i1 %6, [ ^indirect [25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %5, i32 %arg6, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^indirect1 [25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %5, i32 %arg6, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^indirect([25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([40 * i32]* %arg2)[i32 0][i32 %arg4];
    store i32* %0 with i32 %arg3;
    i32 %1 = sub i32 %arg4, i32 1;
    i32* %2 = getelementptr &([40 * i32]* %arg2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = sdiv i32 %arg3, i32 10;
    i32 %5 = add i32 %3, i32 %4;
    store i32* %2 with i32 %5;
    i32 %6 = sub i32 %arg6, i32 1;
    i32 %7 = sub i32 %arg8, i32 1;
    ubr [ ^while.header [25 * i32]* %arg, [40 * i32]* %arg2, [25 * i32]* %arg1, i32 %6, i32 %arg5, i32 %6, i32 %arg7, i32 %7 ];
^indirect1([25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([40 * i32]* %arg2)[i32 0][i32 %arg4];
    store i32* %0 with i32 %arg3;
    i32 %1 = sub i32 %arg6, i32 1;
    i32 %2 = sub i32 %arg8, i32 1;
    ubr [ ^while.header [25 * i32]* %arg, [40 * i32]* %arg2, [25 * i32]* %arg1, i32 %1, i32 %arg5, i32 %1, i32 %arg7, i32 %2 ];
^while.header([25 * i32]* %arg, [40 * i32]* %arg1, [25 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp gt i32 %arg3, i32 -1;
    cbr i1 %0, [ ^while.body4 [25 * i32]* %arg, [25 * i32]* %arg2, [40 * i32]* %arg1, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7 ], [ ^b [25 * i32]* %arg2, [25 * i32]* %arg, [40 * i32]* %arg1, i32 %arg4, i32 %arg7 ];
^b([25 * i32]* %arg, [25 * i32]* %arg1, [40 * i32]* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 19;
    i32 %1 = sub i32 %arg3, i32 1;
    i1 %2 = scmp gt i32 %1, i32 -1;
    cbr i1 %2, [ ^while.body3 [25 * i32]* %arg, [40 * i32]* %arg2, [25 * i32]* %arg1, i32 %1, i32 %0 ], [ ^b1 [40 * i32]* %arg2 ];
^b1([40 * i32]* %arg):
    i32* %0 = getelementptr &([40 * i32]* %arg)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then [40 * i32]* %arg ], [ ^while.body5 [40 * i32]* %arg, i32 1 ];
^if.then([40 * i32]* %arg):
    i32* %0 = getelementptr &([40 * i32]* %arg)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    ubr [ ^while.body5 [40 * i32]* %arg, i32 1 ];
^while.body5([40 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([40 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp le i32 %2, i32 39;
    cbr i1 %3, [ ^while.body5 [40 * i32]* %arg, i32 %2 ], [ ^b2 ];
^b2():
    ret i32 0;
}
