internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray(i32, f32*) -> void { NoMemoryWrite };
func @main() -> i32 { NoRecurse } {
^entry():
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putch(i32 111);
    call (i32) -> void @putch(i32 107);
    call (i32) -> void @putch(i32 10);
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    i32* %p = alloc i32;
    store i32* %p with i32 0;
    [10 * f32]* %arr = alloc [10 * f32];
    f32* %0 = getelementptr &([10 * f32]* %arr)[i32 0][i32 0];
    store f32* %0 with f32 1;
    f32* %1 = getelementptr &([10 * f32]* %arr)[i32 0][i32 1];
    store f32* %1 with f32 2;
    f32* %2 = getelementptr &([10 * f32]* %arr)[i32 0][i32 2];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([10 * f32]* %arr)[i32 0][i32 3];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([10 * f32]* %arr)[i32 0][i32 4];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([10 * f32]* %arr)[i32 0][i32 5];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([10 * f32]* %arr)[i32 0][i32 6];
    store f32* %6 with f32 0;
    f32* %7 = getelementptr &([10 * f32]* %arr)[i32 0][i32 7];
    store f32* %7 with f32 0;
    f32* %8 = getelementptr &([10 * f32]* %arr)[i32 0][i32 8];
    store f32* %8 with f32 0;
    f32* %9 = getelementptr &([10 * f32]* %arr)[i32 0][i32 9];
    store f32* %9 with f32 0;
    i32 %10 = call (f32*) -> i32 @getfarray(f32* %0);
    i32 %11 = load i32* %p;
    i32 %12 = load i32* %i;
    i1 %13 = scmp lt i32 %12, i32 1000000000;
    cbr i1 %13, [ ^while.body [10 * f32]* %arr, i32 %12, i32 %11, i32 %10 ], [ ^b [10 * f32]* %arr, i32 %10 ];
^while.body([10 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    f32 %0 = call () -> f32 @getfloat();
    f32 %1 = fmul f32 3.14159, f32 %0;
    f32 %2 = fmul f32 %1, f32 %0;
    i32 %3 = f2s f32 %0 to i32;
    f32 %4 = s2f i32 %3 to f32;
    f32 %5 = fmul f32 3.14159, f32 %4;
    i32 %6 = mul i32 %3, i32 %3;
    f32 %7 = s2f i32 %6 to f32;
    f32 %8 = fmul f32 %7, f32 3.14159;
    f32 %9 = ffma f32 %5, f32 %4, f32 %8;
    f32 %10 = fdiv f32 %9, f32 2;
    f32* %11 = getelementptr &([10 * f32]* %arg)[i32 0][i32 %arg2];
    f32 %12 = load f32* %11;
    f32 %13 = fadd f32 %12, f32 %0;
    store f32* %11 with f32 %13;
    call (f32) -> void @putfloat(f32 %2);
    call (i32) -> void @putch(i32 32);
    i32 %14 = f2s f32 %10 to i32;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    f32 %15 = s2f i32 %arg1 to f32;
    f32 %16 = fmul f32 %15, f32 10;
    i32 %17 = f2s f32 %16 to i32;
    i32 %18 = add i32 %arg2, i32 1;
    i1 %19 = scmp lt i32 %17, i32 1000000000;
    cbr i1 %19, [ ^while.body [10 * f32]* %arg, i32 %17, i32 %18, i32 %arg3 ], [ ^b [10 * f32]* %arg, i32 %arg3 ];
^b([10 * f32]* %arg, i32 %arg1):
    f32* %0 = getelementptr &([10 * f32]* %arg)[i32 0][i32 0];
    call (i32, f32*) -> void @putfarray(i32 %arg1, f32* %0);
    ret i32 0;
}
