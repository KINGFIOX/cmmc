internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @g = 0;
internal func @func(i32 %n) -> i32 {
^entry:
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* @g;
    i32 %1 = load i32* %n1;
    i32 %2 = add i32 %0, i32 %1;
    store i32* @g with i32 %2;
    i32 %3 = load i32* @g;
    call (i32) -> void @putint(i32 %3);
    i32 %4 = load i32* @g;
    ret i32 %4;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %i with i32 %0;
    i32 %1 = load i32* %i;
    i1 %2 = scmp gt i32 %1, i32 10;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    i32 %5 = load i32* %i;
    i32 %6 = call (i32) -> i32 @func(i32 %5);
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 false];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %i with i32 1;
    ubr ^b2;
^if.else:
    store i32* %i with i32 0;
    ubr ^b2;
^b2:
    i32 %11 = call () -> i32 @getint();
    store i32* %i with i32 %11;
    i32 %12 = load i32* %i;
    i1 %13 = scmp gt i32 %12, i32 11;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b3, ^b4;
^b3:
    i32 %16 = load i32* %i;
    i32 %17 = call (i32) -> i32 @func(i32 %16);
    i1 %18 = scmp neq i32 %17, i32 0;
    ubr ^b4;
^b4:
    i1 %19 = phi [^b3, i1 %18] [^b2, i1 false];
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    store i32* %i with i32 1;
    ubr ^b5;
^if.else1:
    store i32* %i with i32 0;
    ubr ^b5;
^b5:
    i32 %22 = call () -> i32 @getint();
    store i32* %i with i32 %22;
    i32 %23 = load i32* %i;
    i1 %24 = scmp le i32 %23, i32 99;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b7, ^b6;
^b6:
    i32 %27 = load i32* %i;
    i32 %28 = call (i32) -> i32 @func(i32 %27);
    i1 %29 = scmp neq i32 %28, i32 0;
    ubr ^b7;
^b7:
    i1 %30 = phi [^b6, i1 %29] [^b5, i1 true];
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    store i32* %i with i32 1;
    ubr ^b8;
^if.else2:
    store i32* %i with i32 0;
    ubr ^b8;
^b8:
    i32 %33 = call () -> i32 @getint();
    store i32* %i with i32 %33;
    i32 %34 = load i32* %i;
    i1 %35 = scmp le i32 %34, i32 100;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^b10, ^b9;
^b9:
    i32 %38 = load i32* %i;
    i32 %39 = call (i32) -> i32 @func(i32 %38);
    i1 %40 = scmp neq i32 %39, i32 0;
    ubr ^b10;
^b10:
    i1 %41 = phi [^b9, i1 %40] [^b8, i1 true];
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    store i32* %i with i32 1;
    ubr ^b11;
^if.else3:
    store i32* %i with i32 0;
    ubr ^b11;
^b11:
    i32 %44 = call (i32) -> i32 @func(i32 99);
    i1 %45 = scmp neq i32 %44, i32 0;
    i1 %46 = xor i1 %45, i1 true;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^b12, ^b13;
^b12:
    i32 %49 = call (i32) -> i32 @func(i32 100);
    i1 %50 = scmp neq i32 %49, i32 0;
    ubr ^b13;
^b13:
    i1 %51 = phi [^b12, i1 %50] [^b11, i1 false];
    i32 %52 = zext i1 %51 to i32;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    store i32* %i with i32 1;
    ubr ^b14;
^if.else4:
    store i32* %i with i32 0;
    ubr ^b14;
^b14:
    ret i32 0;
}
