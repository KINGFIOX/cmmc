internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @counting_sort(i32* %ini_arr, i32* %sorted_arr, i32 %n) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %count_ar = alloc [10 * i32];
    i32* %n1 = alloc i32;
    i32** %sorted_arr1 = alloc i32*;
    i32** %ini_arr1 = alloc i32*;
    store i32** %ini_arr1 with i32* %ini_arr;
    store i32** %sorted_arr1 with i32* %sorted_arr;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %k with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %k;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %k;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %5];
    store i32* %6 with i32 0;
    i32 %7 = load i32* %k;
    i32 %8 = add i32 %7, i32 1;
    store i32* %k with i32 %8;
    ubr ^while.header;
^b:
    ubr ^while.header1;
^while.header1:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* %n1;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %ini_arr1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %19];
    i32 %21 = load i32* %i;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = load i32** %ini_arr1;
    i32* %24 = getelementptr &(i32* %23)[i64 %22];
    i32 %25 = load i32* %24;
    i64 %26 = sext i32 %25 to i64;
    i32* %27 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %26];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %28, i32 1;
    store i32* %20 with i32 %29;
    i32 %30 = load i32* %i;
    i32 %31 = add i32 %30, i32 1;
    store i32* %i with i32 %31;
    ubr ^while.header1;
^b1:
    store i32* %k with i32 1;
    ubr ^while.header2;
^while.header2:
    i32 %32 = load i32* %k;
    i1 %33 = scmp lt i32 %32, i32 10;
    i32 %34 = zext i1 %33 to i32;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %36 = load i32* %k;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %37];
    i32 %39 = load i32* %k;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %40];
    i32 %42 = load i32* %41;
    i32 %43 = load i32* %k;
    i32 %44 = sub i32 %43, i32 1;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %45];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %42, i32 %47;
    store i32* %38 with i32 %48;
    i32 %49 = load i32* %k;
    i32 %50 = add i32 %49, i32 1;
    store i32* %k with i32 %50;
    ubr ^while.header2;
^b2:
    i32 %51 = load i32* %n1;
    store i32* %j with i32 %51;
    ubr ^while.header3;
^while.header3:
    i32 %52 = load i32* %j;
    i1 %53 = scmp gt i32 %52, i32 0;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %56 = load i32* %j;
    i32 %57 = sub i32 %56, i32 1;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = load i32** %ini_arr1;
    i32* %60 = getelementptr &(i32* %59)[i64 %58];
    i32 %61 = load i32* %60;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %62];
    i32 %64 = load i32* %j;
    i32 %65 = sub i32 %64, i32 1;
    i64 %66 = sext i32 %65 to i64;
    i32* %67 = load i32** %ini_arr1;
    i32* %68 = getelementptr &(i32* %67)[i64 %66];
    i32 %69 = load i32* %68;
    i64 %70 = sext i32 %69 to i64;
    i32* %71 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %70];
    i32 %72 = load i32* %71;
    i32 %73 = sub i32 %72, i32 1;
    store i32* %63 with i32 %73;
    i32 %74 = load i32* %j;
    i32 %75 = sub i32 %74, i32 1;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = load i32** %ini_arr1;
    i32* %78 = getelementptr &(i32* %77)[i64 %76];
    i32 %79 = load i32* %78;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 %80];
    i32 %82 = load i32* %81;
    i64 %83 = sext i32 %82 to i64;
    i32* %84 = load i32** %sorted_arr1;
    i32* %85 = getelementptr &(i32* %84)[i64 %83];
    i32 %86 = load i32* %j;
    i32 %87 = sub i32 %86, i32 1;
    i64 %88 = sext i32 %87 to i64;
    i32* %89 = load i32** %ini_arr1;
    i32* %90 = getelementptr &(i32* %89)[i64 %88];
    i32 %91 = load i32* %90;
    store i32* %85 with i32 %91;
    i32 %92 = load i32* %j;
    i32 %93 = sub i32 %92, i32 1;
    store i32* %j with i32 %93;
    ubr ^while.header3;
^b3:
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    [10 * i32]* %b = alloc [10 * i32];
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32* %11 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    i32 %12 = load i32* @n;
    i32 %13 = call (i32*, i32*, i32) -> i32 @counting_sort(i32* %10, i32* %11, i32 %12);
    store i32* %i with i32 %13;
    ubr ^while.header;
^while.header:
    i32 %14 = load i32* %i;
    i32 %15 = load i32* @n;
    i1 %16 = scmp lt i32 %14, i32 %15;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b1;
^while.body:
    store i32* %tmp with i32 0;
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([10 * i32]* %b)[i64 0][i64 %20];
    i32 %22 = load i32* %21;
    store i32* %tmp with i32 %22;
    i32 %23 = load i32* %tmp;
    call (i32) -> void @putint(i32 %23);
    store i32* %tmp with i32 10;
    i32 %24 = load i32* %tmp;
    call (i32) -> void @putch(i32 %24);
    i32 %25 = load i32* %i;
    i32 %26 = add i32 %25, i32 1;
    store i32* %i with i32 %26;
    ubr ^while.header;
^b1:
    ret i32 0;
}
