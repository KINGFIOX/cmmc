internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %22];
    i32 %22 = add i32 %21, i32 4;
    i1 %23 = icmp slt i32 %22, i32 10;
    cbr i1 %23(prob = 0.89), ^while.body, ^while.body1;
  ^while.body:
    i32* %24 = getelementptr &(i32* %0)[i32 %21];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %27, i32 1;
    store i32* %26 with i32 %28;
    i32* %29 = getelementptr &(i32* %24)[i64 1];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %32, i32 1;
    store i32* %31 with i32 %33;
    i32* %34 = getelementptr &(i32* %24)[i64 2];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %37, i32 1;
    store i32* %36 with i32 %38;
    i32* %39 = getelementptr &(i32* %24)[i64 3];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %40];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %42, i32 1;
    store i32* %41 with i32 %43;
    ubr ^super.header;
  ^while.body1:
    i32 %44 = phi [^super.header, i32 %21] [^while.body1, i32 %50];
    i32* %45 = getelementptr &(i32* %0)[i32 %44];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %48, i32 1;
    store i32* %47 with i32 %49;
    i32 %50 = add i32 %44, i32 1;
    i1 %51 = icmp slt i32 %50, i32 10;
    cbr i1 %51(prob = 0.75), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %52 = load i32* %11;
    i32 %53 = load i32* %10;
    i32 %54 = add i32 %52, i32 %53;
    store i32* %11 with i32 %54;
    i32 %55 = load i32* %12;
    i32 %56 = add i32 %54, i32 %55;
    store i32* %12 with i32 %56;
    i32 %57 = load i32* %13;
    i32 %58 = add i32 %56, i32 %57;
    store i32* %13 with i32 %58;
    i32 %59 = load i32* %14;
    i32 %60 = add i32 %58, i32 %59;
    store i32* %14 with i32 %60;
    i32 %61 = load i32* %15;
    i32 %62 = add i32 %60, i32 %61;
    store i32* %15 with i32 %62;
    i32 %63 = load i32* %16;
    i32 %64 = add i32 %62, i32 %63;
    store i32* %16 with i32 %64;
    i32 %65 = load i32* %17;
    i32 %66 = add i32 %64, i32 %65;
    store i32* %17 with i32 %66;
    i32 %67 = load i32* %18;
    i32 %68 = add i32 %66, i32 %67;
    store i32* %18 with i32 %68;
    i32 %69 = load i32* %19;
    i32 %70 = add i32 %68, i32 %69;
    store i32* %19 with i32 %70;
    ubr ^super.header1;
  ^super.header1:
    i32 %71 = phi [^while.body2, i32 10] [^while.body3, i32 %72];
    i32 %72 = add i32 %71, i32 -4;
    i1 %73 = icmp sgt i32 %72, i32 0;
    cbr i1 %73(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body3:
    i32 %74 = add i32 %71, i32 -1;
    i32* %75 = getelementptr &(i32* %0)[i32 %74];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %78, i32 -1;
    store i32* %77 with i32 %79;
    i32* %80 = getelementptr &(i32* %20)[i32 %79];
    store i32* %80 with i32 %76;
    i32* %81 = getelementptr &(i32* %75)[i64 -1];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %82];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %84, i32 -1;
    store i32* %83 with i32 %85;
    i32* %86 = getelementptr &(i32* %20)[i32 %85];
    store i32* %86 with i32 %82;
    i32* %87 = getelementptr &(i32* %75)[i64 -2];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %88];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %90, i32 -1;
    store i32* %89 with i32 %91;
    i32* %92 = getelementptr &(i32* %20)[i32 %91];
    store i32* %92 with i32 %88;
    i32* %93 = getelementptr &(i32* %75)[i64 -3];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %96, i32 -1;
    store i32* %95 with i32 %97;
    i32* %98 = getelementptr &(i32* %20)[i32 %97];
    store i32* %98 with i32 %94;
    ubr ^super.header1;
  ^while.body4:
    i32 %99 = phi [^super.header1, i32 %71] [^while.body4, i32 %100];
    i32 %100 = add i32 %99, i32 -1;
    i32* %101 = getelementptr &(i32* %0)[i32 %100];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %104, i32 -1;
    store i32* %103 with i32 %105;
    i32* %106 = getelementptr &(i32* %20)[i32 %105];
    store i32* %106 with i32 %102;
    i1 %107 = icmp sgt i32 %100, i32 0;
    cbr i1 %107(prob = 0.75), ^while.body4, ^while.body5;
  ^while.body5:
    i32 %108 = phi [^while.body4, i32 0] [^while.body5, i32 %111];
    i32* %109 = getelementptr &([10 * i32]* %b)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    call (i32) -> void @putint(i32 %110);
    call (i32) -> void @putch(i32 10);
    i32 %111 = add i32 %108, i32 1;
    i1 %112 = icmp slt i32 %111, i32 10;
    cbr i1 %112(prob = 0.9), ^while.body5, ^b1;
  ^b1:
    ret i32 0;
}
