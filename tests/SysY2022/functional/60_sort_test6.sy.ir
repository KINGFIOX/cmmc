internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    i32* %11 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 0];
    i32* %12 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 1];
    i32* %13 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 2];
    i32* %14 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 3];
    i32* %15 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 4];
    i32* %16 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 5];
    i32* %17 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 6];
    i32* %18 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 7];
    i32* %19 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 8];
    i32* %20 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 9];
    store i32* %11 with i32 1;
    store i32* %12 with i32 2;
    store i32* %13 with i32 3;
    store i32* %14 with i32 4;
    store i32* %15 with i32 5;
    store i32* %16 with i32 6;
    store i32* %17 with i32 7;
    store i32* %18 with i32 8;
    store i32* %19 with i32 9;
    store i32* %20 with i32 10;
    ubr ^super.header;
^super.header:
    i32 %21 = phi [^entry, i32 10] [^while.body, i32 %22];
    i32 %22 = add i32 %21, i32 -16;
    i1 %23 = scmp gt i32 %22, i32 0;
    cbr i1 %23(prob = 0.67), ^while.body, ^super.header1;
^while.body:
    i32 %24 = add i32 %21, i32 -1;
    i32* %25 = getelementptr &(i32* %0)[i32 %24];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %26];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %28, i32 -1;
    store i32* %27 with i32 %29;
    i32* %30 = getelementptr &(i32* %10)[i32 %29];
    store i32* %30 with i32 %26;
    i32* %31 = getelementptr &(i32* %25)[i64 -1];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %34, i32 -1;
    store i32* %33 with i32 %35;
    i32* %36 = getelementptr &(i32* %10)[i32 %35];
    store i32* %36 with i32 %32;
    i32* %37 = getelementptr &(i32* %25)[i64 -2];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    i32 %41 = add i32 %40, i32 -1;
    store i32* %39 with i32 %41;
    i32* %42 = getelementptr &(i32* %10)[i32 %41];
    store i32* %42 with i32 %38;
    i32* %43 = getelementptr &(i32* %25)[i64 -3];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %44];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %46, i32 -1;
    store i32* %45 with i32 %47;
    i32* %48 = getelementptr &(i32* %10)[i32 %47];
    store i32* %48 with i32 %44;
    i32* %49 = getelementptr &(i32* %25)[i64 -4];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %52, i32 -1;
    store i32* %51 with i32 %53;
    i32* %54 = getelementptr &(i32* %10)[i32 %53];
    store i32* %54 with i32 %50;
    i32* %55 = getelementptr &(i32* %25)[i64 -5];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %58, i32 -1;
    store i32* %57 with i32 %59;
    i32* %60 = getelementptr &(i32* %10)[i32 %59];
    store i32* %60 with i32 %56;
    i32* %61 = getelementptr &(i32* %25)[i64 -6];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %62];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %64, i32 -1;
    store i32* %63 with i32 %65;
    i32* %66 = getelementptr &(i32* %10)[i32 %65];
    store i32* %66 with i32 %62;
    i32* %67 = getelementptr &(i32* %25)[i64 -7];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %70, i32 -1;
    store i32* %69 with i32 %71;
    i32* %72 = getelementptr &(i32* %10)[i32 %71];
    store i32* %72 with i32 %68;
    i32* %73 = getelementptr &(i32* %25)[i64 -8];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %76, i32 -1;
    store i32* %75 with i32 %77;
    i32* %78 = getelementptr &(i32* %10)[i32 %77];
    store i32* %78 with i32 %74;
    i32* %79 = getelementptr &(i32* %25)[i64 -9];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %80];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %82, i32 -1;
    store i32* %81 with i32 %83;
    i32* %84 = getelementptr &(i32* %10)[i32 %83];
    store i32* %84 with i32 %80;
    i32* %85 = getelementptr &(i32* %25)[i64 -10];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %86];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %88, i32 -1;
    store i32* %87 with i32 %89;
    i32* %90 = getelementptr &(i32* %10)[i32 %89];
    store i32* %90 with i32 %86;
    i32* %91 = getelementptr &(i32* %25)[i64 -11];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %94, i32 -1;
    store i32* %93 with i32 %95;
    i32* %96 = getelementptr &(i32* %10)[i32 %95];
    store i32* %96 with i32 %92;
    i32* %97 = getelementptr &(i32* %25)[i64 -12];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %98];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %100, i32 -1;
    store i32* %99 with i32 %101;
    i32* %102 = getelementptr &(i32* %10)[i32 %101];
    store i32* %102 with i32 %98;
    i32* %103 = getelementptr &(i32* %25)[i64 -13];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %104];
    i32 %106 = load i32* %105;
    i32 %107 = add i32 %106, i32 -1;
    store i32* %105 with i32 %107;
    i32* %108 = getelementptr &(i32* %10)[i32 %107];
    store i32* %108 with i32 %104;
    i32* %109 = getelementptr &(i32* %25)[i64 -14];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %110];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %112, i32 -1;
    store i32* %111 with i32 %113;
    i32* %114 = getelementptr &(i32* %10)[i32 %113];
    store i32* %114 with i32 %110;
    i32* %115 = getelementptr &(i32* %25)[i64 -15];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %116];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %118, i32 -1;
    store i32* %117 with i32 %119;
    i32* %120 = getelementptr &(i32* %10)[i32 %119];
    store i32* %120 with i32 %116;
    ubr ^super.header;
^super.header1:
    i32 %121 = phi [^super.header, i32 %21] [^while.body1, i32 %122];
    i32 %122 = add i32 %121, i32 -16;
    i1 %123 = scmp gt i32 %122, i32 0;
    cbr i1 %123(prob = 0.67), ^while.body1, ^while.body2;
^while.body1:
    i32 %124 = add i32 %121, i32 -1;
    i32* %125 = getelementptr &(i32* %0)[i32 %124];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %126];
    i32 %128 = load i32* %127;
    i32 %129 = add i32 %128, i32 -1;
    store i32* %127 with i32 %129;
    i32* %130 = getelementptr &(i32* %10)[i32 %129];
    store i32* %130 with i32 %126;
    i32* %131 = getelementptr &(i32* %125)[i64 -1];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %132];
    i32 %134 = load i32* %133;
    i32 %135 = add i32 %134, i32 -1;
    store i32* %133 with i32 %135;
    i32* %136 = getelementptr &(i32* %10)[i32 %135];
    store i32* %136 with i32 %132;
    i32* %137 = getelementptr &(i32* %125)[i64 -2];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %138];
    i32 %140 = load i32* %139;
    i32 %141 = add i32 %140, i32 -1;
    store i32* %139 with i32 %141;
    i32* %142 = getelementptr &(i32* %10)[i32 %141];
    store i32* %142 with i32 %138;
    i32* %143 = getelementptr &(i32* %125)[i64 -3];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %144];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %146, i32 -1;
    store i32* %145 with i32 %147;
    i32* %148 = getelementptr &(i32* %10)[i32 %147];
    store i32* %148 with i32 %144;
    i32* %149 = getelementptr &(i32* %125)[i64 -4];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %152, i32 -1;
    store i32* %151 with i32 %153;
    i32* %154 = getelementptr &(i32* %10)[i32 %153];
    store i32* %154 with i32 %150;
    i32* %155 = getelementptr &(i32* %125)[i64 -5];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %158, i32 -1;
    store i32* %157 with i32 %159;
    i32* %160 = getelementptr &(i32* %10)[i32 %159];
    store i32* %160 with i32 %156;
    i32* %161 = getelementptr &(i32* %125)[i64 -6];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %164, i32 -1;
    store i32* %163 with i32 %165;
    i32* %166 = getelementptr &(i32* %10)[i32 %165];
    store i32* %166 with i32 %162;
    i32* %167 = getelementptr &(i32* %125)[i64 -7];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %170, i32 -1;
    store i32* %169 with i32 %171;
    i32* %172 = getelementptr &(i32* %10)[i32 %171];
    store i32* %172 with i32 %168;
    i32* %173 = getelementptr &(i32* %125)[i64 -8];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %174];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %176, i32 -1;
    store i32* %175 with i32 %177;
    i32* %178 = getelementptr &(i32* %10)[i32 %177];
    store i32* %178 with i32 %174;
    i32* %179 = getelementptr &(i32* %125)[i64 -9];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %180];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %182, i32 -1;
    store i32* %181 with i32 %183;
    i32* %184 = getelementptr &(i32* %10)[i32 %183];
    store i32* %184 with i32 %180;
    i32* %185 = getelementptr &(i32* %125)[i64 -10];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %188, i32 -1;
    store i32* %187 with i32 %189;
    i32* %190 = getelementptr &(i32* %10)[i32 %189];
    store i32* %190 with i32 %186;
    i32* %191 = getelementptr &(i32* %125)[i64 -11];
    i32 %192 = load i32* %191;
    i32* %193 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    i32 %195 = add i32 %194, i32 -1;
    store i32* %193 with i32 %195;
    i32* %196 = getelementptr &(i32* %10)[i32 %195];
    store i32* %196 with i32 %192;
    i32* %197 = getelementptr &(i32* %125)[i64 -12];
    i32 %198 = load i32* %197;
    i32* %199 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %198];
    i32 %200 = load i32* %199;
    i32 %201 = add i32 %200, i32 -1;
    store i32* %199 with i32 %201;
    i32* %202 = getelementptr &(i32* %10)[i32 %201];
    store i32* %202 with i32 %198;
    i32* %203 = getelementptr &(i32* %125)[i64 -13];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %204];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %206, i32 -1;
    store i32* %205 with i32 %207;
    i32* %208 = getelementptr &(i32* %10)[i32 %207];
    store i32* %208 with i32 %204;
    i32* %209 = getelementptr &(i32* %125)[i64 -14];
    i32 %210 = load i32* %209;
    i32* %211 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %210];
    i32 %212 = load i32* %211;
    i32 %213 = add i32 %212, i32 -1;
    store i32* %211 with i32 %213;
    i32* %214 = getelementptr &(i32* %10)[i32 %213];
    store i32* %214 with i32 %210;
    i32* %215 = getelementptr &(i32* %125)[i64 -15];
    i32 %216 = load i32* %215;
    i32* %217 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i32 %219 = add i32 %218, i32 -1;
    store i32* %217 with i32 %219;
    i32* %220 = getelementptr &(i32* %10)[i32 %219];
    store i32* %220 with i32 %216;
    ubr ^super.header1;
^while.body2:
    i32 %221 = phi [^super.header1, i32 %121] [^while.body2, i32 %222];
    i32 %222 = add i32 %221, i32 -1;
    i32* %223 = getelementptr &(i32* %0)[i32 %222];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %224];
    i32 %226 = load i32* %225;
    i32 %227 = add i32 %226, i32 -1;
    store i32* %225 with i32 %227;
    i32* %228 = getelementptr &(i32* %10)[i32 %227];
    store i32* %228 with i32 %224;
    i1 %229 = scmp gt i32 %222, i32 0;
    cbr i1 %229(prob = 0.97), ^while.body2, ^while.body3;
^while.body3:
    i32 %230 = phi [^while.body2, i32 0] [^while.body3, i32 %233];
    i32* %231 = getelementptr &([10 * i32]* %b)[i64 0][i32 %230];
    i32 %232 = load i32* %231;
    call (i32) -> void @putint(i32 %232);
    call (i32) -> void @putch(i32 10);
    i32 %233 = add i32 %230, i32 1;
    i1 %234 = scmp lt i32 %233, i32 10;
    cbr i1 %234(prob = 0.9), ^while.body3, ^b1;
^b1:
    ret i32 0;
}
