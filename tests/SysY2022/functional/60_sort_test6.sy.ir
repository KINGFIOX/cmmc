internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    i32* %j = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body, i32 %11] [^entry, i32 10];
    i32 %12 = phi [^while.body, i32 %19] [^entry, i32 0];
    i32 %13 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %14 = phi [^while.body, i32 %14] [^entry, i32 10];
    i32* %15 = phi [^while.body, i32* %15] [^entry, i32* %10];
    i32* %16 = phi [^while.body, i32* %16] [^entry, i32* %0];
    i1 %17 = scmp lt i32 %12, i32 10;
    cbr i1 %17(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %18 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %12];
    store i32* %18 with i32 0;
    i32 %19 = add i32 %12, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %20 = phi [^while.header, i32 %11] [^while.body1, i32 %20];
    i32 %21 = phi [^while.header, i32 %13] [^while.body1, i32 %31];
    i32 %22 = phi [^while.header, i32 %14] [^while.body1, i32 %22];
    i32* %23 = phi [^while.header, i32* %15] [^while.body1, i32* %23];
    i32* %24 = phi [^while.header, i32* %16] [^while.body1, i32* %24];
    i1 %25 = scmp lt i32 %21, i32 %22;
    cbr i1 %25(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %26 = getelementptr &(i32* %24)[i32 %21];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %29, i32 1;
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %21, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %32 = phi [^while.header1, i32 %20] [^while.body2, i32 %32];
    i32 %33 = phi [^while.header1, i32 1] [^while.body2, i32 %43];
    i32 %34 = phi [^while.header1, i32 %22] [^while.body2, i32 %34];
    i32* %35 = phi [^while.header1, i32* %23] [^while.body2, i32* %35];
    i32* %36 = phi [^while.header1, i32* %24] [^while.body2, i32* %36];
    i1 %37 = scmp lt i32 %33, i32 10;
    cbr i1 %37(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %38 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %33];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %38)[i64 -1];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %39, i32 %41;
    store i32* %38 with i32 %42;
    i32 %43 = add i32 %33, i32 1;
    ubr ^while.header2;
^b1:
    store i32* %j with i32 %34;
    ubr ^while.header3;
^while.header3:
    i32 %44 = phi [^while.body3, i32 %60] [^b1, i32 %32];
    i32 %45 = phi [^while.body3, i32 %62] [^b1, i32 %34];
    i32* %46 = phi [^while.body3, i32* %46] [^b1, i32* %35];
    i32* %47 = phi [^while.body3, i32* %47] [^b1, i32* %36];
    i1 %48 = scmp gt i32 %45, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body3, ^while.header4;
^while.body3:
    i32 %49 = add i32 %45, i32 -1;
    i32* %50 = getelementptr &(i32* %47)[i32 %49];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %51];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %53, i32 -1;
    store i32* %52 with i32 %54;
    i32 %55 = load i32* %50;
    i32* %56 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %55];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %46)[i32 %57];
    i32 %59 = load i32* %50;
    store i32* %58 with i32 %59;
    i32 %60 = load i32* %n;
    i32 %61 = load i32* %j;
    i32 %62 = add i32 %61, i32 -1;
    store i32* %j with i32 %62;
    ubr ^while.header3;
^while.header4:
    i32 %63 = phi [^while.header3, i32 0] [^while.body4, i32 %68];
    i32 %64 = phi [^while.header3, i32 %44] [^while.body4, i32 %64];
    i1 %65 = scmp lt i32 %63, i32 %64;
    cbr i1 %65(prob = 0.97), ^while.body4, ^b2;
^while.body4:
    i32* %66 = getelementptr &([10 * i32]* %b)[i64 0][i32 %63];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    call (i32) -> void @putch(i32 10);
    i32 %68 = add i32 %63, i32 1;
    ubr ^while.header4;
^b2:
    ret i32 0;
}
