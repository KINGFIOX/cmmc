internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %44];
    i32* %22 = getelementptr &(i32* %0)[i32 %21];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %23];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %25, i32 1;
    store i32* %24 with i32 %26;
    i32* %27 = getelementptr &(i32* %22)[i64 1];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %28];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %30, i32 1;
    store i32* %29 with i32 %31;
    i32* %32 = getelementptr &(i32* %22)[i64 2];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %35, i32 1;
    store i32* %34 with i32 %36;
    i32* %37 = getelementptr &(i32* %22)[i64 3];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    i32 %41 = add i32 %40, i32 1;
    store i32* %39 with i32 %41;
    i32 %42 = add i32 %21, i32 8;
    i1 %43 = icmp slt i32 %42, i32 10;
    i32 %44 = add i32 %21, i32 4;
    cbr i1 %43(prob = 0.89), ^while.body, ^while.body1;
  ^while.body1:
    i32 %45 = phi [^while.body, i32 %44] [^while.body1, i32 %51];
    i32* %46 = getelementptr &(i32* %0)[i32 %45];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %47];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %49, i32 1;
    store i32* %48 with i32 %50;
    i32 %51 = add i32 %45, i32 1;
    i1 %52 = icmp slt i32 %51, i32 10;
    cbr i1 %52(prob = 0.75), ^while.body1, ^indirect;
  ^indirect:
    i32 %53 = load i32* %10;
    i32 %54 = load i32* %11;
    i32 %55 = add i32 %53, i32 %54;
    i32 %56 = load i32* %15;
    i32 %57 = add i32 %55, i32 %56;
    i32 %58 = load i32* %12;
    i32 %59 = add i32 %57, i32 %58;
    i32 %60 = load i32* %13;
    i32 %61 = add i32 %59, i32 %60;
    i32 %62 = load i32* %14;
    i32 %63 = add i32 %61, i32 %62;
    i32 %64 = load i32* %16;
    i32 %65 = add i32 %63, i32 %64;
    i32 %66 = load i32* %19;
    i32 %67 = add i32 %65, i32 %66;
    i32 %68 = load i32* %17;
    i32 %69 = add i32 %67, i32 %68;
    i32 %70 = load i32* %18;
    i32 %71 = add i32 %69, i32 %70;
    i32 %72 = add i32 %65, i32 %68;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = add i32 %55, i32 %58;
    i32 %75 = add i32 %60, i32 %74;
    i32 %76 = add i32 %62, i32 %75;
    store i32* %11 with i32 %55;
    store i32* %12 with i32 %74;
    store i32* %13 with i32 %75;
    store i32* %14 with i32 %76;
    store i32* %15 with i32 %63;
    store i32* %16 with i32 %65;
    store i32* %17 with i32 %72;
    store i32* %18 with i32 %73;
    store i32* %19 with i32 %71;
    ubr ^while.body2;
  ^while.body2:
    i32 %77 = phi [^indirect, i32 10] [^while.body2, i32 %105];
    i32 %78 = add i32 %77, i32 -1;
    i32* %79 = getelementptr &(i32* %0)[i32 %78];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %80];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %82, i32 -1;
    store i32* %81 with i32 %83;
    i32* %84 = getelementptr &(i32* %20)[i32 %83];
    store i32* %84 with i32 %80;
    i32* %85 = getelementptr &(i32* %79)[i64 -1];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %86];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %88, i32 -1;
    store i32* %87 with i32 %89;
    i32* %90 = getelementptr &(i32* %20)[i32 %89];
    store i32* %90 with i32 %86;
    i32* %91 = getelementptr &(i32* %79)[i64 -2];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %94, i32 -1;
    store i32* %93 with i32 %95;
    i32* %96 = getelementptr &(i32* %20)[i32 %95];
    store i32* %96 with i32 %92;
    i32* %97 = getelementptr &(i32* %79)[i64 -3];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %98];
    i32 %100 = load i32* %99;
    i32 %101 = add i32 %100, i32 -1;
    store i32* %99 with i32 %101;
    i32* %102 = getelementptr &(i32* %20)[i32 %101];
    store i32* %102 with i32 %98;
    i32 %103 = add i32 %77, i32 -8;
    i1 %104 = icmp sgt i32 %103, i32 0;
    i32 %105 = add i32 %77, i32 -4;
    cbr i1 %104(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body3:
    i32 %106 = phi [^while.body2, i32 %105] [^while.body3, i32 %107];
    i32 %107 = add i32 %106, i32 -1;
    i32* %108 = getelementptr &(i32* %0)[i32 %107];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %109];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %111, i32 -1;
    store i32* %110 with i32 %112;
    i32* %113 = getelementptr &(i32* %20)[i32 %112];
    store i32* %113 with i32 %109;
    i1 %114 = icmp sgt i32 %107, i32 0;
    cbr i1 %114(prob = 0.75), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %115 = phi [^while.body3, i32 0] [^while.body4, i32 %118];
    i32* %116 = getelementptr &([10 * i32]* %b)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    call (i32) -> void @putint(i32 %117);
    call (i32) -> void @putch(i32 10);
    i32 %118 = add i32 %115, i32 1;
    i1 %119 = icmp slt i32 %118, i32 10;
    cbr i1 %119(prob = 0.9), ^while.body4, ^b1;
  ^b1:
    ret i32 0;
}
