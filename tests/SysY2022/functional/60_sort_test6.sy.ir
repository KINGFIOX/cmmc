internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %b = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    i32* %1 = getelementptr &([10 * i32]* %b)[i64 0][i64 8];
    store i32* %1 with i32 8;
    i32* %2 = getelementptr &([10 * i32]* %b)[i64 0][i64 7];
    store i32* %2 with i32 7;
    i32* %3 = getelementptr &([10 * i32]* %b)[i64 0][i64 5];
    store i32* %3 with i32 5;
    i32* %4 = getelementptr &([10 * i32]* %b)[i64 0][i64 6];
    store i32* %4 with i32 6;
    i32* %5 = getelementptr &([10 * i32]* %b)[i64 0][i64 1];
    store i32* %5 with i32 1;
    store i32* %0 with i32 0;
    i32* %6 = getelementptr &([10 * i32]* %b)[i64 0][i64 2];
    store i32* %6 with i32 2;
    i32* %7 = getelementptr &([10 * i32]* %b)[i64 0][i64 9];
    store i32* %7 with i32 9;
    i32* %8 = getelementptr &([10 * i32]* %b)[i64 0][i64 3];
    store i32* %8 with i32 3;
    i32* %9 = getelementptr &([10 * i32]* %b)[i64 0][i64 4];
    store i32* %9 with i32 4;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32* %11 = getelementptr &([10 * i32]* %b)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    call (i32) -> void @putint(i32 %12);
    call (i32) -> void @putch(i32 10);
    i32 %13 = add i32 %10, i32 1;
    i1 %14 = scmp lt i32 %13, i32 10;
    cbr i1 %14(prob = 0.9), ^while.body, ^b1;
^b1:
    ret i32 0;
}
