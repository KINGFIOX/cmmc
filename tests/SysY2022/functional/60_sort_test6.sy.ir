internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    i32* %j = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body, i32 %14] [^entry, i32 0];
    i1 %12 = scmp lt i32 %11, i32 10;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %13 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %11];
    store i32* %13 with i32 0;
    i32 %14 = add i32 %11, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %15 = phi [^while.header, i32 0] [^while.body1, i32 %22];
    i1 %16 = scmp lt i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %17 = getelementptr &(i32* %0)[i32 %15];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %20, i32 1;
    store i32* %19 with i32 %21;
    i32 %22 = add i32 %15, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %23 = phi [^while.header1, i32 1] [^while.body2, i32 %30];
    i1 %24 = scmp lt i32 %23, i32 10;
    cbr i1 %24(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %25 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %23];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %25)[i64 -1];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    store i32* %25 with i32 %29;
    i32 %30 = add i32 %23, i32 1;
    ubr ^while.header2;
^b1:
    store i32* %j with i32 10;
    ubr ^while.header3;
^while.header3:
    i32 %31 = phi [^while.body3, i32 %41] [^b1, i32 10];
    i32 %32 = phi [^while.body3, i32 %43] [^b1, i32 10];
    i1 %33 = scmp gt i32 %32, i32 0;
    cbr i1 %33(prob = 0.97), ^while.body3, ^while.header4;
^while.body3:
    i32 %34 = add i32 %32, i32 -1;
    i32* %35 = getelementptr &(i32* %0)[i32 %34];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %38, i32 -1;
    store i32* %37 with i32 %39;
    i32* %40 = getelementptr &(i32* %10)[i32 %39];
    store i32* %40 with i32 %36;
    i32 %41 = load i32* %n;
    i32 %42 = load i32* %j;
    i32 %43 = add i32 %42, i32 -1;
    store i32* %j with i32 %43;
    ubr ^while.header3;
^while.header4:
    i32 %44 = phi [^while.header3, i32 0] [^while.body4, i32 %48];
    i1 %45 = scmp lt i32 %44, i32 %31;
    cbr i1 %45(prob = 0.97), ^while.body4, ^b2;
^while.body4:
    i32* %46 = getelementptr &([10 * i32]* %b)[i64 0][i32 %44];
    i32 %47 = load i32* %46;
    call (i32) -> void @putint(i32 %47);
    call (i32) -> void @putch(i32 10);
    i32 %48 = add i32 %44, i32 1;
    ubr ^while.header4;
^b2:
    ret i32 0;
}
