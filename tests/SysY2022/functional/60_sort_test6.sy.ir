internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %count_ar = alloc [10 * i32];
    [10 * i32]* %b = alloc [10 * i32];
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %10 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %count_ar)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([10 * i32]* %b)[i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %22];
    i32 %22 = add i32 %21, i32 4;
    i1 %23 = scmp lt i32 %22, i32 10;
    cbr i1 %23(prob = 0.89), ^while.body, ^super.header1;
  ^while.body:
    i32* %24 = getelementptr &(i32* %0)[i32 %21];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %27, i32 1;
    store i32* %26 with i32 %28;
    i32* %29 = getelementptr &(i32* %24)[i64 1];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %32, i32 1;
    store i32* %31 with i32 %33;
    i32* %34 = getelementptr &(i32* %24)[i64 2];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %37, i32 1;
    store i32* %36 with i32 %38;
    i32* %39 = getelementptr &(i32* %24)[i64 3];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %40];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %42, i32 1;
    store i32* %41 with i32 %43;
    ubr ^super.header;
  ^super.header1:
    i32 %44 = phi [^super.header, i32 %21] [^while.body1, i32 %45];
    i32 %45 = add i32 %44, i32 4;
    i1 %46 = scmp lt i32 %45, i32 10;
    cbr i1 %46(prob = 0.89), ^while.body1, ^super.header2;
  ^while.body1:
    i32* %47 = getelementptr &(i32* %0)[i32 %44];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %50, i32 1;
    store i32* %49 with i32 %51;
    i32* %52 = getelementptr &(i32* %47)[i64 1];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %53];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %55, i32 1;
    store i32* %54 with i32 %56;
    i32* %57 = getelementptr &(i32* %47)[i64 2];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %60, i32 1;
    store i32* %59 with i32 %61;
    i32* %62 = getelementptr &(i32* %47)[i64 3];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %63];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %65, i32 1;
    store i32* %64 with i32 %66;
    ubr ^super.header1;
  ^super.header2:
    i32 %67 = phi [^super.header1, i32 %44] [^while.body2, i32 %68];
    i32 %68 = add i32 %67, i32 4;
    i1 %69 = scmp lt i32 %68, i32 10;
    cbr i1 %69(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body2:
    i32* %70 = getelementptr &(i32* %0)[i32 %67];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %71];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %73, i32 1;
    store i32* %72 with i32 %74;
    i32* %75 = getelementptr &(i32* %70)[i64 1];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %78, i32 1;
    store i32* %77 with i32 %79;
    i32* %80 = getelementptr &(i32* %70)[i64 2];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %81];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %83, i32 1;
    store i32* %82 with i32 %84;
    i32* %85 = getelementptr &(i32* %70)[i64 3];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %86];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %88, i32 1;
    store i32* %87 with i32 %89;
    ubr ^super.header2;
  ^while.body3:
    i32 %90 = phi [^super.header2, i32 %67] [^while.body3, i32 %96];
    i32* %91 = getelementptr &(i32* %0)[i32 %90];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %94, i32 1;
    store i32* %93 with i32 %95;
    i32 %96 = add i32 %90, i32 1;
    i1 %97 = scmp lt i32 %96, i32 10;
    cbr i1 %97(prob = 0.97), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %98 = load i32* %11;
    i32 %99 = load i32* %10;
    i32 %100 = add i32 %98, i32 %99;
    store i32* %11 with i32 %100;
    i32 %101 = load i32* %12;
    i32 %102 = add i32 %100, i32 %101;
    store i32* %12 with i32 %102;
    i32 %103 = load i32* %13;
    i32 %104 = add i32 %102, i32 %103;
    store i32* %13 with i32 %104;
    i32 %105 = load i32* %14;
    i32 %106 = add i32 %104, i32 %105;
    store i32* %14 with i32 %106;
    i32 %107 = load i32* %15;
    i32 %108 = add i32 %106, i32 %107;
    store i32* %15 with i32 %108;
    i32 %109 = load i32* %16;
    i32 %110 = add i32 %108, i32 %109;
    store i32* %16 with i32 %110;
    i32 %111 = load i32* %17;
    i32 %112 = add i32 %110, i32 %111;
    store i32* %17 with i32 %112;
    i32 %113 = load i32* %18;
    i32 %114 = add i32 %112, i32 %113;
    store i32* %18 with i32 %114;
    i32 %115 = load i32* %19;
    i32 %116 = add i32 %114, i32 %115;
    store i32* %19 with i32 %116;
    ubr ^super.header3;
  ^super.header3:
    i32 %117 = phi [^while.body4, i32 10] [^while.body5, i32 %118];
    i32 %118 = add i32 %117, i32 -4;
    i1 %119 = scmp gt i32 %118, i32 0;
    cbr i1 %119(prob = 0.89), ^while.body5, ^super.header4;
  ^while.body5:
    i32 %120 = add i32 %117, i32 -1;
    i32* %121 = getelementptr &(i32* %0)[i32 %120];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %122];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %124, i32 -1;
    store i32* %123 with i32 %125;
    i32* %126 = getelementptr &(i32* %20)[i32 %125];
    store i32* %126 with i32 %122;
    i32* %127 = getelementptr &(i32* %121)[i64 -1];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32 %131 = add i32 %130, i32 -1;
    store i32* %129 with i32 %131;
    i32* %132 = getelementptr &(i32* %20)[i32 %131];
    store i32* %132 with i32 %128;
    i32* %133 = getelementptr &(i32* %121)[i64 -2];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %134];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %136, i32 -1;
    store i32* %135 with i32 %137;
    i32* %138 = getelementptr &(i32* %20)[i32 %137];
    store i32* %138 with i32 %134;
    i32* %139 = getelementptr &(i32* %121)[i64 -3];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %140];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %142, i32 -1;
    store i32* %141 with i32 %143;
    i32* %144 = getelementptr &(i32* %20)[i32 %143];
    store i32* %144 with i32 %140;
    ubr ^super.header3;
  ^super.header4:
    i32 %145 = phi [^super.header3, i32 %117] [^while.body6, i32 %146];
    i32 %146 = add i32 %145, i32 -4;
    i1 %147 = scmp gt i32 %146, i32 0;
    cbr i1 %147(prob = 0.89), ^while.body6, ^super.header5;
  ^while.body6:
    i32 %148 = add i32 %145, i32 -1;
    i32* %149 = getelementptr &(i32* %0)[i32 %148];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %152, i32 -1;
    store i32* %151 with i32 %153;
    i32* %154 = getelementptr &(i32* %20)[i32 %153];
    store i32* %154 with i32 %150;
    i32* %155 = getelementptr &(i32* %149)[i64 -1];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %158, i32 -1;
    store i32* %157 with i32 %159;
    i32* %160 = getelementptr &(i32* %20)[i32 %159];
    store i32* %160 with i32 %156;
    i32* %161 = getelementptr &(i32* %149)[i64 -2];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %164, i32 -1;
    store i32* %163 with i32 %165;
    i32* %166 = getelementptr &(i32* %20)[i32 %165];
    store i32* %166 with i32 %162;
    i32* %167 = getelementptr &(i32* %149)[i64 -3];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %170, i32 -1;
    store i32* %169 with i32 %171;
    i32* %172 = getelementptr &(i32* %20)[i32 %171];
    store i32* %172 with i32 %168;
    ubr ^super.header4;
  ^super.header5:
    i32 %173 = phi [^super.header4, i32 %145] [^while.body7, i32 %174];
    i32 %174 = add i32 %173, i32 -4;
    i1 %175 = scmp gt i32 %174, i32 0;
    cbr i1 %175(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body7:
    i32 %176 = add i32 %173, i32 -1;
    i32* %177 = getelementptr &(i32* %0)[i32 %176];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %180, i32 -1;
    store i32* %179 with i32 %181;
    i32* %182 = getelementptr &(i32* %20)[i32 %181];
    store i32* %182 with i32 %178;
    i32* %183 = getelementptr &(i32* %177)[i64 -1];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %184];
    i32 %186 = load i32* %185;
    i32 %187 = add i32 %186, i32 -1;
    store i32* %185 with i32 %187;
    i32* %188 = getelementptr &(i32* %20)[i32 %187];
    store i32* %188 with i32 %184;
    i32* %189 = getelementptr &(i32* %177)[i64 -2];
    i32 %190 = load i32* %189;
    i32* %191 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %190];
    i32 %192 = load i32* %191;
    i32 %193 = add i32 %192, i32 -1;
    store i32* %191 with i32 %193;
    i32* %194 = getelementptr &(i32* %20)[i32 %193];
    store i32* %194 with i32 %190;
    i32* %195 = getelementptr &(i32* %177)[i64 -3];
    i32 %196 = load i32* %195;
    i32* %197 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %196];
    i32 %198 = load i32* %197;
    i32 %199 = add i32 %198, i32 -1;
    store i32* %197 with i32 %199;
    i32* %200 = getelementptr &(i32* %20)[i32 %199];
    store i32* %200 with i32 %196;
    ubr ^super.header5;
  ^while.body8:
    i32 %201 = phi [^super.header5, i32 %173] [^while.body8, i32 %202];
    i32 %202 = add i32 %201, i32 -1;
    i32* %203 = getelementptr &(i32* %0)[i32 %202];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &([10 * i32]* %count_ar)[i64 0][i32 %204];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %206, i32 -1;
    store i32* %205 with i32 %207;
    i32* %208 = getelementptr &(i32* %20)[i32 %207];
    store i32* %208 with i32 %204;
    i1 %209 = scmp gt i32 %202, i32 0;
    cbr i1 %209(prob = 0.97), ^while.body8, ^while.body9;
  ^while.body9:
    i32 %210 = phi [^while.body8, i32 0] [^while.body9, i32 %213];
    i32* %211 = getelementptr &([10 * i32]* %b)[i64 0][i32 %210];
    i32 %212 = load i32* %211;
    call (i32) -> void @putint(i32 %212);
    call (i32) -> void @putch(i32 10);
    i32 %213 = add i32 %210, i32 1;
    i1 %214 = scmp lt i32 %213, i32 10;
    cbr i1 %214(prob = 0.9), ^while.body9, ^b1;
  ^b1:
    ret i32 0;
}
