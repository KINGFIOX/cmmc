internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @bubblesort(i32* %arr) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %6 = load i32* %j;
    i32 %7 = load i32* @n;
    i32 %8 = load i32* %i;
    i32 %9 = sub i32 %7, i32 %8;
    i32 %10 = sub i32 %9, i32 1;
    i1 %11 = scmp lt i32 %6, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
^while.body1:
    i32 %16 = load i32* %j;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = load i32** %arr1;
    i32* %19 = getelementptr &(i32* %18)[i64 %17];
    i32 %20 = load i32* %19;
    i32 %21 = load i32* %j;
    i32 %22 = add i32 %21, i32 1;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = load i32** %arr1;
    i32* %25 = getelementptr &(i32* %24)[i64 %23];
    i32 %26 = load i32* %25;
    i1 %27 = scmp gt i32 %20, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b2;
^if.then:
    store i32* %tmp with i32 0;
    i32 %30 = load i32* %j;
    i32 %31 = add i32 %30, i32 1;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = load i32** %arr1;
    i32* %34 = getelementptr &(i32* %33)[i64 %32];
    i32 %35 = load i32* %34;
    store i32* %tmp with i32 %35;
    i32 %36 = load i32* %j;
    i32 %37 = add i32 %36, i32 1;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = load i32** %arr1;
    i32* %40 = getelementptr &(i32* %39)[i64 %38];
    i32 %41 = load i32* %j;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = load i32** %arr1;
    i32* %44 = getelementptr &(i32* %43)[i64 %42];
    i32 %45 = load i32* %44;
    store i32* %40 with i32 %45;
    i32 %46 = load i32* %j;
    i64 %47 = sext i32 %46 to i64;
    i32* %48 = load i32** %arr1;
    i32* %49 = getelementptr &(i32* %48)[i64 %47];
    i32 %50 = load i32* %tmp;
    store i32* %49 with i32 %50;
    ubr ^b2;
^b2:
    i32 %51 = load i32* %j;
    i32 %52 = add i32 %51, i32 1;
    store i32* %j with i32 %52;
    ubr ^while.header1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @bubblesort(i32* %10);
    store i32* %i with i32 %11;
    ubr ^while.header;
^while.header:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* @n;
    i1 %14 = scmp lt i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %tmp with i32 0;
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([10 * i32]* %a)[i64 0][i64 %18];
    i32 %20 = load i32* %19;
    store i32* %tmp with i32 %20;
    i32 %21 = load i32* %tmp;
    call (i32) -> void @putint(i32 %21);
    store i32* %tmp with i32 10;
    i32 %22 = load i32* %tmp;
    call (i32) -> void @putch(i32 %22);
    i32 %23 = load i32* %i;
    i32 %24 = add i32 %23, i32 1;
    store i32* %i with i32 %24;
    ubr ^while.header;
^b:
    ret i32 0;
}
