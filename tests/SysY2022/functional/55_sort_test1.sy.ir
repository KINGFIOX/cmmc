internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^b, i32 %22] [^entry, i32 0];
    i32 %11 = sub i32 10, i32 %10;
    i32 %12 = add i32 %11, i32 -1;
    i1 %13 = scmp gt i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %14 = phi [^b1, i32 %28] [^while.body, i32 0];
    i32 %15 = phi [^while.body, i32 %10] [^b1, i32 %27];
    i32* %16 = getelementptr &(i32* %0)[i32 %14];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &(i32* %16)[i64 1];
    i32 %19 = load i32* %18;
    i1 %20 = scmp gt i32 %17, i32 %19;
    cbr i1 %20(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %21 = phi [^while.body, i32 %10] [^b1, i32 %27];
    i32 %22 = add i32 %21, i32 1;
    i1 %23 = scmp lt i32 %22, i32 9;
    cbr i1 %23(prob = 0.97), ^while.body, ^while.body2;
^if.then:
    i32 %24 = add i32 %14, i32 1;
    i32* %25 = getelementptr &(i32* %0)[i32 %24];
    i32 %26 = load i32* %25;
    store i32* %25 with i32 %17;
    store i32* %16 with i32 %26;
    ubr ^b1;
^b1:
    i32 %27 = phi [^while.body1, i32 %15] [^if.then, i32 %10];
    i32 %28 = add i32 %14, i32 1;
    i32 %29 = sub i32 10, i32 %27;
    i32 %30 = add i32 %29, i32 -1;
    i1 %31 = scmp lt i32 %28, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b;
^while.body2:
    i32 %32 = phi [^b, i32 0] [^while.body2, i32 %35];
    i32* %33 = getelementptr &([10 * i32]* %a)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    call (i32) -> void @putint(i32 %34);
    call (i32) -> void @putch(i32 10);
    i32 %35 = add i32 %32, i32 1;
    i1 %36 = scmp lt i32 %35, i32 10;
    cbr i1 %36(prob = 0.9), ^while.body2, ^b2;
^b2:
    ret i32 0;
}
