internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b5, i32 %41];
    i1 %11 = icmp slt i32 %10, i32 9;
    cbr i1 %11(prob = 0.984615), ^while.header1, ^while.body;
  ^while.header1:
    i32 %12 = sub i32 10, i32 %10;
    i32 %13 = add i32 %12, i32 -1;
    i1 %14 = icmp sgt i32 %13, i32 4;
    i32 %15 = add i32 %12, i32 -5;
    cbr i1 %14(prob = 0.692308), ^b, ^b1;
  ^while.body:
    i32 %16 = phi [^while.header, i32 0] [^while.body, i32 %19];
    i32* %17 = getelementptr &([10 * i32]* %a)[i64 0][i32 %16];
    i32 %18 = load i32* %17;
    call (i32) -> void @putint(i32 %18);
    call (i32) -> void @putch(i32 10);
    i32 %19 = add i32 %16, i32 1;
    i1 %20 = icmp slt i32 %19, i32 10;
    cbr i1 %20(prob = 0.9), ^while.body, ^b2;
  ^b:
    i32 %21 = phi [^while.header1, i32 0] [^b8, i32 %54];
    i32* %22 = getelementptr &(i32* %0)[i32 %21];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %22)[i64 1];
    i32 %25 = load i32* %24;
    i1 %26 = icmp sgt i32 %23, i32 %25;
    cbr i1 %26(prob = 0.5), ^if.then, ^b3;
  ^b1 {scalar}:
    i32 %27 = phi [^while.header1, i32 0] [^b4, i32 %39] [^b8, i32 %54];
    i32* %28 = getelementptr &(i32* %0)[i32 %27];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %28)[i64 1];
    i32 %31 = load i32* %30;
    i1 %32 = icmp sgt i32 %29, i32 %31;
    cbr i1 %32(prob = 0.5), ^if.then1, ^b4;
  ^b2:
    ret i32 0;
  ^if.then:
    store i32* %24 with i32 %23;
    store i32* %22 with i32 %25;
    ubr ^b3;
  ^if.then1:
    store i32* %30 with i32 %29;
    store i32* %28 with i32 %31;
    ubr ^b4;
  ^b3:
    i32 %33 = add i32 %21, i32 1;
    i32* %34 = getelementptr &(i32* %0)[i32 %33];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &(i32* %34)[i64 1];
    i32 %37 = load i32* %36;
    i1 %38 = icmp sgt i32 %35, i32 %37;
    cbr i1 %38(prob = 0.5), ^if.then2, ^b6;
  ^b4:
    i32 %39 = add i32 %27, i32 1;
    i1 %40 = icmp sgt i32 %13, i32 %39;
    cbr i1 %40(prob = 0.75), ^b1, ^b5;
  ^if.then2:
    store i32* %36 with i32 %35;
    store i32* %34 with i32 %37;
    ubr ^b6;
  ^b5:
    i32 %41 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b6:
    i32 %42 = add i32 %21, i32 2;
    i32* %43 = getelementptr &(i32* %0)[i32 %42];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %43)[i64 1];
    i32 %46 = load i32* %45;
    i1 %47 = icmp sgt i32 %44, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then3, ^b7;
  ^if.then3:
    store i32* %45 with i32 %44;
    store i32* %43 with i32 %46;
    ubr ^b7;
  ^b7:
    i32 %48 = add i32 %21, i32 3;
    i32* %49 = getelementptr &(i32* %0)[i32 %48];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %49)[i64 1];
    i32 %52 = load i32* %51;
    i1 %53 = icmp sgt i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^if.then4, ^b8;
  ^if.then4:
    store i32* %51 with i32 %50;
    store i32* %49 with i32 %52;
    ubr ^b8;
  ^b8:
    i32 %54 = add i32 %21, i32 4;
    i1 %55 = icmp sgt i32 %15, i32 %54;
    cbr i1 %55(prob = 0.692308), ^b, ^b1;
}
