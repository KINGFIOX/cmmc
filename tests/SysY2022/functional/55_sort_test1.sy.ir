internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    store i32* %n with i32 10;
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i32 0][i32 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i32 0][i32 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i32 0][i32 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i32 0][i32 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i32 0][i32 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i32 0][i32 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i32 0][i32 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i32 0][i32 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i32 0][i32 9];
    store i32* %9 with i32 8;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %i, i32* %j, i32* %n, [10 * i32]* %a, i32 10, i32 0, [10 * i32]* %a ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32 %arg5, [10 * i32]* %arg6):
    store i32* %arg1 with i32 0;
    i32 %0 = sub i32 %arg4, i32 %arg5;
    i32 %1 = sub i32 %0, i32 1;
    i1 %2 = scmp lt i32 0, i32 %1;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32 %arg5, i32 0, [10 * i32]* %arg6 ], [ ^indirect i32* %arg1, i32* %arg, i32 %arg5, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32 %arg4, [10 * i32]* %arg6 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, [10 * i32]* %arg7):
    i32* %0 = getelementptr &([10 * i32]* %arg7)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg6, i32 1;
    i32* %3 = getelementptr &([10 * i32]* %arg7)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp gt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect1 i32* %arg, i32* %arg1, i32* %0, i32* %3, i32 %4, i32 %1, i32* %arg2, [10 * i32]* %arg3, [10 * i32]* %arg7 ], [ ^b i32* %arg, i32* %arg1, i32 %arg6, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32 %arg5, [10 * i32]* %arg7 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, [10 * i32]* %arg4, i32 %arg5, i32 %arg6, [10 * i32]* %arg7):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg5, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body i32* %arg1, i32* %arg, i32* %arg3, [10 * i32]* %arg4, i32 %arg6, i32 %0, [10 * i32]* %arg7 ], [ ^entry1 [10 * i32]* %arg4, i32 %arg6 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, [10 * i32]* %arg7, [10 * i32]* %arg8):
    store i32* %arg3 with i32 %arg5;
    store i32* %arg2 with i32 %arg4;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg6;
    i32 %3 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %3;
    i32 %4 = sub i32 %2, i32 %1;
    i32 %5 = sub i32 %4, i32 1;
    i1 %6 = scmp lt i32 %3, i32 %5;
    cbr i1 %6, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg6, [10 * i32]* %arg7, i32 %2, i32 %1, i32 %3, [10 * i32]* %arg8 ], [ ^indirect i32* %arg1, i32* %arg, i32 %1, i32* %arg6, [10 * i32]* %arg7, i32 %2, i32 %2, [10 * i32]* %arg8 ];
^b(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, [10 * i32]* %arg4, i32 %arg5, i32 %arg6, [10 * i32]* %arg7):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg5, i32 %arg6;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    cbr i1 %3, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg3, [10 * i32]* %arg4, i32 %arg5, i32 %arg6, i32 %0, [10 * i32]* %arg7 ], [ ^indirect i32* %arg1, i32* %arg, i32 %arg6, i32* %arg3, [10 * i32]* %arg4, i32 %arg5, i32 %arg5, [10 * i32]* %arg7 ];
^entry1([10 * i32]* %arg, i32 %arg1):
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body2 [10 * i32]* %arg, i32 %arg1, i32 0 ], [ ^b1 ];
^while.body2([10 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body2 [10 * i32]* %arg, i32 %arg1, i32 %2 ], [ ^b1 ];
^b1():
    ret i32 0;
}
