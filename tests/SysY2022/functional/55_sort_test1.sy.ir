internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %tmp = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^b1, i32 %24] [^entry, i32 10];
    i32 %11 = phi [^b1, i32 %32] [^entry, i32 0];
    i32* %12 = phi [^b1, i32* %27] [^entry, i32* %0];
    i32 %13 = phi [^b1, i32 %24] [^entry, i32 10];
    i32 %14 = phi [^b1, i32 %32] [^entry, i32 0];
    i32 %15 = add i32 %13, i32 -1;
    i1 %16 = scmp lt i32 %14, i32 %15;
    cbr i1 %16(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %17 = phi [^while.header, i32 0] [^while.body1, i32 %23];
    i32 %18 = phi [^while.header, i32 %10] [^while.body1, i32 %18];
    i32 %19 = phi [^while.header, i32 0] [^while.body1, i32 %23];
    i1 %20 = scmp lt i32 %19, i32 %18;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32* %21 = getelementptr &([10 * i32]* %a)[i64 0][i32 %17];
    i32 %22 = load i32* %21;
    call (i32) -> void @putint(i32 %22);
    call (i32) -> void @putch(i32 10);
    i32 %23 = add i32 %17, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %24 = phi [^b2, i32 %48] [^while.body, i32 %10];
    i32 %25 = phi [^b2, i32 %51] [^while.body, i32 0];
    i32 %26 = phi [^b2, i32 %50] [^while.body, i32 %11];
    i32* %27 = phi [^b2, i32* %27] [^while.body, i32* %12];
    i32 %28 = phi [^while.body, i32 0] [^b2, i32 %51];
    i32 %29 = sub i32 %24, i32 %26;
    i32 %30 = add i32 %29, i32 -1;
    i1 %31 = scmp lt i32 %28, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body2, ^b1;
^b:
    ret i32 0;
^b1:
    i32 %32 = add i32 %26, i32 1;
    store i32* %i with i32 %32;
    ubr ^while.header;
^while.body2:
    i32* %33 = getelementptr &(i32* %27)[i32 %25];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %33)[i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = scmp gt i32 %34, i32 %36;
    cbr i1 %37(prob = 0.5), ^if.then, ^b2;
^if.then:
    store i32* %tmp with i32 0;
    i32 %38 = add i32 %25, i32 1;
    i32* %39 = getelementptr &(i32* %27)[i32 %38];
    i32 %40 = load i32* %39;
    store i32* %tmp with i32 %40;
    i32 %41 = load i32* %33;
    store i32* %39 with i32 %41;
    i32 %42 = load i32* %tmp;
    i32 %43 = load i32* %j;
    i32* %44 = getelementptr &(i32* %27)[i32 %43];
    store i32* %44 with i32 %42;
    i32 %45 = load i32* %n;
    i32 %46 = load i32* %j;
    i32 %47 = load i32* %i;
    ubr ^b2;
^b2:
    i32 %48 = phi [^if.then, i32 %45] [^while.body2, i32 %24];
    i32 %49 = phi [^if.then, i32 %46] [^while.body2, i32 %25];
    i32 %50 = phi [^if.then, i32 %47] [^while.body2, i32 %26];
    i32 %51 = add i32 %49, i32 1;
    store i32* %j with i32 %51;
    ubr ^while.header2;
}
