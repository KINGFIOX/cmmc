internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %20];
    i32 %11 = sub i32 10, i32 %10;
    i32 %12 = add i32 %11, i32 -1;
    i1 %13 = scmp gt i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %14 = phi [^while.body, i32 0] [^b1, i32 %25];
    i32* %15 = getelementptr &(i32* %0)[i32 %14];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &(i32* %15)[i64 1];
    i32 %18 = load i32* %17;
    i1 %19 = scmp gt i32 %16, i32 %18;
    cbr i1 %19(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %20 = add i32 %10, i32 1;
    i1 %21 = scmp lt i32 %20, i32 9;
    cbr i1 %21(prob = 0.89), ^while.body, ^while.body2;
^if.then:
    i32 %22 = add i32 %14, i32 1;
    i32* %23 = getelementptr &(i32* %0)[i32 %22];
    i32 %24 = load i32* %23;
    store i32* %23 with i32 %16;
    store i32* %15 with i32 %24;
    ubr ^b1;
^b1:
    i32 %25 = add i32 %14, i32 1;
    i1 %26 = scmp lt i32 %25, i32 %12;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b;
^while.body2:
    i32 %27 = phi [^b, i32 0] [^while.body2, i32 %30];
    i32* %28 = getelementptr &([10 * i32]* %a)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 10);
    i32 %30 = add i32 %27, i32 1;
    i1 %31 = scmp lt i32 %30, i32 10;
    cbr i1 %31(prob = 0.9), ^while.body2, ^b2;
^b2:
    ret i32 0;
}
