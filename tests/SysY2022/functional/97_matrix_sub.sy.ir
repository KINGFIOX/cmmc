internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %9] [^entry, i32 0];
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %2 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %3 = s2f i32 %0 to f32;
    store f32* %2 with f32 %3;
    f32* %4 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %4 with f32 %3;
    f32* %5 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %5 with f32 %3;
    f32* %6 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %6 with f32 %3;
    f32* %7 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %7 with f32 %3;
    f32* %8 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %8 with f32 %3;
    i32 %9 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %10 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %11 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %12 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %16 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %19 = phi [^while.body1, i32 %48] [^b, i32 0];
    f32* %20 = phi [^while.body1, f32* %20] [^b, f32* %18];
    f32* %21 = phi [^while.body1, f32* %21] [^b, f32* %17];
    f32* %22 = phi [^while.body1, f32* %22] [^b, f32* %16];
    f32* %23 = phi [^while.body1, f32* %23] [^b, f32* %15];
    f32* %24 = phi [^while.body1, f32* %24] [^b, f32* %14];
    f32* %25 = phi [^while.body1, f32* %25] [^b, f32* %13];
    f32* %26 = phi [^while.body1, f32* %26] [^b, f32* %12];
    f32* %27 = phi [^while.body1, f32* %27] [^b, f32* %11];
    f32* %28 = phi [^while.body1, f32* %28] [^b, f32* %10];
    i1 %29 = scmp lt i32 %19, i32 3;
    cbr i1 %29(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    f32* %30 = getelementptr &(f32* %22)[i32 %19];
    f32* %31 = getelementptr &(f32* %28)[i32 %19];
    f32 %32 = load f32* %31;
    f32* %33 = getelementptr &(f32* %25)[i32 %19];
    f32 %34 = load f32* %33;
    f32 %35 = fsub f32 %32, f32 %34;
    store f32* %30 with f32 %35;
    f32* %36 = getelementptr &(f32* %21)[i32 %19];
    f32* %37 = getelementptr &(f32* %27)[i32 %19];
    f32 %38 = load f32* %37;
    f32* %39 = getelementptr &(f32* %24)[i32 %19];
    f32 %40 = load f32* %39;
    f32 %41 = fsub f32 %38, f32 %40;
    store f32* %36 with f32 %41;
    f32* %42 = getelementptr &(f32* %20)[i32 %19];
    f32* %43 = getelementptr &(f32* %26)[i32 %19];
    f32 %44 = load f32* %43;
    f32* %45 = getelementptr &(f32* %23)[i32 %19];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %44, f32 %46;
    store f32* %42 with f32 %47;
    i32 %48 = add i32 %19, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %49 = phi [^while.header1, i32 0] [^while.body2, i32 %54];
    i1 %50 = scmp lt i32 %49, i32 3;
    cbr i1 %50(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    f32* %51 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %49];
    f32 %52 = load f32* %51;
    i32 %53 = f2s f32 %52 to i32;
    call (i32) -> void @putint(i32 %53);
    i32 %54 = add i32 %49, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %55 = phi [^while.body3, i32 %60] [^b1, i32 0];
    i1 %56 = scmp lt i32 %55, i32 3;
    cbr i1 %56(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    f32* %57 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %55];
    f32 %58 = load f32* %57;
    i32 %59 = f2s f32 %58 to i32;
    call (i32) -> void @putint(i32 %59);
    i32 %60 = add i32 %55, i32 1;
    ubr ^while.header3;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header4;
^while.header4:
    i32 %61 = phi [^while.body4, i32 %66] [^b2, i32 0];
    i1 %62 = scmp lt i32 %61, i32 3;
    cbr i1 %62(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    f32* %63 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %61];
    f32 %64 = load f32* %63;
    i32 %65 = f2s f32 %64 to i32;
    call (i32) -> void @putint(i32 %65);
    i32 %66 = add i32 %61, i32 1;
    ubr ^while.header4;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
