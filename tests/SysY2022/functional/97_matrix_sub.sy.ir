internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %10] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %10] [^entry, i32 0];
    i1 %2 = scmp lt i32 %1, i32 3;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %3 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %4 = s2f i32 %0 to f32;
    store f32* %3 with f32 %4;
    f32* %5 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %5 with f32 %4;
    f32* %6 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %6 with f32 %4;
    f32* %7 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %7 with f32 %4;
    f32* %8 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %8 with f32 %4;
    f32* %9 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %9 with f32 %4;
    i32 %10 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %11 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %12 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %17 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %20 = phi [^while.body1, i32 %50] [^b, i32 0];
    f32* %21 = phi [^while.body1, f32* %21] [^b, f32* %19];
    f32* %22 = phi [^while.body1, f32* %22] [^b, f32* %18];
    f32* %23 = phi [^while.body1, f32* %23] [^b, f32* %17];
    f32* %24 = phi [^while.body1, f32* %24] [^b, f32* %16];
    f32* %25 = phi [^while.body1, f32* %25] [^b, f32* %15];
    f32* %26 = phi [^while.body1, f32* %26] [^b, f32* %14];
    f32* %27 = phi [^while.body1, f32* %27] [^b, f32* %13];
    f32* %28 = phi [^while.body1, f32* %28] [^b, f32* %12];
    f32* %29 = phi [^while.body1, f32* %29] [^b, f32* %11];
    i32 %30 = phi [^b, i32 0] [^while.body1, i32 %50];
    i1 %31 = scmp lt i32 %30, i32 3;
    cbr i1 %31(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    f32* %32 = getelementptr &(f32* %23)[i32 %20];
    f32* %33 = getelementptr &(f32* %29)[i32 %20];
    f32 %34 = load f32* %33;
    f32* %35 = getelementptr &(f32* %26)[i32 %20];
    f32 %36 = load f32* %35;
    f32 %37 = fsub f32 %34, f32 %36;
    store f32* %32 with f32 %37;
    f32* %38 = getelementptr &(f32* %22)[i32 %20];
    f32* %39 = getelementptr &(f32* %28)[i32 %20];
    f32 %40 = load f32* %39;
    f32* %41 = getelementptr &(f32* %25)[i32 %20];
    f32 %42 = load f32* %41;
    f32 %43 = fsub f32 %40, f32 %42;
    store f32* %38 with f32 %43;
    f32* %44 = getelementptr &(f32* %21)[i32 %20];
    f32* %45 = getelementptr &(f32* %27)[i32 %20];
    f32 %46 = load f32* %45;
    f32* %47 = getelementptr &(f32* %24)[i32 %20];
    f32 %48 = load f32* %47;
    f32 %49 = fsub f32 %46, f32 %48;
    store f32* %44 with f32 %49;
    i32 %50 = add i32 %20, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %51 = phi [^while.header1, i32 0] [^while.body2, i32 %57];
    i32 %52 = phi [^while.header1, i32 0] [^while.body2, i32 %57];
    i1 %53 = scmp lt i32 %52, i32 3;
    cbr i1 %53(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    f32* %54 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %51];
    f32 %55 = load f32* %54;
    i32 %56 = f2s f32 %55 to i32;
    call (i32) -> void @putint(i32 %56);
    i32 %57 = add i32 %51, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %58 = phi [^while.body3, i32 %64] [^b1, i32 0];
    i32 %59 = phi [^while.body3, i32 %64] [^b1, i32 0];
    i1 %60 = scmp lt i32 %59, i32 3;
    cbr i1 %60(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    f32* %61 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %58];
    f32 %62 = load f32* %61;
    i32 %63 = f2s f32 %62 to i32;
    call (i32) -> void @putint(i32 %63);
    i32 %64 = add i32 %58, i32 1;
    ubr ^while.header3;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header4;
^while.header4:
    i32 %65 = phi [^while.body4, i32 %71] [^b2, i32 0];
    i32 %66 = phi [^while.body4, i32 %71] [^b2, i32 0];
    i1 %67 = scmp lt i32 %66, i32 3;
    cbr i1 %67(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    f32* %68 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %65];
    f32 %69 = load f32* %68;
    i32 %70 = f2s f32 %69 to i32;
    call (i32) -> void @putint(i32 %70);
    i32 %71 = add i32 %65, i32 1;
    ubr ^while.header4;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
