internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [3 * f32]* %a0 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [3 * f32]* %c2 = alloc [3 * f32];
    ubr [ ^while.body [6 * f32]* %c0, [3 * f32]* %b2, [3 * f32]* %b1, [3 * f32]* %b0, [3 * f32]* %a2, [3 * f32]* %a1, [3 * f32]* %c2, [3 * f32]* %a0, [3 * f32]* %c1, i32 0 ];
^while.body([6 * f32]* %arg, [3 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8, i32 %arg9):
    f32* %0 = getelementptr &([3 * f32]* %arg7)[i32 0][i32 %arg9];
    f32 %1 = s2f i32 %arg9 to f32;
    store f32* %0 with f32 %1;
    f32* %2 = getelementptr &([3 * f32]* %arg5)[i32 0][i32 %arg9];
    store f32* %2 with f32 %1;
    f32* %3 = getelementptr &([3 * f32]* %arg4)[i32 0][i32 %arg9];
    store f32* %3 with f32 %1;
    f32* %4 = getelementptr &([3 * f32]* %arg3)[i32 0][i32 %arg9];
    store f32* %4 with f32 %1;
    f32* %5 = getelementptr &([3 * f32]* %arg2)[i32 0][i32 %arg9];
    store f32* %5 with f32 %1;
    f32* %6 = getelementptr &([3 * f32]* %arg1)[i32 0][i32 %arg9];
    store f32* %6 with f32 %1;
    i32 %7 = add i32 %arg9, i32 1;
    i1 %8 = scmp lt i32 %7, i32 3;
    cbr i1 %8, [ ^while.body [6 * f32]* %arg, [3 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8, i32 %7 ], [ ^b [3 * f32]* %arg8, [6 * f32]* %arg, [3 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7 ];
^b([3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8):
    f32* %0 = getelementptr &([3 * f32]* %arg8)[i32 0][i32 0];
    f32* %1 = getelementptr &([3 * f32]* %arg6)[i32 0][i32 0];
    f32* %2 = getelementptr &([3 * f32]* %arg5)[i32 0][i32 0];
    f32* %3 = getelementptr &([3 * f32]* %arg4)[i32 0][i32 0];
    f32* %4 = getelementptr &([3 * f32]* %arg3)[i32 0][i32 0];
    f32* %5 = getelementptr &([3 * f32]* %arg2)[i32 0][i32 0];
    f32* %6 = getelementptr &([6 * f32]* %arg1)[i32 0][i32 0];
    f32* %7 = getelementptr &([3 * f32]* %arg)[i32 0][i32 0];
    f32* %8 = getelementptr &([3 * f32]* %arg7)[i32 0][i32 0];
    ubr [ ^while.body1 [3 * f32]* %arg7, [6 * f32]* %arg1, [3 * f32]* %arg, f32* %0, f32* %1, f32* %2, f32* %3, f32* %4, f32* %5, f32* %6, f32* %7, f32* %8, i32 0 ];
^while.body1([3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12):
    f32* %0 = getelementptr &(f32* %arg9)[i32 %arg12];
    f32* %1 = getelementptr &(f32* %arg3)[i32 %arg12];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &(f32* %arg6)[i32 %arg12];
    f32 %4 = load f32* %3;
    f32 %5 = fsub f32 %2, f32 %4;
    store f32* %0 with f32 %5;
    f32* %6 = getelementptr &(f32* %arg10)[i32 %arg12];
    f32* %7 = getelementptr &(f32* %arg4)[i32 %arg12];
    f32 %8 = load f32* %7;
    f32* %9 = getelementptr &(f32* %arg7)[i32 %arg12];
    f32 %10 = load f32* %9;
    f32 %11 = fsub f32 %8, f32 %10;
    store f32* %6 with f32 %11;
    f32* %12 = getelementptr &(f32* %arg11)[i32 %arg12];
    f32* %13 = getelementptr &(f32* %arg5)[i32 %arg12];
    f32 %14 = load f32* %13;
    f32* %15 = getelementptr &(f32* %arg8)[i32 %arg12];
    f32 %16 = load f32* %15;
    f32 %17 = fsub f32 %14, f32 %16;
    store f32* %12 with f32 %17;
    i32 %18 = add i32 %arg12, i32 1;
    i1 %19 = scmp lt i32 %18, i32 3;
    cbr i1 %19, [ ^while.body1 [3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %18 ], [ ^while.body2 [3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, i32 0 ];
^while.body2([3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, i32 %arg3):
    f32* %0 = getelementptr &([6 * f32]* %arg1)[i32 0][i32 %arg3];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body2 [3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, i32 %3 ], [ ^b1 [3 * f32]* %arg, [3 * f32]* %arg2 ];
^b1([3 * f32]* %arg, [3 * f32]* %arg1):
    call (i32) -> void @putch(i32 10);
    ubr [ ^while.body3 [3 * f32]* %arg, [3 * f32]* %arg1, i32 0 ];
^while.body3([3 * f32]* %arg, [3 * f32]* %arg1, i32 %arg2):
    f32* %0 = getelementptr &([3 * f32]* %arg1)[i32 0][i32 %arg2];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg2, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body3 [3 * f32]* %arg, [3 * f32]* %arg1, i32 %3 ], [ ^b2 [3 * f32]* %arg ];
^b2([3 * f32]* %arg):
    call (i32) -> void @putch(i32 10);
    ubr [ ^while.body4 [3 * f32]* %arg, i32 0 ];
^while.body4([3 * f32]* %arg, i32 %arg1):
    f32* %0 = getelementptr &([3 * f32]* %arg)[i32 0][i32 %arg1];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg1, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body4 [3 * f32]* %arg, i32 %3 ], [ ^b3 ];
^b3():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
