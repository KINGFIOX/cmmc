internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @N;
internal i32* @M;
internal i32* @L;
internal func @sub(f32* %a0, f32* %a1, f32* %a2, f32* %b0, f32* %b1, f32* %b2, f32* %c0, f32* %c1, f32* %c2) -> i32 {
^entry:
    i32* %i = alloc i32;
    f32** %c21 = alloc f32*;
    f32** %c11 = alloc f32*;
    f32** %c01 = alloc f32*;
    f32** %b21 = alloc f32*;
    f32** %b11 = alloc f32*;
    f32** %b01 = alloc f32*;
    f32** %a21 = alloc f32*;
    f32** %a11 = alloc f32*;
    f32** %a01 = alloc f32*;
    store f32** %a01 with f32* %a0;
    store f32** %a11 with f32* %a1;
    store f32** %a21 with f32* %a2;
    store f32** %b01 with f32* %b0;
    store f32** %b11 with f32* %b1;
    store f32** %b21 with f32* %b2;
    store f32** %c01 with f32* %c0;
    store f32** %c11 with f32* %c1;
    store f32** %c21 with f32* %c2;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 3;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    f32* %6 = load f32** %c01;
    f32* %7 = getelementptr &(f32* %6)[i64 %5];
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    f32* %10 = load f32** %a01;
    f32* %11 = getelementptr &(f32* %10)[i64 %9];
    f32 %12 = load f32* %11;
    i32 %13 = load i32* %i;
    i64 %14 = sext i32 %13 to i64;
    f32* %15 = load f32** %b01;
    f32* %16 = getelementptr &(f32* %15)[i64 %14];
    f32 %17 = load f32* %16;
    f32 %18 = fsub f32 %12, f32 %17;
    store f32* %7 with f32 %18;
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    f32* %21 = load f32** %c11;
    f32* %22 = getelementptr &(f32* %21)[i64 %20];
    i32 %23 = load i32* %i;
    i64 %24 = sext i32 %23 to i64;
    f32* %25 = load f32** %a11;
    f32* %26 = getelementptr &(f32* %25)[i64 %24];
    f32 %27 = load f32* %26;
    i32 %28 = load i32* %i;
    i64 %29 = sext i32 %28 to i64;
    f32* %30 = load f32** %b11;
    f32* %31 = getelementptr &(f32* %30)[i64 %29];
    f32 %32 = load f32* %31;
    f32 %33 = fsub f32 %27, f32 %32;
    store f32* %22 with f32 %33;
    i32 %34 = load i32* %i;
    i64 %35 = sext i32 %34 to i64;
    f32* %36 = load f32** %c21;
    f32* %37 = getelementptr &(f32* %36)[i64 %35];
    i32 %38 = load i32* %i;
    i64 %39 = sext i32 %38 to i64;
    f32* %40 = load f32** %a21;
    f32* %41 = getelementptr &(f32* %40)[i64 %39];
    f32 %42 = load f32* %41;
    i32 %43 = load i32* %i;
    i64 %44 = sext i32 %43 to i64;
    f32* %45 = load f32** %b21;
    f32* %46 = getelementptr &(f32* %45)[i64 %44];
    f32 %47 = load f32* %46;
    f32 %48 = fsub f32 %42, f32 %47;
    store f32* %37 with f32 %48;
    i32 %49 = load i32* %i;
    i32 %50 = add i32 %49, i32 1;
    store i32* %i with i32 %50;
    ubr ^while.header;
^b:
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32* %i = alloc i32;
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    store i32* @N with i32 3;
    store i32* @M with i32 3;
    store i32* @L with i32 3;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 3;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i64 %5];
    i32 %7 = load i32* %i;
    f32 %8 = s2f i32 %7 to f32;
    store f32* %6 with f32 %8;
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    f32* %11 = getelementptr &([3 * f32]* %a1)[i64 0][i64 %10];
    i32 %12 = load i32* %i;
    f32 %13 = s2f i32 %12 to f32;
    store f32* %11 with f32 %13;
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    f32* %16 = getelementptr &([3 * f32]* %a2)[i64 0][i64 %15];
    i32 %17 = load i32* %i;
    f32 %18 = s2f i32 %17 to f32;
    store f32* %16 with f32 %18;
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    f32* %21 = getelementptr &([3 * f32]* %b0)[i64 0][i64 %20];
    i32 %22 = load i32* %i;
    f32 %23 = s2f i32 %22 to f32;
    store f32* %21 with f32 %23;
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = getelementptr &([3 * f32]* %b1)[i64 0][i64 %25];
    i32 %27 = load i32* %i;
    f32 %28 = s2f i32 %27 to f32;
    store f32* %26 with f32 %28;
    i32 %29 = load i32* %i;
    i64 %30 = sext i32 %29 to i64;
    f32* %31 = getelementptr &([3 * f32]* %b2)[i64 0][i64 %30];
    i32 %32 = load i32* %i;
    f32 %33 = s2f i32 %32 to f32;
    store f32* %31 with f32 %33;
    i32 %34 = load i32* %i;
    i32 %35 = add i32 %34, i32 1;
    store i32* %i with i32 %35;
    ubr ^while.header;
^b:
    f32* %36 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %37 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %38 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %39 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %40 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %41 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %42 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %43 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %44 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    i32 %45 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*) -> i32 @sub(f32* %36, f32* %37, f32* %38, f32* %39, f32* %40, f32* %41, f32* %42, f32* %43, f32* %44);
    store i32* %i with i32 %45;
    store i32* %x with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %46 = load i32* %i;
    i1 %47 = scmp lt i32 %46, i32 3;
    i32 %48 = zext i1 %47 to i32;
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %50 = load i32* %i;
    i64 %51 = sext i32 %50 to i64;
    f32* %52 = getelementptr &([6 * f32]* %c0)[i64 0][i64 %51];
    f32 %53 = load f32* %52;
    i32 %54 = f2s f32 %53 to i32;
    store i32* %x with i32 %54;
    i32 %55 = load i32* %x;
    call (i32) -> void @putint(i32 %55);
    i32 %56 = load i32* %i;
    i32 %57 = add i32 %56, i32 1;
    store i32* %i with i32 %57;
    ubr ^while.header1;
^b1:
    store i32* %x with i32 10;
    store i32* %i with i32 0;
    i32 %58 = load i32* %x;
    call (i32) -> void @putch(i32 %58);
    ubr ^while.header2;
^while.header2:
    i32 %59 = load i32* %i;
    i1 %60 = scmp lt i32 %59, i32 3;
    i32 %61 = zext i1 %60 to i32;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %63 = load i32* %i;
    i64 %64 = sext i32 %63 to i64;
    f32* %65 = getelementptr &([3 * f32]* %c1)[i64 0][i64 %64];
    f32 %66 = load f32* %65;
    i32 %67 = f2s f32 %66 to i32;
    store i32* %x with i32 %67;
    i32 %68 = load i32* %x;
    call (i32) -> void @putint(i32 %68);
    i32 %69 = load i32* %i;
    i32 %70 = add i32 %69, i32 1;
    store i32* %i with i32 %70;
    ubr ^while.header2;
^b2:
    store i32* %x with i32 10;
    store i32* %i with i32 0;
    i32 %71 = load i32* %x;
    call (i32) -> void @putch(i32 %71);
    ubr ^while.header3;
^while.header3:
    i32 %72 = load i32* %i;
    i1 %73 = scmp lt i32 %72, i32 3;
    i32 %74 = zext i1 %73 to i32;
    i1 %75 = scmp neq i32 %74, i32 0;
    cbr i1 %75(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %76 = load i32* %i;
    i64 %77 = sext i32 %76 to i64;
    f32* %78 = getelementptr &([3 * f32]* %c2)[i64 0][i64 %77];
    f32 %79 = load f32* %78;
    i32 %80 = f2s f32 %79 to i32;
    store i32* %x with i32 %80;
    i32 %81 = load i32* %x;
    call (i32) -> void @putint(i32 %81);
    i32 %82 = load i32* %i;
    i32 %83 = add i32 %82, i32 1;
    store i32* %i with i32 %83;
    ubr ^while.header3;
^b3:
    store i32* %x with i32 10;
    i32 %84 = load i32* %x;
    call (i32) -> void @putch(i32 %84);
    ret i32 0;
}
