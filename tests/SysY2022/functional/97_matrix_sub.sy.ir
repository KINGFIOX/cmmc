internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    f32* %0 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32* %1 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %2 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    store f32* %2 with f32 0;
    store f32* %1 with f32 0;
    store f32* %0 with f32 0;
    f32* %3 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32* %4 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32* %5 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    store f32* %5 with f32 0;
    store f32* %4 with f32 0;
    store f32* %3 with f32 0;
    f32* %6 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32* %7 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32* %8 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    store f32* %8 with f32 0;
    store f32* %7 with f32 0;
    store f32* %6 with f32 0;
    ubr ^while.body;
^while.body:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %10];
    i32 %10 = add i32 %9, i32 1;
    i1 %11 = scmp lt i32 %10, i32 3;
    f32* %12 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %9];
    f32 %13 = load f32* %12;
    i32 %14 = f2s f32 %13 to i32;
    call (i32) -> void @putint(i32 %14);
    cbr i1 %11(prob = 0.67), ^while.body, ^b;
^b:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body1;
^while.body1:
    i32 %15 = phi [^b, i32 0] [^while.body1, i32 %16];
    i32 %16 = add i32 %15, i32 1;
    i1 %17 = scmp lt i32 %16, i32 3;
    f32* %18 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %15];
    f32 %19 = load f32* %18;
    i32 %20 = f2s f32 %19 to i32;
    call (i32) -> void @putint(i32 %20);
    cbr i1 %17(prob = 0.67), ^while.body1, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body2;
^while.body2:
    i32 %21 = phi [^b1, i32 0] [^while.body2, i32 %22];
    i32 %22 = add i32 %21, i32 1;
    i1 %23 = scmp lt i32 %22, i32 3;
    f32* %24 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %21];
    f32 %25 = load f32* %24;
    i32 %26 = f2s f32 %25 to i32;
    call (i32) -> void @putint(i32 %26);
    cbr i1 %23(prob = 0.67), ^while.body2, ^b2;
^b2:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
