internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * i32]* @__HELLO = [87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 116, 104, 101, 32, 74, 97, 112, 97, 114, 105, 32, 80, 97, 114, 107, 33, 10];
internal [6 * [50 * i32]]* @N4__mE___ = [[83, 97, 97, 98, 97, 114, 117], [75, 97, 98, 97, 110], [72, 97, 115, 104, 105, 98, 105, 114, 111, 107, 111, 117], [65, 114, 97, 105, 103, 117, 109, 97], [72, 117, 110, 98, 111, 114, 117, 116, 111, 32, 80, 101, 110, 103, 105, 110], [84, 97, 105, 114, 105, 107, 117, 32, 79, 111, 107, 97, 109, 105]];
internal [40 * i32]* @saY_HeI10_To = [32, 115, 97, 121, 115, 32, 104, 101, 108, 108, 111, 32, 116, 111, 32];
internal [5 * i32]* @RET = [10];
internal func @putstr(i32* %str) -> i32 {
^entry:
    i32* %iNd__1X = alloc i32;
    i32** %str1 = alloc i32*;
    store i32** %str1 with i32* %str;
    store i32* %iNd__1X with i32 0;
    store i32* %iNd__1X with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %iNd__1X;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = load i32** %str1;
    i32* %3 = getelementptr &(i32* %2)[i64 %1];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %iNd__1X;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = load i32** %str1;
    i32* %9 = getelementptr &(i32* %8)[i64 %7];
    i32 %10 = load i32* %9;
    call (i32) -> void @putch(i32 %10);
    i32 %11 = load i32* %iNd__1X;
    i32 %12 = add i32 %11, i32 1;
    store i32* %iNd__1X with i32 %12;
    ubr ^while.header;
^b:
    i32 %13 = load i32* %iNd__1X;
    ret i32 %13;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %__ = alloc i32;
    i32* %_ = alloc i32;
    i32* %i = alloc i32;
    i32* %0 = getelementptr &([100 * i32]* @__HELLO)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @putstr(i32* %0);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i1 %2 = scmp neq i32 1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = load i32* %i;
    i32 %4 = sdiv i32 %3, i32 6;
    store i32* %_ with i32 %4;
    i32 %5 = load i32* %i;
    i32 %6 = srem i32 %5, i32 6;
    store i32* %__ with i32 %6;
    i32 %7 = load i32* %_;
    i32 %8 = load i32* %__;
    i1 %9 = scmp neq i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then, ^b1;
^b:
    ret i32 0;
^if.then:
    i32 %12 = load i32* %_;
    i64 %13 = sext i32 %12 to i64;
    [50 * i32]* %14 = getelementptr &([6 * [50 * i32]]* @N4__mE___)[i64 0][i64 %13];
    i32* %15 = getelementptr &([50 * i32]* %14)[i64 0][i64 0];
    i32 %16 = call (i32*) -> i32 @putstr(i32* %15);
    i32* %17 = getelementptr &([40 * i32]* @saY_HeI10_To)[i64 0][i64 0];
    i32 %18 = call (i32*) -> i32 @putstr(i32* %17);
    i32 %19 = load i32* %__;
    i64 %20 = sext i32 %19 to i64;
    [50 * i32]* %21 = getelementptr &([6 * [50 * i32]]* @N4__mE___)[i64 0][i64 %20];
    i32* %22 = getelementptr &([50 * i32]* %21)[i64 0][i64 0];
    i32 %23 = call (i32*) -> i32 @putstr(i32* %22);
    i32* %24 = getelementptr &([5 * i32]* @RET)[i64 0][i64 0];
    i32 %25 = call (i32*) -> i32 @putstr(i32* %24);
    ubr ^b1;
^b1:
    i32 %26 = load i32* %i;
    i32 %27 = mul i32 %26, i32 17;
    i32 %28 = add i32 %27, i32 23;
    i32 %29 = srem i32 %28, i32 32;
    store i32* %i with i32 %29;
    i32 %30 = load i32* %i;
    i1 %31 = scmp eq i32 %30, i32 0;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    ubr ^b;
^b2:
    ubr ^while.header;
}
