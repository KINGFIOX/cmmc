internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [100 * i32]* @__HELLO { ReadOnly Flexible } = [87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 116, 104, 101, 32, 74, 97, 112, 97, 114, 105, 32, 80, 97, 114, 107, 33, 10];
internal [6 * [50 * i32]]* @N4__mE___ { ReadOnly Flexible } = [[83, 97, 97, 98, 97, 114, 117], [75, 97, 98, 97, 110], [72, 97, 115, 104, 105, 98, 105, 114, 111, 107, 111, 117], [65, 114, 97, 105, 103, 117, 109, 97], [72, 117, 110, 98, 111, 114, 117, 116, 111, 32, 80, 101, 110, 103, 105, 110], [84, 97, 105, 114, 105, 107, 117, 32, 79, 111, 107, 97, 109, 105]];
internal [40 * i32]* @saY_HeI10_To { ReadOnly Flexible } = [32, 115, 97, 121, 115, 32, 104, 101, 108, 108, 111, 32, 116, 111, 32];
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [5 * i32]* %RET = alloc [5 * i32];
    i32* %0 = getelementptr &([5 * i32]* %RET)[i64 0][i64 0];
    store i32* %0 with i32 10;
    i32* %1 = getelementptr &([5 * i32]* %RET)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %RET)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %RET)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %RET)[i64 0][i64 4];
    store i32* %4 with i32 0;
    [100 * i32]* %5 = ptrcast [100 * i32]* @__HELLO to [100 * i32]*;
    i32* %6 = getelementptr &([100 * i32]* %5)[i64 0][i64 0];
    i32 %7 = load i32* %6;
    i1 %8 = icmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^while.header;
  ^while.body:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %15];
    i32* %10 = getelementptr &(i32* %6)[i32 %9];
    i32 %11 = load i32* %10;
    call (i32) -> void @putch(i32 %11);
    i32* %12 = getelementptr &(i32* %10)[i64 1];
    i32 %13 = load i32* %12;
    i1 %14 = icmp neq i32 %13, i32 0;
    i32 %15 = add i32 %9, i32 1;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 0] [^while.body, i32 0] [^b, i32 %27];
    i32 %17 = sdiv i32 %16, i32 6;
    i32 %18 = srem i32 %16, i32 6;
    i1 %19 = icmp neq i32 %17, i32 %18;
    cbr i1 %19(prob = 0.5), ^if.then, ^b;
  ^if.then:
    [6 * [50 * i32]]* %20 = ptrcast [6 * [50 * i32]]* @N4__mE___ to [6 * [50 * i32]]*;
    [50 * i32]* %21 = getelementptr &([6 * [50 * i32]]* %20)[i64 0][i32 %17];
    i32* %22 = getelementptr &([50 * i32]* %21)[i64 0][i64 0];
    i32 %23 = load i32* %22;
    i1 %24 = icmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body1, ^if.then1;
  ^b:
    i32 %25 = mul i32 %16, i32 17;
    i32 %26 = add i32 %25, i32 23;
    i32 %27 = srem i32 %26, i32 32;
    i1 %28 = icmp eq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^b1, ^while.header;
  ^while.body1:
    i32 %29 = phi [^if.then, i32 0] [^while.body1, i32 %35];
    i32* %30 = getelementptr &(i32* %22)[i32 %29];
    i32 %31 = load i32* %30;
    call (i32) -> void @putch(i32 %31);
    i32* %32 = getelementptr &(i32* %30)[i64 1];
    i32 %33 = load i32* %32;
    i1 %34 = icmp neq i32 %33, i32 0;
    i32 %35 = add i32 %29, i32 1;
    cbr i1 %34(prob = 0.97), ^while.body1, ^if.then1;
  ^if.then1:
    [40 * i32]* %36 = ptrcast [40 * i32]* @saY_HeI10_To to [40 * i32]*;
    i32* %37 = getelementptr &([40 * i32]* %36)[i64 0][i64 0];
    i32 %38 = load i32* %37;
    i1 %39 = icmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body2, ^if.then2;
  ^b1:
    ret i32 0;
  ^while.body2:
    i32 %40 = phi [^if.then1, i32 0] [^while.body2, i32 %46];
    i32* %41 = getelementptr &(i32* %37)[i32 %40];
    i32 %42 = load i32* %41;
    call (i32) -> void @putch(i32 %42);
    i32* %43 = getelementptr &(i32* %41)[i64 1];
    i32 %44 = load i32* %43;
    i1 %45 = icmp neq i32 %44, i32 0;
    i32 %46 = add i32 %40, i32 1;
    cbr i1 %45(prob = 0.97), ^while.body2, ^if.then2;
  ^if.then2:
    [50 * i32]* %47 = getelementptr &([6 * [50 * i32]]* %20)[i64 0][i32 %18];
    i32* %48 = getelementptr &([50 * i32]* %47)[i64 0][i64 0];
    i32 %49 = load i32* %48;
    i1 %50 = icmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.97), ^while.body3, ^if.then3;
  ^while.body3:
    i32 %51 = phi [^if.then2, i32 0] [^while.body3, i32 %57];
    i32* %52 = getelementptr &(i32* %48)[i32 %51];
    i32 %53 = load i32* %52;
    call (i32) -> void @putch(i32 %53);
    i32* %54 = getelementptr &(i32* %52)[i64 1];
    i32 %55 = load i32* %54;
    i1 %56 = icmp neq i32 %55, i32 0;
    i32 %57 = add i32 %51, i32 1;
    cbr i1 %56(prob = 0.97), ^while.body3, ^if.then3;
  ^if.then3:
    i32 %58 = load i32* %0;
    i1 %59 = icmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.97), ^while.body4, ^b;
  ^while.body4:
    i32 %60 = phi [^if.then3, i32 0] [^while.body4, i32 %66];
    i32* %61 = getelementptr &(i32* %0)[i32 %60];
    i32 %62 = load i32* %61;
    call (i32) -> void @putch(i32 %62);
    i32* %63 = getelementptr &(i32* %61)[i64 1];
    i32 %64 = load i32* %63;
    i1 %65 = icmp neq i32 %64, i32 0;
    i32 %66 = add i32 %60, i32 1;
    cbr i1 %65(prob = 0.97), ^while.body4, ^b;
}
