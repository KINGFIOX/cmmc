internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @exgcd(i32 %a, i32 %b, i32* %x, i32* %y) -> i32 {
^entry:
    i32* %t = alloc i32;
    i32* %r = alloc i32;
    i32** %y1 = alloc i32*;
    i32** %x1 = alloc i32*;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    store i32** %x1 with i32* %x;
    store i32** %y1 with i32* %y;
    i32 %0 = load i32* %b1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32* %4 = load i32** %x1;
    i32* %5 = getelementptr &(i32* %4)[i64 0];
    store i32* %5 with i32 1;
    i32* %6 = load i32** %y1;
    i32* %7 = getelementptr &(i32* %6)[i64 0];
    store i32* %7 with i32 0;
    i32 %8 = load i32* %a1;
    ret i32 %8;
^if.else:
    i32 %9 = load i32* %b1;
    i32 %10 = load i32* %a1;
    i32 %11 = load i32* %b1;
    i32 %12 = srem i32 %10, i32 %11;
    i32* %13 = load i32** %x1;
    i32* %14 = load i32** %y1;
    i32 %15 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 %9, i32 %12, i32* %13, i32* %14);
    store i32* %r with i32 %15;
    i32* %16 = load i32** %x1;
    i32* %17 = getelementptr &(i32* %16)[i64 0];
    i32 %18 = load i32* %17;
    store i32* %t with i32 %18;
    i32* %19 = load i32** %x1;
    i32* %20 = getelementptr &(i32* %19)[i64 0];
    i32* %21 = load i32** %y1;
    i32* %22 = getelementptr &(i32* %21)[i64 0];
    i32 %23 = load i32* %22;
    store i32* %20 with i32 %23;
    i32* %24 = load i32** %y1;
    i32* %25 = getelementptr &(i32* %24)[i64 0];
    i32 %26 = load i32* %t;
    i32 %27 = load i32* %a1;
    i32 %28 = load i32* %b1;
    i32 %29 = sdiv i32 %27, i32 %28;
    i32* %30 = load i32** %y1;
    i32* %31 = getelementptr &(i32* %30)[i64 0];
    i32 %32 = load i32* %31;
    i32 %33 = mul i32 %29, i32 %32;
    i32 %34 = sub i32 %26, i32 %33;
    store i32* %25 with i32 %34;
    i32 %35 = load i32* %r;
    ret i32 %35;
^b2:
    unreachable;
}
func @main() -> i32 { Entry } {
^entry:
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %x = alloc [1 * i32];
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 7;
    store i32* %b with i32 15;
    i32* %0 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([1 * i32]* %x)[i64 1][i64 0];
    i32* %2 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    store i32* %2 with i32 1;
    i32* %3 = getelementptr &([1 * i32]* %y)[i64 1][i64 0];
    i32 %4 = load i32* %a;
    i32 %5 = load i32* %b;
    i32* %6 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    i32* %7 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    i32 %8 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 %4, i32 %5, i32* %6, i32* %7);
    i32* %9 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    i32* %10 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    i32 %11 = load i32* %10;
    i32 %12 = load i32* %b;
    i32 %13 = srem i32 %11, i32 %12;
    i32 %14 = load i32* %b;
    i32 %15 = add i32 %13, i32 %14;
    i32 %16 = load i32* %b;
    i32 %17 = srem i32 %15, i32 %16;
    store i32* %9 with i32 %17;
    i32* %18 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
