internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @exgcd(i32, i32, i32*, i32*) -> i32 {
^entry(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3):
    i32* %a = alloc i32;
    store i32* %a with i32 %arg;
    i32* %b = alloc i32;
    store i32* %b with i32 %arg1;
    i32** %x = alloc i32*;
    store i32** %x with i32* %arg2;
    i32** %y = alloc i32*;
    store i32** %y with i32* %arg3;
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32* %arg3, i32* %arg2, i32 %arg ], [ ^indirect1 i32** %y, i32** %x, i32* %a, i32* %b, i32* %arg3, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2):
    store i32* %arg1 with i32 1;
    store i32* %arg with i32 0;
    ret i32 %arg2;
^indirect1(i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %r = alloc i32;
    i32 %0 = srem i32 %arg6, i32 %arg7;
    i32 %1 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 %arg7, i32 %0, i32* %arg5, i32* %arg4);
    i32* %2 = load i32** %arg;
    i32* %3 = load i32** %arg1;
    store i32* %r with i32 %1;
    i32* %t = alloc i32;
    i32 %4 = load i32* %3;
    store i32* %t with i32 %4;
    i32 %5 = load i32* %2;
    store i32* %3 with i32 %5;
    i32 %6 = load i32* %t;
    i32 %7 = load i32* %arg3;
    i32 %8 = load i32* %arg2;
    i32 %9 = sdiv i32 %8, i32 %7;
    i32 %10 = load i32* %2;
    i32 %11 = mul i32 %9, i32 %10;
    i32 %12 = sub i32 %6, i32 %11;
    store i32* %2 with i32 %12;
    i32 %13 = load i32* %r;
    ret i32 %13;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %b = alloc i32;
    store i32* %b with i32 15;
    [1 * i32]* %x = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    store i32* %0 with i32 1;
    [1 * i32]* %y = alloc [1 * i32];
    i32* %1 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    store i32* %1 with i32 1;
    i32 %2 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 7, i32 15, i32* %0, i32* %1);
    i32 %3 = load i32* %b;
    i32 %4 = load i32* %0;
    i32 %5 = srem i32 %4, i32 %3;
    i32 %6 = add i32 %3, i32 %5;
    i32 %7 = srem i32 %6, i32 %3;
    call (i32) -> void @putint(i32 %7);
    ret i32 0;
}
