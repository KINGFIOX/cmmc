internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @exgcd(i32 %a, i32 %b, i32* %x, i32* %y) -> i32 {
^entry:
    i1 %0 = scmp eq i32 %b, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %x with i32 1;
    store i32* %y with i32 0;
    ubr ^b1;
^if.else:
    i32 %1 = srem i32 %a, i32 %b;
    i32 %2 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 %b, i32 %1, i32* %x, i32* %y);
    i32 %3 = load i32* %x;
    i32 %4 = load i32* %y;
    store i32* %x with i32 %4;
    i32 %5 = sdiv i32 %a, i32 %b;
    i32 %6 = load i32* %y;
    i32 %7 = mul i32 %5, i32 %6;
    i32 %8 = sub i32 %3, i32 %7;
    store i32* %y with i32 %8;
    ubr ^b1;
^b1:
    i32 %9 = phi [^if.then, i32 %a] [^if.else, i32 %2];
    ret i32 %9;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [1 * i32]* %y = alloc [1 * i32];
    [1 * i32]* %x = alloc [1 * i32];
    i32* %0 = getelementptr &([1 * i32]* %x)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([1 * i32]* %y)[i64 0][i64 0];
    store i32* %1 with i32 1;
    i32 %2 = call (i32, i32, i32*, i32*) -> i32 @exgcd(i32 7, i32 15, i32* %0, i32* %1);
    i32 %3 = load i32* %0;
    i32 %4 = srem i32 %3, i32 15;
    i32 %5 = add i32 %4, i32 15;
    i32 %6 = srem i32 %5, i32 15;
    call (i32) -> void @putint(i32 %6);
    ret i32 0;
}
