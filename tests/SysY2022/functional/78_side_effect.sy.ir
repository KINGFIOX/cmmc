internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.header;
  ^while.header:
    i32 %0 = phi [^entry, i32 1] [^if.then1, i32 %21] [^entry4, i32 %0];
    i32 %1 = phi [^entry, i32 -1] [^if.then1, i32 %17] [^entry4, i32 %23];
    i32 %2 = phi [^entry, i32 5] [^if.then1, i32 %22] [^entry4, i32 %24];
    i1 %3 = icmp sgt i32 %2, i32 -1;
    cbr i1 %3(prob = 0.97), ^entry1, ^b;
  ^entry1:
    i32 %4 = add i32 %1, i32 1;
    i1 %5 = icmp neq i32 %4, i32 0;
    i32 %6 = add i32 %1, i32 2;
    i32 %7 = select i1 %5 ? i32 %6 : i32 %4;
    i32 %8 = add i32 %7, i32 1;
    i1 %9 = icmp neq i32 %8, i32 0;
    i1 %10 = icmp neq i32 %6, i32 0;
    i1 %11 = and i1 %5, i1 %10;
    i1 %12 = and i1 %9, i1 %11;
    i32 %13 = zext i1 %11 to i32;
    i32 %14 = add i32 %7, i32 %13;
    cbr i1 %12(prob = 0.5), ^if.then, ^entry2;
  ^b:
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ret i32 %1;
  ^if.then:
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ubr ^entry2;
  ^entry2:
    i32 %15 = add i32 %14, i32 1;
    i1 %16 = icmp slt i32 %15, i32 14;
    cbr i1 %16(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %17 = phi [^entry2, i32 %15] [^entry3, i32 %19] [^entry5, i32 %26];
    i1 %18 = phi [^entry2, i1 true] [^entry3, i1 false] [^entry5, i1 %29];
    cbr i1 %18(prob = 0.5), ^if.then1, ^entry4;
  ^entry3:
    i32 %19 = add i32 %14, i32 2;
    i1 %20 = icmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^entry5, ^b1;
  ^if.then1:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    i32 %21 = mul i32 %0, i32 2;
    i32 %22 = add i32 %2, i32 -1;
    ubr ^while.header;
  ^entry4:
    i32 %23 = add i32 %17, i32 1;
    i32 %24 = add i32 %2, i32 -1;
    ubr ^while.header;
  ^entry5:
    i32 %25 = add i32 %14, i32 3;
    i32 %26 = add i32 %14, i32 4;
    i32 %27 = sub i32 %25, i32 %26;
    i32 %28 = add i32 %27, i32 1;
    i1 %29 = icmp neq i32 %28, i32 0;
    ubr ^b1;
}
