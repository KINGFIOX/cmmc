internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^b5, i32 %31] [^entry, i32 5];
    i32 %1 = phi [^b5, i32 %29] [^entry, i32 -1];
    i32 %2 = phi [^b5, i32 %30] [^entry, i32 1];
    i32 %3 = phi [^b5, i32 %31] [^entry, i32 5];
    i1 %4 = scmp gt i32 %3, i32 -1;
    cbr i1 %4(prob = 0.97), ^entry1, ^b;
^entry1:
    i32 %5 = add i32 %1, i32 1;
    i1 %6 = scmp neq i32 %1, i32 -1;
    cbr i1 %6(prob = 0.5), ^entry2, ^b1;
^b:
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    ret i32 %1;
^entry2:
    i32 %7 = add i32 %1, i32 2;
    i1 %8 = scmp neq i32 %1, i32 -2;
    ubr ^b1;
^b1:
    i32 %9 = phi [^entry2, i32 %7] [^entry1, i32 %5];
    i1 %10 = phi [^entry2, i1 %8] [^entry1, i1 false];
    cbr i1 %10(prob = 0.5), ^entry3, ^b2;
^entry3:
    i32 %11 = add i32 %9, i32 1;
    i1 %12 = scmp neq i32 %9, i32 -1;
    ubr ^b2;
^b2:
    i32 %13 = phi [^entry3, i32 %11] [^b1, i32 %9];
    i1 %14 = phi [^entry3, i1 %12] [^b1, i1 false];
    cbr i1 %14(prob = 0.5), ^if.then, ^entry4;
^if.then:
    call (i32) -> void @putint(i32 %13);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    ubr ^entry4;
^entry4:
    i32 %15 = add i32 %13, i32 1;
    i1 %16 = scmp lt i32 %13, i32 13;
    cbr i1 %16(prob = 0.5), ^b3, ^entry5;
^b3:
    i32 %17 = phi [^b4, i32 %27] [^entry4, i32 %15];
    i1 %18 = phi [^entry4, i1 true] [^b4, i1 %28];
    cbr i1 %18(prob = 0.5), ^if.then1, ^entry6;
^entry5:
    i32 %19 = add i32 %13, i32 2;
    i1 %20 = scmp neq i32 %13, i32 -2;
    cbr i1 %20(prob = 0.5), ^entry7, ^b4;
^if.then1:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    i32 %21 = mul i32 %2, i32 2;
    ubr ^b5;
^entry6:
    i32 %22 = add i32 %17, i32 1;
    ubr ^b5;
^entry7:
    i32 %23 = add i32 %13, i32 3;
    i32 %24 = add i32 %13, i32 4;
    i32 %25 = sub i32 %23, i32 %24;
    i1 %26 = scmp neq i32 %25, i32 -1;
    ubr ^b4;
^b4:
    i32 %27 = phi [^entry7, i32 %24] [^entry5, i32 %19];
    i1 %28 = phi [^entry7, i1 %26] [^entry5, i1 false];
    ubr ^b3;
^b5:
    i32 %29 = phi [^entry6, i32 %22] [^if.then1, i32 %17];
    i32 %30 = phi [^entry6, i32 %2] [^if.then1, i32 %21];
    i32 %31 = add i32 %0, i32 -1;
    ubr ^while.header;
}
