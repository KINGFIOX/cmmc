internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^b, i32 %16];
    i32 %1 = phi [^entry, i32 -1] [^b, i32 %17];
    i32 %2 = phi [^entry, i32 5] [^b, i32 %18];
    i32 %3 = add i32 %1, i32 1;
    i1 %4 = icmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^entry1, ^entry2;
  ^entry1:
    i32 %5 = add i32 %1, i32 2;
    i1 %6 = icmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^entry3, ^entry2;
  ^entry2:
    i32 %7 = phi [^while.body, i32 %3] [^entry1, i32 %5] [^entry3, i32 %12] [^if.then1, i32 %12];
    i32 %8 = add i32 %7, i32 1;
    i1 %9 = icmp slt i32 %8, i32 14;
    cbr i1 %9(prob = 0.5), ^if.then, ^entry4;
  ^if.then:
    i32 %10 = phi [^entry2, i32 %8] [^entry6, i32 %23];
    call (i32) -> void @putint(i32 %10);
    call (i32) -> void @putch(i32 10);
    i32 %11 = mul i32 %0, i32 2;
    ubr ^b;
  ^entry3:
    i32 %12 = add i32 %1, i32 3;
    i1 %13 = icmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then1, ^entry2;
  ^entry4:
    i32 %14 = add i32 %7, i32 2;
    i1 %15 = icmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^entry6, ^entry5;
  ^if.then1:
    call (i32) -> void @putint(i32 %12);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ubr ^entry2;
  ^b:
    i32 %16 = phi [^if.then, i32 %11] [^entry5, i32 %0];
    i32 %17 = phi [^if.then, i32 %10] [^entry5, i32 %21];
    i32 %18 = add i32 %2, i32 -1;
    i1 %19 = icmp sgt i32 %18, i32 -1;
    cbr i1 %19(prob = 0.833333), ^while.body, ^b1;
  ^entry5:
    i32 %20 = phi [^entry4, i32 %14] [^entry6, i32 %23];
    i32 %21 = add i32 %20, i32 1;
    ubr ^b;
  ^entry6:
    i32 %22 = add i32 %7, i32 3;
    i32 %23 = add i32 %7, i32 4;
    i32 %24 = sub i32 %22, i32 %23;
    i32 %25 = add i32 %24, i32 1;
    i1 %26 = icmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^entry5;
  ^b1:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    ret i32 %17;
}
