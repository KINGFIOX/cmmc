internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @a = -1;
internal i32* @b = 1;
internal func @inc_a() -> i32 {
^entry:
    i32* %b = alloc i32;
    i32 %0 = load i32* @a;
    store i32* %b with i32 %0;
    i32 %1 = load i32* %b;
    i32 %2 = add i32 %1, i32 1;
    store i32* %b with i32 %2;
    i32 %3 = load i32* %b;
    store i32* @a with i32 %3;
    i32 %4 = load i32* @a;
    ret i32 %4;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %k = alloc i32;
    store i32* %k with i32 5;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %k;
    i1 %1 = scmp ge i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = call () -> i32 @inc_a();
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
^b:
    i32 %6 = load i32* @a;
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 32);
    i32 %7 = load i32* @b;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 10);
    i32 %8 = load i32* @a;
    ret i32 %8;
^b1:
    i32 %9 = call () -> i32 @inc_a();
    i1 %10 = scmp neq i32 %9, i32 0;
    ubr ^b2;
^b2:
    i1 %11 = phi [^b1, i1 %10] [^while.body, i1 false];
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^b3, ^b4;
^b3:
    i32 %14 = call () -> i32 @inc_a();
    i1 %15 = scmp neq i32 %14, i32 0;
    ubr ^b4;
^b4:
    i1 %16 = phi [^b3, i1 %15] [^b2, i1 false];
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then, ^b5;
^if.then:
    i32 %19 = load i32* @a;
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 32);
    i32 %20 = load i32* @b;
    call (i32) -> void @putint(i32 %20);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
^b5:
    i32 %21 = call () -> i32 @inc_a();
    i1 %22 = scmp lt i32 %21, i32 14;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %25 = phi [^b9, i1 %41] [^b5, i1 true];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^if.else;
^b7:
    i32 %28 = call () -> i32 @inc_a();
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^b8, ^b9;
^if.then1:
    i32 %30 = load i32* @a;
    call (i32) -> void @putint(i32 %30);
    call (i32) -> void @putch(i32 10);
    i32 %31 = load i32* @b;
    i32 %32 = mul i32 %31, i32 2;
    store i32* @b with i32 %32;
    ubr ^b10;
^b8:
    i32 %33 = call () -> i32 @inc_a();
    i32 %34 = call () -> i32 @inc_a();
    i32 %35 = sub i32 %33, i32 %34;
    i32 %36 = add i32 %35, i32 1;
    i1 %37 = scmp neq i32 %36, i32 0;
    ubr ^b9;
^if.else:
    i32 %38 = call () -> i32 @inc_a();
    ubr ^b10;
^b9:
    i1 %39 = phi [^b8, i1 %37] [^b7, i1 false];
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    ubr ^b6;
^b10:
    i32 %42 = load i32* %k;
    i32 %43 = sub i32 %42, i32 1;
    store i32* %k with i32 %43;
    ubr ^while.header;
}
