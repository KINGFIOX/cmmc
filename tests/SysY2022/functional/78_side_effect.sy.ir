internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    ubr ^while.header;
  ^while.header:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %13] [^entry6, i32 %0];
    i32 %1 = phi [^entry, i32 -1] [^if.then, i32 %12] [^entry6, i32 %19];
    i32 %2 = phi [^entry, i32 5] [^if.then, i32 %11] [^entry6, i32 %11];
    i1 %3 = icmp sgt i32 %2, i32 -1;
    cbr i1 %3(prob = 0.984615), ^entry1, ^b;
  ^entry1:
    i32 %4 = add i32 %1, i32 1;
    i1 %5 = icmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^entry2, ^entry3;
  ^b:
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ret i32 %1;
  ^entry2:
    i32 %6 = add i32 %1, i32 2;
    i1 %7 = icmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^entry4, ^entry3;
  ^entry3:
    i32 %8 = phi [^entry1, i32 %4] [^entry2, i32 %6] [^entry4, i32 %14] [^if.then1, i32 %14];
    i32 %9 = add i32 %8, i32 1;
    i1 %10 = icmp slt i32 %9, i32 14;
    i32 %11 = add i32 %2, i32 -1;
    cbr i1 %10(prob = 0.5), ^if.then, ^entry5;
  ^if.then:
    i32 %12 = phi [^entry3, i32 %9] [^entry7, i32 %21];
    call (i32) -> void @putint(i32 %12);
    call (i32) -> void @putch(i32 10);
    i32 %13 = mul i32 %0, i32 2;
    ubr ^while.header;
  ^entry4:
    i32 %14 = add i32 %1, i32 3;
    i1 %15 = icmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then1, ^entry3;
  ^entry5:
    i32 %16 = add i32 %8, i32 2;
    i1 %17 = icmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^entry7, ^entry6;
  ^if.then1:
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ubr ^entry3;
  ^entry6:
    i32 %18 = phi [^entry5, i32 %16] [^entry7, i32 %21];
    i32 %19 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry7:
    i32 %20 = add i32 %8, i32 3;
    i32 %21 = add i32 %8, i32 4;
    i32 %22 = sub i32 %20, i32 %21;
    i32 %23 = add i32 %22, i32 1;
    i1 %24 = icmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^entry6;
}
