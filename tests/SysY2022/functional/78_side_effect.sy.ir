internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    ubr [ ^entry1 i32 -1, i32 1, i32 5 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^entry2 i32 %0, i32 %arg1, i32 %arg2 ], [ ^indirect i32 %0, i32 %arg1, i32 %arg2 ];
^entry2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^entry3 i32 %0, i32 %arg1, i32 %arg2 ], [ ^indirect i32 %0, i32 %arg1, i32 %arg2 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 14;
    cbr i1 %1(prob = 0.5), [ ^b i1 true, i32 %0, i32 %arg1, i32 %arg2 ], [ ^entry4 i32 %0, i32 %arg1, i32 %arg2 ];
^entry3(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^if.then1 i32 %0, i32 %arg1, i32 %arg2 ], [ ^indirect i32 %0, i32 %arg1, i32 %arg2 ];
^b(i1 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    cbr i1 %arg(prob = 0.5), [ ^if.then i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^entry5 i32 %arg1, i32 %arg2, i32 %arg3 ];
^entry4(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^entry6 i32 %0, i32 %arg1, i32 %arg2 ], [ ^b i1 false, i32 %0, i32 %arg1, i32 %arg2 ];
^if.then(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    i32 %0 = mul i32 %arg1, i32 2;
    i32 %1 = add i32 %arg2, i32 -1;
    ubr [ ^indirect1 i32 %1, i32 %arg, i32 %0, i32 %1 ];
^if.then1(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg1);
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 14;
    cbr i1 %1(prob = 0.5), [ ^b i1 true, i32 %0, i32 %arg1, i32 %arg2 ], [ ^entry4 i32 %0, i32 %arg1, i32 %arg2 ];
^entry5(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = add i32 %arg2, i32 -1;
    ubr [ ^indirect1 i32 %1, i32 %0, i32 %arg1, i32 %1 ];
^entry6(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = add i32 %arg, i32 2;
    i32 %2 = sub i32 %0, i32 %1;
    i32 %3 = add i32 %2, i32 1;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), [ ^if.then i32 %1, i32 %arg1, i32 %arg2 ], [ ^entry5 i32 %1, i32 %arg1, i32 %arg2 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp gt i32 %arg, i32 -1;
    cbr i1 %0(prob = 0.97), [ ^entry1 i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b1 i32 %arg1, i32 %arg2 ];
^b1(i32 %arg, i32 %arg1):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 32);
    call (i32) -> void @putint(i32 %arg1);
    call (i32) -> void @putch(i32 10);
    ret i32 %arg;
}
