internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %a = alloc i32;
    store i32* %a with i32 -1;
    i32* %b = alloc i32;
    store i32* %b with i32 1;
    i32* %k = alloc i32;
    store i32* %k with i32 5;
    ubr [ ^entry1 i32* %a, i32* %k, i32* %b, i32* %a, i32 -1 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^entry2 i32* %arg3, i32* %arg1, i32* %arg3, i32* %arg2 ], [ ^indirect i32* %arg3, i32* %arg1, i32* %arg3, i32* %arg2 ];
^entry2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^entry3 i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg3 ], [ ^indirect i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg3 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 14;
    cbr i1 %2, [ ^b i1 true, i32* %arg1, i32* %arg2, i32* %arg3 ], [ ^indirect1 i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg2 ];
^entry3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then i32* %arg1, i32* %arg3, i32* %arg2 ], [ ^indirect i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg3 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    ubr [ ^entry4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ];
^b(i1 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    cbr i1 %arg, [ ^indirect2 i32* %arg1, i32* %arg3, i32* %arg2 ], [ ^indirect3 i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg2 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    ubr [ ^if.then1 i32* %arg, i32* %arg1, i32* %arg2, i32 %0 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 32);
    i32 %1 = load i32* %arg1;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %0, i32 1;
    store i32* %arg2 with i32 %2;
    i1 %3 = scmp lt i32 %2, i32 14;
    cbr i1 %3, [ ^b i1 true, i32* %arg, i32* %arg2, i32* %arg1 ], [ ^entry4 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg2, i32 %2 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    ubr [ ^entry5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ];
^entry4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^entry6 i32* %arg3, i32* %arg3, i32* %arg2, i32* %arg1 ], [ ^b i1 false, i32* %arg1, i32* %arg3, i32* %arg2 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    call (i32) -> void @putint(i32 %arg3);
    call (i32) -> void @putch(i32 10);
    i32 %0 = load i32* %arg1;
    i32 %1 = mul i32 %0, i32 2;
    store i32* %arg1 with i32 %1;
    i32 %2 = load i32* %arg;
    i32 %3 = sub i32 %2, i32 1;
    store i32* %arg with i32 %3;
    ubr [ ^while.header i32* %arg, i32 %3, i32* %arg2, i32* %arg1 ];
^entry5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %0;
    i32 %1 = load i32* %arg1;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %arg1 with i32 %2;
    ubr [ ^while.header i32* %arg1, i32 %2, i32* %arg3, i32* %arg2 ];
^entry6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32 %2 = load i32* %arg1;
    i32 %3 = add i32 %2, i32 1;
    store i32* %arg1 with i32 %3;
    i32 %4 = sub i32 %1, i32 %3;
    i32 %5 = add i32 %4, i32 1;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6, [ ^if.then1 i32* %arg3, i32* %arg2, i32* %arg1, i32 %3 ], [ ^entry5 i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg1, i32 %3 ];
^while.header(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3):
    i1 %0 = scmp ge i32 %arg1, i32 0;
    cbr i1 %0, [ ^indirect4 i32* %arg2, i32* %arg, i32* %arg3, i32* %arg2 ], [ ^b1 i32* %arg3, i32* %arg2 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg;
    ubr [ ^entry1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ];
^b1(i32* %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 32);
    i32 %1 = load i32* %arg;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    ret i32 %0;
}
