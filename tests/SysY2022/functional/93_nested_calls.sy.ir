internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %arr = alloc [10 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 %0];
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %1];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^while.body, i32 %7] [^entry, i32 %3];
    i32 %8 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %9 = phi [^while.body, i32 %13] [^entry, i32 0];
    i1 %10 = scmp lt i32 %9, i32 10;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %11 = getelementptr &([10 * i32]* %arr)[i64 0][i32 %8];
    i32 %12 = call () -> i32 @getint();
    store i32* %11 with i32 %12;
    i32 %13 = add i32 %8, i32 1;
    ubr ^while.header;
^b:
    i1 %14 = scmp eq i32 %4, i32 0;
    cbr i1 %14(prob = 0.5), ^b1, ^if.else;
^if.else:
    ubr ^b1;
^b1:
    i32 %15 = phi [^b, i32 1] [^if.else, i32 0];
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %17 = scmp neq i32 0, i32 %5;
    ubr ^b3;
^b3:
    i1 %18 = phi [^b1, i1 false] [^b2, i1 %17];
    cbr i1 %18(prob = 0.5), ^b4, ^if.else1;
^b4:
    i32 %19 = phi [^b3, i32 1] [^if.else1, i32 0];
    ubr ^entry1;
^if.else1:
    ubr ^b4;
^entry1:
    i32 %20 = phi [^if.then, i32 %20] [^b4, i32 %7];
    i32 %21 = phi [^b4, i32 %19] [^if.then, i32 %24];
    i32 %22 = phi [^b4, i32 %6] [^if.then, i32 0];
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then, ^entry2;
^if.then:
    i32 %24 = srem i32 %21, i32 %22;
    ubr ^entry1;
^entry2:
    i32 %25 = phi [^entry1, i32 %21] [^if.else2, i32 %28];
    i32 %26 = phi [^entry1, i32 %20] [^if.else2, i32 0];
    i1 %27 = scmp eq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^if.else2;
^if.else2:
    i32 %28 = add i32 %25, i32 %26;
    ubr ^entry2;
^if.then1:
    i32* %29 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %36 = load i32* %35;
    i1 %37 = scmp eq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^b5, ^if.else3;
^if.else3:
    ubr ^b5;
^b5:
    i32 %38 = phi [^if.then1, i32 1] [^if.else3, i32 0];
    i1 %39 = scmp neq i32 %34, i32 0;
    cbr i1 %39(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %40 = scmp neq i32 %38, i32 0;
    ubr ^b7;
^b7:
    i1 %41 = phi [^b5, i1 false] [^b6, i1 %40];
    cbr i1 %41(prob = 0.5), ^b8, ^if.else4;
^if.else4:
    ubr ^b8;
^b8:
    i32 %42 = phi [^b7, i32 1] [^if.else4, i32 0];
    i32* %43 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^b9, ^if.else5;
^b9:
    i32 %48 = phi [^b8, i32 1] [^if.else5, i32 0];
    ubr ^entry3;
^if.else5:
    ubr ^b9;
^entry3:
    i32 %49 = phi [^b9, i32 %44] [^if.then2, i32 %52];
    i32 %50 = phi [^b9, i32 %48] [^if.then2, i32 0];
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.5), ^if.then2, ^b10;
^if.then2:
    i32 %52 = srem i32 %49, i32 %50;
    ubr ^entry3;
^b10:
    i1 %53 = scmp neq i32 %32, i32 0;
    cbr i1 %53(prob = 0.5), ^b11, ^if.else6;
^b11:
    i32 %54 = phi [^b10, i32 %42] [^if.else6, i32 %49];
    i32* %55 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %56 = load i32* %55;
    ubr ^entry4;
^if.else6:
    ubr ^b11;
^entry4:
    i32 %57 = phi [^b11, i32 %54] [^if.else7, i32 %63];
    i32 %58 = phi [^b11, i32 %56] [^if.else7, i32 0];
    i1 %59 = scmp eq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^if.then3, ^if.else7;
^if.then3:
    i32 %60 = add i32 %57, i32 1;
    i32* %61 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %62 = load i32* %61;
    ubr ^entry5;
^if.else7:
    i32 %63 = add i32 %57, i32 %58;
    ubr ^entry4;
^entry5:
    i32 %64 = phi [^if.then3, i32 %60] [^if.then4, i32 %67];
    i32 %65 = phi [^if.then3, i32 %62] [^if.then4, i32 0];
    i1 %66 = scmp neq i32 %65, i32 0;
    cbr i1 %66(prob = 0.5), ^if.then4, ^b12;
^if.then4:
    i32 %67 = srem i32 %64, i32 %65;
    ubr ^entry5;
^b12:
    i32* %68 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %71 = load i32* %70;
    i1 %72 = scmp eq i32 %71, i32 0;
    cbr i1 %72(prob = 0.5), ^b13, ^if.else8;
^b13:
    i32 %73 = phi [^b12, i32 1] [^if.else8, i32 0];
    ubr ^entry6;
^if.else8:
    ubr ^b13;
^entry6:
    i32 %74 = phi [^b13, i32 %69] [^if.else9, i32 %78];
    i32 %75 = phi [^b13, i32 %73] [^if.else9, i32 0];
    i1 %76 = scmp eq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^if.then5, ^if.else9;
^if.then5:
    i32 %77 = add i32 %74, i32 1;
    ubr ^entry7;
^if.else9:
    i32 %78 = add i32 %74, i32 %75;
    ubr ^entry6;
^entry7:
    i32 %79 = phi [^if.then5, i32 %64] [^if.else10, i32 %79];
    i32 %80 = phi [^if.then5, i32 %77] [^if.else10, i32 %83];
    i32 %81 = phi [^if.then5, i32 %4] [^if.else10, i32 0];
    i1 %82 = scmp eq i32 %81, i32 0;
    cbr i1 %82(prob = 0.5), ^if.then6, ^if.else10;
^if.else10:
    i32 %83 = sub i32 %80, i32 %81;
    ubr ^entry7;
^if.then6:
    i1 %84 = scmp neq i32 %25, i32 -1;
    cbr i1 %84(prob = 0.5), ^b14, ^if.else11;
^if.else11:
    i32 %85 = mul i32 %79, i32 %80;
    ubr ^b14;
^b14:
    i32 %86 = phi [^if.then6, i32 %30] [^if.else11, i32 %85];
    i1 %87 = scmp eq i32 %6, i32 0;
    cbr i1 %87(prob = 0.5), ^b15, ^if.else12;
^b15:
    i32 %88 = phi [^b14, i32 1] [^if.else12, i32 0];
    ubr ^entry8;
^if.else12:
    ubr ^b15;
^entry8:
    i32 %89 = phi [^b15, i32 %88] [^if.else13, i32 %93];
    i32 %90 = phi [^b15, i32 %20] [^if.else13, i32 0];
    i1 %91 = scmp eq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then7, ^if.else13;
^if.then7:
    i32 %92 = add i32 %89, i32 1;
    ubr ^entry9;
^if.else13:
    i32 %93 = add i32 %89, i32 %90;
    ubr ^entry8;
^entry9:
    i32 %94 = phi [^if.then7, i32 %5] [^if.then8, i32 %97];
    i32 %95 = phi [^if.then7, i32 %92] [^if.then8, i32 0];
    i1 %96 = scmp neq i32 %95, i32 0;
    cbr i1 %96(prob = 0.5), ^if.then8, ^entry10;
^if.then8:
    i32 %97 = srem i32 %94, i32 %95;
    ubr ^entry9;
^entry10:
    i32 %98 = phi [^entry9, i32 %86] [^if.else14, i32 %102];
    i32 %99 = phi [^entry9, i32 %94] [^if.else14, i32 0];
    i1 %100 = scmp eq i32 %99, i32 0;
    cbr i1 %100(prob = 0.5), ^if.then9, ^if.else14;
^if.then9:
    i32 %101 = add i32 %98, i32 1;
    ubr ^entry11;
^if.else14:
    i32 %102 = add i32 %98, i32 %99;
    ubr ^entry10;
^entry11:
    i32 %103 = phi [^if.then9, i32 %101] [^if.else15, i32 %103];
    i32 %104 = phi [^if.then9, i32 %30] [^if.else15, i32 %108];
    i32 %105 = phi [^if.then9, i32 %32] [^if.else15, i32 0];
    i1 %106 = scmp eq i32 %105, i32 0;
    cbr i1 %106(prob = 0.5), ^if.then10, ^if.else15;
^if.then10:
    i32 %107 = mul i32 %103, i32 %104;
    ubr ^entry12;
^if.else15:
    i32 %108 = sub i32 %104, i32 %105;
    ubr ^entry11;
^entry12:
    i32 %109 = phi [^if.then10, i32 %107] [^if.then11, i32 %112];
    i32 %110 = phi [^if.then10, i32 %34] [^if.then11, i32 0];
    i1 %111 = scmp neq i32 %110, i32 0;
    cbr i1 %111(prob = 0.5), ^if.then11, ^b16;
^if.then11:
    i32 %112 = srem i32 %109, i32 %110;
    ubr ^entry12;
^b16:
    i32 %113 = neg i32 %46;
    ubr ^entry13;
^entry13:
    i32 %114 = phi [^b16, i32 %44] [^if.else16, i32 %119];
    i32 %115 = phi [^b16, i32 %113] [^if.else16, i32 0];
    i1 %116 = scmp eq i32 %115, i32 0;
    cbr i1 %116(prob = 0.5), ^if.then12, ^if.else16;
^if.then12:
    i32 %117 = add i32 %114, i32 1;
    i32 %118 = neg i32 %56;
    ubr ^entry14;
^if.else16:
    i32 %119 = add i32 %114, i32 %115;
    ubr ^entry13;
^entry14:
    i32 %120 = phi [^if.then12, i32 %117] [^if.then13, i32 %123];
    i32 %121 = phi [^if.then12, i32 %118] [^if.then13, i32 0];
    i1 %122 = scmp neq i32 %121, i32 0;
    cbr i1 %122(prob = 0.5), ^if.then13, ^b17;
^if.then13:
    i32 %123 = srem i32 %120, i32 %121;
    ubr ^entry14;
^b17:
    i1 %124 = scmp eq i32 %69, i32 0;
    cbr i1 %124(prob = 0.5), ^b18, ^if.else17;
^b18:
    i32 %125 = phi [^b17, i32 1] [^if.else17, i32 0];
    ubr ^entry15;
^if.else17:
    ubr ^b18;
^entry15:
    i32 %126 = phi [^b18, i32 %120] [^if.else18, i32 %126];
    i32 %127 = phi [^b18, i32 %62] [^if.else18, i32 %132];
    i32 %128 = phi [^b18, i32 %125] [^if.else18, i32 0];
    i1 %129 = scmp eq i32 %128, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then14, ^if.else18;
^if.then14:
    i32 %130 = mul i32 %126, i32 %127;
    i32 %131 = neg i32 %71;
    ubr ^entry16;
^if.else18:
    i32 %132 = sub i32 %127, i32 %128;
    ubr ^entry15;
^entry16:
    i32 %133 = phi [^if.then14, i32 %130] [^if.then15, i32 %136];
    i32 %134 = phi [^if.then14, i32 %131] [^if.then15, i32 0];
    i1 %135 = scmp neq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then15, ^entry17;
^if.then15:
    i32 %136 = srem i32 %133, i32 %134;
    ubr ^entry16;
^entry17:
    i32 %137 = phi [^entry16, i32 %133] [^if.else19, i32 %141];
    i32 %138 = phi [^entry16, i32 %4] [^if.else19, i32 0];
    i1 %139 = scmp eq i32 %138, i32 0;
    cbr i1 %139(prob = 0.5), ^if.then16, ^if.else19;
^if.then16:
    i32 %140 = add i32 %137, i32 1;
    ubr ^entry18;
^if.else19:
    i32 %141 = add i32 %137, i32 %138;
    ubr ^entry17;
^entry18:
    i32 %142 = phi [^if.then16, i32 %109] [^if.else20, i32 %142];
    i32 %143 = phi [^if.then16, i32 %36] [^if.else20, i32 %146];
    i32 %144 = phi [^if.then16, i32 %140] [^if.else20, i32 0];
    i1 %145 = scmp eq i32 %144, i32 0;
    cbr i1 %145(prob = 0.5), ^if.then17, ^if.else20;
^if.else20:
    i32 %146 = sub i32 %143, i32 %144;
    ubr ^entry18;
^if.then17:
    i32 %147 = mul i32 %142, i32 %143;
    ret i32 %147;
}
