internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %arr = alloc [10 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^while.body, i32 %8] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 10;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %6 = getelementptr &([10 * i32]* %arr)[i64 0][i32 %4];
    i32 %7 = call () -> i32 @getint();
    store i32* %6 with i32 %7;
    i32 %8 = add i32 %4, i32 1;
    ubr ^while.header;
^b:
    i1 %9 = scmp eq i32 %0, i32 0;
    cbr i1 %9(prob = 0.5), ^b1, ^if.else;
^if.else:
    ubr ^b1;
^b1:
    i32 %10 = phi [^b, i32 1] [^if.else, i32 0];
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp neq i32 0, i32 %1;
    ubr ^b3;
^b3:
    i1 %13 = phi [^b1, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.5), ^b4, ^if.else1;
^b4:
    i32 %14 = phi [^b3, i32 1] [^if.else1, i32 0];
    ubr ^entry1;
^if.else1:
    ubr ^b4;
^entry1:
    i32 %15 = phi [^b4, i32 %14] [^if.then, i32 %18];
    i32 %16 = phi [^b4, i32 %2] [^if.then, i32 0];
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^entry2;
^if.then:
    i32 %18 = srem i32 %15, i32 %16;
    ubr ^entry1;
^entry2:
    i32 %19 = phi [^entry1, i32 %15] [^if.else2, i32 %22];
    i32 %20 = phi [^entry1, i32 %3] [^if.else2, i32 0];
    i1 %21 = scmp eq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then1, ^if.else2;
^if.else2:
    i32 %22 = add i32 %19, i32 %20;
    ubr ^entry2;
^if.then1:
    i32* %23 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b5, ^if.else3;
^if.else3:
    ubr ^b5;
^b5:
    i32 %32 = phi [^if.then1, i32 1] [^if.else3, i32 0];
    i1 %33 = scmp neq i32 %28, i32 0;
    cbr i1 %33(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %34 = scmp neq i32 %32, i32 0;
    ubr ^b7;
^b7:
    i1 %35 = phi [^b5, i1 false] [^b6, i1 %34];
    cbr i1 %35(prob = 0.5), ^b8, ^if.else4;
^if.else4:
    ubr ^b8;
^b8:
    i32 %36 = phi [^b7, i32 1] [^if.else4, i32 0];
    i32* %37 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^b9, ^if.else5;
^b9:
    i32 %42 = phi [^b8, i32 1] [^if.else5, i32 0];
    ubr ^entry3;
^if.else5:
    ubr ^b9;
^entry3:
    i32 %43 = phi [^b9, i32 %38] [^if.then2, i32 %46];
    i32 %44 = phi [^b9, i32 %42] [^if.then2, i32 0];
    i1 %45 = scmp neq i32 %44, i32 0;
    cbr i1 %45(prob = 0.5), ^if.then2, ^b10;
^if.then2:
    i32 %46 = srem i32 %43, i32 %44;
    ubr ^entry3;
^b10:
    i1 %47 = scmp neq i32 %26, i32 0;
    cbr i1 %47(prob = 0.5), ^b11, ^if.else6;
^b11:
    i32 %48 = phi [^b10, i32 %36] [^if.else6, i32 %43];
    i32* %49 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %50 = load i32* %49;
    ubr ^entry4;
^if.else6:
    ubr ^b11;
^entry4:
    i32 %51 = phi [^b11, i32 %48] [^if.else7, i32 %57];
    i32 %52 = phi [^b11, i32 %50] [^if.else7, i32 0];
    i1 %53 = scmp eq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^if.then3, ^if.else7;
^if.then3:
    i32 %54 = add i32 %51, i32 1;
    i32* %55 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %56 = load i32* %55;
    ubr ^entry5;
^if.else7:
    i32 %57 = add i32 %51, i32 %52;
    ubr ^entry4;
^entry5:
    i32 %58 = phi [^if.then3, i32 %54] [^if.then4, i32 %61];
    i32 %59 = phi [^if.then3, i32 %56] [^if.then4, i32 0];
    i1 %60 = scmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.5), ^if.then4, ^b12;
^if.then4:
    i32 %61 = srem i32 %58, i32 %59;
    ubr ^entry5;
^b12:
    i32* %62 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %65 = load i32* %64;
    i1 %66 = scmp eq i32 %65, i32 0;
    cbr i1 %66(prob = 0.5), ^b13, ^if.else8;
^b13:
    i32 %67 = phi [^b12, i32 1] [^if.else8, i32 0];
    ubr ^entry6;
^if.else8:
    ubr ^b13;
^entry6:
    i32 %68 = phi [^b13, i32 %63] [^if.else9, i32 %72];
    i32 %69 = phi [^b13, i32 %67] [^if.else9, i32 0];
    i1 %70 = scmp eq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^if.then5, ^if.else9;
^if.then5:
    i32 %71 = add i32 %68, i32 1;
    ubr ^entry7;
^if.else9:
    i32 %72 = add i32 %68, i32 %69;
    ubr ^entry6;
^entry7:
    i32 %73 = phi [^if.then5, i32 %71] [^if.else10, i32 %76];
    i32 %74 = phi [^if.then5, i32 %0] [^if.else10, i32 0];
    i1 %75 = scmp eq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then6, ^if.else10;
^if.else10:
    i32 %76 = sub i32 %73, i32 %74;
    ubr ^entry7;
^if.then6:
    i1 %77 = scmp neq i32 %19, i32 -1;
    cbr i1 %77(prob = 0.5), ^b14, ^if.else11;
^if.else11:
    i32 %78 = mul i32 %58, i32 %73;
    ubr ^b14;
^b14:
    i32 %79 = phi [^if.then6, i32 %24] [^if.else11, i32 %78];
    i1 %80 = scmp eq i32 %2, i32 0;
    cbr i1 %80(prob = 0.5), ^b15, ^if.else12;
^b15:
    i32 %81 = phi [^b14, i32 1] [^if.else12, i32 0];
    ubr ^entry8;
^if.else12:
    ubr ^b15;
^entry8:
    i32 %82 = phi [^b15, i32 %81] [^if.else13, i32 %86];
    i32 %83 = phi [^b15, i32 %3] [^if.else13, i32 0];
    i1 %84 = scmp eq i32 %83, i32 0;
    cbr i1 %84(prob = 0.5), ^if.then7, ^if.else13;
^if.then7:
    i32 %85 = add i32 %82, i32 1;
    ubr ^entry9;
^if.else13:
    i32 %86 = add i32 %82, i32 %83;
    ubr ^entry8;
^entry9:
    i32 %87 = phi [^if.then7, i32 %1] [^if.then8, i32 %90];
    i32 %88 = phi [^if.then7, i32 %85] [^if.then8, i32 0];
    i1 %89 = scmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.5), ^if.then8, ^entry10;
^if.then8:
    i32 %90 = srem i32 %87, i32 %88;
    ubr ^entry9;
^entry10:
    i32 %91 = phi [^entry9, i32 %79] [^if.else14, i32 %95];
    i32 %92 = phi [^entry9, i32 %87] [^if.else14, i32 0];
    i1 %93 = scmp eq i32 %92, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then9, ^if.else14;
^if.then9:
    i32 %94 = add i32 %91, i32 1;
    ubr ^entry11;
^if.else14:
    i32 %95 = add i32 %91, i32 %92;
    ubr ^entry10;
^entry11:
    i32 %96 = phi [^if.then9, i32 %24] [^if.else15, i32 %100];
    i32 %97 = phi [^if.then9, i32 %26] [^if.else15, i32 0];
    i1 %98 = scmp eq i32 %97, i32 0;
    cbr i1 %98(prob = 0.5), ^if.then10, ^if.else15;
^if.then10:
    i32 %99 = mul i32 %96, i32 %94;
    ubr ^entry12;
^if.else15:
    i32 %100 = sub i32 %96, i32 %97;
    ubr ^entry11;
^entry12:
    i32 %101 = phi [^if.then10, i32 %99] [^if.then11, i32 %104];
    i32 %102 = phi [^if.then10, i32 %28] [^if.then11, i32 0];
    i1 %103 = scmp neq i32 %102, i32 0;
    cbr i1 %103(prob = 0.5), ^if.then11, ^b16;
^if.then11:
    i32 %104 = srem i32 %101, i32 %102;
    ubr ^entry12;
^b16:
    i32 %105 = neg i32 %40;
    ubr ^entry13;
^entry13:
    i32 %106 = phi [^b16, i32 %38] [^if.else16, i32 %111];
    i32 %107 = phi [^b16, i32 %105] [^if.else16, i32 0];
    i1 %108 = scmp eq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^if.then12, ^if.else16;
^if.then12:
    i32 %109 = add i32 %106, i32 1;
    i32 %110 = neg i32 %50;
    ubr ^entry14;
^if.else16:
    i32 %111 = add i32 %106, i32 %107;
    ubr ^entry13;
^entry14:
    i32 %112 = phi [^if.then12, i32 %109] [^if.then13, i32 %115];
    i32 %113 = phi [^if.then12, i32 %110] [^if.then13, i32 0];
    i1 %114 = scmp neq i32 %113, i32 0;
    cbr i1 %114(prob = 0.5), ^if.then13, ^b17;
^if.then13:
    i32 %115 = srem i32 %112, i32 %113;
    ubr ^entry14;
^b17:
    i1 %116 = scmp eq i32 %63, i32 0;
    cbr i1 %116(prob = 0.5), ^b18, ^if.else17;
^b18:
    i32 %117 = phi [^b17, i32 1] [^if.else17, i32 0];
    ubr ^entry15;
^if.else17:
    ubr ^b18;
^entry15:
    i32 %118 = phi [^b18, i32 %56] [^if.else18, i32 %123];
    i32 %119 = phi [^b18, i32 %117] [^if.else18, i32 0];
    i1 %120 = scmp eq i32 %119, i32 0;
    cbr i1 %120(prob = 0.5), ^if.then14, ^if.else18;
^if.then14:
    i32 %121 = mul i32 %112, i32 %118;
    i32 %122 = neg i32 %65;
    ubr ^entry16;
^if.else18:
    i32 %123 = sub i32 %118, i32 %119;
    ubr ^entry15;
^entry16:
    i32 %124 = phi [^if.then14, i32 %121] [^if.then15, i32 %127];
    i32 %125 = phi [^if.then14, i32 %122] [^if.then15, i32 0];
    i1 %126 = scmp neq i32 %125, i32 0;
    cbr i1 %126(prob = 0.5), ^if.then15, ^entry17;
^if.then15:
    i32 %127 = srem i32 %124, i32 %125;
    ubr ^entry16;
^entry17:
    i32 %128 = phi [^entry16, i32 %124] [^if.else19, i32 %132];
    i32 %129 = phi [^entry16, i32 %0] [^if.else19, i32 0];
    i1 %130 = scmp eq i32 %129, i32 0;
    cbr i1 %130(prob = 0.5), ^if.then16, ^if.else19;
^if.then16:
    i32 %131 = add i32 %128, i32 1;
    ubr ^entry18;
^if.else19:
    i32 %132 = add i32 %128, i32 %129;
    ubr ^entry17;
^entry18:
    i32 %133 = phi [^if.then16, i32 %30] [^if.else20, i32 %136];
    i32 %134 = phi [^if.then16, i32 %131] [^if.else20, i32 0];
    i1 %135 = scmp eq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^if.then17, ^if.else20;
^if.else20:
    i32 %136 = sub i32 %133, i32 %134;
    ubr ^entry18;
^if.then17:
    i32 %137 = mul i32 %101, i32 %133;
    ret i32 %137;
}
