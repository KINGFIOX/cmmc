internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    [10 * i32]* %arr = alloc [10 * i32];
    ubr [ ^while.body [10 * i32]* %arr, i32 %0, i32 %1, i32 %2, i32 %3, i32 0 ];
^while.body([10 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i32 0][i32 %arg5];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg5, i32 1;
    i1 %3 = scmp lt i32 %2, i32 10;
    cbr i1 %3, [ ^while.body [10 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %2 ], [ ^b [10 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^b([10 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp neq i32 %arg1, i32 0;
    i1 %1 = xor i1 %0, i1 true;
    i32 %2 = neg i32 %arg2;
    cbr i1 %1, [ ^indirect i32 %2, [10 * i32]* %arg, i32 %arg2, i32 %arg1, i32 %arg3, i32 %arg4 ], [ ^b1 i32 %arg1, i32 %arg2, [10 * i32]* %arg, i32 %arg3, i32 %arg4 ];
^indirect(i32 %arg, [10 * i32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp neq i32 %arg, i32 0;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = scmp neq i32 %arg4, i32 0;
    cbr i1 %2, [ ^indirect1 i32 %arg4, i32 %1, [10 * i32]* %arg1, i32 %arg4, i32 %arg2, i32 %arg3, i32 %arg5 ], [ ^b2 i32 %1, i32 %arg3, i32 %arg2, i32 %arg4, [10 * i32]* %arg1, i32 %arg5 ];
^b1(i32 %arg, i32 %arg1, [10 * i32]* %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp neq i32 %arg3, i32 0;
    cbr i1 %0, [ ^indirect1 i32 %arg3, i32 0, [10 * i32]* %arg2, i32 %arg3, i32 %arg1, i32 %arg, i32 %arg4 ], [ ^b2 i32 0, i32 %arg, i32 %arg1, i32 %arg3, [10 * i32]* %arg2, i32 %arg4 ];
^indirect1(i32 %arg, i32 %arg1, [10 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b2 i32 %0, i32 %arg5, i32 %arg4, i32 %arg3, [10 * i32]* %arg2, i32 %arg6 ];
^b2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, [10 * i32]* %arg4, i32 %arg5):
    i1 %0 = scmp eq i32 %arg5, i32 0;
    cbr i1 %0, [ ^indirect3 i32 %arg, [10 * i32]* %arg4, i32 %arg3, i32 %arg5, i32 %arg2, i32 %arg1, i1 %0 ], [ ^indirect2 i32 %arg5, i32 %arg, [10 * i32]* %arg4, i32 %arg3, i32 %arg5, i32 %arg2, i32 %arg1, i1 %0 ];
^indirect2(i32 %arg, i32 %arg1, [10 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect3 i32 %0, [10 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
^indirect3(i32 %arg, [10 * i32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = neg i32 %0;
    i32* %2 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 0];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 1];
    i32 %5 = load i32* %4;
    i32 %6 = neg i32 %5;
    i32* %7 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 2];
    i32 %8 = load i32* %7;
    i32* %9 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 3];
    i32 %10 = load i32* %9;
    i1 %11 = scmp neq i32 %10, i32 0;
    i1 %12 = xor i1 %11, i1 true;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %8, i32 0;
    cbr i1 %14, [ ^indirect4 i32 %13, [10 * i32]* %arg1, i32 %10, i32 %arg2, i32 %arg3, i32 %8, i32 %5, i32 %1, i32 %6, i32 %arg4, i32 %3, i32 %arg5, i1 %14, i1 %arg6 ], [ ^b3 i1 false, i32 %arg5, i32 %3, i32 %arg4, i32 %6, i32 %1, i32 %5, i32 %8, i32 %arg3, i32 %arg2, i32 %10, [10 * i32]* %arg1, i1 %arg6, i1 %14 ];
^indirect4(i32 %arg, [10 * i32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13):
    i1 %0 = scmp neq i32 %arg, i32 0;
    ubr [ ^b3 i1 %0, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, [10 * i32]* %arg1, i1 %arg13, i1 %arg12 ];
^b3(i1 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [10 * i32]* %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = zext i1 %arg to i32;
    i32* %1 = getelementptr &([10 * i32]* %arg11)[i32 0][i32 4];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &([10 * i32]* %arg11)[i32 0][i32 5];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    i1 %6 = xor i1 %5, i1 true;
    i32 %7 = zext i1 %6 to i32;
    cbr i1 %6, [ ^indirect5 i32 %7, i32 %2, i32 %4, i32 %0, i32 %arg8, i32 %arg10, i32 %arg7, i32 %arg4, i32 %arg6, i32 %2, [10 * i32]* %arg11, i32 %arg5, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg9, i1 %arg13, i1 %arg12 ], [ ^b4 i32 %2, i32 %4, i32 %0, i32 %arg8, i32 %arg10, i32 %arg7, i32 %arg4, i32 %arg6, i32 %2, i32 %arg9, i32 %arg1, i32 %arg2, [10 * i32]* %arg11, i32 %arg5, i32 %arg3, i1 %arg12, i1 %arg13 ];
^indirect5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, [10 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i1 %arg16, i1 %arg17):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b4 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg15, i32 %arg13, i32 %arg14, [10 * i32]* %arg10, i32 %arg11, i32 %arg12, i1 %arg17, i1 %arg16 ];
^b4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [10 * i32]* %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16):
    i1 %0 = scmp neq i32 %arg6, i32 0;
    i32 %1 = select i1 %0 ? i32 %arg2 : i32 %arg;
    i32* %2 = getelementptr &([10 * i32]* %arg12)[i32 0][i32 6];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 0;
    cbr i1 %4, [ ^indirect7 i32 %1, [10 * i32]* %arg12, i32 %arg4, i32 %arg5, i32 %arg7, i32 %arg8, i32 %arg13, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg14, i32 %arg3, i32 %arg1, i32 %3, i1 %arg16, i1 %arg15 ], [ ^indirect6 i32 %3, i32 %1, [10 * i32]* %arg12, i32 %arg4, i32 %arg5, i32 %arg7, i32 %arg8, i32 %arg13, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg14, i32 %arg3, i32 %arg1, i32 %3, i1 %arg15, i1 %arg16 ];
^indirect6(i32 %arg, i32 %arg1, [10 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect7 i32 %0, [10 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg16, i1 %arg15 ];
^indirect7(i32 %arg, [10 * i32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15):
    i32 %0 = add i32 %arg, i32 1;
    i32* %1 = getelementptr &([10 * i32]* %arg1)[i32 0][i32 7];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect8 i32 %2, i32 %0, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg6, i32 %arg10, [10 * i32]* %arg1, i32 %arg2, i32 %2, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg15, i1 %arg14 ], [ ^b5 i32 %0, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg2, i32 %2, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg3, i32 %arg5, i32 %arg4, i32 %arg10, [10 * i32]* %arg1, i32 %arg6, i1 %arg14, i1 %arg15 ];
^indirect8(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, [10 * i32]* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i1 %arg16, i1 %arg17):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b5 i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg2, i32 %arg4, i32 %arg3, i32 %arg9, [10 * i32]* %arg10, i32 %arg8, i1 %arg17, i1 %arg16 ];
^b5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [10 * i32]* %arg13, i32 %arg14, i1 %arg15, i1 %arg16):
    i32* %0 = getelementptr &([10 * i32]* %arg13)[i32 0][i32 8];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([10 * i32]* %arg13)[i32 0][i32 9];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i1 %5 = xor i1 %4, i1 true;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7, [ ^indirect10 i32 %1, i32 %arg14, i32 %arg12, i32 %3, i32 %arg1, i32 %arg, i32 %arg3, i32 %arg2, i32 %arg7, i32 %arg6, i32 %arg9, i32 %1, i32 %arg8, i32 %arg5, i32 %arg4, i32 %arg11, i32 %arg10, i1 %arg16, i1 %arg15 ], [ ^indirect9 i32 %6, i32 %1, i32 %arg8, i32 %1, i32 %arg9, i32 %arg10, i32 %arg11, i32 %3, i32 %arg14, i32 %arg12, i32 %arg1, i32 %arg, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i32 %arg7, i32 %arg6, i1 %arg15, i1 %arg16 ];
^indirect9(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect10 i32 %0, i32 %arg8, i32 %arg9, i32 %arg7, i32 %arg10, i32 %arg11, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg4, i32 %arg3, i32 %arg2, i32 %arg12, i32 %arg13, i32 %arg6, i32 %arg5, i1 %arg19, i1 %arg18 ];
^indirect10(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i1 %arg17, i1 %arg18):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %arg7, i32 0;
    cbr i1 %1, [ ^indirect12 i32 %0, i32 %arg5, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg4, i32 %arg9, i32 %arg8, i32 %arg6, i32 %arg7, i32 %arg10, i1 %arg18, i1 %1, i1 %arg17 ], [ ^indirect11 i32 %arg7, i32 %0, i32 %arg5, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg6, i32 %arg7, i32 %arg4, i1 %1, i1 %arg18, i1 %arg17 ];
^indirect11(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i1 %arg18, i1 %arg19, i1 %arg20):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect12 i32 %0, i32 %arg2, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg17, i32 %arg4, i32 %arg3, i32 %arg15, i32 %arg16, i32 %arg5, i1 %arg19, i1 %arg18, i1 %arg20 ];
^indirect12(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = mul i32 %arg1, i32 %arg;
    i1 %1 = scmp neq i32 %arg9, i32 0;
    i32 %2 = select i1 %1 ? i32 %arg14 : i32 %0;
    i1 %3 = scmp neq i32 %arg11, i32 0;
    i1 %4 = xor i1 %3, i1 true;
    i32 %5 = zext i1 %4 to i32;
    cbr i1 %arg19, [ ^indirect14 i32 %5, i32 %arg10, i32 %2, i32 %arg14, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg16, i32 %arg13, i32 %arg3, i32 %arg2, i32 %arg5, i32 %arg15, i32 %arg4, i1 %arg18, i1 %arg17 ], [ ^indirect13 i32 %arg12, i32 %5, i32 %arg10, i32 %2, i32 %arg14, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg16, i32 %arg13, i32 %arg3, i32 %arg2, i32 %arg5, i32 %arg15, i32 %arg4, i1 %arg17, i1 %arg18 ];
^indirect13(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect14 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg16, i1 %arg15 ];
^indirect14(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect15 i32 %0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg15, i1 %arg14 ], [ ^entry1 i32 %arg2, i32 %arg1, i32 %arg13, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i1 %arg14, i1 %arg15 ];
^indirect15(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^entry1 i32 %arg2, i32 %0, i32 %arg13, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i1 %arg15, i1 %arg14 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0, [ ^indirect17 i32 %arg, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg14, i1 %arg13 ], [ ^indirect16 i32 %arg1, i32 %arg, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg13, i1 %arg14 ];
^indirect16(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect17 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg14, i1 %arg13 ];
^indirect17(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %arg2, i32 0;
    cbr i1 %1, [ ^indirect19 i32 %arg1, i32 %0, i32 %arg5, i32 %arg6, i32 %arg3, i32 %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg12 ], [ ^indirect18 i32 %arg2, i32 %arg1, i32 %0, i32 %arg5, i32 %arg6, i32 %arg3, i32 %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg12 ];
^indirect18(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect19 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13 ];
^indirect19(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11, i1 %arg12):
    i32 %0 = mul i32 %arg1, i32 %arg;
    cbr i1 %arg12, [ ^indirect20 i32 %arg2, i32 %0, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11 ], [ ^b6 i32 %0, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i1 %arg11 ];
^indirect20(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i1 %arg10):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b6 i32 %0, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg10 ];
^b6(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    i32 %0 = neg i32 %arg8;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect22 i32 %arg7, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg, i32 %arg2, i32 %arg6, i32 %arg1, i1 %arg9 ], [ ^indirect21 i32 %0, i32 %arg7, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg, i32 %arg2, i32 %arg6, i32 %arg1, i1 %arg9 ];
^indirect21(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect22 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9 ];
^indirect22(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = neg i32 %arg1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^indirect23 i32 %1, i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8 ], [ ^b7 i32 %0, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg8 ];
^indirect23(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b7 i32 %0, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg8 ];
^b7(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp neq i32 %arg6, i32 0;
    i1 %1 = xor i1 %0, i1 true;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect25 i32 %arg1, i32 %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg7 ], [ ^indirect24 i32 %2, i32 %arg1, i32 %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg7 ];
^indirect24(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect25 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
^indirect25(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32 %0 = mul i32 %arg1, i32 %arg;
    i32 %1 = neg i32 %arg2;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^indirect26 i32 %1, i32 %0, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^entry2 i32 %0, i32 %arg3, i32 %arg5, i32 %arg4, i1 %arg6 ];
^indirect26(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^entry2 i32 %0, i32 %arg2, i32 %arg4, i32 %arg3, i1 %arg5 ];
^entry2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4):
    cbr i1 %arg4, [ ^indirect28 i32 %arg, i32 %arg3, i32 %arg2 ], [ ^indirect27 i32 %arg1, i32 %arg, i32 %arg3, i32 %arg2 ];
^indirect27(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 %arg;
    ubr [ ^indirect28 i32 %0, i32 %arg2, i32 %arg3 ];
^indirect28(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect30 i32 %arg2, i32 %arg1 ], [ ^indirect29 i32 %0, i32 %arg2, i32 %arg1 ];
^indirect29(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect30 i32 %0, i32 %arg2 ];
^indirect30(i32 %arg, i32 %arg1):
    i32 %0 = mul i32 %arg1, i32 %arg;
    ret i32 %0;
}
