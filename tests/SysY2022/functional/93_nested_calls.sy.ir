internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %arr = alloc [10 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^while.body, i32 %4] [^entry, i32 %0];
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %1];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^while.body, i32 %7] [^entry, i32 %3];
    i32 %8 = phi [^while.body, i32 %12] [^entry, i32 0];
    i1 %9 = scmp lt i32 %8, i32 10;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %10 = getelementptr &([10 * i32]* %arr)[i64 0][i32 %8];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %8, i32 1;
    ubr ^while.header;
^b:
    i1 %13 = scmp eq i32 %4, i32 0;
    cbr i1 %13(prob = 0.5), ^b1, ^if.else;
^if.else:
    ubr ^b1;
^b1:
    i32 %14 = phi [^b, i32 1] [^if.else, i32 0];
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %16 = scmp neq i32 0, i32 %5;
    ubr ^b3;
^b3:
    i1 %17 = phi [^b1, i1 false] [^b2, i1 %16];
    cbr i1 %17(prob = 0.5), ^b4, ^if.else1;
^b4:
    i32 %18 = phi [^b3, i32 1] [^if.else1, i32 0];
    ubr ^entry1;
^if.else1:
    ubr ^b4;
^entry1:
    i32 %19 = phi [^if.then, i32 %19] [^b4, i32 %7];
    i32 %20 = phi [^b4, i32 %18] [^if.then, i32 %23];
    i32 %21 = phi [^b4, i32 %6] [^if.then, i32 0];
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then, ^entry2;
^if.then:
    i32 %23 = srem i32 %20, i32 %21;
    ubr ^entry1;
^entry2:
    i32 %24 = phi [^entry1, i32 %20] [^if.else2, i32 %27];
    i32 %25 = phi [^entry1, i32 %19] [^if.else2, i32 0];
    i1 %26 = scmp eq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then1, ^if.else2;
^if.else2:
    i32 %27 = add i32 %24, i32 %25;
    ubr ^entry2;
^if.then1:
    i32* %28 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %35 = load i32* %34;
    i1 %36 = scmp eq i32 %35, i32 0;
    cbr i1 %36(prob = 0.5), ^b5, ^if.else3;
^if.else3:
    ubr ^b5;
^b5:
    i32 %37 = phi [^if.then1, i32 1] [^if.else3, i32 0];
    i1 %38 = scmp neq i32 %33, i32 0;
    cbr i1 %38(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %39 = scmp neq i32 %37, i32 0;
    ubr ^b7;
^b7:
    i1 %40 = phi [^b5, i1 false] [^b6, i1 %39];
    cbr i1 %40(prob = 0.5), ^b8, ^if.else4;
^if.else4:
    ubr ^b8;
^b8:
    i32 %41 = phi [^b7, i32 1] [^if.else4, i32 0];
    i32* %42 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^b9, ^if.else5;
^b9:
    i32 %47 = phi [^b8, i32 1] [^if.else5, i32 0];
    ubr ^entry3;
^if.else5:
    ubr ^b9;
^entry3:
    i32 %48 = phi [^b9, i32 %43] [^if.then2, i32 %51];
    i32 %49 = phi [^b9, i32 %47] [^if.then2, i32 0];
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^if.then2, ^b10;
^if.then2:
    i32 %51 = srem i32 %48, i32 %49;
    ubr ^entry3;
^b10:
    i1 %52 = scmp neq i32 %31, i32 0;
    cbr i1 %52(prob = 0.5), ^b11, ^if.else6;
^b11:
    i32 %53 = phi [^b10, i32 %41] [^if.else6, i32 %48];
    i32* %54 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %55 = load i32* %54;
    ubr ^entry4;
^if.else6:
    ubr ^b11;
^entry4:
    i32 %56 = phi [^b11, i32 %53] [^if.else7, i32 %62];
    i32 %57 = phi [^b11, i32 %55] [^if.else7, i32 0];
    i1 %58 = scmp eq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then3, ^if.else7;
^if.then3:
    i32 %59 = add i32 %56, i32 1;
    i32* %60 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %61 = load i32* %60;
    ubr ^entry5;
^if.else7:
    i32 %62 = add i32 %56, i32 %57;
    ubr ^entry4;
^entry5:
    i32 %63 = phi [^if.then3, i32 %59] [^if.then4, i32 %66];
    i32 %64 = phi [^if.then3, i32 %61] [^if.then4, i32 0];
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.5), ^if.then4, ^b12;
^if.then4:
    i32 %66 = srem i32 %63, i32 %64;
    ubr ^entry5;
^b12:
    i32* %67 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %70 = load i32* %69;
    i1 %71 = scmp eq i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^b13, ^if.else8;
^b13:
    i32 %72 = phi [^b12, i32 1] [^if.else8, i32 0];
    ubr ^entry6;
^if.else8:
    ubr ^b13;
^entry6:
    i32 %73 = phi [^b13, i32 %68] [^if.else9, i32 %77];
    i32 %74 = phi [^b13, i32 %72] [^if.else9, i32 0];
    i1 %75 = scmp eq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then5, ^if.else9;
^if.then5:
    i32 %76 = add i32 %73, i32 1;
    ubr ^entry7;
^if.else9:
    i32 %77 = add i32 %73, i32 %74;
    ubr ^entry6;
^entry7:
    i32 %78 = phi [^if.then5, i32 %63] [^if.else10, i32 %78];
    i32 %79 = phi [^if.then5, i32 %76] [^if.else10, i32 %82];
    i32 %80 = phi [^if.then5, i32 %4] [^if.else10, i32 0];
    i1 %81 = scmp eq i32 %80, i32 0;
    cbr i1 %81(prob = 0.5), ^if.then6, ^if.else10;
^if.else10:
    i32 %82 = sub i32 %79, i32 %80;
    ubr ^entry7;
^if.then6:
    i1 %83 = scmp neq i32 %24, i32 -1;
    cbr i1 %83(prob = 0.5), ^b14, ^if.else11;
^if.else11:
    i32 %84 = mul i32 %78, i32 %79;
    ubr ^b14;
^b14:
    i32 %85 = phi [^if.then6, i32 %29] [^if.else11, i32 %84];
    i1 %86 = scmp eq i32 %6, i32 0;
    cbr i1 %86(prob = 0.5), ^b15, ^if.else12;
^b15:
    i32 %87 = phi [^b14, i32 1] [^if.else12, i32 0];
    ubr ^entry8;
^if.else12:
    ubr ^b15;
^entry8:
    i32 %88 = phi [^b15, i32 %87] [^if.else13, i32 %92];
    i32 %89 = phi [^b15, i32 %19] [^if.else13, i32 0];
    i1 %90 = scmp eq i32 %89, i32 0;
    cbr i1 %90(prob = 0.5), ^if.then7, ^if.else13;
^if.then7:
    i32 %91 = add i32 %88, i32 1;
    ubr ^entry9;
^if.else13:
    i32 %92 = add i32 %88, i32 %89;
    ubr ^entry8;
^entry9:
    i32 %93 = phi [^if.then7, i32 %5] [^if.then8, i32 %96];
    i32 %94 = phi [^if.then7, i32 %91] [^if.then8, i32 0];
    i1 %95 = scmp neq i32 %94, i32 0;
    cbr i1 %95(prob = 0.5), ^if.then8, ^entry10;
^if.then8:
    i32 %96 = srem i32 %93, i32 %94;
    ubr ^entry9;
^entry10:
    i32 %97 = phi [^entry9, i32 %85] [^if.else14, i32 %101];
    i32 %98 = phi [^entry9, i32 %93] [^if.else14, i32 0];
    i1 %99 = scmp eq i32 %98, i32 0;
    cbr i1 %99(prob = 0.5), ^if.then9, ^if.else14;
^if.then9:
    i32 %100 = add i32 %97, i32 1;
    ubr ^entry11;
^if.else14:
    i32 %101 = add i32 %97, i32 %98;
    ubr ^entry10;
^entry11:
    i32 %102 = phi [^if.then9, i32 %100] [^if.else15, i32 %102];
    i32 %103 = phi [^if.then9, i32 %29] [^if.else15, i32 %107];
    i32 %104 = phi [^if.then9, i32 %31] [^if.else15, i32 0];
    i1 %105 = scmp eq i32 %104, i32 0;
    cbr i1 %105(prob = 0.5), ^if.then10, ^if.else15;
^if.then10:
    i32 %106 = mul i32 %102, i32 %103;
    ubr ^entry12;
^if.else15:
    i32 %107 = sub i32 %103, i32 %104;
    ubr ^entry11;
^entry12:
    i32 %108 = phi [^if.then10, i32 %106] [^if.then11, i32 %111];
    i32 %109 = phi [^if.then10, i32 %33] [^if.then11, i32 0];
    i1 %110 = scmp neq i32 %109, i32 0;
    cbr i1 %110(prob = 0.5), ^if.then11, ^b16;
^if.then11:
    i32 %111 = srem i32 %108, i32 %109;
    ubr ^entry12;
^b16:
    i32 %112 = neg i32 %45;
    ubr ^entry13;
^entry13:
    i32 %113 = phi [^b16, i32 %43] [^if.else16, i32 %118];
    i32 %114 = phi [^b16, i32 %112] [^if.else16, i32 0];
    i1 %115 = scmp eq i32 %114, i32 0;
    cbr i1 %115(prob = 0.5), ^if.then12, ^if.else16;
^if.then12:
    i32 %116 = add i32 %113, i32 1;
    i32 %117 = neg i32 %55;
    ubr ^entry14;
^if.else16:
    i32 %118 = add i32 %113, i32 %114;
    ubr ^entry13;
^entry14:
    i32 %119 = phi [^if.then12, i32 %116] [^if.then13, i32 %122];
    i32 %120 = phi [^if.then12, i32 %117] [^if.then13, i32 0];
    i1 %121 = scmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.5), ^if.then13, ^b17;
^if.then13:
    i32 %122 = srem i32 %119, i32 %120;
    ubr ^entry14;
^b17:
    i1 %123 = scmp eq i32 %68, i32 0;
    cbr i1 %123(prob = 0.5), ^b18, ^if.else17;
^b18:
    i32 %124 = phi [^b17, i32 1] [^if.else17, i32 0];
    ubr ^entry15;
^if.else17:
    ubr ^b18;
^entry15:
    i32 %125 = phi [^b18, i32 %119] [^if.else18, i32 %125];
    i32 %126 = phi [^b18, i32 %61] [^if.else18, i32 %131];
    i32 %127 = phi [^b18, i32 %124] [^if.else18, i32 0];
    i1 %128 = scmp eq i32 %127, i32 0;
    cbr i1 %128(prob = 0.5), ^if.then14, ^if.else18;
^if.then14:
    i32 %129 = mul i32 %125, i32 %126;
    i32 %130 = neg i32 %70;
    ubr ^entry16;
^if.else18:
    i32 %131 = sub i32 %126, i32 %127;
    ubr ^entry15;
^entry16:
    i32 %132 = phi [^if.then14, i32 %129] [^if.then15, i32 %135];
    i32 %133 = phi [^if.then14, i32 %130] [^if.then15, i32 0];
    i1 %134 = scmp neq i32 %133, i32 0;
    cbr i1 %134(prob = 0.5), ^if.then15, ^entry17;
^if.then15:
    i32 %135 = srem i32 %132, i32 %133;
    ubr ^entry16;
^entry17:
    i32 %136 = phi [^entry16, i32 %132] [^if.else19, i32 %140];
    i32 %137 = phi [^entry16, i32 %4] [^if.else19, i32 0];
    i1 %138 = scmp eq i32 %137, i32 0;
    cbr i1 %138(prob = 0.5), ^if.then16, ^if.else19;
^if.then16:
    i32 %139 = add i32 %136, i32 1;
    ubr ^entry18;
^if.else19:
    i32 %140 = add i32 %136, i32 %137;
    ubr ^entry17;
^entry18:
    i32 %141 = phi [^if.then16, i32 %108] [^if.else20, i32 %141];
    i32 %142 = phi [^if.then16, i32 %35] [^if.else20, i32 %145];
    i32 %143 = phi [^if.then16, i32 %139] [^if.else20, i32 0];
    i1 %144 = scmp eq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^if.then17, ^if.else20;
^if.else20:
    i32 %145 = sub i32 %142, i32 %143;
    ubr ^entry18;
^if.then17:
    i32 %146 = mul i32 %141, i32 %142;
    ret i32 %146;
}
