internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %arr = alloc [10 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    ubr ^while.body;
  ^while.body:
    i32 %4 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %5 = call () -> i32 @getint();
    i32* %6 = getelementptr &([10 * i32]* %arr)[i64 0][i32 %4];
    store i32* %6 with i32 %5;
    i32 %7 = add i32 %4, i32 1;
    i1 %8 = scmp lt i32 %7, i32 10;
    cbr i1 %8(prob = 0.9), ^while.body, ^entry1;
  ^entry1:
    i1 %9 = scmp eq i32 %0, i32 0;
    i1 %10 = scmp neq i32 0, i32 %1;
    i1 %11 = and i1 %9, i1 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %2, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %14 = srem i32 %12, i32 %2;
    ubr ^b;
  ^b:
    i32 %15 = phi [^entry1, i32 %12] [^if.then, i32 %14];
    i32* %16 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %23 = load i32* %22;
    i1 %24 = scmp eq i32 %23, i32 0;
    i1 %25 = scmp neq i32 %21, i32 0;
    i1 %26 = and i1 %24, i1 %25;
    i32 %27 = zext i1 %26 to i32;
    i32* %28 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %31, i32 0;
    i32 %33 = select i1 %32 ? i32 0 : i32 %29;
    i1 %34 = scmp neq i32 0, i32 %19;
    i32 %35 = select i1 %34 ? i32 %27 : i32 %33;
    i32* %36 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 %37;
    i1 %39 = scmp eq i32 %37, i32 0;
    i32 %40 = select i1 %39 ? i32 %35 : i32 %38;
    i32 %41 = add i32 %40, i32 1;
    i32 %42 = add i32 %3, i32 %15;
    i1 %43 = scmp eq i32 %3, i32 0;
    i32 %44 = select i1 %43 ? i32 %15 : i32 %42;
    i32 %45 = add i32 %44, i32 1;
    i32* %46 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %47 = load i32* %46;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then1, ^b1;
  ^if.then1:
    i32 %49 = srem i32 %41, i32 %47;
    ubr ^b1;
  ^b1:
    i32 %50 = phi [^b, i32 %41] [^if.then1, i32 %49];
    i32* %51 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 0;
    i32 %56 = zext i1 %55 to i32;
    i32 %57 = add i32 %52, i32 %56;
    i1 %58 = scmp neq i32 %54, i32 0;
    i32 %59 = select i1 %58 ? i32 %52 : i32 %57;
    i32 %60 = add i32 %59, i32 1;
    i32 %61 = sub i32 %60, i32 %0;
    i32 %62 = select i1 %9 ? i32 %60 : i32 %61;
    i32 %63 = mul i32 %50, i32 %62;
    i1 %64 = scmp neq i32 0, i32 %45;
    i32 %65 = select i1 %64 ? i32 %17 : i32 %63;
    i1 %66 = scmp eq i32 %2, i32 0;
    i32 %67 = zext i1 %66 to i32;
    i32 %68 = add i32 %3, i32 %67;
    i32 %69 = select i1 %43 ? i32 %67 : i32 %68;
    i32 %70 = add i32 %69, i32 1;
    i1 %71 = scmp neq i32 %70, i32 0;
    cbr i1 %71(prob = 0.5), ^if.then2, ^b2;
  ^if.then2:
    i32 %72 = srem i32 %1, i32 %70;
    ubr ^b2;
  ^b2:
    i32 %73 = phi [^b1, i32 %1] [^if.then2, i32 %72];
    i1 %74 = scmp eq i32 %73, i32 0;
    i32 %75 = add i32 %65, i32 %73;
    i32 %76 = select i1 %74 ? i32 %65 : i32 %75;
    i32 %77 = add i32 %76, i32 1;
    i1 %78 = scmp eq i32 %19, i32 0;
    i32 %79 = sub i32 %17, i32 %19;
    i32 %80 = select i1 %78 ? i32 %17 : i32 %79;
    i32 %81 = mul i32 %77, i32 %80;
    cbr i1 %25(prob = 0.5), ^if.then3, ^b3;
  ^if.then3:
    i32 %82 = srem i32 %81, i32 %21;
    ubr ^b3;
  ^b3:
    i32 %83 = phi [^b2, i32 %81] [^if.then3, i32 %82];
    i1 %84 = scmp eq i32 0, i32 %31;
    i32 %85 = sub i32 %29, i32 %31;
    i32 %86 = select i1 %84 ? i32 %29 : i32 %85;
    i32 %87 = add i32 %86, i32 1;
    i1 %88 = scmp neq i32 %37, i32 0;
    cbr i1 %88(prob = 0.5), ^if.then4, ^b4;
  ^if.then4:
    i32 %89 = neg i32 %37;
    i32 %90 = srem i32 %87, i32 %89;
    ubr ^b4;
  ^b4:
    i32 %91 = phi [^b3, i32 %87] [^if.then4, i32 %90];
    i1 %92 = scmp eq i32 %52, i32 0;
    i32 %93 = zext i1 %92 to i32;
    i32 %94 = sub i32 %47, i32 %93;
    i1 %95 = scmp neq i32 %52, i32 0;
    i32 %96 = select i1 %95 ? i32 %47 : i32 %94;
    i32 %97 = mul i32 %91, i32 %96;
    cbr i1 %58(prob = 0.5), ^if.then5, ^b5;
  ^if.then5:
    i32 %98 = neg i32 %54;
    i32 %99 = srem i32 %97, i32 %98;
    ubr ^b5;
  ^b5:
    i32 %100 = phi [^b4, i32 %97] [^if.then5, i32 %99];
    i32 %101 = add i32 %0, i32 %100;
    i32 %102 = select i1 %9 ? i32 %100 : i32 %101;
    i32 %103 = add i32 %102, i32 1;
    i1 %104 = scmp eq i32 %103, i32 0;
    i32 %105 = sub i32 %23, i32 %103;
    i32 %106 = select i1 %104 ? i32 %23 : i32 %105;
    i32 %107 = mul i32 %83, i32 %106;
    ret i32 %107;
}
