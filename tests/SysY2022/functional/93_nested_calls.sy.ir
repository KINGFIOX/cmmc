internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @func1(i32 %x, i32 %y, i32 %z) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %z, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %1 = mul i32 %x, i32 %y;
    ubr ^b;
^if.else:
    i32 %2 = sub i32 %y, i32 %z;
    i32 %3 = call (i32, i32, i32) -> i32 @func1(i32 %x, i32 %2, i32 0);
    ubr ^b;
^b:
    i32 %4 = phi [^if.else, i32 %3] [^if.then, i32 %1];
    ret i32 %4;
}
internal func @func2(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp neq i32 %y, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %1 = srem i32 %x, i32 %y;
    i32 %2 = call (i32, i32) -> i32 @func2(i32 %1, i32 0);
    ubr ^b;
^b:
    i32 %3 = phi [^entry, i32 %x] [^if.then, i32 %2];
    ret i32 %3;
}
internal func @func3(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %y, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %1 = add i32 %x, i32 1;
    ubr ^b;
^if.else:
    i32 %2 = add i32 %x, i32 %y;
    i32 %3 = call (i32, i32) -> i32 @func3(i32 %2, i32 0);
    ubr ^b;
^b:
    i32 %4 = phi [^if.else, i32 %3] [^if.then, i32 %1];
    ret i32 %4;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %arr = alloc [10 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    ubr ^while.body;
^while.body:
    i32 %4 = phi [^while.body, i32 %7] [^entry, i32 0];
    i32* %5 = getelementptr &([10 * i32]* %arr)[i64 0][i32 %4];
    i32 %6 = call () -> i32 @getint();
    store i32* %5 with i32 %6;
    i32 %7 = add i32 %4, i32 1;
    i1 %8 = scmp lt i32 %7, i32 10;
    cbr i1 %8(prob = 0.9), ^while.body, ^entry1;
^entry1:
    i1 %9 = scmp eq i32 %0, i32 0;
    cbr i1 %9(prob = 0.5), ^b, ^b1;
^b:
    i1 %10 = scmp neq i32 %1, i32 0;
    cbr i1 %10(prob = 0.5), ^b1, ^if.else;
^b1:
    i32 %11 = phi [^entry1, i32 0] [^b, i32 1] [^if.else, i32 0];
    i32 %12 = call (i32, i32) -> i32 @func2(i32 %11, i32 %2);
    i32 %13 = call (i32, i32) -> i32 @func3(i32 %12, i32 %3);
    i32* %14 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %21 = load i32* %20;
    i1 %22 = scmp eq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^b2, ^if.else1;
^if.else:
    ubr ^b1;
^if.else1:
    ubr ^b2;
^b2:
    i32 %23 = phi [^b1, i32 1] [^if.else1, i32 0];
    i1 %24 = scmp neq i32 %19, i32 0;
    cbr i1 %24(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %25 = scmp neq i32 %23, i32 0;
    cbr i1 %25(prob = 0.5), ^b4, ^if.else2;
^b4:
    i32 %26 = phi [^b2, i32 0] [^b3, i32 1] [^if.else2, i32 0];
    i32* %27 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b5, ^if.else3;
^if.else2:
    ubr ^b4;
^if.else3:
    ubr ^b5;
^b5:
    i32 %32 = phi [^b4, i32 1] [^if.else3, i32 0];
    i1 %33 = scmp neq i32 %17, i32 0;
    cbr i1 %33(prob = 0.5), ^b6, ^if.else4;
^if.else4:
    i32 %34 = call (i32, i32) -> i32 @func2(i32 %28, i32 %32);
    ubr ^b6;
^b6:
    i32 %35 = phi [^b5, i32 %26] [^if.else4, i32 %34];
    i32* %36 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %37 = load i32* %36;
    i32 %38 = call (i32, i32) -> i32 @func3(i32 %35, i32 %37);
    i32* %39 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %40 = load i32* %39;
    i32 %41 = call (i32, i32) -> i32 @func2(i32 %38, i32 %40);
    i32* %42 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^b7, ^if.else5;
^if.else5:
    ubr ^b7;
^b7:
    i32 %47 = phi [^b6, i32 1] [^if.else5, i32 0];
    i1 %48 = scmp neq i32 %13, i32 0;
    cbr i1 %48(prob = 0.5), ^b8, ^if.else6;
^if.else6:
    i32 %49 = call (i32, i32) -> i32 @func3(i32 %43, i32 %47);
    i32 %50 = call (i32, i32, i32) -> i32 @func1(i32 %41, i32 %49, i32 %0);
    ubr ^b8;
^b8:
    i32 %51 = phi [^b7, i32 %15] [^if.else6, i32 %50];
    i1 %52 = scmp eq i32 %2, i32 0;
    cbr i1 %52(prob = 0.5), ^b9, ^if.else7;
^if.else7:
    ubr ^b9;
^b9:
    i32 %53 = phi [^b8, i32 1] [^if.else7, i32 0];
    i32 %54 = call (i32, i32) -> i32 @func3(i32 %53, i32 %3);
    i32 %55 = call (i32, i32) -> i32 @func2(i32 %1, i32 %54);
    i32 %56 = call (i32, i32) -> i32 @func3(i32 %51, i32 %55);
    i32 %57 = call (i32, i32, i32) -> i32 @func1(i32 %56, i32 %15, i32 %17);
    i32 %58 = call (i32, i32) -> i32 @func2(i32 %57, i32 %19);
    i32 %59 = neg i32 %30;
    i32 %60 = call (i32, i32) -> i32 @func3(i32 %28, i32 %59);
    i32 %61 = neg i32 %37;
    i32 %62 = call (i32, i32) -> i32 @func2(i32 %60, i32 %61);
    i1 %63 = scmp eq i32 %43, i32 0;
    cbr i1 %63(prob = 0.5), ^b10, ^if.else8;
^if.else8:
    ubr ^b10;
^b10:
    i32 %64 = phi [^b9, i32 1] [^if.else8, i32 0];
    i32 %65 = call (i32, i32, i32) -> i32 @func1(i32 %62, i32 %40, i32 %64);
    i32 %66 = neg i32 %45;
    i32 %67 = call (i32, i32) -> i32 @func2(i32 %65, i32 %66);
    i32 %68 = call (i32, i32) -> i32 @func3(i32 %67, i32 %0);
    i32 %69 = call (i32, i32, i32) -> i32 @func1(i32 %58, i32 %21, i32 %68);
    ret i32 %69;
}
