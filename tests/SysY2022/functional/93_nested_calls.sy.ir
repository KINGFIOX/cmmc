internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    [10 * i32]* %arr = alloc [10 * i32];
    i32* %4 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %7 = call () -> i32 @getint();
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %9 = call () -> i32 @getint();
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32* %12 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %13 = call () -> i32 @getint();
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %15 = call () -> i32 @getint();
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %17 = call () -> i32 @getint();
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %19 = call () -> i32 @getint();
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %21 = call () -> i32 @getint();
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %23 = call () -> i32 @getint();
    store i32* %22 with i32 %23;
    i1 %24 = scmp neq i32 %0, i32 0;
    i1 %25 = xor i1 %24, i1 true;
    i32 %26 = neg i32 %1;
    cbr i1 %25(prob = 0.5), [ ^indirect i32 %26, i32 %0, i32 %1, i32 %2, i32 %3, i32* %4, i32* %6, i32* %8, i32* %10, i32* %12, i32* %14, i32* %16, i32* %22, i32* %20, i32* %18 ], [ ^b i32 %1, i32 %0, i32 %2, i32 %3, i32* %4, i32* %6, i32* %8, i32* %10, i32* %12, i32* %14, i32* %16, i32* %22, i32* %20, i32* %18 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14):
    i1 %0 = scmp neq i32 %arg, i32 0;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = scmp neq i32 %arg3, i32 0;
    cbr i1 %2(prob = 0.5), [ ^indirect1 i32 %arg3, i32 %1, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg4, i32* %arg6, i32* %arg5, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ], [ ^b1 i32 %1, i32 %arg2, i32 %arg1, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i1 %0 = scmp neq i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect1 i32 %arg2, i32 0, i32 %arg2, i32 %arg1, i32 %arg, i32 %arg3, i32* %arg5, i32* %arg4, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ], [ ^b1 i32 0, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b1 i32 %0, i32 %arg4, i32 %arg3, i32 %arg2, i32 %arg5, i32* %arg7, i32* %arg6, i32* %arg15, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14):
    i1 %0 = scmp eq i32 %arg4, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect3 i32 %arg, i32 %arg3, i32 %arg4, i32 %arg2, i32 %arg1, i1 %0, i32* %arg6, i32* %arg5, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7 ], [ ^indirect2 i32 %arg4, i32 %arg, i32 %arg3, i32 %arg4, i32 %arg2, i32 %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14 ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect3 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 false, i32* %arg7, i32* %arg6, i32* %arg15, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8 ];
^indirect3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = neg i32 %0;
    i32 %2 = load i32* %arg7;
    i32 %3 = load i32* %arg6;
    i32 %4 = neg i32 %3;
    i32 %5 = load i32* %arg15;
    i32 %6 = load i32* %arg14;
    i1 %7 = scmp neq i32 %6, i32 0;
    i1 %8 = xor i1 %7, i1 true;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %5, i32 0;
    cbr i1 %10(prob = 0.5), [ ^indirect4 i32 %9, i32 %6, i32 %1, i32 %arg1, i32 %2, i32 %3, i32 %arg2, i32 %arg3, i32 %4, i32 %arg4, i32 %5, i1 %arg5, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8 ], [ ^b2 i1 false, i32 %5, i32 %arg4, i32 %4, i32 %arg3, i32 %arg2, i32 %3, i32 %2, i32 %arg1, i32 %1, i32 %6, i1 %arg5, i1 %10, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13 ];
^indirect4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17):
    i1 %0 = scmp neq i32 %arg, i32 0;
    ubr [ ^b2 i1 %0, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i32 %arg1, i1 %arg11, i1 true, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg14, i32* %arg13, i32* %arg12 ];
^b2(i1 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11, i1 %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18):
    i32 %0 = zext i1 %arg to i32;
    i32 %1 = load i32* %arg18;
    i32 %2 = load i32* %arg17;
    i1 %3 = scmp neq i32 %2, i32 0;
    i1 %4 = xor i1 %3, i1 true;
    i32 %5 = zext i1 %4 to i32;
    cbr i1 %4(prob = 0.5), [ ^indirect5 i32 %5, i32 %1, i32 %arg6, i32 %2, i32 %1, i32 %arg5, i32 %arg4, i32 %arg2, i32 %arg3, i32 %arg1, i32 %arg8, i32 %arg10, i32 %arg9, i32 %0, i32 %arg7, i1 %arg12, i1 %arg11, i32* %arg16, i32* %arg15, i32* %arg14, i32* %arg13 ], [ ^b3 i32 %1, i32 %arg5, i32 %arg4, i32 %arg2, i32 %arg3, i32 %arg1, i32 %arg8, i32 %arg10, i32 %arg9, i32 %0, i32 %arg7, i32 %arg6, i32 %2, i32 %1, i1 %arg11, i1 %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16 ];
^indirect5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b3 i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg16, i1 %arg15, i32* %arg20, i32* %arg19, i32* %arg18, i32* %arg17 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19):
    i1 %0 = scmp neq i32 %arg4, i32 0;
    i32 %1 = select i1 %0 ? i32 %arg9 : i32 %arg;
    i32 %2 = load i32* %arg19;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), [ ^indirect7 i32 %1, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11, i32 %2, i32 %arg12, i32 %arg3, i32 %arg5, i32 %arg2, i32 %arg13, i32 %arg1, i1 %arg15, i1 %arg14, i32* %arg18, i32* %arg17, i32* %arg16 ], [ ^indirect6 i32 %2, i32 %1, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11, i32 %2, i32 %arg12, i32 %arg3, i32 %arg5, i32 %arg2, i32 %arg13, i32 %arg1, i1 %arg14, i1 %arg15, i32* %arg16, i32* %arg17, i32* %arg18 ];
^indirect6(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15, i32* %arg16, i32* %arg17, i32* %arg18):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect7 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg15, i1 %arg14, i32* %arg18, i32* %arg17, i32* %arg16 ];
^indirect7(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14, i32* %arg15, i32* %arg16, i32* %arg17):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = load i32* %arg17;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^indirect8 i32 %1, i32 %0, i32 %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg10, i32 %1, i32 %arg11, i32 %arg6, i32 %arg12, i1 %arg14, i1 %arg13, i32* %arg16, i32* %arg15 ], [ ^b4 i32 %0, i32 %arg8, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg9, i32 %arg10, i32 %1, i32 %arg11, i32 %arg12, i32 %arg6, i32 %arg5, i32 %arg7, i1 %arg13, i1 %arg14, i32* %arg15, i32* %arg16 ];
^indirect8(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16, i32* %arg17, i32* %arg18):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b4 i32 %0, i32 %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg5, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg14, i32 %arg13, i32 %arg2, i32 %arg3, i1 %arg16, i1 %arg15, i32* %arg18, i32* %arg17 ];
^b4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15, i32* %arg16, i32* %arg17):
    i32 %0 = load i32* %arg17;
    i32 %1 = load i32* %arg16;
    i1 %2 = scmp neq i32 %1, i32 0;
    i1 %3 = xor i1 %2, i1 true;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp eq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), [ ^indirect10 i32 %0, i32 %arg2, i32 %arg5, i32 %arg4, i32 %0, i32 %arg9, i32 %arg3, i32 %arg, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg13, i32 %arg1, i32 %1, i1 %arg15, i1 %arg14 ], [ ^indirect9 i32 %4, i32 %0, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %1, i32 %arg1, i32 %arg6, i32 %arg2, i32 %arg5, i32 %arg4, i32 %arg3, i32 %0, i32 %arg9, i32 %arg, i32 %arg8, i32 %arg7, i1 %arg14, i1 %arg15 ];
^indirect9(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect10 i32 %0, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg13, i32 %arg14, i32 %arg12, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg8, i32 %arg4, i32 %arg3, i32 %arg2, i32 %arg5, i32 %arg7, i32 %arg6, i1 %arg19, i1 %arg18 ];
^indirect10(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i1 %arg17, i1 %arg18):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %arg9, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect12 i32 %0, i32 %arg7, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg3, i32 %arg2, i32 %arg1, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg9, i32 %arg8, i32 %arg10, i32 %arg16, i32 %arg15, i32 %arg11, i1 %arg18, i1 %1, i1 %arg17 ], [ ^indirect11 i32 %arg9, i32 %0, i32 %arg7, i32 %arg10, i32 %arg8, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg16, i32 %arg15, i32 %arg3, i32 %arg2, i32 %arg1, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg9, i1 %arg18, i1 %arg17 ];
^indirect11(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect12 i32 %0, i32 %arg2, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg4, i32 %arg3, i32 %arg9, i32 %arg10, i32 %arg5, i1 %arg18, i1 false, i1 %arg19 ];
^indirect12(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i1 %arg17, i1 %arg18, i1 %arg19):
    i32 %0 = mul i32 %arg, i32 %arg1;
    i1 %1 = scmp neq i32 %arg5, i32 0;
    i32 %2 = select i1 %1 ? i32 %arg6 : i32 %0;
    i1 %3 = scmp neq i32 %arg7, i32 0;
    i1 %4 = xor i1 %3, i1 true;
    i32 %5 = zext i1 %4 to i32;
    cbr i1 %arg19(prob = 0.5), [ ^indirect14 i32 %5, i32 %arg15, i32 %2, i32 %arg13, i32 %arg6, i32 %arg8, i32 %arg16, i32 %arg2, i32 %arg4, i32 %arg14, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg18, i1 %arg17 ], [ ^indirect13 i32 %arg3, i32 %5, i32 %arg15, i32 %2, i32 %arg13, i32 %arg6, i32 %arg8, i32 %arg16, i32 %arg2, i32 %arg4, i32 %arg14, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg17, i1 %arg18 ];
^indirect13(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg15, i1 %arg16):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect14 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i1 %arg16, i1 %arg15 ];
^indirect14(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect15 i32 %0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg15, i1 %arg14 ], [ ^entry1 i32 %arg2, i32 %arg1, i32 %arg13, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg3, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i1 %arg14, i1 %arg15 ];
^indirect15(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i1 %arg14, i1 %arg15):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^entry1 i32 %arg2, i32 %0, i32 %arg13, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg3, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i1 %arg15, i1 %arg14 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect17 i32 %arg, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg14, i1 %arg13 ], [ ^indirect16 i32 %arg1, i32 %arg, i32 %arg12, i32 %arg11, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg13, i1 %arg14 ];
^indirect16(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg13, i1 %arg14):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect17 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i1 %arg14, i1 %arg13 ];
^indirect17(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %arg3, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect19 i32 %arg1, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg4, i32 %arg2, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg12 ], [ ^indirect18 i32 %arg3, i32 %arg1, i32 %0, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg4, i32 %arg2, i32 %arg10, i32 %arg11, i1 %arg13, i1 %arg12 ];
^indirect18(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect19 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12, i1 %arg13 ];
^indirect19(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11, i1 %arg12):
    i32 %0 = mul i32 %arg, i32 %arg1;
    cbr i1 %arg12(prob = 0.5), [ ^indirect20 i32 %arg2, i32 %0, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11 ], [ ^b5 i32 %0, i32 %arg10, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i1 %arg11 ];
^indirect20(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i1 %arg10):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b5 i32 %0, i32 %arg9, i32 %arg8, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg10 ];
^b5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    i32 %0 = neg i32 %arg8;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect22 i32 %arg6, i32 %arg4, i32 %arg5, i32 %arg3, i32 %arg2, i32 %arg7, i32 %arg1, i32 %arg, i1 %arg9 ], [ ^indirect21 i32 %0, i32 %arg6, i32 %arg4, i32 %arg5, i32 %arg3, i32 %arg2, i32 %arg7, i32 %arg1, i32 %arg, i1 %arg9 ];
^indirect21(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect22 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %arg9 ];
^indirect22(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = neg i32 %arg1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^indirect23 i32 %1, i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8 ], [ ^b6 i32 %0, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg8 ];
^indirect23(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i1 %arg8):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^b6 i32 %0, i32 %arg7, i32 %arg6, i32 %arg5, i32 %arg4, i32 %arg3, i32 %arg2, i1 %arg8 ];
^b6(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp neq i32 %arg6, i32 0;
    i1 %1 = xor i1 %0, i1 true;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), [ ^indirect25 i32 %arg2, i32 %arg, i32 %arg3, i32 %arg4, i32 %arg1, i32 %arg5, i1 %arg7 ], [ ^indirect24 i32 %2, i32 %arg2, i32 %arg, i32 %arg3, i32 %arg4, i32 %arg1, i32 %arg5, i1 %arg7 ];
^indirect24(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect25 i32 %0, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
^indirect25(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32 %0 = mul i32 %arg, i32 %arg1;
    i32 %1 = neg i32 %arg2;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^indirect26 i32 %1, i32 %0, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^entry2 i32 %0, i32 %arg3, i32 %arg5, i32 %arg4, i1 %arg6 ];
^indirect26(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    i32 %0 = srem i32 %arg1, i32 %arg;
    ubr [ ^entry2 i32 %0, i32 %arg2, i32 %arg4, i32 %arg3, i1 %arg5 ];
^entry2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4):
    cbr i1 %arg4(prob = 0.5), [ ^indirect28 i32 %arg, i32 %arg3, i32 %arg2 ], [ ^indirect27 i32 %arg1, i32 %arg, i32 %arg3, i32 %arg2 ];
^indirect27(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^indirect28 i32 %0, i32 %arg2, i32 %arg3 ];
^indirect28(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^indirect30 i32 %arg2, i32 %arg1 ], [ ^indirect29 i32 %0, i32 %arg2, i32 %arg1 ];
^indirect29(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg1, i32 %arg;
    ubr [ ^indirect30 i32 %0, i32 %arg2 ];
^indirect30(i32 %arg, i32 %arg1):
    i32 %0 = mul i32 %arg, i32 %arg1;
    ret i32 %0;
}
