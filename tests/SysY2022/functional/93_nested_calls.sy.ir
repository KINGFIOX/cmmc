internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @func1(i32 %x, i32 %y, i32 %z) -> i32 {
^entry:
    i32* %z1 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store i32* %z1 with i32 %z;
    i32 %0 = load i32* %z1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = load i32* %x1;
    i32 %5 = load i32* %y1;
    i32 %6 = mul i32 %4, i32 %5;
    ret i32 %6;
^if.else:
    i32 %7 = load i32* %x1;
    i32 %8 = load i32* %y1;
    i32 %9 = load i32* %z1;
    i32 %10 = sub i32 %8, i32 %9;
    i32 %11 = call (i32, i32, i32) -> i32 @func1(i32 %7, i32 %10, i32 0);
    ret i32 %11;
^b:
    unreachable;
}
internal func @func2(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %y1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %2 = load i32* %x1;
    i32 %3 = load i32* %y1;
    i32 %4 = srem i32 %2, i32 %3;
    i32 %5 = call (i32, i32) -> i32 @func2(i32 %4, i32 0);
    ret i32 %5;
^if.else:
    i32 %6 = load i32* %x1;
    ret i32 %6;
^b:
    unreachable;
}
internal func @func3(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %y1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = load i32* %x1;
    i32 %5 = add i32 %4, i32 1;
    ret i32 %5;
^if.else:
    i32 %6 = load i32* %x1;
    i32 %7 = load i32* %y1;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = call (i32, i32) -> i32 @func3(i32 %8, i32 0);
    ret i32 %9;
^b:
    unreachable;
}
internal func @func4(i32 %x, i32 %y, i32 %z) -> i32 {
^entry:
    i32* %z1 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store i32* %z1 with i32 %z;
    i32 %0 = load i32* %x1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %2 = load i32* %y1;
    ret i32 %2;
^if.else:
    i32 %3 = load i32* %z1;
    ret i32 %3;
^b:
    unreachable;
}
internal func @func5(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = neg i32 %0;
    ret i32 %1;
}
internal func @func6(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %x1;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^b1;
^b:
    i32 %2 = load i32* %y1;
    i1 %3 = scmp neq i32 %2, i32 0;
    ubr ^b1;
^b1:
    i1 %4 = phi [^b, i1 %3] [^entry, i1 false];
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 1;
^if.else:
    ret i32 0;
^b2:
    unreachable;
}
internal func @func7(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i1 %1 = scmp neq i32 %0, i32 0;
    i1 %2 = xor i1 %1, i1 true;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 1;
^if.else:
    ret i32 0;
^b:
    unreachable;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %a = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %arr = alloc [10 * i32];
    i32* %i4 = alloc i32;
    i32* %i3 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %i1 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %i1 with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %i2 with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %i3 with i32 %2;
    i32 %3 = call () -> i32 @getint();
    store i32* %i4 with i32 %3;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %i;
    i1 %5 = scmp lt i32 %4, i32 10;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = getelementptr &([10 * i32]* %arr)[i64 0][i64 %9];
    i32 %11 = call () -> i32 @getint();
    store i32* %10 with i32 %11;
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^b:
    i32 %14 = load i32* %i1;
    i32 %15 = call (i32) -> i32 @func7(i32 %14);
    i32 %16 = load i32* %i2;
    i32 %17 = call (i32) -> i32 @func5(i32 %16);
    i32 %18 = call (i32, i32) -> i32 @func6(i32 %15, i32 %17);
    i32 %19 = load i32* %i3;
    i32 %20 = call (i32, i32) -> i32 @func2(i32 %18, i32 %19);
    i32 %21 = load i32* %i4;
    i32 %22 = call (i32, i32) -> i32 @func3(i32 %20, i32 %21);
    i32 %23 = call (i32) -> i32 @func5(i32 %22);
    i32* %24 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %27 = load i32* %26;
    i32 %28 = call (i32) -> i32 @func5(i32 %27);
    i32* %29 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %32 = load i32* %31;
    i32 %33 = call (i32) -> i32 @func7(i32 %32);
    i32 %34 = call (i32, i32) -> i32 @func6(i32 %30, i32 %33);
    i32* %35 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %38 = load i32* %37;
    i32 %39 = call (i32) -> i32 @func7(i32 %38);
    i32 %40 = call (i32, i32) -> i32 @func2(i32 %36, i32 %39);
    i32 %41 = call (i32, i32, i32) -> i32 @func4(i32 %28, i32 %34, i32 %40);
    i32* %42 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %43 = load i32* %42;
    i32 %44 = call (i32, i32) -> i32 @func3(i32 %41, i32 %43);
    i32* %45 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %46 = load i32* %45;
    i32 %47 = call (i32, i32) -> i32 @func2(i32 %44, i32 %46);
    i32* %48 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %51 = load i32* %50;
    i32 %52 = call (i32) -> i32 @func7(i32 %51);
    i32 %53 = call (i32, i32) -> i32 @func3(i32 %49, i32 %52);
    i32 %54 = load i32* %i1;
    i32 %55 = call (i32, i32, i32) -> i32 @func1(i32 %47, i32 %53, i32 %54);
    i32 %56 = call (i32, i32, i32) -> i32 @func4(i32 %23, i32 %25, i32 %55);
    i32 %57 = load i32* %i2;
    i32 %58 = load i32* %i3;
    i32 %59 = call (i32) -> i32 @func7(i32 %58);
    i32 %60 = load i32* %i4;
    i32 %61 = call (i32, i32) -> i32 @func3(i32 %59, i32 %60);
    i32 %62 = call (i32, i32) -> i32 @func2(i32 %57, i32 %61);
    i32 %63 = call (i32, i32) -> i32 @func3(i32 %56, i32 %62);
    i32* %64 = getelementptr &([10 * i32]* %arr)[i64 0][i64 0];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &([10 * i32]* %arr)[i64 0][i64 1];
    i32 %67 = load i32* %66;
    i32 %68 = call (i32, i32, i32) -> i32 @func1(i32 %63, i32 %65, i32 %67);
    i32* %69 = getelementptr &([10 * i32]* %arr)[i64 0][i64 2];
    i32 %70 = load i32* %69;
    i32 %71 = call (i32, i32) -> i32 @func2(i32 %68, i32 %70);
    i32* %72 = getelementptr &([10 * i32]* %arr)[i64 0][i64 3];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &([10 * i32]* %arr)[i64 0][i64 4];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &([10 * i32]* %arr)[i64 0][i64 5];
    i32 %77 = load i32* %76;
    i32 %78 = call (i32) -> i32 @func5(i32 %77);
    i32 %79 = call (i32, i32) -> i32 @func3(i32 %75, i32 %78);
    i32* %80 = getelementptr &([10 * i32]* %arr)[i64 0][i64 6];
    i32 %81 = load i32* %80;
    i32 %82 = call (i32) -> i32 @func5(i32 %81);
    i32 %83 = call (i32, i32) -> i32 @func2(i32 %79, i32 %82);
    i32* %84 = getelementptr &([10 * i32]* %arr)[i64 0][i64 7];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &([10 * i32]* %arr)[i64 0][i64 8];
    i32 %87 = load i32* %86;
    i32 %88 = call (i32) -> i32 @func7(i32 %87);
    i32 %89 = call (i32, i32, i32) -> i32 @func1(i32 %83, i32 %85, i32 %88);
    i32* %90 = getelementptr &([10 * i32]* %arr)[i64 0][i64 9];
    i32 %91 = load i32* %90;
    i32 %92 = call (i32) -> i32 @func5(i32 %91);
    i32 %93 = call (i32, i32) -> i32 @func2(i32 %89, i32 %92);
    i32 %94 = load i32* %i1;
    i32 %95 = call (i32, i32) -> i32 @func3(i32 %93, i32 %94);
    i32 %96 = call (i32, i32, i32) -> i32 @func1(i32 %71, i32 %73, i32 %95);
    store i32* %a with i32 %96;
    i32 %97 = load i32* %a;
    ret i32 %97;
}
