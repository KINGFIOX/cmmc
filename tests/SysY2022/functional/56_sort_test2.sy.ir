internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @insertsort(i32* %a) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %temp = alloc i32;
    i32* %i = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %i with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %temp with i32 0;
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %a1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %8;
    store i32* %temp with i32 %9;
    store i32* %j with i32 0;
    i32 %10 = load i32* %i;
    i32 %11 = sub i32 %10, i32 1;
    store i32* %j with i32 %11;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %12 = load i32* %j;
    i1 %13 = scmp gt i32 %12, i32 -1;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %16 = load i32* %temp;
    i32 %17 = load i32* %j;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = load i32** %a1;
    i32* %20 = getelementptr &(i32* %19)[i64 %18];
    i32 %21 = load i32* %20;
    i1 %22 = scmp lt i32 %16, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b2;
^b2:
    i1 %25 = phi [^b1, i1 %24] [^while.header1, i1 false];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %28 = load i32* %j;
    i32 %29 = add i32 %28, i32 1;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = load i32** %a1;
    i32* %32 = getelementptr &(i32* %31)[i64 %30];
    i32 %33 = load i32* %j;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = load i32** %a1;
    i32* %36 = getelementptr &(i32* %35)[i64 %34];
    i32 %37 = load i32* %36;
    store i32* %32 with i32 %37;
    i32 %38 = load i32* %j;
    i32 %39 = sub i32 %38, i32 1;
    store i32* %j with i32 %39;
    ubr ^while.header1;
^b3:
    i32 %40 = load i32* %j;
    i32 %41 = add i32 %40, i32 1;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = load i32** %a1;
    i32* %44 = getelementptr &(i32* %43)[i64 %42];
    i32 %45 = load i32* %temp;
    store i32* %44 with i32 %45;
    i32 %46 = load i32* %i;
    i32 %47 = add i32 %46, i32 1;
    store i32* %i with i32 %47;
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32 %11 = call (i32*) -> i32 @insertsort(i32* %10);
    store i32* %i with i32 %11;
    ubr ^while.header;
^while.header:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* @n;
    i1 %14 = scmp lt i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %tmp with i32 0;
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([10 * i32]* %a)[i64 0][i64 %18];
    i32 %20 = load i32* %19;
    store i32* %tmp with i32 %20;
    i32 %21 = load i32* %tmp;
    call (i32) -> void @putint(i32 %21);
    store i32* %tmp with i32 10;
    i32 %22 = load i32* %tmp;
    call (i32) -> void @putch(i32 %22);
    i32 %23 = load i32* %i;
    i32 %24 = add i32 %23, i32 1;
    store i32* %i with i32 %24;
    ubr ^while.header;
^b:
    ret i32 0;
}
