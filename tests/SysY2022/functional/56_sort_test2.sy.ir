internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %temp = alloc i32;
    i32* %j = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^b3, i32 %44] [^entry, i32 10];
    i32 %11 = phi [^b3, i32 %46] [^entry, i32 1];
    i32* %12 = phi [^b3, i32* %28] [^entry, i32* %0];
    i32 %13 = phi [^b3, i32 %44] [^entry, i32 10];
    i32 %14 = phi [^b3, i32 %46] [^entry, i32 1];
    i1 %15 = scmp lt i32 %14, i32 %13;
    cbr i1 %15(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    store i32* %temp with i32 0;
    i32* %16 = getelementptr &(i32* %12)[i32 %11];
    i32 %17 = load i32* %16;
    store i32* %temp with i32 %17;
    i32 %18 = add i32 %11, i32 -1;
    store i32* %j with i32 %18;
    ubr ^while.header2;
^while.header1:
    i32 %19 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i32 %20 = phi [^while.header, i32 %10] [^while.body1, i32 %20];
    i32 %21 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i1 %22 = scmp lt i32 %21, i32 %20;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32* %23 = getelementptr &([10 * i32]* %a)[i64 0][i32 %19];
    i32 %24 = load i32* %23;
    call (i32) -> void @putint(i32 %24);
    call (i32) -> void @putch(i32 10);
    i32 %25 = add i32 %19, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %26 = phi [^while.body2, i32 %41] [^while.body, i32 %18];
    i32 %27 = phi [^while.body2, i32 %40] [^while.body, i32 %17];
    i32* %28 = phi [^while.body2, i32* %28] [^while.body, i32* %12];
    i32 %29 = phi [^while.body2, i32 %41] [^while.body, i32 %18];
    i1 %30 = scmp gt i32 %29, i32 -1;
    cbr i1 %30(prob = 0.5), ^b1, ^b2;
^b:
    ret i32 0;
^b1:
    i32* %31 = getelementptr &(i32* %28)[i32 %26];
    i32 %32 = load i32* %31;
    i1 %33 = scmp lt i32 %27, i32 %32;
    ubr ^b2;
^b2:
    i1 %34 = phi [^while.header2, i1 false] [^b1, i1 %33];
    cbr i1 %34(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %35 = add i32 %26, i32 1;
    i32* %36 = getelementptr &(i32* %28)[i32 %35];
    i32* %37 = getelementptr &(i32* %28)[i32 %26];
    i32 %38 = load i32* %37;
    store i32* %36 with i32 %38;
    i32 %39 = load i32* %j;
    i32 %40 = load i32* %temp;
    i32 %41 = add i32 %39, i32 -1;
    store i32* %j with i32 %41;
    ubr ^while.header2;
^b3:
    i32 %42 = add i32 %26, i32 1;
    i32* %43 = getelementptr &(i32* %28)[i32 %42];
    store i32* %43 with i32 %27;
    i32 %44 = load i32* %n;
    i32 %45 = load i32* %i;
    i32 %46 = add i32 %45, i32 1;
    store i32* %i with i32 %46;
    ubr ^while.header;
}
