internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^entry, i32 1] [^b2, i32 %26];
    i32 %11 = add i32 %10, i32 -1;
    i1 %12 = scmp gt i32 %11, i32 -1;
    i32* %13 = getelementptr &(i32* %0)[i32 %10];
    i32 %14 = load i32* %13;
    cbr i1 %12(prob = 0.5), ^b, ^b1;
^b:
    i32* %15 = getelementptr &(i32* %0)[i32 %11];
    i32 %16 = load i32* %15;
    i1 %17 = scmp lt i32 %14, i32 %16;
    ubr ^b1;
^b1:
    i1 %18 = phi [^while.body, i1 false] [^b, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %19 = phi [^b1, i32 %11] [^b4, i32 %20];
    i32 %20 = add i32 %19, i32 -1;
    i1 %21 = scmp gt i32 %20, i32 -1;
    i32* %22 = getelementptr &(i32* %0)[i32 %19];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %22)[i64 1];
    store i32* %24 with i32 %23;
    cbr i1 %21(prob = 0.5), ^b3, ^b4;
^b2:
    i32 %25 = phi [^b1, i32 %11] [^b4, i32 %20];
    i32 %26 = add i32 %10, i32 1;
    i32 %27 = add i32 %25, i32 1;
    i1 %28 = scmp lt i32 %26, i32 10;
    i32* %29 = getelementptr &(i32* %0)[i32 %27];
    store i32* %29 with i32 %14;
    cbr i1 %28(prob = 0.89), ^while.body, ^while.body2;
^b3:
    i32* %30 = getelementptr &(i32* %0)[i32 %20];
    i32 %31 = load i32* %30;
    i1 %32 = scmp lt i32 %14, i32 %31;
    ubr ^b4;
^b4:
    i1 %33 = phi [^while.body1, i1 false] [^b3, i1 %32];
    cbr i1 %33(prob = 0.97), ^while.body1, ^b2;
^while.body2:
    i32 %34 = phi [^b2, i32 0] [^while.body2, i32 %35];
    i32 %35 = add i32 %34, i32 1;
    i1 %36 = scmp lt i32 %35, i32 10;
    i32* %37 = getelementptr &([10 * i32]* %a)[i64 0][i32 %34];
    i32 %38 = load i32* %37;
    call (i32) -> void @putint(i32 %38);
    call (i32) -> void @putch(i32 10);
    cbr i1 %36(prob = 0.9), ^while.body2, ^b5;
^b5:
    ret i32 0;
}
