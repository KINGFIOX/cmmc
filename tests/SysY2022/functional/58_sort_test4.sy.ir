internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %12] [^if.then, i32 %12];
    i1 %11 = scmp lt i32 %10, i32 9;
    cbr i1 %11(prob = 0.97), ^while.body, ^while.body1;
^while.body:
    i32 %12 = add i32 %10, i32 1;
    i1 %13 = scmp lt i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^super.header, ^b;
^while.body1:
    i32 %14 = phi [^while.header, i32 0] [^while.body1, i32 %17];
    i32* %15 = getelementptr &([10 * i32]* %a)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = scmp lt i32 %17, i32 10;
    cbr i1 %18(prob = 0.9), ^while.body1, ^b1;
^super.header:
    i32 %19 = phi [^while.body, i32 %10] [^while.body2, i32 %135];
    i32 %20 = phi [^while.body, i32 %12] [^while.body2, i32 %21];
    i32 %21 = add i32 %20, i32 16;
    i1 %22 = scmp lt i32 %21, i32 10;
    cbr i1 %22(prob = 0.67), ^while.body2, ^while.body3;
^b:
    i32 %23 = phi [^while.body, i32 %10] [^while.body3, i32 %147];
    i1 %24 = scmp neq i32 %23, i32 %10;
    cbr i1 %24(prob = 0.5), ^if.then, ^while.header;
^b1:
    ret i32 0;
^while.body2:
    i32* %25 = getelementptr &(i32* %0)[i32 %19];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %0)[i32 %20];
    i32 %28 = load i32* %27;
    i1 %29 = scmp gt i32 %26, i32 %28;
    i32 %30 = select i1 %29 ? i32 %20 : i32 %19;
    i32 %31 = add i32 %20, i32 1;
    i32* %32 = getelementptr &(i32* %0)[i32 %30];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &(i32* %0)[i32 %31];
    i32 %35 = load i32* %34;
    i1 %36 = scmp gt i32 %33, i32 %35;
    i32 %37 = select i1 %36 ? i32 %31 : i32 %30;
    i32 %38 = add i32 %20, i32 2;
    i32* %39 = getelementptr &(i32* %0)[i32 %37];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %0)[i32 %38];
    i32 %42 = load i32* %41;
    i1 %43 = scmp gt i32 %40, i32 %42;
    i32 %44 = select i1 %43 ? i32 %38 : i32 %37;
    i32 %45 = add i32 %20, i32 3;
    i32* %46 = getelementptr &(i32* %0)[i32 %44];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %0)[i32 %45];
    i32 %49 = load i32* %48;
    i1 %50 = scmp gt i32 %47, i32 %49;
    i32 %51 = select i1 %50 ? i32 %45 : i32 %44;
    i32 %52 = add i32 %20, i32 4;
    i32* %53 = getelementptr &(i32* %0)[i32 %51];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %0)[i32 %52];
    i32 %56 = load i32* %55;
    i1 %57 = scmp gt i32 %54, i32 %56;
    i32 %58 = select i1 %57 ? i32 %52 : i32 %51;
    i32 %59 = add i32 %20, i32 5;
    i32* %60 = getelementptr &(i32* %0)[i32 %58];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %0)[i32 %59];
    i32 %63 = load i32* %62;
    i1 %64 = scmp gt i32 %61, i32 %63;
    i32 %65 = select i1 %64 ? i32 %59 : i32 %58;
    i32 %66 = add i32 %20, i32 6;
    i32* %67 = getelementptr &(i32* %0)[i32 %65];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %0)[i32 %66];
    i32 %70 = load i32* %69;
    i1 %71 = scmp gt i32 %68, i32 %70;
    i32 %72 = select i1 %71 ? i32 %66 : i32 %65;
    i32 %73 = add i32 %20, i32 7;
    i32* %74 = getelementptr &(i32* %0)[i32 %72];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %0)[i32 %73];
    i32 %77 = load i32* %76;
    i1 %78 = scmp gt i32 %75, i32 %77;
    i32 %79 = select i1 %78 ? i32 %73 : i32 %72;
    i32 %80 = add i32 %20, i32 8;
    i32* %81 = getelementptr &(i32* %0)[i32 %79];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %0)[i32 %80];
    i32 %84 = load i32* %83;
    i1 %85 = scmp gt i32 %82, i32 %84;
    i32 %86 = select i1 %85 ? i32 %80 : i32 %79;
    i32 %87 = add i32 %20, i32 9;
    i32* %88 = getelementptr &(i32* %0)[i32 %86];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %0)[i32 %87];
    i32 %91 = load i32* %90;
    i1 %92 = scmp gt i32 %89, i32 %91;
    i32 %93 = select i1 %92 ? i32 %87 : i32 %86;
    i32 %94 = add i32 %20, i32 10;
    i32* %95 = getelementptr &(i32* %0)[i32 %93];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %0)[i32 %94];
    i32 %98 = load i32* %97;
    i1 %99 = scmp gt i32 %96, i32 %98;
    i32 %100 = select i1 %99 ? i32 %94 : i32 %93;
    i32 %101 = add i32 %20, i32 11;
    i32* %102 = getelementptr &(i32* %0)[i32 %100];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %0)[i32 %101];
    i32 %105 = load i32* %104;
    i1 %106 = scmp gt i32 %103, i32 %105;
    i32 %107 = select i1 %106 ? i32 %101 : i32 %100;
    i32 %108 = add i32 %20, i32 12;
    i32* %109 = getelementptr &(i32* %0)[i32 %107];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %0)[i32 %108];
    i32 %112 = load i32* %111;
    i1 %113 = scmp gt i32 %110, i32 %112;
    i32 %114 = select i1 %113 ? i32 %108 : i32 %107;
    i32 %115 = add i32 %20, i32 13;
    i32* %116 = getelementptr &(i32* %0)[i32 %114];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %0)[i32 %115];
    i32 %119 = load i32* %118;
    i1 %120 = scmp gt i32 %117, i32 %119;
    i32 %121 = select i1 %120 ? i32 %115 : i32 %114;
    i32 %122 = add i32 %20, i32 14;
    i32* %123 = getelementptr &(i32* %0)[i32 %121];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %0)[i32 %122];
    i32 %126 = load i32* %125;
    i1 %127 = scmp gt i32 %124, i32 %126;
    i32 %128 = select i1 %127 ? i32 %122 : i32 %121;
    i32 %129 = add i32 %20, i32 15;
    i32* %130 = getelementptr &(i32* %0)[i32 %128];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %0)[i32 %129];
    i32 %133 = load i32* %132;
    i1 %134 = scmp gt i32 %131, i32 %133;
    i32 %135 = select i1 %134 ? i32 %129 : i32 %128;
    ubr ^super.header;
^if.then:
    i32* %136 = getelementptr &(i32* %0)[i32 %23];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %0)[i32 %10];
    i32 %139 = load i32* %138;
    store i32* %136 with i32 %139;
    store i32* %138 with i32 %137;
    ubr ^while.header;
^while.body3:
    i32 %140 = phi [^super.header, i32 %19] [^while.body3, i32 %147];
    i32 %141 = phi [^super.header, i32 %20] [^while.body3, i32 %148];
    i32* %142 = getelementptr &(i32* %0)[i32 %140];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %0)[i32 %141];
    i32 %145 = load i32* %144;
    i1 %146 = scmp gt i32 %143, i32 %145;
    i32 %147 = select i1 %146 ? i32 %141 : i32 %140;
    i32 %148 = add i32 %141, i32 1;
    i1 %149 = scmp lt i32 %148, i32 10;
    cbr i1 %149(prob = 0.97), ^while.body3, ^b;
}
