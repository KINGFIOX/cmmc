internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    store i32* %n with i32 10;
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 10;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %n1, i32* %i, [10 * i32]* %a, i32* %n, i32 10, i32* %0, i32 10, i32 0 ];
^while.body(i32* %arg, i32* %arg1, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1(prob = 0.97), [ ^while.body1 i32* %arg1, i32* %arg, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 %arg7 ], [ ^b i32* %arg, i32* %arg1, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg7 ];
^while.body1(i32* %arg, i32* %arg1, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &(i32* %arg5)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg5)[i32 %arg8];
    i32 %3 = load i32* %2;
    i1 %4 = scmp gt i32 %1, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^if.then i32* %arg, i32* %arg1, i32* %arg3, [10 * i32]* %arg2, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg3, [10 * i32]* %arg2, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b(i32* %arg, i32* %arg1, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp neq i32 %arg8, i32 %arg7;
    cbr i1 %0(prob = 0.5), [ ^indirect1 i32* %arg, i32* %arg1, i32 %arg7, i32 %arg8, i32* %arg3, [10 * i32]* %arg2, i32* %arg5 ], [ ^b1 i32* %arg, i32* %arg1, i32 %arg7, [10 * i32]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    ubr [ ^indirect2 i32* %arg, i32* %arg1, i32 %0, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 %arg8 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg8, i32 1;
    ubr [ ^indirect2 i32* %arg, i32* %arg1, i32 %0, i32* %arg2, [10 * i32]* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 %arg9 ];
^indirect1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6):
    i32* %0 = getelementptr &(i32* %arg6)[i32 %arg3];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg6)[i32 %arg2];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %arg1;
    i32* %5 = getelementptr &(i32* %arg6)[i32 %4];
    store i32* %5 with i32 %1;
    i32 %6 = load i32* %arg;
    i32 %7 = load i32* %arg4;
    i32 %8 = add i32 %4, i32 1;
    store i32* %arg1 with i32 %8;
    i32 %9 = add i32 %6, i32 -1;
    i1 %10 = scmp lt i32 %8, i32 %9;
    cbr i1 %10(prob = 0.97), [ ^while.body i32* %arg, i32* %arg1, [10 * i32]* %arg5, i32* %arg4, i32 %7, i32* %arg6, i32 %6, i32 %8 ], [ ^entry1 [10 * i32]* %arg5, i32 %7 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2, [10 * i32]* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = add i32 %arg7, i32 -1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2(prob = 0.97), [ ^while.body i32* %arg, i32* %arg1, [10 * i32]* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %0 ], [ ^entry1 [10 * i32]* %arg3, i32 %arg5 ];
^indirect2(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, [10 * i32]* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg2, i32 %arg7;
    cbr i1 %0(prob = 0.97), [ ^while.body1 i32* %arg, i32* %arg1, [10 * i32]* %arg4, i32* %arg3, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b i32* %arg1, i32* %arg, [10 * i32]* %arg4, i32* %arg3, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg10 ];
^entry1([10 * i32]* %arg, i32 %arg1):
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.97), [ ^super.header [10 * i32]* %arg, i32 %arg1, i32 0 ], [ ^b2 ];
^super.header([10 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg1;
    cbr i1 %1(prob = 0.67), [ ^while.body2 [10 * i32]* %arg, i32 %arg1, i32 %arg2 ], [ ^while.body3 [10 * i32]* %arg, i32 %arg1, i32 %arg2 ];
^b2():
    ret i32 0;
^while.body2([10 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i64 0][i32 %arg2];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 10);
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    i32 %5 = load i32* %4;
    call (i32) -> void @putint(i32 %5);
    call (i32) -> void @putch(i32 10);
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    i32 %7 = load i32* %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 10);
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    i32 %9 = load i32* %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    i32 %11 = load i32* %10;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 10);
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    i32 %13 = load i32* %12;
    call (i32) -> void @putint(i32 %13);
    call (i32) -> void @putch(i32 10);
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    i32 %15 = load i32* %14;
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 10);
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 10);
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    i32 %21 = load i32* %20;
    call (i32) -> void @putint(i32 %21);
    call (i32) -> void @putch(i32 10);
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    i32 %23 = load i32* %22;
    call (i32) -> void @putint(i32 %23);
    call (i32) -> void @putch(i32 10);
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    i32 %25 = load i32* %24;
    call (i32) -> void @putint(i32 %25);
    call (i32) -> void @putch(i32 10);
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 10);
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    i32 %29 = load i32* %28;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 10);
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    i32 %31 = load i32* %30;
    call (i32) -> void @putint(i32 %31);
    call (i32) -> void @putch(i32 10);
    i32 %32 = add i32 %arg2, i32 16;
    i1 %33 = scmp lt i32 %32, i32 %arg1;
    cbr i1 %33(prob = 0.97), [ ^super.header [10 * i32]* %arg, i32 %arg1, i32 %32 ], [ ^b2 ];
^while.body3([10 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i64 0][i32 %arg2];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3(prob = 0.97), [ ^while.body3 [10 * i32]* %arg, i32 %arg1, i32 %2 ], [ ^b2 ];
}
