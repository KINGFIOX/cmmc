internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @select_sort(i32* %A, i32 %n) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %min = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    i32** %A1 = alloc i32*;
    store i32** %A1 with i32* %A;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %min with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    store i32* %min with i32 %6;
    i32 %7 = load i32* %i;
    i32 %8 = add i32 %7, i32 1;
    store i32* %j with i32 %8;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %9 = load i32* %j;
    i32 %10 = load i32* %n1;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %14 = load i32* %min;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %A1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    i32 %19 = load i32* %j;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = load i32** %A1;
    i32* %22 = getelementptr &(i32* %21)[i64 %20];
    i32 %23 = load i32* %22;
    i1 %24 = scmp gt i32 %18, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
^b1:
    i32 %27 = load i32* %min;
    i32 %28 = load i32* %i;
    i1 %29 = scmp neq i32 %27, i32 %28;
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^if.then1, ^b3;
^if.then:
    i32 %32 = load i32* %j;
    store i32* %min with i32 %32;
    ubr ^b2;
^b2:
    i32 %33 = load i32* %j;
    i32 %34 = add i32 %33, i32 1;
    store i32* %j with i32 %34;
    ubr ^while.header1;
^if.then1:
    store i32* %tmp with i32 0;
    i32 %35 = load i32* %min;
    i64 %36 = sext i32 %35 to i64;
    i32* %37 = load i32** %A1;
    i32* %38 = getelementptr &(i32* %37)[i64 %36];
    i32 %39 = load i32* %38;
    store i32* %tmp with i32 %39;
    i32 %40 = load i32* %min;
    i64 %41 = sext i32 %40 to i64;
    i32* %42 = load i32** %A1;
    i32* %43 = getelementptr &(i32* %42)[i64 %41];
    i32 %44 = load i32* %i;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = load i32** %A1;
    i32* %47 = getelementptr &(i32* %46)[i64 %45];
    i32 %48 = load i32* %47;
    store i32* %43 with i32 %48;
    i32 %49 = load i32* %i;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = load i32** %A1;
    i32* %52 = getelementptr &(i32* %51)[i64 %50];
    i32 %53 = load i32* %tmp;
    store i32* %52 with i32 %53;
    ubr ^b3;
^b3:
    i32 %54 = load i32* %i;
    i32 %55 = add i32 %54, i32 1;
    store i32* %i with i32 %55;
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32 %11 = load i32* @n;
    i32 %12 = call (i32*, i32) -> i32 @select_sort(i32* %10, i32 %11);
    store i32* %i with i32 %12;
    ubr ^while.header;
^while.header:
    i32 %13 = load i32* %i;
    i32 %14 = load i32* @n;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %tmp with i32 0;
    i32 %18 = load i32* %i;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = getelementptr &([10 * i32]* %a)[i64 0][i64 %19];
    i32 %21 = load i32* %20;
    store i32* %tmp with i32 %21;
    i32 %22 = load i32* %tmp;
    call (i32) -> void @putint(i32 %22);
    store i32* %tmp with i32 10;
    i32 %23 = load i32* %tmp;
    call (i32) -> void @putch(i32 %23);
    i32 %24 = load i32* %i;
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    ubr ^while.header;
^b:
    ret i32 0;
}
