internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %tmp = alloc i32;
    i32* %n1 = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n1 with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %n with i32 10;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^b3, i32 %52] [^entry, i32 10];
    i32 %11 = phi [^b3, i32 %55] [^entry, i32 0];
    i32 %12 = phi [^b3, i32 %53] [^entry, i32 10];
    i32* %13 = phi [^b3, i32* %31] [^entry, i32* %0];
    i32 %14 = phi [^entry, i32 10] [^b3, i32 %53];
    i32 %15 = phi [^entry, i32 0] [^b3, i32 %55];
    i32 %16 = add i32 %14, i32 -1;
    i1 %17 = scmp lt i32 %15, i32 %16;
    cbr i1 %17(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %18 = add i32 %11, i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %19 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i32 %20 = phi [^while.header, i32 %10] [^while.body1, i32 %20];
    i32 %21 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i1 %22 = scmp lt i32 %21, i32 %20;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32* %23 = getelementptr &([10 * i32]* %a)[i64 0][i32 %19];
    i32 %24 = load i32* %23;
    call (i32) -> void @putint(i32 %24);
    call (i32) -> void @putch(i32 10);
    i32 %25 = add i32 %19, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %26 = phi [^b2, i32 %26] [^while.body, i32 %10];
    i32 %27 = phi [^b2, i32 %50] [^while.body, i32 %11];
    i32 %28 = phi [^b2, i32 %51] [^while.body, i32 %18];
    i32 %29 = phi [^b2, i32 %29] [^while.body, i32 %11];
    i32 %30 = phi [^b2, i32 %30] [^while.body, i32 %12];
    i32* %31 = phi [^b2, i32* %31] [^while.body, i32* %13];
    i32 %32 = phi [^while.body, i32 %18] [^b2, i32 %51];
    i1 %33 = scmp lt i32 %32, i32 %30;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b1;
^b:
    ret i32 0;
^while.body2:
    i32* %34 = getelementptr &(i32* %31)[i32 %27];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &(i32* %31)[i32 %28];
    i32 %37 = load i32* %36;
    i1 %38 = scmp gt i32 %35, i32 %37;
    cbr i1 %38(prob = 0.5), ^if.then, ^b2;
^b1:
    i1 %39 = scmp neq i32 %27, i32 %29;
    cbr i1 %39(prob = 0.5), ^if.then1, ^b3;
^if.then:
    ubr ^b2;
^if.then1:
    store i32* %tmp with i32 0;
    i32* %40 = getelementptr &(i32* %31)[i32 %27];
    i32 %41 = load i32* %40;
    store i32* %tmp with i32 %41;
    i32* %42 = getelementptr &(i32* %31)[i32 %29];
    i32 %43 = load i32* %42;
    store i32* %40 with i32 %43;
    i32 %44 = load i32* %tmp;
    i32 %45 = load i32* %i;
    i32* %46 = getelementptr &(i32* %31)[i32 %45];
    store i32* %46 with i32 %44;
    i32 %47 = load i32* %n1;
    i32 %48 = load i32* %i;
    i32 %49 = load i32* %n;
    ubr ^b3;
^b2:
    i32 %50 = phi [^while.body2, i32 %27] [^if.then, i32 %28];
    i32 %51 = add i32 %28, i32 1;
    ubr ^while.header2;
^b3:
    i32 %52 = phi [^if.then1, i32 %47] [^b1, i32 %26];
    i32 %53 = phi [^if.then1, i32 %49] [^b1, i32 %30];
    i32 %54 = phi [^if.then1, i32 %48] [^b1, i32 %29];
    i32 %55 = add i32 %54, i32 1;
    store i32* %i with i32 %55;
    ubr ^while.header;
}
