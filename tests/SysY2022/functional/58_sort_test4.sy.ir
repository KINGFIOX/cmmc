internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %11];
    i32 %11 = add i32 %10, i32 1;
    i1 %12 = scmp lt i32 %11, i32 10;
    cbr i1 %12(prob = 0.97), ^super.header, ^b;
^super.header:
    i32 %13 = phi [^while.body, i32 %10] [^while.body1, i32 %129];
    i32 %14 = phi [^while.body, i32 %11] [^while.body1, i32 %15];
    i32 %15 = add i32 %14, i32 16;
    i1 %16 = scmp lt i32 %15, i32 10;
    cbr i1 %16(prob = 0.67), ^while.body1, ^while.body2;
^b:
    i32 %17 = phi [^while.body, i32 %10] [^while.body2, i32 %141];
    i1 %18 = scmp neq i32 %17, i32 %10;
    cbr i1 %18(prob = 0.5), ^if.then, ^b1;
^while.body1:
    i32* %19 = getelementptr &(i32* %0)[i32 %13];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %0)[i32 %14];
    i32 %22 = load i32* %21;
    i1 %23 = scmp gt i32 %20, i32 %22;
    i32 %24 = select i1 %23 ? i32 %14 : i32 %13;
    i32 %25 = add i32 %14, i32 1;
    i32* %26 = getelementptr &(i32* %0)[i32 %24];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &(i32* %0)[i32 %25];
    i32 %29 = load i32* %28;
    i1 %30 = scmp gt i32 %27, i32 %29;
    i32 %31 = select i1 %30 ? i32 %25 : i32 %24;
    i32 %32 = add i32 %14, i32 2;
    i32* %33 = getelementptr &(i32* %0)[i32 %31];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %0)[i32 %32];
    i32 %36 = load i32* %35;
    i1 %37 = scmp gt i32 %34, i32 %36;
    i32 %38 = select i1 %37 ? i32 %32 : i32 %31;
    i32 %39 = add i32 %14, i32 3;
    i32* %40 = getelementptr &(i32* %0)[i32 %38];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %0)[i32 %39];
    i32 %43 = load i32* %42;
    i1 %44 = scmp gt i32 %41, i32 %43;
    i32 %45 = select i1 %44 ? i32 %39 : i32 %38;
    i32 %46 = add i32 %14, i32 4;
    i32* %47 = getelementptr &(i32* %0)[i32 %45];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %0)[i32 %46];
    i32 %50 = load i32* %49;
    i1 %51 = scmp gt i32 %48, i32 %50;
    i32 %52 = select i1 %51 ? i32 %46 : i32 %45;
    i32 %53 = add i32 %14, i32 5;
    i32* %54 = getelementptr &(i32* %0)[i32 %52];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %0)[i32 %53];
    i32 %57 = load i32* %56;
    i1 %58 = scmp gt i32 %55, i32 %57;
    i32 %59 = select i1 %58 ? i32 %53 : i32 %52;
    i32 %60 = add i32 %14, i32 6;
    i32* %61 = getelementptr &(i32* %0)[i32 %59];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %0)[i32 %60];
    i32 %64 = load i32* %63;
    i1 %65 = scmp gt i32 %62, i32 %64;
    i32 %66 = select i1 %65 ? i32 %60 : i32 %59;
    i32 %67 = add i32 %14, i32 7;
    i32* %68 = getelementptr &(i32* %0)[i32 %66];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %0)[i32 %67];
    i32 %71 = load i32* %70;
    i1 %72 = scmp gt i32 %69, i32 %71;
    i32 %73 = select i1 %72 ? i32 %67 : i32 %66;
    i32 %74 = add i32 %14, i32 8;
    i32* %75 = getelementptr &(i32* %0)[i32 %73];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %0)[i32 %74];
    i32 %78 = load i32* %77;
    i1 %79 = scmp gt i32 %76, i32 %78;
    i32 %80 = select i1 %79 ? i32 %74 : i32 %73;
    i32 %81 = add i32 %14, i32 9;
    i32* %82 = getelementptr &(i32* %0)[i32 %80];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %0)[i32 %81];
    i32 %85 = load i32* %84;
    i1 %86 = scmp gt i32 %83, i32 %85;
    i32 %87 = select i1 %86 ? i32 %81 : i32 %80;
    i32 %88 = add i32 %14, i32 10;
    i32* %89 = getelementptr &(i32* %0)[i32 %87];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %0)[i32 %88];
    i32 %92 = load i32* %91;
    i1 %93 = scmp gt i32 %90, i32 %92;
    i32 %94 = select i1 %93 ? i32 %88 : i32 %87;
    i32 %95 = add i32 %14, i32 11;
    i32* %96 = getelementptr &(i32* %0)[i32 %94];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %0)[i32 %95];
    i32 %99 = load i32* %98;
    i1 %100 = scmp gt i32 %97, i32 %99;
    i32 %101 = select i1 %100 ? i32 %95 : i32 %94;
    i32 %102 = add i32 %14, i32 12;
    i32* %103 = getelementptr &(i32* %0)[i32 %101];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %0)[i32 %102];
    i32 %106 = load i32* %105;
    i1 %107 = scmp gt i32 %104, i32 %106;
    i32 %108 = select i1 %107 ? i32 %102 : i32 %101;
    i32 %109 = add i32 %14, i32 13;
    i32* %110 = getelementptr &(i32* %0)[i32 %108];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %0)[i32 %109];
    i32 %113 = load i32* %112;
    i1 %114 = scmp gt i32 %111, i32 %113;
    i32 %115 = select i1 %114 ? i32 %109 : i32 %108;
    i32 %116 = add i32 %14, i32 14;
    i32* %117 = getelementptr &(i32* %0)[i32 %115];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %0)[i32 %116];
    i32 %120 = load i32* %119;
    i1 %121 = scmp gt i32 %118, i32 %120;
    i32 %122 = select i1 %121 ? i32 %116 : i32 %115;
    i32 %123 = add i32 %14, i32 15;
    i32* %124 = getelementptr &(i32* %0)[i32 %122];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %0)[i32 %123];
    i32 %127 = load i32* %126;
    i1 %128 = scmp gt i32 %125, i32 %127;
    i32 %129 = select i1 %128 ? i32 %123 : i32 %122;
    ubr ^super.header;
^if.then:
    i32* %130 = getelementptr &(i32* %0)[i32 %17];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %0)[i32 %10];
    i32 %133 = load i32* %132;
    store i32* %130 with i32 %133;
    store i32* %132 with i32 %131;
    ubr ^b1;
^while.body2:
    i32 %134 = phi [^super.header, i32 %13] [^while.body2, i32 %141];
    i32 %135 = phi [^super.header, i32 %14] [^while.body2, i32 %142];
    i32* %136 = getelementptr &(i32* %0)[i32 %134];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %0)[i32 %135];
    i32 %139 = load i32* %138;
    i1 %140 = scmp gt i32 %137, i32 %139;
    i32 %141 = select i1 %140 ? i32 %135 : i32 %134;
    i32 %142 = add i32 %135, i32 1;
    i1 %143 = scmp lt i32 %142, i32 10;
    cbr i1 %143(prob = 0.97), ^while.body2, ^b;
^b1:
    i1 %144 = scmp lt i32 %11, i32 9;
    cbr i1 %144(prob = 0.89), ^while.body, ^while.body3;
^while.body3:
    i32 %145 = phi [^b1, i32 0] [^while.body3, i32 %148];
    i32* %146 = getelementptr &([10 * i32]* %a)[i64 0][i32 %145];
    i32 %147 = load i32* %146;
    call (i32) -> void @putint(i32 %147);
    call (i32) -> void @putch(i32 10);
    i32 %148 = add i32 %145, i32 1;
    i1 %149 = scmp lt i32 %148, i32 10;
    cbr i1 %149(prob = 0.9), ^while.body3, ^b2;
^b2:
    ret i32 0;
}
