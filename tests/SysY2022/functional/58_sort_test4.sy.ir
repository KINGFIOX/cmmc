internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %11];
    i32 %11 = add i32 %10, i32 1;
    i1 %12 = icmp slt i32 %11, i32 10;
    cbr i1 %12(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %13 = add i32 %10, i32 4;
    i1 %14 = icmp slt i32 %13, i32 10;
    cbr i1 %14(prob = 0.692308), ^while.body1, ^scalar.header;
  ^b:
    i32 %15 = phi [^while.body, i32 %10] [^scalar.header, i32 %54] [^while.body2, i32 %64];
    i1 %16 = icmp neq i32 %10, i32 %15;
    cbr i1 %16(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32* %17 = getelementptr &(i32* %0)[i32 %15];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %0)[i32 %10];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    store i32* %19 with i32 %18;
    ubr ^b1;
  ^while.body1:
    i32 %21 = phi [^super.header, i32 %10] [^while.body1, i32 %49];
    i32 %22 = phi [^super.header, i32 %11] [^while.body1, i32 %50];
    i32* %23 = getelementptr &(i32* %0)[i32 %21];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %0)[i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp sgt i32 %24, i32 %26;
    i32 %28 = select i1 %27 ? i32 %22 : i32 %21;
    i32* %29 = getelementptr &(i32* %0)[i32 %28];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %25)[i64 1];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sgt i32 %30, i32 %32;
    i32 %34 = add i32 %22, i32 1;
    i32 %35 = select i1 %33 ? i32 %34 : i32 %28;
    i32* %36 = getelementptr &(i32* %0)[i32 %35];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %25)[i64 2];
    i32 %39 = load i32* %38;
    i1 %40 = icmp sgt i32 %37, i32 %39;
    i32 %41 = add i32 %22, i32 2;
    i32 %42 = select i1 %40 ? i32 %41 : i32 %35;
    i32* %43 = getelementptr &(i32* %0)[i32 %42];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %25)[i64 3];
    i32 %46 = load i32* %45;
    i1 %47 = icmp sgt i32 %44, i32 %46;
    i32 %48 = add i32 %22, i32 3;
    i32 %49 = select i1 %47 ? i32 %48 : i32 %42;
    i32 %50 = add i32 %22, i32 4;
    i1 %51 = icmp slt i32 %50, i32 7;
    cbr i1 %51(prob = 0.692308), ^while.body1, ^scalar.header;
  ^scalar.header:
    i32 %52 = phi [^super.header, i32 %10] [^while.body1, i32 %49];
    i32 %53 = phi [^super.header, i32 %11] [^while.body1, i32 %50];
    i32 %54 = phi [^super.header, i32 undef] [^while.body1, i32 %49];
    i1 %55 = icmp slt i32 %53, i32 10;
    cbr i1 %55(prob = 0.75), ^while.body2, ^b;
  ^b1:
    i1 %56 = icmp slt i32 %11, i32 9;
    cbr i1 %56(prob = 0.888889), ^while.body, ^while.body3;
  ^while.body2 {scalar}:
    i32 %57 = phi [^scalar.header, i32 %53] [^while.body2, i32 %65];
    i32 %58 = phi [^scalar.header, i32 %52] [^while.body2, i32 %64];
    i32* %59 = getelementptr &(i32* %0)[i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %0)[i32 %57];
    i32 %62 = load i32* %61;
    i1 %63 = icmp sgt i32 %60, i32 %62;
    i32 %64 = select i1 %63 ? i32 %57 : i32 %58;
    i32 %65 = add i32 %57, i32 1;
    i1 %66 = icmp slt i32 %65, i32 10;
    cbr i1 %66(prob = 0.75), ^while.body2, ^b;
  ^while.body3:
    i32 %67 = phi [^b1, i32 0] [^while.body3, i32 %70];
    i32* %68 = getelementptr &([10 * i32]* %a)[i64 0][i32 %67];
    i32 %69 = load i32* %68;
    call (i32) -> void @putint(i32 %69);
    call (i32) -> void @putch(i32 10);
    i32 %70 = add i32 %67, i32 1;
    i1 %71 = icmp slt i32 %70, i32 10;
    cbr i1 %71(prob = 0.9), ^while.body3, ^b2;
  ^b2:
    ret i32 0;
}
