internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b, i32 %12] [^if.then, i32 %12];
    i1 %11 = scmp lt i32 %10, i32 9;
    cbr i1 %11(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %12 = add i32 %10, i32 1;
    i1 %13 = scmp lt i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^super.header, ^b;
  ^while.body1:
    i32 %14 = phi [^while.header, i32 0] [^while.body1, i32 %17];
    i32* %15 = getelementptr &([10 * i32]* %a)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    i32 %17 = add i32 %14, i32 1;
    i1 %18 = scmp lt i32 %17, i32 10;
    cbr i1 %18(prob = 0.9), ^while.body1, ^b1;
  ^super.header:
    i32 %19 = phi [^while.body, i32 %10] [^while.body2, i32 %51];
    i32 %20 = phi [^while.body, i32 %12] [^while.body2, i32 %21];
    i32 %21 = add i32 %20, i32 4;
    i1 %22 = scmp lt i32 %21, i32 10;
    cbr i1 %22(prob = 0.89), ^while.body2, ^super.header1;
  ^b:
    i32 %23 = phi [^while.body, i32 %10] [^while.body5, i32 %125];
    i1 %24 = scmp neq i32 %10, i32 %23;
    cbr i1 %24(prob = 0.5), ^if.then, ^while.header;
  ^b1:
    ret i32 0;
  ^while.body2:
    i32* %25 = getelementptr &(i32* %0)[i32 %19];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %0)[i32 %20];
    i32 %28 = load i32* %27;
    i1 %29 = scmp gt i32 %26, i32 %28;
    i32 %30 = select i1 %29 ? i32 %20 : i32 %19;
    i32* %31 = getelementptr &(i32* %0)[i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %20, i32 1;
    i32* %34 = getelementptr &(i32* %0)[i32 %33];
    i32 %35 = load i32* %34;
    i1 %36 = scmp gt i32 %32, i32 %35;
    i32 %37 = select i1 %36 ? i32 %33 : i32 %30;
    i32* %38 = getelementptr &(i32* %0)[i32 %37];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %20, i32 2;
    i32* %41 = getelementptr &(i32* %0)[i32 %40];
    i32 %42 = load i32* %41;
    i1 %43 = scmp gt i32 %39, i32 %42;
    i32 %44 = select i1 %43 ? i32 %40 : i32 %37;
    i32* %45 = getelementptr &(i32* %0)[i32 %44];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %20, i32 3;
    i32* %48 = getelementptr &(i32* %0)[i32 %47];
    i32 %49 = load i32* %48;
    i1 %50 = scmp gt i32 %46, i32 %49;
    i32 %51 = select i1 %50 ? i32 %47 : i32 %44;
    ubr ^super.header;
  ^if.then:
    i32* %52 = getelementptr &(i32* %0)[i32 %23];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %0)[i32 %10];
    i32 %55 = load i32* %54;
    store i32* %52 with i32 %55;
    store i32* %54 with i32 %53;
    ubr ^while.header;
  ^super.header1:
    i32 %56 = phi [^super.header, i32 %19] [^while.body3, i32 %86];
    i32 %57 = phi [^super.header, i32 %20] [^while.body3, i32 %58];
    i32 %58 = add i32 %57, i32 4;
    i1 %59 = scmp lt i32 %58, i32 10;
    cbr i1 %59(prob = 0.89), ^while.body3, ^super.header2;
  ^while.body3:
    i32* %60 = getelementptr &(i32* %0)[i32 %56];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %0)[i32 %57];
    i32 %63 = load i32* %62;
    i1 %64 = scmp gt i32 %61, i32 %63;
    i32 %65 = select i1 %64 ? i32 %57 : i32 %56;
    i32* %66 = getelementptr &(i32* %0)[i32 %65];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %57, i32 1;
    i32* %69 = getelementptr &(i32* %0)[i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = scmp gt i32 %67, i32 %70;
    i32 %72 = select i1 %71 ? i32 %68 : i32 %65;
    i32* %73 = getelementptr &(i32* %0)[i32 %72];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %57, i32 2;
    i32* %76 = getelementptr &(i32* %0)[i32 %75];
    i32 %77 = load i32* %76;
    i1 %78 = scmp gt i32 %74, i32 %77;
    i32 %79 = select i1 %78 ? i32 %75 : i32 %72;
    i32* %80 = getelementptr &(i32* %0)[i32 %79];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %57, i32 3;
    i32* %83 = getelementptr &(i32* %0)[i32 %82];
    i32 %84 = load i32* %83;
    i1 %85 = scmp gt i32 %81, i32 %84;
    i32 %86 = select i1 %85 ? i32 %82 : i32 %79;
    ubr ^super.header1;
  ^super.header2:
    i32 %87 = phi [^super.header1, i32 %56] [^while.body4, i32 %117];
    i32 %88 = phi [^super.header1, i32 %57] [^while.body4, i32 %89];
    i32 %89 = add i32 %88, i32 4;
    i1 %90 = scmp lt i32 %89, i32 10;
    cbr i1 %90(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32* %91 = getelementptr &(i32* %0)[i32 %87];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %0)[i32 %88];
    i32 %94 = load i32* %93;
    i1 %95 = scmp gt i32 %92, i32 %94;
    i32 %96 = select i1 %95 ? i32 %88 : i32 %87;
    i32* %97 = getelementptr &(i32* %0)[i32 %96];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %88, i32 1;
    i32* %100 = getelementptr &(i32* %0)[i32 %99];
    i32 %101 = load i32* %100;
    i1 %102 = scmp gt i32 %98, i32 %101;
    i32 %103 = select i1 %102 ? i32 %99 : i32 %96;
    i32* %104 = getelementptr &(i32* %0)[i32 %103];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %88, i32 2;
    i32* %107 = getelementptr &(i32* %0)[i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = scmp gt i32 %105, i32 %108;
    i32 %110 = select i1 %109 ? i32 %106 : i32 %103;
    i32* %111 = getelementptr &(i32* %0)[i32 %110];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %88, i32 3;
    i32* %114 = getelementptr &(i32* %0)[i32 %113];
    i32 %115 = load i32* %114;
    i1 %116 = scmp gt i32 %112, i32 %115;
    i32 %117 = select i1 %116 ? i32 %113 : i32 %110;
    ubr ^super.header2;
  ^while.body5:
    i32 %118 = phi [^super.header2, i32 %87] [^while.body5, i32 %125];
    i32 %119 = phi [^super.header2, i32 %88] [^while.body5, i32 %126];
    i32* %120 = getelementptr &(i32* %0)[i32 %118];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %0)[i32 %119];
    i32 %123 = load i32* %122;
    i1 %124 = scmp gt i32 %121, i32 %123;
    i32 %125 = select i1 %124 ? i32 %119 : i32 %118;
    i32 %126 = add i32 %119, i32 1;
    i1 %127 = scmp lt i32 %126, i32 10;
    cbr i1 %127(prob = 0.97), ^while.body5, ^b;
}
