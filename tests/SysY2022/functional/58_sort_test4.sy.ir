internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %14] [^if.then, i32 %14];
    i1 %11 = icmp slt i32 %10, i32 9;
    cbr i1 %11(prob = 0.984615), ^while.body, ^while.body1;
  ^while.body:
    i32 %12 = add i32 %10, i32 9;
    i1 %13 = icmp slt i32 %12, i32 10;
    i32 %14 = add i32 %10, i32 1;
    cbr i1 %13(prob = 0.888889), ^while.body2, ^while.body3;
  ^while.body1:
    i32 %15 = phi [^while.header, i32 0] [^while.body1, i32 %18];
    i32* %16 = getelementptr &([10 * i32]* %a)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp slt i32 %18, i32 10;
    cbr i1 %19(prob = 0.9), ^while.body1, ^b;
  ^while.body2:
    i32 %20 = phi [^while.body, i32 %10] [^while.body2, i32 %76];
    i32 %21 = phi [^while.body, i32 %14] [^while.body2, i32 %77];
    i32* %22 = getelementptr &(i32* %0)[i32 %20];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %0)[i32 %21];
    i32 %25 = load i32* %24;
    i1 %26 = icmp sgt i32 %23, i32 %25;
    i32 %27 = select i1 %26 ? i32 %21 : i32 %20;
    i32* %28 = getelementptr &(i32* %0)[i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %21, i32 1;
    i32* %31 = getelementptr &(i32* %0)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sgt i32 %29, i32 %32;
    i32 %34 = select i1 %33 ? i32 %30 : i32 %27;
    i32* %35 = getelementptr &(i32* %0)[i32 %34];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %21, i32 2;
    i32* %38 = getelementptr &(i32* %0)[i32 %37];
    i32 %39 = load i32* %38;
    i1 %40 = icmp sgt i32 %36, i32 %39;
    i32 %41 = select i1 %40 ? i32 %37 : i32 %34;
    i32* %42 = getelementptr &(i32* %0)[i32 %41];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %21, i32 3;
    i32* %45 = getelementptr &(i32* %0)[i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = icmp sgt i32 %43, i32 %46;
    i32 %48 = select i1 %47 ? i32 %44 : i32 %41;
    i32* %49 = getelementptr &(i32* %0)[i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %21, i32 4;
    i32* %52 = getelementptr &(i32* %0)[i32 %51];
    i32 %53 = load i32* %52;
    i1 %54 = icmp sgt i32 %50, i32 %53;
    i32 %55 = select i1 %54 ? i32 %51 : i32 %48;
    i32* %56 = getelementptr &(i32* %0)[i32 %55];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %21, i32 5;
    i32* %59 = getelementptr &(i32* %0)[i32 %58];
    i32 %60 = load i32* %59;
    i1 %61 = icmp sgt i32 %57, i32 %60;
    i32 %62 = select i1 %61 ? i32 %58 : i32 %55;
    i32* %63 = getelementptr &(i32* %0)[i32 %62];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %21, i32 6;
    i32* %66 = getelementptr &(i32* %0)[i32 %65];
    i32 %67 = load i32* %66;
    i1 %68 = icmp sgt i32 %64, i32 %67;
    i32 %69 = select i1 %68 ? i32 %65 : i32 %62;
    i32* %70 = getelementptr &(i32* %0)[i32 %69];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %21, i32 7;
    i32* %73 = getelementptr &(i32* %0)[i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = icmp sgt i32 %71, i32 %74;
    i32 %76 = select i1 %75 ? i32 %72 : i32 %69;
    i32 %77 = add i32 %21, i32 8;
    i1 %78 = icmp slt i32 %77, i32 2;
    cbr i1 %78(prob = 0.888889), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %79 = phi [^while.body, i32 %14] [^while.body2, i32 %77] [^while.body3, i32 %87];
    i32 %80 = phi [^while.body, i32 %10] [^while.body2, i32 %76] [^while.body3, i32 %86];
    i32* %81 = getelementptr &(i32* %0)[i32 %80];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %0)[i32 %79];
    i32 %84 = load i32* %83;
    i1 %85 = icmp sgt i32 %82, i32 %84;
    i32 %86 = select i1 %85 ? i32 %79 : i32 %80;
    i32 %87 = add i32 %79, i32 1;
    i1 %88 = icmp slt i32 %87, i32 10;
    cbr i1 %88(prob = 0.875), ^while.body3, ^b1;
  ^b:
    ret i32 0;
  ^b1:
    i1 %89 = icmp neq i32 %10, i32 %86;
    cbr i1 %89(prob = 0.5), ^if.then, ^while.header;
  ^if.then:
    i32* %90 = getelementptr &(i32* %0)[i32 %86];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %0)[i32 %10];
    i32 %93 = load i32* %92;
    store i32* %90 with i32 %93;
    store i32* %92 with i32 %91;
    ubr ^while.header;
}
