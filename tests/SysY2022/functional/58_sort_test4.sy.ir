internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 0] [^b1, i32 %12] [^if.then, i32 %12];
    i1 %11 = icmp slt i32 %10, i32 9;
    cbr i1 %11(prob = 0.97), ^while.body, ^while.body1;
  ^while.body:
    i32 %12 = add i32 %10, i32 1;
    ubr ^super.header;
  ^while.body1:
    i32 %13 = phi [^while.header, i32 0] [^while.body1, i32 %16];
    i32* %14 = getelementptr &([10 * i32]* %a)[i64 0][i32 %13];
    i32 %15 = load i32* %14;
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 10);
    i32 %16 = add i32 %13, i32 1;
    i1 %17 = icmp slt i32 %16, i32 10;
    cbr i1 %17(prob = 0.9), ^while.body1, ^b;
  ^super.header:
    i32 %18 = phi [^while.body, i32 %12] [^while.body2, i32 %20];
    i32 %19 = phi [^while.body, i32 %10] [^while.body2, i32 %48];
    i32 %20 = add i32 %18, i32 4;
    i1 %21 = icmp slt i32 %20, i32 10;
    cbr i1 %21(prob = 0.89), ^while.body2, ^super.header1;
  ^b:
    ret i32 0;
  ^while.body2:
    i32* %22 = getelementptr &(i32* %0)[i32 %19];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %0)[i32 %18];
    i32 %25 = load i32* %24;
    i1 %26 = icmp sgt i32 %23, i32 %25;
    i32 %27 = select i1 %26 ? i32 %18 : i32 %19;
    i32* %28 = getelementptr &(i32* %0)[i32 %27];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %18, i32 1;
    i32* %31 = getelementptr &(i32* %0)[i32 %30];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sgt i32 %29, i32 %32;
    i32 %34 = select i1 %33 ? i32 %30 : i32 %27;
    i32* %35 = getelementptr &(i32* %0)[i32 %34];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %18, i32 2;
    i32* %38 = getelementptr &(i32* %0)[i32 %37];
    i32 %39 = load i32* %38;
    i1 %40 = icmp sgt i32 %36, i32 %39;
    i32 %41 = select i1 %40 ? i32 %37 : i32 %34;
    i32* %42 = getelementptr &(i32* %0)[i32 %41];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %18, i32 3;
    i32* %45 = getelementptr &(i32* %0)[i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = icmp sgt i32 %43, i32 %46;
    i32 %48 = select i1 %47 ? i32 %44 : i32 %41;
    ubr ^super.header;
  ^super.header1:
    i32 %49 = phi [^super.header, i32 %18] [^while.body3, i32 %51];
    i32 %50 = phi [^super.header, i32 %19] [^while.body3, i32 %79];
    i32 %51 = add i32 %49, i32 4;
    i1 %52 = icmp slt i32 %51, i32 10;
    cbr i1 %52(prob = 0.89), ^while.body3, ^super.header2;
  ^while.body3:
    i32* %53 = getelementptr &(i32* %0)[i32 %50];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %0)[i32 %49];
    i32 %56 = load i32* %55;
    i1 %57 = icmp sgt i32 %54, i32 %56;
    i32 %58 = select i1 %57 ? i32 %49 : i32 %50;
    i32* %59 = getelementptr &(i32* %0)[i32 %58];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %49, i32 1;
    i32* %62 = getelementptr &(i32* %0)[i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = icmp sgt i32 %60, i32 %63;
    i32 %65 = select i1 %64 ? i32 %61 : i32 %58;
    i32* %66 = getelementptr &(i32* %0)[i32 %65];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %49, i32 2;
    i32* %69 = getelementptr &(i32* %0)[i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = icmp sgt i32 %67, i32 %70;
    i32 %72 = select i1 %71 ? i32 %68 : i32 %65;
    i32* %73 = getelementptr &(i32* %0)[i32 %72];
    i32 %74 = load i32* %73;
    i32 %75 = add i32 %49, i32 3;
    i32* %76 = getelementptr &(i32* %0)[i32 %75];
    i32 %77 = load i32* %76;
    i1 %78 = icmp sgt i32 %74, i32 %77;
    i32 %79 = select i1 %78 ? i32 %75 : i32 %72;
    ubr ^super.header1;
  ^super.header2:
    i32 %80 = phi [^super.header1, i32 %49] [^while.body4, i32 %82];
    i32 %81 = phi [^super.header1, i32 %50] [^while.body4, i32 %110];
    i32 %82 = add i32 %80, i32 4;
    i1 %83 = icmp slt i32 %82, i32 10;
    cbr i1 %83(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32* %84 = getelementptr &(i32* %0)[i32 %81];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %0)[i32 %80];
    i32 %87 = load i32* %86;
    i1 %88 = icmp sgt i32 %85, i32 %87;
    i32 %89 = select i1 %88 ? i32 %80 : i32 %81;
    i32* %90 = getelementptr &(i32* %0)[i32 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %80, i32 1;
    i32* %93 = getelementptr &(i32* %0)[i32 %92];
    i32 %94 = load i32* %93;
    i1 %95 = icmp sgt i32 %91, i32 %94;
    i32 %96 = select i1 %95 ? i32 %92 : i32 %89;
    i32* %97 = getelementptr &(i32* %0)[i32 %96];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %80, i32 2;
    i32* %100 = getelementptr &(i32* %0)[i32 %99];
    i32 %101 = load i32* %100;
    i1 %102 = icmp sgt i32 %98, i32 %101;
    i32 %103 = select i1 %102 ? i32 %99 : i32 %96;
    i32* %104 = getelementptr &(i32* %0)[i32 %103];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %80, i32 3;
    i32* %107 = getelementptr &(i32* %0)[i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = icmp sgt i32 %105, i32 %108;
    i32 %110 = select i1 %109 ? i32 %106 : i32 %103;
    ubr ^super.header2;
  ^while.body5:
    i32 %111 = phi [^super.header2, i32 %80] [^while.body5, i32 %119];
    i32 %112 = phi [^super.header2, i32 %81] [^while.body5, i32 %118];
    i32* %113 = getelementptr &(i32* %0)[i32 %112];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %0)[i32 %111];
    i32 %116 = load i32* %115;
    i1 %117 = icmp sgt i32 %114, i32 %116;
    i32 %118 = select i1 %117 ? i32 %111 : i32 %112;
    i32 %119 = add i32 %111, i32 1;
    i1 %120 = icmp slt i32 %119, i32 10;
    cbr i1 %120(prob = 0.97), ^while.body5, ^b1;
  ^b1:
    i1 %121 = icmp neq i32 %10, i32 %118;
    cbr i1 %121(prob = 0.5), ^if.then, ^while.header;
  ^if.then:
    i32* %122 = getelementptr &(i32* %0)[i32 %118];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %0)[i32 %10];
    i32 %125 = load i32* %124;
    store i32* %122 with i32 %125;
    store i32* %124 with i32 %123;
    ubr ^while.header;
}
