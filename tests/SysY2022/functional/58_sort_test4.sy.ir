internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n1 with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %n with i32 10;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^b3, i32 %40] [^entry, i32 10];
    i32 %11 = phi [^b3, i32 %43] [^entry, i32 0];
    i32 %12 = phi [^b3, i32 %41] [^entry, i32 10];
    i32 %13 = add i32 %12, i32 -1;
    i1 %14 = scmp lt i32 %11, i32 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %15 = add i32 %11, i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %16 = phi [^while.header, i32 0] [^while.body1, i32 %20];
    i1 %17 = scmp lt i32 %16, i32 %10;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32* %18 = getelementptr &([10 * i32]* %a)[i64 0][i32 %16];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 10);
    i32 %20 = add i32 %16, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %21 = phi [^b2, i32 %38] [^while.body, i32 %11];
    i32 %22 = phi [^b2, i32 %39] [^while.body, i32 %15];
    i1 %23 = scmp lt i32 %22, i32 %12;
    cbr i1 %23(prob = 0.97), ^while.body2, ^b1;
^b:
    ret i32 0;
^while.body2:
    i32* %24 = getelementptr &(i32* %0)[i32 %21];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %0)[i32 %22];
    i32 %27 = load i32* %26;
    i1 %28 = scmp gt i32 %25, i32 %27;
    cbr i1 %28(prob = 0.5), ^if.then, ^b2;
^b1:
    i1 %29 = scmp neq i32 %21, i32 %11;
    cbr i1 %29(prob = 0.5), ^if.then1, ^b3;
^if.then:
    ubr ^b2;
^if.then1:
    i32* %30 = getelementptr &(i32* %0)[i32 %21];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %0)[i32 %11];
    i32 %33 = load i32* %32;
    store i32* %30 with i32 %33;
    i32 %34 = load i32* %i;
    i32* %35 = getelementptr &(i32* %0)[i32 %34];
    store i32* %35 with i32 %31;
    i32 %36 = load i32* %n1;
    i32 %37 = load i32* %n;
    ubr ^b3;
^b2:
    i32 %38 = phi [^while.body2, i32 %21] [^if.then, i32 %22];
    i32 %39 = add i32 %22, i32 1;
    ubr ^while.header2;
^b3:
    i32 %40 = phi [^if.then1, i32 %36] [^b1, i32 %10];
    i32 %41 = phi [^if.then1, i32 %37] [^b1, i32 %12];
    i32 %42 = phi [^b1, i32 %11] [^if.then1, i32 %34];
    i32 %43 = add i32 %42, i32 1;
    store i32* %i with i32 %43;
    ubr ^while.header;
}
