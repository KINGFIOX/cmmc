internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [16 * [16 * i32]]* @e, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [16 * i32]* %dis = alloc [16 * i32], align 8;
    [16 * i32]* %book = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %book)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %book)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %book)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %book)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %book)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %book)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %book)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %book)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %book)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %book)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %book)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %book)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %book)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %book)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %book)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %book)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %dis)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %dis)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %dis)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %dis)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %dis)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %dis)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %dis)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %dis)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %dis)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %dis)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %dis)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %dis)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %dis)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %dis)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %dis)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %dis)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32 %32 = call () -> i32 @getint();
    i32 %33 = call () -> i32 @getint();
    [16 * [16 * i32]]* %34 = ptrcast [16 * [16 * i32]]* @e to [16 * [16 * i32]]*;
    ubr ^while.header;
  ^while.header:
    i32 %35 = phi [^entry, i32 1] [^b, i32 %56];
    i1 %36 = icmp sge i32 %32, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.header1, ^while.header2;
  ^while.header1:
    [16 * i32]* %37 = getelementptr &([16 * [16 * i32]]* %34)[i64 0][i32 %35];
    ubr ^while.body;
  ^while.header2:
    i1 %38 = icmp sgt i32 %33, i32 0;
    cbr i1 %38(prob = 0.984615), ^while.body1, ^entry1;
  ^while.body:
    i32 %39 = phi [^while.header1, i32 1] [^while.body, i32 %43];
    i1 %40 = icmp eq i32 %35, i32 %39;
    i32 %41 = select i1 %40 ? i32 0 : i32 65535;
    i32* %42 = getelementptr &([16 * i32]* %37)[i64 0][i32 %39];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %39, i32 1;
    i1 %44 = icmp sge i32 %32, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body, ^b;
  ^while.body1:
    i32 %45 = phi [^while.header2, i32 1] [^while.body1, i32 %51];
    i32 %46 = call () -> i32 @getint();
    [16 * i32]* %47 = getelementptr &([16 * [16 * i32]]* %34)[i64 0][i32 %46];
    i32 %48 = call () -> i32 @getint();
    i32* %49 = getelementptr &([16 * i32]* %47)[i64 0][i32 %48];
    i32 %50 = call () -> i32 @getint();
    store i32* %49 with i32 %50;
    i32 %51 = add i32 %45, i32 1;
    i1 %52 = icmp sge i32 %33, i32 %51;
    cbr i1 %52(prob = 0.984615), ^while.body1, ^entry1;
  ^entry1:
    i1 %53 = icmp sgt i32 %32, i32 0;
    [16 * i32]* %54 = getelementptr &([16 * [16 * i32]]* %34)[i64 0][i64 1];
    i32 %55 = add i32 %32, i32 -1;
    cbr i1 %53(prob = 0.984615), ^while.body2, ^b1;
  ^b:
    i32 %56 = add i32 %35, i32 1;
    ubr ^while.header;
  ^b1:
    store i32* %1 with i32 1;
    ubr ^while.header3;
  ^while.body2:
    i32 %57 = phi [^entry1, i32 1] [^while.body2, i32 %62];
    i32* %58 = getelementptr &([16 * i32]* %54)[i64 0][i32 %57];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %57];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &([16 * i32]* %book)[i64 0][i32 %57];
    store i32* %61 with i32 0;
    i32 %62 = add i32 %57, i32 1;
    i1 %63 = icmp sge i32 %32, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.body2, ^b1;
  ^while.header3:
    i32 %64 = phi [^b1, i32 1] [^b7, i32 %89];
    i1 %65 = icmp sge i32 %55, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.header4, ^b2;
  ^while.header4:
    i32 %66 = phi [^while.header3, i32 65535] [^b6, i32 %84];
    i32 %67 = phi [^while.header3, i32 0] [^b6, i32 %85];
    i32 %68 = phi [^while.header3, i32 1] [^b6, i32 %86];
    i1 %69 = icmp sge i32 %32, i32 %68;
    cbr i1 %69(prob = 0.984615), ^while.body3, ^b3;
  ^b2:
    cbr i1 %53(prob = 0.984615), ^while.body4, ^b4;
  ^b3:
    i32* %70 = getelementptr &([16 * i32]* %book)[i64 0][i32 %67];
    store i32* %70 with i32 1;
    ubr ^while.header5;
  ^while.body3:
    i32* %71 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %68];
    i32 %72 = load i32* %71;
    i1 %73 = icmp sgt i32 %66, i32 %72;
    cbr i1 %73(prob = 0.5), ^b5, ^b6;
  ^while.body4:
    i32 %74 = phi [^b2, i32 1] [^while.body4, i32 %77];
    i32* %75 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 32);
    i32 %77 = add i32 %74, i32 1;
    i1 %78 = icmp sge i32 %32, i32 %77;
    cbr i1 %78(prob = 0.984615), ^while.body4, ^b4;
  ^b4:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b5:
    i32* %79 = getelementptr &([16 * i32]* %book)[i64 0][i32 %68];
    i32 %80 = load i32* %79;
    i1 %81 = icmp eq i32 %80, i32 0;
    i32 %82 = select i1 %81 ? i32 %72 : i32 %66;
    i32 %83 = select i1 %81 ? i32 %68 : i32 %67;
    ubr ^b6;
  ^b6:
    i32 %84 = phi [^while.body3, i32 %66] [^b5, i32 %82];
    i32 %85 = phi [^while.body3, i32 %67] [^b5, i32 %83];
    i32 %86 = add i32 %68, i32 1;
    ubr ^while.header4;
  ^while.header5:
    i32 %87 = phi [^b3, i32 1] [^b8, i32 %94];
    i1 %88 = icmp sge i32 %32, i32 %87;
    cbr i1 %88(prob = 0.984615), ^while.body5, ^b7;
  ^b7:
    i32 %89 = add i32 %64, i32 1;
    ubr ^while.header3;
  ^while.body5:
    [16 * i32]* %90 = getelementptr &([16 * [16 * i32]]* %34)[i64 0][i32 %67];
    i32* %91 = getelementptr &([16 * i32]* %90)[i64 0][i32 %87];
    i32 %92 = load i32* %91;
    i1 %93 = icmp slt i32 %92, i32 65535;
    cbr i1 %93(prob = 0.5), ^if.then, ^b8;
  ^b8:
    i32 %94 = add i32 %87, i32 1;
    ubr ^while.header5;
  ^if.then:
    i32* %95 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %87];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %67];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %92, i32 %98;
    i1 %100 = icmp sgt i32 %96, i32 %99;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b8;
  ^if.then1:
    store i32* %95 with i32 %99;
    ubr ^b8;
}
