internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [16 * [16 * i32]]* @e, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [16 * i32]* %dis = alloc [16 * i32], align 8;
    [16 * i32]* %book = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %book)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %book)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %book)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %book)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %book)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %book)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %book)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %book)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %book)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %book)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %book)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %book)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %book)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %book)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %book)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %book)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %dis)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %dis)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %dis)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %dis)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %dis)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %dis)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %dis)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %dis)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %dis)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %dis)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %dis)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %dis)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %dis)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %dis)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %dis)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %dis)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32 %32 = call () -> i32 @getint();
    i1 %33 = icmp sgt i32 %32, i32 0;
    i32 %34 = call () -> i32 @getint();
    [16 * [16 * i32]]* %35 = ptrcast [16 * [16 * i32]]* @e to [16 * [16 * i32]]*;
    cbr i1 %33(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %36 = phi [^entry, i32 1] [^b2, i32 %54];
    [16 * i32]* %37 = getelementptr &([16 * [16 * i32]]* %35)[i64 0][i32 %36];
    ubr ^while.body1;
  ^b:
    i1 %38 = icmp sgt i32 %34, i32 0;
    cbr i1 %38(prob = 0.984615), ^while.body2, ^b1;
  ^while.body1:
    i32 %39 = phi [^while.body, i32 1] [^while.body1, i32 %43];
    i1 %40 = icmp eq i32 %36, i32 %39;
    i32 %41 = select i1 %40 ? i32 0 : i32 65535;
    i32* %42 = getelementptr &([16 * i32]* %37)[i64 0][i32 %39];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %39, i32 1;
    i1 %44 = icmp sge i32 %32, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body1, ^b2;
  ^while.body2:
    i32 %45 = phi [^b, i32 1] [^while.body2, i32 %51];
    i32 %46 = call () -> i32 @getint();
    [16 * i32]* %47 = getelementptr &([16 * [16 * i32]]* %35)[i64 0][i32 %46];
    i32 %48 = call () -> i32 @getint();
    i32* %49 = getelementptr &([16 * i32]* %47)[i64 0][i32 %48];
    i32 %50 = call () -> i32 @getint();
    store i32* %49 with i32 %50;
    i32 %51 = add i32 %45, i32 1;
    i1 %52 = icmp sge i32 %34, i32 %51;
    cbr i1 %52(prob = 0.984615), ^while.body2, ^b1;
  ^b1:
    [16 * i32]* %53 = getelementptr &([16 * [16 * i32]]* %35)[i64 0][i64 1];
    cbr i1 %33(prob = 0.984615), ^while.body3, ^b3;
  ^b2:
    i32 %54 = add i32 %36, i32 1;
    i1 %55 = icmp sge i32 %32, i32 %54;
    cbr i1 %55(prob = 0.984615), ^while.body, ^b;
  ^while.body3:
    i32 %56 = phi [^b1, i32 1] [^while.body3, i32 %61];
    i32* %57 = getelementptr &([16 * i32]* %53)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %56];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &([16 * i32]* %book)[i64 0][i32 %56];
    store i32* %60 with i32 0;
    i32 %61 = add i32 %56, i32 1;
    i1 %62 = icmp sge i32 %32, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body3, ^b3;
  ^b3:
    i32 %63 = add i32 %32, i32 -1;
    i1 %64 = icmp sgt i32 %63, i32 0;
    store i32* %1 with i32 1;
    cbr i1 %64(prob = 0.984615), ^while.body4, ^b4;
  ^while.body4:
    i32 %65 = phi [^b3, i32 1] [^b9, i32 %94];
    cbr i1 %33(prob = 0.984615), ^while.body5, ^b5;
  ^b4:
    cbr i1 %33(prob = 0.984615), ^while.body6, ^b6;
  ^while.body5:
    i32 %66 = phi [^while.body4, i32 1] [^b8, i32 %88];
    i32 %67 = phi [^while.body4, i32 0] [^b8, i32 %87];
    i32 %68 = phi [^while.body4, i32 65535] [^b8, i32 %86];
    i32* %69 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %66];
    i32 %70 = load i32* %69;
    i1 %71 = icmp sgt i32 %68, i32 %70;
    cbr i1 %71(prob = 0.5), ^b7, ^b8;
  ^b5:
    i32 %72 = phi [^while.body4, i32 0] [^b8, i32 %87];
    i32* %73 = getelementptr &([16 * i32]* %book)[i64 0][i32 %72];
    store i32* %73 with i32 1;
    [16 * i32]* %74 = getelementptr &([16 * [16 * i32]]* %35)[i64 0][i32 %72];
    i32* %75 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %72];
    cbr i1 %33(prob = 0.984615), ^while.body7, ^b9;
  ^while.body6:
    i32 %76 = phi [^b4, i32 1] [^while.body6, i32 %79];
    i32* %77 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    call (i32) -> void @putch(i32 32);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp sge i32 %32, i32 %79;
    cbr i1 %80(prob = 0.984615), ^while.body6, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b7:
    i32* %81 = getelementptr &([16 * i32]* %book)[i64 0][i32 %66];
    i32 %82 = load i32* %81;
    i1 %83 = icmp eq i32 %82, i32 0;
    i32 %84 = select i1 %83 ? i32 %70 : i32 %68;
    i32 %85 = select i1 %83 ? i32 %66 : i32 %67;
    ubr ^b8;
  ^b8:
    i32 %86 = phi [^while.body5, i32 %68] [^b7, i32 %84];
    i32 %87 = phi [^while.body5, i32 %67] [^b7, i32 %85];
    i32 %88 = add i32 %66, i32 1;
    i1 %89 = icmp sge i32 %32, i32 %88;
    cbr i1 %89(prob = 0.984615), ^while.body5, ^b5;
  ^while.body7:
    i32 %90 = phi [^b5, i32 1] [^b10, i32 %101];
    i32* %91 = getelementptr &([16 * i32]* %74)[i64 0][i32 %90];
    i32 %92 = load i32* %91;
    i1 %93 = icmp slt i32 %92, i32 65535;
    cbr i1 %93(prob = 0.5), ^if.then, ^b10;
  ^b9:
    i32 %94 = add i32 %65, i32 1;
    i1 %95 = icmp sge i32 %63, i32 %94;
    cbr i1 %95(prob = 0.984615), ^while.body4, ^b4;
  ^if.then:
    i32* %96 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %90];
    i32 %97 = load i32* %96;
    i32 %98 = load i32* %75;
    i32 %99 = add i32 %92, i32 %98;
    i1 %100 = icmp sgt i32 %97, i32 %99;
    cbr i1 %100(prob = 0.5), ^if.then1, ^b10;
  ^b10:
    i32 %101 = add i32 %90, i32 1;
    i1 %102 = icmp sge i32 %32, i32 %101;
    cbr i1 %102(prob = 0.984615), ^while.body7, ^b9;
  ^if.then1:
    store i32* %96 with i32 %99;
    ubr ^b10;
}
