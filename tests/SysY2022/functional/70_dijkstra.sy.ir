internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [16 * [16 * i32]]* @e, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [16 * i32]* %dis = alloc [16 * i32], align 8;
    [16 * i32]* %book = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %book)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %book)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %book)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %book)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %book)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %book)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %book)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %book)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %book)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %book)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %book)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %book)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %book)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %book)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %book)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %book)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %dis)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %dis)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %dis)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %dis)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %dis)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %dis)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %dis)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %dis)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %dis)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %dis)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %dis)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %dis)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %dis)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %dis)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %dis)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %dis)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32 %32 = call () -> i32 @getint();
    i32 %33 = add i32 %32, i32 1;
    i1 %34 = icmp sgt i32 %33, i32 4;
    i32 %35 = add i32 %32, i32 -2;
    i1 %36 = icmp sgt i32 %35, i32 16;
    i1 %37 = icmp sgt i32 %32, i32 0;
    i32 %38 = add i32 %32, i32 -17;
    i32 %39 = call () -> i32 @getint();
    [16 * [16 * i32]]* %40 = ptrcast [16 * [16 * i32]]* @e to [16 * [16 * i32]]*;
    cbr i1 %37(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %41 = phi [^entry, i32 1] [^scalar.final, i32 %131];
    [16 * i32]* %42 = getelementptr &([16 * [16 * i32]]* %40)[i64 0][i32 %41];
    cbr i1 %34(prob = 0.941176), ^super.header, ^scalar.header;
  ^b:
    i1 %43 = icmp sgt i32 %39, i32 0;
    cbr i1 %43(prob = 0.984615), ^indirect, ^b1;
  ^indirect:
    i32 %44 = add i32 %39, i32 1;
    ubr ^while.body2;
  ^super.header:
    cbr i1 %36(prob = 0.941176), ^while.body1, ^scalar.header1;
  ^scalar.header:
    i32 %45 = phi [^while.body, i32 1] [^scalar.header1, i32 %114] [^while.body4, i32 %151];
    i1 %46 = icmp sgt i32 %33, i32 %45;
    cbr i1 %46(prob = 0.75), ^while.body3, ^scalar.final;
  ^b1:
    cbr i1 %37(prob = 0.984615), ^super.header1, ^b2;
  ^while.body1:
    i32 %47 = phi [^super.header, i32 1] [^while.body1, i32 %111];
    i1 %48 = icmp eq i32 %41, i32 %47;
    i32 %49 = select i1 %48 ? i32 0 : i32 65535;
    i32* %50 = getelementptr &([16 * i32]* %42)[i64 0][i32 %47];
    store i32* %50 with i32 %49;
    i32 %51 = add i32 %47, i32 1;
    i1 %52 = icmp eq i32 %41, i32 %51;
    i32 %53 = select i1 %52 ? i32 0 : i32 65535;
    i32* %54 = getelementptr &(i32* %50)[i64 1];
    store i32* %54 with i32 %53;
    i32 %55 = add i32 %47, i32 2;
    i1 %56 = icmp eq i32 %41, i32 %55;
    i32 %57 = select i1 %56 ? i32 0 : i32 65535;
    i32* %58 = getelementptr &(i32* %50)[i64 2];
    store i32* %58 with i32 %57;
    i32 %59 = add i32 %47, i32 3;
    i1 %60 = icmp eq i32 %41, i32 %59;
    i32 %61 = select i1 %60 ? i32 0 : i32 65535;
    i32* %62 = getelementptr &(i32* %50)[i64 3];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %47, i32 4;
    i1 %64 = icmp eq i32 %41, i32 %63;
    i32 %65 = select i1 %64 ? i32 0 : i32 65535;
    i32* %66 = getelementptr &(i32* %50)[i64 4];
    store i32* %66 with i32 %65;
    i32 %67 = add i32 %47, i32 5;
    i1 %68 = icmp eq i32 %41, i32 %67;
    i32 %69 = select i1 %68 ? i32 0 : i32 65535;
    i32* %70 = getelementptr &(i32* %50)[i64 5];
    store i32* %70 with i32 %69;
    i32 %71 = add i32 %47, i32 6;
    i1 %72 = icmp eq i32 %41, i32 %71;
    i32 %73 = select i1 %72 ? i32 0 : i32 65535;
    i32* %74 = getelementptr &(i32* %50)[i64 6];
    store i32* %74 with i32 %73;
    i32 %75 = add i32 %47, i32 7;
    i1 %76 = icmp eq i32 %41, i32 %75;
    i32 %77 = select i1 %76 ? i32 0 : i32 65535;
    i32* %78 = getelementptr &(i32* %50)[i64 7];
    store i32* %78 with i32 %77;
    i32 %79 = add i32 %47, i32 8;
    i1 %80 = icmp eq i32 %41, i32 %79;
    i32 %81 = select i1 %80 ? i32 0 : i32 65535;
    i32* %82 = getelementptr &(i32* %50)[i64 8];
    store i32* %82 with i32 %81;
    i32 %83 = add i32 %47, i32 9;
    i1 %84 = icmp eq i32 %41, i32 %83;
    i32 %85 = select i1 %84 ? i32 0 : i32 65535;
    i32* %86 = getelementptr &(i32* %50)[i64 9];
    store i32* %86 with i32 %85;
    i32 %87 = add i32 %47, i32 10;
    i1 %88 = icmp eq i32 %41, i32 %87;
    i32 %89 = select i1 %88 ? i32 0 : i32 65535;
    i32* %90 = getelementptr &(i32* %50)[i64 10];
    store i32* %90 with i32 %89;
    i32 %91 = add i32 %47, i32 11;
    i1 %92 = icmp eq i32 %41, i32 %91;
    i32 %93 = select i1 %92 ? i32 0 : i32 65535;
    i32* %94 = getelementptr &(i32* %50)[i64 11];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %47, i32 12;
    i1 %96 = icmp eq i32 %41, i32 %95;
    i32 %97 = select i1 %96 ? i32 0 : i32 65535;
    i32* %98 = getelementptr &(i32* %50)[i64 12];
    store i32* %98 with i32 %97;
    i32 %99 = add i32 %47, i32 13;
    i1 %100 = icmp eq i32 %41, i32 %99;
    i32 %101 = select i1 %100 ? i32 0 : i32 65535;
    i32* %102 = getelementptr &(i32* %50)[i64 13];
    store i32* %102 with i32 %101;
    i32 %103 = add i32 %47, i32 14;
    i1 %104 = icmp eq i32 %41, i32 %103;
    i32 %105 = select i1 %104 ? i32 0 : i32 65535;
    i32* %106 = getelementptr &(i32* %50)[i64 14];
    store i32* %106 with i32 %105;
    i32 %107 = add i32 %47, i32 15;
    i1 %108 = icmp eq i32 %41, i32 %107;
    i32 %109 = select i1 %108 ? i32 0 : i32 65535;
    i32* %110 = getelementptr &(i32* %50)[i64 15];
    store i32* %110 with i32 %109;
    i32 %111 = add i32 %47, i32 16;
    i1 %112 = icmp sgt i32 %38, i32 %111;
    cbr i1 %112(prob = 0.941176), ^while.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %113 = phi [^super.header, i32 1] [^while.body1, i32 %111];
    i32 %114 = phi [^super.header, i32 undef] [^while.body1, i32 %111];
    i1 %115 = icmp sgt i32 %35, i32 %113;
    cbr i1 %115(prob = 0.75), ^while.body4, ^scalar.header;
  ^while.body2:
    i32 %116 = phi [^indirect, i32 1] [^while.body2, i32 %122];
    i32 %117 = call () -> i32 @getint();
    [16 * i32]* %118 = getelementptr &([16 * [16 * i32]]* %40)[i64 0][i32 %117];
    i32 %119 = call () -> i32 @getint();
    i32* %120 = getelementptr &([16 * i32]* %118)[i64 0][i32 %119];
    i32 %121 = call () -> i32 @getint();
    store i32* %120 with i32 %121;
    i32 %122 = add i32 %116, i32 1;
    i1 %123 = icmp sgt i32 %44, i32 %122;
    cbr i1 %123(prob = 0.984615), ^while.body2, ^b1;
  ^while.body3 {scalar}:
    i32 %124 = phi [^scalar.header, i32 %45] [^while.body3, i32 %128];
    i1 %125 = icmp eq i32 %41, i32 %124;
    i32 %126 = select i1 %125 ? i32 0 : i32 65535;
    i32* %127 = getelementptr &([16 * i32]* %42)[i64 0][i32 %124];
    store i32* %127 with i32 %126;
    i32 %128 = add i32 %124, i32 1;
    i1 %129 = icmp sgt i32 %33, i32 %128;
    cbr i1 %129(prob = 0.75), ^while.body3, ^scalar.final;
  ^super.header1:
    [16 * i32]* %130 = getelementptr &([16 * [16 * i32]]* %40)[i64 0][i64 1];
    cbr i1 %34(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^scalar.final:
    i32 %131 = add i32 %41, i32 1;
    i1 %132 = icmp sgt i32 %33, i32 %131;
    cbr i1 %132(prob = 0.984615), ^while.body, ^b;
  ^b2:
    i32 %133 = add i32 %32, i32 -1;
    i1 %134 = icmp sgt i32 %133, i32 0;
    store i32* %1 with i32 1;
    cbr i1 %134(prob = 0.984615), ^while.body6, ^b3;
  ^while.body4 {scalar}:
    i32 %135 = phi [^scalar.header1, i32 %113] [^while.body4, i32 %151];
    i1 %136 = icmp eq i32 %41, i32 %135;
    i32 %137 = select i1 %136 ? i32 0 : i32 65535;
    i32* %138 = getelementptr &([16 * i32]* %42)[i64 0][i32 %135];
    store i32* %138 with i32 %137;
    i32 %139 = add i32 %135, i32 1;
    i1 %140 = icmp eq i32 %41, i32 %139;
    i32 %141 = select i1 %140 ? i32 0 : i32 65535;
    i32* %142 = getelementptr &(i32* %138)[i64 1];
    store i32* %142 with i32 %141;
    i32 %143 = add i32 %135, i32 2;
    i1 %144 = icmp eq i32 %41, i32 %143;
    i32 %145 = select i1 %144 ? i32 0 : i32 65535;
    i32* %146 = getelementptr &(i32* %138)[i64 2];
    store i32* %146 with i32 %145;
    i32 %147 = add i32 %135, i32 3;
    i1 %148 = icmp eq i32 %41, i32 %147;
    i32 %149 = select i1 %148 ? i32 0 : i32 65535;
    i32* %150 = getelementptr &(i32* %138)[i64 3];
    store i32* %150 with i32 %149;
    i32 %151 = add i32 %135, i32 4;
    i1 %152 = icmp sgt i32 %35, i32 %151;
    cbr i1 %152(prob = 0.75), ^while.body4, ^scalar.header;
  ^while.body5:
    i32 %153 = phi [^super.header1, i32 1] [^while.body5, i32 %170];
    i32* %154 = getelementptr &([16 * i32]* %130)[i64 0][i32 %153];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %153];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &([16 * i32]* %book)[i64 0][i32 %153];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %154)[i64 1];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %156)[i64 1];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %157)[i64 1];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %154)[i64 2];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %156)[i64 2];
    store i32* %164 with i32 %163;
    i32* %165 = getelementptr &(i32* %157)[i64 2];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %154)[i64 3];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %156)[i64 3];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %157)[i64 3];
    store i32* %169 with i32 0;
    i32 %170 = add i32 %153, i32 4;
    i1 %171 = icmp sgt i32 %35, i32 %170;
    cbr i1 %171(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^scalar.header2:
    i32 %172 = phi [^super.header1, i32 1] [^while.body5, i32 %170];
    i1 %173 = icmp sgt i32 %33, i32 %172;
    cbr i1 %173(prob = 0.75), ^while.body7, ^b2;
  ^while.body6:
    i32 %174 = phi [^b2, i32 1] [^b9, i32 %210];
    cbr i1 %37(prob = 0.984615), ^while.body8, ^b4;
  ^b3:
    cbr i1 %37(prob = 0.984615), ^while.body9, ^b5;
  ^while.body7 {scalar}:
    i32 %175 = phi [^scalar.header2, i32 %172] [^while.body7, i32 %180];
    i32* %176 = getelementptr &([16 * i32]* %130)[i64 0][i32 %175];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %175];
    store i32* %178 with i32 %177;
    i32* %179 = getelementptr &([16 * i32]* %book)[i64 0][i32 %175];
    store i32* %179 with i32 0;
    i32 %180 = add i32 %175, i32 1;
    i1 %181 = icmp sgt i32 %33, i32 %180;
    cbr i1 %181(prob = 0.75), ^while.body7, ^b2;
  ^while.body8:
    i32 %182 = phi [^while.body6, i32 1] [^b8, i32 %208];
    i32 %183 = phi [^while.body6, i32 0] [^b8, i32 %207];
    i32 %184 = phi [^while.body6, i32 65535] [^b8, i32 %206];
    i32* %185 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %182];
    i32 %186 = load i32* %185;
    i1 %187 = icmp sgt i32 %184, i32 %186;
    cbr i1 %187(prob = 0.5), ^b6, ^b8;
  ^b4:
    i32 %188 = phi [^while.body6, i32 0] [^b8, i32 %207];
    i32* %189 = getelementptr &([16 * i32]* %book)[i64 0][i32 %188];
    store i32* %189 with i32 1;
    [16 * i32]* %190 = getelementptr &([16 * [16 * i32]]* %40)[i64 0][i32 %188];
    i32* %191 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %188];
    cbr i1 %37(prob = 0.984615), ^b7, ^b9;
  ^while.body9:
    i32 %192 = phi [^b3, i32 1] [^while.body9, i32 %195];
    i32* %193 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %192];
    i32 %194 = load i32* %193;
    call (i32) -> void @putint(i32 %194);
    call (i32) -> void @putch(i32 32);
    i32 %195 = add i32 %192, i32 1;
    i1 %196 = icmp sgt i32 %33, i32 %195;
    cbr i1 %196(prob = 0.984615), ^while.body9, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^b6:
    i32* %197 = getelementptr &([16 * i32]* %book)[i64 0][i32 %182];
    i32 %198 = load i32* %197;
    i1 %199 = icmp eq i32 %198, i32 0;
    i32 %200 = select i1 %199 ? i32 %186 : i32 %184;
    i32 %201 = select i1 %199 ? i32 %182 : i32 %183;
    ubr ^b8;
  ^b7:
    i32 %202 = phi [^b4, i32 1] [^b10, i32 %217];
    i32* %203 = getelementptr &([16 * i32]* %190)[i64 0][i32 %202];
    i32 %204 = load i32* %203;
    i1 %205 = icmp slt i32 %204, i32 65535;
    cbr i1 %205(prob = 0.5), ^if.then, ^b10;
  ^b8:
    i32 %206 = phi [^while.body8, i32 %184] [^b6, i32 %200];
    i32 %207 = phi [^while.body8, i32 %183] [^b6, i32 %201];
    i32 %208 = add i32 %182, i32 1;
    i1 %209 = icmp sgt i32 %33, i32 %208;
    cbr i1 %209(prob = 0.984615), ^while.body8, ^b4;
  ^b9:
    i32 %210 = add i32 %174, i32 1;
    i1 %211 = icmp sgt i32 %32, i32 %210;
    cbr i1 %211(prob = 0.984615), ^while.body6, ^b3;
  ^if.then:
    i32* %212 = getelementptr &([16 * i32]* %dis)[i64 0][i32 %202];
    i32 %213 = load i32* %212;
    i32 %214 = load i32* %191;
    i32 %215 = add i32 %204, i32 %214;
    i1 %216 = icmp sgt i32 %213, i32 %215;
    cbr i1 %216(prob = 0.5), ^if.then1, ^b10;
  ^b10:
    i32 %217 = add i32 %202, i32 1;
    i1 %218 = icmp sgt i32 %33, i32 %217;
    cbr i1 %218(prob = 0.984615), ^b7, ^b9;
  ^if.then1:
    store i32* %212 with i32 %215;
    ubr ^b10;
}
