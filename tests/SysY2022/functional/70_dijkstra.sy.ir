internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @INF { ReadOnly } = 65535;
internal [16 * [16 * i32]]* @e;
internal [16 * i32]* @book;
internal [16 * i32]* @dis;
internal i32* @n;
internal i32* @m;
internal i32* @v1;
internal i32* @v2;
internal i32* @w;
internal func @Dijkstra() -> void {
^entry:
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i32* %min_inde = alloc i32;
    i32* %min_num = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %j1 with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %6];
    [16 * i32]* %8 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 1];
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([16 * i32]* %8)[i64 0][i64 %10];
    i32 %12 = load i32* %11;
    store i32* %7 with i32 %12;
    i32 %13 = load i32* %i;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = getelementptr &([16 * i32]* @book)[i64 0][i64 %14];
    store i32* %15 with i32 0;
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    store i32* %i with i32 %17;
    ubr ^while.header;
^b:
    i32* %18 = getelementptr &([16 * i32]* @book)[i64 0][i64 1];
    store i32* %18 with i32 1;
    store i32* %i with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %19 = load i32* %i;
    i32 %20 = load i32* @n;
    i32 %21 = sub i32 %20, i32 1;
    i1 %22 = scmp le i32 %19, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %min_num with i32 65535;
    store i32* %min_inde with i32 0;
    store i32* %k with i32 1;
    ubr ^while.header2;
^b1:
    ret;
^while.header2:
    i32 %25 = load i32* %k;
    i32 %26 = load i32* @n;
    i1 %27 = scmp le i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b2;
^b2:
    i32 %30 = load i32* %min_inde;
    i64 %31 = sext i32 %30 to i64;
    i32* %32 = getelementptr &([16 * i32]* @book)[i64 0][i64 %31];
    store i32* %32 with i32 1;
    store i32* %j with i32 1;
    ubr ^while.header3;
^while.body2:
    i32 %33 = load i32* %min_num;
    i32 %34 = load i32* %k;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %35];
    i32 %37 = load i32* %36;
    i1 %38 = scmp gt i32 %33, i32 %37;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.5), ^b3, ^b4;
^b3:
    i32 %41 = load i32* %k;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([16 * i32]* @book)[i64 0][i64 %42];
    i32 %44 = load i32* %43;
    i1 %45 = scmp eq i32 %44, i32 0;
    i32 %46 = zext i1 %45 to i32;
    i1 %47 = scmp neq i32 %46, i32 0;
    ubr ^b4;
^b4:
    i1 %48 = phi [^b3, i1 %47] [^while.body2, i1 false];
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^if.then, ^b5;
^while.header3:
    i32 %51 = load i32* %j;
    i32 %52 = load i32* @n;
    i1 %53 = scmp le i32 %51, i32 %52;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body3, ^b6;
^if.then:
    i32 %56 = load i32* %k;
    i64 %57 = sext i32 %56 to i64;
    i32* %58 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %57];
    i32 %59 = load i32* %58;
    store i32* %min_num with i32 %59;
    i32 %60 = load i32* %k;
    store i32* %min_inde with i32 %60;
    ubr ^b5;
^b5:
    i32 %61 = load i32* %k;
    i32 %62 = add i32 %61, i32 1;
    store i32* %k with i32 %62;
    ubr ^while.header2;
^b6:
    i32 %63 = load i32* %i;
    i32 %64 = add i32 %63, i32 1;
    store i32* %i with i32 %64;
    ubr ^while.header1;
^while.body3:
    i32 %65 = load i32* %min_inde;
    i64 %66 = sext i32 %65 to i64;
    [16 * i32]* %67 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %66];
    i32 %68 = load i32* %j;
    i64 %69 = sext i32 %68 to i64;
    i32* %70 = getelementptr &([16 * i32]* %67)[i64 0][i64 %69];
    i32 %71 = load i32* %70;
    i1 %72 = scmp lt i32 %71, i32 65535;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then1, ^b7;
^b7:
    i32 %75 = load i32* %j;
    i32 %76 = add i32 %75, i32 1;
    store i32* %j with i32 %76;
    ubr ^while.header3;
^if.then1:
    i32 %77 = load i32* %j;
    i64 %78 = sext i32 %77 to i64;
    i32* %79 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %78];
    i32 %80 = load i32* %79;
    i32 %81 = load i32* %min_inde;
    i64 %82 = sext i32 %81 to i64;
    i32* %83 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %82];
    i32 %84 = load i32* %83;
    i32 %85 = load i32* %min_inde;
    i64 %86 = sext i32 %85 to i64;
    [16 * i32]* %87 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %86];
    i32 %88 = load i32* %j;
    i64 %89 = sext i32 %88 to i64;
    i32* %90 = getelementptr &([16 * i32]* %87)[i64 0][i64 %89];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %84, i32 %91;
    i1 %93 = scmp gt i32 %80, i32 %92;
    i32 %94 = zext i1 %93 to i32;
    i1 %95 = scmp neq i32 %94, i32 0;
    cbr i1 %95(prob = 0.5), ^if.then2, ^b8;
^if.then2:
    i32 %96 = load i32* %j;
    i64 %97 = sext i32 %96 to i64;
    i32* %98 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %97];
    i32 %99 = load i32* %min_inde;
    i64 %100 = sext i32 %99 to i64;
    i32* %101 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %100];
    i32 %102 = load i32* %101;
    i32 %103 = load i32* %min_inde;
    i64 %104 = sext i32 %103 to i64;
    [16 * i32]* %105 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %104];
    i32 %106 = load i32* %j;
    i64 %107 = sext i32 %106 to i64;
    i32* %108 = getelementptr &([16 * i32]* %105)[i64 0][i64 %107];
    i32 %109 = load i32* %108;
    i32 %110 = add i32 %102, i32 %109;
    store i32* %98 with i32 %110;
    ubr ^b8;
^b8:
    ubr ^b7;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %v = alloc i32;
    i32* %u = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* @n with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @m with i32 %1;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* @n;
    i1 %4 = scmp le i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 1;
    ubr ^while.header1;
^b:
    store i32* %i with i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %7 = load i32* %j;
    i32 %8 = load i32* @n;
    i1 %9 = scmp le i32 %7, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body2, ^b1;
^while.header2:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* @m;
    i1 %14 = scmp le i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b2;
^b1:
    i32 %17 = load i32* %i;
    i32 %18 = add i32 %17, i32 1;
    store i32* %i with i32 %18;
    ubr ^while.header;
^while.body1:
    i32 %19 = call () -> i32 @getint();
    store i32* %u with i32 %19;
    i32 %20 = call () -> i32 @getint();
    store i32* %v with i32 %20;
    i32 %21 = load i32* %u;
    i64 %22 = sext i32 %21 to i64;
    [16 * i32]* %23 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %22];
    i32 %24 = load i32* %v;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = getelementptr &([16 * i32]* %23)[i64 0][i64 %25];
    i32 %27 = call () -> i32 @getint();
    store i32* %26 with i32 %27;
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %i with i32 %29;
    ubr ^while.header2;
^while.body2:
    i32 %30 = load i32* %i;
    i32 %31 = load i32* %j;
    i1 %32 = scmp eq i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then, ^if.else;
^b2:
    call () -> void @Dijkstra();
    store i32* %i with i32 1;
    ubr ^while.header3;
^if.then:
    i32 %35 = load i32* %i;
    i64 %36 = sext i32 %35 to i64;
    [16 * i32]* %37 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %36];
    i32 %38 = load i32* %j;
    i64 %39 = sext i32 %38 to i64;
    i32* %40 = getelementptr &([16 * i32]* %37)[i64 0][i64 %39];
    store i32* %40 with i32 0;
    ubr ^b3;
^if.else:
    i32 %41 = load i32* %i;
    i64 %42 = sext i32 %41 to i64;
    [16 * i32]* %43 = getelementptr &([16 * [16 * i32]]* @e)[i64 0][i64 %42];
    i32 %44 = load i32* %j;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([16 * i32]* %43)[i64 0][i64 %45];
    store i32* %46 with i32 65535;
    ubr ^b3;
^while.header3:
    i32 %47 = load i32* %i;
    i32 %48 = load i32* @n;
    i1 %49 = scmp le i32 %47, i32 %48;
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b4;
^b3:
    i32 %52 = load i32* %j;
    i32 %53 = add i32 %52, i32 1;
    store i32* %j with i32 %53;
    ubr ^while.header1;
^while.body3:
    i32 %54 = load i32* %i;
    i64 %55 = sext i32 %54 to i64;
    i32* %56 = getelementptr &([16 * i32]* @dis)[i64 0][i64 %55];
    i32 %57 = load i32* %56;
    call (i32) -> void @putint(i32 %57);
    call (i32) -> void @putch(i32 32);
    i32 %58 = load i32* %i;
    i32 %59 = add i32 %58, i32 1;
    store i32* %i with i32 %59;
    ubr ^while.header3;
^b4:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
