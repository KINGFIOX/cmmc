internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @k;
func @main() -> i32 { Entry } {
^entry:
    i32* %g = alloc i32;
    i32* %l = alloc i32;
    i32* %g1 = alloc i32;
    i32* %k = alloc i32;
    store i32* @k with i32 3389;
    i32 %0 = load i32* @k;
    i1 %1 = scmp lt i32 %0, i32 10000;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %4 = load i32* @k;
    i32 %5 = add i32 %4, i32 1;
    store i32* @k with i32 %5;
    store i32* %k with i32 112;
    ubr ^while.header;
^b:
    i32 %6 = load i32* @k;
    ret i32 %6;
^while.header:
    i32 %7 = load i32* %k;
    i1 %8 = scmp gt i32 %7, i32 10;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %11 = load i32* %k;
    call (i32) -> void @putint(i32 %11);
    ubr ^b;
^while.body:
    i32 %12 = load i32* %k;
    i32 %13 = sub i32 %12, i32 88;
    store i32* %k with i32 %13;
    i32 %14 = load i32* %k;
    i1 %15 = scmp lt i32 %14, i32 1000;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    store i32* %g1 with i32 9;
    store i32* %l with i32 11;
    store i32* %g1 with i32 10;
    i32 %18 = load i32* %k;
    i32 %19 = load i32* %g1;
    i32 %20 = sub i32 %18, i32 %19;
    store i32* %k with i32 %20;
    store i32* %g with i32 11;
    i32 %21 = load i32* %k;
    i32 %22 = load i32* %g;
    i32 %23 = add i32 %21, i32 %22;
    i32 %24 = load i32* %l;
    i32 %25 = add i32 %23, i32 %24;
    store i32* %k with i32 %25;
    ubr ^b2;
^b2:
    ubr ^while.header;
}
