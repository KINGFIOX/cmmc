internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @FourWhile() -> i32 {
^entry:
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %b with i32 6;
    store i32* %c with i32 7;
    store i32* %d with i32 0;
    store i32* %d with i32 10;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i1 %1 = scmp lt i32 %0, i32 20;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = load i32* %a;
    i32 %5 = add i32 %4, i32 3;
    store i32* %a with i32 %5;
    ubr ^while.header1;
^b1:
    i32 %6 = load i32* %a;
    i32 %7 = load i32* %b;
    i32 %8 = load i32* %d;
    i32 %9 = add i32 %7, i32 %8;
    i32 %10 = add i32 %6, i32 %9;
    i32 %11 = load i32* %c;
    i32 %12 = add i32 %10, i32 %11;
    ret i32 %12;
^while.header1:
    i32 %13 = load i32* %b;
    i1 %14 = scmp lt i32 %13, i32 10;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %17 = load i32* %b;
    i32 %18 = add i32 %17, i32 1;
    store i32* %b with i32 %18;
    ubr ^while.header2;
^b2:
    i32 %19 = load i32* %b;
    i32 %20 = sub i32 %19, i32 2;
    store i32* %b with i32 %20;
    ubr ^while.header;
^while.header2:
    i32 %21 = load i32* %c;
    i1 %22 = scmp eq i32 %21, i32 7;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %25 = load i32* %c;
    i32 %26 = sub i32 %25, i32 1;
    store i32* %c with i32 %26;
    ubr ^while.header3;
^b3:
    i32 %27 = load i32* %c;
    i32 %28 = add i32 %27, i32 1;
    store i32* %c with i32 %28;
    ubr ^while.header1;
^while.header3:
    i32 %29 = load i32* %d;
    i1 %30 = scmp lt i32 %29, i32 20;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body3, ^b4;
^while.body3:
    i32 %33 = load i32* %d;
    i32 %34 = add i32 %33, i32 3;
    store i32* %d with i32 %34;
    ubr ^while.header3;
^b4:
    i32 %35 = load i32* %d;
    i32 %36 = sub i32 %35, i32 1;
    store i32* %d with i32 %36;
    ubr ^while.header2;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call () -> i32 @FourWhile();
    ret i32 %0;
}
