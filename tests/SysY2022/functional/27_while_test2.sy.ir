func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse Entry } {
^entry():
    ubr [ ^while.body i32 5, i32 6, i32 7, i32 10 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 3;
    i1 %1 = scmp lt i32 %arg1, i32 10;
    cbr i1 %1, [ ^indirect i32 %arg1, i32 %0, i32 %arg2, i32 %arg3 ], [ ^indirect1 i32 %arg1, i32 %0, i32 %arg2, i32 %arg3 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp eq i32 %arg2, i32 7;
    cbr i1 %1, [ ^indirect2 i32 %arg2, i32 %arg1, i32 %0, i32 %arg3 ], [ ^indirect3 i32 %arg2, i32 %arg1, i32 %0, i32 %arg3 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg, i32 2;
    i1 %1 = scmp lt i32 %arg1, i32 20;
    cbr i1 %1, [ ^while.body i32 %arg1, i32 %0, i32 %arg2, i32 %arg3 ], [ ^b i32 %arg1, i32 %0, i32 %arg2, i32 %arg3 ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %arg3, i32 20;
    cbr i1 %1, [ ^while.body1 i32 %arg1, i32 %arg2, i32 %0, i32 %arg3 ], [ ^b1 i32 %arg1, i32 %arg2, i32 %0, i32 %arg3 ];
^indirect3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %arg2, i32 10;
    cbr i1 %1, [ ^indirect i32 %arg2, i32 %arg1, i32 %0, i32 %arg3 ], [ ^indirect1 i32 %arg2, i32 %arg1, i32 %0, i32 %arg3 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 %arg3;
    i32 %1 = add i32 %arg, i32 %0;
    i32 %2 = add i32 %1, i32 %arg2;
    ret i32 %2;
^while.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 3;
    i1 %1 = scmp lt i32 %0, i32 20;
    cbr i1 %1, [ ^while.body1 i32 %arg, i32 %arg1, i32 %arg2, i32 %0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2, i32 %0 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg3, i32 1;
    i1 %1 = scmp eq i32 %arg2, i32 7;
    cbr i1 %1, [ ^indirect2 i32 %arg2, i32 %arg, i32 %arg1, i32 %0 ], [ ^indirect3 i32 %arg2, i32 %arg, i32 %arg1, i32 %0 ];
}
