internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10 * [10 * i32]]* @to;
internal [10 * [10 * i32]]* @cap;
internal [10 * [10 * i32]]* @rev;
internal func @dfs(i32 %s, i32 %t, i32 %f, [10 * i32]* %0, [10 * i32]* %1) -> i32 {
  ^entry:
    i1 %2 = icmp eq i32 %s, i32 %t;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    i32* %3 = getelementptr &([10 * i32]* %1)[i64 0][i32 %s];
    store i32* %3 with i32 1;
    [10 * [10 * i32]]* %4 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * i32]* %5 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %s];
    [10 * [10 * i32]]* %6 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * i32]* %7 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %s];
    i32* %8 = getelementptr &([10 * i32]* %0)[i64 0][i32 %s];
    ubr ^while.header;
  ^b1:
    i32 %9 = phi [^entry, i32 %f] [^while.header, i32 0] [^if.then2, i32 %24];
    ret i32 %9;
  ^while.header:
    i32 %10 = phi [^b, i32 0] [^if.then, i32 %18] [^if.then1, i32 %22] [^b4, i32 %37];
    i32 %11 = load i32* %8;
    i1 %12 = icmp slt i32 %10, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %13 = getelementptr &([10 * i32]* %7)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([10 * i32]* %1)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = icmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %18 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b2:
    i32* %19 = getelementptr &([10 * i32]* %5)[i64 0][i32 %10];
    i32 %20 = load i32* %19;
    i1 %21 = icmp slt i32 %20, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b3:
    i32 %23 = smin i32 %f, i32 %20;
    i32 %24 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 %14, i32 %t, i32 %23, [10 * i32]* %0, [10 * i32]* %1);
    i1 %25 = icmp sgt i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then2, ^b4;
  ^if.then2:
    i32 %26 = load i32* %19;
    i32 %27 = sub i32 %26, i32 %24;
    store i32* %19 with i32 %27;
    [10 * [10 * i32]]* %28 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    [10 * i32]* %29 = getelementptr &([10 * [10 * i32]]* %28)[i64 0][i32 %s];
    i32* %30 = getelementptr &([10 * i32]* %29)[i64 0][i32 %10];
    i32 %31 = load i32* %13;
    i32 %32 = load i32* %30;
    [10 * i32]* %33 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %31];
    i32* %34 = getelementptr &([10 * i32]* %33)[i64 0][i32 %32];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %24, i32 %35;
    store i32* %34 with i32 %36;
    ubr ^b1;
  ^b4:
    i32 %37 = add i32 %10, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %used = alloc [10 * i32];
    [10 * i32]* %size = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %size)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %size)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([10 * i32]* %size)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([10 * i32]* %size)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([10 * i32]* %size)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %size)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([10 * i32]* %size)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([10 * i32]* %size)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([10 * i32]* %size)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([10 * i32]* %size)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %used)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %used)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %used)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %used)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %used)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %used)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %used)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %used)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %used)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %used)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call () -> i32 @getint();
    [10 * [10 * i32]]* %22 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %23 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %24 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    ubr ^super.header;
  ^super.header:
    i32 %25 = phi [^entry, i32 0] [^while.body, i32 %26];
    i32 %26 = add i32 %25, i32 4;
    i1 %27 = icmp slt i32 %26, i32 10;
    cbr i1 %27(prob = 0.89), ^while.body, ^super.header1;
  ^while.body:
    i32* %28 = getelementptr &(i32* %0)[i32 %25];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i32 %32 = phi [^super.header, i32 %25] [^while.body1, i32 %33];
    i32 %33 = add i32 %32, i32 4;
    i1 %34 = icmp slt i32 %33, i32 10;
    cbr i1 %34(prob = 0.89), ^while.body1, ^super.header2;
  ^while.body1:
    i32* %35 = getelementptr &(i32* %0)[i32 %32];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %35)[i64 1];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %35)[i64 2];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %35)[i64 3];
    store i32* %38 with i32 0;
    ubr ^super.header1;
  ^super.header2:
    i32 %39 = phi [^super.header1, i32 %32] [^while.body2, i32 %40];
    i32 %40 = add i32 %39, i32 4;
    i1 %41 = icmp slt i32 %40, i32 10;
    cbr i1 %41(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body2:
    i32* %42 = getelementptr &(i32* %0)[i32 %39];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %42)[i64 1];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %42)[i64 2];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %42)[i64 3];
    store i32* %45 with i32 0;
    ubr ^super.header2;
  ^while.body3:
    i32 %46 = phi [^super.header2, i32 %39] [^while.body3, i32 %48];
    i32* %47 = getelementptr &(i32* %0)[i32 %46];
    store i32* %47 with i32 0;
    i32 %48 = add i32 %46, i32 1;
    i1 %49 = icmp slt i32 %48, i32 10;
    cbr i1 %49(prob = 0.97), ^while.body3, ^entry1;
  ^entry1:
    i1 %50 = icmp sgt i32 %21, i32 0;
    cbr i1 %50(prob = 0.97), ^while.body4, ^while.header;
  ^while.header:
    i32 %51 = phi [^entry1, i32 0] [^while.body4, i32 0] [^b, i32 %111];
    ubr ^super.header3;
  ^while.body4:
    i32 %52 = phi [^entry1, i32 %21] [^while.body4, i32 %75];
    i32 %53 = call () -> i32 @getint();
    i32* %54 = getelementptr &([10 * i32]* %size)[i64 0][i32 %53];
    i32 %55 = call () -> i32 @getint();
    i32 %56 = call () -> i32 @getint();
    i32 %57 = load i32* %54;
    [10 * i32]* %58 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %53];
    i32* %59 = getelementptr &([10 * i32]* %58)[i64 0][i32 %57];
    store i32* %59 with i32 %55;
    [10 * i32]* %60 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %53];
    i32* %61 = getelementptr &([10 * i32]* %60)[i64 0][i32 %57];
    store i32* %61 with i32 %56;
    [10 * i32]* %62 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %53];
    i32* %63 = getelementptr &([10 * i32]* %62)[i64 0][i32 %57];
    i32* %64 = getelementptr &([10 * i32]* %size)[i64 0][i32 %55];
    i32 %65 = load i32* %64;
    store i32* %63 with i32 %65;
    [10 * i32]* %66 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %55];
    i32* %67 = getelementptr &([10 * i32]* %66)[i64 0][i32 %65];
    store i32* %67 with i32 %53;
    [10 * i32]* %68 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %55];
    i32* %69 = getelementptr &([10 * i32]* %68)[i64 0][i32 %65];
    store i32* %69 with i32 0;
    [10 * i32]* %70 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %55];
    i32* %71 = getelementptr &([10 * i32]* %70)[i64 0][i32 %65];
    store i32* %71 with i32 %57;
    i32 %72 = add i32 %57, i32 1;
    store i32* %54 with i32 %72;
    i32 %73 = load i32* %64;
    i32 %74 = add i32 %73, i32 1;
    store i32* %64 with i32 %74;
    i32 %75 = add i32 %52, i32 -1;
    i1 %76 = icmp sgt i32 %75, i32 0;
    cbr i1 %76(prob = 0.97), ^while.body4, ^while.header;
  ^super.header3:
    i32 %77 = phi [^while.header, i32 0] [^while.body5, i32 %78];
    i32 %78 = add i32 %77, i32 4;
    i1 %79 = icmp slt i32 %78, i32 10;
    cbr i1 %79(prob = 0.89), ^while.body5, ^super.header4;
  ^while.body5:
    i32* %80 = getelementptr &(i32* %10)[i32 %77];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %80)[i64 1];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %80)[i64 2];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %80)[i64 3];
    store i32* %83 with i32 0;
    ubr ^super.header3;
  ^super.header4:
    i32 %84 = phi [^super.header3, i32 %77] [^while.body6, i32 %85];
    i32 %85 = add i32 %84, i32 4;
    i1 %86 = icmp slt i32 %85, i32 10;
    cbr i1 %86(prob = 0.89), ^while.body6, ^super.header5;
  ^while.body6:
    i32* %87 = getelementptr &(i32* %10)[i32 %84];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %87)[i64 1];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %87)[i64 2];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %87)[i64 3];
    store i32* %90 with i32 0;
    ubr ^super.header4;
  ^super.header5:
    i32 %91 = phi [^super.header4, i32 %84] [^while.body7, i32 %92];
    i32 %92 = add i32 %91, i32 4;
    i1 %93 = icmp slt i32 %92, i32 10;
    cbr i1 %93(prob = 0.89), ^while.body7, ^super.header6;
  ^while.body7:
    i32* %94 = getelementptr &(i32* %10)[i32 %91];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %94)[i64 1];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %94)[i64 2];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %94)[i64 3];
    store i32* %97 with i32 0;
    ubr ^super.header5;
  ^super.header6:
    i32 %98 = phi [^super.header5, i32 %91] [^while.body8, i32 %99];
    i32 %99 = add i32 %98, i32 4;
    i1 %100 = icmp slt i32 %99, i32 10;
    cbr i1 %100(prob = 0.89), ^while.body8, ^while.body9;
  ^while.body8:
    i32* %101 = getelementptr &(i32* %10)[i32 %98];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %101)[i64 1];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %101)[i64 2];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %101)[i64 3];
    store i32* %104 with i32 0;
    ubr ^super.header6;
  ^while.body9:
    i32 %105 = phi [^super.header6, i32 %98] [^while.body9, i32 %107];
    i32* %106 = getelementptr &(i32* %10)[i32 %105];
    store i32* %106 with i32 0;
    i32 %107 = add i32 %105, i32 1;
    i1 %108 = icmp slt i32 %107, i32 10;
    cbr i1 %108(prob = 0.97), ^while.body9, ^while.header1;
  ^while.header1:
    i32 %109 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 1, i32 %20, i32 1879048192, [10 * i32]* %size, [10 * i32]* %used);
    i1 %110 = icmp eq i32 %109, i32 0;
    cbr i1 %110(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %111 = add i32 %51, i32 %109;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %51);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
