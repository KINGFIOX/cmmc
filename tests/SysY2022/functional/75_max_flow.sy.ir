internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @INF { ReadOnly } = 1879048192;
internal [10 * i32]* @size;
internal [10 * [10 * i32]]* @to;
internal [10 * [10 * i32]]* @cap;
internal [10 * [10 * i32]]* @rev;
internal [10 * i32]* @used;
internal func @my_memset(i32* %arr, i32 %val, i32 %n) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    i32* %val1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %val1 with i32 %val;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %arr1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %val1;
    store i32* %8 with i32 %9;
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    ubr ^while.header;
^b:
    ret;
}
internal func @add_node(i32 %u, i32 %v, i32 %c) -> void {
^entry:
    i32* %c1 = alloc i32;
    i32* %v1 = alloc i32;
    i32* %u1 = alloc i32;
    store i32* %u1 with i32 %u;
    store i32* %v1 with i32 %v;
    store i32* %c1 with i32 %c;
    i32 %0 = load i32* %u1;
    i64 %1 = sext i32 %0 to i64;
    [10 * i32]* %2 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %1];
    i32 %3 = load i32* %u1;
    i64 %4 = sext i32 %3 to i64;
    i32* %5 = getelementptr &([10 * i32]* @size)[i64 0][i64 %4];
    i32 %6 = load i32* %5;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = getelementptr &([10 * i32]* %2)[i64 0][i64 %7];
    i32 %9 = load i32* %v1;
    store i32* %8 with i32 %9;
    i32 %10 = load i32* %u1;
    i64 %11 = sext i32 %10 to i64;
    [10 * i32]* %12 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %11];
    i32 %13 = load i32* %u1;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = getelementptr &([10 * i32]* @size)[i64 0][i64 %14];
    i32 %16 = load i32* %15;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = getelementptr &([10 * i32]* %12)[i64 0][i64 %17];
    i32 %19 = load i32* %c1;
    store i32* %18 with i32 %19;
    i32 %20 = load i32* %u1;
    i64 %21 = sext i32 %20 to i64;
    [10 * i32]* %22 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i64 %21];
    i32 %23 = load i32* %u1;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([10 * i32]* @size)[i64 0][i64 %24];
    i32 %26 = load i32* %25;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = getelementptr &([10 * i32]* %22)[i64 0][i64 %27];
    i32 %29 = load i32* %v1;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = getelementptr &([10 * i32]* @size)[i64 0][i64 %30];
    i32 %32 = load i32* %31;
    store i32* %28 with i32 %32;
    i32 %33 = load i32* %v1;
    i64 %34 = sext i32 %33 to i64;
    [10 * i32]* %35 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %34];
    i32 %36 = load i32* %v1;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([10 * i32]* @size)[i64 0][i64 %37];
    i32 %39 = load i32* %38;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = getelementptr &([10 * i32]* %35)[i64 0][i64 %40];
    i32 %42 = load i32* %u1;
    store i32* %41 with i32 %42;
    i32 %43 = load i32* %v1;
    i64 %44 = sext i32 %43 to i64;
    [10 * i32]* %45 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %44];
    i32 %46 = load i32* %v1;
    i64 %47 = sext i32 %46 to i64;
    i32* %48 = getelementptr &([10 * i32]* @size)[i64 0][i64 %47];
    i32 %49 = load i32* %48;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([10 * i32]* %45)[i64 0][i64 %50];
    store i32* %51 with i32 0;
    i32 %52 = load i32* %v1;
    i64 %53 = sext i32 %52 to i64;
    [10 * i32]* %54 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i64 %53];
    i32 %55 = load i32* %v1;
    i64 %56 = sext i32 %55 to i64;
    i32* %57 = getelementptr &([10 * i32]* @size)[i64 0][i64 %56];
    i32 %58 = load i32* %57;
    i64 %59 = sext i32 %58 to i64;
    i32* %60 = getelementptr &([10 * i32]* %54)[i64 0][i64 %59];
    i32 %61 = load i32* %u1;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = getelementptr &([10 * i32]* @size)[i64 0][i64 %62];
    i32 %64 = load i32* %63;
    store i32* %60 with i32 %64;
    i32 %65 = load i32* %u1;
    i64 %66 = sext i32 %65 to i64;
    i32* %67 = getelementptr &([10 * i32]* @size)[i64 0][i64 %66];
    i32 %68 = load i32* %u1;
    i64 %69 = sext i32 %68 to i64;
    i32* %70 = getelementptr &([10 * i32]* @size)[i64 0][i64 %69];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %71, i32 1;
    store i32* %67 with i32 %72;
    i32 %73 = load i32* %v1;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = getelementptr &([10 * i32]* @size)[i64 0][i64 %74];
    i32 %76 = load i32* %v1;
    i64 %77 = sext i32 %76 to i64;
    i32* %78 = getelementptr &([10 * i32]* @size)[i64 0][i64 %77];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %79, i32 1;
    store i32* %75 with i32 %80;
    ret;
}
internal func @dfs(i32 %s, i32 %t, i32 %f) -> i32 {
^entry:
    i32* %d = alloc i32;
    i32* %min_f = alloc i32;
    i32* %i = alloc i32;
    i32* %f1 = alloc i32;
    i32* %t1 = alloc i32;
    i32* %s1 = alloc i32;
    store i32* %s1 with i32 %s;
    store i32* %t1 with i32 %t;
    store i32* %f1 with i32 %f;
    i32 %0 = load i32* %s1;
    i32 %1 = load i32* %t1;
    i1 %2 = scmp eq i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^b:
    i32 %5 = load i32* %s1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([10 * i32]* @used)[i64 0][i64 %6];
    store i32* %7 with i32 1;
    store i32* %i with i32 0;
    ubr ^while.header;
^if.then:
    i32 %8 = load i32* %f1;
    ret i32 %8;
^while.header:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* %s1;
    i64 %11 = sext i32 %10 to i64;
    i32* %12 = getelementptr &([10 * i32]* @size)[i64 0][i64 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %9, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %17 = load i32* %s1;
    i64 %18 = sext i32 %17 to i64;
    [10 * i32]* %19 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %18];
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = getelementptr &([10 * i32]* %19)[i64 0][i64 %21];
    i32 %23 = load i32* %22;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([10 * i32]* @used)[i64 0][i64 %24];
    i32 %26 = load i32* %25;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^b2;
^b1:
    ret i32 0;
^if.then1:
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %i with i32 %29;
    ubr ^while.header;
^b2:
    i32 %30 = load i32* %s1;
    i64 %31 = sext i32 %30 to i64;
    [10 * i32]* %32 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %31];
    i32 %33 = load i32* %i;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([10 * i32]* %32)[i64 0][i64 %34];
    i32 %36 = load i32* %35;
    i1 %37 = scmp le i32 %36, i32 0;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then2, ^b3;
^if.then2:
    i32 %40 = load i32* %i;
    i32 %41 = add i32 %40, i32 1;
    store i32* %i with i32 %41;
    ubr ^while.header;
^b3:
    store i32* %min_f with i32 0;
    i32 %42 = load i32* %f1;
    i32 %43 = load i32* %s1;
    i64 %44 = sext i32 %43 to i64;
    [10 * i32]* %45 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %44];
    i32 %46 = load i32* %i;
    i64 %47 = sext i32 %46 to i64;
    i32* %48 = getelementptr &([10 * i32]* %45)[i64 0][i64 %47];
    i32 %49 = load i32* %48;
    i1 %50 = scmp lt i32 %42, i32 %49;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.5), ^if.then3, ^if.else;
^if.then3:
    i32 %53 = load i32* %f1;
    store i32* %min_f with i32 %53;
    ubr ^b4;
^if.else:
    i32 %54 = load i32* %s1;
    i64 %55 = sext i32 %54 to i64;
    [10 * i32]* %56 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %55];
    i32 %57 = load i32* %i;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = getelementptr &([10 * i32]* %56)[i64 0][i64 %58];
    i32 %60 = load i32* %59;
    store i32* %min_f with i32 %60;
    ubr ^b4;
^b4:
    i32 %61 = load i32* %s1;
    i64 %62 = sext i32 %61 to i64;
    [10 * i32]* %63 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %62];
    i32 %64 = load i32* %i;
    i64 %65 = sext i32 %64 to i64;
    i32* %66 = getelementptr &([10 * i32]* %63)[i64 0][i64 %65];
    i32 %67 = load i32* %66;
    i32 %68 = load i32* %t1;
    i32 %69 = load i32* %min_f;
    i32 %70 = call (i32, i32, i32) -> i32 @dfs(i32 %67, i32 %68, i32 %69);
    store i32* %d with i32 %70;
    i32 %71 = load i32* %d;
    i1 %72 = scmp gt i32 %71, i32 0;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then4, ^b5;
^b5:
    i32 %75 = load i32* %i;
    i32 %76 = add i32 %75, i32 1;
    store i32* %i with i32 %76;
    ubr ^while.header;
^if.then4:
    i32 %77 = load i32* %s1;
    i64 %78 = sext i32 %77 to i64;
    [10 * i32]* %79 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %78];
    i32 %80 = load i32* %i;
    i64 %81 = sext i32 %80 to i64;
    i32* %82 = getelementptr &([10 * i32]* %79)[i64 0][i64 %81];
    i32 %83 = load i32* %s1;
    i64 %84 = sext i32 %83 to i64;
    [10 * i32]* %85 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %84];
    i32 %86 = load i32* %i;
    i64 %87 = sext i32 %86 to i64;
    i32* %88 = getelementptr &([10 * i32]* %85)[i64 0][i64 %87];
    i32 %89 = load i32* %88;
    i32 %90 = load i32* %d;
    i32 %91 = sub i32 %89, i32 %90;
    store i32* %82 with i32 %91;
    i32 %92 = load i32* %s1;
    i64 %93 = sext i32 %92 to i64;
    [10 * i32]* %94 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %93];
    i32 %95 = load i32* %i;
    i64 %96 = sext i32 %95 to i64;
    i32* %97 = getelementptr &([10 * i32]* %94)[i64 0][i64 %96];
    i32 %98 = load i32* %97;
    i64 %99 = sext i32 %98 to i64;
    [10 * i32]* %100 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %99];
    i32 %101 = load i32* %s1;
    i64 %102 = sext i32 %101 to i64;
    [10 * i32]* %103 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i64 %102];
    i32 %104 = load i32* %i;
    i64 %105 = sext i32 %104 to i64;
    i32* %106 = getelementptr &([10 * i32]* %103)[i64 0][i64 %105];
    i32 %107 = load i32* %106;
    i64 %108 = sext i32 %107 to i64;
    i32* %109 = getelementptr &([10 * i32]* %100)[i64 0][i64 %108];
    i32 %110 = load i32* %s1;
    i64 %111 = sext i32 %110 to i64;
    [10 * i32]* %112 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i64 %111];
    i32 %113 = load i32* %i;
    i64 %114 = sext i32 %113 to i64;
    i32* %115 = getelementptr &([10 * i32]* %112)[i64 0][i64 %114];
    i32 %116 = load i32* %115;
    i64 %117 = sext i32 %116 to i64;
    [10 * i32]* %118 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i64 %117];
    i32 %119 = load i32* %s1;
    i64 %120 = sext i32 %119 to i64;
    [10 * i32]* %121 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i64 %120];
    i32 %122 = load i32* %i;
    i64 %123 = sext i32 %122 to i64;
    i32* %124 = getelementptr &([10 * i32]* %121)[i64 0][i64 %123];
    i32 %125 = load i32* %124;
    i64 %126 = sext i32 %125 to i64;
    i32* %127 = getelementptr &([10 * i32]* %118)[i64 0][i64 %126];
    i32 %128 = load i32* %127;
    i32 %129 = load i32* %d;
    i32 %130 = add i32 %128, i32 %129;
    store i32* %109 with i32 %130;
    i32 %131 = load i32* %d;
    ret i32 %131;
}
internal func @max_flow(i32 %s, i32 %t) -> i32 {
^entry:
    i32* %f = alloc i32;
    i32* %flow = alloc i32;
    i32* %t1 = alloc i32;
    i32* %s1 = alloc i32;
    store i32* %s1 with i32 %s;
    store i32* %t1 with i32 %t;
    store i32* %flow with i32 0;
    ubr ^while.header;
^while.header:
    i1 %0 = scmp neq i32 1, i32 0;
    cbr i1 %0(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32* %1 = getelementptr &([10 * i32]* @used)[i64 0][i64 0];
    call (i32*, i32, i32) -> void @my_memset(i32* %1, i32 0, i32 10);
    i32 %2 = load i32* %s1;
    i32 %3 = load i32* %t1;
    i32 %4 = call (i32, i32, i32) -> i32 @dfs(i32 %2, i32 %3, i32 1879048192);
    store i32* %f with i32 %4;
    i32 %5 = load i32* %f;
    i1 %6 = scmp eq i32 %5, i32 0;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b;
^b:
    i32 %9 = load i32* %flow;
    i32 %10 = load i32* %f;
    i32 %11 = add i32 %9, i32 %10;
    store i32* %flow with i32 %11;
    ubr ^while.header;
^if.then:
    i32 %12 = load i32* %flow;
    ret i32 %12;
^b1:
    unreachable;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %c = alloc i32;
    i32* %v = alloc i32;
    i32* %u = alloc i32;
    i32* %E = alloc i32;
    i32* %V = alloc i32;
    store i32* %V with i32 0;
    store i32* %E with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %V with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %E with i32 %1;
    i32* %2 = getelementptr &([10 * i32]* @size)[i64 0][i64 0];
    call (i32*, i32, i32) -> void @my_memset(i32* %2, i32 0, i32 10);
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %E;
    i1 %4 = scmp gt i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %u with i32 0;
    store i32* %v with i32 0;
    i32 %7 = call () -> i32 @getint();
    store i32* %u with i32 %7;
    i32 %8 = call () -> i32 @getint();
    store i32* %v with i32 %8;
    i32 %9 = call () -> i32 @getint();
    store i32* %c with i32 %9;
    i32 %10 = load i32* %u;
    i32 %11 = load i32* %v;
    i32 %12 = load i32* %c;
    call (i32, i32, i32) -> void @add_node(i32 %10, i32 %11, i32 %12);
    i32 %13 = load i32* %E;
    i32 %14 = sub i32 %13, i32 1;
    store i32* %E with i32 %14;
    ubr ^while.header;
^b:
    i32 %15 = load i32* %V;
    i32 %16 = call (i32, i32) -> i32 @max_flow(i32 1, i32 %15);
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
