internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10 * [10 * i32]]* @to;
internal [10 * [10 * i32]]* @cap;
internal [10 * [10 * i32]]* @rev;
internal func @dfs(i32 %s, i32 %t, i32 %f, [10 * i32]* %0, [10 * i32]* %1) -> i32 {
  ^entry:
    i1 %2 = scmp eq i32 %s, i32 %t;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    i32* %3 = getelementptr &([10 * i32]* %1)[i64 0][i32 %s];
    store i32* %3 with i32 1;
    [10 * [10 * i32]]* %4 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * i32]* %5 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %s];
    [10 * [10 * i32]]* %6 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * i32]* %7 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %s];
    i32* %8 = getelementptr &([10 * i32]* %0)[i64 0][i32 %s];
    ubr ^while.header;
  ^b1:
    i32 %9 = phi [^entry, i32 %f] [^while.header, i32 0] [^if.then1, i32 %26];
    ret i32 %9;
  ^while.header:
    i32 %10 = phi [^b, i32 0] [^if.then, i32 %18];
    i32 %11 = load i32* %8;
    i1 %12 = scmp lt i32 %10, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %13 = getelementptr &([10 * i32]* %5)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([10 * i32]* %1)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %18 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b2:
    i32* %19 = getelementptr &([10 * i32]* %7)[i64 0][i32 %10];
    i32 %20 = load i32* %19;
    i1 %21 = scmp lt i32 %20, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then, ^b3;
  ^b3:
    i1 %22 = scmp lt i32 %f, i32 %20;
    cbr i1 %22(prob = 0.5), ^b4, ^if.else;
  ^if.else:
    i32 %23 = load i32* %19;
    ubr ^b4;
  ^b4:
    i32 %24 = phi [^b3, i32 %f] [^if.else, i32 %23];
    i32 %25 = load i32* %13;
    i32 %26 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 %25, i32 %t, i32 %24, [10 * i32]* %0, [10 * i32]* %1);
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^if.then;
  ^if.then1:
    i32 %28 = load i32* %19;
    i32 %29 = sub i32 %28, i32 %26;
    store i32* %19 with i32 %29;
    [10 * [10 * i32]]* %30 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    [10 * i32]* %31 = getelementptr &([10 * [10 * i32]]* %30)[i64 0][i32 %s];
    i32* %32 = getelementptr &([10 * i32]* %31)[i64 0][i32 %10];
    i32 %33 = load i32* %13;
    i32 %34 = load i32* %32;
    [10 * i32]* %35 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %33];
    i32* %36 = getelementptr &([10 * i32]* %35)[i64 0][i32 %34];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %26, i32 %37;
    store i32* %36 with i32 %38;
    ubr ^b1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %used = alloc [10 * i32];
    [10 * i32]* %size = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %size)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %size)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([10 * i32]* %size)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([10 * i32]* %size)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([10 * i32]* %size)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %size)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([10 * i32]* %size)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([10 * i32]* %size)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([10 * i32]* %size)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([10 * i32]* %size)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %used)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %used)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %used)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %used)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %used)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %used)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %used)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %used)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %used)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %used)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call () -> i32 @getint();
    [10 * [10 * i32]]* %22 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %23 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %24 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    ubr ^super.header;
  ^super.header:
    i32 %25 = phi [^entry, i32 0] [^while.body, i32 %26];
    i32 %26 = add i32 %25, i32 16;
    i1 %27 = scmp lt i32 %26, i32 10;
    cbr i1 %27(prob = 0.67), ^while.body, ^super.header1;
  ^while.body:
    i32* %28 = getelementptr &(i32* %0)[i32 %25];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %28)[i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %28)[i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %28)[i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %28)[i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %28)[i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %28)[i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %28)[i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %28)[i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %28)[i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %28)[i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %28)[i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %28)[i64 15];
    store i32* %43 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i32 %44 = phi [^super.header, i32 %25] [^while.body1, i32 %45];
    i32 %45 = add i32 %44, i32 16;
    i1 %46 = scmp lt i32 %45, i32 10;
    cbr i1 %46(prob = 0.67), ^while.body1, ^super.header2;
  ^while.body1:
    i32* %47 = getelementptr &(i32* %0)[i32 %44];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %47)[i64 4];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %47)[i64 5];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %47)[i64 6];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %47)[i64 7];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %47)[i64 8];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %47)[i64 9];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %47)[i64 10];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %47)[i64 11];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %47)[i64 12];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %47)[i64 13];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %47)[i64 14];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %47)[i64 15];
    store i32* %62 with i32 0;
    ubr ^super.header1;
  ^super.header2:
    i32 %63 = phi [^super.header1, i32 %44] [^while.body2, i32 %64];
    i32 %64 = add i32 %63, i32 16;
    i1 %65 = scmp lt i32 %64, i32 10;
    cbr i1 %65(prob = 0.67), ^while.body2, ^while.body3;
  ^while.body2:
    i32* %66 = getelementptr &(i32* %0)[i32 %63];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %66)[i64 1];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %66)[i64 2];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %66)[i64 3];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %66)[i64 4];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %66)[i64 5];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %66)[i64 6];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %66)[i64 7];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %66)[i64 8];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %66)[i64 9];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %66)[i64 10];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %66)[i64 11];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %66)[i64 12];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %66)[i64 13];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %66)[i64 14];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %66)[i64 15];
    store i32* %81 with i32 0;
    ubr ^super.header2;
  ^while.body3:
    i32 %82 = phi [^super.header2, i32 %63] [^while.body3, i32 %84];
    i32* %83 = getelementptr &(i32* %0)[i32 %82];
    store i32* %83 with i32 0;
    i32 %84 = add i32 %82, i32 1;
    i1 %85 = scmp lt i32 %84, i32 10;
    cbr i1 %85(prob = 0.97), ^while.body3, ^entry1;
  ^entry1:
    i1 %86 = scmp gt i32 %21, i32 0;
    cbr i1 %86(prob = 0.97), ^while.body4, ^super.header3;
  ^while.body4:
    i32 %87 = phi [^entry1, i32 %21] [^while.body4, i32 %111];
    i32 %88 = call () -> i32 @getint();
    i32* %89 = getelementptr &([10 * i32]* %size)[i64 0][i32 %88];
    i32 %90 = call () -> i32 @getint();
    i32 %91 = call () -> i32 @getint();
    i32 %92 = load i32* %89;
    [10 * i32]* %93 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %88];
    i32* %94 = getelementptr &([10 * i32]* %93)[i64 0][i32 %92];
    store i32* %94 with i32 %90;
    [10 * i32]* %95 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %88];
    i32* %96 = getelementptr &([10 * i32]* %95)[i64 0][i32 %92];
    store i32* %96 with i32 %91;
    [10 * i32]* %97 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %88];
    i32* %98 = getelementptr &([10 * i32]* %97)[i64 0][i32 %92];
    i32* %99 = getelementptr &([10 * i32]* %size)[i64 0][i32 %90];
    i32 %100 = load i32* %99;
    store i32* %98 with i32 %100;
    [10 * i32]* %101 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %90];
    i32* %102 = getelementptr &([10 * i32]* %101)[i64 0][i32 %100];
    store i32* %102 with i32 %88;
    [10 * i32]* %103 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %90];
    i32* %104 = getelementptr &([10 * i32]* %103)[i64 0][i32 %100];
    store i32* %104 with i32 0;
    [10 * i32]* %105 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %90];
    i32* %106 = getelementptr &([10 * i32]* %105)[i64 0][i32 %100];
    i32 %107 = load i32* %89;
    store i32* %106 with i32 %107;
    i32 %108 = add i32 %107, i32 1;
    store i32* %89 with i32 %108;
    i32 %109 = load i32* %99;
    i32 %110 = add i32 %109, i32 1;
    store i32* %99 with i32 %110;
    i32 %111 = add i32 %87, i32 -1;
    i1 %112 = scmp gt i32 %111, i32 0;
    cbr i1 %112(prob = 0.97), ^while.body4, ^super.header3;
  ^super.header3:
    i32 %113 = phi [^entry1, i32 0] [^while.body4, i32 0] [^while.body5, i32 %114];
    i32 %114 = add i32 %113, i32 16;
    i1 %115 = scmp lt i32 %114, i32 10;
    cbr i1 %115(prob = 0.67), ^while.body5, ^super.header4;
  ^while.body5:
    i32* %116 = getelementptr &(i32* %10)[i32 %113];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %116)[i64 1];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %116)[i64 2];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %116)[i64 3];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %116)[i64 4];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %116)[i64 5];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %116)[i64 6];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %116)[i64 7];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %116)[i64 8];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %116)[i64 9];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %116)[i64 10];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %116)[i64 11];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %116)[i64 12];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %116)[i64 13];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %116)[i64 14];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %116)[i64 15];
    store i32* %131 with i32 0;
    ubr ^super.header3;
  ^super.header4:
    i32 %132 = phi [^super.header3, i32 %113] [^while.body6, i32 %133];
    i32 %133 = add i32 %132, i32 16;
    i1 %134 = scmp lt i32 %133, i32 10;
    cbr i1 %134(prob = 0.67), ^while.body6, ^super.header5;
  ^while.body6:
    i32* %135 = getelementptr &(i32* %10)[i32 %132];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %135)[i64 1];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %135)[i64 2];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %135)[i64 3];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %135)[i64 4];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %135)[i64 5];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %135)[i64 6];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %135)[i64 7];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %135)[i64 8];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %135)[i64 9];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %135)[i64 10];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %135)[i64 11];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %135)[i64 12];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %135)[i64 13];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %135)[i64 14];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %135)[i64 15];
    store i32* %150 with i32 0;
    ubr ^super.header4;
  ^super.header5:
    i32 %151 = phi [^super.header4, i32 %132] [^while.body7, i32 %152];
    i32 %152 = add i32 %151, i32 16;
    i1 %153 = scmp lt i32 %152, i32 10;
    cbr i1 %153(prob = 0.67), ^while.body7, ^super.header6;
  ^while.body7:
    i32* %154 = getelementptr &(i32* %10)[i32 %151];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %154)[i64 1];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %154)[i64 2];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %154)[i64 3];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %154)[i64 4];
    store i32* %158 with i32 0;
    i32* %159 = getelementptr &(i32* %154)[i64 5];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %154)[i64 6];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %154)[i64 7];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %154)[i64 8];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %154)[i64 9];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %154)[i64 10];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %154)[i64 11];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %154)[i64 12];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &(i32* %154)[i64 13];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &(i32* %154)[i64 14];
    store i32* %168 with i32 0;
    i32* %169 = getelementptr &(i32* %154)[i64 15];
    store i32* %169 with i32 0;
    ubr ^super.header5;
  ^super.header6:
    i32 %170 = phi [^super.header5, i32 %151] [^while.body8, i32 %171];
    i32 %171 = add i32 %170, i32 16;
    i1 %172 = scmp lt i32 %171, i32 10;
    cbr i1 %172(prob = 0.67), ^while.body8, ^while.body9;
  ^while.body8:
    i32* %173 = getelementptr &(i32* %10)[i32 %170];
    store i32* %173 with i32 0;
    i32* %174 = getelementptr &(i32* %173)[i64 1];
    store i32* %174 with i32 0;
    i32* %175 = getelementptr &(i32* %173)[i64 2];
    store i32* %175 with i32 0;
    i32* %176 = getelementptr &(i32* %173)[i64 3];
    store i32* %176 with i32 0;
    i32* %177 = getelementptr &(i32* %173)[i64 4];
    store i32* %177 with i32 0;
    i32* %178 = getelementptr &(i32* %173)[i64 5];
    store i32* %178 with i32 0;
    i32* %179 = getelementptr &(i32* %173)[i64 6];
    store i32* %179 with i32 0;
    i32* %180 = getelementptr &(i32* %173)[i64 7];
    store i32* %180 with i32 0;
    i32* %181 = getelementptr &(i32* %173)[i64 8];
    store i32* %181 with i32 0;
    i32* %182 = getelementptr &(i32* %173)[i64 9];
    store i32* %182 with i32 0;
    i32* %183 = getelementptr &(i32* %173)[i64 10];
    store i32* %183 with i32 0;
    i32* %184 = getelementptr &(i32* %173)[i64 11];
    store i32* %184 with i32 0;
    i32* %185 = getelementptr &(i32* %173)[i64 12];
    store i32* %185 with i32 0;
    i32* %186 = getelementptr &(i32* %173)[i64 13];
    store i32* %186 with i32 0;
    i32* %187 = getelementptr &(i32* %173)[i64 14];
    store i32* %187 with i32 0;
    i32* %188 = getelementptr &(i32* %173)[i64 15];
    store i32* %188 with i32 0;
    ubr ^super.header6;
  ^while.body9:
    i32 %189 = phi [^super.header6, i32 %170] [^while.body9, i32 %191];
    i32* %190 = getelementptr &(i32* %10)[i32 %189];
    store i32* %190 with i32 0;
    i32 %191 = add i32 %189, i32 1;
    i1 %192 = scmp lt i32 %191, i32 10;
    cbr i1 %192(prob = 0.97), ^while.body9, ^entry2;
  ^entry2:
    i32 %193 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 1, i32 %20, i32 1879048192, [10 * i32]* %size, [10 * i32]* %used);
    i1 %194 = scmp eq i32 %193, i32 0;
    cbr i1 %194(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %195 = phi [^entry2, i32 %193] [^b1, i32 %279];
    i32 %196 = phi [^entry2, i32 0] [^b1, i32 %197];
    i32 %197 = add i32 %195, i32 %196;
    ubr ^super.header7;
  ^if.then:
    i32 %198 = phi [^entry2, i32 0] [^b1, i32 %197];
    call (i32) -> void @putint(i32 %198);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^super.header7:
    i32 %199 = phi [^b, i32 0] [^while.body10, i32 %200];
    i32 %200 = add i32 %199, i32 16;
    i1 %201 = scmp lt i32 %200, i32 10;
    cbr i1 %201(prob = 0.67), ^while.body10, ^super.header8;
  ^while.body10:
    i32* %202 = getelementptr &(i32* %10)[i32 %199];
    store i32* %202 with i32 0;
    i32* %203 = getelementptr &(i32* %202)[i64 1];
    store i32* %203 with i32 0;
    i32* %204 = getelementptr &(i32* %202)[i64 2];
    store i32* %204 with i32 0;
    i32* %205 = getelementptr &(i32* %202)[i64 3];
    store i32* %205 with i32 0;
    i32* %206 = getelementptr &(i32* %202)[i64 4];
    store i32* %206 with i32 0;
    i32* %207 = getelementptr &(i32* %202)[i64 5];
    store i32* %207 with i32 0;
    i32* %208 = getelementptr &(i32* %202)[i64 6];
    store i32* %208 with i32 0;
    i32* %209 = getelementptr &(i32* %202)[i64 7];
    store i32* %209 with i32 0;
    i32* %210 = getelementptr &(i32* %202)[i64 8];
    store i32* %210 with i32 0;
    i32* %211 = getelementptr &(i32* %202)[i64 9];
    store i32* %211 with i32 0;
    i32* %212 = getelementptr &(i32* %202)[i64 10];
    store i32* %212 with i32 0;
    i32* %213 = getelementptr &(i32* %202)[i64 11];
    store i32* %213 with i32 0;
    i32* %214 = getelementptr &(i32* %202)[i64 12];
    store i32* %214 with i32 0;
    i32* %215 = getelementptr &(i32* %202)[i64 13];
    store i32* %215 with i32 0;
    i32* %216 = getelementptr &(i32* %202)[i64 14];
    store i32* %216 with i32 0;
    i32* %217 = getelementptr &(i32* %202)[i64 15];
    store i32* %217 with i32 0;
    ubr ^super.header7;
  ^super.header8:
    i32 %218 = phi [^super.header7, i32 %199] [^while.body11, i32 %219];
    i32 %219 = add i32 %218, i32 16;
    i1 %220 = scmp lt i32 %219, i32 10;
    cbr i1 %220(prob = 0.67), ^while.body11, ^super.header9;
  ^while.body11:
    i32* %221 = getelementptr &(i32* %10)[i32 %218];
    store i32* %221 with i32 0;
    i32* %222 = getelementptr &(i32* %221)[i64 1];
    store i32* %222 with i32 0;
    i32* %223 = getelementptr &(i32* %221)[i64 2];
    store i32* %223 with i32 0;
    i32* %224 = getelementptr &(i32* %221)[i64 3];
    store i32* %224 with i32 0;
    i32* %225 = getelementptr &(i32* %221)[i64 4];
    store i32* %225 with i32 0;
    i32* %226 = getelementptr &(i32* %221)[i64 5];
    store i32* %226 with i32 0;
    i32* %227 = getelementptr &(i32* %221)[i64 6];
    store i32* %227 with i32 0;
    i32* %228 = getelementptr &(i32* %221)[i64 7];
    store i32* %228 with i32 0;
    i32* %229 = getelementptr &(i32* %221)[i64 8];
    store i32* %229 with i32 0;
    i32* %230 = getelementptr &(i32* %221)[i64 9];
    store i32* %230 with i32 0;
    i32* %231 = getelementptr &(i32* %221)[i64 10];
    store i32* %231 with i32 0;
    i32* %232 = getelementptr &(i32* %221)[i64 11];
    store i32* %232 with i32 0;
    i32* %233 = getelementptr &(i32* %221)[i64 12];
    store i32* %233 with i32 0;
    i32* %234 = getelementptr &(i32* %221)[i64 13];
    store i32* %234 with i32 0;
    i32* %235 = getelementptr &(i32* %221)[i64 14];
    store i32* %235 with i32 0;
    i32* %236 = getelementptr &(i32* %221)[i64 15];
    store i32* %236 with i32 0;
    ubr ^super.header8;
  ^super.header9:
    i32 %237 = phi [^super.header8, i32 %218] [^while.body12, i32 %238];
    i32 %238 = add i32 %237, i32 16;
    i1 %239 = scmp lt i32 %238, i32 10;
    cbr i1 %239(prob = 0.67), ^while.body12, ^super.header10;
  ^while.body12:
    i32* %240 = getelementptr &(i32* %10)[i32 %237];
    store i32* %240 with i32 0;
    i32* %241 = getelementptr &(i32* %240)[i64 1];
    store i32* %241 with i32 0;
    i32* %242 = getelementptr &(i32* %240)[i64 2];
    store i32* %242 with i32 0;
    i32* %243 = getelementptr &(i32* %240)[i64 3];
    store i32* %243 with i32 0;
    i32* %244 = getelementptr &(i32* %240)[i64 4];
    store i32* %244 with i32 0;
    i32* %245 = getelementptr &(i32* %240)[i64 5];
    store i32* %245 with i32 0;
    i32* %246 = getelementptr &(i32* %240)[i64 6];
    store i32* %246 with i32 0;
    i32* %247 = getelementptr &(i32* %240)[i64 7];
    store i32* %247 with i32 0;
    i32* %248 = getelementptr &(i32* %240)[i64 8];
    store i32* %248 with i32 0;
    i32* %249 = getelementptr &(i32* %240)[i64 9];
    store i32* %249 with i32 0;
    i32* %250 = getelementptr &(i32* %240)[i64 10];
    store i32* %250 with i32 0;
    i32* %251 = getelementptr &(i32* %240)[i64 11];
    store i32* %251 with i32 0;
    i32* %252 = getelementptr &(i32* %240)[i64 12];
    store i32* %252 with i32 0;
    i32* %253 = getelementptr &(i32* %240)[i64 13];
    store i32* %253 with i32 0;
    i32* %254 = getelementptr &(i32* %240)[i64 14];
    store i32* %254 with i32 0;
    i32* %255 = getelementptr &(i32* %240)[i64 15];
    store i32* %255 with i32 0;
    ubr ^super.header9;
  ^super.header10:
    i32 %256 = phi [^super.header9, i32 %237] [^while.body13, i32 %257];
    i32 %257 = add i32 %256, i32 16;
    i1 %258 = scmp lt i32 %257, i32 10;
    cbr i1 %258(prob = 0.67), ^while.body13, ^while.body14;
  ^while.body13:
    i32* %259 = getelementptr &(i32* %10)[i32 %256];
    store i32* %259 with i32 0;
    i32* %260 = getelementptr &(i32* %259)[i64 1];
    store i32* %260 with i32 0;
    i32* %261 = getelementptr &(i32* %259)[i64 2];
    store i32* %261 with i32 0;
    i32* %262 = getelementptr &(i32* %259)[i64 3];
    store i32* %262 with i32 0;
    i32* %263 = getelementptr &(i32* %259)[i64 4];
    store i32* %263 with i32 0;
    i32* %264 = getelementptr &(i32* %259)[i64 5];
    store i32* %264 with i32 0;
    i32* %265 = getelementptr &(i32* %259)[i64 6];
    store i32* %265 with i32 0;
    i32* %266 = getelementptr &(i32* %259)[i64 7];
    store i32* %266 with i32 0;
    i32* %267 = getelementptr &(i32* %259)[i64 8];
    store i32* %267 with i32 0;
    i32* %268 = getelementptr &(i32* %259)[i64 9];
    store i32* %268 with i32 0;
    i32* %269 = getelementptr &(i32* %259)[i64 10];
    store i32* %269 with i32 0;
    i32* %270 = getelementptr &(i32* %259)[i64 11];
    store i32* %270 with i32 0;
    i32* %271 = getelementptr &(i32* %259)[i64 12];
    store i32* %271 with i32 0;
    i32* %272 = getelementptr &(i32* %259)[i64 13];
    store i32* %272 with i32 0;
    i32* %273 = getelementptr &(i32* %259)[i64 14];
    store i32* %273 with i32 0;
    i32* %274 = getelementptr &(i32* %259)[i64 15];
    store i32* %274 with i32 0;
    ubr ^super.header10;
  ^while.body14:
    i32 %275 = phi [^super.header10, i32 %256] [^while.body14, i32 %277];
    i32* %276 = getelementptr &(i32* %10)[i32 %275];
    store i32* %276 with i32 0;
    i32 %277 = add i32 %275, i32 1;
    i1 %278 = scmp lt i32 %277, i32 10;
    cbr i1 %278(prob = 0.97), ^while.body14, ^b1;
  ^b1:
    i32 %279 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 1, i32 %20, i32 1879048192, [10 * i32]* %size, [10 * i32]* %used);
    i1 %280 = scmp eq i32 %279, i32 0;
    cbr i1 %280(prob = 0.5), ^if.then, ^b;
}
