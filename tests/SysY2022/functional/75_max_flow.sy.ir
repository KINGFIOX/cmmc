internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10 * i32]* @size;
internal [10 * [10 * i32]]* @to;
internal [10 * [10 * i32]]* @cap;
internal [10 * [10 * i32]]* @rev;
internal [10 * i32]* @used;
internal func @my_memset(i32* %arr, i32 %val, i32 %n) -> void { NoMemoryRead NoRecurse } {
^entry:
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    i32* %val1 = alloc i32;
    store i32* %val1 with i32 %val;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    i1 %0 = scmp gt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %1 = phi [^indirect, i32 %8] [^entry, i32 %val];
    i32 %2 = phi [^indirect, i32 %5] [^entry, i32 0];
    i32* %3 = getelementptr &(i32* %arr)[i32 %2];
    store i32* %3 with i32 %1;
    i32 %4 = load i32* %i;
    i32 %5 = add i32 %4, i32 1;
    store i32* %i with i32 %5;
    i32 %6 = load i32* %n1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    cbr i1 %7(prob = 0.97), ^indirect, ^b;
^b:
    ret;
^indirect:
    i32 %8 = load i32* %val1;
    ubr ^while.body;
}
internal func @add_node(i32 %u, i32 %v, i32 %c) -> void { NoRecurse } {
^entry:
    [10 * i32]* %0 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i32 %u];
    i32* %1 = getelementptr &([10 * i32]* @size)[i64 0][i32 %u];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &([10 * i32]* %0)[i64 0][i32 %2];
    store i32* %3 with i32 %v;
    [10 * i32]* %4 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %u];
    i32* %5 = getelementptr &([10 * i32]* %4)[i64 0][i32 %2];
    store i32* %5 with i32 %c;
    [10 * i32]* %6 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i32 %u];
    i32* %7 = getelementptr &([10 * i32]* %6)[i64 0][i32 %2];
    i32* %8 = getelementptr &([10 * i32]* @size)[i64 0][i32 %v];
    i32 %9 = load i32* %8;
    store i32* %7 with i32 %9;
    [10 * i32]* %10 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i32 %v];
    i32* %11 = getelementptr &([10 * i32]* %10)[i64 0][i32 %9];
    store i32* %11 with i32 %u;
    [10 * i32]* %12 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %v];
    i32* %13 = getelementptr &([10 * i32]* %12)[i64 0][i32 %9];
    store i32* %13 with i32 0;
    [10 * i32]* %14 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i32 %v];
    i32* %15 = getelementptr &([10 * i32]* %14)[i64 0][i32 %9];
    i32 %16 = load i32* %1;
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %16, i32 1;
    store i32* %1 with i32 %17;
    i32 %18 = load i32* %8;
    i32 %19 = add i32 %18, i32 1;
    store i32* %8 with i32 %19;
    ret;
}
internal func @dfs(i32 %s, i32 %t, i32 %f) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %f1 = alloc i32;
    i32* %t1 = alloc i32;
    i32* %s1 = alloc i32;
    store i32* %s1 with i32 %s;
    store i32* %t1 with i32 %t;
    store i32* %f1 with i32 %f;
    i1 %0 = scmp eq i32 %s, i32 %t;
    cbr i1 %0(prob = 0.5), ^b1, ^b;
^b:
    i32* %1 = getelementptr &([10 * i32]* @used)[i64 0][i32 %s];
    store i32* %1 with i32 1;
    store i32* %i with i32 0;
    ubr ^while.guard;
^b1:
    i32 %2 = phi [^entry, i32 %f] [^b5, i32 0] [^while.guard, i32 0] [^if.then2, i32 %45];
    ret i32 %2;
^while.guard:
    i32 %3 = phi [^if.then, i32 %25] [^b, i32 0];
    i32 %4 = load i32* %s1;
    i32* %5 = getelementptr &([10 * i32]* @size)[i64 0][i32 %4];
    i32 %6 = load i32* %5;
    i1 %7 = scmp lt i32 %3, i32 %6;
    cbr i1 %7(prob = 0.97), ^indirect, ^b1;
^indirect:
    i32 %8 = load i32* %i;
    ubr ^while.body;
^while.body:
    i32 %9 = phi [^b5, i32 %64] [^indirect, i32 %8];
    i32 %10 = phi [^b5, i32 %65] [^indirect, i32 %4];
    [10 * i32]* %11 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i32 %10];
    i32* %12 = getelementptr &([10 * i32]* %11)[i64 0][i32 %9];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([10 * i32]* @used)[i64 0][i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^indirect1, ^b2;
^indirect1:
    i32 %17 = load i32* %i;
    ubr ^if.then;
^b2:
    i32 %18 = load i32* %s1;
    [10 * i32]* %19 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %18];
    i32 %20 = load i32* %i;
    i32* %21 = getelementptr &([10 * i32]* %19)[i64 0][i32 %20];
    i32 %22 = load i32* %21;
    i1 %23 = scmp lt i32 %22, i32 1;
    cbr i1 %23(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %24 = phi [^b2, i32 %20] [^indirect1, i32 %17];
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    ubr ^while.guard;
^b3:
    i32 %26 = load i32* %f1;
    [10 * i32]* %27 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %18];
    i32* %28 = getelementptr &([10 * i32]* %27)[i64 0][i32 %20];
    i32 %29 = load i32* %28;
    i1 %30 = scmp lt i32 %26, i32 %29;
    cbr i1 %30(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %31 = load i32* %s1;
    i32 %32 = load i32* %i;
    ubr ^b4;
^if.else:
    i32 %33 = load i32* %s1;
    [10 * i32]* %34 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %33];
    i32 %35 = load i32* %i;
    i32* %36 = getelementptr &([10 * i32]* %34)[i64 0][i32 %35];
    i32 %37 = load i32* %36;
    ubr ^b4;
^b4:
    i32 %38 = phi [^if.then1, i32 %32] [^if.else, i32 %35];
    i32 %39 = phi [^if.then1, i32 %31] [^if.else, i32 %33];
    i32 %40 = phi [^if.then1, i32 %26] [^if.else, i32 %37];
    [10 * i32]* %41 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i32 %39];
    i32* %42 = getelementptr &([10 * i32]* %41)[i64 0][i32 %38];
    i32 %43 = load i32* %42;
    i32 %44 = load i32* %t1;
    i32 %45 = call (i32, i32, i32) -> i32 @dfs(i32 %43, i32 %44, i32 %40);
    i1 %46 = scmp gt i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then2, ^b5;
^if.then2:
    i32 %47 = load i32* %s1;
    [10 * i32]* %48 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %47];
    i32 %49 = load i32* %i;
    i32* %50 = getelementptr &([10 * i32]* %48)[i64 0][i32 %49];
    i32 %51 = load i32* %50;
    i32 %52 = sub i32 %51, i32 %45;
    store i32* %50 with i32 %52;
    [10 * i32]* %53 = getelementptr &([10 * [10 * i32]]* @to)[i64 0][i32 %47];
    i32* %54 = getelementptr &([10 * i32]* %53)[i64 0][i32 %49];
    i32 %55 = load i32* %54;
    [10 * i32]* %56 = getelementptr &([10 * [10 * i32]]* @cap)[i64 0][i32 %55];
    [10 * i32]* %57 = getelementptr &([10 * [10 * i32]]* @rev)[i64 0][i32 %47];
    i32* %58 = getelementptr &([10 * i32]* %57)[i64 0][i32 %49];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([10 * i32]* %56)[i64 0][i32 %59];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %61, i32 %45;
    store i32* %60 with i32 %62;
    ubr ^b1;
^b5:
    i32 %63 = load i32* %i;
    i32 %64 = add i32 %63, i32 1;
    store i32* %i with i32 %64;
    i32 %65 = load i32* %s1;
    i32* %66 = getelementptr &([10 * i32]* @size)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    i1 %68 = scmp lt i32 %64, i32 %67;
    cbr i1 %68(prob = 0.97), ^while.body, ^b1;
}
internal func @max_flow(i32 %s, i32 %t) -> i32 { NoRecurse } {
^entry:
    i32* %flow = alloc i32;
    i32* %t1 = alloc i32;
    i32* %s1 = alloc i32;
    store i32* %s1 with i32 %s;
    store i32* %t1 with i32 %t;
    store i32* %flow with i32 0;
    i32* %0 = getelementptr &([10 * i32]* @used)[i64 0][i64 0];
    ubr ^while.body;
^while.body:
    call (i32*, i32, i32) -> void @my_memset(i32* %0, i32 0, i32 10);
    i32 %1 = load i32* %s1;
    i32 %2 = load i32* %t1;
    i32 %3 = call (i32, i32, i32) -> i32 @dfs(i32 %1, i32 %2, i32 1879048192);
    i1 %4 = scmp eq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^b:
    i32 %5 = load i32* %flow;
    i32 %6 = add i32 %5, i32 %3;
    store i32* %flow with i32 %6;
    ubr ^while.body;
^if.then:
    i32 %7 = load i32* %flow;
    ret i32 %7;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %E = alloc i32;
    i32* %V = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %V with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %E with i32 %1;
    i32* %2 = getelementptr &([10 * i32]* @size)[i64 0][i64 0];
    call (i32*, i32, i32) -> void @my_memset(i32* %2, i32 0, i32 10);
    i32 %3 = load i32* %E;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    call (i32, i32, i32) -> void @add_node(i32 %5, i32 %6, i32 %7);
    i32 %8 = load i32* %E;
    i32 %9 = add i32 %8, i32 -1;
    store i32* %E with i32 %9;
    i1 %10 = scmp gt i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^b:
    i32 %11 = load i32* %V;
    i32 %12 = call (i32, i32) -> i32 @max_flow(i32 1, i32 %11);
    call (i32) -> void @putint(i32 %12);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
