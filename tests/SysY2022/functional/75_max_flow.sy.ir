internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10 * [10 * i32]]* @to, align 8 { Flexible };
internal [10 * [10 * i32]]* @cap, align 8 { Flexible };
internal [10 * [10 * i32]]* @rev, align 8 { Flexible };
internal func @dfs(i32 %s, i32 %t, i32 %f, [10 * i32]* %0, [10 * i32]* %1) -> i32 {
  ^entry:
    i1 %2 = icmp eq i32 %s, i32 %t;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    i32* %3 = getelementptr &([10 * i32]* %1)[i64 0][i32 %s];
    store i32* %3 with i32 1;
    [10 * [10 * i32]]* %4 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * i32]* %5 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %s];
    [10 * [10 * i32]]* %6 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * i32]* %7 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %s];
    i32* %8 = getelementptr &([10 * i32]* %0)[i64 0][i32 %s];
    ubr ^while.header;
  ^b1:
    i32 %9 = phi [^entry, i32 %f] [^while.header, i32 0] [^if.then1, i32 %28];
    ret i32 %9;
  ^while.header:
    i32 %10 = phi [^b, i32 0] [^if.then, i32 %18];
    i32 %11 = load i32* %8;
    i1 %12 = icmp slt i32 %10, i32 %11;
    cbr i1 %12(prob = 0.984615), ^while.body, ^b1;
  ^while.body:
    i32* %13 = getelementptr &([10 * i32]* %7)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([10 * i32]* %1)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = icmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %18 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b2:
    i32* %19 = getelementptr &([10 * i32]* %5)[i64 0][i32 %10];
    i32 %20 = load i32* %19;
    i1 %21 = icmp slt i32 %20, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then, ^b3;
  ^b3:
    i1 %22 = icmp eq i32 %t, i32 %14;
    i32 %23 = smin i32 %f, i32 %20;
    [10 * [10 * i32]]* %24 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    cbr i1 %22(prob = 0.5), ^b5, ^b4;
  ^b4:
    [10 * i32]* %25 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %14];
    [10 * i32]* %26 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %14];
    i32* %27 = getelementptr &([10 * i32]* %0)[i64 0][i32 %14];
    store i32* %15 with i32 1;
    ubr ^while.header1;
  ^b5:
    i32 %28 = phi [^b3, i32 %23] [^while.header1, i32 0] [^if.then3, i32 %57];
    i1 %29 = icmp sgt i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.then;
  ^if.then1:
    i32 %30 = load i32* %19;
    i32 %31 = sub i32 %30, i32 %28;
    store i32* %19 with i32 %31;
    [10 * i32]* %32 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %s];
    i32* %33 = getelementptr &([10 * i32]* %32)[i64 0][i32 %10];
    i32 %34 = load i32* %13;
    i32 %35 = load i32* %33;
    [10 * i32]* %36 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %34];
    i32* %37 = getelementptr &([10 * i32]* %36)[i64 0][i32 %35];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %28, i32 %38;
    store i32* %37 with i32 %39;
    ubr ^b1;
  ^while.header1:
    i32 %40 = phi [^b4, i32 0] [^if.then2, i32 %48];
    i32 %41 = load i32* %27;
    i1 %42 = icmp slt i32 %40, i32 %41;
    cbr i1 %42(prob = 0.984615), ^while.body1, ^b5;
  ^while.body1:
    i32* %43 = getelementptr &([10 * i32]* %26)[i64 0][i32 %40];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &([10 * i32]* %1)[i64 0][i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = icmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^if.then2, ^b6;
  ^if.then2:
    i32 %48 = add i32 %40, i32 1;
    ubr ^while.header1;
  ^b6:
    i32* %49 = getelementptr &([10 * i32]* %25)[i64 0][i32 %40];
    i32 %50 = load i32* %49;
    i1 %51 = icmp slt i32 %50, i32 1;
    cbr i1 %51(prob = 0.5), ^if.then2, ^b7;
  ^b7:
    i32 %52 = smin i32 %23, i32 %50;
    i1 %53 = icmp eq i32 %t, i32 %44;
    cbr i1 %53(prob = 0.5), ^b9, ^b8;
  ^b8:
    [10 * i32]* %54 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %44];
    [10 * i32]* %55 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %44];
    i32* %56 = getelementptr &([10 * i32]* %0)[i64 0][i32 %44];
    store i32* %45 with i32 1;
    ubr ^while.header2;
  ^b9:
    i32 %57 = phi [^b7, i32 %52] [^while.header2, i32 0] [^if.then5, i32 %86];
    i1 %58 = icmp sgt i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then3, ^if.then2;
  ^if.then3:
    i32 %59 = load i32* %49;
    i32 %60 = sub i32 %59, i32 %57;
    store i32* %49 with i32 %60;
    [10 * i32]* %61 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %14];
    i32* %62 = getelementptr &([10 * i32]* %61)[i64 0][i32 %40];
    i32 %63 = load i32* %43;
    i32 %64 = load i32* %62;
    [10 * i32]* %65 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %63];
    i32* %66 = getelementptr &([10 * i32]* %65)[i64 0][i32 %64];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %57, i32 %67;
    store i32* %66 with i32 %68;
    ubr ^b5;
  ^while.header2:
    i32 %69 = phi [^b8, i32 0] [^if.then4, i32 %77];
    i32 %70 = load i32* %56;
    i1 %71 = icmp slt i32 %69, i32 %70;
    cbr i1 %71(prob = 0.984615), ^while.body2, ^b9;
  ^while.body2:
    i32* %72 = getelementptr &([10 * i32]* %55)[i64 0][i32 %69];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &([10 * i32]* %1)[i64 0][i32 %73];
    i32 %75 = load i32* %74;
    i1 %76 = icmp neq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^if.then4, ^b10;
  ^if.then4:
    i32 %77 = add i32 %69, i32 1;
    ubr ^while.header2;
  ^b10:
    i32* %78 = getelementptr &([10 * i32]* %54)[i64 0][i32 %69];
    i32 %79 = load i32* %78;
    i1 %80 = icmp slt i32 %79, i32 1;
    cbr i1 %80(prob = 0.5), ^if.then4, ^b11;
  ^b11:
    i32 %81 = smin i32 %52, i32 %79;
    i1 %82 = icmp eq i32 %t, i32 %73;
    cbr i1 %82(prob = 0.5), ^b13, ^b12;
  ^b12:
    [10 * i32]* %83 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %73];
    [10 * i32]* %84 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %73];
    i32* %85 = getelementptr &([10 * i32]* %0)[i64 0][i32 %73];
    store i32* %74 with i32 1;
    ubr ^while.header3;
  ^b13:
    i32 %86 = phi [^b11, i32 %81] [^while.header3, i32 0] [^if.then7, i32 %111];
    i1 %87 = icmp sgt i32 %86, i32 0;
    cbr i1 %87(prob = 0.5), ^if.then5, ^if.then4;
  ^if.then5:
    i32 %88 = load i32* %78;
    i32 %89 = sub i32 %88, i32 %86;
    store i32* %78 with i32 %89;
    [10 * i32]* %90 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %44];
    i32* %91 = getelementptr &([10 * i32]* %90)[i64 0][i32 %69];
    i32 %92 = load i32* %72;
    i32 %93 = load i32* %91;
    [10 * i32]* %94 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %92];
    i32* %95 = getelementptr &([10 * i32]* %94)[i64 0][i32 %93];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %86, i32 %96;
    store i32* %95 with i32 %97;
    ubr ^b9;
  ^while.header3:
    i32 %98 = phi [^b12, i32 0] [^if.then6, i32 %106];
    i32 %99 = load i32* %85;
    i1 %100 = icmp slt i32 %98, i32 %99;
    cbr i1 %100(prob = 0.984615), ^while.body3, ^b13;
  ^while.body3:
    i32* %101 = getelementptr &([10 * i32]* %84)[i64 0][i32 %98];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([10 * i32]* %1)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i1 %105 = icmp neq i32 %104, i32 0;
    cbr i1 %105(prob = 0.5), ^if.then6, ^b14;
  ^if.then6:
    i32 %106 = add i32 %98, i32 1;
    ubr ^while.header3;
  ^b14:
    i32* %107 = getelementptr &([10 * i32]* %83)[i64 0][i32 %98];
    i32 %108 = load i32* %107;
    i1 %109 = icmp slt i32 %108, i32 1;
    cbr i1 %109(prob = 0.5), ^if.then6, ^b15;
  ^b15:
    i32 %110 = smin i32 %81, i32 %108;
    i32 %111 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 %102, i32 %t, i32 %110, [10 * i32]* %0, [10 * i32]* %1);
    i1 %112 = icmp sgt i32 %111, i32 0;
    cbr i1 %112(prob = 0.5), ^if.then7, ^if.then6;
  ^if.then7:
    i32 %113 = load i32* %107;
    i32 %114 = sub i32 %113, i32 %111;
    store i32* %107 with i32 %114;
    [10 * i32]* %115 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %73];
    i32* %116 = getelementptr &([10 * i32]* %115)[i64 0][i32 %98];
    i32 %117 = load i32* %101;
    i32 %118 = load i32* %116;
    [10 * i32]* %119 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %117];
    i32* %120 = getelementptr &([10 * i32]* %119)[i64 0][i32 %118];
    i32 %121 = load i32* %120;
    i32 %122 = add i32 %111, i32 %121;
    store i32* %120 with i32 %122;
    ubr ^b13;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %used = alloc [10 * i32], align 8;
    [10 * i32]* %size = alloc [10 * i32], align 8;
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = icmp sgt i32 %1, i32 0;
    i32* %3 = getelementptr &([10 * i32]* %size)[i64 0][i64 0];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([10 * i32]* %size)[i64 0][i64 1];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %size)[i64 0][i64 2];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([10 * i32]* %size)[i64 0][i64 3];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([10 * i32]* %size)[i64 0][i64 4];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([10 * i32]* %size)[i64 0][i64 5];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([10 * i32]* %size)[i64 0][i64 6];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %size)[i64 0][i64 7];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %size)[i64 0][i64 8];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %size)[i64 0][i64 9];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %used)[i64 0][i64 0];
    i32* %14 = getelementptr &([10 * i32]* %used)[i64 0][i64 1];
    i32* %15 = getelementptr &([10 * i32]* %used)[i64 0][i64 2];
    i32* %16 = getelementptr &([10 * i32]* %used)[i64 0][i64 3];
    i32* %17 = getelementptr &([10 * i32]* %used)[i64 0][i64 4];
    i32* %18 = getelementptr &([10 * i32]* %used)[i64 0][i64 5];
    i32* %19 = getelementptr &([10 * i32]* %used)[i64 0][i64 6];
    i32* %20 = getelementptr &([10 * i32]* %used)[i64 0][i64 7];
    i32* %21 = getelementptr &([10 * i32]* %used)[i64 0][i64 8];
    i32* %22 = getelementptr &([10 * i32]* %used)[i64 0][i64 9];
    [10 * [10 * i32]]* %23 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %24 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %25 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    cbr i1 %2(prob = 0.984615), ^while.body, ^while.header;
  ^while.body:
    i32 %26 = phi [^entry, i32 %1] [^while.body, i32 %49];
    i32 %27 = call () -> i32 @getint();
    i32* %28 = getelementptr &([10 * i32]* %size)[i64 0][i32 %27];
    i32 %29 = call () -> i32 @getint();
    i32 %30 = call () -> i32 @getint();
    i32 %31 = load i32* %28;
    [10 * i32]* %32 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %27];
    i32* %33 = getelementptr &([10 * i32]* %32)[i64 0][i32 %31];
    store i32* %33 with i32 %29;
    [10 * i32]* %34 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %27];
    i32* %35 = getelementptr &([10 * i32]* %34)[i64 0][i32 %31];
    store i32* %35 with i32 %30;
    [10 * i32]* %36 = getelementptr &([10 * [10 * i32]]* %25)[i64 0][i32 %27];
    i32* %37 = getelementptr &([10 * i32]* %36)[i64 0][i32 %31];
    i32* %38 = getelementptr &([10 * i32]* %size)[i64 0][i32 %29];
    i32 %39 = load i32* %38;
    store i32* %37 with i32 %39;
    [10 * i32]* %40 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %29];
    i32* %41 = getelementptr &([10 * i32]* %40)[i64 0][i32 %39];
    store i32* %41 with i32 %27;
    [10 * i32]* %42 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %29];
    i32* %43 = getelementptr &([10 * i32]* %42)[i64 0][i32 %39];
    store i32* %43 with i32 0;
    [10 * i32]* %44 = getelementptr &([10 * [10 * i32]]* %25)[i64 0][i32 %29];
    i32* %45 = getelementptr &([10 * i32]* %44)[i64 0][i32 %39];
    store i32* %45 with i32 %31;
    i32 %46 = add i32 %31, i32 1;
    store i32* %28 with i32 %46;
    i32 %47 = load i32* %38;
    i32 %48 = add i32 %47, i32 1;
    store i32* %38 with i32 %48;
    i32 %49 = add i32 %26, i32 -1;
    i1 %50 = icmp sgt i32 %49, i32 0;
    cbr i1 %50(prob = 0.984615), ^while.body, ^while.header;
  ^while.header:
    i32 %51 = phi [^entry, i32 0] [^while.body, i32 0] [^b, i32 %54];
    store i32* %13 with i32 0;
    store i32* %14 with i32 0;
    store i32* %15 with i32 0;
    store i32* %16 with i32 0;
    store i32* %17 with i32 0;
    store i32* %18 with i32 0;
    store i32* %19 with i32 0;
    store i32* %20 with i32 0;
    store i32* %21 with i32 0;
    store i32* %22 with i32 0;
    i32 %52 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 1, i32 %0, i32 1879048192, [10 * i32]* %size, [10 * i32]* %used);
    i1 %53 = icmp eq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %54 = add i32 %51, i32 %52;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %51);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
