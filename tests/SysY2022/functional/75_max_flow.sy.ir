internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [10 * [10 * i32]]* @to;
internal [10 * [10 * i32]]* @cap;
internal [10 * [10 * i32]]* @rev;
internal func @dfs(i32 %s, i32 %t, i32 %f, [10 * i32]* %0, [10 * i32]* %1) -> i32 {
  ^entry:
    i1 %2 = icmp eq i32 %s, i32 %t;
    cbr i1 %2(prob = 0.5), ^b1, ^b;
  ^b:
    i32* %3 = getelementptr &([10 * i32]* %1)[i64 0][i32 %s];
    store i32* %3 with i32 1;
    [10 * [10 * i32]]* %4 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * i32]* %5 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %s];
    [10 * [10 * i32]]* %6 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * i32]* %7 = getelementptr &([10 * [10 * i32]]* %6)[i64 0][i32 %s];
    i32* %8 = getelementptr &([10 * i32]* %0)[i64 0][i32 %s];
    ubr ^while.header;
  ^b1:
    i32 %9 = phi [^entry, i32 %f] [^while.header, i32 0] [^if.then2, i32 %24];
    ret i32 %9;
  ^while.header:
    i32 %10 = phi [^b, i32 0] [^if.then, i32 %18] [^if.then1, i32 %22] [^b4, i32 %37];
    i32 %11 = load i32* %8;
    i1 %12 = icmp slt i32 %10, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32* %13 = getelementptr &([10 * i32]* %7)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([10 * i32]* %1)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = icmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b2;
  ^if.then:
    i32 %18 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b2:
    i32* %19 = getelementptr &([10 * i32]* %5)[i64 0][i32 %10];
    i32 %20 = load i32* %19;
    i1 %21 = icmp slt i32 %20, i32 1;
    cbr i1 %21(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
  ^b3:
    i32 %23 = smin i32 %f, i32 %20;
    i32 %24 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 %14, i32 %t, i32 %23, [10 * i32]* %0, [10 * i32]* %1);
    i1 %25 = icmp sgt i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then2, ^b4;
  ^if.then2:
    i32 %26 = load i32* %19;
    i32 %27 = sub i32 %26, i32 %24;
    store i32* %19 with i32 %27;
    [10 * [10 * i32]]* %28 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    [10 * i32]* %29 = getelementptr &([10 * [10 * i32]]* %28)[i64 0][i32 %s];
    i32* %30 = getelementptr &([10 * i32]* %29)[i64 0][i32 %10];
    i32 %31 = load i32* %13;
    i32 %32 = load i32* %30;
    [10 * i32]* %33 = getelementptr &([10 * [10 * i32]]* %4)[i64 0][i32 %31];
    i32* %34 = getelementptr &([10 * i32]* %33)[i64 0][i32 %32];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %24, i32 %35;
    store i32* %34 with i32 %36;
    ubr ^b1;
  ^b4:
    i32 %37 = add i32 %10, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %used = alloc [10 * i32];
    [10 * i32]* %size = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %size)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %size)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([10 * i32]* %size)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([10 * i32]* %size)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([10 * i32]* %size)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %size)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([10 * i32]* %size)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([10 * i32]* %size)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([10 * i32]* %size)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([10 * i32]* %size)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %used)[i64 0][i64 0];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([10 * i32]* %used)[i64 0][i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([10 * i32]* %used)[i64 0][i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([10 * i32]* %used)[i64 0][i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([10 * i32]* %used)[i64 0][i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([10 * i32]* %used)[i64 0][i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([10 * i32]* %used)[i64 0][i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([10 * i32]* %used)[i64 0][i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([10 * i32]* %used)[i64 0][i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([10 * i32]* %used)[i64 0][i64 9];
    store i32* %19 with i32 0;
    i32 %20 = call () -> i32 @getint();
    i32 %21 = call () -> i32 @getint();
    [10 * [10 * i32]]* %22 = ptrcast [10 * [10 * i32]]* @to to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %23 = ptrcast [10 * [10 * i32]]* @cap to [10 * [10 * i32]]*;
    [10 * [10 * i32]]* %24 = ptrcast [10 * [10 * i32]]* @rev to [10 * [10 * i32]]*;
    ubr ^super.header;
  ^super.header:
    i32 %25 = phi [^entry, i32 0] [^while.body, i32 %26];
    i32 %26 = add i32 %25, i32 4;
    i1 %27 = icmp slt i32 %26, i32 10;
    cbr i1 %27(prob = 0.89), ^while.body, ^while.body1;
  ^while.body:
    i32* %28 = getelementptr &(i32* %0)[i32 %25];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    ubr ^super.header;
  ^while.body1:
    i32 %32 = phi [^super.header, i32 %25] [^while.body1, i32 %34];
    i32* %33 = getelementptr &(i32* %0)[i32 %32];
    store i32* %33 with i32 0;
    i32 %34 = add i32 %32, i32 1;
    i1 %35 = icmp slt i32 %34, i32 10;
    cbr i1 %35(prob = 0.75), ^while.body1, ^entry1;
  ^entry1:
    i1 %36 = icmp sgt i32 %21, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body2, ^while.header;
  ^while.header:
    i32 %37 = phi [^entry1, i32 0] [^while.body2, i32 0] [^b, i32 %76];
    ubr ^super.header1;
  ^while.body2:
    i32 %38 = phi [^entry1, i32 %21] [^while.body2, i32 %61];
    i32 %39 = call () -> i32 @getint();
    i32* %40 = getelementptr &([10 * i32]* %size)[i64 0][i32 %39];
    i32 %41 = call () -> i32 @getint();
    i32 %42 = call () -> i32 @getint();
    i32 %43 = load i32* %40;
    [10 * i32]* %44 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %39];
    i32* %45 = getelementptr &([10 * i32]* %44)[i64 0][i32 %43];
    store i32* %45 with i32 %41;
    [10 * i32]* %46 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %39];
    i32* %47 = getelementptr &([10 * i32]* %46)[i64 0][i32 %43];
    store i32* %47 with i32 %42;
    [10 * i32]* %48 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %39];
    i32* %49 = getelementptr &([10 * i32]* %48)[i64 0][i32 %43];
    i32* %50 = getelementptr &([10 * i32]* %size)[i64 0][i32 %41];
    i32 %51 = load i32* %50;
    store i32* %49 with i32 %51;
    [10 * i32]* %52 = getelementptr &([10 * [10 * i32]]* %22)[i64 0][i32 %41];
    i32* %53 = getelementptr &([10 * i32]* %52)[i64 0][i32 %51];
    store i32* %53 with i32 %39;
    [10 * i32]* %54 = getelementptr &([10 * [10 * i32]]* %23)[i64 0][i32 %41];
    i32* %55 = getelementptr &([10 * i32]* %54)[i64 0][i32 %51];
    store i32* %55 with i32 0;
    [10 * i32]* %56 = getelementptr &([10 * [10 * i32]]* %24)[i64 0][i32 %41];
    i32* %57 = getelementptr &([10 * i32]* %56)[i64 0][i32 %51];
    store i32* %57 with i32 %43;
    i32 %58 = add i32 %43, i32 1;
    store i32* %40 with i32 %58;
    i32 %59 = load i32* %50;
    i32 %60 = add i32 %59, i32 1;
    store i32* %50 with i32 %60;
    i32 %61 = add i32 %38, i32 -1;
    i1 %62 = icmp sgt i32 %61, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body2, ^while.header;
  ^super.header1:
    i32 %63 = phi [^while.header, i32 0] [^while.body3, i32 %64];
    i32 %64 = add i32 %63, i32 4;
    i1 %65 = icmp slt i32 %64, i32 10;
    cbr i1 %65(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body3:
    i32* %66 = getelementptr &(i32* %10)[i32 %63];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %66)[i64 1];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %66)[i64 2];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %66)[i64 3];
    store i32* %69 with i32 0;
    ubr ^super.header1;
  ^while.body4:
    i32 %70 = phi [^super.header1, i32 %63] [^while.body4, i32 %72];
    i32* %71 = getelementptr &(i32* %10)[i32 %70];
    store i32* %71 with i32 0;
    i32 %72 = add i32 %70, i32 1;
    i1 %73 = icmp slt i32 %72, i32 10;
    cbr i1 %73(prob = 0.75), ^while.body4, ^while.header1;
  ^while.header1:
    i32 %74 = call (i32, i32, i32, [10 * i32]*, [10 * i32]*) -> i32 @dfs(i32 1, i32 %20, i32 1879048192, [10 * i32]* %size, [10 * i32]* %used);
    i1 %75 = icmp eq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %76 = add i32 %37, i32 %74;
    ubr ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %37);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
