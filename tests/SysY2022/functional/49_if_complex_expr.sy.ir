internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %result = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %result with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 5;
    store i32* %c with i32 1;
    store i32* %d with i32 -2;
    store i32* %result with i32 2;
    i32 %0 = load i32* %d;
    i32 %1 = mul i32 %0, i32 1;
    i32 %2 = sdiv i32 %1, i32 2;
    i1 %3 = scmp lt i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^b1, ^b2;
^b1:
    i1 %6 = phi [^b4, i1 %24] [^entry, i1 true];
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b5;
^b2:
    i32 %9 = load i32* %a;
    i32 %10 = load i32* %b;
    i32 %11 = sub i32 %9, i32 %10;
    i1 %12 = scmp neq i32 %11, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b3, ^b4;
^if.then:
    i32 %15 = load i32* %result;
    call (i32) -> void @putint(i32 %15);
    ubr ^b5;
^b3:
    i32 %16 = load i32* %c;
    i32 %17 = add i32 %16, i32 3;
    i32 %18 = srem i32 %17, i32 2;
    i1 %19 = scmp neq i32 %18, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    ubr ^b4;
^b4:
    i1 %22 = phi [^b3, i1 %21] [^b2, i1 false];
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b1;
^b5:
    i32 %25 = load i32* %d;
    i32 %26 = srem i32 %25, i32 2;
    i32 %27 = add i32 %26, i32 67;
    i1 %28 = scmp lt i32 %27, i32 0;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %31 = phi [^b9, i1 %49] [^b5, i1 true];
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then1, ^b10;
^b7:
    i32 %34 = load i32* %a;
    i32 %35 = load i32* %b;
    i32 %36 = sub i32 %34, i32 %35;
    i1 %37 = scmp neq i32 %36, i32 0;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^b8, ^b9;
^if.then1:
    store i32* %result with i32 4;
    i32 %40 = load i32* %result;
    call (i32) -> void @putint(i32 %40);
    ubr ^b10;
^b8:
    i32 %41 = load i32* %c;
    i32 %42 = add i32 %41, i32 2;
    i32 %43 = srem i32 %42, i32 2;
    i1 %44 = scmp neq i32 %43, i32 0;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    ubr ^b9;
^b9:
    i1 %47 = phi [^b8, i1 %46] [^b7, i1 false];
    i32 %48 = zext i1 %47 to i32;
    i1 %49 = scmp neq i32 %48, i32 0;
    ubr ^b6;
^b10:
    ret i32 0;
}
