internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = scmp ge i32 %0, i32 %r;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^b1, i32 %30];
    i32 %8 = phi [^b, i32 %l] [^b1, i32 %28];
    i32 %9 = phi [^b, i32 %3] [^b1, i32 %29];
    i1 %10 = scmp lt i32 %8, i32 %3;
    i1 %11 = scmp lt i32 %9, i32 %r;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %16 = load i32* %15;
    i1 %17 = scmp lt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^indirect:
    cbr i1 %10(prob = 0.97), ^super.header, ^indirect1;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    i32 %19 = load i32* %13;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %8, i32 1;
    ubr ^b1;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %9, i32 1;
    ubr ^b1;
  ^super.header:
    i32 %23 = phi [^indirect, i32 %7] [^while.body1, i32 %79];
    i32 %24 = phi [^indirect, i32 %8] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 16;
    i1 %26 = scmp lt i32 %25, i32 %3;
    cbr i1 %26(prob = 0.67), ^while.body1, ^super.header1;
  ^indirect1:
    i32 %27 = phi [^indirect, i32 %7] [^while.body5, i32 %199];
    cbr i1 %11(prob = 0.97), ^super.header2, ^while.header1;
  ^b1:
    i32 %28 = phi [^if.then1, i32 %20] [^if.else, i32 %8];
    i32 %29 = phi [^if.then1, i32 %9] [^if.else, i32 %22];
    i32 %30 = add i32 %7, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32* %31 = getelementptr &([100 * i32]* %6)[i64 0][i32 %24];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([100 * i32]* %5)[i64 0][i32 %23];
    store i32* %33 with i32 %32;
    i32* %34 = getelementptr &(i32* %31)[i64 1];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &(i32* %33)[i64 1];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %31)[i64 2];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %33)[i64 2];
    store i32* %39 with i32 %38;
    i32* %40 = getelementptr &(i32* %31)[i64 3];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %33)[i64 3];
    store i32* %42 with i32 %41;
    i32* %43 = getelementptr &(i32* %31)[i64 4];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %33)[i64 4];
    store i32* %45 with i32 %44;
    i32* %46 = getelementptr &(i32* %31)[i64 5];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %33)[i64 5];
    store i32* %48 with i32 %47;
    i32* %49 = getelementptr &(i32* %31)[i64 6];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %33)[i64 6];
    store i32* %51 with i32 %50;
    i32* %52 = getelementptr &(i32* %31)[i64 7];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %33)[i64 7];
    store i32* %54 with i32 %53;
    i32* %55 = getelementptr &(i32* %31)[i64 8];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %33)[i64 8];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %31)[i64 9];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %33)[i64 9];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %31)[i64 10];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %33)[i64 10];
    store i32* %63 with i32 %62;
    i32* %64 = getelementptr &(i32* %31)[i64 11];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %33)[i64 11];
    store i32* %66 with i32 %65;
    i32* %67 = getelementptr &(i32* %31)[i64 12];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %33)[i64 12];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %31)[i64 13];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %33)[i64 13];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %31)[i64 14];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %33)[i64 14];
    store i32* %75 with i32 %74;
    i32* %76 = getelementptr &(i32* %31)[i64 15];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %33)[i64 15];
    store i32* %78 with i32 %77;
    i32 %79 = add i32 %23, i32 16;
    ubr ^super.header;
  ^super.header1:
    i32 %80 = phi [^super.header, i32 %23] [^while.body2, i32 %138];
    i32 %81 = phi [^super.header, i32 %24] [^while.body2, i32 %82];
    i32 %82 = add i32 %81, i32 16;
    i1 %83 = scmp lt i32 %82, i32 %3;
    cbr i1 %83(prob = 0.67), ^while.body2, ^while.body5;
  ^super.header2:
    i32 %84 = phi [^indirect1, i32 %27] [^while.body3, i32 %187];
    i32 %85 = phi [^indirect1, i32 %9] [^while.body3, i32 %86];
    i32 %86 = add i32 %85, i32 16;
    i1 %87 = scmp lt i32 %86, i32 %r;
    cbr i1 %87(prob = 0.67), ^while.body3, ^super.header3;
  ^while.header1:
    i32 %88 = phi [^indirect1, i32 %l] [^while.body4, i32 %191] [^while.body7, i32 %l];
    i1 %89 = scmp lt i32 %88, i32 %r;
    cbr i1 %89(prob = 0.97), ^while.body4, ^if.then;
  ^while.body2:
    i32* %90 = getelementptr &([100 * i32]* %6)[i64 0][i32 %81];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([100 * i32]* %5)[i64 0][i32 %80];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %90)[i64 1];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %90)[i64 2];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %90)[i64 3];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %90)[i64 4];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %92)[i64 4];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %90)[i64 5];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %92)[i64 5];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %90)[i64 6];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %92)[i64 6];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %90)[i64 7];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %92)[i64 7];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %90)[i64 8];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %92)[i64 8];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %90)[i64 9];
    i32 %118 = load i32* %117;
    i32* %119 = getelementptr &(i32* %92)[i64 9];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %90)[i64 10];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %92)[i64 10];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %90)[i64 11];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %92)[i64 11];
    store i32* %125 with i32 %124;
    i32* %126 = getelementptr &(i32* %90)[i64 12];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %92)[i64 12];
    store i32* %128 with i32 %127;
    i32* %129 = getelementptr &(i32* %90)[i64 13];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %92)[i64 13];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %90)[i64 14];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %92)[i64 14];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %90)[i64 15];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %92)[i64 15];
    store i32* %137 with i32 %136;
    i32 %138 = add i32 %80, i32 16;
    ubr ^super.header1;
  ^while.body3:
    i32* %139 = getelementptr &([100 * i32]* %6)[i64 0][i32 %85];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &([100 * i32]* %5)[i64 0][i32 %84];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %139)[i64 1];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %141)[i64 1];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %139)[i64 2];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %141)[i64 2];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %139)[i64 3];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %141)[i64 3];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %139)[i64 4];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %141)[i64 4];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %139)[i64 5];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %141)[i64 5];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %139)[i64 6];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %141)[i64 6];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %139)[i64 7];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %141)[i64 7];
    store i32* %162 with i32 %161;
    i32* %163 = getelementptr &(i32* %139)[i64 8];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %141)[i64 8];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &(i32* %139)[i64 9];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %141)[i64 9];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %139)[i64 10];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %141)[i64 10];
    store i32* %171 with i32 %170;
    i32* %172 = getelementptr &(i32* %139)[i64 11];
    i32 %173 = load i32* %172;
    i32* %174 = getelementptr &(i32* %141)[i64 11];
    store i32* %174 with i32 %173;
    i32* %175 = getelementptr &(i32* %139)[i64 12];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %141)[i64 12];
    store i32* %177 with i32 %176;
    i32* %178 = getelementptr &(i32* %139)[i64 13];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %141)[i64 13];
    store i32* %180 with i32 %179;
    i32* %181 = getelementptr &(i32* %139)[i64 14];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %141)[i64 14];
    store i32* %183 with i32 %182;
    i32* %184 = getelementptr &(i32* %139)[i64 15];
    i32 %185 = load i32* %184;
    i32* %186 = getelementptr &(i32* %141)[i64 15];
    store i32* %186 with i32 %185;
    i32 %187 = add i32 %84, i32 16;
    ubr ^super.header2;
  ^while.body4:
    i32* %188 = getelementptr &([100 * i32]* %5)[i64 0][i32 %88];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &([100 * i32]* %6)[i64 0][i32 %88];
    store i32* %190 with i32 %189;
    i32 %191 = add i32 %88, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %192 = phi [^super.header1, i32 %80] [^while.body5, i32 %199];
    i32 %193 = phi [^super.header1, i32 %81] [^while.body5, i32 %197];
    i32* %194 = getelementptr &([100 * i32]* %6)[i64 0][i32 %193];
    i32 %195 = load i32* %194;
    i32* %196 = getelementptr &([100 * i32]* %5)[i64 0][i32 %192];
    store i32* %196 with i32 %195;
    i32 %197 = add i32 %193, i32 1;
    i1 %198 = scmp lt i32 %197, i32 %3;
    i32 %199 = add i32 %192, i32 1;
    cbr i1 %198(prob = 0.97), ^while.body5, ^indirect1;
  ^super.header3:
    i32 %200 = phi [^super.header2, i32 %84] [^while.body6, i32 %252];
    i32 %201 = phi [^super.header2, i32 %85] [^while.body6, i32 %202];
    i32 %202 = add i32 %201, i32 16;
    i1 %203 = scmp lt i32 %202, i32 %r;
    cbr i1 %203(prob = 0.67), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %204 = getelementptr &([100 * i32]* %6)[i64 0][i32 %201];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &([100 * i32]* %5)[i64 0][i32 %200];
    store i32* %206 with i32 %205;
    i32* %207 = getelementptr &(i32* %204)[i64 1];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &(i32* %206)[i64 1];
    store i32* %209 with i32 %208;
    i32* %210 = getelementptr &(i32* %204)[i64 2];
    i32 %211 = load i32* %210;
    i32* %212 = getelementptr &(i32* %206)[i64 2];
    store i32* %212 with i32 %211;
    i32* %213 = getelementptr &(i32* %204)[i64 3];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &(i32* %206)[i64 3];
    store i32* %215 with i32 %214;
    i32* %216 = getelementptr &(i32* %204)[i64 4];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &(i32* %206)[i64 4];
    store i32* %218 with i32 %217;
    i32* %219 = getelementptr &(i32* %204)[i64 5];
    i32 %220 = load i32* %219;
    i32* %221 = getelementptr &(i32* %206)[i64 5];
    store i32* %221 with i32 %220;
    i32* %222 = getelementptr &(i32* %204)[i64 6];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &(i32* %206)[i64 6];
    store i32* %224 with i32 %223;
    i32* %225 = getelementptr &(i32* %204)[i64 7];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %206)[i64 7];
    store i32* %227 with i32 %226;
    i32* %228 = getelementptr &(i32* %204)[i64 8];
    i32 %229 = load i32* %228;
    i32* %230 = getelementptr &(i32* %206)[i64 8];
    store i32* %230 with i32 %229;
    i32* %231 = getelementptr &(i32* %204)[i64 9];
    i32 %232 = load i32* %231;
    i32* %233 = getelementptr &(i32* %206)[i64 9];
    store i32* %233 with i32 %232;
    i32* %234 = getelementptr &(i32* %204)[i64 10];
    i32 %235 = load i32* %234;
    i32* %236 = getelementptr &(i32* %206)[i64 10];
    store i32* %236 with i32 %235;
    i32* %237 = getelementptr &(i32* %204)[i64 11];
    i32 %238 = load i32* %237;
    i32* %239 = getelementptr &(i32* %206)[i64 11];
    store i32* %239 with i32 %238;
    i32* %240 = getelementptr &(i32* %204)[i64 12];
    i32 %241 = load i32* %240;
    i32* %242 = getelementptr &(i32* %206)[i64 12];
    store i32* %242 with i32 %241;
    i32* %243 = getelementptr &(i32* %204)[i64 13];
    i32 %244 = load i32* %243;
    i32* %245 = getelementptr &(i32* %206)[i64 13];
    store i32* %245 with i32 %244;
    i32* %246 = getelementptr &(i32* %204)[i64 14];
    i32 %247 = load i32* %246;
    i32* %248 = getelementptr &(i32* %206)[i64 14];
    store i32* %248 with i32 %247;
    i32* %249 = getelementptr &(i32* %204)[i64 15];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &(i32* %206)[i64 15];
    store i32* %251 with i32 %250;
    i32 %252 = add i32 %200, i32 16;
    ubr ^super.header3;
  ^while.body7:
    i32 %253 = phi [^super.header3, i32 %200] [^while.body7, i32 %260];
    i32 %254 = phi [^super.header3, i32 %201] [^while.body7, i32 %258];
    i32* %255 = getelementptr &([100 * i32]* %6)[i64 0][i32 %254];
    i32 %256 = load i32* %255;
    i32* %257 = getelementptr &([100 * i32]* %5)[i64 0][i32 %253];
    store i32* %257 with i32 %256;
    i32 %258 = add i32 %254, i32 1;
    i1 %259 = scmp lt i32 %258, i32 %r;
    i32 %260 = add i32 %253, i32 1;
    cbr i1 %259(prob = 0.97), ^while.body7, ^while.header1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
