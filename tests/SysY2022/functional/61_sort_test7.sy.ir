internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^if.then1, i32 %20] [^if.else, i32 %23];
    i32 %8 = phi [^b, i32 %3] [^if.then1, i32 %8] [^if.else, i32 %22];
    i32 %9 = phi [^b, i32 %l] [^if.then1, i32 %19] [^if.else, i32 %9];
    i1 %10 = icmp sgt i32 %3, i32 %9;
    i1 %11 = icmp sgt i32 %r, i32 %8;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %5)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %5)[i64 0][i32 %8];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %10(prob = 0.97), ^super.header, ^while.header2;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %6)[i64 0][i32 %7];
    store i32* %18 with i32 %14;
    i32 %19 = add i32 %9, i32 1;
    i32 %20 = add i32 %7, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %6)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %8, i32 1;
    i32 %23 = add i32 %7, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %24 = phi [^while.header1, i32 %9] [^while.body1, i32 %26];
    i32 %25 = phi [^while.header1, i32 %7] [^while.body1, i32 %41];
    i32 %26 = add i32 %24, i32 4;
    i1 %27 = icmp sgt i32 %3, i32 %26;
    cbr i1 %27(prob = 0.89), ^while.body1, ^while.body2;
  ^while.header2:
    i32 %28 = phi [^while.header1, i32 %7] [^while.body2, i32 %49];
    cbr i1 %11(prob = 0.97), ^super.header1, ^while.header3;
  ^while.body1:
    i32* %29 = getelementptr &([100 * i32]* %5)[i64 0][i32 %24];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([100 * i32]* %6)[i64 0][i32 %25];
    store i32* %31 with i32 %30;
    i32* %32 = getelementptr &(i32* %29)[i64 1];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &(i32* %31)[i64 1];
    store i32* %34 with i32 %33;
    i32* %35 = getelementptr &(i32* %29)[i64 2];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %31)[i64 2];
    store i32* %37 with i32 %36;
    i32* %38 = getelementptr &(i32* %29)[i64 3];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %31)[i64 3];
    store i32* %40 with i32 %39;
    i32 %41 = add i32 %25, i32 4;
    ubr ^super.header;
  ^while.body2:
    i32 %42 = phi [^super.header, i32 %24] [^while.body2, i32 %47];
    i32 %43 = phi [^super.header, i32 %25] [^while.body2, i32 %49];
    i32* %44 = getelementptr &([100 * i32]* %5)[i64 0][i32 %42];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &([100 * i32]* %6)[i64 0][i32 %43];
    store i32* %46 with i32 %45;
    i32 %47 = add i32 %42, i32 1;
    i1 %48 = icmp sgt i32 %3, i32 %47;
    i32 %49 = add i32 %43, i32 1;
    cbr i1 %48(prob = 0.75), ^while.body2, ^while.header2;
  ^super.header1:
    i32 %50 = phi [^while.header2, i32 %8] [^while.body3, i32 %52];
    i32 %51 = phi [^while.header2, i32 %28] [^while.body3, i32 %67];
    i32 %52 = add i32 %50, i32 4;
    i1 %53 = icmp sgt i32 %r, i32 %52;
    cbr i1 %53(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header3:
    i1 %54 = icmp slt i32 %l, i32 %r;
    cbr i1 %54(prob = 0.97), ^super.header2, ^if.then;
  ^while.body3:
    i32* %55 = getelementptr &([100 * i32]* %5)[i64 0][i32 %50];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &([100 * i32]* %6)[i64 0][i32 %51];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %55)[i64 1];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %57)[i64 1];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %55)[i64 2];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %57)[i64 2];
    store i32* %63 with i32 %62;
    i32* %64 = getelementptr &(i32* %55)[i64 3];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %57)[i64 3];
    store i32* %66 with i32 %65;
    i32 %67 = add i32 %51, i32 4;
    ubr ^super.header1;
  ^while.body4:
    i32 %68 = phi [^super.header1, i32 %50] [^while.body4, i32 %73];
    i32 %69 = phi [^super.header1, i32 %51] [^while.body4, i32 %75];
    i32* %70 = getelementptr &([100 * i32]* %5)[i64 0][i32 %68];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &([100 * i32]* %6)[i64 0][i32 %69];
    store i32* %72 with i32 %71;
    i32 %73 = add i32 %68, i32 1;
    i1 %74 = icmp sgt i32 %r, i32 %73;
    i32 %75 = add i32 %69, i32 1;
    cbr i1 %74(prob = 0.75), ^while.body4, ^while.header3;
  ^super.header2:
    i32 %76 = phi [^while.header3, i32 %l] [^while.body5, i32 %77];
    i32 %77 = add i32 %76, i32 4;
    i1 %78 = icmp sgt i32 %r, i32 %77;
    cbr i1 %78(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body5:
    i32* %79 = getelementptr &([100 * i32]* %6)[i64 0][i32 %76];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([100 * i32]* %5)[i64 0][i32 %76];
    store i32* %81 with i32 %80;
    i32* %82 = getelementptr &(i32* %79)[i64 1];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %81)[i64 1];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %79)[i64 2];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %81)[i64 2];
    store i32* %87 with i32 %86;
    i32* %88 = getelementptr &(i32* %79)[i64 3];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %81)[i64 3];
    store i32* %90 with i32 %89;
    ubr ^super.header2;
  ^while.body6:
    i32 %91 = phi [^super.header2, i32 %76] [^while.body6, i32 %95];
    i32* %92 = getelementptr &([100 * i32]* %6)[i64 0][i32 %91];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &([100 * i32]* %5)[i64 0][i32 %91];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %91, i32 1;
    i1 %96 = icmp sgt i32 %r, i32 %95;
    cbr i1 %96(prob = 0.75), ^while.body6, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
