internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %mid = alloc i32;
    i32* %r1 = alloc i32;
    i32* %l1 = alloc i32;
    store i32* %l1 with i32 %l;
    store i32* %r1 with i32 %r;
    i32 %0 = load i32* %l1;
    i32 %1 = add i32 %0, i32 1;
    i32 %2 = load i32* %r1;
    i1 %3 = scmp ge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
^b:
    i32 %6 = load i32* %l1;
    i32 %7 = load i32* %r1;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = sdiv i32 %8, i32 2;
    store i32* %mid with i32 %9;
    i32 %10 = load i32* %l1;
    i32 %11 = load i32* %mid;
    call (i32, i32) -> void @merge_sort(i32 %10, i32 %11);
    i32 %12 = load i32* %mid;
    i32 %13 = load i32* %r1;
    call (i32, i32) -> void @merge_sort(i32 %12, i32 %13);
    i32 %14 = load i32* %l1;
    store i32* %i with i32 %14;
    i32 %15 = load i32* %mid;
    store i32* %j with i32 %15;
    i32 %16 = load i32* %l1;
    store i32* %k with i32 %16;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %17 = load i32* %i;
    i32 %18 = load i32* %mid;
    i1 %19 = scmp lt i32 %17, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %22 = load i32* %j;
    i32 %23 = load i32* %r1;
    i1 %24 = scmp lt i32 %22, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    ubr ^b2;
^b2:
    i1 %27 = phi [^b1, i1 %26] [^while.header, i1 false];
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body, ^b3;
^b3:
    ubr ^while.header1;
^while.body:
    [100 * i32]* %30 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %31 = load i32* %i;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = getelementptr &([100 * i32]* %30)[i64 0][i64 %32];
    i32 %34 = load i32* %33;
    [100 * i32]* %35 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %36 = load i32* %j;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([100 * i32]* %35)[i64 0][i64 %37];
    i32 %39 = load i32* %38;
    i1 %40 = scmp lt i32 %34, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    [100 * i32]* %43 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 1];
    i32 %44 = load i32* %k;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([100 * i32]* %43)[i64 0][i64 %45];
    [100 * i32]* %47 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %48 = load i32* %i;
    i64 %49 = sext i32 %48 to i64;
    i32* %50 = getelementptr &([100 * i32]* %47)[i64 0][i64 %49];
    i32 %51 = load i32* %50;
    store i32* %46 with i32 %51;
    i32 %52 = load i32* %i;
    i32 %53 = add i32 %52, i32 1;
    store i32* %i with i32 %53;
    ubr ^b4;
^if.else:
    [100 * i32]* %54 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 1];
    i32 %55 = load i32* %k;
    i64 %56 = sext i32 %55 to i64;
    i32* %57 = getelementptr &([100 * i32]* %54)[i64 0][i64 %56];
    [100 * i32]* %58 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %59 = load i32* %j;
    i64 %60 = sext i32 %59 to i64;
    i32* %61 = getelementptr &([100 * i32]* %58)[i64 0][i64 %60];
    i32 %62 = load i32* %61;
    store i32* %57 with i32 %62;
    i32 %63 = load i32* %j;
    i32 %64 = add i32 %63, i32 1;
    store i32* %j with i32 %64;
    ubr ^b4;
^while.header1:
    i32 %65 = load i32* %i;
    i32 %66 = load i32* %mid;
    i1 %67 = scmp lt i32 %65, i32 %66;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = scmp neq i32 %68, i32 0;
    cbr i1 %69(prob = 0.97), ^while.body1, ^b5;
^b4:
    i32 %70 = load i32* %k;
    i32 %71 = add i32 %70, i32 1;
    store i32* %k with i32 %71;
    ubr ^while.header;
^while.body1:
    [100 * i32]* %72 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 1];
    i32 %73 = load i32* %k;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = getelementptr &([100 * i32]* %72)[i64 0][i64 %74];
    [100 * i32]* %76 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %77 = load i32* %i;
    i64 %78 = sext i32 %77 to i64;
    i32* %79 = getelementptr &([100 * i32]* %76)[i64 0][i64 %78];
    i32 %80 = load i32* %79;
    store i32* %75 with i32 %80;
    i32 %81 = load i32* %i;
    i32 %82 = add i32 %81, i32 1;
    store i32* %i with i32 %82;
    i32 %83 = load i32* %k;
    i32 %84 = add i32 %83, i32 1;
    store i32* %k with i32 %84;
    ubr ^while.header1;
^b5:
    ubr ^while.header2;
^while.header2:
    i32 %85 = load i32* %j;
    i32 %86 = load i32* %r1;
    i1 %87 = scmp lt i32 %85, i32 %86;
    i32 %88 = zext i1 %87 to i32;
    i1 %89 = scmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    [100 * i32]* %90 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 1];
    i32 %91 = load i32* %k;
    i64 %92 = sext i32 %91 to i64;
    i32* %93 = getelementptr &([100 * i32]* %90)[i64 0][i64 %92];
    [100 * i32]* %94 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %95 = load i32* %j;
    i64 %96 = sext i32 %95 to i64;
    i32* %97 = getelementptr &([100 * i32]* %94)[i64 0][i64 %96];
    i32 %98 = load i32* %97;
    store i32* %93 with i32 %98;
    i32 %99 = load i32* %j;
    i32 %100 = add i32 %99, i32 1;
    store i32* %j with i32 %100;
    i32 %101 = load i32* %k;
    i32 %102 = add i32 %101, i32 1;
    store i32* %k with i32 %102;
    ubr ^while.header2;
^b6:
    ubr ^while.header3;
^while.header3:
    i32 %103 = load i32* %l1;
    i32 %104 = load i32* %r1;
    i1 %105 = scmp lt i32 %103, i32 %104;
    i32 %106 = zext i1 %105 to i32;
    i1 %107 = scmp neq i32 %106, i32 0;
    cbr i1 %107(prob = 0.97), ^while.body3, ^b7;
^while.body3:
    [100 * i32]* %108 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32 %109 = load i32* %l1;
    i64 %110 = sext i32 %109 to i64;
    i32* %111 = getelementptr &([100 * i32]* %108)[i64 0][i64 %110];
    [100 * i32]* %112 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 1];
    i32 %113 = load i32* %l1;
    i64 %114 = sext i32 %113 to i64;
    i32* %115 = getelementptr &([100 * i32]* %112)[i64 0][i64 %114];
    i32 %116 = load i32* %115;
    store i32* %111 with i32 %116;
    i32 %117 = load i32* %l1;
    i32 %118 = add i32 %117, i32 1;
    store i32* %l1 with i32 %118;
    ubr ^while.header3;
^b7:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %n = alloc i32;
    [100 * i32]* %0 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32* %1 = getelementptr &([100 * i32]* %0)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %n with i32 %2;
    i32 %3 = load i32* %n;
    call (i32, i32) -> void @merge_sort(i32 0, i32 %3);
    i32 %4 = load i32* %n;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* @buf)[i64 0][i64 0];
    i32* %6 = getelementptr &([100 * i32]* %5)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %4, i32* %6);
    ret i32 0;
}
