internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = scmp ge i32 %0, i32 %r;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^b3, i32 %31];
    i32 %8 = phi [^b, i32 %l] [^b3, i32 %29];
    i32 %9 = phi [^b, i32 %3] [^b3, i32 %30];
    i1 %10 = scmp lt i32 %8, i32 %3;
    cbr i1 %10(prob = 0.5), ^b1, ^b2;
  ^b1:
    i1 %11 = scmp lt i32 %9, i32 %r;
    ubr ^b2;
  ^b2:
    i1 %12 = phi [^while.header, i1 false] [^b1, i1 %11];
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %16 = load i32* %15;
    i1 %17 = scmp lt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^indirect:
    cbr i1 %10(prob = 0.97), ^super.header, ^indirect1;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    i32 %19 = load i32* %13;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %8, i32 1;
    ubr ^b3;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %9, i32 1;
    ubr ^b3;
  ^super.header:
    i32 %23 = phi [^indirect, i32 %7] [^while.body1, i32 %80];
    i32 %24 = phi [^indirect, i32 %8] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 16;
    i1 %26 = scmp lt i32 %25, i32 %3;
    cbr i1 %26(prob = 0.67), ^while.body1, ^super.header1;
  ^indirect1:
    i32 %27 = phi [^indirect, i32 %7] [^while.body5, i32 %200];
    i1 %28 = scmp lt i32 %9, i32 %r;
    cbr i1 %28(prob = 0.97), ^super.header2, ^while.header1;
  ^b3:
    i32 %29 = phi [^if.then1, i32 %20] [^if.else, i32 %8];
    i32 %30 = phi [^if.then1, i32 %9] [^if.else, i32 %22];
    i32 %31 = add i32 %7, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32* %32 = getelementptr &([100 * i32]* %6)[i64 0][i32 %24];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &([100 * i32]* %5)[i64 0][i32 %23];
    store i32* %34 with i32 %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %34)[i64 1];
    store i32* %37 with i32 %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %34)[i64 2];
    store i32* %40 with i32 %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %34)[i64 3];
    store i32* %43 with i32 %42;
    i32* %44 = getelementptr &(i32* %32)[i64 4];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &(i32* %34)[i64 4];
    store i32* %46 with i32 %45;
    i32* %47 = getelementptr &(i32* %32)[i64 5];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %34)[i64 5];
    store i32* %49 with i32 %48;
    i32* %50 = getelementptr &(i32* %32)[i64 6];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %34)[i64 6];
    store i32* %52 with i32 %51;
    i32* %53 = getelementptr &(i32* %32)[i64 7];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %34)[i64 7];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %32)[i64 8];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %34)[i64 8];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %32)[i64 9];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %34)[i64 9];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %32)[i64 10];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %34)[i64 10];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %32)[i64 11];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %34)[i64 11];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %32)[i64 12];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %34)[i64 12];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &(i32* %32)[i64 13];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %34)[i64 13];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %32)[i64 14];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %34)[i64 14];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %32)[i64 15];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %34)[i64 15];
    store i32* %79 with i32 %78;
    i32 %80 = add i32 %23, i32 16;
    ubr ^super.header;
  ^super.header1:
    i32 %81 = phi [^super.header, i32 %23] [^while.body2, i32 %139];
    i32 %82 = phi [^super.header, i32 %24] [^while.body2, i32 %83];
    i32 %83 = add i32 %82, i32 16;
    i1 %84 = scmp lt i32 %83, i32 %3;
    cbr i1 %84(prob = 0.67), ^while.body2, ^while.body5;
  ^super.header2:
    i32 %85 = phi [^indirect1, i32 %27] [^while.body3, i32 %188];
    i32 %86 = phi [^indirect1, i32 %9] [^while.body3, i32 %87];
    i32 %87 = add i32 %86, i32 16;
    i1 %88 = scmp lt i32 %87, i32 %r;
    cbr i1 %88(prob = 0.67), ^while.body3, ^super.header3;
  ^while.header1:
    i32 %89 = phi [^indirect1, i32 %l] [^while.body4, i32 %192] [^while.body7, i32 %l];
    i1 %90 = scmp lt i32 %89, i32 %r;
    cbr i1 %90(prob = 0.97), ^while.body4, ^if.then;
  ^while.body2:
    i32* %91 = getelementptr &([100 * i32]* %6)[i64 0][i32 %82];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &([100 * i32]* %5)[i64 0][i32 %81];
    store i32* %93 with i32 %92;
    i32* %94 = getelementptr &(i32* %91)[i64 1];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %91)[i64 2];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %91)[i64 3];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %91)[i64 4];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %93)[i64 4];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %91)[i64 5];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %93)[i64 5];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %91)[i64 6];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %93)[i64 6];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %91)[i64 7];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %93)[i64 7];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %91)[i64 8];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %93)[i64 8];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %91)[i64 9];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %93)[i64 9];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %91)[i64 10];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %93)[i64 10];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %91)[i64 11];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %93)[i64 11];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %91)[i64 12];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %93)[i64 12];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %91)[i64 13];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %93)[i64 13];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %91)[i64 14];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %93)[i64 14];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %91)[i64 15];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %93)[i64 15];
    store i32* %138 with i32 %137;
    i32 %139 = add i32 %81, i32 16;
    ubr ^super.header1;
  ^while.body3:
    i32* %140 = getelementptr &([100 * i32]* %6)[i64 0][i32 %86];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([100 * i32]* %5)[i64 0][i32 %85];
    store i32* %142 with i32 %141;
    i32* %143 = getelementptr &(i32* %140)[i64 1];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %142)[i64 1];
    store i32* %145 with i32 %144;
    i32* %146 = getelementptr &(i32* %140)[i64 2];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %142)[i64 2];
    store i32* %148 with i32 %147;
    i32* %149 = getelementptr &(i32* %140)[i64 3];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %142)[i64 3];
    store i32* %151 with i32 %150;
    i32* %152 = getelementptr &(i32* %140)[i64 4];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %142)[i64 4];
    store i32* %154 with i32 %153;
    i32* %155 = getelementptr &(i32* %140)[i64 5];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %142)[i64 5];
    store i32* %157 with i32 %156;
    i32* %158 = getelementptr &(i32* %140)[i64 6];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %142)[i64 6];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %140)[i64 7];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %142)[i64 7];
    store i32* %163 with i32 %162;
    i32* %164 = getelementptr &(i32* %140)[i64 8];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %142)[i64 8];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &(i32* %140)[i64 9];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %142)[i64 9];
    store i32* %169 with i32 %168;
    i32* %170 = getelementptr &(i32* %140)[i64 10];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %142)[i64 10];
    store i32* %172 with i32 %171;
    i32* %173 = getelementptr &(i32* %140)[i64 11];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %142)[i64 11];
    store i32* %175 with i32 %174;
    i32* %176 = getelementptr &(i32* %140)[i64 12];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %142)[i64 12];
    store i32* %178 with i32 %177;
    i32* %179 = getelementptr &(i32* %140)[i64 13];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &(i32* %142)[i64 13];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %140)[i64 14];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %142)[i64 14];
    store i32* %184 with i32 %183;
    i32* %185 = getelementptr &(i32* %140)[i64 15];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %142)[i64 15];
    store i32* %187 with i32 %186;
    i32 %188 = add i32 %85, i32 16;
    ubr ^super.header2;
  ^while.body4:
    i32* %189 = getelementptr &([100 * i32]* %5)[i64 0][i32 %89];
    i32 %190 = load i32* %189;
    i32* %191 = getelementptr &([100 * i32]* %6)[i64 0][i32 %89];
    store i32* %191 with i32 %190;
    i32 %192 = add i32 %89, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %193 = phi [^super.header1, i32 %81] [^while.body5, i32 %200];
    i32 %194 = phi [^super.header1, i32 %82] [^while.body5, i32 %198];
    i32* %195 = getelementptr &([100 * i32]* %6)[i64 0][i32 %194];
    i32 %196 = load i32* %195;
    i32* %197 = getelementptr &([100 * i32]* %5)[i64 0][i32 %193];
    store i32* %197 with i32 %196;
    i32 %198 = add i32 %194, i32 1;
    i1 %199 = scmp lt i32 %198, i32 %3;
    i32 %200 = add i32 %193, i32 1;
    cbr i1 %199(prob = 0.97), ^while.body5, ^indirect1;
  ^super.header3:
    i32 %201 = phi [^super.header2, i32 %85] [^while.body6, i32 %253];
    i32 %202 = phi [^super.header2, i32 %86] [^while.body6, i32 %203];
    i32 %203 = add i32 %202, i32 16;
    i1 %204 = scmp lt i32 %203, i32 %r;
    cbr i1 %204(prob = 0.67), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %205 = getelementptr &([100 * i32]* %6)[i64 0][i32 %202];
    i32 %206 = load i32* %205;
    i32* %207 = getelementptr &([100 * i32]* %5)[i64 0][i32 %201];
    store i32* %207 with i32 %206;
    i32* %208 = getelementptr &(i32* %205)[i64 1];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %207)[i64 1];
    store i32* %210 with i32 %209;
    i32* %211 = getelementptr &(i32* %205)[i64 2];
    i32 %212 = load i32* %211;
    i32* %213 = getelementptr &(i32* %207)[i64 2];
    store i32* %213 with i32 %212;
    i32* %214 = getelementptr &(i32* %205)[i64 3];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &(i32* %207)[i64 3];
    store i32* %216 with i32 %215;
    i32* %217 = getelementptr &(i32* %205)[i64 4];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &(i32* %207)[i64 4];
    store i32* %219 with i32 %218;
    i32* %220 = getelementptr &(i32* %205)[i64 5];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %207)[i64 5];
    store i32* %222 with i32 %221;
    i32* %223 = getelementptr &(i32* %205)[i64 6];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %207)[i64 6];
    store i32* %225 with i32 %224;
    i32* %226 = getelementptr &(i32* %205)[i64 7];
    i32 %227 = load i32* %226;
    i32* %228 = getelementptr &(i32* %207)[i64 7];
    store i32* %228 with i32 %227;
    i32* %229 = getelementptr &(i32* %205)[i64 8];
    i32 %230 = load i32* %229;
    i32* %231 = getelementptr &(i32* %207)[i64 8];
    store i32* %231 with i32 %230;
    i32* %232 = getelementptr &(i32* %205)[i64 9];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &(i32* %207)[i64 9];
    store i32* %234 with i32 %233;
    i32* %235 = getelementptr &(i32* %205)[i64 10];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &(i32* %207)[i64 10];
    store i32* %237 with i32 %236;
    i32* %238 = getelementptr &(i32* %205)[i64 11];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &(i32* %207)[i64 11];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %205)[i64 12];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %207)[i64 12];
    store i32* %243 with i32 %242;
    i32* %244 = getelementptr &(i32* %205)[i64 13];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %207)[i64 13];
    store i32* %246 with i32 %245;
    i32* %247 = getelementptr &(i32* %205)[i64 14];
    i32 %248 = load i32* %247;
    i32* %249 = getelementptr &(i32* %207)[i64 14];
    store i32* %249 with i32 %248;
    i32* %250 = getelementptr &(i32* %205)[i64 15];
    i32 %251 = load i32* %250;
    i32* %252 = getelementptr &(i32* %207)[i64 15];
    store i32* %252 with i32 %251;
    i32 %253 = add i32 %201, i32 16;
    ubr ^super.header3;
  ^while.body7:
    i32 %254 = phi [^super.header3, i32 %201] [^while.body7, i32 %261];
    i32 %255 = phi [^super.header3, i32 %202] [^while.body7, i32 %259];
    i32* %256 = getelementptr &([100 * i32]* %6)[i64 0][i32 %255];
    i32 %257 = load i32* %256;
    i32* %258 = getelementptr &([100 * i32]* %5)[i64 0][i32 %254];
    store i32* %258 with i32 %257;
    i32 %259 = add i32 %255, i32 1;
    i1 %260 = scmp lt i32 %259, i32 %r;
    i32 %261 = add i32 %254, i32 1;
    cbr i1 %260(prob = 0.97), ^while.body7, ^while.header1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
