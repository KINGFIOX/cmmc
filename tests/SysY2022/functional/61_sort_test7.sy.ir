internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    i32 %4 = add i32 %3, i32 -4;
    [2 * [100 * i32]]* %5 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %5)[i64 0][i64 0];
    [100 * i32]* %7 = getelementptr &([2 * [100 * i32]]* %5)[i64 0][i64 1];
    i32 %8 = add i32 %r, i32 -4;
    i32 %9 = add i32 %r, i32 -20;
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %10 = phi [^b, i32 %l] [^if.then1, i32 %23] [^if.else, i32 %26];
    i32 %11 = phi [^b, i32 %3] [^if.then1, i32 %11] [^if.else, i32 %25];
    i32 %12 = phi [^b, i32 %l] [^if.then1, i32 %22] [^if.else, i32 %12];
    i1 %13 = icmp sgt i32 %3, i32 %12;
    i1 %14 = icmp sgt i32 %r, i32 %11;
    i1 %15 = and i1 %13, i1 %14;
    cbr i1 %15(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %16 = getelementptr &([100 * i32]* %6)[i64 0][i32 %12];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &([100 * i32]* %6)[i64 0][i32 %11];
    i32 %19 = load i32* %18;
    i1 %20 = icmp slt i32 %17, i32 %19;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %13(prob = 0.97), ^super.header, ^29;
  ^if.then1:
    i32* %21 = getelementptr &([100 * i32]* %7)[i64 0][i32 %10];
    store i32* %21 with i32 %17;
    i32 %22 = add i32 %12, i32 1;
    i32 %23 = add i32 %10, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %24 = getelementptr &([100 * i32]* %7)[i64 0][i32 %10];
    store i32* %24 with i32 %19;
    i32 %25 = add i32 %11, i32 1;
    i32 %26 = add i32 %10, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %27 = add i32 %12, i32 4;
    i1 %28 = icmp sgt i32 %3, i32 %27;
    cbr i1 %28(prob = 0.89), ^while.body1, ^while.body2;
  ^29:
    i32 %30 = phi [^while.header1, i32 %10] [^while.body2, i32 %55];
    cbr i1 %14(prob = 0.97), ^super.header1, ^while.header2;
  ^while.body1:
    i32 %31 = phi [^super.header, i32 %10] [^while.body1, i32 %47];
    i32 %32 = phi [^super.header, i32 %12] [^while.body1, i32 %45];
    i32* %33 = getelementptr &([100 * i32]* %6)[i64 0][i32 %32];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([100 * i32]* %7)[i64 0][i32 %31];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %33)[i64 1];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %35)[i64 1];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %33)[i64 2];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %35)[i64 2];
    store i32* %41 with i32 %40;
    i32* %42 = getelementptr &(i32* %33)[i64 3];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %35)[i64 3];
    store i32* %44 with i32 %43;
    i32 %45 = add i32 %32, i32 4;
    i1 %46 = icmp sgt i32 %4, i32 %45;
    i32 %47 = add i32 %31, i32 4;
    cbr i1 %46(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2 {scalar}:
    i32 %48 = phi [^super.header, i32 %12] [^while.body1, i32 %45] [^while.body2, i32 %53];
    i32 %49 = phi [^super.header, i32 %10] [^while.body1, i32 %47] [^while.body2, i32 %55];
    i32* %50 = getelementptr &([100 * i32]* %6)[i64 0][i32 %48];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([100 * i32]* %7)[i64 0][i32 %49];
    store i32* %52 with i32 %51;
    i32 %53 = add i32 %48, i32 1;
    i1 %54 = icmp sgt i32 %3, i32 %53;
    i32 %55 = add i32 %49, i32 1;
    cbr i1 %54(prob = 0.75), ^while.body2, ^29;
  ^super.header1:
    i32 %56 = add i32 %11, i32 4;
    i1 %57 = icmp sgt i32 %r, i32 %56;
    cbr i1 %57(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header2:
    i1 %58 = icmp slt i32 %l, i32 %r;
    cbr i1 %58(prob = 0.97), ^super.header2, ^if.then;
  ^while.body3:
    i32 %59 = phi [^super.header1, i32 %30] [^while.body3, i32 %75];
    i32 %60 = phi [^super.header1, i32 %11] [^while.body3, i32 %73];
    i32* %61 = getelementptr &([100 * i32]* %6)[i64 0][i32 %60];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([100 * i32]* %7)[i64 0][i32 %59];
    store i32* %63 with i32 %62;
    i32* %64 = getelementptr &(i32* %61)[i64 1];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %63)[i64 1];
    store i32* %66 with i32 %65;
    i32* %67 = getelementptr &(i32* %61)[i64 2];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %63)[i64 2];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %61)[i64 3];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %63)[i64 3];
    store i32* %72 with i32 %71;
    i32 %73 = add i32 %60, i32 4;
    i1 %74 = icmp sgt i32 %8, i32 %73;
    i32 %75 = add i32 %59, i32 4;
    cbr i1 %74(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4 {scalar}:
    i32 %76 = phi [^super.header1, i32 %11] [^while.body3, i32 %73] [^while.body4, i32 %81];
    i32 %77 = phi [^super.header1, i32 %30] [^while.body3, i32 %75] [^while.body4, i32 %83];
    i32* %78 = getelementptr &([100 * i32]* %6)[i64 0][i32 %76];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &([100 * i32]* %7)[i64 0][i32 %77];
    store i32* %80 with i32 %79;
    i32 %81 = add i32 %76, i32 1;
    i1 %82 = icmp sgt i32 %r, i32 %81;
    i32 %83 = add i32 %77, i32 1;
    cbr i1 %82(prob = 0.75), ^while.body4, ^while.header2;
  ^super.header2:
    i32 %84 = add i32 %l, i32 4;
    i1 %85 = icmp sgt i32 %r, i32 %84;
    cbr i1 %85(prob = 0.89), ^super.header3, ^while.body5;
  ^super.header3:
    i32 %86 = add i32 %l, i32 16;
    i1 %87 = icmp sgt i32 %8, i32 %86;
    cbr i1 %87(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body5 {scalar}:
    i32 %88 = phi [^super.header2, i32 %l] [^while.body5, i32 %92] [^while.body7, i32 %158];
    i32* %89 = getelementptr &([100 * i32]* %7)[i64 0][i32 %88];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &([100 * i32]* %6)[i64 0][i32 %88];
    store i32* %91 with i32 %90;
    i32 %92 = add i32 %88, i32 1;
    i1 %93 = icmp sgt i32 %r, i32 %92;
    cbr i1 %93(prob = 0.75), ^while.body5, ^if.then;
  ^while.body6:
    i32 %94 = phi [^super.header3, i32 %l] [^while.body6, i32 %143];
    i32* %95 = getelementptr &([100 * i32]* %7)[i64 0][i32 %94];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([100 * i32]* %6)[i64 0][i32 %94];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %97)[i64 1];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %95)[i64 2];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %97)[i64 2];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %95)[i64 3];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %97)[i64 3];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %95)[i64 4];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &(i32* %97)[i64 4];
    store i32* %109 with i32 %108;
    i32* %110 = getelementptr &(i32* %95)[i64 5];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &(i32* %97)[i64 5];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %95)[i64 6];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &(i32* %97)[i64 6];
    store i32* %115 with i32 %114;
    i32* %116 = getelementptr &(i32* %95)[i64 7];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %97)[i64 7];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %95)[i64 8];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %97)[i64 8];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %95)[i64 9];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %97)[i64 9];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %95)[i64 10];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %97)[i64 10];
    store i32* %127 with i32 %126;
    i32* %128 = getelementptr &(i32* %95)[i64 11];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %97)[i64 11];
    store i32* %130 with i32 %129;
    i32* %131 = getelementptr &(i32* %95)[i64 12];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %97)[i64 12];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %95)[i64 13];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %97)[i64 13];
    store i32* %136 with i32 %135;
    i32* %137 = getelementptr &(i32* %95)[i64 14];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %97)[i64 14];
    store i32* %139 with i32 %138;
    i32* %140 = getelementptr &(i32* %95)[i64 15];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %97)[i64 15];
    store i32* %142 with i32 %141;
    i32 %143 = add i32 %94, i32 16;
    i1 %144 = icmp sgt i32 %9, i32 %143;
    cbr i1 %144(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body7 {scalar}:
    i32 %145 = phi [^super.header3, i32 %l] [^while.body6, i32 %143] [^while.body7, i32 %158];
    i32* %146 = getelementptr &([100 * i32]* %7)[i64 0][i32 %145];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &([100 * i32]* %6)[i64 0][i32 %145];
    store i32* %148 with i32 %147;
    i32* %149 = getelementptr &(i32* %146)[i64 1];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %148)[i64 1];
    store i32* %151 with i32 %150;
    i32* %152 = getelementptr &(i32* %146)[i64 2];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %148)[i64 2];
    store i32* %154 with i32 %153;
    i32* %155 = getelementptr &(i32* %146)[i64 3];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %148)[i64 3];
    store i32* %157 with i32 %156;
    i32 %158 = add i32 %145, i32 4;
    i1 %159 = icmp sgt i32 %8, i32 %158;
    cbr i1 %159(prob = 0.75), ^while.body7, ^while.body5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
