internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i1 %5 = icmp slt i32 %l, i32 %3;
    i32 %6 = add i32 %3, i32 -3;
    [2 * [100 * i32]]* %7 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %8 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 1];
    [100 * i32]* %9 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 0];
    i32 %10 = add i32 %l, i32 3;
    i32 %11 = add i32 %l, i32 15;
    i32 %12 = add i32 %r, i32 -3;
    i32 %13 = add i32 %r, i32 -18;
    cbr i1 %4(prob = 0.5), ^if.then1, ^b1;
  ^if.then:
    ret;
  ^if.then1:
    i32 %14 = add i32 %3, i32 1;
    i1 %15 = icmp sle i32 %r, i32 %14;
    i1 %16 = icmp sgt i32 %r, i32 %3;
    cbr i1 %15(prob = 0.5), ^if.then2, ^b2;
  ^b1:
    i32 %17 = add i32 %l, i32 %3;
    i32 %18 = sdiv i32 %17, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %18);
    call (i32, i32) -> void @merge_sort(i32 %18, i32 %3);
    i1 %19 = icmp sgt i32 %3, i32 %18;
    i1 %20 = icmp slt i32 %l, i32 %18;
    i1 %21 = and i1 %19, i1 %20;
    i32 %22 = add i32 %18, i32 -3;
    i32 %23 = add i32 %3, i32 -18;
    cbr i1 %21(prob = 0.984615), ^while.body, ^while.header;
  ^if.then2:
    i1 %24 = and i1 %5, i1 %16;
    cbr i1 %24(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body:
    i32 %25 = phi [^b1, i32 %l] [^b3, i32 %84];
    i32 %26 = phi [^b1, i32 %18] [^b3, i32 %83];
    i32 %27 = phi [^b1, i32 %l] [^b3, i32 %88];
    i32* %28 = getelementptr &([100 * i32]* %9)[i64 0][i32 %25];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &([100 * i32]* %9)[i64 0][i32 %26];
    i32 %31 = load i32* %30;
    i1 %32 = icmp slt i32 %29, i32 %31;
    i32* %33 = getelementptr &([100 * i32]* %8)[i64 0][i32 %27];
    cbr i1 %32(prob = 0.5), ^if.then3, ^if.else;
  ^b2:
    i32 %34 = add i32 %r, i32 %3;
    i32 %35 = sdiv i32 %34, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %35);
    call (i32, i32) -> void @merge_sort(i32 %35, i32 %r);
    i1 %36 = icmp slt i32 %3, i32 %35;
    i1 %37 = icmp sgt i32 %r, i32 %35;
    i1 %38 = and i1 %36, i1 %37;
    i32 %39 = add i32 %35, i32 -3;
    cbr i1 %38(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.header:
    i1 %40 = phi [^b1, i1 %19] [^b3, i1 %86];
    i1 %41 = phi [^b1, i1 %20] [^b3, i1 %85];
    i32 %42 = phi [^b1, i32 %l] [^b3, i32 %84];
    i32 %43 = phi [^b1, i32 %18] [^b3, i32 %83];
    i32 %44 = phi [^b1, i32 %l] [^b3, i32 %88];
    cbr i1 %41(prob = 0.984615), ^super.header, ^77;
  ^if.then3:
    store i32* %33 with i32 %29;
    i32 %45 = add i32 %25, i32 1;
    ubr ^b3;
  ^if.else:
    store i32* %33 with i32 %31;
    i32 %46 = add i32 %26, i32 1;
    ubr ^b3;
  ^while.body1:
    i32 %47 = phi [^if.then2, i32 %l] [^b4, i32 %122];
    i32 %48 = phi [^if.then2, i32 %3] [^b4, i32 %121];
    i32 %49 = phi [^if.then2, i32 %l] [^b4, i32 %126];
    i32* %50 = getelementptr &([100 * i32]* %9)[i64 0][i32 %47];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &([100 * i32]* %9)[i64 0][i32 %48];
    i32 %53 = load i32* %52;
    i1 %54 = icmp slt i32 %51, i32 %53;
    i32* %55 = getelementptr &([100 * i32]* %8)[i64 0][i32 %49];
    cbr i1 %54(prob = 0.5), ^if.then4, ^if.else1;
  ^while.body2:
    i32 %56 = phi [^b2, i32 %3] [^b5, i32 %145];
    i32 %57 = phi [^b2, i32 %35] [^b5, i32 %144];
    i32 %58 = phi [^b2, i32 %3] [^b5, i32 %149];
    i32* %59 = getelementptr &([100 * i32]* %9)[i64 0][i32 %56];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([100 * i32]* %9)[i64 0][i32 %57];
    i32 %62 = load i32* %61;
    i1 %63 = icmp slt i32 %60, i32 %62;
    i32* %64 = getelementptr &([100 * i32]* %8)[i64 0][i32 %58];
    cbr i1 %63(prob = 0.5), ^if.then5, ^if.else2;
  ^while.header1:
    i1 %65 = phi [^if.then2, i1 %16] [^b4, i1 %124];
    i1 %66 = phi [^if.then2, i1 %5] [^b4, i1 %123];
    i32 %67 = phi [^if.then2, i32 %l] [^b4, i32 %122];
    i32 %68 = phi [^if.then2, i32 %3] [^b4, i32 %121];
    i32 %69 = phi [^if.then2, i32 %l] [^b4, i32 %126];
    cbr i1 %66(prob = 0.984615), ^super.header1, ^110;
  ^super.header:
    i32 %70 = add i32 %42, i32 3;
    i1 %71 = icmp sgt i32 %18, i32 %70;
    cbr i1 %71(prob = 0.941176), ^while.body3, ^scalar.header;
  ^while.header2:
    i1 %72 = phi [^b2, i1 %37] [^b5, i1 %147];
    i1 %73 = phi [^b2, i1 %36] [^b5, i1 %146];
    i32 %74 = phi [^b2, i32 %3] [^b5, i32 %145];
    i32 %75 = phi [^b2, i32 %35] [^b5, i32 %144];
    i32 %76 = phi [^b2, i32 %3] [^b5, i32 %149];
    cbr i1 %73(prob = 0.984615), ^super.header2, ^118;
  ^77:
    i32 %78 = phi [^while.header, i32 %44] [^scalar.header, i32 %114] [^while.body7, i32 %201];
    cbr i1 %40(prob = 0.984615), ^super.header3, ^120;
  ^if.then4:
    store i32* %55 with i32 %51;
    i32 %79 = add i32 %47, i32 1;
    ubr ^b4;
  ^if.then5:
    store i32* %64 with i32 %60;
    i32 %80 = add i32 %56, i32 1;
    ubr ^b5;
  ^if.else1:
    store i32* %55 with i32 %53;
    i32 %81 = add i32 %48, i32 1;
    ubr ^b4;
  ^if.else2:
    store i32* %64 with i32 %62;
    i32 %82 = add i32 %57, i32 1;
    ubr ^b5;
  ^b3:
    i32 %83 = phi [^if.then3, i32 %26] [^if.else, i32 %46];
    i32 %84 = phi [^if.then3, i32 %45] [^if.else, i32 %25];
    i1 %85 = icmp sgt i32 %18, i32 %84;
    i1 %86 = icmp sgt i32 %3, i32 %83;
    i1 %87 = and i1 %85, i1 %86;
    i32 %88 = add i32 %27, i32 1;
    cbr i1 %87(prob = 0.984615), ^while.body, ^while.header;
  ^super.header1:
    i32 %89 = add i32 %67, i32 3;
    i1 %90 = icmp sgt i32 %3, i32 %89;
    cbr i1 %90(prob = 0.941176), ^while.body4, ^scalar.header1;
  ^while.body3:
    i32 %91 = phi [^super.header, i32 %44] [^while.body3, i32 %107];
    i32 %92 = phi [^super.header, i32 %42] [^while.body3, i32 %105];
    i32* %93 = getelementptr &([100 * i32]* %9)[i64 0][i32 %92];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([100 * i32]* %8)[i64 0][i32 %91];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %95)[i64 2];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %95)[i64 3];
    store i32* %104 with i32 %103;
    i32 %105 = add i32 %92, i32 4;
    i1 %106 = icmp sgt i32 %22, i32 %105;
    i32 %107 = add i32 %91, i32 4;
    cbr i1 %106(prob = 0.941176), ^while.body3, ^scalar.header;
  ^super.header2:
    i32 %108 = add i32 %74, i32 3;
    i1 %109 = icmp sgt i32 %35, i32 %108;
    cbr i1 %109(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^110:
    i32 %111 = phi [^while.header1, i32 %69] [^scalar.header1, i32 %169] [^while.body9, i32 %235];
    cbr i1 %65(prob = 0.984615), ^super.header4, ^204;
  ^scalar.header:
    i32 %112 = phi [^super.header, i32 %44] [^while.body3, i32 %107];
    i32 %113 = phi [^super.header, i32 %42] [^while.body3, i32 %105];
    i32 %114 = phi [^super.header, i32 undef] [^while.body3, i32 %107];
    i1 %115 = icmp sgt i32 %18, i32 %113;
    cbr i1 %115(prob = 0.75), ^while.body7, ^77;
  ^super.header3:
    i32 %116 = add i32 %43, i32 3;
    i1 %117 = icmp sgt i32 %3, i32 %116;
    cbr i1 %117(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^118:
    i32 %119 = phi [^while.header2, i32 %76] [^scalar.header2, i32 %175] [^while.body11, i32 %260];
    cbr i1 %72(prob = 0.984615), ^super.header5, ^210;
  ^120:
    cbr i1 %5(prob = 0.984615), ^super.header6, ^if.then1;
  ^b4:
    i32 %121 = phi [^if.then4, i32 %48] [^if.else1, i32 %81];
    i32 %122 = phi [^if.then4, i32 %79] [^if.else1, i32 %47];
    i1 %123 = icmp sgt i32 %3, i32 %122;
    i1 %124 = icmp sgt i32 %r, i32 %121;
    i1 %125 = and i1 %123, i1 %124;
    i32 %126 = add i32 %49, i32 1;
    cbr i1 %125(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body4:
    i32 %127 = phi [^super.header1, i32 %69] [^while.body4, i32 %143];
    i32 %128 = phi [^super.header1, i32 %67] [^while.body4, i32 %141];
    i32* %129 = getelementptr &([100 * i32]* %9)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &([100 * i32]* %8)[i64 0][i32 %127];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %129)[i64 1];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %131)[i64 1];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %129)[i64 2];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %131)[i64 2];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %129)[i64 3];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %131)[i64 3];
    store i32* %140 with i32 %139;
    i32 %141 = add i32 %128, i32 4;
    i1 %142 = icmp sgt i32 %6, i32 %141;
    i32 %143 = add i32 %127, i32 4;
    cbr i1 %142(prob = 0.941176), ^while.body4, ^scalar.header1;
  ^b5:
    i32 %144 = phi [^if.then5, i32 %57] [^if.else2, i32 %82];
    i32 %145 = phi [^if.then5, i32 %80] [^if.else2, i32 %56];
    i1 %146 = icmp sgt i32 %35, i32 %145;
    i1 %147 = icmp sgt i32 %r, i32 %144;
    i1 %148 = and i1 %146, i1 %147;
    i32 %149 = add i32 %58, i32 1;
    cbr i1 %148(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.body5:
    i32 %150 = phi [^super.header2, i32 %76] [^while.body5, i32 %166];
    i32 %151 = phi [^super.header2, i32 %74] [^while.body5, i32 %164];
    i32* %152 = getelementptr &([100 * i32]* %9)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &([100 * i32]* %8)[i64 0][i32 %150];
    store i32* %154 with i32 %153;
    i32* %155 = getelementptr &(i32* %152)[i64 1];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %154)[i64 1];
    store i32* %157 with i32 %156;
    i32* %158 = getelementptr &(i32* %152)[i64 2];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %154)[i64 2];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %152)[i64 3];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %154)[i64 3];
    store i32* %163 with i32 %162;
    i32 %164 = add i32 %151, i32 4;
    i1 %165 = icmp sgt i32 %39, i32 %164;
    i32 %166 = add i32 %150, i32 4;
    cbr i1 %165(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^scalar.header1:
    i32 %167 = phi [^super.header1, i32 %69] [^while.body4, i32 %143];
    i32 %168 = phi [^super.header1, i32 %67] [^while.body4, i32 %141];
    i32 %169 = phi [^super.header1, i32 undef] [^while.body4, i32 %143];
    i1 %170 = icmp sgt i32 %3, i32 %168;
    cbr i1 %170(prob = 0.75), ^while.body9, ^110;
  ^super.header4:
    i32 %171 = add i32 %68, i32 3;
    i1 %172 = icmp sgt i32 %r, i32 %171;
    cbr i1 %172(prob = 0.941176), ^while.body8, ^scalar.header4;
  ^scalar.header2:
    i32 %173 = phi [^super.header2, i32 %76] [^while.body5, i32 %166];
    i32 %174 = phi [^super.header2, i32 %74] [^while.body5, i32 %164];
    i32 %175 = phi [^super.header2, i32 undef] [^while.body5, i32 %166];
    i1 %176 = icmp sgt i32 %35, i32 %174;
    cbr i1 %176(prob = 0.75), ^while.body11, ^118;
  ^while.body6:
    i32 %177 = phi [^super.header3, i32 %78] [^while.body6, i32 %193];
    i32 %178 = phi [^super.header3, i32 %43] [^while.body6, i32 %191];
    i32* %179 = getelementptr &([100 * i32]* %9)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &([100 * i32]* %8)[i64 0][i32 %177];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %179)[i64 1];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %181)[i64 1];
    store i32* %184 with i32 %183;
    i32* %185 = getelementptr &(i32* %179)[i64 2];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %181)[i64 2];
    store i32* %187 with i32 %186;
    i32* %188 = getelementptr &(i32* %179)[i64 3];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %181)[i64 3];
    store i32* %190 with i32 %189;
    i32 %191 = add i32 %178, i32 4;
    i1 %192 = icmp sgt i32 %6, i32 %191;
    i32 %193 = add i32 %177, i32 4;
    cbr i1 %192(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^while.body7 {scalar}:
    i32 %194 = phi [^scalar.header, i32 %113] [^while.body7, i32 %199];
    i32 %195 = phi [^scalar.header, i32 %112] [^while.body7, i32 %201];
    i32* %196 = getelementptr &([100 * i32]* %9)[i64 0][i32 %194];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &([100 * i32]* %8)[i64 0][i32 %195];
    store i32* %198 with i32 %197;
    i32 %199 = add i32 %194, i32 1;
    i1 %200 = icmp sgt i32 %18, i32 %199;
    i32 %201 = add i32 %195, i32 1;
    cbr i1 %200(prob = 0.75), ^while.body7, ^77;
  ^super.header5:
    i32 %202 = add i32 %75, i32 3;
    i1 %203 = icmp sgt i32 %r, i32 %202;
    cbr i1 %203(prob = 0.941176), ^while.body10, ^scalar.header5;
  ^204:
    i1 %205 = icmp slt i32 %l, i32 %r;
    cbr i1 %205(prob = 0.984615), ^super.header7, ^if.then;
  ^scalar.header3:
    i32 %206 = phi [^super.header3, i32 %78] [^while.body6, i32 %193];
    i32 %207 = phi [^super.header3, i32 %43] [^while.body6, i32 %191];
    i1 %208 = icmp sgt i32 %3, i32 %207;
    cbr i1 %208(prob = 0.75), ^while.body12, ^120;
  ^super.header6:
    i1 %209 = icmp sgt i32 %3, i32 %10;
    cbr i1 %209(prob = 0.941176), ^super.header8, ^scalar.header6;
  ^210:
    cbr i1 %16(prob = 0.984615), ^super.header9, ^if.then2;
  ^while.body8:
    i32 %211 = phi [^super.header4, i32 %111] [^while.body8, i32 %227];
    i32 %212 = phi [^super.header4, i32 %68] [^while.body8, i32 %225];
    i32* %213 = getelementptr &([100 * i32]* %9)[i64 0][i32 %212];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &([100 * i32]* %8)[i64 0][i32 %211];
    store i32* %215 with i32 %214;
    i32* %216 = getelementptr &(i32* %213)[i64 1];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &(i32* %215)[i64 1];
    store i32* %218 with i32 %217;
    i32* %219 = getelementptr &(i32* %213)[i64 2];
    i32 %220 = load i32* %219;
    i32* %221 = getelementptr &(i32* %215)[i64 2];
    store i32* %221 with i32 %220;
    i32* %222 = getelementptr &(i32* %213)[i64 3];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &(i32* %215)[i64 3];
    store i32* %224 with i32 %223;
    i32 %225 = add i32 %212, i32 4;
    i1 %226 = icmp sgt i32 %12, i32 %225;
    i32 %227 = add i32 %211, i32 4;
    cbr i1 %226(prob = 0.941176), ^while.body8, ^scalar.header4;
  ^while.body9 {scalar}:
    i32 %228 = phi [^scalar.header1, i32 %168] [^while.body9, i32 %233];
    i32 %229 = phi [^scalar.header1, i32 %167] [^while.body9, i32 %235];
    i32* %230 = getelementptr &([100 * i32]* %9)[i64 0][i32 %228];
    i32 %231 = load i32* %230;
    i32* %232 = getelementptr &([100 * i32]* %8)[i64 0][i32 %229];
    store i32* %232 with i32 %231;
    i32 %233 = add i32 %228, i32 1;
    i1 %234 = icmp sgt i32 %3, i32 %233;
    i32 %235 = add i32 %229, i32 1;
    cbr i1 %234(prob = 0.75), ^while.body9, ^110;
  ^while.body10:
    i32 %236 = phi [^super.header5, i32 %119] [^while.body10, i32 %252];
    i32 %237 = phi [^super.header5, i32 %75] [^while.body10, i32 %250];
    i32* %238 = getelementptr &([100 * i32]* %9)[i64 0][i32 %237];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &([100 * i32]* %8)[i64 0][i32 %236];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %238)[i64 1];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %240)[i64 1];
    store i32* %243 with i32 %242;
    i32* %244 = getelementptr &(i32* %238)[i64 2];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %240)[i64 2];
    store i32* %246 with i32 %245;
    i32* %247 = getelementptr &(i32* %238)[i64 3];
    i32 %248 = load i32* %247;
    i32* %249 = getelementptr &(i32* %240)[i64 3];
    store i32* %249 with i32 %248;
    i32 %250 = add i32 %237, i32 4;
    i1 %251 = icmp sgt i32 %12, i32 %250;
    i32 %252 = add i32 %236, i32 4;
    cbr i1 %251(prob = 0.941176), ^while.body10, ^scalar.header5;
  ^while.body11 {scalar}:
    i32 %253 = phi [^scalar.header2, i32 %174] [^while.body11, i32 %258];
    i32 %254 = phi [^scalar.header2, i32 %173] [^while.body11, i32 %260];
    i32* %255 = getelementptr &([100 * i32]* %9)[i64 0][i32 %253];
    i32 %256 = load i32* %255;
    i32* %257 = getelementptr &([100 * i32]* %8)[i64 0][i32 %254];
    store i32* %257 with i32 %256;
    i32 %258 = add i32 %253, i32 1;
    i1 %259 = icmp sgt i32 %35, i32 %258;
    i32 %260 = add i32 %254, i32 1;
    cbr i1 %259(prob = 0.75), ^while.body11, ^118;
  ^scalar.header4:
    i32 %261 = phi [^super.header4, i32 %111] [^while.body8, i32 %227];
    i32 %262 = phi [^super.header4, i32 %68] [^while.body8, i32 %225];
    i1 %263 = icmp sgt i32 %r, i32 %262;
    cbr i1 %263(prob = 0.75), ^while.body13, ^204;
  ^super.header7:
    i1 %264 = icmp sgt i32 %r, i32 %10;
    cbr i1 %264(prob = 0.941176), ^super.header10, ^scalar.header7;
  ^scalar.header5:
    i32 %265 = phi [^super.header5, i32 %119] [^while.body10, i32 %252];
    i32 %266 = phi [^super.header5, i32 %75] [^while.body10, i32 %250];
    i1 %267 = icmp sgt i32 %r, i32 %266;
    cbr i1 %267(prob = 0.75), ^while.body14, ^210;
  ^super.header8:
    i1 %268 = icmp sgt i32 %6, i32 %11;
    cbr i1 %268(prob = 0.941176), ^while.body15, ^scalar.header9;
  ^while.body12 {scalar}:
    i32 %269 = phi [^scalar.header3, i32 %207] [^while.body12, i32 %274];
    i32 %270 = phi [^scalar.header3, i32 %206] [^while.body12, i32 %276];
    i32* %271 = getelementptr &([100 * i32]* %9)[i64 0][i32 %269];
    i32 %272 = load i32* %271;
    i32* %273 = getelementptr &([100 * i32]* %8)[i64 0][i32 %270];
    store i32* %273 with i32 %272;
    i32 %274 = add i32 %269, i32 1;
    i1 %275 = icmp sgt i32 %3, i32 %274;
    i32 %276 = add i32 %270, i32 1;
    cbr i1 %275(prob = 0.75), ^while.body12, ^120;
  ^super.header9:
    i32 %277 = add i32 %3, i32 3;
    i1 %278 = icmp sgt i32 %r, i32 %277;
    cbr i1 %278(prob = 0.941176), ^super.header11, ^scalar.header8;
  ^scalar.header6:
    i32 %279 = phi [^super.header6, i32 %l] [^scalar.header9, i32 %356] [^while.body21, i32 %497];
    i1 %280 = icmp sgt i32 %3, i32 %279;
    cbr i1 %280(prob = 0.75), ^while.body16, ^if.then1;
  ^super.header10:
    i1 %281 = icmp slt i32 %11, i32 %12;
    cbr i1 %281(prob = 0.941176), ^while.body17, ^scalar.header10;
  ^while.body13 {scalar}:
    i32 %282 = phi [^scalar.header4, i32 %262] [^while.body13, i32 %287];
    i32 %283 = phi [^scalar.header4, i32 %261] [^while.body13, i32 %289];
    i32* %284 = getelementptr &([100 * i32]* %9)[i64 0][i32 %282];
    i32 %285 = load i32* %284;
    i32* %286 = getelementptr &([100 * i32]* %8)[i64 0][i32 %283];
    store i32* %286 with i32 %285;
    i32 %287 = add i32 %282, i32 1;
    i1 %288 = icmp sgt i32 %r, i32 %287;
    i32 %289 = add i32 %283, i32 1;
    cbr i1 %288(prob = 0.75), ^while.body13, ^204;
  ^while.body14 {scalar}:
    i32 %290 = phi [^scalar.header5, i32 %266] [^while.body14, i32 %295];
    i32 %291 = phi [^scalar.header5, i32 %265] [^while.body14, i32 %297];
    i32* %292 = getelementptr &([100 * i32]* %9)[i64 0][i32 %290];
    i32 %293 = load i32* %292;
    i32* %294 = getelementptr &([100 * i32]* %8)[i64 0][i32 %291];
    store i32* %294 with i32 %293;
    i32 %295 = add i32 %290, i32 1;
    i1 %296 = icmp sgt i32 %r, i32 %295;
    i32 %297 = add i32 %291, i32 1;
    cbr i1 %296(prob = 0.75), ^while.body14, ^210;
  ^super.header11:
    i32 %298 = add i32 %3, i32 15;
    i1 %299 = icmp sgt i32 %12, i32 %298;
    cbr i1 %299(prob = 0.941176), ^while.body18, ^scalar.header11;
  ^while.body15:
    i32 %300 = phi [^super.header8, i32 %l] [^while.body15, i32 %349];
    i32* %301 = getelementptr &([100 * i32]* %8)[i64 0][i32 %300];
    i32 %302 = load i32* %301;
    i32* %303 = getelementptr &([100 * i32]* %9)[i64 0][i32 %300];
    store i32* %303 with i32 %302;
    i32* %304 = getelementptr &(i32* %301)[i64 1];
    i32 %305 = load i32* %304;
    i32* %306 = getelementptr &(i32* %303)[i64 1];
    store i32* %306 with i32 %305;
    i32* %307 = getelementptr &(i32* %301)[i64 2];
    i32 %308 = load i32* %307;
    i32* %309 = getelementptr &(i32* %303)[i64 2];
    store i32* %309 with i32 %308;
    i32* %310 = getelementptr &(i32* %301)[i64 3];
    i32 %311 = load i32* %310;
    i32* %312 = getelementptr &(i32* %303)[i64 3];
    store i32* %312 with i32 %311;
    i32* %313 = getelementptr &(i32* %301)[i64 4];
    i32 %314 = load i32* %313;
    i32* %315 = getelementptr &(i32* %303)[i64 4];
    store i32* %315 with i32 %314;
    i32* %316 = getelementptr &(i32* %301)[i64 5];
    i32 %317 = load i32* %316;
    i32* %318 = getelementptr &(i32* %303)[i64 5];
    store i32* %318 with i32 %317;
    i32* %319 = getelementptr &(i32* %301)[i64 6];
    i32 %320 = load i32* %319;
    i32* %321 = getelementptr &(i32* %303)[i64 6];
    store i32* %321 with i32 %320;
    i32* %322 = getelementptr &(i32* %301)[i64 7];
    i32 %323 = load i32* %322;
    i32* %324 = getelementptr &(i32* %303)[i64 7];
    store i32* %324 with i32 %323;
    i32* %325 = getelementptr &(i32* %301)[i64 8];
    i32 %326 = load i32* %325;
    i32* %327 = getelementptr &(i32* %303)[i64 8];
    store i32* %327 with i32 %326;
    i32* %328 = getelementptr &(i32* %301)[i64 9];
    i32 %329 = load i32* %328;
    i32* %330 = getelementptr &(i32* %303)[i64 9];
    store i32* %330 with i32 %329;
    i32* %331 = getelementptr &(i32* %301)[i64 10];
    i32 %332 = load i32* %331;
    i32* %333 = getelementptr &(i32* %303)[i64 10];
    store i32* %333 with i32 %332;
    i32* %334 = getelementptr &(i32* %301)[i64 11];
    i32 %335 = load i32* %334;
    i32* %336 = getelementptr &(i32* %303)[i64 11];
    store i32* %336 with i32 %335;
    i32* %337 = getelementptr &(i32* %301)[i64 12];
    i32 %338 = load i32* %337;
    i32* %339 = getelementptr &(i32* %303)[i64 12];
    store i32* %339 with i32 %338;
    i32* %340 = getelementptr &(i32* %301)[i64 13];
    i32 %341 = load i32* %340;
    i32* %342 = getelementptr &(i32* %303)[i64 13];
    store i32* %342 with i32 %341;
    i32* %343 = getelementptr &(i32* %301)[i64 14];
    i32 %344 = load i32* %343;
    i32* %345 = getelementptr &(i32* %303)[i64 14];
    store i32* %345 with i32 %344;
    i32* %346 = getelementptr &(i32* %301)[i64 15];
    i32 %347 = load i32* %346;
    i32* %348 = getelementptr &(i32* %303)[i64 15];
    store i32* %348 with i32 %347;
    i32 %349 = add i32 %300, i32 16;
    i1 %350 = icmp sgt i32 %23, i32 %349;
    cbr i1 %350(prob = 0.941176), ^while.body15, ^scalar.header9;
  ^scalar.header7:
    i32 %351 = phi [^super.header7, i32 %l] [^scalar.header10, i32 %467] [^while.body22, i32 %512];
    i1 %352 = icmp sgt i32 %r, i32 %351;
    cbr i1 %352(prob = 0.75), ^while.body19, ^if.then;
  ^scalar.header8:
    i32 %353 = phi [^super.header9, i32 %3] [^scalar.header11, i32 %476] [^while.body23, i32 %527];
    i1 %354 = icmp sgt i32 %r, i32 %353;
    cbr i1 %354(prob = 0.75), ^while.body20, ^if.then2;
  ^scalar.header9:
    i32 %355 = phi [^super.header8, i32 %l] [^while.body15, i32 %349];
    i32 %356 = phi [^super.header8, i32 undef] [^while.body15, i32 %349];
    i1 %357 = icmp sgt i32 %6, i32 %355;
    cbr i1 %357(prob = 0.75), ^while.body21, ^scalar.header6;
  ^while.body16 {scalar}:
    i32 %358 = phi [^scalar.header6, i32 %279] [^while.body16, i32 %362];
    i32* %359 = getelementptr &([100 * i32]* %8)[i64 0][i32 %358];
    i32 %360 = load i32* %359;
    i32* %361 = getelementptr &([100 * i32]* %9)[i64 0][i32 %358];
    store i32* %361 with i32 %360;
    i32 %362 = add i32 %358, i32 1;
    i1 %363 = icmp sgt i32 %3, i32 %362;
    cbr i1 %363(prob = 0.75), ^while.body16, ^if.then1;
  ^while.body17:
    i32 %364 = phi [^super.header10, i32 %l] [^while.body17, i32 %413];
    i32* %365 = getelementptr &([100 * i32]* %8)[i64 0][i32 %364];
    i32 %366 = load i32* %365;
    i32* %367 = getelementptr &([100 * i32]* %9)[i64 0][i32 %364];
    store i32* %367 with i32 %366;
    i32* %368 = getelementptr &(i32* %365)[i64 1];
    i32 %369 = load i32* %368;
    i32* %370 = getelementptr &(i32* %367)[i64 1];
    store i32* %370 with i32 %369;
    i32* %371 = getelementptr &(i32* %365)[i64 2];
    i32 %372 = load i32* %371;
    i32* %373 = getelementptr &(i32* %367)[i64 2];
    store i32* %373 with i32 %372;
    i32* %374 = getelementptr &(i32* %365)[i64 3];
    i32 %375 = load i32* %374;
    i32* %376 = getelementptr &(i32* %367)[i64 3];
    store i32* %376 with i32 %375;
    i32* %377 = getelementptr &(i32* %365)[i64 4];
    i32 %378 = load i32* %377;
    i32* %379 = getelementptr &(i32* %367)[i64 4];
    store i32* %379 with i32 %378;
    i32* %380 = getelementptr &(i32* %365)[i64 5];
    i32 %381 = load i32* %380;
    i32* %382 = getelementptr &(i32* %367)[i64 5];
    store i32* %382 with i32 %381;
    i32* %383 = getelementptr &(i32* %365)[i64 6];
    i32 %384 = load i32* %383;
    i32* %385 = getelementptr &(i32* %367)[i64 6];
    store i32* %385 with i32 %384;
    i32* %386 = getelementptr &(i32* %365)[i64 7];
    i32 %387 = load i32* %386;
    i32* %388 = getelementptr &(i32* %367)[i64 7];
    store i32* %388 with i32 %387;
    i32* %389 = getelementptr &(i32* %365)[i64 8];
    i32 %390 = load i32* %389;
    i32* %391 = getelementptr &(i32* %367)[i64 8];
    store i32* %391 with i32 %390;
    i32* %392 = getelementptr &(i32* %365)[i64 9];
    i32 %393 = load i32* %392;
    i32* %394 = getelementptr &(i32* %367)[i64 9];
    store i32* %394 with i32 %393;
    i32* %395 = getelementptr &(i32* %365)[i64 10];
    i32 %396 = load i32* %395;
    i32* %397 = getelementptr &(i32* %367)[i64 10];
    store i32* %397 with i32 %396;
    i32* %398 = getelementptr &(i32* %365)[i64 11];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %367)[i64 11];
    store i32* %400 with i32 %399;
    i32* %401 = getelementptr &(i32* %365)[i64 12];
    i32 %402 = load i32* %401;
    i32* %403 = getelementptr &(i32* %367)[i64 12];
    store i32* %403 with i32 %402;
    i32* %404 = getelementptr &(i32* %365)[i64 13];
    i32 %405 = load i32* %404;
    i32* %406 = getelementptr &(i32* %367)[i64 13];
    store i32* %406 with i32 %405;
    i32* %407 = getelementptr &(i32* %365)[i64 14];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %367)[i64 14];
    store i32* %409 with i32 %408;
    i32* %410 = getelementptr &(i32* %365)[i64 15];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &(i32* %367)[i64 15];
    store i32* %412 with i32 %411;
    i32 %413 = add i32 %364, i32 16;
    i1 %414 = icmp sgt i32 %13, i32 %413;
    cbr i1 %414(prob = 0.941176), ^while.body17, ^scalar.header10;
  ^while.body18:
    i32 %415 = phi [^super.header11, i32 %3] [^while.body18, i32 %464];
    i32* %416 = getelementptr &([100 * i32]* %8)[i64 0][i32 %415];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &([100 * i32]* %9)[i64 0][i32 %415];
    store i32* %418 with i32 %417;
    i32* %419 = getelementptr &(i32* %416)[i64 1];
    i32 %420 = load i32* %419;
    i32* %421 = getelementptr &(i32* %418)[i64 1];
    store i32* %421 with i32 %420;
    i32* %422 = getelementptr &(i32* %416)[i64 2];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %418)[i64 2];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %416)[i64 3];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %418)[i64 3];
    store i32* %427 with i32 %426;
    i32* %428 = getelementptr &(i32* %416)[i64 4];
    i32 %429 = load i32* %428;
    i32* %430 = getelementptr &(i32* %418)[i64 4];
    store i32* %430 with i32 %429;
    i32* %431 = getelementptr &(i32* %416)[i64 5];
    i32 %432 = load i32* %431;
    i32* %433 = getelementptr &(i32* %418)[i64 5];
    store i32* %433 with i32 %432;
    i32* %434 = getelementptr &(i32* %416)[i64 6];
    i32 %435 = load i32* %434;
    i32* %436 = getelementptr &(i32* %418)[i64 6];
    store i32* %436 with i32 %435;
    i32* %437 = getelementptr &(i32* %416)[i64 7];
    i32 %438 = load i32* %437;
    i32* %439 = getelementptr &(i32* %418)[i64 7];
    store i32* %439 with i32 %438;
    i32* %440 = getelementptr &(i32* %416)[i64 8];
    i32 %441 = load i32* %440;
    i32* %442 = getelementptr &(i32* %418)[i64 8];
    store i32* %442 with i32 %441;
    i32* %443 = getelementptr &(i32* %416)[i64 9];
    i32 %444 = load i32* %443;
    i32* %445 = getelementptr &(i32* %418)[i64 9];
    store i32* %445 with i32 %444;
    i32* %446 = getelementptr &(i32* %416)[i64 10];
    i32 %447 = load i32* %446;
    i32* %448 = getelementptr &(i32* %418)[i64 10];
    store i32* %448 with i32 %447;
    i32* %449 = getelementptr &(i32* %416)[i64 11];
    i32 %450 = load i32* %449;
    i32* %451 = getelementptr &(i32* %418)[i64 11];
    store i32* %451 with i32 %450;
    i32* %452 = getelementptr &(i32* %416)[i64 12];
    i32 %453 = load i32* %452;
    i32* %454 = getelementptr &(i32* %418)[i64 12];
    store i32* %454 with i32 %453;
    i32* %455 = getelementptr &(i32* %416)[i64 13];
    i32 %456 = load i32* %455;
    i32* %457 = getelementptr &(i32* %418)[i64 13];
    store i32* %457 with i32 %456;
    i32* %458 = getelementptr &(i32* %416)[i64 14];
    i32 %459 = load i32* %458;
    i32* %460 = getelementptr &(i32* %418)[i64 14];
    store i32* %460 with i32 %459;
    i32* %461 = getelementptr &(i32* %416)[i64 15];
    i32 %462 = load i32* %461;
    i32* %463 = getelementptr &(i32* %418)[i64 15];
    store i32* %463 with i32 %462;
    i32 %464 = add i32 %415, i32 16;
    i1 %465 = icmp sgt i32 %13, i32 %464;
    cbr i1 %465(prob = 0.941176), ^while.body18, ^scalar.header11;
  ^scalar.header10:
    i32 %466 = phi [^super.header10, i32 %l] [^while.body17, i32 %413];
    i32 %467 = phi [^super.header10, i32 undef] [^while.body17, i32 %413];
    i1 %468 = icmp sgt i32 %12, i32 %466;
    cbr i1 %468(prob = 0.75), ^while.body22, ^scalar.header7;
  ^while.body19 {scalar}:
    i32 %469 = phi [^scalar.header7, i32 %351] [^while.body19, i32 %473];
    i32* %470 = getelementptr &([100 * i32]* %8)[i64 0][i32 %469];
    i32 %471 = load i32* %470;
    i32* %472 = getelementptr &([100 * i32]* %9)[i64 0][i32 %469];
    store i32* %472 with i32 %471;
    i32 %473 = add i32 %469, i32 1;
    i1 %474 = icmp sgt i32 %r, i32 %473;
    cbr i1 %474(prob = 0.75), ^while.body19, ^if.then;
  ^scalar.header11:
    i32 %475 = phi [^super.header11, i32 %3] [^while.body18, i32 %464];
    i32 %476 = phi [^super.header11, i32 undef] [^while.body18, i32 %464];
    i1 %477 = icmp sgt i32 %12, i32 %475;
    cbr i1 %477(prob = 0.75), ^while.body23, ^scalar.header8;
  ^while.body20 {scalar}:
    i32 %478 = phi [^scalar.header8, i32 %353] [^while.body20, i32 %482];
    i32* %479 = getelementptr &([100 * i32]* %8)[i64 0][i32 %478];
    i32 %480 = load i32* %479;
    i32* %481 = getelementptr &([100 * i32]* %9)[i64 0][i32 %478];
    store i32* %481 with i32 %480;
    i32 %482 = add i32 %478, i32 1;
    i1 %483 = icmp sgt i32 %r, i32 %482;
    cbr i1 %483(prob = 0.75), ^while.body20, ^if.then2;
  ^while.body21 {scalar}:
    i32 %484 = phi [^scalar.header9, i32 %355] [^while.body21, i32 %497];
    i32* %485 = getelementptr &([100 * i32]* %8)[i64 0][i32 %484];
    i32 %486 = load i32* %485;
    i32* %487 = getelementptr &([100 * i32]* %9)[i64 0][i32 %484];
    store i32* %487 with i32 %486;
    i32* %488 = getelementptr &(i32* %485)[i64 1];
    i32 %489 = load i32* %488;
    i32* %490 = getelementptr &(i32* %487)[i64 1];
    store i32* %490 with i32 %489;
    i32* %491 = getelementptr &(i32* %485)[i64 2];
    i32 %492 = load i32* %491;
    i32* %493 = getelementptr &(i32* %487)[i64 2];
    store i32* %493 with i32 %492;
    i32* %494 = getelementptr &(i32* %485)[i64 3];
    i32 %495 = load i32* %494;
    i32* %496 = getelementptr &(i32* %487)[i64 3];
    store i32* %496 with i32 %495;
    i32 %497 = add i32 %484, i32 4;
    i1 %498 = icmp sgt i32 %6, i32 %497;
    cbr i1 %498(prob = 0.75), ^while.body21, ^scalar.header6;
  ^while.body22 {scalar}:
    i32 %499 = phi [^scalar.header10, i32 %466] [^while.body22, i32 %512];
    i32* %500 = getelementptr &([100 * i32]* %8)[i64 0][i32 %499];
    i32 %501 = load i32* %500;
    i32* %502 = getelementptr &([100 * i32]* %9)[i64 0][i32 %499];
    store i32* %502 with i32 %501;
    i32* %503 = getelementptr &(i32* %500)[i64 1];
    i32 %504 = load i32* %503;
    i32* %505 = getelementptr &(i32* %502)[i64 1];
    store i32* %505 with i32 %504;
    i32* %506 = getelementptr &(i32* %500)[i64 2];
    i32 %507 = load i32* %506;
    i32* %508 = getelementptr &(i32* %502)[i64 2];
    store i32* %508 with i32 %507;
    i32* %509 = getelementptr &(i32* %500)[i64 3];
    i32 %510 = load i32* %509;
    i32* %511 = getelementptr &(i32* %502)[i64 3];
    store i32* %511 with i32 %510;
    i32 %512 = add i32 %499, i32 4;
    i1 %513 = icmp sgt i32 %12, i32 %512;
    cbr i1 %513(prob = 0.75), ^while.body22, ^scalar.header7;
  ^while.body23 {scalar}:
    i32 %514 = phi [^scalar.header11, i32 %475] [^while.body23, i32 %527];
    i32* %515 = getelementptr &([100 * i32]* %8)[i64 0][i32 %514];
    i32 %516 = load i32* %515;
    i32* %517 = getelementptr &([100 * i32]* %9)[i64 0][i32 %514];
    store i32* %517 with i32 %516;
    i32* %518 = getelementptr &(i32* %515)[i64 1];
    i32 %519 = load i32* %518;
    i32* %520 = getelementptr &(i32* %517)[i64 1];
    store i32* %520 with i32 %519;
    i32* %521 = getelementptr &(i32* %515)[i64 2];
    i32 %522 = load i32* %521;
    i32* %523 = getelementptr &(i32* %517)[i64 2];
    store i32* %523 with i32 %522;
    i32* %524 = getelementptr &(i32* %515)[i64 3];
    i32 %525 = load i32* %524;
    i32* %526 = getelementptr &(i32* %517)[i64 3];
    store i32* %526 with i32 %525;
    i32 %527 = add i32 %514, i32 4;
    i1 %528 = icmp sgt i32 %12, i32 %527;
    cbr i1 %528(prob = 0.75), ^while.body23, ^scalar.header8;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
