internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i32 %5 = add i32 %3, i32 -4;
    [2 * [100 * i32]]* %6 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %7 = getelementptr &([2 * [100 * i32]]* %6)[i64 0][i64 0];
    [100 * i32]* %8 = getelementptr &([2 * [100 * i32]]* %6)[i64 0][i64 1];
    i32 %9 = add i32 %l, i32 4;
    i32 %10 = add i32 %l, i32 16;
    i32 %11 = add i32 %r, i32 -4;
    i32 %12 = add i32 %r, i32 -20;
    cbr i1 %4(prob = 0.5), ^entry1, ^b1;
  ^if.then:
    ret;
  ^b1:
    i32 %13 = add i32 %l, i32 %3;
    i32 %14 = sdiv i32 %13, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %14);
    call (i32, i32) -> void @merge_sort(i32 %14, i32 %3);
    i32 %15 = add i32 %14, i32 -4;
    i32 %16 = add i32 %3, i32 -20;
    ubr ^while.header1;
  ^entry1:
    i32 %17 = add i32 %3, i32 1;
    i1 %18 = icmp sle i32 %r, i32 %17;
    cbr i1 %18(prob = 0.5), ^while.header, ^b2;
  ^b2:
    i32 %19 = add i32 %r, i32 %3;
    i32 %20 = sdiv i32 %19, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %20);
    call (i32, i32) -> void @merge_sort(i32 %20, i32 %r);
    i32 %21 = add i32 %20, i32 -4;
    ubr ^while.header2;
  ^while.header:
    i32 %22 = phi [^entry1, i32 %l] [^if.then1, i32 %40] [^if.else, i32 %40] [^while.header8, i32 %l] [^while.body21, i32 %l];
    i32 %23 = phi [^entry1, i32 %3] [^if.then1, i32 %23] [^if.else, i32 %56] [^while.header8, i32 %3] [^while.body21, i32 %3];
    i32 %24 = phi [^entry1, i32 %l] [^if.then1, i32 %54] [^if.else, i32 %24] [^while.header8, i32 %l] [^while.body21, i32 %l];
    i1 %25 = icmp sgt i32 %3, i32 %24;
    i1 %26 = icmp sgt i32 %r, i32 %23;
    i1 %27 = and i1 %25, i1 %26;
    cbr i1 %27(prob = 0.984615), ^while.body, ^while.header3;
  ^while.header1:
    i32 %28 = phi [^b1, i32 %l] [^if.then2, i32 %47] [^if.else1, i32 %47];
    i32 %29 = phi [^b1, i32 %14] [^if.then2, i32 %29] [^if.else1, i32 %57];
    i32 %30 = phi [^b1, i32 %l] [^if.then2, i32 %55] [^if.else1, i32 %30];
    i1 %31 = icmp sgt i32 %14, i32 %30;
    i1 %32 = icmp sgt i32 %3, i32 %29;
    i1 %33 = and i1 %31, i1 %32;
    cbr i1 %33(prob = 0.984615), ^while.body1, ^while.header4;
  ^while.body:
    i32* %34 = getelementptr &([100 * i32]* %7)[i64 0][i32 %24];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &([100 * i32]* %7)[i64 0][i32 %23];
    i32 %37 = load i32* %36;
    i1 %38 = icmp slt i32 %35, i32 %37;
    i32* %39 = getelementptr &([100 * i32]* %8)[i64 0][i32 %22];
    i32 %40 = add i32 %22, i32 1;
    cbr i1 %38(prob = 0.5), ^if.then1, ^if.else;
  ^while.body1:
    i32* %41 = getelementptr &([100 * i32]* %7)[i64 0][i32 %30];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &([100 * i32]* %7)[i64 0][i32 %29];
    i32 %44 = load i32* %43;
    i1 %45 = icmp slt i32 %42, i32 %44;
    i32* %46 = getelementptr &([100 * i32]* %8)[i64 0][i32 %28];
    i32 %47 = add i32 %28, i32 1;
    cbr i1 %45(prob = 0.5), ^if.then2, ^if.else1;
  ^while.header2:
    i32 %48 = phi [^b2, i32 %3] [^if.then3, i32 %64] [^if.else2, i32 %64];
    i32 %49 = phi [^b2, i32 %20] [^if.then3, i32 %49] [^if.else2, i32 %74];
    i32 %50 = phi [^b2, i32 %3] [^if.then3, i32 %73] [^if.else2, i32 %50];
    i1 %51 = icmp sgt i32 %20, i32 %50;
    i1 %52 = icmp sgt i32 %r, i32 %49;
    i1 %53 = and i1 %51, i1 %52;
    cbr i1 %53(prob = 0.984615), ^while.body2, ^while.header5;
  ^while.header3:
    cbr i1 %25(prob = 0.984615), ^super.header, ^69;
  ^while.header4:
    cbr i1 %31(prob = 0.984615), ^super.header1, ^71;
  ^if.then1:
    store i32* %39 with i32 %35;
    i32 %54 = add i32 %24, i32 1;
    ubr ^while.header;
  ^if.then2:
    store i32* %46 with i32 %42;
    i32 %55 = add i32 %30, i32 1;
    ubr ^while.header1;
  ^if.else:
    store i32* %39 with i32 %37;
    i32 %56 = add i32 %23, i32 1;
    ubr ^while.header;
  ^if.else1:
    store i32* %46 with i32 %44;
    i32 %57 = add i32 %29, i32 1;
    ubr ^while.header1;
  ^while.body2:
    i32* %58 = getelementptr &([100 * i32]* %7)[i64 0][i32 %50];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([100 * i32]* %7)[i64 0][i32 %49];
    i32 %61 = load i32* %60;
    i1 %62 = icmp slt i32 %59, i32 %61;
    i32* %63 = getelementptr &([100 * i32]* %8)[i64 0][i32 %48];
    i32 %64 = add i32 %48, i32 1;
    cbr i1 %62(prob = 0.5), ^if.then3, ^if.else2;
  ^super.header:
    i32 %65 = add i32 %24, i32 4;
    i1 %66 = icmp sgt i32 %3, i32 %65;
    cbr i1 %66(prob = 0.941176), ^while.body3, ^while.body5;
  ^super.header1:
    i32 %67 = add i32 %30, i32 4;
    i1 %68 = icmp sgt i32 %14, i32 %67;
    cbr i1 %68(prob = 0.941176), ^while.body4, ^while.body6;
  ^while.header5:
    cbr i1 %51(prob = 0.984615), ^super.header2, ^131;
  ^69:
    i32 %70 = phi [^while.header3, i32 %22] [^while.body5, i32 %116];
    cbr i1 %26(prob = 0.984615), ^super.header3, ^while.header6;
  ^71:
    i32 %72 = phi [^while.header4, i32 %28] [^while.body6, i32 %128];
    cbr i1 %32(prob = 0.984615), ^super.header4, ^while.header7;
  ^if.then3:
    store i32* %63 with i32 %59;
    i32 %73 = add i32 %50, i32 1;
    ubr ^while.header2;
  ^if.else2:
    store i32* %63 with i32 %61;
    i32 %74 = add i32 %49, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %75 = phi [^super.header, i32 %22] [^while.body3, i32 %91];
    i32 %76 = phi [^super.header, i32 %24] [^while.body3, i32 %89];
    i32* %77 = getelementptr &([100 * i32]* %7)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([100 * i32]* %8)[i64 0][i32 %75];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %77)[i64 1];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %79)[i64 1];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %77)[i64 2];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %79)[i64 2];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &(i32* %77)[i64 3];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %79)[i64 3];
    store i32* %88 with i32 %87;
    i32 %89 = add i32 %76, i32 4;
    i1 %90 = icmp sgt i32 %5, i32 %89;
    i32 %91 = add i32 %75, i32 4;
    cbr i1 %90(prob = 0.941176), ^while.body3, ^while.body5;
  ^while.body4:
    i32 %92 = phi [^super.header1, i32 %28] [^while.body4, i32 %108];
    i32 %93 = phi [^super.header1, i32 %30] [^while.body4, i32 %106];
    i32* %94 = getelementptr &([100 * i32]* %7)[i64 0][i32 %93];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &([100 * i32]* %8)[i64 0][i32 %92];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %94)[i64 1];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %96)[i64 1];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %94)[i64 2];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %96)[i64 2];
    store i32* %102 with i32 %101;
    i32* %103 = getelementptr &(i32* %94)[i64 3];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %96)[i64 3];
    store i32* %105 with i32 %104;
    i32 %106 = add i32 %93, i32 4;
    i1 %107 = icmp sgt i32 %15, i32 %106;
    i32 %108 = add i32 %92, i32 4;
    cbr i1 %107(prob = 0.941176), ^while.body4, ^while.body6;
  ^while.body5 {scalar}:
    i32 %109 = phi [^super.header, i32 %24] [^while.body3, i32 %89] [^while.body5, i32 %114];
    i32 %110 = phi [^super.header, i32 %22] [^while.body3, i32 %91] [^while.body5, i32 %116];
    i32* %111 = getelementptr &([100 * i32]* %7)[i64 0][i32 %109];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([100 * i32]* %8)[i64 0][i32 %110];
    store i32* %113 with i32 %112;
    i32 %114 = add i32 %109, i32 1;
    i1 %115 = icmp sgt i32 %3, i32 %114;
    i32 %116 = add i32 %110, i32 1;
    cbr i1 %115(prob = 0.75), ^while.body5, ^69;
  ^super.header2:
    i32 %117 = add i32 %50, i32 4;
    i1 %118 = icmp sgt i32 %20, i32 %117;
    cbr i1 %118(prob = 0.941176), ^while.body7, ^while.body10;
  ^super.header3:
    i32 %119 = add i32 %23, i32 4;
    i1 %120 = icmp sgt i32 %r, i32 %119;
    cbr i1 %120(prob = 0.941176), ^while.body8, ^while.body11;
  ^while.body6 {scalar}:
    i32 %121 = phi [^super.header1, i32 %30] [^while.body4, i32 %106] [^while.body6, i32 %126];
    i32 %122 = phi [^super.header1, i32 %28] [^while.body4, i32 %108] [^while.body6, i32 %128];
    i32* %123 = getelementptr &([100 * i32]* %7)[i64 0][i32 %121];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &([100 * i32]* %8)[i64 0][i32 %122];
    store i32* %125 with i32 %124;
    i32 %126 = add i32 %121, i32 1;
    i1 %127 = icmp sgt i32 %14, i32 %126;
    i32 %128 = add i32 %122, i32 1;
    cbr i1 %127(prob = 0.75), ^while.body6, ^71;
  ^super.header4:
    i32 %129 = add i32 %29, i32 4;
    i1 %130 = icmp sgt i32 %3, i32 %129;
    cbr i1 %130(prob = 0.941176), ^while.body9, ^while.body12;
  ^131:
    i32 %132 = phi [^while.header5, i32 %48] [^while.body10, i32 %193];
    cbr i1 %52(prob = 0.984615), ^super.header5, ^while.header8;
  ^while.header6:
    i1 %133 = icmp slt i32 %l, i32 %r;
    cbr i1 %133(prob = 0.984615), ^super.header6, ^if.then;
  ^while.header7:
    i1 %134 = icmp slt i32 %l, i32 %3;
    cbr i1 %134(prob = 0.984615), ^super.header7, ^entry1;
  ^while.body7:
    i32 %135 = phi [^super.header2, i32 %48] [^while.body7, i32 %151];
    i32 %136 = phi [^super.header2, i32 %50] [^while.body7, i32 %149];
    i32* %137 = getelementptr &([100 * i32]* %7)[i64 0][i32 %136];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &([100 * i32]* %8)[i64 0][i32 %135];
    store i32* %139 with i32 %138;
    i32* %140 = getelementptr &(i32* %137)[i64 1];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &(i32* %139)[i64 1];
    store i32* %142 with i32 %141;
    i32* %143 = getelementptr &(i32* %137)[i64 2];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %139)[i64 2];
    store i32* %145 with i32 %144;
    i32* %146 = getelementptr &(i32* %137)[i64 3];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %139)[i64 3];
    store i32* %148 with i32 %147;
    i32 %149 = add i32 %136, i32 4;
    i1 %150 = icmp sgt i32 %21, i32 %149;
    i32 %151 = add i32 %135, i32 4;
    cbr i1 %150(prob = 0.941176), ^while.body7, ^while.body10;
  ^while.body8:
    i32 %152 = phi [^super.header3, i32 %70] [^while.body8, i32 %168];
    i32 %153 = phi [^super.header3, i32 %23] [^while.body8, i32 %166];
    i32* %154 = getelementptr &([100 * i32]* %7)[i64 0][i32 %153];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &([100 * i32]* %8)[i64 0][i32 %152];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %154)[i64 1];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %156)[i64 1];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %154)[i64 2];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %156)[i64 2];
    store i32* %162 with i32 %161;
    i32* %163 = getelementptr &(i32* %154)[i64 3];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %156)[i64 3];
    store i32* %165 with i32 %164;
    i32 %166 = add i32 %153, i32 4;
    i1 %167 = icmp sgt i32 %11, i32 %166;
    i32 %168 = add i32 %152, i32 4;
    cbr i1 %167(prob = 0.941176), ^while.body8, ^while.body11;
  ^while.body9:
    i32 %169 = phi [^super.header4, i32 %72] [^while.body9, i32 %185];
    i32 %170 = phi [^super.header4, i32 %29] [^while.body9, i32 %183];
    i32* %171 = getelementptr &([100 * i32]* %7)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &([100 * i32]* %8)[i64 0][i32 %169];
    store i32* %173 with i32 %172;
    i32* %174 = getelementptr &(i32* %171)[i64 1];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %173)[i64 1];
    store i32* %176 with i32 %175;
    i32* %177 = getelementptr &(i32* %171)[i64 2];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %173)[i64 2];
    store i32* %179 with i32 %178;
    i32* %180 = getelementptr &(i32* %171)[i64 3];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &(i32* %173)[i64 3];
    store i32* %182 with i32 %181;
    i32 %183 = add i32 %170, i32 4;
    i1 %184 = icmp sgt i32 %5, i32 %183;
    i32 %185 = add i32 %169, i32 4;
    cbr i1 %184(prob = 0.941176), ^while.body9, ^while.body12;
  ^while.body10 {scalar}:
    i32 %186 = phi [^super.header2, i32 %50] [^while.body7, i32 %149] [^while.body10, i32 %191];
    i32 %187 = phi [^super.header2, i32 %48] [^while.body7, i32 %151] [^while.body10, i32 %193];
    i32* %188 = getelementptr &([100 * i32]* %7)[i64 0][i32 %186];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &([100 * i32]* %8)[i64 0][i32 %187];
    store i32* %190 with i32 %189;
    i32 %191 = add i32 %186, i32 1;
    i1 %192 = icmp sgt i32 %20, i32 %191;
    i32 %193 = add i32 %187, i32 1;
    cbr i1 %192(prob = 0.75), ^while.body10, ^131;
  ^while.body11 {scalar}:
    i32 %194 = phi [^super.header3, i32 %23] [^while.body8, i32 %166] [^while.body11, i32 %199];
    i32 %195 = phi [^super.header3, i32 %70] [^while.body8, i32 %168] [^while.body11, i32 %201];
    i32* %196 = getelementptr &([100 * i32]* %7)[i64 0][i32 %194];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &([100 * i32]* %8)[i64 0][i32 %195];
    store i32* %198 with i32 %197;
    i32 %199 = add i32 %194, i32 1;
    i1 %200 = icmp sgt i32 %r, i32 %199;
    i32 %201 = add i32 %195, i32 1;
    cbr i1 %200(prob = 0.75), ^while.body11, ^while.header6;
  ^super.header5:
    i32 %202 = add i32 %49, i32 4;
    i1 %203 = icmp sgt i32 %r, i32 %202;
    cbr i1 %203(prob = 0.941176), ^while.body13, ^while.body14;
  ^super.header6:
    i1 %204 = icmp sgt i32 %r, i32 %9;
    cbr i1 %204(prob = 0.941176), ^super.header8, ^while.body15;
  ^while.body12 {scalar}:
    i32 %205 = phi [^super.header4, i32 %29] [^while.body9, i32 %183] [^while.body12, i32 %210];
    i32 %206 = phi [^super.header4, i32 %72] [^while.body9, i32 %185] [^while.body12, i32 %212];
    i32* %207 = getelementptr &([100 * i32]* %7)[i64 0][i32 %205];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &([100 * i32]* %8)[i64 0][i32 %206];
    store i32* %209 with i32 %208;
    i32 %210 = add i32 %205, i32 1;
    i1 %211 = icmp sgt i32 %3, i32 %210;
    i32 %212 = add i32 %206, i32 1;
    cbr i1 %211(prob = 0.75), ^while.body12, ^while.header7;
  ^super.header7:
    i1 %213 = icmp sgt i32 %3, i32 %9;
    cbr i1 %213(prob = 0.941176), ^super.header9, ^while.body16;
  ^while.header8:
    i1 %214 = icmp sgt i32 %r, i32 %3;
    cbr i1 %214(prob = 0.984615), ^super.header10, ^while.header;
  ^while.body13:
    i32 %215 = phi [^super.header5, i32 %132] [^while.body13, i32 %231];
    i32 %216 = phi [^super.header5, i32 %49] [^while.body13, i32 %229];
    i32* %217 = getelementptr &([100 * i32]* %7)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &([100 * i32]* %8)[i64 0][i32 %215];
    store i32* %219 with i32 %218;
    i32* %220 = getelementptr &(i32* %217)[i64 1];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %219)[i64 1];
    store i32* %222 with i32 %221;
    i32* %223 = getelementptr &(i32* %217)[i64 2];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %219)[i64 2];
    store i32* %225 with i32 %224;
    i32* %226 = getelementptr &(i32* %217)[i64 3];
    i32 %227 = load i32* %226;
    i32* %228 = getelementptr &(i32* %219)[i64 3];
    store i32* %228 with i32 %227;
    i32 %229 = add i32 %216, i32 4;
    i1 %230 = icmp sgt i32 %11, i32 %229;
    i32 %231 = add i32 %215, i32 4;
    cbr i1 %230(prob = 0.941176), ^while.body13, ^while.body14;
  ^super.header8:
    i1 %232 = icmp slt i32 %10, i32 %11;
    cbr i1 %232(prob = 0.941176), ^while.body17, ^while.body19;
  ^super.header9:
    i1 %233 = icmp sgt i32 %5, i32 %10;
    cbr i1 %233(prob = 0.941176), ^while.body18, ^while.body20;
  ^while.body14 {scalar}:
    i32 %234 = phi [^super.header5, i32 %49] [^while.body13, i32 %229] [^while.body14, i32 %239];
    i32 %235 = phi [^super.header5, i32 %132] [^while.body13, i32 %231] [^while.body14, i32 %241];
    i32* %236 = getelementptr &([100 * i32]* %7)[i64 0][i32 %234];
    i32 %237 = load i32* %236;
    i32* %238 = getelementptr &([100 * i32]* %8)[i64 0][i32 %235];
    store i32* %238 with i32 %237;
    i32 %239 = add i32 %234, i32 1;
    i1 %240 = icmp sgt i32 %r, i32 %239;
    i32 %241 = add i32 %235, i32 1;
    cbr i1 %240(prob = 0.75), ^while.body14, ^while.header8;
  ^while.body15 {scalar}:
    i32 %242 = phi [^super.header6, i32 %l] [^while.body15, i32 %246] [^while.body19, i32 %371];
    i32* %243 = getelementptr &([100 * i32]* %8)[i64 0][i32 %242];
    i32 %244 = load i32* %243;
    i32* %245 = getelementptr &([100 * i32]* %7)[i64 0][i32 %242];
    store i32* %245 with i32 %244;
    i32 %246 = add i32 %242, i32 1;
    i1 %247 = icmp sgt i32 %r, i32 %246;
    cbr i1 %247(prob = 0.75), ^while.body15, ^if.then;
  ^super.header10:
    i32 %248 = add i32 %3, i32 4;
    i1 %249 = icmp sgt i32 %r, i32 %248;
    cbr i1 %249(prob = 0.941176), ^super.header11, ^while.body21;
  ^while.body16 {scalar}:
    i32 %250 = phi [^super.header7, i32 %l] [^while.body16, i32 %254] [^while.body20, i32 %388];
    i32* %251 = getelementptr &([100 * i32]* %8)[i64 0][i32 %250];
    i32 %252 = load i32* %251;
    i32* %253 = getelementptr &([100 * i32]* %7)[i64 0][i32 %250];
    store i32* %253 with i32 %252;
    i32 %254 = add i32 %250, i32 1;
    i1 %255 = icmp sgt i32 %3, i32 %254;
    cbr i1 %255(prob = 0.75), ^while.body16, ^entry1;
  ^while.body17:
    i32 %256 = phi [^super.header8, i32 %l] [^while.body17, i32 %305];
    i32* %257 = getelementptr &([100 * i32]* %8)[i64 0][i32 %256];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &([100 * i32]* %7)[i64 0][i32 %256];
    store i32* %259 with i32 %258;
    i32* %260 = getelementptr &(i32* %257)[i64 1];
    i32 %261 = load i32* %260;
    i32* %262 = getelementptr &(i32* %259)[i64 1];
    store i32* %262 with i32 %261;
    i32* %263 = getelementptr &(i32* %257)[i64 2];
    i32 %264 = load i32* %263;
    i32* %265 = getelementptr &(i32* %259)[i64 2];
    store i32* %265 with i32 %264;
    i32* %266 = getelementptr &(i32* %257)[i64 3];
    i32 %267 = load i32* %266;
    i32* %268 = getelementptr &(i32* %259)[i64 3];
    store i32* %268 with i32 %267;
    i32* %269 = getelementptr &(i32* %257)[i64 4];
    i32 %270 = load i32* %269;
    i32* %271 = getelementptr &(i32* %259)[i64 4];
    store i32* %271 with i32 %270;
    i32* %272 = getelementptr &(i32* %257)[i64 5];
    i32 %273 = load i32* %272;
    i32* %274 = getelementptr &(i32* %259)[i64 5];
    store i32* %274 with i32 %273;
    i32* %275 = getelementptr &(i32* %257)[i64 6];
    i32 %276 = load i32* %275;
    i32* %277 = getelementptr &(i32* %259)[i64 6];
    store i32* %277 with i32 %276;
    i32* %278 = getelementptr &(i32* %257)[i64 7];
    i32 %279 = load i32* %278;
    i32* %280 = getelementptr &(i32* %259)[i64 7];
    store i32* %280 with i32 %279;
    i32* %281 = getelementptr &(i32* %257)[i64 8];
    i32 %282 = load i32* %281;
    i32* %283 = getelementptr &(i32* %259)[i64 8];
    store i32* %283 with i32 %282;
    i32* %284 = getelementptr &(i32* %257)[i64 9];
    i32 %285 = load i32* %284;
    i32* %286 = getelementptr &(i32* %259)[i64 9];
    store i32* %286 with i32 %285;
    i32* %287 = getelementptr &(i32* %257)[i64 10];
    i32 %288 = load i32* %287;
    i32* %289 = getelementptr &(i32* %259)[i64 10];
    store i32* %289 with i32 %288;
    i32* %290 = getelementptr &(i32* %257)[i64 11];
    i32 %291 = load i32* %290;
    i32* %292 = getelementptr &(i32* %259)[i64 11];
    store i32* %292 with i32 %291;
    i32* %293 = getelementptr &(i32* %257)[i64 12];
    i32 %294 = load i32* %293;
    i32* %295 = getelementptr &(i32* %259)[i64 12];
    store i32* %295 with i32 %294;
    i32* %296 = getelementptr &(i32* %257)[i64 13];
    i32 %297 = load i32* %296;
    i32* %298 = getelementptr &(i32* %259)[i64 13];
    store i32* %298 with i32 %297;
    i32* %299 = getelementptr &(i32* %257)[i64 14];
    i32 %300 = load i32* %299;
    i32* %301 = getelementptr &(i32* %259)[i64 14];
    store i32* %301 with i32 %300;
    i32* %302 = getelementptr &(i32* %257)[i64 15];
    i32 %303 = load i32* %302;
    i32* %304 = getelementptr &(i32* %259)[i64 15];
    store i32* %304 with i32 %303;
    i32 %305 = add i32 %256, i32 16;
    i1 %306 = icmp sgt i32 %12, i32 %305;
    cbr i1 %306(prob = 0.941176), ^while.body17, ^while.body19;
  ^while.body18:
    i32 %307 = phi [^super.header9, i32 %l] [^while.body18, i32 %356];
    i32* %308 = getelementptr &([100 * i32]* %8)[i64 0][i32 %307];
    i32 %309 = load i32* %308;
    i32* %310 = getelementptr &([100 * i32]* %7)[i64 0][i32 %307];
    store i32* %310 with i32 %309;
    i32* %311 = getelementptr &(i32* %308)[i64 1];
    i32 %312 = load i32* %311;
    i32* %313 = getelementptr &(i32* %310)[i64 1];
    store i32* %313 with i32 %312;
    i32* %314 = getelementptr &(i32* %308)[i64 2];
    i32 %315 = load i32* %314;
    i32* %316 = getelementptr &(i32* %310)[i64 2];
    store i32* %316 with i32 %315;
    i32* %317 = getelementptr &(i32* %308)[i64 3];
    i32 %318 = load i32* %317;
    i32* %319 = getelementptr &(i32* %310)[i64 3];
    store i32* %319 with i32 %318;
    i32* %320 = getelementptr &(i32* %308)[i64 4];
    i32 %321 = load i32* %320;
    i32* %322 = getelementptr &(i32* %310)[i64 4];
    store i32* %322 with i32 %321;
    i32* %323 = getelementptr &(i32* %308)[i64 5];
    i32 %324 = load i32* %323;
    i32* %325 = getelementptr &(i32* %310)[i64 5];
    store i32* %325 with i32 %324;
    i32* %326 = getelementptr &(i32* %308)[i64 6];
    i32 %327 = load i32* %326;
    i32* %328 = getelementptr &(i32* %310)[i64 6];
    store i32* %328 with i32 %327;
    i32* %329 = getelementptr &(i32* %308)[i64 7];
    i32 %330 = load i32* %329;
    i32* %331 = getelementptr &(i32* %310)[i64 7];
    store i32* %331 with i32 %330;
    i32* %332 = getelementptr &(i32* %308)[i64 8];
    i32 %333 = load i32* %332;
    i32* %334 = getelementptr &(i32* %310)[i64 8];
    store i32* %334 with i32 %333;
    i32* %335 = getelementptr &(i32* %308)[i64 9];
    i32 %336 = load i32* %335;
    i32* %337 = getelementptr &(i32* %310)[i64 9];
    store i32* %337 with i32 %336;
    i32* %338 = getelementptr &(i32* %308)[i64 10];
    i32 %339 = load i32* %338;
    i32* %340 = getelementptr &(i32* %310)[i64 10];
    store i32* %340 with i32 %339;
    i32* %341 = getelementptr &(i32* %308)[i64 11];
    i32 %342 = load i32* %341;
    i32* %343 = getelementptr &(i32* %310)[i64 11];
    store i32* %343 with i32 %342;
    i32* %344 = getelementptr &(i32* %308)[i64 12];
    i32 %345 = load i32* %344;
    i32* %346 = getelementptr &(i32* %310)[i64 12];
    store i32* %346 with i32 %345;
    i32* %347 = getelementptr &(i32* %308)[i64 13];
    i32 %348 = load i32* %347;
    i32* %349 = getelementptr &(i32* %310)[i64 13];
    store i32* %349 with i32 %348;
    i32* %350 = getelementptr &(i32* %308)[i64 14];
    i32 %351 = load i32* %350;
    i32* %352 = getelementptr &(i32* %310)[i64 14];
    store i32* %352 with i32 %351;
    i32* %353 = getelementptr &(i32* %308)[i64 15];
    i32 %354 = load i32* %353;
    i32* %355 = getelementptr &(i32* %310)[i64 15];
    store i32* %355 with i32 %354;
    i32 %356 = add i32 %307, i32 16;
    i1 %357 = icmp sgt i32 %16, i32 %356;
    cbr i1 %357(prob = 0.941176), ^while.body18, ^while.body20;
  ^while.body19 {scalar}:
    i32 %358 = phi [^super.header8, i32 %l] [^while.body17, i32 %305] [^while.body19, i32 %371];
    i32* %359 = getelementptr &([100 * i32]* %8)[i64 0][i32 %358];
    i32 %360 = load i32* %359;
    i32* %361 = getelementptr &([100 * i32]* %7)[i64 0][i32 %358];
    store i32* %361 with i32 %360;
    i32* %362 = getelementptr &(i32* %359)[i64 1];
    i32 %363 = load i32* %362;
    i32* %364 = getelementptr &(i32* %361)[i64 1];
    store i32* %364 with i32 %363;
    i32* %365 = getelementptr &(i32* %359)[i64 2];
    i32 %366 = load i32* %365;
    i32* %367 = getelementptr &(i32* %361)[i64 2];
    store i32* %367 with i32 %366;
    i32* %368 = getelementptr &(i32* %359)[i64 3];
    i32 %369 = load i32* %368;
    i32* %370 = getelementptr &(i32* %361)[i64 3];
    store i32* %370 with i32 %369;
    i32 %371 = add i32 %358, i32 4;
    i1 %372 = icmp sgt i32 %11, i32 %371;
    cbr i1 %372(prob = 0.75), ^while.body19, ^while.body15;
  ^super.header11:
    i32 %373 = add i32 %3, i32 16;
    i1 %374 = icmp sgt i32 %11, i32 %373;
    cbr i1 %374(prob = 0.941176), ^while.body22, ^while.body23;
  ^while.body20 {scalar}:
    i32 %375 = phi [^super.header9, i32 %l] [^while.body18, i32 %356] [^while.body20, i32 %388];
    i32* %376 = getelementptr &([100 * i32]* %8)[i64 0][i32 %375];
    i32 %377 = load i32* %376;
    i32* %378 = getelementptr &([100 * i32]* %7)[i64 0][i32 %375];
    store i32* %378 with i32 %377;
    i32* %379 = getelementptr &(i32* %376)[i64 1];
    i32 %380 = load i32* %379;
    i32* %381 = getelementptr &(i32* %378)[i64 1];
    store i32* %381 with i32 %380;
    i32* %382 = getelementptr &(i32* %376)[i64 2];
    i32 %383 = load i32* %382;
    i32* %384 = getelementptr &(i32* %378)[i64 2];
    store i32* %384 with i32 %383;
    i32* %385 = getelementptr &(i32* %376)[i64 3];
    i32 %386 = load i32* %385;
    i32* %387 = getelementptr &(i32* %378)[i64 3];
    store i32* %387 with i32 %386;
    i32 %388 = add i32 %375, i32 4;
    i1 %389 = icmp sgt i32 %5, i32 %388;
    cbr i1 %389(prob = 0.75), ^while.body20, ^while.body16;
  ^while.body21 {scalar}:
    i32 %390 = phi [^super.header10, i32 %3] [^while.body21, i32 %394] [^while.body23, i32 %460];
    i32* %391 = getelementptr &([100 * i32]* %8)[i64 0][i32 %390];
    i32 %392 = load i32* %391;
    i32* %393 = getelementptr &([100 * i32]* %7)[i64 0][i32 %390];
    store i32* %393 with i32 %392;
    i32 %394 = add i32 %390, i32 1;
    i1 %395 = icmp sgt i32 %r, i32 %394;
    cbr i1 %395(prob = 0.75), ^while.body21, ^while.header;
  ^while.body22:
    i32 %396 = phi [^super.header11, i32 %3] [^while.body22, i32 %445];
    i32* %397 = getelementptr &([100 * i32]* %8)[i64 0][i32 %396];
    i32 %398 = load i32* %397;
    i32* %399 = getelementptr &([100 * i32]* %7)[i64 0][i32 %396];
    store i32* %399 with i32 %398;
    i32* %400 = getelementptr &(i32* %397)[i64 1];
    i32 %401 = load i32* %400;
    i32* %402 = getelementptr &(i32* %399)[i64 1];
    store i32* %402 with i32 %401;
    i32* %403 = getelementptr &(i32* %397)[i64 2];
    i32 %404 = load i32* %403;
    i32* %405 = getelementptr &(i32* %399)[i64 2];
    store i32* %405 with i32 %404;
    i32* %406 = getelementptr &(i32* %397)[i64 3];
    i32 %407 = load i32* %406;
    i32* %408 = getelementptr &(i32* %399)[i64 3];
    store i32* %408 with i32 %407;
    i32* %409 = getelementptr &(i32* %397)[i64 4];
    i32 %410 = load i32* %409;
    i32* %411 = getelementptr &(i32* %399)[i64 4];
    store i32* %411 with i32 %410;
    i32* %412 = getelementptr &(i32* %397)[i64 5];
    i32 %413 = load i32* %412;
    i32* %414 = getelementptr &(i32* %399)[i64 5];
    store i32* %414 with i32 %413;
    i32* %415 = getelementptr &(i32* %397)[i64 6];
    i32 %416 = load i32* %415;
    i32* %417 = getelementptr &(i32* %399)[i64 6];
    store i32* %417 with i32 %416;
    i32* %418 = getelementptr &(i32* %397)[i64 7];
    i32 %419 = load i32* %418;
    i32* %420 = getelementptr &(i32* %399)[i64 7];
    store i32* %420 with i32 %419;
    i32* %421 = getelementptr &(i32* %397)[i64 8];
    i32 %422 = load i32* %421;
    i32* %423 = getelementptr &(i32* %399)[i64 8];
    store i32* %423 with i32 %422;
    i32* %424 = getelementptr &(i32* %397)[i64 9];
    i32 %425 = load i32* %424;
    i32* %426 = getelementptr &(i32* %399)[i64 9];
    store i32* %426 with i32 %425;
    i32* %427 = getelementptr &(i32* %397)[i64 10];
    i32 %428 = load i32* %427;
    i32* %429 = getelementptr &(i32* %399)[i64 10];
    store i32* %429 with i32 %428;
    i32* %430 = getelementptr &(i32* %397)[i64 11];
    i32 %431 = load i32* %430;
    i32* %432 = getelementptr &(i32* %399)[i64 11];
    store i32* %432 with i32 %431;
    i32* %433 = getelementptr &(i32* %397)[i64 12];
    i32 %434 = load i32* %433;
    i32* %435 = getelementptr &(i32* %399)[i64 12];
    store i32* %435 with i32 %434;
    i32* %436 = getelementptr &(i32* %397)[i64 13];
    i32 %437 = load i32* %436;
    i32* %438 = getelementptr &(i32* %399)[i64 13];
    store i32* %438 with i32 %437;
    i32* %439 = getelementptr &(i32* %397)[i64 14];
    i32 %440 = load i32* %439;
    i32* %441 = getelementptr &(i32* %399)[i64 14];
    store i32* %441 with i32 %440;
    i32* %442 = getelementptr &(i32* %397)[i64 15];
    i32 %443 = load i32* %442;
    i32* %444 = getelementptr &(i32* %399)[i64 15];
    store i32* %444 with i32 %443;
    i32 %445 = add i32 %396, i32 16;
    i1 %446 = icmp sgt i32 %12, i32 %445;
    cbr i1 %446(prob = 0.941176), ^while.body22, ^while.body23;
  ^while.body23 {scalar}:
    i32 %447 = phi [^super.header11, i32 %3] [^while.body22, i32 %445] [^while.body23, i32 %460];
    i32* %448 = getelementptr &([100 * i32]* %8)[i64 0][i32 %447];
    i32 %449 = load i32* %448;
    i32* %450 = getelementptr &([100 * i32]* %7)[i64 0][i32 %447];
    store i32* %450 with i32 %449;
    i32* %451 = getelementptr &(i32* %448)[i64 1];
    i32 %452 = load i32* %451;
    i32* %453 = getelementptr &(i32* %450)[i64 1];
    store i32* %453 with i32 %452;
    i32* %454 = getelementptr &(i32* %448)[i64 2];
    i32 %455 = load i32* %454;
    i32* %456 = getelementptr &(i32* %450)[i64 2];
    store i32* %456 with i32 %455;
    i32* %457 = getelementptr &(i32* %448)[i64 3];
    i32 %458 = load i32* %457;
    i32* %459 = getelementptr &(i32* %450)[i64 3];
    store i32* %459 with i32 %458;
    i32 %460 = add i32 %447, i32 4;
    i1 %461 = icmp sgt i32 %11, i32 %460;
    cbr i1 %461(prob = 0.75), ^while.body23, ^while.body21;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
