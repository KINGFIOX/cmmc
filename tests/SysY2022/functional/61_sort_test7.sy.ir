internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i32 %5 = add i32 %3, i32 -8;
    [2 * [100 * i32]]* %6 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %7 = getelementptr &([2 * [100 * i32]]* %6)[i64 0][i64 0];
    [100 * i32]* %8 = getelementptr &([2 * [100 * i32]]* %6)[i64 0][i64 1];
    i32 %9 = add i32 %l, i32 8;
    i32 %10 = add i32 %r, i32 -8;
    cbr i1 %4(prob = 0.5), ^entry1, ^b1;
  ^if.then:
    ret;
  ^b1:
    i32 %11 = add i32 %l, i32 %3;
    i32 %12 = sdiv i32 %11, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %12);
    call (i32, i32) -> void @merge_sort(i32 %12, i32 %3);
    i32 %13 = add i32 %12, i32 -8;
    ubr ^while.header1;
  ^entry1:
    i32 %14 = add i32 %3, i32 1;
    i1 %15 = icmp sle i32 %r, i32 %14;
    cbr i1 %15(prob = 0.5), ^while.header, ^b2;
  ^b2:
    i32 %16 = add i32 %r, i32 %3;
    i32 %17 = sdiv i32 %16, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %17);
    call (i32, i32) -> void @merge_sort(i32 %17, i32 %r);
    i32 %18 = add i32 %17, i32 -8;
    ubr ^while.header2;
  ^while.header:
    i32 %19 = phi [^entry1, i32 %l] [^if.then1, i32 %37] [^if.else, i32 %37] [^while.header8, i32 %l] [^while.body20, i32 %l];
    i32 %20 = phi [^entry1, i32 %3] [^if.then1, i32 %20] [^if.else, i32 %53] [^while.header8, i32 %3] [^while.body20, i32 %3];
    i32 %21 = phi [^entry1, i32 %l] [^if.then1, i32 %51] [^if.else, i32 %21] [^while.header8, i32 %l] [^while.body20, i32 %l];
    i1 %22 = icmp sgt i32 %3, i32 %21;
    i1 %23 = icmp sgt i32 %r, i32 %20;
    i1 %24 = and i1 %22, i1 %23;
    cbr i1 %24(prob = 0.992248), ^while.body, ^while.header3;
  ^while.header1:
    i32 %25 = phi [^b1, i32 %l] [^if.then2, i32 %44] [^if.else1, i32 %44];
    i32 %26 = phi [^b1, i32 %12] [^if.then2, i32 %26] [^if.else1, i32 %54];
    i32 %27 = phi [^b1, i32 %l] [^if.then2, i32 %52] [^if.else1, i32 %27];
    i1 %28 = icmp sgt i32 %12, i32 %27;
    i1 %29 = icmp sgt i32 %3, i32 %26;
    i1 %30 = and i1 %28, i1 %29;
    cbr i1 %30(prob = 0.992248), ^while.body1, ^while.header4;
  ^while.body:
    i32* %31 = getelementptr &([100 * i32]* %7)[i64 0][i32 %21];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([100 * i32]* %7)[i64 0][i32 %20];
    i32 %34 = load i32* %33;
    i1 %35 = icmp slt i32 %32, i32 %34;
    i32* %36 = getelementptr &([100 * i32]* %8)[i64 0][i32 %19];
    i32 %37 = add i32 %19, i32 1;
    cbr i1 %35(prob = 0.5), ^if.then1, ^if.else;
  ^while.body1:
    i32* %38 = getelementptr &([100 * i32]* %7)[i64 0][i32 %27];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &([100 * i32]* %7)[i64 0][i32 %26];
    i32 %41 = load i32* %40;
    i1 %42 = icmp slt i32 %39, i32 %41;
    i32* %43 = getelementptr &([100 * i32]* %8)[i64 0][i32 %25];
    i32 %44 = add i32 %25, i32 1;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else1;
  ^while.header2:
    i32 %45 = phi [^b2, i32 %3] [^if.then3, i32 %61] [^if.else2, i32 %61];
    i32 %46 = phi [^b2, i32 %17] [^if.then3, i32 %46] [^if.else2, i32 %71];
    i32 %47 = phi [^b2, i32 %3] [^if.then3, i32 %70] [^if.else2, i32 %47];
    i1 %48 = icmp sgt i32 %17, i32 %47;
    i1 %49 = icmp sgt i32 %r, i32 %46;
    i1 %50 = and i1 %48, i1 %49;
    cbr i1 %50(prob = 0.992248), ^while.body2, ^while.header5;
  ^while.header3:
    cbr i1 %22(prob = 0.992248), ^super.header, ^66;
  ^while.header4:
    cbr i1 %28(prob = 0.992248), ^super.header1, ^68;
  ^if.then1:
    store i32* %36 with i32 %32;
    i32 %51 = add i32 %21, i32 1;
    ubr ^while.header;
  ^if.then2:
    store i32* %43 with i32 %39;
    i32 %52 = add i32 %27, i32 1;
    ubr ^while.header1;
  ^if.else:
    store i32* %36 with i32 %34;
    i32 %53 = add i32 %20, i32 1;
    ubr ^while.header;
  ^if.else1:
    store i32* %43 with i32 %41;
    i32 %54 = add i32 %26, i32 1;
    ubr ^while.header1;
  ^while.body2:
    i32* %55 = getelementptr &([100 * i32]* %7)[i64 0][i32 %47];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &([100 * i32]* %7)[i64 0][i32 %46];
    i32 %58 = load i32* %57;
    i1 %59 = icmp slt i32 %56, i32 %58;
    i32* %60 = getelementptr &([100 * i32]* %8)[i64 0][i32 %45];
    i32 %61 = add i32 %45, i32 1;
    cbr i1 %59(prob = 0.5), ^if.then3, ^if.else2;
  ^super.header:
    i32 %62 = add i32 %21, i32 8;
    i1 %63 = icmp sgt i32 %3, i32 %62;
    cbr i1 %63(prob = 0.941176), ^while.body3, ^while.body5;
  ^super.header1:
    i32 %64 = add i32 %27, i32 8;
    i1 %65 = icmp sgt i32 %12, i32 %64;
    cbr i1 %65(prob = 0.941176), ^while.body4, ^while.body6;
  ^while.header5:
    cbr i1 %48(prob = 0.992248), ^super.header2, ^152;
  ^66:
    i32 %67 = phi [^while.header3, i32 %19] [^while.body5, i32 %137];
    cbr i1 %23(prob = 0.992248), ^super.header3, ^while.header6;
  ^68:
    i32 %69 = phi [^while.header4, i32 %25] [^while.body6, i32 %149];
    cbr i1 %29(prob = 0.992248), ^super.header4, ^while.header7;
  ^if.then3:
    store i32* %60 with i32 %56;
    i32 %70 = add i32 %47, i32 1;
    ubr ^while.header2;
  ^if.else2:
    store i32* %60 with i32 %58;
    i32 %71 = add i32 %46, i32 1;
    ubr ^while.header2;
  ^while.body3:
    i32 %72 = phi [^super.header, i32 %19] [^while.body3, i32 %100];
    i32 %73 = phi [^super.header, i32 %21] [^while.body3, i32 %98];
    i32* %74 = getelementptr &([100 * i32]* %7)[i64 0][i32 %73];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &([100 * i32]* %8)[i64 0][i32 %72];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %74)[i64 1];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %76)[i64 1];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %74)[i64 2];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %76)[i64 2];
    store i32* %82 with i32 %81;
    i32* %83 = getelementptr &(i32* %74)[i64 3];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %76)[i64 3];
    store i32* %85 with i32 %84;
    i32* %86 = getelementptr &(i32* %74)[i64 4];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %76)[i64 4];
    store i32* %88 with i32 %87;
    i32* %89 = getelementptr &(i32* %74)[i64 5];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %76)[i64 5];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %74)[i64 6];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %76)[i64 6];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %74)[i64 7];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %76)[i64 7];
    store i32* %97 with i32 %96;
    i32 %98 = add i32 %73, i32 8;
    i1 %99 = icmp sgt i32 %5, i32 %98;
    i32 %100 = add i32 %72, i32 8;
    cbr i1 %99(prob = 0.941176), ^while.body3, ^while.body5;
  ^while.body4:
    i32 %101 = phi [^super.header1, i32 %25] [^while.body4, i32 %129];
    i32 %102 = phi [^super.header1, i32 %27] [^while.body4, i32 %127];
    i32* %103 = getelementptr &([100 * i32]* %7)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &([100 * i32]* %8)[i64 0][i32 %101];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %103)[i64 1];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &(i32* %105)[i64 1];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %103)[i64 2];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %105)[i64 2];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %103)[i64 3];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %105)[i64 3];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %103)[i64 4];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %105)[i64 4];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %103)[i64 5];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &(i32* %105)[i64 5];
    store i32* %120 with i32 %119;
    i32* %121 = getelementptr &(i32* %103)[i64 6];
    i32 %122 = load i32* %121;
    i32* %123 = getelementptr &(i32* %105)[i64 6];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %103)[i64 7];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %105)[i64 7];
    store i32* %126 with i32 %125;
    i32 %127 = add i32 %102, i32 8;
    i1 %128 = icmp sgt i32 %13, i32 %127;
    i32 %129 = add i32 %101, i32 8;
    cbr i1 %128(prob = 0.941176), ^while.body4, ^while.body6;
  ^while.body5 {scalar}:
    i32 %130 = phi [^super.header, i32 %21] [^while.body3, i32 %98] [^while.body5, i32 %135];
    i32 %131 = phi [^super.header, i32 %19] [^while.body3, i32 %100] [^while.body5, i32 %137];
    i32* %132 = getelementptr &([100 * i32]* %7)[i64 0][i32 %130];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &([100 * i32]* %8)[i64 0][i32 %131];
    store i32* %134 with i32 %133;
    i32 %135 = add i32 %130, i32 1;
    i1 %136 = icmp sgt i32 %3, i32 %135;
    i32 %137 = add i32 %131, i32 1;
    cbr i1 %136(prob = 0.875), ^while.body5, ^66;
  ^super.header2:
    i32 %138 = add i32 %47, i32 8;
    i1 %139 = icmp sgt i32 %17, i32 %138;
    cbr i1 %139(prob = 0.941176), ^while.body7, ^while.body10;
  ^super.header3:
    i32 %140 = add i32 %20, i32 8;
    i1 %141 = icmp sgt i32 %r, i32 %140;
    cbr i1 %141(prob = 0.941176), ^while.body8, ^while.body11;
  ^while.body6 {scalar}:
    i32 %142 = phi [^super.header1, i32 %27] [^while.body4, i32 %127] [^while.body6, i32 %147];
    i32 %143 = phi [^super.header1, i32 %25] [^while.body4, i32 %129] [^while.body6, i32 %149];
    i32* %144 = getelementptr &([100 * i32]* %7)[i64 0][i32 %142];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &([100 * i32]* %8)[i64 0][i32 %143];
    store i32* %146 with i32 %145;
    i32 %147 = add i32 %142, i32 1;
    i1 %148 = icmp sgt i32 %12, i32 %147;
    i32 %149 = add i32 %143, i32 1;
    cbr i1 %148(prob = 0.875), ^while.body6, ^68;
  ^super.header4:
    i32 %150 = add i32 %26, i32 8;
    i1 %151 = icmp sgt i32 %3, i32 %150;
    cbr i1 %151(prob = 0.941176), ^while.body9, ^while.body12;
  ^152:
    i32 %153 = phi [^while.header5, i32 %45] [^while.body10, i32 %250];
    cbr i1 %49(prob = 0.992248), ^super.header5, ^while.header8;
  ^while.header6:
    i1 %154 = icmp slt i32 %l, i32 %r;
    cbr i1 %154(prob = 0.992248), ^super.header6, ^if.then;
  ^while.header7:
    i1 %155 = icmp slt i32 %l, i32 %3;
    cbr i1 %155(prob = 0.992248), ^super.header7, ^entry1;
  ^while.body7:
    i32 %156 = phi [^super.header2, i32 %45] [^while.body7, i32 %184];
    i32 %157 = phi [^super.header2, i32 %47] [^while.body7, i32 %182];
    i32* %158 = getelementptr &([100 * i32]* %7)[i64 0][i32 %157];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &([100 * i32]* %8)[i64 0][i32 %156];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %158)[i64 1];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %160)[i64 1];
    store i32* %163 with i32 %162;
    i32* %164 = getelementptr &(i32* %158)[i64 2];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %160)[i64 2];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &(i32* %158)[i64 3];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %160)[i64 3];
    store i32* %169 with i32 %168;
    i32* %170 = getelementptr &(i32* %158)[i64 4];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %160)[i64 4];
    store i32* %172 with i32 %171;
    i32* %173 = getelementptr &(i32* %158)[i64 5];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %160)[i64 5];
    store i32* %175 with i32 %174;
    i32* %176 = getelementptr &(i32* %158)[i64 6];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %160)[i64 6];
    store i32* %178 with i32 %177;
    i32* %179 = getelementptr &(i32* %158)[i64 7];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &(i32* %160)[i64 7];
    store i32* %181 with i32 %180;
    i32 %182 = add i32 %157, i32 8;
    i1 %183 = icmp sgt i32 %18, i32 %182;
    i32 %184 = add i32 %156, i32 8;
    cbr i1 %183(prob = 0.941176), ^while.body7, ^while.body10;
  ^while.body8:
    i32 %185 = phi [^super.header3, i32 %67] [^while.body8, i32 %213];
    i32 %186 = phi [^super.header3, i32 %20] [^while.body8, i32 %211];
    i32* %187 = getelementptr &([100 * i32]* %7)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    i32* %189 = getelementptr &([100 * i32]* %8)[i64 0][i32 %185];
    store i32* %189 with i32 %188;
    i32* %190 = getelementptr &(i32* %187)[i64 1];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %189)[i64 1];
    store i32* %192 with i32 %191;
    i32* %193 = getelementptr &(i32* %187)[i64 2];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &(i32* %189)[i64 2];
    store i32* %195 with i32 %194;
    i32* %196 = getelementptr &(i32* %187)[i64 3];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &(i32* %189)[i64 3];
    store i32* %198 with i32 %197;
    i32* %199 = getelementptr &(i32* %187)[i64 4];
    i32 %200 = load i32* %199;
    i32* %201 = getelementptr &(i32* %189)[i64 4];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &(i32* %187)[i64 5];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &(i32* %189)[i64 5];
    store i32* %204 with i32 %203;
    i32* %205 = getelementptr &(i32* %187)[i64 6];
    i32 %206 = load i32* %205;
    i32* %207 = getelementptr &(i32* %189)[i64 6];
    store i32* %207 with i32 %206;
    i32* %208 = getelementptr &(i32* %187)[i64 7];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &(i32* %189)[i64 7];
    store i32* %210 with i32 %209;
    i32 %211 = add i32 %186, i32 8;
    i1 %212 = icmp sgt i32 %10, i32 %211;
    i32 %213 = add i32 %185, i32 8;
    cbr i1 %212(prob = 0.941176), ^while.body8, ^while.body11;
  ^while.body9:
    i32 %214 = phi [^super.header4, i32 %69] [^while.body9, i32 %242];
    i32 %215 = phi [^super.header4, i32 %26] [^while.body9, i32 %240];
    i32* %216 = getelementptr &([100 * i32]* %7)[i64 0][i32 %215];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &([100 * i32]* %8)[i64 0][i32 %214];
    store i32* %218 with i32 %217;
    i32* %219 = getelementptr &(i32* %216)[i64 1];
    i32 %220 = load i32* %219;
    i32* %221 = getelementptr &(i32* %218)[i64 1];
    store i32* %221 with i32 %220;
    i32* %222 = getelementptr &(i32* %216)[i64 2];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &(i32* %218)[i64 2];
    store i32* %224 with i32 %223;
    i32* %225 = getelementptr &(i32* %216)[i64 3];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %218)[i64 3];
    store i32* %227 with i32 %226;
    i32* %228 = getelementptr &(i32* %216)[i64 4];
    i32 %229 = load i32* %228;
    i32* %230 = getelementptr &(i32* %218)[i64 4];
    store i32* %230 with i32 %229;
    i32* %231 = getelementptr &(i32* %216)[i64 5];
    i32 %232 = load i32* %231;
    i32* %233 = getelementptr &(i32* %218)[i64 5];
    store i32* %233 with i32 %232;
    i32* %234 = getelementptr &(i32* %216)[i64 6];
    i32 %235 = load i32* %234;
    i32* %236 = getelementptr &(i32* %218)[i64 6];
    store i32* %236 with i32 %235;
    i32* %237 = getelementptr &(i32* %216)[i64 7];
    i32 %238 = load i32* %237;
    i32* %239 = getelementptr &(i32* %218)[i64 7];
    store i32* %239 with i32 %238;
    i32 %240 = add i32 %215, i32 8;
    i1 %241 = icmp sgt i32 %5, i32 %240;
    i32 %242 = add i32 %214, i32 8;
    cbr i1 %241(prob = 0.941176), ^while.body9, ^while.body12;
  ^while.body10 {scalar}:
    i32 %243 = phi [^super.header2, i32 %47] [^while.body7, i32 %182] [^while.body10, i32 %248];
    i32 %244 = phi [^super.header2, i32 %45] [^while.body7, i32 %184] [^while.body10, i32 %250];
    i32* %245 = getelementptr &([100 * i32]* %7)[i64 0][i32 %243];
    i32 %246 = load i32* %245;
    i32* %247 = getelementptr &([100 * i32]* %8)[i64 0][i32 %244];
    store i32* %247 with i32 %246;
    i32 %248 = add i32 %243, i32 1;
    i1 %249 = icmp sgt i32 %17, i32 %248;
    i32 %250 = add i32 %244, i32 1;
    cbr i1 %249(prob = 0.875), ^while.body10, ^152;
  ^while.body11 {scalar}:
    i32 %251 = phi [^super.header3, i32 %20] [^while.body8, i32 %211] [^while.body11, i32 %256];
    i32 %252 = phi [^super.header3, i32 %67] [^while.body8, i32 %213] [^while.body11, i32 %258];
    i32* %253 = getelementptr &([100 * i32]* %7)[i64 0][i32 %251];
    i32 %254 = load i32* %253;
    i32* %255 = getelementptr &([100 * i32]* %8)[i64 0][i32 %252];
    store i32* %255 with i32 %254;
    i32 %256 = add i32 %251, i32 1;
    i1 %257 = icmp sgt i32 %r, i32 %256;
    i32 %258 = add i32 %252, i32 1;
    cbr i1 %257(prob = 0.875), ^while.body11, ^while.header6;
  ^super.header5:
    i32 %259 = add i32 %46, i32 8;
    i1 %260 = icmp sgt i32 %r, i32 %259;
    cbr i1 %260(prob = 0.941176), ^while.body13, ^while.body16;
  ^super.header6:
    i1 %261 = icmp sgt i32 %r, i32 %9;
    cbr i1 %261(prob = 0.941176), ^while.body14, ^while.body17;
  ^while.body12 {scalar}:
    i32 %262 = phi [^super.header4, i32 %26] [^while.body9, i32 %240] [^while.body12, i32 %267];
    i32 %263 = phi [^super.header4, i32 %69] [^while.body9, i32 %242] [^while.body12, i32 %269];
    i32* %264 = getelementptr &([100 * i32]* %7)[i64 0][i32 %262];
    i32 %265 = load i32* %264;
    i32* %266 = getelementptr &([100 * i32]* %8)[i64 0][i32 %263];
    store i32* %266 with i32 %265;
    i32 %267 = add i32 %262, i32 1;
    i1 %268 = icmp sgt i32 %3, i32 %267;
    i32 %269 = add i32 %263, i32 1;
    cbr i1 %268(prob = 0.875), ^while.body12, ^while.header7;
  ^super.header7:
    i1 %270 = icmp sgt i32 %3, i32 %9;
    cbr i1 %270(prob = 0.941176), ^while.body15, ^while.body18;
  ^while.header8:
    i1 %271 = icmp sgt i32 %r, i32 %3;
    cbr i1 %271(prob = 0.992248), ^super.header8, ^while.header;
  ^while.body13:
    i32 %272 = phi [^super.header5, i32 %153] [^while.body13, i32 %300];
    i32 %273 = phi [^super.header5, i32 %46] [^while.body13, i32 %298];
    i32* %274 = getelementptr &([100 * i32]* %7)[i64 0][i32 %273];
    i32 %275 = load i32* %274;
    i32* %276 = getelementptr &([100 * i32]* %8)[i64 0][i32 %272];
    store i32* %276 with i32 %275;
    i32* %277 = getelementptr &(i32* %274)[i64 1];
    i32 %278 = load i32* %277;
    i32* %279 = getelementptr &(i32* %276)[i64 1];
    store i32* %279 with i32 %278;
    i32* %280 = getelementptr &(i32* %274)[i64 2];
    i32 %281 = load i32* %280;
    i32* %282 = getelementptr &(i32* %276)[i64 2];
    store i32* %282 with i32 %281;
    i32* %283 = getelementptr &(i32* %274)[i64 3];
    i32 %284 = load i32* %283;
    i32* %285 = getelementptr &(i32* %276)[i64 3];
    store i32* %285 with i32 %284;
    i32* %286 = getelementptr &(i32* %274)[i64 4];
    i32 %287 = load i32* %286;
    i32* %288 = getelementptr &(i32* %276)[i64 4];
    store i32* %288 with i32 %287;
    i32* %289 = getelementptr &(i32* %274)[i64 5];
    i32 %290 = load i32* %289;
    i32* %291 = getelementptr &(i32* %276)[i64 5];
    store i32* %291 with i32 %290;
    i32* %292 = getelementptr &(i32* %274)[i64 6];
    i32 %293 = load i32* %292;
    i32* %294 = getelementptr &(i32* %276)[i64 6];
    store i32* %294 with i32 %293;
    i32* %295 = getelementptr &(i32* %274)[i64 7];
    i32 %296 = load i32* %295;
    i32* %297 = getelementptr &(i32* %276)[i64 7];
    store i32* %297 with i32 %296;
    i32 %298 = add i32 %273, i32 8;
    i1 %299 = icmp sgt i32 %10, i32 %298;
    i32 %300 = add i32 %272, i32 8;
    cbr i1 %299(prob = 0.941176), ^while.body13, ^while.body16;
  ^while.body14:
    i32 %301 = phi [^super.header6, i32 %l] [^while.body14, i32 %326];
    i32* %302 = getelementptr &([100 * i32]* %8)[i64 0][i32 %301];
    i32 %303 = load i32* %302;
    i32* %304 = getelementptr &([100 * i32]* %7)[i64 0][i32 %301];
    store i32* %304 with i32 %303;
    i32* %305 = getelementptr &(i32* %302)[i64 1];
    i32 %306 = load i32* %305;
    i32* %307 = getelementptr &(i32* %304)[i64 1];
    store i32* %307 with i32 %306;
    i32* %308 = getelementptr &(i32* %302)[i64 2];
    i32 %309 = load i32* %308;
    i32* %310 = getelementptr &(i32* %304)[i64 2];
    store i32* %310 with i32 %309;
    i32* %311 = getelementptr &(i32* %302)[i64 3];
    i32 %312 = load i32* %311;
    i32* %313 = getelementptr &(i32* %304)[i64 3];
    store i32* %313 with i32 %312;
    i32* %314 = getelementptr &(i32* %302)[i64 4];
    i32 %315 = load i32* %314;
    i32* %316 = getelementptr &(i32* %304)[i64 4];
    store i32* %316 with i32 %315;
    i32* %317 = getelementptr &(i32* %302)[i64 5];
    i32 %318 = load i32* %317;
    i32* %319 = getelementptr &(i32* %304)[i64 5];
    store i32* %319 with i32 %318;
    i32* %320 = getelementptr &(i32* %302)[i64 6];
    i32 %321 = load i32* %320;
    i32* %322 = getelementptr &(i32* %304)[i64 6];
    store i32* %322 with i32 %321;
    i32* %323 = getelementptr &(i32* %302)[i64 7];
    i32 %324 = load i32* %323;
    i32* %325 = getelementptr &(i32* %304)[i64 7];
    store i32* %325 with i32 %324;
    i32 %326 = add i32 %301, i32 8;
    i1 %327 = icmp sgt i32 %10, i32 %326;
    cbr i1 %327(prob = 0.941176), ^while.body14, ^while.body17;
  ^while.body15:
    i32 %328 = phi [^super.header7, i32 %l] [^while.body15, i32 %353];
    i32* %329 = getelementptr &([100 * i32]* %8)[i64 0][i32 %328];
    i32 %330 = load i32* %329;
    i32* %331 = getelementptr &([100 * i32]* %7)[i64 0][i32 %328];
    store i32* %331 with i32 %330;
    i32* %332 = getelementptr &(i32* %329)[i64 1];
    i32 %333 = load i32* %332;
    i32* %334 = getelementptr &(i32* %331)[i64 1];
    store i32* %334 with i32 %333;
    i32* %335 = getelementptr &(i32* %329)[i64 2];
    i32 %336 = load i32* %335;
    i32* %337 = getelementptr &(i32* %331)[i64 2];
    store i32* %337 with i32 %336;
    i32* %338 = getelementptr &(i32* %329)[i64 3];
    i32 %339 = load i32* %338;
    i32* %340 = getelementptr &(i32* %331)[i64 3];
    store i32* %340 with i32 %339;
    i32* %341 = getelementptr &(i32* %329)[i64 4];
    i32 %342 = load i32* %341;
    i32* %343 = getelementptr &(i32* %331)[i64 4];
    store i32* %343 with i32 %342;
    i32* %344 = getelementptr &(i32* %329)[i64 5];
    i32 %345 = load i32* %344;
    i32* %346 = getelementptr &(i32* %331)[i64 5];
    store i32* %346 with i32 %345;
    i32* %347 = getelementptr &(i32* %329)[i64 6];
    i32 %348 = load i32* %347;
    i32* %349 = getelementptr &(i32* %331)[i64 6];
    store i32* %349 with i32 %348;
    i32* %350 = getelementptr &(i32* %329)[i64 7];
    i32 %351 = load i32* %350;
    i32* %352 = getelementptr &(i32* %331)[i64 7];
    store i32* %352 with i32 %351;
    i32 %353 = add i32 %328, i32 8;
    i1 %354 = icmp sgt i32 %5, i32 %353;
    cbr i1 %354(prob = 0.941176), ^while.body15, ^while.body18;
  ^while.body16 {scalar}:
    i32 %355 = phi [^super.header5, i32 %46] [^while.body13, i32 %298] [^while.body16, i32 %360];
    i32 %356 = phi [^super.header5, i32 %153] [^while.body13, i32 %300] [^while.body16, i32 %362];
    i32* %357 = getelementptr &([100 * i32]* %7)[i64 0][i32 %355];
    i32 %358 = load i32* %357;
    i32* %359 = getelementptr &([100 * i32]* %8)[i64 0][i32 %356];
    store i32* %359 with i32 %358;
    i32 %360 = add i32 %355, i32 1;
    i1 %361 = icmp sgt i32 %r, i32 %360;
    i32 %362 = add i32 %356, i32 1;
    cbr i1 %361(prob = 0.875), ^while.body16, ^while.header8;
  ^while.body17 {scalar}:
    i32 %363 = phi [^super.header6, i32 %l] [^while.body14, i32 %326] [^while.body17, i32 %367];
    i32* %364 = getelementptr &([100 * i32]* %8)[i64 0][i32 %363];
    i32 %365 = load i32* %364;
    i32* %366 = getelementptr &([100 * i32]* %7)[i64 0][i32 %363];
    store i32* %366 with i32 %365;
    i32 %367 = add i32 %363, i32 1;
    i1 %368 = icmp sgt i32 %r, i32 %367;
    cbr i1 %368(prob = 0.875), ^while.body17, ^if.then;
  ^super.header8:
    i32 %369 = add i32 %3, i32 8;
    i1 %370 = icmp sgt i32 %r, i32 %369;
    cbr i1 %370(prob = 0.941176), ^while.body19, ^while.body20;
  ^while.body18 {scalar}:
    i32 %371 = phi [^super.header7, i32 %l] [^while.body15, i32 %353] [^while.body18, i32 %375];
    i32* %372 = getelementptr &([100 * i32]* %8)[i64 0][i32 %371];
    i32 %373 = load i32* %372;
    i32* %374 = getelementptr &([100 * i32]* %7)[i64 0][i32 %371];
    store i32* %374 with i32 %373;
    i32 %375 = add i32 %371, i32 1;
    i1 %376 = icmp sgt i32 %3, i32 %375;
    cbr i1 %376(prob = 0.875), ^while.body18, ^entry1;
  ^while.body19:
    i32 %377 = phi [^super.header8, i32 %3] [^while.body19, i32 %402];
    i32* %378 = getelementptr &([100 * i32]* %8)[i64 0][i32 %377];
    i32 %379 = load i32* %378;
    i32* %380 = getelementptr &([100 * i32]* %7)[i64 0][i32 %377];
    store i32* %380 with i32 %379;
    i32* %381 = getelementptr &(i32* %378)[i64 1];
    i32 %382 = load i32* %381;
    i32* %383 = getelementptr &(i32* %380)[i64 1];
    store i32* %383 with i32 %382;
    i32* %384 = getelementptr &(i32* %378)[i64 2];
    i32 %385 = load i32* %384;
    i32* %386 = getelementptr &(i32* %380)[i64 2];
    store i32* %386 with i32 %385;
    i32* %387 = getelementptr &(i32* %378)[i64 3];
    i32 %388 = load i32* %387;
    i32* %389 = getelementptr &(i32* %380)[i64 3];
    store i32* %389 with i32 %388;
    i32* %390 = getelementptr &(i32* %378)[i64 4];
    i32 %391 = load i32* %390;
    i32* %392 = getelementptr &(i32* %380)[i64 4];
    store i32* %392 with i32 %391;
    i32* %393 = getelementptr &(i32* %378)[i64 5];
    i32 %394 = load i32* %393;
    i32* %395 = getelementptr &(i32* %380)[i64 5];
    store i32* %395 with i32 %394;
    i32* %396 = getelementptr &(i32* %378)[i64 6];
    i32 %397 = load i32* %396;
    i32* %398 = getelementptr &(i32* %380)[i64 6];
    store i32* %398 with i32 %397;
    i32* %399 = getelementptr &(i32* %378)[i64 7];
    i32 %400 = load i32* %399;
    i32* %401 = getelementptr &(i32* %380)[i64 7];
    store i32* %401 with i32 %400;
    i32 %402 = add i32 %377, i32 8;
    i1 %403 = icmp sgt i32 %10, i32 %402;
    cbr i1 %403(prob = 0.941176), ^while.body19, ^while.body20;
  ^while.body20 {scalar}:
    i32 %404 = phi [^super.header8, i32 %3] [^while.body19, i32 %402] [^while.body20, i32 %408];
    i32* %405 = getelementptr &([100 * i32]* %8)[i64 0][i32 %404];
    i32 %406 = load i32* %405;
    i32* %407 = getelementptr &([100 * i32]* %7)[i64 0][i32 %404];
    store i32* %407 with i32 %406;
    i32 %408 = add i32 %404, i32 1;
    i1 %409 = icmp sgt i32 %r, i32 %408;
    cbr i1 %409(prob = 0.875), ^while.body20, ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
