internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i1 %5 = icmp slt i32 %l, i32 %3;
    i32 %6 = add i32 %3, i32 -4;
    [2 * [100 * i32]]* %7 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %8 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 1];
    [100 * i32]* %9 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 0];
    i32 %10 = add i32 %l, i32 4;
    i32 %11 = add i32 %l, i32 20;
    i32 %12 = add i32 %r, i32 -16;
    cbr i1 %4(prob = 0.5), ^entry1, ^b1;
  ^if.then:
    ret;
  ^entry1:
    i32 %13 = add i32 %3, i32 1;
    i1 %14 = icmp sle i32 %r, i32 %13;
    i1 %15 = icmp sgt i32 %r, i32 %3;
    cbr i1 %14(prob = 0.5), ^b2, ^b3;
  ^b1:
    i32 %16 = add i32 %l, i32 %3;
    i32 %17 = sdiv i32 %16, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %17);
    call (i32, i32) -> void @merge_sort(i32 %17, i32 %3);
    i1 %18 = icmp sgt i32 %3, i32 %17;
    i1 %19 = icmp slt i32 %l, i32 %17;
    i1 %20 = and i1 %18, i1 %19;
    i32 %21 = add i32 %17, i32 -4;
    i32 %22 = add i32 %3, i32 -16;
    cbr i1 %20(prob = 0.984615), ^while.body, ^while.header;
  ^b2:
    i1 %23 = and i1 %5, i1 %15;
    cbr i1 %23(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body:
    i32 %24 = phi [^b1, i32 %l] [^b4, i32 %81];
    i32 %25 = phi [^b1, i32 %17] [^b4, i32 %80];
    i32 %26 = phi [^b1, i32 %l] [^b4, i32 %85];
    i32* %27 = getelementptr &([100 * i32]* %9)[i64 0][i32 %24];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([100 * i32]* %9)[i64 0][i32 %25];
    i32 %30 = load i32* %29;
    i1 %31 = icmp slt i32 %28, i32 %30;
    i32* %32 = getelementptr &([100 * i32]* %8)[i64 0][i32 %26];
    cbr i1 %31(prob = 0.5), ^if.then1, ^if.else;
  ^b3:
    i32 %33 = add i32 %r, i32 %3;
    i32 %34 = sdiv i32 %33, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %34);
    call (i32, i32) -> void @merge_sort(i32 %34, i32 %r);
    i1 %35 = icmp slt i32 %3, i32 %34;
    i1 %36 = icmp sgt i32 %r, i32 %34;
    i1 %37 = and i1 %35, i1 %36;
    cbr i1 %37(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.header:
    i1 %38 = phi [^b1, i1 %18] [^b4, i1 %83];
    i1 %39 = phi [^b1, i1 %19] [^b4, i1 %82];
    i32 %40 = phi [^b1, i32 %l] [^b4, i32 %81];
    i32 %41 = phi [^b1, i32 %17] [^b4, i32 %80];
    i32 %42 = phi [^b1, i32 %l] [^b4, i32 %85];
    cbr i1 %39(prob = 0.984615), ^super.header, ^while.header3;
  ^if.then1:
    store i32* %32 with i32 %28;
    i32 %43 = add i32 %24, i32 1;
    ubr ^b4;
  ^if.else:
    store i32* %32 with i32 %30;
    i32 %44 = add i32 %25, i32 1;
    ubr ^b4;
  ^while.body1:
    i32 %45 = phi [^b2, i32 %l] [^b5, i32 %120];
    i32 %46 = phi [^b2, i32 %3] [^b5, i32 %119];
    i32 %47 = phi [^b2, i32 %l] [^b5, i32 %124];
    i32* %48 = getelementptr &([100 * i32]* %9)[i64 0][i32 %45];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([100 * i32]* %9)[i64 0][i32 %46];
    i32 %51 = load i32* %50;
    i1 %52 = icmp slt i32 %49, i32 %51;
    i32* %53 = getelementptr &([100 * i32]* %8)[i64 0][i32 %47];
    cbr i1 %52(prob = 0.5), ^if.then2, ^if.else1;
  ^while.body2:
    i32 %54 = phi [^b3, i32 %3] [^b6, i32 %143];
    i32 %55 = phi [^b3, i32 %34] [^b6, i32 %142];
    i32 %56 = phi [^b3, i32 %3] [^b6, i32 %147];
    i32* %57 = getelementptr &([100 * i32]* %9)[i64 0][i32 %54];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &([100 * i32]* %9)[i64 0][i32 %55];
    i32 %60 = load i32* %59;
    i1 %61 = icmp slt i32 %58, i32 %60;
    i32* %62 = getelementptr &([100 * i32]* %8)[i64 0][i32 %56];
    cbr i1 %61(prob = 0.5), ^if.then3, ^if.else2;
  ^while.header1:
    i1 %63 = phi [^b2, i1 %15] [^b5, i1 %122];
    i1 %64 = phi [^b2, i1 %5] [^b5, i1 %121];
    i32 %65 = phi [^b2, i32 %l] [^b5, i32 %120];
    i32 %66 = phi [^b2, i32 %3] [^b5, i32 %119];
    i32 %67 = phi [^b2, i32 %l] [^b5, i32 %124];
    cbr i1 %64(prob = 0.984615), ^super.header1, ^while.header4;
  ^super.header:
    i32 %68 = add i32 %40, i32 4;
    i1 %69 = icmp sgt i32 %17, i32 %68;
    cbr i1 %69(prob = 0.941176), ^while.body3, ^while.body4;
  ^while.header2:
    i1 %70 = phi [^b3, i1 %36] [^b6, i1 %145];
    i1 %71 = phi [^b3, i1 %35] [^b6, i1 %144];
    i32 %72 = phi [^b3, i32 %3] [^b6, i32 %143];
    i32 %73 = phi [^b3, i32 %34] [^b6, i32 %142];
    i32 %74 = phi [^b3, i32 %3] [^b6, i32 %147];
    cbr i1 %71(prob = 0.984615), ^super.header2, ^while.header5;
  ^while.header3:
    i32 %75 = phi [^while.header, i32 %42] [^while.body4, i32 %115];
    cbr i1 %38(prob = 0.984615), ^super.header3, ^while.header6;
  ^if.then2:
    store i32* %53 with i32 %49;
    i32 %76 = add i32 %45, i32 1;
    ubr ^b5;
  ^if.then3:
    store i32* %62 with i32 %58;
    i32 %77 = add i32 %54, i32 1;
    ubr ^b6;
  ^if.else1:
    store i32* %53 with i32 %51;
    i32 %78 = add i32 %46, i32 1;
    ubr ^b5;
  ^if.else2:
    store i32* %62 with i32 %60;
    i32 %79 = add i32 %55, i32 1;
    ubr ^b6;
  ^b4:
    i32 %80 = phi [^if.then1, i32 %25] [^if.else, i32 %44];
    i32 %81 = phi [^if.then1, i32 %43] [^if.else, i32 %24];
    i1 %82 = icmp sgt i32 %17, i32 %81;
    i1 %83 = icmp sgt i32 %3, i32 %80;
    i1 %84 = and i1 %82, i1 %83;
    i32 %85 = add i32 %26, i32 1;
    cbr i1 %84(prob = 0.984615), ^while.body, ^while.header;
  ^super.header1:
    i32 %86 = add i32 %65, i32 4;
    i1 %87 = icmp sgt i32 %3, i32 %86;
    cbr i1 %87(prob = 0.941176), ^while.body5, ^while.body7;
  ^while.body3:
    i32 %88 = phi [^super.header, i32 %42] [^while.body3, i32 %104];
    i32 %89 = phi [^super.header, i32 %40] [^while.body3, i32 %102];
    i32* %90 = getelementptr &([100 * i32]* %9)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([100 * i32]* %8)[i64 0][i32 %88];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %90)[i64 1];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %90)[i64 2];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %90)[i64 3];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    store i32* %101 with i32 %100;
    i32 %102 = add i32 %89, i32 4;
    i1 %103 = icmp sgt i32 %21, i32 %102;
    i32 %104 = add i32 %88, i32 4;
    cbr i1 %103(prob = 0.941176), ^while.body3, ^while.body4;
  ^super.header2:
    i32 %105 = add i32 %72, i32 4;
    i1 %106 = icmp sgt i32 %34, i32 %105;
    cbr i1 %106(prob = 0.941176), ^while.body6, ^while.body9;
  ^while.header4:
    i32 %107 = phi [^while.header1, i32 %67] [^while.body7, i32 %173];
    cbr i1 %63(prob = 0.984615), ^super.header4, ^while.header7;
  ^while.body4 {scalar}:
    i32 %108 = phi [^super.header, i32 %40] [^while.body3, i32 %102] [^while.body4, i32 %113];
    i32 %109 = phi [^super.header, i32 %42] [^while.body3, i32 %104] [^while.body4, i32 %115];
    i32* %110 = getelementptr &([100 * i32]* %9)[i64 0][i32 %108];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &([100 * i32]* %8)[i64 0][i32 %109];
    store i32* %112 with i32 %111;
    i32 %113 = add i32 %108, i32 1;
    i1 %114 = icmp sgt i32 %17, i32 %113;
    i32 %115 = add i32 %109, i32 1;
    cbr i1 %114(prob = 0.75), ^while.body4, ^while.header3;
  ^super.header3:
    i32 %116 = add i32 %41, i32 4;
    i1 %117 = icmp sgt i32 %3, i32 %116;
    cbr i1 %117(prob = 0.941176), ^while.body8, ^while.body10;
  ^while.header5:
    i32 %118 = phi [^while.header2, i32 %74] [^while.body9, i32 %201];
    cbr i1 %70(prob = 0.984615), ^super.header5, ^while.header8;
  ^while.header6:
    cbr i1 %5(prob = 0.984615), ^super.header6, ^entry1;
  ^b5:
    i32 %119 = phi [^if.then2, i32 %46] [^if.else1, i32 %78];
    i32 %120 = phi [^if.then2, i32 %76] [^if.else1, i32 %45];
    i1 %121 = icmp sgt i32 %3, i32 %120;
    i1 %122 = icmp sgt i32 %r, i32 %119;
    i1 %123 = and i1 %121, i1 %122;
    i32 %124 = add i32 %47, i32 1;
    cbr i1 %123(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body5:
    i32 %125 = phi [^super.header1, i32 %67] [^while.body5, i32 %141];
    i32 %126 = phi [^super.header1, i32 %65] [^while.body5, i32 %139];
    i32* %127 = getelementptr &([100 * i32]* %9)[i64 0][i32 %126];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &([100 * i32]* %8)[i64 0][i32 %125];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %127)[i64 1];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &(i32* %129)[i64 1];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %127)[i64 2];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &(i32* %129)[i64 2];
    store i32* %135 with i32 %134;
    i32* %136 = getelementptr &(i32* %127)[i64 3];
    i32 %137 = load i32* %136;
    i32* %138 = getelementptr &(i32* %129)[i64 3];
    store i32* %138 with i32 %137;
    i32 %139 = add i32 %126, i32 4;
    i1 %140 = icmp sgt i32 %6, i32 %139;
    i32 %141 = add i32 %125, i32 4;
    cbr i1 %140(prob = 0.941176), ^while.body5, ^while.body7;
  ^b6:
    i32 %142 = phi [^if.then3, i32 %55] [^if.else2, i32 %79];
    i32 %143 = phi [^if.then3, i32 %77] [^if.else2, i32 %54];
    i1 %144 = icmp sgt i32 %34, i32 %143;
    i1 %145 = icmp sgt i32 %r, i32 %142;
    i1 %146 = and i1 %144, i1 %145;
    i32 %147 = add i32 %56, i32 1;
    cbr i1 %146(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.body6:
    i32 %148 = phi [^super.header2, i32 %105] [^while.body6, i32 %163];
    i32 %149 = phi [^super.header2, i32 %74] [^while.body6, i32 %165];
    i32 %150 = phi [^super.header2, i32 %72] [^while.body6, i32 %148];
    i32* %151 = getelementptr &([100 * i32]* %9)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &([100 * i32]* %8)[i64 0][i32 %149];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %151)[i64 1];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %153)[i64 1];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %151)[i64 2];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %153)[i64 2];
    store i32* %159 with i32 %158;
    i32* %160 = getelementptr &(i32* %151)[i64 3];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %153)[i64 3];
    store i32* %162 with i32 %161;
    i32 %163 = add i32 %148, i32 4;
    i1 %164 = icmp sgt i32 %34, i32 %163;
    i32 %165 = add i32 %149, i32 4;
    cbr i1 %164(prob = 0.941176), ^while.body6, ^while.body9;
  ^while.body7 {scalar}:
    i32 %166 = phi [^super.header1, i32 %65] [^while.body5, i32 %139] [^while.body7, i32 %171];
    i32 %167 = phi [^super.header1, i32 %67] [^while.body5, i32 %141] [^while.body7, i32 %173];
    i32* %168 = getelementptr &([100 * i32]* %9)[i64 0][i32 %166];
    i32 %169 = load i32* %168;
    i32* %170 = getelementptr &([100 * i32]* %8)[i64 0][i32 %167];
    store i32* %170 with i32 %169;
    i32 %171 = add i32 %166, i32 1;
    i1 %172 = icmp sgt i32 %3, i32 %171;
    i32 %173 = add i32 %167, i32 1;
    cbr i1 %172(prob = 0.75), ^while.body7, ^while.header4;
  ^super.header4:
    i32 %174 = add i32 %66, i32 4;
    i1 %175 = icmp sgt i32 %r, i32 %174;
    cbr i1 %175(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body8:
    i32 %176 = phi [^super.header3, i32 %116] [^while.body8, i32 %191];
    i32 %177 = phi [^super.header3, i32 %75] [^while.body8, i32 %193];
    i32 %178 = phi [^super.header3, i32 %41] [^while.body8, i32 %176];
    i32* %179 = getelementptr &([100 * i32]* %9)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &([100 * i32]* %8)[i64 0][i32 %177];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %179)[i64 1];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %181)[i64 1];
    store i32* %184 with i32 %183;
    i32* %185 = getelementptr &(i32* %179)[i64 2];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %181)[i64 2];
    store i32* %187 with i32 %186;
    i32* %188 = getelementptr &(i32* %179)[i64 3];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &(i32* %181)[i64 3];
    store i32* %190 with i32 %189;
    i32 %191 = add i32 %176, i32 4;
    i1 %192 = icmp sgt i32 %3, i32 %191;
    i32 %193 = add i32 %177, i32 4;
    cbr i1 %192(prob = 0.941176), ^while.body8, ^while.body10;
  ^while.body9 {scalar}:
    i32 %194 = phi [^super.header2, i32 %72] [^while.body6, i32 %148] [^while.body9, i32 %199];
    i32 %195 = phi [^super.header2, i32 %74] [^while.body6, i32 %165] [^while.body9, i32 %201];
    i32* %196 = getelementptr &([100 * i32]* %9)[i64 0][i32 %194];
    i32 %197 = load i32* %196;
    i32* %198 = getelementptr &([100 * i32]* %8)[i64 0][i32 %195];
    store i32* %198 with i32 %197;
    i32 %199 = add i32 %194, i32 1;
    i1 %200 = icmp sgt i32 %34, i32 %199;
    i32 %201 = add i32 %195, i32 1;
    cbr i1 %200(prob = 0.75), ^while.body9, ^while.header5;
  ^super.header5:
    i32 %202 = add i32 %73, i32 4;
    i1 %203 = icmp sgt i32 %r, i32 %202;
    cbr i1 %203(prob = 0.941176), ^while.body12, ^while.body14;
  ^while.header7:
    i1 %204 = icmp slt i32 %l, i32 %r;
    cbr i1 %204(prob = 0.984615), ^super.header7, ^if.then;
  ^while.body10 {scalar}:
    i32 %205 = phi [^super.header3, i32 %41] [^while.body8, i32 %176] [^while.body10, i32 %210];
    i32 %206 = phi [^super.header3, i32 %75] [^while.body8, i32 %193] [^while.body10, i32 %212];
    i32* %207 = getelementptr &([100 * i32]* %9)[i64 0][i32 %205];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &([100 * i32]* %8)[i64 0][i32 %206];
    store i32* %209 with i32 %208;
    i32 %210 = add i32 %205, i32 1;
    i1 %211 = icmp sgt i32 %3, i32 %210;
    i32 %212 = add i32 %206, i32 1;
    cbr i1 %211(prob = 0.75), ^while.body10, ^while.header6;
  ^super.header6:
    i1 %213 = icmp sgt i32 %3, i32 %10;
    cbr i1 %213(prob = 0.941176), ^super.header8, ^while.body15;
  ^while.header8:
    cbr i1 %15(prob = 0.984615), ^super.header9, ^b2;
  ^while.body11:
    i32 %214 = phi [^super.header4, i32 %174] [^while.body11, i32 %229];
    i32 %215 = phi [^super.header4, i32 %107] [^while.body11, i32 %231];
    i32 %216 = phi [^super.header4, i32 %66] [^while.body11, i32 %214];
    i32* %217 = getelementptr &([100 * i32]* %9)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &([100 * i32]* %8)[i64 0][i32 %215];
    store i32* %219 with i32 %218;
    i32* %220 = getelementptr &(i32* %217)[i64 1];
    i32 %221 = load i32* %220;
    i32* %222 = getelementptr &(i32* %219)[i64 1];
    store i32* %222 with i32 %221;
    i32* %223 = getelementptr &(i32* %217)[i64 2];
    i32 %224 = load i32* %223;
    i32* %225 = getelementptr &(i32* %219)[i64 2];
    store i32* %225 with i32 %224;
    i32* %226 = getelementptr &(i32* %217)[i64 3];
    i32 %227 = load i32* %226;
    i32* %228 = getelementptr &(i32* %219)[i64 3];
    store i32* %228 with i32 %227;
    i32 %229 = add i32 %214, i32 4;
    i1 %230 = icmp sgt i32 %r, i32 %229;
    i32 %231 = add i32 %215, i32 4;
    cbr i1 %230(prob = 0.941176), ^while.body11, ^while.body13;
  ^while.body12:
    i32 %232 = phi [^super.header5, i32 %202] [^while.body12, i32 %247];
    i32 %233 = phi [^super.header5, i32 %118] [^while.body12, i32 %249];
    i32 %234 = phi [^super.header5, i32 %73] [^while.body12, i32 %232];
    i32* %235 = getelementptr &([100 * i32]* %9)[i64 0][i32 %234];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &([100 * i32]* %8)[i64 0][i32 %233];
    store i32* %237 with i32 %236;
    i32* %238 = getelementptr &(i32* %235)[i64 1];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &(i32* %237)[i64 1];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %235)[i64 2];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %237)[i64 2];
    store i32* %243 with i32 %242;
    i32* %244 = getelementptr &(i32* %235)[i64 3];
    i32 %245 = load i32* %244;
    i32* %246 = getelementptr &(i32* %237)[i64 3];
    store i32* %246 with i32 %245;
    i32 %247 = add i32 %232, i32 4;
    i1 %248 = icmp sgt i32 %r, i32 %247;
    i32 %249 = add i32 %233, i32 4;
    cbr i1 %248(prob = 0.941176), ^while.body12, ^while.body14;
  ^while.body13 {scalar}:
    i32 %250 = phi [^super.header4, i32 %66] [^while.body11, i32 %214] [^while.body13, i32 %255];
    i32 %251 = phi [^super.header4, i32 %107] [^while.body11, i32 %231] [^while.body13, i32 %257];
    i32* %252 = getelementptr &([100 * i32]* %9)[i64 0][i32 %250];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &([100 * i32]* %8)[i64 0][i32 %251];
    store i32* %254 with i32 %253;
    i32 %255 = add i32 %250, i32 1;
    i1 %256 = icmp sgt i32 %r, i32 %255;
    i32 %257 = add i32 %251, i32 1;
    cbr i1 %256(prob = 0.75), ^while.body13, ^while.header7;
  ^super.header7:
    i1 %258 = icmp sgt i32 %r, i32 %10;
    cbr i1 %258(prob = 0.941176), ^super.header10, ^while.body17;
  ^super.header8:
    i1 %259 = icmp sgt i32 %3, i32 %11;
    cbr i1 %259(prob = 0.941176), ^while.body16, ^while.body18;
  ^while.body14 {scalar}:
    i32 %260 = phi [^super.header5, i32 %73] [^while.body12, i32 %232] [^while.body14, i32 %265];
    i32 %261 = phi [^super.header5, i32 %118] [^while.body12, i32 %249] [^while.body14, i32 %267];
    i32* %262 = getelementptr &([100 * i32]* %9)[i64 0][i32 %260];
    i32 %263 = load i32* %262;
    i32* %264 = getelementptr &([100 * i32]* %8)[i64 0][i32 %261];
    store i32* %264 with i32 %263;
    i32 %265 = add i32 %260, i32 1;
    i1 %266 = icmp sgt i32 %r, i32 %265;
    i32 %267 = add i32 %261, i32 1;
    cbr i1 %266(prob = 0.75), ^while.body14, ^while.header8;
  ^super.header9:
    i32 %268 = add i32 %3, i32 4;
    i1 %269 = icmp sgt i32 %r, i32 %268;
    cbr i1 %269(prob = 0.941176), ^super.header11, ^while.body19;
  ^while.body15 {scalar}:
    i32 %270 = phi [^super.header6, i32 %l] [^while.body15, i32 %274] [^while.body18, i32 %338];
    i32* %271 = getelementptr &([100 * i32]* %8)[i64 0][i32 %270];
    i32 %272 = load i32* %271;
    i32* %273 = getelementptr &([100 * i32]* %9)[i64 0][i32 %270];
    store i32* %273 with i32 %272;
    i32 %274 = add i32 %270, i32 1;
    i1 %275 = icmp sgt i32 %3, i32 %274;
    cbr i1 %275(prob = 0.75), ^while.body15, ^entry1;
  ^super.header10:
    i1 %276 = icmp sgt i32 %r, i32 %11;
    cbr i1 %276(prob = 0.941176), ^while.body20, ^while.body22;
  ^while.body16:
    i32 %277 = phi [^super.header8, i32 %l] [^while.body16, i32 %329];
    i32 %278 = phi [^super.header8, i32 %10] [^while.body16, i32 %327];
    i32* %279 = getelementptr &([100 * i32]* %8)[i64 0][i32 %277];
    i32 %280 = load i32* %279;
    i32* %281 = getelementptr &([100 * i32]* %9)[i64 0][i32 %277];
    store i32* %281 with i32 %280;
    i32* %282 = getelementptr &(i32* %279)[i64 1];
    i32 %283 = load i32* %282;
    i32* %284 = getelementptr &(i32* %281)[i64 1];
    store i32* %284 with i32 %283;
    i32* %285 = getelementptr &(i32* %279)[i64 2];
    i32 %286 = load i32* %285;
    i32* %287 = getelementptr &(i32* %281)[i64 2];
    store i32* %287 with i32 %286;
    i32* %288 = getelementptr &(i32* %279)[i64 3];
    i32 %289 = load i32* %288;
    i32* %290 = getelementptr &(i32* %281)[i64 3];
    store i32* %290 with i32 %289;
    i32* %291 = getelementptr &([100 * i32]* %8)[i64 0][i32 %278];
    i32 %292 = load i32* %291;
    i32* %293 = getelementptr &([100 * i32]* %9)[i64 0][i32 %278];
    store i32* %293 with i32 %292;
    i32* %294 = getelementptr &(i32* %291)[i64 1];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %293)[i64 1];
    store i32* %296 with i32 %295;
    i32* %297 = getelementptr &(i32* %291)[i64 2];
    i32 %298 = load i32* %297;
    i32* %299 = getelementptr &(i32* %293)[i64 2];
    store i32* %299 with i32 %298;
    i32* %300 = getelementptr &(i32* %291)[i64 3];
    i32 %301 = load i32* %300;
    i32* %302 = getelementptr &(i32* %293)[i64 3];
    store i32* %302 with i32 %301;
    i32* %303 = getelementptr &(i32* %291)[i64 4];
    i32 %304 = load i32* %303;
    i32* %305 = getelementptr &(i32* %293)[i64 4];
    store i32* %305 with i32 %304;
    i32* %306 = getelementptr &(i32* %291)[i64 5];
    i32 %307 = load i32* %306;
    i32* %308 = getelementptr &(i32* %293)[i64 5];
    store i32* %308 with i32 %307;
    i32* %309 = getelementptr &(i32* %291)[i64 6];
    i32 %310 = load i32* %309;
    i32* %311 = getelementptr &(i32* %293)[i64 6];
    store i32* %311 with i32 %310;
    i32* %312 = getelementptr &(i32* %291)[i64 7];
    i32 %313 = load i32* %312;
    i32* %314 = getelementptr &(i32* %293)[i64 7];
    store i32* %314 with i32 %313;
    i32* %315 = getelementptr &(i32* %291)[i64 8];
    i32 %316 = load i32* %315;
    i32* %317 = getelementptr &(i32* %293)[i64 8];
    store i32* %317 with i32 %316;
    i32* %318 = getelementptr &(i32* %291)[i64 9];
    i32 %319 = load i32* %318;
    i32* %320 = getelementptr &(i32* %293)[i64 9];
    store i32* %320 with i32 %319;
    i32* %321 = getelementptr &(i32* %291)[i64 10];
    i32 %322 = load i32* %321;
    i32* %323 = getelementptr &(i32* %293)[i64 10];
    store i32* %323 with i32 %322;
    i32* %324 = getelementptr &(i32* %291)[i64 11];
    i32 %325 = load i32* %324;
    i32* %326 = getelementptr &(i32* %293)[i64 11];
    store i32* %326 with i32 %325;
    i32 %327 = add i32 %278, i32 16;
    i1 %328 = icmp sgt i32 %22, i32 %327;
    i32 %329 = add i32 %278, i32 12;
    cbr i1 %328(prob = 0.941176), ^while.body16, ^while.body18;
  ^super.header11:
    i32 %330 = add i32 %3, i32 20;
    i1 %331 = icmp sgt i32 %r, i32 %330;
    cbr i1 %331(prob = 0.941176), ^while.body21, ^while.body23;
  ^while.body17 {scalar}:
    i32 %332 = phi [^super.header7, i32 %l] [^while.body17, i32 %336] [^while.body22, i32 %467];
    i32* %333 = getelementptr &([100 * i32]* %8)[i64 0][i32 %332];
    i32 %334 = load i32* %333;
    i32* %335 = getelementptr &([100 * i32]* %9)[i64 0][i32 %332];
    store i32* %335 with i32 %334;
    i32 %336 = add i32 %332, i32 1;
    i1 %337 = icmp sgt i32 %r, i32 %336;
    cbr i1 %337(prob = 0.75), ^while.body17, ^if.then;
  ^while.body18 {scalar}:
    i32 %338 = phi [^super.header8, i32 %10] [^while.body16, i32 %327] [^while.body18, i32 %352];
    i32 %339 = phi [^super.header8, i32 %l] [^while.body16, i32 %329] [^while.body18, i32 %338];
    i32* %340 = getelementptr &([100 * i32]* %8)[i64 0][i32 %339];
    i32 %341 = load i32* %340;
    i32* %342 = getelementptr &([100 * i32]* %9)[i64 0][i32 %339];
    store i32* %342 with i32 %341;
    i32* %343 = getelementptr &(i32* %340)[i64 1];
    i32 %344 = load i32* %343;
    i32* %345 = getelementptr &(i32* %342)[i64 1];
    store i32* %345 with i32 %344;
    i32* %346 = getelementptr &(i32* %340)[i64 2];
    i32 %347 = load i32* %346;
    i32* %348 = getelementptr &(i32* %342)[i64 2];
    store i32* %348 with i32 %347;
    i32* %349 = getelementptr &(i32* %340)[i64 3];
    i32 %350 = load i32* %349;
    i32* %351 = getelementptr &(i32* %342)[i64 3];
    store i32* %351 with i32 %350;
    i32 %352 = add i32 %338, i32 4;
    i1 %353 = icmp sgt i32 %3, i32 %352;
    cbr i1 %353(prob = 0.75), ^while.body18, ^while.body15;
  ^while.body19 {scalar}:
    i32 %354 = phi [^super.header9, i32 %3] [^while.body19, i32 %358] [^while.body23, i32 %483];
    i32* %355 = getelementptr &([100 * i32]* %8)[i64 0][i32 %354];
    i32 %356 = load i32* %355;
    i32* %357 = getelementptr &([100 * i32]* %9)[i64 0][i32 %354];
    store i32* %357 with i32 %356;
    i32 %358 = add i32 %354, i32 1;
    i1 %359 = icmp sgt i32 %r, i32 %358;
    cbr i1 %359(prob = 0.75), ^while.body19, ^b2;
  ^while.body20:
    i32 %360 = phi [^super.header10, i32 %l] [^while.body20, i32 %412];
    i32 %361 = phi [^super.header10, i32 %10] [^while.body20, i32 %410];
    i32* %362 = getelementptr &([100 * i32]* %8)[i64 0][i32 %360];
    i32 %363 = load i32* %362;
    i32* %364 = getelementptr &([100 * i32]* %9)[i64 0][i32 %360];
    store i32* %364 with i32 %363;
    i32* %365 = getelementptr &(i32* %362)[i64 1];
    i32 %366 = load i32* %365;
    i32* %367 = getelementptr &(i32* %364)[i64 1];
    store i32* %367 with i32 %366;
    i32* %368 = getelementptr &(i32* %362)[i64 2];
    i32 %369 = load i32* %368;
    i32* %370 = getelementptr &(i32* %364)[i64 2];
    store i32* %370 with i32 %369;
    i32* %371 = getelementptr &(i32* %362)[i64 3];
    i32 %372 = load i32* %371;
    i32* %373 = getelementptr &(i32* %364)[i64 3];
    store i32* %373 with i32 %372;
    i32* %374 = getelementptr &([100 * i32]* %8)[i64 0][i32 %361];
    i32 %375 = load i32* %374;
    i32* %376 = getelementptr &([100 * i32]* %9)[i64 0][i32 %361];
    store i32* %376 with i32 %375;
    i32* %377 = getelementptr &(i32* %374)[i64 1];
    i32 %378 = load i32* %377;
    i32* %379 = getelementptr &(i32* %376)[i64 1];
    store i32* %379 with i32 %378;
    i32* %380 = getelementptr &(i32* %374)[i64 2];
    i32 %381 = load i32* %380;
    i32* %382 = getelementptr &(i32* %376)[i64 2];
    store i32* %382 with i32 %381;
    i32* %383 = getelementptr &(i32* %374)[i64 3];
    i32 %384 = load i32* %383;
    i32* %385 = getelementptr &(i32* %376)[i64 3];
    store i32* %385 with i32 %384;
    i32* %386 = getelementptr &(i32* %374)[i64 4];
    i32 %387 = load i32* %386;
    i32* %388 = getelementptr &(i32* %376)[i64 4];
    store i32* %388 with i32 %387;
    i32* %389 = getelementptr &(i32* %374)[i64 5];
    i32 %390 = load i32* %389;
    i32* %391 = getelementptr &(i32* %376)[i64 5];
    store i32* %391 with i32 %390;
    i32* %392 = getelementptr &(i32* %374)[i64 6];
    i32 %393 = load i32* %392;
    i32* %394 = getelementptr &(i32* %376)[i64 6];
    store i32* %394 with i32 %393;
    i32* %395 = getelementptr &(i32* %374)[i64 7];
    i32 %396 = load i32* %395;
    i32* %397 = getelementptr &(i32* %376)[i64 7];
    store i32* %397 with i32 %396;
    i32* %398 = getelementptr &(i32* %374)[i64 8];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %376)[i64 8];
    store i32* %400 with i32 %399;
    i32* %401 = getelementptr &(i32* %374)[i64 9];
    i32 %402 = load i32* %401;
    i32* %403 = getelementptr &(i32* %376)[i64 9];
    store i32* %403 with i32 %402;
    i32* %404 = getelementptr &(i32* %374)[i64 10];
    i32 %405 = load i32* %404;
    i32* %406 = getelementptr &(i32* %376)[i64 10];
    store i32* %406 with i32 %405;
    i32* %407 = getelementptr &(i32* %374)[i64 11];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %376)[i64 11];
    store i32* %409 with i32 %408;
    i32 %410 = add i32 %361, i32 16;
    i1 %411 = icmp sgt i32 %12, i32 %410;
    i32 %412 = add i32 %361, i32 12;
    cbr i1 %411(prob = 0.941176), ^while.body20, ^while.body22;
  ^while.body21:
    i32 %413 = phi [^super.header11, i32 %330] [^while.body21, i32 %464];
    i32 %414 = phi [^super.header11, i32 %3] [^while.body21, i32 %466];
    i32 %415 = phi [^super.header11, i32 %268] [^while.body21, i32 %413];
    i32* %416 = getelementptr &([100 * i32]* %8)[i64 0][i32 %414];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &([100 * i32]* %9)[i64 0][i32 %414];
    store i32* %418 with i32 %417;
    i32* %419 = getelementptr &(i32* %416)[i64 1];
    i32 %420 = load i32* %419;
    i32* %421 = getelementptr &(i32* %418)[i64 1];
    store i32* %421 with i32 %420;
    i32* %422 = getelementptr &(i32* %416)[i64 2];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %418)[i64 2];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %416)[i64 3];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %418)[i64 3];
    store i32* %427 with i32 %426;
    i32* %428 = getelementptr &([100 * i32]* %8)[i64 0][i32 %415];
    i32 %429 = load i32* %428;
    i32* %430 = getelementptr &([100 * i32]* %9)[i64 0][i32 %415];
    store i32* %430 with i32 %429;
    i32* %431 = getelementptr &(i32* %428)[i64 1];
    i32 %432 = load i32* %431;
    i32* %433 = getelementptr &(i32* %430)[i64 1];
    store i32* %433 with i32 %432;
    i32* %434 = getelementptr &(i32* %428)[i64 2];
    i32 %435 = load i32* %434;
    i32* %436 = getelementptr &(i32* %430)[i64 2];
    store i32* %436 with i32 %435;
    i32* %437 = getelementptr &(i32* %428)[i64 3];
    i32 %438 = load i32* %437;
    i32* %439 = getelementptr &(i32* %430)[i64 3];
    store i32* %439 with i32 %438;
    i32* %440 = getelementptr &(i32* %428)[i64 4];
    i32 %441 = load i32* %440;
    i32* %442 = getelementptr &(i32* %430)[i64 4];
    store i32* %442 with i32 %441;
    i32* %443 = getelementptr &(i32* %428)[i64 5];
    i32 %444 = load i32* %443;
    i32* %445 = getelementptr &(i32* %430)[i64 5];
    store i32* %445 with i32 %444;
    i32* %446 = getelementptr &(i32* %428)[i64 6];
    i32 %447 = load i32* %446;
    i32* %448 = getelementptr &(i32* %430)[i64 6];
    store i32* %448 with i32 %447;
    i32* %449 = getelementptr &(i32* %428)[i64 7];
    i32 %450 = load i32* %449;
    i32* %451 = getelementptr &(i32* %430)[i64 7];
    store i32* %451 with i32 %450;
    i32* %452 = getelementptr &(i32* %428)[i64 8];
    i32 %453 = load i32* %452;
    i32* %454 = getelementptr &(i32* %430)[i64 8];
    store i32* %454 with i32 %453;
    i32* %455 = getelementptr &(i32* %428)[i64 9];
    i32 %456 = load i32* %455;
    i32* %457 = getelementptr &(i32* %430)[i64 9];
    store i32* %457 with i32 %456;
    i32* %458 = getelementptr &(i32* %428)[i64 10];
    i32 %459 = load i32* %458;
    i32* %460 = getelementptr &(i32* %430)[i64 10];
    store i32* %460 with i32 %459;
    i32* %461 = getelementptr &(i32* %428)[i64 11];
    i32 %462 = load i32* %461;
    i32* %463 = getelementptr &(i32* %430)[i64 11];
    store i32* %463 with i32 %462;
    i32 %464 = add i32 %413, i32 16;
    i1 %465 = icmp sgt i32 %r, i32 %464;
    i32 %466 = add i32 %415, i32 12;
    cbr i1 %465(prob = 0.941176), ^while.body21, ^while.body23;
  ^while.body22 {scalar}:
    i32 %467 = phi [^super.header10, i32 %10] [^while.body20, i32 %410] [^while.body22, i32 %481];
    i32 %468 = phi [^super.header10, i32 %l] [^while.body20, i32 %412] [^while.body22, i32 %467];
    i32* %469 = getelementptr &([100 * i32]* %8)[i64 0][i32 %468];
    i32 %470 = load i32* %469;
    i32* %471 = getelementptr &([100 * i32]* %9)[i64 0][i32 %468];
    store i32* %471 with i32 %470;
    i32* %472 = getelementptr &(i32* %469)[i64 1];
    i32 %473 = load i32* %472;
    i32* %474 = getelementptr &(i32* %471)[i64 1];
    store i32* %474 with i32 %473;
    i32* %475 = getelementptr &(i32* %469)[i64 2];
    i32 %476 = load i32* %475;
    i32* %477 = getelementptr &(i32* %471)[i64 2];
    store i32* %477 with i32 %476;
    i32* %478 = getelementptr &(i32* %469)[i64 3];
    i32 %479 = load i32* %478;
    i32* %480 = getelementptr &(i32* %471)[i64 3];
    store i32* %480 with i32 %479;
    i32 %481 = add i32 %467, i32 4;
    i1 %482 = icmp sgt i32 %r, i32 %481;
    cbr i1 %482(prob = 0.75), ^while.body22, ^while.body17;
  ^while.body23 {scalar}:
    i32 %483 = phi [^super.header11, i32 %268] [^while.body21, i32 %413] [^while.body23, i32 %497];
    i32 %484 = phi [^super.header11, i32 %3] [^while.body21, i32 %466] [^while.body23, i32 %483];
    i32* %485 = getelementptr &([100 * i32]* %8)[i64 0][i32 %484];
    i32 %486 = load i32* %485;
    i32* %487 = getelementptr &([100 * i32]* %9)[i64 0][i32 %484];
    store i32* %487 with i32 %486;
    i32* %488 = getelementptr &(i32* %485)[i64 1];
    i32 %489 = load i32* %488;
    i32* %490 = getelementptr &(i32* %487)[i64 1];
    store i32* %490 with i32 %489;
    i32* %491 = getelementptr &(i32* %485)[i64 2];
    i32 %492 = load i32* %491;
    i32* %493 = getelementptr &(i32* %487)[i64 2];
    store i32* %493 with i32 %492;
    i32* %494 = getelementptr &(i32* %485)[i64 3];
    i32 %495 = load i32* %494;
    i32* %496 = getelementptr &(i32* %487)[i64 3];
    store i32* %496 with i32 %495;
    i32 %497 = add i32 %483, i32 4;
    i1 %498 = icmp sgt i32 %r, i32 %497;
    cbr i1 %498(prob = 0.75), ^while.body23, ^while.body19;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
