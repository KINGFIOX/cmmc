internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^if.then1, i32 %20] [^if.else, i32 %23];
    i32 %8 = phi [^b, i32 %3] [^if.then1, i32 %8] [^if.else, i32 %22];
    i32 %9 = phi [^b, i32 %l] [^if.then1, i32 %19] [^if.else, i32 %9];
    i1 %10 = icmp sgt i32 %3, i32 %9;
    i1 %11 = icmp sgt i32 %r, i32 %8;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %5)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %5)[i64 0][i32 %8];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %10(prob = 0.97), ^super.header, ^26;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %6)[i64 0][i32 %7];
    store i32* %18 with i32 %14;
    i32 %19 = add i32 %9, i32 1;
    i32 %20 = add i32 %7, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %6)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %8, i32 1;
    i32 %23 = add i32 %7, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %24 = add i32 %9, i32 4;
    i1 %25 = icmp sgt i32 %3, i32 %24;
    cbr i1 %25(prob = 0.89), ^while.body1, ^while.body2;
  ^26:
    i32 %27 = phi [^while.header1, i32 %7] [^while.body2, i32 %53];
    cbr i1 %11(prob = 0.97), ^super.header1, ^while.header2;
  ^while.body1:
    i32 %28 = phi [^super.header, i32 %7] [^while.body1, i32 %45];
    i32 %29 = phi [^super.header, i32 %9] [^while.body1, i32 %44];
    i32* %30 = getelementptr &([100 * i32]* %5)[i64 0][i32 %29];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &([100 * i32]* %6)[i64 0][i32 %28];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %30)[i64 1];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %30)[i64 2];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %30)[i64 3];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %29, i32 8;
    i1 %43 = icmp sgt i32 %3, i32 %42;
    i32 %44 = add i32 %29, i32 4;
    i32 %45 = add i32 %28, i32 4;
    cbr i1 %43(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %46 = phi [^super.header, i32 %9] [^while.body1, i32 %44] [^while.body2, i32 %51];
    i32 %47 = phi [^super.header, i32 %7] [^while.body1, i32 %45] [^while.body2, i32 %53];
    i32* %48 = getelementptr &([100 * i32]* %5)[i64 0][i32 %46];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &([100 * i32]* %6)[i64 0][i32 %47];
    store i32* %50 with i32 %49;
    i32 %51 = add i32 %46, i32 1;
    i1 %52 = icmp sgt i32 %3, i32 %51;
    i32 %53 = add i32 %47, i32 1;
    cbr i1 %52(prob = 0.75), ^while.body2, ^26;
  ^super.header1:
    i32 %54 = add i32 %8, i32 4;
    i1 %55 = icmp sgt i32 %r, i32 %54;
    cbr i1 %55(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header2:
    i1 %56 = icmp slt i32 %l, i32 %r;
    cbr i1 %56(prob = 0.97), ^super.header2, ^if.then;
  ^while.body3:
    i32 %57 = phi [^super.header1, i32 %27] [^while.body3, i32 %74];
    i32 %58 = phi [^super.header1, i32 %8] [^while.body3, i32 %73];
    i32* %59 = getelementptr &([100 * i32]* %5)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([100 * i32]* %6)[i64 0][i32 %57];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %59)[i64 1];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %61)[i64 1];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %59)[i64 2];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %61)[i64 2];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %59)[i64 3];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %61)[i64 3];
    store i32* %70 with i32 %69;
    i32 %71 = add i32 %58, i32 8;
    i1 %72 = icmp sgt i32 %r, i32 %71;
    i32 %73 = add i32 %58, i32 4;
    i32 %74 = add i32 %57, i32 4;
    cbr i1 %72(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %75 = phi [^super.header1, i32 %8] [^while.body3, i32 %73] [^while.body4, i32 %80];
    i32 %76 = phi [^super.header1, i32 %27] [^while.body3, i32 %74] [^while.body4, i32 %82];
    i32* %77 = getelementptr &([100 * i32]* %5)[i64 0][i32 %75];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([100 * i32]* %6)[i64 0][i32 %76];
    store i32* %79 with i32 %78;
    i32 %80 = add i32 %75, i32 1;
    i1 %81 = icmp sgt i32 %r, i32 %80;
    i32 %82 = add i32 %76, i32 1;
    cbr i1 %81(prob = 0.75), ^while.body4, ^while.header2;
  ^super.header2:
    i32 %83 = add i32 %l, i32 4;
    i1 %84 = icmp sgt i32 %r, i32 %83;
    cbr i1 %84(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body5:
    i32 %85 = phi [^super.header2, i32 %l] [^while.body5, i32 %100];
    i32* %86 = getelementptr &([100 * i32]* %6)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([100 * i32]* %5)[i64 0][i32 %85];
    store i32* %88 with i32 %87;
    i32* %89 = getelementptr &(i32* %86)[i64 1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %88)[i64 1];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %86)[i64 2];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %88)[i64 2];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %86)[i64 3];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %88)[i64 3];
    store i32* %97 with i32 %96;
    i32 %98 = add i32 %85, i32 8;
    i1 %99 = icmp sgt i32 %r, i32 %98;
    i32 %100 = add i32 %85, i32 4;
    cbr i1 %99(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body6:
    i32 %101 = phi [^super.header2, i32 %l] [^while.body5, i32 %100] [^while.body6, i32 %105];
    i32* %102 = getelementptr &([100 * i32]* %6)[i64 0][i32 %101];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &([100 * i32]* %5)[i64 0][i32 %101];
    store i32* %104 with i32 %103;
    i32 %105 = add i32 %101, i32 1;
    i1 %106 = icmp sgt i32 %r, i32 %105;
    cbr i1 %106(prob = 0.75), ^while.body6, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
