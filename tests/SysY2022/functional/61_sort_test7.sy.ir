internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^if.then1, i32 %21] [^if.else, i32 %24];
    i32 %8 = phi [^b, i32 %3] [^if.then1, i32 %8] [^if.else, i32 %23];
    i32 %9 = phi [^b, i32 %l] [^if.then1, i32 %20] [^if.else, i32 %9];
    i1 %10 = icmp sgt i32 %3, i32 %9;
    i1 %11 = icmp sgt i32 %r, i32 %8;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %10(prob = 0.97), ^super.header, ^while.header2;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    i32 %19 = load i32* %13;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %9, i32 1;
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %22 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %22 with i32 %16;
    i32 %23 = add i32 %8, i32 1;
    i32 %24 = add i32 %7, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %25 = phi [^while.header1, i32 %9] [^while.body1, i32 %27];
    i32 %26 = phi [^while.header1, i32 %7] [^while.body1, i32 %42];
    i32 %27 = add i32 %25, i32 4;
    i1 %28 = icmp sgt i32 %3, i32 %27;
    cbr i1 %28(prob = 0.89), ^while.body1, ^super.header1;
  ^while.header2:
    i32 %29 = phi [^while.header1, i32 %7] [^while.body4, i32 %85];
    cbr i1 %11(prob = 0.97), ^super.header2, ^while.header3;
  ^while.body1:
    i32* %30 = getelementptr &([100 * i32]* %6)[i64 0][i32 %25];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &([100 * i32]* %5)[i64 0][i32 %26];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %30)[i64 1];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %30)[i64 2];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %30)[i64 3];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %26, i32 4;
    ubr ^super.header;
  ^super.header1:
    i32 %43 = phi [^super.header, i32 %25] [^while.body2, i32 %45];
    i32 %44 = phi [^super.header, i32 %26] [^while.body2, i32 %64];
    i32 %45 = add i32 %43, i32 4;
    i1 %46 = icmp sgt i32 %3, i32 %45;
    cbr i1 %46(prob = 0.89), ^while.body2, ^while.body4;
  ^super.header2:
    i32 %47 = phi [^while.header2, i32 %8] [^while.body3, i32 %49];
    i32 %48 = phi [^while.header2, i32 %29] [^while.body3, i32 %77];
    i32 %49 = add i32 %47, i32 4;
    i1 %50 = icmp sgt i32 %r, i32 %49;
    cbr i1 %50(prob = 0.89), ^while.body3, ^super.header3;
  ^while.header3:
    i1 %51 = icmp slt i32 %l, i32 %r;
    cbr i1 %51(prob = 0.97), ^super.header4, ^if.then;
  ^while.body2:
    i32* %52 = getelementptr &([100 * i32]* %6)[i64 0][i32 %43];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &([100 * i32]* %5)[i64 0][i32 %44];
    store i32* %54 with i32 %53;
    i32* %55 = getelementptr &(i32* %52)[i64 1];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %52)[i64 2];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %54)[i64 2];
    store i32* %60 with i32 %59;
    i32* %61 = getelementptr &(i32* %52)[i64 3];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %54)[i64 3];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %44, i32 4;
    ubr ^super.header1;
  ^while.body3:
    i32* %65 = getelementptr &([100 * i32]* %6)[i64 0][i32 %47];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([100 * i32]* %5)[i64 0][i32 %48];
    store i32* %67 with i32 %66;
    i32* %68 = getelementptr &(i32* %65)[i64 1];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %67)[i64 1];
    store i32* %70 with i32 %69;
    i32* %71 = getelementptr &(i32* %65)[i64 2];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %67)[i64 2];
    store i32* %73 with i32 %72;
    i32* %74 = getelementptr &(i32* %65)[i64 3];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %67)[i64 3];
    store i32* %76 with i32 %75;
    i32 %77 = add i32 %48, i32 4;
    ubr ^super.header2;
  ^while.body4:
    i32 %78 = phi [^super.header1, i32 %43] [^while.body4, i32 %83];
    i32 %79 = phi [^super.header1, i32 %44] [^while.body4, i32 %85];
    i32* %80 = getelementptr &([100 * i32]* %6)[i64 0][i32 %78];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &([100 * i32]* %5)[i64 0][i32 %79];
    store i32* %82 with i32 %81;
    i32 %83 = add i32 %78, i32 1;
    i1 %84 = icmp sgt i32 %3, i32 %83;
    i32 %85 = add i32 %79, i32 1;
    cbr i1 %84(prob = 0.97), ^while.body4, ^while.header2;
  ^super.header3:
    i32 %86 = phi [^super.header2, i32 %47] [^while.body5, i32 %88];
    i32 %87 = phi [^super.header2, i32 %48] [^while.body5, i32 %105];
    i32 %88 = add i32 %86, i32 4;
    i1 %89 = icmp sgt i32 %r, i32 %88;
    cbr i1 %89(prob = 0.89), ^while.body5, ^while.body7;
  ^super.header4:
    i32 %90 = phi [^while.header3, i32 %l] [^while.body6, i32 %91];
    i32 %91 = add i32 %90, i32 4;
    i1 %92 = icmp sgt i32 %r, i32 %91;
    cbr i1 %92(prob = 0.89), ^while.body6, ^super.header5;
  ^while.body5:
    i32* %93 = getelementptr &([100 * i32]* %6)[i64 0][i32 %86];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &([100 * i32]* %5)[i64 0][i32 %87];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %93)[i64 1];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %93)[i64 2];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %95)[i64 2];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %93)[i64 3];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %95)[i64 3];
    store i32* %104 with i32 %103;
    i32 %105 = add i32 %87, i32 4;
    ubr ^super.header3;
  ^while.body6:
    i32* %106 = getelementptr &([100 * i32]* %5)[i64 0][i32 %90];
    i32 %107 = load i32* %106;
    i32* %108 = getelementptr &([100 * i32]* %6)[i64 0][i32 %90];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %106)[i64 1];
    i32 %110 = load i32* %109;
    i32* %111 = getelementptr &(i32* %108)[i64 1];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %106)[i64 2];
    i32 %113 = load i32* %112;
    i32* %114 = getelementptr &(i32* %108)[i64 2];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %106)[i64 3];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %108)[i64 3];
    store i32* %117 with i32 %116;
    ubr ^super.header4;
  ^while.body7:
    i32 %118 = phi [^super.header3, i32 %86] [^while.body7, i32 %123];
    i32 %119 = phi [^super.header3, i32 %87] [^while.body7, i32 %125];
    i32* %120 = getelementptr &([100 * i32]* %6)[i64 0][i32 %118];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &([100 * i32]* %5)[i64 0][i32 %119];
    store i32* %122 with i32 %121;
    i32 %123 = add i32 %118, i32 1;
    i1 %124 = icmp sgt i32 %r, i32 %123;
    i32 %125 = add i32 %119, i32 1;
    cbr i1 %124(prob = 0.97), ^while.body7, ^while.header3;
  ^super.header5:
    i32 %126 = phi [^super.header4, i32 %90] [^while.body8, i32 %127];
    i32 %127 = add i32 %126, i32 4;
    i1 %128 = icmp sgt i32 %r, i32 %127;
    cbr i1 %128(prob = 0.89), ^while.body8, ^while.body9;
  ^while.body8:
    i32* %129 = getelementptr &([100 * i32]* %5)[i64 0][i32 %126];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &([100 * i32]* %6)[i64 0][i32 %126];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %129)[i64 1];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %131)[i64 1];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %129)[i64 2];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %131)[i64 2];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %129)[i64 3];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %131)[i64 3];
    store i32* %140 with i32 %139;
    ubr ^super.header5;
  ^while.body9:
    i32 %141 = phi [^super.header5, i32 %126] [^while.body9, i32 %145];
    i32* %142 = getelementptr &([100 * i32]* %5)[i64 0][i32 %141];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &([100 * i32]* %6)[i64 0][i32 %141];
    store i32* %144 with i32 %143;
    i32 %145 = add i32 %141, i32 1;
    i1 %146 = icmp sgt i32 %r, i32 %145;
    cbr i1 %146(prob = 0.97), ^while.body9, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
