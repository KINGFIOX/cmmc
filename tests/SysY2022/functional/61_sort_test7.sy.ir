internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^if.then1, i32 %20] [^if.else, i32 %23];
    i32 %8 = phi [^b, i32 %3] [^if.then1, i32 %8] [^if.else, i32 %22];
    i32 %9 = phi [^b, i32 %l] [^if.then1, i32 %19] [^if.else, i32 %9];
    i1 %10 = icmp sgt i32 %3, i32 %9;
    i1 %11 = icmp sgt i32 %r, i32 %8;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %10(prob = 0.97), ^super.header, ^while.header2;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %18 with i32 %14;
    i32 %19 = add i32 %9, i32 1;
    i32 %20 = add i32 %7, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %8, i32 1;
    i32 %23 = add i32 %7, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %24 = phi [^while.header1, i32 %9] [^while.body1, i32 %26];
    i32 %25 = phi [^while.header1, i32 %7] [^while.body1, i32 %41];
    i32 %26 = add i32 %24, i32 4;
    i1 %27 = icmp sgt i32 %3, i32 %26;
    cbr i1 %27(prob = 0.89), ^while.body1, ^super.header1;
  ^while.header2:
    i32 %28 = phi [^while.header1, i32 %7] [^while.body4, i32 %84];
    cbr i1 %11(prob = 0.97), ^super.header2, ^while.header3;
  ^while.body1:
    i32* %29 = getelementptr &([100 * i32]* %6)[i64 0][i32 %24];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &([100 * i32]* %5)[i64 0][i32 %25];
    store i32* %31 with i32 %30;
    i32* %32 = getelementptr &(i32* %29)[i64 1];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &(i32* %31)[i64 1];
    store i32* %34 with i32 %33;
    i32* %35 = getelementptr &(i32* %29)[i64 2];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %31)[i64 2];
    store i32* %37 with i32 %36;
    i32* %38 = getelementptr &(i32* %29)[i64 3];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %31)[i64 3];
    store i32* %40 with i32 %39;
    i32 %41 = add i32 %25, i32 4;
    ubr ^super.header;
  ^super.header1:
    i32 %42 = phi [^super.header, i32 %24] [^while.body2, i32 %44];
    i32 %43 = phi [^super.header, i32 %25] [^while.body2, i32 %63];
    i32 %44 = add i32 %42, i32 4;
    i1 %45 = icmp sgt i32 %3, i32 %44;
    cbr i1 %45(prob = 0.89), ^while.body2, ^while.body4;
  ^super.header2:
    i32 %46 = phi [^while.header2, i32 %8] [^while.body3, i32 %48];
    i32 %47 = phi [^while.header2, i32 %28] [^while.body3, i32 %76];
    i32 %48 = add i32 %46, i32 4;
    i1 %49 = icmp sgt i32 %r, i32 %48;
    cbr i1 %49(prob = 0.89), ^while.body3, ^super.header3;
  ^while.header3:
    i1 %50 = icmp slt i32 %l, i32 %r;
    cbr i1 %50(prob = 0.97), ^super.header4, ^if.then;
  ^while.body2:
    i32* %51 = getelementptr &([100 * i32]* %6)[i64 0][i32 %42];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &([100 * i32]* %5)[i64 0][i32 %43];
    store i32* %53 with i32 %52;
    i32* %54 = getelementptr &(i32* %51)[i64 1];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %51)[i64 2];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %51)[i64 3];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %53)[i64 3];
    store i32* %62 with i32 %61;
    i32 %63 = add i32 %43, i32 4;
    ubr ^super.header1;
  ^while.body3:
    i32* %64 = getelementptr &([100 * i32]* %6)[i64 0][i32 %46];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &([100 * i32]* %5)[i64 0][i32 %47];
    store i32* %66 with i32 %65;
    i32* %67 = getelementptr &(i32* %64)[i64 1];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %66)[i64 1];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %64)[i64 2];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %66)[i64 2];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %64)[i64 3];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %66)[i64 3];
    store i32* %75 with i32 %74;
    i32 %76 = add i32 %47, i32 4;
    ubr ^super.header2;
  ^while.body4:
    i32 %77 = phi [^super.header1, i32 %42] [^while.body4, i32 %82];
    i32 %78 = phi [^super.header1, i32 %43] [^while.body4, i32 %84];
    i32* %79 = getelementptr &([100 * i32]* %6)[i64 0][i32 %77];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([100 * i32]* %5)[i64 0][i32 %78];
    store i32* %81 with i32 %80;
    i32 %82 = add i32 %77, i32 1;
    i1 %83 = icmp sgt i32 %3, i32 %82;
    i32 %84 = add i32 %78, i32 1;
    cbr i1 %83(prob = 0.97), ^while.body4, ^while.header2;
  ^super.header3:
    i32 %85 = phi [^super.header2, i32 %46] [^while.body5, i32 %87];
    i32 %86 = phi [^super.header2, i32 %47] [^while.body5, i32 %104];
    i32 %87 = add i32 %85, i32 4;
    i1 %88 = icmp sgt i32 %r, i32 %87;
    cbr i1 %88(prob = 0.89), ^while.body5, ^while.body7;
  ^super.header4:
    i32 %89 = phi [^while.header3, i32 %l] [^while.body6, i32 %90];
    i32 %90 = add i32 %89, i32 4;
    i1 %91 = icmp sgt i32 %r, i32 %90;
    cbr i1 %91(prob = 0.89), ^while.body6, ^super.header5;
  ^while.body5:
    i32* %92 = getelementptr &([100 * i32]* %6)[i64 0][i32 %85];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &([100 * i32]* %5)[i64 0][i32 %86];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %94)[i64 1];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %94)[i64 2];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %94)[i64 3];
    store i32* %103 with i32 %102;
    i32 %104 = add i32 %86, i32 4;
    ubr ^super.header3;
  ^while.body6:
    i32* %105 = getelementptr &([100 * i32]* %5)[i64 0][i32 %89];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &([100 * i32]* %6)[i64 0][i32 %89];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %105)[i64 1];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %107)[i64 1];
    store i32* %110 with i32 %109;
    i32* %111 = getelementptr &(i32* %105)[i64 2];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &(i32* %107)[i64 2];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %105)[i64 3];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %107)[i64 3];
    store i32* %116 with i32 %115;
    ubr ^super.header4;
  ^while.body7:
    i32 %117 = phi [^super.header3, i32 %85] [^while.body7, i32 %122];
    i32 %118 = phi [^super.header3, i32 %86] [^while.body7, i32 %124];
    i32* %119 = getelementptr &([100 * i32]* %6)[i64 0][i32 %117];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &([100 * i32]* %5)[i64 0][i32 %118];
    store i32* %121 with i32 %120;
    i32 %122 = add i32 %117, i32 1;
    i1 %123 = icmp sgt i32 %r, i32 %122;
    i32 %124 = add i32 %118, i32 1;
    cbr i1 %123(prob = 0.97), ^while.body7, ^while.header3;
  ^super.header5:
    i32 %125 = phi [^super.header4, i32 %89] [^while.body8, i32 %126];
    i32 %126 = add i32 %125, i32 4;
    i1 %127 = icmp sgt i32 %r, i32 %126;
    cbr i1 %127(prob = 0.89), ^while.body8, ^while.body9;
  ^while.body8:
    i32* %128 = getelementptr &([100 * i32]* %5)[i64 0][i32 %125];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &([100 * i32]* %6)[i64 0][i32 %125];
    store i32* %130 with i32 %129;
    i32* %131 = getelementptr &(i32* %128)[i64 1];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %130)[i64 1];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %128)[i64 2];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %130)[i64 2];
    store i32* %136 with i32 %135;
    i32* %137 = getelementptr &(i32* %128)[i64 3];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %130)[i64 3];
    store i32* %139 with i32 %138;
    ubr ^super.header5;
  ^while.body9:
    i32 %140 = phi [^super.header5, i32 %125] [^while.body9, i32 %144];
    i32* %141 = getelementptr &([100 * i32]* %5)[i64 0][i32 %140];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &([100 * i32]* %6)[i64 0][i32 %140];
    store i32* %143 with i32 %142;
    i32 %144 = add i32 %140, i32 1;
    i1 %145 = icmp sgt i32 %r, i32 %144;
    cbr i1 %145(prob = 0.97), ^while.body9, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
