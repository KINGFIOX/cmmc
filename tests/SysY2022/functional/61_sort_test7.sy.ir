internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf, align 8;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i1 %5 = icmp slt i32 %l, i32 %3;
    i32 %6 = add i32 %3, i32 -3;
    [2 * [100 * i32]]* %7 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %8 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 1];
    [100 * i32]* %9 = getelementptr &([2 * [100 * i32]]* %7)[i64 0][i64 0];
    i32 %10 = add i32 %l, i32 3;
    i32 %11 = add i32 %l, i32 15;
    i32 %12 = add i32 %r, i32 -18;
    i32 %13 = add i32 %r, i32 -3;
    cbr i1 %4(prob = 0.5), ^if.then1, ^b1;
  ^if.then:
    ret;
  ^if.then1:
    i32 %14 = add i32 %3, i32 1;
    i1 %15 = icmp sle i32 %r, i32 %14;
    i1 %16 = icmp sgt i32 %r, i32 %3;
    cbr i1 %15(prob = 0.5), ^if.then2, ^b2;
  ^b1:
    i32 %17 = add i32 %l, i32 %3;
    i32 %18 = sdiv i32 %17, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %18);
    call (i32, i32) -> void @merge_sort(i32 %18, i32 %3);
    i1 %19 = icmp sgt i32 %3, i32 %18;
    i1 %20 = icmp slt i32 %l, i32 %18;
    i1 %21 = and i1 %19, i1 %20;
    i32 %22 = add i32 %18, i32 -3;
    i32 %23 = add i32 %3, i32 -18;
    cbr i1 %21(prob = 0.984615), ^while.body, ^while.header;
  ^if.then2:
    i1 %24 = and i1 %5, i1 %16;
    cbr i1 %24(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body:
    i32 %25 = phi [^b1, i32 %l] [^b3, i32 %81];
    i32 %26 = phi [^b1, i32 %18] [^b3, i32 %80];
    i32 %27 = phi [^b1, i32 %l] [^b3, i32 %85];
    i32* %28 = getelementptr &([100 * i32]* %9)[i64 0][i32 %25];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &([100 * i32]* %9)[i64 0][i32 %26];
    i32 %31 = load i32* %30;
    i1 %32 = icmp slt i32 %29, i32 %31;
    i32* %33 = getelementptr &([100 * i32]* %8)[i64 0][i32 %27];
    cbr i1 %32(prob = 0.5), ^if.then3, ^if.else;
  ^b2:
    i32 %34 = add i32 %r, i32 %3;
    i32 %35 = sdiv i32 %34, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %35);
    call (i32, i32) -> void @merge_sort(i32 %35, i32 %r);
    i1 %36 = icmp slt i32 %3, i32 %35;
    i1 %37 = icmp sgt i32 %r, i32 %35;
    i1 %38 = and i1 %36, i1 %37;
    i32 %39 = add i32 %35, i32 -3;
    cbr i1 %38(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.header:
    i1 %40 = phi [^b1, i1 %20] [^b3, i1 %82];
    i32 %41 = phi [^b1, i32 %l] [^b3, i32 %81];
    i32 %42 = phi [^b1, i32 %18] [^b3, i32 %80];
    i32 %43 = phi [^b1, i32 %l] [^b3, i32 %85];
    cbr i1 %40(prob = 0.984615), ^super.header, ^while.header3;
  ^if.then3:
    store i32* %33 with i32 %29;
    i32 %44 = add i32 %25, i32 1;
    ubr ^b3;
  ^if.else:
    store i32* %33 with i32 %31;
    i32 %45 = add i32 %26, i32 1;
    ubr ^b3;
  ^while.body1:
    i32 %46 = phi [^if.then2, i32 %l] [^b4, i32 %118];
    i32 %47 = phi [^if.then2, i32 %3] [^b4, i32 %117];
    i32 %48 = phi [^if.then2, i32 %l] [^b4, i32 %122];
    i32* %49 = getelementptr &([100 * i32]* %9)[i64 0][i32 %46];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([100 * i32]* %9)[i64 0][i32 %47];
    i32 %52 = load i32* %51;
    i1 %53 = icmp slt i32 %50, i32 %52;
    i32* %54 = getelementptr &([100 * i32]* %8)[i64 0][i32 %48];
    cbr i1 %53(prob = 0.5), ^if.then4, ^if.else1;
  ^while.body2:
    i32 %55 = phi [^b2, i32 %3] [^b5, i32 %141];
    i32 %56 = phi [^b2, i32 %35] [^b5, i32 %140];
    i32 %57 = phi [^b2, i32 %3] [^b5, i32 %145];
    i32* %58 = getelementptr &([100 * i32]* %9)[i64 0][i32 %55];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &([100 * i32]* %9)[i64 0][i32 %56];
    i32 %61 = load i32* %60;
    i1 %62 = icmp slt i32 %59, i32 %61;
    i32* %63 = getelementptr &([100 * i32]* %8)[i64 0][i32 %57];
    cbr i1 %62(prob = 0.5), ^if.then5, ^if.else2;
  ^while.header1:
    i1 %64 = phi [^if.then2, i1 %5] [^b4, i1 %119];
    i32 %65 = phi [^if.then2, i32 %l] [^b4, i32 %118];
    i32 %66 = phi [^if.then2, i32 %3] [^b4, i32 %117];
    i32 %67 = phi [^if.then2, i32 %l] [^b4, i32 %122];
    cbr i1 %64(prob = 0.984615), ^super.header1, ^while.header4;
  ^super.header:
    i32 %68 = add i32 %41, i32 3;
    i1 %69 = icmp sgt i32 %18, i32 %68;
    cbr i1 %69(prob = 0.941176), ^while.body3, ^scalar.header;
  ^while.header2:
    i1 %70 = phi [^b2, i1 %36] [^b5, i1 %142];
    i32 %71 = phi [^b2, i32 %3] [^b5, i32 %141];
    i32 %72 = phi [^b2, i32 %35] [^b5, i32 %140];
    i32 %73 = phi [^b2, i32 %3] [^b5, i32 %145];
    cbr i1 %70(prob = 0.984615), ^super.header2, ^while.header5;
  ^while.header3:
    i32 %74 = phi [^while.header, i32 %43] [^scalar.header, i32 %111] [^while.body7, i32 %193];
    i1 %75 = icmp sgt i32 %3, i32 %42;
    cbr i1 %75(prob = 0.984615), ^super.header3, ^while.header6;
  ^if.then4:
    store i32* %54 with i32 %50;
    i32 %76 = add i32 %46, i32 1;
    ubr ^b4;
  ^if.then5:
    store i32* %63 with i32 %59;
    i32 %77 = add i32 %55, i32 1;
    ubr ^b5;
  ^if.else1:
    store i32* %54 with i32 %52;
    i32 %78 = add i32 %47, i32 1;
    ubr ^b4;
  ^if.else2:
    store i32* %63 with i32 %61;
    i32 %79 = add i32 %56, i32 1;
    ubr ^b5;
  ^b3:
    i32 %80 = phi [^if.then3, i32 %26] [^if.else, i32 %45];
    i32 %81 = phi [^if.then3, i32 %44] [^if.else, i32 %25];
    i1 %82 = icmp sgt i32 %18, i32 %81;
    i1 %83 = icmp sgt i32 %3, i32 %80;
    i1 %84 = and i1 %82, i1 %83;
    i32 %85 = add i32 %27, i32 1;
    cbr i1 %84(prob = 0.984615), ^while.body, ^while.header;
  ^super.header1:
    i32 %86 = add i32 %65, i32 3;
    i1 %87 = icmp sgt i32 %3, i32 %86;
    cbr i1 %87(prob = 0.941176), ^while.body4, ^scalar.header1;
  ^while.body3:
    i32 %88 = phi [^super.header, i32 %43] [^while.body3, i32 %104];
    i32 %89 = phi [^super.header, i32 %41] [^while.body3, i32 %102];
    i32* %90 = getelementptr &([100 * i32]* %9)[i64 0][i32 %89];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &([100 * i32]* %8)[i64 0][i32 %88];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &(i32* %90)[i64 1];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %92)[i64 1];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &(i32* %90)[i64 2];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %92)[i64 2];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %90)[i64 3];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %92)[i64 3];
    store i32* %101 with i32 %100;
    i32 %102 = add i32 %89, i32 4;
    i1 %103 = icmp sgt i32 %22, i32 %102;
    i32 %104 = add i32 %88, i32 4;
    cbr i1 %103(prob = 0.941176), ^while.body3, ^scalar.header;
  ^super.header2:
    i32 %105 = add i32 %71, i32 3;
    i1 %106 = icmp sgt i32 %35, i32 %105;
    cbr i1 %106(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^while.header4:
    i32 %107 = phi [^while.header1, i32 %67] [^scalar.header1, i32 %165] [^while.body9, i32 %229];
    i1 %108 = icmp sgt i32 %r, i32 %66;
    cbr i1 %108(prob = 0.984615), ^super.header4, ^while.header7;
  ^scalar.header:
    i32 %109 = phi [^super.header, i32 %43] [^while.body3, i32 %104];
    i32 %110 = phi [^super.header, i32 %41] [^while.body3, i32 %102];
    i32 %111 = phi [^super.header, i32 undef] [^while.body3, i32 %104];
    i1 %112 = icmp sgt i32 %18, i32 %110;
    cbr i1 %112(prob = 0.75), ^while.body7, ^while.header3;
  ^super.header3:
    i32 %113 = add i32 %42, i32 3;
    i1 %114 = icmp sgt i32 %3, i32 %113;
    cbr i1 %114(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^while.header5:
    i32 %115 = phi [^while.header2, i32 %73] [^scalar.header2, i32 %196] [^while.body11, i32 %254];
    i1 %116 = icmp sgt i32 %r, i32 %72;
    cbr i1 %116(prob = 0.984615), ^super.header5, ^while.header8;
  ^while.header6:
    cbr i1 %5(prob = 0.984615), ^super.header6, ^if.then1;
  ^b4:
    i32 %117 = phi [^if.then4, i32 %47] [^if.else1, i32 %78];
    i32 %118 = phi [^if.then4, i32 %76] [^if.else1, i32 %46];
    i1 %119 = icmp sgt i32 %3, i32 %118;
    i1 %120 = icmp sgt i32 %r, i32 %117;
    i1 %121 = and i1 %119, i1 %120;
    i32 %122 = add i32 %48, i32 1;
    cbr i1 %121(prob = 0.984615), ^while.body1, ^while.header1;
  ^while.body4:
    i32 %123 = phi [^super.header1, i32 %67] [^while.body4, i32 %139];
    i32 %124 = phi [^super.header1, i32 %65] [^while.body4, i32 %137];
    i32* %125 = getelementptr &([100 * i32]* %9)[i64 0][i32 %124];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &([100 * i32]* %8)[i64 0][i32 %123];
    store i32* %127 with i32 %126;
    i32* %128 = getelementptr &(i32* %125)[i64 1];
    i32 %129 = load i32* %128;
    i32* %130 = getelementptr &(i32* %127)[i64 1];
    store i32* %130 with i32 %129;
    i32* %131 = getelementptr &(i32* %125)[i64 2];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %127)[i64 2];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %125)[i64 3];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &(i32* %127)[i64 3];
    store i32* %136 with i32 %135;
    i32 %137 = add i32 %124, i32 4;
    i1 %138 = icmp sgt i32 %6, i32 %137;
    i32 %139 = add i32 %123, i32 4;
    cbr i1 %138(prob = 0.941176), ^while.body4, ^scalar.header1;
  ^b5:
    i32 %140 = phi [^if.then5, i32 %56] [^if.else2, i32 %79];
    i32 %141 = phi [^if.then5, i32 %77] [^if.else2, i32 %55];
    i1 %142 = icmp sgt i32 %35, i32 %141;
    i1 %143 = icmp sgt i32 %r, i32 %140;
    i1 %144 = and i1 %142, i1 %143;
    i32 %145 = add i32 %57, i32 1;
    cbr i1 %144(prob = 0.984615), ^while.body2, ^while.header2;
  ^while.body5:
    i32 %146 = phi [^super.header2, i32 %73] [^while.body5, i32 %162];
    i32 %147 = phi [^super.header2, i32 %71] [^while.body5, i32 %160];
    i32* %148 = getelementptr &([100 * i32]* %9)[i64 0][i32 %147];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &([100 * i32]* %8)[i64 0][i32 %146];
    store i32* %150 with i32 %149;
    i32* %151 = getelementptr &(i32* %148)[i64 1];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %150)[i64 1];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %148)[i64 2];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %150)[i64 2];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %148)[i64 3];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %150)[i64 3];
    store i32* %159 with i32 %158;
    i32 %160 = add i32 %147, i32 4;
    i1 %161 = icmp sgt i32 %39, i32 %160;
    i32 %162 = add i32 %146, i32 4;
    cbr i1 %161(prob = 0.941176), ^while.body5, ^scalar.header2;
  ^scalar.header1:
    i32 %163 = phi [^super.header1, i32 %67] [^while.body4, i32 %139];
    i32 %164 = phi [^super.header1, i32 %65] [^while.body4, i32 %137];
    i32 %165 = phi [^super.header1, i32 undef] [^while.body4, i32 %139];
    i1 %166 = icmp sgt i32 %3, i32 %164;
    cbr i1 %166(prob = 0.75), ^while.body9, ^while.header4;
  ^super.header4:
    i32 %167 = add i32 %66, i32 3;
    i1 %168 = icmp sgt i32 %r, i32 %167;
    cbr i1 %168(prob = 0.941176), ^while.body8, ^scalar.header4;
  ^while.body6:
    i32 %169 = phi [^super.header3, i32 %74] [^while.body6, i32 %185];
    i32 %170 = phi [^super.header3, i32 %42] [^while.body6, i32 %183];
    i32* %171 = getelementptr &([100 * i32]* %9)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &([100 * i32]* %8)[i64 0][i32 %169];
    store i32* %173 with i32 %172;
    i32* %174 = getelementptr &(i32* %171)[i64 1];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %173)[i64 1];
    store i32* %176 with i32 %175;
    i32* %177 = getelementptr &(i32* %171)[i64 2];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %173)[i64 2];
    store i32* %179 with i32 %178;
    i32* %180 = getelementptr &(i32* %171)[i64 3];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &(i32* %173)[i64 3];
    store i32* %182 with i32 %181;
    i32 %183 = add i32 %170, i32 4;
    i1 %184 = icmp sgt i32 %6, i32 %183;
    i32 %185 = add i32 %169, i32 4;
    cbr i1 %184(prob = 0.941176), ^while.body6, ^scalar.header3;
  ^while.body7 {scalar}:
    i32 %186 = phi [^scalar.header, i32 %110] [^while.body7, i32 %191];
    i32 %187 = phi [^scalar.header, i32 %109] [^while.body7, i32 %193];
    i32* %188 = getelementptr &([100 * i32]* %9)[i64 0][i32 %186];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &([100 * i32]* %8)[i64 0][i32 %187];
    store i32* %190 with i32 %189;
    i32 %191 = add i32 %186, i32 1;
    i1 %192 = icmp sgt i32 %18, i32 %191;
    i32 %193 = add i32 %187, i32 1;
    cbr i1 %192(prob = 0.75), ^while.body7, ^while.header3;
  ^scalar.header2:
    i32 %194 = phi [^super.header2, i32 %73] [^while.body5, i32 %162];
    i32 %195 = phi [^super.header2, i32 %71] [^while.body5, i32 %160];
    i32 %196 = phi [^super.header2, i32 undef] [^while.body5, i32 %162];
    i1 %197 = icmp sgt i32 %35, i32 %195;
    cbr i1 %197(prob = 0.75), ^while.body11, ^while.header5;
  ^super.header5:
    i32 %198 = add i32 %72, i32 3;
    i1 %199 = icmp sgt i32 %r, i32 %198;
    cbr i1 %199(prob = 0.941176), ^while.body10, ^scalar.header5;
  ^while.header7:
    i1 %200 = icmp slt i32 %l, i32 %r;
    cbr i1 %200(prob = 0.984615), ^super.header7, ^if.then;
  ^scalar.header3:
    i32 %201 = phi [^super.header3, i32 %74] [^while.body6, i32 %185];
    i32 %202 = phi [^super.header3, i32 %42] [^while.body6, i32 %183];
    i1 %203 = icmp sgt i32 %3, i32 %202;
    cbr i1 %203(prob = 0.75), ^while.body12, ^while.header6;
  ^super.header6:
    i1 %204 = icmp sgt i32 %3, i32 %10;
    cbr i1 %204(prob = 0.941176), ^super.header8, ^scalar.header6;
  ^while.header8:
    cbr i1 %16(prob = 0.984615), ^super.header9, ^if.then2;
  ^while.body8:
    i32 %205 = phi [^super.header4, i32 %107] [^while.body8, i32 %221];
    i32 %206 = phi [^super.header4, i32 %66] [^while.body8, i32 %219];
    i32* %207 = getelementptr &([100 * i32]* %9)[i64 0][i32 %206];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &([100 * i32]* %8)[i64 0][i32 %205];
    store i32* %209 with i32 %208;
    i32* %210 = getelementptr &(i32* %207)[i64 1];
    i32 %211 = load i32* %210;
    i32* %212 = getelementptr &(i32* %209)[i64 1];
    store i32* %212 with i32 %211;
    i32* %213 = getelementptr &(i32* %207)[i64 2];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &(i32* %209)[i64 2];
    store i32* %215 with i32 %214;
    i32* %216 = getelementptr &(i32* %207)[i64 3];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &(i32* %209)[i64 3];
    store i32* %218 with i32 %217;
    i32 %219 = add i32 %206, i32 4;
    i1 %220 = icmp sgt i32 %13, i32 %219;
    i32 %221 = add i32 %205, i32 4;
    cbr i1 %220(prob = 0.941176), ^while.body8, ^scalar.header4;
  ^while.body9 {scalar}:
    i32 %222 = phi [^scalar.header1, i32 %164] [^while.body9, i32 %227];
    i32 %223 = phi [^scalar.header1, i32 %163] [^while.body9, i32 %229];
    i32* %224 = getelementptr &([100 * i32]* %9)[i64 0][i32 %222];
    i32 %225 = load i32* %224;
    i32* %226 = getelementptr &([100 * i32]* %8)[i64 0][i32 %223];
    store i32* %226 with i32 %225;
    i32 %227 = add i32 %222, i32 1;
    i1 %228 = icmp sgt i32 %3, i32 %227;
    i32 %229 = add i32 %223, i32 1;
    cbr i1 %228(prob = 0.75), ^while.body9, ^while.header4;
  ^while.body10:
    i32 %230 = phi [^super.header5, i32 %115] [^while.body10, i32 %246];
    i32 %231 = phi [^super.header5, i32 %72] [^while.body10, i32 %244];
    i32* %232 = getelementptr &([100 * i32]* %9)[i64 0][i32 %231];
    i32 %233 = load i32* %232;
    i32* %234 = getelementptr &([100 * i32]* %8)[i64 0][i32 %230];
    store i32* %234 with i32 %233;
    i32* %235 = getelementptr &(i32* %232)[i64 1];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &(i32* %234)[i64 1];
    store i32* %237 with i32 %236;
    i32* %238 = getelementptr &(i32* %232)[i64 2];
    i32 %239 = load i32* %238;
    i32* %240 = getelementptr &(i32* %234)[i64 2];
    store i32* %240 with i32 %239;
    i32* %241 = getelementptr &(i32* %232)[i64 3];
    i32 %242 = load i32* %241;
    i32* %243 = getelementptr &(i32* %234)[i64 3];
    store i32* %243 with i32 %242;
    i32 %244 = add i32 %231, i32 4;
    i1 %245 = icmp sgt i32 %13, i32 %244;
    i32 %246 = add i32 %230, i32 4;
    cbr i1 %245(prob = 0.941176), ^while.body10, ^scalar.header5;
  ^while.body11 {scalar}:
    i32 %247 = phi [^scalar.header2, i32 %195] [^while.body11, i32 %252];
    i32 %248 = phi [^scalar.header2, i32 %194] [^while.body11, i32 %254];
    i32* %249 = getelementptr &([100 * i32]* %9)[i64 0][i32 %247];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &([100 * i32]* %8)[i64 0][i32 %248];
    store i32* %251 with i32 %250;
    i32 %252 = add i32 %247, i32 1;
    i1 %253 = icmp sgt i32 %35, i32 %252;
    i32 %254 = add i32 %248, i32 1;
    cbr i1 %253(prob = 0.75), ^while.body11, ^while.header5;
  ^scalar.header4:
    i32 %255 = phi [^super.header4, i32 %107] [^while.body8, i32 %221];
    i32 %256 = phi [^super.header4, i32 %66] [^while.body8, i32 %219];
    i1 %257 = icmp sgt i32 %r, i32 %256;
    cbr i1 %257(prob = 0.75), ^while.body13, ^while.header7;
  ^super.header7:
    i1 %258 = icmp sgt i32 %r, i32 %10;
    cbr i1 %258(prob = 0.941176), ^super.header10, ^scalar.header7;
  ^super.header8:
    i1 %259 = icmp sgt i32 %6, i32 %11;
    cbr i1 %259(prob = 0.941176), ^while.body14, ^scalar.header8;
  ^while.body12 {scalar}:
    i32 %260 = phi [^scalar.header3, i32 %202] [^while.body12, i32 %265];
    i32 %261 = phi [^scalar.header3, i32 %201] [^while.body12, i32 %267];
    i32* %262 = getelementptr &([100 * i32]* %9)[i64 0][i32 %260];
    i32 %263 = load i32* %262;
    i32* %264 = getelementptr &([100 * i32]* %8)[i64 0][i32 %261];
    store i32* %264 with i32 %263;
    i32 %265 = add i32 %260, i32 1;
    i1 %266 = icmp sgt i32 %3, i32 %265;
    i32 %267 = add i32 %261, i32 1;
    cbr i1 %266(prob = 0.75), ^while.body12, ^while.header6;
  ^scalar.header5:
    i32 %268 = phi [^super.header5, i32 %115] [^while.body10, i32 %246];
    i32 %269 = phi [^super.header5, i32 %72] [^while.body10, i32 %244];
    i1 %270 = icmp sgt i32 %r, i32 %269;
    cbr i1 %270(prob = 0.75), ^while.body15, ^while.header8;
  ^super.header9:
    i32 %271 = add i32 %3, i32 3;
    i1 %272 = icmp sgt i32 %r, i32 %271;
    cbr i1 %272(prob = 0.941176), ^super.header11, ^scalar.header9;
  ^scalar.header6:
    i32 %273 = phi [^super.header6, i32 %l] [^scalar.header8, i32 %348] [^while.body20, i32 %482];
    i1 %274 = icmp sgt i32 %3, i32 %273;
    cbr i1 %274(prob = 0.75), ^while.body16, ^if.then1;
  ^super.header10:
    i1 %275 = icmp slt i32 %11, i32 %13;
    cbr i1 %275(prob = 0.941176), ^while.body17, ^scalar.header10;
  ^while.body13 {scalar}:
    i32 %276 = phi [^scalar.header4, i32 %256] [^while.body13, i32 %281];
    i32 %277 = phi [^scalar.header4, i32 %255] [^while.body13, i32 %283];
    i32* %278 = getelementptr &([100 * i32]* %9)[i64 0][i32 %276];
    i32 %279 = load i32* %278;
    i32* %280 = getelementptr &([100 * i32]* %8)[i64 0][i32 %277];
    store i32* %280 with i32 %279;
    i32 %281 = add i32 %276, i32 1;
    i1 %282 = icmp sgt i32 %r, i32 %281;
    i32 %283 = add i32 %277, i32 1;
    cbr i1 %282(prob = 0.75), ^while.body13, ^while.header7;
  ^while.body14:
    i32 %284 = phi [^super.header8, i32 %l] [^while.body14, i32 %333];
    i32* %285 = getelementptr &([100 * i32]* %8)[i64 0][i32 %284];
    i32 %286 = load i32* %285;
    i32* %287 = getelementptr &([100 * i32]* %9)[i64 0][i32 %284];
    store i32* %287 with i32 %286;
    i32* %288 = getelementptr &(i32* %285)[i64 1];
    i32 %289 = load i32* %288;
    i32* %290 = getelementptr &(i32* %287)[i64 1];
    store i32* %290 with i32 %289;
    i32* %291 = getelementptr &(i32* %285)[i64 2];
    i32 %292 = load i32* %291;
    i32* %293 = getelementptr &(i32* %287)[i64 2];
    store i32* %293 with i32 %292;
    i32* %294 = getelementptr &(i32* %285)[i64 3];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %287)[i64 3];
    store i32* %296 with i32 %295;
    i32* %297 = getelementptr &(i32* %285)[i64 4];
    i32 %298 = load i32* %297;
    i32* %299 = getelementptr &(i32* %287)[i64 4];
    store i32* %299 with i32 %298;
    i32* %300 = getelementptr &(i32* %285)[i64 5];
    i32 %301 = load i32* %300;
    i32* %302 = getelementptr &(i32* %287)[i64 5];
    store i32* %302 with i32 %301;
    i32* %303 = getelementptr &(i32* %285)[i64 6];
    i32 %304 = load i32* %303;
    i32* %305 = getelementptr &(i32* %287)[i64 6];
    store i32* %305 with i32 %304;
    i32* %306 = getelementptr &(i32* %285)[i64 7];
    i32 %307 = load i32* %306;
    i32* %308 = getelementptr &(i32* %287)[i64 7];
    store i32* %308 with i32 %307;
    i32* %309 = getelementptr &(i32* %285)[i64 8];
    i32 %310 = load i32* %309;
    i32* %311 = getelementptr &(i32* %287)[i64 8];
    store i32* %311 with i32 %310;
    i32* %312 = getelementptr &(i32* %285)[i64 9];
    i32 %313 = load i32* %312;
    i32* %314 = getelementptr &(i32* %287)[i64 9];
    store i32* %314 with i32 %313;
    i32* %315 = getelementptr &(i32* %285)[i64 10];
    i32 %316 = load i32* %315;
    i32* %317 = getelementptr &(i32* %287)[i64 10];
    store i32* %317 with i32 %316;
    i32* %318 = getelementptr &(i32* %285)[i64 11];
    i32 %319 = load i32* %318;
    i32* %320 = getelementptr &(i32* %287)[i64 11];
    store i32* %320 with i32 %319;
    i32* %321 = getelementptr &(i32* %285)[i64 12];
    i32 %322 = load i32* %321;
    i32* %323 = getelementptr &(i32* %287)[i64 12];
    store i32* %323 with i32 %322;
    i32* %324 = getelementptr &(i32* %285)[i64 13];
    i32 %325 = load i32* %324;
    i32* %326 = getelementptr &(i32* %287)[i64 13];
    store i32* %326 with i32 %325;
    i32* %327 = getelementptr &(i32* %285)[i64 14];
    i32 %328 = load i32* %327;
    i32* %329 = getelementptr &(i32* %287)[i64 14];
    store i32* %329 with i32 %328;
    i32* %330 = getelementptr &(i32* %285)[i64 15];
    i32 %331 = load i32* %330;
    i32* %332 = getelementptr &(i32* %287)[i64 15];
    store i32* %332 with i32 %331;
    i32 %333 = add i32 %284, i32 16;
    i1 %334 = icmp sgt i32 %23, i32 %333;
    cbr i1 %334(prob = 0.941176), ^while.body14, ^scalar.header8;
  ^super.header11:
    i32 %335 = add i32 %3, i32 15;
    i1 %336 = icmp sgt i32 %13, i32 %335;
    cbr i1 %336(prob = 0.941176), ^while.body18, ^scalar.header11;
  ^while.body15 {scalar}:
    i32 %337 = phi [^scalar.header5, i32 %269] [^while.body15, i32 %342];
    i32 %338 = phi [^scalar.header5, i32 %268] [^while.body15, i32 %344];
    i32* %339 = getelementptr &([100 * i32]* %9)[i64 0][i32 %337];
    i32 %340 = load i32* %339;
    i32* %341 = getelementptr &([100 * i32]* %8)[i64 0][i32 %338];
    store i32* %341 with i32 %340;
    i32 %342 = add i32 %337, i32 1;
    i1 %343 = icmp sgt i32 %r, i32 %342;
    i32 %344 = add i32 %338, i32 1;
    cbr i1 %343(prob = 0.75), ^while.body15, ^while.header8;
  ^scalar.header7:
    i32 %345 = phi [^super.header7, i32 %l] [^scalar.header10, i32 %461] [^while.body22, i32 %506];
    i1 %346 = icmp sgt i32 %r, i32 %345;
    cbr i1 %346(prob = 0.75), ^while.body19, ^if.then;
  ^scalar.header8:
    i32 %347 = phi [^super.header8, i32 %l] [^while.body14, i32 %333];
    i32 %348 = phi [^super.header8, i32 undef] [^while.body14, i32 %333];
    i1 %349 = icmp sgt i32 %6, i32 %347;
    cbr i1 %349(prob = 0.75), ^while.body20, ^scalar.header6;
  ^while.body16 {scalar}:
    i32 %350 = phi [^scalar.header6, i32 %273] [^while.body16, i32 %354];
    i32* %351 = getelementptr &([100 * i32]* %8)[i64 0][i32 %350];
    i32 %352 = load i32* %351;
    i32* %353 = getelementptr &([100 * i32]* %9)[i64 0][i32 %350];
    store i32* %353 with i32 %352;
    i32 %354 = add i32 %350, i32 1;
    i1 %355 = icmp sgt i32 %3, i32 %354;
    cbr i1 %355(prob = 0.75), ^while.body16, ^if.then1;
  ^scalar.header9:
    i32 %356 = phi [^super.header9, i32 %3] [^scalar.header11, i32 %485] [^while.body23, i32 %521];
    i1 %357 = icmp sgt i32 %r, i32 %356;
    cbr i1 %357(prob = 0.75), ^while.body21, ^if.then2;
  ^while.body17:
    i32 %358 = phi [^super.header10, i32 %l] [^while.body17, i32 %407];
    i32* %359 = getelementptr &([100 * i32]* %8)[i64 0][i32 %358];
    i32 %360 = load i32* %359;
    i32* %361 = getelementptr &([100 * i32]* %9)[i64 0][i32 %358];
    store i32* %361 with i32 %360;
    i32* %362 = getelementptr &(i32* %359)[i64 1];
    i32 %363 = load i32* %362;
    i32* %364 = getelementptr &(i32* %361)[i64 1];
    store i32* %364 with i32 %363;
    i32* %365 = getelementptr &(i32* %359)[i64 2];
    i32 %366 = load i32* %365;
    i32* %367 = getelementptr &(i32* %361)[i64 2];
    store i32* %367 with i32 %366;
    i32* %368 = getelementptr &(i32* %359)[i64 3];
    i32 %369 = load i32* %368;
    i32* %370 = getelementptr &(i32* %361)[i64 3];
    store i32* %370 with i32 %369;
    i32* %371 = getelementptr &(i32* %359)[i64 4];
    i32 %372 = load i32* %371;
    i32* %373 = getelementptr &(i32* %361)[i64 4];
    store i32* %373 with i32 %372;
    i32* %374 = getelementptr &(i32* %359)[i64 5];
    i32 %375 = load i32* %374;
    i32* %376 = getelementptr &(i32* %361)[i64 5];
    store i32* %376 with i32 %375;
    i32* %377 = getelementptr &(i32* %359)[i64 6];
    i32 %378 = load i32* %377;
    i32* %379 = getelementptr &(i32* %361)[i64 6];
    store i32* %379 with i32 %378;
    i32* %380 = getelementptr &(i32* %359)[i64 7];
    i32 %381 = load i32* %380;
    i32* %382 = getelementptr &(i32* %361)[i64 7];
    store i32* %382 with i32 %381;
    i32* %383 = getelementptr &(i32* %359)[i64 8];
    i32 %384 = load i32* %383;
    i32* %385 = getelementptr &(i32* %361)[i64 8];
    store i32* %385 with i32 %384;
    i32* %386 = getelementptr &(i32* %359)[i64 9];
    i32 %387 = load i32* %386;
    i32* %388 = getelementptr &(i32* %361)[i64 9];
    store i32* %388 with i32 %387;
    i32* %389 = getelementptr &(i32* %359)[i64 10];
    i32 %390 = load i32* %389;
    i32* %391 = getelementptr &(i32* %361)[i64 10];
    store i32* %391 with i32 %390;
    i32* %392 = getelementptr &(i32* %359)[i64 11];
    i32 %393 = load i32* %392;
    i32* %394 = getelementptr &(i32* %361)[i64 11];
    store i32* %394 with i32 %393;
    i32* %395 = getelementptr &(i32* %359)[i64 12];
    i32 %396 = load i32* %395;
    i32* %397 = getelementptr &(i32* %361)[i64 12];
    store i32* %397 with i32 %396;
    i32* %398 = getelementptr &(i32* %359)[i64 13];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %361)[i64 13];
    store i32* %400 with i32 %399;
    i32* %401 = getelementptr &(i32* %359)[i64 14];
    i32 %402 = load i32* %401;
    i32* %403 = getelementptr &(i32* %361)[i64 14];
    store i32* %403 with i32 %402;
    i32* %404 = getelementptr &(i32* %359)[i64 15];
    i32 %405 = load i32* %404;
    i32* %406 = getelementptr &(i32* %361)[i64 15];
    store i32* %406 with i32 %405;
    i32 %407 = add i32 %358, i32 16;
    i1 %408 = icmp sgt i32 %12, i32 %407;
    cbr i1 %408(prob = 0.941176), ^while.body17, ^scalar.header10;
  ^while.body18:
    i32 %409 = phi [^super.header11, i32 %3] [^while.body18, i32 %458];
    i32* %410 = getelementptr &([100 * i32]* %8)[i64 0][i32 %409];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &([100 * i32]* %9)[i64 0][i32 %409];
    store i32* %412 with i32 %411;
    i32* %413 = getelementptr &(i32* %410)[i64 1];
    i32 %414 = load i32* %413;
    i32* %415 = getelementptr &(i32* %412)[i64 1];
    store i32* %415 with i32 %414;
    i32* %416 = getelementptr &(i32* %410)[i64 2];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &(i32* %412)[i64 2];
    store i32* %418 with i32 %417;
    i32* %419 = getelementptr &(i32* %410)[i64 3];
    i32 %420 = load i32* %419;
    i32* %421 = getelementptr &(i32* %412)[i64 3];
    store i32* %421 with i32 %420;
    i32* %422 = getelementptr &(i32* %410)[i64 4];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %412)[i64 4];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %410)[i64 5];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %412)[i64 5];
    store i32* %427 with i32 %426;
    i32* %428 = getelementptr &(i32* %410)[i64 6];
    i32 %429 = load i32* %428;
    i32* %430 = getelementptr &(i32* %412)[i64 6];
    store i32* %430 with i32 %429;
    i32* %431 = getelementptr &(i32* %410)[i64 7];
    i32 %432 = load i32* %431;
    i32* %433 = getelementptr &(i32* %412)[i64 7];
    store i32* %433 with i32 %432;
    i32* %434 = getelementptr &(i32* %410)[i64 8];
    i32 %435 = load i32* %434;
    i32* %436 = getelementptr &(i32* %412)[i64 8];
    store i32* %436 with i32 %435;
    i32* %437 = getelementptr &(i32* %410)[i64 9];
    i32 %438 = load i32* %437;
    i32* %439 = getelementptr &(i32* %412)[i64 9];
    store i32* %439 with i32 %438;
    i32* %440 = getelementptr &(i32* %410)[i64 10];
    i32 %441 = load i32* %440;
    i32* %442 = getelementptr &(i32* %412)[i64 10];
    store i32* %442 with i32 %441;
    i32* %443 = getelementptr &(i32* %410)[i64 11];
    i32 %444 = load i32* %443;
    i32* %445 = getelementptr &(i32* %412)[i64 11];
    store i32* %445 with i32 %444;
    i32* %446 = getelementptr &(i32* %410)[i64 12];
    i32 %447 = load i32* %446;
    i32* %448 = getelementptr &(i32* %412)[i64 12];
    store i32* %448 with i32 %447;
    i32* %449 = getelementptr &(i32* %410)[i64 13];
    i32 %450 = load i32* %449;
    i32* %451 = getelementptr &(i32* %412)[i64 13];
    store i32* %451 with i32 %450;
    i32* %452 = getelementptr &(i32* %410)[i64 14];
    i32 %453 = load i32* %452;
    i32* %454 = getelementptr &(i32* %412)[i64 14];
    store i32* %454 with i32 %453;
    i32* %455 = getelementptr &(i32* %410)[i64 15];
    i32 %456 = load i32* %455;
    i32* %457 = getelementptr &(i32* %412)[i64 15];
    store i32* %457 with i32 %456;
    i32 %458 = add i32 %409, i32 16;
    i1 %459 = icmp sgt i32 %12, i32 %458;
    cbr i1 %459(prob = 0.941176), ^while.body18, ^scalar.header11;
  ^scalar.header10:
    i32 %460 = phi [^super.header10, i32 %l] [^while.body17, i32 %407];
    i32 %461 = phi [^super.header10, i32 undef] [^while.body17, i32 %407];
    i1 %462 = icmp sgt i32 %13, i32 %460;
    cbr i1 %462(prob = 0.75), ^while.body22, ^scalar.header7;
  ^while.body19 {scalar}:
    i32 %463 = phi [^scalar.header7, i32 %345] [^while.body19, i32 %467];
    i32* %464 = getelementptr &([100 * i32]* %8)[i64 0][i32 %463];
    i32 %465 = load i32* %464;
    i32* %466 = getelementptr &([100 * i32]* %9)[i64 0][i32 %463];
    store i32* %466 with i32 %465;
    i32 %467 = add i32 %463, i32 1;
    i1 %468 = icmp sgt i32 %r, i32 %467;
    cbr i1 %468(prob = 0.75), ^while.body19, ^if.then;
  ^while.body20 {scalar}:
    i32 %469 = phi [^scalar.header8, i32 %347] [^while.body20, i32 %482];
    i32* %470 = getelementptr &([100 * i32]* %8)[i64 0][i32 %469];
    i32 %471 = load i32* %470;
    i32* %472 = getelementptr &([100 * i32]* %9)[i64 0][i32 %469];
    store i32* %472 with i32 %471;
    i32* %473 = getelementptr &(i32* %470)[i64 1];
    i32 %474 = load i32* %473;
    i32* %475 = getelementptr &(i32* %472)[i64 1];
    store i32* %475 with i32 %474;
    i32* %476 = getelementptr &(i32* %470)[i64 2];
    i32 %477 = load i32* %476;
    i32* %478 = getelementptr &(i32* %472)[i64 2];
    store i32* %478 with i32 %477;
    i32* %479 = getelementptr &(i32* %470)[i64 3];
    i32 %480 = load i32* %479;
    i32* %481 = getelementptr &(i32* %472)[i64 3];
    store i32* %481 with i32 %480;
    i32 %482 = add i32 %469, i32 4;
    i1 %483 = icmp sgt i32 %6, i32 %482;
    cbr i1 %483(prob = 0.75), ^while.body20, ^scalar.header6;
  ^scalar.header11:
    i32 %484 = phi [^super.header11, i32 %3] [^while.body18, i32 %458];
    i32 %485 = phi [^super.header11, i32 undef] [^while.body18, i32 %458];
    i1 %486 = icmp sgt i32 %13, i32 %484;
    cbr i1 %486(prob = 0.75), ^while.body23, ^scalar.header9;
  ^while.body21 {scalar}:
    i32 %487 = phi [^scalar.header9, i32 %356] [^while.body21, i32 %491];
    i32* %488 = getelementptr &([100 * i32]* %8)[i64 0][i32 %487];
    i32 %489 = load i32* %488;
    i32* %490 = getelementptr &([100 * i32]* %9)[i64 0][i32 %487];
    store i32* %490 with i32 %489;
    i32 %491 = add i32 %487, i32 1;
    i1 %492 = icmp sgt i32 %r, i32 %491;
    cbr i1 %492(prob = 0.75), ^while.body21, ^if.then2;
  ^while.body22 {scalar}:
    i32 %493 = phi [^scalar.header10, i32 %460] [^while.body22, i32 %506];
    i32* %494 = getelementptr &([100 * i32]* %8)[i64 0][i32 %493];
    i32 %495 = load i32* %494;
    i32* %496 = getelementptr &([100 * i32]* %9)[i64 0][i32 %493];
    store i32* %496 with i32 %495;
    i32* %497 = getelementptr &(i32* %494)[i64 1];
    i32 %498 = load i32* %497;
    i32* %499 = getelementptr &(i32* %496)[i64 1];
    store i32* %499 with i32 %498;
    i32* %500 = getelementptr &(i32* %494)[i64 2];
    i32 %501 = load i32* %500;
    i32* %502 = getelementptr &(i32* %496)[i64 2];
    store i32* %502 with i32 %501;
    i32* %503 = getelementptr &(i32* %494)[i64 3];
    i32 %504 = load i32* %503;
    i32* %505 = getelementptr &(i32* %496)[i64 3];
    store i32* %505 with i32 %504;
    i32 %506 = add i32 %493, i32 4;
    i1 %507 = icmp sgt i32 %13, i32 %506;
    cbr i1 %507(prob = 0.75), ^while.body22, ^scalar.header7;
  ^while.body23 {scalar}:
    i32 %508 = phi [^scalar.header11, i32 %484] [^while.body23, i32 %521];
    i32* %509 = getelementptr &([100 * i32]* %8)[i64 0][i32 %508];
    i32 %510 = load i32* %509;
    i32* %511 = getelementptr &([100 * i32]* %9)[i64 0][i32 %508];
    store i32* %511 with i32 %510;
    i32* %512 = getelementptr &(i32* %509)[i64 1];
    i32 %513 = load i32* %512;
    i32* %514 = getelementptr &(i32* %511)[i64 1];
    store i32* %514 with i32 %513;
    i32* %515 = getelementptr &(i32* %509)[i64 2];
    i32 %516 = load i32* %515;
    i32* %517 = getelementptr &(i32* %511)[i64 2];
    store i32* %517 with i32 %516;
    i32* %518 = getelementptr &(i32* %509)[i64 3];
    i32 %519 = load i32* %518;
    i32* %520 = getelementptr &(i32* %511)[i64 3];
    store i32* %520 with i32 %519;
    i32 %521 = add i32 %508, i32 4;
    i1 %522 = icmp sgt i32 %13, i32 %521;
    cbr i1 %522(prob = 0.75), ^while.body23, ^scalar.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
