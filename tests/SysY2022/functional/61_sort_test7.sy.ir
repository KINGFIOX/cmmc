internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    i32 %4 = add i32 %3, i32 -4;
    [2 * [100 * i32]]* %5 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %5)[i64 0][i64 0];
    [100 * i32]* %7 = getelementptr &([2 * [100 * i32]]* %5)[i64 0][i64 1];
    i32 %8 = add i32 %r, i32 -4;
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %9 = phi [^b, i32 %l] [^if.then1, i32 %22] [^if.else, i32 %25];
    i32 %10 = phi [^b, i32 %3] [^if.then1, i32 %10] [^if.else, i32 %24];
    i32 %11 = phi [^b, i32 %l] [^if.then1, i32 %21] [^if.else, i32 %11];
    i1 %12 = icmp sgt i32 %3, i32 %11;
    i1 %13 = icmp sgt i32 %r, i32 %10;
    i1 %14 = and i1 %12, i1 %13;
    cbr i1 %14(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %11];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([100 * i32]* %6)[i64 0][i32 %10];
    i32 %18 = load i32* %17;
    i1 %19 = icmp slt i32 %16, i32 %18;
    cbr i1 %19(prob = 0.5), ^if.then1, ^if.else;
  ^while.header1:
    cbr i1 %12(prob = 0.97), ^super.header, ^28;
  ^if.then1:
    i32* %20 = getelementptr &([100 * i32]* %7)[i64 0][i32 %9];
    store i32* %20 with i32 %16;
    i32 %21 = add i32 %11, i32 1;
    i32 %22 = add i32 %9, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %23 = getelementptr &([100 * i32]* %7)[i64 0][i32 %9];
    store i32* %23 with i32 %18;
    i32 %24 = add i32 %10, i32 1;
    i32 %25 = add i32 %9, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %26 = add i32 %11, i32 4;
    i1 %27 = icmp sgt i32 %3, i32 %26;
    cbr i1 %27(prob = 0.89), ^while.body1, ^while.body2;
  ^28:
    i32 %29 = phi [^while.header1, i32 %9] [^while.body2, i32 %54];
    cbr i1 %13(prob = 0.97), ^super.header1, ^while.header2;
  ^while.body1:
    i32 %30 = phi [^super.header, i32 %9] [^while.body1, i32 %46];
    i32 %31 = phi [^super.header, i32 %11] [^while.body1, i32 %44];
    i32* %32 = getelementptr &([100 * i32]* %6)[i64 0][i32 %31];
    i32 %33 = load i32* %32;
    i32* %34 = getelementptr &([100 * i32]* %7)[i64 0][i32 %30];
    store i32* %34 with i32 %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %34)[i64 1];
    store i32* %37 with i32 %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    i32 %39 = load i32* %38;
    i32* %40 = getelementptr &(i32* %34)[i64 2];
    store i32* %40 with i32 %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %34)[i64 3];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %31, i32 4;
    i1 %45 = icmp sgt i32 %4, i32 %44;
    i32 %46 = add i32 %30, i32 4;
    cbr i1 %45(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %47 = phi [^super.header, i32 %11] [^while.body1, i32 %44] [^while.body2, i32 %52];
    i32 %48 = phi [^super.header, i32 %9] [^while.body1, i32 %46] [^while.body2, i32 %54];
    i32* %49 = getelementptr &([100 * i32]* %6)[i64 0][i32 %47];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &([100 * i32]* %7)[i64 0][i32 %48];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %47, i32 1;
    i1 %53 = icmp sgt i32 %3, i32 %52;
    i32 %54 = add i32 %48, i32 1;
    cbr i1 %53(prob = 0.75), ^while.body2, ^28;
  ^super.header1:
    i32 %55 = add i32 %10, i32 4;
    i1 %56 = icmp sgt i32 %r, i32 %55;
    cbr i1 %56(prob = 0.89), ^while.body3, ^while.body4;
  ^while.header2:
    i1 %57 = icmp slt i32 %l, i32 %r;
    cbr i1 %57(prob = 0.97), ^super.header2, ^if.then;
  ^while.body3:
    i32 %58 = phi [^super.header1, i32 %29] [^while.body3, i32 %74];
    i32 %59 = phi [^super.header1, i32 %10] [^while.body3, i32 %72];
    i32* %60 = getelementptr &([100 * i32]* %6)[i64 0][i32 %59];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &([100 * i32]* %7)[i64 0][i32 %58];
    store i32* %62 with i32 %61;
    i32* %63 = getelementptr &(i32* %60)[i64 1];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %62)[i64 1];
    store i32* %65 with i32 %64;
    i32* %66 = getelementptr &(i32* %60)[i64 2];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %62)[i64 2];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &(i32* %60)[i64 3];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %62)[i64 3];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %59, i32 4;
    i1 %73 = icmp sgt i32 %8, i32 %72;
    i32 %74 = add i32 %58, i32 4;
    cbr i1 %73(prob = 0.89), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %75 = phi [^super.header1, i32 %10] [^while.body3, i32 %72] [^while.body4, i32 %80];
    i32 %76 = phi [^super.header1, i32 %29] [^while.body3, i32 %74] [^while.body4, i32 %82];
    i32* %77 = getelementptr &([100 * i32]* %6)[i64 0][i32 %75];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &([100 * i32]* %7)[i64 0][i32 %76];
    store i32* %79 with i32 %78;
    i32 %80 = add i32 %75, i32 1;
    i1 %81 = icmp sgt i32 %r, i32 %80;
    i32 %82 = add i32 %76, i32 1;
    cbr i1 %81(prob = 0.75), ^while.body4, ^while.header2;
  ^super.header2:
    i32 %83 = add i32 %l, i32 4;
    i1 %84 = icmp sgt i32 %r, i32 %83;
    cbr i1 %84(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body5:
    i32 %85 = phi [^super.header2, i32 %l] [^while.body5, i32 %98];
    i32* %86 = getelementptr &([100 * i32]* %7)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([100 * i32]* %6)[i64 0][i32 %85];
    store i32* %88 with i32 %87;
    i32* %89 = getelementptr &(i32* %86)[i64 1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %88)[i64 1];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %86)[i64 2];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %88)[i64 2];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %86)[i64 3];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %88)[i64 3];
    store i32* %97 with i32 %96;
    i32 %98 = add i32 %85, i32 4;
    i1 %99 = icmp sgt i32 %8, i32 %98;
    cbr i1 %99(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body6:
    i32 %100 = phi [^super.header2, i32 %l] [^while.body5, i32 %98] [^while.body6, i32 %104];
    i32* %101 = getelementptr &([100 * i32]* %7)[i64 0][i32 %100];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([100 * i32]* %6)[i64 0][i32 %100];
    store i32* %103 with i32 %102;
    i32 %104 = add i32 %100, i32 1;
    i1 %105 = icmp sgt i32 %r, i32 %104;
    cbr i1 %105(prob = 0.75), ^while.body6, ^if.then;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
