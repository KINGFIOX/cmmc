internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = icmp sle i32 %r, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^if.then1, i32 %21] [^if.else, i32 %24];
    i32 %8 = phi [^b, i32 %l] [^if.then1, i32 %20] [^if.else, i32 %8];
    i32 %9 = phi [^b, i32 %3] [^if.then1, i32 %9] [^if.else, i32 %23];
    i1 %10 = icmp sgt i32 %3, i32 %8;
    i1 %11 = icmp sgt i32 %r, i32 %9;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %16 = load i32* %15;
    i1 %17 = icmp slt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^indirect:
    cbr i1 %10(prob = 0.97), ^super.header, ^indirect1;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    i32 %19 = load i32* %13;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %8, i32 1;
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header;
  ^if.else:
    i32* %22 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %22 with i32 %16;
    i32 %23 = add i32 %9, i32 1;
    i32 %24 = add i32 %7, i32 1;
    ubr ^while.header;
  ^super.header:
    i32 %25 = phi [^indirect, i32 %7] [^while.body1, i32 %42];
    i32 %26 = phi [^indirect, i32 %8] [^while.body1, i32 %27];
    i32 %27 = add i32 %26, i32 4;
    i1 %28 = icmp sgt i32 %3, i32 %27;
    cbr i1 %28(prob = 0.89), ^while.body1, ^super.header1;
  ^indirect1:
    i32 %29 = phi [^indirect, i32 %7] [^while.body5, i32 %90];
    cbr i1 %11(prob = 0.97), ^super.header2, ^while.header1;
  ^while.body1:
    i32* %30 = getelementptr &([100 * i32]* %6)[i64 0][i32 %26];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &([100 * i32]* %5)[i64 0][i32 %25];
    store i32* %32 with i32 %31;
    i32* %33 = getelementptr &(i32* %30)[i64 1];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %32)[i64 1];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %30)[i64 2];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %32)[i64 2];
    store i32* %38 with i32 %37;
    i32* %39 = getelementptr &(i32* %30)[i64 3];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %32)[i64 3];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %25, i32 4;
    ubr ^super.header;
  ^super.header1:
    i32 %43 = phi [^super.header, i32 %25] [^while.body2, i32 %65];
    i32 %44 = phi [^super.header, i32 %26] [^while.body2, i32 %45];
    i32 %45 = add i32 %44, i32 4;
    i1 %46 = icmp sgt i32 %3, i32 %45;
    cbr i1 %46(prob = 0.89), ^while.body2, ^while.body5;
  ^super.header2:
    i32 %47 = phi [^indirect1, i32 %29] [^while.body3, i32 %78];
    i32 %48 = phi [^indirect1, i32 %9] [^while.body3, i32 %49];
    i32 %49 = add i32 %48, i32 4;
    i1 %50 = icmp sgt i32 %r, i32 %49;
    cbr i1 %50(prob = 0.89), ^while.body3, ^super.header3;
  ^while.header1:
    i32 %51 = phi [^indirect1, i32 %l] [^while.body4, i32 %82] [^while.body7, i32 %l];
    i1 %52 = icmp sgt i32 %r, i32 %51;
    cbr i1 %52(prob = 0.97), ^while.body4, ^if.then;
  ^while.body2:
    i32* %53 = getelementptr &([100 * i32]* %6)[i64 0][i32 %44];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &([100 * i32]* %5)[i64 0][i32 %43];
    store i32* %55 with i32 %54;
    i32* %56 = getelementptr &(i32* %53)[i64 1];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %55)[i64 1];
    store i32* %58 with i32 %57;
    i32* %59 = getelementptr &(i32* %53)[i64 2];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %55)[i64 2];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %53)[i64 3];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %55)[i64 3];
    store i32* %64 with i32 %63;
    i32 %65 = add i32 %43, i32 4;
    ubr ^super.header1;
  ^while.body3:
    i32* %66 = getelementptr &([100 * i32]* %6)[i64 0][i32 %48];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([100 * i32]* %5)[i64 0][i32 %47];
    store i32* %68 with i32 %67;
    i32* %69 = getelementptr &(i32* %66)[i64 1];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %68)[i64 1];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %66)[i64 2];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %68)[i64 2];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %66)[i64 3];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %68)[i64 3];
    store i32* %77 with i32 %76;
    i32 %78 = add i32 %47, i32 4;
    ubr ^super.header2;
  ^while.body4:
    i32* %79 = getelementptr &([100 * i32]* %5)[i64 0][i32 %51];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([100 * i32]* %6)[i64 0][i32 %51];
    store i32* %81 with i32 %80;
    i32 %82 = add i32 %51, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %83 = phi [^super.header1, i32 %43] [^while.body5, i32 %90];
    i32 %84 = phi [^super.header1, i32 %44] [^while.body5, i32 %88];
    i32* %85 = getelementptr &([100 * i32]* %6)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([100 * i32]* %5)[i64 0][i32 %83];
    store i32* %87 with i32 %86;
    i32 %88 = add i32 %84, i32 1;
    i1 %89 = icmp sgt i32 %3, i32 %88;
    i32 %90 = add i32 %83, i32 1;
    cbr i1 %89(prob = 0.97), ^while.body5, ^indirect1;
  ^super.header3:
    i32 %91 = phi [^super.header2, i32 %47] [^while.body6, i32 %107];
    i32 %92 = phi [^super.header2, i32 %48] [^while.body6, i32 %93];
    i32 %93 = add i32 %92, i32 4;
    i1 %94 = icmp sgt i32 %r, i32 %93;
    cbr i1 %94(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %95 = getelementptr &([100 * i32]* %6)[i64 0][i32 %92];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &([100 * i32]* %5)[i64 0][i32 %91];
    store i32* %97 with i32 %96;
    i32* %98 = getelementptr &(i32* %95)[i64 1];
    i32 %99 = load i32* %98;
    i32* %100 = getelementptr &(i32* %97)[i64 1];
    store i32* %100 with i32 %99;
    i32* %101 = getelementptr &(i32* %95)[i64 2];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %97)[i64 2];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %95)[i64 3];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %97)[i64 3];
    store i32* %106 with i32 %105;
    i32 %107 = add i32 %91, i32 4;
    ubr ^super.header3;
  ^while.body7:
    i32 %108 = phi [^super.header3, i32 %91] [^while.body7, i32 %115];
    i32 %109 = phi [^super.header3, i32 %92] [^while.body7, i32 %113];
    i32* %110 = getelementptr &([100 * i32]* %6)[i64 0][i32 %109];
    i32 %111 = load i32* %110;
    i32* %112 = getelementptr &([100 * i32]* %5)[i64 0][i32 %108];
    store i32* %112 with i32 %111;
    i32 %113 = add i32 %109, i32 1;
    i1 %114 = icmp sgt i32 %r, i32 %113;
    i32 %115 = add i32 %108, i32 1;
    cbr i1 %114(prob = 0.97), ^while.body7, ^while.header1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
