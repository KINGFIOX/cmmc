internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal [2 * [100 * i32]]* @buf;
internal func @merge_sort(i32 %l, i32 %r) -> void {
  ^entry:
    i32 %0 = add i32 %l, i32 1;
    i1 %1 = scmp ge i32 %0, i32 %r;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^b:
    i32 %2 = add i32 %l, i32 %r;
    i32 %3 = sdiv i32 %2, i32 2;
    call (i32, i32) -> void @merge_sort(i32 %l, i32 %3);
    call (i32, i32) -> void @merge_sort(i32 %3, i32 %r);
    [2 * [100 * i32]]* %4 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    [100 * i32]* %5 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 1];
    [100 * i32]* %6 = getelementptr &([2 * [100 * i32]]* %4)[i64 0][i64 0];
    ubr ^while.header;
  ^if.then:
    ret;
  ^while.header:
    i32 %7 = phi [^b, i32 %l] [^b1, i32 %30];
    i32 %8 = phi [^b, i32 %l] [^b1, i32 %28];
    i32 %9 = phi [^b, i32 %3] [^b1, i32 %29];
    i1 %10 = scmp lt i32 %8, i32 %3;
    i1 %11 = scmp lt i32 %9, i32 %r;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
  ^while.body:
    i32* %13 = getelementptr &([100 * i32]* %6)[i64 0][i32 %8];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([100 * i32]* %6)[i64 0][i32 %9];
    i32 %16 = load i32* %15;
    i1 %17 = scmp lt i32 %14, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else;
  ^indirect:
    cbr i1 %10(prob = 0.97), ^super.header, ^indirect1;
  ^if.then1:
    i32* %18 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    i32 %19 = load i32* %13;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %8, i32 1;
    ubr ^b1;
  ^if.else:
    i32* %21 = getelementptr &([100 * i32]* %5)[i64 0][i32 %7];
    store i32* %21 with i32 %16;
    i32 %22 = add i32 %9, i32 1;
    ubr ^b1;
  ^super.header:
    i32 %23 = phi [^indirect, i32 %7] [^while.body1, i32 %43];
    i32 %24 = phi [^indirect, i32 %8] [^while.body1, i32 %25];
    i32 %25 = add i32 %24, i32 4;
    i1 %26 = scmp lt i32 %25, i32 %3;
    cbr i1 %26(prob = 0.89), ^while.body1, ^super.header1;
  ^indirect1:
    i32 %27 = phi [^indirect, i32 %7] [^while.body5, i32 %91];
    cbr i1 %11(prob = 0.97), ^super.header2, ^while.header1;
  ^b1:
    i32 %28 = phi [^if.then1, i32 %20] [^if.else, i32 %8];
    i32 %29 = phi [^if.then1, i32 %9] [^if.else, i32 %22];
    i32 %30 = add i32 %7, i32 1;
    ubr ^while.header;
  ^while.body1:
    i32* %31 = getelementptr &([100 * i32]* %6)[i64 0][i32 %24];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([100 * i32]* %5)[i64 0][i32 %23];
    store i32* %33 with i32 %32;
    i32* %34 = getelementptr &(i32* %31)[i64 1];
    i32 %35 = load i32* %34;
    i32* %36 = getelementptr &(i32* %33)[i64 1];
    store i32* %36 with i32 %35;
    i32* %37 = getelementptr &(i32* %31)[i64 2];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &(i32* %33)[i64 2];
    store i32* %39 with i32 %38;
    i32* %40 = getelementptr &(i32* %31)[i64 3];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %33)[i64 3];
    store i32* %42 with i32 %41;
    i32 %43 = add i32 %23, i32 4;
    ubr ^super.header;
  ^super.header1:
    i32 %44 = phi [^super.header, i32 %23] [^while.body2, i32 %66];
    i32 %45 = phi [^super.header, i32 %24] [^while.body2, i32 %46];
    i32 %46 = add i32 %45, i32 4;
    i1 %47 = scmp lt i32 %46, i32 %3;
    cbr i1 %47(prob = 0.89), ^while.body2, ^while.body5;
  ^super.header2:
    i32 %48 = phi [^indirect1, i32 %27] [^while.body3, i32 %79];
    i32 %49 = phi [^indirect1, i32 %9] [^while.body3, i32 %50];
    i32 %50 = add i32 %49, i32 4;
    i1 %51 = scmp lt i32 %50, i32 %r;
    cbr i1 %51(prob = 0.89), ^while.body3, ^super.header3;
  ^while.header1:
    i32 %52 = phi [^indirect1, i32 %l] [^while.body4, i32 %83] [^while.body7, i32 %l];
    i1 %53 = scmp lt i32 %52, i32 %r;
    cbr i1 %53(prob = 0.97), ^while.body4, ^if.then;
  ^while.body2:
    i32* %54 = getelementptr &([100 * i32]* %6)[i64 0][i32 %45];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &([100 * i32]* %5)[i64 0][i32 %44];
    store i32* %56 with i32 %55;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %56)[i64 1];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %54)[i64 2];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %56)[i64 2];
    store i32* %62 with i32 %61;
    i32* %63 = getelementptr &(i32* %54)[i64 3];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %56)[i64 3];
    store i32* %65 with i32 %64;
    i32 %66 = add i32 %44, i32 4;
    ubr ^super.header1;
  ^while.body3:
    i32* %67 = getelementptr &([100 * i32]* %6)[i64 0][i32 %49];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([100 * i32]* %5)[i64 0][i32 %48];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %67)[i64 1];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %69)[i64 1];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %67)[i64 2];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %69)[i64 2];
    store i32* %75 with i32 %74;
    i32* %76 = getelementptr &(i32* %67)[i64 3];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %69)[i64 3];
    store i32* %78 with i32 %77;
    i32 %79 = add i32 %48, i32 4;
    ubr ^super.header2;
  ^while.body4:
    i32* %80 = getelementptr &([100 * i32]* %5)[i64 0][i32 %52];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &([100 * i32]* %6)[i64 0][i32 %52];
    store i32* %82 with i32 %81;
    i32 %83 = add i32 %52, i32 1;
    ubr ^while.header1;
  ^while.body5:
    i32 %84 = phi [^super.header1, i32 %44] [^while.body5, i32 %91];
    i32 %85 = phi [^super.header1, i32 %45] [^while.body5, i32 %89];
    i32* %86 = getelementptr &([100 * i32]* %6)[i64 0][i32 %85];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &([100 * i32]* %5)[i64 0][i32 %84];
    store i32* %88 with i32 %87;
    i32 %89 = add i32 %85, i32 1;
    i1 %90 = scmp lt i32 %89, i32 %3;
    i32 %91 = add i32 %84, i32 1;
    cbr i1 %90(prob = 0.97), ^while.body5, ^indirect1;
  ^super.header3:
    i32 %92 = phi [^super.header2, i32 %48] [^while.body6, i32 %108];
    i32 %93 = phi [^super.header2, i32 %49] [^while.body6, i32 %94];
    i32 %94 = add i32 %93, i32 4;
    i1 %95 = scmp lt i32 %94, i32 %r;
    cbr i1 %95(prob = 0.89), ^while.body6, ^while.body7;
  ^while.body6:
    i32* %96 = getelementptr &([100 * i32]* %6)[i64 0][i32 %93];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &([100 * i32]* %5)[i64 0][i32 %92];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %96)[i64 1];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %98)[i64 1];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %96)[i64 2];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %98)[i64 2];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %96)[i64 3];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %98)[i64 3];
    store i32* %107 with i32 %106;
    i32 %108 = add i32 %92, i32 4;
    ubr ^super.header3;
  ^while.body7:
    i32 %109 = phi [^super.header3, i32 %92] [^while.body7, i32 %116];
    i32 %110 = phi [^super.header3, i32 %93] [^while.body7, i32 %114];
    i32* %111 = getelementptr &([100 * i32]* %6)[i64 0][i32 %110];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([100 * i32]* %5)[i64 0][i32 %109];
    store i32* %113 with i32 %112;
    i32 %114 = add i32 %110, i32 1;
    i1 %115 = scmp lt i32 %114, i32 %r;
    i32 %116 = add i32 %109, i32 1;
    cbr i1 %115(prob = 0.97), ^while.body7, ^while.header1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [2 * [100 * i32]]* %0 = ptrcast [2 * [100 * i32]]* @buf to [2 * [100 * i32]]*;
    i32* %1 = getelementptr &([2 * [100 * i32]]* %0)[i64 0][i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    call (i32, i32) -> void @merge_sort(i32 0, i32 %2);
    call (i32, i32*) -> void @putarray(i32 %2, i32* %1);
    ret i32 0;
}
