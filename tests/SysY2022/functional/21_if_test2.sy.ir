internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @ifElseIf() -> i32 {
^entry:
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 0;
    store i32* %b with i32 10;
    i32 %0 = load i32* %a;
    i1 %1 = scmp eq i32 %0, i32 6;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %4 = load i32* %b;
    i1 %5 = scmp eq i32 %4, i32 11;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b2;
^b2:
    i1 %8 = phi [^b1, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %11 = load i32* %b;
    i1 %12 = scmp eq i32 %11, i32 10;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b3, ^b4;
^if.then:
    i32 %15 = load i32* %a;
    ret i32 %15;
^b3:
    i32 %16 = load i32* %a;
    i1 %17 = scmp eq i32 %16, i32 1;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    ubr ^b4;
^b4:
    i1 %20 = phi [^b3, i1 %19] [^if.else, i1 false];
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    store i32* %a with i32 25;
    ubr ^b5;
^if.else1:
    i32 %23 = load i32* %b;
    i1 %24 = scmp eq i32 %23, i32 10;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b6, ^b7;
^b5:
    ubr ^b8;
^b6:
    i32 %27 = load i32* %a;
    i1 %28 = scmp eq i32 %27, i32 -5;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    ubr ^b7;
^b7:
    i1 %31 = phi [^b6, i1 %30] [^if.else1, i1 false];
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %34 = load i32* %a;
    i32 %35 = add i32 %34, i32 15;
    store i32* %a with i32 %35;
    ubr ^b9;
^if.else2:
    i32 %36 = load i32* %a;
    i32 %37 = neg i32 %36;
    store i32* %a with i32 %37;
    ubr ^b9;
^b8:
    i32 %38 = load i32* %a;
    ret i32 %38;
^b9:
    ubr ^b5;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call () -> i32 @ifElseIf();
    call (i32) -> void @putint(i32 %0);
    ret i32 0;
}
