internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @a = 1;
internal i32* @b = 0;
internal i32* @c = 1;
internal i32* @d = 2;
internal i32* @e = 4;
func @main() -> i32 { Entry } {
^entry:
    i32* %flag = alloc i32;
    store i32* %flag with i32 0;
    i32 %0 = load i32* @a;
    i32 %1 = load i32* @b;
    i32 %2 = mul i32 %0, i32 %1;
    i32 %3 = load i32* @c;
    i32 %4 = sdiv i32 %2, i32 %3;
    i32 %5 = load i32* @e;
    i32 %6 = load i32* @d;
    i32 %7 = add i32 %5, i32 %6;
    i1 %8 = scmp eq i32 %4, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^b, ^b1;
^b:
    i32 %11 = load i32* @a;
    i32 %12 = load i32* @a;
    i32 %13 = load i32* @b;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = mul i32 %11, i32 %14;
    i32 %16 = load i32* @c;
    i32 %17 = add i32 %15, i32 %16;
    i32 %18 = load i32* @d;
    i32 %19 = load i32* @e;
    i32 %20 = add i32 %18, i32 %19;
    i1 %21 = scmp le i32 %17, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    ubr ^b1;
^b1:
    i1 %24 = phi [^b, i1 %23] [^entry, i1 false];
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %27 = load i32* @a;
    i32 %28 = load i32* @b;
    i32 %29 = load i32* @c;
    i32 %30 = mul i32 %28, i32 %29;
    i32 %31 = sub i32 %27, i32 %30;
    i32 %32 = load i32* @d;
    i32 %33 = load i32* @a;
    i32 %34 = load i32* @c;
    i32 %35 = sdiv i32 %33, i32 %34;
    i32 %36 = sub i32 %32, i32 %35;
    i1 %37 = scmp eq i32 %31, i32 %36;
    i32 %38 = zext i1 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    ubr ^b3;
^b3:
    i1 %40 = phi [^b2, i1 %39] [^b1, i1 true];
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.5), ^if.then, ^b4;
^if.then:
    store i32* %flag with i32 1;
    ubr ^b4;
^b4:
    i32 %43 = load i32* %flag;
    call (i32) -> void @putint(i32 %43);
    i32 %44 = load i32* %flag;
    ret i32 %44;
}
