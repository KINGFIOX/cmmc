internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [50 * i32]* @ans;
internal i32* @sum = 0;
internal i32* @n;
internal [50 * i32]* @row;
internal [50 * i32]* @line1;
internal [100 * i32]* @line2;
internal func @printans() -> void {
^entry:
    i32* %i = alloc i32;
    i32 %0 = load i32* @sum;
    i32 %1 = add i32 %0, i32 1;
    store i32* @sum with i32 %1;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i32 %3 = load i32* @n;
    i1 %4 = scmp le i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = load i32* %i;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = getelementptr &([50 * i32]* @ans)[i64 0][i64 %8];
    i32 %10 = load i32* %9;
    call (i32) -> void @putint(i32 %10);
    i32 %11 = load i32* %i;
    i32 %12 = load i32* @n;
    i1 %13 = scmp eq i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
^b:
    ret;
^if.else:
    call (i32) -> void @putch(i32 32);
    ubr ^b1;
^if.then:
    call (i32) -> void @putch(i32 10);
    ret;
^b1:
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    store i32* %i with i32 %17;
    ubr ^while.header;
}
internal func @f(i32 %step) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %step1 = alloc i32;
    store i32* %step1 with i32 %step;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = getelementptr &([50 * i32]* @row)[i64 0][i64 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp neq i32 %8, i32 1;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
^b:
    ret;
^b1:
    i32 %12 = load i32* %step1;
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %12, i32 %13;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = getelementptr &([50 * i32]* @line1)[i64 0][i64 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp eq i32 %17, i32 0;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    ubr ^b2;
^b2:
    i1 %21 = phi [^b1, i1 %20] [^while.body, i1 false];
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b3, ^b4;
^b3:
    i32 %24 = load i32* @n;
    i32 %25 = load i32* %step1;
    i32 %26 = add i32 %24, i32 %25;
    i32 %27 = load i32* %i;
    i32 %28 = sub i32 %26, i32 %27;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([100 * i32]* @line2)[i64 0][i64 %29];
    i32 %31 = load i32* %30;
    i1 %32 = scmp neq i32 %31, i32 0;
    i1 %33 = xor i1 %32, i1 true;
    i32 %34 = zext i1 %33 to i32;
    i1 %35 = scmp neq i32 %34, i32 0;
    ubr ^b4;
^b4:
    i1 %36 = phi [^b3, i1 %35] [^b2, i1 false];
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^if.then, ^b5;
^b5:
    i32 %39 = load i32* %i;
    i32 %40 = add i32 %39, i32 1;
    store i32* %i with i32 %40;
    ubr ^while.header;
^if.then:
    i32 %41 = load i32* %step1;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([50 * i32]* @ans)[i64 0][i64 %42];
    i32 %44 = load i32* %i;
    store i32* %43 with i32 %44;
    i32 %45 = load i32* %step1;
    i32 %46 = load i32* @n;
    i1 %47 = scmp eq i32 %45, i32 %46;
    i32 %48 = zext i1 %47 to i32;
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b6;
^if.then1:
    call () -> void @printans();
    ubr ^b6;
^b6:
    i32 %50 = load i32* %i;
    i64 %51 = sext i32 %50 to i64;
    i32* %52 = getelementptr &([50 * i32]* @row)[i64 0][i64 %51];
    store i32* %52 with i32 1;
    i32 %53 = load i32* %step1;
    i32 %54 = load i32* %i;
    i32 %55 = add i32 %53, i32 %54;
    i64 %56 = sext i32 %55 to i64;
    i32* %57 = getelementptr &([50 * i32]* @line1)[i64 0][i64 %56];
    store i32* %57 with i32 1;
    i32 %58 = load i32* @n;
    i32 %59 = load i32* %step1;
    i32 %60 = add i32 %58, i32 %59;
    i32 %61 = load i32* %i;
    i32 %62 = sub i32 %60, i32 %61;
    i64 %63 = sext i32 %62 to i64;
    i32* %64 = getelementptr &([100 * i32]* @line2)[i64 0][i64 %63];
    store i32* %64 with i32 1;
    i32 %65 = load i32* %step1;
    i32 %66 = add i32 %65, i32 1;
    call (i32) -> void @f(i32 %66);
    i32 %67 = load i32* %i;
    i64 %68 = sext i32 %67 to i64;
    i32* %69 = getelementptr &([50 * i32]* @row)[i64 0][i64 %68];
    store i32* %69 with i32 0;
    i32 %70 = load i32* %step1;
    i32 %71 = load i32* %i;
    i32 %72 = add i32 %70, i32 %71;
    i64 %73 = sext i32 %72 to i64;
    i32* %74 = getelementptr &([50 * i32]* @line1)[i64 0][i64 %73];
    store i32* %74 with i32 0;
    i32 %75 = load i32* @n;
    i32 %76 = load i32* %step1;
    i32 %77 = add i32 %75, i32 %76;
    i32 %78 = load i32* %i;
    i32 %79 = sub i32 %77, i32 %78;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = getelementptr &([100 * i32]* @line2)[i64 0][i64 %80];
    store i32* %81 with i32 0;
    ubr ^b5;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %N = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %N with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %N;
    i1 %2 = scmp gt i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = call () -> i32 @getint();
    store i32* @n with i32 %5;
    call (i32) -> void @f(i32 1);
    i32 %6 = load i32* %N;
    i32 %7 = sub i32 %6, i32 1;
    store i32* %N with i32 %7;
    ubr ^while.header;
^b:
    i32 %8 = load i32* @sum;
    ret i32 %8;
}
