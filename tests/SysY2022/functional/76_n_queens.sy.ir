internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [50 * i32]* @ans, align 8 { Flexible };
internal [50 * i32]* @row, align 8 { Flexible };
internal [50 * i32]* @line1, align 8 { Flexible };
internal [100 * i32]* @line2, align 8 { Flexible };
internal func @f(i32 %step, i32* %0, i32* %1) -> void {
  ^entry:
    i32 %2 = load i32* %1;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.984615), ^succ, ^b;
  ^succ:
    [50 * i32]* %4 = ptrcast [50 * i32]* @ans to [50 * i32]*;
    i32* %5 = getelementptr &([50 * i32]* %4)[i64 0][i32 %step];
    i32 %6 = add i32 %step, i32 1;
    [50 * i32]* %7 = ptrcast [50 * i32]* @row to [50 * i32]*;
    [50 * i32]* %8 = ptrcast [50 * i32]* @line1 to [50 * i32]*;
    [100 * i32]* %9 = ptrcast [100 * i32]* @line2 to [100 * i32]*;
    ubr ^while.body;
  ^b:
    ret;
  ^while.body:
    i32 %10 = phi [^succ, i32 1] [^b3, i32 %26];
    i32* %11 = getelementptr &([50 * i32]* %7)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i1 %13 = icmp neq i32 %12, i32 1;
    cbr i1 %13(prob = 0.5), ^b1, ^indirect;
  ^indirect:
    i32 %14 = load i32* %1;
    ubr ^b3;
  ^b1:
    i32 %15 = add i32 %step, i32 %10;
    i32* %16 = getelementptr &([50 * i32]* %8)[i64 0][i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = icmp eq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^b2, ^indirect;
  ^b2:
    i32 %19 = load i32* %1;
    i32 %20 = add i32 %step, i32 %19;
    i32 %21 = sub i32 %20, i32 %10;
    i32* %22 = getelementptr &([100 * i32]* %9)[i64 0][i32 %21];
    i32 %23 = load i32* %22;
    i1 %24 = icmp eq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^b3;
  ^b3:
    i32 %25 = phi [^indirect, i32 %14] [^b2, i32 %19] [^b4, i32 %36];
    i32 %26 = add i32 %10, i32 1;
    i1 %27 = icmp sge i32 %25, i32 %26;
    cbr i1 %27(prob = 0.984615), ^while.body, ^b;
  ^if.then:
    store i32* %5 with i32 %10;
    i1 %28 = icmp eq i32 %step, i32 %19;
    cbr i1 %28(prob = 0.5), ^if.then1, ^indirect1;
  ^if.then1:
    i32 %29 = load i32* %0;
    i32 %30 = add i32 %29, i32 1;
    store i32* %0 with i32 %30;
    ubr ^while.header;
  ^indirect1:
    i32 %31 = load i32* %1;
    ubr ^b4;
  ^b4:
    i32 %32 = phi [^indirect1, i32 %31] [^while.header, i32 %41];
    i32 %33 = add i32 %step, i32 %32;
    i32 %34 = sub i32 %33, i32 %10;
    i32* %35 = getelementptr &([100 * i32]* %9)[i64 0][i32 %34];
    store i32* %11 with i32 1;
    store i32* %16 with i32 1;
    store i32* %35 with i32 1;
    call (i32, i32*, i32*) -> void @f(i32 %6, i32* %0, i32* %1);
    store i32* %11 with i32 0;
    store i32* %16 with i32 0;
    i32 %36 = load i32* %1;
    i32 %37 = add i32 %step, i32 %36;
    i32 %38 = sub i32 %37, i32 %10;
    i32* %39 = getelementptr &([100 * i32]* %9)[i64 0][i32 %38];
    store i32* %39 with i32 0;
    ubr ^b3;
  ^while.header:
    i32 %40 = phi [^if.then1, i32 1] [^if.else, i32 %46];
    i32 %41 = load i32* %1;
    i1 %42 = icmp sle i32 %40, i32 %41;
    cbr i1 %42(prob = 0.984615), ^while.body1, ^b4;
  ^while.body1:
    i32* %43 = getelementptr &([50 * i32]* %4)[i64 0][i32 %40];
    i32 %44 = load i32* %43;
    call (i32) -> void @putint(i32 %44);
    i1 %45 = icmp eq i32 %40, i32 %41;
    cbr i1 %45(prob = 0.5), ^if.then2, ^if.else;
  ^if.then2:
    call (i32) -> void @putch(i32 10);
    ubr ^indirect1;
  ^if.else:
    call (i32) -> void @putch(i32 32);
    i32 %46 = add i32 %40, i32 1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32* %n = alloc i32, align 4;
    i32* %sum = alloc i32, align 4;
    store i32* %sum with i32 0;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %2 = phi [^entry, i32 %0] [^while.body, i32 %4];
    i32 %3 = call () -> i32 @getint();
    store i32* %n with i32 %3;
    call (i32, i32*, i32*) -> void @f(i32 1, i32* %sum, i32* %n);
    i32 %4 = add i32 %2, i32 -1;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.984615), ^while.body, ^indirect;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^indirect, i32 %7];
    ret i32 %6;
  ^indirect:
    i32 %7 = load i32* %sum;
    ubr ^b;
}
