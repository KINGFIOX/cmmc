internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %a with i32 56;
    store i32* %b with i32 4;
    i32 %0 = load i32* %a;
    i32 %1 = sub i32 %0, i32 -4;
    i32 %2 = load i32* %b;
    i32 %3 = add i32 %1, i32 %2;
    store i32* %a with i32 %3;
    i32 %4 = load i32* %a;
    i1 %5 = scmp neq i32 %4, i32 0;
    i1 %6 = xor i1 %5, i1 true;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    i1 %9 = xor i1 %8, i1 true;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    i1 %12 = xor i1 %11, i1 true;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = neg i32 %13;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %a with i32 -1;
    ubr ^b1;
^if.else:
    i32 %16 = load i32* %b;
    i32 %17 = add i32 0, i32 %16;
    store i32* %a with i32 %17;
    ubr ^b1;
^b1:
    i32 %18 = load i32* %a;
    call (i32) -> void @putint(i32 %18);
    ret i32 0;
}
