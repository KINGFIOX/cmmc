internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^while.body, ^b1;
^b1:
    i1 %3 = scmp gt i32 %1, i32 9;
    cbr i1 %3(prob = 0.5), ^while.body, ^while.body1;
^while.body1:
    i32 %4 = call () -> i32 @getch();
    i32 %5 = add i32 %4, i32 -48;
    i1 %6 = scmp gt i32 %5, i32 -1;
    i1 %7 = scmp lt i32 %5, i32 10;
    i1 %8 = and i1 %6, i1 %7;
    cbr i1 %8(prob = 0.25), ^if.then, ^b2;
^if.then:
    i32 %9 = phi [^while.body1, i32 %5] [^if.then, i32 %14];
    i32 %10 = phi [^while.body1, i32 %1] [^if.then, i32 %12];
    i32 %11 = mul i32 %10, i32 10;
    i32 %12 = add i32 %9, i32 %11;
    i32 %13 = call () -> i32 @getch();
    i32 %14 = add i32 %13, i32 -48;
    i1 %15 = scmp gt i32 %14, i32 -1;
    i1 %16 = scmp lt i32 %14, i32 10;
    i1 %17 = and i1 %15, i1 %16;
    cbr i1 %17(prob = 0.25), ^if.then, ^b2;
^b2:
    i32 %18 = phi [^while.body1, i32 %1] [^if.then, i32 %12];
    i1 %19 = scmp gt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %20 = phi [^b2, i32 %18] [^while.body7, i32 %56];
    ubr ^while.body3;
^b3:
    ret i32 0;
^while.body3:
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %21, i32 -48;
    i1 %23 = scmp lt i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^while.body3, ^b4;
^b4:
    i1 %24 = scmp gt i32 %22, i32 9;
    cbr i1 %24(prob = 0.5), ^while.body3, ^while.body4;
^while.body4:
    i32 %25 = call () -> i32 @getch();
    i32 %26 = add i32 %25, i32 -48;
    i1 %27 = scmp gt i32 %26, i32 -1;
    i1 %28 = scmp lt i32 %26, i32 10;
    i1 %29 = and i1 %27, i1 %28;
    cbr i1 %29(prob = 0.25), ^if.then1, ^b5;
^if.then1:
    i32 %30 = phi [^while.body4, i32 %26] [^if.then1, i32 %35];
    i32 %31 = phi [^while.body4, i32 %22] [^if.then1, i32 %33];
    i32 %32 = mul i32 %31, i32 10;
    i32 %33 = add i32 %30, i32 %32;
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = scmp gt i32 %35, i32 -1;
    i1 %37 = scmp lt i32 %35, i32 10;
    i1 %38 = and i1 %36, i1 %37;
    cbr i1 %38(prob = 0.25), ^if.then1, ^b5;
^b5:
    i32 %39 = phi [^while.body4, i32 %22] [^if.then1, i32 %33];
    i1 %40 = scmp gt i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body5, ^indirect;
^while.body5:
    i32 %41 = phi [^b5, i32 0] [^while.body5, i32 %47];
    i32 %42 = phi [^b5, i32 %39] [^while.body5, i32 %46];
    i32* %43 = getelementptr &([16 * i32]* %b)[i64 0][i32 %41];
    i32 %44 = srem i32 %42, i32 10;
    i32 %45 = add i32 %44, i32 48;
    store i32* %43 with i32 %45;
    i32 %46 = sdiv i32 %42, i32 10;
    i32 %47 = add i32 %41, i32 1;
    i1 %48 = scmp gt i32 %46, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body5, ^indirect;
^indirect:
    i32 %49 = phi [^b5, i32 0] [^while.body5, i32 %47];
    i1 %50 = scmp gt i32 %49, i32 0;
    cbr i1 %50(prob = 0.97), ^while.body6, ^while.body7;
^while.body6:
    i32 %51 = phi [^indirect, i32 %49] [^while.body6, i32 %52];
    i32 %52 = add i32 %51, i32 -1;
    i32* %53 = getelementptr &([16 * i32]* %b)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    call (i32) -> void @putch(i32 %54);
    i1 %55 = scmp gt i32 %52, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body6, ^while.body7;
^while.body7:
    call (i32) -> void @putch(i32 10);
    i32 %56 = add i32 %20, i32 -1;
    i1 %57 = scmp gt i32 %56, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body2, ^b3;
}
