internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %b = alloc [16 * i32], align 8;
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp ugt i32 %1, i32 9;
    cbr i1 %2(prob = 0.5), ^while.body, ^while.header;
  ^while.header:
    i32 %3 = phi [^while.body, i32 %1] [^if.then, i32 %8];
    i32 %4 = call () -> i32 @getch();
    i32 %5 = add i32 %4, i32 -48;
    i1 %6 = icmp ule i32 %5, i32 9;
    cbr i1 %6(prob = 0.5), ^if.then, ^entry1;
  ^if.then:
    i32 %7 = mul i32 %3, i32 10;
    i32 %8 = add i32 %5, i32 %7;
    ubr ^while.header;
  ^entry1:
    i1 %9 = icmp sgt i32 %3, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %10 = phi [^entry1, i32 %3] [^while.body6, i32 %37];
    ubr ^while.body2;
  ^b1:
    ret i32 0;
  ^while.body2:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = icmp ugt i32 %12, i32 9;
    cbr i1 %13(prob = 0.5), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %14 = phi [^while.body2, i32 %12] [^if.then1, i32 %19];
    i32 %15 = call () -> i32 @getch();
    i32 %16 = add i32 %15, i32 -48;
    i1 %17 = icmp ule i32 %16, i32 9;
    cbr i1 %17(prob = 0.5), ^if.then1, ^while.body3;
  ^if.then1:
    i32 %18 = mul i32 %14, i32 10;
    i32 %19 = add i32 %16, i32 %18;
    ubr ^while.header1;
  ^while.body3:
    i1 %20 = icmp sgt i32 %14, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body4, ^29;
  ^while.body4:
    i32 %21 = phi [^while.body3, i32 %14] [^while.body4, i32 %26];
    i32 %22 = phi [^while.body3, i32 0] [^while.body4, i32 %28];
    i32* %23 = getelementptr &([16 * i32]* %b)[i64 0][i32 %22];
    i32 %24 = srem i32 %21, i32 10;
    i32 %25 = add i32 %24, i32 48;
    store i32* %23 with i32 %25;
    i32 %26 = sdiv i32 %21, i32 10;
    i1 %27 = icmp sgt i32 %26, i32 0;
    i32 %28 = add i32 %22, i32 1;
    cbr i1 %27(prob = 0.97), ^while.body4, ^29;
  ^29:
    i32 %30 = phi [^while.body3, i32 0] [^while.body4, i32 %28];
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body5, ^while.body6;
  ^while.body5:
    i32 %32 = phi [^29, i32 %30] [^while.body5, i32 %33];
    i32 %33 = add i32 %32, i32 -1;
    i32* %34 = getelementptr &([16 * i32]* %b)[i64 0][i32 %33];
    i32 %35 = load i32* %34;
    call (i32) -> void @putch(i32 %35);
    i1 %36 = icmp sgt i32 %33, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body5, ^while.body6;
  ^while.body6:
    call (i32) -> void @putch(i32 10);
    i32 %37 = add i32 %10, i32 -1;
    i1 %38 = icmp sgt i32 %37, i32 0;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b1;
}
