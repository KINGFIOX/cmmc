internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^while.body, ^b1;
^b1:
    i1 %3 = scmp gt i32 %1, i32 9;
    cbr i1 %3(prob = 0.5), ^while.body, ^while.body1;
^while.body1:
    i32 %4 = phi [^b1, i32 %1] [^if.then, i32 %11];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = scmp gt i32 %6, i32 -1;
    i1 %8 = scmp lt i32 %6, i32 10;
    i1 %9 = and i1 %7, i1 %8;
    cbr i1 %9(prob = 0.25), ^if.then, ^entry1;
^if.then:
    i32 %10 = mul i32 %4, i32 10;
    i32 %11 = add i32 %10, i32 %6;
    ubr ^while.body1;
^entry1:
    i1 %12 = scmp gt i32 %4, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %13 = phi [^while.body8, i32 %42] [^entry1, i32 %4];
    ubr ^while.body3;
^b2:
    ret i32 0;
^while.body3:
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = scmp lt i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^while.body3, ^b3;
^b3:
    i1 %17 = scmp gt i32 %15, i32 9;
    cbr i1 %17(prob = 0.5), ^while.body3, ^while.body4;
^while.body4:
    i32 %18 = phi [^b3, i32 %15] [^if.then1, i32 %25];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = scmp gt i32 %20, i32 -1;
    i1 %22 = scmp lt i32 %20, i32 10;
    i1 %23 = and i1 %21, i1 %22;
    cbr i1 %23(prob = 0.25), ^if.then1, ^while.body5;
^if.then1:
    i32 %24 = mul i32 %18, i32 10;
    i32 %25 = add i32 %24, i32 %20;
    ubr ^while.body4;
^while.body5:
    i1 %26 = scmp gt i32 %18, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body6, ^while.guard;
^while.body6:
    i32 %27 = phi [^while.body5, i32 %18] [^while.body6, i32 %32];
    i32 %28 = phi [^while.body5, i32 0] [^while.body6, i32 %33];
    i32* %29 = getelementptr &([16 * i32]* %b)[i64 0][i32 %28];
    i32 %30 = srem i32 %27, i32 10;
    i32 %31 = add i32 %30, i32 48;
    store i32* %29 with i32 %31;
    i32 %32 = sdiv i32 %27, i32 10;
    i32 %33 = add i32 %28, i32 1;
    i1 %34 = scmp gt i32 %32, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body6, ^while.guard;
^while.guard:
    i32 %35 = phi [^while.body5, i32 0] [^while.body6, i32 %33];
    i1 %36 = scmp gt i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body7, ^while.body8;
^while.body7:
    i32 %37 = phi [^while.guard, i32 %35] [^while.body7, i32 %38];
    i32 %38 = add i32 %37, i32 -1;
    i32* %39 = getelementptr &([16 * i32]* %b)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    call (i32) -> void @putch(i32 %40);
    i1 %41 = scmp gt i32 %38, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body7, ^while.body8;
^while.body8:
    call (i32) -> void @putch(i32 10);
    i32 %42 = add i32 %13, i32 -1;
    i1 %43 = scmp gt i32 %42, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body2, ^b2;
}
