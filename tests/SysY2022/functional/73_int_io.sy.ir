internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp slt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %1, i32 9;
    i1 %4 = or i1 %2, i1 %3;
    cbr i1 %4(prob = 0.5), ^while.body, ^while.header;
  ^while.header:
    i32 %5 = phi [^while.body, i32 %1] [^if.then, i32 %10];
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = icmp ult i32 %7, i32 10;
    cbr i1 %8(prob = 0.5), ^if.then, ^entry1;
  ^if.then:
    i32 %9 = mul i32 %5, i32 10;
    i32 %10 = add i32 %7, i32 %9;
    ubr ^while.header;
  ^entry1:
    i1 %11 = icmp sgt i32 %5, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %12 = phi [^entry1, i32 %5] [^while.body6, i32 %40];
    ubr ^while.body2;
  ^b1:
    ret i32 0;
  ^while.body2:
    i32 %13 = call () -> i32 @getch();
    i32 %14 = add i32 %13, i32 -48;
    i1 %15 = icmp slt i32 %14, i32 0;
    i1 %16 = icmp sgt i32 %14, i32 9;
    i1 %17 = or i1 %15, i1 %16;
    cbr i1 %17(prob = 0.5), ^while.body2, ^while.header1;
  ^while.header1:
    i32 %18 = phi [^while.body2, i32 %14] [^if.then1, i32 %23];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %19, i32 -48;
    i1 %21 = icmp ult i32 %20, i32 10;
    cbr i1 %21(prob = 0.5), ^if.then1, ^while.body3;
  ^if.then1:
    i32 %22 = mul i32 %18, i32 10;
    i32 %23 = add i32 %20, i32 %22;
    ubr ^while.header1;
  ^while.body3:
    i1 %24 = icmp sgt i32 %18, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body4, ^while.header2;
  ^while.body4:
    i32 %25 = phi [^while.body3, i32 %18] [^while.body4, i32 %30];
    i32 %26 = phi [^while.body3, i32 0] [^while.body4, i32 %32];
    i32* %27 = getelementptr &([16 * i32]* %b)[i64 0][i32 %26];
    i32 %28 = srem i32 %25, i32 10;
    i32 %29 = add i32 %28, i32 48;
    store i32* %27 with i32 %29;
    i32 %30 = sdiv i32 %25, i32 10;
    i1 %31 = icmp sgt i32 %30, i32 0;
    i32 %32 = add i32 %26, i32 1;
    cbr i1 %31(prob = 0.97), ^while.body4, ^while.header2;
  ^while.header2:
    i32 %33 = phi [^while.body3, i32 0] [^while.body4, i32 %32];
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body5, ^while.body6;
  ^while.body5:
    i32 %35 = phi [^while.header2, i32 %33] [^while.body5, i32 %36];
    i32 %36 = add i32 %35, i32 -1;
    i32* %37 = getelementptr &([16 * i32]* %b)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    call (i32) -> void @putch(i32 %38);
    i1 %39 = icmp sgt i32 %36, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body5, ^while.body6;
  ^while.body6:
    call (i32) -> void @putch(i32 10);
    i32 %40 = add i32 %12, i32 -1;
    i1 %41 = icmp sgt i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body1, ^b1;
}
