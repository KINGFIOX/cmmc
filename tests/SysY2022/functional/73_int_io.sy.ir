internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^while.body ], [ ^indirect i32 %1, i32 %1 ];
^while.body():
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^while.body ], [ ^indirect i32 %1, i32 %1 ];
^indirect(i32 %arg, i32 %arg1):
    i1 %0 = scmp gt i32 %arg, i32 9;
    cbr i1 %0(prob = 0.5), [ ^while.body ], [ ^b i32 %arg1 ];
^b(i32 %arg):
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp gt i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^indirect1 i32 %1, i32 %arg, i32 %1 ], [ ^b1 i32 %arg ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0(prob = 0.5), [ ^if.then i32 %arg1, i32 %arg2 ], [ ^b1 i32 %arg1 ];
^b1(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.97), [ ^entry1 i32 %arg ], [ ^b2 ];
^if.then(i32 %arg, i32 %arg1):
    i32 %0 = mul i32 %arg, i32 10;
    i32 %1 = add i32 %0, i32 %arg1;
    i32 %2 = call () -> i32 @getch();
    i32 %3 = add i32 %2, i32 -48;
    i1 %4 = scmp gt i32 %3, i32 -1;
    cbr i1 %4(prob = 0.5), [ ^indirect1 i32 %3, i32 %1, i32 %3 ], [ ^b1 i32 %1 ];
^entry1(i32 %arg):
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), [ ^entry1 i32 %arg ], [ ^indirect2 i32 %1, i32 %arg, i32 %1 ];
^b2():
    ret i32 0;
^indirect2(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp gt i32 %arg, i32 9;
    cbr i1 %0(prob = 0.5), [ ^entry1 i32 %arg1 ], [ ^b3 i32 %arg1, i32 %arg2 ];
^b3(i32 %arg, i32 %arg1):
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp gt i32 %1, i32 -1;
    cbr i1 %2(prob = 0.5), [ ^indirect3 i32 %1, i32 %arg, i32 %arg1, i32 %1 ], [ ^b4 i32 %arg, i32 %arg1 ];
^indirect3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 %arg, i32 10;
    cbr i1 %0(prob = 0.5), [ ^if.then1 i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b4 i32 %arg1, i32 %arg2 ];
^b4(i32 %arg, i32 %arg1):
    [16 * i32]* %b = alloc [16 * i32];
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body1 [16 * i32]* %b, i32 %arg, i32 %arg1, i32 0 ], [ ^indirect4 [16 * i32]* %b, i32 %arg, i32 0 ];
^if.then1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg1, i32 10;
    i32 %1 = add i32 %0, i32 %arg2;
    i32 %2 = call () -> i32 @getch();
    i32 %3 = add i32 %2, i32 -48;
    i1 %4 = scmp gt i32 %3, i32 -1;
    cbr i1 %4(prob = 0.5), [ ^indirect3 i32 %3, i32 %arg, i32 %1, i32 %3 ], [ ^b4 i32 %arg, i32 %1 ];
^while.body1([16 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([16 * i32]* %arg)[i64 0][i32 %arg3];
    i32 %1 = srem i32 %arg2, i32 10;
    i32 %2 = add i32 %1, i32 48;
    store i32* %0 with i32 %2;
    i32 %3 = sdiv i32 %arg2, i32 10;
    i32 %4 = add i32 %arg3, i32 1;
    i1 %5 = scmp gt i32 %3, i32 0;
    cbr i1 %5(prob = 0.97), [ ^while.body1 [16 * i32]* %arg, i32 %arg1, i32 %3, i32 %4 ], [ ^indirect4 [16 * i32]* %arg, i32 %arg1, i32 %4 ];
^indirect4([16 * i32]* %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp gt i32 %arg2, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body2 [16 * i32]* %arg, i32 %arg1, i32 %arg2 ], [ ^b5 i32 %arg1 ];
^while.body2([16 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg2, i32 -1;
    i32* %1 = getelementptr &([16 * i32]* %arg)[i64 0][i32 %0];
    i32 %2 = load i32* %1;
    call (i32) -> void @putch(i32 %2);
    i1 %3 = scmp gt i32 %0, i32 0;
    cbr i1 %3(prob = 0.97), [ ^while.body2 [16 * i32]* %arg, i32 %arg1, i32 %0 ], [ ^b5 i32 %arg1 ];
^b5(i32 %arg):
    call (i32) -> void @putch(i32 10);
    i32 %0 = add i32 %arg, i32 -1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), [ ^entry1 i32 %0 ], [ ^b2 ];
}
