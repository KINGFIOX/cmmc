internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @ascii_0 { ReadOnly } = 48;
internal func @my_getint() -> i32 {
^entry:
    i32* %c = alloc i32;
    i32* %sum = alloc i32;
    store i32* %sum with i32 0;
    store i32* %c with i32 0;
    ubr ^while.header;
^while.header:
    i1 %0 = scmp neq i32 1, i32 0;
    cbr i1 %0(prob = 0.97), ^while.body, ^b;
^b:
    i32 %1 = load i32* %c;
    store i32* %sum with i32 %1;
    ubr ^while.header1;
^while.body:
    i32 %2 = call () -> i32 @getch();
    i32 %3 = sub i32 %2, i32 48;
    store i32* %c with i32 %3;
    i32 %4 = load i32* %c;
    i1 %5 = scmp lt i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b2, ^b1;
^b1:
    i32 %8 = load i32* %c;
    i1 %9 = scmp gt i32 %8, i32 9;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    ubr ^b2;
^b2:
    i1 %12 = phi [^b1, i1 %11] [^while.body, i1 true];
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
^while.header1:
    i1 %15 = scmp neq i32 1, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^b3;
^if.then:
    ubr ^while.header;
^if.else:
    ubr ^b;
^while.body1:
    i32 %16 = call () -> i32 @getch();
    i32 %17 = sub i32 %16, i32 48;
    store i32* %c with i32 %17;
    i32 %18 = load i32* %c;
    i1 %19 = scmp ge i32 %18, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^b4, ^b5;
^b3:
    i32 %22 = load i32* %sum;
    ret i32 %22;
^b4:
    i32 %23 = load i32* %c;
    i1 %24 = scmp le i32 %23, i32 9;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    ubr ^b5;
^b5:
    i1 %27 = phi [^b4, i1 %26] [^while.body1, i1 false];
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %30 = load i32* %sum;
    i32 %31 = mul i32 %30, i32 10;
    i32 %32 = load i32* %c;
    i32 %33 = add i32 %31, i32 %32;
    store i32* %sum with i32 %33;
    ubr ^b6;
^if.else1:
    ubr ^b3;
^b6:
    ubr ^while.header1;
^b7:
    ubr ^while.header;
}
internal func @my_putint(i32 %a) -> void {
^entry:
    i32* %i = alloc i32;
    [16 * i32]* %b = alloc [16 * i32];
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a1;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([16 * i32]* %b)[i64 0][i64 %5];
    i32 %7 = load i32* %a1;
    i32 %8 = srem i32 %7, i32 10;
    i32 %9 = add i32 %8, i32 48;
    store i32* %6 with i32 %9;
    i32 %10 = load i32* %a1;
    i32 %11 = sdiv i32 %10, i32 10;
    store i32* %a1 with i32 %11;
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^b1:
    ubr ^while.header1;
^while.header1:
    i32 %14 = load i32* %i;
    i1 %15 = scmp gt i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %18 = load i32* %i;
    i32 %19 = sub i32 %18, i32 1;
    store i32* %i with i32 %19;
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = getelementptr &([16 * i32]* %b)[i64 0][i64 %21];
    i32 %23 = load i32* %22;
    call (i32) -> void @putch(i32 %23);
    ubr ^while.header1;
^b2:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @my_getint();
    store i32* %n with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %n;
    i1 %2 = scmp gt i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = call () -> i32 @my_getint();
    store i32* %m with i32 %5;
    i32 %6 = load i32* %m;
    call (i32) -> void @my_putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    i32 %7 = load i32* %n;
    i32 %8 = sub i32 %7, i32 1;
    store i32* %n with i32 %8;
    ubr ^while.header;
^b:
    ret i32 0;
}
