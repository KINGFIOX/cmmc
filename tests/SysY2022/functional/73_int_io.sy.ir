internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    i1 %3 = scmp gt i32 %1, i32 9;
    i1 %4 = or i1 %2, i1 %3;
    cbr i1 %4(prob = 0.5), ^while.body, ^while.body1;
  ^while.body1:
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = scmp gt i32 %6, i32 -1;
    i1 %8 = scmp le i32 %6, i32 9;
    i1 %9 = and i1 %7, i1 %8;
    cbr i1 %9(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %10 = phi [^while.body1, i32 %6] [^if.then, i32 %13];
    i32 %11 = phi [^while.body1, i32 %1] [^if.then, i32 %18];
    i32 %12 = call () -> i32 @getch();
    i32 %13 = add i32 %12, i32 -48;
    i1 %14 = scmp gt i32 %13, i32 -1;
    i1 %15 = scmp le i32 %13, i32 9;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = mul i32 %11, i32 10;
    i32 %18 = add i32 %17, i32 %10;
    cbr i1 %16(prob = 0.5), ^if.then, ^b1;
  ^b1:
    i32 %19 = phi [^while.body1, i32 %1] [^if.then, i32 %18];
    i1 %20 = scmp gt i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body2, ^b2;
  ^while.body2:
    i32 %21 = phi [^b1, i32 %19] [^while.body7, i32 %58];
    ubr ^while.body3;
  ^b2:
    ret i32 0;
  ^while.body3:
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = scmp lt i32 %23, i32 0;
    i1 %25 = scmp gt i32 %23, i32 9;
    i1 %26 = or i1 %24, i1 %25;
    cbr i1 %26(prob = 0.5), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %27 = call () -> i32 @getch();
    i32 %28 = add i32 %27, i32 -48;
    i1 %29 = scmp gt i32 %28, i32 -1;
    i1 %30 = scmp le i32 %28, i32 9;
    i1 %31 = and i1 %29, i1 %30;
    cbr i1 %31(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %32 = phi [^while.body4, i32 %28] [^if.then1, i32 %35];
    i32 %33 = phi [^while.body4, i32 %23] [^if.then1, i32 %40];
    i32 %34 = call () -> i32 @getch();
    i32 %35 = add i32 %34, i32 -48;
    i1 %36 = scmp gt i32 %35, i32 -1;
    i1 %37 = scmp le i32 %35, i32 9;
    i1 %38 = and i1 %36, i1 %37;
    i32 %39 = mul i32 %33, i32 10;
    i32 %40 = add i32 %39, i32 %32;
    cbr i1 %38(prob = 0.5), ^if.then1, ^b3;
  ^b3:
    i32 %41 = phi [^while.body4, i32 %23] [^if.then1, i32 %40];
    i1 %42 = scmp gt i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body5, ^indirect;
  ^while.body5:
    i32 %43 = phi [^b3, i32 0] [^while.body5, i32 %50];
    i32 %44 = phi [^b3, i32 %41] [^while.body5, i32 %48];
    i32 %45 = srem i32 %44, i32 10;
    i32 %46 = add i32 %45, i32 48;
    i32* %47 = getelementptr &([16 * i32]* %b)[i64 0][i32 %43];
    store i32* %47 with i32 %46;
    i32 %48 = sdiv i32 %44, i32 10;
    i1 %49 = scmp gt i32 %48, i32 0;
    i32 %50 = add i32 %43, i32 1;
    cbr i1 %49(prob = 0.97), ^while.body5, ^indirect;
  ^indirect:
    i32 %51 = phi [^b3, i32 0] [^while.body5, i32 %50];
    i1 %52 = scmp gt i32 %51, i32 0;
    cbr i1 %52(prob = 0.97), ^while.body6, ^while.body7;
  ^while.body6:
    i32 %53 = phi [^indirect, i32 %51] [^while.body6, i32 %54];
    i32 %54 = add i32 %53, i32 -1;
    i32* %55 = getelementptr &([16 * i32]* %b)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    call (i32) -> void @putch(i32 %56);
    i1 %57 = scmp gt i32 %54, i32 0;
    cbr i1 %57(prob = 0.97), ^while.body6, ^while.body7;
  ^while.body7:
    call (i32) -> void @putch(i32 10);
    i32 %58 = add i32 %21, i32 -1;
    i1 %59 = scmp gt i32 %58, i32 0;
    cbr i1 %59(prob = 0.97), ^while.body2, ^b2;
}
