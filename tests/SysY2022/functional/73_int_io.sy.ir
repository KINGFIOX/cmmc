internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
  ^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = icmp slt i32 %1, i32 0;
    i1 %3 = icmp sgt i32 %1, i32 9;
    i1 %4 = or i1 %2, i1 %3;
    cbr i1 %4(prob = 0.5), ^while.body, ^while.body1;
  ^while.body1:
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = icmp ult i32 %6, i32 10;
    cbr i1 %7(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %8 = phi [^while.body1, i32 %6] [^if.then, i32 %11];
    i32 %9 = phi [^while.body1, i32 %1] [^if.then, i32 %14];
    i32 %10 = call () -> i32 @getch();
    i32 %11 = add i32 %10, i32 -48;
    i1 %12 = icmp ult i32 %11, i32 10;
    i32 %13 = mul i32 %9, i32 10;
    i32 %14 = add i32 %8, i32 %13;
    cbr i1 %12(prob = 0.5), ^if.then, ^b1;
  ^b1:
    i32 %15 = phi [^while.body1, i32 %1] [^if.then, i32 %14];
    i1 %16 = icmp sgt i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body2, ^b2;
  ^while.body2:
    i32 %17 = phi [^b1, i32 %15] [^while.body7, i32 %50];
    ubr ^while.body3;
  ^b2:
    ret i32 0;
  ^while.body3:
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = icmp slt i32 %19, i32 0;
    i1 %21 = icmp sgt i32 %19, i32 9;
    i1 %22 = or i1 %20, i1 %21;
    cbr i1 %22(prob = 0.5), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %23 = call () -> i32 @getch();
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %26 = phi [^while.body4, i32 %24] [^if.then1, i32 %29];
    i32 %27 = phi [^while.body4, i32 %19] [^if.then1, i32 %32];
    i32 %28 = call () -> i32 @getch();
    i32 %29 = add i32 %28, i32 -48;
    i1 %30 = icmp ult i32 %29, i32 10;
    i32 %31 = mul i32 %27, i32 10;
    i32 %32 = add i32 %26, i32 %31;
    cbr i1 %30(prob = 0.5), ^if.then1, ^b3;
  ^b3:
    i32 %33 = phi [^while.body4, i32 %19] [^if.then1, i32 %32];
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body5, ^indirect;
  ^while.body5:
    i32 %35 = phi [^b3, i32 0] [^while.body5, i32 %42];
    i32 %36 = phi [^b3, i32 %33] [^while.body5, i32 %40];
    i32* %37 = getelementptr &([16 * i32]* %b)[i64 0][i32 %35];
    i32 %38 = srem i32 %36, i32 10;
    i32 %39 = add i32 %38, i32 48;
    store i32* %37 with i32 %39;
    i32 %40 = sdiv i32 %36, i32 10;
    i1 %41 = icmp sgt i32 %40, i32 0;
    i32 %42 = add i32 %35, i32 1;
    cbr i1 %41(prob = 0.97), ^while.body5, ^indirect;
  ^indirect:
    i32 %43 = phi [^b3, i32 0] [^while.body5, i32 %42];
    i1 %44 = icmp sgt i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body6, ^while.body7;
  ^while.body6:
    i32 %45 = phi [^indirect, i32 %43] [^while.body6, i32 %46];
    i32 %46 = add i32 %45, i32 -1;
    i32* %47 = getelementptr &([16 * i32]* %b)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    call (i32) -> void @putch(i32 %48);
    i1 %49 = icmp sgt i32 %46, i32 0;
    cbr i1 %49(prob = 0.97), ^while.body6, ^while.body7;
  ^while.body7:
    call (i32) -> void @putch(i32 10);
    i32 %50 = add i32 %17, i32 -1;
    i1 %51 = icmp sgt i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body2, ^b2;
}
