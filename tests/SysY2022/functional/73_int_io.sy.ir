internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^while.body, ^b1;
^b1:
    i1 %3 = scmp gt i32 %1, i32 9;
    cbr i1 %3(prob = 0.5), ^while.body, ^while.body1;
^while.body1:
    i32 %4 = phi [^b1, i32 %1] [^if.then, i32 %11];
    i32 %5 = call () -> i32 @getch();
    i32 %6 = add i32 %5, i32 -48;
    i1 %7 = scmp gt i32 %6, i32 -1;
    i1 %8 = scmp lt i32 %6, i32 10;
    i1 %9 = and i1 %7, i1 %8;
    cbr i1 %9(prob = 0.25), ^if.then, ^entry1;
^if.then:
    i32 %10 = mul i32 %4, i32 10;
    i32 %11 = add i32 %10, i32 %6;
    ubr ^while.body1;
^entry1:
    i1 %12 = scmp gt i32 %4, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %13 = phi [^entry1, i32 %4] [^while.body8, i32 %14];
    i32 %14 = add i32 %13, i32 -1;
    i1 %15 = scmp gt i32 %14, i32 0;
    ubr ^while.body3;
^b2:
    ret i32 0;
^while.body3:
    i32 %16 = call () -> i32 @getch();
    i32 %17 = add i32 %16, i32 -48;
    i1 %18 = scmp lt i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^while.body3, ^b3;
^b3:
    i1 %19 = scmp gt i32 %17, i32 9;
    cbr i1 %19(prob = 0.5), ^while.body3, ^while.body4;
^while.body4:
    i32 %20 = phi [^b3, i32 %17] [^if.then1, i32 %27];
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %21, i32 -48;
    i1 %23 = scmp gt i32 %22, i32 -1;
    i1 %24 = scmp lt i32 %22, i32 10;
    i1 %25 = and i1 %23, i1 %24;
    cbr i1 %25(prob = 0.25), ^if.then1, ^while.body5;
^if.then1:
    i32 %26 = mul i32 %20, i32 10;
    i32 %27 = add i32 %26, i32 %22;
    ubr ^while.body4;
^while.body5:
    i1 %28 = scmp gt i32 %20, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body6, ^while.guard;
^while.body6:
    i32 %29 = phi [^while.body5, i32 %20] [^while.body6, i32 %32];
    i32 %30 = phi [^while.body5, i32 0] [^while.body6, i32 %31];
    i32 %31 = add i32 %30, i32 1;
    i32 %32 = sdiv i32 %29, i32 10;
    i32 %33 = srem i32 %29, i32 10;
    i32 %34 = add i32 %33, i32 48;
    i1 %35 = scmp gt i32 %32, i32 0;
    i32* %36 = getelementptr &([16 * i32]* %b)[i64 0][i32 %30];
    store i32* %36 with i32 %34;
    cbr i1 %35(prob = 0.97), ^while.body6, ^while.guard;
^while.guard:
    i32 %37 = phi [^while.body5, i32 0] [^while.body6, i32 %31];
    i1 %38 = scmp gt i32 %37, i32 0;
    cbr i1 %38(prob = 0.97), ^while.body7, ^while.body8;
^while.body7:
    i32 %39 = phi [^while.guard, i32 %37] [^while.body7, i32 %40];
    i32 %40 = add i32 %39, i32 -1;
    i1 %41 = scmp gt i32 %40, i32 0;
    i32* %42 = getelementptr &([16 * i32]* %b)[i64 0][i32 %40];
    i32 %43 = load i32* %42;
    call (i32) -> void @putch(i32 %43);
    cbr i1 %41(prob = 0.97), ^while.body7, ^while.body8;
^while.body8:
    call (i32) -> void @putch(i32 10);
    cbr i1 %15(prob = 0.97), ^while.body2, ^b2;
}
