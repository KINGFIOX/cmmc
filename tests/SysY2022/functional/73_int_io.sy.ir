internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %b = alloc [16 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = call () -> i32 @getch();
    i32 %1 = add i32 %0, i32 -48;
    i1 %2 = scmp lt i32 %0, i32 48;
    cbr i1 %2(prob = 0.5), ^b2, ^b1;
^b1:
    i1 %3 = scmp gt i32 %0, i32 57;
    ubr ^b2;
^b2:
    i1 %4 = phi [^while.body, i1 true] [^b1, i1 %3];
    cbr i1 %4(prob = 0.5), ^while.body, ^while.body1;
^while.body1:
    i32 %5 = phi [^b2, i32 %1] [^if.then, i32 %12];
    i32 %6 = call () -> i32 @getch();
    i32 %7 = add i32 %6, i32 -48;
    i1 %8 = scmp gt i32 %6, i32 47;
    cbr i1 %8(prob = 0.5), ^b3, ^b4;
^b3:
    i1 %9 = scmp le i32 %6, i32 57;
    ubr ^b4;
^b4:
    i1 %10 = phi [^while.body1, i1 false] [^b3, i1 %9];
    cbr i1 %10(prob = 0.5), ^if.then, ^while.header;
^if.then:
    i32 %11 = mul i32 %5, i32 10;
    i32 %12 = add i32 %7, i32 %11;
    ubr ^while.body1;
^while.header:
    i32 %13 = phi [^b4, i32 %5] [^while.body6, i32 %41];
    i1 %14 = scmp gt i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b5;
^while.body2:
    i32 %15 = call () -> i32 @getch();
    i32 %16 = add i32 %15, i32 -48;
    i1 %17 = scmp lt i32 %15, i32 48;
    cbr i1 %17(prob = 0.5), ^b7, ^b6;
^b5:
    ret i32 0;
^b6:
    i1 %18 = scmp gt i32 %15, i32 57;
    ubr ^b7;
^b7:
    i1 %19 = phi [^b6, i1 %18] [^while.body2, i1 true];
    cbr i1 %19(prob = 0.5), ^while.body2, ^while.body3;
^while.body3:
    i32 %20 = phi [^b7, i32 %16] [^if.then1, i32 %27];
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %21, i32 -48;
    i1 %23 = scmp gt i32 %21, i32 47;
    cbr i1 %23(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %24 = scmp le i32 %21, i32 57;
    ubr ^b9;
^b9:
    i1 %25 = phi [^b8, i1 %24] [^while.body3, i1 false];
    cbr i1 %25(prob = 0.5), ^if.then1, ^while.header1;
^if.then1:
    i32 %26 = mul i32 %20, i32 10;
    i32 %27 = add i32 %26, i32 %22;
    ubr ^while.body3;
^while.header1:
    i32 %28 = phi [^b9, i32 0] [^while.body4, i32 %35];
    i32 %29 = phi [^b9, i32 %20] [^while.body4, i32 %34];
    i1 %30 = scmp gt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body4, ^while.header2;
^while.body4:
    i32* %31 = getelementptr &([16 * i32]* %b)[i64 0][i32 %28];
    i32 %32 = srem i32 %29, i32 10;
    i32 %33 = add i32 %32, i32 48;
    store i32* %31 with i32 %33;
    i32 %34 = sdiv i32 %29, i32 10;
    i32 %35 = add i32 %28, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %36 = phi [^while.header1, i32 %28] [^while.body5, i32 %38];
    i1 %37 = scmp gt i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body5, ^while.body6;
^while.body5:
    i32 %38 = add i32 %36, i32 -1;
    i32* %39 = getelementptr &([16 * i32]* %b)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    call (i32) -> void @putch(i32 %40);
    ubr ^while.header2;
^while.body6:
    call (i32) -> void @putch(i32 10);
    i32 %41 = add i32 %13, i32 -1;
    ubr ^while.header;
}
