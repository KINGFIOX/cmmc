internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i1 %2 = scmp eq i32 %1, i32 10;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
^b:
    i32 %3 = phi [^entry, i32 0] [^b1, i32 %9];
    i32* %4 = getelementptr &(i32* %0)[i32 %3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    i32 %6 = call () -> i32 @getch();
    store i32* %5 with i32 %6;
    i1 %7 = scmp eq i32 %6, i32 10;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
^b1:
    i32 %8 = phi [^entry, i32 0] [^b1, i32 %9];
    i32 %9 = add i32 %8, i32 1;
    i32* %10 = getelementptr &(i32* %0)[i32 %9];
    i32 %11 = call () -> i32 @getch();
    store i32* %10 with i32 %11;
    i1 %12 = scmp eq i32 %11, i32 10;
    cbr i1 %12(prob = 0.5), ^b, ^b1;
^b2:
    i32 %13 = phi [^b, i32 0] [^b3, i32 %17];
    i32* %14 = getelementptr &(i32* %5)[i32 %13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %15 with i32 -1;
    ubr ^while.header;
^b3:
    i32 %16 = phi [^b, i32 0] [^b3, i32 %17];
    i32 %17 = add i32 %16, i32 1;
    i32* %18 = getelementptr &(i32* %5)[i32 %17];
    i32 %19 = call () -> i32 @getch();
    store i32* %18 with i32 %19;
    i1 %20 = scmp eq i32 %19, i32 10;
    cbr i1 %20(prob = 0.5), ^b2, ^b3;
^while.header:
    i32 %21 = phi [^b2, i32 0] [^if.then, i32 %42] [^if.else, i32 %21];
    i32 %22 = phi [^b2, i32 -1] [^if.then, i32 %41] [^if.else, i32 %45];
    i32* %23 = getelementptr &(i32* %0)[i32 %21];
    i32 %24 = load i32* %23;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i1 %26 = scmp eq i32 %22, i32 -1;
    cbr i1 %26(prob = 0.5), ^b5, ^b4;
^while.header1:
    i32 %27 = phi [^while.header, i32 0] [^if.then1, i32 %47] [^if.else1, i32 %27] [^if.then2, i32 %55];
    i32 %28 = phi [^while.header, i32 0] [^if.then1, i32 %46] [^if.else1, i32 %52] [^if.then2, i32 %54];
    i32* %29 = getelementptr &(i32* %5)[i32 %27];
    i32 %30 = load i32* %29;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b6;
^b4:
    i32 %32 = load i32* %23;
    i32* %33 = getelementptr &(i32* %0)[i32 %22];
    i32 %34 = load i32* %33;
    i1 %35 = scmp eq i32 %32, i32 %34;
    ubr ^b5;
^b5:
    i1 %36 = phi [^while.body, i1 true] [^b4, i1 %35];
    cbr i1 %36(prob = 0.5), ^if.then, ^if.else;
^while.body1:
    i32* %37 = getelementptr &(i32* %0)[i32 %28];
    i32 %38 = load i32* %37;
    i1 %39 = scmp eq i32 %38, i32 %30;
    cbr i1 %39(prob = 0.5), ^if.then1, ^if.else1;
^b6:
    i32 %40 = phi [^while.header1, i32 -1] [^if.then1, i32 %47];
    call (i32) -> void @putint(i32 %40);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    i32 %41 = add i32 %22, i32 1;
    i32 %42 = add i32 %21, i32 1;
    i32* %43 = getelementptr &(i32* %15)[i32 %42];
    store i32* %43 with i32 %41;
    ubr ^while.header;
^if.else:
    i32* %44 = getelementptr &(i32* %15)[i32 %22];
    i32 %45 = load i32* %44;
    ubr ^while.header;
^if.then1:
    i32 %46 = add i32 %28, i32 1;
    i32 %47 = add i32 %27, i32 1;
    i32* %48 = getelementptr &(i32* %0)[i32 %46];
    i32 %49 = load i32* %48;
    i1 %50 = scmp eq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^b6, ^while.header1;
^if.else1:
    i32* %51 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %28];
    i32 %52 = load i32* %51;
    i1 %53 = scmp eq i32 %52, i32 -1;
    cbr i1 %53(prob = 0.5), ^if.then2, ^while.header1;
^if.then2:
    i32 %54 = add i32 %52, i32 1;
    i32 %55 = add i32 %27, i32 1;
    ubr ^while.header1;
}
