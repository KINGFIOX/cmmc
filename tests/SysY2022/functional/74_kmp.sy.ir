internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [4096 * i32]* %dst = alloc [4096 * i32];
    [4096 * i32]* %src = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i32 0][i32 0];
    ubr [ ^while.body i32* %0, i32 0, i32* %0, [4096 * i32]* %src, i32* %0, i32 0 ];
^while.body(i32* %arg, i32 %arg1, i32* %arg2, [4096 * i32]* %arg3, i32* %arg4, i32 %arg5):
    i32* %0 = getelementptr &(i32* %arg)[i32 %arg1];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i1 %2 = scmp eq i32 %1, i32 10;
    cbr i1 %2, [ ^b [4096 * i32]* %arg3, i32* %arg2, i32* %arg4, i32 %arg5 ], [ ^b1 [4096 * i32]* %arg3, i32* %arg2, i32* %arg4, i32 %arg5 ];
^b([4096 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg3];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([4096 * i32]* %arg)[i32 0][i32 0];
    ubr [ ^while.body1 i32* %1, i32 0, i32* %1, i32* %arg1, i32* %1, i32 0 ];
^b1([4096 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 1;
    ubr [ ^while.body i32* %arg2, i32 %0, i32* %arg1, [4096 * i32]* %arg, i32* %arg2, i32 %0 ];
^while.body1(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32* %0 = getelementptr &(i32* %arg)[i32 %arg1];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i1 %2 = scmp eq i32 %1, i32 10;
    cbr i1 %2, [ ^b3 i32* %arg3, i32* %arg2, i32* %arg4, i32 %arg5 ], [ ^b2 i32* %arg3, i32* %arg2, i32* %arg4, i32 %arg5 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 1;
    ubr [ ^while.body1 i32* %arg2, i32 %0, i32* %arg1, i32* %arg, i32* %arg2, i32 %0 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg3];
    store i32* %0 with i32 0;
    [4096 * i32]* %next = alloc [4096 * i32];
    i32* %1 = getelementptr &([4096 * i32]* %next)[i32 0][i32 0];
    i32** %str = alloc i32*;
    i32** %next1 = alloc i32*;
    store i32* %1 with i32 -1;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32 %2 = load i32* %arg;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body2 i32** %str, i32** %next1, i32* %i, i32* %j, [4096 * i32]* %next, i32* %arg, i32* %arg1, i32* %arg, i32* %1, i32 0, i32 -1 ], [ ^b4 i32** %str, i32** %next1, i32* %i, i32* %j, [4096 * i32]* %next, i32* %arg, i32* %arg1 ];
^while.body2(i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp eq i32 %arg10, i32 -1;
    cbr i1 %0, [ ^if.then i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10 ], [ ^indirect i32** %arg1, i32* %arg3, i32** %arg, i32* %arg2, i32 %arg10, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10 ];
^b4(i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6):
    free i32* %arg3;
    free i32* %arg2;
    free i32** %arg1;
    free i32** %arg;
    i32 %0 = load i32* %arg6;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect1 [4096 * i32]* %arg4, i32* %arg6, i32* %arg5, i32* %arg6, i32 0, i32 0 ], [ ^entry1 i32 -1 ];
^if.then(i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg10, i32 1;
    i32 %1 = add i32 %arg9, i32 1;
    i32* %2 = getelementptr &(i32* %arg8)[i32 %1];
    store i32* %2 with i32 %0;
    i32* %3 = getelementptr &(i32* %arg7)[i32 %1];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5, [ ^while.body2 i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %1, i32 %0 ], [ ^b4 i32** %arg, i32** %arg1, i32* %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6 ];
^indirect(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, [4096 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32* %0 = getelementptr &(i32* %arg8)[i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg8)[i32 %arg4];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %1, i32 %3;
    cbr i1 %4, [ ^if.then i32** %arg2, i32** %arg, i32* %arg3, i32* %arg1, [4096 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11 ], [ ^if.else i32** %arg2, i32* %arg3, i32** %arg, i32* %arg1, [4096 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11 ];
^indirect1([4096 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg1)[i32 %arg5];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %1, i32 %3;
    cbr i1 %4, [ ^indirect2 [4096 * i32]* %arg, i32* %arg2, i32 %arg5, i32 %arg4, i32* %arg2, i32* %arg3 ], [ ^indirect3 [4096 * i32]* %arg, i32 %arg4, i32* %arg2, i32* %arg3, i32 %arg5 ];
^entry1(i32 %arg):
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^indirect2([4096 * i32]* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = add i32 %arg3, i32 1;
    i32 %1 = add i32 %arg2, i32 1;
    i32* %2 = getelementptr &(i32* %arg1)[i32 %0];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    i1 %5 = xor i1 %4, i1 true;
    cbr i1 %5, [ ^entry1 i32 %1 ], [ ^while.header [4096 * i32]* %arg, i32 %1, i32* %arg4, i32* %arg5, i32 %0, i32 %1 ];
^if.else(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg8)[i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg7)[i32 %arg9];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4, [ ^while.body2 i32** %arg, i32** %arg2, i32* %arg1, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %1 ], [ ^b4 i32** %arg, i32** %arg2, i32* %arg1, i32* %arg3, [4096 * i32]* %arg4, i32* %arg5, i32* %arg6 ];
^indirect3([4096 * i32]* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32* %0 = getelementptr &([4096 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 -1;
    cbr i1 %2, [ ^indirect4 [4096 * i32]* %arg, i32 %1, i32* %arg2, i32* %arg3, i32 %arg4 ], [ ^indirect5 [4096 * i32]* %arg, i32* %arg2, i32* %arg3, i32 %1, i32 %arg4 ];
^while.header([4096 * i32]* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^indirect1 [4096 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ], [ ^entry1 i32 -1 ];
^indirect4([4096 * i32]* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32 %arg4):
    i32 %0 = add i32 %arg1, i32 1;
    i32 %1 = add i32 %arg4, i32 1;
    i32* %2 = getelementptr &(i32* %arg3)[i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4, [ ^indirect1 [4096 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg3, i32 %0, i32 %1 ], [ ^entry1 i32 -1 ];
^indirect5([4096 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32* %0 = getelementptr &(i32* %arg2)[i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^indirect1 [4096 * i32]* %arg, i32* %arg2, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ], [ ^entry1 i32 -1 ];
}
