internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    i32* %i2 = alloc i32;
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    store i32* %i2 with i32 0;
    ubr ^while.body;
^while.body:
    i32* %1 = phi [^b1, i32* %1] [^entry, i32* %0];
    i32 %2 = phi [^entry, i32 0] [^b1, i32 %10];
    i32* %3 = getelementptr &(i32* %1)[i32 %2];
    i32 %4 = call () -> i32 @getch();
    store i32* %3 with i32 %4;
    i32 %5 = load i32* %i2;
    i32* %6 = getelementptr &(i32* %1)[i32 %5];
    i32 %7 = load i32* %6;
    i1 %8 = scmp eq i32 %7, i32 10;
    cbr i1 %8(prob = 0.5), ^b, ^b1;
^b:
    store i32* %6 with i32 0;
    i32* %9 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    store i32* %i1 with i32 0;
    ubr ^while.body1;
^b1:
    i32 %10 = add i32 %5, i32 1;
    store i32* %i2 with i32 %10;
    ubr ^while.body;
^while.body1:
    i32* %11 = phi [^b3, i32* %11] [^b, i32* %9];
    i32 %12 = phi [^b, i32 0] [^b3, i32 %20];
    i32* %13 = getelementptr &(i32* %11)[i32 %12];
    i32 %14 = call () -> i32 @getch();
    store i32* %13 with i32 %14;
    i32 %15 = load i32* %i1;
    i32* %16 = getelementptr &(i32* %11)[i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = scmp eq i32 %17, i32 10;
    cbr i1 %18(prob = 0.5), ^b2, ^b3;
^b2:
    store i32* %16 with i32 0;
    i32* %19 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %19 with i32 -1;
    store i32* %i with i32 0;
    store i32* %j with i32 -1;
    ubr ^while.header;
^b3:
    i32 %20 = add i32 %15, i32 1;
    store i32* %i1 with i32 %20;
    ubr ^while.body1;
^while.header:
    i32* %21 = phi [^if.else, i32* %21] [^if.then, i32* %21] [^b2, i32* %0];
    i32* %22 = phi [^if.else, i32* %22] [^if.then, i32* %22] [^b2, i32* %19];
    i32 %23 = phi [^if.else, i32 %23] [^if.then, i32 %49] [^b2, i32 0];
    i32 %24 = phi [^if.else, i32 %52] [^if.then, i32 %50] [^b2, i32 -1];
    i32* %25 = phi [^if.else, i32* %25] [^if.then, i32* %25] [^b2, i32* %9];
    i32* %26 = phi [^if.else, i32* %26] [^if.then, i32* %26] [^b2, i32* %0];
    i32* %27 = getelementptr &(i32* %21)[i32 %23];
    i32 %28 = load i32* %27;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body2, ^while.header1;
^while.body2:
    i1 %30 = scmp eq i32 %24, i32 -1;
    cbr i1 %30(prob = 0.5), ^b5, ^b4;
^while.header1:
    i32 %31 = phi [^while.header, i32 0] [^if.then1, i32 %54] [^if.else1, i32 %31] [^if.then2, i32 %62];
    i32 %32 = phi [^while.header, i32 0] [^if.then1, i32 %53] [^if.else1, i32 %59] [^if.then2, i32 %61];
    i32* %33 = phi [^while.header, i32* %25] [^if.then1, i32* %33] [^if.else1, i32* %33] [^if.then2, i32* %33];
    i32* %34 = phi [^while.header, i32* %26] [^if.then1, i32* %34] [^if.else1, i32* %34] [^if.then2, i32* %34];
    i32* %35 = getelementptr &(i32* %33)[i32 %31];
    i32 %36 = load i32* %35;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body3, ^entry1;
^b4:
    i32 %38 = load i32* %27;
    i32* %39 = getelementptr &(i32* %21)[i32 %24];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %38, i32 %40;
    ubr ^b5;
^b5:
    i1 %42 = phi [^b4, i1 %41] [^while.body2, i1 true];
    cbr i1 %42(prob = 0.5), ^if.then, ^if.else;
^while.body3:
    i32* %43 = getelementptr &(i32* %34)[i32 %32];
    i32 %44 = load i32* %43;
    i1 %45 = scmp eq i32 %44, i32 %36;
    cbr i1 %45(prob = 0.5), ^if.then1, ^if.else1;
^entry1:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    i32 %46 = add i32 %24, i32 1;
    store i32* %j with i32 %46;
    i32 %47 = add i32 %23, i32 1;
    store i32* %i with i32 %47;
    i32* %48 = getelementptr &(i32* %22)[i32 %47];
    store i32* %48 with i32 %46;
    i32 %49 = load i32* %i;
    i32 %50 = load i32* %j;
    ubr ^while.header;
^if.else:
    i32* %51 = getelementptr &(i32* %22)[i32 %24];
    i32 %52 = load i32* %51;
    store i32* %j with i32 %52;
    ubr ^while.header;
^if.then1:
    i32 %53 = add i32 %32, i32 1;
    i32 %54 = add i32 %31, i32 1;
    i32* %55 = getelementptr &(i32* %34)[i32 %53];
    i32 %56 = load i32* %55;
    i1 %57 = scmp eq i32 %56, i32 0;
    cbr i1 %57(prob = 0.5), ^if.then3, ^while.header1;
^if.else1:
    i32* %58 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %32];
    i32 %59 = load i32* %58;
    i1 %60 = scmp eq i32 %59, i32 -1;
    cbr i1 %60(prob = 0.5), ^if.then2, ^while.header1;
^if.then2:
    i32 %61 = add i32 %59, i32 1;
    i32 %62 = add i32 %31, i32 1;
    ubr ^while.header1;
^if.then3:
    call (i32) -> void @putint(i32 %54);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
