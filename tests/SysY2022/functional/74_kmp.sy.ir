internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32 %0 = call () -> i32 @getch();
    i32* %1 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    store i32* %1 with i32 %0;
    i1 %2 = scmp eq i32 %0, i32 10;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^indirect, i32 %14];
    i32* %4 = getelementptr &(i32* %1)[i32 %3];
    store i32* %4 with i32 0;
    i32 %5 = call () -> i32 @getch();
    i32* %6 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    store i32* %6 with i32 %5;
    i1 %7 = scmp eq i32 %5, i32 10;
    cbr i1 %7(prob = 0.5), ^b2, ^b3;
  ^b1:
    i32 %8 = call () -> i32 @getch();
    i32* %9 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 1];
    store i32* %9 with i32 %8;
    i1 %10 = scmp eq i32 %8, i32 10;
    cbr i1 %10(prob = 0.5), ^indirect, ^indirect1;
  ^b2:
    i32 %11 = phi [^b, i32 0] [^indirect2, i32 %23];
    i32* %12 = getelementptr &(i32* %6)[i32 %11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %13 with i32 -1;
    ubr ^while.header;
  ^indirect:
    i32 %14 = phi [^b1, i32 1] [^indirect1, i32 %20];
    ubr ^b;
  ^b3:
    i32 %15 = call () -> i32 @getch();
    i32* %16 = getelementptr &([4096 * i32]* %src)[i64 0][i64 1];
    store i32* %16 with i32 %15;
    i1 %17 = scmp eq i32 %15, i32 10;
    cbr i1 %17(prob = 0.5), ^indirect2, ^indirect3;
  ^indirect1:
    i32 %18 = phi [^b1, i32 1] [^indirect1, i32 %20];
    i32 %19 = call () -> i32 @getch();
    i32 %20 = add i32 %18, i32 1;
    i32* %21 = getelementptr &(i32* %1)[i32 %20];
    store i32* %21 with i32 %19;
    i1 %22 = scmp eq i32 %19, i32 10;
    cbr i1 %22(prob = 0.5), ^indirect, ^indirect1;
  ^indirect2:
    i32 %23 = phi [^b3, i32 1] [^indirect3, i32 %31];
    ubr ^b2;
  ^while.header:
    i32 %24 = phi [^b2, i32 0] [^if.then, i32 %49] [^if.else, i32 %24];
    i32 %25 = phi [^b2, i32 -1] [^if.then, i32 %51] [^if.else, i32 %53];
    i32* %26 = getelementptr &(i32* %1)[i32 %24];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body, ^while.header1;
  ^indirect3:
    i32 %29 = phi [^b3, i32 1] [^indirect3, i32 %31];
    i32 %30 = call () -> i32 @getch();
    i32 %31 = add i32 %29, i32 1;
    i32* %32 = getelementptr &(i32* %6)[i32 %31];
    store i32* %32 with i32 %30;
    i1 %33 = scmp eq i32 %30, i32 10;
    cbr i1 %33(prob = 0.5), ^indirect2, ^indirect3;
  ^while.body:
    i1 %34 = scmp eq i32 %25, i32 -1;
    cbr i1 %34(prob = 0.5), ^b5, ^b4;
  ^while.header1:
    i32 %35 = phi [^while.header, i32 0] [^if.else1, i32 %60] [^if.then1, i32 %65];
    i32 %36 = phi [^while.header, i32 0] [^if.else1, i32 %58] [^if.then1, i32 %61];
    i32* %37 = getelementptr &(i32* %6)[i32 %35];
    i32 %38 = load i32* %37;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body1, ^b6;
  ^b4:
    i32* %40 = getelementptr &(i32* %1)[i32 %25];
    i32 %41 = load i32* %26;
    i32 %42 = load i32* %40;
    i1 %43 = scmp eq i32 %41, i32 %42;
    ubr ^b5;
  ^b5:
    i1 %44 = phi [^while.body, i1 true] [^b4, i1 %43];
    cbr i1 %44(prob = 0.5), ^if.then, ^if.else;
  ^while.body1:
    i32* %45 = getelementptr &(i32* %1)[i32 %36];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %38, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then1, ^if.else1;
  ^b6:
    i32 %48 = phi [^while.header1, i32 -1] [^if.then1, i32 %65];
    call (i32) -> void @putint(i32 %48);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then:
    i32 %49 = add i32 %24, i32 1;
    i32* %50 = getelementptr &(i32* %13)[i32 %49];
    i32 %51 = add i32 %25, i32 1;
    store i32* %50 with i32 %51;
    ubr ^while.header;
  ^if.else:
    i32* %52 = getelementptr &(i32* %13)[i32 %25];
    i32 %53 = load i32* %52;
    ubr ^while.header;
  ^if.else1:
    i32* %54 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %36];
    i32 %55 = load i32* %54;
    i1 %56 = scmp eq i32 %55, i32 -1;
    i32 %57 = add i32 %55, i32 1;
    i32 %58 = select i1 %56 ? i32 %57 : i32 %55;
    i32 %59 = add i32 %35, i32 1;
    i32 %60 = select i1 %56 ? i32 %59 : i32 %35;
    ubr ^while.header1;
  ^if.then1:
    i32 %61 = add i32 %36, i32 1;
    i32* %62 = getelementptr &(i32* %1)[i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = scmp eq i32 %63, i32 0;
    i32 %65 = add i32 %35, i32 1;
    cbr i1 %64(prob = 0.5), ^b6, ^while.header1;
}
