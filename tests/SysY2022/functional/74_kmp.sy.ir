internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    [4096 * i32]* %1 = ptrcast [4096 * i32]* @dst to [4096 * i32]*;
    i32* %2 = getelementptr &([4096 * i32]* %1)[i64 0][i64 0];
    store i32* %2 with i32 %0;
    i1 %3 = scmp eq i32 %0, i32 10;
    [4096 * i32]* %4 = ptrcast [4096 * i32]* @next to [4096 * i32]*;
    cbr i1 %3(prob = 0.5), ^b, ^b1;
  ^b:
    i32 %5 = phi [^entry, i32 0] [^indirect, i32 %17];
    i32* %6 = getelementptr &(i32* %2)[i32 %5];
    store i32* %6 with i32 0;
    i32 %7 = call () -> i32 @getch();
    [4096 * i32]* %8 = ptrcast [4096 * i32]* @src to [4096 * i32]*;
    i32* %9 = getelementptr &([4096 * i32]* %8)[i64 0][i64 0];
    store i32* %9 with i32 %7;
    i1 %10 = scmp eq i32 %7, i32 10;
    cbr i1 %10(prob = 0.5), ^b2, ^b3;
  ^b1:
    i32 %11 = call () -> i32 @getch();
    i32* %12 = getelementptr &([4096 * i32]* %1)[i64 0][i64 1];
    store i32* %12 with i32 %11;
    i1 %13 = scmp eq i32 %11, i32 10;
    cbr i1 %13(prob = 0.5), ^indirect, ^indirect1;
  ^b2:
    i32 %14 = phi [^b, i32 0] [^indirect2, i32 %26];
    i32* %15 = getelementptr &(i32* %9)[i32 %14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([4096 * i32]* %4)[i64 0][i64 0];
    store i32* %16 with i32 -1;
    ubr ^while.header;
  ^indirect:
    i32 %17 = phi [^b1, i32 1] [^indirect1, i32 %23];
    ubr ^b;
  ^b3:
    i32 %18 = call () -> i32 @getch();
    i32* %19 = getelementptr &([4096 * i32]* %8)[i64 0][i64 1];
    store i32* %19 with i32 %18;
    i1 %20 = scmp eq i32 %18, i32 10;
    cbr i1 %20(prob = 0.5), ^indirect2, ^indirect3;
  ^indirect1:
    i32 %21 = phi [^b1, i32 1] [^indirect1, i32 %23];
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %21, i32 1;
    i32* %24 = getelementptr &(i32* %2)[i32 %23];
    store i32* %24 with i32 %22;
    i1 %25 = scmp eq i32 %22, i32 10;
    cbr i1 %25(prob = 0.5), ^indirect, ^indirect1;
  ^indirect2:
    i32 %26 = phi [^b3, i32 1] [^indirect3, i32 %34];
    ubr ^b2;
  ^while.header:
    i32 %27 = phi [^b2, i32 0] [^if.then, i32 %52] [^if.else, i32 %27];
    i32 %28 = phi [^b2, i32 -1] [^if.then, i32 %54] [^if.else, i32 %56];
    i32* %29 = getelementptr &(i32* %2)[i32 %27];
    i32 %30 = load i32* %29;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body, ^while.header1;
  ^indirect3:
    i32 %32 = phi [^b3, i32 1] [^indirect3, i32 %34];
    i32 %33 = call () -> i32 @getch();
    i32 %34 = add i32 %32, i32 1;
    i32* %35 = getelementptr &(i32* %9)[i32 %34];
    store i32* %35 with i32 %33;
    i1 %36 = scmp eq i32 %33, i32 10;
    cbr i1 %36(prob = 0.5), ^indirect2, ^indirect3;
  ^while.body:
    i1 %37 = scmp eq i32 %28, i32 -1;
    cbr i1 %37(prob = 0.5), ^b5, ^b4;
  ^while.header1:
    i32 %38 = phi [^while.header, i32 0] [^if.else1, i32 %63] [^if.then1, i32 %68];
    i32 %39 = phi [^while.header, i32 0] [^if.else1, i32 %61] [^if.then1, i32 %64];
    i32* %40 = getelementptr &(i32* %9)[i32 %38];
    i32 %41 = load i32* %40;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body1, ^b6;
  ^b4:
    i32* %43 = getelementptr &(i32* %2)[i32 %28];
    i32 %44 = load i32* %29;
    i32 %45 = load i32* %43;
    i1 %46 = scmp eq i32 %44, i32 %45;
    ubr ^b5;
  ^b5:
    i1 %47 = phi [^while.body, i1 true] [^b4, i1 %46];
    cbr i1 %47(prob = 0.5), ^if.then, ^if.else;
  ^while.body1:
    i32* %48 = getelementptr &(i32* %2)[i32 %39];
    i32 %49 = load i32* %48;
    i1 %50 = scmp eq i32 %41, i32 %49;
    cbr i1 %50(prob = 0.5), ^if.then1, ^if.else1;
  ^b6:
    i32 %51 = phi [^while.header1, i32 -1] [^if.then1, i32 %68];
    call (i32) -> void @putint(i32 %51);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then:
    i32 %52 = add i32 %27, i32 1;
    i32* %53 = getelementptr &(i32* %16)[i32 %52];
    i32 %54 = add i32 %28, i32 1;
    store i32* %53 with i32 %54;
    ubr ^while.header;
  ^if.else:
    i32* %55 = getelementptr &(i32* %16)[i32 %28];
    i32 %56 = load i32* %55;
    ubr ^while.header;
  ^if.else1:
    i32* %57 = getelementptr &([4096 * i32]* %4)[i64 0][i32 %39];
    i32 %58 = load i32* %57;
    i1 %59 = scmp eq i32 %58, i32 -1;
    i32 %60 = add i32 %58, i32 1;
    i32 %61 = select i1 %59 ? i32 %60 : i32 %58;
    i32 %62 = add i32 %38, i32 1;
    i32 %63 = select i1 %59 ? i32 %62 : i32 %38;
    ubr ^while.header1;
  ^if.then1:
    i32 %64 = add i32 %39, i32 1;
    i32* %65 = getelementptr &(i32* %2)[i32 %64];
    i32 %66 = load i32* %65;
    i1 %67 = scmp eq i32 %66, i32 0;
    i32 %68 = add i32 %38, i32 1;
    cbr i1 %67(prob = 0.5), ^b6, ^while.header1;
}
internal [4096 * i32]* @next;
internal [4096 * i32]* @src;
internal [4096 * i32]* @dst;
