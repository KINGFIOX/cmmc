internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^b1, i32 %6];
    i32* %2 = getelementptr &(i32* %0)[i32 %1];
    i32 %3 = call () -> i32 @getch();
    store i32* %2 with i32 %3;
    i1 %4 = scmp eq i32 %3, i32 10;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    store i32* %2 with i32 0;
    i32* %5 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    ubr ^while.body1;
^b1:
    i32 %6 = add i32 %1, i32 1;
    ubr ^while.body;
^while.body1:
    i32 %7 = phi [^b, i32 0] [^b2, i32 %11];
    i32* %8 = getelementptr &(i32* %5)[i32 %7];
    i32 %9 = call () -> i32 @getch();
    store i32* %8 with i32 %9;
    i1 %10 = scmp eq i32 %9, i32 10;
    cbr i1 %10(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %11 = add i32 %7, i32 1;
    ubr ^while.body1;
^b3:
    store i32* %8 with i32 0;
    i32* %12 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %12 with i32 -1;
    i32 %13 = load i32* %0;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^entry1;
^while.body2:
    i32 %15 = phi [^b3, i32 -1] [^b7, i32 %47];
    i32 %16 = phi [^b3, i32 0] [^b7, i32 %48];
    i1 %17 = scmp eq i32 %15, i32 -1;
    cbr i1 %17(prob = 0.5), ^b5, ^b4;
^entry1:
    i32 %18 = load i32* %5;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body3, ^b6;
^b4:
    i32* %20 = getelementptr &(i32* %0)[i32 %16];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %0)[i32 %15];
    i32 %23 = load i32* %22;
    i1 %24 = scmp eq i32 %21, i32 %23;
    ubr ^b5;
^b5:
    i1 %25 = phi [^while.body2, i1 true] [^b4, i1 %24];
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
^while.body3:
    i32 %26 = phi [^entry1, i32 0] [^b8, i32 %54];
    i32 %27 = phi [^entry1, i32 0] [^b8, i32 %55];
    i32* %28 = getelementptr &(i32* %0)[i32 %27];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %5)[i32 %26];
    i32 %31 = load i32* %30;
    i1 %32 = scmp eq i32 %29, i32 %31;
    cbr i1 %32(prob = 0.5), ^if.then1, ^if.else1;
^b6:
    i32 %33 = phi [^entry1, i32 -1] [^if.then1, i32 %40] [^b8, i32 -1];
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    i32 %34 = add i32 %15, i32 1;
    i32 %35 = add i32 %16, i32 1;
    i32* %36 = getelementptr &(i32* %12)[i32 %35];
    store i32* %36 with i32 %34;
    ubr ^b7;
^if.else:
    i32* %37 = getelementptr &(i32* %12)[i32 %15];
    i32 %38 = load i32* %37;
    ubr ^b7;
^if.then1:
    i32 %39 = add i32 %27, i32 1;
    i32 %40 = add i32 %26, i32 1;
    i32* %41 = getelementptr &(i32* %0)[i32 %39];
    i32 %42 = load i32* %41;
    i1 %43 = scmp eq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^b6, ^b8;
^if.else1:
    i32* %44 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %27];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 -1;
    cbr i1 %46(prob = 0.5), ^if.then2, ^b8;
^b7:
    i32 %47 = phi [^if.then, i32 %34] [^if.else, i32 %38];
    i32 %48 = phi [^if.then, i32 %35] [^if.else, i32 %16];
    i32* %49 = getelementptr &(i32* %0)[i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body2, ^entry1;
^if.then2:
    i32 %52 = add i32 %45, i32 1;
    i32 %53 = add i32 %26, i32 1;
    ubr ^b8;
^b8:
    i32 %54 = phi [^if.then1, i32 %40] [^if.else1, i32 %26] [^if.then2, i32 %53];
    i32 %55 = phi [^if.then1, i32 %39] [^if.else1, i32 %45] [^if.then2, i32 %52];
    i32* %56 = getelementptr &(i32* %5)[i32 %54];
    i32 %57 = load i32* %56;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body3, ^b6;
}
