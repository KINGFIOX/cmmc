internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^b1, i32 %6] [^entry, i32 0];
    i32* %2 = getelementptr &(i32* %0)[i32 %1];
    i32 %3 = call () -> i32 @getch();
    store i32* %2 with i32 %3;
    i1 %4 = scmp eq i32 %3, i32 10;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    store i32* %2 with i32 0;
    i32* %5 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    ubr ^while.body1;
^b1:
    i32 %6 = add i32 %1, i32 1;
    ubr ^while.body;
^while.body1:
    i32 %7 = phi [^b3, i32 %12] [^b, i32 0];
    i32* %8 = getelementptr &(i32* %5)[i32 %7];
    i32 %9 = call () -> i32 @getch();
    store i32* %8 with i32 %9;
    i1 %10 = scmp eq i32 %9, i32 10;
    cbr i1 %10(prob = 0.5), ^b2, ^b3;
^b2:
    store i32* %8 with i32 0;
    i32* %11 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %11 with i32 -1;
    ubr ^while.header;
^b3:
    i32 %12 = add i32 %7, i32 1;
    ubr ^while.body1;
^while.header:
    i32 %13 = phi [^if.else, i32 %13] [^if.then, i32 %33] [^b2, i32 0];
    i32 %14 = phi [^if.else, i32 %36] [^if.then, i32 %32] [^b2, i32 -1];
    i32* %15 = getelementptr &(i32* %0)[i32 %13];
    i32 %16 = load i32* %15;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.header1;
^while.body2:
    i1 %18 = scmp eq i32 %14, i32 -1;
    cbr i1 %18(prob = 0.5), ^b5, ^b4;
^while.header1:
    i32 %19 = phi [^while.header, i32 0] [^if.then1, i32 %38] [^if.else1, i32 %19] [^if.then2, i32 %46];
    i32 %20 = phi [^while.header, i32 0] [^if.then1, i32 %37] [^if.else1, i32 %43] [^if.then2, i32 %45];
    i32* %21 = getelementptr &(i32* %5)[i32 %19];
    i32 %22 = load i32* %21;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body3, ^entry1;
^b4:
    i32 %24 = load i32* %15;
    i32* %25 = getelementptr &(i32* %0)[i32 %14];
    i32 %26 = load i32* %25;
    i1 %27 = scmp eq i32 %24, i32 %26;
    ubr ^b5;
^b5:
    i1 %28 = phi [^b4, i1 %27] [^while.body2, i1 true];
    cbr i1 %28(prob = 0.5), ^if.then, ^if.else;
^while.body3:
    i32* %29 = getelementptr &(i32* %0)[i32 %20];
    i32 %30 = load i32* %29;
    i1 %31 = scmp eq i32 %30, i32 %22;
    cbr i1 %31(prob = 0.5), ^if.then1, ^if.else1;
^entry1:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    i32 %32 = add i32 %14, i32 1;
    i32 %33 = add i32 %13, i32 1;
    i32* %34 = getelementptr &(i32* %11)[i32 %33];
    store i32* %34 with i32 %32;
    ubr ^while.header;
^if.else:
    i32* %35 = getelementptr &(i32* %11)[i32 %14];
    i32 %36 = load i32* %35;
    ubr ^while.header;
^if.then1:
    i32 %37 = add i32 %20, i32 1;
    i32 %38 = add i32 %19, i32 1;
    i32* %39 = getelementptr &(i32* %0)[i32 %37];
    i32 %40 = load i32* %39;
    i1 %41 = scmp eq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then3, ^while.header1;
^if.else1:
    i32* %42 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %20];
    i32 %43 = load i32* %42;
    i1 %44 = scmp eq i32 %43, i32 -1;
    cbr i1 %44(prob = 0.5), ^if.then2, ^while.header1;
^if.then2:
    i32 %45 = add i32 %43, i32 1;
    i32 %46 = add i32 %19, i32 1;
    ubr ^while.header1;
^if.then3:
    call (i32) -> void @putint(i32 %38);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
