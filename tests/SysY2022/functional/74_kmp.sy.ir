internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [4096 * i32]* %next = alloc [4096 * i32];
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %i1 = alloc i32;
    i32* %i2 = alloc i32;
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    store i32* %i2 with i32 0;
    ubr ^while.body;
^while.body:
    i32* %1 = phi [^b1, i32* %1] [^entry, i32* %0];
    i32* %2 = phi [^entry, i32* %0] [^b1, i32* %1];
    i32 %3 = phi [^entry, i32 0] [^b1, i32 %12];
    i32* %4 = getelementptr &(i32* %2)[i32 %3];
    i32 %5 = call () -> i32 @getch();
    store i32* %4 with i32 %5;
    i32 %6 = load i32* %i2;
    i32* %7 = getelementptr &(i32* %2)[i32 %6];
    i32 %8 = load i32* %7;
    i1 %9 = scmp eq i32 %8, i32 10;
    cbr i1 %9(prob = 0.5), ^b, ^b1;
^b:
    i32* %10 = getelementptr &(i32* %1)[i32 %6];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    store i32* %i1 with i32 0;
    ubr ^while.body1;
^b1:
    i32 %12 = add i32 %6, i32 1;
    store i32* %i2 with i32 %12;
    ubr ^while.body;
^while.body1:
    i32* %13 = phi [^b3, i32* %13] [^b, i32* %11];
    i32* %14 = phi [^b, i32* %11] [^b3, i32* %13];
    i32 %15 = phi [^b, i32 0] [^b3, i32 %24];
    i32* %16 = getelementptr &(i32* %14)[i32 %15];
    i32 %17 = call () -> i32 @getch();
    store i32* %16 with i32 %17;
    i32 %18 = load i32* %i1;
    i32* %19 = getelementptr &(i32* %14)[i32 %18];
    i32 %20 = load i32* %19;
    i1 %21 = scmp eq i32 %20, i32 10;
    cbr i1 %21(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %22 = getelementptr &(i32* %13)[i32 %18];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    store i32* %23 with i32 -1;
    store i32* %i with i32 0;
    store i32* %j with i32 -1;
    ubr ^while.header;
^b3:
    i32 %24 = add i32 %18, i32 1;
    store i32* %i1 with i32 %24;
    ubr ^while.body1;
^while.header:
    i32* %25 = phi [^if.else, i32* %25] [^if.then, i32* %25] [^b2, i32* %0];
    i32* %26 = phi [^if.else, i32* %26] [^if.then, i32* %26] [^b2, i32* %23];
    i32 %27 = phi [^if.else, i32 %27] [^if.then, i32 %59] [^b2, i32 0];
    i32 %28 = phi [^if.else, i32 %62] [^if.then, i32 %60] [^b2, i32 -1];
    i32* %29 = phi [^if.else, i32* %29] [^if.then, i32* %29] [^b2, i32* %11];
    i32* %30 = phi [^if.else, i32* %30] [^if.then, i32* %30] [^b2, i32* %0];
    i32* %31 = phi [^b2, i32* %0] [^if.then, i32* %25] [^if.else, i32* %25];
    i32 %32 = phi [^b2, i32 0] [^if.then, i32 %59] [^if.else, i32 %27];
    i32* %33 = getelementptr &(i32* %31)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body2, ^while.header1;
^while.body2:
    i1 %36 = scmp eq i32 %28, i32 -1;
    cbr i1 %36(prob = 0.5), ^b5, ^b4;
^while.header1:
    i32 %37 = phi [^while.header, i32 0] [^if.then1, i32 %64] [^if.else1, i32 %37] [^if.then2, i32 %72];
    i32 %38 = phi [^while.header, i32 0] [^if.then1, i32 %63] [^if.else1, i32 %69] [^if.then2, i32 %71];
    i32* %39 = phi [^while.header, i32* %29] [^if.then1, i32* %39] [^if.else1, i32* %39] [^if.then2, i32* %39];
    i32* %40 = phi [^while.header, i32* %30] [^if.then1, i32* %40] [^if.else1, i32* %40] [^if.then2, i32* %40];
    i32 %41 = phi [^while.header, i32 0] [^if.then1, i32 %64] [^if.else1, i32 %37] [^if.then2, i32 %72];
    i32* %42 = getelementptr &(i32* %39)[i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body3, ^entry1;
^b4:
    i32* %45 = getelementptr &(i32* %25)[i32 %27];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %25)[i32 %28];
    i32 %48 = load i32* %47;
    i1 %49 = scmp eq i32 %46, i32 %48;
    ubr ^b5;
^b5:
    i1 %50 = phi [^b4, i1 %49] [^while.body2, i1 true];
    cbr i1 %50(prob = 0.5), ^if.then, ^if.else;
^while.body3:
    i32* %51 = getelementptr &(i32* %40)[i32 %38];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %39)[i32 %37];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %52, i32 %54;
    cbr i1 %55(prob = 0.5), ^if.then1, ^if.else1;
^entry1:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then:
    i32 %56 = add i32 %28, i32 1;
    store i32* %j with i32 %56;
    i32 %57 = add i32 %27, i32 1;
    store i32* %i with i32 %57;
    i32* %58 = getelementptr &(i32* %26)[i32 %57];
    store i32* %58 with i32 %56;
    i32 %59 = load i32* %i;
    i32 %60 = load i32* %j;
    ubr ^while.header;
^if.else:
    i32* %61 = getelementptr &(i32* %26)[i32 %28];
    i32 %62 = load i32* %61;
    store i32* %j with i32 %62;
    ubr ^while.header;
^if.then1:
    i32 %63 = add i32 %38, i32 1;
    i32 %64 = add i32 %37, i32 1;
    i32* %65 = getelementptr &(i32* %40)[i32 %63];
    i32 %66 = load i32* %65;
    i1 %67 = scmp eq i32 %66, i32 0;
    cbr i1 %67(prob = 0.5), ^if.then3, ^while.header1;
^if.else1:
    i32* %68 = getelementptr &([4096 * i32]* %next)[i64 0][i32 %38];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 -1;
    cbr i1 %70(prob = 0.5), ^if.then2, ^while.header1;
^if.then2:
    i32 %71 = add i32 %69, i32 1;
    i32 %72 = add i32 %37, i32 1;
    ubr ^while.header1;
^if.then3:
    call (i32) -> void @putint(i32 %64);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
