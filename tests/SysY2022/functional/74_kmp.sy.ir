internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    [4096 * i32]* %1 = ptrcast [4096 * i32]* @dst to [4096 * i32]*;
    i32* %2 = getelementptr &([4096 * i32]* %1)[i64 0][i64 0];
    store i32* %2 with i32 %0;
    i1 %3 = scmp eq i32 %0, i32 10;
    [4096 * i32]* %4 = ptrcast [4096 * i32]* @next to [4096 * i32]*;
    cbr i1 %3(prob = 0.5), ^b, ^b1;
  ^b:
    i32 %5 = phi [^entry, i32 0] [^b1, i32 1] [^indirect, i32 %22];
    i32* %6 = getelementptr &(i32* %2)[i32 %5];
    store i32* %6 with i32 0;
    i32 %7 = call () -> i32 @getch();
    [4096 * i32]* %8 = ptrcast [4096 * i32]* @src to [4096 * i32]*;
    i32* %9 = getelementptr &([4096 * i32]* %8)[i64 0][i64 0];
    store i32* %9 with i32 %7;
    i1 %10 = scmp eq i32 %7, i32 10;
    cbr i1 %10(prob = 0.5), ^b2, ^b3;
  ^b1:
    i32 %11 = call () -> i32 @getch();
    i32* %12 = getelementptr &([4096 * i32]* %1)[i64 0][i64 1];
    store i32* %12 with i32 %11;
    i1 %13 = scmp eq i32 %11, i32 10;
    cbr i1 %13(prob = 0.5), ^b, ^indirect;
  ^b2:
    i32 %14 = phi [^b, i32 0] [^b3, i32 1] [^indirect1, i32 %32];
    i32* %15 = getelementptr &(i32* %9)[i32 %14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([4096 * i32]* %4)[i64 0][i64 0];
    store i32* %16 with i32 -1;
    ubr ^while.header;
  ^b3:
    i32 %17 = call () -> i32 @getch();
    i32* %18 = getelementptr &([4096 * i32]* %8)[i64 0][i64 1];
    store i32* %18 with i32 %17;
    i1 %19 = scmp eq i32 %17, i32 10;
    cbr i1 %19(prob = 0.5), ^b2, ^indirect1;
  ^indirect:
    i32 %20 = phi [^b1, i32 1] [^indirect, i32 %22];
    i32 %21 = call () -> i32 @getch();
    i32 %22 = add i32 %20, i32 1;
    i32* %23 = getelementptr &(i32* %2)[i32 %22];
    store i32* %23 with i32 %21;
    i1 %24 = scmp eq i32 %21, i32 10;
    cbr i1 %24(prob = 0.5), ^b, ^indirect;
  ^while.header:
    i32 %25 = phi [^b2, i32 0] [^if.then, i32 %50] [^if.else, i32 %25];
    i32 %26 = phi [^b2, i32 -1] [^if.then, i32 %52] [^if.else, i32 %54];
    i32* %27 = getelementptr &(i32* %2)[i32 %25];
    i32 %28 = load i32* %27;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body, ^while.header1;
  ^indirect1:
    i32 %30 = phi [^b3, i32 1] [^indirect1, i32 %32];
    i32 %31 = call () -> i32 @getch();
    i32 %32 = add i32 %30, i32 1;
    i32* %33 = getelementptr &(i32* %9)[i32 %32];
    store i32* %33 with i32 %31;
    i1 %34 = scmp eq i32 %31, i32 10;
    cbr i1 %34(prob = 0.5), ^b2, ^indirect1;
  ^while.body:
    i1 %35 = scmp eq i32 %26, i32 -1;
    cbr i1 %35(prob = 0.5), ^b5, ^b4;
  ^while.header1:
    i32 %36 = phi [^while.header, i32 0] [^if.else1, i32 %61] [^if.then1, i32 %66];
    i32 %37 = phi [^while.header, i32 0] [^if.else1, i32 %59] [^if.then1, i32 %62];
    i32* %38 = getelementptr &(i32* %9)[i32 %36];
    i32 %39 = load i32* %38;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body1, ^b6;
  ^b4:
    i32* %41 = getelementptr &(i32* %2)[i32 %26];
    i32 %42 = load i32* %27;
    i32 %43 = load i32* %41;
    i1 %44 = scmp eq i32 %42, i32 %43;
    ubr ^b5;
  ^b5:
    i1 %45 = phi [^while.body, i1 true] [^b4, i1 %44];
    cbr i1 %45(prob = 0.5), ^if.then, ^if.else;
  ^while.body1:
    i32* %46 = getelementptr &(i32* %2)[i32 %37];
    i32 %47 = load i32* %46;
    i1 %48 = scmp eq i32 %39, i32 %47;
    cbr i1 %48(prob = 0.5), ^if.then1, ^if.else1;
  ^b6:
    i32 %49 = phi [^while.header1, i32 -1] [^if.then1, i32 %66];
    call (i32) -> void @putint(i32 %49);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then:
    i32 %50 = add i32 %25, i32 1;
    i32* %51 = getelementptr &(i32* %16)[i32 %50];
    i32 %52 = add i32 %26, i32 1;
    store i32* %51 with i32 %52;
    ubr ^while.header;
  ^if.else:
    i32* %53 = getelementptr &(i32* %16)[i32 %26];
    i32 %54 = load i32* %53;
    ubr ^while.header;
  ^if.else1:
    i32* %55 = getelementptr &([4096 * i32]* %4)[i64 0][i32 %37];
    i32 %56 = load i32* %55;
    i1 %57 = scmp eq i32 %56, i32 -1;
    i32 %58 = add i32 %56, i32 1;
    i32 %59 = select i1 %57 ? i32 %58 : i32 %56;
    i32 %60 = add i32 %36, i32 1;
    i32 %61 = select i1 %57 ? i32 %60 : i32 %36;
    ubr ^while.header1;
  ^if.then1:
    i32 %62 = add i32 %37, i32 1;
    i32* %63 = getelementptr &(i32* %2)[i32 %62];
    i32 %64 = load i32* %63;
    i1 %65 = scmp eq i32 %64, i32 0;
    i32 %66 = add i32 %36, i32 1;
    cbr i1 %65(prob = 0.5), ^b6, ^while.header1;
}
internal [4096 * i32]* @next;
internal [4096 * i32]* @src;
internal [4096 * i32]* @dst;
