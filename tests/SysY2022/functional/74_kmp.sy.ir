internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [4096 * i32]* %0 = ptrcast [4096 * i32]* @dst to [4096 * i32]*;
    i32* %1 = getelementptr &([4096 * i32]* %0)[i64 0][i64 0];
    [4096 * i32]* %2 = ptrcast [4096 * i32]* @next to [4096 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %3 = phi [^entry, i32 0] [^b1, i32 %9];
    i32 %4 = call () -> i32 @getch();
    i32* %5 = getelementptr &(i32* %1)[i32 %3];
    store i32* %5 with i32 %4;
    i1 %6 = icmp eq i32 %4, i32 10;
    cbr i1 %6(prob = 0.5), ^b, ^b1;
  ^b:
    store i32* %5 with i32 0;
    [4096 * i32]* %7 = ptrcast [4096 * i32]* @src to [4096 * i32]*;
    i32* %8 = getelementptr &([4096 * i32]* %7)[i64 0][i64 0];
    ubr ^while.header1;
  ^b1:
    i32 %9 = add i32 %3, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %10 = phi [^b, i32 0] [^b3, i32 %15];
    i32 %11 = call () -> i32 @getch();
    i32* %12 = getelementptr &(i32* %8)[i32 %10];
    store i32* %12 with i32 %11;
    i1 %13 = icmp eq i32 %11, i32 10;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
  ^b2:
    store i32* %12 with i32 0;
    i32* %14 = getelementptr &([4096 * i32]* %2)[i64 0][i64 0];
    store i32* %14 with i32 -1;
    ubr ^while.header2;
  ^b3:
    i32 %15 = add i32 %10, i32 1;
    ubr ^while.header1;
  ^while.header2:
    i32 %16 = phi [^b2, i32 -1] [^if.then, i32 %37] [^if.else, i32 %39];
    i32 %17 = phi [^b2, i32 0] [^if.then, i32 %35] [^if.else, i32 %17];
    i32* %18 = getelementptr &(i32* %1)[i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = icmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body, ^while.header3;
  ^while.body:
    i1 %21 = icmp eq i32 %16, i32 -1;
    cbr i1 %21(prob = 0.5), ^b5, ^b4;
  ^while.header3:
    i32 %22 = phi [^while.header2, i32 0] [^if.else1, i32 %44] [^if.then1, i32 %47];
    i32 %23 = phi [^while.header2, i32 0] [^if.else1, i32 %46] [^if.then1, i32 %51];
    i32* %24 = getelementptr &(i32* %8)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = icmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b6;
  ^b4:
    i32* %27 = getelementptr &(i32* %1)[i32 %16];
    i32 %28 = load i32* %27;
    i1 %29 = icmp eq i32 %19, i32 %28;
    ubr ^b5;
  ^b5:
    i1 %30 = phi [^while.body, i1 true] [^b4, i1 %29];
    cbr i1 %30(prob = 0.5), ^if.then, ^if.else;
  ^while.body1:
    i32* %31 = getelementptr &(i32* %1)[i32 %22];
    i32 %32 = load i32* %31;
    i1 %33 = icmp eq i32 %25, i32 %32;
    cbr i1 %33(prob = 0.5), ^if.then1, ^if.else1;
  ^b6:
    i32 %34 = phi [^while.header3, i32 -1] [^if.then1, i32 %51];
    call (i32) -> void @putint(i32 %34);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^if.then:
    i32 %35 = add i32 %17, i32 1;
    i32* %36 = getelementptr &(i32* %14)[i32 %35];
    i32 %37 = add i32 %16, i32 1;
    store i32* %36 with i32 %37;
    ubr ^while.header2;
  ^if.else:
    i32* %38 = getelementptr &(i32* %14)[i32 %16];
    i32 %39 = load i32* %38;
    ubr ^while.header2;
  ^if.else1:
    i32* %40 = getelementptr &([4096 * i32]* %2)[i64 0][i32 %22];
    i32 %41 = load i32* %40;
    i1 %42 = icmp eq i32 %41, i32 -1;
    i32 %43 = add i32 %41, i32 1;
    i32 %44 = select i1 %42 ? i32 %43 : i32 %41;
    i32 %45 = add i32 %23, i32 1;
    i32 %46 = select i1 %42 ? i32 %45 : i32 %23;
    ubr ^while.header3;
  ^if.then1:
    i32 %47 = add i32 %22, i32 1;
    i32* %48 = getelementptr &(i32* %1)[i32 %47];
    i32 %49 = load i32* %48;
    i1 %50 = icmp eq i32 %49, i32 0;
    i32 %51 = add i32 %23, i32 1;
    cbr i1 %50(prob = 0.5), ^b6, ^while.header3;
}
internal [4096 * i32]* @next;
internal [4096 * i32]* @src;
internal [4096 * i32]* @dst;
