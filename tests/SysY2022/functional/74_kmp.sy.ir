internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @get_next(i32* %str, i32* %next) -> void {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32** %next1 = alloc i32*;
    i32** %str1 = alloc i32*;
    store i32** %str1 with i32* %str;
    store i32** %next1 with i32* %next;
    i32* %0 = load i32** %next1;
    i32* %1 = getelementptr &(i32* %0)[i64 0];
    store i32* %1 with i32 -1;
    store i32* %i with i32 0;
    store i32* %j with i32 -1;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %i;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = load i32** %str1;
    i32* %5 = getelementptr &(i32* %4)[i64 %3];
    i32 %6 = load i32* %5;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %j;
    i1 %9 = scmp eq i32 %8, i32 -1;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b2, ^b1;
^b:
    ret;
^b1:
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = load i32** %str1;
    i32* %15 = getelementptr &(i32* %14)[i64 %13];
    i32 %16 = load i32* %15;
    i32 %17 = load i32* %j;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = load i32** %str1;
    i32* %20 = getelementptr &(i32* %19)[i64 %18];
    i32 %21 = load i32* %20;
    i1 %22 = scmp eq i32 %16, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b2;
^b2:
    i1 %25 = phi [^b1, i1 %24] [^while.body, i1 true];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %28 = load i32* %j;
    i32 %29 = add i32 %28, i32 1;
    store i32* %j with i32 %29;
    i32 %30 = load i32* %i;
    i32 %31 = add i32 %30, i32 1;
    store i32* %i with i32 %31;
    i32 %32 = load i32* %i;
    i64 %33 = sext i32 %32 to i64;
    i32* %34 = load i32** %next1;
    i32* %35 = getelementptr &(i32* %34)[i64 %33];
    i32 %36 = load i32* %j;
    store i32* %35 with i32 %36;
    ubr ^b3;
^if.else:
    i32 %37 = load i32* %j;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = load i32** %next1;
    i32* %40 = getelementptr &(i32* %39)[i64 %38];
    i32 %41 = load i32* %40;
    store i32* %j with i32 %41;
    ubr ^b3;
^b3:
    ubr ^while.header;
}
internal func @KMP(i32* %dst, i32* %src) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [4096 * i32]* %next = alloc [4096 * i32];
    i32** %src1 = alloc i32*;
    i32** %dst1 = alloc i32*;
    store i32** %dst1 with i32* %dst;
    store i32** %src1 with i32* %src;
    i32* %0 = load i32** %dst1;
    i32* %1 = getelementptr &([4096 * i32]* %next)[i64 0][i64 0];
    call (i32*, i32*) -> void @get_next(i32* %0, i32* %1);
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %j;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = load i32** %src1;
    i32* %5 = getelementptr &(i32* %4)[i64 %3];
    i32 %6 = load i32* %5;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = load i32** %dst1;
    i32* %11 = getelementptr &(i32* %10)[i64 %9];
    i32 %12 = load i32* %11;
    i32 %13 = load i32* %j;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = load i32** %src1;
    i32* %16 = getelementptr &(i32* %15)[i64 %14];
    i32 %17 = load i32* %16;
    i1 %18 = scmp eq i32 %12, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 -1;
^if.then:
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    i32 %23 = load i32* %j;
    i32 %24 = add i32 %23, i32 1;
    store i32* %j with i32 %24;
    i32 %25 = load i32* %i;
    i64 %26 = sext i32 %25 to i64;
    i32* %27 = load i32** %dst1;
    i32* %28 = getelementptr &(i32* %27)[i64 %26];
    i32 %29 = load i32* %28;
    i1 %30 = scmp neq i32 %29, i32 0;
    i1 %31 = xor i1 %30, i1 true;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then2, ^b1;
^if.else:
    i32 %34 = load i32* %i;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([4096 * i32]* %next)[i64 0][i64 %35];
    i32 %37 = load i32* %36;
    store i32* %i with i32 %37;
    i32 %38 = load i32* %i;
    i1 %39 = scmp eq i32 %38, i32 -1;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then1, ^b2;
^b1:
    ubr ^b3;
^if.then1:
    i32 %42 = load i32* %i;
    i32 %43 = add i32 %42, i32 1;
    store i32* %i with i32 %43;
    i32 %44 = load i32* %j;
    i32 %45 = add i32 %44, i32 1;
    store i32* %j with i32 %45;
    ubr ^b2;
^b2:
    ubr ^b3;
^if.then2:
    i32 %46 = load i32* %j;
    ret i32 %46;
^b3:
    ubr ^while.header;
}
internal func @read_str(i32* %buf) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32** %buf1 = alloc i32*;
    store i32** %buf1 with i32* %buf;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i1 %0 = scmp neq i32 1, i32 0;
    cbr i1 %0(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %1 = load i32* %i;
    i64 %2 = sext i32 %1 to i64;
    i32* %3 = load i32** %buf1;
    i32* %4 = getelementptr &(i32* %3)[i64 %2];
    i32 %5 = call () -> i32 @getch();
    store i32* %4 with i32 %5;
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = load i32** %buf1;
    i32* %9 = getelementptr &(i32* %8)[i64 %7];
    i32 %10 = load i32* %9;
    i1 %11 = scmp eq i32 %10, i32 10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %buf1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    store i32* %17 with i32 0;
    i32 %18 = load i32* %i;
    ret i32 %18;
^if.then:
    ubr ^b;
^b1:
    i32 %19 = load i32* %i;
    i32 %20 = add i32 %19, i32 1;
    store i32* %i with i32 %20;
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    [4096 * i32]* %src = alloc [4096 * i32];
    [4096 * i32]* %dst = alloc [4096 * i32];
    i32* %0 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @read_str(i32* %0);
    i32* %2 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @read_str(i32* %2);
    i32* %4 = getelementptr &([4096 * i32]* %dst)[i64 0][i64 0];
    i32* %5 = getelementptr &([4096 * i32]* %src)[i64 0][i64 0];
    i32 %6 = call (i32*, i32*) -> i32 @KMP(i32* %4, i32* %5);
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
