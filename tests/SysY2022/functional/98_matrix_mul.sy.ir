internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    [3 * f32]* %a0 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [3 * f32]* %c2 = alloc [3 * f32];
    ubr [ ^while.body [3 * f32]* %c2, [6 * f32]* %c0, [3 * f32]* %b2, [3 * f32]* %b1, [3 * f32]* %b0, [3 * f32]* %a2, [3 * f32]* %a1, [3 * f32]* %a0, [3 * f32]* %c1, i32 0 ];
^while.body([3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8, i32 %arg9):
    f32* %0 = getelementptr &([3 * f32]* %arg7)[i32 0][i32 %arg9];
    f32 %1 = s2f i32 %arg9 to f32;
    store f32* %0 with f32 %1;
    f32* %2 = getelementptr &([3 * f32]* %arg6)[i32 0][i32 %arg9];
    store f32* %2 with f32 %1;
    f32* %3 = getelementptr &([3 * f32]* %arg5)[i32 0][i32 %arg9];
    store f32* %3 with f32 %1;
    f32* %4 = getelementptr &([3 * f32]* %arg4)[i32 0][i32 %arg9];
    store f32* %4 with f32 %1;
    f32* %5 = getelementptr &([3 * f32]* %arg3)[i32 0][i32 %arg9];
    store f32* %5 with f32 %1;
    f32* %6 = getelementptr &([3 * f32]* %arg2)[i32 0][i32 %arg9];
    store f32* %6 with f32 %1;
    i32 %7 = add i32 %arg9, i32 1;
    i1 %8 = scmp lt i32 %7, i32 3;
    cbr i1 %8, [ ^while.body [3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8, i32 %7 ], [ ^b [3 * f32]* %arg, [3 * f32]* %arg8, [6 * f32]* %arg1, [3 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7 ];
^b([3 * f32]* %arg, [3 * f32]* %arg1, [6 * f32]* %arg2, [3 * f32]* %arg3, [3 * f32]* %arg4, [3 * f32]* %arg5, [3 * f32]* %arg6, [3 * f32]* %arg7, [3 * f32]* %arg8):
    f32* %0 = getelementptr &([3 * f32]* %arg8)[i32 0][i32 0];
    f32* %1 = getelementptr &([3 * f32]* %arg7)[i32 0][i32 0];
    f32* %2 = getelementptr &([3 * f32]* %arg6)[i32 0][i32 0];
    f32* %3 = getelementptr &([3 * f32]* %arg5)[i32 0][i32 0];
    f32* %4 = getelementptr &([3 * f32]* %arg4)[i32 0][i32 0];
    f32* %5 = getelementptr &([3 * f32]* %arg3)[i32 0][i32 0];
    f32* %6 = getelementptr &([6 * f32]* %arg2)[i32 0][i32 0];
    f32* %7 = getelementptr &([3 * f32]* %arg1)[i32 0][i32 0];
    f32* %8 = getelementptr &([3 * f32]* %arg)[i32 0][i32 0];
    f32 %9 = load f32* %0;
    f32 %10 = load f32* %3;
    f32* %11 = getelementptr &(f32* %0)[i32 1];
    f32 %12 = load f32* %11;
    f32 %13 = load f32* %4;
    f32 %14 = fmul f32 %12, f32 %13;
    f32 %15 = ffma f32 %9, f32 %10, f32 %14;
    f32* %16 = getelementptr &(f32* %0)[i32 2];
    f32 %17 = load f32* %16;
    f32 %18 = load f32* %5;
    f32 %19 = ffma f32 %17, f32 %18, f32 %15;
    store f32* %6 with f32 %19;
    f32* %20 = getelementptr &(f32* %6)[i32 1];
    f32* %21 = getelementptr &(f32* %3)[i32 1];
    f32 %22 = load f32* %21;
    f32* %23 = getelementptr &(f32* %4)[i32 1];
    f32 %24 = load f32* %23;
    f32 %25 = fmul f32 %12, f32 %24;
    f32 %26 = ffma f32 %9, f32 %22, f32 %25;
    f32* %27 = getelementptr &(f32* %5)[i32 1];
    f32 %28 = load f32* %27;
    f32 %29 = ffma f32 %17, f32 %28, f32 %26;
    store f32* %20 with f32 %29;
    f32* %30 = getelementptr &(f32* %6)[i32 2];
    f32* %31 = getelementptr &(f32* %3)[i32 2];
    f32 %32 = load f32* %31;
    f32* %33 = getelementptr &(f32* %4)[i32 2];
    f32 %34 = load f32* %33;
    f32 %35 = fmul f32 %12, f32 %34;
    f32 %36 = ffma f32 %9, f32 %32, f32 %35;
    f32* %37 = getelementptr &(f32* %5)[i32 2];
    f32 %38 = load f32* %37;
    f32 %39 = ffma f32 %17, f32 %38, f32 %36;
    store f32* %30 with f32 %39;
    f32 %40 = load f32* %1;
    f32* %41 = getelementptr &(f32* %1)[i32 1];
    f32 %42 = load f32* %41;
    f32 %43 = fmul f32 %42, f32 %13;
    f32 %44 = ffma f32 %40, f32 %10, f32 %43;
    f32* %45 = getelementptr &(f32* %1)[i32 2];
    f32 %46 = load f32* %45;
    f32 %47 = ffma f32 %46, f32 %18, f32 %44;
    store f32* %7 with f32 %47;
    f32* %48 = getelementptr &(f32* %7)[i32 1];
    f32 %49 = fmul f32 %42, f32 %24;
    f32 %50 = ffma f32 %40, f32 %22, f32 %49;
    f32 %51 = ffma f32 %46, f32 %28, f32 %50;
    store f32* %48 with f32 %51;
    f32* %52 = getelementptr &(f32* %7)[i32 2];
    f32 %53 = fmul f32 %42, f32 %34;
    f32 %54 = ffma f32 %40, f32 %32, f32 %53;
    f32 %55 = ffma f32 %46, f32 %38, f32 %54;
    store f32* %52 with f32 %55;
    f32 %56 = load f32* %2;
    f32* %57 = getelementptr &(f32* %2)[i32 1];
    f32 %58 = load f32* %57;
    f32 %59 = fmul f32 %58, f32 %13;
    f32 %60 = ffma f32 %56, f32 %10, f32 %59;
    f32* %61 = getelementptr &(f32* %2)[i32 2];
    f32 %62 = load f32* %61;
    f32 %63 = ffma f32 %62, f32 %18, f32 %60;
    store f32* %8 with f32 %63;
    f32* %64 = getelementptr &(f32* %8)[i32 1];
    f32 %65 = fmul f32 %58, f32 %24;
    f32 %66 = ffma f32 %56, f32 %22, f32 %65;
    f32 %67 = ffma f32 %62, f32 %28, f32 %66;
    store f32* %64 with f32 %67;
    f32* %68 = getelementptr &(f32* %8)[i32 2];
    f32 %69 = fmul f32 %58, f32 %34;
    f32 %70 = ffma f32 %56, f32 %32, f32 %69;
    f32 %71 = ffma f32 %62, f32 %38, f32 %70;
    store f32* %68 with f32 %71;
    ubr [ ^while.body1 [3 * f32]* %arg, [6 * f32]* %arg2, [3 * f32]* %arg1, i32 0 ];
^while.body1([3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, i32 %arg3):
    f32* %0 = getelementptr &([6 * f32]* %arg1)[i32 0][i32 %arg3];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body1 [3 * f32]* %arg, [6 * f32]* %arg1, [3 * f32]* %arg2, i32 %3 ], [ ^b1 [3 * f32]* %arg, [3 * f32]* %arg2 ];
^b1([3 * f32]* %arg, [3 * f32]* %arg1):
    call (i32) -> void @putch(i32 10);
    ubr [ ^while.body2 [3 * f32]* %arg, [3 * f32]* %arg1, i32 0 ];
^while.body2([3 * f32]* %arg, [3 * f32]* %arg1, i32 %arg2):
    f32* %0 = getelementptr &([3 * f32]* %arg1)[i32 0][i32 %arg2];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg2, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body2 [3 * f32]* %arg, [3 * f32]* %arg1, i32 %3 ], [ ^b2 [3 * f32]* %arg ];
^b2([3 * f32]* %arg):
    call (i32) -> void @putch(i32 10);
    ubr [ ^while.body3 [3 * f32]* %arg, i32 0 ];
^while.body3([3 * f32]* %arg, i32 %arg1):
    f32* %0 = getelementptr &([3 * f32]* %arg)[i32 0][i32 %arg1];
    f32 %1 = load f32* %0;
    i32 %2 = f2s f32 %1 to i32;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg1, i32 1;
    i1 %4 = scmp lt i32 %3, i32 3;
    cbr i1 %4, [ ^while.body3 [3 * f32]* %arg, i32 %3 ], [ ^b3 ];
^b3():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
