internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @M;
internal i32* @L;
internal i32* @N;
internal func @mul(f32* %a0, f32* %a1, f32* %a2, f32* %b0, f32* %b1, f32* %b2, f32* %c0, f32* %c1, f32* %c2) -> i32 {
^entry:
    i32* %i = alloc i32;
    f32** %c21 = alloc f32*;
    f32** %c11 = alloc f32*;
    f32** %c01 = alloc f32*;
    f32** %b21 = alloc f32*;
    f32** %b11 = alloc f32*;
    f32** %b01 = alloc f32*;
    f32** %a21 = alloc f32*;
    f32** %a11 = alloc f32*;
    f32** %a01 = alloc f32*;
    store f32** %a01 with f32* %a0;
    store f32** %a11 with f32* %a1;
    store f32** %a21 with f32* %a2;
    store f32** %b01 with f32* %b0;
    store f32** %b11 with f32* %b1;
    store f32** %b21 with f32* %b2;
    store f32** %c01 with f32* %c0;
    store f32** %c11 with f32* %c1;
    store f32** %c21 with f32* %c2;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    f32* %0 = load f32** %c01;
    f32* %1 = getelementptr &(f32* %0)[i64 0];
    f32* %2 = load f32** %a01;
    f32* %3 = getelementptr &(f32* %2)[i64 0];
    f32 %4 = load f32* %3;
    f32* %5 = load f32** %b01;
    f32* %6 = getelementptr &(f32* %5)[i64 0];
    f32 %7 = load f32* %6;
    f32 %8 = fmul f32 %4, f32 %7;
    f32* %9 = load f32** %a01;
    f32* %10 = getelementptr &(f32* %9)[i64 1];
    f32 %11 = load f32* %10;
    f32* %12 = load f32** %b11;
    f32* %13 = getelementptr &(f32* %12)[i64 0];
    f32 %14 = load f32* %13;
    f32 %15 = fmul f32 %11, f32 %14;
    f32 %16 = fadd f32 %8, f32 %15;
    f32* %17 = load f32** %a01;
    f32* %18 = getelementptr &(f32* %17)[i64 2];
    f32 %19 = load f32* %18;
    f32* %20 = load f32** %b21;
    f32* %21 = getelementptr &(f32* %20)[i64 0];
    f32 %22 = load f32* %21;
    f32 %23 = fmul f32 %19, f32 %22;
    f32 %24 = fadd f32 %16, f32 %23;
    store f32* %1 with f32 %24;
    f32* %25 = load f32** %c01;
    f32* %26 = getelementptr &(f32* %25)[i64 1];
    f32* %27 = load f32** %a01;
    f32* %28 = getelementptr &(f32* %27)[i64 0];
    f32 %29 = load f32* %28;
    f32* %30 = load f32** %b01;
    f32* %31 = getelementptr &(f32* %30)[i64 1];
    f32 %32 = load f32* %31;
    f32 %33 = fmul f32 %29, f32 %32;
    f32* %34 = load f32** %a01;
    f32* %35 = getelementptr &(f32* %34)[i64 1];
    f32 %36 = load f32* %35;
    f32* %37 = load f32** %b11;
    f32* %38 = getelementptr &(f32* %37)[i64 1];
    f32 %39 = load f32* %38;
    f32 %40 = fmul f32 %36, f32 %39;
    f32 %41 = fadd f32 %33, f32 %40;
    f32* %42 = load f32** %a01;
    f32* %43 = getelementptr &(f32* %42)[i64 2];
    f32 %44 = load f32* %43;
    f32* %45 = load f32** %b21;
    f32* %46 = getelementptr &(f32* %45)[i64 1];
    f32 %47 = load f32* %46;
    f32 %48 = fmul f32 %44, f32 %47;
    f32 %49 = fadd f32 %41, f32 %48;
    store f32* %26 with f32 %49;
    f32* %50 = load f32** %c01;
    f32* %51 = getelementptr &(f32* %50)[i64 2];
    f32* %52 = load f32** %a01;
    f32* %53 = getelementptr &(f32* %52)[i64 0];
    f32 %54 = load f32* %53;
    f32* %55 = load f32** %b01;
    f32* %56 = getelementptr &(f32* %55)[i64 2];
    f32 %57 = load f32* %56;
    f32 %58 = fmul f32 %54, f32 %57;
    f32* %59 = load f32** %a01;
    f32* %60 = getelementptr &(f32* %59)[i64 1];
    f32 %61 = load f32* %60;
    f32* %62 = load f32** %b11;
    f32* %63 = getelementptr &(f32* %62)[i64 2];
    f32 %64 = load f32* %63;
    f32 %65 = fmul f32 %61, f32 %64;
    f32 %66 = fadd f32 %58, f32 %65;
    f32* %67 = load f32** %a01;
    f32* %68 = getelementptr &(f32* %67)[i64 2];
    f32 %69 = load f32* %68;
    f32* %70 = load f32** %b21;
    f32* %71 = getelementptr &(f32* %70)[i64 2];
    f32 %72 = load f32* %71;
    f32 %73 = fmul f32 %69, f32 %72;
    f32 %74 = fadd f32 %66, f32 %73;
    store f32* %51 with f32 %74;
    f32* %75 = load f32** %c11;
    f32* %76 = getelementptr &(f32* %75)[i64 0];
    f32* %77 = load f32** %a11;
    f32* %78 = getelementptr &(f32* %77)[i64 0];
    f32 %79 = load f32* %78;
    f32* %80 = load f32** %b01;
    f32* %81 = getelementptr &(f32* %80)[i64 0];
    f32 %82 = load f32* %81;
    f32 %83 = fmul f32 %79, f32 %82;
    f32* %84 = load f32** %a11;
    f32* %85 = getelementptr &(f32* %84)[i64 1];
    f32 %86 = load f32* %85;
    f32* %87 = load f32** %b11;
    f32* %88 = getelementptr &(f32* %87)[i64 0];
    f32 %89 = load f32* %88;
    f32 %90 = fmul f32 %86, f32 %89;
    f32 %91 = fadd f32 %83, f32 %90;
    f32* %92 = load f32** %a11;
    f32* %93 = getelementptr &(f32* %92)[i64 2];
    f32 %94 = load f32* %93;
    f32* %95 = load f32** %b21;
    f32* %96 = getelementptr &(f32* %95)[i64 0];
    f32 %97 = load f32* %96;
    f32 %98 = fmul f32 %94, f32 %97;
    f32 %99 = fadd f32 %91, f32 %98;
    store f32* %76 with f32 %99;
    f32* %100 = load f32** %c11;
    f32* %101 = getelementptr &(f32* %100)[i64 1];
    f32* %102 = load f32** %a11;
    f32* %103 = getelementptr &(f32* %102)[i64 0];
    f32 %104 = load f32* %103;
    f32* %105 = load f32** %b01;
    f32* %106 = getelementptr &(f32* %105)[i64 1];
    f32 %107 = load f32* %106;
    f32 %108 = fmul f32 %104, f32 %107;
    f32* %109 = load f32** %a11;
    f32* %110 = getelementptr &(f32* %109)[i64 1];
    f32 %111 = load f32* %110;
    f32* %112 = load f32** %b11;
    f32* %113 = getelementptr &(f32* %112)[i64 1];
    f32 %114 = load f32* %113;
    f32 %115 = fmul f32 %111, f32 %114;
    f32 %116 = fadd f32 %108, f32 %115;
    f32* %117 = load f32** %a11;
    f32* %118 = getelementptr &(f32* %117)[i64 2];
    f32 %119 = load f32* %118;
    f32* %120 = load f32** %b21;
    f32* %121 = getelementptr &(f32* %120)[i64 1];
    f32 %122 = load f32* %121;
    f32 %123 = fmul f32 %119, f32 %122;
    f32 %124 = fadd f32 %116, f32 %123;
    store f32* %101 with f32 %124;
    f32* %125 = load f32** %c11;
    f32* %126 = getelementptr &(f32* %125)[i64 2];
    f32* %127 = load f32** %a11;
    f32* %128 = getelementptr &(f32* %127)[i64 0];
    f32 %129 = load f32* %128;
    f32* %130 = load f32** %b01;
    f32* %131 = getelementptr &(f32* %130)[i64 2];
    f32 %132 = load f32* %131;
    f32 %133 = fmul f32 %129, f32 %132;
    f32* %134 = load f32** %a11;
    f32* %135 = getelementptr &(f32* %134)[i64 1];
    f32 %136 = load f32* %135;
    f32* %137 = load f32** %b11;
    f32* %138 = getelementptr &(f32* %137)[i64 2];
    f32 %139 = load f32* %138;
    f32 %140 = fmul f32 %136, f32 %139;
    f32 %141 = fadd f32 %133, f32 %140;
    f32* %142 = load f32** %a11;
    f32* %143 = getelementptr &(f32* %142)[i64 2];
    f32 %144 = load f32* %143;
    f32* %145 = load f32** %b21;
    f32* %146 = getelementptr &(f32* %145)[i64 2];
    f32 %147 = load f32* %146;
    f32 %148 = fmul f32 %144, f32 %147;
    f32 %149 = fadd f32 %141, f32 %148;
    store f32* %126 with f32 %149;
    f32* %150 = load f32** %c21;
    f32* %151 = getelementptr &(f32* %150)[i64 0];
    f32* %152 = load f32** %a21;
    f32* %153 = getelementptr &(f32* %152)[i64 0];
    f32 %154 = load f32* %153;
    f32* %155 = load f32** %b01;
    f32* %156 = getelementptr &(f32* %155)[i64 0];
    f32 %157 = load f32* %156;
    f32 %158 = fmul f32 %154, f32 %157;
    f32* %159 = load f32** %a21;
    f32* %160 = getelementptr &(f32* %159)[i64 1];
    f32 %161 = load f32* %160;
    f32* %162 = load f32** %b11;
    f32* %163 = getelementptr &(f32* %162)[i64 0];
    f32 %164 = load f32* %163;
    f32 %165 = fmul f32 %161, f32 %164;
    f32 %166 = fadd f32 %158, f32 %165;
    f32* %167 = load f32** %a21;
    f32* %168 = getelementptr &(f32* %167)[i64 2];
    f32 %169 = load f32* %168;
    f32* %170 = load f32** %b21;
    f32* %171 = getelementptr &(f32* %170)[i64 0];
    f32 %172 = load f32* %171;
    f32 %173 = fmul f32 %169, f32 %172;
    f32 %174 = fadd f32 %166, f32 %173;
    store f32* %151 with f32 %174;
    f32* %175 = load f32** %c21;
    f32* %176 = getelementptr &(f32* %175)[i64 1];
    f32* %177 = load f32** %a21;
    f32* %178 = getelementptr &(f32* %177)[i64 0];
    f32 %179 = load f32* %178;
    f32* %180 = load f32** %b01;
    f32* %181 = getelementptr &(f32* %180)[i64 1];
    f32 %182 = load f32* %181;
    f32 %183 = fmul f32 %179, f32 %182;
    f32* %184 = load f32** %a21;
    f32* %185 = getelementptr &(f32* %184)[i64 1];
    f32 %186 = load f32* %185;
    f32* %187 = load f32** %b11;
    f32* %188 = getelementptr &(f32* %187)[i64 1];
    f32 %189 = load f32* %188;
    f32 %190 = fmul f32 %186, f32 %189;
    f32 %191 = fadd f32 %183, f32 %190;
    f32* %192 = load f32** %a21;
    f32* %193 = getelementptr &(f32* %192)[i64 2];
    f32 %194 = load f32* %193;
    f32* %195 = load f32** %b21;
    f32* %196 = getelementptr &(f32* %195)[i64 1];
    f32 %197 = load f32* %196;
    f32 %198 = fmul f32 %194, f32 %197;
    f32 %199 = fadd f32 %191, f32 %198;
    store f32* %176 with f32 %199;
    f32* %200 = load f32** %c21;
    f32* %201 = getelementptr &(f32* %200)[i64 2];
    f32* %202 = load f32** %a21;
    f32* %203 = getelementptr &(f32* %202)[i64 0];
    f32 %204 = load f32* %203;
    f32* %205 = load f32** %b01;
    f32* %206 = getelementptr &(f32* %205)[i64 2];
    f32 %207 = load f32* %206;
    f32 %208 = fmul f32 %204, f32 %207;
    f32* %209 = load f32** %a21;
    f32* %210 = getelementptr &(f32* %209)[i64 1];
    f32 %211 = load f32* %210;
    f32* %212 = load f32** %b11;
    f32* %213 = getelementptr &(f32* %212)[i64 2];
    f32 %214 = load f32* %213;
    f32 %215 = fmul f32 %211, f32 %214;
    f32 %216 = fadd f32 %208, f32 %215;
    f32* %217 = load f32** %a21;
    f32* %218 = getelementptr &(f32* %217)[i64 2];
    f32 %219 = load f32* %218;
    f32* %220 = load f32** %b21;
    f32* %221 = getelementptr &(f32* %220)[i64 2];
    f32 %222 = load f32* %221;
    f32 %223 = fmul f32 %219, f32 %222;
    f32 %224 = fadd f32 %216, f32 %223;
    store f32* %201 with f32 %224;
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32* %i = alloc i32;
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    store i32* @N with i32 3;
    store i32* @M with i32 3;
    store i32* @L with i32 3;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @M;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    f32* %7 = getelementptr &([3 * f32]* %a0)[i64 0][i64 %6];
    i32 %8 = load i32* %i;
    f32 %9 = s2f i32 %8 to f32;
    store f32* %7 with f32 %9;
    i32 %10 = load i32* %i;
    i64 %11 = sext i32 %10 to i64;
    f32* %12 = getelementptr &([3 * f32]* %a1)[i64 0][i64 %11];
    i32 %13 = load i32* %i;
    f32 %14 = s2f i32 %13 to f32;
    store f32* %12 with f32 %14;
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    f32* %17 = getelementptr &([3 * f32]* %a2)[i64 0][i64 %16];
    i32 %18 = load i32* %i;
    f32 %19 = s2f i32 %18 to f32;
    store f32* %17 with f32 %19;
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    f32* %22 = getelementptr &([3 * f32]* %b0)[i64 0][i64 %21];
    i32 %23 = load i32* %i;
    f32 %24 = s2f i32 %23 to f32;
    store f32* %22 with f32 %24;
    i32 %25 = load i32* %i;
    i64 %26 = sext i32 %25 to i64;
    f32* %27 = getelementptr &([3 * f32]* %b1)[i64 0][i64 %26];
    i32 %28 = load i32* %i;
    f32 %29 = s2f i32 %28 to f32;
    store f32* %27 with f32 %29;
    i32 %30 = load i32* %i;
    i64 %31 = sext i32 %30 to i64;
    f32* %32 = getelementptr &([3 * f32]* %b2)[i64 0][i64 %31];
    i32 %33 = load i32* %i;
    f32 %34 = s2f i32 %33 to f32;
    store f32* %32 with f32 %34;
    i32 %35 = load i32* %i;
    i32 %36 = add i32 %35, i32 1;
    store i32* %i with i32 %36;
    ubr ^while.header;
^b:
    f32* %37 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %38 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %39 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %40 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %41 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %42 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %43 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %44 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %45 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    i32 %46 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*) -> i32 @mul(f32* %37, f32* %38, f32* %39, f32* %40, f32* %41, f32* %42, f32* %43, f32* %44, f32* %45);
    store i32* %i with i32 %46;
    store i32* %x with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %47 = load i32* %i;
    i32 %48 = load i32* @N;
    i1 %49 = scmp lt i32 %47, i32 %48;
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %52 = load i32* %i;
    i64 %53 = sext i32 %52 to i64;
    f32* %54 = getelementptr &([6 * f32]* %c0)[i64 0][i64 %53];
    f32 %55 = load f32* %54;
    i32 %56 = f2s f32 %55 to i32;
    store i32* %x with i32 %56;
    i32 %57 = load i32* %x;
    call (i32) -> void @putint(i32 %57);
    i32 %58 = load i32* %i;
    i32 %59 = add i32 %58, i32 1;
    store i32* %i with i32 %59;
    ubr ^while.header1;
^b1:
    store i32* %x with i32 10;
    store i32* %i with i32 0;
    i32 %60 = load i32* %x;
    call (i32) -> void @putch(i32 %60);
    ubr ^while.header2;
^while.header2:
    i32 %61 = load i32* %i;
    i32 %62 = load i32* @N;
    i1 %63 = scmp lt i32 %61, i32 %62;
    i32 %64 = zext i1 %63 to i32;
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %66 = load i32* %i;
    i64 %67 = sext i32 %66 to i64;
    f32* %68 = getelementptr &([3 * f32]* %c1)[i64 0][i64 %67];
    f32 %69 = load f32* %68;
    i32 %70 = f2s f32 %69 to i32;
    store i32* %x with i32 %70;
    i32 %71 = load i32* %x;
    call (i32) -> void @putint(i32 %71);
    i32 %72 = load i32* %i;
    i32 %73 = add i32 %72, i32 1;
    store i32* %i with i32 %73;
    ubr ^while.header2;
^b2:
    store i32* %x with i32 10;
    store i32* %i with i32 0;
    i32 %74 = load i32* %x;
    call (i32) -> void @putch(i32 %74);
    ubr ^while.header3;
^while.header3:
    i32 %75 = load i32* %i;
    i32 %76 = load i32* @N;
    i1 %77 = scmp lt i32 %75, i32 %76;
    i32 %78 = zext i1 %77 to i32;
    i1 %79 = scmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %80 = load i32* %i;
    i64 %81 = sext i32 %80 to i64;
    f32* %82 = getelementptr &([3 * f32]* %c2)[i64 0][i64 %81];
    f32 %83 = load f32* %82;
    i32 %84 = f2s f32 %83 to i32;
    store i32* %x with i32 %84;
    i32 %85 = load i32* %x;
    call (i32) -> void @putint(i32 %85);
    i32 %86 = load i32* %i;
    i32 %87 = add i32 %86, i32 1;
    store i32* %i with i32 %87;
    ubr ^while.header3;
^b3:
    store i32* %x with i32 10;
    i32 %88 = load i32* %x;
    call (i32) -> void @putch(i32 %88);
    ret i32 0;
}
