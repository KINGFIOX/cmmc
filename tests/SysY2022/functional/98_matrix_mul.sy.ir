internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %11] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i1 %3 = scmp lt i32 %0, i32 %1;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %4 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %5 = s2f i32 %0 to f32;
    store f32* %4 with f32 %5;
    f32* %6 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %6 with f32 %5;
    f32* %7 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %7 with f32 %5;
    f32* %8 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %8 with f32 %5;
    f32* %9 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %9 with f32 %5;
    f32* %10 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %10 with f32 %5;
    i32 %11 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %12 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %18 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %20 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32 %21 = load f32* %12;
    f32 %22 = load f32* %15;
    f32 %23 = fmul f32 %21, f32 %22;
    f32* %24 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    f32 %25 = load f32* %24;
    f32 %26 = load f32* %16;
    f32 %27 = fmul f32 %25, f32 %26;
    f32 %28 = fadd f32 %23, f32 %27;
    f32* %29 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    f32 %30 = load f32* %29;
    f32 %31 = load f32* %17;
    f32 %32 = fmul f32 %30, f32 %31;
    f32 %33 = fadd f32 %28, f32 %32;
    store f32* %18 with f32 %33;
    f32* %34 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    f32* %35 = getelementptr &([3 * f32]* %b0)[i64 0][i64 1];
    f32 %36 = load f32* %35;
    f32 %37 = fmul f32 %21, f32 %36;
    f32* %38 = getelementptr &([3 * f32]* %b1)[i64 0][i64 1];
    f32 %39 = load f32* %38;
    f32 %40 = fmul f32 %25, f32 %39;
    f32 %41 = fadd f32 %37, f32 %40;
    f32* %42 = getelementptr &([3 * f32]* %b2)[i64 0][i64 1];
    f32 %43 = load f32* %42;
    f32 %44 = fmul f32 %30, f32 %43;
    f32 %45 = fadd f32 %41, f32 %44;
    store f32* %34 with f32 %45;
    f32* %46 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    f32* %47 = getelementptr &([3 * f32]* %b0)[i64 0][i64 2];
    f32 %48 = load f32* %47;
    f32 %49 = fmul f32 %21, f32 %48;
    f32* %50 = getelementptr &([3 * f32]* %b1)[i64 0][i64 2];
    f32 %51 = load f32* %50;
    f32 %52 = fmul f32 %25, f32 %51;
    f32 %53 = fadd f32 %49, f32 %52;
    f32* %54 = getelementptr &([3 * f32]* %b2)[i64 0][i64 2];
    f32 %55 = load f32* %54;
    f32 %56 = fmul f32 %30, f32 %55;
    f32 %57 = fadd f32 %53, f32 %56;
    store f32* %46 with f32 %57;
    f32 %58 = load f32* %13;
    f32 %59 = fmul f32 %58, f32 %22;
    f32* %60 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    f32 %61 = load f32* %60;
    f32 %62 = fmul f32 %61, f32 %26;
    f32 %63 = fadd f32 %59, f32 %62;
    f32* %64 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    f32 %65 = load f32* %64;
    f32 %66 = fmul f32 %65, f32 %31;
    f32 %67 = fadd f32 %63, f32 %66;
    store f32* %19 with f32 %67;
    f32* %68 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32 %69 = fmul f32 %58, f32 %36;
    f32 %70 = fmul f32 %61, f32 %39;
    f32 %71 = fadd f32 %69, f32 %70;
    f32 %72 = fmul f32 %65, f32 %43;
    f32 %73 = fadd f32 %71, f32 %72;
    store f32* %68 with f32 %73;
    f32* %74 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32 %75 = fmul f32 %58, f32 %48;
    f32 %76 = fmul f32 %61, f32 %51;
    f32 %77 = fadd f32 %75, f32 %76;
    f32 %78 = fmul f32 %65, f32 %55;
    f32 %79 = fadd f32 %77, f32 %78;
    store f32* %74 with f32 %79;
    f32 %80 = load f32* %14;
    f32 %81 = fmul f32 %80, f32 %22;
    f32* %82 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    f32 %83 = load f32* %82;
    f32 %84 = fmul f32 %83, f32 %26;
    f32 %85 = fadd f32 %81, f32 %84;
    f32* %86 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    f32 %87 = load f32* %86;
    f32 %88 = fmul f32 %87, f32 %31;
    f32 %89 = fadd f32 %85, f32 %88;
    store f32* %20 with f32 %89;
    f32* %90 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32 %91 = fmul f32 %80, f32 %36;
    f32 %92 = fmul f32 %83, f32 %39;
    f32 %93 = fadd f32 %91, f32 %92;
    f32 %94 = fmul f32 %87, f32 %43;
    f32 %95 = fadd f32 %93, f32 %94;
    store f32* %90 with f32 %95;
    f32* %96 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32 %97 = fmul f32 %80, f32 %48;
    f32 %98 = fmul f32 %83, f32 %51;
    f32 %99 = fadd f32 %97, f32 %98;
    f32 %100 = fmul f32 %87, f32 %55;
    f32 %101 = fadd f32 %99, f32 %100;
    store f32* %96 with f32 %101;
    ubr ^while.header1;
^while.header1:
    i32 %102 = phi [^while.body1, i32 %108] [^b, i32 0];
    i32 %103 = phi [^while.body1, i32 %103] [^b, i32 %2];
    i1 %104 = scmp lt i32 %102, i32 %103;
    cbr i1 %104(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32* %105 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %102];
    f32 %106 = load f32* %105;
    i32 %107 = f2s f32 %106 to i32;
    call (i32) -> void @putint(i32 %107);
    i32 %108 = add i32 %102, i32 1;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header2:
    i32 %109 = phi [^while.body2, i32 %115] [^b1, i32 0];
    i32 %110 = phi [^while.body2, i32 %110] [^b1, i32 %103];
    i1 %111 = scmp lt i32 %109, i32 %110;
    cbr i1 %111(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    f32* %112 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %109];
    f32 %113 = load f32* %112;
    i32 %114 = f2s f32 %113 to i32;
    call (i32) -> void @putint(i32 %114);
    i32 %115 = add i32 %109, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %116 = phi [^while.body3, i32 %122] [^b2, i32 0];
    i32 %117 = phi [^while.body3, i32 %117] [^b2, i32 %110];
    i1 %118 = scmp lt i32 %116, i32 %117;
    cbr i1 %118(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    f32* %119 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %116];
    f32 %120 = load f32* %119;
    i32 %121 = f2s f32 %120 to i32;
    call (i32) -> void @putint(i32 %121);
    i32 %122 = add i32 %116, i32 1;
    ubr ^while.header3;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
