internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %9] [^entry, i32 0];
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %2 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %3 = s2f i32 %0 to f32;
    store f32* %2 with f32 %3;
    f32* %4 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %4 with f32 %3;
    f32* %5 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %5 with f32 %3;
    f32* %6 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %6 with f32 %3;
    f32* %7 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %7 with f32 %3;
    f32* %8 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %8 with f32 %3;
    i32 %9 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %10 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %11 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %12 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %16 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32 %19 = load f32* %10;
    f32 %20 = load f32* %13;
    f32 %21 = fmul f32 %19, f32 %20;
    f32* %22 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    f32 %23 = load f32* %22;
    f32 %24 = load f32* %14;
    f32 %25 = fmul f32 %23, f32 %24;
    f32 %26 = fadd f32 %21, f32 %25;
    f32* %27 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    f32 %28 = load f32* %27;
    f32 %29 = load f32* %15;
    f32 %30 = fmul f32 %28, f32 %29;
    f32 %31 = fadd f32 %26, f32 %30;
    store f32* %16 with f32 %31;
    f32* %32 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    f32* %33 = getelementptr &([3 * f32]* %b0)[i64 0][i64 1];
    f32 %34 = load f32* %33;
    f32 %35 = fmul f32 %19, f32 %34;
    f32* %36 = getelementptr &([3 * f32]* %b1)[i64 0][i64 1];
    f32 %37 = load f32* %36;
    f32 %38 = fmul f32 %23, f32 %37;
    f32 %39 = fadd f32 %35, f32 %38;
    f32* %40 = getelementptr &([3 * f32]* %b2)[i64 0][i64 1];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %28, f32 %41;
    f32 %43 = fadd f32 %39, f32 %42;
    store f32* %32 with f32 %43;
    f32* %44 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    f32* %45 = getelementptr &([3 * f32]* %b0)[i64 0][i64 2];
    f32 %46 = load f32* %45;
    f32 %47 = fmul f32 %19, f32 %46;
    f32* %48 = getelementptr &([3 * f32]* %b1)[i64 0][i64 2];
    f32 %49 = load f32* %48;
    f32 %50 = fmul f32 %23, f32 %49;
    f32 %51 = fadd f32 %47, f32 %50;
    f32* %52 = getelementptr &([3 * f32]* %b2)[i64 0][i64 2];
    f32 %53 = load f32* %52;
    f32 %54 = fmul f32 %28, f32 %53;
    f32 %55 = fadd f32 %51, f32 %54;
    store f32* %44 with f32 %55;
    f32 %56 = load f32* %11;
    f32 %57 = fmul f32 %56, f32 %20;
    f32* %58 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    f32 %59 = load f32* %58;
    f32 %60 = fmul f32 %59, f32 %24;
    f32 %61 = fadd f32 %57, f32 %60;
    f32* %62 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    f32 %63 = load f32* %62;
    f32 %64 = fmul f32 %63, f32 %29;
    f32 %65 = fadd f32 %61, f32 %64;
    store f32* %17 with f32 %65;
    f32* %66 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32 %67 = fmul f32 %56, f32 %34;
    f32 %68 = fmul f32 %59, f32 %37;
    f32 %69 = fadd f32 %67, f32 %68;
    f32 %70 = fmul f32 %63, f32 %41;
    f32 %71 = fadd f32 %69, f32 %70;
    store f32* %66 with f32 %71;
    f32* %72 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32 %73 = fmul f32 %56, f32 %46;
    f32 %74 = fmul f32 %59, f32 %49;
    f32 %75 = fadd f32 %73, f32 %74;
    f32 %76 = fmul f32 %63, f32 %53;
    f32 %77 = fadd f32 %75, f32 %76;
    store f32* %72 with f32 %77;
    f32 %78 = load f32* %12;
    f32 %79 = fmul f32 %78, f32 %20;
    f32* %80 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    f32 %81 = load f32* %80;
    f32 %82 = fmul f32 %81, f32 %24;
    f32 %83 = fadd f32 %79, f32 %82;
    f32* %84 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    f32 %85 = load f32* %84;
    f32 %86 = fmul f32 %85, f32 %29;
    f32 %87 = fadd f32 %83, f32 %86;
    store f32* %18 with f32 %87;
    f32* %88 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32 %89 = fmul f32 %78, f32 %34;
    f32 %90 = fmul f32 %81, f32 %37;
    f32 %91 = fadd f32 %89, f32 %90;
    f32 %92 = fmul f32 %85, f32 %41;
    f32 %93 = fadd f32 %91, f32 %92;
    store f32* %88 with f32 %93;
    f32* %94 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32 %95 = fmul f32 %78, f32 %46;
    f32 %96 = fmul f32 %81, f32 %49;
    f32 %97 = fadd f32 %95, f32 %96;
    f32 %98 = fmul f32 %85, f32 %53;
    f32 %99 = fadd f32 %97, f32 %98;
    store f32* %94 with f32 %99;
    ubr ^while.header1;
^while.header1:
    i32 %100 = phi [^while.body1, i32 %105] [^b, i32 0];
    i1 %101 = scmp lt i32 %100, i32 3;
    cbr i1 %101(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32* %102 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %100];
    f32 %103 = load f32* %102;
    i32 %104 = f2s f32 %103 to i32;
    call (i32) -> void @putint(i32 %104);
    i32 %105 = add i32 %100, i32 1;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header2:
    i32 %106 = phi [^while.body2, i32 %111] [^b1, i32 0];
    i1 %107 = scmp lt i32 %106, i32 3;
    cbr i1 %107(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    f32* %108 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %106];
    f32 %109 = load f32* %108;
    i32 %110 = f2s f32 %109 to i32;
    call (i32) -> void @putint(i32 %110);
    i32 %111 = add i32 %106, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %112 = phi [^while.body3, i32 %117] [^b2, i32 0];
    i1 %113 = scmp lt i32 %112, i32 3;
    cbr i1 %113(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    f32* %114 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %112];
    f32 %115 = load f32* %114;
    i32 %116 = f2s f32 %115 to i32;
    call (i32) -> void @putint(i32 %116);
    i32 %117 = add i32 %112, i32 1;
    ubr ^while.header3;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
