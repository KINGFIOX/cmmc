internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i32 %3 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %4 = phi [^while.body, i32 %13] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %3;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %7 = s2f i32 %0 to f32;
    store f32* %6 with f32 %7;
    f32* %8 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %8 with f32 %7;
    f32* %9 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %9 with f32 %7;
    f32* %10 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %10 with f32 %7;
    f32* %11 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %11 with f32 %7;
    f32* %12 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %12 with f32 %7;
    i32 %13 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %14 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %20 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %21 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %22 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32 %23 = load f32* %14;
    f32 %24 = load f32* %17;
    f32 %25 = fmul f32 %23, f32 %24;
    f32* %26 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    f32 %27 = load f32* %26;
    f32 %28 = load f32* %18;
    f32 %29 = fmul f32 %27, f32 %28;
    f32 %30 = fadd f32 %25, f32 %29;
    f32* %31 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    f32 %32 = load f32* %31;
    f32 %33 = load f32* %19;
    f32 %34 = fmul f32 %32, f32 %33;
    f32 %35 = fadd f32 %30, f32 %34;
    store f32* %20 with f32 %35;
    f32* %36 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    f32* %37 = getelementptr &([3 * f32]* %b0)[i64 0][i64 1];
    f32 %38 = load f32* %37;
    f32 %39 = fmul f32 %23, f32 %38;
    f32* %40 = getelementptr &([3 * f32]* %b1)[i64 0][i64 1];
    f32 %41 = load f32* %40;
    f32 %42 = fmul f32 %27, f32 %41;
    f32 %43 = fadd f32 %39, f32 %42;
    f32* %44 = getelementptr &([3 * f32]* %b2)[i64 0][i64 1];
    f32 %45 = load f32* %44;
    f32 %46 = fmul f32 %32, f32 %45;
    f32 %47 = fadd f32 %43, f32 %46;
    store f32* %36 with f32 %47;
    f32* %48 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    f32* %49 = getelementptr &([3 * f32]* %b0)[i64 0][i64 2];
    f32 %50 = load f32* %49;
    f32 %51 = fmul f32 %23, f32 %50;
    f32* %52 = getelementptr &([3 * f32]* %b1)[i64 0][i64 2];
    f32 %53 = load f32* %52;
    f32 %54 = fmul f32 %27, f32 %53;
    f32 %55 = fadd f32 %51, f32 %54;
    f32* %56 = getelementptr &([3 * f32]* %b2)[i64 0][i64 2];
    f32 %57 = load f32* %56;
    f32 %58 = fmul f32 %32, f32 %57;
    f32 %59 = fadd f32 %55, f32 %58;
    store f32* %48 with f32 %59;
    f32 %60 = load f32* %15;
    f32 %61 = fmul f32 %60, f32 %24;
    f32* %62 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    f32 %63 = load f32* %62;
    f32 %64 = fmul f32 %63, f32 %28;
    f32 %65 = fadd f32 %61, f32 %64;
    f32* %66 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    f32 %67 = load f32* %66;
    f32 %68 = fmul f32 %67, f32 %33;
    f32 %69 = fadd f32 %65, f32 %68;
    store f32* %21 with f32 %69;
    f32* %70 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32 %71 = fmul f32 %60, f32 %38;
    f32 %72 = fmul f32 %63, f32 %41;
    f32 %73 = fadd f32 %71, f32 %72;
    f32 %74 = fmul f32 %67, f32 %45;
    f32 %75 = fadd f32 %73, f32 %74;
    store f32* %70 with f32 %75;
    f32* %76 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32 %77 = fmul f32 %60, f32 %50;
    f32 %78 = fmul f32 %63, f32 %53;
    f32 %79 = fadd f32 %77, f32 %78;
    f32 %80 = fmul f32 %67, f32 %57;
    f32 %81 = fadd f32 %79, f32 %80;
    store f32* %76 with f32 %81;
    f32 %82 = load f32* %16;
    f32 %83 = fmul f32 %82, f32 %24;
    f32* %84 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    f32 %85 = load f32* %84;
    f32 %86 = fmul f32 %85, f32 %28;
    f32 %87 = fadd f32 %83, f32 %86;
    f32* %88 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    f32 %89 = load f32* %88;
    f32 %90 = fmul f32 %89, f32 %33;
    f32 %91 = fadd f32 %87, f32 %90;
    store f32* %22 with f32 %91;
    f32* %92 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32 %93 = fmul f32 %82, f32 %38;
    f32 %94 = fmul f32 %85, f32 %41;
    f32 %95 = fadd f32 %93, f32 %94;
    f32 %96 = fmul f32 %89, f32 %45;
    f32 %97 = fadd f32 %95, f32 %96;
    store f32* %92 with f32 %97;
    f32* %98 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32 %99 = fmul f32 %82, f32 %50;
    f32 %100 = fmul f32 %85, f32 %53;
    f32 %101 = fadd f32 %99, f32 %100;
    f32 %102 = fmul f32 %89, f32 %57;
    f32 %103 = fadd f32 %101, f32 %102;
    store f32* %98 with f32 %103;
    ubr ^while.header1;
^while.header1:
    i32 %104 = phi [^while.body1, i32 %111] [^b, i32 0];
    i32 %105 = phi [^while.body1, i32 %105] [^b, i32 %2];
    i32 %106 = phi [^b, i32 0] [^while.body1, i32 %111];
    i1 %107 = scmp lt i32 %106, i32 %105;
    cbr i1 %107(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32* %108 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %104];
    f32 %109 = load f32* %108;
    i32 %110 = f2s f32 %109 to i32;
    call (i32) -> void @putint(i32 %110);
    i32 %111 = add i32 %104, i32 1;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header2:
    i32 %112 = phi [^while.body2, i32 %119] [^b1, i32 0];
    i32 %113 = phi [^while.body2, i32 %113] [^b1, i32 %105];
    i32 %114 = phi [^while.body2, i32 %119] [^b1, i32 0];
    i1 %115 = scmp lt i32 %114, i32 %113;
    cbr i1 %115(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    f32* %116 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %112];
    f32 %117 = load f32* %116;
    i32 %118 = f2s f32 %117 to i32;
    call (i32) -> void @putint(i32 %118);
    i32 %119 = add i32 %112, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %120 = phi [^while.body3, i32 %127] [^b2, i32 0];
    i32 %121 = phi [^while.body3, i32 %121] [^b2, i32 %113];
    i32 %122 = phi [^while.body3, i32 %127] [^b2, i32 0];
    i1 %123 = scmp lt i32 %122, i32 %121;
    cbr i1 %123(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    f32* %124 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %120];
    f32 %125 = load f32* %124;
    i32 %126 = f2s f32 %125 to i32;
    call (i32) -> void @putint(i32 %126);
    i32 %127 = add i32 %120, i32 1;
    ubr ^while.header3;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
