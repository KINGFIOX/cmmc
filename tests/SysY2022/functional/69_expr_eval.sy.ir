internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @TOKEN_NUM { ReadOnly } = 0;
internal i32* @TOKEN_OTHER { ReadOnly } = 1;
internal i32* @last_char = 32;
internal i32* @num;
internal i32* @other;
internal i32* @cur_token;
internal func @next_char() -> i32 {
^entry:
    i32 %0 = call () -> i32 @getch();
    store i32* @last_char with i32 %0;
    i32 %1 = load i32* @last_char;
    ret i32 %1;
}
internal func @is_space(i32 %c) -> i32 {
^entry:
    i32* %c1 = alloc i32;
    store i32* %c1 with i32 %c;
    i32 %0 = load i32* %c1;
    i1 %1 = scmp eq i32 %0, i32 32;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = load i32* %c1;
    i1 %5 = scmp eq i32 %4, i32 10;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 1;
^if.else:
    ret i32 0;
^b2:
    unreachable;
}
internal func @is_num(i32 %c) -> i32 {
^entry:
    i32* %c1 = alloc i32;
    store i32* %c1 with i32 %c;
    i32 %0 = load i32* %c1;
    i1 %1 = scmp ge i32 %0, i32 48;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b, ^b1;
^b:
    i32 %4 = load i32* %c1;
    i1 %5 = scmp le i32 %4, i32 57;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 false];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 1;
^if.else:
    ret i32 0;
^b2:
    unreachable;
}
internal func @next_token() -> i32 {
^entry:
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* @last_char;
    i32 %1 = call (i32) -> i32 @is_space(i32 %0);
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = call () -> i32 @next_char();
    ubr ^while.header;
^b:
    i32 %4 = load i32* @last_char;
    i32 %5 = call (i32) -> i32 @is_num(i32 %4);
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %7 = load i32* @last_char;
    i32 %8 = sub i32 %7, i32 48;
    store i32* @num with i32 %8;
    ubr ^while.header1;
^if.else:
    i32 %9 = load i32* @last_char;
    store i32* @other with i32 %9;
    i32 %10 = call () -> i32 @next_char();
    store i32* @cur_token with i32 1;
    ubr ^b1;
^while.header1:
    i32 %11 = call () -> i32 @next_char();
    i32 %12 = call (i32) -> i32 @is_num(i32 %11);
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
^b1:
    i32 %14 = load i32* @cur_token;
    ret i32 %14;
^while.body1:
    i32 %15 = load i32* @num;
    i32 %16 = mul i32 %15, i32 10;
    i32 %17 = load i32* @last_char;
    i32 %18 = add i32 %16, i32 %17;
    i32 %19 = sub i32 %18, i32 48;
    store i32* @num with i32 %19;
    ubr ^while.header1;
^b2:
    store i32* @cur_token with i32 0;
    ubr ^b1;
}
internal func @panic() -> i32 {
^entry:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ret i32 -1;
}
internal func @get_op_prec(i32 %op) -> i32 {
^entry:
    i32* %op1 = alloc i32;
    store i32* %op1 with i32 %op;
    i32 %0 = load i32* %op1;
    i1 %1 = scmp eq i32 %0, i32 43;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
^b:
    i32 %4 = load i32* %op1;
    i1 %5 = scmp eq i32 %4, i32 45;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    ubr ^b1;
^b1:
    i1 %8 = phi [^b, i1 %7] [^entry, i1 true];
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %11 = load i32* %op1;
    i1 %12 = scmp eq i32 %11, i32 42;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b4, ^b3;
^if.then:
    ret i32 10;
^b3:
    i32 %15 = load i32* %op1;
    i1 %16 = scmp eq i32 %15, i32 47;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    ubr ^b4;
^b4:
    i1 %19 = phi [^b3, i1 %18] [^b2, i1 true];
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^b6, ^b5;
^b5:
    i32 %22 = load i32* %op1;
    i1 %23 = scmp eq i32 %22, i32 37;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    ubr ^b6;
^b6:
    i1 %26 = phi [^b5, i1 %25] [^b4, i1 true];
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then1, ^b7;
^if.then1:
    ret i32 20;
^b7:
    ret i32 0;
}
internal func @stack_push(i32* %s, i32 %v) -> void {
^entry:
    i32* %v1 = alloc i32;
    i32** %s1 = alloc i32*;
    store i32** %s1 with i32* %s;
    store i32* %v1 with i32 %v;
    i32* %0 = load i32** %s1;
    i32* %1 = getelementptr &(i32* %0)[i64 0];
    i32* %2 = load i32** %s1;
    i32* %3 = getelementptr &(i32* %2)[i64 0];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 1;
    store i32* %1 with i32 %5;
    i32* %6 = load i32** %s1;
    i32* %7 = getelementptr &(i32* %6)[i64 0];
    i32 %8 = load i32* %7;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = load i32** %s1;
    i32* %11 = getelementptr &(i32* %10)[i64 %9];
    i32 %12 = load i32* %v1;
    store i32* %11 with i32 %12;
    ret;
}
internal func @stack_pop(i32* %s) -> i32 {
^entry:
    i32* %last = alloc i32;
    i32** %s1 = alloc i32*;
    store i32** %s1 with i32* %s;
    i32* %0 = load i32** %s1;
    i32* %1 = getelementptr &(i32* %0)[i64 0];
    i32 %2 = load i32* %1;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = load i32** %s1;
    i32* %5 = getelementptr &(i32* %4)[i64 %3];
    i32 %6 = load i32* %5;
    store i32* %last with i32 %6;
    i32* %7 = load i32** %s1;
    i32* %8 = getelementptr &(i32* %7)[i64 0];
    i32* %9 = load i32** %s1;
    i32* %10 = getelementptr &(i32* %9)[i64 0];
    i32 %11 = load i32* %10;
    i32 %12 = sub i32 %11, i32 1;
    store i32* %8 with i32 %12;
    i32 %13 = load i32* %last;
    ret i32 %13;
}
internal func @stack_peek(i32* %s) -> i32 {
^entry:
    i32** %s1 = alloc i32*;
    store i32** %s1 with i32* %s;
    i32* %0 = load i32** %s1;
    i32* %1 = getelementptr &(i32* %0)[i64 0];
    i32 %2 = load i32* %1;
    i64 %3 = sext i32 %2 to i64;
    i32* %4 = load i32** %s1;
    i32* %5 = getelementptr &(i32* %4)[i64 %3];
    i32 %6 = load i32* %5;
    ret i32 %6;
}
internal func @stack_size(i32* %s) -> i32 {
^entry:
    i32** %s1 = alloc i32*;
    store i32** %s1 with i32* %s;
    i32* %0 = load i32** %s1;
    i32* %1 = getelementptr &(i32* %0)[i64 0];
    i32 %2 = load i32* %1;
    ret i32 %2;
}
internal func @eval_op(i32 %op, i32 %lhs, i32 %rhs) -> i32 {
^entry:
    i32* %rhs1 = alloc i32;
    i32* %lhs1 = alloc i32;
    i32* %op1 = alloc i32;
    store i32* %op1 with i32 %op;
    store i32* %lhs1 with i32 %lhs;
    store i32* %rhs1 with i32 %rhs;
    i32 %0 = load i32* %op1;
    i1 %1 = scmp eq i32 %0, i32 43;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    i32 %4 = load i32* %op1;
    i1 %5 = scmp eq i32 %4, i32 45;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b1;
^if.then:
    i32 %8 = load i32* %lhs1;
    i32 %9 = load i32* %rhs1;
    i32 %10 = add i32 %8, i32 %9;
    ret i32 %10;
^b1:
    i32 %11 = load i32* %op1;
    i1 %12 = scmp eq i32 %11, i32 42;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then2, ^b2;
^if.then1:
    i32 %15 = load i32* %lhs1;
    i32 %16 = load i32* %rhs1;
    i32 %17 = sub i32 %15, i32 %16;
    ret i32 %17;
^b2:
    i32 %18 = load i32* %op1;
    i1 %19 = scmp eq i32 %18, i32 47;
    i32 %20 = zext i1 %19 to i32;
    i1 %21 = scmp neq i32 %20, i32 0;
    cbr i1 %21(prob = 0.5), ^if.then3, ^b3;
^if.then2:
    i32 %22 = load i32* %lhs1;
    i32 %23 = load i32* %rhs1;
    i32 %24 = mul i32 %22, i32 %23;
    ret i32 %24;
^b3:
    i32 %25 = load i32* %op1;
    i1 %26 = scmp eq i32 %25, i32 37;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then4, ^b4;
^if.then3:
    i32 %29 = load i32* %lhs1;
    i32 %30 = load i32* %rhs1;
    i32 %31 = sdiv i32 %29, i32 %30;
    ret i32 %31;
^if.then4:
    i32 %32 = load i32* %lhs1;
    i32 %33 = load i32* %rhs1;
    i32 %34 = srem i32 %32, i32 %33;
    ret i32 %34;
^b4:
    ret i32 0;
}
internal func @eval() -> i32 {
^entry:
    i32* %lhs = alloc i32;
    i32* %rhs = alloc i32;
    i32* %cur_op = alloc i32;
    i32* %lhs1 = alloc i32;
    i32* %rhs1 = alloc i32;
    i32* %cur_op1 = alloc i32;
    i32* %op = alloc i32;
    [256 * i32]* %ops = alloc [256 * i32];
    [256 * i32]* %oprs = alloc [256 * i32];
    i32* %0 = getelementptr &([256 * i32]* %oprs)[i64 1][i64 0];
    i32* %1 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %2 = ptrcast i32* %1 to i8*;
    i8* %3 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %2, i32 0, i64 1024);
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 1][i64 0];
    i32* %5 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %6 = ptrcast i32* %5 to i8*;
    i8* %7 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %6, i32 0, i64 1024);
    i32 %8 = load i32* @cur_token;
    i1 %9 = scmp neq i32 %8, i32 0;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then, ^b;
^b:
    i32* %12 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %13 = load i32* @num;
    call (i32*, i32) -> void @stack_push(i32* %12, i32 %13);
    i32 %14 = call () -> i32 @next_token();
    ubr ^while.header;
^if.then:
    i32 %15 = call () -> i32 @panic();
    ret i32 %15;
^while.header:
    i32 %16 = load i32* @cur_token;
    i1 %17 = scmp eq i32 %16, i32 1;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %20 = call () -> i32 @next_token();
    ubr ^while.header1;
^while.body:
    i32 %21 = load i32* @other;
    store i32* %op with i32 %21;
    i32 %22 = load i32* %op;
    i32 %23 = call (i32) -> i32 @get_op_prec(i32 %22);
    i1 %24 = scmp neq i32 %23, i32 0;
    i1 %25 = xor i1 %24, i1 true;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    ubr ^b1;
^b2:
    i32 %28 = call () -> i32 @next_token();
    ubr ^while.header2;
^while.header1:
    i32* %29 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %30 = call (i32*) -> i32 @stack_size(i32* %29);
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32* %32 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %33 = call (i32*) -> i32 @stack_pop(i32* %32);
    store i32* %cur_op with i32 %33;
    i32* %34 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %35 = call (i32*) -> i32 @stack_pop(i32* %34);
    store i32* %rhs with i32 %35;
    i32* %36 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %37 = call (i32*) -> i32 @stack_pop(i32* %36);
    store i32* %lhs with i32 %37;
    i32* %38 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %39 = load i32* %cur_op;
    i32 %40 = load i32* %lhs;
    i32 %41 = load i32* %rhs;
    i32 %42 = call (i32, i32, i32) -> i32 @eval_op(i32 %39, i32 %40, i32 %41);
    call (i32*, i32) -> void @stack_push(i32* %38, i32 %42);
    ubr ^while.header1;
^while.header2:
    i32* %43 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %44 = call (i32*) -> i32 @stack_size(i32* %43);
    i1 %45 = scmp neq i32 %44, i32 0;
    cbr i1 %45(prob = 0.5), ^b4, ^b5;
^b3:
    i32* %46 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %47 = call (i32*) -> i32 @stack_peek(i32* %46);
    ret i32 %47;
^b4:
    i32* %48 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %49 = call (i32*) -> i32 @stack_peek(i32* %48);
    i32 %50 = call (i32) -> i32 @get_op_prec(i32 %49);
    i32 %51 = load i32* %op;
    i32 %52 = call (i32) -> i32 @get_op_prec(i32 %51);
    i1 %53 = scmp ge i32 %50, i32 %52;
    i32 %54 = zext i1 %53 to i32;
    i1 %55 = scmp neq i32 %54, i32 0;
    ubr ^b5;
^b5:
    i1 %56 = phi [^b4, i1 %55] [^while.header2, i1 false];
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b6;
^while.body2:
    i32* %59 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %60 = call (i32*) -> i32 @stack_pop(i32* %59);
    store i32* %cur_op1 with i32 %60;
    i32* %61 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %62 = call (i32*) -> i32 @stack_pop(i32* %61);
    store i32* %rhs1 with i32 %62;
    i32* %63 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %64 = call (i32*) -> i32 @stack_pop(i32* %63);
    store i32* %lhs1 with i32 %64;
    i32* %65 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %66 = load i32* %cur_op1;
    i32 %67 = load i32* %lhs1;
    i32 %68 = load i32* %rhs1;
    i32 %69 = call (i32, i32, i32) -> i32 @eval_op(i32 %66, i32 %67, i32 %68);
    call (i32*, i32) -> void @stack_push(i32* %65, i32 %69);
    ubr ^while.header2;
^b6:
    i32* %70 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i32 %71 = load i32* %op;
    call (i32*, i32) -> void @stack_push(i32* %70, i32 %71);
    i32 %72 = load i32* @cur_token;
    i1 %73 = scmp neq i32 %72, i32 0;
    i32 %74 = zext i1 %73 to i32;
    i1 %75 = scmp neq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then2, ^b7;
^b7:
    i32* %76 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32 %77 = load i32* @num;
    call (i32*, i32) -> void @stack_push(i32* %76, i32 %77);
    i32 %78 = call () -> i32 @next_token();
    ubr ^while.header;
^if.then2:
    i32 %79 = call () -> i32 @panic();
    ret i32 %79;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { Entry } {
^entry:
    i32* %count = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %count with i32 %0;
    i32 %1 = call () -> i32 @getch();
    i32 %2 = call () -> i32 @next_token();
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %count;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = call () -> i32 @eval();
    call (i32) -> void @putint(i32 %5);
    call (i32) -> void @putch(i32 10);
    i32 %6 = load i32* %count;
    i32 %7 = sub i32 %6, i32 1;
    store i32* %count with i32 %7;
    ubr ^while.header;
^b:
    ret i32 0;
}
