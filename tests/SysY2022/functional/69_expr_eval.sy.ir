internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32* %3 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^entry, i32 32] [^entry1, i32 %8];
    i1 %5 = scmp eq i32 %4, i32 32;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp eq i32 %4, i32 10;
    ubr ^b1;
^b1:
    i1 %7 = phi [^while.header, i1 true] [^b, i1 %6];
    cbr i1 %7(prob = 0.97), ^entry1, ^entry2;
^entry1:
    i32 %8 = call () -> i32 @getch();
    ubr ^while.header;
^entry2:
    i1 %9 = scmp gt i32 %4, i32 47;
    i1 %10 = scmp lt i32 %4, i32 58;
    i1 %11 = and i1 %9, i1 %10;
    cbr i1 %11(prob = 0.25), ^if.then, ^if.else;
^if.then:
    i32 %12 = add i32 %4, i32 -48;
    ubr ^entry3;
^if.else:
    i32 %13 = call () -> i32 @getch();
    ubr ^entry4;
^entry3:
    i32 %14 = phi [^if.then, i32 %12] [^while.body1, i32 %29];
    i32 %15 = call () -> i32 @getch();
    i1 %16 = scmp gt i32 %15, i32 47;
    cbr i1 %16(prob = 0.5), ^b2, ^b3;
^entry4:
    i32 %17 = phi [^if.else, i32 %13] [^b3, i32 %15];
    i32 %18 = phi [^if.else, i32 0] [^b3, i32 %14];
    i32 %19 = phi [^if.else, i32 1] [^b3, i32 0];
    i1 %20 = scmp neq i32 %0, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body, ^b4;
^b2:
    i1 %21 = scmp le i32 %15, i32 57;
    ubr ^b3;
^while.body:
    i32 %22 = phi [^entry4, i32 %17] [^b8, i32 %74];
    i32 %23 = phi [^entry4, i32 %18] [^b8, i32 %75];
    i32 %24 = phi [^entry4, i32 %19] [^b8, i32 %76];
    i32 %25 = phi [^entry4, i32 %0] [^b8, i32 %78];
    ubr ^b5;
^b3:
    i1 %26 = phi [^entry3, i1 false] [^b2, i1 %21];
    cbr i1 %26(prob = 0.97), ^while.body1, ^entry4;
^b4:
    ret i32 0;
^while.body1:
    i32 %27 = mul i32 %14, i32 10;
    i32 %28 = add i32 %15, i32 -48;
    i32 %29 = add i32 %28, i32 %27;
    ubr ^entry3;
^b5:
    i64 %30 = phi [^while.body, i64 0] [^b5, i64 %47];
    i32* %31 = getelementptr &(i32* %2)[i64 %30];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %31)[i64 1];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %31)[i64 2];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %31)[i64 3];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %31)[i64 4];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %31)[i64 5];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %31)[i64 6];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %31)[i64 7];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %31)[i64 8];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %31)[i64 9];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %31)[i64 10];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %31)[i64 11];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %31)[i64 12];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %31)[i64 13];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %31)[i64 14];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %31)[i64 15];
    store i32* %46 with i32 0;
    i64 %47 = add i64 %30, i64 16;
    i1 %48 = scmp lt i64 %47, i64 256;
    cbr i1 %48(prob = 0.94), ^b5, ^b6;
^b6:
    i64 %49 = phi [^b5, i64 0] [^b6, i64 %66];
    i32* %50 = getelementptr &(i32* %3)[i64 %49];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %50)[i64 1];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %50)[i64 2];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %50)[i64 3];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %50)[i64 4];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %50)[i64 5];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %50)[i64 6];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %50)[i64 7];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %50)[i64 8];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %50)[i64 9];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %50)[i64 10];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %50)[i64 11];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %50)[i64 12];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %50)[i64 13];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %50)[i64 14];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %50)[i64 15];
    store i32* %65 with i32 0;
    i64 %66 = add i64 %49, i64 16;
    i1 %67 = scmp lt i64 %66, i64 256;
    cbr i1 %67(prob = 0.94), ^b6, ^entry5;
^entry5:
    i1 %68 = scmp neq i32 %24, i32 0;
    cbr i1 %68(prob = 0.5), ^entry6, ^b7;
^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b7:
    i32 %69 = phi [^entry5, i32 %22] [^entry23, i32 %130];
    i32 %70 = phi [^entry5, i32 %23] [^entry23, i32 %131];
    i32 %71 = load i32* %2;
    i32 %72 = add i32 %71, i32 1;
    store i32* %2 with i32 %72;
    i32* %73 = getelementptr &(i32* %2)[i32 %72];
    store i32* %73 with i32 %70;
    ubr ^while.header1;
^b8:
    i32 %74 = phi [^entry6, i32 %22] [^entry20, i32 %139] [^entry24, i32 %130];
    i32 %75 = phi [^entry6, i32 %23] [^entry20, i32 %140] [^entry24, i32 %131];
    i32 %76 = phi [^entry6, i32 %24] [^entry20, i32 %141] [^entry24, i32 %132];
    i32 %77 = phi [^entry6, i32 -1] [^entry20, i32 %153] [^entry24, i32 -1];
    call (i32) -> void @putint(i32 %77);
    call (i32) -> void @putch(i32 10);
    i32 %78 = add i32 %25, i32 -1;
    i1 %79 = scmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.97), ^while.body, ^b4;
^while.header1:
    i32 %80 = phi [^b7, i32 %69] [^entry7, i32 %84];
    i1 %81 = scmp eq i32 %80, i32 32;
    cbr i1 %81(prob = 0.5), ^b10, ^b9;
^b9:
    i1 %82 = scmp eq i32 %80, i32 10;
    ubr ^b10;
^b10:
    i1 %83 = phi [^while.header1, i1 true] [^b9, i1 %82];
    cbr i1 %83(prob = 0.97), ^entry7, ^entry8;
^entry7:
    i32 %84 = call () -> i32 @getch();
    ubr ^while.header1;
^entry8:
    i1 %85 = scmp gt i32 %80, i32 47;
    i1 %86 = scmp lt i32 %80, i32 58;
    i1 %87 = and i1 %85, i1 %86;
    cbr i1 %87(prob = 0.25), ^if.then1, ^if.else1;
^if.then1:
    i32 %88 = add i32 %80, i32 -48;
    ubr ^entry9;
^if.else1:
    i32 %89 = call () -> i32 @getch();
    i1 %90 = scmp eq i32 %80, i32 43;
    cbr i1 %90(prob = 0.5), ^b11, ^b12;
^entry9:
    i32 %91 = phi [^if.then1, i32 %88] [^while.body2, i32 %106];
    i32 %92 = call () -> i32 @getch();
    i1 %93 = scmp gt i32 %92, i32 47;
    cbr i1 %93(prob = 0.5), ^b13, ^b14;
^b11:
    i32 %94 = phi [^if.else1, i32 10] [^b12, i32 10] [^b15, i32 20] [^b18, i32 20] [^b21, i32 20] [^b22, i32 0];
    i1 %95 = scmp eq i32 %94, i32 0;
    cbr i1 %95(prob = 0.5), ^entry10, ^while.header2;
^b12:
    i1 %96 = scmp eq i32 %80, i32 45;
    cbr i1 %96(prob = 0.5), ^b11, ^b15;
^b13:
    i1 %97 = scmp le i32 %92, i32 57;
    ubr ^b14;
^entry10:
    i32 %98 = phi [^b11, i32 %70] [^b14, i32 %91];
    i32 %99 = phi [^b11, i32 %89] [^b14, i32 %92];
    ubr ^while.header3;
^b14:
    i1 %100 = phi [^entry9, i1 false] [^b13, i1 %97];
    cbr i1 %100(prob = 0.97), ^while.body2, ^entry10;
^while.header2:
    i32 %101 = phi [^b11, i32 %89] [^entry11, i32 %113];
    i1 %102 = scmp eq i32 %101, i32 32;
    cbr i1 %102(prob = 0.5), ^b17, ^b16;
^b15:
    i1 %103 = scmp eq i32 %80, i32 42;
    cbr i1 %103(prob = 0.5), ^b11, ^b18;
^while.body2:
    i32 %104 = mul i32 %91, i32 10;
    i32 %105 = add i32 %92, i32 -48;
    i32 %106 = add i32 %105, i32 %104;
    ubr ^entry9;
^while.header3:
    i32 %107 = phi [^entry10, i32 %99] [^entry13, i32 %119];
    i1 %108 = scmp eq i32 %107, i32 32;
    cbr i1 %108(prob = 0.5), ^b20, ^b19;
^b16:
    i1 %109 = scmp eq i32 %101, i32 10;
    ubr ^b17;
^b17:
    i1 %110 = phi [^while.header2, i1 true] [^b16, i1 %109];
    cbr i1 %110(prob = 0.97), ^entry11, ^entry12;
^b18:
    i1 %111 = scmp eq i32 %80, i32 47;
    cbr i1 %111(prob = 0.5), ^b11, ^b21;
^b19:
    i1 %112 = scmp eq i32 %107, i32 10;
    ubr ^b20;
^entry11:
    i32 %113 = call () -> i32 @getch();
    ubr ^while.header2;
^b20:
    i1 %114 = phi [^while.header3, i1 true] [^b19, i1 %112];
    cbr i1 %114(prob = 0.97), ^entry13, ^entry14;
^entry12:
    i1 %115 = scmp gt i32 %101, i32 47;
    i1 %116 = scmp lt i32 %101, i32 58;
    i1 %117 = and i1 %115, i1 %116;
    cbr i1 %117(prob = 0.25), ^if.then2, ^if.else2;
^b21:
    i1 %118 = scmp eq i32 %80, i32 37;
    cbr i1 %118(prob = 0.5), ^b11, ^b22;
^entry13:
    i32 %119 = call () -> i32 @getch();
    ubr ^while.header3;
^if.then2:
    i32 %120 = add i32 %101, i32 -48;
    ubr ^entry15;
^entry14:
    i1 %121 = scmp gt i32 %107, i32 47;
    i1 %122 = scmp lt i32 %107, i32 58;
    i1 %123 = and i1 %121, i1 %122;
    cbr i1 %123(prob = 0.25), ^if.then3, ^if.else3;
^if.else2:
    i32 %124 = call () -> i32 @getch();
    ubr ^entry16;
^b22:
    ubr ^b11;
^if.then3:
    i32 %125 = add i32 %107, i32 -48;
    ubr ^entry17;
^if.else3:
    i32 %126 = call () -> i32 @getch();
    ubr ^entry18;
^entry15:
    i32 %127 = phi [^if.then2, i32 %120] [^while.body3, i32 %156];
    i32 %128 = call () -> i32 @getch();
    i1 %129 = scmp gt i32 %128, i32 47;
    cbr i1 %129(prob = 0.5), ^b23, ^b24;
^entry16:
    i32 %130 = phi [^if.else2, i32 %124] [^b24, i32 %128] [^b34, i32 %130];
    i32 %131 = phi [^if.else2, i32 %70] [^b24, i32 %127] [^b34, i32 %131];
    i32 %132 = phi [^if.else2, i32 1] [^b24, i32 0] [^b34, i32 %132];
    i32 %133 = load i32* %3;
    i1 %134 = scmp neq i32 %133, i32 0;
    cbr i1 %134(prob = 0.5), ^entry19, ^b25;
^b23:
    i1 %135 = scmp le i32 %128, i32 57;
    ubr ^b24;
^entry17:
    i32 %136 = phi [^if.then3, i32 %125] [^while.body4, i32 %199];
    i32 %137 = call () -> i32 @getch();
    i1 %138 = scmp gt i32 %137, i32 47;
    cbr i1 %138(prob = 0.5), ^b26, ^b28;
^entry18:
    i32 %139 = phi [^if.else3, i32 %126] [^b28, i32 %137] [^b33, i32 %139];
    i32 %140 = phi [^if.else3, i32 %98] [^b28, i32 %136] [^b33, i32 %140];
    i32 %141 = phi [^if.else3, i32 1] [^b28, i32 0] [^b33, i32 %141];
    i32 %142 = load i32* %3;
    i1 %143 = scmp neq i32 %142, i32 0;
    cbr i1 %143(prob = 0.97), ^entry21, ^entry20;
^b24:
    i1 %144 = phi [^entry15, i1 false] [^b23, i1 %135];
    cbr i1 %144(prob = 0.97), ^while.body3, ^entry16;
^entry19:
    i32 %145 = load i32* %3;
    i32* %146 = getelementptr &(i32* %3)[i32 %145];
    i32 %147 = load i32* %146;
    i1 %148 = scmp eq i32 %147, i32 43;
    cbr i1 %148(prob = 0.5), ^b27, ^b29;
^b25:
    i1 %149 = phi [^entry16, i1 false] [^b27, i1 %158];
    cbr i1 %149(prob = 0.97), ^entry22, ^entry23;
^b26:
    i1 %150 = scmp le i32 %137, i32 57;
    ubr ^b28;
^entry20:
    i32 %151 = load i32* %2;
    i32* %152 = getelementptr &(i32* %2)[i32 %151];
    i32 %153 = load i32* %152;
    ubr ^b8;
^while.body3:
    i32 %154 = mul i32 %127, i32 10;
    i32 %155 = add i32 %128, i32 -48;
    i32 %156 = add i32 %155, i32 %154;
    ubr ^entry15;
^b27:
    i32 %157 = phi [^entry19, i32 10] [^b29, i32 10] [^b31, i32 20] [^b36, i32 20] [^b39, i32 20] [^b42, i32 0];
    i1 %158 = scmp ge i32 %157, i32 %94;
    ubr ^b25;
^b28:
    i1 %159 = phi [^entry17, i1 false] [^b26, i1 %150];
    cbr i1 %159(prob = 0.97), ^while.body4, ^entry18;
^entry21:
    i32 %160 = load i32* %3;
    i32* %161 = getelementptr &(i32* %3)[i32 %160];
    i32 %162 = load i32* %161;
    i32 %163 = load i32* %3;
    i32 %164 = add i32 %163, i32 -1;
    store i32* %3 with i32 %164;
    i32 %165 = load i32* %2;
    i32* %166 = getelementptr &(i32* %2)[i32 %165];
    i32 %167 = load i32* %166;
    i32 %168 = load i32* %2;
    i32 %169 = add i32 %168, i32 -1;
    store i32* %2 with i32 %169;
    i32 %170 = load i32* %2;
    i32* %171 = getelementptr &(i32* %2)[i32 %170];
    i32 %172 = load i32* %171;
    i32 %173 = load i32* %2;
    i32 %174 = add i32 %173, i32 -1;
    store i32* %2 with i32 %174;
    i1 %175 = scmp eq i32 %162, i32 43;
    cbr i1 %175(prob = 0.5), ^if.then4, ^b30;
^entry22:
    i32 %176 = load i32* %3;
    i32* %177 = getelementptr &(i32* %3)[i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = load i32* %3;
    i32 %180 = add i32 %179, i32 -1;
    store i32* %3 with i32 %180;
    i32 %181 = load i32* %2;
    i32* %182 = getelementptr &(i32* %2)[i32 %181];
    i32 %183 = load i32* %182;
    i32 %184 = load i32* %2;
    i32 %185 = add i32 %184, i32 -1;
    store i32* %2 with i32 %185;
    i32 %186 = load i32* %2;
    i32* %187 = getelementptr &(i32* %2)[i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = load i32* %2;
    i32 %190 = add i32 %189, i32 -1;
    store i32* %2 with i32 %190;
    i1 %191 = scmp eq i32 %178, i32 43;
    cbr i1 %191(prob = 0.5), ^if.then5, ^b32;
^b29:
    i1 %192 = scmp eq i32 %147, i32 45;
    cbr i1 %192(prob = 0.5), ^b27, ^b31;
^entry23:
    i32 %193 = load i32* %3;
    i32 %194 = add i32 %193, i32 1;
    store i32* %3 with i32 %194;
    i32* %195 = getelementptr &(i32* %3)[i32 %194];
    store i32* %195 with i32 %80;
    i1 %196 = scmp neq i32 %132, i32 0;
    cbr i1 %196(prob = 0.5), ^entry24, ^b7;
^while.body4:
    i32 %197 = mul i32 %136, i32 10;
    i32 %198 = add i32 %137, i32 -48;
    i32 %199 = add i32 %198, i32 %197;
    ubr ^entry17;
^if.then4:
    i32 %200 = add i32 %167, i32 %172;
    ubr ^b33;
^if.then5:
    i32 %201 = add i32 %183, i32 %188;
    ubr ^b34;
^b30:
    i1 %202 = scmp eq i32 %162, i32 45;
    cbr i1 %202(prob = 0.5), ^if.then6, ^b35;
^entry24:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b31:
    i1 %203 = scmp eq i32 %147, i32 42;
    cbr i1 %203(prob = 0.5), ^b27, ^b36;
^b32:
    i1 %204 = scmp eq i32 %178, i32 45;
    cbr i1 %204(prob = 0.5), ^if.then7, ^b37;
^b33:
    i32 %205 = phi [^if.then4, i32 %200] [^if.then6, i32 %209] [^if.then8, i32 %218] [^if.then10, i32 %223] [^b41, i32 0] [^if.then12, i32 %227];
    i32 %206 = load i32* %2;
    i32 %207 = add i32 %206, i32 1;
    store i32* %2 with i32 %207;
    i32* %208 = getelementptr &(i32* %2)[i32 %207];
    store i32* %208 with i32 %205;
    ubr ^entry18;
^if.then6:
    i32 %209 = sub i32 %172, i32 %167;
    ubr ^b33;
^b34:
    i32 %210 = phi [^if.then5, i32 %201] [^if.then7, i32 %214] [^if.then9, i32 %219] [^if.then11, i32 %224] [^b43, i32 0] [^if.then13, i32 %228];
    i32 %211 = load i32* %2;
    i32 %212 = add i32 %211, i32 1;
    store i32* %2 with i32 %212;
    i32* %213 = getelementptr &(i32* %2)[i32 %212];
    store i32* %213 with i32 %210;
    ubr ^entry16;
^if.then7:
    i32 %214 = sub i32 %188, i32 %183;
    ubr ^b34;
^b35:
    i1 %215 = scmp eq i32 %162, i32 42;
    cbr i1 %215(prob = 0.5), ^if.then8, ^b38;
^b36:
    i1 %216 = scmp eq i32 %147, i32 47;
    cbr i1 %216(prob = 0.5), ^b27, ^b39;
^b37:
    i1 %217 = scmp eq i32 %178, i32 42;
    cbr i1 %217(prob = 0.5), ^if.then9, ^b40;
^if.then8:
    i32 %218 = mul i32 %167, i32 %172;
    ubr ^b33;
^if.then9:
    i32 %219 = mul i32 %183, i32 %188;
    ubr ^b34;
^b38:
    i1 %220 = scmp eq i32 %162, i32 47;
    cbr i1 %220(prob = 0.5), ^if.then10, ^b41;
^b39:
    i1 %221 = scmp eq i32 %147, i32 37;
    cbr i1 %221(prob = 0.5), ^b27, ^b42;
^b40:
    i1 %222 = scmp eq i32 %178, i32 47;
    cbr i1 %222(prob = 0.5), ^if.then11, ^b43;
^if.then10:
    i32 %223 = sdiv i32 %172, i32 %167;
    ubr ^b33;
^if.then11:
    i32 %224 = sdiv i32 %188, i32 %183;
    ubr ^b34;
^b41:
    i1 %225 = scmp eq i32 %162, i32 37;
    cbr i1 %225(prob = 0.5), ^if.then12, ^b33;
^b42:
    ubr ^b27;
^b43:
    i1 %226 = scmp eq i32 %178, i32 37;
    cbr i1 %226(prob = 0.5), ^if.then13, ^b34;
^if.then12:
    i32 %227 = srem i32 %172, i32 %167;
    ubr ^b33;
^if.then13:
    i32 %228 = srem i32 %188, i32 %183;
    ubr ^b34;
}
