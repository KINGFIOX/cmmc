internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    i32* %cur_token = alloc i32;
    i32* %num = alloc i32;
    i32* %last_char = alloc i32;
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %5 = ptrcast i32* %4 to i8*;
    ubr ^entry1;
^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp eq i32 %6, i32 32;
    i1 %8 = scmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.75), ^entry1, ^b;
^b:
    i1 %10 = scmp gt i32 %6, i32 47;
    i1 %11 = scmp lt i32 %6, i32 58;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.25), ^if.then, ^if.else;
^if.else:
    i32 %13 = call () -> i32 @getch();
    store i32* %last_char with i32 %13;
    store i32* %cur_token with i32 1;
    ubr ^entry2;
^if.then:
    i32 %14 = add i32 %6, i32 -48;
    store i32* %num with i32 %14;
    i32 %15 = call () -> i32 @getch();
    store i32* %last_char with i32 %15;
    i1 %16 = scmp gt i32 %15, i32 47;
    i1 %17 = scmp lt i32 %15, i32 58;
    i1 %18 = and i1 %16, i1 %17;
    cbr i1 %18(prob = 0.25), ^while.body, ^b1;
^b1:
    store i32* %cur_token with i32 0;
    ubr ^entry2;
^while.body:
    i32 %19 = phi [^if.then, i32 %15] [^while.body, i32 %24];
    i32 %20 = phi [^if.then, i32 %14] [^while.body, i32 %23];
    i32 %21 = add i32 %19, i32 -48;
    i32 %22 = mul i32 %20, i32 10;
    i32 %23 = add i32 %21, i32 %22;
    store i32* %num with i32 %23;
    i32 %24 = call () -> i32 @getch();
    store i32* %last_char with i32 %24;
    i1 %25 = scmp gt i32 %24, i32 47;
    i1 %26 = scmp lt i32 %24, i32 58;
    i1 %27 = and i1 %25, i1 %26;
    cbr i1 %27(prob = 0.25), ^while.body, ^b1;
^entry2:
    i1 %28 = scmp neq i32 %0, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %29 = phi [^entry2, i32 %0] [^b4, i32 %45];
    i8* %30 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %3, i32 0, i64 1024);
    i8* %31 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %5, i32 0, i64 1024);
    i32 %32 = load i32* %last_char;
    i32 %33 = load i32* %num;
    i32 %34 = load i32* %cur_token;
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^entry3, ^b3;
^b2:
    ret i32 0;
^entry3:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^b3:
    i32 %36 = phi [^while.body1, i32 %32] [^b13, i32 %133];
    i32 %37 = phi [^while.body1, i32 %33] [^b13, i32 %134];
    i32 %38 = load i32* %2;
    i32 %39 = add i32 %38, i32 1;
    store i32* %2 with i32 %39;
    i32* %40 = getelementptr &(i32* %2)[i32 %39];
    store i32* %40 with i32 %37;
    i1 %41 = scmp eq i32 %36, i32 32;
    i1 %42 = scmp eq i32 %36, i32 10;
    i1 %43 = or i1 %41, i1 %42;
    cbr i1 %43(prob = 0.75), ^entry4, ^b5;
^b4:
    i32 %44 = phi [^entry3, i32 -1] [^entry9, i32 %142];
    call (i32) -> void @putint(i32 %44);
    call (i32) -> void @putch(i32 10);
    i32 %45 = add i32 %29, i32 -1;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.97), ^while.body1, ^b2;
^entry4:
    i32 %47 = call () -> i32 @getch();
    i1 %48 = scmp eq i32 %47, i32 32;
    i1 %49 = scmp eq i32 %47, i32 10;
    i1 %50 = or i1 %48, i1 %49;
    cbr i1 %50(prob = 0.75), ^entry4, ^b5;
^b5:
    i32 %51 = phi [^b3, i32 %36] [^entry4, i32 %47];
    i1 %52 = scmp gt i32 %51, i32 47;
    i1 %53 = scmp lt i32 %51, i32 58;
    i1 %54 = and i1 %52, i1 %53;
    cbr i1 %54(prob = 0.25), ^if.then1, ^if.else1;
^if.then1:
    i32 %55 = add i32 %51, i32 -48;
    store i32* %num with i32 %55;
    i32 %56 = call () -> i32 @getch();
    i1 %57 = scmp gt i32 %56, i32 47;
    i1 %58 = scmp lt i32 %56, i32 58;
    i1 %59 = and i1 %57, i1 %58;
    cbr i1 %59(prob = 0.25), ^while.body2, ^entry6;
^if.else1:
    i32 %60 = call () -> i32 @getch();
    i1 %61 = scmp eq i32 %51, i32 43;
    i1 %62 = scmp eq i32 %51, i32 45;
    i1 %63 = or i1 %61, i1 %62;
    cbr i1 %63(prob = 0.75), ^entry5, ^b6;
^while.body2:
    i32 %64 = phi [^if.then1, i32 %56] [^while.body2, i32 %69];
    i32 %65 = phi [^if.then1, i32 %55] [^while.body2, i32 %68];
    i32 %66 = add i32 %64, i32 -48;
    i32 %67 = mul i32 %65, i32 10;
    i32 %68 = add i32 %66, i32 %67;
    store i32* %num with i32 %68;
    i32 %69 = call () -> i32 @getch();
    i1 %70 = scmp gt i32 %69, i32 47;
    i1 %71 = scmp lt i32 %69, i32 58;
    i1 %72 = and i1 %70, i1 %71;
    cbr i1 %72(prob = 0.25), ^while.body2, ^entry6;
^entry5:
    i1 %73 = scmp eq i32 %60, i32 32;
    i1 %74 = scmp eq i32 %60, i32 10;
    i1 %75 = or i1 %73, i1 %74;
    cbr i1 %75(prob = 0.75), ^entry7, ^b7;
^entry6:
    i32 %76 = phi [^if.then1, i32 %56] [^while.body2, i32 %69] [^b6, i32 %60];
    i1 %77 = scmp eq i32 %76, i32 32;
    i1 %78 = scmp eq i32 %76, i32 10;
    i1 %79 = or i1 %77, i1 %78;
    cbr i1 %79(prob = 0.75), ^entry8, ^b8;
^b6:
    i1 %80 = scmp eq i32 %51, i32 42;
    i1 %81 = scmp eq i32 %51, i32 47;
    i1 %82 = scmp eq i32 %51, i32 37;
    i1 %83 = or i1 %80, i1 %81;
    i1 %84 = or i1 %83, i1 %82;
    cbr i1 %84(prob = 0.88), ^entry5, ^entry6;
^entry7:
    i32 %85 = call () -> i32 @getch();
    i1 %86 = scmp eq i32 %85, i32 32;
    i1 %87 = scmp eq i32 %85, i32 10;
    i1 %88 = or i1 %86, i1 %87;
    cbr i1 %88(prob = 0.75), ^entry7, ^b7;
^entry8:
    i32 %89 = call () -> i32 @getch();
    i1 %90 = scmp eq i32 %89, i32 32;
    i1 %91 = scmp eq i32 %89, i32 10;
    i1 %92 = or i1 %90, i1 %91;
    cbr i1 %92(prob = 0.75), ^entry8, ^b8;
^b7:
    i32 %93 = phi [^entry5, i32 %60] [^entry7, i32 %85];
    i1 %94 = scmp gt i32 %93, i32 47;
    i1 %95 = scmp lt i32 %93, i32 58;
    i1 %96 = and i1 %94, i1 %95;
    cbr i1 %96(prob = 0.25), ^if.then2, ^if.else2;
^b8:
    i32 %97 = phi [^entry6, i32 %76] [^entry8, i32 %89];
    i1 %98 = scmp gt i32 %97, i32 47;
    i1 %99 = scmp lt i32 %97, i32 58;
    i1 %100 = and i1 %98, i1 %99;
    cbr i1 %100(prob = 0.25), ^if.then3, ^if.else3;
^if.else2:
    i32 %101 = call () -> i32 @getch();
    store i32* %last_char with i32 %101;
    store i32* %cur_token with i32 1;
    ubr ^b11;
^if.else3:
    i32 %102 = call () -> i32 @getch();
    store i32* %last_char with i32 %102;
    store i32* %cur_token with i32 1;
    ubr ^b12;
^if.then2:
    i32 %103 = add i32 %93, i32 -48;
    store i32* %num with i32 %103;
    i32 %104 = call () -> i32 @getch();
    store i32* %last_char with i32 %104;
    i1 %105 = scmp gt i32 %104, i32 47;
    i1 %106 = scmp lt i32 %104, i32 58;
    i1 %107 = and i1 %105, i1 %106;
    cbr i1 %107(prob = 0.25), ^while.body3, ^b9;
^if.then3:
    i32 %108 = add i32 %97, i32 -48;
    store i32* %num with i32 %108;
    i32 %109 = call () -> i32 @getch();
    store i32* %last_char with i32 %109;
    i1 %110 = scmp gt i32 %109, i32 47;
    i1 %111 = scmp lt i32 %109, i32 58;
    i1 %112 = and i1 %110, i1 %111;
    cbr i1 %112(prob = 0.25), ^while.body4, ^b10;
^b9:
    i32 %113 = phi [^if.then2, i32 %104] [^while.body3, i32 %120];
    i32 %114 = phi [^if.then2, i32 %103] [^while.body3, i32 %119];
    store i32* %cur_token with i32 0;
    ubr ^b11;
^b10:
    store i32* %cur_token with i32 0;
    ubr ^b12;
^while.body3:
    i32 %115 = phi [^if.then2, i32 %104] [^while.body3, i32 %120];
    i32 %116 = phi [^if.then2, i32 %103] [^while.body3, i32 %119];
    i32 %117 = add i32 %115, i32 -48;
    i32 %118 = mul i32 %116, i32 10;
    i32 %119 = add i32 %117, i32 %118;
    store i32* %num with i32 %119;
    i32 %120 = call () -> i32 @getch();
    store i32* %last_char with i32 %120;
    i1 %121 = scmp gt i32 %120, i32 47;
    i1 %122 = scmp lt i32 %120, i32 58;
    i1 %123 = and i1 %121, i1 %122;
    cbr i1 %123(prob = 0.25), ^while.body3, ^b9;
^while.body4:
    i32 %124 = phi [^if.then3, i32 %109] [^while.body4, i32 %129];
    i32 %125 = phi [^if.then3, i32 %108] [^while.body4, i32 %128];
    i32 %126 = add i32 %124, i32 -48;
    i32 %127 = mul i32 %125, i32 10;
    i32 %128 = add i32 %126, i32 %127;
    store i32* %num with i32 %128;
    i32 %129 = call () -> i32 @getch();
    store i32* %last_char with i32 %129;
    i1 %130 = scmp gt i32 %129, i32 47;
    i1 %131 = scmp lt i32 %129, i32 58;
    i1 %132 = and i1 %130, i1 %131;
    cbr i1 %132(prob = 0.25), ^while.body4, ^b10;
^b11:
    i32 %133 = phi [^if.else2, i32 %101] [^b9, i32 %113];
    i32 %134 = phi [^if.else2, i32 %37] [^b9, i32 %114];
    i32 %135 = phi [^if.else2, i32 1] [^b9, i32 0];
    i32 %136 = load i32* %4;
    i1 %137 = scmp neq i32 %136, i32 0;
    cbr i1 %137(prob = 0.5), ^entry10, ^b13;
^b12:
    i32 %138 = load i32* %4;
    i1 %139 = scmp neq i32 %138, i32 0;
    cbr i1 %139(prob = 0.97), ^entry11, ^entry9;
^entry9:
    i32 %140 = load i32* %2;
    i32* %141 = getelementptr &(i32* %2)[i32 %140];
    i32 %142 = load i32* %141;
    ubr ^b4;
^entry10:
    i32 %143 = load i32* %4;
    i32* %144 = getelementptr &(i32* %4)[i32 %143];
    i32 %145 = load i32* %144;
    i1 %146 = scmp eq i32 %145, i32 43;
    i1 %147 = scmp eq i32 %145, i32 45;
    i1 %148 = or i1 %146, i1 %147;
    cbr i1 %148(prob = 0.75), ^b14, ^b15;
^entry11:
    i32 %149 = load i32* %4;
    i32* %150 = getelementptr &(i32* %4)[i32 %149];
    i32 %151 = load i32* %150;
    i32 %152 = load i32* %4;
    i32 %153 = add i32 %152, i32 -1;
    store i32* %4 with i32 %153;
    i32 %154 = load i32* %2;
    i32* %155 = getelementptr &(i32* %2)[i32 %154];
    i32 %156 = load i32* %155;
    i32 %157 = load i32* %2;
    i32 %158 = add i32 %157, i32 -1;
    store i32* %2 with i32 %158;
    i32 %159 = load i32* %2;
    i32* %160 = getelementptr &(i32* %2)[i32 %159];
    i32 %161 = load i32* %160;
    i32 %162 = load i32* %2;
    i32 %163 = add i32 %162, i32 -1;
    store i32* %2 with i32 %163;
    i1 %164 = scmp eq i32 %151, i32 43;
    cbr i1 %164(prob = 0.5), ^if.then4, ^b16;
^b13:
    i32 %165 = load i32* %4;
    i32 %166 = add i32 %165, i32 1;
    store i32* %4 with i32 %166;
    i32* %167 = getelementptr &(i32* %4)[i32 %166];
    store i32* %167 with i32 %51;
    i1 %168 = scmp neq i32 %135, i32 0;
    cbr i1 %168(prob = 0.5), ^entry3, ^b3;
^if.then4:
    i32 %169 = add i32 %156, i32 %161;
    ubr ^b19;
^b14:
    i32 %170 = phi [^entry10, i32 10] [^b15, i32 20] [^b18, i32 0];
    cbr i1 %63(prob = 0.75), ^b17, ^b20;
^b15:
    i1 %171 = scmp eq i32 %145, i32 42;
    i1 %172 = scmp eq i32 %145, i32 47;
    i1 %173 = scmp eq i32 %145, i32 37;
    i1 %174 = or i1 %171, i1 %172;
    i1 %175 = or i1 %174, i1 %173;
    cbr i1 %175(prob = 0.88), ^b14, ^b18;
^b16:
    i1 %176 = scmp eq i32 %151, i32 45;
    cbr i1 %176(prob = 0.5), ^if.then5, ^b21;
^if.then5:
    i32 %177 = sub i32 %161, i32 %156;
    ubr ^b19;
^b17:
    i1 %178 = scmp gt i32 %170, i32 9;
    cbr i1 %178(prob = 0.97), ^entry12, ^b13;
^b18:
    ubr ^b14;
^b19:
    i32 %179 = phi [^if.then4, i32 %169] [^if.then5, i32 %177] [^if.then6, i32 %209] [^if.then8, i32 %213] [^b24, i32 0] [^if.then10, i32 %223];
    i32 %180 = load i32* %2;
    i32 %181 = add i32 %180, i32 1;
    store i32* %2 with i32 %181;
    i32* %182 = getelementptr &(i32* %2)[i32 %181];
    store i32* %182 with i32 %179;
    i32 %183 = load i32* %4;
    i1 %184 = scmp neq i32 %183, i32 0;
    cbr i1 %184(prob = 0.97), ^entry11, ^entry9;
^b20:
    i1 %185 = scmp eq i32 %51, i32 42;
    i1 %186 = scmp eq i32 %51, i32 47;
    i1 %187 = scmp eq i32 %51, i32 37;
    i1 %188 = or i1 %185, i1 %186;
    i1 %189 = or i1 %188, i1 %187;
    i32 %190 = select i1 %189 ? i32 19 : i32 -1;
    i1 %191 = scmp gt i32 %170, i32 %190;
    cbr i1 %191(prob = 0.97), ^entry12, ^b13;
^b21:
    i1 %192 = scmp eq i32 %151, i32 42;
    cbr i1 %192(prob = 0.5), ^if.then6, ^b22;
^entry12:
    i32 %193 = load i32* %4;
    i32* %194 = getelementptr &(i32* %4)[i32 %193];
    i32 %195 = load i32* %194;
    i32 %196 = load i32* %4;
    i32 %197 = add i32 %196, i32 -1;
    store i32* %4 with i32 %197;
    i32 %198 = load i32* %2;
    i32* %199 = getelementptr &(i32* %2)[i32 %198];
    i32 %200 = load i32* %199;
    i32 %201 = load i32* %2;
    i32 %202 = add i32 %201, i32 -1;
    store i32* %2 with i32 %202;
    i32 %203 = load i32* %2;
    i32* %204 = getelementptr &(i32* %2)[i32 %203];
    i32 %205 = load i32* %204;
    i32 %206 = load i32* %2;
    i32 %207 = add i32 %206, i32 -1;
    store i32* %2 with i32 %207;
    i1 %208 = scmp eq i32 %195, i32 43;
    cbr i1 %208(prob = 0.5), ^if.then7, ^b23;
^if.then6:
    i32 %209 = mul i32 %156, i32 %161;
    ubr ^b19;
^b22:
    i1 %210 = scmp eq i32 %151, i32 47;
    cbr i1 %210(prob = 0.5), ^if.then8, ^b24;
^if.then7:
    i32 %211 = add i32 %200, i32 %205;
    ubr ^b25;
^b23:
    i1 %212 = scmp eq i32 %195, i32 45;
    cbr i1 %212(prob = 0.5), ^if.then9, ^b26;
^if.then8:
    i32 %213 = sdiv i32 %161, i32 %156;
    ubr ^b19;
^b24:
    i1 %214 = scmp eq i32 %151, i32 37;
    cbr i1 %214(prob = 0.5), ^if.then10, ^b19;
^if.then9:
    i32 %215 = sub i32 %205, i32 %200;
    ubr ^b25;
^b25:
    i32 %216 = phi [^if.then7, i32 %211] [^if.then9, i32 %215] [^if.then11, i32 %224] [^if.then12, i32 %233] [^b30, i32 0] [^if.then13, i32 %248];
    i32 %217 = load i32* %2;
    i32 %218 = add i32 %217, i32 1;
    store i32* %2 with i32 %218;
    i32* %219 = getelementptr &(i32* %2)[i32 %218];
    store i32* %219 with i32 %216;
    i32 %220 = load i32* %4;
    i1 %221 = scmp neq i32 %220, i32 0;
    cbr i1 %221(prob = 0.5), ^entry13, ^b13;
^b26:
    i1 %222 = scmp eq i32 %195, i32 42;
    cbr i1 %222(prob = 0.5), ^if.then11, ^b27;
^if.then10:
    i32 %223 = srem i32 %161, i32 %156;
    ubr ^b19;
^if.then11:
    i32 %224 = mul i32 %200, i32 %205;
    ubr ^b25;
^entry13:
    i32 %225 = load i32* %4;
    i32* %226 = getelementptr &(i32* %4)[i32 %225];
    i32 %227 = load i32* %226;
    i1 %228 = scmp eq i32 %227, i32 43;
    i1 %229 = scmp eq i32 %227, i32 45;
    i1 %230 = or i1 %228, i1 %229;
    cbr i1 %230(prob = 0.75), ^b28, ^b29;
^b27:
    i1 %231 = scmp eq i32 %195, i32 47;
    cbr i1 %231(prob = 0.5), ^if.then12, ^b30;
^b28:
    i32 %232 = phi [^entry13, i32 10] [^b29, i32 20] [^b32, i32 0];
    cbr i1 %63(prob = 0.75), ^b31, ^b33;
^if.then12:
    i32 %233 = sdiv i32 %205, i32 %200;
    ubr ^b25;
^b29:
    i1 %234 = scmp eq i32 %227, i32 42;
    i1 %235 = scmp eq i32 %227, i32 47;
    i1 %236 = scmp eq i32 %227, i32 37;
    i1 %237 = or i1 %234, i1 %235;
    i1 %238 = or i1 %237, i1 %236;
    cbr i1 %238(prob = 0.88), ^b28, ^b32;
^b30:
    i1 %239 = scmp eq i32 %195, i32 37;
    cbr i1 %239(prob = 0.5), ^if.then13, ^b25;
^b31:
    i1 %240 = scmp gt i32 %232, i32 9;
    cbr i1 %240(prob = 0.97), ^entry12, ^b13;
^b32:
    ubr ^b28;
^b33:
    i1 %241 = scmp eq i32 %51, i32 42;
    i1 %242 = scmp eq i32 %51, i32 47;
    i1 %243 = scmp eq i32 %51, i32 37;
    i1 %244 = or i1 %241, i1 %242;
    i1 %245 = or i1 %244, i1 %243;
    i32 %246 = select i1 %245 ? i32 19 : i32 -1;
    i1 %247 = scmp gt i32 %232, i32 %246;
    cbr i1 %247(prob = 0.97), ^entry12, ^b13;
^if.then13:
    i32 %248 = srem i32 %205, i32 %200;
    ubr ^b25;
}
