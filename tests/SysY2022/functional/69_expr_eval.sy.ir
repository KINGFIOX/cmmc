internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i32* %3 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %4 = call () -> i32 @getch();
    i1 %5 = scmp eq i32 %4, i32 32;
    i1 %6 = scmp eq i32 %4, i32 10;
    i1 %7 = or i1 %5, i1 %6;
    cbr i1 %7(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %8 = add i32 %4, i32 -48;
    i1 %9 = ucmp lt i32 %8, i32 10;
    cbr i1 %9(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %10 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %11 = call () -> i32 @getch();
    i32 %12 = add i32 %11, i32 -48;
    i1 %13 = ucmp lt i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %14 = phi [^entry3, i32 %11] [^while.body, i32 %18];
    i32 %15 = phi [^entry3, i32 %8] [^while.body, i32 %22];
    ubr ^entry4;
  ^while.body:
    i32 %16 = phi [^entry3, i32 %12] [^while.body, i32 %19];
    i32 %17 = phi [^entry3, i32 %8] [^while.body, i32 %22];
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = ucmp lt i32 %19, i32 10;
    i32 %21 = mul i32 %17, i32 10;
    i32 %22 = add i32 %16, i32 %21;
    cbr i1 %20(prob = 0.97), ^while.body, ^b;
  ^entry4:
    i32 %23 = phi [^if.else, i32 %4] [^b, i32 0];
    i32 %24 = phi [^if.else, i32 %10] [^b, i32 %14];
    i32 %25 = phi [^if.else, i32 0] [^b, i32 %15];
    i32 %26 = phi [^if.else, i32 1] [^b, i32 0];
    i1 %27 = scmp neq i32 %0, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %28 = phi [^entry4, i32 %23] [^b5, i32 %81];
    i32 %29 = phi [^entry4, i32 %24] [^b5, i32 %82];
    i32 %30 = phi [^entry4, i32 %25] [^b5, i32 %83];
    i32 %31 = phi [^entry4, i32 %26] [^b5, i32 %84];
    i32 %32 = phi [^entry4, i32 %0] [^b5, i32 %86];
    ubr ^b2;
  ^b1:
    ret i32 0;
  ^b2:
    i64 %33 = phi [^while.body1, i64 0] [^b2, i64 %50];
    i32* %34 = getelementptr &(i32* %2)[i64 %33];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 0;
    i64 %50 = add i64 %33, i64 16;
    i1 %51 = scmp lt i64 %50, i64 256;
    cbr i1 %51(prob = 0.94), ^b2, ^b3;
  ^b3:
    i64 %52 = phi [^b2, i64 0] [^b3, i64 %69];
    i32* %53 = getelementptr &(i32* %3)[i64 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %53)[i64 4];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %53)[i64 5];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %53)[i64 6];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %53)[i64 7];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %53)[i64 8];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %53)[i64 9];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %53)[i64 10];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %53)[i64 11];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %53)[i64 12];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %53)[i64 13];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %53)[i64 14];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %53)[i64 15];
    store i32* %68 with i32 0;
    i64 %69 = add i64 %52, i64 16;
    i1 %70 = scmp lt i64 %69, i64 256;
    cbr i1 %70(prob = 0.94), ^b3, ^entry5;
  ^entry5:
    i1 %71 = scmp neq i32 %31, i32 0;
    cbr i1 %71(prob = 0.5), ^entry6, ^b4;
  ^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b4:
    i32 %72 = phi [^entry5, i32 %28] [^entry24, i32 %187];
    i32 %73 = phi [^entry5, i32 %29] [^entry24, i32 %188];
    i32 %74 = phi [^entry5, i32 %30] [^entry24, i32 %189];
    i32 %75 = load i32* %2;
    i32 %76 = add i32 %75, i32 1;
    store i32* %2 with i32 %76;
    i32* %77 = getelementptr &(i32* %2)[i32 %76];
    store i32* %77 with i32 %74;
    i1 %78 = scmp eq i32 %73, i32 32;
    i1 %79 = scmp eq i32 %73, i32 10;
    i1 %80 = or i1 %78, i1 %79;
    cbr i1 %80(prob = 0.97), ^entry7, ^entry8;
  ^b5:
    i32 %81 = phi [^entry6, i32 %28] [^entry18, i32 %151] [^entry25, i32 %187];
    i32 %82 = phi [^entry6, i32 %29] [^entry18, i32 %152] [^entry25, i32 %188];
    i32 %83 = phi [^entry6, i32 %30] [^entry18, i32 %153] [^entry25, i32 %189];
    i32 %84 = phi [^entry6, i32 %31] [^entry18, i32 %154] [^entry25, i32 %190];
    i32 %85 = phi [^entry6, i32 -1] [^entry18, i32 %160] [^entry25, i32 -1];
    call (i32) -> void @putint(i32 %85);
    call (i32) -> void @putch(i32 10);
    i32 %86 = add i32 %32, i32 -1;
    i1 %87 = scmp neq i32 %86, i32 0;
    cbr i1 %87(prob = 0.97), ^while.body1, ^b1;
  ^entry7:
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp eq i32 %88, i32 32;
    i1 %90 = scmp eq i32 %88, i32 10;
    i1 %91 = or i1 %89, i1 %90;
    cbr i1 %91(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %92 = phi [^b4, i32 %73] [^entry7, i32 %88];
    i32 %93 = add i32 %92, i32 -48;
    i1 %94 = ucmp lt i32 %93, i32 10;
    cbr i1 %94(prob = 0.5), ^entry9, ^if.else1;
  ^if.else1:
    i32 %95 = call () -> i32 @getch();
    ubr ^b6;
  ^entry9:
    i32 %96 = phi [^entry8, i32 %93] [^while.body2, i32 %101];
    i32 %97 = call () -> i32 @getch();
    i32 %98 = add i32 %97, i32 -48;
    i1 %99 = ucmp lt i32 %98, i32 10;
    cbr i1 %99(prob = 0.97), ^while.body2, ^b6;
  ^while.body2:
    i32 %100 = mul i32 %96, i32 10;
    i32 %101 = add i32 %98, i32 %100;
    ubr ^entry9;
  ^b6:
    i32 %102 = phi [^if.else1, i32 %74] [^entry9, i32 %96];
    i32 %103 = phi [^if.else1, i32 %95] [^entry9, i32 %97];
    i32 %104 = phi [^if.else1, i32 %92] [^entry9, i32 %72];
    i32 %105 = phi [^if.else1, i32 1] [^entry9, i32 0];
    i1 %106 = scmp eq i32 %105, i32 1;
    cbr i1 %106(prob = 0.97), ^while.body3, ^entry10;
  ^while.body3:
    i1 %107 = scmp eq i32 %104, i32 43;
    i1 %108 = scmp eq i32 %104, i32 45;
    i1 %109 = or i1 %107, i1 %108;
    cbr i1 %109(prob = 0.5), ^b8, ^b7;
  ^entry10:
    i1 %110 = scmp eq i32 %103, i32 32;
    i1 %111 = scmp eq i32 %103, i32 10;
    i1 %112 = or i1 %110, i1 %111;
    cbr i1 %112(prob = 0.97), ^entry11, ^entry12;
  ^b7:
    i1 %113 = scmp eq i32 %104, i32 42;
    i1 %114 = scmp eq i32 %104, i32 47;
    i1 %115 = or i1 %113, i1 %114;
    i1 %116 = scmp eq i32 %104, i32 37;
    i1 %117 = or i1 %115, i1 %116;
    i32 %118 = select i1 %117 ? i32 20 : i32 0;
    ubr ^b8;
  ^b8:
    i32 %119 = phi [^while.body3, i32 10] [^b7, i32 %118];
    i1 %120 = scmp eq i32 %119, i32 0;
    cbr i1 %120(prob = 0.5), ^entry10, ^entry13;
  ^entry11:
    i32 %121 = call () -> i32 @getch();
    i1 %122 = scmp eq i32 %121, i32 32;
    i1 %123 = scmp eq i32 %121, i32 10;
    i1 %124 = or i1 %122, i1 %123;
    cbr i1 %124(prob = 0.97), ^entry11, ^entry12;
  ^entry12:
    i32 %125 = phi [^entry10, i32 %103] [^entry11, i32 %121];
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = ucmp lt i32 %126, i32 10;
    cbr i1 %127(prob = 0.5), ^entry14, ^if.else2;
  ^if.else2:
    i32 %128 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry13:
    i1 %129 = scmp eq i32 %103, i32 32;
    i1 %130 = scmp eq i32 %103, i32 10;
    i1 %131 = or i1 %129, i1 %130;
    cbr i1 %131(prob = 0.97), ^entry15, ^entry16;
  ^entry14:
    i32 %132 = call () -> i32 @getch();
    i32 %133 = add i32 %132, i32 -48;
    i1 %134 = ucmp lt i32 %133, i32 10;
    cbr i1 %134(prob = 0.97), ^while.body4, ^b9;
  ^entry15:
    i32 %135 = call () -> i32 @getch();
    i1 %136 = scmp eq i32 %135, i32 32;
    i1 %137 = scmp eq i32 %135, i32 10;
    i1 %138 = or i1 %136, i1 %137;
    cbr i1 %138(prob = 0.97), ^entry15, ^entry16;
  ^b9:
    i32 %139 = phi [^entry14, i32 %132] [^while.body4, i32 %146];
    i32 %140 = phi [^entry14, i32 %126] [^while.body4, i32 %150];
    ubr ^entry17;
  ^entry16:
    i32 %141 = phi [^entry13, i32 %103] [^entry15, i32 %135];
    i32 %142 = add i32 %141, i32 -48;
    i1 %143 = ucmp lt i32 %142, i32 10;
    cbr i1 %143(prob = 0.5), ^entry19, ^if.else3;
  ^while.body4:
    i32 %144 = phi [^entry14, i32 %133] [^while.body4, i32 %147];
    i32 %145 = phi [^entry14, i32 %126] [^while.body4, i32 %150];
    i32 %146 = call () -> i32 @getch();
    i32 %147 = add i32 %146, i32 -48;
    i1 %148 = ucmp lt i32 %147, i32 10;
    i32 %149 = mul i32 %145, i32 10;
    i32 %150 = add i32 %144, i32 %149;
    cbr i1 %148(prob = 0.97), ^while.body4, ^b9;
  ^entry17:
    i32 %151 = phi [^if.else2, i32 %125] [^b9, i32 %104] [^b12, i32 %151];
    i32 %152 = phi [^if.else2, i32 %128] [^b9, i32 %139] [^b12, i32 %152];
    i32 %153 = phi [^if.else2, i32 %102] [^b9, i32 %140] [^b12, i32 %153];
    i32 %154 = phi [^if.else2, i32 1] [^b9, i32 0] [^b12, i32 %154];
    i32 %155 = load i32* %3;
    i1 %156 = scmp neq i32 %155, i32 0;
    cbr i1 %156(prob = 0.97), ^entry20, ^entry18;
  ^if.else3:
    i32 %157 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry18:
    i32 %158 = load i32* %2;
    i32* %159 = getelementptr &(i32* %2)[i32 %158];
    i32 %160 = load i32* %159;
    ubr ^b5;
  ^entry19:
    i32 %161 = call () -> i32 @getch();
    i32 %162 = add i32 %161, i32 -48;
    i1 %163 = ucmp lt i32 %162, i32 10;
    cbr i1 %163(prob = 0.97), ^while.body5, ^b10;
  ^entry20:
    i32* %164 = getelementptr &(i32* %3)[i32 %155];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %155, i32 -1;
    store i32* %3 with i32 %166;
    i32 %167 = load i32* %2;
    i32* %168 = getelementptr &(i32* %2)[i32 %167];
    i32 %169 = load i32* %168;
    i32 %170 = load i32* %2;
    i32 %171 = add i32 %170, i32 -1;
    store i32* %2 with i32 %171;
    i32* %172 = getelementptr &(i32* %2)[i32 %171];
    i32 %173 = load i32* %172;
    i32 %174 = load i32* %2;
    i32 %175 = add i32 %174, i32 -1;
    store i32* %2 with i32 %175;
    i1 %176 = scmp eq i32 %165, i32 43;
    cbr i1 %176(prob = 0.5), ^if.then, ^b11;
  ^if.then:
    i32 %177 = add i32 %169, i32 %173;
    ubr ^b12;
  ^b10:
    i32 %178 = phi [^entry19, i32 %161] [^while.body5, i32 %182];
    i32 %179 = phi [^entry19, i32 %142] [^while.body5, i32 %186];
    ubr ^entry21;
  ^while.body5:
    i32 %180 = phi [^entry19, i32 %162] [^while.body5, i32 %183];
    i32 %181 = phi [^entry19, i32 %142] [^while.body5, i32 %186];
    i32 %182 = call () -> i32 @getch();
    i32 %183 = add i32 %182, i32 -48;
    i1 %184 = ucmp lt i32 %183, i32 10;
    i32 %185 = mul i32 %181, i32 10;
    i32 %186 = add i32 %180, i32 %185;
    cbr i1 %184(prob = 0.97), ^while.body5, ^b10;
  ^entry21:
    i32 %187 = phi [^if.else3, i32 %141] [^b10, i32 %104] [^b20, i32 %187];
    i32 %188 = phi [^if.else3, i32 %157] [^b10, i32 %178] [^b20, i32 %188];
    i32 %189 = phi [^if.else3, i32 %102] [^b10, i32 %179] [^b20, i32 %189];
    i32 %190 = phi [^if.else3, i32 1] [^b10, i32 0] [^b20, i32 %190];
    i32 %191 = load i32* %3;
    i1 %192 = scmp neq i32 %191, i32 0;
    cbr i1 %192(prob = 0.5), ^entry22, ^b13;
  ^b11:
    i1 %193 = scmp eq i32 %165, i32 45;
    cbr i1 %193(prob = 0.5), ^if.then1, ^b14;
  ^b12:
    i32 %194 = phi [^if.then, i32 %177] [^if.then1, i32 %198] [^if.then2, i32 %214] [^if.then4, i32 %236] [^b19, i32 0] [^if.then6, i32 %244];
    i32 %195 = load i32* %2;
    i32 %196 = add i32 %195, i32 1;
    store i32* %2 with i32 %196;
    i32* %197 = getelementptr &(i32* %2)[i32 %196];
    store i32* %197 with i32 %194;
    ubr ^entry17;
  ^if.then1:
    i32 %198 = sub i32 %173, i32 %169;
    ubr ^b12;
  ^entry22:
    i32* %199 = getelementptr &(i32* %3)[i32 %191];
    i32 %200 = load i32* %199;
    i1 %201 = scmp eq i32 %200, i32 43;
    i1 %202 = scmp eq i32 %200, i32 45;
    i1 %203 = or i1 %201, i1 %202;
    cbr i1 %203(prob = 0.5), ^b15, ^b16;
  ^b13:
    i1 %204 = phi [^entry21, i1 false] [^b15, i1 %207];
    cbr i1 %204(prob = 0.97), ^entry23, ^entry24;
  ^b14:
    i1 %205 = scmp eq i32 %165, i32 42;
    cbr i1 %205(prob = 0.5), ^if.then2, ^b17;
  ^b15:
    i32 %206 = phi [^entry22, i32 10] [^b16, i32 %213];
    i1 %207 = scmp le i32 %119, i32 %206;
    ubr ^b13;
  ^b16:
    i1 %208 = scmp eq i32 %200, i32 42;
    i1 %209 = scmp eq i32 %200, i32 47;
    i1 %210 = or i1 %208, i1 %209;
    i1 %211 = scmp eq i32 %200, i32 37;
    i1 %212 = or i1 %210, i1 %211;
    i32 %213 = select i1 %212 ? i32 20 : i32 0;
    ubr ^b15;
  ^if.then2:
    i32 %214 = mul i32 %169, i32 %173;
    ubr ^b12;
  ^entry23:
    i32 %215 = load i32* %3;
    i32* %216 = getelementptr &(i32* %3)[i32 %215];
    i32 %217 = load i32* %216;
    i32 %218 = load i32* %3;
    i32 %219 = add i32 %218, i32 -1;
    store i32* %3 with i32 %219;
    i32 %220 = load i32* %2;
    i32* %221 = getelementptr &(i32* %2)[i32 %220];
    i32 %222 = load i32* %221;
    i32 %223 = load i32* %2;
    i32 %224 = add i32 %223, i32 -1;
    store i32* %2 with i32 %224;
    i32* %225 = getelementptr &(i32* %2)[i32 %224];
    i32 %226 = load i32* %225;
    i1 %227 = scmp eq i32 %217, i32 43;
    i32 %228 = load i32* %2;
    i32 %229 = add i32 %228, i32 -1;
    store i32* %2 with i32 %229;
    cbr i1 %227(prob = 0.5), ^if.then3, ^b18;
  ^entry24:
    i32 %230 = load i32* %3;
    i32 %231 = add i32 %230, i32 1;
    store i32* %3 with i32 %231;
    i32* %232 = getelementptr &(i32* %3)[i32 %231];
    store i32* %232 with i32 %104;
    i1 %233 = scmp neq i32 %190, i32 0;
    cbr i1 %233(prob = 0.5), ^entry25, ^b4;
  ^b17:
    i1 %234 = scmp eq i32 %165, i32 47;
    cbr i1 %234(prob = 0.5), ^if.then4, ^b19;
  ^if.then3:
    i32 %235 = add i32 %222, i32 %226;
    ubr ^b20;
  ^entry25:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then4:
    i32 %236 = sdiv i32 %173, i32 %169;
    ubr ^b12;
  ^b18:
    i1 %237 = scmp eq i32 %217, i32 45;
    cbr i1 %237(prob = 0.5), ^if.then5, ^b21;
  ^b19:
    i1 %238 = scmp eq i32 %165, i32 37;
    cbr i1 %238(prob = 0.5), ^if.then6, ^b12;
  ^b20:
    i32 %239 = phi [^if.then3, i32 %235] [^if.then5, i32 %243] [^if.then7, i32 %246] [^if.then8, i32 %248] [^b23, i32 0] [^if.then9, i32 %250];
    i32 %240 = load i32* %2;
    i32 %241 = add i32 %240, i32 1;
    store i32* %2 with i32 %241;
    i32* %242 = getelementptr &(i32* %2)[i32 %241];
    store i32* %242 with i32 %239;
    ubr ^entry21;
  ^if.then5:
    i32 %243 = sub i32 %226, i32 %222;
    ubr ^b20;
  ^if.then6:
    i32 %244 = srem i32 %173, i32 %169;
    ubr ^b12;
  ^b21:
    i1 %245 = scmp eq i32 %217, i32 42;
    cbr i1 %245(prob = 0.5), ^if.then7, ^b22;
  ^if.then7:
    i32 %246 = mul i32 %222, i32 %226;
    ubr ^b20;
  ^b22:
    i1 %247 = scmp eq i32 %217, i32 47;
    cbr i1 %247(prob = 0.5), ^if.then8, ^b23;
  ^if.then8:
    i32 %248 = sdiv i32 %226, i32 %222;
    ubr ^b20;
  ^b23:
    i1 %249 = scmp eq i32 %217, i32 37;
    cbr i1 %249(prob = 0.5), ^if.then9, ^b20;
  ^if.then9:
    i32 %250 = srem i32 %226, i32 %222;
    ubr ^b20;
}
