internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %5 = ptrcast i32* %4 to i8*;
    ubr ^entry1;
^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp eq i32 %6, i32 32;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
^b:
    i1 %8 = scmp eq i32 %6, i32 10;
    ubr ^b1;
^b1:
    i1 %9 = phi [^entry1, i1 true] [^b, i1 %8];
    cbr i1 %9(prob = 0.97), ^entry1, ^b2;
^b2:
    i1 %10 = scmp gt i32 %6, i32 47;
    i1 %11 = scmp lt i32 %6, i32 58;
    i1 %12 = and i1 %10, i1 %11;
    cbr i1 %12(prob = 0.25), ^if.then, ^if.else;
^if.else:
    i32 %13 = call () -> i32 @getch();
    ubr ^entry2;
^if.then:
    i32 %14 = add i32 %6, i32 -48;
    i32 %15 = call () -> i32 @getch();
    i1 %16 = scmp gt i32 %15, i32 47;
    i1 %17 = scmp lt i32 %15, i32 58;
    i1 %18 = and i1 %16, i1 %17;
    cbr i1 %18(prob = 0.48), ^while.body, ^b3;
^b3:
    i32 %19 = phi [^if.then, i32 %15] [^while.body, i32 %26];
    i32 %20 = phi [^if.then, i32 %14] [^while.body, i32 %25];
    ubr ^entry2;
^while.body:
    i32 %21 = phi [^if.then, i32 %14] [^while.body, i32 %25];
    i32 %22 = phi [^if.then, i32 %15] [^while.body, i32 %26];
    i32 %23 = mul i32 %21, i32 10;
    i32 %24 = add i32 %22, i32 -48;
    i32 %25 = add i32 %24, i32 %23;
    i32 %26 = call () -> i32 @getch();
    i1 %27 = scmp gt i32 %26, i32 47;
    i1 %28 = scmp lt i32 %26, i32 58;
    i1 %29 = and i1 %27, i1 %28;
    cbr i1 %29(prob = 0.48), ^while.body, ^b3;
^entry2:
    i32 %30 = phi [^if.else, i32 %13] [^b3, i32 %19];
    i32 %31 = phi [^if.else, i32 undef] [^b3, i32 %20];
    i32 %32 = phi [^if.else, i32 1] [^b3, i32 0];
    i1 %33 = scmp neq i32 %0, i32 0;
    cbr i1 %33(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %34 = phi [^entry2, i32 %30] [^b8, i32 %85];
    i32 %35 = phi [^entry2, i32 %31] [^b8, i32 %86];
    i32 %36 = phi [^entry2, i32 %32] [^b8, i32 %87];
    i32 %37 = phi [^entry2, i32 %0] [^b8, i32 %89];
    ubr ^b5;
^b4:
    ret i32 0;
^b5:
    i64 %38 = phi [^while.body1, i64 0] [^b5, i64 %55];
    i8* %39 = getelementptr &(i8* %3)[i64 %38];
    store i8* %39 with i8 0;
    i8* %40 = getelementptr &(i8* %39)[i64 1];
    store i8* %40 with i8 0;
    i8* %41 = getelementptr &(i8* %39)[i64 2];
    store i8* %41 with i8 0;
    i8* %42 = getelementptr &(i8* %39)[i64 3];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %39)[i64 4];
    store i8* %43 with i8 0;
    i8* %44 = getelementptr &(i8* %39)[i64 5];
    store i8* %44 with i8 0;
    i8* %45 = getelementptr &(i8* %39)[i64 6];
    store i8* %45 with i8 0;
    i8* %46 = getelementptr &(i8* %39)[i64 7];
    store i8* %46 with i8 0;
    i8* %47 = getelementptr &(i8* %39)[i64 8];
    store i8* %47 with i8 0;
    i8* %48 = getelementptr &(i8* %39)[i64 9];
    store i8* %48 with i8 0;
    i8* %49 = getelementptr &(i8* %39)[i64 10];
    store i8* %49 with i8 0;
    i8* %50 = getelementptr &(i8* %39)[i64 11];
    store i8* %50 with i8 0;
    i8* %51 = getelementptr &(i8* %39)[i64 12];
    store i8* %51 with i8 0;
    i8* %52 = getelementptr &(i8* %39)[i64 13];
    store i8* %52 with i8 0;
    i8* %53 = getelementptr &(i8* %39)[i64 14];
    store i8* %53 with i8 0;
    i8* %54 = getelementptr &(i8* %39)[i64 15];
    store i8* %54 with i8 0;
    i64 %55 = add i64 %38, i64 16;
    i1 %56 = scmp lt i64 %55, i64 1024;
    cbr i1 %56(prob = 0.98), ^b5, ^b6;
^b6:
    i64 %57 = phi [^b5, i64 0] [^b6, i64 %74];
    i8* %58 = getelementptr &(i8* %5)[i64 %57];
    store i8* %58 with i8 0;
    i8* %59 = getelementptr &(i8* %58)[i64 1];
    store i8* %59 with i8 0;
    i8* %60 = getelementptr &(i8* %58)[i64 2];
    store i8* %60 with i8 0;
    i8* %61 = getelementptr &(i8* %58)[i64 3];
    store i8* %61 with i8 0;
    i8* %62 = getelementptr &(i8* %58)[i64 4];
    store i8* %62 with i8 0;
    i8* %63 = getelementptr &(i8* %58)[i64 5];
    store i8* %63 with i8 0;
    i8* %64 = getelementptr &(i8* %58)[i64 6];
    store i8* %64 with i8 0;
    i8* %65 = getelementptr &(i8* %58)[i64 7];
    store i8* %65 with i8 0;
    i8* %66 = getelementptr &(i8* %58)[i64 8];
    store i8* %66 with i8 0;
    i8* %67 = getelementptr &(i8* %58)[i64 9];
    store i8* %67 with i8 0;
    i8* %68 = getelementptr &(i8* %58)[i64 10];
    store i8* %68 with i8 0;
    i8* %69 = getelementptr &(i8* %58)[i64 11];
    store i8* %69 with i8 0;
    i8* %70 = getelementptr &(i8* %58)[i64 12];
    store i8* %70 with i8 0;
    i8* %71 = getelementptr &(i8* %58)[i64 13];
    store i8* %71 with i8 0;
    i8* %72 = getelementptr &(i8* %58)[i64 14];
    store i8* %72 with i8 0;
    i8* %73 = getelementptr &(i8* %58)[i64 15];
    store i8* %73 with i8 0;
    i64 %74 = add i64 %57, i64 16;
    i1 %75 = scmp lt i64 %74, i64 1024;
    cbr i1 %75(prob = 0.98), ^b6, ^entry3;
^entry3:
    i1 %76 = scmp neq i32 %36, i32 0;
    cbr i1 %76(prob = 0.5), ^entry4, ^b7;
^entry4:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b7:
    i32 %77 = phi [^entry3, i32 %34] [^entry13, i32 %203];
    i32 %78 = phi [^entry3, i32 %35] [^entry13, i32 %204];
    i32 %79 = load i32* %2;
    i32 %80 = add i32 %79, i32 1;
    store i32* %2 with i32 %80;
    i32* %81 = getelementptr &(i32* %2)[i32 %80];
    store i32* %81 with i32 %78;
    i1 %82 = scmp eq i32 %77, i32 32;
    i1 %83 = scmp eq i32 %77, i32 10;
    i1 %84 = or i1 %82, i1 %83;
    cbr i1 %84(prob = 0.98), ^entry5, ^b9;
^b8:
    i32 %85 = phi [^entry4, i32 %34] [^entry10, i32 %167] [^entry14, i32 %203];
    i32 %86 = phi [^entry4, i32 %35] [^entry10, i32 %168] [^entry14, i32 %204];
    i32 %87 = phi [^entry4, i32 %36] [^entry10, i32 %169] [^entry14, i32 %205];
    i32 %88 = phi [^entry4, i32 -1] [^entry10, i32 %177] [^entry14, i32 -1];
    call (i32) -> void @putint(i32 %88);
    call (i32) -> void @putch(i32 10);
    i32 %89 = add i32 %37, i32 -1;
    i1 %90 = scmp neq i32 %89, i32 0;
    cbr i1 %90(prob = 0.97), ^while.body1, ^b4;
^entry5:
    i32 %91 = call () -> i32 @getch();
    i1 %92 = scmp eq i32 %91, i32 32;
    cbr i1 %92(prob = 0.5), ^b11, ^b10;
^b9:
    i32 %93 = phi [^b7, i32 %77] [^b11, i32 %91];
    i1 %94 = scmp gt i32 %93, i32 47;
    i1 %95 = scmp lt i32 %93, i32 58;
    i1 %96 = and i1 %94, i1 %95;
    cbr i1 %96(prob = 0.25), ^if.then1, ^if.else1;
^b10:
    i1 %97 = scmp eq i32 %91, i32 10;
    ubr ^b11;
^b11:
    i1 %98 = phi [^entry5, i1 true] [^b10, i1 %97];
    cbr i1 %98(prob = 0.97), ^entry5, ^b9;
^if.then1:
    i32 %99 = add i32 %93, i32 -48;
    i32 %100 = call () -> i32 @getch();
    i1 %101 = scmp gt i32 %100, i32 47;
    i1 %102 = scmp lt i32 %100, i32 58;
    i1 %103 = and i1 %101, i1 %102;
    cbr i1 %103(prob = 0.48), ^while.body2, ^entry6;
^if.else1:
    i32 %104 = call () -> i32 @getch();
    i1 %105 = scmp eq i32 %93, i32 43;
    cbr i1 %105(prob = 0.5), ^b12, ^b13;
^while.body2:
    i32 %106 = phi [^if.then1, i32 %99] [^while.body2, i32 %110];
    i32 %107 = phi [^if.then1, i32 %100] [^while.body2, i32 %111];
    i32 %108 = mul i32 %106, i32 10;
    i32 %109 = add i32 %107, i32 -48;
    i32 %110 = add i32 %109, i32 %108;
    i32 %111 = call () -> i32 @getch();
    i1 %112 = scmp gt i32 %111, i32 47;
    i1 %113 = scmp lt i32 %111, i32 58;
    i1 %114 = and i1 %112, i1 %113;
    cbr i1 %114(prob = 0.48), ^while.body2, ^entry6;
^b12:
    i32 %115 = phi [^if.else1, i32 10] [^b13, i32 10] [^b15, i32 20] [^b19, i32 20] [^b24, i32 20] [^b26, i32 0];
    i1 %116 = scmp eq i32 %115, i32 0;
    cbr i1 %116(prob = 0.5), ^entry6, ^entry8;
^entry6:
    i32 %117 = phi [^if.then1, i32 %99] [^while.body2, i32 %110] [^b12, i32 %78];
    i32 %118 = phi [^if.then1, i32 %100] [^while.body2, i32 %111] [^b12, i32 %104];
    i1 %119 = scmp eq i32 %118, i32 32;
    i1 %120 = scmp eq i32 %118, i32 10;
    i1 %121 = or i1 %119, i1 %120;
    cbr i1 %121(prob = 0.98), ^entry7, ^b14;
^b13:
    i1 %122 = scmp eq i32 %93, i32 45;
    cbr i1 %122(prob = 0.5), ^b12, ^b15;
^entry7:
    i32 %123 = call () -> i32 @getch();
    i1 %124 = scmp eq i32 %123, i32 32;
    cbr i1 %124(prob = 0.5), ^b17, ^b16;
^entry8:
    i1 %125 = scmp eq i32 %104, i32 32;
    i1 %126 = scmp eq i32 %104, i32 10;
    i1 %127 = or i1 %125, i1 %126;
    cbr i1 %127(prob = 0.98), ^entry9, ^b18;
^b14:
    i32 %128 = phi [^entry6, i32 %118] [^b17, i32 %123];
    i1 %129 = scmp gt i32 %128, i32 47;
    i1 %130 = scmp lt i32 %128, i32 58;
    i1 %131 = and i1 %129, i1 %130;
    cbr i1 %131(prob = 0.25), ^if.then2, ^if.else2;
^b15:
    i1 %132 = scmp eq i32 %93, i32 42;
    cbr i1 %132(prob = 0.5), ^b12, ^b19;
^b16:
    i1 %133 = scmp eq i32 %123, i32 10;
    ubr ^b17;
^b17:
    i1 %134 = phi [^entry7, i1 true] [^b16, i1 %133];
    cbr i1 %134(prob = 0.97), ^entry7, ^b14;
^if.else2:
    i32 %135 = call () -> i32 @getch();
    ubr ^b23;
^entry9:
    i32 %136 = call () -> i32 @getch();
    i1 %137 = scmp eq i32 %136, i32 32;
    cbr i1 %137(prob = 0.5), ^b22, ^b20;
^if.then2:
    i32 %138 = add i32 %128, i32 -48;
    i32 %139 = call () -> i32 @getch();
    i1 %140 = scmp gt i32 %139, i32 47;
    i1 %141 = scmp lt i32 %139, i32 58;
    i1 %142 = and i1 %140, i1 %141;
    cbr i1 %142(prob = 0.48), ^while.body3, ^b21;
^b18:
    i32 %143 = phi [^entry8, i32 %104] [^b22, i32 %136];
    i1 %144 = scmp gt i32 %143, i32 47;
    i1 %145 = scmp lt i32 %143, i32 58;
    i1 %146 = and i1 %144, i1 %145;
    cbr i1 %146(prob = 0.25), ^if.then3, ^if.else3;
^b19:
    i1 %147 = scmp eq i32 %93, i32 47;
    cbr i1 %147(prob = 0.5), ^b12, ^b24;
^b20:
    i1 %148 = scmp eq i32 %136, i32 10;
    ubr ^b22;
^b21:
    i32 %149 = phi [^if.then2, i32 %139] [^while.body3, i32 %158];
    i32 %150 = phi [^if.then2, i32 %138] [^while.body3, i32 %157];
    ubr ^b23;
^b22:
    i1 %151 = phi [^entry9, i1 true] [^b20, i1 %148];
    cbr i1 %151(prob = 0.97), ^entry9, ^b18;
^if.else3:
    i32 %152 = call () -> i32 @getch();
    ubr ^b27;
^while.body3:
    i32 %153 = phi [^if.then2, i32 %138] [^while.body3, i32 %157];
    i32 %154 = phi [^if.then2, i32 %139] [^while.body3, i32 %158];
    i32 %155 = mul i32 %153, i32 10;
    i32 %156 = add i32 %154, i32 -48;
    i32 %157 = add i32 %156, i32 %155;
    i32 %158 = call () -> i32 @getch();
    i1 %159 = scmp gt i32 %158, i32 47;
    i1 %160 = scmp lt i32 %158, i32 58;
    i1 %161 = and i1 %159, i1 %160;
    cbr i1 %161(prob = 0.48), ^while.body3, ^b21;
^if.then3:
    i32 %162 = add i32 %143, i32 -48;
    i32 %163 = call () -> i32 @getch();
    i1 %164 = scmp gt i32 %163, i32 47;
    i1 %165 = scmp lt i32 %163, i32 58;
    i1 %166 = and i1 %164, i1 %165;
    cbr i1 %166(prob = 0.48), ^while.body4, ^b25;
^b23:
    i32 %167 = phi [^if.else2, i32 %135] [^b21, i32 %149];
    i32 %168 = phi [^if.else2, i32 %117] [^b21, i32 %150];
    i32 %169 = phi [^if.else2, i32 1] [^b21, i32 0];
    i32 %170 = load i32* %4;
    i1 %171 = scmp neq i32 %170, i32 0;
    cbr i1 %171(prob = 0.97), ^entry11, ^entry10;
^b24:
    i1 %172 = scmp eq i32 %93, i32 37;
    cbr i1 %172(prob = 0.5), ^b12, ^b26;
^b25:
    i32 %173 = phi [^if.then3, i32 %163] [^while.body4, i32 %183];
    i32 %174 = phi [^if.then3, i32 %162] [^while.body4, i32 %182];
    ubr ^b27;
^entry10:
    i32 %175 = load i32* %2;
    i32* %176 = getelementptr &(i32* %2)[i32 %175];
    i32 %177 = load i32* %176;
    ubr ^b8;
^while.body4:
    i32 %178 = phi [^if.then3, i32 %162] [^while.body4, i32 %182];
    i32 %179 = phi [^if.then3, i32 %163] [^while.body4, i32 %183];
    i32 %180 = mul i32 %178, i32 10;
    i32 %181 = add i32 %179, i32 -48;
    i32 %182 = add i32 %181, i32 %180;
    i32 %183 = call () -> i32 @getch();
    i1 %184 = scmp gt i32 %183, i32 47;
    i1 %185 = scmp lt i32 %183, i32 58;
    i1 %186 = and i1 %184, i1 %185;
    cbr i1 %186(prob = 0.48), ^while.body4, ^b25;
^entry11:
    i32 %187 = load i32* %4;
    i32* %188 = getelementptr &(i32* %4)[i32 %187];
    i32 %189 = load i32* %188;
    i32 %190 = load i32* %4;
    i32 %191 = add i32 %190, i32 -1;
    store i32* %4 with i32 %191;
    i32 %192 = load i32* %2;
    i32* %193 = getelementptr &(i32* %2)[i32 %192];
    i32 %194 = load i32* %193;
    i32 %195 = load i32* %2;
    i32 %196 = add i32 %195, i32 -1;
    store i32* %2 with i32 %196;
    i32 %197 = load i32* %2;
    i32* %198 = getelementptr &(i32* %2)[i32 %197];
    i32 %199 = load i32* %198;
    i32 %200 = load i32* %2;
    i32 %201 = add i32 %200, i32 -1;
    store i32* %2 with i32 %201;
    i1 %202 = scmp eq i32 %189, i32 43;
    cbr i1 %202(prob = 0.5), ^if.then4, ^b28;
^b26:
    ubr ^b12;
^b27:
    i32 %203 = phi [^if.else3, i32 %152] [^b25, i32 %173];
    i32 %204 = phi [^if.else3, i32 %78] [^b25, i32 %174];
    i32 %205 = phi [^if.else3, i32 1] [^b25, i32 0];
    i32 %206 = load i32* %4;
    i1 %207 = scmp neq i32 %206, i32 0;
    cbr i1 %207(prob = 0.5), ^entry12, ^entry13;
^if.then4:
    i32 %208 = add i32 %194, i32 %199;
    ubr ^b29;
^entry12:
    i32 %209 = load i32* %4;
    i32* %210 = getelementptr &(i32* %4)[i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = scmp eq i32 %211, i32 43;
    i1 %213 = scmp eq i32 %211, i32 45;
    i1 %214 = or i1 %212, i1 %213;
    cbr i1 %214(prob = 0.75), ^b30, ^b31;
^b28:
    i1 %215 = scmp eq i32 %189, i32 45;
    cbr i1 %215(prob = 0.5), ^if.then5, ^b32;
^entry13:
    i32 %216 = load i32* %4;
    i32 %217 = add i32 %216, i32 1;
    store i32* %4 with i32 %217;
    i32* %218 = getelementptr &(i32* %4)[i32 %217];
    store i32* %218 with i32 %93;
    i1 %219 = scmp neq i32 %205, i32 0;
    cbr i1 %219(prob = 0.5), ^entry14, ^b7;
^if.then5:
    i32 %220 = sub i32 %199, i32 %194;
    ubr ^b29;
^entry14:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b29:
    i32 %221 = phi [^if.then4, i32 %208] [^if.then5, i32 %220] [^if.then6, i32 %232] [^if.then8, i32 %255] [^b37, i32 0] [^if.then10, i32 %265];
    i32 %222 = load i32* %2;
    i32 %223 = add i32 %222, i32 1;
    store i32* %2 with i32 %223;
    i32* %224 = getelementptr &(i32* %2)[i32 %223];
    store i32* %224 with i32 %221;
    i32 %225 = load i32* %4;
    i1 %226 = scmp neq i32 %225, i32 0;
    cbr i1 %226(prob = 0.97), ^entry11, ^entry10;
^b30:
    i1 %227 = scmp lt i32 %115, i32 11;
    cbr i1 %227(prob = 0.97), ^entry15, ^entry13;
^b31:
    i1 %228 = scmp eq i32 %211, i32 42;
    i1 %229 = scmp eq i32 %211, i32 47;
    i1 %230 = or i1 %228, i1 %229;
    cbr i1 %230(prob = 0.75), ^b33, ^b35;
^b32:
    i1 %231 = scmp eq i32 %189, i32 42;
    cbr i1 %231(prob = 0.5), ^if.then6, ^b34;
^if.then6:
    i32 %232 = mul i32 %194, i32 %199;
    ubr ^b29;
^entry15:
    i32 %233 = load i32* %4;
    i32* %234 = getelementptr &(i32* %4)[i32 %233];
    i32 %235 = load i32* %234;
    i32 %236 = load i32* %4;
    i32 %237 = add i32 %236, i32 -1;
    store i32* %4 with i32 %237;
    i32 %238 = load i32* %2;
    i32* %239 = getelementptr &(i32* %2)[i32 %238];
    i32 %240 = load i32* %239;
    i32 %241 = load i32* %2;
    i32 %242 = add i32 %241, i32 -1;
    store i32* %2 with i32 %242;
    i32 %243 = load i32* %2;
    i32* %244 = getelementptr &(i32* %2)[i32 %243];
    i32 %245 = load i32* %244;
    i32 %246 = load i32* %2;
    i32 %247 = add i32 %246, i32 -1;
    store i32* %2 with i32 %247;
    i1 %248 = scmp eq i32 %235, i32 43;
    cbr i1 %248(prob = 0.5), ^if.then7, ^b36;
^b33:
    i1 %249 = scmp lt i32 %115, i32 21;
    cbr i1 %249(prob = 0.97), ^entry15, ^entry13;
^b34:
    i1 %250 = scmp eq i32 %189, i32 47;
    cbr i1 %250(prob = 0.5), ^if.then8, ^b37;
^b35:
    i1 %251 = scmp eq i32 %211, i32 37;
    i32 %252 = select i1 %251 ? i32 21 : i32 1;
    i1 %253 = scmp lt i32 %115, i32 %252;
    cbr i1 %253(prob = 0.97), ^entry15, ^entry13;
^if.then7:
    i32 %254 = add i32 %240, i32 %245;
    ubr ^b38;
^if.then8:
    i32 %255 = sdiv i32 %199, i32 %194;
    ubr ^b29;
^b36:
    i1 %256 = scmp eq i32 %235, i32 45;
    cbr i1 %256(prob = 0.5), ^if.then9, ^b39;
^b37:
    i1 %257 = scmp eq i32 %189, i32 37;
    cbr i1 %257(prob = 0.5), ^if.then10, ^b29;
^if.then9:
    i32 %258 = sub i32 %245, i32 %240;
    ubr ^b38;
^b38:
    i32 %259 = phi [^if.then7, i32 %254] [^if.then9, i32 %258] [^if.then11, i32 %267] [^if.then12, i32 %269] [^b41, i32 0] [^if.then13, i32 %271];
    i32 %260 = load i32* %2;
    i32 %261 = add i32 %260, i32 1;
    store i32* %2 with i32 %261;
    i32* %262 = getelementptr &(i32* %2)[i32 %261];
    store i32* %262 with i32 %259;
    i32 %263 = load i32* %4;
    i1 %264 = scmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.5), ^entry12, ^entry13;
^if.then10:
    i32 %265 = srem i32 %199, i32 %194;
    ubr ^b29;
^b39:
    i1 %266 = scmp eq i32 %235, i32 42;
    cbr i1 %266(prob = 0.5), ^if.then11, ^b40;
^if.then11:
    i32 %267 = mul i32 %240, i32 %245;
    ubr ^b38;
^b40:
    i1 %268 = scmp eq i32 %235, i32 47;
    cbr i1 %268(prob = 0.5), ^if.then12, ^b41;
^if.then12:
    i32 %269 = sdiv i32 %245, i32 %240;
    ubr ^b38;
^b41:
    i1 %270 = scmp eq i32 %235, i32 37;
    cbr i1 %270(prob = 0.5), ^if.then13, ^b38;
^if.then13:
    i32 %271 = srem i32 %245, i32 %240;
    ubr ^b38;
}
