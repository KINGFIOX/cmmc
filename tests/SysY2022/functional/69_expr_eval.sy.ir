internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = phi [^entry2, i32 %10] [^while.body, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry4;
  ^while.body:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^entry3;
  ^entry4:
    i32 %19 = phi [^if.else, i32 %12] [^entry3, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^entry3, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^entry3, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %23 = phi [^entry4, i32 %19] [^b12, i32 %100];
    i32 %24 = phi [^entry4, i32 %20] [^b12, i32 %101];
    i32 %25 = phi [^entry4, i32 %21] [^b12, i32 %102];
    i32 %26 = phi [^entry4, i32 %0] [^b12, i32 %104];
    ubr ^super.header;
  ^b:
    ret i32 0;
  ^super.header:
    i64 %27 = phi [^while.body1, i64 0] [^b1, i64 %28];
    i64 %28 = add i64 %27, i64 4;
    i1 %29 = icmp slt i64 %28, i64 256;
    cbr i1 %29(prob = 0.89), ^b1, ^super.header1;
  ^b1:
    i32* %30 = getelementptr &(i32* %3)[i64 %27];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i64 %34 = phi [^super.header, i64 %27] [^b2, i64 %35];
    i64 %35 = add i64 %34, i64 4;
    i1 %36 = icmp slt i64 %35, i64 256;
    cbr i1 %36(prob = 0.89), ^b2, ^super.header2;
  ^b2:
    i32* %37 = getelementptr &(i32* %3)[i64 %34];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %37)[i64 1];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %37)[i64 2];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %37)[i64 3];
    store i32* %40 with i32 0;
    ubr ^super.header1;
  ^super.header2:
    i64 %41 = phi [^super.header1, i64 %34] [^b3, i64 %42];
    i64 %42 = add i64 %41, i64 4;
    i1 %43 = icmp slt i64 %42, i64 256;
    cbr i1 %43(prob = 0.89), ^b3, ^super.header3;
  ^b3:
    i32* %44 = getelementptr &(i32* %3)[i64 %41];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %44)[i64 2];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %44)[i64 3];
    store i32* %47 with i32 0;
    ubr ^super.header2;
  ^super.header3:
    i64 %48 = phi [^super.header2, i64 %41] [^b4, i64 %49];
    i64 %49 = add i64 %48, i64 4;
    i1 %50 = icmp slt i64 %49, i64 256;
    cbr i1 %50(prob = 0.89), ^b4, ^b5;
  ^b4:
    i32* %51 = getelementptr &(i32* %3)[i64 %48];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %51)[i64 1];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %51)[i64 2];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %51)[i64 3];
    store i32* %54 with i32 0;
    ubr ^super.header3;
  ^b5:
    i64 %55 = phi [^super.header3, i64 %48] [^b5, i64 %57];
    i32* %56 = getelementptr &(i32* %3)[i64 %55];
    store i32* %56 with i32 0;
    i64 %57 = add i64 %55, i64 1;
    i1 %58 = icmp slt i64 %57, i64 256;
    cbr i1 %58(prob = 0.97), ^b5, ^super.header4;
  ^super.header4:
    i64 %59 = phi [^b5, i64 0] [^b6, i64 %60];
    i64 %60 = add i64 %59, i64 4;
    i1 %61 = icmp slt i64 %60, i64 256;
    cbr i1 %61(prob = 0.89), ^b6, ^super.header5;
  ^b6:
    i32* %62 = getelementptr &(i32* %5)[i64 %59];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %62)[i64 1];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %62)[i64 2];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %62)[i64 3];
    store i32* %65 with i32 0;
    ubr ^super.header4;
  ^super.header5:
    i64 %66 = phi [^super.header4, i64 %59] [^b7, i64 %67];
    i64 %67 = add i64 %66, i64 4;
    i1 %68 = icmp slt i64 %67, i64 256;
    cbr i1 %68(prob = 0.89), ^b7, ^super.header6;
  ^b7:
    i32* %69 = getelementptr &(i32* %5)[i64 %66];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %69)[i64 1];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %69)[i64 2];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %69)[i64 3];
    store i32* %72 with i32 0;
    ubr ^super.header5;
  ^super.header6:
    i64 %73 = phi [^super.header5, i64 %66] [^b8, i64 %74];
    i64 %74 = add i64 %73, i64 4;
    i1 %75 = icmp slt i64 %74, i64 256;
    cbr i1 %75(prob = 0.89), ^b8, ^super.header7;
  ^b8:
    i32* %76 = getelementptr &(i32* %5)[i64 %73];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %76)[i64 1];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %76)[i64 2];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %76)[i64 3];
    store i32* %79 with i32 0;
    ubr ^super.header6;
  ^super.header7:
    i64 %80 = phi [^super.header6, i64 %73] [^b9, i64 %81];
    i64 %81 = add i64 %80, i64 4;
    i1 %82 = icmp slt i64 %81, i64 256;
    cbr i1 %82(prob = 0.89), ^b9, ^b10;
  ^b9:
    i32* %83 = getelementptr &(i32* %5)[i64 %80];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %83)[i64 1];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %83)[i64 2];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %83)[i64 3];
    store i32* %86 with i32 0;
    ubr ^super.header7;
  ^b10:
    i64 %87 = phi [^super.header7, i64 %80] [^b10, i64 %89];
    i32* %88 = getelementptr &(i32* %5)[i64 %87];
    store i32* %88 with i32 0;
    i64 %89 = add i64 %87, i64 1;
    i1 %90 = icmp slt i64 %89, i64 256;
    cbr i1 %90(prob = 0.97), ^b10, ^entry5;
  ^entry5:
    i1 %91 = icmp neq i32 %25, i32 0;
    cbr i1 %91(prob = 0.5), ^entry6, ^b11;
  ^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b12;
  ^b11:
    i32 %92 = phi [^entry5, i32 %23] [^entry23, i32 %186];
    i32 %93 = phi [^entry5, i32 %24] [^entry23, i32 %187];
    i32 %94 = load i32* %3;
    i32 %95 = add i32 %94, i32 1;
    store i32* %3 with i32 %95;
    i32* %96 = getelementptr &(i32* %3)[i32 %95];
    store i32* %96 with i32 %93;
    i1 %97 = icmp eq i32 %92, i32 32;
    i1 %98 = icmp eq i32 %92, i32 10;
    i1 %99 = or i1 %97, i1 %98;
    cbr i1 %99(prob = 0.97), ^entry7, ^entry8;
  ^b12:
    i32 %100 = phi [^entry6, i32 %23] [^entry19, i32 %161] [^entry24, i32 %186];
    i32 %101 = phi [^entry6, i32 %24] [^entry19, i32 %162] [^entry24, i32 %187];
    i32 %102 = phi [^entry6, i32 %25] [^entry19, i32 %163] [^entry24, i32 %188];
    i32 %103 = phi [^entry6, i32 -1] [^entry19, i32 %174] [^entry24, i32 -1];
    call (i32) -> void @putint(i32 %103);
    call (i32) -> void @putch(i32 10);
    i32 %104 = add i32 %26, i32 -1;
    i1 %105 = icmp neq i32 %104, i32 0;
    cbr i1 %105(prob = 0.97), ^while.body1, ^b;
  ^entry7:
    i32 %106 = call () -> i32 @getch();
    i1 %107 = icmp eq i32 %106, i32 32;
    i1 %108 = icmp eq i32 %106, i32 10;
    i1 %109 = or i1 %107, i1 %108;
    cbr i1 %109(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %110 = phi [^b11, i32 %92] [^entry7, i32 %106];
    i32 %111 = add i32 %110, i32 -48;
    i1 %112 = icmp ult i32 %111, i32 10;
    cbr i1 %112(prob = 0.5), ^entry9, ^if.else1;
  ^entry9:
    i32 %113 = phi [^entry8, i32 %111] [^while.body2, i32 %122];
    i32 %114 = call () -> i32 @getch();
    i32 %115 = add i32 %114, i32 -48;
    i1 %116 = icmp ult i32 %115, i32 10;
    cbr i1 %116(prob = 0.97), ^while.body2, ^entry10;
  ^if.else1:
    i32 %117 = call () -> i32 @getch();
    i1 %118 = icmp eq i32 %110, i32 43;
    i1 %119 = icmp eq i32 %110, i32 45;
    i1 %120 = or i1 %118, i1 %119;
    cbr i1 %120(prob = 0.5), ^b14, ^b13;
  ^while.body2:
    i32 %121 = mul i32 %113, i32 10;
    i32 %122 = add i32 %115, i32 %121;
    ubr ^entry9;
  ^b13:
    i1 %123 = icmp eq i32 %110, i32 42;
    i1 %124 = icmp eq i32 %110, i32 47;
    i1 %125 = or i1 %123, i1 %124;
    i1 %126 = icmp eq i32 %110, i32 37;
    i1 %127 = or i1 %125, i1 %126;
    i32 %128 = select i1 %127 ? i32 20 : i32 0;
    ubr ^b14;
  ^b14:
    i32 %129 = phi [^if.else1, i32 10] [^b13, i32 %128];
    i1 %130 = icmp eq i32 %129, i32 0;
    cbr i1 %130(prob = 0.5), ^entry10, ^entry12;
  ^entry10:
    i32 %131 = phi [^entry9, i32 %113] [^b14, i32 %93];
    i32 %132 = phi [^entry9, i32 %114] [^b14, i32 %117];
    i1 %133 = icmp eq i32 %132, i32 32;
    i1 %134 = icmp eq i32 %132, i32 10;
    i1 %135 = or i1 %133, i1 %134;
    cbr i1 %135(prob = 0.97), ^entry11, ^entry13;
  ^entry11:
    i32 %136 = call () -> i32 @getch();
    i1 %137 = icmp eq i32 %136, i32 32;
    i1 %138 = icmp eq i32 %136, i32 10;
    i1 %139 = or i1 %137, i1 %138;
    cbr i1 %139(prob = 0.97), ^entry11, ^entry13;
  ^entry12:
    i1 %140 = icmp eq i32 %117, i32 32;
    i1 %141 = icmp eq i32 %117, i32 10;
    i1 %142 = or i1 %140, i1 %141;
    cbr i1 %142(prob = 0.97), ^entry14, ^entry16;
  ^entry13:
    i32 %143 = phi [^entry10, i32 %132] [^entry11, i32 %136];
    i32 %144 = add i32 %143, i32 -48;
    i1 %145 = icmp ult i32 %144, i32 10;
    cbr i1 %145(prob = 0.5), ^entry15, ^if.else2;
  ^if.else2:
    i32 %146 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry14:
    i32 %147 = call () -> i32 @getch();
    i1 %148 = icmp eq i32 %147, i32 32;
    i1 %149 = icmp eq i32 %147, i32 10;
    i1 %150 = or i1 %148, i1 %149;
    cbr i1 %150(prob = 0.97), ^entry14, ^entry16;
  ^entry15:
    i32 %151 = phi [^entry13, i32 %144] [^while.body3, i32 %159];
    i32 %152 = call () -> i32 @getch();
    i32 %153 = add i32 %152, i32 -48;
    i1 %154 = icmp ult i32 %153, i32 10;
    cbr i1 %154(prob = 0.97), ^while.body3, ^entry17;
  ^entry16:
    i32 %155 = phi [^entry12, i32 %117] [^entry14, i32 %147];
    i32 %156 = add i32 %155, i32 -48;
    i1 %157 = icmp ult i32 %156, i32 10;
    cbr i1 %157(prob = 0.5), ^entry18, ^if.else3;
  ^while.body3:
    i32 %158 = mul i32 %151, i32 10;
    i32 %159 = add i32 %153, i32 %158;
    ubr ^entry15;
  ^if.else3:
    i32 %160 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry17:
    i32 %161 = phi [^if.else2, i32 %146] [^entry15, i32 %152] [^b16, i32 %161];
    i32 %162 = phi [^if.else2, i32 %131] [^entry15, i32 %151] [^b16, i32 %162];
    i32 %163 = phi [^if.else2, i32 1] [^entry15, i32 0] [^b16, i32 %163];
    i32 %164 = load i32* %5;
    i1 %165 = icmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.97), ^entry20, ^entry19;
  ^entry18:
    i32 %166 = phi [^entry16, i32 %156] [^while.body4, i32 %171];
    i32 %167 = call () -> i32 @getch();
    i32 %168 = add i32 %167, i32 -48;
    i1 %169 = icmp ult i32 %168, i32 10;
    cbr i1 %169(prob = 0.97), ^while.body4, ^entry21;
  ^while.body4:
    i32 %170 = mul i32 %166, i32 10;
    i32 %171 = add i32 %168, i32 %170;
    ubr ^entry18;
  ^entry19:
    i32 %172 = load i32* %3;
    i32* %173 = getelementptr &(i32* %3)[i32 %172];
    i32 %174 = load i32* %173;
    ubr ^b12;
  ^entry20:
    i32* %175 = getelementptr &(i32* %5)[i32 %164];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %164, i32 -1;
    store i32* %5 with i32 %177;
    i32 %178 = load i32* %3;
    i32* %179 = getelementptr &(i32* %3)[i32 %178];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %178, i32 -1;
    store i32* %3 with i32 %181;
    i32* %182 = getelementptr &(i32* %179)[i64 -1];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %178, i32 -2;
    store i32* %3 with i32 %184;
    i1 %185 = icmp eq i32 %176, i32 43;
    cbr i1 %185(prob = 0.5), ^if.then, ^b15;
  ^entry21:
    i32 %186 = phi [^if.else3, i32 %160] [^entry18, i32 %167] [^b23, i32 %186];
    i32 %187 = phi [^if.else3, i32 %93] [^entry18, i32 %166] [^b23, i32 %187];
    i32 %188 = phi [^if.else3, i32 1] [^entry18, i32 0] [^b23, i32 %188];
    i32 %189 = load i32* %5;
    i1 %190 = icmp neq i32 %189, i32 0;
    cbr i1 %190(prob = 0.5), ^entry22, ^entry23;
  ^if.then:
    i32 %191 = add i32 %180, i32 %183;
    ubr ^b16;
  ^entry22:
    i32* %192 = getelementptr &(i32* %5)[i32 %189];
    i32 %193 = load i32* %192;
    i1 %194 = icmp eq i32 %193, i32 43;
    i1 %195 = icmp eq i32 %193, i32 45;
    i1 %196 = or i1 %194, i1 %195;
    cbr i1 %196(prob = 0.5), ^b17, ^b18;
  ^b15:
    i1 %197 = icmp eq i32 %176, i32 45;
    cbr i1 %197(prob = 0.5), ^if.then1, ^b19;
  ^entry23:
    i32 %198 = add i32 %189, i32 1;
    store i32* %5 with i32 %198;
    i32* %199 = getelementptr &(i32* %5)[i32 %198];
    store i32* %199 with i32 %110;
    i1 %200 = icmp neq i32 %188, i32 0;
    cbr i1 %200(prob = 0.5), ^entry24, ^b11;
  ^b16:
    i32 %201 = phi [^if.then, i32 %191] [^if.then1, i32 %205] [^if.then2, i32 %215] [^if.then4, i32 %226] [^b22, i32 0] [^if.then6, i32 %233];
    i32 %202 = load i32* %3;
    i32 %203 = add i32 %202, i32 1;
    store i32* %3 with i32 %203;
    i32* %204 = getelementptr &(i32* %3)[i32 %203];
    store i32* %204 with i32 %201;
    ubr ^entry17;
  ^if.then1:
    i32 %205 = sub i32 %183, i32 %180;
    ubr ^b16;
  ^entry24:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b12;
  ^b17:
    i1 %206 = icmp slt i32 %129, i32 11;
    cbr i1 %206(prob = 0.97), ^entry25, ^entry23;
  ^b18:
    i1 %207 = icmp eq i32 %193, i32 42;
    i1 %208 = icmp eq i32 %193, i32 47;
    i1 %209 = or i1 %207, i1 %208;
    i1 %210 = icmp eq i32 %193, i32 37;
    i1 %211 = or i1 %209, i1 %210;
    i32 %212 = select i1 %211 ? i32 20 : i32 0;
    i1 %213 = icmp sle i32 %129, i32 %212;
    cbr i1 %213(prob = 0.97), ^entry25, ^entry23;
  ^b19:
    i1 %214 = icmp eq i32 %176, i32 42;
    cbr i1 %214(prob = 0.5), ^if.then2, ^b20;
  ^if.then2:
    i32 %215 = mul i32 %180, i32 %183;
    ubr ^b16;
  ^entry25:
    i32 %216 = add i32 %189, i32 -1;
    store i32* %5 with i32 %216;
    i32 %217 = load i32* %3;
    i32* %218 = getelementptr &(i32* %3)[i32 %217];
    i32 %219 = load i32* %218;
    i32 %220 = add i32 %217, i32 -1;
    store i32* %3 with i32 %220;
    i32* %221 = getelementptr &(i32* %218)[i64 -1];
    i32 %222 = load i32* %221;
    i32 %223 = add i32 %217, i32 -2;
    store i32* %3 with i32 %223;
    cbr i1 %194(prob = 0.5), ^if.then3, ^b21;
  ^b20:
    i1 %224 = icmp eq i32 %176, i32 47;
    cbr i1 %224(prob = 0.5), ^if.then4, ^b22;
  ^if.then3:
    i32 %225 = add i32 %219, i32 %222;
    ubr ^b23;
  ^if.then4:
    i32 %226 = sdiv i32 %183, i32 %180;
    ubr ^b16;
  ^b21:
    cbr i1 %195(prob = 0.5), ^if.then5, ^b24;
  ^b22:
    i1 %227 = icmp eq i32 %176, i32 37;
    cbr i1 %227(prob = 0.5), ^if.then6, ^b16;
  ^b23:
    i32 %228 = phi [^if.then3, i32 %225] [^if.then5, i32 %232] [^if.then7, i32 %235] [^if.then8, i32 %237] [^b26, i32 0] [^if.then9, i32 %239];
    i32 %229 = load i32* %3;
    i32 %230 = add i32 %229, i32 1;
    store i32* %3 with i32 %230;
    i32* %231 = getelementptr &(i32* %3)[i32 %230];
    store i32* %231 with i32 %228;
    ubr ^entry21;
  ^if.then5:
    i32 %232 = sub i32 %222, i32 %219;
    ubr ^b23;
  ^if.then6:
    i32 %233 = srem i32 %183, i32 %180;
    ubr ^b16;
  ^b24:
    i1 %234 = icmp eq i32 %193, i32 42;
    cbr i1 %234(prob = 0.5), ^if.then7, ^b25;
  ^if.then7:
    i32 %235 = mul i32 %219, i32 %222;
    ubr ^b23;
  ^b25:
    i1 %236 = icmp eq i32 %193, i32 47;
    cbr i1 %236(prob = 0.5), ^if.then8, ^b26;
  ^if.then8:
    i32 %237 = sdiv i32 %222, i32 %219;
    ubr ^b23;
  ^b26:
    i1 %238 = icmp eq i32 %193, i32 37;
    cbr i1 %238(prob = 0.5), ^if.then9, ^b23;
  ^if.then9:
    i32 %239 = srem i32 %222, i32 %219;
    ubr ^b23;
}
internal [256 * i32]* @oprs;
internal [256 * i32]* @ops;
