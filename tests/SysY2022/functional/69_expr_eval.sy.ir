internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %5 = ptrcast i32* %4 to i8*;
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^entry, i32 32] [^entry1, i32 %10];
    i1 %7 = scmp eq i32 %6, i32 32;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
^b:
    i1 %8 = scmp eq i32 %6, i32 10;
    ubr ^b1;
^b1:
    i1 %9 = phi [^while.header, i1 true] [^b, i1 %8];
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
^entry1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header;
^entry2:
    i1 %11 = scmp gt i32 %6, i32 47;
    i1 %12 = scmp lt i32 %6, i32 58;
    i1 %13 = and i1 %11, i1 %12;
    cbr i1 %13(prob = 0.25), ^if.then, ^if.else;
^if.then:
    i32 %14 = add i32 %6, i32 -48;
    ubr ^entry3;
^if.else:
    i32 %15 = call () -> i32 @getch();
    ubr ^entry4;
^entry3:
    i32 %16 = phi [^if.then, i32 %14] [^while.body1, i32 %31];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = scmp gt i32 %17, i32 47;
    cbr i1 %18(prob = 0.5), ^b2, ^b3;
^entry4:
    i32 %19 = phi [^if.else, i32 %15] [^b3, i32 %17];
    i32 %20 = phi [^if.else, i32 0] [^b3, i32 %16];
    i32 %21 = phi [^if.else, i32 1] [^b3, i32 0];
    i1 %22 = scmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body, ^b4;
^b2:
    i1 %23 = scmp le i32 %17, i32 57;
    ubr ^b3;
^while.body:
    i32 %24 = phi [^entry4, i32 %19] [^b14, i32 %160];
    i32 %25 = phi [^entry4, i32 %20] [^b14, i32 %161];
    i32 %26 = phi [^entry4, i32 %21] [^b14, i32 %162];
    i32 %27 = phi [^entry4, i32 %0] [^b14, i32 %164];
    ubr ^super.header;
^b3:
    i1 %28 = phi [^entry3, i1 false] [^b2, i1 %23];
    cbr i1 %28(prob = 0.97), ^while.body1, ^entry4;
^b4:
    ret i32 0;
^while.body1:
    i32 %29 = mul i32 %16, i32 10;
    i32 %30 = add i32 %17, i32 -48;
    i32 %31 = add i32 %30, i32 %29;
    ubr ^entry3;
^super.header:
    i64 %32 = phi [^while.body, i64 0] [^b5, i64 %33];
    i64 %33 = add i64 %32, i64 16;
    i1 %34 = scmp lt i64 %33, i64 1024;
    cbr i1 %34(prob = 0.67), ^b5, ^super.header1;
^b5:
    i8* %35 = getelementptr &(i8* %3)[i64 %32];
    store i8* %35 with i8 0;
    i8* %36 = getelementptr &(i8* %35)[i64 1];
    store i8* %36 with i8 0;
    i8* %37 = getelementptr &(i8* %35)[i64 2];
    store i8* %37 with i8 0;
    i8* %38 = getelementptr &(i8* %35)[i64 3];
    store i8* %38 with i8 0;
    i8* %39 = getelementptr &(i8* %35)[i64 4];
    store i8* %39 with i8 0;
    i8* %40 = getelementptr &(i8* %35)[i64 5];
    store i8* %40 with i8 0;
    i8* %41 = getelementptr &(i8* %35)[i64 6];
    store i8* %41 with i8 0;
    i8* %42 = getelementptr &(i8* %35)[i64 7];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %35)[i64 8];
    store i8* %43 with i8 0;
    i8* %44 = getelementptr &(i8* %35)[i64 9];
    store i8* %44 with i8 0;
    i8* %45 = getelementptr &(i8* %35)[i64 10];
    store i8* %45 with i8 0;
    i8* %46 = getelementptr &(i8* %35)[i64 11];
    store i8* %46 with i8 0;
    i8* %47 = getelementptr &(i8* %35)[i64 12];
    store i8* %47 with i8 0;
    i8* %48 = getelementptr &(i8* %35)[i64 13];
    store i8* %48 with i8 0;
    i8* %49 = getelementptr &(i8* %35)[i64 14];
    store i8* %49 with i8 0;
    i8* %50 = getelementptr &(i8* %35)[i64 15];
    store i8* %50 with i8 0;
    ubr ^super.header;
^super.header1:
    i64 %51 = phi [^super.header, i64 %32] [^b6, i64 %52];
    i64 %52 = add i64 %51, i64 16;
    i1 %53 = scmp lt i64 %52, i64 1024;
    cbr i1 %53(prob = 0.67), ^b6, ^super.header2;
^b6:
    i8* %54 = getelementptr &(i8* %3)[i64 %51];
    store i8* %54 with i8 0;
    i8* %55 = getelementptr &(i8* %54)[i64 1];
    store i8* %55 with i8 0;
    i8* %56 = getelementptr &(i8* %54)[i64 2];
    store i8* %56 with i8 0;
    i8* %57 = getelementptr &(i8* %54)[i64 3];
    store i8* %57 with i8 0;
    i8* %58 = getelementptr &(i8* %54)[i64 4];
    store i8* %58 with i8 0;
    i8* %59 = getelementptr &(i8* %54)[i64 5];
    store i8* %59 with i8 0;
    i8* %60 = getelementptr &(i8* %54)[i64 6];
    store i8* %60 with i8 0;
    i8* %61 = getelementptr &(i8* %54)[i64 7];
    store i8* %61 with i8 0;
    i8* %62 = getelementptr &(i8* %54)[i64 8];
    store i8* %62 with i8 0;
    i8* %63 = getelementptr &(i8* %54)[i64 9];
    store i8* %63 with i8 0;
    i8* %64 = getelementptr &(i8* %54)[i64 10];
    store i8* %64 with i8 0;
    i8* %65 = getelementptr &(i8* %54)[i64 11];
    store i8* %65 with i8 0;
    i8* %66 = getelementptr &(i8* %54)[i64 12];
    store i8* %66 with i8 0;
    i8* %67 = getelementptr &(i8* %54)[i64 13];
    store i8* %67 with i8 0;
    i8* %68 = getelementptr &(i8* %54)[i64 14];
    store i8* %68 with i8 0;
    i8* %69 = getelementptr &(i8* %54)[i64 15];
    store i8* %69 with i8 0;
    ubr ^super.header1;
^super.header2:
    i64 %70 = phi [^super.header1, i64 %51] [^b7, i64 %71];
    i64 %71 = add i64 %70, i64 16;
    i1 %72 = scmp lt i64 %71, i64 1024;
    cbr i1 %72(prob = 0.67), ^b7, ^b8;
^b7:
    i8* %73 = getelementptr &(i8* %3)[i64 %70];
    store i8* %73 with i8 0;
    i8* %74 = getelementptr &(i8* %73)[i64 1];
    store i8* %74 with i8 0;
    i8* %75 = getelementptr &(i8* %73)[i64 2];
    store i8* %75 with i8 0;
    i8* %76 = getelementptr &(i8* %73)[i64 3];
    store i8* %76 with i8 0;
    i8* %77 = getelementptr &(i8* %73)[i64 4];
    store i8* %77 with i8 0;
    i8* %78 = getelementptr &(i8* %73)[i64 5];
    store i8* %78 with i8 0;
    i8* %79 = getelementptr &(i8* %73)[i64 6];
    store i8* %79 with i8 0;
    i8* %80 = getelementptr &(i8* %73)[i64 7];
    store i8* %80 with i8 0;
    i8* %81 = getelementptr &(i8* %73)[i64 8];
    store i8* %81 with i8 0;
    i8* %82 = getelementptr &(i8* %73)[i64 9];
    store i8* %82 with i8 0;
    i8* %83 = getelementptr &(i8* %73)[i64 10];
    store i8* %83 with i8 0;
    i8* %84 = getelementptr &(i8* %73)[i64 11];
    store i8* %84 with i8 0;
    i8* %85 = getelementptr &(i8* %73)[i64 12];
    store i8* %85 with i8 0;
    i8* %86 = getelementptr &(i8* %73)[i64 13];
    store i8* %86 with i8 0;
    i8* %87 = getelementptr &(i8* %73)[i64 14];
    store i8* %87 with i8 0;
    i8* %88 = getelementptr &(i8* %73)[i64 15];
    store i8* %88 with i8 0;
    ubr ^super.header2;
^b8:
    i64 %89 = phi [^super.header2, i64 %70] [^b8, i64 %91];
    i8* %90 = getelementptr &(i8* %3)[i64 %89];
    store i8* %90 with i8 0;
    i64 %91 = add i64 %89, i64 1;
    i1 %92 = scmp lt i64 %91, i64 1024;
    cbr i1 %92(prob = 0.97), ^b8, ^super.header3;
^super.header3:
    i64 %93 = phi [^b8, i64 0] [^b9, i64 %94];
    i64 %94 = add i64 %93, i64 16;
    i1 %95 = scmp lt i64 %94, i64 1024;
    cbr i1 %95(prob = 0.67), ^b9, ^super.header4;
^b9:
    i8* %96 = getelementptr &(i8* %5)[i64 %93];
    store i8* %96 with i8 0;
    i8* %97 = getelementptr &(i8* %96)[i64 1];
    store i8* %97 with i8 0;
    i8* %98 = getelementptr &(i8* %96)[i64 2];
    store i8* %98 with i8 0;
    i8* %99 = getelementptr &(i8* %96)[i64 3];
    store i8* %99 with i8 0;
    i8* %100 = getelementptr &(i8* %96)[i64 4];
    store i8* %100 with i8 0;
    i8* %101 = getelementptr &(i8* %96)[i64 5];
    store i8* %101 with i8 0;
    i8* %102 = getelementptr &(i8* %96)[i64 6];
    store i8* %102 with i8 0;
    i8* %103 = getelementptr &(i8* %96)[i64 7];
    store i8* %103 with i8 0;
    i8* %104 = getelementptr &(i8* %96)[i64 8];
    store i8* %104 with i8 0;
    i8* %105 = getelementptr &(i8* %96)[i64 9];
    store i8* %105 with i8 0;
    i8* %106 = getelementptr &(i8* %96)[i64 10];
    store i8* %106 with i8 0;
    i8* %107 = getelementptr &(i8* %96)[i64 11];
    store i8* %107 with i8 0;
    i8* %108 = getelementptr &(i8* %96)[i64 12];
    store i8* %108 with i8 0;
    i8* %109 = getelementptr &(i8* %96)[i64 13];
    store i8* %109 with i8 0;
    i8* %110 = getelementptr &(i8* %96)[i64 14];
    store i8* %110 with i8 0;
    i8* %111 = getelementptr &(i8* %96)[i64 15];
    store i8* %111 with i8 0;
    ubr ^super.header3;
^super.header4:
    i64 %112 = phi [^super.header3, i64 %93] [^b10, i64 %113];
    i64 %113 = add i64 %112, i64 16;
    i1 %114 = scmp lt i64 %113, i64 1024;
    cbr i1 %114(prob = 0.67), ^b10, ^super.header5;
^b10:
    i8* %115 = getelementptr &(i8* %5)[i64 %112];
    store i8* %115 with i8 0;
    i8* %116 = getelementptr &(i8* %115)[i64 1];
    store i8* %116 with i8 0;
    i8* %117 = getelementptr &(i8* %115)[i64 2];
    store i8* %117 with i8 0;
    i8* %118 = getelementptr &(i8* %115)[i64 3];
    store i8* %118 with i8 0;
    i8* %119 = getelementptr &(i8* %115)[i64 4];
    store i8* %119 with i8 0;
    i8* %120 = getelementptr &(i8* %115)[i64 5];
    store i8* %120 with i8 0;
    i8* %121 = getelementptr &(i8* %115)[i64 6];
    store i8* %121 with i8 0;
    i8* %122 = getelementptr &(i8* %115)[i64 7];
    store i8* %122 with i8 0;
    i8* %123 = getelementptr &(i8* %115)[i64 8];
    store i8* %123 with i8 0;
    i8* %124 = getelementptr &(i8* %115)[i64 9];
    store i8* %124 with i8 0;
    i8* %125 = getelementptr &(i8* %115)[i64 10];
    store i8* %125 with i8 0;
    i8* %126 = getelementptr &(i8* %115)[i64 11];
    store i8* %126 with i8 0;
    i8* %127 = getelementptr &(i8* %115)[i64 12];
    store i8* %127 with i8 0;
    i8* %128 = getelementptr &(i8* %115)[i64 13];
    store i8* %128 with i8 0;
    i8* %129 = getelementptr &(i8* %115)[i64 14];
    store i8* %129 with i8 0;
    i8* %130 = getelementptr &(i8* %115)[i64 15];
    store i8* %130 with i8 0;
    ubr ^super.header4;
^super.header5:
    i64 %131 = phi [^super.header4, i64 %112] [^b11, i64 %132];
    i64 %132 = add i64 %131, i64 16;
    i1 %133 = scmp lt i64 %132, i64 1024;
    cbr i1 %133(prob = 0.67), ^b11, ^b12;
^b11:
    i8* %134 = getelementptr &(i8* %5)[i64 %131];
    store i8* %134 with i8 0;
    i8* %135 = getelementptr &(i8* %134)[i64 1];
    store i8* %135 with i8 0;
    i8* %136 = getelementptr &(i8* %134)[i64 2];
    store i8* %136 with i8 0;
    i8* %137 = getelementptr &(i8* %134)[i64 3];
    store i8* %137 with i8 0;
    i8* %138 = getelementptr &(i8* %134)[i64 4];
    store i8* %138 with i8 0;
    i8* %139 = getelementptr &(i8* %134)[i64 5];
    store i8* %139 with i8 0;
    i8* %140 = getelementptr &(i8* %134)[i64 6];
    store i8* %140 with i8 0;
    i8* %141 = getelementptr &(i8* %134)[i64 7];
    store i8* %141 with i8 0;
    i8* %142 = getelementptr &(i8* %134)[i64 8];
    store i8* %142 with i8 0;
    i8* %143 = getelementptr &(i8* %134)[i64 9];
    store i8* %143 with i8 0;
    i8* %144 = getelementptr &(i8* %134)[i64 10];
    store i8* %144 with i8 0;
    i8* %145 = getelementptr &(i8* %134)[i64 11];
    store i8* %145 with i8 0;
    i8* %146 = getelementptr &(i8* %134)[i64 12];
    store i8* %146 with i8 0;
    i8* %147 = getelementptr &(i8* %134)[i64 13];
    store i8* %147 with i8 0;
    i8* %148 = getelementptr &(i8* %134)[i64 14];
    store i8* %148 with i8 0;
    i8* %149 = getelementptr &(i8* %134)[i64 15];
    store i8* %149 with i8 0;
    ubr ^super.header5;
^b12:
    i64 %150 = phi [^super.header5, i64 %131] [^b12, i64 %152];
    i8* %151 = getelementptr &(i8* %5)[i64 %150];
    store i8* %151 with i8 0;
    i64 %152 = add i64 %150, i64 1;
    i1 %153 = scmp lt i64 %152, i64 1024;
    cbr i1 %153(prob = 0.97), ^b12, ^entry5;
^entry5:
    i1 %154 = scmp neq i32 %26, i32 0;
    cbr i1 %154(prob = 0.5), ^entry6, ^b13;
^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b14;
^b13:
    i32 %155 = phi [^entry5, i32 %24] [^entry23, i32 %216];
    i32 %156 = phi [^entry5, i32 %25] [^entry23, i32 %217];
    i32 %157 = load i32* %2;
    i32 %158 = add i32 %157, i32 1;
    store i32* %2 with i32 %158;
    i32* %159 = getelementptr &(i32* %2)[i32 %158];
    store i32* %159 with i32 %156;
    ubr ^while.header1;
^b14:
    i32 %160 = phi [^entry6, i32 %24] [^entry20, i32 %225] [^entry24, i32 %216];
    i32 %161 = phi [^entry6, i32 %25] [^entry20, i32 %226] [^entry24, i32 %217];
    i32 %162 = phi [^entry6, i32 %26] [^entry20, i32 %227] [^entry24, i32 %218];
    i32 %163 = phi [^entry6, i32 -1] [^entry20, i32 %239] [^entry24, i32 -1];
    call (i32) -> void @putint(i32 %163);
    call (i32) -> void @putch(i32 10);
    i32 %164 = add i32 %27, i32 -1;
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.97), ^while.body, ^b4;
^while.header1:
    i32 %166 = phi [^b13, i32 %155] [^entry7, i32 %170];
    i1 %167 = scmp eq i32 %166, i32 32;
    cbr i1 %167(prob = 0.5), ^b16, ^b15;
^b15:
    i1 %168 = scmp eq i32 %166, i32 10;
    ubr ^b16;
^b16:
    i1 %169 = phi [^while.header1, i1 true] [^b15, i1 %168];
    cbr i1 %169(prob = 0.97), ^entry7, ^entry8;
^entry7:
    i32 %170 = call () -> i32 @getch();
    ubr ^while.header1;
^entry8:
    i1 %171 = scmp gt i32 %166, i32 47;
    i1 %172 = scmp lt i32 %166, i32 58;
    i1 %173 = and i1 %171, i1 %172;
    cbr i1 %173(prob = 0.25), ^if.then1, ^if.else1;
^if.then1:
    i32 %174 = add i32 %166, i32 -48;
    ubr ^entry9;
^if.else1:
    i32 %175 = call () -> i32 @getch();
    i1 %176 = scmp eq i32 %166, i32 43;
    cbr i1 %176(prob = 0.5), ^b17, ^b18;
^entry9:
    i32 %177 = phi [^if.then1, i32 %174] [^while.body2, i32 %192];
    i32 %178 = call () -> i32 @getch();
    i1 %179 = scmp gt i32 %178, i32 47;
    cbr i1 %179(prob = 0.5), ^b19, ^b20;
^b17:
    i32 %180 = phi [^if.else1, i32 10] [^b18, i32 10] [^b21, i32 20] [^b24, i32 20] [^b27, i32 20] [^b28, i32 0];
    i1 %181 = scmp eq i32 %180, i32 0;
    cbr i1 %181(prob = 0.5), ^entry10, ^while.header2;
^b18:
    i1 %182 = scmp eq i32 %166, i32 45;
    cbr i1 %182(prob = 0.5), ^b17, ^b21;
^b19:
    i1 %183 = scmp le i32 %178, i32 57;
    ubr ^b20;
^entry10:
    i32 %184 = phi [^b17, i32 %156] [^b20, i32 %177];
    i32 %185 = phi [^b17, i32 %175] [^b20, i32 %178];
    ubr ^while.header3;
^b20:
    i1 %186 = phi [^entry9, i1 false] [^b19, i1 %183];
    cbr i1 %186(prob = 0.97), ^while.body2, ^entry10;
^while.header2:
    i32 %187 = phi [^b17, i32 %175] [^entry11, i32 %199];
    i1 %188 = scmp eq i32 %187, i32 32;
    cbr i1 %188(prob = 0.5), ^b23, ^b22;
^b21:
    i1 %189 = scmp eq i32 %166, i32 42;
    cbr i1 %189(prob = 0.5), ^b17, ^b24;
^while.body2:
    i32 %190 = mul i32 %177, i32 10;
    i32 %191 = add i32 %178, i32 -48;
    i32 %192 = add i32 %191, i32 %190;
    ubr ^entry9;
^while.header3:
    i32 %193 = phi [^entry10, i32 %185] [^entry13, i32 %205];
    i1 %194 = scmp eq i32 %193, i32 32;
    cbr i1 %194(prob = 0.5), ^b26, ^b25;
^b22:
    i1 %195 = scmp eq i32 %187, i32 10;
    ubr ^b23;
^b23:
    i1 %196 = phi [^while.header2, i1 true] [^b22, i1 %195];
    cbr i1 %196(prob = 0.97), ^entry11, ^entry12;
^b24:
    i1 %197 = scmp eq i32 %166, i32 47;
    cbr i1 %197(prob = 0.5), ^b17, ^b27;
^b25:
    i1 %198 = scmp eq i32 %193, i32 10;
    ubr ^b26;
^entry11:
    i32 %199 = call () -> i32 @getch();
    ubr ^while.header2;
^b26:
    i1 %200 = phi [^while.header3, i1 true] [^b25, i1 %198];
    cbr i1 %200(prob = 0.97), ^entry13, ^entry14;
^entry12:
    i1 %201 = scmp gt i32 %187, i32 47;
    i1 %202 = scmp lt i32 %187, i32 58;
    i1 %203 = and i1 %201, i1 %202;
    cbr i1 %203(prob = 0.25), ^if.then2, ^if.else2;
^b27:
    i1 %204 = scmp eq i32 %166, i32 37;
    cbr i1 %204(prob = 0.5), ^b17, ^b28;
^entry13:
    i32 %205 = call () -> i32 @getch();
    ubr ^while.header3;
^if.then2:
    i32 %206 = add i32 %187, i32 -48;
    ubr ^entry15;
^entry14:
    i1 %207 = scmp gt i32 %193, i32 47;
    i1 %208 = scmp lt i32 %193, i32 58;
    i1 %209 = and i1 %207, i1 %208;
    cbr i1 %209(prob = 0.25), ^if.then3, ^if.else3;
^if.else2:
    i32 %210 = call () -> i32 @getch();
    ubr ^entry16;
^b28:
    ubr ^b17;
^if.then3:
    i32 %211 = add i32 %193, i32 -48;
    ubr ^entry17;
^if.else3:
    i32 %212 = call () -> i32 @getch();
    ubr ^entry18;
^entry15:
    i32 %213 = phi [^if.then2, i32 %206] [^while.body3, i32 %242];
    i32 %214 = call () -> i32 @getch();
    i1 %215 = scmp gt i32 %214, i32 47;
    cbr i1 %215(prob = 0.5), ^b29, ^b30;
^entry16:
    i32 %216 = phi [^if.else2, i32 %210] [^b30, i32 %214] [^b40, i32 %216];
    i32 %217 = phi [^if.else2, i32 %156] [^b30, i32 %213] [^b40, i32 %217];
    i32 %218 = phi [^if.else2, i32 1] [^b30, i32 0] [^b40, i32 %218];
    i32 %219 = load i32* %4;
    i1 %220 = scmp neq i32 %219, i32 0;
    cbr i1 %220(prob = 0.5), ^entry19, ^b31;
^b29:
    i1 %221 = scmp le i32 %214, i32 57;
    ubr ^b30;
^entry17:
    i32 %222 = phi [^if.then3, i32 %211] [^while.body4, i32 %285];
    i32 %223 = call () -> i32 @getch();
    i1 %224 = scmp gt i32 %223, i32 47;
    cbr i1 %224(prob = 0.5), ^b32, ^b34;
^entry18:
    i32 %225 = phi [^if.else3, i32 %212] [^b34, i32 %223] [^b39, i32 %225];
    i32 %226 = phi [^if.else3, i32 %184] [^b34, i32 %222] [^b39, i32 %226];
    i32 %227 = phi [^if.else3, i32 1] [^b34, i32 0] [^b39, i32 %227];
    i32 %228 = load i32* %4;
    i1 %229 = scmp neq i32 %228, i32 0;
    cbr i1 %229(prob = 0.97), ^entry21, ^entry20;
^b30:
    i1 %230 = phi [^entry15, i1 false] [^b29, i1 %221];
    cbr i1 %230(prob = 0.97), ^while.body3, ^entry16;
^entry19:
    i32 %231 = load i32* %4;
    i32* %232 = getelementptr &(i32* %4)[i32 %231];
    i32 %233 = load i32* %232;
    i1 %234 = scmp eq i32 %233, i32 43;
    cbr i1 %234(prob = 0.5), ^b33, ^b35;
^b31:
    i1 %235 = phi [^entry16, i1 false] [^b33, i1 %244];
    cbr i1 %235(prob = 0.97), ^entry22, ^entry23;
^b32:
    i1 %236 = scmp le i32 %223, i32 57;
    ubr ^b34;
^entry20:
    i32 %237 = load i32* %2;
    i32* %238 = getelementptr &(i32* %2)[i32 %237];
    i32 %239 = load i32* %238;
    ubr ^b14;
^while.body3:
    i32 %240 = mul i32 %213, i32 10;
    i32 %241 = add i32 %214, i32 -48;
    i32 %242 = add i32 %241, i32 %240;
    ubr ^entry15;
^b33:
    i32 %243 = phi [^entry19, i32 10] [^b35, i32 10] [^b37, i32 20] [^b42, i32 20] [^b45, i32 20] [^b48, i32 0];
    i1 %244 = scmp ge i32 %243, i32 %180;
    ubr ^b31;
^b34:
    i1 %245 = phi [^entry17, i1 false] [^b32, i1 %236];
    cbr i1 %245(prob = 0.97), ^while.body4, ^entry18;
^entry21:
    i32 %246 = load i32* %4;
    i32* %247 = getelementptr &(i32* %4)[i32 %246];
    i32 %248 = load i32* %247;
    i32 %249 = load i32* %4;
    i32 %250 = add i32 %249, i32 -1;
    store i32* %4 with i32 %250;
    i32 %251 = load i32* %2;
    i32* %252 = getelementptr &(i32* %2)[i32 %251];
    i32 %253 = load i32* %252;
    i32 %254 = load i32* %2;
    i32 %255 = add i32 %254, i32 -1;
    store i32* %2 with i32 %255;
    i32 %256 = load i32* %2;
    i32* %257 = getelementptr &(i32* %2)[i32 %256];
    i32 %258 = load i32* %257;
    i32 %259 = load i32* %2;
    i32 %260 = add i32 %259, i32 -1;
    store i32* %2 with i32 %260;
    i1 %261 = scmp eq i32 %248, i32 43;
    cbr i1 %261(prob = 0.5), ^if.then4, ^b36;
^entry22:
    i32 %262 = load i32* %4;
    i32* %263 = getelementptr &(i32* %4)[i32 %262];
    i32 %264 = load i32* %263;
    i32 %265 = load i32* %4;
    i32 %266 = add i32 %265, i32 -1;
    store i32* %4 with i32 %266;
    i32 %267 = load i32* %2;
    i32* %268 = getelementptr &(i32* %2)[i32 %267];
    i32 %269 = load i32* %268;
    i32 %270 = load i32* %2;
    i32 %271 = add i32 %270, i32 -1;
    store i32* %2 with i32 %271;
    i32 %272 = load i32* %2;
    i32* %273 = getelementptr &(i32* %2)[i32 %272];
    i32 %274 = load i32* %273;
    i32 %275 = load i32* %2;
    i32 %276 = add i32 %275, i32 -1;
    store i32* %2 with i32 %276;
    i1 %277 = scmp eq i32 %264, i32 43;
    cbr i1 %277(prob = 0.5), ^if.then5, ^b38;
^b35:
    i1 %278 = scmp eq i32 %233, i32 45;
    cbr i1 %278(prob = 0.5), ^b33, ^b37;
^entry23:
    i32 %279 = load i32* %4;
    i32 %280 = add i32 %279, i32 1;
    store i32* %4 with i32 %280;
    i32* %281 = getelementptr &(i32* %4)[i32 %280];
    store i32* %281 with i32 %166;
    i1 %282 = scmp neq i32 %218, i32 0;
    cbr i1 %282(prob = 0.5), ^entry24, ^b13;
^while.body4:
    i32 %283 = mul i32 %222, i32 10;
    i32 %284 = add i32 %223, i32 -48;
    i32 %285 = add i32 %284, i32 %283;
    ubr ^entry17;
^if.then4:
    i32 %286 = add i32 %253, i32 %258;
    ubr ^b39;
^if.then5:
    i32 %287 = add i32 %269, i32 %274;
    ubr ^b40;
^b36:
    i1 %288 = scmp eq i32 %248, i32 45;
    cbr i1 %288(prob = 0.5), ^if.then6, ^b41;
^entry24:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b14;
^b37:
    i1 %289 = scmp eq i32 %233, i32 42;
    cbr i1 %289(prob = 0.5), ^b33, ^b42;
^b38:
    i1 %290 = scmp eq i32 %264, i32 45;
    cbr i1 %290(prob = 0.5), ^if.then7, ^b43;
^b39:
    i32 %291 = phi [^if.then4, i32 %286] [^if.then6, i32 %295] [^if.then8, i32 %304] [^if.then10, i32 %309] [^b47, i32 0] [^if.then12, i32 %313];
    i32 %292 = load i32* %2;
    i32 %293 = add i32 %292, i32 1;
    store i32* %2 with i32 %293;
    i32* %294 = getelementptr &(i32* %2)[i32 %293];
    store i32* %294 with i32 %291;
    ubr ^entry18;
^if.then6:
    i32 %295 = sub i32 %258, i32 %253;
    ubr ^b39;
^b40:
    i32 %296 = phi [^if.then5, i32 %287] [^if.then7, i32 %300] [^if.then9, i32 %305] [^if.then11, i32 %310] [^b49, i32 0] [^if.then13, i32 %314];
    i32 %297 = load i32* %2;
    i32 %298 = add i32 %297, i32 1;
    store i32* %2 with i32 %298;
    i32* %299 = getelementptr &(i32* %2)[i32 %298];
    store i32* %299 with i32 %296;
    ubr ^entry16;
^if.then7:
    i32 %300 = sub i32 %274, i32 %269;
    ubr ^b40;
^b41:
    i1 %301 = scmp eq i32 %248, i32 42;
    cbr i1 %301(prob = 0.5), ^if.then8, ^b44;
^b42:
    i1 %302 = scmp eq i32 %233, i32 47;
    cbr i1 %302(prob = 0.5), ^b33, ^b45;
^b43:
    i1 %303 = scmp eq i32 %264, i32 42;
    cbr i1 %303(prob = 0.5), ^if.then9, ^b46;
^if.then8:
    i32 %304 = mul i32 %253, i32 %258;
    ubr ^b39;
^if.then9:
    i32 %305 = mul i32 %269, i32 %274;
    ubr ^b40;
^b44:
    i1 %306 = scmp eq i32 %248, i32 47;
    cbr i1 %306(prob = 0.5), ^if.then10, ^b47;
^b45:
    i1 %307 = scmp eq i32 %233, i32 37;
    cbr i1 %307(prob = 0.5), ^b33, ^b48;
^b46:
    i1 %308 = scmp eq i32 %264, i32 47;
    cbr i1 %308(prob = 0.5), ^if.then11, ^b49;
^if.then10:
    i32 %309 = sdiv i32 %258, i32 %253;
    ubr ^b39;
^if.then11:
    i32 %310 = sdiv i32 %274, i32 %269;
    ubr ^b40;
^b47:
    i1 %311 = scmp eq i32 %248, i32 37;
    cbr i1 %311(prob = 0.5), ^if.then12, ^b39;
^b48:
    ubr ^b33;
^b49:
    i1 %312 = scmp eq i32 %264, i32 37;
    cbr i1 %312(prob = 0.5), ^if.then13, ^b40;
^if.then12:
    i32 %313 = srem i32 %258, i32 %253;
    ubr ^b39;
^if.then13:
    i32 %314 = srem i32 %274, i32 %269;
    ubr ^b40;
}
