internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = phi [^entry2, i32 %10] [^while.body, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry4;
  ^while.body:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^entry3;
  ^entry4:
    i32 %19 = phi [^if.else, i32 %12] [^entry3, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^entry3, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^entry3, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %23 = phi [^entry4, i32 %19] [^b6, i32 %61];
    i32 %24 = phi [^entry4, i32 %20] [^b6, i32 %62];
    i32 %25 = phi [^entry4, i32 %21] [^b6, i32 %63];
    i32 %26 = phi [^entry4, i32 %0] [^b6, i32 %65];
    ubr ^super.header;
  ^b:
    ret i32 0;
  ^super.header:
    i64 %27 = phi [^while.body1, i64 0] [^b1, i64 %28];
    i64 %28 = add i64 %27, i64 4;
    i1 %29 = icmp slt i64 %28, i64 256;
    cbr i1 %29(prob = 0.89), ^b1, ^b2;
  ^b1:
    i32* %30 = getelementptr &(i32* %3)[i64 %27];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    ubr ^super.header;
  ^b2:
    i64 %34 = phi [^super.header, i64 %27] [^b2, i64 %36];
    i32* %35 = getelementptr &(i32* %3)[i64 %34];
    store i32* %35 with i32 0;
    i64 %36 = add i64 %34, i64 1;
    i1 %37 = icmp slt i64 %36, i64 256;
    cbr i1 %37(prob = 0.75), ^b2, ^super.header1;
  ^super.header1:
    i64 %38 = phi [^b2, i64 0] [^b3, i64 %39];
    i64 %39 = add i64 %38, i64 4;
    i1 %40 = icmp slt i64 %39, i64 256;
    cbr i1 %40(prob = 0.89), ^b3, ^b4;
  ^b3:
    i32* %41 = getelementptr &(i32* %5)[i64 %38];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %41)[i64 1];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %41)[i64 2];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %41)[i64 3];
    store i32* %44 with i32 0;
    ubr ^super.header1;
  ^b4:
    i64 %45 = phi [^super.header1, i64 %38] [^b4, i64 %47];
    i32* %46 = getelementptr &(i32* %5)[i64 %45];
    store i32* %46 with i32 0;
    i64 %47 = add i64 %45, i64 1;
    i1 %48 = icmp slt i64 %47, i64 256;
    cbr i1 %48(prob = 0.75), ^b4, ^entry5;
  ^entry5:
    i1 %49 = icmp neq i32 %25, i32 0;
    cbr i1 %49(prob = 0.5), ^entry6, ^b5;
  ^entry6:
    i32 %50 = phi [^entry5, i32 %23] [^entry23, i32 %147];
    i32 %51 = phi [^entry5, i32 %24] [^entry23, i32 %148];
    i32 %52 = phi [^entry5, i32 %25] [^entry23, i32 %149];
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b6;
  ^b5:
    i32 %53 = phi [^entry5, i32 %23] [^entry23, i32 %147];
    i32 %54 = phi [^entry5, i32 %24] [^entry23, i32 %148];
    i32 %55 = load i32* %3;
    i32 %56 = add i32 %55, i32 1;
    store i32* %3 with i32 %56;
    i32* %57 = getelementptr &(i32* %3)[i32 %56];
    store i32* %57 with i32 %54;
    i1 %58 = icmp eq i32 %53, i32 32;
    i1 %59 = icmp eq i32 %53, i32 10;
    i1 %60 = or i1 %58, i1 %59;
    cbr i1 %60(prob = 0.97), ^entry7, ^entry8;
  ^b6:
    i32 %61 = phi [^entry6, i32 %50] [^entry19, i32 %122];
    i32 %62 = phi [^entry6, i32 %51] [^entry19, i32 %123];
    i32 %63 = phi [^entry6, i32 %52] [^entry19, i32 %124];
    i32 %64 = phi [^entry6, i32 -1] [^entry19, i32 %135];
    call (i32) -> void @putint(i32 %64);
    call (i32) -> void @putch(i32 10);
    i32 %65 = add i32 %26, i32 -1;
    i1 %66 = icmp neq i32 %65, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body1, ^b;
  ^entry7:
    i32 %67 = call () -> i32 @getch();
    i1 %68 = icmp eq i32 %67, i32 32;
    i1 %69 = icmp eq i32 %67, i32 10;
    i1 %70 = or i1 %68, i1 %69;
    cbr i1 %70(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %71 = phi [^b5, i32 %53] [^entry7, i32 %67];
    i32 %72 = add i32 %71, i32 -48;
    i1 %73 = icmp ult i32 %72, i32 10;
    cbr i1 %73(prob = 0.5), ^entry9, ^if.else1;
  ^entry9:
    i32 %74 = phi [^entry8, i32 %72] [^while.body2, i32 %83];
    i32 %75 = call () -> i32 @getch();
    i32 %76 = add i32 %75, i32 -48;
    i1 %77 = icmp ult i32 %76, i32 10;
    cbr i1 %77(prob = 0.97), ^while.body2, ^entry10;
  ^if.else1:
    i32 %78 = call () -> i32 @getch();
    i1 %79 = icmp eq i32 %71, i32 43;
    i1 %80 = icmp eq i32 %71, i32 45;
    i1 %81 = or i1 %79, i1 %80;
    cbr i1 %81(prob = 0.5), ^b8, ^b7;
  ^while.body2:
    i32 %82 = mul i32 %74, i32 10;
    i32 %83 = add i32 %76, i32 %82;
    ubr ^entry9;
  ^b7:
    i1 %84 = icmp eq i32 %71, i32 42;
    i1 %85 = icmp eq i32 %71, i32 47;
    i1 %86 = or i1 %84, i1 %85;
    i1 %87 = icmp eq i32 %71, i32 37;
    i1 %88 = or i1 %86, i1 %87;
    i32 %89 = select i1 %88 ? i32 20 : i32 0;
    ubr ^b8;
  ^b8:
    i32 %90 = phi [^if.else1, i32 10] [^b7, i32 %89];
    i1 %91 = icmp eq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^entry10, ^entry12;
  ^entry10:
    i32 %92 = phi [^entry9, i32 %74] [^b8, i32 %54];
    i32 %93 = phi [^entry9, i32 %75] [^b8, i32 %78];
    i1 %94 = icmp eq i32 %93, i32 32;
    i1 %95 = icmp eq i32 %93, i32 10;
    i1 %96 = or i1 %94, i1 %95;
    cbr i1 %96(prob = 0.97), ^entry11, ^entry13;
  ^entry11:
    i32 %97 = call () -> i32 @getch();
    i1 %98 = icmp eq i32 %97, i32 32;
    i1 %99 = icmp eq i32 %97, i32 10;
    i1 %100 = or i1 %98, i1 %99;
    cbr i1 %100(prob = 0.97), ^entry11, ^entry13;
  ^entry12:
    i1 %101 = icmp eq i32 %78, i32 32;
    i1 %102 = icmp eq i32 %78, i32 10;
    i1 %103 = or i1 %101, i1 %102;
    cbr i1 %103(prob = 0.97), ^entry14, ^entry16;
  ^entry13:
    i32 %104 = phi [^entry10, i32 %93] [^entry11, i32 %97];
    i32 %105 = add i32 %104, i32 -48;
    i1 %106 = icmp ult i32 %105, i32 10;
    cbr i1 %106(prob = 0.5), ^entry15, ^if.else2;
  ^if.else2:
    i32 %107 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry14:
    i32 %108 = call () -> i32 @getch();
    i1 %109 = icmp eq i32 %108, i32 32;
    i1 %110 = icmp eq i32 %108, i32 10;
    i1 %111 = or i1 %109, i1 %110;
    cbr i1 %111(prob = 0.97), ^entry14, ^entry16;
  ^entry15:
    i32 %112 = phi [^entry13, i32 %105] [^while.body3, i32 %120];
    i32 %113 = call () -> i32 @getch();
    i32 %114 = add i32 %113, i32 -48;
    i1 %115 = icmp ult i32 %114, i32 10;
    cbr i1 %115(prob = 0.97), ^while.body3, ^entry17;
  ^entry16:
    i32 %116 = phi [^entry12, i32 %78] [^entry14, i32 %108];
    i32 %117 = add i32 %116, i32 -48;
    i1 %118 = icmp ult i32 %117, i32 10;
    cbr i1 %118(prob = 0.5), ^entry18, ^if.else3;
  ^while.body3:
    i32 %119 = mul i32 %112, i32 10;
    i32 %120 = add i32 %114, i32 %119;
    ubr ^entry15;
  ^if.else3:
    i32 %121 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry17:
    i32 %122 = phi [^if.else2, i32 %107] [^entry15, i32 %113] [^b10, i32 %122];
    i32 %123 = phi [^if.else2, i32 %92] [^entry15, i32 %112] [^b10, i32 %123];
    i32 %124 = phi [^if.else2, i32 1] [^entry15, i32 0] [^b10, i32 %124];
    i32 %125 = load i32* %5;
    i1 %126 = icmp neq i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^entry20, ^entry19;
  ^entry18:
    i32 %127 = phi [^entry16, i32 %117] [^while.body4, i32 %132];
    i32 %128 = call () -> i32 @getch();
    i32 %129 = add i32 %128, i32 -48;
    i1 %130 = icmp ult i32 %129, i32 10;
    cbr i1 %130(prob = 0.97), ^while.body4, ^entry21;
  ^while.body4:
    i32 %131 = mul i32 %127, i32 10;
    i32 %132 = add i32 %129, i32 %131;
    ubr ^entry18;
  ^entry19:
    i32 %133 = load i32* %3;
    i32* %134 = getelementptr &(i32* %3)[i32 %133];
    i32 %135 = load i32* %134;
    ubr ^b6;
  ^entry20:
    i32* %136 = getelementptr &(i32* %5)[i32 %125];
    i32 %137 = load i32* %136;
    i32 %138 = add i32 %125, i32 -1;
    store i32* %5 with i32 %138;
    i32 %139 = load i32* %3;
    i32* %140 = getelementptr &(i32* %3)[i32 %139];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %139, i32 -1;
    store i32* %3 with i32 %142;
    i32* %143 = getelementptr &(i32* %140)[i64 -1];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %139, i32 -2;
    store i32* %3 with i32 %145;
    i1 %146 = icmp eq i32 %137, i32 43;
    cbr i1 %146(prob = 0.5), ^if.then, ^b9;
  ^entry21:
    i32 %147 = phi [^if.else3, i32 %121] [^entry18, i32 %128] [^b17, i32 %147];
    i32 %148 = phi [^if.else3, i32 %54] [^entry18, i32 %127] [^b17, i32 %148];
    i32 %149 = phi [^if.else3, i32 1] [^entry18, i32 0] [^b17, i32 %149];
    i32 %150 = load i32* %5;
    i1 %151 = icmp neq i32 %150, i32 0;
    cbr i1 %151(prob = 0.5), ^entry22, ^entry23;
  ^if.then:
    i32 %152 = add i32 %141, i32 %144;
    ubr ^b10;
  ^entry22:
    i32* %153 = getelementptr &(i32* %5)[i32 %150];
    i32 %154 = load i32* %153;
    i1 %155 = icmp eq i32 %154, i32 43;
    i1 %156 = icmp eq i32 %154, i32 45;
    i1 %157 = or i1 %155, i1 %156;
    cbr i1 %157(prob = 0.5), ^b11, ^b12;
  ^b9:
    i1 %158 = icmp eq i32 %137, i32 45;
    cbr i1 %158(prob = 0.5), ^if.then1, ^b13;
  ^entry23:
    i32 %159 = add i32 %150, i32 1;
    store i32* %5 with i32 %159;
    i32* %160 = getelementptr &(i32* %5)[i32 %159];
    store i32* %160 with i32 %71;
    i1 %161 = icmp eq i32 %149, i32 0;
    cbr i1 %161(prob = 0.5), ^b5, ^entry6;
  ^b10:
    i32 %162 = phi [^if.then, i32 %152] [^if.then1, i32 %166] [^if.then2, i32 %176] [^if.then4, i32 %187] [^b16, i32 0] [^if.then6, i32 %194];
    i32 %163 = load i32* %3;
    i32 %164 = add i32 %163, i32 1;
    store i32* %3 with i32 %164;
    i32* %165 = getelementptr &(i32* %3)[i32 %164];
    store i32* %165 with i32 %162;
    ubr ^entry17;
  ^if.then1:
    i32 %166 = sub i32 %144, i32 %141;
    ubr ^b10;
  ^b11:
    i1 %167 = icmp slt i32 %90, i32 11;
    cbr i1 %167(prob = 0.97), ^entry24, ^entry23;
  ^b12:
    i1 %168 = icmp eq i32 %154, i32 42;
    i1 %169 = icmp eq i32 %154, i32 47;
    i1 %170 = or i1 %168, i1 %169;
    i1 %171 = icmp eq i32 %154, i32 37;
    i1 %172 = or i1 %170, i1 %171;
    i1 %173 = icmp sle i32 %90, i32 0;
    i1 %174 = or i1 %172, i1 %173;
    cbr i1 %174(prob = 0.97), ^entry24, ^entry23;
  ^b13:
    i1 %175 = icmp eq i32 %137, i32 42;
    cbr i1 %175(prob = 0.5), ^if.then2, ^b14;
  ^if.then2:
    i32 %176 = mul i32 %141, i32 %144;
    ubr ^b10;
  ^entry24:
    i32 %177 = add i32 %150, i32 -1;
    store i32* %5 with i32 %177;
    i32 %178 = load i32* %3;
    i32* %179 = getelementptr &(i32* %3)[i32 %178];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %178, i32 -1;
    store i32* %3 with i32 %181;
    i32* %182 = getelementptr &(i32* %179)[i64 -1];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %178, i32 -2;
    store i32* %3 with i32 %184;
    cbr i1 %155(prob = 0.5), ^if.then3, ^b15;
  ^b14:
    i1 %185 = icmp eq i32 %137, i32 47;
    cbr i1 %185(prob = 0.5), ^if.then4, ^b16;
  ^if.then3:
    i32 %186 = add i32 %180, i32 %183;
    ubr ^b17;
  ^if.then4:
    i32 %187 = sdiv i32 %144, i32 %141;
    ubr ^b10;
  ^b15:
    cbr i1 %156(prob = 0.5), ^if.then5, ^b18;
  ^b16:
    i1 %188 = icmp eq i32 %137, i32 37;
    cbr i1 %188(prob = 0.5), ^if.then6, ^b10;
  ^b17:
    i32 %189 = phi [^if.then3, i32 %186] [^if.then5, i32 %193] [^if.then7, i32 %196] [^if.then8, i32 %198] [^b20, i32 0] [^if.then9, i32 %200];
    i32 %190 = load i32* %3;
    i32 %191 = add i32 %190, i32 1;
    store i32* %3 with i32 %191;
    i32* %192 = getelementptr &(i32* %3)[i32 %191];
    store i32* %192 with i32 %189;
    ubr ^entry21;
  ^if.then5:
    i32 %193 = sub i32 %183, i32 %180;
    ubr ^b17;
  ^if.then6:
    i32 %194 = srem i32 %144, i32 %141;
    ubr ^b10;
  ^b18:
    i1 %195 = icmp eq i32 %154, i32 42;
    cbr i1 %195(prob = 0.5), ^if.then7, ^b19;
  ^if.then7:
    i32 %196 = mul i32 %180, i32 %183;
    ubr ^b17;
  ^b19:
    i1 %197 = icmp eq i32 %154, i32 47;
    cbr i1 %197(prob = 0.5), ^if.then8, ^b20;
  ^if.then8:
    i32 %198 = sdiv i32 %183, i32 %180;
    ubr ^b17;
  ^b20:
    i1 %199 = icmp eq i32 %154, i32 37;
    cbr i1 %199(prob = 0.5), ^if.then9, ^b17;
  ^if.then9:
    i32 %200 = srem i32 %183, i32 %180;
    ubr ^b17;
}
internal [256 * i32]* @oprs { Flexible };
internal [256 * i32]* @ops { Flexible };
