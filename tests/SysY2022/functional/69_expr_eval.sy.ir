internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = phi [^entry2, i32 %10] [^while.body, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry4;
  ^while.body:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^entry3;
  ^entry4:
    i32 %19 = phi [^if.else, i32 %12] [^entry3, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^entry3, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^entry3, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %23 = phi [^entry4, i32 %19] [^b6, i32 %58];
    i32 %24 = phi [^entry4, i32 %20] [^b6, i32 %59];
    i32 %25 = phi [^entry4, i32 %21] [^b6, i32 %60];
    i32 %26 = phi [^entry4, i32 %0] [^b6, i32 %62];
    ubr ^super.header;
  ^b:
    ret i32 0;
  ^super.header:
    i64 %27 = phi [^while.body1, i64 0] [^b1, i64 %28];
    i64 %28 = add i64 %27, i64 4;
    i1 %29 = icmp slt i64 %28, i64 256;
    cbr i1 %29(prob = 0.89), ^b1, ^b2;
  ^b1:
    i32* %30 = getelementptr &(i32* %3)[i64 %27];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %30)[i64 1];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %30)[i64 2];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %30)[i64 3];
    store i32* %33 with i32 0;
    ubr ^super.header;
  ^b2:
    i64 %34 = phi [^super.header, i64 %27] [^b2, i64 %36];
    i32* %35 = getelementptr &(i32* %3)[i64 %34];
    store i32* %35 with i32 0;
    i64 %36 = add i64 %34, i64 1;
    i1 %37 = icmp slt i64 %36, i64 256;
    cbr i1 %37(prob = 0.75), ^b2, ^super.header1;
  ^super.header1:
    i64 %38 = phi [^b2, i64 0] [^b3, i64 %39];
    i64 %39 = add i64 %38, i64 4;
    i1 %40 = icmp slt i64 %39, i64 256;
    cbr i1 %40(prob = 0.89), ^b3, ^b4;
  ^b3:
    i32* %41 = getelementptr &(i32* %5)[i64 %38];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %41)[i64 1];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %41)[i64 2];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %41)[i64 3];
    store i32* %44 with i32 0;
    ubr ^super.header1;
  ^b4:
    i64 %45 = phi [^super.header1, i64 %38] [^b4, i64 %47];
    i32* %46 = getelementptr &(i32* %5)[i64 %45];
    store i32* %46 with i32 0;
    i64 %47 = add i64 %45, i64 1;
    i1 %48 = icmp slt i64 %47, i64 256;
    cbr i1 %48(prob = 0.75), ^b4, ^entry5;
  ^entry5:
    i1 %49 = icmp neq i32 %25, i32 0;
    cbr i1 %49(prob = 0.5), ^entry6, ^b5;
  ^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b6;
  ^b5:
    i32 %50 = phi [^entry5, i32 %23] [^entry23, i32 %144];
    i32 %51 = phi [^entry5, i32 %24] [^entry23, i32 %145];
    i32 %52 = load i32* %3;
    i32 %53 = add i32 %52, i32 1;
    store i32* %3 with i32 %53;
    i32* %54 = getelementptr &(i32* %3)[i32 %53];
    store i32* %54 with i32 %51;
    i1 %55 = icmp eq i32 %50, i32 32;
    i1 %56 = icmp eq i32 %50, i32 10;
    i1 %57 = or i1 %55, i1 %56;
    cbr i1 %57(prob = 0.97), ^entry7, ^entry8;
  ^b6:
    i32 %58 = phi [^entry6, i32 %23] [^entry19, i32 %119] [^entry24, i32 %144];
    i32 %59 = phi [^entry6, i32 %24] [^entry19, i32 %120] [^entry24, i32 %145];
    i32 %60 = phi [^entry6, i32 %25] [^entry19, i32 %121] [^entry24, i32 %146];
    i32 %61 = phi [^entry6, i32 -1] [^entry19, i32 %132] [^entry24, i32 -1];
    call (i32) -> void @putint(i32 %61);
    call (i32) -> void @putch(i32 10);
    i32 %62 = add i32 %26, i32 -1;
    i1 %63 = icmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.97), ^while.body1, ^b;
  ^entry7:
    i32 %64 = call () -> i32 @getch();
    i1 %65 = icmp eq i32 %64, i32 32;
    i1 %66 = icmp eq i32 %64, i32 10;
    i1 %67 = or i1 %65, i1 %66;
    cbr i1 %67(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %68 = phi [^b5, i32 %50] [^entry7, i32 %64];
    i32 %69 = add i32 %68, i32 -48;
    i1 %70 = icmp ult i32 %69, i32 10;
    cbr i1 %70(prob = 0.5), ^entry9, ^if.else1;
  ^entry9:
    i32 %71 = phi [^entry8, i32 %69] [^while.body2, i32 %80];
    i32 %72 = call () -> i32 @getch();
    i32 %73 = add i32 %72, i32 -48;
    i1 %74 = icmp ult i32 %73, i32 10;
    cbr i1 %74(prob = 0.97), ^while.body2, ^entry10;
  ^if.else1:
    i32 %75 = call () -> i32 @getch();
    i1 %76 = icmp eq i32 %68, i32 43;
    i1 %77 = icmp eq i32 %68, i32 45;
    i1 %78 = or i1 %76, i1 %77;
    cbr i1 %78(prob = 0.5), ^b8, ^b7;
  ^while.body2:
    i32 %79 = mul i32 %71, i32 10;
    i32 %80 = add i32 %73, i32 %79;
    ubr ^entry9;
  ^b7:
    i1 %81 = icmp eq i32 %68, i32 42;
    i1 %82 = icmp eq i32 %68, i32 37;
    i1 %83 = or i1 %81, i1 %82;
    i1 %84 = icmp eq i32 %68, i32 47;
    i1 %85 = or i1 %83, i1 %84;
    i32 %86 = select i1 %85 ? i32 20 : i32 0;
    ubr ^b8;
  ^b8:
    i32 %87 = phi [^if.else1, i32 10] [^b7, i32 %86];
    i1 %88 = icmp eq i32 %87, i32 0;
    cbr i1 %88(prob = 0.5), ^entry10, ^entry12;
  ^entry10:
    i32 %89 = phi [^entry9, i32 %71] [^b8, i32 %51];
    i32 %90 = phi [^entry9, i32 %72] [^b8, i32 %75];
    i1 %91 = icmp eq i32 %90, i32 32;
    i1 %92 = icmp eq i32 %90, i32 10;
    i1 %93 = or i1 %91, i1 %92;
    cbr i1 %93(prob = 0.97), ^entry11, ^entry13;
  ^entry11:
    i32 %94 = call () -> i32 @getch();
    i1 %95 = icmp eq i32 %94, i32 32;
    i1 %96 = icmp eq i32 %94, i32 10;
    i1 %97 = or i1 %95, i1 %96;
    cbr i1 %97(prob = 0.97), ^entry11, ^entry13;
  ^entry12:
    i1 %98 = icmp eq i32 %75, i32 32;
    i1 %99 = icmp eq i32 %75, i32 10;
    i1 %100 = or i1 %98, i1 %99;
    cbr i1 %100(prob = 0.97), ^entry14, ^entry16;
  ^entry13:
    i32 %101 = phi [^entry10, i32 %90] [^entry11, i32 %94];
    i32 %102 = add i32 %101, i32 -48;
    i1 %103 = icmp ult i32 %102, i32 10;
    cbr i1 %103(prob = 0.5), ^entry15, ^if.else2;
  ^if.else2:
    i32 %104 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry14:
    i32 %105 = call () -> i32 @getch();
    i1 %106 = icmp eq i32 %105, i32 32;
    i1 %107 = icmp eq i32 %105, i32 10;
    i1 %108 = or i1 %106, i1 %107;
    cbr i1 %108(prob = 0.97), ^entry14, ^entry16;
  ^entry15:
    i32 %109 = phi [^entry13, i32 %102] [^while.body3, i32 %117];
    i32 %110 = call () -> i32 @getch();
    i32 %111 = add i32 %110, i32 -48;
    i1 %112 = icmp ult i32 %111, i32 10;
    cbr i1 %112(prob = 0.97), ^while.body3, ^entry17;
  ^entry16:
    i32 %113 = phi [^entry12, i32 %75] [^entry14, i32 %105];
    i32 %114 = add i32 %113, i32 -48;
    i1 %115 = icmp ult i32 %114, i32 10;
    cbr i1 %115(prob = 0.5), ^entry18, ^if.else3;
  ^while.body3:
    i32 %116 = mul i32 %109, i32 10;
    i32 %117 = add i32 %111, i32 %116;
    ubr ^entry15;
  ^if.else3:
    i32 %118 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry17:
    i32 %119 = phi [^if.else2, i32 %104] [^entry15, i32 %110] [^b10, i32 %119];
    i32 %120 = phi [^if.else2, i32 %89] [^entry15, i32 %109] [^b10, i32 %120];
    i32 %121 = phi [^if.else2, i32 1] [^entry15, i32 0] [^b10, i32 %121];
    i32 %122 = load i32* %5;
    i1 %123 = icmp neq i32 %122, i32 0;
    cbr i1 %123(prob = 0.97), ^entry20, ^entry19;
  ^entry18:
    i32 %124 = phi [^entry16, i32 %114] [^while.body4, i32 %129];
    i32 %125 = call () -> i32 @getch();
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = icmp ult i32 %126, i32 10;
    cbr i1 %127(prob = 0.97), ^while.body4, ^entry21;
  ^while.body4:
    i32 %128 = mul i32 %124, i32 10;
    i32 %129 = add i32 %126, i32 %128;
    ubr ^entry18;
  ^entry19:
    i32 %130 = load i32* %3;
    i32* %131 = getelementptr &(i32* %3)[i32 %130];
    i32 %132 = load i32* %131;
    ubr ^b6;
  ^entry20:
    i32* %133 = getelementptr &(i32* %5)[i32 %122];
    i32 %134 = load i32* %133;
    i32 %135 = add i32 %122, i32 -1;
    store i32* %5 with i32 %135;
    i32 %136 = load i32* %3;
    i32* %137 = getelementptr &(i32* %3)[i32 %136];
    i32 %138 = load i32* %137;
    i32 %139 = add i32 %136, i32 -1;
    store i32* %3 with i32 %139;
    i32* %140 = getelementptr &(i32* %137)[i64 -1];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %136, i32 -2;
    store i32* %3 with i32 %142;
    i1 %143 = icmp eq i32 %134, i32 43;
    cbr i1 %143(prob = 0.5), ^if.then, ^b9;
  ^entry21:
    i32 %144 = phi [^if.else3, i32 %118] [^entry18, i32 %125] [^b17, i32 %144];
    i32 %145 = phi [^if.else3, i32 %51] [^entry18, i32 %124] [^b17, i32 %145];
    i32 %146 = phi [^if.else3, i32 1] [^entry18, i32 0] [^b17, i32 %146];
    i32 %147 = load i32* %5;
    i1 %148 = icmp neq i32 %147, i32 0;
    cbr i1 %148(prob = 0.5), ^entry22, ^entry23;
  ^if.then:
    i32 %149 = add i32 %138, i32 %141;
    ubr ^b10;
  ^entry22:
    i32* %150 = getelementptr &(i32* %5)[i32 %147];
    i32 %151 = load i32* %150;
    i1 %152 = icmp eq i32 %151, i32 43;
    i1 %153 = icmp eq i32 %151, i32 45;
    i1 %154 = or i1 %152, i1 %153;
    cbr i1 %154(prob = 0.5), ^b11, ^b12;
  ^b9:
    i1 %155 = icmp eq i32 %134, i32 45;
    cbr i1 %155(prob = 0.5), ^if.then1, ^b13;
  ^entry23:
    i32 %156 = add i32 %147, i32 1;
    store i32* %5 with i32 %156;
    i32* %157 = getelementptr &(i32* %5)[i32 %156];
    store i32* %157 with i32 %68;
    i1 %158 = icmp neq i32 %146, i32 0;
    cbr i1 %158(prob = 0.5), ^entry24, ^b5;
  ^b10:
    i32 %159 = phi [^if.then, i32 %149] [^if.then1, i32 %163] [^if.then2, i32 %173] [^if.then4, i32 %184] [^b16, i32 0] [^if.then6, i32 %191];
    i32 %160 = load i32* %3;
    i32 %161 = add i32 %160, i32 1;
    store i32* %3 with i32 %161;
    i32* %162 = getelementptr &(i32* %3)[i32 %161];
    store i32* %162 with i32 %159;
    ubr ^entry17;
  ^if.then1:
    i32 %163 = sub i32 %141, i32 %138;
    ubr ^b10;
  ^entry24:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b6;
  ^b11:
    i1 %164 = icmp slt i32 %87, i32 11;
    cbr i1 %164(prob = 0.97), ^entry25, ^entry23;
  ^b12:
    i1 %165 = icmp eq i32 %151, i32 42;
    i1 %166 = icmp eq i32 %151, i32 37;
    i1 %167 = or i1 %165, i1 %166;
    i1 %168 = icmp eq i32 %151, i32 47;
    i1 %169 = icmp sle i32 %87, i32 0;
    i1 %170 = or i1 %168, i1 %169;
    i1 %171 = or i1 %167, i1 %170;
    cbr i1 %171(prob = 0.97), ^entry25, ^entry23;
  ^b13:
    i1 %172 = icmp eq i32 %134, i32 42;
    cbr i1 %172(prob = 0.5), ^if.then2, ^b14;
  ^if.then2:
    i32 %173 = mul i32 %138, i32 %141;
    ubr ^b10;
  ^entry25:
    i32 %174 = add i32 %147, i32 -1;
    store i32* %5 with i32 %174;
    i32 %175 = load i32* %3;
    i32* %176 = getelementptr &(i32* %3)[i32 %175];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %175, i32 -1;
    store i32* %3 with i32 %178;
    i32* %179 = getelementptr &(i32* %176)[i64 -1];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %175, i32 -2;
    store i32* %3 with i32 %181;
    cbr i1 %152(prob = 0.5), ^if.then3, ^b15;
  ^b14:
    i1 %182 = icmp eq i32 %134, i32 47;
    cbr i1 %182(prob = 0.5), ^if.then4, ^b16;
  ^if.then3:
    i32 %183 = add i32 %177, i32 %180;
    ubr ^b17;
  ^if.then4:
    i32 %184 = sdiv i32 %141, i32 %138;
    ubr ^b10;
  ^b15:
    cbr i1 %153(prob = 0.5), ^if.then5, ^b18;
  ^b16:
    i1 %185 = icmp eq i32 %134, i32 37;
    cbr i1 %185(prob = 0.5), ^if.then6, ^b10;
  ^b17:
    i32 %186 = phi [^if.then3, i32 %183] [^if.then5, i32 %190] [^if.then7, i32 %193] [^if.then8, i32 %195] [^b20, i32 0] [^if.then9, i32 %197];
    i32 %187 = load i32* %3;
    i32 %188 = add i32 %187, i32 1;
    store i32* %3 with i32 %188;
    i32* %189 = getelementptr &(i32* %3)[i32 %188];
    store i32* %189 with i32 %186;
    ubr ^entry21;
  ^if.then5:
    i32 %190 = sub i32 %180, i32 %177;
    ubr ^b17;
  ^if.then6:
    i32 %191 = srem i32 %141, i32 %138;
    ubr ^b10;
  ^b18:
    i1 %192 = icmp eq i32 %151, i32 42;
    cbr i1 %192(prob = 0.5), ^if.then7, ^b19;
  ^if.then7:
    i32 %193 = mul i32 %177, i32 %180;
    ubr ^b17;
  ^b19:
    i1 %194 = icmp eq i32 %151, i32 47;
    cbr i1 %194(prob = 0.5), ^if.then8, ^b20;
  ^if.then8:
    i32 %195 = sdiv i32 %180, i32 %177;
    ubr ^b17;
  ^b20:
    i1 %196 = icmp eq i32 %151, i32 37;
    cbr i1 %196(prob = 0.5), ^if.then9, ^b17;
  ^if.then9:
    i32 %197 = srem i32 %180, i32 %177;
    ubr ^b17;
}
internal [256 * i32]* @oprs;
internal [256 * i32]* @ops;
