internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %5 = ptrcast i32* %4 to i8*;
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^entry, i32 32] [^entry1, i32 %10];
    i1 %7 = scmp eq i32 %6, i32 32;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
^b:
    i1 %8 = scmp eq i32 %6, i32 10;
    ubr ^b1;
^b1:
    i1 %9 = phi [^while.header, i1 true] [^b, i1 %8];
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
^entry1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header;
^entry2:
    i1 %11 = scmp gt i32 %6, i32 47;
    i1 %12 = scmp lt i32 %6, i32 58;
    i1 %13 = and i1 %11, i1 %12;
    cbr i1 %13(prob = 0.25), ^if.then, ^if.else;
^if.then:
    i32 %14 = add i32 %6, i32 -48;
    ubr ^entry3;
^if.else:
    i32 %15 = call () -> i32 @getch();
    ubr ^entry4;
^entry3:
    i32 %16 = phi [^if.then, i32 %14] [^while.body1, i32 %31];
    i32 %17 = call () -> i32 @getch();
    i1 %18 = scmp gt i32 %17, i32 47;
    cbr i1 %18(prob = 0.5), ^b2, ^b3;
^entry4:
    i32 %19 = phi [^if.else, i32 %15] [^b3, i32 %17];
    i32 %20 = phi [^if.else, i32 undef] [^b3, i32 %16];
    i32 %21 = phi [^if.else, i32 1] [^b3, i32 0];
    i1 %22 = scmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body, ^b4;
^b2:
    i1 %23 = scmp le i32 %17, i32 57;
    ubr ^b3;
^while.body:
    i32 %24 = phi [^entry4, i32 %19] [^b8, i32 %76];
    i32 %25 = phi [^entry4, i32 %20] [^b8, i32 %77];
    i32 %26 = phi [^entry4, i32 %21] [^b8, i32 %78];
    i32 %27 = phi [^entry4, i32 %0] [^b8, i32 %80];
    ubr ^b5;
^b3:
    i1 %28 = phi [^entry3, i1 false] [^b2, i1 %23];
    cbr i1 %28(prob = 0.97), ^while.body1, ^entry4;
^b4:
    ret i32 0;
^while.body1:
    i32 %29 = mul i32 %16, i32 10;
    i32 %30 = add i32 %17, i32 -48;
    i32 %31 = add i32 %30, i32 %29;
    ubr ^entry3;
^b5:
    i64 %32 = phi [^while.body, i64 0] [^b5, i64 %49];
    i8* %33 = getelementptr &(i8* %3)[i64 %32];
    store i8* %33 with i8 0;
    i8* %34 = getelementptr &(i8* %33)[i64 1];
    store i8* %34 with i8 0;
    i8* %35 = getelementptr &(i8* %33)[i64 2];
    store i8* %35 with i8 0;
    i8* %36 = getelementptr &(i8* %33)[i64 3];
    store i8* %36 with i8 0;
    i8* %37 = getelementptr &(i8* %33)[i64 4];
    store i8* %37 with i8 0;
    i8* %38 = getelementptr &(i8* %33)[i64 5];
    store i8* %38 with i8 0;
    i8* %39 = getelementptr &(i8* %33)[i64 6];
    store i8* %39 with i8 0;
    i8* %40 = getelementptr &(i8* %33)[i64 7];
    store i8* %40 with i8 0;
    i8* %41 = getelementptr &(i8* %33)[i64 8];
    store i8* %41 with i8 0;
    i8* %42 = getelementptr &(i8* %33)[i64 9];
    store i8* %42 with i8 0;
    i8* %43 = getelementptr &(i8* %33)[i64 10];
    store i8* %43 with i8 0;
    i8* %44 = getelementptr &(i8* %33)[i64 11];
    store i8* %44 with i8 0;
    i8* %45 = getelementptr &(i8* %33)[i64 12];
    store i8* %45 with i8 0;
    i8* %46 = getelementptr &(i8* %33)[i64 13];
    store i8* %46 with i8 0;
    i8* %47 = getelementptr &(i8* %33)[i64 14];
    store i8* %47 with i8 0;
    i8* %48 = getelementptr &(i8* %33)[i64 15];
    store i8* %48 with i8 0;
    i64 %49 = add i64 %32, i64 16;
    i1 %50 = scmp lt i64 %49, i64 1024;
    cbr i1 %50(prob = 0.98), ^b5, ^b6;
^b6:
    i64 %51 = phi [^b5, i64 0] [^b6, i64 %68];
    i8* %52 = getelementptr &(i8* %5)[i64 %51];
    store i8* %52 with i8 0;
    i8* %53 = getelementptr &(i8* %52)[i64 1];
    store i8* %53 with i8 0;
    i8* %54 = getelementptr &(i8* %52)[i64 2];
    store i8* %54 with i8 0;
    i8* %55 = getelementptr &(i8* %52)[i64 3];
    store i8* %55 with i8 0;
    i8* %56 = getelementptr &(i8* %52)[i64 4];
    store i8* %56 with i8 0;
    i8* %57 = getelementptr &(i8* %52)[i64 5];
    store i8* %57 with i8 0;
    i8* %58 = getelementptr &(i8* %52)[i64 6];
    store i8* %58 with i8 0;
    i8* %59 = getelementptr &(i8* %52)[i64 7];
    store i8* %59 with i8 0;
    i8* %60 = getelementptr &(i8* %52)[i64 8];
    store i8* %60 with i8 0;
    i8* %61 = getelementptr &(i8* %52)[i64 9];
    store i8* %61 with i8 0;
    i8* %62 = getelementptr &(i8* %52)[i64 10];
    store i8* %62 with i8 0;
    i8* %63 = getelementptr &(i8* %52)[i64 11];
    store i8* %63 with i8 0;
    i8* %64 = getelementptr &(i8* %52)[i64 12];
    store i8* %64 with i8 0;
    i8* %65 = getelementptr &(i8* %52)[i64 13];
    store i8* %65 with i8 0;
    i8* %66 = getelementptr &(i8* %52)[i64 14];
    store i8* %66 with i8 0;
    i8* %67 = getelementptr &(i8* %52)[i64 15];
    store i8* %67 with i8 0;
    i64 %68 = add i64 %51, i64 16;
    i1 %69 = scmp lt i64 %68, i64 1024;
    cbr i1 %69(prob = 0.98), ^b6, ^entry5;
^entry5:
    i1 %70 = scmp neq i32 %26, i32 0;
    cbr i1 %70(prob = 0.5), ^entry6, ^b7;
^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b7:
    i32 %71 = phi [^entry5, i32 %24] [^entry23, i32 %132];
    i32 %72 = phi [^entry5, i32 %25] [^entry23, i32 %133];
    i32 %73 = load i32* %2;
    i32 %74 = add i32 %73, i32 1;
    store i32* %2 with i32 %74;
    i32* %75 = getelementptr &(i32* %2)[i32 %74];
    store i32* %75 with i32 %72;
    ubr ^while.header1;
^b8:
    i32 %76 = phi [^entry6, i32 %24] [^entry20, i32 %141] [^entry24, i32 %132];
    i32 %77 = phi [^entry6, i32 %25] [^entry20, i32 %142] [^entry24, i32 %133];
    i32 %78 = phi [^entry6, i32 %26] [^entry20, i32 %143] [^entry24, i32 %134];
    i32 %79 = phi [^entry6, i32 -1] [^entry20, i32 %155] [^entry24, i32 -1];
    call (i32) -> void @putint(i32 %79);
    call (i32) -> void @putch(i32 10);
    i32 %80 = add i32 %27, i32 -1;
    i1 %81 = scmp neq i32 %80, i32 0;
    cbr i1 %81(prob = 0.97), ^while.body, ^b4;
^while.header1:
    i32 %82 = phi [^b7, i32 %71] [^entry7, i32 %86];
    i1 %83 = scmp eq i32 %82, i32 32;
    cbr i1 %83(prob = 0.5), ^b10, ^b9;
^b9:
    i1 %84 = scmp eq i32 %82, i32 10;
    ubr ^b10;
^b10:
    i1 %85 = phi [^while.header1, i1 true] [^b9, i1 %84];
    cbr i1 %85(prob = 0.97), ^entry7, ^entry8;
^entry7:
    i32 %86 = call () -> i32 @getch();
    ubr ^while.header1;
^entry8:
    i1 %87 = scmp gt i32 %82, i32 47;
    i1 %88 = scmp lt i32 %82, i32 58;
    i1 %89 = and i1 %87, i1 %88;
    cbr i1 %89(prob = 0.25), ^if.then1, ^if.else1;
^if.then1:
    i32 %90 = add i32 %82, i32 -48;
    ubr ^entry9;
^if.else1:
    i32 %91 = call () -> i32 @getch();
    i1 %92 = scmp eq i32 %82, i32 43;
    cbr i1 %92(prob = 0.5), ^b11, ^b12;
^entry9:
    i32 %93 = phi [^if.then1, i32 %90] [^while.body2, i32 %108];
    i32 %94 = call () -> i32 @getch();
    i1 %95 = scmp gt i32 %94, i32 47;
    cbr i1 %95(prob = 0.5), ^b13, ^b14;
^b11:
    i32 %96 = phi [^if.else1, i32 10] [^b12, i32 10] [^b15, i32 20] [^b18, i32 20] [^b21, i32 20] [^b22, i32 0];
    i1 %97 = scmp eq i32 %96, i32 0;
    cbr i1 %97(prob = 0.5), ^entry10, ^while.header2;
^b12:
    i1 %98 = scmp eq i32 %82, i32 45;
    cbr i1 %98(prob = 0.5), ^b11, ^b15;
^b13:
    i1 %99 = scmp le i32 %94, i32 57;
    ubr ^b14;
^entry10:
    i32 %100 = phi [^b11, i32 %72] [^b14, i32 %93];
    i32 %101 = phi [^b11, i32 %91] [^b14, i32 %94];
    ubr ^while.header3;
^b14:
    i1 %102 = phi [^entry9, i1 false] [^b13, i1 %99];
    cbr i1 %102(prob = 0.97), ^while.body2, ^entry10;
^while.header2:
    i32 %103 = phi [^b11, i32 %91] [^entry11, i32 %115];
    i1 %104 = scmp eq i32 %103, i32 32;
    cbr i1 %104(prob = 0.5), ^b17, ^b16;
^b15:
    i1 %105 = scmp eq i32 %82, i32 42;
    cbr i1 %105(prob = 0.5), ^b11, ^b18;
^while.body2:
    i32 %106 = mul i32 %93, i32 10;
    i32 %107 = add i32 %94, i32 -48;
    i32 %108 = add i32 %107, i32 %106;
    ubr ^entry9;
^while.header3:
    i32 %109 = phi [^entry10, i32 %101] [^entry13, i32 %121];
    i1 %110 = scmp eq i32 %109, i32 32;
    cbr i1 %110(prob = 0.5), ^b20, ^b19;
^b16:
    i1 %111 = scmp eq i32 %103, i32 10;
    ubr ^b17;
^b17:
    i1 %112 = phi [^while.header2, i1 true] [^b16, i1 %111];
    cbr i1 %112(prob = 0.97), ^entry11, ^entry12;
^b18:
    i1 %113 = scmp eq i32 %82, i32 47;
    cbr i1 %113(prob = 0.5), ^b11, ^b21;
^b19:
    i1 %114 = scmp eq i32 %109, i32 10;
    ubr ^b20;
^entry11:
    i32 %115 = call () -> i32 @getch();
    ubr ^while.header2;
^b20:
    i1 %116 = phi [^while.header3, i1 true] [^b19, i1 %114];
    cbr i1 %116(prob = 0.97), ^entry13, ^entry14;
^entry12:
    i1 %117 = scmp gt i32 %103, i32 47;
    i1 %118 = scmp lt i32 %103, i32 58;
    i1 %119 = and i1 %117, i1 %118;
    cbr i1 %119(prob = 0.25), ^if.then2, ^if.else2;
^b21:
    i1 %120 = scmp eq i32 %82, i32 37;
    cbr i1 %120(prob = 0.5), ^b11, ^b22;
^entry13:
    i32 %121 = call () -> i32 @getch();
    ubr ^while.header3;
^if.then2:
    i32 %122 = add i32 %103, i32 -48;
    ubr ^entry15;
^entry14:
    i1 %123 = scmp gt i32 %109, i32 47;
    i1 %124 = scmp lt i32 %109, i32 58;
    i1 %125 = and i1 %123, i1 %124;
    cbr i1 %125(prob = 0.25), ^if.then3, ^if.else3;
^if.else2:
    i32 %126 = call () -> i32 @getch();
    ubr ^entry16;
^b22:
    ubr ^b11;
^if.then3:
    i32 %127 = add i32 %109, i32 -48;
    ubr ^entry17;
^if.else3:
    i32 %128 = call () -> i32 @getch();
    ubr ^entry18;
^entry15:
    i32 %129 = phi [^if.then2, i32 %122] [^while.body3, i32 %158];
    i32 %130 = call () -> i32 @getch();
    i1 %131 = scmp gt i32 %130, i32 47;
    cbr i1 %131(prob = 0.5), ^b23, ^b24;
^entry16:
    i32 %132 = phi [^if.else2, i32 %126] [^b24, i32 %130] [^b34, i32 %132];
    i32 %133 = phi [^if.else2, i32 %72] [^b24, i32 %129] [^b34, i32 %133];
    i32 %134 = phi [^if.else2, i32 1] [^b24, i32 0] [^b34, i32 %134];
    i32 %135 = load i32* %4;
    i1 %136 = scmp neq i32 %135, i32 0;
    cbr i1 %136(prob = 0.5), ^entry19, ^b25;
^b23:
    i1 %137 = scmp le i32 %130, i32 57;
    ubr ^b24;
^entry17:
    i32 %138 = phi [^if.then3, i32 %127] [^while.body4, i32 %201];
    i32 %139 = call () -> i32 @getch();
    i1 %140 = scmp gt i32 %139, i32 47;
    cbr i1 %140(prob = 0.5), ^b26, ^b28;
^entry18:
    i32 %141 = phi [^if.else3, i32 %128] [^b28, i32 %139] [^b33, i32 %141];
    i32 %142 = phi [^if.else3, i32 %100] [^b28, i32 %138] [^b33, i32 %142];
    i32 %143 = phi [^if.else3, i32 1] [^b28, i32 0] [^b33, i32 %143];
    i32 %144 = load i32* %4;
    i1 %145 = scmp neq i32 %144, i32 0;
    cbr i1 %145(prob = 0.97), ^entry21, ^entry20;
^b24:
    i1 %146 = phi [^entry15, i1 false] [^b23, i1 %137];
    cbr i1 %146(prob = 0.97), ^while.body3, ^entry16;
^entry19:
    i32 %147 = load i32* %4;
    i32* %148 = getelementptr &(i32* %4)[i32 %147];
    i32 %149 = load i32* %148;
    i1 %150 = scmp eq i32 %149, i32 43;
    cbr i1 %150(prob = 0.5), ^b27, ^b29;
^b25:
    i1 %151 = phi [^entry16, i1 false] [^b27, i1 %160];
    cbr i1 %151(prob = 0.97), ^entry22, ^entry23;
^b26:
    i1 %152 = scmp le i32 %139, i32 57;
    ubr ^b28;
^entry20:
    i32 %153 = load i32* %2;
    i32* %154 = getelementptr &(i32* %2)[i32 %153];
    i32 %155 = load i32* %154;
    ubr ^b8;
^while.body3:
    i32 %156 = mul i32 %129, i32 10;
    i32 %157 = add i32 %130, i32 -48;
    i32 %158 = add i32 %157, i32 %156;
    ubr ^entry15;
^b27:
    i32 %159 = phi [^entry19, i32 10] [^b29, i32 10] [^b31, i32 20] [^b36, i32 20] [^b39, i32 20] [^b42, i32 0];
    i1 %160 = scmp ge i32 %159, i32 %96;
    ubr ^b25;
^b28:
    i1 %161 = phi [^entry17, i1 false] [^b26, i1 %152];
    cbr i1 %161(prob = 0.97), ^while.body4, ^entry18;
^entry21:
    i32 %162 = load i32* %4;
    i32* %163 = getelementptr &(i32* %4)[i32 %162];
    i32 %164 = load i32* %163;
    i32 %165 = load i32* %4;
    i32 %166 = add i32 %165, i32 -1;
    store i32* %4 with i32 %166;
    i32 %167 = load i32* %2;
    i32* %168 = getelementptr &(i32* %2)[i32 %167];
    i32 %169 = load i32* %168;
    i32 %170 = load i32* %2;
    i32 %171 = add i32 %170, i32 -1;
    store i32* %2 with i32 %171;
    i32 %172 = load i32* %2;
    i32* %173 = getelementptr &(i32* %2)[i32 %172];
    i32 %174 = load i32* %173;
    i32 %175 = load i32* %2;
    i32 %176 = add i32 %175, i32 -1;
    store i32* %2 with i32 %176;
    i1 %177 = scmp eq i32 %164, i32 43;
    cbr i1 %177(prob = 0.5), ^if.then4, ^b30;
^entry22:
    i32 %178 = load i32* %4;
    i32* %179 = getelementptr &(i32* %4)[i32 %178];
    i32 %180 = load i32* %179;
    i32 %181 = load i32* %4;
    i32 %182 = add i32 %181, i32 -1;
    store i32* %4 with i32 %182;
    i32 %183 = load i32* %2;
    i32* %184 = getelementptr &(i32* %2)[i32 %183];
    i32 %185 = load i32* %184;
    i32 %186 = load i32* %2;
    i32 %187 = add i32 %186, i32 -1;
    store i32* %2 with i32 %187;
    i32 %188 = load i32* %2;
    i32* %189 = getelementptr &(i32* %2)[i32 %188];
    i32 %190 = load i32* %189;
    i32 %191 = load i32* %2;
    i32 %192 = add i32 %191, i32 -1;
    store i32* %2 with i32 %192;
    i1 %193 = scmp eq i32 %180, i32 43;
    cbr i1 %193(prob = 0.5), ^if.then5, ^b32;
^b29:
    i1 %194 = scmp eq i32 %149, i32 45;
    cbr i1 %194(prob = 0.5), ^b27, ^b31;
^entry23:
    i32 %195 = load i32* %4;
    i32 %196 = add i32 %195, i32 1;
    store i32* %4 with i32 %196;
    i32* %197 = getelementptr &(i32* %4)[i32 %196];
    store i32* %197 with i32 %82;
    i1 %198 = scmp neq i32 %134, i32 0;
    cbr i1 %198(prob = 0.5), ^entry24, ^b7;
^while.body4:
    i32 %199 = mul i32 %138, i32 10;
    i32 %200 = add i32 %139, i32 -48;
    i32 %201 = add i32 %200, i32 %199;
    ubr ^entry17;
^if.then4:
    i32 %202 = add i32 %169, i32 %174;
    ubr ^b33;
^if.then5:
    i32 %203 = add i32 %185, i32 %190;
    ubr ^b34;
^b30:
    i1 %204 = scmp eq i32 %164, i32 45;
    cbr i1 %204(prob = 0.5), ^if.then6, ^b35;
^entry24:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b8;
^b31:
    i1 %205 = scmp eq i32 %149, i32 42;
    cbr i1 %205(prob = 0.5), ^b27, ^b36;
^b32:
    i1 %206 = scmp eq i32 %180, i32 45;
    cbr i1 %206(prob = 0.5), ^if.then7, ^b37;
^b33:
    i32 %207 = phi [^if.then4, i32 %202] [^if.then6, i32 %211] [^if.then8, i32 %220] [^if.then10, i32 %225] [^b41, i32 0] [^if.then12, i32 %229];
    i32 %208 = load i32* %2;
    i32 %209 = add i32 %208, i32 1;
    store i32* %2 with i32 %209;
    i32* %210 = getelementptr &(i32* %2)[i32 %209];
    store i32* %210 with i32 %207;
    ubr ^entry18;
^if.then6:
    i32 %211 = sub i32 %174, i32 %169;
    ubr ^b33;
^b34:
    i32 %212 = phi [^if.then5, i32 %203] [^if.then7, i32 %216] [^if.then9, i32 %221] [^if.then11, i32 %226] [^b43, i32 0] [^if.then13, i32 %230];
    i32 %213 = load i32* %2;
    i32 %214 = add i32 %213, i32 1;
    store i32* %2 with i32 %214;
    i32* %215 = getelementptr &(i32* %2)[i32 %214];
    store i32* %215 with i32 %212;
    ubr ^entry16;
^if.then7:
    i32 %216 = sub i32 %190, i32 %185;
    ubr ^b34;
^b35:
    i1 %217 = scmp eq i32 %164, i32 42;
    cbr i1 %217(prob = 0.5), ^if.then8, ^b38;
^b36:
    i1 %218 = scmp eq i32 %149, i32 47;
    cbr i1 %218(prob = 0.5), ^b27, ^b39;
^b37:
    i1 %219 = scmp eq i32 %180, i32 42;
    cbr i1 %219(prob = 0.5), ^if.then9, ^b40;
^if.then8:
    i32 %220 = mul i32 %169, i32 %174;
    ubr ^b33;
^if.then9:
    i32 %221 = mul i32 %185, i32 %190;
    ubr ^b34;
^b38:
    i1 %222 = scmp eq i32 %164, i32 47;
    cbr i1 %222(prob = 0.5), ^if.then10, ^b41;
^b39:
    i1 %223 = scmp eq i32 %149, i32 37;
    cbr i1 %223(prob = 0.5), ^b27, ^b42;
^b40:
    i1 %224 = scmp eq i32 %180, i32 47;
    cbr i1 %224(prob = 0.5), ^if.then11, ^b43;
^if.then10:
    i32 %225 = sdiv i32 %174, i32 %169;
    ubr ^b33;
^if.then11:
    i32 %226 = sdiv i32 %190, i32 %185;
    ubr ^b34;
^b41:
    i1 %227 = scmp eq i32 %164, i32 37;
    cbr i1 %227(prob = 0.5), ^if.then12, ^b33;
^b42:
    ubr ^b27;
^b43:
    i1 %228 = scmp eq i32 %180, i32 37;
    cbr i1 %228(prob = 0.5), ^if.then13, ^b34;
^if.then12:
    i32 %229 = srem i32 %174, i32 %169;
    ubr ^b33;
^if.then13:
    i32 %230 = srem i32 %190, i32 %185;
    ubr ^b34;
}
