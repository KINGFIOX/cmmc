internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^while.header, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^b1;
  ^while.header:
    i32 %13 = phi [^b, i32 %10] [^while.body1, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^while.header;
  ^b1:
    i32 %19 = phi [^if.else, i32 %12] [^while.header, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^while.header, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^while.header, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.984615), ^while.body2, ^b2;
  ^while.body2:
    i32 %23 = phi [^b1, i32 %19] [^b7, i32 %173];
    i32 %24 = phi [^b1, i32 %20] [^b7, i32 %174];
    i32 %25 = phi [^b1, i32 %21] [^b7, i32 %175];
    i32 %26 = phi [^b1, i32 %0] [^b7, i32 %177];
    ubr ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i32 %27 = phi [^while.body2, i32 0] [^b3, i32 %92];
    i32* %28 = getelementptr &(i32* %3)[i32 %27];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %28)[i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %28)[i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %28)[i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %28)[i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %28)[i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %28)[i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %28)[i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %28)[i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %28)[i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %28)[i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %28)[i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %28)[i64 15];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %28)[i64 16];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %28)[i64 17];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %28)[i64 18];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %28)[i64 19];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %28)[i64 20];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %28)[i64 21];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %28)[i64 22];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %28)[i64 23];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %28)[i64 24];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %28)[i64 25];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %28)[i64 26];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %28)[i64 27];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %28)[i64 28];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %28)[i64 29];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %28)[i64 30];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %28)[i64 31];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %28)[i64 32];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %28)[i64 33];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %28)[i64 34];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %28)[i64 35];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %28)[i64 36];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %28)[i64 37];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %28)[i64 38];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %28)[i64 39];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %28)[i64 40];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %28)[i64 41];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %28)[i64 42];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %28)[i64 43];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %28)[i64 44];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %28)[i64 45];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %28)[i64 46];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %28)[i64 47];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %28)[i64 48];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %28)[i64 49];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %28)[i64 50];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %28)[i64 51];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %28)[i64 52];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %28)[i64 53];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %28)[i64 54];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %28)[i64 55];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %28)[i64 56];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %28)[i64 57];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %28)[i64 58];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %28)[i64 59];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %28)[i64 60];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %28)[i64 61];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %28)[i64 62];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %28)[i64 63];
    store i32* %91 with i32 0;
    i32 %92 = add i32 %27, i32 64;
    i1 %93 = icmp slt i32 %92, i32 256;
    cbr i1 %93(prob = 0.75), ^b3, ^b4;
  ^b4:
    i32 %94 = phi [^b3, i32 0] [^b4, i32 %159];
    i32* %95 = getelementptr &(i32* %5)[i32 %94];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %95)[i64 1];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %95)[i64 2];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %95)[i64 3];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %95)[i64 4];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %95)[i64 5];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %95)[i64 6];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %95)[i64 7];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %95)[i64 8];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %95)[i64 9];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %95)[i64 10];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %95)[i64 11];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %95)[i64 12];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %95)[i64 13];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %95)[i64 14];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %95)[i64 15];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %95)[i64 16];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %95)[i64 17];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %95)[i64 18];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %95)[i64 19];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %95)[i64 20];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %95)[i64 21];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %95)[i64 22];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %95)[i64 23];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %95)[i64 24];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %95)[i64 25];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %95)[i64 26];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %95)[i64 27];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %95)[i64 28];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %95)[i64 29];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %95)[i64 30];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %95)[i64 31];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %95)[i64 32];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %95)[i64 33];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %95)[i64 34];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %95)[i64 35];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %95)[i64 36];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %95)[i64 37];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %95)[i64 38];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %95)[i64 39];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %95)[i64 40];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %95)[i64 41];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %95)[i64 42];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %95)[i64 43];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %95)[i64 44];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %95)[i64 45];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %95)[i64 46];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %95)[i64 47];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %95)[i64 48];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %95)[i64 49];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %95)[i64 50];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %95)[i64 51];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %95)[i64 52];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %95)[i64 53];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %95)[i64 54];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %95)[i64 55];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &(i32* %95)[i64 56];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %95)[i64 57];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %95)[i64 58];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %95)[i64 59];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %95)[i64 60];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %95)[i64 61];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %95)[i64 62];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %95)[i64 63];
    store i32* %158 with i32 0;
    i32 %159 = add i32 %94, i32 64;
    i1 %160 = icmp slt i32 %159, i32 256;
    cbr i1 %160(prob = 0.75), ^b4, ^b5;
  ^b5:
    i1 %161 = icmp neq i32 %25, i32 0;
    cbr i1 %161(prob = 0.5), ^if.then, ^b6;
  ^if.then:
    i32 %162 = phi [^b5, i32 %23] [^b18, i32 %260];
    i32 %163 = phi [^b5, i32 %24] [^b18, i32 %261];
    i32 %164 = phi [^b5, i32 %25] [^b18, i32 %262];
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b7;
  ^b6:
    i32 %165 = phi [^b5, i32 %23] [^b18, i32 %260];
    i32 %166 = phi [^b5, i32 %24] [^b18, i32 %261];
    i32 %167 = load i32* %3;
    i32 %168 = add i32 %167, i32 1;
    store i32* %3 with i32 %168;
    i32* %169 = getelementptr &(i32* %3)[i32 %168];
    store i32* %169 with i32 %166;
    i1 %170 = icmp eq i32 %165, i32 32;
    i1 %171 = icmp eq i32 %165, i32 10;
    i1 %172 = or i1 %170, i1 %171;
    cbr i1 %172(prob = 0.984615), ^while.body3, ^b8;
  ^b7:
    i32 %173 = phi [^if.then, i32 %162] [^b15, i32 %234];
    i32 %174 = phi [^if.then, i32 %163] [^b15, i32 %235];
    i32 %175 = phi [^if.then, i32 %164] [^b15, i32 %236];
    i32 %176 = phi [^if.then, i32 -1] [^b15, i32 %247];
    call (i32) -> void @putint(i32 %176);
    call (i32) -> void @putch(i32 10);
    i32 %177 = add i32 %26, i32 -1;
    i1 %178 = icmp neq i32 %177, i32 0;
    cbr i1 %178(prob = 0.984615), ^while.body2, ^b2;
  ^while.body3:
    i32 %179 = call () -> i32 @getch();
    i1 %180 = icmp eq i32 %179, i32 32;
    i1 %181 = icmp eq i32 %179, i32 10;
    i1 %182 = or i1 %180, i1 %181;
    cbr i1 %182(prob = 0.984615), ^while.body3, ^b8;
  ^b8:
    i32 %183 = phi [^b6, i32 %165] [^while.body3, i32 %179];
    i32 %184 = add i32 %183, i32 -48;
    i1 %185 = icmp ult i32 %184, i32 10;
    cbr i1 %185(prob = 0.5), ^while.header1, ^if.else1;
  ^while.header1:
    i32 %186 = phi [^b8, i32 %184] [^while.body4, i32 %195];
    i32 %187 = call () -> i32 @getch();
    i32 %188 = add i32 %187, i32 -48;
    i1 %189 = icmp ult i32 %188, i32 10;
    cbr i1 %189(prob = 0.984615), ^while.body4, ^b11;
  ^if.else1:
    i32 %190 = call () -> i32 @getch();
    i1 %191 = icmp eq i32 %183, i32 43;
    i1 %192 = icmp eq i32 %183, i32 45;
    i1 %193 = or i1 %191, i1 %192;
    cbr i1 %193(prob = 0.5), ^b10, ^b9;
  ^while.body4:
    i32 %194 = mul i32 %186, i32 10;
    i32 %195 = add i32 %188, i32 %194;
    ubr ^while.header1;
  ^b9:
    i1 %196 = icmp eq i32 %183, i32 42;
    i1 %197 = icmp eq i32 %183, i32 47;
    i1 %198 = or i1 %196, i1 %197;
    i1 %199 = icmp eq i32 %183, i32 37;
    i1 %200 = or i1 %198, i1 %199;
    i32 %201 = select i1 %200 ? i32 20 : i32 0;
    ubr ^b10;
  ^b10:
    i32 %202 = phi [^if.else1, i32 10] [^b9, i32 %201];
    i1 %203 = icmp eq i32 %202, i32 0;
    cbr i1 %203(prob = 0.5), ^b11, ^b12;
  ^b11:
    i32 %204 = phi [^while.header1, i32 %186] [^b10, i32 %166];
    i32 %205 = phi [^while.header1, i32 %187] [^b10, i32 %190];
    i1 %206 = icmp eq i32 %205, i32 32;
    i1 %207 = icmp eq i32 %205, i32 10;
    i1 %208 = or i1 %206, i1 %207;
    cbr i1 %208(prob = 0.984615), ^while.body5, ^b13;
  ^while.body5:
    i32 %209 = call () -> i32 @getch();
    i1 %210 = icmp eq i32 %209, i32 32;
    i1 %211 = icmp eq i32 %209, i32 10;
    i1 %212 = or i1 %210, i1 %211;
    cbr i1 %212(prob = 0.984615), ^while.body5, ^b13;
  ^b12:
    i1 %213 = icmp eq i32 %190, i32 32;
    i1 %214 = icmp eq i32 %190, i32 10;
    i1 %215 = or i1 %213, i1 %214;
    cbr i1 %215(prob = 0.984615), ^while.body6, ^b14;
  ^b13:
    i32 %216 = phi [^b11, i32 %205] [^while.body5, i32 %209];
    i32 %217 = add i32 %216, i32 -48;
    i1 %218 = icmp ult i32 %217, i32 10;
    cbr i1 %218(prob = 0.5), ^while.header2, ^if.else2;
  ^if.else2:
    i32 %219 = call () -> i32 @getch();
    ubr ^while.header3;
  ^while.body6:
    i32 %220 = call () -> i32 @getch();
    i1 %221 = icmp eq i32 %220, i32 32;
    i1 %222 = icmp eq i32 %220, i32 10;
    i1 %223 = or i1 %221, i1 %222;
    cbr i1 %223(prob = 0.984615), ^while.body6, ^b14;
  ^while.header2:
    i32 %224 = phi [^b13, i32 %217] [^while.body7, i32 %232];
    i32 %225 = call () -> i32 @getch();
    i32 %226 = add i32 %225, i32 -48;
    i1 %227 = icmp ult i32 %226, i32 10;
    cbr i1 %227(prob = 0.984615), ^while.body7, ^while.header3;
  ^b14:
    i32 %228 = phi [^b12, i32 %190] [^while.body6, i32 %220];
    i32 %229 = add i32 %228, i32 -48;
    i1 %230 = icmp ult i32 %229, i32 10;
    cbr i1 %230(prob = 0.5), ^while.header4, ^if.else3;
  ^while.body7:
    i32 %231 = mul i32 %224, i32 10;
    i32 %232 = add i32 %226, i32 %231;
    ubr ^while.header2;
  ^if.else3:
    i32 %233 = call () -> i32 @getch();
    ubr ^while.header5;
  ^while.header3:
    i32 %234 = phi [^if.else2, i32 %219] [^while.header2, i32 %225];
    i32 %235 = phi [^if.else2, i32 %204] [^while.header2, i32 %224];
    i32 %236 = phi [^if.else2, i32 1] [^while.header2, i32 0];
    i32 %237 = load i32* %5;
    i1 %238 = icmp neq i32 %237, i32 0;
    cbr i1 %238(prob = 0.984615), ^while.body9, ^b15;
  ^while.header4:
    i32 %239 = phi [^b14, i32 %229] [^while.body8, i32 %244];
    i32 %240 = call () -> i32 @getch();
    i32 %241 = add i32 %240, i32 -48;
    i1 %242 = icmp ult i32 %241, i32 10;
    cbr i1 %242(prob = 0.984615), ^while.body8, ^while.header5;
  ^while.body8:
    i32 %243 = mul i32 %239, i32 10;
    i32 %244 = add i32 %241, i32 %243;
    ubr ^while.header4;
  ^b15:
    i32 %245 = load i32* %3;
    i32* %246 = getelementptr &(i32* %3)[i32 %245];
    i32 %247 = load i32* %246;
    ubr ^b7;
  ^while.body9:
    i32 %248 = phi [^while.header3, i32 %237] [^b19, i32 %280];
    i32* %249 = getelementptr &(i32* %5)[i32 %248];
    i32 %250 = load i32* %249;
    i32 %251 = add i32 %248, i32 -1;
    store i32* %5 with i32 %251;
    i32 %252 = load i32* %3;
    i32* %253 = getelementptr &(i32* %3)[i32 %252];
    i32 %254 = load i32* %253;
    i32 %255 = add i32 %252, i32 -1;
    store i32* %3 with i32 %255;
    i32* %256 = getelementptr &(i32* %253)[i64 -1];
    i32 %257 = load i32* %256;
    i32 %258 = add i32 %252, i32 -2;
    store i32* %3 with i32 %258;
    i1 %259 = icmp eq i32 %250, i32 43;
    cbr i1 %259(prob = 0.5), ^if.then1, ^b17;
  ^while.header5:
    i32 %260 = phi [^if.else3, i32 %233] [^while.header4, i32 %240] [^b26, i32 %260];
    i32 %261 = phi [^if.else3, i32 %166] [^while.header4, i32 %239] [^b26, i32 %261];
    i32 %262 = phi [^if.else3, i32 1] [^while.header4, i32 0] [^b26, i32 %262];
    i32 %263 = load i32* %5;
    i32* %264 = getelementptr &(i32* %5)[i32 %263];
    i1 %265 = icmp neq i32 %263, i32 0;
    cbr i1 %265(prob = 0.5), ^b16, ^b18;
  ^if.then1:
    i32 %266 = add i32 %254, i32 %257;
    ubr ^b19;
  ^b16:
    i32 %267 = load i32* %264;
    i1 %268 = icmp eq i32 %267, i32 43;
    i1 %269 = icmp eq i32 %267, i32 45;
    i1 %270 = or i1 %268, i1 %269;
    cbr i1 %270(prob = 0.5), ^b20, ^b21;
  ^b17:
    i1 %271 = icmp eq i32 %250, i32 45;
    cbr i1 %271(prob = 0.5), ^if.then2, ^b22;
  ^b18:
    i32 %272 = add i32 %263, i32 1;
    store i32* %5 with i32 %272;
    i32* %273 = getelementptr &(i32* %264)[i64 1];
    store i32* %273 with i32 %183;
    i1 %274 = icmp eq i32 %262, i32 0;
    cbr i1 %274(prob = 0.5), ^b6, ^if.then;
  ^if.then2:
    i32 %275 = sub i32 %257, i32 %254;
    ubr ^b19;
  ^b19:
    i32 %276 = phi [^if.then1, i32 %266] [^if.then2, i32 %275] [^if.then3, i32 %291] [^if.then5, i32 %302] [^b25, i32 0] [^if.then7, i32 %309];
    i32 %277 = load i32* %3;
    i32 %278 = add i32 %277, i32 1;
    store i32* %3 with i32 %278;
    i32* %279 = getelementptr &(i32* %3)[i32 %278];
    store i32* %279 with i32 %276;
    i32 %280 = load i32* %5;
    i1 %281 = icmp neq i32 %280, i32 0;
    cbr i1 %281(prob = 0.984615), ^while.body9, ^b15;
  ^b20:
    i1 %282 = icmp slt i32 %202, i32 11;
    cbr i1 %282(prob = 0.984615), ^while.body10, ^b18;
  ^b21:
    i1 %283 = icmp eq i32 %267, i32 42;
    i1 %284 = icmp eq i32 %267, i32 47;
    i1 %285 = or i1 %283, i1 %284;
    i1 %286 = icmp eq i32 %267, i32 37;
    i1 %287 = or i1 %285, i1 %286;
    i1 %288 = icmp slt i32 %202, i32 1;
    i1 %289 = or i1 %287, i1 %288;
    cbr i1 %289(prob = 0.984615), ^while.body10, ^b18;
  ^b22:
    i1 %290 = icmp eq i32 %250, i32 42;
    cbr i1 %290(prob = 0.5), ^if.then3, ^b23;
  ^if.then3:
    i32 %291 = mul i32 %254, i32 %257;
    ubr ^b19;
  ^while.body10:
    i32 %292 = add i32 %263, i32 -1;
    store i32* %5 with i32 %292;
    i32 %293 = load i32* %3;
    i32* %294 = getelementptr &(i32* %3)[i32 %293];
    i32 %295 = load i32* %294;
    i32 %296 = add i32 %293, i32 -1;
    store i32* %3 with i32 %296;
    i32* %297 = getelementptr &(i32* %294)[i64 -1];
    i32 %298 = load i32* %297;
    i32 %299 = add i32 %293, i32 -2;
    store i32* %3 with i32 %299;
    cbr i1 %268(prob = 0.5), ^if.then4, ^b24;
  ^b23:
    i1 %300 = icmp eq i32 %250, i32 47;
    cbr i1 %300(prob = 0.5), ^if.then5, ^b25;
  ^if.then4:
    i32 %301 = add i32 %295, i32 %298;
    ubr ^b26;
  ^if.then5:
    i32 %302 = sdiv i32 %257, i32 %254;
    ubr ^b19;
  ^b24:
    cbr i1 %269(prob = 0.5), ^if.then6, ^b27;
  ^b25:
    i1 %303 = icmp eq i32 %250, i32 37;
    cbr i1 %303(prob = 0.5), ^if.then7, ^b19;
  ^b26:
    i32 %304 = phi [^if.then4, i32 %301] [^if.then6, i32 %308] [^if.then8, i32 %311] [^if.then9, i32 %313] [^b29, i32 0] [^if.then10, i32 %315];
    i32 %305 = load i32* %3;
    i32 %306 = add i32 %305, i32 1;
    store i32* %3 with i32 %306;
    i32* %307 = getelementptr &(i32* %3)[i32 %306];
    store i32* %307 with i32 %304;
    ubr ^while.header5;
  ^if.then6:
    i32 %308 = sub i32 %298, i32 %295;
    ubr ^b26;
  ^if.then7:
    i32 %309 = srem i32 %257, i32 %254;
    ubr ^b19;
  ^b27:
    i1 %310 = icmp eq i32 %267, i32 42;
    cbr i1 %310(prob = 0.5), ^if.then8, ^b28;
  ^if.then8:
    i32 %311 = mul i32 %295, i32 %298;
    ubr ^b26;
  ^b28:
    i1 %312 = icmp eq i32 %267, i32 47;
    cbr i1 %312(prob = 0.5), ^if.then9, ^b29;
  ^if.then9:
    i32 %313 = sdiv i32 %298, i32 %295;
    ubr ^b26;
  ^b29:
    i1 %314 = icmp eq i32 %267, i32 37;
    cbr i1 %314(prob = 0.5), ^if.then10, ^b26;
  ^if.then10:
    i32 %315 = srem i32 %298, i32 %295;
    ubr ^b26;
}
internal [256 * i32]* @oprs, align 8 { Flexible };
internal [256 * i32]* @ops, align 8 { Flexible };
