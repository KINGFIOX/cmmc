internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp eq i32 %6, i32 32;
    i1 %8 = scmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = ucmp lt i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = call () -> i32 @getch();
    i32 %14 = add i32 %13, i32 -48;
    i1 %15 = ucmp lt i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %16 = phi [^entry3, i32 %13] [^while.body, i32 %20];
    i32 %17 = phi [^entry3, i32 %10] [^while.body, i32 %24];
    ubr ^entry4;
  ^while.body:
    i32 %18 = phi [^entry3, i32 %14] [^while.body, i32 %21];
    i32 %19 = phi [^entry3, i32 %10] [^while.body, i32 %24];
    i32 %20 = call () -> i32 @getch();
    i32 %21 = add i32 %20, i32 -48;
    i1 %22 = ucmp lt i32 %21, i32 10;
    i32 %23 = mul i32 %19, i32 10;
    i32 %24 = add i32 %18, i32 %23;
    cbr i1 %22(prob = 0.97), ^while.body, ^b;
  ^entry4:
    i32 %25 = phi [^if.else, i32 %6] [^b, i32 0];
    i32 %26 = phi [^if.else, i32 %12] [^b, i32 %16];
    i32 %27 = phi [^if.else, i32 0] [^b, i32 %17];
    i32 %28 = phi [^if.else, i32 1] [^b, i32 0];
    i1 %29 = scmp neq i32 %0, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %30 = phi [^entry4, i32 %25] [^b5, i32 %83];
    i32 %31 = phi [^entry4, i32 %26] [^b5, i32 %84];
    i32 %32 = phi [^entry4, i32 %27] [^b5, i32 %85];
    i32 %33 = phi [^entry4, i32 %28] [^b5, i32 %86];
    i32 %34 = phi [^entry4, i32 %0] [^b5, i32 %88];
    ubr ^b2;
  ^b1:
    ret i32 0;
  ^b2:
    i64 %35 = phi [^while.body1, i64 0] [^b2, i64 %52];
    i32* %36 = getelementptr &(i32* %3)[i64 %35];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %36)[i64 4];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %36)[i64 5];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %36)[i64 6];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %36)[i64 7];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %36)[i64 8];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %36)[i64 9];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %36)[i64 10];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %36)[i64 11];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %36)[i64 12];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %36)[i64 13];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %36)[i64 14];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %36)[i64 15];
    store i32* %51 with i32 0;
    i64 %52 = add i64 %35, i64 16;
    i1 %53 = scmp lt i64 %52, i64 256;
    cbr i1 %53(prob = 0.94), ^b2, ^b3;
  ^b3:
    i64 %54 = phi [^b2, i64 0] [^b3, i64 %71];
    i32* %55 = getelementptr &(i32* %5)[i64 %54];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %55)[i64 1];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %55)[i64 2];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %55)[i64 3];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %55)[i64 4];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %55)[i64 5];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %55)[i64 6];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %55)[i64 7];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %55)[i64 8];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %55)[i64 9];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %55)[i64 10];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %55)[i64 11];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %55)[i64 12];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %55)[i64 13];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %55)[i64 14];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %55)[i64 15];
    store i32* %70 with i32 0;
    i64 %71 = add i64 %54, i64 16;
    i1 %72 = scmp lt i64 %71, i64 256;
    cbr i1 %72(prob = 0.94), ^b3, ^entry5;
  ^entry5:
    i1 %73 = scmp neq i32 %33, i32 0;
    cbr i1 %73(prob = 0.5), ^entry6, ^b4;
  ^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^b4:
    i32 %74 = phi [^entry5, i32 %30] [^entry24, i32 %187];
    i32 %75 = phi [^entry5, i32 %31] [^entry24, i32 %188];
    i32 %76 = phi [^entry5, i32 %32] [^entry24, i32 %189];
    i32 %77 = load i32* %3;
    i32 %78 = add i32 %77, i32 1;
    store i32* %3 with i32 %78;
    i32* %79 = getelementptr &(i32* %3)[i32 %78];
    store i32* %79 with i32 %76;
    i1 %80 = scmp eq i32 %75, i32 32;
    i1 %81 = scmp eq i32 %75, i32 10;
    i1 %82 = or i1 %80, i1 %81;
    cbr i1 %82(prob = 0.97), ^entry7, ^entry8;
  ^b5:
    i32 %83 = phi [^entry6, i32 %30] [^entry18, i32 %153] [^entry25, i32 %187];
    i32 %84 = phi [^entry6, i32 %31] [^entry18, i32 %154] [^entry25, i32 %188];
    i32 %85 = phi [^entry6, i32 %32] [^entry18, i32 %155] [^entry25, i32 %189];
    i32 %86 = phi [^entry6, i32 %33] [^entry18, i32 %156] [^entry25, i32 %190];
    i32 %87 = phi [^entry6, i32 -1] [^entry18, i32 %162] [^entry25, i32 -1];
    call (i32) -> void @putint(i32 %87);
    call (i32) -> void @putch(i32 10);
    i32 %88 = add i32 %34, i32 -1;
    i1 %89 = scmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.97), ^while.body1, ^b1;
  ^entry7:
    i32 %90 = call () -> i32 @getch();
    i1 %91 = scmp eq i32 %90, i32 32;
    i1 %92 = scmp eq i32 %90, i32 10;
    i1 %93 = or i1 %91, i1 %92;
    cbr i1 %93(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %94 = phi [^b4, i32 %75] [^entry7, i32 %90];
    i32 %95 = add i32 %94, i32 -48;
    i1 %96 = ucmp lt i32 %95, i32 10;
    cbr i1 %96(prob = 0.5), ^entry9, ^if.else1;
  ^if.else1:
    i32 %97 = call () -> i32 @getch();
    ubr ^b6;
  ^entry9:
    i32 %98 = phi [^entry8, i32 %95] [^while.body2, i32 %103];
    i32 %99 = call () -> i32 @getch();
    i32 %100 = add i32 %99, i32 -48;
    i1 %101 = ucmp lt i32 %100, i32 10;
    cbr i1 %101(prob = 0.97), ^while.body2, ^b6;
  ^while.body2:
    i32 %102 = mul i32 %98, i32 10;
    i32 %103 = add i32 %100, i32 %102;
    ubr ^entry9;
  ^b6:
    i32 %104 = phi [^if.else1, i32 %76] [^entry9, i32 %98];
    i32 %105 = phi [^if.else1, i32 %97] [^entry9, i32 %99];
    i32 %106 = phi [^if.else1, i32 %94] [^entry9, i32 %74];
    i32 %107 = phi [^if.else1, i32 1] [^entry9, i32 0];
    i1 %108 = scmp eq i32 %107, i32 1;
    cbr i1 %108(prob = 0.97), ^while.body3, ^entry10;
  ^while.body3:
    i1 %109 = scmp eq i32 %106, i32 43;
    i1 %110 = scmp eq i32 %106, i32 45;
    i1 %111 = or i1 %109, i1 %110;
    cbr i1 %111(prob = 0.5), ^b8, ^b7;
  ^entry10:
    i1 %112 = scmp eq i32 %105, i32 32;
    i1 %113 = scmp eq i32 %105, i32 10;
    i1 %114 = or i1 %112, i1 %113;
    cbr i1 %114(prob = 0.97), ^entry11, ^entry12;
  ^b7:
    i1 %115 = scmp eq i32 %106, i32 42;
    i1 %116 = scmp eq i32 %106, i32 47;
    i1 %117 = or i1 %115, i1 %116;
    i1 %118 = scmp eq i32 %106, i32 37;
    i1 %119 = or i1 %117, i1 %118;
    i32 %120 = select i1 %119 ? i32 20 : i32 0;
    ubr ^b8;
  ^b8:
    i32 %121 = phi [^while.body3, i32 10] [^b7, i32 %120];
    i1 %122 = scmp eq i32 %121, i32 0;
    cbr i1 %122(prob = 0.5), ^entry10, ^entry13;
  ^entry11:
    i32 %123 = call () -> i32 @getch();
    i1 %124 = scmp eq i32 %123, i32 32;
    i1 %125 = scmp eq i32 %123, i32 10;
    i1 %126 = or i1 %124, i1 %125;
    cbr i1 %126(prob = 0.97), ^entry11, ^entry12;
  ^entry12:
    i32 %127 = phi [^entry10, i32 %105] [^entry11, i32 %123];
    i32 %128 = add i32 %127, i32 -48;
    i1 %129 = ucmp lt i32 %128, i32 10;
    cbr i1 %129(prob = 0.5), ^entry14, ^if.else2;
  ^if.else2:
    i32 %130 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry13:
    i1 %131 = scmp eq i32 %105, i32 32;
    i1 %132 = scmp eq i32 %105, i32 10;
    i1 %133 = or i1 %131, i1 %132;
    cbr i1 %133(prob = 0.97), ^entry15, ^entry16;
  ^entry14:
    i32 %134 = call () -> i32 @getch();
    i32 %135 = add i32 %134, i32 -48;
    i1 %136 = ucmp lt i32 %135, i32 10;
    cbr i1 %136(prob = 0.97), ^while.body4, ^b9;
  ^entry15:
    i32 %137 = call () -> i32 @getch();
    i1 %138 = scmp eq i32 %137, i32 32;
    i1 %139 = scmp eq i32 %137, i32 10;
    i1 %140 = or i1 %138, i1 %139;
    cbr i1 %140(prob = 0.97), ^entry15, ^entry16;
  ^b9:
    i32 %141 = phi [^entry14, i32 %134] [^while.body4, i32 %148];
    i32 %142 = phi [^entry14, i32 %128] [^while.body4, i32 %152];
    ubr ^entry17;
  ^entry16:
    i32 %143 = phi [^entry13, i32 %105] [^entry15, i32 %137];
    i32 %144 = add i32 %143, i32 -48;
    i1 %145 = ucmp lt i32 %144, i32 10;
    cbr i1 %145(prob = 0.5), ^entry19, ^if.else3;
  ^while.body4:
    i32 %146 = phi [^entry14, i32 %135] [^while.body4, i32 %149];
    i32 %147 = phi [^entry14, i32 %128] [^while.body4, i32 %152];
    i32 %148 = call () -> i32 @getch();
    i32 %149 = add i32 %148, i32 -48;
    i1 %150 = ucmp lt i32 %149, i32 10;
    i32 %151 = mul i32 %147, i32 10;
    i32 %152 = add i32 %146, i32 %151;
    cbr i1 %150(prob = 0.97), ^while.body4, ^b9;
  ^entry17:
    i32 %153 = phi [^if.else2, i32 %127] [^b9, i32 %106] [^b12, i32 %153];
    i32 %154 = phi [^if.else2, i32 %130] [^b9, i32 %141] [^b12, i32 %154];
    i32 %155 = phi [^if.else2, i32 %104] [^b9, i32 %142] [^b12, i32 %155];
    i32 %156 = phi [^if.else2, i32 1] [^b9, i32 0] [^b12, i32 %156];
    i32 %157 = load i32* %5;
    i1 %158 = scmp neq i32 %157, i32 0;
    cbr i1 %158(prob = 0.97), ^entry20, ^entry18;
  ^if.else3:
    i32 %159 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry18:
    i32 %160 = load i32* %3;
    i32* %161 = getelementptr &(i32* %3)[i32 %160];
    i32 %162 = load i32* %161;
    ubr ^b5;
  ^entry19:
    i32 %163 = call () -> i32 @getch();
    i32 %164 = add i32 %163, i32 -48;
    i1 %165 = ucmp lt i32 %164, i32 10;
    cbr i1 %165(prob = 0.97), ^while.body5, ^b10;
  ^entry20:
    i32* %166 = getelementptr &(i32* %5)[i32 %157];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %157, i32 -1;
    store i32* %5 with i32 %168;
    i32 %169 = load i32* %3;
    i32* %170 = getelementptr &(i32* %3)[i32 %169];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 -1;
    store i32* %3 with i32 %172;
    i32* %173 = getelementptr &(i32* %170)[i64 -1];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %169, i32 -2;
    store i32* %3 with i32 %175;
    i1 %176 = scmp eq i32 %167, i32 43;
    cbr i1 %176(prob = 0.5), ^if.then, ^b11;
  ^if.then:
    i32 %177 = add i32 %171, i32 %174;
    ubr ^b12;
  ^b10:
    i32 %178 = phi [^entry19, i32 %163] [^while.body5, i32 %182];
    i32 %179 = phi [^entry19, i32 %144] [^while.body5, i32 %186];
    ubr ^entry21;
  ^while.body5:
    i32 %180 = phi [^entry19, i32 %164] [^while.body5, i32 %183];
    i32 %181 = phi [^entry19, i32 %144] [^while.body5, i32 %186];
    i32 %182 = call () -> i32 @getch();
    i32 %183 = add i32 %182, i32 -48;
    i1 %184 = ucmp lt i32 %183, i32 10;
    i32 %185 = mul i32 %181, i32 10;
    i32 %186 = add i32 %180, i32 %185;
    cbr i1 %184(prob = 0.97), ^while.body5, ^b10;
  ^entry21:
    i32 %187 = phi [^if.else3, i32 %143] [^b10, i32 %106] [^b20, i32 %187];
    i32 %188 = phi [^if.else3, i32 %159] [^b10, i32 %178] [^b20, i32 %188];
    i32 %189 = phi [^if.else3, i32 %104] [^b10, i32 %179] [^b20, i32 %189];
    i32 %190 = phi [^if.else3, i32 1] [^b10, i32 0] [^b20, i32 %190];
    i32 %191 = load i32* %5;
    i1 %192 = scmp neq i32 %191, i32 0;
    cbr i1 %192(prob = 0.5), ^entry22, ^b13;
  ^b11:
    i1 %193 = scmp eq i32 %167, i32 45;
    cbr i1 %193(prob = 0.5), ^if.then1, ^b14;
  ^b12:
    i32 %194 = phi [^if.then, i32 %177] [^if.then1, i32 %198] [^if.then2, i32 %214] [^if.then4, i32 %233] [^b19, i32 0] [^if.then6, i32 %241];
    i32 %195 = load i32* %3;
    i32 %196 = add i32 %195, i32 1;
    store i32* %3 with i32 %196;
    i32* %197 = getelementptr &(i32* %3)[i32 %196];
    store i32* %197 with i32 %194;
    ubr ^entry17;
  ^if.then1:
    i32 %198 = sub i32 %174, i32 %171;
    ubr ^b12;
  ^entry22:
    i32* %199 = getelementptr &(i32* %5)[i32 %191];
    i32 %200 = load i32* %199;
    i1 %201 = scmp eq i32 %200, i32 43;
    i1 %202 = scmp eq i32 %200, i32 45;
    i1 %203 = or i1 %201, i1 %202;
    cbr i1 %203(prob = 0.5), ^b15, ^b16;
  ^b13:
    i1 %204 = phi [^entry21, i1 false] [^b15, i1 %207];
    cbr i1 %204(prob = 0.97), ^entry23, ^entry24;
  ^b14:
    i1 %205 = scmp eq i32 %167, i32 42;
    cbr i1 %205(prob = 0.5), ^if.then2, ^b17;
  ^b15:
    i32 %206 = phi [^entry22, i32 10] [^b16, i32 %213];
    i1 %207 = scmp le i32 %121, i32 %206;
    ubr ^b13;
  ^b16:
    i1 %208 = scmp eq i32 %200, i32 42;
    i1 %209 = scmp eq i32 %200, i32 47;
    i1 %210 = or i1 %208, i1 %209;
    i1 %211 = scmp eq i32 %200, i32 37;
    i1 %212 = or i1 %210, i1 %211;
    i32 %213 = select i1 %212 ? i32 20 : i32 0;
    ubr ^b15;
  ^if.then2:
    i32 %214 = mul i32 %171, i32 %174;
    ubr ^b12;
  ^entry23:
    i32 %215 = load i32* %5;
    i32* %216 = getelementptr &(i32* %5)[i32 %215];
    i32 %217 = load i32* %216;
    i32 %218 = add i32 %215, i32 -1;
    store i32* %5 with i32 %218;
    i32 %219 = load i32* %3;
    i32* %220 = getelementptr &(i32* %3)[i32 %219];
    i32 %221 = load i32* %220;
    i32 %222 = add i32 %219, i32 -1;
    store i32* %3 with i32 %222;
    i32* %223 = getelementptr &(i32* %220)[i64 -1];
    i32 %224 = load i32* %223;
    i1 %225 = scmp eq i32 %217, i32 43;
    i32 %226 = add i32 %219, i32 -2;
    store i32* %3 with i32 %226;
    cbr i1 %225(prob = 0.5), ^if.then3, ^b18;
  ^entry24:
    i32 %227 = load i32* %5;
    i32 %228 = add i32 %227, i32 1;
    store i32* %5 with i32 %228;
    i32* %229 = getelementptr &(i32* %5)[i32 %228];
    store i32* %229 with i32 %106;
    i1 %230 = scmp neq i32 %190, i32 0;
    cbr i1 %230(prob = 0.5), ^entry25, ^b4;
  ^b17:
    i1 %231 = scmp eq i32 %167, i32 47;
    cbr i1 %231(prob = 0.5), ^if.then4, ^b19;
  ^if.then3:
    i32 %232 = add i32 %221, i32 %224;
    ubr ^b20;
  ^entry25:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b5;
  ^if.then4:
    i32 %233 = sdiv i32 %174, i32 %171;
    ubr ^b12;
  ^b18:
    i1 %234 = scmp eq i32 %217, i32 45;
    cbr i1 %234(prob = 0.5), ^if.then5, ^b21;
  ^b19:
    i1 %235 = scmp eq i32 %167, i32 37;
    cbr i1 %235(prob = 0.5), ^if.then6, ^b12;
  ^b20:
    i32 %236 = phi [^if.then3, i32 %232] [^if.then5, i32 %240] [^if.then7, i32 %243] [^if.then8, i32 %245] [^b23, i32 0] [^if.then9, i32 %247];
    i32 %237 = load i32* %3;
    i32 %238 = add i32 %237, i32 1;
    store i32* %3 with i32 %238;
    i32* %239 = getelementptr &(i32* %3)[i32 %238];
    store i32* %239 with i32 %236;
    ubr ^entry21;
  ^if.then5:
    i32 %240 = sub i32 %224, i32 %221;
    ubr ^b20;
  ^if.then6:
    i32 %241 = srem i32 %174, i32 %171;
    ubr ^b12;
  ^b21:
    i1 %242 = scmp eq i32 %217, i32 42;
    cbr i1 %242(prob = 0.5), ^if.then7, ^b22;
  ^if.then7:
    i32 %243 = mul i32 %221, i32 %224;
    ubr ^b20;
  ^b22:
    i1 %244 = scmp eq i32 %217, i32 47;
    cbr i1 %244(prob = 0.5), ^if.then8, ^b23;
  ^if.then8:
    i32 %245 = sdiv i32 %224, i32 %221;
    ubr ^b20;
  ^b23:
    i1 %246 = scmp eq i32 %217, i32 37;
    cbr i1 %246(prob = 0.5), ^if.then9, ^b20;
  ^if.then9:
    i32 %247 = srem i32 %224, i32 %221;
    ubr ^b20;
}
internal [256 * i32]* @oprs;
internal [256 * i32]* @ops;
