internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = scmp eq i32 %6, i32 32;
    i1 %8 = scmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = ucmp lt i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = call () -> i32 @getch();
    i32 %14 = add i32 %13, i32 -48;
    i1 %15 = ucmp lt i32 %14, i32 10;
    cbr i1 %15(prob = 0.97), ^while.body, ^entry4;
  ^while.body:
    i32 %16 = phi [^entry3, i32 %14] [^while.body, i32 %19];
    i32 %17 = phi [^entry3, i32 %10] [^while.body, i32 %22];
    i32 %18 = call () -> i32 @getch();
    i32 %19 = add i32 %18, i32 -48;
    i1 %20 = ucmp lt i32 %19, i32 10;
    i32 %21 = mul i32 %17, i32 10;
    i32 %22 = add i32 %16, i32 %21;
    cbr i1 %20(prob = 0.97), ^while.body, ^entry4;
  ^entry4:
    i32 %23 = phi [^if.else, i32 %6] [^entry3, i32 0] [^while.body, i32 0];
    i32 %24 = phi [^if.else, i32 %12] [^entry3, i32 %13] [^while.body, i32 %18];
    i32 %25 = phi [^if.else, i32 0] [^entry3, i32 %10] [^while.body, i32 %22];
    i32 %26 = phi [^if.else, i32 1] [^entry3, i32 0] [^while.body, i32 0];
    i1 %27 = scmp neq i32 %0, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %28 = phi [^entry4, i32 %23] [^b4, i32 %81];
    i32 %29 = phi [^entry4, i32 %24] [^b4, i32 %82];
    i32 %30 = phi [^entry4, i32 %25] [^b4, i32 %83];
    i32 %31 = phi [^entry4, i32 %26] [^b4, i32 %84];
    i32 %32 = phi [^entry4, i32 %0] [^b4, i32 %86];
    ubr ^b1;
  ^b:
    ret i32 0;
  ^b1:
    i64 %33 = phi [^while.body1, i64 0] [^b1, i64 %50];
    i32* %34 = getelementptr &(i32* %3)[i64 %33];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %34)[i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %34)[i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %34)[i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %34)[i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %34)[i64 5];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %34)[i64 6];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %34)[i64 7];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %34)[i64 8];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %34)[i64 9];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %34)[i64 10];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %34)[i64 11];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %34)[i64 12];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %34)[i64 13];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %34)[i64 14];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %34)[i64 15];
    store i32* %49 with i32 0;
    i64 %50 = add i64 %33, i64 16;
    i1 %51 = scmp lt i64 %50, i64 256;
    cbr i1 %51(prob = 0.94), ^b1, ^b2;
  ^b2:
    i64 %52 = phi [^b1, i64 0] [^b2, i64 %69];
    i32* %53 = getelementptr &(i32* %5)[i64 %52];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %53)[i64 1];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %53)[i64 2];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %53)[i64 3];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %53)[i64 4];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %53)[i64 5];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %53)[i64 6];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %53)[i64 7];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %53)[i64 8];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %53)[i64 9];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %53)[i64 10];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %53)[i64 11];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %53)[i64 12];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %53)[i64 13];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %53)[i64 14];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %53)[i64 15];
    store i32* %68 with i32 0;
    i64 %69 = add i64 %52, i64 16;
    i1 %70 = scmp lt i64 %69, i64 256;
    cbr i1 %70(prob = 0.94), ^b2, ^entry5;
  ^entry5:
    i1 %71 = scmp neq i32 %31, i32 0;
    cbr i1 %71(prob = 0.5), ^entry6, ^b3;
  ^entry6:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
  ^b3:
    i32 %72 = phi [^entry5, i32 %28] [^entry24, i32 %181];
    i32 %73 = phi [^entry5, i32 %29] [^entry24, i32 %182];
    i32 %74 = phi [^entry5, i32 %30] [^entry24, i32 %183];
    i32 %75 = load i32* %3;
    i32 %76 = add i32 %75, i32 1;
    store i32* %3 with i32 %76;
    i32* %77 = getelementptr &(i32* %3)[i32 %76];
    store i32* %77 with i32 %74;
    i1 %78 = scmp eq i32 %73, i32 32;
    i1 %79 = scmp eq i32 %73, i32 10;
    i1 %80 = or i1 %78, i1 %79;
    cbr i1 %80(prob = 0.97), ^entry7, ^entry8;
  ^b4:
    i32 %81 = phi [^entry6, i32 %28] [^entry18, i32 %149] [^entry25, i32 %181];
    i32 %82 = phi [^entry6, i32 %29] [^entry18, i32 %150] [^entry25, i32 %182];
    i32 %83 = phi [^entry6, i32 %30] [^entry18, i32 %151] [^entry25, i32 %183];
    i32 %84 = phi [^entry6, i32 %31] [^entry18, i32 %152] [^entry25, i32 %184];
    i32 %85 = phi [^entry6, i32 -1] [^entry18, i32 %158] [^entry25, i32 -1];
    call (i32) -> void @putint(i32 %85);
    call (i32) -> void @putch(i32 10);
    i32 %86 = add i32 %32, i32 -1;
    i1 %87 = scmp neq i32 %86, i32 0;
    cbr i1 %87(prob = 0.97), ^while.body1, ^b;
  ^entry7:
    i32 %88 = call () -> i32 @getch();
    i1 %89 = scmp eq i32 %88, i32 32;
    i1 %90 = scmp eq i32 %88, i32 10;
    i1 %91 = or i1 %89, i1 %90;
    cbr i1 %91(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %92 = phi [^b3, i32 %73] [^entry7, i32 %88];
    i32 %93 = add i32 %92, i32 -48;
    i1 %94 = ucmp lt i32 %93, i32 10;
    cbr i1 %94(prob = 0.5), ^entry9, ^if.else1;
  ^if.else1:
    i32 %95 = call () -> i32 @getch();
    ubr ^b5;
  ^entry9:
    i32 %96 = phi [^entry8, i32 %93] [^while.body2, i32 %101];
    i32 %97 = call () -> i32 @getch();
    i32 %98 = add i32 %97, i32 -48;
    i1 %99 = ucmp lt i32 %98, i32 10;
    cbr i1 %99(prob = 0.97), ^while.body2, ^b5;
  ^while.body2:
    i32 %100 = mul i32 %96, i32 10;
    i32 %101 = add i32 %98, i32 %100;
    ubr ^entry9;
  ^b5:
    i32 %102 = phi [^if.else1, i32 %74] [^entry9, i32 %96];
    i32 %103 = phi [^if.else1, i32 %95] [^entry9, i32 %97];
    i32 %104 = phi [^if.else1, i32 %92] [^entry9, i32 %72];
    i32 %105 = phi [^if.else1, i32 1] [^entry9, i32 0];
    i1 %106 = scmp eq i32 %105, i32 1;
    cbr i1 %106(prob = 0.97), ^while.body3, ^entry10;
  ^while.body3:
    i1 %107 = scmp eq i32 %104, i32 43;
    i1 %108 = scmp eq i32 %104, i32 45;
    i1 %109 = or i1 %107, i1 %108;
    cbr i1 %109(prob = 0.5), ^b7, ^b6;
  ^entry10:
    i1 %110 = scmp eq i32 %103, i32 32;
    i1 %111 = scmp eq i32 %103, i32 10;
    i1 %112 = or i1 %110, i1 %111;
    cbr i1 %112(prob = 0.97), ^entry11, ^entry12;
  ^b6:
    i1 %113 = scmp eq i32 %104, i32 42;
    i1 %114 = scmp eq i32 %104, i32 47;
    i1 %115 = or i1 %113, i1 %114;
    i1 %116 = scmp eq i32 %104, i32 37;
    i1 %117 = or i1 %115, i1 %116;
    i32 %118 = select i1 %117 ? i32 20 : i32 0;
    ubr ^b7;
  ^b7:
    i32 %119 = phi [^while.body3, i32 10] [^b6, i32 %118];
    i1 %120 = scmp eq i32 %119, i32 0;
    cbr i1 %120(prob = 0.5), ^entry10, ^entry13;
  ^entry11:
    i32 %121 = call () -> i32 @getch();
    i1 %122 = scmp eq i32 %121, i32 32;
    i1 %123 = scmp eq i32 %121, i32 10;
    i1 %124 = or i1 %122, i1 %123;
    cbr i1 %124(prob = 0.97), ^entry11, ^entry12;
  ^entry12:
    i32 %125 = phi [^entry10, i32 %103] [^entry11, i32 %121];
    i32 %126 = add i32 %125, i32 -48;
    i1 %127 = ucmp lt i32 %126, i32 10;
    cbr i1 %127(prob = 0.5), ^entry14, ^if.else2;
  ^if.else2:
    i32 %128 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry13:
    i1 %129 = scmp eq i32 %103, i32 32;
    i1 %130 = scmp eq i32 %103, i32 10;
    i1 %131 = or i1 %129, i1 %130;
    cbr i1 %131(prob = 0.97), ^entry15, ^entry16;
  ^entry14:
    i32 %132 = call () -> i32 @getch();
    i32 %133 = add i32 %132, i32 -48;
    i1 %134 = ucmp lt i32 %133, i32 10;
    cbr i1 %134(prob = 0.97), ^while.body4, ^entry17;
  ^entry15:
    i32 %135 = call () -> i32 @getch();
    i1 %136 = scmp eq i32 %135, i32 32;
    i1 %137 = scmp eq i32 %135, i32 10;
    i1 %138 = or i1 %136, i1 %137;
    cbr i1 %138(prob = 0.97), ^entry15, ^entry16;
  ^entry16:
    i32 %139 = phi [^entry13, i32 %103] [^entry15, i32 %135];
    i32 %140 = add i32 %139, i32 -48;
    i1 %141 = ucmp lt i32 %140, i32 10;
    cbr i1 %141(prob = 0.5), ^entry19, ^if.else3;
  ^while.body4:
    i32 %142 = phi [^entry14, i32 %133] [^while.body4, i32 %145];
    i32 %143 = phi [^entry14, i32 %126] [^while.body4, i32 %148];
    i32 %144 = call () -> i32 @getch();
    i32 %145 = add i32 %144, i32 -48;
    i1 %146 = ucmp lt i32 %145, i32 10;
    i32 %147 = mul i32 %143, i32 10;
    i32 %148 = add i32 %142, i32 %147;
    cbr i1 %146(prob = 0.97), ^while.body4, ^entry17;
  ^entry17:
    i32 %149 = phi [^if.else2, i32 %125] [^entry14, i32 %104] [^while.body4, i32 %104] [^b9, i32 %149];
    i32 %150 = phi [^if.else2, i32 %128] [^entry14, i32 %132] [^while.body4, i32 %144] [^b9, i32 %150];
    i32 %151 = phi [^if.else2, i32 %102] [^entry14, i32 %126] [^while.body4, i32 %148] [^b9, i32 %151];
    i32 %152 = phi [^if.else2, i32 1] [^entry14, i32 0] [^while.body4, i32 0] [^b9, i32 %152];
    i32 %153 = load i32* %5;
    i1 %154 = scmp neq i32 %153, i32 0;
    cbr i1 %154(prob = 0.97), ^entry20, ^entry18;
  ^if.else3:
    i32 %155 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry18:
    i32 %156 = load i32* %3;
    i32* %157 = getelementptr &(i32* %3)[i32 %156];
    i32 %158 = load i32* %157;
    ubr ^b4;
  ^entry19:
    i32 %159 = call () -> i32 @getch();
    i32 %160 = add i32 %159, i32 -48;
    i1 %161 = ucmp lt i32 %160, i32 10;
    cbr i1 %161(prob = 0.97), ^while.body5, ^entry21;
  ^entry20:
    i32* %162 = getelementptr &(i32* %5)[i32 %153];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %153, i32 -1;
    store i32* %5 with i32 %164;
    i32 %165 = load i32* %3;
    i32* %166 = getelementptr &(i32* %3)[i32 %165];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %165, i32 -1;
    store i32* %3 with i32 %168;
    i32* %169 = getelementptr &(i32* %166)[i64 -1];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %165, i32 -2;
    store i32* %3 with i32 %171;
    i1 %172 = scmp eq i32 %163, i32 43;
    cbr i1 %172(prob = 0.5), ^if.then, ^b8;
  ^if.then:
    i32 %173 = add i32 %167, i32 %170;
    ubr ^b9;
  ^while.body5:
    i32 %174 = phi [^entry19, i32 %160] [^while.body5, i32 %177];
    i32 %175 = phi [^entry19, i32 %140] [^while.body5, i32 %180];
    i32 %176 = call () -> i32 @getch();
    i32 %177 = add i32 %176, i32 -48;
    i1 %178 = ucmp lt i32 %177, i32 10;
    i32 %179 = mul i32 %175, i32 10;
    i32 %180 = add i32 %174, i32 %179;
    cbr i1 %178(prob = 0.97), ^while.body5, ^entry21;
  ^entry21:
    i32 %181 = phi [^if.else3, i32 %139] [^entry19, i32 %104] [^while.body5, i32 %104] [^b17, i32 %181];
    i32 %182 = phi [^if.else3, i32 %155] [^entry19, i32 %159] [^while.body5, i32 %176] [^b17, i32 %182];
    i32 %183 = phi [^if.else3, i32 %102] [^entry19, i32 %140] [^while.body5, i32 %180] [^b17, i32 %183];
    i32 %184 = phi [^if.else3, i32 1] [^entry19, i32 0] [^while.body5, i32 0] [^b17, i32 %184];
    i32 %185 = load i32* %5;
    i1 %186 = scmp neq i32 %185, i32 0;
    cbr i1 %186(prob = 0.5), ^entry22, ^b10;
  ^b8:
    i1 %187 = scmp eq i32 %163, i32 45;
    cbr i1 %187(prob = 0.5), ^if.then1, ^b11;
  ^b9:
    i32 %188 = phi [^if.then, i32 %173] [^if.then1, i32 %192] [^if.then2, i32 %208] [^if.then4, i32 %227] [^b16, i32 0] [^if.then6, i32 %235];
    i32 %189 = load i32* %3;
    i32 %190 = add i32 %189, i32 1;
    store i32* %3 with i32 %190;
    i32* %191 = getelementptr &(i32* %3)[i32 %190];
    store i32* %191 with i32 %188;
    ubr ^entry17;
  ^if.then1:
    i32 %192 = sub i32 %170, i32 %167;
    ubr ^b9;
  ^entry22:
    i32* %193 = getelementptr &(i32* %5)[i32 %185];
    i32 %194 = load i32* %193;
    i1 %195 = scmp eq i32 %194, i32 43;
    i1 %196 = scmp eq i32 %194, i32 45;
    i1 %197 = or i1 %195, i1 %196;
    cbr i1 %197(prob = 0.5), ^b12, ^b13;
  ^b10:
    i1 %198 = phi [^entry21, i1 false] [^b12, i1 %201];
    cbr i1 %198(prob = 0.97), ^entry23, ^entry24;
  ^b11:
    i1 %199 = scmp eq i32 %163, i32 42;
    cbr i1 %199(prob = 0.5), ^if.then2, ^b14;
  ^b12:
    i32 %200 = phi [^entry22, i32 10] [^b13, i32 %207];
    i1 %201 = scmp le i32 %119, i32 %200;
    ubr ^b10;
  ^b13:
    i1 %202 = scmp eq i32 %194, i32 42;
    i1 %203 = scmp eq i32 %194, i32 47;
    i1 %204 = or i1 %202, i1 %203;
    i1 %205 = scmp eq i32 %194, i32 37;
    i1 %206 = or i1 %204, i1 %205;
    i32 %207 = select i1 %206 ? i32 20 : i32 0;
    ubr ^b12;
  ^if.then2:
    i32 %208 = mul i32 %167, i32 %170;
    ubr ^b9;
  ^entry23:
    i32 %209 = load i32* %5;
    i32* %210 = getelementptr &(i32* %5)[i32 %209];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %209, i32 -1;
    store i32* %5 with i32 %212;
    i32 %213 = load i32* %3;
    i32* %214 = getelementptr &(i32* %3)[i32 %213];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %213, i32 -1;
    store i32* %3 with i32 %216;
    i32* %217 = getelementptr &(i32* %214)[i64 -1];
    i32 %218 = load i32* %217;
    i1 %219 = scmp eq i32 %211, i32 43;
    i32 %220 = add i32 %213, i32 -2;
    store i32* %3 with i32 %220;
    cbr i1 %219(prob = 0.5), ^if.then3, ^b15;
  ^entry24:
    i32 %221 = load i32* %5;
    i32 %222 = add i32 %221, i32 1;
    store i32* %5 with i32 %222;
    i32* %223 = getelementptr &(i32* %5)[i32 %222];
    store i32* %223 with i32 %104;
    i1 %224 = scmp neq i32 %184, i32 0;
    cbr i1 %224(prob = 0.5), ^entry25, ^b3;
  ^b14:
    i1 %225 = scmp eq i32 %163, i32 47;
    cbr i1 %225(prob = 0.5), ^if.then4, ^b16;
  ^if.then3:
    i32 %226 = add i32 %215, i32 %218;
    ubr ^b17;
  ^entry25:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
  ^if.then4:
    i32 %227 = sdiv i32 %170, i32 %167;
    ubr ^b9;
  ^b15:
    i1 %228 = scmp eq i32 %211, i32 45;
    cbr i1 %228(prob = 0.5), ^if.then5, ^b18;
  ^b16:
    i1 %229 = scmp eq i32 %163, i32 37;
    cbr i1 %229(prob = 0.5), ^if.then6, ^b9;
  ^b17:
    i32 %230 = phi [^if.then3, i32 %226] [^if.then5, i32 %234] [^if.then7, i32 %237] [^if.then8, i32 %239] [^b20, i32 0] [^if.then9, i32 %241];
    i32 %231 = load i32* %3;
    i32 %232 = add i32 %231, i32 1;
    store i32* %3 with i32 %232;
    i32* %233 = getelementptr &(i32* %3)[i32 %232];
    store i32* %233 with i32 %230;
    ubr ^entry21;
  ^if.then5:
    i32 %234 = sub i32 %218, i32 %215;
    ubr ^b17;
  ^if.then6:
    i32 %235 = srem i32 %170, i32 %167;
    ubr ^b9;
  ^b18:
    i1 %236 = scmp eq i32 %211, i32 42;
    cbr i1 %236(prob = 0.5), ^if.then7, ^b19;
  ^if.then7:
    i32 %237 = mul i32 %215, i32 %218;
    ubr ^b17;
  ^b19:
    i1 %238 = scmp eq i32 %211, i32 47;
    cbr i1 %238(prob = 0.5), ^if.then8, ^b20;
  ^if.then8:
    i32 %239 = sdiv i32 %218, i32 %215;
    ubr ^b17;
  ^b20:
    i1 %240 = scmp eq i32 %211, i32 37;
    cbr i1 %240(prob = 0.5), ^if.then9, ^b17;
  ^if.then9:
    i32 %241 = srem i32 %218, i32 %215;
    ubr ^b17;
}
internal [256 * i32]* @oprs;
internal [256 * i32]* @ops;
