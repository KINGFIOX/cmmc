internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32* %cur_token = alloc i32;
    i32* %other = alloc i32;
    i32* %num = alloc i32;
    i32* %last_char = alloc i32;
    i32* %count = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %count with i32 %0;
    i32 %1 = call () -> i32 @getch();
    i32* %2 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    i32* %4 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %5 = ptrcast i32* %4 to i8*;
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^entry1, i32 %12] [^entry, i32 32];
    i1 %7 = scmp eq i32 %6, i32 32;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
^b:
    i1 %8 = scmp eq i32 %6, i32 10;
    ubr ^b1;
^b1:
    i1 %9 = phi [^while.header, i1 true] [^b, i1 %8];
    cbr i1 %9(prob = 0.5), ^while.header1, ^if.else;
^if.else:
    ubr ^while.header1;
^while.header1:
    i32 %10 = phi [^b1, i32 1] [^if.else, i32 0];
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^entry1, ^entry2;
^entry1:
    i32 %12 = call () -> i32 @getch();
    ubr ^while.header;
^entry2:
    i1 %13 = scmp gt i32 %6, i32 47;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %14 = scmp le i32 %6, i32 57;
    ubr ^b3;
^b3:
    i1 %15 = phi [^b2, i1 %14] [^entry2, i1 false];
    cbr i1 %15(prob = 0.5), ^b4, ^if.else1;
^if.else1:
    ubr ^b4;
^b4:
    i32 %16 = phi [^b3, i32 1] [^if.else1, i32 0];
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^if.else2;
^if.then:
    i32 %18 = add i32 %6, i32 -48;
    store i32* %num with i32 %18;
    ubr ^entry3;
^if.else2:
    store i32* %other with i32 %6;
    i32 %19 = call () -> i32 @getch();
    store i32* %last_char with i32 %19;
    store i32* %cur_token with i32 1;
    ubr ^while.header2;
^entry3:
    i32 %20 = phi [^while.body, i32 %45] [^if.then, i32 %18];
    i32 %21 = call () -> i32 @getch();
    store i32* %last_char with i32 %21;
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b5, ^b6;
^while.header2:
    i32 %23 = phi [^if.else2, i32 %0] [^b9, i32 %0] [^while.body1, i32 %47];
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^entry4, ^b7;
^b5:
    i1 %25 = scmp le i32 %21, i32 57;
    ubr ^b6;
^b6:
    i1 %26 = phi [^entry3, i1 false] [^b5, i1 %25];
    cbr i1 %26(prob = 0.5), ^while.header3, ^if.else3;
^entry4:
    i8* %27 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %3, i32 0, i64 1024);
    i8* %28 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %5, i32 0, i64 1024);
    i32 %29 = load i32* %count;
    i32 %30 = load i32* %last_char;
    i32 %31 = load i32* %num;
    i32 %32 = load i32* %other;
    i32 %33 = load i32* %cur_token;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^entry5, ^b8;
^b7:
    ret i32 0;
^entry5:
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body1;
^if.else3:
    ubr ^while.header3;
^b8:
    i32 %35 = phi [^b47, i32 %156] [^entry4, i32 %30];
    i32 %36 = phi [^b47, i32 %157] [^entry4, i32 %31];
    i32 %37 = phi [^b47, i32 %158] [^entry4, i32 %32];
    i32 %38 = load i32* %2;
    i32 %39 = add i32 %38, i32 1;
    store i32* %2 with i32 %39;
    i32* %40 = getelementptr &(i32* %2)[i32 %39];
    store i32* %40 with i32 %36;
    ubr ^while.header4;
^while.header3:
    i32 %41 = phi [^b6, i32 1] [^if.else3, i32 0];
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body, ^b9;
^while.body:
    i32 %43 = mul i32 %20, i32 10;
    i32 %44 = add i32 %21, i32 -48;
    i32 %45 = add i32 %44, i32 %43;
    store i32* %num with i32 %45;
    ubr ^entry3;
^while.body1:
    i32 %46 = phi [^entry15, i32 %121] [^entry5, i32 -1];
    call (i32) -> void @putint(i32 %46);
    call (i32) -> void @putch(i32 10);
    i32 %47 = add i32 %29, i32 -1;
    store i32* %count with i32 %47;
    ubr ^while.header2;
^b9:
    store i32* %cur_token with i32 0;
    ubr ^while.header2;
^while.header4:
    i32 %48 = phi [^entry6, i32 %54] [^b8, i32 %35];
    i1 %49 = scmp eq i32 %48, i32 32;
    cbr i1 %49(prob = 0.5), ^b11, ^b10;
^b10:
    i1 %50 = scmp eq i32 %48, i32 10;
    ubr ^b11;
^b11:
    i1 %51 = phi [^while.header4, i1 true] [^b10, i1 %50];
    cbr i1 %51(prob = 0.5), ^while.header5, ^if.else4;
^if.else4:
    ubr ^while.header5;
^while.header5:
    i32 %52 = phi [^b11, i32 1] [^if.else4, i32 0];
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.97), ^entry6, ^entry7;
^entry6:
    i32 %54 = call () -> i32 @getch();
    ubr ^while.header4;
^entry7:
    i1 %55 = scmp gt i32 %48, i32 47;
    cbr i1 %55(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %56 = scmp le i32 %48, i32 57;
    ubr ^b13;
^b13:
    i1 %57 = phi [^b12, i1 %56] [^entry7, i1 false];
    cbr i1 %57(prob = 0.5), ^b14, ^if.else5;
^if.else5:
    ubr ^b14;
^b14:
    i32 %58 = phi [^b13, i32 1] [^if.else5, i32 0];
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^if.then1, ^if.else6;
^if.then1:
    i32 %60 = add i32 %48, i32 -48;
    store i32* %num with i32 %60;
    ubr ^entry8;
^if.else6:
    store i32* %other with i32 %48;
    i32 %61 = call () -> i32 @getch();
    ubr ^b15;
^entry8:
    i32 %62 = phi [^while.body3, i32 %86] [^if.then1, i32 %60];
    i32 %63 = call () -> i32 @getch();
    i1 %64 = scmp gt i32 %63, i32 47;
    cbr i1 %64(prob = 0.5), ^b16, ^b17;
^b15:
    i32 %65 = phi [^while.header7, i32 %63] [^if.else6, i32 %61];
    i32 %66 = phi [^while.header7, i32 %62] [^if.else6, i32 %36];
    i32 %67 = phi [^while.header7, i32 %37] [^if.else6, i32 %48];
    i32 %68 = phi [^while.header7, i32 0] [^if.else6, i32 1];
    i1 %69 = scmp eq i32 %68, i32 1;
    cbr i1 %69(prob = 0.97), ^while.body2, ^while.header6;
^b16:
    i1 %70 = scmp le i32 %63, i32 57;
    ubr ^b17;
^while.body2:
    i1 %71 = scmp eq i32 %67, i32 37;
    i1 %72 = scmp eq i32 %67, i32 47;
    i1 %73 = scmp eq i32 %67, i32 42;
    i1 %74 = scmp eq i32 %67, i32 45;
    i1 %75 = scmp eq i32 %67, i32 43;
    cbr i1 %75(prob = 0.5), ^b19, ^b18;
^b17:
    i1 %76 = phi [^entry8, i1 false] [^b16, i1 %70];
    cbr i1 %76(prob = 0.5), ^while.header7, ^if.else7;
^while.header6:
    i32 %77 = phi [^while.body4, i32 %65] [^b15, i32 %65] [^entry9, i32 %91];
    i1 %78 = scmp eq i32 %77, i32 32;
    cbr i1 %78(prob = 0.5), ^b21, ^b20;
^if.else7:
    ubr ^while.header7;
^b18:
    ubr ^b19;
^while.header7:
    i32 %79 = phi [^b17, i32 1] [^if.else7, i32 0];
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.97), ^while.body3, ^b15;
^b19:
    i1 %81 = phi [^while.body2, i1 true] [^b18, i1 %74];
    cbr i1 %81(prob = 0.5), ^while.body4, ^b22;
^b20:
    i1 %82 = scmp eq i32 %77, i32 10;
    ubr ^b21;
^b21:
    i1 %83 = phi [^while.header6, i1 true] [^b20, i1 %82];
    cbr i1 %83(prob = 0.5), ^while.header8, ^if.else8;
^while.body3:
    i32 %84 = mul i32 %62, i32 10;
    i32 %85 = add i32 %63, i32 -48;
    i32 %86 = add i32 %85, i32 %84;
    store i32* %num with i32 %86;
    ubr ^entry8;
^while.body4:
    i32 %87 = phi [^b28, i32 20] [^b19, i32 10] [^b31, i32 0];
    i1 %88 = scmp eq i32 %87, i32 0;
    cbr i1 %88(prob = 0.5), ^while.header6, ^while.header9;
^if.else8:
    ubr ^while.header8;
^b22:
    cbr i1 %73(prob = 0.5), ^b24, ^b23;
^while.header8:
    i32 %89 = phi [^b21, i32 1] [^if.else8, i32 0];
    i1 %90 = scmp neq i32 %89, i32 0;
    cbr i1 %90(prob = 0.97), ^entry9, ^entry10;
^entry9:
    i32 %91 = call () -> i32 @getch();
    ubr ^while.header6;
^b23:
    ubr ^b24;
^b24:
    i1 %92 = phi [^b23, i1 %72] [^b22, i1 true];
    cbr i1 %92(prob = 0.5), ^b28, ^b25;
^while.header9:
    i32 %93 = phi [^while.body4, i32 %65] [^entry11, i32 %105];
    i1 %94 = scmp eq i32 %93, i32 32;
    cbr i1 %94(prob = 0.5), ^b29, ^b26;
^entry10:
    i1 %95 = scmp gt i32 %77, i32 47;
    cbr i1 %95(prob = 0.5), ^b27, ^b30;
^b25:
    ubr ^b28;
^b26:
    i1 %96 = scmp eq i32 %93, i32 10;
    ubr ^b29;
^b27:
    i1 %97 = scmp le i32 %77, i32 57;
    ubr ^b30;
^b28:
    i1 %98 = phi [^b25, i1 %71] [^b24, i1 true];
    cbr i1 %98(prob = 0.5), ^while.body4, ^b31;
^b29:
    i1 %99 = phi [^while.header9, i1 true] [^b26, i1 %96];
    cbr i1 %99(prob = 0.5), ^while.header10, ^if.else9;
^b30:
    i1 %100 = phi [^b27, i1 %97] [^entry10, i1 false];
    cbr i1 %100(prob = 0.5), ^b32, ^if.else10;
^b31:
    ubr ^while.body4;
^if.else9:
    ubr ^while.header10;
^while.header10:
    i32 %101 = phi [^b29, i32 1] [^if.else9, i32 0];
    i1 %102 = scmp neq i32 %101, i32 0;
    cbr i1 %102(prob = 0.97), ^entry11, ^entry12;
^if.else10:
    ubr ^b32;
^b32:
    i32 %103 = phi [^b30, i32 1] [^if.else10, i32 0];
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.5), ^if.then2, ^if.else11;
^entry11:
    i32 %105 = call () -> i32 @getch();
    ubr ^while.header9;
^if.then2:
    i32 %106 = add i32 %77, i32 -48;
    store i32* %num with i32 %106;
    ubr ^entry13;
^entry12:
    i1 %107 = scmp gt i32 %93, i32 47;
    cbr i1 %107(prob = 0.5), ^b33, ^b34;
^if.else11:
    store i32* %other with i32 %77;
    i32 %108 = call () -> i32 @getch();
    store i32* %last_char with i32 %108;
    store i32* %cur_token with i32 1;
    ubr ^entry14;
^b33:
    i1 %109 = scmp le i32 %93, i32 57;
    ubr ^b34;
^b34:
    i1 %110 = phi [^b33, i1 %109] [^entry12, i1 false];
    cbr i1 %110(prob = 0.5), ^b36, ^if.else12;
^entry13:
    i32 %111 = phi [^while.body5, i32 %147] [^if.then2, i32 %106];
    i32 %112 = call () -> i32 @getch();
    store i32* %last_char with i32 %112;
    i1 %113 = scmp gt i32 %112, i32 47;
    cbr i1 %113(prob = 0.5), ^b35, ^b37;
^entry14:
    i32 %114 = load i32* %4;
    i1 %115 = scmp neq i32 %114, i32 0;
    cbr i1 %115(prob = 0.97), ^entry16, ^entry15;
^b35:
    i1 %116 = scmp le i32 %112, i32 57;
    ubr ^b37;
^if.else12:
    ubr ^b36;
^b36:
    i32 %117 = phi [^b34, i32 1] [^if.else12, i32 0];
    i1 %118 = scmp neq i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^if.then3, ^if.else13;
^entry15:
    i32 %119 = load i32* %2;
    i32* %120 = getelementptr &(i32* %2)[i32 %119];
    i32 %121 = load i32* %120;
    ubr ^while.body1;
^b37:
    i1 %122 = phi [^entry13, i1 false] [^b35, i1 %116];
    cbr i1 %122(prob = 0.5), ^while.header11, ^if.else14;
^entry16:
    i32 %123 = load i32* %4;
    i32* %124 = getelementptr &(i32* %4)[i32 %123];
    i32 %125 = load i32* %124;
    i32 %126 = load i32* %4;
    i32 %127 = add i32 %126, i32 -1;
    store i32* %4 with i32 %127;
    i32 %128 = load i32* %2;
    i32* %129 = getelementptr &(i32* %2)[i32 %128];
    i32 %130 = load i32* %129;
    i32 %131 = load i32* %2;
    i32 %132 = add i32 %131, i32 -1;
    store i32* %2 with i32 %132;
    i32 %133 = load i32* %2;
    i32* %134 = getelementptr &(i32* %2)[i32 %133];
    i32 %135 = load i32* %134;
    i32 %136 = load i32* %2;
    i32 %137 = add i32 %136, i32 -1;
    store i32* %2 with i32 %137;
    i1 %138 = scmp eq i32 %125, i32 43;
    cbr i1 %138(prob = 0.5), ^if.then4, ^b38;
^if.then3:
    i32 %139 = add i32 %93, i32 -48;
    store i32* %num with i32 %139;
    ubr ^entry17;
^if.else13:
    store i32* %other with i32 %93;
    i32 %140 = call () -> i32 @getch();
    store i32* %last_char with i32 %140;
    store i32* %cur_token with i32 1;
    ubr ^entry18;
^if.then4:
    i32 %141 = add i32 %130, i32 %135;
    ubr ^while.body6;
^if.else14:
    ubr ^while.header11;
^while.header11:
    i32 %142 = phi [^b37, i32 1] [^if.else14, i32 0];
    i1 %143 = scmp neq i32 %142, i32 0;
    cbr i1 %143(prob = 0.97), ^while.body5, ^b39;
^b38:
    i1 %144 = scmp eq i32 %125, i32 45;
    cbr i1 %144(prob = 0.5), ^if.then5, ^b40;
^while.body5:
    i32 %145 = mul i32 %111, i32 10;
    i32 %146 = add i32 %112, i32 -48;
    i32 %147 = add i32 %146, i32 %145;
    store i32* %num with i32 %147;
    ubr ^entry13;
^while.body6:
    i32 %148 = phi [^b48, i32 0] [^if.then7, i32 %192] [^if.then4, i32 %141] [^if.then9, i32 %205] [^if.then5, i32 %155] [^if.then6, i32 %169];
    i32 %149 = load i32* %2;
    i32 %150 = add i32 %149, i32 1;
    store i32* %2 with i32 %150;
    i32* %151 = getelementptr &(i32* %2)[i32 %150];
    store i32* %151 with i32 %148;
    ubr ^entry14;
^entry17:
    i32 %152 = phi [^while.body7, i32 %200] [^if.then3, i32 %139];
    i32 %153 = call () -> i32 @getch();
    store i32* %last_char with i32 %153;
    i1 %154 = scmp gt i32 %153, i32 47;
    cbr i1 %154(prob = 0.5), ^b41, ^b42;
^b39:
    store i32* %cur_token with i32 0;
    ubr ^entry14;
^if.then5:
    i32 %155 = sub i32 %135, i32 %130;
    ubr ^while.body6;
^entry18:
    i32 %156 = phi [^while.body8, i32 %156] [^b49, i32 %153] [^if.else13, i32 %140];
    i32 %157 = phi [^while.body8, i32 %157] [^b49, i32 %152] [^if.else13, i32 %66];
    i32 %158 = phi [^while.body8, i32 %158] [^b49, i32 %67] [^if.else13, i32 %93];
    i32 %159 = phi [^while.body8, i32 %159] [^b49, i32 0] [^if.else13, i32 1];
    i32 %160 = load i32* %4;
    i1 %161 = scmp neq i32 %160, i32 0;
    cbr i1 %161(prob = 0.5), ^entry19, ^b43;
^b40:
    i1 %162 = scmp eq i32 %125, i32 42;
    cbr i1 %162(prob = 0.5), ^if.then6, ^b44;
^b41:
    i1 %163 = scmp le i32 %153, i32 57;
    ubr ^b42;
^b42:
    i1 %164 = phi [^entry17, i1 false] [^b41, i1 %163];
    cbr i1 %164(prob = 0.5), ^while.header12, ^if.else15;
^entry19:
    i32 %165 = load i32* %4;
    i32* %166 = getelementptr &(i32* %4)[i32 %165];
    i32 %167 = load i32* %166;
    i1 %168 = scmp eq i32 %167, i32 43;
    cbr i1 %168(prob = 0.5), ^b46, ^b45;
^if.then6:
    i32 %169 = mul i32 %130, i32 %135;
    ubr ^while.body6;
^b43:
    i1 %170 = phi [^entry18, i1 false] [^b58, i1 %216];
    cbr i1 %170(prob = 0.97), ^entry20, ^b47;
^b44:
    i1 %171 = scmp eq i32 %125, i32 47;
    cbr i1 %171(prob = 0.5), ^if.then7, ^b48;
^if.else15:
    ubr ^while.header12;
^b45:
    i1 %172 = scmp eq i32 %167, i32 45;
    ubr ^b46;
^while.header12:
    i32 %173 = phi [^b42, i32 1] [^if.else15, i32 0];
    i1 %174 = scmp neq i32 %173, i32 0;
    cbr i1 %174(prob = 0.97), ^while.body7, ^b49;
^b46:
    i1 %175 = phi [^entry19, i1 true] [^b45, i1 %172];
    cbr i1 %175(prob = 0.5), ^b50, ^b51;
^entry20:
    i32 %176 = load i32* %4;
    i32* %177 = getelementptr &(i32* %4)[i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = load i32* %4;
    i32 %180 = add i32 %179, i32 -1;
    store i32* %4 with i32 %180;
    i32 %181 = load i32* %2;
    i32* %182 = getelementptr &(i32* %2)[i32 %181];
    i32 %183 = load i32* %182;
    i32 %184 = load i32* %2;
    i32 %185 = add i32 %184, i32 -1;
    store i32* %2 with i32 %185;
    i32 %186 = load i32* %2;
    i32* %187 = getelementptr &(i32* %2)[i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = load i32* %2;
    i32 %190 = add i32 %189, i32 -1;
    store i32* %2 with i32 %190;
    i1 %191 = scmp eq i32 %178, i32 43;
    cbr i1 %191(prob = 0.5), ^if.then8, ^b52;
^if.then7:
    i32 %192 = sdiv i32 %135, i32 %130;
    ubr ^while.body6;
^b47:
    i32 %193 = load i32* %4;
    i32 %194 = add i32 %193, i32 1;
    store i32* %4 with i32 %194;
    i32* %195 = getelementptr &(i32* %4)[i32 %194];
    store i32* %195 with i32 %67;
    i1 %196 = scmp neq i32 %159, i32 0;
    cbr i1 %196(prob = 0.5), ^entry5, ^b8;
^b48:
    i1 %197 = scmp eq i32 %125, i32 37;
    cbr i1 %197(prob = 0.5), ^if.then9, ^while.body6;
^while.body7:
    i32 %198 = mul i32 %152, i32 10;
    i32 %199 = add i32 %153, i32 -48;
    i32 %200 = add i32 %199, i32 %198;
    store i32* %num with i32 %200;
    ubr ^entry17;
^b49:
    store i32* %cur_token with i32 0;
    ubr ^entry18;
^if.then8:
    i32 %201 = add i32 %183, i32 %188;
    ubr ^while.body8;
^b50:
    i32 %202 = phi [^b60, i32 20] [^b46, i32 10] [^b63, i32 0];
    cbr i1 %75(prob = 0.5), ^b55, ^b53;
^b51:
    i1 %203 = scmp eq i32 %167, i32 42;
    cbr i1 %203(prob = 0.5), ^b56, ^b54;
^b52:
    i1 %204 = scmp eq i32 %178, i32 45;
    cbr i1 %204(prob = 0.5), ^if.then10, ^b57;
^if.then9:
    i32 %205 = srem i32 %135, i32 %130;
    ubr ^while.body6;
^b53:
    ubr ^b55;
^while.body8:
    i32 %206 = phi [^if.then8, i32 %201] [^if.then12, i32 %222] [^if.then10, i32 %212] [^if.then11, i32 %219] [^if.then13, i32 %225] [^b66, i32 0];
    i32 %207 = load i32* %2;
    i32 %208 = add i32 %207, i32 1;
    store i32* %2 with i32 %208;
    i32* %209 = getelementptr &(i32* %2)[i32 %208];
    store i32* %209 with i32 %206;
    ubr ^entry18;
^b54:
    i1 %210 = scmp eq i32 %167, i32 47;
    ubr ^b56;
^b55:
    i1 %211 = phi [^b50, i1 true] [^b53, i1 %74];
    cbr i1 %211(prob = 0.5), ^b58, ^b61;
^if.then10:
    i32 %212 = sub i32 %188, i32 %183;
    ubr ^while.body8;
^b56:
    i1 %213 = phi [^b54, i1 %210] [^b51, i1 true];
    cbr i1 %213(prob = 0.5), ^b60, ^b59;
^b57:
    i1 %214 = scmp eq i32 %178, i32 42;
    cbr i1 %214(prob = 0.5), ^if.then11, ^b62;
^b58:
    i32 %215 = phi [^b68, i32 20] [^b55, i32 10] [^b69, i32 0];
    i1 %216 = scmp ge i32 %202, i32 %215;
    ubr ^b43;
^b59:
    i1 %217 = scmp eq i32 %167, i32 37;
    ubr ^b60;
^b60:
    i1 %218 = phi [^b56, i1 true] [^b59, i1 %217];
    cbr i1 %218(prob = 0.5), ^b50, ^b63;
^b61:
    cbr i1 %73(prob = 0.5), ^b65, ^b64;
^if.then11:
    i32 %219 = mul i32 %183, i32 %188;
    ubr ^while.body8;
^b62:
    i1 %220 = scmp eq i32 %178, i32 47;
    cbr i1 %220(prob = 0.5), ^if.then12, ^b66;
^b63:
    ubr ^b50;
^b64:
    ubr ^b65;
^b65:
    i1 %221 = phi [^b64, i1 %72] [^b61, i1 true];
    cbr i1 %221(prob = 0.5), ^b68, ^b67;
^if.then12:
    i32 %222 = sdiv i32 %188, i32 %183;
    ubr ^while.body8;
^b66:
    i1 %223 = scmp eq i32 %178, i32 37;
    cbr i1 %223(prob = 0.5), ^if.then13, ^while.body8;
^b67:
    ubr ^b68;
^b68:
    i1 %224 = phi [^b67, i1 %71] [^b65, i1 true];
    cbr i1 %224(prob = 0.5), ^b58, ^b69;
^if.then13:
    i32 %225 = srem i32 %188, i32 %183;
    ubr ^while.body8;
^b69:
    ubr ^b58;
}
