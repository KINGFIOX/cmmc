internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^entry1;
  ^entry1:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
  ^entry2:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^entry3, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^entry4;
  ^entry3:
    i32 %13 = phi [^entry2, i32 %10] [^while.body, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^entry4;
  ^while.body:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^entry3;
  ^entry4:
    i32 %19 = phi [^if.else, i32 %12] [^entry3, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^entry3, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^entry3, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
  ^while.body1:
    i32 %23 = phi [^entry4, i32 %19] [^b6, i32 %63];
    i32 %24 = phi [^entry4, i32 %20] [^b6, i32 %64];
    i32 %25 = phi [^entry4, i32 %21] [^b6, i32 %65];
    i32 %26 = phi [^entry4, i32 %0] [^b6, i32 %67];
    ubr ^b1;
  ^b:
    ret i32 0;
  ^b1:
    i64 %27 = phi [^while.body1, i64 0] [^b1, i64 %34];
    i32* %28 = getelementptr &(i32* %3)[i64 %27];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    i64 %32 = add i64 %27, i64 8;
    i1 %33 = icmp slt i64 %32, i64 256;
    i64 %34 = add i64 %27, i64 4;
    cbr i1 %33(prob = 0.89), ^b1, ^b2;
  ^b2:
    i64 %35 = phi [^b1, i64 %34] [^b2, i64 %37];
    i32* %36 = getelementptr &(i32* %3)[i64 %35];
    store i32* %36 with i32 0;
    i64 %37 = add i64 %35, i64 1;
    i1 %38 = icmp slt i64 %37, i64 256;
    cbr i1 %38(prob = 0.75), ^b2, ^b3;
  ^b3:
    i64 %39 = phi [^b2, i64 0] [^b3, i64 %46];
    i32* %40 = getelementptr &(i32* %5)[i64 %39];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %40)[i64 1];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %40)[i64 2];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %40)[i64 3];
    store i32* %43 with i32 0;
    i64 %44 = add i64 %39, i64 8;
    i1 %45 = icmp slt i64 %44, i64 256;
    i64 %46 = add i64 %39, i64 4;
    cbr i1 %45(prob = 0.89), ^b3, ^b4;
  ^b4:
    i64 %47 = phi [^b3, i64 %46] [^b4, i64 %49];
    i32* %48 = getelementptr &(i32* %5)[i64 %47];
    store i32* %48 with i32 0;
    i64 %49 = add i64 %47, i64 1;
    i1 %50 = icmp slt i64 %49, i64 256;
    cbr i1 %50(prob = 0.75), ^b4, ^entry5;
  ^entry5:
    i1 %51 = icmp neq i32 %25, i32 0;
    cbr i1 %51(prob = 0.5), ^entry6, ^b5;
  ^entry6:
    i32 %52 = phi [^entry5, i32 %23] [^entry23, i32 %149];
    i32 %53 = phi [^entry5, i32 %24] [^entry23, i32 %150];
    i32 %54 = phi [^entry5, i32 %25] [^entry23, i32 %151];
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b6;
  ^b5:
    i32 %55 = phi [^entry5, i32 %23] [^entry23, i32 %149];
    i32 %56 = phi [^entry5, i32 %24] [^entry23, i32 %150];
    i32 %57 = load i32* %3;
    i32 %58 = add i32 %57, i32 1;
    store i32* %3 with i32 %58;
    i32* %59 = getelementptr &(i32* %3)[i32 %58];
    store i32* %59 with i32 %56;
    i1 %60 = icmp eq i32 %55, i32 32;
    i1 %61 = icmp eq i32 %55, i32 10;
    i1 %62 = or i1 %60, i1 %61;
    cbr i1 %62(prob = 0.97), ^entry7, ^entry8;
  ^b6:
    i32 %63 = phi [^entry6, i32 %52] [^entry19, i32 %124];
    i32 %64 = phi [^entry6, i32 %53] [^entry19, i32 %125];
    i32 %65 = phi [^entry6, i32 %54] [^entry19, i32 %126];
    i32 %66 = phi [^entry6, i32 -1] [^entry19, i32 %137];
    call (i32) -> void @putint(i32 %66);
    call (i32) -> void @putch(i32 10);
    i32 %67 = add i32 %26, i32 -1;
    i1 %68 = icmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.97), ^while.body1, ^b;
  ^entry7:
    i32 %69 = call () -> i32 @getch();
    i1 %70 = icmp eq i32 %69, i32 32;
    i1 %71 = icmp eq i32 %69, i32 10;
    i1 %72 = or i1 %70, i1 %71;
    cbr i1 %72(prob = 0.97), ^entry7, ^entry8;
  ^entry8:
    i32 %73 = phi [^b5, i32 %55] [^entry7, i32 %69];
    i32 %74 = add i32 %73, i32 -48;
    i1 %75 = icmp ult i32 %74, i32 10;
    cbr i1 %75(prob = 0.5), ^entry9, ^if.else1;
  ^entry9:
    i32 %76 = phi [^entry8, i32 %74] [^while.body2, i32 %85];
    i32 %77 = call () -> i32 @getch();
    i32 %78 = add i32 %77, i32 -48;
    i1 %79 = icmp ult i32 %78, i32 10;
    cbr i1 %79(prob = 0.97), ^while.body2, ^entry10;
  ^if.else1:
    i32 %80 = call () -> i32 @getch();
    i1 %81 = icmp eq i32 %73, i32 43;
    i1 %82 = icmp eq i32 %73, i32 45;
    i1 %83 = or i1 %81, i1 %82;
    cbr i1 %83(prob = 0.5), ^b8, ^b7;
  ^while.body2:
    i32 %84 = mul i32 %76, i32 10;
    i32 %85 = add i32 %78, i32 %84;
    ubr ^entry9;
  ^b7:
    i1 %86 = icmp eq i32 %73, i32 42;
    i1 %87 = icmp eq i32 %73, i32 47;
    i1 %88 = or i1 %86, i1 %87;
    i1 %89 = icmp eq i32 %73, i32 37;
    i1 %90 = or i1 %88, i1 %89;
    i32 %91 = select i1 %90 ? i32 20 : i32 0;
    ubr ^b8;
  ^b8:
    i32 %92 = phi [^if.else1, i32 10] [^b7, i32 %91];
    i1 %93 = icmp eq i32 %92, i32 0;
    cbr i1 %93(prob = 0.5), ^entry10, ^entry12;
  ^entry10:
    i32 %94 = phi [^entry9, i32 %76] [^b8, i32 %56];
    i32 %95 = phi [^entry9, i32 %77] [^b8, i32 %80];
    i1 %96 = icmp eq i32 %95, i32 32;
    i1 %97 = icmp eq i32 %95, i32 10;
    i1 %98 = or i1 %96, i1 %97;
    cbr i1 %98(prob = 0.97), ^entry11, ^entry13;
  ^entry11:
    i32 %99 = call () -> i32 @getch();
    i1 %100 = icmp eq i32 %99, i32 32;
    i1 %101 = icmp eq i32 %99, i32 10;
    i1 %102 = or i1 %100, i1 %101;
    cbr i1 %102(prob = 0.97), ^entry11, ^entry13;
  ^entry12:
    i1 %103 = icmp eq i32 %80, i32 32;
    i1 %104 = icmp eq i32 %80, i32 10;
    i1 %105 = or i1 %103, i1 %104;
    cbr i1 %105(prob = 0.97), ^entry14, ^entry16;
  ^entry13:
    i32 %106 = phi [^entry10, i32 %95] [^entry11, i32 %99];
    i32 %107 = add i32 %106, i32 -48;
    i1 %108 = icmp ult i32 %107, i32 10;
    cbr i1 %108(prob = 0.5), ^entry15, ^if.else2;
  ^if.else2:
    i32 %109 = call () -> i32 @getch();
    ubr ^entry17;
  ^entry14:
    i32 %110 = call () -> i32 @getch();
    i1 %111 = icmp eq i32 %110, i32 32;
    i1 %112 = icmp eq i32 %110, i32 10;
    i1 %113 = or i1 %111, i1 %112;
    cbr i1 %113(prob = 0.97), ^entry14, ^entry16;
  ^entry15:
    i32 %114 = phi [^entry13, i32 %107] [^while.body3, i32 %122];
    i32 %115 = call () -> i32 @getch();
    i32 %116 = add i32 %115, i32 -48;
    i1 %117 = icmp ult i32 %116, i32 10;
    cbr i1 %117(prob = 0.97), ^while.body3, ^entry17;
  ^entry16:
    i32 %118 = phi [^entry12, i32 %80] [^entry14, i32 %110];
    i32 %119 = add i32 %118, i32 -48;
    i1 %120 = icmp ult i32 %119, i32 10;
    cbr i1 %120(prob = 0.5), ^entry18, ^if.else3;
  ^while.body3:
    i32 %121 = mul i32 %114, i32 10;
    i32 %122 = add i32 %116, i32 %121;
    ubr ^entry15;
  ^if.else3:
    i32 %123 = call () -> i32 @getch();
    ubr ^entry21;
  ^entry17:
    i32 %124 = phi [^if.else2, i32 %109] [^entry15, i32 %115] [^b10, i32 %124];
    i32 %125 = phi [^if.else2, i32 %94] [^entry15, i32 %114] [^b10, i32 %125];
    i32 %126 = phi [^if.else2, i32 1] [^entry15, i32 0] [^b10, i32 %126];
    i32 %127 = load i32* %5;
    i1 %128 = icmp neq i32 %127, i32 0;
    cbr i1 %128(prob = 0.97), ^entry20, ^entry19;
  ^entry18:
    i32 %129 = phi [^entry16, i32 %119] [^while.body4, i32 %134];
    i32 %130 = call () -> i32 @getch();
    i32 %131 = add i32 %130, i32 -48;
    i1 %132 = icmp ult i32 %131, i32 10;
    cbr i1 %132(prob = 0.97), ^while.body4, ^entry21;
  ^while.body4:
    i32 %133 = mul i32 %129, i32 10;
    i32 %134 = add i32 %131, i32 %133;
    ubr ^entry18;
  ^entry19:
    i32 %135 = load i32* %3;
    i32* %136 = getelementptr &(i32* %3)[i32 %135];
    i32 %137 = load i32* %136;
    ubr ^b6;
  ^entry20:
    i32* %138 = getelementptr &(i32* %5)[i32 %127];
    i32 %139 = load i32* %138;
    i32 %140 = add i32 %127, i32 -1;
    store i32* %5 with i32 %140;
    i32 %141 = load i32* %3;
    i32* %142 = getelementptr &(i32* %3)[i32 %141];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %141, i32 -1;
    store i32* %3 with i32 %144;
    i32* %145 = getelementptr &(i32* %142)[i64 -1];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %141, i32 -2;
    store i32* %3 with i32 %147;
    i1 %148 = icmp eq i32 %139, i32 43;
    cbr i1 %148(prob = 0.5), ^if.then, ^b9;
  ^entry21:
    i32 %149 = phi [^if.else3, i32 %123] [^entry18, i32 %130] [^b17, i32 %149];
    i32 %150 = phi [^if.else3, i32 %56] [^entry18, i32 %129] [^b17, i32 %150];
    i32 %151 = phi [^if.else3, i32 1] [^entry18, i32 0] [^b17, i32 %151];
    i32 %152 = load i32* %5;
    i1 %153 = icmp neq i32 %152, i32 0;
    cbr i1 %153(prob = 0.5), ^entry22, ^entry23;
  ^if.then:
    i32 %154 = add i32 %143, i32 %146;
    ubr ^b10;
  ^entry22:
    i32* %155 = getelementptr &(i32* %5)[i32 %152];
    i32 %156 = load i32* %155;
    i1 %157 = icmp eq i32 %156, i32 43;
    i1 %158 = icmp eq i32 %156, i32 45;
    i1 %159 = or i1 %157, i1 %158;
    cbr i1 %159(prob = 0.5), ^b11, ^b12;
  ^b9:
    i1 %160 = icmp eq i32 %139, i32 45;
    cbr i1 %160(prob = 0.5), ^if.then1, ^b13;
  ^entry23:
    i32 %161 = add i32 %152, i32 1;
    store i32* %5 with i32 %161;
    i32* %162 = getelementptr &(i32* %5)[i32 %161];
    store i32* %162 with i32 %73;
    i1 %163 = icmp eq i32 %151, i32 0;
    cbr i1 %163(prob = 0.5), ^b5, ^entry6;
  ^b10:
    i32 %164 = phi [^if.then, i32 %154] [^if.then1, i32 %168] [^if.then2, i32 %178] [^if.then4, i32 %189] [^b16, i32 0] [^if.then6, i32 %196];
    i32 %165 = load i32* %3;
    i32 %166 = add i32 %165, i32 1;
    store i32* %3 with i32 %166;
    i32* %167 = getelementptr &(i32* %3)[i32 %166];
    store i32* %167 with i32 %164;
    ubr ^entry17;
  ^if.then1:
    i32 %168 = sub i32 %146, i32 %143;
    ubr ^b10;
  ^b11:
    i1 %169 = icmp slt i32 %92, i32 11;
    cbr i1 %169(prob = 0.97), ^entry24, ^entry23;
  ^b12:
    i1 %170 = icmp eq i32 %156, i32 42;
    i1 %171 = icmp eq i32 %156, i32 47;
    i1 %172 = or i1 %170, i1 %171;
    i1 %173 = icmp eq i32 %156, i32 37;
    i1 %174 = or i1 %172, i1 %173;
    i1 %175 = icmp sle i32 %92, i32 0;
    i1 %176 = or i1 %174, i1 %175;
    cbr i1 %176(prob = 0.97), ^entry24, ^entry23;
  ^b13:
    i1 %177 = icmp eq i32 %139, i32 42;
    cbr i1 %177(prob = 0.5), ^if.then2, ^b14;
  ^if.then2:
    i32 %178 = mul i32 %143, i32 %146;
    ubr ^b10;
  ^entry24:
    i32 %179 = add i32 %152, i32 -1;
    store i32* %5 with i32 %179;
    i32 %180 = load i32* %3;
    i32* %181 = getelementptr &(i32* %3)[i32 %180];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 -1;
    store i32* %3 with i32 %183;
    i32* %184 = getelementptr &(i32* %181)[i64 -1];
    i32 %185 = load i32* %184;
    i32 %186 = add i32 %180, i32 -2;
    store i32* %3 with i32 %186;
    cbr i1 %157(prob = 0.5), ^if.then3, ^b15;
  ^b14:
    i1 %187 = icmp eq i32 %139, i32 47;
    cbr i1 %187(prob = 0.5), ^if.then4, ^b16;
  ^if.then3:
    i32 %188 = add i32 %182, i32 %185;
    ubr ^b17;
  ^if.then4:
    i32 %189 = sdiv i32 %146, i32 %143;
    ubr ^b10;
  ^b15:
    cbr i1 %158(prob = 0.5), ^if.then5, ^b18;
  ^b16:
    i1 %190 = icmp eq i32 %139, i32 37;
    cbr i1 %190(prob = 0.5), ^if.then6, ^b10;
  ^b17:
    i32 %191 = phi [^if.then3, i32 %188] [^if.then5, i32 %195] [^if.then7, i32 %198] [^if.then8, i32 %200] [^b20, i32 0] [^if.then9, i32 %202];
    i32 %192 = load i32* %3;
    i32 %193 = add i32 %192, i32 1;
    store i32* %3 with i32 %193;
    i32* %194 = getelementptr &(i32* %3)[i32 %193];
    store i32* %194 with i32 %191;
    ubr ^entry21;
  ^if.then5:
    i32 %195 = sub i32 %185, i32 %182;
    ubr ^b17;
  ^if.then6:
    i32 %196 = srem i32 %146, i32 %143;
    ubr ^b10;
  ^b18:
    i1 %197 = icmp eq i32 %156, i32 42;
    cbr i1 %197(prob = 0.5), ^if.then7, ^b19;
  ^if.then7:
    i32 %198 = mul i32 %182, i32 %185;
    ubr ^b17;
  ^b19:
    i1 %199 = icmp eq i32 %156, i32 47;
    cbr i1 %199(prob = 0.5), ^if.then8, ^b20;
  ^if.then8:
    i32 %200 = sdiv i32 %185, i32 %182;
    ubr ^b17;
  ^b20:
    i1 %201 = icmp eq i32 %156, i32 37;
    cbr i1 %201(prob = 0.5), ^if.then9, ^b17;
  ^if.then9:
    i32 %202 = srem i32 %185, i32 %182;
    ubr ^b17;
}
internal [256 * i32]* @oprs { Flexible };
internal [256 * i32]* @ops { Flexible };
