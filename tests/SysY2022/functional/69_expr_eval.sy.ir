internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    [256 * i32]* %oprs = alloc [256 * i32];
    [256 * i32]* %ops = alloc [256 * i32];
    i32* %cur_token = alloc i32;
    i32* %other = alloc i32;
    i32* %num = alloc i32;
    i32* %last_char = alloc i32;
    i32* %count = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %count with i32 %0;
    i32 %1 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry1, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^entry1, i32 %10] [^entry, i32 32];
    i32 %4 = phi [^entry1, i32 %10] [^entry, i32 32];
    i1 %5 = scmp eq i32 %4, i32 32;
    cbr i1 %5(prob = 0.5), ^b1, ^b;
^b:
    i1 %6 = scmp eq i32 %4, i32 10;
    ubr ^b1;
^b1:
    i1 %7 = phi [^while.header, i1 true] [^b, i1 %6];
    cbr i1 %7(prob = 0.5), ^while.header1, ^if.else;
^if.else:
    ubr ^while.header1;
^while.header1:
    i32 %8 = phi [^b1, i32 1] [^if.else, i32 0];
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^entry1, ^entry2;
^entry1:
    i32 %10 = call () -> i32 @getch();
    ubr ^while.header;
^entry2:
    i1 %11 = scmp gt i32 %4, i32 47;
    cbr i1 %11(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %12 = scmp le i32 %4, i32 57;
    ubr ^b3;
^b3:
    i1 %13 = phi [^entry2, i1 false] [^b2, i1 %12];
    cbr i1 %13(prob = 0.5), ^b4, ^if.else1;
^if.else1:
    ubr ^b4;
^b4:
    i32 %14 = phi [^b3, i32 1] [^if.else1, i32 0];
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else2;
^if.then:
    i32 %16 = add i32 %3, i32 -48;
    store i32* %num with i32 %16;
    ubr ^entry4;
^if.else2:
    store i32* %other with i32 %3;
    i32 %17 = call () -> i32 @getch();
    store i32* %last_char with i32 %17;
    store i32* %cur_token with i32 1;
    ubr ^entry3;
^entry3:
    i32 %18 = phi [^b8, i32 %19] [^if.else2, i32 %2];
    ubr ^while.header2;
^entry4:
    i32 %19 = phi [^while.body, i32 %19] [^if.then, i32 %2];
    i32 %20 = phi [^while.body, i32 %43] [^if.then, i32 %16];
    i32 %21 = call () -> i32 @getch();
    store i32* %last_char with i32 %21;
    i1 %22 = scmp gt i32 %21, i32 47;
    cbr i1 %22(prob = 0.5), ^b5, ^b6;
^b5:
    i1 %23 = scmp le i32 %21, i32 57;
    ubr ^b6;
^b6:
    i1 %24 = phi [^entry4, i1 false] [^b5, i1 %23];
    cbr i1 %24(prob = 0.5), ^while.header3, ^if.else3;
^while.header2:
    i32 %25 = phi [^while.body1, i32 %54] [^entry3, i32 %18];
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.97), ^entry5, ^b7;
^if.else3:
    ubr ^while.header3;
^while.header3:
    i32 %27 = phi [^b6, i32 1] [^if.else3, i32 0];
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body, ^b8;
^entry5:
    i32* %29 = getelementptr &([256 * i32]* %oprs)[i64 0][i64 0];
    i8* %30 = ptrcast i32* %29 to i8*;
    i8* %31 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %30, i32 0, i64 1024);
    i32* %32 = getelementptr &([256 * i32]* %ops)[i64 0][i64 0];
    i8* %33 = ptrcast i32* %32 to i8*;
    i8* %34 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %33, i32 0, i64 1024);
    i32 %35 = load i32* %count;
    i32 %36 = load i32* %last_char;
    i32 %37 = load i32* %num;
    i32 %38 = load i32* %other;
    i32 %39 = load i32* %cur_token;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.5), ^entry6, ^b9;
^b7:
    ret i32 0;
^while.body:
    i32 %41 = mul i32 %20, i32 10;
    i32 %42 = add i32 %21, i32 -48;
    i32 %43 = add i32 %42, i32 %41;
    store i32* %num with i32 %43;
    ubr ^entry4;
^entry6:
    i32 %44 = phi [^b47, i32 %182] [^entry5, i32 %35];
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body1;
^b8:
    store i32* %cur_token with i32 0;
    ubr ^entry3;
^b9:
    i32 %45 = phi [^b47, i32 %182] [^entry5, i32 %35];
    i32 %46 = phi [^b47, i32 %183] [^entry5, i32 %36];
    i32 %47 = phi [^b47, i32 %184] [^entry5, i32 %37];
    i32 %48 = phi [^b47, i32 %185] [^entry5, i32 %38];
    i32 %49 = load i32* %29;
    i32 %50 = add i32 %49, i32 1;
    store i32* %29 with i32 %50;
    i32* %51 = getelementptr &(i32* %29)[i32 %50];
    store i32* %51 with i32 %47;
    ubr ^while.header4;
^while.body1:
    i32 %52 = phi [^entry16, i32 %136] [^entry6, i32 %44];
    i32 %53 = phi [^entry16, i32 %144] [^entry6, i32 -1];
    call (i32) -> void @putint(i32 %53);
    call (i32) -> void @putch(i32 10);
    i32 %54 = add i32 %52, i32 -1;
    store i32* %count with i32 %54;
    ubr ^while.header2;
^while.header4:
    i32 %55 = phi [^entry7, i32 %55] [^b9, i32 %45];
    i32 %56 = phi [^entry7, i32 %65] [^b9, i32 %46];
    i32 %57 = phi [^entry7, i32 %57] [^b9, i32 %47];
    i32 %58 = phi [^entry7, i32 %58] [^b9, i32 %48];
    i32 %59 = phi [^b9, i32 %46] [^entry7, i32 %65];
    i1 %60 = scmp eq i32 %59, i32 32;
    cbr i1 %60(prob = 0.5), ^b11, ^b10;
^b10:
    i1 %61 = scmp eq i32 %59, i32 10;
    ubr ^b11;
^b11:
    i1 %62 = phi [^while.header4, i1 true] [^b10, i1 %61];
    cbr i1 %62(prob = 0.5), ^while.header5, ^if.else4;
^if.else4:
    ubr ^while.header5;
^while.header5:
    i32 %63 = phi [^b11, i32 1] [^if.else4, i32 0];
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^entry7, ^entry8;
^entry7:
    i32 %65 = call () -> i32 @getch();
    ubr ^while.header4;
^entry8:
    i1 %66 = scmp gt i32 %59, i32 47;
    cbr i1 %66(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %67 = scmp le i32 %59, i32 57;
    ubr ^b13;
^b13:
    i1 %68 = phi [^b12, i1 %67] [^entry8, i1 false];
    cbr i1 %68(prob = 0.5), ^b14, ^if.else5;
^if.else5:
    ubr ^b14;
^b14:
    i32 %69 = phi [^b13, i32 1] [^if.else5, i32 0];
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^if.then1, ^if.else6;
^if.then1:
    i32 %71 = add i32 %56, i32 -48;
    store i32* %num with i32 %71;
    ubr ^entry9;
^if.else6:
    store i32* %other with i32 %56;
    i32 %72 = call () -> i32 @getch();
    ubr ^b15;
^entry9:
    i32 %73 = phi [^while.body3, i32 %73] [^if.then1, i32 %55];
    i32 %74 = phi [^while.body3, i32 %99] [^if.then1, i32 %71];
    i32 %75 = phi [^while.body3, i32 %75] [^if.then1, i32 %58];
    i32 %76 = call () -> i32 @getch();
    i1 %77 = scmp gt i32 %76, i32 47;
    cbr i1 %77(prob = 0.5), ^b16, ^b17;
^b15:
    i32 %78 = phi [^while.header7, i32 %73] [^if.else6, i32 %55];
    i32 %79 = phi [^while.header7, i32 %76] [^if.else6, i32 %72];
    i32 %80 = phi [^while.header7, i32 %74] [^if.else6, i32 %57];
    i32 %81 = phi [^while.header7, i32 %75] [^if.else6, i32 %56];
    i32 %82 = phi [^while.header7, i32 0] [^if.else6, i32 1];
    i1 %83 = scmp eq i32 %82, i32 1;
    cbr i1 %83(prob = 0.97), ^while.body2, ^while.header6;
^b16:
    i1 %84 = scmp le i32 %76, i32 57;
    ubr ^b17;
^while.body2:
    i1 %85 = scmp eq i32 %81, i32 43;
    cbr i1 %85(prob = 0.5), ^b19, ^b18;
^b17:
    i1 %86 = phi [^entry9, i1 false] [^b16, i1 %84];
    cbr i1 %86(prob = 0.5), ^while.header7, ^if.else7;
^while.header6:
    i32 %87 = phi [^while.body4, i32 %78] [^b15, i32 %78] [^entry10, i32 %87];
    i32 %88 = phi [^while.body4, i32 %79] [^b15, i32 %79] [^entry10, i32 %105];
    i32 %89 = phi [^while.body4, i32 %79] [^b15, i32 %79] [^entry10, i32 %105];
    i1 %90 = scmp eq i32 %89, i32 32;
    cbr i1 %90(prob = 0.5), ^b21, ^b20;
^if.else7:
    ubr ^while.header7;
^b18:
    i1 %91 = scmp eq i32 %81, i32 45;
    ubr ^b19;
^while.header7:
    i32 %92 = phi [^b17, i32 1] [^if.else7, i32 0];
    i1 %93 = scmp neq i32 %92, i32 0;
    cbr i1 %93(prob = 0.97), ^while.body3, ^b15;
^b19:
    i1 %94 = phi [^while.body2, i1 true] [^b18, i1 %91];
    cbr i1 %94(prob = 0.5), ^while.body4, ^b22;
^b20:
    i1 %95 = scmp eq i32 %89, i32 10;
    ubr ^b21;
^b21:
    i1 %96 = phi [^while.header6, i1 true] [^b20, i1 %95];
    cbr i1 %96(prob = 0.5), ^while.header8, ^if.else8;
^while.body3:
    i32 %97 = mul i32 %74, i32 10;
    i32 %98 = add i32 %76, i32 -48;
    i32 %99 = add i32 %98, i32 %97;
    store i32* %num with i32 %99;
    ubr ^entry9;
^while.body4:
    i32 %100 = phi [^b28, i32 20] [^b19, i32 10] [^b31, i32 0];
    i1 %101 = scmp eq i32 %100, i32 0;
    cbr i1 %101(prob = 0.5), ^while.header6, ^while.header9;
^if.else8:
    ubr ^while.header8;
^b22:
    i1 %102 = scmp eq i32 %81, i32 42;
    cbr i1 %102(prob = 0.5), ^b24, ^b23;
^while.header8:
    i32 %103 = phi [^b21, i32 1] [^if.else8, i32 0];
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.97), ^entry10, ^entry11;
^entry10:
    i32 %105 = call () -> i32 @getch();
    ubr ^while.header6;
^b23:
    i1 %106 = scmp eq i32 %81, i32 47;
    ubr ^b24;
^b24:
    i1 %107 = phi [^b23, i1 %106] [^b22, i1 true];
    cbr i1 %107(prob = 0.5), ^b28, ^b25;
^while.header9:
    i32 %108 = phi [^while.body4, i32 %78] [^entry12, i32 %108];
    i32 %109 = phi [^while.body4, i32 %79] [^entry12, i32 %126];
    i32 %110 = phi [^while.body4, i32 %80] [^entry12, i32 %110];
    i32 %111 = phi [^while.body4, i32 %81] [^entry12, i32 %111];
    i32 %112 = phi [^while.body4, i32 %81] [^entry12, i32 %112];
    i32 %113 = phi [^while.body4, i32 %79] [^entry12, i32 %126];
    i1 %114 = scmp eq i32 %113, i32 32;
    cbr i1 %114(prob = 0.5), ^b29, ^b26;
^entry11:
    i1 %115 = scmp gt i32 %89, i32 47;
    cbr i1 %115(prob = 0.5), ^b27, ^b30;
^b25:
    i1 %116 = scmp eq i32 %81, i32 37;
    ubr ^b28;
^b26:
    i1 %117 = scmp eq i32 %113, i32 10;
    ubr ^b29;
^b27:
    i1 %118 = scmp le i32 %89, i32 57;
    ubr ^b30;
^b28:
    i1 %119 = phi [^b25, i1 %116] [^b24, i1 true];
    cbr i1 %119(prob = 0.5), ^while.body4, ^b31;
^b29:
    i1 %120 = phi [^while.header9, i1 true] [^b26, i1 %117];
    cbr i1 %120(prob = 0.5), ^while.header10, ^if.else9;
^b30:
    i1 %121 = phi [^entry11, i1 false] [^b27, i1 %118];
    cbr i1 %121(prob = 0.5), ^b32, ^if.else10;
^b31:
    ubr ^while.body4;
^if.else9:
    ubr ^while.header10;
^while.header10:
    i32 %122 = phi [^b29, i32 1] [^if.else9, i32 0];
    i1 %123 = scmp neq i32 %122, i32 0;
    cbr i1 %123(prob = 0.97), ^entry12, ^entry13;
^if.else10:
    ubr ^b32;
^b32:
    i32 %124 = phi [^b30, i32 1] [^if.else10, i32 0];
    i1 %125 = scmp neq i32 %124, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then2, ^if.else11;
^entry12:
    i32 %126 = call () -> i32 @getch();
    ubr ^while.header9;
^if.then2:
    i32 %127 = add i32 %88, i32 -48;
    store i32* %num with i32 %127;
    ubr ^entry14;
^entry13:
    i1 %128 = scmp gt i32 %113, i32 47;
    cbr i1 %128(prob = 0.5), ^b33, ^b34;
^if.else11:
    store i32* %other with i32 %88;
    i32 %129 = call () -> i32 @getch();
    store i32* %last_char with i32 %129;
    store i32* %cur_token with i32 1;
    ubr ^entry15;
^b33:
    i1 %130 = scmp le i32 %113, i32 57;
    ubr ^b34;
^b34:
    i1 %131 = phi [^entry13, i1 false] [^b33, i1 %130];
    cbr i1 %131(prob = 0.5), ^b36, ^if.else12;
^entry14:
    i32 %132 = phi [^while.body5, i32 %132] [^if.then2, i32 %87];
    i32 %133 = phi [^while.body5, i32 %170] [^if.then2, i32 %127];
    i32 %134 = call () -> i32 @getch();
    store i32* %last_char with i32 %134;
    i1 %135 = scmp gt i32 %134, i32 47;
    cbr i1 %135(prob = 0.5), ^b35, ^b37;
^entry15:
    i32 %136 = phi [^b39, i32 %132] [^while.body6, i32 %136] [^if.else11, i32 %87];
    i32 %137 = load i32* %32;
    i1 %138 = scmp neq i32 %137, i32 0;
    cbr i1 %138(prob = 0.97), ^entry17, ^entry16;
^b35:
    i1 %139 = scmp le i32 %134, i32 57;
    ubr ^b37;
^if.else12:
    ubr ^b36;
^b36:
    i32 %140 = phi [^b34, i32 1] [^if.else12, i32 0];
    i1 %141 = scmp neq i32 %140, i32 0;
    cbr i1 %141(prob = 0.5), ^if.then3, ^if.else13;
^entry16:
    i32 %142 = load i32* %29;
    i32* %143 = getelementptr &(i32* %29)[i32 %142];
    i32 %144 = load i32* %143;
    ubr ^while.body1;
^b37:
    i1 %145 = phi [^entry14, i1 false] [^b35, i1 %139];
    cbr i1 %145(prob = 0.5), ^while.header11, ^if.else14;
^entry17:
    i32 %146 = load i32* %32;
    i32* %147 = getelementptr &(i32* %32)[i32 %146];
    i32 %148 = load i32* %147;
    i32 %149 = load i32* %32;
    i32 %150 = add i32 %149, i32 -1;
    store i32* %32 with i32 %150;
    i32 %151 = load i32* %29;
    i32* %152 = getelementptr &(i32* %29)[i32 %151];
    i32 %153 = load i32* %152;
    i32 %154 = load i32* %29;
    i32 %155 = add i32 %154, i32 -1;
    store i32* %29 with i32 %155;
    i32 %156 = load i32* %29;
    i32* %157 = getelementptr &(i32* %29)[i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = load i32* %29;
    i32 %160 = add i32 %159, i32 -1;
    store i32* %29 with i32 %160;
    i1 %161 = scmp eq i32 %148, i32 43;
    cbr i1 %161(prob = 0.5), ^if.then4, ^b38;
^if.then3:
    i32 %162 = add i32 %109, i32 -48;
    store i32* %num with i32 %162;
    ubr ^entry18;
^if.else13:
    store i32* %other with i32 %109;
    i32 %163 = call () -> i32 @getch();
    store i32* %last_char with i32 %163;
    store i32* %cur_token with i32 1;
    ubr ^entry19;
^if.then4:
    i32 %164 = add i32 %153, i32 %158;
    ubr ^while.body6;
^if.else14:
    ubr ^while.header11;
^while.header11:
    i32 %165 = phi [^b37, i32 1] [^if.else14, i32 0];
    i1 %166 = scmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.97), ^while.body5, ^b39;
^b38:
    i1 %167 = scmp eq i32 %148, i32 45;
    cbr i1 %167(prob = 0.5), ^if.then5, ^b40;
^while.body5:
    i32 %168 = mul i32 %133, i32 10;
    i32 %169 = add i32 %134, i32 -48;
    i32 %170 = add i32 %169, i32 %168;
    store i32* %num with i32 %170;
    ubr ^entry14;
^while.body6:
    i32 %171 = phi [^b48, i32 0] [^if.then4, i32 %164] [^if.then7, i32 %220] [^if.then5, i32 %181] [^if.then6, i32 %197] [^if.then9, i32 %234];
    i32 %172 = load i32* %29;
    i32 %173 = add i32 %172, i32 1;
    store i32* %29 with i32 %173;
    i32* %174 = getelementptr &(i32* %29)[i32 %173];
    store i32* %174 with i32 %171;
    ubr ^entry15;
^entry18:
    i32 %175 = phi [^while.body7, i32 %175] [^if.then3, i32 %108];
    i32 %176 = phi [^while.body7, i32 %228] [^if.then3, i32 %162];
    i32 %177 = phi [^while.body7, i32 %177] [^if.then3, i32 %111];
    i32 %178 = phi [^while.body7, i32 %178] [^if.then3, i32 %112];
    i32 %179 = call () -> i32 @getch();
    store i32* %last_char with i32 %179;
    i1 %180 = scmp gt i32 %179, i32 47;
    cbr i1 %180(prob = 0.5), ^b41, ^b42;
^b39:
    store i32* %cur_token with i32 0;
    ubr ^entry15;
^if.then5:
    i32 %181 = sub i32 %158, i32 %153;
    ubr ^while.body6;
^entry19:
    i32 %182 = phi [^while.body8, i32 %182] [^b49, i32 %175] [^if.else13, i32 %108];
    i32 %183 = phi [^while.body8, i32 %183] [^b49, i32 %179] [^if.else13, i32 %163];
    i32 %184 = phi [^while.body8, i32 %184] [^b49, i32 %176] [^if.else13, i32 %110];
    i32 %185 = phi [^while.body8, i32 %185] [^b49, i32 %177] [^if.else13, i32 %109];
    i32 %186 = phi [^while.body8, i32 %186] [^b49, i32 0] [^if.else13, i32 1];
    i32 %187 = phi [^while.body8, i32 %187] [^b49, i32 %178] [^if.else13, i32 %112];
    i32 %188 = load i32* %32;
    i1 %189 = scmp neq i32 %188, i32 0;
    cbr i1 %189(prob = 0.5), ^entry20, ^b43;
^b40:
    i1 %190 = scmp eq i32 %148, i32 42;
    cbr i1 %190(prob = 0.5), ^if.then6, ^b44;
^b41:
    i1 %191 = scmp le i32 %179, i32 57;
    ubr ^b42;
^b42:
    i1 %192 = phi [^entry18, i1 false] [^b41, i1 %191];
    cbr i1 %192(prob = 0.5), ^while.header12, ^if.else15;
^entry20:
    i32 %193 = load i32* %32;
    i32* %194 = getelementptr &(i32* %32)[i32 %193];
    i32 %195 = load i32* %194;
    i1 %196 = scmp eq i32 %195, i32 43;
    cbr i1 %196(prob = 0.5), ^b46, ^b45;
^if.then6:
    i32 %197 = mul i32 %153, i32 %158;
    ubr ^while.body6;
^b43:
    i1 %198 = phi [^entry19, i1 false] [^b58, i1 %246];
    cbr i1 %198(prob = 0.97), ^entry21, ^b47;
^b44:
    i1 %199 = scmp eq i32 %148, i32 47;
    cbr i1 %199(prob = 0.5), ^if.then7, ^b48;
^if.else15:
    ubr ^while.header12;
^b45:
    i1 %200 = scmp eq i32 %195, i32 45;
    ubr ^b46;
^while.header12:
    i32 %201 = phi [^b42, i32 1] [^if.else15, i32 0];
    i1 %202 = scmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.97), ^while.body7, ^b49;
^b46:
    i1 %203 = phi [^entry20, i1 true] [^b45, i1 %200];
    cbr i1 %203(prob = 0.5), ^b50, ^b51;
^entry21:
    i32 %204 = load i32* %32;
    i32* %205 = getelementptr &(i32* %32)[i32 %204];
    i32 %206 = load i32* %205;
    i32 %207 = load i32* %32;
    i32 %208 = add i32 %207, i32 -1;
    store i32* %32 with i32 %208;
    i32 %209 = load i32* %29;
    i32* %210 = getelementptr &(i32* %29)[i32 %209];
    i32 %211 = load i32* %210;
    i32 %212 = load i32* %29;
    i32 %213 = add i32 %212, i32 -1;
    store i32* %29 with i32 %213;
    i32 %214 = load i32* %29;
    i32* %215 = getelementptr &(i32* %29)[i32 %214];
    i32 %216 = load i32* %215;
    i32 %217 = load i32* %29;
    i32 %218 = add i32 %217, i32 -1;
    store i32* %29 with i32 %218;
    i1 %219 = scmp eq i32 %206, i32 43;
    cbr i1 %219(prob = 0.5), ^if.then8, ^b52;
^if.then7:
    i32 %220 = sdiv i32 %158, i32 %153;
    ubr ^while.body6;
^b47:
    i32 %221 = load i32* %32;
    i32 %222 = add i32 %221, i32 1;
    store i32* %32 with i32 %222;
    i32* %223 = getelementptr &(i32* %32)[i32 %222];
    store i32* %223 with i32 %187;
    i1 %224 = scmp neq i32 %186, i32 0;
    cbr i1 %224(prob = 0.5), ^entry6, ^b9;
^b48:
    i1 %225 = scmp eq i32 %148, i32 37;
    cbr i1 %225(prob = 0.5), ^if.then9, ^while.body6;
^while.body7:
    i32 %226 = mul i32 %176, i32 10;
    i32 %227 = add i32 %179, i32 -48;
    i32 %228 = add i32 %227, i32 %226;
    store i32* %num with i32 %228;
    ubr ^entry18;
^b49:
    store i32* %cur_token with i32 0;
    ubr ^entry19;
^if.then8:
    i32 %229 = add i32 %211, i32 %216;
    ubr ^while.body8;
^b50:
    i32 %230 = phi [^b60, i32 20] [^b46, i32 10] [^b63, i32 0];
    i1 %231 = scmp eq i32 %187, i32 43;
    cbr i1 %231(prob = 0.5), ^b55, ^b53;
^b51:
    i1 %232 = scmp eq i32 %195, i32 42;
    cbr i1 %232(prob = 0.5), ^b56, ^b54;
^b52:
    i1 %233 = scmp eq i32 %206, i32 45;
    cbr i1 %233(prob = 0.5), ^if.then10, ^b57;
^if.then9:
    i32 %234 = srem i32 %158, i32 %153;
    ubr ^while.body6;
^b53:
    i1 %235 = scmp eq i32 %187, i32 45;
    ubr ^b55;
^while.body8:
    i32 %236 = phi [^if.then13, i32 %258] [^if.then10, i32 %242] [^if.then11, i32 %250] [^if.then8, i32 %229] [^if.then12, i32 %254] [^b66, i32 0];
    i32 %237 = load i32* %29;
    i32 %238 = add i32 %237, i32 1;
    store i32* %29 with i32 %238;
    i32* %239 = getelementptr &(i32* %29)[i32 %238];
    store i32* %239 with i32 %236;
    ubr ^entry19;
^b54:
    i1 %240 = scmp eq i32 %195, i32 47;
    ubr ^b56;
^b55:
    i1 %241 = phi [^b50, i1 true] [^b53, i1 %235];
    cbr i1 %241(prob = 0.5), ^b58, ^b61;
^if.then10:
    i32 %242 = sub i32 %216, i32 %211;
    ubr ^while.body8;
^b56:
    i1 %243 = phi [^b51, i1 true] [^b54, i1 %240];
    cbr i1 %243(prob = 0.5), ^b60, ^b59;
^b57:
    i1 %244 = scmp eq i32 %206, i32 42;
    cbr i1 %244(prob = 0.5), ^if.then11, ^b62;
^b58:
    i32 %245 = phi [^b68, i32 20] [^b55, i32 10] [^b69, i32 0];
    i1 %246 = scmp ge i32 %230, i32 %245;
    ubr ^b43;
^b59:
    i1 %247 = scmp eq i32 %195, i32 37;
    ubr ^b60;
^b60:
    i1 %248 = phi [^b56, i1 true] [^b59, i1 %247];
    cbr i1 %248(prob = 0.5), ^b50, ^b63;
^b61:
    i1 %249 = scmp eq i32 %187, i32 42;
    cbr i1 %249(prob = 0.5), ^b65, ^b64;
^if.then11:
    i32 %250 = mul i32 %211, i32 %216;
    ubr ^while.body8;
^b62:
    i1 %251 = scmp eq i32 %206, i32 47;
    cbr i1 %251(prob = 0.5), ^if.then12, ^b66;
^b63:
    ubr ^b50;
^b64:
    i1 %252 = scmp eq i32 %187, i32 47;
    ubr ^b65;
^b65:
    i1 %253 = phi [^b64, i1 %252] [^b61, i1 true];
    cbr i1 %253(prob = 0.5), ^b68, ^b67;
^if.then12:
    i32 %254 = sdiv i32 %216, i32 %211;
    ubr ^while.body8;
^b66:
    i1 %255 = scmp eq i32 %206, i32 37;
    cbr i1 %255(prob = 0.5), ^if.then13, ^while.body8;
^b67:
    i1 %256 = scmp eq i32 %187, i32 37;
    ubr ^b68;
^b68:
    i1 %257 = phi [^b67, i1 %256] [^b65, i1 true];
    cbr i1 %257(prob = 0.5), ^b58, ^b69;
^if.then13:
    i32 %258 = srem i32 %216, i32 %211;
    ubr ^while.body8;
^b69:
    ubr ^b58;
}
