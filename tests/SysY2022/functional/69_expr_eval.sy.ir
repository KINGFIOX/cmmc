internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getch();
    [256 * i32]* %2 = ptrcast [256 * i32]* @oprs to [256 * i32]*;
    i32* %3 = getelementptr &([256 * i32]* %2)[i64 0][i64 0];
    [256 * i32]* %4 = ptrcast [256 * i32]* @ops to [256 * i32]*;
    i32* %5 = getelementptr &([256 * i32]* %4)[i64 0][i64 0];
    ubr ^while.body;
  ^while.body:
    i32 %6 = call () -> i32 @getch();
    i1 %7 = icmp eq i32 %6, i32 32;
    i1 %8 = icmp eq i32 %6, i32 10;
    i1 %9 = or i1 %7, i1 %8;
    cbr i1 %9(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %10 = add i32 %6, i32 -48;
    i1 %11 = icmp ult i32 %10, i32 10;
    cbr i1 %11(prob = 0.5), ^while.header, ^if.else;
  ^if.else:
    i32 %12 = call () -> i32 @getch();
    ubr ^b1;
  ^while.header:
    i32 %13 = phi [^b, i32 %10] [^while.body1, i32 %18];
    i32 %14 = call () -> i32 @getch();
    i32 %15 = add i32 %14, i32 -48;
    i1 %16 = icmp ult i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %17 = mul i32 %13, i32 10;
    i32 %18 = add i32 %15, i32 %17;
    ubr ^while.header;
  ^b1:
    i32 %19 = phi [^if.else, i32 %12] [^while.header, i32 %14];
    i32 %20 = phi [^if.else, i32 0] [^while.header, i32 %13];
    i32 %21 = phi [^if.else, i32 1] [^while.header, i32 0];
    i1 %22 = icmp neq i32 %0, i32 0;
    cbr i1 %22(prob = 0.984615), ^while.body2, ^b2;
  ^while.body2:
    i32 %23 = phi [^b1, i32 %19] [^b7, i32 %171];
    i32 %24 = phi [^b1, i32 %20] [^b7, i32 %172];
    i32 %25 = phi [^b1, i32 %21] [^b7, i32 %173];
    i32 %26 = phi [^b1, i32 %0] [^b7, i32 %175];
    ubr ^b3;
  ^b2:
    ret i32 0;
  ^b3:
    i64 %27 = phi [^while.body2, i64 0] [^b3, i64 %92];
    i32* %28 = getelementptr &(i32* %3)[i64 %27];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %28)[i64 4];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %28)[i64 5];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %28)[i64 6];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %28)[i64 7];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %28)[i64 8];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %28)[i64 9];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %28)[i64 10];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %28)[i64 11];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %28)[i64 12];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %28)[i64 13];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %28)[i64 14];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %28)[i64 15];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %28)[i64 16];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %28)[i64 17];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %28)[i64 18];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %28)[i64 19];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %28)[i64 20];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %28)[i64 21];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %28)[i64 22];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %28)[i64 23];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %28)[i64 24];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %28)[i64 25];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %28)[i64 26];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %28)[i64 27];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &(i32* %28)[i64 28];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &(i32* %28)[i64 29];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &(i32* %28)[i64 30];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &(i32* %28)[i64 31];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &(i32* %28)[i64 32];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &(i32* %28)[i64 33];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &(i32* %28)[i64 34];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &(i32* %28)[i64 35];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &(i32* %28)[i64 36];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &(i32* %28)[i64 37];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &(i32* %28)[i64 38];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &(i32* %28)[i64 39];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &(i32* %28)[i64 40];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &(i32* %28)[i64 41];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &(i32* %28)[i64 42];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &(i32* %28)[i64 43];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &(i32* %28)[i64 44];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &(i32* %28)[i64 45];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &(i32* %28)[i64 46];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &(i32* %28)[i64 47];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &(i32* %28)[i64 48];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &(i32* %28)[i64 49];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &(i32* %28)[i64 50];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &(i32* %28)[i64 51];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &(i32* %28)[i64 52];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &(i32* %28)[i64 53];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &(i32* %28)[i64 54];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &(i32* %28)[i64 55];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &(i32* %28)[i64 56];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &(i32* %28)[i64 57];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &(i32* %28)[i64 58];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &(i32* %28)[i64 59];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &(i32* %28)[i64 60];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &(i32* %28)[i64 61];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &(i32* %28)[i64 62];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &(i32* %28)[i64 63];
    store i32* %91 with i32 0;
    i64 %92 = add i64 %27, i64 64;
    i1 %93 = icmp slt i64 %92, i64 256;
    cbr i1 %93(prob = 0.75), ^b3, ^b4;
  ^b4:
    i64 %94 = phi [^b3, i64 0] [^b4, i64 %159];
    i32* %95 = getelementptr &(i32* %5)[i64 %94];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %95)[i64 1];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %95)[i64 2];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %95)[i64 3];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %95)[i64 4];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %95)[i64 5];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %95)[i64 6];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %95)[i64 7];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %95)[i64 8];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %95)[i64 9];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %95)[i64 10];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %95)[i64 11];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %95)[i64 12];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %95)[i64 13];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %95)[i64 14];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %95)[i64 15];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %95)[i64 16];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %95)[i64 17];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %95)[i64 18];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %95)[i64 19];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %95)[i64 20];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %95)[i64 21];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %95)[i64 22];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %95)[i64 23];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %95)[i64 24];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %95)[i64 25];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %95)[i64 26];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %95)[i64 27];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %95)[i64 28];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %95)[i64 29];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %95)[i64 30];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %95)[i64 31];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %95)[i64 32];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %95)[i64 33];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %95)[i64 34];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %95)[i64 35];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %95)[i64 36];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %95)[i64 37];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %95)[i64 38];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %95)[i64 39];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %95)[i64 40];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %95)[i64 41];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %95)[i64 42];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %95)[i64 43];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %95)[i64 44];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %95)[i64 45];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %95)[i64 46];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %95)[i64 47];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %95)[i64 48];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %95)[i64 49];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %95)[i64 50];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %95)[i64 51];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %95)[i64 52];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %95)[i64 53];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %95)[i64 54];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %95)[i64 55];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &(i32* %95)[i64 56];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %95)[i64 57];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %95)[i64 58];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %95)[i64 59];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %95)[i64 60];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %95)[i64 61];
    store i32* %156 with i32 0;
    i32* %157 = getelementptr &(i32* %95)[i64 62];
    store i32* %157 with i32 0;
    i32* %158 = getelementptr &(i32* %95)[i64 63];
    store i32* %158 with i32 0;
    i64 %159 = add i64 %94, i64 64;
    i1 %160 = icmp slt i64 %159, i64 256;
    cbr i1 %160(prob = 0.75), ^b4, ^b5;
  ^b5:
    i1 %161 = icmp neq i32 %25, i32 0;
    cbr i1 %161(prob = 0.5), ^if.then, ^b6;
  ^if.then:
    i32 %162 = phi [^b5, i32 %23] [^b19, i32 %262];
    i32 %163 = phi [^b5, i32 %24] [^b19, i32 %263];
    i32 %164 = phi [^b5, i32 %25] [^b19, i32 %264];
    call (i32) -> void @putch(i32 112);
    call (i32) -> void @putch(i32 97);
    call (i32) -> void @putch(i32 110);
    call (i32) -> void @putch(i32 105);
    call (i32) -> void @putch(i32 99);
    call (i32) -> void @putch(i32 33);
    call (i32) -> void @putch(i32 10);
    ubr ^b7;
  ^b6:
    i32 %165 = load i32* %3;
    i32 %166 = add i32 %165, i32 1;
    store i32* %3 with i32 %166;
    i32* %167 = getelementptr &(i32* %3)[i32 %166];
    store i32* %167 with i32 %24;
    i1 %168 = icmp eq i32 %23, i32 32;
    i1 %169 = icmp eq i32 %23, i32 10;
    i1 %170 = or i1 %168, i1 %169;
    cbr i1 %170(prob = 0.984615), ^while.body3, ^b8;
  ^b7:
    i32 %171 = phi [^if.then, i32 %162] [^b15, i32 %234];
    i32 %172 = phi [^if.then, i32 %163] [^b15, i32 %235];
    i32 %173 = phi [^if.then, i32 %164] [^b15, i32 %236];
    i32 %174 = phi [^if.then, i32 -1] [^b15, i32 %242];
    call (i32) -> void @putint(i32 %174);
    call (i32) -> void @putch(i32 10);
    i32 %175 = add i32 %26, i32 -1;
    i1 %176 = icmp neq i32 %175, i32 0;
    cbr i1 %176(prob = 0.984615), ^while.body2, ^b2;
  ^while.body3:
    i32 %177 = call () -> i32 @getch();
    i1 %178 = icmp eq i32 %177, i32 32;
    i1 %179 = icmp eq i32 %177, i32 10;
    i1 %180 = or i1 %178, i1 %179;
    cbr i1 %180(prob = 0.984615), ^while.body3, ^b8;
  ^b8:
    i32 %181 = phi [^b6, i32 %23] [^while.body3, i32 %177];
    i32 %182 = add i32 %181, i32 -48;
    i1 %183 = icmp ult i32 %182, i32 10;
    cbr i1 %183(prob = 0.5), ^while.header1, ^if.else1;
  ^if.else1:
    i32 %184 = call () -> i32 @getch();
    ubr ^while.body5;
  ^while.header1:
    i32 %185 = phi [^b8, i32 %182] [^while.body4, i32 %190];
    i32 %186 = call () -> i32 @getch();
    i32 %187 = add i32 %186, i32 -48;
    i1 %188 = icmp ult i32 %187, i32 10;
    cbr i1 %188(prob = 0.984615), ^while.body4, ^b9;
  ^while.body4:
    i32 %189 = mul i32 %185, i32 10;
    i32 %190 = add i32 %187, i32 %189;
    ubr ^while.header1;
  ^while.body5:
    i32 %191 = phi [^if.else1, i32 %24] [^if.else4, i32 %263];
    i32 %192 = phi [^if.else1, i32 %184] [^if.else4, i32 %319];
    i32 %193 = phi [^if.else1, i32 %181] [^if.else4, i32 %313];
    i1 %194 = icmp eq i32 %193, i32 43;
    i1 %195 = icmp eq i32 %193, i32 45;
    i1 %196 = or i1 %194, i1 %195;
    cbr i1 %196(prob = 0.5), ^b11, ^b10;
  ^b9:
    i32 %197 = phi [^while.header1, i32 %185] [^b11, i32 %191] [^while.header6, i32 %320];
    i32 %198 = phi [^while.header1, i32 %186] [^b11, i32 %192] [^while.header6, i32 %321];
    i1 %199 = icmp eq i32 %198, i32 32;
    i1 %200 = icmp eq i32 %198, i32 10;
    i1 %201 = or i1 %199, i1 %200;
    cbr i1 %201(prob = 0.984615), ^while.body6, ^b12;
  ^b10:
    i1 %202 = icmp eq i32 %193, i32 42;
    i1 %203 = icmp eq i32 %193, i32 47;
    i1 %204 = or i1 %202, i1 %203;
    i1 %205 = icmp eq i32 %193, i32 37;
    i1 %206 = or i1 %204, i1 %205;
    i32 %207 = select i1 %206 ? i32 20 : i32 0;
    ubr ^b11;
  ^b11:
    i32 %208 = phi [^while.body5, i32 10] [^b10, i32 %207];
    i1 %209 = icmp eq i32 %208, i32 0;
    cbr i1 %209(prob = 0.5), ^b9, ^b13;
  ^while.body6:
    i32 %210 = call () -> i32 @getch();
    i1 %211 = icmp eq i32 %210, i32 32;
    i1 %212 = icmp eq i32 %210, i32 10;
    i1 %213 = or i1 %211, i1 %212;
    cbr i1 %213(prob = 0.984615), ^while.body6, ^b12;
  ^b12:
    i32 %214 = phi [^b9, i32 %198] [^while.body6, i32 %210];
    i32 %215 = add i32 %214, i32 -48;
    i1 %216 = icmp ult i32 %215, i32 10;
    cbr i1 %216(prob = 0.5), ^while.header2, ^if.else2;
  ^if.else2:
    i32 %217 = call () -> i32 @getch();
    ubr ^while.header3;
  ^b13:
    i1 %218 = icmp eq i32 %192, i32 32;
    i1 %219 = icmp eq i32 %192, i32 10;
    i1 %220 = or i1 %218, i1 %219;
    cbr i1 %220(prob = 0.984615), ^while.body8, ^b14;
  ^while.header2:
    i32 %221 = phi [^b12, i32 %215] [^while.body7, i32 %226];
    i32 %222 = call () -> i32 @getch();
    i32 %223 = add i32 %222, i32 -48;
    i1 %224 = icmp ult i32 %223, i32 10;
    cbr i1 %224(prob = 0.984615), ^while.body7, ^while.header3;
  ^while.body7:
    i32 %225 = mul i32 %221, i32 10;
    i32 %226 = add i32 %223, i32 %225;
    ubr ^while.header2;
  ^while.body8:
    i32 %227 = call () -> i32 @getch();
    i1 %228 = icmp eq i32 %227, i32 32;
    i1 %229 = icmp eq i32 %227, i32 10;
    i1 %230 = or i1 %228, i1 %229;
    cbr i1 %230(prob = 0.984615), ^while.body8, ^b14;
  ^b14:
    i32 %231 = phi [^b13, i32 %192] [^while.body8, i32 %227];
    i32 %232 = add i32 %231, i32 -48;
    i1 %233 = icmp ult i32 %232, i32 10;
    cbr i1 %233(prob = 0.5), ^while.header4, ^if.else3;
  ^while.header3:
    i32 %234 = phi [^if.else2, i32 %217] [^while.header2, i32 %222];
    i32 %235 = phi [^if.else2, i32 %197] [^while.header2, i32 %221];
    i32 %236 = phi [^if.else2, i32 1] [^while.header2, i32 0];
    i32 %237 = load i32* %5;
    i1 %238 = icmp neq i32 %237, i32 0;
    cbr i1 %238(prob = 0.984615), ^while.body9, ^b15;
  ^if.else3:
    i32 %239 = call () -> i32 @getch();
    ubr ^while.header5;
  ^b15:
    i32 %240 = load i32* %3;
    i32* %241 = getelementptr &(i32* %3)[i32 %240];
    i32 %242 = load i32* %241;
    ubr ^b7;
  ^while.body9:
    i32 %243 = phi [^while.header3, i32 %237] [^b17, i32 %274];
    i32* %244 = getelementptr &(i32* %5)[i32 %243];
    i32 %245 = load i32* %244;
    i32 %246 = add i32 %243, i32 -1;
    store i32* %5 with i32 %246;
    i32 %247 = load i32* %3;
    i32* %248 = getelementptr &(i32* %3)[i32 %247];
    i32 %249 = load i32* %248;
    i32 %250 = add i32 %247, i32 -1;
    store i32* %3 with i32 %250;
    i32* %251 = getelementptr &(i32* %248)[i64 -1];
    i32 %252 = load i32* %251;
    i32 %253 = add i32 %247, i32 -2;
    store i32* %3 with i32 %253;
    i1 %254 = icmp eq i32 %245, i32 43;
    cbr i1 %254(prob = 0.5), ^if.then1, ^b16;
  ^while.header4:
    i32 %255 = phi [^b14, i32 %232] [^while.body10, i32 %261];
    i32 %256 = call () -> i32 @getch();
    i32 %257 = add i32 %256, i32 -48;
    i1 %258 = icmp ult i32 %257, i32 10;
    cbr i1 %258(prob = 0.984615), ^while.body10, ^while.header5;
  ^if.then1:
    i32 %259 = add i32 %249, i32 %252;
    ubr ^b17;
  ^while.body10:
    i32 %260 = mul i32 %255, i32 10;
    i32 %261 = add i32 %257, i32 %260;
    ubr ^while.header4;
  ^while.header5:
    i32 %262 = phi [^if.else3, i32 %239] [^while.header4, i32 %256] [^b28, i32 %262];
    i32 %263 = phi [^if.else3, i32 %191] [^while.header4, i32 %255] [^b28, i32 %263];
    i32 %264 = phi [^if.else3, i32 1] [^while.header4, i32 0] [^b28, i32 %264];
    i32 %265 = load i32* %5;
    i32* %266 = getelementptr &(i32* %5)[i32 %265];
    i1 %267 = icmp neq i32 %265, i32 0;
    cbr i1 %267(prob = 0.5), ^b18, ^b19;
  ^b16:
    i1 %268 = icmp eq i32 %245, i32 45;
    cbr i1 %268(prob = 0.5), ^if.then2, ^b20;
  ^if.then2:
    i32 %269 = sub i32 %252, i32 %249;
    ubr ^b17;
  ^b17:
    i32 %270 = phi [^if.then1, i32 %259] [^if.then2, i32 %269] [^if.then3, i32 %284] [^if.then4, i32 %308] [^b26, i32 0] [^if.then6, i32 %318];
    i32 %271 = load i32* %3;
    i32 %272 = add i32 %271, i32 1;
    store i32* %3 with i32 %272;
    i32* %273 = getelementptr &(i32* %3)[i32 %272];
    store i32* %273 with i32 %270;
    i32 %274 = load i32* %5;
    i1 %275 = icmp neq i32 %274, i32 0;
    cbr i1 %275(prob = 0.984615), ^while.body9, ^b15;
  ^b18:
    i32 %276 = load i32* %266;
    i1 %277 = icmp eq i32 %276, i32 43;
    i1 %278 = icmp eq i32 %276, i32 45;
    i1 %279 = or i1 %277, i1 %278;
    cbr i1 %279(prob = 0.5), ^b21, ^b22;
  ^b19:
    i32 %280 = add i32 %265, i32 1;
    store i32* %5 with i32 %280;
    i32* %281 = getelementptr &(i32* %266)[i64 1];
    store i32* %281 with i32 %193;
    i1 %282 = icmp neq i32 %264, i32 0;
    cbr i1 %282(prob = 0.5), ^if.then, ^b23;
  ^b20:
    i1 %283 = icmp eq i32 %245, i32 42;
    cbr i1 %283(prob = 0.5), ^if.then3, ^b24;
  ^if.then3:
    i32 %284 = mul i32 %249, i32 %252;
    ubr ^b17;
  ^b21:
    i1 %285 = icmp slt i32 %208, i32 11;
    cbr i1 %285(prob = 0.984615), ^while.body11, ^b19;
  ^b22:
    i1 %286 = icmp eq i32 %276, i32 42;
    i1 %287 = icmp eq i32 %276, i32 47;
    i1 %288 = or i1 %286, i1 %287;
    i1 %289 = icmp eq i32 %276, i32 37;
    i1 %290 = or i1 %288, i1 %289;
    i1 %291 = icmp slt i32 %208, i32 1;
    i1 %292 = or i1 %290, i1 %291;
    cbr i1 %292(prob = 0.984615), ^while.body11, ^b19;
  ^b23:
    i32 %293 = load i32* %3;
    i32 %294 = add i32 %293, i32 1;
    store i32* %3 with i32 %294;
    i32* %295 = getelementptr &(i32* %3)[i32 %294];
    store i32* %295 with i32 %263;
    i1 %296 = icmp eq i32 %262, i32 32;
    i1 %297 = icmp eq i32 %262, i32 10;
    i1 %298 = or i1 %296, i1 %297;
    cbr i1 %298(prob = 0.984615), ^while.body12, ^b25;
  ^b24:
    i1 %299 = icmp eq i32 %245, i32 47;
    cbr i1 %299(prob = 0.5), ^if.then4, ^b26;
  ^while.body11:
    i32 %300 = add i32 %265, i32 -1;
    store i32* %5 with i32 %300;
    i32 %301 = load i32* %3;
    i32* %302 = getelementptr &(i32* %3)[i32 %301];
    i32 %303 = load i32* %302;
    i32 %304 = add i32 %301, i32 -1;
    store i32* %3 with i32 %304;
    i32* %305 = getelementptr &(i32* %302)[i64 -1];
    i32 %306 = load i32* %305;
    i32 %307 = add i32 %301, i32 -2;
    store i32* %3 with i32 %307;
    cbr i1 %277(prob = 0.5), ^if.then5, ^b27;
  ^if.then4:
    i32 %308 = sdiv i32 %252, i32 %249;
    ubr ^b17;
  ^while.body12:
    i32 %309 = call () -> i32 @getch();
    i1 %310 = icmp eq i32 %309, i32 32;
    i1 %311 = icmp eq i32 %309, i32 10;
    i1 %312 = or i1 %310, i1 %311;
    cbr i1 %312(prob = 0.984615), ^while.body12, ^b25;
  ^b25:
    i32 %313 = phi [^b23, i32 %262] [^while.body12, i32 %309];
    i32 %314 = add i32 %313, i32 -48;
    i1 %315 = icmp ult i32 %314, i32 10;
    cbr i1 %315(prob = 0.5), ^while.header6, ^if.else4;
  ^b26:
    i1 %316 = icmp eq i32 %245, i32 37;
    cbr i1 %316(prob = 0.5), ^if.then6, ^b17;
  ^if.then5:
    i32 %317 = add i32 %303, i32 %306;
    ubr ^b28;
  ^b27:
    cbr i1 %278(prob = 0.5), ^if.then7, ^b29;
  ^if.then6:
    i32 %318 = srem i32 %252, i32 %249;
    ubr ^b17;
  ^if.else4:
    i32 %319 = call () -> i32 @getch();
    ubr ^while.body5;
  ^while.header6:
    i32 %320 = phi [^b25, i32 %314] [^while.body13, i32 %331];
    i32 %321 = call () -> i32 @getch();
    i32 %322 = add i32 %321, i32 -48;
    i1 %323 = icmp uge i32 %322, i32 10;
    cbr i1 %323(prob = 0.0153846), ^b9, ^while.body13;
  ^b28:
    i32 %324 = phi [^if.then5, i32 %317] [^if.then7, i32 %328] [^if.then8, i32 %332] [^if.then9, i32 %334] [^b31, i32 0] [^if.then10, i32 %336];
    i32 %325 = load i32* %3;
    i32 %326 = add i32 %325, i32 1;
    store i32* %3 with i32 %326;
    i32* %327 = getelementptr &(i32* %3)[i32 %326];
    store i32* %327 with i32 %324;
    ubr ^while.header5;
  ^if.then7:
    i32 %328 = sub i32 %306, i32 %303;
    ubr ^b28;
  ^b29:
    i1 %329 = icmp eq i32 %276, i32 42;
    cbr i1 %329(prob = 0.5), ^if.then8, ^b30;
  ^while.body13:
    i32 %330 = mul i32 %320, i32 10;
    i32 %331 = add i32 %322, i32 %330;
    ubr ^while.header6;
  ^if.then8:
    i32 %332 = mul i32 %303, i32 %306;
    ubr ^b28;
  ^b30:
    i1 %333 = icmp eq i32 %276, i32 47;
    cbr i1 %333(prob = 0.5), ^if.then9, ^b31;
  ^if.then9:
    i32 %334 = sdiv i32 %306, i32 %303;
    ubr ^b28;
  ^b31:
    i1 %335 = icmp eq i32 %276, i32 37;
    cbr i1 %335(prob = 0.5), ^if.then10, ^b28;
  ^if.then10:
    i32 %336 = srem i32 %306, i32 %303;
    ubr ^b28;
}
internal [256 * i32]* @oprs, align 8 { Flexible };
internal [256 * i32]* @ops, align 8 { Flexible };
