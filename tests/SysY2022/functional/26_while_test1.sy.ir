internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @doubleWhile() -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %i with i32 5;
    store i32* %j with i32 0;
    store i32* %j with i32 7;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 100;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i32 %5 = add i32 %4, i32 30;
    store i32* %i with i32 %5;
    ubr ^while.header1;
^b:
    i32 %6 = load i32* %j;
    ret i32 %6;
^while.header1:
    i32 %7 = load i32* %j;
    i1 %8 = scmp lt i32 %7, i32 100;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %11 = load i32* %j;
    i32 %12 = add i32 %11, i32 6;
    store i32* %j with i32 %12;
    ubr ^while.header1;
^b1:
    i32 %13 = load i32* %j;
    i32 %14 = sub i32 %13, i32 100;
    store i32* %j with i32 %14;
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call () -> i32 @doubleWhile();
    ret i32 %0;
}
