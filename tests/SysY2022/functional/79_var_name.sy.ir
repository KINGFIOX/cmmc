internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [20 * i32]* %VLDTJUr0 = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 19];
    store i32* %19 with i32 0;
    ubr ^while.body;
^while.body:
    i32 %20 = phi [^entry, i32 2] [^while.body, i32 %31];
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %30];
    i32* %22 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &(i32* %22)[i64 -1];
    i32 %25 = load i32* %24;
    i32* %26 = getelementptr &(i32* %22)[i64 -2];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %23, i32 %25;
    i32 %29 = add i32 %28, i32 %27;
    store i32* %22 with i32 %29;
    i32 %30 = add i32 %29, i32 %21;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 10);
    i32 %31 = add i32 %20, i32 1;
    i1 %32 = scmp lt i32 %31, i32 20;
    cbr i1 %32(prob = 0.94), ^while.body, ^b;
^b:
    ret i32 %30;
}
