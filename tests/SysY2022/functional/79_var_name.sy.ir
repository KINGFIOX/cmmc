internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    [20 * i32]* %VLDTJUr0eYj3UiHh = alloc [20 * i32];
    i32* %0 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([20 * i32]* %VLDTJUr0eYj3UiHh)[i32 0][i32 19];
    store i32* %19 with i32 0;
    ubr [ ^while.body [20 * i32]* %VLDTJUr0eYj3UiHh, i32 2, i32 0 ];
^while.body([20 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([20 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %arg1, i32 1;
    i32* %3 = getelementptr &([20 * i32]* %arg)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %1, i32 %4;
    i32 %6 = sub i32 %arg1, i32 2;
    i32* %7 = getelementptr &([20 * i32]* %arg)[i32 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %5, i32 %8;
    store i32* %0 with i32 %9;
    i32 %10 = add i32 %arg2, i32 %9;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    i32 %11 = add i32 %arg1, i32 1;
    i1 %12 = scmp lt i32 %11, i32 20;
    cbr i1 %12, [ ^while.body [20 * i32]* %arg, i32 %11, i32 %10 ], [ ^b i32 %10 ];
^b(i32 %arg):
    ret i32 %arg;
}
