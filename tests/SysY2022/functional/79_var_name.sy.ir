internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %V62vtYqj = alloc i32;
    [20 * i32]* %VLDTJUr0 = alloc [20 * i32];
    i32* %Cy92k8jO = alloc i32;
    i32* %xU4UVdo6 = alloc i32;
    store i32* %xU4UVdo6 with i32 2;
    store i32* %Cy92k8jO with i32 20;
    i32* %0 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 1][i64 0];
    i32* %3 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 5];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 6];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 10];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 16];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 17];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 18];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 19];
    store i32* %20 with i32 0;
    store i32* %V62vtYqj with i32 0;
    ubr ^while.header;
^while.header:
    i32 %21 = load i32* %xU4UVdo6;
    i1 %22 = scmp lt i32 %21, i32 20;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %25 = load i32* %xU4UVdo6;
    i64 %26 = sext i32 %25 to i64;
    i32* %27 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %26];
    i32 %28 = load i32* %xU4UVdo6;
    i64 %29 = sext i32 %28 to i64;
    i32* %30 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %29];
    i32 %31 = load i32* %30;
    i32 %32 = load i32* %xU4UVdo6;
    i32 %33 = sub i32 %32, i32 1;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %34];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %31, i32 %36;
    i32 %38 = load i32* %xU4UVdo6;
    i32 %39 = sub i32 %38, i32 2;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %40];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %37, i32 %42;
    store i32* %27 with i32 %43;
    i32 %44 = load i32* %V62vtYqj;
    i32 %45 = load i32* %xU4UVdo6;
    i64 %46 = sext i32 %45 to i64;
    i32* %47 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %46];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %44, i32 %48;
    store i32* %V62vtYqj with i32 %49;
    i32 %50 = load i32* %xU4UVdo6;
    i64 %51 = sext i32 %50 to i64;
    i32* %52 = getelementptr &([20 * i32]* %VLDTJUr0)[i64 0][i64 %51];
    i32 %53 = load i32* %52;
    call (i32) -> void @putint(i32 %53);
    call (i32) -> void @putch(i32 10);
    i32 %54 = load i32* %xU4UVdo6;
    i32 %55 = add i32 %54, i32 1;
    store i32* %xU4UVdo6 with i32 %55;
    ubr ^while.header;
^b:
    i32 %56 = load i32* %V62vtYqj;
    ret i32 %56;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
