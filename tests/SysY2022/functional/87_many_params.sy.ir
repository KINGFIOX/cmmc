internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %0;
    i32* %a2 = alloc i32;
    store i32* %a2 with i32 %1;
    i32* %a3 = alloc i32;
    store i32* %a3 with i32 %2;
    i32* %a4 = alloc i32;
    store i32* %a4 with i32 %3;
    i32* %a5 = alloc i32;
    store i32* %a5 with i32 %4;
    i32* %a6 = alloc i32;
    store i32* %a6 with i32 %5;
    i32* %a7 = alloc i32;
    store i32* %a7 with i32 %6;
    i32* %a8 = alloc i32;
    store i32* %a8 with i32 %7;
    i32* %a9 = alloc i32;
    store i32* %a9 with i32 %8;
    i32* %a10 = alloc i32;
    store i32* %a10 with i32 %9;
    i32* %a11 = alloc i32;
    store i32* %a11 with i32 %10;
    i32* %a12 = alloc i32;
    store i32* %a12 with i32 %11;
    i32* %a13 = alloc i32;
    store i32* %a13 with i32 %12;
    i32* %a14 = alloc i32;
    store i32* %a14 with i32 %13;
    i32* %a15 = alloc i32;
    store i32* %a15 with i32 %14;
    i32* %a16 = alloc i32;
    store i32* %a16 with i32 %15;
    [16 * i32]* %arr = alloc [16 * i32];
    i32* %16 = getelementptr &([16 * i32]* %arr)[i32 0][i32 0];
    store i32* %16 with i32 %0;
    i32* %17 = getelementptr &([16 * i32]* %arr)[i32 0][i32 1];
    store i32* %17 with i32 %1;
    i32* %18 = getelementptr &([16 * i32]* %arr)[i32 0][i32 2];
    store i32* %18 with i32 %2;
    i32* %19 = getelementptr &([16 * i32]* %arr)[i32 0][i32 3];
    store i32* %19 with i32 %3;
    i32* %20 = getelementptr &([16 * i32]* %arr)[i32 0][i32 4];
    store i32* %20 with i32 %4;
    i32* %21 = getelementptr &([16 * i32]* %arr)[i32 0][i32 5];
    store i32* %21 with i32 %5;
    i32* %22 = getelementptr &([16 * i32]* %arr)[i32 0][i32 6];
    store i32* %22 with i32 %6;
    i32* %23 = getelementptr &([16 * i32]* %arr)[i32 0][i32 7];
    store i32* %23 with i32 %7;
    i32* %24 = getelementptr &([16 * i32]* %arr)[i32 0][i32 8];
    store i32* %24 with i32 %8;
    i32* %25 = getelementptr &([16 * i32]* %arr)[i32 0][i32 9];
    store i32* %25 with i32 %9;
    i32* %26 = getelementptr &([16 * i32]* %arr)[i32 0][i32 10];
    store i32* %26 with i32 %10;
    i32* %27 = getelementptr &([16 * i32]* %arr)[i32 0][i32 11];
    store i32* %27 with i32 %11;
    i32* %28 = getelementptr &([16 * i32]* %arr)[i32 0][i32 12];
    store i32* %28 with i32 %12;
    i32* %29 = getelementptr &([16 * i32]* %arr)[i32 0][i32 13];
    store i32* %29 with i32 %13;
    i32* %30 = getelementptr &([16 * i32]* %arr)[i32 0][i32 14];
    store i32* %30 with i32 %14;
    i32* %31 = getelementptr &([16 * i32]* %arr)[i32 0][i32 15];
    store i32* %31 with i32 %15;
    i32* %len = alloc i32;
    store i32* %len with i32 16;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %len, i32* %i, i32* %a11, i32* %18, i32* %20, i32* %28, i32* %a10, i32* %a16, i32* %23, i32* %a2, i32* %26, i32* %a13, i32* %27, i32* %25, i32* %31, i32* %a5, i32* %29, i32* %a7, i32* %24, i32* %a3, i32* %30, i32* %a4, i32* %a6, i32* %a9, i32* %a8, i32* %22, i32* %19, i32* %a12, i32* %a14, i32* %17, i32* %a15, i32* %16, i32* %a1, i32* %21, i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 16, i32 0, [16 * i32]* %arr ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, [16 * i32]* %arg52):
    i32* %j = alloc i32;
    i32 %0 = add i32 %arg51, i32 1;
    store i32* %j with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg50;
    cbr i1 %1, [ ^while.body1 i32* %arg, i32* %j, i32* %arg1, i32* %arg30, i32* %arg29, i32* %arg28, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg12, i32* %arg13, i32* %arg8, i32* %arg9, i32* %arg11, i32* %arg10, i32* %arg7, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg14, i32* %arg3, i32* %arg2, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %0, [16 * i32]* %arg52 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg50, i32* %arg20, i32* %arg19, i32* %arg18, i32* %arg5, i32* %arg6, i32* %arg8, i32* %arg9, i32* %arg7, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg15, i32* %arg16, i32* %arg17, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, [16 * i32]* %arg52 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, i32 %arg53, [16 * i32]* %arg54):
    i32* %0 = getelementptr &([16 * i32]* %arg54)[i32 0][i32 %arg52];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([16 * i32]* %arg54)[i32 0][i32 %arg53];
    i32 %3 = load i32* %2;
    i1 %4 = scmp lt i32 %1, i32 %3;
    cbr i1 %4, [ ^indirect1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg18, i32* %arg17, i32* %arg16, i32* %arg9, i32* %arg10, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg12, i32* %arg11, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg52, i32 %arg53, [16 * i32]* %arg54 ], [ ^b i32* %arg, i32* %arg2, i32* %arg1, i32* %arg21, i32* %arg20, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg15, i32* %arg11, i32* %arg12, i32* %arg14, i32* %arg13, i32* %arg9, i32* %arg10, i32* %arg19, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, i32 %arg53, [16 * i32]* %arg54 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, [16 * i32]* %arg53):
    i32 %0 = add i32 %arg52, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg2, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg31, i32* %arg30, i32* %arg29, i32* %arg6, i32* %arg7, i32* %arg10, i32* %arg8, i32* %arg9, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %0, [16 * i32]* %arg53 ], [ ^entry1 i32* %arg6, i32* %arg13, i32* %arg11, i32* %arg14, i32* %arg5, i32* %arg8, i32* %arg20, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg24, i32* %arg33, i32* %arg3, i32* %arg15, i32* %arg26, i32* %arg21, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32 %arg35, i32 %arg36, [16 * i32]* %arg37):
    i32* %0 = getelementptr &([16 * i32]* %arg37)[i32 0][i32 %arg35];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([16 * i32]* %arg37)[i32 0][i32 %arg36];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32 %4 = load i32* %arg1;
    i32* %5 = getelementptr &([16 * i32]* %arg37)[i32 0][i32 %4];
    store i32* %5 with i32 %1;
    i32 %6 = load i32* %arg2;
    i32 %7 = load i32* %arg;
    i32 %8 = load i32* %arg10;
    i32 %9 = load i32* %arg34;
    i32 %10 = load i32* %arg32;
    i32 %11 = load i32* %arg8;
    i32 %12 = load i32* %arg31;
    i32 %13 = load i32* %arg18;
    i32 %14 = load i32* %arg13;
    i32 %15 = load i32* %arg27;
    i32 %16 = load i32* %arg28;
    i32 %17 = load i32* %arg21;
    i32 %18 = load i32* %arg26;
    i32 %19 = load i32* %arg19;
    i32 %20 = load i32* %arg25;
    i32 %21 = load i32* %arg23;
    i32 %22 = load i32* %arg11;
    i32 %23 = load i32* %arg4;
    i32 %24 = add i32 %4, i32 1;
    store i32* %arg1 with i32 %24;
    i1 %25 = scmp lt i32 %24, i32 %7;
    cbr i1 %25, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg34, i32* %arg33, i32* %arg32, i32* %arg15, i32* %arg14, i32* %arg13, i32* %arg6, i32* %arg7, i32* %arg12, i32* %arg11, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32 %23, i32 %22, i32 %21, i32 %20, i32 %19, i32 %18, i32 %17, i32 %16, i32 %15, i32 %14, i32 %13, i32 %12, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7, i32 %6, i32 %24, [16 * i32]* %arg37 ], [ ^indirect i32* %arg, i32* %arg2, i32 %7, i32* %arg24, i32* %arg23, i32* %arg22, i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg6, i32* %arg7, i32* %arg16, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg15, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %23, i32 %22, i32 %21, i32 %20, i32 %19, i32 %18, i32 %17, i32 %16, i32 %15, i32 %14, i32 %13, i32 %12, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7, i32 %6, [16 * i32]* %arg37 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, i32 %arg53, [16 * i32]* %arg54):
    i32 %0 = add i32 %arg53, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg51;
    cbr i1 %1, [ ^while.body1 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg31, i32* %arg30, i32* %arg29, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg13, i32* %arg14, i32* %arg9, i32* %arg10, i32* %arg12, i32* %arg11, i32* %arg8, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg15, i32* %arg4, i32* %arg3, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, i32 %0, [16 * i32]* %arg54 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg51, i32* %arg21, i32* %arg20, i32* %arg19, i32* %arg6, i32* %arg7, i32* %arg9, i32* %arg10, i32* %arg8, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg16, i32* %arg17, i32* %arg18, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39, i32 %arg40, i32 %arg41, i32 %arg42, i32 %arg43, i32 %arg44, i32 %arg45, i32 %arg46, i32 %arg47, i32 %arg48, i32 %arg49, i32 %arg50, i32 %arg51, i32 %arg52, [16 * i32]* %arg54 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31):
    i32 %0 = load i32* %arg14;
    i32 %1 = load i32* %arg10;
    i32 %2 = load i32* %arg9;
    i32 %3 = load i32* %arg15;
    i32 %4 = load i32* %arg8;
    i32 %5 = load i32* %arg7;
    i32 %6 = load i32* %arg6;
    i32 %7 = load i32* %arg5;
    i32 %8 = load i32* %arg4;
    i32 %9 = load i32* %arg3;
    i32 %10 = load i32* %arg2;
    i32 %11 = load i32* %arg1;
    i32 %12 = load i32* %arg;
    i32 %13 = load i32* %arg11;
    i32 %14 = load i32* %arg12;
    i32 %15 = load i32* %arg13;
    i1 %16 = scmp eq i32 %0, i32 0;
    cbr i1 %16, [ ^entry2 i32 %1 ], [ ^indirect2 i32 %arg31, i32 %arg30, i32 %arg29, i32 %9, i32 %8, i32 %7, i32 %6, i32 %5, i32 %4, i32 %11, i32 %2, i32 %3, i32 %10, i32 %1, i32 %12, i32 %13, i32 %14, i32 %15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %0, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28 ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31):
    i32 %0 = sub i32 %arg21, i32 1;
    i32 %1 = add i32 %arg10, i32 %arg13;
    i32 %2 = srem i32 %1, i32 998244353;
    i1 %3 = scmp eq i32 %0, i32 0;
    cbr i1 %3, [ ^entry2 i32 %2 ], [ ^indirect2 i32 0, i32 %arg, i32 %arg1, i32 %arg12, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg14, i32 %arg11, i32 %arg8, i32 %arg9, i32 %2, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg22, i32 %0, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg2 ];
^entry2(i32 %arg):
    i32 %0 = sub i32 %arg, i32 2;
    i32 %1 = mul i32 %arg, i32 31;
    i32 %2 = add i32 %1, i32 281650;
    i32 %3 = add i32 %2, i32 %0;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
